
MassStorageHost.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000002e  00800100  0000255e  000025f2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000255e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000023  0080012e  0080012e  00002620  2**0
                  ALLOC
  3 .stab         00000f24  00000000  00000000  00002620  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000030b  00000000  00000000  00003544  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000004c8  00000000  00000000  00003850  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00006d0b  00000000  00000000  00003d18  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002034  00000000  00000000  0000aa23  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000330f  00000000  00000000  0000ca57  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000d90  00000000  00000000  0000fd68  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00002b32  00000000  00000000  00010af8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00004b69  00000000  00000000  0001362a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000518  00000000  00000000  00018193  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	26 c2       	rjmp	.+1100   	; 0x44e <__ctors_end>
       2:	00 00       	nop
       4:	43 c2       	rjmp	.+1158   	; 0x48c <__bad_interrupt>
       6:	00 00       	nop
       8:	41 c2       	rjmp	.+1154   	; 0x48c <__bad_interrupt>
       a:	00 00       	nop
       c:	3f c2       	rjmp	.+1150   	; 0x48c <__bad_interrupt>
       e:	00 00       	nop
      10:	3d c2       	rjmp	.+1146   	; 0x48c <__bad_interrupt>
      12:	00 00       	nop
      14:	3b c2       	rjmp	.+1142   	; 0x48c <__bad_interrupt>
      16:	00 00       	nop
      18:	39 c2       	rjmp	.+1138   	; 0x48c <__bad_interrupt>
      1a:	00 00       	nop
      1c:	37 c2       	rjmp	.+1134   	; 0x48c <__bad_interrupt>
      1e:	00 00       	nop
      20:	35 c2       	rjmp	.+1130   	; 0x48c <__bad_interrupt>
      22:	00 00       	nop
      24:	33 c2       	rjmp	.+1126   	; 0x48c <__bad_interrupt>
      26:	00 00       	nop
      28:	0c 94 bc 0c 	jmp	0x1978	; 0x1978 <__vector_10>
      2c:	2f c2       	rjmp	.+1118   	; 0x48c <__bad_interrupt>
      2e:	00 00       	nop
      30:	2d c2       	rjmp	.+1114   	; 0x48c <__bad_interrupt>
      32:	00 00       	nop
      34:	2b c2       	rjmp	.+1110   	; 0x48c <__bad_interrupt>
      36:	00 00       	nop
      38:	29 c2       	rjmp	.+1106   	; 0x48c <__bad_interrupt>
      3a:	00 00       	nop
      3c:	27 c2       	rjmp	.+1102   	; 0x48c <__bad_interrupt>
      3e:	00 00       	nop
      40:	25 c2       	rjmp	.+1098   	; 0x48c <__bad_interrupt>
      42:	00 00       	nop
      44:	23 c2       	rjmp	.+1094   	; 0x48c <__bad_interrupt>
      46:	00 00       	nop
      48:	21 c2       	rjmp	.+1090   	; 0x48c <__bad_interrupt>
      4a:	00 00       	nop
      4c:	1f c2       	rjmp	.+1086   	; 0x48c <__bad_interrupt>
      4e:	00 00       	nop
      50:	1d c2       	rjmp	.+1082   	; 0x48c <__bad_interrupt>
      52:	00 00       	nop
      54:	1b c2       	rjmp	.+1078   	; 0x48c <__bad_interrupt>
      56:	00 00       	nop
      58:	19 c2       	rjmp	.+1074   	; 0x48c <__bad_interrupt>
      5a:	00 00       	nop
      5c:	17 c2       	rjmp	.+1070   	; 0x48c <__bad_interrupt>
      5e:	00 00       	nop
      60:	15 c2       	rjmp	.+1066   	; 0x48c <__bad_interrupt>
      62:	00 00       	nop
      64:	13 c2       	rjmp	.+1062   	; 0x48c <__bad_interrupt>
      66:	00 00       	nop
      68:	11 c2       	rjmp	.+1058   	; 0x48c <__bad_interrupt>
      6a:	00 00       	nop
      6c:	0f c2       	rjmp	.+1054   	; 0x48c <__bad_interrupt>
      6e:	00 00       	nop
      70:	0d c2       	rjmp	.+1050   	; 0x48c <__bad_interrupt>
      72:	00 00       	nop
      74:	0b c2       	rjmp	.+1046   	; 0x48c <__bad_interrupt>
      76:	00 00       	nop
      78:	09 c2       	rjmp	.+1042   	; 0x48c <__bad_interrupt>
      7a:	00 00       	nop
      7c:	07 c2       	rjmp	.+1038   	; 0x48c <__bad_interrupt>
      7e:	00 00       	nop
      80:	05 c2       	rjmp	.+1034   	; 0x48c <__bad_interrupt>
      82:	00 00       	nop
      84:	03 c2       	rjmp	.+1030   	; 0x48c <__bad_interrupt>
      86:	00 00       	nop
      88:	01 c2       	rjmp	.+1026   	; 0x48c <__bad_interrupt>
      8a:	00 00       	nop
      8c:	ff c1       	rjmp	.+1022   	; 0x48c <__bad_interrupt>
      8e:	00 00       	nop
      90:	fd c1       	rjmp	.+1018   	; 0x48c <__bad_interrupt>
      92:	00 00       	nop
      94:	fb c1       	rjmp	.+1014   	; 0x48c <__bad_interrupt>
      96:	00 00       	nop

00000098 <__c.4350>:
      98:	1b 5b 33 36 6d 4d 61 73 73 20 53 74 6f 72 61 67     .[36mMass Storag
      a8:	65 20 48 6f 73 74 20 44 65 6d 6f 20 72 75 6e 6e     e Host Demo runn
      b8:	69 6e 67 2e 0d 0a 1b 5b 33 37 6d 00                 ing....[37m.

000000c4 <__c.4359>:
      c4:	1b 5b 33 32 6d 44 65 76 69 63 65 20 41 74 74 61     .[32mDevice Atta
      d4:	63 68 65 64 2e 0d 0a 1b 5b 33 37 6d 00              ched....[37m.

000000e1 <__c.4364>:
      e1:	1b 5b 33 32 6d 0d 0a 44 65 76 69 63 65 20 55 6e     .[32m..Device Un
      f1:	61 74 74 61 63 68 65 64 2e 0d 0a 1b 5b 33 37 6d     attached....[37m
     101:	00                                                  .

00000102 <__c.4369>:
     102:	47 65 74 74 69 6e 67 20 43 6f 6e 66 69 67 20 44     Getting Config D
     112:	61 74 61 2e 0d 0a 00                                ata....

00000119 <__c.4372>:
     119:	1b 5b 33 31 6d 43 6f 6e 74 72 6f 6c 20 45 72 72     .[31mControl Err
     129:	6f 72 20 28 47 65 74 20 43 6f 6e 66 69 67 75 72     or (Get Configur
     139:	61 74 69 6f 6e 29 2e 0d 0a 00                       ation)....

00000143 <__c.4374>:
     143:	1b 5b 33 31 6d 49 6e 76 61 6c 69 64 20 44 65 76     .[31mInvalid Dev
     153:	69 63 65 2e 0d 0a 00                                ice....

0000015a <__c.4376>:
     15a:	20 2d 2d 20 45 72 72 6f 72 20 43 6f 64 65 3a 20      -- Error Code: 
     16a:	25 64 0d 0a 1b 5b 33 37 6d 00                       %d...[37m.

00000174 <__c.4378>:
     174:	1b 5b 33 31 6d 43 6f 6e 74 72 6f 6c 20 45 72 72     .[31mControl Err
     184:	6f 72 20 28 53 65 74 20 43 6f 6e 66 69 67 75 72     or (Set Configur
     194:	61 74 69 6f 6e 29 2e 0d 0a 20 2d 2d 20 45 72 72     ation)... -- Err
     1a4:	6f 72 20 43 6f 64 65 3a 20 25 64 0d 0a 1b 5b 33     or Code: %d...[3
     1b4:	37 6d 00                                            7m.

000001b7 <__c.4380>:
     1b7:	4d 61 73 73 20 53 74 6f 72 61 67 65 20 44 69 73     Mass Storage Dis
     1c7:	6b 20 45 6e 75 6d 65 72 61 74 65 64 2e 0d 0a 00     k Enumerated....

000001d7 <__c.4385>:
     1d7:	1b 5b 33 31 6d 48 6f 73 74 20 4d 6f 64 65 20 45     .[31mHost Mode E
     1e7:	72 72 6f 72 0d 0a 20 2d 2d 20 45 72 72 6f 72 20     rror.. -- Error 
     1f7:	43 6f 64 65 20 25 64 0d 0a 1b 5b 33 37 6d 00        Code %d...[37m.

00000206 <__c.4392>:
     206:	1b 5b 33 31 6d 44 65 76 20 45 6e 75 6d 20 45 72     .[31mDev Enum Er
     216:	72 6f 72 0d 0a 20 2d 2d 20 45 72 72 6f 72 20 43     ror.. -- Error C
     226:	6f 64 65 20 25 64 0d 0a 20 2d 2d 20 53 75 62 20     ode %d.. -- Sub 
     236:	45 72 72 6f 72 20 43 6f 64 65 20 25 64 0d 0a 20     Error Code %d.. 
     246:	2d 2d 20 49 6e 20 53 74 61 74 65 20 25 64 0d 0a     -- In State %d..
     256:	1b 5b 33 37 6d 00                                   .[37m.

0000025c <__c.4398>:
     25c:	47 65 74 20 4d 61 78 20 4c 55 4e 00                 Get Max LUN.

00000268 <__c.4400>:
     268:	54 6f 74 61 6c 20 4c 55 4e 73 3a 20 25 64 20 2d     Total LUNs: %d -
     278:	20 55 73 69 6e 67 20 66 69 72 73 74 20 4c 55 4e      Using first LUN
     288:	20 69 6e 20 64 65 76 69 63 65 2e 0d 0a 00            in device....

00000296 <__c.4402>:
     296:	4d 61 73 73 20 53 74 6f 72 61 67 65 20 52 65 73     Mass Storage Res
     2a6:	65 74 00                                            et.

000002a9 <__c.4405>:
     2a9:	52 65 71 75 65 73 74 20 53 65 6e 73 65 00           Request Sense.

000002b7 <__c.4407>:
     2b7:	50 72 65 76 65 6e 74 2f 41 6c 6c 6f 77 20 4d 65     Prevent/Allow Me
     2c7:	64 69 75 6d 20 52 65 6d 6f 76 61 6c 00              dium Removal.

000002d4 <__c.4410>:
     2d4:	49 6e 71 75 69 72 79 00                             Inquiry.

000002dc <__c.4412>:
     2dc:	56 65 6e 64 6f 72 20 22 25 2e 38 73 22 2c 20 50     Vendor "%.8s", P
     2ec:	72 6f 64 75 63 74 20 22 25 2e 31 36 73 22 0d 0a     roduct "%.16s"..
     2fc:	00                                                  .

000002fd <__c.4414>:
     2fd:	57 61 69 74 69 6e 67 20 75 6e 74 69 6c 20 72 65     Waiting until re
     30d:	61 64 79 2e 2e 00                                   ady...

00000313 <__c.4417>:
     313:	54 65 73 74 20 55 6e 69 74 20 52 65 61 64 79 00     Test Unit Ready.

00000323 <__c.4420>:
     323:	0d 0a 52 65 74 72 69 65 76 69 6e 67 20 43 61 70     ..Retrieving Cap
     333:	61 63 69 74 79 2e 2e 2e 20 00                       acity... .

0000033d <__c.4423>:
     33d:	52 65 61 64 20 43 61 70 61 63 69 74 79 00           Read Capacity.

0000034b <__c.4425>:
     34b:	25 6c 75 20 62 6c 6f 63 6b 73 20 6f 66 20 25 6c     %lu blocks of %l
     35b:	75 20 62 79 74 65 73 2e 0d 0a 00                    u bytes....

00000366 <__c.4428>:
     366:	52 65 61 64 20 44 65 76 69 63 65 20 42 6c 6f 63     Read Device Bloc
     376:	6b 00                                               k.

00000378 <__c.4430>:
     378:	0d 0a 43 6f 6e 74 65 6e 74 73 20 6f 66 20 66 69     ..Contents of fi
     388:	72 73 74 20 62 6c 6f 63 6b 3a 0d 0a 00              rst block:...

00000395 <__c.4436>:
     395:	25 2e 32 58 20 00                                   %.2X .

0000039b <__c.4441>:
     39b:	20 20 20 20 00                                          .

000003a0 <__c.4448>:
     3a0:	0d 0a 00                                            ...

000003a3 <__c.4453>:
     3a3:	0d 0a 0d 0a 50 72 65 73 73 20 62 6f 61 72 64 20     ....Press board 
     3b3:	62 75 74 74 6f 6e 20 74 6f 20 72 65 61 64 20 65     button to read e
     3c3:	6e 74 69 72 65 20 41 53 43 49 49 20 63 6f 6e 74     ntire ASCII cont
     3d3:	65 6e 74 73 20 6f 66 20 64 69 73 6b 2e 2e 2e 0d     ents of disk....
     3e3:	0a 0d 0a 00                                         ....

000003e7 <__c.4459>:
     3e7:	52 65 61 64 20 44 65 76 69 63 65 20 42 6c 6f 63     Read Device Bloc
     3f7:	6b 00                                               k.

000003f9 <__c.4473>:
     3f9:	1b 5b 33 31 6d 53 43 53 49 20 63 6f 6d 6d 61 6e     .[31mSCSI comman
     409:	64 20 65 72 72 6f 72 20 28 25 53 29 2e 0d 0a 00     d error (%S)....

00000419 <__c.4475>:
     419:	1b 5b 33 31 6d 43 6f 6d 6d 61 6e 64 20 65 72 72     .[31mCommand err
     429:	6f 72 20 28 25 53 29 2e 0d 0a 00                    or (%S)....

00000434 <__c.4477>:
     434:	20 20 2d 2d 20 45 72 72 6f 72 20 43 6f 64 65 3a       -- Error Code:
     444:	20 25 64 1b 5b 33 37 6d 00 00                        %d.[37m..

0000044e <__ctors_end>:
     44e:	11 24       	eor	r1, r1
     450:	1f be       	out	0x3f, r1	; 63
     452:	cf ef       	ldi	r28, 0xFF	; 255
     454:	d0 e2       	ldi	r29, 0x20	; 32
     456:	de bf       	out	0x3e, r29	; 62
     458:	cd bf       	out	0x3d, r28	; 61

0000045a <__do_copy_data>:
     45a:	11 e0       	ldi	r17, 0x01	; 1
     45c:	a0 e0       	ldi	r26, 0x00	; 0
     45e:	b1 e0       	ldi	r27, 0x01	; 1
     460:	ee e5       	ldi	r30, 0x5E	; 94
     462:	f5 e2       	ldi	r31, 0x25	; 37
     464:	00 e0       	ldi	r16, 0x00	; 0
     466:	0b bf       	out	0x3b, r16	; 59
     468:	02 c0       	rjmp	.+4      	; 0x46e <__do_copy_data+0x14>
     46a:	07 90       	elpm	r0, Z+
     46c:	0d 92       	st	X+, r0
     46e:	ae 32       	cpi	r26, 0x2E	; 46
     470:	b1 07       	cpc	r27, r17
     472:	d9 f7       	brne	.-10     	; 0x46a <__do_copy_data+0x10>
     474:	1b be       	out	0x3b, r1	; 59

00000476 <__do_clear_bss>:
     476:	11 e0       	ldi	r17, 0x01	; 1
     478:	ae e2       	ldi	r26, 0x2E	; 46
     47a:	b1 e0       	ldi	r27, 0x01	; 1
     47c:	01 c0       	rjmp	.+2      	; 0x480 <.do_clear_bss_start>

0000047e <.do_clear_bss_loop>:
     47e:	1d 92       	st	X+, r1

00000480 <.do_clear_bss_start>:
     480:	a1 35       	cpi	r26, 0x51	; 81
     482:	b1 07       	cpc	r27, r17
     484:	e1 f7       	brne	.-8      	; 0x47e <.do_clear_bss_loop>
     486:	01 d3       	rcall	.+1538   	; 0xa8a <main>
     488:	0c 94 ad 12 	jmp	0x255a	; 0x255a <_exit>

0000048c <__bad_interrupt>:
     48c:	b9 cd       	rjmp	.-1166   	; 0x0 <__vectors>

0000048e <LEDs_SetAllLEDs>:
				PORTD &= ~LEDMask;
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
			{
				PORTD = ((PORTD & ~LEDS_ALL_LEDS) | LEDMask);
     48e:	9b b1       	in	r25, 0x0b	; 11
     490:	9f 70       	andi	r25, 0x0F	; 15
     492:	98 2b       	or	r25, r24
     494:	9b b9       	out	0x0b, r25	; 11
			}
     496:	08 95       	ret

00000498 <SetupHardware>:

/** Configures the board hardware and chip peripherals for the demo's functionality. */
void SetupHardware(void)
{
	/* Disable watchdog if enabled by bootloader/fuses */
	MCUSR &= ~(1 << WDRF);
     498:	84 b7       	in	r24, 0x34	; 52
     49a:	87 7f       	andi	r24, 0xF7	; 247
     49c:	84 bf       	out	0x34, r24	; 52
	wdt_disable();
     49e:	28 e1       	ldi	r18, 0x18	; 24
     4a0:	0f b6       	in	r0, 0x3f	; 63
     4a2:	f8 94       	cli
     4a4:	20 93 60 00 	sts	0x0060, r18
     4a8:	10 92 60 00 	sts	0x0060, r1
     4ac:	0f be       	out	0x3f, r0	; 63
The type of x is clock_div_t.
*/
void clock_prescale_set(clock_div_t __x)
{
    uint8_t __tmp = _BV(CLKPCE);
    __asm__ __volatile__ (
     4ae:	90 e0       	ldi	r25, 0x00	; 0
     4b0:	80 e8       	ldi	r24, 0x80	; 128
     4b2:	0f b6       	in	r0, 0x3f	; 63
     4b4:	f8 94       	cli
     4b6:	80 93 61 00 	sts	0x0061, r24
     4ba:	90 93 61 00 	sts	0x0061, r25
     4be:	0f be       	out	0x3f, r0	; 63
			 *  \param[in] DoubleSpeed  Enables double speed mode when set, halving the sample time to double the baud rate.
			 */
			static inline void Serial_Init(const uint32_t BaudRate,
			                               const bool DoubleSpeed)
			{
				UBRR1  = (DoubleSpeed ? SERIAL_2X_UBBRVAL(BaudRate) : SERIAL_UBBRVAL(BaudRate));
     4c0:	83 e3       	ldi	r24, 0x33	; 51
     4c2:	90 e0       	ldi	r25, 0x00	; 0
     4c4:	90 93 cd 00 	sts	0x00CD, r25
     4c8:	80 93 cc 00 	sts	0x00CC, r24

				UCSR1C = ((1 << UCSZ11) | (1 << UCSZ10));
     4cc:	86 e0       	ldi	r24, 0x06	; 6
     4ce:	80 93 ca 00 	sts	0x00CA, r24
				UCSR1A = (DoubleSpeed ? (1 << U2X1) : 0);
     4d2:	10 92 c8 00 	sts	0x00C8, r1
				UCSR1B = ((1 << TXEN1)  | (1 << RXEN1));
     4d6:	20 93 c9 00 	sts	0x00C9, r18

				DDRD  |= (1 << 3);
     4da:	53 9a       	sbi	0x0a, 3	; 10
				PORTD |= (1 << 2);
     4dc:	5a 9a       	sbi	0x0b, 2	; 11

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void LEDs_Init(void)
			{
				DDRD  |=  LEDS_ALL_LEDS;
     4de:	8a b1       	in	r24, 0x0a	; 10
     4e0:	80 6f       	ori	r24, 0xF0	; 240
     4e2:	8a b9       	out	0x0a, r24	; 10
				PORTD &= ~LEDS_ALL_LEDS;
     4e4:	8b b1       	in	r24, 0x0b	; 11
     4e6:	8f 70       	andi	r24, 0x0F	; 15
     4e8:	8b b9       	out	0x0b, r24	; 11

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void Buttons_Init(void)
			{
				DDRE  &= ~BUTTONS_BUTTON1;
     4ea:	6a 98       	cbi	0x0d, 2	; 13
				PORTE |=  BUTTONS_BUTTON1;
     4ec:	72 9a       	sbi	0x0e, 2	; 14

	/* Hardware Initialization */
	Serial_Init(9600, false);
	LEDs_Init();
	Buttons_Init();
	USB_Init();
     4ee:	0e 94 a1 0c 	call	0x1942	; 0x1942 <USB_Init>

	/* Create a stdio stream for the serial port for stdin and stdout */
	Serial_CreateStream(NULL);
     4f2:	80 e0       	ldi	r24, 0x00	; 0
     4f4:	90 e0       	ldi	r25, 0x00	; 0
     4f6:	0c 94 7e 0f 	jmp	0x1efc	; 0x1efc <Serial_CreateStream>

000004fa <EVENT_USB_Host_DeviceAttached>:
}
     4fa:	84 ec       	ldi	r24, 0xC4	; 196
/** Event handler for the USB_DeviceAttached event. This indicates that a device has been attached to the host, and
 *  starts the library USB task to begin the enumeration and USB management process.
 */
void EVENT_USB_Host_DeviceAttached(void)
{
	puts_P(PSTR(ESC_FG_GREEN "Device Attached.\r\n" ESC_FG_WHITE));
     4fc:	90 e0       	ldi	r25, 0x00	; 0
     4fe:	0e 94 0d 10 	call	0x201a	; 0x201a <puts_P>
	LEDs_SetAllLEDs(LEDMASK_USB_ENUMERATING);
     502:	80 ea       	ldi	r24, 0xA0	; 160
     504:	c4 cf       	rjmp	.-120    	; 0x48e <LEDs_SetAllLEDs>

00000506 <EVENT_USB_Host_DeviceUnattached>:
     506:	81 ee       	ldi	r24, 0xE1	; 225
}
     508:	90 e0       	ldi	r25, 0x00	; 0
/** Event handler for the USB_DeviceUnattached event. This indicates that a device has been removed from the host, and
 *  stops the library USB task management process.
 */
void EVENT_USB_Host_DeviceUnattached(void)
{
	puts_P(PSTR(ESC_FG_GREEN "\r\nDevice Unattached.\r\n" ESC_FG_WHITE));
     50a:	0e 94 0d 10 	call	0x201a	; 0x201a <puts_P>
	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
     50e:	80 e1       	ldi	r24, 0x10	; 16
     510:	be cf       	rjmp	.-132    	; 0x48e <LEDs_SetAllLEDs>

00000512 <EVENT_USB_Host_DeviceEnumerationComplete>:
     512:	cf 93       	push	r28
}
     514:	82 e0       	ldi	r24, 0x02	; 2
/** Event handler for the USB_DeviceEnumerationComplete event. This indicates that a device has been successfully
 *  enumerated by the host and is now ready to be used by the application.
 */
void EVENT_USB_Host_DeviceEnumerationComplete(void)
{
	puts_P(PSTR("Getting Config Data.\r\n"));
     516:	91 e0       	ldi	r25, 0x01	; 1
     518:	0e 94 0d 10 	call	0x201a	; 0x201a <puts_P>

	uint8_t ErrorCode;

	/* Get and process the configuration descriptor data */
	if ((ErrorCode = ProcessConfigurationDescriptor()) != SuccessfulConfigRead)
     51c:	e4 d2       	rcall	.+1480   	; 0xae6 <ProcessConfigurationDescriptor>
     51e:	c8 2f       	mov	r28, r24
     520:	88 23       	and	r24, r24
     522:	01 f1       	breq	.+64     	; 0x564 <EVENT_USB_Host_DeviceEnumerationComplete+0x52>
     524:	81 30       	cpi	r24, 0x01	; 1
	{
		if (ErrorCode == ControlError)
     526:	19 f4       	brne	.+6      	; 0x52e <EVENT_USB_Host_DeviceEnumerationComplete+0x1c>
     528:	89 e1       	ldi	r24, 0x19	; 25
		  puts_P(PSTR(ESC_FG_RED "Control Error (Get Configuration).\r\n"));
     52a:	91 e0       	ldi	r25, 0x01	; 1
     52c:	02 c0       	rjmp	.+4      	; 0x532 <EVENT_USB_Host_DeviceEnumerationComplete+0x20>
     52e:	83 e4       	ldi	r24, 0x43	; 67
		else
		  puts_P(PSTR(ESC_FG_RED "Invalid Device.\r\n"));
     530:	91 e0       	ldi	r25, 0x01	; 1
     532:	0e 94 0d 10 	call	0x201a	; 0x201a <puts_P>
     536:	00 d0       	rcall	.+0      	; 0x538 <EVENT_USB_Host_DeviceEnumerationComplete+0x26>

		printf_P(PSTR(" -- Error Code: %d\r\n" ESC_FG_WHITE), ErrorCode);
     538:	00 d0       	rcall	.+0      	; 0x53a <EVENT_USB_Host_DeviceEnumerationComplete+0x28>
     53a:	ed b7       	in	r30, 0x3d	; 61
     53c:	fe b7       	in	r31, 0x3e	; 62
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	2a e5       	ldi	r18, 0x5A	; 90
     542:	31 e0       	ldi	r19, 0x01	; 1
     544:	ad b7       	in	r26, 0x3d	; 61
     546:	be b7       	in	r27, 0x3e	; 62
     548:	12 96       	adiw	r26, 0x02	; 2
     54a:	3c 93       	st	X, r19
     54c:	2e 93       	st	-X, r18
     54e:	11 97       	sbiw	r26, 0x01	; 1
     550:	c2 83       	std	Z+2, r28	; 0x02
     552:	13 82       	std	Z+3, r1	; 0x03
     554:	0e 94 ee 0f 	call	0x1fdc	; 0x1fdc <printf_P>
     558:	0f 90       	pop	r0

		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
     55a:	0f 90       	pop	r0
     55c:	0f 90       	pop	r0
     55e:	0f 90       	pop	r0
     560:	80 e9       	ldi	r24, 0x90	; 144
     562:	19 c0       	rjmp	.+50     	; 0x596 <EVENT_USB_Host_DeviceEnumerationComplete+0x84>
     564:	81 e0       	ldi	r24, 0x01	; 1
		return;
	}

	/* Set the device configuration to the first configuration (rarely do devices use multiple configurations) */
	if ((ErrorCode = USB_Host_SetDeviceConfiguration(1)) != HOST_SENDCONTROL_Successful)
     566:	0e 94 1a 0f 	call	0x1e34	; 0x1e34 <USB_Host_SetDeviceConfiguration>
     56a:	88 23       	and	r24, r24
     56c:	79 f0       	breq	.+30     	; 0x58c <EVENT_USB_Host_DeviceEnumerationComplete+0x7a>
     56e:	00 d0       	rcall	.+0      	; 0x570 <EVENT_USB_Host_DeviceEnumerationComplete+0x5e>
	{
		printf_P(PSTR(ESC_FG_RED "Control Error (Set Configuration).\r\n"
     570:	00 d0       	rcall	.+0      	; 0x572 <EVENT_USB_Host_DeviceEnumerationComplete+0x60>
     572:	ed b7       	in	r30, 0x3d	; 61
     574:	fe b7       	in	r31, 0x3e	; 62
     576:	31 96       	adiw	r30, 0x01	; 1
     578:	24 e7       	ldi	r18, 0x74	; 116
     57a:	31 e0       	ldi	r19, 0x01	; 1
     57c:	ad b7       	in	r26, 0x3d	; 61
     57e:	be b7       	in	r27, 0x3e	; 62
     580:	12 96       	adiw	r26, 0x02	; 2
     582:	3c 93       	st	X, r19
     584:	2e 93       	st	-X, r18
     586:	11 97       	sbiw	r26, 0x01	; 1
     588:	82 83       	std	Z+2, r24	; 0x02
     58a:	e3 cf       	rjmp	.-58     	; 0x552 <EVENT_USB_Host_DeviceEnumerationComplete+0x40>
     58c:	87 eb       	ldi	r24, 0xB7	; 183

		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
		return;
	}

	puts_P(PSTR("Mass Storage Disk Enumerated.\r\n"));
     58e:	91 e0       	ldi	r25, 0x01	; 1
     590:	0e 94 0d 10 	call	0x201a	; 0x201a <puts_P>
     594:	80 e6       	ldi	r24, 0x60	; 96
	LEDs_SetAllLEDs(LEDMASK_USB_READY);
     596:	7b df       	rcall	.-266    	; 0x48e <LEDs_SetAllLEDs>
     598:	cf 91       	pop	r28
     59a:	08 95       	ret

0000059c <EVENT_USB_Host_HostError>:
}
     59c:	cf 93       	push	r28
     59e:	df 93       	push	r29

/** Event handler for the USB_HostError event. This indicates that a hardware error occurred while in host mode. */
void EVENT_USB_Host_HostError(const uint8_t ErrorCode)
{
     5a0:	0f 92       	push	r0
     5a2:	cd b7       	in	r28, 0x3d	; 61
     5a4:	de b7       	in	r29, 0x3e	; 62
	USB_Disable();
     5a6:	89 83       	std	Y+1, r24	; 0x01
     5a8:	0e 94 39 0c 	call	0x1872	; 0x1872 <USB_Disable>

	printf_P(PSTR(ESC_FG_RED "Host Mode Error\r\n"
     5ac:	00 d0       	rcall	.+0      	; 0x5ae <EVENT_USB_Host_HostError+0x12>
     5ae:	00 d0       	rcall	.+0      	; 0x5b0 <EVENT_USB_Host_HostError+0x14>
     5b0:	ed b7       	in	r30, 0x3d	; 61
     5b2:	fe b7       	in	r31, 0x3e	; 62
     5b4:	31 96       	adiw	r30, 0x01	; 1
     5b6:	27 ed       	ldi	r18, 0xD7	; 215
     5b8:	31 e0       	ldi	r19, 0x01	; 1
     5ba:	ad b7       	in	r26, 0x3d	; 61
     5bc:	be b7       	in	r27, 0x3e	; 62
     5be:	12 96       	adiw	r26, 0x02	; 2
     5c0:	3c 93       	st	X, r19
     5c2:	2e 93       	st	-X, r18
     5c4:	11 97       	sbiw	r26, 0x01	; 1
     5c6:	89 81       	ldd	r24, Y+1	; 0x01
     5c8:	82 83       	std	Z+2, r24	; 0x02
     5ca:	13 82       	std	Z+3, r1	; 0x03
     5cc:	0e 94 ee 0f 	call	0x1fdc	; 0x1fdc <printf_P>
	                         " -- Error Code %d\r\n" ESC_FG_WHITE), ErrorCode);

	LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
     5d0:	0f 90       	pop	r0
     5d2:	0f 90       	pop	r0
     5d4:	0f 90       	pop	r0
     5d6:	0f 90       	pop	r0
     5d8:	80 e9       	ldi	r24, 0x90	; 144
     5da:	59 df       	rcall	.-334    	; 0x48e <LEDs_SetAllLEDs>
     5dc:	ff cf       	rjmp	.-2      	; 0x5dc <EVENT_USB_Host_HostError+0x40>

000005de <EVENT_USB_Host_DeviceEnumerationFailed>:
     5de:	90 91 3c 01 	lds	r25, 0x013C
 *  enumerating an attached USB device.
 */
void EVENT_USB_Host_DeviceEnumerationFailed(const uint8_t ErrorCode,
                                            const uint8_t SubErrorCode)
{
	printf_P(PSTR(ESC_FG_RED "Dev Enum Error\r\n"
     5e2:	2d b7       	in	r18, 0x3d	; 61
     5e4:	3e b7       	in	r19, 0x3e	; 62
     5e6:	28 50       	subi	r18, 0x08	; 8
     5e8:	30 40       	sbci	r19, 0x00	; 0
     5ea:	0f b6       	in	r0, 0x3f	; 63
     5ec:	f8 94       	cli
     5ee:	3e bf       	out	0x3e, r19	; 62
     5f0:	0f be       	out	0x3f, r0	; 63
     5f2:	2d bf       	out	0x3d, r18	; 61
     5f4:	ed b7       	in	r30, 0x3d	; 61
     5f6:	fe b7       	in	r31, 0x3e	; 62
     5f8:	31 96       	adiw	r30, 0x01	; 1
     5fa:	26 e0       	ldi	r18, 0x06	; 6
     5fc:	32 e0       	ldi	r19, 0x02	; 2
     5fe:	ad b7       	in	r26, 0x3d	; 61
     600:	be b7       	in	r27, 0x3e	; 62
     602:	12 96       	adiw	r26, 0x02	; 2
     604:	3c 93       	st	X, r19
     606:	2e 93       	st	-X, r18
     608:	11 97       	sbiw	r26, 0x01	; 1
     60a:	82 83       	std	Z+2, r24	; 0x02
     60c:	13 82       	std	Z+3, r1	; 0x03
     60e:	64 83       	std	Z+4, r22	; 0x04
     610:	15 82       	std	Z+5, r1	; 0x05
     612:	96 83       	std	Z+6, r25	; 0x06
     614:	17 82       	std	Z+7, r1	; 0x07
     616:	0e 94 ee 0f 	call	0x1fdc	; 0x1fdc <printf_P>
	                         " -- Error Code %d\r\n"
	                         " -- Sub Error Code %d\r\n"
	                         " -- In State %d\r\n" ESC_FG_WHITE), ErrorCode, SubErrorCode, USB_HostState);

	LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
     61a:	2d b7       	in	r18, 0x3d	; 61
     61c:	3e b7       	in	r19, 0x3e	; 62
     61e:	28 5f       	subi	r18, 0xF8	; 248
     620:	3f 4f       	sbci	r19, 0xFF	; 255
     622:	0f b6       	in	r0, 0x3f	; 63
     624:	f8 94       	cli
     626:	3e bf       	out	0x3e, r19	; 62
     628:	0f be       	out	0x3f, r0	; 63
     62a:	2d bf       	out	0x3d, r18	; 61
     62c:	80 e9       	ldi	r24, 0x90	; 144
     62e:	2f cf       	rjmp	.-418    	; 0x48e <LEDs_SetAllLEDs>

00000630 <ShowDiskReadError>:
     630:	cf 93       	push	r28
}
     632:	df 93       	push	r29
 *  \param[in] CommandString  ASCII string located in PROGMEM space indicating what operation failed
 *  \param[in] ErrorCode      Error code of the function which failed to complete successfully
 */
void ShowDiskReadError(const char* CommandString,
                       const uint8_t ErrorCode)
{
     634:	0f 92       	push	r0
     636:	cd b7       	in	r28, 0x3d	; 61
     638:	de b7       	in	r29, 0x3e	; 62
	if (ErrorCode == MASS_STORE_SCSI_COMMAND_FAILED)
     63a:	60 3c       	cpi	r22, 0xC0	; 192
     63c:	79 f4       	brne	.+30     	; 0x65c <ShowDiskReadError+0x2c>
	{
		/* Display the error code */
		printf_P(PSTR(ESC_FG_RED "SCSI command error (%S).\r\n"), CommandString);
     63e:	00 d0       	rcall	.+0      	; 0x640 <ShowDiskReadError+0x10>
     640:	00 d0       	rcall	.+0      	; 0x642 <ShowDiskReadError+0x12>
     642:	29 ef       	ldi	r18, 0xF9	; 249
     644:	33 e0       	ldi	r19, 0x03	; 3
     646:	ad b7       	in	r26, 0x3d	; 61
     648:	be b7       	in	r27, 0x3e	; 62
     64a:	12 96       	adiw	r26, 0x02	; 2
     64c:	3c 93       	st	X, r19
     64e:	2e 93       	st	-X, r18
     650:	11 97       	sbiw	r26, 0x01	; 1
     652:	14 96       	adiw	r26, 0x04	; 4
     654:	9c 93       	st	X, r25
     656:	8e 93       	st	-X, r24
     658:	13 97       	sbiw	r26, 0x03	; 3
     65a:	1b c0       	rjmp	.+54     	; 0x692 <ShowDiskReadError+0x62>
	}
	else
	{
		/* Display the error code */
		printf_P(PSTR(ESC_FG_RED "Command error (%S).\r\n"), CommandString);
     65c:	00 d0       	rcall	.+0      	; 0x65e <ShowDiskReadError+0x2e>
     65e:	00 d0       	rcall	.+0      	; 0x660 <ShowDiskReadError+0x30>
     660:	29 e1       	ldi	r18, 0x19	; 25
     662:	34 e0       	ldi	r19, 0x04	; 4
     664:	ed b7       	in	r30, 0x3d	; 61
     666:	fe b7       	in	r31, 0x3e	; 62
     668:	32 83       	std	Z+2, r19	; 0x02
     66a:	21 83       	std	Z+1, r18	; 0x01
     66c:	94 83       	std	Z+4, r25	; 0x04
     66e:	83 83       	std	Z+3, r24	; 0x03
     670:	69 83       	std	Y+1, r22	; 0x01
     672:	0e 94 ee 0f 	call	0x1fdc	; 0x1fdc <printf_P>
		printf_P(PSTR("  -- Error Code: %d" ESC_FG_WHITE), ErrorCode);
     676:	ed b7       	in	r30, 0x3d	; 61
     678:	fe b7       	in	r31, 0x3e	; 62
     67a:	31 96       	adiw	r30, 0x01	; 1
     67c:	84 e3       	ldi	r24, 0x34	; 52
     67e:	94 e0       	ldi	r25, 0x04	; 4
     680:	ad b7       	in	r26, 0x3d	; 61
     682:	be b7       	in	r27, 0x3e	; 62
     684:	12 96       	adiw	r26, 0x02	; 2
     686:	9c 93       	st	X, r25
     688:	8e 93       	st	-X, r24
     68a:	11 97       	sbiw	r26, 0x01	; 1
     68c:	69 81       	ldd	r22, Y+1	; 0x01
     68e:	62 83       	std	Z+2, r22	; 0x02
     690:	13 82       	std	Z+3, r1	; 0x03
     692:	0e 94 ee 0f 	call	0x1fdc	; 0x1fdc <printf_P>
     696:	0f 90       	pop	r0
     698:	0f 90       	pop	r0
     69a:	0f 90       	pop	r0
     69c:	0f 90       	pop	r0

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
     69e:	80 91 a9 00 	lds	r24, 0x00A9
     6a2:	80 64       	ori	r24, 0x40	; 64
     6a4:	80 93 a9 00 	sts	0x00A9, r24
	}

	Pipe_Freeze();

	/* Indicate device error via the status LEDs */
	LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
     6a8:	80 e9       	ldi	r24, 0x90	; 144
     6aa:	f1 de       	rcall	.-542    	; 0x48e <LEDs_SetAllLEDs>
     6ac:	0f 90       	pop	r0
}
     6ae:	df 91       	pop	r29
     6b0:	cf 91       	pop	r28
     6b2:	08 95       	ret

000006b4 <MassStorageHost_Task>:
     6b4:	2f 92       	push	r2

/** Task to set the configuration of the attached device after it has been enumerated, and to read in blocks from
 *  the device and print them to the serial port.
 */
void MassStorageHost_Task(void)
{
     6b6:	3f 92       	push	r3
     6b8:	4f 92       	push	r4
     6ba:	5f 92       	push	r5
     6bc:	6f 92       	push	r6
     6be:	7f 92       	push	r7
     6c0:	8f 92       	push	r8
     6c2:	9f 92       	push	r9
     6c4:	af 92       	push	r10
     6c6:	bf 92       	push	r11
     6c8:	cf 92       	push	r12
     6ca:	df 92       	push	r13
     6cc:	ef 92       	push	r14
     6ce:	ff 92       	push	r15
     6d0:	0f 93       	push	r16
     6d2:	1f 93       	push	r17
     6d4:	cf 93       	push	r28
     6d6:	df 93       	push	r29
     6d8:	cd b7       	in	r28, 0x3d	; 61
     6da:	de b7       	in	r29, 0x3e	; 62
     6dc:	c0 54       	subi	r28, 0x40	; 64
     6de:	d0 40       	sbci	r29, 0x00	; 0
     6e0:	0f b6       	in	r0, 0x3f	; 63
     6e2:	f8 94       	cli
     6e4:	de bf       	out	0x3e, r29	; 62
     6e6:	0f be       	out	0x3f, r0	; 63
     6e8:	cd bf       	out	0x3d, r28	; 61
	}

	/* Indicate device no longer busy */
	LEDs_SetAllLEDs(LEDMASK_USB_READY);
	USB_Host_SetDeviceConfiguration(0);
}
     6ea:	2d b7       	in	r18, 0x3d	; 61
     6ec:	3e b7       	in	r19, 0x3e	; 62
     6ee:	21 96       	adiw	r28, 0x01	; 1
     6f0:	3f af       	sts	0x7f, r19
     6f2:	2e af       	sts	0x7e, r18
     6f4:	21 97       	sbiw	r28, 0x01	; 1
/** Task to set the configuration of the attached device after it has been enumerated, and to read in blocks from
 *  the device and print them to the serial port.
 */
void MassStorageHost_Task(void)
{
	if (USB_HostState != HOST_STATE_Configured)
     6f6:	80 91 3c 01 	lds	r24, 0x013C
     6fa:	8b 30       	cpi	r24, 0x0B	; 11
     6fc:	09 f0       	breq	.+2      	; 0x700 <MassStorageHost_Task+0x4c>
     6fe:	a2 c1       	rjmp	.+836    	; 0xa44 <MassStorageHost_Task+0x390>
	  return;

	/* Indicate device busy via the status LEDs */
	LEDs_SetAllLEDs(LEDMASK_USB_BUSY);
     700:	80 e2       	ldi	r24, 0x20	; 32
     702:	c5 de       	rcall	.-630    	; 0x48e <LEDs_SetAllLEDs>
     704:	81 e3       	ldi	r24, 0x31	; 49

	uint8_t ErrorCode;

	/* Send the request, display error and wait for device detach if request fails */
	if ((ErrorCode = MassStore_GetMaxLUN(&MassStore_MaxLUNIndex)) != HOST_SENDCONTROL_Successful)
     706:	91 e0       	ldi	r25, 0x01	; 1
     708:	ef d3       	rcall	.+2014   	; 0xee8 <MassStore_GetMaxLUN>
     70a:	68 2f       	mov	r22, r24
     70c:	88 23       	and	r24, r24
     70e:	19 f0       	breq	.+6      	; 0x716 <MassStorageHost_Task+0x62>
     710:	8c e5       	ldi	r24, 0x5C	; 92
     712:	92 e0       	ldi	r25, 0x02	; 2
	{
		ShowDiskReadError(PSTR("Get Max LUN"), ErrorCode);
     714:	85 c0       	rjmp	.+266    	; 0x820 <MassStorageHost_Task+0x16c>
     716:	00 d0       	rcall	.+0      	; 0x718 <MassStorageHost_Task+0x64>
     718:	00 d0       	rcall	.+0      	; 0x71a <MassStorageHost_Task+0x66>
		USB_Host_SetDeviceConfiguration(0);
		return;
	}

	/* Print number of LUNs detected in the attached device */
	printf_P(PSTR("Total LUNs: %d - Using first LUN in device.\r\n"), (MassStore_MaxLUNIndex + 1));
     71a:	88 e6       	ldi	r24, 0x68	; 104
     71c:	92 e0       	ldi	r25, 0x02	; 2
     71e:	ad b7       	in	r26, 0x3d	; 61
     720:	be b7       	in	r27, 0x3e	; 62
     722:	12 96       	adiw	r26, 0x02	; 2
     724:	9c 93       	st	X, r25
     726:	8e 93       	st	-X, r24
     728:	11 97       	sbiw	r26, 0x01	; 1
     72a:	80 91 31 01 	lds	r24, 0x0131
     72e:	90 e0       	ldi	r25, 0x00	; 0
     730:	01 96       	adiw	r24, 0x01	; 1
     732:	14 96       	adiw	r26, 0x04	; 4
     734:	9c 93       	st	X, r25
     736:	8e 93       	st	-X, r24
     738:	13 97       	sbiw	r26, 0x03	; 3
     73a:	0e 94 ee 0f 	call	0x1fdc	; 0x1fdc <printf_P>
     73e:	0f 90       	pop	r0
     740:	0f 90       	pop	r0

	/* Reset the Mass Storage device interface, ready for use */
	if ((ErrorCode = MassStore_MassStorageReset()) != HOST_SENDCONTROL_Successful)
     742:	0f 90       	pop	r0
     744:	0f 90       	pop	r0
     746:	a1 d3       	rcall	.+1858   	; 0xe8a <MassStore_MassStorageReset>
     748:	68 2f       	mov	r22, r24
     74a:	88 23       	and	r24, r24
     74c:	19 f0       	breq	.+6      	; 0x754 <MassStorageHost_Task+0xa0>
     74e:	86 e9       	ldi	r24, 0x96	; 150
     750:	92 e0       	ldi	r25, 0x02	; 2
     752:	66 c0       	rjmp	.+204    	; 0x820 <MassStorageHost_Task+0x16c>
	{
		ShowDiskReadError(PSTR("Mass Storage Reset"), ErrorCode);
     754:	80 e0       	ldi	r24, 0x00	; 0
     756:	be 01       	movw	r22, r28
     758:	67 5f       	subi	r22, 0xF7	; 247
	}

	/* Get sense data from the device - many devices will not accept any other commands until the sense data
	 * is read - both on start-up and after a failed command */
	SCSI_Request_Sense_Response_t SenseData;
	if ((ErrorCode = MassStore_RequestSense(0, &SenseData)) != 0)
     75a:	7f 4f       	sbci	r23, 0xFF	; 255
     75c:	18 d4       	rcall	.+2096   	; 0xf8e <MassStore_RequestSense>
     75e:	68 2f       	mov	r22, r24
     760:	88 23       	and	r24, r24
     762:	19 f0       	breq	.+6      	; 0x76a <MassStorageHost_Task+0xb6>
     764:	89 ea       	ldi	r24, 0xA9	; 169
     766:	92 e0       	ldi	r25, 0x02	; 2
     768:	5b c0       	rjmp	.+182    	; 0x820 <MassStorageHost_Task+0x16c>
     76a:	80 e0       	ldi	r24, 0x00	; 0
	{
		ShowDiskReadError(PSTR("Request Sense"), ErrorCode);
     76c:	61 e0       	ldi	r22, 0x01	; 1
     76e:	28 d5       	rcall	.+2640   	; 0x11c0 <MassStore_PreventAllowMediumRemoval>
     770:	68 2f       	mov	r22, r24
		USB_Host_SetDeviceConfiguration(0);
		return;
	}

	/* Set the prevent removal flag for the device, allowing it to be accessed */
	if ((ErrorCode = MassStore_PreventAllowMediumRemoval(0, true)) != 0)
     772:	88 23       	and	r24, r24
     774:	19 f0       	breq	.+6      	; 0x77c <MassStorageHost_Task+0xc8>
     776:	87 eb       	ldi	r24, 0xB7	; 183
     778:	92 e0       	ldi	r25, 0x02	; 2
     77a:	52 c0       	rjmp	.+164    	; 0x820 <MassStorageHost_Task+0x16c>
     77c:	80 e0       	ldi	r24, 0x00	; 0
     77e:	be 01       	movw	r22, r28
	{
		ShowDiskReadError(PSTR("Prevent/Allow Medium Removal"), ErrorCode);
     780:	65 5e       	subi	r22, 0xE5	; 229
     782:	7f 4f       	sbci	r23, 0xFF	; 255
     784:	cd d3       	rcall	.+1946   	; 0xf20 <MassStore_Inquiry>
		return;
	}

	/* Get inquiry data from the device */
	SCSI_Inquiry_Response_t InquiryData;
	if ((ErrorCode = MassStore_Inquiry(0, &InquiryData)) != 0)
     786:	68 2f       	mov	r22, r24
     788:	88 23       	and	r24, r24
     78a:	19 f0       	breq	.+6      	; 0x792 <MassStorageHost_Task+0xde>
     78c:	84 ed       	ldi	r24, 0xD4	; 212
     78e:	92 e0       	ldi	r25, 0x02	; 2
     790:	47 c0       	rjmp	.+142    	; 0x820 <MassStorageHost_Task+0x16c>
     792:	00 d0       	rcall	.+0      	; 0x794 <MassStorageHost_Task+0xe0>
     794:	00 d0       	rcall	.+0      	; 0x796 <MassStorageHost_Task+0xe2>
     796:	00 d0       	rcall	.+0      	; 0x798 <MassStorageHost_Task+0xe4>
	{
		ShowDiskReadError(PSTR("Inquiry"), ErrorCode);
     798:	ed b7       	in	r30, 0x3d	; 61
     79a:	fe b7       	in	r31, 0x3e	; 62
     79c:	31 96       	adiw	r30, 0x01	; 1
		USB_Host_SetDeviceConfiguration(0);
		return;
	}

	/* Print vendor and product names of attached device */
	printf_P(PSTR("Vendor \"%.8s\", Product \"%.16s\"\r\n"), InquiryData.VendorID, InquiryData.ProductID);
     79e:	8c ed       	ldi	r24, 0xDC	; 220
     7a0:	92 e0       	ldi	r25, 0x02	; 2
     7a2:	ad b7       	in	r26, 0x3d	; 61
     7a4:	be b7       	in	r27, 0x3e	; 62
     7a6:	12 96       	adiw	r26, 0x02	; 2
     7a8:	9c 93       	st	X, r25
     7aa:	8e 93       	st	-X, r24
     7ac:	11 97       	sbiw	r26, 0x01	; 1
     7ae:	ce 01       	movw	r24, r28
     7b0:	83 96       	adiw	r24, 0x23	; 35
     7b2:	93 83       	std	Z+3, r25	; 0x03
     7b4:	82 83       	std	Z+2, r24	; 0x02
     7b6:	ce 01       	movw	r24, r28
     7b8:	8b 96       	adiw	r24, 0x2b	; 43
     7ba:	95 83       	std	Z+5, r25	; 0x05
     7bc:	84 83       	std	Z+4, r24	; 0x04
     7be:	0e 94 ee 0f 	call	0x1fdc	; 0x1fdc <printf_P>
     7c2:	ed b7       	in	r30, 0x3d	; 61
     7c4:	fe b7       	in	r31, 0x3e	; 62
     7c6:	36 96       	adiw	r30, 0x06	; 6
     7c8:	0f b6       	in	r0, 0x3f	; 63
     7ca:	f8 94       	cli
     7cc:	fe bf       	out	0x3e, r31	; 62

	/* Wait until disk ready */
	puts_P(PSTR("Waiting until ready.."));
     7ce:	0f be       	out	0x3f, r0	; 63
     7d0:	ed bf       	out	0x3d, r30	; 61
     7d2:	8d ef       	ldi	r24, 0xFD	; 253
     7d4:	92 e0       	ldi	r25, 0x02	; 2
     7d6:	0e 94 0d 10 	call	0x201a	; 0x201a <puts_P>
     7da:	0e e2       	ldi	r16, 0x2E	; 46
     7dc:	80 91 c8 00 	lds	r24, 0x00C8
     7e0:	85 ff       	sbrs	r24, 5
     7e2:	fc cf       	rjmp	.-8      	; 0x7dc <MassStorageHost_Task+0x128>
     7e4:	00 93 ce 00 	sts	0x00CE, r16
			 *  \param[in] DataByte  Byte to transmit through the USART.
			 */
			static inline void Serial_SendByte(const char DataByte) ATTR_ALWAYS_INLINE;
			static inline void Serial_SendByte(const char DataByte)
			{
				while (!(UCSR1A & (1 << UDRE1)));
     7e8:	80 91 3c 01 	lds	r24, 0x013C
     7ec:	81 30       	cpi	r24, 0x01	; 1
     7ee:	51 f0       	breq	.+20     	; 0x804 <MassStorageHost_Task+0x150>
				UDR1 = DataByte;
     7f0:	80 e0       	ldi	r24, 0x00	; 0
     7f2:	61 d4       	rcall	.+2242   	; 0x10b6 <MassStore_TestUnitReady>
	for (;;)
	{
		Serial_SendByte('.');

		/* Abort if device removed */
		if (USB_HostState == HOST_STATE_Unattached)
     7f4:	68 2f       	mov	r22, r24
     7f6:	88 23       	and	r24, r24
     7f8:	29 f0       	breq	.+10     	; 0x804 <MassStorageHost_Task+0x150>
     7fa:	80 3c       	cpi	r24, 0xC0	; 192
		  break;

		/* Check to see if the attached device is ready for new commands */
		ErrorCode = MassStore_TestUnitReady(0);
     7fc:	79 f3       	breq	.-34     	; 0x7dc <MassStorageHost_Task+0x128>
     7fe:	83 e1       	ldi	r24, 0x13	; 19
     800:	93 e0       	ldi	r25, 0x03	; 3
     802:	0e c0       	rjmp	.+28     	; 0x820 <MassStorageHost_Task+0x16c>

		/* If attached device is ready, abort the loop */
		if (!(ErrorCode))
     804:	83 e2       	ldi	r24, 0x23	; 35
     806:	93 e0       	ldi	r25, 0x03	; 3
		  break;

		/* If an error other than a logical command failure (indicating device busy) returned, abort */
		if (ErrorCode != MASS_STORE_SCSI_COMMAND_FAILED)
     808:	0e 94 0d 10 	call	0x201a	; 0x201a <puts_P>
		{
			ShowDiskReadError(PSTR("Test Unit Ready"), ErrorCode);
     80c:	80 e0       	ldi	r24, 0x00	; 0
     80e:	be 01       	movw	r22, r28
     810:	6f 5f       	subi	r22, 0xFF	; 255
			USB_Host_SetDeviceConfiguration(0);
			return;
		}
	}

	puts_P(PSTR("\r\nRetrieving Capacity... "));
     812:	7f 4f       	sbci	r23, 0xFF	; 255
     814:	7b d4       	rcall	.+2294   	; 0x110c <MassStore_ReadCapacity>
     816:	68 2f       	mov	r22, r24
     818:	88 23       	and	r24, r24

	/* Create new structure for the disk's capacity in blocks and block size */
	SCSI_Capacity_t DiskCapacity;

	/* Retrieve disk capacity */
	if ((ErrorCode = MassStore_ReadCapacity(0, &DiskCapacity)) != 0)
     81a:	39 f0       	breq	.+14     	; 0x82a <MassStorageHost_Task+0x176>
     81c:	8d e3       	ldi	r24, 0x3D	; 61
     81e:	93 e0       	ldi	r25, 0x03	; 3
     820:	07 df       	rcall	.-498    	; 0x630 <ShowDiskReadError>
     822:	80 e0       	ldi	r24, 0x00	; 0
     824:	0e 94 1a 0f 	call	0x1e34	; 0x1e34 <USB_Host_SetDeviceConfiguration>
     828:	0d c1       	rjmp	.+538    	; 0xa44 <MassStorageHost_Task+0x390>
     82a:	2d b7       	in	r18, 0x3d	; 61
	{
		ShowDiskReadError(PSTR("Read Capacity"), ErrorCode);
     82c:	3e b7       	in	r19, 0x3e	; 62
     82e:	2a 50       	subi	r18, 0x0A	; 10
     830:	30 40       	sbci	r19, 0x00	; 0
     832:	0f b6       	in	r0, 0x3f	; 63
		USB_Host_SetDeviceConfiguration(0);
     834:	f8 94       	cli
     836:	3e bf       	out	0x3e, r19	; 62
     838:	0f be       	out	0x3f, r0	; 63
		return;
     83a:	2d bf       	out	0x3d, r18	; 61
	}

	/* Display the disk capacity in blocks * block size bytes */
	printf_P(PSTR("%lu blocks of %lu bytes.\r\n"), DiskCapacity.Blocks, DiskCapacity.BlockSize);
     83c:	ed b7       	in	r30, 0x3d	; 61
     83e:	fe b7       	in	r31, 0x3e	; 62
     840:	31 96       	adiw	r30, 0x01	; 1
     842:	8b e4       	ldi	r24, 0x4B	; 75
     844:	93 e0       	ldi	r25, 0x03	; 3
     846:	ad b7       	in	r26, 0x3d	; 61
     848:	be b7       	in	r27, 0x3e	; 62
     84a:	12 96       	adiw	r26, 0x02	; 2
     84c:	9c 93       	st	X, r25
     84e:	8e 93       	st	-X, r24
     850:	11 97       	sbiw	r26, 0x01	; 1
     852:	89 81       	ldd	r24, Y+1	; 0x01
     854:	9a 81       	ldd	r25, Y+2	; 0x02
     856:	ab 81       	ldd	r26, Y+3	; 0x03
     858:	bc 81       	ldd	r27, Y+4	; 0x04
     85a:	82 83       	std	Z+2, r24	; 0x02
     85c:	93 83       	std	Z+3, r25	; 0x03
     85e:	a4 83       	std	Z+4, r26	; 0x04
     860:	b5 83       	std	Z+5, r27	; 0x05
     862:	8d 81       	ldd	r24, Y+5	; 0x05
     864:	9e 81       	ldd	r25, Y+6	; 0x06
     866:	af 81       	ldd	r26, Y+7	; 0x07
     868:	b8 85       	ldd	r27, Y+8	; 0x08
     86a:	86 83       	std	Z+6, r24	; 0x06
     86c:	97 83       	std	Z+7, r25	; 0x07
     86e:	a0 87       	std	Z+8, r26	; 0x08
     870:	b1 87       	std	Z+9, r27	; 0x09
     872:	0e 94 ee 0f 	call	0x1fdc	; 0x1fdc <printf_P>
     876:	8d 81       	ldd	r24, Y+5	; 0x05
     878:	9e 81       	ldd	r25, Y+6	; 0x06
     87a:	af 81       	ldd	r26, Y+7	; 0x07
     87c:	b8 85       	ldd	r27, Y+8	; 0x08
     87e:	ed b7       	in	r30, 0x3d	; 61
     880:	fe b7       	in	r31, 0x3e	; 62
     882:	3a 96       	adiw	r30, 0x0a	; 10
     884:	0f b6       	in	r0, 0x3f	; 63
     886:	f8 94       	cli

	/* Create a new buffer capable of holding a single block from the device */
	uint8_t BlockBuffer[DiskCapacity.BlockSize];
     888:	fe bf       	out	0x3e, r31	; 62
     88a:	0f be       	out	0x3f, r0	; 63
     88c:	ed bf       	out	0x3d, r30	; 61
     88e:	5e 2e       	mov	r5, r30
     890:	4f 2e       	mov	r4, r31
     892:	2d b7       	in	r18, 0x3d	; 61
     894:	3e b7       	in	r19, 0x3e	; 62
     896:	28 1b       	sub	r18, r24
     898:	39 0b       	sbc	r19, r25
     89a:	0f b6       	in	r0, 0x3f	; 63
     89c:	f8 94       	cli
     89e:	3e bf       	out	0x3e, r19	; 62
     8a0:	0f be       	out	0x3f, r0	; 63
     8a2:	2d bf       	out	0x3d, r18	; 61
     8a4:	2d b6       	in	r2, 0x3d	; 61
     8a6:	3e b6       	in	r3, 0x3e	; 62
     8a8:	08 94       	sec
     8aa:	21 1c       	adc	r2, r1
     8ac:	31 1c       	adc	r3, r1
     8ae:	31 01       	movw	r6, r2
     8b0:	0d 81       	ldd	r16, Y+5	; 0x05
     8b2:	1e 81       	ldd	r17, Y+6	; 0x06
     8b4:	80 e0       	ldi	r24, 0x00	; 0
     8b6:	40 e0       	ldi	r20, 0x00	; 0
     8b8:	50 e0       	ldi	r21, 0x00	; 0
     8ba:	ba 01       	movw	r22, r20
     8bc:	21 e0       	ldi	r18, 0x01	; 1
     8be:	71 01       	movw	r14, r2

	/* Read in the first 512 byte block from the device */
	if ((ErrorCode = MassStore_ReadDeviceBlock(0, 0x00000000, 1, DiskCapacity.BlockSize, BlockBuffer)) != 0)
     8c0:	9d d3       	rcall	.+1850   	; 0xffc <MassStore_ReadDeviceBlock>
     8c2:	68 2f       	mov	r22, r24
     8c4:	88 23       	and	r24, r24
     8c6:	19 f0       	breq	.+6      	; 0x8ce <MassStorageHost_Task+0x21a>
     8c8:	86 e6       	ldi	r24, 0x66	; 102
     8ca:	93 e0       	ldi	r25, 0x03	; 3
     8cc:	82 c0       	rjmp	.+260    	; 0x9d2 <MassStorageHost_Task+0x31e>
     8ce:	88 e7       	ldi	r24, 0x78	; 120
     8d0:	93 e0       	ldi	r25, 0x03	; 3
     8d2:	0e 94 0d 10 	call	0x201a	; 0x201a <puts_P>
     8d6:	aa 24       	eor	r10, r10
     8d8:	bb 24       	eor	r11, r11
     8da:	45 c0       	rjmp	.+138    	; 0x966 <MassStorageHost_Task+0x2b2>
	{
		ShowDiskReadError(PSTR("Read Device Block"), ErrorCode);
     8dc:	65 01       	movw	r12, r10
     8de:	44 e0       	ldi	r20, 0x04	; 4
     8e0:	cc 0c       	add	r12, r12
		USB_Host_SetDeviceConfiguration(0);
		return;
	}

	puts_P(PSTR("\r\nContents of first block:\r\n"));
     8e2:	dd 1c       	adc	r13, r13
     8e4:	4a 95       	dec	r20
     8e6:	e1 f7       	brne	.-8      	; 0x8e0 <MassStorageHost_Task+0x22c>
     8e8:	c2 0c       	add	r12, r2

	/* Print out the first block in both HEX and ASCII, 16 bytes per line */
	for (uint16_t Chunk = 0; Chunk < (DiskCapacity.BlockSize >> 4); Chunk++)
     8ea:	d3 1c       	adc	r13, r3
     8ec:	46 01       	movw	r8, r12
     8ee:	00 e1       	ldi	r16, 0x10	; 16
	{
		/* Pointer to the start of the current 16-byte chunk in the read block of data */
		uint8_t* ChunkPtr = &BlockBuffer[Chunk << 4];
     8f0:	d4 01       	movw	r26, r8
     8f2:	8d 91       	ld	r24, X+
     8f4:	4d 01       	movw	r8, r26
     8f6:	00 d0       	rcall	.+0      	; 0x8f8 <MassStorageHost_Task+0x244>
     8f8:	00 d0       	rcall	.+0      	; 0x8fa <MassStorageHost_Task+0x246>
     8fa:	ed b7       	in	r30, 0x3d	; 61
     8fc:	fe b7       	in	r31, 0x3e	; 62
     8fe:	31 96       	adiw	r30, 0x01	; 1
     900:	25 e9       	ldi	r18, 0x95	; 149
     902:	33 e0       	ldi	r19, 0x03	; 3

		/* Print out the 16 bytes of the chunk in HEX format */
		for (uint8_t ByteOffset = 0; ByteOffset < (1 << 4); ByteOffset++)
		{
			char CurrByte = *(ChunkPtr + ByteOffset);
     904:	ad b7       	in	r26, 0x3d	; 61
     906:	be b7       	in	r27, 0x3e	; 62
     908:	12 96       	adiw	r26, 0x02	; 2

			printf_P(PSTR("%.2X "), CurrByte);
     90a:	3c 93       	st	X, r19
     90c:	2e 93       	st	-X, r18
     90e:	11 97       	sbiw	r26, 0x01	; 1
     910:	82 83       	std	Z+2, r24	; 0x02
     912:	13 82       	std	Z+3, r1	; 0x03
     914:	0e 94 ee 0f 	call	0x1fdc	; 0x1fdc <printf_P>
     918:	01 50       	subi	r16, 0x01	; 1
     91a:	0f 90       	pop	r0
     91c:	0f 90       	pop	r0
     91e:	0f 90       	pop	r0
     920:	0f 90       	pop	r0
     922:	31 f7       	brne	.-52     	; 0x8f0 <MassStorageHost_Task+0x23c>
     924:	8b e9       	ldi	r24, 0x9B	; 155
     926:	93 e0       	ldi	r25, 0x03	; 3
     928:	0e 94 0d 10 	call	0x201a	; 0x201a <puts_P>
     92c:	30 e1       	ldi	r19, 0x10	; 16
	{
		/* Pointer to the start of the current 16-byte chunk in the read block of data */
		uint8_t* ChunkPtr = &BlockBuffer[Chunk << 4];

		/* Print out the 16 bytes of the chunk in HEX format */
		for (uint8_t ByteOffset = 0; ByteOffset < (1 << 4); ByteOffset++)
     92e:	f3 2e       	mov	r15, r19
     930:	d6 01       	movw	r26, r12
     932:	0d 91       	ld	r16, X+
     934:	6d 01       	movw	r12, r26
     936:	10 e0       	ldi	r17, 0x00	; 0
			char CurrByte = *(ChunkPtr + ByteOffset);

			printf_P(PSTR("%.2X "), CurrByte);
		}

		puts_P(PSTR("    "));
     938:	c8 01       	movw	r24, r16
     93a:	0e 94 bc 0f 	call	0x1f78	; 0x1f78 <isprint>
     93e:	00 97       	sbiw	r24, 0x00	; 0
     940:	11 f4       	brne	.+4      	; 0x946 <MassStorageHost_Task+0x292>
     942:	0e e2       	ldi	r16, 0x2E	; 46

		/* Print out the 16 bytes of the chunk in ASCII format */
		for (uint8_t ByteOffset = 0; ByteOffset < (1 << 4); ByteOffset++)
		{
			char CurrByte = *(ChunkPtr + ByteOffset);
     944:	10 e0       	ldi	r17, 0x00	; 0
     946:	60 91 4d 01 	lds	r22, 0x014D

			putchar(isprint(CurrByte) ? CurrByte : '.');
     94a:	70 91 4e 01 	lds	r23, 0x014E
     94e:	c8 01       	movw	r24, r16
     950:	0e 94 c2 0f 	call	0x1f84	; 0x1f84 <fputc>
     954:	fa 94       	dec	r15
     956:	61 f7       	brne	.-40     	; 0x930 <MassStorageHost_Task+0x27c>
     958:	80 ea       	ldi	r24, 0xA0	; 160
     95a:	93 e0       	ldi	r25, 0x03	; 3
     95c:	0e 94 0d 10 	call	0x201a	; 0x201a <puts_P>
     960:	08 94       	sec
     962:	a1 1c       	adc	r10, r1
     964:	b1 1c       	adc	r11, r1
     966:	a5 01       	movw	r20, r10
     968:	60 e0       	ldi	r22, 0x00	; 0
		}

		puts_P(PSTR("    "));

		/* Print out the 16 bytes of the chunk in ASCII format */
		for (uint8_t ByteOffset = 0; ByteOffset < (1 << 4); ByteOffset++)
     96a:	70 e0       	ldi	r23, 0x00	; 0
			char CurrByte = *(ChunkPtr + ByteOffset);

			putchar(isprint(CurrByte) ? CurrByte : '.');
		}

		puts_P(PSTR("\r\n"));
     96c:	8d 81       	ldd	r24, Y+5	; 0x05
     96e:	9e 81       	ldd	r25, Y+6	; 0x06
     970:	af 81       	ldd	r26, Y+7	; 0x07
     972:	b8 85       	ldd	r27, Y+8	; 0x08
	}

	puts_P(PSTR("\r\nContents of first block:\r\n"));

	/* Print out the first block in both HEX and ASCII, 16 bytes per line */
	for (uint16_t Chunk = 0; Chunk < (DiskCapacity.BlockSize >> 4); Chunk++)
     974:	24 e0       	ldi	r18, 0x04	; 4
     976:	b6 95       	lsr	r27
     978:	a7 95       	ror	r26
     97a:	97 95       	ror	r25
     97c:	87 95       	ror	r24
     97e:	2a 95       	dec	r18
     980:	d1 f7       	brne	.-12     	; 0x976 <MassStorageHost_Task+0x2c2>
     982:	48 17       	cp	r20, r24
     984:	59 07       	cpc	r21, r25
     986:	6a 07       	cpc	r22, r26
     988:	7b 07       	cpc	r23, r27
     98a:	08 f4       	brcc	.+2      	; 0x98e <MassStorageHost_Task+0x2da>
     98c:	a7 cf       	rjmp	.-178    	; 0x8dc <MassStorageHost_Task+0x228>
     98e:	83 ea       	ldi	r24, 0xA3	; 163
     990:	93 e0       	ldi	r25, 0x03	; 3
     992:	0e 94 0d 10 	call	0x201a	; 0x201a <puts_P>
     996:	05 c0       	rjmp	.+10     	; 0x9a2 <MassStorageHost_Task+0x2ee>
     998:	80 91 3c 01 	lds	r24, 0x013C
     99c:	81 30       	cpi	r24, 0x01	; 1
     99e:	09 f4       	brne	.+2      	; 0x9a2 <MassStorageHost_Task+0x2ee>
     9a0:	4f c0       	rjmp	.+158    	; 0xa40 <MassStorageHost_Task+0x38c>
		}

		puts_P(PSTR("\r\n"));
	}

	puts_P(PSTR("\r\n\r\nPress board button to read entire ASCII contents of disk...\r\n\r\n"));
     9a2:	8c b1       	in	r24, 0x0c	; 12
     9a4:	82 fd       	sbrc	r24, 2
     9a6:	f8 cf       	rjmp	.-16     	; 0x998 <MassStorageHost_Task+0x2e4>
     9a8:	88 24       	eor	r8, r8

	/* Wait for the board button to be pressed */
	while (!(Buttons_GetStatus() & BUTTONS_BUTTON1))
     9aa:	99 24       	eor	r9, r9
	{
		/* Abort if device removed */
		if (USB_HostState == HOST_STATE_Unattached)
     9ac:	54 01       	movw	r10, r8
     9ae:	39 c0       	rjmp	.+114    	; 0xa22 <MassStorageHost_Task+0x36e>
     9b0:	0d 81       	ldd	r16, Y+5	; 0x05
     9b2:	1e 81       	ldd	r17, Y+6	; 0x06
     9b4:	80 e0       	ldi	r24, 0x00	; 0
			}

			static inline uint8_t Buttons_GetStatus(void) ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t Buttons_GetStatus(void)
			{
				return ((PINE & BUTTONS_BUTTON1) ^ BUTTONS_BUTTON1);
     9b6:	b5 01       	movw	r22, r10
	}

	puts_P(PSTR("\r\n\r\nPress board button to read entire ASCII contents of disk...\r\n\r\n"));

	/* Wait for the board button to be pressed */
	while (!(Buttons_GetStatus() & BUTTONS_BUTTON1))
     9b8:	a4 01       	movw	r20, r8
     9ba:	21 e0       	ldi	r18, 0x01	; 1
     9bc:	73 01       	movw	r14, r6
     9be:	1e d3       	rcall	.+1596   	; 0xffc <MassStore_ReadDeviceBlock>
     9c0:	68 2f       	mov	r22, r24
     9c2:	88 23       	and	r24, r24

	/* Print out the entire disk contents in ASCII format */
	for (uint32_t CurrBlockAddress = 0; CurrBlockAddress < DiskCapacity.Blocks; CurrBlockAddress++)
	{
		/* Read in the next block of data from the device */
		if ((ErrorCode = MassStore_ReadDeviceBlock(0, CurrBlockAddress, 1, DiskCapacity.BlockSize, BlockBuffer)) != 0)
     9c4:	21 f4       	brne	.+8      	; 0x9ce <MassStorageHost_Task+0x31a>
     9c6:	71 01       	movw	r14, r2
     9c8:	cc 24       	eor	r12, r12
     9ca:	dd 24       	eor	r13, r13
     9cc:	19 c0       	rjmp	.+50     	; 0xa00 <MassStorageHost_Task+0x34c>
     9ce:	87 ee       	ldi	r24, 0xE7	; 231
     9d0:	93 e0       	ldi	r25, 0x03	; 3
     9d2:	2e de       	rcall	.-932    	; 0x630 <ShowDiskReadError>
     9d4:	32 c0       	rjmp	.+100    	; 0xa3a <MassStorageHost_Task+0x386>
     9d6:	f7 01       	movw	r30, r14
     9d8:	01 91       	ld	r16, Z+
     9da:	7f 01       	movw	r14, r30
     9dc:	10 e0       	ldi	r17, 0x00	; 0
     9de:	c8 01       	movw	r24, r16
     9e0:	0e 94 bc 0f 	call	0x1f78	; 0x1f78 <isprint>
		{
			ShowDiskReadError(PSTR("Read Device Block"), ErrorCode);
     9e4:	00 97       	sbiw	r24, 0x00	; 0
     9e6:	11 f4       	brne	.+4      	; 0x9ec <MassStorageHost_Task+0x338>
     9e8:	0e e2       	ldi	r16, 0x2E	; 46
     9ea:	10 e0       	ldi	r17, 0x00	; 0
     9ec:	60 91 4d 01 	lds	r22, 0x014D
		}

		/* Send the ASCII data in the read in block to the serial port */
		for (uint16_t Byte = 0; Byte < DiskCapacity.BlockSize; Byte++)
		{
			char CurrByte = BlockBuffer[Byte];
     9f0:	70 91 4e 01 	lds	r23, 0x014E

			putchar(isprint(CurrByte) ? CurrByte : '.');
     9f4:	c8 01       	movw	r24, r16
     9f6:	0e 94 c2 0f 	call	0x1f84	; 0x1f84 <fputc>
     9fa:	08 94       	sec
     9fc:	c1 1c       	adc	r12, r1
     9fe:	d1 1c       	adc	r13, r1
     a00:	c6 01       	movw	r24, r12
     a02:	a0 e0       	ldi	r26, 0x00	; 0
     a04:	b0 e0       	ldi	r27, 0x00	; 0
     a06:	4d 81       	ldd	r20, Y+5	; 0x05
     a08:	5e 81       	ldd	r21, Y+6	; 0x06
     a0a:	6f 81       	ldd	r22, Y+7	; 0x07
     a0c:	78 85       	ldd	r23, Y+8	; 0x08
     a0e:	84 17       	cp	r24, r20
     a10:	95 07       	cpc	r25, r21
			USB_Host_SetDeviceConfiguration(0);
			return;
		}

		/* Send the ASCII data in the read in block to the serial port */
		for (uint16_t Byte = 0; Byte < DiskCapacity.BlockSize; Byte++)
     a12:	a6 07       	cpc	r26, r22
     a14:	b7 07       	cpc	r27, r23
     a16:	f8 f2       	brcs	.-66     	; 0x9d6 <MassStorageHost_Task+0x322>
     a18:	08 94       	sec
     a1a:	81 1c       	adc	r8, r1
     a1c:	91 1c       	adc	r9, r1
     a1e:	a1 1c       	adc	r10, r1
     a20:	b1 1c       	adc	r11, r1
     a22:	89 81       	ldd	r24, Y+1	; 0x01
     a24:	9a 81       	ldd	r25, Y+2	; 0x02
     a26:	ab 81       	ldd	r26, Y+3	; 0x03
     a28:	bc 81       	ldd	r27, Y+4	; 0x04
     a2a:	88 16       	cp	r8, r24
     a2c:	99 06       	cpc	r9, r25
     a2e:	aa 06       	cpc	r10, r26
		if (USB_HostState == HOST_STATE_Unattached)
		  return;
	}

	/* Print out the entire disk contents in ASCII format */
	for (uint32_t CurrBlockAddress = 0; CurrBlockAddress < DiskCapacity.Blocks; CurrBlockAddress++)
     a30:	bb 06       	cpc	r11, r27
     a32:	08 f4       	brcc	.+2      	; 0xa36 <MassStorageHost_Task+0x382>
     a34:	bd cf       	rjmp	.-134    	; 0x9b0 <MassStorageHost_Task+0x2fc>
     a36:	80 e6       	ldi	r24, 0x60	; 96
     a38:	2a dd       	rcall	.-1452   	; 0x48e <LEDs_SetAllLEDs>
     a3a:	80 e0       	ldi	r24, 0x00	; 0
     a3c:	0e 94 1a 0f 	call	0x1e34	; 0x1e34 <USB_Host_SetDeviceConfiguration>
     a40:	5d be       	out	0x3d, r5	; 61
     a42:	4e be       	out	0x3e, r4	; 62
     a44:	21 96       	adiw	r28, 0x01	; 1
     a46:	2e ad       	sts	0x6e, r18
     a48:	3f ad       	sts	0x6f, r19
     a4a:	21 97       	sbiw	r28, 0x01	; 1
     a4c:	0f b6       	in	r0, 0x3f	; 63
			putchar(isprint(CurrByte) ? CurrByte : '.');
		}
	}

	/* Indicate device no longer busy */
	LEDs_SetAllLEDs(LEDMASK_USB_READY);
     a4e:	f8 94       	cli
     a50:	3e bf       	out	0x3e, r19	; 62
     a52:	0f be       	out	0x3f, r0	; 63
	USB_Host_SetDeviceConfiguration(0);
     a54:	2d bf       	out	0x3d, r18	; 61
     a56:	c0 5c       	subi	r28, 0xC0	; 192
     a58:	df 4f       	sbci	r29, 0xFF	; 255
     a5a:	0f b6       	in	r0, 0x3f	; 63
     a5c:	f8 94       	cli
}
     a5e:	de bf       	out	0x3e, r29	; 62
     a60:	0f be       	out	0x3f, r0	; 63
     a62:	cd bf       	out	0x3d, r28	; 61
     a64:	df 91       	pop	r29
     a66:	cf 91       	pop	r28
     a68:	1f 91       	pop	r17
     a6a:	0f 91       	pop	r16
     a6c:	ff 90       	pop	r15
     a6e:	ef 90       	pop	r14
     a70:	df 90       	pop	r13
     a72:	cf 90       	pop	r12
     a74:	bf 90       	pop	r11
     a76:	af 90       	pop	r10
     a78:	9f 90       	pop	r9
     a7a:	8f 90       	pop	r8
     a7c:	7f 90       	pop	r7
     a7e:	6f 90       	pop	r6
     a80:	5f 90       	pop	r5
     a82:	4f 90       	pop	r4
     a84:	3f 90       	pop	r3
     a86:	2f 90       	pop	r2
     a88:	08 95       	ret

00000a8a <main>:
     a8a:	06 dd       	rcall	.-1524   	; 0x498 <SetupHardware>
     a8c:	88 e9       	ldi	r24, 0x98	; 152
     a8e:	90 e0       	ldi	r25, 0x00	; 0
     a90:	0e 94 0d 10 	call	0x201a	; 0x201a <puts_P>
     a94:	80 e1       	ldi	r24, 0x10	; 16
     a96:	fb dc       	rcall	.-1546   	; 0x48e <LEDs_SetAllLEDs>
     a98:	78 94       	sei
     a9a:	0c de       	rcall	.-1000   	; 0x6b4 <MassStorageHost_Task>
     a9c:	0e 94 56 0f 	call	0x1eac	; 0x1eac <USB_USBTask>
     aa0:	fc cf       	rjmp	.-8      	; 0xa9a <main+0x10>

00000aa2 <DComp_NextMSInterface>:
 *  This comparator searches for the next Interface descriptor of the correct Mass Storage Class, Subclass and Protocol values.
 *
 *  \return A value from the DSEARCH_Return_ErrorCodes_t enum
 */
uint8_t DComp_NextMSInterface(void* CurrentDescriptor)
{
     aa2:	fc 01       	movw	r30, r24
	USB_Descriptor_Header_t* Header = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Header_t);

	if (Header->Type == DTYPE_Interface)
     aa4:	81 81       	ldd	r24, Z+1	; 0x01
     aa6:	84 30       	cpi	r24, 0x04	; 4
     aa8:	49 f4       	brne	.+18     	; 0xabc <DComp_NextMSInterface+0x1a>
	{
		USB_Descriptor_Interface_t* Interface = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Interface_t);

		/* Check the descriptor class and protocol, break out if correct class/protocol interface found */
		if ((Interface->Class    == MASS_STORE_CLASS)    &&
     aaa:	85 81       	ldd	r24, Z+5	; 0x05
     aac:	88 30       	cpi	r24, 0x08	; 8
     aae:	31 f4       	brne	.+12     	; 0xabc <DComp_NextMSInterface+0x1a>
     ab0:	86 81       	ldd	r24, Z+6	; 0x06
     ab2:	86 30       	cpi	r24, 0x06	; 6
     ab4:	19 f4       	brne	.+6      	; 0xabc <DComp_NextMSInterface+0x1a>
		    (Interface->SubClass == MASS_STORE_SUBCLASS) &&
     ab6:	87 81       	ldd	r24, Z+7	; 0x07
     ab8:	80 35       	cpi	r24, 0x50	; 80
     aba:	11 f0       	breq	.+4      	; 0xac0 <DComp_NextMSInterface+0x1e>
		{
			return DESCRIPTOR_SEARCH_Found;
		}
	}

	return DESCRIPTOR_SEARCH_NotFound;
     abc:	82 e0       	ldi	r24, 0x02	; 2
     abe:	08 95       	ret
		/* Check the descriptor class and protocol, break out if correct class/protocol interface found */
		if ((Interface->Class    == MASS_STORE_CLASS)    &&
		    (Interface->SubClass == MASS_STORE_SUBCLASS) &&
		    (Interface->Protocol == MASS_STORE_PROTOCOL))
		{
			return DESCRIPTOR_SEARCH_Found;
     ac0:	80 e0       	ldi	r24, 0x00	; 0
		}
	}

	return DESCRIPTOR_SEARCH_NotFound;
}
     ac2:	08 95       	ret

00000ac4 <DComp_NextMSInterfaceBulkDataEndpoint>:
 *  another interface descriptor is found before the next endpoint.
 *
 *  \return A value from the DSEARCH_Return_ErrorCodes_t enum
 */
uint8_t DComp_NextMSInterfaceBulkDataEndpoint(void* CurrentDescriptor)
{
     ac4:	fc 01       	movw	r30, r24
	USB_Descriptor_Header_t* Header = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Header_t);

	if (Header->Type == DTYPE_Endpoint)
     ac6:	81 81       	ldd	r24, Z+1	; 0x01
     ac8:	85 30       	cpi	r24, 0x05	; 5
     aca:	29 f4       	brne	.+10     	; 0xad6 <DComp_NextMSInterfaceBulkDataEndpoint+0x12>
	{
		USB_Descriptor_Endpoint_t* Endpoint = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Endpoint_t);

		/* Check the endpoint type, break out if correct BULK type endpoint found */
		if ((Endpoint->Attributes & EP_TYPE_MASK) == EP_TYPE_BULK)
     acc:	83 81       	ldd	r24, Z+3	; 0x03
     ace:	83 70       	andi	r24, 0x03	; 3
     ad0:	82 30       	cpi	r24, 0x02	; 2
     ad2:	19 f4       	brne	.+6      	; 0xada <DComp_NextMSInterfaceBulkDataEndpoint+0x16>
     ad4:	04 c0       	rjmp	.+8      	; 0xade <DComp_NextMSInterfaceBulkDataEndpoint+0x1a>
		  return DESCRIPTOR_SEARCH_Found;
	}
	else if (Header->Type == DTYPE_Interface)
     ad6:	84 30       	cpi	r24, 0x04	; 4
     ad8:	21 f0       	breq	.+8      	; 0xae2 <DComp_NextMSInterfaceBulkDataEndpoint+0x1e>
	{
		return DESCRIPTOR_SEARCH_Fail;
	}

	return DESCRIPTOR_SEARCH_NotFound;
     ada:	82 e0       	ldi	r24, 0x02	; 2
     adc:	08 95       	ret
	{
		USB_Descriptor_Endpoint_t* Endpoint = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Endpoint_t);

		/* Check the endpoint type, break out if correct BULK type endpoint found */
		if ((Endpoint->Attributes & EP_TYPE_MASK) == EP_TYPE_BULK)
		  return DESCRIPTOR_SEARCH_Found;
     ade:	80 e0       	ldi	r24, 0x00	; 0
     ae0:	08 95       	ret
	}
	else if (Header->Type == DTYPE_Interface)
	{
		return DESCRIPTOR_SEARCH_Fail;
     ae2:	81 e0       	ldi	r24, 0x01	; 1
	}

	return DESCRIPTOR_SEARCH_NotFound;
}
     ae4:	08 95       	ret

00000ae6 <ProcessConfigurationDescriptor>:
 *  This routine searches for a MSD interface descriptor containing bulk IN and OUT data endpoints.
 *
 *  \return An error code from the \ref MassStorageHost_GetConfigDescriptorDataCodes_t enum.
 */
uint8_t ProcessConfigurationDescriptor(void)
{
     ae6:	af 92       	push	r10
     ae8:	bf 92       	push	r11
     aea:	cf 92       	push	r12
     aec:	df 92       	push	r13
     aee:	ef 92       	push	r14
     af0:	ff 92       	push	r15
     af2:	0f 93       	push	r16
     af4:	1f 93       	push	r17
     af6:	cf 93       	push	r28
     af8:	df 93       	push	r29
     afa:	cd b7       	in	r28, 0x3d	; 61
     afc:	de b7       	in	r29, 0x3e	; 62
     afe:	c4 50       	subi	r28, 0x04	; 4
     b00:	d2 40       	sbci	r29, 0x02	; 2
     b02:	0f b6       	in	r0, 0x3f	; 63
     b04:	f8 94       	cli
     b06:	de bf       	out	0x3e, r29	; 62
     b08:	0f be       	out	0x3f, r0	; 63
     b0a:	cd bf       	out	0x3d, r28	; 61
	uint8_t  ConfigDescriptorData[512];
	void*    CurrConfigLocation = ConfigDescriptorData;
     b0c:	ae 01       	movw	r20, r28
     b0e:	4b 5f       	subi	r20, 0xFB	; 251
     b10:	5f 4f       	sbci	r21, 0xFF	; 255
     b12:	5c 83       	std	Y+4, r21	; 0x04
     b14:	4b 83       	std	Y+3, r20	; 0x03
	USB_Descriptor_Interface_t* MSInterface     = NULL;
	USB_Descriptor_Endpoint_t*  DataINEndpoint  = NULL;
	USB_Descriptor_Endpoint_t*  DataOUTEndpoint = NULL;

	/* Retrieve the entire configuration descriptor into the allocated buffer */
	switch (USB_Host_GetDeviceConfigDescriptor(1, &CurrConfigBytesRem, ConfigDescriptorData, sizeof(ConfigDescriptorData)))
     b16:	81 e0       	ldi	r24, 0x01	; 1
     b18:	6e 01       	movw	r12, r28
     b1a:	08 94       	sec
     b1c:	c1 1c       	adc	r12, r1
     b1e:	d1 1c       	adc	r13, r1
     b20:	b6 01       	movw	r22, r12
     b22:	20 e0       	ldi	r18, 0x00	; 0
     b24:	32 e0       	ldi	r19, 0x02	; 2
     b26:	c1 d7       	rcall	.+3970   	; 0x1aaa <USB_Host_GetDeviceConfigDescriptor>
     b28:	85 30       	cpi	r24, 0x05	; 5
     b2a:	09 f4       	brne	.+2      	; 0xb2e <ProcessConfigurationDescriptor+0x48>
     b2c:	4a c0       	rjmp	.+148    	; 0xbc2 <ProcessConfigurationDescriptor+0xdc>
     b2e:	86 30       	cpi	r24, 0x06	; 6
     b30:	19 f0       	breq	.+6      	; 0xb38 <ProcessConfigurationDescriptor+0x52>
     b32:	88 23       	and	r24, r24
     b34:	29 f0       	breq	.+10     	; 0xb40 <ProcessConfigurationDescriptor+0x5a>
     b36:	02 c0       	rjmp	.+4      	; 0xb3c <ProcessConfigurationDescriptor+0x56>
     b38:	83 e0       	ldi	r24, 0x03	; 3
	{
		case HOST_GETCONFIG_Successful:
			break;
		case HOST_GETCONFIG_InvalidData:
			return InvalidConfigDataReturned;
     b3a:	46 c0       	rjmp	.+140    	; 0xbc8 <ProcessConfigurationDescriptor+0xe2>
     b3c:	81 e0       	ldi	r24, 0x01	; 1
		case HOST_GETCONFIG_BuffOverflow:
			return DescriptorTooLarge;
		default:
			return ControlError;
     b3e:	44 c0       	rjmp	.+136    	; 0xbc8 <ProcessConfigurationDescriptor+0xe2>
     b40:	ee 24       	eor	r14, r14
	USB_Descriptor_Interface_t* MSInterface     = NULL;
	USB_Descriptor_Endpoint_t*  DataINEndpoint  = NULL;
	USB_Descriptor_Endpoint_t*  DataOUTEndpoint = NULL;

	/* Retrieve the entire configuration descriptor into the allocated buffer */
	switch (USB_Host_GetDeviceConfigDescriptor(1, &CurrConfigBytesRem, ConfigDescriptorData, sizeof(ConfigDescriptorData)))
     b42:	ff 24       	eor	r15, r15
     b44:	00 e0       	ldi	r16, 0x00	; 0
     b46:	10 e0       	ldi	r17, 0x00	; 0
     b48:	aa 24       	eor	r10, r10
     b4a:	bb 24       	eor	r11, r11
     b4c:	a1 14       	cp	r10, r1
	}

	while (!(DataINEndpoint) || !(DataOUTEndpoint))
	{
		/* See if we've found a likely compatible interface, and if there is an endpoint within that interface */
		if (!(MSInterface) ||
     b4e:	b1 04       	cpc	r11, r1
     b50:	49 f0       	breq	.+18     	; 0xb64 <ProcessConfigurationDescriptor+0x7e>
     b52:	c6 01       	movw	r24, r12
		    USB_GetNextDescriptorComp(&CurrConfigBytesRem, &CurrConfigLocation,
     b54:	be 01       	movw	r22, r28
     b56:	6d 5f       	subi	r22, 0xFD	; 253
     b58:	7f 4f       	sbci	r23, 0xFF	; 255
     b5a:	42 e6       	ldi	r20, 0x62	; 98
     b5c:	55 e0       	ldi	r21, 0x05	; 5
     b5e:	fc d7       	rcall	.+4088   	; 0x1b58 <USB_GetNextDescriptorComp>
     b60:	88 23       	and	r24, r24
     b62:	81 f0       	breq	.+32     	; 0xb84 <ProcessConfigurationDescriptor+0x9e>
	}

	while (!(DataINEndpoint) || !(DataOUTEndpoint))
	{
		/* See if we've found a likely compatible interface, and if there is an endpoint within that interface */
		if (!(MSInterface) ||
     b64:	c6 01       	movw	r24, r12
     b66:	be 01       	movw	r22, r28
		    USB_GetNextDescriptorComp(&CurrConfigBytesRem, &CurrConfigLocation,
		                              DComp_NextMSInterfaceBulkDataEndpoint) != DESCRIPTOR_SEARCH_COMP_Found)
		{
			/* Get the next Mass Storage interface from the configuration descriptor */
			if (USB_GetNextDescriptorComp(&CurrConfigBytesRem, &CurrConfigLocation,
     b68:	6d 5f       	subi	r22, 0xFD	; 253
     b6a:	7f 4f       	sbci	r23, 0xFF	; 255
     b6c:	41 e5       	ldi	r20, 0x51	; 81
     b6e:	55 e0       	ldi	r21, 0x05	; 5
     b70:	f3 d7       	rcall	.+4070   	; 0x1b58 <USB_GetNextDescriptorComp>
     b72:	88 23       	and	r24, r24
     b74:	41 f5       	brne	.+80     	; 0xbc6 <ProcessConfigurationDescriptor+0xe0>
     b76:	ab 80       	ldd	r10, Y+3	; 0x03
     b78:	bc 80       	ldd	r11, Y+4	; 0x04
     b7a:	ee 24       	eor	r14, r14
				/* Descriptor not found, error out */
				return NoCompatibleInterfaceFound;
			}

			/* Save the interface in case we need to refer back to it later */
			MSInterface = DESCRIPTOR_PCAST(CurrConfigLocation, USB_Descriptor_Interface_t);
     b7c:	ff 24       	eor	r15, r15
     b7e:	00 e0       	ldi	r16, 0x00	; 0

			/* Clear any found endpoints */
			DataINEndpoint  = NULL;
			DataOUTEndpoint = NULL;
     b80:	10 e0       	ldi	r17, 0x00	; 0
     b82:	e4 cf       	rjmp	.-56     	; 0xb4c <ProcessConfigurationDescriptor+0x66>
				/* Descriptor not found, error out */
				return NoCompatibleInterfaceFound;
			}

			/* Save the interface in case we need to refer back to it later */
			MSInterface = DESCRIPTOR_PCAST(CurrConfigLocation, USB_Descriptor_Interface_t);
     b84:	eb 81       	ldd	r30, Y+3	; 0x03
     b86:	fc 81       	ldd	r31, Y+4	; 0x04
     b88:	82 81       	ldd	r24, Z+2	; 0x02
			/* Skip the remainder of the loop as we have not found an endpoint yet */
			continue;
		}

		/* Retrieve the endpoint address from the endpoint descriptor */
		USB_Descriptor_Endpoint_t* EndpointData = DESCRIPTOR_PCAST(CurrConfigLocation, USB_Descriptor_Endpoint_t);
     b8a:	87 ff       	sbrs	r24, 7
     b8c:	02 c0       	rjmp	.+4      	; 0xb92 <ProcessConfigurationDescriptor+0xac>

		/* If the endpoint is a IN type endpoint */
		if ((EndpointData->EndpointAddress & ENDPOINT_DIR_MASK) == ENDPOINT_DIR_IN)
     b8e:	8f 01       	movw	r16, r30
     b90:	01 c0       	rjmp	.+2      	; 0xb94 <ProcessConfigurationDescriptor+0xae>
     b92:	7f 01       	movw	r14, r30
		  DataINEndpoint  = EndpointData;
     b94:	01 15       	cp	r16, r1
     b96:	11 05       	cpc	r17, r1
		else
		  DataOUTEndpoint = EndpointData;
     b98:	c9 f2       	breq	.-78     	; 0xb4c <ProcessConfigurationDescriptor+0x66>
			return DescriptorTooLarge;
		default:
			return ControlError;
	}

	while (!(DataINEndpoint) || !(DataOUTEndpoint))
     b9a:	e1 14       	cp	r14, r1
     b9c:	f1 04       	cpc	r15, r1
     b9e:	b1 f2       	breq	.-84     	; 0xb4c <ProcessConfigurationDescriptor+0x66>
     ba0:	f8 01       	movw	r30, r16
     ba2:	24 81       	ldd	r18, Z+4	; 0x04
     ba4:	35 81       	ldd	r19, Z+5	; 0x05
		else
		  DataOUTEndpoint = EndpointData;
	}

	/* Configure the Mass Storage data IN pipe */
	Pipe_ConfigurePipe(MASS_STORE_DATA_IN_PIPE, EP_TYPE_BULK, DataINEndpoint->EndpointAddress, DataINEndpoint->EndpointSize, 1);
     ba6:	81 e8       	ldi	r24, 0x81	; 129
     ba8:	62 e0       	ldi	r22, 0x02	; 2
     baa:	42 81       	ldd	r20, Z+2	; 0x02
     bac:	01 e0       	ldi	r16, 0x01	; 1
     bae:	b9 d5       	rcall	.+2930   	; 0x1722 <Pipe_ConfigurePipe>
     bb0:	f7 01       	movw	r30, r14
     bb2:	24 81       	ldd	r18, Z+4	; 0x04
     bb4:	35 81       	ldd	r19, Z+5	; 0x05
     bb6:	82 e0       	ldi	r24, 0x02	; 2

	/* Configure the Mass Storage data OUT pipe */
	Pipe_ConfigurePipe(MASS_STORE_DATA_OUT_PIPE, EP_TYPE_BULK, DataOUTEndpoint->EndpointAddress, DataOUTEndpoint->EndpointSize, 1);
     bb8:	62 e0       	ldi	r22, 0x02	; 2
     bba:	42 81       	ldd	r20, Z+2	; 0x02
     bbc:	b2 d5       	rcall	.+2916   	; 0x1722 <Pipe_ConfigurePipe>
     bbe:	80 e0       	ldi	r24, 0x00	; 0
     bc0:	03 c0       	rjmp	.+6      	; 0xbc8 <ProcessConfigurationDescriptor+0xe2>
     bc2:	82 e0       	ldi	r24, 0x02	; 2
     bc4:	01 c0       	rjmp	.+2      	; 0xbc8 <ProcessConfigurationDescriptor+0xe2>
     bc6:	84 e0       	ldi	r24, 0x04	; 4

	/* Valid data found, return success */
	return SuccessfulConfigRead;
     bc8:	cc 5f       	subi	r28, 0xFC	; 252
     bca:	dd 4f       	sbci	r29, 0xFD	; 253
		case HOST_GETCONFIG_Successful:
			break;
		case HOST_GETCONFIG_InvalidData:
			return InvalidConfigDataReturned;
		case HOST_GETCONFIG_BuffOverflow:
			return DescriptorTooLarge;
     bcc:	0f b6       	in	r0, 0x3f	; 63
     bce:	f8 94       	cli
			/* Get the next Mass Storage interface from the configuration descriptor */
			if (USB_GetNextDescriptorComp(&CurrConfigBytesRem, &CurrConfigLocation,
										  DComp_NextMSInterface) != DESCRIPTOR_SEARCH_COMP_Found)
			{
				/* Descriptor not found, error out */
				return NoCompatibleInterfaceFound;
     bd0:	de bf       	out	0x3e, r29	; 62
	/* Configure the Mass Storage data OUT pipe */
	Pipe_ConfigurePipe(MASS_STORE_DATA_OUT_PIPE, EP_TYPE_BULK, DataOUTEndpoint->EndpointAddress, DataOUTEndpoint->EndpointSize, 1);

	/* Valid data found, return success */
	return SuccessfulConfigRead;
}
     bd2:	0f be       	out	0x3f, r0	; 63
     bd4:	cd bf       	out	0x3d, r28	; 61
     bd6:	df 91       	pop	r29
     bd8:	cf 91       	pop	r28
     bda:	1f 91       	pop	r17
     bdc:	0f 91       	pop	r16
     bde:	ff 90       	pop	r15
     be0:	ef 90       	pop	r14
     be2:	df 90       	pop	r13
     be4:	cf 90       	pop	r12
     be6:	bf 90       	pop	r11
     be8:	af 90       	pop	r10
     bea:	08 95       	ret

00000bec <MassStore_WaitForDataReceived>:
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Host_GetFrameNumber(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t USB_Host_GetFrameNumber(void)
			{
				return UHFNUM;
     bec:	20 91 a2 00 	lds	r18, 0x00A2
     bf0:	30 91 a3 00 	lds	r19, 0x00A3
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
     bf4:	81 e0       	ldi	r24, 0x01	; 1
     bf6:	80 93 a7 00 	sts	0x00A7, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
     bfa:	80 91 a9 00 	lds	r24, 0x00A9
     bfe:	8f 7b       	andi	r24, 0xBF	; 191
     c00:	80 93 a9 00 	sts	0x00A9, r24
 *
 *  \return A value from the Pipe_Stream_RW_ErrorCodes_t enum
 */
static uint8_t MassStore_WaitForDataReceived(void)
{
	uint16_t TimeoutMSRem        = COMMAND_DATA_TIMEOUT_MS;
     c04:	80 e1       	ldi	r24, 0x10	; 16
     c06:	97 e2       	ldi	r25, 0x27	; 39
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
     c08:	72 e0       	ldi	r23, 0x02	; 2
     c0a:	61 e0       	ldi	r22, 0x01	; 1
     c0c:	3d c0       	rjmp	.+122    	; 0xc88 <MassStore_WaitForDataReceived+0x9c>
     c0e:	40 91 a2 00 	lds	r20, 0x00A2
     c12:	50 91 a3 00 	lds	r21, 0x00A3
	while (!(Pipe_IsINReceived()))
	{
		uint16_t CurrentFrameNumber = USB_Host_GetFrameNumber();

		/* Check to see if a new frame has been issued (1ms elapsed) */
		if (CurrentFrameNumber != PreviousFrameNumber)
     c16:	42 17       	cp	r20, r18
     c18:	53 07       	cpc	r21, r19
     c1a:	21 f0       	breq	.+8      	; 0xc24 <MassStore_WaitForDataReceived+0x38>
		{
			/* Save the new frame number and decrement the timeout period */
			PreviousFrameNumber = CurrentFrameNumber;
			TimeoutMSRem--;
     c1c:	01 97       	sbiw	r24, 0x01	; 1

			/* Check to see if the timeout period for the command has elapsed */
			if (!(TimeoutMSRem))
     c1e:	09 f4       	brne	.+2      	; 0xc22 <MassStore_WaitForDataReceived+0x36>
     c20:	49 c0       	rjmp	.+146    	; 0xcb4 <MassStore_WaitForDataReceived+0xc8>
     c22:	9a 01       	movw	r18, r20

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
     c24:	40 91 a9 00 	lds	r20, 0x00A9
     c28:	40 64       	ori	r20, 0x40	; 64
     c2a:	40 93 a9 00 	sts	0x00A9, r20
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
     c2e:	70 93 a7 00 	sts	0x00A7, r23

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
     c32:	40 91 a9 00 	lds	r20, 0x00A9
     c36:	4f 7b       	andi	r20, 0xBF	; 191
     c38:	40 93 a9 00 	sts	0x00A9, r20
			 *  \return Boolean \c true if the current pipe has been stalled by the attached device, \c false otherwise.
			 */
			static inline bool Pipe_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsStalled(void)
			{
				return ((UPINTX & (1 << RXSTALLI)) ? true : false);
     c3c:	40 91 a6 00 	lds	r20, 0x00A6
		Pipe_Freeze();
		Pipe_SelectPipe(MASS_STORE_DATA_OUT_PIPE);
		Pipe_Unfreeze();

		/* Check if pipe stalled (command failed by device) */
		if (Pipe_IsStalled())
     c40:	41 fd       	sbrc	r20, 1
     c42:	10 c0       	rjmp	.+32     	; 0xc64 <MassStore_WaitForDataReceived+0x78>

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
     c44:	40 91 a9 00 	lds	r20, 0x00A9
     c48:	40 64       	ori	r20, 0x40	; 64
     c4a:	40 93 a9 00 	sts	0x00A9, r20
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
     c4e:	60 93 a7 00 	sts	0x00A7, r22

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
     c52:	40 91 a9 00 	lds	r20, 0x00A9
     c56:	4f 7b       	andi	r20, 0xBF	; 191
     c58:	40 93 a9 00 	sts	0x00A9, r20
			 *  \return Boolean \c true if the current pipe has been stalled by the attached device, \c false otherwise.
			 */
			static inline bool Pipe_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsStalled(void)
			{
				return ((UPINTX & (1 << RXSTALLI)) ? true : false);
     c5c:	40 91 a6 00 	lds	r20, 0x00A6
		Pipe_Freeze();
		Pipe_SelectPipe(MASS_STORE_DATA_IN_PIPE);
		Pipe_Unfreeze();

		/* Check if pipe stalled (command failed by device) */
		if (Pipe_IsStalled())
     c60:	41 ff       	sbrs	r20, 1
     c62:	0e c0       	rjmp	.+28     	; 0xc80 <MassStore_WaitForDataReceived+0x94>
			 *  \return Endpoint address the currently selected pipe is bound to.
			 */
			static inline uint8_t Pipe_GetBoundEndpointAddress(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetBoundEndpointAddress(void)
			{
				uint8_t UPCFG0X_Temp = UPCFG0X;
     c64:	90 91 aa 00 	lds	r25, 0x00AA
				
				return (((UPCFG0X_Temp >> PEPNUM0) & PIPE_EPNUM_MASK) | ((UPCFG0X_Temp & PEPNUM1) ? ENDPOINT_DIR_OUT : ENDPOINT_DIR_IN));
     c68:	29 2f       	mov	r18, r25
     c6a:	2f 70       	andi	r18, 0x0F	; 15
     c6c:	90 ff       	sbrs	r25, 0
     c6e:	02 c0       	rjmp	.+4      	; 0xc74 <MassStore_WaitForDataReceived+0x88>
     c70:	80 e0       	ldi	r24, 0x00	; 0
     c72:	01 c0       	rjmp	.+2      	; 0xc76 <MassStore_WaitForDataReceived+0x8a>
     c74:	80 e8       	ldi	r24, 0x80	; 128
		{
			/* Clear the stall condition on the IN pipe */
			USB_Host_ClearEndpointStall(Pipe_GetBoundEndpointAddress());
     c76:	82 2b       	or	r24, r18
     c78:	0e 94 3f 0f 	call	0x1e7e	; 0x1e7e <USB_Host_ClearEndpointStall>

			return PIPE_RWSTREAM_PipeStalled;
     c7c:	81 e0       	ldi	r24, 0x01	; 1
     c7e:	08 95       	ret
		}

		/* Check to see if the device was disconnected, if so exit function */
		if (USB_HostState == HOST_STATE_Unattached)
     c80:	40 91 3c 01 	lds	r20, 0x013C
     c84:	41 30       	cpi	r20, 0x01	; 1
     c86:	c1 f0       	breq	.+48     	; 0xcb8 <MassStore_WaitForDataReceived+0xcc>
			 *  \return Boolean \c true if the current pipe has received an IN packet, \c false otherwise.
			 */
			static inline bool Pipe_IsINReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsINReceived(void)
			{
				return ((UPINTX & (1 << RXINI)) ? true : false);
     c88:	40 91 a6 00 	lds	r20, 0x00A6
	/* Select the IN data pipe for data reception */
	Pipe_SelectPipe(MASS_STORE_DATA_IN_PIPE);
	Pipe_Unfreeze();

	/* Wait until data received in the IN pipe */
	while (!(Pipe_IsINReceived()))
     c8c:	40 ff       	sbrs	r20, 0
     c8e:	bf cf       	rjmp	.-130    	; 0xc0e <MassStore_WaitForDataReceived+0x22>
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
     c90:	81 e0       	ldi	r24, 0x01	; 1
     c92:	80 93 a7 00 	sts	0x00A7, r24

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
     c96:	80 91 a9 00 	lds	r24, 0x00A9
     c9a:	80 64       	ori	r24, 0x40	; 64
     c9c:	80 93 a9 00 	sts	0x00A9, r24
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
     ca0:	82 e0       	ldi	r24, 0x02	; 2
     ca2:	80 93 a7 00 	sts	0x00A7, r24

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
     ca6:	80 91 a9 00 	lds	r24, 0x00A9
     caa:	80 64       	ori	r24, 0x40	; 64
     cac:	80 93 a9 00 	sts	0x00A9, r24
	Pipe_Freeze();

	Pipe_SelectPipe(MASS_STORE_DATA_OUT_PIPE);
	Pipe_Freeze();

	return PIPE_RWSTREAM_NoError;
     cb0:	80 e0       	ldi	r24, 0x00	; 0
     cb2:	08 95       	ret
			PreviousFrameNumber = CurrentFrameNumber;
			TimeoutMSRem--;

			/* Check to see if the timeout period for the command has elapsed */
			if (!(TimeoutMSRem))
			  return PIPE_RWSTREAM_Timeout;
     cb4:	83 e0       	ldi	r24, 0x03	; 3
     cb6:	08 95       	ret
			return PIPE_RWSTREAM_PipeStalled;
		}

		/* Check to see if the device was disconnected, if so exit function */
		if (USB_HostState == HOST_STATE_Unattached)
		  return PIPE_RWSTREAM_DeviceDisconnected;
     cb8:	82 e0       	ldi	r24, 0x02	; 2

	Pipe_SelectPipe(MASS_STORE_DATA_OUT_PIPE);
	Pipe_Freeze();

	return PIPE_RWSTREAM_NoError;
}
     cba:	08 95       	ret

00000cbc <MassStore_SendCommand>:
 *
 *  \return A value from the Pipe_Stream_RW_ErrorCodes_t enum
 */
static uint8_t MassStore_SendCommand(MS_CommandBlockWrapper_t* const SCSICommandBlock,
                                     void* BufferPtr)
{
     cbc:	df 92       	push	r13
     cbe:	ef 92       	push	r14
     cc0:	ff 92       	push	r15
     cc2:	0f 93       	push	r16
     cc4:	1f 93       	push	r17
     cc6:	cf 93       	push	r28
     cc8:	df 93       	push	r29
     cca:	cd b7       	in	r28, 0x3d	; 61
     ccc:	de b7       	in	r29, 0x3e	; 62
     cce:	2f 97       	sbiw	r28, 0x0f	; 15
     cd0:	0f b6       	in	r0, 0x3f	; 63
     cd2:	f8 94       	cli
     cd4:	de bf       	out	0x3e, r29	; 62
     cd6:	0f be       	out	0x3f, r0	; 63
     cd8:	cd bf       	out	0x3d, r28	; 61
     cda:	8c 01       	movw	r16, r24
     cdc:	7b 01       	movw	r14, r22
	uint8_t ErrorCode = PIPE_RWSTREAM_NoError;

	/* Wrap Tag value when invalid - MS class defines tag values of 0 and 0xFFFFFFFF to be invalid */
	if (++MassStore_Tag == 0xFFFFFFFF)
     cde:	80 91 10 01 	lds	r24, 0x0110
     ce2:	90 91 11 01 	lds	r25, 0x0111
     ce6:	a0 91 12 01 	lds	r26, 0x0112
     cea:	b0 91 13 01 	lds	r27, 0x0113
     cee:	01 96       	adiw	r24, 0x01	; 1
     cf0:	a1 1d       	adc	r26, r1
     cf2:	b1 1d       	adc	r27, r1
     cf4:	80 93 10 01 	sts	0x0110, r24
     cf8:	90 93 11 01 	sts	0x0111, r25
     cfc:	a0 93 12 01 	sts	0x0112, r26
     d00:	b0 93 13 01 	sts	0x0113, r27
     d04:	8f 3f       	cpi	r24, 0xFF	; 255
     d06:	2f ef       	ldi	r18, 0xFF	; 255
     d08:	92 07       	cpc	r25, r18
     d0a:	2f ef       	ldi	r18, 0xFF	; 255
     d0c:	a2 07       	cpc	r26, r18
     d0e:	2f ef       	ldi	r18, 0xFF	; 255
     d10:	b2 07       	cpc	r27, r18
     d12:	61 f4       	brne	.+24     	; 0xd2c <MassStore_SendCommand+0x70>
	  MassStore_Tag = 1;
     d14:	81 e0       	ldi	r24, 0x01	; 1
     d16:	90 e0       	ldi	r25, 0x00	; 0
     d18:	a0 e0       	ldi	r26, 0x00	; 0
     d1a:	b0 e0       	ldi	r27, 0x00	; 0
     d1c:	80 93 10 01 	sts	0x0110, r24
     d20:	90 93 11 01 	sts	0x0111, r25
     d24:	a0 93 12 01 	sts	0x0112, r26
     d28:	b0 93 13 01 	sts	0x0113, r27

	/* Each transmission should have a unique tag value, increment before use */
	SCSICommandBlock->Tag = MassStore_Tag;
     d2c:	80 91 10 01 	lds	r24, 0x0110
     d30:	90 91 11 01 	lds	r25, 0x0111
     d34:	a0 91 12 01 	lds	r26, 0x0112
     d38:	b0 91 13 01 	lds	r27, 0x0113
     d3c:	f8 01       	movw	r30, r16
     d3e:	84 83       	std	Z+4, r24	; 0x04
     d40:	95 83       	std	Z+5, r25	; 0x05
     d42:	a6 83       	std	Z+6, r26	; 0x06
     d44:	b7 83       	std	Z+7, r27	; 0x07
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
     d46:	22 e0       	ldi	r18, 0x02	; 2
     d48:	d2 2e       	mov	r13, r18
     d4a:	d0 92 a7 00 	sts	0x00A7, r13

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
     d4e:	80 91 a9 00 	lds	r24, 0x00A9
     d52:	8f 7b       	andi	r24, 0xBF	; 191
     d54:	80 93 a9 00 	sts	0x00A9, r24
	/* Select the OUT data pipe for CBW transmission */
	Pipe_SelectPipe(MASS_STORE_DATA_OUT_PIPE);
	Pipe_Unfreeze();

	/* Write the CBW command to the OUT pipe */
	if ((ErrorCode = Pipe_Write_Stream_LE(SCSICommandBlock, sizeof(MS_CommandBlockWrapper_t), NULL)) !=
     d58:	c8 01       	movw	r24, r16
     d5a:	6f e1       	ldi	r22, 0x1F	; 31
     d5c:	70 e0       	ldi	r23, 0x00	; 0
     d5e:	40 e0       	ldi	r20, 0x00	; 0
     d60:	50 e0       	ldi	r21, 0x00	; 0
     d62:	31 d4       	rcall	.+2146   	; 0x15c6 <Pipe_Write_Stream_LE>
     d64:	88 23       	and	r24, r24
     d66:	09 f0       	breq	.+2      	; 0xd6a <MassStore_SendCommand+0xae>
     d68:	55 c0       	rjmp	.+170    	; 0xe14 <MassStore_SendCommand+0x158>
     d6a:	80 91 a6 00 	lds	r24, 0x00A6
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearOUT(void)
			{
				UPINTX &= ~((1 << TXOUTI) | (1 << FIFOCON));
     d6e:	8b 77       	andi	r24, 0x7B	; 123
     d70:	80 93 a6 00 	sts	0x00A6, r24
     d74:	4f d5       	rcall	.+2718   	; 0x1814 <Pipe_WaitUntilReady>

	/* Send the data in the OUT pipe to the attached device */
	Pipe_ClearOUT();

	/* Wait until command has been sent */
	Pipe_WaitUntilReady();
     d76:	80 91 a9 00 	lds	r24, 0x00A9

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
     d7a:	80 64       	ori	r24, 0x40	; 64
     d7c:	80 93 a9 00 	sts	0x00A9, r24
     d80:	e1 14       	cp	r14, r1
     d82:	f1 04       	cpc	r15, r1

	/* Freeze pipe after use */
	Pipe_Freeze();

	if (BufferPtr != NULL)
     d84:	09 f4       	brne	.+2      	; 0xd88 <MassStore_SendCommand+0xcc>
     d86:	4c c0       	rjmp	.+152    	; 0xe20 <MassStore_SendCommand+0x164>
     d88:	f8 01       	movw	r30, r16
     d8a:	60 85       	ldd	r22, Z+8	; 0x08
 */
static uint8_t MassStore_SendReceiveData(MS_CommandBlockWrapper_t* const SCSICommandBlock,
                                         void* BufferPtr)
{
	uint8_t  ErrorCode = PIPE_RWSTREAM_NoError;
	uint16_t BytesRem  = SCSICommandBlock->DataTransferLength;
     d8c:	71 85       	ldd	r23, Z+9	; 0x09
     d8e:	84 85       	ldd	r24, Z+12	; 0x0c
     d90:	87 ff       	sbrs	r24, 7

	/* Check the direction of the SCSI command data stage */
	if (SCSICommandBlock->Flags & MS_COMMAND_DIR_DATA_IN)
     d92:	1b c0       	rjmp	.+54     	; 0xdca <MassStore_SendCommand+0x10e>
     d94:	6e 87       	std	Y+14, r22	; 0x0e
     d96:	7f 87       	std	Y+15, r23	; 0x0f
	{
		/* Wait until the device has replied with some data */
		if ((ErrorCode = MassStore_WaitForDataReceived()) != PIPE_RWSTREAM_NoError)
     d98:	29 df       	rcall	.-430    	; 0xbec <MassStore_WaitForDataReceived>
     d9a:	6e 85       	ldd	r22, Y+14	; 0x0e
     d9c:	7f 85       	ldd	r23, Y+15	; 0x0f
     d9e:	88 23       	and	r24, r24
     da0:	a9 f5       	brne	.+106    	; 0xe0c <MassStore_SendCommand+0x150>
     da2:	81 e0       	ldi	r24, 0x01	; 1
     da4:	80 93 a7 00 	sts	0x00A7, r24
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
     da8:	80 91 a9 00 	lds	r24, 0x00A9
     dac:	8f 7b       	andi	r24, 0xBF	; 191

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
     dae:	80 93 a9 00 	sts	0x00A9, r24
     db2:	c7 01       	movw	r24, r14
     db4:	40 e0       	ldi	r20, 0x00	; 0
     db6:	50 e0       	ldi	r21, 0x00	; 0
		/* Select the IN data pipe for data reception */
		Pipe_SelectPipe(MASS_STORE_DATA_IN_PIPE);
		Pipe_Unfreeze();

		/* Read in the block data from the pipe */
		if ((ErrorCode = Pipe_Read_Stream_LE(BufferPtr, BytesRem, NULL)) != PIPE_RWSTREAM_NoError)
     db8:	5d d4       	rcall	.+2234   	; 0x1674 <Pipe_Read_Stream_LE>
     dba:	88 23       	and	r24, r24
     dbc:	39 f5       	brne	.+78     	; 0xe0c <MassStore_SendCommand+0x150>
     dbe:	80 91 a6 00 	lds	r24, 0x00A6
     dc2:	8e 77       	andi	r24, 0x7E	; 126
     dc4:	80 93 a6 00 	sts	0x00A6, r24
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
     dc8:	1b c0       	rjmp	.+54     	; 0xe00 <MassStore_SendCommand+0x144>
     dca:	d0 92 a7 00 	sts	0x00A7, r13
     dce:	80 91 a9 00 	lds	r24, 0x00A9
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
     dd2:	8f 7b       	andi	r24, 0xBF	; 191
     dd4:	80 93 a9 00 	sts	0x00A9, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
     dd8:	c7 01       	movw	r24, r14
     dda:	40 e0       	ldi	r20, 0x00	; 0
     ddc:	50 e0       	ldi	r21, 0x00	; 0
     dde:	f3 d3       	rcall	.+2022   	; 0x15c6 <Pipe_Write_Stream_LE>
		/* Select the OUT data pipe for data transmission */
		Pipe_SelectPipe(MASS_STORE_DATA_OUT_PIPE);
		Pipe_Unfreeze();

		/* Write the block data to the pipe */
		if ((ErrorCode = Pipe_Write_Stream_LE(BufferPtr, BytesRem, NULL)) != PIPE_RWSTREAM_NoError)
     de0:	88 23       	and	r24, r24
     de2:	a1 f4       	brne	.+40     	; 0xe0c <MassStore_SendCommand+0x150>
     de4:	80 91 a6 00 	lds	r24, 0x00A6
     de8:	8b 77       	andi	r24, 0x7B	; 123
     dea:	80 93 a6 00 	sts	0x00A6, r24
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearOUT(void)
			{
				UPINTX &= ~((1 << TXOUTI) | (1 << FIFOCON));
     dee:	04 c0       	rjmp	.+8      	; 0xdf8 <MassStore_SendCommand+0x13c>
     df0:	80 91 3c 01 	lds	r24, 0x013C
     df4:	81 30       	cpi	r24, 0x01	; 1
     df6:	69 f0       	breq	.+26     	; 0xe12 <MassStore_SendCommand+0x156>
     df8:	80 91 a6 00 	lds	r24, 0x00A6
		/* Acknowledge the packet */
		Pipe_ClearOUT();

		while (!(Pipe_IsOUTReady()))
		{
			if (USB_HostState == HOST_STATE_Unattached)
     dfc:	82 ff       	sbrs	r24, 2
     dfe:	f8 cf       	rjmp	.-16     	; 0xdf0 <MassStore_SendCommand+0x134>
     e00:	80 91 a9 00 	lds	r24, 0x00A9
			 *  \return Boolean \c true if the current pipe is ready for an OUT packet, \c false otherwise.
			 */
			static inline bool Pipe_IsOUTReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsOUTReady(void)
			{
				return ((UPINTX & (1 << TXOUTI)) ? true : false);
     e04:	80 64       	ori	r24, 0x40	; 64
		  return ErrorCode;

		/* Acknowledge the packet */
		Pipe_ClearOUT();

		while (!(Pipe_IsOUTReady()))
     e06:	80 93 a9 00 	sts	0x00A9, r24

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
     e0a:	0a c0       	rjmp	.+20     	; 0xe20 <MassStore_SendCommand+0x164>
     e0c:	82 30       	cpi	r24, 0x02	; 2
     e0e:	10 f4       	brcc	.+4      	; 0xe14 <MassStore_SendCommand+0x158>
     e10:	07 c0       	rjmp	.+14     	; 0xe20 <MassStore_SendCommand+0x164>
     e12:	82 e0       	ldi	r24, 0x02	; 2
     e14:	90 91 a9 00 	lds	r25, 0x00A9
	{
		/* Transfer the requested data (if any) to or from the device */
		ErrorCode = MassStore_SendReceiveData(SCSICommandBlock, (void*)BufferPtr);

		/* Only fail completely if the transfer fails without a STALL, as a logical STALL can be recovered from */
		if ((ErrorCode != PIPE_RWSTREAM_NoError) && (ErrorCode != PIPE_RWSTREAM_PipeStalled))
     e18:	90 64       	ori	r25, 0x40	; 64
     e1a:	90 93 a9 00 	sts	0x00A9, r25
     e1e:	21 c0       	rjmp	.+66     	; 0xe62 <MassStore_SendCommand+0x1a6>
     e20:	e5 de       	rcall	.-566    	; 0xbec <MassStore_WaitForDataReceived>
     e22:	88 23       	and	r24, r24
     e24:	f1 f4       	brne	.+60     	; 0xe62 <MassStore_SendCommand+0x1a6>
     e26:	81 e0       	ldi	r24, 0x01	; 1
		{
			Pipe_Freeze();
			return ErrorCode;
     e28:	80 93 a7 00 	sts	0x00A7, r24
static uint8_t MassStore_GetReturnedStatus(MS_CommandStatusWrapper_t* const SCSICommandStatus)
{
	uint8_t ErrorCode = PIPE_RWSTREAM_NoError;

	/* If an error in the command occurred, abort */
	if ((ErrorCode = MassStore_WaitForDataReceived()) != PIPE_RWSTREAM_NoError)
     e2c:	80 91 a9 00 	lds	r24, 0x00A9
     e30:	8f 7b       	andi	r24, 0xBF	; 191
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
     e32:	80 93 a9 00 	sts	0x00A9, r24
     e36:	ce 01       	movw	r24, r28

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
     e38:	01 96       	adiw	r24, 0x01	; 1
     e3a:	6d e0       	ldi	r22, 0x0D	; 13
     e3c:	70 e0       	ldi	r23, 0x00	; 0
     e3e:	40 e0       	ldi	r20, 0x00	; 0
     e40:	50 e0       	ldi	r21, 0x00	; 0
	/* Select the IN data pipe for data reception */
	Pipe_SelectPipe(MASS_STORE_DATA_IN_PIPE);
	Pipe_Unfreeze();

	/* Load in the CSW from the attached device */
	if ((ErrorCode = Pipe_Read_Stream_LE(SCSICommandStatus, sizeof(MS_CommandStatusWrapper_t), NULL)) !=
     e42:	18 d4       	rcall	.+2096   	; 0x1674 <Pipe_Read_Stream_LE>
     e44:	88 23       	and	r24, r24
     e46:	69 f4       	brne	.+26     	; 0xe62 <MassStore_SendCommand+0x1a6>
     e48:	90 91 a6 00 	lds	r25, 0x00A6
     e4c:	9e 77       	andi	r25, 0x7E	; 126
     e4e:	90 93 a6 00 	sts	0x00A6, r25
     e52:	90 91 a9 00 	lds	r25, 0x00A9
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
     e56:	90 64       	ori	r25, 0x40	; 64
     e58:	90 93 a9 00 	sts	0x00A9, r25
     e5c:	9d 85       	ldd	r25, Y+13	; 0x0d
     e5e:	91 11       	cpse	r25, r1

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
     e60:	80 ec       	ldi	r24, 0xC0	; 192
     e62:	2f 96       	adiw	r28, 0x0f	; 15
     e64:	0f b6       	in	r0, 0x3f	; 63
     e66:	f8 94       	cli
     e68:	de bf       	out	0x3e, r29	; 62

	/* Freeze the IN pipe after use */
	Pipe_Freeze();

	/* Check to see if command failed */
	if (SCSICommandStatus->Status != MS_SCSI_COMMAND_Pass)
     e6a:	0f be       	out	0x3f, r0	; 63
     e6c:	cd bf       	out	0x3d, r28	; 61
	  ErrorCode = MASS_STORE_SCSI_COMMAND_FAILED;
     e6e:	df 91       	pop	r29
	}

	/* Retrieve the returned SCSI status from the device */
	MS_CommandStatusWrapper_t SCSIStatusBlock;
	return MassStore_GetReturnedStatus(&SCSIStatusBlock);
}
     e70:	cf 91       	pop	r28
     e72:	1f 91       	pop	r17
     e74:	0f 91       	pop	r16
     e76:	ff 90       	pop	r15
     e78:	ef 90       	pop	r14
     e7a:	df 90       	pop	r13
     e7c:	08 95       	ret

00000e7e <SwapEndian_32>:
     e7e:	9b 01       	movw	r18, r22
     e80:	69 2f       	mov	r22, r25
     e82:	78 2f       	mov	r23, r24
     e84:	83 2f       	mov	r24, r19
     e86:	92 2f       	mov	r25, r18
     e88:	08 95       	ret

00000e8a <MassStore_MassStorageReset>:
     e8a:	a4 e3       	ldi	r26, 0x34	; 52
 */
uint8_t MassStore_MassStorageReset(void)
{
	uint8_t ErrorCode;

	USB_ControlRequest = (USB_Request_Header_t)
     e8c:	b1 e0       	ldi	r27, 0x01	; 1
     e8e:	e0 e0       	ldi	r30, 0x00	; 0
     e90:	f1 e0       	ldi	r31, 0x01	; 1
     e92:	88 e0       	ldi	r24, 0x08	; 8
     e94:	01 90       	ld	r0, Z+
     e96:	0d 92       	st	X+, r0
     e98:	81 50       	subi	r24, 0x01	; 1
     e9a:	e1 f7       	brne	.-8      	; 0xe94 <MassStore_MassStorageReset+0xa>
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
     e9c:	10 92 a7 00 	sts	0x00A7, r1
		};

	/* Select the control pipe for the request transfer */
	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	if ((ErrorCode = USB_Host_SendControlRequest(NULL)) != HOST_SENDCONTROL_Successful)
     ea0:	80 e0       	ldi	r24, 0x00	; 0
     ea2:	90 e0       	ldi	r25, 0x00	; 0
     ea4:	c9 d6       	rcall	.+3474   	; 0x1c38 <USB_Host_SendControlRequest>
     ea6:	88 23       	and	r24, r24
     ea8:	f1 f4       	brne	.+60     	; 0xee6 <MassStore_MassStorageReset+0x5c>
     eaa:	81 e0       	ldi	r24, 0x01	; 1
     eac:	80 93 a7 00 	sts	0x00A7, r24
     eb0:	90 91 aa 00 	lds	r25, 0x00AA
			 *  \return Endpoint address the currently selected pipe is bound to.
			 */
			static inline uint8_t Pipe_GetBoundEndpointAddress(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetBoundEndpointAddress(void)
			{
				uint8_t UPCFG0X_Temp = UPCFG0X;
     eb4:	29 2f       	mov	r18, r25
				
				return (((UPCFG0X_Temp >> PEPNUM0) & PIPE_EPNUM_MASK) | ((UPCFG0X_Temp & PEPNUM1) ? ENDPOINT_DIR_OUT : ENDPOINT_DIR_IN));
     eb6:	2f 70       	andi	r18, 0x0F	; 15
     eb8:	90 ff       	sbrs	r25, 0
     eba:	02 c0       	rjmp	.+4      	; 0xec0 <MassStore_MassStorageReset+0x36>
     ebc:	80 e0       	ldi	r24, 0x00	; 0
     ebe:	01 c0       	rjmp	.+2      	; 0xec2 <MassStore_MassStorageReset+0x38>
     ec0:	80 e8       	ldi	r24, 0x80	; 128
     ec2:	82 2b       	or	r24, r18
	  return ErrorCode;

	/* Select first data pipe to clear STALL condition if one exists */
	Pipe_SelectPipe(MASS_STORE_DATA_IN_PIPE);

	if ((ErrorCode = USB_Host_ClearEndpointStall(Pipe_GetBoundEndpointAddress())) != HOST_SENDCONTROL_Successful)
     ec4:	dc d7       	rcall	.+4024   	; 0x1e7e <USB_Host_ClearEndpointStall>
     ec6:	88 23       	and	r24, r24
     ec8:	71 f4       	brne	.+28     	; 0xee6 <MassStore_MassStorageReset+0x5c>
     eca:	82 e0       	ldi	r24, 0x02	; 2
     ecc:	80 93 a7 00 	sts	0x00A7, r24
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
     ed0:	90 91 aa 00 	lds	r25, 0x00AA
			 *  \return Endpoint address the currently selected pipe is bound to.
			 */
			static inline uint8_t Pipe_GetBoundEndpointAddress(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetBoundEndpointAddress(void)
			{
				uint8_t UPCFG0X_Temp = UPCFG0X;
     ed4:	29 2f       	mov	r18, r25
     ed6:	2f 70       	andi	r18, 0x0F	; 15
				
				return (((UPCFG0X_Temp >> PEPNUM0) & PIPE_EPNUM_MASK) | ((UPCFG0X_Temp & PEPNUM1) ? ENDPOINT_DIR_OUT : ENDPOINT_DIR_IN));
     ed8:	90 ff       	sbrs	r25, 0
     eda:	02 c0       	rjmp	.+4      	; 0xee0 <MassStore_MassStorageReset+0x56>
     edc:	80 e0       	ldi	r24, 0x00	; 0
     ede:	01 c0       	rjmp	.+2      	; 0xee2 <MassStore_MassStorageReset+0x58>
     ee0:	80 e8       	ldi	r24, 0x80	; 128
     ee2:	82 2b       	or	r24, r18
     ee4:	cc c7       	rjmp	.+3992   	; 0x1e7e <USB_Host_ClearEndpointStall>
	  return ErrorCode;

	/* Select second data pipe to clear STALL condition if one exists */
	Pipe_SelectPipe(MASS_STORE_DATA_OUT_PIPE);

	if ((ErrorCode = USB_Host_ClearEndpointStall(Pipe_GetBoundEndpointAddress())) != HOST_SENDCONTROL_Successful)
     ee6:	08 95       	ret

00000ee8 <MassStore_GetMaxLUN>:
     ee8:	cf 93       	push	r28
     eea:	df 93       	push	r29
	  return ErrorCode;

	return HOST_SENDCONTROL_Successful;
}
     eec:	ec 01       	movw	r28, r24
 */
uint8_t MassStore_GetMaxLUN(uint8_t* const MaxLUNIndex)
{
	uint8_t ErrorCode;

	USB_ControlRequest = (USB_Request_Header_t)
     eee:	a4 e3       	ldi	r26, 0x34	; 52
     ef0:	b1 e0       	ldi	r27, 0x01	; 1
     ef2:	e8 e0       	ldi	r30, 0x08	; 8
     ef4:	f1 e0       	ldi	r31, 0x01	; 1
     ef6:	88 e0       	ldi	r24, 0x08	; 8
     ef8:	01 90       	ld	r0, Z+
     efa:	0d 92       	st	X+, r0
     efc:	81 50       	subi	r24, 0x01	; 1
     efe:	e1 f7       	brne	.-8      	; 0xef8 <MassStore_GetMaxLUN+0x10>
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
     f00:	10 92 a7 00 	sts	0x00A7, r1
		};

	/* Select the control pipe for the request transfer */
	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	if ((ErrorCode = USB_Host_SendControlRequest(MaxLUNIndex)) == HOST_SENDCONTROL_SetupStalled)
     f04:	ce 01       	movw	r24, r28
     f06:	98 d6       	rcall	.+3376   	; 0x1c38 <USB_Host_SendControlRequest>
     f08:	83 30       	cpi	r24, 0x03	; 3
     f0a:	39 f4       	brne	.+14     	; 0xf1a <MassStore_GetMaxLUN+0x32>
     f0c:	80 91 a6 00 	lds	r24, 0x00A6
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearStall(void)
			{
				UPINTX &= ~(1 << RXSTALLI);
     f10:	8d 7f       	andi	r24, 0xFD	; 253
     f12:	80 93 a6 00 	sts	0x00A6, r24
     f16:	18 82       	st	Y, r1
	{
		/* Clear the pipe stall */
		Pipe_ClearStall();

		/* Some faulty Mass Storage devices don't implement the GET_MAX_LUN request, so assume a single LUN */
		*MaxLUNIndex = 0;
     f18:	80 e0       	ldi	r24, 0x00	; 0

		/* Clear the error, and pretend the request executed correctly if the device STALLed it */
		ErrorCode = HOST_SENDCONTROL_Successful;
     f1a:	df 91       	pop	r29
	}

	return ErrorCode;
}
     f1c:	cf 91       	pop	r28
     f1e:	08 95       	ret

00000f20 <MassStore_Inquiry>:
     f20:	cf 93       	push	r28
 *
 *  \return A value from the Pipe_Stream_RW_ErrorCodes_t enum, or MASS_STORE_SCSI_COMMAND_FAILED if the SCSI command fails
 */
uint8_t MassStore_Inquiry(const uint8_t LUNIndex,
                          SCSI_Inquiry_Response_t* const InquiryPtr)
{
     f22:	df 93       	push	r29
     f24:	cd b7       	in	r28, 0x3d	; 61
     f26:	de b7       	in	r29, 0x3e	; 62
     f28:	6f 97       	sbiw	r28, 0x1f	; 31
     f2a:	0f b6       	in	r0, 0x3f	; 63
     f2c:	f8 94       	cli
     f2e:	de bf       	out	0x3e, r29	; 62
     f30:	0f be       	out	0x3f, r0	; 63
     f32:	cd bf       	out	0x3d, r28	; 61
     f34:	9b 01       	movw	r18, r22
	/* Create a CBW with a SCSI command to issue INQUIRY command */
	MS_CommandBlockWrapper_t SCSICommandBlock = (MS_CommandBlockWrapper_t)
     f36:	fe 01       	movw	r30, r28
     f38:	31 96       	adiw	r30, 0x01	; 1
     f3a:	9f e1       	ldi	r25, 0x1F	; 31
     f3c:	df 01       	movw	r26, r30
     f3e:	1d 92       	st	X+, r1
     f40:	9a 95       	dec	r25
     f42:	e9 f7       	brne	.-6      	; 0xf3e <MassStore_Inquiry+0x1e>
     f44:	45 e5       	ldi	r20, 0x55	; 85
     f46:	53 e5       	ldi	r21, 0x53	; 83
     f48:	62 e4       	ldi	r22, 0x42	; 66
     f4a:	73 e4       	ldi	r23, 0x43	; 67
     f4c:	49 83       	std	Y+1, r20	; 0x01
     f4e:	5a 83       	std	Y+2, r21	; 0x02
     f50:	6b 83       	std	Y+3, r22	; 0x03
     f52:	7c 83       	std	Y+4, r23	; 0x04
     f54:	44 e2       	ldi	r20, 0x24	; 36
     f56:	50 e0       	ldi	r21, 0x00	; 0
     f58:	60 e0       	ldi	r22, 0x00	; 0
     f5a:	70 e0       	ldi	r23, 0x00	; 0
     f5c:	49 87       	std	Y+9, r20	; 0x09
     f5e:	5a 87       	std	Y+10, r21	; 0x0a
     f60:	6b 87       	std	Y+11, r22	; 0x0b
     f62:	7c 87       	std	Y+12, r23	; 0x0c
     f64:	90 e8       	ldi	r25, 0x80	; 128
     f66:	9d 87       	std	Y+13, r25	; 0x0d
     f68:	8e 87       	std	Y+14, r24	; 0x0e
     f6a:	86 e0       	ldi	r24, 0x06	; 6
     f6c:	8f 87       	std	Y+15, r24	; 0x0f
     f6e:	82 e1       	ldi	r24, 0x12	; 18
     f70:	88 8b       	std	Y+16, r24	; 0x10
     f72:	84 e2       	ldi	r24, 0x24	; 36
     f74:	8c 8b       	std	Y+20, r24	; 0x14
					0x00                    // Unused (control)
				}
		};

	/* Send the command and any data to the attached device */
	return MassStore_SendCommand(&SCSICommandBlock, InquiryPtr);
     f76:	cf 01       	movw	r24, r30
     f78:	b9 01       	movw	r22, r18
     f7a:	a0 de       	rcall	.-704    	; 0xcbc <MassStore_SendCommand>
     f7c:	6f 96       	adiw	r28, 0x1f	; 31
}
     f7e:	0f b6       	in	r0, 0x3f	; 63
     f80:	f8 94       	cli
     f82:	de bf       	out	0x3e, r29	; 62
     f84:	0f be       	out	0x3f, r0	; 63
     f86:	cd bf       	out	0x3d, r28	; 61
     f88:	df 91       	pop	r29
     f8a:	cf 91       	pop	r28
     f8c:	08 95       	ret

00000f8e <MassStore_RequestSense>:
     f8e:	cf 93       	push	r28
 *
 *  \return A value from the Pipe_Stream_RW_ErrorCodes_t enum, or MASS_STORE_SCSI_COMMAND_FAILED if the SCSI command fails
 */
uint8_t MassStore_RequestSense(const uint8_t LUNIndex,
                               SCSI_Request_Sense_Response_t* const SensePtr)
{
     f90:	df 93       	push	r29
     f92:	cd b7       	in	r28, 0x3d	; 61
     f94:	de b7       	in	r29, 0x3e	; 62
     f96:	6f 97       	sbiw	r28, 0x1f	; 31
     f98:	0f b6       	in	r0, 0x3f	; 63
     f9a:	f8 94       	cli
     f9c:	de bf       	out	0x3e, r29	; 62
     f9e:	0f be       	out	0x3f, r0	; 63
     fa0:	cd bf       	out	0x3d, r28	; 61
     fa2:	9b 01       	movw	r18, r22
	/* Create a CBW with a SCSI command to issue REQUEST SENSE command */
	MS_CommandBlockWrapper_t SCSICommandBlock = (MS_CommandBlockWrapper_t)
     fa4:	fe 01       	movw	r30, r28
     fa6:	31 96       	adiw	r30, 0x01	; 1
     fa8:	9f e1       	ldi	r25, 0x1F	; 31
     faa:	df 01       	movw	r26, r30
     fac:	1d 92       	st	X+, r1
     fae:	9a 95       	dec	r25
     fb0:	e9 f7       	brne	.-6      	; 0xfac <MassStore_RequestSense+0x1e>
     fb2:	45 e5       	ldi	r20, 0x55	; 85
     fb4:	53 e5       	ldi	r21, 0x53	; 83
     fb6:	62 e4       	ldi	r22, 0x42	; 66
     fb8:	73 e4       	ldi	r23, 0x43	; 67
     fba:	49 83       	std	Y+1, r20	; 0x01
     fbc:	5a 83       	std	Y+2, r21	; 0x02
     fbe:	6b 83       	std	Y+3, r22	; 0x03
     fc0:	7c 83       	std	Y+4, r23	; 0x04
     fc2:	42 e1       	ldi	r20, 0x12	; 18
     fc4:	50 e0       	ldi	r21, 0x00	; 0
     fc6:	60 e0       	ldi	r22, 0x00	; 0
     fc8:	70 e0       	ldi	r23, 0x00	; 0
     fca:	49 87       	std	Y+9, r20	; 0x09
     fcc:	5a 87       	std	Y+10, r21	; 0x0a
     fce:	6b 87       	std	Y+11, r22	; 0x0b
     fd0:	7c 87       	std	Y+12, r23	; 0x0c
     fd2:	90 e8       	ldi	r25, 0x80	; 128
     fd4:	9d 87       	std	Y+13, r25	; 0x0d
     fd6:	8e 87       	std	Y+14, r24	; 0x0e
     fd8:	86 e0       	ldi	r24, 0x06	; 6
     fda:	8f 87       	std	Y+15, r24	; 0x0f
     fdc:	83 e0       	ldi	r24, 0x03	; 3
     fde:	88 8b       	std	Y+16, r24	; 0x10
     fe0:	82 e1       	ldi	r24, 0x12	; 18
     fe2:	8c 8b       	std	Y+20, r24	; 0x14
					0x00                    // Unused (control)
				}
		};

	/* Send the command and any data to the attached device */
	return MassStore_SendCommand(&SCSICommandBlock, SensePtr);
     fe4:	cf 01       	movw	r24, r30
     fe6:	b9 01       	movw	r22, r18
     fe8:	69 de       	rcall	.-814    	; 0xcbc <MassStore_SendCommand>
     fea:	6f 96       	adiw	r28, 0x1f	; 31
}
     fec:	0f b6       	in	r0, 0x3f	; 63
     fee:	f8 94       	cli
     ff0:	de bf       	out	0x3e, r29	; 62
     ff2:	0f be       	out	0x3f, r0	; 63
     ff4:	cd bf       	out	0x3d, r28	; 61
     ff6:	df 91       	pop	r29
     ff8:	cf 91       	pop	r28
     ffa:	08 95       	ret

00000ffc <MassStore_ReadDeviceBlock>:
     ffc:	6f 92       	push	r6
uint8_t MassStore_ReadDeviceBlock(const uint8_t LUNIndex,
                                  const uint32_t BlockAddress,
                                  const uint8_t Blocks,
                                  const uint16_t BlockSize,
                                  void* BufferPtr)
{
     ffe:	7f 92       	push	r7
    1000:	8f 92       	push	r8
    1002:	9f 92       	push	r9
    1004:	af 92       	push	r10
    1006:	bf 92       	push	r11
    1008:	cf 92       	push	r12
    100a:	df 92       	push	r13
    100c:	ef 92       	push	r14
    100e:	ff 92       	push	r15
    1010:	0f 93       	push	r16
    1012:	1f 93       	push	r17
    1014:	cf 93       	push	r28
    1016:	df 93       	push	r29
    1018:	cd b7       	in	r28, 0x3d	; 61
    101a:	de b7       	in	r29, 0x3e	; 62
    101c:	6f 97       	sbiw	r28, 0x1f	; 31
    101e:	0f b6       	in	r0, 0x3f	; 63
    1020:	f8 94       	cli
    1022:	de bf       	out	0x3e, r29	; 62
    1024:	0f be       	out	0x3f, r0	; 63
    1026:	cd bf       	out	0x3d, r28	; 61
    1028:	c8 2e       	mov	r12, r24
    102a:	4a 01       	movw	r8, r20
    102c:	5b 01       	movw	r10, r22
    102e:	d2 2e       	mov	r13, r18
    1030:	37 01       	movw	r6, r14
	/* Create a CBW with a SCSI command to read in the given blocks from the device */
	MS_CommandBlockWrapper_t SCSICommandBlock = (MS_CommandBlockWrapper_t)
    1032:	7e 01       	movw	r14, r28
    1034:	08 94       	sec
    1036:	e1 1c       	adc	r14, r1
    1038:	f1 1c       	adc	r15, r1
    103a:	8f e1       	ldi	r24, 0x1F	; 31
    103c:	f7 01       	movw	r30, r14
    103e:	11 92       	st	Z+, r1
    1040:	8a 95       	dec	r24
    1042:	e9 f7       	brne	.-6      	; 0x103e <MassStore_ReadDeviceBlock+0x42>
    1044:	85 e5       	ldi	r24, 0x55	; 85
    1046:	93 e5       	ldi	r25, 0x53	; 83
    1048:	a2 e4       	ldi	r26, 0x42	; 66
    104a:	b3 e4       	ldi	r27, 0x43	; 67
    104c:	89 83       	std	Y+1, r24	; 0x01
    104e:	9a 83       	std	Y+2, r25	; 0x02
    1050:	ab 83       	std	Y+3, r26	; 0x03
    1052:	bc 83       	std	Y+4, r27	; 0x04
		{
			.Signature          = MS_CBW_SIGNATURE,
			.DataTransferLength = ((uint32_t)Blocks * BlockSize),
    1054:	b8 01       	movw	r22, r16
    1056:	80 e0       	ldi	r24, 0x00	; 0
    1058:	90 e0       	ldi	r25, 0x00	; 0
    105a:	30 e0       	ldi	r19, 0x00	; 0
    105c:	40 e0       	ldi	r20, 0x00	; 0
    105e:	50 e0       	ldi	r21, 0x00	; 0
    1060:	6a d7       	rcall	.+3796   	; 0x1f36 <__mulsi3>
    1062:	dc 01       	movw	r26, r24
    1064:	cb 01       	movw	r24, r22
    1066:	89 87       	std	Y+9, r24	; 0x09
                                  const uint8_t Blocks,
                                  const uint16_t BlockSize,
                                  void* BufferPtr)
{
	/* Create a CBW with a SCSI command to read in the given blocks from the device */
	MS_CommandBlockWrapper_t SCSICommandBlock = (MS_CommandBlockWrapper_t)
    1068:	9a 87       	std	Y+10, r25	; 0x0a
    106a:	ab 87       	std	Y+11, r26	; 0x0b
    106c:	bc 87       	std	Y+12, r27	; 0x0c
    106e:	80 e8       	ldi	r24, 0x80	; 128
    1070:	8d 87       	std	Y+13, r24	; 0x0d
    1072:	ce 86       	std	Y+14, r12	; 0x0e
    1074:	8a e0       	ldi	r24, 0x0A	; 10
    1076:	8f 87       	std	Y+15, r24	; 0x0f
    1078:	88 e2       	ldi	r24, 0x28	; 40
    107a:	88 8b       	std	Y+16, r24	; 0x10
    107c:	ba 8a       	std	Y+18, r11	; 0x12
    107e:	ab 8a       	std	Y+19, r10	; 0x13
    1080:	9c 8a       	std	Y+20, r9	; 0x14
    1082:	8d 8a       	std	Y+21, r8	; 0x15
    1084:	d8 8e       	std	Y+24, r13	; 0x18
    1086:	c7 01       	movw	r24, r14
					0x00                    // Unused (control)
				}
		};

	/* Send the command and any data to the attached device */
	return MassStore_SendCommand(&SCSICommandBlock, BufferPtr);
    1088:	b3 01       	movw	r22, r6
    108a:	18 de       	rcall	.-976    	; 0xcbc <MassStore_SendCommand>
    108c:	6f 96       	adiw	r28, 0x1f	; 31
    108e:	0f b6       	in	r0, 0x3f	; 63
}
    1090:	f8 94       	cli
    1092:	de bf       	out	0x3e, r29	; 62
    1094:	0f be       	out	0x3f, r0	; 63
    1096:	cd bf       	out	0x3d, r28	; 61
    1098:	df 91       	pop	r29
    109a:	cf 91       	pop	r28
    109c:	1f 91       	pop	r17
    109e:	0f 91       	pop	r16
    10a0:	ff 90       	pop	r15
    10a2:	ef 90       	pop	r14
    10a4:	df 90       	pop	r13
    10a6:	cf 90       	pop	r12
    10a8:	bf 90       	pop	r11
    10aa:	af 90       	pop	r10
    10ac:	9f 90       	pop	r9
    10ae:	8f 90       	pop	r8
    10b0:	7f 90       	pop	r7
    10b2:	6f 90       	pop	r6
    10b4:	08 95       	ret

000010b6 <MassStore_TestUnitReady>:
    10b6:	cf 93       	push	r28
    10b8:	df 93       	push	r29
 *  \param[in] LUNIndex      Index of the LUN inside the device the command is being addressed to
 *
 *  \return A value from the Pipe_Stream_RW_ErrorCodes_t enum, or MASS_STORE_SCSI_COMMAND_FAILED if the SCSI command fails
 */
uint8_t MassStore_TestUnitReady(const uint8_t LUNIndex)
{
    10ba:	cd b7       	in	r28, 0x3d	; 61
    10bc:	de b7       	in	r29, 0x3e	; 62
    10be:	6f 97       	sbiw	r28, 0x1f	; 31
    10c0:	0f b6       	in	r0, 0x3f	; 63
    10c2:	f8 94       	cli
    10c4:	de bf       	out	0x3e, r29	; 62
    10c6:	0f be       	out	0x3f, r0	; 63
    10c8:	cd bf       	out	0x3d, r28	; 61
	/* Create a CBW with a SCSI command to issue TEST UNIT READY command */
	MS_CommandBlockWrapper_t SCSICommandBlock = (MS_CommandBlockWrapper_t)
    10ca:	fe 01       	movw	r30, r28
    10cc:	31 96       	adiw	r30, 0x01	; 1
    10ce:	9f e1       	ldi	r25, 0x1F	; 31
    10d0:	df 01       	movw	r26, r30
    10d2:	1d 92       	st	X+, r1
    10d4:	9a 95       	dec	r25
    10d6:	e9 f7       	brne	.-6      	; 0x10d2 <MassStore_TestUnitReady+0x1c>
    10d8:	45 e5       	ldi	r20, 0x55	; 85
    10da:	53 e5       	ldi	r21, 0x53	; 83
    10dc:	62 e4       	ldi	r22, 0x42	; 66
    10de:	73 e4       	ldi	r23, 0x43	; 67
    10e0:	49 83       	std	Y+1, r20	; 0x01
    10e2:	5a 83       	std	Y+2, r21	; 0x02
    10e4:	6b 83       	std	Y+3, r22	; 0x03
    10e6:	7c 83       	std	Y+4, r23	; 0x04
    10e8:	90 e8       	ldi	r25, 0x80	; 128
    10ea:	9d 87       	std	Y+13, r25	; 0x0d
    10ec:	8e 87       	std	Y+14, r24	; 0x0e
    10ee:	86 e0       	ldi	r24, 0x06	; 6
    10f0:	8f 87       	std	Y+15, r24	; 0x0f
					0x00                    // Unused (control)
				}
		};

	/* Send the command and any data to the attached device */
	return MassStore_SendCommand(&SCSICommandBlock, NULL);
    10f2:	cf 01       	movw	r24, r30
    10f4:	60 e0       	ldi	r22, 0x00	; 0
    10f6:	70 e0       	ldi	r23, 0x00	; 0
    10f8:	e1 dd       	rcall	.-1086   	; 0xcbc <MassStore_SendCommand>
    10fa:	6f 96       	adiw	r28, 0x1f	; 31
}
    10fc:	0f b6       	in	r0, 0x3f	; 63
    10fe:	f8 94       	cli
    1100:	de bf       	out	0x3e, r29	; 62
    1102:	0f be       	out	0x3f, r0	; 63
    1104:	cd bf       	out	0x3d, r28	; 61
    1106:	df 91       	pop	r29
    1108:	cf 91       	pop	r28
    110a:	08 95       	ret

0000110c <MassStore_ReadCapacity>:
    110c:	ff 92       	push	r15
 *
 *  \return A value from the Pipe_Stream_RW_ErrorCodes_t enum, or MASS_STORE_SCSI_COMMAND_FAILED if the SCSI command fails
 */
uint8_t MassStore_ReadCapacity(const uint8_t LUNIndex,
                               SCSI_Capacity_t* const CapacityPtr)
{
    110e:	0f 93       	push	r16
    1110:	1f 93       	push	r17
    1112:	cf 93       	push	r28
    1114:	df 93       	push	r29
    1116:	cd b7       	in	r28, 0x3d	; 61
    1118:	de b7       	in	r29, 0x3e	; 62
    111a:	6f 97       	sbiw	r28, 0x1f	; 31
    111c:	0f b6       	in	r0, 0x3f	; 63
    111e:	f8 94       	cli
    1120:	de bf       	out	0x3e, r29	; 62
    1122:	0f be       	out	0x3f, r0	; 63
    1124:	cd bf       	out	0x3d, r28	; 61
    1126:	8b 01       	movw	r16, r22
	uint8_t ErrorCode = PIPE_RWSTREAM_NoError;

	/* Create a CBW with a SCSI command to issue READ CAPACITY command */
	MS_CommandBlockWrapper_t SCSICommandBlock = (MS_CommandBlockWrapper_t)
    1128:	fe 01       	movw	r30, r28
    112a:	31 96       	adiw	r30, 0x01	; 1
    112c:	9f e1       	ldi	r25, 0x1F	; 31
    112e:	df 01       	movw	r26, r30
    1130:	1d 92       	st	X+, r1
    1132:	9a 95       	dec	r25
    1134:	e9 f7       	brne	.-6      	; 0x1130 <MassStore_ReadCapacity+0x24>
    1136:	45 e5       	ldi	r20, 0x55	; 85
    1138:	53 e5       	ldi	r21, 0x53	; 83
    113a:	62 e4       	ldi	r22, 0x42	; 66
    113c:	73 e4       	ldi	r23, 0x43	; 67
    113e:	49 83       	std	Y+1, r20	; 0x01
    1140:	5a 83       	std	Y+2, r21	; 0x02
    1142:	6b 83       	std	Y+3, r22	; 0x03
    1144:	7c 83       	std	Y+4, r23	; 0x04
    1146:	48 e0       	ldi	r20, 0x08	; 8
    1148:	50 e0       	ldi	r21, 0x00	; 0
    114a:	60 e0       	ldi	r22, 0x00	; 0
    114c:	70 e0       	ldi	r23, 0x00	; 0
    114e:	49 87       	std	Y+9, r20	; 0x09
    1150:	5a 87       	std	Y+10, r21	; 0x0a
    1152:	6b 87       	std	Y+11, r22	; 0x0b
    1154:	7c 87       	std	Y+12, r23	; 0x0c
    1156:	90 e8       	ldi	r25, 0x80	; 128
    1158:	9d 87       	std	Y+13, r25	; 0x0d
    115a:	8e 87       	std	Y+14, r24	; 0x0e
    115c:	8a e0       	ldi	r24, 0x0A	; 10
    115e:	8f 87       	std	Y+15, r24	; 0x0f
    1160:	85 e2       	ldi	r24, 0x25	; 37
    1162:	88 8b       	std	Y+16, r24	; 0x10
					0x00                    // Unused (control)
				}
		};

	/* Send the command and any data to the attached device */
	if ((ErrorCode = MassStore_SendCommand(&SCSICommandBlock, CapacityPtr)) != PIPE_RWSTREAM_NoError)
    1164:	cf 01       	movw	r24, r30
    1166:	b8 01       	movw	r22, r16
    1168:	a9 dd       	rcall	.-1198   	; 0xcbc <MassStore_SendCommand>
    116a:	f8 2e       	mov	r15, r24
    116c:	88 23       	and	r24, r24
    116e:	d9 f4       	brne	.+54     	; 0x11a6 <MassStore_ReadCapacity+0x9a>
    1170:	f8 01       	movw	r30, r16
	  return ErrorCode;

	/* Endian-correct the read data */
	CapacityPtr->Blocks    = SwapEndian_32(CapacityPtr->Blocks);
    1172:	60 81       	ld	r22, Z
    1174:	71 81       	ldd	r23, Z+1	; 0x01
    1176:	82 81       	ldd	r24, Z+2	; 0x02
    1178:	93 81       	ldd	r25, Z+3	; 0x03
    117a:	81 de       	rcall	.-766    	; 0xe7e <SwapEndian_32>
    117c:	dc 01       	movw	r26, r24
    117e:	cb 01       	movw	r24, r22
    1180:	f8 01       	movw	r30, r16
    1182:	80 83       	st	Z, r24
    1184:	91 83       	std	Z+1, r25	; 0x01
    1186:	a2 83       	std	Z+2, r26	; 0x02
    1188:	b3 83       	std	Z+3, r27	; 0x03
    118a:	64 81       	ldd	r22, Z+4	; 0x04
    118c:	75 81       	ldd	r23, Z+5	; 0x05
	CapacityPtr->BlockSize = SwapEndian_32(CapacityPtr->BlockSize);
    118e:	86 81       	ldd	r24, Z+6	; 0x06
    1190:	97 81       	ldd	r25, Z+7	; 0x07
    1192:	75 de       	rcall	.-790    	; 0xe7e <SwapEndian_32>
    1194:	ab 01       	movw	r20, r22
    1196:	bc 01       	movw	r22, r24
    1198:	d8 01       	movw	r26, r16
    119a:	14 96       	adiw	r26, 0x04	; 4
    119c:	4d 93       	st	X+, r20
    119e:	5d 93       	st	X+, r21
    11a0:	6d 93       	st	X+, r22
    11a2:	7c 93       	st	X, r23
    11a4:	17 97       	sbiw	r26, 0x07	; 7
    11a6:	8f 2d       	mov	r24, r15
    11a8:	6f 96       	adiw	r28, 0x1f	; 31
    11aa:	0f b6       	in	r0, 0x3f	; 63

	return ErrorCode;
}
    11ac:	f8 94       	cli
    11ae:	de bf       	out	0x3e, r29	; 62
    11b0:	0f be       	out	0x3f, r0	; 63
    11b2:	cd bf       	out	0x3d, r28	; 61
    11b4:	df 91       	pop	r29
    11b6:	cf 91       	pop	r28
    11b8:	1f 91       	pop	r17
    11ba:	0f 91       	pop	r16
    11bc:	ff 90       	pop	r15
    11be:	08 95       	ret

000011c0 <MassStore_PreventAllowMediumRemoval>:
    11c0:	cf 93       	push	r28
    11c2:	df 93       	push	r29
    11c4:	cd b7       	in	r28, 0x3d	; 61
 *
 *  \return A value from the Pipe_Stream_RW_ErrorCodes_t enum, or MASS_STORE_SCSI_COMMAND_FAILED if the SCSI command fails
 */
uint8_t MassStore_PreventAllowMediumRemoval(const uint8_t LUNIndex,
                                            const bool PreventRemoval)
{
    11c6:	de b7       	in	r29, 0x3e	; 62
    11c8:	6f 97       	sbiw	r28, 0x1f	; 31
    11ca:	0f b6       	in	r0, 0x3f	; 63
    11cc:	f8 94       	cli
    11ce:	de bf       	out	0x3e, r29	; 62
    11d0:	0f be       	out	0x3f, r0	; 63
    11d2:	cd bf       	out	0x3d, r28	; 61
    11d4:	96 2f       	mov	r25, r22
	/* Create a CBW with a SCSI command to issue PREVENT ALLOW MEDIUM REMOVAL command */
	MS_CommandBlockWrapper_t SCSICommandBlock = (MS_CommandBlockWrapper_t)
    11d6:	fe 01       	movw	r30, r28
    11d8:	31 96       	adiw	r30, 0x01	; 1
    11da:	2f e1       	ldi	r18, 0x1F	; 31
    11dc:	df 01       	movw	r26, r30
    11de:	1d 92       	st	X+, r1
    11e0:	2a 95       	dec	r18
    11e2:	e9 f7       	brne	.-6      	; 0x11de <MassStore_PreventAllowMediumRemoval+0x1e>
    11e4:	45 e5       	ldi	r20, 0x55	; 85
    11e6:	53 e5       	ldi	r21, 0x53	; 83
    11e8:	62 e4       	ldi	r22, 0x42	; 66
    11ea:	73 e4       	ldi	r23, 0x43	; 67
    11ec:	49 83       	std	Y+1, r20	; 0x01
    11ee:	5a 83       	std	Y+2, r21	; 0x02
    11f0:	6b 83       	std	Y+3, r22	; 0x03
    11f2:	7c 83       	std	Y+4, r23	; 0x04
    11f4:	8e 87       	std	Y+14, r24	; 0x0e
    11f6:	86 e0       	ldi	r24, 0x06	; 6
    11f8:	8f 87       	std	Y+15, r24	; 0x0f
    11fa:	8e e1       	ldi	r24, 0x1E	; 30
    11fc:	88 8b       	std	Y+16, r24	; 0x10
    11fe:	9b 8b       	std	Y+19, r25	; 0x13
					0x00                    // Unused (control)
				}
		};

	/* Send the command and any data to the attached device */
	return MassStore_SendCommand(&SCSICommandBlock, NULL);
    1200:	cf 01       	movw	r24, r30
    1202:	60 e0       	ldi	r22, 0x00	; 0
    1204:	70 e0       	ldi	r23, 0x00	; 0
    1206:	5a dd       	rcall	.-1356   	; 0xcbc <MassStore_SendCommand>
    1208:	6f 96       	adiw	r28, 0x1f	; 31
}
    120a:	0f b6       	in	r0, 0x3f	; 63
    120c:	f8 94       	cli
    120e:	de bf       	out	0x3e, r29	; 62
    1210:	0f be       	out	0x3f, r0	; 63
    1212:	cd bf       	out	0x3d, r28	; 61
    1214:	df 91       	pop	r29
    1216:	cf 91       	pop	r28
    1218:	08 95       	ret

0000121a <USB_Host_ResetDevice>:
			 *  \return Boolean \c true if the bus is currently suspended, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusSuspended(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusSuspended(void)
			{
				return ((UHCON & (1 << SOFEN)) ? false : true);
    121a:	80 91 9e 00 	lds	r24, 0x009E
    121e:	90 e0       	ldi	r25, 0x00	; 0
    1220:	81 70       	andi	r24, 0x01	; 1
    1222:	90 70       	andi	r25, 0x00	; 0
						break;
					case USB_INT_DCONNI:
						UHIEN  &= ~(1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  &= ~(1 << DDISCE);
    1224:	20 91 a0 00 	lds	r18, 0x00A0
    1228:	2d 7f       	andi	r18, 0xFD	; 253
    122a:	20 93 a0 00 	sts	0x00A0, r18
			 *  woken up automatically and the bus resumed after the reset has been correctly issued.
			 */
			static inline void USB_Host_ResetBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResetBus(void)
			{
				UHCON |=  (1 << RESET);
    122e:	20 91 9e 00 	lds	r18, 0x009E
    1232:	22 60       	ori	r18, 0x02	; 2
    1234:	20 93 9e 00 	sts	0x009E, r18
			 *  \return Boolean \c true if no bus reset is currently being sent, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusResetComplete(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusResetComplete(void)
			{
				return ((UHCON & (1 << RESET)) ? false : true);
    1238:	20 91 9e 00 	lds	r18, 0x009E
	bool BusSuspended = USB_Host_IsBusSuspended();

	USB_INT_Disable(USB_INT_DDISCI);

	USB_Host_ResetBus();
	while (!(USB_Host_IsBusResetComplete()));
    123c:	21 fd       	sbrc	r18, 1
    123e:	fc cf       	rjmp	.-8      	; 0x1238 <USB_Host_ResetDevice+0x1e>
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
    1240:	20 91 9e 00 	lds	r18, 0x009E
    1244:	21 60       	ori	r18, 0x01	; 1
    1246:	20 93 9e 00 	sts	0x009E, r18
	USB_Host_ResumeBus();

	USB_Host_ConfigurationNumber = 0;
    124a:	10 92 32 01 	sts	0x0132, r1
					case USB_INT_RXSTPI:
						return (UEIENX & (1 << RXSTPE));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
    124e:	20 91 a0 00 	lds	r18, 0x00A0
    1252:	30 e0       	ldi	r19, 0x00	; 0
    1254:	20 72       	andi	r18, 0x20	; 32
    1256:	30 70       	andi	r19, 0x00	; 0
						UEIENX &= ~(1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  &= ~(1 << HSOFE);
    1258:	40 91 a0 00 	lds	r20, 0x00A0
    125c:	4f 7d       	andi	r20, 0xDF	; 223
    125e:	40 93 a0 00 	sts	0x00A0, r20
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
    1262:	40 91 9f 00 	lds	r20, 0x009F
    1266:	4f 7d       	andi	r20, 0xDF	; 223
    1268:	40 93 9f 00 	sts	0x009F, r20
    126c:	4a e0       	ldi	r20, 0x0A	; 10
					case USB_INT_RXSTPI:
						return (UEINTX & (1 << RXSTPI));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
    126e:	50 91 9f 00 	lds	r21, 0x009F
		/* Workaround for powerless-pull-up devices. After a USB bus reset,
		   all disconnection interrupts are suppressed while a USB frame is
		   looked for - if it is found within 10ms, the device is still
		   present.                                                        */

		if (USB_INT_HasOccurred(USB_INT_HSOFI))
    1272:	55 ff       	sbrs	r21, 5
    1274:	0b c0       	rjmp	.+22     	; 0x128c <USB_Host_ResetDevice+0x72>
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
    1276:	40 91 9f 00 	lds	r20, 0x009F
    127a:	4f 7d       	andi	r20, 0xDF	; 223
    127c:	40 93 9f 00 	sts	0x009F, r20
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
						break;
					case USB_INT_DDISCI:
						UHINT  &= ~(1 << DDISCI);
    1280:	40 91 9f 00 	lds	r20, 0x009F
    1284:	4d 7f       	andi	r20, 0xFD	; 253
    1286:	40 93 9f 00 	sts	0x009F, r20
    128a:	08 c0       	rjmp	.+16     	; 0x129c <USB_Host_ResetDevice+0x82>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    128c:	ef ec       	ldi	r30, 0xCF	; 207
    128e:	f7 e0       	ldi	r31, 0x07	; 7
    1290:	31 97       	sbiw	r30, 0x01	; 1
    1292:	f1 f7       	brne	.-4      	; 0x1290 <USB_Host_ResetDevice+0x76>
    1294:	00 c0       	rjmp	.+0      	; 0x1296 <USB_Host_ResetDevice+0x7c>
    1296:	00 00       	nop
    1298:	41 50       	subi	r20, 0x01	; 1
	bool HSOFIEnabled = USB_INT_IsEnabled(USB_INT_HSOFI);

	USB_INT_Disable(USB_INT_HSOFI);
	USB_INT_Clear(USB_INT_HSOFI);

	for (uint8_t MSRem = 10; MSRem != 0; MSRem--)
    129a:	49 f7       	brne	.-46     	; 0x126e <USB_Host_ResetDevice+0x54>
		}

		Delay_MS(1);
	}

	if (HSOFIEnabled)
    129c:	21 15       	cp	r18, r1
    129e:	31 05       	cpc	r19, r1
    12a0:	29 f0       	breq	.+10     	; 0x12ac <USB_Host_ResetDevice+0x92>
						UEIENX |= (1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  |= (1 << HSOFE);
    12a2:	20 91 a0 00 	lds	r18, 0x00A0
    12a6:	20 62       	ori	r18, 0x20	; 32
    12a8:	20 93 a0 00 	sts	0x00A0, r18
	  USB_INT_Enable(USB_INT_HSOFI);

	if (BusSuspended)
    12ac:	00 97       	sbiw	r24, 0x00	; 0
    12ae:	29 f4       	brne	.+10     	; 0x12ba <USB_Host_ResetDevice+0xa0>
			 *             some events (such as device disconnections) will not fire until the bus is resumed.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				UHCON &= ~(1 << SOFEN);
    12b0:	80 91 9e 00 	lds	r24, 0x009E
    12b4:	8e 7f       	andi	r24, 0xFE	; 254
    12b6:	80 93 9e 00 	sts	0x009E, r24
						break;
					case USB_INT_DCONNI:
						UHIEN  |= (1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  |= (1 << DDISCE);
    12ba:	80 91 a0 00 	lds	r24, 0x00A0
    12be:	82 60       	ori	r24, 0x02	; 2
    12c0:	80 93 a0 00 	sts	0x00A0, r24
	  USB_Host_SuspendBus();

	USB_INT_Enable(USB_INT_DDISCI);
}
    12c4:	08 95       	ret

000012c6 <USB_Host_WaitMS>:
			 *  \return Boolean \c true if the bus is currently suspended, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusSuspended(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusSuspended(void)
			{
				return ((UHCON & (1 << SOFEN)) ? false : true);
    12c6:	40 91 9e 00 	lds	r20, 0x009E
    12ca:	50 e0       	ldi	r21, 0x00	; 0
    12cc:	41 70       	andi	r20, 0x01	; 1
    12ce:	50 70       	andi	r21, 0x00	; 0
					case USB_INT_RXSTPI:
						return (UEIENX & (1 << RXSTPE));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
    12d0:	20 91 a0 00 	lds	r18, 0x00A0
    12d4:	30 e0       	ldi	r19, 0x00	; 0
    12d6:	20 72       	andi	r18, 0x20	; 32
    12d8:	30 70       	andi	r19, 0x00	; 0
						UEIENX &= ~(1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  &= ~(1 << HSOFE);
    12da:	90 91 a0 00 	lds	r25, 0x00A0
    12de:	9f 7d       	andi	r25, 0xDF	; 223
    12e0:	90 93 a0 00 	sts	0x00A0, r25
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
    12e4:	90 91 9f 00 	lds	r25, 0x009F
    12e8:	9f 7d       	andi	r25, 0xDF	; 223
    12ea:	90 93 9f 00 	sts	0x009F, r25
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
    12ee:	90 91 9e 00 	lds	r25, 0x009E
    12f2:	91 60       	ori	r25, 0x01	; 1
    12f4:	90 93 9e 00 	sts	0x009E, r25
    12f8:	26 c0       	rjmp	.+76     	; 0x1346 <USB_Host_WaitMS+0x80>
					case USB_INT_RXSTPI:
						return (UEINTX & (1 << RXSTPI));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
    12fa:	90 91 9f 00 	lds	r25, 0x009F

	USB_Host_ResumeBus();

	while (MS)
	{
		if (USB_INT_HasOccurred(USB_INT_HSOFI))
    12fe:	95 ff       	sbrs	r25, 5
    1300:	06 c0       	rjmp	.+12     	; 0x130e <USB_Host_WaitMS+0x48>
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
    1302:	90 91 9f 00 	lds	r25, 0x009F
    1306:	9f 7d       	andi	r25, 0xDF	; 223
    1308:	90 93 9f 00 	sts	0x009F, r25
		{
			USB_INT_Clear(USB_INT_HSOFI);
			MS--;
    130c:	81 50       	subi	r24, 0x01	; 1
		}

		if ((USB_HostState == HOST_STATE_Unattached) || (USB_CurrentMode != USB_MODE_Host))
    130e:	90 91 3c 01 	lds	r25, 0x013C
    1312:	91 30       	cpi	r25, 0x01	; 1
    1314:	d9 f0       	breq	.+54     	; 0x134c <USB_Host_WaitMS+0x86>
			 *  \return Boolean \c true if an error has occurred on the selected pipe, \c false otherwise.
			 */
			static inline bool Pipe_IsError(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsError(void)
			{
				return ((UPINTX & (1 << PERRI)) ? true : false);
    1316:	90 91 a6 00 	lds	r25, 0x00A6
			ErrorCode = HOST_WAITERROR_DeviceDisconnect;

			break;
		}

		if (Pipe_IsError())
    131a:	94 ff       	sbrs	r25, 4
    131c:	09 c0       	rjmp	.+18     	; 0x1330 <USB_Host_WaitMS+0x6a>

			/** Clears the error flags for the currently selected pipe. */
			static inline void Pipe_ClearError(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearError(void)
			{
				UPERRX = 0;
    131e:	10 92 f5 00 	sts	0x00F5, r1
				UPINTX &= ~(1 << PERRI);
    1322:	80 91 a6 00 	lds	r24, 0x00A6
    1326:	8f 7e       	andi	r24, 0xEF	; 239
    1328:	80 93 a6 00 	sts	0x00A6, r24
		{
			Pipe_ClearError();
			ErrorCode = HOST_WAITERROR_PipeError;
    132c:	82 e0       	ldi	r24, 0x02	; 2

			break;
    132e:	0f c0       	rjmp	.+30     	; 0x134e <USB_Host_WaitMS+0x88>
			 *  \return Boolean \c true if the current pipe has been stalled by the attached device, \c false otherwise.
			 */
			static inline bool Pipe_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsStalled(void)
			{
				return ((UPINTX & (1 << RXSTALLI)) ? true : false);
    1330:	90 91 a6 00 	lds	r25, 0x00A6
		}

		if (Pipe_IsStalled())
    1334:	91 ff       	sbrs	r25, 1
    1336:	07 c0       	rjmp	.+14     	; 0x1346 <USB_Host_WaitMS+0x80>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearStall(void)
			{
				UPINTX &= ~(1 << RXSTALLI);
    1338:	80 91 a6 00 	lds	r24, 0x00A6
    133c:	8d 7f       	andi	r24, 0xFD	; 253
    133e:	80 93 a6 00 	sts	0x00A6, r24
		{
			Pipe_ClearStall();
			ErrorCode = HOST_WAITERROR_SetupStalled;
    1342:	83 e0       	ldi	r24, 0x03	; 3

			break;
    1344:	04 c0       	rjmp	.+8      	; 0x134e <USB_Host_WaitMS+0x88>
	USB_INT_Disable(USB_INT_HSOFI);
	USB_INT_Clear(USB_INT_HSOFI);

	USB_Host_ResumeBus();

	while (MS)
    1346:	88 23       	and	r24, r24
    1348:	c1 f6       	brne	.-80     	; 0x12fa <USB_Host_WaitMS+0x34>
    134a:	01 c0       	rjmp	.+2      	; 0x134e <USB_Host_WaitMS+0x88>
			MS--;
		}

		if ((USB_HostState == HOST_STATE_Unattached) || (USB_CurrentMode != USB_MODE_Host))
		{
			ErrorCode = HOST_WAITERROR_DeviceDisconnect;
    134c:	81 e0       	ldi	r24, 0x01	; 1

			break;
		}
	}

	if (BusSuspended)
    134e:	41 15       	cp	r20, r1
    1350:	51 05       	cpc	r21, r1
    1352:	29 f4       	brne	.+10     	; 0x135e <USB_Host_WaitMS+0x98>
			 *             some events (such as device disconnections) will not fire until the bus is resumed.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				UHCON &= ~(1 << SOFEN);
    1354:	90 91 9e 00 	lds	r25, 0x009E
    1358:	9e 7f       	andi	r25, 0xFE	; 254
    135a:	90 93 9e 00 	sts	0x009E, r25
	  USB_Host_SuspendBus();

	if (HSOFIEnabled)
    135e:	21 15       	cp	r18, r1
    1360:	31 05       	cpc	r19, r1
    1362:	29 f0       	breq	.+10     	; 0x136e <USB_Host_WaitMS+0xa8>
						UEIENX |= (1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  |= (1 << HSOFE);
    1364:	90 91 a0 00 	lds	r25, 0x00A0
    1368:	90 62       	ori	r25, 0x20	; 32
    136a:	90 93 a0 00 	sts	0x00A0, r25
	  USB_INT_Enable(USB_INT_HSOFI);

	return ErrorCode;
}
    136e:	08 95       	ret

00001370 <USB_Host_ProcessNextHostState>:

#define  __INCLUDE_FROM_HOST_C
#include "../Host.h"

void USB_Host_ProcessNextHostState(void)
{
    1370:	0f 93       	push	r16
    1372:	1f 93       	push	r17
    1374:	cf 93       	push	r28
    1376:	df 93       	push	r29
    1378:	cd b7       	in	r28, 0x3d	; 61
    137a:	de b7       	in	r29, 0x3e	; 62
    137c:	28 97       	sbiw	r28, 0x08	; 8
    137e:	0f b6       	in	r0, 0x3f	; 63
    1380:	f8 94       	cli
    1382:	de bf       	out	0x3e, r29	; 62
    1384:	0f be       	out	0x3f, r0	; 63
    1386:	cd bf       	out	0x3d, r28	; 61
	uint8_t SubErrorCode = HOST_ENUMERROR_NoError;

	static uint16_t WaitMSRemaining;
	static uint8_t  PostWaitState;

	switch (USB_HostState)
    1388:	80 91 3c 01 	lds	r24, 0x013C
    138c:	85 30       	cpi	r24, 0x05	; 5
    138e:	09 f4       	brne	.+2      	; 0x1392 <USB_Host_ProcessNextHostState+0x22>
    1390:	99 c0       	rjmp	.+306    	; 0x14c4 <USB_Host_ProcessNextHostState+0x154>
    1392:	86 30       	cpi	r24, 0x06	; 6
    1394:	68 f4       	brcc	.+26     	; 0x13b0 <USB_Host_ProcessNextHostState+0x40>
    1396:	82 30       	cpi	r24, 0x02	; 2
    1398:	c1 f1       	breq	.+112    	; 0x140a <USB_Host_ProcessNextHostState+0x9a>
    139a:	83 30       	cpi	r24, 0x03	; 3
    139c:	18 f4       	brcc	.+6      	; 0x13a4 <USB_Host_ProcessNextHostState+0x34>
    139e:	88 23       	and	r24, r24
    13a0:	a1 f0       	breq	.+40     	; 0x13ca <USB_Host_ProcessNextHostState+0x5a>
    13a2:	06 c1       	rjmp	.+524    	; 0x15b0 <USB_Host_ProcessNextHostState+0x240>
    13a4:	83 30       	cpi	r24, 0x03	; 3
    13a6:	d9 f1       	breq	.+118    	; 0x141e <USB_Host_ProcessNextHostState+0xae>
    13a8:	84 30       	cpi	r24, 0x04	; 4
    13aa:	09 f0       	breq	.+2      	; 0x13ae <USB_Host_ProcessNextHostState+0x3e>
    13ac:	01 c1       	rjmp	.+514    	; 0x15b0 <USB_Host_ProcessNextHostState+0x240>
    13ae:	62 c0       	rjmp	.+196    	; 0x1474 <USB_Host_ProcessNextHostState+0x104>
    13b0:	87 30       	cpi	r24, 0x07	; 7
    13b2:	09 f4       	brne	.+2      	; 0x13b6 <USB_Host_ProcessNextHostState+0x46>
    13b4:	9e c0       	rjmp	.+316    	; 0x14f2 <USB_Host_ProcessNextHostState+0x182>
    13b6:	87 30       	cpi	r24, 0x07	; 7
    13b8:	08 f4       	brcc	.+2      	; 0x13bc <USB_Host_ProcessNextHostState+0x4c>
    13ba:	8f c0       	rjmp	.+286    	; 0x14da <USB_Host_ProcessNextHostState+0x16a>
    13bc:	88 30       	cpi	r24, 0x08	; 8
    13be:	09 f4       	brne	.+2      	; 0x13c2 <USB_Host_ProcessNextHostState+0x52>
    13c0:	b8 c0       	rjmp	.+368    	; 0x1532 <USB_Host_ProcessNextHostState+0x1c2>
    13c2:	89 30       	cpi	r24, 0x09	; 9
    13c4:	09 f0       	breq	.+2      	; 0x13c8 <USB_Host_ProcessNextHostState+0x58>
    13c6:	f4 c0       	rjmp	.+488    	; 0x15b0 <USB_Host_ProcessNextHostState+0x240>
    13c8:	d9 c0       	rjmp	.+434    	; 0x157c <USB_Host_ProcessNextHostState+0x20c>
	{
		case HOST_STATE_WaitForDevice:
			if (WaitMSRemaining)
    13ca:	00 91 2e 01 	lds	r16, 0x012E
    13ce:	10 91 2f 01 	lds	r17, 0x012F
    13d2:	01 15       	cp	r16, r1
    13d4:	11 05       	cpc	r17, r1
    13d6:	09 f4       	brne	.+2      	; 0x13da <USB_Host_ProcessNextHostState+0x6a>
    13d8:	eb c0       	rjmp	.+470    	; 0x15b0 <USB_Host_ProcessNextHostState+0x240>
			{
				if ((SubErrorCode = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
    13da:	81 e0       	ldi	r24, 0x01	; 1
    13dc:	74 df       	rcall	.-280    	; 0x12c6 <USB_Host_WaitMS>
    13de:	68 2f       	mov	r22, r24
    13e0:	88 23       	and	r24, r24
    13e2:	31 f0       	breq	.+12     	; 0x13f0 <USB_Host_ProcessNextHostState+0x80>
    13e4:	80 91 30 01 	lds	r24, 0x0130
				{
					USB_HostState = PostWaitState;
    13e8:	80 93 3c 01 	sts	0x013C, r24
    13ec:	81 e0       	ldi	r24, 0x01	; 1
					ErrorCode     = HOST_ENUMERROR_WaitStage;
    13ee:	d3 c0       	rjmp	.+422    	; 0x1596 <USB_Host_ProcessNextHostState+0x226>
					break;
    13f0:	01 50       	subi	r16, 0x01	; 1
				}

				if (!(--WaitMSRemaining))
    13f2:	10 40       	sbci	r17, 0x00	; 0
    13f4:	10 93 2f 01 	sts	0x012F, r17
    13f8:	00 93 2e 01 	sts	0x012E, r16
    13fc:	01 15       	cp	r16, r1
    13fe:	11 05       	cpc	r17, r1
    1400:	09 f0       	breq	.+2      	; 0x1404 <USB_Host_ProcessNextHostState+0x94>
    1402:	d6 c0       	rjmp	.+428    	; 0x15b0 <USB_Host_ProcessNextHostState+0x240>
    1404:	80 91 30 01 	lds	r24, 0x0130
				  USB_HostState = PostWaitState;
    1408:	07 c0       	rjmp	.+14     	; 0x1418 <USB_Host_ProcessNextHostState+0xa8>
    140a:	88 ee       	ldi	r24, 0xE8	; 232
			}

			break;
		case HOST_STATE_Powered:
			WaitMSRemaining = HOST_DEVICE_SETTLE_DELAY_MS;
    140c:	93 e0       	ldi	r25, 0x03	; 3
    140e:	90 93 2f 01 	sts	0x012F, r25
    1412:	80 93 2e 01 	sts	0x012E, r24
    1416:	83 e0       	ldi	r24, 0x03	; 3

			USB_HostState = HOST_STATE_Powered_WaitForDeviceSettle;
    1418:	80 93 3c 01 	sts	0x013C, r24
    141c:	c9 c0       	rjmp	.+402    	; 0x15b0 <USB_Host_ProcessNextHostState+0x240>
			break;
    141e:	80 91 2e 01 	lds	r24, 0x012E
		case HOST_STATE_Powered_WaitForDeviceSettle:
			if (WaitMSRemaining--)
    1422:	90 91 2f 01 	lds	r25, 0x012F
    1426:	9c 01       	movw	r18, r24
    1428:	21 50       	subi	r18, 0x01	; 1
    142a:	30 40       	sbci	r19, 0x00	; 0
    142c:	30 93 2f 01 	sts	0x012F, r19
    1430:	20 93 2e 01 	sts	0x012E, r18
    1434:	00 97       	sbiw	r24, 0x00	; 0
    1436:	39 f0       	breq	.+14     	; 0x1446 <USB_Host_ProcessNextHostState+0xd6>
    1438:	8f ec       	ldi	r24, 0xCF	; 207
    143a:	97 e0       	ldi	r25, 0x07	; 7
    143c:	01 97       	sbiw	r24, 0x01	; 1
    143e:	f1 f7       	brne	.-4      	; 0x143c <USB_Host_ProcessNextHostState+0xcc>
    1440:	00 c0       	rjmp	.+0      	; 0x1442 <USB_Host_ProcessNextHostState+0xd2>
    1442:	00 00       	nop
    1444:	b5 c0       	rjmp	.+362    	; 0x15b0 <USB_Host_ProcessNextHostState+0x240>
    1446:	77 98       	cbi	0x0e, 7	; 14
			static inline void USB_Host_VBUS_Manual_Off(void)
			{
				#if defined(INVERTED_VBUS_ENABLE_LINE)
				PORTE  |=  (1 << 7);
				#else
				PORTE  &= ~(1 << 7);
    1448:	80 91 d8 00 	lds	r24, 0x00D8

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON |=  (1 << OTGPADE);
    144c:	80 61       	ori	r24, 0x10	; 16
    144e:	80 93 d8 00 	sts	0x00D8, r24
    1452:	80 91 dd 00 	lds	r24, 0x00DD
			}

			static inline void USB_Host_VBUS_Auto_Enable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Enable(void)
			{
				OTGCON &= ~(1 << VBUSHWC);
    1456:	8b 7f       	andi	r24, 0xFB	; 251
    1458:	80 93 dd 00 	sts	0x00DD, r24
    145c:	80 91 d7 00 	lds	r24, 0x00D7
				UHWCON |=  (1 << UVCONE);
    1460:	80 61       	ori	r24, 0x10	; 16
    1462:	80 93 d7 00 	sts	0x00D7, r24
    1466:	80 91 dd 00 	lds	r24, 0x00DD
			}

			static inline void USB_Host_VBUS_Auto_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_On(void)
			{
				OTGCON |=  (1 << VBUSREQ);
    146a:	82 60       	ori	r24, 0x02	; 2
    146c:	80 93 dd 00 	sts	0x00DD, r24
    1470:	84 e0       	ldi	r24, 0x04	; 4
				#if defined(NO_AUTO_VBUS_MANAGEMENT)
				USB_Host_VBUS_Manual_Enable();
				USB_Host_VBUS_Manual_On();
				#endif

				USB_HostState = HOST_STATE_Powered_WaitForConnect;
    1472:	d2 cf       	rjmp	.-92     	; 0x1418 <USB_Host_ProcessNextHostState+0xa8>
    1474:	80 91 9f 00 	lds	r24, 0x009F
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
					case USB_INT_DCONNI:
						return (UHINT  & (1 << DCONNI));
    1478:	80 ff       	sbrs	r24, 0
			}

			break;
		case HOST_STATE_Powered_WaitForConnect:
			if (USB_INT_HasOccurred(USB_INT_DCONNI))
    147a:	9a c0       	rjmp	.+308    	; 0x15b0 <USB_Host_ProcessNextHostState+0x240>
    147c:	80 91 9f 00 	lds	r24, 0x009F
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
    1480:	8e 7f       	andi	r24, 0xFE	; 254
    1482:	80 93 9f 00 	sts	0x009F, r24
    1486:	80 91 9f 00 	lds	r24, 0x009F
						break;
					case USB_INT_DDISCI:
						UHINT  &= ~(1 << DDISCI);
    148a:	8d 7f       	andi	r24, 0xFD	; 253
    148c:	80 93 9f 00 	sts	0x009F, r24
    1490:	80 91 df 00 	lds	r24, 0x00DF
						break;
					case USB_INT_BCERRI:
						OTGINT &= ~(1 << BCERRI);
						break;
					case USB_INT_VBERRI:
						OTGINT &= ~(1 << VBERRI);
    1494:	8d 7f       	andi	r24, 0xFD	; 253
    1496:	80 93 df 00 	sts	0x00DF, r24
    149a:	80 91 de 00 	lds	r24, 0x00DE
						break;
					case USB_INT_BCERRI:
						OTGIEN |= (1 << BCERRE);
						break;
					case USB_INT_VBERRI:
						OTGIEN |= (1 << VBERRE);
    149e:	82 60       	ori	r24, 0x02	; 2
    14a0:	80 93 de 00 	sts	0x00DE, r24
    14a4:	80 91 9e 00 	lds	r24, 0x009E
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
    14a8:	81 60       	ori	r24, 0x01	; 1
    14aa:	80 93 9e 00 	sts	0x009E, r24
    14ae:	9e d1       	rcall	.+828    	; 0x17ec <Pipe_ClearPipes>

				USB_INT_Clear(USB_INT_VBERRI);
				USB_INT_Enable(USB_INT_VBERRI);

				USB_Host_ResumeBus();
				Pipe_ClearPipes();
    14b0:	10 92 3c 01 	sts	0x013C, r1

				HOST_TASK_NONBLOCK_WAIT(100, HOST_STATE_Powered_DoReset);
    14b4:	84 e6       	ldi	r24, 0x64	; 100
    14b6:	90 e0       	ldi	r25, 0x00	; 0
    14b8:	90 93 2f 01 	sts	0x012F, r25
    14bc:	80 93 2e 01 	sts	0x012E, r24
    14c0:	85 e0       	ldi	r24, 0x05	; 5
    14c2:	59 c0       	rjmp	.+178    	; 0x1576 <USB_Host_ProcessNextHostState+0x206>
    14c4:	aa de       	rcall	.-684    	; 0x121a <USB_Host_ResetDevice>
    14c6:	10 92 3c 01 	sts	0x013C, r1
			}

			break;
		case HOST_STATE_Powered_DoReset:
			USB_Host_ResetDevice();
    14ca:	88 ec       	ldi	r24, 0xC8	; 200

			HOST_TASK_NONBLOCK_WAIT(200, HOST_STATE_Powered_ConfigPipe);
    14cc:	90 e0       	ldi	r25, 0x00	; 0
    14ce:	90 93 2f 01 	sts	0x012F, r25
    14d2:	80 93 2e 01 	sts	0x012E, r24
    14d6:	86 e0       	ldi	r24, 0x06	; 6
    14d8:	4e c0       	rjmp	.+156    	; 0x1576 <USB_Host_ProcessNextHostState+0x206>
    14da:	80 e0       	ldi	r24, 0x00	; 0
    14dc:	60 e0       	ldi	r22, 0x00	; 0
    14de:	40 e0       	ldi	r20, 0x00	; 0
			break;
		case HOST_STATE_Powered_ConfigPipe:
			if (!(Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL, ENDPOINT_CONTROLEP, PIPE_CONTROLPIPE_DEFAULT_SIZE, 1)))
    14e0:	20 e4       	ldi	r18, 0x40	; 64
    14e2:	30 e0       	ldi	r19, 0x00	; 0
    14e4:	01 e0       	ldi	r16, 0x01	; 1
    14e6:	1d d1       	rcall	.+570    	; 0x1722 <Pipe_ConfigurePipe>
    14e8:	88 23       	and	r24, r24
    14ea:	09 f4       	brne	.+2      	; 0x14ee <USB_Host_ProcessNextHostState+0x17e>
    14ec:	50 c0       	rjmp	.+160    	; 0x158e <USB_Host_ProcessNextHostState+0x21e>
    14ee:	87 e0       	ldi	r24, 0x07	; 7
    14f0:	93 cf       	rjmp	.-218    	; 0x1418 <USB_Host_ProcessNextHostState+0xa8>
    14f2:	a4 e3       	ldi	r26, 0x34	; 52
    14f4:	b1 e0       	ldi	r27, 0x01	; 1
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
				SubErrorCode = 0;
				break;
			}

			USB_HostState = HOST_STATE_Default;
    14f6:	e4 e1       	ldi	r30, 0x14	; 20
    14f8:	f1 e0       	ldi	r31, 0x01	; 1
			break;
		case HOST_STATE_Default:
			USB_ControlRequest = (USB_Request_Header_t)
    14fa:	88 e0       	ldi	r24, 0x08	; 8
    14fc:	01 90       	ld	r0, Z+
    14fe:	0d 92       	st	X+, r0
    1500:	81 50       	subi	r24, 0x01	; 1
    1502:	e1 f7       	brne	.-8      	; 0x14fc <USB_Host_ProcessNextHostState+0x18c>
    1504:	10 92 a7 00 	sts	0x00A7, r1
    1508:	ce 01       	movw	r24, r28
    150a:	01 96       	adiw	r24, 0x01	; 1
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
    150c:	95 d3       	rcall	.+1834   	; 0x1c38 <USB_Host_SendControlRequest>
    150e:	68 2f       	mov	r22, r24
				};

			uint8_t DataBuffer[8];

			Pipe_SelectPipe(PIPE_CONTROLPIPE);
			if ((SubErrorCode = USB_Host_SendControlRequest(DataBuffer)) != HOST_SENDCONTROL_Successful)
    1510:	88 23       	and	r24, r24
    1512:	09 f0       	breq	.+2      	; 0x1516 <USB_Host_ProcessNextHostState+0x1a6>
    1514:	3f c0       	rjmp	.+126    	; 0x1594 <USB_Host_ProcessNextHostState+0x224>
    1516:	88 85       	ldd	r24, Y+8	; 0x08
    1518:	80 93 24 01 	sts	0x0124, r24
    151c:	7e de       	rcall	.-772    	; 0x121a <USB_Host_ResetDevice>
    151e:	10 92 3c 01 	sts	0x013C, r1
			{
				ErrorCode = HOST_ENUMERROR_ControlError;
				break;
			}

			USB_Host_ControlPipeSize = DataBuffer[offsetof(USB_Descriptor_Device_t, Endpoint0Size)];
    1522:	88 ec       	ldi	r24, 0xC8	; 200
    1524:	90 e0       	ldi	r25, 0x00	; 0

			USB_Host_ResetDevice();
    1526:	90 93 2f 01 	sts	0x012F, r25

			HOST_TASK_NONBLOCK_WAIT(200, HOST_STATE_Default_PostReset);
    152a:	80 93 2e 01 	sts	0x012E, r24
    152e:	88 e0       	ldi	r24, 0x08	; 8
    1530:	22 c0       	rjmp	.+68     	; 0x1576 <USB_Host_ProcessNextHostState+0x206>
    1532:	20 91 24 01 	lds	r18, 0x0124
    1536:	80 e0       	ldi	r24, 0x00	; 0
    1538:	60 e0       	ldi	r22, 0x00	; 0
    153a:	40 e0       	ldi	r20, 0x00	; 0
    153c:	30 e0       	ldi	r19, 0x00	; 0
			break;
		case HOST_STATE_Default_PostReset:
			if (!(Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL, ENDPOINT_CONTROLEP, USB_Host_ControlPipeSize, 1)))
    153e:	01 e0       	ldi	r16, 0x01	; 1
    1540:	f0 d0       	rcall	.+480    	; 0x1722 <Pipe_ConfigurePipe>
    1542:	88 23       	and	r24, r24
    1544:	21 f1       	breq	.+72     	; 0x158e <USB_Host_ProcessNextHostState+0x21e>
    1546:	a4 e3       	ldi	r26, 0x34	; 52
    1548:	b1 e0       	ldi	r27, 0x01	; 1
    154a:	ec e1       	ldi	r30, 0x1C	; 28
    154c:	f1 e0       	ldi	r31, 0x01	; 1
    154e:	88 e0       	ldi	r24, 0x08	; 8
    1550:	01 90       	ld	r0, Z+
    1552:	0d 92       	st	X+, r0
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
				SubErrorCode = 0;
				break;
			}

			USB_ControlRequest = (USB_Request_Header_t)
    1554:	81 50       	subi	r24, 0x01	; 1
    1556:	e1 f7       	brne	.-8      	; 0x1550 <USB_Host_ProcessNextHostState+0x1e0>
    1558:	80 e0       	ldi	r24, 0x00	; 0
    155a:	90 e0       	ldi	r25, 0x00	; 0
    155c:	6d d3       	rcall	.+1754   	; 0x1c38 <USB_Host_SendControlRequest>
    155e:	68 2f       	mov	r22, r24
    1560:	88 23       	and	r24, r24
    1562:	c1 f4       	brne	.+48     	; 0x1594 <USB_Host_ProcessNextHostState+0x224>
    1564:	10 92 3c 01 	sts	0x013C, r1
					.wValue        = USB_HOST_DEVICEADDRESS,
					.wIndex        = 0,
					.wLength       = 0,
				};

			if ((SubErrorCode = USB_Host_SendControlRequest(NULL)) != HOST_SENDCONTROL_Successful)
    1568:	84 e6       	ldi	r24, 0x64	; 100
    156a:	90 e0       	ldi	r25, 0x00	; 0
    156c:	90 93 2f 01 	sts	0x012F, r25
    1570:	80 93 2e 01 	sts	0x012E, r24
			{
				ErrorCode = HOST_ENUMERROR_ControlError;
				break;
			}

			HOST_TASK_NONBLOCK_WAIT(100, HOST_STATE_Default_PostAddressSet);
    1574:	89 e0       	ldi	r24, 0x09	; 9
    1576:	80 93 30 01 	sts	0x0130, r24
    157a:	1a c0       	rjmp	.+52     	; 0x15b0 <USB_Host_ProcessNextHostState+0x240>
    157c:	81 e0       	ldi	r24, 0x01	; 1
    157e:	80 93 a1 00 	sts	0x00A1, r24
    1582:	8a e0       	ldi	r24, 0x0A	; 10
    1584:	80 93 3c 01 	sts	0x013C, r24
    1588:	0e 94 89 02 	call	0x512	; 0x512 <EVENT_USB_Host_DeviceEnumerationComplete>
			}

			static inline void USB_Host_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SetDeviceAddress(const uint8_t Address)
			{
				UHADDR  =  (Address & 0x7F);
    158c:	11 c0       	rjmp	.+34     	; 0x15b0 <USB_Host_ProcessNextHostState+0x240>
    158e:	60 e0       	ldi	r22, 0x00	; 0
    1590:	84 e0       	ldi	r24, 0x04	; 4
			break;
		case HOST_STATE_Default_PostAddressSet:
			USB_Host_SetDeviceAddress(USB_HOST_DEVICEADDRESS);

			USB_HostState = HOST_STATE_Addressed;
    1592:	01 c0       	rjmp	.+2      	; 0x1596 <USB_Host_ProcessNextHostState+0x226>
    1594:	83 e0       	ldi	r24, 0x03	; 3
    1596:	90 91 3c 01 	lds	r25, 0x013C

			EVENT_USB_Host_DeviceEnumerationComplete();
    159a:	91 30       	cpi	r25, 0x01	; 1
			break;
    159c:	49 f0       	breq	.+18     	; 0x15b0 <USB_Host_ProcessNextHostState+0x240>
			break;
		case HOST_STATE_Default_PostReset:
			if (!(Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL, ENDPOINT_CONTROLEP, USB_Host_ControlPipeSize, 1)))
			{
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
				SubErrorCode = 0;
    159e:	1f d8       	rcall	.-4034   	; 0x5de <EVENT_USB_Host_DeviceEnumerationFailed>
			HOST_TASK_NONBLOCK_WAIT(200, HOST_STATE_Default_PostReset);
			break;
		case HOST_STATE_Default_PostReset:
			if (!(Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL, ENDPOINT_CONTROLEP, USB_Host_ControlPipeSize, 1)))
			{
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
    15a0:	80 91 dd 00 	lds	r24, 0x00DD
					.wLength       = 0,
				};

			if ((SubErrorCode = USB_Host_SendControlRequest(NULL)) != HOST_SENDCONTROL_Successful)
			{
				ErrorCode = HOST_ENUMERROR_ControlError;
    15a4:	81 60       	ori	r24, 0x01	; 1

		default:
			break;
	}

	if ((ErrorCode != HOST_ENUMERROR_NoError) && (USB_HostState != HOST_STATE_Unattached))
    15a6:	80 93 dd 00 	sts	0x00DD, r24
    15aa:	0e 94 83 02 	call	0x506	; 0x506 <EVENT_USB_Host_DeviceUnattached>
	{
		EVENT_USB_Host_DeviceEnumerationFailed(ErrorCode, SubErrorCode);
    15ae:	79 d1       	rcall	.+754    	; 0x18a2 <USB_ResetInterface>
    15b0:	28 96       	adiw	r28, 0x08	; 8
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
    15b2:	0f b6       	in	r0, 0x3f	; 63
    15b4:	f8 94       	cli
    15b6:	de bf       	out	0x3e, r29	; 62
    15b8:	0f be       	out	0x3f, r0	; 63
    15ba:	cd bf       	out	0x3d, r28	; 61

		USB_Host_VBUS_Auto_Off();

		EVENT_USB_Host_DeviceUnattached();
    15bc:	df 91       	pop	r29
    15be:	cf 91       	pop	r28

		USB_ResetInterface();
    15c0:	1f 91       	pop	r17
    15c2:	0f 91       	pop	r16
	}
}
    15c4:	08 95       	ret

000015c6 <Pipe_Write_Stream_LE>:
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
    15c6:	af 92       	push	r10
    15c8:	bf 92       	push	r11
    15ca:	cf 92       	push	r12
    15cc:	df 92       	push	r13
    15ce:	ff 92       	push	r15
    15d0:	0f 93       	push	r16
    15d2:	1f 93       	push	r17
    15d4:	cf 93       	push	r28
    15d6:	df 93       	push	r29
    15d8:	5c 01       	movw	r10, r24
    15da:	eb 01       	movw	r28, r22
    15dc:	6a 01       	movw	r12, r20
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    15de:	80 91 aa 00 	lds	r24, 0x00AA
    15e2:	8f 7c       	andi	r24, 0xCF	; 207
    15e4:	80 62       	ori	r24, 0x20	; 32
    15e6:	80 93 aa 00 	sts	0x00AA, r24
	uint16_t BytesInTransfer = 0;
	uint8_t  ErrorCode;

	Pipe_SetPipeToken(TEMPLATE_TOKEN);

	if ((ErrorCode = Pipe_WaitUntilReady()))
    15ea:	14 d1       	rcall	.+552    	; 0x1814 <Pipe_WaitUntilReady>
    15ec:	f8 2e       	mov	r15, r24
    15ee:	88 23       	and	r24, r24
    15f0:	b1 f5       	brne	.+108    	; 0x165e <Pipe_Write_Stream_LE+0x98>
    15f2:	c1 14       	cp	r12, r1
	  return ErrorCode;

	if (BytesProcessed != NULL)
    15f4:	d1 04       	cpc	r13, r1
    15f6:	41 f0       	breq	.+16     	; 0x1608 <Pipe_Write_Stream_LE+0x42>
    15f8:	f6 01       	movw	r30, r12
	{
		Length -= *BytesProcessed;
    15fa:	00 81       	ld	r16, Z
    15fc:	11 81       	ldd	r17, Z+1	; 0x01
    15fe:	c0 1b       	sub	r28, r16
    1600:	d1 0b       	sbc	r29, r17
    1602:	0a 0d       	add	r16, r10
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
    1604:	1b 1d       	adc	r17, r11
    1606:	01 c0       	rjmp	.+2      	; 0x160a <Pipe_Write_Stream_LE+0x44>
    1608:	85 01       	movw	r16, r10

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
    160a:	aa 24       	eor	r10, r10
    160c:	bb 24       	eor	r11, r11
    160e:	23 c0       	rjmp	.+70     	; 0x1656 <Pipe_Write_Stream_LE+0x90>
    1610:	80 91 a6 00 	lds	r24, 0x00A6
			 *          on its direction.
			 */
			static inline bool Pipe_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsReadWriteAllowed(void)
			{
				return ((UPINTX & (1 << RWAL)) ? true : false);
    1614:	85 fd       	sbrc	r24, 5
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
	{
		if (!(Pipe_IsReadWriteAllowed()))
    1616:	16 c0       	rjmp	.+44     	; 0x1644 <Pipe_Write_Stream_LE+0x7e>
    1618:	80 91 a6 00 	lds	r24, 0x00A6
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearOUT(void)
			{
				UPINTX &= ~((1 << TXOUTI) | (1 << FIFOCON));
    161c:	8b 77       	andi	r24, 0x7B	; 123
    161e:	80 93 a6 00 	sts	0x00A6, r24
    1622:	c1 14       	cp	r12, r1
		{
			TEMPLATE_CLEAR_PIPE();

			if (BytesProcessed != NULL)
    1624:	d1 04       	cpc	r13, r1
    1626:	51 f0       	breq	.+20     	; 0x163c <Pipe_Write_Stream_LE+0x76>
    1628:	f6 01       	movw	r30, r12
			{
				*BytesProcessed += BytesInTransfer;
    162a:	80 81       	ld	r24, Z
    162c:	91 81       	ldd	r25, Z+1	; 0x01
    162e:	8a 0d       	add	r24, r10
    1630:	9b 1d       	adc	r25, r11
    1632:	91 83       	std	Z+1, r25	; 0x01
    1634:	80 83       	st	Z, r24
    1636:	44 e0       	ldi	r20, 0x04	; 4
				return PIPE_RWSTREAM_IncompleteTransfer;
    1638:	f4 2e       	mov	r15, r20
    163a:	11 c0       	rjmp	.+34     	; 0x165e <Pipe_Write_Stream_LE+0x98>
    163c:	eb d0       	rcall	.+470    	; 0x1814 <Pipe_WaitUntilReady>
			}

			if ((ErrorCode = Pipe_WaitUntilReady()))
    163e:	88 23       	and	r24, r24
    1640:	51 f0       	breq	.+20     	; 0x1656 <Pipe_Write_Stream_LE+0x90>
    1642:	0c c0       	rjmp	.+24     	; 0x165c <Pipe_Write_Stream_LE+0x96>
    1644:	f8 01       	movw	r30, r16
    1646:	81 91       	ld	r24, Z+
			  return ErrorCode;
		}
		else
		{
			TEMPLATE_TRANSFER_BYTE(DataStream);
    1648:	8f 01       	movw	r16, r30
    164a:	80 93 af 00 	sts	0x00AF, r24
			 *  \param[in] Data  Data to write into the the currently selected pipe's FIFO buffer.
			 */
			static inline void Pipe_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Write_8(const uint8_t Data)
			{
				UPDATX = Data;
    164e:	21 97       	sbiw	r28, 0x01	; 1
    1650:	08 94       	sec
			TEMPLATE_BUFFER_MOVE(DataStream, 1);
			Length--;
    1652:	a1 1c       	adc	r10, r1
			BytesInTransfer++;
    1654:	b1 1c       	adc	r11, r1
    1656:	20 97       	sbiw	r28, 0x00	; 0
    1658:	d9 f6       	brne	.-74     	; 0x1610 <Pipe_Write_Stream_LE+0x4a>
	{
		Length -= *BytesProcessed;
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
    165a:	01 c0       	rjmp	.+2      	; 0x165e <Pipe_Write_Stream_LE+0x98>
    165c:	f8 2e       	mov	r15, r24
    165e:	8f 2d       	mov	r24, r15
			{
				*BytesProcessed += BytesInTransfer;
				return PIPE_RWSTREAM_IncompleteTransfer;
			}

			if ((ErrorCode = Pipe_WaitUntilReady()))
    1660:	df 91       	pop	r29
			BytesInTransfer++;
		}
	}

	return PIPE_RWSTREAM_NoError;
}
    1662:	cf 91       	pop	r28
    1664:	1f 91       	pop	r17
    1666:	0f 91       	pop	r16
    1668:	ff 90       	pop	r15
    166a:	df 90       	pop	r13
    166c:	cf 90       	pop	r12
    166e:	bf 90       	pop	r11
    1670:	af 90       	pop	r10
    1672:	08 95       	ret

00001674 <Pipe_Read_Stream_LE>:
    1674:	af 92       	push	r10
    1676:	bf 92       	push	r11
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
    1678:	cf 92       	push	r12
    167a:	df 92       	push	r13
    167c:	ff 92       	push	r15
    167e:	0f 93       	push	r16
    1680:	1f 93       	push	r17
    1682:	cf 93       	push	r28
    1684:	df 93       	push	r29
    1686:	5c 01       	movw	r10, r24
    1688:	eb 01       	movw	r28, r22
    168a:	6a 01       	movw	r12, r20
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    168c:	80 91 aa 00 	lds	r24, 0x00AA
    1690:	8f 7c       	andi	r24, 0xCF	; 207
    1692:	80 61       	ori	r24, 0x10	; 16
    1694:	80 93 aa 00 	sts	0x00AA, r24
	uint16_t BytesInTransfer = 0;
	uint8_t  ErrorCode;

	Pipe_SetPipeToken(TEMPLATE_TOKEN);

	if ((ErrorCode = Pipe_WaitUntilReady()))
    1698:	bd d0       	rcall	.+378    	; 0x1814 <Pipe_WaitUntilReady>
    169a:	f8 2e       	mov	r15, r24
    169c:	88 23       	and	r24, r24
    169e:	b1 f5       	brne	.+108    	; 0x170c <Pipe_Read_Stream_LE+0x98>
    16a0:	c1 14       	cp	r12, r1
	  return ErrorCode;

	if (BytesProcessed != NULL)
    16a2:	d1 04       	cpc	r13, r1
    16a4:	41 f0       	breq	.+16     	; 0x16b6 <Pipe_Read_Stream_LE+0x42>
    16a6:	f6 01       	movw	r30, r12
	{
		Length -= *BytesProcessed;
    16a8:	00 81       	ld	r16, Z
    16aa:	11 81       	ldd	r17, Z+1	; 0x01
    16ac:	c0 1b       	sub	r28, r16
    16ae:	d1 0b       	sbc	r29, r17
    16b0:	0a 0d       	add	r16, r10
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
    16b2:	1b 1d       	adc	r17, r11
    16b4:	01 c0       	rjmp	.+2      	; 0x16b8 <Pipe_Read_Stream_LE+0x44>
    16b6:	85 01       	movw	r16, r10

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
    16b8:	aa 24       	eor	r10, r10
    16ba:	bb 24       	eor	r11, r11
    16bc:	23 c0       	rjmp	.+70     	; 0x1704 <Pipe_Read_Stream_LE+0x90>
    16be:	80 91 a6 00 	lds	r24, 0x00A6
			 *          on its direction.
			 */
			static inline bool Pipe_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsReadWriteAllowed(void)
			{
				return ((UPINTX & (1 << RWAL)) ? true : false);
    16c2:	85 fd       	sbrc	r24, 5
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
	{
		if (!(Pipe_IsReadWriteAllowed()))
    16c4:	16 c0       	rjmp	.+44     	; 0x16f2 <Pipe_Read_Stream_LE+0x7e>
    16c6:	80 91 a6 00 	lds	r24, 0x00A6
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
    16ca:	8e 77       	andi	r24, 0x7E	; 126
    16cc:	80 93 a6 00 	sts	0x00A6, r24
    16d0:	c1 14       	cp	r12, r1
		{
			TEMPLATE_CLEAR_PIPE();

			if (BytesProcessed != NULL)
    16d2:	d1 04       	cpc	r13, r1
    16d4:	51 f0       	breq	.+20     	; 0x16ea <Pipe_Read_Stream_LE+0x76>
    16d6:	f6 01       	movw	r30, r12
			{
				*BytesProcessed += BytesInTransfer;
    16d8:	80 81       	ld	r24, Z
    16da:	91 81       	ldd	r25, Z+1	; 0x01
    16dc:	8a 0d       	add	r24, r10
    16de:	9b 1d       	adc	r25, r11
    16e0:	91 83       	std	Z+1, r25	; 0x01
    16e2:	80 83       	st	Z, r24
    16e4:	64 e0       	ldi	r22, 0x04	; 4
				return PIPE_RWSTREAM_IncompleteTransfer;
    16e6:	f6 2e       	mov	r15, r22
    16e8:	11 c0       	rjmp	.+34     	; 0x170c <Pipe_Read_Stream_LE+0x98>
    16ea:	94 d0       	rcall	.+296    	; 0x1814 <Pipe_WaitUntilReady>
			}

			if ((ErrorCode = Pipe_WaitUntilReady()))
    16ec:	88 23       	and	r24, r24
    16ee:	51 f0       	breq	.+20     	; 0x1704 <Pipe_Read_Stream_LE+0x90>
    16f0:	0c c0       	rjmp	.+24     	; 0x170a <Pipe_Read_Stream_LE+0x96>
    16f2:	80 91 af 00 	lds	r24, 0x00AF
			 *  \return Next byte in the currently selected pipe's FIFO buffer.
			 */
			static inline uint8_t Pipe_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_Read_8(void)
			{
				return UPDATX;
    16f6:	f8 01       	movw	r30, r16
    16f8:	81 93       	st	Z+, r24
			  return ErrorCode;
		}
		else
		{
			TEMPLATE_TRANSFER_BYTE(DataStream);
    16fa:	8f 01       	movw	r16, r30
    16fc:	21 97       	sbiw	r28, 0x01	; 1
    16fe:	08 94       	sec
			TEMPLATE_BUFFER_MOVE(DataStream, 1);
			Length--;
    1700:	a1 1c       	adc	r10, r1
			BytesInTransfer++;
    1702:	b1 1c       	adc	r11, r1
    1704:	20 97       	sbiw	r28, 0x00	; 0
    1706:	d9 f6       	brne	.-74     	; 0x16be <Pipe_Read_Stream_LE+0x4a>
	{
		Length -= *BytesProcessed;
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
    1708:	01 c0       	rjmp	.+2      	; 0x170c <Pipe_Read_Stream_LE+0x98>
    170a:	f8 2e       	mov	r15, r24
    170c:	8f 2d       	mov	r24, r15
			{
				*BytesProcessed += BytesInTransfer;
				return PIPE_RWSTREAM_IncompleteTransfer;
			}

			if ((ErrorCode = Pipe_WaitUntilReady()))
    170e:	df 91       	pop	r29
			BytesInTransfer++;
		}
	}

	return PIPE_RWSTREAM_NoError;
}
    1710:	cf 91       	pop	r28
    1712:	1f 91       	pop	r17
    1714:	0f 91       	pop	r16
    1716:	ff 90       	pop	r15
    1718:	df 90       	pop	r13
    171a:	cf 90       	pop	r12
    171c:	bf 90       	pop	r11
    171e:	af 90       	pop	r10
    1720:	08 95       	ret

00001722 <Pipe_ConfigurePipe>:
bool Pipe_ConfigurePipe(const uint8_t Address,
                        const uint8_t Type,
                        const uint8_t EndpointAddress,
                        const uint16_t Size,
                        const uint8_t Banks)
{
    1722:	0f 93       	push	r16
	uint8_t Number = (Address & PIPE_EPNUM_MASK);
    1724:	58 2f       	mov	r21, r24
    1726:	5f 70       	andi	r21, 0x0F	; 15
	uint8_t Token  = (Address & PIPE_DIR_IN) ? PIPE_TOKEN_IN : PIPE_TOKEN_OUT;
    1728:	87 ff       	sbrs	r24, 7
    172a:	02 c0       	rjmp	.+4      	; 0x1730 <Pipe_ConfigurePipe+0xe>
    172c:	80 e1       	ldi	r24, 0x10	; 16
    172e:	01 c0       	rjmp	.+2      	; 0x1732 <Pipe_ConfigurePipe+0x10>
    1730:	80 e2       	ldi	r24, 0x20	; 32
	
	if (Number >= PIPE_TOTAL_PIPES)
    1732:	57 30       	cpi	r21, 0x07	; 7
    1734:	08 f0       	brcs	.+2      	; 0x1738 <Pipe_ConfigurePipe+0x16>
    1736:	57 c0       	rjmp	.+174    	; 0x17e6 <Pipe_ConfigurePipe+0xc4>
	  return false;

	if (Type == EP_TYPE_CONTROL)
    1738:	66 23       	and	r22, r22
    173a:	09 f4       	brne	.+2      	; 0x173e <Pipe_ConfigurePipe+0x1c>
	  Token = PIPE_TOKEN_SETUP;
    173c:	80 e0       	ldi	r24, 0x00	; 0

		Pipe_SelectPipe(PNum);

		if (PNum == Number)
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointAddress & PIPE_EPNUM_MASK) << PEPNUM0));
    173e:	4f 70       	andi	r20, 0x0F	; 15
    1740:	62 95       	swap	r22
    1742:	66 0f       	add	r22, r22
    1744:	66 0f       	add	r22, r22
    1746:	60 7c       	andi	r22, 0xC0	; 192
    1748:	64 2b       	or	r22, r20
    174a:	68 2b       	or	r22, r24
    174c:	45 2f       	mov	r20, r21
			UPCFG1XTemp = ((1 << ALLOC) | Banks | Pipe_BytesToEPSizeMask(Size));
    174e:	02 60       	ori	r16, 0x02	; 2
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
    1750:	40 93 a7 00 	sts	0x00A7, r20
		uint8_t UPCFG2XTemp;
		uint8_t UPIENXTemp;

		Pipe_SelectPipe(PNum);

		if (PNum == Number)
    1754:	45 17       	cp	r20, r21
    1756:	a9 f4       	brne	.+42     	; 0x1782 <Pipe_ConfigurePipe+0x60>
    1758:	04 c0       	rjmp	.+8      	; 0x1762 <Pipe_ConfigurePipe+0x40>
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while ((CheckBytes < Bytes) && (CheckBytes < PIPE_MAX_SIZE))
				{
					MaskVal++;
    175a:	7f 5f       	subi	r23, 0xFF	; 255
					CheckBytes <<= 1;
    175c:	88 0f       	add	r24, r24
    175e:	99 1f       	adc	r25, r25
    1760:	03 c0       	rjmp	.+6      	; 0x1768 <Pipe_ConfigurePipe+0x46>
    1762:	88 e0       	ldi	r24, 0x08	; 8
    1764:	90 e0       	ldi	r25, 0x00	; 0
    1766:	70 e0       	ldi	r23, 0x00	; 0
			static inline uint8_t Pipe_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while ((CheckBytes < Bytes) && (CheckBytes < PIPE_MAX_SIZE))
    1768:	82 17       	cp	r24, r18
    176a:	93 07       	cpc	r25, r19
    176c:	10 f4       	brcc	.+4      	; 0x1772 <Pipe_ConfigurePipe+0x50>
    176e:	75 30       	cpi	r23, 0x05	; 5
    1770:	a1 f7       	brne	.-24     	; 0x175a <Pipe_ConfigurePipe+0x38>
				{
					MaskVal++;
					CheckBytes <<= 1;
				}

				return (MaskVal << EPSIZE0);
    1772:	87 2f       	mov	r24, r23
    1774:	82 95       	swap	r24
    1776:	80 7f       	andi	r24, 0xF0	; 240
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointAddress & PIPE_EPNUM_MASK) << PEPNUM0));
			UPCFG1XTemp = ((1 << ALLOC) | Banks | Pipe_BytesToEPSizeMask(Size));
    1778:	80 2b       	or	r24, r16

		Pipe_SelectPipe(PNum);

		if (PNum == Number)
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointAddress & PIPE_EPNUM_MASK) << PEPNUM0));
    177a:	f6 2f       	mov	r31, r22
			UPCFG1XTemp = ((1 << ALLOC) | Banks | Pipe_BytesToEPSizeMask(Size));
			UPCFG2XTemp = 0;
			UPIENXTemp  = 0;
    177c:	70 e0       	ldi	r23, 0x00	; 0

		if (PNum == Number)
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointAddress & PIPE_EPNUM_MASK) << PEPNUM0));
			UPCFG1XTemp = ((1 << ALLOC) | Banks | Pipe_BytesToEPSizeMask(Size));
			UPCFG2XTemp = 0;
    177e:	e0 e0       	ldi	r30, 0x00	; 0
    1780:	08 c0       	rjmp	.+16     	; 0x1792 <Pipe_ConfigurePipe+0x70>
			UPIENXTemp  = 0;
		}
		else
		{
			UPCFG0XTemp = UPCFG0X;
    1782:	f0 91 aa 00 	lds	r31, 0x00AA
			UPCFG1XTemp = UPCFG1X;
    1786:	80 91 ab 00 	lds	r24, 0x00AB
			UPCFG2XTemp = UPCFG2X;
    178a:	e0 91 ad 00 	lds	r30, 0x00AD
			UPIENXTemp  = UPIENX;
    178e:	70 91 ae 00 	lds	r23, 0x00AE
		}

		if (!(UPCFG1XTemp & (1 << ALLOC)))
    1792:	81 ff       	sbrs	r24, 1
    1794:	20 c0       	rjmp	.+64     	; 0x17d6 <Pipe_ConfigurePipe+0xb4>
			 *  from an attached device.
			 */
			static inline void Pipe_DisablePipe(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_DisablePipe(void)
			{
				UPCONX &= ~(1 << PEN);
    1796:	90 91 a9 00 	lds	r25, 0x00A9
    179a:	9e 7f       	andi	r25, 0xFE	; 254
    179c:	90 93 a9 00 	sts	0x00A9, r25
		  continue;

		Pipe_DisablePipe();
		UPCFG1X &= ~(1 << ALLOC);
    17a0:	90 91 ab 00 	lds	r25, 0x00AB
    17a4:	9d 7f       	andi	r25, 0xFD	; 253
    17a6:	90 93 ab 00 	sts	0x00AB, r25
			 *  \pre The currently selected pipe must first be configured properly via \ref Pipe_ConfigurePipe().
			 */
			static inline void Pipe_EnablePipe(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_EnablePipe(void)
			{
				UPCONX |= (1 << PEN);
    17aa:	90 91 a9 00 	lds	r25, 0x00A9
    17ae:	91 60       	ori	r25, 0x01	; 1
    17b0:	90 93 a9 00 	sts	0x00A9, r25

		Pipe_EnablePipe();
		UPCFG0X = UPCFG0XTemp;
    17b4:	f0 93 aa 00 	sts	0x00AA, r31
		UPCFG1X = UPCFG1XTemp;
    17b8:	80 93 ab 00 	sts	0x00AB, r24
		UPCFG2X = UPCFG2XTemp;
    17bc:	e0 93 ad 00 	sts	0x00AD, r30
		UPIENX  = UPIENXTemp;
    17c0:	70 93 ae 00 	sts	0x00AE, r23

			/** Configures the currently selected pipe to allow for an unlimited number of IN requests. */
			static inline void Pipe_SetInfiniteINRequests(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetInfiniteINRequests(void)
			{
				UPCONX |= (1 << INMODE);
    17c4:	80 91 a9 00 	lds	r24, 0x00A9
    17c8:	80 62       	ori	r24, 0x20	; 32
    17ca:	80 93 a9 00 	sts	0x00A9, r24
			 *  \return Boolean \c true if the selected pipe is configured, \c false otherwise.
			 */
			static inline bool Pipe_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsConfigured(void)
			{
				return ((UPSTAX & (1 << CFGOK)) ? true : false);
    17ce:	80 91 ac 00 	lds	r24, 0x00AC

		Pipe_SetInfiniteINRequests();

		if (!(Pipe_IsConfigured()))
    17d2:	87 ff       	sbrs	r24, 7
    17d4:	08 c0       	rjmp	.+16     	; 0x17e6 <Pipe_ConfigurePipe+0xc4>

	Pipe_SetInfiniteINRequests();

	return Pipe_IsConfigured();
#else
	for (uint8_t PNum = Number; PNum < PIPE_TOTAL_PIPES; PNum++)
    17d6:	4f 5f       	subi	r20, 0xFF	; 255
    17d8:	47 30       	cpi	r20, 0x07	; 7
    17da:	09 f0       	breq	.+2      	; 0x17de <Pipe_ConfigurePipe+0xbc>
    17dc:	b9 cf       	rjmp	.-142    	; 0x1750 <Pipe_ConfigurePipe+0x2e>
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
    17de:	50 93 a7 00 	sts	0x00A7, r21
		if (!(Pipe_IsConfigured()))
		  return false;
	}

	Pipe_SelectPipe(Number);
	return true;
    17e2:	81 e0       	ldi	r24, 0x01	; 1
    17e4:	01 c0       	rjmp	.+2      	; 0x17e8 <Pipe_ConfigurePipe+0xc6>
		UPIENX  = UPIENXTemp;

		Pipe_SetInfiniteINRequests();

		if (!(Pipe_IsConfigured()))
		  return false;
    17e6:	80 e0       	ldi	r24, 0x00	; 0
	}

	Pipe_SelectPipe(Number);
	return true;
#endif
}
    17e8:	0f 91       	pop	r16
    17ea:	08 95       	ret

000017ec <Pipe_ClearPipes>:

void Pipe_ClearPipes(void)
{
	UPINT = 0;
    17ec:	10 92 f8 00 	sts	0x00F8, r1

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
    17f0:	80 e0       	ldi	r24, 0x00	; 0
    17f2:	80 93 a7 00 	sts	0x00A7, r24
	{
		Pipe_SelectPipe(PNum);
		UPIENX  = 0;
    17f6:	10 92 ae 00 	sts	0x00AE, r1
		UPINTX  = 0;
    17fa:	10 92 a6 00 	sts	0x00A6, r1
		UPCFG1X = 0;
    17fe:	10 92 ab 00 	sts	0x00AB, r1
			 *  from an attached device.
			 */
			static inline void Pipe_DisablePipe(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_DisablePipe(void)
			{
				UPCONX &= ~(1 << PEN);
    1802:	90 91 a9 00 	lds	r25, 0x00A9
    1806:	9e 7f       	andi	r25, 0xFE	; 254
    1808:	90 93 a9 00 	sts	0x00A9, r25

void Pipe_ClearPipes(void)
{
	UPINT = 0;

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
    180c:	8f 5f       	subi	r24, 0xFF	; 255
    180e:	87 30       	cpi	r24, 0x07	; 7
    1810:	81 f7       	brne	.-32     	; 0x17f2 <Pipe_ClearPipes+0x6>
		UPIENX  = 0;
		UPINTX  = 0;
		UPCFG1X = 0;
		Pipe_DisablePipe();
	}
}
    1812:	08 95       	ret

00001814 <Pipe_WaitUntilReady>:
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Host_GetFrameNumber(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t USB_Host_GetFrameNumber(void)
			{
				return UHFNUM;
    1814:	20 91 a2 00 	lds	r18, 0x00A2
    1818:	30 91 a3 00 	lds	r19, 0x00A3
    181c:	89 e8       	ldi	r24, 0x89	; 137
    181e:	93 e1       	ldi	r25, 0x13	; 19
    1820:	01 c0       	rjmp	.+2      	; 0x1824 <Pipe_WaitUntilReady+0x10>
    1822:	9a 01       	movw	r18, r20
			 *  \return The current pipe token, as a \c PIPE_TOKEN_* mask.
			 */
			static inline uint8_t Pipe_GetPipeToken(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetPipeToken(void)
			{
				return (UPCFG0X & (0x03 << PTOKEN0));
    1824:	40 91 aa 00 	lds	r20, 0x00AA
    1828:	40 73       	andi	r20, 0x30	; 48

	uint16_t PreviousFrameNumber = USB_Host_GetFrameNumber();

	for (;;)
	{
		if (Pipe_GetPipeToken() == PIPE_TOKEN_IN)
    182a:	40 31       	cpi	r20, 0x10	; 16
    182c:	29 f4       	brne	.+10     	; 0x1838 <Pipe_WaitUntilReady+0x24>
			 *  \return Boolean \c true if the current pipe has received an IN packet, \c false otherwise.
			 */
			static inline bool Pipe_IsINReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsINReceived(void)
			{
				return ((UPINTX & (1 << RXINI)) ? true : false);
    182e:	40 91 a6 00 	lds	r20, 0x00A6
		{
			if (Pipe_IsINReceived())
    1832:	40 ff       	sbrs	r20, 0
    1834:	05 c0       	rjmp	.+10     	; 0x1840 <Pipe_WaitUntilReady+0x2c>
    1836:	17 c0       	rjmp	.+46     	; 0x1866 <Pipe_WaitUntilReady+0x52>
			 *  \return Boolean \c true if the current pipe is ready for an OUT packet, \c false otherwise.
			 */
			static inline bool Pipe_IsOUTReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsOUTReady(void)
			{
				return ((UPINTX & (1 << TXOUTI)) ? true : false);
    1838:	40 91 a6 00 	lds	r20, 0x00A6
			  return PIPE_READYWAIT_NoError;
		}
		else
		{
			if (Pipe_IsOUTReady())
    183c:	42 fd       	sbrc	r20, 2
    183e:	13 c0       	rjmp	.+38     	; 0x1866 <Pipe_WaitUntilReady+0x52>
			 *  \return Boolean \c true if the current pipe has been stalled by the attached device, \c false otherwise.
			 */
			static inline bool Pipe_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsStalled(void)
			{
				return ((UPINTX & (1 << RXSTALLI)) ? true : false);
    1840:	40 91 a6 00 	lds	r20, 0x00A6
			  return PIPE_READYWAIT_NoError;
		}

		if (Pipe_IsStalled())
    1844:	41 fd       	sbrc	r20, 1
    1846:	11 c0       	rjmp	.+34     	; 0x186a <Pipe_WaitUntilReady+0x56>
		  return PIPE_READYWAIT_PipeStalled;
		else if (USB_HostState == HOST_STATE_Unattached)
    1848:	40 91 3c 01 	lds	r20, 0x013C
    184c:	41 30       	cpi	r20, 0x01	; 1
    184e:	79 f0       	breq	.+30     	; 0x186e <Pipe_WaitUntilReady+0x5a>
    1850:	40 91 a2 00 	lds	r20, 0x00A2
    1854:	50 91 a3 00 	lds	r21, 0x00A3
		  return PIPE_READYWAIT_DeviceDisconnected;

		uint16_t CurrentFrameNumber = USB_Host_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
    1858:	42 17       	cp	r20, r18
    185a:	53 07       	cpc	r21, r19
    185c:	19 f3       	breq	.-58     	; 0x1824 <Pipe_WaitUntilReady+0x10>
    185e:	01 97       	sbiw	r24, 0x01	; 1
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
    1860:	01 f7       	brne	.-64     	; 0x1822 <Pipe_WaitUntilReady+0xe>
			  return PIPE_READYWAIT_Timeout;
    1862:	83 e0       	ldi	r24, 0x03	; 3
    1864:	08 95       	ret
			  return PIPE_READYWAIT_NoError;
		}
		else
		{
			if (Pipe_IsOUTReady())
			  return PIPE_READYWAIT_NoError;
    1866:	80 e0       	ldi	r24, 0x00	; 0
    1868:	08 95       	ret
		}

		if (Pipe_IsStalled())
		  return PIPE_READYWAIT_PipeStalled;
    186a:	81 e0       	ldi	r24, 0x01	; 1
    186c:	08 95       	ret
		else if (USB_HostState == HOST_STATE_Unattached)
		  return PIPE_READYWAIT_DeviceDisconnected;
    186e:	82 e0       	ldi	r24, 0x02	; 2

			if (!(TimeoutMSRem--))
			  return PIPE_READYWAIT_Timeout;
		}
	}
}
    1870:	08 95       	ret

00001872 <USB_Disable>:
	USB_ResetInterface();
}

void USB_Disable(void)
{
	USB_INT_DisableAllInterrupts();
    1872:	75 d0       	rcall	.+234    	; 0x195e <USB_INT_DisableAllInterrupts>
    1874:	7c d0       	rcall	.+248    	; 0x196e <USB_INT_ClearAllInterrupts>
	USB_INT_ClearAllInterrupts();
    1876:	e0 ee       	ldi	r30, 0xE0	; 224
    1878:	f0 e0       	ldi	r31, 0x00	; 0
			 *  enumerating the device once attached until \ref USB_Attach() is called.
			 */
			static inline void USB_Detach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Detach(void)
			{
				UDCON  |=  (1 << DETACH);
    187a:	80 81       	ld	r24, Z
    187c:	81 60       	ori	r24, 0x01	; 1
    187e:	80 83       	st	Z, r24
    1880:	e8 ed       	ldi	r30, 0xD8	; 216
    1882:	f0 e0       	ldi	r31, 0x00	; 0
			}

			static inline void USB_Controller_Disable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Disable(void)
			{
				USBCON &= ~(1 << USBE);
    1884:	80 81       	ld	r24, Z
    1886:	8f 77       	andi	r24, 0x7F	; 127
    1888:	80 83       	st	Z, r24
    188a:	19 bc       	out	0x29, r1	; 41
    188c:	a7 ed       	ldi	r26, 0xD7	; 215
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    188e:	b0 e0       	ldi	r27, 0x00	; 0

			static inline void USB_REG_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_Off(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON &= ~(1 << UVREGE);
    1890:	8c 91       	ld	r24, X
    1892:	8e 7f       	andi	r24, 0xFE	; 254
    1894:	8c 93       	st	X, r24
    1896:	80 81       	ld	r24, Z
    1898:	8f 7e       	andi	r24, 0xEF	; 239
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON &= ~(1 << OTGPADE);
    189a:	80 83       	st	Z, r24
    189c:	10 92 33 01 	sts	0x0133, r1

	#if defined(USB_CAN_BE_BOTH)
	USB_CurrentMode = USB_MODE_None;
	#endif

	USB_IsInitialized = false;
    18a0:	08 95       	ret

000018a2 <USB_ResetInterface>:
    18a2:	5d d0       	rcall	.+186    	; 0x195e <USB_INT_DisableAllInterrupts>
}
    18a4:	64 d0       	rcall	.+200    	; 0x196e <USB_INT_ClearAllInterrupts>
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
	USB_INT_ClearAllInterrupts();
    18a6:	80 91 d8 00 	lds	r24, 0x00D8
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
    18aa:	8f 77       	andi	r24, 0x7F	; 127
    18ac:	80 93 d8 00 	sts	0x00D8, r24
    18b0:	80 91 d8 00 	lds	r24, 0x00D8
				USBCON |=  (1 << USBE);
    18b4:	80 68       	ori	r24, 0x80	; 128
    18b6:	80 93 d8 00 	sts	0x00D8, r24
    18ba:	80 91 d8 00 	lds	r24, 0x00D8
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
    18be:	8f 7d       	andi	r24, 0xDF	; 223
    18c0:	80 93 d8 00 	sts	0x00D8, r24
    18c4:	80 91 d7 00 	lds	r24, 0x00D7
		#endif
	}
	else if (USB_CurrentMode == USB_MODE_Host)
	{
		#if defined(USB_CAN_BE_HOST)
		UHWCON &= ~(1 << UIMOD);
    18c8:	8f 77       	andi	r24, 0x7F	; 127
    18ca:	80 93 d7 00 	sts	0x00D7, r24
    18ce:	8c e0       	ldi	r24, 0x0C	; 12
    18d0:	89 bd       	out	0x29, r24	; 41

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
    18d2:	8e e0       	ldi	r24, 0x0E	; 14
    18d4:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    18d6:	09 b4       	in	r0, 0x29	; 41
    18d8:	00 fe       	sbrs	r0, 0

		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			#if defined(USB_CAN_BE_HOST)
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
    18da:	fd cf       	rjmp	.-6      	; 0x18d6 <USB_ResetInterface+0x34>
    18dc:	81 e0       	ldi	r24, 0x01	; 1
    18de:	80 93 3c 01 	sts	0x013C, r24
#endif

#if defined(USB_CAN_BE_HOST)
static void USB_Init_Host(void)
{
	USB_HostState                = HOST_STATE_Unattached;
    18e2:	10 92 32 01 	sts	0x0132, r1
	USB_Host_ConfigurationNumber = 0;
    18e6:	80 e4       	ldi	r24, 0x40	; 64
    18e8:	80 93 24 01 	sts	0x0124, r24
	USB_Host_ControlPipeSize     = PIPE_CONTROLPIPE_DEFAULT_SIZE;
    18ec:	80 91 d8 00 	lds	r24, 0x00D8
	#if !defined(__DOXYGEN__)
		/* Macros: */
			static inline void USB_Host_HostMode_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_HostMode_On(void)
			{
				USBCON |=  (1 << HOST);
    18f0:	80 64       	ori	r24, 0x40	; 64
    18f2:	80 93 d8 00 	sts	0x00D8, r24
    18f6:	80 91 dd 00 	lds	r24, 0x00DD
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
    18fa:	81 60       	ori	r24, 0x01	; 1
    18fc:	80 93 dd 00 	sts	0x00DD, r24
    1900:	80 91 dd 00 	lds	r24, 0x00DD
			}

			static inline void USB_Host_VBUS_Manual_Enable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Manual_Enable(void)
			{
				OTGCON |=  (1 << VBUSHWC);
    1904:	84 60       	ori	r24, 0x04	; 4
    1906:	80 93 dd 00 	sts	0x00DD, r24
    190a:	80 91 d7 00 	lds	r24, 0x00D7
				UHWCON &= ~(1 << UVCONE);
    190e:	8f 7e       	andi	r24, 0xEF	; 239
    1910:	80 93 d7 00 	sts	0x00D7, r24
    1914:	6f 9a       	sbi	0x0d, 7	; 13
    1916:	77 9a       	sbi	0x0e, 7	; 14

				DDRE   |=  (1 << 7);
    1918:	80 91 de 00 	lds	r24, 0x00DE
						break;
					case USB_INT_VBERRI:
						OTGIEN |= (1 << VBERRE);
						break;
					case USB_INT_SRPI:
						OTGIEN |= (1 << SRPE);
    191c:	81 60       	ori	r24, 0x01	; 1
    191e:	80 93 de 00 	sts	0x00DE, r24
    1922:	80 91 de 00 	lds	r24, 0x00DE
						break;
					case USB_INT_RSTI:
						UHIEN  |= (1 << RSTE);
						break;
					case USB_INT_BCERRI:
						OTGIEN |= (1 << BCERRE);
    1926:	84 60       	ori	r24, 0x04	; 4
    1928:	80 93 de 00 	sts	0x00DE, r24
    192c:	80 91 e0 00 	lds	r24, 0x00E0
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
    1930:	8e 7f       	andi	r24, 0xFE	; 254
    1932:	80 93 e0 00 	sts	0x00E0, r24
    1936:	80 91 d8 00 	lds	r24, 0x00D8

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON |=  (1 << OTGPADE);
    193a:	80 61       	ori	r24, 0x10	; 16
    193c:	80 93 d8 00 	sts	0x00D8, r24
    1940:	08 95       	ret

00001942 <USB_Init>:
    1942:	e8 ed       	ldi	r30, 0xD8	; 216
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
    1944:	f0 e0       	ldi	r31, 0x00	; 0
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON &= ~(1 << OTGPADE);
    1946:	80 81       	ld	r24, Z
    1948:	8f 7e       	andi	r24, 0xEF	; 239
    194a:	80 83       	st	Z, r24

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON |=  (1 << UVREGE);
    194c:	e7 ed       	ldi	r30, 0xD7	; 215
    194e:	f0 e0       	ldi	r31, 0x00	; 0
    1950:	80 81       	ld	r24, Z
    1952:	81 60       	ori	r24, 0x01	; 1
    1954:	80 83       	st	Z, r24
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
    1956:	81 e0       	ldi	r24, 0x01	; 1
    1958:	80 93 33 01 	sts	0x0133, r24

	USB_ResetInterface();
    195c:	a2 cf       	rjmp	.-188    	; 0x18a2 <USB_ResetInterface>

0000195e <USB_INT_DisableAllInterrupts>:
#include "../USBInterrupt.h"

void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
    195e:	e8 ed       	ldi	r30, 0xD8	; 216
    1960:	f0 e0       	ldi	r31, 0x00	; 0
    1962:	80 81       	ld	r24, Z
    1964:	8c 7f       	andi	r24, 0xFC	; 252
    1966:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_BOTH)
	OTGIEN  = 0;
	#endif

	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
    1968:	10 92 a0 00 	sts	0x00A0, r1
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
	#endif
}
    196c:	08 95       	ret

0000196e <USB_INT_ClearAllInterrupts>:

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
    196e:	10 92 da 00 	sts	0x00DA, r1
	#if defined(USB_CAN_BE_BOTH)
	OTGINT = 0;
	#endif

	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
    1972:	10 92 9f 00 	sts	0x009F, r1
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
	#endif
}
    1976:	08 95       	ret

00001978 <__vector_10>:

ISR(USB_GEN_vect, ISR_BLOCK)
{
    1978:	1f 92       	push	r1
    197a:	0f 92       	push	r0
    197c:	0f b6       	in	r0, 0x3f	; 63
    197e:	0f 92       	push	r0
    1980:	0b b6       	in	r0, 0x3b	; 59
    1982:	0f 92       	push	r0
    1984:	11 24       	eor	r1, r1
    1986:	2f 93       	push	r18
    1988:	3f 93       	push	r19
    198a:	4f 93       	push	r20
    198c:	5f 93       	push	r21
    198e:	6f 93       	push	r22
    1990:	7f 93       	push	r23
    1992:	8f 93       	push	r24
    1994:	9f 93       	push	r25
    1996:	af 93       	push	r26
    1998:	bf 93       	push	r27
    199a:	ef 93       	push	r30
    199c:	ff 93       	push	r31
					case USB_INT_RXSTPI:
						return (UEINTX & (1 << RXSTPI));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
    199e:	80 91 9f 00 	lds	r24, 0x009F
	}
	#endif

	#if defined(USB_CAN_BE_HOST)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_HSOFI) && USB_INT_IsEnabled(USB_INT_HSOFI))
    19a2:	85 ff       	sbrs	r24, 5
    19a4:	0a c0       	rjmp	.+20     	; 0x19ba <__vector_10+0x42>
					case USB_INT_RXSTPI:
						return (UEIENX & (1 << RXSTPE));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
    19a6:	80 91 a0 00 	lds	r24, 0x00A0
    19aa:	85 ff       	sbrs	r24, 5
    19ac:	06 c0       	rjmp	.+12     	; 0x19ba <__vector_10+0x42>
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
    19ae:	80 91 9f 00 	lds	r24, 0x009F
    19b2:	8f 7d       	andi	r24, 0xDF	; 223
    19b4:	80 93 9f 00 	sts	0x009F, r24
	{
		USB_INT_Clear(USB_INT_HSOFI);

		EVENT_USB_Host_StartOfFrame();
    19b8:	16 d1       	rcall	.+556    	; 0x1be6 <USB_Event_Stub>
    19ba:	80 91 9f 00 	lds	r24, 0x009F
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
					case USB_INT_DCONNI:
						return (UHINT  & (1 << DCONNI));
					case USB_INT_DDISCI:
						return (UHINT  & (1 << DDISCI));
    19be:	81 ff       	sbrs	r24, 1
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_DDISCI) && USB_INT_IsEnabled(USB_INT_DDISCI))
    19c0:	16 c0       	rjmp	.+44     	; 0x19ee <__vector_10+0x76>
    19c2:	80 91 a0 00 	lds	r24, 0x00A0
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
					case USB_INT_DCONNI:
						return (UHIEN  & (1 << DCONNE));
					case USB_INT_DDISCI:
						return (UHIEN  & (1 << DDISCE));
    19c6:	81 ff       	sbrs	r24, 1
    19c8:	12 c0       	rjmp	.+36     	; 0x19ee <__vector_10+0x76>
    19ca:	80 91 9f 00 	lds	r24, 0x009F
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
						break;
					case USB_INT_DDISCI:
						UHINT  &= ~(1 << DDISCI);
    19ce:	8d 7f       	andi	r24, 0xFD	; 253
    19d0:	80 93 9f 00 	sts	0x009F, r24
    19d4:	80 91 9f 00 	lds	r24, 0x009F
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
    19d8:	8e 7f       	andi	r24, 0xFE	; 254
    19da:	80 93 9f 00 	sts	0x009F, r24
    19de:	80 91 a0 00 	lds	r24, 0x00A0
						break;
					case USB_INT_DCONNI:
						UHIEN  &= ~(1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  &= ~(1 << DDISCE);
    19e2:	8d 7f       	andi	r24, 0xFD	; 253
    19e4:	80 93 a0 00 	sts	0x00A0, r24
    19e8:	0e 94 83 02 	call	0x506	; 0x506 <EVENT_USB_Host_DeviceUnattached>
	{
		USB_INT_Clear(USB_INT_DDISCI);
		USB_INT_Clear(USB_INT_DCONNI);
		USB_INT_Disable(USB_INT_DDISCI);

		EVENT_USB_Host_DeviceUnattached();
    19ec:	5a df       	rcall	.-332    	; 0x18a2 <USB_ResetInterface>

		USB_ResetInterface();
    19ee:	80 91 df 00 	lds	r24, 0x00DF
					case USB_INT_RSTI:
						return (UHINT  & (1 << RSTI));
					case USB_INT_BCERRI:
						return (OTGINT & (1 << BCERRI));
					case USB_INT_VBERRI:
						return (OTGINT & (1 << VBERRI));
    19f2:	81 ff       	sbrs	r24, 1
    19f4:	17 c0       	rjmp	.+46     	; 0x1a24 <__vector_10+0xac>
	}

	if (USB_INT_HasOccurred(USB_INT_VBERRI) && USB_INT_IsEnabled(USB_INT_VBERRI))
    19f6:	80 91 de 00 	lds	r24, 0x00DE
					case USB_INT_RSTI:
						return (UHIEN  & (1 << RSTE));
					case USB_INT_BCERRI:
						return (OTGIEN & (1 << BCERRE));
					case USB_INT_VBERRI:
						return (OTGIEN & (1 << VBERRE));
    19fa:	81 ff       	sbrs	r24, 1
    19fc:	13 c0       	rjmp	.+38     	; 0x1a24 <__vector_10+0xac>
    19fe:	80 91 df 00 	lds	r24, 0x00DF
						break;
					case USB_INT_BCERRI:
						OTGINT &= ~(1 << BCERRI);
						break;
					case USB_INT_VBERRI:
						OTGINT &= ~(1 << VBERRI);
    1a02:	8d 7f       	andi	r24, 0xFD	; 253
    1a04:	80 93 df 00 	sts	0x00DF, r24
    1a08:	77 98       	cbi	0x0e, 7	; 14
    1a0a:	80 91 dd 00 	lds	r24, 0x00DD
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
    1a0e:	81 60       	ori	r24, 0x01	; 1
    1a10:	80 93 dd 00 	sts	0x00DD, r24
    1a14:	80 e0       	ldi	r24, 0x00	; 0
    1a16:	0e 94 ce 02 	call	0x59c	; 0x59c <EVENT_USB_Host_HostError>
		USB_INT_Clear(USB_INT_VBERRI);

		USB_Host_VBUS_Manual_Off();
		USB_Host_VBUS_Auto_Off();

		EVENT_USB_Host_HostError(HOST_ERROR_VBusVoltageDip);
    1a1a:	0e 94 83 02 	call	0x506	; 0x506 <EVENT_USB_Host_DeviceUnattached>
		EVENT_USB_Host_DeviceUnattached();
    1a1e:	81 e0       	ldi	r24, 0x01	; 1
    1a20:	80 93 3c 01 	sts	0x013C, r24

		USB_HostState = HOST_STATE_Unattached;
    1a24:	80 91 df 00 	lds	r24, 0x00DF
					case USB_INT_BCERRI:
						return (OTGINT & (1 << BCERRI));
					case USB_INT_VBERRI:
						return (OTGINT & (1 << VBERRI));
					case USB_INT_SRPI:
						return (OTGINT & (1 << SRPI));
    1a28:	80 ff       	sbrs	r24, 0
    1a2a:	18 c0       	rjmp	.+48     	; 0x1a5c <__vector_10+0xe4>
	}

	if (USB_INT_HasOccurred(USB_INT_SRPI) && USB_INT_IsEnabled(USB_INT_SRPI))
    1a2c:	80 91 de 00 	lds	r24, 0x00DE
					case USB_INT_BCERRI:
						return (OTGIEN & (1 << BCERRE));
					case USB_INT_VBERRI:
						return (OTGIEN & (1 << VBERRE));
					case USB_INT_SRPI:
						return (OTGIEN & (1 << SRPE));
    1a30:	80 ff       	sbrs	r24, 0
    1a32:	14 c0       	rjmp	.+40     	; 0x1a5c <__vector_10+0xe4>
    1a34:	80 91 df 00 	lds	r24, 0x00DF
						break;
					case USB_INT_VBERRI:
						OTGINT &= ~(1 << VBERRI);
						break;
					case USB_INT_SRPI:
						OTGINT &= ~(1 << SRPI);
    1a38:	8e 7f       	andi	r24, 0xFE	; 254
    1a3a:	80 93 df 00 	sts	0x00DF, r24
    1a3e:	80 91 de 00 	lds	r24, 0x00DE
						break;
					case USB_INT_VBERRI:
						OTGIEN &= ~(1 << VBERRE);
						break;
					case USB_INT_SRPI:
						OTGIEN &= ~(1 << SRPE);
    1a42:	8e 7f       	andi	r24, 0xFE	; 254
    1a44:	80 93 de 00 	sts	0x00DE, r24
    1a48:	0e 94 7d 02 	call	0x4fa	; 0x4fa <EVENT_USB_Host_DeviceAttached>
	{
		USB_INT_Clear(USB_INT_SRPI);
		USB_INT_Disable(USB_INT_SRPI);

		EVENT_USB_Host_DeviceAttached();
    1a4c:	80 91 a0 00 	lds	r24, 0x00A0
						break;
					case USB_INT_DCONNI:
						UHIEN  |= (1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  |= (1 << DDISCE);
    1a50:	82 60       	ori	r24, 0x02	; 2
    1a52:	80 93 a0 00 	sts	0x00A0, r24
    1a56:	82 e0       	ldi	r24, 0x02	; 2
    1a58:	80 93 3c 01 	sts	0x013C, r24

		USB_INT_Enable(USB_INT_DDISCI);

		USB_HostState = HOST_STATE_Powered;
    1a5c:	80 91 df 00 	lds	r24, 0x00DF
					case USB_INT_DDISCI:
						return (UHINT  & (1 << DDISCI));
					case USB_INT_RSTI:
						return (UHINT  & (1 << RSTI));
					case USB_INT_BCERRI:
						return (OTGINT & (1 << BCERRI));
    1a60:	82 ff       	sbrs	r24, 2
    1a62:	10 c0       	rjmp	.+32     	; 0x1a84 <__vector_10+0x10c>
	}

	if (USB_INT_HasOccurred(USB_INT_BCERRI) && USB_INT_IsEnabled(USB_INT_BCERRI))
    1a64:	80 91 de 00 	lds	r24, 0x00DE
					case USB_INT_DDISCI:
						return (UHIEN  & (1 << DDISCE));
					case USB_INT_RSTI:
						return (UHIEN  & (1 << RSTE));
					case USB_INT_BCERRI:
						return (OTGIEN & (1 << BCERRE));
    1a68:	82 ff       	sbrs	r24, 2
    1a6a:	0c c0       	rjmp	.+24     	; 0x1a84 <__vector_10+0x10c>
    1a6c:	80 91 df 00 	lds	r24, 0x00DF
						break;
					case USB_INT_RSTI:
						UHINT  &= ~(1 << RSTI);
						break;
					case USB_INT_BCERRI:
						OTGINT &= ~(1 << BCERRI);
    1a70:	8b 7f       	andi	r24, 0xFB	; 251
    1a72:	80 93 df 00 	sts	0x00DF, r24
    1a76:	82 e0       	ldi	r24, 0x02	; 2
    1a78:	60 e0       	ldi	r22, 0x00	; 0
	{
		USB_INT_Clear(USB_INT_BCERRI);

		EVENT_USB_Host_DeviceEnumerationFailed(HOST_ENUMERROR_NoDeviceDetected, 0);
    1a7a:	0e 94 ef 02 	call	0x5de	; 0x5de <EVENT_USB_Host_DeviceEnumerationFailed>
    1a7e:	0e 94 83 02 	call	0x506	; 0x506 <EVENT_USB_Host_DeviceUnattached>
		EVENT_USB_Host_DeviceUnattached();
    1a82:	0f df       	rcall	.-482    	; 0x18a2 <USB_ResetInterface>
    1a84:	ff 91       	pop	r31

		USB_ResetInterface();
    1a86:	ef 91       	pop	r30
    1a88:	bf 91       	pop	r27
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
    1a8a:	af 91       	pop	r26
    1a8c:	9f 91       	pop	r25
    1a8e:	8f 91       	pop	r24
    1a90:	7f 91       	pop	r23
    1a92:	6f 91       	pop	r22
    1a94:	5f 91       	pop	r21
    1a96:	4f 91       	pop	r20
    1a98:	3f 91       	pop	r19
    1a9a:	2f 91       	pop	r18
    1a9c:	0f 90       	pop	r0
    1a9e:	0b be       	out	0x3b, r0	; 59
    1aa0:	0f 90       	pop	r0
    1aa2:	0f be       	out	0x3f, r0	; 63
    1aa4:	0f 90       	pop	r0
    1aa6:	1f 90       	pop	r1
    1aa8:	18 95       	reti

00001aaa <USB_Host_GetDeviceConfigDescriptor>:
#if defined(USB_CAN_BE_HOST)
uint8_t USB_Host_GetDeviceConfigDescriptor(const uint8_t ConfigNumber,
                                           uint16_t* const ConfigSizePtr,
                                           void* const BufferPtr,
                                           const uint16_t BufferSize)
{
    1aaa:	cf 92       	push	r12
    1aac:	df 92       	push	r13
    1aae:	ef 92       	push	r14
    1ab0:	ff 92       	push	r15
    1ab2:	0f 93       	push	r16
    1ab4:	1f 93       	push	r17
    1ab6:	cf 93       	push	r28
    1ab8:	df 93       	push	r29
    1aba:	cd b7       	in	r28, 0x3d	; 61
    1abc:	de b7       	in	r29, 0x3e	; 62
    1abe:	29 97       	sbiw	r28, 0x09	; 9
    1ac0:	0f b6       	in	r0, 0x3f	; 63
    1ac2:	f8 94       	cli
    1ac4:	de bf       	out	0x3e, r29	; 62
    1ac6:	0f be       	out	0x3f, r0	; 63
    1ac8:	cd bf       	out	0x3d, r28	; 61
    1aca:	6b 01       	movw	r12, r22
    1acc:	8a 01       	movw	r16, r20
    1ace:	79 01       	movw	r14, r18
	uint8_t ErrorCode;
	uint8_t ConfigHeader[sizeof(USB_Descriptor_Configuration_Header_t)];

	USB_ControlRequest = (USB_Request_Header_t)
    1ad0:	90 e8       	ldi	r25, 0x80	; 128
    1ad2:	90 93 34 01 	sts	0x0134, r25
    1ad6:	96 e0       	ldi	r25, 0x06	; 6
    1ad8:	90 93 35 01 	sts	0x0135, r25
		{
			.bmRequestType = (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE),
			.bRequest      = REQ_GetDescriptor,
			.wValue        = ((DTYPE_Configuration << 8) | (ConfigNumber - 1)),
    1adc:	90 e0       	ldi	r25, 0x00	; 0
    1ade:	01 97       	sbiw	r24, 0x01	; 1
    1ae0:	92 60       	ori	r25, 0x02	; 2
                                           const uint16_t BufferSize)
{
	uint8_t ErrorCode;
	uint8_t ConfigHeader[sizeof(USB_Descriptor_Configuration_Header_t)];

	USB_ControlRequest = (USB_Request_Header_t)
    1ae2:	90 93 37 01 	sts	0x0137, r25
    1ae6:	80 93 36 01 	sts	0x0136, r24
    1aea:	10 92 39 01 	sts	0x0139, r1
    1aee:	10 92 38 01 	sts	0x0138, r1
    1af2:	89 e0       	ldi	r24, 0x09	; 9
    1af4:	90 e0       	ldi	r25, 0x00	; 0
    1af6:	90 93 3b 01 	sts	0x013B, r25
    1afa:	80 93 3a 01 	sts	0x013A, r24
    1afe:	10 92 a7 00 	sts	0x00A7, r1
			.wLength       = sizeof(USB_Descriptor_Configuration_Header_t),
		};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	if ((ErrorCode = USB_Host_SendControlRequest(ConfigHeader)) != HOST_SENDCONTROL_Successful)
    1b02:	ce 01       	movw	r24, r28
    1b04:	01 96       	adiw	r24, 0x01	; 1
    1b06:	98 d0       	rcall	.+304    	; 0x1c38 <USB_Host_SendControlRequest>
    1b08:	88 23       	and	r24, r24
    1b0a:	b9 f4       	brne	.+46     	; 0x1b3a <USB_Host_GetDeviceConfigDescriptor+0x90>
    1b0c:	8b 81       	ldd	r24, Y+3	; 0x03
	  return ErrorCode;

	*ConfigSizePtr = le16_to_cpu(DESCRIPTOR_PCAST(ConfigHeader, USB_Descriptor_Configuration_Header_t)->TotalConfigurationSize);
    1b0e:	9c 81       	ldd	r25, Y+4	; 0x04
    1b10:	f6 01       	movw	r30, r12
    1b12:	91 83       	std	Z+1, r25	; 0x01
    1b14:	80 83       	st	Z, r24
    1b16:	e8 16       	cp	r14, r24

	if (*ConfigSizePtr > BufferSize)
    1b18:	f9 06       	cpc	r15, r25
    1b1a:	70 f0       	brcs	.+28     	; 0x1b38 <USB_Host_GetDeviceConfigDescriptor+0x8e>
    1b1c:	90 93 3b 01 	sts	0x013B, r25
	  return HOST_GETCONFIG_BuffOverflow;

	USB_ControlRequest.wLength = *ConfigSizePtr;
    1b20:	80 93 3a 01 	sts	0x013A, r24
    1b24:	c8 01       	movw	r24, r16

	if ((ErrorCode = USB_Host_SendControlRequest(BufferPtr)) != HOST_SENDCONTROL_Successful)
    1b26:	88 d0       	rcall	.+272    	; 0x1c38 <USB_Host_SendControlRequest>
    1b28:	88 23       	and	r24, r24
    1b2a:	39 f4       	brne	.+14     	; 0x1b3a <USB_Host_GetDeviceConfigDescriptor+0x90>
    1b2c:	f8 01       	movw	r30, r16
    1b2e:	91 81       	ldd	r25, Z+1	; 0x01
	  return ErrorCode;

	if (DESCRIPTOR_TYPE(BufferPtr) != DTYPE_Configuration)
    1b30:	92 30       	cpi	r25, 0x02	; 2
    1b32:	19 f0       	breq	.+6      	; 0x1b3a <USB_Host_GetDeviceConfigDescriptor+0x90>
    1b34:	86 e0       	ldi	r24, 0x06	; 6
    1b36:	01 c0       	rjmp	.+2      	; 0x1b3a <USB_Host_GetDeviceConfigDescriptor+0x90>
	  return HOST_GETCONFIG_InvalidData;
    1b38:	85 e0       	ldi	r24, 0x05	; 5
    1b3a:	29 96       	adiw	r28, 0x09	; 9
	  return ErrorCode;

	*ConfigSizePtr = le16_to_cpu(DESCRIPTOR_PCAST(ConfigHeader, USB_Descriptor_Configuration_Header_t)->TotalConfigurationSize);

	if (*ConfigSizePtr > BufferSize)
	  return HOST_GETCONFIG_BuffOverflow;
    1b3c:	0f b6       	in	r0, 0x3f	; 63

	if (DESCRIPTOR_TYPE(BufferPtr) != DTYPE_Configuration)
	  return HOST_GETCONFIG_InvalidData;

	return HOST_GETCONFIG_Successful;
}
    1b3e:	f8 94       	cli
    1b40:	de bf       	out	0x3e, r29	; 62
    1b42:	0f be       	out	0x3f, r0	; 63
    1b44:	cd bf       	out	0x3d, r28	; 61
    1b46:	df 91       	pop	r29
    1b48:	cf 91       	pop	r28
    1b4a:	1f 91       	pop	r17
    1b4c:	0f 91       	pop	r16
    1b4e:	ff 90       	pop	r15
    1b50:	ef 90       	pop	r14
    1b52:	df 90       	pop	r13
    1b54:	cf 90       	pop	r12
    1b56:	08 95       	ret

00001b58 <USB_GetNextDescriptorComp>:
    1b58:	af 92       	push	r10
    1b5a:	bf 92       	push	r11
}

uint8_t USB_GetNextDescriptorComp(uint16_t* const BytesRem,
                                  void** const CurrConfigLoc,
                                  ConfigComparatorPtr_t const ComparatorRoutine)
{
    1b5c:	cf 92       	push	r12
    1b5e:	df 92       	push	r13
    1b60:	ef 92       	push	r14
    1b62:	ff 92       	push	r15
    1b64:	0f 93       	push	r16
    1b66:	1f 93       	push	r17
    1b68:	cf 93       	push	r28
    1b6a:	df 93       	push	r29
    1b6c:	7c 01       	movw	r14, r24
    1b6e:	8b 01       	movw	r16, r22
    1b70:	5a 01       	movw	r10, r20
	uint8_t ErrorCode;

	while (*BytesRem)
    1b72:	28 c0       	rjmp	.+80     	; 0x1bc4 <USB_GetNextDescriptorComp+0x6c>
	{
		uint8_t* PrevDescLoc  = *CurrConfigLoc;
    1b74:	f8 01       	movw	r30, r16
    1b76:	c0 80       	ld	r12, Z
    1b78:	d1 80       	ldd	r13, Z+1	; 0x01
			static inline void USB_GetNextDescriptor(uint16_t* const BytesRem,
			                                         void** CurrConfigLoc) ATTR_NON_NULL_PTR_ARG(1) ATTR_NON_NULL_PTR_ARG(2);
			static inline void USB_GetNextDescriptor(uint16_t* const BytesRem,
			                                         void** CurrConfigLoc)
			{
				uint16_t CurrDescriptorSize = DESCRIPTOR_CAST(*CurrConfigLoc, USB_Descriptor_Header_t).Size;
    1b7a:	f6 01       	movw	r30, r12
    1b7c:	80 81       	ld	r24, Z
    1b7e:	90 e0       	ldi	r25, 0x00	; 0
    1b80:	9e 01       	movw	r18, r28
    1b82:	8c 17       	cp	r24, r28
    1b84:	9d 07       	cpc	r25, r29
    1b86:	08 f4       	brcc	.+2      	; 0x1b8a <USB_GetNextDescriptorComp+0x32>
    1b88:	9c 01       	movw	r18, r24

				if (*BytesRem < CurrDescriptorSize)
				  CurrDescriptorSize = *BytesRem;

				*CurrConfigLoc  = (void*)((uintptr_t)*CurrConfigLoc + CurrDescriptorSize);
    1b8a:	c6 01       	movw	r24, r12
    1b8c:	82 0f       	add	r24, r18
    1b8e:	93 1f       	adc	r25, r19
    1b90:	f8 01       	movw	r30, r16
    1b92:	91 83       	std	Z+1, r25	; 0x01
    1b94:	80 83       	st	Z, r24
				*BytesRem      -= CurrDescriptorSize;
    1b96:	f7 01       	movw	r30, r14
    1b98:	80 81       	ld	r24, Z
    1b9a:	91 81       	ldd	r25, Z+1	; 0x01
    1b9c:	82 1b       	sub	r24, r18
    1b9e:	93 0b       	sbc	r25, r19
    1ba0:	91 83       	std	Z+1, r25	; 0x01
    1ba2:	80 83       	st	Z, r24
		uint16_t PrevBytesRem = *BytesRem;

		USB_GetNextDescriptor(BytesRem, CurrConfigLoc);

		if ((ErrorCode = ComparatorRoutine(*CurrConfigLoc)) != DESCRIPTOR_SEARCH_NotFound)
    1ba4:	f8 01       	movw	r30, r16
    1ba6:	80 81       	ld	r24, Z
    1ba8:	91 81       	ldd	r25, Z+1	; 0x01
    1baa:	f5 01       	movw	r30, r10
    1bac:	09 95       	icall
    1bae:	82 30       	cpi	r24, 0x02	; 2
    1bb0:	49 f0       	breq	.+18     	; 0x1bc4 <USB_GetNextDescriptorComp+0x6c>
		{
			if (ErrorCode == DESCRIPTOR_SEARCH_Fail)
    1bb2:	81 30       	cpi	r24, 0x01	; 1
    1bb4:	69 f4       	brne	.+26     	; 0x1bd0 <USB_GetNextDescriptorComp+0x78>
			{
				*CurrConfigLoc = PrevDescLoc;
    1bb6:	f8 01       	movw	r30, r16
    1bb8:	d1 82       	std	Z+1, r13	; 0x01
    1bba:	c0 82       	st	Z, r12
				*BytesRem      = PrevBytesRem;
    1bbc:	f7 01       	movw	r30, r14
    1bbe:	d1 83       	std	Z+1, r29	; 0x01
    1bc0:	c0 83       	st	Z, r28
    1bc2:	06 c0       	rjmp	.+12     	; 0x1bd0 <USB_GetNextDescriptorComp+0x78>
                                  void** const CurrConfigLoc,
                                  ConfigComparatorPtr_t const ComparatorRoutine)
{
	uint8_t ErrorCode;

	while (*BytesRem)
    1bc4:	f7 01       	movw	r30, r14
    1bc6:	c0 81       	ld	r28, Z
    1bc8:	d1 81       	ldd	r29, Z+1	; 0x01
    1bca:	20 97       	sbiw	r28, 0x00	; 0
    1bcc:	99 f6       	brne	.-90     	; 0x1b74 <USB_GetNextDescriptorComp+0x1c>

			return ErrorCode;
		}
	}

	return DESCRIPTOR_SEARCH_COMP_EndOfDescriptor;
    1bce:	82 e0       	ldi	r24, 0x02	; 2
}
    1bd0:	df 91       	pop	r29
    1bd2:	cf 91       	pop	r28
    1bd4:	1f 91       	pop	r17
    1bd6:	0f 91       	pop	r16
    1bd8:	ff 90       	pop	r15
    1bda:	ef 90       	pop	r14
    1bdc:	df 90       	pop	r13
    1bde:	cf 90       	pop	r12
    1be0:	bf 90       	pop	r11
    1be2:	af 90       	pop	r10
    1be4:	08 95       	ret

00001be6 <USB_Event_Stub>:
#include "Events.h"

void USB_Event_Stub(void)
{

}
    1be6:	08 95       	ret

00001be8 <USB_Host_WaitForIOS>:
	
	return ReturnStatus;
}

static uint8_t USB_Host_WaitForIOS(const uint8_t WaitType)
{
    1be8:	1f 93       	push	r17
    1bea:	cf 93       	push	r28
    1bec:	df 93       	push	r29
    1bee:	18 2f       	mov	r17, r24
	uint8_t  TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#else
	uint16_t TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#endif

	while (!(((WaitType == USB_HOST_WAITFOR_SetupSent)  && Pipe_IsSETUPSent())  ||
    1bf0:	c9 ee       	ldi	r28, 0xE9	; 233
    1bf2:	d3 e0       	ldi	r29, 0x03	; 3
    1bf4:	06 c0       	rjmp	.+12     	; 0x1c02 <USB_Host_WaitForIOS+0x1a>
	         ((WaitType == USB_HOST_WAITFOR_InReceived) && Pipe_IsINReceived()) ||
	         ((WaitType == USB_HOST_WAITFOR_OutReady)   && Pipe_IsOUTReady())))
	{
		uint8_t ErrorCode;

		if ((ErrorCode = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
    1bf6:	81 e0       	ldi	r24, 0x01	; 1
    1bf8:	66 db       	rcall	.-2356   	; 0x12c6 <USB_Host_WaitMS>
    1bfa:	88 23       	and	r24, r24
    1bfc:	c9 f4       	brne	.+50     	; 0x1c30 <USB_Host_WaitForIOS+0x48>
    1bfe:	21 97       	sbiw	r28, 0x01	; 1
    1c00:	b1 f0       	breq	.+44     	; 0x1c2e <USB_Host_WaitForIOS+0x46>
		  return ErrorCode;

		if (!(TimeoutCounter--))
    1c02:	11 23       	and	r17, r17
	uint8_t  TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#else
	uint16_t TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#endif

	while (!(((WaitType == USB_HOST_WAITFOR_SetupSent)  && Pipe_IsSETUPSent())  ||
    1c04:	29 f4       	brne	.+10     	; 0x1c10 <USB_Host_WaitForIOS+0x28>
    1c06:	80 91 a6 00 	lds	r24, 0x00A6
			 *  \return Boolean \c true if the current pipe is ready for a SETUP packet, \c false otherwise.
			 */
			static inline bool Pipe_IsSETUPSent(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsSETUPSent(void)
			{
				return ((UPINTX & (1 << TXSTPI)) ? true : false);
    1c0a:	83 ff       	sbrs	r24, 3
    1c0c:	f4 cf       	rjmp	.-24     	; 0x1bf6 <USB_Host_WaitForIOS+0xe>
    1c0e:	0d c0       	rjmp	.+26     	; 0x1c2a <USB_Host_WaitForIOS+0x42>
    1c10:	11 30       	cpi	r17, 0x01	; 1
    1c12:	29 f4       	brne	.+10     	; 0x1c1e <USB_Host_WaitForIOS+0x36>
    1c14:	80 91 a6 00 	lds	r24, 0x00A6
			 *  \return Boolean \c true if the current pipe has received an IN packet, \c false otherwise.
			 */
			static inline bool Pipe_IsINReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsINReceived(void)
			{
				return ((UPINTX & (1 << RXINI)) ? true : false);
    1c18:	80 ff       	sbrs	r24, 0
	         ((WaitType == USB_HOST_WAITFOR_InReceived) && Pipe_IsINReceived()) ||
    1c1a:	ed cf       	rjmp	.-38     	; 0x1bf6 <USB_Host_WaitForIOS+0xe>
    1c1c:	06 c0       	rjmp	.+12     	; 0x1c2a <USB_Host_WaitForIOS+0x42>
    1c1e:	12 30       	cpi	r17, 0x02	; 2
	uint8_t  TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#else
	uint16_t TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#endif

	while (!(((WaitType == USB_HOST_WAITFOR_SetupSent)  && Pipe_IsSETUPSent())  ||
    1c20:	51 f7       	brne	.-44     	; 0x1bf6 <USB_Host_WaitForIOS+0xe>
    1c22:	80 91 a6 00 	lds	r24, 0x00A6
			 *  \return Boolean \c true if the current pipe is ready for an OUT packet, \c false otherwise.
			 */
			static inline bool Pipe_IsOUTReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsOUTReady(void)
			{
				return ((UPINTX & (1 << TXOUTI)) ? true : false);
    1c26:	82 ff       	sbrs	r24, 2
	         ((WaitType == USB_HOST_WAITFOR_InReceived) && Pipe_IsINReceived()) ||
	         ((WaitType == USB_HOST_WAITFOR_OutReady)   && Pipe_IsOUTReady())))
    1c28:	e6 cf       	rjmp	.-52     	; 0x1bf6 <USB_Host_WaitForIOS+0xe>
    1c2a:	80 e0       	ldi	r24, 0x00	; 0

		if (!(TimeoutCounter--))
		  return HOST_SENDCONTROL_SoftwareTimeOut;
	}

	return HOST_SENDCONTROL_Successful;
    1c2c:	01 c0       	rjmp	.+2      	; 0x1c30 <USB_Host_WaitForIOS+0x48>
    1c2e:	84 e0       	ldi	r24, 0x04	; 4

		if ((ErrorCode = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
		  return ErrorCode;

		if (!(TimeoutCounter--))
		  return HOST_SENDCONTROL_SoftwareTimeOut;
    1c30:	df 91       	pop	r29
	}

	return HOST_SENDCONTROL_Successful;
}
    1c32:	cf 91       	pop	r28
    1c34:	1f 91       	pop	r17
    1c36:	08 95       	ret

00001c38 <USB_Host_SendControlRequest>:
    1c38:	ef 92       	push	r14

uint8_t USB_Host_SendControlRequest(void* const BufferPtr)
{
    1c3a:	ff 92       	push	r15
    1c3c:	0f 93       	push	r16
    1c3e:	1f 93       	push	r17
    1c40:	cf 93       	push	r28
    1c42:	df 93       	push	r29
    1c44:	ec 01       	movw	r28, r24
			 *  \return Boolean \c true if the bus is currently suspended, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusSuspended(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusSuspended(void)
			{
				return ((UHCON & (1 << SOFEN)) ? false : true);
    1c46:	e0 90 9e 00 	lds	r14, 0x009E
    1c4a:	ff 24       	eor	r15, r15
    1c4c:	81 e0       	ldi	r24, 0x01	; 1
    1c4e:	e8 22       	and	r14, r24
    1c50:	ff 24       	eor	r15, r15

static uint8_t USB_Host_SendControlRequest_PRV(void* const BufferPtr)
{
	uint8_t* DataStream   = (uint8_t*)BufferPtr;
	uint8_t  ReturnStatus = HOST_SENDCONTROL_Successful;
	uint16_t DataLen      = USB_ControlRequest.wLength;
    1c52:	00 91 3a 01 	lds	r16, 0x013A
    1c56:	10 91 3b 01 	lds	r17, 0x013B
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
    1c5a:	80 91 9e 00 	lds	r24, 0x009E
    1c5e:	81 60       	ori	r24, 0x01	; 1
    1c60:	80 93 9e 00 	sts	0x009E, r24

	USB_Host_ResumeBus();

	if ((ReturnStatus = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
    1c64:	81 e0       	ldi	r24, 0x01	; 1
    1c66:	2f db       	rcall	.-2466   	; 0x12c6 <USB_Host_WaitMS>
    1c68:	88 23       	and	r24, r24
    1c6a:	09 f0       	breq	.+2      	; 0x1c6e <USB_Host_SendControlRequest+0x36>
    1c6c:	ca c0       	rjmp	.+404    	; 0x1e02 <USB_Host_SendControlRequest+0x1ca>
    1c6e:	80 91 aa 00 	lds	r24, 0x00AA
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    1c72:	8f 7c       	andi	r24, 0xCF	; 207
    1c74:	80 93 aa 00 	sts	0x00AA, r24
    1c78:	10 92 f5 00 	sts	0x00F5, r1

			/** Clears the error flags for the currently selected pipe. */
			static inline void Pipe_ClearError(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearError(void)
			{
				UPERRX = 0;
    1c7c:	80 91 a6 00 	lds	r24, 0x00A6
				UPINTX &= ~(1 << PERRI);
    1c80:	8f 7e       	andi	r24, 0xEF	; 239
    1c82:	80 93 a6 00 	sts	0x00A6, r24
    1c86:	80 91 a9 00 	lds	r24, 0x00A9

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    1c8a:	8f 7b       	andi	r24, 0xBF	; 191
    1c8c:	80 93 a9 00 	sts	0x00A9, r24
    1c90:	88 e0       	ldi	r24, 0x08	; 8
    1c92:	e4 e3       	ldi	r30, 0x34	; 52
	Pipe_Write_8(USB_ControlRequest.bRequest);
	Pipe_Write_16_LE(USB_ControlRequest.wValue);
	Pipe_Write_16_LE(USB_ControlRequest.wIndex);
	Pipe_Write_16_LE(USB_ControlRequest.wLength);
	#else
	uint8_t* HeaderStream = (uint8_t*)&USB_ControlRequest;
    1c94:	f1 e0       	ldi	r31, 0x01	; 1
    1c96:	91 91       	ld	r25, Z+

	for (uint8_t HeaderByte = 0; HeaderByte < sizeof(USB_Request_Header_t); HeaderByte++)
	  Pipe_Write_8(*(HeaderStream++));
    1c98:	90 93 af 00 	sts	0x00AF, r25
			 *  \param[in] Data  Data to write into the the currently selected pipe's FIFO buffer.
			 */
			static inline void Pipe_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Write_8(const uint8_t Data)
			{
				UPDATX = Data;
    1c9c:	81 50       	subi	r24, 0x01	; 1
    1c9e:	d9 f7       	brne	.-10     	; 0x1c96 <USB_Host_SendControlRequest+0x5e>
	Pipe_Write_16_LE(USB_ControlRequest.wIndex);
	Pipe_Write_16_LE(USB_ControlRequest.wLength);
	#else
	uint8_t* HeaderStream = (uint8_t*)&USB_ControlRequest;

	for (uint8_t HeaderByte = 0; HeaderByte < sizeof(USB_Request_Header_t); HeaderByte++)
    1ca0:	80 91 a6 00 	lds	r24, 0x00A6
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearSETUP(void)
			{
				UPINTX &= ~((1 << TXSTPI) | (1 << FIFOCON));
    1ca4:	87 77       	andi	r24, 0x77	; 119
    1ca6:	80 93 a6 00 	sts	0x00A6, r24
    1caa:	80 e0       	ldi	r24, 0x00	; 0
	  Pipe_Write_8(*(HeaderStream++));
	#endif

	Pipe_ClearSETUP();

	if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_SetupSent)) != HOST_SENDCONTROL_Successful)
    1cac:	9d df       	rcall	.-198    	; 0x1be8 <USB_Host_WaitForIOS>
    1cae:	88 23       	and	r24, r24
    1cb0:	09 f0       	breq	.+2      	; 0x1cb4 <USB_Host_SendControlRequest+0x7c>
    1cb2:	a7 c0       	rjmp	.+334    	; 0x1e02 <USB_Host_SendControlRequest+0x1ca>
    1cb4:	80 91 a9 00 	lds	r24, 0x00A9

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    1cb8:	80 64       	ori	r24, 0x40	; 64
    1cba:	80 93 a9 00 	sts	0x00A9, r24
    1cbe:	81 e0       	ldi	r24, 0x01	; 1
    1cc0:	02 db       	rcall	.-2556   	; 0x12c6 <USB_Host_WaitMS>
	  return ReturnStatus;

	Pipe_Freeze();

	if ((ReturnStatus = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
    1cc2:	88 23       	and	r24, r24
    1cc4:	09 f0       	breq	.+2      	; 0x1cc8 <USB_Host_SendControlRequest+0x90>
    1cc6:	9d c0       	rjmp	.+314    	; 0x1e02 <USB_Host_SendControlRequest+0x1ca>
    1cc8:	80 91 34 01 	lds	r24, 0x0134
    1ccc:	87 ff       	sbrs	r24, 7
	  return ReturnStatus;

	if ((USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_DIRECTION) == REQDIR_DEVICETOHOST)
    1cce:	4f c0       	rjmp	.+158    	; 0x1d6e <USB_Host_SendControlRequest+0x136>
    1cd0:	80 91 aa 00 	lds	r24, 0x00AA
    1cd4:	8f 7c       	andi	r24, 0xCF	; 207
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    1cd6:	80 61       	ori	r24, 0x10	; 16
    1cd8:	80 93 aa 00 	sts	0x00AA, r24
    1cdc:	20 97       	sbiw	r28, 0x00	; 0
    1cde:	61 f5       	brne	.+88     	; 0x1d38 <USB_Host_SendControlRequest+0x100>
    1ce0:	2e c0       	rjmp	.+92     	; 0x1d3e <USB_Host_SendControlRequest+0x106>
	{
		Pipe_SetPipeToken(PIPE_TOKEN_IN);

		if (DataStream != NULL)
    1ce2:	80 91 a9 00 	lds	r24, 0x00A9
    1ce6:	8f 7b       	andi	r24, 0xBF	; 191

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    1ce8:	80 93 a9 00 	sts	0x00A9, r24
    1cec:	81 e0       	ldi	r24, 0x01	; 1
    1cee:	7c df       	rcall	.-264    	; 0x1be8 <USB_Host_WaitForIOS>
    1cf0:	88 23       	and	r24, r24
		{
			while (DataLen)
			{
				Pipe_Unfreeze();

				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_InReceived)) != HOST_SENDCONTROL_Successful)
    1cf2:	09 f0       	breq	.+2      	; 0x1cf6 <USB_Host_SendControlRequest+0xbe>
    1cf4:	86 c0       	rjmp	.+268    	; 0x1e02 <USB_Host_SendControlRequest+0x1ca>
    1cf6:	80 91 f6 00 	lds	r24, 0x00F6
    1cfa:	90 91 f7 00 	lds	r25, 0x00F7
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
    1cfe:	00 97       	sbiw	r24, 0x00	; 0
    1d00:	41 f4       	brne	.+16     	; 0x1d12 <USB_Host_SendControlRequest+0xda>
    1d02:	00 e0       	ldi	r16, 0x00	; 0
    1d04:	10 e0       	ldi	r17, 0x00	; 0
				  return ReturnStatus;

				if (!(Pipe_BytesInPipe()))
    1d06:	05 c0       	rjmp	.+10     	; 0x1d12 <USB_Host_SendControlRequest+0xda>
    1d08:	80 91 af 00 	lds	r24, 0x00AF
				  DataLen = 0;
    1d0c:	89 93       	st	Y+, r24
    1d0e:	01 50       	subi	r16, 0x01	; 1
			 *  \return Next byte in the currently selected pipe's FIFO buffer.
			 */
			static inline uint8_t Pipe_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_Read_8(void)
			{
				return UPDATX;
    1d10:	10 40       	sbci	r17, 0x00	; 0
    1d12:	80 91 f6 00 	lds	r24, 0x00F6

				while (Pipe_BytesInPipe() && DataLen)
				{
					*(DataStream++) = Pipe_Read_8();
					DataLen--;
    1d16:	90 91 f7 00 	lds	r25, 0x00F7
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
    1d1a:	00 97       	sbiw	r24, 0x00	; 0
    1d1c:	19 f0       	breq	.+6      	; 0x1d24 <USB_Host_SendControlRequest+0xec>
    1d1e:	01 15       	cp	r16, r1
    1d20:	11 05       	cpc	r17, r1
				  return ReturnStatus;

				if (!(Pipe_BytesInPipe()))
				  DataLen = 0;

				while (Pipe_BytesInPipe() && DataLen)
    1d22:	91 f7       	brne	.-28     	; 0x1d08 <USB_Host_SendControlRequest+0xd0>
    1d24:	80 91 a9 00 	lds	r24, 0x00A9
    1d28:	80 64       	ori	r24, 0x40	; 64
    1d2a:	80 93 a9 00 	sts	0x00A9, r24

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    1d2e:	80 91 a6 00 	lds	r24, 0x00A6
    1d32:	8e 77       	andi	r24, 0x7E	; 126
    1d34:	80 93 a6 00 	sts	0x00A6, r24
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
    1d38:	01 15       	cp	r16, r1
    1d3a:	11 05       	cpc	r17, r1
    1d3c:	91 f6       	brne	.-92     	; 0x1ce2 <USB_Host_SendControlRequest+0xaa>
    1d3e:	80 91 aa 00 	lds	r24, 0x00AA
	{
		Pipe_SetPipeToken(PIPE_TOKEN_IN);

		if (DataStream != NULL)
		{
			while (DataLen)
    1d42:	8f 7c       	andi	r24, 0xCF	; 207
    1d44:	80 62       	ori	r24, 0x20	; 32
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    1d46:	80 93 aa 00 	sts	0x00AA, r24
    1d4a:	80 91 a9 00 	lds	r24, 0x00A9
    1d4e:	8f 7b       	andi	r24, 0xBF	; 191
    1d50:	80 93 a9 00 	sts	0x00A9, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    1d54:	82 e0       	ldi	r24, 0x02	; 2
    1d56:	48 df       	rcall	.-368    	; 0x1be8 <USB_Host_WaitForIOS>
    1d58:	88 23       	and	r24, r24
    1d5a:	09 f0       	breq	.+2      	; 0x1d5e <USB_Host_SendControlRequest+0x126>
		}

		Pipe_SetPipeToken(PIPE_TOKEN_OUT);
		Pipe_Unfreeze();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    1d5c:	52 c0       	rjmp	.+164    	; 0x1e02 <USB_Host_SendControlRequest+0x1ca>
    1d5e:	80 91 a6 00 	lds	r24, 0x00A6
    1d62:	8b 77       	andi	r24, 0x7B	; 123
    1d64:	80 93 a6 00 	sts	0x00A6, r24
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearOUT(void)
			{
				UPINTX &= ~((1 << TXOUTI) | (1 << FIFOCON));
    1d68:	82 e0       	ldi	r24, 0x02	; 2
    1d6a:	3e df       	rcall	.-388    	; 0x1be8 <USB_Host_WaitForIOS>
    1d6c:	4a c0       	rjmp	.+148    	; 0x1e02 <USB_Host_SendControlRequest+0x1ca>
    1d6e:	20 97       	sbiw	r28, 0x00	; 0
    1d70:	a1 f1       	breq	.+104    	; 0x1dda <USB_Host_SendControlRequest+0x1a2>
		  return ReturnStatus;

		Pipe_ClearOUT();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    1d72:	80 91 aa 00 	lds	r24, 0x00AA
    1d76:	8f 7c       	andi	r24, 0xCF	; 207
    1d78:	80 62       	ori	r24, 0x20	; 32
		  return ReturnStatus;
	}
	else
	{
		if (DataStream != NULL)
    1d7a:	80 93 aa 00 	sts	0x00AA, r24
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    1d7e:	80 91 a9 00 	lds	r24, 0x00A9
    1d82:	8f 7b       	andi	r24, 0xBF	; 191
    1d84:	80 93 a9 00 	sts	0x00A9, r24
    1d88:	1c c0       	rjmp	.+56     	; 0x1dc2 <USB_Host_SendControlRequest+0x18a>

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    1d8a:	2e df       	rcall	.-420    	; 0x1be8 <USB_Host_WaitForIOS>
    1d8c:	88 23       	and	r24, r24
    1d8e:	c9 f5       	brne	.+114    	; 0x1e02 <USB_Host_SendControlRequest+0x1ca>
    1d90:	fe 01       	movw	r30, r28
    1d92:	07 c0       	rjmp	.+14     	; 0x1da2 <USB_Host_SendControlRequest+0x16a>
    1d94:	81 91       	ld	r24, Z+
			Pipe_SetPipeToken(PIPE_TOKEN_OUT);
			Pipe_Unfreeze();

			while (DataLen)
			{
				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    1d96:	ef 01       	movw	r28, r30
    1d98:	80 93 af 00 	sts	0x00AF, r24
    1d9c:	01 50       	subi	r16, 0x01	; 1
    1d9e:	10 40       	sbci	r17, 0x00	; 0
    1da0:	59 f0       	breq	.+22     	; 0x1db8 <USB_Host_SendControlRequest+0x180>
				  return ReturnStatus;

				while (DataLen && (Pipe_BytesInPipe() < USB_Host_ControlPipeSize))
				{
					Pipe_Write_8(*(DataStream++));
    1da2:	ef 01       	movw	r28, r30
    1da4:	20 91 f6 00 	lds	r18, 0x00F6
			 *  \param[in] Data  Data to write into the the currently selected pipe's FIFO buffer.
			 */
			static inline void Pipe_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Write_8(const uint8_t Data)
			{
				UPDATX = Data;
    1da8:	30 91 f7 00 	lds	r19, 0x00F7
					DataLen--;
    1dac:	80 91 24 01 	lds	r24, 0x0124
			while (DataLen)
			{
				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
				  return ReturnStatus;

				while (DataLen && (Pipe_BytesInPipe() < USB_Host_ControlPipeSize))
    1db0:	90 e0       	ldi	r25, 0x00	; 0
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
    1db2:	28 17       	cp	r18, r24
    1db4:	39 07       	cpc	r19, r25
    1db6:	70 f3       	brcs	.-36     	; 0x1d94 <USB_Host_SendControlRequest+0x15c>
    1db8:	80 91 a6 00 	lds	r24, 0x00A6
    1dbc:	8b 77       	andi	r24, 0x7B	; 123
    1dbe:	80 93 a6 00 	sts	0x00A6, r24
    1dc2:	82 e0       	ldi	r24, 0x02	; 2
    1dc4:	01 15       	cp	r16, r1
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearOUT(void)
			{
				UPINTX &= ~((1 << TXOUTI) | (1 << FIFOCON));
    1dc6:	11 05       	cpc	r17, r1
    1dc8:	01 f7       	brne	.-64     	; 0x1d8a <USB_Host_SendControlRequest+0x152>
    1dca:	0e df       	rcall	.-484    	; 0x1be8 <USB_Host_WaitForIOS>
    1dcc:	88 23       	and	r24, r24
    1dce:	c9 f4       	brne	.+50     	; 0x1e02 <USB_Host_SendControlRequest+0x1ca>
			Pipe_SetPipeToken(PIPE_TOKEN_OUT);
			Pipe_Unfreeze();

			while (DataLen)
			{
				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    1dd0:	80 91 a9 00 	lds	r24, 0x00A9
		if (DataStream != NULL)
		{
			Pipe_SetPipeToken(PIPE_TOKEN_OUT);
			Pipe_Unfreeze();

			while (DataLen)
    1dd4:	80 64       	ori	r24, 0x40	; 64
    1dd6:	80 93 a9 00 	sts	0x00A9, r24
				}

				Pipe_ClearOUT();
			}

			if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    1dda:	80 91 aa 00 	lds	r24, 0x00AA
    1dde:	8f 7c       	andi	r24, 0xCF	; 207

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    1de0:	80 61       	ori	r24, 0x10	; 16
    1de2:	80 93 aa 00 	sts	0x00AA, r24
    1de6:	80 91 a9 00 	lds	r24, 0x00A9
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    1dea:	8f 7b       	andi	r24, 0xBF	; 191
    1dec:	80 93 a9 00 	sts	0x00A9, r24
    1df0:	81 e0       	ldi	r24, 0x01	; 1
    1df2:	fa de       	rcall	.-524    	; 0x1be8 <USB_Host_WaitForIOS>
    1df4:	88 23       	and	r24, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    1df6:	29 f4       	brne	.+10     	; 0x1e02 <USB_Host_SendControlRequest+0x1ca>
    1df8:	90 91 a6 00 	lds	r25, 0x00A6
    1dfc:	9e 77       	andi	r25, 0x7E	; 126
    1dfe:	90 93 a6 00 	sts	0x00A6, r25
		}

		Pipe_SetPipeToken(PIPE_TOKEN_IN);
		Pipe_Unfreeze();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_InReceived)) != HOST_SENDCONTROL_Successful)
    1e02:	90 91 a9 00 	lds	r25, 0x00A9
    1e06:	90 64       	ori	r25, 0x40	; 64
    1e08:	90 93 a9 00 	sts	0x00A9, r25
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
    1e0c:	e1 14       	cp	r14, r1
    1e0e:	f1 04       	cpc	r15, r1
    1e10:	29 f4       	brne	.+10     	; 0x1e1c <USB_Host_SendControlRequest+0x1e4>
    1e12:	90 91 9e 00 	lds	r25, 0x009E

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    1e16:	9e 7f       	andi	r25, 0xFE	; 254
    1e18:	90 93 9e 00 	sts	0x009E, r25
    1e1c:	91 e0       	ldi	r25, 0x01	; 1
	bool BusSuspended    = USB_Host_IsBusSuspended();
	uint8_t ReturnStatus = USB_Host_SendControlRequest_PRV(BufferPtr);

	Pipe_Freeze();

	if (BusSuspended)
    1e1e:	90 93 a8 00 	sts	0x00A8, r25
    1e22:	10 92 a8 00 	sts	0x00A8, r1
			 *             some events (such as device disconnections) will not fire until the bus is resumed.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				UHCON &= ~(1 << SOFEN);
    1e26:	df 91       	pop	r29
    1e28:	cf 91       	pop	r28
    1e2a:	1f 91       	pop	r17
    1e2c:	0f 91       	pop	r16
			 *  \param[in] Address  Address of the pipe to reset.
			 */
			static inline void Pipe_ResetPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ResetPipe(const uint8_t Address)
			{
				UPRST = (1 << (Address & PIPE_PIPENUM_MASK));
    1e2e:	ff 90       	pop	r15
    1e30:	ef 90       	pop	r14
    1e32:	08 95       	ret

00001e34 <USB_Host_SetDeviceConfiguration>:
				UPRST = 0;
    1e34:	cf 93       	push	r28
    1e36:	c8 2f       	mov	r28, r24
	  USB_Host_SuspendBus();

	Pipe_ResetPipe(PIPE_CONTROLPIPE);

	return ReturnStatus;
}
    1e38:	10 92 34 01 	sts	0x0134, r1
    1e3c:	89 e0       	ldi	r24, 0x09	; 9
    1e3e:	80 93 35 01 	sts	0x0135, r24
    1e42:	c0 93 36 01 	sts	0x0136, r28

uint8_t USB_Host_SetDeviceConfiguration(const uint8_t ConfigNumber)
{
	uint8_t ErrorCode;

	USB_ControlRequest = (USB_Request_Header_t)
    1e46:	10 92 37 01 	sts	0x0137, r1
    1e4a:	10 92 39 01 	sts	0x0139, r1
    1e4e:	10 92 38 01 	sts	0x0138, r1
    1e52:	10 92 3b 01 	sts	0x013B, r1
    1e56:	10 92 3a 01 	sts	0x013A, r1
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
    1e5a:	10 92 a7 00 	sts	0x00A7, r1
			.wLength       = 0,
		};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	if ((ErrorCode = USB_Host_SendControlRequest(NULL)) == HOST_SENDCONTROL_Successful)
    1e5e:	80 e0       	ldi	r24, 0x00	; 0
    1e60:	90 e0       	ldi	r25, 0x00	; 0
    1e62:	ea de       	rcall	.-556    	; 0x1c38 <USB_Host_SendControlRequest>
    1e64:	88 23       	and	r24, r24
    1e66:	49 f4       	brne	.+18     	; 0x1e7a <USB_Host_SetDeviceConfiguration+0x46>
    1e68:	c0 93 32 01 	sts	0x0132, r28
	{
		USB_Host_ConfigurationNumber = ConfigNumber;
    1e6c:	cc 23       	and	r28, r28
		USB_HostState                = (ConfigNumber) ? HOST_STATE_Configured : HOST_STATE_Addressed;
    1e6e:	11 f0       	breq	.+4      	; 0x1e74 <USB_Host_SetDeviceConfiguration+0x40>
    1e70:	9b e0       	ldi	r25, 0x0B	; 11
    1e72:	01 c0       	rjmp	.+2      	; 0x1e76 <USB_Host_SetDeviceConfiguration+0x42>
    1e74:	9a e0       	ldi	r25, 0x0A	; 10
    1e76:	90 93 3c 01 	sts	0x013C, r25
    1e7a:	cf 91       	pop	r28
	}

	return ErrorCode;
}
    1e7c:	08 95       	ret

00001e7e <USB_Host_ClearEndpointStall>:
    1e7e:	92 e0       	ldi	r25, 0x02	; 2
	return USB_Host_SendControlRequest(FeatureStatus);
}

uint8_t USB_Host_ClearEndpointStall(const uint8_t EndpointAddress)
{
	USB_ControlRequest = (USB_Request_Header_t)
    1e80:	90 93 34 01 	sts	0x0134, r25
    1e84:	91 e0       	ldi	r25, 0x01	; 1
    1e86:	90 93 35 01 	sts	0x0135, r25
    1e8a:	10 92 37 01 	sts	0x0137, r1
    1e8e:	10 92 36 01 	sts	0x0136, r1
    1e92:	80 93 38 01 	sts	0x0138, r24
    1e96:	10 92 39 01 	sts	0x0139, r1
    1e9a:	10 92 3b 01 	sts	0x013B, r1
    1e9e:	10 92 3a 01 	sts	0x013A, r1
    1ea2:	10 92 a7 00 	sts	0x00A7, r1
			.wLength       = 0,
		};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	return USB_Host_SendControlRequest(NULL);
    1ea6:	80 e0       	ldi	r24, 0x00	; 0
    1ea8:	90 e0       	ldi	r25, 0x00	; 0
    1eaa:	c6 ce       	rjmp	.-628    	; 0x1c38 <USB_Host_SendControlRequest>

00001eac <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
    1eac:	cf 93       	push	r28
			 *  \return Index of the currently selected pipe.
			 */
			static inline uint8_t Pipe_GetCurrentPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetCurrentPipe(void)
			{
				return ((UPNUM & PIPE_PIPENUM_MASK) | Pipe_GetPipeDirection());
    1eae:	c0 91 a7 00 	lds	r28, 0x00A7
    1eb2:	cf 70       	andi	r28, 0x0F	; 15
			 *  \return The currently selected pipe's direction, as a \c PIPE_DIR_* mask.
			 */
			static inline uint8_t Pipe_GetPipeDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetPipeDirection(void)
			{
				return (UPCFG0X & (1 << EPDIR)) ? PIPE_DIR_IN : PIPE_DIR_OUT;
    1eb4:	80 91 aa 00 	lds	r24, 0x00AA
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
    1eb8:	10 92 a7 00 	sts	0x00A7, r1
{
	uint8_t PrevPipe = Pipe_GetCurrentPipe();

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	USB_Host_ProcessNextHostState();
    1ebc:	59 da       	rcall	.-2894   	; 0x1370 <USB_Host_ProcessNextHostState>
    1ebe:	c0 93 a7 00 	sts	0x00A7, r28
    1ec2:	cf 91       	pop	r28
	#elif defined(USB_CAN_BE_HOST)
		USB_HostTask();
	#elif defined(USB_CAN_BE_DEVICE)
		USB_DeviceTask();
	#endif
}
    1ec4:	08 95       	ret

00001ec6 <Serial_putchar>:
			 *  \param[in] DataByte  Byte to transmit through the USART.
			 */
			static inline void Serial_SendByte(const char DataByte) ATTR_ALWAYS_INLINE;
			static inline void Serial_SendByte(const char DataByte)
			{
				while (!(UCSR1A & (1 << UDRE1)));
    1ec6:	90 91 c8 00 	lds	r25, 0x00C8
    1eca:	95 ff       	sbrs	r25, 5
    1ecc:	fc cf       	rjmp	.-8      	; 0x1ec6 <Serial_putchar>
				UDR1 = DataByte;
    1ece:	80 93 ce 00 	sts	0x00CE, r24
{
	(void)Stream;

	Serial_SendByte(DataByte);
	return 0;
}
    1ed2:	80 e0       	ldi	r24, 0x00	; 0
    1ed4:	90 e0       	ldi	r25, 0x00	; 0
    1ed6:	08 95       	ret

00001ed8 <Serial_getchar>:
			 *  \return Boolean \c true if a character has been received, \c false otherwise.
			 */
			static inline bool Serial_IsCharReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Serial_IsCharReceived(void)
			{
				return ((UCSR1A & (1 << RXC1)) ? true : false);
    1ed8:	80 91 c8 00 	lds	r24, 0x00C8

int Serial_getchar(FILE *Stream)
{
	(void)Stream;

	if (!(Serial_IsCharReceived()))
    1edc:	87 ff       	sbrs	r24, 7
    1ede:	08 c0       	rjmp	.+16     	; 0x1ef0 <Serial_getchar+0x18>
    1ee0:	80 91 c8 00 	lds	r24, 0x00C8
			 *  \return Next byte received from the USART, or a negative value if no byte has been received.
			 */
			static inline int16_t Serial_ReceiveByte(void) ATTR_ALWAYS_INLINE;
			static inline int16_t Serial_ReceiveByte(void)
			{
				if (!(Serial_IsCharReceived()))
    1ee4:	87 ff       	sbrs	r24, 7
    1ee6:	07 c0       	rjmp	.+14     	; 0x1ef6 <Serial_getchar+0x1e>
				  return -1;

				return UDR1;
    1ee8:	80 91 ce 00 	lds	r24, 0x00CE
    1eec:	90 e0       	ldi	r25, 0x00	; 0
    1eee:	08 95       	ret
	  return _FDEV_EOF;
    1ef0:	8e ef       	ldi	r24, 0xFE	; 254
    1ef2:	9f ef       	ldi	r25, 0xFF	; 255
    1ef4:	08 95       	ret
			 */
			static inline int16_t Serial_ReceiveByte(void) ATTR_ALWAYS_INLINE;
			static inline int16_t Serial_ReceiveByte(void)
			{
				if (!(Serial_IsCharReceived()))
				  return -1;
    1ef6:	8f ef       	ldi	r24, 0xFF	; 255
    1ef8:	9f ef       	ldi	r25, 0xFF	; 255

	return Serial_ReceiveByte();
}
    1efa:	08 95       	ret

00001efc <Serial_CreateStream>:
	while (Length--)
	  Serial_SendByte(*((uint8_t*)Buffer++));
}

void Serial_CreateStream(FILE* Stream)
{
    1efc:	fc 01       	movw	r30, r24
	if (!(Stream))
    1efe:	00 97       	sbiw	r24, 0x00	; 0
    1f00:	51 f4       	brne	.+20     	; 0x1f16 <Serial_CreateStream+0x1a>
	{
		Stream = &USARTSerialStream;
		stdin  = Stream;
    1f02:	ed e3       	ldi	r30, 0x3D	; 61
    1f04:	f1 e0       	ldi	r31, 0x01	; 1
    1f06:	f0 93 4c 01 	sts	0x014C, r31
    1f0a:	e0 93 4b 01 	sts	0x014B, r30
		stdout = Stream;
    1f0e:	f0 93 4e 01 	sts	0x014E, r31
    1f12:	e0 93 4d 01 	sts	0x014D, r30
	}

	*Stream = (FILE)FDEV_SETUP_STREAM(Serial_putchar, Serial_getchar, _FDEV_SETUP_RW);
    1f16:	8e e0       	ldi	r24, 0x0E	; 14
    1f18:	df 01       	movw	r26, r30
    1f1a:	1d 92       	st	X+, r1
    1f1c:	8a 95       	dec	r24
    1f1e:	e9 f7       	brne	.-6      	; 0x1f1a <Serial_CreateStream+0x1e>
    1f20:	83 e0       	ldi	r24, 0x03	; 3
    1f22:	83 83       	std	Z+3, r24	; 0x03
    1f24:	83 e6       	ldi	r24, 0x63	; 99
    1f26:	9f e0       	ldi	r25, 0x0F	; 15
    1f28:	91 87       	std	Z+9, r25	; 0x09
    1f2a:	80 87       	std	Z+8, r24	; 0x08
    1f2c:	8c e6       	ldi	r24, 0x6C	; 108
    1f2e:	9f e0       	ldi	r25, 0x0F	; 15
    1f30:	93 87       	std	Z+11, r25	; 0x0b
    1f32:	82 87       	std	Z+10, r24	; 0x0a
}
    1f34:	08 95       	ret

00001f36 <__mulsi3>:
    1f36:	62 9f       	mul	r22, r18
    1f38:	d0 01       	movw	r26, r0
    1f3a:	73 9f       	mul	r23, r19
    1f3c:	f0 01       	movw	r30, r0
    1f3e:	82 9f       	mul	r24, r18
    1f40:	e0 0d       	add	r30, r0
    1f42:	f1 1d       	adc	r31, r1
    1f44:	64 9f       	mul	r22, r20
    1f46:	e0 0d       	add	r30, r0
    1f48:	f1 1d       	adc	r31, r1
    1f4a:	92 9f       	mul	r25, r18
    1f4c:	f0 0d       	add	r31, r0
    1f4e:	83 9f       	mul	r24, r19
    1f50:	f0 0d       	add	r31, r0
    1f52:	74 9f       	mul	r23, r20
    1f54:	f0 0d       	add	r31, r0
    1f56:	65 9f       	mul	r22, r21
    1f58:	f0 0d       	add	r31, r0
    1f5a:	99 27       	eor	r25, r25
    1f5c:	72 9f       	mul	r23, r18
    1f5e:	b0 0d       	add	r27, r0
    1f60:	e1 1d       	adc	r30, r1
    1f62:	f9 1f       	adc	r31, r25
    1f64:	63 9f       	mul	r22, r19
    1f66:	b0 0d       	add	r27, r0
    1f68:	e1 1d       	adc	r30, r1
    1f6a:	f9 1f       	adc	r31, r25
    1f6c:	bd 01       	movw	r22, r26
    1f6e:	cf 01       	movw	r24, r30
    1f70:	11 24       	eor	r1, r1
    1f72:	08 95       	ret

00001f74 <isgraph>:
    1f74:	80 32       	cpi	r24, 0x20	; 32
    1f76:	09 f0       	breq	.+2      	; 0x1f7a <isprint+0x2>

00001f78 <isprint>:
    1f78:	91 11       	cpse	r25, r1
    1f7a:	78 c2       	rjmp	.+1264   	; 0x246c <__ctype_isfalse>
    1f7c:	80 52       	subi	r24, 0x20	; 32
    1f7e:	8f 55       	subi	r24, 0x5F	; 95
    1f80:	e0 f7       	brcc	.-8      	; 0x1f7a <isprint+0x2>
    1f82:	08 95       	ret

00001f84 <fputc>:
    1f84:	0f 93       	push	r16
    1f86:	1f 93       	push	r17
    1f88:	cf 93       	push	r28
    1f8a:	df 93       	push	r29
    1f8c:	8c 01       	movw	r16, r24
    1f8e:	eb 01       	movw	r28, r22
    1f90:	8b 81       	ldd	r24, Y+3	; 0x03
    1f92:	81 ff       	sbrs	r24, 1
    1f94:	1b c0       	rjmp	.+54     	; 0x1fcc <fputc+0x48>
    1f96:	82 ff       	sbrs	r24, 2
    1f98:	0d c0       	rjmp	.+26     	; 0x1fb4 <fputc+0x30>
    1f9a:	2e 81       	ldd	r18, Y+6	; 0x06
    1f9c:	3f 81       	ldd	r19, Y+7	; 0x07
    1f9e:	8c 81       	ldd	r24, Y+4	; 0x04
    1fa0:	9d 81       	ldd	r25, Y+5	; 0x05
    1fa2:	28 17       	cp	r18, r24
    1fa4:	39 07       	cpc	r19, r25
    1fa6:	64 f4       	brge	.+24     	; 0x1fc0 <fputc+0x3c>
    1fa8:	e8 81       	ld	r30, Y
    1faa:	f9 81       	ldd	r31, Y+1	; 0x01
    1fac:	01 93       	st	Z+, r16
    1fae:	f9 83       	std	Y+1, r31	; 0x01
    1fb0:	e8 83       	st	Y, r30
    1fb2:	06 c0       	rjmp	.+12     	; 0x1fc0 <fputc+0x3c>
    1fb4:	e8 85       	ldd	r30, Y+8	; 0x08
    1fb6:	f9 85       	ldd	r31, Y+9	; 0x09
    1fb8:	80 2f       	mov	r24, r16
    1fba:	09 95       	icall
    1fbc:	00 97       	sbiw	r24, 0x00	; 0
    1fbe:	31 f4       	brne	.+12     	; 0x1fcc <fputc+0x48>
    1fc0:	8e 81       	ldd	r24, Y+6	; 0x06
    1fc2:	9f 81       	ldd	r25, Y+7	; 0x07
    1fc4:	01 96       	adiw	r24, 0x01	; 1
    1fc6:	9f 83       	std	Y+7, r25	; 0x07
    1fc8:	8e 83       	std	Y+6, r24	; 0x06
    1fca:	02 c0       	rjmp	.+4      	; 0x1fd0 <fputc+0x4c>
    1fcc:	0f ef       	ldi	r16, 0xFF	; 255
    1fce:	1f ef       	ldi	r17, 0xFF	; 255
    1fd0:	c8 01       	movw	r24, r16
    1fd2:	df 91       	pop	r29
    1fd4:	cf 91       	pop	r28
    1fd6:	1f 91       	pop	r17
    1fd8:	0f 91       	pop	r16
    1fda:	08 95       	ret

00001fdc <printf_P>:
    1fdc:	cf 93       	push	r28
    1fde:	df 93       	push	r29
    1fe0:	cd b7       	in	r28, 0x3d	; 61
    1fe2:	de b7       	in	r29, 0x3e	; 62
    1fe4:	fe 01       	movw	r30, r28
    1fe6:	35 96       	adiw	r30, 0x05	; 5
    1fe8:	61 91       	ld	r22, Z+
    1fea:	71 91       	ld	r23, Z+
    1fec:	80 91 4d 01 	lds	r24, 0x014D
    1ff0:	90 91 4e 01 	lds	r25, 0x014E
    1ff4:	dc 01       	movw	r26, r24
    1ff6:	13 96       	adiw	r26, 0x03	; 3
    1ff8:	2c 91       	ld	r18, X
    1ffa:	13 97       	sbiw	r26, 0x03	; 3
    1ffc:	28 60       	ori	r18, 0x08	; 8
    1ffe:	13 96       	adiw	r26, 0x03	; 3
    2000:	2c 93       	st	X, r18
    2002:	af 01       	movw	r20, r30
    2004:	39 d0       	rcall	.+114    	; 0x2078 <vfprintf>
    2006:	e0 91 4d 01 	lds	r30, 0x014D
    200a:	f0 91 4e 01 	lds	r31, 0x014E
    200e:	23 81       	ldd	r18, Z+3	; 0x03
    2010:	27 7f       	andi	r18, 0xF7	; 247
    2012:	23 83       	std	Z+3, r18	; 0x03
    2014:	df 91       	pop	r29
    2016:	cf 91       	pop	r28
    2018:	08 95       	ret

0000201a <puts_P>:
    201a:	0f 93       	push	r16
    201c:	1f 93       	push	r17
    201e:	cf 93       	push	r28
    2020:	df 93       	push	r29
    2022:	8c 01       	movw	r16, r24
    2024:	e0 91 4d 01 	lds	r30, 0x014D
    2028:	f0 91 4e 01 	lds	r31, 0x014E
    202c:	83 81       	ldd	r24, Z+3	; 0x03
    202e:	81 ff       	sbrs	r24, 1
    2030:	1b c0       	rjmp	.+54     	; 0x2068 <puts_P+0x4e>
    2032:	c0 e0       	ldi	r28, 0x00	; 0
    2034:	d0 e0       	ldi	r29, 0x00	; 0
    2036:	07 c0       	rjmp	.+14     	; 0x2046 <puts_P+0x2c>
    2038:	09 95       	icall
    203a:	00 97       	sbiw	r24, 0x00	; 0
    203c:	11 f0       	breq	.+4      	; 0x2042 <puts_P+0x28>
    203e:	cf ef       	ldi	r28, 0xFF	; 255
    2040:	df ef       	ldi	r29, 0xFF	; 255
    2042:	0f 5f       	subi	r16, 0xFF	; 255
    2044:	1f 4f       	sbci	r17, 0xFF	; 255
    2046:	f8 01       	movw	r30, r16
    2048:	84 91       	lpm	r24, Z
    204a:	60 91 4d 01 	lds	r22, 0x014D
    204e:	70 91 4e 01 	lds	r23, 0x014E
    2052:	db 01       	movw	r26, r22
    2054:	18 96       	adiw	r26, 0x08	; 8
    2056:	ed 91       	ld	r30, X+
    2058:	fc 91       	ld	r31, X
    205a:	19 97       	sbiw	r26, 0x09	; 9
    205c:	88 23       	and	r24, r24
    205e:	61 f7       	brne	.-40     	; 0x2038 <puts_P+0x1e>
    2060:	8a e0       	ldi	r24, 0x0A	; 10
    2062:	09 95       	icall
    2064:	00 97       	sbiw	r24, 0x00	; 0
    2066:	11 f0       	breq	.+4      	; 0x206c <puts_P+0x52>
    2068:	cf ef       	ldi	r28, 0xFF	; 255
    206a:	df ef       	ldi	r29, 0xFF	; 255
    206c:	ce 01       	movw	r24, r28
    206e:	df 91       	pop	r29
    2070:	cf 91       	pop	r28
    2072:	1f 91       	pop	r17
    2074:	0f 91       	pop	r16
    2076:	08 95       	ret

00002078 <vfprintf>:
    2078:	2f 92       	push	r2
    207a:	3f 92       	push	r3
    207c:	4f 92       	push	r4
    207e:	5f 92       	push	r5
    2080:	6f 92       	push	r6
    2082:	7f 92       	push	r7
    2084:	8f 92       	push	r8
    2086:	9f 92       	push	r9
    2088:	af 92       	push	r10
    208a:	bf 92       	push	r11
    208c:	cf 92       	push	r12
    208e:	df 92       	push	r13
    2090:	ef 92       	push	r14
    2092:	ff 92       	push	r15
    2094:	0f 93       	push	r16
    2096:	1f 93       	push	r17
    2098:	cf 93       	push	r28
    209a:	df 93       	push	r29
    209c:	cd b7       	in	r28, 0x3d	; 61
    209e:	de b7       	in	r29, 0x3e	; 62
    20a0:	2d 97       	sbiw	r28, 0x0d	; 13
    20a2:	0f b6       	in	r0, 0x3f	; 63
    20a4:	f8 94       	cli
    20a6:	de bf       	out	0x3e, r29	; 62
    20a8:	0f be       	out	0x3f, r0	; 63
    20aa:	cd bf       	out	0x3d, r28	; 61
    20ac:	3c 01       	movw	r6, r24
    20ae:	7d 87       	std	Y+13, r23	; 0x0d
    20b0:	6c 87       	std	Y+12, r22	; 0x0c
    20b2:	5a 01       	movw	r10, r20
    20b4:	fc 01       	movw	r30, r24
    20b6:	17 82       	std	Z+7, r1	; 0x07
    20b8:	16 82       	std	Z+6, r1	; 0x06
    20ba:	83 81       	ldd	r24, Z+3	; 0x03
    20bc:	81 ff       	sbrs	r24, 1
    20be:	bb c1       	rjmp	.+886    	; 0x2436 <__stack+0x337>
    20c0:	2e 01       	movw	r4, r28
    20c2:	08 94       	sec
    20c4:	41 1c       	adc	r4, r1
    20c6:	51 1c       	adc	r5, r1
    20c8:	f3 01       	movw	r30, r6
    20ca:	93 81       	ldd	r25, Z+3	; 0x03
    20cc:	ec 85       	ldd	r30, Y+12	; 0x0c
    20ce:	fd 85       	ldd	r31, Y+13	; 0x0d
    20d0:	93 fd       	sbrc	r25, 3
    20d2:	85 91       	lpm	r24, Z+
    20d4:	93 ff       	sbrs	r25, 3
    20d6:	81 91       	ld	r24, Z+
    20d8:	fd 87       	std	Y+13, r31	; 0x0d
    20da:	ec 87       	std	Y+12, r30	; 0x0c
    20dc:	88 23       	and	r24, r24
    20de:	09 f4       	brne	.+2      	; 0x20e2 <vfprintf+0x6a>
    20e0:	a6 c1       	rjmp	.+844    	; 0x242e <__stack+0x32f>
    20e2:	85 32       	cpi	r24, 0x25	; 37
    20e4:	41 f4       	brne	.+16     	; 0x20f6 <vfprintf+0x7e>
    20e6:	93 fd       	sbrc	r25, 3
    20e8:	85 91       	lpm	r24, Z+
    20ea:	93 ff       	sbrs	r25, 3
    20ec:	81 91       	ld	r24, Z+
    20ee:	fd 87       	std	Y+13, r31	; 0x0d
    20f0:	ec 87       	std	Y+12, r30	; 0x0c
    20f2:	85 32       	cpi	r24, 0x25	; 37
    20f4:	21 f4       	brne	.+8      	; 0x20fe <vfprintf+0x86>
    20f6:	90 e0       	ldi	r25, 0x00	; 0
    20f8:	b3 01       	movw	r22, r6
    20fa:	44 df       	rcall	.-376    	; 0x1f84 <fputc>
    20fc:	e5 cf       	rjmp	.-54     	; 0x20c8 <vfprintf+0x50>
    20fe:	ff 24       	eor	r15, r15
    2100:	ee 24       	eor	r14, r14
    2102:	10 e0       	ldi	r17, 0x00	; 0
    2104:	10 32       	cpi	r17, 0x20	; 32
    2106:	b0 f4       	brcc	.+44     	; 0x2134 <__stack+0x35>
    2108:	8b 32       	cpi	r24, 0x2B	; 43
    210a:	69 f0       	breq	.+26     	; 0x2126 <__stack+0x27>
    210c:	8c 32       	cpi	r24, 0x2C	; 44
    210e:	28 f4       	brcc	.+10     	; 0x211a <__stack+0x1b>
    2110:	80 32       	cpi	r24, 0x20	; 32
    2112:	51 f0       	breq	.+20     	; 0x2128 <__stack+0x29>
    2114:	83 32       	cpi	r24, 0x23	; 35
    2116:	71 f4       	brne	.+28     	; 0x2134 <__stack+0x35>
    2118:	0b c0       	rjmp	.+22     	; 0x2130 <__stack+0x31>
    211a:	8d 32       	cpi	r24, 0x2D	; 45
    211c:	39 f0       	breq	.+14     	; 0x212c <__stack+0x2d>
    211e:	80 33       	cpi	r24, 0x30	; 48
    2120:	49 f4       	brne	.+18     	; 0x2134 <__stack+0x35>
    2122:	11 60       	ori	r17, 0x01	; 1
    2124:	2c c0       	rjmp	.+88     	; 0x217e <__stack+0x7f>
    2126:	12 60       	ori	r17, 0x02	; 2
    2128:	14 60       	ori	r17, 0x04	; 4
    212a:	29 c0       	rjmp	.+82     	; 0x217e <__stack+0x7f>
    212c:	18 60       	ori	r17, 0x08	; 8
    212e:	27 c0       	rjmp	.+78     	; 0x217e <__stack+0x7f>
    2130:	10 61       	ori	r17, 0x10	; 16
    2132:	25 c0       	rjmp	.+74     	; 0x217e <__stack+0x7f>
    2134:	17 fd       	sbrc	r17, 7
    2136:	2e c0       	rjmp	.+92     	; 0x2194 <__stack+0x95>
    2138:	28 2f       	mov	r18, r24
    213a:	20 53       	subi	r18, 0x30	; 48
    213c:	2a 30       	cpi	r18, 0x0A	; 10
    213e:	98 f4       	brcc	.+38     	; 0x2166 <__stack+0x67>
    2140:	16 ff       	sbrs	r17, 6
    2142:	08 c0       	rjmp	.+16     	; 0x2154 <__stack+0x55>
    2144:	8f 2d       	mov	r24, r15
    2146:	88 0f       	add	r24, r24
    2148:	f8 2e       	mov	r15, r24
    214a:	ff 0c       	add	r15, r15
    214c:	ff 0c       	add	r15, r15
    214e:	f8 0e       	add	r15, r24
    2150:	f2 0e       	add	r15, r18
    2152:	15 c0       	rjmp	.+42     	; 0x217e <__stack+0x7f>
    2154:	8e 2d       	mov	r24, r14
    2156:	88 0f       	add	r24, r24
    2158:	e8 2e       	mov	r14, r24
    215a:	ee 0c       	add	r14, r14
    215c:	ee 0c       	add	r14, r14
    215e:	e8 0e       	add	r14, r24
    2160:	e2 0e       	add	r14, r18
    2162:	10 62       	ori	r17, 0x20	; 32
    2164:	0c c0       	rjmp	.+24     	; 0x217e <__stack+0x7f>
    2166:	8e 32       	cpi	r24, 0x2E	; 46
    2168:	21 f4       	brne	.+8      	; 0x2172 <__stack+0x73>
    216a:	16 fd       	sbrc	r17, 6
    216c:	60 c1       	rjmp	.+704    	; 0x242e <__stack+0x32f>
    216e:	10 64       	ori	r17, 0x40	; 64
    2170:	06 c0       	rjmp	.+12     	; 0x217e <__stack+0x7f>
    2172:	8c 36       	cpi	r24, 0x6C	; 108
    2174:	11 f4       	brne	.+4      	; 0x217a <__stack+0x7b>
    2176:	10 68       	ori	r17, 0x80	; 128
    2178:	02 c0       	rjmp	.+4      	; 0x217e <__stack+0x7f>
    217a:	88 36       	cpi	r24, 0x68	; 104
    217c:	59 f4       	brne	.+22     	; 0x2194 <__stack+0x95>
    217e:	ec 85       	ldd	r30, Y+12	; 0x0c
    2180:	fd 85       	ldd	r31, Y+13	; 0x0d
    2182:	93 fd       	sbrc	r25, 3
    2184:	85 91       	lpm	r24, Z+
    2186:	93 ff       	sbrs	r25, 3
    2188:	81 91       	ld	r24, Z+
    218a:	fd 87       	std	Y+13, r31	; 0x0d
    218c:	ec 87       	std	Y+12, r30	; 0x0c
    218e:	88 23       	and	r24, r24
    2190:	09 f0       	breq	.+2      	; 0x2194 <__stack+0x95>
    2192:	b8 cf       	rjmp	.-144    	; 0x2104 <__stack+0x5>
    2194:	98 2f       	mov	r25, r24
    2196:	95 54       	subi	r25, 0x45	; 69
    2198:	93 30       	cpi	r25, 0x03	; 3
    219a:	18 f0       	brcs	.+6      	; 0x21a2 <__stack+0xa3>
    219c:	90 52       	subi	r25, 0x20	; 32
    219e:	93 30       	cpi	r25, 0x03	; 3
    21a0:	38 f4       	brcc	.+14     	; 0x21b0 <__stack+0xb1>
    21a2:	24 e0       	ldi	r18, 0x04	; 4
    21a4:	30 e0       	ldi	r19, 0x00	; 0
    21a6:	a2 0e       	add	r10, r18
    21a8:	b3 1e       	adc	r11, r19
    21aa:	3f e3       	ldi	r19, 0x3F	; 63
    21ac:	39 83       	std	Y+1, r19	; 0x01
    21ae:	0f c0       	rjmp	.+30     	; 0x21ce <__stack+0xcf>
    21b0:	83 36       	cpi	r24, 0x63	; 99
    21b2:	31 f0       	breq	.+12     	; 0x21c0 <__stack+0xc1>
    21b4:	83 37       	cpi	r24, 0x73	; 115
    21b6:	81 f0       	breq	.+32     	; 0x21d8 <__stack+0xd9>
    21b8:	83 35       	cpi	r24, 0x53	; 83
    21ba:	09 f0       	breq	.+2      	; 0x21be <__stack+0xbf>
    21bc:	56 c0       	rjmp	.+172    	; 0x226a <__stack+0x16b>
    21be:	21 c0       	rjmp	.+66     	; 0x2202 <__stack+0x103>
    21c0:	f5 01       	movw	r30, r10
    21c2:	80 81       	ld	r24, Z
    21c4:	89 83       	std	Y+1, r24	; 0x01
    21c6:	22 e0       	ldi	r18, 0x02	; 2
    21c8:	30 e0       	ldi	r19, 0x00	; 0
    21ca:	a2 0e       	add	r10, r18
    21cc:	b3 1e       	adc	r11, r19
    21ce:	21 e0       	ldi	r18, 0x01	; 1
    21d0:	c2 2e       	mov	r12, r18
    21d2:	d1 2c       	mov	r13, r1
    21d4:	42 01       	movw	r8, r4
    21d6:	13 c0       	rjmp	.+38     	; 0x21fe <__stack+0xff>
    21d8:	92 e0       	ldi	r25, 0x02	; 2
    21da:	29 2e       	mov	r2, r25
    21dc:	31 2c       	mov	r3, r1
    21de:	2a 0c       	add	r2, r10
    21e0:	3b 1c       	adc	r3, r11
    21e2:	f5 01       	movw	r30, r10
    21e4:	80 80       	ld	r8, Z
    21e6:	91 80       	ldd	r9, Z+1	; 0x01
    21e8:	16 ff       	sbrs	r17, 6
    21ea:	03 c0       	rjmp	.+6      	; 0x21f2 <__stack+0xf3>
    21ec:	6f 2d       	mov	r22, r15
    21ee:	70 e0       	ldi	r23, 0x00	; 0
    21f0:	02 c0       	rjmp	.+4      	; 0x21f6 <__stack+0xf7>
    21f2:	6f ef       	ldi	r22, 0xFF	; 255
    21f4:	7f ef       	ldi	r23, 0xFF	; 255
    21f6:	c4 01       	movw	r24, r8
    21f8:	47 d1       	rcall	.+654    	; 0x2488 <strnlen>
    21fa:	6c 01       	movw	r12, r24
    21fc:	51 01       	movw	r10, r2
    21fe:	1f 77       	andi	r17, 0x7F	; 127
    2200:	14 c0       	rjmp	.+40     	; 0x222a <__stack+0x12b>
    2202:	82 e0       	ldi	r24, 0x02	; 2
    2204:	28 2e       	mov	r2, r24
    2206:	31 2c       	mov	r3, r1
    2208:	2a 0c       	add	r2, r10
    220a:	3b 1c       	adc	r3, r11
    220c:	f5 01       	movw	r30, r10
    220e:	80 80       	ld	r8, Z
    2210:	91 80       	ldd	r9, Z+1	; 0x01
    2212:	16 ff       	sbrs	r17, 6
    2214:	03 c0       	rjmp	.+6      	; 0x221c <__stack+0x11d>
    2216:	6f 2d       	mov	r22, r15
    2218:	70 e0       	ldi	r23, 0x00	; 0
    221a:	02 c0       	rjmp	.+4      	; 0x2220 <__stack+0x121>
    221c:	6f ef       	ldi	r22, 0xFF	; 255
    221e:	7f ef       	ldi	r23, 0xFF	; 255
    2220:	c4 01       	movw	r24, r8
    2222:	27 d1       	rcall	.+590    	; 0x2472 <strnlen_P>
    2224:	6c 01       	movw	r12, r24
    2226:	10 68       	ori	r17, 0x80	; 128
    2228:	51 01       	movw	r10, r2
    222a:	13 fd       	sbrc	r17, 3
    222c:	1a c0       	rjmp	.+52     	; 0x2262 <__stack+0x163>
    222e:	05 c0       	rjmp	.+10     	; 0x223a <__stack+0x13b>
    2230:	80 e2       	ldi	r24, 0x20	; 32
    2232:	90 e0       	ldi	r25, 0x00	; 0
    2234:	b3 01       	movw	r22, r6
    2236:	a6 de       	rcall	.-692    	; 0x1f84 <fputc>
    2238:	ea 94       	dec	r14
    223a:	8e 2d       	mov	r24, r14
    223c:	90 e0       	ldi	r25, 0x00	; 0
    223e:	c8 16       	cp	r12, r24
    2240:	d9 06       	cpc	r13, r25
    2242:	b0 f3       	brcs	.-20     	; 0x2230 <__stack+0x131>
    2244:	0e c0       	rjmp	.+28     	; 0x2262 <__stack+0x163>
    2246:	f4 01       	movw	r30, r8
    2248:	17 fd       	sbrc	r17, 7
    224a:	85 91       	lpm	r24, Z+
    224c:	17 ff       	sbrs	r17, 7
    224e:	81 91       	ld	r24, Z+
    2250:	4f 01       	movw	r8, r30
    2252:	90 e0       	ldi	r25, 0x00	; 0
    2254:	b3 01       	movw	r22, r6
    2256:	96 de       	rcall	.-724    	; 0x1f84 <fputc>
    2258:	e1 10       	cpse	r14, r1
    225a:	ea 94       	dec	r14
    225c:	08 94       	sec
    225e:	c1 08       	sbc	r12, r1
    2260:	d1 08       	sbc	r13, r1
    2262:	c1 14       	cp	r12, r1
    2264:	d1 04       	cpc	r13, r1
    2266:	79 f7       	brne	.-34     	; 0x2246 <__stack+0x147>
    2268:	df c0       	rjmp	.+446    	; 0x2428 <__stack+0x329>
    226a:	84 36       	cpi	r24, 0x64	; 100
    226c:	11 f0       	breq	.+4      	; 0x2272 <__stack+0x173>
    226e:	89 36       	cpi	r24, 0x69	; 105
    2270:	49 f5       	brne	.+82     	; 0x22c4 <__stack+0x1c5>
    2272:	f5 01       	movw	r30, r10
    2274:	17 ff       	sbrs	r17, 7
    2276:	07 c0       	rjmp	.+14     	; 0x2286 <__stack+0x187>
    2278:	80 81       	ld	r24, Z
    227a:	91 81       	ldd	r25, Z+1	; 0x01
    227c:	a2 81       	ldd	r26, Z+2	; 0x02
    227e:	b3 81       	ldd	r27, Z+3	; 0x03
    2280:	24 e0       	ldi	r18, 0x04	; 4
    2282:	30 e0       	ldi	r19, 0x00	; 0
    2284:	08 c0       	rjmp	.+16     	; 0x2296 <__stack+0x197>
    2286:	80 81       	ld	r24, Z
    2288:	91 81       	ldd	r25, Z+1	; 0x01
    228a:	aa 27       	eor	r26, r26
    228c:	97 fd       	sbrc	r25, 7
    228e:	a0 95       	com	r26
    2290:	ba 2f       	mov	r27, r26
    2292:	22 e0       	ldi	r18, 0x02	; 2
    2294:	30 e0       	ldi	r19, 0x00	; 0
    2296:	a2 0e       	add	r10, r18
    2298:	b3 1e       	adc	r11, r19
    229a:	01 2f       	mov	r16, r17
    229c:	0f 76       	andi	r16, 0x6F	; 111
    229e:	b7 ff       	sbrs	r27, 7
    22a0:	08 c0       	rjmp	.+16     	; 0x22b2 <__stack+0x1b3>
    22a2:	b0 95       	com	r27
    22a4:	a0 95       	com	r26
    22a6:	90 95       	com	r25
    22a8:	81 95       	neg	r24
    22aa:	9f 4f       	sbci	r25, 0xFF	; 255
    22ac:	af 4f       	sbci	r26, 0xFF	; 255
    22ae:	bf 4f       	sbci	r27, 0xFF	; 255
    22b0:	00 68       	ori	r16, 0x80	; 128
    22b2:	bc 01       	movw	r22, r24
    22b4:	cd 01       	movw	r24, r26
    22b6:	a2 01       	movw	r20, r4
    22b8:	2a e0       	ldi	r18, 0x0A	; 10
    22ba:	30 e0       	ldi	r19, 0x00	; 0
    22bc:	f0 d0       	rcall	.+480    	; 0x249e <__ultoa_invert>
    22be:	d8 2e       	mov	r13, r24
    22c0:	d4 18       	sub	r13, r4
    22c2:	3e c0       	rjmp	.+124    	; 0x2340 <__stack+0x241>
    22c4:	85 37       	cpi	r24, 0x75	; 117
    22c6:	21 f4       	brne	.+8      	; 0x22d0 <__stack+0x1d1>
    22c8:	1f 7e       	andi	r17, 0xEF	; 239
    22ca:	2a e0       	ldi	r18, 0x0A	; 10
    22cc:	30 e0       	ldi	r19, 0x00	; 0
    22ce:	20 c0       	rjmp	.+64     	; 0x2310 <__stack+0x211>
    22d0:	19 7f       	andi	r17, 0xF9	; 249
    22d2:	8f 36       	cpi	r24, 0x6F	; 111
    22d4:	a9 f0       	breq	.+42     	; 0x2300 <__stack+0x201>
    22d6:	80 37       	cpi	r24, 0x70	; 112
    22d8:	20 f4       	brcc	.+8      	; 0x22e2 <__stack+0x1e3>
    22da:	88 35       	cpi	r24, 0x58	; 88
    22dc:	09 f0       	breq	.+2      	; 0x22e0 <__stack+0x1e1>
    22de:	a7 c0       	rjmp	.+334    	; 0x242e <__stack+0x32f>
    22e0:	0b c0       	rjmp	.+22     	; 0x22f8 <__stack+0x1f9>
    22e2:	80 37       	cpi	r24, 0x70	; 112
    22e4:	21 f0       	breq	.+8      	; 0x22ee <__stack+0x1ef>
    22e6:	88 37       	cpi	r24, 0x78	; 120
    22e8:	09 f0       	breq	.+2      	; 0x22ec <__stack+0x1ed>
    22ea:	a1 c0       	rjmp	.+322    	; 0x242e <__stack+0x32f>
    22ec:	01 c0       	rjmp	.+2      	; 0x22f0 <__stack+0x1f1>
    22ee:	10 61       	ori	r17, 0x10	; 16
    22f0:	14 ff       	sbrs	r17, 4
    22f2:	09 c0       	rjmp	.+18     	; 0x2306 <__stack+0x207>
    22f4:	14 60       	ori	r17, 0x04	; 4
    22f6:	07 c0       	rjmp	.+14     	; 0x2306 <__stack+0x207>
    22f8:	14 ff       	sbrs	r17, 4
    22fa:	08 c0       	rjmp	.+16     	; 0x230c <__stack+0x20d>
    22fc:	16 60       	ori	r17, 0x06	; 6
    22fe:	06 c0       	rjmp	.+12     	; 0x230c <__stack+0x20d>
    2300:	28 e0       	ldi	r18, 0x08	; 8
    2302:	30 e0       	ldi	r19, 0x00	; 0
    2304:	05 c0       	rjmp	.+10     	; 0x2310 <__stack+0x211>
    2306:	20 e1       	ldi	r18, 0x10	; 16
    2308:	30 e0       	ldi	r19, 0x00	; 0
    230a:	02 c0       	rjmp	.+4      	; 0x2310 <__stack+0x211>
    230c:	20 e1       	ldi	r18, 0x10	; 16
    230e:	32 e0       	ldi	r19, 0x02	; 2
    2310:	f5 01       	movw	r30, r10
    2312:	17 ff       	sbrs	r17, 7
    2314:	07 c0       	rjmp	.+14     	; 0x2324 <__stack+0x225>
    2316:	60 81       	ld	r22, Z
    2318:	71 81       	ldd	r23, Z+1	; 0x01
    231a:	82 81       	ldd	r24, Z+2	; 0x02
    231c:	93 81       	ldd	r25, Z+3	; 0x03
    231e:	44 e0       	ldi	r20, 0x04	; 4
    2320:	50 e0       	ldi	r21, 0x00	; 0
    2322:	06 c0       	rjmp	.+12     	; 0x2330 <__stack+0x231>
    2324:	60 81       	ld	r22, Z
    2326:	71 81       	ldd	r23, Z+1	; 0x01
    2328:	80 e0       	ldi	r24, 0x00	; 0
    232a:	90 e0       	ldi	r25, 0x00	; 0
    232c:	42 e0       	ldi	r20, 0x02	; 2
    232e:	50 e0       	ldi	r21, 0x00	; 0
    2330:	a4 0e       	add	r10, r20
    2332:	b5 1e       	adc	r11, r21
    2334:	a2 01       	movw	r20, r4
    2336:	b3 d0       	rcall	.+358    	; 0x249e <__ultoa_invert>
    2338:	d8 2e       	mov	r13, r24
    233a:	d4 18       	sub	r13, r4
    233c:	01 2f       	mov	r16, r17
    233e:	0f 77       	andi	r16, 0x7F	; 127
    2340:	06 ff       	sbrs	r16, 6
    2342:	09 c0       	rjmp	.+18     	; 0x2356 <__stack+0x257>
    2344:	0e 7f       	andi	r16, 0xFE	; 254
    2346:	df 14       	cp	r13, r15
    2348:	30 f4       	brcc	.+12     	; 0x2356 <__stack+0x257>
    234a:	04 ff       	sbrs	r16, 4
    234c:	06 c0       	rjmp	.+12     	; 0x235a <__stack+0x25b>
    234e:	02 fd       	sbrc	r16, 2
    2350:	04 c0       	rjmp	.+8      	; 0x235a <__stack+0x25b>
    2352:	0f 7e       	andi	r16, 0xEF	; 239
    2354:	02 c0       	rjmp	.+4      	; 0x235a <__stack+0x25b>
    2356:	1d 2d       	mov	r17, r13
    2358:	01 c0       	rjmp	.+2      	; 0x235c <__stack+0x25d>
    235a:	1f 2d       	mov	r17, r15
    235c:	80 2f       	mov	r24, r16
    235e:	90 e0       	ldi	r25, 0x00	; 0
    2360:	04 ff       	sbrs	r16, 4
    2362:	0c c0       	rjmp	.+24     	; 0x237c <__stack+0x27d>
    2364:	fe 01       	movw	r30, r28
    2366:	ed 0d       	add	r30, r13
    2368:	f1 1d       	adc	r31, r1
    236a:	20 81       	ld	r18, Z
    236c:	20 33       	cpi	r18, 0x30	; 48
    236e:	11 f4       	brne	.+4      	; 0x2374 <__stack+0x275>
    2370:	09 7e       	andi	r16, 0xE9	; 233
    2372:	09 c0       	rjmp	.+18     	; 0x2386 <__stack+0x287>
    2374:	02 ff       	sbrs	r16, 2
    2376:	06 c0       	rjmp	.+12     	; 0x2384 <__stack+0x285>
    2378:	1e 5f       	subi	r17, 0xFE	; 254
    237a:	05 c0       	rjmp	.+10     	; 0x2386 <__stack+0x287>
    237c:	86 78       	andi	r24, 0x86	; 134
    237e:	90 70       	andi	r25, 0x00	; 0
    2380:	00 97       	sbiw	r24, 0x00	; 0
    2382:	09 f0       	breq	.+2      	; 0x2386 <__stack+0x287>
    2384:	1f 5f       	subi	r17, 0xFF	; 255
    2386:	80 2e       	mov	r8, r16
    2388:	99 24       	eor	r9, r9
    238a:	03 fd       	sbrc	r16, 3
    238c:	11 c0       	rjmp	.+34     	; 0x23b0 <__stack+0x2b1>
    238e:	00 ff       	sbrs	r16, 0
    2390:	0c c0       	rjmp	.+24     	; 0x23aa <__stack+0x2ab>
    2392:	fd 2c       	mov	r15, r13
    2394:	1e 15       	cp	r17, r14
    2396:	48 f4       	brcc	.+18     	; 0x23aa <__stack+0x2ab>
    2398:	fe 0c       	add	r15, r14
    239a:	f1 1a       	sub	r15, r17
    239c:	1e 2d       	mov	r17, r14
    239e:	05 c0       	rjmp	.+10     	; 0x23aa <__stack+0x2ab>
    23a0:	80 e2       	ldi	r24, 0x20	; 32
    23a2:	90 e0       	ldi	r25, 0x00	; 0
    23a4:	b3 01       	movw	r22, r6
    23a6:	ee dd       	rcall	.-1060   	; 0x1f84 <fputc>
    23a8:	1f 5f       	subi	r17, 0xFF	; 255
    23aa:	1e 15       	cp	r17, r14
    23ac:	c8 f3       	brcs	.-14     	; 0x23a0 <__stack+0x2a1>
    23ae:	04 c0       	rjmp	.+8      	; 0x23b8 <__stack+0x2b9>
    23b0:	1e 15       	cp	r17, r14
    23b2:	10 f4       	brcc	.+4      	; 0x23b8 <__stack+0x2b9>
    23b4:	e1 1a       	sub	r14, r17
    23b6:	01 c0       	rjmp	.+2      	; 0x23ba <__stack+0x2bb>
    23b8:	ee 24       	eor	r14, r14
    23ba:	84 fe       	sbrs	r8, 4
    23bc:	0e c0       	rjmp	.+28     	; 0x23da <__stack+0x2db>
    23be:	80 e3       	ldi	r24, 0x30	; 48
    23c0:	90 e0       	ldi	r25, 0x00	; 0
    23c2:	b3 01       	movw	r22, r6
    23c4:	df dd       	rcall	.-1090   	; 0x1f84 <fputc>
    23c6:	82 fe       	sbrs	r8, 2
    23c8:	1d c0       	rjmp	.+58     	; 0x2404 <__stack+0x305>
    23ca:	81 fe       	sbrs	r8, 1
    23cc:	03 c0       	rjmp	.+6      	; 0x23d4 <__stack+0x2d5>
    23ce:	88 e5       	ldi	r24, 0x58	; 88
    23d0:	90 e0       	ldi	r25, 0x00	; 0
    23d2:	10 c0       	rjmp	.+32     	; 0x23f4 <__stack+0x2f5>
    23d4:	88 e7       	ldi	r24, 0x78	; 120
    23d6:	90 e0       	ldi	r25, 0x00	; 0
    23d8:	0d c0       	rjmp	.+26     	; 0x23f4 <__stack+0x2f5>
    23da:	c4 01       	movw	r24, r8
    23dc:	86 78       	andi	r24, 0x86	; 134
    23de:	90 70       	andi	r25, 0x00	; 0
    23e0:	00 97       	sbiw	r24, 0x00	; 0
    23e2:	81 f0       	breq	.+32     	; 0x2404 <__stack+0x305>
    23e4:	81 fc       	sbrc	r8, 1
    23e6:	02 c0       	rjmp	.+4      	; 0x23ec <__stack+0x2ed>
    23e8:	80 e2       	ldi	r24, 0x20	; 32
    23ea:	01 c0       	rjmp	.+2      	; 0x23ee <__stack+0x2ef>
    23ec:	8b e2       	ldi	r24, 0x2B	; 43
    23ee:	07 fd       	sbrc	r16, 7
    23f0:	8d e2       	ldi	r24, 0x2D	; 45
    23f2:	90 e0       	ldi	r25, 0x00	; 0
    23f4:	b3 01       	movw	r22, r6
    23f6:	c6 dd       	rcall	.-1140   	; 0x1f84 <fputc>
    23f8:	05 c0       	rjmp	.+10     	; 0x2404 <__stack+0x305>
    23fa:	80 e3       	ldi	r24, 0x30	; 48
    23fc:	90 e0       	ldi	r25, 0x00	; 0
    23fe:	b3 01       	movw	r22, r6
    2400:	c1 dd       	rcall	.-1150   	; 0x1f84 <fputc>
    2402:	fa 94       	dec	r15
    2404:	df 14       	cp	r13, r15
    2406:	c8 f3       	brcs	.-14     	; 0x23fa <__stack+0x2fb>
    2408:	da 94       	dec	r13
    240a:	f2 01       	movw	r30, r4
    240c:	ed 0d       	add	r30, r13
    240e:	f1 1d       	adc	r31, r1
    2410:	80 81       	ld	r24, Z
    2412:	90 e0       	ldi	r25, 0x00	; 0
    2414:	b3 01       	movw	r22, r6
    2416:	b6 dd       	rcall	.-1172   	; 0x1f84 <fputc>
    2418:	dd 20       	and	r13, r13
    241a:	b1 f7       	brne	.-20     	; 0x2408 <__stack+0x309>
    241c:	05 c0       	rjmp	.+10     	; 0x2428 <__stack+0x329>
    241e:	80 e2       	ldi	r24, 0x20	; 32
    2420:	90 e0       	ldi	r25, 0x00	; 0
    2422:	b3 01       	movw	r22, r6
    2424:	af dd       	rcall	.-1186   	; 0x1f84 <fputc>
    2426:	ea 94       	dec	r14
    2428:	ee 20       	and	r14, r14
    242a:	c9 f7       	brne	.-14     	; 0x241e <__stack+0x31f>
    242c:	4d ce       	rjmp	.-870    	; 0x20c8 <vfprintf+0x50>
    242e:	f3 01       	movw	r30, r6
    2430:	86 81       	ldd	r24, Z+6	; 0x06
    2432:	97 81       	ldd	r25, Z+7	; 0x07
    2434:	02 c0       	rjmp	.+4      	; 0x243a <__stack+0x33b>
    2436:	8f ef       	ldi	r24, 0xFF	; 255
    2438:	9f ef       	ldi	r25, 0xFF	; 255
    243a:	2d 96       	adiw	r28, 0x0d	; 13
    243c:	0f b6       	in	r0, 0x3f	; 63
    243e:	f8 94       	cli
    2440:	de bf       	out	0x3e, r29	; 62
    2442:	0f be       	out	0x3f, r0	; 63
    2444:	cd bf       	out	0x3d, r28	; 61
    2446:	df 91       	pop	r29
    2448:	cf 91       	pop	r28
    244a:	1f 91       	pop	r17
    244c:	0f 91       	pop	r16
    244e:	ff 90       	pop	r15
    2450:	ef 90       	pop	r14
    2452:	df 90       	pop	r13
    2454:	cf 90       	pop	r12
    2456:	bf 90       	pop	r11
    2458:	af 90       	pop	r10
    245a:	9f 90       	pop	r9
    245c:	8f 90       	pop	r8
    245e:	7f 90       	pop	r7
    2460:	6f 90       	pop	r6
    2462:	5f 90       	pop	r5
    2464:	4f 90       	pop	r4
    2466:	3f 90       	pop	r3
    2468:	2f 90       	pop	r2
    246a:	08 95       	ret

0000246c <__ctype_isfalse>:
    246c:	99 27       	eor	r25, r25
    246e:	88 27       	eor	r24, r24

00002470 <__ctype_istrue>:
    2470:	08 95       	ret

00002472 <strnlen_P>:
    2472:	fc 01       	movw	r30, r24
    2474:	05 90       	lpm	r0, Z+
    2476:	61 50       	subi	r22, 0x01	; 1
    2478:	70 40       	sbci	r23, 0x00	; 0
    247a:	01 10       	cpse	r0, r1
    247c:	d8 f7       	brcc	.-10     	; 0x2474 <strnlen_P+0x2>
    247e:	80 95       	com	r24
    2480:	90 95       	com	r25
    2482:	8e 0f       	add	r24, r30
    2484:	9f 1f       	adc	r25, r31
    2486:	08 95       	ret

00002488 <strnlen>:
    2488:	fc 01       	movw	r30, r24
    248a:	61 50       	subi	r22, 0x01	; 1
    248c:	70 40       	sbci	r23, 0x00	; 0
    248e:	01 90       	ld	r0, Z+
    2490:	01 10       	cpse	r0, r1
    2492:	d8 f7       	brcc	.-10     	; 0x248a <strnlen+0x2>
    2494:	80 95       	com	r24
    2496:	90 95       	com	r25
    2498:	8e 0f       	add	r24, r30
    249a:	9f 1f       	adc	r25, r31
    249c:	08 95       	ret

0000249e <__ultoa_invert>:
    249e:	fa 01       	movw	r30, r20
    24a0:	aa 27       	eor	r26, r26
    24a2:	28 30       	cpi	r18, 0x08	; 8
    24a4:	51 f1       	breq	.+84     	; 0x24fa <__ultoa_invert+0x5c>
    24a6:	20 31       	cpi	r18, 0x10	; 16
    24a8:	81 f1       	breq	.+96     	; 0x250a <__ultoa_invert+0x6c>
    24aa:	e8 94       	clt
    24ac:	6f 93       	push	r22
    24ae:	6e 7f       	andi	r22, 0xFE	; 254
    24b0:	6e 5f       	subi	r22, 0xFE	; 254
    24b2:	7f 4f       	sbci	r23, 0xFF	; 255
    24b4:	8f 4f       	sbci	r24, 0xFF	; 255
    24b6:	9f 4f       	sbci	r25, 0xFF	; 255
    24b8:	af 4f       	sbci	r26, 0xFF	; 255
    24ba:	b1 e0       	ldi	r27, 0x01	; 1
    24bc:	3e d0       	rcall	.+124    	; 0x253a <__ultoa_invert+0x9c>
    24be:	b4 e0       	ldi	r27, 0x04	; 4
    24c0:	3c d0       	rcall	.+120    	; 0x253a <__ultoa_invert+0x9c>
    24c2:	67 0f       	add	r22, r23
    24c4:	78 1f       	adc	r23, r24
    24c6:	89 1f       	adc	r24, r25
    24c8:	9a 1f       	adc	r25, r26
    24ca:	a1 1d       	adc	r26, r1
    24cc:	68 0f       	add	r22, r24
    24ce:	79 1f       	adc	r23, r25
    24d0:	8a 1f       	adc	r24, r26
    24d2:	91 1d       	adc	r25, r1
    24d4:	a1 1d       	adc	r26, r1
    24d6:	6a 0f       	add	r22, r26
    24d8:	71 1d       	adc	r23, r1
    24da:	81 1d       	adc	r24, r1
    24dc:	91 1d       	adc	r25, r1
    24de:	a1 1d       	adc	r26, r1
    24e0:	20 d0       	rcall	.+64     	; 0x2522 <__ultoa_invert+0x84>
    24e2:	09 f4       	brne	.+2      	; 0x24e6 <__ultoa_invert+0x48>
    24e4:	68 94       	set
    24e6:	3f 91       	pop	r19
    24e8:	2a e0       	ldi	r18, 0x0A	; 10
    24ea:	26 9f       	mul	r18, r22
    24ec:	11 24       	eor	r1, r1
    24ee:	30 19       	sub	r19, r0
    24f0:	30 5d       	subi	r19, 0xD0	; 208
    24f2:	31 93       	st	Z+, r19
    24f4:	de f6       	brtc	.-74     	; 0x24ac <__ultoa_invert+0xe>
    24f6:	cf 01       	movw	r24, r30
    24f8:	08 95       	ret
    24fa:	46 2f       	mov	r20, r22
    24fc:	47 70       	andi	r20, 0x07	; 7
    24fe:	40 5d       	subi	r20, 0xD0	; 208
    2500:	41 93       	st	Z+, r20
    2502:	b3 e0       	ldi	r27, 0x03	; 3
    2504:	0f d0       	rcall	.+30     	; 0x2524 <__ultoa_invert+0x86>
    2506:	c9 f7       	brne	.-14     	; 0x24fa <__ultoa_invert+0x5c>
    2508:	f6 cf       	rjmp	.-20     	; 0x24f6 <__ultoa_invert+0x58>
    250a:	46 2f       	mov	r20, r22
    250c:	4f 70       	andi	r20, 0x0F	; 15
    250e:	40 5d       	subi	r20, 0xD0	; 208
    2510:	4a 33       	cpi	r20, 0x3A	; 58
    2512:	18 f0       	brcs	.+6      	; 0x251a <__ultoa_invert+0x7c>
    2514:	49 5d       	subi	r20, 0xD9	; 217
    2516:	31 fd       	sbrc	r19, 1
    2518:	40 52       	subi	r20, 0x20	; 32
    251a:	41 93       	st	Z+, r20
    251c:	02 d0       	rcall	.+4      	; 0x2522 <__ultoa_invert+0x84>
    251e:	a9 f7       	brne	.-22     	; 0x250a <__ultoa_invert+0x6c>
    2520:	ea cf       	rjmp	.-44     	; 0x24f6 <__ultoa_invert+0x58>
    2522:	b4 e0       	ldi	r27, 0x04	; 4
    2524:	a6 95       	lsr	r26
    2526:	97 95       	ror	r25
    2528:	87 95       	ror	r24
    252a:	77 95       	ror	r23
    252c:	67 95       	ror	r22
    252e:	ba 95       	dec	r27
    2530:	c9 f7       	brne	.-14     	; 0x2524 <__ultoa_invert+0x86>
    2532:	00 97       	sbiw	r24, 0x00	; 0
    2534:	61 05       	cpc	r22, r1
    2536:	71 05       	cpc	r23, r1
    2538:	08 95       	ret
    253a:	9b 01       	movw	r18, r22
    253c:	ac 01       	movw	r20, r24
    253e:	0a 2e       	mov	r0, r26
    2540:	06 94       	lsr	r0
    2542:	57 95       	ror	r21
    2544:	47 95       	ror	r20
    2546:	37 95       	ror	r19
    2548:	27 95       	ror	r18
    254a:	ba 95       	dec	r27
    254c:	c9 f7       	brne	.-14     	; 0x2540 <__ultoa_invert+0xa2>
    254e:	62 0f       	add	r22, r18
    2550:	73 1f       	adc	r23, r19
    2552:	84 1f       	adc	r24, r20
    2554:	95 1f       	adc	r25, r21
    2556:	a0 1d       	adc	r26, r0
    2558:	08 95       	ret

0000255a <_exit>:
    255a:	f8 94       	cli

0000255c <__stop_program>:
    255c:	ff cf       	rjmp	.-2      	; 0x255c <__stop_program>
