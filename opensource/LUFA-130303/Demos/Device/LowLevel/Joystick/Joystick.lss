
Joystick.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00000c1a  00000cae  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000c1a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000f  00800100  00800100  00000cae  2**0
                  ALLOC
  3 .stab         00000870  00000000  00000000  00000cb0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000013a  00000000  00000000  00001520  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000338  00000000  00000000  00001660  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00004e3a  00000000  00000000  00001998  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000012bd  00000000  00000000  000067d2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002748  00000000  00000000  00007a8f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000008c0  00000000  00000000  0000a1d8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000023e5  00000000  00000000  0000aa98  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000036de  00000000  00000000  0000ce7d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000510  00000000  00000000  0001055b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	a3 c0       	rjmp	.+326    	; 0x148 <__ctors_end>
   2:	00 00       	nop
   4:	bf c0       	rjmp	.+382    	; 0x184 <__bad_interrupt>
   6:	00 00       	nop
   8:	bd c0       	rjmp	.+378    	; 0x184 <__bad_interrupt>
   a:	00 00       	nop
   c:	bb c0       	rjmp	.+374    	; 0x184 <__bad_interrupt>
   e:	00 00       	nop
  10:	b9 c0       	rjmp	.+370    	; 0x184 <__bad_interrupt>
  12:	00 00       	nop
  14:	b7 c0       	rjmp	.+366    	; 0x184 <__bad_interrupt>
  16:	00 00       	nop
  18:	b5 c0       	rjmp	.+362    	; 0x184 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	b3 c0       	rjmp	.+358    	; 0x184 <__bad_interrupt>
  1e:	00 00       	nop
  20:	b1 c0       	rjmp	.+354    	; 0x184 <__bad_interrupt>
  22:	00 00       	nop
  24:	af c0       	rjmp	.+350    	; 0x184 <__bad_interrupt>
  26:	00 00       	nop
  28:	ab c3       	rjmp	.+1878   	; 0x780 <__vector_10>
  2a:	00 00       	nop
  2c:	ab c0       	rjmp	.+342    	; 0x184 <__bad_interrupt>
  2e:	00 00       	nop
  30:	a9 c0       	rjmp	.+338    	; 0x184 <__bad_interrupt>
  32:	00 00       	nop
  34:	a7 c0       	rjmp	.+334    	; 0x184 <__bad_interrupt>
  36:	00 00       	nop
  38:	a5 c0       	rjmp	.+330    	; 0x184 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	a3 c0       	rjmp	.+326    	; 0x184 <__bad_interrupt>
  3e:	00 00       	nop
  40:	a1 c0       	rjmp	.+322    	; 0x184 <__bad_interrupt>
  42:	00 00       	nop
  44:	9f c0       	rjmp	.+318    	; 0x184 <__bad_interrupt>
  46:	00 00       	nop
  48:	9d c0       	rjmp	.+314    	; 0x184 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	9b c0       	rjmp	.+310    	; 0x184 <__bad_interrupt>
  4e:	00 00       	nop
  50:	99 c0       	rjmp	.+306    	; 0x184 <__bad_interrupt>
  52:	00 00       	nop
  54:	97 c0       	rjmp	.+302    	; 0x184 <__bad_interrupt>
  56:	00 00       	nop
  58:	95 c0       	rjmp	.+298    	; 0x184 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	93 c0       	rjmp	.+294    	; 0x184 <__bad_interrupt>
  5e:	00 00       	nop
  60:	91 c0       	rjmp	.+290    	; 0x184 <__bad_interrupt>
  62:	00 00       	nop
  64:	8f c0       	rjmp	.+286    	; 0x184 <__bad_interrupt>
  66:	00 00       	nop
  68:	8d c0       	rjmp	.+282    	; 0x184 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	8b c0       	rjmp	.+278    	; 0x184 <__bad_interrupt>
  6e:	00 00       	nop
  70:	89 c0       	rjmp	.+274    	; 0x184 <__bad_interrupt>
  72:	00 00       	nop
  74:	87 c0       	rjmp	.+270    	; 0x184 <__bad_interrupt>
  76:	00 00       	nop
  78:	85 c0       	rjmp	.+266    	; 0x184 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	83 c0       	rjmp	.+262    	; 0x184 <__bad_interrupt>
  7e:	00 00       	nop
  80:	81 c0       	rjmp	.+258    	; 0x184 <__bad_interrupt>
  82:	00 00       	nop
  84:	7f c0       	rjmp	.+254    	; 0x184 <__bad_interrupt>
  86:	00 00       	nop
  88:	7d c0       	rjmp	.+250    	; 0x184 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	7b c0       	rjmp	.+246    	; 0x184 <__bad_interrupt>
  8e:	00 00       	nop
  90:	79 c0       	rjmp	.+242    	; 0x184 <__bad_interrupt>
  92:	00 00       	nop
  94:	77 c0       	rjmp	.+238    	; 0x184 <__bad_interrupt>
  96:	00 00       	nop

00000098 <ProductString>:
  98:	26 03 4c 00 55 00 46 00 41 00 20 00 4a 00 6f 00     &.L.U.F.A. .J.o.
  a8:	79 00 73 00 74 00 69 00 63 00 6b 00 20 00 44 00     y.s.t.i.c.k. .D.
  b8:	65 00 6d 00 6f 00 00 00                             e.m.o...

000000c0 <ManufacturerString>:
  c0:	18 03 44 00 65 00 61 00 6e 00 20 00 43 00 61 00     ..D.e.a.n. .C.a.
  d0:	6d 00 65 00 72 00 61 00 00 00                       m.e.r.a...

000000da <LanguageString>:
  da:	04 03 09 04                                         ....

000000de <ConfigurationDescriptor>:
  de:	09 02 22 00 01 01 00 c0 32 09 04 00 00 01 03 00     ..".....2.......
  ee:	00 00 09 21 11 01 00 01 22 36 00 07 05 81 03 08     ...!...."6......
  fe:	00 05                                               ..

00000100 <DeviceDescriptor>:
 100:	12 01 10 01 00 00 00 08 eb 03 43 20 01 00 01 02     ..........C ....
 110:	00 01                                               ..

00000112 <JoystickReport>:
 112:	05 01 09 04 a1 01 09 01 a1 00 09 30 09 31 09 32     ...........0.1.2
 122:	15 9c 25 64 35 ff 45 01 95 03 75 08 81 02 c0 05     ..%d5.E...u.....
 132:	09 19 01 29 02 15 00 25 01 75 01 95 02 81 02 75     ...)...%.u.....u
 142:	06 95 01 81 01 c0                                   ......

00000148 <__ctors_end>:
 148:	11 24       	eor	r1, r1
 14a:	1f be       	out	0x3f, r1	; 63
 14c:	cf ef       	ldi	r28, 0xFF	; 255
 14e:	d0 e2       	ldi	r29, 0x20	; 32
 150:	de bf       	out	0x3e, r29	; 62
 152:	cd bf       	out	0x3d, r28	; 61

00000154 <__do_copy_data>:
 154:	11 e0       	ldi	r17, 0x01	; 1
 156:	a0 e0       	ldi	r26, 0x00	; 0
 158:	b1 e0       	ldi	r27, 0x01	; 1
 15a:	ea e1       	ldi	r30, 0x1A	; 26
 15c:	fc e0       	ldi	r31, 0x0C	; 12
 15e:	00 e0       	ldi	r16, 0x00	; 0
 160:	0b bf       	out	0x3b, r16	; 59
 162:	02 c0       	rjmp	.+4      	; 0x168 <__do_copy_data+0x14>
 164:	07 90       	elpm	r0, Z+
 166:	0d 92       	st	X+, r0
 168:	a0 30       	cpi	r26, 0x00	; 0
 16a:	b1 07       	cpc	r27, r17
 16c:	d9 f7       	brne	.-10     	; 0x164 <__do_copy_data+0x10>
 16e:	1b be       	out	0x3b, r1	; 59

00000170 <__do_clear_bss>:
 170:	11 e0       	ldi	r17, 0x01	; 1
 172:	a0 e0       	ldi	r26, 0x00	; 0
 174:	b1 e0       	ldi	r27, 0x01	; 1
 176:	01 c0       	rjmp	.+2      	; 0x17a <.do_clear_bss_start>

00000178 <.do_clear_bss_loop>:
 178:	1d 92       	st	X+, r1

0000017a <.do_clear_bss_start>:
 17a:	af 30       	cpi	r26, 0x0F	; 15
 17c:	b1 07       	cpc	r27, r17
 17e:	e1 f7       	brne	.-8      	; 0x178 <.do_clear_bss_loop>
 180:	c9 d0       	rcall	.+402    	; 0x314 <main>
 182:	49 c5       	rjmp	.+2706   	; 0xc16 <_exit>

00000184 <__bad_interrupt>:
 184:	3d cf       	rjmp	.-390    	; 0x0 <__vectors>

00000186 <LEDs_SetAllLEDs>:
				PORTD &= ~LEDMask;
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
			{
				PORTD = ((PORTD & ~LEDS_ALL_LEDS) | LEDMask);
 186:	9b b1       	in	r25, 0x0b	; 11
 188:	9f 70       	andi	r25, 0x0F	; 15
 18a:	98 2b       	or	r25, r24
 18c:	9b b9       	out	0x0b, r25	; 11
			}
 18e:	08 95       	ret

00000190 <SetupHardware>:

/** Configures the board hardware and chip peripherals for the demo's functionality. */
void SetupHardware(void)
{
	/* Disable watchdog if enabled by bootloader/fuses */
	MCUSR &= ~(1 << WDRF);
 190:	84 b7       	in	r24, 0x34	; 52
 192:	87 7f       	andi	r24, 0xF7	; 247
 194:	84 bf       	out	0x34, r24	; 52
	wdt_disable();
 196:	88 e1       	ldi	r24, 0x18	; 24
 198:	0f b6       	in	r0, 0x3f	; 63
 19a:	f8 94       	cli
 19c:	80 93 60 00 	sts	0x0060, r24
 1a0:	10 92 60 00 	sts	0x0060, r1
 1a4:	0f be       	out	0x3f, r0	; 63
The type of x is clock_div_t.
*/
void clock_prescale_set(clock_div_t __x)
{
    uint8_t __tmp = _BV(CLKPCE);
    __asm__ __volatile__ (
 1a6:	90 e0       	ldi	r25, 0x00	; 0
 1a8:	80 e8       	ldi	r24, 0x80	; 128
 1aa:	0f b6       	in	r0, 0x3f	; 63
 1ac:	f8 94       	cli
 1ae:	80 93 61 00 	sts	0x0061, r24
 1b2:	90 93 61 00 	sts	0x0061, r25
 1b6:	0f be       	out	0x3f, r0	; 63

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void Joystick_Init(void)
			{
				DDRB  &= ~JOY_BMASK;
 1b8:	84 b1       	in	r24, 0x04	; 4
 1ba:	8f 71       	andi	r24, 0x1F	; 31
 1bc:	84 b9       	out	0x04, r24	; 4
				DDRE  &= ~JOY_EMASK;
 1be:	8d b1       	in	r24, 0x0d	; 13
 1c0:	8f 7c       	andi	r24, 0xCF	; 207
 1c2:	8d b9       	out	0x0d, r24	; 13

				PORTB |=  JOY_BMASK;
 1c4:	85 b1       	in	r24, 0x05	; 5
 1c6:	80 6e       	ori	r24, 0xE0	; 224
 1c8:	85 b9       	out	0x05, r24	; 5
				PORTE |=  JOY_EMASK;
 1ca:	8e b1       	in	r24, 0x0e	; 14
 1cc:	80 63       	ori	r24, 0x30	; 48
 1ce:	8e b9       	out	0x0e, r24	; 14

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void LEDs_Init(void)
			{
				DDRD  |=  LEDS_ALL_LEDS;
 1d0:	8a b1       	in	r24, 0x0a	; 10
 1d2:	80 6f       	ori	r24, 0xF0	; 240
 1d4:	8a b9       	out	0x0a, r24	; 10
				PORTD &= ~LEDS_ALL_LEDS;
 1d6:	8b b1       	in	r24, 0x0b	; 11
 1d8:	8f 70       	andi	r24, 0x0F	; 15
 1da:	8b b9       	out	0x0b, r24	; 11

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void Buttons_Init(void)
			{
				DDRE  &= ~BUTTONS_BUTTON1;
 1dc:	6a 98       	cbi	0x0d, 2	; 13
				PORTE |=  BUTTONS_BUTTON1;
 1de:	72 9a       	sbi	0x0e, 2	; 14

	/* Hardware Initialization */
	Joystick_Init();
	LEDs_Init();
	Buttons_Init();
	USB_Init();
 1e0:	b4 c2       	rjmp	.+1384   	; 0x74a <USB_Init>

000001e2 <EVENT_USB_Device_Connect>:
 1e2:	80 ea       	ldi	r24, 0xA0	; 160
}
 1e4:	d0 cf       	rjmp	.-96     	; 0x186 <LEDs_SetAllLEDs>

000001e6 <EVENT_USB_Device_Disconnect>:
 *  starts the library USB task to begin the enumeration and USB management process.
 */
void EVENT_USB_Device_Connect(void)
{
	/* Indicate USB enumerating */
	LEDs_SetAllLEDs(LEDMASK_USB_ENUMERATING);
 1e6:	80 e1       	ldi	r24, 0x10	; 16
}
 1e8:	ce cf       	rjmp	.-100    	; 0x186 <LEDs_SetAllLEDs>

000001ea <EVENT_USB_Device_ConfigurationChanged>:
 *  the status LEDs and stops the USB management and joystick reporting tasks.
 */
void EVENT_USB_Device_Disconnect(void)
{
	/* Indicate USB not ready */
	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
 1ea:	81 e0       	ldi	r24, 0x01	; 1
}
 1ec:	61 ec       	ldi	r22, 0xC1	; 193
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
 1ee:	42 e0       	ldi	r20, 0x02	; 2
 1f0:	de d1       	rcall	.+956    	; 0x5ae <Endpoint_ConfigureEndpoint_Prv>
 1f2:	88 23       	and	r24, r24

	/* Setup HID Report Endpoint */
	ConfigSuccess &= Endpoint_ConfigureEndpoint(JOYSTICK_EPADDR, EP_TYPE_INTERRUPT, JOYSTICK_EPSIZE, 1);

	/* Indicate endpoint configuration success or failure */
	LEDs_SetAllLEDs(ConfigSuccess ? LEDMASK_USB_READY : LEDMASK_USB_ERROR);
 1f4:	11 f0       	breq	.+4      	; 0x1fa <EVENT_USB_Device_ConfigurationChanged+0x10>
 1f6:	80 e6       	ldi	r24, 0x60	; 96
 1f8:	01 c0       	rjmp	.+2      	; 0x1fc <EVENT_USB_Device_ConfigurationChanged+0x12>
 1fa:	80 e9       	ldi	r24, 0x90	; 144
 1fc:	c4 cf       	rjmp	.-120    	; 0x186 <LEDs_SetAllLEDs>

000001fe <GetNextReport>:
 1fe:	fc 01       	movw	r30, r24
 200:	23 b1       	in	r18, 0x03	; 3
}
 202:	8c b1       	in	r24, 0x0c	; 12
			}

			static inline uint8_t Joystick_GetStatus(void) ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t Joystick_GetStatus(void)
			{
				return (((uint8_t)~PINB & JOY_BMASK) | (((uint8_t)~PINE & JOY_EMASK) >> JOY_PORTE_MASK_SHIFT));
 204:	80 95       	com	r24
 206:	90 e0       	ldi	r25, 0x00	; 0
 208:	80 73       	andi	r24, 0x30	; 48
 20a:	90 70       	andi	r25, 0x00	; 0
 20c:	95 95       	asr	r25
 20e:	87 95       	ror	r24
 210:	20 95       	com	r18
 212:	20 7e       	andi	r18, 0xE0	; 224
 214:	28 2b       	or	r18, r24
			}

			static inline uint8_t Buttons_GetStatus(void) ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t Buttons_GetStatus(void)
			{
				return ((PINE & BUTTONS_BUTTON1) ^ BUTTONS_BUTTON1);
 216:	9c b1       	in	r25, 0x0c	; 12
 218:	90 95       	com	r25
 21a:	94 70       	andi	r25, 0x04	; 4
	uint8_t        JoyStatus_LCL    = Joystick_GetStatus();
	uint8_t        ButtonStatus_LCL = Buttons_GetStatus();
	bool           InputChanged     = false;

	/* Clear the report contents */
	memset(ReportData, 0, sizeof(USB_JoystickReport_Data_t));
 21c:	10 82       	st	Z, r1
 21e:	11 82       	std	Z+1, r1	; 0x01
 220:	12 82       	std	Z+2, r1	; 0x02
 222:	13 82       	std	Z+3, r1	; 0x03

	if (JoyStatus_LCL & JOY_UP)
 224:	27 ff       	sbrs	r18, 7
 226:	02 c0       	rjmp	.+4      	; 0x22c <GetNextReport+0x2e>
	  ReportData->Y = -100;
 228:	8c e9       	ldi	r24, 0x9C	; 156
 22a:	03 c0       	rjmp	.+6      	; 0x232 <GetNextReport+0x34>
	else if (JoyStatus_LCL & JOY_DOWN)
 22c:	24 ff       	sbrs	r18, 4
 22e:	02 c0       	rjmp	.+4      	; 0x234 <GetNextReport+0x36>
	  ReportData->Y =  100;
 230:	84 e6       	ldi	r24, 0x64	; 100
 232:	81 83       	std	Z+1, r24	; 0x01

	if (JoyStatus_LCL & JOY_LEFT)
 234:	82 2f       	mov	r24, r18
 236:	26 ff       	sbrs	r18, 6
 238:	02 c0       	rjmp	.+4      	; 0x23e <GetNextReport+0x40>
	  ReportData->X = -100;
 23a:	3c e9       	ldi	r19, 0x9C	; 156
 23c:	03 c0       	rjmp	.+6      	; 0x244 <GetNextReport+0x46>
	else if (JoyStatus_LCL & JOY_RIGHT)
 23e:	23 ff       	sbrs	r18, 3
 240:	02 c0       	rjmp	.+4      	; 0x246 <GetNextReport+0x48>
	  ReportData->X =  100;
 242:	34 e6       	ldi	r19, 0x64	; 100
 244:	30 83       	st	Z, r19

	if (JoyStatus_LCL & JOY_PRESS)
 246:	85 ff       	sbrs	r24, 5
 248:	03 c0       	rjmp	.+6      	; 0x250 <GetNextReport+0x52>
	  ReportData->Button |= (1 << 1);
 24a:	83 81       	ldd	r24, Z+3	; 0x03
 24c:	82 60       	ori	r24, 0x02	; 2
 24e:	83 83       	std	Z+3, r24	; 0x03

	if (ButtonStatus_LCL & BUTTONS_BUTTON1)
 250:	99 23       	and	r25, r25
 252:	19 f0       	breq	.+6      	; 0x25a <GetNextReport+0x5c>
	  ReportData->Button |= (1 << 0);
 254:	83 81       	ldd	r24, Z+3	; 0x03
 256:	81 60       	ori	r24, 0x01	; 1
 258:	83 83       	std	Z+3, r24	; 0x03

	/* Check if the new report is different to the previous report */
	InputChanged = (uint8_t)(PrevJoyStatus ^ JoyStatus_LCL) | (uint8_t)(PrevButtonStatus ^ ButtonStatus_LCL);
 25a:	30 91 00 01 	lds	r19, 0x0100
 25e:	32 27       	eor	r19, r18
 260:	80 91 01 01 	lds	r24, 0x0101
 264:	89 27       	eor	r24, r25
 266:	38 2b       	or	r19, r24
 268:	81 e0       	ldi	r24, 0x01	; 1
 26a:	09 f4       	brne	.+2      	; 0x26e <GetNextReport+0x70>
 26c:	80 e0       	ldi	r24, 0x00	; 0

	/* Save the current joystick status for later comparison */
	PrevJoyStatus    = JoyStatus_LCL;
 26e:	20 93 00 01 	sts	0x0100, r18
	PrevButtonStatus = ButtonStatus_LCL;
 272:	90 93 01 01 	sts	0x0101, r25

	/* Return whether the new report is different to the previous report or not */
	return InputChanged;
}
 276:	08 95       	ret

00000278 <EVENT_USB_Device_ControlRequest>:
/** Event handler for the USB_ControlRequest event. This is used to catch and process control requests sent to
 *  the device from the USB host before passing along unhandled control requests to the library for processing
 *  internally.
 */
void EVENT_USB_Device_ControlRequest(void)
{
 278:	cf 93       	push	r28
 27a:	df 93       	push	r29
 27c:	00 d0       	rcall	.+0      	; 0x27e <EVENT_USB_Device_ControlRequest+0x6>
 27e:	00 d0       	rcall	.+0      	; 0x280 <EVENT_USB_Device_ControlRequest+0x8>
 280:	cd b7       	in	r28, 0x3d	; 61
 282:	de b7       	in	r29, 0x3e	; 62
	/* Handle HID Class specific requests */
	switch (USB_ControlRequest.bRequest)
 284:	80 91 08 01 	lds	r24, 0x0108
 288:	81 30       	cpi	r24, 0x01	; 1
 28a:	b1 f4       	brne	.+44     	; 0x2b8 <EVENT_USB_Device_ControlRequest+0x40>
	{
		case HID_REQ_GetReport:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
 28c:	80 91 07 01 	lds	r24, 0x0107
 290:	81 3a       	cpi	r24, 0xA1	; 161
 292:	91 f4       	brne	.+36     	; 0x2b8 <EVENT_USB_Device_ControlRequest+0x40>
			{
				USB_JoystickReport_Data_t JoystickReportData;

				/* Create the next HID report to send to the host */
				GetNextReport(&JoystickReportData);
 294:	ce 01       	movw	r24, r28
 296:	01 96       	adiw	r24, 0x01	; 1
 298:	b2 df       	rcall	.-156    	; 0x1fe <GetNextReport>
 29a:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 29e:	87 7f       	andi	r24, 0xF7	; 247
 2a0:	80 93 e8 00 	sts	0x00E8, r24
 2a4:	ce 01       	movw	r24, r28

				Endpoint_ClearSETUP();

				/* Write the report data to the control endpoint */
				Endpoint_Write_Control_Stream_LE(&JoystickReportData, sizeof(JoystickReportData));
 2a6:	01 96       	adiw	r24, 0x01	; 1
 2a8:	64 e0       	ldi	r22, 0x04	; 4
 2aa:	70 e0       	ldi	r23, 0x00	; 0
 2ac:	c7 d0       	rcall	.+398    	; 0x43c <Endpoint_Write_Control_Stream_LE>
 2ae:	80 91 e8 00 	lds	r24, 0x00E8
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 2b2:	8b 77       	andi	r24, 0x7B	; 123
 2b4:	80 93 e8 00 	sts	0x00E8, r24
 2b8:	0f 90       	pop	r0
 2ba:	0f 90       	pop	r0
				Endpoint_ClearOUT();
			}

			break;
	}
}
 2bc:	0f 90       	pop	r0
 2be:	0f 90       	pop	r0
 2c0:	df 91       	pop	r29
 2c2:	cf 91       	pop	r28
 2c4:	08 95       	ret

000002c6 <HID_Task>:
 2c6:	cf 93       	push	r28
 2c8:	df 93       	push	r29
	return InputChanged;
}

/** Function to manage HID report generation and transmission to the host. */
void HID_Task(void)
{
 2ca:	00 d0       	rcall	.+0      	; 0x2cc <HID_Task+0x6>
 2cc:	00 d0       	rcall	.+0      	; 0x2ce <HID_Task+0x8>
 2ce:	cd b7       	in	r28, 0x3d	; 61
 2d0:	de b7       	in	r29, 0x3e	; 62
	/* Device must be connected and configured for the task to run */
	if (USB_DeviceState != DEVICE_STATE_Configured)
 2d2:	80 91 06 01 	lds	r24, 0x0106
 2d6:	84 30       	cpi	r24, 0x04	; 4
 2d8:	b1 f4       	brne	.+44     	; 0x306 <HID_Task+0x40>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 2da:	81 e0       	ldi	r24, 0x01	; 1
 2dc:	80 93 e9 00 	sts	0x00E9, r24
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 2e0:	80 91 e8 00 	lds	r24, 0x00E8

	/* Select the Joystick Report Endpoint */
	Endpoint_SelectEndpoint(JOYSTICK_EPADDR);

	/* Check to see if the host is ready for another packet */
	if (Endpoint_IsINReady())
 2e4:	80 ff       	sbrs	r24, 0
 2e6:	0f c0       	rjmp	.+30     	; 0x306 <HID_Task+0x40>
	{
		USB_JoystickReport_Data_t JoystickReportData;

		/* Create the next HID report to send to the host */
		GetNextReport(&JoystickReportData);
 2e8:	ce 01       	movw	r24, r28
 2ea:	01 96       	adiw	r24, 0x01	; 1
 2ec:	88 df       	rcall	.-240    	; 0x1fe <GetNextReport>
 2ee:	ce 01       	movw	r24, r28

		/* Write Joystick Report Data */
		Endpoint_Write_Stream_LE(&JoystickReportData, sizeof(JoystickReportData), NULL);
 2f0:	01 96       	adiw	r24, 0x01	; 1
 2f2:	64 e0       	ldi	r22, 0x04	; 4
 2f4:	70 e0       	ldi	r23, 0x00	; 0
 2f6:	40 e0       	ldi	r20, 0x00	; 0
 2f8:	50 e0       	ldi	r21, 0x00	; 0
 2fa:	50 d0       	rcall	.+160    	; 0x39c <Endpoint_Write_Stream_LE>
 2fc:	80 91 e8 00 	lds	r24, 0x00E8
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 300:	8e 77       	andi	r24, 0x7E	; 126
 302:	80 93 e8 00 	sts	0x00E8, r24
 306:	0f 90       	pop	r0
 308:	0f 90       	pop	r0
		Endpoint_ClearIN();

		/* Clear the report data afterwards */
		memset(&JoystickReportData, 0, sizeof(JoystickReportData));
	}
}
 30a:	0f 90       	pop	r0
 30c:	0f 90       	pop	r0
 30e:	df 91       	pop	r29
 310:	cf 91       	pop	r28
 312:	08 95       	ret

00000314 <main>:
 314:	3d df       	rcall	.-390    	; 0x190 <SetupHardware>
 316:	80 e1       	ldi	r24, 0x10	; 16
 */
int main(void)
{
	SetupHardware();

	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
 318:	36 df       	rcall	.-404    	; 0x186 <LEDs_SetAllLEDs>
 31a:	78 94       	sei
 31c:	d4 df       	rcall	.-88     	; 0x2c6 <HID_Task>
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				sei();
 31e:	5f d4       	rcall	.+2238   	; 0xbde <USB_USBTask>
	GlobalInterruptEnable();

	for (;;)
	{
		HID_Task();
 320:	fd cf       	rjmp	.-6      	; 0x31c <main+0x8>

00000322 <CALLBACK_USB_GetDescriptor>:
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
 322:	93 30       	cpi	r25, 0x03	; 3
 324:	89 f0       	breq	.+34     	; 0x348 <CALLBACK_USB_GetDescriptor+0x26>
 326:	94 30       	cpi	r25, 0x04	; 4
 328:	28 f4       	brcc	.+10     	; 0x334 <CALLBACK_USB_GetDescriptor+0x12>
 32a:	91 30       	cpi	r25, 0x01	; 1
 32c:	49 f1       	breq	.+82     	; 0x380 <CALLBACK_USB_GetDescriptor+0x5e>
 32e:	92 30       	cpi	r25, 0x02	; 2
 330:	61 f5       	brne	.+88     	; 0x38a <CALLBACK_USB_GetDescriptor+0x68>
 332:	05 c0       	rjmp	.+10     	; 0x33e <CALLBACK_USB_GetDescriptor+0x1c>
 334:	91 32       	cpi	r25, 0x21	; 33
 336:	d1 f0       	breq	.+52     	; 0x36c <CALLBACK_USB_GetDescriptor+0x4a>
 338:	92 32       	cpi	r25, 0x22	; 34
 33a:	39 f5       	brne	.+78     	; 0x38a <CALLBACK_USB_GetDescriptor+0x68>
 33c:	1c c0       	rjmp	.+56     	; 0x376 <CALLBACK_USB_GetDescriptor+0x54>
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
			Size    = sizeof(USB_Descriptor_Configuration_t);
 33e:	82 e2       	ldi	r24, 0x22	; 34
 340:	90 e0       	ldi	r25, 0x00	; 0
		case DTYPE_Device:
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
 342:	ee ed       	ldi	r30, 0xDE	; 222
 344:	f0 e0       	ldi	r31, 0x00	; 0
			Size    = sizeof(USB_Descriptor_Configuration_t);
			break;
 346:	25 c0       	rjmp	.+74     	; 0x392 <CALLBACK_USB_GetDescriptor+0x70>
		case DTYPE_String:
			switch (DescriptorNumber)
 348:	81 30       	cpi	r24, 0x01	; 1
 34a:	41 f0       	breq	.+16     	; 0x35c <CALLBACK_USB_GetDescriptor+0x3a>
 34c:	81 30       	cpi	r24, 0x01	; 1
 34e:	18 f0       	brcs	.+6      	; 0x356 <CALLBACK_USB_GetDescriptor+0x34>
 350:	82 30       	cpi	r24, 0x02	; 2
 352:	d9 f4       	brne	.+54     	; 0x38a <CALLBACK_USB_GetDescriptor+0x68>
 354:	06 c0       	rjmp	.+12     	; 0x362 <CALLBACK_USB_GetDescriptor+0x40>
			{
				case 0x00:
					Address = &LanguageString;
					Size    = pgm_read_byte(&LanguageString.Header.Size);
 356:	ea ed       	ldi	r30, 0xDA	; 218
 358:	f0 e0       	ldi	r31, 0x00	; 0
 35a:	05 c0       	rjmp	.+10     	; 0x366 <CALLBACK_USB_GetDescriptor+0x44>
					break;
				case 0x01:
					Address = &ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
 35c:	e0 ec       	ldi	r30, 0xC0	; 192
 35e:	f0 e0       	ldi	r31, 0x00	; 0
 360:	02 c0       	rjmp	.+4      	; 0x366 <CALLBACK_USB_GetDescriptor+0x44>
					break;
				case 0x02:
					Address = &ProductString;
					Size    = pgm_read_byte(&ProductString.Header.Size);
 362:	e8 e9       	ldi	r30, 0x98	; 152
 364:	f0 e0       	ldi	r31, 0x00	; 0
 366:	84 91       	lpm	r24, Z
 368:	90 e0       	ldi	r25, 0x00	; 0
					break;
 36a:	13 c0       	rjmp	.+38     	; 0x392 <CALLBACK_USB_GetDescriptor+0x70>
			}

			break;
		case DTYPE_HID:
			Address = &ConfigurationDescriptor.HID_JoystickHID;
			Size    = sizeof(USB_HID_Descriptor_HID_t);
 36c:	89 e0       	ldi	r24, 0x09	; 9
 36e:	90 e0       	ldi	r25, 0x00	; 0
					break;
			}

			break;
		case DTYPE_HID:
			Address = &ConfigurationDescriptor.HID_JoystickHID;
 370:	e0 ef       	ldi	r30, 0xF0	; 240
 372:	f0 e0       	ldi	r31, 0x00	; 0
			Size    = sizeof(USB_HID_Descriptor_HID_t);
			break;
 374:	0e c0       	rjmp	.+28     	; 0x392 <CALLBACK_USB_GetDescriptor+0x70>
		case DTYPE_Report:
			Address = &JoystickReport;
			Size    = sizeof(JoystickReport);
 376:	86 e3       	ldi	r24, 0x36	; 54
 378:	90 e0       	ldi	r25, 0x00	; 0
		case DTYPE_HID:
			Address = &ConfigurationDescriptor.HID_JoystickHID;
			Size    = sizeof(USB_HID_Descriptor_HID_t);
			break;
		case DTYPE_Report:
			Address = &JoystickReport;
 37a:	e2 e1       	ldi	r30, 0x12	; 18
 37c:	f1 e0       	ldi	r31, 0x01	; 1
			Size    = sizeof(JoystickReport);
			break;
 37e:	09 c0       	rjmp	.+18     	; 0x392 <CALLBACK_USB_GetDescriptor+0x70>

	switch (DescriptorType)
	{
		case DTYPE_Device:
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
 380:	82 e1       	ldi	r24, 0x12	; 18
 382:	90 e0       	ldi	r25, 0x00	; 0
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
	{
		case DTYPE_Device:
			Address = &DeviceDescriptor;
 384:	e0 e0       	ldi	r30, 0x00	; 0
 386:	f1 e0       	ldi	r31, 0x01	; 1
 388:	04 c0       	rjmp	.+8      	; 0x392 <CALLBACK_USB_GetDescriptor+0x70>
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;
 38a:	80 e0       	ldi	r24, 0x00	; 0
 38c:	90 e0       	ldi	r25, 0x00	; 0
                                    const void** const DescriptorAddress)
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
 38e:	e0 e0       	ldi	r30, 0x00	; 0
 390:	f0 e0       	ldi	r31, 0x00	; 0
			Address = &JoystickReport;
			Size    = sizeof(JoystickReport);
			break;
	}

	*DescriptorAddress = Address;
 392:	da 01       	movw	r26, r20
 394:	11 96       	adiw	r26, 0x01	; 1
 396:	fc 93       	st	X, r31
 398:	ee 93       	st	-X, r30
	return Size;
}
 39a:	08 95       	ret

0000039c <Endpoint_Write_Stream_LE>:
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
 39c:	af 92       	push	r10
 39e:	bf 92       	push	r11
 3a0:	cf 92       	push	r12
 3a2:	df 92       	push	r13
 3a4:	ef 92       	push	r14
 3a6:	ff 92       	push	r15
 3a8:	1f 93       	push	r17
 3aa:	cf 93       	push	r28
 3ac:	df 93       	push	r29
 3ae:	ec 01       	movw	r28, r24
 3b0:	7b 01       	movw	r14, r22
 3b2:	6a 01       	movw	r12, r20
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	uint16_t BytesInTransfer = 0;
	uint8_t  ErrorCode;

	if ((ErrorCode = Endpoint_WaitUntilReady()))
 3b4:	52 d1       	rcall	.+676    	; 0x65a <Endpoint_WaitUntilReady>
 3b6:	18 2f       	mov	r17, r24
 3b8:	88 23       	and	r24, r24
 3ba:	a9 f5       	brne	.+106    	; 0x426 <Endpoint_Write_Stream_LE+0x8a>
 3bc:	c1 14       	cp	r12, r1
	  return ErrorCode;

	if (BytesProcessed != NULL)
 3be:	d1 04       	cpc	r13, r1
 3c0:	39 f0       	breq	.+14     	; 0x3d0 <Endpoint_Write_Stream_LE+0x34>
 3c2:	f6 01       	movw	r30, r12
	{
		Length -= *BytesProcessed;
 3c4:	20 81       	ld	r18, Z
 3c6:	31 81       	ldd	r19, Z+1	; 0x01
 3c8:	e2 1a       	sub	r14, r18
 3ca:	f3 0a       	sbc	r15, r19
 3cc:	c2 0f       	add	r28, r18
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
 3ce:	d3 1f       	adc	r29, r19
 3d0:	aa 24       	eor	r10, r10

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
 3d2:	bb 24       	eor	r11, r11
 3d4:	23 c0       	rjmp	.+70     	; 0x41c <Endpoint_Write_Stream_LE+0x80>
 3d6:	80 91 e8 00 	lds	r24, 0x00E8
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
 3da:	85 fd       	sbrc	r24, 5
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
	{
		if (!(Endpoint_IsReadWriteAllowed()))
 3dc:	16 c0       	rjmp	.+44     	; 0x40a <Endpoint_Write_Stream_LE+0x6e>
 3de:	80 91 e8 00 	lds	r24, 0x00E8
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 3e2:	8e 77       	andi	r24, 0x7E	; 126
 3e4:	80 93 e8 00 	sts	0x00E8, r24
 3e8:	fa d3       	rcall	.+2036   	; 0xbde <USB_USBTask>
		{
			TEMPLATE_CLEAR_ENDPOINT();

			#if !defined(INTERRUPT_CONTROL_ENDPOINT)
			USB_USBTask();
 3ea:	c1 14       	cp	r12, r1
 3ec:	d1 04       	cpc	r13, r1
			#endif

			if (BytesProcessed != NULL)
 3ee:	49 f0       	breq	.+18     	; 0x402 <Endpoint_Write_Stream_LE+0x66>
 3f0:	f6 01       	movw	r30, r12
 3f2:	80 81       	ld	r24, Z
			{
				*BytesProcessed += BytesInTransfer;
 3f4:	91 81       	ldd	r25, Z+1	; 0x01
 3f6:	8a 0d       	add	r24, r10
 3f8:	9b 1d       	adc	r25, r11
 3fa:	91 83       	std	Z+1, r25	; 0x01
 3fc:	80 83       	st	Z, r24
 3fe:	15 e0       	ldi	r17, 0x05	; 5
 400:	12 c0       	rjmp	.+36     	; 0x426 <Endpoint_Write_Stream_LE+0x8a>
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
 402:	2b d1       	rcall	.+598    	; 0x65a <Endpoint_WaitUntilReady>
 404:	88 23       	and	r24, r24
			}

			if ((ErrorCode = Endpoint_WaitUntilReady()))
 406:	51 f0       	breq	.+20     	; 0x41c <Endpoint_Write_Stream_LE+0x80>
 408:	0d c0       	rjmp	.+26     	; 0x424 <Endpoint_Write_Stream_LE+0x88>
 40a:	89 91       	ld	r24, Y+
 40c:	80 93 f1 00 	sts	0x00F1, r24
			  return ErrorCode;
		}
		else
		{
			TEMPLATE_TRANSFER_BYTE(DataStream);
 410:	08 94       	sec
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
 412:	e1 08       	sbc	r14, r1
 414:	f1 08       	sbc	r15, r1
			TEMPLATE_BUFFER_MOVE(DataStream, 1);
			Length--;
 416:	08 94       	sec
 418:	a1 1c       	adc	r10, r1
 41a:	b1 1c       	adc	r11, r1
			BytesInTransfer++;
 41c:	e1 14       	cp	r14, r1
 41e:	f1 04       	cpc	r15, r1
 420:	d1 f6       	brne	.-76     	; 0x3d6 <Endpoint_Write_Stream_LE+0x3a>
	{
		Length -= *BytesProcessed;
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
 422:	01 c0       	rjmp	.+2      	; 0x426 <Endpoint_Write_Stream_LE+0x8a>
 424:	18 2f       	mov	r17, r24
 426:	81 2f       	mov	r24, r17
 428:	df 91       	pop	r29
			{
				*BytesProcessed += BytesInTransfer;
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
			}

			if ((ErrorCode = Endpoint_WaitUntilReady()))
 42a:	cf 91       	pop	r28
			BytesInTransfer++;
		}
	}

	return ENDPOINT_RWSTREAM_NoError;
}
 42c:	1f 91       	pop	r17
 42e:	ff 90       	pop	r15
 430:	ef 90       	pop	r14
 432:	df 90       	pop	r13
 434:	cf 90       	pop	r12
 436:	bf 90       	pop	r11
 438:	af 90       	pop	r10
 43a:	08 95       	ret

0000043c <Endpoint_Write_Control_Stream_LE>:
 43c:	20 91 0d 01 	lds	r18, 0x010D
 440:	30 91 0e 01 	lds	r19, 0x010E
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
 444:	26 17       	cp	r18, r22
 446:	37 07       	cpc	r19, r23
 448:	20 f4       	brcc	.+8      	; 0x452 <Endpoint_Write_Control_Stream_LE+0x16>
 44a:	b9 01       	movw	r22, r18
 44c:	fc 01       	movw	r30, r24
 44e:	20 e0       	ldi	r18, 0x00	; 0
 450:	37 c0       	rjmp	.+110    	; 0x4c0 <Endpoint_Write_Control_Stream_LE+0x84>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
 452:	61 15       	cp	r22, r1
 454:	71 05       	cpc	r23, r1
 456:	d1 f7       	brne	.-12     	; 0x44c <Endpoint_Write_Control_Stream_LE+0x10>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 458:	20 91 e8 00 	lds	r18, 0x00E8
 45c:	2e 77       	andi	r18, 0x7E	; 126
 45e:	20 93 e8 00 	sts	0x00E8, r18
 462:	f4 cf       	rjmp	.-24     	; 0x44c <Endpoint_Write_Control_Stream_LE+0x10>
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
 464:	80 91 06 01 	lds	r24, 0x0106

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
 468:	88 23       	and	r24, r24
 46a:	09 f4       	brne	.+2      	; 0x46e <Endpoint_Write_Control_Stream_LE+0x32>
 46c:	3f c0       	rjmp	.+126    	; 0x4ec <Endpoint_Write_Control_Stream_LE+0xb0>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
 46e:	85 30       	cpi	r24, 0x05	; 5
 470:	c9 f1       	breq	.+114    	; 0x4e4 <Endpoint_Write_Control_Stream_LE+0xa8>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 472:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
 476:	83 fd       	sbrc	r24, 3
 478:	37 c0       	rjmp	.+110    	; 0x4e8 <Endpoint_Write_Control_Stream_LE+0xac>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 47a:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
 47e:	82 fd       	sbrc	r24, 2
 480:	2b c0       	rjmp	.+86     	; 0x4d8 <Endpoint_Write_Control_Stream_LE+0x9c>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 482:	80 91 e8 00 	lds	r24, 0x00E8
		  break;

		if (Endpoint_IsINReady())
 486:	80 ff       	sbrs	r24, 0
 488:	1b c0       	rjmp	.+54     	; 0x4c0 <Endpoint_Write_Control_Stream_LE+0x84>
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
 48a:	80 91 f2 00 	lds	r24, 0x00F2
 48e:	90 91 f3 00 	lds	r25, 0x00F3
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
 492:	06 c0       	rjmp	.+12     	; 0x4a0 <Endpoint_Write_Control_Stream_LE+0x64>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
 494:	21 91       	ld	r18, Z+
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
 496:	20 93 f1 00 	sts	0x00F1, r18
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
 49a:	61 50       	subi	r22, 0x01	; 1
 49c:	70 40       	sbci	r23, 0x00	; 0
				BytesInEndpoint++;
 49e:	01 96       	adiw	r24, 0x01	; 1

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
 4a0:	61 15       	cp	r22, r1
 4a2:	71 05       	cpc	r23, r1
 4a4:	19 f0       	breq	.+6      	; 0x4ac <Endpoint_Write_Control_Stream_LE+0x70>
 4a6:	88 30       	cpi	r24, 0x08	; 8
 4a8:	91 05       	cpc	r25, r1
 4aa:	a0 f3       	brcs	.-24     	; 0x494 <Endpoint_Write_Control_Stream_LE+0x58>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
 4ac:	21 e0       	ldi	r18, 0x01	; 1
 4ae:	88 30       	cpi	r24, 0x08	; 8
 4b0:	91 05       	cpc	r25, r1
 4b2:	09 f0       	breq	.+2      	; 0x4b6 <Endpoint_Write_Control_Stream_LE+0x7a>
 4b4:	20 e0       	ldi	r18, 0x00	; 0
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 4b6:	80 91 e8 00 	lds	r24, 0x00E8
 4ba:	8e 77       	andi	r24, 0x7E	; 126
 4bc:	80 93 e8 00 	sts	0x00E8, r24
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
 4c0:	61 15       	cp	r22, r1
 4c2:	71 05       	cpc	r23, r1
 4c4:	79 f6       	brne	.-98     	; 0x464 <Endpoint_Write_Control_Stream_LE+0x28>
 4c6:	22 23       	and	r18, r18
 4c8:	69 f6       	brne	.-102    	; 0x464 <Endpoint_Write_Control_Stream_LE+0x28>
 4ca:	06 c0       	rjmp	.+12     	; 0x4d8 <Endpoint_Write_Control_Stream_LE+0x9c>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
 4cc:	80 91 06 01 	lds	r24, 0x0106

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
 4d0:	88 23       	and	r24, r24
 4d2:	61 f0       	breq	.+24     	; 0x4ec <Endpoint_Write_Control_Stream_LE+0xb0>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
 4d4:	85 30       	cpi	r24, 0x05	; 5
 4d6:	61 f0       	breq	.+24     	; 0x4f0 <Endpoint_Write_Control_Stream_LE+0xb4>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 4d8:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
 4dc:	82 ff       	sbrs	r24, 2
 4de:	f6 cf       	rjmp	.-20     	; 0x4cc <Endpoint_Write_Control_Stream_LE+0x90>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
 4e0:	80 e0       	ldi	r24, 0x00	; 0
 4e2:	08 95       	ret
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
 4e4:	83 e0       	ldi	r24, 0x03	; 3
 4e6:	08 95       	ret
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
 4e8:	81 e0       	ldi	r24, 0x01	; 1
 4ea:	08 95       	ret
	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
 4ec:	82 e0       	ldi	r24, 0x02	; 2
 4ee:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
 4f0:	83 e0       	ldi	r24, 0x03	; 3
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
 4f2:	08 95       	ret

000004f4 <Endpoint_Write_Control_PStream_LE>:
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
 4f4:	20 91 0d 01 	lds	r18, 0x010D
 4f8:	30 91 0e 01 	lds	r19, 0x010E
 4fc:	26 17       	cp	r18, r22
 4fe:	37 07       	cpc	r19, r23
 500:	20 f4       	brcc	.+8      	; 0x50a <Endpoint_Write_Control_PStream_LE+0x16>
 502:	b9 01       	movw	r22, r18
 504:	fc 01       	movw	r30, r24
 506:	20 e0       	ldi	r18, 0x00	; 0
 508:	38 c0       	rjmp	.+112    	; 0x57a <Endpoint_Write_Control_PStream_LE+0x86>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
 50a:	61 15       	cp	r22, r1
 50c:	71 05       	cpc	r23, r1
 50e:	d1 f7       	brne	.-12     	; 0x504 <Endpoint_Write_Control_PStream_LE+0x10>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 510:	20 91 e8 00 	lds	r18, 0x00E8
 514:	2e 77       	andi	r18, 0x7E	; 126
 516:	20 93 e8 00 	sts	0x00E8, r18
 51a:	f4 cf       	rjmp	.-24     	; 0x504 <Endpoint_Write_Control_PStream_LE+0x10>
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
 51c:	80 91 06 01 	lds	r24, 0x0106

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
 520:	88 23       	and	r24, r24
 522:	09 f4       	brne	.+2      	; 0x526 <Endpoint_Write_Control_PStream_LE+0x32>
 524:	40 c0       	rjmp	.+128    	; 0x5a6 <Endpoint_Write_Control_PStream_LE+0xb2>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
 526:	85 30       	cpi	r24, 0x05	; 5
 528:	d1 f1       	breq	.+116    	; 0x59e <Endpoint_Write_Control_PStream_LE+0xaa>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 52a:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
 52e:	83 fd       	sbrc	r24, 3
 530:	38 c0       	rjmp	.+112    	; 0x5a2 <Endpoint_Write_Control_PStream_LE+0xae>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 532:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
 536:	82 fd       	sbrc	r24, 2
 538:	2c c0       	rjmp	.+88     	; 0x592 <Endpoint_Write_Control_PStream_LE+0x9e>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 53a:	80 91 e8 00 	lds	r24, 0x00E8
		  break;

		if (Endpoint_IsINReady())
 53e:	80 ff       	sbrs	r24, 0
 540:	1c c0       	rjmp	.+56     	; 0x57a <Endpoint_Write_Control_PStream_LE+0x86>
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
 542:	80 91 f2 00 	lds	r24, 0x00F2
 546:	90 91 f3 00 	lds	r25, 0x00F3
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
 54a:	07 c0       	rjmp	.+14     	; 0x55a <Endpoint_Write_Control_PStream_LE+0x66>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
 54c:	24 91       	lpm	r18, Z
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
 54e:	20 93 f1 00 	sts	0x00F1, r18
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
 552:	31 96       	adiw	r30, 0x01	; 1
				Length--;
 554:	61 50       	subi	r22, 0x01	; 1
 556:	70 40       	sbci	r23, 0x00	; 0
				BytesInEndpoint++;
 558:	01 96       	adiw	r24, 0x01	; 1

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
 55a:	61 15       	cp	r22, r1
 55c:	71 05       	cpc	r23, r1
 55e:	19 f0       	breq	.+6      	; 0x566 <Endpoint_Write_Control_PStream_LE+0x72>
 560:	88 30       	cpi	r24, 0x08	; 8
 562:	91 05       	cpc	r25, r1
 564:	98 f3       	brcs	.-26     	; 0x54c <Endpoint_Write_Control_PStream_LE+0x58>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
 566:	21 e0       	ldi	r18, 0x01	; 1
 568:	88 30       	cpi	r24, 0x08	; 8
 56a:	91 05       	cpc	r25, r1
 56c:	09 f0       	breq	.+2      	; 0x570 <Endpoint_Write_Control_PStream_LE+0x7c>
 56e:	20 e0       	ldi	r18, 0x00	; 0
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 570:	80 91 e8 00 	lds	r24, 0x00E8
 574:	8e 77       	andi	r24, 0x7E	; 126
 576:	80 93 e8 00 	sts	0x00E8, r24
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
 57a:	61 15       	cp	r22, r1
 57c:	71 05       	cpc	r23, r1
 57e:	71 f6       	brne	.-100    	; 0x51c <Endpoint_Write_Control_PStream_LE+0x28>
 580:	22 23       	and	r18, r18
 582:	61 f6       	brne	.-104    	; 0x51c <Endpoint_Write_Control_PStream_LE+0x28>
 584:	06 c0       	rjmp	.+12     	; 0x592 <Endpoint_Write_Control_PStream_LE+0x9e>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
 586:	80 91 06 01 	lds	r24, 0x0106

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
 58a:	88 23       	and	r24, r24
 58c:	61 f0       	breq	.+24     	; 0x5a6 <Endpoint_Write_Control_PStream_LE+0xb2>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
 58e:	85 30       	cpi	r24, 0x05	; 5
 590:	61 f0       	breq	.+24     	; 0x5aa <Endpoint_Write_Control_PStream_LE+0xb6>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 592:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
 596:	82 ff       	sbrs	r24, 2
 598:	f6 cf       	rjmp	.-20     	; 0x586 <Endpoint_Write_Control_PStream_LE+0x92>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
 59a:	80 e0       	ldi	r24, 0x00	; 0
 59c:	08 95       	ret
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
 59e:	83 e0       	ldi	r24, 0x03	; 3
 5a0:	08 95       	ret
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
 5a2:	81 e0       	ldi	r24, 0x01	; 1
 5a4:	08 95       	ret
	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
 5a6:	82 e0       	ldi	r24, 0x02	; 2
 5a8:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
 5aa:	83 e0       	ldi	r24, 0x03	; 3
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
 5ac:	08 95       	ret

000005ae <Endpoint_ConfigureEndpoint_Prv>:
	UECFG0X = UECFG0XData;
	UECFG1X = UECFG1XData;

	return Endpoint_IsConfigured();
#else
	for (uint8_t EPNum = Number; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
 5ae:	98 2f       	mov	r25, r24
 5b0:	2a c0       	rjmp	.+84     	; 0x606 <Endpoint_ConfigureEndpoint_Prv+0x58>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 5b2:	90 93 e9 00 	sts	0x00E9, r25
		uint8_t UECFG1XTemp;
		uint8_t UEIENXTemp;

		Endpoint_SelectEndpoint(EPNum);

		if (EPNum == Number)
 5b6:	98 17       	cp	r25, r24
 5b8:	39 f0       	breq	.+14     	; 0x5c8 <Endpoint_ConfigureEndpoint_Prv+0x1a>
			UECFG1XTemp = UECFG1XData;
			UEIENXTemp  = 0;
		}
		else
		{
			UECFG0XTemp = UECFG0X;
 5ba:	70 91 ec 00 	lds	r23, 0x00EC
			UECFG1XTemp = UECFG1X;
 5be:	20 91 ed 00 	lds	r18, 0x00ED
			UEIENXTemp  = UEIENX;
 5c2:	50 91 f0 00 	lds	r21, 0x00F0
 5c6:	03 c0       	rjmp	.+6      	; 0x5ce <Endpoint_ConfigureEndpoint_Prv+0x20>
		Endpoint_SelectEndpoint(EPNum);

		if (EPNum == Number)
		{
			UECFG0XTemp = UECFG0XData;
			UECFG1XTemp = UECFG1XData;
 5c8:	24 2f       	mov	r18, r20

		Endpoint_SelectEndpoint(EPNum);

		if (EPNum == Number)
		{
			UECFG0XTemp = UECFG0XData;
 5ca:	76 2f       	mov	r23, r22
			UECFG1XTemp = UECFG1XData;
			UEIENXTemp  = 0;
 5cc:	50 e0       	ldi	r21, 0x00	; 0
			UECFG0XTemp = UECFG0X;
			UECFG1XTemp = UECFG1X;
			UEIENXTemp  = UEIENX;
		}

		if (!(UECFG1XTemp & (1 << ALLOC)))
 5ce:	21 ff       	sbrs	r18, 1
 5d0:	19 c0       	rjmp	.+50     	; 0x604 <Endpoint_ConfigureEndpoint_Prv+0x56>
			 *  to and from a host.
			 */
			static inline void Endpoint_DisableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_DisableEndpoint(void)
			{
				UECONX &= ~(1 << EPEN);
 5d2:	30 91 eb 00 	lds	r19, 0x00EB
 5d6:	3e 7f       	andi	r19, 0xFE	; 254
 5d8:	30 93 eb 00 	sts	0x00EB, r19
		  continue;

		Endpoint_DisableEndpoint();
		UECFG1X &= ~(1 << ALLOC);
 5dc:	30 91 ed 00 	lds	r19, 0x00ED
 5e0:	3d 7f       	andi	r19, 0xFD	; 253
 5e2:	30 93 ed 00 	sts	0x00ED, r19
			 *  \note Endpoints must first be configured properly via \ref Endpoint_ConfigureEndpoint().
			 */
			static inline void Endpoint_EnableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_EnableEndpoint(void)
			{
				UECONX |= (1 << EPEN);
 5e6:	30 91 eb 00 	lds	r19, 0x00EB
 5ea:	31 60       	ori	r19, 0x01	; 1
 5ec:	30 93 eb 00 	sts	0x00EB, r19

		Endpoint_EnableEndpoint();
		UECFG0X = UECFG0XTemp;
 5f0:	70 93 ec 00 	sts	0x00EC, r23
		UECFG1X = UECFG1XTemp;
 5f4:	20 93 ed 00 	sts	0x00ED, r18
		UEIENX  = UEIENXTemp;
 5f8:	50 93 f0 00 	sts	0x00F0, r21
			 *  \return Boolean \c true if the currently selected endpoint has been configured, \c false otherwise.
			 */
			static inline bool Endpoint_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsConfigured(void)
			{
				return ((UESTA0X & (1 << CFGOK)) ? true : false);
 5fc:	20 91 ee 00 	lds	r18, 0x00EE

		if (!(Endpoint_IsConfigured()))
 600:	27 ff       	sbrs	r18, 7
 602:	08 c0       	rjmp	.+16     	; 0x614 <Endpoint_ConfigureEndpoint_Prv+0x66>
	UECFG0X = UECFG0XData;
	UECFG1X = UECFG1XData;

	return Endpoint_IsConfigured();
#else
	for (uint8_t EPNum = Number; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
 604:	9f 5f       	subi	r25, 0xFF	; 255
 606:	97 30       	cpi	r25, 0x07	; 7
 608:	a0 f2       	brcs	.-88     	; 0x5b2 <Endpoint_ConfigureEndpoint_Prv+0x4>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 60a:	8f 70       	andi	r24, 0x0F	; 15
 60c:	80 93 e9 00 	sts	0x00E9, r24
		if (!(Endpoint_IsConfigured()))
		  return false;
	}

	Endpoint_SelectEndpoint(Number);
	return true;
 610:	81 e0       	ldi	r24, 0x01	; 1
 612:	08 95       	ret
		UECFG0X = UECFG0XTemp;
		UECFG1X = UECFG1XTemp;
		UEIENX  = UEIENXTemp;

		if (!(Endpoint_IsConfigured()))
		  return false;
 614:	80 e0       	ldi	r24, 0x00	; 0
	}

	Endpoint_SelectEndpoint(Number);
	return true;
#endif
}
 616:	08 95       	ret

00000618 <Endpoint_ClearStatusStage>:
	}
}

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
 618:	80 91 07 01 	lds	r24, 0x0107
 61c:	87 ff       	sbrs	r24, 7
 61e:	13 c0       	rjmp	.+38     	; 0x646 <Endpoint_ClearStatusStage+0x2e>
 620:	04 c0       	rjmp	.+8      	; 0x62a <Endpoint_ClearStatusStage+0x12>
	{
		while (!(Endpoint_IsOUTReceived()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
 622:	80 91 06 01 	lds	r24, 0x0106
 626:	88 23       	and	r24, r24
 628:	b9 f0       	breq	.+46     	; 0x658 <Endpoint_ClearStatusStage+0x40>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 62a:	80 91 e8 00 	lds	r24, 0x00E8

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
	{
		while (!(Endpoint_IsOUTReceived()))
 62e:	82 ff       	sbrs	r24, 2
 630:	f8 cf       	rjmp	.-16     	; 0x622 <Endpoint_ClearStatusStage+0xa>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 632:	80 91 e8 00 	lds	r24, 0x00E8
 636:	8b 77       	andi	r24, 0x7B	; 123
 638:	80 93 e8 00 	sts	0x00E8, r24
 63c:	08 95       	ret
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
 63e:	80 91 06 01 	lds	r24, 0x0106
 642:	88 23       	and	r24, r24
 644:	49 f0       	breq	.+18     	; 0x658 <Endpoint_ClearStatusStage+0x40>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 646:	80 91 e8 00 	lds	r24, 0x00E8

		Endpoint_ClearOUT();
	}
	else
	{
		while (!(Endpoint_IsINReady()))
 64a:	80 ff       	sbrs	r24, 0
 64c:	f8 cf       	rjmp	.-16     	; 0x63e <Endpoint_ClearStatusStage+0x26>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 64e:	80 91 e8 00 	lds	r24, 0x00E8
 652:	8e 77       	andi	r24, 0x7E	; 126
 654:	80 93 e8 00 	sts	0x00E8, r24
 658:	08 95       	ret

0000065a <Endpoint_WaitUntilReady>:
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
 65a:	80 91 e4 00 	lds	r24, 0x00E4
 65e:	90 91 e5 00 	lds	r25, 0x00E5
 662:	45 e6       	ldi	r20, 0x65	; 101
 664:	01 c0       	rjmp	.+2      	; 0x668 <Endpoint_WaitUntilReady+0xe>
 666:	c9 01       	movw	r24, r18
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
 668:	20 91 ec 00 	lds	r18, 0x00EC
 66c:	20 ff       	sbrs	r18, 0
 66e:	23 c0       	rjmp	.+70     	; 0x6b6 <Endpoint_WaitUntilReady+0x5c>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 670:	20 91 e8 00 	lds	r18, 0x00E8

	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
 674:	20 fd       	sbrc	r18, 0
 676:	15 c0       	rjmp	.+42     	; 0x6a2 <Endpoint_WaitUntilReady+0x48>
		{
			if (Endpoint_IsOUTReceived())
			  return ENDPOINT_READYWAIT_NoError;
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;
 678:	20 91 06 01 	lds	r18, 0x0106

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
 67c:	22 23       	and	r18, r18
 67e:	99 f0       	breq	.+38     	; 0x6a6 <Endpoint_WaitUntilReady+0x4c>
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
 680:	25 30       	cpi	r18, 0x05	; 5
 682:	99 f0       	breq	.+38     	; 0x6aa <Endpoint_WaitUntilReady+0x50>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
 684:	20 91 eb 00 	lds	r18, 0x00EB
		  return ENDPOINT_READYWAIT_BusSuspended;
		else if (Endpoint_IsStalled())
 688:	25 fd       	sbrc	r18, 5
 68a:	11 c0       	rjmp	.+34     	; 0x6ae <Endpoint_WaitUntilReady+0x54>
 68c:	20 91 e4 00 	lds	r18, 0x00E4
 690:	30 91 e5 00 	lds	r19, 0x00E5
		  return ENDPOINT_READYWAIT_EndpointStalled;

		uint16_t CurrentFrameNumber = USB_Device_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
 694:	28 17       	cp	r18, r24
 696:	39 07       	cpc	r19, r25
 698:	39 f3       	breq	.-50     	; 0x668 <Endpoint_WaitUntilReady+0xe>
 69a:	41 50       	subi	r20, 0x01	; 1
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
 69c:	21 f7       	brne	.-56     	; 0x666 <Endpoint_WaitUntilReady+0xc>
			  return ENDPOINT_READYWAIT_Timeout;
 69e:	84 e0       	ldi	r24, 0x04	; 4
 6a0:	08 95       	ret
	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
 6a2:	80 e0       	ldi	r24, 0x00	; 0
 6a4:	08 95       	ret
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
 6a6:	82 e0       	ldi	r24, 0x02	; 2
 6a8:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_READYWAIT_BusSuspended;
 6aa:	83 e0       	ldi	r24, 0x03	; 3
 6ac:	08 95       	ret
		else if (Endpoint_IsStalled())
		  return ENDPOINT_READYWAIT_EndpointStalled;
 6ae:	81 e0       	ldi	r24, 0x01	; 1
 6b0:	08 95       	ret
			  return ENDPOINT_READYWAIT_NoError;
		}
		else
		{
			if (Endpoint_IsOUTReceived())
			  return ENDPOINT_READYWAIT_NoError;
 6b2:	80 e0       	ldi	r24, 0x00	; 0

			if (!(TimeoutMSRem--))
			  return ENDPOINT_READYWAIT_Timeout;
		}
	}
}
 6b4:	08 95       	ret
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 6b6:	20 91 e8 00 	lds	r18, 0x00E8
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
		}
		else
		{
			if (Endpoint_IsOUTReceived())
 6ba:	22 ff       	sbrs	r18, 2
 6bc:	dd cf       	rjmp	.-70     	; 0x678 <Endpoint_WaitUntilReady+0x1e>
 6be:	f9 cf       	rjmp	.-14     	; 0x6b2 <Endpoint_WaitUntilReady+0x58>

000006c0 <USB_ResetInterface>:

	USB_IsInitialized = false;
}

void USB_ResetInterface(void)
{
 6c0:	0f 93       	push	r16
 6c2:	1f 93       	push	r17
 6c4:	cf 93       	push	r28
 6c6:	df 93       	push	r29
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
 6c8:	4e d0       	rcall	.+156    	; 0x766 <USB_INT_DisableAllInterrupts>
 6ca:	55 d0       	rcall	.+170    	; 0x776 <USB_INT_ClearAllInterrupts>
	USB_INT_ClearAllInterrupts();
 6cc:	c8 ed       	ldi	r28, 0xD8	; 216
 6ce:	d0 e0       	ldi	r29, 0x00	; 0
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
 6d0:	88 81       	ld	r24, Y
 6d2:	8f 77       	andi	r24, 0x7F	; 127
 6d4:	88 83       	st	Y, r24
 6d6:	88 81       	ld	r24, Y
 6d8:	80 68       	ori	r24, 0x80	; 128
				USBCON |=  (1 << USBE);
 6da:	88 83       	st	Y, r24
 6dc:	88 81       	ld	r24, Y
 6de:	8f 7d       	andi	r24, 0xDF	; 223
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
 6e0:	88 83       	st	Y, r24
 6e2:	e7 ed       	ldi	r30, 0xD7	; 215
 6e4:	f0 e0       	ldi	r31, 0x00	; 0

	if (USB_CurrentMode == USB_MODE_Device)
	{
		#if defined(USB_CAN_BE_DEVICE)
		#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
		UHWCON |=  (1 << UIMOD);
 6e6:	80 81       	ld	r24, Z
 6e8:	80 68       	ori	r24, 0x80	; 128
 6ea:	80 83       	st	Z, r24
 6ec:	19 bc       	out	0x29, r1	; 41
 6ee:	10 92 06 01 	sts	0x0106, r1
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState                 = DEVICE_STATE_Unattached;
 6f2:	10 92 02 01 	sts	0x0102, r1
	USB_Device_ConfigurationNumber  = 0;
 6f6:	10 92 04 01 	sts	0x0104, r1

	#if !defined(NO_DEVICE_REMOTE_WAKEUP)
	USB_Device_RemoteWakeupEnabled  = false;
 6fa:	10 92 03 01 	sts	0x0103, r1
	#endif

	#if !defined(NO_DEVICE_SELF_POWER)
	USB_Device_CurrentlySelfPowered = false;
 6fe:	00 ee       	ldi	r16, 0xE0	; 224
 700:	10 e0       	ldi	r17, 0x00	; 0
			}

			static inline void USB_Device_SetFullSpeed(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetFullSpeed(void)
			{
				UDCON &= ~(1 << LSM);
 702:	f8 01       	movw	r30, r16
 704:	80 81       	ld	r24, Z
 706:	8b 7f       	andi	r24, 0xFB	; 251
 708:	80 83       	st	Z, r24
 70a:	88 81       	ld	r24, Y
 70c:	81 60       	ori	r24, 0x01	; 1
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBCON |= (1 << VBUSTE);
 70e:	88 83       	st	Y, r24
 710:	80 e0       	ldi	r24, 0x00	; 0
 712:	60 e0       	ldi	r22, 0x00	; 0
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
 714:	42 e0       	ldi	r20, 0x02	; 2
 716:	4b df       	rcall	.-362    	; 0x5ae <Endpoint_ConfigureEndpoint_Prv>
 718:	e1 ee       	ldi	r30, 0xE1	; 225
 71a:	f0 e0       	ldi	r31, 0x00	; 0
 71c:	80 81       	ld	r24, Z
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
 71e:	8e 7f       	andi	r24, 0xFE	; 254
 720:	80 83       	st	Z, r24
 722:	e2 ee       	ldi	r30, 0xE2	; 226
 724:	f0 e0       	ldi	r31, 0x00	; 0
 726:	80 81       	ld	r24, Z
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
 728:	81 60       	ori	r24, 0x01	; 1
 72a:	80 83       	st	Z, r24
 72c:	80 81       	ld	r24, Z
 72e:	88 60       	ori	r24, 0x08	; 8
 730:	80 83       	st	Z, r24
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
 732:	f8 01       	movw	r30, r16
 734:	80 81       	ld	r24, Z
 736:	8e 7f       	andi	r24, 0xFE	; 254
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
 738:	80 83       	st	Z, r24
 73a:	88 81       	ld	r24, Y
 73c:	80 61       	ori	r24, 0x10	; 16
 73e:	88 83       	st	Y, r24

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON |=  (1 << OTGPADE);
 740:	df 91       	pop	r29
 742:	cf 91       	pop	r28
 744:	1f 91       	pop	r17
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
 746:	0f 91       	pop	r16
 748:	08 95       	ret

0000074a <USB_Init>:
 74a:	e8 ed       	ldi	r30, 0xD8	; 216
 74c:	f0 e0       	ldi	r31, 0x00	; 0
 74e:	80 81       	ld	r24, Z
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON &= ~(1 << OTGPADE);
 750:	8f 7e       	andi	r24, 0xEF	; 239
 752:	80 83       	st	Z, r24

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON |=  (1 << UVREGE);
 754:	e7 ed       	ldi	r30, 0xD7	; 215
 756:	f0 e0       	ldi	r31, 0x00	; 0
 758:	80 81       	ld	r24, Z
 75a:	81 60       	ori	r24, 0x01	; 1
 75c:	80 83       	st	Z, r24
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
 75e:	81 e0       	ldi	r24, 0x01	; 1
 760:	80 93 05 01 	sts	0x0105, r24

	USB_ResetInterface();
 764:	ad cf       	rjmp	.-166    	; 0x6c0 <USB_ResetInterface>

00000766 <USB_INT_DisableAllInterrupts>:
#include "../USBInterrupt.h"

void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
 766:	e8 ed       	ldi	r30, 0xD8	; 216
 768:	f0 e0       	ldi	r31, 0x00	; 0
 76a:	80 81       	ld	r24, Z
 76c:	8c 7f       	andi	r24, 0xFC	; 252
 76e:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
 770:	10 92 e2 00 	sts	0x00E2, r1
	#endif
}
 774:	08 95       	ret

00000776 <USB_INT_ClearAllInterrupts>:

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
 776:	10 92 da 00 	sts	0x00DA, r1
	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
 77a:	10 92 e1 00 	sts	0x00E1, r1
	#endif
}
 77e:	08 95       	ret

00000780 <__vector_10>:

ISR(USB_GEN_vect, ISR_BLOCK)
{
 780:	1f 92       	push	r1
 782:	0f 92       	push	r0
 784:	0f b6       	in	r0, 0x3f	; 63
 786:	0f 92       	push	r0
 788:	0b b6       	in	r0, 0x3b	; 59
 78a:	0f 92       	push	r0
 78c:	11 24       	eor	r1, r1
 78e:	2f 93       	push	r18
 790:	3f 93       	push	r19
 792:	4f 93       	push	r20
 794:	5f 93       	push	r21
 796:	6f 93       	push	r22
 798:	7f 93       	push	r23
 79a:	8f 93       	push	r24
 79c:	9f 93       	push	r25
 79e:	af 93       	push	r26
 7a0:	bf 93       	push	r27
 7a2:	ef 93       	push	r30
 7a4:	ff 93       	push	r31
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
					case USB_INT_SOFI:
						return (UDINT  & (1 << SOFI));
 7a6:	80 91 e1 00 	lds	r24, 0x00E1
	#if defined(USB_CAN_BE_DEVICE)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
 7aa:	82 ff       	sbrs	r24, 2
 7ac:	0a c0       	rjmp	.+20     	; 0x7c2 <__vector_10+0x42>
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
					case USB_INT_SOFI:
						return (UDIEN  & (1 << SOFE));
 7ae:	80 91 e2 00 	lds	r24, 0x00E2
 7b2:	82 ff       	sbrs	r24, 2
 7b4:	06 c0       	rjmp	.+12     	; 0x7c2 <__vector_10+0x42>
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
						break;
					case USB_INT_SOFI:
						UDINT  &= ~(1 << SOFI);
 7b6:	80 91 e1 00 	lds	r24, 0x00E1
 7ba:	8b 7f       	andi	r24, 0xFB	; 251
 7bc:	80 93 e1 00 	sts	0x00E1, r24
	{
		USB_INT_Clear(USB_INT_SOFI);

		EVENT_USB_Device_StartOfFrame();
 7c0:	0d d2       	rcall	.+1050   	; 0xbdc <USB_Event_Stub>
 7c2:	80 91 da 00 	lds	r24, 0x00DA
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBINT & (1 << VBUSTI));
 7c6:	80 ff       	sbrs	r24, 0
	}
	#endif

	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	if (USB_INT_HasOccurred(USB_INT_VBUSTI) && USB_INT_IsEnabled(USB_INT_VBUSTI))
 7c8:	1d c0       	rjmp	.+58     	; 0x804 <__vector_10+0x84>
 7ca:	80 91 d8 00 	lds	r24, 0x00D8
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBCON & (1 << VBUSTE));
 7ce:	80 ff       	sbrs	r24, 0
 7d0:	19 c0       	rjmp	.+50     	; 0x804 <__vector_10+0x84>
 7d2:	80 91 da 00 	lds	r24, 0x00DA
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBINT &= ~(1 << VBUSTI);
 7d6:	8e 7f       	andi	r24, 0xFE	; 254
 7d8:	80 93 da 00 	sts	0x00DA, r24
 7dc:	80 91 d9 00 	lds	r24, 0x00D9
				 *  \return Boolean \c true if the VBUS line is currently detecting power from a host, \c false otherwise.
				 */
				static inline bool USB_VBUS_GetStatus(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
				static inline bool USB_VBUS_GetStatus(void)
				{
					return ((USBSTA & (1 << VBUS)) ? true : false);
 7e0:	80 ff       	sbrs	r24, 0
	{
		USB_INT_Clear(USB_INT_VBUSTI);

		if (USB_VBUS_GetStatus())
 7e2:	0c c0       	rjmp	.+24     	; 0x7fc <__vector_10+0x7c>
 7e4:	8c e0       	ldi	r24, 0x0C	; 12

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
 7e6:	89 bd       	out	0x29, r24	; 41
 7e8:	8e e0       	ldi	r24, 0x0E	; 14
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
 7ea:	89 bd       	out	0x29, r24	; 41
 7ec:	09 b4       	in	r0, 0x29	; 41
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			{
				USB_PLL_On();
				while (!(USB_PLL_IsReady()));
 7ee:	00 fe       	sbrs	r0, 0
 7f0:	fd cf       	rjmp	.-6      	; 0x7ec <__vector_10+0x6c>
 7f2:	81 e0       	ldi	r24, 0x01	; 1
			}

			USB_DeviceState = DEVICE_STATE_Powered;
 7f4:	80 93 06 01 	sts	0x0106, r24
 7f8:	f4 dc       	rcall	.-1560   	; 0x1e2 <EVENT_USB_Device_Connect>
			EVENT_USB_Device_Connect();
 7fa:	04 c0       	rjmp	.+8      	; 0x804 <__vector_10+0x84>
 7fc:	19 bc       	out	0x29, r1	; 41
 7fe:	10 92 06 01 	sts	0x0106, r1
		else
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			  USB_PLL_Off();

			USB_DeviceState = DEVICE_STATE_Unattached;
 802:	f1 dc       	rcall	.-1566   	; 0x1e6 <EVENT_USB_Device_Disconnect>
 804:	80 91 e1 00 	lds	r24, 0x00E1
			EVENT_USB_Device_Disconnect();
 808:	80 ff       	sbrs	r24, 0
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
 80a:	18 c0       	rjmp	.+48     	; 0x83c <__vector_10+0xbc>
 80c:	80 91 e2 00 	lds	r24, 0x00E2
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
 810:	80 ff       	sbrs	r24, 0
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
 812:	14 c0       	rjmp	.+40     	; 0x83c <__vector_10+0xbc>
 814:	80 91 e2 00 	lds	r24, 0x00E2
 818:	8e 7f       	andi	r24, 0xFE	; 254
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
 81a:	80 93 e2 00 	sts	0x00E2, r24
 81e:	80 91 e2 00 	lds	r24, 0x00E2
 822:	80 61       	ori	r24, 0x10	; 16
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
 824:	80 93 e2 00 	sts	0x00E2, r24
 828:	80 91 d8 00 	lds	r24, 0x00D8
 82c:	80 62       	ori	r24, 0x20	; 32
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON |=  (1 << FRZCLK);
 82e:	80 93 d8 00 	sts	0x00D8, r24
 832:	19 bc       	out	0x29, r1	; 41
 834:	85 e0       	ldi	r24, 0x05	; 5
 836:	80 93 06 01 	sts	0x0106, r24

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
		EVENT_USB_Device_Disconnect();
		#else
		USB_DeviceState = DEVICE_STATE_Suspended;
 83a:	d0 d1       	rcall	.+928    	; 0xbdc <USB_Event_Stub>
 83c:	80 91 e1 00 	lds	r24, 0x00E1
		EVENT_USB_Device_Suspend();
 840:	84 ff       	sbrs	r24, 4
 842:	2d c0       	rjmp	.+90     	; 0x89e <__vector_10+0x11e>
					case USB_INT_IDTI:
						return (USBINT & (1 << IDTI));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
 844:	80 91 e2 00 	lds	r24, 0x00E2
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
 848:	84 ff       	sbrs	r24, 4
 84a:	29 c0       	rjmp	.+82     	; 0x89e <__vector_10+0x11e>
					case USB_INT_IDTI:
						return (USBCON & (1 << IDTE));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
 84c:	8c e0       	ldi	r24, 0x0C	; 12
 84e:	89 bd       	out	0x29, r24	; 41
 850:	8e e0       	ldi	r24, 0x0E	; 14
 852:	89 bd       	out	0x29, r24	; 41

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
 854:	09 b4       	in	r0, 0x29	; 41
 856:	00 fe       	sbrs	r0, 0
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
 858:	fd cf       	rjmp	.-6      	; 0x854 <__vector_10+0xd4>
 85a:	80 91 d8 00 	lds	r24, 0x00D8
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
 85e:	8f 7d       	andi	r24, 0xDF	; 223
 860:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
 864:	80 91 e1 00 	lds	r24, 0x00E1
 868:	8f 7e       	andi	r24, 0xEF	; 239
 86a:	80 93 e1 00 	sts	0x00E1, r24
						USBINT &= ~(1 << IDTI);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
 86e:	80 91 e2 00 	lds	r24, 0x00E2
 872:	8f 7e       	andi	r24, 0xEF	; 239
 874:	80 93 e2 00 	sts	0x00E2, r24
						USBCON &= ~(1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
 878:	80 91 e2 00 	lds	r24, 0x00E2
 87c:	81 60       	ori	r24, 0x01	; 1
 87e:	80 93 e2 00 	sts	0x00E2, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
 882:	80 91 02 01 	lds	r24, 0x0102
 886:	88 23       	and	r24, r24
 888:	21 f4       	brne	.+8      	; 0x892 <__vector_10+0x112>
		USB_INT_Clear(USB_INT_WAKEUPI);

		USB_INT_Disable(USB_INT_WAKEUPI);
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_Device_ConfigurationNumber)
 88a:	80 91 e3 00 	lds	r24, 0x00E3
 88e:	87 ff       	sbrs	r24, 7
 890:	02 c0       	rjmp	.+4      	; 0x896 <__vector_10+0x116>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
 892:	84 e0       	ldi	r24, 0x04	; 4
 894:	01 c0       	rjmp	.+2      	; 0x898 <__vector_10+0x118>
		  USB_DeviceState = DEVICE_STATE_Configured;
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
 896:	81 e0       	ldi	r24, 0x01	; 1
 898:	80 93 06 01 	sts	0x0106, r24
 89c:	9f d1       	rcall	.+830    	; 0xbdc <USB_Event_Stub>
 89e:	80 91 e1 00 	lds	r24, 0x00E1
 8a2:	83 ff       	sbrs	r24, 3

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
		#else
		EVENT_USB_Device_WakeUp();
 8a4:	22 c0       	rjmp	.+68     	; 0x8ea <__vector_10+0x16a>
 8a6:	80 91 e2 00 	lds	r24, 0x00E2
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
 8aa:	83 ff       	sbrs	r24, 3
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
 8ac:	1e c0       	rjmp	.+60     	; 0x8ea <__vector_10+0x16a>
 8ae:	80 91 e1 00 	lds	r24, 0x00E1
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
 8b2:	87 7f       	andi	r24, 0xF7	; 247
 8b4:	80 93 e1 00 	sts	0x00E1, r24
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
 8b8:	82 e0       	ldi	r24, 0x02	; 2
 8ba:	80 93 06 01 	sts	0x0106, r24
 8be:	10 92 02 01 	sts	0x0102, r1
	{
		USB_INT_Clear(USB_INT_EORSTI);

		USB_DeviceState                = DEVICE_STATE_Default;
 8c2:	80 91 e1 00 	lds	r24, 0x00E1
 8c6:	8e 7f       	andi	r24, 0xFE	; 254
		USB_Device_ConfigurationNumber = 0;
 8c8:	80 93 e1 00 	sts	0x00E1, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
 8cc:	80 91 e2 00 	lds	r24, 0x00E2
 8d0:	8e 7f       	andi	r24, 0xFE	; 254
 8d2:	80 93 e2 00 	sts	0x00E2, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
 8d6:	80 91 e2 00 	lds	r24, 0x00E2
 8da:	80 61       	ori	r24, 0x10	; 16
 8dc:	80 93 e2 00 	sts	0x00E2, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
 8e0:	80 e0       	ldi	r24, 0x00	; 0
 8e2:	60 e0       	ldi	r22, 0x00	; 0
 8e4:	42 e0       	ldi	r20, 0x02	; 2
 8e6:	63 de       	rcall	.-826    	; 0x5ae <Endpoint_ConfigureEndpoint_Prv>
 8e8:	79 d1       	rcall	.+754    	; 0xbdc <USB_Event_Stub>
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
 8ea:	ff 91       	pop	r31
 8ec:	ef 91       	pop	r30
 8ee:	bf 91       	pop	r27
 8f0:	af 91       	pop	r26
 8f2:	9f 91       	pop	r25

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
 8f4:	8f 91       	pop	r24
 8f6:	7f 91       	pop	r23
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
 8f8:	6f 91       	pop	r22
 8fa:	5f 91       	pop	r21
 8fc:	4f 91       	pop	r20
 8fe:	3f 91       	pop	r19
 900:	2f 91       	pop	r18
 902:	0f 90       	pop	r0
 904:	0b be       	out	0x3b, r0	; 59
 906:	0f 90       	pop	r0
 908:	0f be       	out	0x3f, r0	; 63
 90a:	0f 90       	pop	r0
 90c:	1f 90       	pop	r1
 90e:	18 95       	reti

00000910 <USB_Device_ProcessControlRequest>:
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_Device_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
 910:	1f 93       	push	r17
 912:	cf 93       	push	r28
 914:	df 93       	push	r29
 916:	cd b7       	in	r28, 0x3d	; 61
 918:	de b7       	in	r29, 0x3e	; 62
 91a:	ac 97       	sbiw	r28, 0x2c	; 44
 91c:	0f b6       	in	r0, 0x3f	; 63
 91e:	f8 94       	cli
 920:	de bf       	out	0x3e, r29	; 62
 922:	0f be       	out	0x3f, r0	; 63
 924:	cd bf       	out	0x3d, r28	; 61
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
 926:	80 e0       	ldi	r24, 0x00	; 0
	USB_ControlRequest.bRequest      = Endpoint_Read_8();
	USB_ControlRequest.wValue        = Endpoint_Read_16_LE();
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;
 928:	e7 e0       	ldi	r30, 0x07	; 7
 92a:	f1 e0       	ldi	r31, 0x01	; 1
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
 92c:	90 91 f1 00 	lds	r25, 0x00F1

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_8();
 930:	91 93       	st	Z+, r25
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
 932:	8f 5f       	subi	r24, 0xFF	; 255
 934:	88 30       	cpi	r24, 0x08	; 8
 936:	d1 f7       	brne	.-12     	; 0x92c <USB_Device_ProcessControlRequest+0x1c>
	  *(RequestHeader++) = Endpoint_Read_8();
	#endif

	EVENT_USB_Device_ControlRequest();
 938:	9f dc       	rcall	.-1730   	; 0x278 <EVENT_USB_Device_ControlRequest>
 93a:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 93e:	83 ff       	sbrs	r24, 3

	if (Endpoint_IsSETUPReceived())
 940:	35 c1       	rjmp	.+618    	; 0xbac <USB_Device_ProcessControlRequest+0x29c>
 942:	80 91 07 01 	lds	r24, 0x0107
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
 946:	20 91 08 01 	lds	r18, 0x0108

		switch (USB_ControlRequest.bRequest)
 94a:	25 30       	cpi	r18, 0x05	; 5
 94c:	09 f4       	brne	.+2      	; 0x950 <USB_Device_ProcessControlRequest+0x40>
 94e:	84 c0       	rjmp	.+264    	; 0xa58 <USB_Device_ProcessControlRequest+0x148>
 950:	26 30       	cpi	r18, 0x06	; 6
 952:	40 f4       	brcc	.+16     	; 0x964 <USB_Device_ProcessControlRequest+0x54>
 954:	21 30       	cpi	r18, 0x01	; 1
 956:	a1 f1       	breq	.+104    	; 0x9c0 <USB_Device_ProcessControlRequest+0xb0>
 958:	21 30       	cpi	r18, 0x01	; 1
 95a:	70 f0       	brcs	.+28     	; 0x978 <USB_Device_ProcessControlRequest+0x68>
 95c:	23 30       	cpi	r18, 0x03	; 3
 95e:	09 f0       	breq	.+2      	; 0x962 <USB_Device_ProcessControlRequest+0x52>
 960:	25 c1       	rjmp	.+586    	; 0xbac <USB_Device_ProcessControlRequest+0x29c>
 962:	2e c0       	rjmp	.+92     	; 0x9c0 <USB_Device_ProcessControlRequest+0xb0>
 964:	28 30       	cpi	r18, 0x08	; 8
 966:	09 f4       	brne	.+2      	; 0x96a <USB_Device_ProcessControlRequest+0x5a>
 968:	f3 c0       	rjmp	.+486    	; 0xb50 <USB_Device_ProcessControlRequest+0x240>
 96a:	29 30       	cpi	r18, 0x09	; 9
 96c:	09 f4       	brne	.+2      	; 0x970 <USB_Device_ProcessControlRequest+0x60>
 96e:	02 c1       	rjmp	.+516    	; 0xb74 <USB_Device_ProcessControlRequest+0x264>
 970:	26 30       	cpi	r18, 0x06	; 6
 972:	09 f0       	breq	.+2      	; 0x976 <USB_Device_ProcessControlRequest+0x66>
 974:	1b c1       	rjmp	.+566    	; 0xbac <USB_Device_ProcessControlRequest+0x29c>
 976:	93 c0       	rjmp	.+294    	; 0xa9e <USB_Device_ProcessControlRequest+0x18e>
 978:	80 38       	cpi	r24, 0x80	; 128
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
 97a:	21 f0       	breq	.+8      	; 0x984 <USB_Device_ProcessControlRequest+0x74>
 97c:	82 38       	cpi	r24, 0x82	; 130
 97e:	09 f0       	breq	.+2      	; 0x982 <USB_Device_ProcessControlRequest+0x72>
 980:	15 c1       	rjmp	.+554    	; 0xbac <USB_Device_ProcessControlRequest+0x29c>
 982:	08 c0       	rjmp	.+16     	; 0x994 <USB_Device_ProcessControlRequest+0x84>
 984:	80 91 03 01 	lds	r24, 0x0103
	Endpoint_ClearOUT();
}

static void USB_Device_GetStatus(void)
{
	uint8_t CurrentStatus = 0;
 988:	90 91 04 01 	lds	r25, 0x0104
			if (USB_Device_CurrentlySelfPowered)
			  CurrentStatus |= FEATURE_SELFPOWERED_ENABLED;
			#endif

			#if !defined(NO_DEVICE_REMOTE_WAKEUP)
			if (USB_Device_RemoteWakeupEnabled)
 98c:	99 23       	and	r25, r25
 98e:	71 f0       	breq	.+28     	; 0x9ac <USB_Device_ProcessControlRequest+0x9c>
 990:	82 60       	ori	r24, 0x02	; 2
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
 992:	0c c0       	rjmp	.+24     	; 0x9ac <USB_Device_ProcessControlRequest+0x9c>
 994:	80 91 0b 01 	lds	r24, 0x010B
			#endif
			break;
		case (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_ENDPOINT):
			#if !defined(CONTROL_ONLY_DEVICE)
			Endpoint_SelectEndpoint((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
 998:	8f 70       	andi	r24, 0x0F	; 15
 99a:	80 93 e9 00 	sts	0x00E9, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 99e:	90 91 eb 00 	lds	r25, 0x00EB
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
 9a2:	81 e0       	ldi	r24, 0x01	; 1

			CurrentStatus = Endpoint_IsStalled();
 9a4:	95 ff       	sbrs	r25, 5
 9a6:	80 e0       	ldi	r24, 0x00	; 0
 9a8:	10 92 e9 00 	sts	0x00E9, r1
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 9ac:	90 91 e8 00 	lds	r25, 0x00E8
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 9b0:	97 7f       	andi	r25, 0xF7	; 247
 9b2:	90 93 e8 00 	sts	0x00E8, r25
 9b6:	80 93 f1 00 	sts	0x00F1, r24
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
 9ba:	10 92 f1 00 	sts	0x00F1, r1
				UEDATX = (Data >> 8);
 9be:	d3 c0       	rjmp	.+422    	; 0xb66 <USB_Device_ProcessControlRequest+0x256>
 9c0:	88 23       	and	r24, r24
				}

				break;
			case REQ_ClearFeature:
			case REQ_SetFeature:
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
 9c2:	19 f0       	breq	.+6      	; 0x9ca <USB_Device_ProcessControlRequest+0xba>
 9c4:	82 30       	cpi	r24, 0x02	; 2
 9c6:	09 f0       	breq	.+2      	; 0x9ca <USB_Device_ProcessControlRequest+0xba>
 9c8:	f1 c0       	rjmp	.+482    	; 0xbac <USB_Device_ProcessControlRequest+0x29c>
 9ca:	90 e0       	ldi	r25, 0x00	; 0
	Endpoint_ClearStatusStage();
}

static void USB_Device_ClearSetFeature(void)
{
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
 9cc:	8f 71       	andi	r24, 0x1F	; 31
 9ce:	90 70       	andi	r25, 0x00	; 0
 9d0:	00 97       	sbiw	r24, 0x00	; 0
 9d2:	29 f0       	breq	.+10     	; 0x9de <USB_Device_ProcessControlRequest+0xce>
 9d4:	82 30       	cpi	r24, 0x02	; 2
 9d6:	91 05       	cpc	r25, r1
 9d8:	09 f0       	breq	.+2      	; 0x9dc <USB_Device_ProcessControlRequest+0xcc>
 9da:	e8 c0       	rjmp	.+464    	; 0xbac <USB_Device_ProcessControlRequest+0x29c>
 9dc:	0b c0       	rjmp	.+22     	; 0x9f4 <USB_Device_ProcessControlRequest+0xe4>
 9de:	80 91 09 01 	lds	r24, 0x0109
	{
		#if !defined(NO_DEVICE_REMOTE_WAKEUP)
		case REQREC_DEVICE:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
 9e2:	81 30       	cpi	r24, 0x01	; 1
 9e4:	09 f0       	breq	.+2      	; 0x9e8 <USB_Device_ProcessControlRequest+0xd8>
 9e6:	e2 c0       	rjmp	.+452    	; 0xbac <USB_Device_ProcessControlRequest+0x29c>
 9e8:	23 30       	cpi	r18, 0x03	; 3
			  USB_Device_RemoteWakeupEnabled = (USB_ControlRequest.bRequest == REQ_SetFeature);
 9ea:	09 f0       	breq	.+2      	; 0x9ee <USB_Device_ProcessControlRequest+0xde>
 9ec:	80 e0       	ldi	r24, 0x00	; 0
 9ee:	80 93 04 01 	sts	0x0104, r24
 9f2:	2c c0       	rjmp	.+88     	; 0xa4c <USB_Device_ProcessControlRequest+0x13c>
 9f4:	80 91 09 01 	lds	r24, 0x0109

			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
 9f8:	88 23       	and	r24, r24
 9fa:	41 f5       	brne	.+80     	; 0xa4c <USB_Device_ProcessControlRequest+0x13c>
 9fc:	20 91 0b 01 	lds	r18, 0x010B
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
 a00:	2f 70       	andi	r18, 0x0F	; 15
 a02:	09 f4       	brne	.+2      	; 0xa06 <USB_Device_ProcessControlRequest+0xf6>

				if (EndpointIndex == ENDPOINT_CONTROLEP)
 a04:	d3 c0       	rjmp	.+422    	; 0xbac <USB_Device_ProcessControlRequest+0x29c>
 a06:	20 93 e9 00 	sts	0x00E9, r18
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 a0a:	80 91 eb 00 	lds	r24, 0x00EB
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
 a0e:	80 ff       	sbrs	r24, 0
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
 a10:	1d c0       	rjmp	.+58     	; 0xa4c <USB_Device_ProcessControlRequest+0x13c>
 a12:	80 91 08 01 	lds	r24, 0x0108
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
 a16:	83 30       	cpi	r24, 0x03	; 3
 a18:	21 f4       	brne	.+8      	; 0xa22 <USB_Device_ProcessControlRequest+0x112>
 a1a:	80 91 eb 00 	lds	r24, 0x00EB
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
 a1e:	80 62       	ori	r24, 0x20	; 32
 a20:	13 c0       	rjmp	.+38     	; 0xa48 <USB_Device_ProcessControlRequest+0x138>
 a22:	80 91 eb 00 	lds	r24, 0x00EB
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
 a26:	80 61       	ori	r24, 0x10	; 16
 a28:	80 93 eb 00 	sts	0x00EB, r24
 a2c:	81 e0       	ldi	r24, 0x01	; 1
			 *  \param[in] Address  Endpoint address whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t Address)
			{
				UERST = (1 << (Address & ENDPOINT_EPNUM_MASK));
 a2e:	90 e0       	ldi	r25, 0x00	; 0
 a30:	02 c0       	rjmp	.+4      	; 0xa36 <USB_Device_ProcessControlRequest+0x126>
 a32:	88 0f       	add	r24, r24
 a34:	99 1f       	adc	r25, r25
 a36:	2a 95       	dec	r18
 a38:	e2 f7       	brpl	.-8      	; 0xa32 <USB_Device_ProcessControlRequest+0x122>
 a3a:	80 93 ea 00 	sts	0x00EA, r24
 a3e:	10 92 ea 00 	sts	0x00EA, r1
				UERST = 0;
 a42:	80 91 eb 00 	lds	r24, 0x00EB

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
 a46:	88 60       	ori	r24, 0x08	; 8
 a48:	80 93 eb 00 	sts	0x00EB, r24
 a4c:	10 92 e9 00 	sts	0x00E9, r1
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 a50:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 a54:	87 7f       	andi	r24, 0xF7	; 247
 a56:	8a c0       	rjmp	.+276    	; 0xb6c <USB_Device_ProcessControlRequest+0x25c>
 a58:	88 23       	and	r24, r24
					USB_Device_ClearSetFeature();
				}

				break;
			case REQ_SetAddress:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
 a5a:	09 f0       	breq	.+2      	; 0xa5e <USB_Device_ProcessControlRequest+0x14e>
 a5c:	a7 c0       	rjmp	.+334    	; 0xbac <USB_Device_ProcessControlRequest+0x29c>
 a5e:	10 91 09 01 	lds	r17, 0x0109
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t DeviceAddress = (USB_ControlRequest.wValue & 0x7F);
 a62:	1f 77       	andi	r17, 0x7F	; 127
 a64:	80 91 e3 00 	lds	r24, 0x00E3
			#endif

			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				UDADDR = (UDADDR & (1 << ADDEN)) | (Address & 0x7F);
 a68:	80 78       	andi	r24, 0x80	; 128
 a6a:	81 2b       	or	r24, r17
 a6c:	80 93 e3 00 	sts	0x00E3, r24
 a70:	80 91 e8 00 	lds	r24, 0x00E8
 a74:	87 7f       	andi	r24, 0xF7	; 247
 a76:	80 93 e8 00 	sts	0x00E8, r24
 a7a:	ce dd       	rcall	.-1124   	; 0x618 <Endpoint_ClearStatusStage>

	USB_Device_SetDeviceAddress(DeviceAddress);

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
 a7c:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 a80:	80 ff       	sbrs	r24, 0
 a82:	fc cf       	rjmp	.-8      	; 0xa7c <USB_Device_ProcessControlRequest+0x16c>

	while (!(Endpoint_IsINReady()));
 a84:	80 91 e3 00 	lds	r24, 0x00E3
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address)
			{
				(void)Address;
				
				UDADDR |= (1 << ADDEN);
 a88:	80 68       	ori	r24, 0x80	; 128
 a8a:	80 93 e3 00 	sts	0x00E3, r24
 a8e:	11 23       	and	r17, r17
 a90:	11 f0       	breq	.+4      	; 0xa96 <USB_Device_ProcessControlRequest+0x186>

	USB_Device_EnableDeviceAddress(DeviceAddress);

	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
 a92:	83 e0       	ldi	r24, 0x03	; 3
 a94:	01 c0       	rjmp	.+2      	; 0xa98 <USB_Device_ProcessControlRequest+0x188>
 a96:	82 e0       	ldi	r24, 0x02	; 2
 a98:	80 93 06 01 	sts	0x0106, r24
 a9c:	87 c0       	rjmp	.+270    	; 0xbac <USB_Device_ProcessControlRequest+0x29c>
 a9e:	80 58       	subi	r24, 0x80	; 128
 aa0:	82 30       	cpi	r24, 0x02	; 2
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_SetAddress();

				break;
			case REQ_GetDescriptor:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
 aa2:	08 f0       	brcs	.+2      	; 0xaa6 <USB_Device_ProcessControlRequest+0x196>
 aa4:	83 c0       	rjmp	.+262    	; 0xbac <USB_Device_ProcessControlRequest+0x29c>
 aa6:	80 91 09 01 	lds	r24, 0x0109
	    !(defined(USE_FLASH_DESCRIPTORS) || defined(USE_EEPROM_DESCRIPTORS) || defined(USE_RAM_DESCRIPTORS))
	uint8_t DescriptorAddressSpace;
	#endif

	#if !defined(NO_INTERNAL_SERIAL) && (USE_INTERNAL_SERIAL != NO_DESCRIPTOR)
	if (USB_ControlRequest.wValue == ((DTYPE_String << 8) | USE_INTERNAL_SERIAL))
 aaa:	90 91 0a 01 	lds	r25, 0x010A
 aae:	23 e0       	ldi	r18, 0x03	; 3
 ab0:	8c 3d       	cpi	r24, 0xDC	; 220
 ab2:	92 07       	cpc	r25, r18
 ab4:	a9 f5       	brne	.+106    	; 0xb20 <USB_Device_ProcessControlRequest+0x210>
 ab6:	83 e0       	ldi	r24, 0x03	; 3
 ab8:	8c 83       	std	Y+4, r24	; 0x04
	{
		USB_Descriptor_Header_t Header;
		uint16_t                UnicodeString[INTERNAL_SERIAL_LENGTH_BITS / 4];
	} SignatureDescriptor;

	SignatureDescriptor.Header.Type = DTYPE_String;
 aba:	8a e2       	ldi	r24, 0x2A	; 42
 abc:	8b 83       	std	Y+3, r24	; 0x03
	SignatureDescriptor.Header.Size = USB_STRING_LEN(INTERNAL_SERIAL_LENGTH_BITS / 4);
 abe:	5f b7       	in	r21, 0x3f	; 63
 ac0:	f8 94       	cli
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
 ac2:	de 01       	movw	r26, r28
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
 ac4:	13 96       	adiw	r26, 0x03	; 3
				__builtin_ssrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				cli();
				#endif

				GCC_MEMORY_BARRIER();
 ac6:	80 e0       	ldi	r24, 0x00	; 0
 ac8:	90 e0       	ldi	r25, 0x00	; 0
 aca:	4e e0       	ldi	r20, 0x0E	; 14
 acc:	61 e2       	ldi	r22, 0x21	; 33
			static inline void USB_Device_GetSerialString(uint16_t* const UnicodeString)
			{
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;
 ace:	e4 2f       	mov	r30, r20

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
				{
					uint8_t SerialByte = boot_signature_byte_get(SigReadAddress);
 ad0:	f0 e0       	ldi	r31, 0x00	; 0
 ad2:	60 93 57 00 	sts	0x0057, r22
 ad6:	e4 91       	lpm	r30, Z
 ad8:	80 ff       	sbrs	r24, 0
 ada:	03 c0       	rjmp	.+6      	; 0xae2 <USB_Device_ProcessControlRequest+0x1d2>

					if (SerialCharNum & 0x01)
 adc:	e2 95       	swap	r30
 ade:	ef 70       	andi	r30, 0x0F	; 15
					{
						SerialByte >>= 4;
 ae0:	4f 5f       	subi	r20, 0xFF	; 255
 ae2:	ef 70       	andi	r30, 0x0F	; 15
						SigReadAddress++;
 ae4:	2e 2f       	mov	r18, r30
					}

					SerialByte &= 0x0F;
 ae6:	30 e0       	ldi	r19, 0x00	; 0
 ae8:	ea 30       	cpi	r30, 0x0A	; 10
 aea:	18 f0       	brcs	.+6      	; 0xaf2 <USB_Device_ProcessControlRequest+0x1e2>

					UnicodeString[SerialCharNum] = cpu_to_le16((SerialByte >= 10) ?
 aec:	29 5c       	subi	r18, 0xC9	; 201
 aee:	3f 4f       	sbci	r19, 0xFF	; 255
 af0:	02 c0       	rjmp	.+4      	; 0xaf6 <USB_Device_ProcessControlRequest+0x1e6>
 af2:	20 5d       	subi	r18, 0xD0	; 208
 af4:	3f 4f       	sbci	r19, 0xFF	; 255
 af6:	13 96       	adiw	r26, 0x03	; 3
 af8:	3c 93       	st	X, r19
 afa:	2e 93       	st	-X, r18
 afc:	12 97       	sbiw	r26, 0x02	; 2
 afe:	01 96       	adiw	r24, 0x01	; 1
 b00:	12 96       	adiw	r26, 0x02	; 2
 b02:	84 31       	cpi	r24, 0x14	; 20
 b04:	91 05       	cpc	r25, r1
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
 b06:	19 f7       	brne	.-58     	; 0xace <USB_Device_ProcessControlRequest+0x1be>
 b08:	5f bf       	out	0x3f, r21	; 63
 b0a:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 b0e:	87 7f       	andi	r24, 0xF7	; 247
 b10:	80 93 e8 00 	sts	0x00E8, r24
 b14:	ce 01       	movw	r24, r28
 b16:	03 96       	adiw	r24, 0x03	; 3

	USB_Device_GetSerialString(SignatureDescriptor.UnicodeString);

	Endpoint_ClearSETUP();

	Endpoint_Write_Control_Stream_LE(&SignatureDescriptor, sizeof(SignatureDescriptor));
 b18:	6a e2       	ldi	r22, 0x2A	; 42
 b1a:	70 e0       	ldi	r23, 0x00	; 0
 b1c:	8f dc       	rcall	.-1762   	; 0x43c <Endpoint_Write_Control_Stream_LE>
 b1e:	12 c0       	rjmp	.+36     	; 0xb44 <USB_Device_ProcessControlRequest+0x234>
 b20:	60 91 0b 01 	lds	r22, 0x010B
 b24:	ae 01       	movw	r20, r28
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif

	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
 b26:	4f 5f       	subi	r20, 0xFF	; 255
 b28:	5f 4f       	sbci	r21, 0xFF	; 255
 b2a:	fb db       	rcall	.-2058   	; 0x322 <CALLBACK_USB_GetDescriptor>
 b2c:	bc 01       	movw	r22, r24
 b2e:	00 97       	sbiw	r24, 0x00	; 0
 b30:	09 f4       	brne	.+2      	; 0xb34 <USB_Device_ProcessControlRequest+0x224>
 b32:	3c c0       	rjmp	.+120    	; 0xbac <USB_Device_ProcessControlRequest+0x29c>
 b34:	80 91 e8 00 	lds	r24, 0x00E8
 b38:	87 7f       	andi	r24, 0xF7	; 247
 b3a:	80 93 e8 00 	sts	0x00E8, r24
 b3e:	89 81       	ldd	r24, Y+1	; 0x01
 b40:	9a 81       	ldd	r25, Y+2	; 0x02
 b42:	d8 dc       	rcall	.-1616   	; 0x4f4 <Endpoint_Write_Control_PStream_LE>
 b44:	80 91 e8 00 	lds	r24, 0x00E8
	#if defined(USE_RAM_DESCRIPTORS) || !defined(ARCH_HAS_MULTI_ADDRESS_SPACE)
	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_EEPROM_DESCRIPTORS)
	Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_FLASH_DESCRIPTORS)
	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
 b48:	8b 77       	andi	r24, 0x7B	; 123
 b4a:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 b4e:	2e c0       	rjmp	.+92     	; 0xbac <USB_Device_ProcessControlRequest+0x29c>
 b50:	80 38       	cpi	r24, 0x80	; 128
 b52:	61 f5       	brne	.+88     	; 0xbac <USB_Device_ProcessControlRequest+0x29c>
 b54:	80 91 e8 00 	lds	r24, 0x00E8
 b58:	87 7f       	andi	r24, 0xF7	; 247
					USB_Device_GetDescriptor();
				}

				break;
			case REQ_GetConfiguration:
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
 b5a:	80 93 e8 00 	sts	0x00E8, r24
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 b5e:	80 91 02 01 	lds	r24, 0x0102
 b62:	80 93 f1 00 	sts	0x00F1, r24
 b66:	80 91 e8 00 	lds	r24, 0x00E8

static void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();

	Endpoint_Write_8(USB_Device_ConfigurationNumber);
 b6a:	8e 77       	andi	r24, 0x7E	; 126
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
 b6c:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 b70:	53 dd       	rcall	.-1370   	; 0x618 <Endpoint_ClearStatusStage>
 b72:	1c c0       	rjmp	.+56     	; 0xbac <USB_Device_ProcessControlRequest+0x29c>
 b74:	88 23       	and	r24, r24
 b76:	d1 f4       	brne	.+52     	; 0xbac <USB_Device_ProcessControlRequest+0x29c>
 b78:	90 91 09 01 	lds	r25, 0x0109
	Endpoint_ClearIN();

	Endpoint_ClearStatusStage();
 b7c:	92 30       	cpi	r25, 0x02	; 2
 b7e:	b0 f4       	brcc	.+44     	; 0xbac <USB_Device_ProcessControlRequest+0x29c>
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_GetConfiguration();

				break;
			case REQ_SetConfiguration:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
 b80:	80 91 e8 00 	lds	r24, 0x00E8
}

static void USB_Device_SetConfiguration(void)
{
	#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
 b84:	87 7f       	andi	r24, 0xF7	; 247
 b86:	80 93 e8 00 	sts	0x00E8, r24
 b8a:	90 93 02 01 	sts	0x0102, r25
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 b8e:	44 dd       	rcall	.-1400   	; 0x618 <Endpoint_ClearStatusStage>
 b90:	80 91 02 01 	lds	r24, 0x0102
 b94:	88 23       	and	r24, r24
	#endif
	#endif

	Endpoint_ClearSETUP();

	USB_Device_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
 b96:	21 f4       	brne	.+8      	; 0xba0 <USB_Device_ProcessControlRequest+0x290>
 b98:	80 91 e3 00 	lds	r24, 0x00E3

	Endpoint_ClearStatusStage();
 b9c:	87 ff       	sbrs	r24, 7

	if (USB_Device_ConfigurationNumber)
 b9e:	02 c0       	rjmp	.+4      	; 0xba4 <USB_Device_ProcessControlRequest+0x294>
 ba0:	84 e0       	ldi	r24, 0x04	; 4
 ba2:	01 c0       	rjmp	.+2      	; 0xba6 <USB_Device_ProcessControlRequest+0x296>
 ba4:	81 e0       	ldi	r24, 0x01	; 1
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
 ba6:	80 93 06 01 	sts	0x0106, r24
	  USB_DeviceState = DEVICE_STATE_Configured;
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
 baa:	1f db       	rcall	.-2498   	; 0x1ea <EVENT_USB_Device_ConfigurationChanged>
 bac:	80 91 e8 00 	lds	r24, 0x00E8
 bb0:	83 ff       	sbrs	r24, 3
 bb2:	0a c0       	rjmp	.+20     	; 0xbc8 <USB_Device_ProcessControlRequest+0x2b8>
 bb4:	80 91 e8 00 	lds	r24, 0x00E8

	EVENT_USB_Device_ConfigurationChanged();
 bb8:	87 7f       	andi	r24, 0xF7	; 247
 bba:	80 93 e8 00 	sts	0x00E8, r24
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 bbe:	80 91 eb 00 	lds	r24, 0x00EB
			default:
				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
 bc2:	80 62       	ori	r24, 0x20	; 32
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 bc4:	80 93 eb 00 	sts	0x00EB, r24
 bc8:	ac 96       	adiw	r28, 0x2c	; 44
 bca:	0f b6       	in	r0, 0x3f	; 63
 bcc:	f8 94       	cli
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
 bce:	de bf       	out	0x3e, r29	; 62
 bd0:	0f be       	out	0x3f, r0	; 63
 bd2:	cd bf       	out	0x3d, r28	; 61
 bd4:	df 91       	pop	r29
 bd6:	cf 91       	pop	r28
	{
		Endpoint_ClearSETUP();
		Endpoint_StallTransaction();
	}
}
 bd8:	1f 91       	pop	r17
 bda:	08 95       	ret

00000bdc <USB_Event_Stub>:
#include "Events.h"

void USB_Event_Stub(void)
{

}
 bdc:	08 95       	ret

00000bde <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
 bde:	cf 93       	push	r28
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_DeviceTask(void)
{
	if (USB_DeviceState == DEVICE_STATE_Unattached)
 be0:	80 91 06 01 	lds	r24, 0x0106
 be4:	88 23       	and	r24, r24
 be6:	a9 f0       	breq	.+42     	; 0xc12 <USB_USBTask+0x34>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
 be8:	80 91 e9 00 	lds	r24, 0x00E9
 bec:	8f 70       	andi	r24, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
 bee:	90 91 ec 00 	lds	r25, 0x00EC
 bf2:	90 ff       	sbrs	r25, 0
 bf4:	02 c0       	rjmp	.+4      	; 0xbfa <USB_USBTask+0x1c>
 bf6:	c0 e8       	ldi	r28, 0x80	; 128
 bf8:	01 c0       	rjmp	.+2      	; 0xbfc <USB_USBTask+0x1e>
 bfa:	c0 e0       	ldi	r28, 0x00	; 0
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
 bfc:	c8 2b       	or	r28, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 bfe:	10 92 e9 00 	sts	0x00E9, r1
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 c02:	80 91 e8 00 	lds	r24, 0x00E8

	uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

	if (Endpoint_IsSETUPReceived())
 c06:	83 ff       	sbrs	r24, 3
 c08:	01 c0       	rjmp	.+2      	; 0xc0c <USB_USBTask+0x2e>
	  USB_Device_ProcessControlRequest();
 c0a:	82 de       	rcall	.-764    	; 0x910 <USB_Device_ProcessControlRequest>
 c0c:	cf 70       	andi	r28, 0x0F	; 15
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 c0e:	c0 93 e9 00 	sts	0x00E9, r28
 c12:	cf 91       	pop	r28
	#elif defined(USB_CAN_BE_HOST)
		USB_HostTask();
	#elif defined(USB_CAN_BE_DEVICE)
		USB_DeviceTask();
	#endif
}
 c14:	08 95       	ret

00000c16 <_exit>:
 c16:	f8 94       	cli

00000c18 <__stop_program>:
 c18:	ff cf       	rjmp	.-2      	; 0xc18 <__stop_program>
