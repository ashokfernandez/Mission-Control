
Mouse.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  00000d82  00000e16  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000d82  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000014  00800102  00800102  00000e18  2**0
                  ALLOC
  3 .stab         00000924  00000000  00000000  00000e18  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000195  00000000  00000000  0000173c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000348  00000000  00000000  000018d8  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00004f73  00000000  00000000  00001c20  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001328  00000000  00000000  00006b93  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000027f5  00000000  00000000  00007ebb  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000008ec  00000000  00000000  0000a6b0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00002426  00000000  00000000  0000af9c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00003710  00000000  00000000  0000d3c2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000520  00000000  00000000  00010ad2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	a0 c0       	rjmp	.+320    	; 0x142 <__ctors_end>
   2:	00 00       	nop
   4:	bc c0       	rjmp	.+376    	; 0x17e <__bad_interrupt>
   6:	00 00       	nop
   8:	ba c0       	rjmp	.+372    	; 0x17e <__bad_interrupt>
   a:	00 00       	nop
   c:	b8 c0       	rjmp	.+368    	; 0x17e <__bad_interrupt>
   e:	00 00       	nop
  10:	b6 c0       	rjmp	.+364    	; 0x17e <__bad_interrupt>
  12:	00 00       	nop
  14:	b4 c0       	rjmp	.+360    	; 0x17e <__bad_interrupt>
  16:	00 00       	nop
  18:	b2 c0       	rjmp	.+356    	; 0x17e <__bad_interrupt>
  1a:	00 00       	nop
  1c:	b0 c0       	rjmp	.+352    	; 0x17e <__bad_interrupt>
  1e:	00 00       	nop
  20:	ae c0       	rjmp	.+348    	; 0x17e <__bad_interrupt>
  22:	00 00       	nop
  24:	ac c0       	rjmp	.+344    	; 0x17e <__bad_interrupt>
  26:	00 00       	nop
  28:	52 c4       	rjmp	.+2212   	; 0x8ce <__vector_10>
  2a:	00 00       	nop
  2c:	a8 c0       	rjmp	.+336    	; 0x17e <__bad_interrupt>
  2e:	00 00       	nop
  30:	a6 c0       	rjmp	.+332    	; 0x17e <__bad_interrupt>
  32:	00 00       	nop
  34:	a4 c0       	rjmp	.+328    	; 0x17e <__bad_interrupt>
  36:	00 00       	nop
  38:	a2 c0       	rjmp	.+324    	; 0x17e <__bad_interrupt>
  3a:	00 00       	nop
  3c:	a0 c0       	rjmp	.+320    	; 0x17e <__bad_interrupt>
  3e:	00 00       	nop
  40:	9e c0       	rjmp	.+316    	; 0x17e <__bad_interrupt>
  42:	00 00       	nop
  44:	9c c0       	rjmp	.+312    	; 0x17e <__bad_interrupt>
  46:	00 00       	nop
  48:	9a c0       	rjmp	.+308    	; 0x17e <__bad_interrupt>
  4a:	00 00       	nop
  4c:	98 c0       	rjmp	.+304    	; 0x17e <__bad_interrupt>
  4e:	00 00       	nop
  50:	96 c0       	rjmp	.+300    	; 0x17e <__bad_interrupt>
  52:	00 00       	nop
  54:	94 c0       	rjmp	.+296    	; 0x17e <__bad_interrupt>
  56:	00 00       	nop
  58:	92 c0       	rjmp	.+292    	; 0x17e <__bad_interrupt>
  5a:	00 00       	nop
  5c:	90 c0       	rjmp	.+288    	; 0x17e <__bad_interrupt>
  5e:	00 00       	nop
  60:	8e c0       	rjmp	.+284    	; 0x17e <__bad_interrupt>
  62:	00 00       	nop
  64:	8c c0       	rjmp	.+280    	; 0x17e <__bad_interrupt>
  66:	00 00       	nop
  68:	8a c0       	rjmp	.+276    	; 0x17e <__bad_interrupt>
  6a:	00 00       	nop
  6c:	88 c0       	rjmp	.+272    	; 0x17e <__bad_interrupt>
  6e:	00 00       	nop
  70:	86 c0       	rjmp	.+268    	; 0x17e <__bad_interrupt>
  72:	00 00       	nop
  74:	84 c0       	rjmp	.+264    	; 0x17e <__bad_interrupt>
  76:	00 00       	nop
  78:	82 c0       	rjmp	.+260    	; 0x17e <__bad_interrupt>
  7a:	00 00       	nop
  7c:	80 c0       	rjmp	.+256    	; 0x17e <__bad_interrupt>
  7e:	00 00       	nop
  80:	7e c0       	rjmp	.+252    	; 0x17e <__bad_interrupt>
  82:	00 00       	nop
  84:	7c c0       	rjmp	.+248    	; 0x17e <__bad_interrupt>
  86:	00 00       	nop
  88:	7a c0       	rjmp	.+244    	; 0x17e <__bad_interrupt>
  8a:	00 00       	nop
  8c:	78 c0       	rjmp	.+240    	; 0x17e <__bad_interrupt>
  8e:	00 00       	nop
  90:	76 c0       	rjmp	.+236    	; 0x17e <__bad_interrupt>
  92:	00 00       	nop
  94:	74 c0       	rjmp	.+232    	; 0x17e <__bad_interrupt>
  96:	00 00       	nop

00000098 <ProductString>:
  98:	20 03 4c 00 55 00 46 00 41 00 20 00 4d 00 6f 00      .L.U.F.A. .M.o.
  a8:	75 00 73 00 65 00 20 00 44 00 65 00 6d 00 6f 00     u.s.e. .D.e.m.o.
  b8:	00 00                                               ..

000000ba <ManufacturerString>:
  ba:	18 03 44 00 65 00 61 00 6e 00 20 00 43 00 61 00     ..D.e.a.n. .C.a.
  ca:	6d 00 65 00 72 00 61 00 00 00                       m.e.r.a...

000000d4 <LanguageString>:
  d4:	04 03 09 04                                         ....

000000d8 <ConfigurationDescriptor>:
  d8:	09 02 22 00 01 01 00 c0 32 09 04 00 00 01 03 01     ..".....2.......
  e8:	02 00 09 21 11 01 00 01 22 36 00 07 05 81 03 08     ...!...."6......
  f8:	00 05                                               ..

000000fa <DeviceDescriptor>:
  fa:	12 01 10 01 00 00 00 08 eb 03 41 20 01 00 01 02     ..........A ....
 10a:	00 01                                               ..

0000010c <MouseReport>:
 10c:	05 01 09 02 a1 01 09 01 a1 00 05 09 19 01 29 03     ..............).
 11c:	15 00 25 01 95 03 75 01 81 02 95 01 75 05 81 01     ..%...u.....u...
 12c:	05 01 09 30 09 31 15 ff 25 01 35 ff 45 01 95 02     ...0.1..%.5.E...
 13c:	75 08 81 06 c0 c0                                   u.....

00000142 <__ctors_end>:
 142:	11 24       	eor	r1, r1
 144:	1f be       	out	0x3f, r1	; 63
 146:	cf ef       	ldi	r28, 0xFF	; 255
 148:	d0 e2       	ldi	r29, 0x20	; 32
 14a:	de bf       	out	0x3e, r29	; 62
 14c:	cd bf       	out	0x3d, r28	; 61

0000014e <__do_copy_data>:
 14e:	11 e0       	ldi	r17, 0x01	; 1
 150:	a0 e0       	ldi	r26, 0x00	; 0
 152:	b1 e0       	ldi	r27, 0x01	; 1
 154:	e2 e8       	ldi	r30, 0x82	; 130
 156:	fd e0       	ldi	r31, 0x0D	; 13
 158:	00 e0       	ldi	r16, 0x00	; 0
 15a:	0b bf       	out	0x3b, r16	; 59
 15c:	02 c0       	rjmp	.+4      	; 0x162 <__do_copy_data+0x14>
 15e:	07 90       	elpm	r0, Z+
 160:	0d 92       	st	X+, r0
 162:	a2 30       	cpi	r26, 0x02	; 2
 164:	b1 07       	cpc	r27, r17
 166:	d9 f7       	brne	.-10     	; 0x15e <__do_copy_data+0x10>
 168:	1b be       	out	0x3b, r1	; 59

0000016a <__do_clear_bss>:
 16a:	11 e0       	ldi	r17, 0x01	; 1
 16c:	a2 e0       	ldi	r26, 0x02	; 2
 16e:	b1 e0       	ldi	r27, 0x01	; 1
 170:	01 c0       	rjmp	.+2      	; 0x174 <.do_clear_bss_start>

00000172 <.do_clear_bss_loop>:
 172:	1d 92       	st	X+, r1

00000174 <.do_clear_bss_start>:
 174:	a6 31       	cpi	r26, 0x16	; 22
 176:	b1 07       	cpc	r27, r17
 178:	e1 f7       	brne	.-8      	; 0x172 <.do_clear_bss_loop>
 17a:	73 d1       	rcall	.+742    	; 0x462 <main>
 17c:	00 c6       	rjmp	.+3072   	; 0xd7e <_exit>

0000017e <__bad_interrupt>:
 17e:	40 cf       	rjmp	.-384    	; 0x0 <__vectors>

00000180 <LEDs_SetAllLEDs>:
				PORTD &= ~LEDMask;
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
			{
				PORTD = ((PORTD & ~LEDS_ALL_LEDS) | LEDMask);
 180:	9b b1       	in	r25, 0x0b	; 11
 182:	9f 70       	andi	r25, 0x0F	; 15
 184:	98 2b       	or	r25, r24
 186:	9b b9       	out	0x0b, r25	; 11
			}
 188:	08 95       	ret

0000018a <SetupHardware>:

/** Configures the board hardware and chip peripherals for the demo's functionality. */
void SetupHardware(void)
{
	/* Disable watchdog if enabled by bootloader/fuses */
	MCUSR &= ~(1 << WDRF);
 18a:	84 b7       	in	r24, 0x34	; 52
 18c:	87 7f       	andi	r24, 0xF7	; 247
 18e:	84 bf       	out	0x34, r24	; 52
	wdt_disable();
 190:	88 e1       	ldi	r24, 0x18	; 24
 192:	0f b6       	in	r0, 0x3f	; 63
 194:	f8 94       	cli
 196:	80 93 60 00 	sts	0x0060, r24
 19a:	10 92 60 00 	sts	0x0060, r1
 19e:	0f be       	out	0x3f, r0	; 63
The type of x is clock_div_t.
*/
void clock_prescale_set(clock_div_t __x)
{
    uint8_t __tmp = _BV(CLKPCE);
    __asm__ __volatile__ (
 1a0:	90 e0       	ldi	r25, 0x00	; 0
 1a2:	80 e8       	ldi	r24, 0x80	; 128
 1a4:	0f b6       	in	r0, 0x3f	; 63
 1a6:	f8 94       	cli
 1a8:	80 93 61 00 	sts	0x0061, r24
 1ac:	90 93 61 00 	sts	0x0061, r25
 1b0:	0f be       	out	0x3f, r0	; 63

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void Joystick_Init(void)
			{
				DDRB  &= ~JOY_BMASK;
 1b2:	84 b1       	in	r24, 0x04	; 4
 1b4:	8f 71       	andi	r24, 0x1F	; 31
 1b6:	84 b9       	out	0x04, r24	; 4
				DDRE  &= ~JOY_EMASK;
 1b8:	8d b1       	in	r24, 0x0d	; 13
 1ba:	8f 7c       	andi	r24, 0xCF	; 207
 1bc:	8d b9       	out	0x0d, r24	; 13

				PORTB |=  JOY_BMASK;
 1be:	85 b1       	in	r24, 0x05	; 5
 1c0:	80 6e       	ori	r24, 0xE0	; 224
 1c2:	85 b9       	out	0x05, r24	; 5
				PORTE |=  JOY_EMASK;
 1c4:	8e b1       	in	r24, 0x0e	; 14
 1c6:	80 63       	ori	r24, 0x30	; 48
 1c8:	8e b9       	out	0x0e, r24	; 14

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void LEDs_Init(void)
			{
				DDRD  |=  LEDS_ALL_LEDS;
 1ca:	8a b1       	in	r24, 0x0a	; 10
 1cc:	80 6f       	ori	r24, 0xF0	; 240
 1ce:	8a b9       	out	0x0a, r24	; 10
				PORTD &= ~LEDS_ALL_LEDS;
 1d0:	8b b1       	in	r24, 0x0b	; 11
 1d2:	8f 70       	andi	r24, 0x0F	; 15
 1d4:	8b b9       	out	0x0b, r24	; 11

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void Buttons_Init(void)
			{
				DDRE  &= ~BUTTONS_BUTTON1;
 1d6:	6a 98       	cbi	0x0d, 2	; 13
				PORTE |=  BUTTONS_BUTTON1;
 1d8:	72 9a       	sbi	0x0e, 2	; 14

	/* Hardware Initialization */
	Joystick_Init();
	LEDs_Init();
	Buttons_Init();
	USB_Init();
 1da:	5e c3       	rjmp	.+1724   	; 0x898 <USB_Init>

000001dc <EVENT_USB_Device_Connect>:
 1dc:	80 ea       	ldi	r24, 0xA0	; 160
}
 1de:	d0 df       	rcall	.-96     	; 0x180 <LEDs_SetAllLEDs>
 *  starts the library USB task to begin the enumeration and USB management process.
 */
void EVENT_USB_Device_Connect(void)
{
	/* Indicate USB enumerating */
	LEDs_SetAllLEDs(LEDMASK_USB_ENUMERATING);
 1e0:	81 e0       	ldi	r24, 0x01	; 1

	/* Default to report protocol on connect */
	UsingReportProtocol = true;
 1e2:	80 93 00 01 	sts	0x0100, r24
 1e6:	08 95       	ret

000001e8 <EVENT_USB_Device_Disconnect>:
}
 1e8:	80 e1       	ldi	r24, 0x10	; 16
 *  the status LEDs and stops the USB management and Mouse reporting tasks.
 */
void EVENT_USB_Device_Disconnect(void)
{
	/* Indicate USB not ready */
	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
 1ea:	ca cf       	rjmp	.-108    	; 0x180 <LEDs_SetAllLEDs>

000001ec <EVENT_USB_Device_ConfigurationChanged>:
 1ec:	81 e0       	ldi	r24, 0x01	; 1
}
 1ee:	61 ec       	ldi	r22, 0xC1	; 193
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
 1f0:	42 e0       	ldi	r20, 0x02	; 2
 1f2:	84 d2       	rcall	.+1288   	; 0x6fc <Endpoint_ConfigureEndpoint_Prv>
 1f4:	90 91 e2 00 	lds	r25, 0x00E2
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
 1f8:	94 60       	ori	r25, 0x04	; 4
 1fa:	90 93 e2 00 	sts	0x00E2, r25
 1fe:	88 23       	and	r24, r24

	/* Turn on Start-of-Frame events for tracking HID report period expiry */
	USB_Device_EnableSOFEvents();

	/* Indicate endpoint configuration success or failure */
	LEDs_SetAllLEDs(ConfigSuccess ? LEDMASK_USB_READY : LEDMASK_USB_ERROR);
 200:	11 f0       	breq	.+4      	; 0x206 <EVENT_USB_Device_ConfigurationChanged+0x1a>
 202:	80 e6       	ldi	r24, 0x60	; 96
 204:	01 c0       	rjmp	.+2      	; 0x208 <EVENT_USB_Device_ConfigurationChanged+0x1c>
 206:	80 e9       	ldi	r24, 0x90	; 144
 208:	bb cf       	rjmp	.-138    	; 0x180 <LEDs_SetAllLEDs>

0000020a <EVENT_USB_Device_StartOfFrame>:
 20a:	80 91 04 01 	lds	r24, 0x0104
}
 20e:	90 91 05 01 	lds	r25, 0x0105

/** Event handler for the USB device Start Of Frame event. */
void EVENT_USB_Device_StartOfFrame(void)
{
	/* One millisecond has elapsed, decrement the idle time remaining counter if it has not already elapsed */
	if (IdleMSRemaining)
 212:	00 97       	sbiw	r24, 0x00	; 0
 214:	29 f0       	breq	.+10     	; 0x220 <EVENT_USB_Device_StartOfFrame+0x16>
	  IdleMSRemaining--;
 216:	01 97       	sbiw	r24, 0x01	; 1
 218:	90 93 05 01 	sts	0x0105, r25
 21c:	80 93 04 01 	sts	0x0104, r24
 220:	08 95       	ret

00000222 <CreateMouseReport>:
/** Fills the given HID report data structure with the next HID report to send to the host.
 *
 *  \param[out] ReportData  Pointer to a HID report data structure to be filled
 */
void CreateMouseReport(USB_MouseReport_Data_t* const ReportData)
{
 222:	fc 01       	movw	r30, r24
			}

			static inline uint8_t Joystick_GetStatus(void) ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t Joystick_GetStatus(void)
			{
				return (((uint8_t)~PINB & JOY_BMASK) | (((uint8_t)~PINE & JOY_EMASK) >> JOY_PORTE_MASK_SHIFT));
 224:	23 b1       	in	r18, 0x03	; 3
 226:	8c b1       	in	r24, 0x0c	; 12
 228:	80 95       	com	r24
 22a:	90 e0       	ldi	r25, 0x00	; 0
 22c:	80 73       	andi	r24, 0x30	; 48
 22e:	90 70       	andi	r25, 0x00	; 0
 230:	95 95       	asr	r25
 232:	87 95       	ror	r24
 234:	20 95       	com	r18
 236:	20 7e       	andi	r18, 0xE0	; 224
 238:	28 2b       	or	r18, r24
			}

			static inline uint8_t Buttons_GetStatus(void) ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t Buttons_GetStatus(void)
			{
				return ((PINE & BUTTONS_BUTTON1) ^ BUTTONS_BUTTON1);
 23a:	8c b1       	in	r24, 0x0c	; 12
 23c:	80 95       	com	r24
 23e:	84 70       	andi	r24, 0x04	; 4
	uint8_t JoyStatus_LCL    = Joystick_GetStatus();
	uint8_t ButtonStatus_LCL = Buttons_GetStatus();

	/* Clear the report contents */
	memset(ReportData, 0, sizeof(USB_MouseReport_Data_t));
 240:	93 e0       	ldi	r25, 0x03	; 3
 242:	df 01       	movw	r26, r30
 244:	1d 92       	st	X+, r1
 246:	9a 95       	dec	r25
 248:	e9 f7       	brne	.-6      	; 0x244 <CreateMouseReport+0x22>

	if (JoyStatus_LCL & JOY_UP)
 24a:	27 ff       	sbrs	r18, 7
 24c:	02 c0       	rjmp	.+4      	; 0x252 <CreateMouseReport+0x30>
	  ReportData->Y = -1;
 24e:	9f ef       	ldi	r25, 0xFF	; 255
 250:	03 c0       	rjmp	.+6      	; 0x258 <CreateMouseReport+0x36>
	else if (JoyStatus_LCL & JOY_DOWN)
 252:	24 ff       	sbrs	r18, 4
 254:	02 c0       	rjmp	.+4      	; 0x25a <CreateMouseReport+0x38>
	  ReportData->Y =  1;
 256:	91 e0       	ldi	r25, 0x01	; 1
 258:	92 83       	std	Z+2, r25	; 0x02

	if (JoyStatus_LCL & JOY_LEFT)
 25a:	26 ff       	sbrs	r18, 6
 25c:	02 c0       	rjmp	.+4      	; 0x262 <CreateMouseReport+0x40>
	  ReportData->X = -1;
 25e:	9f ef       	ldi	r25, 0xFF	; 255
 260:	03 c0       	rjmp	.+6      	; 0x268 <CreateMouseReport+0x46>
	else if (JoyStatus_LCL & JOY_RIGHT)
 262:	23 ff       	sbrs	r18, 3
 264:	02 c0       	rjmp	.+4      	; 0x26a <CreateMouseReport+0x48>
	  ReportData->X =  1;
 266:	91 e0       	ldi	r25, 0x01	; 1
 268:	91 83       	std	Z+1, r25	; 0x01

	if (JoyStatus_LCL & JOY_PRESS)
 26a:	25 ff       	sbrs	r18, 5
 26c:	03 c0       	rjmp	.+6      	; 0x274 <CreateMouseReport+0x52>
	  ReportData->Button |= (1 << 0);
 26e:	90 81       	ld	r25, Z
 270:	91 60       	ori	r25, 0x01	; 1
 272:	90 83       	st	Z, r25

	if (ButtonStatus_LCL & BUTTONS_BUTTON1)
 274:	88 23       	and	r24, r24
 276:	19 f0       	breq	.+6      	; 0x27e <CreateMouseReport+0x5c>
	  ReportData->Button |= (1 << 1);
 278:	80 81       	ld	r24, Z
 27a:	82 60       	ori	r24, 0x02	; 2
 27c:	80 83       	st	Z, r24
 27e:	08 95       	ret

00000280 <EVENT_USB_Device_ControlRequest>:
/** Event handler for the USB_ControlRequest event. This is used to catch and process control requests sent to
 *  the device from the USB host before passing along unhandled control requests to the library for processing
 *  internally.
 */
void EVENT_USB_Device_ControlRequest(void)
{
 280:	0f 93       	push	r16
 282:	1f 93       	push	r17
 284:	cf 93       	push	r28
 286:	df 93       	push	r29
 288:	00 d0       	rcall	.+0      	; 0x28a <EVENT_USB_Device_ControlRequest+0xa>
 28a:	0f 92       	push	r0
 28c:	cd b7       	in	r28, 0x3d	; 61
 28e:	de b7       	in	r29, 0x3e	; 62
	/* Handle HID Class specific requests */
	switch (USB_ControlRequest.bRequest)
 290:	80 91 0f 01 	lds	r24, 0x010F
 294:	83 30       	cpi	r24, 0x03	; 3
 296:	69 f1       	breq	.+90     	; 0x2f2 <EVENT_USB_Device_ControlRequest+0x72>
 298:	84 30       	cpi	r24, 0x04	; 4
 29a:	30 f4       	brcc	.+12     	; 0x2a8 <EVENT_USB_Device_ControlRequest+0x28>
 29c:	81 30       	cpi	r24, 0x01	; 1
 29e:	59 f0       	breq	.+22     	; 0x2b6 <EVENT_USB_Device_ControlRequest+0x36>
 2a0:	82 30       	cpi	r24, 0x02	; 2
 2a2:	09 f0       	breq	.+2      	; 0x2a6 <EVENT_USB_Device_ControlRequest+0x26>
 2a4:	7b c0       	rjmp	.+246    	; 0x39c <EVENT_USB_Device_ControlRequest+0x11c>
 2a6:	61 c0       	rjmp	.+194    	; 0x36a <EVENT_USB_Device_ControlRequest+0xea>
 2a8:	8a 30       	cpi	r24, 0x0A	; 10
 2aa:	09 f4       	brne	.+2      	; 0x2ae <EVENT_USB_Device_ControlRequest+0x2e>
 2ac:	45 c0       	rjmp	.+138    	; 0x338 <EVENT_USB_Device_ControlRequest+0xb8>
 2ae:	8b 30       	cpi	r24, 0x0B	; 11
 2b0:	09 f0       	breq	.+2      	; 0x2b4 <EVENT_USB_Device_ControlRequest+0x34>
 2b2:	74 c0       	rjmp	.+232    	; 0x39c <EVENT_USB_Device_ControlRequest+0x11c>
 2b4:	2b c0       	rjmp	.+86     	; 0x30c <EVENT_USB_Device_ControlRequest+0x8c>
	{
		case HID_REQ_GetReport:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
 2b6:	80 91 0e 01 	lds	r24, 0x010E
 2ba:	81 3a       	cpi	r24, 0xA1	; 161
 2bc:	09 f0       	breq	.+2      	; 0x2c0 <EVENT_USB_Device_ControlRequest+0x40>
 2be:	6e c0       	rjmp	.+220    	; 0x39c <EVENT_USB_Device_ControlRequest+0x11c>
			{
				USB_MouseReport_Data_t MouseReportData;

				/* Create the next mouse report for transmission to the host */
				CreateMouseReport(&MouseReportData);
 2c0:	8e 01       	movw	r16, r28
 2c2:	0f 5f       	subi	r16, 0xFF	; 255
 2c4:	1f 4f       	sbci	r17, 0xFF	; 255
 2c6:	c8 01       	movw	r24, r16
 2c8:	ac df       	rcall	.-168    	; 0x222 <CreateMouseReport>
 2ca:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 2ce:	87 7f       	andi	r24, 0xF7	; 247
 2d0:	80 93 e8 00 	sts	0x00E8, r24
 2d4:	c8 01       	movw	r24, r16

				Endpoint_ClearSETUP();

				/* Write the report data to the control endpoint */
				Endpoint_Write_Control_Stream_LE(&MouseReportData, sizeof(MouseReportData));
 2d6:	63 e0       	ldi	r22, 0x03	; 3
 2d8:	70 e0       	ldi	r23, 0x00	; 0
 2da:	57 d1       	rcall	.+686    	; 0x58a <Endpoint_Write_Control_Stream_LE>
 2dc:	80 91 e8 00 	lds	r24, 0x00E8
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 2e0:	8b 77       	andi	r24, 0x7B	; 123
 2e2:	80 93 e8 00 	sts	0x00E8, r24
 2e6:	83 e0       	ldi	r24, 0x03	; 3
 2e8:	f8 01       	movw	r30, r16
				Endpoint_ClearOUT();

				/* Clear the report data afterwards */
				memset(&MouseReportData, 0, sizeof(MouseReportData));
 2ea:	11 92       	st	Z+, r1
 2ec:	8a 95       	dec	r24
 2ee:	e9 f7       	brne	.-6      	; 0x2ea <EVENT_USB_Device_ControlRequest+0x6a>
 2f0:	55 c0       	rjmp	.+170    	; 0x39c <EVENT_USB_Device_ControlRequest+0x11c>
 2f2:	80 91 0e 01 	lds	r24, 0x010E
			}

			break;
		case HID_REQ_GetProtocol:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
 2f6:	81 3a       	cpi	r24, 0xA1	; 161
 2f8:	09 f0       	breq	.+2      	; 0x2fc <EVENT_USB_Device_ControlRequest+0x7c>
 2fa:	50 c0       	rjmp	.+160    	; 0x39c <EVENT_USB_Device_ControlRequest+0x11c>
 2fc:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 300:	87 7f       	andi	r24, 0xF7	; 247
 302:	80 93 e8 00 	sts	0x00E8, r24
 306:	80 91 00 01 	lds	r24, 0x0100
			{
				Endpoint_ClearSETUP();

				/* Write the current protocol flag to the host */
				Endpoint_Write_8(UsingReportProtocol);
 30a:	40 c0       	rjmp	.+128    	; 0x38c <EVENT_USB_Device_ControlRequest+0x10c>
 30c:	80 91 0e 01 	lds	r24, 0x010E
				Endpoint_ClearStatusStage();
			}

			break;
		case HID_REQ_SetProtocol:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
 310:	81 32       	cpi	r24, 0x21	; 33
 312:	09 f0       	breq	.+2      	; 0x316 <EVENT_USB_Device_ControlRequest+0x96>
 314:	43 c0       	rjmp	.+134    	; 0x39c <EVENT_USB_Device_ControlRequest+0x11c>
 316:	80 91 e8 00 	lds	r24, 0x00E8
 31a:	87 7f       	andi	r24, 0xF7	; 247
 31c:	80 93 e8 00 	sts	0x00E8, r24
 320:	22 d2       	rcall	.+1092   	; 0x766 <Endpoint_ClearStatusStage>
 322:	21 e0       	ldi	r18, 0x01	; 1
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
 324:	80 91 10 01 	lds	r24, 0x0110

				/* Set or clear the flag depending on what the host indicates that the current Protocol should be */
				UsingReportProtocol = (USB_ControlRequest.wValue != 0);
 328:	90 91 11 01 	lds	r25, 0x0111
 32c:	00 97       	sbiw	r24, 0x00	; 0
 32e:	09 f4       	brne	.+2      	; 0x332 <EVENT_USB_Device_ControlRequest+0xb2>
 330:	20 e0       	ldi	r18, 0x00	; 0
 332:	20 93 00 01 	sts	0x0100, r18
 336:	32 c0       	rjmp	.+100    	; 0x39c <EVENT_USB_Device_ControlRequest+0x11c>
 338:	80 91 0e 01 	lds	r24, 0x010E
 33c:	81 32       	cpi	r24, 0x21	; 33
			}

			break;
		case HID_REQ_SetIdle:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
 33e:	71 f5       	brne	.+92     	; 0x39c <EVENT_USB_Device_ControlRequest+0x11c>
 340:	80 91 e8 00 	lds	r24, 0x00E8
 344:	87 7f       	andi	r24, 0xF7	; 247
 346:	80 93 e8 00 	sts	0x00E8, r24
 34a:	0d d2       	rcall	.+1050   	; 0x766 <Endpoint_ClearStatusStage>
 34c:	80 91 10 01 	lds	r24, 0x0110
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
 350:	90 91 11 01 	lds	r25, 0x0111

				/* Get idle period in MSB, must multiply by 4 to get the duration in milliseconds */
				IdleCount = ((USB_ControlRequest.wValue & 0xFF00) >> 6);
 354:	80 70       	andi	r24, 0x00	; 0
 356:	56 e0       	ldi	r21, 0x06	; 6
 358:	96 95       	lsr	r25
 35a:	87 95       	ror	r24
 35c:	5a 95       	dec	r21
 35e:	e1 f7       	brne	.-8      	; 0x358 <EVENT_USB_Device_ControlRequest+0xd8>
 360:	90 93 03 01 	sts	0x0103, r25
 364:	80 93 02 01 	sts	0x0102, r24
 368:	19 c0       	rjmp	.+50     	; 0x39c <EVENT_USB_Device_ControlRequest+0x11c>
 36a:	80 91 0e 01 	lds	r24, 0x010E
 36e:	81 3a       	cpi	r24, 0xA1	; 161
 370:	a9 f4       	brne	.+42     	; 0x39c <EVENT_USB_Device_ControlRequest+0x11c>
			}

			break;
		case HID_REQ_GetIdle:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
 372:	80 91 e8 00 	lds	r24, 0x00E8
 376:	87 7f       	andi	r24, 0xF7	; 247
 378:	80 93 e8 00 	sts	0x00E8, r24
 37c:	80 91 02 01 	lds	r24, 0x0102
 380:	90 91 03 01 	lds	r25, 0x0103
			{
				Endpoint_ClearSETUP();

				/* Write the current idle duration to the host, must be divided by 4 before sent to host */
				Endpoint_Write_8(IdleCount >> 2);
 384:	96 95       	lsr	r25
 386:	87 95       	ror	r24
 388:	96 95       	lsr	r25
 38a:	87 95       	ror	r24
 38c:	80 93 f1 00 	sts	0x00F1, r24
 390:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
 394:	8e 77       	andi	r24, 0x7E	; 126
 396:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 39a:	e5 d1       	rcall	.+970    	; 0x766 <Endpoint_ClearStatusStage>
 39c:	0f 90       	pop	r0
 39e:	0f 90       	pop	r0
 3a0:	0f 90       	pop	r0

				Endpoint_ClearIN();
				Endpoint_ClearStatusStage();
 3a2:	df 91       	pop	r29
 3a4:	cf 91       	pop	r28
			}

			break;
	}
}
 3a6:	1f 91       	pop	r17
 3a8:	0f 91       	pop	r16
 3aa:	08 95       	ret

000003ac <SendNextReport>:
 3ac:	cf 93       	push	r28
 3ae:	df 93       	push	r29
 3b0:	00 d0       	rcall	.+0      	; 0x3b2 <SendNextReport+0x6>
 3b2:	0f 92       	push	r0
 3b4:	cd b7       	in	r28, 0x3d	; 61
	  ReportData->Button |= (1 << 1);
}

/** Sends the next HID report to the host, via the keyboard data endpoint. */
void SendNextReport(void)
{
 3b6:	de b7       	in	r29, 0x3e	; 62
	static USB_MouseReport_Data_t PrevMouseReportData;
	USB_MouseReport_Data_t        MouseReportData;
	bool                          SendReport;

	/* Create the next mouse report for transmission to the host */
	CreateMouseReport(&MouseReportData);
 3b8:	ce 01       	movw	r24, r28
 3ba:	01 96       	adiw	r24, 0x01	; 1
 3bc:	32 df       	rcall	.-412    	; 0x222 <CreateMouseReport>
 3be:	86 e0       	ldi	r24, 0x06	; 6

	/* Check to see if the report data has changed - if so a report MUST be sent */
	SendReport = (memcmp(&PrevMouseReportData, &MouseReportData, sizeof(USB_MouseReport_Data_t)) != 0);
 3c0:	91 e0       	ldi	r25, 0x01	; 1
 3c2:	be 01       	movw	r22, r28
 3c4:	6f 5f       	subi	r22, 0xFF	; 255
 3c6:	7f 4f       	sbci	r23, 0xFF	; 255
 3c8:	43 e0       	ldi	r20, 0x03	; 3
 3ca:	50 e0       	ldi	r21, 0x00	; 0
 3cc:	cb d4       	rcall	.+2454   	; 0xd64 <memcmp>
 3ce:	9c 01       	movw	r18, r24
 3d0:	8b 81       	ldd	r24, Y+3	; 0x03
 3d2:	88 23       	and	r24, r24

	/* Override the check if the Y or X values are non-zero - we want continuous movement while the joystick
	 * is being held down (via continuous reports), otherwise the cursor will only move once per joystick toggle */
	if ((MouseReportData.Y != 0) || (MouseReportData.X != 0))
 3d4:	49 f4       	brne	.+18     	; 0x3e8 <SendNextReport+0x3c>
 3d6:	8a 81       	ldd	r24, Y+2	; 0x02
 3d8:	41 e0       	ldi	r20, 0x01	; 1
 3da:	88 23       	and	r24, r24
	  SendReport = true;
 3dc:	31 f4       	brne	.+12     	; 0x3ea <SendNextReport+0x3e>
	/* Check to see if the report data has changed - if so a report MUST be sent */
	SendReport = (memcmp(&PrevMouseReportData, &MouseReportData, sizeof(USB_MouseReport_Data_t)) != 0);

	/* Override the check if the Y or X values are non-zero - we want continuous movement while the joystick
	 * is being held down (via continuous reports), otherwise the cursor will only move once per joystick toggle */
	if ((MouseReportData.Y != 0) || (MouseReportData.X != 0))
 3de:	21 15       	cp	r18, r1
 3e0:	31 05       	cpc	r19, r1

	/* Create the next mouse report for transmission to the host */
	CreateMouseReport(&MouseReportData);

	/* Check to see if the report data has changed - if so a report MUST be sent */
	SendReport = (memcmp(&PrevMouseReportData, &MouseReportData, sizeof(USB_MouseReport_Data_t)) != 0);
 3e2:	19 f4       	brne	.+6      	; 0x3ea <SendNextReport+0x3e>
 3e4:	40 e0       	ldi	r20, 0x00	; 0
 3e6:	01 c0       	rjmp	.+2      	; 0x3ea <SendNextReport+0x3e>
 3e8:	41 e0       	ldi	r20, 0x01	; 1
 3ea:	80 91 02 01 	lds	r24, 0x0102
	 * is being held down (via continuous reports), otherwise the cursor will only move once per joystick toggle */
	if ((MouseReportData.Y != 0) || (MouseReportData.X != 0))
	  SendReport = true;

	/* Check if the idle period is set and has elapsed */
	if (IdleCount && (!(IdleMSRemaining)))
 3ee:	90 91 03 01 	lds	r25, 0x0103
 3f2:	00 97       	sbiw	r24, 0x00	; 0
 3f4:	61 f0       	breq	.+24     	; 0x40e <SendNextReport+0x62>
 3f6:	20 91 04 01 	lds	r18, 0x0104
 3fa:	30 91 05 01 	lds	r19, 0x0105
 3fe:	21 15       	cp	r18, r1
 400:	31 05       	cpc	r19, r1
 402:	29 f4       	brne	.+10     	; 0x40e <SendNextReport+0x62>
 404:	90 93 05 01 	sts	0x0105, r25
	{
		/* Reset the idle time remaining counter */
		IdleMSRemaining = IdleCount;
 408:	80 93 04 01 	sts	0x0104, r24
 40c:	41 e0       	ldi	r20, 0x01	; 1
 40e:	81 e0       	ldi	r24, 0x01	; 1

		/* Idle period is set and has elapsed, must send a report to the host */
		SendReport = true;
 410:	80 93 e9 00 	sts	0x00E9, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 414:	80 91 e8 00 	lds	r24, 0x00E8
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
 418:	85 ff       	sbrs	r24, 5
 41a:	17 c0       	rjmp	.+46     	; 0x44a <SendNextReport+0x9e>

	/* Select the Mouse Report Endpoint */
	Endpoint_SelectEndpoint(MOUSE_EPADDR);

	/* Check if Mouse Endpoint Ready for Read/Write and if we should send a new report */
	if (Endpoint_IsReadWriteAllowed() && SendReport)
 41c:	44 23       	and	r20, r20
 41e:	a9 f0       	breq	.+42     	; 0x44a <SendNextReport+0x9e>
 420:	a6 e0       	ldi	r26, 0x06	; 6
 422:	b1 e0       	ldi	r27, 0x01	; 1
	{
		/* Save the current report data for later comparison to check for changes */
		PrevMouseReportData = MouseReportData;
 424:	fe 01       	movw	r30, r28
 426:	31 96       	adiw	r30, 0x01	; 1
 428:	83 e0       	ldi	r24, 0x03	; 3
 42a:	01 90       	ld	r0, Z+
 42c:	0d 92       	st	X+, r0
 42e:	81 50       	subi	r24, 0x01	; 1
 430:	e1 f7       	brne	.-8      	; 0x42a <SendNextReport+0x7e>
 432:	ce 01       	movw	r24, r28
 434:	01 96       	adiw	r24, 0x01	; 1

		/* Write Mouse Report Data */
		Endpoint_Write_Stream_LE(&MouseReportData, sizeof(MouseReportData), NULL);
 436:	63 e0       	ldi	r22, 0x03	; 3
 438:	70 e0       	ldi	r23, 0x00	; 0
 43a:	40 e0       	ldi	r20, 0x00	; 0
 43c:	50 e0       	ldi	r21, 0x00	; 0
 43e:	55 d0       	rcall	.+170    	; 0x4ea <Endpoint_Write_Stream_LE>
 440:	80 91 e8 00 	lds	r24, 0x00E8
 444:	8e 77       	andi	r24, 0x7E	; 126
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 446:	80 93 e8 00 	sts	0x00E8, r24
 44a:	0f 90       	pop	r0
 44c:	0f 90       	pop	r0
 44e:	0f 90       	pop	r0

		/* Finalize the stream transfer to send the last packet */
		Endpoint_ClearIN();
	}
}
 450:	df 91       	pop	r29
 452:	cf 91       	pop	r28
 454:	08 95       	ret

00000456 <Mouse_Task>:
 456:	80 91 0d 01 	lds	r24, 0x010D
 45a:	84 30       	cpi	r24, 0x04	; 4

/** Task to manage HID report generation and transmission to the host, when in report mode. */
void Mouse_Task(void)
{
	/* Device must be connected and configured for the task to run */
	if (USB_DeviceState != DEVICE_STATE_Configured)
 45c:	09 f4       	brne	.+2      	; 0x460 <Mouse_Task+0xa>
	  return;

	/* Send the next mouse report to the host */
	SendNextReport();
 45e:	a6 cf       	rjmp	.-180    	; 0x3ac <SendNextReport>
 460:	08 95       	ret

00000462 <main>:
 462:	93 de       	rcall	.-730    	; 0x18a <SetupHardware>
/** Main program entry point. This routine configures the hardware required by the application, then
 *  enters a loop to run the application tasks in sequence.
 */
int main(void)
{
	SetupHardware();
 464:	80 e1       	ldi	r24, 0x10	; 16

	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
 466:	8c de       	rcall	.-744    	; 0x180 <LEDs_SetAllLEDs>
 468:	78 94       	sei
 46a:	f5 df       	rcall	.-22     	; 0x456 <Mouse_Task>
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				sei();
 46c:	5f d4       	rcall	.+2238   	; 0xd2c <USB_USBTask>
	GlobalInterruptEnable();

	for (;;)
	{
		Mouse_Task();
 46e:	fd cf       	rjmp	.-6      	; 0x46a <main+0x8>

00000470 <CALLBACK_USB_GetDescriptor>:
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
 470:	93 30       	cpi	r25, 0x03	; 3
 472:	89 f0       	breq	.+34     	; 0x496 <CALLBACK_USB_GetDescriptor+0x26>
 474:	94 30       	cpi	r25, 0x04	; 4
 476:	28 f4       	brcc	.+10     	; 0x482 <CALLBACK_USB_GetDescriptor+0x12>
 478:	91 30       	cpi	r25, 0x01	; 1
 47a:	49 f1       	breq	.+82     	; 0x4ce <CALLBACK_USB_GetDescriptor+0x5e>
 47c:	92 30       	cpi	r25, 0x02	; 2
 47e:	61 f5       	brne	.+88     	; 0x4d8 <CALLBACK_USB_GetDescriptor+0x68>
 480:	05 c0       	rjmp	.+10     	; 0x48c <CALLBACK_USB_GetDescriptor+0x1c>
 482:	91 32       	cpi	r25, 0x21	; 33
 484:	d1 f0       	breq	.+52     	; 0x4ba <CALLBACK_USB_GetDescriptor+0x4a>
 486:	92 32       	cpi	r25, 0x22	; 34
 488:	39 f5       	brne	.+78     	; 0x4d8 <CALLBACK_USB_GetDescriptor+0x68>
 48a:	1c c0       	rjmp	.+56     	; 0x4c4 <CALLBACK_USB_GetDescriptor+0x54>
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
			Size    = sizeof(USB_Descriptor_Configuration_t);
 48c:	82 e2       	ldi	r24, 0x22	; 34
 48e:	90 e0       	ldi	r25, 0x00	; 0
		case DTYPE_Device:
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
 490:	e8 ed       	ldi	r30, 0xD8	; 216
 492:	f0 e0       	ldi	r31, 0x00	; 0
			Size    = sizeof(USB_Descriptor_Configuration_t);
			break;
 494:	25 c0       	rjmp	.+74     	; 0x4e0 <CALLBACK_USB_GetDescriptor+0x70>
		case DTYPE_String:
			switch (DescriptorNumber)
 496:	81 30       	cpi	r24, 0x01	; 1
 498:	41 f0       	breq	.+16     	; 0x4aa <CALLBACK_USB_GetDescriptor+0x3a>
 49a:	81 30       	cpi	r24, 0x01	; 1
 49c:	18 f0       	brcs	.+6      	; 0x4a4 <CALLBACK_USB_GetDescriptor+0x34>
 49e:	82 30       	cpi	r24, 0x02	; 2
 4a0:	d9 f4       	brne	.+54     	; 0x4d8 <CALLBACK_USB_GetDescriptor+0x68>
 4a2:	06 c0       	rjmp	.+12     	; 0x4b0 <CALLBACK_USB_GetDescriptor+0x40>
			{
				case 0x00:
					Address = &LanguageString;
					Size    = pgm_read_byte(&LanguageString.Header.Size);
 4a4:	e4 ed       	ldi	r30, 0xD4	; 212
 4a6:	f0 e0       	ldi	r31, 0x00	; 0
 4a8:	05 c0       	rjmp	.+10     	; 0x4b4 <CALLBACK_USB_GetDescriptor+0x44>
					break;
				case 0x01:
					Address = &ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
 4aa:	ea eb       	ldi	r30, 0xBA	; 186
 4ac:	f0 e0       	ldi	r31, 0x00	; 0
 4ae:	02 c0       	rjmp	.+4      	; 0x4b4 <CALLBACK_USB_GetDescriptor+0x44>
					break;
				case 0x02:
					Address = &ProductString;
					Size    = pgm_read_byte(&ProductString.Header.Size);
 4b0:	e8 e9       	ldi	r30, 0x98	; 152
 4b2:	f0 e0       	ldi	r31, 0x00	; 0
 4b4:	84 91       	lpm	r24, Z
 4b6:	90 e0       	ldi	r25, 0x00	; 0
					break;
 4b8:	13 c0       	rjmp	.+38     	; 0x4e0 <CALLBACK_USB_GetDescriptor+0x70>
			}

			break;
		case HID_DTYPE_HID:
			Address = &ConfigurationDescriptor.HID_MouseHID;
			Size    = sizeof(USB_HID_Descriptor_HID_t);
 4ba:	89 e0       	ldi	r24, 0x09	; 9
 4bc:	90 e0       	ldi	r25, 0x00	; 0
					break;
			}

			break;
		case HID_DTYPE_HID:
			Address = &ConfigurationDescriptor.HID_MouseHID;
 4be:	ea ee       	ldi	r30, 0xEA	; 234
 4c0:	f0 e0       	ldi	r31, 0x00	; 0
			Size    = sizeof(USB_HID_Descriptor_HID_t);
			break;
 4c2:	0e c0       	rjmp	.+28     	; 0x4e0 <CALLBACK_USB_GetDescriptor+0x70>
		case HID_DTYPE_Report:
			Address = &MouseReport;
			Size    = sizeof(MouseReport);
 4c4:	86 e3       	ldi	r24, 0x36	; 54
 4c6:	90 e0       	ldi	r25, 0x00	; 0
		case HID_DTYPE_HID:
			Address = &ConfigurationDescriptor.HID_MouseHID;
			Size    = sizeof(USB_HID_Descriptor_HID_t);
			break;
		case HID_DTYPE_Report:
			Address = &MouseReport;
 4c8:	ec e0       	ldi	r30, 0x0C	; 12
 4ca:	f1 e0       	ldi	r31, 0x01	; 1
			Size    = sizeof(MouseReport);
			break;
 4cc:	09 c0       	rjmp	.+18     	; 0x4e0 <CALLBACK_USB_GetDescriptor+0x70>

	switch (DescriptorType)
	{
		case DTYPE_Device:
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
 4ce:	82 e1       	ldi	r24, 0x12	; 18
 4d0:	90 e0       	ldi	r25, 0x00	; 0
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
	{
		case DTYPE_Device:
			Address = &DeviceDescriptor;
 4d2:	ea ef       	ldi	r30, 0xFA	; 250
 4d4:	f0 e0       	ldi	r31, 0x00	; 0
 4d6:	04 c0       	rjmp	.+8      	; 0x4e0 <CALLBACK_USB_GetDescriptor+0x70>
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;
 4d8:	80 e0       	ldi	r24, 0x00	; 0
 4da:	90 e0       	ldi	r25, 0x00	; 0
                                    const void** const DescriptorAddress)
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
 4dc:	e0 e0       	ldi	r30, 0x00	; 0
 4de:	f0 e0       	ldi	r31, 0x00	; 0
			Address = &MouseReport;
			Size    = sizeof(MouseReport);
			break;
	}

	*DescriptorAddress = Address;
 4e0:	da 01       	movw	r26, r20
 4e2:	11 96       	adiw	r26, 0x01	; 1
 4e4:	fc 93       	st	X, r31
 4e6:	ee 93       	st	-X, r30
	return Size;
}
 4e8:	08 95       	ret

000004ea <Endpoint_Write_Stream_LE>:
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
 4ea:	af 92       	push	r10
 4ec:	bf 92       	push	r11
 4ee:	cf 92       	push	r12
 4f0:	df 92       	push	r13
 4f2:	ef 92       	push	r14
 4f4:	ff 92       	push	r15
 4f6:	1f 93       	push	r17
 4f8:	cf 93       	push	r28
 4fa:	df 93       	push	r29
 4fc:	ec 01       	movw	r28, r24
 4fe:	7b 01       	movw	r14, r22
 500:	6a 01       	movw	r12, r20
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	uint16_t BytesInTransfer = 0;
	uint8_t  ErrorCode;

	if ((ErrorCode = Endpoint_WaitUntilReady()))
 502:	52 d1       	rcall	.+676    	; 0x7a8 <Endpoint_WaitUntilReady>
 504:	18 2f       	mov	r17, r24
 506:	88 23       	and	r24, r24
 508:	a9 f5       	brne	.+106    	; 0x574 <Endpoint_Write_Stream_LE+0x8a>
 50a:	c1 14       	cp	r12, r1
	  return ErrorCode;

	if (BytesProcessed != NULL)
 50c:	d1 04       	cpc	r13, r1
 50e:	39 f0       	breq	.+14     	; 0x51e <Endpoint_Write_Stream_LE+0x34>
 510:	f6 01       	movw	r30, r12
	{
		Length -= *BytesProcessed;
 512:	20 81       	ld	r18, Z
 514:	31 81       	ldd	r19, Z+1	; 0x01
 516:	e2 1a       	sub	r14, r18
 518:	f3 0a       	sbc	r15, r19
 51a:	c2 0f       	add	r28, r18
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
 51c:	d3 1f       	adc	r29, r19
 51e:	aa 24       	eor	r10, r10

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
 520:	bb 24       	eor	r11, r11
 522:	23 c0       	rjmp	.+70     	; 0x56a <Endpoint_Write_Stream_LE+0x80>
 524:	80 91 e8 00 	lds	r24, 0x00E8
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
 528:	85 fd       	sbrc	r24, 5
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
	{
		if (!(Endpoint_IsReadWriteAllowed()))
 52a:	16 c0       	rjmp	.+44     	; 0x558 <Endpoint_Write_Stream_LE+0x6e>
 52c:	80 91 e8 00 	lds	r24, 0x00E8
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 530:	8e 77       	andi	r24, 0x7E	; 126
 532:	80 93 e8 00 	sts	0x00E8, r24
 536:	fa d3       	rcall	.+2036   	; 0xd2c <USB_USBTask>
		{
			TEMPLATE_CLEAR_ENDPOINT();

			#if !defined(INTERRUPT_CONTROL_ENDPOINT)
			USB_USBTask();
 538:	c1 14       	cp	r12, r1
 53a:	d1 04       	cpc	r13, r1
			#endif

			if (BytesProcessed != NULL)
 53c:	49 f0       	breq	.+18     	; 0x550 <Endpoint_Write_Stream_LE+0x66>
 53e:	f6 01       	movw	r30, r12
 540:	80 81       	ld	r24, Z
			{
				*BytesProcessed += BytesInTransfer;
 542:	91 81       	ldd	r25, Z+1	; 0x01
 544:	8a 0d       	add	r24, r10
 546:	9b 1d       	adc	r25, r11
 548:	91 83       	std	Z+1, r25	; 0x01
 54a:	80 83       	st	Z, r24
 54c:	15 e0       	ldi	r17, 0x05	; 5
 54e:	12 c0       	rjmp	.+36     	; 0x574 <Endpoint_Write_Stream_LE+0x8a>
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
 550:	2b d1       	rcall	.+598    	; 0x7a8 <Endpoint_WaitUntilReady>
 552:	88 23       	and	r24, r24
			}

			if ((ErrorCode = Endpoint_WaitUntilReady()))
 554:	51 f0       	breq	.+20     	; 0x56a <Endpoint_Write_Stream_LE+0x80>
 556:	0d c0       	rjmp	.+26     	; 0x572 <Endpoint_Write_Stream_LE+0x88>
 558:	89 91       	ld	r24, Y+
 55a:	80 93 f1 00 	sts	0x00F1, r24
			  return ErrorCode;
		}
		else
		{
			TEMPLATE_TRANSFER_BYTE(DataStream);
 55e:	08 94       	sec
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
 560:	e1 08       	sbc	r14, r1
 562:	f1 08       	sbc	r15, r1
			TEMPLATE_BUFFER_MOVE(DataStream, 1);
			Length--;
 564:	08 94       	sec
 566:	a1 1c       	adc	r10, r1
 568:	b1 1c       	adc	r11, r1
			BytesInTransfer++;
 56a:	e1 14       	cp	r14, r1
 56c:	f1 04       	cpc	r15, r1
 56e:	d1 f6       	brne	.-76     	; 0x524 <Endpoint_Write_Stream_LE+0x3a>
	{
		Length -= *BytesProcessed;
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
 570:	01 c0       	rjmp	.+2      	; 0x574 <Endpoint_Write_Stream_LE+0x8a>
 572:	18 2f       	mov	r17, r24
 574:	81 2f       	mov	r24, r17
 576:	df 91       	pop	r29
			{
				*BytesProcessed += BytesInTransfer;
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
			}

			if ((ErrorCode = Endpoint_WaitUntilReady()))
 578:	cf 91       	pop	r28
			BytesInTransfer++;
		}
	}

	return ENDPOINT_RWSTREAM_NoError;
}
 57a:	1f 91       	pop	r17
 57c:	ff 90       	pop	r15
 57e:	ef 90       	pop	r14
 580:	df 90       	pop	r13
 582:	cf 90       	pop	r12
 584:	bf 90       	pop	r11
 586:	af 90       	pop	r10
 588:	08 95       	ret

0000058a <Endpoint_Write_Control_Stream_LE>:
 58a:	20 91 14 01 	lds	r18, 0x0114
 58e:	30 91 15 01 	lds	r19, 0x0115
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
 592:	26 17       	cp	r18, r22
 594:	37 07       	cpc	r19, r23
 596:	20 f4       	brcc	.+8      	; 0x5a0 <Endpoint_Write_Control_Stream_LE+0x16>
 598:	b9 01       	movw	r22, r18
 59a:	fc 01       	movw	r30, r24
 59c:	20 e0       	ldi	r18, 0x00	; 0
 59e:	37 c0       	rjmp	.+110    	; 0x60e <Endpoint_Write_Control_Stream_LE+0x84>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
 5a0:	61 15       	cp	r22, r1
 5a2:	71 05       	cpc	r23, r1
 5a4:	d1 f7       	brne	.-12     	; 0x59a <Endpoint_Write_Control_Stream_LE+0x10>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 5a6:	20 91 e8 00 	lds	r18, 0x00E8
 5aa:	2e 77       	andi	r18, 0x7E	; 126
 5ac:	20 93 e8 00 	sts	0x00E8, r18
 5b0:	f4 cf       	rjmp	.-24     	; 0x59a <Endpoint_Write_Control_Stream_LE+0x10>
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
 5b2:	80 91 0d 01 	lds	r24, 0x010D

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
 5b6:	88 23       	and	r24, r24
 5b8:	09 f4       	brne	.+2      	; 0x5bc <Endpoint_Write_Control_Stream_LE+0x32>
 5ba:	3f c0       	rjmp	.+126    	; 0x63a <Endpoint_Write_Control_Stream_LE+0xb0>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
 5bc:	85 30       	cpi	r24, 0x05	; 5
 5be:	c9 f1       	breq	.+114    	; 0x632 <Endpoint_Write_Control_Stream_LE+0xa8>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 5c0:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
 5c4:	83 fd       	sbrc	r24, 3
 5c6:	37 c0       	rjmp	.+110    	; 0x636 <Endpoint_Write_Control_Stream_LE+0xac>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 5c8:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
 5cc:	82 fd       	sbrc	r24, 2
 5ce:	2b c0       	rjmp	.+86     	; 0x626 <Endpoint_Write_Control_Stream_LE+0x9c>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 5d0:	80 91 e8 00 	lds	r24, 0x00E8
		  break;

		if (Endpoint_IsINReady())
 5d4:	80 ff       	sbrs	r24, 0
 5d6:	1b c0       	rjmp	.+54     	; 0x60e <Endpoint_Write_Control_Stream_LE+0x84>
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
 5d8:	80 91 f2 00 	lds	r24, 0x00F2
 5dc:	90 91 f3 00 	lds	r25, 0x00F3
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
 5e0:	06 c0       	rjmp	.+12     	; 0x5ee <Endpoint_Write_Control_Stream_LE+0x64>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
 5e2:	21 91       	ld	r18, Z+
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
 5e4:	20 93 f1 00 	sts	0x00F1, r18
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
 5e8:	61 50       	subi	r22, 0x01	; 1
 5ea:	70 40       	sbci	r23, 0x00	; 0
				BytesInEndpoint++;
 5ec:	01 96       	adiw	r24, 0x01	; 1

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
 5ee:	61 15       	cp	r22, r1
 5f0:	71 05       	cpc	r23, r1
 5f2:	19 f0       	breq	.+6      	; 0x5fa <Endpoint_Write_Control_Stream_LE+0x70>
 5f4:	88 30       	cpi	r24, 0x08	; 8
 5f6:	91 05       	cpc	r25, r1
 5f8:	a0 f3       	brcs	.-24     	; 0x5e2 <Endpoint_Write_Control_Stream_LE+0x58>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
 5fa:	21 e0       	ldi	r18, 0x01	; 1
 5fc:	88 30       	cpi	r24, 0x08	; 8
 5fe:	91 05       	cpc	r25, r1
 600:	09 f0       	breq	.+2      	; 0x604 <Endpoint_Write_Control_Stream_LE+0x7a>
 602:	20 e0       	ldi	r18, 0x00	; 0
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 604:	80 91 e8 00 	lds	r24, 0x00E8
 608:	8e 77       	andi	r24, 0x7E	; 126
 60a:	80 93 e8 00 	sts	0x00E8, r24
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
 60e:	61 15       	cp	r22, r1
 610:	71 05       	cpc	r23, r1
 612:	79 f6       	brne	.-98     	; 0x5b2 <Endpoint_Write_Control_Stream_LE+0x28>
 614:	22 23       	and	r18, r18
 616:	69 f6       	brne	.-102    	; 0x5b2 <Endpoint_Write_Control_Stream_LE+0x28>
 618:	06 c0       	rjmp	.+12     	; 0x626 <Endpoint_Write_Control_Stream_LE+0x9c>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
 61a:	80 91 0d 01 	lds	r24, 0x010D

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
 61e:	88 23       	and	r24, r24
 620:	61 f0       	breq	.+24     	; 0x63a <Endpoint_Write_Control_Stream_LE+0xb0>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
 622:	85 30       	cpi	r24, 0x05	; 5
 624:	61 f0       	breq	.+24     	; 0x63e <Endpoint_Write_Control_Stream_LE+0xb4>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 626:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
 62a:	82 ff       	sbrs	r24, 2
 62c:	f6 cf       	rjmp	.-20     	; 0x61a <Endpoint_Write_Control_Stream_LE+0x90>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
 62e:	80 e0       	ldi	r24, 0x00	; 0
 630:	08 95       	ret
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
 632:	83 e0       	ldi	r24, 0x03	; 3
 634:	08 95       	ret
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
 636:	81 e0       	ldi	r24, 0x01	; 1
 638:	08 95       	ret
	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
 63a:	82 e0       	ldi	r24, 0x02	; 2
 63c:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
 63e:	83 e0       	ldi	r24, 0x03	; 3
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
 640:	08 95       	ret

00000642 <Endpoint_Write_Control_PStream_LE>:
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
 642:	20 91 14 01 	lds	r18, 0x0114
 646:	30 91 15 01 	lds	r19, 0x0115
 64a:	26 17       	cp	r18, r22
 64c:	37 07       	cpc	r19, r23
 64e:	20 f4       	brcc	.+8      	; 0x658 <Endpoint_Write_Control_PStream_LE+0x16>
 650:	b9 01       	movw	r22, r18
 652:	fc 01       	movw	r30, r24
 654:	20 e0       	ldi	r18, 0x00	; 0
 656:	38 c0       	rjmp	.+112    	; 0x6c8 <Endpoint_Write_Control_PStream_LE+0x86>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
 658:	61 15       	cp	r22, r1
 65a:	71 05       	cpc	r23, r1
 65c:	d1 f7       	brne	.-12     	; 0x652 <Endpoint_Write_Control_PStream_LE+0x10>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 65e:	20 91 e8 00 	lds	r18, 0x00E8
 662:	2e 77       	andi	r18, 0x7E	; 126
 664:	20 93 e8 00 	sts	0x00E8, r18
 668:	f4 cf       	rjmp	.-24     	; 0x652 <Endpoint_Write_Control_PStream_LE+0x10>
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
 66a:	80 91 0d 01 	lds	r24, 0x010D

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
 66e:	88 23       	and	r24, r24
 670:	09 f4       	brne	.+2      	; 0x674 <Endpoint_Write_Control_PStream_LE+0x32>
 672:	40 c0       	rjmp	.+128    	; 0x6f4 <Endpoint_Write_Control_PStream_LE+0xb2>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
 674:	85 30       	cpi	r24, 0x05	; 5
 676:	d1 f1       	breq	.+116    	; 0x6ec <Endpoint_Write_Control_PStream_LE+0xaa>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 678:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
 67c:	83 fd       	sbrc	r24, 3
 67e:	38 c0       	rjmp	.+112    	; 0x6f0 <Endpoint_Write_Control_PStream_LE+0xae>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 680:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
 684:	82 fd       	sbrc	r24, 2
 686:	2c c0       	rjmp	.+88     	; 0x6e0 <Endpoint_Write_Control_PStream_LE+0x9e>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 688:	80 91 e8 00 	lds	r24, 0x00E8
		  break;

		if (Endpoint_IsINReady())
 68c:	80 ff       	sbrs	r24, 0
 68e:	1c c0       	rjmp	.+56     	; 0x6c8 <Endpoint_Write_Control_PStream_LE+0x86>
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
 690:	80 91 f2 00 	lds	r24, 0x00F2
 694:	90 91 f3 00 	lds	r25, 0x00F3
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
 698:	07 c0       	rjmp	.+14     	; 0x6a8 <Endpoint_Write_Control_PStream_LE+0x66>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
 69a:	24 91       	lpm	r18, Z
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
 69c:	20 93 f1 00 	sts	0x00F1, r18
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
 6a0:	31 96       	adiw	r30, 0x01	; 1
				Length--;
 6a2:	61 50       	subi	r22, 0x01	; 1
 6a4:	70 40       	sbci	r23, 0x00	; 0
				BytesInEndpoint++;
 6a6:	01 96       	adiw	r24, 0x01	; 1

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
 6a8:	61 15       	cp	r22, r1
 6aa:	71 05       	cpc	r23, r1
 6ac:	19 f0       	breq	.+6      	; 0x6b4 <Endpoint_Write_Control_PStream_LE+0x72>
 6ae:	88 30       	cpi	r24, 0x08	; 8
 6b0:	91 05       	cpc	r25, r1
 6b2:	98 f3       	brcs	.-26     	; 0x69a <Endpoint_Write_Control_PStream_LE+0x58>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
 6b4:	21 e0       	ldi	r18, 0x01	; 1
 6b6:	88 30       	cpi	r24, 0x08	; 8
 6b8:	91 05       	cpc	r25, r1
 6ba:	09 f0       	breq	.+2      	; 0x6be <Endpoint_Write_Control_PStream_LE+0x7c>
 6bc:	20 e0       	ldi	r18, 0x00	; 0
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 6be:	80 91 e8 00 	lds	r24, 0x00E8
 6c2:	8e 77       	andi	r24, 0x7E	; 126
 6c4:	80 93 e8 00 	sts	0x00E8, r24
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
 6c8:	61 15       	cp	r22, r1
 6ca:	71 05       	cpc	r23, r1
 6cc:	71 f6       	brne	.-100    	; 0x66a <Endpoint_Write_Control_PStream_LE+0x28>
 6ce:	22 23       	and	r18, r18
 6d0:	61 f6       	brne	.-104    	; 0x66a <Endpoint_Write_Control_PStream_LE+0x28>
 6d2:	06 c0       	rjmp	.+12     	; 0x6e0 <Endpoint_Write_Control_PStream_LE+0x9e>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
 6d4:	80 91 0d 01 	lds	r24, 0x010D

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
 6d8:	88 23       	and	r24, r24
 6da:	61 f0       	breq	.+24     	; 0x6f4 <Endpoint_Write_Control_PStream_LE+0xb2>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
 6dc:	85 30       	cpi	r24, 0x05	; 5
 6de:	61 f0       	breq	.+24     	; 0x6f8 <Endpoint_Write_Control_PStream_LE+0xb6>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 6e0:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
 6e4:	82 ff       	sbrs	r24, 2
 6e6:	f6 cf       	rjmp	.-20     	; 0x6d4 <Endpoint_Write_Control_PStream_LE+0x92>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
 6e8:	80 e0       	ldi	r24, 0x00	; 0
 6ea:	08 95       	ret
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
 6ec:	83 e0       	ldi	r24, 0x03	; 3
 6ee:	08 95       	ret
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
 6f0:	81 e0       	ldi	r24, 0x01	; 1
 6f2:	08 95       	ret
	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
 6f4:	82 e0       	ldi	r24, 0x02	; 2
 6f6:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
 6f8:	83 e0       	ldi	r24, 0x03	; 3
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
 6fa:	08 95       	ret

000006fc <Endpoint_ConfigureEndpoint_Prv>:
	UECFG0X = UECFG0XData;
	UECFG1X = UECFG1XData;

	return Endpoint_IsConfigured();
#else
	for (uint8_t EPNum = Number; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
 6fc:	98 2f       	mov	r25, r24
 6fe:	2a c0       	rjmp	.+84     	; 0x754 <Endpoint_ConfigureEndpoint_Prv+0x58>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 700:	90 93 e9 00 	sts	0x00E9, r25
		uint8_t UECFG1XTemp;
		uint8_t UEIENXTemp;

		Endpoint_SelectEndpoint(EPNum);

		if (EPNum == Number)
 704:	98 17       	cp	r25, r24
 706:	39 f0       	breq	.+14     	; 0x716 <Endpoint_ConfigureEndpoint_Prv+0x1a>
			UECFG1XTemp = UECFG1XData;
			UEIENXTemp  = 0;
		}
		else
		{
			UECFG0XTemp = UECFG0X;
 708:	70 91 ec 00 	lds	r23, 0x00EC
			UECFG1XTemp = UECFG1X;
 70c:	20 91 ed 00 	lds	r18, 0x00ED
			UEIENXTemp  = UEIENX;
 710:	50 91 f0 00 	lds	r21, 0x00F0
 714:	03 c0       	rjmp	.+6      	; 0x71c <Endpoint_ConfigureEndpoint_Prv+0x20>
		Endpoint_SelectEndpoint(EPNum);

		if (EPNum == Number)
		{
			UECFG0XTemp = UECFG0XData;
			UECFG1XTemp = UECFG1XData;
 716:	24 2f       	mov	r18, r20

		Endpoint_SelectEndpoint(EPNum);

		if (EPNum == Number)
		{
			UECFG0XTemp = UECFG0XData;
 718:	76 2f       	mov	r23, r22
			UECFG1XTemp = UECFG1XData;
			UEIENXTemp  = 0;
 71a:	50 e0       	ldi	r21, 0x00	; 0
			UECFG0XTemp = UECFG0X;
			UECFG1XTemp = UECFG1X;
			UEIENXTemp  = UEIENX;
		}

		if (!(UECFG1XTemp & (1 << ALLOC)))
 71c:	21 ff       	sbrs	r18, 1
 71e:	19 c0       	rjmp	.+50     	; 0x752 <Endpoint_ConfigureEndpoint_Prv+0x56>
			 *  to and from a host.
			 */
			static inline void Endpoint_DisableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_DisableEndpoint(void)
			{
				UECONX &= ~(1 << EPEN);
 720:	30 91 eb 00 	lds	r19, 0x00EB
 724:	3e 7f       	andi	r19, 0xFE	; 254
 726:	30 93 eb 00 	sts	0x00EB, r19
		  continue;

		Endpoint_DisableEndpoint();
		UECFG1X &= ~(1 << ALLOC);
 72a:	30 91 ed 00 	lds	r19, 0x00ED
 72e:	3d 7f       	andi	r19, 0xFD	; 253
 730:	30 93 ed 00 	sts	0x00ED, r19
			 *  \note Endpoints must first be configured properly via \ref Endpoint_ConfigureEndpoint().
			 */
			static inline void Endpoint_EnableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_EnableEndpoint(void)
			{
				UECONX |= (1 << EPEN);
 734:	30 91 eb 00 	lds	r19, 0x00EB
 738:	31 60       	ori	r19, 0x01	; 1
 73a:	30 93 eb 00 	sts	0x00EB, r19

		Endpoint_EnableEndpoint();
		UECFG0X = UECFG0XTemp;
 73e:	70 93 ec 00 	sts	0x00EC, r23
		UECFG1X = UECFG1XTemp;
 742:	20 93 ed 00 	sts	0x00ED, r18
		UEIENX  = UEIENXTemp;
 746:	50 93 f0 00 	sts	0x00F0, r21
			 *  \return Boolean \c true if the currently selected endpoint has been configured, \c false otherwise.
			 */
			static inline bool Endpoint_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsConfigured(void)
			{
				return ((UESTA0X & (1 << CFGOK)) ? true : false);
 74a:	20 91 ee 00 	lds	r18, 0x00EE

		if (!(Endpoint_IsConfigured()))
 74e:	27 ff       	sbrs	r18, 7
 750:	08 c0       	rjmp	.+16     	; 0x762 <Endpoint_ConfigureEndpoint_Prv+0x66>
	UECFG0X = UECFG0XData;
	UECFG1X = UECFG1XData;

	return Endpoint_IsConfigured();
#else
	for (uint8_t EPNum = Number; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
 752:	9f 5f       	subi	r25, 0xFF	; 255
 754:	97 30       	cpi	r25, 0x07	; 7
 756:	a0 f2       	brcs	.-88     	; 0x700 <Endpoint_ConfigureEndpoint_Prv+0x4>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 758:	8f 70       	andi	r24, 0x0F	; 15
 75a:	80 93 e9 00 	sts	0x00E9, r24
		if (!(Endpoint_IsConfigured()))
		  return false;
	}

	Endpoint_SelectEndpoint(Number);
	return true;
 75e:	81 e0       	ldi	r24, 0x01	; 1
 760:	08 95       	ret
		UECFG0X = UECFG0XTemp;
		UECFG1X = UECFG1XTemp;
		UEIENX  = UEIENXTemp;

		if (!(Endpoint_IsConfigured()))
		  return false;
 762:	80 e0       	ldi	r24, 0x00	; 0
	}

	Endpoint_SelectEndpoint(Number);
	return true;
#endif
}
 764:	08 95       	ret

00000766 <Endpoint_ClearStatusStage>:
	}
}

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
 766:	80 91 0e 01 	lds	r24, 0x010E
 76a:	87 ff       	sbrs	r24, 7
 76c:	13 c0       	rjmp	.+38     	; 0x794 <Endpoint_ClearStatusStage+0x2e>
 76e:	04 c0       	rjmp	.+8      	; 0x778 <Endpoint_ClearStatusStage+0x12>
	{
		while (!(Endpoint_IsOUTReceived()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
 770:	80 91 0d 01 	lds	r24, 0x010D
 774:	88 23       	and	r24, r24
 776:	b9 f0       	breq	.+46     	; 0x7a6 <Endpoint_ClearStatusStage+0x40>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 778:	80 91 e8 00 	lds	r24, 0x00E8

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
	{
		while (!(Endpoint_IsOUTReceived()))
 77c:	82 ff       	sbrs	r24, 2
 77e:	f8 cf       	rjmp	.-16     	; 0x770 <Endpoint_ClearStatusStage+0xa>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 780:	80 91 e8 00 	lds	r24, 0x00E8
 784:	8b 77       	andi	r24, 0x7B	; 123
 786:	80 93 e8 00 	sts	0x00E8, r24
 78a:	08 95       	ret
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
 78c:	80 91 0d 01 	lds	r24, 0x010D
 790:	88 23       	and	r24, r24
 792:	49 f0       	breq	.+18     	; 0x7a6 <Endpoint_ClearStatusStage+0x40>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 794:	80 91 e8 00 	lds	r24, 0x00E8

		Endpoint_ClearOUT();
	}
	else
	{
		while (!(Endpoint_IsINReady()))
 798:	80 ff       	sbrs	r24, 0
 79a:	f8 cf       	rjmp	.-16     	; 0x78c <Endpoint_ClearStatusStage+0x26>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 79c:	80 91 e8 00 	lds	r24, 0x00E8
 7a0:	8e 77       	andi	r24, 0x7E	; 126
 7a2:	80 93 e8 00 	sts	0x00E8, r24
 7a6:	08 95       	ret

000007a8 <Endpoint_WaitUntilReady>:
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
 7a8:	80 91 e4 00 	lds	r24, 0x00E4
 7ac:	90 91 e5 00 	lds	r25, 0x00E5
 7b0:	45 e6       	ldi	r20, 0x65	; 101
 7b2:	01 c0       	rjmp	.+2      	; 0x7b6 <Endpoint_WaitUntilReady+0xe>
 7b4:	c9 01       	movw	r24, r18
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
 7b6:	20 91 ec 00 	lds	r18, 0x00EC
 7ba:	20 ff       	sbrs	r18, 0
 7bc:	23 c0       	rjmp	.+70     	; 0x804 <Endpoint_WaitUntilReady+0x5c>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 7be:	20 91 e8 00 	lds	r18, 0x00E8

	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
 7c2:	20 fd       	sbrc	r18, 0
 7c4:	15 c0       	rjmp	.+42     	; 0x7f0 <Endpoint_WaitUntilReady+0x48>
		{
			if (Endpoint_IsOUTReceived())
			  return ENDPOINT_READYWAIT_NoError;
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;
 7c6:	20 91 0d 01 	lds	r18, 0x010D

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
 7ca:	22 23       	and	r18, r18
 7cc:	99 f0       	breq	.+38     	; 0x7f4 <Endpoint_WaitUntilReady+0x4c>
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
 7ce:	25 30       	cpi	r18, 0x05	; 5
 7d0:	99 f0       	breq	.+38     	; 0x7f8 <Endpoint_WaitUntilReady+0x50>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
 7d2:	20 91 eb 00 	lds	r18, 0x00EB
		  return ENDPOINT_READYWAIT_BusSuspended;
		else if (Endpoint_IsStalled())
 7d6:	25 fd       	sbrc	r18, 5
 7d8:	11 c0       	rjmp	.+34     	; 0x7fc <Endpoint_WaitUntilReady+0x54>
 7da:	20 91 e4 00 	lds	r18, 0x00E4
 7de:	30 91 e5 00 	lds	r19, 0x00E5
		  return ENDPOINT_READYWAIT_EndpointStalled;

		uint16_t CurrentFrameNumber = USB_Device_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
 7e2:	28 17       	cp	r18, r24
 7e4:	39 07       	cpc	r19, r25
 7e6:	39 f3       	breq	.-50     	; 0x7b6 <Endpoint_WaitUntilReady+0xe>
 7e8:	41 50       	subi	r20, 0x01	; 1
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
 7ea:	21 f7       	brne	.-56     	; 0x7b4 <Endpoint_WaitUntilReady+0xc>
			  return ENDPOINT_READYWAIT_Timeout;
 7ec:	84 e0       	ldi	r24, 0x04	; 4
 7ee:	08 95       	ret
	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
 7f0:	80 e0       	ldi	r24, 0x00	; 0
 7f2:	08 95       	ret
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
 7f4:	82 e0       	ldi	r24, 0x02	; 2
 7f6:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_READYWAIT_BusSuspended;
 7f8:	83 e0       	ldi	r24, 0x03	; 3
 7fa:	08 95       	ret
		else if (Endpoint_IsStalled())
		  return ENDPOINT_READYWAIT_EndpointStalled;
 7fc:	81 e0       	ldi	r24, 0x01	; 1
 7fe:	08 95       	ret
			  return ENDPOINT_READYWAIT_NoError;
		}
		else
		{
			if (Endpoint_IsOUTReceived())
			  return ENDPOINT_READYWAIT_NoError;
 800:	80 e0       	ldi	r24, 0x00	; 0

			if (!(TimeoutMSRem--))
			  return ENDPOINT_READYWAIT_Timeout;
		}
	}
}
 802:	08 95       	ret
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 804:	20 91 e8 00 	lds	r18, 0x00E8
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
		}
		else
		{
			if (Endpoint_IsOUTReceived())
 808:	22 ff       	sbrs	r18, 2
 80a:	dd cf       	rjmp	.-70     	; 0x7c6 <Endpoint_WaitUntilReady+0x1e>
 80c:	f9 cf       	rjmp	.-14     	; 0x800 <Endpoint_WaitUntilReady+0x58>

0000080e <USB_ResetInterface>:

	USB_IsInitialized = false;
}

void USB_ResetInterface(void)
{
 80e:	0f 93       	push	r16
 810:	1f 93       	push	r17
 812:	cf 93       	push	r28
 814:	df 93       	push	r29
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
 816:	4e d0       	rcall	.+156    	; 0x8b4 <USB_INT_DisableAllInterrupts>
 818:	55 d0       	rcall	.+170    	; 0x8c4 <USB_INT_ClearAllInterrupts>
	USB_INT_ClearAllInterrupts();
 81a:	c8 ed       	ldi	r28, 0xD8	; 216
 81c:	d0 e0       	ldi	r29, 0x00	; 0
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
 81e:	88 81       	ld	r24, Y
 820:	8f 77       	andi	r24, 0x7F	; 127
 822:	88 83       	st	Y, r24
 824:	88 81       	ld	r24, Y
 826:	80 68       	ori	r24, 0x80	; 128
				USBCON |=  (1 << USBE);
 828:	88 83       	st	Y, r24
 82a:	88 81       	ld	r24, Y
 82c:	8f 7d       	andi	r24, 0xDF	; 223
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
 82e:	88 83       	st	Y, r24
 830:	e7 ed       	ldi	r30, 0xD7	; 215
 832:	f0 e0       	ldi	r31, 0x00	; 0

	if (USB_CurrentMode == USB_MODE_Device)
	{
		#if defined(USB_CAN_BE_DEVICE)
		#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
		UHWCON |=  (1 << UIMOD);
 834:	80 81       	ld	r24, Z
 836:	80 68       	ori	r24, 0x80	; 128
 838:	80 83       	st	Z, r24
 83a:	19 bc       	out	0x29, r1	; 41
 83c:	10 92 0d 01 	sts	0x010D, r1
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState                 = DEVICE_STATE_Unattached;
 840:	10 92 09 01 	sts	0x0109, r1
	USB_Device_ConfigurationNumber  = 0;
 844:	10 92 0b 01 	sts	0x010B, r1

	#if !defined(NO_DEVICE_REMOTE_WAKEUP)
	USB_Device_RemoteWakeupEnabled  = false;
 848:	10 92 0a 01 	sts	0x010A, r1
	#endif

	#if !defined(NO_DEVICE_SELF_POWER)
	USB_Device_CurrentlySelfPowered = false;
 84c:	00 ee       	ldi	r16, 0xE0	; 224
 84e:	10 e0       	ldi	r17, 0x00	; 0
			}

			static inline void USB_Device_SetFullSpeed(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetFullSpeed(void)
			{
				UDCON &= ~(1 << LSM);
 850:	f8 01       	movw	r30, r16
 852:	80 81       	ld	r24, Z
 854:	8b 7f       	andi	r24, 0xFB	; 251
 856:	80 83       	st	Z, r24
 858:	88 81       	ld	r24, Y
 85a:	81 60       	ori	r24, 0x01	; 1
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBCON |= (1 << VBUSTE);
 85c:	88 83       	st	Y, r24
 85e:	80 e0       	ldi	r24, 0x00	; 0
 860:	60 e0       	ldi	r22, 0x00	; 0
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
 862:	42 e0       	ldi	r20, 0x02	; 2
 864:	4b df       	rcall	.-362    	; 0x6fc <Endpoint_ConfigureEndpoint_Prv>
 866:	e1 ee       	ldi	r30, 0xE1	; 225
 868:	f0 e0       	ldi	r31, 0x00	; 0
 86a:	80 81       	ld	r24, Z
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
 86c:	8e 7f       	andi	r24, 0xFE	; 254
 86e:	80 83       	st	Z, r24
 870:	e2 ee       	ldi	r30, 0xE2	; 226
 872:	f0 e0       	ldi	r31, 0x00	; 0
 874:	80 81       	ld	r24, Z
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
 876:	81 60       	ori	r24, 0x01	; 1
 878:	80 83       	st	Z, r24
 87a:	80 81       	ld	r24, Z
 87c:	88 60       	ori	r24, 0x08	; 8
 87e:	80 83       	st	Z, r24
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
 880:	f8 01       	movw	r30, r16
 882:	80 81       	ld	r24, Z
 884:	8e 7f       	andi	r24, 0xFE	; 254
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
 886:	80 83       	st	Z, r24
 888:	88 81       	ld	r24, Y
 88a:	80 61       	ori	r24, 0x10	; 16
 88c:	88 83       	st	Y, r24

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON |=  (1 << OTGPADE);
 88e:	df 91       	pop	r29
 890:	cf 91       	pop	r28
 892:	1f 91       	pop	r17
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
 894:	0f 91       	pop	r16
 896:	08 95       	ret

00000898 <USB_Init>:
 898:	e8 ed       	ldi	r30, 0xD8	; 216
 89a:	f0 e0       	ldi	r31, 0x00	; 0
 89c:	80 81       	ld	r24, Z
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON &= ~(1 << OTGPADE);
 89e:	8f 7e       	andi	r24, 0xEF	; 239
 8a0:	80 83       	st	Z, r24

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON |=  (1 << UVREGE);
 8a2:	e7 ed       	ldi	r30, 0xD7	; 215
 8a4:	f0 e0       	ldi	r31, 0x00	; 0
 8a6:	80 81       	ld	r24, Z
 8a8:	81 60       	ori	r24, 0x01	; 1
 8aa:	80 83       	st	Z, r24
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
 8ac:	81 e0       	ldi	r24, 0x01	; 1
 8ae:	80 93 0c 01 	sts	0x010C, r24

	USB_ResetInterface();
 8b2:	ad cf       	rjmp	.-166    	; 0x80e <USB_ResetInterface>

000008b4 <USB_INT_DisableAllInterrupts>:
#include "../USBInterrupt.h"

void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
 8b4:	e8 ed       	ldi	r30, 0xD8	; 216
 8b6:	f0 e0       	ldi	r31, 0x00	; 0
 8b8:	80 81       	ld	r24, Z
 8ba:	8c 7f       	andi	r24, 0xFC	; 252
 8bc:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
 8be:	10 92 e2 00 	sts	0x00E2, r1
	#endif
}
 8c2:	08 95       	ret

000008c4 <USB_INT_ClearAllInterrupts>:

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
 8c4:	10 92 da 00 	sts	0x00DA, r1
	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
 8c8:	10 92 e1 00 	sts	0x00E1, r1
	#endif
}
 8cc:	08 95       	ret

000008ce <__vector_10>:

ISR(USB_GEN_vect, ISR_BLOCK)
{
 8ce:	1f 92       	push	r1
 8d0:	0f 92       	push	r0
 8d2:	0f b6       	in	r0, 0x3f	; 63
 8d4:	0f 92       	push	r0
 8d6:	0b b6       	in	r0, 0x3b	; 59
 8d8:	0f 92       	push	r0
 8da:	11 24       	eor	r1, r1
 8dc:	2f 93       	push	r18
 8de:	3f 93       	push	r19
 8e0:	4f 93       	push	r20
 8e2:	5f 93       	push	r21
 8e4:	6f 93       	push	r22
 8e6:	7f 93       	push	r23
 8e8:	8f 93       	push	r24
 8ea:	9f 93       	push	r25
 8ec:	af 93       	push	r26
 8ee:	bf 93       	push	r27
 8f0:	ef 93       	push	r30
 8f2:	ff 93       	push	r31
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
					case USB_INT_SOFI:
						return (UDINT  & (1 << SOFI));
 8f4:	80 91 e1 00 	lds	r24, 0x00E1
	#if defined(USB_CAN_BE_DEVICE)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
 8f8:	82 ff       	sbrs	r24, 2
 8fa:	0a c0       	rjmp	.+20     	; 0x910 <__vector_10+0x42>
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
					case USB_INT_SOFI:
						return (UDIEN  & (1 << SOFE));
 8fc:	80 91 e2 00 	lds	r24, 0x00E2
 900:	82 ff       	sbrs	r24, 2
 902:	06 c0       	rjmp	.+12     	; 0x910 <__vector_10+0x42>
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
						break;
					case USB_INT_SOFI:
						UDINT  &= ~(1 << SOFI);
 904:	80 91 e1 00 	lds	r24, 0x00E1
 908:	8b 7f       	andi	r24, 0xFB	; 251
 90a:	80 93 e1 00 	sts	0x00E1, r24
	{
		USB_INT_Clear(USB_INT_SOFI);

		EVENT_USB_Device_StartOfFrame();
 90e:	7d dc       	rcall	.-1798   	; 0x20a <EVENT_USB_Device_StartOfFrame>
 910:	80 91 da 00 	lds	r24, 0x00DA
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBINT & (1 << VBUSTI));
 914:	80 ff       	sbrs	r24, 0
	}
	#endif

	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	if (USB_INT_HasOccurred(USB_INT_VBUSTI) && USB_INT_IsEnabled(USB_INT_VBUSTI))
 916:	1d c0       	rjmp	.+58     	; 0x952 <__vector_10+0x84>
 918:	80 91 d8 00 	lds	r24, 0x00D8
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBCON & (1 << VBUSTE));
 91c:	80 ff       	sbrs	r24, 0
 91e:	19 c0       	rjmp	.+50     	; 0x952 <__vector_10+0x84>
 920:	80 91 da 00 	lds	r24, 0x00DA
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBINT &= ~(1 << VBUSTI);
 924:	8e 7f       	andi	r24, 0xFE	; 254
 926:	80 93 da 00 	sts	0x00DA, r24
 92a:	80 91 d9 00 	lds	r24, 0x00D9
				 *  \return Boolean \c true if the VBUS line is currently detecting power from a host, \c false otherwise.
				 */
				static inline bool USB_VBUS_GetStatus(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
				static inline bool USB_VBUS_GetStatus(void)
				{
					return ((USBSTA & (1 << VBUS)) ? true : false);
 92e:	80 ff       	sbrs	r24, 0
	{
		USB_INT_Clear(USB_INT_VBUSTI);

		if (USB_VBUS_GetStatus())
 930:	0c c0       	rjmp	.+24     	; 0x94a <__vector_10+0x7c>
 932:	8c e0       	ldi	r24, 0x0C	; 12

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
 934:	89 bd       	out	0x29, r24	; 41
 936:	8e e0       	ldi	r24, 0x0E	; 14
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
 938:	89 bd       	out	0x29, r24	; 41
 93a:	09 b4       	in	r0, 0x29	; 41
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			{
				USB_PLL_On();
				while (!(USB_PLL_IsReady()));
 93c:	00 fe       	sbrs	r0, 0
 93e:	fd cf       	rjmp	.-6      	; 0x93a <__vector_10+0x6c>
 940:	81 e0       	ldi	r24, 0x01	; 1
			}

			USB_DeviceState = DEVICE_STATE_Powered;
 942:	80 93 0d 01 	sts	0x010D, r24
 946:	4a dc       	rcall	.-1900   	; 0x1dc <EVENT_USB_Device_Connect>
			EVENT_USB_Device_Connect();
 948:	04 c0       	rjmp	.+8      	; 0x952 <__vector_10+0x84>
 94a:	19 bc       	out	0x29, r1	; 41
 94c:	10 92 0d 01 	sts	0x010D, r1
		else
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			  USB_PLL_Off();

			USB_DeviceState = DEVICE_STATE_Unattached;
 950:	4b dc       	rcall	.-1898   	; 0x1e8 <EVENT_USB_Device_Disconnect>
 952:	80 91 e1 00 	lds	r24, 0x00E1
			EVENT_USB_Device_Disconnect();
 956:	80 ff       	sbrs	r24, 0
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
 958:	18 c0       	rjmp	.+48     	; 0x98a <__vector_10+0xbc>
 95a:	80 91 e2 00 	lds	r24, 0x00E2
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
 95e:	80 ff       	sbrs	r24, 0
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
 960:	14 c0       	rjmp	.+40     	; 0x98a <__vector_10+0xbc>
 962:	80 91 e2 00 	lds	r24, 0x00E2
 966:	8e 7f       	andi	r24, 0xFE	; 254
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
 968:	80 93 e2 00 	sts	0x00E2, r24
 96c:	80 91 e2 00 	lds	r24, 0x00E2
 970:	80 61       	ori	r24, 0x10	; 16
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
 972:	80 93 e2 00 	sts	0x00E2, r24
 976:	80 91 d8 00 	lds	r24, 0x00D8
 97a:	80 62       	ori	r24, 0x20	; 32
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON |=  (1 << FRZCLK);
 97c:	80 93 d8 00 	sts	0x00D8, r24
 980:	19 bc       	out	0x29, r1	; 41
 982:	85 e0       	ldi	r24, 0x05	; 5
 984:	80 93 0d 01 	sts	0x010D, r24

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
		EVENT_USB_Device_Disconnect();
		#else
		USB_DeviceState = DEVICE_STATE_Suspended;
 988:	d0 d1       	rcall	.+928    	; 0xd2a <USB_Event_Stub>
 98a:	80 91 e1 00 	lds	r24, 0x00E1
		EVENT_USB_Device_Suspend();
 98e:	84 ff       	sbrs	r24, 4
 990:	2d c0       	rjmp	.+90     	; 0x9ec <__vector_10+0x11e>
					case USB_INT_IDTI:
						return (USBINT & (1 << IDTI));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
 992:	80 91 e2 00 	lds	r24, 0x00E2
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
 996:	84 ff       	sbrs	r24, 4
 998:	29 c0       	rjmp	.+82     	; 0x9ec <__vector_10+0x11e>
					case USB_INT_IDTI:
						return (USBCON & (1 << IDTE));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
 99a:	8c e0       	ldi	r24, 0x0C	; 12
 99c:	89 bd       	out	0x29, r24	; 41
 99e:	8e e0       	ldi	r24, 0x0E	; 14
 9a0:	89 bd       	out	0x29, r24	; 41

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
 9a2:	09 b4       	in	r0, 0x29	; 41
 9a4:	00 fe       	sbrs	r0, 0
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
 9a6:	fd cf       	rjmp	.-6      	; 0x9a2 <__vector_10+0xd4>
 9a8:	80 91 d8 00 	lds	r24, 0x00D8
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
 9ac:	8f 7d       	andi	r24, 0xDF	; 223
 9ae:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
 9b2:	80 91 e1 00 	lds	r24, 0x00E1
 9b6:	8f 7e       	andi	r24, 0xEF	; 239
 9b8:	80 93 e1 00 	sts	0x00E1, r24
						USBINT &= ~(1 << IDTI);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
 9bc:	80 91 e2 00 	lds	r24, 0x00E2
 9c0:	8f 7e       	andi	r24, 0xEF	; 239
 9c2:	80 93 e2 00 	sts	0x00E2, r24
						USBCON &= ~(1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
 9c6:	80 91 e2 00 	lds	r24, 0x00E2
 9ca:	81 60       	ori	r24, 0x01	; 1
 9cc:	80 93 e2 00 	sts	0x00E2, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
 9d0:	80 91 09 01 	lds	r24, 0x0109
 9d4:	88 23       	and	r24, r24
 9d6:	21 f4       	brne	.+8      	; 0x9e0 <__vector_10+0x112>
		USB_INT_Clear(USB_INT_WAKEUPI);

		USB_INT_Disable(USB_INT_WAKEUPI);
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_Device_ConfigurationNumber)
 9d8:	80 91 e3 00 	lds	r24, 0x00E3
 9dc:	87 ff       	sbrs	r24, 7
 9de:	02 c0       	rjmp	.+4      	; 0x9e4 <__vector_10+0x116>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
 9e0:	84 e0       	ldi	r24, 0x04	; 4
 9e2:	01 c0       	rjmp	.+2      	; 0x9e6 <__vector_10+0x118>
		  USB_DeviceState = DEVICE_STATE_Configured;
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
 9e4:	81 e0       	ldi	r24, 0x01	; 1
 9e6:	80 93 0d 01 	sts	0x010D, r24
 9ea:	9f d1       	rcall	.+830    	; 0xd2a <USB_Event_Stub>
 9ec:	80 91 e1 00 	lds	r24, 0x00E1
 9f0:	83 ff       	sbrs	r24, 3

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
		#else
		EVENT_USB_Device_WakeUp();
 9f2:	22 c0       	rjmp	.+68     	; 0xa38 <__vector_10+0x16a>
 9f4:	80 91 e2 00 	lds	r24, 0x00E2
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
 9f8:	83 ff       	sbrs	r24, 3
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
 9fa:	1e c0       	rjmp	.+60     	; 0xa38 <__vector_10+0x16a>
 9fc:	80 91 e1 00 	lds	r24, 0x00E1
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
 a00:	87 7f       	andi	r24, 0xF7	; 247
 a02:	80 93 e1 00 	sts	0x00E1, r24
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
 a06:	82 e0       	ldi	r24, 0x02	; 2
 a08:	80 93 0d 01 	sts	0x010D, r24
 a0c:	10 92 09 01 	sts	0x0109, r1
	{
		USB_INT_Clear(USB_INT_EORSTI);

		USB_DeviceState                = DEVICE_STATE_Default;
 a10:	80 91 e1 00 	lds	r24, 0x00E1
 a14:	8e 7f       	andi	r24, 0xFE	; 254
		USB_Device_ConfigurationNumber = 0;
 a16:	80 93 e1 00 	sts	0x00E1, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
 a1a:	80 91 e2 00 	lds	r24, 0x00E2
 a1e:	8e 7f       	andi	r24, 0xFE	; 254
 a20:	80 93 e2 00 	sts	0x00E2, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
 a24:	80 91 e2 00 	lds	r24, 0x00E2
 a28:	80 61       	ori	r24, 0x10	; 16
 a2a:	80 93 e2 00 	sts	0x00E2, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
 a2e:	80 e0       	ldi	r24, 0x00	; 0
 a30:	60 e0       	ldi	r22, 0x00	; 0
 a32:	42 e0       	ldi	r20, 0x02	; 2
 a34:	63 de       	rcall	.-826    	; 0x6fc <Endpoint_ConfigureEndpoint_Prv>
 a36:	79 d1       	rcall	.+754    	; 0xd2a <USB_Event_Stub>
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
 a38:	ff 91       	pop	r31
 a3a:	ef 91       	pop	r30
 a3c:	bf 91       	pop	r27
 a3e:	af 91       	pop	r26
 a40:	9f 91       	pop	r25

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
 a42:	8f 91       	pop	r24
 a44:	7f 91       	pop	r23
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
 a46:	6f 91       	pop	r22
 a48:	5f 91       	pop	r21
 a4a:	4f 91       	pop	r20
 a4c:	3f 91       	pop	r19
 a4e:	2f 91       	pop	r18
 a50:	0f 90       	pop	r0
 a52:	0b be       	out	0x3b, r0	; 59
 a54:	0f 90       	pop	r0
 a56:	0f be       	out	0x3f, r0	; 63
 a58:	0f 90       	pop	r0
 a5a:	1f 90       	pop	r1
 a5c:	18 95       	reti

00000a5e <USB_Device_ProcessControlRequest>:
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_Device_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
 a5e:	1f 93       	push	r17
 a60:	cf 93       	push	r28
 a62:	df 93       	push	r29
 a64:	cd b7       	in	r28, 0x3d	; 61
 a66:	de b7       	in	r29, 0x3e	; 62
 a68:	ac 97       	sbiw	r28, 0x2c	; 44
 a6a:	0f b6       	in	r0, 0x3f	; 63
 a6c:	f8 94       	cli
 a6e:	de bf       	out	0x3e, r29	; 62
 a70:	0f be       	out	0x3f, r0	; 63
 a72:	cd bf       	out	0x3d, r28	; 61
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
 a74:	80 e0       	ldi	r24, 0x00	; 0
	USB_ControlRequest.bRequest      = Endpoint_Read_8();
	USB_ControlRequest.wValue        = Endpoint_Read_16_LE();
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;
 a76:	ee e0       	ldi	r30, 0x0E	; 14
 a78:	f1 e0       	ldi	r31, 0x01	; 1
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
 a7a:	90 91 f1 00 	lds	r25, 0x00F1

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_8();
 a7e:	91 93       	st	Z+, r25
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
 a80:	8f 5f       	subi	r24, 0xFF	; 255
 a82:	88 30       	cpi	r24, 0x08	; 8
 a84:	d1 f7       	brne	.-12     	; 0xa7a <USB_Device_ProcessControlRequest+0x1c>
	  *(RequestHeader++) = Endpoint_Read_8();
	#endif

	EVENT_USB_Device_ControlRequest();
 a86:	fc db       	rcall	.-2056   	; 0x280 <EVENT_USB_Device_ControlRequest>
 a88:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 a8c:	83 ff       	sbrs	r24, 3

	if (Endpoint_IsSETUPReceived())
 a8e:	35 c1       	rjmp	.+618    	; 0xcfa <USB_Device_ProcessControlRequest+0x29c>
 a90:	80 91 0e 01 	lds	r24, 0x010E
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
 a94:	20 91 0f 01 	lds	r18, 0x010F

		switch (USB_ControlRequest.bRequest)
 a98:	25 30       	cpi	r18, 0x05	; 5
 a9a:	09 f4       	brne	.+2      	; 0xa9e <USB_Device_ProcessControlRequest+0x40>
 a9c:	84 c0       	rjmp	.+264    	; 0xba6 <USB_Device_ProcessControlRequest+0x148>
 a9e:	26 30       	cpi	r18, 0x06	; 6
 aa0:	40 f4       	brcc	.+16     	; 0xab2 <USB_Device_ProcessControlRequest+0x54>
 aa2:	21 30       	cpi	r18, 0x01	; 1
 aa4:	a1 f1       	breq	.+104    	; 0xb0e <USB_Device_ProcessControlRequest+0xb0>
 aa6:	21 30       	cpi	r18, 0x01	; 1
 aa8:	70 f0       	brcs	.+28     	; 0xac6 <USB_Device_ProcessControlRequest+0x68>
 aaa:	23 30       	cpi	r18, 0x03	; 3
 aac:	09 f0       	breq	.+2      	; 0xab0 <USB_Device_ProcessControlRequest+0x52>
 aae:	25 c1       	rjmp	.+586    	; 0xcfa <USB_Device_ProcessControlRequest+0x29c>
 ab0:	2e c0       	rjmp	.+92     	; 0xb0e <USB_Device_ProcessControlRequest+0xb0>
 ab2:	28 30       	cpi	r18, 0x08	; 8
 ab4:	09 f4       	brne	.+2      	; 0xab8 <USB_Device_ProcessControlRequest+0x5a>
 ab6:	f3 c0       	rjmp	.+486    	; 0xc9e <USB_Device_ProcessControlRequest+0x240>
 ab8:	29 30       	cpi	r18, 0x09	; 9
 aba:	09 f4       	brne	.+2      	; 0xabe <USB_Device_ProcessControlRequest+0x60>
 abc:	02 c1       	rjmp	.+516    	; 0xcc2 <USB_Device_ProcessControlRequest+0x264>
 abe:	26 30       	cpi	r18, 0x06	; 6
 ac0:	09 f0       	breq	.+2      	; 0xac4 <USB_Device_ProcessControlRequest+0x66>
 ac2:	1b c1       	rjmp	.+566    	; 0xcfa <USB_Device_ProcessControlRequest+0x29c>
 ac4:	93 c0       	rjmp	.+294    	; 0xbec <USB_Device_ProcessControlRequest+0x18e>
 ac6:	80 38       	cpi	r24, 0x80	; 128
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
 ac8:	21 f0       	breq	.+8      	; 0xad2 <USB_Device_ProcessControlRequest+0x74>
 aca:	82 38       	cpi	r24, 0x82	; 130
 acc:	09 f0       	breq	.+2      	; 0xad0 <USB_Device_ProcessControlRequest+0x72>
 ace:	15 c1       	rjmp	.+554    	; 0xcfa <USB_Device_ProcessControlRequest+0x29c>
 ad0:	08 c0       	rjmp	.+16     	; 0xae2 <USB_Device_ProcessControlRequest+0x84>
 ad2:	80 91 0a 01 	lds	r24, 0x010A
	Endpoint_ClearOUT();
}

static void USB_Device_GetStatus(void)
{
	uint8_t CurrentStatus = 0;
 ad6:	90 91 0b 01 	lds	r25, 0x010B
			if (USB_Device_CurrentlySelfPowered)
			  CurrentStatus |= FEATURE_SELFPOWERED_ENABLED;
			#endif

			#if !defined(NO_DEVICE_REMOTE_WAKEUP)
			if (USB_Device_RemoteWakeupEnabled)
 ada:	99 23       	and	r25, r25
 adc:	71 f0       	breq	.+28     	; 0xafa <USB_Device_ProcessControlRequest+0x9c>
 ade:	82 60       	ori	r24, 0x02	; 2
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
 ae0:	0c c0       	rjmp	.+24     	; 0xafa <USB_Device_ProcessControlRequest+0x9c>
 ae2:	80 91 12 01 	lds	r24, 0x0112
			#endif
			break;
		case (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_ENDPOINT):
			#if !defined(CONTROL_ONLY_DEVICE)
			Endpoint_SelectEndpoint((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
 ae6:	8f 70       	andi	r24, 0x0F	; 15
 ae8:	80 93 e9 00 	sts	0x00E9, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 aec:	90 91 eb 00 	lds	r25, 0x00EB
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
 af0:	81 e0       	ldi	r24, 0x01	; 1

			CurrentStatus = Endpoint_IsStalled();
 af2:	95 ff       	sbrs	r25, 5
 af4:	80 e0       	ldi	r24, 0x00	; 0
 af6:	10 92 e9 00 	sts	0x00E9, r1
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 afa:	90 91 e8 00 	lds	r25, 0x00E8
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 afe:	97 7f       	andi	r25, 0xF7	; 247
 b00:	90 93 e8 00 	sts	0x00E8, r25
 b04:	80 93 f1 00 	sts	0x00F1, r24
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
 b08:	10 92 f1 00 	sts	0x00F1, r1
				UEDATX = (Data >> 8);
 b0c:	d3 c0       	rjmp	.+422    	; 0xcb4 <USB_Device_ProcessControlRequest+0x256>
 b0e:	88 23       	and	r24, r24
				}

				break;
			case REQ_ClearFeature:
			case REQ_SetFeature:
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
 b10:	19 f0       	breq	.+6      	; 0xb18 <USB_Device_ProcessControlRequest+0xba>
 b12:	82 30       	cpi	r24, 0x02	; 2
 b14:	09 f0       	breq	.+2      	; 0xb18 <USB_Device_ProcessControlRequest+0xba>
 b16:	f1 c0       	rjmp	.+482    	; 0xcfa <USB_Device_ProcessControlRequest+0x29c>
 b18:	90 e0       	ldi	r25, 0x00	; 0
	Endpoint_ClearStatusStage();
}

static void USB_Device_ClearSetFeature(void)
{
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
 b1a:	8f 71       	andi	r24, 0x1F	; 31
 b1c:	90 70       	andi	r25, 0x00	; 0
 b1e:	00 97       	sbiw	r24, 0x00	; 0
 b20:	29 f0       	breq	.+10     	; 0xb2c <USB_Device_ProcessControlRequest+0xce>
 b22:	82 30       	cpi	r24, 0x02	; 2
 b24:	91 05       	cpc	r25, r1
 b26:	09 f0       	breq	.+2      	; 0xb2a <USB_Device_ProcessControlRequest+0xcc>
 b28:	e8 c0       	rjmp	.+464    	; 0xcfa <USB_Device_ProcessControlRequest+0x29c>
 b2a:	0b c0       	rjmp	.+22     	; 0xb42 <USB_Device_ProcessControlRequest+0xe4>
 b2c:	80 91 10 01 	lds	r24, 0x0110
	{
		#if !defined(NO_DEVICE_REMOTE_WAKEUP)
		case REQREC_DEVICE:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
 b30:	81 30       	cpi	r24, 0x01	; 1
 b32:	09 f0       	breq	.+2      	; 0xb36 <USB_Device_ProcessControlRequest+0xd8>
 b34:	e2 c0       	rjmp	.+452    	; 0xcfa <USB_Device_ProcessControlRequest+0x29c>
 b36:	23 30       	cpi	r18, 0x03	; 3
			  USB_Device_RemoteWakeupEnabled = (USB_ControlRequest.bRequest == REQ_SetFeature);
 b38:	09 f0       	breq	.+2      	; 0xb3c <USB_Device_ProcessControlRequest+0xde>
 b3a:	80 e0       	ldi	r24, 0x00	; 0
 b3c:	80 93 0b 01 	sts	0x010B, r24
 b40:	2c c0       	rjmp	.+88     	; 0xb9a <USB_Device_ProcessControlRequest+0x13c>
 b42:	80 91 10 01 	lds	r24, 0x0110

			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
 b46:	88 23       	and	r24, r24
 b48:	41 f5       	brne	.+80     	; 0xb9a <USB_Device_ProcessControlRequest+0x13c>
 b4a:	20 91 12 01 	lds	r18, 0x0112
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
 b4e:	2f 70       	andi	r18, 0x0F	; 15
 b50:	09 f4       	brne	.+2      	; 0xb54 <USB_Device_ProcessControlRequest+0xf6>

				if (EndpointIndex == ENDPOINT_CONTROLEP)
 b52:	d3 c0       	rjmp	.+422    	; 0xcfa <USB_Device_ProcessControlRequest+0x29c>
 b54:	20 93 e9 00 	sts	0x00E9, r18
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 b58:	80 91 eb 00 	lds	r24, 0x00EB
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
 b5c:	80 ff       	sbrs	r24, 0
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
 b5e:	1d c0       	rjmp	.+58     	; 0xb9a <USB_Device_ProcessControlRequest+0x13c>
 b60:	80 91 0f 01 	lds	r24, 0x010F
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
 b64:	83 30       	cpi	r24, 0x03	; 3
 b66:	21 f4       	brne	.+8      	; 0xb70 <USB_Device_ProcessControlRequest+0x112>
 b68:	80 91 eb 00 	lds	r24, 0x00EB
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
 b6c:	80 62       	ori	r24, 0x20	; 32
 b6e:	13 c0       	rjmp	.+38     	; 0xb96 <USB_Device_ProcessControlRequest+0x138>
 b70:	80 91 eb 00 	lds	r24, 0x00EB
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
 b74:	80 61       	ori	r24, 0x10	; 16
 b76:	80 93 eb 00 	sts	0x00EB, r24
 b7a:	81 e0       	ldi	r24, 0x01	; 1
			 *  \param[in] Address  Endpoint address whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t Address)
			{
				UERST = (1 << (Address & ENDPOINT_EPNUM_MASK));
 b7c:	90 e0       	ldi	r25, 0x00	; 0
 b7e:	02 c0       	rjmp	.+4      	; 0xb84 <USB_Device_ProcessControlRequest+0x126>
 b80:	88 0f       	add	r24, r24
 b82:	99 1f       	adc	r25, r25
 b84:	2a 95       	dec	r18
 b86:	e2 f7       	brpl	.-8      	; 0xb80 <USB_Device_ProcessControlRequest+0x122>
 b88:	80 93 ea 00 	sts	0x00EA, r24
 b8c:	10 92 ea 00 	sts	0x00EA, r1
				UERST = 0;
 b90:	80 91 eb 00 	lds	r24, 0x00EB

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
 b94:	88 60       	ori	r24, 0x08	; 8
 b96:	80 93 eb 00 	sts	0x00EB, r24
 b9a:	10 92 e9 00 	sts	0x00E9, r1
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 b9e:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 ba2:	87 7f       	andi	r24, 0xF7	; 247
 ba4:	8a c0       	rjmp	.+276    	; 0xcba <USB_Device_ProcessControlRequest+0x25c>
 ba6:	88 23       	and	r24, r24
					USB_Device_ClearSetFeature();
				}

				break;
			case REQ_SetAddress:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
 ba8:	09 f0       	breq	.+2      	; 0xbac <USB_Device_ProcessControlRequest+0x14e>
 baa:	a7 c0       	rjmp	.+334    	; 0xcfa <USB_Device_ProcessControlRequest+0x29c>
 bac:	10 91 10 01 	lds	r17, 0x0110
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t DeviceAddress = (USB_ControlRequest.wValue & 0x7F);
 bb0:	1f 77       	andi	r17, 0x7F	; 127
 bb2:	80 91 e3 00 	lds	r24, 0x00E3
			#endif

			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				UDADDR = (UDADDR & (1 << ADDEN)) | (Address & 0x7F);
 bb6:	80 78       	andi	r24, 0x80	; 128
 bb8:	81 2b       	or	r24, r17
 bba:	80 93 e3 00 	sts	0x00E3, r24
 bbe:	80 91 e8 00 	lds	r24, 0x00E8
 bc2:	87 7f       	andi	r24, 0xF7	; 247
 bc4:	80 93 e8 00 	sts	0x00E8, r24
 bc8:	ce dd       	rcall	.-1124   	; 0x766 <Endpoint_ClearStatusStage>

	USB_Device_SetDeviceAddress(DeviceAddress);

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
 bca:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 bce:	80 ff       	sbrs	r24, 0
 bd0:	fc cf       	rjmp	.-8      	; 0xbca <USB_Device_ProcessControlRequest+0x16c>

	while (!(Endpoint_IsINReady()));
 bd2:	80 91 e3 00 	lds	r24, 0x00E3
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address)
			{
				(void)Address;
				
				UDADDR |= (1 << ADDEN);
 bd6:	80 68       	ori	r24, 0x80	; 128
 bd8:	80 93 e3 00 	sts	0x00E3, r24
 bdc:	11 23       	and	r17, r17
 bde:	11 f0       	breq	.+4      	; 0xbe4 <USB_Device_ProcessControlRequest+0x186>

	USB_Device_EnableDeviceAddress(DeviceAddress);

	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
 be0:	83 e0       	ldi	r24, 0x03	; 3
 be2:	01 c0       	rjmp	.+2      	; 0xbe6 <USB_Device_ProcessControlRequest+0x188>
 be4:	82 e0       	ldi	r24, 0x02	; 2
 be6:	80 93 0d 01 	sts	0x010D, r24
 bea:	87 c0       	rjmp	.+270    	; 0xcfa <USB_Device_ProcessControlRequest+0x29c>
 bec:	80 58       	subi	r24, 0x80	; 128
 bee:	82 30       	cpi	r24, 0x02	; 2
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_SetAddress();

				break;
			case REQ_GetDescriptor:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
 bf0:	08 f0       	brcs	.+2      	; 0xbf4 <USB_Device_ProcessControlRequest+0x196>
 bf2:	83 c0       	rjmp	.+262    	; 0xcfa <USB_Device_ProcessControlRequest+0x29c>
 bf4:	80 91 10 01 	lds	r24, 0x0110
	    !(defined(USE_FLASH_DESCRIPTORS) || defined(USE_EEPROM_DESCRIPTORS) || defined(USE_RAM_DESCRIPTORS))
	uint8_t DescriptorAddressSpace;
	#endif

	#if !defined(NO_INTERNAL_SERIAL) && (USE_INTERNAL_SERIAL != NO_DESCRIPTOR)
	if (USB_ControlRequest.wValue == ((DTYPE_String << 8) | USE_INTERNAL_SERIAL))
 bf8:	90 91 11 01 	lds	r25, 0x0111
 bfc:	23 e0       	ldi	r18, 0x03	; 3
 bfe:	8c 3d       	cpi	r24, 0xDC	; 220
 c00:	92 07       	cpc	r25, r18
 c02:	a9 f5       	brne	.+106    	; 0xc6e <USB_Device_ProcessControlRequest+0x210>
 c04:	83 e0       	ldi	r24, 0x03	; 3
 c06:	8c 83       	std	Y+4, r24	; 0x04
	{
		USB_Descriptor_Header_t Header;
		uint16_t                UnicodeString[INTERNAL_SERIAL_LENGTH_BITS / 4];
	} SignatureDescriptor;

	SignatureDescriptor.Header.Type = DTYPE_String;
 c08:	8a e2       	ldi	r24, 0x2A	; 42
 c0a:	8b 83       	std	Y+3, r24	; 0x03
	SignatureDescriptor.Header.Size = USB_STRING_LEN(INTERNAL_SERIAL_LENGTH_BITS / 4);
 c0c:	5f b7       	in	r21, 0x3f	; 63
 c0e:	f8 94       	cli
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
 c10:	de 01       	movw	r26, r28
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
 c12:	13 96       	adiw	r26, 0x03	; 3
				__builtin_ssrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				cli();
				#endif

				GCC_MEMORY_BARRIER();
 c14:	80 e0       	ldi	r24, 0x00	; 0
 c16:	90 e0       	ldi	r25, 0x00	; 0
 c18:	4e e0       	ldi	r20, 0x0E	; 14
 c1a:	61 e2       	ldi	r22, 0x21	; 33
			static inline void USB_Device_GetSerialString(uint16_t* const UnicodeString)
			{
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;
 c1c:	e4 2f       	mov	r30, r20

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
				{
					uint8_t SerialByte = boot_signature_byte_get(SigReadAddress);
 c1e:	f0 e0       	ldi	r31, 0x00	; 0
 c20:	60 93 57 00 	sts	0x0057, r22
 c24:	e4 91       	lpm	r30, Z
 c26:	80 ff       	sbrs	r24, 0
 c28:	03 c0       	rjmp	.+6      	; 0xc30 <USB_Device_ProcessControlRequest+0x1d2>

					if (SerialCharNum & 0x01)
 c2a:	e2 95       	swap	r30
 c2c:	ef 70       	andi	r30, 0x0F	; 15
					{
						SerialByte >>= 4;
 c2e:	4f 5f       	subi	r20, 0xFF	; 255
 c30:	ef 70       	andi	r30, 0x0F	; 15
						SigReadAddress++;
 c32:	2e 2f       	mov	r18, r30
					}

					SerialByte &= 0x0F;
 c34:	30 e0       	ldi	r19, 0x00	; 0
 c36:	ea 30       	cpi	r30, 0x0A	; 10
 c38:	18 f0       	brcs	.+6      	; 0xc40 <USB_Device_ProcessControlRequest+0x1e2>

					UnicodeString[SerialCharNum] = cpu_to_le16((SerialByte >= 10) ?
 c3a:	29 5c       	subi	r18, 0xC9	; 201
 c3c:	3f 4f       	sbci	r19, 0xFF	; 255
 c3e:	02 c0       	rjmp	.+4      	; 0xc44 <USB_Device_ProcessControlRequest+0x1e6>
 c40:	20 5d       	subi	r18, 0xD0	; 208
 c42:	3f 4f       	sbci	r19, 0xFF	; 255
 c44:	13 96       	adiw	r26, 0x03	; 3
 c46:	3c 93       	st	X, r19
 c48:	2e 93       	st	-X, r18
 c4a:	12 97       	sbiw	r26, 0x02	; 2
 c4c:	01 96       	adiw	r24, 0x01	; 1
 c4e:	12 96       	adiw	r26, 0x02	; 2
 c50:	84 31       	cpi	r24, 0x14	; 20
 c52:	91 05       	cpc	r25, r1
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
 c54:	19 f7       	brne	.-58     	; 0xc1c <USB_Device_ProcessControlRequest+0x1be>
 c56:	5f bf       	out	0x3f, r21	; 63
 c58:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 c5c:	87 7f       	andi	r24, 0xF7	; 247
 c5e:	80 93 e8 00 	sts	0x00E8, r24
 c62:	ce 01       	movw	r24, r28
 c64:	03 96       	adiw	r24, 0x03	; 3

	USB_Device_GetSerialString(SignatureDescriptor.UnicodeString);

	Endpoint_ClearSETUP();

	Endpoint_Write_Control_Stream_LE(&SignatureDescriptor, sizeof(SignatureDescriptor));
 c66:	6a e2       	ldi	r22, 0x2A	; 42
 c68:	70 e0       	ldi	r23, 0x00	; 0
 c6a:	8f dc       	rcall	.-1762   	; 0x58a <Endpoint_Write_Control_Stream_LE>
 c6c:	12 c0       	rjmp	.+36     	; 0xc92 <USB_Device_ProcessControlRequest+0x234>
 c6e:	60 91 12 01 	lds	r22, 0x0112
 c72:	ae 01       	movw	r20, r28
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif

	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
 c74:	4f 5f       	subi	r20, 0xFF	; 255
 c76:	5f 4f       	sbci	r21, 0xFF	; 255
 c78:	fb db       	rcall	.-2058   	; 0x470 <CALLBACK_USB_GetDescriptor>
 c7a:	bc 01       	movw	r22, r24
 c7c:	00 97       	sbiw	r24, 0x00	; 0
 c7e:	09 f4       	brne	.+2      	; 0xc82 <USB_Device_ProcessControlRequest+0x224>
 c80:	3c c0       	rjmp	.+120    	; 0xcfa <USB_Device_ProcessControlRequest+0x29c>
 c82:	80 91 e8 00 	lds	r24, 0x00E8
 c86:	87 7f       	andi	r24, 0xF7	; 247
 c88:	80 93 e8 00 	sts	0x00E8, r24
 c8c:	89 81       	ldd	r24, Y+1	; 0x01
 c8e:	9a 81       	ldd	r25, Y+2	; 0x02
 c90:	d8 dc       	rcall	.-1616   	; 0x642 <Endpoint_Write_Control_PStream_LE>
 c92:	80 91 e8 00 	lds	r24, 0x00E8
	#if defined(USE_RAM_DESCRIPTORS) || !defined(ARCH_HAS_MULTI_ADDRESS_SPACE)
	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_EEPROM_DESCRIPTORS)
	Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_FLASH_DESCRIPTORS)
	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
 c96:	8b 77       	andi	r24, 0x7B	; 123
 c98:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 c9c:	2e c0       	rjmp	.+92     	; 0xcfa <USB_Device_ProcessControlRequest+0x29c>
 c9e:	80 38       	cpi	r24, 0x80	; 128
 ca0:	61 f5       	brne	.+88     	; 0xcfa <USB_Device_ProcessControlRequest+0x29c>
 ca2:	80 91 e8 00 	lds	r24, 0x00E8
 ca6:	87 7f       	andi	r24, 0xF7	; 247
					USB_Device_GetDescriptor();
				}

				break;
			case REQ_GetConfiguration:
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
 ca8:	80 93 e8 00 	sts	0x00E8, r24
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 cac:	80 91 09 01 	lds	r24, 0x0109
 cb0:	80 93 f1 00 	sts	0x00F1, r24
 cb4:	80 91 e8 00 	lds	r24, 0x00E8

static void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();

	Endpoint_Write_8(USB_Device_ConfigurationNumber);
 cb8:	8e 77       	andi	r24, 0x7E	; 126
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
 cba:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 cbe:	53 dd       	rcall	.-1370   	; 0x766 <Endpoint_ClearStatusStage>
 cc0:	1c c0       	rjmp	.+56     	; 0xcfa <USB_Device_ProcessControlRequest+0x29c>
 cc2:	88 23       	and	r24, r24
 cc4:	d1 f4       	brne	.+52     	; 0xcfa <USB_Device_ProcessControlRequest+0x29c>
 cc6:	90 91 10 01 	lds	r25, 0x0110
	Endpoint_ClearIN();

	Endpoint_ClearStatusStage();
 cca:	92 30       	cpi	r25, 0x02	; 2
 ccc:	b0 f4       	brcc	.+44     	; 0xcfa <USB_Device_ProcessControlRequest+0x29c>
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_GetConfiguration();

				break;
			case REQ_SetConfiguration:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
 cce:	80 91 e8 00 	lds	r24, 0x00E8
}

static void USB_Device_SetConfiguration(void)
{
	#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
 cd2:	87 7f       	andi	r24, 0xF7	; 247
 cd4:	80 93 e8 00 	sts	0x00E8, r24
 cd8:	90 93 09 01 	sts	0x0109, r25
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 cdc:	44 dd       	rcall	.-1400   	; 0x766 <Endpoint_ClearStatusStage>
 cde:	80 91 09 01 	lds	r24, 0x0109
 ce2:	88 23       	and	r24, r24
	#endif
	#endif

	Endpoint_ClearSETUP();

	USB_Device_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
 ce4:	21 f4       	brne	.+8      	; 0xcee <USB_Device_ProcessControlRequest+0x290>
 ce6:	80 91 e3 00 	lds	r24, 0x00E3

	Endpoint_ClearStatusStage();
 cea:	87 ff       	sbrs	r24, 7

	if (USB_Device_ConfigurationNumber)
 cec:	02 c0       	rjmp	.+4      	; 0xcf2 <USB_Device_ProcessControlRequest+0x294>
 cee:	84 e0       	ldi	r24, 0x04	; 4
 cf0:	01 c0       	rjmp	.+2      	; 0xcf4 <USB_Device_ProcessControlRequest+0x296>
 cf2:	81 e0       	ldi	r24, 0x01	; 1
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
 cf4:	80 93 0d 01 	sts	0x010D, r24
	  USB_DeviceState = DEVICE_STATE_Configured;
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
 cf8:	79 da       	rcall	.-2830   	; 0x1ec <EVENT_USB_Device_ConfigurationChanged>
 cfa:	80 91 e8 00 	lds	r24, 0x00E8
 cfe:	83 ff       	sbrs	r24, 3
 d00:	0a c0       	rjmp	.+20     	; 0xd16 <USB_Device_ProcessControlRequest+0x2b8>
 d02:	80 91 e8 00 	lds	r24, 0x00E8

	EVENT_USB_Device_ConfigurationChanged();
 d06:	87 7f       	andi	r24, 0xF7	; 247
 d08:	80 93 e8 00 	sts	0x00E8, r24
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 d0c:	80 91 eb 00 	lds	r24, 0x00EB
			default:
				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
 d10:	80 62       	ori	r24, 0x20	; 32
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 d12:	80 93 eb 00 	sts	0x00EB, r24
 d16:	ac 96       	adiw	r28, 0x2c	; 44
 d18:	0f b6       	in	r0, 0x3f	; 63
 d1a:	f8 94       	cli
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
 d1c:	de bf       	out	0x3e, r29	; 62
 d1e:	0f be       	out	0x3f, r0	; 63
 d20:	cd bf       	out	0x3d, r28	; 61
 d22:	df 91       	pop	r29
 d24:	cf 91       	pop	r28
	{
		Endpoint_ClearSETUP();
		Endpoint_StallTransaction();
	}
}
 d26:	1f 91       	pop	r17
 d28:	08 95       	ret

00000d2a <USB_Event_Stub>:
#include "Events.h"

void USB_Event_Stub(void)
{

}
 d2a:	08 95       	ret

00000d2c <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
 d2c:	cf 93       	push	r28
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_DeviceTask(void)
{
	if (USB_DeviceState == DEVICE_STATE_Unattached)
 d2e:	80 91 0d 01 	lds	r24, 0x010D
 d32:	88 23       	and	r24, r24
 d34:	a9 f0       	breq	.+42     	; 0xd60 <USB_USBTask+0x34>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
 d36:	80 91 e9 00 	lds	r24, 0x00E9
 d3a:	8f 70       	andi	r24, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
 d3c:	90 91 ec 00 	lds	r25, 0x00EC
 d40:	90 ff       	sbrs	r25, 0
 d42:	02 c0       	rjmp	.+4      	; 0xd48 <USB_USBTask+0x1c>
 d44:	c0 e8       	ldi	r28, 0x80	; 128
 d46:	01 c0       	rjmp	.+2      	; 0xd4a <USB_USBTask+0x1e>
 d48:	c0 e0       	ldi	r28, 0x00	; 0
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
 d4a:	c8 2b       	or	r28, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 d4c:	10 92 e9 00 	sts	0x00E9, r1
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 d50:	80 91 e8 00 	lds	r24, 0x00E8

	uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

	if (Endpoint_IsSETUPReceived())
 d54:	83 ff       	sbrs	r24, 3
 d56:	01 c0       	rjmp	.+2      	; 0xd5a <USB_USBTask+0x2e>
	  USB_Device_ProcessControlRequest();
 d58:	82 de       	rcall	.-764    	; 0xa5e <USB_Device_ProcessControlRequest>
 d5a:	cf 70       	andi	r28, 0x0F	; 15
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 d5c:	c0 93 e9 00 	sts	0x00E9, r28
 d60:	cf 91       	pop	r28
	#elif defined(USB_CAN_BE_HOST)
		USB_HostTask();
	#elif defined(USB_CAN_BE_DEVICE)
		USB_DeviceTask();
	#endif
}
 d62:	08 95       	ret

00000d64 <memcmp>:
 d64:	fb 01       	movw	r30, r22
 d66:	dc 01       	movw	r26, r24
 d68:	04 c0       	rjmp	.+8      	; 0xd72 <memcmp+0xe>
 d6a:	8d 91       	ld	r24, X+
 d6c:	01 90       	ld	r0, Z+
 d6e:	80 19       	sub	r24, r0
 d70:	21 f4       	brne	.+8      	; 0xd7a <memcmp+0x16>
 d72:	41 50       	subi	r20, 0x01	; 1
 d74:	50 40       	sbci	r21, 0x00	; 0
 d76:	c8 f7       	brcc	.-14     	; 0xd6a <memcmp+0x6>
 d78:	88 1b       	sub	r24, r24
 d7a:	99 0b       	sbc	r25, r25
 d7c:	08 95       	ret

00000d7e <_exit>:
 d7e:	f8 94       	cli

00000d80 <__stop_program>:
 d80:	ff cf       	rjmp	.-2      	; 0xd80 <__stop_program>
