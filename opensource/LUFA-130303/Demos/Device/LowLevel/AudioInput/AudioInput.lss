
AudioInput.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800100  00000d1c  00000db0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000d1c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000011  00800104  00800104  00000db4  2**0
                  ALLOC
  3 .stab         00000870  00000000  00000000  00000db4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000013a  00000000  00000000  00001624  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000350  00000000  00000000  00001760  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00005435  00000000  00000000  00001ab0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000130e  00000000  00000000  00006ee5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002851  00000000  00000000  000081f3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000008dc  00000000  00000000  0000aa44  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00002972  00000000  00000000  0000b320  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000036d7  00000000  00000000  0000dc92  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000508  00000000  00000000  00011369  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	af c0       	rjmp	.+350    	; 0x160 <__ctors_end>
   2:	00 00       	nop
   4:	cb c0       	rjmp	.+406    	; 0x19c <__bad_interrupt>
   6:	00 00       	nop
   8:	c9 c0       	rjmp	.+402    	; 0x19c <__bad_interrupt>
   a:	00 00       	nop
   c:	c7 c0       	rjmp	.+398    	; 0x19c <__bad_interrupt>
   e:	00 00       	nop
  10:	c5 c0       	rjmp	.+394    	; 0x19c <__bad_interrupt>
  12:	00 00       	nop
  14:	c3 c0       	rjmp	.+390    	; 0x19c <__bad_interrupt>
  16:	00 00       	nop
  18:	c1 c0       	rjmp	.+386    	; 0x19c <__bad_interrupt>
  1a:	00 00       	nop
  1c:	bf c0       	rjmp	.+382    	; 0x19c <__bad_interrupt>
  1e:	00 00       	nop
  20:	bd c0       	rjmp	.+378    	; 0x19c <__bad_interrupt>
  22:	00 00       	nop
  24:	bb c0       	rjmp	.+374    	; 0x19c <__bad_interrupt>
  26:	00 00       	nop
  28:	0a c4       	rjmp	.+2068   	; 0x83e <__vector_10>
  2a:	00 00       	nop
  2c:	b7 c0       	rjmp	.+366    	; 0x19c <__bad_interrupt>
  2e:	00 00       	nop
  30:	b5 c0       	rjmp	.+362    	; 0x19c <__bad_interrupt>
  32:	00 00       	nop
  34:	b3 c0       	rjmp	.+358    	; 0x19c <__bad_interrupt>
  36:	00 00       	nop
  38:	b1 c0       	rjmp	.+354    	; 0x19c <__bad_interrupt>
  3a:	00 00       	nop
  3c:	af c0       	rjmp	.+350    	; 0x19c <__bad_interrupt>
  3e:	00 00       	nop
  40:	ad c0       	rjmp	.+346    	; 0x19c <__bad_interrupt>
  42:	00 00       	nop
  44:	ab c0       	rjmp	.+342    	; 0x19c <__bad_interrupt>
  46:	00 00       	nop
  48:	a9 c0       	rjmp	.+338    	; 0x19c <__bad_interrupt>
  4a:	00 00       	nop
  4c:	a7 c0       	rjmp	.+334    	; 0x19c <__bad_interrupt>
  4e:	00 00       	nop
  50:	a5 c0       	rjmp	.+330    	; 0x19c <__bad_interrupt>
  52:	00 00       	nop
  54:	bc c1       	rjmp	.+888    	; 0x3ce <__vector_21>
  56:	00 00       	nop
  58:	a1 c0       	rjmp	.+322    	; 0x19c <__bad_interrupt>
  5a:	00 00       	nop
  5c:	9f c0       	rjmp	.+318    	; 0x19c <__bad_interrupt>
  5e:	00 00       	nop
  60:	9d c0       	rjmp	.+314    	; 0x19c <__bad_interrupt>
  62:	00 00       	nop
  64:	9b c0       	rjmp	.+310    	; 0x19c <__bad_interrupt>
  66:	00 00       	nop
  68:	99 c0       	rjmp	.+306    	; 0x19c <__bad_interrupt>
  6a:	00 00       	nop
  6c:	97 c0       	rjmp	.+302    	; 0x19c <__bad_interrupt>
  6e:	00 00       	nop
  70:	95 c0       	rjmp	.+298    	; 0x19c <__bad_interrupt>
  72:	00 00       	nop
  74:	93 c0       	rjmp	.+294    	; 0x19c <__bad_interrupt>
  76:	00 00       	nop
  78:	91 c0       	rjmp	.+290    	; 0x19c <__bad_interrupt>
  7a:	00 00       	nop
  7c:	8f c0       	rjmp	.+286    	; 0x19c <__bad_interrupt>
  7e:	00 00       	nop
  80:	8d c0       	rjmp	.+282    	; 0x19c <__bad_interrupt>
  82:	00 00       	nop
  84:	8b c0       	rjmp	.+278    	; 0x19c <__bad_interrupt>
  86:	00 00       	nop
  88:	89 c0       	rjmp	.+274    	; 0x19c <__bad_interrupt>
  8a:	00 00       	nop
  8c:	87 c0       	rjmp	.+270    	; 0x19c <__bad_interrupt>
  8e:	00 00       	nop
  90:	85 c0       	rjmp	.+266    	; 0x19c <__bad_interrupt>
  92:	00 00       	nop
  94:	83 c0       	rjmp	.+262    	; 0x19c <__bad_interrupt>
  96:	00 00       	nop

00000098 <ProductString>:
  98:	26 03 4c 00 55 00 46 00 41 00 20 00 41 00 75 00     &.L.U.F.A. .A.u.
  a8:	64 00 69 00 6f 00 20 00 49 00 6e 00 20 00 44 00     d.i.o. .I.n. .D.
  b8:	65 00 6d 00 6f 00 00 00                             e.m.o...

000000c0 <ManufacturerString>:
  c0:	18 03 44 00 65 00 61 00 6e 00 20 00 43 00 61 00     ..D.e.a.n. .C.a.
  d0:	6d 00 65 00 72 00 61 00 00 00                       m.e.r.a...

000000da <LanguageString>:
  da:	04 03 09 04                                         ....

000000de <ConfigurationDescriptor>:
  de:	09 02 70 00 02 01 00 c0 32 09 04 00 00 00 01 01     ..p.....2.......
  ee:	00 00 09 24 01 00 01 1e 00 01 01 0c 24 02 01 01     ...$........$...
  fe:	02 00 01 00 00 00 00 09 24 03 02 01 01 00 01 00     ........$.......
 10e:	09 04 01 00 00 01 02 00 00 09 04 01 01 01 01 02     ................
 11e:	00 00 07 24 01 02 01 01 00 17 24 02 01 01 02 10     ...$......$.....
 12e:	05 40 1f 00 11 2b 00 22 56 00 44 ac 00 80 bb 00     .@...+."V.D.....
 13e:	09 05 81 0d 00 01 01 00 00 07 25 01 01 00 00 00     ..........%.....

0000014e <DeviceDescriptor>:
 14e:	12 01 10 01 00 00 00 08 eb 03 47 20 02 00 01 02     ..........G ....
 15e:	00 01                                               ..

00000160 <__ctors_end>:
 160:	11 24       	eor	r1, r1
 162:	1f be       	out	0x3f, r1	; 63
 164:	cf ef       	ldi	r28, 0xFF	; 255
 166:	d0 e2       	ldi	r29, 0x20	; 32
 168:	de bf       	out	0x3e, r29	; 62
 16a:	cd bf       	out	0x3d, r28	; 61

0000016c <__do_copy_data>:
 16c:	11 e0       	ldi	r17, 0x01	; 1
 16e:	a0 e0       	ldi	r26, 0x00	; 0
 170:	b1 e0       	ldi	r27, 0x01	; 1
 172:	ec e1       	ldi	r30, 0x1C	; 28
 174:	fd e0       	ldi	r31, 0x0D	; 13
 176:	00 e0       	ldi	r16, 0x00	; 0
 178:	0b bf       	out	0x3b, r16	; 59
 17a:	02 c0       	rjmp	.+4      	; 0x180 <__do_copy_data+0x14>
 17c:	07 90       	elpm	r0, Z+
 17e:	0d 92       	st	X+, r0
 180:	a4 30       	cpi	r26, 0x04	; 4
 182:	b1 07       	cpc	r27, r17
 184:	d9 f7       	brne	.-10     	; 0x17c <__do_copy_data+0x10>
 186:	1b be       	out	0x3b, r1	; 59

00000188 <__do_clear_bss>:
 188:	11 e0       	ldi	r17, 0x01	; 1
 18a:	a4 e0       	ldi	r26, 0x04	; 4
 18c:	b1 e0       	ldi	r27, 0x01	; 1
 18e:	01 c0       	rjmp	.+2      	; 0x192 <.do_clear_bss_start>

00000190 <.do_clear_bss_loop>:
 190:	1d 92       	st	X+, r1

00000192 <.do_clear_bss_start>:
 192:	a5 31       	cpi	r26, 0x15	; 21
 194:	b1 07       	cpc	r27, r17
 196:	e1 f7       	brne	.-8      	; 0x190 <.do_clear_bss_loop>
 198:	39 d0       	rcall	.+114    	; 0x20c <main>
 19a:	be c5       	rjmp	.+2940   	; 0xd18 <_exit>

0000019c <__bad_interrupt>:
 19c:	31 cf       	rjmp	.-414    	; 0x0 <__vectors>

0000019e <LEDs_SetAllLEDs>:
				PORTD &= ~LEDMask;
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
			{
				PORTD = ((PORTD & ~LEDS_ALL_LEDS) | LEDMask);
 19e:	9b b1       	in	r25, 0x0b	; 11
 1a0:	9f 70       	andi	r25, 0x0F	; 15
 1a2:	98 2b       	or	r25, r24
 1a4:	9b b9       	out	0x0b, r25	; 11
			}
 1a6:	08 95       	ret

000001a8 <SetupHardware>:
	}
}

/** Configures the board hardware and chip peripherals for the demo's functionality. */
void SetupHardware(void)
{
 1a8:	cf 93       	push	r28
 1aa:	df 93       	push	r29
	/* Disable watchdog if enabled by bootloader/fuses */
	MCUSR &= ~(1 << WDRF);
 1ac:	84 b7       	in	r24, 0x34	; 52
 1ae:	87 7f       	andi	r24, 0xF7	; 247
 1b0:	84 bf       	out	0x34, r24	; 52
	wdt_disable();
 1b2:	88 e1       	ldi	r24, 0x18	; 24
 1b4:	0f b6       	in	r0, 0x3f	; 63
 1b6:	f8 94       	cli
 1b8:	80 93 60 00 	sts	0x0060, r24
 1bc:	10 92 60 00 	sts	0x0060, r1
 1c0:	0f be       	out	0x3f, r0	; 63
The type of x is clock_div_t.
*/
void clock_prescale_set(clock_div_t __x)
{
    uint8_t __tmp = _BV(CLKPCE);
    __asm__ __volatile__ (
 1c2:	90 e0       	ldi	r25, 0x00	; 0
 1c4:	80 e8       	ldi	r24, 0x80	; 128
 1c6:	0f b6       	in	r0, 0x3f	; 63
 1c8:	f8 94       	cli
 1ca:	80 93 61 00 	sts	0x0061, r24
 1ce:	90 93 61 00 	sts	0x0061, r25
 1d2:	0f be       	out	0x3f, r0	; 63

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void LEDs_Init(void)
			{
				DDRD  |=  LEDS_ALL_LEDS;
 1d4:	8a b1       	in	r24, 0x0a	; 10
 1d6:	80 6f       	ori	r24, 0xF0	; 240
 1d8:	8a b9       	out	0x0a, r24	; 10
				PORTD &= ~LEDS_ALL_LEDS;
 1da:	8b b1       	in	r24, 0x0b	; 11
 1dc:	8f 70       	andi	r24, 0x0F	; 15
 1de:	8b b9       	out	0x0b, r24	; 11

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void Buttons_Init(void)
			{
				DDRE  &= ~BUTTONS_BUTTON1;
 1e0:	6a 98       	cbi	0x0d, 2	; 13
				PORTE |=  BUTTONS_BUTTON1;
 1e2:	72 9a       	sbi	0x0e, 2	; 14
			 *  \param[in] Mode  Mask of ADC prescale and mode settings.
			 */
			static inline void ADC_Init(const uint8_t Mode) ATTR_ALWAYS_INLINE;
			static inline void ADC_Init(const uint8_t Mode)
			{
				ADCSRA = ((1 << ADEN) | Mode);
 1e4:	ca e7       	ldi	r28, 0x7A	; 122
 1e6:	d0 e0       	ldi	r29, 0x00	; 0
 1e8:	85 ea       	ldi	r24, 0xA5	; 165
 1ea:	88 83       	st	Y, r24
			 */
			static inline void ADC_SetupChannel(const uint8_t ChannelIndex)
			{
				#if (defined(__AVR_AT90USB1286__) || defined(__AVR_AT90USB646__) || \
					 defined(__AVR_AT90USB1287__) || defined(__AVR_AT90USB647__))
				DDRF  &= ~(1 << ChannelIndex);
 1ec:	82 98       	cbi	0x10, 2	; 16
				DIDR0 |=  (1 << ChannelIndex);
 1ee:	ee e7       	ldi	r30, 0x7E	; 126
 1f0:	f0 e0       	ldi	r31, 0x00	; 0
 1f2:	80 81       	ld	r24, Z
 1f4:	84 60       	ori	r24, 0x04	; 4
 1f6:	80 83       	st	Z, r24
	/* Hardware Initialization */
	LEDs_Init();
	Buttons_Init();
	ADC_Init(ADC_FREE_RUNNING | ADC_PRESCALE_32);
	ADC_SetupChannel(MIC_IN_ADC_CHANNEL);
	USB_Init();
 1f8:	07 d3       	rcall	.+1550   	; 0x808 <USB_Init>
 1fa:	82 e4       	ldi	r24, 0x42	; 66
			 *
			 *  \param[in] MUXMask  ADC channel mask, reference mask and adjustment mask.
			 */
			static inline void ADC_StartReading(const uint16_t MUXMask)
			{
				ADMUX = MUXMask;
 1fc:	80 93 7c 00 	sts	0x007C, r24
 200:	88 81       	ld	r24, Y
				  ADCSRB |=  (1 << MUX5);
				else
				  ADCSRB &= ~(1 << MUX5);
				#endif

				ADCSRA |= (1 << ADSC);
 202:	80 64       	ori	r24, 0x40	; 64
 204:	88 83       	st	Y, r24
 206:	df 91       	pop	r29

	/* Start the ADC conversion in free running mode */
	ADC_StartReading(ADC_REFERENCE_AVCC | ADC_RIGHT_ADJUSTED | ADC_GET_CHANNEL_MASK(MIC_IN_ADC_CHANNEL));
}
 208:	cf 91       	pop	r28
 20a:	08 95       	ret

0000020c <main>:
 20c:	cd df       	rcall	.-102    	; 0x1a8 <SetupHardware>
/** Main program entry point. This routine contains the overall program flow, including initial
 *  setup of all components and the main program loop.
 */
int main(void)
{
	SetupHardware();
 20e:	80 e1       	ldi	r24, 0x10	; 16

	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
 210:	c6 df       	rcall	.-116    	; 0x19e <LEDs_SetAllLEDs>
 212:	78 94       	sei
 214:	43 d5       	rcall	.+2694   	; 0xc9c <USB_USBTask>
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				sei();
 216:	fe cf       	rjmp	.-4      	; 0x214 <main+0x8>

00000218 <EVENT_USB_Device_Connect>:
	GlobalInterruptEnable();

	for (;;)
	{
		USB_USBTask();
 218:	cf 93       	push	r28
 21a:	80 ea       	ldi	r24, 0xA0	; 160
 21c:	c0 df       	rcall	.-128    	; 0x19e <LEDs_SetAllLEDs>
 *  configures the sample update and PWM timers.
 */
void EVENT_USB_Device_Connect(void)
{
	/* Indicate USB enumerating */
	LEDs_SetAllLEDs(LEDMASK_USB_ENUMERATING);
 21e:	c2 e0       	ldi	r28, 0x02	; 2

	/* Sample reload timer initialization */
	TIMSK0  = (1 << OCIE0A);
 220:	c0 93 6e 00 	sts	0x006E, r28
 224:	20 91 00 01 	lds	r18, 0x0100
	OCR0A   = ((F_CPU / 8 / CurrentAudioSampleFrequency) - 1);
 228:	30 91 01 01 	lds	r19, 0x0101
 22c:	40 91 02 01 	lds	r20, 0x0102
 230:	50 91 03 01 	lds	r21, 0x0103
 234:	60 e4       	ldi	r22, 0x40	; 64
 236:	72 e4       	ldi	r23, 0x42	; 66
 238:	8f e0       	ldi	r24, 0x0F	; 15
 23a:	90 e0       	ldi	r25, 0x00	; 0
 23c:	4b d5       	rcall	.+2710   	; 0xcd4 <__udivmodsi4>
 23e:	21 50       	subi	r18, 0x01	; 1
 240:	27 bd       	out	0x27, r18	; 39
 242:	c4 bd       	out	0x24, r28	; 36
 244:	c5 bd       	out	0x25, r28	; 37
	TCCR0A  = (1 << WGM01);  // CTC mode
 246:	cf 91       	pop	r28
	TCCR0B  = (1 << CS01);   // Fcpu/8 speed
 248:	08 95       	ret

0000024a <EVENT_USB_Device_Disconnect>:
}
 24a:	15 bc       	out	0x25, r1	; 37
 24c:	10 92 04 01 	sts	0x0104, r1

	/* Indicate streaming audio interface not selected */
	StreamingAudioInterfaceSelected = false;

	/* Indicate USB not ready */
	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
 250:	80 e1       	ldi	r24, 0x10	; 16
 252:	a5 cf       	rjmp	.-182    	; 0x19e <LEDs_SetAllLEDs>

00000254 <EVENT_USB_Device_ConfigurationChanged>:
 254:	81 e0       	ldi	r24, 0x01	; 1
}
 256:	61 e4       	ldi	r22, 0x41	; 65
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
 258:	46 e5       	ldi	r20, 0x56	; 86
 25a:	3b d2       	rcall	.+1142   	; 0x6d2 <Endpoint_ConfigureEndpoint_Prv>
 25c:	88 23       	and	r24, r24

	/* Setup Audio Stream Endpoint */
	ConfigSuccess &= Endpoint_ConfigureEndpoint(AUDIO_STREAM_EPADDR, EP_TYPE_ISOCHRONOUS, AUDIO_STREAM_EPSIZE, 2);

	/* Indicate endpoint configuration success or failure */
	LEDs_SetAllLEDs(ConfigSuccess ? LEDMASK_USB_READY : LEDMASK_USB_ERROR);
 25e:	11 f0       	breq	.+4      	; 0x264 <EVENT_USB_Device_ConfigurationChanged+0x10>
 260:	80 e6       	ldi	r24, 0x60	; 96
 262:	01 c0       	rjmp	.+2      	; 0x266 <EVENT_USB_Device_ConfigurationChanged+0x12>
 264:	80 e9       	ldi	r24, 0x90	; 144
 266:	9b cf       	rjmp	.-202    	; 0x19e <LEDs_SetAllLEDs>

00000268 <EVENT_USB_Device_ControlRequest>:
 268:	0f 93       	push	r16
 26a:	1f 93       	push	r17
}
 26c:	cf 93       	push	r28
/** Event handler for the USB_ControlRequest event. This is used to catch and process control requests sent to
 *  the device from the USB host before passing along unhandled control requests to the library for processing
 *  internally.
 */
void EVENT_USB_Device_ControlRequest(void)
{
 26e:	df 93       	push	r29
 270:	00 d0       	rcall	.+0      	; 0x272 <EVENT_USB_Device_ControlRequest+0xa>
 272:	0f 92       	push	r0
 274:	cd b7       	in	r28, 0x3d	; 61
 276:	de b7       	in	r29, 0x3e	; 62
	/* Process General and Audio specific control requests */
	switch (USB_ControlRequest.bRequest)
 278:	80 91 0e 01 	lds	r24, 0x010E
 27c:	8b 30       	cpi	r24, 0x0B	; 11
 27e:	69 f0       	breq	.+26     	; 0x29a <EVENT_USB_Device_ControlRequest+0x32>
 280:	8c 30       	cpi	r24, 0x0C	; 12
 282:	20 f4       	brcc	.+8      	; 0x28c <EVENT_USB_Device_ControlRequest+0x24>
 284:	81 30       	cpi	r24, 0x01	; 1
 286:	09 f0       	breq	.+2      	; 0x28a <EVENT_USB_Device_ControlRequest+0x22>
 288:	9a c0       	rjmp	.+308    	; 0x3be <EVENT_USB_Device_ControlRequest+0x156>
 28a:	2a c0       	rjmp	.+84     	; 0x2e0 <EVENT_USB_Device_ControlRequest+0x78>
 28c:	81 38       	cpi	r24, 0x81	; 129
 28e:	09 f4       	brne	.+2      	; 0x292 <EVENT_USB_Device_ControlRequest+0x2a>
 290:	72 c0       	rjmp	.+228    	; 0x376 <EVENT_USB_Device_ControlRequest+0x10e>
 292:	8f 3f       	cpi	r24, 0xFF	; 255
 294:	09 f0       	breq	.+2      	; 0x298 <EVENT_USB_Device_ControlRequest+0x30>
 296:	93 c0       	rjmp	.+294    	; 0x3be <EVENT_USB_Device_ControlRequest+0x156>
 298:	16 c0       	rjmp	.+44     	; 0x2c6 <EVENT_USB_Device_ControlRequest+0x5e>
	{
		case REQ_SetInterface:
			/* Set Interface is not handled by the library, as its function is application-specific */
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_INTERFACE))
 29a:	80 91 0d 01 	lds	r24, 0x010D
 29e:	81 30       	cpi	r24, 0x01	; 1
 2a0:	09 f0       	breq	.+2      	; 0x2a4 <EVENT_USB_Device_ControlRequest+0x3c>
 2a2:	8d c0       	rjmp	.+282    	; 0x3be <EVENT_USB_Device_ControlRequest+0x156>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 2a4:	80 91 e8 00 	lds	r24, 0x00E8
 2a8:	87 7f       	andi	r24, 0xF7	; 247
 2aa:	80 93 e8 00 	sts	0x00E8, r24
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
 2ae:	46 d2       	rcall	.+1164   	; 0x73c <Endpoint_ClearStatusStage>
 2b0:	21 e0       	ldi	r18, 0x01	; 1

				/* Check if the host is enabling the audio interface (setting AlternateSetting to 1) */
				StreamingAudioInterfaceSelected = ((USB_ControlRequest.wValue) != 0);
 2b2:	80 91 0f 01 	lds	r24, 0x010F
 2b6:	90 91 10 01 	lds	r25, 0x0110
 2ba:	00 97       	sbiw	r24, 0x00	; 0
 2bc:	09 f4       	brne	.+2      	; 0x2c0 <EVENT_USB_Device_ControlRequest+0x58>
 2be:	20 e0       	ldi	r18, 0x00	; 0
 2c0:	20 93 04 01 	sts	0x0104, r18
 2c4:	7c c0       	rjmp	.+248    	; 0x3be <EVENT_USB_Device_ControlRequest+0x156>
 2c6:	80 91 0d 01 	lds	r24, 0x010D

			break;
		case AUDIO_REQ_GetStatus:
			/* Get Status request can be directed at either the interface or endpoint, neither is currently used
			 * according to the latest USB Audio 1.0 standard, but must be ACKed with no data when requested */
			if ((USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE)) ||
 2ca:	81 52       	subi	r24, 0x21	; 33
 2cc:	82 30       	cpi	r24, 0x02	; 2
 2ce:	08 f0       	brcs	.+2      	; 0x2d2 <EVENT_USB_Device_ControlRequest+0x6a>
 2d0:	76 c0       	rjmp	.+236    	; 0x3be <EVENT_USB_Device_ControlRequest+0x156>
 2d2:	80 91 e8 00 	lds	r24, 0x00E8
 2d6:	87 7f       	andi	r24, 0xF7	; 247
 2d8:	80 93 e8 00 	sts	0x00E8, r24
 2dc:	2f d2       	rcall	.+1118   	; 0x73c <Endpoint_ClearStatusStage>
			    (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_ENDPOINT)))
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
 2de:	6f c0       	rjmp	.+222    	; 0x3be <EVENT_USB_Device_ControlRequest+0x156>
 2e0:	80 91 0d 01 	lds	r24, 0x010D
			}

			break;
		case AUDIO_REQ_SetCurrent:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_ENDPOINT))
 2e4:	82 32       	cpi	r24, 0x22	; 34
 2e6:	09 f0       	breq	.+2      	; 0x2ea <EVENT_USB_Device_ControlRequest+0x82>
 2e8:	6a c0       	rjmp	.+212    	; 0x3be <EVENT_USB_Device_ControlRequest+0x156>
 2ea:	80 91 10 01 	lds	r24, 0x0110
			{
				/* Extract out the relevant request information to get the target Endpoint address and control being set */
				uint8_t EndpointAddress = (uint8_t)USB_ControlRequest.wIndex;
				uint8_t EndpointControl = (USB_ControlRequest.wValue >> 8);
 2ee:	90 91 11 01 	lds	r25, 0x0111

				/* Only handle SET CURRENT requests to the audio endpoint's sample frequency property */
				if ((EndpointAddress == AUDIO_STREAM_EPADDR) && (EndpointControl == AUDIO_EPCONTROL_SamplingFreq))
 2f2:	91 38       	cpi	r25, 0x81	; 129
 2f4:	09 f0       	breq	.+2      	; 0x2f8 <EVENT_USB_Device_ControlRequest+0x90>
 2f6:	63 c0       	rjmp	.+198    	; 0x3be <EVENT_USB_Device_ControlRequest+0x156>
 2f8:	81 30       	cpi	r24, 0x01	; 1
 2fa:	09 f0       	breq	.+2      	; 0x2fe <EVENT_USB_Device_ControlRequest+0x96>
 2fc:	60 c0       	rjmp	.+192    	; 0x3be <EVENT_USB_Device_ControlRequest+0x156>
 2fe:	80 91 e8 00 	lds	r24, 0x00E8
 302:	87 7f       	andi	r24, 0xF7	; 247
 304:	80 93 e8 00 	sts	0x00E8, r24
 308:	ce 01       	movw	r24, r28
 30a:	01 96       	adiw	r24, 0x01	; 1
				{
					uint8_t SampleRate[3];

					Endpoint_ClearSETUP();
					Endpoint_Read_Control_Stream_LE(SampleRate, sizeof(SampleRate));
 30c:	63 e0       	ldi	r22, 0x03	; 3
 30e:	70 e0       	ldi	r23, 0x00	; 0
 310:	3a d1       	rcall	.+628    	; 0x586 <Endpoint_Read_Control_Stream_LE>
 312:	80 91 e8 00 	lds	r24, 0x00E8
 316:	8e 77       	andi	r24, 0x7E	; 126
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 318:	80 93 e8 00 	sts	0x00E8, r24
 31c:	0b 81       	ldd	r16, Y+3	; 0x03
 31e:	10 e0       	ldi	r17, 0x00	; 0
 320:	20 e0       	ldi	r18, 0x00	; 0
					Endpoint_ClearIN();

					/* Set the new sampling frequency to the value given by the host */
					CurrentAudioSampleFrequency = (((uint32_t)SampleRate[2] << 16) | ((uint32_t)SampleRate[1] << 8) | (uint32_t)SampleRate[0]);
 322:	30 e0       	ldi	r19, 0x00	; 0
 324:	98 01       	movw	r18, r16
 326:	11 27       	eor	r17, r17
 328:	00 27       	eor	r16, r16
 32a:	8a 81       	ldd	r24, Y+2	; 0x02
 32c:	90 e0       	ldi	r25, 0x00	; 0
 32e:	a0 e0       	ldi	r26, 0x00	; 0
 330:	b0 e0       	ldi	r27, 0x00	; 0
 332:	ba 2f       	mov	r27, r26
 334:	a9 2f       	mov	r26, r25
 336:	98 2f       	mov	r25, r24
 338:	88 27       	eor	r24, r24
 33a:	08 2b       	or	r16, r24
 33c:	19 2b       	or	r17, r25
 33e:	2a 2b       	or	r18, r26
 340:	3b 2b       	or	r19, r27
 342:	89 81       	ldd	r24, Y+1	; 0x01
 344:	90 e0       	ldi	r25, 0x00	; 0
 346:	a0 e0       	ldi	r26, 0x00	; 0
 348:	b0 e0       	ldi	r27, 0x00	; 0
 34a:	08 2b       	or	r16, r24
 34c:	19 2b       	or	r17, r25
 34e:	2a 2b       	or	r18, r26
 350:	3b 2b       	or	r19, r27
 352:	00 93 00 01 	sts	0x0100, r16
 356:	10 93 01 01 	sts	0x0101, r17
 35a:	20 93 02 01 	sts	0x0102, r18
 35e:	30 93 03 01 	sts	0x0103, r19
 362:	60 e4       	ldi	r22, 0x40	; 64
 364:	72 e4       	ldi	r23, 0x42	; 66
 366:	8f e0       	ldi	r24, 0x0F	; 15

					/* Adjust sample reload timer to the new frequency */
					OCR0A = ((F_CPU / 8 / CurrentAudioSampleFrequency) - 1);
 368:	90 e0       	ldi	r25, 0x00	; 0
 36a:	a9 01       	movw	r20, r18
 36c:	98 01       	movw	r18, r16
 36e:	b2 d4       	rcall	.+2404   	; 0xcd4 <__udivmodsi4>
 370:	21 50       	subi	r18, 0x01	; 1
 372:	27 bd       	out	0x27, r18	; 39
 374:	24 c0       	rjmp	.+72     	; 0x3be <EVENT_USB_Device_ControlRequest+0x156>
 376:	80 91 0d 01 	lds	r24, 0x010D
 37a:	82 3a       	cpi	r24, 0xA2	; 162
 37c:	01 f5       	brne	.+64     	; 0x3be <EVENT_USB_Device_ControlRequest+0x156>
				}
			}

			break;
		case AUDIO_REQ_GetCurrent:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_ENDPOINT))
 37e:	80 91 10 01 	lds	r24, 0x0110
 382:	90 91 11 01 	lds	r25, 0x0111
			{
				/* Extract out the relevant request information to get the target Endpoint address and control being retrieved */
				uint8_t EndpointAddress = (uint8_t)USB_ControlRequest.wIndex;
				uint8_t EndpointControl = (USB_ControlRequest.wValue >> 8);
 386:	91 38       	cpi	r25, 0x81	; 129
 388:	d1 f4       	brne	.+52     	; 0x3be <EVENT_USB_Device_ControlRequest+0x156>

				/* Only handle GET CURRENT requests to the audio endpoint's sample frequency property */
				if ((EndpointAddress == AUDIO_STREAM_EPADDR) && (EndpointControl == AUDIO_EPCONTROL_SamplingFreq))
 38a:	81 30       	cpi	r24, 0x01	; 1
 38c:	c1 f4       	brne	.+48     	; 0x3be <EVENT_USB_Device_ControlRequest+0x156>
 38e:	80 91 00 01 	lds	r24, 0x0100
 392:	90 91 01 01 	lds	r25, 0x0101
				{
					uint8_t SampleRate[3];

					/* Convert the sampling rate value into the 24-bit format the host expects for the property */
					SampleRate[2] = (CurrentAudioSampleFrequency >> 16);
 396:	20 91 02 01 	lds	r18, 0x0102
 39a:	2b 83       	std	Y+3, r18	; 0x03
 39c:	9a 83       	std	Y+2, r25	; 0x02
 39e:	89 83       	std	Y+1, r24	; 0x01
 3a0:	80 91 e8 00 	lds	r24, 0x00E8
					SampleRate[1] = (CurrentAudioSampleFrequency >> 8);
 3a4:	87 7f       	andi	r24, 0xF7	; 247
					SampleRate[0] = (CurrentAudioSampleFrequency &  0xFF);
 3a6:	80 93 e8 00 	sts	0x00E8, r24
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 3aa:	ce 01       	movw	r24, r28
 3ac:	01 96       	adiw	r24, 0x01	; 1
 3ae:	63 e0       	ldi	r22, 0x03	; 3
 3b0:	70 e0       	ldi	r23, 0x00	; 0

					Endpoint_ClearSETUP();
					Endpoint_Write_Control_Stream_LE(SampleRate, sizeof(SampleRate));
 3b2:	8d d0       	rcall	.+282    	; 0x4ce <Endpoint_Write_Control_Stream_LE>
 3b4:	80 91 e8 00 	lds	r24, 0x00E8
 3b8:	8b 77       	andi	r24, 0x7B	; 123
 3ba:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 3be:	0f 90       	pop	r0
 3c0:	0f 90       	pop	r0
 3c2:	0f 90       	pop	r0
 3c4:	df 91       	pop	r29
 3c6:	cf 91       	pop	r28
				}
			}

			break;
	}
}
 3c8:	1f 91       	pop	r17
 3ca:	0f 91       	pop	r16
 3cc:	08 95       	ret

000003ce <__vector_21>:
 3ce:	1f 92       	push	r1
 3d0:	0f 92       	push	r0
 3d2:	0f b6       	in	r0, 0x3f	; 63
 3d4:	0f 92       	push	r0
 3d6:	11 24       	eor	r1, r1

/** ISR to handle the reloading of the data endpoint with the next sample. */
ISR(TIMER0_COMPA_vect, ISR_BLOCK)
{
 3d8:	2f 93       	push	r18
 3da:	8f 93       	push	r24
 3dc:	9f 93       	push	r25
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
 3de:	80 91 e9 00 	lds	r24, 0x00E9
 3e2:	8f 70       	andi	r24, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
 3e4:	90 91 ec 00 	lds	r25, 0x00EC
 3e8:	90 ff       	sbrs	r25, 0
 3ea:	02 c0       	rjmp	.+4      	; 0x3f0 <__vector_21+0x22>
 3ec:	90 e8       	ldi	r25, 0x80	; 128
 3ee:	01 c0       	rjmp	.+2      	; 0x3f2 <__vector_21+0x24>
 3f0:	90 e0       	ldi	r25, 0x00	; 0
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
 3f2:	29 2f       	mov	r18, r25
 3f4:	28 2b       	or	r18, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 3f6:	81 e0       	ldi	r24, 0x01	; 1
 3f8:	80 93 e9 00 	sts	0x00E9, r24
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 3fc:	80 91 e8 00 	lds	r24, 0x00E8

	/* Select the audio stream endpoint */
	Endpoint_SelectEndpoint(AUDIO_STREAM_EPADDR);

	/* Check if the current endpoint can be written to and that the audio interface is enabled */
	if (Endpoint_IsINReady() && StreamingAudioInterfaceSelected)
 400:	80 ff       	sbrs	r24, 0
 402:	2d c0       	rjmp	.+90     	; 0x45e <__vector_21+0x90>
 404:	80 91 04 01 	lds	r24, 0x0104
 408:	88 23       	and	r24, r24
 40a:	49 f1       	breq	.+82     	; 0x45e <__vector_21+0x90>
		#if defined(USE_TEST_TONE)
			static uint8_t SquareWaveSampleCount;
			static int16_t CurrentWaveValue;

			/* In test tone mode, generate a square wave at 1/256 of the sample rate */
			if (SquareWaveSampleCount++ == 0xFF)
 40c:	90 91 05 01 	lds	r25, 0x0105
 410:	89 2f       	mov	r24, r25
 412:	8f 5f       	subi	r24, 0xFF	; 255
 414:	80 93 05 01 	sts	0x0105, r24
 418:	9f 3f       	cpi	r25, 0xFF	; 255
 41a:	51 f4       	brne	.+20     	; 0x430 <__vector_21+0x62>
			  CurrentWaveValue ^= 0x8000;
 41c:	80 91 06 01 	lds	r24, 0x0106
 420:	90 91 07 01 	lds	r25, 0x0107
 424:	80 50       	subi	r24, 0x00	; 0
 426:	90 48       	sbci	r25, 0x80	; 128
 428:	90 93 07 01 	sts	0x0107, r25
 42c:	80 93 06 01 	sts	0x0106, r24
			}

			static inline uint8_t Buttons_GetStatus(void) ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t Buttons_GetStatus(void)
			{
				return ((PINE & BUTTONS_BUTTON1) ^ BUTTONS_BUTTON1);
 430:	8c b1       	in	r24, 0x0c	; 12

			/* Only generate audio if the board button is being pressed */
			AudioSample = (Buttons_GetStatus() & BUTTONS_BUTTON1) ? CurrentWaveValue : 0;
 432:	82 fd       	sbrc	r24, 2
 434:	05 c0       	rjmp	.+10     	; 0x440 <__vector_21+0x72>
 436:	80 91 06 01 	lds	r24, 0x0106
 43a:	90 91 07 01 	lds	r25, 0x0107
 43e:	02 c0       	rjmp	.+4      	; 0x444 <__vector_21+0x76>
 440:	80 e0       	ldi	r24, 0x00	; 0
 442:	90 e0       	ldi	r25, 0x00	; 0
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
 444:	80 93 f1 00 	sts	0x00F1, r24
				UEDATX = (Data >> 8);
 448:	90 93 f1 00 	sts	0x00F1, r25
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
 44c:	80 91 e8 00 	lds	r24, 0x00E8

		/* Write the sample to the buffer */
		Endpoint_Write_16_LE(AudioSample);

		/* Check to see if the bank is now full */
		if (!(Endpoint_IsReadWriteAllowed()))
 450:	85 fd       	sbrc	r24, 5
 452:	05 c0       	rjmp	.+10     	; 0x45e <__vector_21+0x90>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 454:	80 91 e8 00 	lds	r24, 0x00E8
 458:	8e 77       	andi	r24, 0x7E	; 126
 45a:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 45e:	82 2f       	mov	r24, r18
 460:	8f 70       	andi	r24, 0x0F	; 15
 462:	80 93 e9 00 	sts	0x00E9, r24
			Endpoint_ClearIN();
		}
	}

	Endpoint_SelectEndpoint(PrevEndpoint);
}
 466:	9f 91       	pop	r25
 468:	8f 91       	pop	r24
 46a:	2f 91       	pop	r18
 46c:	0f 90       	pop	r0
 46e:	0f be       	out	0x3f, r0	; 63
 470:	0f 90       	pop	r0
 472:	1f 90       	pop	r1
 474:	18 95       	reti

00000476 <CALLBACK_USB_GetDescriptor>:
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
 476:	92 30       	cpi	r25, 0x02	; 2
 478:	29 f0       	breq	.+10     	; 0x484 <CALLBACK_USB_GetDescriptor+0xe>
 47a:	93 30       	cpi	r25, 0x03	; 3
 47c:	41 f0       	breq	.+16     	; 0x48e <CALLBACK_USB_GetDescriptor+0x18>
 47e:	91 30       	cpi	r25, 0x01	; 1
 480:	e9 f4       	brne	.+58     	; 0x4bc <CALLBACK_USB_GetDescriptor+0x46>
 482:	17 c0       	rjmp	.+46     	; 0x4b2 <CALLBACK_USB_GetDescriptor+0x3c>
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
			Size    = sizeof(USB_Descriptor_Configuration_t);
 484:	80 e7       	ldi	r24, 0x70	; 112
 486:	90 e0       	ldi	r25, 0x00	; 0
		case DTYPE_Device:
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
 488:	ee ed       	ldi	r30, 0xDE	; 222
 48a:	f0 e0       	ldi	r31, 0x00	; 0
			Size    = sizeof(USB_Descriptor_Configuration_t);
			break;
 48c:	1b c0       	rjmp	.+54     	; 0x4c4 <CALLBACK_USB_GetDescriptor+0x4e>
		case DTYPE_String:
			switch (DescriptorNumber)
 48e:	81 30       	cpi	r24, 0x01	; 1
 490:	41 f0       	breq	.+16     	; 0x4a2 <CALLBACK_USB_GetDescriptor+0x2c>
 492:	81 30       	cpi	r24, 0x01	; 1
 494:	18 f0       	brcs	.+6      	; 0x49c <CALLBACK_USB_GetDescriptor+0x26>
 496:	82 30       	cpi	r24, 0x02	; 2
 498:	89 f4       	brne	.+34     	; 0x4bc <CALLBACK_USB_GetDescriptor+0x46>
 49a:	06 c0       	rjmp	.+12     	; 0x4a8 <CALLBACK_USB_GetDescriptor+0x32>
			{
				case 0x00:
					Address = &LanguageString;
					Size    = pgm_read_byte(&LanguageString.Header.Size);
 49c:	ea ed       	ldi	r30, 0xDA	; 218
 49e:	f0 e0       	ldi	r31, 0x00	; 0
 4a0:	05 c0       	rjmp	.+10     	; 0x4ac <CALLBACK_USB_GetDescriptor+0x36>
					break;
				case 0x01:
					Address = &ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
 4a2:	e0 ec       	ldi	r30, 0xC0	; 192
 4a4:	f0 e0       	ldi	r31, 0x00	; 0
 4a6:	02 c0       	rjmp	.+4      	; 0x4ac <CALLBACK_USB_GetDescriptor+0x36>
					break;
				case 0x02:
					Address = &ProductString;
					Size    = pgm_read_byte(&ProductString.Header.Size);
 4a8:	e8 e9       	ldi	r30, 0x98	; 152
 4aa:	f0 e0       	ldi	r31, 0x00	; 0
 4ac:	84 91       	lpm	r24, Z
 4ae:	90 e0       	ldi	r25, 0x00	; 0
					break;
 4b0:	09 c0       	rjmp	.+18     	; 0x4c4 <CALLBACK_USB_GetDescriptor+0x4e>

	switch (DescriptorType)
	{
		case DTYPE_Device:
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
 4b2:	82 e1       	ldi	r24, 0x12	; 18
 4b4:	90 e0       	ldi	r25, 0x00	; 0
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
	{
		case DTYPE_Device:
			Address = &DeviceDescriptor;
 4b6:	ee e4       	ldi	r30, 0x4E	; 78
 4b8:	f1 e0       	ldi	r31, 0x01	; 1
 4ba:	04 c0       	rjmp	.+8      	; 0x4c4 <CALLBACK_USB_GetDescriptor+0x4e>
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;
 4bc:	80 e0       	ldi	r24, 0x00	; 0
 4be:	90 e0       	ldi	r25, 0x00	; 0
                                    const void** const DescriptorAddress)
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
 4c0:	e0 e0       	ldi	r30, 0x00	; 0
 4c2:	f0 e0       	ldi	r31, 0x00	; 0
			}

			break;
	}

	*DescriptorAddress = Address;
 4c4:	da 01       	movw	r26, r20
 4c6:	11 96       	adiw	r26, 0x01	; 1
 4c8:	fc 93       	st	X, r31
 4ca:	ee 93       	st	-X, r30
	return Size;
}
 4cc:	08 95       	ret

000004ce <Endpoint_Write_Control_Stream_LE>:
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
 4ce:	20 91 13 01 	lds	r18, 0x0113
 4d2:	30 91 14 01 	lds	r19, 0x0114
 4d6:	26 17       	cp	r18, r22
 4d8:	37 07       	cpc	r19, r23
 4da:	20 f4       	brcc	.+8      	; 0x4e4 <Endpoint_Write_Control_Stream_LE+0x16>
 4dc:	b9 01       	movw	r22, r18
 4de:	fc 01       	movw	r30, r24
 4e0:	20 e0       	ldi	r18, 0x00	; 0
 4e2:	37 c0       	rjmp	.+110    	; 0x552 <Endpoint_Write_Control_Stream_LE+0x84>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
 4e4:	61 15       	cp	r22, r1
 4e6:	71 05       	cpc	r23, r1
 4e8:	d1 f7       	brne	.-12     	; 0x4de <Endpoint_Write_Control_Stream_LE+0x10>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 4ea:	20 91 e8 00 	lds	r18, 0x00E8
 4ee:	2e 77       	andi	r18, 0x7E	; 126
 4f0:	20 93 e8 00 	sts	0x00E8, r18
 4f4:	f4 cf       	rjmp	.-24     	; 0x4de <Endpoint_Write_Control_Stream_LE+0x10>
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
 4f6:	80 91 0c 01 	lds	r24, 0x010C

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
 4fa:	88 23       	and	r24, r24
 4fc:	09 f4       	brne	.+2      	; 0x500 <Endpoint_Write_Control_Stream_LE+0x32>
 4fe:	3f c0       	rjmp	.+126    	; 0x57e <Endpoint_Write_Control_Stream_LE+0xb0>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
 500:	85 30       	cpi	r24, 0x05	; 5
 502:	c9 f1       	breq	.+114    	; 0x576 <Endpoint_Write_Control_Stream_LE+0xa8>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 504:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
 508:	83 fd       	sbrc	r24, 3
 50a:	37 c0       	rjmp	.+110    	; 0x57a <Endpoint_Write_Control_Stream_LE+0xac>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 50c:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
 510:	82 fd       	sbrc	r24, 2
 512:	2b c0       	rjmp	.+86     	; 0x56a <Endpoint_Write_Control_Stream_LE+0x9c>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 514:	80 91 e8 00 	lds	r24, 0x00E8
		  break;

		if (Endpoint_IsINReady())
 518:	80 ff       	sbrs	r24, 0
 51a:	1b c0       	rjmp	.+54     	; 0x552 <Endpoint_Write_Control_Stream_LE+0x84>
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
 51c:	80 91 f2 00 	lds	r24, 0x00F2
 520:	90 91 f3 00 	lds	r25, 0x00F3
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
 524:	06 c0       	rjmp	.+12     	; 0x532 <Endpoint_Write_Control_Stream_LE+0x64>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
 526:	21 91       	ld	r18, Z+
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
 528:	20 93 f1 00 	sts	0x00F1, r18
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
 52c:	61 50       	subi	r22, 0x01	; 1
 52e:	70 40       	sbci	r23, 0x00	; 0
				BytesInEndpoint++;
 530:	01 96       	adiw	r24, 0x01	; 1

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
 532:	61 15       	cp	r22, r1
 534:	71 05       	cpc	r23, r1
 536:	19 f0       	breq	.+6      	; 0x53e <Endpoint_Write_Control_Stream_LE+0x70>
 538:	88 30       	cpi	r24, 0x08	; 8
 53a:	91 05       	cpc	r25, r1
 53c:	a0 f3       	brcs	.-24     	; 0x526 <Endpoint_Write_Control_Stream_LE+0x58>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
 53e:	21 e0       	ldi	r18, 0x01	; 1
 540:	88 30       	cpi	r24, 0x08	; 8
 542:	91 05       	cpc	r25, r1
 544:	09 f0       	breq	.+2      	; 0x548 <Endpoint_Write_Control_Stream_LE+0x7a>
 546:	20 e0       	ldi	r18, 0x00	; 0
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 548:	80 91 e8 00 	lds	r24, 0x00E8
 54c:	8e 77       	andi	r24, 0x7E	; 126
 54e:	80 93 e8 00 	sts	0x00E8, r24
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
 552:	61 15       	cp	r22, r1
 554:	71 05       	cpc	r23, r1
 556:	79 f6       	brne	.-98     	; 0x4f6 <Endpoint_Write_Control_Stream_LE+0x28>
 558:	22 23       	and	r18, r18
 55a:	69 f6       	brne	.-102    	; 0x4f6 <Endpoint_Write_Control_Stream_LE+0x28>
 55c:	06 c0       	rjmp	.+12     	; 0x56a <Endpoint_Write_Control_Stream_LE+0x9c>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
 55e:	80 91 0c 01 	lds	r24, 0x010C

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
 562:	88 23       	and	r24, r24
 564:	61 f0       	breq	.+24     	; 0x57e <Endpoint_Write_Control_Stream_LE+0xb0>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
 566:	85 30       	cpi	r24, 0x05	; 5
 568:	61 f0       	breq	.+24     	; 0x582 <Endpoint_Write_Control_Stream_LE+0xb4>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 56a:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
 56e:	82 ff       	sbrs	r24, 2
 570:	f6 cf       	rjmp	.-20     	; 0x55e <Endpoint_Write_Control_Stream_LE+0x90>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
 572:	80 e0       	ldi	r24, 0x00	; 0
 574:	08 95       	ret
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
 576:	83 e0       	ldi	r24, 0x03	; 3
 578:	08 95       	ret
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
 57a:	81 e0       	ldi	r24, 0x01	; 1
 57c:	08 95       	ret
	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
 57e:	82 e0       	ldi	r24, 0x02	; 2
 580:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
 582:	83 e0       	ldi	r24, 0x03	; 3
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
 584:	08 95       	ret

00000586 <Endpoint_Read_Control_Stream_LE>:
uint8_t TEMPLATE_FUNC_NAME (void* const Buffer,
                            uint16_t Length)
{
	uint8_t* DataStream = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));

	if (!(Length))
 586:	61 15       	cp	r22, r1
 588:	71 05       	cpc	r23, r1
 58a:	29 f4       	brne	.+10     	; 0x596 <Endpoint_Read_Control_Stream_LE+0x10>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 58c:	20 91 e8 00 	lds	r18, 0x00E8
 590:	2b 77       	andi	r18, 0x7B	; 123
 592:	20 93 e8 00 	sts	0x00E8, r18

#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (void* const Buffer,
                            uint16_t Length)
{
 596:	38 2f       	mov	r19, r24
 598:	29 2f       	mov	r18, r25
 59a:	26 c0       	rjmp	.+76     	; 0x5e8 <Endpoint_Read_Control_Stream_LE+0x62>
	if (!(Length))
	  Endpoint_ClearOUT();

	while (Length)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
 59c:	80 91 0c 01 	lds	r24, 0x010C

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
 5a0:	88 23       	and	r24, r24
 5a2:	b1 f1       	breq	.+108    	; 0x610 <Endpoint_Read_Control_Stream_LE+0x8a>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
 5a4:	85 30       	cpi	r24, 0x05	; 5
 5a6:	81 f1       	breq	.+96     	; 0x608 <Endpoint_Read_Control_Stream_LE+0x82>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 5a8:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
 5ac:	83 fd       	sbrc	r24, 3
 5ae:	2e c0       	rjmp	.+92     	; 0x60c <Endpoint_Read_Control_Stream_LE+0x86>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 5b0:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;

		if (Endpoint_IsOUTReceived())
 5b4:	82 ff       	sbrs	r24, 2
 5b6:	f2 cf       	rjmp	.-28     	; 0x59c <Endpoint_Read_Control_Stream_LE+0x16>
 5b8:	e3 2f       	mov	r30, r19
 5ba:	f2 2f       	mov	r31, r18
 5bc:	08 c0       	rjmp	.+16     	; 0x5ce <Endpoint_Read_Control_Stream_LE+0x48>
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
 5be:	80 91 f1 00 	lds	r24, 0x00F1
		{
			while (Length && Endpoint_BytesInEndpoint())
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
 5c2:	81 93       	st	Z+, r24
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
 5c4:	3e 2f       	mov	r19, r30
 5c6:	2f 2f       	mov	r18, r31
				Length--;
 5c8:	61 50       	subi	r22, 0x01	; 1
 5ca:	70 40       	sbci	r23, 0x00	; 0
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;

		if (Endpoint_IsOUTReceived())
		{
			while (Length && Endpoint_BytesInEndpoint())
 5cc:	41 f0       	breq	.+16     	; 0x5de <Endpoint_Read_Control_Stream_LE+0x58>
 5ce:	3e 2f       	mov	r19, r30
 5d0:	2f 2f       	mov	r18, r31
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
 5d2:	80 91 f2 00 	lds	r24, 0x00F2
 5d6:	90 91 f3 00 	lds	r25, 0x00F3
 5da:	00 97       	sbiw	r24, 0x00	; 0
 5dc:	81 f7       	brne	.-32     	; 0x5be <Endpoint_Read_Control_Stream_LE+0x38>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 5de:	80 91 e8 00 	lds	r24, 0x00E8
 5e2:	8b 77       	andi	r24, 0x7B	; 123
 5e4:	80 93 e8 00 	sts	0x00E8, r24
	uint8_t* DataStream = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));

	if (!(Length))
	  Endpoint_ClearOUT();

	while (Length)
 5e8:	61 15       	cp	r22, r1
 5ea:	71 05       	cpc	r23, r1
 5ec:	b9 f6       	brne	.-82     	; 0x59c <Endpoint_Read_Control_Stream_LE+0x16>
 5ee:	06 c0       	rjmp	.+12     	; 0x5fc <Endpoint_Read_Control_Stream_LE+0x76>
		}
	}

	while (!(Endpoint_IsINReady()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
 5f0:	80 91 0c 01 	lds	r24, 0x010C

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
 5f4:	88 23       	and	r24, r24
 5f6:	61 f0       	breq	.+24     	; 0x610 <Endpoint_Read_Control_Stream_LE+0x8a>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
 5f8:	85 30       	cpi	r24, 0x05	; 5
 5fa:	61 f0       	breq	.+24     	; 0x614 <Endpoint_Read_Control_Stream_LE+0x8e>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 5fc:	80 91 e8 00 	lds	r24, 0x00E8

			Endpoint_ClearOUT();
		}
	}

	while (!(Endpoint_IsINReady()))
 600:	80 ff       	sbrs	r24, 0
 602:	f6 cf       	rjmp	.-20     	; 0x5f0 <Endpoint_Read_Control_Stream_LE+0x6a>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
 604:	80 e0       	ldi	r24, 0x00	; 0
 606:	08 95       	ret
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
 608:	83 e0       	ldi	r24, 0x03	; 3
 60a:	08 95       	ret
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
 60c:	81 e0       	ldi	r24, 0x01	; 1
 60e:	08 95       	ret
	while (!(Endpoint_IsINReady()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
 610:	82 e0       	ldi	r24, 0x02	; 2
 612:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
 614:	83 e0       	ldi	r24, 0x03	; 3
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
 616:	08 95       	ret

00000618 <Endpoint_Write_Control_PStream_LE>:
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
 618:	20 91 13 01 	lds	r18, 0x0113
 61c:	30 91 14 01 	lds	r19, 0x0114
 620:	26 17       	cp	r18, r22
 622:	37 07       	cpc	r19, r23
 624:	20 f4       	brcc	.+8      	; 0x62e <Endpoint_Write_Control_PStream_LE+0x16>
 626:	b9 01       	movw	r22, r18
 628:	fc 01       	movw	r30, r24
 62a:	20 e0       	ldi	r18, 0x00	; 0
 62c:	38 c0       	rjmp	.+112    	; 0x69e <Endpoint_Write_Control_PStream_LE+0x86>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
 62e:	61 15       	cp	r22, r1
 630:	71 05       	cpc	r23, r1
 632:	d1 f7       	brne	.-12     	; 0x628 <Endpoint_Write_Control_PStream_LE+0x10>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 634:	20 91 e8 00 	lds	r18, 0x00E8
 638:	2e 77       	andi	r18, 0x7E	; 126
 63a:	20 93 e8 00 	sts	0x00E8, r18
 63e:	f4 cf       	rjmp	.-24     	; 0x628 <Endpoint_Write_Control_PStream_LE+0x10>
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
 640:	80 91 0c 01 	lds	r24, 0x010C

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
 644:	88 23       	and	r24, r24
 646:	09 f4       	brne	.+2      	; 0x64a <Endpoint_Write_Control_PStream_LE+0x32>
 648:	40 c0       	rjmp	.+128    	; 0x6ca <Endpoint_Write_Control_PStream_LE+0xb2>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
 64a:	85 30       	cpi	r24, 0x05	; 5
 64c:	d1 f1       	breq	.+116    	; 0x6c2 <Endpoint_Write_Control_PStream_LE+0xaa>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 64e:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
 652:	83 fd       	sbrc	r24, 3
 654:	38 c0       	rjmp	.+112    	; 0x6c6 <Endpoint_Write_Control_PStream_LE+0xae>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 656:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
 65a:	82 fd       	sbrc	r24, 2
 65c:	2c c0       	rjmp	.+88     	; 0x6b6 <Endpoint_Write_Control_PStream_LE+0x9e>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 65e:	80 91 e8 00 	lds	r24, 0x00E8
		  break;

		if (Endpoint_IsINReady())
 662:	80 ff       	sbrs	r24, 0
 664:	1c c0       	rjmp	.+56     	; 0x69e <Endpoint_Write_Control_PStream_LE+0x86>
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
 666:	80 91 f2 00 	lds	r24, 0x00F2
 66a:	90 91 f3 00 	lds	r25, 0x00F3
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
 66e:	07 c0       	rjmp	.+14     	; 0x67e <Endpoint_Write_Control_PStream_LE+0x66>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
 670:	24 91       	lpm	r18, Z
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
 672:	20 93 f1 00 	sts	0x00F1, r18
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
 676:	31 96       	adiw	r30, 0x01	; 1
				Length--;
 678:	61 50       	subi	r22, 0x01	; 1
 67a:	70 40       	sbci	r23, 0x00	; 0
				BytesInEndpoint++;
 67c:	01 96       	adiw	r24, 0x01	; 1

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
 67e:	61 15       	cp	r22, r1
 680:	71 05       	cpc	r23, r1
 682:	19 f0       	breq	.+6      	; 0x68a <Endpoint_Write_Control_PStream_LE+0x72>
 684:	88 30       	cpi	r24, 0x08	; 8
 686:	91 05       	cpc	r25, r1
 688:	98 f3       	brcs	.-26     	; 0x670 <Endpoint_Write_Control_PStream_LE+0x58>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
 68a:	21 e0       	ldi	r18, 0x01	; 1
 68c:	88 30       	cpi	r24, 0x08	; 8
 68e:	91 05       	cpc	r25, r1
 690:	09 f0       	breq	.+2      	; 0x694 <Endpoint_Write_Control_PStream_LE+0x7c>
 692:	20 e0       	ldi	r18, 0x00	; 0
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 694:	80 91 e8 00 	lds	r24, 0x00E8
 698:	8e 77       	andi	r24, 0x7E	; 126
 69a:	80 93 e8 00 	sts	0x00E8, r24
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
 69e:	61 15       	cp	r22, r1
 6a0:	71 05       	cpc	r23, r1
 6a2:	71 f6       	brne	.-100    	; 0x640 <Endpoint_Write_Control_PStream_LE+0x28>
 6a4:	22 23       	and	r18, r18
 6a6:	61 f6       	brne	.-104    	; 0x640 <Endpoint_Write_Control_PStream_LE+0x28>
 6a8:	06 c0       	rjmp	.+12     	; 0x6b6 <Endpoint_Write_Control_PStream_LE+0x9e>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
 6aa:	80 91 0c 01 	lds	r24, 0x010C

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
 6ae:	88 23       	and	r24, r24
 6b0:	61 f0       	breq	.+24     	; 0x6ca <Endpoint_Write_Control_PStream_LE+0xb2>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
 6b2:	85 30       	cpi	r24, 0x05	; 5
 6b4:	61 f0       	breq	.+24     	; 0x6ce <Endpoint_Write_Control_PStream_LE+0xb6>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 6b6:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
 6ba:	82 ff       	sbrs	r24, 2
 6bc:	f6 cf       	rjmp	.-20     	; 0x6aa <Endpoint_Write_Control_PStream_LE+0x92>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
 6be:	80 e0       	ldi	r24, 0x00	; 0
 6c0:	08 95       	ret
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
 6c2:	83 e0       	ldi	r24, 0x03	; 3
 6c4:	08 95       	ret
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
 6c6:	81 e0       	ldi	r24, 0x01	; 1
 6c8:	08 95       	ret
	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
 6ca:	82 e0       	ldi	r24, 0x02	; 2
 6cc:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
 6ce:	83 e0       	ldi	r24, 0x03	; 3
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
 6d0:	08 95       	ret

000006d2 <Endpoint_ConfigureEndpoint_Prv>:
	UECFG0X = UECFG0XData;
	UECFG1X = UECFG1XData;

	return Endpoint_IsConfigured();
#else
	for (uint8_t EPNum = Number; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
 6d2:	98 2f       	mov	r25, r24
 6d4:	2a c0       	rjmp	.+84     	; 0x72a <Endpoint_ConfigureEndpoint_Prv+0x58>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 6d6:	90 93 e9 00 	sts	0x00E9, r25
		uint8_t UECFG1XTemp;
		uint8_t UEIENXTemp;

		Endpoint_SelectEndpoint(EPNum);

		if (EPNum == Number)
 6da:	98 17       	cp	r25, r24
 6dc:	39 f0       	breq	.+14     	; 0x6ec <Endpoint_ConfigureEndpoint_Prv+0x1a>
			UECFG1XTemp = UECFG1XData;
			UEIENXTemp  = 0;
		}
		else
		{
			UECFG0XTemp = UECFG0X;
 6de:	70 91 ec 00 	lds	r23, 0x00EC
			UECFG1XTemp = UECFG1X;
 6e2:	20 91 ed 00 	lds	r18, 0x00ED
			UEIENXTemp  = UEIENX;
 6e6:	50 91 f0 00 	lds	r21, 0x00F0
 6ea:	03 c0       	rjmp	.+6      	; 0x6f2 <Endpoint_ConfigureEndpoint_Prv+0x20>
		Endpoint_SelectEndpoint(EPNum);

		if (EPNum == Number)
		{
			UECFG0XTemp = UECFG0XData;
			UECFG1XTemp = UECFG1XData;
 6ec:	24 2f       	mov	r18, r20

		Endpoint_SelectEndpoint(EPNum);

		if (EPNum == Number)
		{
			UECFG0XTemp = UECFG0XData;
 6ee:	76 2f       	mov	r23, r22
			UECFG1XTemp = UECFG1XData;
			UEIENXTemp  = 0;
 6f0:	50 e0       	ldi	r21, 0x00	; 0
			UECFG0XTemp = UECFG0X;
			UECFG1XTemp = UECFG1X;
			UEIENXTemp  = UEIENX;
		}

		if (!(UECFG1XTemp & (1 << ALLOC)))
 6f2:	21 ff       	sbrs	r18, 1
 6f4:	19 c0       	rjmp	.+50     	; 0x728 <Endpoint_ConfigureEndpoint_Prv+0x56>
			 *  to and from a host.
			 */
			static inline void Endpoint_DisableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_DisableEndpoint(void)
			{
				UECONX &= ~(1 << EPEN);
 6f6:	30 91 eb 00 	lds	r19, 0x00EB
 6fa:	3e 7f       	andi	r19, 0xFE	; 254
 6fc:	30 93 eb 00 	sts	0x00EB, r19
		  continue;

		Endpoint_DisableEndpoint();
		UECFG1X &= ~(1 << ALLOC);
 700:	30 91 ed 00 	lds	r19, 0x00ED
 704:	3d 7f       	andi	r19, 0xFD	; 253
 706:	30 93 ed 00 	sts	0x00ED, r19
			 *  \note Endpoints must first be configured properly via \ref Endpoint_ConfigureEndpoint().
			 */
			static inline void Endpoint_EnableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_EnableEndpoint(void)
			{
				UECONX |= (1 << EPEN);
 70a:	30 91 eb 00 	lds	r19, 0x00EB
 70e:	31 60       	ori	r19, 0x01	; 1
 710:	30 93 eb 00 	sts	0x00EB, r19

		Endpoint_EnableEndpoint();
		UECFG0X = UECFG0XTemp;
 714:	70 93 ec 00 	sts	0x00EC, r23
		UECFG1X = UECFG1XTemp;
 718:	20 93 ed 00 	sts	0x00ED, r18
		UEIENX  = UEIENXTemp;
 71c:	50 93 f0 00 	sts	0x00F0, r21
			 *  \return Boolean \c true if the currently selected endpoint has been configured, \c false otherwise.
			 */
			static inline bool Endpoint_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsConfigured(void)
			{
				return ((UESTA0X & (1 << CFGOK)) ? true : false);
 720:	20 91 ee 00 	lds	r18, 0x00EE

		if (!(Endpoint_IsConfigured()))
 724:	27 ff       	sbrs	r18, 7
 726:	08 c0       	rjmp	.+16     	; 0x738 <Endpoint_ConfigureEndpoint_Prv+0x66>
	UECFG0X = UECFG0XData;
	UECFG1X = UECFG1XData;

	return Endpoint_IsConfigured();
#else
	for (uint8_t EPNum = Number; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
 728:	9f 5f       	subi	r25, 0xFF	; 255
 72a:	97 30       	cpi	r25, 0x07	; 7
 72c:	a0 f2       	brcs	.-88     	; 0x6d6 <Endpoint_ConfigureEndpoint_Prv+0x4>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 72e:	8f 70       	andi	r24, 0x0F	; 15
 730:	80 93 e9 00 	sts	0x00E9, r24
		if (!(Endpoint_IsConfigured()))
		  return false;
	}

	Endpoint_SelectEndpoint(Number);
	return true;
 734:	81 e0       	ldi	r24, 0x01	; 1
 736:	08 95       	ret
		UECFG0X = UECFG0XTemp;
		UECFG1X = UECFG1XTemp;
		UEIENX  = UEIENXTemp;

		if (!(Endpoint_IsConfigured()))
		  return false;
 738:	80 e0       	ldi	r24, 0x00	; 0
	}

	Endpoint_SelectEndpoint(Number);
	return true;
#endif
}
 73a:	08 95       	ret

0000073c <Endpoint_ClearStatusStage>:
	}
}

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
 73c:	80 91 0d 01 	lds	r24, 0x010D
 740:	87 ff       	sbrs	r24, 7
 742:	13 c0       	rjmp	.+38     	; 0x76a <Endpoint_ClearStatusStage+0x2e>
 744:	04 c0       	rjmp	.+8      	; 0x74e <Endpoint_ClearStatusStage+0x12>
	{
		while (!(Endpoint_IsOUTReceived()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
 746:	80 91 0c 01 	lds	r24, 0x010C
 74a:	88 23       	and	r24, r24
 74c:	b9 f0       	breq	.+46     	; 0x77c <Endpoint_ClearStatusStage+0x40>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 74e:	80 91 e8 00 	lds	r24, 0x00E8

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
	{
		while (!(Endpoint_IsOUTReceived()))
 752:	82 ff       	sbrs	r24, 2
 754:	f8 cf       	rjmp	.-16     	; 0x746 <Endpoint_ClearStatusStage+0xa>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 756:	80 91 e8 00 	lds	r24, 0x00E8
 75a:	8b 77       	andi	r24, 0x7B	; 123
 75c:	80 93 e8 00 	sts	0x00E8, r24
 760:	08 95       	ret
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
 762:	80 91 0c 01 	lds	r24, 0x010C
 766:	88 23       	and	r24, r24
 768:	49 f0       	breq	.+18     	; 0x77c <Endpoint_ClearStatusStage+0x40>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 76a:	80 91 e8 00 	lds	r24, 0x00E8

		Endpoint_ClearOUT();
	}
	else
	{
		while (!(Endpoint_IsINReady()))
 76e:	80 ff       	sbrs	r24, 0
 770:	f8 cf       	rjmp	.-16     	; 0x762 <Endpoint_ClearStatusStage+0x26>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 772:	80 91 e8 00 	lds	r24, 0x00E8
 776:	8e 77       	andi	r24, 0x7E	; 126
 778:	80 93 e8 00 	sts	0x00E8, r24
 77c:	08 95       	ret

0000077e <USB_ResetInterface>:

	USB_IsInitialized = false;
}

void USB_ResetInterface(void)
{
 77e:	0f 93       	push	r16
 780:	1f 93       	push	r17
 782:	cf 93       	push	r28
 784:	df 93       	push	r29
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
 786:	4e d0       	rcall	.+156    	; 0x824 <USB_INT_DisableAllInterrupts>
 788:	55 d0       	rcall	.+170    	; 0x834 <USB_INT_ClearAllInterrupts>
	USB_INT_ClearAllInterrupts();
 78a:	c8 ed       	ldi	r28, 0xD8	; 216
 78c:	d0 e0       	ldi	r29, 0x00	; 0
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
 78e:	88 81       	ld	r24, Y
 790:	8f 77       	andi	r24, 0x7F	; 127
 792:	88 83       	st	Y, r24
 794:	88 81       	ld	r24, Y
 796:	80 68       	ori	r24, 0x80	; 128
				USBCON |=  (1 << USBE);
 798:	88 83       	st	Y, r24
 79a:	88 81       	ld	r24, Y
 79c:	8f 7d       	andi	r24, 0xDF	; 223
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
 79e:	88 83       	st	Y, r24
 7a0:	e7 ed       	ldi	r30, 0xD7	; 215
 7a2:	f0 e0       	ldi	r31, 0x00	; 0

	if (USB_CurrentMode == USB_MODE_Device)
	{
		#if defined(USB_CAN_BE_DEVICE)
		#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
		UHWCON |=  (1 << UIMOD);
 7a4:	80 81       	ld	r24, Z
 7a6:	80 68       	ori	r24, 0x80	; 128
 7a8:	80 83       	st	Z, r24
 7aa:	19 bc       	out	0x29, r1	; 41
 7ac:	10 92 0c 01 	sts	0x010C, r1
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState                 = DEVICE_STATE_Unattached;
 7b0:	10 92 08 01 	sts	0x0108, r1
	USB_Device_ConfigurationNumber  = 0;
 7b4:	10 92 0a 01 	sts	0x010A, r1

	#if !defined(NO_DEVICE_REMOTE_WAKEUP)
	USB_Device_RemoteWakeupEnabled  = false;
 7b8:	10 92 09 01 	sts	0x0109, r1
	#endif

	#if !defined(NO_DEVICE_SELF_POWER)
	USB_Device_CurrentlySelfPowered = false;
 7bc:	00 ee       	ldi	r16, 0xE0	; 224
 7be:	10 e0       	ldi	r17, 0x00	; 0
			}

			static inline void USB_Device_SetFullSpeed(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetFullSpeed(void)
			{
				UDCON &= ~(1 << LSM);
 7c0:	f8 01       	movw	r30, r16
 7c2:	80 81       	ld	r24, Z
 7c4:	8b 7f       	andi	r24, 0xFB	; 251
 7c6:	80 83       	st	Z, r24
 7c8:	88 81       	ld	r24, Y
 7ca:	81 60       	ori	r24, 0x01	; 1
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBCON |= (1 << VBUSTE);
 7cc:	88 83       	st	Y, r24
 7ce:	80 e0       	ldi	r24, 0x00	; 0
 7d0:	60 e0       	ldi	r22, 0x00	; 0
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
 7d2:	42 e0       	ldi	r20, 0x02	; 2
 7d4:	7e df       	rcall	.-260    	; 0x6d2 <Endpoint_ConfigureEndpoint_Prv>
 7d6:	e1 ee       	ldi	r30, 0xE1	; 225
 7d8:	f0 e0       	ldi	r31, 0x00	; 0
 7da:	80 81       	ld	r24, Z
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
 7dc:	8e 7f       	andi	r24, 0xFE	; 254
 7de:	80 83       	st	Z, r24
 7e0:	e2 ee       	ldi	r30, 0xE2	; 226
 7e2:	f0 e0       	ldi	r31, 0x00	; 0
 7e4:	80 81       	ld	r24, Z
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
 7e6:	81 60       	ori	r24, 0x01	; 1
 7e8:	80 83       	st	Z, r24
 7ea:	80 81       	ld	r24, Z
 7ec:	88 60       	ori	r24, 0x08	; 8
 7ee:	80 83       	st	Z, r24
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
 7f0:	f8 01       	movw	r30, r16
 7f2:	80 81       	ld	r24, Z
 7f4:	8e 7f       	andi	r24, 0xFE	; 254
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
 7f6:	80 83       	st	Z, r24
 7f8:	88 81       	ld	r24, Y
 7fa:	80 61       	ori	r24, 0x10	; 16
 7fc:	88 83       	st	Y, r24

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON |=  (1 << OTGPADE);
 7fe:	df 91       	pop	r29
 800:	cf 91       	pop	r28
 802:	1f 91       	pop	r17
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
 804:	0f 91       	pop	r16
 806:	08 95       	ret

00000808 <USB_Init>:
 808:	e8 ed       	ldi	r30, 0xD8	; 216
 80a:	f0 e0       	ldi	r31, 0x00	; 0
 80c:	80 81       	ld	r24, Z
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON &= ~(1 << OTGPADE);
 80e:	8f 7e       	andi	r24, 0xEF	; 239
 810:	80 83       	st	Z, r24

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON |=  (1 << UVREGE);
 812:	e7 ed       	ldi	r30, 0xD7	; 215
 814:	f0 e0       	ldi	r31, 0x00	; 0
 816:	80 81       	ld	r24, Z
 818:	81 60       	ori	r24, 0x01	; 1
 81a:	80 83       	st	Z, r24
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
 81c:	81 e0       	ldi	r24, 0x01	; 1
 81e:	80 93 0b 01 	sts	0x010B, r24

	USB_ResetInterface();
 822:	ad cf       	rjmp	.-166    	; 0x77e <USB_ResetInterface>

00000824 <USB_INT_DisableAllInterrupts>:
#include "../USBInterrupt.h"

void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
 824:	e8 ed       	ldi	r30, 0xD8	; 216
 826:	f0 e0       	ldi	r31, 0x00	; 0
 828:	80 81       	ld	r24, Z
 82a:	8c 7f       	andi	r24, 0xFC	; 252
 82c:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
 82e:	10 92 e2 00 	sts	0x00E2, r1
	#endif
}
 832:	08 95       	ret

00000834 <USB_INT_ClearAllInterrupts>:

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
 834:	10 92 da 00 	sts	0x00DA, r1
	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
 838:	10 92 e1 00 	sts	0x00E1, r1
	#endif
}
 83c:	08 95       	ret

0000083e <__vector_10>:

ISR(USB_GEN_vect, ISR_BLOCK)
{
 83e:	1f 92       	push	r1
 840:	0f 92       	push	r0
 842:	0f b6       	in	r0, 0x3f	; 63
 844:	0f 92       	push	r0
 846:	0b b6       	in	r0, 0x3b	; 59
 848:	0f 92       	push	r0
 84a:	11 24       	eor	r1, r1
 84c:	2f 93       	push	r18
 84e:	3f 93       	push	r19
 850:	4f 93       	push	r20
 852:	5f 93       	push	r21
 854:	6f 93       	push	r22
 856:	7f 93       	push	r23
 858:	8f 93       	push	r24
 85a:	9f 93       	push	r25
 85c:	af 93       	push	r26
 85e:	bf 93       	push	r27
 860:	ef 93       	push	r30
 862:	ff 93       	push	r31
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
					case USB_INT_SOFI:
						return (UDINT  & (1 << SOFI));
 864:	80 91 e1 00 	lds	r24, 0x00E1
	#if defined(USB_CAN_BE_DEVICE)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
 868:	82 ff       	sbrs	r24, 2
 86a:	0a c0       	rjmp	.+20     	; 0x880 <__vector_10+0x42>
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
					case USB_INT_SOFI:
						return (UDIEN  & (1 << SOFE));
 86c:	80 91 e2 00 	lds	r24, 0x00E2
 870:	82 ff       	sbrs	r24, 2
 872:	06 c0       	rjmp	.+12     	; 0x880 <__vector_10+0x42>
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
						break;
					case USB_INT_SOFI:
						UDINT  &= ~(1 << SOFI);
 874:	80 91 e1 00 	lds	r24, 0x00E1
 878:	8b 7f       	andi	r24, 0xFB	; 251
 87a:	80 93 e1 00 	sts	0x00E1, r24
	{
		USB_INT_Clear(USB_INT_SOFI);

		EVENT_USB_Device_StartOfFrame();
 87e:	0d d2       	rcall	.+1050   	; 0xc9a <USB_Event_Stub>
 880:	80 91 da 00 	lds	r24, 0x00DA
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBINT & (1 << VBUSTI));
 884:	80 ff       	sbrs	r24, 0
	}
	#endif

	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	if (USB_INT_HasOccurred(USB_INT_VBUSTI) && USB_INT_IsEnabled(USB_INT_VBUSTI))
 886:	1d c0       	rjmp	.+58     	; 0x8c2 <__vector_10+0x84>
 888:	80 91 d8 00 	lds	r24, 0x00D8
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBCON & (1 << VBUSTE));
 88c:	80 ff       	sbrs	r24, 0
 88e:	19 c0       	rjmp	.+50     	; 0x8c2 <__vector_10+0x84>
 890:	80 91 da 00 	lds	r24, 0x00DA
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBINT &= ~(1 << VBUSTI);
 894:	8e 7f       	andi	r24, 0xFE	; 254
 896:	80 93 da 00 	sts	0x00DA, r24
 89a:	80 91 d9 00 	lds	r24, 0x00D9
				 *  \return Boolean \c true if the VBUS line is currently detecting power from a host, \c false otherwise.
				 */
				static inline bool USB_VBUS_GetStatus(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
				static inline bool USB_VBUS_GetStatus(void)
				{
					return ((USBSTA & (1 << VBUS)) ? true : false);
 89e:	80 ff       	sbrs	r24, 0
	{
		USB_INT_Clear(USB_INT_VBUSTI);

		if (USB_VBUS_GetStatus())
 8a0:	0c c0       	rjmp	.+24     	; 0x8ba <__vector_10+0x7c>
 8a2:	8c e0       	ldi	r24, 0x0C	; 12

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
 8a4:	89 bd       	out	0x29, r24	; 41
 8a6:	8e e0       	ldi	r24, 0x0E	; 14
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
 8a8:	89 bd       	out	0x29, r24	; 41
 8aa:	09 b4       	in	r0, 0x29	; 41
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			{
				USB_PLL_On();
				while (!(USB_PLL_IsReady()));
 8ac:	00 fe       	sbrs	r0, 0
 8ae:	fd cf       	rjmp	.-6      	; 0x8aa <__vector_10+0x6c>
 8b0:	81 e0       	ldi	r24, 0x01	; 1
			}

			USB_DeviceState = DEVICE_STATE_Powered;
 8b2:	80 93 0c 01 	sts	0x010C, r24
 8b6:	b0 dc       	rcall	.-1696   	; 0x218 <EVENT_USB_Device_Connect>
			EVENT_USB_Device_Connect();
 8b8:	04 c0       	rjmp	.+8      	; 0x8c2 <__vector_10+0x84>
 8ba:	19 bc       	out	0x29, r1	; 41
 8bc:	10 92 0c 01 	sts	0x010C, r1
		else
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			  USB_PLL_Off();

			USB_DeviceState = DEVICE_STATE_Unattached;
 8c0:	c4 dc       	rcall	.-1656   	; 0x24a <EVENT_USB_Device_Disconnect>
 8c2:	80 91 e1 00 	lds	r24, 0x00E1
			EVENT_USB_Device_Disconnect();
 8c6:	80 ff       	sbrs	r24, 0
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
 8c8:	18 c0       	rjmp	.+48     	; 0x8fa <__vector_10+0xbc>
 8ca:	80 91 e2 00 	lds	r24, 0x00E2
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
 8ce:	80 ff       	sbrs	r24, 0
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
 8d0:	14 c0       	rjmp	.+40     	; 0x8fa <__vector_10+0xbc>
 8d2:	80 91 e2 00 	lds	r24, 0x00E2
 8d6:	8e 7f       	andi	r24, 0xFE	; 254
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
 8d8:	80 93 e2 00 	sts	0x00E2, r24
 8dc:	80 91 e2 00 	lds	r24, 0x00E2
 8e0:	80 61       	ori	r24, 0x10	; 16
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
 8e2:	80 93 e2 00 	sts	0x00E2, r24
 8e6:	80 91 d8 00 	lds	r24, 0x00D8
 8ea:	80 62       	ori	r24, 0x20	; 32
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON |=  (1 << FRZCLK);
 8ec:	80 93 d8 00 	sts	0x00D8, r24
 8f0:	19 bc       	out	0x29, r1	; 41
 8f2:	85 e0       	ldi	r24, 0x05	; 5
 8f4:	80 93 0c 01 	sts	0x010C, r24

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
		EVENT_USB_Device_Disconnect();
		#else
		USB_DeviceState = DEVICE_STATE_Suspended;
 8f8:	d0 d1       	rcall	.+928    	; 0xc9a <USB_Event_Stub>
 8fa:	80 91 e1 00 	lds	r24, 0x00E1
		EVENT_USB_Device_Suspend();
 8fe:	84 ff       	sbrs	r24, 4
 900:	2d c0       	rjmp	.+90     	; 0x95c <__vector_10+0x11e>
					case USB_INT_IDTI:
						return (USBINT & (1 << IDTI));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
 902:	80 91 e2 00 	lds	r24, 0x00E2
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
 906:	84 ff       	sbrs	r24, 4
 908:	29 c0       	rjmp	.+82     	; 0x95c <__vector_10+0x11e>
					case USB_INT_IDTI:
						return (USBCON & (1 << IDTE));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
 90a:	8c e0       	ldi	r24, 0x0C	; 12
 90c:	89 bd       	out	0x29, r24	; 41
 90e:	8e e0       	ldi	r24, 0x0E	; 14
 910:	89 bd       	out	0x29, r24	; 41

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
 912:	09 b4       	in	r0, 0x29	; 41
 914:	00 fe       	sbrs	r0, 0
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
 916:	fd cf       	rjmp	.-6      	; 0x912 <__vector_10+0xd4>
 918:	80 91 d8 00 	lds	r24, 0x00D8
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
 91c:	8f 7d       	andi	r24, 0xDF	; 223
 91e:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
 922:	80 91 e1 00 	lds	r24, 0x00E1
 926:	8f 7e       	andi	r24, 0xEF	; 239
 928:	80 93 e1 00 	sts	0x00E1, r24
						USBINT &= ~(1 << IDTI);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
 92c:	80 91 e2 00 	lds	r24, 0x00E2
 930:	8f 7e       	andi	r24, 0xEF	; 239
 932:	80 93 e2 00 	sts	0x00E2, r24
						USBCON &= ~(1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
 936:	80 91 e2 00 	lds	r24, 0x00E2
 93a:	81 60       	ori	r24, 0x01	; 1
 93c:	80 93 e2 00 	sts	0x00E2, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
 940:	80 91 08 01 	lds	r24, 0x0108
 944:	88 23       	and	r24, r24
 946:	21 f4       	brne	.+8      	; 0x950 <__vector_10+0x112>
		USB_INT_Clear(USB_INT_WAKEUPI);

		USB_INT_Disable(USB_INT_WAKEUPI);
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_Device_ConfigurationNumber)
 948:	80 91 e3 00 	lds	r24, 0x00E3
 94c:	87 ff       	sbrs	r24, 7
 94e:	02 c0       	rjmp	.+4      	; 0x954 <__vector_10+0x116>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
 950:	84 e0       	ldi	r24, 0x04	; 4
 952:	01 c0       	rjmp	.+2      	; 0x956 <__vector_10+0x118>
		  USB_DeviceState = DEVICE_STATE_Configured;
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
 954:	81 e0       	ldi	r24, 0x01	; 1
 956:	80 93 0c 01 	sts	0x010C, r24
 95a:	9f d1       	rcall	.+830    	; 0xc9a <USB_Event_Stub>
 95c:	80 91 e1 00 	lds	r24, 0x00E1
 960:	83 ff       	sbrs	r24, 3

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
		#else
		EVENT_USB_Device_WakeUp();
 962:	22 c0       	rjmp	.+68     	; 0x9a8 <__vector_10+0x16a>
 964:	80 91 e2 00 	lds	r24, 0x00E2
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
 968:	83 ff       	sbrs	r24, 3
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
 96a:	1e c0       	rjmp	.+60     	; 0x9a8 <__vector_10+0x16a>
 96c:	80 91 e1 00 	lds	r24, 0x00E1
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
 970:	87 7f       	andi	r24, 0xF7	; 247
 972:	80 93 e1 00 	sts	0x00E1, r24
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
 976:	82 e0       	ldi	r24, 0x02	; 2
 978:	80 93 0c 01 	sts	0x010C, r24
 97c:	10 92 08 01 	sts	0x0108, r1
	{
		USB_INT_Clear(USB_INT_EORSTI);

		USB_DeviceState                = DEVICE_STATE_Default;
 980:	80 91 e1 00 	lds	r24, 0x00E1
 984:	8e 7f       	andi	r24, 0xFE	; 254
		USB_Device_ConfigurationNumber = 0;
 986:	80 93 e1 00 	sts	0x00E1, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
 98a:	80 91 e2 00 	lds	r24, 0x00E2
 98e:	8e 7f       	andi	r24, 0xFE	; 254
 990:	80 93 e2 00 	sts	0x00E2, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
 994:	80 91 e2 00 	lds	r24, 0x00E2
 998:	80 61       	ori	r24, 0x10	; 16
 99a:	80 93 e2 00 	sts	0x00E2, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
 99e:	80 e0       	ldi	r24, 0x00	; 0
 9a0:	60 e0       	ldi	r22, 0x00	; 0
 9a2:	42 e0       	ldi	r20, 0x02	; 2
 9a4:	96 de       	rcall	.-724    	; 0x6d2 <Endpoint_ConfigureEndpoint_Prv>
 9a6:	79 d1       	rcall	.+754    	; 0xc9a <USB_Event_Stub>
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
 9a8:	ff 91       	pop	r31
 9aa:	ef 91       	pop	r30
 9ac:	bf 91       	pop	r27
 9ae:	af 91       	pop	r26
 9b0:	9f 91       	pop	r25

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
 9b2:	8f 91       	pop	r24
 9b4:	7f 91       	pop	r23
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
 9b6:	6f 91       	pop	r22
 9b8:	5f 91       	pop	r21
 9ba:	4f 91       	pop	r20
 9bc:	3f 91       	pop	r19
 9be:	2f 91       	pop	r18
 9c0:	0f 90       	pop	r0
 9c2:	0b be       	out	0x3b, r0	; 59
 9c4:	0f 90       	pop	r0
 9c6:	0f be       	out	0x3f, r0	; 63
 9c8:	0f 90       	pop	r0
 9ca:	1f 90       	pop	r1
 9cc:	18 95       	reti

000009ce <USB_Device_ProcessControlRequest>:
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_Device_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
 9ce:	1f 93       	push	r17
 9d0:	cf 93       	push	r28
 9d2:	df 93       	push	r29
 9d4:	cd b7       	in	r28, 0x3d	; 61
 9d6:	de b7       	in	r29, 0x3e	; 62
 9d8:	ac 97       	sbiw	r28, 0x2c	; 44
 9da:	0f b6       	in	r0, 0x3f	; 63
 9dc:	f8 94       	cli
 9de:	de bf       	out	0x3e, r29	; 62
 9e0:	0f be       	out	0x3f, r0	; 63
 9e2:	cd bf       	out	0x3d, r28	; 61
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
 9e4:	80 e0       	ldi	r24, 0x00	; 0
	USB_ControlRequest.bRequest      = Endpoint_Read_8();
	USB_ControlRequest.wValue        = Endpoint_Read_16_LE();
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;
 9e6:	ed e0       	ldi	r30, 0x0D	; 13
 9e8:	f1 e0       	ldi	r31, 0x01	; 1
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
 9ea:	90 91 f1 00 	lds	r25, 0x00F1

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_8();
 9ee:	91 93       	st	Z+, r25
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
 9f0:	8f 5f       	subi	r24, 0xFF	; 255
 9f2:	88 30       	cpi	r24, 0x08	; 8
 9f4:	d1 f7       	brne	.-12     	; 0x9ea <USB_Device_ProcessControlRequest+0x1c>
	  *(RequestHeader++) = Endpoint_Read_8();
	#endif

	EVENT_USB_Device_ControlRequest();
 9f6:	38 dc       	rcall	.-1936   	; 0x268 <EVENT_USB_Device_ControlRequest>
 9f8:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 9fc:	83 ff       	sbrs	r24, 3

	if (Endpoint_IsSETUPReceived())
 9fe:	35 c1       	rjmp	.+618    	; 0xc6a <USB_Device_ProcessControlRequest+0x29c>
 a00:	80 91 0d 01 	lds	r24, 0x010D
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
 a04:	20 91 0e 01 	lds	r18, 0x010E

		switch (USB_ControlRequest.bRequest)
 a08:	25 30       	cpi	r18, 0x05	; 5
 a0a:	09 f4       	brne	.+2      	; 0xa0e <USB_Device_ProcessControlRequest+0x40>
 a0c:	84 c0       	rjmp	.+264    	; 0xb16 <USB_Device_ProcessControlRequest+0x148>
 a0e:	26 30       	cpi	r18, 0x06	; 6
 a10:	40 f4       	brcc	.+16     	; 0xa22 <USB_Device_ProcessControlRequest+0x54>
 a12:	21 30       	cpi	r18, 0x01	; 1
 a14:	a1 f1       	breq	.+104    	; 0xa7e <USB_Device_ProcessControlRequest+0xb0>
 a16:	21 30       	cpi	r18, 0x01	; 1
 a18:	70 f0       	brcs	.+28     	; 0xa36 <USB_Device_ProcessControlRequest+0x68>
 a1a:	23 30       	cpi	r18, 0x03	; 3
 a1c:	09 f0       	breq	.+2      	; 0xa20 <USB_Device_ProcessControlRequest+0x52>
 a1e:	25 c1       	rjmp	.+586    	; 0xc6a <USB_Device_ProcessControlRequest+0x29c>
 a20:	2e c0       	rjmp	.+92     	; 0xa7e <USB_Device_ProcessControlRequest+0xb0>
 a22:	28 30       	cpi	r18, 0x08	; 8
 a24:	09 f4       	brne	.+2      	; 0xa28 <USB_Device_ProcessControlRequest+0x5a>
 a26:	f3 c0       	rjmp	.+486    	; 0xc0e <USB_Device_ProcessControlRequest+0x240>
 a28:	29 30       	cpi	r18, 0x09	; 9
 a2a:	09 f4       	brne	.+2      	; 0xa2e <USB_Device_ProcessControlRequest+0x60>
 a2c:	02 c1       	rjmp	.+516    	; 0xc32 <USB_Device_ProcessControlRequest+0x264>
 a2e:	26 30       	cpi	r18, 0x06	; 6
 a30:	09 f0       	breq	.+2      	; 0xa34 <USB_Device_ProcessControlRequest+0x66>
 a32:	1b c1       	rjmp	.+566    	; 0xc6a <USB_Device_ProcessControlRequest+0x29c>
 a34:	93 c0       	rjmp	.+294    	; 0xb5c <USB_Device_ProcessControlRequest+0x18e>
 a36:	80 38       	cpi	r24, 0x80	; 128
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
 a38:	21 f0       	breq	.+8      	; 0xa42 <USB_Device_ProcessControlRequest+0x74>
 a3a:	82 38       	cpi	r24, 0x82	; 130
 a3c:	09 f0       	breq	.+2      	; 0xa40 <USB_Device_ProcessControlRequest+0x72>
 a3e:	15 c1       	rjmp	.+554    	; 0xc6a <USB_Device_ProcessControlRequest+0x29c>
 a40:	08 c0       	rjmp	.+16     	; 0xa52 <USB_Device_ProcessControlRequest+0x84>
 a42:	80 91 09 01 	lds	r24, 0x0109
	Endpoint_ClearOUT();
}

static void USB_Device_GetStatus(void)
{
	uint8_t CurrentStatus = 0;
 a46:	90 91 0a 01 	lds	r25, 0x010A
			if (USB_Device_CurrentlySelfPowered)
			  CurrentStatus |= FEATURE_SELFPOWERED_ENABLED;
			#endif

			#if !defined(NO_DEVICE_REMOTE_WAKEUP)
			if (USB_Device_RemoteWakeupEnabled)
 a4a:	99 23       	and	r25, r25
 a4c:	71 f0       	breq	.+28     	; 0xa6a <USB_Device_ProcessControlRequest+0x9c>
 a4e:	82 60       	ori	r24, 0x02	; 2
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
 a50:	0c c0       	rjmp	.+24     	; 0xa6a <USB_Device_ProcessControlRequest+0x9c>
 a52:	80 91 11 01 	lds	r24, 0x0111
			#endif
			break;
		case (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_ENDPOINT):
			#if !defined(CONTROL_ONLY_DEVICE)
			Endpoint_SelectEndpoint((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
 a56:	8f 70       	andi	r24, 0x0F	; 15
 a58:	80 93 e9 00 	sts	0x00E9, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 a5c:	90 91 eb 00 	lds	r25, 0x00EB
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
 a60:	81 e0       	ldi	r24, 0x01	; 1

			CurrentStatus = Endpoint_IsStalled();
 a62:	95 ff       	sbrs	r25, 5
 a64:	80 e0       	ldi	r24, 0x00	; 0
 a66:	10 92 e9 00 	sts	0x00E9, r1
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 a6a:	90 91 e8 00 	lds	r25, 0x00E8
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 a6e:	97 7f       	andi	r25, 0xF7	; 247
 a70:	90 93 e8 00 	sts	0x00E8, r25
 a74:	80 93 f1 00 	sts	0x00F1, r24
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
 a78:	10 92 f1 00 	sts	0x00F1, r1
				UEDATX = (Data >> 8);
 a7c:	d3 c0       	rjmp	.+422    	; 0xc24 <USB_Device_ProcessControlRequest+0x256>
 a7e:	88 23       	and	r24, r24
				}

				break;
			case REQ_ClearFeature:
			case REQ_SetFeature:
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
 a80:	19 f0       	breq	.+6      	; 0xa88 <USB_Device_ProcessControlRequest+0xba>
 a82:	82 30       	cpi	r24, 0x02	; 2
 a84:	09 f0       	breq	.+2      	; 0xa88 <USB_Device_ProcessControlRequest+0xba>
 a86:	f1 c0       	rjmp	.+482    	; 0xc6a <USB_Device_ProcessControlRequest+0x29c>
 a88:	90 e0       	ldi	r25, 0x00	; 0
	Endpoint_ClearStatusStage();
}

static void USB_Device_ClearSetFeature(void)
{
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
 a8a:	8f 71       	andi	r24, 0x1F	; 31
 a8c:	90 70       	andi	r25, 0x00	; 0
 a8e:	00 97       	sbiw	r24, 0x00	; 0
 a90:	29 f0       	breq	.+10     	; 0xa9c <USB_Device_ProcessControlRequest+0xce>
 a92:	82 30       	cpi	r24, 0x02	; 2
 a94:	91 05       	cpc	r25, r1
 a96:	09 f0       	breq	.+2      	; 0xa9a <USB_Device_ProcessControlRequest+0xcc>
 a98:	e8 c0       	rjmp	.+464    	; 0xc6a <USB_Device_ProcessControlRequest+0x29c>
 a9a:	0b c0       	rjmp	.+22     	; 0xab2 <USB_Device_ProcessControlRequest+0xe4>
 a9c:	80 91 0f 01 	lds	r24, 0x010F
	{
		#if !defined(NO_DEVICE_REMOTE_WAKEUP)
		case REQREC_DEVICE:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
 aa0:	81 30       	cpi	r24, 0x01	; 1
 aa2:	09 f0       	breq	.+2      	; 0xaa6 <USB_Device_ProcessControlRequest+0xd8>
 aa4:	e2 c0       	rjmp	.+452    	; 0xc6a <USB_Device_ProcessControlRequest+0x29c>
 aa6:	23 30       	cpi	r18, 0x03	; 3
			  USB_Device_RemoteWakeupEnabled = (USB_ControlRequest.bRequest == REQ_SetFeature);
 aa8:	09 f0       	breq	.+2      	; 0xaac <USB_Device_ProcessControlRequest+0xde>
 aaa:	80 e0       	ldi	r24, 0x00	; 0
 aac:	80 93 0a 01 	sts	0x010A, r24
 ab0:	2c c0       	rjmp	.+88     	; 0xb0a <USB_Device_ProcessControlRequest+0x13c>
 ab2:	80 91 0f 01 	lds	r24, 0x010F

			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
 ab6:	88 23       	and	r24, r24
 ab8:	41 f5       	brne	.+80     	; 0xb0a <USB_Device_ProcessControlRequest+0x13c>
 aba:	20 91 11 01 	lds	r18, 0x0111
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
 abe:	2f 70       	andi	r18, 0x0F	; 15
 ac0:	09 f4       	brne	.+2      	; 0xac4 <USB_Device_ProcessControlRequest+0xf6>

				if (EndpointIndex == ENDPOINT_CONTROLEP)
 ac2:	d3 c0       	rjmp	.+422    	; 0xc6a <USB_Device_ProcessControlRequest+0x29c>
 ac4:	20 93 e9 00 	sts	0x00E9, r18
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 ac8:	80 91 eb 00 	lds	r24, 0x00EB
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
 acc:	80 ff       	sbrs	r24, 0
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
 ace:	1d c0       	rjmp	.+58     	; 0xb0a <USB_Device_ProcessControlRequest+0x13c>
 ad0:	80 91 0e 01 	lds	r24, 0x010E
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
 ad4:	83 30       	cpi	r24, 0x03	; 3
 ad6:	21 f4       	brne	.+8      	; 0xae0 <USB_Device_ProcessControlRequest+0x112>
 ad8:	80 91 eb 00 	lds	r24, 0x00EB
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
 adc:	80 62       	ori	r24, 0x20	; 32
 ade:	13 c0       	rjmp	.+38     	; 0xb06 <USB_Device_ProcessControlRequest+0x138>
 ae0:	80 91 eb 00 	lds	r24, 0x00EB
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
 ae4:	80 61       	ori	r24, 0x10	; 16
 ae6:	80 93 eb 00 	sts	0x00EB, r24
 aea:	81 e0       	ldi	r24, 0x01	; 1
			 *  \param[in] Address  Endpoint address whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t Address)
			{
				UERST = (1 << (Address & ENDPOINT_EPNUM_MASK));
 aec:	90 e0       	ldi	r25, 0x00	; 0
 aee:	02 c0       	rjmp	.+4      	; 0xaf4 <USB_Device_ProcessControlRequest+0x126>
 af0:	88 0f       	add	r24, r24
 af2:	99 1f       	adc	r25, r25
 af4:	2a 95       	dec	r18
 af6:	e2 f7       	brpl	.-8      	; 0xaf0 <USB_Device_ProcessControlRequest+0x122>
 af8:	80 93 ea 00 	sts	0x00EA, r24
 afc:	10 92 ea 00 	sts	0x00EA, r1
				UERST = 0;
 b00:	80 91 eb 00 	lds	r24, 0x00EB

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
 b04:	88 60       	ori	r24, 0x08	; 8
 b06:	80 93 eb 00 	sts	0x00EB, r24
 b0a:	10 92 e9 00 	sts	0x00E9, r1
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 b0e:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 b12:	87 7f       	andi	r24, 0xF7	; 247
 b14:	8a c0       	rjmp	.+276    	; 0xc2a <USB_Device_ProcessControlRequest+0x25c>
 b16:	88 23       	and	r24, r24
					USB_Device_ClearSetFeature();
				}

				break;
			case REQ_SetAddress:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
 b18:	09 f0       	breq	.+2      	; 0xb1c <USB_Device_ProcessControlRequest+0x14e>
 b1a:	a7 c0       	rjmp	.+334    	; 0xc6a <USB_Device_ProcessControlRequest+0x29c>
 b1c:	10 91 0f 01 	lds	r17, 0x010F
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t DeviceAddress = (USB_ControlRequest.wValue & 0x7F);
 b20:	1f 77       	andi	r17, 0x7F	; 127
 b22:	80 91 e3 00 	lds	r24, 0x00E3
			#endif

			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				UDADDR = (UDADDR & (1 << ADDEN)) | (Address & 0x7F);
 b26:	80 78       	andi	r24, 0x80	; 128
 b28:	81 2b       	or	r24, r17
 b2a:	80 93 e3 00 	sts	0x00E3, r24
 b2e:	80 91 e8 00 	lds	r24, 0x00E8
 b32:	87 7f       	andi	r24, 0xF7	; 247
 b34:	80 93 e8 00 	sts	0x00E8, r24
 b38:	01 de       	rcall	.-1022   	; 0x73c <Endpoint_ClearStatusStage>

	USB_Device_SetDeviceAddress(DeviceAddress);

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
 b3a:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 b3e:	80 ff       	sbrs	r24, 0
 b40:	fc cf       	rjmp	.-8      	; 0xb3a <USB_Device_ProcessControlRequest+0x16c>

	while (!(Endpoint_IsINReady()));
 b42:	80 91 e3 00 	lds	r24, 0x00E3
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address)
			{
				(void)Address;
				
				UDADDR |= (1 << ADDEN);
 b46:	80 68       	ori	r24, 0x80	; 128
 b48:	80 93 e3 00 	sts	0x00E3, r24
 b4c:	11 23       	and	r17, r17
 b4e:	11 f0       	breq	.+4      	; 0xb54 <USB_Device_ProcessControlRequest+0x186>

	USB_Device_EnableDeviceAddress(DeviceAddress);

	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
 b50:	83 e0       	ldi	r24, 0x03	; 3
 b52:	01 c0       	rjmp	.+2      	; 0xb56 <USB_Device_ProcessControlRequest+0x188>
 b54:	82 e0       	ldi	r24, 0x02	; 2
 b56:	80 93 0c 01 	sts	0x010C, r24
 b5a:	87 c0       	rjmp	.+270    	; 0xc6a <USB_Device_ProcessControlRequest+0x29c>
 b5c:	80 58       	subi	r24, 0x80	; 128
 b5e:	82 30       	cpi	r24, 0x02	; 2
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_SetAddress();

				break;
			case REQ_GetDescriptor:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
 b60:	08 f0       	brcs	.+2      	; 0xb64 <USB_Device_ProcessControlRequest+0x196>
 b62:	83 c0       	rjmp	.+262    	; 0xc6a <USB_Device_ProcessControlRequest+0x29c>
 b64:	80 91 0f 01 	lds	r24, 0x010F
	    !(defined(USE_FLASH_DESCRIPTORS) || defined(USE_EEPROM_DESCRIPTORS) || defined(USE_RAM_DESCRIPTORS))
	uint8_t DescriptorAddressSpace;
	#endif

	#if !defined(NO_INTERNAL_SERIAL) && (USE_INTERNAL_SERIAL != NO_DESCRIPTOR)
	if (USB_ControlRequest.wValue == ((DTYPE_String << 8) | USE_INTERNAL_SERIAL))
 b68:	90 91 10 01 	lds	r25, 0x0110
 b6c:	23 e0       	ldi	r18, 0x03	; 3
 b6e:	8c 3d       	cpi	r24, 0xDC	; 220
 b70:	92 07       	cpc	r25, r18
 b72:	a9 f5       	brne	.+106    	; 0xbde <USB_Device_ProcessControlRequest+0x210>
 b74:	83 e0       	ldi	r24, 0x03	; 3
 b76:	8c 83       	std	Y+4, r24	; 0x04
	{
		USB_Descriptor_Header_t Header;
		uint16_t                UnicodeString[INTERNAL_SERIAL_LENGTH_BITS / 4];
	} SignatureDescriptor;

	SignatureDescriptor.Header.Type = DTYPE_String;
 b78:	8a e2       	ldi	r24, 0x2A	; 42
 b7a:	8b 83       	std	Y+3, r24	; 0x03
	SignatureDescriptor.Header.Size = USB_STRING_LEN(INTERNAL_SERIAL_LENGTH_BITS / 4);
 b7c:	5f b7       	in	r21, 0x3f	; 63
 b7e:	f8 94       	cli
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
 b80:	de 01       	movw	r26, r28
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
 b82:	13 96       	adiw	r26, 0x03	; 3
				__builtin_ssrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				cli();
				#endif

				GCC_MEMORY_BARRIER();
 b84:	80 e0       	ldi	r24, 0x00	; 0
 b86:	90 e0       	ldi	r25, 0x00	; 0
 b88:	4e e0       	ldi	r20, 0x0E	; 14
 b8a:	61 e2       	ldi	r22, 0x21	; 33
			static inline void USB_Device_GetSerialString(uint16_t* const UnicodeString)
			{
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;
 b8c:	e4 2f       	mov	r30, r20

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
				{
					uint8_t SerialByte = boot_signature_byte_get(SigReadAddress);
 b8e:	f0 e0       	ldi	r31, 0x00	; 0
 b90:	60 93 57 00 	sts	0x0057, r22
 b94:	e4 91       	lpm	r30, Z
 b96:	80 ff       	sbrs	r24, 0
 b98:	03 c0       	rjmp	.+6      	; 0xba0 <USB_Device_ProcessControlRequest+0x1d2>

					if (SerialCharNum & 0x01)
 b9a:	e2 95       	swap	r30
 b9c:	ef 70       	andi	r30, 0x0F	; 15
					{
						SerialByte >>= 4;
 b9e:	4f 5f       	subi	r20, 0xFF	; 255
 ba0:	ef 70       	andi	r30, 0x0F	; 15
						SigReadAddress++;
 ba2:	2e 2f       	mov	r18, r30
					}

					SerialByte &= 0x0F;
 ba4:	30 e0       	ldi	r19, 0x00	; 0
 ba6:	ea 30       	cpi	r30, 0x0A	; 10
 ba8:	18 f0       	brcs	.+6      	; 0xbb0 <USB_Device_ProcessControlRequest+0x1e2>

					UnicodeString[SerialCharNum] = cpu_to_le16((SerialByte >= 10) ?
 baa:	29 5c       	subi	r18, 0xC9	; 201
 bac:	3f 4f       	sbci	r19, 0xFF	; 255
 bae:	02 c0       	rjmp	.+4      	; 0xbb4 <USB_Device_ProcessControlRequest+0x1e6>
 bb0:	20 5d       	subi	r18, 0xD0	; 208
 bb2:	3f 4f       	sbci	r19, 0xFF	; 255
 bb4:	13 96       	adiw	r26, 0x03	; 3
 bb6:	3c 93       	st	X, r19
 bb8:	2e 93       	st	-X, r18
 bba:	12 97       	sbiw	r26, 0x02	; 2
 bbc:	01 96       	adiw	r24, 0x01	; 1
 bbe:	12 96       	adiw	r26, 0x02	; 2
 bc0:	84 31       	cpi	r24, 0x14	; 20
 bc2:	91 05       	cpc	r25, r1
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
 bc4:	19 f7       	brne	.-58     	; 0xb8c <USB_Device_ProcessControlRequest+0x1be>
 bc6:	5f bf       	out	0x3f, r21	; 63
 bc8:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 bcc:	87 7f       	andi	r24, 0xF7	; 247
 bce:	80 93 e8 00 	sts	0x00E8, r24
 bd2:	ce 01       	movw	r24, r28
 bd4:	03 96       	adiw	r24, 0x03	; 3

	USB_Device_GetSerialString(SignatureDescriptor.UnicodeString);

	Endpoint_ClearSETUP();

	Endpoint_Write_Control_Stream_LE(&SignatureDescriptor, sizeof(SignatureDescriptor));
 bd6:	6a e2       	ldi	r22, 0x2A	; 42
 bd8:	70 e0       	ldi	r23, 0x00	; 0
 bda:	79 dc       	rcall	.-1806   	; 0x4ce <Endpoint_Write_Control_Stream_LE>
 bdc:	12 c0       	rjmp	.+36     	; 0xc02 <USB_Device_ProcessControlRequest+0x234>
 bde:	60 91 11 01 	lds	r22, 0x0111
 be2:	ae 01       	movw	r20, r28
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif

	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
 be4:	4f 5f       	subi	r20, 0xFF	; 255
 be6:	5f 4f       	sbci	r21, 0xFF	; 255
 be8:	46 dc       	rcall	.-1908   	; 0x476 <CALLBACK_USB_GetDescriptor>
 bea:	bc 01       	movw	r22, r24
 bec:	00 97       	sbiw	r24, 0x00	; 0
 bee:	09 f4       	brne	.+2      	; 0xbf2 <USB_Device_ProcessControlRequest+0x224>
 bf0:	3c c0       	rjmp	.+120    	; 0xc6a <USB_Device_ProcessControlRequest+0x29c>
 bf2:	80 91 e8 00 	lds	r24, 0x00E8
 bf6:	87 7f       	andi	r24, 0xF7	; 247
 bf8:	80 93 e8 00 	sts	0x00E8, r24
 bfc:	89 81       	ldd	r24, Y+1	; 0x01
 bfe:	9a 81       	ldd	r25, Y+2	; 0x02
 c00:	0b dd       	rcall	.-1514   	; 0x618 <Endpoint_Write_Control_PStream_LE>
 c02:	80 91 e8 00 	lds	r24, 0x00E8
	#if defined(USE_RAM_DESCRIPTORS) || !defined(ARCH_HAS_MULTI_ADDRESS_SPACE)
	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_EEPROM_DESCRIPTORS)
	Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_FLASH_DESCRIPTORS)
	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
 c06:	8b 77       	andi	r24, 0x7B	; 123
 c08:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 c0c:	2e c0       	rjmp	.+92     	; 0xc6a <USB_Device_ProcessControlRequest+0x29c>
 c0e:	80 38       	cpi	r24, 0x80	; 128
 c10:	61 f5       	brne	.+88     	; 0xc6a <USB_Device_ProcessControlRequest+0x29c>
 c12:	80 91 e8 00 	lds	r24, 0x00E8
 c16:	87 7f       	andi	r24, 0xF7	; 247
					USB_Device_GetDescriptor();
				}

				break;
			case REQ_GetConfiguration:
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
 c18:	80 93 e8 00 	sts	0x00E8, r24
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 c1c:	80 91 08 01 	lds	r24, 0x0108
 c20:	80 93 f1 00 	sts	0x00F1, r24
 c24:	80 91 e8 00 	lds	r24, 0x00E8

static void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();

	Endpoint_Write_8(USB_Device_ConfigurationNumber);
 c28:	8e 77       	andi	r24, 0x7E	; 126
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
 c2a:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 c2e:	86 dd       	rcall	.-1268   	; 0x73c <Endpoint_ClearStatusStage>
 c30:	1c c0       	rjmp	.+56     	; 0xc6a <USB_Device_ProcessControlRequest+0x29c>
 c32:	88 23       	and	r24, r24
 c34:	d1 f4       	brne	.+52     	; 0xc6a <USB_Device_ProcessControlRequest+0x29c>
 c36:	90 91 0f 01 	lds	r25, 0x010F
	Endpoint_ClearIN();

	Endpoint_ClearStatusStage();
 c3a:	92 30       	cpi	r25, 0x02	; 2
 c3c:	b0 f4       	brcc	.+44     	; 0xc6a <USB_Device_ProcessControlRequest+0x29c>
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_GetConfiguration();

				break;
			case REQ_SetConfiguration:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
 c3e:	80 91 e8 00 	lds	r24, 0x00E8
}

static void USB_Device_SetConfiguration(void)
{
	#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
 c42:	87 7f       	andi	r24, 0xF7	; 247
 c44:	80 93 e8 00 	sts	0x00E8, r24
 c48:	90 93 08 01 	sts	0x0108, r25
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 c4c:	77 dd       	rcall	.-1298   	; 0x73c <Endpoint_ClearStatusStage>
 c4e:	80 91 08 01 	lds	r24, 0x0108
 c52:	88 23       	and	r24, r24
	#endif
	#endif

	Endpoint_ClearSETUP();

	USB_Device_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
 c54:	21 f4       	brne	.+8      	; 0xc5e <USB_Device_ProcessControlRequest+0x290>
 c56:	80 91 e3 00 	lds	r24, 0x00E3

	Endpoint_ClearStatusStage();
 c5a:	87 ff       	sbrs	r24, 7

	if (USB_Device_ConfigurationNumber)
 c5c:	02 c0       	rjmp	.+4      	; 0xc62 <USB_Device_ProcessControlRequest+0x294>
 c5e:	84 e0       	ldi	r24, 0x04	; 4
 c60:	01 c0       	rjmp	.+2      	; 0xc64 <USB_Device_ProcessControlRequest+0x296>
 c62:	81 e0       	ldi	r24, 0x01	; 1
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
 c64:	80 93 0c 01 	sts	0x010C, r24
	  USB_DeviceState = DEVICE_STATE_Configured;
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
 c68:	f5 da       	rcall	.-2582   	; 0x254 <EVENT_USB_Device_ConfigurationChanged>
 c6a:	80 91 e8 00 	lds	r24, 0x00E8
 c6e:	83 ff       	sbrs	r24, 3
 c70:	0a c0       	rjmp	.+20     	; 0xc86 <USB_Device_ProcessControlRequest+0x2b8>
 c72:	80 91 e8 00 	lds	r24, 0x00E8

	EVENT_USB_Device_ConfigurationChanged();
 c76:	87 7f       	andi	r24, 0xF7	; 247
 c78:	80 93 e8 00 	sts	0x00E8, r24
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 c7c:	80 91 eb 00 	lds	r24, 0x00EB
			default:
				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
 c80:	80 62       	ori	r24, 0x20	; 32
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 c82:	80 93 eb 00 	sts	0x00EB, r24
 c86:	ac 96       	adiw	r28, 0x2c	; 44
 c88:	0f b6       	in	r0, 0x3f	; 63
 c8a:	f8 94       	cli
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
 c8c:	de bf       	out	0x3e, r29	; 62
 c8e:	0f be       	out	0x3f, r0	; 63
 c90:	cd bf       	out	0x3d, r28	; 61
 c92:	df 91       	pop	r29
 c94:	cf 91       	pop	r28
	{
		Endpoint_ClearSETUP();
		Endpoint_StallTransaction();
	}
}
 c96:	1f 91       	pop	r17
 c98:	08 95       	ret

00000c9a <USB_Event_Stub>:
#include "Events.h"

void USB_Event_Stub(void)
{

}
 c9a:	08 95       	ret

00000c9c <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
 c9c:	cf 93       	push	r28
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_DeviceTask(void)
{
	if (USB_DeviceState == DEVICE_STATE_Unattached)
 c9e:	80 91 0c 01 	lds	r24, 0x010C
 ca2:	88 23       	and	r24, r24
 ca4:	a9 f0       	breq	.+42     	; 0xcd0 <USB_USBTask+0x34>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
 ca6:	80 91 e9 00 	lds	r24, 0x00E9
 caa:	8f 70       	andi	r24, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
 cac:	90 91 ec 00 	lds	r25, 0x00EC
 cb0:	90 ff       	sbrs	r25, 0
 cb2:	02 c0       	rjmp	.+4      	; 0xcb8 <USB_USBTask+0x1c>
 cb4:	c0 e8       	ldi	r28, 0x80	; 128
 cb6:	01 c0       	rjmp	.+2      	; 0xcba <USB_USBTask+0x1e>
 cb8:	c0 e0       	ldi	r28, 0x00	; 0
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
 cba:	c8 2b       	or	r28, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 cbc:	10 92 e9 00 	sts	0x00E9, r1
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 cc0:	80 91 e8 00 	lds	r24, 0x00E8

	uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

	if (Endpoint_IsSETUPReceived())
 cc4:	83 ff       	sbrs	r24, 3
 cc6:	01 c0       	rjmp	.+2      	; 0xcca <USB_USBTask+0x2e>
	  USB_Device_ProcessControlRequest();
 cc8:	82 de       	rcall	.-764    	; 0x9ce <USB_Device_ProcessControlRequest>
 cca:	cf 70       	andi	r28, 0x0F	; 15
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 ccc:	c0 93 e9 00 	sts	0x00E9, r28
 cd0:	cf 91       	pop	r28
	#elif defined(USB_CAN_BE_HOST)
		USB_HostTask();
	#elif defined(USB_CAN_BE_DEVICE)
		USB_DeviceTask();
	#endif
}
 cd2:	08 95       	ret

00000cd4 <__udivmodsi4>:
 cd4:	a1 e2       	ldi	r26, 0x21	; 33
 cd6:	1a 2e       	mov	r1, r26
 cd8:	aa 1b       	sub	r26, r26
 cda:	bb 1b       	sub	r27, r27
 cdc:	fd 01       	movw	r30, r26
 cde:	0d c0       	rjmp	.+26     	; 0xcfa <__udivmodsi4_ep>

00000ce0 <__udivmodsi4_loop>:
 ce0:	aa 1f       	adc	r26, r26
 ce2:	bb 1f       	adc	r27, r27
 ce4:	ee 1f       	adc	r30, r30
 ce6:	ff 1f       	adc	r31, r31
 ce8:	a2 17       	cp	r26, r18
 cea:	b3 07       	cpc	r27, r19
 cec:	e4 07       	cpc	r30, r20
 cee:	f5 07       	cpc	r31, r21
 cf0:	20 f0       	brcs	.+8      	; 0xcfa <__udivmodsi4_ep>
 cf2:	a2 1b       	sub	r26, r18
 cf4:	b3 0b       	sbc	r27, r19
 cf6:	e4 0b       	sbc	r30, r20
 cf8:	f5 0b       	sbc	r31, r21

00000cfa <__udivmodsi4_ep>:
 cfa:	66 1f       	adc	r22, r22
 cfc:	77 1f       	adc	r23, r23
 cfe:	88 1f       	adc	r24, r24
 d00:	99 1f       	adc	r25, r25
 d02:	1a 94       	dec	r1
 d04:	69 f7       	brne	.-38     	; 0xce0 <__udivmodsi4_loop>
 d06:	60 95       	com	r22
 d08:	70 95       	com	r23
 d0a:	80 95       	com	r24
 d0c:	90 95       	com	r25
 d0e:	9b 01       	movw	r18, r22
 d10:	ac 01       	movw	r20, r24
 d12:	bd 01       	movw	r22, r26
 d14:	cf 01       	movw	r24, r30
 d16:	08 95       	ret

00000d18 <_exit>:
 d18:	f8 94       	cli

00000d1a <__stop_program>:
 d1a:	ff cf       	rjmp	.-2      	; 0xd1a <__stop_program>
