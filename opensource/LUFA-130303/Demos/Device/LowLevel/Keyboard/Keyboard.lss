
Keyboard.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800100  00000e62  00000ef6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000e62  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000017  00800104  00800104  00000efa  2**0
                  ALLOC
  3 .stab         00000924  00000000  00000000  00000efc  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000195  00000000  00000000  00001820  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000358  00000000  00000000  000019b8  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00005119  00000000  00000000  00001d10  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001386  00000000  00000000  00006e29  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000287d  00000000  00000000  000081af  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000908  00000000  00000000  0000aa2c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00002499  00000000  00000000  0000b334  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00003796  00000000  00000000  0000d7cd  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000530  00000000  00000000  00010f63  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	ab c0       	rjmp	.+342    	; 0x158 <__ctors_end>
   2:	00 00       	nop
   4:	c7 c0       	rjmp	.+398    	; 0x194 <__bad_interrupt>
   6:	00 00       	nop
   8:	c5 c0       	rjmp	.+394    	; 0x194 <__bad_interrupt>
   a:	00 00       	nop
   c:	c3 c0       	rjmp	.+390    	; 0x194 <__bad_interrupt>
   e:	00 00       	nop
  10:	c1 c0       	rjmp	.+386    	; 0x194 <__bad_interrupt>
  12:	00 00       	nop
  14:	bf c0       	rjmp	.+382    	; 0x194 <__bad_interrupt>
  16:	00 00       	nop
  18:	bd c0       	rjmp	.+378    	; 0x194 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	bb c0       	rjmp	.+374    	; 0x194 <__bad_interrupt>
  1e:	00 00       	nop
  20:	b9 c0       	rjmp	.+370    	; 0x194 <__bad_interrupt>
  22:	00 00       	nop
  24:	b7 c0       	rjmp	.+366    	; 0x194 <__bad_interrupt>
  26:	00 00       	nop
  28:	c2 c4       	rjmp	.+2436   	; 0x9ae <__vector_10>
  2a:	00 00       	nop
  2c:	b3 c0       	rjmp	.+358    	; 0x194 <__bad_interrupt>
  2e:	00 00       	nop
  30:	b1 c0       	rjmp	.+354    	; 0x194 <__bad_interrupt>
  32:	00 00       	nop
  34:	af c0       	rjmp	.+350    	; 0x194 <__bad_interrupt>
  36:	00 00       	nop
  38:	ad c0       	rjmp	.+346    	; 0x194 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	ab c0       	rjmp	.+342    	; 0x194 <__bad_interrupt>
  3e:	00 00       	nop
  40:	a9 c0       	rjmp	.+338    	; 0x194 <__bad_interrupt>
  42:	00 00       	nop
  44:	a7 c0       	rjmp	.+334    	; 0x194 <__bad_interrupt>
  46:	00 00       	nop
  48:	a5 c0       	rjmp	.+330    	; 0x194 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	a3 c0       	rjmp	.+326    	; 0x194 <__bad_interrupt>
  4e:	00 00       	nop
  50:	a1 c0       	rjmp	.+322    	; 0x194 <__bad_interrupt>
  52:	00 00       	nop
  54:	9f c0       	rjmp	.+318    	; 0x194 <__bad_interrupt>
  56:	00 00       	nop
  58:	9d c0       	rjmp	.+314    	; 0x194 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	9b c0       	rjmp	.+310    	; 0x194 <__bad_interrupt>
  5e:	00 00       	nop
  60:	99 c0       	rjmp	.+306    	; 0x194 <__bad_interrupt>
  62:	00 00       	nop
  64:	97 c0       	rjmp	.+302    	; 0x194 <__bad_interrupt>
  66:	00 00       	nop
  68:	95 c0       	rjmp	.+298    	; 0x194 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	93 c0       	rjmp	.+294    	; 0x194 <__bad_interrupt>
  6e:	00 00       	nop
  70:	91 c0       	rjmp	.+290    	; 0x194 <__bad_interrupt>
  72:	00 00       	nop
  74:	8f c0       	rjmp	.+286    	; 0x194 <__bad_interrupt>
  76:	00 00       	nop
  78:	8d c0       	rjmp	.+282    	; 0x194 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	8b c0       	rjmp	.+278    	; 0x194 <__bad_interrupt>
  7e:	00 00       	nop
  80:	89 c0       	rjmp	.+274    	; 0x194 <__bad_interrupt>
  82:	00 00       	nop
  84:	87 c0       	rjmp	.+270    	; 0x194 <__bad_interrupt>
  86:	00 00       	nop
  88:	85 c0       	rjmp	.+266    	; 0x194 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	83 c0       	rjmp	.+262    	; 0x194 <__bad_interrupt>
  8e:	00 00       	nop
  90:	81 c0       	rjmp	.+258    	; 0x194 <__bad_interrupt>
  92:	00 00       	nop
  94:	7f c0       	rjmp	.+254    	; 0x194 <__bad_interrupt>
  96:	00 00       	nop

00000098 <ProductString>:
  98:	26 03 4c 00 55 00 46 00 41 00 20 00 4b 00 65 00     &.L.U.F.A. .K.e.
  a8:	79 00 62 00 6f 00 61 00 72 00 64 00 20 00 44 00     y.b.o.a.r.d. .D.
  b8:	65 00 6d 00 6f 00 00 00                             e.m.o...

000000c0 <ManufacturerString>:
  c0:	18 03 44 00 65 00 61 00 6e 00 20 00 43 00 61 00     ..D.e.a.n. .C.a.
  d0:	6d 00 65 00 72 00 61 00 00 00                       m.e.r.a...

000000da <LanguageString>:
  da:	04 03 09 04                                         ....

000000de <ConfigurationDescriptor>:
  de:	09 02 29 00 01 01 00 c0 32 09 04 00 00 02 03 01     ..).....2.......
  ee:	01 00 09 21 11 01 00 01 22 3f 00 07 05 81 03 08     ...!...."?......
  fe:	00 05 07 05 02 03 08 00 05                          .........

00000107 <DeviceDescriptor>:
 107:	12 01 10 01 00 00 00 08 eb 03 42 20 01 00 01 02     ..........B ....
 117:	00 01                                               ..

00000119 <KeyboardReport>:
 119:	05 01 09 06 a1 01 05 07 19 e0 29 e7 15 00 25 01     ..........)...%.
 129:	75 01 95 08 81 02 95 01 75 08 81 01 05 08 19 01     u.......u.......
 139:	29 05 95 05 75 01 91 02 95 01 75 03 91 01 15 00     )...u.....u.....
 149:	25 65 05 07 19 00 29 65 95 06 75 08 81 00 c0        %e....)e..u....

00000158 <__ctors_end>:
 158:	11 24       	eor	r1, r1
 15a:	1f be       	out	0x3f, r1	; 63
 15c:	cf ef       	ldi	r28, 0xFF	; 255
 15e:	d0 e2       	ldi	r29, 0x20	; 32
 160:	de bf       	out	0x3e, r29	; 62
 162:	cd bf       	out	0x3d, r28	; 61

00000164 <__do_copy_data>:
 164:	11 e0       	ldi	r17, 0x01	; 1
 166:	a0 e0       	ldi	r26, 0x00	; 0
 168:	b1 e0       	ldi	r27, 0x01	; 1
 16a:	e2 e6       	ldi	r30, 0x62	; 98
 16c:	fe e0       	ldi	r31, 0x0E	; 14
 16e:	00 e0       	ldi	r16, 0x00	; 0
 170:	0b bf       	out	0x3b, r16	; 59
 172:	02 c0       	rjmp	.+4      	; 0x178 <__do_copy_data+0x14>
 174:	07 90       	elpm	r0, Z+
 176:	0d 92       	st	X+, r0
 178:	a4 30       	cpi	r26, 0x04	; 4
 17a:	b1 07       	cpc	r27, r17
 17c:	d9 f7       	brne	.-10     	; 0x174 <__do_copy_data+0x10>
 17e:	1b be       	out	0x3b, r1	; 59

00000180 <__do_clear_bss>:
 180:	11 e0       	ldi	r17, 0x01	; 1
 182:	a4 e0       	ldi	r26, 0x04	; 4
 184:	b1 e0       	ldi	r27, 0x01	; 1
 186:	01 c0       	rjmp	.+2      	; 0x18a <.do_clear_bss_start>

00000188 <.do_clear_bss_loop>:
 188:	1d 92       	st	X+, r1

0000018a <.do_clear_bss_start>:
 18a:	ab 31       	cpi	r26, 0x1B	; 27
 18c:	b1 07       	cpc	r27, r17
 18e:	e1 f7       	brne	.-8      	; 0x188 <.do_clear_bss_loop>
 190:	d8 d1       	rcall	.+944    	; 0x542 <main>
 192:	65 c6       	rjmp	.+3274   	; 0xe5e <_exit>

00000194 <__bad_interrupt>:
 194:	35 cf       	rjmp	.-406    	; 0x0 <__vectors>

00000196 <LEDs_SetAllLEDs>:
				PORTD &= ~LEDMask;
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
			{
				PORTD = ((PORTD & ~LEDS_ALL_LEDS) | LEDMask);
 196:	9b b1       	in	r25, 0x0b	; 11
 198:	9f 70       	andi	r25, 0x0F	; 15
 19a:	98 2b       	or	r25, r24
 19c:	9b b9       	out	0x0b, r25	; 11
			}
 19e:	08 95       	ret

000001a0 <SetupHardware>:

/** Configures the board hardware and chip peripherals for the demo's functionality. */
void SetupHardware(void)
{
	/* Disable watchdog if enabled by bootloader/fuses */
	MCUSR &= ~(1 << WDRF);
 1a0:	84 b7       	in	r24, 0x34	; 52
 1a2:	87 7f       	andi	r24, 0xF7	; 247
 1a4:	84 bf       	out	0x34, r24	; 52
	wdt_disable();
 1a6:	88 e1       	ldi	r24, 0x18	; 24
 1a8:	0f b6       	in	r0, 0x3f	; 63
 1aa:	f8 94       	cli
 1ac:	80 93 60 00 	sts	0x0060, r24
 1b0:	10 92 60 00 	sts	0x0060, r1
 1b4:	0f be       	out	0x3f, r0	; 63
The type of x is clock_div_t.
*/
void clock_prescale_set(clock_div_t __x)
{
    uint8_t __tmp = _BV(CLKPCE);
    __asm__ __volatile__ (
 1b6:	90 e0       	ldi	r25, 0x00	; 0
 1b8:	80 e8       	ldi	r24, 0x80	; 128
 1ba:	0f b6       	in	r0, 0x3f	; 63
 1bc:	f8 94       	cli
 1be:	80 93 61 00 	sts	0x0061, r24
 1c2:	90 93 61 00 	sts	0x0061, r25
 1c6:	0f be       	out	0x3f, r0	; 63

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void Joystick_Init(void)
			{
				DDRB  &= ~JOY_BMASK;
 1c8:	84 b1       	in	r24, 0x04	; 4
 1ca:	8f 71       	andi	r24, 0x1F	; 31
 1cc:	84 b9       	out	0x04, r24	; 4
				DDRE  &= ~JOY_EMASK;
 1ce:	8d b1       	in	r24, 0x0d	; 13
 1d0:	8f 7c       	andi	r24, 0xCF	; 207
 1d2:	8d b9       	out	0x0d, r24	; 13

				PORTB |=  JOY_BMASK;
 1d4:	85 b1       	in	r24, 0x05	; 5
 1d6:	80 6e       	ori	r24, 0xE0	; 224
 1d8:	85 b9       	out	0x05, r24	; 5
				PORTE |=  JOY_EMASK;
 1da:	8e b1       	in	r24, 0x0e	; 14
 1dc:	80 63       	ori	r24, 0x30	; 48
 1de:	8e b9       	out	0x0e, r24	; 14

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void LEDs_Init(void)
			{
				DDRD  |=  LEDS_ALL_LEDS;
 1e0:	8a b1       	in	r24, 0x0a	; 10
 1e2:	80 6f       	ori	r24, 0xF0	; 240
 1e4:	8a b9       	out	0x0a, r24	; 10
				PORTD &= ~LEDS_ALL_LEDS;
 1e6:	8b b1       	in	r24, 0x0b	; 11
 1e8:	8f 70       	andi	r24, 0x0F	; 15
 1ea:	8b b9       	out	0x0b, r24	; 11
	clock_prescale_set(clock_div_1);

	/* Hardware Initialization */
	Joystick_Init();
	LEDs_Init();
	USB_Init();
 1ec:	c5 d3       	rcall	.+1930   	; 0x978 <USB_Init>
 1ee:	6a 98       	cbi	0x0d, 2	; 13

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void Buttons_Init(void)
			{
				DDRE  &= ~BUTTONS_BUTTON1;
 1f0:	72 9a       	sbi	0x0e, 2	; 14
				PORTE |=  BUTTONS_BUTTON1;
 1f2:	08 95       	ret

000001f4 <EVENT_USB_Device_Connect>:
	Buttons_Init();
}
 1f4:	80 ea       	ldi	r24, 0xA0	; 160
 *  starts the library USB task to begin the enumeration and USB management process.
 */
void EVENT_USB_Device_Connect(void)
{
	/* Indicate USB enumerating */
	LEDs_SetAllLEDs(LEDMASK_USB_ENUMERATING);
 1f6:	cf df       	rcall	.-98     	; 0x196 <LEDs_SetAllLEDs>
 1f8:	81 e0       	ldi	r24, 0x01	; 1

	/* Default to report protocol on connect */
	UsingReportProtocol = true;
 1fa:	80 93 00 01 	sts	0x0100, r24
 1fe:	08 95       	ret

00000200 <EVENT_USB_Device_Disconnect>:
}
 200:	80 e1       	ldi	r24, 0x10	; 16
 *  the status LEDs.
 */
void EVENT_USB_Device_Disconnect(void)
{
	/* Indicate USB not ready */
	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
 202:	c9 cf       	rjmp	.-110    	; 0x196 <LEDs_SetAllLEDs>

00000204 <EVENT_USB_Device_ConfigurationChanged>:
 204:	cf 93       	push	r28
}
 206:	81 e0       	ldi	r24, 0x01	; 1
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
 208:	61 ec       	ldi	r22, 0xC1	; 193
 20a:	42 e0       	ldi	r20, 0x02	; 2
 20c:	e7 d2       	rcall	.+1486   	; 0x7dc <Endpoint_ConfigureEndpoint_Prv>
 20e:	c8 2f       	mov	r28, r24
 210:	82 e0       	ldi	r24, 0x02	; 2
 212:	60 ec       	ldi	r22, 0xC0	; 192
 214:	42 e0       	ldi	r20, 0x02	; 2
 216:	e2 d2       	rcall	.+1476   	; 0x7dc <Endpoint_ConfigureEndpoint_Prv>
 218:	90 91 e2 00 	lds	r25, 0x00E2
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
 21c:	94 60       	ori	r25, 0x04	; 4
 21e:	90 93 e2 00 	sts	0x00E2, r25
 222:	28 2f       	mov	r18, r24
 224:	30 e0       	ldi	r19, 0x00	; 0
{
	bool ConfigSuccess = true;

	/* Setup HID Report Endpoints */
	ConfigSuccess &= Endpoint_ConfigureEndpoint(KEYBOARD_IN_EPADDR, EP_TYPE_INTERRUPT, KEYBOARD_EPSIZE, 1);
	ConfigSuccess &= Endpoint_ConfigureEndpoint(KEYBOARD_OUT_EPADDR, EP_TYPE_INTERRUPT, KEYBOARD_EPSIZE, 1);
 226:	8c 2f       	mov	r24, r28
 228:	90 e0       	ldi	r25, 0x00	; 0
void EVENT_USB_Device_ConfigurationChanged(void)
{
	bool ConfigSuccess = true;

	/* Setup HID Report Endpoints */
	ConfigSuccess &= Endpoint_ConfigureEndpoint(KEYBOARD_IN_EPADDR, EP_TYPE_INTERRUPT, KEYBOARD_EPSIZE, 1);
 22a:	28 23       	and	r18, r24
 22c:	39 23       	and	r19, r25
	ConfigSuccess &= Endpoint_ConfigureEndpoint(KEYBOARD_OUT_EPADDR, EP_TYPE_INTERRUPT, KEYBOARD_EPSIZE, 1);
 22e:	21 15       	cp	r18, r1
 230:	31 05       	cpc	r19, r1

	/* Turn on Start-of-Frame events for tracking HID report period expiry */
	USB_Device_EnableSOFEvents();

	/* Indicate endpoint configuration success or failure */
	LEDs_SetAllLEDs(ConfigSuccess ? LEDMASK_USB_READY : LEDMASK_USB_ERROR);
 232:	11 f0       	breq	.+4      	; 0x238 <EVENT_USB_Device_ConfigurationChanged+0x34>
 234:	80 e6       	ldi	r24, 0x60	; 96
 236:	01 c0       	rjmp	.+2      	; 0x23a <EVENT_USB_Device_ConfigurationChanged+0x36>
 238:	80 e9       	ldi	r24, 0x90	; 144
 23a:	ad df       	rcall	.-166    	; 0x196 <LEDs_SetAllLEDs>
 23c:	cf 91       	pop	r28
 23e:	08 95       	ret

00000240 <EVENT_USB_Device_StartOfFrame>:
 240:	80 91 04 01 	lds	r24, 0x0104
}
 244:	90 91 05 01 	lds	r25, 0x0105

/** Event handler for the USB device Start Of Frame event. */
void EVENT_USB_Device_StartOfFrame(void)
{
	/* One millisecond has elapsed, decrement the idle time remaining counter if it has not already elapsed */
	if (IdleMSRemaining)
 248:	00 97       	sbiw	r24, 0x00	; 0
 24a:	29 f0       	breq	.+10     	; 0x256 <EVENT_USB_Device_StartOfFrame+0x16>
	  IdleMSRemaining--;
 24c:	01 97       	sbiw	r24, 0x01	; 1
 24e:	90 93 05 01 	sts	0x0105, r25
 252:	80 93 04 01 	sts	0x0104, r24
 256:	08 95       	ret

00000258 <CreateKeyboardReport>:
/** Fills the given HID report data structure with the next HID report to send to the host.
 *
 *  \param[out] ReportData  Pointer to a HID report data structure to be filled
 */
void CreateKeyboardReport(USB_KeyboardReport_Data_t* const ReportData)
{
 258:	fc 01       	movw	r30, r24
			}

			static inline uint8_t Joystick_GetStatus(void) ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t Joystick_GetStatus(void)
			{
				return (((uint8_t)~PINB & JOY_BMASK) | (((uint8_t)~PINE & JOY_EMASK) >> JOY_PORTE_MASK_SHIFT));
 25a:	23 b1       	in	r18, 0x03	; 3
 25c:	8c b1       	in	r24, 0x0c	; 12
 25e:	80 95       	com	r24
 260:	90 e0       	ldi	r25, 0x00	; 0
 262:	80 73       	andi	r24, 0x30	; 48
 264:	90 70       	andi	r25, 0x00	; 0
 266:	95 95       	asr	r25
 268:	87 95       	ror	r24
 26a:	20 95       	com	r18
 26c:	20 7e       	andi	r18, 0xE0	; 224
 26e:	28 2b       	or	r18, r24
			}

			static inline uint8_t Buttons_GetStatus(void) ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t Buttons_GetStatus(void)
			{
				return ((PINE & BUTTONS_BUTTON1) ^ BUTTONS_BUTTON1);
 270:	9c b1       	in	r25, 0x0c	; 12
 272:	90 95       	com	r25
 274:	94 70       	andi	r25, 0x04	; 4
	uint8_t ButtonStatus_LCL  = Buttons_GetStatus();

	uint8_t UsedKeyCodes      = 0;

	/* Clear the report contents */
	memset(ReportData, 0, sizeof(USB_KeyboardReport_Data_t));
 276:	88 e0       	ldi	r24, 0x08	; 8
 278:	df 01       	movw	r26, r30
 27a:	1d 92       	st	X+, r1
 27c:	8a 95       	dec	r24
 27e:	e9 f7       	brne	.-6      	; 0x27a <CreateKeyboardReport+0x22>

	/* Make sent key uppercase by indicating that the left shift key is pressed */
	ReportData->Modifier = HID_KEYBOARD_MODIFIER_LEFTSHIFT;
 280:	82 e0       	ldi	r24, 0x02	; 2
 282:	80 83       	st	Z, r24

	if (JoyStatus_LCL & JOY_UP)
 284:	27 ff       	sbrs	r18, 7
 286:	02 c0       	rjmp	.+4      	; 0x28c <CreateKeyboardReport+0x34>
	  ReportData->KeyCode[UsedKeyCodes++] = HID_KEYBOARD_SC_A;
 288:	84 e0       	ldi	r24, 0x04	; 4
 28a:	03 c0       	rjmp	.+6      	; 0x292 <CreateKeyboardReport+0x3a>
	else if (JoyStatus_LCL & JOY_DOWN)
 28c:	24 ff       	sbrs	r18, 4
 28e:	04 c0       	rjmp	.+8      	; 0x298 <CreateKeyboardReport+0x40>
	  ReportData->KeyCode[UsedKeyCodes++] = HID_KEYBOARD_SC_B;
 290:	85 e0       	ldi	r24, 0x05	; 5
 292:	82 83       	std	Z+2, r24	; 0x02
 294:	81 e0       	ldi	r24, 0x01	; 1
 296:	01 c0       	rjmp	.+2      	; 0x29a <CreateKeyboardReport+0x42>
void CreateKeyboardReport(USB_KeyboardReport_Data_t* const ReportData)
{
	uint8_t JoyStatus_LCL     = Joystick_GetStatus();
	uint8_t ButtonStatus_LCL  = Buttons_GetStatus();

	uint8_t UsedKeyCodes      = 0;
 298:	80 e0       	ldi	r24, 0x00	; 0
	if (JoyStatus_LCL & JOY_UP)
	  ReportData->KeyCode[UsedKeyCodes++] = HID_KEYBOARD_SC_A;
	else if (JoyStatus_LCL & JOY_DOWN)
	  ReportData->KeyCode[UsedKeyCodes++] = HID_KEYBOARD_SC_B;

	if (JoyStatus_LCL & JOY_LEFT)
 29a:	26 ff       	sbrs	r18, 6
 29c:	05 c0       	rjmp	.+10     	; 0x2a8 <CreateKeyboardReport+0x50>
	  ReportData->KeyCode[UsedKeyCodes++] = HID_KEYBOARD_SC_C;
 29e:	df 01       	movw	r26, r30
 2a0:	a8 0f       	add	r26, r24
 2a2:	b1 1d       	adc	r27, r1
 2a4:	36 e0       	ldi	r19, 0x06	; 6
 2a6:	06 c0       	rjmp	.+12     	; 0x2b4 <CreateKeyboardReport+0x5c>
	else if (JoyStatus_LCL & JOY_RIGHT)
 2a8:	23 ff       	sbrs	r18, 3
 2aa:	08 c0       	rjmp	.+16     	; 0x2bc <CreateKeyboardReport+0x64>
	  ReportData->KeyCode[UsedKeyCodes++] = HID_KEYBOARD_SC_D;
 2ac:	df 01       	movw	r26, r30
 2ae:	a8 0f       	add	r26, r24
 2b0:	b1 1d       	adc	r27, r1
 2b2:	37 e0       	ldi	r19, 0x07	; 7
 2b4:	12 96       	adiw	r26, 0x02	; 2
 2b6:	3c 93       	st	X, r19
 2b8:	12 97       	sbiw	r26, 0x02	; 2
 2ba:	8f 5f       	subi	r24, 0xFF	; 255

	if (JoyStatus_LCL & JOY_PRESS)
 2bc:	25 ff       	sbrs	r18, 5
 2be:	08 c0       	rjmp	.+16     	; 0x2d0 <CreateKeyboardReport+0x78>
	  ReportData->KeyCode[UsedKeyCodes++] = HID_KEYBOARD_SC_E;
 2c0:	df 01       	movw	r26, r30
 2c2:	a8 0f       	add	r26, r24
 2c4:	b1 1d       	adc	r27, r1
 2c6:	28 e0       	ldi	r18, 0x08	; 8
 2c8:	12 96       	adiw	r26, 0x02	; 2
 2ca:	2c 93       	st	X, r18
 2cc:	12 97       	sbiw	r26, 0x02	; 2
 2ce:	8f 5f       	subi	r24, 0xFF	; 255

	if (ButtonStatus_LCL & BUTTONS_BUTTON1)
 2d0:	99 23       	and	r25, r25
 2d2:	21 f0       	breq	.+8      	; 0x2dc <CreateKeyboardReport+0x84>
	  ReportData->KeyCode[UsedKeyCodes++] = HID_KEYBOARD_SC_F;
 2d4:	e8 0f       	add	r30, r24
 2d6:	f1 1d       	adc	r31, r1
 2d8:	89 e0       	ldi	r24, 0x09	; 9
 2da:	82 83       	std	Z+2, r24	; 0x02
 2dc:	08 95       	ret

000002de <ProcessLEDReport>:
 */
void ProcessLEDReport(const uint8_t LEDReport)
{
	uint8_t LEDMask = LEDS_LED2;

	if (LEDReport & HID_KEYBOARD_LED_NUMLOCK)
 2de:	28 2f       	mov	r18, r24
 2e0:	80 ff       	sbrs	r24, 0
 2e2:	02 c0       	rjmp	.+4      	; 0x2e8 <ProcessLEDReport+0xa>
	  LEDMask |= LEDS_LED1;
 2e4:	80 e3       	ldi	r24, 0x30	; 48
 2e6:	01 c0       	rjmp	.+2      	; 0x2ea <ProcessLEDReport+0xc>
 *
 *  \param[in] LEDReport  LED status report from the host
 */
void ProcessLEDReport(const uint8_t LEDReport)
{
	uint8_t LEDMask = LEDS_LED2;
 2e8:	80 e2       	ldi	r24, 0x20	; 32

	if (LEDReport & HID_KEYBOARD_LED_NUMLOCK)
	  LEDMask |= LEDS_LED1;

	if (LEDReport & HID_KEYBOARD_LED_CAPSLOCK)
 2ea:	21 fd       	sbrc	r18, 1
	  LEDMask |= LEDS_LED3;
 2ec:	80 68       	ori	r24, 0x80	; 128

	if (LEDReport & HID_KEYBOARD_LED_SCROLLLOCK)
 2ee:	22 fd       	sbrc	r18, 2
	  LEDMask |= LEDS_LED4;
 2f0:	80 64       	ori	r24, 0x40	; 64

	/* Set the status LEDs to the current Keyboard LED status */
	LEDs_SetAllLEDs(LEDMask);
 2f2:	51 cf       	rjmp	.-350    	; 0x196 <LEDs_SetAllLEDs>

000002f4 <EVENT_USB_Device_ControlRequest>:
 2f4:	cf 93       	push	r28
}
 2f6:	df 93       	push	r29
/** Event handler for the USB_ControlRequest event. This is used to catch and process control requests sent to
 *  the device from the USB host before passing along unhandled control requests to the library for processing
 *  internally.
 */
void EVENT_USB_Device_ControlRequest(void)
{
 2f8:	cd b7       	in	r28, 0x3d	; 61
 2fa:	de b7       	in	r29, 0x3e	; 62
 2fc:	29 97       	sbiw	r28, 0x09	; 9
 2fe:	0f b6       	in	r0, 0x3f	; 63
 300:	f8 94       	cli
 302:	de bf       	out	0x3e, r29	; 62
 304:	0f be       	out	0x3f, r0	; 63
 306:	cd bf       	out	0x3d, r28	; 61
	/* Handle HID Class specific requests */
	switch (USB_ControlRequest.bRequest)
 308:	80 91 14 01 	lds	r24, 0x0114
 30c:	83 30       	cpi	r24, 0x03	; 3
 30e:	09 f4       	brne	.+2      	; 0x312 <EVENT_USB_Device_ControlRequest+0x1e>
 310:	4a c0       	rjmp	.+148    	; 0x3a6 <EVENT_USB_Device_ControlRequest+0xb2>
 312:	84 30       	cpi	r24, 0x04	; 4
 314:	30 f4       	brcc	.+12     	; 0x322 <EVENT_USB_Device_ControlRequest+0x2e>
 316:	81 30       	cpi	r24, 0x01	; 1
 318:	71 f0       	breq	.+28     	; 0x336 <EVENT_USB_Device_ControlRequest+0x42>
 31a:	82 30       	cpi	r24, 0x02	; 2
 31c:	09 f0       	breq	.+2      	; 0x320 <EVENT_USB_Device_ControlRequest+0x2c>
 31e:	98 c0       	rjmp	.+304    	; 0x450 <EVENT_USB_Device_ControlRequest+0x15c>
 320:	7e c0       	rjmp	.+252    	; 0x41e <EVENT_USB_Device_ControlRequest+0x12a>
 322:	8a 30       	cpi	r24, 0x0A	; 10
 324:	09 f4       	brne	.+2      	; 0x328 <EVENT_USB_Device_ControlRequest+0x34>
 326:	62 c0       	rjmp	.+196    	; 0x3ec <EVENT_USB_Device_ControlRequest+0xf8>
 328:	8b 30       	cpi	r24, 0x0B	; 11
 32a:	09 f4       	brne	.+2      	; 0x32e <EVENT_USB_Device_ControlRequest+0x3a>
 32c:	49 c0       	rjmp	.+146    	; 0x3c0 <EVENT_USB_Device_ControlRequest+0xcc>
 32e:	89 30       	cpi	r24, 0x09	; 9
 330:	09 f0       	breq	.+2      	; 0x334 <EVENT_USB_Device_ControlRequest+0x40>
 332:	8e c0       	rjmp	.+284    	; 0x450 <EVENT_USB_Device_ControlRequest+0x15c>
 334:	18 c0       	rjmp	.+48     	; 0x366 <EVENT_USB_Device_ControlRequest+0x72>
	{
		case HID_REQ_GetReport:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
 336:	80 91 13 01 	lds	r24, 0x0113
 33a:	81 3a       	cpi	r24, 0xA1	; 161
 33c:	09 f0       	breq	.+2      	; 0x340 <EVENT_USB_Device_ControlRequest+0x4c>
 33e:	88 c0       	rjmp	.+272    	; 0x450 <EVENT_USB_Device_ControlRequest+0x15c>
			{
				USB_KeyboardReport_Data_t KeyboardReportData;

				/* Create the next keyboard report for transmission to the host */
				CreateKeyboardReport(&KeyboardReportData);
 340:	ce 01       	movw	r24, r28
 342:	01 96       	adiw	r24, 0x01	; 1
 344:	89 df       	rcall	.-238    	; 0x258 <CreateKeyboardReport>
 346:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 34a:	87 7f       	andi	r24, 0xF7	; 247
 34c:	80 93 e8 00 	sts	0x00E8, r24
 350:	ce 01       	movw	r24, r28

				Endpoint_ClearSETUP();

				/* Write the report data to the control endpoint */
				Endpoint_Write_Control_Stream_LE(&KeyboardReportData, sizeof(KeyboardReportData));
 352:	01 96       	adiw	r24, 0x01	; 1
 354:	68 e0       	ldi	r22, 0x08	; 8
 356:	70 e0       	ldi	r23, 0x00	; 0
 358:	88 d1       	rcall	.+784    	; 0x66a <Endpoint_Write_Control_Stream_LE>
 35a:	80 91 e8 00 	lds	r24, 0x00E8
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 35e:	8b 77       	andi	r24, 0x7B	; 123
 360:	80 93 e8 00 	sts	0x00E8, r24
 364:	75 c0       	rjmp	.+234    	; 0x450 <EVENT_USB_Device_ControlRequest+0x15c>
 366:	80 91 13 01 	lds	r24, 0x0113
				Endpoint_ClearOUT();
			}

			break;
		case HID_REQ_SetReport:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
 36a:	81 32       	cpi	r24, 0x21	; 33
 36c:	09 f0       	breq	.+2      	; 0x370 <EVENT_USB_Device_ControlRequest+0x7c>
 36e:	70 c0       	rjmp	.+224    	; 0x450 <EVENT_USB_Device_ControlRequest+0x15c>
 370:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 374:	87 7f       	andi	r24, 0xF7	; 247
 376:	80 93 e8 00 	sts	0x00E8, r24
 37a:	05 c0       	rjmp	.+10     	; 0x386 <EVENT_USB_Device_ControlRequest+0x92>
 37c:	80 91 12 01 	lds	r24, 0x0112
				Endpoint_ClearSETUP();

				/* Wait until the LED report has been sent by the host */
				while (!(Endpoint_IsOUTReceived()))
				{
					if (USB_DeviceState == DEVICE_STATE_Unattached)
 380:	88 23       	and	r24, r24
 382:	09 f4       	brne	.+2      	; 0x386 <EVENT_USB_Device_ControlRequest+0x92>
 384:	65 c0       	rjmp	.+202    	; 0x450 <EVENT_USB_Device_ControlRequest+0x15c>
 386:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 38a:	82 ff       	sbrs	r24, 2
 38c:	f7 cf       	rjmp	.-18     	; 0x37c <EVENT_USB_Device_ControlRequest+0x88>
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
			{
				Endpoint_ClearSETUP();

				/* Wait until the LED report has been sent by the host */
				while (!(Endpoint_IsOUTReceived()))
 38e:	80 91 f1 00 	lds	r24, 0x00F1
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
 392:	90 91 e8 00 	lds	r25, 0x00E8
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 396:	9b 77       	andi	r25, 0x7B	; 123
 398:	90 93 e8 00 	sts	0x00E8, r25
 39c:	89 87       	std	Y+9, r24	; 0x09
 39e:	53 d2       	rcall	.+1190   	; 0x846 <Endpoint_ClearStatusStage>

				/* Read in the LED report from the host */
				uint8_t LEDStatus = Endpoint_Read_8();

				Endpoint_ClearOUT();
				Endpoint_ClearStatusStage();
 3a0:	89 85       	ldd	r24, Y+9	; 0x09
 3a2:	9d df       	rcall	.-198    	; 0x2de <ProcessLEDReport>
 3a4:	55 c0       	rjmp	.+170    	; 0x450 <EVENT_USB_Device_ControlRequest+0x15c>

				/* Process the incoming LED report */
				ProcessLEDReport(LEDStatus);
 3a6:	80 91 13 01 	lds	r24, 0x0113
 3aa:	81 3a       	cpi	r24, 0xA1	; 161
 3ac:	09 f0       	breq	.+2      	; 0x3b0 <EVENT_USB_Device_ControlRequest+0xbc>
			}

			break;
		case HID_REQ_GetProtocol:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
 3ae:	50 c0       	rjmp	.+160    	; 0x450 <EVENT_USB_Device_ControlRequest+0x15c>
 3b0:	80 91 e8 00 	lds	r24, 0x00E8
 3b4:	87 7f       	andi	r24, 0xF7	; 247
 3b6:	80 93 e8 00 	sts	0x00E8, r24
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 3ba:	80 91 00 01 	lds	r24, 0x0100
 3be:	40 c0       	rjmp	.+128    	; 0x440 <EVENT_USB_Device_ControlRequest+0x14c>
 3c0:	80 91 13 01 	lds	r24, 0x0113
			{
				Endpoint_ClearSETUP();

				/* Write the current protocol flag to the host */
				Endpoint_Write_8(UsingReportProtocol);
 3c4:	81 32       	cpi	r24, 0x21	; 33
 3c6:	09 f0       	breq	.+2      	; 0x3ca <EVENT_USB_Device_ControlRequest+0xd6>
				Endpoint_ClearStatusStage();
			}

			break;
		case HID_REQ_SetProtocol:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
 3c8:	43 c0       	rjmp	.+134    	; 0x450 <EVENT_USB_Device_ControlRequest+0x15c>
 3ca:	80 91 e8 00 	lds	r24, 0x00E8
 3ce:	87 7f       	andi	r24, 0xF7	; 247
 3d0:	80 93 e8 00 	sts	0x00E8, r24
 3d4:	38 d2       	rcall	.+1136   	; 0x846 <Endpoint_ClearStatusStage>
 3d6:	21 e0       	ldi	r18, 0x01	; 1
 3d8:	80 91 15 01 	lds	r24, 0x0115
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
 3dc:	90 91 16 01 	lds	r25, 0x0116

				/* Set or clear the flag depending on what the host indicates that the current Protocol should be */
				UsingReportProtocol = (USB_ControlRequest.wValue != 0);
 3e0:	00 97       	sbiw	r24, 0x00	; 0
 3e2:	09 f4       	brne	.+2      	; 0x3e6 <EVENT_USB_Device_ControlRequest+0xf2>
 3e4:	20 e0       	ldi	r18, 0x00	; 0
 3e6:	20 93 00 01 	sts	0x0100, r18
 3ea:	32 c0       	rjmp	.+100    	; 0x450 <EVENT_USB_Device_ControlRequest+0x15c>
 3ec:	80 91 13 01 	lds	r24, 0x0113
 3f0:	81 32       	cpi	r24, 0x21	; 33
 3f2:	71 f5       	brne	.+92     	; 0x450 <EVENT_USB_Device_ControlRequest+0x15c>
 3f4:	80 91 e8 00 	lds	r24, 0x00E8
			}

			break;
		case HID_REQ_SetIdle:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
 3f8:	87 7f       	andi	r24, 0xF7	; 247
 3fa:	80 93 e8 00 	sts	0x00E8, r24
 3fe:	23 d2       	rcall	.+1094   	; 0x846 <Endpoint_ClearStatusStage>
 400:	80 91 15 01 	lds	r24, 0x0115
 404:	90 91 16 01 	lds	r25, 0x0116
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
 408:	80 70       	andi	r24, 0x00	; 0
 40a:	56 e0       	ldi	r21, 0x06	; 6

				/* Get idle period in MSB, IdleCount must be multiplied by 4 to get number of milliseconds */
				IdleCount = ((USB_ControlRequest.wValue & 0xFF00) >> 6);
 40c:	96 95       	lsr	r25
 40e:	87 95       	ror	r24
 410:	5a 95       	dec	r21
 412:	e1 f7       	brne	.-8      	; 0x40c <EVENT_USB_Device_ControlRequest+0x118>
 414:	90 93 02 01 	sts	0x0102, r25
 418:	80 93 01 01 	sts	0x0101, r24
 41c:	19 c0       	rjmp	.+50     	; 0x450 <EVENT_USB_Device_ControlRequest+0x15c>
 41e:	80 91 13 01 	lds	r24, 0x0113
 422:	81 3a       	cpi	r24, 0xA1	; 161
 424:	a9 f4       	brne	.+42     	; 0x450 <EVENT_USB_Device_ControlRequest+0x15c>
 426:	80 91 e8 00 	lds	r24, 0x00E8
			}

			break;
		case HID_REQ_GetIdle:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
 42a:	87 7f       	andi	r24, 0xF7	; 247
 42c:	80 93 e8 00 	sts	0x00E8, r24
 430:	80 91 01 01 	lds	r24, 0x0101
 434:	90 91 02 01 	lds	r25, 0x0102
 438:	96 95       	lsr	r25
 43a:	87 95       	ror	r24
			{
				Endpoint_ClearSETUP();

				/* Write the current idle duration to the host, must be divided by 4 before sent to host */
				Endpoint_Write_8(IdleCount >> 2);
 43c:	96 95       	lsr	r25
 43e:	87 95       	ror	r24
 440:	80 93 f1 00 	sts	0x00F1, r24
 444:	80 91 e8 00 	lds	r24, 0x00E8
 448:	8e 77       	andi	r24, 0x7E	; 126
 44a:	80 93 e8 00 	sts	0x00E8, r24
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
 44e:	fb d1       	rcall	.+1014   	; 0x846 <Endpoint_ClearStatusStage>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 450:	29 96       	adiw	r28, 0x09	; 9
 452:	0f b6       	in	r0, 0x3f	; 63
 454:	f8 94       	cli
 456:	de bf       	out	0x3e, r29	; 62
 458:	0f be       	out	0x3f, r0	; 63

				Endpoint_ClearIN();
				Endpoint_ClearStatusStage();
 45a:	cd bf       	out	0x3d, r28	; 61
 45c:	df 91       	pop	r29
			}

			break;
	}
}
 45e:	cf 91       	pop	r28
 460:	08 95       	ret

00000462 <SendNextReport>:
 462:	cf 93       	push	r28
 464:	df 93       	push	r29
 466:	cd b7       	in	r28, 0x3d	; 61
 468:	de b7       	in	r29, 0x3e	; 62
 46a:	28 97       	sbiw	r28, 0x08	; 8
 46c:	0f b6       	in	r0, 0x3f	; 63
 46e:	f8 94       	cli
	LEDs_SetAllLEDs(LEDMask);
}

/** Sends the next HID report to the host, via the keyboard data endpoint. */
void SendNextReport(void)
{
 470:	de bf       	out	0x3e, r29	; 62
 472:	0f be       	out	0x3f, r0	; 63
 474:	cd bf       	out	0x3d, r28	; 61
	static USB_KeyboardReport_Data_t PrevKeyboardReportData;
	USB_KeyboardReport_Data_t        KeyboardReportData;
	bool                             SendReport = false;

	/* Create the next keyboard report for transmission to the host */
	CreateKeyboardReport(&KeyboardReportData);
 476:	ce 01       	movw	r24, r28
 478:	01 96       	adiw	r24, 0x01	; 1
 47a:	ee de       	rcall	.-548    	; 0x258 <CreateKeyboardReport>
 47c:	80 91 01 01 	lds	r24, 0x0101

	/* Check if the idle period is set and has elapsed */
	if (IdleCount && (!(IdleMSRemaining)))
 480:	90 91 02 01 	lds	r25, 0x0102
 484:	00 97       	sbiw	r24, 0x00	; 0
 486:	69 f0       	breq	.+26     	; 0x4a2 <SendNextReport+0x40>
 488:	20 91 04 01 	lds	r18, 0x0104
 48c:	30 91 05 01 	lds	r19, 0x0105
 490:	21 15       	cp	r18, r1
 492:	31 05       	cpc	r19, r1
 494:	31 f4       	brne	.+12     	; 0x4a2 <SendNextReport+0x40>
 496:	90 93 05 01 	sts	0x0105, r25
	{
		/* Reset the idle time remaining counter */
		IdleMSRemaining = IdleCount;
 49a:	80 93 04 01 	sts	0x0104, r24
 49e:	81 e0       	ldi	r24, 0x01	; 1

		/* Idle period is set and has elapsed, must send a report to the host */
		SendReport = true;
 4a0:	0e c0       	rjmp	.+28     	; 0x4be <SendNextReport+0x5c>
 4a2:	86 e0       	ldi	r24, 0x06	; 6
	}
	else
	{
		/* Check to see if the report data has changed - if so a report MUST be sent */
		SendReport = (memcmp(&PrevKeyboardReportData, &KeyboardReportData, sizeof(USB_KeyboardReport_Data_t)) != 0);	
 4a4:	91 e0       	ldi	r25, 0x01	; 1
 4a6:	be 01       	movw	r22, r28
 4a8:	6f 5f       	subi	r22, 0xFF	; 255
 4aa:	7f 4f       	sbci	r23, 0xFF	; 255
 4ac:	48 e0       	ldi	r20, 0x08	; 8
 4ae:	50 e0       	ldi	r21, 0x00	; 0
 4b0:	c9 d4       	rcall	.+2450   	; 0xe44 <memcmp>
 4b2:	9c 01       	movw	r18, r24
 4b4:	81 e0       	ldi	r24, 0x01	; 1
 4b6:	21 15       	cp	r18, r1
 4b8:	31 05       	cpc	r19, r1
 4ba:	09 f4       	brne	.+2      	; 0x4be <SendNextReport+0x5c>
 4bc:	80 e0       	ldi	r24, 0x00	; 0
 4be:	91 e0       	ldi	r25, 0x01	; 1
 4c0:	90 93 e9 00 	sts	0x00E9, r25
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 4c4:	90 91 e8 00 	lds	r25, 0x00E8
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
 4c8:	95 ff       	sbrs	r25, 5
 4ca:	17 c0       	rjmp	.+46     	; 0x4fa <SendNextReport+0x98>

	/* Select the Keyboard Report Endpoint */
	Endpoint_SelectEndpoint(KEYBOARD_IN_EPADDR);

	/* Check if Keyboard Endpoint Ready for Read/Write and if we should send a new report */
	if (Endpoint_IsReadWriteAllowed() && SendReport)
 4cc:	88 23       	and	r24, r24
 4ce:	a9 f0       	breq	.+42     	; 0x4fa <SendNextReport+0x98>
 4d0:	a6 e0       	ldi	r26, 0x06	; 6
 4d2:	b1 e0       	ldi	r27, 0x01	; 1
	{
		/* Save the current report data for later comparison to check for changes */
		PrevKeyboardReportData = KeyboardReportData;
 4d4:	fe 01       	movw	r30, r28
 4d6:	31 96       	adiw	r30, 0x01	; 1
 4d8:	88 e0       	ldi	r24, 0x08	; 8
 4da:	01 90       	ld	r0, Z+
 4dc:	0d 92       	st	X+, r0
 4de:	81 50       	subi	r24, 0x01	; 1
 4e0:	e1 f7       	brne	.-8      	; 0x4da <SendNextReport+0x78>
 4e2:	ce 01       	movw	r24, r28
 4e4:	01 96       	adiw	r24, 0x01	; 1

		/* Write Keyboard Report Data */
		Endpoint_Write_Stream_LE(&KeyboardReportData, sizeof(KeyboardReportData), NULL);
 4e6:	68 e0       	ldi	r22, 0x08	; 8
 4e8:	70 e0       	ldi	r23, 0x00	; 0
 4ea:	40 e0       	ldi	r20, 0x00	; 0
 4ec:	50 e0       	ldi	r21, 0x00	; 0
 4ee:	6d d0       	rcall	.+218    	; 0x5ca <Endpoint_Write_Stream_LE>
 4f0:	80 91 e8 00 	lds	r24, 0x00E8
 4f4:	8e 77       	andi	r24, 0x7E	; 126
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 4f6:	80 93 e8 00 	sts	0x00E8, r24
 4fa:	28 96       	adiw	r28, 0x08	; 8
 4fc:	0f b6       	in	r0, 0x3f	; 63
 4fe:	f8 94       	cli

		/* Finalize the stream transfer to send the last packet */
		Endpoint_ClearIN();
	}
}
 500:	de bf       	out	0x3e, r29	; 62
 502:	0f be       	out	0x3f, r0	; 63
 504:	cd bf       	out	0x3d, r28	; 61
 506:	df 91       	pop	r29
 508:	cf 91       	pop	r28
 50a:	08 95       	ret

0000050c <ReceiveNextReport>:
 50c:	82 e0       	ldi	r24, 0x02	; 2
 50e:	80 93 e9 00 	sts	0x00E9, r24
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 512:	80 91 e8 00 	lds	r24, 0x00E8
{
	/* Select the Keyboard LED Report Endpoint */
	Endpoint_SelectEndpoint(KEYBOARD_OUT_EPADDR);

	/* Check if Keyboard LED Endpoint contains a packet */
	if (Endpoint_IsOUTReceived())
 516:	82 ff       	sbrs	r24, 2
 518:	0c c0       	rjmp	.+24     	; 0x532 <ReceiveNextReport+0x26>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
 51a:	80 91 e8 00 	lds	r24, 0x00E8
	{
		/* Check to see if the packet contains data */
		if (Endpoint_IsReadWriteAllowed())
 51e:	85 ff       	sbrs	r24, 5
 520:	03 c0       	rjmp	.+6      	; 0x528 <ReceiveNextReport+0x1c>
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
 522:	80 91 f1 00 	lds	r24, 0x00F1
		{
			/* Read in the LED report from the host */
			uint8_t LEDReport = Endpoint_Read_8();

			/* Process the read LED report from the host */
			ProcessLEDReport(LEDReport);
 526:	db de       	rcall	.-586    	; 0x2de <ProcessLEDReport>
 528:	80 91 e8 00 	lds	r24, 0x00E8
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 52c:	8b 77       	andi	r24, 0x7B	; 123
 52e:	80 93 e8 00 	sts	0x00E8, r24
 532:	08 95       	ret

00000534 <HID_Task>:
 534:	80 91 12 01 	lds	r24, 0x0112

/** Function to manage HID report generation and transmission to the host, when in report mode. */
void HID_Task(void)
{
	/* Device must be connected and configured for the task to run */
	if (USB_DeviceState != DEVICE_STATE_Configured)
 538:	84 30       	cpi	r24, 0x04	; 4
 53a:	11 f4       	brne	.+4      	; 0x540 <HID_Task+0xc>
	  return;

	/* Send the next keypress report to the host */
	SendNextReport();
 53c:	92 df       	rcall	.-220    	; 0x462 <SendNextReport>
 53e:	e6 cf       	rjmp	.-52     	; 0x50c <ReceiveNextReport>

	/* Process the LED report sent from the host */
	ReceiveNextReport();
 540:	08 95       	ret

00000542 <main>:
 542:	2e de       	rcall	.-932    	; 0x1a0 <SetupHardware>
 544:	80 e1       	ldi	r24, 0x10	; 16
 */
int main(void)
{
	SetupHardware();

	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
 546:	27 de       	rcall	.-946    	; 0x196 <LEDs_SetAllLEDs>
 548:	78 94       	sei
 54a:	f4 df       	rcall	.-24     	; 0x534 <HID_Task>
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				sei();
 54c:	5f d4       	rcall	.+2238   	; 0xe0c <USB_USBTask>
	GlobalInterruptEnable();

	for (;;)
	{
		HID_Task();
 54e:	fd cf       	rjmp	.-6      	; 0x54a <main+0x8>

00000550 <CALLBACK_USB_GetDescriptor>:
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
 550:	93 30       	cpi	r25, 0x03	; 3
 552:	89 f0       	breq	.+34     	; 0x576 <CALLBACK_USB_GetDescriptor+0x26>
 554:	94 30       	cpi	r25, 0x04	; 4
 556:	28 f4       	brcc	.+10     	; 0x562 <CALLBACK_USB_GetDescriptor+0x12>
 558:	91 30       	cpi	r25, 0x01	; 1
 55a:	49 f1       	breq	.+82     	; 0x5ae <CALLBACK_USB_GetDescriptor+0x5e>
 55c:	92 30       	cpi	r25, 0x02	; 2
 55e:	61 f5       	brne	.+88     	; 0x5b8 <CALLBACK_USB_GetDescriptor+0x68>
 560:	05 c0       	rjmp	.+10     	; 0x56c <CALLBACK_USB_GetDescriptor+0x1c>
 562:	91 32       	cpi	r25, 0x21	; 33
 564:	d1 f0       	breq	.+52     	; 0x59a <CALLBACK_USB_GetDescriptor+0x4a>
 566:	92 32       	cpi	r25, 0x22	; 34
 568:	39 f5       	brne	.+78     	; 0x5b8 <CALLBACK_USB_GetDescriptor+0x68>
 56a:	1c c0       	rjmp	.+56     	; 0x5a4 <CALLBACK_USB_GetDescriptor+0x54>
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
			Size    = sizeof(USB_Descriptor_Configuration_t);
 56c:	89 e2       	ldi	r24, 0x29	; 41
 56e:	90 e0       	ldi	r25, 0x00	; 0
		case DTYPE_Device:
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
 570:	ee ed       	ldi	r30, 0xDE	; 222
 572:	f0 e0       	ldi	r31, 0x00	; 0
			Size    = sizeof(USB_Descriptor_Configuration_t);
			break;
 574:	25 c0       	rjmp	.+74     	; 0x5c0 <CALLBACK_USB_GetDescriptor+0x70>
		case DTYPE_String:
			switch (DescriptorNumber)
 576:	81 30       	cpi	r24, 0x01	; 1
 578:	41 f0       	breq	.+16     	; 0x58a <CALLBACK_USB_GetDescriptor+0x3a>
 57a:	81 30       	cpi	r24, 0x01	; 1
 57c:	18 f0       	brcs	.+6      	; 0x584 <CALLBACK_USB_GetDescriptor+0x34>
 57e:	82 30       	cpi	r24, 0x02	; 2
 580:	d9 f4       	brne	.+54     	; 0x5b8 <CALLBACK_USB_GetDescriptor+0x68>
 582:	06 c0       	rjmp	.+12     	; 0x590 <CALLBACK_USB_GetDescriptor+0x40>
			{
				case 0x00:
					Address = &LanguageString;
					Size    = pgm_read_byte(&LanguageString.Header.Size);
 584:	ea ed       	ldi	r30, 0xDA	; 218
 586:	f0 e0       	ldi	r31, 0x00	; 0
 588:	05 c0       	rjmp	.+10     	; 0x594 <CALLBACK_USB_GetDescriptor+0x44>
					break;
				case 0x01:
					Address = &ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
 58a:	e0 ec       	ldi	r30, 0xC0	; 192
 58c:	f0 e0       	ldi	r31, 0x00	; 0
 58e:	02 c0       	rjmp	.+4      	; 0x594 <CALLBACK_USB_GetDescriptor+0x44>
					break;
				case 0x02:
					Address = &ProductString;
					Size    = pgm_read_byte(&ProductString.Header.Size);
 590:	e8 e9       	ldi	r30, 0x98	; 152
 592:	f0 e0       	ldi	r31, 0x00	; 0
 594:	84 91       	lpm	r24, Z
 596:	90 e0       	ldi	r25, 0x00	; 0
					break;
 598:	13 c0       	rjmp	.+38     	; 0x5c0 <CALLBACK_USB_GetDescriptor+0x70>
			}

			break;
		case HID_DTYPE_HID:
			Address = &ConfigurationDescriptor.HID_KeyboardHID;
			Size    = sizeof(USB_HID_Descriptor_HID_t);
 59a:	89 e0       	ldi	r24, 0x09	; 9
 59c:	90 e0       	ldi	r25, 0x00	; 0
					break;
			}

			break;
		case HID_DTYPE_HID:
			Address = &ConfigurationDescriptor.HID_KeyboardHID;
 59e:	e0 ef       	ldi	r30, 0xF0	; 240
 5a0:	f0 e0       	ldi	r31, 0x00	; 0
			Size    = sizeof(USB_HID_Descriptor_HID_t);
			break;
 5a2:	0e c0       	rjmp	.+28     	; 0x5c0 <CALLBACK_USB_GetDescriptor+0x70>
		case HID_DTYPE_Report:
			Address = &KeyboardReport;
			Size    = sizeof(KeyboardReport);
 5a4:	8f e3       	ldi	r24, 0x3F	; 63
 5a6:	90 e0       	ldi	r25, 0x00	; 0
		case HID_DTYPE_HID:
			Address = &ConfigurationDescriptor.HID_KeyboardHID;
			Size    = sizeof(USB_HID_Descriptor_HID_t);
			break;
		case HID_DTYPE_Report:
			Address = &KeyboardReport;
 5a8:	e9 e1       	ldi	r30, 0x19	; 25
 5aa:	f1 e0       	ldi	r31, 0x01	; 1
			Size    = sizeof(KeyboardReport);
			break;
 5ac:	09 c0       	rjmp	.+18     	; 0x5c0 <CALLBACK_USB_GetDescriptor+0x70>

	switch (DescriptorType)
	{
		case DTYPE_Device:
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
 5ae:	82 e1       	ldi	r24, 0x12	; 18
 5b0:	90 e0       	ldi	r25, 0x00	; 0
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
	{
		case DTYPE_Device:
			Address = &DeviceDescriptor;
 5b2:	e7 e0       	ldi	r30, 0x07	; 7
 5b4:	f1 e0       	ldi	r31, 0x01	; 1
 5b6:	04 c0       	rjmp	.+8      	; 0x5c0 <CALLBACK_USB_GetDescriptor+0x70>
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;
 5b8:	80 e0       	ldi	r24, 0x00	; 0
 5ba:	90 e0       	ldi	r25, 0x00	; 0
                                    const void** const DescriptorAddress)
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
 5bc:	e0 e0       	ldi	r30, 0x00	; 0
 5be:	f0 e0       	ldi	r31, 0x00	; 0
			Address = &KeyboardReport;
			Size    = sizeof(KeyboardReport);
			break;
	}

	*DescriptorAddress = Address;
 5c0:	da 01       	movw	r26, r20
 5c2:	11 96       	adiw	r26, 0x01	; 1
 5c4:	fc 93       	st	X, r31
 5c6:	ee 93       	st	-X, r30
	return Size;
}
 5c8:	08 95       	ret

000005ca <Endpoint_Write_Stream_LE>:
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
 5ca:	af 92       	push	r10
 5cc:	bf 92       	push	r11
 5ce:	cf 92       	push	r12
 5d0:	df 92       	push	r13
 5d2:	ef 92       	push	r14
 5d4:	ff 92       	push	r15
 5d6:	1f 93       	push	r17
 5d8:	cf 93       	push	r28
 5da:	df 93       	push	r29
 5dc:	ec 01       	movw	r28, r24
 5de:	7b 01       	movw	r14, r22
 5e0:	6a 01       	movw	r12, r20
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	uint16_t BytesInTransfer = 0;
	uint8_t  ErrorCode;

	if ((ErrorCode = Endpoint_WaitUntilReady()))
 5e2:	52 d1       	rcall	.+676    	; 0x888 <Endpoint_WaitUntilReady>
 5e4:	18 2f       	mov	r17, r24
 5e6:	88 23       	and	r24, r24
 5e8:	a9 f5       	brne	.+106    	; 0x654 <Endpoint_Write_Stream_LE+0x8a>
 5ea:	c1 14       	cp	r12, r1
	  return ErrorCode;

	if (BytesProcessed != NULL)
 5ec:	d1 04       	cpc	r13, r1
 5ee:	39 f0       	breq	.+14     	; 0x5fe <Endpoint_Write_Stream_LE+0x34>
 5f0:	f6 01       	movw	r30, r12
	{
		Length -= *BytesProcessed;
 5f2:	20 81       	ld	r18, Z
 5f4:	31 81       	ldd	r19, Z+1	; 0x01
 5f6:	e2 1a       	sub	r14, r18
 5f8:	f3 0a       	sbc	r15, r19
 5fa:	c2 0f       	add	r28, r18
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
 5fc:	d3 1f       	adc	r29, r19
 5fe:	aa 24       	eor	r10, r10

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
 600:	bb 24       	eor	r11, r11
 602:	23 c0       	rjmp	.+70     	; 0x64a <Endpoint_Write_Stream_LE+0x80>
 604:	80 91 e8 00 	lds	r24, 0x00E8
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
 608:	85 fd       	sbrc	r24, 5
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
	{
		if (!(Endpoint_IsReadWriteAllowed()))
 60a:	16 c0       	rjmp	.+44     	; 0x638 <Endpoint_Write_Stream_LE+0x6e>
 60c:	80 91 e8 00 	lds	r24, 0x00E8
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 610:	8e 77       	andi	r24, 0x7E	; 126
 612:	80 93 e8 00 	sts	0x00E8, r24
 616:	fa d3       	rcall	.+2036   	; 0xe0c <USB_USBTask>
		{
			TEMPLATE_CLEAR_ENDPOINT();

			#if !defined(INTERRUPT_CONTROL_ENDPOINT)
			USB_USBTask();
 618:	c1 14       	cp	r12, r1
 61a:	d1 04       	cpc	r13, r1
			#endif

			if (BytesProcessed != NULL)
 61c:	49 f0       	breq	.+18     	; 0x630 <Endpoint_Write_Stream_LE+0x66>
 61e:	f6 01       	movw	r30, r12
 620:	80 81       	ld	r24, Z
			{
				*BytesProcessed += BytesInTransfer;
 622:	91 81       	ldd	r25, Z+1	; 0x01
 624:	8a 0d       	add	r24, r10
 626:	9b 1d       	adc	r25, r11
 628:	91 83       	std	Z+1, r25	; 0x01
 62a:	80 83       	st	Z, r24
 62c:	15 e0       	ldi	r17, 0x05	; 5
 62e:	12 c0       	rjmp	.+36     	; 0x654 <Endpoint_Write_Stream_LE+0x8a>
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
 630:	2b d1       	rcall	.+598    	; 0x888 <Endpoint_WaitUntilReady>
 632:	88 23       	and	r24, r24
			}

			if ((ErrorCode = Endpoint_WaitUntilReady()))
 634:	51 f0       	breq	.+20     	; 0x64a <Endpoint_Write_Stream_LE+0x80>
 636:	0d c0       	rjmp	.+26     	; 0x652 <Endpoint_Write_Stream_LE+0x88>
 638:	89 91       	ld	r24, Y+
 63a:	80 93 f1 00 	sts	0x00F1, r24
			  return ErrorCode;
		}
		else
		{
			TEMPLATE_TRANSFER_BYTE(DataStream);
 63e:	08 94       	sec
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
 640:	e1 08       	sbc	r14, r1
 642:	f1 08       	sbc	r15, r1
			TEMPLATE_BUFFER_MOVE(DataStream, 1);
			Length--;
 644:	08 94       	sec
 646:	a1 1c       	adc	r10, r1
 648:	b1 1c       	adc	r11, r1
			BytesInTransfer++;
 64a:	e1 14       	cp	r14, r1
 64c:	f1 04       	cpc	r15, r1
 64e:	d1 f6       	brne	.-76     	; 0x604 <Endpoint_Write_Stream_LE+0x3a>
	{
		Length -= *BytesProcessed;
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
 650:	01 c0       	rjmp	.+2      	; 0x654 <Endpoint_Write_Stream_LE+0x8a>
 652:	18 2f       	mov	r17, r24
 654:	81 2f       	mov	r24, r17
 656:	df 91       	pop	r29
			{
				*BytesProcessed += BytesInTransfer;
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
			}

			if ((ErrorCode = Endpoint_WaitUntilReady()))
 658:	cf 91       	pop	r28
			BytesInTransfer++;
		}
	}

	return ENDPOINT_RWSTREAM_NoError;
}
 65a:	1f 91       	pop	r17
 65c:	ff 90       	pop	r15
 65e:	ef 90       	pop	r14
 660:	df 90       	pop	r13
 662:	cf 90       	pop	r12
 664:	bf 90       	pop	r11
 666:	af 90       	pop	r10
 668:	08 95       	ret

0000066a <Endpoint_Write_Control_Stream_LE>:
 66a:	20 91 19 01 	lds	r18, 0x0119
 66e:	30 91 1a 01 	lds	r19, 0x011A
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
 672:	26 17       	cp	r18, r22
 674:	37 07       	cpc	r19, r23
 676:	20 f4       	brcc	.+8      	; 0x680 <Endpoint_Write_Control_Stream_LE+0x16>
 678:	b9 01       	movw	r22, r18
 67a:	fc 01       	movw	r30, r24
 67c:	20 e0       	ldi	r18, 0x00	; 0
 67e:	37 c0       	rjmp	.+110    	; 0x6ee <Endpoint_Write_Control_Stream_LE+0x84>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
 680:	61 15       	cp	r22, r1
 682:	71 05       	cpc	r23, r1
 684:	d1 f7       	brne	.-12     	; 0x67a <Endpoint_Write_Control_Stream_LE+0x10>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 686:	20 91 e8 00 	lds	r18, 0x00E8
 68a:	2e 77       	andi	r18, 0x7E	; 126
 68c:	20 93 e8 00 	sts	0x00E8, r18
 690:	f4 cf       	rjmp	.-24     	; 0x67a <Endpoint_Write_Control_Stream_LE+0x10>
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
 692:	80 91 12 01 	lds	r24, 0x0112

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
 696:	88 23       	and	r24, r24
 698:	09 f4       	brne	.+2      	; 0x69c <Endpoint_Write_Control_Stream_LE+0x32>
 69a:	3f c0       	rjmp	.+126    	; 0x71a <Endpoint_Write_Control_Stream_LE+0xb0>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
 69c:	85 30       	cpi	r24, 0x05	; 5
 69e:	c9 f1       	breq	.+114    	; 0x712 <Endpoint_Write_Control_Stream_LE+0xa8>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 6a0:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
 6a4:	83 fd       	sbrc	r24, 3
 6a6:	37 c0       	rjmp	.+110    	; 0x716 <Endpoint_Write_Control_Stream_LE+0xac>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 6a8:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
 6ac:	82 fd       	sbrc	r24, 2
 6ae:	2b c0       	rjmp	.+86     	; 0x706 <Endpoint_Write_Control_Stream_LE+0x9c>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 6b0:	80 91 e8 00 	lds	r24, 0x00E8
		  break;

		if (Endpoint_IsINReady())
 6b4:	80 ff       	sbrs	r24, 0
 6b6:	1b c0       	rjmp	.+54     	; 0x6ee <Endpoint_Write_Control_Stream_LE+0x84>
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
 6b8:	80 91 f2 00 	lds	r24, 0x00F2
 6bc:	90 91 f3 00 	lds	r25, 0x00F3
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
 6c0:	06 c0       	rjmp	.+12     	; 0x6ce <Endpoint_Write_Control_Stream_LE+0x64>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
 6c2:	21 91       	ld	r18, Z+
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
 6c4:	20 93 f1 00 	sts	0x00F1, r18
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
 6c8:	61 50       	subi	r22, 0x01	; 1
 6ca:	70 40       	sbci	r23, 0x00	; 0
				BytesInEndpoint++;
 6cc:	01 96       	adiw	r24, 0x01	; 1

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
 6ce:	61 15       	cp	r22, r1
 6d0:	71 05       	cpc	r23, r1
 6d2:	19 f0       	breq	.+6      	; 0x6da <Endpoint_Write_Control_Stream_LE+0x70>
 6d4:	88 30       	cpi	r24, 0x08	; 8
 6d6:	91 05       	cpc	r25, r1
 6d8:	a0 f3       	brcs	.-24     	; 0x6c2 <Endpoint_Write_Control_Stream_LE+0x58>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
 6da:	21 e0       	ldi	r18, 0x01	; 1
 6dc:	88 30       	cpi	r24, 0x08	; 8
 6de:	91 05       	cpc	r25, r1
 6e0:	09 f0       	breq	.+2      	; 0x6e4 <Endpoint_Write_Control_Stream_LE+0x7a>
 6e2:	20 e0       	ldi	r18, 0x00	; 0
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 6e4:	80 91 e8 00 	lds	r24, 0x00E8
 6e8:	8e 77       	andi	r24, 0x7E	; 126
 6ea:	80 93 e8 00 	sts	0x00E8, r24
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
 6ee:	61 15       	cp	r22, r1
 6f0:	71 05       	cpc	r23, r1
 6f2:	79 f6       	brne	.-98     	; 0x692 <Endpoint_Write_Control_Stream_LE+0x28>
 6f4:	22 23       	and	r18, r18
 6f6:	69 f6       	brne	.-102    	; 0x692 <Endpoint_Write_Control_Stream_LE+0x28>
 6f8:	06 c0       	rjmp	.+12     	; 0x706 <Endpoint_Write_Control_Stream_LE+0x9c>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
 6fa:	80 91 12 01 	lds	r24, 0x0112

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
 6fe:	88 23       	and	r24, r24
 700:	61 f0       	breq	.+24     	; 0x71a <Endpoint_Write_Control_Stream_LE+0xb0>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
 702:	85 30       	cpi	r24, 0x05	; 5
 704:	61 f0       	breq	.+24     	; 0x71e <Endpoint_Write_Control_Stream_LE+0xb4>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 706:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
 70a:	82 ff       	sbrs	r24, 2
 70c:	f6 cf       	rjmp	.-20     	; 0x6fa <Endpoint_Write_Control_Stream_LE+0x90>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
 70e:	80 e0       	ldi	r24, 0x00	; 0
 710:	08 95       	ret
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
 712:	83 e0       	ldi	r24, 0x03	; 3
 714:	08 95       	ret
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
 716:	81 e0       	ldi	r24, 0x01	; 1
 718:	08 95       	ret
	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
 71a:	82 e0       	ldi	r24, 0x02	; 2
 71c:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
 71e:	83 e0       	ldi	r24, 0x03	; 3
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
 720:	08 95       	ret

00000722 <Endpoint_Write_Control_PStream_LE>:
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
 722:	20 91 19 01 	lds	r18, 0x0119
 726:	30 91 1a 01 	lds	r19, 0x011A
 72a:	26 17       	cp	r18, r22
 72c:	37 07       	cpc	r19, r23
 72e:	20 f4       	brcc	.+8      	; 0x738 <Endpoint_Write_Control_PStream_LE+0x16>
 730:	b9 01       	movw	r22, r18
 732:	fc 01       	movw	r30, r24
 734:	20 e0       	ldi	r18, 0x00	; 0
 736:	38 c0       	rjmp	.+112    	; 0x7a8 <Endpoint_Write_Control_PStream_LE+0x86>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
 738:	61 15       	cp	r22, r1
 73a:	71 05       	cpc	r23, r1
 73c:	d1 f7       	brne	.-12     	; 0x732 <Endpoint_Write_Control_PStream_LE+0x10>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 73e:	20 91 e8 00 	lds	r18, 0x00E8
 742:	2e 77       	andi	r18, 0x7E	; 126
 744:	20 93 e8 00 	sts	0x00E8, r18
 748:	f4 cf       	rjmp	.-24     	; 0x732 <Endpoint_Write_Control_PStream_LE+0x10>
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
 74a:	80 91 12 01 	lds	r24, 0x0112

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
 74e:	88 23       	and	r24, r24
 750:	09 f4       	brne	.+2      	; 0x754 <Endpoint_Write_Control_PStream_LE+0x32>
 752:	40 c0       	rjmp	.+128    	; 0x7d4 <Endpoint_Write_Control_PStream_LE+0xb2>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
 754:	85 30       	cpi	r24, 0x05	; 5
 756:	d1 f1       	breq	.+116    	; 0x7cc <Endpoint_Write_Control_PStream_LE+0xaa>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 758:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
 75c:	83 fd       	sbrc	r24, 3
 75e:	38 c0       	rjmp	.+112    	; 0x7d0 <Endpoint_Write_Control_PStream_LE+0xae>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 760:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
 764:	82 fd       	sbrc	r24, 2
 766:	2c c0       	rjmp	.+88     	; 0x7c0 <Endpoint_Write_Control_PStream_LE+0x9e>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 768:	80 91 e8 00 	lds	r24, 0x00E8
		  break;

		if (Endpoint_IsINReady())
 76c:	80 ff       	sbrs	r24, 0
 76e:	1c c0       	rjmp	.+56     	; 0x7a8 <Endpoint_Write_Control_PStream_LE+0x86>
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
 770:	80 91 f2 00 	lds	r24, 0x00F2
 774:	90 91 f3 00 	lds	r25, 0x00F3
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
 778:	07 c0       	rjmp	.+14     	; 0x788 <Endpoint_Write_Control_PStream_LE+0x66>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
 77a:	24 91       	lpm	r18, Z
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
 77c:	20 93 f1 00 	sts	0x00F1, r18
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
 780:	31 96       	adiw	r30, 0x01	; 1
				Length--;
 782:	61 50       	subi	r22, 0x01	; 1
 784:	70 40       	sbci	r23, 0x00	; 0
				BytesInEndpoint++;
 786:	01 96       	adiw	r24, 0x01	; 1

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
 788:	61 15       	cp	r22, r1
 78a:	71 05       	cpc	r23, r1
 78c:	19 f0       	breq	.+6      	; 0x794 <Endpoint_Write_Control_PStream_LE+0x72>
 78e:	88 30       	cpi	r24, 0x08	; 8
 790:	91 05       	cpc	r25, r1
 792:	98 f3       	brcs	.-26     	; 0x77a <Endpoint_Write_Control_PStream_LE+0x58>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
 794:	21 e0       	ldi	r18, 0x01	; 1
 796:	88 30       	cpi	r24, 0x08	; 8
 798:	91 05       	cpc	r25, r1
 79a:	09 f0       	breq	.+2      	; 0x79e <Endpoint_Write_Control_PStream_LE+0x7c>
 79c:	20 e0       	ldi	r18, 0x00	; 0
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 79e:	80 91 e8 00 	lds	r24, 0x00E8
 7a2:	8e 77       	andi	r24, 0x7E	; 126
 7a4:	80 93 e8 00 	sts	0x00E8, r24
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
 7a8:	61 15       	cp	r22, r1
 7aa:	71 05       	cpc	r23, r1
 7ac:	71 f6       	brne	.-100    	; 0x74a <Endpoint_Write_Control_PStream_LE+0x28>
 7ae:	22 23       	and	r18, r18
 7b0:	61 f6       	brne	.-104    	; 0x74a <Endpoint_Write_Control_PStream_LE+0x28>
 7b2:	06 c0       	rjmp	.+12     	; 0x7c0 <Endpoint_Write_Control_PStream_LE+0x9e>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
 7b4:	80 91 12 01 	lds	r24, 0x0112

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
 7b8:	88 23       	and	r24, r24
 7ba:	61 f0       	breq	.+24     	; 0x7d4 <Endpoint_Write_Control_PStream_LE+0xb2>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
 7bc:	85 30       	cpi	r24, 0x05	; 5
 7be:	61 f0       	breq	.+24     	; 0x7d8 <Endpoint_Write_Control_PStream_LE+0xb6>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 7c0:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
 7c4:	82 ff       	sbrs	r24, 2
 7c6:	f6 cf       	rjmp	.-20     	; 0x7b4 <Endpoint_Write_Control_PStream_LE+0x92>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
 7c8:	80 e0       	ldi	r24, 0x00	; 0
 7ca:	08 95       	ret
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
 7cc:	83 e0       	ldi	r24, 0x03	; 3
 7ce:	08 95       	ret
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
 7d0:	81 e0       	ldi	r24, 0x01	; 1
 7d2:	08 95       	ret
	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
 7d4:	82 e0       	ldi	r24, 0x02	; 2
 7d6:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
 7d8:	83 e0       	ldi	r24, 0x03	; 3
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
 7da:	08 95       	ret

000007dc <Endpoint_ConfigureEndpoint_Prv>:
	UECFG0X = UECFG0XData;
	UECFG1X = UECFG1XData;

	return Endpoint_IsConfigured();
#else
	for (uint8_t EPNum = Number; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
 7dc:	98 2f       	mov	r25, r24
 7de:	2a c0       	rjmp	.+84     	; 0x834 <Endpoint_ConfigureEndpoint_Prv+0x58>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 7e0:	90 93 e9 00 	sts	0x00E9, r25
		uint8_t UECFG1XTemp;
		uint8_t UEIENXTemp;

		Endpoint_SelectEndpoint(EPNum);

		if (EPNum == Number)
 7e4:	98 17       	cp	r25, r24
 7e6:	39 f0       	breq	.+14     	; 0x7f6 <Endpoint_ConfigureEndpoint_Prv+0x1a>
			UECFG1XTemp = UECFG1XData;
			UEIENXTemp  = 0;
		}
		else
		{
			UECFG0XTemp = UECFG0X;
 7e8:	70 91 ec 00 	lds	r23, 0x00EC
			UECFG1XTemp = UECFG1X;
 7ec:	20 91 ed 00 	lds	r18, 0x00ED
			UEIENXTemp  = UEIENX;
 7f0:	50 91 f0 00 	lds	r21, 0x00F0
 7f4:	03 c0       	rjmp	.+6      	; 0x7fc <Endpoint_ConfigureEndpoint_Prv+0x20>
		Endpoint_SelectEndpoint(EPNum);

		if (EPNum == Number)
		{
			UECFG0XTemp = UECFG0XData;
			UECFG1XTemp = UECFG1XData;
 7f6:	24 2f       	mov	r18, r20

		Endpoint_SelectEndpoint(EPNum);

		if (EPNum == Number)
		{
			UECFG0XTemp = UECFG0XData;
 7f8:	76 2f       	mov	r23, r22
			UECFG1XTemp = UECFG1XData;
			UEIENXTemp  = 0;
 7fa:	50 e0       	ldi	r21, 0x00	; 0
			UECFG0XTemp = UECFG0X;
			UECFG1XTemp = UECFG1X;
			UEIENXTemp  = UEIENX;
		}

		if (!(UECFG1XTemp & (1 << ALLOC)))
 7fc:	21 ff       	sbrs	r18, 1
 7fe:	19 c0       	rjmp	.+50     	; 0x832 <Endpoint_ConfigureEndpoint_Prv+0x56>
			 *  to and from a host.
			 */
			static inline void Endpoint_DisableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_DisableEndpoint(void)
			{
				UECONX &= ~(1 << EPEN);
 800:	30 91 eb 00 	lds	r19, 0x00EB
 804:	3e 7f       	andi	r19, 0xFE	; 254
 806:	30 93 eb 00 	sts	0x00EB, r19
		  continue;

		Endpoint_DisableEndpoint();
		UECFG1X &= ~(1 << ALLOC);
 80a:	30 91 ed 00 	lds	r19, 0x00ED
 80e:	3d 7f       	andi	r19, 0xFD	; 253
 810:	30 93 ed 00 	sts	0x00ED, r19
			 *  \note Endpoints must first be configured properly via \ref Endpoint_ConfigureEndpoint().
			 */
			static inline void Endpoint_EnableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_EnableEndpoint(void)
			{
				UECONX |= (1 << EPEN);
 814:	30 91 eb 00 	lds	r19, 0x00EB
 818:	31 60       	ori	r19, 0x01	; 1
 81a:	30 93 eb 00 	sts	0x00EB, r19

		Endpoint_EnableEndpoint();
		UECFG0X = UECFG0XTemp;
 81e:	70 93 ec 00 	sts	0x00EC, r23
		UECFG1X = UECFG1XTemp;
 822:	20 93 ed 00 	sts	0x00ED, r18
		UEIENX  = UEIENXTemp;
 826:	50 93 f0 00 	sts	0x00F0, r21
			 *  \return Boolean \c true if the currently selected endpoint has been configured, \c false otherwise.
			 */
			static inline bool Endpoint_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsConfigured(void)
			{
				return ((UESTA0X & (1 << CFGOK)) ? true : false);
 82a:	20 91 ee 00 	lds	r18, 0x00EE

		if (!(Endpoint_IsConfigured()))
 82e:	27 ff       	sbrs	r18, 7
 830:	08 c0       	rjmp	.+16     	; 0x842 <Endpoint_ConfigureEndpoint_Prv+0x66>
	UECFG0X = UECFG0XData;
	UECFG1X = UECFG1XData;

	return Endpoint_IsConfigured();
#else
	for (uint8_t EPNum = Number; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
 832:	9f 5f       	subi	r25, 0xFF	; 255
 834:	97 30       	cpi	r25, 0x07	; 7
 836:	a0 f2       	brcs	.-88     	; 0x7e0 <Endpoint_ConfigureEndpoint_Prv+0x4>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 838:	8f 70       	andi	r24, 0x0F	; 15
 83a:	80 93 e9 00 	sts	0x00E9, r24
		if (!(Endpoint_IsConfigured()))
		  return false;
	}

	Endpoint_SelectEndpoint(Number);
	return true;
 83e:	81 e0       	ldi	r24, 0x01	; 1
 840:	08 95       	ret
		UECFG0X = UECFG0XTemp;
		UECFG1X = UECFG1XTemp;
		UEIENX  = UEIENXTemp;

		if (!(Endpoint_IsConfigured()))
		  return false;
 842:	80 e0       	ldi	r24, 0x00	; 0
	}

	Endpoint_SelectEndpoint(Number);
	return true;
#endif
}
 844:	08 95       	ret

00000846 <Endpoint_ClearStatusStage>:
	}
}

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
 846:	80 91 13 01 	lds	r24, 0x0113
 84a:	87 ff       	sbrs	r24, 7
 84c:	13 c0       	rjmp	.+38     	; 0x874 <Endpoint_ClearStatusStage+0x2e>
 84e:	04 c0       	rjmp	.+8      	; 0x858 <Endpoint_ClearStatusStage+0x12>
	{
		while (!(Endpoint_IsOUTReceived()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
 850:	80 91 12 01 	lds	r24, 0x0112
 854:	88 23       	and	r24, r24
 856:	b9 f0       	breq	.+46     	; 0x886 <Endpoint_ClearStatusStage+0x40>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 858:	80 91 e8 00 	lds	r24, 0x00E8

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
	{
		while (!(Endpoint_IsOUTReceived()))
 85c:	82 ff       	sbrs	r24, 2
 85e:	f8 cf       	rjmp	.-16     	; 0x850 <Endpoint_ClearStatusStage+0xa>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 860:	80 91 e8 00 	lds	r24, 0x00E8
 864:	8b 77       	andi	r24, 0x7B	; 123
 866:	80 93 e8 00 	sts	0x00E8, r24
 86a:	08 95       	ret
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
 86c:	80 91 12 01 	lds	r24, 0x0112
 870:	88 23       	and	r24, r24
 872:	49 f0       	breq	.+18     	; 0x886 <Endpoint_ClearStatusStage+0x40>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 874:	80 91 e8 00 	lds	r24, 0x00E8

		Endpoint_ClearOUT();
	}
	else
	{
		while (!(Endpoint_IsINReady()))
 878:	80 ff       	sbrs	r24, 0
 87a:	f8 cf       	rjmp	.-16     	; 0x86c <Endpoint_ClearStatusStage+0x26>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 87c:	80 91 e8 00 	lds	r24, 0x00E8
 880:	8e 77       	andi	r24, 0x7E	; 126
 882:	80 93 e8 00 	sts	0x00E8, r24
 886:	08 95       	ret

00000888 <Endpoint_WaitUntilReady>:
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
 888:	80 91 e4 00 	lds	r24, 0x00E4
 88c:	90 91 e5 00 	lds	r25, 0x00E5
 890:	45 e6       	ldi	r20, 0x65	; 101
 892:	01 c0       	rjmp	.+2      	; 0x896 <Endpoint_WaitUntilReady+0xe>
 894:	c9 01       	movw	r24, r18
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
 896:	20 91 ec 00 	lds	r18, 0x00EC
 89a:	20 ff       	sbrs	r18, 0
 89c:	23 c0       	rjmp	.+70     	; 0x8e4 <Endpoint_WaitUntilReady+0x5c>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 89e:	20 91 e8 00 	lds	r18, 0x00E8

	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
 8a2:	20 fd       	sbrc	r18, 0
 8a4:	15 c0       	rjmp	.+42     	; 0x8d0 <Endpoint_WaitUntilReady+0x48>
		{
			if (Endpoint_IsOUTReceived())
			  return ENDPOINT_READYWAIT_NoError;
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;
 8a6:	20 91 12 01 	lds	r18, 0x0112

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
 8aa:	22 23       	and	r18, r18
 8ac:	99 f0       	breq	.+38     	; 0x8d4 <Endpoint_WaitUntilReady+0x4c>
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
 8ae:	25 30       	cpi	r18, 0x05	; 5
 8b0:	99 f0       	breq	.+38     	; 0x8d8 <Endpoint_WaitUntilReady+0x50>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
 8b2:	20 91 eb 00 	lds	r18, 0x00EB
		  return ENDPOINT_READYWAIT_BusSuspended;
		else if (Endpoint_IsStalled())
 8b6:	25 fd       	sbrc	r18, 5
 8b8:	11 c0       	rjmp	.+34     	; 0x8dc <Endpoint_WaitUntilReady+0x54>
 8ba:	20 91 e4 00 	lds	r18, 0x00E4
 8be:	30 91 e5 00 	lds	r19, 0x00E5
		  return ENDPOINT_READYWAIT_EndpointStalled;

		uint16_t CurrentFrameNumber = USB_Device_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
 8c2:	28 17       	cp	r18, r24
 8c4:	39 07       	cpc	r19, r25
 8c6:	39 f3       	breq	.-50     	; 0x896 <Endpoint_WaitUntilReady+0xe>
 8c8:	41 50       	subi	r20, 0x01	; 1
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
 8ca:	21 f7       	brne	.-56     	; 0x894 <Endpoint_WaitUntilReady+0xc>
			  return ENDPOINT_READYWAIT_Timeout;
 8cc:	84 e0       	ldi	r24, 0x04	; 4
 8ce:	08 95       	ret
	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
 8d0:	80 e0       	ldi	r24, 0x00	; 0
 8d2:	08 95       	ret
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
 8d4:	82 e0       	ldi	r24, 0x02	; 2
 8d6:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_READYWAIT_BusSuspended;
 8d8:	83 e0       	ldi	r24, 0x03	; 3
 8da:	08 95       	ret
		else if (Endpoint_IsStalled())
		  return ENDPOINT_READYWAIT_EndpointStalled;
 8dc:	81 e0       	ldi	r24, 0x01	; 1
 8de:	08 95       	ret
			  return ENDPOINT_READYWAIT_NoError;
		}
		else
		{
			if (Endpoint_IsOUTReceived())
			  return ENDPOINT_READYWAIT_NoError;
 8e0:	80 e0       	ldi	r24, 0x00	; 0

			if (!(TimeoutMSRem--))
			  return ENDPOINT_READYWAIT_Timeout;
		}
	}
}
 8e2:	08 95       	ret
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 8e4:	20 91 e8 00 	lds	r18, 0x00E8
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
		}
		else
		{
			if (Endpoint_IsOUTReceived())
 8e8:	22 ff       	sbrs	r18, 2
 8ea:	dd cf       	rjmp	.-70     	; 0x8a6 <Endpoint_WaitUntilReady+0x1e>
 8ec:	f9 cf       	rjmp	.-14     	; 0x8e0 <Endpoint_WaitUntilReady+0x58>

000008ee <USB_ResetInterface>:

	USB_IsInitialized = false;
}

void USB_ResetInterface(void)
{
 8ee:	0f 93       	push	r16
 8f0:	1f 93       	push	r17
 8f2:	cf 93       	push	r28
 8f4:	df 93       	push	r29
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
 8f6:	4e d0       	rcall	.+156    	; 0x994 <USB_INT_DisableAllInterrupts>
 8f8:	55 d0       	rcall	.+170    	; 0x9a4 <USB_INT_ClearAllInterrupts>
	USB_INT_ClearAllInterrupts();
 8fa:	c8 ed       	ldi	r28, 0xD8	; 216
 8fc:	d0 e0       	ldi	r29, 0x00	; 0
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
 8fe:	88 81       	ld	r24, Y
 900:	8f 77       	andi	r24, 0x7F	; 127
 902:	88 83       	st	Y, r24
 904:	88 81       	ld	r24, Y
 906:	80 68       	ori	r24, 0x80	; 128
				USBCON |=  (1 << USBE);
 908:	88 83       	st	Y, r24
 90a:	88 81       	ld	r24, Y
 90c:	8f 7d       	andi	r24, 0xDF	; 223
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
 90e:	88 83       	st	Y, r24
 910:	e7 ed       	ldi	r30, 0xD7	; 215
 912:	f0 e0       	ldi	r31, 0x00	; 0

	if (USB_CurrentMode == USB_MODE_Device)
	{
		#if defined(USB_CAN_BE_DEVICE)
		#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
		UHWCON |=  (1 << UIMOD);
 914:	80 81       	ld	r24, Z
 916:	80 68       	ori	r24, 0x80	; 128
 918:	80 83       	st	Z, r24
 91a:	19 bc       	out	0x29, r1	; 41
 91c:	10 92 12 01 	sts	0x0112, r1
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState                 = DEVICE_STATE_Unattached;
 920:	10 92 0e 01 	sts	0x010E, r1
	USB_Device_ConfigurationNumber  = 0;
 924:	10 92 10 01 	sts	0x0110, r1

	#if !defined(NO_DEVICE_REMOTE_WAKEUP)
	USB_Device_RemoteWakeupEnabled  = false;
 928:	10 92 0f 01 	sts	0x010F, r1
	#endif

	#if !defined(NO_DEVICE_SELF_POWER)
	USB_Device_CurrentlySelfPowered = false;
 92c:	00 ee       	ldi	r16, 0xE0	; 224
 92e:	10 e0       	ldi	r17, 0x00	; 0
			}

			static inline void USB_Device_SetFullSpeed(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetFullSpeed(void)
			{
				UDCON &= ~(1 << LSM);
 930:	f8 01       	movw	r30, r16
 932:	80 81       	ld	r24, Z
 934:	8b 7f       	andi	r24, 0xFB	; 251
 936:	80 83       	st	Z, r24
 938:	88 81       	ld	r24, Y
 93a:	81 60       	ori	r24, 0x01	; 1
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBCON |= (1 << VBUSTE);
 93c:	88 83       	st	Y, r24
 93e:	80 e0       	ldi	r24, 0x00	; 0
 940:	60 e0       	ldi	r22, 0x00	; 0
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
 942:	42 e0       	ldi	r20, 0x02	; 2
 944:	4b df       	rcall	.-362    	; 0x7dc <Endpoint_ConfigureEndpoint_Prv>
 946:	e1 ee       	ldi	r30, 0xE1	; 225
 948:	f0 e0       	ldi	r31, 0x00	; 0
 94a:	80 81       	ld	r24, Z
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
 94c:	8e 7f       	andi	r24, 0xFE	; 254
 94e:	80 83       	st	Z, r24
 950:	e2 ee       	ldi	r30, 0xE2	; 226
 952:	f0 e0       	ldi	r31, 0x00	; 0
 954:	80 81       	ld	r24, Z
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
 956:	81 60       	ori	r24, 0x01	; 1
 958:	80 83       	st	Z, r24
 95a:	80 81       	ld	r24, Z
 95c:	88 60       	ori	r24, 0x08	; 8
 95e:	80 83       	st	Z, r24
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
 960:	f8 01       	movw	r30, r16
 962:	80 81       	ld	r24, Z
 964:	8e 7f       	andi	r24, 0xFE	; 254
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
 966:	80 83       	st	Z, r24
 968:	88 81       	ld	r24, Y
 96a:	80 61       	ori	r24, 0x10	; 16
 96c:	88 83       	st	Y, r24

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON |=  (1 << OTGPADE);
 96e:	df 91       	pop	r29
 970:	cf 91       	pop	r28
 972:	1f 91       	pop	r17
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
 974:	0f 91       	pop	r16
 976:	08 95       	ret

00000978 <USB_Init>:
 978:	e8 ed       	ldi	r30, 0xD8	; 216
 97a:	f0 e0       	ldi	r31, 0x00	; 0
 97c:	80 81       	ld	r24, Z
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON &= ~(1 << OTGPADE);
 97e:	8f 7e       	andi	r24, 0xEF	; 239
 980:	80 83       	st	Z, r24

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON |=  (1 << UVREGE);
 982:	e7 ed       	ldi	r30, 0xD7	; 215
 984:	f0 e0       	ldi	r31, 0x00	; 0
 986:	80 81       	ld	r24, Z
 988:	81 60       	ori	r24, 0x01	; 1
 98a:	80 83       	st	Z, r24
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
 98c:	81 e0       	ldi	r24, 0x01	; 1
 98e:	80 93 11 01 	sts	0x0111, r24

	USB_ResetInterface();
 992:	ad cf       	rjmp	.-166    	; 0x8ee <USB_ResetInterface>

00000994 <USB_INT_DisableAllInterrupts>:
#include "../USBInterrupt.h"

void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
 994:	e8 ed       	ldi	r30, 0xD8	; 216
 996:	f0 e0       	ldi	r31, 0x00	; 0
 998:	80 81       	ld	r24, Z
 99a:	8c 7f       	andi	r24, 0xFC	; 252
 99c:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
 99e:	10 92 e2 00 	sts	0x00E2, r1
	#endif
}
 9a2:	08 95       	ret

000009a4 <USB_INT_ClearAllInterrupts>:

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
 9a4:	10 92 da 00 	sts	0x00DA, r1
	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
 9a8:	10 92 e1 00 	sts	0x00E1, r1
	#endif
}
 9ac:	08 95       	ret

000009ae <__vector_10>:

ISR(USB_GEN_vect, ISR_BLOCK)
{
 9ae:	1f 92       	push	r1
 9b0:	0f 92       	push	r0
 9b2:	0f b6       	in	r0, 0x3f	; 63
 9b4:	0f 92       	push	r0
 9b6:	0b b6       	in	r0, 0x3b	; 59
 9b8:	0f 92       	push	r0
 9ba:	11 24       	eor	r1, r1
 9bc:	2f 93       	push	r18
 9be:	3f 93       	push	r19
 9c0:	4f 93       	push	r20
 9c2:	5f 93       	push	r21
 9c4:	6f 93       	push	r22
 9c6:	7f 93       	push	r23
 9c8:	8f 93       	push	r24
 9ca:	9f 93       	push	r25
 9cc:	af 93       	push	r26
 9ce:	bf 93       	push	r27
 9d0:	ef 93       	push	r30
 9d2:	ff 93       	push	r31
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
					case USB_INT_SOFI:
						return (UDINT  & (1 << SOFI));
 9d4:	80 91 e1 00 	lds	r24, 0x00E1
	#if defined(USB_CAN_BE_DEVICE)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
 9d8:	82 ff       	sbrs	r24, 2
 9da:	0a c0       	rjmp	.+20     	; 0x9f0 <__vector_10+0x42>
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
					case USB_INT_SOFI:
						return (UDIEN  & (1 << SOFE));
 9dc:	80 91 e2 00 	lds	r24, 0x00E2
 9e0:	82 ff       	sbrs	r24, 2
 9e2:	06 c0       	rjmp	.+12     	; 0x9f0 <__vector_10+0x42>
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
						break;
					case USB_INT_SOFI:
						UDINT  &= ~(1 << SOFI);
 9e4:	80 91 e1 00 	lds	r24, 0x00E1
 9e8:	8b 7f       	andi	r24, 0xFB	; 251
 9ea:	80 93 e1 00 	sts	0x00E1, r24
	{
		USB_INT_Clear(USB_INT_SOFI);

		EVENT_USB_Device_StartOfFrame();
 9ee:	28 dc       	rcall	.-1968   	; 0x240 <EVENT_USB_Device_StartOfFrame>
 9f0:	80 91 da 00 	lds	r24, 0x00DA
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBINT & (1 << VBUSTI));
 9f4:	80 ff       	sbrs	r24, 0
	}
	#endif

	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	if (USB_INT_HasOccurred(USB_INT_VBUSTI) && USB_INT_IsEnabled(USB_INT_VBUSTI))
 9f6:	1d c0       	rjmp	.+58     	; 0xa32 <__vector_10+0x84>
 9f8:	80 91 d8 00 	lds	r24, 0x00D8
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBCON & (1 << VBUSTE));
 9fc:	80 ff       	sbrs	r24, 0
 9fe:	19 c0       	rjmp	.+50     	; 0xa32 <__vector_10+0x84>
 a00:	80 91 da 00 	lds	r24, 0x00DA
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBINT &= ~(1 << VBUSTI);
 a04:	8e 7f       	andi	r24, 0xFE	; 254
 a06:	80 93 da 00 	sts	0x00DA, r24
 a0a:	80 91 d9 00 	lds	r24, 0x00D9
				 *  \return Boolean \c true if the VBUS line is currently detecting power from a host, \c false otherwise.
				 */
				static inline bool USB_VBUS_GetStatus(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
				static inline bool USB_VBUS_GetStatus(void)
				{
					return ((USBSTA & (1 << VBUS)) ? true : false);
 a0e:	80 ff       	sbrs	r24, 0
	{
		USB_INT_Clear(USB_INT_VBUSTI);

		if (USB_VBUS_GetStatus())
 a10:	0c c0       	rjmp	.+24     	; 0xa2a <__vector_10+0x7c>
 a12:	8c e0       	ldi	r24, 0x0C	; 12

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
 a14:	89 bd       	out	0x29, r24	; 41
 a16:	8e e0       	ldi	r24, 0x0E	; 14
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
 a18:	89 bd       	out	0x29, r24	; 41
 a1a:	09 b4       	in	r0, 0x29	; 41
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			{
				USB_PLL_On();
				while (!(USB_PLL_IsReady()));
 a1c:	00 fe       	sbrs	r0, 0
 a1e:	fd cf       	rjmp	.-6      	; 0xa1a <__vector_10+0x6c>
 a20:	81 e0       	ldi	r24, 0x01	; 1
			}

			USB_DeviceState = DEVICE_STATE_Powered;
 a22:	80 93 12 01 	sts	0x0112, r24
 a26:	e6 db       	rcall	.-2100   	; 0x1f4 <EVENT_USB_Device_Connect>
			EVENT_USB_Device_Connect();
 a28:	04 c0       	rjmp	.+8      	; 0xa32 <__vector_10+0x84>
 a2a:	19 bc       	out	0x29, r1	; 41
 a2c:	10 92 12 01 	sts	0x0112, r1
		else
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			  USB_PLL_Off();

			USB_DeviceState = DEVICE_STATE_Unattached;
 a30:	e7 db       	rcall	.-2098   	; 0x200 <EVENT_USB_Device_Disconnect>
 a32:	80 91 e1 00 	lds	r24, 0x00E1
			EVENT_USB_Device_Disconnect();
 a36:	80 ff       	sbrs	r24, 0
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
 a38:	18 c0       	rjmp	.+48     	; 0xa6a <__vector_10+0xbc>
 a3a:	80 91 e2 00 	lds	r24, 0x00E2
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
 a3e:	80 ff       	sbrs	r24, 0
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
 a40:	14 c0       	rjmp	.+40     	; 0xa6a <__vector_10+0xbc>
 a42:	80 91 e2 00 	lds	r24, 0x00E2
 a46:	8e 7f       	andi	r24, 0xFE	; 254
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
 a48:	80 93 e2 00 	sts	0x00E2, r24
 a4c:	80 91 e2 00 	lds	r24, 0x00E2
 a50:	80 61       	ori	r24, 0x10	; 16
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
 a52:	80 93 e2 00 	sts	0x00E2, r24
 a56:	80 91 d8 00 	lds	r24, 0x00D8
 a5a:	80 62       	ori	r24, 0x20	; 32
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON |=  (1 << FRZCLK);
 a5c:	80 93 d8 00 	sts	0x00D8, r24
 a60:	19 bc       	out	0x29, r1	; 41
 a62:	85 e0       	ldi	r24, 0x05	; 5
 a64:	80 93 12 01 	sts	0x0112, r24

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
		EVENT_USB_Device_Disconnect();
		#else
		USB_DeviceState = DEVICE_STATE_Suspended;
 a68:	d0 d1       	rcall	.+928    	; 0xe0a <USB_Event_Stub>
 a6a:	80 91 e1 00 	lds	r24, 0x00E1
		EVENT_USB_Device_Suspend();
 a6e:	84 ff       	sbrs	r24, 4
 a70:	2d c0       	rjmp	.+90     	; 0xacc <__vector_10+0x11e>
					case USB_INT_IDTI:
						return (USBINT & (1 << IDTI));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
 a72:	80 91 e2 00 	lds	r24, 0x00E2
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
 a76:	84 ff       	sbrs	r24, 4
 a78:	29 c0       	rjmp	.+82     	; 0xacc <__vector_10+0x11e>
					case USB_INT_IDTI:
						return (USBCON & (1 << IDTE));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
 a7a:	8c e0       	ldi	r24, 0x0C	; 12
 a7c:	89 bd       	out	0x29, r24	; 41
 a7e:	8e e0       	ldi	r24, 0x0E	; 14
 a80:	89 bd       	out	0x29, r24	; 41

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
 a82:	09 b4       	in	r0, 0x29	; 41
 a84:	00 fe       	sbrs	r0, 0
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
 a86:	fd cf       	rjmp	.-6      	; 0xa82 <__vector_10+0xd4>
 a88:	80 91 d8 00 	lds	r24, 0x00D8
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
 a8c:	8f 7d       	andi	r24, 0xDF	; 223
 a8e:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
 a92:	80 91 e1 00 	lds	r24, 0x00E1
 a96:	8f 7e       	andi	r24, 0xEF	; 239
 a98:	80 93 e1 00 	sts	0x00E1, r24
						USBINT &= ~(1 << IDTI);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
 a9c:	80 91 e2 00 	lds	r24, 0x00E2
 aa0:	8f 7e       	andi	r24, 0xEF	; 239
 aa2:	80 93 e2 00 	sts	0x00E2, r24
						USBCON &= ~(1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
 aa6:	80 91 e2 00 	lds	r24, 0x00E2
 aaa:	81 60       	ori	r24, 0x01	; 1
 aac:	80 93 e2 00 	sts	0x00E2, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
 ab0:	80 91 0e 01 	lds	r24, 0x010E
 ab4:	88 23       	and	r24, r24
 ab6:	21 f4       	brne	.+8      	; 0xac0 <__vector_10+0x112>
		USB_INT_Clear(USB_INT_WAKEUPI);

		USB_INT_Disable(USB_INT_WAKEUPI);
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_Device_ConfigurationNumber)
 ab8:	80 91 e3 00 	lds	r24, 0x00E3
 abc:	87 ff       	sbrs	r24, 7
 abe:	02 c0       	rjmp	.+4      	; 0xac4 <__vector_10+0x116>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
 ac0:	84 e0       	ldi	r24, 0x04	; 4
 ac2:	01 c0       	rjmp	.+2      	; 0xac6 <__vector_10+0x118>
		  USB_DeviceState = DEVICE_STATE_Configured;
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
 ac4:	81 e0       	ldi	r24, 0x01	; 1
 ac6:	80 93 12 01 	sts	0x0112, r24
 aca:	9f d1       	rcall	.+830    	; 0xe0a <USB_Event_Stub>
 acc:	80 91 e1 00 	lds	r24, 0x00E1
 ad0:	83 ff       	sbrs	r24, 3

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
		#else
		EVENT_USB_Device_WakeUp();
 ad2:	22 c0       	rjmp	.+68     	; 0xb18 <__vector_10+0x16a>
 ad4:	80 91 e2 00 	lds	r24, 0x00E2
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
 ad8:	83 ff       	sbrs	r24, 3
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
 ada:	1e c0       	rjmp	.+60     	; 0xb18 <__vector_10+0x16a>
 adc:	80 91 e1 00 	lds	r24, 0x00E1
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
 ae0:	87 7f       	andi	r24, 0xF7	; 247
 ae2:	80 93 e1 00 	sts	0x00E1, r24
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
 ae6:	82 e0       	ldi	r24, 0x02	; 2
 ae8:	80 93 12 01 	sts	0x0112, r24
 aec:	10 92 0e 01 	sts	0x010E, r1
	{
		USB_INT_Clear(USB_INT_EORSTI);

		USB_DeviceState                = DEVICE_STATE_Default;
 af0:	80 91 e1 00 	lds	r24, 0x00E1
 af4:	8e 7f       	andi	r24, 0xFE	; 254
		USB_Device_ConfigurationNumber = 0;
 af6:	80 93 e1 00 	sts	0x00E1, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
 afa:	80 91 e2 00 	lds	r24, 0x00E2
 afe:	8e 7f       	andi	r24, 0xFE	; 254
 b00:	80 93 e2 00 	sts	0x00E2, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
 b04:	80 91 e2 00 	lds	r24, 0x00E2
 b08:	80 61       	ori	r24, 0x10	; 16
 b0a:	80 93 e2 00 	sts	0x00E2, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
 b0e:	80 e0       	ldi	r24, 0x00	; 0
 b10:	60 e0       	ldi	r22, 0x00	; 0
 b12:	42 e0       	ldi	r20, 0x02	; 2
 b14:	63 de       	rcall	.-826    	; 0x7dc <Endpoint_ConfigureEndpoint_Prv>
 b16:	79 d1       	rcall	.+754    	; 0xe0a <USB_Event_Stub>
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
 b18:	ff 91       	pop	r31
 b1a:	ef 91       	pop	r30
 b1c:	bf 91       	pop	r27
 b1e:	af 91       	pop	r26
 b20:	9f 91       	pop	r25

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
 b22:	8f 91       	pop	r24
 b24:	7f 91       	pop	r23
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
 b26:	6f 91       	pop	r22
 b28:	5f 91       	pop	r21
 b2a:	4f 91       	pop	r20
 b2c:	3f 91       	pop	r19
 b2e:	2f 91       	pop	r18
 b30:	0f 90       	pop	r0
 b32:	0b be       	out	0x3b, r0	; 59
 b34:	0f 90       	pop	r0
 b36:	0f be       	out	0x3f, r0	; 63
 b38:	0f 90       	pop	r0
 b3a:	1f 90       	pop	r1
 b3c:	18 95       	reti

00000b3e <USB_Device_ProcessControlRequest>:
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_Device_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
 b3e:	1f 93       	push	r17
 b40:	cf 93       	push	r28
 b42:	df 93       	push	r29
 b44:	cd b7       	in	r28, 0x3d	; 61
 b46:	de b7       	in	r29, 0x3e	; 62
 b48:	ac 97       	sbiw	r28, 0x2c	; 44
 b4a:	0f b6       	in	r0, 0x3f	; 63
 b4c:	f8 94       	cli
 b4e:	de bf       	out	0x3e, r29	; 62
 b50:	0f be       	out	0x3f, r0	; 63
 b52:	cd bf       	out	0x3d, r28	; 61
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
 b54:	80 e0       	ldi	r24, 0x00	; 0
	USB_ControlRequest.bRequest      = Endpoint_Read_8();
	USB_ControlRequest.wValue        = Endpoint_Read_16_LE();
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;
 b56:	e3 e1       	ldi	r30, 0x13	; 19
 b58:	f1 e0       	ldi	r31, 0x01	; 1
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
 b5a:	90 91 f1 00 	lds	r25, 0x00F1

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_8();
 b5e:	91 93       	st	Z+, r25
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
 b60:	8f 5f       	subi	r24, 0xFF	; 255
 b62:	88 30       	cpi	r24, 0x08	; 8
 b64:	d1 f7       	brne	.-12     	; 0xb5a <USB_Device_ProcessControlRequest+0x1c>
	  *(RequestHeader++) = Endpoint_Read_8();
	#endif

	EVENT_USB_Device_ControlRequest();
 b66:	c6 db       	rcall	.-2164   	; 0x2f4 <EVENT_USB_Device_ControlRequest>
 b68:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 b6c:	83 ff       	sbrs	r24, 3

	if (Endpoint_IsSETUPReceived())
 b6e:	35 c1       	rjmp	.+618    	; 0xdda <USB_Device_ProcessControlRequest+0x29c>
 b70:	80 91 13 01 	lds	r24, 0x0113
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
 b74:	20 91 14 01 	lds	r18, 0x0114

		switch (USB_ControlRequest.bRequest)
 b78:	25 30       	cpi	r18, 0x05	; 5
 b7a:	09 f4       	brne	.+2      	; 0xb7e <USB_Device_ProcessControlRequest+0x40>
 b7c:	84 c0       	rjmp	.+264    	; 0xc86 <USB_Device_ProcessControlRequest+0x148>
 b7e:	26 30       	cpi	r18, 0x06	; 6
 b80:	40 f4       	brcc	.+16     	; 0xb92 <USB_Device_ProcessControlRequest+0x54>
 b82:	21 30       	cpi	r18, 0x01	; 1
 b84:	a1 f1       	breq	.+104    	; 0xbee <USB_Device_ProcessControlRequest+0xb0>
 b86:	21 30       	cpi	r18, 0x01	; 1
 b88:	70 f0       	brcs	.+28     	; 0xba6 <USB_Device_ProcessControlRequest+0x68>
 b8a:	23 30       	cpi	r18, 0x03	; 3
 b8c:	09 f0       	breq	.+2      	; 0xb90 <USB_Device_ProcessControlRequest+0x52>
 b8e:	25 c1       	rjmp	.+586    	; 0xdda <USB_Device_ProcessControlRequest+0x29c>
 b90:	2e c0       	rjmp	.+92     	; 0xbee <USB_Device_ProcessControlRequest+0xb0>
 b92:	28 30       	cpi	r18, 0x08	; 8
 b94:	09 f4       	brne	.+2      	; 0xb98 <USB_Device_ProcessControlRequest+0x5a>
 b96:	f3 c0       	rjmp	.+486    	; 0xd7e <USB_Device_ProcessControlRequest+0x240>
 b98:	29 30       	cpi	r18, 0x09	; 9
 b9a:	09 f4       	brne	.+2      	; 0xb9e <USB_Device_ProcessControlRequest+0x60>
 b9c:	02 c1       	rjmp	.+516    	; 0xda2 <USB_Device_ProcessControlRequest+0x264>
 b9e:	26 30       	cpi	r18, 0x06	; 6
 ba0:	09 f0       	breq	.+2      	; 0xba4 <USB_Device_ProcessControlRequest+0x66>
 ba2:	1b c1       	rjmp	.+566    	; 0xdda <USB_Device_ProcessControlRequest+0x29c>
 ba4:	93 c0       	rjmp	.+294    	; 0xccc <USB_Device_ProcessControlRequest+0x18e>
 ba6:	80 38       	cpi	r24, 0x80	; 128
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
 ba8:	21 f0       	breq	.+8      	; 0xbb2 <USB_Device_ProcessControlRequest+0x74>
 baa:	82 38       	cpi	r24, 0x82	; 130
 bac:	09 f0       	breq	.+2      	; 0xbb0 <USB_Device_ProcessControlRequest+0x72>
 bae:	15 c1       	rjmp	.+554    	; 0xdda <USB_Device_ProcessControlRequest+0x29c>
 bb0:	08 c0       	rjmp	.+16     	; 0xbc2 <USB_Device_ProcessControlRequest+0x84>
 bb2:	80 91 0f 01 	lds	r24, 0x010F
	Endpoint_ClearOUT();
}

static void USB_Device_GetStatus(void)
{
	uint8_t CurrentStatus = 0;
 bb6:	90 91 10 01 	lds	r25, 0x0110
			if (USB_Device_CurrentlySelfPowered)
			  CurrentStatus |= FEATURE_SELFPOWERED_ENABLED;
			#endif

			#if !defined(NO_DEVICE_REMOTE_WAKEUP)
			if (USB_Device_RemoteWakeupEnabled)
 bba:	99 23       	and	r25, r25
 bbc:	71 f0       	breq	.+28     	; 0xbda <USB_Device_ProcessControlRequest+0x9c>
 bbe:	82 60       	ori	r24, 0x02	; 2
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
 bc0:	0c c0       	rjmp	.+24     	; 0xbda <USB_Device_ProcessControlRequest+0x9c>
 bc2:	80 91 17 01 	lds	r24, 0x0117
			#endif
			break;
		case (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_ENDPOINT):
			#if !defined(CONTROL_ONLY_DEVICE)
			Endpoint_SelectEndpoint((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
 bc6:	8f 70       	andi	r24, 0x0F	; 15
 bc8:	80 93 e9 00 	sts	0x00E9, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 bcc:	90 91 eb 00 	lds	r25, 0x00EB
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
 bd0:	81 e0       	ldi	r24, 0x01	; 1

			CurrentStatus = Endpoint_IsStalled();
 bd2:	95 ff       	sbrs	r25, 5
 bd4:	80 e0       	ldi	r24, 0x00	; 0
 bd6:	10 92 e9 00 	sts	0x00E9, r1
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 bda:	90 91 e8 00 	lds	r25, 0x00E8
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 bde:	97 7f       	andi	r25, 0xF7	; 247
 be0:	90 93 e8 00 	sts	0x00E8, r25
 be4:	80 93 f1 00 	sts	0x00F1, r24
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
 be8:	10 92 f1 00 	sts	0x00F1, r1
				UEDATX = (Data >> 8);
 bec:	d3 c0       	rjmp	.+422    	; 0xd94 <USB_Device_ProcessControlRequest+0x256>
 bee:	88 23       	and	r24, r24
				}

				break;
			case REQ_ClearFeature:
			case REQ_SetFeature:
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
 bf0:	19 f0       	breq	.+6      	; 0xbf8 <USB_Device_ProcessControlRequest+0xba>
 bf2:	82 30       	cpi	r24, 0x02	; 2
 bf4:	09 f0       	breq	.+2      	; 0xbf8 <USB_Device_ProcessControlRequest+0xba>
 bf6:	f1 c0       	rjmp	.+482    	; 0xdda <USB_Device_ProcessControlRequest+0x29c>
 bf8:	90 e0       	ldi	r25, 0x00	; 0
	Endpoint_ClearStatusStage();
}

static void USB_Device_ClearSetFeature(void)
{
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
 bfa:	8f 71       	andi	r24, 0x1F	; 31
 bfc:	90 70       	andi	r25, 0x00	; 0
 bfe:	00 97       	sbiw	r24, 0x00	; 0
 c00:	29 f0       	breq	.+10     	; 0xc0c <USB_Device_ProcessControlRequest+0xce>
 c02:	82 30       	cpi	r24, 0x02	; 2
 c04:	91 05       	cpc	r25, r1
 c06:	09 f0       	breq	.+2      	; 0xc0a <USB_Device_ProcessControlRequest+0xcc>
 c08:	e8 c0       	rjmp	.+464    	; 0xdda <USB_Device_ProcessControlRequest+0x29c>
 c0a:	0b c0       	rjmp	.+22     	; 0xc22 <USB_Device_ProcessControlRequest+0xe4>
 c0c:	80 91 15 01 	lds	r24, 0x0115
	{
		#if !defined(NO_DEVICE_REMOTE_WAKEUP)
		case REQREC_DEVICE:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
 c10:	81 30       	cpi	r24, 0x01	; 1
 c12:	09 f0       	breq	.+2      	; 0xc16 <USB_Device_ProcessControlRequest+0xd8>
 c14:	e2 c0       	rjmp	.+452    	; 0xdda <USB_Device_ProcessControlRequest+0x29c>
 c16:	23 30       	cpi	r18, 0x03	; 3
			  USB_Device_RemoteWakeupEnabled = (USB_ControlRequest.bRequest == REQ_SetFeature);
 c18:	09 f0       	breq	.+2      	; 0xc1c <USB_Device_ProcessControlRequest+0xde>
 c1a:	80 e0       	ldi	r24, 0x00	; 0
 c1c:	80 93 10 01 	sts	0x0110, r24
 c20:	2c c0       	rjmp	.+88     	; 0xc7a <USB_Device_ProcessControlRequest+0x13c>
 c22:	80 91 15 01 	lds	r24, 0x0115

			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
 c26:	88 23       	and	r24, r24
 c28:	41 f5       	brne	.+80     	; 0xc7a <USB_Device_ProcessControlRequest+0x13c>
 c2a:	20 91 17 01 	lds	r18, 0x0117
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
 c2e:	2f 70       	andi	r18, 0x0F	; 15
 c30:	09 f4       	brne	.+2      	; 0xc34 <USB_Device_ProcessControlRequest+0xf6>

				if (EndpointIndex == ENDPOINT_CONTROLEP)
 c32:	d3 c0       	rjmp	.+422    	; 0xdda <USB_Device_ProcessControlRequest+0x29c>
 c34:	20 93 e9 00 	sts	0x00E9, r18
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 c38:	80 91 eb 00 	lds	r24, 0x00EB
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
 c3c:	80 ff       	sbrs	r24, 0
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
 c3e:	1d c0       	rjmp	.+58     	; 0xc7a <USB_Device_ProcessControlRequest+0x13c>
 c40:	80 91 14 01 	lds	r24, 0x0114
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
 c44:	83 30       	cpi	r24, 0x03	; 3
 c46:	21 f4       	brne	.+8      	; 0xc50 <USB_Device_ProcessControlRequest+0x112>
 c48:	80 91 eb 00 	lds	r24, 0x00EB
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
 c4c:	80 62       	ori	r24, 0x20	; 32
 c4e:	13 c0       	rjmp	.+38     	; 0xc76 <USB_Device_ProcessControlRequest+0x138>
 c50:	80 91 eb 00 	lds	r24, 0x00EB
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
 c54:	80 61       	ori	r24, 0x10	; 16
 c56:	80 93 eb 00 	sts	0x00EB, r24
 c5a:	81 e0       	ldi	r24, 0x01	; 1
			 *  \param[in] Address  Endpoint address whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t Address)
			{
				UERST = (1 << (Address & ENDPOINT_EPNUM_MASK));
 c5c:	90 e0       	ldi	r25, 0x00	; 0
 c5e:	02 c0       	rjmp	.+4      	; 0xc64 <USB_Device_ProcessControlRequest+0x126>
 c60:	88 0f       	add	r24, r24
 c62:	99 1f       	adc	r25, r25
 c64:	2a 95       	dec	r18
 c66:	e2 f7       	brpl	.-8      	; 0xc60 <USB_Device_ProcessControlRequest+0x122>
 c68:	80 93 ea 00 	sts	0x00EA, r24
 c6c:	10 92 ea 00 	sts	0x00EA, r1
				UERST = 0;
 c70:	80 91 eb 00 	lds	r24, 0x00EB

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
 c74:	88 60       	ori	r24, 0x08	; 8
 c76:	80 93 eb 00 	sts	0x00EB, r24
 c7a:	10 92 e9 00 	sts	0x00E9, r1
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 c7e:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 c82:	87 7f       	andi	r24, 0xF7	; 247
 c84:	8a c0       	rjmp	.+276    	; 0xd9a <USB_Device_ProcessControlRequest+0x25c>
 c86:	88 23       	and	r24, r24
					USB_Device_ClearSetFeature();
				}

				break;
			case REQ_SetAddress:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
 c88:	09 f0       	breq	.+2      	; 0xc8c <USB_Device_ProcessControlRequest+0x14e>
 c8a:	a7 c0       	rjmp	.+334    	; 0xdda <USB_Device_ProcessControlRequest+0x29c>
 c8c:	10 91 15 01 	lds	r17, 0x0115
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t DeviceAddress = (USB_ControlRequest.wValue & 0x7F);
 c90:	1f 77       	andi	r17, 0x7F	; 127
 c92:	80 91 e3 00 	lds	r24, 0x00E3
			#endif

			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				UDADDR = (UDADDR & (1 << ADDEN)) | (Address & 0x7F);
 c96:	80 78       	andi	r24, 0x80	; 128
 c98:	81 2b       	or	r24, r17
 c9a:	80 93 e3 00 	sts	0x00E3, r24
 c9e:	80 91 e8 00 	lds	r24, 0x00E8
 ca2:	87 7f       	andi	r24, 0xF7	; 247
 ca4:	80 93 e8 00 	sts	0x00E8, r24
 ca8:	ce dd       	rcall	.-1124   	; 0x846 <Endpoint_ClearStatusStage>

	USB_Device_SetDeviceAddress(DeviceAddress);

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
 caa:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 cae:	80 ff       	sbrs	r24, 0
 cb0:	fc cf       	rjmp	.-8      	; 0xcaa <USB_Device_ProcessControlRequest+0x16c>

	while (!(Endpoint_IsINReady()));
 cb2:	80 91 e3 00 	lds	r24, 0x00E3
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address)
			{
				(void)Address;
				
				UDADDR |= (1 << ADDEN);
 cb6:	80 68       	ori	r24, 0x80	; 128
 cb8:	80 93 e3 00 	sts	0x00E3, r24
 cbc:	11 23       	and	r17, r17
 cbe:	11 f0       	breq	.+4      	; 0xcc4 <USB_Device_ProcessControlRequest+0x186>

	USB_Device_EnableDeviceAddress(DeviceAddress);

	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
 cc0:	83 e0       	ldi	r24, 0x03	; 3
 cc2:	01 c0       	rjmp	.+2      	; 0xcc6 <USB_Device_ProcessControlRequest+0x188>
 cc4:	82 e0       	ldi	r24, 0x02	; 2
 cc6:	80 93 12 01 	sts	0x0112, r24
 cca:	87 c0       	rjmp	.+270    	; 0xdda <USB_Device_ProcessControlRequest+0x29c>
 ccc:	80 58       	subi	r24, 0x80	; 128
 cce:	82 30       	cpi	r24, 0x02	; 2
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_SetAddress();

				break;
			case REQ_GetDescriptor:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
 cd0:	08 f0       	brcs	.+2      	; 0xcd4 <USB_Device_ProcessControlRequest+0x196>
 cd2:	83 c0       	rjmp	.+262    	; 0xdda <USB_Device_ProcessControlRequest+0x29c>
 cd4:	80 91 15 01 	lds	r24, 0x0115
	    !(defined(USE_FLASH_DESCRIPTORS) || defined(USE_EEPROM_DESCRIPTORS) || defined(USE_RAM_DESCRIPTORS))
	uint8_t DescriptorAddressSpace;
	#endif

	#if !defined(NO_INTERNAL_SERIAL) && (USE_INTERNAL_SERIAL != NO_DESCRIPTOR)
	if (USB_ControlRequest.wValue == ((DTYPE_String << 8) | USE_INTERNAL_SERIAL))
 cd8:	90 91 16 01 	lds	r25, 0x0116
 cdc:	23 e0       	ldi	r18, 0x03	; 3
 cde:	8c 3d       	cpi	r24, 0xDC	; 220
 ce0:	92 07       	cpc	r25, r18
 ce2:	a9 f5       	brne	.+106    	; 0xd4e <USB_Device_ProcessControlRequest+0x210>
 ce4:	83 e0       	ldi	r24, 0x03	; 3
 ce6:	8c 83       	std	Y+4, r24	; 0x04
	{
		USB_Descriptor_Header_t Header;
		uint16_t                UnicodeString[INTERNAL_SERIAL_LENGTH_BITS / 4];
	} SignatureDescriptor;

	SignatureDescriptor.Header.Type = DTYPE_String;
 ce8:	8a e2       	ldi	r24, 0x2A	; 42
 cea:	8b 83       	std	Y+3, r24	; 0x03
	SignatureDescriptor.Header.Size = USB_STRING_LEN(INTERNAL_SERIAL_LENGTH_BITS / 4);
 cec:	5f b7       	in	r21, 0x3f	; 63
 cee:	f8 94       	cli
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
 cf0:	de 01       	movw	r26, r28
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
 cf2:	13 96       	adiw	r26, 0x03	; 3
				__builtin_ssrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				cli();
				#endif

				GCC_MEMORY_BARRIER();
 cf4:	80 e0       	ldi	r24, 0x00	; 0
 cf6:	90 e0       	ldi	r25, 0x00	; 0
 cf8:	4e e0       	ldi	r20, 0x0E	; 14
 cfa:	61 e2       	ldi	r22, 0x21	; 33
			static inline void USB_Device_GetSerialString(uint16_t* const UnicodeString)
			{
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;
 cfc:	e4 2f       	mov	r30, r20

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
				{
					uint8_t SerialByte = boot_signature_byte_get(SigReadAddress);
 cfe:	f0 e0       	ldi	r31, 0x00	; 0
 d00:	60 93 57 00 	sts	0x0057, r22
 d04:	e4 91       	lpm	r30, Z
 d06:	80 ff       	sbrs	r24, 0
 d08:	03 c0       	rjmp	.+6      	; 0xd10 <USB_Device_ProcessControlRequest+0x1d2>

					if (SerialCharNum & 0x01)
 d0a:	e2 95       	swap	r30
 d0c:	ef 70       	andi	r30, 0x0F	; 15
					{
						SerialByte >>= 4;
 d0e:	4f 5f       	subi	r20, 0xFF	; 255
 d10:	ef 70       	andi	r30, 0x0F	; 15
						SigReadAddress++;
 d12:	2e 2f       	mov	r18, r30
					}

					SerialByte &= 0x0F;
 d14:	30 e0       	ldi	r19, 0x00	; 0
 d16:	ea 30       	cpi	r30, 0x0A	; 10
 d18:	18 f0       	brcs	.+6      	; 0xd20 <USB_Device_ProcessControlRequest+0x1e2>

					UnicodeString[SerialCharNum] = cpu_to_le16((SerialByte >= 10) ?
 d1a:	29 5c       	subi	r18, 0xC9	; 201
 d1c:	3f 4f       	sbci	r19, 0xFF	; 255
 d1e:	02 c0       	rjmp	.+4      	; 0xd24 <USB_Device_ProcessControlRequest+0x1e6>
 d20:	20 5d       	subi	r18, 0xD0	; 208
 d22:	3f 4f       	sbci	r19, 0xFF	; 255
 d24:	13 96       	adiw	r26, 0x03	; 3
 d26:	3c 93       	st	X, r19
 d28:	2e 93       	st	-X, r18
 d2a:	12 97       	sbiw	r26, 0x02	; 2
 d2c:	01 96       	adiw	r24, 0x01	; 1
 d2e:	12 96       	adiw	r26, 0x02	; 2
 d30:	84 31       	cpi	r24, 0x14	; 20
 d32:	91 05       	cpc	r25, r1
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
 d34:	19 f7       	brne	.-58     	; 0xcfc <USB_Device_ProcessControlRequest+0x1be>
 d36:	5f bf       	out	0x3f, r21	; 63
 d38:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 d3c:	87 7f       	andi	r24, 0xF7	; 247
 d3e:	80 93 e8 00 	sts	0x00E8, r24
 d42:	ce 01       	movw	r24, r28
 d44:	03 96       	adiw	r24, 0x03	; 3

	USB_Device_GetSerialString(SignatureDescriptor.UnicodeString);

	Endpoint_ClearSETUP();

	Endpoint_Write_Control_Stream_LE(&SignatureDescriptor, sizeof(SignatureDescriptor));
 d46:	6a e2       	ldi	r22, 0x2A	; 42
 d48:	70 e0       	ldi	r23, 0x00	; 0
 d4a:	8f dc       	rcall	.-1762   	; 0x66a <Endpoint_Write_Control_Stream_LE>
 d4c:	12 c0       	rjmp	.+36     	; 0xd72 <USB_Device_ProcessControlRequest+0x234>
 d4e:	60 91 17 01 	lds	r22, 0x0117
 d52:	ae 01       	movw	r20, r28
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif

	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
 d54:	4f 5f       	subi	r20, 0xFF	; 255
 d56:	5f 4f       	sbci	r21, 0xFF	; 255
 d58:	fb db       	rcall	.-2058   	; 0x550 <CALLBACK_USB_GetDescriptor>
 d5a:	bc 01       	movw	r22, r24
 d5c:	00 97       	sbiw	r24, 0x00	; 0
 d5e:	09 f4       	brne	.+2      	; 0xd62 <USB_Device_ProcessControlRequest+0x224>
 d60:	3c c0       	rjmp	.+120    	; 0xdda <USB_Device_ProcessControlRequest+0x29c>
 d62:	80 91 e8 00 	lds	r24, 0x00E8
 d66:	87 7f       	andi	r24, 0xF7	; 247
 d68:	80 93 e8 00 	sts	0x00E8, r24
 d6c:	89 81       	ldd	r24, Y+1	; 0x01
 d6e:	9a 81       	ldd	r25, Y+2	; 0x02
 d70:	d8 dc       	rcall	.-1616   	; 0x722 <Endpoint_Write_Control_PStream_LE>
 d72:	80 91 e8 00 	lds	r24, 0x00E8
	#if defined(USE_RAM_DESCRIPTORS) || !defined(ARCH_HAS_MULTI_ADDRESS_SPACE)
	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_EEPROM_DESCRIPTORS)
	Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_FLASH_DESCRIPTORS)
	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
 d76:	8b 77       	andi	r24, 0x7B	; 123
 d78:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 d7c:	2e c0       	rjmp	.+92     	; 0xdda <USB_Device_ProcessControlRequest+0x29c>
 d7e:	80 38       	cpi	r24, 0x80	; 128
 d80:	61 f5       	brne	.+88     	; 0xdda <USB_Device_ProcessControlRequest+0x29c>
 d82:	80 91 e8 00 	lds	r24, 0x00E8
 d86:	87 7f       	andi	r24, 0xF7	; 247
					USB_Device_GetDescriptor();
				}

				break;
			case REQ_GetConfiguration:
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
 d88:	80 93 e8 00 	sts	0x00E8, r24
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 d8c:	80 91 0e 01 	lds	r24, 0x010E
 d90:	80 93 f1 00 	sts	0x00F1, r24
 d94:	80 91 e8 00 	lds	r24, 0x00E8

static void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();

	Endpoint_Write_8(USB_Device_ConfigurationNumber);
 d98:	8e 77       	andi	r24, 0x7E	; 126
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
 d9a:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 d9e:	53 dd       	rcall	.-1370   	; 0x846 <Endpoint_ClearStatusStage>
 da0:	1c c0       	rjmp	.+56     	; 0xdda <USB_Device_ProcessControlRequest+0x29c>
 da2:	88 23       	and	r24, r24
 da4:	d1 f4       	brne	.+52     	; 0xdda <USB_Device_ProcessControlRequest+0x29c>
 da6:	90 91 15 01 	lds	r25, 0x0115
	Endpoint_ClearIN();

	Endpoint_ClearStatusStage();
 daa:	92 30       	cpi	r25, 0x02	; 2
 dac:	b0 f4       	brcc	.+44     	; 0xdda <USB_Device_ProcessControlRequest+0x29c>
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_GetConfiguration();

				break;
			case REQ_SetConfiguration:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
 dae:	80 91 e8 00 	lds	r24, 0x00E8
}

static void USB_Device_SetConfiguration(void)
{
	#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
 db2:	87 7f       	andi	r24, 0xF7	; 247
 db4:	80 93 e8 00 	sts	0x00E8, r24
 db8:	90 93 0e 01 	sts	0x010E, r25
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 dbc:	44 dd       	rcall	.-1400   	; 0x846 <Endpoint_ClearStatusStage>
 dbe:	80 91 0e 01 	lds	r24, 0x010E
 dc2:	88 23       	and	r24, r24
	#endif
	#endif

	Endpoint_ClearSETUP();

	USB_Device_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
 dc4:	21 f4       	brne	.+8      	; 0xdce <USB_Device_ProcessControlRequest+0x290>
 dc6:	80 91 e3 00 	lds	r24, 0x00E3

	Endpoint_ClearStatusStage();
 dca:	87 ff       	sbrs	r24, 7

	if (USB_Device_ConfigurationNumber)
 dcc:	02 c0       	rjmp	.+4      	; 0xdd2 <USB_Device_ProcessControlRequest+0x294>
 dce:	84 e0       	ldi	r24, 0x04	; 4
 dd0:	01 c0       	rjmp	.+2      	; 0xdd4 <USB_Device_ProcessControlRequest+0x296>
 dd2:	81 e0       	ldi	r24, 0x01	; 1
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
 dd4:	80 93 12 01 	sts	0x0112, r24
	  USB_DeviceState = DEVICE_STATE_Configured;
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
 dd8:	15 da       	rcall	.-3030   	; 0x204 <EVENT_USB_Device_ConfigurationChanged>
 dda:	80 91 e8 00 	lds	r24, 0x00E8
 dde:	83 ff       	sbrs	r24, 3
 de0:	0a c0       	rjmp	.+20     	; 0xdf6 <USB_Device_ProcessControlRequest+0x2b8>
 de2:	80 91 e8 00 	lds	r24, 0x00E8

	EVENT_USB_Device_ConfigurationChanged();
 de6:	87 7f       	andi	r24, 0xF7	; 247
 de8:	80 93 e8 00 	sts	0x00E8, r24
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 dec:	80 91 eb 00 	lds	r24, 0x00EB
			default:
				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
 df0:	80 62       	ori	r24, 0x20	; 32
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 df2:	80 93 eb 00 	sts	0x00EB, r24
 df6:	ac 96       	adiw	r28, 0x2c	; 44
 df8:	0f b6       	in	r0, 0x3f	; 63
 dfa:	f8 94       	cli
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
 dfc:	de bf       	out	0x3e, r29	; 62
 dfe:	0f be       	out	0x3f, r0	; 63
 e00:	cd bf       	out	0x3d, r28	; 61
 e02:	df 91       	pop	r29
 e04:	cf 91       	pop	r28
	{
		Endpoint_ClearSETUP();
		Endpoint_StallTransaction();
	}
}
 e06:	1f 91       	pop	r17
 e08:	08 95       	ret

00000e0a <USB_Event_Stub>:
#include "Events.h"

void USB_Event_Stub(void)
{

}
 e0a:	08 95       	ret

00000e0c <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
 e0c:	cf 93       	push	r28
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_DeviceTask(void)
{
	if (USB_DeviceState == DEVICE_STATE_Unattached)
 e0e:	80 91 12 01 	lds	r24, 0x0112
 e12:	88 23       	and	r24, r24
 e14:	a9 f0       	breq	.+42     	; 0xe40 <USB_USBTask+0x34>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
 e16:	80 91 e9 00 	lds	r24, 0x00E9
 e1a:	8f 70       	andi	r24, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
 e1c:	90 91 ec 00 	lds	r25, 0x00EC
 e20:	90 ff       	sbrs	r25, 0
 e22:	02 c0       	rjmp	.+4      	; 0xe28 <USB_USBTask+0x1c>
 e24:	c0 e8       	ldi	r28, 0x80	; 128
 e26:	01 c0       	rjmp	.+2      	; 0xe2a <USB_USBTask+0x1e>
 e28:	c0 e0       	ldi	r28, 0x00	; 0
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
 e2a:	c8 2b       	or	r28, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 e2c:	10 92 e9 00 	sts	0x00E9, r1
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 e30:	80 91 e8 00 	lds	r24, 0x00E8

	uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

	if (Endpoint_IsSETUPReceived())
 e34:	83 ff       	sbrs	r24, 3
 e36:	01 c0       	rjmp	.+2      	; 0xe3a <USB_USBTask+0x2e>
	  USB_Device_ProcessControlRequest();
 e38:	82 de       	rcall	.-764    	; 0xb3e <USB_Device_ProcessControlRequest>
 e3a:	cf 70       	andi	r28, 0x0F	; 15
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 e3c:	c0 93 e9 00 	sts	0x00E9, r28
 e40:	cf 91       	pop	r28
	#elif defined(USB_CAN_BE_HOST)
		USB_HostTask();
	#elif defined(USB_CAN_BE_DEVICE)
		USB_DeviceTask();
	#endif
}
 e42:	08 95       	ret

00000e44 <memcmp>:
 e44:	fb 01       	movw	r30, r22
 e46:	dc 01       	movw	r26, r24
 e48:	04 c0       	rjmp	.+8      	; 0xe52 <memcmp+0xe>
 e4a:	8d 91       	ld	r24, X+
 e4c:	01 90       	ld	r0, Z+
 e4e:	80 19       	sub	r24, r0
 e50:	21 f4       	brne	.+8      	; 0xe5a <memcmp+0x16>
 e52:	41 50       	subi	r20, 0x01	; 1
 e54:	50 40       	sbci	r21, 0x00	; 0
 e56:	c8 f7       	brcc	.-14     	; 0xe4a <memcmp+0x6>
 e58:	88 1b       	sub	r24, r24
 e5a:	99 0b       	sbc	r25, r25
 e5c:	08 95       	ret

00000e5e <_exit>:
 e5e:	f8 94       	cli

00000e60 <__stop_program>:
 e60:	ff cf       	rjmp	.-2      	; 0xe60 <__stop_program>
