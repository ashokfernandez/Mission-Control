
KeyboardMouse.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00000dcc  00000e60  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000dcc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000018  00800100  00800100  00000e60  2**0
                  ALLOC
  3 .stab         000008dc  00000000  00000000  00000e60  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000195  00000000  00000000  0000173c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000348  00000000  00000000  000018d8  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00005076  00000000  00000000  00001c20  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001368  00000000  00000000  00006c96  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000280c  00000000  00000000  00007ffe  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000908  00000000  00000000  0000a80c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000247a  00000000  00000000  0000b114  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000037f3  00000000  00000000  0000d58e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000520  00000000  00000000  00010d81  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	dd c0       	rjmp	.+442    	; 0x1bc <__ctors_end>
   2:	00 00       	nop
   4:	f9 c0       	rjmp	.+498    	; 0x1f8 <__bad_interrupt>
   6:	00 00       	nop
   8:	f7 c0       	rjmp	.+494    	; 0x1f8 <__bad_interrupt>
   a:	00 00       	nop
   c:	f5 c0       	rjmp	.+490    	; 0x1f8 <__bad_interrupt>
   e:	00 00       	nop
  10:	f3 c0       	rjmp	.+486    	; 0x1f8 <__bad_interrupt>
  12:	00 00       	nop
  14:	f1 c0       	rjmp	.+482    	; 0x1f8 <__bad_interrupt>
  16:	00 00       	nop
  18:	ef c0       	rjmp	.+478    	; 0x1f8 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	ed c0       	rjmp	.+474    	; 0x1f8 <__bad_interrupt>
  1e:	00 00       	nop
  20:	eb c0       	rjmp	.+470    	; 0x1f8 <__bad_interrupt>
  22:	00 00       	nop
  24:	e9 c0       	rjmp	.+466    	; 0x1f8 <__bad_interrupt>
  26:	00 00       	nop
  28:	7d c4       	rjmp	.+2298   	; 0x924 <__vector_10>
  2a:	00 00       	nop
  2c:	e5 c0       	rjmp	.+458    	; 0x1f8 <__bad_interrupt>
  2e:	00 00       	nop
  30:	e3 c0       	rjmp	.+454    	; 0x1f8 <__bad_interrupt>
  32:	00 00       	nop
  34:	e1 c0       	rjmp	.+450    	; 0x1f8 <__bad_interrupt>
  36:	00 00       	nop
  38:	df c0       	rjmp	.+446    	; 0x1f8 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	dd c0       	rjmp	.+442    	; 0x1f8 <__bad_interrupt>
  3e:	00 00       	nop
  40:	db c0       	rjmp	.+438    	; 0x1f8 <__bad_interrupt>
  42:	00 00       	nop
  44:	d9 c0       	rjmp	.+434    	; 0x1f8 <__bad_interrupt>
  46:	00 00       	nop
  48:	d7 c0       	rjmp	.+430    	; 0x1f8 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	d5 c0       	rjmp	.+426    	; 0x1f8 <__bad_interrupt>
  4e:	00 00       	nop
  50:	d3 c0       	rjmp	.+422    	; 0x1f8 <__bad_interrupt>
  52:	00 00       	nop
  54:	d1 c0       	rjmp	.+418    	; 0x1f8 <__bad_interrupt>
  56:	00 00       	nop
  58:	cf c0       	rjmp	.+414    	; 0x1f8 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	cd c0       	rjmp	.+410    	; 0x1f8 <__bad_interrupt>
  5e:	00 00       	nop
  60:	cb c0       	rjmp	.+406    	; 0x1f8 <__bad_interrupt>
  62:	00 00       	nop
  64:	c9 c0       	rjmp	.+402    	; 0x1f8 <__bad_interrupt>
  66:	00 00       	nop
  68:	c7 c0       	rjmp	.+398    	; 0x1f8 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	c5 c0       	rjmp	.+394    	; 0x1f8 <__bad_interrupt>
  6e:	00 00       	nop
  70:	c3 c0       	rjmp	.+390    	; 0x1f8 <__bad_interrupt>
  72:	00 00       	nop
  74:	c1 c0       	rjmp	.+386    	; 0x1f8 <__bad_interrupt>
  76:	00 00       	nop
  78:	bf c0       	rjmp	.+382    	; 0x1f8 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	bd c0       	rjmp	.+378    	; 0x1f8 <__bad_interrupt>
  7e:	00 00       	nop
  80:	bb c0       	rjmp	.+374    	; 0x1f8 <__bad_interrupt>
  82:	00 00       	nop
  84:	b9 c0       	rjmp	.+370    	; 0x1f8 <__bad_interrupt>
  86:	00 00       	nop
  88:	b7 c0       	rjmp	.+366    	; 0x1f8 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	b5 c0       	rjmp	.+362    	; 0x1f8 <__bad_interrupt>
  8e:	00 00       	nop
  90:	b3 c0       	rjmp	.+358    	; 0x1f8 <__bad_interrupt>
  92:	00 00       	nop
  94:	b1 c0       	rjmp	.+354    	; 0x1f8 <__bad_interrupt>
  96:	00 00       	nop

00000098 <ProductString>:
  98:	3a 03 4c 00 55 00 46 00 41 00 20 00 4d 00 6f 00     :.L.U.F.A. .M.o.
  a8:	75 00 73 00 65 00 20 00 61 00 6e 00 64 00 20 00     u.s.e. .a.n.d. .
  b8:	4b 00 65 00 79 00 62 00 6f 00 61 00 72 00 64 00     K.e.y.b.o.a.r.d.
  c8:	20 00 44 00 65 00 6d 00 6f 00 00 00                  .D.e.m.o...

000000d4 <ManufacturerString>:
  d4:	18 03 44 00 65 00 61 00 6e 00 20 00 43 00 61 00     ..D.e.a.n. .C.a.
  e4:	6d 00 65 00 72 00 61 00 00 00                       m.e.r.a...

000000ee <LanguageString>:
  ee:	04 03 09 04                                         ....

000000f2 <ConfigurationDescriptor>:
  f2:	09 02 42 00 02 01 00 c0 32 09 04 00 00 02 03 01     ..B.....2.......
 102:	01 00 09 21 11 01 00 01 22 3f 00 07 05 81 03 08     ...!...."?......
 112:	00 05 07 05 02 03 08 00 05 09 04 01 00 01 03 01     ................
 122:	02 00 09 21 11 01 00 01 22 36 00 07 05 83 03 08     ...!...."6......
 132:	00 05                                               ..

00000134 <DeviceDescriptor>:
 134:	12 01 10 01 00 00 00 08 eb 03 4d 20 01 00 01 02     ..........M ....
 144:	00 01                                               ..

00000146 <KeyboardReport>:
 146:	05 01 09 06 a1 01 05 07 19 e0 29 e7 15 00 25 01     ..........)...%.
 156:	75 01 95 08 81 02 95 01 75 08 81 01 05 08 19 01     u.......u.......
 166:	29 05 95 05 75 01 91 02 95 01 75 03 91 01 15 00     )...u.....u.....
 176:	25 65 05 07 19 00 29 65 95 06 75 08 81 00 c0        %e....)e..u....

00000185 <MouseReport>:
 185:	05 01 09 02 a1 01 09 01 a1 00 05 09 19 01 29 03     ..............).
 195:	15 00 25 01 95 03 75 01 81 02 95 01 75 05 81 01     ..%...u.....u...
 1a5:	05 01 09 30 09 31 15 ff 25 01 35 ff 45 01 95 02     ...0.1..%.5.E...
 1b5:	75 08 81 06 c0 c0 00                                u......

000001bc <__ctors_end>:
 1bc:	11 24       	eor	r1, r1
 1be:	1f be       	out	0x3f, r1	; 63
 1c0:	cf ef       	ldi	r28, 0xFF	; 255
 1c2:	d0 e2       	ldi	r29, 0x20	; 32
 1c4:	de bf       	out	0x3e, r29	; 62
 1c6:	cd bf       	out	0x3d, r28	; 61

000001c8 <__do_copy_data>:
 1c8:	11 e0       	ldi	r17, 0x01	; 1
 1ca:	a0 e0       	ldi	r26, 0x00	; 0
 1cc:	b1 e0       	ldi	r27, 0x01	; 1
 1ce:	ec ec       	ldi	r30, 0xCC	; 204
 1d0:	fd e0       	ldi	r31, 0x0D	; 13
 1d2:	00 e0       	ldi	r16, 0x00	; 0
 1d4:	0b bf       	out	0x3b, r16	; 59
 1d6:	02 c0       	rjmp	.+4      	; 0x1dc <__do_copy_data+0x14>
 1d8:	07 90       	elpm	r0, Z+
 1da:	0d 92       	st	X+, r0
 1dc:	a0 30       	cpi	r26, 0x00	; 0
 1de:	b1 07       	cpc	r27, r17
 1e0:	d9 f7       	brne	.-10     	; 0x1d8 <__do_copy_data+0x10>
 1e2:	1b be       	out	0x3b, r1	; 59

000001e4 <__do_clear_bss>:
 1e4:	11 e0       	ldi	r17, 0x01	; 1
 1e6:	a0 e0       	ldi	r26, 0x00	; 0
 1e8:	b1 e0       	ldi	r27, 0x01	; 1
 1ea:	01 c0       	rjmp	.+2      	; 0x1ee <.do_clear_bss_start>

000001ec <.do_clear_bss_loop>:
 1ec:	1d 92       	st	X+, r1

000001ee <.do_clear_bss_start>:
 1ee:	a8 31       	cpi	r26, 0x18	; 24
 1f0:	b1 07       	cpc	r27, r17
 1f2:	e1 f7       	brne	.-8      	; 0x1ec <.do_clear_bss_loop>
 1f4:	54 d1       	rcall	.+680    	; 0x49e <main>
 1f6:	e8 c5       	rjmp	.+3024   	; 0xdc8 <_exit>

000001f8 <__bad_interrupt>:
 1f8:	03 cf       	rjmp	.-506    	; 0x0 <__vectors>

000001fa <Joystick_GetStatus>:
			}

			static inline uint8_t Joystick_GetStatus(void) ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t Joystick_GetStatus(void)
			{
				return (((uint8_t)~PINB & JOY_BMASK) | (((uint8_t)~PINE & JOY_EMASK) >> JOY_PORTE_MASK_SHIFT));
 1fa:	83 b1       	in	r24, 0x03	; 3
 1fc:	2c b1       	in	r18, 0x0c	; 12
 1fe:	20 95       	com	r18
 200:	30 e0       	ldi	r19, 0x00	; 0
 202:	20 73       	andi	r18, 0x30	; 48
 204:	30 70       	andi	r19, 0x00	; 0
 206:	35 95       	asr	r19
 208:	27 95       	ror	r18
 20a:	80 95       	com	r24
 20c:	80 7e       	andi	r24, 0xE0	; 224
			}
 20e:	82 2b       	or	r24, r18
 210:	08 95       	ret

00000212 <LEDs_SetAllLEDs>:
				PORTD &= ~LEDMask;
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
			{
				PORTD = ((PORTD & ~LEDS_ALL_LEDS) | LEDMask);
 212:	9b b1       	in	r25, 0x0b	; 11
 214:	9f 70       	andi	r25, 0x0F	; 15
 216:	98 2b       	or	r25, r24
 218:	9b b9       	out	0x0b, r25	; 11
			}
 21a:	08 95       	ret

0000021c <SetupHardware>:

/** Configures the board hardware and chip peripherals for the demo's functionality. */
void SetupHardware(void)
{
	/* Disable watchdog if enabled by bootloader/fuses */
	MCUSR &= ~(1 << WDRF);
 21c:	84 b7       	in	r24, 0x34	; 52
 21e:	87 7f       	andi	r24, 0xF7	; 247
 220:	84 bf       	out	0x34, r24	; 52
	wdt_disable();
 222:	88 e1       	ldi	r24, 0x18	; 24
 224:	0f b6       	in	r0, 0x3f	; 63
 226:	f8 94       	cli
 228:	80 93 60 00 	sts	0x0060, r24
 22c:	10 92 60 00 	sts	0x0060, r1
 230:	0f be       	out	0x3f, r0	; 63
The type of x is clock_div_t.
*/
void clock_prescale_set(clock_div_t __x)
{
    uint8_t __tmp = _BV(CLKPCE);
    __asm__ __volatile__ (
 232:	90 e0       	ldi	r25, 0x00	; 0
 234:	80 e8       	ldi	r24, 0x80	; 128
 236:	0f b6       	in	r0, 0x3f	; 63
 238:	f8 94       	cli
 23a:	80 93 61 00 	sts	0x0061, r24
 23e:	90 93 61 00 	sts	0x0061, r25
 242:	0f be       	out	0x3f, r0	; 63

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void Joystick_Init(void)
			{
				DDRB  &= ~JOY_BMASK;
 244:	84 b1       	in	r24, 0x04	; 4
 246:	8f 71       	andi	r24, 0x1F	; 31
 248:	84 b9       	out	0x04, r24	; 4
				DDRE  &= ~JOY_EMASK;
 24a:	8d b1       	in	r24, 0x0d	; 13
 24c:	8f 7c       	andi	r24, 0xCF	; 207
 24e:	8d b9       	out	0x0d, r24	; 13

				PORTB |=  JOY_BMASK;
 250:	85 b1       	in	r24, 0x05	; 5
 252:	80 6e       	ori	r24, 0xE0	; 224
 254:	85 b9       	out	0x05, r24	; 5
				PORTE |=  JOY_EMASK;
 256:	8e b1       	in	r24, 0x0e	; 14
 258:	80 63       	ori	r24, 0x30	; 48
 25a:	8e b9       	out	0x0e, r24	; 14

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void LEDs_Init(void)
			{
				DDRD  |=  LEDS_ALL_LEDS;
 25c:	8a b1       	in	r24, 0x0a	; 10
 25e:	80 6f       	ori	r24, 0xF0	; 240
 260:	8a b9       	out	0x0a, r24	; 10
				PORTD &= ~LEDS_ALL_LEDS;
 262:	8b b1       	in	r24, 0x0b	; 11
 264:	8f 70       	andi	r24, 0x0F	; 15
 266:	8b b9       	out	0x0b, r24	; 11
	clock_prescale_set(clock_div_1);

	/* Hardware Initialization */
	Joystick_Init();
	LEDs_Init();
	USB_Init();
 268:	42 c3       	rjmp	.+1668   	; 0x8ee <USB_Init>

0000026a <EVENT_USB_Device_Connect>:
 26a:	80 ea       	ldi	r24, 0xA0	; 160
}
 26c:	d2 cf       	rjmp	.-92     	; 0x212 <LEDs_SetAllLEDs>

0000026e <EVENT_USB_Device_Disconnect>:
 *  starts the library USB task to begin the enumeration and USB management process.
 */
void EVENT_USB_Device_Connect(void)
{
	/* Indicate USB enumerating */
	LEDs_SetAllLEDs(LEDMASK_USB_ENUMERATING);
 26e:	80 e1       	ldi	r24, 0x10	; 16
}
 270:	d0 cf       	rjmp	.-96     	; 0x212 <LEDs_SetAllLEDs>

00000272 <EVENT_USB_Device_ConfigurationChanged>:
 *  the status LEDs and stops the USB management task.
 */
void EVENT_USB_Device_Disconnect(void)
{
	/* Indicate USB not ready */
	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
 272:	1f 93       	push	r17
}
 274:	cf 93       	push	r28

/** Event handler for the USB_ConfigurationChanged event. This is fired when the host sets the current configuration
 *  of the USB device after enumeration, and configures the keyboard and mouse device endpoints.
 */
void EVENT_USB_Device_ConfigurationChanged(void)
{
 276:	df 93       	push	r29
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
 278:	81 e0       	ldi	r24, 0x01	; 1
 27a:	61 ec       	ldi	r22, 0xC1	; 193
 27c:	42 e0       	ldi	r20, 0x02	; 2
 27e:	69 d2       	rcall	.+1234   	; 0x752 <Endpoint_ConfigureEndpoint_Prv>
 280:	18 2f       	mov	r17, r24
 282:	82 e0       	ldi	r24, 0x02	; 2
 284:	60 ec       	ldi	r22, 0xC0	; 192
 286:	42 e0       	ldi	r20, 0x02	; 2
 288:	64 d2       	rcall	.+1224   	; 0x752 <Endpoint_ConfigureEndpoint_Prv>
 28a:	c8 2f       	mov	r28, r24
 28c:	d0 e0       	ldi	r29, 0x00	; 0
	bool ConfigSuccess = true;

	/* Setup Keyboard HID Report Endpoints */
	ConfigSuccess &= Endpoint_ConfigureEndpoint(KEYBOARD_IN_EPADDR, EP_TYPE_INTERRUPT, HID_EPSIZE, 1);
	ConfigSuccess &= Endpoint_ConfigureEndpoint(KEYBOARD_OUT_EPADDR, EP_TYPE_INTERRUPT, HID_EPSIZE, 1);
 28e:	81 2f       	mov	r24, r17
 290:	90 e0       	ldi	r25, 0x00	; 0
void EVENT_USB_Device_ConfigurationChanged(void)
{
	bool ConfigSuccess = true;

	/* Setup Keyboard HID Report Endpoints */
	ConfigSuccess &= Endpoint_ConfigureEndpoint(KEYBOARD_IN_EPADDR, EP_TYPE_INTERRUPT, HID_EPSIZE, 1);
 292:	c8 23       	and	r28, r24
 294:	d9 23       	and	r29, r25
	ConfigSuccess &= Endpoint_ConfigureEndpoint(KEYBOARD_OUT_EPADDR, EP_TYPE_INTERRUPT, HID_EPSIZE, 1);
 296:	83 e0       	ldi	r24, 0x03	; 3
 298:	61 ec       	ldi	r22, 0xC1	; 193
 29a:	42 e0       	ldi	r20, 0x02	; 2
 29c:	5a d2       	rcall	.+1204   	; 0x752 <Endpoint_ConfigureEndpoint_Prv>
 29e:	90 e0       	ldi	r25, 0x00	; 0
 2a0:	8c 23       	and	r24, r28
 2a2:	9d 23       	and	r25, r29

	/* Setup Mouse HID Report Endpoint */
	ConfigSuccess &= Endpoint_ConfigureEndpoint(MOUSE_IN_EPADDR, EP_TYPE_INTERRUPT, HID_EPSIZE, 1);
 2a4:	00 97       	sbiw	r24, 0x00	; 0
 2a6:	11 f0       	breq	.+4      	; 0x2ac <EVENT_USB_Device_ConfigurationChanged+0x3a>
 2a8:	80 e6       	ldi	r24, 0x60	; 96

	/* Indicate endpoint configuration success or failure */
	LEDs_SetAllLEDs(ConfigSuccess ? LEDMASK_USB_READY : LEDMASK_USB_ERROR);
 2aa:	01 c0       	rjmp	.+2      	; 0x2ae <EVENT_USB_Device_ConfigurationChanged+0x3c>
 2ac:	80 e9       	ldi	r24, 0x90	; 144
 2ae:	b1 df       	rcall	.-158    	; 0x212 <LEDs_SetAllLEDs>
 2b0:	df 91       	pop	r29
 2b2:	cf 91       	pop	r28
 2b4:	1f 91       	pop	r17
 2b6:	08 95       	ret

000002b8 <Keyboard_ProcessLEDReport>:
}
 2b8:	28 2f       	mov	r18, r24
 2ba:	80 ff       	sbrs	r24, 0
 2bc:	02 c0       	rjmp	.+4      	; 0x2c2 <Keyboard_ProcessLEDReport+0xa>
 2be:	80 e3       	ldi	r24, 0x30	; 48
void Keyboard_ProcessLEDReport(const uint8_t LEDStatus)
{
	uint8_t LEDMask = LEDS_LED2;

	if (LEDStatus & HID_KEYBOARD_LED_NUMLOCK)
	  LEDMask |= LEDS_LED1;
 2c0:	01 c0       	rjmp	.+2      	; 0x2c4 <Keyboard_ProcessLEDReport+0xc>
 *  endpoint, the processing code is placed here to avoid duplicating it and potentially having different
 *  behavior depending on the method used to sent it.
 */
void Keyboard_ProcessLEDReport(const uint8_t LEDStatus)
{
	uint8_t LEDMask = LEDS_LED2;
 2c2:	80 e2       	ldi	r24, 0x20	; 32

	if (LEDStatus & HID_KEYBOARD_LED_NUMLOCK)
	  LEDMask |= LEDS_LED1;

	if (LEDStatus & HID_KEYBOARD_LED_CAPSLOCK)
 2c4:	21 fd       	sbrc	r18, 1
	  LEDMask |= LEDS_LED3;
 2c6:	80 68       	ori	r24, 0x80	; 128

	if (LEDStatus & HID_KEYBOARD_LED_SCROLLLOCK)
 2c8:	22 fd       	sbrc	r18, 2
	  LEDMask |= LEDS_LED4;
 2ca:	80 64       	ori	r24, 0x40	; 64

	/* Set the status LEDs to the current Keyboard LED status */
	LEDs_SetAllLEDs(LEDMask);
 2cc:	a2 cf       	rjmp	.-188    	; 0x212 <LEDs_SetAllLEDs>

000002ce <EVENT_USB_Device_ControlRequest>:
 2ce:	0f 93       	push	r16
}
 2d0:	1f 93       	push	r17
/** Event handler for the USB_ControlRequest event. This is used to catch and process control requests sent to
 *  the device from the USB host before passing along unhandled control requests to the library for processing
 *  internally.
 */
void EVENT_USB_Device_ControlRequest(void)
{
 2d2:	cf 93       	push	r28
 2d4:	df 93       	push	r29
 2d6:	0f 92       	push	r0
 2d8:	cd b7       	in	r28, 0x3d	; 61
 2da:	de b7       	in	r29, 0x3e	; 62
	uint8_t* ReportData;
	uint8_t  ReportSize;

	/* Handle HID Class specific requests */
	switch (USB_ControlRequest.bRequest)
 2dc:	80 91 11 01 	lds	r24, 0x0111
 2e0:	81 30       	cpi	r24, 0x01	; 1
 2e2:	21 f0       	breq	.+8      	; 0x2ec <EVENT_USB_Device_ControlRequest+0x1e>
 2e4:	89 30       	cpi	r24, 0x09	; 9
 2e6:	09 f0       	breq	.+2      	; 0x2ea <EVENT_USB_Device_ControlRequest+0x1c>
 2e8:	46 c0       	rjmp	.+140    	; 0x376 <EVENT_USB_Device_ControlRequest+0xa8>
 2ea:	28 c0       	rjmp	.+80     	; 0x33c <EVENT_USB_Device_ControlRequest+0x6e>
	{
		case HID_REQ_GetReport:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
 2ec:	80 91 10 01 	lds	r24, 0x0110
 2f0:	81 3a       	cpi	r24, 0xA1	; 161
 2f2:	09 f0       	breq	.+2      	; 0x2f6 <EVENT_USB_Device_ControlRequest+0x28>
 2f4:	40 c0       	rjmp	.+128    	; 0x376 <EVENT_USB_Device_ControlRequest+0xa8>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 2f6:	80 91 e8 00 	lds	r24, 0x00E8
 2fa:	87 7f       	andi	r24, 0xF7	; 247
 2fc:	80 93 e8 00 	sts	0x00E8, r24
			{
				Endpoint_ClearSETUP();

				/* Determine if it is the mouse or the keyboard data that is being requested */
				if (!(USB_ControlRequest.wIndex))
 300:	80 91 14 01 	lds	r24, 0x0114
 304:	90 91 15 01 	lds	r25, 0x0115
 308:	00 97       	sbiw	r24, 0x00	; 0
 30a:	21 f4       	brne	.+8      	; 0x314 <EVENT_USB_Device_ControlRequest+0x46>
				{
					ReportData = (uint8_t*)&KeyboardReportData;
					ReportSize = sizeof(KeyboardReportData);
 30c:	48 e0       	ldi	r20, 0x08	; 8
				Endpoint_ClearSETUP();

				/* Determine if it is the mouse or the keyboard data that is being requested */
				if (!(USB_ControlRequest.wIndex))
				{
					ReportData = (uint8_t*)&KeyboardReportData;
 30e:	00 e0       	ldi	r16, 0x00	; 0
 310:	11 e0       	ldi	r17, 0x01	; 1
 312:	03 c0       	rjmp	.+6      	; 0x31a <EVENT_USB_Device_ControlRequest+0x4c>
					ReportSize = sizeof(KeyboardReportData);
				}
				else
				{
					ReportData = (uint8_t*)&MouseReportData;
					ReportSize = sizeof(MouseReportData);
 314:	43 e0       	ldi	r20, 0x03	; 3
					ReportData = (uint8_t*)&KeyboardReportData;
					ReportSize = sizeof(KeyboardReportData);
				}
				else
				{
					ReportData = (uint8_t*)&MouseReportData;
 316:	08 e0       	ldi	r16, 0x08	; 8
 318:	11 e0       	ldi	r17, 0x01	; 1
					ReportSize = sizeof(MouseReportData);
				}

				/* Write the report data to the control endpoint */
				Endpoint_Write_Control_Stream_LE(ReportData, ReportSize);
 31a:	c8 01       	movw	r24, r16
 31c:	64 2f       	mov	r22, r20
 31e:	70 e0       	ldi	r23, 0x00	; 0
 320:	49 83       	std	Y+1, r20	; 0x01
 322:	5e d1       	rcall	.+700    	; 0x5e0 <Endpoint_Write_Control_Stream_LE>
 324:	80 91 e8 00 	lds	r24, 0x00E8
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 328:	8b 77       	andi	r24, 0x7B	; 123
 32a:	80 93 e8 00 	sts	0x00E8, r24
 32e:	c8 01       	movw	r24, r16
				Endpoint_ClearOUT();

				/* Clear the report data afterwards */
				memset(ReportData, 0, ReportSize);
 330:	60 e0       	ldi	r22, 0x00	; 0
 332:	70 e0       	ldi	r23, 0x00	; 0
 334:	49 81       	ldd	r20, Y+1	; 0x01
 336:	50 e0       	ldi	r21, 0x00	; 0
 338:	40 d5       	rcall	.+2688   	; 0xdba <memset>
 33a:	1d c0       	rjmp	.+58     	; 0x376 <EVENT_USB_Device_ControlRequest+0xa8>
 33c:	80 91 10 01 	lds	r24, 0x0110
			}

			break;
		case HID_REQ_SetReport:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
 340:	81 32       	cpi	r24, 0x21	; 33
 342:	c9 f4       	brne	.+50     	; 0x376 <EVENT_USB_Device_ControlRequest+0xa8>
 344:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 348:	87 7f       	andi	r24, 0xF7	; 247
 34a:	80 93 e8 00 	sts	0x00E8, r24
 34e:	04 c0       	rjmp	.+8      	; 0x358 <EVENT_USB_Device_ControlRequest+0x8a>
 350:	80 91 0f 01 	lds	r24, 0x010F
				Endpoint_ClearSETUP();

				/* Wait until the LED report has been sent by the host */
				while (!(Endpoint_IsOUTReceived()))
				{
					if (USB_DeviceState == DEVICE_STATE_Unattached)
 354:	88 23       	and	r24, r24
 356:	79 f0       	breq	.+30     	; 0x376 <EVENT_USB_Device_ControlRequest+0xa8>
 358:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 35c:	82 ff       	sbrs	r24, 2
 35e:	f8 cf       	rjmp	.-16     	; 0x350 <EVENT_USB_Device_ControlRequest+0x82>
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
			{
				Endpoint_ClearSETUP();

				/* Wait until the LED report has been sent by the host */
				while (!(Endpoint_IsOUTReceived()))
 360:	80 91 f1 00 	lds	r24, 0x00F1
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
 364:	90 91 e8 00 	lds	r25, 0x00E8
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 368:	9b 77       	andi	r25, 0x7B	; 123
 36a:	90 93 e8 00 	sts	0x00E8, r25
 36e:	89 83       	std	Y+1, r24	; 0x01
 370:	25 d2       	rcall	.+1098   	; 0x7bc <Endpoint_ClearStatusStage>

				/* Read in the LED report from the host */
				uint8_t LEDStatus = Endpoint_Read_8();

				Endpoint_ClearOUT();
				Endpoint_ClearStatusStage();
 372:	89 81       	ldd	r24, Y+1	; 0x01
 374:	a1 df       	rcall	.-190    	; 0x2b8 <Keyboard_ProcessLEDReport>
 376:	0f 90       	pop	r0

				/* Process the incoming LED report */
				Keyboard_ProcessLEDReport(LEDStatus);
 378:	df 91       	pop	r29
 37a:	cf 91       	pop	r28
 37c:	1f 91       	pop	r17
			}

			break;
	}
}
 37e:	0f 91       	pop	r16
 380:	08 95       	ret

00000382 <Keyboard_HID_Task>:
 382:	cf 93       	push	r28
 384:	df 93       	push	r29
 386:	39 df       	rcall	.-398    	; 0x1fa <Joystick_GetStatus>
 388:	90 91 0f 01 	lds	r25, 0x010F
void Keyboard_HID_Task(void)
{
	uint8_t JoyStatus_LCL = Joystick_GetStatus();

	/* Device must be connected and configured for the task to run */
	if (USB_DeviceState != DEVICE_STATE_Configured)
 38c:	94 30       	cpi	r25, 0x04	; 4
 38e:	09 f0       	breq	.+2      	; 0x392 <Keyboard_HID_Task+0x10>
 390:	43 c0       	rjmp	.+134    	; 0x418 <Keyboard_HID_Task+0x96>
 392:	2c b1       	in	r18, 0x0c	; 12
			}

			static inline uint8_t Buttons_GetStatus(void) ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t Buttons_GetStatus(void)
			{
				return ((PINE & BUTTONS_BUTTON1) ^ BUTTONS_BUTTON1);
 394:	22 ff       	sbrs	r18, 2
	  return;

	/* Check if board button is not pressed, if so mouse mode enabled */
	if (!(Buttons_GetStatus() & BUTTONS_BUTTON1))
 396:	18 c0       	rjmp	.+48     	; 0x3c8 <Keyboard_HID_Task+0x46>
 398:	22 e0       	ldi	r18, 0x02	; 2
	{
		/* Make sent key uppercase by indicating that the left shift key is pressed */
		KeyboardReportData.Modifier = HID_KEYBOARD_MODIFIER_LEFTSHIFT;
 39a:	20 93 00 01 	sts	0x0100, r18
 39e:	87 fd       	sbrc	r24, 7

		if (JoyStatus_LCL & JOY_UP)
 3a0:	03 c0       	rjmp	.+6      	; 0x3a8 <Keyboard_HID_Task+0x26>
 3a2:	84 ff       	sbrs	r24, 4
		  KeyboardReportData.KeyCode[0] = HID_KEYBOARD_SC_A;
		else if (JoyStatus_LCL & JOY_DOWN)
 3a4:	03 c0       	rjmp	.+6      	; 0x3ac <Keyboard_HID_Task+0x2a>
 3a6:	95 e0       	ldi	r25, 0x05	; 5
		  KeyboardReportData.KeyCode[0] = HID_KEYBOARD_SC_B;
 3a8:	90 93 02 01 	sts	0x0102, r25
 3ac:	86 ff       	sbrs	r24, 6

		if (JoyStatus_LCL & JOY_LEFT)
 3ae:	02 c0       	rjmp	.+4      	; 0x3b4 <Keyboard_HID_Task+0x32>
 3b0:	96 e0       	ldi	r25, 0x06	; 6
		  KeyboardReportData.KeyCode[0] = HID_KEYBOARD_SC_C;
 3b2:	03 c0       	rjmp	.+6      	; 0x3ba <Keyboard_HID_Task+0x38>
 3b4:	83 ff       	sbrs	r24, 3
		else if (JoyStatus_LCL & JOY_RIGHT)
 3b6:	03 c0       	rjmp	.+6      	; 0x3be <Keyboard_HID_Task+0x3c>
 3b8:	97 e0       	ldi	r25, 0x07	; 7
		  KeyboardReportData.KeyCode[0] = HID_KEYBOARD_SC_D;
 3ba:	90 93 02 01 	sts	0x0102, r25
 3be:	85 ff       	sbrs	r24, 5

		if (JoyStatus_LCL & JOY_PRESS)
 3c0:	03 c0       	rjmp	.+6      	; 0x3c8 <Keyboard_HID_Task+0x46>
 3c2:	88 e0       	ldi	r24, 0x08	; 8
		  KeyboardReportData.KeyCode[0] = HID_KEYBOARD_SC_E;
 3c4:	80 93 02 01 	sts	0x0102, r24
 3c8:	81 e0       	ldi	r24, 0x01	; 1
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 3ca:	80 93 e9 00 	sts	0x00E9, r24
 3ce:	80 91 e8 00 	lds	r24, 0x00E8
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
 3d2:	85 ff       	sbrs	r24, 5

	/* Select the Keyboard Report Endpoint */
	Endpoint_SelectEndpoint(KEYBOARD_IN_EPADDR);

	/* Check if Keyboard Endpoint Ready for Read/Write */
	if (Endpoint_IsReadWriteAllowed())
 3d4:	12 c0       	rjmp	.+36     	; 0x3fa <Keyboard_HID_Task+0x78>
 3d6:	c0 e0       	ldi	r28, 0x00	; 0
	{
		/* Write Keyboard Report Data */
		Endpoint_Write_Stream_LE(&KeyboardReportData, sizeof(KeyboardReportData), NULL);
 3d8:	d1 e0       	ldi	r29, 0x01	; 1
 3da:	ce 01       	movw	r24, r28
 3dc:	68 e0       	ldi	r22, 0x08	; 8
 3de:	70 e0       	ldi	r23, 0x00	; 0
 3e0:	40 e0       	ldi	r20, 0x00	; 0
 3e2:	50 e0       	ldi	r21, 0x00	; 0
 3e4:	ad d0       	rcall	.+346    	; 0x540 <Endpoint_Write_Stream_LE>
 3e6:	80 91 e8 00 	lds	r24, 0x00E8
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 3ea:	8e 77       	andi	r24, 0x7E	; 126
 3ec:	80 93 e8 00 	sts	0x00E8, r24
 3f0:	88 e0       	ldi	r24, 0x08	; 8
 3f2:	fe 01       	movw	r30, r28

		/* Finalize the stream transfer to send the last packet */
		Endpoint_ClearIN();

		/* Clear the report data afterwards */
		memset(&KeyboardReportData, 0, sizeof(KeyboardReportData));
 3f4:	11 92       	st	Z+, r1
 3f6:	8a 95       	dec	r24
 3f8:	e9 f7       	brne	.-6      	; 0x3f4 <Keyboard_HID_Task+0x72>
 3fa:	82 e0       	ldi	r24, 0x02	; 2
 3fc:	80 93 e9 00 	sts	0x00E9, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 400:	80 91 e8 00 	lds	r24, 0x00E8
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
 404:	85 ff       	sbrs	r24, 5
 406:	08 c0       	rjmp	.+16     	; 0x418 <Keyboard_HID_Task+0x96>

	/* Select the Keyboard LED Report Endpoint */
	Endpoint_SelectEndpoint(KEYBOARD_OUT_EPADDR);

	/* Check if Keyboard LED Endpoint Ready for Read/Write */
	if (Endpoint_IsReadWriteAllowed())
 408:	80 91 f1 00 	lds	r24, 0x00F1
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
 40c:	55 df       	rcall	.-342    	; 0x2b8 <Keyboard_ProcessLEDReport>
 40e:	80 91 e8 00 	lds	r24, 0x00E8
	{
		/* Read in and process the LED report from the host */
		Keyboard_ProcessLEDReport(Endpoint_Read_8());
 412:	8b 77       	andi	r24, 0x7B	; 123
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 414:	80 93 e8 00 	sts	0x00E8, r24
 418:	df 91       	pop	r29
 41a:	cf 91       	pop	r28
 41c:	08 95       	ret

0000041e <Mouse_HID_Task>:

		/* Handshake the OUT Endpoint - clear endpoint and ready for next report */
		Endpoint_ClearOUT();
	}
}
 41e:	1f 93       	push	r17
 420:	cf 93       	push	r28
 422:	df 93       	push	r29
/** Mouse task. This generates the next mouse HID report for the host, and transmits it via the
 *  mouse IN endpoint when the host is ready for more data.
 */
void Mouse_HID_Task(void)
{
	uint8_t JoyStatus_LCL = Joystick_GetStatus();
 424:	ea de       	rcall	.-556    	; 0x1fa <Joystick_GetStatus>
 426:	90 91 0f 01 	lds	r25, 0x010F

	/* Device must be connected and configured for the task to run */
	if (USB_DeviceState != DEVICE_STATE_Configured)
 42a:	94 30       	cpi	r25, 0x04	; 4
 42c:	a1 f5       	brne	.+104    	; 0x496 <Mouse_HID_Task+0x78>
 42e:	9c b1       	in	r25, 0x0c	; 12
 430:	92 fd       	sbrc	r25, 2
	  return;

	/* Check if board button is pressed, if so mouse mode enabled */
	if (Buttons_GetStatus() & BUTTONS_BUTTON1)
 432:	19 c0       	rjmp	.+50     	; 0x466 <Mouse_HID_Task+0x48>
 434:	87 ff       	sbrs	r24, 7
	{
		if (JoyStatus_LCL & JOY_UP)
 436:	02 c0       	rjmp	.+4      	; 0x43c <Mouse_HID_Task+0x1e>
 438:	91 e0       	ldi	r25, 0x01	; 1
		  MouseReportData.Y =  1;
 43a:	03 c0       	rjmp	.+6      	; 0x442 <Mouse_HID_Task+0x24>
 43c:	84 ff       	sbrs	r24, 4
		else if (JoyStatus_LCL & JOY_DOWN)
 43e:	03 c0       	rjmp	.+6      	; 0x446 <Mouse_HID_Task+0x28>
 440:	9f ef       	ldi	r25, 0xFF	; 255
		  MouseReportData.Y = -1;
 442:	90 93 0a 01 	sts	0x010A, r25
 446:	83 ff       	sbrs	r24, 3

		if (JoyStatus_LCL & JOY_RIGHT)
 448:	02 c0       	rjmp	.+4      	; 0x44e <Mouse_HID_Task+0x30>
 44a:	91 e0       	ldi	r25, 0x01	; 1
		  MouseReportData.X =  1;
 44c:	03 c0       	rjmp	.+6      	; 0x454 <Mouse_HID_Task+0x36>
 44e:	86 ff       	sbrs	r24, 6
		else if (JoyStatus_LCL & JOY_LEFT)
 450:	03 c0       	rjmp	.+6      	; 0x458 <Mouse_HID_Task+0x3a>
 452:	9f ef       	ldi	r25, 0xFF	; 255
		  MouseReportData.X = -1;
 454:	90 93 09 01 	sts	0x0109, r25
 458:	85 ff       	sbrs	r24, 5

		if (JoyStatus_LCL & JOY_PRESS)
 45a:	05 c0       	rjmp	.+10     	; 0x466 <Mouse_HID_Task+0x48>
 45c:	80 91 08 01 	lds	r24, 0x0108
		  MouseReportData.Button |= (1 << 0);
 460:	81 60       	ori	r24, 0x01	; 1
 462:	80 93 08 01 	sts	0x0108, r24
 466:	13 e0       	ldi	r17, 0x03	; 3
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 468:	10 93 e9 00 	sts	0x00E9, r17
 46c:	80 91 e8 00 	lds	r24, 0x00E8
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
 470:	85 ff       	sbrs	r24, 5

	/* Select the Mouse Report Endpoint */
	Endpoint_SelectEndpoint(MOUSE_IN_EPADDR);

	/* Check if Mouse Endpoint Ready for Read/Write */
	if (Endpoint_IsReadWriteAllowed())
 472:	11 c0       	rjmp	.+34     	; 0x496 <Mouse_HID_Task+0x78>
 474:	c8 e0       	ldi	r28, 0x08	; 8
	{
		/* Write Mouse Report Data */
		Endpoint_Write_Stream_LE(&MouseReportData, sizeof(MouseReportData), NULL);
 476:	d1 e0       	ldi	r29, 0x01	; 1
 478:	ce 01       	movw	r24, r28
 47a:	63 e0       	ldi	r22, 0x03	; 3
 47c:	70 e0       	ldi	r23, 0x00	; 0
 47e:	40 e0       	ldi	r20, 0x00	; 0
 480:	50 e0       	ldi	r21, 0x00	; 0
 482:	5e d0       	rcall	.+188    	; 0x540 <Endpoint_Write_Stream_LE>
 484:	80 91 e8 00 	lds	r24, 0x00E8
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 488:	8e 77       	andi	r24, 0x7E	; 126
 48a:	80 93 e8 00 	sts	0x00E8, r24
 48e:	fe 01       	movw	r30, r28
 490:	11 92       	st	Z+, r1

		/* Finalize the stream transfer to send the last packet */
		Endpoint_ClearIN();

		/* Clear the report data afterwards */
		memset(&MouseReportData, 0, sizeof(MouseReportData));
 492:	1a 95       	dec	r17
 494:	e9 f7       	brne	.-6      	; 0x490 <Mouse_HID_Task+0x72>
 496:	df 91       	pop	r29
 498:	cf 91       	pop	r28
	}
}
 49a:	1f 91       	pop	r17
 49c:	08 95       	ret

0000049e <main>:
 49e:	be de       	rcall	.-644    	; 0x21c <SetupHardware>
 4a0:	80 e1       	ldi	r24, 0x10	; 16
 */
int main(void)
{
	SetupHardware();

	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
 4a2:	b7 de       	rcall	.-658    	; 0x212 <LEDs_SetAllLEDs>
 4a4:	78 94       	sei
 4a6:	6d df       	rcall	.-294    	; 0x382 <Keyboard_HID_Task>
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				sei();
 4a8:	ba df       	rcall	.-140    	; 0x41e <Mouse_HID_Task>
	GlobalInterruptEnable();

	for (;;)
	{
		Keyboard_HID_Task();
 4aa:	6b d4       	rcall	.+2262   	; 0xd82 <USB_USBTask>
 4ac:	fc cf       	rjmp	.-8      	; 0x4a6 <main+0x8>

000004ae <CALLBACK_USB_GetDescriptor>:
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
 4ae:	93 30       	cpi	r25, 0x03	; 3
 4b0:	89 f0       	breq	.+34     	; 0x4d4 <CALLBACK_USB_GetDescriptor+0x26>
 4b2:	94 30       	cpi	r25, 0x04	; 4
 4b4:	28 f4       	brcc	.+10     	; 0x4c0 <CALLBACK_USB_GetDescriptor+0x12>
 4b6:	91 30       	cpi	r25, 0x01	; 1
 4b8:	69 f1       	breq	.+90     	; 0x514 <CALLBACK_USB_GetDescriptor+0x66>
 4ba:	92 30       	cpi	r25, 0x02	; 2
 4bc:	81 f5       	brne	.+96     	; 0x51e <CALLBACK_USB_GetDescriptor+0x70>
 4be:	05 c0       	rjmp	.+10     	; 0x4ca <CALLBACK_USB_GetDescriptor+0x1c>
 4c0:	91 32       	cpi	r25, 0x21	; 33
 4c2:	d1 f0       	breq	.+52     	; 0x4f8 <CALLBACK_USB_GetDescriptor+0x4a>
 4c4:	92 32       	cpi	r25, 0x22	; 34
 4c6:	59 f5       	brne	.+86     	; 0x51e <CALLBACK_USB_GetDescriptor+0x70>
 4c8:	1e c0       	rjmp	.+60     	; 0x506 <CALLBACK_USB_GetDescriptor+0x58>
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
			Size    = sizeof(USB_Descriptor_Configuration_t);
 4ca:	82 e4       	ldi	r24, 0x42	; 66
 4cc:	90 e0       	ldi	r25, 0x00	; 0
		case DTYPE_Device:
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
 4ce:	e2 ef       	ldi	r30, 0xF2	; 242
 4d0:	f0 e0       	ldi	r31, 0x00	; 0
			Size    = sizeof(USB_Descriptor_Configuration_t);
			break;
 4d2:	31 c0       	rjmp	.+98     	; 0x536 <CALLBACK_USB_GetDescriptor+0x88>
		case DTYPE_String:
			switch (DescriptorNumber)
 4d4:	81 30       	cpi	r24, 0x01	; 1
 4d6:	41 f0       	breq	.+16     	; 0x4e8 <CALLBACK_USB_GetDescriptor+0x3a>
 4d8:	81 30       	cpi	r24, 0x01	; 1
 4da:	18 f0       	brcs	.+6      	; 0x4e2 <CALLBACK_USB_GetDescriptor+0x34>
 4dc:	82 30       	cpi	r24, 0x02	; 2
 4de:	f9 f4       	brne	.+62     	; 0x51e <CALLBACK_USB_GetDescriptor+0x70>
 4e0:	06 c0       	rjmp	.+12     	; 0x4ee <CALLBACK_USB_GetDescriptor+0x40>
			{
				case 0x00:
					Address = &LanguageString;
					Size    = pgm_read_byte(&LanguageString.Header.Size);
 4e2:	ee ee       	ldi	r30, 0xEE	; 238
 4e4:	f0 e0       	ldi	r31, 0x00	; 0
 4e6:	05 c0       	rjmp	.+10     	; 0x4f2 <CALLBACK_USB_GetDescriptor+0x44>
					break;
				case 0x01:
					Address = &ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
 4e8:	e4 ed       	ldi	r30, 0xD4	; 212
 4ea:	f0 e0       	ldi	r31, 0x00	; 0
 4ec:	02 c0       	rjmp	.+4      	; 0x4f2 <CALLBACK_USB_GetDescriptor+0x44>
					break;
				case 0x02:
					Address = &ProductString;
					Size    = pgm_read_byte(&ProductString.Header.Size);
 4ee:	e8 e9       	ldi	r30, 0x98	; 152
 4f0:	f0 e0       	ldi	r31, 0x00	; 0
 4f2:	84 91       	lpm	r24, Z
 4f4:	90 e0       	ldi	r25, 0x00	; 0
					break;
 4f6:	1f c0       	rjmp	.+62     	; 0x536 <CALLBACK_USB_GetDescriptor+0x88>
			break;
		case HID_DTYPE_HID:
			if (!(wIndex))
			{
				Address = &ConfigurationDescriptor.HID1_KeyboardHID;
				Size    = sizeof(USB_HID_Descriptor_HID_t);
 4f8:	89 e0       	ldi	r24, 0x09	; 9
 4fa:	90 e0       	ldi	r25, 0x00	; 0
					break;
			}

			break;
		case HID_DTYPE_HID:
			if (!(wIndex))
 4fc:	66 23       	and	r22, r22
 4fe:	a1 f4       	brne	.+40     	; 0x528 <CALLBACK_USB_GetDescriptor+0x7a>
			{
				Address = &ConfigurationDescriptor.HID1_KeyboardHID;
 500:	e4 e0       	ldi	r30, 0x04	; 4
 502:	f1 e0       	ldi	r31, 0x01	; 1
 504:	18 c0       	rjmp	.+48     	; 0x536 <CALLBACK_USB_GetDescriptor+0x88>
				Address = &ConfigurationDescriptor.HID2_MouseHID;
				Size    = sizeof(USB_HID_Descriptor_HID_t);
			}
			break;
		case HID_DTYPE_Report:
			if (!(wIndex))
 506:	66 23       	and	r22, r22
 508:	91 f4       	brne	.+36     	; 0x52e <CALLBACK_USB_GetDescriptor+0x80>
			{
				Address = &KeyboardReport;
				Size    = sizeof(KeyboardReport);
 50a:	8f e3       	ldi	r24, 0x3F	; 63
 50c:	90 e0       	ldi	r25, 0x00	; 0
			}
			break;
		case HID_DTYPE_Report:
			if (!(wIndex))
			{
				Address = &KeyboardReport;
 50e:	e6 e4       	ldi	r30, 0x46	; 70
 510:	f1 e0       	ldi	r31, 0x01	; 1
 512:	11 c0       	rjmp	.+34     	; 0x536 <CALLBACK_USB_GetDescriptor+0x88>

	switch (DescriptorType)
	{
		case DTYPE_Device:
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
 514:	82 e1       	ldi	r24, 0x12	; 18
 516:	90 e0       	ldi	r25, 0x00	; 0
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
	{
		case DTYPE_Device:
			Address = &DeviceDescriptor;
 518:	e4 e3       	ldi	r30, 0x34	; 52
 51a:	f1 e0       	ldi	r31, 0x01	; 1
 51c:	0c c0       	rjmp	.+24     	; 0x536 <CALLBACK_USB_GetDescriptor+0x88>
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;
 51e:	80 e0       	ldi	r24, 0x00	; 0
 520:	90 e0       	ldi	r25, 0x00	; 0
                                    const void** const DescriptorAddress)
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
 522:	e0 e0       	ldi	r30, 0x00	; 0
 524:	f0 e0       	ldi	r31, 0x00	; 0
 526:	07 c0       	rjmp	.+14     	; 0x536 <CALLBACK_USB_GetDescriptor+0x88>
				Address = &ConfigurationDescriptor.HID1_KeyboardHID;
				Size    = sizeof(USB_HID_Descriptor_HID_t);
			}
			else
			{
				Address = &ConfigurationDescriptor.HID2_MouseHID;
 528:	e4 e2       	ldi	r30, 0x24	; 36
 52a:	f1 e0       	ldi	r31, 0x01	; 1
 52c:	04 c0       	rjmp	.+8      	; 0x536 <CALLBACK_USB_GetDescriptor+0x88>
				Size    = sizeof(KeyboardReport);
			}
			else
			{
				Address = &MouseReport;
				Size    = sizeof(MouseReport);
 52e:	86 e3       	ldi	r24, 0x36	; 54
 530:	90 e0       	ldi	r25, 0x00	; 0
				Address = &KeyboardReport;
				Size    = sizeof(KeyboardReport);
			}
			else
			{
				Address = &MouseReport;
 532:	e5 e8       	ldi	r30, 0x85	; 133
 534:	f1 e0       	ldi	r31, 0x01	; 1
			}

			break;
	}

	*DescriptorAddress = Address;
 536:	da 01       	movw	r26, r20
 538:	11 96       	adiw	r26, 0x01	; 1
 53a:	fc 93       	st	X, r31
 53c:	ee 93       	st	-X, r30
	return Size;
}
 53e:	08 95       	ret

00000540 <Endpoint_Write_Stream_LE>:
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
 540:	af 92       	push	r10
 542:	bf 92       	push	r11
 544:	cf 92       	push	r12
 546:	df 92       	push	r13
 548:	ef 92       	push	r14
 54a:	ff 92       	push	r15
 54c:	1f 93       	push	r17
 54e:	cf 93       	push	r28
 550:	df 93       	push	r29
 552:	ec 01       	movw	r28, r24
 554:	7b 01       	movw	r14, r22
 556:	6a 01       	movw	r12, r20
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	uint16_t BytesInTransfer = 0;
	uint8_t  ErrorCode;

	if ((ErrorCode = Endpoint_WaitUntilReady()))
 558:	52 d1       	rcall	.+676    	; 0x7fe <Endpoint_WaitUntilReady>
 55a:	18 2f       	mov	r17, r24
 55c:	88 23       	and	r24, r24
 55e:	a9 f5       	brne	.+106    	; 0x5ca <Endpoint_Write_Stream_LE+0x8a>
 560:	c1 14       	cp	r12, r1
	  return ErrorCode;

	if (BytesProcessed != NULL)
 562:	d1 04       	cpc	r13, r1
 564:	39 f0       	breq	.+14     	; 0x574 <Endpoint_Write_Stream_LE+0x34>
 566:	f6 01       	movw	r30, r12
	{
		Length -= *BytesProcessed;
 568:	20 81       	ld	r18, Z
 56a:	31 81       	ldd	r19, Z+1	; 0x01
 56c:	e2 1a       	sub	r14, r18
 56e:	f3 0a       	sbc	r15, r19
 570:	c2 0f       	add	r28, r18
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
 572:	d3 1f       	adc	r29, r19
 574:	aa 24       	eor	r10, r10

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
 576:	bb 24       	eor	r11, r11
 578:	23 c0       	rjmp	.+70     	; 0x5c0 <Endpoint_Write_Stream_LE+0x80>
 57a:	80 91 e8 00 	lds	r24, 0x00E8
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
 57e:	85 fd       	sbrc	r24, 5
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
	{
		if (!(Endpoint_IsReadWriteAllowed()))
 580:	16 c0       	rjmp	.+44     	; 0x5ae <Endpoint_Write_Stream_LE+0x6e>
 582:	80 91 e8 00 	lds	r24, 0x00E8
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 586:	8e 77       	andi	r24, 0x7E	; 126
 588:	80 93 e8 00 	sts	0x00E8, r24
 58c:	fa d3       	rcall	.+2036   	; 0xd82 <USB_USBTask>
		{
			TEMPLATE_CLEAR_ENDPOINT();

			#if !defined(INTERRUPT_CONTROL_ENDPOINT)
			USB_USBTask();
 58e:	c1 14       	cp	r12, r1
 590:	d1 04       	cpc	r13, r1
			#endif

			if (BytesProcessed != NULL)
 592:	49 f0       	breq	.+18     	; 0x5a6 <Endpoint_Write_Stream_LE+0x66>
 594:	f6 01       	movw	r30, r12
 596:	80 81       	ld	r24, Z
			{
				*BytesProcessed += BytesInTransfer;
 598:	91 81       	ldd	r25, Z+1	; 0x01
 59a:	8a 0d       	add	r24, r10
 59c:	9b 1d       	adc	r25, r11
 59e:	91 83       	std	Z+1, r25	; 0x01
 5a0:	80 83       	st	Z, r24
 5a2:	15 e0       	ldi	r17, 0x05	; 5
 5a4:	12 c0       	rjmp	.+36     	; 0x5ca <Endpoint_Write_Stream_LE+0x8a>
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
 5a6:	2b d1       	rcall	.+598    	; 0x7fe <Endpoint_WaitUntilReady>
 5a8:	88 23       	and	r24, r24
			}

			if ((ErrorCode = Endpoint_WaitUntilReady()))
 5aa:	51 f0       	breq	.+20     	; 0x5c0 <Endpoint_Write_Stream_LE+0x80>
 5ac:	0d c0       	rjmp	.+26     	; 0x5c8 <Endpoint_Write_Stream_LE+0x88>
 5ae:	89 91       	ld	r24, Y+
 5b0:	80 93 f1 00 	sts	0x00F1, r24
			  return ErrorCode;
		}
		else
		{
			TEMPLATE_TRANSFER_BYTE(DataStream);
 5b4:	08 94       	sec
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
 5b6:	e1 08       	sbc	r14, r1
 5b8:	f1 08       	sbc	r15, r1
			TEMPLATE_BUFFER_MOVE(DataStream, 1);
			Length--;
 5ba:	08 94       	sec
 5bc:	a1 1c       	adc	r10, r1
 5be:	b1 1c       	adc	r11, r1
			BytesInTransfer++;
 5c0:	e1 14       	cp	r14, r1
 5c2:	f1 04       	cpc	r15, r1
 5c4:	d1 f6       	brne	.-76     	; 0x57a <Endpoint_Write_Stream_LE+0x3a>
	{
		Length -= *BytesProcessed;
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
 5c6:	01 c0       	rjmp	.+2      	; 0x5ca <Endpoint_Write_Stream_LE+0x8a>
 5c8:	18 2f       	mov	r17, r24
 5ca:	81 2f       	mov	r24, r17
 5cc:	df 91       	pop	r29
			{
				*BytesProcessed += BytesInTransfer;
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
			}

			if ((ErrorCode = Endpoint_WaitUntilReady()))
 5ce:	cf 91       	pop	r28
			BytesInTransfer++;
		}
	}

	return ENDPOINT_RWSTREAM_NoError;
}
 5d0:	1f 91       	pop	r17
 5d2:	ff 90       	pop	r15
 5d4:	ef 90       	pop	r14
 5d6:	df 90       	pop	r13
 5d8:	cf 90       	pop	r12
 5da:	bf 90       	pop	r11
 5dc:	af 90       	pop	r10
 5de:	08 95       	ret

000005e0 <Endpoint_Write_Control_Stream_LE>:
 5e0:	20 91 16 01 	lds	r18, 0x0116
 5e4:	30 91 17 01 	lds	r19, 0x0117
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
 5e8:	26 17       	cp	r18, r22
 5ea:	37 07       	cpc	r19, r23
 5ec:	20 f4       	brcc	.+8      	; 0x5f6 <Endpoint_Write_Control_Stream_LE+0x16>
 5ee:	b9 01       	movw	r22, r18
 5f0:	fc 01       	movw	r30, r24
 5f2:	20 e0       	ldi	r18, 0x00	; 0
 5f4:	37 c0       	rjmp	.+110    	; 0x664 <Endpoint_Write_Control_Stream_LE+0x84>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
 5f6:	61 15       	cp	r22, r1
 5f8:	71 05       	cpc	r23, r1
 5fa:	d1 f7       	brne	.-12     	; 0x5f0 <Endpoint_Write_Control_Stream_LE+0x10>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 5fc:	20 91 e8 00 	lds	r18, 0x00E8
 600:	2e 77       	andi	r18, 0x7E	; 126
 602:	20 93 e8 00 	sts	0x00E8, r18
 606:	f4 cf       	rjmp	.-24     	; 0x5f0 <Endpoint_Write_Control_Stream_LE+0x10>
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
 608:	80 91 0f 01 	lds	r24, 0x010F

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
 60c:	88 23       	and	r24, r24
 60e:	09 f4       	brne	.+2      	; 0x612 <Endpoint_Write_Control_Stream_LE+0x32>
 610:	3f c0       	rjmp	.+126    	; 0x690 <Endpoint_Write_Control_Stream_LE+0xb0>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
 612:	85 30       	cpi	r24, 0x05	; 5
 614:	c9 f1       	breq	.+114    	; 0x688 <Endpoint_Write_Control_Stream_LE+0xa8>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 616:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
 61a:	83 fd       	sbrc	r24, 3
 61c:	37 c0       	rjmp	.+110    	; 0x68c <Endpoint_Write_Control_Stream_LE+0xac>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 61e:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
 622:	82 fd       	sbrc	r24, 2
 624:	2b c0       	rjmp	.+86     	; 0x67c <Endpoint_Write_Control_Stream_LE+0x9c>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 626:	80 91 e8 00 	lds	r24, 0x00E8
		  break;

		if (Endpoint_IsINReady())
 62a:	80 ff       	sbrs	r24, 0
 62c:	1b c0       	rjmp	.+54     	; 0x664 <Endpoint_Write_Control_Stream_LE+0x84>
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
 62e:	80 91 f2 00 	lds	r24, 0x00F2
 632:	90 91 f3 00 	lds	r25, 0x00F3
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
 636:	06 c0       	rjmp	.+12     	; 0x644 <Endpoint_Write_Control_Stream_LE+0x64>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
 638:	21 91       	ld	r18, Z+
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
 63a:	20 93 f1 00 	sts	0x00F1, r18
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
 63e:	61 50       	subi	r22, 0x01	; 1
 640:	70 40       	sbci	r23, 0x00	; 0
				BytesInEndpoint++;
 642:	01 96       	adiw	r24, 0x01	; 1

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
 644:	61 15       	cp	r22, r1
 646:	71 05       	cpc	r23, r1
 648:	19 f0       	breq	.+6      	; 0x650 <Endpoint_Write_Control_Stream_LE+0x70>
 64a:	88 30       	cpi	r24, 0x08	; 8
 64c:	91 05       	cpc	r25, r1
 64e:	a0 f3       	brcs	.-24     	; 0x638 <Endpoint_Write_Control_Stream_LE+0x58>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
 650:	21 e0       	ldi	r18, 0x01	; 1
 652:	88 30       	cpi	r24, 0x08	; 8
 654:	91 05       	cpc	r25, r1
 656:	09 f0       	breq	.+2      	; 0x65a <Endpoint_Write_Control_Stream_LE+0x7a>
 658:	20 e0       	ldi	r18, 0x00	; 0
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 65a:	80 91 e8 00 	lds	r24, 0x00E8
 65e:	8e 77       	andi	r24, 0x7E	; 126
 660:	80 93 e8 00 	sts	0x00E8, r24
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
 664:	61 15       	cp	r22, r1
 666:	71 05       	cpc	r23, r1
 668:	79 f6       	brne	.-98     	; 0x608 <Endpoint_Write_Control_Stream_LE+0x28>
 66a:	22 23       	and	r18, r18
 66c:	69 f6       	brne	.-102    	; 0x608 <Endpoint_Write_Control_Stream_LE+0x28>
 66e:	06 c0       	rjmp	.+12     	; 0x67c <Endpoint_Write_Control_Stream_LE+0x9c>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
 670:	80 91 0f 01 	lds	r24, 0x010F

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
 674:	88 23       	and	r24, r24
 676:	61 f0       	breq	.+24     	; 0x690 <Endpoint_Write_Control_Stream_LE+0xb0>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
 678:	85 30       	cpi	r24, 0x05	; 5
 67a:	61 f0       	breq	.+24     	; 0x694 <Endpoint_Write_Control_Stream_LE+0xb4>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 67c:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
 680:	82 ff       	sbrs	r24, 2
 682:	f6 cf       	rjmp	.-20     	; 0x670 <Endpoint_Write_Control_Stream_LE+0x90>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
 684:	80 e0       	ldi	r24, 0x00	; 0
 686:	08 95       	ret
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
 688:	83 e0       	ldi	r24, 0x03	; 3
 68a:	08 95       	ret
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
 68c:	81 e0       	ldi	r24, 0x01	; 1
 68e:	08 95       	ret
	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
 690:	82 e0       	ldi	r24, 0x02	; 2
 692:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
 694:	83 e0       	ldi	r24, 0x03	; 3
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
 696:	08 95       	ret

00000698 <Endpoint_Write_Control_PStream_LE>:
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
 698:	20 91 16 01 	lds	r18, 0x0116
 69c:	30 91 17 01 	lds	r19, 0x0117
 6a0:	26 17       	cp	r18, r22
 6a2:	37 07       	cpc	r19, r23
 6a4:	20 f4       	brcc	.+8      	; 0x6ae <Endpoint_Write_Control_PStream_LE+0x16>
 6a6:	b9 01       	movw	r22, r18
 6a8:	fc 01       	movw	r30, r24
 6aa:	20 e0       	ldi	r18, 0x00	; 0
 6ac:	38 c0       	rjmp	.+112    	; 0x71e <Endpoint_Write_Control_PStream_LE+0x86>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
 6ae:	61 15       	cp	r22, r1
 6b0:	71 05       	cpc	r23, r1
 6b2:	d1 f7       	brne	.-12     	; 0x6a8 <Endpoint_Write_Control_PStream_LE+0x10>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 6b4:	20 91 e8 00 	lds	r18, 0x00E8
 6b8:	2e 77       	andi	r18, 0x7E	; 126
 6ba:	20 93 e8 00 	sts	0x00E8, r18
 6be:	f4 cf       	rjmp	.-24     	; 0x6a8 <Endpoint_Write_Control_PStream_LE+0x10>
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
 6c0:	80 91 0f 01 	lds	r24, 0x010F

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
 6c4:	88 23       	and	r24, r24
 6c6:	09 f4       	brne	.+2      	; 0x6ca <Endpoint_Write_Control_PStream_LE+0x32>
 6c8:	40 c0       	rjmp	.+128    	; 0x74a <Endpoint_Write_Control_PStream_LE+0xb2>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
 6ca:	85 30       	cpi	r24, 0x05	; 5
 6cc:	d1 f1       	breq	.+116    	; 0x742 <Endpoint_Write_Control_PStream_LE+0xaa>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 6ce:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
 6d2:	83 fd       	sbrc	r24, 3
 6d4:	38 c0       	rjmp	.+112    	; 0x746 <Endpoint_Write_Control_PStream_LE+0xae>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 6d6:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
 6da:	82 fd       	sbrc	r24, 2
 6dc:	2c c0       	rjmp	.+88     	; 0x736 <Endpoint_Write_Control_PStream_LE+0x9e>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 6de:	80 91 e8 00 	lds	r24, 0x00E8
		  break;

		if (Endpoint_IsINReady())
 6e2:	80 ff       	sbrs	r24, 0
 6e4:	1c c0       	rjmp	.+56     	; 0x71e <Endpoint_Write_Control_PStream_LE+0x86>
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
 6e6:	80 91 f2 00 	lds	r24, 0x00F2
 6ea:	90 91 f3 00 	lds	r25, 0x00F3
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
 6ee:	07 c0       	rjmp	.+14     	; 0x6fe <Endpoint_Write_Control_PStream_LE+0x66>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
 6f0:	24 91       	lpm	r18, Z
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
 6f2:	20 93 f1 00 	sts	0x00F1, r18
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
 6f6:	31 96       	adiw	r30, 0x01	; 1
				Length--;
 6f8:	61 50       	subi	r22, 0x01	; 1
 6fa:	70 40       	sbci	r23, 0x00	; 0
				BytesInEndpoint++;
 6fc:	01 96       	adiw	r24, 0x01	; 1

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
 6fe:	61 15       	cp	r22, r1
 700:	71 05       	cpc	r23, r1
 702:	19 f0       	breq	.+6      	; 0x70a <Endpoint_Write_Control_PStream_LE+0x72>
 704:	88 30       	cpi	r24, 0x08	; 8
 706:	91 05       	cpc	r25, r1
 708:	98 f3       	brcs	.-26     	; 0x6f0 <Endpoint_Write_Control_PStream_LE+0x58>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
 70a:	21 e0       	ldi	r18, 0x01	; 1
 70c:	88 30       	cpi	r24, 0x08	; 8
 70e:	91 05       	cpc	r25, r1
 710:	09 f0       	breq	.+2      	; 0x714 <Endpoint_Write_Control_PStream_LE+0x7c>
 712:	20 e0       	ldi	r18, 0x00	; 0
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 714:	80 91 e8 00 	lds	r24, 0x00E8
 718:	8e 77       	andi	r24, 0x7E	; 126
 71a:	80 93 e8 00 	sts	0x00E8, r24
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
 71e:	61 15       	cp	r22, r1
 720:	71 05       	cpc	r23, r1
 722:	71 f6       	brne	.-100    	; 0x6c0 <Endpoint_Write_Control_PStream_LE+0x28>
 724:	22 23       	and	r18, r18
 726:	61 f6       	brne	.-104    	; 0x6c0 <Endpoint_Write_Control_PStream_LE+0x28>
 728:	06 c0       	rjmp	.+12     	; 0x736 <Endpoint_Write_Control_PStream_LE+0x9e>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
 72a:	80 91 0f 01 	lds	r24, 0x010F

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
 72e:	88 23       	and	r24, r24
 730:	61 f0       	breq	.+24     	; 0x74a <Endpoint_Write_Control_PStream_LE+0xb2>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
 732:	85 30       	cpi	r24, 0x05	; 5
 734:	61 f0       	breq	.+24     	; 0x74e <Endpoint_Write_Control_PStream_LE+0xb6>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 736:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
 73a:	82 ff       	sbrs	r24, 2
 73c:	f6 cf       	rjmp	.-20     	; 0x72a <Endpoint_Write_Control_PStream_LE+0x92>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
 73e:	80 e0       	ldi	r24, 0x00	; 0
 740:	08 95       	ret
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
 742:	83 e0       	ldi	r24, 0x03	; 3
 744:	08 95       	ret
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
 746:	81 e0       	ldi	r24, 0x01	; 1
 748:	08 95       	ret
	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
 74a:	82 e0       	ldi	r24, 0x02	; 2
 74c:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
 74e:	83 e0       	ldi	r24, 0x03	; 3
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
 750:	08 95       	ret

00000752 <Endpoint_ConfigureEndpoint_Prv>:
	UECFG0X = UECFG0XData;
	UECFG1X = UECFG1XData;

	return Endpoint_IsConfigured();
#else
	for (uint8_t EPNum = Number; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
 752:	98 2f       	mov	r25, r24
 754:	2a c0       	rjmp	.+84     	; 0x7aa <Endpoint_ConfigureEndpoint_Prv+0x58>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 756:	90 93 e9 00 	sts	0x00E9, r25
		uint8_t UECFG1XTemp;
		uint8_t UEIENXTemp;

		Endpoint_SelectEndpoint(EPNum);

		if (EPNum == Number)
 75a:	98 17       	cp	r25, r24
 75c:	39 f0       	breq	.+14     	; 0x76c <Endpoint_ConfigureEndpoint_Prv+0x1a>
			UECFG1XTemp = UECFG1XData;
			UEIENXTemp  = 0;
		}
		else
		{
			UECFG0XTemp = UECFG0X;
 75e:	70 91 ec 00 	lds	r23, 0x00EC
			UECFG1XTemp = UECFG1X;
 762:	20 91 ed 00 	lds	r18, 0x00ED
			UEIENXTemp  = UEIENX;
 766:	50 91 f0 00 	lds	r21, 0x00F0
 76a:	03 c0       	rjmp	.+6      	; 0x772 <Endpoint_ConfigureEndpoint_Prv+0x20>
		Endpoint_SelectEndpoint(EPNum);

		if (EPNum == Number)
		{
			UECFG0XTemp = UECFG0XData;
			UECFG1XTemp = UECFG1XData;
 76c:	24 2f       	mov	r18, r20

		Endpoint_SelectEndpoint(EPNum);

		if (EPNum == Number)
		{
			UECFG0XTemp = UECFG0XData;
 76e:	76 2f       	mov	r23, r22
			UECFG1XTemp = UECFG1XData;
			UEIENXTemp  = 0;
 770:	50 e0       	ldi	r21, 0x00	; 0
			UECFG0XTemp = UECFG0X;
			UECFG1XTemp = UECFG1X;
			UEIENXTemp  = UEIENX;
		}

		if (!(UECFG1XTemp & (1 << ALLOC)))
 772:	21 ff       	sbrs	r18, 1
 774:	19 c0       	rjmp	.+50     	; 0x7a8 <Endpoint_ConfigureEndpoint_Prv+0x56>
			 *  to and from a host.
			 */
			static inline void Endpoint_DisableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_DisableEndpoint(void)
			{
				UECONX &= ~(1 << EPEN);
 776:	30 91 eb 00 	lds	r19, 0x00EB
 77a:	3e 7f       	andi	r19, 0xFE	; 254
 77c:	30 93 eb 00 	sts	0x00EB, r19
		  continue;

		Endpoint_DisableEndpoint();
		UECFG1X &= ~(1 << ALLOC);
 780:	30 91 ed 00 	lds	r19, 0x00ED
 784:	3d 7f       	andi	r19, 0xFD	; 253
 786:	30 93 ed 00 	sts	0x00ED, r19
			 *  \note Endpoints must first be configured properly via \ref Endpoint_ConfigureEndpoint().
			 */
			static inline void Endpoint_EnableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_EnableEndpoint(void)
			{
				UECONX |= (1 << EPEN);
 78a:	30 91 eb 00 	lds	r19, 0x00EB
 78e:	31 60       	ori	r19, 0x01	; 1
 790:	30 93 eb 00 	sts	0x00EB, r19

		Endpoint_EnableEndpoint();
		UECFG0X = UECFG0XTemp;
 794:	70 93 ec 00 	sts	0x00EC, r23
		UECFG1X = UECFG1XTemp;
 798:	20 93 ed 00 	sts	0x00ED, r18
		UEIENX  = UEIENXTemp;
 79c:	50 93 f0 00 	sts	0x00F0, r21
			 *  \return Boolean \c true if the currently selected endpoint has been configured, \c false otherwise.
			 */
			static inline bool Endpoint_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsConfigured(void)
			{
				return ((UESTA0X & (1 << CFGOK)) ? true : false);
 7a0:	20 91 ee 00 	lds	r18, 0x00EE

		if (!(Endpoint_IsConfigured()))
 7a4:	27 ff       	sbrs	r18, 7
 7a6:	08 c0       	rjmp	.+16     	; 0x7b8 <Endpoint_ConfigureEndpoint_Prv+0x66>
	UECFG0X = UECFG0XData;
	UECFG1X = UECFG1XData;

	return Endpoint_IsConfigured();
#else
	for (uint8_t EPNum = Number; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
 7a8:	9f 5f       	subi	r25, 0xFF	; 255
 7aa:	97 30       	cpi	r25, 0x07	; 7
 7ac:	a0 f2       	brcs	.-88     	; 0x756 <Endpoint_ConfigureEndpoint_Prv+0x4>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 7ae:	8f 70       	andi	r24, 0x0F	; 15
 7b0:	80 93 e9 00 	sts	0x00E9, r24
		if (!(Endpoint_IsConfigured()))
		  return false;
	}

	Endpoint_SelectEndpoint(Number);
	return true;
 7b4:	81 e0       	ldi	r24, 0x01	; 1
 7b6:	08 95       	ret
		UECFG0X = UECFG0XTemp;
		UECFG1X = UECFG1XTemp;
		UEIENX  = UEIENXTemp;

		if (!(Endpoint_IsConfigured()))
		  return false;
 7b8:	80 e0       	ldi	r24, 0x00	; 0
	}

	Endpoint_SelectEndpoint(Number);
	return true;
#endif
}
 7ba:	08 95       	ret

000007bc <Endpoint_ClearStatusStage>:
	}
}

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
 7bc:	80 91 10 01 	lds	r24, 0x0110
 7c0:	87 ff       	sbrs	r24, 7
 7c2:	13 c0       	rjmp	.+38     	; 0x7ea <Endpoint_ClearStatusStage+0x2e>
 7c4:	04 c0       	rjmp	.+8      	; 0x7ce <Endpoint_ClearStatusStage+0x12>
	{
		while (!(Endpoint_IsOUTReceived()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
 7c6:	80 91 0f 01 	lds	r24, 0x010F
 7ca:	88 23       	and	r24, r24
 7cc:	b9 f0       	breq	.+46     	; 0x7fc <Endpoint_ClearStatusStage+0x40>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 7ce:	80 91 e8 00 	lds	r24, 0x00E8

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
	{
		while (!(Endpoint_IsOUTReceived()))
 7d2:	82 ff       	sbrs	r24, 2
 7d4:	f8 cf       	rjmp	.-16     	; 0x7c6 <Endpoint_ClearStatusStage+0xa>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 7d6:	80 91 e8 00 	lds	r24, 0x00E8
 7da:	8b 77       	andi	r24, 0x7B	; 123
 7dc:	80 93 e8 00 	sts	0x00E8, r24
 7e0:	08 95       	ret
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
 7e2:	80 91 0f 01 	lds	r24, 0x010F
 7e6:	88 23       	and	r24, r24
 7e8:	49 f0       	breq	.+18     	; 0x7fc <Endpoint_ClearStatusStage+0x40>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 7ea:	80 91 e8 00 	lds	r24, 0x00E8

		Endpoint_ClearOUT();
	}
	else
	{
		while (!(Endpoint_IsINReady()))
 7ee:	80 ff       	sbrs	r24, 0
 7f0:	f8 cf       	rjmp	.-16     	; 0x7e2 <Endpoint_ClearStatusStage+0x26>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 7f2:	80 91 e8 00 	lds	r24, 0x00E8
 7f6:	8e 77       	andi	r24, 0x7E	; 126
 7f8:	80 93 e8 00 	sts	0x00E8, r24
 7fc:	08 95       	ret

000007fe <Endpoint_WaitUntilReady>:
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
 7fe:	80 91 e4 00 	lds	r24, 0x00E4
 802:	90 91 e5 00 	lds	r25, 0x00E5
 806:	45 e6       	ldi	r20, 0x65	; 101
 808:	01 c0       	rjmp	.+2      	; 0x80c <Endpoint_WaitUntilReady+0xe>
 80a:	c9 01       	movw	r24, r18
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
 80c:	20 91 ec 00 	lds	r18, 0x00EC
 810:	20 ff       	sbrs	r18, 0
 812:	23 c0       	rjmp	.+70     	; 0x85a <Endpoint_WaitUntilReady+0x5c>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 814:	20 91 e8 00 	lds	r18, 0x00E8

	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
 818:	20 fd       	sbrc	r18, 0
 81a:	15 c0       	rjmp	.+42     	; 0x846 <Endpoint_WaitUntilReady+0x48>
		{
			if (Endpoint_IsOUTReceived())
			  return ENDPOINT_READYWAIT_NoError;
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;
 81c:	20 91 0f 01 	lds	r18, 0x010F

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
 820:	22 23       	and	r18, r18
 822:	99 f0       	breq	.+38     	; 0x84a <Endpoint_WaitUntilReady+0x4c>
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
 824:	25 30       	cpi	r18, 0x05	; 5
 826:	99 f0       	breq	.+38     	; 0x84e <Endpoint_WaitUntilReady+0x50>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
 828:	20 91 eb 00 	lds	r18, 0x00EB
		  return ENDPOINT_READYWAIT_BusSuspended;
		else if (Endpoint_IsStalled())
 82c:	25 fd       	sbrc	r18, 5
 82e:	11 c0       	rjmp	.+34     	; 0x852 <Endpoint_WaitUntilReady+0x54>
 830:	20 91 e4 00 	lds	r18, 0x00E4
 834:	30 91 e5 00 	lds	r19, 0x00E5
		  return ENDPOINT_READYWAIT_EndpointStalled;

		uint16_t CurrentFrameNumber = USB_Device_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
 838:	28 17       	cp	r18, r24
 83a:	39 07       	cpc	r19, r25
 83c:	39 f3       	breq	.-50     	; 0x80c <Endpoint_WaitUntilReady+0xe>
 83e:	41 50       	subi	r20, 0x01	; 1
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
 840:	21 f7       	brne	.-56     	; 0x80a <Endpoint_WaitUntilReady+0xc>
			  return ENDPOINT_READYWAIT_Timeout;
 842:	84 e0       	ldi	r24, 0x04	; 4
 844:	08 95       	ret
	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
 846:	80 e0       	ldi	r24, 0x00	; 0
 848:	08 95       	ret
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
 84a:	82 e0       	ldi	r24, 0x02	; 2
 84c:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_READYWAIT_BusSuspended;
 84e:	83 e0       	ldi	r24, 0x03	; 3
 850:	08 95       	ret
		else if (Endpoint_IsStalled())
		  return ENDPOINT_READYWAIT_EndpointStalled;
 852:	81 e0       	ldi	r24, 0x01	; 1
 854:	08 95       	ret
			  return ENDPOINT_READYWAIT_NoError;
		}
		else
		{
			if (Endpoint_IsOUTReceived())
			  return ENDPOINT_READYWAIT_NoError;
 856:	80 e0       	ldi	r24, 0x00	; 0

			if (!(TimeoutMSRem--))
			  return ENDPOINT_READYWAIT_Timeout;
		}
	}
}
 858:	08 95       	ret
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 85a:	20 91 e8 00 	lds	r18, 0x00E8
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
		}
		else
		{
			if (Endpoint_IsOUTReceived())
 85e:	22 ff       	sbrs	r18, 2
 860:	dd cf       	rjmp	.-70     	; 0x81c <Endpoint_WaitUntilReady+0x1e>
 862:	f9 cf       	rjmp	.-14     	; 0x856 <Endpoint_WaitUntilReady+0x58>

00000864 <USB_ResetInterface>:

	USB_IsInitialized = false;
}

void USB_ResetInterface(void)
{
 864:	0f 93       	push	r16
 866:	1f 93       	push	r17
 868:	cf 93       	push	r28
 86a:	df 93       	push	r29
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
 86c:	4e d0       	rcall	.+156    	; 0x90a <USB_INT_DisableAllInterrupts>
 86e:	55 d0       	rcall	.+170    	; 0x91a <USB_INT_ClearAllInterrupts>
	USB_INT_ClearAllInterrupts();
 870:	c8 ed       	ldi	r28, 0xD8	; 216
 872:	d0 e0       	ldi	r29, 0x00	; 0
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
 874:	88 81       	ld	r24, Y
 876:	8f 77       	andi	r24, 0x7F	; 127
 878:	88 83       	st	Y, r24
 87a:	88 81       	ld	r24, Y
 87c:	80 68       	ori	r24, 0x80	; 128
				USBCON |=  (1 << USBE);
 87e:	88 83       	st	Y, r24
 880:	88 81       	ld	r24, Y
 882:	8f 7d       	andi	r24, 0xDF	; 223
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
 884:	88 83       	st	Y, r24
 886:	e7 ed       	ldi	r30, 0xD7	; 215
 888:	f0 e0       	ldi	r31, 0x00	; 0

	if (USB_CurrentMode == USB_MODE_Device)
	{
		#if defined(USB_CAN_BE_DEVICE)
		#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
		UHWCON |=  (1 << UIMOD);
 88a:	80 81       	ld	r24, Z
 88c:	80 68       	ori	r24, 0x80	; 128
 88e:	80 83       	st	Z, r24
 890:	19 bc       	out	0x29, r1	; 41
 892:	10 92 0f 01 	sts	0x010F, r1
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState                 = DEVICE_STATE_Unattached;
 896:	10 92 0b 01 	sts	0x010B, r1
	USB_Device_ConfigurationNumber  = 0;
 89a:	10 92 0d 01 	sts	0x010D, r1

	#if !defined(NO_DEVICE_REMOTE_WAKEUP)
	USB_Device_RemoteWakeupEnabled  = false;
 89e:	10 92 0c 01 	sts	0x010C, r1
	#endif

	#if !defined(NO_DEVICE_SELF_POWER)
	USB_Device_CurrentlySelfPowered = false;
 8a2:	00 ee       	ldi	r16, 0xE0	; 224
 8a4:	10 e0       	ldi	r17, 0x00	; 0
			}

			static inline void USB_Device_SetFullSpeed(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetFullSpeed(void)
			{
				UDCON &= ~(1 << LSM);
 8a6:	f8 01       	movw	r30, r16
 8a8:	80 81       	ld	r24, Z
 8aa:	8b 7f       	andi	r24, 0xFB	; 251
 8ac:	80 83       	st	Z, r24
 8ae:	88 81       	ld	r24, Y
 8b0:	81 60       	ori	r24, 0x01	; 1
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBCON |= (1 << VBUSTE);
 8b2:	88 83       	st	Y, r24
 8b4:	80 e0       	ldi	r24, 0x00	; 0
 8b6:	60 e0       	ldi	r22, 0x00	; 0
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
 8b8:	42 e0       	ldi	r20, 0x02	; 2
 8ba:	4b df       	rcall	.-362    	; 0x752 <Endpoint_ConfigureEndpoint_Prv>
 8bc:	e1 ee       	ldi	r30, 0xE1	; 225
 8be:	f0 e0       	ldi	r31, 0x00	; 0
 8c0:	80 81       	ld	r24, Z
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
 8c2:	8e 7f       	andi	r24, 0xFE	; 254
 8c4:	80 83       	st	Z, r24
 8c6:	e2 ee       	ldi	r30, 0xE2	; 226
 8c8:	f0 e0       	ldi	r31, 0x00	; 0
 8ca:	80 81       	ld	r24, Z
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
 8cc:	81 60       	ori	r24, 0x01	; 1
 8ce:	80 83       	st	Z, r24
 8d0:	80 81       	ld	r24, Z
 8d2:	88 60       	ori	r24, 0x08	; 8
 8d4:	80 83       	st	Z, r24
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
 8d6:	f8 01       	movw	r30, r16
 8d8:	80 81       	ld	r24, Z
 8da:	8e 7f       	andi	r24, 0xFE	; 254
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
 8dc:	80 83       	st	Z, r24
 8de:	88 81       	ld	r24, Y
 8e0:	80 61       	ori	r24, 0x10	; 16
 8e2:	88 83       	st	Y, r24

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON |=  (1 << OTGPADE);
 8e4:	df 91       	pop	r29
 8e6:	cf 91       	pop	r28
 8e8:	1f 91       	pop	r17
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
 8ea:	0f 91       	pop	r16
 8ec:	08 95       	ret

000008ee <USB_Init>:
 8ee:	e8 ed       	ldi	r30, 0xD8	; 216
 8f0:	f0 e0       	ldi	r31, 0x00	; 0
 8f2:	80 81       	ld	r24, Z
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON &= ~(1 << OTGPADE);
 8f4:	8f 7e       	andi	r24, 0xEF	; 239
 8f6:	80 83       	st	Z, r24

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON |=  (1 << UVREGE);
 8f8:	e7 ed       	ldi	r30, 0xD7	; 215
 8fa:	f0 e0       	ldi	r31, 0x00	; 0
 8fc:	80 81       	ld	r24, Z
 8fe:	81 60       	ori	r24, 0x01	; 1
 900:	80 83       	st	Z, r24
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
 902:	81 e0       	ldi	r24, 0x01	; 1
 904:	80 93 0e 01 	sts	0x010E, r24

	USB_ResetInterface();
 908:	ad cf       	rjmp	.-166    	; 0x864 <USB_ResetInterface>

0000090a <USB_INT_DisableAllInterrupts>:
#include "../USBInterrupt.h"

void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
 90a:	e8 ed       	ldi	r30, 0xD8	; 216
 90c:	f0 e0       	ldi	r31, 0x00	; 0
 90e:	80 81       	ld	r24, Z
 910:	8c 7f       	andi	r24, 0xFC	; 252
 912:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
 914:	10 92 e2 00 	sts	0x00E2, r1
	#endif
}
 918:	08 95       	ret

0000091a <USB_INT_ClearAllInterrupts>:

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
 91a:	10 92 da 00 	sts	0x00DA, r1
	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
 91e:	10 92 e1 00 	sts	0x00E1, r1
	#endif
}
 922:	08 95       	ret

00000924 <__vector_10>:

ISR(USB_GEN_vect, ISR_BLOCK)
{
 924:	1f 92       	push	r1
 926:	0f 92       	push	r0
 928:	0f b6       	in	r0, 0x3f	; 63
 92a:	0f 92       	push	r0
 92c:	0b b6       	in	r0, 0x3b	; 59
 92e:	0f 92       	push	r0
 930:	11 24       	eor	r1, r1
 932:	2f 93       	push	r18
 934:	3f 93       	push	r19
 936:	4f 93       	push	r20
 938:	5f 93       	push	r21
 93a:	6f 93       	push	r22
 93c:	7f 93       	push	r23
 93e:	8f 93       	push	r24
 940:	9f 93       	push	r25
 942:	af 93       	push	r26
 944:	bf 93       	push	r27
 946:	ef 93       	push	r30
 948:	ff 93       	push	r31
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
					case USB_INT_SOFI:
						return (UDINT  & (1 << SOFI));
 94a:	80 91 e1 00 	lds	r24, 0x00E1
	#if defined(USB_CAN_BE_DEVICE)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
 94e:	82 ff       	sbrs	r24, 2
 950:	0a c0       	rjmp	.+20     	; 0x966 <__vector_10+0x42>
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
					case USB_INT_SOFI:
						return (UDIEN  & (1 << SOFE));
 952:	80 91 e2 00 	lds	r24, 0x00E2
 956:	82 ff       	sbrs	r24, 2
 958:	06 c0       	rjmp	.+12     	; 0x966 <__vector_10+0x42>
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
						break;
					case USB_INT_SOFI:
						UDINT  &= ~(1 << SOFI);
 95a:	80 91 e1 00 	lds	r24, 0x00E1
 95e:	8b 7f       	andi	r24, 0xFB	; 251
 960:	80 93 e1 00 	sts	0x00E1, r24
	{
		USB_INT_Clear(USB_INT_SOFI);

		EVENT_USB_Device_StartOfFrame();
 964:	0d d2       	rcall	.+1050   	; 0xd80 <USB_Event_Stub>
 966:	80 91 da 00 	lds	r24, 0x00DA
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBINT & (1 << VBUSTI));
 96a:	80 ff       	sbrs	r24, 0
	}
	#endif

	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	if (USB_INT_HasOccurred(USB_INT_VBUSTI) && USB_INT_IsEnabled(USB_INT_VBUSTI))
 96c:	1d c0       	rjmp	.+58     	; 0x9a8 <__vector_10+0x84>
 96e:	80 91 d8 00 	lds	r24, 0x00D8
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBCON & (1 << VBUSTE));
 972:	80 ff       	sbrs	r24, 0
 974:	19 c0       	rjmp	.+50     	; 0x9a8 <__vector_10+0x84>
 976:	80 91 da 00 	lds	r24, 0x00DA
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBINT &= ~(1 << VBUSTI);
 97a:	8e 7f       	andi	r24, 0xFE	; 254
 97c:	80 93 da 00 	sts	0x00DA, r24
 980:	80 91 d9 00 	lds	r24, 0x00D9
				 *  \return Boolean \c true if the VBUS line is currently detecting power from a host, \c false otherwise.
				 */
				static inline bool USB_VBUS_GetStatus(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
				static inline bool USB_VBUS_GetStatus(void)
				{
					return ((USBSTA & (1 << VBUS)) ? true : false);
 984:	80 ff       	sbrs	r24, 0
	{
		USB_INT_Clear(USB_INT_VBUSTI);

		if (USB_VBUS_GetStatus())
 986:	0c c0       	rjmp	.+24     	; 0x9a0 <__vector_10+0x7c>
 988:	8c e0       	ldi	r24, 0x0C	; 12

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
 98a:	89 bd       	out	0x29, r24	; 41
 98c:	8e e0       	ldi	r24, 0x0E	; 14
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
 98e:	89 bd       	out	0x29, r24	; 41
 990:	09 b4       	in	r0, 0x29	; 41
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			{
				USB_PLL_On();
				while (!(USB_PLL_IsReady()));
 992:	00 fe       	sbrs	r0, 0
 994:	fd cf       	rjmp	.-6      	; 0x990 <__vector_10+0x6c>
 996:	81 e0       	ldi	r24, 0x01	; 1
			}

			USB_DeviceState = DEVICE_STATE_Powered;
 998:	80 93 0f 01 	sts	0x010F, r24
 99c:	66 dc       	rcall	.-1844   	; 0x26a <EVENT_USB_Device_Connect>
			EVENT_USB_Device_Connect();
 99e:	04 c0       	rjmp	.+8      	; 0x9a8 <__vector_10+0x84>
 9a0:	19 bc       	out	0x29, r1	; 41
 9a2:	10 92 0f 01 	sts	0x010F, r1
		else
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			  USB_PLL_Off();

			USB_DeviceState = DEVICE_STATE_Unattached;
 9a6:	63 dc       	rcall	.-1850   	; 0x26e <EVENT_USB_Device_Disconnect>
 9a8:	80 91 e1 00 	lds	r24, 0x00E1
			EVENT_USB_Device_Disconnect();
 9ac:	80 ff       	sbrs	r24, 0
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
 9ae:	18 c0       	rjmp	.+48     	; 0x9e0 <__vector_10+0xbc>
 9b0:	80 91 e2 00 	lds	r24, 0x00E2
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
 9b4:	80 ff       	sbrs	r24, 0
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
 9b6:	14 c0       	rjmp	.+40     	; 0x9e0 <__vector_10+0xbc>
 9b8:	80 91 e2 00 	lds	r24, 0x00E2
 9bc:	8e 7f       	andi	r24, 0xFE	; 254
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
 9be:	80 93 e2 00 	sts	0x00E2, r24
 9c2:	80 91 e2 00 	lds	r24, 0x00E2
 9c6:	80 61       	ori	r24, 0x10	; 16
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
 9c8:	80 93 e2 00 	sts	0x00E2, r24
 9cc:	80 91 d8 00 	lds	r24, 0x00D8
 9d0:	80 62       	ori	r24, 0x20	; 32
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON |=  (1 << FRZCLK);
 9d2:	80 93 d8 00 	sts	0x00D8, r24
 9d6:	19 bc       	out	0x29, r1	; 41
 9d8:	85 e0       	ldi	r24, 0x05	; 5
 9da:	80 93 0f 01 	sts	0x010F, r24

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
		EVENT_USB_Device_Disconnect();
		#else
		USB_DeviceState = DEVICE_STATE_Suspended;
 9de:	d0 d1       	rcall	.+928    	; 0xd80 <USB_Event_Stub>
 9e0:	80 91 e1 00 	lds	r24, 0x00E1
		EVENT_USB_Device_Suspend();
 9e4:	84 ff       	sbrs	r24, 4
 9e6:	2d c0       	rjmp	.+90     	; 0xa42 <__vector_10+0x11e>
					case USB_INT_IDTI:
						return (USBINT & (1 << IDTI));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
 9e8:	80 91 e2 00 	lds	r24, 0x00E2
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
 9ec:	84 ff       	sbrs	r24, 4
 9ee:	29 c0       	rjmp	.+82     	; 0xa42 <__vector_10+0x11e>
					case USB_INT_IDTI:
						return (USBCON & (1 << IDTE));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
 9f0:	8c e0       	ldi	r24, 0x0C	; 12
 9f2:	89 bd       	out	0x29, r24	; 41
 9f4:	8e e0       	ldi	r24, 0x0E	; 14
 9f6:	89 bd       	out	0x29, r24	; 41

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
 9f8:	09 b4       	in	r0, 0x29	; 41
 9fa:	00 fe       	sbrs	r0, 0
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
 9fc:	fd cf       	rjmp	.-6      	; 0x9f8 <__vector_10+0xd4>
 9fe:	80 91 d8 00 	lds	r24, 0x00D8
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
 a02:	8f 7d       	andi	r24, 0xDF	; 223
 a04:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
 a08:	80 91 e1 00 	lds	r24, 0x00E1
 a0c:	8f 7e       	andi	r24, 0xEF	; 239
 a0e:	80 93 e1 00 	sts	0x00E1, r24
						USBINT &= ~(1 << IDTI);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
 a12:	80 91 e2 00 	lds	r24, 0x00E2
 a16:	8f 7e       	andi	r24, 0xEF	; 239
 a18:	80 93 e2 00 	sts	0x00E2, r24
						USBCON &= ~(1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
 a1c:	80 91 e2 00 	lds	r24, 0x00E2
 a20:	81 60       	ori	r24, 0x01	; 1
 a22:	80 93 e2 00 	sts	0x00E2, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
 a26:	80 91 0b 01 	lds	r24, 0x010B
 a2a:	88 23       	and	r24, r24
 a2c:	21 f4       	brne	.+8      	; 0xa36 <__vector_10+0x112>
		USB_INT_Clear(USB_INT_WAKEUPI);

		USB_INT_Disable(USB_INT_WAKEUPI);
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_Device_ConfigurationNumber)
 a2e:	80 91 e3 00 	lds	r24, 0x00E3
 a32:	87 ff       	sbrs	r24, 7
 a34:	02 c0       	rjmp	.+4      	; 0xa3a <__vector_10+0x116>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
 a36:	84 e0       	ldi	r24, 0x04	; 4
 a38:	01 c0       	rjmp	.+2      	; 0xa3c <__vector_10+0x118>
		  USB_DeviceState = DEVICE_STATE_Configured;
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
 a3a:	81 e0       	ldi	r24, 0x01	; 1
 a3c:	80 93 0f 01 	sts	0x010F, r24
 a40:	9f d1       	rcall	.+830    	; 0xd80 <USB_Event_Stub>
 a42:	80 91 e1 00 	lds	r24, 0x00E1
 a46:	83 ff       	sbrs	r24, 3

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
		#else
		EVENT_USB_Device_WakeUp();
 a48:	22 c0       	rjmp	.+68     	; 0xa8e <__vector_10+0x16a>
 a4a:	80 91 e2 00 	lds	r24, 0x00E2
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
 a4e:	83 ff       	sbrs	r24, 3
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
 a50:	1e c0       	rjmp	.+60     	; 0xa8e <__vector_10+0x16a>
 a52:	80 91 e1 00 	lds	r24, 0x00E1
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
 a56:	87 7f       	andi	r24, 0xF7	; 247
 a58:	80 93 e1 00 	sts	0x00E1, r24
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
 a5c:	82 e0       	ldi	r24, 0x02	; 2
 a5e:	80 93 0f 01 	sts	0x010F, r24
 a62:	10 92 0b 01 	sts	0x010B, r1
	{
		USB_INT_Clear(USB_INT_EORSTI);

		USB_DeviceState                = DEVICE_STATE_Default;
 a66:	80 91 e1 00 	lds	r24, 0x00E1
 a6a:	8e 7f       	andi	r24, 0xFE	; 254
		USB_Device_ConfigurationNumber = 0;
 a6c:	80 93 e1 00 	sts	0x00E1, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
 a70:	80 91 e2 00 	lds	r24, 0x00E2
 a74:	8e 7f       	andi	r24, 0xFE	; 254
 a76:	80 93 e2 00 	sts	0x00E2, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
 a7a:	80 91 e2 00 	lds	r24, 0x00E2
 a7e:	80 61       	ori	r24, 0x10	; 16
 a80:	80 93 e2 00 	sts	0x00E2, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
 a84:	80 e0       	ldi	r24, 0x00	; 0
 a86:	60 e0       	ldi	r22, 0x00	; 0
 a88:	42 e0       	ldi	r20, 0x02	; 2
 a8a:	63 de       	rcall	.-826    	; 0x752 <Endpoint_ConfigureEndpoint_Prv>
 a8c:	79 d1       	rcall	.+754    	; 0xd80 <USB_Event_Stub>
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
 a8e:	ff 91       	pop	r31
 a90:	ef 91       	pop	r30
 a92:	bf 91       	pop	r27
 a94:	af 91       	pop	r26
 a96:	9f 91       	pop	r25

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
 a98:	8f 91       	pop	r24
 a9a:	7f 91       	pop	r23
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
 a9c:	6f 91       	pop	r22
 a9e:	5f 91       	pop	r21
 aa0:	4f 91       	pop	r20
 aa2:	3f 91       	pop	r19
 aa4:	2f 91       	pop	r18
 aa6:	0f 90       	pop	r0
 aa8:	0b be       	out	0x3b, r0	; 59
 aaa:	0f 90       	pop	r0
 aac:	0f be       	out	0x3f, r0	; 63
 aae:	0f 90       	pop	r0
 ab0:	1f 90       	pop	r1
 ab2:	18 95       	reti

00000ab4 <USB_Device_ProcessControlRequest>:
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_Device_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
 ab4:	1f 93       	push	r17
 ab6:	cf 93       	push	r28
 ab8:	df 93       	push	r29
 aba:	cd b7       	in	r28, 0x3d	; 61
 abc:	de b7       	in	r29, 0x3e	; 62
 abe:	ac 97       	sbiw	r28, 0x2c	; 44
 ac0:	0f b6       	in	r0, 0x3f	; 63
 ac2:	f8 94       	cli
 ac4:	de bf       	out	0x3e, r29	; 62
 ac6:	0f be       	out	0x3f, r0	; 63
 ac8:	cd bf       	out	0x3d, r28	; 61
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
 aca:	80 e0       	ldi	r24, 0x00	; 0
	USB_ControlRequest.bRequest      = Endpoint_Read_8();
	USB_ControlRequest.wValue        = Endpoint_Read_16_LE();
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;
 acc:	e0 e1       	ldi	r30, 0x10	; 16
 ace:	f1 e0       	ldi	r31, 0x01	; 1
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
 ad0:	90 91 f1 00 	lds	r25, 0x00F1

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_8();
 ad4:	91 93       	st	Z+, r25
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
 ad6:	8f 5f       	subi	r24, 0xFF	; 255
 ad8:	88 30       	cpi	r24, 0x08	; 8
 ada:	d1 f7       	brne	.-12     	; 0xad0 <USB_Device_ProcessControlRequest+0x1c>
	  *(RequestHeader++) = Endpoint_Read_8();
	#endif

	EVENT_USB_Device_ControlRequest();
 adc:	f8 db       	rcall	.-2064   	; 0x2ce <EVENT_USB_Device_ControlRequest>
 ade:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 ae2:	83 ff       	sbrs	r24, 3

	if (Endpoint_IsSETUPReceived())
 ae4:	35 c1       	rjmp	.+618    	; 0xd50 <USB_Device_ProcessControlRequest+0x29c>
 ae6:	80 91 10 01 	lds	r24, 0x0110
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
 aea:	20 91 11 01 	lds	r18, 0x0111

		switch (USB_ControlRequest.bRequest)
 aee:	25 30       	cpi	r18, 0x05	; 5
 af0:	09 f4       	brne	.+2      	; 0xaf4 <USB_Device_ProcessControlRequest+0x40>
 af2:	84 c0       	rjmp	.+264    	; 0xbfc <USB_Device_ProcessControlRequest+0x148>
 af4:	26 30       	cpi	r18, 0x06	; 6
 af6:	40 f4       	brcc	.+16     	; 0xb08 <USB_Device_ProcessControlRequest+0x54>
 af8:	21 30       	cpi	r18, 0x01	; 1
 afa:	a1 f1       	breq	.+104    	; 0xb64 <USB_Device_ProcessControlRequest+0xb0>
 afc:	21 30       	cpi	r18, 0x01	; 1
 afe:	70 f0       	brcs	.+28     	; 0xb1c <USB_Device_ProcessControlRequest+0x68>
 b00:	23 30       	cpi	r18, 0x03	; 3
 b02:	09 f0       	breq	.+2      	; 0xb06 <USB_Device_ProcessControlRequest+0x52>
 b04:	25 c1       	rjmp	.+586    	; 0xd50 <USB_Device_ProcessControlRequest+0x29c>
 b06:	2e c0       	rjmp	.+92     	; 0xb64 <USB_Device_ProcessControlRequest+0xb0>
 b08:	28 30       	cpi	r18, 0x08	; 8
 b0a:	09 f4       	brne	.+2      	; 0xb0e <USB_Device_ProcessControlRequest+0x5a>
 b0c:	f3 c0       	rjmp	.+486    	; 0xcf4 <USB_Device_ProcessControlRequest+0x240>
 b0e:	29 30       	cpi	r18, 0x09	; 9
 b10:	09 f4       	brne	.+2      	; 0xb14 <USB_Device_ProcessControlRequest+0x60>
 b12:	02 c1       	rjmp	.+516    	; 0xd18 <USB_Device_ProcessControlRequest+0x264>
 b14:	26 30       	cpi	r18, 0x06	; 6
 b16:	09 f0       	breq	.+2      	; 0xb1a <USB_Device_ProcessControlRequest+0x66>
 b18:	1b c1       	rjmp	.+566    	; 0xd50 <USB_Device_ProcessControlRequest+0x29c>
 b1a:	93 c0       	rjmp	.+294    	; 0xc42 <USB_Device_ProcessControlRequest+0x18e>
 b1c:	80 38       	cpi	r24, 0x80	; 128
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
 b1e:	21 f0       	breq	.+8      	; 0xb28 <USB_Device_ProcessControlRequest+0x74>
 b20:	82 38       	cpi	r24, 0x82	; 130
 b22:	09 f0       	breq	.+2      	; 0xb26 <USB_Device_ProcessControlRequest+0x72>
 b24:	15 c1       	rjmp	.+554    	; 0xd50 <USB_Device_ProcessControlRequest+0x29c>
 b26:	08 c0       	rjmp	.+16     	; 0xb38 <USB_Device_ProcessControlRequest+0x84>
 b28:	80 91 0c 01 	lds	r24, 0x010C
	Endpoint_ClearOUT();
}

static void USB_Device_GetStatus(void)
{
	uint8_t CurrentStatus = 0;
 b2c:	90 91 0d 01 	lds	r25, 0x010D
			if (USB_Device_CurrentlySelfPowered)
			  CurrentStatus |= FEATURE_SELFPOWERED_ENABLED;
			#endif

			#if !defined(NO_DEVICE_REMOTE_WAKEUP)
			if (USB_Device_RemoteWakeupEnabled)
 b30:	99 23       	and	r25, r25
 b32:	71 f0       	breq	.+28     	; 0xb50 <USB_Device_ProcessControlRequest+0x9c>
 b34:	82 60       	ori	r24, 0x02	; 2
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
 b36:	0c c0       	rjmp	.+24     	; 0xb50 <USB_Device_ProcessControlRequest+0x9c>
 b38:	80 91 14 01 	lds	r24, 0x0114
			#endif
			break;
		case (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_ENDPOINT):
			#if !defined(CONTROL_ONLY_DEVICE)
			Endpoint_SelectEndpoint((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
 b3c:	8f 70       	andi	r24, 0x0F	; 15
 b3e:	80 93 e9 00 	sts	0x00E9, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 b42:	90 91 eb 00 	lds	r25, 0x00EB
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
 b46:	81 e0       	ldi	r24, 0x01	; 1

			CurrentStatus = Endpoint_IsStalled();
 b48:	95 ff       	sbrs	r25, 5
 b4a:	80 e0       	ldi	r24, 0x00	; 0
 b4c:	10 92 e9 00 	sts	0x00E9, r1
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 b50:	90 91 e8 00 	lds	r25, 0x00E8
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 b54:	97 7f       	andi	r25, 0xF7	; 247
 b56:	90 93 e8 00 	sts	0x00E8, r25
 b5a:	80 93 f1 00 	sts	0x00F1, r24
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
 b5e:	10 92 f1 00 	sts	0x00F1, r1
				UEDATX = (Data >> 8);
 b62:	d3 c0       	rjmp	.+422    	; 0xd0a <USB_Device_ProcessControlRequest+0x256>
 b64:	88 23       	and	r24, r24
				}

				break;
			case REQ_ClearFeature:
			case REQ_SetFeature:
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
 b66:	19 f0       	breq	.+6      	; 0xb6e <USB_Device_ProcessControlRequest+0xba>
 b68:	82 30       	cpi	r24, 0x02	; 2
 b6a:	09 f0       	breq	.+2      	; 0xb6e <USB_Device_ProcessControlRequest+0xba>
 b6c:	f1 c0       	rjmp	.+482    	; 0xd50 <USB_Device_ProcessControlRequest+0x29c>
 b6e:	90 e0       	ldi	r25, 0x00	; 0
	Endpoint_ClearStatusStage();
}

static void USB_Device_ClearSetFeature(void)
{
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
 b70:	8f 71       	andi	r24, 0x1F	; 31
 b72:	90 70       	andi	r25, 0x00	; 0
 b74:	00 97       	sbiw	r24, 0x00	; 0
 b76:	29 f0       	breq	.+10     	; 0xb82 <USB_Device_ProcessControlRequest+0xce>
 b78:	82 30       	cpi	r24, 0x02	; 2
 b7a:	91 05       	cpc	r25, r1
 b7c:	09 f0       	breq	.+2      	; 0xb80 <USB_Device_ProcessControlRequest+0xcc>
 b7e:	e8 c0       	rjmp	.+464    	; 0xd50 <USB_Device_ProcessControlRequest+0x29c>
 b80:	0b c0       	rjmp	.+22     	; 0xb98 <USB_Device_ProcessControlRequest+0xe4>
 b82:	80 91 12 01 	lds	r24, 0x0112
	{
		#if !defined(NO_DEVICE_REMOTE_WAKEUP)
		case REQREC_DEVICE:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
 b86:	81 30       	cpi	r24, 0x01	; 1
 b88:	09 f0       	breq	.+2      	; 0xb8c <USB_Device_ProcessControlRequest+0xd8>
 b8a:	e2 c0       	rjmp	.+452    	; 0xd50 <USB_Device_ProcessControlRequest+0x29c>
 b8c:	23 30       	cpi	r18, 0x03	; 3
			  USB_Device_RemoteWakeupEnabled = (USB_ControlRequest.bRequest == REQ_SetFeature);
 b8e:	09 f0       	breq	.+2      	; 0xb92 <USB_Device_ProcessControlRequest+0xde>
 b90:	80 e0       	ldi	r24, 0x00	; 0
 b92:	80 93 0d 01 	sts	0x010D, r24
 b96:	2c c0       	rjmp	.+88     	; 0xbf0 <USB_Device_ProcessControlRequest+0x13c>
 b98:	80 91 12 01 	lds	r24, 0x0112

			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
 b9c:	88 23       	and	r24, r24
 b9e:	41 f5       	brne	.+80     	; 0xbf0 <USB_Device_ProcessControlRequest+0x13c>
 ba0:	20 91 14 01 	lds	r18, 0x0114
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
 ba4:	2f 70       	andi	r18, 0x0F	; 15
 ba6:	09 f4       	brne	.+2      	; 0xbaa <USB_Device_ProcessControlRequest+0xf6>

				if (EndpointIndex == ENDPOINT_CONTROLEP)
 ba8:	d3 c0       	rjmp	.+422    	; 0xd50 <USB_Device_ProcessControlRequest+0x29c>
 baa:	20 93 e9 00 	sts	0x00E9, r18
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 bae:	80 91 eb 00 	lds	r24, 0x00EB
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
 bb2:	80 ff       	sbrs	r24, 0
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
 bb4:	1d c0       	rjmp	.+58     	; 0xbf0 <USB_Device_ProcessControlRequest+0x13c>
 bb6:	80 91 11 01 	lds	r24, 0x0111
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
 bba:	83 30       	cpi	r24, 0x03	; 3
 bbc:	21 f4       	brne	.+8      	; 0xbc6 <USB_Device_ProcessControlRequest+0x112>
 bbe:	80 91 eb 00 	lds	r24, 0x00EB
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
 bc2:	80 62       	ori	r24, 0x20	; 32
 bc4:	13 c0       	rjmp	.+38     	; 0xbec <USB_Device_ProcessControlRequest+0x138>
 bc6:	80 91 eb 00 	lds	r24, 0x00EB
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
 bca:	80 61       	ori	r24, 0x10	; 16
 bcc:	80 93 eb 00 	sts	0x00EB, r24
 bd0:	81 e0       	ldi	r24, 0x01	; 1
			 *  \param[in] Address  Endpoint address whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t Address)
			{
				UERST = (1 << (Address & ENDPOINT_EPNUM_MASK));
 bd2:	90 e0       	ldi	r25, 0x00	; 0
 bd4:	02 c0       	rjmp	.+4      	; 0xbda <USB_Device_ProcessControlRequest+0x126>
 bd6:	88 0f       	add	r24, r24
 bd8:	99 1f       	adc	r25, r25
 bda:	2a 95       	dec	r18
 bdc:	e2 f7       	brpl	.-8      	; 0xbd6 <USB_Device_ProcessControlRequest+0x122>
 bde:	80 93 ea 00 	sts	0x00EA, r24
 be2:	10 92 ea 00 	sts	0x00EA, r1
				UERST = 0;
 be6:	80 91 eb 00 	lds	r24, 0x00EB

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
 bea:	88 60       	ori	r24, 0x08	; 8
 bec:	80 93 eb 00 	sts	0x00EB, r24
 bf0:	10 92 e9 00 	sts	0x00E9, r1
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 bf4:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 bf8:	87 7f       	andi	r24, 0xF7	; 247
 bfa:	8a c0       	rjmp	.+276    	; 0xd10 <USB_Device_ProcessControlRequest+0x25c>
 bfc:	88 23       	and	r24, r24
					USB_Device_ClearSetFeature();
				}

				break;
			case REQ_SetAddress:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
 bfe:	09 f0       	breq	.+2      	; 0xc02 <USB_Device_ProcessControlRequest+0x14e>
 c00:	a7 c0       	rjmp	.+334    	; 0xd50 <USB_Device_ProcessControlRequest+0x29c>
 c02:	10 91 12 01 	lds	r17, 0x0112
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t DeviceAddress = (USB_ControlRequest.wValue & 0x7F);
 c06:	1f 77       	andi	r17, 0x7F	; 127
 c08:	80 91 e3 00 	lds	r24, 0x00E3
			#endif

			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				UDADDR = (UDADDR & (1 << ADDEN)) | (Address & 0x7F);
 c0c:	80 78       	andi	r24, 0x80	; 128
 c0e:	81 2b       	or	r24, r17
 c10:	80 93 e3 00 	sts	0x00E3, r24
 c14:	80 91 e8 00 	lds	r24, 0x00E8
 c18:	87 7f       	andi	r24, 0xF7	; 247
 c1a:	80 93 e8 00 	sts	0x00E8, r24
 c1e:	ce dd       	rcall	.-1124   	; 0x7bc <Endpoint_ClearStatusStage>

	USB_Device_SetDeviceAddress(DeviceAddress);

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
 c20:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 c24:	80 ff       	sbrs	r24, 0
 c26:	fc cf       	rjmp	.-8      	; 0xc20 <USB_Device_ProcessControlRequest+0x16c>

	while (!(Endpoint_IsINReady()));
 c28:	80 91 e3 00 	lds	r24, 0x00E3
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address)
			{
				(void)Address;
				
				UDADDR |= (1 << ADDEN);
 c2c:	80 68       	ori	r24, 0x80	; 128
 c2e:	80 93 e3 00 	sts	0x00E3, r24
 c32:	11 23       	and	r17, r17
 c34:	11 f0       	breq	.+4      	; 0xc3a <USB_Device_ProcessControlRequest+0x186>

	USB_Device_EnableDeviceAddress(DeviceAddress);

	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
 c36:	83 e0       	ldi	r24, 0x03	; 3
 c38:	01 c0       	rjmp	.+2      	; 0xc3c <USB_Device_ProcessControlRequest+0x188>
 c3a:	82 e0       	ldi	r24, 0x02	; 2
 c3c:	80 93 0f 01 	sts	0x010F, r24
 c40:	87 c0       	rjmp	.+270    	; 0xd50 <USB_Device_ProcessControlRequest+0x29c>
 c42:	80 58       	subi	r24, 0x80	; 128
 c44:	82 30       	cpi	r24, 0x02	; 2
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_SetAddress();

				break;
			case REQ_GetDescriptor:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
 c46:	08 f0       	brcs	.+2      	; 0xc4a <USB_Device_ProcessControlRequest+0x196>
 c48:	83 c0       	rjmp	.+262    	; 0xd50 <USB_Device_ProcessControlRequest+0x29c>
 c4a:	80 91 12 01 	lds	r24, 0x0112
	    !(defined(USE_FLASH_DESCRIPTORS) || defined(USE_EEPROM_DESCRIPTORS) || defined(USE_RAM_DESCRIPTORS))
	uint8_t DescriptorAddressSpace;
	#endif

	#if !defined(NO_INTERNAL_SERIAL) && (USE_INTERNAL_SERIAL != NO_DESCRIPTOR)
	if (USB_ControlRequest.wValue == ((DTYPE_String << 8) | USE_INTERNAL_SERIAL))
 c4e:	90 91 13 01 	lds	r25, 0x0113
 c52:	23 e0       	ldi	r18, 0x03	; 3
 c54:	8c 3d       	cpi	r24, 0xDC	; 220
 c56:	92 07       	cpc	r25, r18
 c58:	a9 f5       	brne	.+106    	; 0xcc4 <USB_Device_ProcessControlRequest+0x210>
 c5a:	83 e0       	ldi	r24, 0x03	; 3
 c5c:	8c 83       	std	Y+4, r24	; 0x04
	{
		USB_Descriptor_Header_t Header;
		uint16_t                UnicodeString[INTERNAL_SERIAL_LENGTH_BITS / 4];
	} SignatureDescriptor;

	SignatureDescriptor.Header.Type = DTYPE_String;
 c5e:	8a e2       	ldi	r24, 0x2A	; 42
 c60:	8b 83       	std	Y+3, r24	; 0x03
	SignatureDescriptor.Header.Size = USB_STRING_LEN(INTERNAL_SERIAL_LENGTH_BITS / 4);
 c62:	5f b7       	in	r21, 0x3f	; 63
 c64:	f8 94       	cli
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
 c66:	de 01       	movw	r26, r28
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
 c68:	13 96       	adiw	r26, 0x03	; 3
				__builtin_ssrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				cli();
				#endif

				GCC_MEMORY_BARRIER();
 c6a:	80 e0       	ldi	r24, 0x00	; 0
 c6c:	90 e0       	ldi	r25, 0x00	; 0
 c6e:	4e e0       	ldi	r20, 0x0E	; 14
 c70:	61 e2       	ldi	r22, 0x21	; 33
			static inline void USB_Device_GetSerialString(uint16_t* const UnicodeString)
			{
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;
 c72:	e4 2f       	mov	r30, r20

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
				{
					uint8_t SerialByte = boot_signature_byte_get(SigReadAddress);
 c74:	f0 e0       	ldi	r31, 0x00	; 0
 c76:	60 93 57 00 	sts	0x0057, r22
 c7a:	e4 91       	lpm	r30, Z
 c7c:	80 ff       	sbrs	r24, 0
 c7e:	03 c0       	rjmp	.+6      	; 0xc86 <USB_Device_ProcessControlRequest+0x1d2>

					if (SerialCharNum & 0x01)
 c80:	e2 95       	swap	r30
 c82:	ef 70       	andi	r30, 0x0F	; 15
					{
						SerialByte >>= 4;
 c84:	4f 5f       	subi	r20, 0xFF	; 255
 c86:	ef 70       	andi	r30, 0x0F	; 15
						SigReadAddress++;
 c88:	2e 2f       	mov	r18, r30
					}

					SerialByte &= 0x0F;
 c8a:	30 e0       	ldi	r19, 0x00	; 0
 c8c:	ea 30       	cpi	r30, 0x0A	; 10
 c8e:	18 f0       	brcs	.+6      	; 0xc96 <USB_Device_ProcessControlRequest+0x1e2>

					UnicodeString[SerialCharNum] = cpu_to_le16((SerialByte >= 10) ?
 c90:	29 5c       	subi	r18, 0xC9	; 201
 c92:	3f 4f       	sbci	r19, 0xFF	; 255
 c94:	02 c0       	rjmp	.+4      	; 0xc9a <USB_Device_ProcessControlRequest+0x1e6>
 c96:	20 5d       	subi	r18, 0xD0	; 208
 c98:	3f 4f       	sbci	r19, 0xFF	; 255
 c9a:	13 96       	adiw	r26, 0x03	; 3
 c9c:	3c 93       	st	X, r19
 c9e:	2e 93       	st	-X, r18
 ca0:	12 97       	sbiw	r26, 0x02	; 2
 ca2:	01 96       	adiw	r24, 0x01	; 1
 ca4:	12 96       	adiw	r26, 0x02	; 2
 ca6:	84 31       	cpi	r24, 0x14	; 20
 ca8:	91 05       	cpc	r25, r1
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
 caa:	19 f7       	brne	.-58     	; 0xc72 <USB_Device_ProcessControlRequest+0x1be>
 cac:	5f bf       	out	0x3f, r21	; 63
 cae:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 cb2:	87 7f       	andi	r24, 0xF7	; 247
 cb4:	80 93 e8 00 	sts	0x00E8, r24
 cb8:	ce 01       	movw	r24, r28
 cba:	03 96       	adiw	r24, 0x03	; 3

	USB_Device_GetSerialString(SignatureDescriptor.UnicodeString);

	Endpoint_ClearSETUP();

	Endpoint_Write_Control_Stream_LE(&SignatureDescriptor, sizeof(SignatureDescriptor));
 cbc:	6a e2       	ldi	r22, 0x2A	; 42
 cbe:	70 e0       	ldi	r23, 0x00	; 0
 cc0:	8f dc       	rcall	.-1762   	; 0x5e0 <Endpoint_Write_Control_Stream_LE>
 cc2:	12 c0       	rjmp	.+36     	; 0xce8 <USB_Device_ProcessControlRequest+0x234>
 cc4:	60 91 14 01 	lds	r22, 0x0114
 cc8:	ae 01       	movw	r20, r28
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif

	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
 cca:	4f 5f       	subi	r20, 0xFF	; 255
 ccc:	5f 4f       	sbci	r21, 0xFF	; 255
 cce:	ef db       	rcall	.-2082   	; 0x4ae <CALLBACK_USB_GetDescriptor>
 cd0:	bc 01       	movw	r22, r24
 cd2:	00 97       	sbiw	r24, 0x00	; 0
 cd4:	09 f4       	brne	.+2      	; 0xcd8 <USB_Device_ProcessControlRequest+0x224>
 cd6:	3c c0       	rjmp	.+120    	; 0xd50 <USB_Device_ProcessControlRequest+0x29c>
 cd8:	80 91 e8 00 	lds	r24, 0x00E8
 cdc:	87 7f       	andi	r24, 0xF7	; 247
 cde:	80 93 e8 00 	sts	0x00E8, r24
 ce2:	89 81       	ldd	r24, Y+1	; 0x01
 ce4:	9a 81       	ldd	r25, Y+2	; 0x02
 ce6:	d8 dc       	rcall	.-1616   	; 0x698 <Endpoint_Write_Control_PStream_LE>
 ce8:	80 91 e8 00 	lds	r24, 0x00E8
	#if defined(USE_RAM_DESCRIPTORS) || !defined(ARCH_HAS_MULTI_ADDRESS_SPACE)
	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_EEPROM_DESCRIPTORS)
	Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_FLASH_DESCRIPTORS)
	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
 cec:	8b 77       	andi	r24, 0x7B	; 123
 cee:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 cf2:	2e c0       	rjmp	.+92     	; 0xd50 <USB_Device_ProcessControlRequest+0x29c>
 cf4:	80 38       	cpi	r24, 0x80	; 128
 cf6:	61 f5       	brne	.+88     	; 0xd50 <USB_Device_ProcessControlRequest+0x29c>
 cf8:	80 91 e8 00 	lds	r24, 0x00E8
 cfc:	87 7f       	andi	r24, 0xF7	; 247
					USB_Device_GetDescriptor();
				}

				break;
			case REQ_GetConfiguration:
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
 cfe:	80 93 e8 00 	sts	0x00E8, r24
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 d02:	80 91 0b 01 	lds	r24, 0x010B
 d06:	80 93 f1 00 	sts	0x00F1, r24
 d0a:	80 91 e8 00 	lds	r24, 0x00E8

static void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();

	Endpoint_Write_8(USB_Device_ConfigurationNumber);
 d0e:	8e 77       	andi	r24, 0x7E	; 126
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
 d10:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 d14:	53 dd       	rcall	.-1370   	; 0x7bc <Endpoint_ClearStatusStage>
 d16:	1c c0       	rjmp	.+56     	; 0xd50 <USB_Device_ProcessControlRequest+0x29c>
 d18:	88 23       	and	r24, r24
 d1a:	d1 f4       	brne	.+52     	; 0xd50 <USB_Device_ProcessControlRequest+0x29c>
 d1c:	90 91 12 01 	lds	r25, 0x0112
	Endpoint_ClearIN();

	Endpoint_ClearStatusStage();
 d20:	92 30       	cpi	r25, 0x02	; 2
 d22:	b0 f4       	brcc	.+44     	; 0xd50 <USB_Device_ProcessControlRequest+0x29c>
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_GetConfiguration();

				break;
			case REQ_SetConfiguration:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
 d24:	80 91 e8 00 	lds	r24, 0x00E8
}

static void USB_Device_SetConfiguration(void)
{
	#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
 d28:	87 7f       	andi	r24, 0xF7	; 247
 d2a:	80 93 e8 00 	sts	0x00E8, r24
 d2e:	90 93 0b 01 	sts	0x010B, r25
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 d32:	44 dd       	rcall	.-1400   	; 0x7bc <Endpoint_ClearStatusStage>
 d34:	80 91 0b 01 	lds	r24, 0x010B
 d38:	88 23       	and	r24, r24
	#endif
	#endif

	Endpoint_ClearSETUP();

	USB_Device_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
 d3a:	21 f4       	brne	.+8      	; 0xd44 <USB_Device_ProcessControlRequest+0x290>
 d3c:	80 91 e3 00 	lds	r24, 0x00E3

	Endpoint_ClearStatusStage();
 d40:	87 ff       	sbrs	r24, 7

	if (USB_Device_ConfigurationNumber)
 d42:	02 c0       	rjmp	.+4      	; 0xd48 <USB_Device_ProcessControlRequest+0x294>
 d44:	84 e0       	ldi	r24, 0x04	; 4
 d46:	01 c0       	rjmp	.+2      	; 0xd4a <USB_Device_ProcessControlRequest+0x296>
 d48:	81 e0       	ldi	r24, 0x01	; 1
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
 d4a:	80 93 0f 01 	sts	0x010F, r24
	  USB_DeviceState = DEVICE_STATE_Configured;
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
 d4e:	91 da       	rcall	.-2782   	; 0x272 <EVENT_USB_Device_ConfigurationChanged>
 d50:	80 91 e8 00 	lds	r24, 0x00E8
 d54:	83 ff       	sbrs	r24, 3
 d56:	0a c0       	rjmp	.+20     	; 0xd6c <USB_Device_ProcessControlRequest+0x2b8>
 d58:	80 91 e8 00 	lds	r24, 0x00E8

	EVENT_USB_Device_ConfigurationChanged();
 d5c:	87 7f       	andi	r24, 0xF7	; 247
 d5e:	80 93 e8 00 	sts	0x00E8, r24
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 d62:	80 91 eb 00 	lds	r24, 0x00EB
			default:
				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
 d66:	80 62       	ori	r24, 0x20	; 32
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 d68:	80 93 eb 00 	sts	0x00EB, r24
 d6c:	ac 96       	adiw	r28, 0x2c	; 44
 d6e:	0f b6       	in	r0, 0x3f	; 63
 d70:	f8 94       	cli
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
 d72:	de bf       	out	0x3e, r29	; 62
 d74:	0f be       	out	0x3f, r0	; 63
 d76:	cd bf       	out	0x3d, r28	; 61
 d78:	df 91       	pop	r29
 d7a:	cf 91       	pop	r28
	{
		Endpoint_ClearSETUP();
		Endpoint_StallTransaction();
	}
}
 d7c:	1f 91       	pop	r17
 d7e:	08 95       	ret

00000d80 <USB_Event_Stub>:
#include "Events.h"

void USB_Event_Stub(void)
{

}
 d80:	08 95       	ret

00000d82 <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
 d82:	cf 93       	push	r28
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_DeviceTask(void)
{
	if (USB_DeviceState == DEVICE_STATE_Unattached)
 d84:	80 91 0f 01 	lds	r24, 0x010F
 d88:	88 23       	and	r24, r24
 d8a:	a9 f0       	breq	.+42     	; 0xdb6 <USB_USBTask+0x34>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
 d8c:	80 91 e9 00 	lds	r24, 0x00E9
 d90:	8f 70       	andi	r24, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
 d92:	90 91 ec 00 	lds	r25, 0x00EC
 d96:	90 ff       	sbrs	r25, 0
 d98:	02 c0       	rjmp	.+4      	; 0xd9e <USB_USBTask+0x1c>
 d9a:	c0 e8       	ldi	r28, 0x80	; 128
 d9c:	01 c0       	rjmp	.+2      	; 0xda0 <USB_USBTask+0x1e>
 d9e:	c0 e0       	ldi	r28, 0x00	; 0
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
 da0:	c8 2b       	or	r28, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 da2:	10 92 e9 00 	sts	0x00E9, r1
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 da6:	80 91 e8 00 	lds	r24, 0x00E8

	uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

	if (Endpoint_IsSETUPReceived())
 daa:	83 ff       	sbrs	r24, 3
 dac:	01 c0       	rjmp	.+2      	; 0xdb0 <USB_USBTask+0x2e>
	  USB_Device_ProcessControlRequest();
 dae:	82 de       	rcall	.-764    	; 0xab4 <USB_Device_ProcessControlRequest>
 db0:	cf 70       	andi	r28, 0x0F	; 15
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 db2:	c0 93 e9 00 	sts	0x00E9, r28
 db6:	cf 91       	pop	r28
	#elif defined(USB_CAN_BE_HOST)
		USB_HostTask();
	#elif defined(USB_CAN_BE_DEVICE)
		USB_DeviceTask();
	#endif
}
 db8:	08 95       	ret

00000dba <memset>:
 dba:	dc 01       	movw	r26, r24
 dbc:	01 c0       	rjmp	.+2      	; 0xdc0 <memset+0x6>
 dbe:	6d 93       	st	X+, r22
 dc0:	41 50       	subi	r20, 0x01	; 1
 dc2:	50 40       	sbci	r21, 0x00	; 0
 dc4:	e0 f7       	brcc	.-8      	; 0xdbe <memset+0x4>
 dc6:	08 95       	ret

00000dc8 <_exit>:
 dc8:	f8 94       	cli

00000dca <__stop_program>:
 dca:	ff cf       	rjmp	.-2      	; 0xdca <__stop_program>
