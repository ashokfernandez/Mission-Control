
MassStorage.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000044  00800100  000017ea  0000187e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000017ea  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000002d  00800144  00800144  000018c2  2**0
                  ALLOC
  3 .stab         00000870  00000000  00000000  000018c4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000013a  00000000  00000000  00002134  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000003c8  00000000  00000000  00002270  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000075f8  00000000  00000000  00002638  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000184e  00000000  00000000  00009c30  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00003340  00000000  00000000  0000b47e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000b1c  00000000  00000000  0000e7c0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000028cb  00000000  00000000  0000f2dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00004a95  00000000  00000000  00011ba7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000628  00000000  00000000  0001663c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	8b c0       	rjmp	.+278    	; 0x118 <__ctors_end>
       2:	00 00       	nop
       4:	a8 c0       	rjmp	.+336    	; 0x156 <__bad_interrupt>
       6:	00 00       	nop
       8:	a6 c0       	rjmp	.+332    	; 0x156 <__bad_interrupt>
       a:	00 00       	nop
       c:	a4 c0       	rjmp	.+328    	; 0x156 <__bad_interrupt>
       e:	00 00       	nop
      10:	a2 c0       	rjmp	.+324    	; 0x156 <__bad_interrupt>
      12:	00 00       	nop
      14:	a0 c0       	rjmp	.+320    	; 0x156 <__bad_interrupt>
      16:	00 00       	nop
      18:	9e c0       	rjmp	.+316    	; 0x156 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	9c c0       	rjmp	.+312    	; 0x156 <__bad_interrupt>
      1e:	00 00       	nop
      20:	9a c0       	rjmp	.+308    	; 0x156 <__bad_interrupt>
      22:	00 00       	nop
      24:	98 c0       	rjmp	.+304    	; 0x156 <__bad_interrupt>
      26:	00 00       	nop
      28:	0c 94 5f 09 	jmp	0x12be	; 0x12be <__vector_10>
      2c:	0c 94 2e 0a 	jmp	0x145c	; 0x145c <__vector_11>
      30:	92 c0       	rjmp	.+292    	; 0x156 <__bad_interrupt>
      32:	00 00       	nop
      34:	90 c0       	rjmp	.+288    	; 0x156 <__bad_interrupt>
      36:	00 00       	nop
      38:	8e c0       	rjmp	.+284    	; 0x156 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	8c c0       	rjmp	.+280    	; 0x156 <__bad_interrupt>
      3e:	00 00       	nop
      40:	8a c0       	rjmp	.+276    	; 0x156 <__bad_interrupt>
      42:	00 00       	nop
      44:	88 c0       	rjmp	.+272    	; 0x156 <__bad_interrupt>
      46:	00 00       	nop
      48:	86 c0       	rjmp	.+268    	; 0x156 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	84 c0       	rjmp	.+264    	; 0x156 <__bad_interrupt>
      4e:	00 00       	nop
      50:	82 c0       	rjmp	.+260    	; 0x156 <__bad_interrupt>
      52:	00 00       	nop
      54:	80 c0       	rjmp	.+256    	; 0x156 <__bad_interrupt>
      56:	00 00       	nop
      58:	7e c0       	rjmp	.+252    	; 0x156 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	7c c0       	rjmp	.+248    	; 0x156 <__bad_interrupt>
      5e:	00 00       	nop
      60:	7a c0       	rjmp	.+244    	; 0x156 <__bad_interrupt>
      62:	00 00       	nop
      64:	78 c0       	rjmp	.+240    	; 0x156 <__bad_interrupt>
      66:	00 00       	nop
      68:	76 c0       	rjmp	.+236    	; 0x156 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	74 c0       	rjmp	.+232    	; 0x156 <__bad_interrupt>
      6e:	00 00       	nop
      70:	72 c0       	rjmp	.+228    	; 0x156 <__bad_interrupt>
      72:	00 00       	nop
      74:	70 c0       	rjmp	.+224    	; 0x156 <__bad_interrupt>
      76:	00 00       	nop
      78:	6e c0       	rjmp	.+220    	; 0x156 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	6c c0       	rjmp	.+216    	; 0x156 <__bad_interrupt>
      7e:	00 00       	nop
      80:	6a c0       	rjmp	.+212    	; 0x156 <__bad_interrupt>
      82:	00 00       	nop
      84:	68 c0       	rjmp	.+208    	; 0x156 <__bad_interrupt>
      86:	00 00       	nop
      88:	66 c0       	rjmp	.+204    	; 0x156 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	64 c0       	rjmp	.+200    	; 0x156 <__bad_interrupt>
      8e:	00 00       	nop
      90:	62 c0       	rjmp	.+196    	; 0x156 <__bad_interrupt>
      92:	00 00       	nop
      94:	60 c0       	rjmp	.+192    	; 0x156 <__bad_interrupt>
      96:	00 00       	nop

00000098 <ProductString>:
      98:	2e 03 4c 00 55 00 46 00 41 00 20 00 4d 00 61 00     ..L.U.F.A. .M.a.
      a8:	73 00 73 00 20 00 53 00 74 00 6f 00 72 00 61 00     s.s. .S.t.o.r.a.
      b8:	67 00 65 00 20 00 44 00 65 00 6d 00 6f 00 00 00     g.e. .D.e.m.o...

000000c8 <ManufacturerString>:
      c8:	18 03 44 00 65 00 61 00 6e 00 20 00 43 00 61 00     ..D.e.a.n. .C.a.
      d8:	6d 00 65 00 72 00 61 00 00 00                       m.e.r.a...

000000e2 <LanguageString>:
      e2:	04 03 09 04                                         ....

000000e6 <ConfigurationDescriptor>:
      e6:	09 02 20 00 01 01 00 80 32 09 04 00 00 02 08 06     .. .....2.......
      f6:	50 00 07 05 83 02 40 00 05 07 05 04 02 40 00 05     P.....@......@..

00000106 <DeviceDescriptor>:
     106:	12 01 10 01 00 00 00 08 eb 03 45 20 01 00 01 02     ..........E ....
     116:	dc 01                                               ..

00000118 <__ctors_end>:
     118:	11 24       	eor	r1, r1
     11a:	1f be       	out	0x3f, r1	; 63
     11c:	cf ef       	ldi	r28, 0xFF	; 255
     11e:	d0 e2       	ldi	r29, 0x20	; 32
     120:	de bf       	out	0x3e, r29	; 62
     122:	cd bf       	out	0x3d, r28	; 61

00000124 <__do_copy_data>:
     124:	11 e0       	ldi	r17, 0x01	; 1
     126:	a0 e0       	ldi	r26, 0x00	; 0
     128:	b1 e0       	ldi	r27, 0x01	; 1
     12a:	ea ee       	ldi	r30, 0xEA	; 234
     12c:	f7 e1       	ldi	r31, 0x17	; 23
     12e:	00 e0       	ldi	r16, 0x00	; 0
     130:	0b bf       	out	0x3b, r16	; 59
     132:	02 c0       	rjmp	.+4      	; 0x138 <__do_copy_data+0x14>
     134:	07 90       	elpm	r0, Z+
     136:	0d 92       	st	X+, r0
     138:	a4 34       	cpi	r26, 0x44	; 68
     13a:	b1 07       	cpc	r27, r17
     13c:	d9 f7       	brne	.-10     	; 0x134 <__do_copy_data+0x10>
     13e:	1b be       	out	0x3b, r1	; 59

00000140 <__do_clear_bss>:
     140:	11 e0       	ldi	r17, 0x01	; 1
     142:	a4 e4       	ldi	r26, 0x44	; 68
     144:	b1 e0       	ldi	r27, 0x01	; 1
     146:	01 c0       	rjmp	.+2      	; 0x14a <.do_clear_bss_start>

00000148 <.do_clear_bss_loop>:
     148:	1d 92       	st	X+, r1

0000014a <.do_clear_bss_start>:
     14a:	a1 37       	cpi	r26, 0x71	; 113
     14c:	b1 07       	cpc	r27, r17
     14e:	e1 f7       	brne	.-8      	; 0x148 <.do_clear_bss_loop>
     150:	86 d1       	rcall	.+780    	; 0x45e <main>
     152:	0c 94 f3 0b 	jmp	0x17e6	; 0x17e6 <_exit>

00000156 <__bad_interrupt>:
     156:	54 cf       	rjmp	.-344    	; 0x0 <__vectors>

00000158 <LEDs_SetAllLEDs>:
				PORTD &= ~LEDMask;
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
			{
				PORTD = ((PORTD & ~LEDS_ALL_LEDS) | LEDMask);
     158:	9b b1       	in	r25, 0x0b	; 11
     15a:	9f 70       	andi	r25, 0x0F	; 15
     15c:	98 2b       	or	r25, r24
     15e:	9b b9       	out	0x0b, r25	; 11
			}
     160:	08 95       	ret

00000162 <SetupHardware>:

/** Configures the board hardware and chip peripherals for the demo's functionality. */
void SetupHardware(void)
{
	/* Disable watchdog if enabled by bootloader/fuses */
	MCUSR &= ~(1 << WDRF);
     162:	84 b7       	in	r24, 0x34	; 52
     164:	87 7f       	andi	r24, 0xF7	; 247
     166:	84 bf       	out	0x34, r24	; 52
	wdt_disable();
     168:	88 e1       	ldi	r24, 0x18	; 24
     16a:	0f b6       	in	r0, 0x3f	; 63
     16c:	f8 94       	cli
     16e:	80 93 60 00 	sts	0x0060, r24
     172:	10 92 60 00 	sts	0x0060, r1
     176:	0f be       	out	0x3f, r0	; 63
The type of x is clock_div_t.
*/
void clock_prescale_set(clock_div_t __x)
{
    uint8_t __tmp = _BV(CLKPCE);
    __asm__ __volatile__ (
     178:	90 e0       	ldi	r25, 0x00	; 0
     17a:	80 e8       	ldi	r24, 0x80	; 128
     17c:	0f b6       	in	r0, 0x3f	; 63
     17e:	f8 94       	cli
     180:	80 93 61 00 	sts	0x0061, r24
     184:	90 93 61 00 	sts	0x0061, r25
     188:	0f be       	out	0x3f, r0	; 63

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void LEDs_Init(void)
			{
				DDRD  |=  LEDS_ALL_LEDS;
     18a:	8a b1       	in	r24, 0x0a	; 10
     18c:	80 6f       	ori	r24, 0xF0	; 240
     18e:	8a b9       	out	0x0a, r24	; 10
				PORTD &= ~LEDS_ALL_LEDS;
     190:	8b b1       	in	r24, 0x0b	; 11
     192:	8f 70       	andi	r24, 0x0F	; 15
     194:	8b b9       	out	0x0b, r24	; 11
			 *                         \c SPI_SCK_*, \c SPI_SAMPLE_*, \c SPI_ORDER_* and \c SPI_MODE_* masks.
			 */
			static inline void SPI_Init(const uint8_t SPIOptions)
			{
				/* Prevent high rise times on PB.0 (/SS) from forcing a change to SPI slave mode */
				DDRB  |= (1 << 0);
     196:	20 9a       	sbi	0x04, 0	; 4
				PORTB |= (1 << 0);
     198:	28 9a       	sbi	0x05, 0	; 5

				DDRB  |=  ((1 << 1) | (1 << 2));
     19a:	84 b1       	in	r24, 0x04	; 4
     19c:	86 60       	ori	r24, 0x06	; 6
     19e:	84 b9       	out	0x04, r24	; 4
				DDRB  &= ~(1 << 3);
     1a0:	23 98       	cbi	0x04, 3	; 4
				PORTB |=  (1 << 3);
     1a2:	2b 9a       	sbi	0x05, 3	; 5

				if (SPIOptions & SPI_USE_DOUBLESPEED)
				  SPSR |= (1 << SPI2X);
     1a4:	8d b5       	in	r24, 0x2d	; 45
     1a6:	81 60       	ori	r24, 0x01	; 1
     1a8:	8d bd       	out	0x2d, r24	; 45
				else
				  SPSR &= ~(1 << SPI2X);

				/* Switch /SS to input mode after configuration to allow for forced mode changes */
				DDRB &= ~(1 << 0);
     1aa:	20 98       	cbi	0x04, 0	; 4

				SPCR  = ((1 << SPE) | SPIOptions);
     1ac:	8c e5       	ldi	r24, 0x5C	; 92
     1ae:	8c bd       	out	0x2c, r24	; 44
			/** Initializes the dataflash driver so that commands and data may be sent to an attached dataflash IC.
			 *  The microcontroller's SPI driver MUST be initialized before any of the dataflash commands are used.
			 */
			static inline void Dataflash_Init(void)
			{
				DATAFLASH_CHIPCS_DDR  |= DATAFLASH_CHIPCS_MASK;
     1b0:	8d b1       	in	r24, 0x0d	; 13
     1b2:	83 60       	ori	r24, 0x03	; 3
     1b4:	8d b9       	out	0x0d, r24	; 13
				DATAFLASH_CHIPCS_PORT |= DATAFLASH_CHIPCS_MASK;
     1b6:	8e b1       	in	r24, 0x0e	; 14
     1b8:	83 60       	ori	r24, 0x03	; 3
     1ba:	8e b9       	out	0x0e, r24	; 14

	/* Hardware Initialization */
	LEDs_Init();
	SPI_Init(SPI_SPEED_FCPU_DIV_2 | SPI_ORDER_MSB_FIRST | SPI_SCK_LEAD_FALLING | SPI_SAMPLE_TRAILING | SPI_MODE_MASTER);
	Dataflash_Init();
	USB_Init();
     1bc:	0e 94 44 09 	call	0x1288	; 0x1288 <USB_Init>

	/* Check if the Dataflash is working, abort if not */
	if (!(DataflashManager_CheckDataflashOperation()))
     1c0:	61 d4       	rcall	.+2242   	; 0xa84 <DataflashManager_CheckDataflashOperation>
     1c2:	88 23       	and	r24, r24
     1c4:	19 f4       	brne	.+6      	; 0x1cc <SetupHardware+0x6a>
     1c6:	80 e9       	ldi	r24, 0x90	; 144
	{
		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
     1c8:	c7 df       	rcall	.-114    	; 0x158 <LEDs_SetAllLEDs>
     1ca:	ff cf       	rjmp	.-2      	; 0x1ca <SetupHardware+0x68>
     1cc:	0d c4       	rjmp	.+2074   	; 0x9e8 <DataflashManager_ResetDataflashProtections>

000001ce <EVENT_USB_Device_Connect>:
     1ce:	80 ea       	ldi	r24, 0xA0	; 160
		for(;;);
	}

	/* Clear Dataflash sector protections, if enabled */
	DataflashManager_ResetDataflashProtections();
     1d0:	c3 df       	rcall	.-122    	; 0x158 <LEDs_SetAllLEDs>
     1d2:	10 92 44 01 	sts	0x0144, r1
{
	/* Indicate USB enumerating */
	LEDs_SetAllLEDs(LEDMASK_USB_ENUMERATING);

	/* Reset the MSReset flag upon connection */
	IsMassStoreReset = false;
     1d6:	08 95       	ret

000001d8 <EVENT_USB_Device_Disconnect>:
}
     1d8:	80 e1       	ldi	r24, 0x10	; 16
 *  the status LEDs and stops the Mass Storage management task.
 */
void EVENT_USB_Device_Disconnect(void)
{
	/* Indicate USB not ready */
	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
     1da:	be cf       	rjmp	.-132    	; 0x158 <LEDs_SetAllLEDs>

000001dc <EVENT_USB_Device_ConfigurationChanged>:
     1dc:	cf 93       	push	r28
}
     1de:	83 e0       	ldi	r24, 0x03	; 3
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
     1e0:	61 e8       	ldi	r22, 0x81	; 129
     1e2:	42 e3       	ldi	r20, 0x32	; 50
     1e4:	83 d7       	rcall	.+3846   	; 0x10ec <Endpoint_ConfigureEndpoint_Prv>
     1e6:	c8 2f       	mov	r28, r24
     1e8:	84 e0       	ldi	r24, 0x04	; 4
     1ea:	60 e8       	ldi	r22, 0x80	; 128
     1ec:	42 e3       	ldi	r20, 0x32	; 50
     1ee:	7e d7       	rcall	.+3836   	; 0x10ec <Endpoint_ConfigureEndpoint_Prv>
     1f0:	28 2f       	mov	r18, r24
     1f2:	30 e0       	ldi	r19, 0x00	; 0
{
	bool ConfigSuccess = true;

	/* Setup Mass Storage Data Endpoints */
	ConfigSuccess &= Endpoint_ConfigureEndpoint(MASS_STORAGE_IN_EPADDR,  EP_TYPE_BULK, MASS_STORAGE_IO_EPSIZE, 1);
	ConfigSuccess &= Endpoint_ConfigureEndpoint(MASS_STORAGE_OUT_EPADDR, EP_TYPE_BULK, MASS_STORAGE_IO_EPSIZE, 1);
     1f4:	8c 2f       	mov	r24, r28
     1f6:	90 e0       	ldi	r25, 0x00	; 0
void EVENT_USB_Device_ConfigurationChanged(void)
{
	bool ConfigSuccess = true;

	/* Setup Mass Storage Data Endpoints */
	ConfigSuccess &= Endpoint_ConfigureEndpoint(MASS_STORAGE_IN_EPADDR,  EP_TYPE_BULK, MASS_STORAGE_IO_EPSIZE, 1);
     1f8:	28 23       	and	r18, r24
     1fa:	39 23       	and	r19, r25
	ConfigSuccess &= Endpoint_ConfigureEndpoint(MASS_STORAGE_OUT_EPADDR, EP_TYPE_BULK, MASS_STORAGE_IO_EPSIZE, 1);
     1fc:	21 15       	cp	r18, r1
     1fe:	31 05       	cpc	r19, r1

	/* Indicate endpoint configuration success or failure */
	LEDs_SetAllLEDs(ConfigSuccess ? LEDMASK_USB_READY : LEDMASK_USB_ERROR);
     200:	11 f0       	breq	.+4      	; 0x206 <EVENT_USB_Device_ConfigurationChanged+0x2a>
     202:	80 e6       	ldi	r24, 0x60	; 96
     204:	01 c0       	rjmp	.+2      	; 0x208 <EVENT_USB_Device_ConfigurationChanged+0x2c>
     206:	80 e9       	ldi	r24, 0x90	; 144
     208:	a7 df       	rcall	.-178    	; 0x158 <LEDs_SetAllLEDs>
     20a:	cf 91       	pop	r28
     20c:	08 95       	ret

0000020e <EVENT_USB_Device_ControlRequest>:
     20e:	80 91 6a 01 	lds	r24, 0x016A
}
     212:	8e 3f       	cpi	r24, 0xFE	; 254
 *  internally.
 */
void EVENT_USB_Device_ControlRequest(void)
{
	/* Process UFI specific control requests */
	switch (USB_ControlRequest.bRequest)
     214:	81 f0       	breq	.+32     	; 0x236 <EVENT_USB_Device_ControlRequest+0x28>
     216:	8f 3f       	cpi	r24, 0xFF	; 255
     218:	f9 f4       	brne	.+62     	; 0x258 <EVENT_USB_Device_ControlRequest+0x4a>
	{
		case MS_REQ_MassStorageReset:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
     21a:	80 91 69 01 	lds	r24, 0x0169
     21e:	81 32       	cpi	r24, 0x21	; 33
     220:	d9 f4       	brne	.+54     	; 0x258 <EVENT_USB_Device_ControlRequest+0x4a>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     222:	80 91 e8 00 	lds	r24, 0x00E8
     226:	87 7f       	andi	r24, 0xF7	; 247
     228:	80 93 e8 00 	sts	0x00E8, r24
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
     22c:	94 d7       	rcall	.+3880   	; 0x1156 <Endpoint_ClearStatusStage>
     22e:	81 e0       	ldi	r24, 0x01	; 1

				/* Indicate that the current transfer should be aborted */
				IsMassStoreReset = true;
     230:	80 93 44 01 	sts	0x0144, r24
     234:	08 95       	ret
     236:	80 91 69 01 	lds	r24, 0x0169
			}

			break;
		case MS_REQ_GetMaxLUN:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
     23a:	81 3a       	cpi	r24, 0xA1	; 161
     23c:	69 f4       	brne	.+26     	; 0x258 <EVENT_USB_Device_ControlRequest+0x4a>
     23e:	80 91 e8 00 	lds	r24, 0x00E8
     242:	87 7f       	andi	r24, 0xF7	; 247
     244:	80 93 e8 00 	sts	0x00E8, r24
     248:	10 92 f1 00 	sts	0x00F1, r1
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     24c:	80 91 e8 00 	lds	r24, 0x00E8
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     250:	8e 77       	andi	r24, 0x7E	; 126
     252:	80 93 e8 00 	sts	0x00E8, r24
     256:	7f c7       	rjmp	.+3838   	; 0x1156 <Endpoint_ClearStatusStage>

				/* Indicate to the host the number of supported LUNs (virtual disks) on the device */
				Endpoint_Write_8(TOTAL_LUNS - 1);

				Endpoint_ClearIN();
				Endpoint_ClearStatusStage();
     258:	08 95       	ret

0000025a <MassStorage_Task>:
     25a:	cf 93       	push	r28
     25c:	df 93       	push	r29

/** Task to manage the Mass Storage interface, reading in Command Block Wrappers from the host, processing the SCSI commands they
 *  contain, and returning Command Status Wrappers back to the host to indicate the success or failure of the last issued command.
 */
void MassStorage_Task(void)
{
     25e:	00 d0       	rcall	.+0      	; 0x260 <MassStorage_Task+0x6>
     260:	cd b7       	in	r28, 0x3d	; 61
     262:	de b7       	in	r29, 0x3e	; 62
	/* Device must be connected and configured for the task to run */
	if (USB_DeviceState != DEVICE_STATE_Configured)
     264:	80 91 68 01 	lds	r24, 0x0168
     268:	84 30       	cpi	r24, 0x04	; 4
     26a:	09 f0       	breq	.+2      	; 0x26e <MassStorage_Task+0x14>
     26c:	f3 c0       	rjmp	.+486    	; 0x454 <MassStorage_Task+0x1fa>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     26e:	80 93 e9 00 	sts	0x00E9, r24
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     272:	80 91 e8 00 	lds	r24, 0x00E8

	/* Select the Data Out endpoint */
	Endpoint_SelectEndpoint(MASS_STORAGE_OUT_EPADDR);

	/* Abort if no command has been sent from the host */
	if (!(Endpoint_IsOUTReceived()))
     276:	82 ff       	sbrs	r24, 2
     278:	c3 c0       	rjmp	.+390    	; 0x400 <MassStorage_Task+0x1a6>
	  return false;

	/* Read in command block header */
	BytesTransferred = 0;
     27a:	1a 82       	std	Y+2, r1	; 0x02
     27c:	19 82       	std	Y+1, r1	; 0x01
     27e:	05 c0       	rjmp	.+10     	; 0x28a <MassStorage_Task+0x30>
	while (Endpoint_Read_Stream_LE(&CommandBlock, (sizeof(CommandBlock) - sizeof(CommandBlock.SCSICommandData)),
	                               &BytesTransferred) == ENDPOINT_RWSTREAM_IncompleteTransfer)
	{
		/* Check if the current command is being aborted by the host */
		if (IsMassStoreReset)
     280:	80 91 44 01 	lds	r24, 0x0144
     284:	88 23       	and	r24, r24
     286:	09 f0       	breq	.+2      	; 0x28a <MassStorage_Task+0x30>
     288:	bb c0       	rjmp	.+374    	; 0x400 <MassStorage_Task+0x1a6>
	if (!(Endpoint_IsOUTReceived()))
	  return false;

	/* Read in command block header */
	BytesTransferred = 0;
	while (Endpoint_Read_Stream_LE(&CommandBlock, (sizeof(CommandBlock) - sizeof(CommandBlock.SCSICommandData)),
     28a:	85 e4       	ldi	r24, 0x45	; 69
     28c:	91 e0       	ldi	r25, 0x01	; 1
     28e:	6f e0       	ldi	r22, 0x0F	; 15
     290:	70 e0       	ldi	r23, 0x00	; 0
     292:	ae 01       	movw	r20, r28
     294:	4f 5f       	subi	r20, 0xFF	; 255
     296:	5f 4f       	sbci	r21, 0xFF	; 255
     298:	21 d6       	rcall	.+3138   	; 0xedc <Endpoint_Read_Stream_LE>
     29a:	85 30       	cpi	r24, 0x05	; 5
     29c:	89 f3       	breq	.-30     	; 0x280 <MassStorage_Task+0x26>
     29e:	80 91 45 01 	lds	r24, 0x0145
		if (IsMassStoreReset)
		  return false;
	}

	/* Verify the command block - abort if invalid */
	if ((CommandBlock.Signature         != MS_CBW_SIGNATURE) ||
     2a2:	90 91 46 01 	lds	r25, 0x0146
     2a6:	a0 91 47 01 	lds	r26, 0x0147
     2aa:	b0 91 48 01 	lds	r27, 0x0148
     2ae:	85 35       	cpi	r24, 0x55	; 85
     2b0:	23 e5       	ldi	r18, 0x53	; 83
     2b2:	92 07       	cpc	r25, r18
     2b4:	22 e4       	ldi	r18, 0x42	; 66
     2b6:	a2 07       	cpc	r26, r18
     2b8:	23 e4       	ldi	r18, 0x43	; 67
     2ba:	b2 07       	cpc	r27, r18
     2bc:	89 f4       	brne	.+34     	; 0x2e0 <MassStorage_Task+0x86>
     2be:	80 91 52 01 	lds	r24, 0x0152
     2c2:	88 23       	and	r24, r24
     2c4:	69 f4       	brne	.+26     	; 0x2e0 <MassStorage_Task+0x86>
     2c6:	80 91 51 01 	lds	r24, 0x0151
	    (CommandBlock.LUN               >= TOTAL_LUNS)       ||
		(CommandBlock.Flags              & 0x1F)             ||
     2ca:	90 e0       	ldi	r25, 0x00	; 0
     2cc:	8f 71       	andi	r24, 0x1F	; 31
     2ce:	90 70       	andi	r25, 0x00	; 0
     2d0:	00 97       	sbiw	r24, 0x00	; 0
		  return false;
	}

	/* Verify the command block - abort if invalid */
	if ((CommandBlock.Signature         != MS_CBW_SIGNATURE) ||
	    (CommandBlock.LUN               >= TOTAL_LUNS)       ||
     2d2:	31 f4       	brne	.+12     	; 0x2e0 <MassStorage_Task+0x86>
     2d4:	80 91 53 01 	lds	r24, 0x0153
		(CommandBlock.Flags              & 0x1F)             ||
		(CommandBlock.SCSICommandLength == 0)                ||
     2d8:	88 23       	and	r24, r24
	}

	/* Verify the command block - abort if invalid */
	if ((CommandBlock.Signature         != MS_CBW_SIGNATURE) ||
	    (CommandBlock.LUN               >= TOTAL_LUNS)       ||
		(CommandBlock.Flags              & 0x1F)             ||
     2da:	11 f0       	breq	.+4      	; 0x2e0 <MassStorage_Task+0x86>
     2dc:	81 31       	cpi	r24, 0x11	; 17
		(CommandBlock.SCSICommandLength == 0)                ||
     2de:	70 f0       	brcs	.+28     	; 0x2fc <MassStorage_Task+0xa2>
     2e0:	80 91 eb 00 	lds	r24, 0x00EB
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
     2e4:	80 62       	ori	r24, 0x20	; 32
     2e6:	80 93 eb 00 	sts	0x00EB, r24
     2ea:	83 e0       	ldi	r24, 0x03	; 3
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     2ec:	80 93 e9 00 	sts	0x00E9, r24
     2f0:	80 91 eb 00 	lds	r24, 0x00EB
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
     2f4:	80 62       	ori	r24, 0x20	; 32
     2f6:	80 93 eb 00 	sts	0x00EB, r24
     2fa:	82 c0       	rjmp	.+260    	; 0x400 <MassStorage_Task+0x1a6>
     2fc:	1a 82       	std	Y+2, r1	; 0x02

		return false;
	}

	/* Read in command block command data */
	BytesTransferred = 0;
     2fe:	19 82       	std	Y+1, r1	; 0x01
     300:	05 c0       	rjmp	.+10     	; 0x30c <MassStorage_Task+0xb2>
     302:	80 91 44 01 	lds	r24, 0x0144
	while (Endpoint_Read_Stream_LE(&CommandBlock.SCSICommandData, CommandBlock.SCSICommandLength,
	                               &BytesTransferred) == ENDPOINT_RWSTREAM_IncompleteTransfer)
	{
		/* Check if the current command is being aborted by the host */
		if (IsMassStoreReset)
     306:	88 23       	and	r24, r24
     308:	09 f0       	breq	.+2      	; 0x30c <MassStorage_Task+0xb2>
     30a:	7a c0       	rjmp	.+244    	; 0x400 <MassStorage_Task+0x1a6>
     30c:	60 91 53 01 	lds	r22, 0x0153
		return false;
	}

	/* Read in command block command data */
	BytesTransferred = 0;
	while (Endpoint_Read_Stream_LE(&CommandBlock.SCSICommandData, CommandBlock.SCSICommandLength,
     310:	84 e5       	ldi	r24, 0x54	; 84
     312:	91 e0       	ldi	r25, 0x01	; 1
     314:	70 e0       	ldi	r23, 0x00	; 0
     316:	ae 01       	movw	r20, r28
     318:	4f 5f       	subi	r20, 0xFF	; 255
     31a:	5f 4f       	sbci	r21, 0xFF	; 255
     31c:	df d5       	rcall	.+3006   	; 0xedc <Endpoint_Read_Stream_LE>
     31e:	85 30       	cpi	r24, 0x05	; 5
     320:	81 f3       	breq	.-32     	; 0x302 <MassStorage_Task+0xa8>
     322:	80 91 e8 00 	lds	r24, 0x00E8
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     326:	8b 77       	andi	r24, 0x7B	; 123
     328:	80 93 e8 00 	sts	0x00E8, r24
     32c:	80 e2       	ldi	r24, 0x20	; 32
     32e:	14 df       	rcall	.-472    	; 0x158 <LEDs_SetAllLEDs>

	/* Process sent command block from the host if one has been sent */
	if (ReadInCommandBlock())
	{
		/* Indicate busy */
		LEDs_SetAllLEDs(LEDMASK_USB_BUSY);
     330:	80 91 51 01 	lds	r24, 0x0151
     334:	87 ff       	sbrs	r24, 7

		/* Check direction of command, select Data IN endpoint if data is from the device */
		if (CommandBlock.Flags & MS_COMMAND_DIR_DATA_IN)
     336:	03 c0       	rjmp	.+6      	; 0x33e <MassStorage_Task+0xe4>
     338:	83 e0       	ldi	r24, 0x03	; 3
     33a:	80 93 e9 00 	sts	0x00E9, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     33e:	1f d4       	rcall	.+2110   	; 0xb7e <SCSI_DecodeSCSICommand>
     340:	91 e0       	ldi	r25, 0x01	; 1
     342:	98 27       	eor	r25, r24
		  Endpoint_SelectEndpoint(MASS_STORAGE_IN_EPADDR);

		/* Decode the received SCSI command, set returned status code */
		CommandStatus.Status = SCSI_DecodeSCSICommand() ? MS_SCSI_COMMAND_Pass : MS_SCSI_COMMAND_Fail;
     344:	90 93 0c 01 	sts	0x010C, r25
}

/** Task to manage the Mass Storage interface, reading in Command Block Wrappers from the host, processing the SCSI commands they
 *  contain, and returning Command Status Wrappers back to the host to indicate the success or failure of the last issued command.
 */
void MassStorage_Task(void)
     348:	40 91 49 01 	lds	r20, 0x0149
		/* Check direction of command, select Data IN endpoint if data is from the device */
		if (CommandBlock.Flags & MS_COMMAND_DIR_DATA_IN)
		  Endpoint_SelectEndpoint(MASS_STORAGE_IN_EPADDR);

		/* Decode the received SCSI command, set returned status code */
		CommandStatus.Status = SCSI_DecodeSCSICommand() ? MS_SCSI_COMMAND_Pass : MS_SCSI_COMMAND_Fail;
     34c:	50 91 4a 01 	lds	r21, 0x014A

		/* Load in the CBW tag into the CSW to link them together */
		CommandStatus.Tag = CommandBlock.Tag;
     350:	60 91 4b 01 	lds	r22, 0x014B
     354:	70 91 4c 01 	lds	r23, 0x014C
     358:	40 93 04 01 	sts	0x0104, r20
     35c:	50 93 05 01 	sts	0x0105, r21
     360:	60 93 06 01 	sts	0x0106, r22
     364:	70 93 07 01 	sts	0x0107, r23
     368:	40 91 4d 01 	lds	r20, 0x014D
     36c:	50 91 4e 01 	lds	r21, 0x014E

		/* Load in the data residue counter into the CSW */
		CommandStatus.DataTransferResidue = CommandBlock.DataTransferLength;
     370:	60 91 4f 01 	lds	r22, 0x014F
     374:	70 91 50 01 	lds	r23, 0x0150
     378:	40 93 08 01 	sts	0x0108, r20
     37c:	50 93 09 01 	sts	0x0109, r21
     380:	60 93 0a 01 	sts	0x010A, r22
     384:	70 93 0b 01 	sts	0x010B, r23
     388:	91 30       	cpi	r25, 0x01	; 1
     38a:	51 f4       	brne	.+20     	; 0x3a0 <MassStorage_Task+0x146>
     38c:	41 15       	cp	r20, r1
     38e:	51 05       	cpc	r21, r1

		/* Stall the selected data pipe if command failed (if data is still to be transferred) */
		if ((CommandStatus.Status == MS_SCSI_COMMAND_Fail) && (CommandStatus.DataTransferResidue))
     390:	61 05       	cpc	r22, r1
     392:	71 05       	cpc	r23, r1
     394:	29 f0       	breq	.+10     	; 0x3a0 <MassStorage_Task+0x146>
     396:	80 91 eb 00 	lds	r24, 0x00EB
     39a:	80 62       	ori	r24, 0x20	; 32
     39c:	80 93 eb 00 	sts	0x00EB, r24
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
     3a0:	84 e0       	ldi	r24, 0x04	; 4
     3a2:	80 93 e9 00 	sts	0x00E9, r24
     3a6:	04 c0       	rjmp	.+8      	; 0x3b0 <MassStorage_Task+0x156>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     3a8:	80 91 44 01 	lds	r24, 0x0144
     3ac:	88 23       	and	r24, r24
     3ae:	31 f5       	brne	.+76     	; 0x3fc <MassStorage_Task+0x1a2>

	/* While data pipe is stalled, wait until the host issues a control request to clear the stall */
	while (Endpoint_IsStalled())
	{
		/* Check if the current command is being aborted by the host */
		if (IsMassStoreReset)
     3b0:	80 91 eb 00 	lds	r24, 0x00EB
     3b4:	85 fd       	sbrc	r24, 5
     3b6:	f8 cf       	rjmp	.-16     	; 0x3a8 <MassStorage_Task+0x14e>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
     3b8:	83 e0       	ldi	r24, 0x03	; 3
     3ba:	80 93 e9 00 	sts	0x00E9, r24

	/* Select the Data Out endpoint */
	Endpoint_SelectEndpoint(MASS_STORAGE_OUT_EPADDR);

	/* While data pipe is stalled, wait until the host issues a control request to clear the stall */
	while (Endpoint_IsStalled())
     3be:	04 c0       	rjmp	.+8      	; 0x3c8 <MassStorage_Task+0x16e>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     3c0:	80 91 44 01 	lds	r24, 0x0144
     3c4:	88 23       	and	r24, r24
     3c6:	d1 f4       	brne	.+52     	; 0x3fc <MassStorage_Task+0x1a2>

	/* While data pipe is stalled, wait until the host issues a control request to clear the stall */
	while (Endpoint_IsStalled())
	{
		/* Check if the current command is being aborted by the host */
		if (IsMassStoreReset)
     3c8:	80 91 eb 00 	lds	r24, 0x00EB
     3cc:	85 fd       	sbrc	r24, 5
     3ce:	f8 cf       	rjmp	.-16     	; 0x3c0 <MassStorage_Task+0x166>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
     3d0:	1a 82       	std	Y+2, r1	; 0x02
     3d2:	19 82       	std	Y+1, r1	; 0x01

	/* Select the Data In endpoint */
	Endpoint_SelectEndpoint(MASS_STORAGE_IN_EPADDR);

	/* While data pipe is stalled, wait until the host issues a control request to clear the stall */
	while (Endpoint_IsStalled())
     3d4:	04 c0       	rjmp	.+8      	; 0x3de <MassStorage_Task+0x184>
     3d6:	80 91 44 01 	lds	r24, 0x0144
		if (IsMassStoreReset)
		  return;
	}

	/* Write the CSW to the endpoint */
	BytesTransferred = 0;
     3da:	88 23       	and	r24, r24
     3dc:	79 f4       	brne	.+30     	; 0x3fc <MassStorage_Task+0x1a2>
	while (Endpoint_Write_Stream_LE(&CommandStatus, sizeof(CommandStatus),
	                                &BytesTransferred) == ENDPOINT_RWSTREAM_IncompleteTransfer)
	{
		/* Check if the current command is being aborted by the host */
		if (IsMassStoreReset)
     3de:	80 e0       	ldi	r24, 0x00	; 0
     3e0:	91 e0       	ldi	r25, 0x01	; 1
     3e2:	6d e0       	ldi	r22, 0x0D	; 13
     3e4:	70 e0       	ldi	r23, 0x00	; 0
		  return;
	}

	/* Write the CSW to the endpoint */
	BytesTransferred = 0;
	while (Endpoint_Write_Stream_LE(&CommandStatus, sizeof(CommandStatus),
     3e6:	ae 01       	movw	r20, r28
     3e8:	4f 5f       	subi	r20, 0xFF	; 255
     3ea:	5f 4f       	sbci	r21, 0xFF	; 255
     3ec:	28 d5       	rcall	.+2640   	; 0xe3e <Endpoint_Write_Stream_LE>
     3ee:	85 30       	cpi	r24, 0x05	; 5
     3f0:	91 f3       	breq	.-28     	; 0x3d6 <MassStorage_Task+0x17c>
     3f2:	80 91 e8 00 	lds	r24, 0x00E8
     3f6:	8e 77       	andi	r24, 0x7E	; 126
     3f8:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     3fc:	80 e6       	ldi	r24, 0x60	; 96
     3fe:	ac de       	rcall	.-680    	; 0x158 <LEDs_SetAllLEDs>
     400:	80 91 44 01 	lds	r24, 0x0144
     404:	88 23       	and	r24, r24

		/* Return command status block to the host */
		ReturnCommandStatus();

		/* Indicate ready */
		LEDs_SetAllLEDs(LEDMASK_USB_READY);
     406:	31 f1       	breq	.+76     	; 0x454 <MassStorage_Task+0x1fa>
     408:	80 e1       	ldi	r24, 0x10	; 16
     40a:	80 93 ea 00 	sts	0x00EA, r24
	}

	/* Check if a Mass Storage Reset occurred */
	if (IsMassStoreReset)
     40e:	10 92 ea 00 	sts	0x00EA, r1
     412:	88 e0       	ldi	r24, 0x08	; 8
			 *  \param[in] Address  Endpoint address whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t Address)
			{
				UERST = (1 << (Address & ENDPOINT_EPNUM_MASK));
     414:	80 93 ea 00 	sts	0x00EA, r24
     418:	10 92 ea 00 	sts	0x00EA, r1
				UERST = 0;
     41c:	84 e0       	ldi	r24, 0x04	; 4
			 *  \param[in] Address  Endpoint address whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t Address)
			{
				UERST = (1 << (Address & ENDPOINT_EPNUM_MASK));
     41e:	80 93 e9 00 	sts	0x00E9, r24
     422:	80 91 eb 00 	lds	r24, 0x00EB
				UERST = 0;
     426:	80 61       	ori	r24, 0x10	; 16
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     428:	80 93 eb 00 	sts	0x00EB, r24
     42c:	80 91 eb 00 	lds	r24, 0x00EB
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
     430:	88 60       	ori	r24, 0x08	; 8
     432:	80 93 eb 00 	sts	0x00EB, r24
     436:	83 e0       	ldi	r24, 0x03	; 3

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
     438:	80 93 e9 00 	sts	0x00E9, r24
     43c:	80 91 eb 00 	lds	r24, 0x00EB
     440:	80 61       	ori	r24, 0x10	; 16
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     442:	80 93 eb 00 	sts	0x00EB, r24
     446:	80 91 eb 00 	lds	r24, 0x00EB
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
     44a:	88 60       	ori	r24, 0x08	; 8
     44c:	80 93 eb 00 	sts	0x00EB, r24
     450:	10 92 44 01 	sts	0x0144, r1

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
     454:	0f 90       	pop	r0
     456:	0f 90       	pop	r0
     458:	df 91       	pop	r29
     45a:	cf 91       	pop	r28
		Endpoint_SelectEndpoint(MASS_STORAGE_IN_EPADDR);
		Endpoint_ClearStall();
		Endpoint_ResetDataToggle();

		/* Clear the abort transfer flag */
		IsMassStoreReset = false;
     45c:	08 95       	ret

0000045e <main>:
     45e:	81 de       	rcall	.-766    	; 0x162 <SetupHardware>
	}
}
     460:	80 e1       	ldi	r24, 0x10	; 16
     462:	7a de       	rcall	.-780    	; 0x158 <LEDs_SetAllLEDs>
     464:	78 94       	sei
     466:	f9 de       	rcall	.-526    	; 0x25a <MassStorage_Task>
     468:	0e 94 d7 0b 	call	0x17ae	; 0x17ae <USB_USBTask>
	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
	GlobalInterruptEnable();

	for (;;)
	{
		MassStorage_Task();
     46c:	fc cf       	rjmp	.-8      	; 0x466 <main+0x8>

0000046e <CALLBACK_USB_GetDescriptor>:
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
     46e:	92 30       	cpi	r25, 0x02	; 2
     470:	29 f0       	breq	.+10     	; 0x47c <CALLBACK_USB_GetDescriptor+0xe>
     472:	93 30       	cpi	r25, 0x03	; 3
     474:	41 f0       	breq	.+16     	; 0x486 <CALLBACK_USB_GetDescriptor+0x18>
     476:	91 30       	cpi	r25, 0x01	; 1
     478:	e9 f4       	brne	.+58     	; 0x4b4 <CALLBACK_USB_GetDescriptor+0x46>
     47a:	17 c0       	rjmp	.+46     	; 0x4aa <CALLBACK_USB_GetDescriptor+0x3c>
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
			Size    = sizeof(USB_Descriptor_Configuration_t);
     47c:	80 e2       	ldi	r24, 0x20	; 32
     47e:	90 e0       	ldi	r25, 0x00	; 0
		case DTYPE_Device:
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
     480:	e6 ee       	ldi	r30, 0xE6	; 230
     482:	f0 e0       	ldi	r31, 0x00	; 0
			Size    = sizeof(USB_Descriptor_Configuration_t);
			break;
     484:	1b c0       	rjmp	.+54     	; 0x4bc <CALLBACK_USB_GetDescriptor+0x4e>
		case DTYPE_String:
			switch (DescriptorNumber)
     486:	81 30       	cpi	r24, 0x01	; 1
     488:	41 f0       	breq	.+16     	; 0x49a <CALLBACK_USB_GetDescriptor+0x2c>
     48a:	81 30       	cpi	r24, 0x01	; 1
     48c:	18 f0       	brcs	.+6      	; 0x494 <CALLBACK_USB_GetDescriptor+0x26>
     48e:	82 30       	cpi	r24, 0x02	; 2
     490:	89 f4       	brne	.+34     	; 0x4b4 <CALLBACK_USB_GetDescriptor+0x46>
     492:	06 c0       	rjmp	.+12     	; 0x4a0 <CALLBACK_USB_GetDescriptor+0x32>
			{
				case 0x00:
					Address = &LanguageString;
					Size    = pgm_read_byte(&LanguageString.Header.Size);
     494:	e2 ee       	ldi	r30, 0xE2	; 226
     496:	f0 e0       	ldi	r31, 0x00	; 0
     498:	05 c0       	rjmp	.+10     	; 0x4a4 <CALLBACK_USB_GetDescriptor+0x36>
					break;
				case 0x01:
					Address = &ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
     49a:	e8 ec       	ldi	r30, 0xC8	; 200
     49c:	f0 e0       	ldi	r31, 0x00	; 0
     49e:	02 c0       	rjmp	.+4      	; 0x4a4 <CALLBACK_USB_GetDescriptor+0x36>
					break;
				case 0x02:
					Address = &ProductString;
					Size    = pgm_read_byte(&ProductString.Header.Size);
     4a0:	e8 e9       	ldi	r30, 0x98	; 152
     4a2:	f0 e0       	ldi	r31, 0x00	; 0
     4a4:	84 91       	lpm	r24, Z
     4a6:	90 e0       	ldi	r25, 0x00	; 0
					break;
     4a8:	09 c0       	rjmp	.+18     	; 0x4bc <CALLBACK_USB_GetDescriptor+0x4e>

	switch (DescriptorType)
	{
		case DTYPE_Device:
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
     4aa:	82 e1       	ldi	r24, 0x12	; 18
     4ac:	90 e0       	ldi	r25, 0x00	; 0
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
	{
		case DTYPE_Device:
			Address = &DeviceDescriptor;
     4ae:	e6 e0       	ldi	r30, 0x06	; 6
     4b0:	f1 e0       	ldi	r31, 0x01	; 1
     4b2:	04 c0       	rjmp	.+8      	; 0x4bc <CALLBACK_USB_GetDescriptor+0x4e>
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;
     4b4:	80 e0       	ldi	r24, 0x00	; 0
     4b6:	90 e0       	ldi	r25, 0x00	; 0
                                    const void** const DescriptorAddress)
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
     4b8:	e0 e0       	ldi	r30, 0x00	; 0
     4ba:	f0 e0       	ldi	r31, 0x00	; 0
			}

			break;
	}

	*DescriptorAddress = Address;
     4bc:	da 01       	movw	r26, r20
     4be:	11 96       	adiw	r26, 0x01	; 1
     4c0:	fc 93       	st	X, r31
     4c2:	ee 93       	st	-X, r30
	return Size;
}
     4c4:	08 95       	ret

000004c6 <Dataflash_ToggleSelectedChipCS>:
			 *          or a DATAFLASH_CHIPn mask (where n is the chip number).
			 */
			static inline uint8_t Dataflash_GetSelectedChip(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t Dataflash_GetSelectedChip(void)
			{
				return (~DATAFLASH_CHIPCS_PORT & DATAFLASH_CHIPCS_MASK);
     4c6:	8e b1       	in	r24, 0x0e	; 14
			 *              the chip number).
			 */
			static inline void Dataflash_SelectChip(const uint8_t ChipMask) ATTR_ALWAYS_INLINE;
			static inline void Dataflash_SelectChip(const uint8_t ChipMask)
			{
				DATAFLASH_CHIPCS_PORT = ((DATAFLASH_CHIPCS_PORT | DATAFLASH_CHIPCS_MASK) & ~ChipMask);
     4c8:	9e b1       	in	r25, 0x0e	; 14
     4ca:	93 60       	ori	r25, 0x03	; 3
     4cc:	9e b9       	out	0x0e, r25	; 14
     4ce:	9e b1       	in	r25, 0x0e	; 14
     4d0:	8c 6f       	ori	r24, 0xFC	; 252
     4d2:	93 60       	ori	r25, 0x03	; 3
     4d4:	89 23       	and	r24, r25
     4d6:	8e b9       	out	0x0e, r24	; 14
			{
				uint8_t SelectedChipMask = Dataflash_GetSelectedChip();

				Dataflash_DeselectChip();
				Dataflash_SelectChip(SelectedChipMask);
			}
     4d8:	08 95       	ret

000004da <Dataflash_WaitWhileBusy>:
			/** Spin-loops while the currently selected dataflash is busy executing a command, such as a main
			 *  memory page program or main memory to buffer transfer.
			 */
			static inline void Dataflash_WaitWhileBusy(void)
			{
				Dataflash_ToggleSelectedChipCS();
     4da:	f5 df       	rcall	.-22     	; 0x4c6 <Dataflash_ToggleSelectedChipCS>
     4dc:	87 ed       	ldi	r24, 0xD7	; 215
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     4de:	8e bd       	out	0x2e, r24	; 46
     4e0:	0d b4       	in	r0, 0x2d	; 45
				while (!(SPSR & (1 << SPIF)));
     4e2:	07 fe       	sbrs	r0, 7
     4e4:	fd cf       	rjmp	.-6      	; 0x4e0 <Dataflash_WaitWhileBusy+0x6>
     4e6:	1e bc       	out	0x2e, r1	; 46
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     4e8:	0d b4       	in	r0, 0x2d	; 45
				while (!(SPSR & (1 << SPIF)));
     4ea:	07 fe       	sbrs	r0, 7
     4ec:	fd cf       	rjmp	.-6      	; 0x4e8 <Dataflash_WaitWhileBusy+0xe>
     4ee:	0e b4       	in	r0, 0x2e	; 46
				Dataflash_SendByte(DF_CMD_GETSTATUS);
				while (!(Dataflash_ReceiveByte() & DF_STATUS_READY));
     4f0:	07 fe       	sbrs	r0, 7
     4f2:	f9 cf       	rjmp	.-14     	; 0x4e6 <Dataflash_WaitWhileBusy+0xc>
     4f4:	e8 cf       	rjmp	.-48     	; 0x4c6 <Dataflash_ToggleSelectedChipCS>

000004f6 <Dataflash_SendAddressBytes>:
				Dataflash_ToggleSelectedChipCS();
     4f6:	9c 01       	movw	r18, r24
     4f8:	36 95       	lsr	r19
			}
     4fa:	27 95       	ror	r18
			{
				#if (DATAFLASH_TOTALCHIPS == 2)
					PageAddress >>= 1;
				#endif
				
				Dataflash_SendByte(PageAddress >> 5);
     4fc:	56 e0       	ldi	r21, 0x06	; 6
     4fe:	96 95       	lsr	r25
     500:	87 95       	ror	r24
     502:	5a 95       	dec	r21
     504:	e1 f7       	brne	.-8      	; 0x4fe <Dataflash_SendAddressBytes+0x8>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     506:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     508:	0d b4       	in	r0, 0x2d	; 45
     50a:	07 fe       	sbrs	r0, 7
     50c:	fd cf       	rjmp	.-6      	; 0x508 <Dataflash_SendAddressBytes+0x12>
				Dataflash_SendByte((PageAddress << 3) | (BufferByte >> 8));
     50e:	22 0f       	add	r18, r18
     510:	22 0f       	add	r18, r18
     512:	22 0f       	add	r18, r18
     514:	27 2b       	or	r18, r23
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     516:	2e bd       	out	0x2e, r18	; 46
				while (!(SPSR & (1 << SPIF)));
     518:	0d b4       	in	r0, 0x2d	; 45
     51a:	07 fe       	sbrs	r0, 7
     51c:	fd cf       	rjmp	.-6      	; 0x518 <Dataflash_SendAddressBytes+0x22>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     51e:	6e bd       	out	0x2e, r22	; 46
				while (!(SPSR & (1 << SPIF)));
     520:	0d b4       	in	r0, 0x2d	; 45
     522:	07 fe       	sbrs	r0, 7
     524:	fd cf       	rjmp	.-6      	; 0x520 <Dataflash_SendAddressBytes+0x2a>
				Dataflash_SendByte(BufferByte);
			}
     526:	08 95       	ret

00000528 <Dataflash_SelectChipFromPage>:
			 *              the chip number).
			 */
			static inline void Dataflash_SelectChip(const uint8_t ChipMask) ATTR_ALWAYS_INLINE;
			static inline void Dataflash_SelectChip(const uint8_t ChipMask)
			{
				DATAFLASH_CHIPCS_PORT = ((DATAFLASH_CHIPCS_PORT | DATAFLASH_CHIPCS_MASK) & ~ChipMask);
     528:	2e b1       	in	r18, 0x0e	; 14
     52a:	23 60       	ori	r18, 0x03	; 3
     52c:	2e b9       	out	0x0e, r18	; 14
			 */
			static inline void Dataflash_SelectChipFromPage(const uint16_t PageAddress)
			{
				Dataflash_DeselectChip();

				if (PageAddress >= (DATAFLASH_PAGES * DATAFLASH_TOTALCHIPS))
     52e:	20 e4       	ldi	r18, 0x40	; 64
     530:	80 30       	cpi	r24, 0x00	; 0
     532:	92 07       	cpc	r25, r18
     534:	58 f4       	brcc	.+22     	; 0x54c <Dataflash_SelectChipFromPage+0x24>
				  return;

				#if (DATAFLASH_TOTALCHIPS == 2)
					if (PageAddress & 0x01)
     536:	80 ff       	sbrs	r24, 0
     538:	05 c0       	rjmp	.+10     	; 0x544 <Dataflash_SelectChipFromPage+0x1c>
			 *              the chip number).
			 */
			static inline void Dataflash_SelectChip(const uint8_t ChipMask) ATTR_ALWAYS_INLINE;
			static inline void Dataflash_SelectChip(const uint8_t ChipMask)
			{
				DATAFLASH_CHIPCS_PORT = ((DATAFLASH_CHIPCS_PORT | DATAFLASH_CHIPCS_MASK) & ~ChipMask);
     53a:	8e b1       	in	r24, 0x0e	; 14
     53c:	83 60       	ori	r24, 0x03	; 3
     53e:	8d 7f       	andi	r24, 0xFD	; 253
     540:	8e b9       	out	0x0e, r24	; 14
     542:	08 95       	ret
     544:	8e b1       	in	r24, 0x0e	; 14
     546:	83 60       	ori	r24, 0x03	; 3
     548:	8e 7f       	andi	r24, 0xFE	; 254
     54a:	8e b9       	out	0x0e, r24	; 14
     54c:	08 95       	ret

0000054e <DataflashManager_WriteBlocks>:
 *  \param[in] BlockAddress  Data block starting address for the write sequence
 *  \param[in] TotalBlocks   Number of blocks of data to write
 */
void DataflashManager_WriteBlocks(const uint32_t BlockAddress,
                                  uint16_t TotalBlocks)
{
     54e:	4f 92       	push	r4
     550:	5f 92       	push	r5
     552:	6f 92       	push	r6
     554:	7f 92       	push	r7
     556:	8f 92       	push	r8
     558:	9f 92       	push	r9
     55a:	bf 92       	push	r11
     55c:	cf 92       	push	r12
     55e:	df 92       	push	r13
     560:	ef 92       	push	r14
     562:	ff 92       	push	r15
     564:	0f 93       	push	r16
     566:	1f 93       	push	r17
     568:	cf 93       	push	r28
     56a:	df 93       	push	r29
     56c:	0f 92       	push	r0
     56e:	cd b7       	in	r28, 0x3d	; 61
     570:	de b7       	in	r29, 0x3e	; 62
     572:	8b 01       	movw	r16, r22
     574:	9c 01       	movw	r18, r24
     576:	b4 2e       	mov	r11, r20
     578:	c5 2e       	mov	r12, r21
	uint16_t CurrDFPage          = ((BlockAddress * VIRTUAL_MEMORY_BLOCK_SIZE) / DATAFLASH_PAGE_SIZE);
     57a:	dc 01       	movw	r26, r24
     57c:	cb 01       	movw	r24, r22
     57e:	e9 e0       	ldi	r30, 0x09	; 9
     580:	88 0f       	add	r24, r24
     582:	99 1f       	adc	r25, r25
     584:	aa 1f       	adc	r26, r26
     586:	bb 1f       	adc	r27, r27
     588:	ea 95       	dec	r30
     58a:	d1 f7       	brne	.-12     	; 0x580 <DataflashManager_WriteBlocks+0x32>
     58c:	fa e0       	ldi	r31, 0x0A	; 10
     58e:	b6 95       	lsr	r27
     590:	a7 95       	ror	r26
     592:	97 95       	ror	r25
     594:	87 95       	ror	r24
     596:	fa 95       	dec	r31
     598:	d1 f7       	brne	.-12     	; 0x58e <DataflashManager_WriteBlocks+0x40>
     59a:	7c 01       	movw	r14, r24
	uint16_t CurrDFPageByte      = ((BlockAddress * VIRTUAL_MEMORY_BLOCK_SIZE) % DATAFLASH_PAGE_SIZE);
     59c:	10 2f       	mov	r17, r16
     59e:	00 27       	eor	r16, r16
     5a0:	11 0f       	add	r17, r17
     5a2:	13 70       	andi	r17, 0x03	; 3
	uint8_t  CurrDFPageByteDiv16 = (CurrDFPageByte >> 4);
	bool     UsingSecondBuffer   = false;

	/* Select the correct starting Dataflash IC for the block requested */
	Dataflash_SelectChipFromPage(CurrDFPage);
     5a4:	c1 df       	rcall	.-126    	; 0x528 <Dataflash_SelectChipFromPage>
     5a6:	83 e5       	ldi	r24, 0x53	; 83
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     5a8:	8e bd       	out	0x2e, r24	; 46
     5aa:	0d b4       	in	r0, 0x2d	; 45
				while (!(SPSR & (1 << SPIF)));
     5ac:	07 fe       	sbrs	r0, 7
     5ae:	fd cf       	rjmp	.-6      	; 0x5aa <DataflashManager_WriteBlocks+0x5c>
     5b0:	c7 01       	movw	r24, r14

#if (DATAFLASH_PAGE_SIZE > VIRTUAL_MEMORY_BLOCK_SIZE)
	/* Copy selected dataflash's current page contents to the Dataflash buffer */
	Dataflash_SendByte(DF_CMD_MAINMEMTOBUFF1);
	Dataflash_SendAddressBytes(CurrDFPage, 0);
     5b2:	60 e0       	ldi	r22, 0x00	; 0
     5b4:	70 e0       	ldi	r23, 0x00	; 0
     5b6:	9f df       	rcall	.-194    	; 0x4f6 <Dataflash_SendAddressBytes>
     5b8:	90 df       	rcall	.-224    	; 0x4da <Dataflash_WaitWhileBusy>
     5ba:	84 e8       	ldi	r24, 0x84	; 132
	Dataflash_WaitWhileBusy();
     5bc:	8e bd       	out	0x2e, r24	; 46
     5be:	0d b4       	in	r0, 0x2d	; 45
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     5c0:	07 fe       	sbrs	r0, 7
     5c2:	fd cf       	rjmp	.-6      	; 0x5be <DataflashManager_WriteBlocks+0x70>
				while (!(SPSR & (1 << SPIF)));
     5c4:	80 e0       	ldi	r24, 0x00	; 0
     5c6:	90 e0       	ldi	r25, 0x00	; 0
     5c8:	b8 01       	movw	r22, r16
#endif

	/* Send the Dataflash buffer write command */
	Dataflash_SendByte(DF_CMD_BUFF1WRITE);
	Dataflash_SendAddressBytes(0, CurrDFPageByte);
     5ca:	95 df       	rcall	.-214    	; 0x4f6 <Dataflash_SendAddressBytes>
     5cc:	e5 d5       	rcall	.+3018   	; 0x1198 <Endpoint_WaitUntilReady>
     5ce:	88 23       	and	r24, r24
     5d0:	09 f0       	breq	.+2      	; 0x5d4 <DataflashManager_WriteBlocks+0x86>
     5d2:	f3 c0       	rjmp	.+486    	; 0x7ba <DataflashManager_WriteBlocks+0x26c>

	/* Wait until endpoint is ready before continuing */
	if (Endpoint_WaitUntilReady())
     5d4:	64 e0       	ldi	r22, 0x04	; 4
     5d6:	16 95       	lsr	r17
     5d8:	07 95       	ror	r16
     5da:	6a 95       	dec	r22
     5dc:	e1 f7       	brne	.-8      	; 0x5d6 <DataflashManager_WriteBlocks+0x88>
void DataflashManager_WriteBlocks(const uint32_t BlockAddress,
                                  uint16_t TotalBlocks)
{
	uint16_t CurrDFPage          = ((BlockAddress * VIRTUAL_MEMORY_BLOCK_SIZE) / DATAFLASH_PAGE_SIZE);
	uint16_t CurrDFPageByte      = ((BlockAddress * VIRTUAL_MEMORY_BLOCK_SIZE) % DATAFLASH_PAGE_SIZE);
	uint8_t  CurrDFPageByteDiv16 = (CurrDFPageByte >> 4);
     5de:	90 2f       	mov	r25, r16
     5e0:	4b 2c       	mov	r4, r11
     5e2:	5c 2c       	mov	r5, r12
     5e4:	cc 24       	eor	r12, r12
     5e6:	dd 24       	eor	r13, r13
     5e8:	10 e0       	ldi	r17, 0x00	; 0
     5ea:	32 01       	movw	r6, r4
     5ec:	75 e0       	ldi	r23, 0x05	; 5
     5ee:	66 0c       	add	r6, r6
     5f0:	77 1c       	adc	r7, r7
     5f2:	7a 95       	dec	r23
 *  them to the Dataflash in Dataflash page sized blocks.
 *
 *  \param[in] BlockAddress  Data block starting address for the write sequence
 *  \param[in] TotalBlocks   Number of blocks of data to write
 */
void DataflashManager_WriteBlocks(const uint32_t BlockAddress,
     5f4:	e1 f7       	brne	.-8      	; 0x5ee <DataflashManager_WriteBlocks+0xa0>
     5f6:	bb 24       	eor	r11, r11
     5f8:	b3 94       	inc	r11
     5fa:	c0 c0       	rjmp	.+384    	; 0x77c <DataflashManager_WriteBlocks+0x22e>
     5fc:	00 e2       	ldi	r16, 0x20	; 32
     5fe:	46 01       	movw	r8, r12
				CurrDFPageByteDiv16 = 0;
				CurrDFPage++;

				/* Once all the Dataflash ICs have had their first buffers filled, switch buffers to maintain throughput */
				if (Dataflash_GetSelectedChip() == DATAFLASH_CHIP_MASK(DATAFLASH_TOTALCHIPS))
				  UsingSecondBuffer = !(UsingSecondBuffer);
     600:	86 0c       	add	r8, r6
     602:	97 1c       	adc	r9, r7
     604:	80 91 e8 00 	lds	r24, 0x00E8
				/* Select the next Dataflash chip based on the new Dataflash page index */
				Dataflash_SelectChipFromPage(CurrDFPage);

#if (DATAFLASH_PAGE_SIZE > VIRTUAL_MEMORY_BLOCK_SIZE)
				/* If less than one Dataflash page remaining, copy over the existing page to preserve trailing data */
				if ((TotalBlocks * (VIRTUAL_MEMORY_BLOCK_SIZE >> 4)) < (DATAFLASH_PAGE_SIZE >> 4))
     608:	85 fd       	sbrc	r24, 5
     60a:	0b c0       	rjmp	.+22     	; 0x622 <DataflashManager_WriteBlocks+0xd4>
     60c:	80 91 e8 00 	lds	r24, 0x00E8
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
     610:	8b 77       	andi	r24, 0x7B	; 123

		/* Write an endpoint packet sized data block to the Dataflash */
		while (BytesInBlockDiv16 < (VIRTUAL_MEMORY_BLOCK_SIZE >> 4))
		{
			/* Check if the endpoint is currently empty */
			if (!(Endpoint_IsReadWriteAllowed()))
     612:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     616:	99 83       	std	Y+1, r25	; 0x01
     618:	bf d5       	rcall	.+2942   	; 0x1198 <Endpoint_WaitUntilReady>
     61a:	99 81       	ldd	r25, Y+1	; 0x01
     61c:	88 23       	and	r24, r24
     61e:	09 f0       	breq	.+2      	; 0x622 <DataflashManager_WriteBlocks+0xd4>
			{
				/* Clear the current endpoint bank */
				Endpoint_ClearOUT();

				/* Wait until the host has sent another packet */
				if (Endpoint_WaitUntilReady())
     620:	cc c0       	rjmp	.+408    	; 0x7ba <DataflashManager_WriteBlocks+0x26c>
     622:	90 34       	cpi	r25, 0x40	; 64
     624:	09 f0       	breq	.+2      	; 0x628 <DataflashManager_WriteBlocks+0xda>
     626:	3b c0       	rjmp	.+118    	; 0x69e <DataflashManager_WriteBlocks+0x150>
     628:	58 df       	rcall	.-336    	; 0x4da <Dataflash_WaitWhileBusy>
     62a:	11 23       	and	r17, r17
     62c:	11 f0       	breq	.+4      	; 0x632 <DataflashManager_WriteBlocks+0xe4>
				  return;
			}

			/* Check if end of Dataflash page reached */
			if (CurrDFPageByteDiv16 == (DATAFLASH_PAGE_SIZE >> 4))
     62e:	86 e8       	ldi	r24, 0x86	; 134
     630:	01 c0       	rjmp	.+2      	; 0x634 <DataflashManager_WriteBlocks+0xe6>
     632:	83 e8       	ldi	r24, 0x83	; 131
			{
				/* Write the Dataflash buffer contents back to the Dataflash page */
				Dataflash_WaitWhileBusy();
     634:	8e bd       	out	0x2e, r24	; 46
     636:	0d b4       	in	r0, 0x2d	; 45
				Dataflash_SendByte(UsingSecondBuffer ? DF_CMD_BUFF2TOMAINMEMWITHERASE : DF_CMD_BUFF1TOMAINMEMWITHERASE);
     638:	07 fe       	sbrs	r0, 7
     63a:	fd cf       	rjmp	.-6      	; 0x636 <DataflashManager_WriteBlocks+0xe8>
     63c:	c7 01       	movw	r24, r14
     63e:	60 e0       	ldi	r22, 0x00	; 0
     640:	70 e0       	ldi	r23, 0x00	; 0
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     642:	59 df       	rcall	.-334    	; 0x4f6 <Dataflash_SendAddressBytes>
				while (!(SPSR & (1 << SPIF)));
     644:	08 94       	sec
     646:	e1 1c       	adc	r14, r1
     648:	f1 1c       	adc	r15, r1
				Dataflash_SendAddressBytes(CurrDFPage, 0);
     64a:	8e b1       	in	r24, 0x0e	; 14
     64c:	80 95       	com	r24
     64e:	83 70       	andi	r24, 0x03	; 3
     650:	82 30       	cpi	r24, 0x02	; 2
     652:	09 f4       	brne	.+2      	; 0x656 <DataflashManager_WriteBlocks+0x108>

				/* Reset the Dataflash buffer counter, increment the page counter */
				CurrDFPageByteDiv16 = 0;
				CurrDFPage++;
     654:	1b 25       	eor	r17, r11
     656:	c7 01       	movw	r24, r14
     658:	67 df       	rcall	.-306    	; 0x528 <Dataflash_SelectChipFromPage>
			 *          or a DATAFLASH_CHIPn mask (where n is the chip number).
			 */
			static inline uint8_t Dataflash_GetSelectedChip(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t Dataflash_GetSelectedChip(void)
			{
				return (~DATAFLASH_CHIPCS_PORT & DATAFLASH_CHIPCS_MASK);
     65a:	20 e4       	ldi	r18, 0x40	; 64
     65c:	82 16       	cp	r8, r18
     65e:	91 04       	cpc	r9, r1

				/* Once all the Dataflash ICs have had their first buffers filled, switch buffers to maintain throughput */
				if (Dataflash_GetSelectedChip() == DATAFLASH_CHIP_MASK(DATAFLASH_TOTALCHIPS))
     660:	78 f4       	brcc	.+30     	; 0x680 <DataflashManager_WriteBlocks+0x132>
     662:	3b df       	rcall	.-394    	; 0x4da <Dataflash_WaitWhileBusy>
				  UsingSecondBuffer = !(UsingSecondBuffer);
     664:	11 23       	and	r17, r17

				/* Select the next Dataflash chip based on the new Dataflash page index */
				Dataflash_SelectChipFromPage(CurrDFPage);
     666:	11 f0       	breq	.+4      	; 0x66c <DataflashManager_WriteBlocks+0x11e>
     668:	85 e5       	ldi	r24, 0x55	; 85
     66a:	01 c0       	rjmp	.+2      	; 0x66e <DataflashManager_WriteBlocks+0x120>

#if (DATAFLASH_PAGE_SIZE > VIRTUAL_MEMORY_BLOCK_SIZE)
				/* If less than one Dataflash page remaining, copy over the existing page to preserve trailing data */
				if ((TotalBlocks * (VIRTUAL_MEMORY_BLOCK_SIZE >> 4)) < (DATAFLASH_PAGE_SIZE >> 4))
     66c:	83 e5       	ldi	r24, 0x53	; 83
     66e:	8e bd       	out	0x2e, r24	; 46
     670:	0d b4       	in	r0, 0x2d	; 45
     672:	07 fe       	sbrs	r0, 7
				{
					/* Copy selected dataflash's current page contents to the Dataflash buffer */
					Dataflash_WaitWhileBusy();
     674:	fd cf       	rjmp	.-6      	; 0x670 <DataflashManager_WriteBlocks+0x122>
     676:	c7 01       	movw	r24, r14
					Dataflash_SendByte(UsingSecondBuffer ? DF_CMD_MAINMEMTOBUFF2 : DF_CMD_MAINMEMTOBUFF1);
     678:	60 e0       	ldi	r22, 0x00	; 0
     67a:	70 e0       	ldi	r23, 0x00	; 0
     67c:	3c df       	rcall	.-392    	; 0x4f6 <Dataflash_SendAddressBytes>
     67e:	2d df       	rcall	.-422    	; 0x4da <Dataflash_WaitWhileBusy>
     680:	11 23       	and	r17, r17
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     682:	11 f0       	breq	.+4      	; 0x688 <DataflashManager_WriteBlocks+0x13a>
				while (!(SPSR & (1 << SPIF)));
     684:	87 e8       	ldi	r24, 0x87	; 135
     686:	01 c0       	rjmp	.+2      	; 0x68a <DataflashManager_WriteBlocks+0x13c>
     688:	84 e8       	ldi	r24, 0x84	; 132
					Dataflash_SendAddressBytes(CurrDFPage, 0);
     68a:	8e bd       	out	0x2e, r24	; 46
     68c:	0d b4       	in	r0, 0x2d	; 45
     68e:	07 fe       	sbrs	r0, 7
     690:	fd cf       	rjmp	.-6      	; 0x68c <DataflashManager_WriteBlocks+0x13e>
     692:	80 e0       	ldi	r24, 0x00	; 0
					Dataflash_WaitWhileBusy();
     694:	90 e0       	ldi	r25, 0x00	; 0
     696:	60 e0       	ldi	r22, 0x00	; 0
				}
#endif

				/* Send the Dataflash buffer write command */
				Dataflash_SendByte(UsingSecondBuffer ? DF_CMD_BUFF2WRITE : DF_CMD_BUFF1WRITE);
     698:	70 e0       	ldi	r23, 0x00	; 0
     69a:	2d df       	rcall	.-422    	; 0x4f6 <Dataflash_SendAddressBytes>
     69c:	90 e0       	ldi	r25, 0x00	; 0
     69e:	80 91 f1 00 	lds	r24, 0x00F1
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     6a2:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     6a4:	0d b4       	in	r0, 0x2d	; 45
     6a6:	07 fe       	sbrs	r0, 7
     6a8:	fd cf       	rjmp	.-6      	; 0x6a4 <DataflashManager_WriteBlocks+0x156>
				Dataflash_SendAddressBytes(0, 0);
     6aa:	80 91 f1 00 	lds	r24, 0x00F1
     6ae:	8e bd       	out	0x2e, r24	; 46
     6b0:	0d b4       	in	r0, 0x2d	; 45
     6b2:	07 fe       	sbrs	r0, 7
     6b4:	fd cf       	rjmp	.-6      	; 0x6b0 <DataflashManager_WriteBlocks+0x162>
				Dataflash_WaitWhileBusy();
				Dataflash_SendByte(UsingSecondBuffer ? DF_CMD_BUFF2TOMAINMEMWITHERASE : DF_CMD_BUFF1TOMAINMEMWITHERASE);
				Dataflash_SendAddressBytes(CurrDFPage, 0);

				/* Reset the Dataflash buffer counter, increment the page counter */
				CurrDFPageByteDiv16 = 0;
     6b6:	80 91 f1 00 	lds	r24, 0x00F1
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
     6ba:	8e bd       	out	0x2e, r24	; 46
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     6bc:	0d b4       	in	r0, 0x2d	; 45
				while (!(SPSR & (1 << SPIF)));
     6be:	07 fe       	sbrs	r0, 7
     6c0:	fd cf       	rjmp	.-6      	; 0x6bc <DataflashManager_WriteBlocks+0x16e>
     6c2:	80 91 f1 00 	lds	r24, 0x00F1
     6c6:	8e bd       	out	0x2e, r24	; 46
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     6c8:	0d b4       	in	r0, 0x2d	; 45
				while (!(SPSR & (1 << SPIF)));
     6ca:	07 fe       	sbrs	r0, 7
     6cc:	fd cf       	rjmp	.-6      	; 0x6c8 <DataflashManager_WriteBlocks+0x17a>
     6ce:	80 91 f1 00 	lds	r24, 0x00F1
     6d2:	8e bd       	out	0x2e, r24	; 46
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     6d4:	0d b4       	in	r0, 0x2d	; 45
				while (!(SPSR & (1 << SPIF)));
     6d6:	07 fe       	sbrs	r0, 7
     6d8:	fd cf       	rjmp	.-6      	; 0x6d4 <DataflashManager_WriteBlocks+0x186>
     6da:	80 91 f1 00 	lds	r24, 0x00F1
     6de:	8e bd       	out	0x2e, r24	; 46
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     6e0:	0d b4       	in	r0, 0x2d	; 45
				while (!(SPSR & (1 << SPIF)));
     6e2:	07 fe       	sbrs	r0, 7
     6e4:	fd cf       	rjmp	.-6      	; 0x6e0 <DataflashManager_WriteBlocks+0x192>
     6e6:	80 91 f1 00 	lds	r24, 0x00F1
     6ea:	8e bd       	out	0x2e, r24	; 46
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     6ec:	0d b4       	in	r0, 0x2d	; 45
				while (!(SPSR & (1 << SPIF)));
     6ee:	07 fe       	sbrs	r0, 7
     6f0:	fd cf       	rjmp	.-6      	; 0x6ec <DataflashManager_WriteBlocks+0x19e>
     6f2:	80 91 f1 00 	lds	r24, 0x00F1
     6f6:	8e bd       	out	0x2e, r24	; 46
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     6f8:	0d b4       	in	r0, 0x2d	; 45
				while (!(SPSR & (1 << SPIF)));
     6fa:	07 fe       	sbrs	r0, 7
     6fc:	fd cf       	rjmp	.-6      	; 0x6f8 <DataflashManager_WriteBlocks+0x1aa>
     6fe:	80 91 f1 00 	lds	r24, 0x00F1
     702:	8e bd       	out	0x2e, r24	; 46
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     704:	0d b4       	in	r0, 0x2d	; 45
				while (!(SPSR & (1 << SPIF)));
     706:	07 fe       	sbrs	r0, 7
     708:	fd cf       	rjmp	.-6      	; 0x704 <DataflashManager_WriteBlocks+0x1b6>
     70a:	80 91 f1 00 	lds	r24, 0x00F1
     70e:	8e bd       	out	0x2e, r24	; 46
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     710:	0d b4       	in	r0, 0x2d	; 45
				while (!(SPSR & (1 << SPIF)));
     712:	07 fe       	sbrs	r0, 7
     714:	fd cf       	rjmp	.-6      	; 0x710 <DataflashManager_WriteBlocks+0x1c2>
     716:	80 91 f1 00 	lds	r24, 0x00F1
     71a:	8e bd       	out	0x2e, r24	; 46
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     71c:	0d b4       	in	r0, 0x2d	; 45
				while (!(SPSR & (1 << SPIF)));
     71e:	07 fe       	sbrs	r0, 7
     720:	fd cf       	rjmp	.-6      	; 0x71c <DataflashManager_WriteBlocks+0x1ce>
     722:	80 91 f1 00 	lds	r24, 0x00F1
     726:	8e bd       	out	0x2e, r24	; 46
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     728:	0d b4       	in	r0, 0x2d	; 45
				while (!(SPSR & (1 << SPIF)));
     72a:	07 fe       	sbrs	r0, 7
     72c:	fd cf       	rjmp	.-6      	; 0x728 <DataflashManager_WriteBlocks+0x1da>
     72e:	80 91 f1 00 	lds	r24, 0x00F1
     732:	8e bd       	out	0x2e, r24	; 46
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     734:	0d b4       	in	r0, 0x2d	; 45
				while (!(SPSR & (1 << SPIF)));
     736:	07 fe       	sbrs	r0, 7
     738:	fd cf       	rjmp	.-6      	; 0x734 <DataflashManager_WriteBlocks+0x1e6>
     73a:	80 91 f1 00 	lds	r24, 0x00F1
     73e:	8e bd       	out	0x2e, r24	; 46
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     740:	0d b4       	in	r0, 0x2d	; 45
				while (!(SPSR & (1 << SPIF)));
     742:	07 fe       	sbrs	r0, 7
     744:	fd cf       	rjmp	.-6      	; 0x740 <DataflashManager_WriteBlocks+0x1f2>
     746:	80 91 f1 00 	lds	r24, 0x00F1
     74a:	8e bd       	out	0x2e, r24	; 46
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     74c:	0d b4       	in	r0, 0x2d	; 45
				while (!(SPSR & (1 << SPIF)));
     74e:	07 fe       	sbrs	r0, 7
     750:	fd cf       	rjmp	.-6      	; 0x74c <DataflashManager_WriteBlocks+0x1fe>
     752:	80 91 f1 00 	lds	r24, 0x00F1
     756:	8e bd       	out	0x2e, r24	; 46
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     758:	0d b4       	in	r0, 0x2d	; 45
				while (!(SPSR & (1 << SPIF)));
     75a:	07 fe       	sbrs	r0, 7
     75c:	fd cf       	rjmp	.-6      	; 0x758 <DataflashManager_WriteBlocks+0x20a>
     75e:	80 91 44 01 	lds	r24, 0x0144
     762:	88 23       	and	r24, r24
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     764:	51 f5       	brne	.+84     	; 0x7ba <DataflashManager_WriteBlocks+0x26c>
				while (!(SPSR & (1 << SPIF)));
     766:	9f 5f       	subi	r25, 0xFF	; 255
     768:	01 50       	subi	r16, 0x01	; 1
     76a:	09 f0       	breq	.+2      	; 0x76e <DataflashManager_WriteBlocks+0x220>
     76c:	4b cf       	rjmp	.-362    	; 0x604 <DataflashManager_WriteBlocks+0xb6>
     76e:	08 94       	sec
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     770:	41 08       	sbc	r4, r1
				while (!(SPSR & (1 << SPIF)));
     772:	51 08       	sbc	r5, r1
     774:	e0 ee       	ldi	r30, 0xE0	; 224
     776:	ff ef       	ldi	r31, 0xFF	; 255

			/* Increment the block 16 byte block counter */
			BytesInBlockDiv16++;

			/* Check if the current command is being aborted by the host */
			if (IsMassStoreReset)
     778:	ce 0e       	add	r12, r30
     77a:	df 1e       	adc	r13, r31
     77c:	41 14       	cp	r4, r1
     77e:	51 04       	cpc	r5, r1
			Dataflash_SendByte(Endpoint_Read_8());
			Dataflash_SendByte(Endpoint_Read_8());
			Dataflash_SendByte(Endpoint_Read_8());

			/* Increment the Dataflash page 16 byte block counter */
			CurrDFPageByteDiv16++;
     780:	09 f0       	breq	.+2      	; 0x784 <DataflashManager_WriteBlocks+0x236>
     782:	3c cf       	rjmp	.-392    	; 0x5fc <DataflashManager_WriteBlocks+0xae>
	while (TotalBlocks)
	{
		uint8_t BytesInBlockDiv16 = 0;

		/* Write an endpoint packet sized data block to the Dataflash */
		while (BytesInBlockDiv16 < (VIRTUAL_MEMORY_BLOCK_SIZE >> 4))
     784:	aa de       	rcall	.-684    	; 0x4da <Dataflash_WaitWhileBusy>
     786:	11 23       	and	r17, r17
			if (IsMassStoreReset)
			  return;
		}

		/* Decrement the blocks remaining counter */
		TotalBlocks--;
     788:	11 f0       	breq	.+4      	; 0x78e <DataflashManager_WriteBlocks+0x240>
     78a:	86 e8       	ldi	r24, 0x86	; 134
     78c:	01 c0       	rjmp	.+2      	; 0x790 <DataflashManager_WriteBlocks+0x242>
     78e:	83 e8       	ldi	r24, 0x83	; 131
     790:	8e bd       	out	0x2e, r24	; 46
     792:	0d b4       	in	r0, 0x2d	; 45
     794:	07 fe       	sbrs	r0, 7

	/* Wait until endpoint is ready before continuing */
	if (Endpoint_WaitUntilReady())
	  return;

	while (TotalBlocks)
     796:	fd cf       	rjmp	.-6      	; 0x792 <DataflashManager_WriteBlocks+0x244>
     798:	c7 01       	movw	r24, r14
     79a:	60 e0       	ldi	r22, 0x00	; 0
     79c:	70 e0       	ldi	r23, 0x00	; 0
		/* Decrement the blocks remaining counter */
		TotalBlocks--;
	}

	/* Write the Dataflash buffer contents back to the Dataflash page */
	Dataflash_WaitWhileBusy();
     79e:	ab de       	rcall	.-682    	; 0x4f6 <Dataflash_SendAddressBytes>
     7a0:	9c de       	rcall	.-712    	; 0x4da <Dataflash_WaitWhileBusy>
	Dataflash_SendByte(UsingSecondBuffer ? DF_CMD_BUFF2TOMAINMEMWITHERASE : DF_CMD_BUFF1TOMAINMEMWITHERASE);
     7a2:	80 91 e8 00 	lds	r24, 0x00E8
     7a6:	85 fd       	sbrc	r24, 5
     7a8:	05 c0       	rjmp	.+10     	; 0x7b4 <DataflashManager_WriteBlocks+0x266>
     7aa:	80 91 e8 00 	lds	r24, 0x00E8
     7ae:	8b 77       	andi	r24, 0x7B	; 123
     7b0:	80 93 e8 00 	sts	0x00E8, r24
	Dataflash_SendAddressBytes(CurrDFPage, 0x00);
     7b4:	8e b1       	in	r24, 0x0e	; 14
     7b6:	83 60       	ori	r24, 0x03	; 3
     7b8:	8e b9       	out	0x0e, r24	; 14
     7ba:	0f 90       	pop	r0
     7bc:	df 91       	pop	r29
	Dataflash_WaitWhileBusy();
     7be:	cf 91       	pop	r28
     7c0:	1f 91       	pop	r17
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
     7c2:	0f 91       	pop	r16
     7c4:	ff 90       	pop	r15

	/* If the endpoint is empty, clear it ready for the next packet from the host */
	if (!(Endpoint_IsReadWriteAllowed()))
     7c6:	ef 90       	pop	r14
     7c8:	df 90       	pop	r13
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     7ca:	cf 90       	pop	r12
     7cc:	bf 90       	pop	r11
     7ce:	9f 90       	pop	r9
     7d0:	8f 90       	pop	r8
     7d2:	7f 90       	pop	r7
			 *              the chip number).
			 */
			static inline void Dataflash_SelectChip(const uint8_t ChipMask) ATTR_ALWAYS_INLINE;
			static inline void Dataflash_SelectChip(const uint8_t ChipMask)
			{
				DATAFLASH_CHIPCS_PORT = ((DATAFLASH_CHIPCS_PORT | DATAFLASH_CHIPCS_MASK) & ~ChipMask);
     7d4:	6f 90       	pop	r6
     7d6:	5f 90       	pop	r5
     7d8:	4f 90       	pop	r4
	  Endpoint_ClearOUT();

	/* Deselect all Dataflash chips */
	Dataflash_DeselectChip();
}
     7da:	08 95       	ret

000007dc <DataflashManager_ReadBlocks>:
     7dc:	df 92       	push	r13
     7de:	ef 92       	push	r14
     7e0:	ff 92       	push	r15
     7e2:	0f 93       	push	r16
     7e4:	1f 93       	push	r17
     7e6:	cf 93       	push	r28
     7e8:	df 93       	push	r29
     7ea:	dc 01       	movw	r26, r24
     7ec:	cb 01       	movw	r24, r22
     7ee:	7a 01       	movw	r14, r20
     7f0:	ac 01       	movw	r20, r24
     7f2:	bd 01       	movw	r22, r26
     7f4:	19 e0       	ldi	r17, 0x09	; 9
     7f6:	44 0f       	add	r20, r20
     7f8:	55 1f       	adc	r21, r21
     7fa:	66 1f       	adc	r22, r22
 *  \param[in] TotalBlocks   Number of blocks of data to read
 */
void DataflashManager_ReadBlocks(const uint32_t BlockAddress,
                                 uint16_t TotalBlocks)
{
	uint16_t CurrDFPage          = ((BlockAddress * VIRTUAL_MEMORY_BLOCK_SIZE) / DATAFLASH_PAGE_SIZE);
     7fc:	77 1f       	adc	r23, r23
     7fe:	1a 95       	dec	r17
     800:	d1 f7       	brne	.-12     	; 0x7f6 <DataflashManager_ReadBlocks+0x1a>
     802:	0a e0       	ldi	r16, 0x0A	; 10
     804:	76 95       	lsr	r23
     806:	67 95       	ror	r22
     808:	57 95       	ror	r21
     80a:	47 95       	ror	r20
     80c:	0a 95       	dec	r16
     80e:	d1 f7       	brne	.-12     	; 0x804 <DataflashManager_ReadBlocks+0x28>
     810:	8a 01       	movw	r16, r20
	uint16_t CurrDFPageByte      = ((BlockAddress * VIRTUAL_MEMORY_BLOCK_SIZE) % DATAFLASH_PAGE_SIZE);
     812:	ec 01       	movw	r28, r24
     814:	dc 2f       	mov	r29, r28
     816:	cc 27       	eor	r28, r28
     818:	dd 0f       	add	r29, r29
     81a:	d3 70       	andi	r29, 0x03	; 3
	uint8_t  CurrDFPageByteDiv16 = (CurrDFPageByte >> 4);

	/* Select the correct starting Dataflash IC for the block requested */
	Dataflash_SelectChipFromPage(CurrDFPage);
     81c:	ca 01       	movw	r24, r20
     81e:	84 de       	rcall	.-760    	; 0x528 <Dataflash_SelectChipFromPage>
     820:	82 ed       	ldi	r24, 0xD2	; 210
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     822:	8e bd       	out	0x2e, r24	; 46
     824:	0d b4       	in	r0, 0x2d	; 45
				while (!(SPSR & (1 << SPIF)));
     826:	07 fe       	sbrs	r0, 7
     828:	fd cf       	rjmp	.-6      	; 0x824 <DataflashManager_ReadBlocks+0x48>
     82a:	c8 01       	movw	r24, r16

	/* Send the Dataflash main memory page read command */
	Dataflash_SendByte(DF_CMD_MAINMEMPAGEREAD);
	Dataflash_SendAddressBytes(CurrDFPage, CurrDFPageByte);
     82c:	be 01       	movw	r22, r28
     82e:	63 de       	rcall	.-826    	; 0x4f6 <Dataflash_SendAddressBytes>
     830:	1e bc       	out	0x2e, r1	; 46
     832:	0d b4       	in	r0, 0x2d	; 45
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     834:	07 fe       	sbrs	r0, 7
				while (!(SPSR & (1 << SPIF)));
     836:	fd cf       	rjmp	.-6      	; 0x832 <DataflashManager_ReadBlocks+0x56>
     838:	1e bc       	out	0x2e, r1	; 46
     83a:	0d b4       	in	r0, 0x2d	; 45
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     83c:	07 fe       	sbrs	r0, 7
				while (!(SPSR & (1 << SPIF)));
     83e:	fd cf       	rjmp	.-6      	; 0x83a <DataflashManager_ReadBlocks+0x5e>
     840:	1e bc       	out	0x2e, r1	; 46
     842:	0d b4       	in	r0, 0x2d	; 45
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     844:	07 fe       	sbrs	r0, 7
				while (!(SPSR & (1 << SPIF)));
     846:	fd cf       	rjmp	.-6      	; 0x842 <DataflashManager_ReadBlocks+0x66>
     848:	1e bc       	out	0x2e, r1	; 46
     84a:	0d b4       	in	r0, 0x2d	; 45
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     84c:	07 fe       	sbrs	r0, 7
				while (!(SPSR & (1 << SPIF)));
     84e:	fd cf       	rjmp	.-6      	; 0x84a <DataflashManager_ReadBlocks+0x6e>
     850:	a3 d4       	rcall	.+2374   	; 0x1198 <Endpoint_WaitUntilReady>
     852:	88 23       	and	r24, r24
	Dataflash_SendByte(0x00);
	Dataflash_SendByte(0x00);
	Dataflash_SendByte(0x00);

	/* Wait until endpoint is ready before continuing */
	if (Endpoint_WaitUntilReady())
     854:	09 f0       	breq	.+2      	; 0x858 <DataflashManager_ReadBlocks+0x7c>
     856:	c0 c0       	rjmp	.+384    	; 0x9d8 <DataflashManager_ReadBlocks+0x1fc>
     858:	b4 e0       	ldi	r27, 0x04	; 4
     85a:	d6 95       	lsr	r29
     85c:	c7 95       	ror	r28
void DataflashManager_ReadBlocks(const uint32_t BlockAddress,
                                 uint16_t TotalBlocks)
{
	uint16_t CurrDFPage          = ((BlockAddress * VIRTUAL_MEMORY_BLOCK_SIZE) / DATAFLASH_PAGE_SIZE);
	uint16_t CurrDFPageByte      = ((BlockAddress * VIRTUAL_MEMORY_BLOCK_SIZE) % DATAFLASH_PAGE_SIZE);
	uint8_t  CurrDFPageByteDiv16 = (CurrDFPageByte >> 4);
     85e:	ba 95       	dec	r27
     860:	e1 f7       	brne	.-8      	; 0x85a <DataflashManager_ReadBlocks+0x7e>
     862:	d2 ed       	ldi	r29, 0xD2	; 210
     864:	dd 2e       	mov	r13, r29
     866:	a8 c0       	rjmp	.+336    	; 0x9b8 <DataflashManager_ReadBlocks+0x1dc>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     868:	d0 e2       	ldi	r29, 0x20	; 32
     86a:	80 91 e8 00 	lds	r24, 0x00E8

	/* Wait until endpoint is ready before continuing */
	if (Endpoint_WaitUntilReady())
	  return;

	while (TotalBlocks)
     86e:	85 fd       	sbrc	r24, 5
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
     870:	09 c0       	rjmp	.+18     	; 0x884 <DataflashManager_ReadBlocks+0xa8>
     872:	80 91 e8 00 	lds	r24, 0x00E8

		/* Write an endpoint packet sized data block to the Dataflash */
		while (BytesInBlockDiv16 < (VIRTUAL_MEMORY_BLOCK_SIZE >> 4))
		{
			/* Check if the endpoint is currently full */
			if (!(Endpoint_IsReadWriteAllowed()))
     876:	8e 77       	andi	r24, 0x7E	; 126
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     878:	80 93 e8 00 	sts	0x00E8, r24
     87c:	8d d4       	rcall	.+2330   	; 0x1198 <Endpoint_WaitUntilReady>
     87e:	88 23       	and	r24, r24
     880:	09 f0       	breq	.+2      	; 0x884 <DataflashManager_ReadBlocks+0xa8>
			{
				/* Clear the endpoint bank to send its contents to the host */
				Endpoint_ClearIN();

				/* Wait until the endpoint is ready for more data */
				if (Endpoint_WaitUntilReady())
     882:	aa c0       	rjmp	.+340    	; 0x9d8 <DataflashManager_ReadBlocks+0x1fc>
     884:	c0 34       	cpi	r28, 0x40	; 64
     886:	e9 f4       	brne	.+58     	; 0x8c2 <DataflashManager_ReadBlocks+0xe6>
     888:	0f 5f       	subi	r16, 0xFF	; 255
     88a:	1f 4f       	sbci	r17, 0xFF	; 255
				  return;
			}

			/* Check if end of Dataflash page reached */
			if (CurrDFPageByteDiv16 == (DATAFLASH_PAGE_SIZE >> 4))
     88c:	c8 01       	movw	r24, r16
     88e:	4c de       	rcall	.-872    	; 0x528 <Dataflash_SelectChipFromPage>
			{
				/* Reset the Dataflash buffer counter, increment the page counter */
				CurrDFPageByteDiv16 = 0;
				CurrDFPage++;
     890:	de bc       	out	0x2e, r13	; 46
     892:	0d b4       	in	r0, 0x2d	; 45

				/* Select the next Dataflash chip based on the new Dataflash page index */
				Dataflash_SelectChipFromPage(CurrDFPage);
     894:	07 fe       	sbrs	r0, 7
     896:	fd cf       	rjmp	.-6      	; 0x892 <DataflashManager_ReadBlocks+0xb6>
     898:	c8 01       	movw	r24, r16
     89a:	60 e0       	ldi	r22, 0x00	; 0
				while (!(SPSR & (1 << SPIF)));
     89c:	70 e0       	ldi	r23, 0x00	; 0
     89e:	2b de       	rcall	.-938    	; 0x4f6 <Dataflash_SendAddressBytes>
     8a0:	1e bc       	out	0x2e, r1	; 46

				/* Send the Dataflash main memory page read command */
				Dataflash_SendByte(DF_CMD_MAINMEMPAGEREAD);
				Dataflash_SendAddressBytes(CurrDFPage, 0);
     8a2:	0d b4       	in	r0, 0x2d	; 45
     8a4:	07 fe       	sbrs	r0, 7
     8a6:	fd cf       	rjmp	.-6      	; 0x8a2 <DataflashManager_ReadBlocks+0xc6>
     8a8:	1e bc       	out	0x2e, r1	; 46
     8aa:	0d b4       	in	r0, 0x2d	; 45
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     8ac:	07 fe       	sbrs	r0, 7
				while (!(SPSR & (1 << SPIF)));
     8ae:	fd cf       	rjmp	.-6      	; 0x8aa <DataflashManager_ReadBlocks+0xce>
     8b0:	1e bc       	out	0x2e, r1	; 46
     8b2:	0d b4       	in	r0, 0x2d	; 45
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     8b4:	07 fe       	sbrs	r0, 7
				while (!(SPSR & (1 << SPIF)));
     8b6:	fd cf       	rjmp	.-6      	; 0x8b2 <DataflashManager_ReadBlocks+0xd6>
     8b8:	1e bc       	out	0x2e, r1	; 46
     8ba:	0d b4       	in	r0, 0x2d	; 45
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     8bc:	07 fe       	sbrs	r0, 7
				while (!(SPSR & (1 << SPIF)));
     8be:	fd cf       	rjmp	.-6      	; 0x8ba <DataflashManager_ReadBlocks+0xde>
     8c0:	c0 e0       	ldi	r28, 0x00	; 0
     8c2:	1e bc       	out	0x2e, r1	; 46
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     8c4:	0d b4       	in	r0, 0x2d	; 45
				while (!(SPSR & (1 << SPIF)));
     8c6:	07 fe       	sbrs	r0, 7
     8c8:	fd cf       	rjmp	.-6      	; 0x8c4 <DataflashManager_ReadBlocks+0xe8>
     8ca:	8e b5       	in	r24, 0x2e	; 46

			/* Check if end of Dataflash page reached */
			if (CurrDFPageByteDiv16 == (DATAFLASH_PAGE_SIZE >> 4))
			{
				/* Reset the Dataflash buffer counter, increment the page counter */
				CurrDFPageByteDiv16 = 0;
     8cc:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
				while (!(SPSR & (1 << SPIF)));
     8d0:	1e bc       	out	0x2e, r1	; 46
     8d2:	0d b4       	in	r0, 0x2d	; 45
     8d4:	07 fe       	sbrs	r0, 7
				return SPDR;
     8d6:	fd cf       	rjmp	.-6      	; 0x8d2 <DataflashManager_ReadBlocks+0xf6>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     8d8:	8e b5       	in	r24, 0x2e	; 46
     8da:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
				while (!(SPSR & (1 << SPIF)));
     8de:	1e bc       	out	0x2e, r1	; 46
     8e0:	0d b4       	in	r0, 0x2d	; 45
     8e2:	07 fe       	sbrs	r0, 7
				return SPDR;
     8e4:	fd cf       	rjmp	.-6      	; 0x8e0 <DataflashManager_ReadBlocks+0x104>
     8e6:	8e b5       	in	r24, 0x2e	; 46
     8e8:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
				while (!(SPSR & (1 << SPIF)));
     8ec:	1e bc       	out	0x2e, r1	; 46
     8ee:	0d b4       	in	r0, 0x2d	; 45
     8f0:	07 fe       	sbrs	r0, 7
				return SPDR;
     8f2:	fd cf       	rjmp	.-6      	; 0x8ee <DataflashManager_ReadBlocks+0x112>
     8f4:	8e b5       	in	r24, 0x2e	; 46
     8f6:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
				while (!(SPSR & (1 << SPIF)));
     8fa:	1e bc       	out	0x2e, r1	; 46
     8fc:	0d b4       	in	r0, 0x2d	; 45
     8fe:	07 fe       	sbrs	r0, 7
				return SPDR;
     900:	fd cf       	rjmp	.-6      	; 0x8fc <DataflashManager_ReadBlocks+0x120>
     902:	8e b5       	in	r24, 0x2e	; 46
     904:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
				while (!(SPSR & (1 << SPIF)));
     908:	1e bc       	out	0x2e, r1	; 46
     90a:	0d b4       	in	r0, 0x2d	; 45
     90c:	07 fe       	sbrs	r0, 7
				return SPDR;
     90e:	fd cf       	rjmp	.-6      	; 0x90a <DataflashManager_ReadBlocks+0x12e>
     910:	8e b5       	in	r24, 0x2e	; 46
     912:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
				while (!(SPSR & (1 << SPIF)));
     916:	1e bc       	out	0x2e, r1	; 46
     918:	0d b4       	in	r0, 0x2d	; 45
     91a:	07 fe       	sbrs	r0, 7
				return SPDR;
     91c:	fd cf       	rjmp	.-6      	; 0x918 <DataflashManager_ReadBlocks+0x13c>
     91e:	8e b5       	in	r24, 0x2e	; 46
     920:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
				while (!(SPSR & (1 << SPIF)));
     924:	1e bc       	out	0x2e, r1	; 46
     926:	0d b4       	in	r0, 0x2d	; 45
     928:	07 fe       	sbrs	r0, 7
				return SPDR;
     92a:	fd cf       	rjmp	.-6      	; 0x926 <DataflashManager_ReadBlocks+0x14a>
     92c:	8e b5       	in	r24, 0x2e	; 46
     92e:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
				while (!(SPSR & (1 << SPIF)));
     932:	1e bc       	out	0x2e, r1	; 46
     934:	0d b4       	in	r0, 0x2d	; 45
     936:	07 fe       	sbrs	r0, 7
				return SPDR;
     938:	fd cf       	rjmp	.-6      	; 0x934 <DataflashManager_ReadBlocks+0x158>
     93a:	8e b5       	in	r24, 0x2e	; 46
     93c:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
				while (!(SPSR & (1 << SPIF)));
     940:	1e bc       	out	0x2e, r1	; 46
     942:	0d b4       	in	r0, 0x2d	; 45
     944:	07 fe       	sbrs	r0, 7
				return SPDR;
     946:	fd cf       	rjmp	.-6      	; 0x942 <DataflashManager_ReadBlocks+0x166>
     948:	8e b5       	in	r24, 0x2e	; 46
     94a:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
				while (!(SPSR & (1 << SPIF)));
     94e:	1e bc       	out	0x2e, r1	; 46
     950:	0d b4       	in	r0, 0x2d	; 45
     952:	07 fe       	sbrs	r0, 7
				return SPDR;
     954:	fd cf       	rjmp	.-6      	; 0x950 <DataflashManager_ReadBlocks+0x174>
     956:	8e b5       	in	r24, 0x2e	; 46
     958:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
				while (!(SPSR & (1 << SPIF)));
     95c:	1e bc       	out	0x2e, r1	; 46
     95e:	0d b4       	in	r0, 0x2d	; 45
     960:	07 fe       	sbrs	r0, 7
				return SPDR;
     962:	fd cf       	rjmp	.-6      	; 0x95e <DataflashManager_ReadBlocks+0x182>
     964:	8e b5       	in	r24, 0x2e	; 46
     966:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
				while (!(SPSR & (1 << SPIF)));
     96a:	1e bc       	out	0x2e, r1	; 46
     96c:	0d b4       	in	r0, 0x2d	; 45
     96e:	07 fe       	sbrs	r0, 7
				return SPDR;
     970:	fd cf       	rjmp	.-6      	; 0x96c <DataflashManager_ReadBlocks+0x190>
     972:	8e b5       	in	r24, 0x2e	; 46
     974:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
				while (!(SPSR & (1 << SPIF)));
     978:	1e bc       	out	0x2e, r1	; 46
     97a:	0d b4       	in	r0, 0x2d	; 45
     97c:	07 fe       	sbrs	r0, 7
				return SPDR;
     97e:	fd cf       	rjmp	.-6      	; 0x97a <DataflashManager_ReadBlocks+0x19e>
     980:	8e b5       	in	r24, 0x2e	; 46
     982:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
				while (!(SPSR & (1 << SPIF)));
     986:	1e bc       	out	0x2e, r1	; 46
     988:	0d b4       	in	r0, 0x2d	; 45
     98a:	07 fe       	sbrs	r0, 7
				return SPDR;
     98c:	fd cf       	rjmp	.-6      	; 0x988 <DataflashManager_ReadBlocks+0x1ac>
     98e:	8e b5       	in	r24, 0x2e	; 46
     990:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
				while (!(SPSR & (1 << SPIF)));
     994:	1e bc       	out	0x2e, r1	; 46
     996:	0d b4       	in	r0, 0x2d	; 45
     998:	07 fe       	sbrs	r0, 7
				return SPDR;
     99a:	fd cf       	rjmp	.-6      	; 0x996 <DataflashManager_ReadBlocks+0x1ba>
     99c:	8e b5       	in	r24, 0x2e	; 46
     99e:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
				while (!(SPSR & (1 << SPIF)));
     9a2:	80 91 44 01 	lds	r24, 0x0144
     9a6:	88 23       	and	r24, r24
				return SPDR;
     9a8:	b9 f4       	brne	.+46     	; 0x9d8 <DataflashManager_ReadBlocks+0x1fc>
     9aa:	cf 5f       	subi	r28, 0xFF	; 255
     9ac:	d1 50       	subi	r29, 0x01	; 1

			/* Increment the block 16 byte block counter */
			BytesInBlockDiv16++;

			/* Check if the current command is being aborted by the host */
			if (IsMassStoreReset)
     9ae:	09 f0       	breq	.+2      	; 0x9b2 <DataflashManager_ReadBlocks+0x1d6>
     9b0:	5c cf       	rjmp	.-328    	; 0x86a <DataflashManager_ReadBlocks+0x8e>
     9b2:	08 94       	sec
     9b4:	e1 08       	sbc	r14, r1
			Endpoint_Write_8(Dataflash_ReceiveByte());
			Endpoint_Write_8(Dataflash_ReceiveByte());
			Endpoint_Write_8(Dataflash_ReceiveByte());

			/* Increment the Dataflash page 16 byte block counter */
			CurrDFPageByteDiv16++;
     9b6:	f1 08       	sbc	r15, r1
     9b8:	e1 14       	cp	r14, r1
	while (TotalBlocks)
	{
		uint8_t BytesInBlockDiv16 = 0;

		/* Write an endpoint packet sized data block to the Dataflash */
		while (BytesInBlockDiv16 < (VIRTUAL_MEMORY_BLOCK_SIZE >> 4))
     9ba:	f1 04       	cpc	r15, r1
     9bc:	09 f0       	breq	.+2      	; 0x9c0 <DataflashManager_ReadBlocks+0x1e4>
			if (IsMassStoreReset)
			  return;
		}

		/* Decrement the blocks remaining counter */
		TotalBlocks--;
     9be:	54 cf       	rjmp	.-344    	; 0x868 <DataflashManager_ReadBlocks+0x8c>
     9c0:	80 91 e8 00 	lds	r24, 0x00E8

	/* Wait until endpoint is ready before continuing */
	if (Endpoint_WaitUntilReady())
	  return;

	while (TotalBlocks)
     9c4:	85 fd       	sbrc	r24, 5
     9c6:	05 c0       	rjmp	.+10     	; 0x9d2 <DataflashManager_ReadBlocks+0x1f6>
     9c8:	80 91 e8 00 	lds	r24, 0x00E8
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
     9cc:	8e 77       	andi	r24, 0x7E	; 126
     9ce:	80 93 e8 00 	sts	0x00E8, r24
		/* Decrement the blocks remaining counter */
		TotalBlocks--;
	}

	/* If the endpoint is full, send its contents to the host */
	if (!(Endpoint_IsReadWriteAllowed()))
     9d2:	8e b1       	in	r24, 0x0e	; 14
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     9d4:	83 60       	ori	r24, 0x03	; 3
     9d6:	8e b9       	out	0x0e, r24	; 14
     9d8:	df 91       	pop	r29
     9da:	cf 91       	pop	r28
     9dc:	1f 91       	pop	r17
     9de:	0f 91       	pop	r16
     9e0:	ff 90       	pop	r15
     9e2:	ef 90       	pop	r14
	  Endpoint_ClearIN();

	/* Deselect all Dataflash chips */
	Dataflash_DeselectChip();
}
     9e4:	df 90       	pop	r13
     9e6:	08 95       	ret

000009e8 <DataflashManager_ResetDataflashProtections>:
     9e8:	8e b1       	in	r24, 0x0e	; 14
     9ea:	83 60       	ori	r24, 0x03	; 3
     9ec:	8e 7f       	andi	r24, 0xFE	; 254
     9ee:	8e b9       	out	0x0e, r24	; 14
     9f0:	87 ed       	ldi	r24, 0xD7	; 215
     9f2:	8e bd       	out	0x2e, r24	; 46
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
				while (!(SPSR & (1 << SPIF)));
     9f4:	0d b4       	in	r0, 0x2d	; 45
     9f6:	07 fe       	sbrs	r0, 7
     9f8:	fd cf       	rjmp	.-6      	; 0x9f4 <DataflashManager_ResetDataflashProtections+0xc>
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     9fa:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     9fc:	0d b4       	in	r0, 0x2d	; 45
     9fe:	07 fe       	sbrs	r0, 7
     a00:	fd cf       	rjmp	.-6      	; 0x9fc <DataflashManager_ResetDataflashProtections+0x14>
	/* Select first Dataflash chip, send the read status register command */
	Dataflash_SelectChip(DATAFLASH_CHIP1);
	Dataflash_SendByte(DF_CMD_GETSTATUS);

	/* Check if sector protection is enabled */
	if (Dataflash_ReceiveByte() & DF_STATUS_SECTORPROTECTION_ON)
     a02:	0e b4       	in	r0, 0x2e	; 46
     a04:	01 fe       	sbrs	r0, 1
     a06:	15 c0       	rjmp	.+42     	; 0xa32 <DataflashManager_ResetDataflashProtections+0x4a>
	{
		Dataflash_ToggleSelectedChipCS();
     a08:	5e dd       	rcall	.-1348   	; 0x4c6 <Dataflash_ToggleSelectedChipCS>
     a0a:	8d e3       	ldi	r24, 0x3D	; 61
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     a0c:	8e bd       	out	0x2e, r24	; 46
     a0e:	0d b4       	in	r0, 0x2d	; 45
				while (!(SPSR & (1 << SPIF)));
     a10:	07 fe       	sbrs	r0, 7
     a12:	fd cf       	rjmp	.-6      	; 0xa0e <DataflashManager_ResetDataflashProtections+0x26>
     a14:	8a e2       	ldi	r24, 0x2A	; 42
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     a16:	8e bd       	out	0x2e, r24	; 46
     a18:	0d b4       	in	r0, 0x2d	; 45
				while (!(SPSR & (1 << SPIF)));
     a1a:	07 fe       	sbrs	r0, 7
     a1c:	fd cf       	rjmp	.-6      	; 0xa18 <DataflashManager_ResetDataflashProtections+0x30>
     a1e:	8f e7       	ldi	r24, 0x7F	; 127
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     a20:	8e bd       	out	0x2e, r24	; 46
     a22:	0d b4       	in	r0, 0x2d	; 45
				while (!(SPSR & (1 << SPIF)));
     a24:	07 fe       	sbrs	r0, 7
     a26:	fd cf       	rjmp	.-6      	; 0xa22 <DataflashManager_ResetDataflashProtections+0x3a>
     a28:	8a e9       	ldi	r24, 0x9A	; 154
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     a2a:	8e bd       	out	0x2e, r24	; 46
     a2c:	0d b4       	in	r0, 0x2d	; 45
				while (!(SPSR & (1 << SPIF)));
     a2e:	07 fe       	sbrs	r0, 7
     a30:	fd cf       	rjmp	.-6      	; 0xa2c <DataflashManager_ResetDataflashProtections+0x44>
     a32:	8e b1       	in	r24, 0x0e	; 14
     a34:	83 60       	ori	r24, 0x03	; 3
     a36:	8d 7f       	andi	r24, 0xFD	; 253
     a38:	8e b9       	out	0x0e, r24	; 14
     a3a:	87 ed       	ldi	r24, 0xD7	; 215
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     a3c:	8e bd       	out	0x2e, r24	; 46
     a3e:	0d b4       	in	r0, 0x2d	; 45
				while (!(SPSR & (1 << SPIF)));
     a40:	07 fe       	sbrs	r0, 7
     a42:	fd cf       	rjmp	.-6      	; 0xa3e <DataflashManager_ResetDataflashProtections+0x56>
     a44:	1e bc       	out	0x2e, r1	; 46
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     a46:	0d b4       	in	r0, 0x2d	; 45
				while (!(SPSR & (1 << SPIF)));
     a48:	07 fe       	sbrs	r0, 7
     a4a:	fd cf       	rjmp	.-6      	; 0xa46 <DataflashManager_ResetDataflashProtections+0x5e>
     a4c:	0e b4       	in	r0, 0x2e	; 46
	#if (DATAFLASH_TOTALCHIPS == 2)
	Dataflash_SelectChip(DATAFLASH_CHIP2);
	Dataflash_SendByte(DF_CMD_GETSTATUS);

	/* Check if sector protection is enabled */
	if (Dataflash_ReceiveByte() & DF_STATUS_SECTORPROTECTION_ON)
     a4e:	01 fe       	sbrs	r0, 1
     a50:	15 c0       	rjmp	.+42     	; 0xa7c <DataflashManager_ResetDataflashProtections+0x94>
     a52:	39 dd       	rcall	.-1422   	; 0x4c6 <Dataflash_ToggleSelectedChipCS>
	{
		Dataflash_ToggleSelectedChipCS();
     a54:	8d e3       	ldi	r24, 0x3D	; 61
     a56:	8e bd       	out	0x2e, r24	; 46
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     a58:	0d b4       	in	r0, 0x2d	; 45
     a5a:	07 fe       	sbrs	r0, 7
				while (!(SPSR & (1 << SPIF)));
     a5c:	fd cf       	rjmp	.-6      	; 0xa58 <DataflashManager_ResetDataflashProtections+0x70>
     a5e:	8a e2       	ldi	r24, 0x2A	; 42
     a60:	8e bd       	out	0x2e, r24	; 46
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     a62:	0d b4       	in	r0, 0x2d	; 45
     a64:	07 fe       	sbrs	r0, 7
				while (!(SPSR & (1 << SPIF)));
     a66:	fd cf       	rjmp	.-6      	; 0xa62 <DataflashManager_ResetDataflashProtections+0x7a>
     a68:	8f e7       	ldi	r24, 0x7F	; 127
     a6a:	8e bd       	out	0x2e, r24	; 46
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     a6c:	0d b4       	in	r0, 0x2d	; 45
     a6e:	07 fe       	sbrs	r0, 7
				while (!(SPSR & (1 << SPIF)));
     a70:	fd cf       	rjmp	.-6      	; 0xa6c <DataflashManager_ResetDataflashProtections+0x84>
     a72:	8a e9       	ldi	r24, 0x9A	; 154
     a74:	8e bd       	out	0x2e, r24	; 46
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     a76:	0d b4       	in	r0, 0x2d	; 45
     a78:	07 fe       	sbrs	r0, 7
				while (!(SPSR & (1 << SPIF)));
     a7a:	fd cf       	rjmp	.-6      	; 0xa76 <DataflashManager_ResetDataflashProtections+0x8e>
     a7c:	8e b1       	in	r24, 0x0e	; 14
     a7e:	83 60       	ori	r24, 0x03	; 3
     a80:	8e b9       	out	0x0e, r24	; 14
     a82:	08 95       	ret

00000a84 <DataflashManager_CheckDataflashOperation>:
     a84:	8e b1       	in	r24, 0x0e	; 14
	}
	#endif

	/* Deselect current Dataflash chip */
	Dataflash_DeselectChip();
}
     a86:	83 60       	ori	r24, 0x03	; 3
     a88:	8e 7f       	andi	r24, 0xFE	; 254
     a8a:	8e b9       	out	0x0e, r24	; 14
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     a8c:	8f e9       	ldi	r24, 0x9F	; 159
     a8e:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     a90:	0d b4       	in	r0, 0x2d	; 45
     a92:	07 fe       	sbrs	r0, 7
     a94:	fd cf       	rjmp	.-6      	; 0xa90 <DataflashManager_CheckDataflashOperation+0xc>
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     a96:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     a98:	0d b4       	in	r0, 0x2d	; 45
     a9a:	07 fe       	sbrs	r0, 7
     a9c:	fd cf       	rjmp	.-6      	; 0xa98 <DataflashManager_CheckDataflashOperation+0x14>
				return SPDR;
     a9e:	9e b5       	in	r25, 0x2e	; 46
     aa0:	8e b1       	in	r24, 0x0e	; 14
     aa2:	83 60       	ori	r24, 0x03	; 3
     aa4:	8e b9       	out	0x0e, r24	; 14
	Dataflash_SendByte(DF_CMD_READMANUFACTURERDEVICEINFO);
	ReturnByte = Dataflash_ReceiveByte();
	Dataflash_DeselectChip();

	/* If returned data is invalid, fail the command */
	if (ReturnByte != DF_MANUFACTURER_ATMEL)
     aa6:	9f 31       	cpi	r25, 0x1F	; 31
     aa8:	b1 f4       	brne	.+44     	; 0xad6 <DataflashManager_CheckDataflashOperation+0x52>
     aaa:	8e b1       	in	r24, 0x0e	; 14
     aac:	83 60       	ori	r24, 0x03	; 3
     aae:	8d 7f       	andi	r24, 0xFD	; 253
     ab0:	8e b9       	out	0x0e, r24	; 14
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     ab2:	8f e9       	ldi	r24, 0x9F	; 159
     ab4:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     ab6:	0d b4       	in	r0, 0x2d	; 45
     ab8:	07 fe       	sbrs	r0, 7
     aba:	fd cf       	rjmp	.-6      	; 0xab6 <DataflashManager_CheckDataflashOperation+0x32>
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     abc:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     abe:	0d b4       	in	r0, 0x2d	; 45
     ac0:	07 fe       	sbrs	r0, 7
     ac2:	fd cf       	rjmp	.-6      	; 0xabe <DataflashManager_CheckDataflashOperation+0x3a>
				return SPDR;
     ac4:	9e b5       	in	r25, 0x2e	; 46
     ac6:	8e b1       	in	r24, 0x0e	; 14
     ac8:	83 60       	ori	r24, 0x03	; 3
     aca:	8e b9       	out	0x0e, r24	; 14

/** Performs a simple test on the attached Dataflash IC(s) to ensure that they are working.
 *
 *  \return Boolean true if all media chips are working, false otherwise
 */
bool DataflashManager_CheckDataflashOperation(void)
     acc:	81 e0       	ldi	r24, 0x01	; 1
     ace:	9f 31       	cpi	r25, 0x1F	; 31
     ad0:	19 f0       	breq	.+6      	; 0xad8 <DataflashManager_CheckDataflashOperation+0x54>
     ad2:	80 e0       	ldi	r24, 0x00	; 0
     ad4:	08 95       	ret
	ReturnByte = Dataflash_ReceiveByte();
	Dataflash_DeselectChip();

	/* If returned data is invalid, fail the command */
	if (ReturnByte != DF_MANUFACTURER_ATMEL)
	  return false;
     ad6:	80 e0       	ldi	r24, 0x00	; 0
	if (ReturnByte != DF_MANUFACTURER_ATMEL)
	  return false;
	#endif

	return true;
}
     ad8:	08 95       	ret

00000ada <SCSI_Command_ReadWrite_10>:
 *  \param[in] IsDataRead  Indicates if the command is a READ (10) command or WRITE (10) command (DATA_READ or DATA_WRITE)
 *
 *  \return Boolean true if the command completed successfully, false otherwise.
 */
static bool SCSI_Command_ReadWrite_10(const bool IsDataRead)
{
     ada:	cf 93       	push	r28
     adc:	df 93       	push	r29

				Temp = Data.Bytes[1];
				Data.Bytes[1] = Data.Bytes[2];
				Data.Bytes[2] = Temp;

				return Data.DWord;
     ade:	40 91 59 01 	lds	r20, 0x0159
     ae2:	50 91 58 01 	lds	r21, 0x0158
     ae6:	60 91 57 01 	lds	r22, 0x0157
     aea:	70 91 56 01 	lds	r23, 0x0156

				Temp = Data.Bytes[0];
				Data.Bytes[0] = Data.Bytes[1];
				Data.Bytes[1] = Temp;

				return Data.Word;
     aee:	90 91 5c 01 	lds	r25, 0x015C
     af2:	c9 2f       	mov	r28, r25
     af4:	90 91 5b 01 	lds	r25, 0x015B
     af8:	d9 2f       	mov	r29, r25

	BlockAddress = SwapEndian_32(*(uint32_t*)&CommandBlock.SCSICommandData[2]);
	TotalBlocks  = SwapEndian_16(*(uint16_t*)&CommandBlock.SCSICommandData[7]);

	/* Check if the block address is outside the maximum allowable value for the LUN */
	if (BlockAddress >= LUN_MEDIA_BLOCKS)
     afa:	40 30       	cpi	r20, 0x00	; 0
     afc:	90 e8       	ldi	r25, 0x80	; 128
     afe:	59 07       	cpc	r21, r25
     b00:	90 e0       	ldi	r25, 0x00	; 0
     b02:	69 07       	cpc	r22, r25
     b04:	90 e0       	ldi	r25, 0x00	; 0
     b06:	79 07       	cpc	r23, r25
     b08:	68 f0       	brcs	.+26     	; 0xb24 <SCSI_Command_ReadWrite_10+0x4a>
	{
		/* Block address is invalid, update SENSE key and return command fail */
		SCSI_SET_SENSE(SCSI_SENSE_KEY_ILLEGAL_REQUEST,
     b0a:	80 91 0f 01 	lds	r24, 0x010F
     b0e:	80 7f       	andi	r24, 0xF0	; 240
     b10:	85 60       	ori	r24, 0x05	; 5
     b12:	80 93 0f 01 	sts	0x010F, r24
     b16:	81 e2       	ldi	r24, 0x21	; 33
     b18:	80 93 19 01 	sts	0x0119, r24
     b1c:	10 92 1a 01 	sts	0x011A, r1
		               SCSI_ASENSE_LOGICAL_BLOCK_ADDRESS_OUT_OF_RANGE,
		               SCSI_ASENSEQ_NO_QUALIFIER);

		return false;
     b20:	80 e0       	ldi	r24, 0x00	; 0
     b22:	2a c0       	rjmp	.+84     	; 0xb78 <SCSI_Command_ReadWrite_10+0x9e>
	/* Adjust the given block address to the real media address based on the selected LUN */
	BlockAddress += ((uint32_t)CommandBlock.LUN * LUN_MEDIA_BLOCKS);
	#endif

	/* Determine if the packet is a READ (10) or WRITE (10) command, call appropriate function */
	if (IsDataRead == DATA_READ)
     b24:	88 23       	and	r24, r24
     b26:	29 f0       	breq	.+10     	; 0xb32 <SCSI_Command_ReadWrite_10+0x58>
	  DataflashManager_ReadBlocks(BlockAddress, TotalBlocks);
     b28:	cb 01       	movw	r24, r22
     b2a:	ba 01       	movw	r22, r20
     b2c:	ae 01       	movw	r20, r28
     b2e:	56 de       	rcall	.-852    	; 0x7dc <DataflashManager_ReadBlocks>
     b30:	04 c0       	rjmp	.+8      	; 0xb3a <SCSI_Command_ReadWrite_10+0x60>
     b32:	cb 01       	movw	r24, r22
	else
	  DataflashManager_WriteBlocks(BlockAddress, TotalBlocks);
     b34:	ba 01       	movw	r22, r20
     b36:	ae 01       	movw	r20, r28
     b38:	0a dd       	rcall	.-1516   	; 0x54e <DataflashManager_WriteBlocks>
     b3a:	ae 01       	movw	r20, r28
     b3c:	60 e0       	ldi	r22, 0x00	; 0

	/* Update the bytes transferred counter and succeed the command */
	CommandBlock.DataTransferLength -= ((uint32_t)TotalBlocks * VIRTUAL_MEMORY_BLOCK_SIZE);
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	89 e0       	ldi	r24, 0x09	; 9
     b42:	44 0f       	add	r20, r20
     b44:	55 1f       	adc	r21, r21
     b46:	66 1f       	adc	r22, r22
     b48:	77 1f       	adc	r23, r23
     b4a:	8a 95       	dec	r24
     b4c:	d1 f7       	brne	.-12     	; 0xb42 <SCSI_Command_ReadWrite_10+0x68>
     b4e:	80 91 4d 01 	lds	r24, 0x014D
     b52:	90 91 4e 01 	lds	r25, 0x014E
     b56:	a0 91 4f 01 	lds	r26, 0x014F
     b5a:	b0 91 50 01 	lds	r27, 0x0150
     b5e:	84 1b       	sub	r24, r20
     b60:	95 0b       	sbc	r25, r21
     b62:	a6 0b       	sbc	r26, r22
     b64:	b7 0b       	sbc	r27, r23
     b66:	80 93 4d 01 	sts	0x014D, r24
     b6a:	90 93 4e 01 	sts	0x014E, r25
     b6e:	a0 93 4f 01 	sts	0x014F, r26
     b72:	b0 93 50 01 	sts	0x0150, r27
     b76:	81 e0       	ldi	r24, 0x01	; 1
     b78:	df 91       	pop	r29

	return true;
     b7a:	cf 91       	pop	r28
}
     b7c:	08 95       	ret

00000b7e <SCSI_DecodeSCSICommand>:
     b7e:	0f 93       	push	r16
     b80:	1f 93       	push	r17
 *  a command failure due to a ILLEGAL REQUEST.
 *
 *  \return Boolean true if the command completed successfully, false otherwise
 */
bool SCSI_DecodeSCSICommand(void)
{
     b82:	cf 93       	push	r28
     b84:	df 93       	push	r29
	bool CommandSuccess = false;

	/* Run the appropriate SCSI command hander function based on the passed command */
	switch (CommandBlock.SCSICommandData[0])
     b86:	80 91 54 01 	lds	r24, 0x0154
     b8a:	8d 31       	cpi	r24, 0x1D	; 29
     b8c:	09 f4       	brne	.+2      	; 0xb90 <SCSI_DecodeSCSICommand+0x12>
     b8e:	ab c0       	rjmp	.+342    	; 0xce6 <SCSI_DecodeSCSICommand+0x168>
     b90:	8e 31       	cpi	r24, 0x1E	; 30
     b92:	78 f4       	brcc	.+30     	; 0xbb2 <SCSI_DecodeSCSICommand+0x34>
     b94:	83 30       	cpi	r24, 0x03	; 3
     b96:	09 f4       	brne	.+2      	; 0xb9a <SCSI_DecodeSCSICommand+0x1c>
     b98:	57 c0       	rjmp	.+174    	; 0xc48 <SCSI_DecodeSCSICommand+0xca>
     b9a:	84 30       	cpi	r24, 0x04	; 4
     b9c:	20 f4       	brcc	.+8      	; 0xba6 <SCSI_DecodeSCSICommand+0x28>
     b9e:	88 23       	and	r24, r24
     ba0:	09 f4       	brne	.+2      	; 0xba4 <SCSI_DecodeSCSICommand+0x26>
     ba2:	e4 c0       	rjmp	.+456    	; 0xd6c <SCSI_DecodeSCSICommand+0x1ee>
     ba4:	ec c0       	rjmp	.+472    	; 0xd7e <SCSI_DecodeSCSICommand+0x200>
     ba6:	82 31       	cpi	r24, 0x12	; 18
     ba8:	b9 f0       	breq	.+46     	; 0xbd8 <SCSI_DecodeSCSICommand+0x5a>
     baa:	8a 31       	cpi	r24, 0x1A	; 26
     bac:	09 f0       	breq	.+2      	; 0xbb0 <SCSI_DecodeSCSICommand+0x32>
     bae:	e7 c0       	rjmp	.+462    	; 0xd7e <SCSI_DecodeSCSICommand+0x200>
     bb0:	bc c0       	rjmp	.+376    	; 0xd2a <SCSI_DecodeSCSICommand+0x1ac>
     bb2:	88 32       	cpi	r24, 0x28	; 40
     bb4:	09 f4       	brne	.+2      	; 0xbb8 <SCSI_DecodeSCSICommand+0x3a>
     bb6:	b3 c0       	rjmp	.+358    	; 0xd1e <SCSI_DecodeSCSICommand+0x1a0>
     bb8:	89 32       	cpi	r24, 0x29	; 41
     bba:	38 f4       	brcc	.+14     	; 0xbca <SCSI_DecodeSCSICommand+0x4c>
     bbc:	8e 31       	cpi	r24, 0x1E	; 30
     bbe:	09 f4       	brne	.+2      	; 0xbc2 <SCSI_DecodeSCSICommand+0x44>
     bc0:	d5 c0       	rjmp	.+426    	; 0xd6c <SCSI_DecodeSCSICommand+0x1ee>
     bc2:	85 32       	cpi	r24, 0x25	; 37
     bc4:	09 f0       	breq	.+2      	; 0xbc8 <SCSI_DecodeSCSICommand+0x4a>
     bc6:	db c0       	rjmp	.+438    	; 0xd7e <SCSI_DecodeSCSICommand+0x200>
     bc8:	65 c0       	rjmp	.+202    	; 0xc94 <SCSI_DecodeSCSICommand+0x116>
     bca:	8a 32       	cpi	r24, 0x2A	; 42
     bcc:	09 f4       	brne	.+2      	; 0xbd0 <SCSI_DecodeSCSICommand+0x52>
     bce:	a5 c0       	rjmp	.+330    	; 0xd1a <SCSI_DecodeSCSICommand+0x19c>
     bd0:	8f 32       	cpi	r24, 0x2F	; 47
     bd2:	09 f0       	breq	.+2      	; 0xbd6 <SCSI_DecodeSCSICommand+0x58>
     bd4:	d4 c0       	rjmp	.+424    	; 0xd7e <SCSI_DecodeSCSICommand+0x200>
     bd6:	ca c0       	rjmp	.+404    	; 0xd6c <SCSI_DecodeSCSICommand+0x1ee>
     bd8:	00 91 58 01 	lds	r16, 0x0158
     bdc:	10 91 57 01 	lds	r17, 0x0157
{
	uint16_t AllocationLength  = SwapEndian_16(*(uint16_t*)&CommandBlock.SCSICommandData[3]);
	uint16_t BytesTransferred  = MIN(AllocationLength, sizeof(InquiryData));

	/* Only the standard INQUIRY data is supported, check if any optional INQUIRY bits set */
	if ((CommandBlock.SCSICommandData[1] & ((1 << 0) | (1 << 1))) ||
     be0:	80 91 55 01 	lds	r24, 0x0155
     be4:	90 e0       	ldi	r25, 0x00	; 0
     be6:	83 70       	andi	r24, 0x03	; 3
     be8:	90 70       	andi	r25, 0x00	; 0
     bea:	00 97       	sbiw	r24, 0x00	; 0
     bec:	09 f0       	breq	.+2      	; 0xbf0 <SCSI_DecodeSCSICommand+0x72>
     bee:	7f c0       	rjmp	.+254    	; 0xcee <SCSI_DecodeSCSICommand+0x170>
     bf0:	80 91 56 01 	lds	r24, 0x0156
     bf4:	88 23       	and	r24, r24
     bf6:	09 f0       	breq	.+2      	; 0xbfa <SCSI_DecodeSCSICommand+0x7c>
     bf8:	7a c0       	rjmp	.+244    	; 0xcee <SCSI_DecodeSCSICommand+0x170>
 *  \return Boolean true if the command completed successfully, false otherwise.
 */
static bool SCSI_Command_Inquiry(void)
{
	uint16_t AllocationLength  = SwapEndian_16(*(uint16_t*)&CommandBlock.SCSICommandData[3]);
	uint16_t BytesTransferred  = MIN(AllocationLength, sizeof(InquiryData));
     bfa:	e8 01       	movw	r28, r16
     bfc:	05 32       	cpi	r16, 0x25	; 37
     bfe:	11 05       	cpc	r17, r1
     c00:	10 f0       	brcs	.+4      	; 0xc06 <SCSI_DecodeSCSICommand+0x88>
     c02:	c4 e2       	ldi	r28, 0x24	; 36
     c04:	d0 e0       	ldi	r29, 0x00	; 0

		return false;
	}

	/* Write the INQUIRY data to the endpoint */
	Endpoint_Write_Stream_LE(&InquiryData, BytesTransferred, NULL);
     c06:	8f e1       	ldi	r24, 0x1F	; 31
     c08:	91 e0       	ldi	r25, 0x01	; 1
     c0a:	be 01       	movw	r22, r28
     c0c:	40 e0       	ldi	r20, 0x00	; 0
     c0e:	50 e0       	ldi	r21, 0x00	; 0
     c10:	16 d1       	rcall	.+556    	; 0xe3e <Endpoint_Write_Stream_LE>
     c12:	c8 01       	movw	r24, r16

	/* Pad out remaining bytes with 0x00 */
	Endpoint_Null_Stream((AllocationLength - BytesTransferred), NULL);
     c14:	8c 1b       	sub	r24, r28
     c16:	9d 0b       	sbc	r25, r29
     c18:	60 e0       	ldi	r22, 0x00	; 0
     c1a:	70 e0       	ldi	r23, 0x00	; 0
     c1c:	cb d0       	rcall	.+406    	; 0xdb4 <Endpoint_Null_Stream>
     c1e:	80 91 e8 00 	lds	r24, 0x00E8
     c22:	8e 77       	andi	r24, 0x7E	; 126
     c24:	80 93 e8 00 	sts	0x00E8, r24
     c28:	ae 01       	movw	r20, r28
     c2a:	60 e0       	ldi	r22, 0x00	; 0

	/* Finalize the stream transfer to send the last packet */
	Endpoint_ClearIN();

	/* Succeed the command and update the bytes transferred counter */
	CommandBlock.DataTransferLength -= BytesTransferred;
     c2c:	70 e0       	ldi	r23, 0x00	; 0
     c2e:	80 91 4d 01 	lds	r24, 0x014D
     c32:	90 91 4e 01 	lds	r25, 0x014E
     c36:	a0 91 4f 01 	lds	r26, 0x014F
     c3a:	b0 91 50 01 	lds	r27, 0x0150
     c3e:	84 1b       	sub	r24, r20
     c40:	95 0b       	sbc	r25, r21
     c42:	a6 0b       	sbc	r26, r22
     c44:	b7 0b       	sbc	r27, r23
     c46:	89 c0       	rjmp	.+274    	; 0xd5a <SCSI_DecodeSCSICommand+0x1dc>
     c48:	00 91 58 01 	lds	r16, 0x0158
 *
 *  \return Boolean true if the command completed successfully, false otherwise.
 */
static bool SCSI_Command_Request_Sense(void)
{
	uint8_t  AllocationLength = CommandBlock.SCSICommandData[4];
     c4c:	c0 2f       	mov	r28, r16
     c4e:	03 31       	cpi	r16, 0x13	; 19
	uint8_t  BytesTransferred = MIN(AllocationLength, sizeof(SenseData));
     c50:	08 f0       	brcs	.+2      	; 0xc54 <SCSI_DecodeSCSICommand+0xd6>
     c52:	c2 e1       	ldi	r28, 0x12	; 18
     c54:	8d e0       	ldi	r24, 0x0D	; 13
     c56:	91 e0       	ldi	r25, 0x01	; 1

	/* Send the SENSE data - this indicates to the host the status of the last command */
	Endpoint_Write_Stream_LE(&SenseData, BytesTransferred, NULL);
     c58:	6c 2f       	mov	r22, r28
     c5a:	70 e0       	ldi	r23, 0x00	; 0
     c5c:	40 e0       	ldi	r20, 0x00	; 0
     c5e:	50 e0       	ldi	r21, 0x00	; 0
     c60:	ee d0       	rcall	.+476    	; 0xe3e <Endpoint_Write_Stream_LE>
     c62:	80 2f       	mov	r24, r16
     c64:	90 e0       	ldi	r25, 0x00	; 0
     c66:	8c 1b       	sub	r24, r28

	/* Pad out remaining bytes with 0x00 */
	Endpoint_Null_Stream((AllocationLength - BytesTransferred), NULL);
     c68:	91 09       	sbc	r25, r1
     c6a:	60 e0       	ldi	r22, 0x00	; 0
     c6c:	70 e0       	ldi	r23, 0x00	; 0
     c6e:	a2 d0       	rcall	.+324    	; 0xdb4 <Endpoint_Null_Stream>
     c70:	80 91 e8 00 	lds	r24, 0x00E8
     c74:	8e 77       	andi	r24, 0x7E	; 126
     c76:	80 93 e8 00 	sts	0x00E8, r24
     c7a:	80 91 4d 01 	lds	r24, 0x014D
     c7e:	90 91 4e 01 	lds	r25, 0x014E

	/* Finalize the stream transfer to send the last packet */
	Endpoint_ClearIN();

	/* Succeed the command and update the bytes transferred counter */
	CommandBlock.DataTransferLength -= BytesTransferred;
     c82:	a0 91 4f 01 	lds	r26, 0x014F
     c86:	b0 91 50 01 	lds	r27, 0x0150
     c8a:	8c 1b       	sub	r24, r28
     c8c:	91 09       	sbc	r25, r1
     c8e:	a1 09       	sbc	r26, r1
     c90:	b1 09       	sbc	r27, r1
     c92:	63 c0       	rjmp	.+198    	; 0xd5a <SCSI_DecodeSCSICommand+0x1dc>
     c94:	10 92 f1 00 	sts	0x00F1, r1
     c98:	10 92 f1 00 	sts	0x00F1, r1
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_32_BE(const uint32_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_32_BE(const uint32_t Data)
			{
				UEDATX = (Data >> 24);
     c9c:	8f e7       	ldi	r24, 0x7F	; 127
     c9e:	80 93 f1 00 	sts	0x00F1, r24
				UEDATX = (Data >> 16);
     ca2:	8f ef       	ldi	r24, 0xFF	; 255
				UEDATX = (Data >> 8);
     ca4:	80 93 f1 00 	sts	0x00F1, r24
     ca8:	10 92 f1 00 	sts	0x00F1, r1
				UEDATX = (Data &  0xFF);
     cac:	10 92 f1 00 	sts	0x00F1, r1
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_32_BE(const uint32_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_32_BE(const uint32_t Data)
			{
				UEDATX = (Data >> 24);
     cb0:	82 e0       	ldi	r24, 0x02	; 2
     cb2:	80 93 f1 00 	sts	0x00F1, r24
				UEDATX = (Data >> 16);
     cb6:	10 92 f1 00 	sts	0x00F1, r1
				UEDATX = (Data >> 8);
     cba:	80 91 44 01 	lds	r24, 0x0144
				UEDATX = (Data &  0xFF);
     cbe:	88 23       	and	r24, r24
     cc0:	09 f0       	breq	.+2      	; 0xcc4 <SCSI_DecodeSCSICommand+0x146>

	/* Send the logical block size of the device (must be 512 bytes) */
	Endpoint_Write_32_BE(VIRTUAL_MEMORY_BLOCK_SIZE);

	/* Check if the current command is being aborted by the host */
	if (IsMassStoreReset)
     cc2:	72 c0       	rjmp	.+228    	; 0xda8 <SCSI_DecodeSCSICommand+0x22a>
     cc4:	80 91 e8 00 	lds	r24, 0x00E8
     cc8:	8e 77       	andi	r24, 0x7E	; 126
     cca:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     cce:	80 91 4d 01 	lds	r24, 0x014D
     cd2:	90 91 4e 01 	lds	r25, 0x014E

	/* Send the endpoint data packet to the host */
	Endpoint_ClearIN();

	/* Succeed the command and update the bytes transferred counter */
	CommandBlock.DataTransferLength -= 8;
     cd6:	a0 91 4f 01 	lds	r26, 0x014F
     cda:	b0 91 50 01 	lds	r27, 0x0150
     cde:	08 97       	sbiw	r24, 0x08	; 8
     ce0:	a1 09       	sbc	r26, r1
     ce2:	b1 09       	sbc	r27, r1
     ce4:	3a c0       	rjmp	.+116    	; 0xd5a <SCSI_DecodeSCSICommand+0x1dc>
     ce6:	80 91 55 01 	lds	r24, 0x0155
     cea:	82 fd       	sbrc	r24, 2
     cec:	08 c0       	rjmp	.+16     	; 0xcfe <SCSI_DecodeSCSICommand+0x180>
 *  \return Boolean true if the command completed successfully, false otherwise.
 */
static bool SCSI_Command_Send_Diagnostic(void)
{
	/* Check to see if the SELF TEST bit is not set */
	if (!(CommandBlock.SCSICommandData[1] & (1 << 2)))
     cee:	80 91 0f 01 	lds	r24, 0x010F
     cf2:	80 7f       	andi	r24, 0xF0	; 240
     cf4:	85 60       	ori	r24, 0x05	; 5
	{
		/* Only self-test supported - update SENSE key and fail the command */
		SCSI_SET_SENSE(SCSI_SENSE_KEY_ILLEGAL_REQUEST,
     cf6:	80 93 0f 01 	sts	0x010F, r24
     cfa:	84 e2       	ldi	r24, 0x24	; 36
     cfc:	47 c0       	rjmp	.+142    	; 0xd8c <SCSI_DecodeSCSICommand+0x20e>
     cfe:	c2 de       	rcall	.-636    	; 0xa84 <DataflashManager_CheckDataflashOperation>
     d00:	88 23       	and	r24, r24
     d02:	a1 f5       	brne	.+104    	; 0xd6c <SCSI_DecodeSCSICommand+0x1ee>
     d04:	80 91 0f 01 	lds	r24, 0x010F

		return false;
	}

	/* Check to see if all attached Dataflash ICs are functional */
	if (!(DataflashManager_CheckDataflashOperation()))
     d08:	80 7f       	andi	r24, 0xF0	; 240
     d0a:	84 60       	ori	r24, 0x04	; 4
     d0c:	80 93 0f 01 	sts	0x010F, r24
	{
		/* Update SENSE key with a hardware error condition and return command fail */
		SCSI_SET_SENSE(SCSI_SENSE_KEY_HARDWARE_ERROR,
     d10:	10 92 19 01 	sts	0x0119, r1
     d14:	10 92 1a 01 	sts	0x011A, r1
     d18:	47 c0       	rjmp	.+142    	; 0xda8 <SCSI_DecodeSCSICommand+0x22a>
     d1a:	80 e0       	ldi	r24, 0x00	; 0
     d1c:	01 c0       	rjmp	.+2      	; 0xd20 <SCSI_DecodeSCSICommand+0x1a2>
     d1e:	81 e0       	ldi	r24, 0x01	; 1
     d20:	dc de       	rcall	.-584    	; 0xada <SCSI_Command_ReadWrite_10>
     d22:	88 23       	and	r24, r24
			break;
		case SCSI_CMD_SEND_DIAGNOSTIC:
			CommandSuccess = SCSI_Command_Send_Diagnostic();
			break;
		case SCSI_CMD_WRITE_10:
			CommandSuccess = SCSI_Command_ReadWrite_10(DATA_WRITE);
     d24:	09 f4       	brne	.+2      	; 0xd28 <SCSI_DecodeSCSICommand+0x1aa>
     d26:	40 c0       	rjmp	.+128    	; 0xda8 <SCSI_DecodeSCSICommand+0x22a>
			break;
		case SCSI_CMD_READ_10:
			CommandSuccess = SCSI_Command_ReadWrite_10(DATA_READ);
     d28:	34 c0       	rjmp	.+104    	; 0xd92 <SCSI_DecodeSCSICommand+0x214>
     d2a:	10 92 f1 00 	sts	0x00F1, r1
		                   SCSI_ASENSEQ_NO_QUALIFIER);
			break;
	}

	/* Check if command was successfully processed */
	if (CommandSuccess)
     d2e:	10 92 f1 00 	sts	0x00F1, r1
     d32:	10 92 f1 00 	sts	0x00F1, r1
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     d36:	10 92 f1 00 	sts	0x00F1, r1
     d3a:	80 91 e8 00 	lds	r24, 0x00E8
     d3e:	8e 77       	andi	r24, 0x7E	; 126
     d40:	80 93 e8 00 	sts	0x00E8, r24
     d44:	80 91 4d 01 	lds	r24, 0x014D
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     d48:	90 91 4e 01 	lds	r25, 0x014E
     d4c:	a0 91 4f 01 	lds	r26, 0x014F
	Endpoint_Write_8(DISK_READ_ONLY ? 0x80 : 0x00);
	Endpoint_Write_8(0x00);
	Endpoint_ClearIN();

	/* Update the bytes transferred counter and succeed the command */
	CommandBlock.DataTransferLength -= 4;
     d50:	b0 91 50 01 	lds	r27, 0x0150
     d54:	04 97       	sbiw	r24, 0x04	; 4
     d56:	a1 09       	sbc	r26, r1
     d58:	b1 09       	sbc	r27, r1
     d5a:	80 93 4d 01 	sts	0x014D, r24
     d5e:	90 93 4e 01 	sts	0x014E, r25
     d62:	a0 93 4f 01 	sts	0x014F, r26
     d66:	b0 93 50 01 	sts	0x0150, r27
     d6a:	13 c0       	rjmp	.+38     	; 0xd92 <SCSI_DecodeSCSICommand+0x214>
     d6c:	10 92 4d 01 	sts	0x014D, r1
     d70:	10 92 4e 01 	sts	0x014E, r1
     d74:	10 92 4f 01 	sts	0x014F, r1
		case SCSI_CMD_TEST_UNIT_READY:
		case SCSI_CMD_PREVENT_ALLOW_MEDIUM_REMOVAL:
		case SCSI_CMD_VERIFY_10:
			/* These commands should just succeed, no handling required */
			CommandSuccess = true;
			CommandBlock.DataTransferLength = 0;
     d78:	10 92 50 01 	sts	0x0150, r1
     d7c:	0a c0       	rjmp	.+20     	; 0xd92 <SCSI_DecodeSCSICommand+0x214>
     d7e:	80 91 0f 01 	lds	r24, 0x010F
     d82:	80 7f       	andi	r24, 0xF0	; 240
     d84:	85 60       	ori	r24, 0x05	; 5
     d86:	80 93 0f 01 	sts	0x010F, r24
			break;
		default:
			/* Update the SENSE key to reflect the invalid command */
			SCSI_SET_SENSE(SCSI_SENSE_KEY_ILLEGAL_REQUEST,
     d8a:	80 e2       	ldi	r24, 0x20	; 32
     d8c:	80 93 19 01 	sts	0x0119, r24
     d90:	c1 cf       	rjmp	.-126    	; 0xd14 <SCSI_DecodeSCSICommand+0x196>
     d92:	80 91 0f 01 	lds	r24, 0x010F
     d96:	80 7f       	andi	r24, 0xF0	; 240
     d98:	80 93 0f 01 	sts	0x010F, r24
     d9c:	10 92 19 01 	sts	0x0119, r1
	}

	/* Check if command was successfully processed */
	if (CommandSuccess)
	{
		SCSI_SET_SENSE(SCSI_SENSE_KEY_GOOD,
     da0:	10 92 1a 01 	sts	0x011A, r1
     da4:	81 e0       	ldi	r24, 0x01	; 1
     da6:	01 c0       	rjmp	.+2      	; 0xdaa <SCSI_DecodeSCSICommand+0x22c>
     da8:	80 e0       	ldi	r24, 0x00	; 0
     daa:	df 91       	pop	r29
     dac:	cf 91       	pop	r28
     dae:	1f 91       	pop	r17
		               SCSI_ASENSE_NO_ADDITIONAL_INFORMATION,
		               SCSI_ASENSEQ_NO_QUALIFIER);

		return true;
     db0:	0f 91       	pop	r16
     db2:	08 95       	ret

00000db4 <Endpoint_Null_Stream>:
	return ENDPOINT_RWSTREAM_NoError;
}

uint8_t Endpoint_Null_Stream(uint16_t Length,
                             uint16_t* const BytesProcessed)
{
     db4:	df 92       	push	r13
     db6:	ef 92       	push	r14
     db8:	ff 92       	push	r15
     dba:	0f 93       	push	r16
     dbc:	1f 93       	push	r17
     dbe:	cf 93       	push	r28
     dc0:	df 93       	push	r29
     dc2:	ec 01       	movw	r28, r24
     dc4:	8b 01       	movw	r16, r22
	uint8_t  ErrorCode;
	uint16_t BytesInTransfer = 0;
	
	if ((ErrorCode = Endpoint_WaitUntilReady()))
     dc6:	e8 d1       	rcall	.+976    	; 0x1198 <Endpoint_WaitUntilReady>
     dc8:	d8 2e       	mov	r13, r24
     dca:	88 23       	and	r24, r24
     dcc:	79 f5       	brne	.+94     	; 0xe2c <Endpoint_Null_Stream+0x78>
     dce:	01 15       	cp	r16, r1
	  return ErrorCode;
	  
	if (BytesProcessed != NULL)
     dd0:	11 05       	cpc	r17, r1
     dd2:	29 f0       	breq	.+10     	; 0xdde <Endpoint_Null_Stream+0x2a>
     dd4:	f8 01       	movw	r30, r16
	  Length -= *BytesProcessed;
     dd6:	20 81       	ld	r18, Z
     dd8:	31 81       	ldd	r19, Z+1	; 0x01
     dda:	c2 1b       	sub	r28, r18
     ddc:	d3 0b       	sbc	r29, r19
     dde:	ee 24       	eor	r14, r14
	return ENDPOINT_RWSTREAM_NoError;
}

uint8_t Endpoint_Null_Stream(uint16_t Length,
                             uint16_t* const BytesProcessed)
{
     de0:	ff 24       	eor	r15, r15
     de2:	20 c0       	rjmp	.+64     	; 0xe24 <Endpoint_Null_Stream+0x70>
     de4:	80 91 e8 00 	lds	r24, 0x00E8
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
     de8:	85 fd       	sbrc	r24, 5
	if (BytesProcessed != NULL)
	  Length -= *BytesProcessed;

	while (Length)
	{
		if (!(Endpoint_IsReadWriteAllowed()))
     dea:	16 c0       	rjmp	.+44     	; 0xe18 <Endpoint_Null_Stream+0x64>
     dec:	80 91 e8 00 	lds	r24, 0x00E8
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     df0:	8e 77       	andi	r24, 0x7E	; 126
     df2:	80 93 e8 00 	sts	0x00E8, r24
     df6:	01 15       	cp	r16, r1
		{
			Endpoint_ClearIN();

			if (BytesProcessed != NULL)
     df8:	11 05       	cpc	r17, r1
     dfa:	51 f0       	breq	.+20     	; 0xe10 <Endpoint_Null_Stream+0x5c>
     dfc:	f8 01       	movw	r30, r16
			{
				*BytesProcessed += BytesInTransfer;
     dfe:	80 81       	ld	r24, Z
     e00:	91 81       	ldd	r25, Z+1	; 0x01
     e02:	8e 0d       	add	r24, r14
     e04:	9f 1d       	adc	r25, r15
     e06:	91 83       	std	Z+1, r25	; 0x01
     e08:	80 83       	st	Z, r24
     e0a:	35 e0       	ldi	r19, 0x05	; 5
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
     e0c:	d3 2e       	mov	r13, r19
     e0e:	0e c0       	rjmp	.+28     	; 0xe2c <Endpoint_Null_Stream+0x78>
     e10:	c3 d1       	rcall	.+902    	; 0x1198 <Endpoint_WaitUntilReady>
			}

			if ((ErrorCode = Endpoint_WaitUntilReady()))
     e12:	88 23       	and	r24, r24
     e14:	39 f0       	breq	.+14     	; 0xe24 <Endpoint_Null_Stream+0x70>
     e16:	09 c0       	rjmp	.+18     	; 0xe2a <Endpoint_Null_Stream+0x76>
     e18:	10 92 f1 00 	sts	0x00F1, r1
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     e1c:	21 97       	sbiw	r28, 0x01	; 1
     e1e:	08 94       	sec
		}
		else
		{
			Endpoint_Write_8(0);

			Length--;
     e20:	e1 1c       	adc	r14, r1
			BytesInTransfer++;
     e22:	f1 1c       	adc	r15, r1
     e24:	20 97       	sbiw	r28, 0x00	; 0
     e26:	f1 f6       	brne	.-68     	; 0xde4 <Endpoint_Null_Stream+0x30>
	  return ErrorCode;
	  
	if (BytesProcessed != NULL)
	  Length -= *BytesProcessed;

	while (Length)
     e28:	01 c0       	rjmp	.+2      	; 0xe2c <Endpoint_Null_Stream+0x78>
     e2a:	d8 2e       	mov	r13, r24
     e2c:	8d 2d       	mov	r24, r13
			{
				*BytesProcessed += BytesInTransfer;
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
			}

			if ((ErrorCode = Endpoint_WaitUntilReady()))
     e2e:	df 91       	pop	r29
			BytesInTransfer++;
		}
	}
	
	return ENDPOINT_RWSTREAM_NoError;
}
     e30:	cf 91       	pop	r28
     e32:	1f 91       	pop	r17
     e34:	0f 91       	pop	r16
     e36:	ff 90       	pop	r15
     e38:	ef 90       	pop	r14
     e3a:	df 90       	pop	r13
     e3c:	08 95       	ret

00000e3e <Endpoint_Write_Stream_LE>:
     e3e:	af 92       	push	r10
     e40:	bf 92       	push	r11
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
     e42:	cf 92       	push	r12
     e44:	df 92       	push	r13
     e46:	ef 92       	push	r14
     e48:	ff 92       	push	r15
     e4a:	1f 93       	push	r17
     e4c:	cf 93       	push	r28
     e4e:	df 93       	push	r29
     e50:	ec 01       	movw	r28, r24
     e52:	7b 01       	movw	r14, r22
     e54:	6a 01       	movw	r12, r20
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	uint16_t BytesInTransfer = 0;
	uint8_t  ErrorCode;

	if ((ErrorCode = Endpoint_WaitUntilReady()))
     e56:	a0 d1       	rcall	.+832    	; 0x1198 <Endpoint_WaitUntilReady>
     e58:	18 2f       	mov	r17, r24
     e5a:	88 23       	and	r24, r24
     e5c:	a1 f5       	brne	.+104    	; 0xec6 <Endpoint_Write_Stream_LE+0x88>
     e5e:	c1 14       	cp	r12, r1
	  return ErrorCode;

	if (BytesProcessed != NULL)
     e60:	d1 04       	cpc	r13, r1
     e62:	39 f0       	breq	.+14     	; 0xe72 <Endpoint_Write_Stream_LE+0x34>
     e64:	f6 01       	movw	r30, r12
	{
		Length -= *BytesProcessed;
     e66:	20 81       	ld	r18, Z
     e68:	31 81       	ldd	r19, Z+1	; 0x01
     e6a:	e2 1a       	sub	r14, r18
     e6c:	f3 0a       	sbc	r15, r19
     e6e:	c2 0f       	add	r28, r18
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
     e70:	d3 1f       	adc	r29, r19
     e72:	aa 24       	eor	r10, r10

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
     e74:	bb 24       	eor	r11, r11
     e76:	22 c0       	rjmp	.+68     	; 0xebc <Endpoint_Write_Stream_LE+0x7e>
     e78:	80 91 e8 00 	lds	r24, 0x00E8
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
     e7c:	85 fd       	sbrc	r24, 5
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
	{
		if (!(Endpoint_IsReadWriteAllowed()))
     e7e:	15 c0       	rjmp	.+42     	; 0xeaa <Endpoint_Write_Stream_LE+0x6c>
     e80:	80 91 e8 00 	lds	r24, 0x00E8
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     e84:	8e 77       	andi	r24, 0x7E	; 126
     e86:	80 93 e8 00 	sts	0x00E8, r24
     e8a:	c1 14       	cp	r12, r1

			#if !defined(INTERRUPT_CONTROL_ENDPOINT)
			USB_USBTask();
			#endif

			if (BytesProcessed != NULL)
     e8c:	d1 04       	cpc	r13, r1
     e8e:	49 f0       	breq	.+18     	; 0xea2 <Endpoint_Write_Stream_LE+0x64>
     e90:	f6 01       	movw	r30, r12
			{
				*BytesProcessed += BytesInTransfer;
     e92:	80 81       	ld	r24, Z
     e94:	91 81       	ldd	r25, Z+1	; 0x01
     e96:	8a 0d       	add	r24, r10
     e98:	9b 1d       	adc	r25, r11
     e9a:	91 83       	std	Z+1, r25	; 0x01
     e9c:	80 83       	st	Z, r24
     e9e:	15 e0       	ldi	r17, 0x05	; 5
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
     ea0:	12 c0       	rjmp	.+36     	; 0xec6 <Endpoint_Write_Stream_LE+0x88>
     ea2:	7a d1       	rcall	.+756    	; 0x1198 <Endpoint_WaitUntilReady>
			}

			if ((ErrorCode = Endpoint_WaitUntilReady()))
     ea4:	88 23       	and	r24, r24
     ea6:	51 f0       	breq	.+20     	; 0xebc <Endpoint_Write_Stream_LE+0x7e>
     ea8:	0d c0       	rjmp	.+26     	; 0xec4 <Endpoint_Write_Stream_LE+0x86>
     eaa:	89 91       	ld	r24, Y+
     eac:	80 93 f1 00 	sts	0x00F1, r24
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     eb0:	08 94       	sec
     eb2:	e1 08       	sbc	r14, r1
		}
		else
		{
			TEMPLATE_TRANSFER_BYTE(DataStream);
			TEMPLATE_BUFFER_MOVE(DataStream, 1);
			Length--;
     eb4:	f1 08       	sbc	r15, r1
     eb6:	08 94       	sec
     eb8:	a1 1c       	adc	r10, r1
			BytesInTransfer++;
     eba:	b1 1c       	adc	r11, r1
     ebc:	e1 14       	cp	r14, r1
     ebe:	f1 04       	cpc	r15, r1
	{
		Length -= *BytesProcessed;
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
     ec0:	d9 f6       	brne	.-74     	; 0xe78 <Endpoint_Write_Stream_LE+0x3a>
     ec2:	01 c0       	rjmp	.+2      	; 0xec6 <Endpoint_Write_Stream_LE+0x88>
     ec4:	18 2f       	mov	r17, r24
     ec6:	81 2f       	mov	r24, r17
			{
				*BytesProcessed += BytesInTransfer;
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
			}

			if ((ErrorCode = Endpoint_WaitUntilReady()))
     ec8:	df 91       	pop	r29
			BytesInTransfer++;
		}
	}

	return ENDPOINT_RWSTREAM_NoError;
}
     eca:	cf 91       	pop	r28
     ecc:	1f 91       	pop	r17
     ece:	ff 90       	pop	r15
     ed0:	ef 90       	pop	r14
     ed2:	df 90       	pop	r13
     ed4:	cf 90       	pop	r12
     ed6:	bf 90       	pop	r11
     ed8:	af 90       	pop	r10
     eda:	08 95       	ret

00000edc <Endpoint_Read_Stream_LE>:
     edc:	af 92       	push	r10
     ede:	bf 92       	push	r11
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
     ee0:	cf 92       	push	r12
     ee2:	df 92       	push	r13
     ee4:	ef 92       	push	r14
     ee6:	ff 92       	push	r15
     ee8:	1f 93       	push	r17
     eea:	cf 93       	push	r28
     eec:	df 93       	push	r29
     eee:	ec 01       	movw	r28, r24
     ef0:	7b 01       	movw	r14, r22
     ef2:	6a 01       	movw	r12, r20
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	uint16_t BytesInTransfer = 0;
	uint8_t  ErrorCode;

	if ((ErrorCode = Endpoint_WaitUntilReady()))
     ef4:	51 d1       	rcall	.+674    	; 0x1198 <Endpoint_WaitUntilReady>
     ef6:	18 2f       	mov	r17, r24
     ef8:	88 23       	and	r24, r24
     efa:	a1 f5       	brne	.+104    	; 0xf64 <Endpoint_Read_Stream_LE+0x88>
     efc:	c1 14       	cp	r12, r1
	  return ErrorCode;

	if (BytesProcessed != NULL)
     efe:	d1 04       	cpc	r13, r1
     f00:	39 f0       	breq	.+14     	; 0xf10 <Endpoint_Read_Stream_LE+0x34>
     f02:	f6 01       	movw	r30, r12
	{
		Length -= *BytesProcessed;
     f04:	20 81       	ld	r18, Z
     f06:	31 81       	ldd	r19, Z+1	; 0x01
     f08:	e2 1a       	sub	r14, r18
     f0a:	f3 0a       	sbc	r15, r19
     f0c:	c2 0f       	add	r28, r18
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
     f0e:	d3 1f       	adc	r29, r19
     f10:	aa 24       	eor	r10, r10

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
     f12:	bb 24       	eor	r11, r11
     f14:	22 c0       	rjmp	.+68     	; 0xf5a <Endpoint_Read_Stream_LE+0x7e>
     f16:	80 91 e8 00 	lds	r24, 0x00E8
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
     f1a:	85 fd       	sbrc	r24, 5
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
	{
		if (!(Endpoint_IsReadWriteAllowed()))
     f1c:	15 c0       	rjmp	.+42     	; 0xf48 <Endpoint_Read_Stream_LE+0x6c>
     f1e:	80 91 e8 00 	lds	r24, 0x00E8
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     f22:	8b 77       	andi	r24, 0x7B	; 123
     f24:	80 93 e8 00 	sts	0x00E8, r24
     f28:	c1 14       	cp	r12, r1

			#if !defined(INTERRUPT_CONTROL_ENDPOINT)
			USB_USBTask();
			#endif

			if (BytesProcessed != NULL)
     f2a:	d1 04       	cpc	r13, r1
     f2c:	49 f0       	breq	.+18     	; 0xf40 <Endpoint_Read_Stream_LE+0x64>
     f2e:	f6 01       	movw	r30, r12
			{
				*BytesProcessed += BytesInTransfer;
     f30:	80 81       	ld	r24, Z
     f32:	91 81       	ldd	r25, Z+1	; 0x01
     f34:	8a 0d       	add	r24, r10
     f36:	9b 1d       	adc	r25, r11
     f38:	91 83       	std	Z+1, r25	; 0x01
     f3a:	80 83       	st	Z, r24
     f3c:	15 e0       	ldi	r17, 0x05	; 5
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
     f3e:	12 c0       	rjmp	.+36     	; 0xf64 <Endpoint_Read_Stream_LE+0x88>
     f40:	2b d1       	rcall	.+598    	; 0x1198 <Endpoint_WaitUntilReady>
			}

			if ((ErrorCode = Endpoint_WaitUntilReady()))
     f42:	88 23       	and	r24, r24
     f44:	51 f0       	breq	.+20     	; 0xf5a <Endpoint_Read_Stream_LE+0x7e>
     f46:	0d c0       	rjmp	.+26     	; 0xf62 <Endpoint_Read_Stream_LE+0x86>
     f48:	80 91 f1 00 	lds	r24, 0x00F1
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
     f4c:	89 93       	st	Y+, r24
     f4e:	08 94       	sec
			  return ErrorCode;
		}
		else
		{
			TEMPLATE_TRANSFER_BYTE(DataStream);
     f50:	e1 08       	sbc	r14, r1
			TEMPLATE_BUFFER_MOVE(DataStream, 1);
			Length--;
     f52:	f1 08       	sbc	r15, r1
     f54:	08 94       	sec
     f56:	a1 1c       	adc	r10, r1
			BytesInTransfer++;
     f58:	b1 1c       	adc	r11, r1
     f5a:	e1 14       	cp	r14, r1
     f5c:	f1 04       	cpc	r15, r1
	{
		Length -= *BytesProcessed;
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
     f5e:	d9 f6       	brne	.-74     	; 0xf16 <Endpoint_Read_Stream_LE+0x3a>
     f60:	01 c0       	rjmp	.+2      	; 0xf64 <Endpoint_Read_Stream_LE+0x88>
     f62:	18 2f       	mov	r17, r24
     f64:	81 2f       	mov	r24, r17
			{
				*BytesProcessed += BytesInTransfer;
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
			}

			if ((ErrorCode = Endpoint_WaitUntilReady()))
     f66:	df 91       	pop	r29
			BytesInTransfer++;
		}
	}

	return ENDPOINT_RWSTREAM_NoError;
}
     f68:	cf 91       	pop	r28
     f6a:	1f 91       	pop	r17
     f6c:	ff 90       	pop	r15
     f6e:	ef 90       	pop	r14
     f70:	df 90       	pop	r13
     f72:	cf 90       	pop	r12
     f74:	bf 90       	pop	r11
     f76:	af 90       	pop	r10
     f78:	08 95       	ret

00000f7a <Endpoint_Write_Control_Stream_LE>:
     f7a:	20 91 6f 01 	lds	r18, 0x016F
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
     f7e:	30 91 70 01 	lds	r19, 0x0170
     f82:	26 17       	cp	r18, r22
     f84:	37 07       	cpc	r19, r23
     f86:	20 f4       	brcc	.+8      	; 0xf90 <Endpoint_Write_Control_Stream_LE+0x16>
     f88:	b9 01       	movw	r22, r18
     f8a:	fc 01       	movw	r30, r24
     f8c:	20 e0       	ldi	r18, 0x00	; 0
     f8e:	37 c0       	rjmp	.+110    	; 0xffe <Endpoint_Write_Control_Stream_LE+0x84>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
     f90:	61 15       	cp	r22, r1
     f92:	71 05       	cpc	r23, r1
     f94:	d1 f7       	brne	.-12     	; 0xf8a <Endpoint_Write_Control_Stream_LE+0x10>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     f96:	20 91 e8 00 	lds	r18, 0x00E8
     f9a:	2e 77       	andi	r18, 0x7E	; 126
     f9c:	20 93 e8 00 	sts	0x00E8, r18
     fa0:	f4 cf       	rjmp	.-24     	; 0xf8a <Endpoint_Write_Control_Stream_LE+0x10>
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     fa2:	80 91 68 01 	lds	r24, 0x0168

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     fa6:	88 23       	and	r24, r24
     fa8:	09 f4       	brne	.+2      	; 0xfac <Endpoint_Write_Control_Stream_LE+0x32>
     faa:	3f c0       	rjmp	.+126    	; 0x102a <Endpoint_Write_Control_Stream_LE+0xb0>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     fac:	85 30       	cpi	r24, 0x05	; 5
     fae:	c9 f1       	breq	.+114    	; 0x1022 <Endpoint_Write_Control_Stream_LE+0xa8>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     fb0:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
     fb4:	83 fd       	sbrc	r24, 3
     fb6:	37 c0       	rjmp	.+110    	; 0x1026 <Endpoint_Write_Control_Stream_LE+0xac>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     fb8:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
     fbc:	82 fd       	sbrc	r24, 2
     fbe:	2b c0       	rjmp	.+86     	; 0x1016 <Endpoint_Write_Control_Stream_LE+0x9c>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     fc0:	80 91 e8 00 	lds	r24, 0x00E8
		  break;

		if (Endpoint_IsINReady())
     fc4:	80 ff       	sbrs	r24, 0
     fc6:	1b c0       	rjmp	.+54     	; 0xffe <Endpoint_Write_Control_Stream_LE+0x84>
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
     fc8:	80 91 f2 00 	lds	r24, 0x00F2
     fcc:	90 91 f3 00 	lds	r25, 0x00F3
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
     fd0:	06 c0       	rjmp	.+12     	; 0xfde <Endpoint_Write_Control_Stream_LE+0x64>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
     fd2:	21 91       	ld	r18, Z+
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     fd4:	20 93 f1 00 	sts	0x00F1, r18
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
     fd8:	61 50       	subi	r22, 0x01	; 1
     fda:	70 40       	sbci	r23, 0x00	; 0
				BytesInEndpoint++;
     fdc:	01 96       	adiw	r24, 0x01	; 1

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
     fde:	61 15       	cp	r22, r1
     fe0:	71 05       	cpc	r23, r1
     fe2:	19 f0       	breq	.+6      	; 0xfea <Endpoint_Write_Control_Stream_LE+0x70>
     fe4:	88 30       	cpi	r24, 0x08	; 8
     fe6:	91 05       	cpc	r25, r1
     fe8:	a0 f3       	brcs	.-24     	; 0xfd2 <Endpoint_Write_Control_Stream_LE+0x58>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
     fea:	21 e0       	ldi	r18, 0x01	; 1
     fec:	88 30       	cpi	r24, 0x08	; 8
     fee:	91 05       	cpc	r25, r1
     ff0:	09 f0       	breq	.+2      	; 0xff4 <Endpoint_Write_Control_Stream_LE+0x7a>
     ff2:	20 e0       	ldi	r18, 0x00	; 0
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     ff4:	80 91 e8 00 	lds	r24, 0x00E8
     ff8:	8e 77       	andi	r24, 0x7E	; 126
     ffa:	80 93 e8 00 	sts	0x00E8, r24
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
     ffe:	61 15       	cp	r22, r1
    1000:	71 05       	cpc	r23, r1
    1002:	79 f6       	brne	.-98     	; 0xfa2 <Endpoint_Write_Control_Stream_LE+0x28>
    1004:	22 23       	and	r18, r18
    1006:	69 f6       	brne	.-102    	; 0xfa2 <Endpoint_Write_Control_Stream_LE+0x28>
    1008:	06 c0       	rjmp	.+12     	; 0x1016 <Endpoint_Write_Control_Stream_LE+0x9c>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    100a:	80 91 68 01 	lds	r24, 0x0168

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    100e:	88 23       	and	r24, r24
    1010:	61 f0       	breq	.+24     	; 0x102a <Endpoint_Write_Control_Stream_LE+0xb0>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    1012:	85 30       	cpi	r24, 0x05	; 5
    1014:	61 f0       	breq	.+24     	; 0x102e <Endpoint_Write_Control_Stream_LE+0xb4>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    1016:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
    101a:	82 ff       	sbrs	r24, 2
    101c:	f6 cf       	rjmp	.-20     	; 0x100a <Endpoint_Write_Control_Stream_LE+0x90>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
    101e:	80 e0       	ldi	r24, 0x00	; 0
    1020:	08 95       	ret
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
    1022:	83 e0       	ldi	r24, 0x03	; 3
    1024:	08 95       	ret
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
    1026:	81 e0       	ldi	r24, 0x01	; 1
    1028:	08 95       	ret
	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
    102a:	82 e0       	ldi	r24, 0x02	; 2
    102c:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
    102e:	83 e0       	ldi	r24, 0x03	; 3
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
    1030:	08 95       	ret

00001032 <Endpoint_Write_Control_PStream_LE>:
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
    1032:	20 91 6f 01 	lds	r18, 0x016F
    1036:	30 91 70 01 	lds	r19, 0x0170
    103a:	26 17       	cp	r18, r22
    103c:	37 07       	cpc	r19, r23
    103e:	20 f4       	brcc	.+8      	; 0x1048 <Endpoint_Write_Control_PStream_LE+0x16>
    1040:	b9 01       	movw	r22, r18
    1042:	fc 01       	movw	r30, r24
    1044:	20 e0       	ldi	r18, 0x00	; 0
    1046:	38 c0       	rjmp	.+112    	; 0x10b8 <Endpoint_Write_Control_PStream_LE+0x86>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
    1048:	61 15       	cp	r22, r1
    104a:	71 05       	cpc	r23, r1
    104c:	d1 f7       	brne	.-12     	; 0x1042 <Endpoint_Write_Control_PStream_LE+0x10>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    104e:	20 91 e8 00 	lds	r18, 0x00E8
    1052:	2e 77       	andi	r18, 0x7E	; 126
    1054:	20 93 e8 00 	sts	0x00E8, r18
    1058:	f4 cf       	rjmp	.-24     	; 0x1042 <Endpoint_Write_Control_PStream_LE+0x10>
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    105a:	80 91 68 01 	lds	r24, 0x0168

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    105e:	88 23       	and	r24, r24
    1060:	09 f4       	brne	.+2      	; 0x1064 <Endpoint_Write_Control_PStream_LE+0x32>
    1062:	40 c0       	rjmp	.+128    	; 0x10e4 <Endpoint_Write_Control_PStream_LE+0xb2>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    1064:	85 30       	cpi	r24, 0x05	; 5
    1066:	d1 f1       	breq	.+116    	; 0x10dc <Endpoint_Write_Control_PStream_LE+0xaa>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    1068:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    106c:	83 fd       	sbrc	r24, 3
    106e:	38 c0       	rjmp	.+112    	; 0x10e0 <Endpoint_Write_Control_PStream_LE+0xae>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    1070:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
    1074:	82 fd       	sbrc	r24, 2
    1076:	2c c0       	rjmp	.+88     	; 0x10d0 <Endpoint_Write_Control_PStream_LE+0x9e>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1078:	80 91 e8 00 	lds	r24, 0x00E8
		  break;

		if (Endpoint_IsINReady())
    107c:	80 ff       	sbrs	r24, 0
    107e:	1c c0       	rjmp	.+56     	; 0x10b8 <Endpoint_Write_Control_PStream_LE+0x86>
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
    1080:	80 91 f2 00 	lds	r24, 0x00F2
    1084:	90 91 f3 00 	lds	r25, 0x00F3
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
    1088:	07 c0       	rjmp	.+14     	; 0x1098 <Endpoint_Write_Control_PStream_LE+0x66>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
    108a:	24 91       	lpm	r18, Z
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    108c:	20 93 f1 00 	sts	0x00F1, r18
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
    1090:	31 96       	adiw	r30, 0x01	; 1
				Length--;
    1092:	61 50       	subi	r22, 0x01	; 1
    1094:	70 40       	sbci	r23, 0x00	; 0
				BytesInEndpoint++;
    1096:	01 96       	adiw	r24, 0x01	; 1

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
    1098:	61 15       	cp	r22, r1
    109a:	71 05       	cpc	r23, r1
    109c:	19 f0       	breq	.+6      	; 0x10a4 <Endpoint_Write_Control_PStream_LE+0x72>
    109e:	88 30       	cpi	r24, 0x08	; 8
    10a0:	91 05       	cpc	r25, r1
    10a2:	98 f3       	brcs	.-26     	; 0x108a <Endpoint_Write_Control_PStream_LE+0x58>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
    10a4:	21 e0       	ldi	r18, 0x01	; 1
    10a6:	88 30       	cpi	r24, 0x08	; 8
    10a8:	91 05       	cpc	r25, r1
    10aa:	09 f0       	breq	.+2      	; 0x10ae <Endpoint_Write_Control_PStream_LE+0x7c>
    10ac:	20 e0       	ldi	r18, 0x00	; 0
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    10ae:	80 91 e8 00 	lds	r24, 0x00E8
    10b2:	8e 77       	andi	r24, 0x7E	; 126
    10b4:	80 93 e8 00 	sts	0x00E8, r24
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
    10b8:	61 15       	cp	r22, r1
    10ba:	71 05       	cpc	r23, r1
    10bc:	71 f6       	brne	.-100    	; 0x105a <Endpoint_Write_Control_PStream_LE+0x28>
    10be:	22 23       	and	r18, r18
    10c0:	61 f6       	brne	.-104    	; 0x105a <Endpoint_Write_Control_PStream_LE+0x28>
    10c2:	06 c0       	rjmp	.+12     	; 0x10d0 <Endpoint_Write_Control_PStream_LE+0x9e>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    10c4:	80 91 68 01 	lds	r24, 0x0168

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    10c8:	88 23       	and	r24, r24
    10ca:	61 f0       	breq	.+24     	; 0x10e4 <Endpoint_Write_Control_PStream_LE+0xb2>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    10cc:	85 30       	cpi	r24, 0x05	; 5
    10ce:	61 f0       	breq	.+24     	; 0x10e8 <Endpoint_Write_Control_PStream_LE+0xb6>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    10d0:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
    10d4:	82 ff       	sbrs	r24, 2
    10d6:	f6 cf       	rjmp	.-20     	; 0x10c4 <Endpoint_Write_Control_PStream_LE+0x92>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
    10d8:	80 e0       	ldi	r24, 0x00	; 0
    10da:	08 95       	ret
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
    10dc:	83 e0       	ldi	r24, 0x03	; 3
    10de:	08 95       	ret
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
    10e0:	81 e0       	ldi	r24, 0x01	; 1
    10e2:	08 95       	ret
	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
    10e4:	82 e0       	ldi	r24, 0x02	; 2
    10e6:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
    10e8:	83 e0       	ldi	r24, 0x03	; 3
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
    10ea:	08 95       	ret

000010ec <Endpoint_ConfigureEndpoint_Prv>:
	UECFG0X = UECFG0XData;
	UECFG1X = UECFG1XData;

	return Endpoint_IsConfigured();
#else
	for (uint8_t EPNum = Number; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
    10ec:	98 2f       	mov	r25, r24
    10ee:	2a c0       	rjmp	.+84     	; 0x1144 <Endpoint_ConfigureEndpoint_Prv+0x58>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    10f0:	90 93 e9 00 	sts	0x00E9, r25
		uint8_t UECFG1XTemp;
		uint8_t UEIENXTemp;

		Endpoint_SelectEndpoint(EPNum);

		if (EPNum == Number)
    10f4:	98 17       	cp	r25, r24
    10f6:	39 f0       	breq	.+14     	; 0x1106 <Endpoint_ConfigureEndpoint_Prv+0x1a>
			UECFG1XTemp = UECFG1XData;
			UEIENXTemp  = 0;
		}
		else
		{
			UECFG0XTemp = UECFG0X;
    10f8:	70 91 ec 00 	lds	r23, 0x00EC
			UECFG1XTemp = UECFG1X;
    10fc:	20 91 ed 00 	lds	r18, 0x00ED
			UEIENXTemp  = UEIENX;
    1100:	50 91 f0 00 	lds	r21, 0x00F0
    1104:	03 c0       	rjmp	.+6      	; 0x110c <Endpoint_ConfigureEndpoint_Prv+0x20>
		Endpoint_SelectEndpoint(EPNum);

		if (EPNum == Number)
		{
			UECFG0XTemp = UECFG0XData;
			UECFG1XTemp = UECFG1XData;
    1106:	24 2f       	mov	r18, r20

		Endpoint_SelectEndpoint(EPNum);

		if (EPNum == Number)
		{
			UECFG0XTemp = UECFG0XData;
    1108:	76 2f       	mov	r23, r22
			UECFG1XTemp = UECFG1XData;
			UEIENXTemp  = 0;
    110a:	50 e0       	ldi	r21, 0x00	; 0
			UECFG0XTemp = UECFG0X;
			UECFG1XTemp = UECFG1X;
			UEIENXTemp  = UEIENX;
		}

		if (!(UECFG1XTemp & (1 << ALLOC)))
    110c:	21 ff       	sbrs	r18, 1
    110e:	19 c0       	rjmp	.+50     	; 0x1142 <Endpoint_ConfigureEndpoint_Prv+0x56>
			 *  to and from a host.
			 */
			static inline void Endpoint_DisableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_DisableEndpoint(void)
			{
				UECONX &= ~(1 << EPEN);
    1110:	30 91 eb 00 	lds	r19, 0x00EB
    1114:	3e 7f       	andi	r19, 0xFE	; 254
    1116:	30 93 eb 00 	sts	0x00EB, r19
		  continue;

		Endpoint_DisableEndpoint();
		UECFG1X &= ~(1 << ALLOC);
    111a:	30 91 ed 00 	lds	r19, 0x00ED
    111e:	3d 7f       	andi	r19, 0xFD	; 253
    1120:	30 93 ed 00 	sts	0x00ED, r19
			 *  \note Endpoints must first be configured properly via \ref Endpoint_ConfigureEndpoint().
			 */
			static inline void Endpoint_EnableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_EnableEndpoint(void)
			{
				UECONX |= (1 << EPEN);
    1124:	30 91 eb 00 	lds	r19, 0x00EB
    1128:	31 60       	ori	r19, 0x01	; 1
    112a:	30 93 eb 00 	sts	0x00EB, r19

		Endpoint_EnableEndpoint();
		UECFG0X = UECFG0XTemp;
    112e:	70 93 ec 00 	sts	0x00EC, r23
		UECFG1X = UECFG1XTemp;
    1132:	20 93 ed 00 	sts	0x00ED, r18
		UEIENX  = UEIENXTemp;
    1136:	50 93 f0 00 	sts	0x00F0, r21
			 *  \return Boolean \c true if the currently selected endpoint has been configured, \c false otherwise.
			 */
			static inline bool Endpoint_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsConfigured(void)
			{
				return ((UESTA0X & (1 << CFGOK)) ? true : false);
    113a:	20 91 ee 00 	lds	r18, 0x00EE

		if (!(Endpoint_IsConfigured()))
    113e:	27 ff       	sbrs	r18, 7
    1140:	08 c0       	rjmp	.+16     	; 0x1152 <Endpoint_ConfigureEndpoint_Prv+0x66>
	UECFG0X = UECFG0XData;
	UECFG1X = UECFG1XData;

	return Endpoint_IsConfigured();
#else
	for (uint8_t EPNum = Number; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
    1142:	9f 5f       	subi	r25, 0xFF	; 255
    1144:	97 30       	cpi	r25, 0x07	; 7
    1146:	a0 f2       	brcs	.-88     	; 0x10f0 <Endpoint_ConfigureEndpoint_Prv+0x4>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1148:	8f 70       	andi	r24, 0x0F	; 15
    114a:	80 93 e9 00 	sts	0x00E9, r24
		if (!(Endpoint_IsConfigured()))
		  return false;
	}

	Endpoint_SelectEndpoint(Number);
	return true;
    114e:	81 e0       	ldi	r24, 0x01	; 1
    1150:	08 95       	ret
		UECFG0X = UECFG0XTemp;
		UECFG1X = UECFG1XTemp;
		UEIENX  = UEIENXTemp;

		if (!(Endpoint_IsConfigured()))
		  return false;
    1152:	80 e0       	ldi	r24, 0x00	; 0
	}

	Endpoint_SelectEndpoint(Number);
	return true;
#endif
}
    1154:	08 95       	ret

00001156 <Endpoint_ClearStatusStage>:
	}
}

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
    1156:	80 91 69 01 	lds	r24, 0x0169
    115a:	87 ff       	sbrs	r24, 7
    115c:	13 c0       	rjmp	.+38     	; 0x1184 <Endpoint_ClearStatusStage+0x2e>
    115e:	04 c0       	rjmp	.+8      	; 0x1168 <Endpoint_ClearStatusStage+0x12>
	{
		while (!(Endpoint_IsOUTReceived()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
    1160:	80 91 68 01 	lds	r24, 0x0168
    1164:	88 23       	and	r24, r24
    1166:	b9 f0       	breq	.+46     	; 0x1196 <Endpoint_ClearStatusStage+0x40>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    1168:	80 91 e8 00 	lds	r24, 0x00E8

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
	{
		while (!(Endpoint_IsOUTReceived()))
    116c:	82 ff       	sbrs	r24, 2
    116e:	f8 cf       	rjmp	.-16     	; 0x1160 <Endpoint_ClearStatusStage+0xa>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    1170:	80 91 e8 00 	lds	r24, 0x00E8
    1174:	8b 77       	andi	r24, 0x7B	; 123
    1176:	80 93 e8 00 	sts	0x00E8, r24
    117a:	08 95       	ret
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
    117c:	80 91 68 01 	lds	r24, 0x0168
    1180:	88 23       	and	r24, r24
    1182:	49 f0       	breq	.+18     	; 0x1196 <Endpoint_ClearStatusStage+0x40>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1184:	80 91 e8 00 	lds	r24, 0x00E8

		Endpoint_ClearOUT();
	}
	else
	{
		while (!(Endpoint_IsINReady()))
    1188:	80 ff       	sbrs	r24, 0
    118a:	f8 cf       	rjmp	.-16     	; 0x117c <Endpoint_ClearStatusStage+0x26>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    118c:	80 91 e8 00 	lds	r24, 0x00E8
    1190:	8e 77       	andi	r24, 0x7E	; 126
    1192:	80 93 e8 00 	sts	0x00E8, r24
    1196:	08 95       	ret

00001198 <Endpoint_WaitUntilReady>:
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
    1198:	80 91 e4 00 	lds	r24, 0x00E4
    119c:	90 91 e5 00 	lds	r25, 0x00E5
    11a0:	45 e6       	ldi	r20, 0x65	; 101
    11a2:	01 c0       	rjmp	.+2      	; 0x11a6 <Endpoint_WaitUntilReady+0xe>
    11a4:	c9 01       	movw	r24, r18
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    11a6:	20 91 ec 00 	lds	r18, 0x00EC
    11aa:	20 ff       	sbrs	r18, 0
    11ac:	23 c0       	rjmp	.+70     	; 0x11f4 <Endpoint_WaitUntilReady+0x5c>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    11ae:	20 91 e8 00 	lds	r18, 0x00E8

	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
    11b2:	20 fd       	sbrc	r18, 0
    11b4:	15 c0       	rjmp	.+42     	; 0x11e0 <Endpoint_WaitUntilReady+0x48>
		{
			if (Endpoint_IsOUTReceived())
			  return ENDPOINT_READYWAIT_NoError;
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    11b6:	20 91 68 01 	lds	r18, 0x0168

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    11ba:	22 23       	and	r18, r18
    11bc:	99 f0       	breq	.+38     	; 0x11e4 <Endpoint_WaitUntilReady+0x4c>
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    11be:	25 30       	cpi	r18, 0x05	; 5
    11c0:	99 f0       	breq	.+38     	; 0x11e8 <Endpoint_WaitUntilReady+0x50>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    11c2:	20 91 eb 00 	lds	r18, 0x00EB
		  return ENDPOINT_READYWAIT_BusSuspended;
		else if (Endpoint_IsStalled())
    11c6:	25 fd       	sbrc	r18, 5
    11c8:	11 c0       	rjmp	.+34     	; 0x11ec <Endpoint_WaitUntilReady+0x54>
    11ca:	20 91 e4 00 	lds	r18, 0x00E4
    11ce:	30 91 e5 00 	lds	r19, 0x00E5
		  return ENDPOINT_READYWAIT_EndpointStalled;

		uint16_t CurrentFrameNumber = USB_Device_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
    11d2:	28 17       	cp	r18, r24
    11d4:	39 07       	cpc	r19, r25
    11d6:	39 f3       	breq	.-50     	; 0x11a6 <Endpoint_WaitUntilReady+0xe>
    11d8:	41 50       	subi	r20, 0x01	; 1
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
    11da:	21 f7       	brne	.-56     	; 0x11a4 <Endpoint_WaitUntilReady+0xc>
			  return ENDPOINT_READYWAIT_Timeout;
    11dc:	84 e0       	ldi	r24, 0x04	; 4
    11de:	08 95       	ret
	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
    11e0:	80 e0       	ldi	r24, 0x00	; 0
    11e2:	08 95       	ret
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
    11e4:	82 e0       	ldi	r24, 0x02	; 2
    11e6:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_READYWAIT_BusSuspended;
    11e8:	83 e0       	ldi	r24, 0x03	; 3
    11ea:	08 95       	ret
		else if (Endpoint_IsStalled())
		  return ENDPOINT_READYWAIT_EndpointStalled;
    11ec:	81 e0       	ldi	r24, 0x01	; 1
    11ee:	08 95       	ret
			  return ENDPOINT_READYWAIT_NoError;
		}
		else
		{
			if (Endpoint_IsOUTReceived())
			  return ENDPOINT_READYWAIT_NoError;
    11f0:	80 e0       	ldi	r24, 0x00	; 0

			if (!(TimeoutMSRem--))
			  return ENDPOINT_READYWAIT_Timeout;
		}
	}
}
    11f2:	08 95       	ret
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    11f4:	20 91 e8 00 	lds	r18, 0x00E8
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
		}
		else
		{
			if (Endpoint_IsOUTReceived())
    11f8:	22 ff       	sbrs	r18, 2
    11fa:	dd cf       	rjmp	.-70     	; 0x11b6 <Endpoint_WaitUntilReady+0x1e>
    11fc:	f9 cf       	rjmp	.-14     	; 0x11f0 <Endpoint_WaitUntilReady+0x58>

000011fe <USB_ResetInterface>:

	USB_IsInitialized = false;
}

void USB_ResetInterface(void)
{
    11fe:	0f 93       	push	r16
    1200:	1f 93       	push	r17
    1202:	cf 93       	push	r28
    1204:	df 93       	push	r29
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
    1206:	4e d0       	rcall	.+156    	; 0x12a4 <USB_INT_DisableAllInterrupts>
    1208:	55 d0       	rcall	.+170    	; 0x12b4 <USB_INT_ClearAllInterrupts>
	USB_INT_ClearAllInterrupts();
    120a:	c8 ed       	ldi	r28, 0xD8	; 216
    120c:	d0 e0       	ldi	r29, 0x00	; 0
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
    120e:	88 81       	ld	r24, Y
    1210:	8f 77       	andi	r24, 0x7F	; 127
    1212:	88 83       	st	Y, r24
    1214:	88 81       	ld	r24, Y
    1216:	80 68       	ori	r24, 0x80	; 128
				USBCON |=  (1 << USBE);
    1218:	88 83       	st	Y, r24
    121a:	88 81       	ld	r24, Y
    121c:	8f 7d       	andi	r24, 0xDF	; 223
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
    121e:	88 83       	st	Y, r24
    1220:	e7 ed       	ldi	r30, 0xD7	; 215
    1222:	f0 e0       	ldi	r31, 0x00	; 0

	if (USB_CurrentMode == USB_MODE_Device)
	{
		#if defined(USB_CAN_BE_DEVICE)
		#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
		UHWCON |=  (1 << UIMOD);
    1224:	80 81       	ld	r24, Z
    1226:	80 68       	ori	r24, 0x80	; 128
    1228:	80 83       	st	Z, r24
    122a:	19 bc       	out	0x29, r1	; 41
    122c:	10 92 68 01 	sts	0x0168, r1
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState                 = DEVICE_STATE_Unattached;
    1230:	10 92 64 01 	sts	0x0164, r1
	USB_Device_ConfigurationNumber  = 0;
    1234:	10 92 66 01 	sts	0x0166, r1

	#if !defined(NO_DEVICE_REMOTE_WAKEUP)
	USB_Device_RemoteWakeupEnabled  = false;
    1238:	10 92 65 01 	sts	0x0165, r1
	#endif

	#if !defined(NO_DEVICE_SELF_POWER)
	USB_Device_CurrentlySelfPowered = false;
    123c:	00 ee       	ldi	r16, 0xE0	; 224
    123e:	10 e0       	ldi	r17, 0x00	; 0
			}

			static inline void USB_Device_SetFullSpeed(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetFullSpeed(void)
			{
				UDCON &= ~(1 << LSM);
    1240:	f8 01       	movw	r30, r16
    1242:	80 81       	ld	r24, Z
    1244:	8b 7f       	andi	r24, 0xFB	; 251
    1246:	80 83       	st	Z, r24
    1248:	88 81       	ld	r24, Y
    124a:	81 60       	ori	r24, 0x01	; 1
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBCON |= (1 << VBUSTE);
    124c:	88 83       	st	Y, r24
    124e:	80 e0       	ldi	r24, 0x00	; 0
    1250:	60 e0       	ldi	r22, 0x00	; 0
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
    1252:	42 e0       	ldi	r20, 0x02	; 2
    1254:	4b df       	rcall	.-362    	; 0x10ec <Endpoint_ConfigureEndpoint_Prv>
    1256:	e1 ee       	ldi	r30, 0xE1	; 225
    1258:	f0 e0       	ldi	r31, 0x00	; 0
    125a:	80 81       	ld	r24, Z
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
    125c:	8e 7f       	andi	r24, 0xFE	; 254
    125e:	80 83       	st	Z, r24
    1260:	e2 ee       	ldi	r30, 0xE2	; 226
    1262:	f0 e0       	ldi	r31, 0x00	; 0
    1264:	80 81       	ld	r24, Z
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
    1266:	81 60       	ori	r24, 0x01	; 1
    1268:	80 83       	st	Z, r24
    126a:	80 81       	ld	r24, Z
    126c:	88 60       	ori	r24, 0x08	; 8
    126e:	80 83       	st	Z, r24
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
    1270:	f8 01       	movw	r30, r16
    1272:	80 81       	ld	r24, Z
    1274:	8e 7f       	andi	r24, 0xFE	; 254
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
    1276:	80 83       	st	Z, r24
    1278:	88 81       	ld	r24, Y
    127a:	80 61       	ori	r24, 0x10	; 16
    127c:	88 83       	st	Y, r24

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON |=  (1 << OTGPADE);
    127e:	df 91       	pop	r29
    1280:	cf 91       	pop	r28
    1282:	1f 91       	pop	r17
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
    1284:	0f 91       	pop	r16
    1286:	08 95       	ret

00001288 <USB_Init>:
    1288:	e8 ed       	ldi	r30, 0xD8	; 216
    128a:	f0 e0       	ldi	r31, 0x00	; 0
    128c:	80 81       	ld	r24, Z
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON &= ~(1 << OTGPADE);
    128e:	8f 7e       	andi	r24, 0xEF	; 239
    1290:	80 83       	st	Z, r24

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON |=  (1 << UVREGE);
    1292:	e7 ed       	ldi	r30, 0xD7	; 215
    1294:	f0 e0       	ldi	r31, 0x00	; 0
    1296:	80 81       	ld	r24, Z
    1298:	81 60       	ori	r24, 0x01	; 1
    129a:	80 83       	st	Z, r24
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
    129c:	81 e0       	ldi	r24, 0x01	; 1
    129e:	80 93 67 01 	sts	0x0167, r24

	USB_ResetInterface();
    12a2:	ad cf       	rjmp	.-166    	; 0x11fe <USB_ResetInterface>

000012a4 <USB_INT_DisableAllInterrupts>:
#include "../USBInterrupt.h"

void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
    12a4:	e8 ed       	ldi	r30, 0xD8	; 216
    12a6:	f0 e0       	ldi	r31, 0x00	; 0
    12a8:	80 81       	ld	r24, Z
    12aa:	8c 7f       	andi	r24, 0xFC	; 252
    12ac:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
    12ae:	10 92 e2 00 	sts	0x00E2, r1
	#endif
}
    12b2:	08 95       	ret

000012b4 <USB_INT_ClearAllInterrupts>:

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
    12b4:	10 92 da 00 	sts	0x00DA, r1
	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
    12b8:	10 92 e1 00 	sts	0x00E1, r1
	#endif
}
    12bc:	08 95       	ret

000012be <__vector_10>:

ISR(USB_GEN_vect, ISR_BLOCK)
{
    12be:	1f 92       	push	r1
    12c0:	0f 92       	push	r0
    12c2:	0f b6       	in	r0, 0x3f	; 63
    12c4:	0f 92       	push	r0
    12c6:	0b b6       	in	r0, 0x3b	; 59
    12c8:	0f 92       	push	r0
    12ca:	11 24       	eor	r1, r1
    12cc:	2f 93       	push	r18
    12ce:	3f 93       	push	r19
    12d0:	4f 93       	push	r20
    12d2:	5f 93       	push	r21
    12d4:	6f 93       	push	r22
    12d6:	7f 93       	push	r23
    12d8:	8f 93       	push	r24
    12da:	9f 93       	push	r25
    12dc:	af 93       	push	r26
    12de:	bf 93       	push	r27
    12e0:	ef 93       	push	r30
    12e2:	ff 93       	push	r31
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
					case USB_INT_SOFI:
						return (UDINT  & (1 << SOFI));
    12e4:	80 91 e1 00 	lds	r24, 0x00E1
	#if defined(USB_CAN_BE_DEVICE)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
    12e8:	82 ff       	sbrs	r24, 2
    12ea:	0a c0       	rjmp	.+20     	; 0x1300 <__vector_10+0x42>
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
					case USB_INT_SOFI:
						return (UDIEN  & (1 << SOFE));
    12ec:	80 91 e2 00 	lds	r24, 0x00E2
    12f0:	82 ff       	sbrs	r24, 2
    12f2:	06 c0       	rjmp	.+12     	; 0x1300 <__vector_10+0x42>
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
						break;
					case USB_INT_SOFI:
						UDINT  &= ~(1 << SOFI);
    12f4:	80 91 e1 00 	lds	r24, 0x00E1
    12f8:	8b 7f       	andi	r24, 0xFB	; 251
    12fa:	80 93 e1 00 	sts	0x00E1, r24
	{
		USB_INT_Clear(USB_INT_SOFI);

		EVENT_USB_Device_StartOfFrame();
    12fe:	56 d2       	rcall	.+1196   	; 0x17ac <USB_Event_Stub>
    1300:	80 91 da 00 	lds	r24, 0x00DA
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBINT & (1 << VBUSTI));
    1304:	80 ff       	sbrs	r24, 0
	}
	#endif

	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	if (USB_INT_HasOccurred(USB_INT_VBUSTI) && USB_INT_IsEnabled(USB_INT_VBUSTI))
    1306:	1f c0       	rjmp	.+62     	; 0x1346 <__vector_10+0x88>
    1308:	80 91 d8 00 	lds	r24, 0x00D8
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBCON & (1 << VBUSTE));
    130c:	80 ff       	sbrs	r24, 0
    130e:	1b c0       	rjmp	.+54     	; 0x1346 <__vector_10+0x88>
    1310:	80 91 da 00 	lds	r24, 0x00DA
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBINT &= ~(1 << VBUSTI);
    1314:	8e 7f       	andi	r24, 0xFE	; 254
    1316:	80 93 da 00 	sts	0x00DA, r24
    131a:	80 91 d9 00 	lds	r24, 0x00D9
				 *  \return Boolean \c true if the VBUS line is currently detecting power from a host, \c false otherwise.
				 */
				static inline bool USB_VBUS_GetStatus(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
				static inline bool USB_VBUS_GetStatus(void)
				{
					return ((USBSTA & (1 << VBUS)) ? true : false);
    131e:	80 ff       	sbrs	r24, 0
	{
		USB_INT_Clear(USB_INT_VBUSTI);

		if (USB_VBUS_GetStatus())
    1320:	0d c0       	rjmp	.+26     	; 0x133c <__vector_10+0x7e>
    1322:	8c e0       	ldi	r24, 0x0C	; 12

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
    1324:	89 bd       	out	0x29, r24	; 41
    1326:	8e e0       	ldi	r24, 0x0E	; 14
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    1328:	89 bd       	out	0x29, r24	; 41
    132a:	09 b4       	in	r0, 0x29	; 41
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			{
				USB_PLL_On();
				while (!(USB_PLL_IsReady()));
    132c:	00 fe       	sbrs	r0, 0
    132e:	fd cf       	rjmp	.-6      	; 0x132a <__vector_10+0x6c>
    1330:	81 e0       	ldi	r24, 0x01	; 1
			}

			USB_DeviceState = DEVICE_STATE_Powered;
    1332:	80 93 68 01 	sts	0x0168, r24
    1336:	0e 94 e7 00 	call	0x1ce	; 0x1ce <EVENT_USB_Device_Connect>
			EVENT_USB_Device_Connect();
    133a:	05 c0       	rjmp	.+10     	; 0x1346 <__vector_10+0x88>
    133c:	19 bc       	out	0x29, r1	; 41
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    133e:	10 92 68 01 	sts	0x0168, r1
		else
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			  USB_PLL_Off();

			USB_DeviceState = DEVICE_STATE_Unattached;
    1342:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <EVENT_USB_Device_Disconnect>
			EVENT_USB_Device_Disconnect();
    1346:	80 91 e1 00 	lds	r24, 0x00E1
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
    134a:	80 ff       	sbrs	r24, 0
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
    134c:	18 c0       	rjmp	.+48     	; 0x137e <__vector_10+0xc0>
    134e:	80 91 e2 00 	lds	r24, 0x00E2
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
    1352:	80 ff       	sbrs	r24, 0
    1354:	14 c0       	rjmp	.+40     	; 0x137e <__vector_10+0xc0>
    1356:	80 91 e2 00 	lds	r24, 0x00E2
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
    135a:	8e 7f       	andi	r24, 0xFE	; 254
    135c:	80 93 e2 00 	sts	0x00E2, r24
    1360:	80 91 e2 00 	lds	r24, 0x00E2
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
    1364:	80 61       	ori	r24, 0x10	; 16
    1366:	80 93 e2 00 	sts	0x00E2, r24
    136a:	80 91 d8 00 	lds	r24, 0x00D8
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON |=  (1 << FRZCLK);
    136e:	80 62       	ori	r24, 0x20	; 32
    1370:	80 93 d8 00 	sts	0x00D8, r24
    1374:	19 bc       	out	0x29, r1	; 41
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    1376:	85 e0       	ldi	r24, 0x05	; 5

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
		EVENT_USB_Device_Disconnect();
		#else
		USB_DeviceState = DEVICE_STATE_Suspended;
    1378:	80 93 68 01 	sts	0x0168, r24
    137c:	17 d2       	rcall	.+1070   	; 0x17ac <USB_Event_Stub>
		EVENT_USB_Device_Suspend();
    137e:	80 91 e1 00 	lds	r24, 0x00E1
					case USB_INT_IDTI:
						return (USBINT & (1 << IDTI));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
    1382:	84 ff       	sbrs	r24, 4
    1384:	2d c0       	rjmp	.+90     	; 0x13e0 <__vector_10+0x122>
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
    1386:	80 91 e2 00 	lds	r24, 0x00E2
					case USB_INT_IDTI:
						return (USBCON & (1 << IDTE));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
    138a:	84 ff       	sbrs	r24, 4
    138c:	29 c0       	rjmp	.+82     	; 0x13e0 <__vector_10+0x122>
    138e:	8c e0       	ldi	r24, 0x0C	; 12
    1390:	89 bd       	out	0x29, r24	; 41

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
    1392:	8e e0       	ldi	r24, 0x0E	; 14
    1394:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    1396:	09 b4       	in	r0, 0x29	; 41
    1398:	00 fe       	sbrs	r0, 0
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
    139a:	fd cf       	rjmp	.-6      	; 0x1396 <__vector_10+0xd8>
    139c:	80 91 d8 00 	lds	r24, 0x00D8
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
    13a0:	8f 7d       	andi	r24, 0xDF	; 223
    13a2:	80 93 d8 00 	sts	0x00D8, r24
    13a6:	80 91 e1 00 	lds	r24, 0x00E1
						USBINT &= ~(1 << IDTI);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
    13aa:	8f 7e       	andi	r24, 0xEF	; 239
    13ac:	80 93 e1 00 	sts	0x00E1, r24
    13b0:	80 91 e2 00 	lds	r24, 0x00E2
						USBCON &= ~(1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
    13b4:	8f 7e       	andi	r24, 0xEF	; 239
    13b6:	80 93 e2 00 	sts	0x00E2, r24
    13ba:	80 91 e2 00 	lds	r24, 0x00E2
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
    13be:	81 60       	ori	r24, 0x01	; 1
    13c0:	80 93 e2 00 	sts	0x00E2, r24
    13c4:	80 91 64 01 	lds	r24, 0x0164
		USB_INT_Clear(USB_INT_WAKEUPI);

		USB_INT_Disable(USB_INT_WAKEUPI);
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_Device_ConfigurationNumber)
    13c8:	88 23       	and	r24, r24
    13ca:	21 f4       	brne	.+8      	; 0x13d4 <__vector_10+0x116>
    13cc:	80 91 e3 00 	lds	r24, 0x00E3
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
    13d0:	87 ff       	sbrs	r24, 7
    13d2:	02 c0       	rjmp	.+4      	; 0x13d8 <__vector_10+0x11a>
		  USB_DeviceState = DEVICE_STATE_Configured;
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
    13d4:	84 e0       	ldi	r24, 0x04	; 4
    13d6:	01 c0       	rjmp	.+2      	; 0x13da <__vector_10+0x11c>
    13d8:	81 e0       	ldi	r24, 0x01	; 1
    13da:	80 93 68 01 	sts	0x0168, r24
    13de:	e6 d1       	rcall	.+972    	; 0x17ac <USB_Event_Stub>
    13e0:	80 91 e1 00 	lds	r24, 0x00E1

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
		#else
		EVENT_USB_Device_WakeUp();
    13e4:	83 ff       	sbrs	r24, 3
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
    13e6:	27 c0       	rjmp	.+78     	; 0x1436 <__vector_10+0x178>
    13e8:	80 91 e2 00 	lds	r24, 0x00E2
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
    13ec:	83 ff       	sbrs	r24, 3
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
    13ee:	23 c0       	rjmp	.+70     	; 0x1436 <__vector_10+0x178>
    13f0:	80 91 e1 00 	lds	r24, 0x00E1
    13f4:	87 7f       	andi	r24, 0xF7	; 247
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
    13f6:	80 93 e1 00 	sts	0x00E1, r24
    13fa:	82 e0       	ldi	r24, 0x02	; 2
    13fc:	80 93 68 01 	sts	0x0168, r24
	{
		USB_INT_Clear(USB_INT_EORSTI);

		USB_DeviceState                = DEVICE_STATE_Default;
    1400:	10 92 64 01 	sts	0x0164, r1
    1404:	80 91 e1 00 	lds	r24, 0x00E1
		USB_Device_ConfigurationNumber = 0;
    1408:	8e 7f       	andi	r24, 0xFE	; 254
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
    140a:	80 93 e1 00 	sts	0x00E1, r24
    140e:	80 91 e2 00 	lds	r24, 0x00E2
    1412:	8e 7f       	andi	r24, 0xFE	; 254
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
    1414:	80 93 e2 00 	sts	0x00E2, r24
    1418:	80 91 e2 00 	lds	r24, 0x00E2
    141c:	80 61       	ori	r24, 0x10	; 16
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
    141e:	80 93 e2 00 	sts	0x00E2, r24
    1422:	80 e0       	ldi	r24, 0x00	; 0
    1424:	60 e0       	ldi	r22, 0x00	; 0
    1426:	42 e0       	ldi	r20, 0x02	; 2
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
    1428:	61 de       	rcall	.-830    	; 0x10ec <Endpoint_ConfigureEndpoint_Prv>
    142a:	80 91 f0 00 	lds	r24, 0x00F0
    142e:	88 60       	ori	r24, 0x08	; 8
    1430:	80 93 f0 00 	sts	0x00F0, r24
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX |= (1 << RXSTPE);
    1434:	bb d1       	rcall	.+886    	; 0x17ac <USB_Event_Stub>
    1436:	ff 91       	pop	r31
    1438:	ef 91       	pop	r30
    143a:	bf 91       	pop	r27

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
    143c:	af 91       	pop	r26
    143e:	9f 91       	pop	r25
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
    1440:	8f 91       	pop	r24
    1442:	7f 91       	pop	r23
    1444:	6f 91       	pop	r22
    1446:	5f 91       	pop	r21
    1448:	4f 91       	pop	r20
    144a:	3f 91       	pop	r19
    144c:	2f 91       	pop	r18
    144e:	0f 90       	pop	r0
    1450:	0b be       	out	0x3b, r0	; 59
    1452:	0f 90       	pop	r0
    1454:	0f be       	out	0x3f, r0	; 63
    1456:	0f 90       	pop	r0
    1458:	1f 90       	pop	r1
    145a:	18 95       	reti

0000145c <__vector_11>:
    145c:	1f 92       	push	r1
    145e:	0f 92       	push	r0
    1460:	0f b6       	in	r0, 0x3f	; 63
    1462:	0f 92       	push	r0
    1464:	0b b6       	in	r0, 0x3b	; 59

#if defined(INTERRUPT_CONTROL_ENDPOINT) && defined(USB_CAN_BE_DEVICE)
ISR(USB_COM_vect, ISR_BLOCK)
{
    1466:	0f 92       	push	r0
    1468:	11 24       	eor	r1, r1
    146a:	2f 93       	push	r18
    146c:	3f 93       	push	r19
    146e:	4f 93       	push	r20
    1470:	5f 93       	push	r21
    1472:	6f 93       	push	r22
    1474:	7f 93       	push	r23
    1476:	8f 93       	push	r24
    1478:	9f 93       	push	r25
    147a:	af 93       	push	r26
    147c:	bf 93       	push	r27
    147e:	cf 93       	push	r28
    1480:	ef 93       	push	r30
    1482:	ff 93       	push	r31
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    1484:	c0 91 e9 00 	lds	r28, 0x00E9
    1488:	cf 70       	andi	r28, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    148a:	80 91 ec 00 	lds	r24, 0x00EC
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    148e:	10 92 e9 00 	sts	0x00E9, r1
						break;
					case USB_INT_SOFI:
						UDIEN  &= ~(1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX &= ~(1 << RXSTPE);
    1492:	80 91 f0 00 	lds	r24, 0x00F0
    1496:	87 7f       	andi	r24, 0xF7	; 247
    1498:	80 93 f0 00 	sts	0x00F0, r24
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				sei();
    149c:	78 94       	sei
	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Disable(USB_INT_RXSTPI);

	GlobalInterruptEnable();

	USB_Device_ProcessControlRequest();
    149e:	1d d0       	rcall	.+58     	; 0x14da <USB_Device_ProcessControlRequest>
    14a0:	10 92 e9 00 	sts	0x00E9, r1
    14a4:	80 91 f0 00 	lds	r24, 0x00F0
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX |= (1 << RXSTPE);
    14a8:	88 60       	ori	r24, 0x08	; 8
    14aa:	80 93 f0 00 	sts	0x00F0, r24
    14ae:	c0 93 e9 00 	sts	0x00E9, r28
    14b2:	ff 91       	pop	r31

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Enable(USB_INT_RXSTPI);
	Endpoint_SelectEndpoint(PrevSelectedEndpoint);
}
    14b4:	ef 91       	pop	r30
    14b6:	cf 91       	pop	r28
    14b8:	bf 91       	pop	r27
    14ba:	af 91       	pop	r26
    14bc:	9f 91       	pop	r25
    14be:	8f 91       	pop	r24
    14c0:	7f 91       	pop	r23
    14c2:	6f 91       	pop	r22
    14c4:	5f 91       	pop	r21
    14c6:	4f 91       	pop	r20
    14c8:	3f 91       	pop	r19
    14ca:	2f 91       	pop	r18
    14cc:	0f 90       	pop	r0
    14ce:	0b be       	out	0x3b, r0	; 59
    14d0:	0f 90       	pop	r0
    14d2:	0f be       	out	0x3f, r0	; 63
    14d4:	0f 90       	pop	r0
    14d6:	1f 90       	pop	r1
    14d8:	18 95       	reti

000014da <USB_Device_ProcessControlRequest>:
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_Device_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
    14da:	1f 93       	push	r17
    14dc:	cf 93       	push	r28
    14de:	df 93       	push	r29
    14e0:	cd b7       	in	r28, 0x3d	; 61
    14e2:	de b7       	in	r29, 0x3e	; 62
    14e4:	ac 97       	sbiw	r28, 0x2c	; 44
    14e6:	0f b6       	in	r0, 0x3f	; 63
    14e8:	f8 94       	cli
    14ea:	de bf       	out	0x3e, r29	; 62
    14ec:	0f be       	out	0x3f, r0	; 63
    14ee:	cd bf       	out	0x3d, r28	; 61
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
    14f0:	80 e0       	ldi	r24, 0x00	; 0
	USB_ControlRequest.bRequest      = Endpoint_Read_8();
	USB_ControlRequest.wValue        = Endpoint_Read_16_LE();
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;
    14f2:	e9 e6       	ldi	r30, 0x69	; 105
    14f4:	f1 e0       	ldi	r31, 0x01	; 1
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    14f6:	90 91 f1 00 	lds	r25, 0x00F1

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_8();
    14fa:	91 93       	st	Z+, r25
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
    14fc:	8f 5f       	subi	r24, 0xFF	; 255
    14fe:	88 30       	cpi	r24, 0x08	; 8
    1500:	d1 f7       	brne	.-12     	; 0x14f6 <USB_Device_ProcessControlRequest+0x1c>
	  *(RequestHeader++) = Endpoint_Read_8();
	#endif

	EVENT_USB_Device_ControlRequest();
    1502:	0e 94 07 01 	call	0x20e	; 0x20e <EVENT_USB_Device_ControlRequest>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    1506:	80 91 e8 00 	lds	r24, 0x00E8

	if (Endpoint_IsSETUPReceived())
    150a:	83 ff       	sbrs	r24, 3
    150c:	37 c1       	rjmp	.+622    	; 0x177c <USB_Device_ProcessControlRequest+0x2a2>
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
    150e:	80 91 69 01 	lds	r24, 0x0169

		switch (USB_ControlRequest.bRequest)
    1512:	20 91 6a 01 	lds	r18, 0x016A
    1516:	25 30       	cpi	r18, 0x05	; 5
    1518:	09 f4       	brne	.+2      	; 0x151c <USB_Device_ProcessControlRequest+0x42>
    151a:	84 c0       	rjmp	.+264    	; 0x1624 <USB_Device_ProcessControlRequest+0x14a>
    151c:	26 30       	cpi	r18, 0x06	; 6
    151e:	40 f4       	brcc	.+16     	; 0x1530 <USB_Device_ProcessControlRequest+0x56>
    1520:	21 30       	cpi	r18, 0x01	; 1
    1522:	a1 f1       	breq	.+104    	; 0x158c <USB_Device_ProcessControlRequest+0xb2>
    1524:	21 30       	cpi	r18, 0x01	; 1
    1526:	70 f0       	brcs	.+28     	; 0x1544 <USB_Device_ProcessControlRequest+0x6a>
    1528:	23 30       	cpi	r18, 0x03	; 3
    152a:	09 f0       	breq	.+2      	; 0x152e <USB_Device_ProcessControlRequest+0x54>
    152c:	27 c1       	rjmp	.+590    	; 0x177c <USB_Device_ProcessControlRequest+0x2a2>
    152e:	2e c0       	rjmp	.+92     	; 0x158c <USB_Device_ProcessControlRequest+0xb2>
    1530:	28 30       	cpi	r18, 0x08	; 8
    1532:	09 f4       	brne	.+2      	; 0x1536 <USB_Device_ProcessControlRequest+0x5c>
    1534:	f4 c0       	rjmp	.+488    	; 0x171e <USB_Device_ProcessControlRequest+0x244>
    1536:	29 30       	cpi	r18, 0x09	; 9
    1538:	09 f4       	brne	.+2      	; 0x153c <USB_Device_ProcessControlRequest+0x62>
    153a:	03 c1       	rjmp	.+518    	; 0x1742 <USB_Device_ProcessControlRequest+0x268>
    153c:	26 30       	cpi	r18, 0x06	; 6
    153e:	09 f0       	breq	.+2      	; 0x1542 <USB_Device_ProcessControlRequest+0x68>
    1540:	1d c1       	rjmp	.+570    	; 0x177c <USB_Device_ProcessControlRequest+0x2a2>
    1542:	93 c0       	rjmp	.+294    	; 0x166a <USB_Device_ProcessControlRequest+0x190>
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    1544:	80 38       	cpi	r24, 0x80	; 128
    1546:	21 f0       	breq	.+8      	; 0x1550 <USB_Device_ProcessControlRequest+0x76>
    1548:	82 38       	cpi	r24, 0x82	; 130
    154a:	09 f0       	breq	.+2      	; 0x154e <USB_Device_ProcessControlRequest+0x74>
    154c:	17 c1       	rjmp	.+558    	; 0x177c <USB_Device_ProcessControlRequest+0x2a2>
    154e:	08 c0       	rjmp	.+16     	; 0x1560 <USB_Device_ProcessControlRequest+0x86>
	Endpoint_ClearOUT();
}

static void USB_Device_GetStatus(void)
{
	uint8_t CurrentStatus = 0;
    1550:	80 91 65 01 	lds	r24, 0x0165
			if (USB_Device_CurrentlySelfPowered)
			  CurrentStatus |= FEATURE_SELFPOWERED_ENABLED;
			#endif

			#if !defined(NO_DEVICE_REMOTE_WAKEUP)
			if (USB_Device_RemoteWakeupEnabled)
    1554:	90 91 66 01 	lds	r25, 0x0166
    1558:	99 23       	and	r25, r25
    155a:	71 f0       	breq	.+28     	; 0x1578 <USB_Device_ProcessControlRequest+0x9e>
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
    155c:	82 60       	ori	r24, 0x02	; 2
    155e:	0c c0       	rjmp	.+24     	; 0x1578 <USB_Device_ProcessControlRequest+0x9e>
			#endif
			break;
		case (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_ENDPOINT):
			#if !defined(CONTROL_ONLY_DEVICE)
			Endpoint_SelectEndpoint((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
    1560:	80 91 6d 01 	lds	r24, 0x016D
    1564:	8f 70       	andi	r24, 0x0F	; 15
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1566:	80 93 e9 00 	sts	0x00E9, r24
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    156a:	90 91 eb 00 	lds	r25, 0x00EB

			CurrentStatus = Endpoint_IsStalled();
    156e:	81 e0       	ldi	r24, 0x01	; 1
    1570:	95 ff       	sbrs	r25, 5
    1572:	80 e0       	ldi	r24, 0x00	; 0
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1574:	10 92 e9 00 	sts	0x00E9, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1578:	90 91 e8 00 	lds	r25, 0x00E8
    157c:	97 7f       	andi	r25, 0xF7	; 247
    157e:	90 93 e8 00 	sts	0x00E8, r25
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
    1582:	80 93 f1 00 	sts	0x00F1, r24
				UEDATX = (Data >> 8);
    1586:	10 92 f1 00 	sts	0x00F1, r1
    158a:	d4 c0       	rjmp	.+424    	; 0x1734 <USB_Device_ProcessControlRequest+0x25a>
				}

				break;
			case REQ_ClearFeature:
			case REQ_SetFeature:
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    158c:	88 23       	and	r24, r24
    158e:	19 f0       	breq	.+6      	; 0x1596 <USB_Device_ProcessControlRequest+0xbc>
    1590:	82 30       	cpi	r24, 0x02	; 2
    1592:	09 f0       	breq	.+2      	; 0x1596 <USB_Device_ProcessControlRequest+0xbc>
    1594:	f3 c0       	rjmp	.+486    	; 0x177c <USB_Device_ProcessControlRequest+0x2a2>
	Endpoint_ClearStatusStage();
}

static void USB_Device_ClearSetFeature(void)
{
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
    1596:	90 e0       	ldi	r25, 0x00	; 0
    1598:	8f 71       	andi	r24, 0x1F	; 31
    159a:	90 70       	andi	r25, 0x00	; 0
    159c:	00 97       	sbiw	r24, 0x00	; 0
    159e:	29 f0       	breq	.+10     	; 0x15aa <USB_Device_ProcessControlRequest+0xd0>
    15a0:	82 30       	cpi	r24, 0x02	; 2
    15a2:	91 05       	cpc	r25, r1
    15a4:	09 f0       	breq	.+2      	; 0x15a8 <USB_Device_ProcessControlRequest+0xce>
    15a6:	ea c0       	rjmp	.+468    	; 0x177c <USB_Device_ProcessControlRequest+0x2a2>
    15a8:	0b c0       	rjmp	.+22     	; 0x15c0 <USB_Device_ProcessControlRequest+0xe6>
	{
		#if !defined(NO_DEVICE_REMOTE_WAKEUP)
		case REQREC_DEVICE:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
    15aa:	80 91 6b 01 	lds	r24, 0x016B
    15ae:	81 30       	cpi	r24, 0x01	; 1
    15b0:	09 f0       	breq	.+2      	; 0x15b4 <USB_Device_ProcessControlRequest+0xda>
    15b2:	e4 c0       	rjmp	.+456    	; 0x177c <USB_Device_ProcessControlRequest+0x2a2>
			  USB_Device_RemoteWakeupEnabled = (USB_ControlRequest.bRequest == REQ_SetFeature);
    15b4:	23 30       	cpi	r18, 0x03	; 3
    15b6:	09 f0       	breq	.+2      	; 0x15ba <USB_Device_ProcessControlRequest+0xe0>
    15b8:	80 e0       	ldi	r24, 0x00	; 0
    15ba:	80 93 66 01 	sts	0x0166, r24
    15be:	2c c0       	rjmp	.+88     	; 0x1618 <USB_Device_ProcessControlRequest+0x13e>

			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
    15c0:	80 91 6b 01 	lds	r24, 0x016B
    15c4:	88 23       	and	r24, r24
    15c6:	41 f5       	brne	.+80     	; 0x1618 <USB_Device_ProcessControlRequest+0x13e>
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
    15c8:	20 91 6d 01 	lds	r18, 0x016D
    15cc:	2f 70       	andi	r18, 0x0F	; 15

				if (EndpointIndex == ENDPOINT_CONTROLEP)
    15ce:	09 f4       	brne	.+2      	; 0x15d2 <USB_Device_ProcessControlRequest+0xf8>
    15d0:	d5 c0       	rjmp	.+426    	; 0x177c <USB_Device_ProcessControlRequest+0x2a2>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    15d2:	20 93 e9 00 	sts	0x00E9, r18
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
    15d6:	80 91 eb 00 	lds	r24, 0x00EB
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
    15da:	80 ff       	sbrs	r24, 0
    15dc:	1d c0       	rjmp	.+58     	; 0x1618 <USB_Device_ProcessControlRequest+0x13e>
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
    15de:	80 91 6a 01 	lds	r24, 0x016A
    15e2:	83 30       	cpi	r24, 0x03	; 3
    15e4:	21 f4       	brne	.+8      	; 0x15ee <USB_Device_ProcessControlRequest+0x114>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    15e6:	80 91 eb 00 	lds	r24, 0x00EB
    15ea:	80 62       	ori	r24, 0x20	; 32
    15ec:	13 c0       	rjmp	.+38     	; 0x1614 <USB_Device_ProcessControlRequest+0x13a>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
    15ee:	80 91 eb 00 	lds	r24, 0x00EB
    15f2:	80 61       	ori	r24, 0x10	; 16
    15f4:	80 93 eb 00 	sts	0x00EB, r24
			 *  \param[in] Address  Endpoint address whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t Address)
			{
				UERST = (1 << (Address & ENDPOINT_EPNUM_MASK));
    15f8:	81 e0       	ldi	r24, 0x01	; 1
    15fa:	90 e0       	ldi	r25, 0x00	; 0
    15fc:	02 c0       	rjmp	.+4      	; 0x1602 <USB_Device_ProcessControlRequest+0x128>
    15fe:	88 0f       	add	r24, r24
    1600:	99 1f       	adc	r25, r25
    1602:	2a 95       	dec	r18
    1604:	e2 f7       	brpl	.-8      	; 0x15fe <USB_Device_ProcessControlRequest+0x124>
    1606:	80 93 ea 00 	sts	0x00EA, r24
				UERST = 0;
    160a:	10 92 ea 00 	sts	0x00EA, r1

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
    160e:	80 91 eb 00 	lds	r24, 0x00EB
    1612:	88 60       	ori	r24, 0x08	; 8
    1614:	80 93 eb 00 	sts	0x00EB, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1618:	10 92 e9 00 	sts	0x00E9, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    161c:	80 91 e8 00 	lds	r24, 0x00E8
    1620:	87 7f       	andi	r24, 0xF7	; 247
    1622:	8b c0       	rjmp	.+278    	; 0x173a <USB_Device_ProcessControlRequest+0x260>
					USB_Device_ClearSetFeature();
				}

				break;
			case REQ_SetAddress:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    1624:	88 23       	and	r24, r24
    1626:	09 f0       	breq	.+2      	; 0x162a <USB_Device_ProcessControlRequest+0x150>
    1628:	a9 c0       	rjmp	.+338    	; 0x177c <USB_Device_ProcessControlRequest+0x2a2>
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t DeviceAddress = (USB_ControlRequest.wValue & 0x7F);
    162a:	10 91 6b 01 	lds	r17, 0x016B
    162e:	1f 77       	andi	r17, 0x7F	; 127
			#endif

			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				UDADDR = (UDADDR & (1 << ADDEN)) | (Address & 0x7F);
    1630:	80 91 e3 00 	lds	r24, 0x00E3
    1634:	80 78       	andi	r24, 0x80	; 128
    1636:	81 2b       	or	r24, r17
    1638:	80 93 e3 00 	sts	0x00E3, r24
    163c:	80 91 e8 00 	lds	r24, 0x00E8
    1640:	87 7f       	andi	r24, 0xF7	; 247
    1642:	80 93 e8 00 	sts	0x00E8, r24

	USB_Device_SetDeviceAddress(DeviceAddress);

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
    1646:	87 dd       	rcall	.-1266   	; 0x1156 <Endpoint_ClearStatusStage>
    1648:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    164c:	80 ff       	sbrs	r24, 0

	while (!(Endpoint_IsINReady()));
    164e:	fc cf       	rjmp	.-8      	; 0x1648 <USB_Device_ProcessControlRequest+0x16e>
    1650:	80 91 e3 00 	lds	r24, 0x00E3
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address)
			{
				(void)Address;
				
				UDADDR |= (1 << ADDEN);
    1654:	80 68       	ori	r24, 0x80	; 128
    1656:	80 93 e3 00 	sts	0x00E3, r24
    165a:	11 23       	and	r17, r17

	USB_Device_EnableDeviceAddress(DeviceAddress);

	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
    165c:	11 f0       	breq	.+4      	; 0x1662 <USB_Device_ProcessControlRequest+0x188>
    165e:	83 e0       	ldi	r24, 0x03	; 3
    1660:	01 c0       	rjmp	.+2      	; 0x1664 <USB_Device_ProcessControlRequest+0x18a>
    1662:	82 e0       	ldi	r24, 0x02	; 2
    1664:	80 93 68 01 	sts	0x0168, r24
    1668:	89 c0       	rjmp	.+274    	; 0x177c <USB_Device_ProcessControlRequest+0x2a2>
    166a:	80 58       	subi	r24, 0x80	; 128
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_SetAddress();

				break;
			case REQ_GetDescriptor:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    166c:	82 30       	cpi	r24, 0x02	; 2
    166e:	08 f0       	brcs	.+2      	; 0x1672 <USB_Device_ProcessControlRequest+0x198>
    1670:	85 c0       	rjmp	.+266    	; 0x177c <USB_Device_ProcessControlRequest+0x2a2>
    1672:	80 91 6b 01 	lds	r24, 0x016B
	    !(defined(USE_FLASH_DESCRIPTORS) || defined(USE_EEPROM_DESCRIPTORS) || defined(USE_RAM_DESCRIPTORS))
	uint8_t DescriptorAddressSpace;
	#endif

	#if !defined(NO_INTERNAL_SERIAL) && (USE_INTERNAL_SERIAL != NO_DESCRIPTOR)
	if (USB_ControlRequest.wValue == ((DTYPE_String << 8) | USE_INTERNAL_SERIAL))
    1676:	90 91 6c 01 	lds	r25, 0x016C
    167a:	23 e0       	ldi	r18, 0x03	; 3
    167c:	8c 3d       	cpi	r24, 0xDC	; 220
    167e:	92 07       	cpc	r25, r18
    1680:	a9 f5       	brne	.+106    	; 0x16ec <USB_Device_ProcessControlRequest+0x212>
    1682:	83 e0       	ldi	r24, 0x03	; 3
	{
		USB_Descriptor_Header_t Header;
		uint16_t                UnicodeString[INTERNAL_SERIAL_LENGTH_BITS / 4];
	} SignatureDescriptor;

	SignatureDescriptor.Header.Type = DTYPE_String;
    1684:	8c 83       	std	Y+4, r24	; 0x04
    1686:	8a e2       	ldi	r24, 0x2A	; 42
	SignatureDescriptor.Header.Size = USB_STRING_LEN(INTERNAL_SERIAL_LENGTH_BITS / 4);
    1688:	8b 83       	std	Y+3, r24	; 0x03
    168a:	5f b7       	in	r21, 0x3f	; 63
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
    168c:	f8 94       	cli
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
    168e:	de 01       	movw	r26, r28
				__builtin_ssrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				cli();
				#endif

				GCC_MEMORY_BARRIER();
    1690:	13 96       	adiw	r26, 0x03	; 3
    1692:	80 e0       	ldi	r24, 0x00	; 0
    1694:	90 e0       	ldi	r25, 0x00	; 0
    1696:	4e e0       	ldi	r20, 0x0E	; 14
			static inline void USB_Device_GetSerialString(uint16_t* const UnicodeString)
			{
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;
    1698:	61 e2       	ldi	r22, 0x21	; 33

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
				{
					uint8_t SerialByte = boot_signature_byte_get(SigReadAddress);
    169a:	e4 2f       	mov	r30, r20
    169c:	f0 e0       	ldi	r31, 0x00	; 0
    169e:	60 93 57 00 	sts	0x0057, r22
    16a2:	e4 91       	lpm	r30, Z
    16a4:	80 ff       	sbrs	r24, 0

					if (SerialCharNum & 0x01)
    16a6:	03 c0       	rjmp	.+6      	; 0x16ae <USB_Device_ProcessControlRequest+0x1d4>
    16a8:	e2 95       	swap	r30
					{
						SerialByte >>= 4;
    16aa:	ef 70       	andi	r30, 0x0F	; 15
    16ac:	4f 5f       	subi	r20, 0xFF	; 255
						SigReadAddress++;
    16ae:	ef 70       	andi	r30, 0x0F	; 15
					}

					SerialByte &= 0x0F;
    16b0:	2e 2f       	mov	r18, r30
    16b2:	30 e0       	ldi	r19, 0x00	; 0
    16b4:	ea 30       	cpi	r30, 0x0A	; 10

					UnicodeString[SerialCharNum] = cpu_to_le16((SerialByte >= 10) ?
    16b6:	18 f0       	brcs	.+6      	; 0x16be <USB_Device_ProcessControlRequest+0x1e4>
    16b8:	29 5c       	subi	r18, 0xC9	; 201
    16ba:	3f 4f       	sbci	r19, 0xFF	; 255
    16bc:	02 c0       	rjmp	.+4      	; 0x16c2 <USB_Device_ProcessControlRequest+0x1e8>
    16be:	20 5d       	subi	r18, 0xD0	; 208
    16c0:	3f 4f       	sbci	r19, 0xFF	; 255
    16c2:	13 96       	adiw	r26, 0x03	; 3
    16c4:	3c 93       	st	X, r19
    16c6:	2e 93       	st	-X, r18
    16c8:	12 97       	sbiw	r26, 0x02	; 2
    16ca:	01 96       	adiw	r24, 0x01	; 1
    16cc:	12 96       	adiw	r26, 0x02	; 2
    16ce:	84 31       	cpi	r24, 0x14	; 20
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
    16d0:	91 05       	cpc	r25, r1
    16d2:	19 f7       	brne	.-58     	; 0x169a <USB_Device_ProcessControlRequest+0x1c0>
    16d4:	5f bf       	out	0x3f, r21	; 63
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
    16d6:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    16da:	87 7f       	andi	r24, 0xF7	; 247
    16dc:	80 93 e8 00 	sts	0x00E8, r24
    16e0:	ce 01       	movw	r24, r28

	USB_Device_GetSerialString(SignatureDescriptor.UnicodeString);

	Endpoint_ClearSETUP();

	Endpoint_Write_Control_Stream_LE(&SignatureDescriptor, sizeof(SignatureDescriptor));
    16e2:	03 96       	adiw	r24, 0x03	; 3
    16e4:	6a e2       	ldi	r22, 0x2A	; 42
    16e6:	70 e0       	ldi	r23, 0x00	; 0
    16e8:	48 dc       	rcall	.-1904   	; 0xf7a <Endpoint_Write_Control_Stream_LE>
    16ea:	13 c0       	rjmp	.+38     	; 0x1712 <USB_Device_ProcessControlRequest+0x238>
    16ec:	60 91 6d 01 	lds	r22, 0x016D
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif

	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
    16f0:	ae 01       	movw	r20, r28
    16f2:	4f 5f       	subi	r20, 0xFF	; 255
    16f4:	5f 4f       	sbci	r21, 0xFF	; 255
    16f6:	0e 94 37 02 	call	0x46e	; 0x46e <CALLBACK_USB_GetDescriptor>
    16fa:	bc 01       	movw	r22, r24
    16fc:	00 97       	sbiw	r24, 0x00	; 0
    16fe:	09 f4       	brne	.+2      	; 0x1702 <USB_Device_ProcessControlRequest+0x228>
    1700:	3d c0       	rjmp	.+122    	; 0x177c <USB_Device_ProcessControlRequest+0x2a2>
    1702:	80 91 e8 00 	lds	r24, 0x00E8
    1706:	87 7f       	andi	r24, 0xF7	; 247
    1708:	80 93 e8 00 	sts	0x00E8, r24
    170c:	89 81       	ldd	r24, Y+1	; 0x01
    170e:	9a 81       	ldd	r25, Y+2	; 0x02
	#if defined(USE_RAM_DESCRIPTORS) || !defined(ARCH_HAS_MULTI_ADDRESS_SPACE)
	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_EEPROM_DESCRIPTORS)
	Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_FLASH_DESCRIPTORS)
	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
    1710:	90 dc       	rcall	.-1760   	; 0x1032 <Endpoint_Write_Control_PStream_LE>
    1712:	80 91 e8 00 	lds	r24, 0x00E8
    1716:	8b 77       	andi	r24, 0x7B	; 123
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    1718:	80 93 e8 00 	sts	0x00E8, r24
    171c:	2f c0       	rjmp	.+94     	; 0x177c <USB_Device_ProcessControlRequest+0x2a2>
    171e:	80 38       	cpi	r24, 0x80	; 128
    1720:	69 f5       	brne	.+90     	; 0x177c <USB_Device_ProcessControlRequest+0x2a2>
    1722:	80 91 e8 00 	lds	r24, 0x00E8
					USB_Device_GetDescriptor();
				}

				break;
			case REQ_GetConfiguration:
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
    1726:	87 7f       	andi	r24, 0xF7	; 247
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1728:	80 93 e8 00 	sts	0x00E8, r24
    172c:	80 91 64 01 	lds	r24, 0x0164
    1730:	80 93 f1 00 	sts	0x00F1, r24

static void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();

	Endpoint_Write_8(USB_Device_ConfigurationNumber);
    1734:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    1738:	8e 77       	andi	r24, 0x7E	; 126
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    173a:	80 93 e8 00 	sts	0x00E8, r24
    173e:	0b dd       	rcall	.-1514   	; 0x1156 <Endpoint_ClearStatusStage>
    1740:	1d c0       	rjmp	.+58     	; 0x177c <USB_Device_ProcessControlRequest+0x2a2>
    1742:	88 23       	and	r24, r24
	Endpoint_ClearIN();

	Endpoint_ClearStatusStage();
    1744:	d9 f4       	brne	.+54     	; 0x177c <USB_Device_ProcessControlRequest+0x2a2>
    1746:	90 91 6b 01 	lds	r25, 0x016B
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_GetConfiguration();

				break;
			case REQ_SetConfiguration:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    174a:	92 30       	cpi	r25, 0x02	; 2
    174c:	b8 f4       	brcc	.+46     	; 0x177c <USB_Device_ProcessControlRequest+0x2a2>
}

static void USB_Device_SetConfiguration(void)
{
	#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
    174e:	80 91 e8 00 	lds	r24, 0x00E8
    1752:	87 7f       	andi	r24, 0xF7	; 247
    1754:	80 93 e8 00 	sts	0x00E8, r24
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1758:	90 93 64 01 	sts	0x0164, r25
    175c:	fc dc       	rcall	.-1544   	; 0x1156 <Endpoint_ClearStatusStage>
    175e:	80 91 64 01 	lds	r24, 0x0164
	#endif
	#endif

	Endpoint_ClearSETUP();

	USB_Device_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
    1762:	88 23       	and	r24, r24

	Endpoint_ClearStatusStage();
    1764:	21 f4       	brne	.+8      	; 0x176e <USB_Device_ProcessControlRequest+0x294>
    1766:	80 91 e3 00 	lds	r24, 0x00E3

	if (USB_Device_ConfigurationNumber)
    176a:	87 ff       	sbrs	r24, 7
    176c:	02 c0       	rjmp	.+4      	; 0x1772 <USB_Device_ProcessControlRequest+0x298>
    176e:	84 e0       	ldi	r24, 0x04	; 4
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
    1770:	01 c0       	rjmp	.+2      	; 0x1774 <USB_Device_ProcessControlRequest+0x29a>
    1772:	81 e0       	ldi	r24, 0x01	; 1
	  USB_DeviceState = DEVICE_STATE_Configured;
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
    1774:	80 93 68 01 	sts	0x0168, r24
    1778:	0e 94 ee 00 	call	0x1dc	; 0x1dc <EVENT_USB_Device_ConfigurationChanged>
    177c:	80 91 e8 00 	lds	r24, 0x00E8
    1780:	83 ff       	sbrs	r24, 3

	EVENT_USB_Device_ConfigurationChanged();
    1782:	0a c0       	rjmp	.+20     	; 0x1798 <USB_Device_ProcessControlRequest+0x2be>
    1784:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    1788:	87 7f       	andi	r24, 0xF7	; 247
			default:
				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
    178a:	80 93 e8 00 	sts	0x00E8, r24
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    178e:	80 91 eb 00 	lds	r24, 0x00EB
    1792:	80 62       	ori	r24, 0x20	; 32
    1794:	80 93 eb 00 	sts	0x00EB, r24
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    1798:	ac 96       	adiw	r28, 0x2c	; 44
    179a:	0f b6       	in	r0, 0x3f	; 63
    179c:	f8 94       	cli
    179e:	de bf       	out	0x3e, r29	; 62
    17a0:	0f be       	out	0x3f, r0	; 63
	{
		Endpoint_ClearSETUP();
		Endpoint_StallTransaction();
	}
}
    17a2:	cd bf       	out	0x3d, r28	; 61
    17a4:	df 91       	pop	r29
    17a6:	cf 91       	pop	r28
    17a8:	1f 91       	pop	r17
    17aa:	08 95       	ret

000017ac <USB_Event_Stub>:
#include "Events.h"

void USB_Event_Stub(void)
{

}
    17ac:	08 95       	ret

000017ae <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
    17ae:	cf 93       	push	r28
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_DeviceTask(void)
{
	if (USB_DeviceState == DEVICE_STATE_Unattached)
    17b0:	80 91 68 01 	lds	r24, 0x0168
    17b4:	88 23       	and	r24, r24
    17b6:	a9 f0       	breq	.+42     	; 0x17e2 <USB_USBTask+0x34>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    17b8:	80 91 e9 00 	lds	r24, 0x00E9
    17bc:	8f 70       	andi	r24, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    17be:	90 91 ec 00 	lds	r25, 0x00EC
    17c2:	90 ff       	sbrs	r25, 0
    17c4:	02 c0       	rjmp	.+4      	; 0x17ca <USB_USBTask+0x1c>
    17c6:	c0 e8       	ldi	r28, 0x80	; 128
    17c8:	01 c0       	rjmp	.+2      	; 0x17cc <USB_USBTask+0x1e>
    17ca:	c0 e0       	ldi	r28, 0x00	; 0
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    17cc:	c8 2b       	or	r28, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    17ce:	10 92 e9 00 	sts	0x00E9, r1
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    17d2:	80 91 e8 00 	lds	r24, 0x00E8

	uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

	if (Endpoint_IsSETUPReceived())
    17d6:	83 ff       	sbrs	r24, 3
    17d8:	01 c0       	rjmp	.+2      	; 0x17dc <USB_USBTask+0x2e>
	  USB_Device_ProcessControlRequest();
    17da:	7f de       	rcall	.-770    	; 0x14da <USB_Device_ProcessControlRequest>
    17dc:	cf 70       	andi	r28, 0x0F	; 15
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    17de:	c0 93 e9 00 	sts	0x00E9, r28
    17e2:	cf 91       	pop	r28
	#elif defined(USB_CAN_BE_HOST)
		USB_HostTask();
	#elif defined(USB_CAN_BE_DEVICE)
		USB_DeviceTask();
	#endif
}
    17e4:	08 95       	ret

000017e6 <_exit>:
    17e6:	f8 94       	cli

000017e8 <__stop_program>:
    17e8:	ff cf       	rjmp	.-2      	; 0x17e8 <__stop_program>
