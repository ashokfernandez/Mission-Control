
MIDI.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00000ce2  00000d76  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000ce2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000e  00800100  00800100  00000d76  2**0
                  ALLOC
  3 .stab         00000870  00000000  00000000  00000d78  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000013a  00000000  00000000  000015e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000328  00000000  00000000  00001728  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000505c  00000000  00000000  00001a50  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000012b2  00000000  00000000  00006aac  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000273c  00000000  00000000  00007d5e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000008a0  00000000  00000000  0000a49c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00002751  00000000  00000000  0000ad3c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00003766  00000000  00000000  0000d48d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000518  00000000  00000000  00010bf3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	a6 c0       	rjmp	.+332    	; 0x14e <__ctors_end>
   2:	00 00       	nop
   4:	c2 c0       	rjmp	.+388    	; 0x18a <__bad_interrupt>
   6:	00 00       	nop
   8:	c0 c0       	rjmp	.+384    	; 0x18a <__bad_interrupt>
   a:	00 00       	nop
   c:	be c0       	rjmp	.+380    	; 0x18a <__bad_interrupt>
   e:	00 00       	nop
  10:	bc c0       	rjmp	.+376    	; 0x18a <__bad_interrupt>
  12:	00 00       	nop
  14:	ba c0       	rjmp	.+372    	; 0x18a <__bad_interrupt>
  16:	00 00       	nop
  18:	b8 c0       	rjmp	.+368    	; 0x18a <__bad_interrupt>
  1a:	00 00       	nop
  1c:	b6 c0       	rjmp	.+364    	; 0x18a <__bad_interrupt>
  1e:	00 00       	nop
  20:	b4 c0       	rjmp	.+360    	; 0x18a <__bad_interrupt>
  22:	00 00       	nop
  24:	b2 c0       	rjmp	.+356    	; 0x18a <__bad_interrupt>
  26:	00 00       	nop
  28:	0f c4       	rjmp	.+2078   	; 0x848 <__vector_10>
  2a:	00 00       	nop
  2c:	ae c0       	rjmp	.+348    	; 0x18a <__bad_interrupt>
  2e:	00 00       	nop
  30:	ac c0       	rjmp	.+344    	; 0x18a <__bad_interrupt>
  32:	00 00       	nop
  34:	aa c0       	rjmp	.+340    	; 0x18a <__bad_interrupt>
  36:	00 00       	nop
  38:	a8 c0       	rjmp	.+336    	; 0x18a <__bad_interrupt>
  3a:	00 00       	nop
  3c:	a6 c0       	rjmp	.+332    	; 0x18a <__bad_interrupt>
  3e:	00 00       	nop
  40:	a4 c0       	rjmp	.+328    	; 0x18a <__bad_interrupt>
  42:	00 00       	nop
  44:	a2 c0       	rjmp	.+324    	; 0x18a <__bad_interrupt>
  46:	00 00       	nop
  48:	a0 c0       	rjmp	.+320    	; 0x18a <__bad_interrupt>
  4a:	00 00       	nop
  4c:	9e c0       	rjmp	.+316    	; 0x18a <__bad_interrupt>
  4e:	00 00       	nop
  50:	9c c0       	rjmp	.+312    	; 0x18a <__bad_interrupt>
  52:	00 00       	nop
  54:	9a c0       	rjmp	.+308    	; 0x18a <__bad_interrupt>
  56:	00 00       	nop
  58:	98 c0       	rjmp	.+304    	; 0x18a <__bad_interrupt>
  5a:	00 00       	nop
  5c:	96 c0       	rjmp	.+300    	; 0x18a <__bad_interrupt>
  5e:	00 00       	nop
  60:	94 c0       	rjmp	.+296    	; 0x18a <__bad_interrupt>
  62:	00 00       	nop
  64:	92 c0       	rjmp	.+292    	; 0x18a <__bad_interrupt>
  66:	00 00       	nop
  68:	90 c0       	rjmp	.+288    	; 0x18a <__bad_interrupt>
  6a:	00 00       	nop
  6c:	8e c0       	rjmp	.+284    	; 0x18a <__bad_interrupt>
  6e:	00 00       	nop
  70:	8c c0       	rjmp	.+280    	; 0x18a <__bad_interrupt>
  72:	00 00       	nop
  74:	8a c0       	rjmp	.+276    	; 0x18a <__bad_interrupt>
  76:	00 00       	nop
  78:	88 c0       	rjmp	.+272    	; 0x18a <__bad_interrupt>
  7a:	00 00       	nop
  7c:	86 c0       	rjmp	.+268    	; 0x18a <__bad_interrupt>
  7e:	00 00       	nop
  80:	84 c0       	rjmp	.+264    	; 0x18a <__bad_interrupt>
  82:	00 00       	nop
  84:	82 c0       	rjmp	.+260    	; 0x18a <__bad_interrupt>
  86:	00 00       	nop
  88:	80 c0       	rjmp	.+256    	; 0x18a <__bad_interrupt>
  8a:	00 00       	nop
  8c:	7e c0       	rjmp	.+252    	; 0x18a <__bad_interrupt>
  8e:	00 00       	nop
  90:	7c c0       	rjmp	.+248    	; 0x18a <__bad_interrupt>
  92:	00 00       	nop
  94:	7a c0       	rjmp	.+244    	; 0x18a <__bad_interrupt>
  96:	00 00       	nop

00000098 <ProductString>:
  98:	1e 03 4c 00 55 00 46 00 41 00 20 00 4d 00 49 00     ..L.U.F.A. .M.I.
  a8:	44 00 49 00 20 00 44 00 65 00 6d 00 6f 00 00 00     D.I. .D.e.m.o...

000000b8 <ManufacturerString>:
  b8:	18 03 44 00 65 00 61 00 6e 00 20 00 43 00 61 00     ..D.e.a.n. .C.a.
  c8:	6d 00 65 00 72 00 61 00 00 00                       m.e.r.a...

000000d2 <LanguageString>:
  d2:	04 03 09 04                                         ....

000000d6 <ConfigurationDescriptor>:
  d6:	09 02 65 00 02 01 00 c0 32 09 04 00 00 00 01 01     ..e.....2.......
  e6:	00 00 09 24 01 00 01 09 00 01 01 09 04 01 00 02     ...$............
  f6:	01 03 00 00 07 24 01 00 01 41 00 06 24 02 01 01     .....$...A..$...
 106:	00 06 24 02 02 02 00 09 24 03 01 03 01 02 01 00     ..$.....$.......
 116:	09 24 03 02 04 01 01 01 00 09 05 02 02 40 00 05     .$...........@..
 126:	00 00 05 25 01 01 01 09 05 81 02 40 00 05 00 00     ...%.......@....
 136:	05 25 01 01 03                                      .%...

0000013b <DeviceDescriptor>:
 13b:	12 01 10 01 00 00 00 08 eb 03 48 20 01 00 01 02     ..........H ....
 14b:	00 01 00                                            ...

0000014e <__ctors_end>:
 14e:	11 24       	eor	r1, r1
 150:	1f be       	out	0x3f, r1	; 63
 152:	cf ef       	ldi	r28, 0xFF	; 255
 154:	d0 e2       	ldi	r29, 0x20	; 32
 156:	de bf       	out	0x3e, r29	; 62
 158:	cd bf       	out	0x3d, r28	; 61

0000015a <__do_copy_data>:
 15a:	11 e0       	ldi	r17, 0x01	; 1
 15c:	a0 e0       	ldi	r26, 0x00	; 0
 15e:	b1 e0       	ldi	r27, 0x01	; 1
 160:	e2 ee       	ldi	r30, 0xE2	; 226
 162:	fc e0       	ldi	r31, 0x0C	; 12
 164:	00 e0       	ldi	r16, 0x00	; 0
 166:	0b bf       	out	0x3b, r16	; 59
 168:	02 c0       	rjmp	.+4      	; 0x16e <__do_copy_data+0x14>
 16a:	07 90       	elpm	r0, Z+
 16c:	0d 92       	st	X+, r0
 16e:	a0 30       	cpi	r26, 0x00	; 0
 170:	b1 07       	cpc	r27, r17
 172:	d9 f7       	brne	.-10     	; 0x16a <__do_copy_data+0x10>
 174:	1b be       	out	0x3b, r1	; 59

00000176 <__do_clear_bss>:
 176:	11 e0       	ldi	r17, 0x01	; 1
 178:	a0 e0       	ldi	r26, 0x00	; 0
 17a:	b1 e0       	ldi	r27, 0x01	; 1
 17c:	01 c0       	rjmp	.+2      	; 0x180 <.do_clear_bss_start>

0000017e <.do_clear_bss_loop>:
 17e:	1d 92       	st	X+, r1

00000180 <.do_clear_bss_start>:
 180:	ae 30       	cpi	r26, 0x0E	; 14
 182:	b1 07       	cpc	r27, r17
 184:	e1 f7       	brne	.-8      	; 0x17e <.do_clear_bss_loop>
 186:	eb d0       	rcall	.+470    	; 0x35e <main>
 188:	aa c5       	rjmp	.+2900   	; 0xcde <_exit>

0000018a <__bad_interrupt>:
 18a:	3a cf       	rjmp	.-396    	; 0x0 <__vectors>

0000018c <LEDs_SetAllLEDs>:
				PORTD &= ~LEDMask;
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
			{
				PORTD = ((PORTD & ~LEDS_ALL_LEDS) | LEDMask);
 18c:	9b b1       	in	r25, 0x0b	; 11
 18e:	9f 70       	andi	r25, 0x0F	; 15
 190:	98 2b       	or	r25, r24
 192:	9b b9       	out	0x0b, r25	; 11
			}
 194:	08 95       	ret

00000196 <SetupHardware>:

/** Configures the board hardware and chip peripherals for the demo's functionality. */
void SetupHardware(void)
{
	/* Disable watchdog if enabled by bootloader/fuses */
	MCUSR &= ~(1 << WDRF);
 196:	84 b7       	in	r24, 0x34	; 52
 198:	87 7f       	andi	r24, 0xF7	; 247
 19a:	84 bf       	out	0x34, r24	; 52
	wdt_disable();
 19c:	88 e1       	ldi	r24, 0x18	; 24
 19e:	0f b6       	in	r0, 0x3f	; 63
 1a0:	f8 94       	cli
 1a2:	80 93 60 00 	sts	0x0060, r24
 1a6:	10 92 60 00 	sts	0x0060, r1
 1aa:	0f be       	out	0x3f, r0	; 63
The type of x is clock_div_t.
*/
void clock_prescale_set(clock_div_t __x)
{
    uint8_t __tmp = _BV(CLKPCE);
    __asm__ __volatile__ (
 1ac:	90 e0       	ldi	r25, 0x00	; 0
 1ae:	80 e8       	ldi	r24, 0x80	; 128
 1b0:	0f b6       	in	r0, 0x3f	; 63
 1b2:	f8 94       	cli
 1b4:	80 93 61 00 	sts	0x0061, r24
 1b8:	90 93 61 00 	sts	0x0061, r25
 1bc:	0f be       	out	0x3f, r0	; 63

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void Joystick_Init(void)
			{
				DDRB  &= ~JOY_BMASK;
 1be:	84 b1       	in	r24, 0x04	; 4
 1c0:	8f 71       	andi	r24, 0x1F	; 31
 1c2:	84 b9       	out	0x04, r24	; 4
				DDRE  &= ~JOY_EMASK;
 1c4:	8d b1       	in	r24, 0x0d	; 13
 1c6:	8f 7c       	andi	r24, 0xCF	; 207
 1c8:	8d b9       	out	0x0d, r24	; 13

				PORTB |=  JOY_BMASK;
 1ca:	85 b1       	in	r24, 0x05	; 5
 1cc:	80 6e       	ori	r24, 0xE0	; 224
 1ce:	85 b9       	out	0x05, r24	; 5
				PORTE |=  JOY_EMASK;
 1d0:	8e b1       	in	r24, 0x0e	; 14
 1d2:	80 63       	ori	r24, 0x30	; 48
 1d4:	8e b9       	out	0x0e, r24	; 14

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void LEDs_Init(void)
			{
				DDRD  |=  LEDS_ALL_LEDS;
 1d6:	8a b1       	in	r24, 0x0a	; 10
 1d8:	80 6f       	ori	r24, 0xF0	; 240
 1da:	8a b9       	out	0x0a, r24	; 10
				PORTD &= ~LEDS_ALL_LEDS;
 1dc:	8b b1       	in	r24, 0x0b	; 11
 1de:	8f 70       	andi	r24, 0x0F	; 15
 1e0:	8b b9       	out	0x0b, r24	; 11

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void Buttons_Init(void)
			{
				DDRE  &= ~BUTTONS_BUTTON1;
 1e2:	6a 98       	cbi	0x0d, 2	; 13
				PORTE |=  BUTTONS_BUTTON1;
 1e4:	72 9a       	sbi	0x0e, 2	; 14

	/* Hardware Initialization */
	Joystick_Init();
	LEDs_Init();
	Buttons_Init();
	USB_Init();
 1e6:	15 c3       	rjmp	.+1578   	; 0x812 <USB_Init>

000001e8 <EVENT_USB_Device_Connect>:
 1e8:	80 ea       	ldi	r24, 0xA0	; 160
}
 1ea:	d0 cf       	rjmp	.-96     	; 0x18c <LEDs_SetAllLEDs>

000001ec <EVENT_USB_Device_Disconnect>:

/** Event handler for the USB_Connect event. This indicates that the device is enumerating via the status LEDs. */
void EVENT_USB_Device_Connect(void)
{
	/* Indicate USB enumerating */
	LEDs_SetAllLEDs(LEDMASK_USB_ENUMERATING);
 1ec:	80 e1       	ldi	r24, 0x10	; 16
}
 1ee:	ce cf       	rjmp	.-100    	; 0x18c <LEDs_SetAllLEDs>

000001f0 <EVENT_USB_Device_ConfigurationChanged>:
 *  the status LEDs, disables the sample update and PWM output timers and stops the USB and MIDI management tasks.
 */
void EVENT_USB_Device_Disconnect(void)
{
	/* Indicate USB not ready */
	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
 1f0:	cf 93       	push	r28
}
 1f2:	81 e0       	ldi	r24, 0x01	; 1
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
 1f4:	61 e8       	ldi	r22, 0x81	; 129
 1f6:	42 e3       	ldi	r20, 0x32	; 50
 1f8:	3e d2       	rcall	.+1148   	; 0x676 <Endpoint_ConfigureEndpoint_Prv>
 1fa:	c8 2f       	mov	r28, r24
 1fc:	82 e0       	ldi	r24, 0x02	; 2
 1fe:	60 e8       	ldi	r22, 0x80	; 128
 200:	42 e3       	ldi	r20, 0x32	; 50
 202:	39 d2       	rcall	.+1138   	; 0x676 <Endpoint_ConfigureEndpoint_Prv>
 204:	28 2f       	mov	r18, r24
 206:	30 e0       	ldi	r19, 0x00	; 0
{
	bool ConfigSuccess = true;

	/* Setup MIDI Data Endpoints */
	ConfigSuccess &= Endpoint_ConfigureEndpoint(MIDI_STREAM_IN_EPADDR, EP_TYPE_BULK, MIDI_STREAM_EPSIZE, 1);
	ConfigSuccess &= Endpoint_ConfigureEndpoint(MIDI_STREAM_OUT_EPADDR, EP_TYPE_BULK, MIDI_STREAM_EPSIZE, 1);
 208:	8c 2f       	mov	r24, r28
 20a:	90 e0       	ldi	r25, 0x00	; 0
void EVENT_USB_Device_ConfigurationChanged(void)
{
	bool ConfigSuccess = true;

	/* Setup MIDI Data Endpoints */
	ConfigSuccess &= Endpoint_ConfigureEndpoint(MIDI_STREAM_IN_EPADDR, EP_TYPE_BULK, MIDI_STREAM_EPSIZE, 1);
 20c:	28 23       	and	r18, r24
 20e:	39 23       	and	r19, r25
	ConfigSuccess &= Endpoint_ConfigureEndpoint(MIDI_STREAM_OUT_EPADDR, EP_TYPE_BULK, MIDI_STREAM_EPSIZE, 1);
 210:	21 15       	cp	r18, r1
 212:	31 05       	cpc	r19, r1

	/* Indicate endpoint configuration success or failure */
	LEDs_SetAllLEDs(ConfigSuccess ? LEDMASK_USB_READY : LEDMASK_USB_ERROR);
 214:	11 f0       	breq	.+4      	; 0x21a <EVENT_USB_Device_ConfigurationChanged+0x2a>
 216:	80 e6       	ldi	r24, 0x60	; 96
 218:	01 c0       	rjmp	.+2      	; 0x21c <EVENT_USB_Device_ConfigurationChanged+0x2c>
 21a:	80 e9       	ldi	r24, 0x90	; 144
 21c:	b7 df       	rcall	.-146    	; 0x18c <LEDs_SetAllLEDs>
 21e:	cf 91       	pop	r28
 220:	08 95       	ret

00000222 <MIDI_Task>:
 222:	1f 93       	push	r17
}
 224:	cf 93       	push	r28
 226:	df 93       	push	r29

/** Task to handle the generation of MIDI note change events in response to presses of the board joystick, and send them
 *  to the host.
 */
void MIDI_Task(void)
{
 228:	00 d0       	rcall	.+0      	; 0x22a <MIDI_Task+0x8>
 22a:	00 d0       	rcall	.+0      	; 0x22c <MIDI_Task+0xa>
 22c:	cd b7       	in	r28, 0x3d	; 61
 22e:	de b7       	in	r29, 0x3e	; 62
	static uint8_t PrevJoystickStatus;

	/* Device must be connected and configured for the task to run */
	if (USB_DeviceState != DEVICE_STATE_Configured)
 230:	80 91 05 01 	lds	r24, 0x0105
 234:	84 30       	cpi	r24, 0x04	; 4
 236:	09 f0       	breq	.+2      	; 0x23a <MIDI_Task+0x18>
 238:	8a c0       	rjmp	.+276    	; 0x34e <MIDI_Task+0x12c>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 23a:	81 e0       	ldi	r24, 0x01	; 1
 23c:	80 93 e9 00 	sts	0x00E9, r24
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 240:	80 91 e8 00 	lds	r24, 0x00E8
	  return;

	Endpoint_SelectEndpoint(MIDI_STREAM_IN_EPADDR);

	if (Endpoint_IsINReady())
 244:	80 ff       	sbrs	r24, 0
 246:	57 c0       	rjmp	.+174    	; 0x2f6 <MIDI_Task+0xd4>
			}

			static inline uint8_t Joystick_GetStatus(void) ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t Joystick_GetStatus(void)
			{
				return (((uint8_t)~PINB & JOY_BMASK) | (((uint8_t)~PINE & JOY_EMASK) >> JOY_PORTE_MASK_SHIFT));
 248:	13 b1       	in	r17, 0x03	; 3
 24a:	8c b1       	in	r24, 0x0c	; 12
 24c:	80 95       	com	r24
 24e:	90 e0       	ldi	r25, 0x00	; 0
 250:	80 73       	andi	r24, 0x30	; 48
 252:	90 70       	andi	r25, 0x00	; 0
 254:	95 95       	asr	r25
 256:	87 95       	ror	r24
 258:	10 95       	com	r17
 25a:	10 7e       	andi	r17, 0xE0	; 224
 25c:	18 2b       	or	r17, r24
	{
		uint8_t MIDICommand = 0;
		uint8_t MIDIPitch;

		uint8_t JoystickStatus  = Joystick_GetStatus();
		uint8_t JoystickChanges = (JoystickStatus ^ PrevJoystickStatus);
 25e:	90 91 00 01 	lds	r25, 0x0100
 262:	91 27       	eor	r25, r17
			}

			static inline uint8_t Buttons_GetStatus(void) ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t Buttons_GetStatus(void)
			{
				return ((PINE & BUTTONS_BUTTON1) ^ BUTTONS_BUTTON1);
 264:	8c b1       	in	r24, 0x0c	; 12

		/* Get board button status - if pressed use channel 10 (percussion), otherwise use channel 1 */
		uint8_t Channel = ((Buttons_GetStatus() & BUTTONS_BUTTON1) ? MIDI_CHANNEL(10) : MIDI_CHANNEL(1));
 266:	82 fd       	sbrc	r24, 2
 268:	02 c0       	rjmp	.+4      	; 0x26e <MIDI_Task+0x4c>
 26a:	39 e0       	ldi	r19, 0x09	; 9
 26c:	01 c0       	rjmp	.+2      	; 0x270 <MIDI_Task+0x4e>
 26e:	30 e0       	ldi	r19, 0x00	; 0

		if (JoystickChanges & JOY_LEFT)
 270:	29 2f       	mov	r18, r25
 272:	96 ff       	sbrs	r25, 6
 274:	04 c0       	rjmp	.+8      	; 0x27e <MIDI_Task+0x5c>
		{
			MIDICommand = ((JoystickStatus & JOY_LEFT)? MIDI_COMMAND_NOTE_ON : MIDI_COMMAND_NOTE_OFF);
 276:	16 ff       	sbrs	r17, 6
 278:	04 c0       	rjmp	.+8      	; 0x282 <MIDI_Task+0x60>
 27a:	80 e9       	ldi	r24, 0x90	; 144
 27c:	03 c0       	rjmp	.+6      	; 0x284 <MIDI_Task+0x62>

	Endpoint_SelectEndpoint(MIDI_STREAM_IN_EPADDR);

	if (Endpoint_IsINReady())
	{
		uint8_t MIDICommand = 0;
 27e:	80 e0       	ldi	r24, 0x00	; 0
 280:	01 c0       	rjmp	.+2      	; 0x284 <MIDI_Task+0x62>
		/* Get board button status - if pressed use channel 10 (percussion), otherwise use channel 1 */
		uint8_t Channel = ((Buttons_GetStatus() & BUTTONS_BUTTON1) ? MIDI_CHANNEL(10) : MIDI_CHANNEL(1));

		if (JoystickChanges & JOY_LEFT)
		{
			MIDICommand = ((JoystickStatus & JOY_LEFT)? MIDI_COMMAND_NOTE_ON : MIDI_COMMAND_NOTE_OFF);
 282:	80 e8       	ldi	r24, 0x80	; 128
			MIDIPitch   = 0x3C;
		}

		if (JoystickChanges & JOY_UP)
 284:	97 ff       	sbrs	r25, 7
 286:	05 c0       	rjmp	.+10     	; 0x292 <MIDI_Task+0x70>
		{
			MIDICommand = ((JoystickStatus & JOY_UP)? MIDI_COMMAND_NOTE_ON : MIDI_COMMAND_NOTE_OFF);
			MIDIPitch   = 0x3D;
 288:	9d e3       	ldi	r25, 0x3D	; 61
			MIDIPitch   = 0x3C;
		}

		if (JoystickChanges & JOY_UP)
		{
			MIDICommand = ((JoystickStatus & JOY_UP)? MIDI_COMMAND_NOTE_ON : MIDI_COMMAND_NOTE_OFF);
 28a:	17 ff       	sbrs	r17, 7
 28c:	04 c0       	rjmp	.+8      	; 0x296 <MIDI_Task+0x74>
 28e:	80 e9       	ldi	r24, 0x90	; 144
 290:	03 c0       	rjmp	.+6      	; 0x298 <MIDI_Task+0x76>
		{
			MIDICommand = ((JoystickStatus & JOY_LEFT)? MIDI_COMMAND_NOTE_ON : MIDI_COMMAND_NOTE_OFF);
			MIDIPitch   = 0x3C;
		}

		if (JoystickChanges & JOY_UP)
 292:	9c e3       	ldi	r25, 0x3C	; 60
 294:	01 c0       	rjmp	.+2      	; 0x298 <MIDI_Task+0x76>
		{
			MIDICommand = ((JoystickStatus & JOY_UP)? MIDI_COMMAND_NOTE_ON : MIDI_COMMAND_NOTE_OFF);
 296:	80 e8       	ldi	r24, 0x80	; 128
			MIDIPitch   = 0x3D;
		}

		if (JoystickChanges & JOY_RIGHT)
 298:	23 ff       	sbrs	r18, 3
 29a:	06 c0       	rjmp	.+12     	; 0x2a8 <MIDI_Task+0x86>
		{
			MIDICommand = ((JoystickStatus & JOY_RIGHT)? MIDI_COMMAND_NOTE_ON : MIDI_COMMAND_NOTE_OFF);
			MIDIPitch   = 0x3E;
 29c:	9e e3       	ldi	r25, 0x3E	; 62
			MIDIPitch   = 0x3D;
		}

		if (JoystickChanges & JOY_RIGHT)
		{
			MIDICommand = ((JoystickStatus & JOY_RIGHT)? MIDI_COMMAND_NOTE_ON : MIDI_COMMAND_NOTE_OFF);
 29e:	13 ff       	sbrs	r17, 3
 2a0:	02 c0       	rjmp	.+4      	; 0x2a6 <MIDI_Task+0x84>
 2a2:	80 e9       	ldi	r24, 0x90	; 144
 2a4:	01 c0       	rjmp	.+2      	; 0x2a8 <MIDI_Task+0x86>
 2a6:	80 e8       	ldi	r24, 0x80	; 128
			MIDIPitch   = 0x3E;
		}

		if (JoystickChanges & JOY_DOWN)
 2a8:	24 ff       	sbrs	r18, 4
 2aa:	06 c0       	rjmp	.+12     	; 0x2b8 <MIDI_Task+0x96>
		{
			MIDICommand = ((JoystickStatus & JOY_DOWN)? MIDI_COMMAND_NOTE_ON : MIDI_COMMAND_NOTE_OFF);
			MIDIPitch   = 0x3F;
 2ac:	9f e3       	ldi	r25, 0x3F	; 63
			MIDIPitch   = 0x3E;
		}

		if (JoystickChanges & JOY_DOWN)
		{
			MIDICommand = ((JoystickStatus & JOY_DOWN)? MIDI_COMMAND_NOTE_ON : MIDI_COMMAND_NOTE_OFF);
 2ae:	14 ff       	sbrs	r17, 4
 2b0:	02 c0       	rjmp	.+4      	; 0x2b6 <MIDI_Task+0x94>
 2b2:	80 e9       	ldi	r24, 0x90	; 144
 2b4:	01 c0       	rjmp	.+2      	; 0x2b8 <MIDI_Task+0x96>
 2b6:	80 e8       	ldi	r24, 0x80	; 128
			MIDIPitch   = 0x3F;
		}

		if (JoystickChanges & JOY_PRESS)
 2b8:	25 ff       	sbrs	r18, 5
 2ba:	04 c0       	rjmp	.+8      	; 0x2c4 <MIDI_Task+0xa2>
		{
			MIDICommand = ((JoystickStatus & JOY_PRESS)? MIDI_COMMAND_NOTE_ON : MIDI_COMMAND_NOTE_OFF);
 2bc:	15 ff       	sbrs	r17, 5
 2be:	44 c0       	rjmp	.+136    	; 0x348 <MIDI_Task+0x126>
 2c0:	80 e9       	ldi	r24, 0x90	; 144
 2c2:	43 c0       	rjmp	.+134    	; 0x34a <MIDI_Task+0x128>
			MIDIPitch   = 0x3B;
		}

		/* Check if a MIDI command is to be sent */
		if (MIDICommand)
 2c4:	88 23       	and	r24, r24
 2c6:	a9 f0       	breq	.+42     	; 0x2f2 <MIDI_Task+0xd0>
		{
			MIDI_EventPacket_t MIDIEvent = (MIDI_EventPacket_t)
 2c8:	28 2f       	mov	r18, r24
 2ca:	22 95       	swap	r18
 2cc:	2f 70       	andi	r18, 0x0F	; 15
 2ce:	29 83       	std	Y+1, r18	; 0x01
 2d0:	83 2b       	or	r24, r19
 2d2:	8a 83       	std	Y+2, r24	; 0x02
 2d4:	9b 83       	std	Y+3, r25	; 0x03
 2d6:	80 e4       	ldi	r24, 0x40	; 64
 2d8:	8c 83       	std	Y+4, r24	; 0x04
					.Data2       = MIDIPitch,
					.Data3       = MIDI_STANDARD_VELOCITY,
				};

			/* Write the MIDI event packet to the endpoint */
			Endpoint_Write_Stream_LE(&MIDIEvent, sizeof(MIDIEvent), NULL);
 2da:	ce 01       	movw	r24, r28
 2dc:	01 96       	adiw	r24, 0x01	; 1
 2de:	64 e0       	ldi	r22, 0x04	; 4
 2e0:	70 e0       	ldi	r23, 0x00	; 0
 2e2:	40 e0       	ldi	r20, 0x00	; 0
 2e4:	50 e0       	ldi	r21, 0x00	; 0
 2e6:	6e d0       	rcall	.+220    	; 0x3c4 <Endpoint_Write_Stream_LE>
 2e8:	80 91 e8 00 	lds	r24, 0x00E8
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 2ec:	8e 77       	andi	r24, 0x7E	; 126
 2ee:	80 93 e8 00 	sts	0x00E8, r24
 2f2:	10 93 00 01 	sts	0x0100, r17
			/* Send the data in the endpoint to the host */
			Endpoint_ClearIN();
		}

		/* Save previous joystick value for next joystick change detection */
		PrevJoystickStatus = JoystickStatus;
 2f6:	82 e0       	ldi	r24, 0x02	; 2
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 2f8:	80 93 e9 00 	sts	0x00E9, r24
 2fc:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 300:	82 ff       	sbrs	r24, 2

	/* Select the MIDI OUT stream */
	Endpoint_SelectEndpoint(MIDI_STREAM_OUT_EPADDR);

	/* Check if a MIDI command has been received */
	if (Endpoint_IsOUTReceived())
 302:	25 c0       	rjmp	.+74     	; 0x34e <MIDI_Task+0x12c>
 304:	ce 01       	movw	r24, r28
	{
		MIDI_EventPacket_t MIDIEvent;

		/* Read the MIDI event packet from the endpoint */
		Endpoint_Read_Stream_LE(&MIDIEvent, sizeof(MIDIEvent), NULL);
 306:	01 96       	adiw	r24, 0x01	; 1
 308:	64 e0       	ldi	r22, 0x04	; 4
 30a:	70 e0       	ldi	r23, 0x00	; 0
 30c:	40 e0       	ldi	r20, 0x00	; 0
 30e:	50 e0       	ldi	r21, 0x00	; 0
 310:	a9 d0       	rcall	.+338    	; 0x464 <Endpoint_Read_Stream_LE>
 312:	89 81       	ldd	r24, Y+1	; 0x01
 314:	89 30       	cpi	r24, 0x09	; 9

		/* Check to see if the sent command is a note on message with a non-zero velocity */
		if ((MIDIEvent.Event == MIDI_EVENT(0, MIDI_COMMAND_NOTE_ON)) && (MIDIEvent.Data3 > 0))
 316:	51 f4       	brne	.+20     	; 0x32c <MIDI_Task+0x10a>
 318:	8c 81       	ldd	r24, Y+4	; 0x04
 31a:	88 23       	and	r24, r24
 31c:	39 f0       	breq	.+14     	; 0x32c <MIDI_Task+0x10a>
 31e:	8b 81       	ldd	r24, Y+3	; 0x03
 320:	81 34       	cpi	r24, 0x41	; 65
		{
			/* Change LEDs depending on the pitch of the sent note */
			LEDs_SetAllLEDs(MIDIEvent.Data2 > 64 ? LEDS_LED1 : LEDS_LED2);
 322:	10 f0       	brcs	.+4      	; 0x328 <MIDI_Task+0x106>
 324:	80 e1       	ldi	r24, 0x10	; 16
 326:	03 c0       	rjmp	.+6      	; 0x32e <MIDI_Task+0x10c>
 328:	80 e2       	ldi	r24, 0x20	; 32
 32a:	01 c0       	rjmp	.+2      	; 0x32e <MIDI_Task+0x10c>
 32c:	80 e0       	ldi	r24, 0x00	; 0
 32e:	2e df       	rcall	.-420    	; 0x18c <LEDs_SetAllLEDs>
		}
		else
		{
			/* Turn off all LEDs in response to non Note On messages */
			LEDs_SetAllLEDs(LEDS_NO_LEDS);
 330:	80 91 f2 00 	lds	r24, 0x00F2
 334:	90 91 f3 00 	lds	r25, 0x00F3
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
 338:	00 97       	sbiw	r24, 0x00	; 0
 33a:	49 f4       	brne	.+18     	; 0x34e <MIDI_Task+0x12c>
 33c:	80 91 e8 00 	lds	r24, 0x00E8
		}

		/* If the endpoint is now empty, clear the bank */
		if (!(Endpoint_BytesInEndpoint()))
 340:	8b 77       	andi	r24, 0x7B	; 123
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 342:	80 93 e8 00 	sts	0x00E8, r24
 346:	03 c0       	rjmp	.+6      	; 0x34e <MIDI_Task+0x12c>
 348:	80 e8       	ldi	r24, 0x80	; 128
 34a:	9b e3       	ldi	r25, 0x3B	; 59
 34c:	bd cf       	rjmp	.-134    	; 0x2c8 <MIDI_Task+0xa6>
			MIDIPitch   = 0x3F;
		}

		if (JoystickChanges & JOY_PRESS)
		{
			MIDICommand = ((JoystickStatus & JOY_PRESS)? MIDI_COMMAND_NOTE_ON : MIDI_COMMAND_NOTE_OFF);
 34e:	0f 90       	pop	r0
			MIDIPitch   = 0x3E;
		}

		if (JoystickChanges & JOY_DOWN)
		{
			MIDICommand = ((JoystickStatus & JOY_DOWN)? MIDI_COMMAND_NOTE_ON : MIDI_COMMAND_NOTE_OFF);
 350:	0f 90       	pop	r0
 352:	0f 90       	pop	r0
		{
			/* Clear the endpoint ready for new packet */
			Endpoint_ClearOUT();
		}
	}
}
 354:	0f 90       	pop	r0
 356:	df 91       	pop	r29
 358:	cf 91       	pop	r28
 35a:	1f 91       	pop	r17
 35c:	08 95       	ret

0000035e <main>:
 35e:	1b df       	rcall	.-458    	; 0x196 <SetupHardware>
 360:	80 e1       	ldi	r24, 0x10	; 16
 362:	14 df       	rcall	.-472    	; 0x18c <LEDs_SetAllLEDs>
 */
int main(void)
{
	SetupHardware();

	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
 364:	78 94       	sei
 366:	5d df       	rcall	.-326    	; 0x222 <MIDI_Task>
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				sei();
 368:	9e d4       	rcall	.+2364   	; 0xca6 <USB_USBTask>
	GlobalInterruptEnable();

	for (;;)
	{
		MIDI_Task();
 36a:	fd cf       	rjmp	.-6      	; 0x366 <main+0x8>

0000036c <CALLBACK_USB_GetDescriptor>:
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
 36c:	92 30       	cpi	r25, 0x02	; 2
 36e:	29 f0       	breq	.+10     	; 0x37a <CALLBACK_USB_GetDescriptor+0xe>
 370:	93 30       	cpi	r25, 0x03	; 3
 372:	41 f0       	breq	.+16     	; 0x384 <CALLBACK_USB_GetDescriptor+0x18>
 374:	91 30       	cpi	r25, 0x01	; 1
 376:	e9 f4       	brne	.+58     	; 0x3b2 <CALLBACK_USB_GetDescriptor+0x46>
 378:	17 c0       	rjmp	.+46     	; 0x3a8 <CALLBACK_USB_GetDescriptor+0x3c>
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
			Size    = sizeof(USB_Descriptor_Configuration_t);
 37a:	85 e6       	ldi	r24, 0x65	; 101
 37c:	90 e0       	ldi	r25, 0x00	; 0
		case DTYPE_Device:
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
 37e:	e6 ed       	ldi	r30, 0xD6	; 214
 380:	f0 e0       	ldi	r31, 0x00	; 0
			Size    = sizeof(USB_Descriptor_Configuration_t);
			break;
 382:	1b c0       	rjmp	.+54     	; 0x3ba <CALLBACK_USB_GetDescriptor+0x4e>
		case DTYPE_String:
			switch (DescriptorNumber)
 384:	81 30       	cpi	r24, 0x01	; 1
 386:	41 f0       	breq	.+16     	; 0x398 <CALLBACK_USB_GetDescriptor+0x2c>
 388:	81 30       	cpi	r24, 0x01	; 1
 38a:	18 f0       	brcs	.+6      	; 0x392 <CALLBACK_USB_GetDescriptor+0x26>
 38c:	82 30       	cpi	r24, 0x02	; 2
 38e:	89 f4       	brne	.+34     	; 0x3b2 <CALLBACK_USB_GetDescriptor+0x46>
 390:	06 c0       	rjmp	.+12     	; 0x39e <CALLBACK_USB_GetDescriptor+0x32>
			{
				case 0x00:
					Address = &LanguageString;
					Size    = pgm_read_byte(&LanguageString.Header.Size);
 392:	e2 ed       	ldi	r30, 0xD2	; 210
 394:	f0 e0       	ldi	r31, 0x00	; 0
 396:	05 c0       	rjmp	.+10     	; 0x3a2 <CALLBACK_USB_GetDescriptor+0x36>
					break;
				case 0x01:
					Address = &ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
 398:	e8 eb       	ldi	r30, 0xB8	; 184
 39a:	f0 e0       	ldi	r31, 0x00	; 0
 39c:	02 c0       	rjmp	.+4      	; 0x3a2 <CALLBACK_USB_GetDescriptor+0x36>
					break;
				case 0x02:
					Address = &ProductString;
					Size    = pgm_read_byte(&ProductString.Header.Size);
 39e:	e8 e9       	ldi	r30, 0x98	; 152
 3a0:	f0 e0       	ldi	r31, 0x00	; 0
 3a2:	84 91       	lpm	r24, Z
 3a4:	90 e0       	ldi	r25, 0x00	; 0
					break;
 3a6:	09 c0       	rjmp	.+18     	; 0x3ba <CALLBACK_USB_GetDescriptor+0x4e>

	switch (DescriptorType)
	{
		case DTYPE_Device:
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
 3a8:	82 e1       	ldi	r24, 0x12	; 18
 3aa:	90 e0       	ldi	r25, 0x00	; 0
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
	{
		case DTYPE_Device:
			Address = &DeviceDescriptor;
 3ac:	eb e3       	ldi	r30, 0x3B	; 59
 3ae:	f1 e0       	ldi	r31, 0x01	; 1
 3b0:	04 c0       	rjmp	.+8      	; 0x3ba <CALLBACK_USB_GetDescriptor+0x4e>
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;
 3b2:	80 e0       	ldi	r24, 0x00	; 0
 3b4:	90 e0       	ldi	r25, 0x00	; 0
                                    const void** const DescriptorAddress)
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
 3b6:	e0 e0       	ldi	r30, 0x00	; 0
 3b8:	f0 e0       	ldi	r31, 0x00	; 0
			}

			break;
	}

	*DescriptorAddress = Address;
 3ba:	da 01       	movw	r26, r20
 3bc:	11 96       	adiw	r26, 0x01	; 1
 3be:	fc 93       	st	X, r31
 3c0:	ee 93       	st	-X, r30
	return Size;
}
 3c2:	08 95       	ret

000003c4 <Endpoint_Write_Stream_LE>:
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
 3c4:	af 92       	push	r10
 3c6:	bf 92       	push	r11
 3c8:	cf 92       	push	r12
 3ca:	df 92       	push	r13
 3cc:	ef 92       	push	r14
 3ce:	ff 92       	push	r15
 3d0:	1f 93       	push	r17
 3d2:	cf 93       	push	r28
 3d4:	df 93       	push	r29
 3d6:	ec 01       	movw	r28, r24
 3d8:	7b 01       	movw	r14, r22
 3da:	6a 01       	movw	r12, r20
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	uint16_t BytesInTransfer = 0;
	uint8_t  ErrorCode;

	if ((ErrorCode = Endpoint_WaitUntilReady()))
 3dc:	a2 d1       	rcall	.+836    	; 0x722 <Endpoint_WaitUntilReady>
 3de:	18 2f       	mov	r17, r24
 3e0:	88 23       	and	r24, r24
 3e2:	a9 f5       	brne	.+106    	; 0x44e <Endpoint_Write_Stream_LE+0x8a>
 3e4:	c1 14       	cp	r12, r1
	  return ErrorCode;

	if (BytesProcessed != NULL)
 3e6:	d1 04       	cpc	r13, r1
 3e8:	39 f0       	breq	.+14     	; 0x3f8 <Endpoint_Write_Stream_LE+0x34>
 3ea:	f6 01       	movw	r30, r12
	{
		Length -= *BytesProcessed;
 3ec:	20 81       	ld	r18, Z
 3ee:	31 81       	ldd	r19, Z+1	; 0x01
 3f0:	e2 1a       	sub	r14, r18
 3f2:	f3 0a       	sbc	r15, r19
 3f4:	c2 0f       	add	r28, r18
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
 3f6:	d3 1f       	adc	r29, r19
 3f8:	aa 24       	eor	r10, r10

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
 3fa:	bb 24       	eor	r11, r11
 3fc:	23 c0       	rjmp	.+70     	; 0x444 <Endpoint_Write_Stream_LE+0x80>
 3fe:	80 91 e8 00 	lds	r24, 0x00E8
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
 402:	85 fd       	sbrc	r24, 5
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
	{
		if (!(Endpoint_IsReadWriteAllowed()))
 404:	16 c0       	rjmp	.+44     	; 0x432 <Endpoint_Write_Stream_LE+0x6e>
 406:	80 91 e8 00 	lds	r24, 0x00E8
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 40a:	8e 77       	andi	r24, 0x7E	; 126
 40c:	80 93 e8 00 	sts	0x00E8, r24
 410:	4a d4       	rcall	.+2196   	; 0xca6 <USB_USBTask>
		{
			TEMPLATE_CLEAR_ENDPOINT();

			#if !defined(INTERRUPT_CONTROL_ENDPOINT)
			USB_USBTask();
 412:	c1 14       	cp	r12, r1
 414:	d1 04       	cpc	r13, r1
			#endif

			if (BytesProcessed != NULL)
 416:	49 f0       	breq	.+18     	; 0x42a <Endpoint_Write_Stream_LE+0x66>
 418:	f6 01       	movw	r30, r12
 41a:	80 81       	ld	r24, Z
			{
				*BytesProcessed += BytesInTransfer;
 41c:	91 81       	ldd	r25, Z+1	; 0x01
 41e:	8a 0d       	add	r24, r10
 420:	9b 1d       	adc	r25, r11
 422:	91 83       	std	Z+1, r25	; 0x01
 424:	80 83       	st	Z, r24
 426:	15 e0       	ldi	r17, 0x05	; 5
 428:	12 c0       	rjmp	.+36     	; 0x44e <Endpoint_Write_Stream_LE+0x8a>
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
 42a:	7b d1       	rcall	.+758    	; 0x722 <Endpoint_WaitUntilReady>
 42c:	88 23       	and	r24, r24
			}

			if ((ErrorCode = Endpoint_WaitUntilReady()))
 42e:	51 f0       	breq	.+20     	; 0x444 <Endpoint_Write_Stream_LE+0x80>
 430:	0d c0       	rjmp	.+26     	; 0x44c <Endpoint_Write_Stream_LE+0x88>
 432:	89 91       	ld	r24, Y+
 434:	80 93 f1 00 	sts	0x00F1, r24
			  return ErrorCode;
		}
		else
		{
			TEMPLATE_TRANSFER_BYTE(DataStream);
 438:	08 94       	sec
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
 43a:	e1 08       	sbc	r14, r1
 43c:	f1 08       	sbc	r15, r1
			TEMPLATE_BUFFER_MOVE(DataStream, 1);
			Length--;
 43e:	08 94       	sec
 440:	a1 1c       	adc	r10, r1
 442:	b1 1c       	adc	r11, r1
			BytesInTransfer++;
 444:	e1 14       	cp	r14, r1
 446:	f1 04       	cpc	r15, r1
 448:	d1 f6       	brne	.-76     	; 0x3fe <Endpoint_Write_Stream_LE+0x3a>
	{
		Length -= *BytesProcessed;
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
 44a:	01 c0       	rjmp	.+2      	; 0x44e <Endpoint_Write_Stream_LE+0x8a>
 44c:	18 2f       	mov	r17, r24
 44e:	81 2f       	mov	r24, r17
 450:	df 91       	pop	r29
			{
				*BytesProcessed += BytesInTransfer;
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
			}

			if ((ErrorCode = Endpoint_WaitUntilReady()))
 452:	cf 91       	pop	r28
			BytesInTransfer++;
		}
	}

	return ENDPOINT_RWSTREAM_NoError;
}
 454:	1f 91       	pop	r17
 456:	ff 90       	pop	r15
 458:	ef 90       	pop	r14
 45a:	df 90       	pop	r13
 45c:	cf 90       	pop	r12
 45e:	bf 90       	pop	r11
 460:	af 90       	pop	r10
 462:	08 95       	ret

00000464 <Endpoint_Read_Stream_LE>:
 464:	af 92       	push	r10
 466:	bf 92       	push	r11
 468:	cf 92       	push	r12
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
 46a:	df 92       	push	r13
 46c:	ef 92       	push	r14
 46e:	ff 92       	push	r15
 470:	1f 93       	push	r17
 472:	cf 93       	push	r28
 474:	df 93       	push	r29
 476:	ec 01       	movw	r28, r24
 478:	7b 01       	movw	r14, r22
 47a:	6a 01       	movw	r12, r20
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	uint16_t BytesInTransfer = 0;
	uint8_t  ErrorCode;

	if ((ErrorCode = Endpoint_WaitUntilReady()))
 47c:	52 d1       	rcall	.+676    	; 0x722 <Endpoint_WaitUntilReady>
 47e:	18 2f       	mov	r17, r24
 480:	88 23       	and	r24, r24
 482:	a9 f5       	brne	.+106    	; 0x4ee <Endpoint_Read_Stream_LE+0x8a>
 484:	c1 14       	cp	r12, r1
	  return ErrorCode;

	if (BytesProcessed != NULL)
 486:	d1 04       	cpc	r13, r1
 488:	39 f0       	breq	.+14     	; 0x498 <Endpoint_Read_Stream_LE+0x34>
 48a:	f6 01       	movw	r30, r12
	{
		Length -= *BytesProcessed;
 48c:	20 81       	ld	r18, Z
 48e:	31 81       	ldd	r19, Z+1	; 0x01
 490:	e2 1a       	sub	r14, r18
 492:	f3 0a       	sbc	r15, r19
 494:	c2 0f       	add	r28, r18
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
 496:	d3 1f       	adc	r29, r19
 498:	aa 24       	eor	r10, r10

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
 49a:	bb 24       	eor	r11, r11
 49c:	23 c0       	rjmp	.+70     	; 0x4e4 <Endpoint_Read_Stream_LE+0x80>
 49e:	80 91 e8 00 	lds	r24, 0x00E8
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
 4a2:	85 fd       	sbrc	r24, 5
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
	{
		if (!(Endpoint_IsReadWriteAllowed()))
 4a4:	16 c0       	rjmp	.+44     	; 0x4d2 <Endpoint_Read_Stream_LE+0x6e>
 4a6:	80 91 e8 00 	lds	r24, 0x00E8
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 4aa:	8b 77       	andi	r24, 0x7B	; 123
 4ac:	80 93 e8 00 	sts	0x00E8, r24
 4b0:	fa d3       	rcall	.+2036   	; 0xca6 <USB_USBTask>
		{
			TEMPLATE_CLEAR_ENDPOINT();

			#if !defined(INTERRUPT_CONTROL_ENDPOINT)
			USB_USBTask();
 4b2:	c1 14       	cp	r12, r1
 4b4:	d1 04       	cpc	r13, r1
			#endif

			if (BytesProcessed != NULL)
 4b6:	49 f0       	breq	.+18     	; 0x4ca <Endpoint_Read_Stream_LE+0x66>
 4b8:	f6 01       	movw	r30, r12
 4ba:	80 81       	ld	r24, Z
			{
				*BytesProcessed += BytesInTransfer;
 4bc:	91 81       	ldd	r25, Z+1	; 0x01
 4be:	8a 0d       	add	r24, r10
 4c0:	9b 1d       	adc	r25, r11
 4c2:	91 83       	std	Z+1, r25	; 0x01
 4c4:	80 83       	st	Z, r24
 4c6:	15 e0       	ldi	r17, 0x05	; 5
 4c8:	12 c0       	rjmp	.+36     	; 0x4ee <Endpoint_Read_Stream_LE+0x8a>
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
 4ca:	2b d1       	rcall	.+598    	; 0x722 <Endpoint_WaitUntilReady>
 4cc:	88 23       	and	r24, r24
			}

			if ((ErrorCode = Endpoint_WaitUntilReady()))
 4ce:	51 f0       	breq	.+20     	; 0x4e4 <Endpoint_Read_Stream_LE+0x80>
 4d0:	0d c0       	rjmp	.+26     	; 0x4ec <Endpoint_Read_Stream_LE+0x88>
 4d2:	80 91 f1 00 	lds	r24, 0x00F1
 4d6:	89 93       	st	Y+, r24
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
 4d8:	08 94       	sec
 4da:	e1 08       	sbc	r14, r1
			  return ErrorCode;
		}
		else
		{
			TEMPLATE_TRANSFER_BYTE(DataStream);
 4dc:	f1 08       	sbc	r15, r1
			TEMPLATE_BUFFER_MOVE(DataStream, 1);
			Length--;
 4de:	08 94       	sec
 4e0:	a1 1c       	adc	r10, r1
 4e2:	b1 1c       	adc	r11, r1
			BytesInTransfer++;
 4e4:	e1 14       	cp	r14, r1
 4e6:	f1 04       	cpc	r15, r1
 4e8:	d1 f6       	brne	.-76     	; 0x49e <Endpoint_Read_Stream_LE+0x3a>
	{
		Length -= *BytesProcessed;
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
 4ea:	01 c0       	rjmp	.+2      	; 0x4ee <Endpoint_Read_Stream_LE+0x8a>
 4ec:	18 2f       	mov	r17, r24
 4ee:	81 2f       	mov	r24, r17
 4f0:	df 91       	pop	r29
			{
				*BytesProcessed += BytesInTransfer;
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
			}

			if ((ErrorCode = Endpoint_WaitUntilReady()))
 4f2:	cf 91       	pop	r28
			BytesInTransfer++;
		}
	}

	return ENDPOINT_RWSTREAM_NoError;
}
 4f4:	1f 91       	pop	r17
 4f6:	ff 90       	pop	r15
 4f8:	ef 90       	pop	r14
 4fa:	df 90       	pop	r13
 4fc:	cf 90       	pop	r12
 4fe:	bf 90       	pop	r11
 500:	af 90       	pop	r10
 502:	08 95       	ret

00000504 <Endpoint_Write_Control_Stream_LE>:
 504:	20 91 0c 01 	lds	r18, 0x010C
 508:	30 91 0d 01 	lds	r19, 0x010D
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
 50c:	26 17       	cp	r18, r22
 50e:	37 07       	cpc	r19, r23
 510:	20 f4       	brcc	.+8      	; 0x51a <Endpoint_Write_Control_Stream_LE+0x16>
 512:	b9 01       	movw	r22, r18
 514:	fc 01       	movw	r30, r24
 516:	20 e0       	ldi	r18, 0x00	; 0
 518:	37 c0       	rjmp	.+110    	; 0x588 <Endpoint_Write_Control_Stream_LE+0x84>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
 51a:	61 15       	cp	r22, r1
 51c:	71 05       	cpc	r23, r1
 51e:	d1 f7       	brne	.-12     	; 0x514 <Endpoint_Write_Control_Stream_LE+0x10>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 520:	20 91 e8 00 	lds	r18, 0x00E8
 524:	2e 77       	andi	r18, 0x7E	; 126
 526:	20 93 e8 00 	sts	0x00E8, r18
 52a:	f4 cf       	rjmp	.-24     	; 0x514 <Endpoint_Write_Control_Stream_LE+0x10>
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
 52c:	80 91 05 01 	lds	r24, 0x0105

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
 530:	88 23       	and	r24, r24
 532:	09 f4       	brne	.+2      	; 0x536 <Endpoint_Write_Control_Stream_LE+0x32>
 534:	3f c0       	rjmp	.+126    	; 0x5b4 <Endpoint_Write_Control_Stream_LE+0xb0>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
 536:	85 30       	cpi	r24, 0x05	; 5
 538:	c9 f1       	breq	.+114    	; 0x5ac <Endpoint_Write_Control_Stream_LE+0xa8>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 53a:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
 53e:	83 fd       	sbrc	r24, 3
 540:	37 c0       	rjmp	.+110    	; 0x5b0 <Endpoint_Write_Control_Stream_LE+0xac>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 542:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
 546:	82 fd       	sbrc	r24, 2
 548:	2b c0       	rjmp	.+86     	; 0x5a0 <Endpoint_Write_Control_Stream_LE+0x9c>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 54a:	80 91 e8 00 	lds	r24, 0x00E8
		  break;

		if (Endpoint_IsINReady())
 54e:	80 ff       	sbrs	r24, 0
 550:	1b c0       	rjmp	.+54     	; 0x588 <Endpoint_Write_Control_Stream_LE+0x84>
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
 552:	80 91 f2 00 	lds	r24, 0x00F2
 556:	90 91 f3 00 	lds	r25, 0x00F3
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
 55a:	06 c0       	rjmp	.+12     	; 0x568 <Endpoint_Write_Control_Stream_LE+0x64>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
 55c:	21 91       	ld	r18, Z+
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
 55e:	20 93 f1 00 	sts	0x00F1, r18
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
 562:	61 50       	subi	r22, 0x01	; 1
 564:	70 40       	sbci	r23, 0x00	; 0
				BytesInEndpoint++;
 566:	01 96       	adiw	r24, 0x01	; 1

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
 568:	61 15       	cp	r22, r1
 56a:	71 05       	cpc	r23, r1
 56c:	19 f0       	breq	.+6      	; 0x574 <Endpoint_Write_Control_Stream_LE+0x70>
 56e:	88 30       	cpi	r24, 0x08	; 8
 570:	91 05       	cpc	r25, r1
 572:	a0 f3       	brcs	.-24     	; 0x55c <Endpoint_Write_Control_Stream_LE+0x58>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
 574:	21 e0       	ldi	r18, 0x01	; 1
 576:	88 30       	cpi	r24, 0x08	; 8
 578:	91 05       	cpc	r25, r1
 57a:	09 f0       	breq	.+2      	; 0x57e <Endpoint_Write_Control_Stream_LE+0x7a>
 57c:	20 e0       	ldi	r18, 0x00	; 0
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 57e:	80 91 e8 00 	lds	r24, 0x00E8
 582:	8e 77       	andi	r24, 0x7E	; 126
 584:	80 93 e8 00 	sts	0x00E8, r24
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
 588:	61 15       	cp	r22, r1
 58a:	71 05       	cpc	r23, r1
 58c:	79 f6       	brne	.-98     	; 0x52c <Endpoint_Write_Control_Stream_LE+0x28>
 58e:	22 23       	and	r18, r18
 590:	69 f6       	brne	.-102    	; 0x52c <Endpoint_Write_Control_Stream_LE+0x28>
 592:	06 c0       	rjmp	.+12     	; 0x5a0 <Endpoint_Write_Control_Stream_LE+0x9c>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
 594:	80 91 05 01 	lds	r24, 0x0105

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
 598:	88 23       	and	r24, r24
 59a:	61 f0       	breq	.+24     	; 0x5b4 <Endpoint_Write_Control_Stream_LE+0xb0>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
 59c:	85 30       	cpi	r24, 0x05	; 5
 59e:	61 f0       	breq	.+24     	; 0x5b8 <Endpoint_Write_Control_Stream_LE+0xb4>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 5a0:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
 5a4:	82 ff       	sbrs	r24, 2
 5a6:	f6 cf       	rjmp	.-20     	; 0x594 <Endpoint_Write_Control_Stream_LE+0x90>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
 5a8:	80 e0       	ldi	r24, 0x00	; 0
 5aa:	08 95       	ret
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
 5ac:	83 e0       	ldi	r24, 0x03	; 3
 5ae:	08 95       	ret
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
 5b0:	81 e0       	ldi	r24, 0x01	; 1
 5b2:	08 95       	ret
	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
 5b4:	82 e0       	ldi	r24, 0x02	; 2
 5b6:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
 5b8:	83 e0       	ldi	r24, 0x03	; 3
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
 5ba:	08 95       	ret

000005bc <Endpoint_Write_Control_PStream_LE>:
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
 5bc:	20 91 0c 01 	lds	r18, 0x010C
 5c0:	30 91 0d 01 	lds	r19, 0x010D
 5c4:	26 17       	cp	r18, r22
 5c6:	37 07       	cpc	r19, r23
 5c8:	20 f4       	brcc	.+8      	; 0x5d2 <Endpoint_Write_Control_PStream_LE+0x16>
 5ca:	b9 01       	movw	r22, r18
 5cc:	fc 01       	movw	r30, r24
 5ce:	20 e0       	ldi	r18, 0x00	; 0
 5d0:	38 c0       	rjmp	.+112    	; 0x642 <Endpoint_Write_Control_PStream_LE+0x86>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
 5d2:	61 15       	cp	r22, r1
 5d4:	71 05       	cpc	r23, r1
 5d6:	d1 f7       	brne	.-12     	; 0x5cc <Endpoint_Write_Control_PStream_LE+0x10>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 5d8:	20 91 e8 00 	lds	r18, 0x00E8
 5dc:	2e 77       	andi	r18, 0x7E	; 126
 5de:	20 93 e8 00 	sts	0x00E8, r18
 5e2:	f4 cf       	rjmp	.-24     	; 0x5cc <Endpoint_Write_Control_PStream_LE+0x10>
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
 5e4:	80 91 05 01 	lds	r24, 0x0105

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
 5e8:	88 23       	and	r24, r24
 5ea:	09 f4       	brne	.+2      	; 0x5ee <Endpoint_Write_Control_PStream_LE+0x32>
 5ec:	40 c0       	rjmp	.+128    	; 0x66e <Endpoint_Write_Control_PStream_LE+0xb2>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
 5ee:	85 30       	cpi	r24, 0x05	; 5
 5f0:	d1 f1       	breq	.+116    	; 0x666 <Endpoint_Write_Control_PStream_LE+0xaa>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 5f2:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
 5f6:	83 fd       	sbrc	r24, 3
 5f8:	38 c0       	rjmp	.+112    	; 0x66a <Endpoint_Write_Control_PStream_LE+0xae>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 5fa:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
 5fe:	82 fd       	sbrc	r24, 2
 600:	2c c0       	rjmp	.+88     	; 0x65a <Endpoint_Write_Control_PStream_LE+0x9e>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 602:	80 91 e8 00 	lds	r24, 0x00E8
		  break;

		if (Endpoint_IsINReady())
 606:	80 ff       	sbrs	r24, 0
 608:	1c c0       	rjmp	.+56     	; 0x642 <Endpoint_Write_Control_PStream_LE+0x86>
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
 60a:	80 91 f2 00 	lds	r24, 0x00F2
 60e:	90 91 f3 00 	lds	r25, 0x00F3
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
 612:	07 c0       	rjmp	.+14     	; 0x622 <Endpoint_Write_Control_PStream_LE+0x66>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
 614:	24 91       	lpm	r18, Z
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
 616:	20 93 f1 00 	sts	0x00F1, r18
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
 61a:	31 96       	adiw	r30, 0x01	; 1
				Length--;
 61c:	61 50       	subi	r22, 0x01	; 1
 61e:	70 40       	sbci	r23, 0x00	; 0
				BytesInEndpoint++;
 620:	01 96       	adiw	r24, 0x01	; 1

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
 622:	61 15       	cp	r22, r1
 624:	71 05       	cpc	r23, r1
 626:	19 f0       	breq	.+6      	; 0x62e <Endpoint_Write_Control_PStream_LE+0x72>
 628:	88 30       	cpi	r24, 0x08	; 8
 62a:	91 05       	cpc	r25, r1
 62c:	98 f3       	brcs	.-26     	; 0x614 <Endpoint_Write_Control_PStream_LE+0x58>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
 62e:	21 e0       	ldi	r18, 0x01	; 1
 630:	88 30       	cpi	r24, 0x08	; 8
 632:	91 05       	cpc	r25, r1
 634:	09 f0       	breq	.+2      	; 0x638 <Endpoint_Write_Control_PStream_LE+0x7c>
 636:	20 e0       	ldi	r18, 0x00	; 0
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 638:	80 91 e8 00 	lds	r24, 0x00E8
 63c:	8e 77       	andi	r24, 0x7E	; 126
 63e:	80 93 e8 00 	sts	0x00E8, r24
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
 642:	61 15       	cp	r22, r1
 644:	71 05       	cpc	r23, r1
 646:	71 f6       	brne	.-100    	; 0x5e4 <Endpoint_Write_Control_PStream_LE+0x28>
 648:	22 23       	and	r18, r18
 64a:	61 f6       	brne	.-104    	; 0x5e4 <Endpoint_Write_Control_PStream_LE+0x28>
 64c:	06 c0       	rjmp	.+12     	; 0x65a <Endpoint_Write_Control_PStream_LE+0x9e>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
 64e:	80 91 05 01 	lds	r24, 0x0105

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
 652:	88 23       	and	r24, r24
 654:	61 f0       	breq	.+24     	; 0x66e <Endpoint_Write_Control_PStream_LE+0xb2>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
 656:	85 30       	cpi	r24, 0x05	; 5
 658:	61 f0       	breq	.+24     	; 0x672 <Endpoint_Write_Control_PStream_LE+0xb6>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 65a:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
 65e:	82 ff       	sbrs	r24, 2
 660:	f6 cf       	rjmp	.-20     	; 0x64e <Endpoint_Write_Control_PStream_LE+0x92>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
 662:	80 e0       	ldi	r24, 0x00	; 0
 664:	08 95       	ret
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
 666:	83 e0       	ldi	r24, 0x03	; 3
 668:	08 95       	ret
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
 66a:	81 e0       	ldi	r24, 0x01	; 1
 66c:	08 95       	ret
	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
 66e:	82 e0       	ldi	r24, 0x02	; 2
 670:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
 672:	83 e0       	ldi	r24, 0x03	; 3
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
 674:	08 95       	ret

00000676 <Endpoint_ConfigureEndpoint_Prv>:
	UECFG0X = UECFG0XData;
	UECFG1X = UECFG1XData;

	return Endpoint_IsConfigured();
#else
	for (uint8_t EPNum = Number; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
 676:	98 2f       	mov	r25, r24
 678:	2a c0       	rjmp	.+84     	; 0x6ce <Endpoint_ConfigureEndpoint_Prv+0x58>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 67a:	90 93 e9 00 	sts	0x00E9, r25
		uint8_t UECFG1XTemp;
		uint8_t UEIENXTemp;

		Endpoint_SelectEndpoint(EPNum);

		if (EPNum == Number)
 67e:	98 17       	cp	r25, r24
 680:	39 f0       	breq	.+14     	; 0x690 <Endpoint_ConfigureEndpoint_Prv+0x1a>
			UECFG1XTemp = UECFG1XData;
			UEIENXTemp  = 0;
		}
		else
		{
			UECFG0XTemp = UECFG0X;
 682:	70 91 ec 00 	lds	r23, 0x00EC
			UECFG1XTemp = UECFG1X;
 686:	20 91 ed 00 	lds	r18, 0x00ED
			UEIENXTemp  = UEIENX;
 68a:	50 91 f0 00 	lds	r21, 0x00F0
 68e:	03 c0       	rjmp	.+6      	; 0x696 <Endpoint_ConfigureEndpoint_Prv+0x20>
		Endpoint_SelectEndpoint(EPNum);

		if (EPNum == Number)
		{
			UECFG0XTemp = UECFG0XData;
			UECFG1XTemp = UECFG1XData;
 690:	24 2f       	mov	r18, r20

		Endpoint_SelectEndpoint(EPNum);

		if (EPNum == Number)
		{
			UECFG0XTemp = UECFG0XData;
 692:	76 2f       	mov	r23, r22
			UECFG1XTemp = UECFG1XData;
			UEIENXTemp  = 0;
 694:	50 e0       	ldi	r21, 0x00	; 0
			UECFG0XTemp = UECFG0X;
			UECFG1XTemp = UECFG1X;
			UEIENXTemp  = UEIENX;
		}

		if (!(UECFG1XTemp & (1 << ALLOC)))
 696:	21 ff       	sbrs	r18, 1
 698:	19 c0       	rjmp	.+50     	; 0x6cc <Endpoint_ConfigureEndpoint_Prv+0x56>
			 *  to and from a host.
			 */
			static inline void Endpoint_DisableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_DisableEndpoint(void)
			{
				UECONX &= ~(1 << EPEN);
 69a:	30 91 eb 00 	lds	r19, 0x00EB
 69e:	3e 7f       	andi	r19, 0xFE	; 254
 6a0:	30 93 eb 00 	sts	0x00EB, r19
		  continue;

		Endpoint_DisableEndpoint();
		UECFG1X &= ~(1 << ALLOC);
 6a4:	30 91 ed 00 	lds	r19, 0x00ED
 6a8:	3d 7f       	andi	r19, 0xFD	; 253
 6aa:	30 93 ed 00 	sts	0x00ED, r19
			 *  \note Endpoints must first be configured properly via \ref Endpoint_ConfigureEndpoint().
			 */
			static inline void Endpoint_EnableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_EnableEndpoint(void)
			{
				UECONX |= (1 << EPEN);
 6ae:	30 91 eb 00 	lds	r19, 0x00EB
 6b2:	31 60       	ori	r19, 0x01	; 1
 6b4:	30 93 eb 00 	sts	0x00EB, r19

		Endpoint_EnableEndpoint();
		UECFG0X = UECFG0XTemp;
 6b8:	70 93 ec 00 	sts	0x00EC, r23
		UECFG1X = UECFG1XTemp;
 6bc:	20 93 ed 00 	sts	0x00ED, r18
		UEIENX  = UEIENXTemp;
 6c0:	50 93 f0 00 	sts	0x00F0, r21
			 *  \return Boolean \c true if the currently selected endpoint has been configured, \c false otherwise.
			 */
			static inline bool Endpoint_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsConfigured(void)
			{
				return ((UESTA0X & (1 << CFGOK)) ? true : false);
 6c4:	20 91 ee 00 	lds	r18, 0x00EE

		if (!(Endpoint_IsConfigured()))
 6c8:	27 ff       	sbrs	r18, 7
 6ca:	08 c0       	rjmp	.+16     	; 0x6dc <Endpoint_ConfigureEndpoint_Prv+0x66>
	UECFG0X = UECFG0XData;
	UECFG1X = UECFG1XData;

	return Endpoint_IsConfigured();
#else
	for (uint8_t EPNum = Number; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
 6cc:	9f 5f       	subi	r25, 0xFF	; 255
 6ce:	97 30       	cpi	r25, 0x07	; 7
 6d0:	a0 f2       	brcs	.-88     	; 0x67a <Endpoint_ConfigureEndpoint_Prv+0x4>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 6d2:	8f 70       	andi	r24, 0x0F	; 15
 6d4:	80 93 e9 00 	sts	0x00E9, r24
		if (!(Endpoint_IsConfigured()))
		  return false;
	}

	Endpoint_SelectEndpoint(Number);
	return true;
 6d8:	81 e0       	ldi	r24, 0x01	; 1
 6da:	08 95       	ret
		UECFG0X = UECFG0XTemp;
		UECFG1X = UECFG1XTemp;
		UEIENX  = UEIENXTemp;

		if (!(Endpoint_IsConfigured()))
		  return false;
 6dc:	80 e0       	ldi	r24, 0x00	; 0
	}

	Endpoint_SelectEndpoint(Number);
	return true;
#endif
}
 6de:	08 95       	ret

000006e0 <Endpoint_ClearStatusStage>:
	}
}

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
 6e0:	80 91 06 01 	lds	r24, 0x0106
 6e4:	87 ff       	sbrs	r24, 7
 6e6:	13 c0       	rjmp	.+38     	; 0x70e <Endpoint_ClearStatusStage+0x2e>
 6e8:	04 c0       	rjmp	.+8      	; 0x6f2 <Endpoint_ClearStatusStage+0x12>
	{
		while (!(Endpoint_IsOUTReceived()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
 6ea:	80 91 05 01 	lds	r24, 0x0105
 6ee:	88 23       	and	r24, r24
 6f0:	b9 f0       	breq	.+46     	; 0x720 <Endpoint_ClearStatusStage+0x40>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 6f2:	80 91 e8 00 	lds	r24, 0x00E8

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
	{
		while (!(Endpoint_IsOUTReceived()))
 6f6:	82 ff       	sbrs	r24, 2
 6f8:	f8 cf       	rjmp	.-16     	; 0x6ea <Endpoint_ClearStatusStage+0xa>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 6fa:	80 91 e8 00 	lds	r24, 0x00E8
 6fe:	8b 77       	andi	r24, 0x7B	; 123
 700:	80 93 e8 00 	sts	0x00E8, r24
 704:	08 95       	ret
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
 706:	80 91 05 01 	lds	r24, 0x0105
 70a:	88 23       	and	r24, r24
 70c:	49 f0       	breq	.+18     	; 0x720 <Endpoint_ClearStatusStage+0x40>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 70e:	80 91 e8 00 	lds	r24, 0x00E8

		Endpoint_ClearOUT();
	}
	else
	{
		while (!(Endpoint_IsINReady()))
 712:	80 ff       	sbrs	r24, 0
 714:	f8 cf       	rjmp	.-16     	; 0x706 <Endpoint_ClearStatusStage+0x26>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 716:	80 91 e8 00 	lds	r24, 0x00E8
 71a:	8e 77       	andi	r24, 0x7E	; 126
 71c:	80 93 e8 00 	sts	0x00E8, r24
 720:	08 95       	ret

00000722 <Endpoint_WaitUntilReady>:
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
 722:	80 91 e4 00 	lds	r24, 0x00E4
 726:	90 91 e5 00 	lds	r25, 0x00E5
 72a:	45 e6       	ldi	r20, 0x65	; 101
 72c:	01 c0       	rjmp	.+2      	; 0x730 <Endpoint_WaitUntilReady+0xe>
 72e:	c9 01       	movw	r24, r18
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
 730:	20 91 ec 00 	lds	r18, 0x00EC
 734:	20 ff       	sbrs	r18, 0
 736:	23 c0       	rjmp	.+70     	; 0x77e <Endpoint_WaitUntilReady+0x5c>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 738:	20 91 e8 00 	lds	r18, 0x00E8

	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
 73c:	20 fd       	sbrc	r18, 0
 73e:	15 c0       	rjmp	.+42     	; 0x76a <Endpoint_WaitUntilReady+0x48>
		{
			if (Endpoint_IsOUTReceived())
			  return ENDPOINT_READYWAIT_NoError;
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;
 740:	20 91 05 01 	lds	r18, 0x0105

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
 744:	22 23       	and	r18, r18
 746:	99 f0       	breq	.+38     	; 0x76e <Endpoint_WaitUntilReady+0x4c>
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
 748:	25 30       	cpi	r18, 0x05	; 5
 74a:	99 f0       	breq	.+38     	; 0x772 <Endpoint_WaitUntilReady+0x50>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
 74c:	20 91 eb 00 	lds	r18, 0x00EB
		  return ENDPOINT_READYWAIT_BusSuspended;
		else if (Endpoint_IsStalled())
 750:	25 fd       	sbrc	r18, 5
 752:	11 c0       	rjmp	.+34     	; 0x776 <Endpoint_WaitUntilReady+0x54>
 754:	20 91 e4 00 	lds	r18, 0x00E4
 758:	30 91 e5 00 	lds	r19, 0x00E5
		  return ENDPOINT_READYWAIT_EndpointStalled;

		uint16_t CurrentFrameNumber = USB_Device_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
 75c:	28 17       	cp	r18, r24
 75e:	39 07       	cpc	r19, r25
 760:	39 f3       	breq	.-50     	; 0x730 <Endpoint_WaitUntilReady+0xe>
 762:	41 50       	subi	r20, 0x01	; 1
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
 764:	21 f7       	brne	.-56     	; 0x72e <Endpoint_WaitUntilReady+0xc>
			  return ENDPOINT_READYWAIT_Timeout;
 766:	84 e0       	ldi	r24, 0x04	; 4
 768:	08 95       	ret
	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
 76a:	80 e0       	ldi	r24, 0x00	; 0
 76c:	08 95       	ret
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
 76e:	82 e0       	ldi	r24, 0x02	; 2
 770:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_READYWAIT_BusSuspended;
 772:	83 e0       	ldi	r24, 0x03	; 3
 774:	08 95       	ret
		else if (Endpoint_IsStalled())
		  return ENDPOINT_READYWAIT_EndpointStalled;
 776:	81 e0       	ldi	r24, 0x01	; 1
 778:	08 95       	ret
			  return ENDPOINT_READYWAIT_NoError;
		}
		else
		{
			if (Endpoint_IsOUTReceived())
			  return ENDPOINT_READYWAIT_NoError;
 77a:	80 e0       	ldi	r24, 0x00	; 0

			if (!(TimeoutMSRem--))
			  return ENDPOINT_READYWAIT_Timeout;
		}
	}
}
 77c:	08 95       	ret
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 77e:	20 91 e8 00 	lds	r18, 0x00E8
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
		}
		else
		{
			if (Endpoint_IsOUTReceived())
 782:	22 ff       	sbrs	r18, 2
 784:	dd cf       	rjmp	.-70     	; 0x740 <Endpoint_WaitUntilReady+0x1e>
 786:	f9 cf       	rjmp	.-14     	; 0x77a <Endpoint_WaitUntilReady+0x58>

00000788 <USB_ResetInterface>:

	USB_IsInitialized = false;
}

void USB_ResetInterface(void)
{
 788:	0f 93       	push	r16
 78a:	1f 93       	push	r17
 78c:	cf 93       	push	r28
 78e:	df 93       	push	r29
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
 790:	4e d0       	rcall	.+156    	; 0x82e <USB_INT_DisableAllInterrupts>
 792:	55 d0       	rcall	.+170    	; 0x83e <USB_INT_ClearAllInterrupts>
	USB_INT_ClearAllInterrupts();
 794:	c8 ed       	ldi	r28, 0xD8	; 216
 796:	d0 e0       	ldi	r29, 0x00	; 0
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
 798:	88 81       	ld	r24, Y
 79a:	8f 77       	andi	r24, 0x7F	; 127
 79c:	88 83       	st	Y, r24
 79e:	88 81       	ld	r24, Y
 7a0:	80 68       	ori	r24, 0x80	; 128
				USBCON |=  (1 << USBE);
 7a2:	88 83       	st	Y, r24
 7a4:	88 81       	ld	r24, Y
 7a6:	8f 7d       	andi	r24, 0xDF	; 223
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
 7a8:	88 83       	st	Y, r24
 7aa:	e7 ed       	ldi	r30, 0xD7	; 215
 7ac:	f0 e0       	ldi	r31, 0x00	; 0

	if (USB_CurrentMode == USB_MODE_Device)
	{
		#if defined(USB_CAN_BE_DEVICE)
		#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
		UHWCON |=  (1 << UIMOD);
 7ae:	80 81       	ld	r24, Z
 7b0:	80 68       	ori	r24, 0x80	; 128
 7b2:	80 83       	st	Z, r24
 7b4:	19 bc       	out	0x29, r1	; 41
 7b6:	10 92 05 01 	sts	0x0105, r1
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState                 = DEVICE_STATE_Unattached;
 7ba:	10 92 01 01 	sts	0x0101, r1
	USB_Device_ConfigurationNumber  = 0;
 7be:	10 92 03 01 	sts	0x0103, r1

	#if !defined(NO_DEVICE_REMOTE_WAKEUP)
	USB_Device_RemoteWakeupEnabled  = false;
 7c2:	10 92 02 01 	sts	0x0102, r1
	#endif

	#if !defined(NO_DEVICE_SELF_POWER)
	USB_Device_CurrentlySelfPowered = false;
 7c6:	00 ee       	ldi	r16, 0xE0	; 224
 7c8:	10 e0       	ldi	r17, 0x00	; 0
			}

			static inline void USB_Device_SetFullSpeed(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetFullSpeed(void)
			{
				UDCON &= ~(1 << LSM);
 7ca:	f8 01       	movw	r30, r16
 7cc:	80 81       	ld	r24, Z
 7ce:	8b 7f       	andi	r24, 0xFB	; 251
 7d0:	80 83       	st	Z, r24
 7d2:	88 81       	ld	r24, Y
 7d4:	81 60       	ori	r24, 0x01	; 1
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBCON |= (1 << VBUSTE);
 7d6:	88 83       	st	Y, r24
 7d8:	80 e0       	ldi	r24, 0x00	; 0
 7da:	60 e0       	ldi	r22, 0x00	; 0
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
 7dc:	42 e0       	ldi	r20, 0x02	; 2
 7de:	4b df       	rcall	.-362    	; 0x676 <Endpoint_ConfigureEndpoint_Prv>
 7e0:	e1 ee       	ldi	r30, 0xE1	; 225
 7e2:	f0 e0       	ldi	r31, 0x00	; 0
 7e4:	80 81       	ld	r24, Z
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
 7e6:	8e 7f       	andi	r24, 0xFE	; 254
 7e8:	80 83       	st	Z, r24
 7ea:	e2 ee       	ldi	r30, 0xE2	; 226
 7ec:	f0 e0       	ldi	r31, 0x00	; 0
 7ee:	80 81       	ld	r24, Z
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
 7f0:	81 60       	ori	r24, 0x01	; 1
 7f2:	80 83       	st	Z, r24
 7f4:	80 81       	ld	r24, Z
 7f6:	88 60       	ori	r24, 0x08	; 8
 7f8:	80 83       	st	Z, r24
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
 7fa:	f8 01       	movw	r30, r16
 7fc:	80 81       	ld	r24, Z
 7fe:	8e 7f       	andi	r24, 0xFE	; 254
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
 800:	80 83       	st	Z, r24
 802:	88 81       	ld	r24, Y
 804:	80 61       	ori	r24, 0x10	; 16
 806:	88 83       	st	Y, r24

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON |=  (1 << OTGPADE);
 808:	df 91       	pop	r29
 80a:	cf 91       	pop	r28
 80c:	1f 91       	pop	r17
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
 80e:	0f 91       	pop	r16
 810:	08 95       	ret

00000812 <USB_Init>:
 812:	e8 ed       	ldi	r30, 0xD8	; 216
 814:	f0 e0       	ldi	r31, 0x00	; 0
 816:	80 81       	ld	r24, Z
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON &= ~(1 << OTGPADE);
 818:	8f 7e       	andi	r24, 0xEF	; 239
 81a:	80 83       	st	Z, r24

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON |=  (1 << UVREGE);
 81c:	e7 ed       	ldi	r30, 0xD7	; 215
 81e:	f0 e0       	ldi	r31, 0x00	; 0
 820:	80 81       	ld	r24, Z
 822:	81 60       	ori	r24, 0x01	; 1
 824:	80 83       	st	Z, r24
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
 826:	81 e0       	ldi	r24, 0x01	; 1
 828:	80 93 04 01 	sts	0x0104, r24

	USB_ResetInterface();
 82c:	ad cf       	rjmp	.-166    	; 0x788 <USB_ResetInterface>

0000082e <USB_INT_DisableAllInterrupts>:
#include "../USBInterrupt.h"

void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
 82e:	e8 ed       	ldi	r30, 0xD8	; 216
 830:	f0 e0       	ldi	r31, 0x00	; 0
 832:	80 81       	ld	r24, Z
 834:	8c 7f       	andi	r24, 0xFC	; 252
 836:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
 838:	10 92 e2 00 	sts	0x00E2, r1
	#endif
}
 83c:	08 95       	ret

0000083e <USB_INT_ClearAllInterrupts>:

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
 83e:	10 92 da 00 	sts	0x00DA, r1
	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
 842:	10 92 e1 00 	sts	0x00E1, r1
	#endif
}
 846:	08 95       	ret

00000848 <__vector_10>:

ISR(USB_GEN_vect, ISR_BLOCK)
{
 848:	1f 92       	push	r1
 84a:	0f 92       	push	r0
 84c:	0f b6       	in	r0, 0x3f	; 63
 84e:	0f 92       	push	r0
 850:	0b b6       	in	r0, 0x3b	; 59
 852:	0f 92       	push	r0
 854:	11 24       	eor	r1, r1
 856:	2f 93       	push	r18
 858:	3f 93       	push	r19
 85a:	4f 93       	push	r20
 85c:	5f 93       	push	r21
 85e:	6f 93       	push	r22
 860:	7f 93       	push	r23
 862:	8f 93       	push	r24
 864:	9f 93       	push	r25
 866:	af 93       	push	r26
 868:	bf 93       	push	r27
 86a:	ef 93       	push	r30
 86c:	ff 93       	push	r31
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
					case USB_INT_SOFI:
						return (UDINT  & (1 << SOFI));
 86e:	80 91 e1 00 	lds	r24, 0x00E1
	#if defined(USB_CAN_BE_DEVICE)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
 872:	82 ff       	sbrs	r24, 2
 874:	0a c0       	rjmp	.+20     	; 0x88a <__vector_10+0x42>
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
					case USB_INT_SOFI:
						return (UDIEN  & (1 << SOFE));
 876:	80 91 e2 00 	lds	r24, 0x00E2
 87a:	82 ff       	sbrs	r24, 2
 87c:	06 c0       	rjmp	.+12     	; 0x88a <__vector_10+0x42>
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
						break;
					case USB_INT_SOFI:
						UDINT  &= ~(1 << SOFI);
 87e:	80 91 e1 00 	lds	r24, 0x00E1
 882:	8b 7f       	andi	r24, 0xFB	; 251
 884:	80 93 e1 00 	sts	0x00E1, r24
	{
		USB_INT_Clear(USB_INT_SOFI);

		EVENT_USB_Device_StartOfFrame();
 888:	0d d2       	rcall	.+1050   	; 0xca4 <USB_Event_Stub>
 88a:	80 91 da 00 	lds	r24, 0x00DA
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBINT & (1 << VBUSTI));
 88e:	80 ff       	sbrs	r24, 0
	}
	#endif

	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	if (USB_INT_HasOccurred(USB_INT_VBUSTI) && USB_INT_IsEnabled(USB_INT_VBUSTI))
 890:	1d c0       	rjmp	.+58     	; 0x8cc <__vector_10+0x84>
 892:	80 91 d8 00 	lds	r24, 0x00D8
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBCON & (1 << VBUSTE));
 896:	80 ff       	sbrs	r24, 0
 898:	19 c0       	rjmp	.+50     	; 0x8cc <__vector_10+0x84>
 89a:	80 91 da 00 	lds	r24, 0x00DA
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBINT &= ~(1 << VBUSTI);
 89e:	8e 7f       	andi	r24, 0xFE	; 254
 8a0:	80 93 da 00 	sts	0x00DA, r24
 8a4:	80 91 d9 00 	lds	r24, 0x00D9
				 *  \return Boolean \c true if the VBUS line is currently detecting power from a host, \c false otherwise.
				 */
				static inline bool USB_VBUS_GetStatus(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
				static inline bool USB_VBUS_GetStatus(void)
				{
					return ((USBSTA & (1 << VBUS)) ? true : false);
 8a8:	80 ff       	sbrs	r24, 0
	{
		USB_INT_Clear(USB_INT_VBUSTI);

		if (USB_VBUS_GetStatus())
 8aa:	0c c0       	rjmp	.+24     	; 0x8c4 <__vector_10+0x7c>
 8ac:	8c e0       	ldi	r24, 0x0C	; 12

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
 8ae:	89 bd       	out	0x29, r24	; 41
 8b0:	8e e0       	ldi	r24, 0x0E	; 14
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
 8b2:	89 bd       	out	0x29, r24	; 41
 8b4:	09 b4       	in	r0, 0x29	; 41
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			{
				USB_PLL_On();
				while (!(USB_PLL_IsReady()));
 8b6:	00 fe       	sbrs	r0, 0
 8b8:	fd cf       	rjmp	.-6      	; 0x8b4 <__vector_10+0x6c>
 8ba:	81 e0       	ldi	r24, 0x01	; 1
			}

			USB_DeviceState = DEVICE_STATE_Powered;
 8bc:	80 93 05 01 	sts	0x0105, r24
 8c0:	93 dc       	rcall	.-1754   	; 0x1e8 <EVENT_USB_Device_Connect>
			EVENT_USB_Device_Connect();
 8c2:	04 c0       	rjmp	.+8      	; 0x8cc <__vector_10+0x84>
 8c4:	19 bc       	out	0x29, r1	; 41
 8c6:	10 92 05 01 	sts	0x0105, r1
		else
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			  USB_PLL_Off();

			USB_DeviceState = DEVICE_STATE_Unattached;
 8ca:	90 dc       	rcall	.-1760   	; 0x1ec <EVENT_USB_Device_Disconnect>
 8cc:	80 91 e1 00 	lds	r24, 0x00E1
			EVENT_USB_Device_Disconnect();
 8d0:	80 ff       	sbrs	r24, 0
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
 8d2:	18 c0       	rjmp	.+48     	; 0x904 <__vector_10+0xbc>
 8d4:	80 91 e2 00 	lds	r24, 0x00E2
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
 8d8:	80 ff       	sbrs	r24, 0
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
 8da:	14 c0       	rjmp	.+40     	; 0x904 <__vector_10+0xbc>
 8dc:	80 91 e2 00 	lds	r24, 0x00E2
 8e0:	8e 7f       	andi	r24, 0xFE	; 254
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
 8e2:	80 93 e2 00 	sts	0x00E2, r24
 8e6:	80 91 e2 00 	lds	r24, 0x00E2
 8ea:	80 61       	ori	r24, 0x10	; 16
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
 8ec:	80 93 e2 00 	sts	0x00E2, r24
 8f0:	80 91 d8 00 	lds	r24, 0x00D8
 8f4:	80 62       	ori	r24, 0x20	; 32
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON |=  (1 << FRZCLK);
 8f6:	80 93 d8 00 	sts	0x00D8, r24
 8fa:	19 bc       	out	0x29, r1	; 41
 8fc:	85 e0       	ldi	r24, 0x05	; 5
 8fe:	80 93 05 01 	sts	0x0105, r24

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
		EVENT_USB_Device_Disconnect();
		#else
		USB_DeviceState = DEVICE_STATE_Suspended;
 902:	d0 d1       	rcall	.+928    	; 0xca4 <USB_Event_Stub>
 904:	80 91 e1 00 	lds	r24, 0x00E1
		EVENT_USB_Device_Suspend();
 908:	84 ff       	sbrs	r24, 4
 90a:	2d c0       	rjmp	.+90     	; 0x966 <__vector_10+0x11e>
					case USB_INT_IDTI:
						return (USBINT & (1 << IDTI));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
 90c:	80 91 e2 00 	lds	r24, 0x00E2
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
 910:	84 ff       	sbrs	r24, 4
 912:	29 c0       	rjmp	.+82     	; 0x966 <__vector_10+0x11e>
					case USB_INT_IDTI:
						return (USBCON & (1 << IDTE));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
 914:	8c e0       	ldi	r24, 0x0C	; 12
 916:	89 bd       	out	0x29, r24	; 41
 918:	8e e0       	ldi	r24, 0x0E	; 14
 91a:	89 bd       	out	0x29, r24	; 41

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
 91c:	09 b4       	in	r0, 0x29	; 41
 91e:	00 fe       	sbrs	r0, 0
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
 920:	fd cf       	rjmp	.-6      	; 0x91c <__vector_10+0xd4>
 922:	80 91 d8 00 	lds	r24, 0x00D8
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
 926:	8f 7d       	andi	r24, 0xDF	; 223
 928:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
 92c:	80 91 e1 00 	lds	r24, 0x00E1
 930:	8f 7e       	andi	r24, 0xEF	; 239
 932:	80 93 e1 00 	sts	0x00E1, r24
						USBINT &= ~(1 << IDTI);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
 936:	80 91 e2 00 	lds	r24, 0x00E2
 93a:	8f 7e       	andi	r24, 0xEF	; 239
 93c:	80 93 e2 00 	sts	0x00E2, r24
						USBCON &= ~(1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
 940:	80 91 e2 00 	lds	r24, 0x00E2
 944:	81 60       	ori	r24, 0x01	; 1
 946:	80 93 e2 00 	sts	0x00E2, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
 94a:	80 91 01 01 	lds	r24, 0x0101
 94e:	88 23       	and	r24, r24
 950:	21 f4       	brne	.+8      	; 0x95a <__vector_10+0x112>
		USB_INT_Clear(USB_INT_WAKEUPI);

		USB_INT_Disable(USB_INT_WAKEUPI);
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_Device_ConfigurationNumber)
 952:	80 91 e3 00 	lds	r24, 0x00E3
 956:	87 ff       	sbrs	r24, 7
 958:	02 c0       	rjmp	.+4      	; 0x95e <__vector_10+0x116>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
 95a:	84 e0       	ldi	r24, 0x04	; 4
 95c:	01 c0       	rjmp	.+2      	; 0x960 <__vector_10+0x118>
		  USB_DeviceState = DEVICE_STATE_Configured;
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
 95e:	81 e0       	ldi	r24, 0x01	; 1
 960:	80 93 05 01 	sts	0x0105, r24
 964:	9f d1       	rcall	.+830    	; 0xca4 <USB_Event_Stub>
 966:	80 91 e1 00 	lds	r24, 0x00E1
 96a:	83 ff       	sbrs	r24, 3

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
		#else
		EVENT_USB_Device_WakeUp();
 96c:	22 c0       	rjmp	.+68     	; 0x9b2 <__vector_10+0x16a>
 96e:	80 91 e2 00 	lds	r24, 0x00E2
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
 972:	83 ff       	sbrs	r24, 3
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
 974:	1e c0       	rjmp	.+60     	; 0x9b2 <__vector_10+0x16a>
 976:	80 91 e1 00 	lds	r24, 0x00E1
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
 97a:	87 7f       	andi	r24, 0xF7	; 247
 97c:	80 93 e1 00 	sts	0x00E1, r24
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
 980:	82 e0       	ldi	r24, 0x02	; 2
 982:	80 93 05 01 	sts	0x0105, r24
 986:	10 92 01 01 	sts	0x0101, r1
	{
		USB_INT_Clear(USB_INT_EORSTI);

		USB_DeviceState                = DEVICE_STATE_Default;
 98a:	80 91 e1 00 	lds	r24, 0x00E1
 98e:	8e 7f       	andi	r24, 0xFE	; 254
		USB_Device_ConfigurationNumber = 0;
 990:	80 93 e1 00 	sts	0x00E1, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
 994:	80 91 e2 00 	lds	r24, 0x00E2
 998:	8e 7f       	andi	r24, 0xFE	; 254
 99a:	80 93 e2 00 	sts	0x00E2, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
 99e:	80 91 e2 00 	lds	r24, 0x00E2
 9a2:	80 61       	ori	r24, 0x10	; 16
 9a4:	80 93 e2 00 	sts	0x00E2, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
 9a8:	80 e0       	ldi	r24, 0x00	; 0
 9aa:	60 e0       	ldi	r22, 0x00	; 0
 9ac:	42 e0       	ldi	r20, 0x02	; 2
 9ae:	63 de       	rcall	.-826    	; 0x676 <Endpoint_ConfigureEndpoint_Prv>
 9b0:	79 d1       	rcall	.+754    	; 0xca4 <USB_Event_Stub>
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
 9b2:	ff 91       	pop	r31
 9b4:	ef 91       	pop	r30
 9b6:	bf 91       	pop	r27
 9b8:	af 91       	pop	r26
 9ba:	9f 91       	pop	r25

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
 9bc:	8f 91       	pop	r24
 9be:	7f 91       	pop	r23
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
 9c0:	6f 91       	pop	r22
 9c2:	5f 91       	pop	r21
 9c4:	4f 91       	pop	r20
 9c6:	3f 91       	pop	r19
 9c8:	2f 91       	pop	r18
 9ca:	0f 90       	pop	r0
 9cc:	0b be       	out	0x3b, r0	; 59
 9ce:	0f 90       	pop	r0
 9d0:	0f be       	out	0x3f, r0	; 63
 9d2:	0f 90       	pop	r0
 9d4:	1f 90       	pop	r1
 9d6:	18 95       	reti

000009d8 <USB_Device_ProcessControlRequest>:
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_Device_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
 9d8:	1f 93       	push	r17
 9da:	cf 93       	push	r28
 9dc:	df 93       	push	r29
 9de:	cd b7       	in	r28, 0x3d	; 61
 9e0:	de b7       	in	r29, 0x3e	; 62
 9e2:	ac 97       	sbiw	r28, 0x2c	; 44
 9e4:	0f b6       	in	r0, 0x3f	; 63
 9e6:	f8 94       	cli
 9e8:	de bf       	out	0x3e, r29	; 62
 9ea:	0f be       	out	0x3f, r0	; 63
 9ec:	cd bf       	out	0x3d, r28	; 61
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
 9ee:	80 e0       	ldi	r24, 0x00	; 0
	USB_ControlRequest.bRequest      = Endpoint_Read_8();
	USB_ControlRequest.wValue        = Endpoint_Read_16_LE();
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;
 9f0:	e6 e0       	ldi	r30, 0x06	; 6
 9f2:	f1 e0       	ldi	r31, 0x01	; 1
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
 9f4:	90 91 f1 00 	lds	r25, 0x00F1

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_8();
 9f8:	91 93       	st	Z+, r25
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
 9fa:	8f 5f       	subi	r24, 0xFF	; 255
 9fc:	88 30       	cpi	r24, 0x08	; 8
 9fe:	d1 f7       	brne	.-12     	; 0x9f4 <USB_Device_ProcessControlRequest+0x1c>
	  *(RequestHeader++) = Endpoint_Read_8();
	#endif

	EVENT_USB_Device_ControlRequest();
 a00:	51 d1       	rcall	.+674    	; 0xca4 <USB_Event_Stub>
 a02:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 a06:	83 ff       	sbrs	r24, 3

	if (Endpoint_IsSETUPReceived())
 a08:	35 c1       	rjmp	.+618    	; 0xc74 <USB_Device_ProcessControlRequest+0x29c>
 a0a:	80 91 06 01 	lds	r24, 0x0106
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
 a0e:	20 91 07 01 	lds	r18, 0x0107

		switch (USB_ControlRequest.bRequest)
 a12:	25 30       	cpi	r18, 0x05	; 5
 a14:	09 f4       	brne	.+2      	; 0xa18 <USB_Device_ProcessControlRequest+0x40>
 a16:	84 c0       	rjmp	.+264    	; 0xb20 <USB_Device_ProcessControlRequest+0x148>
 a18:	26 30       	cpi	r18, 0x06	; 6
 a1a:	40 f4       	brcc	.+16     	; 0xa2c <USB_Device_ProcessControlRequest+0x54>
 a1c:	21 30       	cpi	r18, 0x01	; 1
 a1e:	a1 f1       	breq	.+104    	; 0xa88 <USB_Device_ProcessControlRequest+0xb0>
 a20:	21 30       	cpi	r18, 0x01	; 1
 a22:	70 f0       	brcs	.+28     	; 0xa40 <USB_Device_ProcessControlRequest+0x68>
 a24:	23 30       	cpi	r18, 0x03	; 3
 a26:	09 f0       	breq	.+2      	; 0xa2a <USB_Device_ProcessControlRequest+0x52>
 a28:	25 c1       	rjmp	.+586    	; 0xc74 <USB_Device_ProcessControlRequest+0x29c>
 a2a:	2e c0       	rjmp	.+92     	; 0xa88 <USB_Device_ProcessControlRequest+0xb0>
 a2c:	28 30       	cpi	r18, 0x08	; 8
 a2e:	09 f4       	brne	.+2      	; 0xa32 <USB_Device_ProcessControlRequest+0x5a>
 a30:	f3 c0       	rjmp	.+486    	; 0xc18 <USB_Device_ProcessControlRequest+0x240>
 a32:	29 30       	cpi	r18, 0x09	; 9
 a34:	09 f4       	brne	.+2      	; 0xa38 <USB_Device_ProcessControlRequest+0x60>
 a36:	02 c1       	rjmp	.+516    	; 0xc3c <USB_Device_ProcessControlRequest+0x264>
 a38:	26 30       	cpi	r18, 0x06	; 6
 a3a:	09 f0       	breq	.+2      	; 0xa3e <USB_Device_ProcessControlRequest+0x66>
 a3c:	1b c1       	rjmp	.+566    	; 0xc74 <USB_Device_ProcessControlRequest+0x29c>
 a3e:	93 c0       	rjmp	.+294    	; 0xb66 <USB_Device_ProcessControlRequest+0x18e>
 a40:	80 38       	cpi	r24, 0x80	; 128
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
 a42:	21 f0       	breq	.+8      	; 0xa4c <USB_Device_ProcessControlRequest+0x74>
 a44:	82 38       	cpi	r24, 0x82	; 130
 a46:	09 f0       	breq	.+2      	; 0xa4a <USB_Device_ProcessControlRequest+0x72>
 a48:	15 c1       	rjmp	.+554    	; 0xc74 <USB_Device_ProcessControlRequest+0x29c>
 a4a:	08 c0       	rjmp	.+16     	; 0xa5c <USB_Device_ProcessControlRequest+0x84>
 a4c:	80 91 02 01 	lds	r24, 0x0102
	Endpoint_ClearOUT();
}

static void USB_Device_GetStatus(void)
{
	uint8_t CurrentStatus = 0;
 a50:	90 91 03 01 	lds	r25, 0x0103
			if (USB_Device_CurrentlySelfPowered)
			  CurrentStatus |= FEATURE_SELFPOWERED_ENABLED;
			#endif

			#if !defined(NO_DEVICE_REMOTE_WAKEUP)
			if (USB_Device_RemoteWakeupEnabled)
 a54:	99 23       	and	r25, r25
 a56:	71 f0       	breq	.+28     	; 0xa74 <USB_Device_ProcessControlRequest+0x9c>
 a58:	82 60       	ori	r24, 0x02	; 2
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
 a5a:	0c c0       	rjmp	.+24     	; 0xa74 <USB_Device_ProcessControlRequest+0x9c>
 a5c:	80 91 0a 01 	lds	r24, 0x010A
			#endif
			break;
		case (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_ENDPOINT):
			#if !defined(CONTROL_ONLY_DEVICE)
			Endpoint_SelectEndpoint((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
 a60:	8f 70       	andi	r24, 0x0F	; 15
 a62:	80 93 e9 00 	sts	0x00E9, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 a66:	90 91 eb 00 	lds	r25, 0x00EB
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
 a6a:	81 e0       	ldi	r24, 0x01	; 1

			CurrentStatus = Endpoint_IsStalled();
 a6c:	95 ff       	sbrs	r25, 5
 a6e:	80 e0       	ldi	r24, 0x00	; 0
 a70:	10 92 e9 00 	sts	0x00E9, r1
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 a74:	90 91 e8 00 	lds	r25, 0x00E8
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 a78:	97 7f       	andi	r25, 0xF7	; 247
 a7a:	90 93 e8 00 	sts	0x00E8, r25
 a7e:	80 93 f1 00 	sts	0x00F1, r24
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
 a82:	10 92 f1 00 	sts	0x00F1, r1
				UEDATX = (Data >> 8);
 a86:	d3 c0       	rjmp	.+422    	; 0xc2e <USB_Device_ProcessControlRequest+0x256>
 a88:	88 23       	and	r24, r24
				}

				break;
			case REQ_ClearFeature:
			case REQ_SetFeature:
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
 a8a:	19 f0       	breq	.+6      	; 0xa92 <USB_Device_ProcessControlRequest+0xba>
 a8c:	82 30       	cpi	r24, 0x02	; 2
 a8e:	09 f0       	breq	.+2      	; 0xa92 <USB_Device_ProcessControlRequest+0xba>
 a90:	f1 c0       	rjmp	.+482    	; 0xc74 <USB_Device_ProcessControlRequest+0x29c>
 a92:	90 e0       	ldi	r25, 0x00	; 0
	Endpoint_ClearStatusStage();
}

static void USB_Device_ClearSetFeature(void)
{
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
 a94:	8f 71       	andi	r24, 0x1F	; 31
 a96:	90 70       	andi	r25, 0x00	; 0
 a98:	00 97       	sbiw	r24, 0x00	; 0
 a9a:	29 f0       	breq	.+10     	; 0xaa6 <USB_Device_ProcessControlRequest+0xce>
 a9c:	82 30       	cpi	r24, 0x02	; 2
 a9e:	91 05       	cpc	r25, r1
 aa0:	09 f0       	breq	.+2      	; 0xaa4 <USB_Device_ProcessControlRequest+0xcc>
 aa2:	e8 c0       	rjmp	.+464    	; 0xc74 <USB_Device_ProcessControlRequest+0x29c>
 aa4:	0b c0       	rjmp	.+22     	; 0xabc <USB_Device_ProcessControlRequest+0xe4>
 aa6:	80 91 08 01 	lds	r24, 0x0108
	{
		#if !defined(NO_DEVICE_REMOTE_WAKEUP)
		case REQREC_DEVICE:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
 aaa:	81 30       	cpi	r24, 0x01	; 1
 aac:	09 f0       	breq	.+2      	; 0xab0 <USB_Device_ProcessControlRequest+0xd8>
 aae:	e2 c0       	rjmp	.+452    	; 0xc74 <USB_Device_ProcessControlRequest+0x29c>
 ab0:	23 30       	cpi	r18, 0x03	; 3
			  USB_Device_RemoteWakeupEnabled = (USB_ControlRequest.bRequest == REQ_SetFeature);
 ab2:	09 f0       	breq	.+2      	; 0xab6 <USB_Device_ProcessControlRequest+0xde>
 ab4:	80 e0       	ldi	r24, 0x00	; 0
 ab6:	80 93 03 01 	sts	0x0103, r24
 aba:	2c c0       	rjmp	.+88     	; 0xb14 <USB_Device_ProcessControlRequest+0x13c>
 abc:	80 91 08 01 	lds	r24, 0x0108

			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
 ac0:	88 23       	and	r24, r24
 ac2:	41 f5       	brne	.+80     	; 0xb14 <USB_Device_ProcessControlRequest+0x13c>
 ac4:	20 91 0a 01 	lds	r18, 0x010A
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
 ac8:	2f 70       	andi	r18, 0x0F	; 15
 aca:	09 f4       	brne	.+2      	; 0xace <USB_Device_ProcessControlRequest+0xf6>

				if (EndpointIndex == ENDPOINT_CONTROLEP)
 acc:	d3 c0       	rjmp	.+422    	; 0xc74 <USB_Device_ProcessControlRequest+0x29c>
 ace:	20 93 e9 00 	sts	0x00E9, r18
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 ad2:	80 91 eb 00 	lds	r24, 0x00EB
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
 ad6:	80 ff       	sbrs	r24, 0
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
 ad8:	1d c0       	rjmp	.+58     	; 0xb14 <USB_Device_ProcessControlRequest+0x13c>
 ada:	80 91 07 01 	lds	r24, 0x0107
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
 ade:	83 30       	cpi	r24, 0x03	; 3
 ae0:	21 f4       	brne	.+8      	; 0xaea <USB_Device_ProcessControlRequest+0x112>
 ae2:	80 91 eb 00 	lds	r24, 0x00EB
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
 ae6:	80 62       	ori	r24, 0x20	; 32
 ae8:	13 c0       	rjmp	.+38     	; 0xb10 <USB_Device_ProcessControlRequest+0x138>
 aea:	80 91 eb 00 	lds	r24, 0x00EB
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
 aee:	80 61       	ori	r24, 0x10	; 16
 af0:	80 93 eb 00 	sts	0x00EB, r24
 af4:	81 e0       	ldi	r24, 0x01	; 1
			 *  \param[in] Address  Endpoint address whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t Address)
			{
				UERST = (1 << (Address & ENDPOINT_EPNUM_MASK));
 af6:	90 e0       	ldi	r25, 0x00	; 0
 af8:	02 c0       	rjmp	.+4      	; 0xafe <USB_Device_ProcessControlRequest+0x126>
 afa:	88 0f       	add	r24, r24
 afc:	99 1f       	adc	r25, r25
 afe:	2a 95       	dec	r18
 b00:	e2 f7       	brpl	.-8      	; 0xafa <USB_Device_ProcessControlRequest+0x122>
 b02:	80 93 ea 00 	sts	0x00EA, r24
 b06:	10 92 ea 00 	sts	0x00EA, r1
				UERST = 0;
 b0a:	80 91 eb 00 	lds	r24, 0x00EB

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
 b0e:	88 60       	ori	r24, 0x08	; 8
 b10:	80 93 eb 00 	sts	0x00EB, r24
 b14:	10 92 e9 00 	sts	0x00E9, r1
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 b18:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 b1c:	87 7f       	andi	r24, 0xF7	; 247
 b1e:	8a c0       	rjmp	.+276    	; 0xc34 <USB_Device_ProcessControlRequest+0x25c>
 b20:	88 23       	and	r24, r24
					USB_Device_ClearSetFeature();
				}

				break;
			case REQ_SetAddress:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
 b22:	09 f0       	breq	.+2      	; 0xb26 <USB_Device_ProcessControlRequest+0x14e>
 b24:	a7 c0       	rjmp	.+334    	; 0xc74 <USB_Device_ProcessControlRequest+0x29c>
 b26:	10 91 08 01 	lds	r17, 0x0108
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t DeviceAddress = (USB_ControlRequest.wValue & 0x7F);
 b2a:	1f 77       	andi	r17, 0x7F	; 127
 b2c:	80 91 e3 00 	lds	r24, 0x00E3
			#endif

			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				UDADDR = (UDADDR & (1 << ADDEN)) | (Address & 0x7F);
 b30:	80 78       	andi	r24, 0x80	; 128
 b32:	81 2b       	or	r24, r17
 b34:	80 93 e3 00 	sts	0x00E3, r24
 b38:	80 91 e8 00 	lds	r24, 0x00E8
 b3c:	87 7f       	andi	r24, 0xF7	; 247
 b3e:	80 93 e8 00 	sts	0x00E8, r24
 b42:	ce dd       	rcall	.-1124   	; 0x6e0 <Endpoint_ClearStatusStage>

	USB_Device_SetDeviceAddress(DeviceAddress);

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
 b44:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 b48:	80 ff       	sbrs	r24, 0
 b4a:	fc cf       	rjmp	.-8      	; 0xb44 <USB_Device_ProcessControlRequest+0x16c>

	while (!(Endpoint_IsINReady()));
 b4c:	80 91 e3 00 	lds	r24, 0x00E3
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address)
			{
				(void)Address;
				
				UDADDR |= (1 << ADDEN);
 b50:	80 68       	ori	r24, 0x80	; 128
 b52:	80 93 e3 00 	sts	0x00E3, r24
 b56:	11 23       	and	r17, r17
 b58:	11 f0       	breq	.+4      	; 0xb5e <USB_Device_ProcessControlRequest+0x186>

	USB_Device_EnableDeviceAddress(DeviceAddress);

	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
 b5a:	83 e0       	ldi	r24, 0x03	; 3
 b5c:	01 c0       	rjmp	.+2      	; 0xb60 <USB_Device_ProcessControlRequest+0x188>
 b5e:	82 e0       	ldi	r24, 0x02	; 2
 b60:	80 93 05 01 	sts	0x0105, r24
 b64:	87 c0       	rjmp	.+270    	; 0xc74 <USB_Device_ProcessControlRequest+0x29c>
 b66:	80 58       	subi	r24, 0x80	; 128
 b68:	82 30       	cpi	r24, 0x02	; 2
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_SetAddress();

				break;
			case REQ_GetDescriptor:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
 b6a:	08 f0       	brcs	.+2      	; 0xb6e <USB_Device_ProcessControlRequest+0x196>
 b6c:	83 c0       	rjmp	.+262    	; 0xc74 <USB_Device_ProcessControlRequest+0x29c>
 b6e:	80 91 08 01 	lds	r24, 0x0108
	    !(defined(USE_FLASH_DESCRIPTORS) || defined(USE_EEPROM_DESCRIPTORS) || defined(USE_RAM_DESCRIPTORS))
	uint8_t DescriptorAddressSpace;
	#endif

	#if !defined(NO_INTERNAL_SERIAL) && (USE_INTERNAL_SERIAL != NO_DESCRIPTOR)
	if (USB_ControlRequest.wValue == ((DTYPE_String << 8) | USE_INTERNAL_SERIAL))
 b72:	90 91 09 01 	lds	r25, 0x0109
 b76:	23 e0       	ldi	r18, 0x03	; 3
 b78:	8c 3d       	cpi	r24, 0xDC	; 220
 b7a:	92 07       	cpc	r25, r18
 b7c:	a9 f5       	brne	.+106    	; 0xbe8 <USB_Device_ProcessControlRequest+0x210>
 b7e:	83 e0       	ldi	r24, 0x03	; 3
 b80:	8c 83       	std	Y+4, r24	; 0x04
	{
		USB_Descriptor_Header_t Header;
		uint16_t                UnicodeString[INTERNAL_SERIAL_LENGTH_BITS / 4];
	} SignatureDescriptor;

	SignatureDescriptor.Header.Type = DTYPE_String;
 b82:	8a e2       	ldi	r24, 0x2A	; 42
 b84:	8b 83       	std	Y+3, r24	; 0x03
	SignatureDescriptor.Header.Size = USB_STRING_LEN(INTERNAL_SERIAL_LENGTH_BITS / 4);
 b86:	5f b7       	in	r21, 0x3f	; 63
 b88:	f8 94       	cli
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
 b8a:	de 01       	movw	r26, r28
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
 b8c:	13 96       	adiw	r26, 0x03	; 3
				__builtin_ssrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				cli();
				#endif

				GCC_MEMORY_BARRIER();
 b8e:	80 e0       	ldi	r24, 0x00	; 0
 b90:	90 e0       	ldi	r25, 0x00	; 0
 b92:	4e e0       	ldi	r20, 0x0E	; 14
 b94:	61 e2       	ldi	r22, 0x21	; 33
			static inline void USB_Device_GetSerialString(uint16_t* const UnicodeString)
			{
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;
 b96:	e4 2f       	mov	r30, r20

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
				{
					uint8_t SerialByte = boot_signature_byte_get(SigReadAddress);
 b98:	f0 e0       	ldi	r31, 0x00	; 0
 b9a:	60 93 57 00 	sts	0x0057, r22
 b9e:	e4 91       	lpm	r30, Z
 ba0:	80 ff       	sbrs	r24, 0
 ba2:	03 c0       	rjmp	.+6      	; 0xbaa <USB_Device_ProcessControlRequest+0x1d2>

					if (SerialCharNum & 0x01)
 ba4:	e2 95       	swap	r30
 ba6:	ef 70       	andi	r30, 0x0F	; 15
					{
						SerialByte >>= 4;
 ba8:	4f 5f       	subi	r20, 0xFF	; 255
 baa:	ef 70       	andi	r30, 0x0F	; 15
						SigReadAddress++;
 bac:	2e 2f       	mov	r18, r30
					}

					SerialByte &= 0x0F;
 bae:	30 e0       	ldi	r19, 0x00	; 0
 bb0:	ea 30       	cpi	r30, 0x0A	; 10
 bb2:	18 f0       	brcs	.+6      	; 0xbba <USB_Device_ProcessControlRequest+0x1e2>

					UnicodeString[SerialCharNum] = cpu_to_le16((SerialByte >= 10) ?
 bb4:	29 5c       	subi	r18, 0xC9	; 201
 bb6:	3f 4f       	sbci	r19, 0xFF	; 255
 bb8:	02 c0       	rjmp	.+4      	; 0xbbe <USB_Device_ProcessControlRequest+0x1e6>
 bba:	20 5d       	subi	r18, 0xD0	; 208
 bbc:	3f 4f       	sbci	r19, 0xFF	; 255
 bbe:	13 96       	adiw	r26, 0x03	; 3
 bc0:	3c 93       	st	X, r19
 bc2:	2e 93       	st	-X, r18
 bc4:	12 97       	sbiw	r26, 0x02	; 2
 bc6:	01 96       	adiw	r24, 0x01	; 1
 bc8:	12 96       	adiw	r26, 0x02	; 2
 bca:	84 31       	cpi	r24, 0x14	; 20
 bcc:	91 05       	cpc	r25, r1
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
 bce:	19 f7       	brne	.-58     	; 0xb96 <USB_Device_ProcessControlRequest+0x1be>
 bd0:	5f bf       	out	0x3f, r21	; 63
 bd2:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 bd6:	87 7f       	andi	r24, 0xF7	; 247
 bd8:	80 93 e8 00 	sts	0x00E8, r24
 bdc:	ce 01       	movw	r24, r28
 bde:	03 96       	adiw	r24, 0x03	; 3

	USB_Device_GetSerialString(SignatureDescriptor.UnicodeString);

	Endpoint_ClearSETUP();

	Endpoint_Write_Control_Stream_LE(&SignatureDescriptor, sizeof(SignatureDescriptor));
 be0:	6a e2       	ldi	r22, 0x2A	; 42
 be2:	70 e0       	ldi	r23, 0x00	; 0
 be4:	8f dc       	rcall	.-1762   	; 0x504 <Endpoint_Write_Control_Stream_LE>
 be6:	12 c0       	rjmp	.+36     	; 0xc0c <USB_Device_ProcessControlRequest+0x234>
 be8:	60 91 0a 01 	lds	r22, 0x010A
 bec:	ae 01       	movw	r20, r28
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif

	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
 bee:	4f 5f       	subi	r20, 0xFF	; 255
 bf0:	5f 4f       	sbci	r21, 0xFF	; 255
 bf2:	bc db       	rcall	.-2184   	; 0x36c <CALLBACK_USB_GetDescriptor>
 bf4:	bc 01       	movw	r22, r24
 bf6:	00 97       	sbiw	r24, 0x00	; 0
 bf8:	09 f4       	brne	.+2      	; 0xbfc <USB_Device_ProcessControlRequest+0x224>
 bfa:	3c c0       	rjmp	.+120    	; 0xc74 <USB_Device_ProcessControlRequest+0x29c>
 bfc:	80 91 e8 00 	lds	r24, 0x00E8
 c00:	87 7f       	andi	r24, 0xF7	; 247
 c02:	80 93 e8 00 	sts	0x00E8, r24
 c06:	89 81       	ldd	r24, Y+1	; 0x01
 c08:	9a 81       	ldd	r25, Y+2	; 0x02
 c0a:	d8 dc       	rcall	.-1616   	; 0x5bc <Endpoint_Write_Control_PStream_LE>
 c0c:	80 91 e8 00 	lds	r24, 0x00E8
	#if defined(USE_RAM_DESCRIPTORS) || !defined(ARCH_HAS_MULTI_ADDRESS_SPACE)
	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_EEPROM_DESCRIPTORS)
	Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_FLASH_DESCRIPTORS)
	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
 c10:	8b 77       	andi	r24, 0x7B	; 123
 c12:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 c16:	2e c0       	rjmp	.+92     	; 0xc74 <USB_Device_ProcessControlRequest+0x29c>
 c18:	80 38       	cpi	r24, 0x80	; 128
 c1a:	61 f5       	brne	.+88     	; 0xc74 <USB_Device_ProcessControlRequest+0x29c>
 c1c:	80 91 e8 00 	lds	r24, 0x00E8
 c20:	87 7f       	andi	r24, 0xF7	; 247
					USB_Device_GetDescriptor();
				}

				break;
			case REQ_GetConfiguration:
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
 c22:	80 93 e8 00 	sts	0x00E8, r24
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 c26:	80 91 01 01 	lds	r24, 0x0101
 c2a:	80 93 f1 00 	sts	0x00F1, r24
 c2e:	80 91 e8 00 	lds	r24, 0x00E8

static void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();

	Endpoint_Write_8(USB_Device_ConfigurationNumber);
 c32:	8e 77       	andi	r24, 0x7E	; 126
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
 c34:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 c38:	53 dd       	rcall	.-1370   	; 0x6e0 <Endpoint_ClearStatusStage>
 c3a:	1c c0       	rjmp	.+56     	; 0xc74 <USB_Device_ProcessControlRequest+0x29c>
 c3c:	88 23       	and	r24, r24
 c3e:	d1 f4       	brne	.+52     	; 0xc74 <USB_Device_ProcessControlRequest+0x29c>
 c40:	90 91 08 01 	lds	r25, 0x0108
	Endpoint_ClearIN();

	Endpoint_ClearStatusStage();
 c44:	92 30       	cpi	r25, 0x02	; 2
 c46:	b0 f4       	brcc	.+44     	; 0xc74 <USB_Device_ProcessControlRequest+0x29c>
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_GetConfiguration();

				break;
			case REQ_SetConfiguration:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
 c48:	80 91 e8 00 	lds	r24, 0x00E8
}

static void USB_Device_SetConfiguration(void)
{
	#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
 c4c:	87 7f       	andi	r24, 0xF7	; 247
 c4e:	80 93 e8 00 	sts	0x00E8, r24
 c52:	90 93 01 01 	sts	0x0101, r25
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 c56:	44 dd       	rcall	.-1400   	; 0x6e0 <Endpoint_ClearStatusStage>
 c58:	80 91 01 01 	lds	r24, 0x0101
 c5c:	88 23       	and	r24, r24
	#endif
	#endif

	Endpoint_ClearSETUP();

	USB_Device_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
 c5e:	21 f4       	brne	.+8      	; 0xc68 <USB_Device_ProcessControlRequest+0x290>
 c60:	80 91 e3 00 	lds	r24, 0x00E3

	Endpoint_ClearStatusStage();
 c64:	87 ff       	sbrs	r24, 7

	if (USB_Device_ConfigurationNumber)
 c66:	02 c0       	rjmp	.+4      	; 0xc6c <USB_Device_ProcessControlRequest+0x294>
 c68:	84 e0       	ldi	r24, 0x04	; 4
 c6a:	01 c0       	rjmp	.+2      	; 0xc6e <USB_Device_ProcessControlRequest+0x296>
 c6c:	81 e0       	ldi	r24, 0x01	; 1
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
 c6e:	80 93 05 01 	sts	0x0105, r24
	  USB_DeviceState = DEVICE_STATE_Configured;
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
 c72:	be da       	rcall	.-2692   	; 0x1f0 <EVENT_USB_Device_ConfigurationChanged>
 c74:	80 91 e8 00 	lds	r24, 0x00E8
 c78:	83 ff       	sbrs	r24, 3
 c7a:	0a c0       	rjmp	.+20     	; 0xc90 <USB_Device_ProcessControlRequest+0x2b8>
 c7c:	80 91 e8 00 	lds	r24, 0x00E8

	EVENT_USB_Device_ConfigurationChanged();
 c80:	87 7f       	andi	r24, 0xF7	; 247
 c82:	80 93 e8 00 	sts	0x00E8, r24
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 c86:	80 91 eb 00 	lds	r24, 0x00EB
			default:
				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
 c8a:	80 62       	ori	r24, 0x20	; 32
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 c8c:	80 93 eb 00 	sts	0x00EB, r24
 c90:	ac 96       	adiw	r28, 0x2c	; 44
 c92:	0f b6       	in	r0, 0x3f	; 63
 c94:	f8 94       	cli
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
 c96:	de bf       	out	0x3e, r29	; 62
 c98:	0f be       	out	0x3f, r0	; 63
 c9a:	cd bf       	out	0x3d, r28	; 61
 c9c:	df 91       	pop	r29
 c9e:	cf 91       	pop	r28
	{
		Endpoint_ClearSETUP();
		Endpoint_StallTransaction();
	}
}
 ca0:	1f 91       	pop	r17
 ca2:	08 95       	ret

00000ca4 <USB_Event_Stub>:
#include "Events.h"

void USB_Event_Stub(void)
{

}
 ca4:	08 95       	ret

00000ca6 <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
 ca6:	cf 93       	push	r28
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_DeviceTask(void)
{
	if (USB_DeviceState == DEVICE_STATE_Unattached)
 ca8:	80 91 05 01 	lds	r24, 0x0105
 cac:	88 23       	and	r24, r24
 cae:	a9 f0       	breq	.+42     	; 0xcda <USB_USBTask+0x34>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
 cb0:	80 91 e9 00 	lds	r24, 0x00E9
 cb4:	8f 70       	andi	r24, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
 cb6:	90 91 ec 00 	lds	r25, 0x00EC
 cba:	90 ff       	sbrs	r25, 0
 cbc:	02 c0       	rjmp	.+4      	; 0xcc2 <USB_USBTask+0x1c>
 cbe:	c0 e8       	ldi	r28, 0x80	; 128
 cc0:	01 c0       	rjmp	.+2      	; 0xcc4 <USB_USBTask+0x1e>
 cc2:	c0 e0       	ldi	r28, 0x00	; 0
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
 cc4:	c8 2b       	or	r28, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 cc6:	10 92 e9 00 	sts	0x00E9, r1
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 cca:	80 91 e8 00 	lds	r24, 0x00E8

	uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

	if (Endpoint_IsSETUPReceived())
 cce:	83 ff       	sbrs	r24, 3
 cd0:	01 c0       	rjmp	.+2      	; 0xcd4 <USB_USBTask+0x2e>
	  USB_Device_ProcessControlRequest();
 cd2:	82 de       	rcall	.-764    	; 0x9d8 <USB_Device_ProcessControlRequest>
 cd4:	cf 70       	andi	r28, 0x0F	; 15
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 cd6:	c0 93 e9 00 	sts	0x00E9, r28
 cda:	cf 91       	pop	r28
	#elif defined(USB_CAN_BE_HOST)
		USB_HostTask();
	#elif defined(USB_CAN_BE_DEVICE)
		USB_DeviceTask();
	#endif
}
 cdc:	08 95       	ret

00000cde <_exit>:
 cde:	f8 94       	cli

00000ce0 <__stop_program>:
 ce0:	ff cf       	rjmp	.-2      	; 0xce0 <__stop_program>
