
GenericHID.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00000d92  00000e26  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000d92  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000d  00800100  00800100  00000e26  2**0
                  ALLOC
  3 .stab         00000870  00000000  00000000  00000e28  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000013a  00000000  00000000  00001698  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000340  00000000  00000000  000017d8  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00004ea4  00000000  00000000  00001b18  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000012cb  00000000  00000000  000069bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000275e  00000000  00000000  00007c87  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000008d8  00000000  00000000  0000a3e8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000239c  00000000  00000000  0000acc0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000375a  00000000  00000000  0000d05c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000518  00000000  00000000  000107b6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	9f c0       	rjmp	.+318    	; 0x140 <__ctors_end>
   2:	00 00       	nop
   4:	bb c0       	rjmp	.+374    	; 0x17c <__bad_interrupt>
   6:	00 00       	nop
   8:	b9 c0       	rjmp	.+370    	; 0x17c <__bad_interrupt>
   a:	00 00       	nop
   c:	b7 c0       	rjmp	.+366    	; 0x17c <__bad_interrupt>
   e:	00 00       	nop
  10:	b5 c0       	rjmp	.+362    	; 0x17c <__bad_interrupt>
  12:	00 00       	nop
  14:	b3 c0       	rjmp	.+358    	; 0x17c <__bad_interrupt>
  16:	00 00       	nop
  18:	b1 c0       	rjmp	.+354    	; 0x17c <__bad_interrupt>
  1a:	00 00       	nop
  1c:	af c0       	rjmp	.+350    	; 0x17c <__bad_interrupt>
  1e:	00 00       	nop
  20:	ad c0       	rjmp	.+346    	; 0x17c <__bad_interrupt>
  22:	00 00       	nop
  24:	ab c0       	rjmp	.+342    	; 0x17c <__bad_interrupt>
  26:	00 00       	nop
  28:	67 c4       	rjmp	.+2254   	; 0x8f8 <__vector_10>
  2a:	00 00       	nop
  2c:	a7 c0       	rjmp	.+334    	; 0x17c <__bad_interrupt>
  2e:	00 00       	nop
  30:	a5 c0       	rjmp	.+330    	; 0x17c <__bad_interrupt>
  32:	00 00       	nop
  34:	a3 c0       	rjmp	.+326    	; 0x17c <__bad_interrupt>
  36:	00 00       	nop
  38:	a1 c0       	rjmp	.+322    	; 0x17c <__bad_interrupt>
  3a:	00 00       	nop
  3c:	9f c0       	rjmp	.+318    	; 0x17c <__bad_interrupt>
  3e:	00 00       	nop
  40:	9d c0       	rjmp	.+314    	; 0x17c <__bad_interrupt>
  42:	00 00       	nop
  44:	9b c0       	rjmp	.+310    	; 0x17c <__bad_interrupt>
  46:	00 00       	nop
  48:	99 c0       	rjmp	.+306    	; 0x17c <__bad_interrupt>
  4a:	00 00       	nop
  4c:	97 c0       	rjmp	.+302    	; 0x17c <__bad_interrupt>
  4e:	00 00       	nop
  50:	95 c0       	rjmp	.+298    	; 0x17c <__bad_interrupt>
  52:	00 00       	nop
  54:	93 c0       	rjmp	.+294    	; 0x17c <__bad_interrupt>
  56:	00 00       	nop
  58:	91 c0       	rjmp	.+290    	; 0x17c <__bad_interrupt>
  5a:	00 00       	nop
  5c:	8f c0       	rjmp	.+286    	; 0x17c <__bad_interrupt>
  5e:	00 00       	nop
  60:	8d c0       	rjmp	.+282    	; 0x17c <__bad_interrupt>
  62:	00 00       	nop
  64:	8b c0       	rjmp	.+278    	; 0x17c <__bad_interrupt>
  66:	00 00       	nop
  68:	89 c0       	rjmp	.+274    	; 0x17c <__bad_interrupt>
  6a:	00 00       	nop
  6c:	87 c0       	rjmp	.+270    	; 0x17c <__bad_interrupt>
  6e:	00 00       	nop
  70:	85 c0       	rjmp	.+266    	; 0x17c <__bad_interrupt>
  72:	00 00       	nop
  74:	83 c0       	rjmp	.+262    	; 0x17c <__bad_interrupt>
  76:	00 00       	nop
  78:	81 c0       	rjmp	.+258    	; 0x17c <__bad_interrupt>
  7a:	00 00       	nop
  7c:	7f c0       	rjmp	.+254    	; 0x17c <__bad_interrupt>
  7e:	00 00       	nop
  80:	7d c0       	rjmp	.+250    	; 0x17c <__bad_interrupt>
  82:	00 00       	nop
  84:	7b c0       	rjmp	.+246    	; 0x17c <__bad_interrupt>
  86:	00 00       	nop
  88:	79 c0       	rjmp	.+242    	; 0x17c <__bad_interrupt>
  8a:	00 00       	nop
  8c:	77 c0       	rjmp	.+238    	; 0x17c <__bad_interrupt>
  8e:	00 00       	nop
  90:	75 c0       	rjmp	.+234    	; 0x17c <__bad_interrupt>
  92:	00 00       	nop
  94:	73 c0       	rjmp	.+230    	; 0x17c <__bad_interrupt>
  96:	00 00       	nop

00000098 <ProductString>:
  98:	2c 03 4c 00 55 00 46 00 41 00 20 00 47 00 65 00     ,.L.U.F.A. .G.e.
  a8:	6e 00 65 00 72 00 69 00 63 00 20 00 48 00 49 00     n.e.r.i.c. .H.I.
  b8:	44 00 20 00 44 00 65 00 6d 00 6f 00 00 00           D. .D.e.m.o...

000000c6 <ManufacturerString>:
  c6:	18 03 44 00 65 00 61 00 6e 00 20 00 43 00 61 00     ..D.e.a.n. .C.a.
  d6:	6d 00 65 00 72 00 61 00 00 00                       m.e.r.a...

000000e0 <LanguageString>:
  e0:	04 03 09 04                                         ....

000000e4 <ConfigurationDescriptor>:
  e4:	09 02 29 00 01 01 00 c0 32 09 04 00 00 02 03 00     ..).....2.......
  f4:	00 00 09 21 11 01 00 01 22 20 00 07 05 81 03 08     ...!...." ......
 104:	00 05 07 05 02 03 08 00 05                          .........

0000010d <DeviceDescriptor>:
 10d:	12 01 10 01 00 00 00 08 eb 03 4f 20 01 00 01 02     ..........O ....
 11d:	00 01                                               ..

0000011f <GenericReport>:
 11f:	06 00 ff 09 01 a1 01 09 02 15 00 25 ff 75 08 95     ...........%.u..
 12f:	08 81 02 09 03 15 00 25 ff 75 08 95 08 91 02 c0     .......%.u......
 13f:	00                                                  .

00000140 <__ctors_end>:
 140:	11 24       	eor	r1, r1
 142:	1f be       	out	0x3f, r1	; 63
 144:	cf ef       	ldi	r28, 0xFF	; 255
 146:	d0 e2       	ldi	r29, 0x20	; 32
 148:	de bf       	out	0x3e, r29	; 62
 14a:	cd bf       	out	0x3d, r28	; 61

0000014c <__do_copy_data>:
 14c:	11 e0       	ldi	r17, 0x01	; 1
 14e:	a0 e0       	ldi	r26, 0x00	; 0
 150:	b1 e0       	ldi	r27, 0x01	; 1
 152:	e2 e9       	ldi	r30, 0x92	; 146
 154:	fd e0       	ldi	r31, 0x0D	; 13
 156:	00 e0       	ldi	r16, 0x00	; 0
 158:	0b bf       	out	0x3b, r16	; 59
 15a:	02 c0       	rjmp	.+4      	; 0x160 <__do_copy_data+0x14>
 15c:	07 90       	elpm	r0, Z+
 15e:	0d 92       	st	X+, r0
 160:	a0 30       	cpi	r26, 0x00	; 0
 162:	b1 07       	cpc	r27, r17
 164:	d9 f7       	brne	.-10     	; 0x15c <__do_copy_data+0x10>
 166:	1b be       	out	0x3b, r1	; 59

00000168 <__do_clear_bss>:
 168:	11 e0       	ldi	r17, 0x01	; 1
 16a:	a0 e0       	ldi	r26, 0x00	; 0
 16c:	b1 e0       	ldi	r27, 0x01	; 1
 16e:	01 c0       	rjmp	.+2      	; 0x172 <.do_clear_bss_start>

00000170 <.do_clear_bss_loop>:
 170:	1d 92       	st	X+, r1

00000172 <.do_clear_bss_start>:
 172:	ad 30       	cpi	r26, 0x0D	; 13
 174:	b1 07       	cpc	r27, r17
 176:	e1 f7       	brne	.-8      	; 0x170 <.do_clear_bss_loop>
 178:	f0 d0       	rcall	.+480    	; 0x35a <main>
 17a:	09 c6       	rjmp	.+3090   	; 0xd8e <_exit>

0000017c <__bad_interrupt>:
 17c:	41 cf       	rjmp	.-382    	; 0x0 <__vectors>

0000017e <LEDs_SetAllLEDs>:
				PORTD &= ~LEDMask;
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
			{
				PORTD = ((PORTD & ~LEDS_ALL_LEDS) | LEDMask);
 17e:	9b b1       	in	r25, 0x0b	; 11
 180:	9f 70       	andi	r25, 0x0F	; 15
 182:	98 2b       	or	r25, r24
 184:	9b b9       	out	0x0b, r25	; 11
			}
 186:	08 95       	ret

00000188 <SetupHardware>:

/** Configures the board hardware and chip peripherals for the demo's functionality. */
void SetupHardware(void)
{
	/* Disable watchdog if enabled by bootloader/fuses */
	MCUSR &= ~(1 << WDRF);
 188:	84 b7       	in	r24, 0x34	; 52
 18a:	87 7f       	andi	r24, 0xF7	; 247
 18c:	84 bf       	out	0x34, r24	; 52
	wdt_disable();
 18e:	88 e1       	ldi	r24, 0x18	; 24
 190:	0f b6       	in	r0, 0x3f	; 63
 192:	f8 94       	cli
 194:	80 93 60 00 	sts	0x0060, r24
 198:	10 92 60 00 	sts	0x0060, r1
 19c:	0f be       	out	0x3f, r0	; 63
The type of x is clock_div_t.
*/
void clock_prescale_set(clock_div_t __x)
{
    uint8_t __tmp = _BV(CLKPCE);
    __asm__ __volatile__ (
 19e:	90 e0       	ldi	r25, 0x00	; 0
 1a0:	80 e8       	ldi	r24, 0x80	; 128
 1a2:	0f b6       	in	r0, 0x3f	; 63
 1a4:	f8 94       	cli
 1a6:	80 93 61 00 	sts	0x0061, r24
 1aa:	90 93 61 00 	sts	0x0061, r25
 1ae:	0f be       	out	0x3f, r0	; 63

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void LEDs_Init(void)
			{
				DDRD  |=  LEDS_ALL_LEDS;
 1b0:	8a b1       	in	r24, 0x0a	; 10
 1b2:	80 6f       	ori	r24, 0xF0	; 240
 1b4:	8a b9       	out	0x0a, r24	; 10
				PORTD &= ~LEDS_ALL_LEDS;
 1b6:	8b b1       	in	r24, 0x0b	; 11
 1b8:	8f 70       	andi	r24, 0x0F	; 15
 1ba:	8b b9       	out	0x0b, r24	; 11
	/* Disable clock division */
	clock_prescale_set(clock_div_1);

	/* Hardware Initialization */
	LEDs_Init();
	USB_Init();
 1bc:	82 c3       	rjmp	.+1796   	; 0x8c2 <USB_Init>

000001be <EVENT_USB_Device_Connect>:
 1be:	80 ea       	ldi	r24, 0xA0	; 160
}
 1c0:	de cf       	rjmp	.-68     	; 0x17e <LEDs_SetAllLEDs>

000001c2 <EVENT_USB_Device_Disconnect>:
 *  starts the library USB task to begin the enumeration and USB management process.
 */
void EVENT_USB_Device_Connect(void)
{
	/* Indicate USB enumerating */
	LEDs_SetAllLEDs(LEDMASK_USB_ENUMERATING);
 1c2:	80 e1       	ldi	r24, 0x10	; 16
}
 1c4:	dc cf       	rjmp	.-72     	; 0x17e <LEDs_SetAllLEDs>

000001c6 <EVENT_USB_Device_ConfigurationChanged>:
 *  the status LEDs and stops the USB management task.
 */
void EVENT_USB_Device_Disconnect(void)
{
	/* Indicate USB not ready */
	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
 1c6:	cf 93       	push	r28
}
 1c8:	81 e0       	ldi	r24, 0x01	; 1
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
 1ca:	61 ec       	ldi	r22, 0xC1	; 193
 1cc:	42 e0       	ldi	r20, 0x02	; 2
 1ce:	ab d2       	rcall	.+1366   	; 0x726 <Endpoint_ConfigureEndpoint_Prv>
 1d0:	c8 2f       	mov	r28, r24
 1d2:	82 e0       	ldi	r24, 0x02	; 2
 1d4:	60 ec       	ldi	r22, 0xC0	; 192
 1d6:	42 e0       	ldi	r20, 0x02	; 2
 1d8:	a6 d2       	rcall	.+1356   	; 0x726 <Endpoint_ConfigureEndpoint_Prv>
 1da:	28 2f       	mov	r18, r24
 1dc:	30 e0       	ldi	r19, 0x00	; 0
{
	bool ConfigSuccess = true;

	/* Setup HID Report Endpoints */
	ConfigSuccess &= Endpoint_ConfigureEndpoint(GENERIC_IN_EPADDR, EP_TYPE_INTERRUPT, GENERIC_EPSIZE, 1);
	ConfigSuccess &= Endpoint_ConfigureEndpoint(GENERIC_OUT_EPADDR, EP_TYPE_INTERRUPT, GENERIC_EPSIZE, 1);
 1de:	8c 2f       	mov	r24, r28
 1e0:	90 e0       	ldi	r25, 0x00	; 0
void EVENT_USB_Device_ConfigurationChanged(void)
{
	bool ConfigSuccess = true;

	/* Setup HID Report Endpoints */
	ConfigSuccess &= Endpoint_ConfigureEndpoint(GENERIC_IN_EPADDR, EP_TYPE_INTERRUPT, GENERIC_EPSIZE, 1);
 1e2:	28 23       	and	r18, r24
 1e4:	39 23       	and	r19, r25
	ConfigSuccess &= Endpoint_ConfigureEndpoint(GENERIC_OUT_EPADDR, EP_TYPE_INTERRUPT, GENERIC_EPSIZE, 1);
 1e6:	21 15       	cp	r18, r1
 1e8:	31 05       	cpc	r19, r1

	/* Indicate endpoint configuration success or failure */
	LEDs_SetAllLEDs(ConfigSuccess ? LEDMASK_USB_READY : LEDMASK_USB_ERROR);
 1ea:	11 f0       	breq	.+4      	; 0x1f0 <EVENT_USB_Device_ConfigurationChanged+0x2a>
 1ec:	80 e6       	ldi	r24, 0x60	; 96
 1ee:	01 c0       	rjmp	.+2      	; 0x1f2 <EVENT_USB_Device_ConfigurationChanged+0x2c>
 1f0:	80 e9       	ldi	r24, 0x90	; 144
 1f2:	c5 df       	rcall	.-118    	; 0x17e <LEDs_SetAllLEDs>
 1f4:	cf 91       	pop	r28
 1f6:	08 95       	ret

000001f8 <ProcessGenericHIDReport>:
 1f8:	fc 01       	movw	r30, r24
}
 1fa:	80 81       	ld	r24, Z
 1fc:	81 11       	cpse	r24, r1
	*/

	uint8_t NewLEDMask = LEDS_NO_LEDS;

	if (DataArray[0])
	  NewLEDMask |= LEDS_LED1;
 1fe:	80 e1       	ldi	r24, 0x10	; 16

	if (DataArray[1])
 200:	91 81       	ldd	r25, Z+1	; 0x01
 202:	91 11       	cpse	r25, r1
	  NewLEDMask |= LEDS_LED2;
 204:	80 62       	ori	r24, 0x20	; 32

	if (DataArray[2])
 206:	92 81       	ldd	r25, Z+2	; 0x02
 208:	91 11       	cpse	r25, r1
	  NewLEDMask |= LEDS_LED3;
 20a:	80 68       	ori	r24, 0x80	; 128

	if (DataArray[3])
 20c:	93 81       	ldd	r25, Z+3	; 0x03
 20e:	91 11       	cpse	r25, r1
	  NewLEDMask |= LEDS_LED4;
 210:	80 64       	ori	r24, 0x40	; 64

	LEDs_SetAllLEDs(NewLEDMask);
 212:	b5 cf       	rjmp	.-150    	; 0x17e <LEDs_SetAllLEDs>

00000214 <CreateGenericHIDReport>:
 214:	fc 01       	movw	r30, r24
}
 216:	8b b1       	in	r24, 0x0b	; 11
			}

			static inline uint8_t LEDs_GetLEDs(void) ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t LEDs_GetLEDs(void)
			{
				return (PORTD & LEDS_ALL_LEDS);
 218:	80 7f       	andi	r24, 0xF0	; 240
		an array to hold the report to the host.
	*/

	uint8_t CurrLEDMask = LEDs_GetLEDs();

	DataArray[0] = ((CurrLEDMask & LEDS_LED1) ? 1 : 0);
 21a:	98 2f       	mov	r25, r24
 21c:	21 e0       	ldi	r18, 0x01	; 1
 21e:	84 ff       	sbrs	r24, 4
 220:	20 e0       	ldi	r18, 0x00	; 0
 222:	20 83       	st	Z, r18
	DataArray[1] = ((CurrLEDMask & LEDS_LED2) ? 1 : 0);
 224:	21 e0       	ldi	r18, 0x01	; 1
 226:	95 ff       	sbrs	r25, 5
 228:	20 e0       	ldi	r18, 0x00	; 0
 22a:	21 83       	std	Z+1, r18	; 0x01
	DataArray[2] = ((CurrLEDMask & LEDS_LED3) ? 1 : 0);
 22c:	88 1f       	adc	r24, r24
 22e:	88 27       	eor	r24, r24
 230:	88 1f       	adc	r24, r24
 232:	82 83       	std	Z+2, r24	; 0x02
	DataArray[3] = ((CurrLEDMask & LEDS_LED4) ? 1 : 0);
 234:	81 e0       	ldi	r24, 0x01	; 1
 236:	96 ff       	sbrs	r25, 6
 238:	80 e0       	ldi	r24, 0x00	; 0
 23a:	83 83       	std	Z+3, r24	; 0x03
}
 23c:	08 95       	ret

0000023e <EVENT_USB_Device_ControlRequest>:
/** Event handler for the USB_ControlRequest event. This is used to catch and process control requests sent to
 *  the device from the USB host before passing along unhandled control requests to the library for processing
 *  internally.
 */
void EVENT_USB_Device_ControlRequest(void)
{
 23e:	cf 93       	push	r28
 240:	df 93       	push	r29
 242:	cd b7       	in	r28, 0x3d	; 61
 244:	de b7       	in	r29, 0x3e	; 62
 246:	28 97       	sbiw	r28, 0x08	; 8
 248:	0f b6       	in	r0, 0x3f	; 63
 24a:	f8 94       	cli
 24c:	de bf       	out	0x3e, r29	; 62
 24e:	0f be       	out	0x3f, r0	; 63
 250:	cd bf       	out	0x3d, r28	; 61
	/* Handle HID Class specific requests */
	switch (USB_ControlRequest.bRequest)
 252:	80 91 06 01 	lds	r24, 0x0106
 256:	81 30       	cpi	r24, 0x01	; 1
 258:	19 f0       	breq	.+6      	; 0x260 <EVENT_USB_Device_ControlRequest+0x22>
 25a:	89 30       	cpi	r24, 0x09	; 9
 25c:	71 f5       	brne	.+92     	; 0x2ba <EVENT_USB_Device_ControlRequest+0x7c>
 25e:	17 c0       	rjmp	.+46     	; 0x28e <EVENT_USB_Device_ControlRequest+0x50>
	{
		case HID_REQ_GetReport:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
 260:	80 91 05 01 	lds	r24, 0x0105
 264:	81 3a       	cpi	r24, 0xA1	; 161
 266:	49 f5       	brne	.+82     	; 0x2ba <EVENT_USB_Device_ControlRequest+0x7c>
			{
				uint8_t GenericData[GENERIC_REPORT_SIZE];
				CreateGenericHIDReport(GenericData);
 268:	ce 01       	movw	r24, r28
 26a:	01 96       	adiw	r24, 0x01	; 1
 26c:	d3 df       	rcall	.-90     	; 0x214 <CreateGenericHIDReport>
 26e:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 272:	87 7f       	andi	r24, 0xF7	; 247
 274:	80 93 e8 00 	sts	0x00E8, r24
 278:	ce 01       	movw	r24, r28

				Endpoint_ClearSETUP();

				/* Write the report data to the control endpoint */
				Endpoint_Write_Control_Stream_LE(&GenericData, sizeof(GenericData));
 27a:	01 96       	adiw	r24, 0x01	; 1
 27c:	68 e0       	ldi	r22, 0x08	; 8
 27e:	70 e0       	ldi	r23, 0x00	; 0
 280:	50 d1       	rcall	.+672    	; 0x522 <Endpoint_Write_Control_Stream_LE>
 282:	80 91 e8 00 	lds	r24, 0x00E8
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 286:	8b 77       	andi	r24, 0x7B	; 123
 288:	80 93 e8 00 	sts	0x00E8, r24
 28c:	16 c0       	rjmp	.+44     	; 0x2ba <EVENT_USB_Device_ControlRequest+0x7c>
 28e:	80 91 05 01 	lds	r24, 0x0105
				Endpoint_ClearOUT();
			}

			break;
		case HID_REQ_SetReport:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
 292:	81 32       	cpi	r24, 0x21	; 33
 294:	91 f4       	brne	.+36     	; 0x2ba <EVENT_USB_Device_ControlRequest+0x7c>
 296:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 29a:	87 7f       	andi	r24, 0xF7	; 247
 29c:	80 93 e8 00 	sts	0x00E8, r24
 2a0:	ce 01       	movw	r24, r28
 2a2:	01 96       	adiw	r24, 0x01	; 1
				uint8_t GenericData[GENERIC_REPORT_SIZE];

				Endpoint_ClearSETUP();

				/* Read the report data from the control endpoint */
				Endpoint_Read_Control_Stream_LE(&GenericData, sizeof(GenericData));
 2a4:	68 e0       	ldi	r22, 0x08	; 8
 2a6:	70 e0       	ldi	r23, 0x00	; 0
 2a8:	98 d1       	rcall	.+816    	; 0x5da <Endpoint_Read_Control_Stream_LE>
 2aa:	80 91 e8 00 	lds	r24, 0x00E8
 2ae:	8e 77       	andi	r24, 0x7E	; 126
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 2b0:	80 93 e8 00 	sts	0x00E8, r24
 2b4:	ce 01       	movw	r24, r28
 2b6:	01 96       	adiw	r24, 0x01	; 1
 2b8:	9f df       	rcall	.-194    	; 0x1f8 <ProcessGenericHIDReport>
				Endpoint_ClearIN();

				ProcessGenericHIDReport(GenericData);
 2ba:	28 96       	adiw	r28, 0x08	; 8
 2bc:	0f b6       	in	r0, 0x3f	; 63
 2be:	f8 94       	cli
 2c0:	de bf       	out	0x3e, r29	; 62
			}

			break;
	}
}
 2c2:	0f be       	out	0x3f, r0	; 63
 2c4:	cd bf       	out	0x3d, r28	; 61
 2c6:	df 91       	pop	r29
 2c8:	cf 91       	pop	r28
 2ca:	08 95       	ret

000002cc <HID_Task>:
 2cc:	cf 93       	push	r28
 2ce:	df 93       	push	r29
 2d0:	cd b7       	in	r28, 0x3d	; 61
 2d2:	de b7       	in	r29, 0x3e	; 62
	DataArray[2] = ((CurrLEDMask & LEDS_LED3) ? 1 : 0);
	DataArray[3] = ((CurrLEDMask & LEDS_LED4) ? 1 : 0);
}

void HID_Task(void)
{
 2d4:	28 97       	sbiw	r28, 0x08	; 8
 2d6:	0f b6       	in	r0, 0x3f	; 63
 2d8:	f8 94       	cli
 2da:	de bf       	out	0x3e, r29	; 62
 2dc:	0f be       	out	0x3f, r0	; 63
 2de:	cd bf       	out	0x3d, r28	; 61
	/* Device must be connected and configured for the task to run */
	if (USB_DeviceState != DEVICE_STATE_Configured)
 2e0:	80 91 04 01 	lds	r24, 0x0104
 2e4:	84 30       	cpi	r24, 0x04	; 4
 2e6:	81 f5       	brne	.+96     	; 0x348 <HID_Task+0x7c>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 2e8:	82 e0       	ldi	r24, 0x02	; 2
 2ea:	80 93 e9 00 	sts	0x00E9, r24
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 2ee:	80 91 e8 00 	lds	r24, 0x00E8
	  return;

	Endpoint_SelectEndpoint(GENERIC_OUT_EPADDR);

	/* Check to see if a packet has been sent from the host */
	if (Endpoint_IsOUTReceived())
 2f2:	82 ff       	sbrs	r24, 2
 2f4:	13 c0       	rjmp	.+38     	; 0x31c <HID_Task+0x50>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
 2f6:	80 91 e8 00 	lds	r24, 0x00E8
	{
		/* Check to see if the packet contains data */
		if (Endpoint_IsReadWriteAllowed())
 2fa:	85 ff       	sbrs	r24, 5
 2fc:	0a c0       	rjmp	.+20     	; 0x312 <HID_Task+0x46>
		{
			/* Create a temporary buffer to hold the read in report from the host */
			uint8_t GenericData[GENERIC_REPORT_SIZE];

			/* Read Generic Report Data */
			Endpoint_Read_Stream_LE(&GenericData, sizeof(GenericData), NULL);
 2fe:	ce 01       	movw	r24, r28
 300:	01 96       	adiw	r24, 0x01	; 1
 302:	68 e0       	ldi	r22, 0x08	; 8
 304:	70 e0       	ldi	r23, 0x00	; 0
 306:	40 e0       	ldi	r20, 0x00	; 0
 308:	50 e0       	ldi	r21, 0x00	; 0
 30a:	bb d0       	rcall	.+374    	; 0x482 <Endpoint_Read_Stream_LE>
 30c:	ce 01       	movw	r24, r28

			/* Process Generic Report Data */
			ProcessGenericHIDReport(GenericData);
 30e:	01 96       	adiw	r24, 0x01	; 1
 310:	73 df       	rcall	.-282    	; 0x1f8 <ProcessGenericHIDReport>
 312:	80 91 e8 00 	lds	r24, 0x00E8
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 316:	8b 77       	andi	r24, 0x7B	; 123
 318:	80 93 e8 00 	sts	0x00E8, r24
 31c:	81 e0       	ldi	r24, 0x01	; 1
 31e:	80 93 e9 00 	sts	0x00E9, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 322:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 326:	80 ff       	sbrs	r24, 0
 328:	0f c0       	rjmp	.+30     	; 0x348 <HID_Task+0x7c>
	}

	Endpoint_SelectEndpoint(GENERIC_IN_EPADDR);

	/* Check to see if the host is ready to accept another packet */
	if (Endpoint_IsINReady())
 32a:	ce 01       	movw	r24, r28
 32c:	01 96       	adiw	r24, 0x01	; 1
	{
		/* Create a temporary buffer to hold the report to send to the host */
		uint8_t GenericData[GENERIC_REPORT_SIZE];

		/* Create Generic Report Data */
		CreateGenericHIDReport(GenericData);
 32e:	72 df       	rcall	.-284    	; 0x214 <CreateGenericHIDReport>
 330:	ce 01       	movw	r24, r28
 332:	01 96       	adiw	r24, 0x01	; 1
 334:	68 e0       	ldi	r22, 0x08	; 8

		/* Write Generic Report Data */
		Endpoint_Write_Stream_LE(&GenericData, sizeof(GenericData), NULL);
 336:	70 e0       	ldi	r23, 0x00	; 0
 338:	40 e0       	ldi	r20, 0x00	; 0
 33a:	50 e0       	ldi	r21, 0x00	; 0
 33c:	52 d0       	rcall	.+164    	; 0x3e2 <Endpoint_Write_Stream_LE>
 33e:	80 91 e8 00 	lds	r24, 0x00E8
 342:	8e 77       	andi	r24, 0x7E	; 126
 344:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 348:	28 96       	adiw	r28, 0x08	; 8
 34a:	0f b6       	in	r0, 0x3f	; 63
 34c:	f8 94       	cli
 34e:	de bf       	out	0x3e, r29	; 62

		/* Finalize the stream transfer to send the last packet */
		Endpoint_ClearIN();
	}
}
 350:	0f be       	out	0x3f, r0	; 63
 352:	cd bf       	out	0x3d, r28	; 61
 354:	df 91       	pop	r29
 356:	cf 91       	pop	r28
 358:	08 95       	ret

0000035a <main>:
 35a:	16 df       	rcall	.-468    	; 0x188 <SetupHardware>
 35c:	80 e1       	ldi	r24, 0x10	; 16
 35e:	0f df       	rcall	.-482    	; 0x17e <LEDs_SetAllLEDs>
 360:	78 94       	sei
 */
int main(void)
{
	SetupHardware();

	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
 362:	b4 df       	rcall	.-152    	; 0x2cc <HID_Task>
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				sei();
 364:	f8 d4       	rcall	.+2544   	; 0xd56 <USB_USBTask>
	GlobalInterruptEnable();

	for (;;)
	{
		HID_Task();
 366:	fd cf       	rjmp	.-6      	; 0x362 <main+0x8>

00000368 <CALLBACK_USB_GetDescriptor>:
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
 368:	93 30       	cpi	r25, 0x03	; 3
 36a:	89 f0       	breq	.+34     	; 0x38e <CALLBACK_USB_GetDescriptor+0x26>
 36c:	94 30       	cpi	r25, 0x04	; 4
 36e:	28 f4       	brcc	.+10     	; 0x37a <CALLBACK_USB_GetDescriptor+0x12>
 370:	91 30       	cpi	r25, 0x01	; 1
 372:	49 f1       	breq	.+82     	; 0x3c6 <CALLBACK_USB_GetDescriptor+0x5e>
 374:	92 30       	cpi	r25, 0x02	; 2
 376:	61 f5       	brne	.+88     	; 0x3d0 <CALLBACK_USB_GetDescriptor+0x68>
 378:	05 c0       	rjmp	.+10     	; 0x384 <CALLBACK_USB_GetDescriptor+0x1c>
 37a:	91 32       	cpi	r25, 0x21	; 33
 37c:	d1 f0       	breq	.+52     	; 0x3b2 <CALLBACK_USB_GetDescriptor+0x4a>
 37e:	92 32       	cpi	r25, 0x22	; 34
 380:	39 f5       	brne	.+78     	; 0x3d0 <CALLBACK_USB_GetDescriptor+0x68>
 382:	1c c0       	rjmp	.+56     	; 0x3bc <CALLBACK_USB_GetDescriptor+0x54>
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
			Size    = sizeof(USB_Descriptor_Configuration_t);
 384:	89 e2       	ldi	r24, 0x29	; 41
 386:	90 e0       	ldi	r25, 0x00	; 0
		case DTYPE_Device:
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
 388:	e4 ee       	ldi	r30, 0xE4	; 228
 38a:	f0 e0       	ldi	r31, 0x00	; 0
			Size    = sizeof(USB_Descriptor_Configuration_t);
			break;
 38c:	25 c0       	rjmp	.+74     	; 0x3d8 <CALLBACK_USB_GetDescriptor+0x70>
		case DTYPE_String:
			switch (DescriptorNumber)
 38e:	81 30       	cpi	r24, 0x01	; 1
 390:	41 f0       	breq	.+16     	; 0x3a2 <CALLBACK_USB_GetDescriptor+0x3a>
 392:	81 30       	cpi	r24, 0x01	; 1
 394:	18 f0       	brcs	.+6      	; 0x39c <CALLBACK_USB_GetDescriptor+0x34>
 396:	82 30       	cpi	r24, 0x02	; 2
 398:	d9 f4       	brne	.+54     	; 0x3d0 <CALLBACK_USB_GetDescriptor+0x68>
 39a:	06 c0       	rjmp	.+12     	; 0x3a8 <CALLBACK_USB_GetDescriptor+0x40>
			{
				case 0x00:
					Address = &LanguageString;
					Size    = pgm_read_byte(&LanguageString.Header.Size);
 39c:	e0 ee       	ldi	r30, 0xE0	; 224
 39e:	f0 e0       	ldi	r31, 0x00	; 0
 3a0:	05 c0       	rjmp	.+10     	; 0x3ac <CALLBACK_USB_GetDescriptor+0x44>
					break;
				case 0x01:
					Address = &ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
 3a2:	e6 ec       	ldi	r30, 0xC6	; 198
 3a4:	f0 e0       	ldi	r31, 0x00	; 0
 3a6:	02 c0       	rjmp	.+4      	; 0x3ac <CALLBACK_USB_GetDescriptor+0x44>
					break;
				case 0x02:
					Address = &ProductString;
					Size    = pgm_read_byte(&ProductString.Header.Size);
 3a8:	e8 e9       	ldi	r30, 0x98	; 152
 3aa:	f0 e0       	ldi	r31, 0x00	; 0
 3ac:	84 91       	lpm	r24, Z
 3ae:	90 e0       	ldi	r25, 0x00	; 0
					break;
 3b0:	13 c0       	rjmp	.+38     	; 0x3d8 <CALLBACK_USB_GetDescriptor+0x70>
			}

			break;
		case HID_DTYPE_HID:
			Address = &ConfigurationDescriptor.HID_GenericHID;
			Size    = sizeof(USB_HID_Descriptor_HID_t);
 3b2:	89 e0       	ldi	r24, 0x09	; 9
 3b4:	90 e0       	ldi	r25, 0x00	; 0
					break;
			}

			break;
		case HID_DTYPE_HID:
			Address = &ConfigurationDescriptor.HID_GenericHID;
 3b6:	e6 ef       	ldi	r30, 0xF6	; 246
 3b8:	f0 e0       	ldi	r31, 0x00	; 0
			Size    = sizeof(USB_HID_Descriptor_HID_t);
			break;
 3ba:	0e c0       	rjmp	.+28     	; 0x3d8 <CALLBACK_USB_GetDescriptor+0x70>
		case HID_DTYPE_Report:
			Address = &GenericReport;
			Size    = sizeof(GenericReport);
 3bc:	80 e2       	ldi	r24, 0x20	; 32
 3be:	90 e0       	ldi	r25, 0x00	; 0
		case HID_DTYPE_HID:
			Address = &ConfigurationDescriptor.HID_GenericHID;
			Size    = sizeof(USB_HID_Descriptor_HID_t);
			break;
		case HID_DTYPE_Report:
			Address = &GenericReport;
 3c0:	ef e1       	ldi	r30, 0x1F	; 31
 3c2:	f1 e0       	ldi	r31, 0x01	; 1
			Size    = sizeof(GenericReport);
			break;
 3c4:	09 c0       	rjmp	.+18     	; 0x3d8 <CALLBACK_USB_GetDescriptor+0x70>

	switch (DescriptorType)
	{
		case DTYPE_Device:
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
 3c6:	82 e1       	ldi	r24, 0x12	; 18
 3c8:	90 e0       	ldi	r25, 0x00	; 0
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
	{
		case DTYPE_Device:
			Address = &DeviceDescriptor;
 3ca:	ed e0       	ldi	r30, 0x0D	; 13
 3cc:	f1 e0       	ldi	r31, 0x01	; 1
 3ce:	04 c0       	rjmp	.+8      	; 0x3d8 <CALLBACK_USB_GetDescriptor+0x70>
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;
 3d0:	80 e0       	ldi	r24, 0x00	; 0
 3d2:	90 e0       	ldi	r25, 0x00	; 0
                                    const void** const DescriptorAddress)
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
 3d4:	e0 e0       	ldi	r30, 0x00	; 0
 3d6:	f0 e0       	ldi	r31, 0x00	; 0
			Address = &GenericReport;
			Size    = sizeof(GenericReport);
			break;
	}

	*DescriptorAddress = Address;
 3d8:	da 01       	movw	r26, r20
 3da:	11 96       	adiw	r26, 0x01	; 1
 3dc:	fc 93       	st	X, r31
 3de:	ee 93       	st	-X, r30
	return Size;
}
 3e0:	08 95       	ret

000003e2 <Endpoint_Write_Stream_LE>:
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
 3e2:	af 92       	push	r10
 3e4:	bf 92       	push	r11
 3e6:	cf 92       	push	r12
 3e8:	df 92       	push	r13
 3ea:	ef 92       	push	r14
 3ec:	ff 92       	push	r15
 3ee:	1f 93       	push	r17
 3f0:	cf 93       	push	r28
 3f2:	df 93       	push	r29
 3f4:	ec 01       	movw	r28, r24
 3f6:	7b 01       	movw	r14, r22
 3f8:	6a 01       	movw	r12, r20
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	uint16_t BytesInTransfer = 0;
	uint8_t  ErrorCode;

	if ((ErrorCode = Endpoint_WaitUntilReady()))
 3fa:	eb d1       	rcall	.+982    	; 0x7d2 <Endpoint_WaitUntilReady>
 3fc:	18 2f       	mov	r17, r24
 3fe:	88 23       	and	r24, r24
 400:	a9 f5       	brne	.+106    	; 0x46c <Endpoint_Write_Stream_LE+0x8a>
 402:	c1 14       	cp	r12, r1
	  return ErrorCode;

	if (BytesProcessed != NULL)
 404:	d1 04       	cpc	r13, r1
 406:	39 f0       	breq	.+14     	; 0x416 <Endpoint_Write_Stream_LE+0x34>
 408:	f6 01       	movw	r30, r12
	{
		Length -= *BytesProcessed;
 40a:	20 81       	ld	r18, Z
 40c:	31 81       	ldd	r19, Z+1	; 0x01
 40e:	e2 1a       	sub	r14, r18
 410:	f3 0a       	sbc	r15, r19
 412:	c2 0f       	add	r28, r18
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
 414:	d3 1f       	adc	r29, r19
 416:	aa 24       	eor	r10, r10

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
 418:	bb 24       	eor	r11, r11
 41a:	23 c0       	rjmp	.+70     	; 0x462 <Endpoint_Write_Stream_LE+0x80>
 41c:	80 91 e8 00 	lds	r24, 0x00E8
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
 420:	85 fd       	sbrc	r24, 5
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
	{
		if (!(Endpoint_IsReadWriteAllowed()))
 422:	16 c0       	rjmp	.+44     	; 0x450 <Endpoint_Write_Stream_LE+0x6e>
 424:	80 91 e8 00 	lds	r24, 0x00E8
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 428:	8e 77       	andi	r24, 0x7E	; 126
 42a:	80 93 e8 00 	sts	0x00E8, r24
 42e:	93 d4       	rcall	.+2342   	; 0xd56 <USB_USBTask>
		{
			TEMPLATE_CLEAR_ENDPOINT();

			#if !defined(INTERRUPT_CONTROL_ENDPOINT)
			USB_USBTask();
 430:	c1 14       	cp	r12, r1
 432:	d1 04       	cpc	r13, r1
			#endif

			if (BytesProcessed != NULL)
 434:	49 f0       	breq	.+18     	; 0x448 <Endpoint_Write_Stream_LE+0x66>
 436:	f6 01       	movw	r30, r12
 438:	80 81       	ld	r24, Z
			{
				*BytesProcessed += BytesInTransfer;
 43a:	91 81       	ldd	r25, Z+1	; 0x01
 43c:	8a 0d       	add	r24, r10
 43e:	9b 1d       	adc	r25, r11
 440:	91 83       	std	Z+1, r25	; 0x01
 442:	80 83       	st	Z, r24
 444:	15 e0       	ldi	r17, 0x05	; 5
 446:	12 c0       	rjmp	.+36     	; 0x46c <Endpoint_Write_Stream_LE+0x8a>
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
 448:	c4 d1       	rcall	.+904    	; 0x7d2 <Endpoint_WaitUntilReady>
 44a:	88 23       	and	r24, r24
			}

			if ((ErrorCode = Endpoint_WaitUntilReady()))
 44c:	51 f0       	breq	.+20     	; 0x462 <Endpoint_Write_Stream_LE+0x80>
 44e:	0d c0       	rjmp	.+26     	; 0x46a <Endpoint_Write_Stream_LE+0x88>
 450:	89 91       	ld	r24, Y+
 452:	80 93 f1 00 	sts	0x00F1, r24
			  return ErrorCode;
		}
		else
		{
			TEMPLATE_TRANSFER_BYTE(DataStream);
 456:	08 94       	sec
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
 458:	e1 08       	sbc	r14, r1
 45a:	f1 08       	sbc	r15, r1
			TEMPLATE_BUFFER_MOVE(DataStream, 1);
			Length--;
 45c:	08 94       	sec
 45e:	a1 1c       	adc	r10, r1
 460:	b1 1c       	adc	r11, r1
			BytesInTransfer++;
 462:	e1 14       	cp	r14, r1
 464:	f1 04       	cpc	r15, r1
 466:	d1 f6       	brne	.-76     	; 0x41c <Endpoint_Write_Stream_LE+0x3a>
	{
		Length -= *BytesProcessed;
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
 468:	01 c0       	rjmp	.+2      	; 0x46c <Endpoint_Write_Stream_LE+0x8a>
 46a:	18 2f       	mov	r17, r24
 46c:	81 2f       	mov	r24, r17
 46e:	df 91       	pop	r29
			{
				*BytesProcessed += BytesInTransfer;
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
			}

			if ((ErrorCode = Endpoint_WaitUntilReady()))
 470:	cf 91       	pop	r28
			BytesInTransfer++;
		}
	}

	return ENDPOINT_RWSTREAM_NoError;
}
 472:	1f 91       	pop	r17
 474:	ff 90       	pop	r15
 476:	ef 90       	pop	r14
 478:	df 90       	pop	r13
 47a:	cf 90       	pop	r12
 47c:	bf 90       	pop	r11
 47e:	af 90       	pop	r10
 480:	08 95       	ret

00000482 <Endpoint_Read_Stream_LE>:
 482:	af 92       	push	r10
 484:	bf 92       	push	r11
 486:	cf 92       	push	r12
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
 488:	df 92       	push	r13
 48a:	ef 92       	push	r14
 48c:	ff 92       	push	r15
 48e:	1f 93       	push	r17
 490:	cf 93       	push	r28
 492:	df 93       	push	r29
 494:	ec 01       	movw	r28, r24
 496:	7b 01       	movw	r14, r22
 498:	6a 01       	movw	r12, r20
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	uint16_t BytesInTransfer = 0;
	uint8_t  ErrorCode;

	if ((ErrorCode = Endpoint_WaitUntilReady()))
 49a:	9b d1       	rcall	.+822    	; 0x7d2 <Endpoint_WaitUntilReady>
 49c:	18 2f       	mov	r17, r24
 49e:	88 23       	and	r24, r24
 4a0:	a9 f5       	brne	.+106    	; 0x50c <Endpoint_Read_Stream_LE+0x8a>
 4a2:	c1 14       	cp	r12, r1
	  return ErrorCode;

	if (BytesProcessed != NULL)
 4a4:	d1 04       	cpc	r13, r1
 4a6:	39 f0       	breq	.+14     	; 0x4b6 <Endpoint_Read_Stream_LE+0x34>
 4a8:	f6 01       	movw	r30, r12
	{
		Length -= *BytesProcessed;
 4aa:	20 81       	ld	r18, Z
 4ac:	31 81       	ldd	r19, Z+1	; 0x01
 4ae:	e2 1a       	sub	r14, r18
 4b0:	f3 0a       	sbc	r15, r19
 4b2:	c2 0f       	add	r28, r18
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
 4b4:	d3 1f       	adc	r29, r19
 4b6:	aa 24       	eor	r10, r10

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
 4b8:	bb 24       	eor	r11, r11
 4ba:	23 c0       	rjmp	.+70     	; 0x502 <Endpoint_Read_Stream_LE+0x80>
 4bc:	80 91 e8 00 	lds	r24, 0x00E8
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
 4c0:	85 fd       	sbrc	r24, 5
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
	{
		if (!(Endpoint_IsReadWriteAllowed()))
 4c2:	16 c0       	rjmp	.+44     	; 0x4f0 <Endpoint_Read_Stream_LE+0x6e>
 4c4:	80 91 e8 00 	lds	r24, 0x00E8
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 4c8:	8b 77       	andi	r24, 0x7B	; 123
 4ca:	80 93 e8 00 	sts	0x00E8, r24
 4ce:	43 d4       	rcall	.+2182   	; 0xd56 <USB_USBTask>
		{
			TEMPLATE_CLEAR_ENDPOINT();

			#if !defined(INTERRUPT_CONTROL_ENDPOINT)
			USB_USBTask();
 4d0:	c1 14       	cp	r12, r1
 4d2:	d1 04       	cpc	r13, r1
			#endif

			if (BytesProcessed != NULL)
 4d4:	49 f0       	breq	.+18     	; 0x4e8 <Endpoint_Read_Stream_LE+0x66>
 4d6:	f6 01       	movw	r30, r12
 4d8:	80 81       	ld	r24, Z
			{
				*BytesProcessed += BytesInTransfer;
 4da:	91 81       	ldd	r25, Z+1	; 0x01
 4dc:	8a 0d       	add	r24, r10
 4de:	9b 1d       	adc	r25, r11
 4e0:	91 83       	std	Z+1, r25	; 0x01
 4e2:	80 83       	st	Z, r24
 4e4:	15 e0       	ldi	r17, 0x05	; 5
 4e6:	12 c0       	rjmp	.+36     	; 0x50c <Endpoint_Read_Stream_LE+0x8a>
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
 4e8:	74 d1       	rcall	.+744    	; 0x7d2 <Endpoint_WaitUntilReady>
 4ea:	88 23       	and	r24, r24
			}

			if ((ErrorCode = Endpoint_WaitUntilReady()))
 4ec:	51 f0       	breq	.+20     	; 0x502 <Endpoint_Read_Stream_LE+0x80>
 4ee:	0d c0       	rjmp	.+26     	; 0x50a <Endpoint_Read_Stream_LE+0x88>
 4f0:	80 91 f1 00 	lds	r24, 0x00F1
 4f4:	89 93       	st	Y+, r24
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
 4f6:	08 94       	sec
 4f8:	e1 08       	sbc	r14, r1
			  return ErrorCode;
		}
		else
		{
			TEMPLATE_TRANSFER_BYTE(DataStream);
 4fa:	f1 08       	sbc	r15, r1
			TEMPLATE_BUFFER_MOVE(DataStream, 1);
			Length--;
 4fc:	08 94       	sec
 4fe:	a1 1c       	adc	r10, r1
 500:	b1 1c       	adc	r11, r1
			BytesInTransfer++;
 502:	e1 14       	cp	r14, r1
 504:	f1 04       	cpc	r15, r1
 506:	d1 f6       	brne	.-76     	; 0x4bc <Endpoint_Read_Stream_LE+0x3a>
	{
		Length -= *BytesProcessed;
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
 508:	01 c0       	rjmp	.+2      	; 0x50c <Endpoint_Read_Stream_LE+0x8a>
 50a:	18 2f       	mov	r17, r24
 50c:	81 2f       	mov	r24, r17
 50e:	df 91       	pop	r29
			{
				*BytesProcessed += BytesInTransfer;
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
			}

			if ((ErrorCode = Endpoint_WaitUntilReady()))
 510:	cf 91       	pop	r28
			BytesInTransfer++;
		}
	}

	return ENDPOINT_RWSTREAM_NoError;
}
 512:	1f 91       	pop	r17
 514:	ff 90       	pop	r15
 516:	ef 90       	pop	r14
 518:	df 90       	pop	r13
 51a:	cf 90       	pop	r12
 51c:	bf 90       	pop	r11
 51e:	af 90       	pop	r10
 520:	08 95       	ret

00000522 <Endpoint_Write_Control_Stream_LE>:
 522:	20 91 0b 01 	lds	r18, 0x010B
 526:	30 91 0c 01 	lds	r19, 0x010C
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
 52a:	26 17       	cp	r18, r22
 52c:	37 07       	cpc	r19, r23
 52e:	20 f4       	brcc	.+8      	; 0x538 <Endpoint_Write_Control_Stream_LE+0x16>
 530:	b9 01       	movw	r22, r18
 532:	fc 01       	movw	r30, r24
 534:	20 e0       	ldi	r18, 0x00	; 0
 536:	37 c0       	rjmp	.+110    	; 0x5a6 <Endpoint_Write_Control_Stream_LE+0x84>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
 538:	61 15       	cp	r22, r1
 53a:	71 05       	cpc	r23, r1
 53c:	d1 f7       	brne	.-12     	; 0x532 <Endpoint_Write_Control_Stream_LE+0x10>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 53e:	20 91 e8 00 	lds	r18, 0x00E8
 542:	2e 77       	andi	r18, 0x7E	; 126
 544:	20 93 e8 00 	sts	0x00E8, r18
 548:	f4 cf       	rjmp	.-24     	; 0x532 <Endpoint_Write_Control_Stream_LE+0x10>
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
 54a:	80 91 04 01 	lds	r24, 0x0104

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
 54e:	88 23       	and	r24, r24
 550:	09 f4       	brne	.+2      	; 0x554 <Endpoint_Write_Control_Stream_LE+0x32>
 552:	3f c0       	rjmp	.+126    	; 0x5d2 <Endpoint_Write_Control_Stream_LE+0xb0>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
 554:	85 30       	cpi	r24, 0x05	; 5
 556:	c9 f1       	breq	.+114    	; 0x5ca <Endpoint_Write_Control_Stream_LE+0xa8>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 558:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
 55c:	83 fd       	sbrc	r24, 3
 55e:	37 c0       	rjmp	.+110    	; 0x5ce <Endpoint_Write_Control_Stream_LE+0xac>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 560:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
 564:	82 fd       	sbrc	r24, 2
 566:	2b c0       	rjmp	.+86     	; 0x5be <Endpoint_Write_Control_Stream_LE+0x9c>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 568:	80 91 e8 00 	lds	r24, 0x00E8
		  break;

		if (Endpoint_IsINReady())
 56c:	80 ff       	sbrs	r24, 0
 56e:	1b c0       	rjmp	.+54     	; 0x5a6 <Endpoint_Write_Control_Stream_LE+0x84>
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
 570:	80 91 f2 00 	lds	r24, 0x00F2
 574:	90 91 f3 00 	lds	r25, 0x00F3
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
 578:	06 c0       	rjmp	.+12     	; 0x586 <Endpoint_Write_Control_Stream_LE+0x64>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
 57a:	21 91       	ld	r18, Z+
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
 57c:	20 93 f1 00 	sts	0x00F1, r18
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
 580:	61 50       	subi	r22, 0x01	; 1
 582:	70 40       	sbci	r23, 0x00	; 0
				BytesInEndpoint++;
 584:	01 96       	adiw	r24, 0x01	; 1

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
 586:	61 15       	cp	r22, r1
 588:	71 05       	cpc	r23, r1
 58a:	19 f0       	breq	.+6      	; 0x592 <Endpoint_Write_Control_Stream_LE+0x70>
 58c:	88 30       	cpi	r24, 0x08	; 8
 58e:	91 05       	cpc	r25, r1
 590:	a0 f3       	brcs	.-24     	; 0x57a <Endpoint_Write_Control_Stream_LE+0x58>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
 592:	21 e0       	ldi	r18, 0x01	; 1
 594:	88 30       	cpi	r24, 0x08	; 8
 596:	91 05       	cpc	r25, r1
 598:	09 f0       	breq	.+2      	; 0x59c <Endpoint_Write_Control_Stream_LE+0x7a>
 59a:	20 e0       	ldi	r18, 0x00	; 0
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 59c:	80 91 e8 00 	lds	r24, 0x00E8
 5a0:	8e 77       	andi	r24, 0x7E	; 126
 5a2:	80 93 e8 00 	sts	0x00E8, r24
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
 5a6:	61 15       	cp	r22, r1
 5a8:	71 05       	cpc	r23, r1
 5aa:	79 f6       	brne	.-98     	; 0x54a <Endpoint_Write_Control_Stream_LE+0x28>
 5ac:	22 23       	and	r18, r18
 5ae:	69 f6       	brne	.-102    	; 0x54a <Endpoint_Write_Control_Stream_LE+0x28>
 5b0:	06 c0       	rjmp	.+12     	; 0x5be <Endpoint_Write_Control_Stream_LE+0x9c>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
 5b2:	80 91 04 01 	lds	r24, 0x0104

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
 5b6:	88 23       	and	r24, r24
 5b8:	61 f0       	breq	.+24     	; 0x5d2 <Endpoint_Write_Control_Stream_LE+0xb0>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
 5ba:	85 30       	cpi	r24, 0x05	; 5
 5bc:	61 f0       	breq	.+24     	; 0x5d6 <Endpoint_Write_Control_Stream_LE+0xb4>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 5be:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
 5c2:	82 ff       	sbrs	r24, 2
 5c4:	f6 cf       	rjmp	.-20     	; 0x5b2 <Endpoint_Write_Control_Stream_LE+0x90>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
 5c6:	80 e0       	ldi	r24, 0x00	; 0
 5c8:	08 95       	ret
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
 5ca:	83 e0       	ldi	r24, 0x03	; 3
 5cc:	08 95       	ret
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
 5ce:	81 e0       	ldi	r24, 0x01	; 1
 5d0:	08 95       	ret
	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
 5d2:	82 e0       	ldi	r24, 0x02	; 2
 5d4:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
 5d6:	83 e0       	ldi	r24, 0x03	; 3
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
 5d8:	08 95       	ret

000005da <Endpoint_Read_Control_Stream_LE>:
uint8_t TEMPLATE_FUNC_NAME (void* const Buffer,
                            uint16_t Length)
{
	uint8_t* DataStream = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));

	if (!(Length))
 5da:	61 15       	cp	r22, r1
 5dc:	71 05       	cpc	r23, r1
 5de:	29 f4       	brne	.+10     	; 0x5ea <Endpoint_Read_Control_Stream_LE+0x10>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 5e0:	20 91 e8 00 	lds	r18, 0x00E8
 5e4:	2b 77       	andi	r18, 0x7B	; 123
 5e6:	20 93 e8 00 	sts	0x00E8, r18

#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (void* const Buffer,
                            uint16_t Length)
{
 5ea:	38 2f       	mov	r19, r24
 5ec:	29 2f       	mov	r18, r25
 5ee:	26 c0       	rjmp	.+76     	; 0x63c <Endpoint_Read_Control_Stream_LE+0x62>
	if (!(Length))
	  Endpoint_ClearOUT();

	while (Length)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
 5f0:	80 91 04 01 	lds	r24, 0x0104

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
 5f4:	88 23       	and	r24, r24
 5f6:	b1 f1       	breq	.+108    	; 0x664 <Endpoint_Read_Control_Stream_LE+0x8a>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
 5f8:	85 30       	cpi	r24, 0x05	; 5
 5fa:	81 f1       	breq	.+96     	; 0x65c <Endpoint_Read_Control_Stream_LE+0x82>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 5fc:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
 600:	83 fd       	sbrc	r24, 3
 602:	2e c0       	rjmp	.+92     	; 0x660 <Endpoint_Read_Control_Stream_LE+0x86>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 604:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;

		if (Endpoint_IsOUTReceived())
 608:	82 ff       	sbrs	r24, 2
 60a:	f2 cf       	rjmp	.-28     	; 0x5f0 <Endpoint_Read_Control_Stream_LE+0x16>
 60c:	e3 2f       	mov	r30, r19
 60e:	f2 2f       	mov	r31, r18
 610:	08 c0       	rjmp	.+16     	; 0x622 <Endpoint_Read_Control_Stream_LE+0x48>
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
 612:	80 91 f1 00 	lds	r24, 0x00F1
		{
			while (Length && Endpoint_BytesInEndpoint())
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
 616:	81 93       	st	Z+, r24
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
 618:	3e 2f       	mov	r19, r30
 61a:	2f 2f       	mov	r18, r31
				Length--;
 61c:	61 50       	subi	r22, 0x01	; 1
 61e:	70 40       	sbci	r23, 0x00	; 0
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;

		if (Endpoint_IsOUTReceived())
		{
			while (Length && Endpoint_BytesInEndpoint())
 620:	41 f0       	breq	.+16     	; 0x632 <Endpoint_Read_Control_Stream_LE+0x58>
 622:	3e 2f       	mov	r19, r30
 624:	2f 2f       	mov	r18, r31
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
 626:	80 91 f2 00 	lds	r24, 0x00F2
 62a:	90 91 f3 00 	lds	r25, 0x00F3
 62e:	00 97       	sbiw	r24, 0x00	; 0
 630:	81 f7       	brne	.-32     	; 0x612 <Endpoint_Read_Control_Stream_LE+0x38>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 632:	80 91 e8 00 	lds	r24, 0x00E8
 636:	8b 77       	andi	r24, 0x7B	; 123
 638:	80 93 e8 00 	sts	0x00E8, r24
	uint8_t* DataStream = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));

	if (!(Length))
	  Endpoint_ClearOUT();

	while (Length)
 63c:	61 15       	cp	r22, r1
 63e:	71 05       	cpc	r23, r1
 640:	b9 f6       	brne	.-82     	; 0x5f0 <Endpoint_Read_Control_Stream_LE+0x16>
 642:	06 c0       	rjmp	.+12     	; 0x650 <Endpoint_Read_Control_Stream_LE+0x76>
		}
	}

	while (!(Endpoint_IsINReady()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
 644:	80 91 04 01 	lds	r24, 0x0104

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
 648:	88 23       	and	r24, r24
 64a:	61 f0       	breq	.+24     	; 0x664 <Endpoint_Read_Control_Stream_LE+0x8a>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
 64c:	85 30       	cpi	r24, 0x05	; 5
 64e:	61 f0       	breq	.+24     	; 0x668 <Endpoint_Read_Control_Stream_LE+0x8e>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 650:	80 91 e8 00 	lds	r24, 0x00E8

			Endpoint_ClearOUT();
		}
	}

	while (!(Endpoint_IsINReady()))
 654:	80 ff       	sbrs	r24, 0
 656:	f6 cf       	rjmp	.-20     	; 0x644 <Endpoint_Read_Control_Stream_LE+0x6a>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
 658:	80 e0       	ldi	r24, 0x00	; 0
 65a:	08 95       	ret
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
 65c:	83 e0       	ldi	r24, 0x03	; 3
 65e:	08 95       	ret
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
 660:	81 e0       	ldi	r24, 0x01	; 1
 662:	08 95       	ret
	while (!(Endpoint_IsINReady()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
 664:	82 e0       	ldi	r24, 0x02	; 2
 666:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
 668:	83 e0       	ldi	r24, 0x03	; 3
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
 66a:	08 95       	ret

0000066c <Endpoint_Write_Control_PStream_LE>:
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
 66c:	20 91 0b 01 	lds	r18, 0x010B
 670:	30 91 0c 01 	lds	r19, 0x010C
 674:	26 17       	cp	r18, r22
 676:	37 07       	cpc	r19, r23
 678:	20 f4       	brcc	.+8      	; 0x682 <Endpoint_Write_Control_PStream_LE+0x16>
 67a:	b9 01       	movw	r22, r18
 67c:	fc 01       	movw	r30, r24
 67e:	20 e0       	ldi	r18, 0x00	; 0
 680:	38 c0       	rjmp	.+112    	; 0x6f2 <Endpoint_Write_Control_PStream_LE+0x86>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
 682:	61 15       	cp	r22, r1
 684:	71 05       	cpc	r23, r1
 686:	d1 f7       	brne	.-12     	; 0x67c <Endpoint_Write_Control_PStream_LE+0x10>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 688:	20 91 e8 00 	lds	r18, 0x00E8
 68c:	2e 77       	andi	r18, 0x7E	; 126
 68e:	20 93 e8 00 	sts	0x00E8, r18
 692:	f4 cf       	rjmp	.-24     	; 0x67c <Endpoint_Write_Control_PStream_LE+0x10>
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
 694:	80 91 04 01 	lds	r24, 0x0104

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
 698:	88 23       	and	r24, r24
 69a:	09 f4       	brne	.+2      	; 0x69e <Endpoint_Write_Control_PStream_LE+0x32>
 69c:	40 c0       	rjmp	.+128    	; 0x71e <Endpoint_Write_Control_PStream_LE+0xb2>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
 69e:	85 30       	cpi	r24, 0x05	; 5
 6a0:	d1 f1       	breq	.+116    	; 0x716 <Endpoint_Write_Control_PStream_LE+0xaa>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 6a2:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
 6a6:	83 fd       	sbrc	r24, 3
 6a8:	38 c0       	rjmp	.+112    	; 0x71a <Endpoint_Write_Control_PStream_LE+0xae>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 6aa:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
 6ae:	82 fd       	sbrc	r24, 2
 6b0:	2c c0       	rjmp	.+88     	; 0x70a <Endpoint_Write_Control_PStream_LE+0x9e>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 6b2:	80 91 e8 00 	lds	r24, 0x00E8
		  break;

		if (Endpoint_IsINReady())
 6b6:	80 ff       	sbrs	r24, 0
 6b8:	1c c0       	rjmp	.+56     	; 0x6f2 <Endpoint_Write_Control_PStream_LE+0x86>
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
 6ba:	80 91 f2 00 	lds	r24, 0x00F2
 6be:	90 91 f3 00 	lds	r25, 0x00F3
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
 6c2:	07 c0       	rjmp	.+14     	; 0x6d2 <Endpoint_Write_Control_PStream_LE+0x66>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
 6c4:	24 91       	lpm	r18, Z
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
 6c6:	20 93 f1 00 	sts	0x00F1, r18
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
 6ca:	31 96       	adiw	r30, 0x01	; 1
				Length--;
 6cc:	61 50       	subi	r22, 0x01	; 1
 6ce:	70 40       	sbci	r23, 0x00	; 0
				BytesInEndpoint++;
 6d0:	01 96       	adiw	r24, 0x01	; 1

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
 6d2:	61 15       	cp	r22, r1
 6d4:	71 05       	cpc	r23, r1
 6d6:	19 f0       	breq	.+6      	; 0x6de <Endpoint_Write_Control_PStream_LE+0x72>
 6d8:	88 30       	cpi	r24, 0x08	; 8
 6da:	91 05       	cpc	r25, r1
 6dc:	98 f3       	brcs	.-26     	; 0x6c4 <Endpoint_Write_Control_PStream_LE+0x58>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
 6de:	21 e0       	ldi	r18, 0x01	; 1
 6e0:	88 30       	cpi	r24, 0x08	; 8
 6e2:	91 05       	cpc	r25, r1
 6e4:	09 f0       	breq	.+2      	; 0x6e8 <Endpoint_Write_Control_PStream_LE+0x7c>
 6e6:	20 e0       	ldi	r18, 0x00	; 0
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 6e8:	80 91 e8 00 	lds	r24, 0x00E8
 6ec:	8e 77       	andi	r24, 0x7E	; 126
 6ee:	80 93 e8 00 	sts	0x00E8, r24
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
 6f2:	61 15       	cp	r22, r1
 6f4:	71 05       	cpc	r23, r1
 6f6:	71 f6       	brne	.-100    	; 0x694 <Endpoint_Write_Control_PStream_LE+0x28>
 6f8:	22 23       	and	r18, r18
 6fa:	61 f6       	brne	.-104    	; 0x694 <Endpoint_Write_Control_PStream_LE+0x28>
 6fc:	06 c0       	rjmp	.+12     	; 0x70a <Endpoint_Write_Control_PStream_LE+0x9e>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
 6fe:	80 91 04 01 	lds	r24, 0x0104

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
 702:	88 23       	and	r24, r24
 704:	61 f0       	breq	.+24     	; 0x71e <Endpoint_Write_Control_PStream_LE+0xb2>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
 706:	85 30       	cpi	r24, 0x05	; 5
 708:	61 f0       	breq	.+24     	; 0x722 <Endpoint_Write_Control_PStream_LE+0xb6>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 70a:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
 70e:	82 ff       	sbrs	r24, 2
 710:	f6 cf       	rjmp	.-20     	; 0x6fe <Endpoint_Write_Control_PStream_LE+0x92>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
 712:	80 e0       	ldi	r24, 0x00	; 0
 714:	08 95       	ret
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
 716:	83 e0       	ldi	r24, 0x03	; 3
 718:	08 95       	ret
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
 71a:	81 e0       	ldi	r24, 0x01	; 1
 71c:	08 95       	ret
	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
 71e:	82 e0       	ldi	r24, 0x02	; 2
 720:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
 722:	83 e0       	ldi	r24, 0x03	; 3
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
 724:	08 95       	ret

00000726 <Endpoint_ConfigureEndpoint_Prv>:
	UECFG0X = UECFG0XData;
	UECFG1X = UECFG1XData;

	return Endpoint_IsConfigured();
#else
	for (uint8_t EPNum = Number; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
 726:	98 2f       	mov	r25, r24
 728:	2a c0       	rjmp	.+84     	; 0x77e <Endpoint_ConfigureEndpoint_Prv+0x58>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 72a:	90 93 e9 00 	sts	0x00E9, r25
		uint8_t UECFG1XTemp;
		uint8_t UEIENXTemp;

		Endpoint_SelectEndpoint(EPNum);

		if (EPNum == Number)
 72e:	98 17       	cp	r25, r24
 730:	39 f0       	breq	.+14     	; 0x740 <Endpoint_ConfigureEndpoint_Prv+0x1a>
			UECFG1XTemp = UECFG1XData;
			UEIENXTemp  = 0;
		}
		else
		{
			UECFG0XTemp = UECFG0X;
 732:	70 91 ec 00 	lds	r23, 0x00EC
			UECFG1XTemp = UECFG1X;
 736:	20 91 ed 00 	lds	r18, 0x00ED
			UEIENXTemp  = UEIENX;
 73a:	50 91 f0 00 	lds	r21, 0x00F0
 73e:	03 c0       	rjmp	.+6      	; 0x746 <Endpoint_ConfigureEndpoint_Prv+0x20>
		Endpoint_SelectEndpoint(EPNum);

		if (EPNum == Number)
		{
			UECFG0XTemp = UECFG0XData;
			UECFG1XTemp = UECFG1XData;
 740:	24 2f       	mov	r18, r20

		Endpoint_SelectEndpoint(EPNum);

		if (EPNum == Number)
		{
			UECFG0XTemp = UECFG0XData;
 742:	76 2f       	mov	r23, r22
			UECFG1XTemp = UECFG1XData;
			UEIENXTemp  = 0;
 744:	50 e0       	ldi	r21, 0x00	; 0
			UECFG0XTemp = UECFG0X;
			UECFG1XTemp = UECFG1X;
			UEIENXTemp  = UEIENX;
		}

		if (!(UECFG1XTemp & (1 << ALLOC)))
 746:	21 ff       	sbrs	r18, 1
 748:	19 c0       	rjmp	.+50     	; 0x77c <Endpoint_ConfigureEndpoint_Prv+0x56>
			 *  to and from a host.
			 */
			static inline void Endpoint_DisableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_DisableEndpoint(void)
			{
				UECONX &= ~(1 << EPEN);
 74a:	30 91 eb 00 	lds	r19, 0x00EB
 74e:	3e 7f       	andi	r19, 0xFE	; 254
 750:	30 93 eb 00 	sts	0x00EB, r19
		  continue;

		Endpoint_DisableEndpoint();
		UECFG1X &= ~(1 << ALLOC);
 754:	30 91 ed 00 	lds	r19, 0x00ED
 758:	3d 7f       	andi	r19, 0xFD	; 253
 75a:	30 93 ed 00 	sts	0x00ED, r19
			 *  \note Endpoints must first be configured properly via \ref Endpoint_ConfigureEndpoint().
			 */
			static inline void Endpoint_EnableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_EnableEndpoint(void)
			{
				UECONX |= (1 << EPEN);
 75e:	30 91 eb 00 	lds	r19, 0x00EB
 762:	31 60       	ori	r19, 0x01	; 1
 764:	30 93 eb 00 	sts	0x00EB, r19

		Endpoint_EnableEndpoint();
		UECFG0X = UECFG0XTemp;
 768:	70 93 ec 00 	sts	0x00EC, r23
		UECFG1X = UECFG1XTemp;
 76c:	20 93 ed 00 	sts	0x00ED, r18
		UEIENX  = UEIENXTemp;
 770:	50 93 f0 00 	sts	0x00F0, r21
			 *  \return Boolean \c true if the currently selected endpoint has been configured, \c false otherwise.
			 */
			static inline bool Endpoint_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsConfigured(void)
			{
				return ((UESTA0X & (1 << CFGOK)) ? true : false);
 774:	20 91 ee 00 	lds	r18, 0x00EE

		if (!(Endpoint_IsConfigured()))
 778:	27 ff       	sbrs	r18, 7
 77a:	08 c0       	rjmp	.+16     	; 0x78c <Endpoint_ConfigureEndpoint_Prv+0x66>
	UECFG0X = UECFG0XData;
	UECFG1X = UECFG1XData;

	return Endpoint_IsConfigured();
#else
	for (uint8_t EPNum = Number; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
 77c:	9f 5f       	subi	r25, 0xFF	; 255
 77e:	97 30       	cpi	r25, 0x07	; 7
 780:	a0 f2       	brcs	.-88     	; 0x72a <Endpoint_ConfigureEndpoint_Prv+0x4>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 782:	8f 70       	andi	r24, 0x0F	; 15
 784:	80 93 e9 00 	sts	0x00E9, r24
		if (!(Endpoint_IsConfigured()))
		  return false;
	}

	Endpoint_SelectEndpoint(Number);
	return true;
 788:	81 e0       	ldi	r24, 0x01	; 1
 78a:	08 95       	ret
		UECFG0X = UECFG0XTemp;
		UECFG1X = UECFG1XTemp;
		UEIENX  = UEIENXTemp;

		if (!(Endpoint_IsConfigured()))
		  return false;
 78c:	80 e0       	ldi	r24, 0x00	; 0
	}

	Endpoint_SelectEndpoint(Number);
	return true;
#endif
}
 78e:	08 95       	ret

00000790 <Endpoint_ClearStatusStage>:
	}
}

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
 790:	80 91 05 01 	lds	r24, 0x0105
 794:	87 ff       	sbrs	r24, 7
 796:	13 c0       	rjmp	.+38     	; 0x7be <Endpoint_ClearStatusStage+0x2e>
 798:	04 c0       	rjmp	.+8      	; 0x7a2 <Endpoint_ClearStatusStage+0x12>
	{
		while (!(Endpoint_IsOUTReceived()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
 79a:	80 91 04 01 	lds	r24, 0x0104
 79e:	88 23       	and	r24, r24
 7a0:	b9 f0       	breq	.+46     	; 0x7d0 <Endpoint_ClearStatusStage+0x40>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 7a2:	80 91 e8 00 	lds	r24, 0x00E8

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
	{
		while (!(Endpoint_IsOUTReceived()))
 7a6:	82 ff       	sbrs	r24, 2
 7a8:	f8 cf       	rjmp	.-16     	; 0x79a <Endpoint_ClearStatusStage+0xa>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 7aa:	80 91 e8 00 	lds	r24, 0x00E8
 7ae:	8b 77       	andi	r24, 0x7B	; 123
 7b0:	80 93 e8 00 	sts	0x00E8, r24
 7b4:	08 95       	ret
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
 7b6:	80 91 04 01 	lds	r24, 0x0104
 7ba:	88 23       	and	r24, r24
 7bc:	49 f0       	breq	.+18     	; 0x7d0 <Endpoint_ClearStatusStage+0x40>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 7be:	80 91 e8 00 	lds	r24, 0x00E8

		Endpoint_ClearOUT();
	}
	else
	{
		while (!(Endpoint_IsINReady()))
 7c2:	80 ff       	sbrs	r24, 0
 7c4:	f8 cf       	rjmp	.-16     	; 0x7b6 <Endpoint_ClearStatusStage+0x26>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 7c6:	80 91 e8 00 	lds	r24, 0x00E8
 7ca:	8e 77       	andi	r24, 0x7E	; 126
 7cc:	80 93 e8 00 	sts	0x00E8, r24
 7d0:	08 95       	ret

000007d2 <Endpoint_WaitUntilReady>:
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
 7d2:	80 91 e4 00 	lds	r24, 0x00E4
 7d6:	90 91 e5 00 	lds	r25, 0x00E5
 7da:	45 e6       	ldi	r20, 0x65	; 101
 7dc:	01 c0       	rjmp	.+2      	; 0x7e0 <Endpoint_WaitUntilReady+0xe>
 7de:	c9 01       	movw	r24, r18
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
 7e0:	20 91 ec 00 	lds	r18, 0x00EC
 7e4:	20 ff       	sbrs	r18, 0
 7e6:	23 c0       	rjmp	.+70     	; 0x82e <Endpoint_WaitUntilReady+0x5c>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 7e8:	20 91 e8 00 	lds	r18, 0x00E8

	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
 7ec:	20 fd       	sbrc	r18, 0
 7ee:	15 c0       	rjmp	.+42     	; 0x81a <Endpoint_WaitUntilReady+0x48>
		{
			if (Endpoint_IsOUTReceived())
			  return ENDPOINT_READYWAIT_NoError;
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;
 7f0:	20 91 04 01 	lds	r18, 0x0104

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
 7f4:	22 23       	and	r18, r18
 7f6:	99 f0       	breq	.+38     	; 0x81e <Endpoint_WaitUntilReady+0x4c>
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
 7f8:	25 30       	cpi	r18, 0x05	; 5
 7fa:	99 f0       	breq	.+38     	; 0x822 <Endpoint_WaitUntilReady+0x50>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
 7fc:	20 91 eb 00 	lds	r18, 0x00EB
		  return ENDPOINT_READYWAIT_BusSuspended;
		else if (Endpoint_IsStalled())
 800:	25 fd       	sbrc	r18, 5
 802:	11 c0       	rjmp	.+34     	; 0x826 <Endpoint_WaitUntilReady+0x54>
 804:	20 91 e4 00 	lds	r18, 0x00E4
 808:	30 91 e5 00 	lds	r19, 0x00E5
		  return ENDPOINT_READYWAIT_EndpointStalled;

		uint16_t CurrentFrameNumber = USB_Device_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
 80c:	28 17       	cp	r18, r24
 80e:	39 07       	cpc	r19, r25
 810:	39 f3       	breq	.-50     	; 0x7e0 <Endpoint_WaitUntilReady+0xe>
 812:	41 50       	subi	r20, 0x01	; 1
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
 814:	21 f7       	brne	.-56     	; 0x7de <Endpoint_WaitUntilReady+0xc>
			  return ENDPOINT_READYWAIT_Timeout;
 816:	84 e0       	ldi	r24, 0x04	; 4
 818:	08 95       	ret
	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
 81a:	80 e0       	ldi	r24, 0x00	; 0
 81c:	08 95       	ret
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
 81e:	82 e0       	ldi	r24, 0x02	; 2
 820:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_READYWAIT_BusSuspended;
 822:	83 e0       	ldi	r24, 0x03	; 3
 824:	08 95       	ret
		else if (Endpoint_IsStalled())
		  return ENDPOINT_READYWAIT_EndpointStalled;
 826:	81 e0       	ldi	r24, 0x01	; 1
 828:	08 95       	ret
			  return ENDPOINT_READYWAIT_NoError;
		}
		else
		{
			if (Endpoint_IsOUTReceived())
			  return ENDPOINT_READYWAIT_NoError;
 82a:	80 e0       	ldi	r24, 0x00	; 0

			if (!(TimeoutMSRem--))
			  return ENDPOINT_READYWAIT_Timeout;
		}
	}
}
 82c:	08 95       	ret
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 82e:	20 91 e8 00 	lds	r18, 0x00E8
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
		}
		else
		{
			if (Endpoint_IsOUTReceived())
 832:	22 ff       	sbrs	r18, 2
 834:	dd cf       	rjmp	.-70     	; 0x7f0 <Endpoint_WaitUntilReady+0x1e>
 836:	f9 cf       	rjmp	.-14     	; 0x82a <Endpoint_WaitUntilReady+0x58>

00000838 <USB_ResetInterface>:

	USB_IsInitialized = false;
}

void USB_ResetInterface(void)
{
 838:	0f 93       	push	r16
 83a:	1f 93       	push	r17
 83c:	cf 93       	push	r28
 83e:	df 93       	push	r29
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
 840:	4e d0       	rcall	.+156    	; 0x8de <USB_INT_DisableAllInterrupts>
 842:	55 d0       	rcall	.+170    	; 0x8ee <USB_INT_ClearAllInterrupts>
	USB_INT_ClearAllInterrupts();
 844:	c8 ed       	ldi	r28, 0xD8	; 216
 846:	d0 e0       	ldi	r29, 0x00	; 0
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
 848:	88 81       	ld	r24, Y
 84a:	8f 77       	andi	r24, 0x7F	; 127
 84c:	88 83       	st	Y, r24
 84e:	88 81       	ld	r24, Y
 850:	80 68       	ori	r24, 0x80	; 128
				USBCON |=  (1 << USBE);
 852:	88 83       	st	Y, r24
 854:	88 81       	ld	r24, Y
 856:	8f 7d       	andi	r24, 0xDF	; 223
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
 858:	88 83       	st	Y, r24
 85a:	e7 ed       	ldi	r30, 0xD7	; 215
 85c:	f0 e0       	ldi	r31, 0x00	; 0

	if (USB_CurrentMode == USB_MODE_Device)
	{
		#if defined(USB_CAN_BE_DEVICE)
		#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
		UHWCON |=  (1 << UIMOD);
 85e:	80 81       	ld	r24, Z
 860:	80 68       	ori	r24, 0x80	; 128
 862:	80 83       	st	Z, r24
 864:	19 bc       	out	0x29, r1	; 41
 866:	10 92 04 01 	sts	0x0104, r1
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState                 = DEVICE_STATE_Unattached;
 86a:	10 92 00 01 	sts	0x0100, r1
	USB_Device_ConfigurationNumber  = 0;
 86e:	10 92 02 01 	sts	0x0102, r1

	#if !defined(NO_DEVICE_REMOTE_WAKEUP)
	USB_Device_RemoteWakeupEnabled  = false;
 872:	10 92 01 01 	sts	0x0101, r1
	#endif

	#if !defined(NO_DEVICE_SELF_POWER)
	USB_Device_CurrentlySelfPowered = false;
 876:	00 ee       	ldi	r16, 0xE0	; 224
 878:	10 e0       	ldi	r17, 0x00	; 0
			}

			static inline void USB_Device_SetFullSpeed(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetFullSpeed(void)
			{
				UDCON &= ~(1 << LSM);
 87a:	f8 01       	movw	r30, r16
 87c:	80 81       	ld	r24, Z
 87e:	8b 7f       	andi	r24, 0xFB	; 251
 880:	80 83       	st	Z, r24
 882:	88 81       	ld	r24, Y
 884:	81 60       	ori	r24, 0x01	; 1
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBCON |= (1 << VBUSTE);
 886:	88 83       	st	Y, r24
 888:	80 e0       	ldi	r24, 0x00	; 0
 88a:	60 e0       	ldi	r22, 0x00	; 0
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
 88c:	42 e0       	ldi	r20, 0x02	; 2
 88e:	4b df       	rcall	.-362    	; 0x726 <Endpoint_ConfigureEndpoint_Prv>
 890:	e1 ee       	ldi	r30, 0xE1	; 225
 892:	f0 e0       	ldi	r31, 0x00	; 0
 894:	80 81       	ld	r24, Z
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
 896:	8e 7f       	andi	r24, 0xFE	; 254
 898:	80 83       	st	Z, r24
 89a:	e2 ee       	ldi	r30, 0xE2	; 226
 89c:	f0 e0       	ldi	r31, 0x00	; 0
 89e:	80 81       	ld	r24, Z
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
 8a0:	81 60       	ori	r24, 0x01	; 1
 8a2:	80 83       	st	Z, r24
 8a4:	80 81       	ld	r24, Z
 8a6:	88 60       	ori	r24, 0x08	; 8
 8a8:	80 83       	st	Z, r24
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
 8aa:	f8 01       	movw	r30, r16
 8ac:	80 81       	ld	r24, Z
 8ae:	8e 7f       	andi	r24, 0xFE	; 254
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
 8b0:	80 83       	st	Z, r24
 8b2:	88 81       	ld	r24, Y
 8b4:	80 61       	ori	r24, 0x10	; 16
 8b6:	88 83       	st	Y, r24

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON |=  (1 << OTGPADE);
 8b8:	df 91       	pop	r29
 8ba:	cf 91       	pop	r28
 8bc:	1f 91       	pop	r17
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
 8be:	0f 91       	pop	r16
 8c0:	08 95       	ret

000008c2 <USB_Init>:
 8c2:	e8 ed       	ldi	r30, 0xD8	; 216
 8c4:	f0 e0       	ldi	r31, 0x00	; 0
 8c6:	80 81       	ld	r24, Z
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON &= ~(1 << OTGPADE);
 8c8:	8f 7e       	andi	r24, 0xEF	; 239
 8ca:	80 83       	st	Z, r24

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON |=  (1 << UVREGE);
 8cc:	e7 ed       	ldi	r30, 0xD7	; 215
 8ce:	f0 e0       	ldi	r31, 0x00	; 0
 8d0:	80 81       	ld	r24, Z
 8d2:	81 60       	ori	r24, 0x01	; 1
 8d4:	80 83       	st	Z, r24
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
 8d6:	81 e0       	ldi	r24, 0x01	; 1
 8d8:	80 93 03 01 	sts	0x0103, r24

	USB_ResetInterface();
 8dc:	ad cf       	rjmp	.-166    	; 0x838 <USB_ResetInterface>

000008de <USB_INT_DisableAllInterrupts>:
#include "../USBInterrupt.h"

void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
 8de:	e8 ed       	ldi	r30, 0xD8	; 216
 8e0:	f0 e0       	ldi	r31, 0x00	; 0
 8e2:	80 81       	ld	r24, Z
 8e4:	8c 7f       	andi	r24, 0xFC	; 252
 8e6:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
 8e8:	10 92 e2 00 	sts	0x00E2, r1
	#endif
}
 8ec:	08 95       	ret

000008ee <USB_INT_ClearAllInterrupts>:

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
 8ee:	10 92 da 00 	sts	0x00DA, r1
	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
 8f2:	10 92 e1 00 	sts	0x00E1, r1
	#endif
}
 8f6:	08 95       	ret

000008f8 <__vector_10>:

ISR(USB_GEN_vect, ISR_BLOCK)
{
 8f8:	1f 92       	push	r1
 8fa:	0f 92       	push	r0
 8fc:	0f b6       	in	r0, 0x3f	; 63
 8fe:	0f 92       	push	r0
 900:	0b b6       	in	r0, 0x3b	; 59
 902:	0f 92       	push	r0
 904:	11 24       	eor	r1, r1
 906:	2f 93       	push	r18
 908:	3f 93       	push	r19
 90a:	4f 93       	push	r20
 90c:	5f 93       	push	r21
 90e:	6f 93       	push	r22
 910:	7f 93       	push	r23
 912:	8f 93       	push	r24
 914:	9f 93       	push	r25
 916:	af 93       	push	r26
 918:	bf 93       	push	r27
 91a:	ef 93       	push	r30
 91c:	ff 93       	push	r31
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
					case USB_INT_SOFI:
						return (UDINT  & (1 << SOFI));
 91e:	80 91 e1 00 	lds	r24, 0x00E1
	#if defined(USB_CAN_BE_DEVICE)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
 922:	82 ff       	sbrs	r24, 2
 924:	0a c0       	rjmp	.+20     	; 0x93a <__vector_10+0x42>
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
					case USB_INT_SOFI:
						return (UDIEN  & (1 << SOFE));
 926:	80 91 e2 00 	lds	r24, 0x00E2
 92a:	82 ff       	sbrs	r24, 2
 92c:	06 c0       	rjmp	.+12     	; 0x93a <__vector_10+0x42>
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
						break;
					case USB_INT_SOFI:
						UDINT  &= ~(1 << SOFI);
 92e:	80 91 e1 00 	lds	r24, 0x00E1
 932:	8b 7f       	andi	r24, 0xFB	; 251
 934:	80 93 e1 00 	sts	0x00E1, r24
	{
		USB_INT_Clear(USB_INT_SOFI);

		EVENT_USB_Device_StartOfFrame();
 938:	0d d2       	rcall	.+1050   	; 0xd54 <USB_Event_Stub>
 93a:	80 91 da 00 	lds	r24, 0x00DA
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBINT & (1 << VBUSTI));
 93e:	80 ff       	sbrs	r24, 0
	}
	#endif

	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	if (USB_INT_HasOccurred(USB_INT_VBUSTI) && USB_INT_IsEnabled(USB_INT_VBUSTI))
 940:	1d c0       	rjmp	.+58     	; 0x97c <__vector_10+0x84>
 942:	80 91 d8 00 	lds	r24, 0x00D8
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBCON & (1 << VBUSTE));
 946:	80 ff       	sbrs	r24, 0
 948:	19 c0       	rjmp	.+50     	; 0x97c <__vector_10+0x84>
 94a:	80 91 da 00 	lds	r24, 0x00DA
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBINT &= ~(1 << VBUSTI);
 94e:	8e 7f       	andi	r24, 0xFE	; 254
 950:	80 93 da 00 	sts	0x00DA, r24
 954:	80 91 d9 00 	lds	r24, 0x00D9
				 *  \return Boolean \c true if the VBUS line is currently detecting power from a host, \c false otherwise.
				 */
				static inline bool USB_VBUS_GetStatus(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
				static inline bool USB_VBUS_GetStatus(void)
				{
					return ((USBSTA & (1 << VBUS)) ? true : false);
 958:	80 ff       	sbrs	r24, 0
	{
		USB_INT_Clear(USB_INT_VBUSTI);

		if (USB_VBUS_GetStatus())
 95a:	0c c0       	rjmp	.+24     	; 0x974 <__vector_10+0x7c>
 95c:	8c e0       	ldi	r24, 0x0C	; 12

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
 95e:	89 bd       	out	0x29, r24	; 41
 960:	8e e0       	ldi	r24, 0x0E	; 14
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
 962:	89 bd       	out	0x29, r24	; 41
 964:	09 b4       	in	r0, 0x29	; 41
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			{
				USB_PLL_On();
				while (!(USB_PLL_IsReady()));
 966:	00 fe       	sbrs	r0, 0
 968:	fd cf       	rjmp	.-6      	; 0x964 <__vector_10+0x6c>
 96a:	81 e0       	ldi	r24, 0x01	; 1
			}

			USB_DeviceState = DEVICE_STATE_Powered;
 96c:	80 93 04 01 	sts	0x0104, r24
 970:	26 dc       	rcall	.-1972   	; 0x1be <EVENT_USB_Device_Connect>
			EVENT_USB_Device_Connect();
 972:	04 c0       	rjmp	.+8      	; 0x97c <__vector_10+0x84>
 974:	19 bc       	out	0x29, r1	; 41
 976:	10 92 04 01 	sts	0x0104, r1
		else
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			  USB_PLL_Off();

			USB_DeviceState = DEVICE_STATE_Unattached;
 97a:	23 dc       	rcall	.-1978   	; 0x1c2 <EVENT_USB_Device_Disconnect>
 97c:	80 91 e1 00 	lds	r24, 0x00E1
			EVENT_USB_Device_Disconnect();
 980:	80 ff       	sbrs	r24, 0
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
 982:	18 c0       	rjmp	.+48     	; 0x9b4 <__vector_10+0xbc>
 984:	80 91 e2 00 	lds	r24, 0x00E2
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
 988:	80 ff       	sbrs	r24, 0
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
 98a:	14 c0       	rjmp	.+40     	; 0x9b4 <__vector_10+0xbc>
 98c:	80 91 e2 00 	lds	r24, 0x00E2
 990:	8e 7f       	andi	r24, 0xFE	; 254
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
 992:	80 93 e2 00 	sts	0x00E2, r24
 996:	80 91 e2 00 	lds	r24, 0x00E2
 99a:	80 61       	ori	r24, 0x10	; 16
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
 99c:	80 93 e2 00 	sts	0x00E2, r24
 9a0:	80 91 d8 00 	lds	r24, 0x00D8
 9a4:	80 62       	ori	r24, 0x20	; 32
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON |=  (1 << FRZCLK);
 9a6:	80 93 d8 00 	sts	0x00D8, r24
 9aa:	19 bc       	out	0x29, r1	; 41
 9ac:	85 e0       	ldi	r24, 0x05	; 5
 9ae:	80 93 04 01 	sts	0x0104, r24

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
		EVENT_USB_Device_Disconnect();
		#else
		USB_DeviceState = DEVICE_STATE_Suspended;
 9b2:	d0 d1       	rcall	.+928    	; 0xd54 <USB_Event_Stub>
 9b4:	80 91 e1 00 	lds	r24, 0x00E1
		EVENT_USB_Device_Suspend();
 9b8:	84 ff       	sbrs	r24, 4
 9ba:	2d c0       	rjmp	.+90     	; 0xa16 <__vector_10+0x11e>
					case USB_INT_IDTI:
						return (USBINT & (1 << IDTI));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
 9bc:	80 91 e2 00 	lds	r24, 0x00E2
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
 9c0:	84 ff       	sbrs	r24, 4
 9c2:	29 c0       	rjmp	.+82     	; 0xa16 <__vector_10+0x11e>
					case USB_INT_IDTI:
						return (USBCON & (1 << IDTE));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
 9c4:	8c e0       	ldi	r24, 0x0C	; 12
 9c6:	89 bd       	out	0x29, r24	; 41
 9c8:	8e e0       	ldi	r24, 0x0E	; 14
 9ca:	89 bd       	out	0x29, r24	; 41

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
 9cc:	09 b4       	in	r0, 0x29	; 41
 9ce:	00 fe       	sbrs	r0, 0
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
 9d0:	fd cf       	rjmp	.-6      	; 0x9cc <__vector_10+0xd4>
 9d2:	80 91 d8 00 	lds	r24, 0x00D8
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
 9d6:	8f 7d       	andi	r24, 0xDF	; 223
 9d8:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
 9dc:	80 91 e1 00 	lds	r24, 0x00E1
 9e0:	8f 7e       	andi	r24, 0xEF	; 239
 9e2:	80 93 e1 00 	sts	0x00E1, r24
						USBINT &= ~(1 << IDTI);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
 9e6:	80 91 e2 00 	lds	r24, 0x00E2
 9ea:	8f 7e       	andi	r24, 0xEF	; 239
 9ec:	80 93 e2 00 	sts	0x00E2, r24
						USBCON &= ~(1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
 9f0:	80 91 e2 00 	lds	r24, 0x00E2
 9f4:	81 60       	ori	r24, 0x01	; 1
 9f6:	80 93 e2 00 	sts	0x00E2, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
 9fa:	80 91 00 01 	lds	r24, 0x0100
 9fe:	88 23       	and	r24, r24
 a00:	21 f4       	brne	.+8      	; 0xa0a <__vector_10+0x112>
		USB_INT_Clear(USB_INT_WAKEUPI);

		USB_INT_Disable(USB_INT_WAKEUPI);
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_Device_ConfigurationNumber)
 a02:	80 91 e3 00 	lds	r24, 0x00E3
 a06:	87 ff       	sbrs	r24, 7
 a08:	02 c0       	rjmp	.+4      	; 0xa0e <__vector_10+0x116>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
 a0a:	84 e0       	ldi	r24, 0x04	; 4
 a0c:	01 c0       	rjmp	.+2      	; 0xa10 <__vector_10+0x118>
		  USB_DeviceState = DEVICE_STATE_Configured;
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
 a0e:	81 e0       	ldi	r24, 0x01	; 1
 a10:	80 93 04 01 	sts	0x0104, r24
 a14:	9f d1       	rcall	.+830    	; 0xd54 <USB_Event_Stub>
 a16:	80 91 e1 00 	lds	r24, 0x00E1
 a1a:	83 ff       	sbrs	r24, 3

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
		#else
		EVENT_USB_Device_WakeUp();
 a1c:	22 c0       	rjmp	.+68     	; 0xa62 <__vector_10+0x16a>
 a1e:	80 91 e2 00 	lds	r24, 0x00E2
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
 a22:	83 ff       	sbrs	r24, 3
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
 a24:	1e c0       	rjmp	.+60     	; 0xa62 <__vector_10+0x16a>
 a26:	80 91 e1 00 	lds	r24, 0x00E1
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
 a2a:	87 7f       	andi	r24, 0xF7	; 247
 a2c:	80 93 e1 00 	sts	0x00E1, r24
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
 a30:	82 e0       	ldi	r24, 0x02	; 2
 a32:	80 93 04 01 	sts	0x0104, r24
 a36:	10 92 00 01 	sts	0x0100, r1
	{
		USB_INT_Clear(USB_INT_EORSTI);

		USB_DeviceState                = DEVICE_STATE_Default;
 a3a:	80 91 e1 00 	lds	r24, 0x00E1
 a3e:	8e 7f       	andi	r24, 0xFE	; 254
		USB_Device_ConfigurationNumber = 0;
 a40:	80 93 e1 00 	sts	0x00E1, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
 a44:	80 91 e2 00 	lds	r24, 0x00E2
 a48:	8e 7f       	andi	r24, 0xFE	; 254
 a4a:	80 93 e2 00 	sts	0x00E2, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
 a4e:	80 91 e2 00 	lds	r24, 0x00E2
 a52:	80 61       	ori	r24, 0x10	; 16
 a54:	80 93 e2 00 	sts	0x00E2, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
 a58:	80 e0       	ldi	r24, 0x00	; 0
 a5a:	60 e0       	ldi	r22, 0x00	; 0
 a5c:	42 e0       	ldi	r20, 0x02	; 2
 a5e:	63 de       	rcall	.-826    	; 0x726 <Endpoint_ConfigureEndpoint_Prv>
 a60:	79 d1       	rcall	.+754    	; 0xd54 <USB_Event_Stub>
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
 a62:	ff 91       	pop	r31
 a64:	ef 91       	pop	r30
 a66:	bf 91       	pop	r27
 a68:	af 91       	pop	r26
 a6a:	9f 91       	pop	r25

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
 a6c:	8f 91       	pop	r24
 a6e:	7f 91       	pop	r23
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
 a70:	6f 91       	pop	r22
 a72:	5f 91       	pop	r21
 a74:	4f 91       	pop	r20
 a76:	3f 91       	pop	r19
 a78:	2f 91       	pop	r18
 a7a:	0f 90       	pop	r0
 a7c:	0b be       	out	0x3b, r0	; 59
 a7e:	0f 90       	pop	r0
 a80:	0f be       	out	0x3f, r0	; 63
 a82:	0f 90       	pop	r0
 a84:	1f 90       	pop	r1
 a86:	18 95       	reti

00000a88 <USB_Device_ProcessControlRequest>:
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_Device_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
 a88:	1f 93       	push	r17
 a8a:	cf 93       	push	r28
 a8c:	df 93       	push	r29
 a8e:	cd b7       	in	r28, 0x3d	; 61
 a90:	de b7       	in	r29, 0x3e	; 62
 a92:	ac 97       	sbiw	r28, 0x2c	; 44
 a94:	0f b6       	in	r0, 0x3f	; 63
 a96:	f8 94       	cli
 a98:	de bf       	out	0x3e, r29	; 62
 a9a:	0f be       	out	0x3f, r0	; 63
 a9c:	cd bf       	out	0x3d, r28	; 61
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
 a9e:	80 e0       	ldi	r24, 0x00	; 0
	USB_ControlRequest.bRequest      = Endpoint_Read_8();
	USB_ControlRequest.wValue        = Endpoint_Read_16_LE();
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;
 aa0:	e5 e0       	ldi	r30, 0x05	; 5
 aa2:	f1 e0       	ldi	r31, 0x01	; 1
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
 aa4:	90 91 f1 00 	lds	r25, 0x00F1

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_8();
 aa8:	91 93       	st	Z+, r25
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
 aaa:	8f 5f       	subi	r24, 0xFF	; 255
 aac:	88 30       	cpi	r24, 0x08	; 8
 aae:	d1 f7       	brne	.-12     	; 0xaa4 <USB_Device_ProcessControlRequest+0x1c>
	  *(RequestHeader++) = Endpoint_Read_8();
	#endif

	EVENT_USB_Device_ControlRequest();
 ab0:	c6 db       	rcall	.-2164   	; 0x23e <EVENT_USB_Device_ControlRequest>
 ab2:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 ab6:	83 ff       	sbrs	r24, 3

	if (Endpoint_IsSETUPReceived())
 ab8:	35 c1       	rjmp	.+618    	; 0xd24 <USB_Device_ProcessControlRequest+0x29c>
 aba:	80 91 05 01 	lds	r24, 0x0105
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
 abe:	20 91 06 01 	lds	r18, 0x0106

		switch (USB_ControlRequest.bRequest)
 ac2:	25 30       	cpi	r18, 0x05	; 5
 ac4:	09 f4       	brne	.+2      	; 0xac8 <USB_Device_ProcessControlRequest+0x40>
 ac6:	84 c0       	rjmp	.+264    	; 0xbd0 <USB_Device_ProcessControlRequest+0x148>
 ac8:	26 30       	cpi	r18, 0x06	; 6
 aca:	40 f4       	brcc	.+16     	; 0xadc <USB_Device_ProcessControlRequest+0x54>
 acc:	21 30       	cpi	r18, 0x01	; 1
 ace:	a1 f1       	breq	.+104    	; 0xb38 <USB_Device_ProcessControlRequest+0xb0>
 ad0:	21 30       	cpi	r18, 0x01	; 1
 ad2:	70 f0       	brcs	.+28     	; 0xaf0 <USB_Device_ProcessControlRequest+0x68>
 ad4:	23 30       	cpi	r18, 0x03	; 3
 ad6:	09 f0       	breq	.+2      	; 0xada <USB_Device_ProcessControlRequest+0x52>
 ad8:	25 c1       	rjmp	.+586    	; 0xd24 <USB_Device_ProcessControlRequest+0x29c>
 ada:	2e c0       	rjmp	.+92     	; 0xb38 <USB_Device_ProcessControlRequest+0xb0>
 adc:	28 30       	cpi	r18, 0x08	; 8
 ade:	09 f4       	brne	.+2      	; 0xae2 <USB_Device_ProcessControlRequest+0x5a>
 ae0:	f3 c0       	rjmp	.+486    	; 0xcc8 <USB_Device_ProcessControlRequest+0x240>
 ae2:	29 30       	cpi	r18, 0x09	; 9
 ae4:	09 f4       	brne	.+2      	; 0xae8 <USB_Device_ProcessControlRequest+0x60>
 ae6:	02 c1       	rjmp	.+516    	; 0xcec <USB_Device_ProcessControlRequest+0x264>
 ae8:	26 30       	cpi	r18, 0x06	; 6
 aea:	09 f0       	breq	.+2      	; 0xaee <USB_Device_ProcessControlRequest+0x66>
 aec:	1b c1       	rjmp	.+566    	; 0xd24 <USB_Device_ProcessControlRequest+0x29c>
 aee:	93 c0       	rjmp	.+294    	; 0xc16 <USB_Device_ProcessControlRequest+0x18e>
 af0:	80 38       	cpi	r24, 0x80	; 128
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
 af2:	21 f0       	breq	.+8      	; 0xafc <USB_Device_ProcessControlRequest+0x74>
 af4:	82 38       	cpi	r24, 0x82	; 130
 af6:	09 f0       	breq	.+2      	; 0xafa <USB_Device_ProcessControlRequest+0x72>
 af8:	15 c1       	rjmp	.+554    	; 0xd24 <USB_Device_ProcessControlRequest+0x29c>
 afa:	08 c0       	rjmp	.+16     	; 0xb0c <USB_Device_ProcessControlRequest+0x84>
 afc:	80 91 01 01 	lds	r24, 0x0101
	Endpoint_ClearOUT();
}

static void USB_Device_GetStatus(void)
{
	uint8_t CurrentStatus = 0;
 b00:	90 91 02 01 	lds	r25, 0x0102
			if (USB_Device_CurrentlySelfPowered)
			  CurrentStatus |= FEATURE_SELFPOWERED_ENABLED;
			#endif

			#if !defined(NO_DEVICE_REMOTE_WAKEUP)
			if (USB_Device_RemoteWakeupEnabled)
 b04:	99 23       	and	r25, r25
 b06:	71 f0       	breq	.+28     	; 0xb24 <USB_Device_ProcessControlRequest+0x9c>
 b08:	82 60       	ori	r24, 0x02	; 2
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
 b0a:	0c c0       	rjmp	.+24     	; 0xb24 <USB_Device_ProcessControlRequest+0x9c>
 b0c:	80 91 09 01 	lds	r24, 0x0109
			#endif
			break;
		case (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_ENDPOINT):
			#if !defined(CONTROL_ONLY_DEVICE)
			Endpoint_SelectEndpoint((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
 b10:	8f 70       	andi	r24, 0x0F	; 15
 b12:	80 93 e9 00 	sts	0x00E9, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 b16:	90 91 eb 00 	lds	r25, 0x00EB
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
 b1a:	81 e0       	ldi	r24, 0x01	; 1

			CurrentStatus = Endpoint_IsStalled();
 b1c:	95 ff       	sbrs	r25, 5
 b1e:	80 e0       	ldi	r24, 0x00	; 0
 b20:	10 92 e9 00 	sts	0x00E9, r1
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 b24:	90 91 e8 00 	lds	r25, 0x00E8
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 b28:	97 7f       	andi	r25, 0xF7	; 247
 b2a:	90 93 e8 00 	sts	0x00E8, r25
 b2e:	80 93 f1 00 	sts	0x00F1, r24
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
 b32:	10 92 f1 00 	sts	0x00F1, r1
				UEDATX = (Data >> 8);
 b36:	d3 c0       	rjmp	.+422    	; 0xcde <USB_Device_ProcessControlRequest+0x256>
 b38:	88 23       	and	r24, r24
				}

				break;
			case REQ_ClearFeature:
			case REQ_SetFeature:
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
 b3a:	19 f0       	breq	.+6      	; 0xb42 <USB_Device_ProcessControlRequest+0xba>
 b3c:	82 30       	cpi	r24, 0x02	; 2
 b3e:	09 f0       	breq	.+2      	; 0xb42 <USB_Device_ProcessControlRequest+0xba>
 b40:	f1 c0       	rjmp	.+482    	; 0xd24 <USB_Device_ProcessControlRequest+0x29c>
 b42:	90 e0       	ldi	r25, 0x00	; 0
	Endpoint_ClearStatusStage();
}

static void USB_Device_ClearSetFeature(void)
{
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
 b44:	8f 71       	andi	r24, 0x1F	; 31
 b46:	90 70       	andi	r25, 0x00	; 0
 b48:	00 97       	sbiw	r24, 0x00	; 0
 b4a:	29 f0       	breq	.+10     	; 0xb56 <USB_Device_ProcessControlRequest+0xce>
 b4c:	82 30       	cpi	r24, 0x02	; 2
 b4e:	91 05       	cpc	r25, r1
 b50:	09 f0       	breq	.+2      	; 0xb54 <USB_Device_ProcessControlRequest+0xcc>
 b52:	e8 c0       	rjmp	.+464    	; 0xd24 <USB_Device_ProcessControlRequest+0x29c>
 b54:	0b c0       	rjmp	.+22     	; 0xb6c <USB_Device_ProcessControlRequest+0xe4>
 b56:	80 91 07 01 	lds	r24, 0x0107
	{
		#if !defined(NO_DEVICE_REMOTE_WAKEUP)
		case REQREC_DEVICE:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
 b5a:	81 30       	cpi	r24, 0x01	; 1
 b5c:	09 f0       	breq	.+2      	; 0xb60 <USB_Device_ProcessControlRequest+0xd8>
 b5e:	e2 c0       	rjmp	.+452    	; 0xd24 <USB_Device_ProcessControlRequest+0x29c>
 b60:	23 30       	cpi	r18, 0x03	; 3
			  USB_Device_RemoteWakeupEnabled = (USB_ControlRequest.bRequest == REQ_SetFeature);
 b62:	09 f0       	breq	.+2      	; 0xb66 <USB_Device_ProcessControlRequest+0xde>
 b64:	80 e0       	ldi	r24, 0x00	; 0
 b66:	80 93 02 01 	sts	0x0102, r24
 b6a:	2c c0       	rjmp	.+88     	; 0xbc4 <USB_Device_ProcessControlRequest+0x13c>
 b6c:	80 91 07 01 	lds	r24, 0x0107

			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
 b70:	88 23       	and	r24, r24
 b72:	41 f5       	brne	.+80     	; 0xbc4 <USB_Device_ProcessControlRequest+0x13c>
 b74:	20 91 09 01 	lds	r18, 0x0109
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
 b78:	2f 70       	andi	r18, 0x0F	; 15
 b7a:	09 f4       	brne	.+2      	; 0xb7e <USB_Device_ProcessControlRequest+0xf6>

				if (EndpointIndex == ENDPOINT_CONTROLEP)
 b7c:	d3 c0       	rjmp	.+422    	; 0xd24 <USB_Device_ProcessControlRequest+0x29c>
 b7e:	20 93 e9 00 	sts	0x00E9, r18
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 b82:	80 91 eb 00 	lds	r24, 0x00EB
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
 b86:	80 ff       	sbrs	r24, 0
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
 b88:	1d c0       	rjmp	.+58     	; 0xbc4 <USB_Device_ProcessControlRequest+0x13c>
 b8a:	80 91 06 01 	lds	r24, 0x0106
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
 b8e:	83 30       	cpi	r24, 0x03	; 3
 b90:	21 f4       	brne	.+8      	; 0xb9a <USB_Device_ProcessControlRequest+0x112>
 b92:	80 91 eb 00 	lds	r24, 0x00EB
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
 b96:	80 62       	ori	r24, 0x20	; 32
 b98:	13 c0       	rjmp	.+38     	; 0xbc0 <USB_Device_ProcessControlRequest+0x138>
 b9a:	80 91 eb 00 	lds	r24, 0x00EB
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
 b9e:	80 61       	ori	r24, 0x10	; 16
 ba0:	80 93 eb 00 	sts	0x00EB, r24
 ba4:	81 e0       	ldi	r24, 0x01	; 1
			 *  \param[in] Address  Endpoint address whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t Address)
			{
				UERST = (1 << (Address & ENDPOINT_EPNUM_MASK));
 ba6:	90 e0       	ldi	r25, 0x00	; 0
 ba8:	02 c0       	rjmp	.+4      	; 0xbae <USB_Device_ProcessControlRequest+0x126>
 baa:	88 0f       	add	r24, r24
 bac:	99 1f       	adc	r25, r25
 bae:	2a 95       	dec	r18
 bb0:	e2 f7       	brpl	.-8      	; 0xbaa <USB_Device_ProcessControlRequest+0x122>
 bb2:	80 93 ea 00 	sts	0x00EA, r24
 bb6:	10 92 ea 00 	sts	0x00EA, r1
				UERST = 0;
 bba:	80 91 eb 00 	lds	r24, 0x00EB

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
 bbe:	88 60       	ori	r24, 0x08	; 8
 bc0:	80 93 eb 00 	sts	0x00EB, r24
 bc4:	10 92 e9 00 	sts	0x00E9, r1
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 bc8:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 bcc:	87 7f       	andi	r24, 0xF7	; 247
 bce:	8a c0       	rjmp	.+276    	; 0xce4 <USB_Device_ProcessControlRequest+0x25c>
 bd0:	88 23       	and	r24, r24
					USB_Device_ClearSetFeature();
				}

				break;
			case REQ_SetAddress:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
 bd2:	09 f0       	breq	.+2      	; 0xbd6 <USB_Device_ProcessControlRequest+0x14e>
 bd4:	a7 c0       	rjmp	.+334    	; 0xd24 <USB_Device_ProcessControlRequest+0x29c>
 bd6:	10 91 07 01 	lds	r17, 0x0107
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t DeviceAddress = (USB_ControlRequest.wValue & 0x7F);
 bda:	1f 77       	andi	r17, 0x7F	; 127
 bdc:	80 91 e3 00 	lds	r24, 0x00E3
			#endif

			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				UDADDR = (UDADDR & (1 << ADDEN)) | (Address & 0x7F);
 be0:	80 78       	andi	r24, 0x80	; 128
 be2:	81 2b       	or	r24, r17
 be4:	80 93 e3 00 	sts	0x00E3, r24
 be8:	80 91 e8 00 	lds	r24, 0x00E8
 bec:	87 7f       	andi	r24, 0xF7	; 247
 bee:	80 93 e8 00 	sts	0x00E8, r24
 bf2:	ce dd       	rcall	.-1124   	; 0x790 <Endpoint_ClearStatusStage>

	USB_Device_SetDeviceAddress(DeviceAddress);

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
 bf4:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 bf8:	80 ff       	sbrs	r24, 0
 bfa:	fc cf       	rjmp	.-8      	; 0xbf4 <USB_Device_ProcessControlRequest+0x16c>

	while (!(Endpoint_IsINReady()));
 bfc:	80 91 e3 00 	lds	r24, 0x00E3
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address)
			{
				(void)Address;
				
				UDADDR |= (1 << ADDEN);
 c00:	80 68       	ori	r24, 0x80	; 128
 c02:	80 93 e3 00 	sts	0x00E3, r24
 c06:	11 23       	and	r17, r17
 c08:	11 f0       	breq	.+4      	; 0xc0e <USB_Device_ProcessControlRequest+0x186>

	USB_Device_EnableDeviceAddress(DeviceAddress);

	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
 c0a:	83 e0       	ldi	r24, 0x03	; 3
 c0c:	01 c0       	rjmp	.+2      	; 0xc10 <USB_Device_ProcessControlRequest+0x188>
 c0e:	82 e0       	ldi	r24, 0x02	; 2
 c10:	80 93 04 01 	sts	0x0104, r24
 c14:	87 c0       	rjmp	.+270    	; 0xd24 <USB_Device_ProcessControlRequest+0x29c>
 c16:	80 58       	subi	r24, 0x80	; 128
 c18:	82 30       	cpi	r24, 0x02	; 2
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_SetAddress();

				break;
			case REQ_GetDescriptor:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
 c1a:	08 f0       	brcs	.+2      	; 0xc1e <USB_Device_ProcessControlRequest+0x196>
 c1c:	83 c0       	rjmp	.+262    	; 0xd24 <USB_Device_ProcessControlRequest+0x29c>
 c1e:	80 91 07 01 	lds	r24, 0x0107
	    !(defined(USE_FLASH_DESCRIPTORS) || defined(USE_EEPROM_DESCRIPTORS) || defined(USE_RAM_DESCRIPTORS))
	uint8_t DescriptorAddressSpace;
	#endif

	#if !defined(NO_INTERNAL_SERIAL) && (USE_INTERNAL_SERIAL != NO_DESCRIPTOR)
	if (USB_ControlRequest.wValue == ((DTYPE_String << 8) | USE_INTERNAL_SERIAL))
 c22:	90 91 08 01 	lds	r25, 0x0108
 c26:	23 e0       	ldi	r18, 0x03	; 3
 c28:	8c 3d       	cpi	r24, 0xDC	; 220
 c2a:	92 07       	cpc	r25, r18
 c2c:	a9 f5       	brne	.+106    	; 0xc98 <USB_Device_ProcessControlRequest+0x210>
 c2e:	83 e0       	ldi	r24, 0x03	; 3
 c30:	8c 83       	std	Y+4, r24	; 0x04
	{
		USB_Descriptor_Header_t Header;
		uint16_t                UnicodeString[INTERNAL_SERIAL_LENGTH_BITS / 4];
	} SignatureDescriptor;

	SignatureDescriptor.Header.Type = DTYPE_String;
 c32:	8a e2       	ldi	r24, 0x2A	; 42
 c34:	8b 83       	std	Y+3, r24	; 0x03
	SignatureDescriptor.Header.Size = USB_STRING_LEN(INTERNAL_SERIAL_LENGTH_BITS / 4);
 c36:	5f b7       	in	r21, 0x3f	; 63
 c38:	f8 94       	cli
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
 c3a:	de 01       	movw	r26, r28
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
 c3c:	13 96       	adiw	r26, 0x03	; 3
				__builtin_ssrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				cli();
				#endif

				GCC_MEMORY_BARRIER();
 c3e:	80 e0       	ldi	r24, 0x00	; 0
 c40:	90 e0       	ldi	r25, 0x00	; 0
 c42:	4e e0       	ldi	r20, 0x0E	; 14
 c44:	61 e2       	ldi	r22, 0x21	; 33
			static inline void USB_Device_GetSerialString(uint16_t* const UnicodeString)
			{
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;
 c46:	e4 2f       	mov	r30, r20

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
				{
					uint8_t SerialByte = boot_signature_byte_get(SigReadAddress);
 c48:	f0 e0       	ldi	r31, 0x00	; 0
 c4a:	60 93 57 00 	sts	0x0057, r22
 c4e:	e4 91       	lpm	r30, Z
 c50:	80 ff       	sbrs	r24, 0
 c52:	03 c0       	rjmp	.+6      	; 0xc5a <USB_Device_ProcessControlRequest+0x1d2>

					if (SerialCharNum & 0x01)
 c54:	e2 95       	swap	r30
 c56:	ef 70       	andi	r30, 0x0F	; 15
					{
						SerialByte >>= 4;
 c58:	4f 5f       	subi	r20, 0xFF	; 255
 c5a:	ef 70       	andi	r30, 0x0F	; 15
						SigReadAddress++;
 c5c:	2e 2f       	mov	r18, r30
					}

					SerialByte &= 0x0F;
 c5e:	30 e0       	ldi	r19, 0x00	; 0
 c60:	ea 30       	cpi	r30, 0x0A	; 10
 c62:	18 f0       	brcs	.+6      	; 0xc6a <USB_Device_ProcessControlRequest+0x1e2>

					UnicodeString[SerialCharNum] = cpu_to_le16((SerialByte >= 10) ?
 c64:	29 5c       	subi	r18, 0xC9	; 201
 c66:	3f 4f       	sbci	r19, 0xFF	; 255
 c68:	02 c0       	rjmp	.+4      	; 0xc6e <USB_Device_ProcessControlRequest+0x1e6>
 c6a:	20 5d       	subi	r18, 0xD0	; 208
 c6c:	3f 4f       	sbci	r19, 0xFF	; 255
 c6e:	13 96       	adiw	r26, 0x03	; 3
 c70:	3c 93       	st	X, r19
 c72:	2e 93       	st	-X, r18
 c74:	12 97       	sbiw	r26, 0x02	; 2
 c76:	01 96       	adiw	r24, 0x01	; 1
 c78:	12 96       	adiw	r26, 0x02	; 2
 c7a:	84 31       	cpi	r24, 0x14	; 20
 c7c:	91 05       	cpc	r25, r1
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
 c7e:	19 f7       	brne	.-58     	; 0xc46 <USB_Device_ProcessControlRequest+0x1be>
 c80:	5f bf       	out	0x3f, r21	; 63
 c82:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 c86:	87 7f       	andi	r24, 0xF7	; 247
 c88:	80 93 e8 00 	sts	0x00E8, r24
 c8c:	ce 01       	movw	r24, r28
 c8e:	03 96       	adiw	r24, 0x03	; 3

	USB_Device_GetSerialString(SignatureDescriptor.UnicodeString);

	Endpoint_ClearSETUP();

	Endpoint_Write_Control_Stream_LE(&SignatureDescriptor, sizeof(SignatureDescriptor));
 c90:	6a e2       	ldi	r22, 0x2A	; 42
 c92:	70 e0       	ldi	r23, 0x00	; 0
 c94:	46 dc       	rcall	.-1908   	; 0x522 <Endpoint_Write_Control_Stream_LE>
 c96:	12 c0       	rjmp	.+36     	; 0xcbc <USB_Device_ProcessControlRequest+0x234>
 c98:	60 91 09 01 	lds	r22, 0x0109
 c9c:	ae 01       	movw	r20, r28
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif

	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
 c9e:	4f 5f       	subi	r20, 0xFF	; 255
 ca0:	5f 4f       	sbci	r21, 0xFF	; 255
 ca2:	62 db       	rcall	.-2364   	; 0x368 <CALLBACK_USB_GetDescriptor>
 ca4:	bc 01       	movw	r22, r24
 ca6:	00 97       	sbiw	r24, 0x00	; 0
 ca8:	09 f4       	brne	.+2      	; 0xcac <USB_Device_ProcessControlRequest+0x224>
 caa:	3c c0       	rjmp	.+120    	; 0xd24 <USB_Device_ProcessControlRequest+0x29c>
 cac:	80 91 e8 00 	lds	r24, 0x00E8
 cb0:	87 7f       	andi	r24, 0xF7	; 247
 cb2:	80 93 e8 00 	sts	0x00E8, r24
 cb6:	89 81       	ldd	r24, Y+1	; 0x01
 cb8:	9a 81       	ldd	r25, Y+2	; 0x02
 cba:	d8 dc       	rcall	.-1616   	; 0x66c <Endpoint_Write_Control_PStream_LE>
 cbc:	80 91 e8 00 	lds	r24, 0x00E8
	#if defined(USE_RAM_DESCRIPTORS) || !defined(ARCH_HAS_MULTI_ADDRESS_SPACE)
	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_EEPROM_DESCRIPTORS)
	Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_FLASH_DESCRIPTORS)
	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
 cc0:	8b 77       	andi	r24, 0x7B	; 123
 cc2:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 cc6:	2e c0       	rjmp	.+92     	; 0xd24 <USB_Device_ProcessControlRequest+0x29c>
 cc8:	80 38       	cpi	r24, 0x80	; 128
 cca:	61 f5       	brne	.+88     	; 0xd24 <USB_Device_ProcessControlRequest+0x29c>
 ccc:	80 91 e8 00 	lds	r24, 0x00E8
 cd0:	87 7f       	andi	r24, 0xF7	; 247
					USB_Device_GetDescriptor();
				}

				break;
			case REQ_GetConfiguration:
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
 cd2:	80 93 e8 00 	sts	0x00E8, r24
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 cd6:	80 91 00 01 	lds	r24, 0x0100
 cda:	80 93 f1 00 	sts	0x00F1, r24
 cde:	80 91 e8 00 	lds	r24, 0x00E8

static void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();

	Endpoint_Write_8(USB_Device_ConfigurationNumber);
 ce2:	8e 77       	andi	r24, 0x7E	; 126
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
 ce4:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 ce8:	53 dd       	rcall	.-1370   	; 0x790 <Endpoint_ClearStatusStage>
 cea:	1c c0       	rjmp	.+56     	; 0xd24 <USB_Device_ProcessControlRequest+0x29c>
 cec:	88 23       	and	r24, r24
 cee:	d1 f4       	brne	.+52     	; 0xd24 <USB_Device_ProcessControlRequest+0x29c>
 cf0:	90 91 07 01 	lds	r25, 0x0107
	Endpoint_ClearIN();

	Endpoint_ClearStatusStage();
 cf4:	92 30       	cpi	r25, 0x02	; 2
 cf6:	b0 f4       	brcc	.+44     	; 0xd24 <USB_Device_ProcessControlRequest+0x29c>
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_GetConfiguration();

				break;
			case REQ_SetConfiguration:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
 cf8:	80 91 e8 00 	lds	r24, 0x00E8
}

static void USB_Device_SetConfiguration(void)
{
	#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
 cfc:	87 7f       	andi	r24, 0xF7	; 247
 cfe:	80 93 e8 00 	sts	0x00E8, r24
 d02:	90 93 00 01 	sts	0x0100, r25
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 d06:	44 dd       	rcall	.-1400   	; 0x790 <Endpoint_ClearStatusStage>
 d08:	80 91 00 01 	lds	r24, 0x0100
 d0c:	88 23       	and	r24, r24
	#endif
	#endif

	Endpoint_ClearSETUP();

	USB_Device_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
 d0e:	21 f4       	brne	.+8      	; 0xd18 <USB_Device_ProcessControlRequest+0x290>
 d10:	80 91 e3 00 	lds	r24, 0x00E3

	Endpoint_ClearStatusStage();
 d14:	87 ff       	sbrs	r24, 7

	if (USB_Device_ConfigurationNumber)
 d16:	02 c0       	rjmp	.+4      	; 0xd1c <USB_Device_ProcessControlRequest+0x294>
 d18:	84 e0       	ldi	r24, 0x04	; 4
 d1a:	01 c0       	rjmp	.+2      	; 0xd1e <USB_Device_ProcessControlRequest+0x296>
 d1c:	81 e0       	ldi	r24, 0x01	; 1
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
 d1e:	80 93 04 01 	sts	0x0104, r24
	  USB_DeviceState = DEVICE_STATE_Configured;
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
 d22:	51 da       	rcall	.-2910   	; 0x1c6 <EVENT_USB_Device_ConfigurationChanged>
 d24:	80 91 e8 00 	lds	r24, 0x00E8
 d28:	83 ff       	sbrs	r24, 3
 d2a:	0a c0       	rjmp	.+20     	; 0xd40 <USB_Device_ProcessControlRequest+0x2b8>
 d2c:	80 91 e8 00 	lds	r24, 0x00E8

	EVENT_USB_Device_ConfigurationChanged();
 d30:	87 7f       	andi	r24, 0xF7	; 247
 d32:	80 93 e8 00 	sts	0x00E8, r24
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 d36:	80 91 eb 00 	lds	r24, 0x00EB
			default:
				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
 d3a:	80 62       	ori	r24, 0x20	; 32
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 d3c:	80 93 eb 00 	sts	0x00EB, r24
 d40:	ac 96       	adiw	r28, 0x2c	; 44
 d42:	0f b6       	in	r0, 0x3f	; 63
 d44:	f8 94       	cli
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
 d46:	de bf       	out	0x3e, r29	; 62
 d48:	0f be       	out	0x3f, r0	; 63
 d4a:	cd bf       	out	0x3d, r28	; 61
 d4c:	df 91       	pop	r29
 d4e:	cf 91       	pop	r28
	{
		Endpoint_ClearSETUP();
		Endpoint_StallTransaction();
	}
}
 d50:	1f 91       	pop	r17
 d52:	08 95       	ret

00000d54 <USB_Event_Stub>:
#include "Events.h"

void USB_Event_Stub(void)
{

}
 d54:	08 95       	ret

00000d56 <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
 d56:	cf 93       	push	r28
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_DeviceTask(void)
{
	if (USB_DeviceState == DEVICE_STATE_Unattached)
 d58:	80 91 04 01 	lds	r24, 0x0104
 d5c:	88 23       	and	r24, r24
 d5e:	a9 f0       	breq	.+42     	; 0xd8a <USB_USBTask+0x34>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
 d60:	80 91 e9 00 	lds	r24, 0x00E9
 d64:	8f 70       	andi	r24, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
 d66:	90 91 ec 00 	lds	r25, 0x00EC
 d6a:	90 ff       	sbrs	r25, 0
 d6c:	02 c0       	rjmp	.+4      	; 0xd72 <USB_USBTask+0x1c>
 d6e:	c0 e8       	ldi	r28, 0x80	; 128
 d70:	01 c0       	rjmp	.+2      	; 0xd74 <USB_USBTask+0x1e>
 d72:	c0 e0       	ldi	r28, 0x00	; 0
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
 d74:	c8 2b       	or	r28, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 d76:	10 92 e9 00 	sts	0x00E9, r1
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 d7a:	80 91 e8 00 	lds	r24, 0x00E8

	uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

	if (Endpoint_IsSETUPReceived())
 d7e:	83 ff       	sbrs	r24, 3
 d80:	01 c0       	rjmp	.+2      	; 0xd84 <USB_USBTask+0x2e>
	  USB_Device_ProcessControlRequest();
 d82:	82 de       	rcall	.-764    	; 0xa88 <USB_Device_ProcessControlRequest>
 d84:	cf 70       	andi	r28, 0x0F	; 15
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 d86:	c0 93 e9 00 	sts	0x00E9, r28
 d8a:	cf 91       	pop	r28
	#elif defined(USB_CAN_BE_HOST)
		USB_HostTask();
	#elif defined(USB_CAN_BE_DEVICE)
		USB_DeviceTask();
	#endif
}
 d8c:	08 95       	ret

00000d8e <_exit>:
 d8e:	f8 94       	cli

00000d90 <__stop_program>:
 d90:	ff cf       	rjmp	.-2      	; 0xd90 <__stop_program>
