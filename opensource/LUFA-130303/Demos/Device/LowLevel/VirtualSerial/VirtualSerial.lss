
VirtualSerial.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000005a  00800100  00000cde  00000d72  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000cde  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000e  0080015a  0080015a  00000dcc  2**0
                  ALLOC
  3 .stab         00000870  00000000  00000000  00000dcc  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000013a  00000000  00000000  0000163c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000330  00000000  00000000  00001778  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00004f8c  00000000  00000000  00001aa8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000012ae  00000000  00000000  00006a34  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000276a  00000000  00000000  00007ce2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000008a0  00000000  00000000  0000a44c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000026d8  00000000  00000000  0000acec  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00003672  00000000  00000000  0000d3c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000520  00000000  00000000  00010a36  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	91 c0       	rjmp	.+290    	; 0x124 <__ctors_end>
   2:	00 00       	nop
   4:	ad c0       	rjmp	.+346    	; 0x160 <__bad_interrupt>
   6:	00 00       	nop
   8:	ab c0       	rjmp	.+342    	; 0x160 <__bad_interrupt>
   a:	00 00       	nop
   c:	a9 c0       	rjmp	.+338    	; 0x160 <__bad_interrupt>
   e:	00 00       	nop
  10:	a7 c0       	rjmp	.+334    	; 0x160 <__bad_interrupt>
  12:	00 00       	nop
  14:	a5 c0       	rjmp	.+330    	; 0x160 <__bad_interrupt>
  16:	00 00       	nop
  18:	a3 c0       	rjmp	.+326    	; 0x160 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	a1 c0       	rjmp	.+322    	; 0x160 <__bad_interrupt>
  1e:	00 00       	nop
  20:	9f c0       	rjmp	.+318    	; 0x160 <__bad_interrupt>
  22:	00 00       	nop
  24:	9d c0       	rjmp	.+314    	; 0x160 <__bad_interrupt>
  26:	00 00       	nop
  28:	0d c4       	rjmp	.+2074   	; 0x844 <__vector_10>
  2a:	00 00       	nop
  2c:	99 c0       	rjmp	.+306    	; 0x160 <__bad_interrupt>
  2e:	00 00       	nop
  30:	97 c0       	rjmp	.+302    	; 0x160 <__bad_interrupt>
  32:	00 00       	nop
  34:	95 c0       	rjmp	.+298    	; 0x160 <__bad_interrupt>
  36:	00 00       	nop
  38:	93 c0       	rjmp	.+294    	; 0x160 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	91 c0       	rjmp	.+290    	; 0x160 <__bad_interrupt>
  3e:	00 00       	nop
  40:	8f c0       	rjmp	.+286    	; 0x160 <__bad_interrupt>
  42:	00 00       	nop
  44:	8d c0       	rjmp	.+282    	; 0x160 <__bad_interrupt>
  46:	00 00       	nop
  48:	8b c0       	rjmp	.+278    	; 0x160 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	89 c0       	rjmp	.+274    	; 0x160 <__bad_interrupt>
  4e:	00 00       	nop
  50:	87 c0       	rjmp	.+270    	; 0x160 <__bad_interrupt>
  52:	00 00       	nop
  54:	85 c0       	rjmp	.+266    	; 0x160 <__bad_interrupt>
  56:	00 00       	nop
  58:	83 c0       	rjmp	.+262    	; 0x160 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	81 c0       	rjmp	.+258    	; 0x160 <__bad_interrupt>
  5e:	00 00       	nop
  60:	7f c0       	rjmp	.+254    	; 0x160 <__bad_interrupt>
  62:	00 00       	nop
  64:	7d c0       	rjmp	.+250    	; 0x160 <__bad_interrupt>
  66:	00 00       	nop
  68:	7b c0       	rjmp	.+246    	; 0x160 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	79 c0       	rjmp	.+242    	; 0x160 <__bad_interrupt>
  6e:	00 00       	nop
  70:	77 c0       	rjmp	.+238    	; 0x160 <__bad_interrupt>
  72:	00 00       	nop
  74:	75 c0       	rjmp	.+234    	; 0x160 <__bad_interrupt>
  76:	00 00       	nop
  78:	73 c0       	rjmp	.+230    	; 0x160 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	71 c0       	rjmp	.+226    	; 0x160 <__bad_interrupt>
  7e:	00 00       	nop
  80:	6f c0       	rjmp	.+222    	; 0x160 <__bad_interrupt>
  82:	00 00       	nop
  84:	6d c0       	rjmp	.+218    	; 0x160 <__bad_interrupt>
  86:	00 00       	nop
  88:	6b c0       	rjmp	.+214    	; 0x160 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	69 c0       	rjmp	.+210    	; 0x160 <__bad_interrupt>
  8e:	00 00       	nop
  90:	67 c0       	rjmp	.+206    	; 0x160 <__bad_interrupt>
  92:	00 00       	nop
  94:	65 c0       	rjmp	.+202    	; 0x160 <__bad_interrupt>
  96:	00 00       	nop

00000098 <ProductString>:
  98:	1c 03 4c 00 55 00 46 00 41 00 20 00 43 00 44 00     ..L.U.F.A. .C.D.
  a8:	43 00 20 00 44 00 65 00 6d 00 6f 00 00 00           C. .D.e.m.o...

000000b6 <ManufacturerString>:
  b6:	18 03 44 00 65 00 61 00 6e 00 20 00 43 00 61 00     ..D.e.a.n. .C.a.
  c6:	6d 00 65 00 72 00 61 00 00 00                       m.e.r.a...

000000d0 <LanguageString>:
  d0:	04 03 09 04                                         ....

000000d4 <ConfigurationDescriptor>:
  d4:	09 02 3e 00 02 01 00 c0 32 09 04 00 00 01 02 02     ..>.....2.......
  e4:	01 00 05 24 00 10 01 04 24 02 06 05 24 06 00 01     ...$....$...$...
  f4:	07 05 82 03 08 00 ff 09 04 01 00 02 0a 00 00 00     ................
 104:	07 05 04 02 10 00 05 07 05 83 02 10 00 05           ..............

00000112 <DeviceDescriptor>:
 112:	12 01 10 01 02 00 00 08 eb 03 44 20 01 00 01 02     ..........D ....
 122:	dc 01                                               ..

00000124 <__ctors_end>:
 124:	11 24       	eor	r1, r1
 126:	1f be       	out	0x3f, r1	; 63
 128:	cf ef       	ldi	r28, 0xFF	; 255
 12a:	d0 e2       	ldi	r29, 0x20	; 32
 12c:	de bf       	out	0x3e, r29	; 62
 12e:	cd bf       	out	0x3d, r28	; 61

00000130 <__do_copy_data>:
 130:	11 e0       	ldi	r17, 0x01	; 1
 132:	a0 e0       	ldi	r26, 0x00	; 0
 134:	b1 e0       	ldi	r27, 0x01	; 1
 136:	ee ed       	ldi	r30, 0xDE	; 222
 138:	fc e0       	ldi	r31, 0x0C	; 12
 13a:	00 e0       	ldi	r16, 0x00	; 0
 13c:	0b bf       	out	0x3b, r16	; 59
 13e:	02 c0       	rjmp	.+4      	; 0x144 <__do_copy_data+0x14>
 140:	07 90       	elpm	r0, Z+
 142:	0d 92       	st	X+, r0
 144:	aa 35       	cpi	r26, 0x5A	; 90
 146:	b1 07       	cpc	r27, r17
 148:	d9 f7       	brne	.-10     	; 0x140 <__do_copy_data+0x10>
 14a:	1b be       	out	0x3b, r1	; 59

0000014c <__do_clear_bss>:
 14c:	11 e0       	ldi	r17, 0x01	; 1
 14e:	aa e5       	ldi	r26, 0x5A	; 90
 150:	b1 e0       	ldi	r27, 0x01	; 1
 152:	01 c0       	rjmp	.+2      	; 0x156 <.do_clear_bss_start>

00000154 <.do_clear_bss_loop>:
 154:	1d 92       	st	X+, r1

00000156 <.do_clear_bss_start>:
 156:	a8 36       	cpi	r26, 0x68	; 104
 158:	b1 07       	cpc	r27, r17
 15a:	e1 f7       	brne	.-8      	; 0x154 <.do_clear_bss_loop>
 15c:	05 d1       	rcall	.+522    	; 0x368 <main>
 15e:	bd c5       	rjmp	.+2938   	; 0xcda <_exit>

00000160 <__bad_interrupt>:
 160:	4f cf       	rjmp	.-354    	; 0x0 <__vectors>

00000162 <LEDs_SetAllLEDs>:
				PORTD &= ~LEDMask;
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
			{
				PORTD = ((PORTD & ~LEDS_ALL_LEDS) | LEDMask);
 162:	9b b1       	in	r25, 0x0b	; 11
 164:	9f 70       	andi	r25, 0x0F	; 15
 166:	98 2b       	or	r25, r24
 168:	9b b9       	out	0x0b, r25	; 11
			}
 16a:	08 95       	ret

0000016c <SetupHardware>:

/** Configures the board hardware and chip peripherals for the demo's functionality. */
void SetupHardware(void)
{
	/* Disable watchdog if enabled by bootloader/fuses */
	MCUSR &= ~(1 << WDRF);
 16c:	84 b7       	in	r24, 0x34	; 52
 16e:	87 7f       	andi	r24, 0xF7	; 247
 170:	84 bf       	out	0x34, r24	; 52
	wdt_disable();
 172:	88 e1       	ldi	r24, 0x18	; 24
 174:	0f b6       	in	r0, 0x3f	; 63
 176:	f8 94       	cli
 178:	80 93 60 00 	sts	0x0060, r24
 17c:	10 92 60 00 	sts	0x0060, r1
 180:	0f be       	out	0x3f, r0	; 63
The type of x is clock_div_t.
*/
void clock_prescale_set(clock_div_t __x)
{
    uint8_t __tmp = _BV(CLKPCE);
    __asm__ __volatile__ (
 182:	90 e0       	ldi	r25, 0x00	; 0
 184:	80 e8       	ldi	r24, 0x80	; 128
 186:	0f b6       	in	r0, 0x3f	; 63
 188:	f8 94       	cli
 18a:	80 93 61 00 	sts	0x0061, r24
 18e:	90 93 61 00 	sts	0x0061, r25
 192:	0f be       	out	0x3f, r0	; 63

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void Joystick_Init(void)
			{
				DDRB  &= ~JOY_BMASK;
 194:	84 b1       	in	r24, 0x04	; 4
 196:	8f 71       	andi	r24, 0x1F	; 31
 198:	84 b9       	out	0x04, r24	; 4
				DDRE  &= ~JOY_EMASK;
 19a:	8d b1       	in	r24, 0x0d	; 13
 19c:	8f 7c       	andi	r24, 0xCF	; 207
 19e:	8d b9       	out	0x0d, r24	; 13

				PORTB |=  JOY_BMASK;
 1a0:	85 b1       	in	r24, 0x05	; 5
 1a2:	80 6e       	ori	r24, 0xE0	; 224
 1a4:	85 b9       	out	0x05, r24	; 5
				PORTE |=  JOY_EMASK;
 1a6:	8e b1       	in	r24, 0x0e	; 14
 1a8:	80 63       	ori	r24, 0x30	; 48
 1aa:	8e b9       	out	0x0e, r24	; 14

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void LEDs_Init(void)
			{
				DDRD  |=  LEDS_ALL_LEDS;
 1ac:	8a b1       	in	r24, 0x0a	; 10
 1ae:	80 6f       	ori	r24, 0xF0	; 240
 1b0:	8a b9       	out	0x0a, r24	; 10
				PORTD &= ~LEDS_ALL_LEDS;
 1b2:	8b b1       	in	r24, 0x0b	; 11
 1b4:	8f 70       	andi	r24, 0x0F	; 15
 1b6:	8b b9       	out	0x0b, r24	; 11
	clock_prescale_set(clock_div_1);

	/* Hardware Initialization */
	Joystick_Init();
	LEDs_Init();
	USB_Init();
 1b8:	2a c3       	rjmp	.+1620   	; 0x80e <USB_Init>

000001ba <EVENT_USB_Device_Connect>:
 1ba:	80 ea       	ldi	r24, 0xA0	; 160
}
 1bc:	d2 cf       	rjmp	.-92     	; 0x162 <LEDs_SetAllLEDs>

000001be <EVENT_USB_Device_Disconnect>:
 *  starts the library USB task to begin the enumeration and USB management process.
 */
void EVENT_USB_Device_Connect(void)
{
	/* Indicate USB enumerating */
	LEDs_SetAllLEDs(LEDMASK_USB_ENUMERATING);
 1be:	80 e1       	ldi	r24, 0x10	; 16
}
 1c0:	d0 cf       	rjmp	.-96     	; 0x162 <LEDs_SetAllLEDs>

000001c2 <EVENT_USB_Device_ConfigurationChanged>:
 *  the status LEDs and stops the USB management and CDC management tasks.
 */
void EVENT_USB_Device_Disconnect(void)
{
	/* Indicate USB not ready */
	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
 1c2:	1f 93       	push	r17
}
 1c4:	cf 93       	push	r28

/** Event handler for the USB_ConfigurationChanged event. This is fired when the host set the current configuration
 *  of the USB device after enumeration - the device endpoints are configured and the CDC management task started.
 */
void EVENT_USB_Device_ConfigurationChanged(void)
{
 1c6:	df 93       	push	r29
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
 1c8:	82 e0       	ldi	r24, 0x02	; 2
 1ca:	61 ec       	ldi	r22, 0xC1	; 193
 1cc:	42 e0       	ldi	r20, 0x02	; 2
 1ce:	51 d2       	rcall	.+1186   	; 0x672 <Endpoint_ConfigureEndpoint_Prv>
 1d0:	18 2f       	mov	r17, r24
 1d2:	83 e0       	ldi	r24, 0x03	; 3
 1d4:	61 e8       	ldi	r22, 0x81	; 129
 1d6:	42 e1       	ldi	r20, 0x12	; 18
 1d8:	4c d2       	rcall	.+1176   	; 0x672 <Endpoint_ConfigureEndpoint_Prv>
 1da:	c8 2f       	mov	r28, r24
 1dc:	d0 e0       	ldi	r29, 0x00	; 0
	bool ConfigSuccess = true;

	/* Setup CDC Data Endpoints */
	ConfigSuccess &= Endpoint_ConfigureEndpoint(CDC_NOTIFICATION_EPADDR, EP_TYPE_INTERRUPT, CDC_NOTIFICATION_EPSIZE, 1);
	ConfigSuccess &= Endpoint_ConfigureEndpoint(CDC_TX_EPADDR, EP_TYPE_BULK, CDC_TXRX_EPSIZE, 1);
 1de:	81 2f       	mov	r24, r17
 1e0:	90 e0       	ldi	r25, 0x00	; 0
void EVENT_USB_Device_ConfigurationChanged(void)
{
	bool ConfigSuccess = true;

	/* Setup CDC Data Endpoints */
	ConfigSuccess &= Endpoint_ConfigureEndpoint(CDC_NOTIFICATION_EPADDR, EP_TYPE_INTERRUPT, CDC_NOTIFICATION_EPSIZE, 1);
 1e2:	c8 23       	and	r28, r24
 1e4:	d9 23       	and	r29, r25
	ConfigSuccess &= Endpoint_ConfigureEndpoint(CDC_TX_EPADDR, EP_TYPE_BULK, CDC_TXRX_EPSIZE, 1);
 1e6:	84 e0       	ldi	r24, 0x04	; 4
 1e8:	60 e8       	ldi	r22, 0x80	; 128
 1ea:	42 e1       	ldi	r20, 0x12	; 18
 1ec:	42 d2       	rcall	.+1156   	; 0x672 <Endpoint_ConfigureEndpoint_Prv>
 1ee:	10 92 52 01 	sts	0x0152, r1
 1f2:	10 92 53 01 	sts	0x0153, r1
	ConfigSuccess &= Endpoint_ConfigureEndpoint(CDC_RX_EPADDR, EP_TYPE_BULK,  CDC_TXRX_EPSIZE, 1);

	/* Reset line encoding baud rate so that the host knows to send new values */
	LineEncoding.BaudRateBPS = 0;
 1f6:	10 92 54 01 	sts	0x0154, r1
 1fa:	10 92 55 01 	sts	0x0155, r1
 1fe:	90 e0       	ldi	r25, 0x00	; 0
 200:	8c 23       	and	r24, r28
 202:	9d 23       	and	r25, r29
	bool ConfigSuccess = true;

	/* Setup CDC Data Endpoints */
	ConfigSuccess &= Endpoint_ConfigureEndpoint(CDC_NOTIFICATION_EPADDR, EP_TYPE_INTERRUPT, CDC_NOTIFICATION_EPSIZE, 1);
	ConfigSuccess &= Endpoint_ConfigureEndpoint(CDC_TX_EPADDR, EP_TYPE_BULK, CDC_TXRX_EPSIZE, 1);
	ConfigSuccess &= Endpoint_ConfigureEndpoint(CDC_RX_EPADDR, EP_TYPE_BULK,  CDC_TXRX_EPSIZE, 1);
 204:	00 97       	sbiw	r24, 0x00	; 0
 206:	11 f0       	breq	.+4      	; 0x20c <EVENT_USB_Device_ConfigurationChanged+0x4a>
 208:	80 e6       	ldi	r24, 0x60	; 96

	/* Reset line encoding baud rate so that the host knows to send new values */
	LineEncoding.BaudRateBPS = 0;

	/* Indicate endpoint configuration success or failure */
	LEDs_SetAllLEDs(ConfigSuccess ? LEDMASK_USB_READY : LEDMASK_USB_ERROR);
 20a:	01 c0       	rjmp	.+2      	; 0x20e <EVENT_USB_Device_ConfigurationChanged+0x4c>
 20c:	80 e9       	ldi	r24, 0x90	; 144
 20e:	a9 df       	rcall	.-174    	; 0x162 <LEDs_SetAllLEDs>
 210:	df 91       	pop	r29
 212:	cf 91       	pop	r28
 214:	1f 91       	pop	r17
 216:	08 95       	ret

00000218 <EVENT_USB_Device_ControlRequest>:
}
 218:	80 91 61 01 	lds	r24, 0x0161
 21c:	81 32       	cpi	r24, 0x21	; 33
 21e:	29 f0       	breq	.+10     	; 0x22a <EVENT_USB_Device_ControlRequest+0x12>
 *  internally.
 */
void EVENT_USB_Device_ControlRequest(void)
{
	/* Process CDC specific control requests */
	switch (USB_ControlRequest.bRequest)
 220:	82 32       	cpi	r24, 0x22	; 34
 222:	49 f1       	breq	.+82     	; 0x276 <EVENT_USB_Device_ControlRequest+0x5e>
 224:	80 32       	cpi	r24, 0x20	; 32
 226:	89 f5       	brne	.+98     	; 0x28a <EVENT_USB_Device_ControlRequest+0x72>
 228:	12 c0       	rjmp	.+36     	; 0x24e <EVENT_USB_Device_ControlRequest+0x36>
	{
		case CDC_REQ_GetLineEncoding:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
 22a:	80 91 60 01 	lds	r24, 0x0160
 22e:	81 3a       	cpi	r24, 0xA1	; 161
 230:	61 f5       	brne	.+88     	; 0x28a <EVENT_USB_Device_ControlRequest+0x72>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 232:	80 91 e8 00 	lds	r24, 0x00E8
 236:	87 7f       	andi	r24, 0xF7	; 247
 238:	80 93 e8 00 	sts	0x00E8, r24
			{
				Endpoint_ClearSETUP();

				/* Write the line coding data to the control endpoint */
				Endpoint_Write_Control_Stream_LE(&LineEncoding, sizeof(CDC_LineEncoding_t));
 23c:	82 e5       	ldi	r24, 0x52	; 82
 23e:	91 e0       	ldi	r25, 0x01	; 1
 240:	67 e0       	ldi	r22, 0x07	; 7
 242:	70 e0       	ldi	r23, 0x00	; 0
 244:	14 d1       	rcall	.+552    	; 0x46e <Endpoint_Write_Control_Stream_LE>
 246:	80 91 e8 00 	lds	r24, 0x00E8
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 24a:	8b 77       	andi	r24, 0x7B	; 123
 24c:	11 c0       	rjmp	.+34     	; 0x270 <EVENT_USB_Device_ControlRequest+0x58>
 24e:	80 91 60 01 	lds	r24, 0x0160
				Endpoint_ClearOUT();
			}

			break;
		case CDC_REQ_SetLineEncoding:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
 252:	81 32       	cpi	r24, 0x21	; 33
 254:	d1 f4       	brne	.+52     	; 0x28a <EVENT_USB_Device_ControlRequest+0x72>
 256:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 25a:	87 7f       	andi	r24, 0xF7	; 247
 25c:	80 93 e8 00 	sts	0x00E8, r24
 260:	82 e5       	ldi	r24, 0x52	; 82
			{
				Endpoint_ClearSETUP();

				/* Read the line coding data in from the host into the global struct */
				Endpoint_Read_Control_Stream_LE(&LineEncoding, sizeof(CDC_LineEncoding_t));
 262:	91 e0       	ldi	r25, 0x01	; 1
 264:	67 e0       	ldi	r22, 0x07	; 7
 266:	70 e0       	ldi	r23, 0x00	; 0
 268:	5e d1       	rcall	.+700    	; 0x526 <Endpoint_Read_Control_Stream_LE>
 26a:	80 91 e8 00 	lds	r24, 0x00E8
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 26e:	8e 77       	andi	r24, 0x7E	; 126
 270:	80 93 e8 00 	sts	0x00E8, r24
 274:	08 95       	ret
 276:	80 91 60 01 	lds	r24, 0x0160
				Endpoint_ClearIN();
			}

			break;
		case CDC_REQ_SetControlLineState:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
 27a:	81 32       	cpi	r24, 0x21	; 33
 27c:	31 f4       	brne	.+12     	; 0x28a <EVENT_USB_Device_ControlRequest+0x72>
 27e:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 282:	87 7f       	andi	r24, 0xF7	; 247
 284:	80 93 e8 00 	sts	0x00E8, r24
 288:	29 c2       	rjmp	.+1106   	; 0x6dc <Endpoint_ClearStatusStage>
 28a:	08 95       	ret

0000028c <CDC_Task>:
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
 28c:	23 b1       	in	r18, 0x03	; 3
 28e:	8c b1       	in	r24, 0x0c	; 12
 290:	90 91 5f 01 	lds	r25, 0x015F
	char*       ReportString    = NULL;
	uint8_t     JoyStatus_LCL   = Joystick_GetStatus();
	static bool ActionSent      = false;

	/* Device must be connected and configured for the task to run */
	if (USB_DeviceState != DEVICE_STATE_Configured)
 294:	94 30       	cpi	r25, 0x04	; 4
 296:	09 f0       	breq	.+2      	; 0x29a <CDC_Task+0xe>
 298:	66 c0       	rjmp	.+204    	; 0x366 <CDC_Task+0xda>
			}

			static inline uint8_t Joystick_GetStatus(void) ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t Joystick_GetStatus(void)
			{
				return (((uint8_t)~PINB & JOY_BMASK) | (((uint8_t)~PINE & JOY_EMASK) >> JOY_PORTE_MASK_SHIFT));
 29a:	80 95       	com	r24
 29c:	90 e0       	ldi	r25, 0x00	; 0
 29e:	80 73       	andi	r24, 0x30	; 48
 2a0:	90 70       	andi	r25, 0x00	; 0
 2a2:	95 95       	asr	r25
 2a4:	87 95       	ror	r24
 2a6:	92 2f       	mov	r25, r18
 2a8:	90 95       	com	r25
 2aa:	90 7e       	andi	r25, 0xE0	; 224
 2ac:	98 2b       	or	r25, r24
	  return;

	/* Determine if a joystick action has occurred */
	if (JoyStatus_LCL & JOY_UP)
 2ae:	97 fd       	sbrc	r25, 7
 2b0:	0b c0       	rjmp	.+22     	; 0x2c8 <CDC_Task+0x3c>
	  ReportString = "Joystick Up\r\n";
	else if (JoyStatus_LCL & JOY_DOWN)
 2b2:	94 fd       	sbrc	r25, 4
 2b4:	0c c0       	rjmp	.+24     	; 0x2ce <CDC_Task+0x42>
	  ReportString = "Joystick Down\r\n";
	else if (JoyStatus_LCL & JOY_LEFT)
 2b6:	96 fd       	sbrc	r25, 6
 2b8:	0d c0       	rjmp	.+26     	; 0x2d4 <CDC_Task+0x48>
	  ReportString = "Joystick Left\r\n";
	else if (JoyStatus_LCL & JOY_RIGHT)
 2ba:	93 fd       	sbrc	r25, 3
 2bc:	0e c0       	rjmp	.+28     	; 0x2da <CDC_Task+0x4e>
	  ReportString = "Joystick Right\r\n";
	else if (JoyStatus_LCL & JOY_PRESS)
 2be:	95 fd       	sbrc	r25, 5
 2c0:	0f c0       	rjmp	.+30     	; 0x2e0 <CDC_Task+0x54>
	  ReportString = "Joystick Pressed\r\n";
	else
	  ActionSent = false;
 2c2:	10 92 5a 01 	sts	0x015A, r1
 2c6:	43 c0       	rjmp	.+134    	; 0x34e <CDC_Task+0xc2>
	if (USB_DeviceState != DEVICE_STATE_Configured)
	  return;

	/* Determine if a joystick action has occurred */
	if (JoyStatus_LCL & JOY_UP)
	  ReportString = "Joystick Up\r\n";
 2c8:	80 e0       	ldi	r24, 0x00	; 0
 2ca:	91 e0       	ldi	r25, 0x01	; 1
 2cc:	0b c0       	rjmp	.+22     	; 0x2e4 <CDC_Task+0x58>
	else if (JoyStatus_LCL & JOY_DOWN)
	  ReportString = "Joystick Down\r\n";
 2ce:	8e e0       	ldi	r24, 0x0E	; 14
 2d0:	91 e0       	ldi	r25, 0x01	; 1
 2d2:	08 c0       	rjmp	.+16     	; 0x2e4 <CDC_Task+0x58>
	else if (JoyStatus_LCL & JOY_LEFT)
	  ReportString = "Joystick Left\r\n";
 2d4:	8e e1       	ldi	r24, 0x1E	; 30
 2d6:	91 e0       	ldi	r25, 0x01	; 1
 2d8:	05 c0       	rjmp	.+10     	; 0x2e4 <CDC_Task+0x58>
	else if (JoyStatus_LCL & JOY_RIGHT)
	  ReportString = "Joystick Right\r\n";
 2da:	8e e2       	ldi	r24, 0x2E	; 46
 2dc:	91 e0       	ldi	r25, 0x01	; 1
 2de:	02 c0       	rjmp	.+4      	; 0x2e4 <CDC_Task+0x58>
	else if (JoyStatus_LCL & JOY_PRESS)
	  ReportString = "Joystick Pressed\r\n";
 2e0:	8f e3       	ldi	r24, 0x3F	; 63
 2e2:	91 e0       	ldi	r25, 0x01	; 1
	else
	  ActionSent = false;

	/* Flag management - Only allow one string to be sent per action */
	if ((ReportString != NULL) && (ActionSent == false) && LineEncoding.BaudRateBPS)
 2e4:	20 91 5a 01 	lds	r18, 0x015A
 2e8:	22 23       	and	r18, r18
 2ea:	89 f5       	brne	.+98     	; 0x34e <CDC_Task+0xc2>
 2ec:	40 91 52 01 	lds	r20, 0x0152
 2f0:	50 91 53 01 	lds	r21, 0x0153
 2f4:	60 91 54 01 	lds	r22, 0x0154
 2f8:	70 91 55 01 	lds	r23, 0x0155
 2fc:	41 15       	cp	r20, r1
 2fe:	51 05       	cpc	r21, r1
 300:	61 05       	cpc	r22, r1
 302:	71 05       	cpc	r23, r1
 304:	21 f1       	breq	.+72     	; 0x34e <CDC_Task+0xc2>
	{
		ActionSent = true;
 306:	21 e0       	ldi	r18, 0x01	; 1
 308:	20 93 5a 01 	sts	0x015A, r18
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 30c:	23 e0       	ldi	r18, 0x03	; 3
 30e:	20 93 e9 00 	sts	0x00E9, r18

		/* Select the Serial Tx Endpoint */
		Endpoint_SelectEndpoint(CDC_TX_EPADDR);

		/* Write the String to the Endpoint */
		Endpoint_Write_Stream_LE(ReportString, strlen(ReportString), NULL);
 312:	dc 01       	movw	r26, r24
 314:	0d 90       	ld	r0, X+
 316:	00 20       	and	r0, r0
 318:	e9 f7       	brne	.-6      	; 0x314 <CDC_Task+0x88>
 31a:	bd 01       	movw	r22, r26
 31c:	61 50       	subi	r22, 0x01	; 1
 31e:	70 40       	sbci	r23, 0x00	; 0
 320:	68 1b       	sub	r22, r24
 322:	79 0b       	sbc	r23, r25
 324:	40 e0       	ldi	r20, 0x00	; 0
 326:	50 e0       	ldi	r21, 0x00	; 0
 328:	52 d0       	rcall	.+164    	; 0x3ce <Endpoint_Write_Stream_LE>
 32a:	80 91 f2 00 	lds	r24, 0x00F2
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
 32e:	90 91 f3 00 	lds	r25, 0x00F3
 332:	20 91 e8 00 	lds	r18, 0x00E8
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 336:	2e 77       	andi	r18, 0x7E	; 126
 338:	20 93 e8 00 	sts	0x00E8, r18
 33c:	80 31       	cpi	r24, 0x10	; 16
		/* Finalize the stream transfer to send the last packet */
		Endpoint_ClearIN();

		/* If the last packet filled the endpoint, send an empty packet to release the buffer on
		 * the receiver (otherwise all data will be cached until a non-full packet is received) */
		if (IsFull)
 33e:	91 05       	cpc	r25, r1
 340:	31 f4       	brne	.+12     	; 0x34e <CDC_Task+0xc2>
 342:	ed d1       	rcall	.+986    	; 0x71e <Endpoint_WaitUntilReady>
		{
			/* Wait until the endpoint is ready for another packet */
			Endpoint_WaitUntilReady();
 344:	80 91 e8 00 	lds	r24, 0x00E8
 348:	8e 77       	andi	r24, 0x7E	; 126
 34a:	80 93 e8 00 	sts	0x00E8, r24
 34e:	84 e0       	ldi	r24, 0x04	; 4
 350:	80 93 e9 00 	sts	0x00E9, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 354:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 358:	82 ff       	sbrs	r24, 2
 35a:	05 c0       	rjmp	.+10     	; 0x366 <CDC_Task+0xda>

	/* Select the Serial Rx Endpoint */
	Endpoint_SelectEndpoint(CDC_RX_EPADDR);

	/* Throw away any received data from the host */
	if (Endpoint_IsOUTReceived())
 35c:	80 91 e8 00 	lds	r24, 0x00E8
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 360:	8b 77       	andi	r24, 0x7B	; 123
 362:	80 93 e8 00 	sts	0x00E8, r24
 366:	08 95       	ret

00000368 <main>:
 368:	01 df       	rcall	.-510    	; 0x16c <SetupHardware>
 36a:	80 e1       	ldi	r24, 0x10	; 16
 */
int main(void)
{
	SetupHardware();

	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
 36c:	fa de       	rcall	.-524    	; 0x162 <LEDs_SetAllLEDs>
 36e:	78 94       	sei
 370:	8d df       	rcall	.-230    	; 0x28c <CDC_Task>
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				sei();
 372:	97 d4       	rcall	.+2350   	; 0xca2 <USB_USBTask>
	GlobalInterruptEnable();

	for (;;)
	{
		CDC_Task();
 374:	fd cf       	rjmp	.-6      	; 0x370 <main+0x8>

00000376 <CALLBACK_USB_GetDescriptor>:
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
 376:	92 30       	cpi	r25, 0x02	; 2
 378:	29 f0       	breq	.+10     	; 0x384 <CALLBACK_USB_GetDescriptor+0xe>
 37a:	93 30       	cpi	r25, 0x03	; 3
 37c:	41 f0       	breq	.+16     	; 0x38e <CALLBACK_USB_GetDescriptor+0x18>
 37e:	91 30       	cpi	r25, 0x01	; 1
 380:	e9 f4       	brne	.+58     	; 0x3bc <CALLBACK_USB_GetDescriptor+0x46>
 382:	17 c0       	rjmp	.+46     	; 0x3b2 <CALLBACK_USB_GetDescriptor+0x3c>
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
			Size    = sizeof(USB_Descriptor_Configuration_t);
 384:	8e e3       	ldi	r24, 0x3E	; 62
 386:	90 e0       	ldi	r25, 0x00	; 0
		case DTYPE_Device:
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
 388:	e4 ed       	ldi	r30, 0xD4	; 212
 38a:	f0 e0       	ldi	r31, 0x00	; 0
			Size    = sizeof(USB_Descriptor_Configuration_t);
			break;
 38c:	1b c0       	rjmp	.+54     	; 0x3c4 <CALLBACK_USB_GetDescriptor+0x4e>
		case DTYPE_String:
			switch (DescriptorNumber)
 38e:	81 30       	cpi	r24, 0x01	; 1
 390:	41 f0       	breq	.+16     	; 0x3a2 <CALLBACK_USB_GetDescriptor+0x2c>
 392:	81 30       	cpi	r24, 0x01	; 1
 394:	18 f0       	brcs	.+6      	; 0x39c <CALLBACK_USB_GetDescriptor+0x26>
 396:	82 30       	cpi	r24, 0x02	; 2
 398:	89 f4       	brne	.+34     	; 0x3bc <CALLBACK_USB_GetDescriptor+0x46>
 39a:	06 c0       	rjmp	.+12     	; 0x3a8 <CALLBACK_USB_GetDescriptor+0x32>
			{
				case 0x00:
					Address = &LanguageString;
					Size    = pgm_read_byte(&LanguageString.Header.Size);
 39c:	e0 ed       	ldi	r30, 0xD0	; 208
 39e:	f0 e0       	ldi	r31, 0x00	; 0
 3a0:	05 c0       	rjmp	.+10     	; 0x3ac <CALLBACK_USB_GetDescriptor+0x36>
					break;
				case 0x01:
					Address = &ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
 3a2:	e6 eb       	ldi	r30, 0xB6	; 182
 3a4:	f0 e0       	ldi	r31, 0x00	; 0
 3a6:	02 c0       	rjmp	.+4      	; 0x3ac <CALLBACK_USB_GetDescriptor+0x36>
					break;
				case 0x02:
					Address = &ProductString;
					Size    = pgm_read_byte(&ProductString.Header.Size);
 3a8:	e8 e9       	ldi	r30, 0x98	; 152
 3aa:	f0 e0       	ldi	r31, 0x00	; 0
 3ac:	84 91       	lpm	r24, Z
 3ae:	90 e0       	ldi	r25, 0x00	; 0
					break;
 3b0:	09 c0       	rjmp	.+18     	; 0x3c4 <CALLBACK_USB_GetDescriptor+0x4e>

	switch (DescriptorType)
	{
		case DTYPE_Device:
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
 3b2:	82 e1       	ldi	r24, 0x12	; 18
 3b4:	90 e0       	ldi	r25, 0x00	; 0
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
	{
		case DTYPE_Device:
			Address = &DeviceDescriptor;
 3b6:	e2 e1       	ldi	r30, 0x12	; 18
 3b8:	f1 e0       	ldi	r31, 0x01	; 1
 3ba:	04 c0       	rjmp	.+8      	; 0x3c4 <CALLBACK_USB_GetDescriptor+0x4e>
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;
 3bc:	80 e0       	ldi	r24, 0x00	; 0
 3be:	90 e0       	ldi	r25, 0x00	; 0
                                    const void** const DescriptorAddress)
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
 3c0:	e0 e0       	ldi	r30, 0x00	; 0
 3c2:	f0 e0       	ldi	r31, 0x00	; 0
			}

			break;
	}

	*DescriptorAddress = Address;
 3c4:	da 01       	movw	r26, r20
 3c6:	11 96       	adiw	r26, 0x01	; 1
 3c8:	fc 93       	st	X, r31
 3ca:	ee 93       	st	-X, r30
	return Size;
}
 3cc:	08 95       	ret

000003ce <Endpoint_Write_Stream_LE>:
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
 3ce:	af 92       	push	r10
 3d0:	bf 92       	push	r11
 3d2:	cf 92       	push	r12
 3d4:	df 92       	push	r13
 3d6:	ef 92       	push	r14
 3d8:	ff 92       	push	r15
 3da:	1f 93       	push	r17
 3dc:	cf 93       	push	r28
 3de:	df 93       	push	r29
 3e0:	ec 01       	movw	r28, r24
 3e2:	7b 01       	movw	r14, r22
 3e4:	6a 01       	movw	r12, r20
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	uint16_t BytesInTransfer = 0;
	uint8_t  ErrorCode;

	if ((ErrorCode = Endpoint_WaitUntilReady()))
 3e6:	9b d1       	rcall	.+822    	; 0x71e <Endpoint_WaitUntilReady>
 3e8:	18 2f       	mov	r17, r24
 3ea:	88 23       	and	r24, r24
 3ec:	a9 f5       	brne	.+106    	; 0x458 <Endpoint_Write_Stream_LE+0x8a>
 3ee:	c1 14       	cp	r12, r1
	  return ErrorCode;

	if (BytesProcessed != NULL)
 3f0:	d1 04       	cpc	r13, r1
 3f2:	39 f0       	breq	.+14     	; 0x402 <Endpoint_Write_Stream_LE+0x34>
 3f4:	f6 01       	movw	r30, r12
	{
		Length -= *BytesProcessed;
 3f6:	20 81       	ld	r18, Z
 3f8:	31 81       	ldd	r19, Z+1	; 0x01
 3fa:	e2 1a       	sub	r14, r18
 3fc:	f3 0a       	sbc	r15, r19
 3fe:	c2 0f       	add	r28, r18
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
 400:	d3 1f       	adc	r29, r19
 402:	aa 24       	eor	r10, r10

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
 404:	bb 24       	eor	r11, r11
 406:	23 c0       	rjmp	.+70     	; 0x44e <Endpoint_Write_Stream_LE+0x80>
 408:	80 91 e8 00 	lds	r24, 0x00E8
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
 40c:	85 fd       	sbrc	r24, 5
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
	{
		if (!(Endpoint_IsReadWriteAllowed()))
 40e:	16 c0       	rjmp	.+44     	; 0x43c <Endpoint_Write_Stream_LE+0x6e>
 410:	80 91 e8 00 	lds	r24, 0x00E8
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 414:	8e 77       	andi	r24, 0x7E	; 126
 416:	80 93 e8 00 	sts	0x00E8, r24
 41a:	43 d4       	rcall	.+2182   	; 0xca2 <USB_USBTask>
		{
			TEMPLATE_CLEAR_ENDPOINT();

			#if !defined(INTERRUPT_CONTROL_ENDPOINT)
			USB_USBTask();
 41c:	c1 14       	cp	r12, r1
 41e:	d1 04       	cpc	r13, r1
			#endif

			if (BytesProcessed != NULL)
 420:	49 f0       	breq	.+18     	; 0x434 <Endpoint_Write_Stream_LE+0x66>
 422:	f6 01       	movw	r30, r12
 424:	80 81       	ld	r24, Z
			{
				*BytesProcessed += BytesInTransfer;
 426:	91 81       	ldd	r25, Z+1	; 0x01
 428:	8a 0d       	add	r24, r10
 42a:	9b 1d       	adc	r25, r11
 42c:	91 83       	std	Z+1, r25	; 0x01
 42e:	80 83       	st	Z, r24
 430:	15 e0       	ldi	r17, 0x05	; 5
 432:	12 c0       	rjmp	.+36     	; 0x458 <Endpoint_Write_Stream_LE+0x8a>
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
 434:	74 d1       	rcall	.+744    	; 0x71e <Endpoint_WaitUntilReady>
 436:	88 23       	and	r24, r24
			}

			if ((ErrorCode = Endpoint_WaitUntilReady()))
 438:	51 f0       	breq	.+20     	; 0x44e <Endpoint_Write_Stream_LE+0x80>
 43a:	0d c0       	rjmp	.+26     	; 0x456 <Endpoint_Write_Stream_LE+0x88>
 43c:	89 91       	ld	r24, Y+
 43e:	80 93 f1 00 	sts	0x00F1, r24
			  return ErrorCode;
		}
		else
		{
			TEMPLATE_TRANSFER_BYTE(DataStream);
 442:	08 94       	sec
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
 444:	e1 08       	sbc	r14, r1
 446:	f1 08       	sbc	r15, r1
			TEMPLATE_BUFFER_MOVE(DataStream, 1);
			Length--;
 448:	08 94       	sec
 44a:	a1 1c       	adc	r10, r1
 44c:	b1 1c       	adc	r11, r1
			BytesInTransfer++;
 44e:	e1 14       	cp	r14, r1
 450:	f1 04       	cpc	r15, r1
 452:	d1 f6       	brne	.-76     	; 0x408 <Endpoint_Write_Stream_LE+0x3a>
	{
		Length -= *BytesProcessed;
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
 454:	01 c0       	rjmp	.+2      	; 0x458 <Endpoint_Write_Stream_LE+0x8a>
 456:	18 2f       	mov	r17, r24
 458:	81 2f       	mov	r24, r17
 45a:	df 91       	pop	r29
			{
				*BytesProcessed += BytesInTransfer;
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
			}

			if ((ErrorCode = Endpoint_WaitUntilReady()))
 45c:	cf 91       	pop	r28
			BytesInTransfer++;
		}
	}

	return ENDPOINT_RWSTREAM_NoError;
}
 45e:	1f 91       	pop	r17
 460:	ff 90       	pop	r15
 462:	ef 90       	pop	r14
 464:	df 90       	pop	r13
 466:	cf 90       	pop	r12
 468:	bf 90       	pop	r11
 46a:	af 90       	pop	r10
 46c:	08 95       	ret

0000046e <Endpoint_Write_Control_Stream_LE>:
 46e:	20 91 66 01 	lds	r18, 0x0166
 472:	30 91 67 01 	lds	r19, 0x0167
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
 476:	26 17       	cp	r18, r22
 478:	37 07       	cpc	r19, r23
 47a:	20 f4       	brcc	.+8      	; 0x484 <Endpoint_Write_Control_Stream_LE+0x16>
 47c:	b9 01       	movw	r22, r18
 47e:	fc 01       	movw	r30, r24
 480:	20 e0       	ldi	r18, 0x00	; 0
 482:	37 c0       	rjmp	.+110    	; 0x4f2 <Endpoint_Write_Control_Stream_LE+0x84>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
 484:	61 15       	cp	r22, r1
 486:	71 05       	cpc	r23, r1
 488:	d1 f7       	brne	.-12     	; 0x47e <Endpoint_Write_Control_Stream_LE+0x10>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 48a:	20 91 e8 00 	lds	r18, 0x00E8
 48e:	2e 77       	andi	r18, 0x7E	; 126
 490:	20 93 e8 00 	sts	0x00E8, r18
 494:	f4 cf       	rjmp	.-24     	; 0x47e <Endpoint_Write_Control_Stream_LE+0x10>
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
 496:	80 91 5f 01 	lds	r24, 0x015F

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
 49a:	88 23       	and	r24, r24
 49c:	09 f4       	brne	.+2      	; 0x4a0 <Endpoint_Write_Control_Stream_LE+0x32>
 49e:	3f c0       	rjmp	.+126    	; 0x51e <Endpoint_Write_Control_Stream_LE+0xb0>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
 4a0:	85 30       	cpi	r24, 0x05	; 5
 4a2:	c9 f1       	breq	.+114    	; 0x516 <Endpoint_Write_Control_Stream_LE+0xa8>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 4a4:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
 4a8:	83 fd       	sbrc	r24, 3
 4aa:	37 c0       	rjmp	.+110    	; 0x51a <Endpoint_Write_Control_Stream_LE+0xac>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 4ac:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
 4b0:	82 fd       	sbrc	r24, 2
 4b2:	2b c0       	rjmp	.+86     	; 0x50a <Endpoint_Write_Control_Stream_LE+0x9c>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 4b4:	80 91 e8 00 	lds	r24, 0x00E8
		  break;

		if (Endpoint_IsINReady())
 4b8:	80 ff       	sbrs	r24, 0
 4ba:	1b c0       	rjmp	.+54     	; 0x4f2 <Endpoint_Write_Control_Stream_LE+0x84>
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
 4bc:	80 91 f2 00 	lds	r24, 0x00F2
 4c0:	90 91 f3 00 	lds	r25, 0x00F3
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
 4c4:	06 c0       	rjmp	.+12     	; 0x4d2 <Endpoint_Write_Control_Stream_LE+0x64>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
 4c6:	21 91       	ld	r18, Z+
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
 4c8:	20 93 f1 00 	sts	0x00F1, r18
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
 4cc:	61 50       	subi	r22, 0x01	; 1
 4ce:	70 40       	sbci	r23, 0x00	; 0
				BytesInEndpoint++;
 4d0:	01 96       	adiw	r24, 0x01	; 1

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
 4d2:	61 15       	cp	r22, r1
 4d4:	71 05       	cpc	r23, r1
 4d6:	19 f0       	breq	.+6      	; 0x4de <Endpoint_Write_Control_Stream_LE+0x70>
 4d8:	88 30       	cpi	r24, 0x08	; 8
 4da:	91 05       	cpc	r25, r1
 4dc:	a0 f3       	brcs	.-24     	; 0x4c6 <Endpoint_Write_Control_Stream_LE+0x58>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
 4de:	21 e0       	ldi	r18, 0x01	; 1
 4e0:	88 30       	cpi	r24, 0x08	; 8
 4e2:	91 05       	cpc	r25, r1
 4e4:	09 f0       	breq	.+2      	; 0x4e8 <Endpoint_Write_Control_Stream_LE+0x7a>
 4e6:	20 e0       	ldi	r18, 0x00	; 0
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 4e8:	80 91 e8 00 	lds	r24, 0x00E8
 4ec:	8e 77       	andi	r24, 0x7E	; 126
 4ee:	80 93 e8 00 	sts	0x00E8, r24
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
 4f2:	61 15       	cp	r22, r1
 4f4:	71 05       	cpc	r23, r1
 4f6:	79 f6       	brne	.-98     	; 0x496 <Endpoint_Write_Control_Stream_LE+0x28>
 4f8:	22 23       	and	r18, r18
 4fa:	69 f6       	brne	.-102    	; 0x496 <Endpoint_Write_Control_Stream_LE+0x28>
 4fc:	06 c0       	rjmp	.+12     	; 0x50a <Endpoint_Write_Control_Stream_LE+0x9c>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
 4fe:	80 91 5f 01 	lds	r24, 0x015F

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
 502:	88 23       	and	r24, r24
 504:	61 f0       	breq	.+24     	; 0x51e <Endpoint_Write_Control_Stream_LE+0xb0>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
 506:	85 30       	cpi	r24, 0x05	; 5
 508:	61 f0       	breq	.+24     	; 0x522 <Endpoint_Write_Control_Stream_LE+0xb4>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 50a:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
 50e:	82 ff       	sbrs	r24, 2
 510:	f6 cf       	rjmp	.-20     	; 0x4fe <Endpoint_Write_Control_Stream_LE+0x90>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
 512:	80 e0       	ldi	r24, 0x00	; 0
 514:	08 95       	ret
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
 516:	83 e0       	ldi	r24, 0x03	; 3
 518:	08 95       	ret
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
 51a:	81 e0       	ldi	r24, 0x01	; 1
 51c:	08 95       	ret
	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
 51e:	82 e0       	ldi	r24, 0x02	; 2
 520:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
 522:	83 e0       	ldi	r24, 0x03	; 3
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
 524:	08 95       	ret

00000526 <Endpoint_Read_Control_Stream_LE>:
uint8_t TEMPLATE_FUNC_NAME (void* const Buffer,
                            uint16_t Length)
{
	uint8_t* DataStream = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));

	if (!(Length))
 526:	61 15       	cp	r22, r1
 528:	71 05       	cpc	r23, r1
 52a:	29 f4       	brne	.+10     	; 0x536 <Endpoint_Read_Control_Stream_LE+0x10>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 52c:	20 91 e8 00 	lds	r18, 0x00E8
 530:	2b 77       	andi	r18, 0x7B	; 123
 532:	20 93 e8 00 	sts	0x00E8, r18

#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (void* const Buffer,
                            uint16_t Length)
{
 536:	38 2f       	mov	r19, r24
 538:	29 2f       	mov	r18, r25
 53a:	26 c0       	rjmp	.+76     	; 0x588 <Endpoint_Read_Control_Stream_LE+0x62>
	if (!(Length))
	  Endpoint_ClearOUT();

	while (Length)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
 53c:	80 91 5f 01 	lds	r24, 0x015F

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
 540:	88 23       	and	r24, r24
 542:	b1 f1       	breq	.+108    	; 0x5b0 <Endpoint_Read_Control_Stream_LE+0x8a>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
 544:	85 30       	cpi	r24, 0x05	; 5
 546:	81 f1       	breq	.+96     	; 0x5a8 <Endpoint_Read_Control_Stream_LE+0x82>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 548:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
 54c:	83 fd       	sbrc	r24, 3
 54e:	2e c0       	rjmp	.+92     	; 0x5ac <Endpoint_Read_Control_Stream_LE+0x86>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 550:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;

		if (Endpoint_IsOUTReceived())
 554:	82 ff       	sbrs	r24, 2
 556:	f2 cf       	rjmp	.-28     	; 0x53c <Endpoint_Read_Control_Stream_LE+0x16>
 558:	e3 2f       	mov	r30, r19
 55a:	f2 2f       	mov	r31, r18
 55c:	08 c0       	rjmp	.+16     	; 0x56e <Endpoint_Read_Control_Stream_LE+0x48>
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
 55e:	80 91 f1 00 	lds	r24, 0x00F1
		{
			while (Length && Endpoint_BytesInEndpoint())
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
 562:	81 93       	st	Z+, r24
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
 564:	3e 2f       	mov	r19, r30
 566:	2f 2f       	mov	r18, r31
				Length--;
 568:	61 50       	subi	r22, 0x01	; 1
 56a:	70 40       	sbci	r23, 0x00	; 0
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;

		if (Endpoint_IsOUTReceived())
		{
			while (Length && Endpoint_BytesInEndpoint())
 56c:	41 f0       	breq	.+16     	; 0x57e <Endpoint_Read_Control_Stream_LE+0x58>
 56e:	3e 2f       	mov	r19, r30
 570:	2f 2f       	mov	r18, r31
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
 572:	80 91 f2 00 	lds	r24, 0x00F2
 576:	90 91 f3 00 	lds	r25, 0x00F3
 57a:	00 97       	sbiw	r24, 0x00	; 0
 57c:	81 f7       	brne	.-32     	; 0x55e <Endpoint_Read_Control_Stream_LE+0x38>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 57e:	80 91 e8 00 	lds	r24, 0x00E8
 582:	8b 77       	andi	r24, 0x7B	; 123
 584:	80 93 e8 00 	sts	0x00E8, r24
	uint8_t* DataStream = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));

	if (!(Length))
	  Endpoint_ClearOUT();

	while (Length)
 588:	61 15       	cp	r22, r1
 58a:	71 05       	cpc	r23, r1
 58c:	b9 f6       	brne	.-82     	; 0x53c <Endpoint_Read_Control_Stream_LE+0x16>
 58e:	06 c0       	rjmp	.+12     	; 0x59c <Endpoint_Read_Control_Stream_LE+0x76>
		}
	}

	while (!(Endpoint_IsINReady()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
 590:	80 91 5f 01 	lds	r24, 0x015F

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
 594:	88 23       	and	r24, r24
 596:	61 f0       	breq	.+24     	; 0x5b0 <Endpoint_Read_Control_Stream_LE+0x8a>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
 598:	85 30       	cpi	r24, 0x05	; 5
 59a:	61 f0       	breq	.+24     	; 0x5b4 <Endpoint_Read_Control_Stream_LE+0x8e>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 59c:	80 91 e8 00 	lds	r24, 0x00E8

			Endpoint_ClearOUT();
		}
	}

	while (!(Endpoint_IsINReady()))
 5a0:	80 ff       	sbrs	r24, 0
 5a2:	f6 cf       	rjmp	.-20     	; 0x590 <Endpoint_Read_Control_Stream_LE+0x6a>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
 5a4:	80 e0       	ldi	r24, 0x00	; 0
 5a6:	08 95       	ret
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
 5a8:	83 e0       	ldi	r24, 0x03	; 3
 5aa:	08 95       	ret
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
 5ac:	81 e0       	ldi	r24, 0x01	; 1
 5ae:	08 95       	ret
	while (!(Endpoint_IsINReady()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
 5b0:	82 e0       	ldi	r24, 0x02	; 2
 5b2:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
 5b4:	83 e0       	ldi	r24, 0x03	; 3
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
 5b6:	08 95       	ret

000005b8 <Endpoint_Write_Control_PStream_LE>:
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
 5b8:	20 91 66 01 	lds	r18, 0x0166
 5bc:	30 91 67 01 	lds	r19, 0x0167
 5c0:	26 17       	cp	r18, r22
 5c2:	37 07       	cpc	r19, r23
 5c4:	20 f4       	brcc	.+8      	; 0x5ce <Endpoint_Write_Control_PStream_LE+0x16>
 5c6:	b9 01       	movw	r22, r18
 5c8:	fc 01       	movw	r30, r24
 5ca:	20 e0       	ldi	r18, 0x00	; 0
 5cc:	38 c0       	rjmp	.+112    	; 0x63e <Endpoint_Write_Control_PStream_LE+0x86>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
 5ce:	61 15       	cp	r22, r1
 5d0:	71 05       	cpc	r23, r1
 5d2:	d1 f7       	brne	.-12     	; 0x5c8 <Endpoint_Write_Control_PStream_LE+0x10>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 5d4:	20 91 e8 00 	lds	r18, 0x00E8
 5d8:	2e 77       	andi	r18, 0x7E	; 126
 5da:	20 93 e8 00 	sts	0x00E8, r18
 5de:	f4 cf       	rjmp	.-24     	; 0x5c8 <Endpoint_Write_Control_PStream_LE+0x10>
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
 5e0:	80 91 5f 01 	lds	r24, 0x015F

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
 5e4:	88 23       	and	r24, r24
 5e6:	09 f4       	brne	.+2      	; 0x5ea <Endpoint_Write_Control_PStream_LE+0x32>
 5e8:	40 c0       	rjmp	.+128    	; 0x66a <Endpoint_Write_Control_PStream_LE+0xb2>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
 5ea:	85 30       	cpi	r24, 0x05	; 5
 5ec:	d1 f1       	breq	.+116    	; 0x662 <Endpoint_Write_Control_PStream_LE+0xaa>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 5ee:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
 5f2:	83 fd       	sbrc	r24, 3
 5f4:	38 c0       	rjmp	.+112    	; 0x666 <Endpoint_Write_Control_PStream_LE+0xae>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 5f6:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
 5fa:	82 fd       	sbrc	r24, 2
 5fc:	2c c0       	rjmp	.+88     	; 0x656 <Endpoint_Write_Control_PStream_LE+0x9e>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 5fe:	80 91 e8 00 	lds	r24, 0x00E8
		  break;

		if (Endpoint_IsINReady())
 602:	80 ff       	sbrs	r24, 0
 604:	1c c0       	rjmp	.+56     	; 0x63e <Endpoint_Write_Control_PStream_LE+0x86>
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
 606:	80 91 f2 00 	lds	r24, 0x00F2
 60a:	90 91 f3 00 	lds	r25, 0x00F3
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
 60e:	07 c0       	rjmp	.+14     	; 0x61e <Endpoint_Write_Control_PStream_LE+0x66>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
 610:	24 91       	lpm	r18, Z
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
 612:	20 93 f1 00 	sts	0x00F1, r18
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
 616:	31 96       	adiw	r30, 0x01	; 1
				Length--;
 618:	61 50       	subi	r22, 0x01	; 1
 61a:	70 40       	sbci	r23, 0x00	; 0
				BytesInEndpoint++;
 61c:	01 96       	adiw	r24, 0x01	; 1

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
 61e:	61 15       	cp	r22, r1
 620:	71 05       	cpc	r23, r1
 622:	19 f0       	breq	.+6      	; 0x62a <Endpoint_Write_Control_PStream_LE+0x72>
 624:	88 30       	cpi	r24, 0x08	; 8
 626:	91 05       	cpc	r25, r1
 628:	98 f3       	brcs	.-26     	; 0x610 <Endpoint_Write_Control_PStream_LE+0x58>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
 62a:	21 e0       	ldi	r18, 0x01	; 1
 62c:	88 30       	cpi	r24, 0x08	; 8
 62e:	91 05       	cpc	r25, r1
 630:	09 f0       	breq	.+2      	; 0x634 <Endpoint_Write_Control_PStream_LE+0x7c>
 632:	20 e0       	ldi	r18, 0x00	; 0
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 634:	80 91 e8 00 	lds	r24, 0x00E8
 638:	8e 77       	andi	r24, 0x7E	; 126
 63a:	80 93 e8 00 	sts	0x00E8, r24
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
 63e:	61 15       	cp	r22, r1
 640:	71 05       	cpc	r23, r1
 642:	71 f6       	brne	.-100    	; 0x5e0 <Endpoint_Write_Control_PStream_LE+0x28>
 644:	22 23       	and	r18, r18
 646:	61 f6       	brne	.-104    	; 0x5e0 <Endpoint_Write_Control_PStream_LE+0x28>
 648:	06 c0       	rjmp	.+12     	; 0x656 <Endpoint_Write_Control_PStream_LE+0x9e>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
 64a:	80 91 5f 01 	lds	r24, 0x015F

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
 64e:	88 23       	and	r24, r24
 650:	61 f0       	breq	.+24     	; 0x66a <Endpoint_Write_Control_PStream_LE+0xb2>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
 652:	85 30       	cpi	r24, 0x05	; 5
 654:	61 f0       	breq	.+24     	; 0x66e <Endpoint_Write_Control_PStream_LE+0xb6>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 656:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
 65a:	82 ff       	sbrs	r24, 2
 65c:	f6 cf       	rjmp	.-20     	; 0x64a <Endpoint_Write_Control_PStream_LE+0x92>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
 65e:	80 e0       	ldi	r24, 0x00	; 0
 660:	08 95       	ret
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
 662:	83 e0       	ldi	r24, 0x03	; 3
 664:	08 95       	ret
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
 666:	81 e0       	ldi	r24, 0x01	; 1
 668:	08 95       	ret
	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
 66a:	82 e0       	ldi	r24, 0x02	; 2
 66c:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
 66e:	83 e0       	ldi	r24, 0x03	; 3
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
 670:	08 95       	ret

00000672 <Endpoint_ConfigureEndpoint_Prv>:
	UECFG0X = UECFG0XData;
	UECFG1X = UECFG1XData;

	return Endpoint_IsConfigured();
#else
	for (uint8_t EPNum = Number; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
 672:	98 2f       	mov	r25, r24
 674:	2a c0       	rjmp	.+84     	; 0x6ca <Endpoint_ConfigureEndpoint_Prv+0x58>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 676:	90 93 e9 00 	sts	0x00E9, r25
		uint8_t UECFG1XTemp;
		uint8_t UEIENXTemp;

		Endpoint_SelectEndpoint(EPNum);

		if (EPNum == Number)
 67a:	98 17       	cp	r25, r24
 67c:	39 f0       	breq	.+14     	; 0x68c <Endpoint_ConfigureEndpoint_Prv+0x1a>
			UECFG1XTemp = UECFG1XData;
			UEIENXTemp  = 0;
		}
		else
		{
			UECFG0XTemp = UECFG0X;
 67e:	70 91 ec 00 	lds	r23, 0x00EC
			UECFG1XTemp = UECFG1X;
 682:	20 91 ed 00 	lds	r18, 0x00ED
			UEIENXTemp  = UEIENX;
 686:	50 91 f0 00 	lds	r21, 0x00F0
 68a:	03 c0       	rjmp	.+6      	; 0x692 <Endpoint_ConfigureEndpoint_Prv+0x20>
		Endpoint_SelectEndpoint(EPNum);

		if (EPNum == Number)
		{
			UECFG0XTemp = UECFG0XData;
			UECFG1XTemp = UECFG1XData;
 68c:	24 2f       	mov	r18, r20

		Endpoint_SelectEndpoint(EPNum);

		if (EPNum == Number)
		{
			UECFG0XTemp = UECFG0XData;
 68e:	76 2f       	mov	r23, r22
			UECFG1XTemp = UECFG1XData;
			UEIENXTemp  = 0;
 690:	50 e0       	ldi	r21, 0x00	; 0
			UECFG0XTemp = UECFG0X;
			UECFG1XTemp = UECFG1X;
			UEIENXTemp  = UEIENX;
		}

		if (!(UECFG1XTemp & (1 << ALLOC)))
 692:	21 ff       	sbrs	r18, 1
 694:	19 c0       	rjmp	.+50     	; 0x6c8 <Endpoint_ConfigureEndpoint_Prv+0x56>
			 *  to and from a host.
			 */
			static inline void Endpoint_DisableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_DisableEndpoint(void)
			{
				UECONX &= ~(1 << EPEN);
 696:	30 91 eb 00 	lds	r19, 0x00EB
 69a:	3e 7f       	andi	r19, 0xFE	; 254
 69c:	30 93 eb 00 	sts	0x00EB, r19
		  continue;

		Endpoint_DisableEndpoint();
		UECFG1X &= ~(1 << ALLOC);
 6a0:	30 91 ed 00 	lds	r19, 0x00ED
 6a4:	3d 7f       	andi	r19, 0xFD	; 253
 6a6:	30 93 ed 00 	sts	0x00ED, r19
			 *  \note Endpoints must first be configured properly via \ref Endpoint_ConfigureEndpoint().
			 */
			static inline void Endpoint_EnableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_EnableEndpoint(void)
			{
				UECONX |= (1 << EPEN);
 6aa:	30 91 eb 00 	lds	r19, 0x00EB
 6ae:	31 60       	ori	r19, 0x01	; 1
 6b0:	30 93 eb 00 	sts	0x00EB, r19

		Endpoint_EnableEndpoint();
		UECFG0X = UECFG0XTemp;
 6b4:	70 93 ec 00 	sts	0x00EC, r23
		UECFG1X = UECFG1XTemp;
 6b8:	20 93 ed 00 	sts	0x00ED, r18
		UEIENX  = UEIENXTemp;
 6bc:	50 93 f0 00 	sts	0x00F0, r21
			 *  \return Boolean \c true if the currently selected endpoint has been configured, \c false otherwise.
			 */
			static inline bool Endpoint_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsConfigured(void)
			{
				return ((UESTA0X & (1 << CFGOK)) ? true : false);
 6c0:	20 91 ee 00 	lds	r18, 0x00EE

		if (!(Endpoint_IsConfigured()))
 6c4:	27 ff       	sbrs	r18, 7
 6c6:	08 c0       	rjmp	.+16     	; 0x6d8 <Endpoint_ConfigureEndpoint_Prv+0x66>
	UECFG0X = UECFG0XData;
	UECFG1X = UECFG1XData;

	return Endpoint_IsConfigured();
#else
	for (uint8_t EPNum = Number; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
 6c8:	9f 5f       	subi	r25, 0xFF	; 255
 6ca:	97 30       	cpi	r25, 0x07	; 7
 6cc:	a0 f2       	brcs	.-88     	; 0x676 <Endpoint_ConfigureEndpoint_Prv+0x4>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 6ce:	8f 70       	andi	r24, 0x0F	; 15
 6d0:	80 93 e9 00 	sts	0x00E9, r24
		if (!(Endpoint_IsConfigured()))
		  return false;
	}

	Endpoint_SelectEndpoint(Number);
	return true;
 6d4:	81 e0       	ldi	r24, 0x01	; 1
 6d6:	08 95       	ret
		UECFG0X = UECFG0XTemp;
		UECFG1X = UECFG1XTemp;
		UEIENX  = UEIENXTemp;

		if (!(Endpoint_IsConfigured()))
		  return false;
 6d8:	80 e0       	ldi	r24, 0x00	; 0
	}

	Endpoint_SelectEndpoint(Number);
	return true;
#endif
}
 6da:	08 95       	ret

000006dc <Endpoint_ClearStatusStage>:
	}
}

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
 6dc:	80 91 60 01 	lds	r24, 0x0160
 6e0:	87 ff       	sbrs	r24, 7
 6e2:	13 c0       	rjmp	.+38     	; 0x70a <Endpoint_ClearStatusStage+0x2e>
 6e4:	04 c0       	rjmp	.+8      	; 0x6ee <Endpoint_ClearStatusStage+0x12>
	{
		while (!(Endpoint_IsOUTReceived()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
 6e6:	80 91 5f 01 	lds	r24, 0x015F
 6ea:	88 23       	and	r24, r24
 6ec:	b9 f0       	breq	.+46     	; 0x71c <Endpoint_ClearStatusStage+0x40>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 6ee:	80 91 e8 00 	lds	r24, 0x00E8

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
	{
		while (!(Endpoint_IsOUTReceived()))
 6f2:	82 ff       	sbrs	r24, 2
 6f4:	f8 cf       	rjmp	.-16     	; 0x6e6 <Endpoint_ClearStatusStage+0xa>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 6f6:	80 91 e8 00 	lds	r24, 0x00E8
 6fa:	8b 77       	andi	r24, 0x7B	; 123
 6fc:	80 93 e8 00 	sts	0x00E8, r24
 700:	08 95       	ret
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
 702:	80 91 5f 01 	lds	r24, 0x015F
 706:	88 23       	and	r24, r24
 708:	49 f0       	breq	.+18     	; 0x71c <Endpoint_ClearStatusStage+0x40>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 70a:	80 91 e8 00 	lds	r24, 0x00E8

		Endpoint_ClearOUT();
	}
	else
	{
		while (!(Endpoint_IsINReady()))
 70e:	80 ff       	sbrs	r24, 0
 710:	f8 cf       	rjmp	.-16     	; 0x702 <Endpoint_ClearStatusStage+0x26>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 712:	80 91 e8 00 	lds	r24, 0x00E8
 716:	8e 77       	andi	r24, 0x7E	; 126
 718:	80 93 e8 00 	sts	0x00E8, r24
 71c:	08 95       	ret

0000071e <Endpoint_WaitUntilReady>:
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
 71e:	80 91 e4 00 	lds	r24, 0x00E4
 722:	90 91 e5 00 	lds	r25, 0x00E5
 726:	45 e6       	ldi	r20, 0x65	; 101
 728:	01 c0       	rjmp	.+2      	; 0x72c <Endpoint_WaitUntilReady+0xe>
 72a:	c9 01       	movw	r24, r18
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
 72c:	20 91 ec 00 	lds	r18, 0x00EC
 730:	20 ff       	sbrs	r18, 0
 732:	23 c0       	rjmp	.+70     	; 0x77a <Endpoint_WaitUntilReady+0x5c>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 734:	20 91 e8 00 	lds	r18, 0x00E8

	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
 738:	20 fd       	sbrc	r18, 0
 73a:	15 c0       	rjmp	.+42     	; 0x766 <Endpoint_WaitUntilReady+0x48>
		{
			if (Endpoint_IsOUTReceived())
			  return ENDPOINT_READYWAIT_NoError;
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;
 73c:	20 91 5f 01 	lds	r18, 0x015F

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
 740:	22 23       	and	r18, r18
 742:	99 f0       	breq	.+38     	; 0x76a <Endpoint_WaitUntilReady+0x4c>
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
 744:	25 30       	cpi	r18, 0x05	; 5
 746:	99 f0       	breq	.+38     	; 0x76e <Endpoint_WaitUntilReady+0x50>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
 748:	20 91 eb 00 	lds	r18, 0x00EB
		  return ENDPOINT_READYWAIT_BusSuspended;
		else if (Endpoint_IsStalled())
 74c:	25 fd       	sbrc	r18, 5
 74e:	11 c0       	rjmp	.+34     	; 0x772 <Endpoint_WaitUntilReady+0x54>
 750:	20 91 e4 00 	lds	r18, 0x00E4
 754:	30 91 e5 00 	lds	r19, 0x00E5
		  return ENDPOINT_READYWAIT_EndpointStalled;

		uint16_t CurrentFrameNumber = USB_Device_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
 758:	28 17       	cp	r18, r24
 75a:	39 07       	cpc	r19, r25
 75c:	39 f3       	breq	.-50     	; 0x72c <Endpoint_WaitUntilReady+0xe>
 75e:	41 50       	subi	r20, 0x01	; 1
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
 760:	21 f7       	brne	.-56     	; 0x72a <Endpoint_WaitUntilReady+0xc>
			  return ENDPOINT_READYWAIT_Timeout;
 762:	84 e0       	ldi	r24, 0x04	; 4
 764:	08 95       	ret
	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
 766:	80 e0       	ldi	r24, 0x00	; 0
 768:	08 95       	ret
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
 76a:	82 e0       	ldi	r24, 0x02	; 2
 76c:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_READYWAIT_BusSuspended;
 76e:	83 e0       	ldi	r24, 0x03	; 3
 770:	08 95       	ret
		else if (Endpoint_IsStalled())
		  return ENDPOINT_READYWAIT_EndpointStalled;
 772:	81 e0       	ldi	r24, 0x01	; 1
 774:	08 95       	ret
			  return ENDPOINT_READYWAIT_NoError;
		}
		else
		{
			if (Endpoint_IsOUTReceived())
			  return ENDPOINT_READYWAIT_NoError;
 776:	80 e0       	ldi	r24, 0x00	; 0

			if (!(TimeoutMSRem--))
			  return ENDPOINT_READYWAIT_Timeout;
		}
	}
}
 778:	08 95       	ret
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 77a:	20 91 e8 00 	lds	r18, 0x00E8
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
		}
		else
		{
			if (Endpoint_IsOUTReceived())
 77e:	22 ff       	sbrs	r18, 2
 780:	dd cf       	rjmp	.-70     	; 0x73c <Endpoint_WaitUntilReady+0x1e>
 782:	f9 cf       	rjmp	.-14     	; 0x776 <Endpoint_WaitUntilReady+0x58>

00000784 <USB_ResetInterface>:

	USB_IsInitialized = false;
}

void USB_ResetInterface(void)
{
 784:	0f 93       	push	r16
 786:	1f 93       	push	r17
 788:	cf 93       	push	r28
 78a:	df 93       	push	r29
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
 78c:	4e d0       	rcall	.+156    	; 0x82a <USB_INT_DisableAllInterrupts>
 78e:	55 d0       	rcall	.+170    	; 0x83a <USB_INT_ClearAllInterrupts>
	USB_INT_ClearAllInterrupts();
 790:	c8 ed       	ldi	r28, 0xD8	; 216
 792:	d0 e0       	ldi	r29, 0x00	; 0
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
 794:	88 81       	ld	r24, Y
 796:	8f 77       	andi	r24, 0x7F	; 127
 798:	88 83       	st	Y, r24
 79a:	88 81       	ld	r24, Y
 79c:	80 68       	ori	r24, 0x80	; 128
				USBCON |=  (1 << USBE);
 79e:	88 83       	st	Y, r24
 7a0:	88 81       	ld	r24, Y
 7a2:	8f 7d       	andi	r24, 0xDF	; 223
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
 7a4:	88 83       	st	Y, r24
 7a6:	e7 ed       	ldi	r30, 0xD7	; 215
 7a8:	f0 e0       	ldi	r31, 0x00	; 0

	if (USB_CurrentMode == USB_MODE_Device)
	{
		#if defined(USB_CAN_BE_DEVICE)
		#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
		UHWCON |=  (1 << UIMOD);
 7aa:	80 81       	ld	r24, Z
 7ac:	80 68       	ori	r24, 0x80	; 128
 7ae:	80 83       	st	Z, r24
 7b0:	19 bc       	out	0x29, r1	; 41
 7b2:	10 92 5f 01 	sts	0x015F, r1
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState                 = DEVICE_STATE_Unattached;
 7b6:	10 92 5b 01 	sts	0x015B, r1
	USB_Device_ConfigurationNumber  = 0;
 7ba:	10 92 5d 01 	sts	0x015D, r1

	#if !defined(NO_DEVICE_REMOTE_WAKEUP)
	USB_Device_RemoteWakeupEnabled  = false;
 7be:	10 92 5c 01 	sts	0x015C, r1
	#endif

	#if !defined(NO_DEVICE_SELF_POWER)
	USB_Device_CurrentlySelfPowered = false;
 7c2:	00 ee       	ldi	r16, 0xE0	; 224
 7c4:	10 e0       	ldi	r17, 0x00	; 0
			}

			static inline void USB_Device_SetFullSpeed(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetFullSpeed(void)
			{
				UDCON &= ~(1 << LSM);
 7c6:	f8 01       	movw	r30, r16
 7c8:	80 81       	ld	r24, Z
 7ca:	8b 7f       	andi	r24, 0xFB	; 251
 7cc:	80 83       	st	Z, r24
 7ce:	88 81       	ld	r24, Y
 7d0:	81 60       	ori	r24, 0x01	; 1
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBCON |= (1 << VBUSTE);
 7d2:	88 83       	st	Y, r24
 7d4:	80 e0       	ldi	r24, 0x00	; 0
 7d6:	60 e0       	ldi	r22, 0x00	; 0
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
 7d8:	42 e0       	ldi	r20, 0x02	; 2
 7da:	4b df       	rcall	.-362    	; 0x672 <Endpoint_ConfigureEndpoint_Prv>
 7dc:	e1 ee       	ldi	r30, 0xE1	; 225
 7de:	f0 e0       	ldi	r31, 0x00	; 0
 7e0:	80 81       	ld	r24, Z
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
 7e2:	8e 7f       	andi	r24, 0xFE	; 254
 7e4:	80 83       	st	Z, r24
 7e6:	e2 ee       	ldi	r30, 0xE2	; 226
 7e8:	f0 e0       	ldi	r31, 0x00	; 0
 7ea:	80 81       	ld	r24, Z
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
 7ec:	81 60       	ori	r24, 0x01	; 1
 7ee:	80 83       	st	Z, r24
 7f0:	80 81       	ld	r24, Z
 7f2:	88 60       	ori	r24, 0x08	; 8
 7f4:	80 83       	st	Z, r24
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
 7f6:	f8 01       	movw	r30, r16
 7f8:	80 81       	ld	r24, Z
 7fa:	8e 7f       	andi	r24, 0xFE	; 254
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
 7fc:	80 83       	st	Z, r24
 7fe:	88 81       	ld	r24, Y
 800:	80 61       	ori	r24, 0x10	; 16
 802:	88 83       	st	Y, r24

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON |=  (1 << OTGPADE);
 804:	df 91       	pop	r29
 806:	cf 91       	pop	r28
 808:	1f 91       	pop	r17
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
 80a:	0f 91       	pop	r16
 80c:	08 95       	ret

0000080e <USB_Init>:
 80e:	e8 ed       	ldi	r30, 0xD8	; 216
 810:	f0 e0       	ldi	r31, 0x00	; 0
 812:	80 81       	ld	r24, Z
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON &= ~(1 << OTGPADE);
 814:	8f 7e       	andi	r24, 0xEF	; 239
 816:	80 83       	st	Z, r24

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON |=  (1 << UVREGE);
 818:	e7 ed       	ldi	r30, 0xD7	; 215
 81a:	f0 e0       	ldi	r31, 0x00	; 0
 81c:	80 81       	ld	r24, Z
 81e:	81 60       	ori	r24, 0x01	; 1
 820:	80 83       	st	Z, r24
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
 822:	81 e0       	ldi	r24, 0x01	; 1
 824:	80 93 5e 01 	sts	0x015E, r24

	USB_ResetInterface();
 828:	ad cf       	rjmp	.-166    	; 0x784 <USB_ResetInterface>

0000082a <USB_INT_DisableAllInterrupts>:
#include "../USBInterrupt.h"

void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
 82a:	e8 ed       	ldi	r30, 0xD8	; 216
 82c:	f0 e0       	ldi	r31, 0x00	; 0
 82e:	80 81       	ld	r24, Z
 830:	8c 7f       	andi	r24, 0xFC	; 252
 832:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
 834:	10 92 e2 00 	sts	0x00E2, r1
	#endif
}
 838:	08 95       	ret

0000083a <USB_INT_ClearAllInterrupts>:

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
 83a:	10 92 da 00 	sts	0x00DA, r1
	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
 83e:	10 92 e1 00 	sts	0x00E1, r1
	#endif
}
 842:	08 95       	ret

00000844 <__vector_10>:

ISR(USB_GEN_vect, ISR_BLOCK)
{
 844:	1f 92       	push	r1
 846:	0f 92       	push	r0
 848:	0f b6       	in	r0, 0x3f	; 63
 84a:	0f 92       	push	r0
 84c:	0b b6       	in	r0, 0x3b	; 59
 84e:	0f 92       	push	r0
 850:	11 24       	eor	r1, r1
 852:	2f 93       	push	r18
 854:	3f 93       	push	r19
 856:	4f 93       	push	r20
 858:	5f 93       	push	r21
 85a:	6f 93       	push	r22
 85c:	7f 93       	push	r23
 85e:	8f 93       	push	r24
 860:	9f 93       	push	r25
 862:	af 93       	push	r26
 864:	bf 93       	push	r27
 866:	ef 93       	push	r30
 868:	ff 93       	push	r31
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
					case USB_INT_SOFI:
						return (UDINT  & (1 << SOFI));
 86a:	80 91 e1 00 	lds	r24, 0x00E1
	#if defined(USB_CAN_BE_DEVICE)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
 86e:	82 ff       	sbrs	r24, 2
 870:	0a c0       	rjmp	.+20     	; 0x886 <__vector_10+0x42>
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
					case USB_INT_SOFI:
						return (UDIEN  & (1 << SOFE));
 872:	80 91 e2 00 	lds	r24, 0x00E2
 876:	82 ff       	sbrs	r24, 2
 878:	06 c0       	rjmp	.+12     	; 0x886 <__vector_10+0x42>
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
						break;
					case USB_INT_SOFI:
						UDINT  &= ~(1 << SOFI);
 87a:	80 91 e1 00 	lds	r24, 0x00E1
 87e:	8b 7f       	andi	r24, 0xFB	; 251
 880:	80 93 e1 00 	sts	0x00E1, r24
	{
		USB_INT_Clear(USB_INT_SOFI);

		EVENT_USB_Device_StartOfFrame();
 884:	0d d2       	rcall	.+1050   	; 0xca0 <USB_Event_Stub>
 886:	80 91 da 00 	lds	r24, 0x00DA
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBINT & (1 << VBUSTI));
 88a:	80 ff       	sbrs	r24, 0
	}
	#endif

	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	if (USB_INT_HasOccurred(USB_INT_VBUSTI) && USB_INT_IsEnabled(USB_INT_VBUSTI))
 88c:	1d c0       	rjmp	.+58     	; 0x8c8 <__vector_10+0x84>
 88e:	80 91 d8 00 	lds	r24, 0x00D8
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBCON & (1 << VBUSTE));
 892:	80 ff       	sbrs	r24, 0
 894:	19 c0       	rjmp	.+50     	; 0x8c8 <__vector_10+0x84>
 896:	80 91 da 00 	lds	r24, 0x00DA
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBINT &= ~(1 << VBUSTI);
 89a:	8e 7f       	andi	r24, 0xFE	; 254
 89c:	80 93 da 00 	sts	0x00DA, r24
 8a0:	80 91 d9 00 	lds	r24, 0x00D9
				 *  \return Boolean \c true if the VBUS line is currently detecting power from a host, \c false otherwise.
				 */
				static inline bool USB_VBUS_GetStatus(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
				static inline bool USB_VBUS_GetStatus(void)
				{
					return ((USBSTA & (1 << VBUS)) ? true : false);
 8a4:	80 ff       	sbrs	r24, 0
	{
		USB_INT_Clear(USB_INT_VBUSTI);

		if (USB_VBUS_GetStatus())
 8a6:	0c c0       	rjmp	.+24     	; 0x8c0 <__vector_10+0x7c>
 8a8:	8c e0       	ldi	r24, 0x0C	; 12

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
 8aa:	89 bd       	out	0x29, r24	; 41
 8ac:	8e e0       	ldi	r24, 0x0E	; 14
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
 8ae:	89 bd       	out	0x29, r24	; 41
 8b0:	09 b4       	in	r0, 0x29	; 41
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			{
				USB_PLL_On();
				while (!(USB_PLL_IsReady()));
 8b2:	00 fe       	sbrs	r0, 0
 8b4:	fd cf       	rjmp	.-6      	; 0x8b0 <__vector_10+0x6c>
 8b6:	81 e0       	ldi	r24, 0x01	; 1
			}

			USB_DeviceState = DEVICE_STATE_Powered;
 8b8:	80 93 5f 01 	sts	0x015F, r24
 8bc:	7e dc       	rcall	.-1796   	; 0x1ba <EVENT_USB_Device_Connect>
			EVENT_USB_Device_Connect();
 8be:	04 c0       	rjmp	.+8      	; 0x8c8 <__vector_10+0x84>
 8c0:	19 bc       	out	0x29, r1	; 41
 8c2:	10 92 5f 01 	sts	0x015F, r1
		else
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			  USB_PLL_Off();

			USB_DeviceState = DEVICE_STATE_Unattached;
 8c6:	7b dc       	rcall	.-1802   	; 0x1be <EVENT_USB_Device_Disconnect>
 8c8:	80 91 e1 00 	lds	r24, 0x00E1
			EVENT_USB_Device_Disconnect();
 8cc:	80 ff       	sbrs	r24, 0
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
 8ce:	18 c0       	rjmp	.+48     	; 0x900 <__vector_10+0xbc>
 8d0:	80 91 e2 00 	lds	r24, 0x00E2
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
 8d4:	80 ff       	sbrs	r24, 0
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
 8d6:	14 c0       	rjmp	.+40     	; 0x900 <__vector_10+0xbc>
 8d8:	80 91 e2 00 	lds	r24, 0x00E2
 8dc:	8e 7f       	andi	r24, 0xFE	; 254
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
 8de:	80 93 e2 00 	sts	0x00E2, r24
 8e2:	80 91 e2 00 	lds	r24, 0x00E2
 8e6:	80 61       	ori	r24, 0x10	; 16
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
 8e8:	80 93 e2 00 	sts	0x00E2, r24
 8ec:	80 91 d8 00 	lds	r24, 0x00D8
 8f0:	80 62       	ori	r24, 0x20	; 32
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON |=  (1 << FRZCLK);
 8f2:	80 93 d8 00 	sts	0x00D8, r24
 8f6:	19 bc       	out	0x29, r1	; 41
 8f8:	85 e0       	ldi	r24, 0x05	; 5
 8fa:	80 93 5f 01 	sts	0x015F, r24

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
		EVENT_USB_Device_Disconnect();
		#else
		USB_DeviceState = DEVICE_STATE_Suspended;
 8fe:	d0 d1       	rcall	.+928    	; 0xca0 <USB_Event_Stub>
 900:	80 91 e1 00 	lds	r24, 0x00E1
		EVENT_USB_Device_Suspend();
 904:	84 ff       	sbrs	r24, 4
 906:	2d c0       	rjmp	.+90     	; 0x962 <__vector_10+0x11e>
					case USB_INT_IDTI:
						return (USBINT & (1 << IDTI));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
 908:	80 91 e2 00 	lds	r24, 0x00E2
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
 90c:	84 ff       	sbrs	r24, 4
 90e:	29 c0       	rjmp	.+82     	; 0x962 <__vector_10+0x11e>
					case USB_INT_IDTI:
						return (USBCON & (1 << IDTE));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
 910:	8c e0       	ldi	r24, 0x0C	; 12
 912:	89 bd       	out	0x29, r24	; 41
 914:	8e e0       	ldi	r24, 0x0E	; 14
 916:	89 bd       	out	0x29, r24	; 41

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
 918:	09 b4       	in	r0, 0x29	; 41
 91a:	00 fe       	sbrs	r0, 0
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
 91c:	fd cf       	rjmp	.-6      	; 0x918 <__vector_10+0xd4>
 91e:	80 91 d8 00 	lds	r24, 0x00D8
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
 922:	8f 7d       	andi	r24, 0xDF	; 223
 924:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
 928:	80 91 e1 00 	lds	r24, 0x00E1
 92c:	8f 7e       	andi	r24, 0xEF	; 239
 92e:	80 93 e1 00 	sts	0x00E1, r24
						USBINT &= ~(1 << IDTI);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
 932:	80 91 e2 00 	lds	r24, 0x00E2
 936:	8f 7e       	andi	r24, 0xEF	; 239
 938:	80 93 e2 00 	sts	0x00E2, r24
						USBCON &= ~(1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
 93c:	80 91 e2 00 	lds	r24, 0x00E2
 940:	81 60       	ori	r24, 0x01	; 1
 942:	80 93 e2 00 	sts	0x00E2, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
 946:	80 91 5b 01 	lds	r24, 0x015B
 94a:	88 23       	and	r24, r24
 94c:	21 f4       	brne	.+8      	; 0x956 <__vector_10+0x112>
		USB_INT_Clear(USB_INT_WAKEUPI);

		USB_INT_Disable(USB_INT_WAKEUPI);
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_Device_ConfigurationNumber)
 94e:	80 91 e3 00 	lds	r24, 0x00E3
 952:	87 ff       	sbrs	r24, 7
 954:	02 c0       	rjmp	.+4      	; 0x95a <__vector_10+0x116>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
 956:	84 e0       	ldi	r24, 0x04	; 4
 958:	01 c0       	rjmp	.+2      	; 0x95c <__vector_10+0x118>
		  USB_DeviceState = DEVICE_STATE_Configured;
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
 95a:	81 e0       	ldi	r24, 0x01	; 1
 95c:	80 93 5f 01 	sts	0x015F, r24
 960:	9f d1       	rcall	.+830    	; 0xca0 <USB_Event_Stub>
 962:	80 91 e1 00 	lds	r24, 0x00E1
 966:	83 ff       	sbrs	r24, 3

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
		#else
		EVENT_USB_Device_WakeUp();
 968:	22 c0       	rjmp	.+68     	; 0x9ae <__vector_10+0x16a>
 96a:	80 91 e2 00 	lds	r24, 0x00E2
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
 96e:	83 ff       	sbrs	r24, 3
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
 970:	1e c0       	rjmp	.+60     	; 0x9ae <__vector_10+0x16a>
 972:	80 91 e1 00 	lds	r24, 0x00E1
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
 976:	87 7f       	andi	r24, 0xF7	; 247
 978:	80 93 e1 00 	sts	0x00E1, r24
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
 97c:	82 e0       	ldi	r24, 0x02	; 2
 97e:	80 93 5f 01 	sts	0x015F, r24
 982:	10 92 5b 01 	sts	0x015B, r1
	{
		USB_INT_Clear(USB_INT_EORSTI);

		USB_DeviceState                = DEVICE_STATE_Default;
 986:	80 91 e1 00 	lds	r24, 0x00E1
 98a:	8e 7f       	andi	r24, 0xFE	; 254
		USB_Device_ConfigurationNumber = 0;
 98c:	80 93 e1 00 	sts	0x00E1, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
 990:	80 91 e2 00 	lds	r24, 0x00E2
 994:	8e 7f       	andi	r24, 0xFE	; 254
 996:	80 93 e2 00 	sts	0x00E2, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
 99a:	80 91 e2 00 	lds	r24, 0x00E2
 99e:	80 61       	ori	r24, 0x10	; 16
 9a0:	80 93 e2 00 	sts	0x00E2, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
 9a4:	80 e0       	ldi	r24, 0x00	; 0
 9a6:	60 e0       	ldi	r22, 0x00	; 0
 9a8:	42 e0       	ldi	r20, 0x02	; 2
 9aa:	63 de       	rcall	.-826    	; 0x672 <Endpoint_ConfigureEndpoint_Prv>
 9ac:	79 d1       	rcall	.+754    	; 0xca0 <USB_Event_Stub>
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
 9ae:	ff 91       	pop	r31
 9b0:	ef 91       	pop	r30
 9b2:	bf 91       	pop	r27
 9b4:	af 91       	pop	r26
 9b6:	9f 91       	pop	r25

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
 9b8:	8f 91       	pop	r24
 9ba:	7f 91       	pop	r23
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
 9bc:	6f 91       	pop	r22
 9be:	5f 91       	pop	r21
 9c0:	4f 91       	pop	r20
 9c2:	3f 91       	pop	r19
 9c4:	2f 91       	pop	r18
 9c6:	0f 90       	pop	r0
 9c8:	0b be       	out	0x3b, r0	; 59
 9ca:	0f 90       	pop	r0
 9cc:	0f be       	out	0x3f, r0	; 63
 9ce:	0f 90       	pop	r0
 9d0:	1f 90       	pop	r1
 9d2:	18 95       	reti

000009d4 <USB_Device_ProcessControlRequest>:
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_Device_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
 9d4:	1f 93       	push	r17
 9d6:	cf 93       	push	r28
 9d8:	df 93       	push	r29
 9da:	cd b7       	in	r28, 0x3d	; 61
 9dc:	de b7       	in	r29, 0x3e	; 62
 9de:	ac 97       	sbiw	r28, 0x2c	; 44
 9e0:	0f b6       	in	r0, 0x3f	; 63
 9e2:	f8 94       	cli
 9e4:	de bf       	out	0x3e, r29	; 62
 9e6:	0f be       	out	0x3f, r0	; 63
 9e8:	cd bf       	out	0x3d, r28	; 61
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
 9ea:	80 e0       	ldi	r24, 0x00	; 0
	USB_ControlRequest.bRequest      = Endpoint_Read_8();
	USB_ControlRequest.wValue        = Endpoint_Read_16_LE();
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;
 9ec:	e0 e6       	ldi	r30, 0x60	; 96
 9ee:	f1 e0       	ldi	r31, 0x01	; 1
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
 9f0:	90 91 f1 00 	lds	r25, 0x00F1

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_8();
 9f4:	91 93       	st	Z+, r25
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
 9f6:	8f 5f       	subi	r24, 0xFF	; 255
 9f8:	88 30       	cpi	r24, 0x08	; 8
 9fa:	d1 f7       	brne	.-12     	; 0x9f0 <USB_Device_ProcessControlRequest+0x1c>
	  *(RequestHeader++) = Endpoint_Read_8();
	#endif

	EVENT_USB_Device_ControlRequest();
 9fc:	0d dc       	rcall	.-2022   	; 0x218 <EVENT_USB_Device_ControlRequest>
 9fe:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 a02:	83 ff       	sbrs	r24, 3

	if (Endpoint_IsSETUPReceived())
 a04:	35 c1       	rjmp	.+618    	; 0xc70 <USB_Device_ProcessControlRequest+0x29c>
 a06:	80 91 60 01 	lds	r24, 0x0160
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
 a0a:	20 91 61 01 	lds	r18, 0x0161

		switch (USB_ControlRequest.bRequest)
 a0e:	25 30       	cpi	r18, 0x05	; 5
 a10:	09 f4       	brne	.+2      	; 0xa14 <USB_Device_ProcessControlRequest+0x40>
 a12:	84 c0       	rjmp	.+264    	; 0xb1c <USB_Device_ProcessControlRequest+0x148>
 a14:	26 30       	cpi	r18, 0x06	; 6
 a16:	40 f4       	brcc	.+16     	; 0xa28 <USB_Device_ProcessControlRequest+0x54>
 a18:	21 30       	cpi	r18, 0x01	; 1
 a1a:	a1 f1       	breq	.+104    	; 0xa84 <USB_Device_ProcessControlRequest+0xb0>
 a1c:	21 30       	cpi	r18, 0x01	; 1
 a1e:	70 f0       	brcs	.+28     	; 0xa3c <USB_Device_ProcessControlRequest+0x68>
 a20:	23 30       	cpi	r18, 0x03	; 3
 a22:	09 f0       	breq	.+2      	; 0xa26 <USB_Device_ProcessControlRequest+0x52>
 a24:	25 c1       	rjmp	.+586    	; 0xc70 <USB_Device_ProcessControlRequest+0x29c>
 a26:	2e c0       	rjmp	.+92     	; 0xa84 <USB_Device_ProcessControlRequest+0xb0>
 a28:	28 30       	cpi	r18, 0x08	; 8
 a2a:	09 f4       	brne	.+2      	; 0xa2e <USB_Device_ProcessControlRequest+0x5a>
 a2c:	f3 c0       	rjmp	.+486    	; 0xc14 <USB_Device_ProcessControlRequest+0x240>
 a2e:	29 30       	cpi	r18, 0x09	; 9
 a30:	09 f4       	brne	.+2      	; 0xa34 <USB_Device_ProcessControlRequest+0x60>
 a32:	02 c1       	rjmp	.+516    	; 0xc38 <USB_Device_ProcessControlRequest+0x264>
 a34:	26 30       	cpi	r18, 0x06	; 6
 a36:	09 f0       	breq	.+2      	; 0xa3a <USB_Device_ProcessControlRequest+0x66>
 a38:	1b c1       	rjmp	.+566    	; 0xc70 <USB_Device_ProcessControlRequest+0x29c>
 a3a:	93 c0       	rjmp	.+294    	; 0xb62 <USB_Device_ProcessControlRequest+0x18e>
 a3c:	80 38       	cpi	r24, 0x80	; 128
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
 a3e:	21 f0       	breq	.+8      	; 0xa48 <USB_Device_ProcessControlRequest+0x74>
 a40:	82 38       	cpi	r24, 0x82	; 130
 a42:	09 f0       	breq	.+2      	; 0xa46 <USB_Device_ProcessControlRequest+0x72>
 a44:	15 c1       	rjmp	.+554    	; 0xc70 <USB_Device_ProcessControlRequest+0x29c>
 a46:	08 c0       	rjmp	.+16     	; 0xa58 <USB_Device_ProcessControlRequest+0x84>
 a48:	80 91 5c 01 	lds	r24, 0x015C
	Endpoint_ClearOUT();
}

static void USB_Device_GetStatus(void)
{
	uint8_t CurrentStatus = 0;
 a4c:	90 91 5d 01 	lds	r25, 0x015D
			if (USB_Device_CurrentlySelfPowered)
			  CurrentStatus |= FEATURE_SELFPOWERED_ENABLED;
			#endif

			#if !defined(NO_DEVICE_REMOTE_WAKEUP)
			if (USB_Device_RemoteWakeupEnabled)
 a50:	99 23       	and	r25, r25
 a52:	71 f0       	breq	.+28     	; 0xa70 <USB_Device_ProcessControlRequest+0x9c>
 a54:	82 60       	ori	r24, 0x02	; 2
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
 a56:	0c c0       	rjmp	.+24     	; 0xa70 <USB_Device_ProcessControlRequest+0x9c>
 a58:	80 91 64 01 	lds	r24, 0x0164
			#endif
			break;
		case (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_ENDPOINT):
			#if !defined(CONTROL_ONLY_DEVICE)
			Endpoint_SelectEndpoint((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
 a5c:	8f 70       	andi	r24, 0x0F	; 15
 a5e:	80 93 e9 00 	sts	0x00E9, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 a62:	90 91 eb 00 	lds	r25, 0x00EB
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
 a66:	81 e0       	ldi	r24, 0x01	; 1

			CurrentStatus = Endpoint_IsStalled();
 a68:	95 ff       	sbrs	r25, 5
 a6a:	80 e0       	ldi	r24, 0x00	; 0
 a6c:	10 92 e9 00 	sts	0x00E9, r1
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 a70:	90 91 e8 00 	lds	r25, 0x00E8
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 a74:	97 7f       	andi	r25, 0xF7	; 247
 a76:	90 93 e8 00 	sts	0x00E8, r25
 a7a:	80 93 f1 00 	sts	0x00F1, r24
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
 a7e:	10 92 f1 00 	sts	0x00F1, r1
				UEDATX = (Data >> 8);
 a82:	d3 c0       	rjmp	.+422    	; 0xc2a <USB_Device_ProcessControlRequest+0x256>
 a84:	88 23       	and	r24, r24
				}

				break;
			case REQ_ClearFeature:
			case REQ_SetFeature:
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
 a86:	19 f0       	breq	.+6      	; 0xa8e <USB_Device_ProcessControlRequest+0xba>
 a88:	82 30       	cpi	r24, 0x02	; 2
 a8a:	09 f0       	breq	.+2      	; 0xa8e <USB_Device_ProcessControlRequest+0xba>
 a8c:	f1 c0       	rjmp	.+482    	; 0xc70 <USB_Device_ProcessControlRequest+0x29c>
 a8e:	90 e0       	ldi	r25, 0x00	; 0
	Endpoint_ClearStatusStage();
}

static void USB_Device_ClearSetFeature(void)
{
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
 a90:	8f 71       	andi	r24, 0x1F	; 31
 a92:	90 70       	andi	r25, 0x00	; 0
 a94:	00 97       	sbiw	r24, 0x00	; 0
 a96:	29 f0       	breq	.+10     	; 0xaa2 <USB_Device_ProcessControlRequest+0xce>
 a98:	82 30       	cpi	r24, 0x02	; 2
 a9a:	91 05       	cpc	r25, r1
 a9c:	09 f0       	breq	.+2      	; 0xaa0 <USB_Device_ProcessControlRequest+0xcc>
 a9e:	e8 c0       	rjmp	.+464    	; 0xc70 <USB_Device_ProcessControlRequest+0x29c>
 aa0:	0b c0       	rjmp	.+22     	; 0xab8 <USB_Device_ProcessControlRequest+0xe4>
 aa2:	80 91 62 01 	lds	r24, 0x0162
	{
		#if !defined(NO_DEVICE_REMOTE_WAKEUP)
		case REQREC_DEVICE:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
 aa6:	81 30       	cpi	r24, 0x01	; 1
 aa8:	09 f0       	breq	.+2      	; 0xaac <USB_Device_ProcessControlRequest+0xd8>
 aaa:	e2 c0       	rjmp	.+452    	; 0xc70 <USB_Device_ProcessControlRequest+0x29c>
 aac:	23 30       	cpi	r18, 0x03	; 3
			  USB_Device_RemoteWakeupEnabled = (USB_ControlRequest.bRequest == REQ_SetFeature);
 aae:	09 f0       	breq	.+2      	; 0xab2 <USB_Device_ProcessControlRequest+0xde>
 ab0:	80 e0       	ldi	r24, 0x00	; 0
 ab2:	80 93 5d 01 	sts	0x015D, r24
 ab6:	2c c0       	rjmp	.+88     	; 0xb10 <USB_Device_ProcessControlRequest+0x13c>
 ab8:	80 91 62 01 	lds	r24, 0x0162

			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
 abc:	88 23       	and	r24, r24
 abe:	41 f5       	brne	.+80     	; 0xb10 <USB_Device_ProcessControlRequest+0x13c>
 ac0:	20 91 64 01 	lds	r18, 0x0164
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
 ac4:	2f 70       	andi	r18, 0x0F	; 15
 ac6:	09 f4       	brne	.+2      	; 0xaca <USB_Device_ProcessControlRequest+0xf6>

				if (EndpointIndex == ENDPOINT_CONTROLEP)
 ac8:	d3 c0       	rjmp	.+422    	; 0xc70 <USB_Device_ProcessControlRequest+0x29c>
 aca:	20 93 e9 00 	sts	0x00E9, r18
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 ace:	80 91 eb 00 	lds	r24, 0x00EB
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
 ad2:	80 ff       	sbrs	r24, 0
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
 ad4:	1d c0       	rjmp	.+58     	; 0xb10 <USB_Device_ProcessControlRequest+0x13c>
 ad6:	80 91 61 01 	lds	r24, 0x0161
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
 ada:	83 30       	cpi	r24, 0x03	; 3
 adc:	21 f4       	brne	.+8      	; 0xae6 <USB_Device_ProcessControlRequest+0x112>
 ade:	80 91 eb 00 	lds	r24, 0x00EB
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
 ae2:	80 62       	ori	r24, 0x20	; 32
 ae4:	13 c0       	rjmp	.+38     	; 0xb0c <USB_Device_ProcessControlRequest+0x138>
 ae6:	80 91 eb 00 	lds	r24, 0x00EB
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
 aea:	80 61       	ori	r24, 0x10	; 16
 aec:	80 93 eb 00 	sts	0x00EB, r24
 af0:	81 e0       	ldi	r24, 0x01	; 1
			 *  \param[in] Address  Endpoint address whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t Address)
			{
				UERST = (1 << (Address & ENDPOINT_EPNUM_MASK));
 af2:	90 e0       	ldi	r25, 0x00	; 0
 af4:	02 c0       	rjmp	.+4      	; 0xafa <USB_Device_ProcessControlRequest+0x126>
 af6:	88 0f       	add	r24, r24
 af8:	99 1f       	adc	r25, r25
 afa:	2a 95       	dec	r18
 afc:	e2 f7       	brpl	.-8      	; 0xaf6 <USB_Device_ProcessControlRequest+0x122>
 afe:	80 93 ea 00 	sts	0x00EA, r24
 b02:	10 92 ea 00 	sts	0x00EA, r1
				UERST = 0;
 b06:	80 91 eb 00 	lds	r24, 0x00EB

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
 b0a:	88 60       	ori	r24, 0x08	; 8
 b0c:	80 93 eb 00 	sts	0x00EB, r24
 b10:	10 92 e9 00 	sts	0x00E9, r1
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 b14:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 b18:	87 7f       	andi	r24, 0xF7	; 247
 b1a:	8a c0       	rjmp	.+276    	; 0xc30 <USB_Device_ProcessControlRequest+0x25c>
 b1c:	88 23       	and	r24, r24
					USB_Device_ClearSetFeature();
				}

				break;
			case REQ_SetAddress:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
 b1e:	09 f0       	breq	.+2      	; 0xb22 <USB_Device_ProcessControlRequest+0x14e>
 b20:	a7 c0       	rjmp	.+334    	; 0xc70 <USB_Device_ProcessControlRequest+0x29c>
 b22:	10 91 62 01 	lds	r17, 0x0162
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t DeviceAddress = (USB_ControlRequest.wValue & 0x7F);
 b26:	1f 77       	andi	r17, 0x7F	; 127
 b28:	80 91 e3 00 	lds	r24, 0x00E3
			#endif

			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				UDADDR = (UDADDR & (1 << ADDEN)) | (Address & 0x7F);
 b2c:	80 78       	andi	r24, 0x80	; 128
 b2e:	81 2b       	or	r24, r17
 b30:	80 93 e3 00 	sts	0x00E3, r24
 b34:	80 91 e8 00 	lds	r24, 0x00E8
 b38:	87 7f       	andi	r24, 0xF7	; 247
 b3a:	80 93 e8 00 	sts	0x00E8, r24
 b3e:	ce dd       	rcall	.-1124   	; 0x6dc <Endpoint_ClearStatusStage>

	USB_Device_SetDeviceAddress(DeviceAddress);

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
 b40:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 b44:	80 ff       	sbrs	r24, 0
 b46:	fc cf       	rjmp	.-8      	; 0xb40 <USB_Device_ProcessControlRequest+0x16c>

	while (!(Endpoint_IsINReady()));
 b48:	80 91 e3 00 	lds	r24, 0x00E3
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address)
			{
				(void)Address;
				
				UDADDR |= (1 << ADDEN);
 b4c:	80 68       	ori	r24, 0x80	; 128
 b4e:	80 93 e3 00 	sts	0x00E3, r24
 b52:	11 23       	and	r17, r17
 b54:	11 f0       	breq	.+4      	; 0xb5a <USB_Device_ProcessControlRequest+0x186>

	USB_Device_EnableDeviceAddress(DeviceAddress);

	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
 b56:	83 e0       	ldi	r24, 0x03	; 3
 b58:	01 c0       	rjmp	.+2      	; 0xb5c <USB_Device_ProcessControlRequest+0x188>
 b5a:	82 e0       	ldi	r24, 0x02	; 2
 b5c:	80 93 5f 01 	sts	0x015F, r24
 b60:	87 c0       	rjmp	.+270    	; 0xc70 <USB_Device_ProcessControlRequest+0x29c>
 b62:	80 58       	subi	r24, 0x80	; 128
 b64:	82 30       	cpi	r24, 0x02	; 2
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_SetAddress();

				break;
			case REQ_GetDescriptor:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
 b66:	08 f0       	brcs	.+2      	; 0xb6a <USB_Device_ProcessControlRequest+0x196>
 b68:	83 c0       	rjmp	.+262    	; 0xc70 <USB_Device_ProcessControlRequest+0x29c>
 b6a:	80 91 62 01 	lds	r24, 0x0162
	    !(defined(USE_FLASH_DESCRIPTORS) || defined(USE_EEPROM_DESCRIPTORS) || defined(USE_RAM_DESCRIPTORS))
	uint8_t DescriptorAddressSpace;
	#endif

	#if !defined(NO_INTERNAL_SERIAL) && (USE_INTERNAL_SERIAL != NO_DESCRIPTOR)
	if (USB_ControlRequest.wValue == ((DTYPE_String << 8) | USE_INTERNAL_SERIAL))
 b6e:	90 91 63 01 	lds	r25, 0x0163
 b72:	23 e0       	ldi	r18, 0x03	; 3
 b74:	8c 3d       	cpi	r24, 0xDC	; 220
 b76:	92 07       	cpc	r25, r18
 b78:	a9 f5       	brne	.+106    	; 0xbe4 <USB_Device_ProcessControlRequest+0x210>
 b7a:	83 e0       	ldi	r24, 0x03	; 3
 b7c:	8c 83       	std	Y+4, r24	; 0x04
	{
		USB_Descriptor_Header_t Header;
		uint16_t                UnicodeString[INTERNAL_SERIAL_LENGTH_BITS / 4];
	} SignatureDescriptor;

	SignatureDescriptor.Header.Type = DTYPE_String;
 b7e:	8a e2       	ldi	r24, 0x2A	; 42
 b80:	8b 83       	std	Y+3, r24	; 0x03
	SignatureDescriptor.Header.Size = USB_STRING_LEN(INTERNAL_SERIAL_LENGTH_BITS / 4);
 b82:	5f b7       	in	r21, 0x3f	; 63
 b84:	f8 94       	cli
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
 b86:	de 01       	movw	r26, r28
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
 b88:	13 96       	adiw	r26, 0x03	; 3
				__builtin_ssrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				cli();
				#endif

				GCC_MEMORY_BARRIER();
 b8a:	80 e0       	ldi	r24, 0x00	; 0
 b8c:	90 e0       	ldi	r25, 0x00	; 0
 b8e:	4e e0       	ldi	r20, 0x0E	; 14
 b90:	61 e2       	ldi	r22, 0x21	; 33
			static inline void USB_Device_GetSerialString(uint16_t* const UnicodeString)
			{
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;
 b92:	e4 2f       	mov	r30, r20

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
				{
					uint8_t SerialByte = boot_signature_byte_get(SigReadAddress);
 b94:	f0 e0       	ldi	r31, 0x00	; 0
 b96:	60 93 57 00 	sts	0x0057, r22
 b9a:	e4 91       	lpm	r30, Z
 b9c:	80 ff       	sbrs	r24, 0
 b9e:	03 c0       	rjmp	.+6      	; 0xba6 <USB_Device_ProcessControlRequest+0x1d2>

					if (SerialCharNum & 0x01)
 ba0:	e2 95       	swap	r30
 ba2:	ef 70       	andi	r30, 0x0F	; 15
					{
						SerialByte >>= 4;
 ba4:	4f 5f       	subi	r20, 0xFF	; 255
 ba6:	ef 70       	andi	r30, 0x0F	; 15
						SigReadAddress++;
 ba8:	2e 2f       	mov	r18, r30
					}

					SerialByte &= 0x0F;
 baa:	30 e0       	ldi	r19, 0x00	; 0
 bac:	ea 30       	cpi	r30, 0x0A	; 10
 bae:	18 f0       	brcs	.+6      	; 0xbb6 <USB_Device_ProcessControlRequest+0x1e2>

					UnicodeString[SerialCharNum] = cpu_to_le16((SerialByte >= 10) ?
 bb0:	29 5c       	subi	r18, 0xC9	; 201
 bb2:	3f 4f       	sbci	r19, 0xFF	; 255
 bb4:	02 c0       	rjmp	.+4      	; 0xbba <USB_Device_ProcessControlRequest+0x1e6>
 bb6:	20 5d       	subi	r18, 0xD0	; 208
 bb8:	3f 4f       	sbci	r19, 0xFF	; 255
 bba:	13 96       	adiw	r26, 0x03	; 3
 bbc:	3c 93       	st	X, r19
 bbe:	2e 93       	st	-X, r18
 bc0:	12 97       	sbiw	r26, 0x02	; 2
 bc2:	01 96       	adiw	r24, 0x01	; 1
 bc4:	12 96       	adiw	r26, 0x02	; 2
 bc6:	84 31       	cpi	r24, 0x14	; 20
 bc8:	91 05       	cpc	r25, r1
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
 bca:	19 f7       	brne	.-58     	; 0xb92 <USB_Device_ProcessControlRequest+0x1be>
 bcc:	5f bf       	out	0x3f, r21	; 63
 bce:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 bd2:	87 7f       	andi	r24, 0xF7	; 247
 bd4:	80 93 e8 00 	sts	0x00E8, r24
 bd8:	ce 01       	movw	r24, r28
 bda:	03 96       	adiw	r24, 0x03	; 3

	USB_Device_GetSerialString(SignatureDescriptor.UnicodeString);

	Endpoint_ClearSETUP();

	Endpoint_Write_Control_Stream_LE(&SignatureDescriptor, sizeof(SignatureDescriptor));
 bdc:	6a e2       	ldi	r22, 0x2A	; 42
 bde:	70 e0       	ldi	r23, 0x00	; 0
 be0:	46 dc       	rcall	.-1908   	; 0x46e <Endpoint_Write_Control_Stream_LE>
 be2:	12 c0       	rjmp	.+36     	; 0xc08 <USB_Device_ProcessControlRequest+0x234>
 be4:	60 91 64 01 	lds	r22, 0x0164
 be8:	ae 01       	movw	r20, r28
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif

	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
 bea:	4f 5f       	subi	r20, 0xFF	; 255
 bec:	5f 4f       	sbci	r21, 0xFF	; 255
 bee:	c3 db       	rcall	.-2170   	; 0x376 <CALLBACK_USB_GetDescriptor>
 bf0:	bc 01       	movw	r22, r24
 bf2:	00 97       	sbiw	r24, 0x00	; 0
 bf4:	09 f4       	brne	.+2      	; 0xbf8 <USB_Device_ProcessControlRequest+0x224>
 bf6:	3c c0       	rjmp	.+120    	; 0xc70 <USB_Device_ProcessControlRequest+0x29c>
 bf8:	80 91 e8 00 	lds	r24, 0x00E8
 bfc:	87 7f       	andi	r24, 0xF7	; 247
 bfe:	80 93 e8 00 	sts	0x00E8, r24
 c02:	89 81       	ldd	r24, Y+1	; 0x01
 c04:	9a 81       	ldd	r25, Y+2	; 0x02
 c06:	d8 dc       	rcall	.-1616   	; 0x5b8 <Endpoint_Write_Control_PStream_LE>
 c08:	80 91 e8 00 	lds	r24, 0x00E8
	#if defined(USE_RAM_DESCRIPTORS) || !defined(ARCH_HAS_MULTI_ADDRESS_SPACE)
	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_EEPROM_DESCRIPTORS)
	Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_FLASH_DESCRIPTORS)
	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
 c0c:	8b 77       	andi	r24, 0x7B	; 123
 c0e:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 c12:	2e c0       	rjmp	.+92     	; 0xc70 <USB_Device_ProcessControlRequest+0x29c>
 c14:	80 38       	cpi	r24, 0x80	; 128
 c16:	61 f5       	brne	.+88     	; 0xc70 <USB_Device_ProcessControlRequest+0x29c>
 c18:	80 91 e8 00 	lds	r24, 0x00E8
 c1c:	87 7f       	andi	r24, 0xF7	; 247
					USB_Device_GetDescriptor();
				}

				break;
			case REQ_GetConfiguration:
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
 c1e:	80 93 e8 00 	sts	0x00E8, r24
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 c22:	80 91 5b 01 	lds	r24, 0x015B
 c26:	80 93 f1 00 	sts	0x00F1, r24
 c2a:	80 91 e8 00 	lds	r24, 0x00E8

static void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();

	Endpoint_Write_8(USB_Device_ConfigurationNumber);
 c2e:	8e 77       	andi	r24, 0x7E	; 126
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
 c30:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 c34:	53 dd       	rcall	.-1370   	; 0x6dc <Endpoint_ClearStatusStage>
 c36:	1c c0       	rjmp	.+56     	; 0xc70 <USB_Device_ProcessControlRequest+0x29c>
 c38:	88 23       	and	r24, r24
 c3a:	d1 f4       	brne	.+52     	; 0xc70 <USB_Device_ProcessControlRequest+0x29c>
 c3c:	90 91 62 01 	lds	r25, 0x0162
	Endpoint_ClearIN();

	Endpoint_ClearStatusStage();
 c40:	92 30       	cpi	r25, 0x02	; 2
 c42:	b0 f4       	brcc	.+44     	; 0xc70 <USB_Device_ProcessControlRequest+0x29c>
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_GetConfiguration();

				break;
			case REQ_SetConfiguration:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
 c44:	80 91 e8 00 	lds	r24, 0x00E8
}

static void USB_Device_SetConfiguration(void)
{
	#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
 c48:	87 7f       	andi	r24, 0xF7	; 247
 c4a:	80 93 e8 00 	sts	0x00E8, r24
 c4e:	90 93 5b 01 	sts	0x015B, r25
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 c52:	44 dd       	rcall	.-1400   	; 0x6dc <Endpoint_ClearStatusStage>
 c54:	80 91 5b 01 	lds	r24, 0x015B
 c58:	88 23       	and	r24, r24
	#endif
	#endif

	Endpoint_ClearSETUP();

	USB_Device_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
 c5a:	21 f4       	brne	.+8      	; 0xc64 <USB_Device_ProcessControlRequest+0x290>
 c5c:	80 91 e3 00 	lds	r24, 0x00E3

	Endpoint_ClearStatusStage();
 c60:	87 ff       	sbrs	r24, 7

	if (USB_Device_ConfigurationNumber)
 c62:	02 c0       	rjmp	.+4      	; 0xc68 <USB_Device_ProcessControlRequest+0x294>
 c64:	84 e0       	ldi	r24, 0x04	; 4
 c66:	01 c0       	rjmp	.+2      	; 0xc6a <USB_Device_ProcessControlRequest+0x296>
 c68:	81 e0       	ldi	r24, 0x01	; 1
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
 c6a:	80 93 5f 01 	sts	0x015F, r24
	  USB_DeviceState = DEVICE_STATE_Configured;
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
 c6e:	a9 da       	rcall	.-2734   	; 0x1c2 <EVENT_USB_Device_ConfigurationChanged>
 c70:	80 91 e8 00 	lds	r24, 0x00E8
 c74:	83 ff       	sbrs	r24, 3
 c76:	0a c0       	rjmp	.+20     	; 0xc8c <USB_Device_ProcessControlRequest+0x2b8>
 c78:	80 91 e8 00 	lds	r24, 0x00E8

	EVENT_USB_Device_ConfigurationChanged();
 c7c:	87 7f       	andi	r24, 0xF7	; 247
 c7e:	80 93 e8 00 	sts	0x00E8, r24
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 c82:	80 91 eb 00 	lds	r24, 0x00EB
			default:
				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
 c86:	80 62       	ori	r24, 0x20	; 32
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 c88:	80 93 eb 00 	sts	0x00EB, r24
 c8c:	ac 96       	adiw	r28, 0x2c	; 44
 c8e:	0f b6       	in	r0, 0x3f	; 63
 c90:	f8 94       	cli
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
 c92:	de bf       	out	0x3e, r29	; 62
 c94:	0f be       	out	0x3f, r0	; 63
 c96:	cd bf       	out	0x3d, r28	; 61
 c98:	df 91       	pop	r29
 c9a:	cf 91       	pop	r28
	{
		Endpoint_ClearSETUP();
		Endpoint_StallTransaction();
	}
}
 c9c:	1f 91       	pop	r17
 c9e:	08 95       	ret

00000ca0 <USB_Event_Stub>:
#include "Events.h"

void USB_Event_Stub(void)
{

}
 ca0:	08 95       	ret

00000ca2 <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
 ca2:	cf 93       	push	r28
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_DeviceTask(void)
{
	if (USB_DeviceState == DEVICE_STATE_Unattached)
 ca4:	80 91 5f 01 	lds	r24, 0x015F
 ca8:	88 23       	and	r24, r24
 caa:	a9 f0       	breq	.+42     	; 0xcd6 <USB_USBTask+0x34>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
 cac:	80 91 e9 00 	lds	r24, 0x00E9
 cb0:	8f 70       	andi	r24, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
 cb2:	90 91 ec 00 	lds	r25, 0x00EC
 cb6:	90 ff       	sbrs	r25, 0
 cb8:	02 c0       	rjmp	.+4      	; 0xcbe <USB_USBTask+0x1c>
 cba:	c0 e8       	ldi	r28, 0x80	; 128
 cbc:	01 c0       	rjmp	.+2      	; 0xcc0 <USB_USBTask+0x1e>
 cbe:	c0 e0       	ldi	r28, 0x00	; 0
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
 cc0:	c8 2b       	or	r28, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 cc2:	10 92 e9 00 	sts	0x00E9, r1
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 cc6:	80 91 e8 00 	lds	r24, 0x00E8

	uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

	if (Endpoint_IsSETUPReceived())
 cca:	83 ff       	sbrs	r24, 3
 ccc:	01 c0       	rjmp	.+2      	; 0xcd0 <USB_USBTask+0x2e>
	  USB_Device_ProcessControlRequest();
 cce:	82 de       	rcall	.-764    	; 0x9d4 <USB_Device_ProcessControlRequest>
 cd0:	cf 70       	andi	r28, 0x0F	; 15
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 cd2:	c0 93 e9 00 	sts	0x00E9, r28
 cd6:	cf 91       	pop	r28
	#elif defined(USB_CAN_BE_HOST)
		USB_HostTask();
	#elif defined(USB_CAN_BE_DEVICE)
		USB_DeviceTask();
	#endif
}
 cd8:	08 95       	ret

00000cda <_exit>:
 cda:	f8 94       	cli

00000cdc <__stop_program>:
 cdc:	ff cf       	rjmp	.-2      	; 0xcdc <__stop_program>
