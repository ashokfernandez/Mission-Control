
AudioOutput.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800100  00000d68  00000dfc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000d68  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000e  00800104  00800104  00000e00  2**0
                  ALLOC
  3 .stab         00000870  00000000  00000000  00000e00  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000013a  00000000  00000000  00001670  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000350  00000000  00000000  000017b0  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000053df  00000000  00000000  00001b00  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001361  00000000  00000000  00006edf  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000027e3  00000000  00000000  00008240  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000900  00000000  00000000  0000aa24  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00002928  00000000  00000000  0000b324  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000037a5  00000000  00000000  0000dc4c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000508  00000000  00000000  000113f1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	b0 c0       	rjmp	.+352    	; 0x162 <__ctors_end>
   2:	00 00       	nop
   4:	cc c0       	rjmp	.+408    	; 0x19e <__bad_interrupt>
   6:	00 00       	nop
   8:	ca c0       	rjmp	.+404    	; 0x19e <__bad_interrupt>
   a:	00 00       	nop
   c:	c8 c0       	rjmp	.+400    	; 0x19e <__bad_interrupt>
   e:	00 00       	nop
  10:	c6 c0       	rjmp	.+396    	; 0x19e <__bad_interrupt>
  12:	00 00       	nop
  14:	c4 c0       	rjmp	.+392    	; 0x19e <__bad_interrupt>
  16:	00 00       	nop
  18:	c2 c0       	rjmp	.+388    	; 0x19e <__bad_interrupt>
  1a:	00 00       	nop
  1c:	c0 c0       	rjmp	.+384    	; 0x19e <__bad_interrupt>
  1e:	00 00       	nop
  20:	be c0       	rjmp	.+380    	; 0x19e <__bad_interrupt>
  22:	00 00       	nop
  24:	bc c0       	rjmp	.+376    	; 0x19e <__bad_interrupt>
  26:	00 00       	nop
  28:	30 c4       	rjmp	.+2144   	; 0x88a <__vector_10>
  2a:	00 00       	nop
  2c:	b8 c0       	rjmp	.+368    	; 0x19e <__bad_interrupt>
  2e:	00 00       	nop
  30:	b6 c0       	rjmp	.+364    	; 0x19e <__bad_interrupt>
  32:	00 00       	nop
  34:	b4 c0       	rjmp	.+360    	; 0x19e <__bad_interrupt>
  36:	00 00       	nop
  38:	b2 c0       	rjmp	.+356    	; 0x19e <__bad_interrupt>
  3a:	00 00       	nop
  3c:	b0 c0       	rjmp	.+352    	; 0x19e <__bad_interrupt>
  3e:	00 00       	nop
  40:	ae c0       	rjmp	.+348    	; 0x19e <__bad_interrupt>
  42:	00 00       	nop
  44:	ac c0       	rjmp	.+344    	; 0x19e <__bad_interrupt>
  46:	00 00       	nop
  48:	aa c0       	rjmp	.+340    	; 0x19e <__bad_interrupt>
  4a:	00 00       	nop
  4c:	a8 c0       	rjmp	.+336    	; 0x19e <__bad_interrupt>
  4e:	00 00       	nop
  50:	a6 c0       	rjmp	.+332    	; 0x19e <__bad_interrupt>
  52:	00 00       	nop
  54:	b4 c1       	rjmp	.+872    	; 0x3be <__vector_21>
  56:	00 00       	nop
  58:	a2 c0       	rjmp	.+324    	; 0x19e <__bad_interrupt>
  5a:	00 00       	nop
  5c:	a0 c0       	rjmp	.+320    	; 0x19e <__bad_interrupt>
  5e:	00 00       	nop
  60:	9e c0       	rjmp	.+316    	; 0x19e <__bad_interrupt>
  62:	00 00       	nop
  64:	9c c0       	rjmp	.+312    	; 0x19e <__bad_interrupt>
  66:	00 00       	nop
  68:	9a c0       	rjmp	.+308    	; 0x19e <__bad_interrupt>
  6a:	00 00       	nop
  6c:	98 c0       	rjmp	.+304    	; 0x19e <__bad_interrupt>
  6e:	00 00       	nop
  70:	96 c0       	rjmp	.+300    	; 0x19e <__bad_interrupt>
  72:	00 00       	nop
  74:	94 c0       	rjmp	.+296    	; 0x19e <__bad_interrupt>
  76:	00 00       	nop
  78:	92 c0       	rjmp	.+292    	; 0x19e <__bad_interrupt>
  7a:	00 00       	nop
  7c:	90 c0       	rjmp	.+288    	; 0x19e <__bad_interrupt>
  7e:	00 00       	nop
  80:	8e c0       	rjmp	.+284    	; 0x19e <__bad_interrupt>
  82:	00 00       	nop
  84:	8c c0       	rjmp	.+280    	; 0x19e <__bad_interrupt>
  86:	00 00       	nop
  88:	8a c0       	rjmp	.+276    	; 0x19e <__bad_interrupt>
  8a:	00 00       	nop
  8c:	88 c0       	rjmp	.+272    	; 0x19e <__bad_interrupt>
  8e:	00 00       	nop
  90:	86 c0       	rjmp	.+268    	; 0x19e <__bad_interrupt>
  92:	00 00       	nop
  94:	84 c0       	rjmp	.+264    	; 0x19e <__bad_interrupt>
  96:	00 00       	nop

00000098 <ProductString>:
  98:	28 03 4c 00 55 00 46 00 41 00 20 00 41 00 75 00     (.L.U.F.A. .A.u.
  a8:	64 00 69 00 6f 00 20 00 4f 00 75 00 74 00 20 00     d.i.o. .O.u.t. .
  b8:	44 00 65 00 6d 00 6f 00 00 00                       D.e.m.o...

000000c2 <ManufacturerString>:
  c2:	18 03 44 00 65 00 61 00 6e 00 20 00 43 00 61 00     ..D.e.a.n. .C.a.
  d2:	6d 00 65 00 72 00 61 00 00 00                       m.e.r.a...

000000dc <LanguageString>:
  dc:	04 03 09 04                                         ....

000000e0 <ConfigurationDescriptor>:
  e0:	09 02 70 00 02 01 00 c0 32 09 04 00 00 00 01 01     ..p.....2.......
  f0:	00 00 09 24 01 00 01 1e 00 01 01 0c 24 02 01 01     ...$........$...
 100:	01 00 02 03 00 00 00 09 24 03 02 01 03 00 01 00     ........$.......
 110:	09 04 01 00 00 01 02 00 00 09 04 01 01 01 01 02     ................
 120:	00 00 07 24 01 01 01 01 00 17 24 02 01 02 02 10     ...$......$.....
 130:	05 40 1f 00 11 2b 00 22 56 00 44 ac 00 80 bb 00     .@...+."V.D.....
 140:	09 05 01 0d 00 01 01 00 00 07 25 01 01 00 00 00     ..........%.....

00000150 <DeviceDescriptor>:
 150:	12 01 10 01 00 00 00 08 eb 03 46 20 02 00 01 02     ..........F ....
 160:	00 01                                               ..

00000162 <__ctors_end>:
 162:	11 24       	eor	r1, r1
 164:	1f be       	out	0x3f, r1	; 63
 166:	cf ef       	ldi	r28, 0xFF	; 255
 168:	d0 e2       	ldi	r29, 0x20	; 32
 16a:	de bf       	out	0x3e, r29	; 62
 16c:	cd bf       	out	0x3d, r28	; 61

0000016e <__do_copy_data>:
 16e:	11 e0       	ldi	r17, 0x01	; 1
 170:	a0 e0       	ldi	r26, 0x00	; 0
 172:	b1 e0       	ldi	r27, 0x01	; 1
 174:	e8 e6       	ldi	r30, 0x68	; 104
 176:	fd e0       	ldi	r31, 0x0D	; 13
 178:	00 e0       	ldi	r16, 0x00	; 0
 17a:	0b bf       	out	0x3b, r16	; 59
 17c:	02 c0       	rjmp	.+4      	; 0x182 <__do_copy_data+0x14>
 17e:	07 90       	elpm	r0, Z+
 180:	0d 92       	st	X+, r0
 182:	a4 30       	cpi	r26, 0x04	; 4
 184:	b1 07       	cpc	r27, r17
 186:	d9 f7       	brne	.-10     	; 0x17e <__do_copy_data+0x10>
 188:	1b be       	out	0x3b, r1	; 59

0000018a <__do_clear_bss>:
 18a:	11 e0       	ldi	r17, 0x01	; 1
 18c:	a4 e0       	ldi	r26, 0x04	; 4
 18e:	b1 e0       	ldi	r27, 0x01	; 1
 190:	01 c0       	rjmp	.+2      	; 0x194 <.do_clear_bss_start>

00000192 <.do_clear_bss_loop>:
 192:	1d 92       	st	X+, r1

00000194 <.do_clear_bss_start>:
 194:	a2 31       	cpi	r26, 0x12	; 18
 196:	b1 07       	cpc	r27, r17
 198:	e1 f7       	brne	.-8      	; 0x192 <.do_clear_bss_loop>
 19a:	22 d0       	rcall	.+68     	; 0x1e0 <main>
 19c:	e3 c5       	rjmp	.+3014   	; 0xd64 <_exit>

0000019e <__bad_interrupt>:
 19e:	30 cf       	rjmp	.-416    	; 0x0 <__vectors>

000001a0 <LEDs_SetAllLEDs>:
				PORTD &= ~LEDMask;
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
			{
				PORTD = ((PORTD & ~LEDS_ALL_LEDS) | LEDMask);
 1a0:	9b b1       	in	r25, 0x0b	; 11
 1a2:	9f 70       	andi	r25, 0x0F	; 15
 1a4:	98 2b       	or	r25, r24
 1a6:	9b b9       	out	0x0b, r25	; 11
			}
 1a8:	08 95       	ret

000001aa <SetupHardware>:

/** Configures the board hardware and chip peripherals for the demo's functionality. */
void SetupHardware(void)
{
	/* Disable watchdog if enabled by bootloader/fuses */
	MCUSR &= ~(1 << WDRF);
 1aa:	84 b7       	in	r24, 0x34	; 52
 1ac:	87 7f       	andi	r24, 0xF7	; 247
 1ae:	84 bf       	out	0x34, r24	; 52
	wdt_disable();
 1b0:	88 e1       	ldi	r24, 0x18	; 24
 1b2:	0f b6       	in	r0, 0x3f	; 63
 1b4:	f8 94       	cli
 1b6:	80 93 60 00 	sts	0x0060, r24
 1ba:	10 92 60 00 	sts	0x0060, r1
 1be:	0f be       	out	0x3f, r0	; 63
The type of x is clock_div_t.
*/
void clock_prescale_set(clock_div_t __x)
{
    uint8_t __tmp = _BV(CLKPCE);
    __asm__ __volatile__ (
 1c0:	90 e0       	ldi	r25, 0x00	; 0
 1c2:	80 e8       	ldi	r24, 0x80	; 128
 1c4:	0f b6       	in	r0, 0x3f	; 63
 1c6:	f8 94       	cli
 1c8:	80 93 61 00 	sts	0x0061, r24
 1cc:	90 93 61 00 	sts	0x0061, r25
 1d0:	0f be       	out	0x3f, r0	; 63

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void LEDs_Init(void)
			{
				DDRD  |=  LEDS_ALL_LEDS;
 1d2:	8a b1       	in	r24, 0x0a	; 10
 1d4:	80 6f       	ori	r24, 0xF0	; 240
 1d6:	8a b9       	out	0x0a, r24	; 10
				PORTD &= ~LEDS_ALL_LEDS;
 1d8:	8b b1       	in	r24, 0x0b	; 11
 1da:	8f 70       	andi	r24, 0x0F	; 15
 1dc:	8b b9       	out	0x0b, r24	; 11
	/* Disable clock division */
	clock_prescale_set(clock_div_1);

	/* Hardware Initialization */
	LEDs_Init();
	USB_Init();
 1de:	3a c3       	rjmp	.+1652   	; 0x854 <USB_Init>

000001e0 <main>:
 1e0:	e4 df       	rcall	.-56     	; 0x1aa <SetupHardware>
}
 1e2:	80 e1       	ldi	r24, 0x10	; 16
 */
int main(void)
{
	SetupHardware();

	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
 1e4:	dd df       	rcall	.-70     	; 0x1a0 <LEDs_SetAllLEDs>
 1e6:	78 94       	sei
 1e8:	7f d5       	rcall	.+2814   	; 0xce8 <USB_USBTask>
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				sei();
 1ea:	fe cf       	rjmp	.-4      	; 0x1e8 <main+0x8>

000001ec <EVENT_USB_Device_Connect>:
	GlobalInterruptEnable();

	for (;;)
	{
		USB_USBTask();
 1ec:	cf 93       	push	r28
 1ee:	80 ea       	ldi	r24, 0xA0	; 160
 1f0:	d7 df       	rcall	.-82     	; 0x1a0 <LEDs_SetAllLEDs>
 *  configures the sample update and PWM timers.
 */
void EVENT_USB_Device_Connect(void)
{
	/* Indicate USB enumerating */
	LEDs_SetAllLEDs(LEDMASK_USB_ENUMERATING);
 1f2:	c2 e0       	ldi	r28, 0x02	; 2

	/* Sample reload timer initialization */
	TIMSK0 = (1 << OCIE0A);
 1f4:	c0 93 6e 00 	sts	0x006E, r28
 1f8:	20 91 00 01 	lds	r18, 0x0100
	OCR0A  = ((F_CPU / 8 / CurrentAudioSampleFrequency) - 1);
 1fc:	30 91 01 01 	lds	r19, 0x0101
 200:	40 91 02 01 	lds	r20, 0x0102
 204:	50 91 03 01 	lds	r21, 0x0103
 208:	60 e4       	ldi	r22, 0x40	; 64
 20a:	72 e4       	ldi	r23, 0x42	; 66
 20c:	8f e0       	ldi	r24, 0x0F	; 15
 20e:	90 e0       	ldi	r25, 0x00	; 0
 210:	87 d5       	rcall	.+2830   	; 0xd20 <__udivmodsi4>
 212:	21 50       	subi	r18, 0x01	; 1
 214:	27 bd       	out	0x27, r18	; 39
 216:	c4 bd       	out	0x24, r28	; 36
 218:	c5 bd       	out	0x25, r28	; 37
	TCCR0A = (1 << WGM01);  // CTC mode
 21a:	87 b1       	in	r24, 0x07	; 7
	TCCR0B = (1 << CS01);   // Fcpu/8 speed
 21c:	80 66       	ori	r24, 0x60	; 96
	#if defined(AUDIO_OUT_MONO)
	/* Set speaker as output */
	DDRC  |= (1 << 6);
	#elif defined(AUDIO_OUT_STEREO)
	/* Set speakers as outputs */
	DDRC  |= ((1 << 6) | (1 << 5));
 21e:	87 b9       	out	0x07, r24	; 7
 220:	81 ef       	ldi	r24, 0xF1	; 241
 222:	80 93 90 00 	sts	0x0090, r24
	DDRC  |= 0xFF;
	#endif

	#if (defined(AUDIO_OUT_MONO) || defined(AUDIO_OUT_STEREO))
	/* PWM speaker timer initialization */
	TCCR3A = ((1 << WGM30) | (1 << COM3A1) | (1 << COM3A0)
 226:	89 e0       	ldi	r24, 0x09	; 9
 228:	80 93 91 00 	sts	0x0091, r24
	                       | (1 << COM3B1) | (1 << COM3B0)); // Set on match, clear on TOP
	TCCR3B = ((1 << WGM32) | (1 << CS30));  // Fast 8-Bit PWM, F_CPU speed
 22c:	cf 91       	pop	r28
 22e:	08 95       	ret

00000230 <EVENT_USB_Device_Disconnect>:
	#endif
}
 230:	15 bc       	out	0x25, r1	; 37
 232:	10 92 91 00 	sts	0x0091, r1
	#if defined(AUDIO_OUT_MONO)
	/* Set speaker as input to reduce current draw */
	DDRC  &= ~(1 << 6);
	#elif defined(AUDIO_OUT_STEREO)
	/* Set speakers as inputs to reduce current draw */
	DDRC  &= ~((1 << 6) | (1 << 5));
 236:	87 b1       	in	r24, 0x07	; 7
 238:	8f 79       	andi	r24, 0x9F	; 159
 23a:	87 b9       	out	0x07, r24	; 7
	/* Set PORTC low */
	PORTC = 0x00;
	#endif

	/* Indicate streaming audio interface not selected */
	StreamingAudioInterfaceSelected = false;
 23c:	10 92 04 01 	sts	0x0104, r1

	/* Indicate USB not ready */
	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
 240:	80 e1       	ldi	r24, 0x10	; 16
 242:	ae cf       	rjmp	.-164    	; 0x1a0 <LEDs_SetAllLEDs>

00000244 <EVENT_USB_Device_ConfigurationChanged>:
 244:	81 e0       	ldi	r24, 0x01	; 1
}
 246:	60 e4       	ldi	r22, 0x40	; 64
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
 248:	46 e5       	ldi	r20, 0x56	; 86
 24a:	69 d2       	rcall	.+1234   	; 0x71e <Endpoint_ConfigureEndpoint_Prv>
 24c:	88 23       	and	r24, r24

	/* Setup Audio Stream Endpoint */
	ConfigSuccess &= Endpoint_ConfigureEndpoint(AUDIO_STREAM_EPADDR, EP_TYPE_ISOCHRONOUS, AUDIO_STREAM_EPSIZE, 2);

	/* Indicate endpoint configuration success or failure */
	LEDs_SetAllLEDs(ConfigSuccess ? LEDMASK_USB_READY : LEDMASK_USB_ERROR);
 24e:	11 f0       	breq	.+4      	; 0x254 <EVENT_USB_Device_ConfigurationChanged+0x10>
 250:	80 e6       	ldi	r24, 0x60	; 96
 252:	01 c0       	rjmp	.+2      	; 0x256 <EVENT_USB_Device_ConfigurationChanged+0x12>
 254:	80 e9       	ldi	r24, 0x90	; 144
 256:	a4 cf       	rjmp	.-184    	; 0x1a0 <LEDs_SetAllLEDs>

00000258 <EVENT_USB_Device_ControlRequest>:
 258:	0f 93       	push	r16
 25a:	1f 93       	push	r17
}
 25c:	cf 93       	push	r28
/** Event handler for the USB_ControlRequest event. This is used to catch and process control requests sent to
 *  the device from the USB host before passing along unhandled control requests to the library for processing
 *  internally.
 */
void EVENT_USB_Device_ControlRequest(void)
{
 25e:	df 93       	push	r29
 260:	00 d0       	rcall	.+0      	; 0x262 <EVENT_USB_Device_ControlRequest+0xa>
 262:	0f 92       	push	r0
 264:	cd b7       	in	r28, 0x3d	; 61
 266:	de b7       	in	r29, 0x3e	; 62
	/* Process General and Audio specific control requests */
	switch (USB_ControlRequest.bRequest)
 268:	80 91 0b 01 	lds	r24, 0x010B
 26c:	8b 30       	cpi	r24, 0x0B	; 11
 26e:	69 f0       	breq	.+26     	; 0x28a <EVENT_USB_Device_ControlRequest+0x32>
 270:	8c 30       	cpi	r24, 0x0C	; 12
 272:	20 f4       	brcc	.+8      	; 0x27c <EVENT_USB_Device_ControlRequest+0x24>
 274:	81 30       	cpi	r24, 0x01	; 1
 276:	09 f0       	breq	.+2      	; 0x27a <EVENT_USB_Device_ControlRequest+0x22>
 278:	9a c0       	rjmp	.+308    	; 0x3ae <EVENT_USB_Device_ControlRequest+0x156>
 27a:	2a c0       	rjmp	.+84     	; 0x2d0 <EVENT_USB_Device_ControlRequest+0x78>
 27c:	81 38       	cpi	r24, 0x81	; 129
 27e:	09 f4       	brne	.+2      	; 0x282 <EVENT_USB_Device_ControlRequest+0x2a>
 280:	72 c0       	rjmp	.+228    	; 0x366 <EVENT_USB_Device_ControlRequest+0x10e>
 282:	8f 3f       	cpi	r24, 0xFF	; 255
 284:	09 f0       	breq	.+2      	; 0x288 <EVENT_USB_Device_ControlRequest+0x30>
 286:	93 c0       	rjmp	.+294    	; 0x3ae <EVENT_USB_Device_ControlRequest+0x156>
 288:	16 c0       	rjmp	.+44     	; 0x2b6 <EVENT_USB_Device_ControlRequest+0x5e>
	{
		case REQ_SetInterface:
			/* Set Interface is not handled by the library, as its function is application-specific */
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_INTERFACE))
 28a:	80 91 0a 01 	lds	r24, 0x010A
 28e:	81 30       	cpi	r24, 0x01	; 1
 290:	09 f0       	breq	.+2      	; 0x294 <EVENT_USB_Device_ControlRequest+0x3c>
 292:	8d c0       	rjmp	.+282    	; 0x3ae <EVENT_USB_Device_ControlRequest+0x156>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 294:	80 91 e8 00 	lds	r24, 0x00E8
 298:	87 7f       	andi	r24, 0xF7	; 247
 29a:	80 93 e8 00 	sts	0x00E8, r24
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
 29e:	74 d2       	rcall	.+1256   	; 0x788 <Endpoint_ClearStatusStage>
 2a0:	21 e0       	ldi	r18, 0x01	; 1

				/* Check if the host is enabling the audio interface (setting AlternateSetting to 1) */
				StreamingAudioInterfaceSelected = ((USB_ControlRequest.wValue) != 0);
 2a2:	80 91 0c 01 	lds	r24, 0x010C
 2a6:	90 91 0d 01 	lds	r25, 0x010D
 2aa:	00 97       	sbiw	r24, 0x00	; 0
 2ac:	09 f4       	brne	.+2      	; 0x2b0 <EVENT_USB_Device_ControlRequest+0x58>
 2ae:	20 e0       	ldi	r18, 0x00	; 0
 2b0:	20 93 04 01 	sts	0x0104, r18
 2b4:	7c c0       	rjmp	.+248    	; 0x3ae <EVENT_USB_Device_ControlRequest+0x156>
 2b6:	80 91 0a 01 	lds	r24, 0x010A

			break;
		case AUDIO_REQ_GetStatus:
			/* Get Status request can be directed at either the interface or endpoint, neither is currently used
			 * according to the latest USB Audio 1.0 standard, but must be ACKed with no data when requested */
			if ((USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE)) ||
 2ba:	81 52       	subi	r24, 0x21	; 33
 2bc:	82 30       	cpi	r24, 0x02	; 2
 2be:	08 f0       	brcs	.+2      	; 0x2c2 <EVENT_USB_Device_ControlRequest+0x6a>
 2c0:	76 c0       	rjmp	.+236    	; 0x3ae <EVENT_USB_Device_ControlRequest+0x156>
 2c2:	80 91 e8 00 	lds	r24, 0x00E8
 2c6:	87 7f       	andi	r24, 0xF7	; 247
 2c8:	80 93 e8 00 	sts	0x00E8, r24
 2cc:	5d d2       	rcall	.+1210   	; 0x788 <Endpoint_ClearStatusStage>
			    (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_ENDPOINT)))
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
 2ce:	6f c0       	rjmp	.+222    	; 0x3ae <EVENT_USB_Device_ControlRequest+0x156>
 2d0:	80 91 0a 01 	lds	r24, 0x010A
			}

			break;
		case AUDIO_REQ_SetCurrent:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_ENDPOINT))
 2d4:	82 32       	cpi	r24, 0x22	; 34
 2d6:	09 f0       	breq	.+2      	; 0x2da <EVENT_USB_Device_ControlRequest+0x82>
 2d8:	6a c0       	rjmp	.+212    	; 0x3ae <EVENT_USB_Device_ControlRequest+0x156>
 2da:	80 91 0d 01 	lds	r24, 0x010D
			{
				/* Extract out the relevant request information to get the target Endpoint address and control being set */
				uint8_t EndpointAddress = (uint8_t)USB_ControlRequest.wIndex;
				uint8_t EndpointControl = (USB_ControlRequest.wValue >> 8);
 2de:	90 91 0e 01 	lds	r25, 0x010E

				/* Only handle SET CURRENT requests to the audio endpoint's sample frequency property */
				if ((EndpointAddress == AUDIO_STREAM_EPADDR) && (EndpointControl == AUDIO_EPCONTROL_SamplingFreq))
 2e2:	91 30       	cpi	r25, 0x01	; 1
 2e4:	09 f0       	breq	.+2      	; 0x2e8 <EVENT_USB_Device_ControlRequest+0x90>
 2e6:	63 c0       	rjmp	.+198    	; 0x3ae <EVENT_USB_Device_ControlRequest+0x156>
 2e8:	81 30       	cpi	r24, 0x01	; 1
 2ea:	09 f0       	breq	.+2      	; 0x2ee <EVENT_USB_Device_ControlRequest+0x96>
 2ec:	60 c0       	rjmp	.+192    	; 0x3ae <EVENT_USB_Device_ControlRequest+0x156>
 2ee:	80 91 e8 00 	lds	r24, 0x00E8
 2f2:	87 7f       	andi	r24, 0xF7	; 247
 2f4:	80 93 e8 00 	sts	0x00E8, r24
 2f8:	ce 01       	movw	r24, r28
 2fa:	01 96       	adiw	r24, 0x01	; 1
				{
					uint8_t SampleRate[3];

					Endpoint_ClearSETUP();
					Endpoint_Read_Control_Stream_LE(SampleRate, sizeof(SampleRate));
 2fc:	63 e0       	ldi	r22, 0x03	; 3
 2fe:	70 e0       	ldi	r23, 0x00	; 0
 300:	68 d1       	rcall	.+720    	; 0x5d2 <Endpoint_Read_Control_Stream_LE>
 302:	80 91 e8 00 	lds	r24, 0x00E8
 306:	8b 77       	andi	r24, 0x7B	; 123
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 308:	80 93 e8 00 	sts	0x00E8, r24
 30c:	0b 81       	ldd	r16, Y+3	; 0x03
 30e:	10 e0       	ldi	r17, 0x00	; 0
 310:	20 e0       	ldi	r18, 0x00	; 0
					Endpoint_ClearOUT();

					/* Set the new sampling frequency to the value given by the host */
					CurrentAudioSampleFrequency = (((uint32_t)SampleRate[2] << 16) | ((uint32_t)SampleRate[1] << 8) | (uint32_t)SampleRate[0]);
 312:	30 e0       	ldi	r19, 0x00	; 0
 314:	98 01       	movw	r18, r16
 316:	11 27       	eor	r17, r17
 318:	00 27       	eor	r16, r16
 31a:	8a 81       	ldd	r24, Y+2	; 0x02
 31c:	90 e0       	ldi	r25, 0x00	; 0
 31e:	a0 e0       	ldi	r26, 0x00	; 0
 320:	b0 e0       	ldi	r27, 0x00	; 0
 322:	ba 2f       	mov	r27, r26
 324:	a9 2f       	mov	r26, r25
 326:	98 2f       	mov	r25, r24
 328:	88 27       	eor	r24, r24
 32a:	08 2b       	or	r16, r24
 32c:	19 2b       	or	r17, r25
 32e:	2a 2b       	or	r18, r26
 330:	3b 2b       	or	r19, r27
 332:	89 81       	ldd	r24, Y+1	; 0x01
 334:	90 e0       	ldi	r25, 0x00	; 0
 336:	a0 e0       	ldi	r26, 0x00	; 0
 338:	b0 e0       	ldi	r27, 0x00	; 0
 33a:	08 2b       	or	r16, r24
 33c:	19 2b       	or	r17, r25
 33e:	2a 2b       	or	r18, r26
 340:	3b 2b       	or	r19, r27
 342:	00 93 00 01 	sts	0x0100, r16
 346:	10 93 01 01 	sts	0x0101, r17
 34a:	20 93 02 01 	sts	0x0102, r18
 34e:	30 93 03 01 	sts	0x0103, r19
 352:	60 e4       	ldi	r22, 0x40	; 64
 354:	72 e4       	ldi	r23, 0x42	; 66
 356:	8f e0       	ldi	r24, 0x0F	; 15

					/* Adjust sample reload timer to the new frequency */
					OCR0A = ((F_CPU / 8 / CurrentAudioSampleFrequency) - 1);
 358:	90 e0       	ldi	r25, 0x00	; 0
 35a:	a9 01       	movw	r20, r18
 35c:	98 01       	movw	r18, r16
 35e:	e0 d4       	rcall	.+2496   	; 0xd20 <__udivmodsi4>
 360:	21 50       	subi	r18, 0x01	; 1
 362:	27 bd       	out	0x27, r18	; 39
 364:	24 c0       	rjmp	.+72     	; 0x3ae <EVENT_USB_Device_ControlRequest+0x156>
 366:	80 91 0a 01 	lds	r24, 0x010A
 36a:	82 32       	cpi	r24, 0x22	; 34
 36c:	01 f5       	brne	.+64     	; 0x3ae <EVENT_USB_Device_ControlRequest+0x156>
				}
			}

			break;
		case AUDIO_REQ_GetCurrent:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_ENDPOINT))
 36e:	80 91 0d 01 	lds	r24, 0x010D
 372:	90 91 0e 01 	lds	r25, 0x010E
			{
				/* Extract out the relevant request information to get the target Endpoint address and control being retrieved */
				uint8_t EndpointAddress = (uint8_t)USB_ControlRequest.wIndex;
				uint8_t EndpointControl = (USB_ControlRequest.wValue >> 8);
 376:	91 30       	cpi	r25, 0x01	; 1
 378:	d1 f4       	brne	.+52     	; 0x3ae <EVENT_USB_Device_ControlRequest+0x156>

				/* Only handle GET CURRENT requests to the audio endpoint's sample frequency property */
				if ((EndpointAddress == AUDIO_STREAM_EPADDR) && (EndpointControl == AUDIO_EPCONTROL_SamplingFreq))
 37a:	81 30       	cpi	r24, 0x01	; 1
 37c:	c1 f4       	brne	.+48     	; 0x3ae <EVENT_USB_Device_ControlRequest+0x156>
 37e:	80 91 00 01 	lds	r24, 0x0100
 382:	90 91 01 01 	lds	r25, 0x0101
				{
					uint8_t SampleRate[3];

					/* Convert the sampling rate value into the 24-bit format the host expects for the property */
					SampleRate[2] = (CurrentAudioSampleFrequency >> 16);
 386:	20 91 02 01 	lds	r18, 0x0102
 38a:	2b 83       	std	Y+3, r18	; 0x03
 38c:	9a 83       	std	Y+2, r25	; 0x02
 38e:	89 83       	std	Y+1, r24	; 0x01
 390:	80 91 e8 00 	lds	r24, 0x00E8
					SampleRate[1] = (CurrentAudioSampleFrequency >> 8);
 394:	87 7f       	andi	r24, 0xF7	; 247
					SampleRate[0] = (CurrentAudioSampleFrequency &  0xFF);
 396:	80 93 e8 00 	sts	0x00E8, r24
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 39a:	ce 01       	movw	r24, r28
 39c:	01 96       	adiw	r24, 0x01	; 1
 39e:	63 e0       	ldi	r22, 0x03	; 3
 3a0:	70 e0       	ldi	r23, 0x00	; 0

					Endpoint_ClearSETUP();
					Endpoint_Write_Control_Stream_LE(SampleRate, sizeof(SampleRate));
 3a2:	bb d0       	rcall	.+374    	; 0x51a <Endpoint_Write_Control_Stream_LE>
 3a4:	80 91 e8 00 	lds	r24, 0x00E8
 3a8:	8b 77       	andi	r24, 0x7B	; 123
 3aa:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 3ae:	0f 90       	pop	r0
 3b0:	0f 90       	pop	r0
 3b2:	0f 90       	pop	r0
 3b4:	df 91       	pop	r29
 3b6:	cf 91       	pop	r28
				}
			}

			break;
	}
}
 3b8:	1f 91       	pop	r17
 3ba:	0f 91       	pop	r16
 3bc:	08 95       	ret

000003be <__vector_21>:
 3be:	1f 92       	push	r1
 3c0:	0f 92       	push	r0
 3c2:	0f b6       	in	r0, 0x3f	; 63
 3c4:	0f 92       	push	r0
 3c6:	0b b6       	in	r0, 0x3b	; 59

/** ISR to handle the reloading of the PWM timer with the next sample. */
ISR(TIMER0_COMPA_vect, ISR_BLOCK)
{
 3c8:	0f 92       	push	r0
 3ca:	11 24       	eor	r1, r1
 3cc:	2f 93       	push	r18
 3ce:	3f 93       	push	r19
 3d0:	4f 93       	push	r20
 3d2:	5f 93       	push	r21
 3d4:	6f 93       	push	r22
 3d6:	7f 93       	push	r23
 3d8:	8f 93       	push	r24
 3da:	9f 93       	push	r25
 3dc:	af 93       	push	r26
 3de:	bf 93       	push	r27
 3e0:	cf 93       	push	r28
 3e2:	ef 93       	push	r30
 3e4:	ff 93       	push	r31
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
 3e6:	80 91 e9 00 	lds	r24, 0x00E9
 3ea:	8f 70       	andi	r24, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
 3ec:	90 91 ec 00 	lds	r25, 0x00EC
 3f0:	90 ff       	sbrs	r25, 0
 3f2:	02 c0       	rjmp	.+4      	; 0x3f8 <__vector_21+0x3a>
 3f4:	c0 e8       	ldi	r28, 0x80	; 128
 3f6:	01 c0       	rjmp	.+2      	; 0x3fa <__vector_21+0x3c>
 3f8:	c0 e0       	ldi	r28, 0x00	; 0
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
 3fa:	c8 2b       	or	r28, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 3fc:	81 e0       	ldi	r24, 0x01	; 1
 3fe:	80 93 e9 00 	sts	0x00E9, r24
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 402:	80 91 e8 00 	lds	r24, 0x00E8

	/* Select the audio stream endpoint */
	Endpoint_SelectEndpoint(AUDIO_STREAM_EPADDR);

	/* Check if the current endpoint can be read from (contains a packet) and the host is sending data */
	if (Endpoint_IsOUTReceived() && StreamingAudioInterfaceSelected)
 406:	82 ff       	sbrs	r24, 2
 408:	45 c0       	rjmp	.+138    	; 0x494 <__vector_21+0xd6>
 40a:	80 91 04 01 	lds	r24, 0x0104
 40e:	88 23       	and	r24, r24
 410:	09 f4       	brne	.+2      	; 0x414 <__vector_21+0x56>
 412:	40 c0       	rjmp	.+128    	; 0x494 <__vector_21+0xd6>
				{
					uint16_t Value;
					uint8_t  Bytes[2];
				} Data;

				Data.Bytes[0] = UEDATX;
 414:	20 91 f1 00 	lds	r18, 0x00F1
				Data.Bytes[1] = UEDATX;
 418:	20 91 f1 00 	lds	r18, 0x00F1
				{
					uint16_t Value;
					uint8_t  Bytes[2];
				} Data;

				Data.Bytes[0] = UEDATX;
 41c:	80 91 f1 00 	lds	r24, 0x00F1
				Data.Bytes[1] = UEDATX;
 420:	80 91 f1 00 	lds	r24, 0x00F1
 424:	38 2f       	mov	r19, r24
		/* Retrieve the signed 16-bit left and right audio samples, convert to 8-bit */
		int8_t LeftSample_8Bit   = ((int16_t)Endpoint_Read_16_LE() >> 8);
		int8_t RightSample_8Bit  = ((int16_t)Endpoint_Read_16_LE() >> 8);

		/* Mix the two channels together to produce a mono, 8-bit sample */
		int8_t MixedSample_8Bit  = (((int16_t)LeftSample_8Bit + (int16_t)RightSample_8Bit) >> 1);
 426:	82 2f       	mov	r24, r18
 428:	99 27       	eor	r25, r25
 42a:	87 fd       	sbrc	r24, 7
 42c:	90 95       	com	r25
 42e:	43 2f       	mov	r20, r19
 430:	55 27       	eor	r21, r21
 432:	47 fd       	sbrc	r20, 7
 434:	50 95       	com	r21
 436:	9c 01       	movw	r18, r24
 438:	24 0f       	add	r18, r20
 43a:	35 1f       	adc	r19, r21
 43c:	35 95       	asr	r19
 43e:	27 95       	ror	r18
 440:	62 2f       	mov	r22, r18
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
 442:	20 91 e8 00 	lds	r18, 0x00E8

		/* Check to see if the bank is now empty */
		if (!(Endpoint_IsReadWriteAllowed()))
 446:	25 fd       	sbrc	r18, 5
 448:	05 c0       	rjmp	.+10     	; 0x454 <__vector_21+0x96>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 44a:	20 91 e8 00 	lds	r18, 0x00E8
 44e:	2b 77       	andi	r18, 0x7B	; 123
 450:	20 93 e8 00 	sts	0x00E8, r18
		#if defined(AUDIO_OUT_MONO)
		/* Load the sample into the PWM timer channel */
		OCR3A = (MixedSample_8Bit ^ (1 << 7));
		#elif defined(AUDIO_OUT_STEREO)
		/* Load the dual 8-bit samples into the PWM timer channels */
		OCR3A = (LeftSample_8Bit  ^ (1 << 7));
 454:	20 e8       	ldi	r18, 0x80	; 128
 456:	30 e0       	ldi	r19, 0x00	; 0
 458:	82 27       	eor	r24, r18
 45a:	93 27       	eor	r25, r19
 45c:	90 93 99 00 	sts	0x0099, r25
 460:	80 93 98 00 	sts	0x0098, r24
		OCR3B = (RightSample_8Bit ^ (1 << 7));
 464:	42 27       	eor	r20, r18
 466:	53 27       	eor	r21, r19
 468:	50 93 9b 00 	sts	0x009B, r21
 46c:	40 93 9a 00 	sts	0x009A, r20
		#endif

		uint8_t LEDMask = LEDS_NO_LEDS;

		/* Turn on LEDs as the sample amplitude increases */
		if (MixedSample_8Bit > 16)
 470:	61 31       	cpi	r22, 0x11	; 17
 472:	44 f4       	brge	.+16     	; 0x484 <__vector_21+0xc6>
		  LEDMask = (LEDS_LED1 | LEDS_LED2 | LEDS_LED3 | LEDS_LED4);
		else if (MixedSample_8Bit > 8)
 474:	69 30       	cpi	r22, 0x09	; 9
 476:	44 f4       	brge	.+16     	; 0x488 <__vector_21+0xca>
		  LEDMask = (LEDS_LED1 | LEDS_LED2 | LEDS_LED3);
		else if (MixedSample_8Bit > 4)
 478:	65 30       	cpi	r22, 0x05	; 5
 47a:	44 f4       	brge	.+16     	; 0x48c <__vector_21+0xce>
		  LEDMask = (LEDS_LED1 | LEDS_LED2);
		else if (MixedSample_8Bit > 2)
 47c:	63 30       	cpi	r22, 0x03	; 3
 47e:	44 f4       	brge	.+16     	; 0x490 <__vector_21+0xd2>
		#elif defined(AUDIO_OUT_PORTC)
		/* Load the 8-bit mixed sample into PORTC */
		PORTC = MixedSample_8Bit;
		#endif

		uint8_t LEDMask = LEDS_NO_LEDS;
 480:	80 e0       	ldi	r24, 0x00	; 0
 482:	07 c0       	rjmp	.+14     	; 0x492 <__vector_21+0xd4>

		/* Turn on LEDs as the sample amplitude increases */
		if (MixedSample_8Bit > 16)
		  LEDMask = (LEDS_LED1 | LEDS_LED2 | LEDS_LED3 | LEDS_LED4);
 484:	80 ef       	ldi	r24, 0xF0	; 240
 486:	05 c0       	rjmp	.+10     	; 0x492 <__vector_21+0xd4>
		else if (MixedSample_8Bit > 8)
		  LEDMask = (LEDS_LED1 | LEDS_LED2 | LEDS_LED3);
 488:	80 eb       	ldi	r24, 0xB0	; 176
 48a:	03 c0       	rjmp	.+6      	; 0x492 <__vector_21+0xd4>
		else if (MixedSample_8Bit > 4)
		  LEDMask = (LEDS_LED1 | LEDS_LED2);
 48c:	80 e3       	ldi	r24, 0x30	; 48
 48e:	01 c0       	rjmp	.+2      	; 0x492 <__vector_21+0xd4>
		else if (MixedSample_8Bit > 2)
		  LEDMask = (LEDS_LED1);
 490:	80 e1       	ldi	r24, 0x10	; 16

		LEDs_SetAllLEDs(LEDMask);
 492:	86 de       	rcall	.-756    	; 0x1a0 <LEDs_SetAllLEDs>
 494:	cf 70       	andi	r28, 0x0F	; 15
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 496:	c0 93 e9 00 	sts	0x00E9, r28
 49a:	ff 91       	pop	r31
	}

	Endpoint_SelectEndpoint(PrevEndpoint);
}
 49c:	ef 91       	pop	r30
 49e:	cf 91       	pop	r28
 4a0:	bf 91       	pop	r27
 4a2:	af 91       	pop	r26
 4a4:	9f 91       	pop	r25
 4a6:	8f 91       	pop	r24
 4a8:	7f 91       	pop	r23
 4aa:	6f 91       	pop	r22
 4ac:	5f 91       	pop	r21
 4ae:	4f 91       	pop	r20
 4b0:	3f 91       	pop	r19
 4b2:	2f 91       	pop	r18
 4b4:	0f 90       	pop	r0
 4b6:	0b be       	out	0x3b, r0	; 59
 4b8:	0f 90       	pop	r0
 4ba:	0f be       	out	0x3f, r0	; 63
 4bc:	0f 90       	pop	r0
 4be:	1f 90       	pop	r1
 4c0:	18 95       	reti

000004c2 <CALLBACK_USB_GetDescriptor>:
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
 4c2:	92 30       	cpi	r25, 0x02	; 2
 4c4:	29 f0       	breq	.+10     	; 0x4d0 <CALLBACK_USB_GetDescriptor+0xe>
 4c6:	93 30       	cpi	r25, 0x03	; 3
 4c8:	41 f0       	breq	.+16     	; 0x4da <CALLBACK_USB_GetDescriptor+0x18>
 4ca:	91 30       	cpi	r25, 0x01	; 1
 4cc:	e9 f4       	brne	.+58     	; 0x508 <CALLBACK_USB_GetDescriptor+0x46>
 4ce:	17 c0       	rjmp	.+46     	; 0x4fe <CALLBACK_USB_GetDescriptor+0x3c>
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
			Size    = sizeof(USB_Descriptor_Configuration_t);
 4d0:	80 e7       	ldi	r24, 0x70	; 112
 4d2:	90 e0       	ldi	r25, 0x00	; 0
		case DTYPE_Device:
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
 4d4:	e0 ee       	ldi	r30, 0xE0	; 224
 4d6:	f0 e0       	ldi	r31, 0x00	; 0
			Size    = sizeof(USB_Descriptor_Configuration_t);
			break;
 4d8:	1b c0       	rjmp	.+54     	; 0x510 <CALLBACK_USB_GetDescriptor+0x4e>
		case DTYPE_String:
			switch (DescriptorNumber)
 4da:	81 30       	cpi	r24, 0x01	; 1
 4dc:	41 f0       	breq	.+16     	; 0x4ee <CALLBACK_USB_GetDescriptor+0x2c>
 4de:	81 30       	cpi	r24, 0x01	; 1
 4e0:	18 f0       	brcs	.+6      	; 0x4e8 <CALLBACK_USB_GetDescriptor+0x26>
 4e2:	82 30       	cpi	r24, 0x02	; 2
 4e4:	89 f4       	brne	.+34     	; 0x508 <CALLBACK_USB_GetDescriptor+0x46>
 4e6:	06 c0       	rjmp	.+12     	; 0x4f4 <CALLBACK_USB_GetDescriptor+0x32>
			{
				case 0x00:
					Address = &LanguageString;
					Size    = pgm_read_byte(&LanguageString.Header.Size);
 4e8:	ec ed       	ldi	r30, 0xDC	; 220
 4ea:	f0 e0       	ldi	r31, 0x00	; 0
 4ec:	05 c0       	rjmp	.+10     	; 0x4f8 <CALLBACK_USB_GetDescriptor+0x36>
					break;
				case 0x01:
					Address = &ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
 4ee:	e2 ec       	ldi	r30, 0xC2	; 194
 4f0:	f0 e0       	ldi	r31, 0x00	; 0
 4f2:	02 c0       	rjmp	.+4      	; 0x4f8 <CALLBACK_USB_GetDescriptor+0x36>
					break;
				case 0x02:
					Address = &ProductString;
					Size    = pgm_read_byte(&ProductString.Header.Size);
 4f4:	e8 e9       	ldi	r30, 0x98	; 152
 4f6:	f0 e0       	ldi	r31, 0x00	; 0
 4f8:	84 91       	lpm	r24, Z
 4fa:	90 e0       	ldi	r25, 0x00	; 0
					break;
 4fc:	09 c0       	rjmp	.+18     	; 0x510 <CALLBACK_USB_GetDescriptor+0x4e>

	switch (DescriptorType)
	{
		case DTYPE_Device:
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
 4fe:	82 e1       	ldi	r24, 0x12	; 18
 500:	90 e0       	ldi	r25, 0x00	; 0
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
	{
		case DTYPE_Device:
			Address = &DeviceDescriptor;
 502:	e0 e5       	ldi	r30, 0x50	; 80
 504:	f1 e0       	ldi	r31, 0x01	; 1
 506:	04 c0       	rjmp	.+8      	; 0x510 <CALLBACK_USB_GetDescriptor+0x4e>
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;
 508:	80 e0       	ldi	r24, 0x00	; 0
 50a:	90 e0       	ldi	r25, 0x00	; 0
                                    const void** const DescriptorAddress)
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
 50c:	e0 e0       	ldi	r30, 0x00	; 0
 50e:	f0 e0       	ldi	r31, 0x00	; 0
			}

			break;
	}

	*DescriptorAddress = Address;
 510:	da 01       	movw	r26, r20
 512:	11 96       	adiw	r26, 0x01	; 1
 514:	fc 93       	st	X, r31
 516:	ee 93       	st	-X, r30
	return Size;
}
 518:	08 95       	ret

0000051a <Endpoint_Write_Control_Stream_LE>:
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
 51a:	20 91 10 01 	lds	r18, 0x0110
 51e:	30 91 11 01 	lds	r19, 0x0111
 522:	26 17       	cp	r18, r22
 524:	37 07       	cpc	r19, r23
 526:	20 f4       	brcc	.+8      	; 0x530 <Endpoint_Write_Control_Stream_LE+0x16>
 528:	b9 01       	movw	r22, r18
 52a:	fc 01       	movw	r30, r24
 52c:	20 e0       	ldi	r18, 0x00	; 0
 52e:	37 c0       	rjmp	.+110    	; 0x59e <Endpoint_Write_Control_Stream_LE+0x84>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
 530:	61 15       	cp	r22, r1
 532:	71 05       	cpc	r23, r1
 534:	d1 f7       	brne	.-12     	; 0x52a <Endpoint_Write_Control_Stream_LE+0x10>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 536:	20 91 e8 00 	lds	r18, 0x00E8
 53a:	2e 77       	andi	r18, 0x7E	; 126
 53c:	20 93 e8 00 	sts	0x00E8, r18
 540:	f4 cf       	rjmp	.-24     	; 0x52a <Endpoint_Write_Control_Stream_LE+0x10>
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
 542:	80 91 09 01 	lds	r24, 0x0109

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
 546:	88 23       	and	r24, r24
 548:	09 f4       	brne	.+2      	; 0x54c <Endpoint_Write_Control_Stream_LE+0x32>
 54a:	3f c0       	rjmp	.+126    	; 0x5ca <Endpoint_Write_Control_Stream_LE+0xb0>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
 54c:	85 30       	cpi	r24, 0x05	; 5
 54e:	c9 f1       	breq	.+114    	; 0x5c2 <Endpoint_Write_Control_Stream_LE+0xa8>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 550:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
 554:	83 fd       	sbrc	r24, 3
 556:	37 c0       	rjmp	.+110    	; 0x5c6 <Endpoint_Write_Control_Stream_LE+0xac>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 558:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
 55c:	82 fd       	sbrc	r24, 2
 55e:	2b c0       	rjmp	.+86     	; 0x5b6 <Endpoint_Write_Control_Stream_LE+0x9c>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 560:	80 91 e8 00 	lds	r24, 0x00E8
		  break;

		if (Endpoint_IsINReady())
 564:	80 ff       	sbrs	r24, 0
 566:	1b c0       	rjmp	.+54     	; 0x59e <Endpoint_Write_Control_Stream_LE+0x84>
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
 568:	80 91 f2 00 	lds	r24, 0x00F2
 56c:	90 91 f3 00 	lds	r25, 0x00F3
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
 570:	06 c0       	rjmp	.+12     	; 0x57e <Endpoint_Write_Control_Stream_LE+0x64>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
 572:	21 91       	ld	r18, Z+
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
 574:	20 93 f1 00 	sts	0x00F1, r18
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
 578:	61 50       	subi	r22, 0x01	; 1
 57a:	70 40       	sbci	r23, 0x00	; 0
				BytesInEndpoint++;
 57c:	01 96       	adiw	r24, 0x01	; 1

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
 57e:	61 15       	cp	r22, r1
 580:	71 05       	cpc	r23, r1
 582:	19 f0       	breq	.+6      	; 0x58a <Endpoint_Write_Control_Stream_LE+0x70>
 584:	88 30       	cpi	r24, 0x08	; 8
 586:	91 05       	cpc	r25, r1
 588:	a0 f3       	brcs	.-24     	; 0x572 <Endpoint_Write_Control_Stream_LE+0x58>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
 58a:	21 e0       	ldi	r18, 0x01	; 1
 58c:	88 30       	cpi	r24, 0x08	; 8
 58e:	91 05       	cpc	r25, r1
 590:	09 f0       	breq	.+2      	; 0x594 <Endpoint_Write_Control_Stream_LE+0x7a>
 592:	20 e0       	ldi	r18, 0x00	; 0
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 594:	80 91 e8 00 	lds	r24, 0x00E8
 598:	8e 77       	andi	r24, 0x7E	; 126
 59a:	80 93 e8 00 	sts	0x00E8, r24
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
 59e:	61 15       	cp	r22, r1
 5a0:	71 05       	cpc	r23, r1
 5a2:	79 f6       	brne	.-98     	; 0x542 <Endpoint_Write_Control_Stream_LE+0x28>
 5a4:	22 23       	and	r18, r18
 5a6:	69 f6       	brne	.-102    	; 0x542 <Endpoint_Write_Control_Stream_LE+0x28>
 5a8:	06 c0       	rjmp	.+12     	; 0x5b6 <Endpoint_Write_Control_Stream_LE+0x9c>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
 5aa:	80 91 09 01 	lds	r24, 0x0109

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
 5ae:	88 23       	and	r24, r24
 5b0:	61 f0       	breq	.+24     	; 0x5ca <Endpoint_Write_Control_Stream_LE+0xb0>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
 5b2:	85 30       	cpi	r24, 0x05	; 5
 5b4:	61 f0       	breq	.+24     	; 0x5ce <Endpoint_Write_Control_Stream_LE+0xb4>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 5b6:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
 5ba:	82 ff       	sbrs	r24, 2
 5bc:	f6 cf       	rjmp	.-20     	; 0x5aa <Endpoint_Write_Control_Stream_LE+0x90>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
 5be:	80 e0       	ldi	r24, 0x00	; 0
 5c0:	08 95       	ret
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
 5c2:	83 e0       	ldi	r24, 0x03	; 3
 5c4:	08 95       	ret
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
 5c6:	81 e0       	ldi	r24, 0x01	; 1
 5c8:	08 95       	ret
	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
 5ca:	82 e0       	ldi	r24, 0x02	; 2
 5cc:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
 5ce:	83 e0       	ldi	r24, 0x03	; 3
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
 5d0:	08 95       	ret

000005d2 <Endpoint_Read_Control_Stream_LE>:
uint8_t TEMPLATE_FUNC_NAME (void* const Buffer,
                            uint16_t Length)
{
	uint8_t* DataStream = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));

	if (!(Length))
 5d2:	61 15       	cp	r22, r1
 5d4:	71 05       	cpc	r23, r1
 5d6:	29 f4       	brne	.+10     	; 0x5e2 <Endpoint_Read_Control_Stream_LE+0x10>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 5d8:	20 91 e8 00 	lds	r18, 0x00E8
 5dc:	2b 77       	andi	r18, 0x7B	; 123
 5de:	20 93 e8 00 	sts	0x00E8, r18

#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (void* const Buffer,
                            uint16_t Length)
{
 5e2:	38 2f       	mov	r19, r24
 5e4:	29 2f       	mov	r18, r25
 5e6:	26 c0       	rjmp	.+76     	; 0x634 <Endpoint_Read_Control_Stream_LE+0x62>
	if (!(Length))
	  Endpoint_ClearOUT();

	while (Length)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
 5e8:	80 91 09 01 	lds	r24, 0x0109

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
 5ec:	88 23       	and	r24, r24
 5ee:	b1 f1       	breq	.+108    	; 0x65c <Endpoint_Read_Control_Stream_LE+0x8a>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
 5f0:	85 30       	cpi	r24, 0x05	; 5
 5f2:	81 f1       	breq	.+96     	; 0x654 <Endpoint_Read_Control_Stream_LE+0x82>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 5f4:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
 5f8:	83 fd       	sbrc	r24, 3
 5fa:	2e c0       	rjmp	.+92     	; 0x658 <Endpoint_Read_Control_Stream_LE+0x86>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 5fc:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;

		if (Endpoint_IsOUTReceived())
 600:	82 ff       	sbrs	r24, 2
 602:	f2 cf       	rjmp	.-28     	; 0x5e8 <Endpoint_Read_Control_Stream_LE+0x16>
 604:	e3 2f       	mov	r30, r19
 606:	f2 2f       	mov	r31, r18
 608:	08 c0       	rjmp	.+16     	; 0x61a <Endpoint_Read_Control_Stream_LE+0x48>
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
 60a:	80 91 f1 00 	lds	r24, 0x00F1
		{
			while (Length && Endpoint_BytesInEndpoint())
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
 60e:	81 93       	st	Z+, r24
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
 610:	3e 2f       	mov	r19, r30
 612:	2f 2f       	mov	r18, r31
				Length--;
 614:	61 50       	subi	r22, 0x01	; 1
 616:	70 40       	sbci	r23, 0x00	; 0
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;

		if (Endpoint_IsOUTReceived())
		{
			while (Length && Endpoint_BytesInEndpoint())
 618:	41 f0       	breq	.+16     	; 0x62a <Endpoint_Read_Control_Stream_LE+0x58>
 61a:	3e 2f       	mov	r19, r30
 61c:	2f 2f       	mov	r18, r31
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
 61e:	80 91 f2 00 	lds	r24, 0x00F2
 622:	90 91 f3 00 	lds	r25, 0x00F3
 626:	00 97       	sbiw	r24, 0x00	; 0
 628:	81 f7       	brne	.-32     	; 0x60a <Endpoint_Read_Control_Stream_LE+0x38>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 62a:	80 91 e8 00 	lds	r24, 0x00E8
 62e:	8b 77       	andi	r24, 0x7B	; 123
 630:	80 93 e8 00 	sts	0x00E8, r24
	uint8_t* DataStream = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));

	if (!(Length))
	  Endpoint_ClearOUT();

	while (Length)
 634:	61 15       	cp	r22, r1
 636:	71 05       	cpc	r23, r1
 638:	b9 f6       	brne	.-82     	; 0x5e8 <Endpoint_Read_Control_Stream_LE+0x16>
 63a:	06 c0       	rjmp	.+12     	; 0x648 <Endpoint_Read_Control_Stream_LE+0x76>
		}
	}

	while (!(Endpoint_IsINReady()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
 63c:	80 91 09 01 	lds	r24, 0x0109

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
 640:	88 23       	and	r24, r24
 642:	61 f0       	breq	.+24     	; 0x65c <Endpoint_Read_Control_Stream_LE+0x8a>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
 644:	85 30       	cpi	r24, 0x05	; 5
 646:	61 f0       	breq	.+24     	; 0x660 <Endpoint_Read_Control_Stream_LE+0x8e>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 648:	80 91 e8 00 	lds	r24, 0x00E8

			Endpoint_ClearOUT();
		}
	}

	while (!(Endpoint_IsINReady()))
 64c:	80 ff       	sbrs	r24, 0
 64e:	f6 cf       	rjmp	.-20     	; 0x63c <Endpoint_Read_Control_Stream_LE+0x6a>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
 650:	80 e0       	ldi	r24, 0x00	; 0
 652:	08 95       	ret
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
 654:	83 e0       	ldi	r24, 0x03	; 3
 656:	08 95       	ret
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
 658:	81 e0       	ldi	r24, 0x01	; 1
 65a:	08 95       	ret
	while (!(Endpoint_IsINReady()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
 65c:	82 e0       	ldi	r24, 0x02	; 2
 65e:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
 660:	83 e0       	ldi	r24, 0x03	; 3
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
 662:	08 95       	ret

00000664 <Endpoint_Write_Control_PStream_LE>:
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
 664:	20 91 10 01 	lds	r18, 0x0110
 668:	30 91 11 01 	lds	r19, 0x0111
 66c:	26 17       	cp	r18, r22
 66e:	37 07       	cpc	r19, r23
 670:	20 f4       	brcc	.+8      	; 0x67a <Endpoint_Write_Control_PStream_LE+0x16>
 672:	b9 01       	movw	r22, r18
 674:	fc 01       	movw	r30, r24
 676:	20 e0       	ldi	r18, 0x00	; 0
 678:	38 c0       	rjmp	.+112    	; 0x6ea <Endpoint_Write_Control_PStream_LE+0x86>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
 67a:	61 15       	cp	r22, r1
 67c:	71 05       	cpc	r23, r1
 67e:	d1 f7       	brne	.-12     	; 0x674 <Endpoint_Write_Control_PStream_LE+0x10>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 680:	20 91 e8 00 	lds	r18, 0x00E8
 684:	2e 77       	andi	r18, 0x7E	; 126
 686:	20 93 e8 00 	sts	0x00E8, r18
 68a:	f4 cf       	rjmp	.-24     	; 0x674 <Endpoint_Write_Control_PStream_LE+0x10>
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
 68c:	80 91 09 01 	lds	r24, 0x0109

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
 690:	88 23       	and	r24, r24
 692:	09 f4       	brne	.+2      	; 0x696 <Endpoint_Write_Control_PStream_LE+0x32>
 694:	40 c0       	rjmp	.+128    	; 0x716 <Endpoint_Write_Control_PStream_LE+0xb2>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
 696:	85 30       	cpi	r24, 0x05	; 5
 698:	d1 f1       	breq	.+116    	; 0x70e <Endpoint_Write_Control_PStream_LE+0xaa>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 69a:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
 69e:	83 fd       	sbrc	r24, 3
 6a0:	38 c0       	rjmp	.+112    	; 0x712 <Endpoint_Write_Control_PStream_LE+0xae>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 6a2:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
 6a6:	82 fd       	sbrc	r24, 2
 6a8:	2c c0       	rjmp	.+88     	; 0x702 <Endpoint_Write_Control_PStream_LE+0x9e>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 6aa:	80 91 e8 00 	lds	r24, 0x00E8
		  break;

		if (Endpoint_IsINReady())
 6ae:	80 ff       	sbrs	r24, 0
 6b0:	1c c0       	rjmp	.+56     	; 0x6ea <Endpoint_Write_Control_PStream_LE+0x86>
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
 6b2:	80 91 f2 00 	lds	r24, 0x00F2
 6b6:	90 91 f3 00 	lds	r25, 0x00F3
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
 6ba:	07 c0       	rjmp	.+14     	; 0x6ca <Endpoint_Write_Control_PStream_LE+0x66>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
 6bc:	24 91       	lpm	r18, Z
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
 6be:	20 93 f1 00 	sts	0x00F1, r18
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
 6c2:	31 96       	adiw	r30, 0x01	; 1
				Length--;
 6c4:	61 50       	subi	r22, 0x01	; 1
 6c6:	70 40       	sbci	r23, 0x00	; 0
				BytesInEndpoint++;
 6c8:	01 96       	adiw	r24, 0x01	; 1

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
 6ca:	61 15       	cp	r22, r1
 6cc:	71 05       	cpc	r23, r1
 6ce:	19 f0       	breq	.+6      	; 0x6d6 <Endpoint_Write_Control_PStream_LE+0x72>
 6d0:	88 30       	cpi	r24, 0x08	; 8
 6d2:	91 05       	cpc	r25, r1
 6d4:	98 f3       	brcs	.-26     	; 0x6bc <Endpoint_Write_Control_PStream_LE+0x58>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
 6d6:	21 e0       	ldi	r18, 0x01	; 1
 6d8:	88 30       	cpi	r24, 0x08	; 8
 6da:	91 05       	cpc	r25, r1
 6dc:	09 f0       	breq	.+2      	; 0x6e0 <Endpoint_Write_Control_PStream_LE+0x7c>
 6de:	20 e0       	ldi	r18, 0x00	; 0
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 6e0:	80 91 e8 00 	lds	r24, 0x00E8
 6e4:	8e 77       	andi	r24, 0x7E	; 126
 6e6:	80 93 e8 00 	sts	0x00E8, r24
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
 6ea:	61 15       	cp	r22, r1
 6ec:	71 05       	cpc	r23, r1
 6ee:	71 f6       	brne	.-100    	; 0x68c <Endpoint_Write_Control_PStream_LE+0x28>
 6f0:	22 23       	and	r18, r18
 6f2:	61 f6       	brne	.-104    	; 0x68c <Endpoint_Write_Control_PStream_LE+0x28>
 6f4:	06 c0       	rjmp	.+12     	; 0x702 <Endpoint_Write_Control_PStream_LE+0x9e>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
 6f6:	80 91 09 01 	lds	r24, 0x0109

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
 6fa:	88 23       	and	r24, r24
 6fc:	61 f0       	breq	.+24     	; 0x716 <Endpoint_Write_Control_PStream_LE+0xb2>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
 6fe:	85 30       	cpi	r24, 0x05	; 5
 700:	61 f0       	breq	.+24     	; 0x71a <Endpoint_Write_Control_PStream_LE+0xb6>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 702:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
 706:	82 ff       	sbrs	r24, 2
 708:	f6 cf       	rjmp	.-20     	; 0x6f6 <Endpoint_Write_Control_PStream_LE+0x92>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
 70a:	80 e0       	ldi	r24, 0x00	; 0
 70c:	08 95       	ret
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
 70e:	83 e0       	ldi	r24, 0x03	; 3
 710:	08 95       	ret
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
 712:	81 e0       	ldi	r24, 0x01	; 1
 714:	08 95       	ret
	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
 716:	82 e0       	ldi	r24, 0x02	; 2
 718:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
 71a:	83 e0       	ldi	r24, 0x03	; 3
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
 71c:	08 95       	ret

0000071e <Endpoint_ConfigureEndpoint_Prv>:
	UECFG0X = UECFG0XData;
	UECFG1X = UECFG1XData;

	return Endpoint_IsConfigured();
#else
	for (uint8_t EPNum = Number; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
 71e:	98 2f       	mov	r25, r24
 720:	2a c0       	rjmp	.+84     	; 0x776 <Endpoint_ConfigureEndpoint_Prv+0x58>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 722:	90 93 e9 00 	sts	0x00E9, r25
		uint8_t UECFG1XTemp;
		uint8_t UEIENXTemp;

		Endpoint_SelectEndpoint(EPNum);

		if (EPNum == Number)
 726:	98 17       	cp	r25, r24
 728:	39 f0       	breq	.+14     	; 0x738 <Endpoint_ConfigureEndpoint_Prv+0x1a>
			UECFG1XTemp = UECFG1XData;
			UEIENXTemp  = 0;
		}
		else
		{
			UECFG0XTemp = UECFG0X;
 72a:	70 91 ec 00 	lds	r23, 0x00EC
			UECFG1XTemp = UECFG1X;
 72e:	20 91 ed 00 	lds	r18, 0x00ED
			UEIENXTemp  = UEIENX;
 732:	50 91 f0 00 	lds	r21, 0x00F0
 736:	03 c0       	rjmp	.+6      	; 0x73e <Endpoint_ConfigureEndpoint_Prv+0x20>
		Endpoint_SelectEndpoint(EPNum);

		if (EPNum == Number)
		{
			UECFG0XTemp = UECFG0XData;
			UECFG1XTemp = UECFG1XData;
 738:	24 2f       	mov	r18, r20

		Endpoint_SelectEndpoint(EPNum);

		if (EPNum == Number)
		{
			UECFG0XTemp = UECFG0XData;
 73a:	76 2f       	mov	r23, r22
			UECFG1XTemp = UECFG1XData;
			UEIENXTemp  = 0;
 73c:	50 e0       	ldi	r21, 0x00	; 0
			UECFG0XTemp = UECFG0X;
			UECFG1XTemp = UECFG1X;
			UEIENXTemp  = UEIENX;
		}

		if (!(UECFG1XTemp & (1 << ALLOC)))
 73e:	21 ff       	sbrs	r18, 1
 740:	19 c0       	rjmp	.+50     	; 0x774 <Endpoint_ConfigureEndpoint_Prv+0x56>
			 *  to and from a host.
			 */
			static inline void Endpoint_DisableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_DisableEndpoint(void)
			{
				UECONX &= ~(1 << EPEN);
 742:	30 91 eb 00 	lds	r19, 0x00EB
 746:	3e 7f       	andi	r19, 0xFE	; 254
 748:	30 93 eb 00 	sts	0x00EB, r19
		  continue;

		Endpoint_DisableEndpoint();
		UECFG1X &= ~(1 << ALLOC);
 74c:	30 91 ed 00 	lds	r19, 0x00ED
 750:	3d 7f       	andi	r19, 0xFD	; 253
 752:	30 93 ed 00 	sts	0x00ED, r19
			 *  \note Endpoints must first be configured properly via \ref Endpoint_ConfigureEndpoint().
			 */
			static inline void Endpoint_EnableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_EnableEndpoint(void)
			{
				UECONX |= (1 << EPEN);
 756:	30 91 eb 00 	lds	r19, 0x00EB
 75a:	31 60       	ori	r19, 0x01	; 1
 75c:	30 93 eb 00 	sts	0x00EB, r19

		Endpoint_EnableEndpoint();
		UECFG0X = UECFG0XTemp;
 760:	70 93 ec 00 	sts	0x00EC, r23
		UECFG1X = UECFG1XTemp;
 764:	20 93 ed 00 	sts	0x00ED, r18
		UEIENX  = UEIENXTemp;
 768:	50 93 f0 00 	sts	0x00F0, r21
			 *  \return Boolean \c true if the currently selected endpoint has been configured, \c false otherwise.
			 */
			static inline bool Endpoint_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsConfigured(void)
			{
				return ((UESTA0X & (1 << CFGOK)) ? true : false);
 76c:	20 91 ee 00 	lds	r18, 0x00EE

		if (!(Endpoint_IsConfigured()))
 770:	27 ff       	sbrs	r18, 7
 772:	08 c0       	rjmp	.+16     	; 0x784 <Endpoint_ConfigureEndpoint_Prv+0x66>
	UECFG0X = UECFG0XData;
	UECFG1X = UECFG1XData;

	return Endpoint_IsConfigured();
#else
	for (uint8_t EPNum = Number; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
 774:	9f 5f       	subi	r25, 0xFF	; 255
 776:	97 30       	cpi	r25, 0x07	; 7
 778:	a0 f2       	brcs	.-88     	; 0x722 <Endpoint_ConfigureEndpoint_Prv+0x4>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 77a:	8f 70       	andi	r24, 0x0F	; 15
 77c:	80 93 e9 00 	sts	0x00E9, r24
		if (!(Endpoint_IsConfigured()))
		  return false;
	}

	Endpoint_SelectEndpoint(Number);
	return true;
 780:	81 e0       	ldi	r24, 0x01	; 1
 782:	08 95       	ret
		UECFG0X = UECFG0XTemp;
		UECFG1X = UECFG1XTemp;
		UEIENX  = UEIENXTemp;

		if (!(Endpoint_IsConfigured()))
		  return false;
 784:	80 e0       	ldi	r24, 0x00	; 0
	}

	Endpoint_SelectEndpoint(Number);
	return true;
#endif
}
 786:	08 95       	ret

00000788 <Endpoint_ClearStatusStage>:
	}
}

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
 788:	80 91 0a 01 	lds	r24, 0x010A
 78c:	87 ff       	sbrs	r24, 7
 78e:	13 c0       	rjmp	.+38     	; 0x7b6 <Endpoint_ClearStatusStage+0x2e>
 790:	04 c0       	rjmp	.+8      	; 0x79a <Endpoint_ClearStatusStage+0x12>
	{
		while (!(Endpoint_IsOUTReceived()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
 792:	80 91 09 01 	lds	r24, 0x0109
 796:	88 23       	and	r24, r24
 798:	b9 f0       	breq	.+46     	; 0x7c8 <Endpoint_ClearStatusStage+0x40>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 79a:	80 91 e8 00 	lds	r24, 0x00E8

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
	{
		while (!(Endpoint_IsOUTReceived()))
 79e:	82 ff       	sbrs	r24, 2
 7a0:	f8 cf       	rjmp	.-16     	; 0x792 <Endpoint_ClearStatusStage+0xa>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 7a2:	80 91 e8 00 	lds	r24, 0x00E8
 7a6:	8b 77       	andi	r24, 0x7B	; 123
 7a8:	80 93 e8 00 	sts	0x00E8, r24
 7ac:	08 95       	ret
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
 7ae:	80 91 09 01 	lds	r24, 0x0109
 7b2:	88 23       	and	r24, r24
 7b4:	49 f0       	breq	.+18     	; 0x7c8 <Endpoint_ClearStatusStage+0x40>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 7b6:	80 91 e8 00 	lds	r24, 0x00E8

		Endpoint_ClearOUT();
	}
	else
	{
		while (!(Endpoint_IsINReady()))
 7ba:	80 ff       	sbrs	r24, 0
 7bc:	f8 cf       	rjmp	.-16     	; 0x7ae <Endpoint_ClearStatusStage+0x26>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 7be:	80 91 e8 00 	lds	r24, 0x00E8
 7c2:	8e 77       	andi	r24, 0x7E	; 126
 7c4:	80 93 e8 00 	sts	0x00E8, r24
 7c8:	08 95       	ret

000007ca <USB_ResetInterface>:

	USB_IsInitialized = false;
}

void USB_ResetInterface(void)
{
 7ca:	0f 93       	push	r16
 7cc:	1f 93       	push	r17
 7ce:	cf 93       	push	r28
 7d0:	df 93       	push	r29
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
 7d2:	4e d0       	rcall	.+156    	; 0x870 <USB_INT_DisableAllInterrupts>
 7d4:	55 d0       	rcall	.+170    	; 0x880 <USB_INT_ClearAllInterrupts>
	USB_INT_ClearAllInterrupts();
 7d6:	c8 ed       	ldi	r28, 0xD8	; 216
 7d8:	d0 e0       	ldi	r29, 0x00	; 0
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
 7da:	88 81       	ld	r24, Y
 7dc:	8f 77       	andi	r24, 0x7F	; 127
 7de:	88 83       	st	Y, r24
 7e0:	88 81       	ld	r24, Y
 7e2:	80 68       	ori	r24, 0x80	; 128
				USBCON |=  (1 << USBE);
 7e4:	88 83       	st	Y, r24
 7e6:	88 81       	ld	r24, Y
 7e8:	8f 7d       	andi	r24, 0xDF	; 223
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
 7ea:	88 83       	st	Y, r24
 7ec:	e7 ed       	ldi	r30, 0xD7	; 215
 7ee:	f0 e0       	ldi	r31, 0x00	; 0

	if (USB_CurrentMode == USB_MODE_Device)
	{
		#if defined(USB_CAN_BE_DEVICE)
		#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
		UHWCON |=  (1 << UIMOD);
 7f0:	80 81       	ld	r24, Z
 7f2:	80 68       	ori	r24, 0x80	; 128
 7f4:	80 83       	st	Z, r24
 7f6:	19 bc       	out	0x29, r1	; 41
 7f8:	10 92 09 01 	sts	0x0109, r1
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState                 = DEVICE_STATE_Unattached;
 7fc:	10 92 05 01 	sts	0x0105, r1
	USB_Device_ConfigurationNumber  = 0;
 800:	10 92 07 01 	sts	0x0107, r1

	#if !defined(NO_DEVICE_REMOTE_WAKEUP)
	USB_Device_RemoteWakeupEnabled  = false;
 804:	10 92 06 01 	sts	0x0106, r1
	#endif

	#if !defined(NO_DEVICE_SELF_POWER)
	USB_Device_CurrentlySelfPowered = false;
 808:	00 ee       	ldi	r16, 0xE0	; 224
 80a:	10 e0       	ldi	r17, 0x00	; 0
			}

			static inline void USB_Device_SetFullSpeed(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetFullSpeed(void)
			{
				UDCON &= ~(1 << LSM);
 80c:	f8 01       	movw	r30, r16
 80e:	80 81       	ld	r24, Z
 810:	8b 7f       	andi	r24, 0xFB	; 251
 812:	80 83       	st	Z, r24
 814:	88 81       	ld	r24, Y
 816:	81 60       	ori	r24, 0x01	; 1
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBCON |= (1 << VBUSTE);
 818:	88 83       	st	Y, r24
 81a:	80 e0       	ldi	r24, 0x00	; 0
 81c:	60 e0       	ldi	r22, 0x00	; 0
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
 81e:	42 e0       	ldi	r20, 0x02	; 2
 820:	7e df       	rcall	.-260    	; 0x71e <Endpoint_ConfigureEndpoint_Prv>
 822:	e1 ee       	ldi	r30, 0xE1	; 225
 824:	f0 e0       	ldi	r31, 0x00	; 0
 826:	80 81       	ld	r24, Z
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
 828:	8e 7f       	andi	r24, 0xFE	; 254
 82a:	80 83       	st	Z, r24
 82c:	e2 ee       	ldi	r30, 0xE2	; 226
 82e:	f0 e0       	ldi	r31, 0x00	; 0
 830:	80 81       	ld	r24, Z
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
 832:	81 60       	ori	r24, 0x01	; 1
 834:	80 83       	st	Z, r24
 836:	80 81       	ld	r24, Z
 838:	88 60       	ori	r24, 0x08	; 8
 83a:	80 83       	st	Z, r24
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
 83c:	f8 01       	movw	r30, r16
 83e:	80 81       	ld	r24, Z
 840:	8e 7f       	andi	r24, 0xFE	; 254
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
 842:	80 83       	st	Z, r24
 844:	88 81       	ld	r24, Y
 846:	80 61       	ori	r24, 0x10	; 16
 848:	88 83       	st	Y, r24

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON |=  (1 << OTGPADE);
 84a:	df 91       	pop	r29
 84c:	cf 91       	pop	r28
 84e:	1f 91       	pop	r17
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
 850:	0f 91       	pop	r16
 852:	08 95       	ret

00000854 <USB_Init>:
 854:	e8 ed       	ldi	r30, 0xD8	; 216
 856:	f0 e0       	ldi	r31, 0x00	; 0
 858:	80 81       	ld	r24, Z
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON &= ~(1 << OTGPADE);
 85a:	8f 7e       	andi	r24, 0xEF	; 239
 85c:	80 83       	st	Z, r24

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON |=  (1 << UVREGE);
 85e:	e7 ed       	ldi	r30, 0xD7	; 215
 860:	f0 e0       	ldi	r31, 0x00	; 0
 862:	80 81       	ld	r24, Z
 864:	81 60       	ori	r24, 0x01	; 1
 866:	80 83       	st	Z, r24
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
 868:	81 e0       	ldi	r24, 0x01	; 1
 86a:	80 93 08 01 	sts	0x0108, r24

	USB_ResetInterface();
 86e:	ad cf       	rjmp	.-166    	; 0x7ca <USB_ResetInterface>

00000870 <USB_INT_DisableAllInterrupts>:
#include "../USBInterrupt.h"

void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
 870:	e8 ed       	ldi	r30, 0xD8	; 216
 872:	f0 e0       	ldi	r31, 0x00	; 0
 874:	80 81       	ld	r24, Z
 876:	8c 7f       	andi	r24, 0xFC	; 252
 878:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
 87a:	10 92 e2 00 	sts	0x00E2, r1
	#endif
}
 87e:	08 95       	ret

00000880 <USB_INT_ClearAllInterrupts>:

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
 880:	10 92 da 00 	sts	0x00DA, r1
	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
 884:	10 92 e1 00 	sts	0x00E1, r1
	#endif
}
 888:	08 95       	ret

0000088a <__vector_10>:

ISR(USB_GEN_vect, ISR_BLOCK)
{
 88a:	1f 92       	push	r1
 88c:	0f 92       	push	r0
 88e:	0f b6       	in	r0, 0x3f	; 63
 890:	0f 92       	push	r0
 892:	0b b6       	in	r0, 0x3b	; 59
 894:	0f 92       	push	r0
 896:	11 24       	eor	r1, r1
 898:	2f 93       	push	r18
 89a:	3f 93       	push	r19
 89c:	4f 93       	push	r20
 89e:	5f 93       	push	r21
 8a0:	6f 93       	push	r22
 8a2:	7f 93       	push	r23
 8a4:	8f 93       	push	r24
 8a6:	9f 93       	push	r25
 8a8:	af 93       	push	r26
 8aa:	bf 93       	push	r27
 8ac:	ef 93       	push	r30
 8ae:	ff 93       	push	r31
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
					case USB_INT_SOFI:
						return (UDINT  & (1 << SOFI));
 8b0:	80 91 e1 00 	lds	r24, 0x00E1
	#if defined(USB_CAN_BE_DEVICE)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
 8b4:	82 ff       	sbrs	r24, 2
 8b6:	0a c0       	rjmp	.+20     	; 0x8cc <__vector_10+0x42>
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
					case USB_INT_SOFI:
						return (UDIEN  & (1 << SOFE));
 8b8:	80 91 e2 00 	lds	r24, 0x00E2
 8bc:	82 ff       	sbrs	r24, 2
 8be:	06 c0       	rjmp	.+12     	; 0x8cc <__vector_10+0x42>
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
						break;
					case USB_INT_SOFI:
						UDINT  &= ~(1 << SOFI);
 8c0:	80 91 e1 00 	lds	r24, 0x00E1
 8c4:	8b 7f       	andi	r24, 0xFB	; 251
 8c6:	80 93 e1 00 	sts	0x00E1, r24
	{
		USB_INT_Clear(USB_INT_SOFI);

		EVENT_USB_Device_StartOfFrame();
 8ca:	0d d2       	rcall	.+1050   	; 0xce6 <USB_Event_Stub>
 8cc:	80 91 da 00 	lds	r24, 0x00DA
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBINT & (1 << VBUSTI));
 8d0:	80 ff       	sbrs	r24, 0
	}
	#endif

	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	if (USB_INT_HasOccurred(USB_INT_VBUSTI) && USB_INT_IsEnabled(USB_INT_VBUSTI))
 8d2:	1d c0       	rjmp	.+58     	; 0x90e <__vector_10+0x84>
 8d4:	80 91 d8 00 	lds	r24, 0x00D8
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBCON & (1 << VBUSTE));
 8d8:	80 ff       	sbrs	r24, 0
 8da:	19 c0       	rjmp	.+50     	; 0x90e <__vector_10+0x84>
 8dc:	80 91 da 00 	lds	r24, 0x00DA
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBINT &= ~(1 << VBUSTI);
 8e0:	8e 7f       	andi	r24, 0xFE	; 254
 8e2:	80 93 da 00 	sts	0x00DA, r24
 8e6:	80 91 d9 00 	lds	r24, 0x00D9
				 *  \return Boolean \c true if the VBUS line is currently detecting power from a host, \c false otherwise.
				 */
				static inline bool USB_VBUS_GetStatus(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
				static inline bool USB_VBUS_GetStatus(void)
				{
					return ((USBSTA & (1 << VBUS)) ? true : false);
 8ea:	80 ff       	sbrs	r24, 0
	{
		USB_INT_Clear(USB_INT_VBUSTI);

		if (USB_VBUS_GetStatus())
 8ec:	0c c0       	rjmp	.+24     	; 0x906 <__vector_10+0x7c>
 8ee:	8c e0       	ldi	r24, 0x0C	; 12

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
 8f0:	89 bd       	out	0x29, r24	; 41
 8f2:	8e e0       	ldi	r24, 0x0E	; 14
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
 8f4:	89 bd       	out	0x29, r24	; 41
 8f6:	09 b4       	in	r0, 0x29	; 41
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			{
				USB_PLL_On();
				while (!(USB_PLL_IsReady()));
 8f8:	00 fe       	sbrs	r0, 0
 8fa:	fd cf       	rjmp	.-6      	; 0x8f6 <__vector_10+0x6c>
 8fc:	81 e0       	ldi	r24, 0x01	; 1
			}

			USB_DeviceState = DEVICE_STATE_Powered;
 8fe:	80 93 09 01 	sts	0x0109, r24
 902:	74 dc       	rcall	.-1816   	; 0x1ec <EVENT_USB_Device_Connect>
			EVENT_USB_Device_Connect();
 904:	04 c0       	rjmp	.+8      	; 0x90e <__vector_10+0x84>
 906:	19 bc       	out	0x29, r1	; 41
 908:	10 92 09 01 	sts	0x0109, r1
		else
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			  USB_PLL_Off();

			USB_DeviceState = DEVICE_STATE_Unattached;
 90c:	91 dc       	rcall	.-1758   	; 0x230 <EVENT_USB_Device_Disconnect>
 90e:	80 91 e1 00 	lds	r24, 0x00E1
			EVENT_USB_Device_Disconnect();
 912:	80 ff       	sbrs	r24, 0
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
 914:	18 c0       	rjmp	.+48     	; 0x946 <__vector_10+0xbc>
 916:	80 91 e2 00 	lds	r24, 0x00E2
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
 91a:	80 ff       	sbrs	r24, 0
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
 91c:	14 c0       	rjmp	.+40     	; 0x946 <__vector_10+0xbc>
 91e:	80 91 e2 00 	lds	r24, 0x00E2
 922:	8e 7f       	andi	r24, 0xFE	; 254
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
 924:	80 93 e2 00 	sts	0x00E2, r24
 928:	80 91 e2 00 	lds	r24, 0x00E2
 92c:	80 61       	ori	r24, 0x10	; 16
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
 92e:	80 93 e2 00 	sts	0x00E2, r24
 932:	80 91 d8 00 	lds	r24, 0x00D8
 936:	80 62       	ori	r24, 0x20	; 32
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON |=  (1 << FRZCLK);
 938:	80 93 d8 00 	sts	0x00D8, r24
 93c:	19 bc       	out	0x29, r1	; 41
 93e:	85 e0       	ldi	r24, 0x05	; 5
 940:	80 93 09 01 	sts	0x0109, r24

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
		EVENT_USB_Device_Disconnect();
		#else
		USB_DeviceState = DEVICE_STATE_Suspended;
 944:	d0 d1       	rcall	.+928    	; 0xce6 <USB_Event_Stub>
 946:	80 91 e1 00 	lds	r24, 0x00E1
		EVENT_USB_Device_Suspend();
 94a:	84 ff       	sbrs	r24, 4
 94c:	2d c0       	rjmp	.+90     	; 0x9a8 <__vector_10+0x11e>
					case USB_INT_IDTI:
						return (USBINT & (1 << IDTI));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
 94e:	80 91 e2 00 	lds	r24, 0x00E2
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
 952:	84 ff       	sbrs	r24, 4
 954:	29 c0       	rjmp	.+82     	; 0x9a8 <__vector_10+0x11e>
					case USB_INT_IDTI:
						return (USBCON & (1 << IDTE));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
 956:	8c e0       	ldi	r24, 0x0C	; 12
 958:	89 bd       	out	0x29, r24	; 41
 95a:	8e e0       	ldi	r24, 0x0E	; 14
 95c:	89 bd       	out	0x29, r24	; 41

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
 95e:	09 b4       	in	r0, 0x29	; 41
 960:	00 fe       	sbrs	r0, 0
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
 962:	fd cf       	rjmp	.-6      	; 0x95e <__vector_10+0xd4>
 964:	80 91 d8 00 	lds	r24, 0x00D8
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
 968:	8f 7d       	andi	r24, 0xDF	; 223
 96a:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
 96e:	80 91 e1 00 	lds	r24, 0x00E1
 972:	8f 7e       	andi	r24, 0xEF	; 239
 974:	80 93 e1 00 	sts	0x00E1, r24
						USBINT &= ~(1 << IDTI);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
 978:	80 91 e2 00 	lds	r24, 0x00E2
 97c:	8f 7e       	andi	r24, 0xEF	; 239
 97e:	80 93 e2 00 	sts	0x00E2, r24
						USBCON &= ~(1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
 982:	80 91 e2 00 	lds	r24, 0x00E2
 986:	81 60       	ori	r24, 0x01	; 1
 988:	80 93 e2 00 	sts	0x00E2, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
 98c:	80 91 05 01 	lds	r24, 0x0105
 990:	88 23       	and	r24, r24
 992:	21 f4       	brne	.+8      	; 0x99c <__vector_10+0x112>
		USB_INT_Clear(USB_INT_WAKEUPI);

		USB_INT_Disable(USB_INT_WAKEUPI);
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_Device_ConfigurationNumber)
 994:	80 91 e3 00 	lds	r24, 0x00E3
 998:	87 ff       	sbrs	r24, 7
 99a:	02 c0       	rjmp	.+4      	; 0x9a0 <__vector_10+0x116>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
 99c:	84 e0       	ldi	r24, 0x04	; 4
 99e:	01 c0       	rjmp	.+2      	; 0x9a2 <__vector_10+0x118>
		  USB_DeviceState = DEVICE_STATE_Configured;
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
 9a0:	81 e0       	ldi	r24, 0x01	; 1
 9a2:	80 93 09 01 	sts	0x0109, r24
 9a6:	9f d1       	rcall	.+830    	; 0xce6 <USB_Event_Stub>
 9a8:	80 91 e1 00 	lds	r24, 0x00E1
 9ac:	83 ff       	sbrs	r24, 3

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
		#else
		EVENT_USB_Device_WakeUp();
 9ae:	22 c0       	rjmp	.+68     	; 0x9f4 <__vector_10+0x16a>
 9b0:	80 91 e2 00 	lds	r24, 0x00E2
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
 9b4:	83 ff       	sbrs	r24, 3
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
 9b6:	1e c0       	rjmp	.+60     	; 0x9f4 <__vector_10+0x16a>
 9b8:	80 91 e1 00 	lds	r24, 0x00E1
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
 9bc:	87 7f       	andi	r24, 0xF7	; 247
 9be:	80 93 e1 00 	sts	0x00E1, r24
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
 9c2:	82 e0       	ldi	r24, 0x02	; 2
 9c4:	80 93 09 01 	sts	0x0109, r24
 9c8:	10 92 05 01 	sts	0x0105, r1
	{
		USB_INT_Clear(USB_INT_EORSTI);

		USB_DeviceState                = DEVICE_STATE_Default;
 9cc:	80 91 e1 00 	lds	r24, 0x00E1
 9d0:	8e 7f       	andi	r24, 0xFE	; 254
		USB_Device_ConfigurationNumber = 0;
 9d2:	80 93 e1 00 	sts	0x00E1, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
 9d6:	80 91 e2 00 	lds	r24, 0x00E2
 9da:	8e 7f       	andi	r24, 0xFE	; 254
 9dc:	80 93 e2 00 	sts	0x00E2, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
 9e0:	80 91 e2 00 	lds	r24, 0x00E2
 9e4:	80 61       	ori	r24, 0x10	; 16
 9e6:	80 93 e2 00 	sts	0x00E2, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
 9ea:	80 e0       	ldi	r24, 0x00	; 0
 9ec:	60 e0       	ldi	r22, 0x00	; 0
 9ee:	42 e0       	ldi	r20, 0x02	; 2
 9f0:	96 de       	rcall	.-724    	; 0x71e <Endpoint_ConfigureEndpoint_Prv>
 9f2:	79 d1       	rcall	.+754    	; 0xce6 <USB_Event_Stub>
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
 9f4:	ff 91       	pop	r31
 9f6:	ef 91       	pop	r30
 9f8:	bf 91       	pop	r27
 9fa:	af 91       	pop	r26
 9fc:	9f 91       	pop	r25

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
 9fe:	8f 91       	pop	r24
 a00:	7f 91       	pop	r23
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
 a02:	6f 91       	pop	r22
 a04:	5f 91       	pop	r21
 a06:	4f 91       	pop	r20
 a08:	3f 91       	pop	r19
 a0a:	2f 91       	pop	r18
 a0c:	0f 90       	pop	r0
 a0e:	0b be       	out	0x3b, r0	; 59
 a10:	0f 90       	pop	r0
 a12:	0f be       	out	0x3f, r0	; 63
 a14:	0f 90       	pop	r0
 a16:	1f 90       	pop	r1
 a18:	18 95       	reti

00000a1a <USB_Device_ProcessControlRequest>:
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_Device_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
 a1a:	1f 93       	push	r17
 a1c:	cf 93       	push	r28
 a1e:	df 93       	push	r29
 a20:	cd b7       	in	r28, 0x3d	; 61
 a22:	de b7       	in	r29, 0x3e	; 62
 a24:	ac 97       	sbiw	r28, 0x2c	; 44
 a26:	0f b6       	in	r0, 0x3f	; 63
 a28:	f8 94       	cli
 a2a:	de bf       	out	0x3e, r29	; 62
 a2c:	0f be       	out	0x3f, r0	; 63
 a2e:	cd bf       	out	0x3d, r28	; 61
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
 a30:	80 e0       	ldi	r24, 0x00	; 0
	USB_ControlRequest.bRequest      = Endpoint_Read_8();
	USB_ControlRequest.wValue        = Endpoint_Read_16_LE();
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;
 a32:	ea e0       	ldi	r30, 0x0A	; 10
 a34:	f1 e0       	ldi	r31, 0x01	; 1
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
 a36:	90 91 f1 00 	lds	r25, 0x00F1

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_8();
 a3a:	91 93       	st	Z+, r25
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
 a3c:	8f 5f       	subi	r24, 0xFF	; 255
 a3e:	88 30       	cpi	r24, 0x08	; 8
 a40:	d1 f7       	brne	.-12     	; 0xa36 <USB_Device_ProcessControlRequest+0x1c>
	  *(RequestHeader++) = Endpoint_Read_8();
	#endif

	EVENT_USB_Device_ControlRequest();
 a42:	0a dc       	rcall	.-2028   	; 0x258 <EVENT_USB_Device_ControlRequest>
 a44:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 a48:	83 ff       	sbrs	r24, 3

	if (Endpoint_IsSETUPReceived())
 a4a:	35 c1       	rjmp	.+618    	; 0xcb6 <USB_Device_ProcessControlRequest+0x29c>
 a4c:	80 91 0a 01 	lds	r24, 0x010A
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
 a50:	20 91 0b 01 	lds	r18, 0x010B

		switch (USB_ControlRequest.bRequest)
 a54:	25 30       	cpi	r18, 0x05	; 5
 a56:	09 f4       	brne	.+2      	; 0xa5a <USB_Device_ProcessControlRequest+0x40>
 a58:	84 c0       	rjmp	.+264    	; 0xb62 <USB_Device_ProcessControlRequest+0x148>
 a5a:	26 30       	cpi	r18, 0x06	; 6
 a5c:	40 f4       	brcc	.+16     	; 0xa6e <USB_Device_ProcessControlRequest+0x54>
 a5e:	21 30       	cpi	r18, 0x01	; 1
 a60:	a1 f1       	breq	.+104    	; 0xaca <USB_Device_ProcessControlRequest+0xb0>
 a62:	21 30       	cpi	r18, 0x01	; 1
 a64:	70 f0       	brcs	.+28     	; 0xa82 <USB_Device_ProcessControlRequest+0x68>
 a66:	23 30       	cpi	r18, 0x03	; 3
 a68:	09 f0       	breq	.+2      	; 0xa6c <USB_Device_ProcessControlRequest+0x52>
 a6a:	25 c1       	rjmp	.+586    	; 0xcb6 <USB_Device_ProcessControlRequest+0x29c>
 a6c:	2e c0       	rjmp	.+92     	; 0xaca <USB_Device_ProcessControlRequest+0xb0>
 a6e:	28 30       	cpi	r18, 0x08	; 8
 a70:	09 f4       	brne	.+2      	; 0xa74 <USB_Device_ProcessControlRequest+0x5a>
 a72:	f3 c0       	rjmp	.+486    	; 0xc5a <USB_Device_ProcessControlRequest+0x240>
 a74:	29 30       	cpi	r18, 0x09	; 9
 a76:	09 f4       	brne	.+2      	; 0xa7a <USB_Device_ProcessControlRequest+0x60>
 a78:	02 c1       	rjmp	.+516    	; 0xc7e <USB_Device_ProcessControlRequest+0x264>
 a7a:	26 30       	cpi	r18, 0x06	; 6
 a7c:	09 f0       	breq	.+2      	; 0xa80 <USB_Device_ProcessControlRequest+0x66>
 a7e:	1b c1       	rjmp	.+566    	; 0xcb6 <USB_Device_ProcessControlRequest+0x29c>
 a80:	93 c0       	rjmp	.+294    	; 0xba8 <USB_Device_ProcessControlRequest+0x18e>
 a82:	80 38       	cpi	r24, 0x80	; 128
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
 a84:	21 f0       	breq	.+8      	; 0xa8e <USB_Device_ProcessControlRequest+0x74>
 a86:	82 38       	cpi	r24, 0x82	; 130
 a88:	09 f0       	breq	.+2      	; 0xa8c <USB_Device_ProcessControlRequest+0x72>
 a8a:	15 c1       	rjmp	.+554    	; 0xcb6 <USB_Device_ProcessControlRequest+0x29c>
 a8c:	08 c0       	rjmp	.+16     	; 0xa9e <USB_Device_ProcessControlRequest+0x84>
 a8e:	80 91 06 01 	lds	r24, 0x0106
	Endpoint_ClearOUT();
}

static void USB_Device_GetStatus(void)
{
	uint8_t CurrentStatus = 0;
 a92:	90 91 07 01 	lds	r25, 0x0107
			if (USB_Device_CurrentlySelfPowered)
			  CurrentStatus |= FEATURE_SELFPOWERED_ENABLED;
			#endif

			#if !defined(NO_DEVICE_REMOTE_WAKEUP)
			if (USB_Device_RemoteWakeupEnabled)
 a96:	99 23       	and	r25, r25
 a98:	71 f0       	breq	.+28     	; 0xab6 <USB_Device_ProcessControlRequest+0x9c>
 a9a:	82 60       	ori	r24, 0x02	; 2
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
 a9c:	0c c0       	rjmp	.+24     	; 0xab6 <USB_Device_ProcessControlRequest+0x9c>
 a9e:	80 91 0e 01 	lds	r24, 0x010E
			#endif
			break;
		case (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_ENDPOINT):
			#if !defined(CONTROL_ONLY_DEVICE)
			Endpoint_SelectEndpoint((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
 aa2:	8f 70       	andi	r24, 0x0F	; 15
 aa4:	80 93 e9 00 	sts	0x00E9, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 aa8:	90 91 eb 00 	lds	r25, 0x00EB
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
 aac:	81 e0       	ldi	r24, 0x01	; 1

			CurrentStatus = Endpoint_IsStalled();
 aae:	95 ff       	sbrs	r25, 5
 ab0:	80 e0       	ldi	r24, 0x00	; 0
 ab2:	10 92 e9 00 	sts	0x00E9, r1
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 ab6:	90 91 e8 00 	lds	r25, 0x00E8
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 aba:	97 7f       	andi	r25, 0xF7	; 247
 abc:	90 93 e8 00 	sts	0x00E8, r25
 ac0:	80 93 f1 00 	sts	0x00F1, r24
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
 ac4:	10 92 f1 00 	sts	0x00F1, r1
				UEDATX = (Data >> 8);
 ac8:	d3 c0       	rjmp	.+422    	; 0xc70 <USB_Device_ProcessControlRequest+0x256>
 aca:	88 23       	and	r24, r24
				}

				break;
			case REQ_ClearFeature:
			case REQ_SetFeature:
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
 acc:	19 f0       	breq	.+6      	; 0xad4 <USB_Device_ProcessControlRequest+0xba>
 ace:	82 30       	cpi	r24, 0x02	; 2
 ad0:	09 f0       	breq	.+2      	; 0xad4 <USB_Device_ProcessControlRequest+0xba>
 ad2:	f1 c0       	rjmp	.+482    	; 0xcb6 <USB_Device_ProcessControlRequest+0x29c>
 ad4:	90 e0       	ldi	r25, 0x00	; 0
	Endpoint_ClearStatusStage();
}

static void USB_Device_ClearSetFeature(void)
{
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
 ad6:	8f 71       	andi	r24, 0x1F	; 31
 ad8:	90 70       	andi	r25, 0x00	; 0
 ada:	00 97       	sbiw	r24, 0x00	; 0
 adc:	29 f0       	breq	.+10     	; 0xae8 <USB_Device_ProcessControlRequest+0xce>
 ade:	82 30       	cpi	r24, 0x02	; 2
 ae0:	91 05       	cpc	r25, r1
 ae2:	09 f0       	breq	.+2      	; 0xae6 <USB_Device_ProcessControlRequest+0xcc>
 ae4:	e8 c0       	rjmp	.+464    	; 0xcb6 <USB_Device_ProcessControlRequest+0x29c>
 ae6:	0b c0       	rjmp	.+22     	; 0xafe <USB_Device_ProcessControlRequest+0xe4>
 ae8:	80 91 0c 01 	lds	r24, 0x010C
	{
		#if !defined(NO_DEVICE_REMOTE_WAKEUP)
		case REQREC_DEVICE:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
 aec:	81 30       	cpi	r24, 0x01	; 1
 aee:	09 f0       	breq	.+2      	; 0xaf2 <USB_Device_ProcessControlRequest+0xd8>
 af0:	e2 c0       	rjmp	.+452    	; 0xcb6 <USB_Device_ProcessControlRequest+0x29c>
 af2:	23 30       	cpi	r18, 0x03	; 3
			  USB_Device_RemoteWakeupEnabled = (USB_ControlRequest.bRequest == REQ_SetFeature);
 af4:	09 f0       	breq	.+2      	; 0xaf8 <USB_Device_ProcessControlRequest+0xde>
 af6:	80 e0       	ldi	r24, 0x00	; 0
 af8:	80 93 07 01 	sts	0x0107, r24
 afc:	2c c0       	rjmp	.+88     	; 0xb56 <USB_Device_ProcessControlRequest+0x13c>
 afe:	80 91 0c 01 	lds	r24, 0x010C

			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
 b02:	88 23       	and	r24, r24
 b04:	41 f5       	brne	.+80     	; 0xb56 <USB_Device_ProcessControlRequest+0x13c>
 b06:	20 91 0e 01 	lds	r18, 0x010E
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
 b0a:	2f 70       	andi	r18, 0x0F	; 15
 b0c:	09 f4       	brne	.+2      	; 0xb10 <USB_Device_ProcessControlRequest+0xf6>

				if (EndpointIndex == ENDPOINT_CONTROLEP)
 b0e:	d3 c0       	rjmp	.+422    	; 0xcb6 <USB_Device_ProcessControlRequest+0x29c>
 b10:	20 93 e9 00 	sts	0x00E9, r18
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 b14:	80 91 eb 00 	lds	r24, 0x00EB
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
 b18:	80 ff       	sbrs	r24, 0
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
 b1a:	1d c0       	rjmp	.+58     	; 0xb56 <USB_Device_ProcessControlRequest+0x13c>
 b1c:	80 91 0b 01 	lds	r24, 0x010B
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
 b20:	83 30       	cpi	r24, 0x03	; 3
 b22:	21 f4       	brne	.+8      	; 0xb2c <USB_Device_ProcessControlRequest+0x112>
 b24:	80 91 eb 00 	lds	r24, 0x00EB
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
 b28:	80 62       	ori	r24, 0x20	; 32
 b2a:	13 c0       	rjmp	.+38     	; 0xb52 <USB_Device_ProcessControlRequest+0x138>
 b2c:	80 91 eb 00 	lds	r24, 0x00EB
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
 b30:	80 61       	ori	r24, 0x10	; 16
 b32:	80 93 eb 00 	sts	0x00EB, r24
 b36:	81 e0       	ldi	r24, 0x01	; 1
			 *  \param[in] Address  Endpoint address whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t Address)
			{
				UERST = (1 << (Address & ENDPOINT_EPNUM_MASK));
 b38:	90 e0       	ldi	r25, 0x00	; 0
 b3a:	02 c0       	rjmp	.+4      	; 0xb40 <USB_Device_ProcessControlRequest+0x126>
 b3c:	88 0f       	add	r24, r24
 b3e:	99 1f       	adc	r25, r25
 b40:	2a 95       	dec	r18
 b42:	e2 f7       	brpl	.-8      	; 0xb3c <USB_Device_ProcessControlRequest+0x122>
 b44:	80 93 ea 00 	sts	0x00EA, r24
 b48:	10 92 ea 00 	sts	0x00EA, r1
				UERST = 0;
 b4c:	80 91 eb 00 	lds	r24, 0x00EB

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
 b50:	88 60       	ori	r24, 0x08	; 8
 b52:	80 93 eb 00 	sts	0x00EB, r24
 b56:	10 92 e9 00 	sts	0x00E9, r1
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 b5a:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 b5e:	87 7f       	andi	r24, 0xF7	; 247
 b60:	8a c0       	rjmp	.+276    	; 0xc76 <USB_Device_ProcessControlRequest+0x25c>
 b62:	88 23       	and	r24, r24
					USB_Device_ClearSetFeature();
				}

				break;
			case REQ_SetAddress:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
 b64:	09 f0       	breq	.+2      	; 0xb68 <USB_Device_ProcessControlRequest+0x14e>
 b66:	a7 c0       	rjmp	.+334    	; 0xcb6 <USB_Device_ProcessControlRequest+0x29c>
 b68:	10 91 0c 01 	lds	r17, 0x010C
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t DeviceAddress = (USB_ControlRequest.wValue & 0x7F);
 b6c:	1f 77       	andi	r17, 0x7F	; 127
 b6e:	80 91 e3 00 	lds	r24, 0x00E3
			#endif

			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				UDADDR = (UDADDR & (1 << ADDEN)) | (Address & 0x7F);
 b72:	80 78       	andi	r24, 0x80	; 128
 b74:	81 2b       	or	r24, r17
 b76:	80 93 e3 00 	sts	0x00E3, r24
 b7a:	80 91 e8 00 	lds	r24, 0x00E8
 b7e:	87 7f       	andi	r24, 0xF7	; 247
 b80:	80 93 e8 00 	sts	0x00E8, r24
 b84:	01 de       	rcall	.-1022   	; 0x788 <Endpoint_ClearStatusStage>

	USB_Device_SetDeviceAddress(DeviceAddress);

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
 b86:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 b8a:	80 ff       	sbrs	r24, 0
 b8c:	fc cf       	rjmp	.-8      	; 0xb86 <USB_Device_ProcessControlRequest+0x16c>

	while (!(Endpoint_IsINReady()));
 b8e:	80 91 e3 00 	lds	r24, 0x00E3
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address)
			{
				(void)Address;
				
				UDADDR |= (1 << ADDEN);
 b92:	80 68       	ori	r24, 0x80	; 128
 b94:	80 93 e3 00 	sts	0x00E3, r24
 b98:	11 23       	and	r17, r17
 b9a:	11 f0       	breq	.+4      	; 0xba0 <USB_Device_ProcessControlRequest+0x186>

	USB_Device_EnableDeviceAddress(DeviceAddress);

	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
 b9c:	83 e0       	ldi	r24, 0x03	; 3
 b9e:	01 c0       	rjmp	.+2      	; 0xba2 <USB_Device_ProcessControlRequest+0x188>
 ba0:	82 e0       	ldi	r24, 0x02	; 2
 ba2:	80 93 09 01 	sts	0x0109, r24
 ba6:	87 c0       	rjmp	.+270    	; 0xcb6 <USB_Device_ProcessControlRequest+0x29c>
 ba8:	80 58       	subi	r24, 0x80	; 128
 baa:	82 30       	cpi	r24, 0x02	; 2
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_SetAddress();

				break;
			case REQ_GetDescriptor:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
 bac:	08 f0       	brcs	.+2      	; 0xbb0 <USB_Device_ProcessControlRequest+0x196>
 bae:	83 c0       	rjmp	.+262    	; 0xcb6 <USB_Device_ProcessControlRequest+0x29c>
 bb0:	80 91 0c 01 	lds	r24, 0x010C
	    !(defined(USE_FLASH_DESCRIPTORS) || defined(USE_EEPROM_DESCRIPTORS) || defined(USE_RAM_DESCRIPTORS))
	uint8_t DescriptorAddressSpace;
	#endif

	#if !defined(NO_INTERNAL_SERIAL) && (USE_INTERNAL_SERIAL != NO_DESCRIPTOR)
	if (USB_ControlRequest.wValue == ((DTYPE_String << 8) | USE_INTERNAL_SERIAL))
 bb4:	90 91 0d 01 	lds	r25, 0x010D
 bb8:	23 e0       	ldi	r18, 0x03	; 3
 bba:	8c 3d       	cpi	r24, 0xDC	; 220
 bbc:	92 07       	cpc	r25, r18
 bbe:	a9 f5       	brne	.+106    	; 0xc2a <USB_Device_ProcessControlRequest+0x210>
 bc0:	83 e0       	ldi	r24, 0x03	; 3
 bc2:	8c 83       	std	Y+4, r24	; 0x04
	{
		USB_Descriptor_Header_t Header;
		uint16_t                UnicodeString[INTERNAL_SERIAL_LENGTH_BITS / 4];
	} SignatureDescriptor;

	SignatureDescriptor.Header.Type = DTYPE_String;
 bc4:	8a e2       	ldi	r24, 0x2A	; 42
 bc6:	8b 83       	std	Y+3, r24	; 0x03
	SignatureDescriptor.Header.Size = USB_STRING_LEN(INTERNAL_SERIAL_LENGTH_BITS / 4);
 bc8:	5f b7       	in	r21, 0x3f	; 63
 bca:	f8 94       	cli
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
 bcc:	de 01       	movw	r26, r28
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
 bce:	13 96       	adiw	r26, 0x03	; 3
				__builtin_ssrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				cli();
				#endif

				GCC_MEMORY_BARRIER();
 bd0:	80 e0       	ldi	r24, 0x00	; 0
 bd2:	90 e0       	ldi	r25, 0x00	; 0
 bd4:	4e e0       	ldi	r20, 0x0E	; 14
 bd6:	61 e2       	ldi	r22, 0x21	; 33
			static inline void USB_Device_GetSerialString(uint16_t* const UnicodeString)
			{
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;
 bd8:	e4 2f       	mov	r30, r20

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
				{
					uint8_t SerialByte = boot_signature_byte_get(SigReadAddress);
 bda:	f0 e0       	ldi	r31, 0x00	; 0
 bdc:	60 93 57 00 	sts	0x0057, r22
 be0:	e4 91       	lpm	r30, Z
 be2:	80 ff       	sbrs	r24, 0
 be4:	03 c0       	rjmp	.+6      	; 0xbec <USB_Device_ProcessControlRequest+0x1d2>

					if (SerialCharNum & 0x01)
 be6:	e2 95       	swap	r30
 be8:	ef 70       	andi	r30, 0x0F	; 15
					{
						SerialByte >>= 4;
 bea:	4f 5f       	subi	r20, 0xFF	; 255
 bec:	ef 70       	andi	r30, 0x0F	; 15
						SigReadAddress++;
 bee:	2e 2f       	mov	r18, r30
					}

					SerialByte &= 0x0F;
 bf0:	30 e0       	ldi	r19, 0x00	; 0
 bf2:	ea 30       	cpi	r30, 0x0A	; 10
 bf4:	18 f0       	brcs	.+6      	; 0xbfc <USB_Device_ProcessControlRequest+0x1e2>

					UnicodeString[SerialCharNum] = cpu_to_le16((SerialByte >= 10) ?
 bf6:	29 5c       	subi	r18, 0xC9	; 201
 bf8:	3f 4f       	sbci	r19, 0xFF	; 255
 bfa:	02 c0       	rjmp	.+4      	; 0xc00 <USB_Device_ProcessControlRequest+0x1e6>
 bfc:	20 5d       	subi	r18, 0xD0	; 208
 bfe:	3f 4f       	sbci	r19, 0xFF	; 255
 c00:	13 96       	adiw	r26, 0x03	; 3
 c02:	3c 93       	st	X, r19
 c04:	2e 93       	st	-X, r18
 c06:	12 97       	sbiw	r26, 0x02	; 2
 c08:	01 96       	adiw	r24, 0x01	; 1
 c0a:	12 96       	adiw	r26, 0x02	; 2
 c0c:	84 31       	cpi	r24, 0x14	; 20
 c0e:	91 05       	cpc	r25, r1
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
 c10:	19 f7       	brne	.-58     	; 0xbd8 <USB_Device_ProcessControlRequest+0x1be>
 c12:	5f bf       	out	0x3f, r21	; 63
 c14:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 c18:	87 7f       	andi	r24, 0xF7	; 247
 c1a:	80 93 e8 00 	sts	0x00E8, r24
 c1e:	ce 01       	movw	r24, r28
 c20:	03 96       	adiw	r24, 0x03	; 3

	USB_Device_GetSerialString(SignatureDescriptor.UnicodeString);

	Endpoint_ClearSETUP();

	Endpoint_Write_Control_Stream_LE(&SignatureDescriptor, sizeof(SignatureDescriptor));
 c22:	6a e2       	ldi	r22, 0x2A	; 42
 c24:	70 e0       	ldi	r23, 0x00	; 0
 c26:	79 dc       	rcall	.-1806   	; 0x51a <Endpoint_Write_Control_Stream_LE>
 c28:	12 c0       	rjmp	.+36     	; 0xc4e <USB_Device_ProcessControlRequest+0x234>
 c2a:	60 91 0e 01 	lds	r22, 0x010E
 c2e:	ae 01       	movw	r20, r28
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif

	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
 c30:	4f 5f       	subi	r20, 0xFF	; 255
 c32:	5f 4f       	sbci	r21, 0xFF	; 255
 c34:	46 dc       	rcall	.-1908   	; 0x4c2 <CALLBACK_USB_GetDescriptor>
 c36:	bc 01       	movw	r22, r24
 c38:	00 97       	sbiw	r24, 0x00	; 0
 c3a:	09 f4       	brne	.+2      	; 0xc3e <USB_Device_ProcessControlRequest+0x224>
 c3c:	3c c0       	rjmp	.+120    	; 0xcb6 <USB_Device_ProcessControlRequest+0x29c>
 c3e:	80 91 e8 00 	lds	r24, 0x00E8
 c42:	87 7f       	andi	r24, 0xF7	; 247
 c44:	80 93 e8 00 	sts	0x00E8, r24
 c48:	89 81       	ldd	r24, Y+1	; 0x01
 c4a:	9a 81       	ldd	r25, Y+2	; 0x02
 c4c:	0b dd       	rcall	.-1514   	; 0x664 <Endpoint_Write_Control_PStream_LE>
 c4e:	80 91 e8 00 	lds	r24, 0x00E8
	#if defined(USE_RAM_DESCRIPTORS) || !defined(ARCH_HAS_MULTI_ADDRESS_SPACE)
	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_EEPROM_DESCRIPTORS)
	Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_FLASH_DESCRIPTORS)
	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
 c52:	8b 77       	andi	r24, 0x7B	; 123
 c54:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 c58:	2e c0       	rjmp	.+92     	; 0xcb6 <USB_Device_ProcessControlRequest+0x29c>
 c5a:	80 38       	cpi	r24, 0x80	; 128
 c5c:	61 f5       	brne	.+88     	; 0xcb6 <USB_Device_ProcessControlRequest+0x29c>
 c5e:	80 91 e8 00 	lds	r24, 0x00E8
 c62:	87 7f       	andi	r24, 0xF7	; 247
					USB_Device_GetDescriptor();
				}

				break;
			case REQ_GetConfiguration:
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
 c64:	80 93 e8 00 	sts	0x00E8, r24
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 c68:	80 91 05 01 	lds	r24, 0x0105
 c6c:	80 93 f1 00 	sts	0x00F1, r24
 c70:	80 91 e8 00 	lds	r24, 0x00E8

static void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();

	Endpoint_Write_8(USB_Device_ConfigurationNumber);
 c74:	8e 77       	andi	r24, 0x7E	; 126
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
 c76:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 c7a:	86 dd       	rcall	.-1268   	; 0x788 <Endpoint_ClearStatusStage>
 c7c:	1c c0       	rjmp	.+56     	; 0xcb6 <USB_Device_ProcessControlRequest+0x29c>
 c7e:	88 23       	and	r24, r24
 c80:	d1 f4       	brne	.+52     	; 0xcb6 <USB_Device_ProcessControlRequest+0x29c>
 c82:	90 91 0c 01 	lds	r25, 0x010C
	Endpoint_ClearIN();

	Endpoint_ClearStatusStage();
 c86:	92 30       	cpi	r25, 0x02	; 2
 c88:	b0 f4       	brcc	.+44     	; 0xcb6 <USB_Device_ProcessControlRequest+0x29c>
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_GetConfiguration();

				break;
			case REQ_SetConfiguration:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
 c8a:	80 91 e8 00 	lds	r24, 0x00E8
}

static void USB_Device_SetConfiguration(void)
{
	#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
 c8e:	87 7f       	andi	r24, 0xF7	; 247
 c90:	80 93 e8 00 	sts	0x00E8, r24
 c94:	90 93 05 01 	sts	0x0105, r25
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 c98:	77 dd       	rcall	.-1298   	; 0x788 <Endpoint_ClearStatusStage>
 c9a:	80 91 05 01 	lds	r24, 0x0105
 c9e:	88 23       	and	r24, r24
	#endif
	#endif

	Endpoint_ClearSETUP();

	USB_Device_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
 ca0:	21 f4       	brne	.+8      	; 0xcaa <USB_Device_ProcessControlRequest+0x290>
 ca2:	80 91 e3 00 	lds	r24, 0x00E3

	Endpoint_ClearStatusStage();
 ca6:	87 ff       	sbrs	r24, 7

	if (USB_Device_ConfigurationNumber)
 ca8:	02 c0       	rjmp	.+4      	; 0xcae <USB_Device_ProcessControlRequest+0x294>
 caa:	84 e0       	ldi	r24, 0x04	; 4
 cac:	01 c0       	rjmp	.+2      	; 0xcb0 <USB_Device_ProcessControlRequest+0x296>
 cae:	81 e0       	ldi	r24, 0x01	; 1
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
 cb0:	80 93 09 01 	sts	0x0109, r24
	  USB_DeviceState = DEVICE_STATE_Configured;
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
 cb4:	c7 da       	rcall	.-2674   	; 0x244 <EVENT_USB_Device_ConfigurationChanged>
 cb6:	80 91 e8 00 	lds	r24, 0x00E8
 cba:	83 ff       	sbrs	r24, 3
 cbc:	0a c0       	rjmp	.+20     	; 0xcd2 <USB_Device_ProcessControlRequest+0x2b8>
 cbe:	80 91 e8 00 	lds	r24, 0x00E8

	EVENT_USB_Device_ConfigurationChanged();
 cc2:	87 7f       	andi	r24, 0xF7	; 247
 cc4:	80 93 e8 00 	sts	0x00E8, r24
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 cc8:	80 91 eb 00 	lds	r24, 0x00EB
			default:
				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
 ccc:	80 62       	ori	r24, 0x20	; 32
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 cce:	80 93 eb 00 	sts	0x00EB, r24
 cd2:	ac 96       	adiw	r28, 0x2c	; 44
 cd4:	0f b6       	in	r0, 0x3f	; 63
 cd6:	f8 94       	cli
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
 cd8:	de bf       	out	0x3e, r29	; 62
 cda:	0f be       	out	0x3f, r0	; 63
 cdc:	cd bf       	out	0x3d, r28	; 61
 cde:	df 91       	pop	r29
 ce0:	cf 91       	pop	r28
	{
		Endpoint_ClearSETUP();
		Endpoint_StallTransaction();
	}
}
 ce2:	1f 91       	pop	r17
 ce4:	08 95       	ret

00000ce6 <USB_Event_Stub>:
#include "Events.h"

void USB_Event_Stub(void)
{

}
 ce6:	08 95       	ret

00000ce8 <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
 ce8:	cf 93       	push	r28
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_DeviceTask(void)
{
	if (USB_DeviceState == DEVICE_STATE_Unattached)
 cea:	80 91 09 01 	lds	r24, 0x0109
 cee:	88 23       	and	r24, r24
 cf0:	a9 f0       	breq	.+42     	; 0xd1c <USB_USBTask+0x34>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
 cf2:	80 91 e9 00 	lds	r24, 0x00E9
 cf6:	8f 70       	andi	r24, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
 cf8:	90 91 ec 00 	lds	r25, 0x00EC
 cfc:	90 ff       	sbrs	r25, 0
 cfe:	02 c0       	rjmp	.+4      	; 0xd04 <USB_USBTask+0x1c>
 d00:	c0 e8       	ldi	r28, 0x80	; 128
 d02:	01 c0       	rjmp	.+2      	; 0xd06 <USB_USBTask+0x1e>
 d04:	c0 e0       	ldi	r28, 0x00	; 0
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
 d06:	c8 2b       	or	r28, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 d08:	10 92 e9 00 	sts	0x00E9, r1
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 d0c:	80 91 e8 00 	lds	r24, 0x00E8

	uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

	if (Endpoint_IsSETUPReceived())
 d10:	83 ff       	sbrs	r24, 3
 d12:	01 c0       	rjmp	.+2      	; 0xd16 <USB_USBTask+0x2e>
	  USB_Device_ProcessControlRequest();
 d14:	82 de       	rcall	.-764    	; 0xa1a <USB_Device_ProcessControlRequest>
 d16:	cf 70       	andi	r28, 0x0F	; 15
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 d18:	c0 93 e9 00 	sts	0x00E9, r28
 d1c:	cf 91       	pop	r28
	#elif defined(USB_CAN_BE_HOST)
		USB_HostTask();
	#elif defined(USB_CAN_BE_DEVICE)
		USB_DeviceTask();
	#endif
}
 d1e:	08 95       	ret

00000d20 <__udivmodsi4>:
 d20:	a1 e2       	ldi	r26, 0x21	; 33
 d22:	1a 2e       	mov	r1, r26
 d24:	aa 1b       	sub	r26, r26
 d26:	bb 1b       	sub	r27, r27
 d28:	fd 01       	movw	r30, r26
 d2a:	0d c0       	rjmp	.+26     	; 0xd46 <__udivmodsi4_ep>

00000d2c <__udivmodsi4_loop>:
 d2c:	aa 1f       	adc	r26, r26
 d2e:	bb 1f       	adc	r27, r27
 d30:	ee 1f       	adc	r30, r30
 d32:	ff 1f       	adc	r31, r31
 d34:	a2 17       	cp	r26, r18
 d36:	b3 07       	cpc	r27, r19
 d38:	e4 07       	cpc	r30, r20
 d3a:	f5 07       	cpc	r31, r21
 d3c:	20 f0       	brcs	.+8      	; 0xd46 <__udivmodsi4_ep>
 d3e:	a2 1b       	sub	r26, r18
 d40:	b3 0b       	sbc	r27, r19
 d42:	e4 0b       	sbc	r30, r20
 d44:	f5 0b       	sbc	r31, r21

00000d46 <__udivmodsi4_ep>:
 d46:	66 1f       	adc	r22, r22
 d48:	77 1f       	adc	r23, r23
 d4a:	88 1f       	adc	r24, r24
 d4c:	99 1f       	adc	r25, r25
 d4e:	1a 94       	dec	r1
 d50:	69 f7       	brne	.-38     	; 0xd2c <__udivmodsi4_loop>
 d52:	60 95       	com	r22
 d54:	70 95       	com	r23
 d56:	80 95       	com	r24
 d58:	90 95       	com	r25
 d5a:	9b 01       	movw	r18, r22
 d5c:	ac 01       	movw	r20, r24
 d5e:	bd 01       	movw	r22, r26
 d60:	cf 01       	movw	r24, r30
 d62:	08 95       	ret

00000d64 <_exit>:
 d64:	f8 94       	cli

00000d66 <__stop_program>:
 d66:	ff cf       	rjmp	.-2      	; 0xd66 <__stop_program>
