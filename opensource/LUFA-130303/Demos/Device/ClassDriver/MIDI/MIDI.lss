
MIDI.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001c  00800100  00000dce  00000e62  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000dce  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000e  0080011c  0080011c  00000e7e  2**0
                  ALLOC
  3 .stab         00000a98  00000000  00000000  00000e80  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000002aa  00000000  00000000  00001918  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000004e0  00000000  00000000  00001bc8  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00008674  00000000  00000000  000020a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000020f2  00000000  00000000  0000a71c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00003e33  00000000  00000000  0000c80e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000dbc  00000000  00000000  00010644  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00003bbe  00000000  00000000  00011400  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00005109  00000000  00000000  00014fbe  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000006a0  00000000  00000000  0001a0c7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	b0 c0       	rjmp	.+352    	; 0x162 <__ctors_end>
   2:	00 00       	nop
   4:	c9 c0       	rjmp	.+402    	; 0x198 <__bad_interrupt>
   6:	00 00       	nop
   8:	c7 c0       	rjmp	.+398    	; 0x198 <__bad_interrupt>
   a:	00 00       	nop
   c:	c5 c0       	rjmp	.+394    	; 0x198 <__bad_interrupt>
   e:	00 00       	nop
  10:	c3 c0       	rjmp	.+390    	; 0x198 <__bad_interrupt>
  12:	00 00       	nop
  14:	c1 c0       	rjmp	.+386    	; 0x198 <__bad_interrupt>
  16:	00 00       	nop
  18:	bf c0       	rjmp	.+382    	; 0x198 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	bd c0       	rjmp	.+378    	; 0x198 <__bad_interrupt>
  1e:	00 00       	nop
  20:	bb c0       	rjmp	.+374    	; 0x198 <__bad_interrupt>
  22:	00 00       	nop
  24:	b9 c0       	rjmp	.+370    	; 0x198 <__bad_interrupt>
  26:	00 00       	nop
  28:	07 c4       	rjmp	.+2062   	; 0x838 <__vector_10>
  2a:	00 00       	nop
  2c:	b5 c0       	rjmp	.+362    	; 0x198 <__bad_interrupt>
  2e:	00 00       	nop
  30:	b3 c0       	rjmp	.+358    	; 0x198 <__bad_interrupt>
  32:	00 00       	nop
  34:	b1 c0       	rjmp	.+354    	; 0x198 <__bad_interrupt>
  36:	00 00       	nop
  38:	af c0       	rjmp	.+350    	; 0x198 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	ad c0       	rjmp	.+346    	; 0x198 <__bad_interrupt>
  3e:	00 00       	nop
  40:	ab c0       	rjmp	.+342    	; 0x198 <__bad_interrupt>
  42:	00 00       	nop
  44:	a9 c0       	rjmp	.+338    	; 0x198 <__bad_interrupt>
  46:	00 00       	nop
  48:	a7 c0       	rjmp	.+334    	; 0x198 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	a5 c0       	rjmp	.+330    	; 0x198 <__bad_interrupt>
  4e:	00 00       	nop
  50:	a3 c0       	rjmp	.+326    	; 0x198 <__bad_interrupt>
  52:	00 00       	nop
  54:	a1 c0       	rjmp	.+322    	; 0x198 <__bad_interrupt>
  56:	00 00       	nop
  58:	9f c0       	rjmp	.+318    	; 0x198 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	9d c0       	rjmp	.+314    	; 0x198 <__bad_interrupt>
  5e:	00 00       	nop
  60:	9b c0       	rjmp	.+310    	; 0x198 <__bad_interrupt>
  62:	00 00       	nop
  64:	99 c0       	rjmp	.+306    	; 0x198 <__bad_interrupt>
  66:	00 00       	nop
  68:	97 c0       	rjmp	.+302    	; 0x198 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	95 c0       	rjmp	.+298    	; 0x198 <__bad_interrupt>
  6e:	00 00       	nop
  70:	93 c0       	rjmp	.+294    	; 0x198 <__bad_interrupt>
  72:	00 00       	nop
  74:	91 c0       	rjmp	.+290    	; 0x198 <__bad_interrupt>
  76:	00 00       	nop
  78:	8f c0       	rjmp	.+286    	; 0x198 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	8d c0       	rjmp	.+282    	; 0x198 <__bad_interrupt>
  7e:	00 00       	nop
  80:	8b c0       	rjmp	.+278    	; 0x198 <__bad_interrupt>
  82:	00 00       	nop
  84:	89 c0       	rjmp	.+274    	; 0x198 <__bad_interrupt>
  86:	00 00       	nop
  88:	87 c0       	rjmp	.+270    	; 0x198 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	85 c0       	rjmp	.+266    	; 0x198 <__bad_interrupt>
  8e:	00 00       	nop
  90:	83 c0       	rjmp	.+262    	; 0x198 <__bad_interrupt>
  92:	00 00       	nop
  94:	81 c0       	rjmp	.+258    	; 0x198 <__bad_interrupt>
  96:	00 00       	nop
  98:	7f c0       	rjmp	.+254    	; 0x198 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	7d c0       	rjmp	.+250    	; 0x198 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	7b c0       	rjmp	.+246    	; 0x198 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	79 c0       	rjmp	.+242    	; 0x198 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	77 c0       	rjmp	.+238    	; 0x198 <__bad_interrupt>
  aa:	00 00       	nop

000000ac <ProductString>:
  ac:	1e 03 4c 00 55 00 46 00 41 00 20 00 4d 00 49 00     ..L.U.F.A. .M.I.
  bc:	44 00 49 00 20 00 44 00 65 00 6d 00 6f 00 00 00     D.I. .D.e.m.o...

000000cc <ManufacturerString>:
  cc:	18 03 44 00 65 00 61 00 6e 00 20 00 43 00 61 00     ..D.e.a.n. .C.a.
  dc:	6d 00 65 00 72 00 61 00 00 00                       m.e.r.a...

000000e6 <LanguageString>:
  e6:	04 03 09 04                                         ....

000000ea <ConfigurationDescriptor>:
  ea:	09 02 65 00 02 01 00 c0 32 09 04 00 00 00 01 01     ..e.....2.......
  fa:	00 00 09 24 01 00 01 09 00 01 01 09 04 01 00 02     ...$............
 10a:	01 03 00 00 07 24 01 00 01 41 00 06 24 02 01 01     .....$...A..$...
 11a:	00 06 24 02 02 02 00 09 24 03 01 03 01 02 01 00     ..$.....$.......
 12a:	09 24 03 02 04 01 01 01 00 09 05 01 02 40 00 05     .$...........@..
 13a:	00 00 05 25 01 01 01 09 05 82 02 40 00 05 00 00     ...%.......@....
 14a:	05 25 01 01 03                                      .%...

0000014f <DeviceDescriptor>:
 14f:	12 01 10 01 00 00 00 08 eb 03 48 20 01 00 01 02     ..........H ....
 15f:	00 01 00                                            ...

00000162 <__ctors_end>:
 162:	11 24       	eor	r1, r1
 164:	1f be       	out	0x3f, r1	; 63
 166:	cf ef       	ldi	r28, 0xFF	; 255
 168:	da e0       	ldi	r29, 0x0A	; 10
 16a:	de bf       	out	0x3e, r29	; 62
 16c:	cd bf       	out	0x3d, r28	; 61

0000016e <__do_copy_data>:
 16e:	11 e0       	ldi	r17, 0x01	; 1
 170:	a0 e0       	ldi	r26, 0x00	; 0
 172:	b1 e0       	ldi	r27, 0x01	; 1
 174:	ee ec       	ldi	r30, 0xCE	; 206
 176:	fd e0       	ldi	r31, 0x0D	; 13
 178:	02 c0       	rjmp	.+4      	; 0x17e <__do_copy_data+0x10>
 17a:	05 90       	lpm	r0, Z+
 17c:	0d 92       	st	X+, r0
 17e:	ac 31       	cpi	r26, 0x1C	; 28
 180:	b1 07       	cpc	r27, r17
 182:	d9 f7       	brne	.-10     	; 0x17a <__do_copy_data+0xc>

00000184 <__do_clear_bss>:
 184:	11 e0       	ldi	r17, 0x01	; 1
 186:	ac e1       	ldi	r26, 0x1C	; 28
 188:	b1 e0       	ldi	r27, 0x01	; 1
 18a:	01 c0       	rjmp	.+2      	; 0x18e <.do_clear_bss_start>

0000018c <.do_clear_bss_loop>:
 18c:	1d 92       	st	X+, r1

0000018e <.do_clear_bss_start>:
 18e:	aa 32       	cpi	r26, 0x2A	; 42
 190:	b1 07       	cpc	r27, r17
 192:	e1 f7       	brne	.-8      	; 0x18c <.do_clear_bss_loop>
 194:	69 d0       	rcall	.+210    	; 0x268 <main>
 196:	19 c6       	rjmp	.+3122   	; 0xdca <_exit>

00000198 <__bad_interrupt>:
 198:	33 cf       	rjmp	.-410    	; 0x0 <__vectors>

0000019a <LEDs_SetAllLEDs>:
				PORTE &= ~(LEDMask & LEDS_PORTE_LEDS);
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
			{
				PORTB = ((PORTB & ~LEDS_PORTB_LEDS) | (LEDMask & LEDS_PORTB_LEDS));
 19a:	25 b1       	in	r18, 0x05	; 5
 19c:	98 2f       	mov	r25, r24
 19e:	91 72       	andi	r25, 0x21	; 33
 1a0:	2e 7d       	andi	r18, 0xDE	; 222
 1a2:	92 2b       	or	r25, r18
 1a4:	95 b9       	out	0x05, r25	; 5
				PORTD = ((PORTD & ~(LEDS_PORTD_LEDS << LEDS_PORTD_MASK_SHIFT)) |
 1a6:	9b b1       	in	r25, 0x0b	; 11
				         ((LEDMask & LEDS_PORTD_LEDS) << LEDS_PORTD_MASK_SHIFT));
 1a8:	28 2f       	mov	r18, r24
 1aa:	30 e0       	ldi	r19, 0x00	; 0
 1ac:	20 71       	andi	r18, 0x10	; 16
 1ae:	30 70       	andi	r19, 0x00	; 0
 1b0:	22 0f       	add	r18, r18
 1b2:	33 1f       	adc	r19, r19
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
			{
				PORTB = ((PORTB & ~LEDS_PORTB_LEDS) | (LEDMask & LEDS_PORTB_LEDS));
				PORTD = ((PORTD & ~(LEDS_PORTD_LEDS << LEDS_PORTD_MASK_SHIFT)) |
 1b4:	9f 7d       	andi	r25, 0xDF	; 223
 1b6:	92 2b       	or	r25, r18
 1b8:	9b b9       	out	0x0b, r25	; 11
				         ((LEDMask & LEDS_PORTD_LEDS) << LEDS_PORTD_MASK_SHIFT));
				PORTE = ((PORTE & ~LEDS_PORTE_LEDS) | (LEDMask & LEDS_PORTE_LEDS));
 1ba:	9e b1       	in	r25, 0x0e	; 14
 1bc:	80 74       	andi	r24, 0x40	; 64
 1be:	9f 7b       	andi	r25, 0xBF	; 191
 1c0:	89 2b       	or	r24, r25
 1c2:	8e b9       	out	0x0e, r24	; 14
			}
 1c4:	08 95       	ret

000001c6 <SetupHardware>:

/** Configures the board hardware and chip peripherals for the demo's functionality. */
void SetupHardware(void)
{
	/* Disable watchdog if enabled by bootloader/fuses */
	MCUSR &= ~(1 << WDRF);
 1c6:	84 b7       	in	r24, 0x34	; 52
 1c8:	87 7f       	andi	r24, 0xF7	; 247
 1ca:	84 bf       	out	0x34, r24	; 52
	wdt_disable();
 1cc:	88 e1       	ldi	r24, 0x18	; 24
 1ce:	0f b6       	in	r0, 0x3f	; 63
 1d0:	f8 94       	cli
 1d2:	80 93 60 00 	sts	0x0060, r24
 1d6:	10 92 60 00 	sts	0x0060, r1
 1da:	0f be       	out	0x3f, r0	; 63
The type of x is clock_div_t.
*/
void clock_prescale_set(clock_div_t __x)
{
    uint8_t __tmp = _BV(CLKPCE);
    __asm__ __volatile__ (
 1dc:	90 e0       	ldi	r25, 0x00	; 0
 1de:	80 e8       	ldi	r24, 0x80	; 128
 1e0:	0f b6       	in	r0, 0x3f	; 63
 1e2:	f8 94       	cli
 1e4:	80 93 61 00 	sts	0x0061, r24
 1e8:	90 93 61 00 	sts	0x0061, r25
 1ec:	0f be       	out	0x3f, r0	; 63

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void LEDs_Init(void)
			{
				DDRB  |=  LEDS_PORTB_LEDS;
 1ee:	84 b1       	in	r24, 0x04	; 4
 1f0:	81 62       	ori	r24, 0x21	; 33
 1f2:	84 b9       	out	0x04, r24	; 4
				PORTB &= ~LEDS_PORTB_LEDS;
 1f4:	85 b1       	in	r24, 0x05	; 5
 1f6:	8e 7d       	andi	r24, 0xDE	; 222
 1f8:	85 b9       	out	0x05, r24	; 5
				DDRD  |=  (LEDS_PORTD_LEDS << LEDS_PORTD_MASK_SHIFT);
 1fa:	55 9a       	sbi	0x0a, 5	; 10
				PORTD &= ~(LEDS_PORTD_LEDS << LEDS_PORTD_MASK_SHIFT);
 1fc:	5d 98       	cbi	0x0b, 5	; 11
				DDRE  |=  LEDS_PORTE_LEDS;
 1fe:	6e 9a       	sbi	0x0d, 6	; 13
				PORTE &= ~LEDS_PORTE_LEDS;
 200:	76 98       	cbi	0x0e, 6	; 14

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void Buttons_Init(void)
			{
				DDRE  &= ~BUTTONS_BUTTON1;
 202:	6a 98       	cbi	0x0d, 2	; 13
				PORTE |=  BUTTONS_BUTTON1;
 204:	72 9a       	sbi	0x0e, 2	; 14

	/* Hardware Initialization */
	// Joystick_Init();
	LEDs_Init();
	Buttons_Init();
	USB_Init();
 206:	fb c2       	rjmp	.+1526   	; 0x7fe <USB_Init>

00000208 <CheckButtonPressed>:
 208:	1f 93       	push	r17
}
 20a:	cf 93       	push	r28

/** Checks for changes in the position of the board joystick, sending MIDI events to the host upon each change. */
// void CheckJoystickMovement(void)
void CheckButtonPressed(void)
{
 20c:	df 93       	push	r29
 20e:	00 d0       	rcall	.+0      	; 0x210 <CheckButtonPressed+0x8>
 210:	00 d0       	rcall	.+0      	; 0x212 <CheckButtonPressed+0xa>
 212:	cd b7       	in	r28, 0x3d	; 61
 214:	de b7       	in	r29, 0x3e	; 62
			}

			static inline uint8_t Buttons_GetStatus(void) ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t Buttons_GetStatus(void)
			{
				return ((PINE & BUTTONS_BUTTON1) ^ BUTTONS_BUTTON1);
 216:	1c b1       	in	r17, 0x0c	; 12
 218:	10 95       	com	r17
 21a:	14 70       	andi	r17, 0x04	; 4
	// {
	// 	MIDICommand = ((JoystickStatus & JOY_PRESS)? MIDI_COMMAND_NOTE_ON : MIDI_COMMAND_NOTE_OFF);
	// 	MIDIPitch   = 0x3B;
	// }

	if (ButtonChanged)
 21c:	80 91 1c 01 	lds	r24, 0x011C
 220:	18 17       	cp	r17, r24
 222:	21 f0       	breq	.+8      	; 0x22c <CheckButtonPressed+0x24>
	{
		MIDICommand = ((ButtonPressed)? MIDI_COMMAND_NOTE_ON : MIDI_COMMAND_NOTE_OFF);
 224:	11 23       	and	r17, r17
 226:	61 f0       	breq	.+24     	; 0x240 <CheckButtonPressed+0x38>
 228:	80 e9       	ldi	r24, 0x90	; 144
 22a:	0b c0       	rjmp	.+22     	; 0x242 <CheckButtonPressed+0x3a>
		MIDI_Device_SendEventPacket(&Keyboard_MIDI_Interface, &MIDIEvent);
		MIDI_Device_Flush(&Keyboard_MIDI_Interface);
	}

	// PrevJoystickStatus = JoystickStatus;
	PrevButtonPressed = ButtonPressed;
 22c:	10 93 1c 01 	sts	0x011C, r17
}
 230:	0f 90       	pop	r0
 232:	0f 90       	pop	r0
 234:	0f 90       	pop	r0
 236:	0f 90       	pop	r0
 238:	df 91       	pop	r29
 23a:	cf 91       	pop	r28
 23c:	1f 91       	pop	r17
 23e:	08 95       	ret
	// 	MIDIPitch   = 0x3B;
	// }

	if (ButtonChanged)
	{
		MIDICommand = ((ButtonPressed)? MIDI_COMMAND_NOTE_ON : MIDI_COMMAND_NOTE_OFF);
 240:	80 e8       	ldi	r24, 0x80	; 128
	}


	if (MIDICommand)
	{
		MIDI_EventPacket_t MIDIEvent = (MIDI_EventPacket_t)
 242:	98 2f       	mov	r25, r24
 244:	92 95       	swap	r25
 246:	9f 70       	andi	r25, 0x0F	; 15
 248:	99 83       	std	Y+1, r25	; 0x01
 24a:	8a 83       	std	Y+2, r24	; 0x02
 24c:	8c e3       	ldi	r24, 0x3C	; 60
 24e:	8b 83       	std	Y+3, r24	; 0x03
 250:	80 e4       	ldi	r24, 0x40	; 64
 252:	8c 83       	std	Y+4, r24	; 0x04
				.Data1       = MIDICommand | Channel,
				.Data2       = MIDIPitch,
				.Data3       = MIDI_STANDARD_VELOCITY,
			};

		MIDI_Device_SendEventPacket(&Keyboard_MIDI_Interface, &MIDIEvent);
 254:	80 e0       	ldi	r24, 0x00	; 0
 256:	91 e0       	ldi	r25, 0x01	; 1
 258:	be 01       	movw	r22, r28
 25a:	6f 5f       	subi	r22, 0xFF	; 255
 25c:	7f 4f       	sbci	r23, 0xFF	; 255
 25e:	49 d5       	rcall	.+2706   	; 0xcf2 <MIDI_Device_SendEventPacket>
 260:	80 e0       	ldi	r24, 0x00	; 0
		MIDI_Device_Flush(&Keyboard_MIDI_Interface);
 262:	91 e0       	ldi	r25, 0x01	; 1
 264:	63 d5       	rcall	.+2758   	; 0xd2c <MIDI_Device_Flush>
 266:	e2 cf       	rjmp	.-60     	; 0x22c <CheckButtonPressed+0x24>

00000268 <main>:
 268:	cf 93       	push	r28
 26a:	df 93       	push	r29

/** Main program entry point. This routine contains the overall program flow, including initial
 *  setup of all components and the main program loop.
 */
int main(void)
{
 26c:	00 d0       	rcall	.+0      	; 0x26e <main+0x6>
 26e:	00 d0       	rcall	.+0      	; 0x270 <main+0x8>
 270:	cd b7       	in	r28, 0x3d	; 61
 272:	de b7       	in	r29, 0x3e	; 62
	SetupHardware();
 274:	a8 df       	rcall	.-176    	; 0x1c6 <SetupHardware>
 276:	80 e1       	ldi	r24, 0x10	; 16

	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
 278:	90 df       	rcall	.-224    	; 0x19a <LEDs_SetAllLEDs>
 27a:	78 94       	sei
 27c:	c5 df       	rcall	.-118    	; 0x208 <CheckButtonPressed>
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				sei();
 27e:	0f c0       	rjmp	.+30     	; 0x29e <main+0x36>
	GlobalInterruptEnable();

	for (;;)
	{
		// CheckJoystickMovement();
		CheckButtonPressed();
 280:	89 81       	ldd	r24, Y+1	; 0x01
 282:	89 30       	cpi	r24, 0x09	; 9

		MIDI_EventPacket_t ReceivedMIDIEvent;
		while (MIDI_Device_ReceiveEventPacket(&Keyboard_MIDI_Interface, &ReceivedMIDIEvent))
 284:	51 f4       	brne	.+20     	; 0x29a <main+0x32>
		{
			if ((ReceivedMIDIEvent.Event == MIDI_EVENT(0, MIDI_COMMAND_NOTE_ON)) && (ReceivedMIDIEvent.Data3 > 0))
 286:	8c 81       	ldd	r24, Y+4	; 0x04
 288:	88 23       	and	r24, r24
 28a:	39 f0       	breq	.+14     	; 0x29a <main+0x32>
 28c:	8b 81       	ldd	r24, Y+3	; 0x03
 28e:	81 34       	cpi	r24, 0x41	; 65
 290:	10 f0       	brcs	.+4      	; 0x296 <main+0x2e>
			  LEDs_SetAllLEDs(ReceivedMIDIEvent.Data2 > 64 ? LEDS_LED1 : LEDS_LED2);
 292:	80 e1       	ldi	r24, 0x10	; 16
 294:	03 c0       	rjmp	.+6      	; 0x29c <main+0x34>
 296:	81 e0       	ldi	r24, 0x01	; 1
 298:	01 c0       	rjmp	.+2      	; 0x29c <main+0x34>
 29a:	80 e0       	ldi	r24, 0x00	; 0
 29c:	7e df       	rcall	.-260    	; 0x19a <LEDs_SetAllLEDs>
 29e:	80 e0       	ldi	r24, 0x00	; 0
			else
			  LEDs_SetAllLEDs(LEDS_NO_LEDS);
 2a0:	91 e0       	ldi	r25, 0x01	; 1
 2a2:	be 01       	movw	r22, r28
 2a4:	6f 5f       	subi	r22, 0xFF	; 255
	{
		// CheckJoystickMovement();
		CheckButtonPressed();

		MIDI_EventPacket_t ReceivedMIDIEvent;
		while (MIDI_Device_ReceiveEventPacket(&Keyboard_MIDI_Interface, &ReceivedMIDIEvent))
 2a6:	7f 4f       	sbci	r23, 0xFF	; 255
 2a8:	6e d5       	rcall	.+2780   	; 0xd86 <MIDI_Device_ReceiveEventPacket>
 2aa:	88 23       	and	r24, r24
 2ac:	49 f7       	brne	.-46     	; 0x280 <main+0x18>
 2ae:	80 e0       	ldi	r24, 0x00	; 0
 2b0:	91 e0       	ldi	r25, 0x01	; 1
 2b2:	5a d5       	rcall	.+2740   	; 0xd68 <MIDI_Device_USBTask>
 2b4:	ec d4       	rcall	.+2520   	; 0xc8e <USB_USBTask>
 2b6:	e2 cf       	rjmp	.-60     	; 0x27c <main+0x14>

000002b8 <EVENT_USB_Device_Connect>:
			  LEDs_SetAllLEDs(ReceivedMIDIEvent.Data2 > 64 ? LEDS_LED1 : LEDS_LED2);
			else
			  LEDs_SetAllLEDs(LEDS_NO_LEDS);
		}

		MIDI_Device_USBTask(&Keyboard_MIDI_Interface);
 2b8:	81 e4       	ldi	r24, 0x41	; 65
 2ba:	6f cf       	rjmp	.-290    	; 0x19a <LEDs_SetAllLEDs>

000002bc <EVENT_USB_Device_Disconnect>:
 2bc:	80 e1       	ldi	r24, 0x10	; 16
 2be:	6d cf       	rjmp	.-294    	; 0x19a <LEDs_SetAllLEDs>

000002c0 <EVENT_USB_Device_ConfigurationChanged>:
		USB_USBTask();
 2c0:	80 e0       	ldi	r24, 0x00	; 0
 2c2:	91 e0       	ldi	r25, 0x01	; 1
	}
 2c4:	00 d5       	rcall	.+2560   	; 0xcc6 <MIDI_Device_ConfigureEndpoints>
/** Event handler for the library USB Configuration Changed event. */
void EVENT_USB_Device_ConfigurationChanged(void)
{
	bool ConfigSuccess = true;

	ConfigSuccess &= MIDI_Device_ConfigureEndpoints(&Keyboard_MIDI_Interface);
 2c6:	88 23       	and	r24, r24

	LEDs_SetAllLEDs(ConfigSuccess ? LEDMASK_USB_READY : LEDMASK_USB_ERROR);
 2c8:	11 f0       	breq	.+4      	; 0x2ce <EVENT_USB_Device_ConfigurationChanged+0xe>
 2ca:	81 e2       	ldi	r24, 0x21	; 33
 2cc:	01 c0       	rjmp	.+2      	; 0x2d0 <EVENT_USB_Device_ConfigurationChanged+0x10>
 2ce:	80 e5       	ldi	r24, 0x50	; 80
 2d0:	64 cf       	rjmp	.-312    	; 0x19a <LEDs_SetAllLEDs>

000002d2 <EVENT_USB_Device_ControlRequest>:
 2d2:	08 95       	ret

000002d4 <CALLBACK_USB_GetDescriptor>:
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
 2d4:	92 30       	cpi	r25, 0x02	; 2
 2d6:	29 f0       	breq	.+10     	; 0x2e2 <CALLBACK_USB_GetDescriptor+0xe>
 2d8:	93 30       	cpi	r25, 0x03	; 3
 2da:	41 f0       	breq	.+16     	; 0x2ec <CALLBACK_USB_GetDescriptor+0x18>
 2dc:	91 30       	cpi	r25, 0x01	; 1
 2de:	e9 f4       	brne	.+58     	; 0x31a <CALLBACK_USB_GetDescriptor+0x46>
 2e0:	17 c0       	rjmp	.+46     	; 0x310 <CALLBACK_USB_GetDescriptor+0x3c>
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
			Size    = sizeof(USB_Descriptor_Configuration_t);
 2e2:	85 e6       	ldi	r24, 0x65	; 101
 2e4:	90 e0       	ldi	r25, 0x00	; 0
		case DTYPE_Device:
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
 2e6:	ea ee       	ldi	r30, 0xEA	; 234
 2e8:	f0 e0       	ldi	r31, 0x00	; 0
			Size    = sizeof(USB_Descriptor_Configuration_t);
			break;
 2ea:	1b c0       	rjmp	.+54     	; 0x322 <CALLBACK_USB_GetDescriptor+0x4e>
		case DTYPE_String:
			switch (DescriptorNumber)
 2ec:	81 30       	cpi	r24, 0x01	; 1
 2ee:	41 f0       	breq	.+16     	; 0x300 <CALLBACK_USB_GetDescriptor+0x2c>
 2f0:	81 30       	cpi	r24, 0x01	; 1
 2f2:	18 f0       	brcs	.+6      	; 0x2fa <CALLBACK_USB_GetDescriptor+0x26>
 2f4:	82 30       	cpi	r24, 0x02	; 2
 2f6:	89 f4       	brne	.+34     	; 0x31a <CALLBACK_USB_GetDescriptor+0x46>
 2f8:	06 c0       	rjmp	.+12     	; 0x306 <CALLBACK_USB_GetDescriptor+0x32>
			{
				case 0x00:
					Address = &LanguageString;
					Size    = pgm_read_byte(&LanguageString.Header.Size);
 2fa:	e6 ee       	ldi	r30, 0xE6	; 230
 2fc:	f0 e0       	ldi	r31, 0x00	; 0
 2fe:	05 c0       	rjmp	.+10     	; 0x30a <CALLBACK_USB_GetDescriptor+0x36>
					break;
				case 0x01:
					Address = &ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
 300:	ec ec       	ldi	r30, 0xCC	; 204
 302:	f0 e0       	ldi	r31, 0x00	; 0
 304:	02 c0       	rjmp	.+4      	; 0x30a <CALLBACK_USB_GetDescriptor+0x36>
					break;
				case 0x02:
					Address = &ProductString;
					Size    = pgm_read_byte(&ProductString.Header.Size);
 306:	ec ea       	ldi	r30, 0xAC	; 172
 308:	f0 e0       	ldi	r31, 0x00	; 0
 30a:	84 91       	lpm	r24, Z
 30c:	90 e0       	ldi	r25, 0x00	; 0
					break;
 30e:	09 c0       	rjmp	.+18     	; 0x322 <CALLBACK_USB_GetDescriptor+0x4e>

	switch (DescriptorType)
	{
		case DTYPE_Device:
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
 310:	82 e1       	ldi	r24, 0x12	; 18
 312:	90 e0       	ldi	r25, 0x00	; 0
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
	{
		case DTYPE_Device:
			Address = &DeviceDescriptor;
 314:	ef e4       	ldi	r30, 0x4F	; 79
 316:	f1 e0       	ldi	r31, 0x01	; 1
 318:	04 c0       	rjmp	.+8      	; 0x322 <CALLBACK_USB_GetDescriptor+0x4e>
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;
 31a:	80 e0       	ldi	r24, 0x00	; 0
 31c:	90 e0       	ldi	r25, 0x00	; 0
                                    const void** const DescriptorAddress)
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
 31e:	e0 e0       	ldi	r30, 0x00	; 0
 320:	f0 e0       	ldi	r31, 0x00	; 0
			}

			break;
	}

	*DescriptorAddress = Address;
 322:	da 01       	movw	r26, r20
 324:	11 96       	adiw	r26, 0x01	; 1
 326:	fc 93       	st	X, r31
 328:	ee 93       	st	-X, r30
	return Size;
}
 32a:	08 95       	ret

0000032c <Endpoint_Write_Stream_LE>:
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
 32c:	af 92       	push	r10
 32e:	bf 92       	push	r11
 330:	cf 92       	push	r12
 332:	df 92       	push	r13
 334:	ef 92       	push	r14
 336:	ff 92       	push	r15
 338:	1f 93       	push	r17
 33a:	cf 93       	push	r28
 33c:	df 93       	push	r29
 33e:	ec 01       	movw	r28, r24
 340:	7b 01       	movw	r14, r22
 342:	6a 01       	movw	r12, r20
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	uint16_t BytesInTransfer = 0;
	uint8_t  ErrorCode;

	if ((ErrorCode = Endpoint_WaitUntilReady()))
 344:	e9 d1       	rcall	.+978    	; 0x718 <Endpoint_WaitUntilReady>
 346:	18 2f       	mov	r17, r24
 348:	88 23       	and	r24, r24
 34a:	a9 f5       	brne	.+106    	; 0x3b6 <Endpoint_Write_Stream_LE+0x8a>
 34c:	c1 14       	cp	r12, r1
	  return ErrorCode;

	if (BytesProcessed != NULL)
 34e:	d1 04       	cpc	r13, r1
 350:	39 f0       	breq	.+14     	; 0x360 <Endpoint_Write_Stream_LE+0x34>
 352:	f6 01       	movw	r30, r12
	{
		Length -= *BytesProcessed;
 354:	20 81       	ld	r18, Z
 356:	31 81       	ldd	r19, Z+1	; 0x01
 358:	e2 1a       	sub	r14, r18
 35a:	f3 0a       	sbc	r15, r19
 35c:	c2 0f       	add	r28, r18
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
 35e:	d3 1f       	adc	r29, r19
 360:	aa 24       	eor	r10, r10

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
 362:	bb 24       	eor	r11, r11
 364:	23 c0       	rjmp	.+70     	; 0x3ac <Endpoint_Write_Stream_LE+0x80>
 366:	80 91 e8 00 	lds	r24, 0x00E8
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
 36a:	85 fd       	sbrc	r24, 5
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
	{
		if (!(Endpoint_IsReadWriteAllowed()))
 36c:	16 c0       	rjmp	.+44     	; 0x39a <Endpoint_Write_Stream_LE+0x6e>
 36e:	80 91 e8 00 	lds	r24, 0x00E8
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 372:	8e 77       	andi	r24, 0x7E	; 126
 374:	80 93 e8 00 	sts	0x00E8, r24
 378:	8a d4       	rcall	.+2324   	; 0xc8e <USB_USBTask>
		{
			TEMPLATE_CLEAR_ENDPOINT();

			#if !defined(INTERRUPT_CONTROL_ENDPOINT)
			USB_USBTask();
 37a:	c1 14       	cp	r12, r1
 37c:	d1 04       	cpc	r13, r1
			#endif

			if (BytesProcessed != NULL)
 37e:	49 f0       	breq	.+18     	; 0x392 <Endpoint_Write_Stream_LE+0x66>
 380:	f6 01       	movw	r30, r12
 382:	80 81       	ld	r24, Z
			{
				*BytesProcessed += BytesInTransfer;
 384:	91 81       	ldd	r25, Z+1	; 0x01
 386:	8a 0d       	add	r24, r10
 388:	9b 1d       	adc	r25, r11
 38a:	91 83       	std	Z+1, r25	; 0x01
 38c:	80 83       	st	Z, r24
 38e:	15 e0       	ldi	r17, 0x05	; 5
 390:	12 c0       	rjmp	.+36     	; 0x3b6 <Endpoint_Write_Stream_LE+0x8a>
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
 392:	c2 d1       	rcall	.+900    	; 0x718 <Endpoint_WaitUntilReady>
 394:	88 23       	and	r24, r24
			}

			if ((ErrorCode = Endpoint_WaitUntilReady()))
 396:	51 f0       	breq	.+20     	; 0x3ac <Endpoint_Write_Stream_LE+0x80>
 398:	0d c0       	rjmp	.+26     	; 0x3b4 <Endpoint_Write_Stream_LE+0x88>
 39a:	89 91       	ld	r24, Y+
 39c:	80 93 f1 00 	sts	0x00F1, r24
			  return ErrorCode;
		}
		else
		{
			TEMPLATE_TRANSFER_BYTE(DataStream);
 3a0:	08 94       	sec
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
 3a2:	e1 08       	sbc	r14, r1
 3a4:	f1 08       	sbc	r15, r1
			TEMPLATE_BUFFER_MOVE(DataStream, 1);
			Length--;
 3a6:	08 94       	sec
 3a8:	a1 1c       	adc	r10, r1
 3aa:	b1 1c       	adc	r11, r1
			BytesInTransfer++;
 3ac:	e1 14       	cp	r14, r1
 3ae:	f1 04       	cpc	r15, r1
 3b0:	d1 f6       	brne	.-76     	; 0x366 <Endpoint_Write_Stream_LE+0x3a>
	{
		Length -= *BytesProcessed;
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
 3b2:	01 c0       	rjmp	.+2      	; 0x3b6 <Endpoint_Write_Stream_LE+0x8a>
 3b4:	18 2f       	mov	r17, r24
 3b6:	81 2f       	mov	r24, r17
 3b8:	df 91       	pop	r29
			{
				*BytesProcessed += BytesInTransfer;
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
			}

			if ((ErrorCode = Endpoint_WaitUntilReady()))
 3ba:	cf 91       	pop	r28
			BytesInTransfer++;
		}
	}

	return ENDPOINT_RWSTREAM_NoError;
}
 3bc:	1f 91       	pop	r17
 3be:	ff 90       	pop	r15
 3c0:	ef 90       	pop	r14
 3c2:	df 90       	pop	r13
 3c4:	cf 90       	pop	r12
 3c6:	bf 90       	pop	r11
 3c8:	af 90       	pop	r10
 3ca:	08 95       	ret

000003cc <Endpoint_Read_Stream_LE>:
 3cc:	af 92       	push	r10
 3ce:	bf 92       	push	r11
 3d0:	cf 92       	push	r12
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
 3d2:	df 92       	push	r13
 3d4:	ef 92       	push	r14
 3d6:	ff 92       	push	r15
 3d8:	1f 93       	push	r17
 3da:	cf 93       	push	r28
 3dc:	df 93       	push	r29
 3de:	ec 01       	movw	r28, r24
 3e0:	7b 01       	movw	r14, r22
 3e2:	6a 01       	movw	r12, r20
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	uint16_t BytesInTransfer = 0;
	uint8_t  ErrorCode;

	if ((ErrorCode = Endpoint_WaitUntilReady()))
 3e4:	99 d1       	rcall	.+818    	; 0x718 <Endpoint_WaitUntilReady>
 3e6:	18 2f       	mov	r17, r24
 3e8:	88 23       	and	r24, r24
 3ea:	a9 f5       	brne	.+106    	; 0x456 <Endpoint_Read_Stream_LE+0x8a>
 3ec:	c1 14       	cp	r12, r1
	  return ErrorCode;

	if (BytesProcessed != NULL)
 3ee:	d1 04       	cpc	r13, r1
 3f0:	39 f0       	breq	.+14     	; 0x400 <Endpoint_Read_Stream_LE+0x34>
 3f2:	f6 01       	movw	r30, r12
	{
		Length -= *BytesProcessed;
 3f4:	20 81       	ld	r18, Z
 3f6:	31 81       	ldd	r19, Z+1	; 0x01
 3f8:	e2 1a       	sub	r14, r18
 3fa:	f3 0a       	sbc	r15, r19
 3fc:	c2 0f       	add	r28, r18
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
 3fe:	d3 1f       	adc	r29, r19
 400:	aa 24       	eor	r10, r10

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
 402:	bb 24       	eor	r11, r11
 404:	23 c0       	rjmp	.+70     	; 0x44c <Endpoint_Read_Stream_LE+0x80>
 406:	80 91 e8 00 	lds	r24, 0x00E8
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
 40a:	85 fd       	sbrc	r24, 5
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
	{
		if (!(Endpoint_IsReadWriteAllowed()))
 40c:	16 c0       	rjmp	.+44     	; 0x43a <Endpoint_Read_Stream_LE+0x6e>
 40e:	80 91 e8 00 	lds	r24, 0x00E8
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 412:	8b 77       	andi	r24, 0x7B	; 123
 414:	80 93 e8 00 	sts	0x00E8, r24
 418:	3a d4       	rcall	.+2164   	; 0xc8e <USB_USBTask>
		{
			TEMPLATE_CLEAR_ENDPOINT();

			#if !defined(INTERRUPT_CONTROL_ENDPOINT)
			USB_USBTask();
 41a:	c1 14       	cp	r12, r1
 41c:	d1 04       	cpc	r13, r1
			#endif

			if (BytesProcessed != NULL)
 41e:	49 f0       	breq	.+18     	; 0x432 <Endpoint_Read_Stream_LE+0x66>
 420:	f6 01       	movw	r30, r12
 422:	80 81       	ld	r24, Z
			{
				*BytesProcessed += BytesInTransfer;
 424:	91 81       	ldd	r25, Z+1	; 0x01
 426:	8a 0d       	add	r24, r10
 428:	9b 1d       	adc	r25, r11
 42a:	91 83       	std	Z+1, r25	; 0x01
 42c:	80 83       	st	Z, r24
 42e:	15 e0       	ldi	r17, 0x05	; 5
 430:	12 c0       	rjmp	.+36     	; 0x456 <Endpoint_Read_Stream_LE+0x8a>
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
 432:	72 d1       	rcall	.+740    	; 0x718 <Endpoint_WaitUntilReady>
 434:	88 23       	and	r24, r24
			}

			if ((ErrorCode = Endpoint_WaitUntilReady()))
 436:	51 f0       	breq	.+20     	; 0x44c <Endpoint_Read_Stream_LE+0x80>
 438:	0d c0       	rjmp	.+26     	; 0x454 <Endpoint_Read_Stream_LE+0x88>
 43a:	80 91 f1 00 	lds	r24, 0x00F1
 43e:	89 93       	st	Y+, r24
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
 440:	08 94       	sec
 442:	e1 08       	sbc	r14, r1
			  return ErrorCode;
		}
		else
		{
			TEMPLATE_TRANSFER_BYTE(DataStream);
 444:	f1 08       	sbc	r15, r1
			TEMPLATE_BUFFER_MOVE(DataStream, 1);
			Length--;
 446:	08 94       	sec
 448:	a1 1c       	adc	r10, r1
 44a:	b1 1c       	adc	r11, r1
			BytesInTransfer++;
 44c:	e1 14       	cp	r14, r1
 44e:	f1 04       	cpc	r15, r1
 450:	d1 f6       	brne	.-76     	; 0x406 <Endpoint_Read_Stream_LE+0x3a>
	{
		Length -= *BytesProcessed;
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
 452:	01 c0       	rjmp	.+2      	; 0x456 <Endpoint_Read_Stream_LE+0x8a>
 454:	18 2f       	mov	r17, r24
 456:	81 2f       	mov	r24, r17
 458:	df 91       	pop	r29
			{
				*BytesProcessed += BytesInTransfer;
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
			}

			if ((ErrorCode = Endpoint_WaitUntilReady()))
 45a:	cf 91       	pop	r28
			BytesInTransfer++;
		}
	}

	return ENDPOINT_RWSTREAM_NoError;
}
 45c:	1f 91       	pop	r17
 45e:	ff 90       	pop	r15
 460:	ef 90       	pop	r14
 462:	df 90       	pop	r13
 464:	cf 90       	pop	r12
 466:	bf 90       	pop	r11
 468:	af 90       	pop	r10
 46a:	08 95       	ret

0000046c <Endpoint_Write_Control_Stream_LE>:
 46c:	40 91 28 01 	lds	r20, 0x0128
 470:	50 91 29 01 	lds	r21, 0x0129
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
 474:	46 17       	cp	r20, r22
 476:	57 07       	cpc	r21, r23
 478:	20 f4       	brcc	.+8      	; 0x482 <Endpoint_Write_Control_Stream_LE+0x16>
 47a:	ba 01       	movw	r22, r20
 47c:	fc 01       	movw	r30, r24
 47e:	40 e0       	ldi	r20, 0x00	; 0
 480:	3c c0       	rjmp	.+120    	; 0x4fa <Endpoint_Write_Control_Stream_LE+0x8e>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
 482:	61 15       	cp	r22, r1
 484:	71 05       	cpc	r23, r1
 486:	d1 f7       	brne	.-12     	; 0x47c <Endpoint_Write_Control_Stream_LE+0x10>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 488:	40 91 e8 00 	lds	r20, 0x00E8
 48c:	4e 77       	andi	r20, 0x7E	; 126
 48e:	40 93 e8 00 	sts	0x00E8, r20
 492:	f4 cf       	rjmp	.-24     	; 0x47c <Endpoint_Write_Control_Stream_LE+0x10>
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
 494:	80 91 21 01 	lds	r24, 0x0121

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
 498:	88 23       	and	r24, r24
 49a:	09 f4       	brne	.+2      	; 0x49e <Endpoint_Write_Control_Stream_LE+0x32>
 49c:	44 c0       	rjmp	.+136    	; 0x526 <Endpoint_Write_Control_Stream_LE+0xba>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
 49e:	85 30       	cpi	r24, 0x05	; 5
 4a0:	f1 f1       	breq	.+124    	; 0x51e <Endpoint_Write_Control_Stream_LE+0xb2>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 4a2:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
 4a6:	83 fd       	sbrc	r24, 3
 4a8:	3c c0       	rjmp	.+120    	; 0x522 <Endpoint_Write_Control_Stream_LE+0xb6>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 4aa:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
 4ae:	82 fd       	sbrc	r24, 2
 4b0:	30 c0       	rjmp	.+96     	; 0x512 <Endpoint_Write_Control_Stream_LE+0xa6>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 4b2:	80 91 e8 00 	lds	r24, 0x00E8
		  break;

		if (Endpoint_IsINReady())
 4b6:	80 ff       	sbrs	r24, 0
 4b8:	20 c0       	rjmp	.+64     	; 0x4fa <Endpoint_Write_Control_Stream_LE+0x8e>
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
 4ba:	90 91 f3 00 	lds	r25, 0x00F3
 4be:	80 91 f2 00 	lds	r24, 0x00F2
 4c2:	39 2f       	mov	r19, r25
 4c4:	20 e0       	ldi	r18, 0x00	; 0
 4c6:	90 e0       	ldi	r25, 0x00	; 0
 4c8:	82 2b       	or	r24, r18
 4ca:	93 2b       	or	r25, r19
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
 4cc:	06 c0       	rjmp	.+12     	; 0x4da <Endpoint_Write_Control_Stream_LE+0x6e>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
 4ce:	41 91       	ld	r20, Z+
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
 4d0:	40 93 f1 00 	sts	0x00F1, r20
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
 4d4:	61 50       	subi	r22, 0x01	; 1
 4d6:	70 40       	sbci	r23, 0x00	; 0
				BytesInEndpoint++;
 4d8:	01 96       	adiw	r24, 0x01	; 1

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
 4da:	61 15       	cp	r22, r1
 4dc:	71 05       	cpc	r23, r1
 4de:	19 f0       	breq	.+6      	; 0x4e6 <Endpoint_Write_Control_Stream_LE+0x7a>
 4e0:	88 30       	cpi	r24, 0x08	; 8
 4e2:	91 05       	cpc	r25, r1
 4e4:	a0 f3       	brcs	.-24     	; 0x4ce <Endpoint_Write_Control_Stream_LE+0x62>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
 4e6:	41 e0       	ldi	r20, 0x01	; 1
 4e8:	88 30       	cpi	r24, 0x08	; 8
 4ea:	91 05       	cpc	r25, r1
 4ec:	09 f0       	breq	.+2      	; 0x4f0 <Endpoint_Write_Control_Stream_LE+0x84>
 4ee:	40 e0       	ldi	r20, 0x00	; 0
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 4f0:	80 91 e8 00 	lds	r24, 0x00E8
 4f4:	8e 77       	andi	r24, 0x7E	; 126
 4f6:	80 93 e8 00 	sts	0x00E8, r24
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
 4fa:	61 15       	cp	r22, r1
 4fc:	71 05       	cpc	r23, r1
 4fe:	51 f6       	brne	.-108    	; 0x494 <Endpoint_Write_Control_Stream_LE+0x28>
 500:	44 23       	and	r20, r20
 502:	41 f6       	brne	.-112    	; 0x494 <Endpoint_Write_Control_Stream_LE+0x28>
 504:	06 c0       	rjmp	.+12     	; 0x512 <Endpoint_Write_Control_Stream_LE+0xa6>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
 506:	80 91 21 01 	lds	r24, 0x0121

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
 50a:	88 23       	and	r24, r24
 50c:	61 f0       	breq	.+24     	; 0x526 <Endpoint_Write_Control_Stream_LE+0xba>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
 50e:	85 30       	cpi	r24, 0x05	; 5
 510:	61 f0       	breq	.+24     	; 0x52a <Endpoint_Write_Control_Stream_LE+0xbe>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 512:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
 516:	82 ff       	sbrs	r24, 2
 518:	f6 cf       	rjmp	.-20     	; 0x506 <Endpoint_Write_Control_Stream_LE+0x9a>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
 51a:	80 e0       	ldi	r24, 0x00	; 0
 51c:	08 95       	ret
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
 51e:	83 e0       	ldi	r24, 0x03	; 3
 520:	08 95       	ret
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
 522:	81 e0       	ldi	r24, 0x01	; 1
 524:	08 95       	ret
	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
 526:	82 e0       	ldi	r24, 0x02	; 2
 528:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
 52a:	83 e0       	ldi	r24, 0x03	; 3
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
 52c:	08 95       	ret

0000052e <Endpoint_Write_Control_PStream_LE>:
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
 52e:	40 91 28 01 	lds	r20, 0x0128
 532:	50 91 29 01 	lds	r21, 0x0129
 536:	46 17       	cp	r20, r22
 538:	57 07       	cpc	r21, r23
 53a:	20 f4       	brcc	.+8      	; 0x544 <Endpoint_Write_Control_PStream_LE+0x16>
 53c:	ba 01       	movw	r22, r20
 53e:	fc 01       	movw	r30, r24
 540:	40 e0       	ldi	r20, 0x00	; 0
 542:	3e c0       	rjmp	.+124    	; 0x5c0 <Endpoint_Write_Control_PStream_LE+0x92>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
 544:	61 15       	cp	r22, r1
 546:	71 05       	cpc	r23, r1
 548:	d1 f7       	brne	.-12     	; 0x53e <Endpoint_Write_Control_PStream_LE+0x10>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 54a:	40 91 e8 00 	lds	r20, 0x00E8
 54e:	4e 77       	andi	r20, 0x7E	; 126
 550:	40 93 e8 00 	sts	0x00E8, r20
 554:	f4 cf       	rjmp	.-24     	; 0x53e <Endpoint_Write_Control_PStream_LE+0x10>
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
 556:	80 91 21 01 	lds	r24, 0x0121

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
 55a:	88 23       	and	r24, r24
 55c:	09 f4       	brne	.+2      	; 0x560 <Endpoint_Write_Control_PStream_LE+0x32>
 55e:	46 c0       	rjmp	.+140    	; 0x5ec <Endpoint_Write_Control_PStream_LE+0xbe>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
 560:	85 30       	cpi	r24, 0x05	; 5
 562:	09 f4       	brne	.+2      	; 0x566 <Endpoint_Write_Control_PStream_LE+0x38>
 564:	3f c0       	rjmp	.+126    	; 0x5e4 <Endpoint_Write_Control_PStream_LE+0xb6>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 566:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
 56a:	83 fd       	sbrc	r24, 3
 56c:	3d c0       	rjmp	.+122    	; 0x5e8 <Endpoint_Write_Control_PStream_LE+0xba>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 56e:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
 572:	82 fd       	sbrc	r24, 2
 574:	31 c0       	rjmp	.+98     	; 0x5d8 <Endpoint_Write_Control_PStream_LE+0xaa>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 576:	80 91 e8 00 	lds	r24, 0x00E8
		  break;

		if (Endpoint_IsINReady())
 57a:	80 ff       	sbrs	r24, 0
 57c:	21 c0       	rjmp	.+66     	; 0x5c0 <Endpoint_Write_Control_PStream_LE+0x92>
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
 57e:	90 91 f3 00 	lds	r25, 0x00F3
 582:	80 91 f2 00 	lds	r24, 0x00F2
 586:	39 2f       	mov	r19, r25
 588:	20 e0       	ldi	r18, 0x00	; 0
 58a:	90 e0       	ldi	r25, 0x00	; 0
 58c:	82 2b       	or	r24, r18
 58e:	93 2b       	or	r25, r19
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
 590:	07 c0       	rjmp	.+14     	; 0x5a0 <Endpoint_Write_Control_PStream_LE+0x72>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
 592:	44 91       	lpm	r20, Z
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
 594:	40 93 f1 00 	sts	0x00F1, r20
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
 598:	31 96       	adiw	r30, 0x01	; 1
				Length--;
 59a:	61 50       	subi	r22, 0x01	; 1
 59c:	70 40       	sbci	r23, 0x00	; 0
				BytesInEndpoint++;
 59e:	01 96       	adiw	r24, 0x01	; 1

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
 5a0:	61 15       	cp	r22, r1
 5a2:	71 05       	cpc	r23, r1
 5a4:	19 f0       	breq	.+6      	; 0x5ac <Endpoint_Write_Control_PStream_LE+0x7e>
 5a6:	88 30       	cpi	r24, 0x08	; 8
 5a8:	91 05       	cpc	r25, r1
 5aa:	98 f3       	brcs	.-26     	; 0x592 <Endpoint_Write_Control_PStream_LE+0x64>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
 5ac:	41 e0       	ldi	r20, 0x01	; 1
 5ae:	88 30       	cpi	r24, 0x08	; 8
 5b0:	91 05       	cpc	r25, r1
 5b2:	09 f0       	breq	.+2      	; 0x5b6 <Endpoint_Write_Control_PStream_LE+0x88>
 5b4:	40 e0       	ldi	r20, 0x00	; 0
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 5b6:	80 91 e8 00 	lds	r24, 0x00E8
 5ba:	8e 77       	andi	r24, 0x7E	; 126
 5bc:	80 93 e8 00 	sts	0x00E8, r24
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
 5c0:	61 15       	cp	r22, r1
 5c2:	71 05       	cpc	r23, r1
 5c4:	41 f6       	brne	.-112    	; 0x556 <Endpoint_Write_Control_PStream_LE+0x28>
 5c6:	44 23       	and	r20, r20
 5c8:	31 f6       	brne	.-116    	; 0x556 <Endpoint_Write_Control_PStream_LE+0x28>
 5ca:	06 c0       	rjmp	.+12     	; 0x5d8 <Endpoint_Write_Control_PStream_LE+0xaa>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
 5cc:	80 91 21 01 	lds	r24, 0x0121

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
 5d0:	88 23       	and	r24, r24
 5d2:	61 f0       	breq	.+24     	; 0x5ec <Endpoint_Write_Control_PStream_LE+0xbe>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
 5d4:	85 30       	cpi	r24, 0x05	; 5
 5d6:	61 f0       	breq	.+24     	; 0x5f0 <Endpoint_Write_Control_PStream_LE+0xc2>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 5d8:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
 5dc:	82 ff       	sbrs	r24, 2
 5de:	f6 cf       	rjmp	.-20     	; 0x5cc <Endpoint_Write_Control_PStream_LE+0x9e>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
 5e0:	80 e0       	ldi	r24, 0x00	; 0
 5e2:	08 95       	ret
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
 5e4:	83 e0       	ldi	r24, 0x03	; 3
 5e6:	08 95       	ret
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
 5e8:	81 e0       	ldi	r24, 0x01	; 1
 5ea:	08 95       	ret
	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
 5ec:	82 e0       	ldi	r24, 0x02	; 2
 5ee:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
 5f0:	83 e0       	ldi	r24, 0x03	; 3
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
 5f2:	08 95       	ret

000005f4 <Endpoint_ConfigureEndpoint_Prv>:
	UECFG0X = UECFG0XData;
	UECFG1X = UECFG1XData;

	return Endpoint_IsConfigured();
#else
	for (uint8_t EPNum = Number; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
 5f4:	98 2f       	mov	r25, r24
 5f6:	2a c0       	rjmp	.+84     	; 0x64c <Endpoint_ConfigureEndpoint_Prv+0x58>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 5f8:	90 93 e9 00 	sts	0x00E9, r25
		uint8_t UECFG1XTemp;
		uint8_t UEIENXTemp;

		Endpoint_SelectEndpoint(EPNum);

		if (EPNum == Number)
 5fc:	98 17       	cp	r25, r24
 5fe:	39 f0       	breq	.+14     	; 0x60e <Endpoint_ConfigureEndpoint_Prv+0x1a>
			UECFG1XTemp = UECFG1XData;
			UEIENXTemp  = 0;
		}
		else
		{
			UECFG0XTemp = UECFG0X;
 600:	70 91 ec 00 	lds	r23, 0x00EC
			UECFG1XTemp = UECFG1X;
 604:	20 91 ed 00 	lds	r18, 0x00ED
			UEIENXTemp  = UEIENX;
 608:	50 91 f0 00 	lds	r21, 0x00F0
 60c:	03 c0       	rjmp	.+6      	; 0x614 <Endpoint_ConfigureEndpoint_Prv+0x20>
		Endpoint_SelectEndpoint(EPNum);

		if (EPNum == Number)
		{
			UECFG0XTemp = UECFG0XData;
			UECFG1XTemp = UECFG1XData;
 60e:	24 2f       	mov	r18, r20

		Endpoint_SelectEndpoint(EPNum);

		if (EPNum == Number)
		{
			UECFG0XTemp = UECFG0XData;
 610:	76 2f       	mov	r23, r22
			UECFG1XTemp = UECFG1XData;
			UEIENXTemp  = 0;
 612:	50 e0       	ldi	r21, 0x00	; 0
			UECFG0XTemp = UECFG0X;
			UECFG1XTemp = UECFG1X;
			UEIENXTemp  = UEIENX;
		}

		if (!(UECFG1XTemp & (1 << ALLOC)))
 614:	21 ff       	sbrs	r18, 1
 616:	19 c0       	rjmp	.+50     	; 0x64a <Endpoint_ConfigureEndpoint_Prv+0x56>
			 *  to and from a host.
			 */
			static inline void Endpoint_DisableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_DisableEndpoint(void)
			{
				UECONX &= ~(1 << EPEN);
 618:	30 91 eb 00 	lds	r19, 0x00EB
 61c:	3e 7f       	andi	r19, 0xFE	; 254
 61e:	30 93 eb 00 	sts	0x00EB, r19
		  continue;

		Endpoint_DisableEndpoint();
		UECFG1X &= ~(1 << ALLOC);
 622:	30 91 ed 00 	lds	r19, 0x00ED
 626:	3d 7f       	andi	r19, 0xFD	; 253
 628:	30 93 ed 00 	sts	0x00ED, r19
			 *  \note Endpoints must first be configured properly via \ref Endpoint_ConfigureEndpoint().
			 */
			static inline void Endpoint_EnableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_EnableEndpoint(void)
			{
				UECONX |= (1 << EPEN);
 62c:	30 91 eb 00 	lds	r19, 0x00EB
 630:	31 60       	ori	r19, 0x01	; 1
 632:	30 93 eb 00 	sts	0x00EB, r19

		Endpoint_EnableEndpoint();
		UECFG0X = UECFG0XTemp;
 636:	70 93 ec 00 	sts	0x00EC, r23
		UECFG1X = UECFG1XTemp;
 63a:	20 93 ed 00 	sts	0x00ED, r18
		UEIENX  = UEIENXTemp;
 63e:	50 93 f0 00 	sts	0x00F0, r21
			 *  \return Boolean \c true if the currently selected endpoint has been configured, \c false otherwise.
			 */
			static inline bool Endpoint_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsConfigured(void)
			{
				return ((UESTA0X & (1 << CFGOK)) ? true : false);
 642:	20 91 ee 00 	lds	r18, 0x00EE

		if (!(Endpoint_IsConfigured()))
 646:	27 ff       	sbrs	r18, 7
 648:	08 c0       	rjmp	.+16     	; 0x65a <Endpoint_ConfigureEndpoint_Prv+0x66>
	UECFG0X = UECFG0XData;
	UECFG1X = UECFG1XData;

	return Endpoint_IsConfigured();
#else
	for (uint8_t EPNum = Number; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
 64a:	9f 5f       	subi	r25, 0xFF	; 255
 64c:	97 30       	cpi	r25, 0x07	; 7
 64e:	a0 f2       	brcs	.-88     	; 0x5f8 <Endpoint_ConfigureEndpoint_Prv+0x4>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 650:	8f 70       	andi	r24, 0x0F	; 15
 652:	80 93 e9 00 	sts	0x00E9, r24
		if (!(Endpoint_IsConfigured()))
		  return false;
	}

	Endpoint_SelectEndpoint(Number);
	return true;
 656:	81 e0       	ldi	r24, 0x01	; 1
 658:	08 95       	ret
		UECFG0X = UECFG0XTemp;
		UECFG1X = UECFG1XTemp;
		UEIENX  = UEIENXTemp;

		if (!(Endpoint_IsConfigured()))
		  return false;
 65a:	80 e0       	ldi	r24, 0x00	; 0
	}

	Endpoint_SelectEndpoint(Number);
	return true;
#endif
}
 65c:	08 95       	ret

0000065e <Endpoint_ConfigureEndpointTable>:
uint8_t USB_Device_ControlEndpointSize = ENDPOINT_CONTROLEP_DEFAULT_SIZE;
#endif

bool Endpoint_ConfigureEndpointTable(const USB_Endpoint_Table_t* const Table,
                                     const uint8_t Entries)
{
 65e:	0f 93       	push	r16
 660:	1f 93       	push	r17
 662:	cf 93       	push	r28
 664:	df 93       	push	r29
 666:	16 2f       	mov	r17, r22
	{
		if (!(Table[i].Address))
		  continue;
	
		if (!(Endpoint_ConfigureEndpoint(Table[i].Address, Table[i].Type, Table[i].Size, Table[i].Banks)))
		  return false;
 668:	ec 01       	movw	r28, r24
#endif

bool Endpoint_ConfigureEndpointTable(const USB_Endpoint_Table_t* const Table,
                                     const uint8_t Entries)
{
	for (uint8_t i = 0; i < Entries; i++)
 66a:	00 e0       	ldi	r16, 0x00	; 0
 66c:	2a c0       	rjmp	.+84     	; 0x6c2 <Endpoint_ConfigureEndpointTable+0x64>
	{
		if (!(Table[i].Address))
 66e:	98 81       	ld	r25, Y
 670:	99 23       	and	r25, r25
 672:	29 f1       	breq	.+74     	; 0x6be <Endpoint_ConfigureEndpointTable+0x60>
		  continue;
	
		if (!(Endpoint_ConfigureEndpoint(Table[i].Address, Table[i].Type, Table[i].Size, Table[i].Banks)))
 674:	6b 81       	ldd	r22, Y+3	; 0x03
 676:	e9 81       	ldd	r30, Y+1	; 0x01
 678:	fa 81       	ldd	r31, Y+2	; 0x02
 67a:	2c 81       	ldd	r18, Y+4	; 0x04
			static inline bool Endpoint_ConfigureEndpoint(const uint8_t Address,
			                                              const uint8_t Type,
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);
 67c:	89 2f       	mov	r24, r25
 67e:	8f 70       	andi	r24, 0x0F	; 15

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
 680:	87 30       	cpi	r24, 0x07	; 7
 682:	18 f5       	brcc	.+70     	; 0x6ca <Endpoint_ConfigureEndpointTable+0x6c>
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
				                                      ((Type << EPTYPE0) | ((Address & ENDPOINT_DIR_IN) ? (1 << EPDIR) : 0)),
 684:	62 95       	swap	r22
 686:	66 0f       	add	r22, r22
 688:	66 0f       	add	r22, r22
 68a:	60 7c       	andi	r22, 0xC0	; 192
 68c:	99 1f       	adc	r25, r25
 68e:	99 27       	eor	r25, r25
 690:	99 1f       	adc	r25, r25
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
 692:	69 2b       	or	r22, r25
 694:	22 30       	cpi	r18, 0x02	; 2
 696:	10 f0       	brcs	.+4      	; 0x69c <Endpoint_ConfigureEndpointTable+0x3e>
 698:	96 e0       	ldi	r25, 0x06	; 6
 69a:	01 c0       	rjmp	.+2      	; 0x69e <Endpoint_ConfigureEndpointTable+0x40>
 69c:	92 e0       	ldi	r25, 0x02	; 2
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes) ATTR_WARN_UNUSED_RESULT ATTR_CONST
			                                                                       ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;
 69e:	28 e0       	ldi	r18, 0x08	; 8
 6a0:	30 e0       	ldi	r19, 0x00	; 0
		/* Inline Functions: */
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes) ATTR_WARN_UNUSED_RESULT ATTR_CONST
			                                                                       ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
 6a2:	40 e0       	ldi	r20, 0x00	; 0
 6a4:	03 c0       	rjmp	.+6      	; 0x6ac <Endpoint_ConfigureEndpointTable+0x4e>
				uint16_t CheckBytes = 8;

				while (CheckBytes < Bytes)
				{
					MaskVal++;
 6a6:	4f 5f       	subi	r20, 0xFF	; 255
					CheckBytes <<= 1;
 6a8:	22 0f       	add	r18, r18
 6aa:	33 1f       	adc	r19, r19
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while (CheckBytes < Bytes)
 6ac:	2e 17       	cp	r18, r30
 6ae:	3f 07       	cpc	r19, r31
 6b0:	d0 f3       	brcs	.-12     	; 0x6a6 <Endpoint_ConfigureEndpointTable+0x48>
				{
					MaskVal++;
					CheckBytes <<= 1;
				}

				return (MaskVal << EPSIZE0);
 6b2:	42 95       	swap	r20
 6b4:	40 7f       	andi	r20, 0xF0	; 240
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
 6b6:	49 2b       	or	r20, r25
 6b8:	9d df       	rcall	.-198    	; 0x5f4 <Endpoint_ConfigureEndpoint_Prv>
 6ba:	88 23       	and	r24, r24
 6bc:	31 f0       	breq	.+12     	; 0x6ca <Endpoint_ConfigureEndpointTable+0x6c>
 6be:	0f 5f       	subi	r16, 0xFF	; 255
#endif

bool Endpoint_ConfigureEndpointTable(const USB_Endpoint_Table_t* const Table,
                                     const uint8_t Entries)
{
	for (uint8_t i = 0; i < Entries; i++)
 6c0:	25 96       	adiw	r28, 0x05	; 5
 6c2:	01 17       	cp	r16, r17
 6c4:	a1 f6       	brne	.-88     	; 0x66e <Endpoint_ConfigureEndpointTable+0x10>
 6c6:	81 e0       	ldi	r24, 0x01	; 1
	
		if (!(Endpoint_ConfigureEndpoint(Table[i].Address, Table[i].Type, Table[i].Size, Table[i].Banks)))
		  return false;
	}
	
	return true;
 6c8:	01 c0       	rjmp	.+2      	; 0x6cc <Endpoint_ConfigureEndpointTable+0x6e>
 6ca:	80 e0       	ldi	r24, 0x00	; 0
	{
		if (!(Table[i].Address))
		  continue;
	
		if (!(Endpoint_ConfigureEndpoint(Table[i].Address, Table[i].Type, Table[i].Size, Table[i].Banks)))
		  return false;
 6cc:	df 91       	pop	r29
	}
	
	return true;
}
 6ce:	cf 91       	pop	r28
 6d0:	1f 91       	pop	r17
 6d2:	0f 91       	pop	r16
 6d4:	08 95       	ret

000006d6 <Endpoint_ClearStatusStage>:
 6d6:	80 91 22 01 	lds	r24, 0x0122
	}
}

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
 6da:	87 ff       	sbrs	r24, 7
 6dc:	13 c0       	rjmp	.+38     	; 0x704 <Endpoint_ClearStatusStage+0x2e>
 6de:	04 c0       	rjmp	.+8      	; 0x6e8 <Endpoint_ClearStatusStage+0x12>
	{
		while (!(Endpoint_IsOUTReceived()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
 6e0:	80 91 21 01 	lds	r24, 0x0121
 6e4:	88 23       	and	r24, r24
 6e6:	b9 f0       	breq	.+46     	; 0x716 <Endpoint_ClearStatusStage+0x40>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 6e8:	80 91 e8 00 	lds	r24, 0x00E8

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
	{
		while (!(Endpoint_IsOUTReceived()))
 6ec:	82 ff       	sbrs	r24, 2
 6ee:	f8 cf       	rjmp	.-16     	; 0x6e0 <Endpoint_ClearStatusStage+0xa>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 6f0:	80 91 e8 00 	lds	r24, 0x00E8
 6f4:	8b 77       	andi	r24, 0x7B	; 123
 6f6:	80 93 e8 00 	sts	0x00E8, r24
 6fa:	08 95       	ret
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
 6fc:	80 91 21 01 	lds	r24, 0x0121
 700:	88 23       	and	r24, r24
 702:	49 f0       	breq	.+18     	; 0x716 <Endpoint_ClearStatusStage+0x40>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 704:	80 91 e8 00 	lds	r24, 0x00E8

		Endpoint_ClearOUT();
	}
	else
	{
		while (!(Endpoint_IsINReady()))
 708:	80 ff       	sbrs	r24, 0
 70a:	f8 cf       	rjmp	.-16     	; 0x6fc <Endpoint_ClearStatusStage+0x26>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 70c:	80 91 e8 00 	lds	r24, 0x00E8
 710:	8e 77       	andi	r24, 0x7E	; 126
 712:	80 93 e8 00 	sts	0x00E8, r24
 716:	08 95       	ret

00000718 <Endpoint_WaitUntilReady>:
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
 718:	80 91 e4 00 	lds	r24, 0x00E4
 71c:	90 91 e5 00 	lds	r25, 0x00E5
 720:	45 e6       	ldi	r20, 0x65	; 101
 722:	01 c0       	rjmp	.+2      	; 0x726 <Endpoint_WaitUntilReady+0xe>
 724:	c9 01       	movw	r24, r18
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
 726:	20 91 ec 00 	lds	r18, 0x00EC
 72a:	20 ff       	sbrs	r18, 0
 72c:	23 c0       	rjmp	.+70     	; 0x774 <Endpoint_WaitUntilReady+0x5c>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 72e:	20 91 e8 00 	lds	r18, 0x00E8

	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
 732:	20 fd       	sbrc	r18, 0
 734:	15 c0       	rjmp	.+42     	; 0x760 <Endpoint_WaitUntilReady+0x48>
		{
			if (Endpoint_IsOUTReceived())
			  return ENDPOINT_READYWAIT_NoError;
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;
 736:	20 91 21 01 	lds	r18, 0x0121

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
 73a:	22 23       	and	r18, r18
 73c:	99 f0       	breq	.+38     	; 0x764 <Endpoint_WaitUntilReady+0x4c>
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
 73e:	25 30       	cpi	r18, 0x05	; 5
 740:	99 f0       	breq	.+38     	; 0x768 <Endpoint_WaitUntilReady+0x50>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
 742:	20 91 eb 00 	lds	r18, 0x00EB
		  return ENDPOINT_READYWAIT_BusSuspended;
		else if (Endpoint_IsStalled())
 746:	25 fd       	sbrc	r18, 5
 748:	11 c0       	rjmp	.+34     	; 0x76c <Endpoint_WaitUntilReady+0x54>
 74a:	20 91 e4 00 	lds	r18, 0x00E4
 74e:	30 91 e5 00 	lds	r19, 0x00E5
		  return ENDPOINT_READYWAIT_EndpointStalled;

		uint16_t CurrentFrameNumber = USB_Device_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
 752:	28 17       	cp	r18, r24
 754:	39 07       	cpc	r19, r25
 756:	39 f3       	breq	.-50     	; 0x726 <Endpoint_WaitUntilReady+0xe>
 758:	41 50       	subi	r20, 0x01	; 1
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
 75a:	21 f7       	brne	.-56     	; 0x724 <Endpoint_WaitUntilReady+0xc>
			  return ENDPOINT_READYWAIT_Timeout;
 75c:	84 e0       	ldi	r24, 0x04	; 4
 75e:	08 95       	ret
	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
 760:	80 e0       	ldi	r24, 0x00	; 0
 762:	08 95       	ret
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
 764:	82 e0       	ldi	r24, 0x02	; 2
 766:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_READYWAIT_BusSuspended;
 768:	83 e0       	ldi	r24, 0x03	; 3
 76a:	08 95       	ret
		else if (Endpoint_IsStalled())
		  return ENDPOINT_READYWAIT_EndpointStalled;
 76c:	81 e0       	ldi	r24, 0x01	; 1
 76e:	08 95       	ret
			  return ENDPOINT_READYWAIT_NoError;
		}
		else
		{
			if (Endpoint_IsOUTReceived())
			  return ENDPOINT_READYWAIT_NoError;
 770:	80 e0       	ldi	r24, 0x00	; 0

			if (!(TimeoutMSRem--))
			  return ENDPOINT_READYWAIT_Timeout;
		}
	}
}
 772:	08 95       	ret
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 774:	20 91 e8 00 	lds	r18, 0x00E8
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
		}
		else
		{
			if (Endpoint_IsOUTReceived())
 778:	22 ff       	sbrs	r18, 2
 77a:	dd cf       	rjmp	.-70     	; 0x736 <Endpoint_WaitUntilReady+0x1e>
 77c:	f9 cf       	rjmp	.-14     	; 0x770 <Endpoint_WaitUntilReady+0x58>

0000077e <USB_ResetInterface>:

	USB_IsInitialized = false;
}

void USB_ResetInterface(void)
{
 77e:	0f 93       	push	r16
 780:	1f 93       	push	r17
 782:	cf 93       	push	r28
 784:	df 93       	push	r29
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
 786:	4b d0       	rcall	.+150    	; 0x81e <USB_INT_DisableAllInterrupts>
 788:	52 d0       	rcall	.+164    	; 0x82e <USB_INT_ClearAllInterrupts>
	USB_INT_ClearAllInterrupts();
 78a:	c8 ed       	ldi	r28, 0xD8	; 216
 78c:	d0 e0       	ldi	r29, 0x00	; 0
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
 78e:	88 81       	ld	r24, Y
 790:	8f 77       	andi	r24, 0x7F	; 127
 792:	88 83       	st	Y, r24
 794:	88 81       	ld	r24, Y
 796:	80 68       	ori	r24, 0x80	; 128
				USBCON |=  (1 << USBE);
 798:	88 83       	st	Y, r24
 79a:	88 81       	ld	r24, Y
 79c:	8f 7d       	andi	r24, 0xDF	; 223
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
 79e:	88 83       	st	Y, r24
 7a0:	19 bc       	out	0x29, r1	; 41
 7a2:	10 92 21 01 	sts	0x0121, r1
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState                 = DEVICE_STATE_Unattached;
 7a6:	10 92 1d 01 	sts	0x011D, r1
	USB_Device_ConfigurationNumber  = 0;
 7aa:	10 92 1f 01 	sts	0x011F, r1

	#if !defined(NO_DEVICE_REMOTE_WAKEUP)
	USB_Device_RemoteWakeupEnabled  = false;
 7ae:	10 92 1e 01 	sts	0x011E, r1
	#endif

	#if !defined(NO_DEVICE_SELF_POWER)
	USB_Device_CurrentlySelfPowered = false;
 7b2:	00 ee       	ldi	r16, 0xE0	; 224
 7b4:	10 e0       	ldi	r17, 0x00	; 0
			}

			static inline void USB_Device_SetFullSpeed(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetFullSpeed(void)
			{
				UDCON &= ~(1 << LSM);
 7b6:	f8 01       	movw	r30, r16
 7b8:	80 81       	ld	r24, Z
 7ba:	8b 7f       	andi	r24, 0xFB	; 251
 7bc:	80 83       	st	Z, r24
 7be:	88 81       	ld	r24, Y
 7c0:	81 60       	ori	r24, 0x01	; 1
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBCON |= (1 << VBUSTE);
 7c2:	88 83       	st	Y, r24
 7c4:	80 e0       	ldi	r24, 0x00	; 0
 7c6:	60 e0       	ldi	r22, 0x00	; 0
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
 7c8:	42 e0       	ldi	r20, 0x02	; 2
 7ca:	14 df       	rcall	.-472    	; 0x5f4 <Endpoint_ConfigureEndpoint_Prv>
 7cc:	e1 ee       	ldi	r30, 0xE1	; 225
 7ce:	f0 e0       	ldi	r31, 0x00	; 0
 7d0:	80 81       	ld	r24, Z
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
 7d2:	8e 7f       	andi	r24, 0xFE	; 254
 7d4:	80 83       	st	Z, r24
 7d6:	e2 ee       	ldi	r30, 0xE2	; 226
 7d8:	f0 e0       	ldi	r31, 0x00	; 0
 7da:	80 81       	ld	r24, Z
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
 7dc:	81 60       	ori	r24, 0x01	; 1
 7de:	80 83       	st	Z, r24
 7e0:	80 81       	ld	r24, Z
 7e2:	88 60       	ori	r24, 0x08	; 8
 7e4:	80 83       	st	Z, r24
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
 7e6:	f8 01       	movw	r30, r16
 7e8:	80 81       	ld	r24, Z
 7ea:	8e 7f       	andi	r24, 0xFE	; 254
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
 7ec:	80 83       	st	Z, r24
 7ee:	88 81       	ld	r24, Y
 7f0:	80 61       	ori	r24, 0x10	; 16
 7f2:	88 83       	st	Y, r24

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON |=  (1 << OTGPADE);
 7f4:	df 91       	pop	r29
 7f6:	cf 91       	pop	r28
 7f8:	1f 91       	pop	r17
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
 7fa:	0f 91       	pop	r16
 7fc:	08 95       	ret

000007fe <USB_Init>:
 7fe:	e8 ed       	ldi	r30, 0xD8	; 216
 800:	f0 e0       	ldi	r31, 0x00	; 0
 802:	80 81       	ld	r24, Z
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON &= ~(1 << OTGPADE);
 804:	8f 7e       	andi	r24, 0xEF	; 239
 806:	80 83       	st	Z, r24

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON |=  (1 << UVREGE);
 808:	e7 ed       	ldi	r30, 0xD7	; 215
 80a:	f0 e0       	ldi	r31, 0x00	; 0
 80c:	80 81       	ld	r24, Z
 80e:	81 60       	ori	r24, 0x01	; 1
 810:	80 83       	st	Z, r24
	  USB_REG_Off();

	if (!(USB_Options & USB_OPT_MANUAL_PLL))
	{
		#if defined(USB_SERIES_4_AVR)
		PLLFRQ = (1 << PDIV2);
 812:	84 e0       	ldi	r24, 0x04	; 4
 814:	82 bf       	out	0x32, r24	; 50
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
 816:	81 e0       	ldi	r24, 0x01	; 1
 818:	80 93 20 01 	sts	0x0120, r24

	USB_ResetInterface();
 81c:	b0 cf       	rjmp	.-160    	; 0x77e <USB_ResetInterface>

0000081e <USB_INT_DisableAllInterrupts>:
void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
	#elif defined(USB_SERIES_4_AVR)
	USBCON &= ~(1 << VBUSTE);
 81e:	e8 ed       	ldi	r30, 0xD8	; 216
 820:	f0 e0       	ldi	r31, 0x00	; 0
 822:	80 81       	ld	r24, Z
 824:	8e 7f       	andi	r24, 0xFE	; 254
 826:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
 828:	10 92 e2 00 	sts	0x00E2, r1
	#endif
}
 82c:	08 95       	ret

0000082e <USB_INT_ClearAllInterrupts>:

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
 82e:	10 92 da 00 	sts	0x00DA, r1
	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
 832:	10 92 e1 00 	sts	0x00E1, r1
	#endif
}
 836:	08 95       	ret

00000838 <__vector_10>:

ISR(USB_GEN_vect, ISR_BLOCK)
{
 838:	1f 92       	push	r1
 83a:	0f 92       	push	r0
 83c:	0f b6       	in	r0, 0x3f	; 63
 83e:	0f 92       	push	r0
 840:	11 24       	eor	r1, r1
 842:	2f 93       	push	r18
 844:	3f 93       	push	r19
 846:	4f 93       	push	r20
 848:	5f 93       	push	r21
 84a:	6f 93       	push	r22
 84c:	7f 93       	push	r23
 84e:	8f 93       	push	r24
 850:	9f 93       	push	r25
 852:	af 93       	push	r26
 854:	bf 93       	push	r27
 856:	ef 93       	push	r30
 858:	ff 93       	push	r31
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
					case USB_INT_SOFI:
						return (UDINT  & (1 << SOFI));
 85a:	80 91 e1 00 	lds	r24, 0x00E1
	#if defined(USB_CAN_BE_DEVICE)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
 85e:	82 ff       	sbrs	r24, 2
 860:	0a c0       	rjmp	.+20     	; 0x876 <__vector_10+0x3e>
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
					case USB_INT_SOFI:
						return (UDIEN  & (1 << SOFE));
 862:	80 91 e2 00 	lds	r24, 0x00E2
 866:	82 ff       	sbrs	r24, 2
 868:	06 c0       	rjmp	.+12     	; 0x876 <__vector_10+0x3e>
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
						break;
					case USB_INT_SOFI:
						UDINT  &= ~(1 << SOFI);
 86a:	80 91 e1 00 	lds	r24, 0x00E1
 86e:	8b 7f       	andi	r24, 0xFB	; 251
 870:	80 93 e1 00 	sts	0x00E1, r24
	{
		USB_INT_Clear(USB_INT_SOFI);

		EVENT_USB_Device_StartOfFrame();
 874:	0b d2       	rcall	.+1046   	; 0xc8c <USB_Event_Stub>
 876:	80 91 da 00 	lds	r24, 0x00DA
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBINT & (1 << VBUSTI));
 87a:	80 ff       	sbrs	r24, 0
	}
	#endif

	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	if (USB_INT_HasOccurred(USB_INT_VBUSTI) && USB_INT_IsEnabled(USB_INT_VBUSTI))
 87c:	1d c0       	rjmp	.+58     	; 0x8b8 <__vector_10+0x80>
 87e:	80 91 d8 00 	lds	r24, 0x00D8
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBCON & (1 << VBUSTE));
 882:	80 ff       	sbrs	r24, 0
 884:	19 c0       	rjmp	.+50     	; 0x8b8 <__vector_10+0x80>
 886:	80 91 da 00 	lds	r24, 0x00DA
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBINT &= ~(1 << VBUSTI);
 88a:	8e 7f       	andi	r24, 0xFE	; 254
 88c:	80 93 da 00 	sts	0x00DA, r24
 890:	80 91 d9 00 	lds	r24, 0x00D9
				 *  \return Boolean \c true if the VBUS line is currently detecting power from a host, \c false otherwise.
				 */
				static inline bool USB_VBUS_GetStatus(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
				static inline bool USB_VBUS_GetStatus(void)
				{
					return ((USBSTA & (1 << VBUS)) ? true : false);
 894:	80 ff       	sbrs	r24, 0
	{
		USB_INT_Clear(USB_INT_VBUSTI);

		if (USB_VBUS_GetStatus())
 896:	0c c0       	rjmp	.+24     	; 0x8b0 <__vector_10+0x78>
 898:	80 e1       	ldi	r24, 0x10	; 16

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
 89a:	89 bd       	out	0x29, r24	; 41
 89c:	82 e1       	ldi	r24, 0x12	; 18
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
 89e:	89 bd       	out	0x29, r24	; 41
 8a0:	09 b4       	in	r0, 0x29	; 41
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			{
				USB_PLL_On();
				while (!(USB_PLL_IsReady()));
 8a2:	00 fe       	sbrs	r0, 0
 8a4:	fd cf       	rjmp	.-6      	; 0x8a0 <__vector_10+0x68>
 8a6:	81 e0       	ldi	r24, 0x01	; 1
			}

			USB_DeviceState = DEVICE_STATE_Powered;
 8a8:	80 93 21 01 	sts	0x0121, r24
 8ac:	05 dd       	rcall	.-1526   	; 0x2b8 <EVENT_USB_Device_Connect>
			EVENT_USB_Device_Connect();
 8ae:	04 c0       	rjmp	.+8      	; 0x8b8 <__vector_10+0x80>
 8b0:	19 bc       	out	0x29, r1	; 41
 8b2:	10 92 21 01 	sts	0x0121, r1
		else
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			  USB_PLL_Off();

			USB_DeviceState = DEVICE_STATE_Unattached;
 8b6:	02 dd       	rcall	.-1532   	; 0x2bc <EVENT_USB_Device_Disconnect>
 8b8:	80 91 e1 00 	lds	r24, 0x00E1
			EVENT_USB_Device_Disconnect();
 8bc:	80 ff       	sbrs	r24, 0
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
 8be:	18 c0       	rjmp	.+48     	; 0x8f0 <__vector_10+0xb8>
 8c0:	80 91 e2 00 	lds	r24, 0x00E2
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
 8c4:	80 ff       	sbrs	r24, 0
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
 8c6:	14 c0       	rjmp	.+40     	; 0x8f0 <__vector_10+0xb8>
 8c8:	80 91 e2 00 	lds	r24, 0x00E2
 8cc:	8e 7f       	andi	r24, 0xFE	; 254
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
 8ce:	80 93 e2 00 	sts	0x00E2, r24
 8d2:	80 91 e2 00 	lds	r24, 0x00E2
 8d6:	80 61       	ori	r24, 0x10	; 16
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
 8d8:	80 93 e2 00 	sts	0x00E2, r24
 8dc:	80 91 d8 00 	lds	r24, 0x00D8
 8e0:	80 62       	ori	r24, 0x20	; 32
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON |=  (1 << FRZCLK);
 8e2:	80 93 d8 00 	sts	0x00D8, r24
 8e6:	19 bc       	out	0x29, r1	; 41
 8e8:	85 e0       	ldi	r24, 0x05	; 5
 8ea:	80 93 21 01 	sts	0x0121, r24

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
		EVENT_USB_Device_Disconnect();
		#else
		USB_DeviceState = DEVICE_STATE_Suspended;
 8ee:	ce d1       	rcall	.+924    	; 0xc8c <USB_Event_Stub>
 8f0:	80 91 e1 00 	lds	r24, 0x00E1
		EVENT_USB_Device_Suspend();
 8f4:	84 ff       	sbrs	r24, 4
 8f6:	2d c0       	rjmp	.+90     	; 0x952 <__vector_10+0x11a>
					case USB_INT_IDTI:
						return (USBINT & (1 << IDTI));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
 8f8:	80 91 e2 00 	lds	r24, 0x00E2
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
 8fc:	84 ff       	sbrs	r24, 4
 8fe:	29 c0       	rjmp	.+82     	; 0x952 <__vector_10+0x11a>
					case USB_INT_IDTI:
						return (USBCON & (1 << IDTE));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
 900:	80 e1       	ldi	r24, 0x10	; 16
 902:	89 bd       	out	0x29, r24	; 41
 904:	82 e1       	ldi	r24, 0x12	; 18
 906:	89 bd       	out	0x29, r24	; 41

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
 908:	09 b4       	in	r0, 0x29	; 41
 90a:	00 fe       	sbrs	r0, 0
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
 90c:	fd cf       	rjmp	.-6      	; 0x908 <__vector_10+0xd0>
 90e:	80 91 d8 00 	lds	r24, 0x00D8
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
 912:	8f 7d       	andi	r24, 0xDF	; 223
 914:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
 918:	80 91 e1 00 	lds	r24, 0x00E1
 91c:	8f 7e       	andi	r24, 0xEF	; 239
 91e:	80 93 e1 00 	sts	0x00E1, r24
						USBINT &= ~(1 << IDTI);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
 922:	80 91 e2 00 	lds	r24, 0x00E2
 926:	8f 7e       	andi	r24, 0xEF	; 239
 928:	80 93 e2 00 	sts	0x00E2, r24
						USBCON &= ~(1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
 92c:	80 91 e2 00 	lds	r24, 0x00E2
 930:	81 60       	ori	r24, 0x01	; 1
 932:	80 93 e2 00 	sts	0x00E2, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
 936:	80 91 1d 01 	lds	r24, 0x011D
 93a:	88 23       	and	r24, r24
 93c:	21 f4       	brne	.+8      	; 0x946 <__vector_10+0x10e>
		USB_INT_Clear(USB_INT_WAKEUPI);

		USB_INT_Disable(USB_INT_WAKEUPI);
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_Device_ConfigurationNumber)
 93e:	80 91 e3 00 	lds	r24, 0x00E3
 942:	87 ff       	sbrs	r24, 7
 944:	02 c0       	rjmp	.+4      	; 0x94a <__vector_10+0x112>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
 946:	84 e0       	ldi	r24, 0x04	; 4
 948:	01 c0       	rjmp	.+2      	; 0x94c <__vector_10+0x114>
		  USB_DeviceState = DEVICE_STATE_Configured;
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
 94a:	81 e0       	ldi	r24, 0x01	; 1
 94c:	80 93 21 01 	sts	0x0121, r24
 950:	9d d1       	rcall	.+826    	; 0xc8c <USB_Event_Stub>
 952:	80 91 e1 00 	lds	r24, 0x00E1
 956:	83 ff       	sbrs	r24, 3

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
		#else
		EVENT_USB_Device_WakeUp();
 958:	22 c0       	rjmp	.+68     	; 0x99e <__vector_10+0x166>
 95a:	80 91 e2 00 	lds	r24, 0x00E2
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
 95e:	83 ff       	sbrs	r24, 3
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
 960:	1e c0       	rjmp	.+60     	; 0x99e <__vector_10+0x166>
 962:	80 91 e1 00 	lds	r24, 0x00E1
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
 966:	87 7f       	andi	r24, 0xF7	; 247
 968:	80 93 e1 00 	sts	0x00E1, r24
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
 96c:	82 e0       	ldi	r24, 0x02	; 2
 96e:	80 93 21 01 	sts	0x0121, r24
 972:	10 92 1d 01 	sts	0x011D, r1
	{
		USB_INT_Clear(USB_INT_EORSTI);

		USB_DeviceState                = DEVICE_STATE_Default;
 976:	80 91 e1 00 	lds	r24, 0x00E1
 97a:	8e 7f       	andi	r24, 0xFE	; 254
		USB_Device_ConfigurationNumber = 0;
 97c:	80 93 e1 00 	sts	0x00E1, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
 980:	80 91 e2 00 	lds	r24, 0x00E2
 984:	8e 7f       	andi	r24, 0xFE	; 254
 986:	80 93 e2 00 	sts	0x00E2, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
 98a:	80 91 e2 00 	lds	r24, 0x00E2
 98e:	80 61       	ori	r24, 0x10	; 16
 990:	80 93 e2 00 	sts	0x00E2, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
 994:	80 e0       	ldi	r24, 0x00	; 0
 996:	60 e0       	ldi	r22, 0x00	; 0
 998:	42 e0       	ldi	r20, 0x02	; 2
 99a:	2c de       	rcall	.-936    	; 0x5f4 <Endpoint_ConfigureEndpoint_Prv>
 99c:	77 d1       	rcall	.+750    	; 0xc8c <USB_Event_Stub>
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
 99e:	ff 91       	pop	r31
 9a0:	ef 91       	pop	r30
 9a2:	bf 91       	pop	r27
 9a4:	af 91       	pop	r26
 9a6:	9f 91       	pop	r25

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
 9a8:	8f 91       	pop	r24
 9aa:	7f 91       	pop	r23
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
 9ac:	6f 91       	pop	r22
 9ae:	5f 91       	pop	r21
 9b0:	4f 91       	pop	r20
 9b2:	3f 91       	pop	r19
 9b4:	2f 91       	pop	r18
 9b6:	0f 90       	pop	r0
 9b8:	0f be       	out	0x3f, r0	; 63
 9ba:	0f 90       	pop	r0
 9bc:	1f 90       	pop	r1
 9be:	18 95       	reti

000009c0 <USB_Device_ProcessControlRequest>:
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_Device_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
 9c0:	1f 93       	push	r17
 9c2:	cf 93       	push	r28
 9c4:	df 93       	push	r29
 9c6:	cd b7       	in	r28, 0x3d	; 61
 9c8:	de b7       	in	r29, 0x3e	; 62
 9ca:	ac 97       	sbiw	r28, 0x2c	; 44
 9cc:	0f b6       	in	r0, 0x3f	; 63
 9ce:	f8 94       	cli
 9d0:	de bf       	out	0x3e, r29	; 62
 9d2:	0f be       	out	0x3f, r0	; 63
 9d4:	cd bf       	out	0x3d, r28	; 61
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
 9d6:	80 e0       	ldi	r24, 0x00	; 0
	USB_ControlRequest.bRequest      = Endpoint_Read_8();
	USB_ControlRequest.wValue        = Endpoint_Read_16_LE();
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;
 9d8:	e2 e2       	ldi	r30, 0x22	; 34
 9da:	f1 e0       	ldi	r31, 0x01	; 1
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
 9dc:	90 91 f1 00 	lds	r25, 0x00F1

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_8();
 9e0:	91 93       	st	Z+, r25
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
 9e2:	8f 5f       	subi	r24, 0xFF	; 255
 9e4:	88 30       	cpi	r24, 0x08	; 8
 9e6:	d1 f7       	brne	.-12     	; 0x9dc <USB_Device_ProcessControlRequest+0x1c>
	  *(RequestHeader++) = Endpoint_Read_8();
	#endif

	EVENT_USB_Device_ControlRequest();
 9e8:	74 dc       	rcall	.-1816   	; 0x2d2 <EVENT_USB_Device_ControlRequest>
 9ea:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 9ee:	83 ff       	sbrs	r24, 3

	if (Endpoint_IsSETUPReceived())
 9f0:	35 c1       	rjmp	.+618    	; 0xc5c <__stack+0x15d>
 9f2:	80 91 22 01 	lds	r24, 0x0122
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
 9f6:	20 91 23 01 	lds	r18, 0x0123

		switch (USB_ControlRequest.bRequest)
 9fa:	25 30       	cpi	r18, 0x05	; 5
 9fc:	09 f4       	brne	.+2      	; 0xa00 <USB_Device_ProcessControlRequest+0x40>
 9fe:	84 c0       	rjmp	.+264    	; 0xb08 <__stack+0x9>
 a00:	26 30       	cpi	r18, 0x06	; 6
 a02:	40 f4       	brcc	.+16     	; 0xa14 <USB_Device_ProcessControlRequest+0x54>
 a04:	21 30       	cpi	r18, 0x01	; 1
 a06:	a1 f1       	breq	.+104    	; 0xa70 <USB_Device_ProcessControlRequest+0xb0>
 a08:	21 30       	cpi	r18, 0x01	; 1
 a0a:	70 f0       	brcs	.+28     	; 0xa28 <USB_Device_ProcessControlRequest+0x68>
 a0c:	23 30       	cpi	r18, 0x03	; 3
 a0e:	09 f0       	breq	.+2      	; 0xa12 <USB_Device_ProcessControlRequest+0x52>
 a10:	25 c1       	rjmp	.+586    	; 0xc5c <__stack+0x15d>
 a12:	2e c0       	rjmp	.+92     	; 0xa70 <USB_Device_ProcessControlRequest+0xb0>
 a14:	28 30       	cpi	r18, 0x08	; 8
 a16:	09 f4       	brne	.+2      	; 0xa1a <USB_Device_ProcessControlRequest+0x5a>
 a18:	f3 c0       	rjmp	.+486    	; 0xc00 <__stack+0x101>
 a1a:	29 30       	cpi	r18, 0x09	; 9
 a1c:	09 f4       	brne	.+2      	; 0xa20 <USB_Device_ProcessControlRequest+0x60>
 a1e:	02 c1       	rjmp	.+516    	; 0xc24 <__stack+0x125>
 a20:	26 30       	cpi	r18, 0x06	; 6
 a22:	09 f0       	breq	.+2      	; 0xa26 <USB_Device_ProcessControlRequest+0x66>
 a24:	1b c1       	rjmp	.+566    	; 0xc5c <__stack+0x15d>
 a26:	93 c0       	rjmp	.+294    	; 0xb4e <__stack+0x4f>
 a28:	80 38       	cpi	r24, 0x80	; 128
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
 a2a:	21 f0       	breq	.+8      	; 0xa34 <USB_Device_ProcessControlRequest+0x74>
 a2c:	82 38       	cpi	r24, 0x82	; 130
 a2e:	09 f0       	breq	.+2      	; 0xa32 <USB_Device_ProcessControlRequest+0x72>
 a30:	15 c1       	rjmp	.+554    	; 0xc5c <__stack+0x15d>
 a32:	08 c0       	rjmp	.+16     	; 0xa44 <USB_Device_ProcessControlRequest+0x84>
 a34:	80 91 1e 01 	lds	r24, 0x011E
	Endpoint_ClearOUT();
}

static void USB_Device_GetStatus(void)
{
	uint8_t CurrentStatus = 0;
 a38:	90 91 1f 01 	lds	r25, 0x011F
			if (USB_Device_CurrentlySelfPowered)
			  CurrentStatus |= FEATURE_SELFPOWERED_ENABLED;
			#endif

			#if !defined(NO_DEVICE_REMOTE_WAKEUP)
			if (USB_Device_RemoteWakeupEnabled)
 a3c:	99 23       	and	r25, r25
 a3e:	71 f0       	breq	.+28     	; 0xa5c <USB_Device_ProcessControlRequest+0x9c>
 a40:	82 60       	ori	r24, 0x02	; 2
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
 a42:	0c c0       	rjmp	.+24     	; 0xa5c <USB_Device_ProcessControlRequest+0x9c>
 a44:	80 91 26 01 	lds	r24, 0x0126
			#endif
			break;
		case (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_ENDPOINT):
			#if !defined(CONTROL_ONLY_DEVICE)
			Endpoint_SelectEndpoint((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
 a48:	8f 70       	andi	r24, 0x0F	; 15
 a4a:	80 93 e9 00 	sts	0x00E9, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 a4e:	90 91 eb 00 	lds	r25, 0x00EB
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
 a52:	81 e0       	ldi	r24, 0x01	; 1

			CurrentStatus = Endpoint_IsStalled();
 a54:	95 ff       	sbrs	r25, 5
 a56:	80 e0       	ldi	r24, 0x00	; 0
 a58:	10 92 e9 00 	sts	0x00E9, r1
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 a5c:	90 91 e8 00 	lds	r25, 0x00E8
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 a60:	97 7f       	andi	r25, 0xF7	; 247
 a62:	90 93 e8 00 	sts	0x00E8, r25
 a66:	80 93 f1 00 	sts	0x00F1, r24
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
 a6a:	10 92 f1 00 	sts	0x00F1, r1
				UEDATX = (Data >> 8);
 a6e:	d3 c0       	rjmp	.+422    	; 0xc16 <__stack+0x117>
 a70:	88 23       	and	r24, r24
				}

				break;
			case REQ_ClearFeature:
			case REQ_SetFeature:
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
 a72:	19 f0       	breq	.+6      	; 0xa7a <USB_Device_ProcessControlRequest+0xba>
 a74:	82 30       	cpi	r24, 0x02	; 2
 a76:	09 f0       	breq	.+2      	; 0xa7a <USB_Device_ProcessControlRequest+0xba>
 a78:	f1 c0       	rjmp	.+482    	; 0xc5c <__stack+0x15d>
 a7a:	90 e0       	ldi	r25, 0x00	; 0
	Endpoint_ClearStatusStage();
}

static void USB_Device_ClearSetFeature(void)
{
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
 a7c:	8f 71       	andi	r24, 0x1F	; 31
 a7e:	90 70       	andi	r25, 0x00	; 0
 a80:	00 97       	sbiw	r24, 0x00	; 0
 a82:	29 f0       	breq	.+10     	; 0xa8e <USB_Device_ProcessControlRequest+0xce>
 a84:	82 30       	cpi	r24, 0x02	; 2
 a86:	91 05       	cpc	r25, r1
 a88:	09 f0       	breq	.+2      	; 0xa8c <USB_Device_ProcessControlRequest+0xcc>
 a8a:	e8 c0       	rjmp	.+464    	; 0xc5c <__stack+0x15d>
 a8c:	0b c0       	rjmp	.+22     	; 0xaa4 <USB_Device_ProcessControlRequest+0xe4>
 a8e:	80 91 24 01 	lds	r24, 0x0124
	{
		#if !defined(NO_DEVICE_REMOTE_WAKEUP)
		case REQREC_DEVICE:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
 a92:	81 30       	cpi	r24, 0x01	; 1
 a94:	09 f0       	breq	.+2      	; 0xa98 <USB_Device_ProcessControlRequest+0xd8>
 a96:	e2 c0       	rjmp	.+452    	; 0xc5c <__stack+0x15d>
 a98:	23 30       	cpi	r18, 0x03	; 3
			  USB_Device_RemoteWakeupEnabled = (USB_ControlRequest.bRequest == REQ_SetFeature);
 a9a:	09 f0       	breq	.+2      	; 0xa9e <USB_Device_ProcessControlRequest+0xde>
 a9c:	80 e0       	ldi	r24, 0x00	; 0
 a9e:	80 93 1f 01 	sts	0x011F, r24
 aa2:	2c c0       	rjmp	.+88     	; 0xafc <USB_Device_ProcessControlRequest+0x13c>
 aa4:	80 91 24 01 	lds	r24, 0x0124

			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
 aa8:	88 23       	and	r24, r24
 aaa:	41 f5       	brne	.+80     	; 0xafc <USB_Device_ProcessControlRequest+0x13c>
 aac:	20 91 26 01 	lds	r18, 0x0126
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
 ab0:	2f 70       	andi	r18, 0x0F	; 15
 ab2:	09 f4       	brne	.+2      	; 0xab6 <USB_Device_ProcessControlRequest+0xf6>

				if (EndpointIndex == ENDPOINT_CONTROLEP)
 ab4:	d3 c0       	rjmp	.+422    	; 0xc5c <__stack+0x15d>
 ab6:	20 93 e9 00 	sts	0x00E9, r18
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 aba:	80 91 eb 00 	lds	r24, 0x00EB
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
 abe:	80 ff       	sbrs	r24, 0
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
 ac0:	1d c0       	rjmp	.+58     	; 0xafc <USB_Device_ProcessControlRequest+0x13c>
 ac2:	80 91 23 01 	lds	r24, 0x0123
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
 ac6:	83 30       	cpi	r24, 0x03	; 3
 ac8:	21 f4       	brne	.+8      	; 0xad2 <USB_Device_ProcessControlRequest+0x112>
 aca:	80 91 eb 00 	lds	r24, 0x00EB
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
 ace:	80 62       	ori	r24, 0x20	; 32
 ad0:	13 c0       	rjmp	.+38     	; 0xaf8 <USB_Device_ProcessControlRequest+0x138>
 ad2:	80 91 eb 00 	lds	r24, 0x00EB
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
 ad6:	80 61       	ori	r24, 0x10	; 16
 ad8:	80 93 eb 00 	sts	0x00EB, r24
 adc:	81 e0       	ldi	r24, 0x01	; 1
			 *  \param[in] Address  Endpoint address whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t Address)
			{
				UERST = (1 << (Address & ENDPOINT_EPNUM_MASK));
 ade:	90 e0       	ldi	r25, 0x00	; 0
 ae0:	02 c0       	rjmp	.+4      	; 0xae6 <USB_Device_ProcessControlRequest+0x126>
 ae2:	88 0f       	add	r24, r24
 ae4:	99 1f       	adc	r25, r25
 ae6:	2a 95       	dec	r18
 ae8:	e2 f7       	brpl	.-8      	; 0xae2 <USB_Device_ProcessControlRequest+0x122>
 aea:	80 93 ea 00 	sts	0x00EA, r24
 aee:	10 92 ea 00 	sts	0x00EA, r1
				UERST = 0;
 af2:	80 91 eb 00 	lds	r24, 0x00EB

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
 af6:	88 60       	ori	r24, 0x08	; 8
 af8:	80 93 eb 00 	sts	0x00EB, r24
 afc:	10 92 e9 00 	sts	0x00E9, r1
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 b00:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 b04:	87 7f       	andi	r24, 0xF7	; 247
 b06:	8a c0       	rjmp	.+276    	; 0xc1c <__stack+0x11d>
 b08:	88 23       	and	r24, r24
					USB_Device_ClearSetFeature();
				}

				break;
			case REQ_SetAddress:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
 b0a:	09 f0       	breq	.+2      	; 0xb0e <__stack+0xf>
 b0c:	a7 c0       	rjmp	.+334    	; 0xc5c <__stack+0x15d>
 b0e:	10 91 24 01 	lds	r17, 0x0124
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t DeviceAddress = (USB_ControlRequest.wValue & 0x7F);
 b12:	1f 77       	andi	r17, 0x7F	; 127
 b14:	80 91 e3 00 	lds	r24, 0x00E3
			#endif

			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				UDADDR = (UDADDR & (1 << ADDEN)) | (Address & 0x7F);
 b18:	80 78       	andi	r24, 0x80	; 128
 b1a:	81 2b       	or	r24, r17
 b1c:	80 93 e3 00 	sts	0x00E3, r24
 b20:	80 91 e8 00 	lds	r24, 0x00E8
 b24:	87 7f       	andi	r24, 0xF7	; 247
 b26:	80 93 e8 00 	sts	0x00E8, r24
 b2a:	d5 dd       	rcall	.-1110   	; 0x6d6 <Endpoint_ClearStatusStage>

	USB_Device_SetDeviceAddress(DeviceAddress);

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
 b2c:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 b30:	80 ff       	sbrs	r24, 0
 b32:	fc cf       	rjmp	.-8      	; 0xb2c <__stack+0x2d>

	while (!(Endpoint_IsINReady()));
 b34:	80 91 e3 00 	lds	r24, 0x00E3
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address)
			{
				(void)Address;
				
				UDADDR |= (1 << ADDEN);
 b38:	80 68       	ori	r24, 0x80	; 128
 b3a:	80 93 e3 00 	sts	0x00E3, r24
 b3e:	11 23       	and	r17, r17
 b40:	11 f0       	breq	.+4      	; 0xb46 <__stack+0x47>

	USB_Device_EnableDeviceAddress(DeviceAddress);

	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
 b42:	83 e0       	ldi	r24, 0x03	; 3
 b44:	01 c0       	rjmp	.+2      	; 0xb48 <__stack+0x49>
 b46:	82 e0       	ldi	r24, 0x02	; 2
 b48:	80 93 21 01 	sts	0x0121, r24
 b4c:	87 c0       	rjmp	.+270    	; 0xc5c <__stack+0x15d>
 b4e:	80 58       	subi	r24, 0x80	; 128
 b50:	82 30       	cpi	r24, 0x02	; 2
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_SetAddress();

				break;
			case REQ_GetDescriptor:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
 b52:	08 f0       	brcs	.+2      	; 0xb56 <__stack+0x57>
 b54:	83 c0       	rjmp	.+262    	; 0xc5c <__stack+0x15d>
 b56:	80 91 24 01 	lds	r24, 0x0124
	    !(defined(USE_FLASH_DESCRIPTORS) || defined(USE_EEPROM_DESCRIPTORS) || defined(USE_RAM_DESCRIPTORS))
	uint8_t DescriptorAddressSpace;
	#endif

	#if !defined(NO_INTERNAL_SERIAL) && (USE_INTERNAL_SERIAL != NO_DESCRIPTOR)
	if (USB_ControlRequest.wValue == ((DTYPE_String << 8) | USE_INTERNAL_SERIAL))
 b5a:	90 91 25 01 	lds	r25, 0x0125
 b5e:	23 e0       	ldi	r18, 0x03	; 3
 b60:	8c 3d       	cpi	r24, 0xDC	; 220
 b62:	92 07       	cpc	r25, r18
 b64:	a9 f5       	brne	.+106    	; 0xbd0 <__stack+0xd1>
 b66:	83 e0       	ldi	r24, 0x03	; 3
 b68:	8c 83       	std	Y+4, r24	; 0x04
	{
		USB_Descriptor_Header_t Header;
		uint16_t                UnicodeString[INTERNAL_SERIAL_LENGTH_BITS / 4];
	} SignatureDescriptor;

	SignatureDescriptor.Header.Type = DTYPE_String;
 b6a:	8a e2       	ldi	r24, 0x2A	; 42
 b6c:	8b 83       	std	Y+3, r24	; 0x03
	SignatureDescriptor.Header.Size = USB_STRING_LEN(INTERNAL_SERIAL_LENGTH_BITS / 4);
 b6e:	5f b7       	in	r21, 0x3f	; 63
 b70:	f8 94       	cli
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
 b72:	de 01       	movw	r26, r28
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
 b74:	13 96       	adiw	r26, 0x03	; 3
				__builtin_ssrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				cli();
				#endif

				GCC_MEMORY_BARRIER();
 b76:	80 e0       	ldi	r24, 0x00	; 0
 b78:	90 e0       	ldi	r25, 0x00	; 0
 b7a:	4e e0       	ldi	r20, 0x0E	; 14
 b7c:	61 e2       	ldi	r22, 0x21	; 33
			static inline void USB_Device_GetSerialString(uint16_t* const UnicodeString)
			{
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;
 b7e:	e4 2f       	mov	r30, r20

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
				{
					uint8_t SerialByte = boot_signature_byte_get(SigReadAddress);
 b80:	f0 e0       	ldi	r31, 0x00	; 0
 b82:	60 93 57 00 	sts	0x0057, r22
 b86:	e4 91       	lpm	r30, Z
 b88:	80 ff       	sbrs	r24, 0
 b8a:	03 c0       	rjmp	.+6      	; 0xb92 <__stack+0x93>

					if (SerialCharNum & 0x01)
 b8c:	e2 95       	swap	r30
 b8e:	ef 70       	andi	r30, 0x0F	; 15
					{
						SerialByte >>= 4;
 b90:	4f 5f       	subi	r20, 0xFF	; 255
 b92:	ef 70       	andi	r30, 0x0F	; 15
						SigReadAddress++;
 b94:	2e 2f       	mov	r18, r30
					}

					SerialByte &= 0x0F;
 b96:	30 e0       	ldi	r19, 0x00	; 0
 b98:	ea 30       	cpi	r30, 0x0A	; 10
 b9a:	18 f0       	brcs	.+6      	; 0xba2 <__stack+0xa3>

					UnicodeString[SerialCharNum] = cpu_to_le16((SerialByte >= 10) ?
 b9c:	29 5c       	subi	r18, 0xC9	; 201
 b9e:	3f 4f       	sbci	r19, 0xFF	; 255
 ba0:	02 c0       	rjmp	.+4      	; 0xba6 <__stack+0xa7>
 ba2:	20 5d       	subi	r18, 0xD0	; 208
 ba4:	3f 4f       	sbci	r19, 0xFF	; 255
 ba6:	13 96       	adiw	r26, 0x03	; 3
 ba8:	3c 93       	st	X, r19
 baa:	2e 93       	st	-X, r18
 bac:	12 97       	sbiw	r26, 0x02	; 2
 bae:	01 96       	adiw	r24, 0x01	; 1
 bb0:	12 96       	adiw	r26, 0x02	; 2
 bb2:	84 31       	cpi	r24, 0x14	; 20
 bb4:	91 05       	cpc	r25, r1
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
 bb6:	19 f7       	brne	.-58     	; 0xb7e <__stack+0x7f>
 bb8:	5f bf       	out	0x3f, r21	; 63
 bba:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 bbe:	87 7f       	andi	r24, 0xF7	; 247
 bc0:	80 93 e8 00 	sts	0x00E8, r24
 bc4:	ce 01       	movw	r24, r28
 bc6:	03 96       	adiw	r24, 0x03	; 3

	USB_Device_GetSerialString(SignatureDescriptor.UnicodeString);

	Endpoint_ClearSETUP();

	Endpoint_Write_Control_Stream_LE(&SignatureDescriptor, sizeof(SignatureDescriptor));
 bc8:	6a e2       	ldi	r22, 0x2A	; 42
 bca:	70 e0       	ldi	r23, 0x00	; 0
 bcc:	4f dc       	rcall	.-1890   	; 0x46c <Endpoint_Write_Control_Stream_LE>
 bce:	12 c0       	rjmp	.+36     	; 0xbf4 <__stack+0xf5>
 bd0:	60 91 26 01 	lds	r22, 0x0126
 bd4:	ae 01       	movw	r20, r28
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif

	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
 bd6:	4f 5f       	subi	r20, 0xFF	; 255
 bd8:	5f 4f       	sbci	r21, 0xFF	; 255
 bda:	7c db       	rcall	.-2312   	; 0x2d4 <CALLBACK_USB_GetDescriptor>
 bdc:	bc 01       	movw	r22, r24
 bde:	00 97       	sbiw	r24, 0x00	; 0
 be0:	09 f4       	brne	.+2      	; 0xbe4 <__stack+0xe5>
 be2:	3c c0       	rjmp	.+120    	; 0xc5c <__stack+0x15d>
 be4:	80 91 e8 00 	lds	r24, 0x00E8
 be8:	87 7f       	andi	r24, 0xF7	; 247
 bea:	80 93 e8 00 	sts	0x00E8, r24
 bee:	89 81       	ldd	r24, Y+1	; 0x01
 bf0:	9a 81       	ldd	r25, Y+2	; 0x02
 bf2:	9d dc       	rcall	.-1734   	; 0x52e <Endpoint_Write_Control_PStream_LE>
 bf4:	80 91 e8 00 	lds	r24, 0x00E8
	#if defined(USE_RAM_DESCRIPTORS) || !defined(ARCH_HAS_MULTI_ADDRESS_SPACE)
	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_EEPROM_DESCRIPTORS)
	Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_FLASH_DESCRIPTORS)
	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
 bf8:	8b 77       	andi	r24, 0x7B	; 123
 bfa:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 bfe:	2e c0       	rjmp	.+92     	; 0xc5c <__stack+0x15d>
 c00:	80 38       	cpi	r24, 0x80	; 128
 c02:	61 f5       	brne	.+88     	; 0xc5c <__stack+0x15d>
 c04:	80 91 e8 00 	lds	r24, 0x00E8
 c08:	87 7f       	andi	r24, 0xF7	; 247
					USB_Device_GetDescriptor();
				}

				break;
			case REQ_GetConfiguration:
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
 c0a:	80 93 e8 00 	sts	0x00E8, r24
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 c0e:	80 91 1d 01 	lds	r24, 0x011D
 c12:	80 93 f1 00 	sts	0x00F1, r24
 c16:	80 91 e8 00 	lds	r24, 0x00E8

static void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();

	Endpoint_Write_8(USB_Device_ConfigurationNumber);
 c1a:	8e 77       	andi	r24, 0x7E	; 126
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
 c1c:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 c20:	5a dd       	rcall	.-1356   	; 0x6d6 <Endpoint_ClearStatusStage>
 c22:	1c c0       	rjmp	.+56     	; 0xc5c <__stack+0x15d>
 c24:	88 23       	and	r24, r24
 c26:	d1 f4       	brne	.+52     	; 0xc5c <__stack+0x15d>
 c28:	90 91 24 01 	lds	r25, 0x0124
	Endpoint_ClearIN();

	Endpoint_ClearStatusStage();
 c2c:	92 30       	cpi	r25, 0x02	; 2
 c2e:	b0 f4       	brcc	.+44     	; 0xc5c <__stack+0x15d>
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_GetConfiguration();

				break;
			case REQ_SetConfiguration:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
 c30:	80 91 e8 00 	lds	r24, 0x00E8
}

static void USB_Device_SetConfiguration(void)
{
	#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
 c34:	87 7f       	andi	r24, 0xF7	; 247
 c36:	80 93 e8 00 	sts	0x00E8, r24
 c3a:	90 93 1d 01 	sts	0x011D, r25
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 c3e:	4b dd       	rcall	.-1386   	; 0x6d6 <Endpoint_ClearStatusStage>
 c40:	80 91 1d 01 	lds	r24, 0x011D
 c44:	88 23       	and	r24, r24
	#endif
	#endif

	Endpoint_ClearSETUP();

	USB_Device_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
 c46:	21 f4       	brne	.+8      	; 0xc50 <__stack+0x151>
 c48:	80 91 e3 00 	lds	r24, 0x00E3

	Endpoint_ClearStatusStage();
 c4c:	87 ff       	sbrs	r24, 7

	if (USB_Device_ConfigurationNumber)
 c4e:	02 c0       	rjmp	.+4      	; 0xc54 <__stack+0x155>
 c50:	84 e0       	ldi	r24, 0x04	; 4
 c52:	01 c0       	rjmp	.+2      	; 0xc56 <__stack+0x157>
 c54:	81 e0       	ldi	r24, 0x01	; 1
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
 c56:	80 93 21 01 	sts	0x0121, r24
	  USB_DeviceState = DEVICE_STATE_Configured;
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
 c5a:	32 db       	rcall	.-2460   	; 0x2c0 <EVENT_USB_Device_ConfigurationChanged>
 c5c:	80 91 e8 00 	lds	r24, 0x00E8
 c60:	83 ff       	sbrs	r24, 3
 c62:	0a c0       	rjmp	.+20     	; 0xc78 <__stack+0x179>
 c64:	80 91 e8 00 	lds	r24, 0x00E8

	EVENT_USB_Device_ConfigurationChanged();
 c68:	87 7f       	andi	r24, 0xF7	; 247
 c6a:	80 93 e8 00 	sts	0x00E8, r24
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 c6e:	80 91 eb 00 	lds	r24, 0x00EB
			default:
				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
 c72:	80 62       	ori	r24, 0x20	; 32
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 c74:	80 93 eb 00 	sts	0x00EB, r24
 c78:	ac 96       	adiw	r28, 0x2c	; 44
 c7a:	0f b6       	in	r0, 0x3f	; 63
 c7c:	f8 94       	cli
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
 c7e:	de bf       	out	0x3e, r29	; 62
 c80:	0f be       	out	0x3f, r0	; 63
 c82:	cd bf       	out	0x3d, r28	; 61
 c84:	df 91       	pop	r29
 c86:	cf 91       	pop	r28
	{
		Endpoint_ClearSETUP();
		Endpoint_StallTransaction();
	}
}
 c88:	1f 91       	pop	r17
 c8a:	08 95       	ret

00000c8c <USB_Event_Stub>:
#include "Events.h"

void USB_Event_Stub(void)
{

}
 c8c:	08 95       	ret

00000c8e <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
 c8e:	cf 93       	push	r28
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_DeviceTask(void)
{
	if (USB_DeviceState == DEVICE_STATE_Unattached)
 c90:	80 91 21 01 	lds	r24, 0x0121
 c94:	88 23       	and	r24, r24
 c96:	a9 f0       	breq	.+42     	; 0xcc2 <USB_USBTask+0x34>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
 c98:	80 91 e9 00 	lds	r24, 0x00E9
 c9c:	8f 70       	andi	r24, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
 c9e:	90 91 ec 00 	lds	r25, 0x00EC
 ca2:	90 ff       	sbrs	r25, 0
 ca4:	02 c0       	rjmp	.+4      	; 0xcaa <USB_USBTask+0x1c>
 ca6:	c0 e8       	ldi	r28, 0x80	; 128
 ca8:	01 c0       	rjmp	.+2      	; 0xcac <USB_USBTask+0x1e>
 caa:	c0 e0       	ldi	r28, 0x00	; 0
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
 cac:	c8 2b       	or	r28, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 cae:	10 92 e9 00 	sts	0x00E9, r1
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 cb2:	80 91 e8 00 	lds	r24, 0x00E8

	uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

	if (Endpoint_IsSETUPReceived())
 cb6:	83 ff       	sbrs	r24, 3
 cb8:	01 c0       	rjmp	.+2      	; 0xcbc <USB_USBTask+0x2e>
	  USB_Device_ProcessControlRequest();
 cba:	82 de       	rcall	.-764    	; 0x9c0 <USB_Device_ProcessControlRequest>
 cbc:	cf 70       	andi	r28, 0x0F	; 15
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 cbe:	c0 93 e9 00 	sts	0x00E9, r28
 cc2:	cf 91       	pop	r28
	#elif defined(USB_CAN_BE_HOST)
		USB_HostTask();
	#elif defined(USB_CAN_BE_DEVICE)
		USB_DeviceTask();
	#endif
}
 cc4:	08 95       	ret

00000cc6 <MIDI_Device_ConfigureEndpoints>:
#define  __INCLUDE_FROM_MIDI_DRIVER
#define  __INCLUDE_FROM_MIDI_DEVICE_C
#include "MIDIClassDevice.h"

bool MIDI_Device_ConfigureEndpoints(USB_ClassInfo_MIDI_Device_t* const MIDIInterfaceInfo)
{
 cc6:	cf 93       	push	r28
 cc8:	df 93       	push	r29
 cca:	ec 01       	movw	r28, r24
	memset(&MIDIInterfaceInfo->State, 0x00, sizeof(MIDIInterfaceInfo->State));
 ccc:	1b 86       	std	Y+11, r1	; 0x0b

	MIDIInterfaceInfo->Config.DataINEndpoint.Type  = EP_TYPE_BULK;
 cce:	82 e0       	ldi	r24, 0x02	; 2
 cd0:	8c 83       	std	Y+4, r24	; 0x04
	MIDIInterfaceInfo->Config.DataOUTEndpoint.Type = EP_TYPE_BULK;
 cd2:	89 87       	std	Y+9, r24	; 0x09

	if (!(Endpoint_ConfigureEndpointTable(&MIDIInterfaceInfo->Config.DataINEndpoint, 1)))
 cd4:	ce 01       	movw	r24, r28
 cd6:	01 96       	adiw	r24, 0x01	; 1
 cd8:	61 e0       	ldi	r22, 0x01	; 1
 cda:	c1 dc       	rcall	.-1662   	; 0x65e <Endpoint_ConfigureEndpointTable>
 cdc:	88 23       	and	r24, r24
 cde:	29 f0       	breq	.+10     	; 0xcea <MIDI_Device_ConfigureEndpoints+0x24>
 ce0:	ce 01       	movw	r24, r28
	  return false;

	if (!(Endpoint_ConfigureEndpointTable(&MIDIInterfaceInfo->Config.DataOUTEndpoint, 1)))
 ce2:	06 96       	adiw	r24, 0x06	; 6
 ce4:	61 e0       	ldi	r22, 0x01	; 1
 ce6:	bb dc       	rcall	.-1674   	; 0x65e <Endpoint_ConfigureEndpointTable>
 ce8:	01 c0       	rjmp	.+2      	; 0xcec <MIDI_Device_ConfigureEndpoints+0x26>
 cea:	80 e0       	ldi	r24, 0x00	; 0
 cec:	df 91       	pop	r29

	MIDIInterfaceInfo->Config.DataINEndpoint.Type  = EP_TYPE_BULK;
	MIDIInterfaceInfo->Config.DataOUTEndpoint.Type = EP_TYPE_BULK;

	if (!(Endpoint_ConfigureEndpointTable(&MIDIInterfaceInfo->Config.DataINEndpoint, 1)))
	  return false;
 cee:	cf 91       	pop	r28

	if (!(Endpoint_ConfigureEndpointTable(&MIDIInterfaceInfo->Config.DataOUTEndpoint, 1)))
	  return false;

	return true;
}
 cf0:	08 95       	ret

00000cf2 <MIDI_Device_SendEventPacket>:
 cf2:	fc 01       	movw	r30, r24
 cf4:	cb 01       	movw	r24, r22
}

uint8_t MIDI_Device_SendEventPacket(USB_ClassInfo_MIDI_Device_t* const MIDIInterfaceInfo,
                                    const MIDI_EventPacket_t* const Event)
{
	if (USB_DeviceState != DEVICE_STATE_Configured)
 cf6:	20 91 21 01 	lds	r18, 0x0121
 cfa:	24 30       	cpi	r18, 0x04	; 4
 cfc:	a9 f4       	brne	.+42     	; 0xd28 <MIDI_Device_SendEventPacket+0x36>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 cfe:	21 81       	ldd	r18, Z+1	; 0x01
 d00:	2f 70       	andi	r18, 0x0F	; 15
 d02:	20 93 e9 00 	sts	0x00E9, r18

	uint8_t ErrorCode;

	Endpoint_SelectEndpoint(MIDIInterfaceInfo->Config.DataINEndpoint.Address);

	if ((ErrorCode = Endpoint_Write_Stream_LE(Event, sizeof(MIDI_EventPacket_t), NULL)) != ENDPOINT_RWSTREAM_NoError)
 d06:	64 e0       	ldi	r22, 0x04	; 4
 d08:	70 e0       	ldi	r23, 0x00	; 0
 d0a:	40 e0       	ldi	r20, 0x00	; 0
 d0c:	50 e0       	ldi	r21, 0x00	; 0
 d0e:	0e db       	rcall	.-2532   	; 0x32c <Endpoint_Write_Stream_LE>
 d10:	88 23       	and	r24, r24
 d12:	59 f4       	brne	.+22     	; 0xd2a <MIDI_Device_SendEventPacket+0x38>
 d14:	90 91 e8 00 	lds	r25, 0x00E8
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
 d18:	95 fd       	sbrc	r25, 5
	  return ErrorCode;

	if (!(Endpoint_IsReadWriteAllowed()))
 d1a:	07 c0       	rjmp	.+14     	; 0xd2a <MIDI_Device_SendEventPacket+0x38>
 d1c:	90 91 e8 00 	lds	r25, 0x00E8
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 d20:	9e 77       	andi	r25, 0x7E	; 126
 d22:	90 93 e8 00 	sts	0x00E8, r25
 d26:	08 95       	ret
 d28:	82 e0       	ldi	r24, 0x02	; 2

uint8_t MIDI_Device_SendEventPacket(USB_ClassInfo_MIDI_Device_t* const MIDIInterfaceInfo,
                                    const MIDI_EventPacket_t* const Event)
{
	if (USB_DeviceState != DEVICE_STATE_Configured)
	  return ENDPOINT_RWSTREAM_DeviceDisconnected;
 d2a:	08 95       	ret

00000d2c <MIDI_Device_Flush>:

	if (!(Endpoint_IsReadWriteAllowed()))
	  Endpoint_ClearIN();

	return ENDPOINT_RWSTREAM_NoError;
}
 d2c:	20 91 21 01 	lds	r18, 0x0121

uint8_t MIDI_Device_Flush(USB_ClassInfo_MIDI_Device_t* const MIDIInterfaceInfo)
{
	if (USB_DeviceState != DEVICE_STATE_Configured)
 d30:	24 30       	cpi	r18, 0x04	; 4
 d32:	b1 f4       	brne	.+44     	; 0xd60 <MIDI_Device_Flush+0x34>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 d34:	fc 01       	movw	r30, r24
 d36:	81 81       	ldd	r24, Z+1	; 0x01
 d38:	8f 70       	andi	r24, 0x0F	; 15
 d3a:	80 93 e9 00 	sts	0x00E9, r24
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
 d3e:	90 91 f3 00 	lds	r25, 0x00F3
 d42:	80 91 f2 00 	lds	r24, 0x00F2
 d46:	39 2f       	mov	r19, r25
 d48:	20 e0       	ldi	r18, 0x00	; 0
 d4a:	90 e0       	ldi	r25, 0x00	; 0
 d4c:	82 2b       	or	r24, r18
 d4e:	93 2b       	or	r25, r19

	uint8_t ErrorCode;

	Endpoint_SelectEndpoint(MIDIInterfaceInfo->Config.DataINEndpoint.Address);

	if (Endpoint_BytesInEndpoint())
 d50:	00 97       	sbiw	r24, 0x00	; 0
 d52:	41 f0       	breq	.+16     	; 0xd64 <MIDI_Device_Flush+0x38>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 d54:	80 91 e8 00 	lds	r24, 0x00E8
 d58:	8e 77       	andi	r24, 0x7E	; 126
 d5a:	80 93 e8 00 	sts	0x00E8, r24
	{
		Endpoint_ClearIN();

		if ((ErrorCode = Endpoint_WaitUntilReady()) != ENDPOINT_READYWAIT_NoError)
 d5e:	dc cc       	rjmp	.-1608   	; 0x718 <Endpoint_WaitUntilReady>
 d60:	82 e0       	ldi	r24, 0x02	; 2
 d62:	08 95       	ret
}

uint8_t MIDI_Device_Flush(USB_ClassInfo_MIDI_Device_t* const MIDIInterfaceInfo)
{
	if (USB_DeviceState != DEVICE_STATE_Configured)
	  return ENDPOINT_RWSTREAM_DeviceDisconnected;
 d64:	80 e0       	ldi	r24, 0x00	; 0
 d66:	08 95       	ret

00000d68 <MIDI_Device_USBTask>:

		if ((ErrorCode = Endpoint_WaitUntilReady()) != ENDPOINT_READYWAIT_NoError)
		  return ErrorCode;
	}

	return ENDPOINT_READYWAIT_NoError;
 d68:	20 91 21 01 	lds	r18, 0x0121
	return true;
}

void MIDI_Device_USBTask(USB_ClassInfo_MIDI_Device_t* const MIDIInterfaceInfo)
{
	if (USB_DeviceState != DEVICE_STATE_Configured)
 d6c:	24 30       	cpi	r18, 0x04	; 4
 d6e:	51 f4       	brne	.+20     	; 0xd84 <MIDI_Device_USBTask+0x1c>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 d70:	fc 01       	movw	r30, r24
 d72:	21 81       	ldd	r18, Z+1	; 0x01
 d74:	2f 70       	andi	r18, 0x0F	; 15
 d76:	20 93 e9 00 	sts	0x00E9, r18
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 d7a:	20 91 e8 00 	lds	r18, 0x00E8
	  return;

	#if !defined(NO_CLASS_DRIVER_AUTOFLUSH)
	Endpoint_SelectEndpoint(MIDIInterfaceInfo->Config.DataINEndpoint.Address);
	
	if (Endpoint_IsINReady())
 d7e:	20 ff       	sbrs	r18, 0
 d80:	01 c0       	rjmp	.+2      	; 0xd84 <MIDI_Device_USBTask+0x1c>
	  MIDI_Device_Flush(MIDIInterfaceInfo);
 d82:	d4 cf       	rjmp	.-88     	; 0xd2c <MIDI_Device_Flush>
 d84:	08 95       	ret

00000d86 <MIDI_Device_ReceiveEventPacket>:
 d86:	fc 01       	movw	r30, r24
	return ENDPOINT_READYWAIT_NoError;
}

bool MIDI_Device_ReceiveEventPacket(USB_ClassInfo_MIDI_Device_t* const MIDIInterfaceInfo,
                                    MIDI_EventPacket_t* const Event)
{
 d88:	cb 01       	movw	r24, r22
	if (USB_DeviceState != DEVICE_STATE_Configured)
 d8a:	20 91 21 01 	lds	r18, 0x0121
 d8e:	24 30       	cpi	r18, 0x04	; 4
 d90:	c1 f4       	brne	.+48     	; 0xdc2 <MIDI_Device_ReceiveEventPacket+0x3c>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 d92:	26 81       	ldd	r18, Z+6	; 0x06
 d94:	2f 70       	andi	r18, 0x0F	; 15
 d96:	20 93 e9 00 	sts	0x00E9, r18
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
 d9a:	20 91 e8 00 	lds	r18, 0x00E8
	  return false;

	Endpoint_SelectEndpoint(MIDIInterfaceInfo->Config.DataOUTEndpoint.Address);

	if (!(Endpoint_IsReadWriteAllowed()))
 d9e:	25 ff       	sbrs	r18, 5
 da0:	10 c0       	rjmp	.+32     	; 0xdc2 <MIDI_Device_ReceiveEventPacket+0x3c>
	  return false;

	Endpoint_Read_Stream_LE(Event, sizeof(MIDI_EventPacket_t), NULL);
 da2:	64 e0       	ldi	r22, 0x04	; 4
 da4:	70 e0       	ldi	r23, 0x00	; 0
 da6:	40 e0       	ldi	r20, 0x00	; 0
 da8:	50 e0       	ldi	r21, 0x00	; 0
 daa:	10 db       	rcall	.-2528   	; 0x3cc <Endpoint_Read_Stream_LE>
 dac:	80 91 e8 00 	lds	r24, 0x00E8
 db0:	85 fd       	sbrc	r24, 5

	if (!(Endpoint_IsReadWriteAllowed()))
 db2:	09 c0       	rjmp	.+18     	; 0xdc6 <MIDI_Device_ReceiveEventPacket+0x40>
 db4:	80 91 e8 00 	lds	r24, 0x00E8
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 db8:	8b 77       	andi	r24, 0x7B	; 123
 dba:	80 93 e8 00 	sts	0x00E8, r24
 dbe:	81 e0       	ldi	r24, 0x01	; 1
	  Endpoint_ClearOUT();

	return true;
 dc0:	08 95       	ret
 dc2:	80 e0       	ldi	r24, 0x00	; 0
	  return false;

	Endpoint_SelectEndpoint(MIDIInterfaceInfo->Config.DataOUTEndpoint.Address);

	if (!(Endpoint_IsReadWriteAllowed()))
	  return false;
 dc4:	08 95       	ret
 dc6:	81 e0       	ldi	r24, 0x01	; 1
	Endpoint_Read_Stream_LE(Event, sizeof(MIDI_EventPacket_t), NULL);

	if (!(Endpoint_IsReadWriteAllowed()))
	  Endpoint_ClearOUT();

	return true;
 dc8:	08 95       	ret

00000dca <_exit>:
 dca:	f8 94       	cli

00000dcc <__stop_program>:
 dcc:	ff cf       	rjmp	.-2      	; 0xdcc <__stop_program>
