
VirtualSerialMassStorage.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000ec  00800100  00001e66  00001efa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001e66  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000001c  008001ec  008001ec  00001fe6  2**0
                  ALLOC
  3 .stab         00000a98  00000000  00000000  00001fe8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000002aa  00000000  00000000  00002a80  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000005a0  00000000  00000000  00002d30  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000b301  00000000  00000000  000032d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000281e  00000000  00000000  0000e5d1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00004bf9  00000000  00000000  00010def  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000107c  00000000  00000000  000159e8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000421f  00000000  00000000  00016a64  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000067b4  00000000  00000000  0001ac83  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000007d8  00000000  00000000  00021437  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	b2 c0       	rjmp	.+356    	; 0x166 <__ctors_end>
       2:	00 00       	nop
       4:	cf c0       	rjmp	.+414    	; 0x1a4 <__bad_interrupt>
       6:	00 00       	nop
       8:	cd c0       	rjmp	.+410    	; 0x1a4 <__bad_interrupt>
       a:	00 00       	nop
       c:	cb c0       	rjmp	.+406    	; 0x1a4 <__bad_interrupt>
       e:	00 00       	nop
      10:	c9 c0       	rjmp	.+402    	; 0x1a4 <__bad_interrupt>
      12:	00 00       	nop
      14:	c7 c0       	rjmp	.+398    	; 0x1a4 <__bad_interrupt>
      16:	00 00       	nop
      18:	c5 c0       	rjmp	.+394    	; 0x1a4 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	c3 c0       	rjmp	.+390    	; 0x1a4 <__bad_interrupt>
      1e:	00 00       	nop
      20:	c1 c0       	rjmp	.+386    	; 0x1a4 <__bad_interrupt>
      22:	00 00       	nop
      24:	bf c0       	rjmp	.+382    	; 0x1a4 <__bad_interrupt>
      26:	00 00       	nop
      28:	0c 94 58 09 	jmp	0x12b0	; 0x12b0 <__vector_10>
      2c:	0c 94 27 0a 	jmp	0x144e	; 0x144e <__vector_11>
      30:	b9 c0       	rjmp	.+370    	; 0x1a4 <__bad_interrupt>
      32:	00 00       	nop
      34:	b7 c0       	rjmp	.+366    	; 0x1a4 <__bad_interrupt>
      36:	00 00       	nop
      38:	b5 c0       	rjmp	.+362    	; 0x1a4 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	b3 c0       	rjmp	.+358    	; 0x1a4 <__bad_interrupt>
      3e:	00 00       	nop
      40:	b1 c0       	rjmp	.+354    	; 0x1a4 <__bad_interrupt>
      42:	00 00       	nop
      44:	af c0       	rjmp	.+350    	; 0x1a4 <__bad_interrupt>
      46:	00 00       	nop
      48:	ad c0       	rjmp	.+346    	; 0x1a4 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	ab c0       	rjmp	.+342    	; 0x1a4 <__bad_interrupt>
      4e:	00 00       	nop
      50:	a9 c0       	rjmp	.+338    	; 0x1a4 <__bad_interrupt>
      52:	00 00       	nop
      54:	a7 c0       	rjmp	.+334    	; 0x1a4 <__bad_interrupt>
      56:	00 00       	nop
      58:	a5 c0       	rjmp	.+330    	; 0x1a4 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	a3 c0       	rjmp	.+326    	; 0x1a4 <__bad_interrupt>
      5e:	00 00       	nop
      60:	a1 c0       	rjmp	.+322    	; 0x1a4 <__bad_interrupt>
      62:	00 00       	nop
      64:	9f c0       	rjmp	.+318    	; 0x1a4 <__bad_interrupt>
      66:	00 00       	nop
      68:	9d c0       	rjmp	.+314    	; 0x1a4 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	9b c0       	rjmp	.+310    	; 0x1a4 <__bad_interrupt>
      6e:	00 00       	nop
      70:	99 c0       	rjmp	.+306    	; 0x1a4 <__bad_interrupt>
      72:	00 00       	nop
      74:	97 c0       	rjmp	.+302    	; 0x1a4 <__bad_interrupt>
      76:	00 00       	nop
      78:	95 c0       	rjmp	.+298    	; 0x1a4 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	93 c0       	rjmp	.+294    	; 0x1a4 <__bad_interrupt>
      7e:	00 00       	nop
      80:	91 c0       	rjmp	.+290    	; 0x1a4 <__bad_interrupt>
      82:	00 00       	nop
      84:	8f c0       	rjmp	.+286    	; 0x1a4 <__bad_interrupt>
      86:	00 00       	nop
      88:	8d c0       	rjmp	.+282    	; 0x1a4 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	8b c0       	rjmp	.+278    	; 0x1a4 <__bad_interrupt>
      8e:	00 00       	nop
      90:	89 c0       	rjmp	.+274    	; 0x1a4 <__bad_interrupt>
      92:	00 00       	nop
      94:	87 c0       	rjmp	.+270    	; 0x1a4 <__bad_interrupt>
      96:	00 00       	nop

00000098 <ProductString>:
      98:	3e 03 4c 00 55 00 46 00 41 00 20 00 43 00 44 00     >.L.U.F.A. .C.D.
      a8:	43 00 20 00 61 00 6e 00 64 00 20 00 4d 00 61 00     C. .a.n.d. .M.a.
      b8:	73 00 73 00 20 00 53 00 74 00 6f 00 72 00 61 00     s.s. .S.t.o.r.a.
      c8:	67 00 65 00 20 00 44 00 65 00 6d 00 6f 00 00 00     g.e. .D.e.m.o...

000000d8 <ManufacturerString>:
      d8:	18 03 44 00 65 00 61 00 6e 00 20 00 43 00 61 00     ..D.e.a.n. .C.a.
      e8:	6d 00 65 00 72 00 61 00 00 00                       m.e.r.a...

000000f2 <LanguageString>:
      f2:	04 03 09 04                                         ....

000000f6 <ConfigurationDescriptor>:
      f6:	09 02 5d 00 03 01 00 c0 32 08 0b 00 02 02 02 01     ..].....2.......
     106:	00 09 04 00 00 01 02 02 01 00 05 24 00 10 01 04     ...........$....
     116:	24 02 06 05 24 06 00 01 07 05 81 03 08 00 ff 09     $...$...........
     126:	04 01 00 02 0a 00 00 00 07 05 03 02 10 00 05 07     ................
     136:	05 82 02 10 00 05 09 04 02 00 02 08 06 50 00 07     .............P..
     146:	05 84 02 40 00 05 07 05 05 02 40 00 05              ...@......@..

00000153 <DeviceDescriptor>:
     153:	12 01 10 01 ef 02 01 08 eb 03 68 20 01 00 01 02     ..........h ....
     163:	dc 01 00                                            ...

00000166 <__ctors_end>:
     166:	11 24       	eor	r1, r1
     168:	1f be       	out	0x3f, r1	; 63
     16a:	cf ef       	ldi	r28, 0xFF	; 255
     16c:	d0 e2       	ldi	r29, 0x20	; 32
     16e:	de bf       	out	0x3e, r29	; 62
     170:	cd bf       	out	0x3d, r28	; 61

00000172 <__do_copy_data>:
     172:	11 e0       	ldi	r17, 0x01	; 1
     174:	a0 e0       	ldi	r26, 0x00	; 0
     176:	b1 e0       	ldi	r27, 0x01	; 1
     178:	e6 e6       	ldi	r30, 0x66	; 102
     17a:	fe e1       	ldi	r31, 0x1E	; 30
     17c:	00 e0       	ldi	r16, 0x00	; 0
     17e:	0b bf       	out	0x3b, r16	; 59
     180:	02 c0       	rjmp	.+4      	; 0x186 <__do_copy_data+0x14>
     182:	07 90       	elpm	r0, Z+
     184:	0d 92       	st	X+, r0
     186:	ac 3e       	cpi	r26, 0xEC	; 236
     188:	b1 07       	cpc	r27, r17
     18a:	d9 f7       	brne	.-10     	; 0x182 <__do_copy_data+0x10>
     18c:	1b be       	out	0x3b, r1	; 59

0000018e <__do_clear_bss>:
     18e:	12 e0       	ldi	r17, 0x02	; 2
     190:	ac ee       	ldi	r26, 0xEC	; 236
     192:	b1 e0       	ldi	r27, 0x01	; 1
     194:	01 c0       	rjmp	.+2      	; 0x198 <.do_clear_bss_start>

00000196 <.do_clear_bss_loop>:
     196:	1d 92       	st	X+, r1

00000198 <.do_clear_bss_start>:
     198:	a8 30       	cpi	r26, 0x08	; 8
     19a:	b1 07       	cpc	r27, r17
     19c:	e1 f7       	brne	.-8      	; 0x196 <.do_clear_bss_loop>
     19e:	7c d0       	rcall	.+248    	; 0x298 <main>
     1a0:	0c 94 31 0f 	jmp	0x1e62	; 0x1e62 <_exit>

000001a4 <__bad_interrupt>:
     1a4:	2d cf       	rjmp	.-422    	; 0x0 <__vectors>

000001a6 <LEDs_SetAllLEDs>:
				PORTD &= ~LEDMask;
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
			{
				PORTD = ((PORTD & ~LEDS_ALL_LEDS) | LEDMask);
     1a6:	9b b1       	in	r25, 0x0b	; 11
     1a8:	9f 70       	andi	r25, 0x0F	; 15
     1aa:	98 2b       	or	r25, r24
     1ac:	9b b9       	out	0x0b, r25	; 11
			}
     1ae:	08 95       	ret

000001b0 <SetupHardware>:

/** Configures the board hardware and chip peripherals for the demo's functionality. */
void SetupHardware(void)
{
	/* Disable watchdog if enabled by bootloader/fuses */
	MCUSR &= ~(1 << WDRF);
     1b0:	84 b7       	in	r24, 0x34	; 52
     1b2:	87 7f       	andi	r24, 0xF7	; 247
     1b4:	84 bf       	out	0x34, r24	; 52
	wdt_disable();
     1b6:	88 e1       	ldi	r24, 0x18	; 24
     1b8:	0f b6       	in	r0, 0x3f	; 63
     1ba:	f8 94       	cli
     1bc:	80 93 60 00 	sts	0x0060, r24
     1c0:	10 92 60 00 	sts	0x0060, r1
     1c4:	0f be       	out	0x3f, r0	; 63
The type of x is clock_div_t.
*/
void clock_prescale_set(clock_div_t __x)
{
    uint8_t __tmp = _BV(CLKPCE);
    __asm__ __volatile__ (
     1c6:	90 e0       	ldi	r25, 0x00	; 0
     1c8:	80 e8       	ldi	r24, 0x80	; 128
     1ca:	0f b6       	in	r0, 0x3f	; 63
     1cc:	f8 94       	cli
     1ce:	80 93 61 00 	sts	0x0061, r24
     1d2:	90 93 61 00 	sts	0x0061, r25
     1d6:	0f be       	out	0x3f, r0	; 63

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void LEDs_Init(void)
			{
				DDRD  |=  LEDS_ALL_LEDS;
     1d8:	8a b1       	in	r24, 0x0a	; 10
     1da:	80 6f       	ori	r24, 0xF0	; 240
     1dc:	8a b9       	out	0x0a, r24	; 10
				PORTD &= ~LEDS_ALL_LEDS;
     1de:	8b b1       	in	r24, 0x0b	; 11
     1e0:	8f 70       	andi	r24, 0x0F	; 15
     1e2:	8b b9       	out	0x0b, r24	; 11

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void Joystick_Init(void)
			{
				DDRB  &= ~JOY_BMASK;
     1e4:	84 b1       	in	r24, 0x04	; 4
     1e6:	8f 71       	andi	r24, 0x1F	; 31
     1e8:	84 b9       	out	0x04, r24	; 4
				DDRE  &= ~JOY_EMASK;
     1ea:	8d b1       	in	r24, 0x0d	; 13
     1ec:	8f 7c       	andi	r24, 0xCF	; 207
     1ee:	8d b9       	out	0x0d, r24	; 13

				PORTB |=  JOY_BMASK;
     1f0:	85 b1       	in	r24, 0x05	; 5
     1f2:	80 6e       	ori	r24, 0xE0	; 224
     1f4:	85 b9       	out	0x05, r24	; 5
				PORTE |=  JOY_EMASK;
     1f6:	8e b1       	in	r24, 0x0e	; 14
     1f8:	80 63       	ori	r24, 0x30	; 48
     1fa:	8e b9       	out	0x0e, r24	; 14
			 *                         \c SPI_SCK_*, \c SPI_SAMPLE_*, \c SPI_ORDER_* and \c SPI_MODE_* masks.
			 */
			static inline void SPI_Init(const uint8_t SPIOptions)
			{
				/* Prevent high rise times on PB.0 (/SS) from forcing a change to SPI slave mode */
				DDRB  |= (1 << 0);
     1fc:	20 9a       	sbi	0x04, 0	; 4
				PORTB |= (1 << 0);
     1fe:	28 9a       	sbi	0x05, 0	; 5

				DDRB  |=  ((1 << 1) | (1 << 2));
     200:	84 b1       	in	r24, 0x04	; 4
     202:	86 60       	ori	r24, 0x06	; 6
     204:	84 b9       	out	0x04, r24	; 4
				DDRB  &= ~(1 << 3);
     206:	23 98       	cbi	0x04, 3	; 4
				PORTB |=  (1 << 3);
     208:	2b 9a       	sbi	0x05, 3	; 5

				if (SPIOptions & SPI_USE_DOUBLESPEED)
				  SPSR |= (1 << SPI2X);
     20a:	8d b5       	in	r24, 0x2d	; 45
     20c:	81 60       	ori	r24, 0x01	; 1
     20e:	8d bd       	out	0x2d, r24	; 45
				else
				  SPSR &= ~(1 << SPI2X);

				/* Switch /SS to input mode after configuration to allow for forced mode changes */
				DDRB &= ~(1 << 0);
     210:	20 98       	cbi	0x04, 0	; 4

				SPCR  = ((1 << SPE) | SPIOptions);
     212:	8c e5       	ldi	r24, 0x5C	; 92
     214:	8c bd       	out	0x2c, r24	; 44
			/** Initializes the dataflash driver so that commands and data may be sent to an attached dataflash IC.
			 *  The microcontroller's SPI driver MUST be initialized before any of the dataflash commands are used.
			 */
			static inline void Dataflash_Init(void)
			{
				DATAFLASH_CHIPCS_DDR  |= DATAFLASH_CHIPCS_MASK;
     216:	8d b1       	in	r24, 0x0d	; 13
     218:	83 60       	ori	r24, 0x03	; 3
     21a:	8d b9       	out	0x0d, r24	; 13
				DATAFLASH_CHIPCS_PORT |= DATAFLASH_CHIPCS_MASK;
     21c:	8e b1       	in	r24, 0x0e	; 14
     21e:	83 60       	ori	r24, 0x03	; 3
     220:	8e b9       	out	0x0e, r24	; 14
	/* Hardware Initialization */
	LEDs_Init();
	Joystick_Init();
	SPI_Init(SPI_SPEED_FCPU_DIV_2 | SPI_ORDER_MSB_FIRST | SPI_SCK_LEAD_FALLING | SPI_SAMPLE_TRAILING | SPI_MODE_MASTER);
	Dataflash_Init();
	USB_Init();
     222:	0e 94 3d 09 	call	0x127a	; 0x127a <USB_Init>

	/* Check if the Dataflash is working, abort if not */
	if (!(DataflashManager_CheckDataflashOperation()))
     226:	96 d3       	rcall	.+1836   	; 0x954 <DataflashManager_CheckDataflashOperation>
     228:	88 23       	and	r24, r24
     22a:	19 f4       	brne	.+6      	; 0x232 <SetupHardware+0x82>
     22c:	80 e9       	ldi	r24, 0x90	; 144
	{
		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
     22e:	bb df       	rcall	.-138    	; 0x1a6 <LEDs_SetAllLEDs>
     230:	ff cf       	rjmp	.-2      	; 0x230 <SetupHardware+0x80>
     232:	42 c3       	rjmp	.+1668   	; 0x8b8 <DataflashManager_ResetDataflashProtections>

00000234 <CheckJoystickMovement>:
     234:	23 b1       	in	r18, 0x03	; 3
		for(;;);
	}

	/* Clear Dataflash sector protections, if enabled */
	DataflashManager_ResetDataflashProtections();
     236:	8c b1       	in	r24, 0x0c	; 12
     238:	80 95       	com	r24
}
     23a:	90 e0       	ldi	r25, 0x00	; 0
			}

			static inline uint8_t Joystick_GetStatus(void) ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t Joystick_GetStatus(void)
			{
				return (((uint8_t)~PINB & JOY_BMASK) | (((uint8_t)~PINE & JOY_EMASK) >> JOY_PORTE_MASK_SHIFT));
     23c:	80 73       	andi	r24, 0x30	; 48
     23e:	90 70       	andi	r25, 0x00	; 0
     240:	95 95       	asr	r25
     242:	87 95       	ror	r24
     244:	20 95       	com	r18
     246:	20 7e       	andi	r18, 0xE0	; 224
     248:	28 2b       	or	r18, r24
{
	uint8_t     JoyStatus_LCL = Joystick_GetStatus();
	char*       ReportString  = NULL;
	static bool ActionSent    = false;

	if (JoyStatus_LCL & JOY_UP)
     24a:	27 fd       	sbrc	r18, 7
     24c:	0b c0       	rjmp	.+22     	; 0x264 <CheckJoystickMovement+0x30>
	  ReportString = "Joystick Up\r\n";
	else if (JoyStatus_LCL & JOY_DOWN)
     24e:	24 fd       	sbrc	r18, 4
     250:	0c c0       	rjmp	.+24     	; 0x26a <CheckJoystickMovement+0x36>
	  ReportString = "Joystick Down\r\n";
	else if (JoyStatus_LCL & JOY_LEFT)
     252:	26 fd       	sbrc	r18, 6
     254:	0d c0       	rjmp	.+26     	; 0x270 <CheckJoystickMovement+0x3c>
	  ReportString = "Joystick Left\r\n";
	else if (JoyStatus_LCL & JOY_RIGHT)
     256:	23 fd       	sbrc	r18, 3
     258:	0e c0       	rjmp	.+28     	; 0x276 <CheckJoystickMovement+0x42>
	  ReportString = "Joystick Right\r\n";
	else if (JoyStatus_LCL & JOY_PRESS)
     25a:	25 fd       	sbrc	r18, 5
     25c:	0f c0       	rjmp	.+30     	; 0x27c <CheckJoystickMovement+0x48>
	  ReportString = "Joystick Pressed\r\n";
	else
	  ActionSent = false;
     25e:	10 92 fa 01 	sts	0x01FA, r1
     262:	08 95       	ret
	uint8_t     JoyStatus_LCL = Joystick_GetStatus();
	char*       ReportString  = NULL;
	static bool ActionSent    = false;

	if (JoyStatus_LCL & JOY_UP)
	  ReportString = "Joystick Up\r\n";
     264:	80 e0       	ldi	r24, 0x00	; 0
     266:	91 e0       	ldi	r25, 0x01	; 1
     268:	0b c0       	rjmp	.+22     	; 0x280 <CheckJoystickMovement+0x4c>
	else if (JoyStatus_LCL & JOY_DOWN)
	  ReportString = "Joystick Down\r\n";
     26a:	8e e0       	ldi	r24, 0x0E	; 14
     26c:	91 e0       	ldi	r25, 0x01	; 1
     26e:	08 c0       	rjmp	.+16     	; 0x280 <CheckJoystickMovement+0x4c>
	else if (JoyStatus_LCL & JOY_LEFT)
	  ReportString = "Joystick Left\r\n";
     270:	8e e1       	ldi	r24, 0x1E	; 30
     272:	91 e0       	ldi	r25, 0x01	; 1
     274:	05 c0       	rjmp	.+10     	; 0x280 <CheckJoystickMovement+0x4c>
	else if (JoyStatus_LCL & JOY_RIGHT)
	  ReportString = "Joystick Right\r\n";
     276:	8e e2       	ldi	r24, 0x2E	; 46
     278:	91 e0       	ldi	r25, 0x01	; 1
     27a:	02 c0       	rjmp	.+4      	; 0x280 <CheckJoystickMovement+0x4c>
	else if (JoyStatus_LCL & JOY_PRESS)
	  ReportString = "Joystick Pressed\r\n";
     27c:	8f e3       	ldi	r24, 0x3F	; 63
     27e:	91 e0       	ldi	r25, 0x01	; 1
	else
	  ActionSent = false;

	if ((ReportString != NULL) && (ActionSent == false))
     280:	20 91 fa 01 	lds	r18, 0x01FA
     284:	22 23       	and	r18, r18
     286:	39 f4       	brne	.+14     	; 0x296 <CheckJoystickMovement+0x62>
	{
		ActionSent = true;
     288:	21 e0       	ldi	r18, 0x01	; 1
     28a:	20 93 fa 01 	sts	0x01FA, r18

		/* Write the string to the virtual COM port via the created character stream */
		fputs(ReportString, &USBSerialStream);
     28e:	6c ee       	ldi	r22, 0xEC	; 236
     290:	71 e0       	ldi	r23, 0x01	; 1
     292:	0c 94 0b 0f 	jmp	0x1e16	; 0x1e16 <fputs>
     296:	08 95       	ret

00000298 <main>:
/** Main program entry point. This routine contains the overall program flow, including initial
 *  setup of all components and the main program loop.
 */
int main(void)
{
	SetupHardware();
     298:	8b df       	rcall	.-234    	; 0x1b0 <SetupHardware>
     29a:	8b e8       	ldi	r24, 0x8B	; 139

	/* Create a regular character stream for the interface so that it can be used with the stdio.h functions */
	CDC_Device_CreateStream(&VirtualSerial_CDC_Interface, &USBSerialStream);
     29c:	91 e0       	ldi	r25, 0x01	; 1
     29e:	6c ee       	ldi	r22, 0xEC	; 236
     2a0:	71 e0       	ldi	r23, 0x01	; 1
     2a2:	0e 94 78 0d 	call	0x1af0	; 0x1af0 <CDC_Device_CreateStream>
     2a6:	80 e1       	ldi	r24, 0x10	; 16

	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
     2a8:	7e df       	rcall	.-260    	; 0x1a6 <LEDs_SetAllLEDs>
     2aa:	78 94       	sei
     2ac:	c3 df       	rcall	.-122    	; 0x234 <CheckJoystickMovement>
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				sei();
     2ae:	8b e8       	ldi	r24, 0x8B	; 139
	GlobalInterruptEnable();

	for (;;)
	{
		CheckJoystickMovement();
     2b0:	91 e0       	ldi	r25, 0x01	; 1
     2b2:	0e 94 3a 0d 	call	0x1a74	; 0x1a74 <CDC_Device_ReceiveByte>

		/* Must throw away unused bytes from the host, or it will lock up while waiting for the device */
		CDC_Device_ReceiveByte(&VirtualSerial_CDC_Interface);
     2b6:	8b e8       	ldi	r24, 0x8B	; 139
     2b8:	91 e0       	ldi	r25, 0x01	; 1
     2ba:	0e 94 22 0d 	call	0x1a44	; 0x1a44 <CDC_Device_USBTask>

		CDC_Device_USBTask(&VirtualSerial_CDC_Interface);
     2be:	82 e5       	ldi	r24, 0x52	; 82
     2c0:	91 e0       	ldi	r25, 0x01	; 1
     2c2:	0e 94 e5 0d 	call	0x1bca	; 0x1bca <MS_Device_USBTask>
		MS_Device_USBTask(&Disk_MS_Interface);
     2c6:	0e 94 d0 0b 	call	0x17a0	; 0x17a0 <USB_USBTask>
     2ca:	f0 cf       	rjmp	.-32     	; 0x2ac <main+0x14>

000002cc <EVENT_USB_Device_Connect>:
		USB_USBTask();
     2cc:	80 ea       	ldi	r24, 0xA0	; 160
     2ce:	6b cf       	rjmp	.-298    	; 0x1a6 <LEDs_SetAllLEDs>

000002d0 <EVENT_USB_Device_Disconnect>:
     2d0:	80 e1       	ldi	r24, 0x10	; 16

/** Event handler for the library USB Connection event. */
void EVENT_USB_Device_Connect(void)
{
	LEDs_SetAllLEDs(LEDMASK_USB_ENUMERATING);
}
     2d2:	69 cf       	rjmp	.-302    	; 0x1a6 <LEDs_SetAllLEDs>

000002d4 <EVENT_USB_Device_ConfigurationChanged>:

/** Event handler for the library USB Disconnection event. */
void EVENT_USB_Device_Disconnect(void)
{
	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
     2d4:	cf 93       	push	r28
}
     2d6:	8b e8       	ldi	r24, 0x8B	; 139
/** Event handler for the library USB Configuration Changed event. */
void EVENT_USB_Device_ConfigurationChanged(void)
{
	bool ConfigSuccess = true;

	ConfigSuccess &= CDC_Device_ConfigureEndpoints(&VirtualSerial_CDC_Interface);
     2d8:	91 e0       	ldi	r25, 0x01	; 1
     2da:	0e 94 99 0c 	call	0x1932	; 0x1932 <CDC_Device_ConfigureEndpoints>
     2de:	c8 2f       	mov	r28, r24
	ConfigSuccess &= MS_Device_ConfigureEndpoints(&Disk_MS_Interface);
     2e0:	82 e5       	ldi	r24, 0x52	; 82
     2e2:	91 e0       	ldi	r25, 0x01	; 1
     2e4:	0e 94 c9 0d 	call	0x1b92	; 0x1b92 <MS_Device_ConfigureEndpoints>
     2e8:	28 2f       	mov	r18, r24
     2ea:	30 e0       	ldi	r19, 0x00	; 0
/** Event handler for the library USB Configuration Changed event. */
void EVENT_USB_Device_ConfigurationChanged(void)
{
	bool ConfigSuccess = true;

	ConfigSuccess &= CDC_Device_ConfigureEndpoints(&VirtualSerial_CDC_Interface);
     2ec:	8c 2f       	mov	r24, r28
     2ee:	90 e0       	ldi	r25, 0x00	; 0
	ConfigSuccess &= MS_Device_ConfigureEndpoints(&Disk_MS_Interface);
     2f0:	28 23       	and	r18, r24
     2f2:	39 23       	and	r19, r25

	LEDs_SetAllLEDs(ConfigSuccess ? LEDMASK_USB_READY : LEDMASK_USB_ERROR);
     2f4:	21 15       	cp	r18, r1
     2f6:	31 05       	cpc	r19, r1
     2f8:	11 f0       	breq	.+4      	; 0x2fe <EVENT_USB_Device_ConfigurationChanged+0x2a>
     2fa:	80 e6       	ldi	r24, 0x60	; 96
     2fc:	01 c0       	rjmp	.+2      	; 0x300 <EVENT_USB_Device_ConfigurationChanged+0x2c>
     2fe:	80 e9       	ldi	r24, 0x90	; 144
     300:	52 df       	rcall	.-348    	; 0x1a6 <LEDs_SetAllLEDs>
     302:	cf 91       	pop	r28
}
     304:	08 95       	ret

00000306 <EVENT_USB_Device_ControlRequest>:
     306:	8b e8       	ldi	r24, 0x8B	; 139

/** Event handler for the library USB Control Request reception event. */
void EVENT_USB_Device_ControlRequest(void)
{
	CDC_Device_ProcessControlRequest(&VirtualSerial_CDC_Interface);
     308:	91 e0       	ldi	r25, 0x01	; 1
     30a:	0e 94 ec 0b 	call	0x17d8	; 0x17d8 <CDC_Device_ProcessControlRequest>
	MS_Device_ProcessControlRequest(&Disk_MS_Interface);
     30e:	82 e5       	ldi	r24, 0x52	; 82
     310:	91 e0       	ldi	r25, 0x01	; 1
     312:	0c 94 8c 0d 	jmp	0x1b18	; 0x1b18 <MS_Device_ProcessControlRequest>

00000316 <CALLBACK_MS_Device_SCSICommandReceived>:
}
     316:	cf 93       	push	r28
/** Mass Storage class driver callback function the reception of SCSI commands from the host, which must be processed.
 *
 *  \param[in] MSInterfaceInfo  Pointer to the Mass Storage class interface configuration structure being referenced
 */
bool CALLBACK_MS_Device_SCSICommandReceived(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
     318:	df 93       	push	r29
     31a:	ec 01       	movw	r28, r24
	bool CommandSuccess;

	LEDs_SetAllLEDs(LEDMASK_USB_BUSY);
     31c:	80 e2       	ldi	r24, 0x20	; 32
     31e:	43 df       	rcall	.-378    	; 0x1a6 <LEDs_SetAllLEDs>
     320:	ce 01       	movw	r24, r28
	CommandSuccess = SCSI_DecodeSCSICommand(MSInterfaceInfo);
     322:	88 d3       	rcall	.+1808   	; 0xa34 <SCSI_DecodeSCSICommand>
     324:	c8 2f       	mov	r28, r24
     326:	80 e6       	ldi	r24, 0x60	; 96
     328:	3e df       	rcall	.-388    	; 0x1a6 <LEDs_SetAllLEDs>
	LEDs_SetAllLEDs(LEDMASK_USB_READY);
     32a:	8c 2f       	mov	r24, r28
     32c:	df 91       	pop	r29
     32e:	cf 91       	pop	r28

	return CommandSuccess;
}
     330:	08 95       	ret

00000332 <CALLBACK_USB_GetDescriptor>:
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
     332:	92 30       	cpi	r25, 0x02	; 2
     334:	29 f0       	breq	.+10     	; 0x340 <CALLBACK_USB_GetDescriptor+0xe>
     336:	93 30       	cpi	r25, 0x03	; 3
     338:	41 f0       	breq	.+16     	; 0x34a <CALLBACK_USB_GetDescriptor+0x18>
     33a:	91 30       	cpi	r25, 0x01	; 1
     33c:	e9 f4       	brne	.+58     	; 0x378 <CALLBACK_USB_GetDescriptor+0x46>
     33e:	17 c0       	rjmp	.+46     	; 0x36e <CALLBACK_USB_GetDescriptor+0x3c>
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
			Size    = sizeof(USB_Descriptor_Configuration_t);
     340:	8d e5       	ldi	r24, 0x5D	; 93
     342:	90 e0       	ldi	r25, 0x00	; 0
		case DTYPE_Device:
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
     344:	e6 ef       	ldi	r30, 0xF6	; 246
     346:	f0 e0       	ldi	r31, 0x00	; 0
			Size    = sizeof(USB_Descriptor_Configuration_t);
			break;
     348:	1b c0       	rjmp	.+54     	; 0x380 <CALLBACK_USB_GetDescriptor+0x4e>
		case DTYPE_String:
			switch (DescriptorNumber)
     34a:	81 30       	cpi	r24, 0x01	; 1
     34c:	41 f0       	breq	.+16     	; 0x35e <CALLBACK_USB_GetDescriptor+0x2c>
     34e:	81 30       	cpi	r24, 0x01	; 1
     350:	18 f0       	brcs	.+6      	; 0x358 <CALLBACK_USB_GetDescriptor+0x26>
     352:	82 30       	cpi	r24, 0x02	; 2
     354:	89 f4       	brne	.+34     	; 0x378 <CALLBACK_USB_GetDescriptor+0x46>
     356:	06 c0       	rjmp	.+12     	; 0x364 <CALLBACK_USB_GetDescriptor+0x32>
			{
				case 0x00:
					Address = &LanguageString;
					Size    = pgm_read_byte(&LanguageString.Header.Size);
     358:	e2 ef       	ldi	r30, 0xF2	; 242
     35a:	f0 e0       	ldi	r31, 0x00	; 0
     35c:	05 c0       	rjmp	.+10     	; 0x368 <CALLBACK_USB_GetDescriptor+0x36>
					break;
				case 0x01:
					Address = &ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
     35e:	e8 ed       	ldi	r30, 0xD8	; 216
     360:	f0 e0       	ldi	r31, 0x00	; 0
     362:	02 c0       	rjmp	.+4      	; 0x368 <CALLBACK_USB_GetDescriptor+0x36>
					break;
				case 0x02:
					Address = &ProductString;
					Size    = pgm_read_byte(&ProductString.Header.Size);
     364:	e8 e9       	ldi	r30, 0x98	; 152
     366:	f0 e0       	ldi	r31, 0x00	; 0
     368:	84 91       	lpm	r24, Z
     36a:	90 e0       	ldi	r25, 0x00	; 0
					break;
     36c:	09 c0       	rjmp	.+18     	; 0x380 <CALLBACK_USB_GetDescriptor+0x4e>

	switch (DescriptorType)
	{
		case DTYPE_Device:
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
     36e:	82 e1       	ldi	r24, 0x12	; 18
     370:	90 e0       	ldi	r25, 0x00	; 0
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
	{
		case DTYPE_Device:
			Address = &DeviceDescriptor;
     372:	e3 e5       	ldi	r30, 0x53	; 83
     374:	f1 e0       	ldi	r31, 0x01	; 1
     376:	04 c0       	rjmp	.+8      	; 0x380 <CALLBACK_USB_GetDescriptor+0x4e>
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;
     378:	80 e0       	ldi	r24, 0x00	; 0
     37a:	90 e0       	ldi	r25, 0x00	; 0
                                    const void** const DescriptorAddress)
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
     37c:	e0 e0       	ldi	r30, 0x00	; 0
     37e:	f0 e0       	ldi	r31, 0x00	; 0
			}

			break;
	}

	*DescriptorAddress = Address;
     380:	da 01       	movw	r26, r20
     382:	11 96       	adiw	r26, 0x01	; 1
     384:	fc 93       	st	X, r31
     386:	ee 93       	st	-X, r30
	return Size;
}
     388:	08 95       	ret

0000038a <Dataflash_ToggleSelectedChipCS>:
			 *          or a DATAFLASH_CHIPn mask (where n is the chip number).
			 */
			static inline uint8_t Dataflash_GetSelectedChip(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t Dataflash_GetSelectedChip(void)
			{
				return (~DATAFLASH_CHIPCS_PORT & DATAFLASH_CHIPCS_MASK);
     38a:	8e b1       	in	r24, 0x0e	; 14
			 *              the chip number).
			 */
			static inline void Dataflash_SelectChip(const uint8_t ChipMask) ATTR_ALWAYS_INLINE;
			static inline void Dataflash_SelectChip(const uint8_t ChipMask)
			{
				DATAFLASH_CHIPCS_PORT = ((DATAFLASH_CHIPCS_PORT | DATAFLASH_CHIPCS_MASK) & ~ChipMask);
     38c:	9e b1       	in	r25, 0x0e	; 14
     38e:	93 60       	ori	r25, 0x03	; 3
     390:	9e b9       	out	0x0e, r25	; 14
     392:	9e b1       	in	r25, 0x0e	; 14
     394:	8c 6f       	ori	r24, 0xFC	; 252
     396:	93 60       	ori	r25, 0x03	; 3
     398:	89 23       	and	r24, r25
     39a:	8e b9       	out	0x0e, r24	; 14
			{
				uint8_t SelectedChipMask = Dataflash_GetSelectedChip();

				Dataflash_DeselectChip();
				Dataflash_SelectChip(SelectedChipMask);
			}
     39c:	08 95       	ret

0000039e <Dataflash_WaitWhileBusy>:
			/** Spin-loops while the currently selected dataflash is busy executing a command, such as a main
			 *  memory page program or main memory to buffer transfer.
			 */
			static inline void Dataflash_WaitWhileBusy(void)
			{
				Dataflash_ToggleSelectedChipCS();
     39e:	f5 df       	rcall	.-22     	; 0x38a <Dataflash_ToggleSelectedChipCS>
     3a0:	87 ed       	ldi	r24, 0xD7	; 215
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     3a2:	8e bd       	out	0x2e, r24	; 46
     3a4:	0d b4       	in	r0, 0x2d	; 45
				while (!(SPSR & (1 << SPIF)));
     3a6:	07 fe       	sbrs	r0, 7
     3a8:	fd cf       	rjmp	.-6      	; 0x3a4 <Dataflash_WaitWhileBusy+0x6>
     3aa:	1e bc       	out	0x2e, r1	; 46
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     3ac:	0d b4       	in	r0, 0x2d	; 45
				while (!(SPSR & (1 << SPIF)));
     3ae:	07 fe       	sbrs	r0, 7
     3b0:	fd cf       	rjmp	.-6      	; 0x3ac <Dataflash_WaitWhileBusy+0xe>
     3b2:	0e b4       	in	r0, 0x2e	; 46
				Dataflash_SendByte(DF_CMD_GETSTATUS);
				while (!(Dataflash_ReceiveByte() & DF_STATUS_READY));
     3b4:	07 fe       	sbrs	r0, 7
     3b6:	f9 cf       	rjmp	.-14     	; 0x3aa <Dataflash_WaitWhileBusy+0xc>
     3b8:	e8 cf       	rjmp	.-48     	; 0x38a <Dataflash_ToggleSelectedChipCS>

000003ba <Dataflash_SendAddressBytes>:
				Dataflash_ToggleSelectedChipCS();
     3ba:	9c 01       	movw	r18, r24
     3bc:	36 95       	lsr	r19
			}
     3be:	27 95       	ror	r18
			{
				#if (DATAFLASH_TOTALCHIPS == 2)
					PageAddress >>= 1;
				#endif
				
				Dataflash_SendByte(PageAddress >> 5);
     3c0:	56 e0       	ldi	r21, 0x06	; 6
     3c2:	96 95       	lsr	r25
     3c4:	87 95       	ror	r24
     3c6:	5a 95       	dec	r21
     3c8:	e1 f7       	brne	.-8      	; 0x3c2 <Dataflash_SendAddressBytes+0x8>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     3ca:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     3cc:	0d b4       	in	r0, 0x2d	; 45
     3ce:	07 fe       	sbrs	r0, 7
     3d0:	fd cf       	rjmp	.-6      	; 0x3cc <Dataflash_SendAddressBytes+0x12>
				Dataflash_SendByte((PageAddress << 3) | (BufferByte >> 8));
     3d2:	22 0f       	add	r18, r18
     3d4:	22 0f       	add	r18, r18
     3d6:	22 0f       	add	r18, r18
     3d8:	27 2b       	or	r18, r23
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     3da:	2e bd       	out	0x2e, r18	; 46
				while (!(SPSR & (1 << SPIF)));
     3dc:	0d b4       	in	r0, 0x2d	; 45
     3de:	07 fe       	sbrs	r0, 7
     3e0:	fd cf       	rjmp	.-6      	; 0x3dc <Dataflash_SendAddressBytes+0x22>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     3e2:	6e bd       	out	0x2e, r22	; 46
				while (!(SPSR & (1 << SPIF)));
     3e4:	0d b4       	in	r0, 0x2d	; 45
     3e6:	07 fe       	sbrs	r0, 7
     3e8:	fd cf       	rjmp	.-6      	; 0x3e4 <Dataflash_SendAddressBytes+0x2a>
				Dataflash_SendByte(BufferByte);
			}
     3ea:	08 95       	ret

000003ec <Dataflash_SelectChipFromPage>:
			 *              the chip number).
			 */
			static inline void Dataflash_SelectChip(const uint8_t ChipMask) ATTR_ALWAYS_INLINE;
			static inline void Dataflash_SelectChip(const uint8_t ChipMask)
			{
				DATAFLASH_CHIPCS_PORT = ((DATAFLASH_CHIPCS_PORT | DATAFLASH_CHIPCS_MASK) & ~ChipMask);
     3ec:	2e b1       	in	r18, 0x0e	; 14
     3ee:	23 60       	ori	r18, 0x03	; 3
     3f0:	2e b9       	out	0x0e, r18	; 14
			 */
			static inline void Dataflash_SelectChipFromPage(const uint16_t PageAddress)
			{
				Dataflash_DeselectChip();

				if (PageAddress >= (DATAFLASH_PAGES * DATAFLASH_TOTALCHIPS))
     3f2:	20 e4       	ldi	r18, 0x40	; 64
     3f4:	80 30       	cpi	r24, 0x00	; 0
     3f6:	92 07       	cpc	r25, r18
     3f8:	58 f4       	brcc	.+22     	; 0x410 <Dataflash_SelectChipFromPage+0x24>
				  return;

				#if (DATAFLASH_TOTALCHIPS == 2)
					if (PageAddress & 0x01)
     3fa:	80 ff       	sbrs	r24, 0
     3fc:	05 c0       	rjmp	.+10     	; 0x408 <Dataflash_SelectChipFromPage+0x1c>
			 *              the chip number).
			 */
			static inline void Dataflash_SelectChip(const uint8_t ChipMask) ATTR_ALWAYS_INLINE;
			static inline void Dataflash_SelectChip(const uint8_t ChipMask)
			{
				DATAFLASH_CHIPCS_PORT = ((DATAFLASH_CHIPCS_PORT | DATAFLASH_CHIPCS_MASK) & ~ChipMask);
     3fe:	8e b1       	in	r24, 0x0e	; 14
     400:	83 60       	ori	r24, 0x03	; 3
     402:	8d 7f       	andi	r24, 0xFD	; 253
     404:	8e b9       	out	0x0e, r24	; 14
     406:	08 95       	ret
     408:	8e b1       	in	r24, 0x0e	; 14
     40a:	83 60       	ori	r24, 0x03	; 3
     40c:	8e 7f       	andi	r24, 0xFE	; 254
     40e:	8e b9       	out	0x0e, r24	; 14
     410:	08 95       	ret

00000412 <DataflashManager_WriteBlocks>:
 *  \param[in] TotalBlocks   Number of blocks of data to write
 */
void DataflashManager_WriteBlocks(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo,
                                  const uint32_t BlockAddress,
                                  uint16_t TotalBlocks)
{
     412:	3f 92       	push	r3
     414:	4f 92       	push	r4
     416:	5f 92       	push	r5
     418:	6f 92       	push	r6
     41a:	7f 92       	push	r7
     41c:	8f 92       	push	r8
     41e:	9f 92       	push	r9
     420:	af 92       	push	r10
     422:	bf 92       	push	r11
     424:	cf 92       	push	r12
     426:	df 92       	push	r13
     428:	ef 92       	push	r14
     42a:	ff 92       	push	r15
     42c:	0f 93       	push	r16
     42e:	1f 93       	push	r17
     430:	cf 93       	push	r28
     432:	df 93       	push	r29
     434:	0f 92       	push	r0
     436:	cd b7       	in	r28, 0x3d	; 61
     438:	de b7       	in	r29, 0x3e	; 62
     43a:	2c 01       	movw	r4, r24
     43c:	b2 2e       	mov	r11, r18
     43e:	c3 2e       	mov	r12, r19
	uint16_t CurrDFPage          = ((BlockAddress * VIRTUAL_MEMORY_BLOCK_SIZE) / DATAFLASH_PAGE_SIZE);
     440:	db 01       	movw	r26, r22
     442:	ca 01       	movw	r24, r20
     444:	f9 e0       	ldi	r31, 0x09	; 9
     446:	88 0f       	add	r24, r24
     448:	99 1f       	adc	r25, r25
     44a:	aa 1f       	adc	r26, r26
     44c:	bb 1f       	adc	r27, r27
     44e:	fa 95       	dec	r31
     450:	d1 f7       	brne	.-12     	; 0x446 <DataflashManager_WriteBlocks+0x34>
     452:	1a e0       	ldi	r17, 0x0A	; 10
     454:	b6 95       	lsr	r27
     456:	a7 95       	ror	r26
     458:	97 95       	ror	r25
     45a:	87 95       	ror	r24
     45c:	1a 95       	dec	r17
     45e:	d1 f7       	brne	.-12     	; 0x454 <DataflashManager_WriteBlocks+0x42>
     460:	7c 01       	movw	r14, r24
	uint16_t CurrDFPageByte      = ((BlockAddress * VIRTUAL_MEMORY_BLOCK_SIZE) % DATAFLASH_PAGE_SIZE);
     462:	8a 01       	movw	r16, r20
     464:	10 2f       	mov	r17, r16
     466:	00 27       	eor	r16, r16
     468:	11 0f       	add	r17, r17
     46a:	13 70       	andi	r17, 0x03	; 3
	uint8_t  CurrDFPageByteDiv16 = (CurrDFPageByte >> 4);
	bool     UsingSecondBuffer   = false;

	/* Select the correct starting Dataflash IC for the block requested */
	Dataflash_SelectChipFromPage(CurrDFPage);
     46c:	bf df       	rcall	.-130    	; 0x3ec <Dataflash_SelectChipFromPage>
     46e:	83 e5       	ldi	r24, 0x53	; 83
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     470:	8e bd       	out	0x2e, r24	; 46
     472:	0d b4       	in	r0, 0x2d	; 45
				while (!(SPSR & (1 << SPIF)));
     474:	07 fe       	sbrs	r0, 7
     476:	fd cf       	rjmp	.-6      	; 0x472 <DataflashManager_WriteBlocks+0x60>
     478:	c7 01       	movw	r24, r14

#if (DATAFLASH_PAGE_SIZE > VIRTUAL_MEMORY_BLOCK_SIZE)
	/* Copy selected dataflash's current page contents to the Dataflash buffer */
	Dataflash_SendByte(DF_CMD_MAINMEMTOBUFF1);
	Dataflash_SendAddressBytes(CurrDFPage, 0);
     47a:	60 e0       	ldi	r22, 0x00	; 0
     47c:	70 e0       	ldi	r23, 0x00	; 0
     47e:	9d df       	rcall	.-198    	; 0x3ba <Dataflash_SendAddressBytes>
     480:	8e df       	rcall	.-228    	; 0x39e <Dataflash_WaitWhileBusy>
     482:	84 e8       	ldi	r24, 0x84	; 132
	Dataflash_WaitWhileBusy();
     484:	8e bd       	out	0x2e, r24	; 46
     486:	0d b4       	in	r0, 0x2d	; 45
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     488:	07 fe       	sbrs	r0, 7
     48a:	fd cf       	rjmp	.-6      	; 0x486 <DataflashManager_WriteBlocks+0x74>
				while (!(SPSR & (1 << SPIF)));
     48c:	80 e0       	ldi	r24, 0x00	; 0
     48e:	90 e0       	ldi	r25, 0x00	; 0
     490:	b8 01       	movw	r22, r16
#endif

	/* Send the Dataflash buffer write command */
	Dataflash_SendByte(DF_CMD_BUFF1WRITE);
	Dataflash_SendAddressBytes(0, CurrDFPageByte);
     492:	93 df       	rcall	.-218    	; 0x3ba <Dataflash_SendAddressBytes>
     494:	7a d6       	rcall	.+3316   	; 0x118a <Endpoint_WaitUntilReady>
     496:	88 23       	and	r24, r24
     498:	09 f0       	breq	.+2      	; 0x49c <DataflashManager_WriteBlocks+0x8a>
     49a:	f3 c0       	rjmp	.+486    	; 0x682 <DataflashManager_WriteBlocks+0x270>

	/* Wait until endpoint is ready before continuing */
	if (Endpoint_WaitUntilReady())
     49c:	a8 01       	movw	r20, r16
     49e:	74 e0       	ldi	r23, 0x04	; 4
     4a0:	56 95       	lsr	r21
     4a2:	47 95       	ror	r20
     4a4:	7a 95       	dec	r23
                                  const uint32_t BlockAddress,
                                  uint16_t TotalBlocks)
{
	uint16_t CurrDFPage          = ((BlockAddress * VIRTUAL_MEMORY_BLOCK_SIZE) / DATAFLASH_PAGE_SIZE);
	uint16_t CurrDFPageByte      = ((BlockAddress * VIRTUAL_MEMORY_BLOCK_SIZE) % DATAFLASH_PAGE_SIZE);
	uint8_t  CurrDFPageByteDiv16 = (CurrDFPageByte >> 4);
     4a6:	e1 f7       	brne	.-8      	; 0x4a0 <DataflashManager_WriteBlocks+0x8e>
     4a8:	0b 2d       	mov	r16, r11
     4aa:	1c 2d       	mov	r17, r12
     4ac:	cc 24       	eor	r12, r12
     4ae:	dd 24       	eor	r13, r13
     4b0:	33 24       	eor	r3, r3
     4b2:	38 01       	movw	r6, r16
     4b4:	e5 e0       	ldi	r30, 0x05	; 5
     4b6:	66 0c       	add	r6, r6
     4b8:	77 1c       	adc	r7, r7
     4ba:	ea 95       	dec	r30
 *
 *  \param[in] MSInterfaceInfo  Pointer to a structure containing a Mass Storage Class configuration and state
 *  \param[in] BlockAddress  Data block starting address for the write sequence
 *  \param[in] TotalBlocks   Number of blocks of data to write
 */
void DataflashManager_WriteBlocks(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo,
     4bc:	e1 f7       	brne	.-8      	; 0x4b6 <DataflashManager_WriteBlocks+0xa4>
     4be:	bb 24       	eor	r11, r11
     4c0:	b3 94       	inc	r11
     4c2:	c0 c0       	rjmp	.+384    	; 0x644 <DataflashManager_WriteBlocks+0x232>
     4c4:	60 e2       	ldi	r22, 0x20	; 32
     4c6:	a6 2e       	mov	r10, r22
				CurrDFPageByteDiv16 = 0;
				CurrDFPage++;

				/* Once all the Dataflash ICs have had their first buffers filled, switch buffers to maintain throughput */
				if (Dataflash_GetSelectedChip() == DATAFLASH_CHIP_MASK(DATAFLASH_TOTALCHIPS))
				  UsingSecondBuffer = !(UsingSecondBuffer);
     4c8:	46 01       	movw	r8, r12
     4ca:	86 0c       	add	r8, r6
     4cc:	97 1c       	adc	r9, r7

	/* Wait until endpoint is ready before continuing */
	if (Endpoint_WaitUntilReady())
	  return;

	while (TotalBlocks)
     4ce:	80 91 e8 00 	lds	r24, 0x00E8
				/* Select the next Dataflash chip based on the new Dataflash page index */
				Dataflash_SelectChipFromPage(CurrDFPage);

#if (DATAFLASH_PAGE_SIZE > VIRTUAL_MEMORY_BLOCK_SIZE)
				/* If less than one Dataflash page remaining, copy over the existing page to preserve trailing data */
				if ((TotalBlocks * (VIRTUAL_MEMORY_BLOCK_SIZE >> 4)) < (DATAFLASH_PAGE_SIZE >> 4))
     4d2:	85 fd       	sbrc	r24, 5
     4d4:	0b c0       	rjmp	.+22     	; 0x4ec <DataflashManager_WriteBlocks+0xda>
     4d6:	80 91 e8 00 	lds	r24, 0x00E8
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
     4da:	8b 77       	andi	r24, 0x7B	; 123

		/* Write an endpoint packet sized data block to the Dataflash */
		while (BytesInBlockDiv16 < (VIRTUAL_MEMORY_BLOCK_SIZE >> 4))
		{
			/* Check if the endpoint is currently empty */
			if (!(Endpoint_IsReadWriteAllowed()))
     4dc:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     4e0:	49 83       	std	Y+1, r20	; 0x01
     4e2:	53 d6       	rcall	.+3238   	; 0x118a <Endpoint_WaitUntilReady>
     4e4:	49 81       	ldd	r20, Y+1	; 0x01
     4e6:	88 23       	and	r24, r24
     4e8:	09 f0       	breq	.+2      	; 0x4ec <DataflashManager_WriteBlocks+0xda>
			{
				/* Clear the current endpoint bank */
				Endpoint_ClearOUT();

				/* Wait until the host has sent another packet */
				if (Endpoint_WaitUntilReady())
     4ea:	cb c0       	rjmp	.+406    	; 0x682 <DataflashManager_WriteBlocks+0x270>
     4ec:	40 34       	cpi	r20, 0x40	; 64
     4ee:	09 f0       	breq	.+2      	; 0x4f2 <DataflashManager_WriteBlocks+0xe0>
     4f0:	3b c0       	rjmp	.+118    	; 0x568 <DataflashManager_WriteBlocks+0x156>
     4f2:	55 df       	rcall	.-342    	; 0x39e <Dataflash_WaitWhileBusy>
     4f4:	33 20       	and	r3, r3
     4f6:	11 f0       	breq	.+4      	; 0x4fc <DataflashManager_WriteBlocks+0xea>
				  return;
			}

			/* Check if end of Dataflash page reached */
			if (CurrDFPageByteDiv16 == (DATAFLASH_PAGE_SIZE >> 4))
     4f8:	86 e8       	ldi	r24, 0x86	; 134
     4fa:	01 c0       	rjmp	.+2      	; 0x4fe <DataflashManager_WriteBlocks+0xec>
     4fc:	83 e8       	ldi	r24, 0x83	; 131
			{
				/* Write the Dataflash buffer contents back to the Dataflash page */
				Dataflash_WaitWhileBusy();
     4fe:	8e bd       	out	0x2e, r24	; 46
     500:	0d b4       	in	r0, 0x2d	; 45
				Dataflash_SendByte(UsingSecondBuffer ? DF_CMD_BUFF2TOMAINMEMWITHERASE : DF_CMD_BUFF1TOMAINMEMWITHERASE);
     502:	07 fe       	sbrs	r0, 7
     504:	fd cf       	rjmp	.-6      	; 0x500 <DataflashManager_WriteBlocks+0xee>
     506:	c7 01       	movw	r24, r14
     508:	60 e0       	ldi	r22, 0x00	; 0
     50a:	70 e0       	ldi	r23, 0x00	; 0
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     50c:	56 df       	rcall	.-340    	; 0x3ba <Dataflash_SendAddressBytes>
				while (!(SPSR & (1 << SPIF)));
     50e:	08 94       	sec
     510:	e1 1c       	adc	r14, r1
     512:	f1 1c       	adc	r15, r1
				Dataflash_SendAddressBytes(CurrDFPage, 0);
     514:	8e b1       	in	r24, 0x0e	; 14
     516:	80 95       	com	r24
     518:	83 70       	andi	r24, 0x03	; 3
     51a:	82 30       	cpi	r24, 0x02	; 2
     51c:	09 f4       	brne	.+2      	; 0x520 <DataflashManager_WriteBlocks+0x10e>

				/* Reset the Dataflash buffer counter, increment the page counter */
				CurrDFPageByteDiv16 = 0;
				CurrDFPage++;
     51e:	3b 24       	eor	r3, r11
     520:	c7 01       	movw	r24, r14
     522:	64 df       	rcall	.-312    	; 0x3ec <Dataflash_SelectChipFromPage>
			 *          or a DATAFLASH_CHIPn mask (where n is the chip number).
			 */
			static inline uint8_t Dataflash_GetSelectedChip(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t Dataflash_GetSelectedChip(void)
			{
				return (~DATAFLASH_CHIPCS_PORT & DATAFLASH_CHIPCS_MASK);
     524:	80 e4       	ldi	r24, 0x40	; 64
     526:	88 16       	cp	r8, r24
     528:	91 04       	cpc	r9, r1

				/* Once all the Dataflash ICs have had their first buffers filled, switch buffers to maintain throughput */
				if (Dataflash_GetSelectedChip() == DATAFLASH_CHIP_MASK(DATAFLASH_TOTALCHIPS))
     52a:	78 f4       	brcc	.+30     	; 0x54a <DataflashManager_WriteBlocks+0x138>
     52c:	38 df       	rcall	.-400    	; 0x39e <Dataflash_WaitWhileBusy>
				  UsingSecondBuffer = !(UsingSecondBuffer);
     52e:	33 20       	and	r3, r3

				/* Select the next Dataflash chip based on the new Dataflash page index */
				Dataflash_SelectChipFromPage(CurrDFPage);
     530:	11 f0       	breq	.+4      	; 0x536 <DataflashManager_WriteBlocks+0x124>
     532:	85 e5       	ldi	r24, 0x55	; 85
     534:	01 c0       	rjmp	.+2      	; 0x538 <DataflashManager_WriteBlocks+0x126>

#if (DATAFLASH_PAGE_SIZE > VIRTUAL_MEMORY_BLOCK_SIZE)
				/* If less than one Dataflash page remaining, copy over the existing page to preserve trailing data */
				if ((TotalBlocks * (VIRTUAL_MEMORY_BLOCK_SIZE >> 4)) < (DATAFLASH_PAGE_SIZE >> 4))
     536:	83 e5       	ldi	r24, 0x53	; 83
     538:	8e bd       	out	0x2e, r24	; 46
     53a:	0d b4       	in	r0, 0x2d	; 45
     53c:	07 fe       	sbrs	r0, 7
				{
					/* Copy selected dataflash's current page contents to the Dataflash buffer */
					Dataflash_WaitWhileBusy();
     53e:	fd cf       	rjmp	.-6      	; 0x53a <DataflashManager_WriteBlocks+0x128>
     540:	c7 01       	movw	r24, r14
					Dataflash_SendByte(UsingSecondBuffer ? DF_CMD_MAINMEMTOBUFF2 : DF_CMD_MAINMEMTOBUFF1);
     542:	60 e0       	ldi	r22, 0x00	; 0
     544:	70 e0       	ldi	r23, 0x00	; 0
     546:	39 df       	rcall	.-398    	; 0x3ba <Dataflash_SendAddressBytes>
     548:	2a df       	rcall	.-428    	; 0x39e <Dataflash_WaitWhileBusy>
     54a:	33 20       	and	r3, r3
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     54c:	11 f0       	breq	.+4      	; 0x552 <DataflashManager_WriteBlocks+0x140>
				while (!(SPSR & (1 << SPIF)));
     54e:	87 e8       	ldi	r24, 0x87	; 135
     550:	01 c0       	rjmp	.+2      	; 0x554 <DataflashManager_WriteBlocks+0x142>
     552:	84 e8       	ldi	r24, 0x84	; 132
					Dataflash_SendAddressBytes(CurrDFPage, 0);
     554:	8e bd       	out	0x2e, r24	; 46
     556:	0d b4       	in	r0, 0x2d	; 45
     558:	07 fe       	sbrs	r0, 7
     55a:	fd cf       	rjmp	.-6      	; 0x556 <DataflashManager_WriteBlocks+0x144>
     55c:	80 e0       	ldi	r24, 0x00	; 0
					Dataflash_WaitWhileBusy();
     55e:	90 e0       	ldi	r25, 0x00	; 0
     560:	60 e0       	ldi	r22, 0x00	; 0
				}
#endif

				/* Send the Dataflash buffer write command */
				Dataflash_SendByte(UsingSecondBuffer ? DF_CMD_BUFF2WRITE : DF_CMD_BUFF1WRITE);
     562:	70 e0       	ldi	r23, 0x00	; 0
     564:	2a df       	rcall	.-428    	; 0x3ba <Dataflash_SendAddressBytes>
     566:	40 e0       	ldi	r20, 0x00	; 0
     568:	80 91 f1 00 	lds	r24, 0x00F1
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     56c:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     56e:	0d b4       	in	r0, 0x2d	; 45
     570:	07 fe       	sbrs	r0, 7
     572:	fd cf       	rjmp	.-6      	; 0x56e <DataflashManager_WriteBlocks+0x15c>
				Dataflash_SendAddressBytes(0, 0);
     574:	80 91 f1 00 	lds	r24, 0x00F1
     578:	8e bd       	out	0x2e, r24	; 46
     57a:	0d b4       	in	r0, 0x2d	; 45
     57c:	07 fe       	sbrs	r0, 7
     57e:	fd cf       	rjmp	.-6      	; 0x57a <DataflashManager_WriteBlocks+0x168>
				Dataflash_WaitWhileBusy();
				Dataflash_SendByte(UsingSecondBuffer ? DF_CMD_BUFF2TOMAINMEMWITHERASE : DF_CMD_BUFF1TOMAINMEMWITHERASE);
				Dataflash_SendAddressBytes(CurrDFPage, 0);

				/* Reset the Dataflash buffer counter, increment the page counter */
				CurrDFPageByteDiv16 = 0;
     580:	80 91 f1 00 	lds	r24, 0x00F1
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
     584:	8e bd       	out	0x2e, r24	; 46
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     586:	0d b4       	in	r0, 0x2d	; 45
				while (!(SPSR & (1 << SPIF)));
     588:	07 fe       	sbrs	r0, 7
     58a:	fd cf       	rjmp	.-6      	; 0x586 <DataflashManager_WriteBlocks+0x174>
     58c:	80 91 f1 00 	lds	r24, 0x00F1
     590:	8e bd       	out	0x2e, r24	; 46
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     592:	0d b4       	in	r0, 0x2d	; 45
				while (!(SPSR & (1 << SPIF)));
     594:	07 fe       	sbrs	r0, 7
     596:	fd cf       	rjmp	.-6      	; 0x592 <DataflashManager_WriteBlocks+0x180>
     598:	80 91 f1 00 	lds	r24, 0x00F1
     59c:	8e bd       	out	0x2e, r24	; 46
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     59e:	0d b4       	in	r0, 0x2d	; 45
				while (!(SPSR & (1 << SPIF)));
     5a0:	07 fe       	sbrs	r0, 7
     5a2:	fd cf       	rjmp	.-6      	; 0x59e <DataflashManager_WriteBlocks+0x18c>
     5a4:	80 91 f1 00 	lds	r24, 0x00F1
     5a8:	8e bd       	out	0x2e, r24	; 46
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     5aa:	0d b4       	in	r0, 0x2d	; 45
				while (!(SPSR & (1 << SPIF)));
     5ac:	07 fe       	sbrs	r0, 7
     5ae:	fd cf       	rjmp	.-6      	; 0x5aa <DataflashManager_WriteBlocks+0x198>
     5b0:	80 91 f1 00 	lds	r24, 0x00F1
     5b4:	8e bd       	out	0x2e, r24	; 46
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     5b6:	0d b4       	in	r0, 0x2d	; 45
				while (!(SPSR & (1 << SPIF)));
     5b8:	07 fe       	sbrs	r0, 7
     5ba:	fd cf       	rjmp	.-6      	; 0x5b6 <DataflashManager_WriteBlocks+0x1a4>
     5bc:	80 91 f1 00 	lds	r24, 0x00F1
     5c0:	8e bd       	out	0x2e, r24	; 46
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     5c2:	0d b4       	in	r0, 0x2d	; 45
				while (!(SPSR & (1 << SPIF)));
     5c4:	07 fe       	sbrs	r0, 7
     5c6:	fd cf       	rjmp	.-6      	; 0x5c2 <DataflashManager_WriteBlocks+0x1b0>
     5c8:	80 91 f1 00 	lds	r24, 0x00F1
     5cc:	8e bd       	out	0x2e, r24	; 46
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     5ce:	0d b4       	in	r0, 0x2d	; 45
				while (!(SPSR & (1 << SPIF)));
     5d0:	07 fe       	sbrs	r0, 7
     5d2:	fd cf       	rjmp	.-6      	; 0x5ce <DataflashManager_WriteBlocks+0x1bc>
     5d4:	80 91 f1 00 	lds	r24, 0x00F1
     5d8:	8e bd       	out	0x2e, r24	; 46
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     5da:	0d b4       	in	r0, 0x2d	; 45
				while (!(SPSR & (1 << SPIF)));
     5dc:	07 fe       	sbrs	r0, 7
     5de:	fd cf       	rjmp	.-6      	; 0x5da <DataflashManager_WriteBlocks+0x1c8>
     5e0:	80 91 f1 00 	lds	r24, 0x00F1
     5e4:	8e bd       	out	0x2e, r24	; 46
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     5e6:	0d b4       	in	r0, 0x2d	; 45
				while (!(SPSR & (1 << SPIF)));
     5e8:	07 fe       	sbrs	r0, 7
     5ea:	fd cf       	rjmp	.-6      	; 0x5e6 <DataflashManager_WriteBlocks+0x1d4>
     5ec:	80 91 f1 00 	lds	r24, 0x00F1
     5f0:	8e bd       	out	0x2e, r24	; 46
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     5f2:	0d b4       	in	r0, 0x2d	; 45
				while (!(SPSR & (1 << SPIF)));
     5f4:	07 fe       	sbrs	r0, 7
     5f6:	fd cf       	rjmp	.-6      	; 0x5f2 <DataflashManager_WriteBlocks+0x1e0>
     5f8:	80 91 f1 00 	lds	r24, 0x00F1
     5fc:	8e bd       	out	0x2e, r24	; 46
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     5fe:	0d b4       	in	r0, 0x2d	; 45
				while (!(SPSR & (1 << SPIF)));
     600:	07 fe       	sbrs	r0, 7
     602:	fd cf       	rjmp	.-6      	; 0x5fe <DataflashManager_WriteBlocks+0x1ec>
     604:	80 91 f1 00 	lds	r24, 0x00F1
     608:	8e bd       	out	0x2e, r24	; 46
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     60a:	0d b4       	in	r0, 0x2d	; 45
				while (!(SPSR & (1 << SPIF)));
     60c:	07 fe       	sbrs	r0, 7
     60e:	fd cf       	rjmp	.-6      	; 0x60a <DataflashManager_WriteBlocks+0x1f8>
     610:	80 91 f1 00 	lds	r24, 0x00F1
     614:	8e bd       	out	0x2e, r24	; 46
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     616:	0d b4       	in	r0, 0x2d	; 45
				while (!(SPSR & (1 << SPIF)));
     618:	07 fe       	sbrs	r0, 7
     61a:	fd cf       	rjmp	.-6      	; 0x616 <DataflashManager_WriteBlocks+0x204>
     61c:	80 91 f1 00 	lds	r24, 0x00F1
     620:	8e bd       	out	0x2e, r24	; 46
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     622:	0d b4       	in	r0, 0x2d	; 45
				while (!(SPSR & (1 << SPIF)));
     624:	07 fe       	sbrs	r0, 7
     626:	fd cf       	rjmp	.-6      	; 0x622 <DataflashManager_WriteBlocks+0x210>
     628:	f2 01       	movw	r30, r4
     62a:	80 ad       	sts	0x60, r24
     62c:	88 23       	and	r24, r24
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     62e:	49 f5       	brne	.+82     	; 0x682 <DataflashManager_WriteBlocks+0x270>
				while (!(SPSR & (1 << SPIF)));
     630:	4f 5f       	subi	r20, 0xFF	; 255
     632:	aa 94       	dec	r10
     634:	09 f0       	breq	.+2      	; 0x638 <DataflashManager_WriteBlocks+0x226>
     636:	4b cf       	rjmp	.-362    	; 0x4ce <DataflashManager_WriteBlocks+0xbc>
     638:	01 50       	subi	r16, 0x01	; 1
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     63a:	10 40       	sbci	r17, 0x00	; 0
				while (!(SPSR & (1 << SPIF)));
     63c:	80 ee       	ldi	r24, 0xE0	; 224
     63e:	9f ef       	ldi	r25, 0xFF	; 255
     640:	c8 0e       	add	r12, r24

			/* Increment the block 16 byte block counter */
			BytesInBlockDiv16++;

			/* Check if the current command is being aborted by the host */
			if (MSInterfaceInfo->State.IsMassStoreReset)
     642:	d9 1e       	adc	r13, r25
     644:	01 15       	cp	r16, r1
     646:	11 05       	cpc	r17, r1
     648:	09 f0       	breq	.+2      	; 0x64c <DataflashManager_WriteBlocks+0x23a>
			Dataflash_SendByte(Endpoint_Read_8());
			Dataflash_SendByte(Endpoint_Read_8());
			Dataflash_SendByte(Endpoint_Read_8());

			/* Increment the Dataflash page 16 byte block counter */
			CurrDFPageByteDiv16++;
     64a:	3c cf       	rjmp	.-392    	; 0x4c4 <DataflashManager_WriteBlocks+0xb2>
     64c:	a8 de       	rcall	.-688    	; 0x39e <Dataflash_WaitWhileBusy>
	while (TotalBlocks)
	{
		uint8_t BytesInBlockDiv16 = 0;

		/* Write an endpoint packet sized data block to the Dataflash */
		while (BytesInBlockDiv16 < (VIRTUAL_MEMORY_BLOCK_SIZE >> 4))
     64e:	33 20       	and	r3, r3
     650:	11 f0       	breq	.+4      	; 0x656 <DataflashManager_WriteBlocks+0x244>
			if (MSInterfaceInfo->State.IsMassStoreReset)
			  return;
		}

		/* Decrement the blocks remaining counter */
		TotalBlocks--;
     652:	86 e8       	ldi	r24, 0x86	; 134
     654:	01 c0       	rjmp	.+2      	; 0x658 <DataflashManager_WriteBlocks+0x246>
     656:	83 e8       	ldi	r24, 0x83	; 131
     658:	8e bd       	out	0x2e, r24	; 46
     65a:	0d b4       	in	r0, 0x2d	; 45
     65c:	07 fe       	sbrs	r0, 7

	/* Wait until endpoint is ready before continuing */
	if (Endpoint_WaitUntilReady())
	  return;

	while (TotalBlocks)
     65e:	fd cf       	rjmp	.-6      	; 0x65a <DataflashManager_WriteBlocks+0x248>
     660:	c7 01       	movw	r24, r14
     662:	60 e0       	ldi	r22, 0x00	; 0
     664:	70 e0       	ldi	r23, 0x00	; 0
		/* Decrement the blocks remaining counter */
		TotalBlocks--;
	}

	/* Write the Dataflash buffer contents back to the Dataflash page */
	Dataflash_WaitWhileBusy();
     666:	a9 de       	rcall	.-686    	; 0x3ba <Dataflash_SendAddressBytes>
     668:	9a de       	rcall	.-716    	; 0x39e <Dataflash_WaitWhileBusy>
	Dataflash_SendByte(UsingSecondBuffer ? DF_CMD_BUFF2TOMAINMEMWITHERASE : DF_CMD_BUFF1TOMAINMEMWITHERASE);
     66a:	80 91 e8 00 	lds	r24, 0x00E8
     66e:	85 fd       	sbrc	r24, 5
     670:	05 c0       	rjmp	.+10     	; 0x67c <DataflashManager_WriteBlocks+0x26a>
     672:	80 91 e8 00 	lds	r24, 0x00E8
     676:	8b 77       	andi	r24, 0x7B	; 123
     678:	80 93 e8 00 	sts	0x00E8, r24
	Dataflash_SendAddressBytes(CurrDFPage, 0x00);
     67c:	8e b1       	in	r24, 0x0e	; 14
     67e:	83 60       	ori	r24, 0x03	; 3
     680:	8e b9       	out	0x0e, r24	; 14
     682:	0f 90       	pop	r0
     684:	df 91       	pop	r29
	Dataflash_WaitWhileBusy();
     686:	cf 91       	pop	r28
     688:	1f 91       	pop	r17
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
     68a:	0f 91       	pop	r16
     68c:	ff 90       	pop	r15

	/* If the endpoint is empty, clear it ready for the next packet from the host */
	if (!(Endpoint_IsReadWriteAllowed()))
     68e:	ef 90       	pop	r14
     690:	df 90       	pop	r13
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     692:	cf 90       	pop	r12
     694:	bf 90       	pop	r11
     696:	af 90       	pop	r10
     698:	9f 90       	pop	r9
     69a:	8f 90       	pop	r8
			 *              the chip number).
			 */
			static inline void Dataflash_SelectChip(const uint8_t ChipMask) ATTR_ALWAYS_INLINE;
			static inline void Dataflash_SelectChip(const uint8_t ChipMask)
			{
				DATAFLASH_CHIPCS_PORT = ((DATAFLASH_CHIPCS_PORT | DATAFLASH_CHIPCS_MASK) & ~ChipMask);
     69c:	7f 90       	pop	r7
     69e:	6f 90       	pop	r6
     6a0:	5f 90       	pop	r5
	  Endpoint_ClearOUT();

	/* Deselect all Dataflash chips */
	Dataflash_DeselectChip();
}
     6a2:	4f 90       	pop	r4
     6a4:	3f 90       	pop	r3
     6a6:	08 95       	ret

000006a8 <DataflashManager_ReadBlocks>:
     6a8:	bf 92       	push	r11
     6aa:	cf 92       	push	r12
     6ac:	df 92       	push	r13
     6ae:	ef 92       	push	r14
     6b0:	ff 92       	push	r15
     6b2:	0f 93       	push	r16
     6b4:	1f 93       	push	r17
     6b6:	cf 93       	push	r28
     6b8:	df 93       	push	r29
     6ba:	6c 01       	movw	r12, r24
     6bc:	79 01       	movw	r14, r18
     6be:	db 01       	movw	r26, r22
     6c0:	ca 01       	movw	r24, r20
     6c2:	e9 e0       	ldi	r30, 0x09	; 9
     6c4:	88 0f       	add	r24, r24
     6c6:	99 1f       	adc	r25, r25
 */
void DataflashManager_ReadBlocks(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo,
                                 const uint32_t BlockAddress,
                                 uint16_t TotalBlocks)
{
	uint16_t CurrDFPage          = ((BlockAddress * VIRTUAL_MEMORY_BLOCK_SIZE) / DATAFLASH_PAGE_SIZE);
     6c8:	aa 1f       	adc	r26, r26
     6ca:	bb 1f       	adc	r27, r27
     6cc:	ea 95       	dec	r30
     6ce:	d1 f7       	brne	.-12     	; 0x6c4 <DataflashManager_ReadBlocks+0x1c>
     6d0:	fa e0       	ldi	r31, 0x0A	; 10
     6d2:	b6 95       	lsr	r27
     6d4:	a7 95       	ror	r26
     6d6:	97 95       	ror	r25
     6d8:	87 95       	ror	r24
     6da:	fa 95       	dec	r31
     6dc:	d1 f7       	brne	.-12     	; 0x6d2 <DataflashManager_ReadBlocks+0x2a>
     6de:	8c 01       	movw	r16, r24
	uint16_t CurrDFPageByte      = ((BlockAddress * VIRTUAL_MEMORY_BLOCK_SIZE) % DATAFLASH_PAGE_SIZE);
     6e0:	ea 01       	movw	r28, r20
     6e2:	dc 2f       	mov	r29, r28
     6e4:	cc 27       	eor	r28, r28
     6e6:	dd 0f       	add	r29, r29
     6e8:	d3 70       	andi	r29, 0x03	; 3
	uint8_t  CurrDFPageByteDiv16 = (CurrDFPageByte >> 4);

	/* Select the correct starting Dataflash IC for the block requested */
	Dataflash_SelectChipFromPage(CurrDFPage);
     6ea:	80 de       	rcall	.-768    	; 0x3ec <Dataflash_SelectChipFromPage>
     6ec:	82 ed       	ldi	r24, 0xD2	; 210
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     6ee:	8e bd       	out	0x2e, r24	; 46
     6f0:	0d b4       	in	r0, 0x2d	; 45
				while (!(SPSR & (1 << SPIF)));
     6f2:	07 fe       	sbrs	r0, 7
     6f4:	fd cf       	rjmp	.-6      	; 0x6f0 <DataflashManager_ReadBlocks+0x48>
     6f6:	c8 01       	movw	r24, r16

	/* Send the Dataflash main memory page read command */
	Dataflash_SendByte(DF_CMD_MAINMEMPAGEREAD);
	Dataflash_SendAddressBytes(CurrDFPage, CurrDFPageByte);
     6f8:	be 01       	movw	r22, r28
     6fa:	5f de       	rcall	.-834    	; 0x3ba <Dataflash_SendAddressBytes>
     6fc:	1e bc       	out	0x2e, r1	; 46
     6fe:	0d b4       	in	r0, 0x2d	; 45
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     700:	07 fe       	sbrs	r0, 7
				while (!(SPSR & (1 << SPIF)));
     702:	fd cf       	rjmp	.-6      	; 0x6fe <DataflashManager_ReadBlocks+0x56>
     704:	1e bc       	out	0x2e, r1	; 46
     706:	0d b4       	in	r0, 0x2d	; 45
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     708:	07 fe       	sbrs	r0, 7
				while (!(SPSR & (1 << SPIF)));
     70a:	fd cf       	rjmp	.-6      	; 0x706 <DataflashManager_ReadBlocks+0x5e>
     70c:	1e bc       	out	0x2e, r1	; 46
     70e:	0d b4       	in	r0, 0x2d	; 45
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     710:	07 fe       	sbrs	r0, 7
				while (!(SPSR & (1 << SPIF)));
     712:	fd cf       	rjmp	.-6      	; 0x70e <DataflashManager_ReadBlocks+0x66>
     714:	1e bc       	out	0x2e, r1	; 46
     716:	0d b4       	in	r0, 0x2d	; 45
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     718:	07 fe       	sbrs	r0, 7
				while (!(SPSR & (1 << SPIF)));
     71a:	fd cf       	rjmp	.-6      	; 0x716 <DataflashManager_ReadBlocks+0x6e>
     71c:	36 d5       	rcall	.+2668   	; 0x118a <Endpoint_WaitUntilReady>
     71e:	88 23       	and	r24, r24
	Dataflash_SendByte(0x00);
	Dataflash_SendByte(0x00);
	Dataflash_SendByte(0x00);

	/* Wait until endpoint is ready before continuing */
	if (Endpoint_WaitUntilReady())
     720:	09 f0       	breq	.+2      	; 0x724 <DataflashManager_ReadBlocks+0x7c>
     722:	c0 c0       	rjmp	.+384    	; 0x8a4 <DataflashManager_ReadBlocks+0x1fc>
     724:	34 e0       	ldi	r19, 0x04	; 4
     726:	d6 95       	lsr	r29
     728:	c7 95       	ror	r28
                                 const uint32_t BlockAddress,
                                 uint16_t TotalBlocks)
{
	uint16_t CurrDFPage          = ((BlockAddress * VIRTUAL_MEMORY_BLOCK_SIZE) / DATAFLASH_PAGE_SIZE);
	uint16_t CurrDFPageByte      = ((BlockAddress * VIRTUAL_MEMORY_BLOCK_SIZE) % DATAFLASH_PAGE_SIZE);
	uint8_t  CurrDFPageByteDiv16 = (CurrDFPageByte >> 4);
     72a:	3a 95       	dec	r19
     72c:	e1 f7       	brne	.-8      	; 0x726 <DataflashManager_ReadBlocks+0x7e>
     72e:	42 ed       	ldi	r20, 0xD2	; 210
     730:	b4 2e       	mov	r11, r20
     732:	a8 c0       	rjmp	.+336    	; 0x884 <DataflashManager_ReadBlocks+0x1dc>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     734:	d0 e2       	ldi	r29, 0x20	; 32
     736:	80 91 e8 00 	lds	r24, 0x00E8

	/* Wait until endpoint is ready before continuing */
	if (Endpoint_WaitUntilReady())
	  return;

	while (TotalBlocks)
     73a:	85 fd       	sbrc	r24, 5
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
     73c:	09 c0       	rjmp	.+18     	; 0x750 <DataflashManager_ReadBlocks+0xa8>
     73e:	80 91 e8 00 	lds	r24, 0x00E8

		/* Write an endpoint packet sized data block to the Dataflash */
		while (BytesInBlockDiv16 < (VIRTUAL_MEMORY_BLOCK_SIZE >> 4))
		{
			/* Check if the endpoint is currently full */
			if (!(Endpoint_IsReadWriteAllowed()))
     742:	8e 77       	andi	r24, 0x7E	; 126
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     744:	80 93 e8 00 	sts	0x00E8, r24
     748:	20 d5       	rcall	.+2624   	; 0x118a <Endpoint_WaitUntilReady>
     74a:	88 23       	and	r24, r24
     74c:	09 f0       	breq	.+2      	; 0x750 <DataflashManager_ReadBlocks+0xa8>
			{
				/* Clear the endpoint bank to send its contents to the host */
				Endpoint_ClearIN();

				/* Wait until the endpoint is ready for more data */
				if (Endpoint_WaitUntilReady())
     74e:	aa c0       	rjmp	.+340    	; 0x8a4 <DataflashManager_ReadBlocks+0x1fc>
     750:	c0 34       	cpi	r28, 0x40	; 64
     752:	e9 f4       	brne	.+58     	; 0x78e <DataflashManager_ReadBlocks+0xe6>
     754:	0f 5f       	subi	r16, 0xFF	; 255
     756:	1f 4f       	sbci	r17, 0xFF	; 255
				  return;
			}

			/* Check if end of Dataflash page reached */
			if (CurrDFPageByteDiv16 == (DATAFLASH_PAGE_SIZE >> 4))
     758:	c8 01       	movw	r24, r16
     75a:	48 de       	rcall	.-880    	; 0x3ec <Dataflash_SelectChipFromPage>
			{
				/* Reset the Dataflash buffer counter, increment the page counter */
				CurrDFPageByteDiv16 = 0;
				CurrDFPage++;
     75c:	be bc       	out	0x2e, r11	; 46
     75e:	0d b4       	in	r0, 0x2d	; 45

				/* Select the next Dataflash chip based on the new Dataflash page index */
				Dataflash_SelectChipFromPage(CurrDFPage);
     760:	07 fe       	sbrs	r0, 7
     762:	fd cf       	rjmp	.-6      	; 0x75e <DataflashManager_ReadBlocks+0xb6>
     764:	c8 01       	movw	r24, r16
     766:	60 e0       	ldi	r22, 0x00	; 0
				while (!(SPSR & (1 << SPIF)));
     768:	70 e0       	ldi	r23, 0x00	; 0
     76a:	27 de       	rcall	.-946    	; 0x3ba <Dataflash_SendAddressBytes>
     76c:	1e bc       	out	0x2e, r1	; 46

				/* Send the Dataflash main memory page read command */
				Dataflash_SendByte(DF_CMD_MAINMEMPAGEREAD);
				Dataflash_SendAddressBytes(CurrDFPage, 0);
     76e:	0d b4       	in	r0, 0x2d	; 45
     770:	07 fe       	sbrs	r0, 7
     772:	fd cf       	rjmp	.-6      	; 0x76e <DataflashManager_ReadBlocks+0xc6>
     774:	1e bc       	out	0x2e, r1	; 46
     776:	0d b4       	in	r0, 0x2d	; 45
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     778:	07 fe       	sbrs	r0, 7
				while (!(SPSR & (1 << SPIF)));
     77a:	fd cf       	rjmp	.-6      	; 0x776 <DataflashManager_ReadBlocks+0xce>
     77c:	1e bc       	out	0x2e, r1	; 46
     77e:	0d b4       	in	r0, 0x2d	; 45
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     780:	07 fe       	sbrs	r0, 7
				while (!(SPSR & (1 << SPIF)));
     782:	fd cf       	rjmp	.-6      	; 0x77e <DataflashManager_ReadBlocks+0xd6>
     784:	1e bc       	out	0x2e, r1	; 46
     786:	0d b4       	in	r0, 0x2d	; 45
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     788:	07 fe       	sbrs	r0, 7
				while (!(SPSR & (1 << SPIF)));
     78a:	fd cf       	rjmp	.-6      	; 0x786 <DataflashManager_ReadBlocks+0xde>
     78c:	c0 e0       	ldi	r28, 0x00	; 0
     78e:	1e bc       	out	0x2e, r1	; 46
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     790:	0d b4       	in	r0, 0x2d	; 45
				while (!(SPSR & (1 << SPIF)));
     792:	07 fe       	sbrs	r0, 7
     794:	fd cf       	rjmp	.-6      	; 0x790 <DataflashManager_ReadBlocks+0xe8>
     796:	8e b5       	in	r24, 0x2e	; 46

			/* Check if end of Dataflash page reached */
			if (CurrDFPageByteDiv16 == (DATAFLASH_PAGE_SIZE >> 4))
			{
				/* Reset the Dataflash buffer counter, increment the page counter */
				CurrDFPageByteDiv16 = 0;
     798:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
				while (!(SPSR & (1 << SPIF)));
     79c:	1e bc       	out	0x2e, r1	; 46
     79e:	0d b4       	in	r0, 0x2d	; 45
     7a0:	07 fe       	sbrs	r0, 7
				return SPDR;
     7a2:	fd cf       	rjmp	.-6      	; 0x79e <DataflashManager_ReadBlocks+0xf6>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     7a4:	8e b5       	in	r24, 0x2e	; 46
     7a6:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
				while (!(SPSR & (1 << SPIF)));
     7aa:	1e bc       	out	0x2e, r1	; 46
     7ac:	0d b4       	in	r0, 0x2d	; 45
     7ae:	07 fe       	sbrs	r0, 7
				return SPDR;
     7b0:	fd cf       	rjmp	.-6      	; 0x7ac <DataflashManager_ReadBlocks+0x104>
     7b2:	8e b5       	in	r24, 0x2e	; 46
     7b4:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
				while (!(SPSR & (1 << SPIF)));
     7b8:	1e bc       	out	0x2e, r1	; 46
     7ba:	0d b4       	in	r0, 0x2d	; 45
     7bc:	07 fe       	sbrs	r0, 7
				return SPDR;
     7be:	fd cf       	rjmp	.-6      	; 0x7ba <DataflashManager_ReadBlocks+0x112>
     7c0:	8e b5       	in	r24, 0x2e	; 46
     7c2:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
				while (!(SPSR & (1 << SPIF)));
     7c6:	1e bc       	out	0x2e, r1	; 46
     7c8:	0d b4       	in	r0, 0x2d	; 45
     7ca:	07 fe       	sbrs	r0, 7
				return SPDR;
     7cc:	fd cf       	rjmp	.-6      	; 0x7c8 <DataflashManager_ReadBlocks+0x120>
     7ce:	8e b5       	in	r24, 0x2e	; 46
     7d0:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
				while (!(SPSR & (1 << SPIF)));
     7d4:	1e bc       	out	0x2e, r1	; 46
     7d6:	0d b4       	in	r0, 0x2d	; 45
     7d8:	07 fe       	sbrs	r0, 7
				return SPDR;
     7da:	fd cf       	rjmp	.-6      	; 0x7d6 <DataflashManager_ReadBlocks+0x12e>
     7dc:	8e b5       	in	r24, 0x2e	; 46
     7de:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
				while (!(SPSR & (1 << SPIF)));
     7e2:	1e bc       	out	0x2e, r1	; 46
     7e4:	0d b4       	in	r0, 0x2d	; 45
     7e6:	07 fe       	sbrs	r0, 7
				return SPDR;
     7e8:	fd cf       	rjmp	.-6      	; 0x7e4 <DataflashManager_ReadBlocks+0x13c>
     7ea:	8e b5       	in	r24, 0x2e	; 46
     7ec:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
				while (!(SPSR & (1 << SPIF)));
     7f0:	1e bc       	out	0x2e, r1	; 46
     7f2:	0d b4       	in	r0, 0x2d	; 45
     7f4:	07 fe       	sbrs	r0, 7
				return SPDR;
     7f6:	fd cf       	rjmp	.-6      	; 0x7f2 <DataflashManager_ReadBlocks+0x14a>
     7f8:	8e b5       	in	r24, 0x2e	; 46
     7fa:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
				while (!(SPSR & (1 << SPIF)));
     7fe:	1e bc       	out	0x2e, r1	; 46
     800:	0d b4       	in	r0, 0x2d	; 45
     802:	07 fe       	sbrs	r0, 7
				return SPDR;
     804:	fd cf       	rjmp	.-6      	; 0x800 <DataflashManager_ReadBlocks+0x158>
     806:	8e b5       	in	r24, 0x2e	; 46
     808:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
				while (!(SPSR & (1 << SPIF)));
     80c:	1e bc       	out	0x2e, r1	; 46
     80e:	0d b4       	in	r0, 0x2d	; 45
     810:	07 fe       	sbrs	r0, 7
				return SPDR;
     812:	fd cf       	rjmp	.-6      	; 0x80e <DataflashManager_ReadBlocks+0x166>
     814:	8e b5       	in	r24, 0x2e	; 46
     816:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
				while (!(SPSR & (1 << SPIF)));
     81a:	1e bc       	out	0x2e, r1	; 46
     81c:	0d b4       	in	r0, 0x2d	; 45
     81e:	07 fe       	sbrs	r0, 7
				return SPDR;
     820:	fd cf       	rjmp	.-6      	; 0x81c <DataflashManager_ReadBlocks+0x174>
     822:	8e b5       	in	r24, 0x2e	; 46
     824:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
				while (!(SPSR & (1 << SPIF)));
     828:	1e bc       	out	0x2e, r1	; 46
     82a:	0d b4       	in	r0, 0x2d	; 45
     82c:	07 fe       	sbrs	r0, 7
				return SPDR;
     82e:	fd cf       	rjmp	.-6      	; 0x82a <DataflashManager_ReadBlocks+0x182>
     830:	8e b5       	in	r24, 0x2e	; 46
     832:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
				while (!(SPSR & (1 << SPIF)));
     836:	1e bc       	out	0x2e, r1	; 46
     838:	0d b4       	in	r0, 0x2d	; 45
     83a:	07 fe       	sbrs	r0, 7
				return SPDR;
     83c:	fd cf       	rjmp	.-6      	; 0x838 <DataflashManager_ReadBlocks+0x190>
     83e:	8e b5       	in	r24, 0x2e	; 46
     840:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
				while (!(SPSR & (1 << SPIF)));
     844:	1e bc       	out	0x2e, r1	; 46
     846:	0d b4       	in	r0, 0x2d	; 45
     848:	07 fe       	sbrs	r0, 7
				return SPDR;
     84a:	fd cf       	rjmp	.-6      	; 0x846 <DataflashManager_ReadBlocks+0x19e>
     84c:	8e b5       	in	r24, 0x2e	; 46
     84e:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
				while (!(SPSR & (1 << SPIF)));
     852:	1e bc       	out	0x2e, r1	; 46
     854:	0d b4       	in	r0, 0x2d	; 45
     856:	07 fe       	sbrs	r0, 7
				return SPDR;
     858:	fd cf       	rjmp	.-6      	; 0x854 <DataflashManager_ReadBlocks+0x1ac>
     85a:	8e b5       	in	r24, 0x2e	; 46
     85c:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
				while (!(SPSR & (1 << SPIF)));
     860:	1e bc       	out	0x2e, r1	; 46
     862:	0d b4       	in	r0, 0x2d	; 45
     864:	07 fe       	sbrs	r0, 7
				return SPDR;
     866:	fd cf       	rjmp	.-6      	; 0x862 <DataflashManager_ReadBlocks+0x1ba>
     868:	8e b5       	in	r24, 0x2e	; 46
     86a:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
				while (!(SPSR & (1 << SPIF)));
     86e:	f6 01       	movw	r30, r12
     870:	80 ad       	sts	0x60, r24
     872:	88 23       	and	r24, r24
				return SPDR;
     874:	b9 f4       	brne	.+46     	; 0x8a4 <DataflashManager_ReadBlocks+0x1fc>
     876:	cf 5f       	subi	r28, 0xFF	; 255
     878:	d1 50       	subi	r29, 0x01	; 1

			/* Increment the block 16 byte block counter */
			BytesInBlockDiv16++;

			/* Check if the current command is being aborted by the host */
			if (MSInterfaceInfo->State.IsMassStoreReset)
     87a:	09 f0       	breq	.+2      	; 0x87e <DataflashManager_ReadBlocks+0x1d6>
     87c:	5c cf       	rjmp	.-328    	; 0x736 <DataflashManager_ReadBlocks+0x8e>
     87e:	08 94       	sec
     880:	e1 08       	sbc	r14, r1
			Endpoint_Write_8(Dataflash_ReceiveByte());
			Endpoint_Write_8(Dataflash_ReceiveByte());
			Endpoint_Write_8(Dataflash_ReceiveByte());

			/* Increment the Dataflash page 16 byte block counter */
			CurrDFPageByteDiv16++;
     882:	f1 08       	sbc	r15, r1
     884:	e1 14       	cp	r14, r1
	while (TotalBlocks)
	{
		uint8_t BytesInBlockDiv16 = 0;

		/* Write an endpoint packet sized data block to the Dataflash */
		while (BytesInBlockDiv16 < (VIRTUAL_MEMORY_BLOCK_SIZE >> 4))
     886:	f1 04       	cpc	r15, r1
     888:	09 f0       	breq	.+2      	; 0x88c <DataflashManager_ReadBlocks+0x1e4>
			if (MSInterfaceInfo->State.IsMassStoreReset)
			  return;
		}

		/* Decrement the blocks remaining counter */
		TotalBlocks--;
     88a:	54 cf       	rjmp	.-344    	; 0x734 <DataflashManager_ReadBlocks+0x8c>
     88c:	80 91 e8 00 	lds	r24, 0x00E8

	/* Wait until endpoint is ready before continuing */
	if (Endpoint_WaitUntilReady())
	  return;

	while (TotalBlocks)
     890:	85 fd       	sbrc	r24, 5
     892:	05 c0       	rjmp	.+10     	; 0x89e <DataflashManager_ReadBlocks+0x1f6>
     894:	80 91 e8 00 	lds	r24, 0x00E8
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
     898:	8e 77       	andi	r24, 0x7E	; 126
     89a:	80 93 e8 00 	sts	0x00E8, r24
		/* Decrement the blocks remaining counter */
		TotalBlocks--;
	}

	/* If the endpoint is full, send its contents to the host */
	if (!(Endpoint_IsReadWriteAllowed()))
     89e:	8e b1       	in	r24, 0x0e	; 14
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     8a0:	83 60       	ori	r24, 0x03	; 3
     8a2:	8e b9       	out	0x0e, r24	; 14
     8a4:	df 91       	pop	r29
     8a6:	cf 91       	pop	r28
     8a8:	1f 91       	pop	r17
     8aa:	0f 91       	pop	r16
     8ac:	ff 90       	pop	r15
     8ae:	ef 90       	pop	r14
	  Endpoint_ClearIN();

	/* Deselect all Dataflash chips */
	Dataflash_DeselectChip();
}
     8b0:	df 90       	pop	r13
     8b2:	cf 90       	pop	r12
     8b4:	bf 90       	pop	r11
     8b6:	08 95       	ret

000008b8 <DataflashManager_ResetDataflashProtections>:
     8b8:	8e b1       	in	r24, 0x0e	; 14
     8ba:	83 60       	ori	r24, 0x03	; 3
     8bc:	8e 7f       	andi	r24, 0xFE	; 254
     8be:	8e b9       	out	0x0e, r24	; 14
     8c0:	87 ed       	ldi	r24, 0xD7	; 215
     8c2:	8e bd       	out	0x2e, r24	; 46
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
				while (!(SPSR & (1 << SPIF)));
     8c4:	0d b4       	in	r0, 0x2d	; 45
     8c6:	07 fe       	sbrs	r0, 7
     8c8:	fd cf       	rjmp	.-6      	; 0x8c4 <DataflashManager_ResetDataflashProtections+0xc>
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     8ca:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     8cc:	0d b4       	in	r0, 0x2d	; 45
     8ce:	07 fe       	sbrs	r0, 7
     8d0:	fd cf       	rjmp	.-6      	; 0x8cc <DataflashManager_ResetDataflashProtections+0x14>
	/* Select first Dataflash chip, send the read status register command */
	Dataflash_SelectChip(DATAFLASH_CHIP1);
	Dataflash_SendByte(DF_CMD_GETSTATUS);

	/* Check if sector protection is enabled */
	if (Dataflash_ReceiveByte() & DF_STATUS_SECTORPROTECTION_ON)
     8d2:	0e b4       	in	r0, 0x2e	; 46
     8d4:	01 fe       	sbrs	r0, 1
     8d6:	15 c0       	rjmp	.+42     	; 0x902 <DataflashManager_ResetDataflashProtections+0x4a>
	{
		Dataflash_ToggleSelectedChipCS();
     8d8:	58 dd       	rcall	.-1360   	; 0x38a <Dataflash_ToggleSelectedChipCS>
     8da:	8d e3       	ldi	r24, 0x3D	; 61
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     8dc:	8e bd       	out	0x2e, r24	; 46
     8de:	0d b4       	in	r0, 0x2d	; 45
				while (!(SPSR & (1 << SPIF)));
     8e0:	07 fe       	sbrs	r0, 7
     8e2:	fd cf       	rjmp	.-6      	; 0x8de <DataflashManager_ResetDataflashProtections+0x26>
     8e4:	8a e2       	ldi	r24, 0x2A	; 42
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     8e6:	8e bd       	out	0x2e, r24	; 46
     8e8:	0d b4       	in	r0, 0x2d	; 45
				while (!(SPSR & (1 << SPIF)));
     8ea:	07 fe       	sbrs	r0, 7
     8ec:	fd cf       	rjmp	.-6      	; 0x8e8 <DataflashManager_ResetDataflashProtections+0x30>
     8ee:	8f e7       	ldi	r24, 0x7F	; 127
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     8f0:	8e bd       	out	0x2e, r24	; 46
     8f2:	0d b4       	in	r0, 0x2d	; 45
				while (!(SPSR & (1 << SPIF)));
     8f4:	07 fe       	sbrs	r0, 7
     8f6:	fd cf       	rjmp	.-6      	; 0x8f2 <DataflashManager_ResetDataflashProtections+0x3a>
     8f8:	8a e9       	ldi	r24, 0x9A	; 154
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     8fa:	8e bd       	out	0x2e, r24	; 46
     8fc:	0d b4       	in	r0, 0x2d	; 45
				while (!(SPSR & (1 << SPIF)));
     8fe:	07 fe       	sbrs	r0, 7
     900:	fd cf       	rjmp	.-6      	; 0x8fc <DataflashManager_ResetDataflashProtections+0x44>
     902:	8e b1       	in	r24, 0x0e	; 14
     904:	83 60       	ori	r24, 0x03	; 3
     906:	8d 7f       	andi	r24, 0xFD	; 253
     908:	8e b9       	out	0x0e, r24	; 14
     90a:	87 ed       	ldi	r24, 0xD7	; 215
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     90c:	8e bd       	out	0x2e, r24	; 46
     90e:	0d b4       	in	r0, 0x2d	; 45
				while (!(SPSR & (1 << SPIF)));
     910:	07 fe       	sbrs	r0, 7
     912:	fd cf       	rjmp	.-6      	; 0x90e <DataflashManager_ResetDataflashProtections+0x56>
     914:	1e bc       	out	0x2e, r1	; 46
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     916:	0d b4       	in	r0, 0x2d	; 45
				while (!(SPSR & (1 << SPIF)));
     918:	07 fe       	sbrs	r0, 7
     91a:	fd cf       	rjmp	.-6      	; 0x916 <DataflashManager_ResetDataflashProtections+0x5e>
     91c:	0e b4       	in	r0, 0x2e	; 46
	#if (DATAFLASH_TOTALCHIPS == 2)
	Dataflash_SelectChip(DATAFLASH_CHIP2);
	Dataflash_SendByte(DF_CMD_GETSTATUS);

	/* Check if sector protection is enabled */
	if (Dataflash_ReceiveByte() & DF_STATUS_SECTORPROTECTION_ON)
     91e:	01 fe       	sbrs	r0, 1
     920:	15 c0       	rjmp	.+42     	; 0x94c <DataflashManager_ResetDataflashProtections+0x94>
     922:	33 dd       	rcall	.-1434   	; 0x38a <Dataflash_ToggleSelectedChipCS>
	{
		Dataflash_ToggleSelectedChipCS();
     924:	8d e3       	ldi	r24, 0x3D	; 61
     926:	8e bd       	out	0x2e, r24	; 46
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     928:	0d b4       	in	r0, 0x2d	; 45
     92a:	07 fe       	sbrs	r0, 7
				while (!(SPSR & (1 << SPIF)));
     92c:	fd cf       	rjmp	.-6      	; 0x928 <DataflashManager_ResetDataflashProtections+0x70>
     92e:	8a e2       	ldi	r24, 0x2A	; 42
     930:	8e bd       	out	0x2e, r24	; 46
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     932:	0d b4       	in	r0, 0x2d	; 45
     934:	07 fe       	sbrs	r0, 7
				while (!(SPSR & (1 << SPIF)));
     936:	fd cf       	rjmp	.-6      	; 0x932 <DataflashManager_ResetDataflashProtections+0x7a>
     938:	8f e7       	ldi	r24, 0x7F	; 127
     93a:	8e bd       	out	0x2e, r24	; 46
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     93c:	0d b4       	in	r0, 0x2d	; 45
     93e:	07 fe       	sbrs	r0, 7
				while (!(SPSR & (1 << SPIF)));
     940:	fd cf       	rjmp	.-6      	; 0x93c <DataflashManager_ResetDataflashProtections+0x84>
     942:	8a e9       	ldi	r24, 0x9A	; 154
     944:	8e bd       	out	0x2e, r24	; 46
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     946:	0d b4       	in	r0, 0x2d	; 45
     948:	07 fe       	sbrs	r0, 7
				while (!(SPSR & (1 << SPIF)));
     94a:	fd cf       	rjmp	.-6      	; 0x946 <DataflashManager_ResetDataflashProtections+0x8e>
     94c:	8e b1       	in	r24, 0x0e	; 14
     94e:	83 60       	ori	r24, 0x03	; 3
     950:	8e b9       	out	0x0e, r24	; 14
     952:	08 95       	ret

00000954 <DataflashManager_CheckDataflashOperation>:
     954:	8e b1       	in	r24, 0x0e	; 14
	}
	#endif

	/* Deselect current Dataflash chip */
	Dataflash_DeselectChip();
}
     956:	83 60       	ori	r24, 0x03	; 3
     958:	8e 7f       	andi	r24, 0xFE	; 254
     95a:	8e b9       	out	0x0e, r24	; 14
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     95c:	8f e9       	ldi	r24, 0x9F	; 159
     95e:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     960:	0d b4       	in	r0, 0x2d	; 45
     962:	07 fe       	sbrs	r0, 7
     964:	fd cf       	rjmp	.-6      	; 0x960 <DataflashManager_CheckDataflashOperation+0xc>
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     966:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     968:	0d b4       	in	r0, 0x2d	; 45
     96a:	07 fe       	sbrs	r0, 7
     96c:	fd cf       	rjmp	.-6      	; 0x968 <DataflashManager_CheckDataflashOperation+0x14>
				return SPDR;
     96e:	9e b5       	in	r25, 0x2e	; 46
     970:	8e b1       	in	r24, 0x0e	; 14
     972:	83 60       	ori	r24, 0x03	; 3
     974:	8e b9       	out	0x0e, r24	; 14
	Dataflash_SendByte(DF_CMD_READMANUFACTURERDEVICEINFO);
	ReturnByte = Dataflash_ReceiveByte();
	Dataflash_DeselectChip();

	/* If returned data is invalid, fail the command */
	if (ReturnByte != DF_MANUFACTURER_ATMEL)
     976:	9f 31       	cpi	r25, 0x1F	; 31
     978:	b1 f4       	brne	.+44     	; 0x9a6 <DataflashManager_CheckDataflashOperation+0x52>
     97a:	8e b1       	in	r24, 0x0e	; 14
     97c:	83 60       	ori	r24, 0x03	; 3
     97e:	8d 7f       	andi	r24, 0xFD	; 253
     980:	8e b9       	out	0x0e, r24	; 14
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     982:	8f e9       	ldi	r24, 0x9F	; 159
     984:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     986:	0d b4       	in	r0, 0x2d	; 45
     988:	07 fe       	sbrs	r0, 7
     98a:	fd cf       	rjmp	.-6      	; 0x986 <DataflashManager_CheckDataflashOperation+0x32>
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     98c:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     98e:	0d b4       	in	r0, 0x2d	; 45
     990:	07 fe       	sbrs	r0, 7
     992:	fd cf       	rjmp	.-6      	; 0x98e <DataflashManager_CheckDataflashOperation+0x3a>
				return SPDR;
     994:	9e b5       	in	r25, 0x2e	; 46
     996:	8e b1       	in	r24, 0x0e	; 14
     998:	83 60       	ori	r24, 0x03	; 3
     99a:	8e b9       	out	0x0e, r24	; 14

/** Performs a simple test on the attached Dataflash IC(s) to ensure that they are working.
 *
 *  \return Boolean true if all media chips are working, false otherwise
 */
bool DataflashManager_CheckDataflashOperation(void)
     99c:	81 e0       	ldi	r24, 0x01	; 1
     99e:	9f 31       	cpi	r25, 0x1F	; 31
     9a0:	19 f0       	breq	.+6      	; 0x9a8 <DataflashManager_CheckDataflashOperation+0x54>
     9a2:	80 e0       	ldi	r24, 0x00	; 0
     9a4:	08 95       	ret
	ReturnByte = Dataflash_ReceiveByte();
	Dataflash_DeselectChip();

	/* If returned data is invalid, fail the command */
	if (ReturnByte != DF_MANUFACTURER_ATMEL)
	  return false;
     9a6:	80 e0       	ldi	r24, 0x00	; 0
	if (ReturnByte != DF_MANUFACTURER_ATMEL)
	  return false;
	#endif

	return true;
}
     9a8:	08 95       	ret

000009aa <SCSI_Command_ReadWrite_10>:
 *
 *  \return Boolean true if the command completed successfully, false otherwise.
 */
static bool SCSI_Command_ReadWrite_10(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo,
                                      const bool IsDataRead)
{
     9aa:	0f 93       	push	r16
     9ac:	1f 93       	push	r17
     9ae:	cf 93       	push	r28
     9b0:	df 93       	push	r29
     9b2:	ec 01       	movw	r28, r24
     9b4:	86 2f       	mov	r24, r22

				Temp = Data.Bytes[1];
				Data.Bytes[1] = Data.Bytes[2];
				Data.Bytes[2] = Temp;

				return Data.DWord;
     9b6:	48 a1       	lds	r20, 0x48
     9b8:	5f 8d       	ldd	r21, Y+31	; 0x1f
     9ba:	6e 8d       	ldd	r22, Y+30	; 0x1e
     9bc:	7d 8d       	ldd	r23, Y+29	; 0x1d

				Temp = Data.Bytes[0];
				Data.Bytes[0] = Data.Bytes[1];
				Data.Bytes[1] = Temp;

				return Data.Word;
     9be:	0b a1       	lds	r16, 0x4b
     9c0:	1a a1       	lds	r17, 0x4a

	/* Load in the 16-bit total blocks (SCSI uses big-endian, so have to reverse the byte order) */
	TotalBlocks  = SwapEndian_16(*(uint16_t*)&MSInterfaceInfo->State.CommandBlock.SCSICommandData[7]);

	/* Check if the block address is outside the maximum allowable value for the LUN */
	if (BlockAddress >= LUN_MEDIA_BLOCKS)
     9c2:	40 30       	cpi	r20, 0x00	; 0
     9c4:	90 e8       	ldi	r25, 0x80	; 128
     9c6:	59 07       	cpc	r21, r25
     9c8:	90 e0       	ldi	r25, 0x00	; 0
     9ca:	69 07       	cpc	r22, r25
     9cc:	90 e0       	ldi	r25, 0x00	; 0
     9ce:	79 07       	cpc	r23, r25
     9d0:	68 f0       	brcs	.+26     	; 0x9ec <SCSI_Command_ReadWrite_10+0x42>
	{
		/* Block address is invalid, update SENSE key and return command fail */
		SCSI_SET_SENSE(SCSI_SENSE_KEY_ILLEGAL_REQUEST,
     9d2:	80 91 a8 01 	lds	r24, 0x01A8
     9d6:	80 7f       	andi	r24, 0xF0	; 240
     9d8:	85 60       	ori	r24, 0x05	; 5
     9da:	80 93 a8 01 	sts	0x01A8, r24
     9de:	81 e2       	ldi	r24, 0x21	; 33
     9e0:	80 93 b2 01 	sts	0x01B2, r24
     9e4:	10 92 b3 01 	sts	0x01B3, r1
		               SCSI_ASENSE_LOGICAL_BLOCK_ADDRESS_OUT_OF_RANGE,
		               SCSI_ASENSEQ_NO_QUALIFIER);

		return false;
     9e8:	80 e0       	ldi	r24, 0x00	; 0
     9ea:	1f c0       	rjmp	.+62     	; 0xa2a <SCSI_Command_ReadWrite_10+0x80>
	/* Adjust the given block address to the real media address based on the selected LUN */
	BlockAddress += ((uint32_t)MSInterfaceInfo->State.CommandBlock.LUN * LUN_MEDIA_BLOCKS);
	#endif

	/* Determine if the packet is a READ (10) or WRITE (10) command, call appropriate function */
	if (IsDataRead == DATA_READ)
     9ec:	88 23       	and	r24, r24
     9ee:	21 f0       	breq	.+8      	; 0x9f8 <SCSI_Command_ReadWrite_10+0x4e>
	  DataflashManager_ReadBlocks(MSInterfaceInfo, BlockAddress, TotalBlocks);
     9f0:	ce 01       	movw	r24, r28
     9f2:	98 01       	movw	r18, r16
     9f4:	59 de       	rcall	.-846    	; 0x6a8 <DataflashManager_ReadBlocks>
     9f6:	03 c0       	rjmp	.+6      	; 0x9fe <SCSI_Command_ReadWrite_10+0x54>
     9f8:	ce 01       	movw	r24, r28
	else
	  DataflashManager_WriteBlocks(MSInterfaceInfo, BlockAddress, TotalBlocks);
     9fa:	98 01       	movw	r18, r16
     9fc:	0a dd       	rcall	.-1516   	; 0x412 <DataflashManager_WriteBlocks>
     9fe:	20 e0       	ldi	r18, 0x00	; 0
     a00:	30 e0       	ldi	r19, 0x00	; 0

	/* Update the bytes transferred counter and succeed the command */
	MSInterfaceInfo->State.CommandBlock.DataTransferLength -= ((uint32_t)TotalBlocks * VIRTUAL_MEMORY_BLOCK_SIZE);
     a02:	89 e0       	ldi	r24, 0x09	; 9
     a04:	00 0f       	add	r16, r16
     a06:	11 1f       	adc	r17, r17
     a08:	22 1f       	adc	r18, r18
     a0a:	33 1f       	adc	r19, r19
     a0c:	8a 95       	dec	r24
     a0e:	d1 f7       	brne	.-12     	; 0xa04 <SCSI_Command_ReadWrite_10+0x5a>
     a10:	8c 89       	ldd	r24, Y+20	; 0x14
     a12:	9d 89       	ldd	r25, Y+21	; 0x15
     a14:	ae 89       	ldd	r26, Y+22	; 0x16
     a16:	bf 89       	ldd	r27, Y+23	; 0x17
     a18:	80 1b       	sub	r24, r16
     a1a:	91 0b       	sbc	r25, r17
     a1c:	a2 0b       	sbc	r26, r18
     a1e:	b3 0b       	sbc	r27, r19
     a20:	8c 8b       	std	Y+20, r24	; 0x14
     a22:	9d 8b       	std	Y+21, r25	; 0x15
     a24:	ae 8b       	std	Y+22, r26	; 0x16
     a26:	bf 8b       	std	Y+23, r27	; 0x17
     a28:	81 e0       	ldi	r24, 0x01	; 1
     a2a:	df 91       	pop	r29

	return true;
     a2c:	cf 91       	pop	r28
}
     a2e:	1f 91       	pop	r17
     a30:	0f 91       	pop	r16
     a32:	08 95       	ret

00000a34 <SCSI_DecodeSCSICommand>:
     a34:	cf 92       	push	r12
     a36:	df 92       	push	r13
 *  \param[in] MSInterfaceInfo  Pointer to the Mass Storage class interface structure that the command is associated with
 *
 *  \return Boolean true if the command completed successfully, false otherwise
 */
bool SCSI_DecodeSCSICommand(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
     a38:	ef 92       	push	r14
     a3a:	ff 92       	push	r15
     a3c:	0f 93       	push	r16
     a3e:	1f 93       	push	r17
     a40:	cf 93       	push	r28
     a42:	df 93       	push	r29
     a44:	cd b7       	in	r28, 0x3d	; 61
     a46:	de b7       	in	r29, 0x3e	; 62
     a48:	28 97       	sbiw	r28, 0x08	; 8
     a4a:	0f b6       	in	r0, 0x3f	; 63
     a4c:	f8 94       	cli
     a4e:	de bf       	out	0x3e, r29	; 62
     a50:	0f be       	out	0x3f, r0	; 63
     a52:	cd bf       	out	0x3d, r28	; 61
     a54:	8c 01       	movw	r16, r24
	bool CommandSuccess = false;

	/* Run the appropriate SCSI command hander function based on the passed command */
	switch (MSInterfaceInfo->State.CommandBlock.SCSICommandData[0])
     a56:	fc 01       	movw	r30, r24
     a58:	83 8d       	ldd	r24, Z+27	; 0x1b
     a5a:	8d 31       	cpi	r24, 0x1D	; 29
     a5c:	09 f4       	brne	.+2      	; 0xa60 <SCSI_DecodeSCSICommand+0x2c>
     a5e:	a9 c0       	rjmp	.+338    	; 0xbb2 <SCSI_DecodeSCSICommand+0x17e>
     a60:	8e 31       	cpi	r24, 0x1E	; 30
     a62:	78 f4       	brcc	.+30     	; 0xa82 <SCSI_DecodeSCSICommand+0x4e>
     a64:	83 30       	cpi	r24, 0x03	; 3
     a66:	09 f4       	brne	.+2      	; 0xa6a <SCSI_DecodeSCSICommand+0x36>
     a68:	53 c0       	rjmp	.+166    	; 0xb10 <SCSI_DecodeSCSICommand+0xdc>
     a6a:	84 30       	cpi	r24, 0x04	; 4
     a6c:	20 f4       	brcc	.+8      	; 0xa76 <SCSI_DecodeSCSICommand+0x42>
     a6e:	88 23       	and	r24, r24
     a70:	09 f4       	brne	.+2      	; 0xa74 <SCSI_DecodeSCSICommand+0x40>
     a72:	dc c0       	rjmp	.+440    	; 0xc2c <SCSI_DecodeSCSICommand+0x1f8>
     a74:	e1 c0       	rjmp	.+450    	; 0xc38 <SCSI_DecodeSCSICommand+0x204>
     a76:	82 31       	cpi	r24, 0x12	; 18
     a78:	b9 f0       	breq	.+46     	; 0xaa8 <SCSI_DecodeSCSICommand+0x74>
     a7a:	8a 31       	cpi	r24, 0x1A	; 26
     a7c:	09 f0       	breq	.+2      	; 0xa80 <SCSI_DecodeSCSICommand+0x4c>
     a7e:	dc c0       	rjmp	.+440    	; 0xc38 <SCSI_DecodeSCSICommand+0x204>
     a80:	bb c0       	rjmp	.+374    	; 0xbf8 <SCSI_DecodeSCSICommand+0x1c4>
     a82:	88 32       	cpi	r24, 0x28	; 40
     a84:	09 f4       	brne	.+2      	; 0xa88 <SCSI_DecodeSCSICommand+0x54>
     a86:	b2 c0       	rjmp	.+356    	; 0xbec <SCSI_DecodeSCSICommand+0x1b8>
     a88:	89 32       	cpi	r24, 0x29	; 41
     a8a:	38 f4       	brcc	.+14     	; 0xa9a <SCSI_DecodeSCSICommand+0x66>
     a8c:	8e 31       	cpi	r24, 0x1E	; 30
     a8e:	09 f4       	brne	.+2      	; 0xa92 <SCSI_DecodeSCSICommand+0x5e>
     a90:	cd c0       	rjmp	.+410    	; 0xc2c <SCSI_DecodeSCSICommand+0x1f8>
     a92:	85 32       	cpi	r24, 0x25	; 37
     a94:	09 f0       	breq	.+2      	; 0xa98 <SCSI_DecodeSCSICommand+0x64>
     a96:	d0 c0       	rjmp	.+416    	; 0xc38 <SCSI_DecodeSCSICommand+0x204>
     a98:	60 c0       	rjmp	.+192    	; 0xb5a <SCSI_DecodeSCSICommand+0x126>
     a9a:	8a 32       	cpi	r24, 0x2A	; 42
     a9c:	09 f4       	brne	.+2      	; 0xaa0 <SCSI_DecodeSCSICommand+0x6c>
     a9e:	a3 c0       	rjmp	.+326    	; 0xbe6 <SCSI_DecodeSCSICommand+0x1b2>
     aa0:	8f 32       	cpi	r24, 0x2F	; 47
     aa2:	09 f0       	breq	.+2      	; 0xaa6 <SCSI_DecodeSCSICommand+0x72>
     aa4:	c9 c0       	rjmp	.+402    	; 0xc38 <SCSI_DecodeSCSICommand+0x204>
     aa6:	c2 c0       	rjmp	.+388    	; 0xc2c <SCSI_DecodeSCSICommand+0x1f8>
     aa8:	f8 01       	movw	r30, r16
     aaa:	c7 8c       	ldd	r12, Z+31	; 0x1f
     aac:	d6 8c       	ldd	r13, Z+30	; 0x1e
{
	uint16_t AllocationLength  = SwapEndian_16(*(uint16_t*)&MSInterfaceInfo->State.CommandBlock.SCSICommandData[3]);
	uint16_t BytesTransferred  = MIN(AllocationLength, sizeof(InquiryData));

	/* Only the standard INQUIRY data is supported, check if any optional INQUIRY bits set */
	if ((MSInterfaceInfo->State.CommandBlock.SCSICommandData[1] & ((1 << 0) | (1 << 1))) ||
     aae:	84 8d       	ldd	r24, Z+28	; 0x1c
     ab0:	90 e0       	ldi	r25, 0x00	; 0
     ab2:	83 70       	andi	r24, 0x03	; 3
     ab4:	90 70       	andi	r25, 0x00	; 0
     ab6:	00 97       	sbiw	r24, 0x00	; 0
     ab8:	09 f0       	breq	.+2      	; 0xabc <SCSI_DecodeSCSICommand+0x88>
     aba:	7f c0       	rjmp	.+254    	; 0xbba <SCSI_DecodeSCSICommand+0x186>
     abc:	85 8d       	ldd	r24, Z+29	; 0x1d
     abe:	88 23       	and	r24, r24
     ac0:	09 f0       	breq	.+2      	; 0xac4 <SCSI_DecodeSCSICommand+0x90>
     ac2:	7b c0       	rjmp	.+246    	; 0xbba <SCSI_DecodeSCSICommand+0x186>
 *  \return Boolean true if the command completed successfully, false otherwise.
 */
static bool SCSI_Command_Inquiry(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
	uint16_t AllocationLength  = SwapEndian_16(*(uint16_t*)&MSInterfaceInfo->State.CommandBlock.SCSICommandData[3]);
	uint16_t BytesTransferred  = MIN(AllocationLength, sizeof(InquiryData));
     ac4:	76 01       	movw	r14, r12
     ac6:	f5 e2       	ldi	r31, 0x25	; 37
     ac8:	cf 16       	cp	r12, r31
     aca:	d1 04       	cpc	r13, r1
     acc:	18 f0       	brcs	.+6      	; 0xad4 <SCSI_DecodeSCSICommand+0xa0>
     ace:	24 e2       	ldi	r18, 0x24	; 36
     ad0:	e2 2e       	mov	r14, r18
     ad2:	f1 2c       	mov	r15, r1
		               SCSI_ASENSEQ_NO_QUALIFIER);

		return false;
	}

	Endpoint_Write_Stream_LE(&InquiryData, BytesTransferred, NULL);
     ad4:	88 eb       	ldi	r24, 0xB8	; 184
     ad6:	91 e0       	ldi	r25, 0x01	; 1
     ad8:	b7 01       	movw	r22, r14
     ada:	40 e0       	ldi	r20, 0x00	; 0
     adc:	50 e0       	ldi	r21, 0x00	; 0
     ade:	16 d1       	rcall	.+556    	; 0xd0c <Endpoint_Write_Stream_LE>
     ae0:	c6 01       	movw	r24, r12

	/* Pad out remaining bytes with 0x00 */
	Endpoint_Null_Stream((AllocationLength - BytesTransferred), NULL);
     ae2:	8e 19       	sub	r24, r14
     ae4:	9f 09       	sbc	r25, r15
     ae6:	60 e0       	ldi	r22, 0x00	; 0
     ae8:	70 e0       	ldi	r23, 0x00	; 0
     aea:	cb d0       	rcall	.+406    	; 0xc82 <Endpoint_Null_Stream>
     aec:	80 91 e8 00 	lds	r24, 0x00E8
     af0:	8e 77       	andi	r24, 0x7E	; 126
     af2:	80 93 e8 00 	sts	0x00E8, r24
     af6:	a7 01       	movw	r20, r14
     af8:	60 e0       	ldi	r22, 0x00	; 0

	/* Finalize the stream transfer to send the last packet */
	Endpoint_ClearIN();

	/* Succeed the command and update the bytes transferred counter */
	MSInterfaceInfo->State.CommandBlock.DataTransferLength -= BytesTransferred;
     afa:	70 e0       	ldi	r23, 0x00	; 0
     afc:	f8 01       	movw	r30, r16
     afe:	84 89       	ldd	r24, Z+20	; 0x14
     b00:	95 89       	ldd	r25, Z+21	; 0x15
     b02:	a6 89       	ldd	r26, Z+22	; 0x16
     b04:	b7 89       	ldd	r27, Z+23	; 0x17
     b06:	84 1b       	sub	r24, r20
     b08:	95 0b       	sbc	r25, r21
     b0a:	a6 0b       	sbc	r26, r22
     b0c:	b7 0b       	sbc	r27, r23
     b0e:	89 c0       	rjmp	.+274    	; 0xc22 <SCSI_DecodeSCSICommand+0x1ee>
     b10:	f8 01       	movw	r30, r16
     b12:	c7 8c       	ldd	r12, Z+31	; 0x1f
 *
 *  \return Boolean true if the command completed successfully, false otherwise.
 */
static bool SCSI_Command_Request_Sense(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
	uint8_t  AllocationLength = MSInterfaceInfo->State.CommandBlock.SCSICommandData[4];
     b14:	ec 2c       	mov	r14, r12
     b16:	f2 e1       	ldi	r31, 0x12	; 18
	uint8_t  BytesTransferred = MIN(AllocationLength, sizeof(SenseData));
     b18:	fc 15       	cp	r31, r12
     b1a:	10 f4       	brcc	.+4      	; 0xb20 <SCSI_DecodeSCSICommand+0xec>
     b1c:	92 e1       	ldi	r25, 0x12	; 18
     b1e:	e9 2e       	mov	r14, r25
     b20:	86 ea       	ldi	r24, 0xA6	; 166
     b22:	91 e0       	ldi	r25, 0x01	; 1

	Endpoint_Write_Stream_LE(&SenseData, BytesTransferred, NULL);
     b24:	6e 2d       	mov	r22, r14
     b26:	70 e0       	ldi	r23, 0x00	; 0
     b28:	40 e0       	ldi	r20, 0x00	; 0
     b2a:	50 e0       	ldi	r21, 0x00	; 0
     b2c:	ef d0       	rcall	.+478    	; 0xd0c <Endpoint_Write_Stream_LE>
     b2e:	8c 2d       	mov	r24, r12
     b30:	90 e0       	ldi	r25, 0x00	; 0
     b32:	8e 19       	sub	r24, r14
	Endpoint_Null_Stream((AllocationLength - BytesTransferred), NULL);
     b34:	91 09       	sbc	r25, r1
     b36:	60 e0       	ldi	r22, 0x00	; 0
     b38:	70 e0       	ldi	r23, 0x00	; 0
     b3a:	a3 d0       	rcall	.+326    	; 0xc82 <Endpoint_Null_Stream>
     b3c:	80 91 e8 00 	lds	r24, 0x00E8
     b40:	8e 77       	andi	r24, 0x7E	; 126
     b42:	80 93 e8 00 	sts	0x00E8, r24
     b46:	f8 01       	movw	r30, r16
     b48:	84 89       	ldd	r24, Z+20	; 0x14
     b4a:	95 89       	ldd	r25, Z+21	; 0x15
     b4c:	a6 89       	ldd	r26, Z+22	; 0x16
	Endpoint_ClearIN();

	/* Succeed the command and update the bytes transferred counter */
	MSInterfaceInfo->State.CommandBlock.DataTransferLength -= BytesTransferred;
     b4e:	b7 89       	ldd	r27, Z+23	; 0x17
     b50:	8e 19       	sub	r24, r14
     b52:	91 09       	sbc	r25, r1
     b54:	a1 09       	sbc	r26, r1
     b56:	b1 09       	sbc	r27, r1
     b58:	64 c0       	rjmp	.+200    	; 0xc22 <SCSI_DecodeSCSICommand+0x1ee>
     b5a:	8f ef       	ldi	r24, 0xFF	; 255
     b5c:	9f e7       	ldi	r25, 0x7F	; 127
     b5e:	a0 e0       	ldi	r26, 0x00	; 0
     b60:	b0 e0       	ldi	r27, 0x00	; 0
 *
 *  \return Boolean true if the command completed successfully, false otherwise.
 */
static bool SCSI_Command_Read_Capacity_10(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
	uint32_t LastBlockAddressInLUN = (LUN_MEDIA_BLOCKS - 1);
     b62:	8d 83       	std	Y+5, r24	; 0x05
     b64:	9e 83       	std	Y+6, r25	; 0x06
     b66:	af 83       	std	Y+7, r26	; 0x07
     b68:	b8 87       	std	Y+8, r27	; 0x08
     b6a:	80 e0       	ldi	r24, 0x00	; 0
     b6c:	92 e0       	ldi	r25, 0x02	; 2
     b6e:	a0 e0       	ldi	r26, 0x00	; 0
     b70:	b0 e0       	ldi	r27, 0x00	; 0
	uint32_t MediaBlockSize        = VIRTUAL_MEMORY_BLOCK_SIZE;
     b72:	89 83       	std	Y+1, r24	; 0x01
     b74:	9a 83       	std	Y+2, r25	; 0x02
     b76:	ab 83       	std	Y+3, r26	; 0x03
     b78:	bc 83       	std	Y+4, r27	; 0x04
     b7a:	ce 01       	movw	r24, r28
     b7c:	05 96       	adiw	r24, 0x05	; 5
     b7e:	64 e0       	ldi	r22, 0x04	; 4
     b80:	70 e0       	ldi	r23, 0x00	; 0

	Endpoint_Write_Stream_BE(&LastBlockAddressInLUN, sizeof(LastBlockAddressInLUN), NULL);
     b82:	40 e0       	ldi	r20, 0x00	; 0
     b84:	50 e0       	ldi	r21, 0x00	; 0
     b86:	11 d1       	rcall	.+546    	; 0xdaa <Endpoint_Write_Stream_BE>
     b88:	ce 01       	movw	r24, r28
     b8a:	01 96       	adiw	r24, 0x01	; 1
     b8c:	64 e0       	ldi	r22, 0x04	; 4
     b8e:	70 e0       	ldi	r23, 0x00	; 0
     b90:	40 e0       	ldi	r20, 0x00	; 0
	Endpoint_Write_Stream_BE(&MediaBlockSize, sizeof(MediaBlockSize), NULL);
     b92:	50 e0       	ldi	r21, 0x00	; 0
     b94:	0a d1       	rcall	.+532    	; 0xdaa <Endpoint_Write_Stream_BE>
     b96:	80 91 e8 00 	lds	r24, 0x00E8
     b9a:	8e 77       	andi	r24, 0x7E	; 126
     b9c:	80 93 e8 00 	sts	0x00E8, r24
     ba0:	f8 01       	movw	r30, r16
     ba2:	84 89       	ldd	r24, Z+20	; 0x14
     ba4:	95 89       	ldd	r25, Z+21	; 0x15
     ba6:	a6 89       	ldd	r26, Z+22	; 0x16
     ba8:	b7 89       	ldd	r27, Z+23	; 0x17
     baa:	08 97       	sbiw	r24, 0x08	; 8
	Endpoint_ClearIN();

	/* Succeed the command and update the bytes transferred counter */
	MSInterfaceInfo->State.CommandBlock.DataTransferLength -= 8;
     bac:	a1 09       	sbc	r26, r1
     bae:	b1 09       	sbc	r27, r1
     bb0:	38 c0       	rjmp	.+112    	; 0xc22 <SCSI_DecodeSCSICommand+0x1ee>
     bb2:	f8 01       	movw	r30, r16
     bb4:	84 8d       	ldd	r24, Z+28	; 0x1c
     bb6:	82 fd       	sbrc	r24, 2
     bb8:	08 c0       	rjmp	.+16     	; 0xbca <SCSI_DecodeSCSICommand+0x196>
     bba:	80 91 a8 01 	lds	r24, 0x01A8
 *  \return Boolean true if the command completed successfully, false otherwise.
 */
static bool SCSI_Command_Send_Diagnostic(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
	/* Check to see if the SELF TEST bit is not set */
	if (!(MSInterfaceInfo->State.CommandBlock.SCSICommandData[1] & (1 << 2)))
     bbe:	80 7f       	andi	r24, 0xF0	; 240
     bc0:	85 60       	ori	r24, 0x05	; 5
     bc2:	80 93 a8 01 	sts	0x01A8, r24
	{
		/* Only self-test supported - update SENSE key and fail the command */
		SCSI_SET_SENSE(SCSI_SENSE_KEY_ILLEGAL_REQUEST,
     bc6:	84 e2       	ldi	r24, 0x24	; 36
     bc8:	3e c0       	rjmp	.+124    	; 0xc46 <SCSI_DecodeSCSICommand+0x212>
     bca:	c4 de       	rcall	.-632    	; 0x954 <DataflashManager_CheckDataflashOperation>
     bcc:	88 23       	and	r24, r24
     bce:	71 f5       	brne	.+92     	; 0xc2c <SCSI_DecodeSCSICommand+0x1f8>
     bd0:	80 91 a8 01 	lds	r24, 0x01A8
     bd4:	80 7f       	andi	r24, 0xF0	; 240

		return false;
	}

	/* Check to see if all attached Dataflash ICs are functional */
	if (!(DataflashManager_CheckDataflashOperation()))
     bd6:	84 60       	ori	r24, 0x04	; 4
     bd8:	80 93 a8 01 	sts	0x01A8, r24
     bdc:	10 92 b2 01 	sts	0x01B2, r1
	{
		/* Update SENSE key with a hardware error condition and return command fail */
		SCSI_SET_SENSE(SCSI_SENSE_KEY_HARDWARE_ERROR,
     be0:	10 92 b3 01 	sts	0x01B3, r1
     be4:	3e c0       	rjmp	.+124    	; 0xc62 <SCSI_DecodeSCSICommand+0x22e>
     be6:	c8 01       	movw	r24, r16
     be8:	60 e0       	ldi	r22, 0x00	; 0
     bea:	02 c0       	rjmp	.+4      	; 0xbf0 <SCSI_DecodeSCSICommand+0x1bc>
     bec:	c8 01       	movw	r24, r16
     bee:	61 e0       	ldi	r22, 0x01	; 1
     bf0:	dc de       	rcall	.-584    	; 0x9aa <SCSI_Command_ReadWrite_10>
     bf2:	88 23       	and	r24, r24
			break;
		case SCSI_CMD_SEND_DIAGNOSTIC:
			CommandSuccess = SCSI_Command_Send_Diagnostic(MSInterfaceInfo);
			break;
		case SCSI_CMD_WRITE_10:
			CommandSuccess = SCSI_Command_ReadWrite_10(MSInterfaceInfo, DATA_WRITE);
     bf4:	b1 f1       	breq	.+108    	; 0xc62 <SCSI_DecodeSCSICommand+0x22e>
     bf6:	2a c0       	rjmp	.+84     	; 0xc4c <SCSI_DecodeSCSICommand+0x218>
     bf8:	10 92 f1 00 	sts	0x00F1, r1
			break;
		case SCSI_CMD_READ_10:
			CommandSuccess = SCSI_Command_ReadWrite_10(MSInterfaceInfo, DATA_READ);
     bfc:	10 92 f1 00 	sts	0x00F1, r1
     c00:	10 92 f1 00 	sts	0x00F1, r1
		                   SCSI_ASENSEQ_NO_QUALIFIER);
			break;
	}

	/* Check if command was successfully processed */
	if (CommandSuccess)
     c04:	10 92 f1 00 	sts	0x00F1, r1
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     c08:	80 91 e8 00 	lds	r24, 0x00E8
     c0c:	8e 77       	andi	r24, 0x7E	; 126
     c0e:	80 93 e8 00 	sts	0x00E8, r24
     c12:	f8 01       	movw	r30, r16
     c14:	84 89       	ldd	r24, Z+20	; 0x14
     c16:	95 89       	ldd	r25, Z+21	; 0x15
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     c18:	a6 89       	ldd	r26, Z+22	; 0x16
     c1a:	b7 89       	ldd	r27, Z+23	; 0x17
     c1c:	04 97       	sbiw	r24, 0x04	; 4
     c1e:	a1 09       	sbc	r26, r1
     c20:	b1 09       	sbc	r27, r1
	Endpoint_Write_8(DISK_READ_ONLY ? 0x80 : 0x00);
	Endpoint_Write_8(0x00);
	Endpoint_ClearIN();

	/* Update the bytes transferred counter and succeed the command */
	MSInterfaceInfo->State.CommandBlock.DataTransferLength -= 4;
     c22:	84 8b       	std	Z+20, r24	; 0x14
     c24:	95 8b       	std	Z+21, r25	; 0x15
     c26:	a6 8b       	std	Z+22, r26	; 0x16
     c28:	b7 8b       	std	Z+23, r27	; 0x17
     c2a:	10 c0       	rjmp	.+32     	; 0xc4c <SCSI_DecodeSCSICommand+0x218>
     c2c:	f8 01       	movw	r30, r16
     c2e:	14 8a       	std	Z+20, r1	; 0x14
     c30:	15 8a       	std	Z+21, r1	; 0x15
     c32:	16 8a       	std	Z+22, r1	; 0x16
     c34:	17 8a       	std	Z+23, r1	; 0x17
     c36:	0a c0       	rjmp	.+20     	; 0xc4c <SCSI_DecodeSCSICommand+0x218>
     c38:	80 91 a8 01 	lds	r24, 0x01A8
		case SCSI_CMD_TEST_UNIT_READY:
		case SCSI_CMD_PREVENT_ALLOW_MEDIUM_REMOVAL:
		case SCSI_CMD_VERIFY_10:
			/* These commands should just succeed, no handling required */
			CommandSuccess = true;
			MSInterfaceInfo->State.CommandBlock.DataTransferLength = 0;
     c3c:	80 7f       	andi	r24, 0xF0	; 240
     c3e:	85 60       	ori	r24, 0x05	; 5
     c40:	80 93 a8 01 	sts	0x01A8, r24
     c44:	80 e2       	ldi	r24, 0x20	; 32
			break;
     c46:	80 93 b2 01 	sts	0x01B2, r24
		default:
			/* Update the SENSE key to reflect the invalid command */
			SCSI_SET_SENSE(SCSI_SENSE_KEY_ILLEGAL_REQUEST,
     c4a:	ca cf       	rjmp	.-108    	; 0xbe0 <SCSI_DecodeSCSICommand+0x1ac>
     c4c:	80 91 a8 01 	lds	r24, 0x01A8
     c50:	80 7f       	andi	r24, 0xF0	; 240
     c52:	80 93 a8 01 	sts	0x01A8, r24
     c56:	10 92 b2 01 	sts	0x01B2, r1
     c5a:	10 92 b3 01 	sts	0x01B3, r1
	}

	/* Check if command was successfully processed */
	if (CommandSuccess)
	{
		SCSI_SET_SENSE(SCSI_SENSE_KEY_GOOD,
     c5e:	81 e0       	ldi	r24, 0x01	; 1
     c60:	01 c0       	rjmp	.+2      	; 0xc64 <SCSI_DecodeSCSICommand+0x230>
     c62:	80 e0       	ldi	r24, 0x00	; 0
     c64:	28 96       	adiw	r28, 0x08	; 8
     c66:	0f b6       	in	r0, 0x3f	; 63
     c68:	f8 94       	cli
     c6a:	de bf       	out	0x3e, r29	; 62
     c6c:	0f be       	out	0x3f, r0	; 63
		               SCSI_ASENSE_NO_ADDITIONAL_INFORMATION,
		               SCSI_ASENSEQ_NO_QUALIFIER);

		return true;
     c6e:	cd bf       	out	0x3d, r28	; 61
     c70:	df 91       	pop	r29
	}

	return false;
     c72:	cf 91       	pop	r28
}
     c74:	1f 91       	pop	r17
     c76:	0f 91       	pop	r16
     c78:	ff 90       	pop	r15
     c7a:	ef 90       	pop	r14
     c7c:	df 90       	pop	r13
     c7e:	cf 90       	pop	r12
     c80:	08 95       	ret

00000c82 <Endpoint_Null_Stream>:
	return ENDPOINT_RWSTREAM_NoError;
}

uint8_t Endpoint_Null_Stream(uint16_t Length,
                             uint16_t* const BytesProcessed)
{
     c82:	df 92       	push	r13
     c84:	ef 92       	push	r14
     c86:	ff 92       	push	r15
     c88:	0f 93       	push	r16
     c8a:	1f 93       	push	r17
     c8c:	cf 93       	push	r28
     c8e:	df 93       	push	r29
     c90:	ec 01       	movw	r28, r24
     c92:	8b 01       	movw	r16, r22
	uint8_t  ErrorCode;
	uint16_t BytesInTransfer = 0;
	
	if ((ErrorCode = Endpoint_WaitUntilReady()))
     c94:	7a d2       	rcall	.+1268   	; 0x118a <Endpoint_WaitUntilReady>
     c96:	d8 2e       	mov	r13, r24
     c98:	88 23       	and	r24, r24
     c9a:	79 f5       	brne	.+94     	; 0xcfa <Endpoint_Null_Stream+0x78>
     c9c:	01 15       	cp	r16, r1
	  return ErrorCode;
	  
	if (BytesProcessed != NULL)
     c9e:	11 05       	cpc	r17, r1
     ca0:	29 f0       	breq	.+10     	; 0xcac <Endpoint_Null_Stream+0x2a>
     ca2:	f8 01       	movw	r30, r16
	  Length -= *BytesProcessed;
     ca4:	20 81       	ld	r18, Z
     ca6:	31 81       	ldd	r19, Z+1	; 0x01
     ca8:	c2 1b       	sub	r28, r18
     caa:	d3 0b       	sbc	r29, r19
     cac:	ee 24       	eor	r14, r14
	return ENDPOINT_RWSTREAM_NoError;
}

uint8_t Endpoint_Null_Stream(uint16_t Length,
                             uint16_t* const BytesProcessed)
{
     cae:	ff 24       	eor	r15, r15
     cb0:	20 c0       	rjmp	.+64     	; 0xcf2 <Endpoint_Null_Stream+0x70>
     cb2:	80 91 e8 00 	lds	r24, 0x00E8
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
     cb6:	85 fd       	sbrc	r24, 5
	if (BytesProcessed != NULL)
	  Length -= *BytesProcessed;

	while (Length)
	{
		if (!(Endpoint_IsReadWriteAllowed()))
     cb8:	16 c0       	rjmp	.+44     	; 0xce6 <Endpoint_Null_Stream+0x64>
     cba:	80 91 e8 00 	lds	r24, 0x00E8
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     cbe:	8e 77       	andi	r24, 0x7E	; 126
     cc0:	80 93 e8 00 	sts	0x00E8, r24
     cc4:	01 15       	cp	r16, r1
		{
			Endpoint_ClearIN();

			if (BytesProcessed != NULL)
     cc6:	11 05       	cpc	r17, r1
     cc8:	51 f0       	breq	.+20     	; 0xcde <Endpoint_Null_Stream+0x5c>
     cca:	f8 01       	movw	r30, r16
			{
				*BytesProcessed += BytesInTransfer;
     ccc:	80 81       	ld	r24, Z
     cce:	91 81       	ldd	r25, Z+1	; 0x01
     cd0:	8e 0d       	add	r24, r14
     cd2:	9f 1d       	adc	r25, r15
     cd4:	91 83       	std	Z+1, r25	; 0x01
     cd6:	80 83       	st	Z, r24
     cd8:	35 e0       	ldi	r19, 0x05	; 5
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
     cda:	d3 2e       	mov	r13, r19
     cdc:	0e c0       	rjmp	.+28     	; 0xcfa <Endpoint_Null_Stream+0x78>
     cde:	55 d2       	rcall	.+1194   	; 0x118a <Endpoint_WaitUntilReady>
			}

			if ((ErrorCode = Endpoint_WaitUntilReady()))
     ce0:	88 23       	and	r24, r24
     ce2:	39 f0       	breq	.+14     	; 0xcf2 <Endpoint_Null_Stream+0x70>
     ce4:	09 c0       	rjmp	.+18     	; 0xcf8 <Endpoint_Null_Stream+0x76>
     ce6:	10 92 f1 00 	sts	0x00F1, r1
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     cea:	21 97       	sbiw	r28, 0x01	; 1
     cec:	08 94       	sec
		}
		else
		{
			Endpoint_Write_8(0);

			Length--;
     cee:	e1 1c       	adc	r14, r1
			BytesInTransfer++;
     cf0:	f1 1c       	adc	r15, r1
     cf2:	20 97       	sbiw	r28, 0x00	; 0
     cf4:	f1 f6       	brne	.-68     	; 0xcb2 <Endpoint_Null_Stream+0x30>
	  return ErrorCode;
	  
	if (BytesProcessed != NULL)
	  Length -= *BytesProcessed;

	while (Length)
     cf6:	01 c0       	rjmp	.+2      	; 0xcfa <Endpoint_Null_Stream+0x78>
     cf8:	d8 2e       	mov	r13, r24
     cfa:	8d 2d       	mov	r24, r13
			{
				*BytesProcessed += BytesInTransfer;
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
			}

			if ((ErrorCode = Endpoint_WaitUntilReady()))
     cfc:	df 91       	pop	r29
			BytesInTransfer++;
		}
	}
	
	return ENDPOINT_RWSTREAM_NoError;
}
     cfe:	cf 91       	pop	r28
     d00:	1f 91       	pop	r17
     d02:	0f 91       	pop	r16
     d04:	ff 90       	pop	r15
     d06:	ef 90       	pop	r14
     d08:	df 90       	pop	r13
     d0a:	08 95       	ret

00000d0c <Endpoint_Write_Stream_LE>:
     d0c:	af 92       	push	r10
     d0e:	bf 92       	push	r11
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
     d10:	cf 92       	push	r12
     d12:	df 92       	push	r13
     d14:	ef 92       	push	r14
     d16:	ff 92       	push	r15
     d18:	1f 93       	push	r17
     d1a:	cf 93       	push	r28
     d1c:	df 93       	push	r29
     d1e:	ec 01       	movw	r28, r24
     d20:	7b 01       	movw	r14, r22
     d22:	6a 01       	movw	r12, r20
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	uint16_t BytesInTransfer = 0;
	uint8_t  ErrorCode;

	if ((ErrorCode = Endpoint_WaitUntilReady()))
     d24:	32 d2       	rcall	.+1124   	; 0x118a <Endpoint_WaitUntilReady>
     d26:	18 2f       	mov	r17, r24
     d28:	88 23       	and	r24, r24
     d2a:	a1 f5       	brne	.+104    	; 0xd94 <Endpoint_Write_Stream_LE+0x88>
     d2c:	c1 14       	cp	r12, r1
	  return ErrorCode;

	if (BytesProcessed != NULL)
     d2e:	d1 04       	cpc	r13, r1
     d30:	39 f0       	breq	.+14     	; 0xd40 <Endpoint_Write_Stream_LE+0x34>
     d32:	f6 01       	movw	r30, r12
	{
		Length -= *BytesProcessed;
     d34:	20 81       	ld	r18, Z
     d36:	31 81       	ldd	r19, Z+1	; 0x01
     d38:	e2 1a       	sub	r14, r18
     d3a:	f3 0a       	sbc	r15, r19
     d3c:	c2 0f       	add	r28, r18
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
     d3e:	d3 1f       	adc	r29, r19
     d40:	aa 24       	eor	r10, r10

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
     d42:	bb 24       	eor	r11, r11
     d44:	22 c0       	rjmp	.+68     	; 0xd8a <Endpoint_Write_Stream_LE+0x7e>
     d46:	80 91 e8 00 	lds	r24, 0x00E8
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
     d4a:	85 fd       	sbrc	r24, 5
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
	{
		if (!(Endpoint_IsReadWriteAllowed()))
     d4c:	15 c0       	rjmp	.+42     	; 0xd78 <Endpoint_Write_Stream_LE+0x6c>
     d4e:	80 91 e8 00 	lds	r24, 0x00E8
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     d52:	8e 77       	andi	r24, 0x7E	; 126
     d54:	80 93 e8 00 	sts	0x00E8, r24
     d58:	c1 14       	cp	r12, r1

			#if !defined(INTERRUPT_CONTROL_ENDPOINT)
			USB_USBTask();
			#endif

			if (BytesProcessed != NULL)
     d5a:	d1 04       	cpc	r13, r1
     d5c:	49 f0       	breq	.+18     	; 0xd70 <Endpoint_Write_Stream_LE+0x64>
     d5e:	f6 01       	movw	r30, r12
			{
				*BytesProcessed += BytesInTransfer;
     d60:	80 81       	ld	r24, Z
     d62:	91 81       	ldd	r25, Z+1	; 0x01
     d64:	8a 0d       	add	r24, r10
     d66:	9b 1d       	adc	r25, r11
     d68:	91 83       	std	Z+1, r25	; 0x01
     d6a:	80 83       	st	Z, r24
     d6c:	15 e0       	ldi	r17, 0x05	; 5
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
     d6e:	12 c0       	rjmp	.+36     	; 0xd94 <Endpoint_Write_Stream_LE+0x88>
     d70:	0c d2       	rcall	.+1048   	; 0x118a <Endpoint_WaitUntilReady>
			}

			if ((ErrorCode = Endpoint_WaitUntilReady()))
     d72:	88 23       	and	r24, r24
     d74:	51 f0       	breq	.+20     	; 0xd8a <Endpoint_Write_Stream_LE+0x7e>
     d76:	0d c0       	rjmp	.+26     	; 0xd92 <Endpoint_Write_Stream_LE+0x86>
     d78:	89 91       	ld	r24, Y+
     d7a:	80 93 f1 00 	sts	0x00F1, r24
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     d7e:	08 94       	sec
     d80:	e1 08       	sbc	r14, r1
		}
		else
		{
			TEMPLATE_TRANSFER_BYTE(DataStream);
			TEMPLATE_BUFFER_MOVE(DataStream, 1);
			Length--;
     d82:	f1 08       	sbc	r15, r1
     d84:	08 94       	sec
     d86:	a1 1c       	adc	r10, r1
			BytesInTransfer++;
     d88:	b1 1c       	adc	r11, r1
     d8a:	e1 14       	cp	r14, r1
     d8c:	f1 04       	cpc	r15, r1
	{
		Length -= *BytesProcessed;
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
     d8e:	d9 f6       	brne	.-74     	; 0xd46 <Endpoint_Write_Stream_LE+0x3a>
     d90:	01 c0       	rjmp	.+2      	; 0xd94 <Endpoint_Write_Stream_LE+0x88>
     d92:	18 2f       	mov	r17, r24
     d94:	81 2f       	mov	r24, r17
			{
				*BytesProcessed += BytesInTransfer;
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
			}

			if ((ErrorCode = Endpoint_WaitUntilReady()))
     d96:	df 91       	pop	r29
			BytesInTransfer++;
		}
	}

	return ENDPOINT_RWSTREAM_NoError;
}
     d98:	cf 91       	pop	r28
     d9a:	1f 91       	pop	r17
     d9c:	ff 90       	pop	r15
     d9e:	ef 90       	pop	r14
     da0:	df 90       	pop	r13
     da2:	cf 90       	pop	r12
     da4:	bf 90       	pop	r11
     da6:	af 90       	pop	r10
     da8:	08 95       	ret

00000daa <Endpoint_Write_Stream_BE>:
     daa:	af 92       	push	r10
     dac:	bf 92       	push	r11
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
     dae:	cf 92       	push	r12
     db0:	df 92       	push	r13
     db2:	ff 92       	push	r15
     db4:	0f 93       	push	r16
     db6:	1f 93       	push	r17
     db8:	cf 93       	push	r28
     dba:	df 93       	push	r29
     dbc:	ec 01       	movw	r28, r24
     dbe:	6b 01       	movw	r12, r22
     dc0:	5a 01       	movw	r10, r20
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	uint16_t BytesInTransfer = 0;
	uint8_t  ErrorCode;

	if ((ErrorCode = Endpoint_WaitUntilReady()))
     dc2:	e3 d1       	rcall	.+966    	; 0x118a <Endpoint_WaitUntilReady>
     dc4:	f8 2e       	mov	r15, r24
     dc6:	88 23       	and	r24, r24
     dc8:	d9 f5       	brne	.+118    	; 0xe40 <Endpoint_Write_Stream_BE+0x96>
     dca:	86 01       	movw	r16, r12

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
     dcc:	01 50       	subi	r16, 0x01	; 1
     dce:	10 40       	sbci	r17, 0x00	; 0
     dd0:	0c 0f       	add	r16, r28
     dd2:	1d 1f       	adc	r17, r29
     dd4:	a1 14       	cp	r10, r1
	uint8_t  ErrorCode;

	if ((ErrorCode = Endpoint_WaitUntilReady()))
	  return ErrorCode;

	if (BytesProcessed != NULL)
     dd6:	b1 04       	cpc	r11, r1
     dd8:	39 f0       	breq	.+14     	; 0xde8 <Endpoint_Write_Stream_BE+0x3e>
     dda:	f5 01       	movw	r30, r10
	{
		Length -= *BytesProcessed;
     ddc:	20 81       	ld	r18, Z
     dde:	31 81       	ldd	r19, Z+1	; 0x01
     de0:	c2 1a       	sub	r12, r18
     de2:	d3 0a       	sbc	r13, r19
     de4:	02 1b       	sub	r16, r18
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
     de6:	13 0b       	sbc	r17, r19
     de8:	c0 e0       	ldi	r28, 0x00	; 0
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
     dea:	d0 e0       	ldi	r29, 0x00	; 0
     dec:	24 c0       	rjmp	.+72     	; 0xe36 <Endpoint_Write_Stream_BE+0x8c>
     dee:	80 91 e8 00 	lds	r24, 0x00E8
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
     df2:	85 fd       	sbrc	r24, 5
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
	{
		if (!(Endpoint_IsReadWriteAllowed()))
     df4:	16 c0       	rjmp	.+44     	; 0xe22 <Endpoint_Write_Stream_BE+0x78>
     df6:	80 91 e8 00 	lds	r24, 0x00E8
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     dfa:	8e 77       	andi	r24, 0x7E	; 126
     dfc:	80 93 e8 00 	sts	0x00E8, r24
     e00:	a1 14       	cp	r10, r1

			#if !defined(INTERRUPT_CONTROL_ENDPOINT)
			USB_USBTask();
			#endif

			if (BytesProcessed != NULL)
     e02:	b1 04       	cpc	r11, r1
     e04:	51 f0       	breq	.+20     	; 0xe1a <Endpoint_Write_Stream_BE+0x70>
     e06:	f5 01       	movw	r30, r10
			{
				*BytesProcessed += BytesInTransfer;
     e08:	80 81       	ld	r24, Z
     e0a:	91 81       	ldd	r25, Z+1	; 0x01
     e0c:	8c 0f       	add	r24, r28
     e0e:	9d 1f       	adc	r25, r29
     e10:	91 83       	std	Z+1, r25	; 0x01
     e12:	80 83       	st	Z, r24
     e14:	45 e0       	ldi	r20, 0x05	; 5
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
     e16:	f4 2e       	mov	r15, r20
     e18:	13 c0       	rjmp	.+38     	; 0xe40 <Endpoint_Write_Stream_BE+0x96>
     e1a:	b7 d1       	rcall	.+878    	; 0x118a <Endpoint_WaitUntilReady>
			}

			if ((ErrorCode = Endpoint_WaitUntilReady()))
     e1c:	88 23       	and	r24, r24
     e1e:	59 f0       	breq	.+22     	; 0xe36 <Endpoint_Write_Stream_BE+0x8c>
     e20:	0e c0       	rjmp	.+28     	; 0xe3e <Endpoint_Write_Stream_BE+0x94>
     e22:	f8 01       	movw	r30, r16
     e24:	80 81       	ld	r24, Z
			  return ErrorCode;
		}
		else
		{
			TEMPLATE_TRANSFER_BYTE(DataStream);
     e26:	80 93 f1 00 	sts	0x00F1, r24
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     e2a:	01 50       	subi	r16, 0x01	; 1
     e2c:	10 40       	sbci	r17, 0x00	; 0
			TEMPLATE_BUFFER_MOVE(DataStream, 1);
     e2e:	08 94       	sec
     e30:	c1 08       	sbc	r12, r1
			Length--;
     e32:	d1 08       	sbc	r13, r1
     e34:	21 96       	adiw	r28, 0x01	; 1
     e36:	c1 14       	cp	r12, r1
			BytesInTransfer++;
     e38:	d1 04       	cpc	r13, r1
	{
		Length -= *BytesProcessed;
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
     e3a:	c9 f6       	brne	.-78     	; 0xdee <Endpoint_Write_Stream_BE+0x44>
     e3c:	01 c0       	rjmp	.+2      	; 0xe40 <Endpoint_Write_Stream_BE+0x96>
     e3e:	f8 2e       	mov	r15, r24
     e40:	8f 2d       	mov	r24, r15
			{
				*BytesProcessed += BytesInTransfer;
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
			}

			if ((ErrorCode = Endpoint_WaitUntilReady()))
     e42:	df 91       	pop	r29
			BytesInTransfer++;
		}
	}

	return ENDPOINT_RWSTREAM_NoError;
}
     e44:	cf 91       	pop	r28
     e46:	1f 91       	pop	r17
     e48:	0f 91       	pop	r16
     e4a:	ff 90       	pop	r15
     e4c:	df 90       	pop	r13
     e4e:	cf 90       	pop	r12
     e50:	bf 90       	pop	r11
     e52:	af 90       	pop	r10
     e54:	08 95       	ret

00000e56 <Endpoint_Read_Stream_LE>:
     e56:	af 92       	push	r10
     e58:	bf 92       	push	r11
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
     e5a:	cf 92       	push	r12
     e5c:	df 92       	push	r13
     e5e:	ef 92       	push	r14
     e60:	ff 92       	push	r15
     e62:	1f 93       	push	r17
     e64:	cf 93       	push	r28
     e66:	df 93       	push	r29
     e68:	ec 01       	movw	r28, r24
     e6a:	7b 01       	movw	r14, r22
     e6c:	6a 01       	movw	r12, r20
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	uint16_t BytesInTransfer = 0;
	uint8_t  ErrorCode;

	if ((ErrorCode = Endpoint_WaitUntilReady()))
     e6e:	8d d1       	rcall	.+794    	; 0x118a <Endpoint_WaitUntilReady>
     e70:	18 2f       	mov	r17, r24
     e72:	88 23       	and	r24, r24
     e74:	a1 f5       	brne	.+104    	; 0xede <Endpoint_Read_Stream_LE+0x88>
     e76:	c1 14       	cp	r12, r1
	  return ErrorCode;

	if (BytesProcessed != NULL)
     e78:	d1 04       	cpc	r13, r1
     e7a:	39 f0       	breq	.+14     	; 0xe8a <Endpoint_Read_Stream_LE+0x34>
     e7c:	f6 01       	movw	r30, r12
	{
		Length -= *BytesProcessed;
     e7e:	20 81       	ld	r18, Z
     e80:	31 81       	ldd	r19, Z+1	; 0x01
     e82:	e2 1a       	sub	r14, r18
     e84:	f3 0a       	sbc	r15, r19
     e86:	c2 0f       	add	r28, r18
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
     e88:	d3 1f       	adc	r29, r19
     e8a:	aa 24       	eor	r10, r10

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
     e8c:	bb 24       	eor	r11, r11
     e8e:	22 c0       	rjmp	.+68     	; 0xed4 <Endpoint_Read_Stream_LE+0x7e>
     e90:	80 91 e8 00 	lds	r24, 0x00E8
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
     e94:	85 fd       	sbrc	r24, 5
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
	{
		if (!(Endpoint_IsReadWriteAllowed()))
     e96:	15 c0       	rjmp	.+42     	; 0xec2 <Endpoint_Read_Stream_LE+0x6c>
     e98:	80 91 e8 00 	lds	r24, 0x00E8
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     e9c:	8b 77       	andi	r24, 0x7B	; 123
     e9e:	80 93 e8 00 	sts	0x00E8, r24
     ea2:	c1 14       	cp	r12, r1

			#if !defined(INTERRUPT_CONTROL_ENDPOINT)
			USB_USBTask();
			#endif

			if (BytesProcessed != NULL)
     ea4:	d1 04       	cpc	r13, r1
     ea6:	49 f0       	breq	.+18     	; 0xeba <Endpoint_Read_Stream_LE+0x64>
     ea8:	f6 01       	movw	r30, r12
			{
				*BytesProcessed += BytesInTransfer;
     eaa:	80 81       	ld	r24, Z
     eac:	91 81       	ldd	r25, Z+1	; 0x01
     eae:	8a 0d       	add	r24, r10
     eb0:	9b 1d       	adc	r25, r11
     eb2:	91 83       	std	Z+1, r25	; 0x01
     eb4:	80 83       	st	Z, r24
     eb6:	15 e0       	ldi	r17, 0x05	; 5
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
     eb8:	12 c0       	rjmp	.+36     	; 0xede <Endpoint_Read_Stream_LE+0x88>
     eba:	67 d1       	rcall	.+718    	; 0x118a <Endpoint_WaitUntilReady>
			}

			if ((ErrorCode = Endpoint_WaitUntilReady()))
     ebc:	88 23       	and	r24, r24
     ebe:	51 f0       	breq	.+20     	; 0xed4 <Endpoint_Read_Stream_LE+0x7e>
     ec0:	0d c0       	rjmp	.+26     	; 0xedc <Endpoint_Read_Stream_LE+0x86>
     ec2:	80 91 f1 00 	lds	r24, 0x00F1
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
     ec6:	89 93       	st	Y+, r24
     ec8:	08 94       	sec
			  return ErrorCode;
		}
		else
		{
			TEMPLATE_TRANSFER_BYTE(DataStream);
     eca:	e1 08       	sbc	r14, r1
			TEMPLATE_BUFFER_MOVE(DataStream, 1);
			Length--;
     ecc:	f1 08       	sbc	r15, r1
     ece:	08 94       	sec
     ed0:	a1 1c       	adc	r10, r1
			BytesInTransfer++;
     ed2:	b1 1c       	adc	r11, r1
     ed4:	e1 14       	cp	r14, r1
     ed6:	f1 04       	cpc	r15, r1
	{
		Length -= *BytesProcessed;
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
     ed8:	d9 f6       	brne	.-74     	; 0xe90 <Endpoint_Read_Stream_LE+0x3a>
     eda:	01 c0       	rjmp	.+2      	; 0xede <Endpoint_Read_Stream_LE+0x88>
     edc:	18 2f       	mov	r17, r24
     ede:	81 2f       	mov	r24, r17
			{
				*BytesProcessed += BytesInTransfer;
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
			}

			if ((ErrorCode = Endpoint_WaitUntilReady()))
     ee0:	df 91       	pop	r29
			BytesInTransfer++;
		}
	}

	return ENDPOINT_RWSTREAM_NoError;
}
     ee2:	cf 91       	pop	r28
     ee4:	1f 91       	pop	r17
     ee6:	ff 90       	pop	r15
     ee8:	ef 90       	pop	r14
     eea:	df 90       	pop	r13
     eec:	cf 90       	pop	r12
     eee:	bf 90       	pop	r11
     ef0:	af 90       	pop	r10
     ef2:	08 95       	ret

00000ef4 <Endpoint_Write_Control_Stream_LE>:
     ef4:	20 91 06 02 	lds	r18, 0x0206
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
     ef8:	30 91 07 02 	lds	r19, 0x0207
     efc:	26 17       	cp	r18, r22
     efe:	37 07       	cpc	r19, r23
     f00:	20 f4       	brcc	.+8      	; 0xf0a <Endpoint_Write_Control_Stream_LE+0x16>
     f02:	b9 01       	movw	r22, r18
     f04:	fc 01       	movw	r30, r24
     f06:	20 e0       	ldi	r18, 0x00	; 0
     f08:	37 c0       	rjmp	.+110    	; 0xf78 <Endpoint_Write_Control_Stream_LE+0x84>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
     f0a:	61 15       	cp	r22, r1
     f0c:	71 05       	cpc	r23, r1
     f0e:	d1 f7       	brne	.-12     	; 0xf04 <Endpoint_Write_Control_Stream_LE+0x10>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     f10:	20 91 e8 00 	lds	r18, 0x00E8
     f14:	2e 77       	andi	r18, 0x7E	; 126
     f16:	20 93 e8 00 	sts	0x00E8, r18
     f1a:	f4 cf       	rjmp	.-24     	; 0xf04 <Endpoint_Write_Control_Stream_LE+0x10>
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     f1c:	80 91 ff 01 	lds	r24, 0x01FF

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     f20:	88 23       	and	r24, r24
     f22:	09 f4       	brne	.+2      	; 0xf26 <Endpoint_Write_Control_Stream_LE+0x32>
     f24:	3f c0       	rjmp	.+126    	; 0xfa4 <Endpoint_Write_Control_Stream_LE+0xb0>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     f26:	85 30       	cpi	r24, 0x05	; 5
     f28:	c9 f1       	breq	.+114    	; 0xf9c <Endpoint_Write_Control_Stream_LE+0xa8>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     f2a:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
     f2e:	83 fd       	sbrc	r24, 3
     f30:	37 c0       	rjmp	.+110    	; 0xfa0 <Endpoint_Write_Control_Stream_LE+0xac>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     f32:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
     f36:	82 fd       	sbrc	r24, 2
     f38:	2b c0       	rjmp	.+86     	; 0xf90 <Endpoint_Write_Control_Stream_LE+0x9c>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     f3a:	80 91 e8 00 	lds	r24, 0x00E8
		  break;

		if (Endpoint_IsINReady())
     f3e:	80 ff       	sbrs	r24, 0
     f40:	1b c0       	rjmp	.+54     	; 0xf78 <Endpoint_Write_Control_Stream_LE+0x84>
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
     f42:	80 91 f2 00 	lds	r24, 0x00F2
     f46:	90 91 f3 00 	lds	r25, 0x00F3
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
     f4a:	06 c0       	rjmp	.+12     	; 0xf58 <Endpoint_Write_Control_Stream_LE+0x64>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
     f4c:	21 91       	ld	r18, Z+
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     f4e:	20 93 f1 00 	sts	0x00F1, r18
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
     f52:	61 50       	subi	r22, 0x01	; 1
     f54:	70 40       	sbci	r23, 0x00	; 0
				BytesInEndpoint++;
     f56:	01 96       	adiw	r24, 0x01	; 1

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
     f58:	61 15       	cp	r22, r1
     f5a:	71 05       	cpc	r23, r1
     f5c:	19 f0       	breq	.+6      	; 0xf64 <Endpoint_Write_Control_Stream_LE+0x70>
     f5e:	88 30       	cpi	r24, 0x08	; 8
     f60:	91 05       	cpc	r25, r1
     f62:	a0 f3       	brcs	.-24     	; 0xf4c <Endpoint_Write_Control_Stream_LE+0x58>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
     f64:	21 e0       	ldi	r18, 0x01	; 1
     f66:	88 30       	cpi	r24, 0x08	; 8
     f68:	91 05       	cpc	r25, r1
     f6a:	09 f0       	breq	.+2      	; 0xf6e <Endpoint_Write_Control_Stream_LE+0x7a>
     f6c:	20 e0       	ldi	r18, 0x00	; 0
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     f6e:	80 91 e8 00 	lds	r24, 0x00E8
     f72:	8e 77       	andi	r24, 0x7E	; 126
     f74:	80 93 e8 00 	sts	0x00E8, r24
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
     f78:	61 15       	cp	r22, r1
     f7a:	71 05       	cpc	r23, r1
     f7c:	79 f6       	brne	.-98     	; 0xf1c <Endpoint_Write_Control_Stream_LE+0x28>
     f7e:	22 23       	and	r18, r18
     f80:	69 f6       	brne	.-102    	; 0xf1c <Endpoint_Write_Control_Stream_LE+0x28>
     f82:	06 c0       	rjmp	.+12     	; 0xf90 <Endpoint_Write_Control_Stream_LE+0x9c>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     f84:	80 91 ff 01 	lds	r24, 0x01FF

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     f88:	88 23       	and	r24, r24
     f8a:	61 f0       	breq	.+24     	; 0xfa4 <Endpoint_Write_Control_Stream_LE+0xb0>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     f8c:	85 30       	cpi	r24, 0x05	; 5
     f8e:	61 f0       	breq	.+24     	; 0xfa8 <Endpoint_Write_Control_Stream_LE+0xb4>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     f90:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
     f94:	82 ff       	sbrs	r24, 2
     f96:	f6 cf       	rjmp	.-20     	; 0xf84 <Endpoint_Write_Control_Stream_LE+0x90>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
     f98:	80 e0       	ldi	r24, 0x00	; 0
     f9a:	08 95       	ret
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
     f9c:	83 e0       	ldi	r24, 0x03	; 3
     f9e:	08 95       	ret
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
     fa0:	81 e0       	ldi	r24, 0x01	; 1
     fa2:	08 95       	ret
	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
     fa4:	82 e0       	ldi	r24, 0x02	; 2
     fa6:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
     fa8:	83 e0       	ldi	r24, 0x03	; 3
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
     faa:	08 95       	ret

00000fac <Endpoint_Write_Control_PStream_LE>:
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
     fac:	20 91 06 02 	lds	r18, 0x0206
     fb0:	30 91 07 02 	lds	r19, 0x0207
     fb4:	26 17       	cp	r18, r22
     fb6:	37 07       	cpc	r19, r23
     fb8:	20 f4       	brcc	.+8      	; 0xfc2 <Endpoint_Write_Control_PStream_LE+0x16>
     fba:	b9 01       	movw	r22, r18
     fbc:	fc 01       	movw	r30, r24
     fbe:	20 e0       	ldi	r18, 0x00	; 0
     fc0:	38 c0       	rjmp	.+112    	; 0x1032 <Endpoint_Write_Control_PStream_LE+0x86>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
     fc2:	61 15       	cp	r22, r1
     fc4:	71 05       	cpc	r23, r1
     fc6:	d1 f7       	brne	.-12     	; 0xfbc <Endpoint_Write_Control_PStream_LE+0x10>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     fc8:	20 91 e8 00 	lds	r18, 0x00E8
     fcc:	2e 77       	andi	r18, 0x7E	; 126
     fce:	20 93 e8 00 	sts	0x00E8, r18
     fd2:	f4 cf       	rjmp	.-24     	; 0xfbc <Endpoint_Write_Control_PStream_LE+0x10>
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     fd4:	80 91 ff 01 	lds	r24, 0x01FF

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     fd8:	88 23       	and	r24, r24
     fda:	09 f4       	brne	.+2      	; 0xfde <Endpoint_Write_Control_PStream_LE+0x32>
     fdc:	40 c0       	rjmp	.+128    	; 0x105e <Endpoint_Write_Control_PStream_LE+0xb2>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     fde:	85 30       	cpi	r24, 0x05	; 5
     fe0:	d1 f1       	breq	.+116    	; 0x1056 <Endpoint_Write_Control_PStream_LE+0xaa>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     fe2:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
     fe6:	83 fd       	sbrc	r24, 3
     fe8:	38 c0       	rjmp	.+112    	; 0x105a <Endpoint_Write_Control_PStream_LE+0xae>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     fea:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
     fee:	82 fd       	sbrc	r24, 2
     ff0:	2c c0       	rjmp	.+88     	; 0x104a <Endpoint_Write_Control_PStream_LE+0x9e>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     ff2:	80 91 e8 00 	lds	r24, 0x00E8
		  break;

		if (Endpoint_IsINReady())
     ff6:	80 ff       	sbrs	r24, 0
     ff8:	1c c0       	rjmp	.+56     	; 0x1032 <Endpoint_Write_Control_PStream_LE+0x86>
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
     ffa:	80 91 f2 00 	lds	r24, 0x00F2
     ffe:	90 91 f3 00 	lds	r25, 0x00F3
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
    1002:	07 c0       	rjmp	.+14     	; 0x1012 <Endpoint_Write_Control_PStream_LE+0x66>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
    1004:	24 91       	lpm	r18, Z
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    1006:	20 93 f1 00 	sts	0x00F1, r18
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
    100a:	31 96       	adiw	r30, 0x01	; 1
				Length--;
    100c:	61 50       	subi	r22, 0x01	; 1
    100e:	70 40       	sbci	r23, 0x00	; 0
				BytesInEndpoint++;
    1010:	01 96       	adiw	r24, 0x01	; 1

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
    1012:	61 15       	cp	r22, r1
    1014:	71 05       	cpc	r23, r1
    1016:	19 f0       	breq	.+6      	; 0x101e <Endpoint_Write_Control_PStream_LE+0x72>
    1018:	88 30       	cpi	r24, 0x08	; 8
    101a:	91 05       	cpc	r25, r1
    101c:	98 f3       	brcs	.-26     	; 0x1004 <Endpoint_Write_Control_PStream_LE+0x58>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
    101e:	21 e0       	ldi	r18, 0x01	; 1
    1020:	88 30       	cpi	r24, 0x08	; 8
    1022:	91 05       	cpc	r25, r1
    1024:	09 f0       	breq	.+2      	; 0x1028 <Endpoint_Write_Control_PStream_LE+0x7c>
    1026:	20 e0       	ldi	r18, 0x00	; 0
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1028:	80 91 e8 00 	lds	r24, 0x00E8
    102c:	8e 77       	andi	r24, 0x7E	; 126
    102e:	80 93 e8 00 	sts	0x00E8, r24
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
    1032:	61 15       	cp	r22, r1
    1034:	71 05       	cpc	r23, r1
    1036:	71 f6       	brne	.-100    	; 0xfd4 <Endpoint_Write_Control_PStream_LE+0x28>
    1038:	22 23       	and	r18, r18
    103a:	61 f6       	brne	.-104    	; 0xfd4 <Endpoint_Write_Control_PStream_LE+0x28>
    103c:	06 c0       	rjmp	.+12     	; 0x104a <Endpoint_Write_Control_PStream_LE+0x9e>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    103e:	80 91 ff 01 	lds	r24, 0x01FF

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    1042:	88 23       	and	r24, r24
    1044:	61 f0       	breq	.+24     	; 0x105e <Endpoint_Write_Control_PStream_LE+0xb2>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    1046:	85 30       	cpi	r24, 0x05	; 5
    1048:	61 f0       	breq	.+24     	; 0x1062 <Endpoint_Write_Control_PStream_LE+0xb6>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    104a:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
    104e:	82 ff       	sbrs	r24, 2
    1050:	f6 cf       	rjmp	.-20     	; 0x103e <Endpoint_Write_Control_PStream_LE+0x92>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
    1052:	80 e0       	ldi	r24, 0x00	; 0
    1054:	08 95       	ret
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
    1056:	83 e0       	ldi	r24, 0x03	; 3
    1058:	08 95       	ret
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
    105a:	81 e0       	ldi	r24, 0x01	; 1
    105c:	08 95       	ret
	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
    105e:	82 e0       	ldi	r24, 0x02	; 2
    1060:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
    1062:	83 e0       	ldi	r24, 0x03	; 3
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
    1064:	08 95       	ret

00001066 <Endpoint_ConfigureEndpoint_Prv>:
	UECFG0X = UECFG0XData;
	UECFG1X = UECFG1XData;

	return Endpoint_IsConfigured();
#else
	for (uint8_t EPNum = Number; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
    1066:	98 2f       	mov	r25, r24
    1068:	2a c0       	rjmp	.+84     	; 0x10be <Endpoint_ConfigureEndpoint_Prv+0x58>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    106a:	90 93 e9 00 	sts	0x00E9, r25
		uint8_t UECFG1XTemp;
		uint8_t UEIENXTemp;

		Endpoint_SelectEndpoint(EPNum);

		if (EPNum == Number)
    106e:	98 17       	cp	r25, r24
    1070:	39 f0       	breq	.+14     	; 0x1080 <Endpoint_ConfigureEndpoint_Prv+0x1a>
			UECFG1XTemp = UECFG1XData;
			UEIENXTemp  = 0;
		}
		else
		{
			UECFG0XTemp = UECFG0X;
    1072:	70 91 ec 00 	lds	r23, 0x00EC
			UECFG1XTemp = UECFG1X;
    1076:	20 91 ed 00 	lds	r18, 0x00ED
			UEIENXTemp  = UEIENX;
    107a:	50 91 f0 00 	lds	r21, 0x00F0
    107e:	03 c0       	rjmp	.+6      	; 0x1086 <Endpoint_ConfigureEndpoint_Prv+0x20>
		Endpoint_SelectEndpoint(EPNum);

		if (EPNum == Number)
		{
			UECFG0XTemp = UECFG0XData;
			UECFG1XTemp = UECFG1XData;
    1080:	24 2f       	mov	r18, r20

		Endpoint_SelectEndpoint(EPNum);

		if (EPNum == Number)
		{
			UECFG0XTemp = UECFG0XData;
    1082:	76 2f       	mov	r23, r22
			UECFG1XTemp = UECFG1XData;
			UEIENXTemp  = 0;
    1084:	50 e0       	ldi	r21, 0x00	; 0
			UECFG0XTemp = UECFG0X;
			UECFG1XTemp = UECFG1X;
			UEIENXTemp  = UEIENX;
		}

		if (!(UECFG1XTemp & (1 << ALLOC)))
    1086:	21 ff       	sbrs	r18, 1
    1088:	19 c0       	rjmp	.+50     	; 0x10bc <Endpoint_ConfigureEndpoint_Prv+0x56>
			 *  to and from a host.
			 */
			static inline void Endpoint_DisableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_DisableEndpoint(void)
			{
				UECONX &= ~(1 << EPEN);
    108a:	30 91 eb 00 	lds	r19, 0x00EB
    108e:	3e 7f       	andi	r19, 0xFE	; 254
    1090:	30 93 eb 00 	sts	0x00EB, r19
		  continue;

		Endpoint_DisableEndpoint();
		UECFG1X &= ~(1 << ALLOC);
    1094:	30 91 ed 00 	lds	r19, 0x00ED
    1098:	3d 7f       	andi	r19, 0xFD	; 253
    109a:	30 93 ed 00 	sts	0x00ED, r19
			 *  \note Endpoints must first be configured properly via \ref Endpoint_ConfigureEndpoint().
			 */
			static inline void Endpoint_EnableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_EnableEndpoint(void)
			{
				UECONX |= (1 << EPEN);
    109e:	30 91 eb 00 	lds	r19, 0x00EB
    10a2:	31 60       	ori	r19, 0x01	; 1
    10a4:	30 93 eb 00 	sts	0x00EB, r19

		Endpoint_EnableEndpoint();
		UECFG0X = UECFG0XTemp;
    10a8:	70 93 ec 00 	sts	0x00EC, r23
		UECFG1X = UECFG1XTemp;
    10ac:	20 93 ed 00 	sts	0x00ED, r18
		UEIENX  = UEIENXTemp;
    10b0:	50 93 f0 00 	sts	0x00F0, r21
			 *  \return Boolean \c true if the currently selected endpoint has been configured, \c false otherwise.
			 */
			static inline bool Endpoint_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsConfigured(void)
			{
				return ((UESTA0X & (1 << CFGOK)) ? true : false);
    10b4:	20 91 ee 00 	lds	r18, 0x00EE

		if (!(Endpoint_IsConfigured()))
    10b8:	27 ff       	sbrs	r18, 7
    10ba:	08 c0       	rjmp	.+16     	; 0x10cc <Endpoint_ConfigureEndpoint_Prv+0x66>
	UECFG0X = UECFG0XData;
	UECFG1X = UECFG1XData;

	return Endpoint_IsConfigured();
#else
	for (uint8_t EPNum = Number; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
    10bc:	9f 5f       	subi	r25, 0xFF	; 255
    10be:	97 30       	cpi	r25, 0x07	; 7
    10c0:	a0 f2       	brcs	.-88     	; 0x106a <Endpoint_ConfigureEndpoint_Prv+0x4>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    10c2:	8f 70       	andi	r24, 0x0F	; 15
    10c4:	80 93 e9 00 	sts	0x00E9, r24
		if (!(Endpoint_IsConfigured()))
		  return false;
	}

	Endpoint_SelectEndpoint(Number);
	return true;
    10c8:	81 e0       	ldi	r24, 0x01	; 1
    10ca:	08 95       	ret
		UECFG0X = UECFG0XTemp;
		UECFG1X = UECFG1XTemp;
		UEIENX  = UEIENXTemp;

		if (!(Endpoint_IsConfigured()))
		  return false;
    10cc:	80 e0       	ldi	r24, 0x00	; 0
	}

	Endpoint_SelectEndpoint(Number);
	return true;
#endif
}
    10ce:	08 95       	ret

000010d0 <Endpoint_ConfigureEndpointTable>:
uint8_t USB_Device_ControlEndpointSize = ENDPOINT_CONTROLEP_DEFAULT_SIZE;
#endif

bool Endpoint_ConfigureEndpointTable(const USB_Endpoint_Table_t* const Table,
                                     const uint8_t Entries)
{
    10d0:	0f 93       	push	r16
    10d2:	1f 93       	push	r17
    10d4:	cf 93       	push	r28
    10d6:	df 93       	push	r29
    10d8:	16 2f       	mov	r17, r22
	{
		if (!(Table[i].Address))
		  continue;
	
		if (!(Endpoint_ConfigureEndpoint(Table[i].Address, Table[i].Type, Table[i].Size, Table[i].Banks)))
		  return false;
    10da:	ec 01       	movw	r28, r24
#endif

bool Endpoint_ConfigureEndpointTable(const USB_Endpoint_Table_t* const Table,
                                     const uint8_t Entries)
{
	for (uint8_t i = 0; i < Entries; i++)
    10dc:	00 e0       	ldi	r16, 0x00	; 0
    10de:	2a c0       	rjmp	.+84     	; 0x1134 <Endpoint_ConfigureEndpointTable+0x64>
	{
		if (!(Table[i].Address))
    10e0:	98 81       	ld	r25, Y
    10e2:	99 23       	and	r25, r25
    10e4:	29 f1       	breq	.+74     	; 0x1130 <Endpoint_ConfigureEndpointTable+0x60>
		  continue;
	
		if (!(Endpoint_ConfigureEndpoint(Table[i].Address, Table[i].Type, Table[i].Size, Table[i].Banks)))
    10e6:	6b 81       	ldd	r22, Y+3	; 0x03
    10e8:	e9 81       	ldd	r30, Y+1	; 0x01
    10ea:	fa 81       	ldd	r31, Y+2	; 0x02
    10ec:	2c 81       	ldd	r18, Y+4	; 0x04
			static inline bool Endpoint_ConfigureEndpoint(const uint8_t Address,
			                                              const uint8_t Type,
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);
    10ee:	89 2f       	mov	r24, r25
    10f0:	8f 70       	andi	r24, 0x0F	; 15

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
    10f2:	87 30       	cpi	r24, 0x07	; 7
    10f4:	18 f5       	brcc	.+70     	; 0x113c <Endpoint_ConfigureEndpointTable+0x6c>
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
				                                      ((Type << EPTYPE0) | ((Address & ENDPOINT_DIR_IN) ? (1 << EPDIR) : 0)),
    10f6:	62 95       	swap	r22
    10f8:	66 0f       	add	r22, r22
    10fa:	66 0f       	add	r22, r22
    10fc:	60 7c       	andi	r22, 0xC0	; 192
    10fe:	99 1f       	adc	r25, r25
    1100:	99 27       	eor	r25, r25
    1102:	99 1f       	adc	r25, r25
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
    1104:	69 2b       	or	r22, r25
    1106:	22 30       	cpi	r18, 0x02	; 2
    1108:	10 f0       	brcs	.+4      	; 0x110e <Endpoint_ConfigureEndpointTable+0x3e>
    110a:	96 e0       	ldi	r25, 0x06	; 6
    110c:	01 c0       	rjmp	.+2      	; 0x1110 <Endpoint_ConfigureEndpointTable+0x40>
    110e:	92 e0       	ldi	r25, 0x02	; 2
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes) ATTR_WARN_UNUSED_RESULT ATTR_CONST
			                                                                       ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;
    1110:	28 e0       	ldi	r18, 0x08	; 8
    1112:	30 e0       	ldi	r19, 0x00	; 0
		/* Inline Functions: */
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes) ATTR_WARN_UNUSED_RESULT ATTR_CONST
			                                                                       ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
    1114:	40 e0       	ldi	r20, 0x00	; 0
    1116:	03 c0       	rjmp	.+6      	; 0x111e <Endpoint_ConfigureEndpointTable+0x4e>
				uint16_t CheckBytes = 8;

				while (CheckBytes < Bytes)
				{
					MaskVal++;
    1118:	4f 5f       	subi	r20, 0xFF	; 255
					CheckBytes <<= 1;
    111a:	22 0f       	add	r18, r18
    111c:	33 1f       	adc	r19, r19
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while (CheckBytes < Bytes)
    111e:	2e 17       	cp	r18, r30
    1120:	3f 07       	cpc	r19, r31
    1122:	d0 f3       	brcs	.-12     	; 0x1118 <Endpoint_ConfigureEndpointTable+0x48>
				{
					MaskVal++;
					CheckBytes <<= 1;
				}

				return (MaskVal << EPSIZE0);
    1124:	42 95       	swap	r20
    1126:	40 7f       	andi	r20, 0xF0	; 240
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
    1128:	49 2b       	or	r20, r25
    112a:	9d df       	rcall	.-198    	; 0x1066 <Endpoint_ConfigureEndpoint_Prv>
    112c:	88 23       	and	r24, r24
    112e:	31 f0       	breq	.+12     	; 0x113c <Endpoint_ConfigureEndpointTable+0x6c>
    1130:	0f 5f       	subi	r16, 0xFF	; 255
#endif

bool Endpoint_ConfigureEndpointTable(const USB_Endpoint_Table_t* const Table,
                                     const uint8_t Entries)
{
	for (uint8_t i = 0; i < Entries; i++)
    1132:	25 96       	adiw	r28, 0x05	; 5
    1134:	01 17       	cp	r16, r17
    1136:	a1 f6       	brne	.-88     	; 0x10e0 <Endpoint_ConfigureEndpointTable+0x10>
    1138:	81 e0       	ldi	r24, 0x01	; 1
	
		if (!(Endpoint_ConfigureEndpoint(Table[i].Address, Table[i].Type, Table[i].Size, Table[i].Banks)))
		  return false;
	}
	
	return true;
    113a:	01 c0       	rjmp	.+2      	; 0x113e <Endpoint_ConfigureEndpointTable+0x6e>
    113c:	80 e0       	ldi	r24, 0x00	; 0
	{
		if (!(Table[i].Address))
		  continue;
	
		if (!(Endpoint_ConfigureEndpoint(Table[i].Address, Table[i].Type, Table[i].Size, Table[i].Banks)))
		  return false;
    113e:	df 91       	pop	r29
	}
	
	return true;
}
    1140:	cf 91       	pop	r28
    1142:	1f 91       	pop	r17
    1144:	0f 91       	pop	r16
    1146:	08 95       	ret

00001148 <Endpoint_ClearStatusStage>:
    1148:	80 91 00 02 	lds	r24, 0x0200
	}
}

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
    114c:	87 ff       	sbrs	r24, 7
    114e:	13 c0       	rjmp	.+38     	; 0x1176 <Endpoint_ClearStatusStage+0x2e>
    1150:	04 c0       	rjmp	.+8      	; 0x115a <Endpoint_ClearStatusStage+0x12>
	{
		while (!(Endpoint_IsOUTReceived()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
    1152:	80 91 ff 01 	lds	r24, 0x01FF
    1156:	88 23       	and	r24, r24
    1158:	b9 f0       	breq	.+46     	; 0x1188 <Endpoint_ClearStatusStage+0x40>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    115a:	80 91 e8 00 	lds	r24, 0x00E8

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
	{
		while (!(Endpoint_IsOUTReceived()))
    115e:	82 ff       	sbrs	r24, 2
    1160:	f8 cf       	rjmp	.-16     	; 0x1152 <Endpoint_ClearStatusStage+0xa>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    1162:	80 91 e8 00 	lds	r24, 0x00E8
    1166:	8b 77       	andi	r24, 0x7B	; 123
    1168:	80 93 e8 00 	sts	0x00E8, r24
    116c:	08 95       	ret
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
    116e:	80 91 ff 01 	lds	r24, 0x01FF
    1172:	88 23       	and	r24, r24
    1174:	49 f0       	breq	.+18     	; 0x1188 <Endpoint_ClearStatusStage+0x40>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1176:	80 91 e8 00 	lds	r24, 0x00E8

		Endpoint_ClearOUT();
	}
	else
	{
		while (!(Endpoint_IsINReady()))
    117a:	80 ff       	sbrs	r24, 0
    117c:	f8 cf       	rjmp	.-16     	; 0x116e <Endpoint_ClearStatusStage+0x26>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    117e:	80 91 e8 00 	lds	r24, 0x00E8
    1182:	8e 77       	andi	r24, 0x7E	; 126
    1184:	80 93 e8 00 	sts	0x00E8, r24
    1188:	08 95       	ret

0000118a <Endpoint_WaitUntilReady>:
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
    118a:	80 91 e4 00 	lds	r24, 0x00E4
    118e:	90 91 e5 00 	lds	r25, 0x00E5
    1192:	45 e6       	ldi	r20, 0x65	; 101
    1194:	01 c0       	rjmp	.+2      	; 0x1198 <Endpoint_WaitUntilReady+0xe>
    1196:	c9 01       	movw	r24, r18
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    1198:	20 91 ec 00 	lds	r18, 0x00EC
    119c:	20 ff       	sbrs	r18, 0
    119e:	23 c0       	rjmp	.+70     	; 0x11e6 <Endpoint_WaitUntilReady+0x5c>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    11a0:	20 91 e8 00 	lds	r18, 0x00E8

	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
    11a4:	20 fd       	sbrc	r18, 0
    11a6:	15 c0       	rjmp	.+42     	; 0x11d2 <Endpoint_WaitUntilReady+0x48>
		{
			if (Endpoint_IsOUTReceived())
			  return ENDPOINT_READYWAIT_NoError;
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    11a8:	20 91 ff 01 	lds	r18, 0x01FF

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    11ac:	22 23       	and	r18, r18
    11ae:	99 f0       	breq	.+38     	; 0x11d6 <Endpoint_WaitUntilReady+0x4c>
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    11b0:	25 30       	cpi	r18, 0x05	; 5
    11b2:	99 f0       	breq	.+38     	; 0x11da <Endpoint_WaitUntilReady+0x50>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    11b4:	20 91 eb 00 	lds	r18, 0x00EB
		  return ENDPOINT_READYWAIT_BusSuspended;
		else if (Endpoint_IsStalled())
    11b8:	25 fd       	sbrc	r18, 5
    11ba:	11 c0       	rjmp	.+34     	; 0x11de <Endpoint_WaitUntilReady+0x54>
    11bc:	20 91 e4 00 	lds	r18, 0x00E4
    11c0:	30 91 e5 00 	lds	r19, 0x00E5
		  return ENDPOINT_READYWAIT_EndpointStalled;

		uint16_t CurrentFrameNumber = USB_Device_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
    11c4:	28 17       	cp	r18, r24
    11c6:	39 07       	cpc	r19, r25
    11c8:	39 f3       	breq	.-50     	; 0x1198 <Endpoint_WaitUntilReady+0xe>
    11ca:	41 50       	subi	r20, 0x01	; 1
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
    11cc:	21 f7       	brne	.-56     	; 0x1196 <Endpoint_WaitUntilReady+0xc>
			  return ENDPOINT_READYWAIT_Timeout;
    11ce:	84 e0       	ldi	r24, 0x04	; 4
    11d0:	08 95       	ret
	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
    11d2:	80 e0       	ldi	r24, 0x00	; 0
    11d4:	08 95       	ret
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
    11d6:	82 e0       	ldi	r24, 0x02	; 2
    11d8:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_READYWAIT_BusSuspended;
    11da:	83 e0       	ldi	r24, 0x03	; 3
    11dc:	08 95       	ret
		else if (Endpoint_IsStalled())
		  return ENDPOINT_READYWAIT_EndpointStalled;
    11de:	81 e0       	ldi	r24, 0x01	; 1
    11e0:	08 95       	ret
			  return ENDPOINT_READYWAIT_NoError;
		}
		else
		{
			if (Endpoint_IsOUTReceived())
			  return ENDPOINT_READYWAIT_NoError;
    11e2:	80 e0       	ldi	r24, 0x00	; 0

			if (!(TimeoutMSRem--))
			  return ENDPOINT_READYWAIT_Timeout;
		}
	}
}
    11e4:	08 95       	ret
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    11e6:	20 91 e8 00 	lds	r18, 0x00E8
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
		}
		else
		{
			if (Endpoint_IsOUTReceived())
    11ea:	22 ff       	sbrs	r18, 2
    11ec:	dd cf       	rjmp	.-70     	; 0x11a8 <Endpoint_WaitUntilReady+0x1e>
    11ee:	f9 cf       	rjmp	.-14     	; 0x11e2 <Endpoint_WaitUntilReady+0x58>

000011f0 <USB_ResetInterface>:

	USB_IsInitialized = false;
}

void USB_ResetInterface(void)
{
    11f0:	0f 93       	push	r16
    11f2:	1f 93       	push	r17
    11f4:	cf 93       	push	r28
    11f6:	df 93       	push	r29
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
    11f8:	4e d0       	rcall	.+156    	; 0x1296 <USB_INT_DisableAllInterrupts>
    11fa:	55 d0       	rcall	.+170    	; 0x12a6 <USB_INT_ClearAllInterrupts>
	USB_INT_ClearAllInterrupts();
    11fc:	c8 ed       	ldi	r28, 0xD8	; 216
    11fe:	d0 e0       	ldi	r29, 0x00	; 0
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
    1200:	88 81       	ld	r24, Y
    1202:	8f 77       	andi	r24, 0x7F	; 127
    1204:	88 83       	st	Y, r24
    1206:	88 81       	ld	r24, Y
    1208:	80 68       	ori	r24, 0x80	; 128
				USBCON |=  (1 << USBE);
    120a:	88 83       	st	Y, r24
    120c:	88 81       	ld	r24, Y
    120e:	8f 7d       	andi	r24, 0xDF	; 223
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
    1210:	88 83       	st	Y, r24
    1212:	e7 ed       	ldi	r30, 0xD7	; 215
    1214:	f0 e0       	ldi	r31, 0x00	; 0

	if (USB_CurrentMode == USB_MODE_Device)
	{
		#if defined(USB_CAN_BE_DEVICE)
		#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
		UHWCON |=  (1 << UIMOD);
    1216:	80 81       	ld	r24, Z
    1218:	80 68       	ori	r24, 0x80	; 128
    121a:	80 83       	st	Z, r24
    121c:	19 bc       	out	0x29, r1	; 41
    121e:	10 92 ff 01 	sts	0x01FF, r1
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState                 = DEVICE_STATE_Unattached;
    1222:	10 92 fb 01 	sts	0x01FB, r1
	USB_Device_ConfigurationNumber  = 0;
    1226:	10 92 fd 01 	sts	0x01FD, r1

	#if !defined(NO_DEVICE_REMOTE_WAKEUP)
	USB_Device_RemoteWakeupEnabled  = false;
    122a:	10 92 fc 01 	sts	0x01FC, r1
	#endif

	#if !defined(NO_DEVICE_SELF_POWER)
	USB_Device_CurrentlySelfPowered = false;
    122e:	00 ee       	ldi	r16, 0xE0	; 224
    1230:	10 e0       	ldi	r17, 0x00	; 0
			}

			static inline void USB_Device_SetFullSpeed(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetFullSpeed(void)
			{
				UDCON &= ~(1 << LSM);
    1232:	f8 01       	movw	r30, r16
    1234:	80 81       	ld	r24, Z
    1236:	8b 7f       	andi	r24, 0xFB	; 251
    1238:	80 83       	st	Z, r24
    123a:	88 81       	ld	r24, Y
    123c:	81 60       	ori	r24, 0x01	; 1
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBCON |= (1 << VBUSTE);
    123e:	88 83       	st	Y, r24
    1240:	80 e0       	ldi	r24, 0x00	; 0
    1242:	60 e0       	ldi	r22, 0x00	; 0
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
    1244:	42 e0       	ldi	r20, 0x02	; 2
    1246:	0f df       	rcall	.-482    	; 0x1066 <Endpoint_ConfigureEndpoint_Prv>
    1248:	e1 ee       	ldi	r30, 0xE1	; 225
    124a:	f0 e0       	ldi	r31, 0x00	; 0
    124c:	80 81       	ld	r24, Z
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
    124e:	8e 7f       	andi	r24, 0xFE	; 254
    1250:	80 83       	st	Z, r24
    1252:	e2 ee       	ldi	r30, 0xE2	; 226
    1254:	f0 e0       	ldi	r31, 0x00	; 0
    1256:	80 81       	ld	r24, Z
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
    1258:	81 60       	ori	r24, 0x01	; 1
    125a:	80 83       	st	Z, r24
    125c:	80 81       	ld	r24, Z
    125e:	88 60       	ori	r24, 0x08	; 8
    1260:	80 83       	st	Z, r24
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
    1262:	f8 01       	movw	r30, r16
    1264:	80 81       	ld	r24, Z
    1266:	8e 7f       	andi	r24, 0xFE	; 254
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
    1268:	80 83       	st	Z, r24
    126a:	88 81       	ld	r24, Y
    126c:	80 61       	ori	r24, 0x10	; 16
    126e:	88 83       	st	Y, r24

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON |=  (1 << OTGPADE);
    1270:	df 91       	pop	r29
    1272:	cf 91       	pop	r28
    1274:	1f 91       	pop	r17
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
    1276:	0f 91       	pop	r16
    1278:	08 95       	ret

0000127a <USB_Init>:
    127a:	e8 ed       	ldi	r30, 0xD8	; 216
    127c:	f0 e0       	ldi	r31, 0x00	; 0
    127e:	80 81       	ld	r24, Z
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON &= ~(1 << OTGPADE);
    1280:	8f 7e       	andi	r24, 0xEF	; 239
    1282:	80 83       	st	Z, r24

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON |=  (1 << UVREGE);
    1284:	e7 ed       	ldi	r30, 0xD7	; 215
    1286:	f0 e0       	ldi	r31, 0x00	; 0
    1288:	80 81       	ld	r24, Z
    128a:	81 60       	ori	r24, 0x01	; 1
    128c:	80 83       	st	Z, r24
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
    128e:	81 e0       	ldi	r24, 0x01	; 1
    1290:	80 93 fe 01 	sts	0x01FE, r24

	USB_ResetInterface();
    1294:	ad cf       	rjmp	.-166    	; 0x11f0 <USB_ResetInterface>

00001296 <USB_INT_DisableAllInterrupts>:
#include "../USBInterrupt.h"

void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
    1296:	e8 ed       	ldi	r30, 0xD8	; 216
    1298:	f0 e0       	ldi	r31, 0x00	; 0
    129a:	80 81       	ld	r24, Z
    129c:	8c 7f       	andi	r24, 0xFC	; 252
    129e:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
    12a0:	10 92 e2 00 	sts	0x00E2, r1
	#endif
}
    12a4:	08 95       	ret

000012a6 <USB_INT_ClearAllInterrupts>:

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
    12a6:	10 92 da 00 	sts	0x00DA, r1
	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
    12aa:	10 92 e1 00 	sts	0x00E1, r1
	#endif
}
    12ae:	08 95       	ret

000012b0 <__vector_10>:

ISR(USB_GEN_vect, ISR_BLOCK)
{
    12b0:	1f 92       	push	r1
    12b2:	0f 92       	push	r0
    12b4:	0f b6       	in	r0, 0x3f	; 63
    12b6:	0f 92       	push	r0
    12b8:	0b b6       	in	r0, 0x3b	; 59
    12ba:	0f 92       	push	r0
    12bc:	11 24       	eor	r1, r1
    12be:	2f 93       	push	r18
    12c0:	3f 93       	push	r19
    12c2:	4f 93       	push	r20
    12c4:	5f 93       	push	r21
    12c6:	6f 93       	push	r22
    12c8:	7f 93       	push	r23
    12ca:	8f 93       	push	r24
    12cc:	9f 93       	push	r25
    12ce:	af 93       	push	r26
    12d0:	bf 93       	push	r27
    12d2:	ef 93       	push	r30
    12d4:	ff 93       	push	r31
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
					case USB_INT_SOFI:
						return (UDINT  & (1 << SOFI));
    12d6:	80 91 e1 00 	lds	r24, 0x00E1
	#if defined(USB_CAN_BE_DEVICE)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
    12da:	82 ff       	sbrs	r24, 2
    12dc:	0a c0       	rjmp	.+20     	; 0x12f2 <__vector_10+0x42>
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
					case USB_INT_SOFI:
						return (UDIEN  & (1 << SOFE));
    12de:	80 91 e2 00 	lds	r24, 0x00E2
    12e2:	82 ff       	sbrs	r24, 2
    12e4:	06 c0       	rjmp	.+12     	; 0x12f2 <__vector_10+0x42>
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
						break;
					case USB_INT_SOFI:
						UDINT  &= ~(1 << SOFI);
    12e6:	80 91 e1 00 	lds	r24, 0x00E1
    12ea:	8b 7f       	andi	r24, 0xFB	; 251
    12ec:	80 93 e1 00 	sts	0x00E1, r24
	{
		USB_INT_Clear(USB_INT_SOFI);

		EVENT_USB_Device_StartOfFrame();
    12f0:	56 d2       	rcall	.+1196   	; 0x179e <USB_Event_Stub>
    12f2:	80 91 da 00 	lds	r24, 0x00DA
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBINT & (1 << VBUSTI));
    12f6:	80 ff       	sbrs	r24, 0
	}
	#endif

	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	if (USB_INT_HasOccurred(USB_INT_VBUSTI) && USB_INT_IsEnabled(USB_INT_VBUSTI))
    12f8:	1f c0       	rjmp	.+62     	; 0x1338 <__vector_10+0x88>
    12fa:	80 91 d8 00 	lds	r24, 0x00D8
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBCON & (1 << VBUSTE));
    12fe:	80 ff       	sbrs	r24, 0
    1300:	1b c0       	rjmp	.+54     	; 0x1338 <__vector_10+0x88>
    1302:	80 91 da 00 	lds	r24, 0x00DA
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBINT &= ~(1 << VBUSTI);
    1306:	8e 7f       	andi	r24, 0xFE	; 254
    1308:	80 93 da 00 	sts	0x00DA, r24
    130c:	80 91 d9 00 	lds	r24, 0x00D9
				 *  \return Boolean \c true if the VBUS line is currently detecting power from a host, \c false otherwise.
				 */
				static inline bool USB_VBUS_GetStatus(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
				static inline bool USB_VBUS_GetStatus(void)
				{
					return ((USBSTA & (1 << VBUS)) ? true : false);
    1310:	80 ff       	sbrs	r24, 0
	{
		USB_INT_Clear(USB_INT_VBUSTI);

		if (USB_VBUS_GetStatus())
    1312:	0d c0       	rjmp	.+26     	; 0x132e <__vector_10+0x7e>
    1314:	8c e0       	ldi	r24, 0x0C	; 12

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
    1316:	89 bd       	out	0x29, r24	; 41
    1318:	8e e0       	ldi	r24, 0x0E	; 14
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    131a:	89 bd       	out	0x29, r24	; 41
    131c:	09 b4       	in	r0, 0x29	; 41
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			{
				USB_PLL_On();
				while (!(USB_PLL_IsReady()));
    131e:	00 fe       	sbrs	r0, 0
    1320:	fd cf       	rjmp	.-6      	; 0x131c <__vector_10+0x6c>
    1322:	81 e0       	ldi	r24, 0x01	; 1
			}

			USB_DeviceState = DEVICE_STATE_Powered;
    1324:	80 93 ff 01 	sts	0x01FF, r24
    1328:	0e 94 66 01 	call	0x2cc	; 0x2cc <EVENT_USB_Device_Connect>
			EVENT_USB_Device_Connect();
    132c:	05 c0       	rjmp	.+10     	; 0x1338 <__vector_10+0x88>
    132e:	19 bc       	out	0x29, r1	; 41
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    1330:	10 92 ff 01 	sts	0x01FF, r1
		else
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			  USB_PLL_Off();

			USB_DeviceState = DEVICE_STATE_Unattached;
    1334:	0e 94 68 01 	call	0x2d0	; 0x2d0 <EVENT_USB_Device_Disconnect>
			EVENT_USB_Device_Disconnect();
    1338:	80 91 e1 00 	lds	r24, 0x00E1
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
    133c:	80 ff       	sbrs	r24, 0
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
    133e:	18 c0       	rjmp	.+48     	; 0x1370 <__vector_10+0xc0>
    1340:	80 91 e2 00 	lds	r24, 0x00E2
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
    1344:	80 ff       	sbrs	r24, 0
    1346:	14 c0       	rjmp	.+40     	; 0x1370 <__vector_10+0xc0>
    1348:	80 91 e2 00 	lds	r24, 0x00E2
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
    134c:	8e 7f       	andi	r24, 0xFE	; 254
    134e:	80 93 e2 00 	sts	0x00E2, r24
    1352:	80 91 e2 00 	lds	r24, 0x00E2
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
    1356:	80 61       	ori	r24, 0x10	; 16
    1358:	80 93 e2 00 	sts	0x00E2, r24
    135c:	80 91 d8 00 	lds	r24, 0x00D8
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON |=  (1 << FRZCLK);
    1360:	80 62       	ori	r24, 0x20	; 32
    1362:	80 93 d8 00 	sts	0x00D8, r24
    1366:	19 bc       	out	0x29, r1	; 41
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    1368:	85 e0       	ldi	r24, 0x05	; 5

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
		EVENT_USB_Device_Disconnect();
		#else
		USB_DeviceState = DEVICE_STATE_Suspended;
    136a:	80 93 ff 01 	sts	0x01FF, r24
    136e:	17 d2       	rcall	.+1070   	; 0x179e <USB_Event_Stub>
		EVENT_USB_Device_Suspend();
    1370:	80 91 e1 00 	lds	r24, 0x00E1
					case USB_INT_IDTI:
						return (USBINT & (1 << IDTI));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
    1374:	84 ff       	sbrs	r24, 4
    1376:	2d c0       	rjmp	.+90     	; 0x13d2 <__vector_10+0x122>
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
    1378:	80 91 e2 00 	lds	r24, 0x00E2
					case USB_INT_IDTI:
						return (USBCON & (1 << IDTE));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
    137c:	84 ff       	sbrs	r24, 4
    137e:	29 c0       	rjmp	.+82     	; 0x13d2 <__vector_10+0x122>
    1380:	8c e0       	ldi	r24, 0x0C	; 12
    1382:	89 bd       	out	0x29, r24	; 41

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
    1384:	8e e0       	ldi	r24, 0x0E	; 14
    1386:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    1388:	09 b4       	in	r0, 0x29	; 41
    138a:	00 fe       	sbrs	r0, 0
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
    138c:	fd cf       	rjmp	.-6      	; 0x1388 <__vector_10+0xd8>
    138e:	80 91 d8 00 	lds	r24, 0x00D8
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
    1392:	8f 7d       	andi	r24, 0xDF	; 223
    1394:	80 93 d8 00 	sts	0x00D8, r24
    1398:	80 91 e1 00 	lds	r24, 0x00E1
						USBINT &= ~(1 << IDTI);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
    139c:	8f 7e       	andi	r24, 0xEF	; 239
    139e:	80 93 e1 00 	sts	0x00E1, r24
    13a2:	80 91 e2 00 	lds	r24, 0x00E2
						USBCON &= ~(1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
    13a6:	8f 7e       	andi	r24, 0xEF	; 239
    13a8:	80 93 e2 00 	sts	0x00E2, r24
    13ac:	80 91 e2 00 	lds	r24, 0x00E2
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
    13b0:	81 60       	ori	r24, 0x01	; 1
    13b2:	80 93 e2 00 	sts	0x00E2, r24
    13b6:	80 91 fb 01 	lds	r24, 0x01FB
		USB_INT_Clear(USB_INT_WAKEUPI);

		USB_INT_Disable(USB_INT_WAKEUPI);
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_Device_ConfigurationNumber)
    13ba:	88 23       	and	r24, r24
    13bc:	21 f4       	brne	.+8      	; 0x13c6 <__vector_10+0x116>
    13be:	80 91 e3 00 	lds	r24, 0x00E3
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
    13c2:	87 ff       	sbrs	r24, 7
    13c4:	02 c0       	rjmp	.+4      	; 0x13ca <__vector_10+0x11a>
		  USB_DeviceState = DEVICE_STATE_Configured;
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
    13c6:	84 e0       	ldi	r24, 0x04	; 4
    13c8:	01 c0       	rjmp	.+2      	; 0x13cc <__vector_10+0x11c>
    13ca:	81 e0       	ldi	r24, 0x01	; 1
    13cc:	80 93 ff 01 	sts	0x01FF, r24
    13d0:	e6 d1       	rcall	.+972    	; 0x179e <USB_Event_Stub>
    13d2:	80 91 e1 00 	lds	r24, 0x00E1

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
		#else
		EVENT_USB_Device_WakeUp();
    13d6:	83 ff       	sbrs	r24, 3
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
    13d8:	27 c0       	rjmp	.+78     	; 0x1428 <__vector_10+0x178>
    13da:	80 91 e2 00 	lds	r24, 0x00E2
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
    13de:	83 ff       	sbrs	r24, 3
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
    13e0:	23 c0       	rjmp	.+70     	; 0x1428 <__vector_10+0x178>
    13e2:	80 91 e1 00 	lds	r24, 0x00E1
    13e6:	87 7f       	andi	r24, 0xF7	; 247
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
    13e8:	80 93 e1 00 	sts	0x00E1, r24
    13ec:	82 e0       	ldi	r24, 0x02	; 2
    13ee:	80 93 ff 01 	sts	0x01FF, r24
	{
		USB_INT_Clear(USB_INT_EORSTI);

		USB_DeviceState                = DEVICE_STATE_Default;
    13f2:	10 92 fb 01 	sts	0x01FB, r1
    13f6:	80 91 e1 00 	lds	r24, 0x00E1
		USB_Device_ConfigurationNumber = 0;
    13fa:	8e 7f       	andi	r24, 0xFE	; 254
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
    13fc:	80 93 e1 00 	sts	0x00E1, r24
    1400:	80 91 e2 00 	lds	r24, 0x00E2
    1404:	8e 7f       	andi	r24, 0xFE	; 254
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
    1406:	80 93 e2 00 	sts	0x00E2, r24
    140a:	80 91 e2 00 	lds	r24, 0x00E2
    140e:	80 61       	ori	r24, 0x10	; 16
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
    1410:	80 93 e2 00 	sts	0x00E2, r24
    1414:	80 e0       	ldi	r24, 0x00	; 0
    1416:	60 e0       	ldi	r22, 0x00	; 0
    1418:	42 e0       	ldi	r20, 0x02	; 2
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
    141a:	25 de       	rcall	.-950    	; 0x1066 <Endpoint_ConfigureEndpoint_Prv>
    141c:	80 91 f0 00 	lds	r24, 0x00F0
    1420:	88 60       	ori	r24, 0x08	; 8
    1422:	80 93 f0 00 	sts	0x00F0, r24
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX |= (1 << RXSTPE);
    1426:	bb d1       	rcall	.+886    	; 0x179e <USB_Event_Stub>
    1428:	ff 91       	pop	r31
    142a:	ef 91       	pop	r30
    142c:	bf 91       	pop	r27

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
    142e:	af 91       	pop	r26
    1430:	9f 91       	pop	r25
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
    1432:	8f 91       	pop	r24
    1434:	7f 91       	pop	r23
    1436:	6f 91       	pop	r22
    1438:	5f 91       	pop	r21
    143a:	4f 91       	pop	r20
    143c:	3f 91       	pop	r19
    143e:	2f 91       	pop	r18
    1440:	0f 90       	pop	r0
    1442:	0b be       	out	0x3b, r0	; 59
    1444:	0f 90       	pop	r0
    1446:	0f be       	out	0x3f, r0	; 63
    1448:	0f 90       	pop	r0
    144a:	1f 90       	pop	r1
    144c:	18 95       	reti

0000144e <__vector_11>:
    144e:	1f 92       	push	r1
    1450:	0f 92       	push	r0
    1452:	0f b6       	in	r0, 0x3f	; 63
    1454:	0f 92       	push	r0
    1456:	0b b6       	in	r0, 0x3b	; 59

#if defined(INTERRUPT_CONTROL_ENDPOINT) && defined(USB_CAN_BE_DEVICE)
ISR(USB_COM_vect, ISR_BLOCK)
{
    1458:	0f 92       	push	r0
    145a:	11 24       	eor	r1, r1
    145c:	2f 93       	push	r18
    145e:	3f 93       	push	r19
    1460:	4f 93       	push	r20
    1462:	5f 93       	push	r21
    1464:	6f 93       	push	r22
    1466:	7f 93       	push	r23
    1468:	8f 93       	push	r24
    146a:	9f 93       	push	r25
    146c:	af 93       	push	r26
    146e:	bf 93       	push	r27
    1470:	cf 93       	push	r28
    1472:	ef 93       	push	r30
    1474:	ff 93       	push	r31
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    1476:	c0 91 e9 00 	lds	r28, 0x00E9
    147a:	cf 70       	andi	r28, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    147c:	80 91 ec 00 	lds	r24, 0x00EC
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1480:	10 92 e9 00 	sts	0x00E9, r1
						break;
					case USB_INT_SOFI:
						UDIEN  &= ~(1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX &= ~(1 << RXSTPE);
    1484:	80 91 f0 00 	lds	r24, 0x00F0
    1488:	87 7f       	andi	r24, 0xF7	; 247
    148a:	80 93 f0 00 	sts	0x00F0, r24
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				sei();
    148e:	78 94       	sei
	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Disable(USB_INT_RXSTPI);

	GlobalInterruptEnable();

	USB_Device_ProcessControlRequest();
    1490:	1d d0       	rcall	.+58     	; 0x14cc <USB_Device_ProcessControlRequest>
    1492:	10 92 e9 00 	sts	0x00E9, r1
    1496:	80 91 f0 00 	lds	r24, 0x00F0
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX |= (1 << RXSTPE);
    149a:	88 60       	ori	r24, 0x08	; 8
    149c:	80 93 f0 00 	sts	0x00F0, r24
    14a0:	c0 93 e9 00 	sts	0x00E9, r28
    14a4:	ff 91       	pop	r31

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Enable(USB_INT_RXSTPI);
	Endpoint_SelectEndpoint(PrevSelectedEndpoint);
}
    14a6:	ef 91       	pop	r30
    14a8:	cf 91       	pop	r28
    14aa:	bf 91       	pop	r27
    14ac:	af 91       	pop	r26
    14ae:	9f 91       	pop	r25
    14b0:	8f 91       	pop	r24
    14b2:	7f 91       	pop	r23
    14b4:	6f 91       	pop	r22
    14b6:	5f 91       	pop	r21
    14b8:	4f 91       	pop	r20
    14ba:	3f 91       	pop	r19
    14bc:	2f 91       	pop	r18
    14be:	0f 90       	pop	r0
    14c0:	0b be       	out	0x3b, r0	; 59
    14c2:	0f 90       	pop	r0
    14c4:	0f be       	out	0x3f, r0	; 63
    14c6:	0f 90       	pop	r0
    14c8:	1f 90       	pop	r1
    14ca:	18 95       	reti

000014cc <USB_Device_ProcessControlRequest>:
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_Device_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
    14cc:	1f 93       	push	r17
    14ce:	cf 93       	push	r28
    14d0:	df 93       	push	r29
    14d2:	cd b7       	in	r28, 0x3d	; 61
    14d4:	de b7       	in	r29, 0x3e	; 62
    14d6:	ac 97       	sbiw	r28, 0x2c	; 44
    14d8:	0f b6       	in	r0, 0x3f	; 63
    14da:	f8 94       	cli
    14dc:	de bf       	out	0x3e, r29	; 62
    14de:	0f be       	out	0x3f, r0	; 63
    14e0:	cd bf       	out	0x3d, r28	; 61
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
    14e2:	80 e0       	ldi	r24, 0x00	; 0
	USB_ControlRequest.bRequest      = Endpoint_Read_8();
	USB_ControlRequest.wValue        = Endpoint_Read_16_LE();
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;
    14e4:	e0 e0       	ldi	r30, 0x00	; 0
    14e6:	f2 e0       	ldi	r31, 0x02	; 2
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    14e8:	90 91 f1 00 	lds	r25, 0x00F1

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_8();
    14ec:	91 93       	st	Z+, r25
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
    14ee:	8f 5f       	subi	r24, 0xFF	; 255
    14f0:	88 30       	cpi	r24, 0x08	; 8
    14f2:	d1 f7       	brne	.-12     	; 0x14e8 <USB_Device_ProcessControlRequest+0x1c>
	  *(RequestHeader++) = Endpoint_Read_8();
	#endif

	EVENT_USB_Device_ControlRequest();
    14f4:	0e 94 83 01 	call	0x306	; 0x306 <EVENT_USB_Device_ControlRequest>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    14f8:	80 91 e8 00 	lds	r24, 0x00E8

	if (Endpoint_IsSETUPReceived())
    14fc:	83 ff       	sbrs	r24, 3
    14fe:	37 c1       	rjmp	.+622    	; 0x176e <USB_Device_ProcessControlRequest+0x2a2>
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
    1500:	80 91 00 02 	lds	r24, 0x0200

		switch (USB_ControlRequest.bRequest)
    1504:	20 91 01 02 	lds	r18, 0x0201
    1508:	25 30       	cpi	r18, 0x05	; 5
    150a:	09 f4       	brne	.+2      	; 0x150e <USB_Device_ProcessControlRequest+0x42>
    150c:	84 c0       	rjmp	.+264    	; 0x1616 <USB_Device_ProcessControlRequest+0x14a>
    150e:	26 30       	cpi	r18, 0x06	; 6
    1510:	40 f4       	brcc	.+16     	; 0x1522 <USB_Device_ProcessControlRequest+0x56>
    1512:	21 30       	cpi	r18, 0x01	; 1
    1514:	a1 f1       	breq	.+104    	; 0x157e <USB_Device_ProcessControlRequest+0xb2>
    1516:	21 30       	cpi	r18, 0x01	; 1
    1518:	70 f0       	brcs	.+28     	; 0x1536 <USB_Device_ProcessControlRequest+0x6a>
    151a:	23 30       	cpi	r18, 0x03	; 3
    151c:	09 f0       	breq	.+2      	; 0x1520 <USB_Device_ProcessControlRequest+0x54>
    151e:	27 c1       	rjmp	.+590    	; 0x176e <USB_Device_ProcessControlRequest+0x2a2>
    1520:	2e c0       	rjmp	.+92     	; 0x157e <USB_Device_ProcessControlRequest+0xb2>
    1522:	28 30       	cpi	r18, 0x08	; 8
    1524:	09 f4       	brne	.+2      	; 0x1528 <USB_Device_ProcessControlRequest+0x5c>
    1526:	f4 c0       	rjmp	.+488    	; 0x1710 <USB_Device_ProcessControlRequest+0x244>
    1528:	29 30       	cpi	r18, 0x09	; 9
    152a:	09 f4       	brne	.+2      	; 0x152e <USB_Device_ProcessControlRequest+0x62>
    152c:	03 c1       	rjmp	.+518    	; 0x1734 <USB_Device_ProcessControlRequest+0x268>
    152e:	26 30       	cpi	r18, 0x06	; 6
    1530:	09 f0       	breq	.+2      	; 0x1534 <USB_Device_ProcessControlRequest+0x68>
    1532:	1d c1       	rjmp	.+570    	; 0x176e <USB_Device_ProcessControlRequest+0x2a2>
    1534:	93 c0       	rjmp	.+294    	; 0x165c <USB_Device_ProcessControlRequest+0x190>
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    1536:	80 38       	cpi	r24, 0x80	; 128
    1538:	21 f0       	breq	.+8      	; 0x1542 <USB_Device_ProcessControlRequest+0x76>
    153a:	82 38       	cpi	r24, 0x82	; 130
    153c:	09 f0       	breq	.+2      	; 0x1540 <USB_Device_ProcessControlRequest+0x74>
    153e:	17 c1       	rjmp	.+558    	; 0x176e <USB_Device_ProcessControlRequest+0x2a2>
    1540:	08 c0       	rjmp	.+16     	; 0x1552 <USB_Device_ProcessControlRequest+0x86>
	Endpoint_ClearOUT();
}

static void USB_Device_GetStatus(void)
{
	uint8_t CurrentStatus = 0;
    1542:	80 91 fc 01 	lds	r24, 0x01FC
			if (USB_Device_CurrentlySelfPowered)
			  CurrentStatus |= FEATURE_SELFPOWERED_ENABLED;
			#endif

			#if !defined(NO_DEVICE_REMOTE_WAKEUP)
			if (USB_Device_RemoteWakeupEnabled)
    1546:	90 91 fd 01 	lds	r25, 0x01FD
    154a:	99 23       	and	r25, r25
    154c:	71 f0       	breq	.+28     	; 0x156a <USB_Device_ProcessControlRequest+0x9e>
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
    154e:	82 60       	ori	r24, 0x02	; 2
    1550:	0c c0       	rjmp	.+24     	; 0x156a <USB_Device_ProcessControlRequest+0x9e>
			#endif
			break;
		case (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_ENDPOINT):
			#if !defined(CONTROL_ONLY_DEVICE)
			Endpoint_SelectEndpoint((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
    1552:	80 91 04 02 	lds	r24, 0x0204
    1556:	8f 70       	andi	r24, 0x0F	; 15
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1558:	80 93 e9 00 	sts	0x00E9, r24
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    155c:	90 91 eb 00 	lds	r25, 0x00EB

			CurrentStatus = Endpoint_IsStalled();
    1560:	81 e0       	ldi	r24, 0x01	; 1
    1562:	95 ff       	sbrs	r25, 5
    1564:	80 e0       	ldi	r24, 0x00	; 0
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1566:	10 92 e9 00 	sts	0x00E9, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    156a:	90 91 e8 00 	lds	r25, 0x00E8
    156e:	97 7f       	andi	r25, 0xF7	; 247
    1570:	90 93 e8 00 	sts	0x00E8, r25
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
    1574:	80 93 f1 00 	sts	0x00F1, r24
				UEDATX = (Data >> 8);
    1578:	10 92 f1 00 	sts	0x00F1, r1
    157c:	d4 c0       	rjmp	.+424    	; 0x1726 <USB_Device_ProcessControlRequest+0x25a>
				}

				break;
			case REQ_ClearFeature:
			case REQ_SetFeature:
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    157e:	88 23       	and	r24, r24
    1580:	19 f0       	breq	.+6      	; 0x1588 <USB_Device_ProcessControlRequest+0xbc>
    1582:	82 30       	cpi	r24, 0x02	; 2
    1584:	09 f0       	breq	.+2      	; 0x1588 <USB_Device_ProcessControlRequest+0xbc>
    1586:	f3 c0       	rjmp	.+486    	; 0x176e <USB_Device_ProcessControlRequest+0x2a2>
	Endpoint_ClearStatusStage();
}

static void USB_Device_ClearSetFeature(void)
{
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
    1588:	90 e0       	ldi	r25, 0x00	; 0
    158a:	8f 71       	andi	r24, 0x1F	; 31
    158c:	90 70       	andi	r25, 0x00	; 0
    158e:	00 97       	sbiw	r24, 0x00	; 0
    1590:	29 f0       	breq	.+10     	; 0x159c <USB_Device_ProcessControlRequest+0xd0>
    1592:	82 30       	cpi	r24, 0x02	; 2
    1594:	91 05       	cpc	r25, r1
    1596:	09 f0       	breq	.+2      	; 0x159a <USB_Device_ProcessControlRequest+0xce>
    1598:	ea c0       	rjmp	.+468    	; 0x176e <USB_Device_ProcessControlRequest+0x2a2>
    159a:	0b c0       	rjmp	.+22     	; 0x15b2 <USB_Device_ProcessControlRequest+0xe6>
	{
		#if !defined(NO_DEVICE_REMOTE_WAKEUP)
		case REQREC_DEVICE:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
    159c:	80 91 02 02 	lds	r24, 0x0202
    15a0:	81 30       	cpi	r24, 0x01	; 1
    15a2:	09 f0       	breq	.+2      	; 0x15a6 <USB_Device_ProcessControlRequest+0xda>
    15a4:	e4 c0       	rjmp	.+456    	; 0x176e <USB_Device_ProcessControlRequest+0x2a2>
			  USB_Device_RemoteWakeupEnabled = (USB_ControlRequest.bRequest == REQ_SetFeature);
    15a6:	23 30       	cpi	r18, 0x03	; 3
    15a8:	09 f0       	breq	.+2      	; 0x15ac <USB_Device_ProcessControlRequest+0xe0>
    15aa:	80 e0       	ldi	r24, 0x00	; 0
    15ac:	80 93 fd 01 	sts	0x01FD, r24
    15b0:	2c c0       	rjmp	.+88     	; 0x160a <USB_Device_ProcessControlRequest+0x13e>

			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
    15b2:	80 91 02 02 	lds	r24, 0x0202
    15b6:	88 23       	and	r24, r24
    15b8:	41 f5       	brne	.+80     	; 0x160a <USB_Device_ProcessControlRequest+0x13e>
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
    15ba:	20 91 04 02 	lds	r18, 0x0204
    15be:	2f 70       	andi	r18, 0x0F	; 15

				if (EndpointIndex == ENDPOINT_CONTROLEP)
    15c0:	09 f4       	brne	.+2      	; 0x15c4 <USB_Device_ProcessControlRequest+0xf8>
    15c2:	d5 c0       	rjmp	.+426    	; 0x176e <USB_Device_ProcessControlRequest+0x2a2>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    15c4:	20 93 e9 00 	sts	0x00E9, r18
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
    15c8:	80 91 eb 00 	lds	r24, 0x00EB
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
    15cc:	80 ff       	sbrs	r24, 0
    15ce:	1d c0       	rjmp	.+58     	; 0x160a <USB_Device_ProcessControlRequest+0x13e>
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
    15d0:	80 91 01 02 	lds	r24, 0x0201
    15d4:	83 30       	cpi	r24, 0x03	; 3
    15d6:	21 f4       	brne	.+8      	; 0x15e0 <USB_Device_ProcessControlRequest+0x114>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    15d8:	80 91 eb 00 	lds	r24, 0x00EB
    15dc:	80 62       	ori	r24, 0x20	; 32
    15de:	13 c0       	rjmp	.+38     	; 0x1606 <USB_Device_ProcessControlRequest+0x13a>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
    15e0:	80 91 eb 00 	lds	r24, 0x00EB
    15e4:	80 61       	ori	r24, 0x10	; 16
    15e6:	80 93 eb 00 	sts	0x00EB, r24
			 *  \param[in] Address  Endpoint address whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t Address)
			{
				UERST = (1 << (Address & ENDPOINT_EPNUM_MASK));
    15ea:	81 e0       	ldi	r24, 0x01	; 1
    15ec:	90 e0       	ldi	r25, 0x00	; 0
    15ee:	02 c0       	rjmp	.+4      	; 0x15f4 <USB_Device_ProcessControlRequest+0x128>
    15f0:	88 0f       	add	r24, r24
    15f2:	99 1f       	adc	r25, r25
    15f4:	2a 95       	dec	r18
    15f6:	e2 f7       	brpl	.-8      	; 0x15f0 <USB_Device_ProcessControlRequest+0x124>
    15f8:	80 93 ea 00 	sts	0x00EA, r24
				UERST = 0;
    15fc:	10 92 ea 00 	sts	0x00EA, r1

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
    1600:	80 91 eb 00 	lds	r24, 0x00EB
    1604:	88 60       	ori	r24, 0x08	; 8
    1606:	80 93 eb 00 	sts	0x00EB, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    160a:	10 92 e9 00 	sts	0x00E9, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    160e:	80 91 e8 00 	lds	r24, 0x00E8
    1612:	87 7f       	andi	r24, 0xF7	; 247
    1614:	8b c0       	rjmp	.+278    	; 0x172c <USB_Device_ProcessControlRequest+0x260>
					USB_Device_ClearSetFeature();
				}

				break;
			case REQ_SetAddress:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    1616:	88 23       	and	r24, r24
    1618:	09 f0       	breq	.+2      	; 0x161c <USB_Device_ProcessControlRequest+0x150>
    161a:	a9 c0       	rjmp	.+338    	; 0x176e <USB_Device_ProcessControlRequest+0x2a2>
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t DeviceAddress = (USB_ControlRequest.wValue & 0x7F);
    161c:	10 91 02 02 	lds	r17, 0x0202
    1620:	1f 77       	andi	r17, 0x7F	; 127
			#endif

			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				UDADDR = (UDADDR & (1 << ADDEN)) | (Address & 0x7F);
    1622:	80 91 e3 00 	lds	r24, 0x00E3
    1626:	80 78       	andi	r24, 0x80	; 128
    1628:	81 2b       	or	r24, r17
    162a:	80 93 e3 00 	sts	0x00E3, r24
    162e:	80 91 e8 00 	lds	r24, 0x00E8
    1632:	87 7f       	andi	r24, 0xF7	; 247
    1634:	80 93 e8 00 	sts	0x00E8, r24

	USB_Device_SetDeviceAddress(DeviceAddress);

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
    1638:	87 dd       	rcall	.-1266   	; 0x1148 <Endpoint_ClearStatusStage>
    163a:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    163e:	80 ff       	sbrs	r24, 0

	while (!(Endpoint_IsINReady()));
    1640:	fc cf       	rjmp	.-8      	; 0x163a <USB_Device_ProcessControlRequest+0x16e>
    1642:	80 91 e3 00 	lds	r24, 0x00E3
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address)
			{
				(void)Address;
				
				UDADDR |= (1 << ADDEN);
    1646:	80 68       	ori	r24, 0x80	; 128
    1648:	80 93 e3 00 	sts	0x00E3, r24
    164c:	11 23       	and	r17, r17

	USB_Device_EnableDeviceAddress(DeviceAddress);

	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
    164e:	11 f0       	breq	.+4      	; 0x1654 <USB_Device_ProcessControlRequest+0x188>
    1650:	83 e0       	ldi	r24, 0x03	; 3
    1652:	01 c0       	rjmp	.+2      	; 0x1656 <USB_Device_ProcessControlRequest+0x18a>
    1654:	82 e0       	ldi	r24, 0x02	; 2
    1656:	80 93 ff 01 	sts	0x01FF, r24
    165a:	89 c0       	rjmp	.+274    	; 0x176e <USB_Device_ProcessControlRequest+0x2a2>
    165c:	80 58       	subi	r24, 0x80	; 128
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_SetAddress();

				break;
			case REQ_GetDescriptor:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    165e:	82 30       	cpi	r24, 0x02	; 2
    1660:	08 f0       	brcs	.+2      	; 0x1664 <USB_Device_ProcessControlRequest+0x198>
    1662:	85 c0       	rjmp	.+266    	; 0x176e <USB_Device_ProcessControlRequest+0x2a2>
    1664:	80 91 02 02 	lds	r24, 0x0202
	    !(defined(USE_FLASH_DESCRIPTORS) || defined(USE_EEPROM_DESCRIPTORS) || defined(USE_RAM_DESCRIPTORS))
	uint8_t DescriptorAddressSpace;
	#endif

	#if !defined(NO_INTERNAL_SERIAL) && (USE_INTERNAL_SERIAL != NO_DESCRIPTOR)
	if (USB_ControlRequest.wValue == ((DTYPE_String << 8) | USE_INTERNAL_SERIAL))
    1668:	90 91 03 02 	lds	r25, 0x0203
    166c:	23 e0       	ldi	r18, 0x03	; 3
    166e:	8c 3d       	cpi	r24, 0xDC	; 220
    1670:	92 07       	cpc	r25, r18
    1672:	a9 f5       	brne	.+106    	; 0x16de <USB_Device_ProcessControlRequest+0x212>
    1674:	83 e0       	ldi	r24, 0x03	; 3
	{
		USB_Descriptor_Header_t Header;
		uint16_t                UnicodeString[INTERNAL_SERIAL_LENGTH_BITS / 4];
	} SignatureDescriptor;

	SignatureDescriptor.Header.Type = DTYPE_String;
    1676:	8c 83       	std	Y+4, r24	; 0x04
    1678:	8a e2       	ldi	r24, 0x2A	; 42
	SignatureDescriptor.Header.Size = USB_STRING_LEN(INTERNAL_SERIAL_LENGTH_BITS / 4);
    167a:	8b 83       	std	Y+3, r24	; 0x03
    167c:	5f b7       	in	r21, 0x3f	; 63
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
    167e:	f8 94       	cli
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
    1680:	de 01       	movw	r26, r28
				__builtin_ssrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				cli();
				#endif

				GCC_MEMORY_BARRIER();
    1682:	13 96       	adiw	r26, 0x03	; 3
    1684:	80 e0       	ldi	r24, 0x00	; 0
    1686:	90 e0       	ldi	r25, 0x00	; 0
    1688:	4e e0       	ldi	r20, 0x0E	; 14
			static inline void USB_Device_GetSerialString(uint16_t* const UnicodeString)
			{
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;
    168a:	61 e2       	ldi	r22, 0x21	; 33

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
				{
					uint8_t SerialByte = boot_signature_byte_get(SigReadAddress);
    168c:	e4 2f       	mov	r30, r20
    168e:	f0 e0       	ldi	r31, 0x00	; 0
    1690:	60 93 57 00 	sts	0x0057, r22
    1694:	e4 91       	lpm	r30, Z
    1696:	80 ff       	sbrs	r24, 0

					if (SerialCharNum & 0x01)
    1698:	03 c0       	rjmp	.+6      	; 0x16a0 <USB_Device_ProcessControlRequest+0x1d4>
    169a:	e2 95       	swap	r30
					{
						SerialByte >>= 4;
    169c:	ef 70       	andi	r30, 0x0F	; 15
    169e:	4f 5f       	subi	r20, 0xFF	; 255
						SigReadAddress++;
    16a0:	ef 70       	andi	r30, 0x0F	; 15
					}

					SerialByte &= 0x0F;
    16a2:	2e 2f       	mov	r18, r30
    16a4:	30 e0       	ldi	r19, 0x00	; 0
    16a6:	ea 30       	cpi	r30, 0x0A	; 10

					UnicodeString[SerialCharNum] = cpu_to_le16((SerialByte >= 10) ?
    16a8:	18 f0       	brcs	.+6      	; 0x16b0 <USB_Device_ProcessControlRequest+0x1e4>
    16aa:	29 5c       	subi	r18, 0xC9	; 201
    16ac:	3f 4f       	sbci	r19, 0xFF	; 255
    16ae:	02 c0       	rjmp	.+4      	; 0x16b4 <USB_Device_ProcessControlRequest+0x1e8>
    16b0:	20 5d       	subi	r18, 0xD0	; 208
    16b2:	3f 4f       	sbci	r19, 0xFF	; 255
    16b4:	13 96       	adiw	r26, 0x03	; 3
    16b6:	3c 93       	st	X, r19
    16b8:	2e 93       	st	-X, r18
    16ba:	12 97       	sbiw	r26, 0x02	; 2
    16bc:	01 96       	adiw	r24, 0x01	; 1
    16be:	12 96       	adiw	r26, 0x02	; 2
    16c0:	84 31       	cpi	r24, 0x14	; 20
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
    16c2:	91 05       	cpc	r25, r1
    16c4:	19 f7       	brne	.-58     	; 0x168c <USB_Device_ProcessControlRequest+0x1c0>
    16c6:	5f bf       	out	0x3f, r21	; 63
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
    16c8:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    16cc:	87 7f       	andi	r24, 0xF7	; 247
    16ce:	80 93 e8 00 	sts	0x00E8, r24
    16d2:	ce 01       	movw	r24, r28

	USB_Device_GetSerialString(SignatureDescriptor.UnicodeString);

	Endpoint_ClearSETUP();

	Endpoint_Write_Control_Stream_LE(&SignatureDescriptor, sizeof(SignatureDescriptor));
    16d4:	03 96       	adiw	r24, 0x03	; 3
    16d6:	6a e2       	ldi	r22, 0x2A	; 42
    16d8:	70 e0       	ldi	r23, 0x00	; 0
    16da:	0c dc       	rcall	.-2024   	; 0xef4 <Endpoint_Write_Control_Stream_LE>
    16dc:	13 c0       	rjmp	.+38     	; 0x1704 <USB_Device_ProcessControlRequest+0x238>
    16de:	60 91 04 02 	lds	r22, 0x0204
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif

	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
    16e2:	ae 01       	movw	r20, r28
    16e4:	4f 5f       	subi	r20, 0xFF	; 255
    16e6:	5f 4f       	sbci	r21, 0xFF	; 255
    16e8:	0e 94 99 01 	call	0x332	; 0x332 <CALLBACK_USB_GetDescriptor>
    16ec:	bc 01       	movw	r22, r24
    16ee:	00 97       	sbiw	r24, 0x00	; 0
    16f0:	09 f4       	brne	.+2      	; 0x16f4 <USB_Device_ProcessControlRequest+0x228>
    16f2:	3d c0       	rjmp	.+122    	; 0x176e <USB_Device_ProcessControlRequest+0x2a2>
    16f4:	80 91 e8 00 	lds	r24, 0x00E8
    16f8:	87 7f       	andi	r24, 0xF7	; 247
    16fa:	80 93 e8 00 	sts	0x00E8, r24
    16fe:	89 81       	ldd	r24, Y+1	; 0x01
    1700:	9a 81       	ldd	r25, Y+2	; 0x02
	#if defined(USE_RAM_DESCRIPTORS) || !defined(ARCH_HAS_MULTI_ADDRESS_SPACE)
	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_EEPROM_DESCRIPTORS)
	Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_FLASH_DESCRIPTORS)
	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
    1702:	54 dc       	rcall	.-1880   	; 0xfac <Endpoint_Write_Control_PStream_LE>
    1704:	80 91 e8 00 	lds	r24, 0x00E8
    1708:	8b 77       	andi	r24, 0x7B	; 123
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    170a:	80 93 e8 00 	sts	0x00E8, r24
    170e:	2f c0       	rjmp	.+94     	; 0x176e <USB_Device_ProcessControlRequest+0x2a2>
    1710:	80 38       	cpi	r24, 0x80	; 128
    1712:	69 f5       	brne	.+90     	; 0x176e <USB_Device_ProcessControlRequest+0x2a2>
    1714:	80 91 e8 00 	lds	r24, 0x00E8
					USB_Device_GetDescriptor();
				}

				break;
			case REQ_GetConfiguration:
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
    1718:	87 7f       	andi	r24, 0xF7	; 247
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    171a:	80 93 e8 00 	sts	0x00E8, r24
    171e:	80 91 fb 01 	lds	r24, 0x01FB
    1722:	80 93 f1 00 	sts	0x00F1, r24

static void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();

	Endpoint_Write_8(USB_Device_ConfigurationNumber);
    1726:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    172a:	8e 77       	andi	r24, 0x7E	; 126
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    172c:	80 93 e8 00 	sts	0x00E8, r24
    1730:	0b dd       	rcall	.-1514   	; 0x1148 <Endpoint_ClearStatusStage>
    1732:	1d c0       	rjmp	.+58     	; 0x176e <USB_Device_ProcessControlRequest+0x2a2>
    1734:	88 23       	and	r24, r24
	Endpoint_ClearIN();

	Endpoint_ClearStatusStage();
    1736:	d9 f4       	brne	.+54     	; 0x176e <USB_Device_ProcessControlRequest+0x2a2>
    1738:	90 91 02 02 	lds	r25, 0x0202
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_GetConfiguration();

				break;
			case REQ_SetConfiguration:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    173c:	92 30       	cpi	r25, 0x02	; 2
    173e:	b8 f4       	brcc	.+46     	; 0x176e <USB_Device_ProcessControlRequest+0x2a2>
}

static void USB_Device_SetConfiguration(void)
{
	#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
    1740:	80 91 e8 00 	lds	r24, 0x00E8
    1744:	87 7f       	andi	r24, 0xF7	; 247
    1746:	80 93 e8 00 	sts	0x00E8, r24
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    174a:	90 93 fb 01 	sts	0x01FB, r25
    174e:	fc dc       	rcall	.-1544   	; 0x1148 <Endpoint_ClearStatusStage>
    1750:	80 91 fb 01 	lds	r24, 0x01FB
	#endif
	#endif

	Endpoint_ClearSETUP();

	USB_Device_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
    1754:	88 23       	and	r24, r24

	Endpoint_ClearStatusStage();
    1756:	21 f4       	brne	.+8      	; 0x1760 <USB_Device_ProcessControlRequest+0x294>
    1758:	80 91 e3 00 	lds	r24, 0x00E3

	if (USB_Device_ConfigurationNumber)
    175c:	87 ff       	sbrs	r24, 7
    175e:	02 c0       	rjmp	.+4      	; 0x1764 <USB_Device_ProcessControlRequest+0x298>
    1760:	84 e0       	ldi	r24, 0x04	; 4
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
    1762:	01 c0       	rjmp	.+2      	; 0x1766 <USB_Device_ProcessControlRequest+0x29a>
    1764:	81 e0       	ldi	r24, 0x01	; 1
	  USB_DeviceState = DEVICE_STATE_Configured;
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
    1766:	80 93 ff 01 	sts	0x01FF, r24
    176a:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <EVENT_USB_Device_ConfigurationChanged>
    176e:	80 91 e8 00 	lds	r24, 0x00E8
    1772:	83 ff       	sbrs	r24, 3

	EVENT_USB_Device_ConfigurationChanged();
    1774:	0a c0       	rjmp	.+20     	; 0x178a <USB_Device_ProcessControlRequest+0x2be>
    1776:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    177a:	87 7f       	andi	r24, 0xF7	; 247
			default:
				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
    177c:	80 93 e8 00 	sts	0x00E8, r24
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1780:	80 91 eb 00 	lds	r24, 0x00EB
    1784:	80 62       	ori	r24, 0x20	; 32
    1786:	80 93 eb 00 	sts	0x00EB, r24
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    178a:	ac 96       	adiw	r28, 0x2c	; 44
    178c:	0f b6       	in	r0, 0x3f	; 63
    178e:	f8 94       	cli
    1790:	de bf       	out	0x3e, r29	; 62
    1792:	0f be       	out	0x3f, r0	; 63
	{
		Endpoint_ClearSETUP();
		Endpoint_StallTransaction();
	}
}
    1794:	cd bf       	out	0x3d, r28	; 61
    1796:	df 91       	pop	r29
    1798:	cf 91       	pop	r28
    179a:	1f 91       	pop	r17
    179c:	08 95       	ret

0000179e <USB_Event_Stub>:
#include "Events.h"

void USB_Event_Stub(void)
{

}
    179e:	08 95       	ret

000017a0 <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
    17a0:	cf 93       	push	r28
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_DeviceTask(void)
{
	if (USB_DeviceState == DEVICE_STATE_Unattached)
    17a2:	80 91 ff 01 	lds	r24, 0x01FF
    17a6:	88 23       	and	r24, r24
    17a8:	a9 f0       	breq	.+42     	; 0x17d4 <USB_USBTask+0x34>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    17aa:	80 91 e9 00 	lds	r24, 0x00E9
    17ae:	8f 70       	andi	r24, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    17b0:	90 91 ec 00 	lds	r25, 0x00EC
    17b4:	90 ff       	sbrs	r25, 0
    17b6:	02 c0       	rjmp	.+4      	; 0x17bc <USB_USBTask+0x1c>
    17b8:	c0 e8       	ldi	r28, 0x80	; 128
    17ba:	01 c0       	rjmp	.+2      	; 0x17be <USB_USBTask+0x1e>
    17bc:	c0 e0       	ldi	r28, 0x00	; 0
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    17be:	c8 2b       	or	r28, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    17c0:	10 92 e9 00 	sts	0x00E9, r1
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    17c4:	80 91 e8 00 	lds	r24, 0x00E8

	uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

	if (Endpoint_IsSETUPReceived())
    17c8:	83 ff       	sbrs	r24, 3
    17ca:	01 c0       	rjmp	.+2      	; 0x17ce <USB_USBTask+0x2e>
	  USB_Device_ProcessControlRequest();
    17cc:	7f de       	rcall	.-770    	; 0x14cc <USB_Device_ProcessControlRequest>
    17ce:	cf 70       	andi	r28, 0x0F	; 15
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    17d0:	c0 93 e9 00 	sts	0x00E9, r28
    17d4:	cf 91       	pop	r28
	#elif defined(USB_CAN_BE_HOST)
		USB_HostTask();
	#elif defined(USB_CAN_BE_DEVICE)
		USB_DeviceTask();
	#endif
}
    17d6:	08 95       	ret

000017d8 <CDC_Device_ProcessControlRequest>:
#define  __INCLUDE_FROM_CDC_DRIVER
#define  __INCLUDE_FROM_CDC_DEVICE_C
#include "CDCClassDevice.h"

void CDC_Device_ProcessControlRequest(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
    17d8:	cf 93       	push	r28
    17da:	df 93       	push	r29
    17dc:	ec 01       	movw	r28, r24
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    17de:	80 91 e8 00 	lds	r24, 0x00E8
	if (!(Endpoint_IsSETUPReceived()))
    17e2:	83 ff       	sbrs	r24, 3
    17e4:	a3 c0       	rjmp	.+326    	; 0x192c <CDC_Device_ProcessControlRequest+0x154>
	  return;

	if (USB_ControlRequest.wIndex != CDCInterfaceInfo->Config.ControlInterfaceNumber)
    17e6:	88 81       	ld	r24, Y
    17e8:	90 e0       	ldi	r25, 0x00	; 0
    17ea:	20 91 04 02 	lds	r18, 0x0204
    17ee:	30 91 05 02 	lds	r19, 0x0205
    17f2:	28 17       	cp	r18, r24
    17f4:	39 07       	cpc	r19, r25
    17f6:	09 f0       	breq	.+2      	; 0x17fa <CDC_Device_ProcessControlRequest+0x22>
    17f8:	99 c0       	rjmp	.+306    	; 0x192c <CDC_Device_ProcessControlRequest+0x154>
	  return;

	switch (USB_ControlRequest.bRequest)
    17fa:	80 91 01 02 	lds	r24, 0x0201
    17fe:	81 32       	cpi	r24, 0x21	; 33
    1800:	69 f0       	breq	.+26     	; 0x181c <CDC_Device_ProcessControlRequest+0x44>
    1802:	82 32       	cpi	r24, 0x22	; 34
    1804:	20 f4       	brcc	.+8      	; 0x180e <CDC_Device_ProcessControlRequest+0x36>
    1806:	80 32       	cpi	r24, 0x20	; 32
    1808:	09 f0       	breq	.+2      	; 0x180c <CDC_Device_ProcessControlRequest+0x34>
    180a:	90 c0       	rjmp	.+288    	; 0x192c <CDC_Device_ProcessControlRequest+0x154>
    180c:	3c c0       	rjmp	.+120    	; 0x1886 <CDC_Device_ProcessControlRequest+0xae>
    180e:	82 32       	cpi	r24, 0x22	; 34
    1810:	09 f4       	brne	.+2      	; 0x1814 <CDC_Device_ProcessControlRequest+0x3c>
    1812:	6b c0       	rjmp	.+214    	; 0x18ea <CDC_Device_ProcessControlRequest+0x112>
    1814:	83 32       	cpi	r24, 0x23	; 35
    1816:	09 f0       	breq	.+2      	; 0x181a <CDC_Device_ProcessControlRequest+0x42>
    1818:	89 c0       	rjmp	.+274    	; 0x192c <CDC_Device_ProcessControlRequest+0x154>
    181a:	7a c0       	rjmp	.+244    	; 0x1910 <CDC_Device_ProcessControlRequest+0x138>
	{
		case CDC_REQ_GetLineEncoding:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    181c:	80 91 00 02 	lds	r24, 0x0200
    1820:	81 3a       	cpi	r24, 0xA1	; 161
    1822:	09 f0       	breq	.+2      	; 0x1826 <CDC_Device_ProcessControlRequest+0x4e>
    1824:	83 c0       	rjmp	.+262    	; 0x192c <CDC_Device_ProcessControlRequest+0x154>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1826:	80 91 e8 00 	lds	r24, 0x00E8
    182a:	87 7f       	andi	r24, 0xF7	; 247
    182c:	80 93 e8 00 	sts	0x00E8, r24
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1830:	80 91 e8 00 	lds	r24, 0x00E8
			{
				Endpoint_ClearSETUP();

				while (!(Endpoint_IsINReady()));
    1834:	80 ff       	sbrs	r24, 0
    1836:	fc cf       	rjmp	.-8      	; 0x1830 <CDC_Device_ProcessControlRequest+0x58>

				Endpoint_Write_32_LE(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS);
    1838:	8c 89       	ldd	r24, Y+20	; 0x14
    183a:	9d 89       	ldd	r25, Y+21	; 0x15
    183c:	ae 89       	ldd	r26, Y+22	; 0x16
    183e:	bf 89       	ldd	r27, Y+23	; 0x17
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_32_LE(const uint32_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_32_LE(const uint32_t Data)
			{
				UEDATX = (Data &  0xFF);
    1840:	80 93 f1 00 	sts	0x00F1, r24
				UEDATX = (Data >> 8);
    1844:	49 2f       	mov	r20, r25
    1846:	5a 2f       	mov	r21, r26
    1848:	6b 2f       	mov	r22, r27
    184a:	77 27       	eor	r23, r23
    184c:	40 93 f1 00 	sts	0x00F1, r20
				UEDATX = (Data >> 16);
    1850:	ad 01       	movw	r20, r26
    1852:	66 27       	eor	r22, r22
    1854:	77 27       	eor	r23, r23
    1856:	40 93 f1 00 	sts	0x00F1, r20
				UEDATX = (Data >> 24);
    185a:	8b 2f       	mov	r24, r27
    185c:	99 27       	eor	r25, r25
    185e:	aa 27       	eor	r26, r26
    1860:	bb 27       	eor	r27, r27
    1862:	80 93 f1 00 	sts	0x00F1, r24
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.CharFormat);
    1866:	88 8d       	ldd	r24, Y+24	; 0x18
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    1868:	80 93 f1 00 	sts	0x00F1, r24
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.ParityType);
    186c:	89 8d       	ldd	r24, Y+25	; 0x19
    186e:	80 93 f1 00 	sts	0x00F1, r24
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.DataBits);
    1872:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1874:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1878:	80 91 e8 00 	lds	r24, 0x00E8
    187c:	8e 77       	andi	r24, 0x7E	; 126
    187e:	80 93 e8 00 	sts	0x00E8, r24

				Endpoint_ClearIN();
				Endpoint_ClearStatusStage();
    1882:	62 dc       	rcall	.-1852   	; 0x1148 <Endpoint_ClearStatusStage>
    1884:	53 c0       	rjmp	.+166    	; 0x192c <CDC_Device_ProcessControlRequest+0x154>
    1886:	80 91 00 02 	lds	r24, 0x0200
			}

			break;
		case CDC_REQ_SetLineEncoding:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    188a:	81 32       	cpi	r24, 0x21	; 33
    188c:	09 f0       	breq	.+2      	; 0x1890 <CDC_Device_ProcessControlRequest+0xb8>
    188e:	4e c0       	rjmp	.+156    	; 0x192c <CDC_Device_ProcessControlRequest+0x154>
    1890:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1894:	87 7f       	andi	r24, 0xF7	; 247
    1896:	80 93 e8 00 	sts	0x00E8, r24
    189a:	05 c0       	rjmp	.+10     	; 0x18a6 <CDC_Device_ProcessControlRequest+0xce>
    189c:	80 91 ff 01 	lds	r24, 0x01FF
			{
				Endpoint_ClearSETUP();

				while (!(Endpoint_IsOUTReceived()))
				{
					if (USB_DeviceState == DEVICE_STATE_Unattached)
    18a0:	88 23       	and	r24, r24
    18a2:	09 f4       	brne	.+2      	; 0x18a6 <CDC_Device_ProcessControlRequest+0xce>
    18a4:	43 c0       	rjmp	.+134    	; 0x192c <CDC_Device_ProcessControlRequest+0x154>
    18a6:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    18aa:	82 ff       	sbrs	r24, 2
		case CDC_REQ_SetLineEncoding:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
			{
				Endpoint_ClearSETUP();

				while (!(Endpoint_IsOUTReceived()))
    18ac:	f7 cf       	rjmp	.-18     	; 0x189c <CDC_Device_ProcessControlRequest+0xc4>
    18ae:	30 91 f1 00 	lds	r19, 0x00F1
				{
					uint32_t Value;
					uint8_t  Bytes[4];
				} Data;

				Data.Bytes[0] = UEDATX;
    18b2:	20 91 f1 00 	lds	r18, 0x00F1
				Data.Bytes[1] = UEDATX;
    18b6:	90 91 f1 00 	lds	r25, 0x00F1
				Data.Bytes[2] = UEDATX;
    18ba:	80 91 f1 00 	lds	r24, 0x00F1
				Data.Bytes[3] = UEDATX;
    18be:	3c 8b       	std	Y+20, r19	; 0x14
				{
					if (USB_DeviceState == DEVICE_STATE_Unattached)
					  return;
				}

				CDCInterfaceInfo->State.LineEncoding.BaudRateBPS = Endpoint_Read_32_LE();
    18c0:	2d 8b       	std	Y+21, r18	; 0x15
    18c2:	9e 8b       	std	Y+22, r25	; 0x16
    18c4:	8f 8b       	std	Y+23, r24	; 0x17
    18c6:	80 91 f1 00 	lds	r24, 0x00F1
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    18ca:	88 8f       	std	Y+24, r24	; 0x18
				CDCInterfaceInfo->State.LineEncoding.CharFormat  = Endpoint_Read_8();
    18cc:	80 91 f1 00 	lds	r24, 0x00F1
    18d0:	89 8f       	std	Y+25, r24	; 0x19
				CDCInterfaceInfo->State.LineEncoding.ParityType  = Endpoint_Read_8();
    18d2:	80 91 f1 00 	lds	r24, 0x00F1
    18d6:	8a 8f       	std	Y+26, r24	; 0x1a
				CDCInterfaceInfo->State.LineEncoding.DataBits    = Endpoint_Read_8();
    18d8:	80 91 e8 00 	lds	r24, 0x00E8
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    18dc:	8b 77       	andi	r24, 0x7B	; 123
    18de:	80 93 e8 00 	sts	0x00E8, r24
    18e2:	32 dc       	rcall	.-1948   	; 0x1148 <Endpoint_ClearStatusStage>

				Endpoint_ClearOUT();
				Endpoint_ClearStatusStage();
    18e4:	ce 01       	movw	r24, r28
    18e6:	17 d1       	rcall	.+558    	; 0x1b16 <CDC_Device_Event_Stub>

				EVENT_CDC_Device_LineEncodingChanged(CDCInterfaceInfo);
    18e8:	21 c0       	rjmp	.+66     	; 0x192c <CDC_Device_ProcessControlRequest+0x154>
    18ea:	80 91 00 02 	lds	r24, 0x0200
    18ee:	81 32       	cpi	r24, 0x21	; 33
			}

			break;
		case CDC_REQ_SetControlLineState:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    18f0:	e9 f4       	brne	.+58     	; 0x192c <CDC_Device_ProcessControlRequest+0x154>
    18f2:	80 91 e8 00 	lds	r24, 0x00E8
    18f6:	87 7f       	andi	r24, 0xF7	; 247
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    18f8:	80 93 e8 00 	sts	0x00E8, r24
    18fc:	25 dc       	rcall	.-1974   	; 0x1148 <Endpoint_ClearStatusStage>
    18fe:	80 91 02 02 	lds	r24, 0x0202
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
    1902:	90 91 03 02 	lds	r25, 0x0203

				CDCInterfaceInfo->State.ControlLineStates.HostToDevice = USB_ControlRequest.wValue;
    1906:	99 8b       	std	Y+17, r25	; 0x11
    1908:	88 8b       	std	Y+16, r24	; 0x10
    190a:	ce 01       	movw	r24, r28
    190c:	04 d1       	rcall	.+520    	; 0x1b16 <CDC_Device_Event_Stub>
    190e:	0e c0       	rjmp	.+28     	; 0x192c <CDC_Device_ProcessControlRequest+0x154>
    1910:	80 91 00 02 	lds	r24, 0x0200

				EVENT_CDC_Device_ControLineStateChanged(CDCInterfaceInfo);
    1914:	81 32       	cpi	r24, 0x21	; 33
    1916:	51 f4       	brne	.+20     	; 0x192c <CDC_Device_ProcessControlRequest+0x154>
    1918:	80 91 e8 00 	lds	r24, 0x00E8
			}

			break;
		case CDC_REQ_SendBreak:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    191c:	87 7f       	andi	r24, 0xF7	; 247
    191e:	80 93 e8 00 	sts	0x00E8, r24
    1922:	12 dc       	rcall	.-2012   	; 0x1148 <Endpoint_ClearStatusStage>
    1924:	ce 01       	movw	r24, r28
    1926:	60 91 02 02 	lds	r22, 0x0202
    192a:	f5 d0       	rcall	.+490    	; 0x1b16 <CDC_Device_Event_Stub>
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
    192c:	df 91       	pop	r29
    192e:	cf 91       	pop	r28

				EVENT_CDC_Device_BreakSent(CDCInterfaceInfo, (uint8_t)USB_ControlRequest.wValue);
    1930:	08 95       	ret

00001932 <CDC_Device_ConfigureEndpoints>:
    1932:	cf 93       	push	r28
    1934:	df 93       	push	r29
    1936:	ec 01       	movw	r28, r24
    1938:	40 96       	adiw	r24, 0x10	; 16
			}

			break;
	}
}
    193a:	fc 01       	movw	r30, r24
    193c:	8b e0       	ldi	r24, 0x0B	; 11
    193e:	df 01       	movw	r26, r30

bool CDC_Device_ConfigureEndpoints(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
	memset(&CDCInterfaceInfo->State, 0x00, sizeof(CDCInterfaceInfo->State));
    1940:	1d 92       	st	X+, r1
    1942:	8a 95       	dec	r24
    1944:	e9 f7       	brne	.-6      	; 0x1940 <CDC_Device_ConfigureEndpoints+0xe>

	CDCInterfaceInfo->Config.DataINEndpoint.Type       = EP_TYPE_BULK;
    1946:	82 e0       	ldi	r24, 0x02	; 2
    1948:	8c 83       	std	Y+4, r24	; 0x04
	CDCInterfaceInfo->Config.DataOUTEndpoint.Type      = EP_TYPE_BULK;
    194a:	89 87       	std	Y+9, r24	; 0x09
	CDCInterfaceInfo->Config.NotificationEndpoint.Type = EP_TYPE_INTERRUPT;
    194c:	83 e0       	ldi	r24, 0x03	; 3
    194e:	8e 87       	std	Y+14, r24	; 0x0e

	if (!(Endpoint_ConfigureEndpointTable(&CDCInterfaceInfo->Config.DataINEndpoint, 1)))
    1950:	ce 01       	movw	r24, r28
    1952:	01 96       	adiw	r24, 0x01	; 1
    1954:	61 e0       	ldi	r22, 0x01	; 1
    1956:	bc db       	rcall	.-2184   	; 0x10d0 <Endpoint_ConfigureEndpointTable>
    1958:	88 23       	and	r24, r24
    195a:	59 f0       	breq	.+22     	; 0x1972 <CDC_Device_ConfigureEndpoints+0x40>
    195c:	ce 01       	movw	r24, r28
	  return false;

	if (!(Endpoint_ConfigureEndpointTable(&CDCInterfaceInfo->Config.DataOUTEndpoint, 1)))
    195e:	06 96       	adiw	r24, 0x06	; 6
    1960:	61 e0       	ldi	r22, 0x01	; 1
    1962:	b6 db       	rcall	.-2196   	; 0x10d0 <Endpoint_ConfigureEndpointTable>
    1964:	88 23       	and	r24, r24
    1966:	29 f0       	breq	.+10     	; 0x1972 <CDC_Device_ConfigureEndpoints+0x40>
    1968:	ce 01       	movw	r24, r28
    196a:	0b 96       	adiw	r24, 0x0b	; 11
	  return false;

	if (!(Endpoint_ConfigureEndpointTable(&CDCInterfaceInfo->Config.NotificationEndpoint, 1)))
    196c:	61 e0       	ldi	r22, 0x01	; 1
    196e:	b0 db       	rcall	.-2208   	; 0x10d0 <Endpoint_ConfigureEndpointTable>
    1970:	01 c0       	rjmp	.+2      	; 0x1974 <CDC_Device_ConfigureEndpoints+0x42>
    1972:	80 e0       	ldi	r24, 0x00	; 0
    1974:	df 91       	pop	r29
    1976:	cf 91       	pop	r28

	if (!(Endpoint_ConfigureEndpointTable(&CDCInterfaceInfo->Config.DataINEndpoint, 1)))
	  return false;

	if (!(Endpoint_ConfigureEndpointTable(&CDCInterfaceInfo->Config.DataOUTEndpoint, 1)))
	  return false;
    1978:	08 95       	ret

0000197a <CDC_Device_SendByte>:

	if (!(Endpoint_ConfigureEndpointTable(&CDCInterfaceInfo->Config.NotificationEndpoint, 1)))
	  return false;

	return true;
}
    197a:	cf 93       	push	r28
    197c:	fc 01       	movw	r30, r24
    197e:	c6 2f       	mov	r28, r22
}

uint8_t CDC_Device_SendByte(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo,
                            const uint8_t Data)
{
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
    1980:	80 91 ff 01 	lds	r24, 0x01FF
    1984:	84 30       	cpi	r24, 0x04	; 4
    1986:	e9 f4       	brne	.+58     	; 0x19c2 <CDC_Device_SendByte+0x48>
    1988:	44 89       	ldd	r20, Z+20	; 0x14
    198a:	55 89       	ldd	r21, Z+21	; 0x15
    198c:	66 89       	ldd	r22, Z+22	; 0x16
    198e:	77 89       	ldd	r23, Z+23	; 0x17
    1990:	41 15       	cp	r20, r1
    1992:	51 05       	cpc	r21, r1
    1994:	61 05       	cpc	r22, r1
    1996:	71 05       	cpc	r23, r1
    1998:	a1 f0       	breq	.+40     	; 0x19c2 <CDC_Device_SendByte+0x48>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    199a:	81 81       	ldd	r24, Z+1	; 0x01
    199c:	8f 70       	andi	r24, 0x0F	; 15
    199e:	80 93 e9 00 	sts	0x00E9, r24
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    19a2:	80 91 e8 00 	lds	r24, 0x00E8
	  return ENDPOINT_RWSTREAM_DeviceDisconnected;

	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataINEndpoint.Address);

	if (!(Endpoint_IsReadWriteAllowed()))
    19a6:	85 fd       	sbrc	r24, 5
    19a8:	08 c0       	rjmp	.+16     	; 0x19ba <CDC_Device_SendByte+0x40>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    19aa:	80 91 e8 00 	lds	r24, 0x00E8
    19ae:	8e 77       	andi	r24, 0x7E	; 126
    19b0:	80 93 e8 00 	sts	0x00E8, r24
	{
		Endpoint_ClearIN();

		uint8_t ErrorCode;

		if ((ErrorCode = Endpoint_WaitUntilReady()) != ENDPOINT_READYWAIT_NoError)
    19b4:	ea db       	rcall	.-2092   	; 0x118a <Endpoint_WaitUntilReady>
    19b6:	88 23       	and	r24, r24
    19b8:	29 f4       	brne	.+10     	; 0x19c4 <CDC_Device_SendByte+0x4a>
    19ba:	c0 93 f1 00 	sts	0x00F1, r28
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    19be:	80 e0       	ldi	r24, 0x00	; 0
		  return ErrorCode;
	}

	Endpoint_Write_8(Data);
	return ENDPOINT_READYWAIT_NoError;
    19c0:	01 c0       	rjmp	.+2      	; 0x19c4 <CDC_Device_SendByte+0x4a>
    19c2:	82 e0       	ldi	r24, 0x02	; 2

uint8_t CDC_Device_SendByte(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo,
                            const uint8_t Data)
{
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
	  return ENDPOINT_RWSTREAM_DeviceDisconnected;
    19c4:	cf 91       	pop	r28
		  return ErrorCode;
	}

	Endpoint_Write_8(Data);
	return ENDPOINT_READYWAIT_NoError;
}
    19c6:	08 95       	ret

000019c8 <CDC_Device_putchar>:
    19c8:	28 2f       	mov	r18, r24
	fdev_set_udata(Stream, CDCInterfaceInfo);
}

static int CDC_Device_putchar(char c,
                              FILE* Stream)
{
    19ca:	fb 01       	movw	r30, r22
	return CDC_Device_SendByte((USB_ClassInfo_CDC_Device_t*)fdev_get_udata(Stream), c) ? _FDEV_ERR : 0;
    19cc:	84 85       	ldd	r24, Z+12	; 0x0c
    19ce:	95 85       	ldd	r25, Z+13	; 0x0d
    19d0:	62 2f       	mov	r22, r18
    19d2:	d3 df       	rcall	.-90     	; 0x197a <CDC_Device_SendByte>
    19d4:	88 23       	and	r24, r24
    19d6:	19 f0       	breq	.+6      	; 0x19de <CDC_Device_putchar+0x16>
    19d8:	8f ef       	ldi	r24, 0xFF	; 255
    19da:	9f ef       	ldi	r25, 0xFF	; 255
    19dc:	08 95       	ret
    19de:	80 e0       	ldi	r24, 0x00	; 0
    19e0:	90 e0       	ldi	r25, 0x00	; 0
    19e2:	08 95       	ret

000019e4 <CDC_Device_Flush>:
}
    19e4:	fc 01       	movw	r30, r24
	return ENDPOINT_READYWAIT_NoError;
}

uint8_t CDC_Device_Flush(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
    19e6:	80 91 ff 01 	lds	r24, 0x01FF
    19ea:	84 30       	cpi	r24, 0x04	; 4
    19ec:	29 f5       	brne	.+74     	; 0x1a38 <CDC_Device_Flush+0x54>
    19ee:	44 89       	ldd	r20, Z+20	; 0x14
    19f0:	55 89       	ldd	r21, Z+21	; 0x15
    19f2:	66 89       	ldd	r22, Z+22	; 0x16
    19f4:	77 89       	ldd	r23, Z+23	; 0x17
    19f6:	41 15       	cp	r20, r1
    19f8:	51 05       	cpc	r21, r1
    19fa:	61 05       	cpc	r22, r1
    19fc:	71 05       	cpc	r23, r1
    19fe:	e1 f0       	breq	.+56     	; 0x1a38 <CDC_Device_Flush+0x54>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1a00:	81 81       	ldd	r24, Z+1	; 0x01
    1a02:	8f 70       	andi	r24, 0x0F	; 15
    1a04:	80 93 e9 00 	sts	0x00E9, r24
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
    1a08:	80 91 f2 00 	lds	r24, 0x00F2
    1a0c:	90 91 f3 00 	lds	r25, 0x00F3

	uint8_t ErrorCode;

	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataINEndpoint.Address);

	if (!(Endpoint_BytesInEndpoint()))
    1a10:	00 97       	sbiw	r24, 0x00	; 0
    1a12:	a1 f0       	breq	.+40     	; 0x1a3c <CDC_Device_Flush+0x58>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    1a14:	90 91 e8 00 	lds	r25, 0x00E8
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1a18:	80 91 e8 00 	lds	r24, 0x00E8
    1a1c:	8e 77       	andi	r24, 0x7E	; 126
    1a1e:	80 93 e8 00 	sts	0x00E8, r24

	bool BankFull = !(Endpoint_IsReadWriteAllowed());

	Endpoint_ClearIN();

	if (BankFull)
    1a22:	95 fd       	sbrc	r25, 5
    1a24:	0d c0       	rjmp	.+26     	; 0x1a40 <CDC_Device_Flush+0x5c>
	{
		if ((ErrorCode = Endpoint_WaitUntilReady()) != ENDPOINT_READYWAIT_NoError)
    1a26:	b1 db       	rcall	.-2206   	; 0x118a <Endpoint_WaitUntilReady>
    1a28:	88 23       	and	r24, r24
    1a2a:	59 f4       	brne	.+22     	; 0x1a42 <CDC_Device_Flush+0x5e>
    1a2c:	90 91 e8 00 	lds	r25, 0x00E8
    1a30:	9e 77       	andi	r25, 0x7E	; 126
    1a32:	90 93 e8 00 	sts	0x00E8, r25
    1a36:	08 95       	ret
    1a38:	82 e0       	ldi	r24, 0x02	; 2
}

uint8_t CDC_Device_Flush(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
	  return ENDPOINT_RWSTREAM_DeviceDisconnected;
    1a3a:	08 95       	ret
    1a3c:	80 e0       	ldi	r24, 0x00	; 0
	uint8_t ErrorCode;

	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataINEndpoint.Address);

	if (!(Endpoint_BytesInEndpoint()))
	  return ENDPOINT_READYWAIT_NoError;
    1a3e:	08 95       	ret
    1a40:	80 e0       	ldi	r24, 0x00	; 0
		  return ErrorCode;

		Endpoint_ClearIN();
	}

	return ENDPOINT_READYWAIT_NoError;
    1a42:	08 95       	ret

00001a44 <CDC_Device_USBTask>:
}
    1a44:	20 91 ff 01 	lds	r18, 0x01FF
	return true;
}

void CDC_Device_USBTask(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
    1a48:	24 30       	cpi	r18, 0x04	; 4
    1a4a:	99 f4       	brne	.+38     	; 0x1a72 <CDC_Device_USBTask+0x2e>
    1a4c:	fc 01       	movw	r30, r24
    1a4e:	44 89       	ldd	r20, Z+20	; 0x14
    1a50:	55 89       	ldd	r21, Z+21	; 0x15
    1a52:	66 89       	ldd	r22, Z+22	; 0x16
    1a54:	77 89       	ldd	r23, Z+23	; 0x17
    1a56:	41 15       	cp	r20, r1
    1a58:	51 05       	cpc	r21, r1
    1a5a:	61 05       	cpc	r22, r1
    1a5c:	71 05       	cpc	r23, r1
    1a5e:	49 f0       	breq	.+18     	; 0x1a72 <CDC_Device_USBTask+0x2e>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1a60:	21 81       	ldd	r18, Z+1	; 0x01
    1a62:	2f 70       	andi	r18, 0x0F	; 15
    1a64:	20 93 e9 00 	sts	0x00E9, r18
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1a68:	20 91 e8 00 	lds	r18, 0x00E8
	  return;

	#if !defined(NO_CLASS_DRIVER_AUTOFLUSH)
	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataINEndpoint.Address);

	if (Endpoint_IsINReady())
    1a6c:	20 ff       	sbrs	r18, 0
    1a6e:	01 c0       	rjmp	.+2      	; 0x1a72 <CDC_Device_USBTask+0x2e>
	  CDC_Device_Flush(CDCInterfaceInfo);
    1a70:	b9 cf       	rjmp	.-142    	; 0x19e4 <CDC_Device_Flush>
    1a72:	08 95       	ret

00001a74 <CDC_Device_ReceiveByte>:
    1a74:	fc 01       	movw	r30, r24
	}
}

int16_t CDC_Device_ReceiveByte(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
    1a76:	80 91 ff 01 	lds	r24, 0x01FF
    1a7a:	84 30       	cpi	r24, 0x04	; 4
    1a7c:	51 f5       	brne	.+84     	; 0x1ad2 <CDC_Device_ReceiveByte+0x5e>
    1a7e:	44 89       	ldd	r20, Z+20	; 0x14
    1a80:	55 89       	ldd	r21, Z+21	; 0x15
    1a82:	66 89       	ldd	r22, Z+22	; 0x16
    1a84:	77 89       	ldd	r23, Z+23	; 0x17
    1a86:	41 15       	cp	r20, r1
    1a88:	51 05       	cpc	r21, r1
    1a8a:	61 05       	cpc	r22, r1
    1a8c:	71 05       	cpc	r23, r1
    1a8e:	09 f1       	breq	.+66     	; 0x1ad2 <CDC_Device_ReceiveByte+0x5e>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1a90:	86 81       	ldd	r24, Z+6	; 0x06
    1a92:	8f 70       	andi	r24, 0x0F	; 15
    1a94:	80 93 e9 00 	sts	0x00E9, r24
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    1a98:	80 91 e8 00 	lds	r24, 0x00E8

	int16_t ReceivedByte = -1;

	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataOUTEndpoint.Address);

	if (Endpoint_IsOUTReceived())
    1a9c:	82 ff       	sbrs	r24, 2
    1a9e:	1c c0       	rjmp	.+56     	; 0x1ad8 <CDC_Device_ReceiveByte+0x64>
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
    1aa0:	80 91 f2 00 	lds	r24, 0x00F2
    1aa4:	90 91 f3 00 	lds	r25, 0x00F3
	{
		if (Endpoint_BytesInEndpoint())
    1aa8:	00 97       	sbiw	r24, 0x00	; 0
    1aaa:	21 f0       	breq	.+8      	; 0x1ab4 <CDC_Device_ReceiveByte+0x40>
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    1aac:	80 91 f1 00 	lds	r24, 0x00F1
		  ReceivedByte = Endpoint_Read_8();
    1ab0:	90 e0       	ldi	r25, 0x00	; 0
    1ab2:	02 c0       	rjmp	.+4      	; 0x1ab8 <CDC_Device_ReceiveByte+0x44>
int16_t CDC_Device_ReceiveByte(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
	  return -1;

	int16_t ReceivedByte = -1;
    1ab4:	8f ef       	ldi	r24, 0xFF	; 255
    1ab6:	9f ef       	ldi	r25, 0xFF	; 255
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
    1ab8:	20 91 f2 00 	lds	r18, 0x00F2
    1abc:	30 91 f3 00 	lds	r19, 0x00F3
	if (Endpoint_IsOUTReceived())
	{
		if (Endpoint_BytesInEndpoint())
		  ReceivedByte = Endpoint_Read_8();

		if (!(Endpoint_BytesInEndpoint()))
    1ac0:	21 15       	cp	r18, r1
    1ac2:	31 05       	cpc	r19, r1
    1ac4:	59 f4       	brne	.+22     	; 0x1adc <CDC_Device_ReceiveByte+0x68>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    1ac6:	20 91 e8 00 	lds	r18, 0x00E8
    1aca:	2b 77       	andi	r18, 0x7B	; 123
    1acc:	20 93 e8 00 	sts	0x00E8, r18
    1ad0:	08 95       	ret
}

int16_t CDC_Device_ReceiveByte(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
	  return -1;
    1ad2:	8f ef       	ldi	r24, 0xFF	; 255
    1ad4:	9f ef       	ldi	r25, 0xFF	; 255
    1ad6:	08 95       	ret

	int16_t ReceivedByte = -1;
    1ad8:	8f ef       	ldi	r24, 0xFF	; 255
    1ada:	9f ef       	ldi	r25, 0xFF	; 255
		if (!(Endpoint_BytesInEndpoint()))
		  Endpoint_ClearOUT();
	}

	return ReceivedByte;
}
    1adc:	08 95       	ret

00001ade <CDC_Device_getchar>:
	return CDC_Device_SendByte((USB_ClassInfo_CDC_Device_t*)fdev_get_udata(Stream), c) ? _FDEV_ERR : 0;
}

static int CDC_Device_getchar(FILE* Stream)
{
	int16_t ReceivedByte = CDC_Device_ReceiveByte((USB_ClassInfo_CDC_Device_t*)fdev_get_udata(Stream));
    1ade:	fc 01       	movw	r30, r24
    1ae0:	84 85       	ldd	r24, Z+12	; 0x0c
    1ae2:	95 85       	ldd	r25, Z+13	; 0x0d
    1ae4:	c7 df       	rcall	.-114    	; 0x1a74 <CDC_Device_ReceiveByte>
    1ae6:	97 ff       	sbrs	r25, 7

	if (ReceivedByte < 0)
    1ae8:	02 c0       	rjmp	.+4      	; 0x1aee <CDC_Device_getchar+0x10>
    1aea:	8e ef       	ldi	r24, 0xFE	; 254
	  return _FDEV_EOF;
    1aec:	9f ef       	ldi	r25, 0xFF	; 255
    1aee:	08 95       	ret

00001af0 <CDC_Device_CreateStream>:

	return ReceivedByte;
}
    1af0:	fb 01       	movw	r30, r22

#if defined(FDEV_SETUP_STREAM)
void CDC_Device_CreateStream(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo,
                             FILE* const Stream)
{
	*Stream = (FILE)FDEV_SETUP_STREAM(CDC_Device_putchar, CDC_Device_getchar, _FDEV_SETUP_RW);
    1af2:	2e e0       	ldi	r18, 0x0E	; 14
    1af4:	db 01       	movw	r26, r22
    1af6:	1d 92       	st	X+, r1
    1af8:	2a 95       	dec	r18
    1afa:	e9 f7       	brne	.-6      	; 0x1af6 <CDC_Device_CreateStream+0x6>
    1afc:	23 e0       	ldi	r18, 0x03	; 3
    1afe:	23 83       	std	Z+3, r18	; 0x03
    1b00:	24 ee       	ldi	r18, 0xE4	; 228
    1b02:	3c e0       	ldi	r19, 0x0C	; 12
    1b04:	31 87       	std	Z+9, r19	; 0x09
    1b06:	20 87       	std	Z+8, r18	; 0x08
    1b08:	2f e6       	ldi	r18, 0x6F	; 111
    1b0a:	3d e0       	ldi	r19, 0x0D	; 13
    1b0c:	33 87       	std	Z+11, r19	; 0x0b
    1b0e:	22 87       	std	Z+10, r18	; 0x0a
	fdev_set_udata(Stream, CDCInterfaceInfo);
    1b10:	95 87       	std	Z+13, r25	; 0x0d
    1b12:	84 87       	std	Z+12, r24	; 0x0c
}
    1b14:	08 95       	ret

00001b16 <CDC_Device_Event_Stub>:
#endif

void CDC_Device_Event_Stub(void)
{

}
    1b16:	08 95       	ret

00001b18 <MS_Device_ProcessControlRequest>:
#define  __INCLUDE_FROM_MS_DRIVER
#define  __INCLUDE_FROM_MASSSTORAGE_DEVICE_C
#include "MassStorageClassDevice.h"

void MS_Device_ProcessControlRequest(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
    1b18:	cf 93       	push	r28
    1b1a:	df 93       	push	r29
    1b1c:	ec 01       	movw	r28, r24
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    1b1e:	80 91 e8 00 	lds	r24, 0x00E8
	if (!(Endpoint_IsSETUPReceived()))
    1b22:	83 ff       	sbrs	r24, 3
    1b24:	33 c0       	rjmp	.+102    	; 0x1b8c <MS_Device_ProcessControlRequest+0x74>
	  return;

	if (USB_ControlRequest.wIndex != MSInterfaceInfo->Config.InterfaceNumber)
    1b26:	88 81       	ld	r24, Y
    1b28:	90 e0       	ldi	r25, 0x00	; 0
    1b2a:	20 91 04 02 	lds	r18, 0x0204
    1b2e:	30 91 05 02 	lds	r19, 0x0205
    1b32:	28 17       	cp	r18, r24
    1b34:	39 07       	cpc	r19, r25
    1b36:	51 f5       	brne	.+84     	; 0x1b8c <MS_Device_ProcessControlRequest+0x74>
	  return;

	switch (USB_ControlRequest.bRequest)
    1b38:	80 91 01 02 	lds	r24, 0x0201
    1b3c:	8e 3f       	cpi	r24, 0xFE	; 254
    1b3e:	79 f0       	breq	.+30     	; 0x1b5e <MS_Device_ProcessControlRequest+0x46>
    1b40:	8f 3f       	cpi	r24, 0xFF	; 255
    1b42:	21 f5       	brne	.+72     	; 0x1b8c <MS_Device_ProcessControlRequest+0x74>
	{
		case MS_REQ_MassStorageReset:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    1b44:	80 91 00 02 	lds	r24, 0x0200
    1b48:	81 32       	cpi	r24, 0x21	; 33
    1b4a:	01 f5       	brne	.+64     	; 0x1b8c <MS_Device_ProcessControlRequest+0x74>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1b4c:	80 91 e8 00 	lds	r24, 0x00E8
    1b50:	87 7f       	andi	r24, 0xF7	; 247
    1b52:	80 93 e8 00 	sts	0x00E8, r24
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
    1b56:	f8 da       	rcall	.-2576   	; 0x1148 <Endpoint_ClearStatusStage>
    1b58:	81 e0       	ldi	r24, 0x01	; 1

				MSInterfaceInfo->State.IsMassStoreReset = true;
    1b5a:	88 af       	sts	0x78, r24
    1b5c:	17 c0       	rjmp	.+46     	; 0x1b8c <MS_Device_ProcessControlRequest+0x74>
    1b5e:	80 91 00 02 	lds	r24, 0x0200
			}

			break;
		case MS_REQ_GetMaxLUN:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    1b62:	81 3a       	cpi	r24, 0xA1	; 161
    1b64:	99 f4       	brne	.+38     	; 0x1b8c <MS_Device_ProcessControlRequest+0x74>
    1b66:	80 91 e8 00 	lds	r24, 0x00E8
    1b6a:	87 7f       	andi	r24, 0xF7	; 247
    1b6c:	80 93 e8 00 	sts	0x00E8, r24
    1b70:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1b74:	80 ff       	sbrs	r24, 0
			{
				Endpoint_ClearSETUP();
				while (!(Endpoint_IsINReady()));
    1b76:	fc cf       	rjmp	.-8      	; 0x1b70 <MS_Device_ProcessControlRequest+0x58>
    1b78:	8b 85       	ldd	r24, Y+11	; 0x0b
				Endpoint_Write_8(MSInterfaceInfo->Config.TotalLUNs - 1);
    1b7a:	81 50       	subi	r24, 0x01	; 1
    1b7c:	80 93 f1 00 	sts	0x00F1, r24
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    1b80:	80 91 e8 00 	lds	r24, 0x00E8
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1b84:	8e 77       	andi	r24, 0x7E	; 126
    1b86:	80 93 e8 00 	sts	0x00E8, r24
    1b8a:	de da       	rcall	.-2628   	; 0x1148 <Endpoint_ClearStatusStage>
				Endpoint_ClearIN();
				Endpoint_ClearStatusStage();
    1b8c:	df 91       	pop	r29
    1b8e:	cf 91       	pop	r28
			}

			break;
	}
}
    1b90:	08 95       	ret

00001b92 <MS_Device_ConfigureEndpoints>:
    1b92:	cf 93       	push	r28
    1b94:	df 93       	push	r29

bool MS_Device_ConfigureEndpoints(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
    1b96:	ec 01       	movw	r28, r24
	memset(&MSInterfaceInfo->State, 0x00, sizeof(MSInterfaceInfo->State));
    1b98:	0c 96       	adiw	r24, 0x0c	; 12
    1b9a:	fc 01       	movw	r30, r24
    1b9c:	8d e2       	ldi	r24, 0x2D	; 45
    1b9e:	df 01       	movw	r26, r30
    1ba0:	1d 92       	st	X+, r1
    1ba2:	8a 95       	dec	r24
    1ba4:	e9 f7       	brne	.-6      	; 0x1ba0 <MS_Device_ConfigureEndpoints+0xe>

	MSInterfaceInfo->Config.DataINEndpoint.Type  = EP_TYPE_BULK;
    1ba6:	82 e0       	ldi	r24, 0x02	; 2
    1ba8:	8c 83       	std	Y+4, r24	; 0x04
	MSInterfaceInfo->Config.DataOUTEndpoint.Type = EP_TYPE_BULK;
    1baa:	89 87       	std	Y+9, r24	; 0x09

	if (!(Endpoint_ConfigureEndpointTable(&MSInterfaceInfo->Config.DataINEndpoint, 1)))
    1bac:	ce 01       	movw	r24, r28
    1bae:	01 96       	adiw	r24, 0x01	; 1
    1bb0:	61 e0       	ldi	r22, 0x01	; 1
    1bb2:	8e da       	rcall	.-2788   	; 0x10d0 <Endpoint_ConfigureEndpointTable>
    1bb4:	88 23       	and	r24, r24
    1bb6:	29 f0       	breq	.+10     	; 0x1bc2 <MS_Device_ConfigureEndpoints+0x30>
    1bb8:	ce 01       	movw	r24, r28
	  return false;

	if (!(Endpoint_ConfigureEndpointTable(&MSInterfaceInfo->Config.DataOUTEndpoint, 1)))
    1bba:	06 96       	adiw	r24, 0x06	; 6
    1bbc:	61 e0       	ldi	r22, 0x01	; 1
    1bbe:	88 da       	rcall	.-2800   	; 0x10d0 <Endpoint_ConfigureEndpointTable>
    1bc0:	01 c0       	rjmp	.+2      	; 0x1bc4 <MS_Device_ConfigureEndpoints+0x32>
    1bc2:	80 e0       	ldi	r24, 0x00	; 0
    1bc4:	df 91       	pop	r29

	MSInterfaceInfo->Config.DataINEndpoint.Type  = EP_TYPE_BULK;
	MSInterfaceInfo->Config.DataOUTEndpoint.Type = EP_TYPE_BULK;

	if (!(Endpoint_ConfigureEndpointTable(&MSInterfaceInfo->Config.DataINEndpoint, 1)))
	  return false;
    1bc6:	cf 91       	pop	r28

	if (!(Endpoint_ConfigureEndpointTable(&MSInterfaceInfo->Config.DataOUTEndpoint, 1)))
	  return false;

	return true;
}
    1bc8:	08 95       	ret

00001bca <MS_Device_USBTask>:
    1bca:	ef 92       	push	r14
    1bcc:	ff 92       	push	r15

void MS_Device_USBTask(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
    1bce:	0f 93       	push	r16
    1bd0:	1f 93       	push	r17
    1bd2:	cf 93       	push	r28
    1bd4:	df 93       	push	r29
    1bd6:	00 d0       	rcall	.+0      	; 0x1bd8 <MS_Device_USBTask+0xe>
    1bd8:	cd b7       	in	r28, 0x3d	; 61
    1bda:	de b7       	in	r29, 0x3e	; 62
    1bdc:	8c 01       	movw	r16, r24
	if (USB_DeviceState != DEVICE_STATE_Configured)
    1bde:	80 91 ff 01 	lds	r24, 0x01FF
    1be2:	84 30       	cpi	r24, 0x04	; 4
    1be4:	09 f0       	breq	.+2      	; 0x1be8 <MS_Device_USBTask+0x1e>
    1be6:	0e c1       	rjmp	.+540    	; 0x1e04 <MS_Device_USBTask+0x23a>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1be8:	f8 01       	movw	r30, r16
    1bea:	86 81       	ldd	r24, Z+6	; 0x06
    1bec:	8f 70       	andi	r24, 0x0F	; 15
    1bee:	80 93 e9 00 	sts	0x00E9, r24
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    1bf2:	80 91 e8 00 	lds	r24, 0x00E8
	  return;

	Endpoint_SelectEndpoint(MSInterfaceInfo->Config.DataOUTEndpoint.Address);

	if (Endpoint_IsOUTReceived())
    1bf6:	82 ff       	sbrs	r24, 2
    1bf8:	cb c0       	rjmp	.+406    	; 0x1d90 <MS_Device_USBTask+0x1c6>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1bfa:	86 81       	ldd	r24, Z+6	; 0x06
    1bfc:	8f 70       	andi	r24, 0x0F	; 15
    1bfe:	80 93 e9 00 	sts	0x00E9, r24
{
	uint16_t BytesProcessed;

	Endpoint_SelectEndpoint(MSInterfaceInfo->Config.DataOUTEndpoint.Address);
	
	BytesProcessed = 0;
    1c02:	1a 82       	std	Y+2, r1	; 0x02
    1c04:	19 82       	std	Y+1, r1	; 0x01
	while (Endpoint_Read_Stream_LE(&MSInterfaceInfo->State.CommandBlock,
    1c06:	2c e0       	ldi	r18, 0x0C	; 12
    1c08:	e2 2e       	mov	r14, r18
    1c0a:	f1 2c       	mov	r15, r1
    1c0c:	e0 0e       	add	r14, r16
    1c0e:	f1 1e       	adc	r15, r17
    1c10:	04 c0       	rjmp	.+8      	; 0x1c1a <MS_Device_USBTask+0x50>
	                               (sizeof(MS_CommandBlockWrapper_t) - 16), &BytesProcessed) ==
	                               ENDPOINT_RWSTREAM_IncompleteTransfer)
	{
		if (MSInterfaceInfo->State.IsMassStoreReset)
    1c12:	80 ad       	sts	0x60, r24
    1c14:	88 23       	and	r24, r24
    1c16:	09 f0       	breq	.+2      	; 0x1c1a <MS_Device_USBTask+0x50>
    1c18:	bb c0       	rjmp	.+374    	; 0x1d90 <MS_Device_USBTask+0x1c6>
	uint16_t BytesProcessed;

	Endpoint_SelectEndpoint(MSInterfaceInfo->Config.DataOUTEndpoint.Address);
	
	BytesProcessed = 0;
	while (Endpoint_Read_Stream_LE(&MSInterfaceInfo->State.CommandBlock,
    1c1a:	c7 01       	movw	r24, r14
    1c1c:	6f e0       	ldi	r22, 0x0F	; 15
    1c1e:	70 e0       	ldi	r23, 0x00	; 0
    1c20:	ae 01       	movw	r20, r28
    1c22:	4f 5f       	subi	r20, 0xFF	; 255
    1c24:	5f 4f       	sbci	r21, 0xFF	; 255
    1c26:	17 d9       	rcall	.-3538   	; 0xe56 <Endpoint_Read_Stream_LE>
    1c28:	f8 01       	movw	r30, r16
	                               (sizeof(MS_CommandBlockWrapper_t) - 16), &BytesProcessed) ==
	                               ENDPOINT_RWSTREAM_IncompleteTransfer)
	{
		if (MSInterfaceInfo->State.IsMassStoreReset)
    1c2a:	85 30       	cpi	r24, 0x05	; 5
	uint16_t BytesProcessed;

	Endpoint_SelectEndpoint(MSInterfaceInfo->Config.DataOUTEndpoint.Address);
	
	BytesProcessed = 0;
	while (Endpoint_Read_Stream_LE(&MSInterfaceInfo->State.CommandBlock,
    1c2c:	91 f3       	breq	.-28     	; 0x1c12 <MS_Device_USBTask+0x48>
    1c2e:	84 85       	ldd	r24, Z+12	; 0x0c
	{
		if (MSInterfaceInfo->State.IsMassStoreReset)
		  return false;
	}

	if ((MSInterfaceInfo->State.CommandBlock.Signature         != CPU_TO_LE32(MS_CBW_SIGNATURE))     ||
    1c30:	95 85       	ldd	r25, Z+13	; 0x0d
    1c32:	a6 85       	ldd	r26, Z+14	; 0x0e
    1c34:	b7 85       	ldd	r27, Z+15	; 0x0f
    1c36:	85 35       	cpi	r24, 0x55	; 85
    1c38:	f3 e5       	ldi	r31, 0x53	; 83
    1c3a:	9f 07       	cpc	r25, r31
    1c3c:	f2 e4       	ldi	r31, 0x42	; 66
    1c3e:	af 07       	cpc	r26, r31
    1c40:	f3 e4       	ldi	r31, 0x43	; 67
    1c42:	bf 07       	cpc	r27, r31
    1c44:	81 f4       	brne	.+32     	; 0x1c66 <MS_Device_USBTask+0x9c>
    1c46:	f8 01       	movw	r30, r16
    1c48:	91 8d       	ldd	r25, Z+25	; 0x19
    1c4a:	83 85       	ldd	r24, Z+11	; 0x0b
    1c4c:	98 17       	cp	r25, r24
    1c4e:	58 f4       	brcc	.+22     	; 0x1c66 <MS_Device_USBTask+0x9c>
    1c50:	80 8d       	ldd	r24, Z+24	; 0x18
	    (MSInterfaceInfo->State.CommandBlock.LUN               >= MSInterfaceInfo->Config.TotalLUNs) ||
		(MSInterfaceInfo->State.CommandBlock.Flags              & 0x1F)                              ||
    1c52:	90 e0       	ldi	r25, 0x00	; 0
    1c54:	8f 71       	andi	r24, 0x1F	; 31
    1c56:	90 70       	andi	r25, 0x00	; 0
    1c58:	00 97       	sbiw	r24, 0x00	; 0
		if (MSInterfaceInfo->State.IsMassStoreReset)
		  return false;
	}

	if ((MSInterfaceInfo->State.CommandBlock.Signature         != CPU_TO_LE32(MS_CBW_SIGNATURE))     ||
	    (MSInterfaceInfo->State.CommandBlock.LUN               >= MSInterfaceInfo->Config.TotalLUNs) ||
    1c5a:	29 f4       	brne	.+10     	; 0x1c66 <MS_Device_USBTask+0x9c>
    1c5c:	82 8d       	ldd	r24, Z+26	; 0x1a
		(MSInterfaceInfo->State.CommandBlock.Flags              & 0x1F)                              ||
		(MSInterfaceInfo->State.CommandBlock.SCSICommandLength == 0)                                 ||
    1c5e:	88 23       	and	r24, r24
		  return false;
	}

	if ((MSInterfaceInfo->State.CommandBlock.Signature         != CPU_TO_LE32(MS_CBW_SIGNATURE))     ||
	    (MSInterfaceInfo->State.CommandBlock.LUN               >= MSInterfaceInfo->Config.TotalLUNs) ||
		(MSInterfaceInfo->State.CommandBlock.Flags              & 0x1F)                              ||
    1c60:	11 f0       	breq	.+4      	; 0x1c66 <MS_Device_USBTask+0x9c>
    1c62:	81 31       	cpi	r24, 0x11	; 17
		(MSInterfaceInfo->State.CommandBlock.SCSICommandLength == 0)                                 ||
    1c64:	80 f0       	brcs	.+32     	; 0x1c86 <MS_Device_USBTask+0xbc>
    1c66:	80 91 eb 00 	lds	r24, 0x00EB
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    1c6a:	80 62       	ori	r24, 0x20	; 32
    1c6c:	80 93 eb 00 	sts	0x00EB, r24
    1c70:	f8 01       	movw	r30, r16
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1c72:	81 81       	ldd	r24, Z+1	; 0x01
    1c74:	8f 70       	andi	r24, 0x0F	; 15
    1c76:	80 93 e9 00 	sts	0x00E9, r24
    1c7a:	80 91 eb 00 	lds	r24, 0x00EB
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    1c7e:	80 62       	ori	r24, 0x20	; 32
    1c80:	80 93 eb 00 	sts	0x00EB, r24
    1c84:	85 c0       	rjmp	.+266    	; 0x1d90 <MS_Device_USBTask+0x1c6>
    1c86:	1a 82       	std	Y+2, r1	; 0x02
		Endpoint_StallTransaction();

		return false;
	}

	BytesProcessed = 0;
    1c88:	19 82       	std	Y+1, r1	; 0x01
    1c8a:	9b e1       	ldi	r25, 0x1B	; 27
	while (Endpoint_Read_Stream_LE(&MSInterfaceInfo->State.CommandBlock.SCSICommandData,
    1c8c:	e9 2e       	mov	r14, r25
    1c8e:	f1 2c       	mov	r15, r1
    1c90:	e0 0e       	add	r14, r16
    1c92:	f1 1e       	adc	r15, r17
    1c94:	05 c0       	rjmp	.+10     	; 0x1ca0 <MS_Device_USBTask+0xd6>
    1c96:	f8 01       	movw	r30, r16
	                                MSInterfaceInfo->State.CommandBlock.SCSICommandLength, &BytesProcessed) ==
	                                ENDPOINT_RWSTREAM_IncompleteTransfer)
	{
		if (MSInterfaceInfo->State.IsMassStoreReset)
    1c98:	80 ad       	sts	0x60, r24
    1c9a:	88 23       	and	r24, r24
    1c9c:	09 f0       	breq	.+2      	; 0x1ca0 <MS_Device_USBTask+0xd6>
    1c9e:	78 c0       	rjmp	.+240    	; 0x1d90 <MS_Device_USBTask+0x1c6>
    1ca0:	f8 01       	movw	r30, r16

		return false;
	}

	BytesProcessed = 0;
	while (Endpoint_Read_Stream_LE(&MSInterfaceInfo->State.CommandBlock.SCSICommandData,
    1ca2:	62 8d       	ldd	r22, Z+26	; 0x1a
    1ca4:	c7 01       	movw	r24, r14
    1ca6:	70 e0       	ldi	r23, 0x00	; 0
    1ca8:	ae 01       	movw	r20, r28
    1caa:	4f 5f       	subi	r20, 0xFF	; 255
    1cac:	5f 4f       	sbci	r21, 0xFF	; 255
    1cae:	d3 d8       	rcall	.-3674   	; 0xe56 <Endpoint_Read_Stream_LE>
    1cb0:	85 30       	cpi	r24, 0x05	; 5
    1cb2:	89 f3       	breq	.-30     	; 0x1c96 <MS_Device_USBTask+0xcc>
    1cb4:	80 91 e8 00 	lds	r24, 0x00E8
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    1cb8:	8b 77       	andi	r24, 0x7B	; 123
    1cba:	80 93 e8 00 	sts	0x00E8, r24
    1cbe:	f8 01       	movw	r30, r16
    1cc0:	80 8d       	ldd	r24, Z+24	; 0x18

	if (Endpoint_IsOUTReceived())
	{
		if (MS_Device_ReadInCommandBlock(MSInterfaceInfo))
		{
			if (MSInterfaceInfo->State.CommandBlock.Flags & MS_COMMAND_DIR_DATA_IN)
    1cc2:	87 ff       	sbrs	r24, 7
    1cc4:	04 c0       	rjmp	.+8      	; 0x1cce <MS_Device_USBTask+0x104>
    1cc6:	81 81       	ldd	r24, Z+1	; 0x01
    1cc8:	8f 70       	andi	r24, 0x0F	; 15
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1cca:	80 93 e9 00 	sts	0x00E9, r24
    1cce:	c8 01       	movw	r24, r16
    1cd0:	0e 94 8b 01 	call	0x316	; 0x316 <CALLBACK_MS_Device_SCSICommandReceived>
			  Endpoint_SelectEndpoint(MSInterfaceInfo->Config.DataINEndpoint.Address);

			bool SCSICommandResult = CALLBACK_MS_Device_SCSICommandReceived(MSInterfaceInfo);
    1cd4:	91 e0       	ldi	r25, 0x01	; 1
    1cd6:	98 27       	eor	r25, r24
	  return false;

	return true;
}

void MS_Device_USBTask(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
    1cd8:	f8 01       	movw	r30, r16
    1cda:	97 ab       	sts	0x57, r25
			if (MSInterfaceInfo->State.CommandBlock.Flags & MS_COMMAND_DIR_DATA_IN)
			  Endpoint_SelectEndpoint(MSInterfaceInfo->Config.DataINEndpoint.Address);

			bool SCSICommandResult = CALLBACK_MS_Device_SCSICommandReceived(MSInterfaceInfo);

			MSInterfaceInfo->State.CommandStatus.Status              = (SCSICommandResult) ? MS_SCSI_COMMAND_Pass : MS_SCSI_COMMAND_Fail;
    1cdc:	45 e5       	ldi	r20, 0x55	; 85
    1cde:	53 e5       	ldi	r21, 0x53	; 83
			MSInterfaceInfo->State.CommandStatus.Signature           = CPU_TO_LE32(MS_CSW_SIGNATURE);
    1ce0:	62 e4       	ldi	r22, 0x42	; 66
    1ce2:	73 e5       	ldi	r23, 0x53	; 83
    1ce4:	43 a7       	lds	r20, 0x73
    1ce6:	54 a7       	lds	r21, 0x74
    1ce8:	65 a7       	lds	r22, 0x75
    1cea:	76 a7       	lds	r23, 0x76
    1cec:	40 89       	ldd	r20, Z+16	; 0x10
    1cee:	51 89       	ldd	r21, Z+17	; 0x11
			MSInterfaceInfo->State.CommandStatus.Tag                 = MSInterfaceInfo->State.CommandBlock.Tag;
    1cf0:	62 89       	ldd	r22, Z+18	; 0x12
    1cf2:	73 89       	ldd	r23, Z+19	; 0x13
    1cf4:	47 a7       	lds	r20, 0x77
    1cf6:	50 ab       	sts	0x50, r21
    1cf8:	61 ab       	sts	0x51, r22
    1cfa:	72 ab       	sts	0x52, r23
    1cfc:	44 89       	ldd	r20, Z+20	; 0x14
    1cfe:	55 89       	ldd	r21, Z+21	; 0x15
			MSInterfaceInfo->State.CommandStatus.DataTransferResidue = MSInterfaceInfo->State.CommandBlock.DataTransferLength;
    1d00:	66 89       	ldd	r22, Z+22	; 0x16
    1d02:	77 89       	ldd	r23, Z+23	; 0x17
    1d04:	43 ab       	sts	0x53, r20
    1d06:	54 ab       	sts	0x54, r21
    1d08:	65 ab       	sts	0x55, r22
    1d0a:	76 ab       	sts	0x56, r23
    1d0c:	88 23       	and	r24, r24
    1d0e:	51 f4       	brne	.+20     	; 0x1d24 <MS_Device_USBTask+0x15a>

			if (!(SCSICommandResult) && (le32_to_cpu(MSInterfaceInfo->State.CommandStatus.DataTransferResidue)))
    1d10:	41 15       	cp	r20, r1
    1d12:	51 05       	cpc	r21, r1
    1d14:	61 05       	cpc	r22, r1
    1d16:	71 05       	cpc	r23, r1
    1d18:	29 f0       	breq	.+10     	; 0x1d24 <MS_Device_USBTask+0x15a>
    1d1a:	80 91 eb 00 	lds	r24, 0x00EB
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    1d1e:	80 62       	ori	r24, 0x20	; 32
    1d20:	80 93 eb 00 	sts	0x00EB, r24
    1d24:	f8 01       	movw	r30, r16
    1d26:	86 81       	ldd	r24, Z+6	; 0x06
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1d28:	8f 70       	andi	r24, 0x0F	; 15
    1d2a:	80 93 e9 00 	sts	0x00E9, r24
    1d2e:	03 c0       	rjmp	.+6      	; 0x1d36 <MS_Device_USBTask+0x16c>
    1d30:	80 ad       	sts	0x60, r24
    1d32:	88 23       	and	r24, r24
	{
		#if !defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_USBTask();
		#endif

		if (MSInterfaceInfo->State.IsMassStoreReset)
    1d34:	69 f5       	brne	.+90     	; 0x1d90 <MS_Device_USBTask+0x1c6>
    1d36:	80 91 eb 00 	lds	r24, 0x00EB
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    1d3a:	f8 01       	movw	r30, r16
    1d3c:	85 fd       	sbrc	r24, 5
    1d3e:	f8 cf       	rjmp	.-16     	; 0x1d30 <MS_Device_USBTask+0x166>

static void MS_Device_ReturnCommandStatus(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
	Endpoint_SelectEndpoint(MSInterfaceInfo->Config.DataOUTEndpoint.Address);

	while (Endpoint_IsStalled())
    1d40:	81 81       	ldd	r24, Z+1	; 0x01
    1d42:	8f 70       	andi	r24, 0x0F	; 15
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1d44:	80 93 e9 00 	sts	0x00E9, r24
    1d48:	04 c0       	rjmp	.+8      	; 0x1d52 <MS_Device_USBTask+0x188>
    1d4a:	f8 01       	movw	r30, r16
    1d4c:	80 ad       	sts	0x60, r24
	{
		#if !defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_USBTask();
		#endif

		if (MSInterfaceInfo->State.IsMassStoreReset)
    1d4e:	88 23       	and	r24, r24
    1d50:	f9 f4       	brne	.+62     	; 0x1d90 <MS_Device_USBTask+0x1c6>
    1d52:	80 91 eb 00 	lds	r24, 0x00EB
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    1d56:	85 fd       	sbrc	r24, 5
    1d58:	f8 cf       	rjmp	.-16     	; 0x1d4a <MS_Device_USBTask+0x180>
		  return;
	}

	Endpoint_SelectEndpoint(MSInterfaceInfo->Config.DataINEndpoint.Address);

	while (Endpoint_IsStalled())
    1d5a:	1a 82       	std	Y+2, r1	; 0x02
    1d5c:	19 82       	std	Y+1, r1	; 0x01

		if (MSInterfaceInfo->State.IsMassStoreReset)
		  return;
	}

	uint16_t BytesProcessed = 0;
    1d5e:	8b e2       	ldi	r24, 0x2B	; 43
    1d60:	e8 2e       	mov	r14, r24
	while (Endpoint_Write_Stream_LE(&MSInterfaceInfo->State.CommandStatus,
    1d62:	f1 2c       	mov	r15, r1
    1d64:	e0 0e       	add	r14, r16
    1d66:	f1 1e       	adc	r15, r17
    1d68:	04 c0       	rjmp	.+8      	; 0x1d72 <MS_Device_USBTask+0x1a8>
    1d6a:	f8 01       	movw	r30, r16
    1d6c:	80 ad       	sts	0x60, r24
	                                sizeof(MS_CommandStatusWrapper_t), &BytesProcessed) ==
	                                ENDPOINT_RWSTREAM_IncompleteTransfer)
	{
		if (MSInterfaceInfo->State.IsMassStoreReset)
    1d6e:	88 23       	and	r24, r24
    1d70:	79 f4       	brne	.+30     	; 0x1d90 <MS_Device_USBTask+0x1c6>
    1d72:	c7 01       	movw	r24, r14
    1d74:	6d e0       	ldi	r22, 0x0D	; 13
		if (MSInterfaceInfo->State.IsMassStoreReset)
		  return;
	}

	uint16_t BytesProcessed = 0;
	while (Endpoint_Write_Stream_LE(&MSInterfaceInfo->State.CommandStatus,
    1d76:	70 e0       	ldi	r23, 0x00	; 0
    1d78:	ae 01       	movw	r20, r28
    1d7a:	4f 5f       	subi	r20, 0xFF	; 255
    1d7c:	5f 4f       	sbci	r21, 0xFF	; 255
    1d7e:	0e 94 86 06 	call	0xd0c	; 0xd0c <Endpoint_Write_Stream_LE>
    1d82:	85 30       	cpi	r24, 0x05	; 5
    1d84:	91 f3       	breq	.-28     	; 0x1d6a <MS_Device_USBTask+0x1a0>
    1d86:	80 91 e8 00 	lds	r24, 0x00E8
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1d8a:	8e 77       	andi	r24, 0x7E	; 126
    1d8c:	80 93 e8 00 	sts	0x00E8, r24
    1d90:	f8 01       	movw	r30, r16
    1d92:	80 ad       	sts	0x60, r24

			MS_Device_ReturnCommandStatus(MSInterfaceInfo);
		}
	}

	if (MSInterfaceInfo->State.IsMassStoreReset)
    1d94:	88 23       	and	r24, r24
    1d96:	b1 f1       	breq	.+108    	; 0x1e04 <MS_Device_USBTask+0x23a>
    1d98:	26 81       	ldd	r18, Z+6	; 0x06
    1d9a:	2f 70       	andi	r18, 0x0F	; 15
			 *  \param[in] Address  Endpoint address whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t Address)
			{
				UERST = (1 << (Address & ENDPOINT_EPNUM_MASK));
    1d9c:	81 e0       	ldi	r24, 0x01	; 1
    1d9e:	90 e0       	ldi	r25, 0x00	; 0
    1da0:	ac 01       	movw	r20, r24
    1da2:	02 c0       	rjmp	.+4      	; 0x1da8 <MS_Device_USBTask+0x1de>
    1da4:	44 0f       	add	r20, r20
    1da6:	55 1f       	adc	r21, r21
    1da8:	2a 95       	dec	r18
    1daa:	e2 f7       	brpl	.-8      	; 0x1da4 <MS_Device_USBTask+0x1da>
    1dac:	40 93 ea 00 	sts	0x00EA, r20
    1db0:	10 92 ea 00 	sts	0x00EA, r1
				UERST = 0;
    1db4:	21 81       	ldd	r18, Z+1	; 0x01
    1db6:	2f 70       	andi	r18, 0x0F	; 15
			 *  \param[in] Address  Endpoint address whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t Address)
			{
				UERST = (1 << (Address & ENDPOINT_EPNUM_MASK));
    1db8:	02 c0       	rjmp	.+4      	; 0x1dbe <MS_Device_USBTask+0x1f4>
    1dba:	88 0f       	add	r24, r24
    1dbc:	99 1f       	adc	r25, r25
    1dbe:	2a 95       	dec	r18
    1dc0:	e2 f7       	brpl	.-8      	; 0x1dba <MS_Device_USBTask+0x1f0>
    1dc2:	80 93 ea 00 	sts	0x00EA, r24
    1dc6:	10 92 ea 00 	sts	0x00EA, r1
				UERST = 0;
    1dca:	86 81       	ldd	r24, Z+6	; 0x06
    1dcc:	8f 70       	andi	r24, 0x0F	; 15
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1dce:	80 93 e9 00 	sts	0x00E9, r24
    1dd2:	80 91 eb 00 	lds	r24, 0x00EB
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
    1dd6:	80 61       	ori	r24, 0x10	; 16
    1dd8:	80 93 eb 00 	sts	0x00EB, r24
    1ddc:	80 91 eb 00 	lds	r24, 0x00EB

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
    1de0:	88 60       	ori	r24, 0x08	; 8
    1de2:	80 93 eb 00 	sts	0x00EB, r24
    1de6:	81 81       	ldd	r24, Z+1	; 0x01
    1de8:	8f 70       	andi	r24, 0x0F	; 15
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1dea:	80 93 e9 00 	sts	0x00E9, r24
    1dee:	80 91 eb 00 	lds	r24, 0x00EB
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
    1df2:	80 61       	ori	r24, 0x10	; 16
    1df4:	80 93 eb 00 	sts	0x00EB, r24
    1df8:	80 91 eb 00 	lds	r24, 0x00EB

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
    1dfc:	88 60       	ori	r24, 0x08	; 8
    1dfe:	80 93 eb 00 	sts	0x00EB, r24
    1e02:	10 ae       	sts	0xb0, r17
    1e04:	0f 90       	pop	r0
		Endpoint_ResetDataToggle();
		Endpoint_SelectEndpoint(MSInterfaceInfo->Config.DataINEndpoint.Address);
		Endpoint_ClearStall();
		Endpoint_ResetDataToggle();

		MSInterfaceInfo->State.IsMassStoreReset = false;
    1e06:	0f 90       	pop	r0
	}
}
    1e08:	df 91       	pop	r29
    1e0a:	cf 91       	pop	r28
    1e0c:	1f 91       	pop	r17
    1e0e:	0f 91       	pop	r16
    1e10:	ff 90       	pop	r15
    1e12:	ef 90       	pop	r14
    1e14:	08 95       	ret

00001e16 <fputs>:
    1e16:	ef 92       	push	r14
    1e18:	ff 92       	push	r15
    1e1a:	0f 93       	push	r16
    1e1c:	1f 93       	push	r17
    1e1e:	cf 93       	push	r28
    1e20:	df 93       	push	r29
    1e22:	7c 01       	movw	r14, r24
    1e24:	eb 01       	movw	r28, r22
    1e26:	8b 81       	ldd	r24, Y+3	; 0x03
    1e28:	81 ff       	sbrs	r24, 1
    1e2a:	11 c0       	rjmp	.+34     	; 0x1e4e <fputs+0x38>
    1e2c:	00 e0       	ldi	r16, 0x00	; 0
    1e2e:	10 e0       	ldi	r17, 0x00	; 0
    1e30:	08 c0       	rjmp	.+16     	; 0x1e42 <fputs+0x2c>
    1e32:	e8 85       	ldd	r30, Y+8	; 0x08
    1e34:	f9 85       	ldd	r31, Y+9	; 0x09
    1e36:	be 01       	movw	r22, r28
    1e38:	09 95       	icall
    1e3a:	00 97       	sbiw	r24, 0x00	; 0
    1e3c:	11 f0       	breq	.+4      	; 0x1e42 <fputs+0x2c>
    1e3e:	0f ef       	ldi	r16, 0xFF	; 255
    1e40:	1f ef       	ldi	r17, 0xFF	; 255
    1e42:	f7 01       	movw	r30, r14
    1e44:	81 91       	ld	r24, Z+
    1e46:	7f 01       	movw	r14, r30
    1e48:	88 23       	and	r24, r24
    1e4a:	99 f7       	brne	.-26     	; 0x1e32 <fputs+0x1c>
    1e4c:	02 c0       	rjmp	.+4      	; 0x1e52 <fputs+0x3c>
    1e4e:	0f ef       	ldi	r16, 0xFF	; 255
    1e50:	1f ef       	ldi	r17, 0xFF	; 255
    1e52:	c8 01       	movw	r24, r16
    1e54:	df 91       	pop	r29
    1e56:	cf 91       	pop	r28
    1e58:	1f 91       	pop	r17
    1e5a:	0f 91       	pop	r16
    1e5c:	ff 90       	pop	r15
    1e5e:	ef 90       	pop	r14
    1e60:	08 95       	ret

00001e62 <_exit>:
    1e62:	f8 94       	cli

00001e64 <__stop_program>:
    1e64:	ff cf       	rjmp	.-2      	; 0x1e64 <__stop_program>
