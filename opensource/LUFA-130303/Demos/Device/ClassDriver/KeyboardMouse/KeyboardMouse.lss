
KeyboardMouse.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000030  00800100  0000122e  000012c2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000122e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000018  00800130  00800130  000012f2  2**0
                  ALLOC
  3 .stab         00000a98  00000000  00000000  000012f4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000002aa  00000000  00000000  00001d8c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000004f0  00000000  00000000  00002038  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00008702  00000000  00000000  00002528  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002157  00000000  00000000  0000ac2a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00003ef9  00000000  00000000  0000cd81  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000da0  00000000  00000000  00010c7c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000038d8  00000000  00000000  00011a1c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000051ca  00000000  00000000  000152f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000006b0  00000000  00000000  0001a4be  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	db c0       	rjmp	.+438    	; 0x1b8 <__ctors_end>
       2:	00 00       	nop
       4:	f8 c0       	rjmp	.+496    	; 0x1f6 <__bad_interrupt>
       6:	00 00       	nop
       8:	f6 c0       	rjmp	.+492    	; 0x1f6 <__bad_interrupt>
       a:	00 00       	nop
       c:	f4 c0       	rjmp	.+488    	; 0x1f6 <__bad_interrupt>
       e:	00 00       	nop
      10:	f2 c0       	rjmp	.+484    	; 0x1f6 <__bad_interrupt>
      12:	00 00       	nop
      14:	f0 c0       	rjmp	.+480    	; 0x1f6 <__bad_interrupt>
      16:	00 00       	nop
      18:	ee c0       	rjmp	.+476    	; 0x1f6 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	ec c0       	rjmp	.+472    	; 0x1f6 <__bad_interrupt>
      1e:	00 00       	nop
      20:	ea c0       	rjmp	.+468    	; 0x1f6 <__bad_interrupt>
      22:	00 00       	nop
      24:	e8 c0       	rjmp	.+464    	; 0x1f6 <__bad_interrupt>
      26:	00 00       	nop
      28:	86 c4       	rjmp	.+2316   	; 0x936 <__vector_10>
      2a:	00 00       	nop
      2c:	e4 c0       	rjmp	.+456    	; 0x1f6 <__bad_interrupt>
      2e:	00 00       	nop
      30:	e2 c0       	rjmp	.+452    	; 0x1f6 <__bad_interrupt>
      32:	00 00       	nop
      34:	e0 c0       	rjmp	.+448    	; 0x1f6 <__bad_interrupt>
      36:	00 00       	nop
      38:	de c0       	rjmp	.+444    	; 0x1f6 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	dc c0       	rjmp	.+440    	; 0x1f6 <__bad_interrupt>
      3e:	00 00       	nop
      40:	da c0       	rjmp	.+436    	; 0x1f6 <__bad_interrupt>
      42:	00 00       	nop
      44:	d8 c0       	rjmp	.+432    	; 0x1f6 <__bad_interrupt>
      46:	00 00       	nop
      48:	d6 c0       	rjmp	.+428    	; 0x1f6 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	d4 c0       	rjmp	.+424    	; 0x1f6 <__bad_interrupt>
      4e:	00 00       	nop
      50:	d2 c0       	rjmp	.+420    	; 0x1f6 <__bad_interrupt>
      52:	00 00       	nop
      54:	d0 c0       	rjmp	.+416    	; 0x1f6 <__bad_interrupt>
      56:	00 00       	nop
      58:	ce c0       	rjmp	.+412    	; 0x1f6 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	cc c0       	rjmp	.+408    	; 0x1f6 <__bad_interrupt>
      5e:	00 00       	nop
      60:	ca c0       	rjmp	.+404    	; 0x1f6 <__bad_interrupt>
      62:	00 00       	nop
      64:	c8 c0       	rjmp	.+400    	; 0x1f6 <__bad_interrupt>
      66:	00 00       	nop
      68:	c6 c0       	rjmp	.+396    	; 0x1f6 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	c4 c0       	rjmp	.+392    	; 0x1f6 <__bad_interrupt>
      6e:	00 00       	nop
      70:	c2 c0       	rjmp	.+388    	; 0x1f6 <__bad_interrupt>
      72:	00 00       	nop
      74:	c0 c0       	rjmp	.+384    	; 0x1f6 <__bad_interrupt>
      76:	00 00       	nop
      78:	be c0       	rjmp	.+380    	; 0x1f6 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	bc c0       	rjmp	.+376    	; 0x1f6 <__bad_interrupt>
      7e:	00 00       	nop
      80:	ba c0       	rjmp	.+372    	; 0x1f6 <__bad_interrupt>
      82:	00 00       	nop
      84:	b8 c0       	rjmp	.+368    	; 0x1f6 <__bad_interrupt>
      86:	00 00       	nop
      88:	b6 c0       	rjmp	.+364    	; 0x1f6 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	b4 c0       	rjmp	.+360    	; 0x1f6 <__bad_interrupt>
      8e:	00 00       	nop
      90:	b2 c0       	rjmp	.+356    	; 0x1f6 <__bad_interrupt>
      92:	00 00       	nop
      94:	b0 c0       	rjmp	.+352    	; 0x1f6 <__bad_interrupt>
      96:	00 00       	nop

00000098 <ProductString>:
      98:	3a 03 4c 00 55 00 46 00 41 00 20 00 4d 00 6f 00     :.L.U.F.A. .M.o.
      a8:	75 00 73 00 65 00 20 00 61 00 6e 00 64 00 20 00     u.s.e. .a.n.d. .
      b8:	4b 00 65 00 79 00 62 00 6f 00 61 00 72 00 64 00     K.e.y.b.o.a.r.d.
      c8:	20 00 44 00 65 00 6d 00 6f 00 00 00                  .D.e.m.o...

000000d4 <ManufacturerString>:
      d4:	18 03 44 00 65 00 61 00 6e 00 20 00 43 00 61 00     ..D.e.a.n. .C.a.
      e4:	6d 00 65 00 72 00 61 00 00 00                       m.e.r.a...

000000ee <LanguageString>:
      ee:	04 03 09 04                                         ....

000000f2 <ConfigurationDescriptor>:
      f2:	09 02 3b 00 02 01 00 c0 32 09 04 00 00 01 03 01     ..;.....2.......
     102:	01 00 09 21 11 01 00 01 22 3f 00 07 05 81 03 08     ...!...."?......
     112:	00 05 09 04 01 00 01 03 01 02 00 09 21 11 01 00     ............!...
     122:	01 22 3a 00 07 05 83 03 08 00 05                    .":........

0000012d <DeviceDescriptor>:
     12d:	12 01 10 01 00 00 00 08 eb 03 4d 20 01 00 01 02     ..........M ....
     13d:	00 01                                               ..

0000013f <KeyboardReport>:
     13f:	05 01 09 06 a1 01 05 07 19 e0 29 e7 15 00 25 01     ..........)...%.
     14f:	75 01 95 08 81 02 95 01 75 08 81 01 05 08 19 01     u.......u.......
     15f:	29 05 95 05 75 01 91 02 95 01 75 03 91 01 15 00     )...u.....u.....
     16f:	25 ff 05 07 19 00 29 ff 95 06 75 08 81 00 c0        %.....)...u....

0000017e <MouseReport>:
     17e:	05 01 09 02 a1 01 09 01 a1 00 05 09 19 01 29 03     ..............).
     18e:	15 00 25 01 95 03 75 01 81 02 95 01 75 05 81 01     ..%...u.....u...
     19e:	05 01 09 30 09 31 16 ff ff 26 01 00 36 ff ff 46     ...0.1...&..6..F
     1ae:	01 00 95 02 75 08 81 06 c0 c0                       ....u.....

000001b8 <__ctors_end>:
     1b8:	11 24       	eor	r1, r1
     1ba:	1f be       	out	0x3f, r1	; 63
     1bc:	cf ef       	ldi	r28, 0xFF	; 255
     1be:	d0 e2       	ldi	r29, 0x20	; 32
     1c0:	de bf       	out	0x3e, r29	; 62
     1c2:	cd bf       	out	0x3d, r28	; 61

000001c4 <__do_copy_data>:
     1c4:	11 e0       	ldi	r17, 0x01	; 1
     1c6:	a0 e0       	ldi	r26, 0x00	; 0
     1c8:	b1 e0       	ldi	r27, 0x01	; 1
     1ca:	ee e2       	ldi	r30, 0x2E	; 46
     1cc:	f2 e1       	ldi	r31, 0x12	; 18
     1ce:	00 e0       	ldi	r16, 0x00	; 0
     1d0:	0b bf       	out	0x3b, r16	; 59
     1d2:	02 c0       	rjmp	.+4      	; 0x1d8 <__do_copy_data+0x14>
     1d4:	07 90       	elpm	r0, Z+
     1d6:	0d 92       	st	X+, r0
     1d8:	a0 33       	cpi	r26, 0x30	; 48
     1da:	b1 07       	cpc	r27, r17
     1dc:	d9 f7       	brne	.-10     	; 0x1d4 <__do_copy_data+0x10>
     1de:	1b be       	out	0x3b, r1	; 59

000001e0 <__do_clear_bss>:
     1e0:	11 e0       	ldi	r17, 0x01	; 1
     1e2:	a0 e3       	ldi	r26, 0x30	; 48
     1e4:	b1 e0       	ldi	r27, 0x01	; 1
     1e6:	01 c0       	rjmp	.+2      	; 0x1ea <.do_clear_bss_start>

000001e8 <.do_clear_bss_loop>:
     1e8:	1d 92       	st	X+, r1

000001ea <.do_clear_bss_start>:
     1ea:	a8 34       	cpi	r26, 0x48	; 72
     1ec:	b1 07       	cpc	r27, r17
     1ee:	e1 f7       	brne	.-8      	; 0x1e8 <.do_clear_bss_loop>
     1f0:	2f d0       	rcall	.+94     	; 0x250 <main>
     1f2:	0c 94 15 09 	jmp	0x122a	; 0x122a <_exit>

000001f6 <__bad_interrupt>:
     1f6:	04 cf       	rjmp	.-504    	; 0x0 <__vectors>

000001f8 <LEDs_SetAllLEDs>:
				PORTD &= ~LEDMask;
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
			{
				PORTD = ((PORTD & ~LEDS_ALL_LEDS) | LEDMask);
     1f8:	9b b1       	in	r25, 0x0b	; 11
     1fa:	9f 70       	andi	r25, 0x0F	; 15
     1fc:	98 2b       	or	r25, r24
     1fe:	9b b9       	out	0x0b, r25	; 11
			}
     200:	08 95       	ret

00000202 <SetupHardware>:

/** Configures the board hardware and chip peripherals for the demo's functionality. */
void SetupHardware()
{
	/* Disable watchdog if enabled by bootloader/fuses */
	MCUSR &= ~(1 << WDRF);
     202:	84 b7       	in	r24, 0x34	; 52
     204:	87 7f       	andi	r24, 0xF7	; 247
     206:	84 bf       	out	0x34, r24	; 52
	wdt_disable();
     208:	88 e1       	ldi	r24, 0x18	; 24
     20a:	0f b6       	in	r0, 0x3f	; 63
     20c:	f8 94       	cli
     20e:	80 93 60 00 	sts	0x0060, r24
     212:	10 92 60 00 	sts	0x0060, r1
     216:	0f be       	out	0x3f, r0	; 63
The type of x is clock_div_t.
*/
void clock_prescale_set(clock_div_t __x)
{
    uint8_t __tmp = _BV(CLKPCE);
    __asm__ __volatile__ (
     218:	90 e0       	ldi	r25, 0x00	; 0
     21a:	80 e8       	ldi	r24, 0x80	; 128
     21c:	0f b6       	in	r0, 0x3f	; 63
     21e:	f8 94       	cli
     220:	80 93 61 00 	sts	0x0061, r24
     224:	90 93 61 00 	sts	0x0061, r25
     228:	0f be       	out	0x3f, r0	; 63

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void Joystick_Init(void)
			{
				DDRB  &= ~JOY_BMASK;
     22a:	84 b1       	in	r24, 0x04	; 4
     22c:	8f 71       	andi	r24, 0x1F	; 31
     22e:	84 b9       	out	0x04, r24	; 4
				DDRE  &= ~JOY_EMASK;
     230:	8d b1       	in	r24, 0x0d	; 13
     232:	8f 7c       	andi	r24, 0xCF	; 207
     234:	8d b9       	out	0x0d, r24	; 13

				PORTB |=  JOY_BMASK;
     236:	85 b1       	in	r24, 0x05	; 5
     238:	80 6e       	ori	r24, 0xE0	; 224
     23a:	85 b9       	out	0x05, r24	; 5
				PORTE |=  JOY_EMASK;
     23c:	8e b1       	in	r24, 0x0e	; 14
     23e:	80 63       	ori	r24, 0x30	; 48
     240:	8e b9       	out	0x0e, r24	; 14

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void LEDs_Init(void)
			{
				DDRD  |=  LEDS_ALL_LEDS;
     242:	8a b1       	in	r24, 0x0a	; 10
     244:	80 6f       	ori	r24, 0xF0	; 240
     246:	8a b9       	out	0x0a, r24	; 10
				PORTD &= ~LEDS_ALL_LEDS;
     248:	8b b1       	in	r24, 0x0b	; 11
     24a:	8f 70       	andi	r24, 0x0F	; 15
     24c:	8b b9       	out	0x0b, r24	; 11
	clock_prescale_set(clock_div_1);

	/* Hardware Initialization */
	Joystick_Init();
	LEDs_Init();
	USB_Init();
     24e:	58 c3       	rjmp	.+1712   	; 0x900 <USB_Init>

00000250 <main>:
     250:	d8 df       	rcall	.-80     	; 0x202 <SetupHardware>
}
     252:	80 e1       	ldi	r24, 0x10	; 16
 */
int main(void)
{
	SetupHardware();

	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
     254:	d1 df       	rcall	.-94     	; 0x1f8 <LEDs_SetAllLEDs>
     256:	78 94       	sei
     258:	80 e1       	ldi	r24, 0x10	; 16
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				sei();
     25a:	91 e0       	ldi	r25, 0x01	; 1
	GlobalInterruptEnable();

	for (;;)
	{
		HID_Device_USBTask(&Keyboard_HID_Interface);
     25c:	03 d7       	rcall	.+3590   	; 0x1064 <HID_Device_USBTask>
     25e:	80 e0       	ldi	r24, 0x00	; 0
     260:	91 e0       	ldi	r25, 0x01	; 1
     262:	00 d7       	rcall	.+3584   	; 0x1064 <HID_Device_USBTask>
		HID_Device_USBTask(&Mouse_HID_Interface);
     264:	97 d5       	rcall	.+2862   	; 0xd94 <USB_USBTask>
     266:	f8 cf       	rjmp	.-16     	; 0x258 <main+0x8>

00000268 <EVENT_USB_Device_Connect>:
     268:	80 ea       	ldi	r24, 0xA0	; 160
     26a:	c6 cf       	rjmp	.-116    	; 0x1f8 <LEDs_SetAllLEDs>

0000026c <EVENT_USB_Device_Disconnect>:
		USB_USBTask();
     26c:	80 e1       	ldi	r24, 0x10	; 16
     26e:	c4 cf       	rjmp	.-120    	; 0x1f8 <LEDs_SetAllLEDs>

00000270 <EVENT_USB_Device_ConfigurationChanged>:
     270:	cf 93       	push	r28

/** Event handler for the library USB Disconnection event. */
void EVENT_USB_Device_Disconnect(void)
{
    LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
}
     272:	80 e1       	ldi	r24, 0x10	; 16
/** Event handler for the library USB Configuration Changed event. */
void EVENT_USB_Device_ConfigurationChanged(void)
{
	bool ConfigSuccess = true;

	ConfigSuccess &= HID_Device_ConfigureEndpoints(&Keyboard_HID_Interface);
     274:	91 e0       	ldi	r25, 0x01	; 1
     276:	dd d6       	rcall	.+3514   	; 0x1032 <HID_Device_ConfigureEndpoints>
     278:	c8 2f       	mov	r28, r24
     27a:	80 e0       	ldi	r24, 0x00	; 0
	ConfigSuccess &= HID_Device_ConfigureEndpoints(&Mouse_HID_Interface);
     27c:	91 e0       	ldi	r25, 0x01	; 1
     27e:	d9 d6       	rcall	.+3506   	; 0x1032 <HID_Device_ConfigureEndpoints>
     280:	90 91 e2 00 	lds	r25, 0x00E2
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
     284:	94 60       	ori	r25, 0x04	; 4
     286:	90 93 e2 00 	sts	0x00E2, r25
     28a:	28 2f       	mov	r18, r24
     28c:	30 e0       	ldi	r19, 0x00	; 0
     28e:	8c 2f       	mov	r24, r28
     290:	90 e0       	ldi	r25, 0x00	; 0
/** Event handler for the library USB Configuration Changed event. */
void EVENT_USB_Device_ConfigurationChanged(void)
{
	bool ConfigSuccess = true;

	ConfigSuccess &= HID_Device_ConfigureEndpoints(&Keyboard_HID_Interface);
     292:	28 23       	and	r18, r24
     294:	39 23       	and	r19, r25
	ConfigSuccess &= HID_Device_ConfigureEndpoints(&Mouse_HID_Interface);
     296:	21 15       	cp	r18, r1
     298:	31 05       	cpc	r19, r1

	USB_Device_EnableSOFEvents();

	LEDs_SetAllLEDs(ConfigSuccess ? LEDMASK_USB_READY : LEDMASK_USB_ERROR);
     29a:	11 f0       	breq	.+4      	; 0x2a0 <EVENT_USB_Device_ConfigurationChanged+0x30>
     29c:	80 e6       	ldi	r24, 0x60	; 96
     29e:	01 c0       	rjmp	.+2      	; 0x2a2 <EVENT_USB_Device_ConfigurationChanged+0x32>
     2a0:	80 e9       	ldi	r24, 0x90	; 144
     2a2:	aa df       	rcall	.-172    	; 0x1f8 <LEDs_SetAllLEDs>
     2a4:	cf 91       	pop	r28
     2a6:	08 95       	ret

000002a8 <EVENT_USB_Device_ControlRequest>:
     2a8:	80 e1       	ldi	r24, 0x10	; 16
}
     2aa:	91 e0       	ldi	r25, 0x01	; 1
     2ac:	8f d5       	rcall	.+2846   	; 0xdcc <HID_Device_ProcessControlRequest>

/** Event handler for the library USB Control Request reception event. */
void EVENT_USB_Device_ControlRequest(void)
{
	HID_Device_ProcessControlRequest(&Keyboard_HID_Interface);
     2ae:	80 e0       	ldi	r24, 0x00	; 0
	HID_Device_ProcessControlRequest(&Mouse_HID_Interface);
     2b0:	91 e0       	ldi	r25, 0x01	; 1
     2b2:	8c c5       	rjmp	.+2840   	; 0xdcc <HID_Device_ProcessControlRequest>

000002b4 <EVENT_USB_Device_StartOfFrame>:
     2b4:	80 91 1e 01 	lds	r24, 0x011E
}
     2b8:	90 91 1f 01 	lds	r25, 0x011F
			 *  \param[in,out] HIDInterfaceInfo  Pointer to a structure containing a HID Class configuration and state.
			 */
			static inline void HID_Device_MillisecondElapsed(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo) ATTR_ALWAYS_INLINE ATTR_NON_NULL_PTR_ARG(1);
			static inline void HID_Device_MillisecondElapsed(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
			{
				if (HIDInterfaceInfo->State.IdleMSRemaining)
     2bc:	00 97       	sbiw	r24, 0x00	; 0
     2be:	29 f0       	breq	.+10     	; 0x2ca <EVENT_USB_Device_StartOfFrame+0x16>
				  HIDInterfaceInfo->State.IdleMSRemaining--;
     2c0:	01 97       	sbiw	r24, 0x01	; 1
     2c2:	90 93 1f 01 	sts	0x011F, r25
     2c6:	80 93 1e 01 	sts	0x011E, r24
			 *  \param[in,out] HIDInterfaceInfo  Pointer to a structure containing a HID Class configuration and state.
			 */
			static inline void HID_Device_MillisecondElapsed(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo) ATTR_ALWAYS_INLINE ATTR_NON_NULL_PTR_ARG(1);
			static inline void HID_Device_MillisecondElapsed(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
			{
				if (HIDInterfaceInfo->State.IdleMSRemaining)
     2ca:	80 91 0e 01 	lds	r24, 0x010E
     2ce:	90 91 0f 01 	lds	r25, 0x010F
     2d2:	00 97       	sbiw	r24, 0x00	; 0
     2d4:	29 f0       	breq	.+10     	; 0x2e0 <EVENT_USB_Device_StartOfFrame+0x2c>
				  HIDInterfaceInfo->State.IdleMSRemaining--;
     2d6:	01 97       	sbiw	r24, 0x01	; 1
     2d8:	90 93 0f 01 	sts	0x010F, r25
     2dc:	80 93 0e 01 	sts	0x010E, r24
     2e0:	08 95       	ret

000002e2 <CALLBACK_HID_Device_CreateHIDReport>:
bool CALLBACK_HID_Device_CreateHIDReport(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo,
                                         uint8_t* const ReportID,
                                         const uint8_t ReportType,
                                         void* ReportData,
                                         uint16_t* const ReportSize)
{
     2e2:	0f 93       	push	r16
     2e4:	1f 93       	push	r17
     2e6:	f9 01       	movw	r30, r18
     2e8:	d8 01       	movw	r26, r16
			}

			static inline uint8_t Joystick_GetStatus(void) ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t Joystick_GetStatus(void)
			{
				return (((uint8_t)~PINB & JOY_BMASK) | (((uint8_t)~PINE & JOY_EMASK) >> JOY_PORTE_MASK_SHIFT));
     2ea:	43 b1       	in	r20, 0x03	; 3
     2ec:	2c b1       	in	r18, 0x0c	; 12
     2ee:	20 95       	com	r18
     2f0:	30 e0       	ldi	r19, 0x00	; 0
     2f2:	20 73       	andi	r18, 0x30	; 48
     2f4:	30 70       	andi	r19, 0x00	; 0
     2f6:	35 95       	asr	r19
     2f8:	27 95       	ror	r18
     2fa:	40 95       	com	r20
     2fc:	40 7e       	andi	r20, 0xE0	; 224
     2fe:	42 2b       	or	r20, r18
			}

			static inline uint8_t Buttons_GetStatus(void) ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t Buttons_GetStatus(void)
			{
				return ((PINE & BUTTONS_BUTTON1) ^ BUTTONS_BUTTON1);
     300:	2c b1       	in	r18, 0x0c	; 12
     302:	20 95       	com	r18
     304:	24 70       	andi	r18, 0x04	; 4
     306:	30 e0       	ldi	r19, 0x00	; 0
	uint8_t JoyStatus_LCL    = Joystick_GetStatus();
	uint8_t ButtonStatus_LCL = Buttons_GetStatus();

	/* Determine which interface must have its report generated */
	if (HIDInterfaceInfo == &Keyboard_HID_Interface)
     308:	51 e0       	ldi	r21, 0x01	; 1
     30a:	80 31       	cpi	r24, 0x10	; 16
     30c:	95 07       	cpc	r25, r21
     30e:	f9 f4       	brne	.+62     	; 0x34e <CALLBACK_HID_Device_CreateHIDReport+0x6c>
	{
		USB_KeyboardReport_Data_t* KeyboardReport = (USB_KeyboardReport_Data_t*)ReportData;

		/* If first board button not being held down, no keyboard report */
		if (!(ButtonStatus_LCL & BUTTONS_BUTTON1))
     310:	21 15       	cp	r18, r1
     312:	31 05       	cpc	r19, r1
     314:	d9 f1       	breq	.+118    	; 0x38c <CALLBACK_HID_Device_CreateHIDReport+0xaa>
		  return 0;

		KeyboardReport->Modifier = HID_KEYBOARD_MODIFIER_LEFTSHIFT;
     316:	82 e0       	ldi	r24, 0x02	; 2
     318:	80 83       	st	Z, r24

		if (JoyStatus_LCL & JOY_UP)
     31a:	47 ff       	sbrs	r20, 7
     31c:	02 c0       	rjmp	.+4      	; 0x322 <CALLBACK_HID_Device_CreateHIDReport+0x40>
		  KeyboardReport->KeyCode[0] = HID_KEYBOARD_SC_A;
     31e:	84 e0       	ldi	r24, 0x04	; 4
     320:	03 c0       	rjmp	.+6      	; 0x328 <CALLBACK_HID_Device_CreateHIDReport+0x46>
		else if (JoyStatus_LCL & JOY_DOWN)
     322:	44 ff       	sbrs	r20, 4
     324:	02 c0       	rjmp	.+4      	; 0x32a <CALLBACK_HID_Device_CreateHIDReport+0x48>
		  KeyboardReport->KeyCode[0] = HID_KEYBOARD_SC_B;
     326:	85 e0       	ldi	r24, 0x05	; 5
     328:	82 83       	std	Z+2, r24	; 0x02

		if (JoyStatus_LCL & JOY_LEFT)
     32a:	46 ff       	sbrs	r20, 6
     32c:	02 c0       	rjmp	.+4      	; 0x332 <CALLBACK_HID_Device_CreateHIDReport+0x50>
		  KeyboardReport->KeyCode[0] = HID_KEYBOARD_SC_C;
     32e:	86 e0       	ldi	r24, 0x06	; 6
     330:	03 c0       	rjmp	.+6      	; 0x338 <CALLBACK_HID_Device_CreateHIDReport+0x56>
		else if (JoyStatus_LCL & JOY_RIGHT)
     332:	43 ff       	sbrs	r20, 3
     334:	02 c0       	rjmp	.+4      	; 0x33a <CALLBACK_HID_Device_CreateHIDReport+0x58>
		  KeyboardReport->KeyCode[0] = HID_KEYBOARD_SC_D;
     336:	87 e0       	ldi	r24, 0x07	; 7
     338:	82 83       	std	Z+2, r24	; 0x02

		if (JoyStatus_LCL & JOY_PRESS)
     33a:	45 ff       	sbrs	r20, 5
     33c:	02 c0       	rjmp	.+4      	; 0x342 <CALLBACK_HID_Device_CreateHIDReport+0x60>
		  KeyboardReport->KeyCode[0] = HID_KEYBOARD_SC_E;
     33e:	88 e0       	ldi	r24, 0x08	; 8
     340:	82 83       	std	Z+2, r24	; 0x02

		*ReportSize = sizeof(USB_KeyboardReport_Data_t);
     342:	88 e0       	ldi	r24, 0x08	; 8
     344:	90 e0       	ldi	r25, 0x00	; 0
     346:	11 96       	adiw	r26, 0x01	; 1
     348:	9c 93       	st	X, r25
     34a:	8e 93       	st	-X, r24
     34c:	1f c0       	rjmp	.+62     	; 0x38c <CALLBACK_HID_Device_CreateHIDReport+0xaa>
	else
	{
		USB_MouseReport_Data_t* MouseReport = (USB_MouseReport_Data_t*)ReportData;

		/* If first board button being held down, no mouse report */
		if (ButtonStatus_LCL & BUTTONS_BUTTON1)
     34e:	21 15       	cp	r18, r1
     350:	31 05       	cpc	r19, r1
     352:	e1 f4       	brne	.+56     	; 0x38c <CALLBACK_HID_Device_CreateHIDReport+0xaa>
		  return 0;

		if (JoyStatus_LCL & JOY_UP)
     354:	47 ff       	sbrs	r20, 7
     356:	02 c0       	rjmp	.+4      	; 0x35c <CALLBACK_HID_Device_CreateHIDReport+0x7a>
		  MouseReport->Y = -1;
     358:	8f ef       	ldi	r24, 0xFF	; 255
     35a:	03 c0       	rjmp	.+6      	; 0x362 <CALLBACK_HID_Device_CreateHIDReport+0x80>
		else if (JoyStatus_LCL & JOY_DOWN)
     35c:	44 ff       	sbrs	r20, 4
     35e:	02 c0       	rjmp	.+4      	; 0x364 <CALLBACK_HID_Device_CreateHIDReport+0x82>
		  MouseReport->Y =  1;
     360:	81 e0       	ldi	r24, 0x01	; 1
     362:	82 83       	std	Z+2, r24	; 0x02

		if (JoyStatus_LCL & JOY_LEFT)
     364:	46 ff       	sbrs	r20, 6
     366:	02 c0       	rjmp	.+4      	; 0x36c <CALLBACK_HID_Device_CreateHIDReport+0x8a>
		  MouseReport->X = -1;
     368:	8f ef       	ldi	r24, 0xFF	; 255
     36a:	03 c0       	rjmp	.+6      	; 0x372 <CALLBACK_HID_Device_CreateHIDReport+0x90>
		else if (JoyStatus_LCL & JOY_RIGHT)
     36c:	43 ff       	sbrs	r20, 3
     36e:	02 c0       	rjmp	.+4      	; 0x374 <CALLBACK_HID_Device_CreateHIDReport+0x92>
		  MouseReport->X =  1;
     370:	81 e0       	ldi	r24, 0x01	; 1
     372:	81 83       	std	Z+1, r24	; 0x01

		if (JoyStatus_LCL & JOY_PRESS)
     374:	45 ff       	sbrs	r20, 5
     376:	03 c0       	rjmp	.+6      	; 0x37e <CALLBACK_HID_Device_CreateHIDReport+0x9c>
		  MouseReport->Button |= (1 << 0);
     378:	80 81       	ld	r24, Z
     37a:	81 60       	ori	r24, 0x01	; 1
     37c:	80 83       	st	Z, r24

		*ReportSize = sizeof(USB_MouseReport_Data_t);
     37e:	83 e0       	ldi	r24, 0x03	; 3
     380:	90 e0       	ldi	r25, 0x00	; 0
     382:	11 96       	adiw	r26, 0x01	; 1
     384:	9c 93       	st	X, r25
     386:	8e 93       	st	-X, r24
		return true;
     388:	81 e0       	ldi	r24, 0x01	; 1
     38a:	01 c0       	rjmp	.+2      	; 0x38e <CALLBACK_HID_Device_CreateHIDReport+0xac>
	{
		USB_MouseReport_Data_t* MouseReport = (USB_MouseReport_Data_t*)ReportData;

		/* If first board button being held down, no mouse report */
		if (ButtonStatus_LCL & BUTTONS_BUTTON1)
		  return 0;
     38c:	80 e0       	ldi	r24, 0x00	; 0
		  MouseReport->Button |= (1 << 0);

		*ReportSize = sizeof(USB_MouseReport_Data_t);
		return true;
	}
}
     38e:	1f 91       	pop	r17
     390:	0f 91       	pop	r16
     392:	08 95       	ret

00000394 <CALLBACK_HID_Device_ProcessHIDReport>:
                                          const uint8_t ReportID,
                                          const uint8_t ReportType,
                                          const void* ReportData,
                                          const uint16_t ReportSize)
{
	if (HIDInterfaceInfo == &Keyboard_HID_Interface)
     394:	41 e0       	ldi	r20, 0x01	; 1
     396:	80 31       	cpi	r24, 0x10	; 16
     398:	94 07       	cpc	r25, r20
     39a:	61 f4       	brne	.+24     	; 0x3b4 <CALLBACK_HID_Device_ProcessHIDReport+0x20>
	{
		uint8_t  LEDMask   = LEDS_NO_LEDS;
		uint8_t* LEDReport = (uint8_t*)ReportData;

		if (*LEDReport & HID_KEYBOARD_LED_NUMLOCK)
     39c:	f9 01       	movw	r30, r18
     39e:	90 81       	ld	r25, Z
     3a0:	90 ff       	sbrs	r25, 0
     3a2:	02 c0       	rjmp	.+4      	; 0x3a8 <CALLBACK_HID_Device_ProcessHIDReport+0x14>
		  LEDMask |= LEDS_LED1;
     3a4:	80 e1       	ldi	r24, 0x10	; 16
     3a6:	01 c0       	rjmp	.+2      	; 0x3aa <CALLBACK_HID_Device_ProcessHIDReport+0x16>
                                          const void* ReportData,
                                          const uint16_t ReportSize)
{
	if (HIDInterfaceInfo == &Keyboard_HID_Interface)
	{
		uint8_t  LEDMask   = LEDS_NO_LEDS;
     3a8:	80 e0       	ldi	r24, 0x00	; 0
		uint8_t* LEDReport = (uint8_t*)ReportData;

		if (*LEDReport & HID_KEYBOARD_LED_NUMLOCK)
		  LEDMask |= LEDS_LED1;

		if (*LEDReport & HID_KEYBOARD_LED_CAPSLOCK)
     3aa:	91 fd       	sbrc	r25, 1
		  LEDMask |= LEDS_LED3;
     3ac:	80 68       	ori	r24, 0x80	; 128

		if (*LEDReport & HID_KEYBOARD_LED_SCROLLLOCK)
     3ae:	92 fd       	sbrc	r25, 2
		  LEDMask |= LEDS_LED4;
     3b0:	80 64       	ori	r24, 0x40	; 64

		LEDs_SetAllLEDs(LEDMask);
     3b2:	22 cf       	rjmp	.-444    	; 0x1f8 <LEDs_SetAllLEDs>
     3b4:	08 95       	ret

000003b6 <CALLBACK_USB_GetDescriptor>:
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
     3b6:	93 30       	cpi	r25, 0x03	; 3
     3b8:	89 f0       	breq	.+34     	; 0x3dc <CALLBACK_USB_GetDescriptor+0x26>
     3ba:	94 30       	cpi	r25, 0x04	; 4
     3bc:	28 f4       	brcc	.+10     	; 0x3c8 <CALLBACK_USB_GetDescriptor+0x12>
     3be:	91 30       	cpi	r25, 0x01	; 1
     3c0:	69 f1       	breq	.+90     	; 0x41c <CALLBACK_USB_GetDescriptor+0x66>
     3c2:	92 30       	cpi	r25, 0x02	; 2
     3c4:	81 f5       	brne	.+96     	; 0x426 <CALLBACK_USB_GetDescriptor+0x70>
     3c6:	05 c0       	rjmp	.+10     	; 0x3d2 <CALLBACK_USB_GetDescriptor+0x1c>
     3c8:	91 32       	cpi	r25, 0x21	; 33
     3ca:	d1 f0       	breq	.+52     	; 0x400 <CALLBACK_USB_GetDescriptor+0x4a>
     3cc:	92 32       	cpi	r25, 0x22	; 34
     3ce:	59 f5       	brne	.+86     	; 0x426 <CALLBACK_USB_GetDescriptor+0x70>
     3d0:	1e c0       	rjmp	.+60     	; 0x40e <CALLBACK_USB_GetDescriptor+0x58>
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
			Size    = sizeof(USB_Descriptor_Configuration_t);
     3d2:	8b e3       	ldi	r24, 0x3B	; 59
     3d4:	90 e0       	ldi	r25, 0x00	; 0
		case DTYPE_Device:
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
     3d6:	e2 ef       	ldi	r30, 0xF2	; 242
     3d8:	f0 e0       	ldi	r31, 0x00	; 0
			Size    = sizeof(USB_Descriptor_Configuration_t);
			break;
     3da:	31 c0       	rjmp	.+98     	; 0x43e <CALLBACK_USB_GetDescriptor+0x88>
		case DTYPE_String:
			switch (DescriptorNumber)
     3dc:	81 30       	cpi	r24, 0x01	; 1
     3de:	41 f0       	breq	.+16     	; 0x3f0 <CALLBACK_USB_GetDescriptor+0x3a>
     3e0:	81 30       	cpi	r24, 0x01	; 1
     3e2:	18 f0       	brcs	.+6      	; 0x3ea <CALLBACK_USB_GetDescriptor+0x34>
     3e4:	82 30       	cpi	r24, 0x02	; 2
     3e6:	f9 f4       	brne	.+62     	; 0x426 <CALLBACK_USB_GetDescriptor+0x70>
     3e8:	06 c0       	rjmp	.+12     	; 0x3f6 <CALLBACK_USB_GetDescriptor+0x40>
			{
				case 0x00:
					Address = &LanguageString;
					Size    = pgm_read_byte(&LanguageString.Header.Size);
     3ea:	ee ee       	ldi	r30, 0xEE	; 238
     3ec:	f0 e0       	ldi	r31, 0x00	; 0
     3ee:	05 c0       	rjmp	.+10     	; 0x3fa <CALLBACK_USB_GetDescriptor+0x44>
					break;
				case 0x01:
					Address = &ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
     3f0:	e4 ed       	ldi	r30, 0xD4	; 212
     3f2:	f0 e0       	ldi	r31, 0x00	; 0
     3f4:	02 c0       	rjmp	.+4      	; 0x3fa <CALLBACK_USB_GetDescriptor+0x44>
					break;
				case 0x02:
					Address = &ProductString;
					Size    = pgm_read_byte(&ProductString.Header.Size);
     3f6:	e8 e9       	ldi	r30, 0x98	; 152
     3f8:	f0 e0       	ldi	r31, 0x00	; 0
     3fa:	84 91       	lpm	r24, Z
     3fc:	90 e0       	ldi	r25, 0x00	; 0
					break;
     3fe:	1f c0       	rjmp	.+62     	; 0x43e <CALLBACK_USB_GetDescriptor+0x88>
			break;
		case HID_DTYPE_HID:
			if (!(wIndex))
			{
				Address = &ConfigurationDescriptor.HID1_KeyboardHID;
				Size    = sizeof(USB_HID_Descriptor_HID_t);
     400:	89 e0       	ldi	r24, 0x09	; 9
     402:	90 e0       	ldi	r25, 0x00	; 0
					break;
			}

			break;
		case HID_DTYPE_HID:
			if (!(wIndex))
     404:	66 23       	and	r22, r22
     406:	a1 f4       	brne	.+40     	; 0x430 <CALLBACK_USB_GetDescriptor+0x7a>
			{
				Address = &ConfigurationDescriptor.HID1_KeyboardHID;
     408:	e4 e0       	ldi	r30, 0x04	; 4
     40a:	f1 e0       	ldi	r31, 0x01	; 1
     40c:	18 c0       	rjmp	.+48     	; 0x43e <CALLBACK_USB_GetDescriptor+0x88>
				Size    = sizeof(USB_HID_Descriptor_HID_t);
			}

			break;
		case HID_DTYPE_Report:
			if (!(wIndex))
     40e:	66 23       	and	r22, r22
     410:	91 f4       	brne	.+36     	; 0x436 <CALLBACK_USB_GetDescriptor+0x80>
			{
				Address = &KeyboardReport;
				Size    = sizeof(KeyboardReport);
     412:	8f e3       	ldi	r24, 0x3F	; 63
     414:	90 e0       	ldi	r25, 0x00	; 0

			break;
		case HID_DTYPE_Report:
			if (!(wIndex))
			{
				Address = &KeyboardReport;
     416:	ef e3       	ldi	r30, 0x3F	; 63
     418:	f1 e0       	ldi	r31, 0x01	; 1
     41a:	11 c0       	rjmp	.+34     	; 0x43e <CALLBACK_USB_GetDescriptor+0x88>

	switch (DescriptorType)
	{
		case DTYPE_Device:
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
     41c:	82 e1       	ldi	r24, 0x12	; 18
     41e:	90 e0       	ldi	r25, 0x00	; 0
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
	{
		case DTYPE_Device:
			Address = &DeviceDescriptor;
     420:	ed e2       	ldi	r30, 0x2D	; 45
     422:	f1 e0       	ldi	r31, 0x01	; 1
     424:	0c c0       	rjmp	.+24     	; 0x43e <CALLBACK_USB_GetDescriptor+0x88>
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;
     426:	80 e0       	ldi	r24, 0x00	; 0
     428:	90 e0       	ldi	r25, 0x00	; 0
                                    const void** const DescriptorAddress)
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
     42a:	e0 e0       	ldi	r30, 0x00	; 0
     42c:	f0 e0       	ldi	r31, 0x00	; 0
     42e:	07 c0       	rjmp	.+14     	; 0x43e <CALLBACK_USB_GetDescriptor+0x88>
				Address = &ConfigurationDescriptor.HID1_KeyboardHID;
				Size    = sizeof(USB_HID_Descriptor_HID_t);
			}
			else
			{
				Address = &ConfigurationDescriptor.HID2_MouseHID;
     430:	ed e1       	ldi	r30, 0x1D	; 29
     432:	f1 e0       	ldi	r31, 0x01	; 1
     434:	04 c0       	rjmp	.+8      	; 0x43e <CALLBACK_USB_GetDescriptor+0x88>
				Size    = sizeof(KeyboardReport);
			}
			else
			{
				Address = &MouseReport;
				Size    = sizeof(MouseReport);
     436:	8a e3       	ldi	r24, 0x3A	; 58
     438:	90 e0       	ldi	r25, 0x00	; 0
				Address = &KeyboardReport;
				Size    = sizeof(KeyboardReport);
			}
			else
			{
				Address = &MouseReport;
     43a:	ee e7       	ldi	r30, 0x7E	; 126
     43c:	f1 e0       	ldi	r31, 0x01	; 1
			}

			break;
	}

	*DescriptorAddress = Address;
     43e:	da 01       	movw	r26, r20
     440:	11 96       	adiw	r26, 0x01	; 1
     442:	fc 93       	st	X, r31
     444:	ee 93       	st	-X, r30
	return Size;
}
     446:	08 95       	ret

00000448 <Endpoint_Write_Stream_LE>:
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
     448:	af 92       	push	r10
     44a:	bf 92       	push	r11
     44c:	cf 92       	push	r12
     44e:	df 92       	push	r13
     450:	ef 92       	push	r14
     452:	ff 92       	push	r15
     454:	1f 93       	push	r17
     456:	cf 93       	push	r28
     458:	df 93       	push	r29
     45a:	ec 01       	movw	r28, r24
     45c:	7b 01       	movw	r14, r22
     45e:	6a 01       	movw	r12, r20
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	uint16_t BytesInTransfer = 0;
	uint8_t  ErrorCode;

	if ((ErrorCode = Endpoint_WaitUntilReady()))
     460:	d7 d1       	rcall	.+942    	; 0x810 <Endpoint_WaitUntilReady>
     462:	18 2f       	mov	r17, r24
     464:	88 23       	and	r24, r24
     466:	a9 f5       	brne	.+106    	; 0x4d2 <Endpoint_Write_Stream_LE+0x8a>
     468:	c1 14       	cp	r12, r1
	  return ErrorCode;

	if (BytesProcessed != NULL)
     46a:	d1 04       	cpc	r13, r1
     46c:	39 f0       	breq	.+14     	; 0x47c <Endpoint_Write_Stream_LE+0x34>
     46e:	f6 01       	movw	r30, r12
	{
		Length -= *BytesProcessed;
     470:	20 81       	ld	r18, Z
     472:	31 81       	ldd	r19, Z+1	; 0x01
     474:	e2 1a       	sub	r14, r18
     476:	f3 0a       	sbc	r15, r19
     478:	c2 0f       	add	r28, r18
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
     47a:	d3 1f       	adc	r29, r19
     47c:	aa 24       	eor	r10, r10

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
     47e:	bb 24       	eor	r11, r11
     480:	23 c0       	rjmp	.+70     	; 0x4c8 <Endpoint_Write_Stream_LE+0x80>
     482:	80 91 e8 00 	lds	r24, 0x00E8
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
     486:	85 fd       	sbrc	r24, 5
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
	{
		if (!(Endpoint_IsReadWriteAllowed()))
     488:	16 c0       	rjmp	.+44     	; 0x4b6 <Endpoint_Write_Stream_LE+0x6e>
     48a:	80 91 e8 00 	lds	r24, 0x00E8
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     48e:	8e 77       	andi	r24, 0x7E	; 126
     490:	80 93 e8 00 	sts	0x00E8, r24
     494:	7f d4       	rcall	.+2302   	; 0xd94 <USB_USBTask>
		{
			TEMPLATE_CLEAR_ENDPOINT();

			#if !defined(INTERRUPT_CONTROL_ENDPOINT)
			USB_USBTask();
     496:	c1 14       	cp	r12, r1
     498:	d1 04       	cpc	r13, r1
			#endif

			if (BytesProcessed != NULL)
     49a:	49 f0       	breq	.+18     	; 0x4ae <Endpoint_Write_Stream_LE+0x66>
     49c:	f6 01       	movw	r30, r12
     49e:	80 81       	ld	r24, Z
			{
				*BytesProcessed += BytesInTransfer;
     4a0:	91 81       	ldd	r25, Z+1	; 0x01
     4a2:	8a 0d       	add	r24, r10
     4a4:	9b 1d       	adc	r25, r11
     4a6:	91 83       	std	Z+1, r25	; 0x01
     4a8:	80 83       	st	Z, r24
     4aa:	15 e0       	ldi	r17, 0x05	; 5
     4ac:	12 c0       	rjmp	.+36     	; 0x4d2 <Endpoint_Write_Stream_LE+0x8a>
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
     4ae:	b0 d1       	rcall	.+864    	; 0x810 <Endpoint_WaitUntilReady>
     4b0:	88 23       	and	r24, r24
			}

			if ((ErrorCode = Endpoint_WaitUntilReady()))
     4b2:	51 f0       	breq	.+20     	; 0x4c8 <Endpoint_Write_Stream_LE+0x80>
     4b4:	0d c0       	rjmp	.+26     	; 0x4d0 <Endpoint_Write_Stream_LE+0x88>
     4b6:	89 91       	ld	r24, Y+
     4b8:	80 93 f1 00 	sts	0x00F1, r24
			  return ErrorCode;
		}
		else
		{
			TEMPLATE_TRANSFER_BYTE(DataStream);
     4bc:	08 94       	sec
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     4be:	e1 08       	sbc	r14, r1
     4c0:	f1 08       	sbc	r15, r1
			TEMPLATE_BUFFER_MOVE(DataStream, 1);
			Length--;
     4c2:	08 94       	sec
     4c4:	a1 1c       	adc	r10, r1
     4c6:	b1 1c       	adc	r11, r1
			BytesInTransfer++;
     4c8:	e1 14       	cp	r14, r1
     4ca:	f1 04       	cpc	r15, r1
     4cc:	d1 f6       	brne	.-76     	; 0x482 <Endpoint_Write_Stream_LE+0x3a>
	{
		Length -= *BytesProcessed;
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
     4ce:	01 c0       	rjmp	.+2      	; 0x4d2 <Endpoint_Write_Stream_LE+0x8a>
     4d0:	18 2f       	mov	r17, r24
     4d2:	81 2f       	mov	r24, r17
     4d4:	df 91       	pop	r29
			{
				*BytesProcessed += BytesInTransfer;
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
			}

			if ((ErrorCode = Endpoint_WaitUntilReady()))
     4d6:	cf 91       	pop	r28
			BytesInTransfer++;
		}
	}

	return ENDPOINT_RWSTREAM_NoError;
}
     4d8:	1f 91       	pop	r17
     4da:	ff 90       	pop	r15
     4dc:	ef 90       	pop	r14
     4de:	df 90       	pop	r13
     4e0:	cf 90       	pop	r12
     4e2:	bf 90       	pop	r11
     4e4:	af 90       	pop	r10
     4e6:	08 95       	ret

000004e8 <Endpoint_Write_Control_Stream_LE>:
     4e8:	20 91 46 01 	lds	r18, 0x0146
     4ec:	30 91 47 01 	lds	r19, 0x0147
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
     4f0:	26 17       	cp	r18, r22
     4f2:	37 07       	cpc	r19, r23
     4f4:	20 f4       	brcc	.+8      	; 0x4fe <Endpoint_Write_Control_Stream_LE+0x16>
     4f6:	b9 01       	movw	r22, r18
     4f8:	fc 01       	movw	r30, r24
     4fa:	20 e0       	ldi	r18, 0x00	; 0
     4fc:	37 c0       	rjmp	.+110    	; 0x56c <Endpoint_Write_Control_Stream_LE+0x84>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
     4fe:	61 15       	cp	r22, r1
     500:	71 05       	cpc	r23, r1
     502:	d1 f7       	brne	.-12     	; 0x4f8 <Endpoint_Write_Control_Stream_LE+0x10>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     504:	20 91 e8 00 	lds	r18, 0x00E8
     508:	2e 77       	andi	r18, 0x7E	; 126
     50a:	20 93 e8 00 	sts	0x00E8, r18
     50e:	f4 cf       	rjmp	.-24     	; 0x4f8 <Endpoint_Write_Control_Stream_LE+0x10>
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     510:	80 91 3f 01 	lds	r24, 0x013F

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     514:	88 23       	and	r24, r24
     516:	09 f4       	brne	.+2      	; 0x51a <Endpoint_Write_Control_Stream_LE+0x32>
     518:	3f c0       	rjmp	.+126    	; 0x598 <Endpoint_Write_Control_Stream_LE+0xb0>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     51a:	85 30       	cpi	r24, 0x05	; 5
     51c:	c9 f1       	breq	.+114    	; 0x590 <Endpoint_Write_Control_Stream_LE+0xa8>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     51e:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
     522:	83 fd       	sbrc	r24, 3
     524:	37 c0       	rjmp	.+110    	; 0x594 <Endpoint_Write_Control_Stream_LE+0xac>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     526:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
     52a:	82 fd       	sbrc	r24, 2
     52c:	2b c0       	rjmp	.+86     	; 0x584 <Endpoint_Write_Control_Stream_LE+0x9c>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     52e:	80 91 e8 00 	lds	r24, 0x00E8
		  break;

		if (Endpoint_IsINReady())
     532:	80 ff       	sbrs	r24, 0
     534:	1b c0       	rjmp	.+54     	; 0x56c <Endpoint_Write_Control_Stream_LE+0x84>
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
     536:	80 91 f2 00 	lds	r24, 0x00F2
     53a:	90 91 f3 00 	lds	r25, 0x00F3
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
     53e:	06 c0       	rjmp	.+12     	; 0x54c <Endpoint_Write_Control_Stream_LE+0x64>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
     540:	21 91       	ld	r18, Z+
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     542:	20 93 f1 00 	sts	0x00F1, r18
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
     546:	61 50       	subi	r22, 0x01	; 1
     548:	70 40       	sbci	r23, 0x00	; 0
				BytesInEndpoint++;
     54a:	01 96       	adiw	r24, 0x01	; 1

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
     54c:	61 15       	cp	r22, r1
     54e:	71 05       	cpc	r23, r1
     550:	19 f0       	breq	.+6      	; 0x558 <Endpoint_Write_Control_Stream_LE+0x70>
     552:	88 30       	cpi	r24, 0x08	; 8
     554:	91 05       	cpc	r25, r1
     556:	a0 f3       	brcs	.-24     	; 0x540 <Endpoint_Write_Control_Stream_LE+0x58>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
     558:	21 e0       	ldi	r18, 0x01	; 1
     55a:	88 30       	cpi	r24, 0x08	; 8
     55c:	91 05       	cpc	r25, r1
     55e:	09 f0       	breq	.+2      	; 0x562 <Endpoint_Write_Control_Stream_LE+0x7a>
     560:	20 e0       	ldi	r18, 0x00	; 0
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     562:	80 91 e8 00 	lds	r24, 0x00E8
     566:	8e 77       	andi	r24, 0x7E	; 126
     568:	80 93 e8 00 	sts	0x00E8, r24
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
     56c:	61 15       	cp	r22, r1
     56e:	71 05       	cpc	r23, r1
     570:	79 f6       	brne	.-98     	; 0x510 <Endpoint_Write_Control_Stream_LE+0x28>
     572:	22 23       	and	r18, r18
     574:	69 f6       	brne	.-102    	; 0x510 <Endpoint_Write_Control_Stream_LE+0x28>
     576:	06 c0       	rjmp	.+12     	; 0x584 <Endpoint_Write_Control_Stream_LE+0x9c>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     578:	80 91 3f 01 	lds	r24, 0x013F

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     57c:	88 23       	and	r24, r24
     57e:	61 f0       	breq	.+24     	; 0x598 <Endpoint_Write_Control_Stream_LE+0xb0>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     580:	85 30       	cpi	r24, 0x05	; 5
     582:	61 f0       	breq	.+24     	; 0x59c <Endpoint_Write_Control_Stream_LE+0xb4>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     584:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
     588:	82 ff       	sbrs	r24, 2
     58a:	f6 cf       	rjmp	.-20     	; 0x578 <Endpoint_Write_Control_Stream_LE+0x90>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
     58c:	80 e0       	ldi	r24, 0x00	; 0
     58e:	08 95       	ret
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
     590:	83 e0       	ldi	r24, 0x03	; 3
     592:	08 95       	ret
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
     594:	81 e0       	ldi	r24, 0x01	; 1
     596:	08 95       	ret
	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
     598:	82 e0       	ldi	r24, 0x02	; 2
     59a:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
     59c:	83 e0       	ldi	r24, 0x03	; 3
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
     59e:	08 95       	ret

000005a0 <Endpoint_Read_Control_Stream_LE>:
uint8_t TEMPLATE_FUNC_NAME (void* const Buffer,
                            uint16_t Length)
{
	uint8_t* DataStream = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));

	if (!(Length))
     5a0:	61 15       	cp	r22, r1
     5a2:	71 05       	cpc	r23, r1
     5a4:	29 f4       	brne	.+10     	; 0x5b0 <Endpoint_Read_Control_Stream_LE+0x10>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     5a6:	20 91 e8 00 	lds	r18, 0x00E8
     5aa:	2b 77       	andi	r18, 0x7B	; 123
     5ac:	20 93 e8 00 	sts	0x00E8, r18

#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (void* const Buffer,
                            uint16_t Length)
{
     5b0:	38 2f       	mov	r19, r24
     5b2:	29 2f       	mov	r18, r25
     5b4:	26 c0       	rjmp	.+76     	; 0x602 <Endpoint_Read_Control_Stream_LE+0x62>
	if (!(Length))
	  Endpoint_ClearOUT();

	while (Length)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     5b6:	80 91 3f 01 	lds	r24, 0x013F

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     5ba:	88 23       	and	r24, r24
     5bc:	b1 f1       	breq	.+108    	; 0x62a <Endpoint_Read_Control_Stream_LE+0x8a>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     5be:	85 30       	cpi	r24, 0x05	; 5
     5c0:	81 f1       	breq	.+96     	; 0x622 <Endpoint_Read_Control_Stream_LE+0x82>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     5c2:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
     5c6:	83 fd       	sbrc	r24, 3
     5c8:	2e c0       	rjmp	.+92     	; 0x626 <Endpoint_Read_Control_Stream_LE+0x86>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     5ca:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;

		if (Endpoint_IsOUTReceived())
     5ce:	82 ff       	sbrs	r24, 2
     5d0:	f2 cf       	rjmp	.-28     	; 0x5b6 <Endpoint_Read_Control_Stream_LE+0x16>
     5d2:	e3 2f       	mov	r30, r19
     5d4:	f2 2f       	mov	r31, r18
     5d6:	08 c0       	rjmp	.+16     	; 0x5e8 <Endpoint_Read_Control_Stream_LE+0x48>
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
     5d8:	80 91 f1 00 	lds	r24, 0x00F1
		{
			while (Length && Endpoint_BytesInEndpoint())
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
     5dc:	81 93       	st	Z+, r24
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
     5de:	3e 2f       	mov	r19, r30
     5e0:	2f 2f       	mov	r18, r31
				Length--;
     5e2:	61 50       	subi	r22, 0x01	; 1
     5e4:	70 40       	sbci	r23, 0x00	; 0
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;

		if (Endpoint_IsOUTReceived())
		{
			while (Length && Endpoint_BytesInEndpoint())
     5e6:	41 f0       	breq	.+16     	; 0x5f8 <Endpoint_Read_Control_Stream_LE+0x58>
     5e8:	3e 2f       	mov	r19, r30
     5ea:	2f 2f       	mov	r18, r31
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
     5ec:	80 91 f2 00 	lds	r24, 0x00F2
     5f0:	90 91 f3 00 	lds	r25, 0x00F3
     5f4:	00 97       	sbiw	r24, 0x00	; 0
     5f6:	81 f7       	brne	.-32     	; 0x5d8 <Endpoint_Read_Control_Stream_LE+0x38>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     5f8:	80 91 e8 00 	lds	r24, 0x00E8
     5fc:	8b 77       	andi	r24, 0x7B	; 123
     5fe:	80 93 e8 00 	sts	0x00E8, r24
	uint8_t* DataStream = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));

	if (!(Length))
	  Endpoint_ClearOUT();

	while (Length)
     602:	61 15       	cp	r22, r1
     604:	71 05       	cpc	r23, r1
     606:	b9 f6       	brne	.-82     	; 0x5b6 <Endpoint_Read_Control_Stream_LE+0x16>
     608:	06 c0       	rjmp	.+12     	; 0x616 <Endpoint_Read_Control_Stream_LE+0x76>
		}
	}

	while (!(Endpoint_IsINReady()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     60a:	80 91 3f 01 	lds	r24, 0x013F

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     60e:	88 23       	and	r24, r24
     610:	61 f0       	breq	.+24     	; 0x62a <Endpoint_Read_Control_Stream_LE+0x8a>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     612:	85 30       	cpi	r24, 0x05	; 5
     614:	61 f0       	breq	.+24     	; 0x62e <Endpoint_Read_Control_Stream_LE+0x8e>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     616:	80 91 e8 00 	lds	r24, 0x00E8

			Endpoint_ClearOUT();
		}
	}

	while (!(Endpoint_IsINReady()))
     61a:	80 ff       	sbrs	r24, 0
     61c:	f6 cf       	rjmp	.-20     	; 0x60a <Endpoint_Read_Control_Stream_LE+0x6a>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
     61e:	80 e0       	ldi	r24, 0x00	; 0
     620:	08 95       	ret
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
     622:	83 e0       	ldi	r24, 0x03	; 3
     624:	08 95       	ret
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
     626:	81 e0       	ldi	r24, 0x01	; 1
     628:	08 95       	ret
	while (!(Endpoint_IsINReady()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
     62a:	82 e0       	ldi	r24, 0x02	; 2
     62c:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
     62e:	83 e0       	ldi	r24, 0x03	; 3
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
     630:	08 95       	ret

00000632 <Endpoint_Write_Control_PStream_LE>:
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
     632:	20 91 46 01 	lds	r18, 0x0146
     636:	30 91 47 01 	lds	r19, 0x0147
     63a:	26 17       	cp	r18, r22
     63c:	37 07       	cpc	r19, r23
     63e:	20 f4       	brcc	.+8      	; 0x648 <Endpoint_Write_Control_PStream_LE+0x16>
     640:	b9 01       	movw	r22, r18
     642:	fc 01       	movw	r30, r24
     644:	20 e0       	ldi	r18, 0x00	; 0
     646:	38 c0       	rjmp	.+112    	; 0x6b8 <Endpoint_Write_Control_PStream_LE+0x86>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
     648:	61 15       	cp	r22, r1
     64a:	71 05       	cpc	r23, r1
     64c:	d1 f7       	brne	.-12     	; 0x642 <Endpoint_Write_Control_PStream_LE+0x10>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     64e:	20 91 e8 00 	lds	r18, 0x00E8
     652:	2e 77       	andi	r18, 0x7E	; 126
     654:	20 93 e8 00 	sts	0x00E8, r18
     658:	f4 cf       	rjmp	.-24     	; 0x642 <Endpoint_Write_Control_PStream_LE+0x10>
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     65a:	80 91 3f 01 	lds	r24, 0x013F

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     65e:	88 23       	and	r24, r24
     660:	09 f4       	brne	.+2      	; 0x664 <Endpoint_Write_Control_PStream_LE+0x32>
     662:	40 c0       	rjmp	.+128    	; 0x6e4 <Endpoint_Write_Control_PStream_LE+0xb2>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     664:	85 30       	cpi	r24, 0x05	; 5
     666:	d1 f1       	breq	.+116    	; 0x6dc <Endpoint_Write_Control_PStream_LE+0xaa>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     668:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
     66c:	83 fd       	sbrc	r24, 3
     66e:	38 c0       	rjmp	.+112    	; 0x6e0 <Endpoint_Write_Control_PStream_LE+0xae>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     670:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
     674:	82 fd       	sbrc	r24, 2
     676:	2c c0       	rjmp	.+88     	; 0x6d0 <Endpoint_Write_Control_PStream_LE+0x9e>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     678:	80 91 e8 00 	lds	r24, 0x00E8
		  break;

		if (Endpoint_IsINReady())
     67c:	80 ff       	sbrs	r24, 0
     67e:	1c c0       	rjmp	.+56     	; 0x6b8 <Endpoint_Write_Control_PStream_LE+0x86>
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
     680:	80 91 f2 00 	lds	r24, 0x00F2
     684:	90 91 f3 00 	lds	r25, 0x00F3
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
     688:	07 c0       	rjmp	.+14     	; 0x698 <Endpoint_Write_Control_PStream_LE+0x66>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
     68a:	24 91       	lpm	r18, Z
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     68c:	20 93 f1 00 	sts	0x00F1, r18
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
     690:	31 96       	adiw	r30, 0x01	; 1
				Length--;
     692:	61 50       	subi	r22, 0x01	; 1
     694:	70 40       	sbci	r23, 0x00	; 0
				BytesInEndpoint++;
     696:	01 96       	adiw	r24, 0x01	; 1

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
     698:	61 15       	cp	r22, r1
     69a:	71 05       	cpc	r23, r1
     69c:	19 f0       	breq	.+6      	; 0x6a4 <Endpoint_Write_Control_PStream_LE+0x72>
     69e:	88 30       	cpi	r24, 0x08	; 8
     6a0:	91 05       	cpc	r25, r1
     6a2:	98 f3       	brcs	.-26     	; 0x68a <Endpoint_Write_Control_PStream_LE+0x58>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
     6a4:	21 e0       	ldi	r18, 0x01	; 1
     6a6:	88 30       	cpi	r24, 0x08	; 8
     6a8:	91 05       	cpc	r25, r1
     6aa:	09 f0       	breq	.+2      	; 0x6ae <Endpoint_Write_Control_PStream_LE+0x7c>
     6ac:	20 e0       	ldi	r18, 0x00	; 0
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     6ae:	80 91 e8 00 	lds	r24, 0x00E8
     6b2:	8e 77       	andi	r24, 0x7E	; 126
     6b4:	80 93 e8 00 	sts	0x00E8, r24
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
     6b8:	61 15       	cp	r22, r1
     6ba:	71 05       	cpc	r23, r1
     6bc:	71 f6       	brne	.-100    	; 0x65a <Endpoint_Write_Control_PStream_LE+0x28>
     6be:	22 23       	and	r18, r18
     6c0:	61 f6       	brne	.-104    	; 0x65a <Endpoint_Write_Control_PStream_LE+0x28>
     6c2:	06 c0       	rjmp	.+12     	; 0x6d0 <Endpoint_Write_Control_PStream_LE+0x9e>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     6c4:	80 91 3f 01 	lds	r24, 0x013F

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     6c8:	88 23       	and	r24, r24
     6ca:	61 f0       	breq	.+24     	; 0x6e4 <Endpoint_Write_Control_PStream_LE+0xb2>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     6cc:	85 30       	cpi	r24, 0x05	; 5
     6ce:	61 f0       	breq	.+24     	; 0x6e8 <Endpoint_Write_Control_PStream_LE+0xb6>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     6d0:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
     6d4:	82 ff       	sbrs	r24, 2
     6d6:	f6 cf       	rjmp	.-20     	; 0x6c4 <Endpoint_Write_Control_PStream_LE+0x92>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
     6d8:	80 e0       	ldi	r24, 0x00	; 0
     6da:	08 95       	ret
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
     6dc:	83 e0       	ldi	r24, 0x03	; 3
     6de:	08 95       	ret
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
     6e0:	81 e0       	ldi	r24, 0x01	; 1
     6e2:	08 95       	ret
	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
     6e4:	82 e0       	ldi	r24, 0x02	; 2
     6e6:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
     6e8:	83 e0       	ldi	r24, 0x03	; 3
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
     6ea:	08 95       	ret

000006ec <Endpoint_ConfigureEndpoint_Prv>:
	UECFG0X = UECFG0XData;
	UECFG1X = UECFG1XData;

	return Endpoint_IsConfigured();
#else
	for (uint8_t EPNum = Number; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
     6ec:	98 2f       	mov	r25, r24
     6ee:	2a c0       	rjmp	.+84     	; 0x744 <Endpoint_ConfigureEndpoint_Prv+0x58>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     6f0:	90 93 e9 00 	sts	0x00E9, r25
		uint8_t UECFG1XTemp;
		uint8_t UEIENXTemp;

		Endpoint_SelectEndpoint(EPNum);

		if (EPNum == Number)
     6f4:	98 17       	cp	r25, r24
     6f6:	39 f0       	breq	.+14     	; 0x706 <Endpoint_ConfigureEndpoint_Prv+0x1a>
			UECFG1XTemp = UECFG1XData;
			UEIENXTemp  = 0;
		}
		else
		{
			UECFG0XTemp = UECFG0X;
     6f8:	70 91 ec 00 	lds	r23, 0x00EC
			UECFG1XTemp = UECFG1X;
     6fc:	20 91 ed 00 	lds	r18, 0x00ED
			UEIENXTemp  = UEIENX;
     700:	50 91 f0 00 	lds	r21, 0x00F0
     704:	03 c0       	rjmp	.+6      	; 0x70c <Endpoint_ConfigureEndpoint_Prv+0x20>
		Endpoint_SelectEndpoint(EPNum);

		if (EPNum == Number)
		{
			UECFG0XTemp = UECFG0XData;
			UECFG1XTemp = UECFG1XData;
     706:	24 2f       	mov	r18, r20

		Endpoint_SelectEndpoint(EPNum);

		if (EPNum == Number)
		{
			UECFG0XTemp = UECFG0XData;
     708:	76 2f       	mov	r23, r22
			UECFG1XTemp = UECFG1XData;
			UEIENXTemp  = 0;
     70a:	50 e0       	ldi	r21, 0x00	; 0
			UECFG0XTemp = UECFG0X;
			UECFG1XTemp = UECFG1X;
			UEIENXTemp  = UEIENX;
		}

		if (!(UECFG1XTemp & (1 << ALLOC)))
     70c:	21 ff       	sbrs	r18, 1
     70e:	19 c0       	rjmp	.+50     	; 0x742 <Endpoint_ConfigureEndpoint_Prv+0x56>
			 *  to and from a host.
			 */
			static inline void Endpoint_DisableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_DisableEndpoint(void)
			{
				UECONX &= ~(1 << EPEN);
     710:	30 91 eb 00 	lds	r19, 0x00EB
     714:	3e 7f       	andi	r19, 0xFE	; 254
     716:	30 93 eb 00 	sts	0x00EB, r19
		  continue;

		Endpoint_DisableEndpoint();
		UECFG1X &= ~(1 << ALLOC);
     71a:	30 91 ed 00 	lds	r19, 0x00ED
     71e:	3d 7f       	andi	r19, 0xFD	; 253
     720:	30 93 ed 00 	sts	0x00ED, r19
			 *  \note Endpoints must first be configured properly via \ref Endpoint_ConfigureEndpoint().
			 */
			static inline void Endpoint_EnableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_EnableEndpoint(void)
			{
				UECONX |= (1 << EPEN);
     724:	30 91 eb 00 	lds	r19, 0x00EB
     728:	31 60       	ori	r19, 0x01	; 1
     72a:	30 93 eb 00 	sts	0x00EB, r19

		Endpoint_EnableEndpoint();
		UECFG0X = UECFG0XTemp;
     72e:	70 93 ec 00 	sts	0x00EC, r23
		UECFG1X = UECFG1XTemp;
     732:	20 93 ed 00 	sts	0x00ED, r18
		UEIENX  = UEIENXTemp;
     736:	50 93 f0 00 	sts	0x00F0, r21
			 *  \return Boolean \c true if the currently selected endpoint has been configured, \c false otherwise.
			 */
			static inline bool Endpoint_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsConfigured(void)
			{
				return ((UESTA0X & (1 << CFGOK)) ? true : false);
     73a:	20 91 ee 00 	lds	r18, 0x00EE

		if (!(Endpoint_IsConfigured()))
     73e:	27 ff       	sbrs	r18, 7
     740:	08 c0       	rjmp	.+16     	; 0x752 <Endpoint_ConfigureEndpoint_Prv+0x66>
	UECFG0X = UECFG0XData;
	UECFG1X = UECFG1XData;

	return Endpoint_IsConfigured();
#else
	for (uint8_t EPNum = Number; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
     742:	9f 5f       	subi	r25, 0xFF	; 255
     744:	97 30       	cpi	r25, 0x07	; 7
     746:	a0 f2       	brcs	.-88     	; 0x6f0 <Endpoint_ConfigureEndpoint_Prv+0x4>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     748:	8f 70       	andi	r24, 0x0F	; 15
     74a:	80 93 e9 00 	sts	0x00E9, r24
		if (!(Endpoint_IsConfigured()))
		  return false;
	}

	Endpoint_SelectEndpoint(Number);
	return true;
     74e:	81 e0       	ldi	r24, 0x01	; 1
     750:	08 95       	ret
		UECFG0X = UECFG0XTemp;
		UECFG1X = UECFG1XTemp;
		UEIENX  = UEIENXTemp;

		if (!(Endpoint_IsConfigured()))
		  return false;
     752:	80 e0       	ldi	r24, 0x00	; 0
	}

	Endpoint_SelectEndpoint(Number);
	return true;
#endif
}
     754:	08 95       	ret

00000756 <Endpoint_ConfigureEndpointTable>:
uint8_t USB_Device_ControlEndpointSize = ENDPOINT_CONTROLEP_DEFAULT_SIZE;
#endif

bool Endpoint_ConfigureEndpointTable(const USB_Endpoint_Table_t* const Table,
                                     const uint8_t Entries)
{
     756:	0f 93       	push	r16
     758:	1f 93       	push	r17
     75a:	cf 93       	push	r28
     75c:	df 93       	push	r29
     75e:	16 2f       	mov	r17, r22
	{
		if (!(Table[i].Address))
		  continue;
	
		if (!(Endpoint_ConfigureEndpoint(Table[i].Address, Table[i].Type, Table[i].Size, Table[i].Banks)))
		  return false;
     760:	ec 01       	movw	r28, r24
#endif

bool Endpoint_ConfigureEndpointTable(const USB_Endpoint_Table_t* const Table,
                                     const uint8_t Entries)
{
	for (uint8_t i = 0; i < Entries; i++)
     762:	00 e0       	ldi	r16, 0x00	; 0
     764:	2a c0       	rjmp	.+84     	; 0x7ba <Endpoint_ConfigureEndpointTable+0x64>
	{
		if (!(Table[i].Address))
     766:	98 81       	ld	r25, Y
     768:	99 23       	and	r25, r25
     76a:	29 f1       	breq	.+74     	; 0x7b6 <Endpoint_ConfigureEndpointTable+0x60>
		  continue;
	
		if (!(Endpoint_ConfigureEndpoint(Table[i].Address, Table[i].Type, Table[i].Size, Table[i].Banks)))
     76c:	6b 81       	ldd	r22, Y+3	; 0x03
     76e:	e9 81       	ldd	r30, Y+1	; 0x01
     770:	fa 81       	ldd	r31, Y+2	; 0x02
     772:	2c 81       	ldd	r18, Y+4	; 0x04
			static inline bool Endpoint_ConfigureEndpoint(const uint8_t Address,
			                                              const uint8_t Type,
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);
     774:	89 2f       	mov	r24, r25
     776:	8f 70       	andi	r24, 0x0F	; 15

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
     778:	87 30       	cpi	r24, 0x07	; 7
     77a:	18 f5       	brcc	.+70     	; 0x7c2 <Endpoint_ConfigureEndpointTable+0x6c>
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
				                                      ((Type << EPTYPE0) | ((Address & ENDPOINT_DIR_IN) ? (1 << EPDIR) : 0)),
     77c:	62 95       	swap	r22
     77e:	66 0f       	add	r22, r22
     780:	66 0f       	add	r22, r22
     782:	60 7c       	andi	r22, 0xC0	; 192
     784:	99 1f       	adc	r25, r25
     786:	99 27       	eor	r25, r25
     788:	99 1f       	adc	r25, r25
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
     78a:	69 2b       	or	r22, r25
     78c:	22 30       	cpi	r18, 0x02	; 2
     78e:	10 f0       	brcs	.+4      	; 0x794 <Endpoint_ConfigureEndpointTable+0x3e>
     790:	96 e0       	ldi	r25, 0x06	; 6
     792:	01 c0       	rjmp	.+2      	; 0x796 <Endpoint_ConfigureEndpointTable+0x40>
     794:	92 e0       	ldi	r25, 0x02	; 2
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes) ATTR_WARN_UNUSED_RESULT ATTR_CONST
			                                                                       ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;
     796:	28 e0       	ldi	r18, 0x08	; 8
     798:	30 e0       	ldi	r19, 0x00	; 0
		/* Inline Functions: */
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes) ATTR_WARN_UNUSED_RESULT ATTR_CONST
			                                                                       ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
     79a:	40 e0       	ldi	r20, 0x00	; 0
     79c:	03 c0       	rjmp	.+6      	; 0x7a4 <Endpoint_ConfigureEndpointTable+0x4e>
				uint16_t CheckBytes = 8;

				while (CheckBytes < Bytes)
				{
					MaskVal++;
     79e:	4f 5f       	subi	r20, 0xFF	; 255
					CheckBytes <<= 1;
     7a0:	22 0f       	add	r18, r18
     7a2:	33 1f       	adc	r19, r19
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while (CheckBytes < Bytes)
     7a4:	2e 17       	cp	r18, r30
     7a6:	3f 07       	cpc	r19, r31
     7a8:	d0 f3       	brcs	.-12     	; 0x79e <Endpoint_ConfigureEndpointTable+0x48>
				{
					MaskVal++;
					CheckBytes <<= 1;
				}

				return (MaskVal << EPSIZE0);
     7aa:	42 95       	swap	r20
     7ac:	40 7f       	andi	r20, 0xF0	; 240
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
     7ae:	49 2b       	or	r20, r25
     7b0:	9d df       	rcall	.-198    	; 0x6ec <Endpoint_ConfigureEndpoint_Prv>
     7b2:	88 23       	and	r24, r24
     7b4:	31 f0       	breq	.+12     	; 0x7c2 <Endpoint_ConfigureEndpointTable+0x6c>
     7b6:	0f 5f       	subi	r16, 0xFF	; 255
#endif

bool Endpoint_ConfigureEndpointTable(const USB_Endpoint_Table_t* const Table,
                                     const uint8_t Entries)
{
	for (uint8_t i = 0; i < Entries; i++)
     7b8:	25 96       	adiw	r28, 0x05	; 5
     7ba:	01 17       	cp	r16, r17
     7bc:	a1 f6       	brne	.-88     	; 0x766 <Endpoint_ConfigureEndpointTable+0x10>
     7be:	81 e0       	ldi	r24, 0x01	; 1
	
		if (!(Endpoint_ConfigureEndpoint(Table[i].Address, Table[i].Type, Table[i].Size, Table[i].Banks)))
		  return false;
	}
	
	return true;
     7c0:	01 c0       	rjmp	.+2      	; 0x7c4 <Endpoint_ConfigureEndpointTable+0x6e>
     7c2:	80 e0       	ldi	r24, 0x00	; 0
	{
		if (!(Table[i].Address))
		  continue;
	
		if (!(Endpoint_ConfigureEndpoint(Table[i].Address, Table[i].Type, Table[i].Size, Table[i].Banks)))
		  return false;
     7c4:	df 91       	pop	r29
	}
	
	return true;
}
     7c6:	cf 91       	pop	r28
     7c8:	1f 91       	pop	r17
     7ca:	0f 91       	pop	r16
     7cc:	08 95       	ret

000007ce <Endpoint_ClearStatusStage>:
     7ce:	80 91 40 01 	lds	r24, 0x0140
	}
}

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
     7d2:	87 ff       	sbrs	r24, 7
     7d4:	13 c0       	rjmp	.+38     	; 0x7fc <Endpoint_ClearStatusStage+0x2e>
     7d6:	04 c0       	rjmp	.+8      	; 0x7e0 <Endpoint_ClearStatusStage+0x12>
	{
		while (!(Endpoint_IsOUTReceived()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
     7d8:	80 91 3f 01 	lds	r24, 0x013F
     7dc:	88 23       	and	r24, r24
     7de:	b9 f0       	breq	.+46     	; 0x80e <Endpoint_ClearStatusStage+0x40>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     7e0:	80 91 e8 00 	lds	r24, 0x00E8

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
	{
		while (!(Endpoint_IsOUTReceived()))
     7e4:	82 ff       	sbrs	r24, 2
     7e6:	f8 cf       	rjmp	.-16     	; 0x7d8 <Endpoint_ClearStatusStage+0xa>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     7e8:	80 91 e8 00 	lds	r24, 0x00E8
     7ec:	8b 77       	andi	r24, 0x7B	; 123
     7ee:	80 93 e8 00 	sts	0x00E8, r24
     7f2:	08 95       	ret
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
     7f4:	80 91 3f 01 	lds	r24, 0x013F
     7f8:	88 23       	and	r24, r24
     7fa:	49 f0       	breq	.+18     	; 0x80e <Endpoint_ClearStatusStage+0x40>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     7fc:	80 91 e8 00 	lds	r24, 0x00E8

		Endpoint_ClearOUT();
	}
	else
	{
		while (!(Endpoint_IsINReady()))
     800:	80 ff       	sbrs	r24, 0
     802:	f8 cf       	rjmp	.-16     	; 0x7f4 <Endpoint_ClearStatusStage+0x26>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     804:	80 91 e8 00 	lds	r24, 0x00E8
     808:	8e 77       	andi	r24, 0x7E	; 126
     80a:	80 93 e8 00 	sts	0x00E8, r24
     80e:	08 95       	ret

00000810 <Endpoint_WaitUntilReady>:
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
     810:	80 91 e4 00 	lds	r24, 0x00E4
     814:	90 91 e5 00 	lds	r25, 0x00E5
     818:	45 e6       	ldi	r20, 0x65	; 101
     81a:	01 c0       	rjmp	.+2      	; 0x81e <Endpoint_WaitUntilReady+0xe>
     81c:	c9 01       	movw	r24, r18
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
     81e:	20 91 ec 00 	lds	r18, 0x00EC
     822:	20 ff       	sbrs	r18, 0
     824:	23 c0       	rjmp	.+70     	; 0x86c <Endpoint_WaitUntilReady+0x5c>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     826:	20 91 e8 00 	lds	r18, 0x00E8

	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
     82a:	20 fd       	sbrc	r18, 0
     82c:	15 c0       	rjmp	.+42     	; 0x858 <Endpoint_WaitUntilReady+0x48>
		{
			if (Endpoint_IsOUTReceived())
			  return ENDPOINT_READYWAIT_NoError;
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     82e:	20 91 3f 01 	lds	r18, 0x013F

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     832:	22 23       	and	r18, r18
     834:	99 f0       	breq	.+38     	; 0x85c <Endpoint_WaitUntilReady+0x4c>
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     836:	25 30       	cpi	r18, 0x05	; 5
     838:	99 f0       	breq	.+38     	; 0x860 <Endpoint_WaitUntilReady+0x50>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
     83a:	20 91 eb 00 	lds	r18, 0x00EB
		  return ENDPOINT_READYWAIT_BusSuspended;
		else if (Endpoint_IsStalled())
     83e:	25 fd       	sbrc	r18, 5
     840:	11 c0       	rjmp	.+34     	; 0x864 <Endpoint_WaitUntilReady+0x54>
     842:	20 91 e4 00 	lds	r18, 0x00E4
     846:	30 91 e5 00 	lds	r19, 0x00E5
		  return ENDPOINT_READYWAIT_EndpointStalled;

		uint16_t CurrentFrameNumber = USB_Device_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
     84a:	28 17       	cp	r18, r24
     84c:	39 07       	cpc	r19, r25
     84e:	39 f3       	breq	.-50     	; 0x81e <Endpoint_WaitUntilReady+0xe>
     850:	41 50       	subi	r20, 0x01	; 1
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
     852:	21 f7       	brne	.-56     	; 0x81c <Endpoint_WaitUntilReady+0xc>
			  return ENDPOINT_READYWAIT_Timeout;
     854:	84 e0       	ldi	r24, 0x04	; 4
     856:	08 95       	ret
	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
     858:	80 e0       	ldi	r24, 0x00	; 0
     85a:	08 95       	ret
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
     85c:	82 e0       	ldi	r24, 0x02	; 2
     85e:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_READYWAIT_BusSuspended;
     860:	83 e0       	ldi	r24, 0x03	; 3
     862:	08 95       	ret
		else if (Endpoint_IsStalled())
		  return ENDPOINT_READYWAIT_EndpointStalled;
     864:	81 e0       	ldi	r24, 0x01	; 1
     866:	08 95       	ret
			  return ENDPOINT_READYWAIT_NoError;
		}
		else
		{
			if (Endpoint_IsOUTReceived())
			  return ENDPOINT_READYWAIT_NoError;
     868:	80 e0       	ldi	r24, 0x00	; 0

			if (!(TimeoutMSRem--))
			  return ENDPOINT_READYWAIT_Timeout;
		}
	}
}
     86a:	08 95       	ret
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     86c:	20 91 e8 00 	lds	r18, 0x00E8
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
		}
		else
		{
			if (Endpoint_IsOUTReceived())
     870:	22 ff       	sbrs	r18, 2
     872:	dd cf       	rjmp	.-70     	; 0x82e <Endpoint_WaitUntilReady+0x1e>
     874:	f9 cf       	rjmp	.-14     	; 0x868 <Endpoint_WaitUntilReady+0x58>

00000876 <USB_ResetInterface>:

	USB_IsInitialized = false;
}

void USB_ResetInterface(void)
{
     876:	0f 93       	push	r16
     878:	1f 93       	push	r17
     87a:	cf 93       	push	r28
     87c:	df 93       	push	r29
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
     87e:	4e d0       	rcall	.+156    	; 0x91c <USB_INT_DisableAllInterrupts>
     880:	55 d0       	rcall	.+170    	; 0x92c <USB_INT_ClearAllInterrupts>
	USB_INT_ClearAllInterrupts();
     882:	c8 ed       	ldi	r28, 0xD8	; 216
     884:	d0 e0       	ldi	r29, 0x00	; 0
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
     886:	88 81       	ld	r24, Y
     888:	8f 77       	andi	r24, 0x7F	; 127
     88a:	88 83       	st	Y, r24
     88c:	88 81       	ld	r24, Y
     88e:	80 68       	ori	r24, 0x80	; 128
				USBCON |=  (1 << USBE);
     890:	88 83       	st	Y, r24
     892:	88 81       	ld	r24, Y
     894:	8f 7d       	andi	r24, 0xDF	; 223
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
     896:	88 83       	st	Y, r24
     898:	e7 ed       	ldi	r30, 0xD7	; 215
     89a:	f0 e0       	ldi	r31, 0x00	; 0

	if (USB_CurrentMode == USB_MODE_Device)
	{
		#if defined(USB_CAN_BE_DEVICE)
		#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
		UHWCON |=  (1 << UIMOD);
     89c:	80 81       	ld	r24, Z
     89e:	80 68       	ori	r24, 0x80	; 128
     8a0:	80 83       	st	Z, r24
     8a2:	19 bc       	out	0x29, r1	; 41
     8a4:	10 92 3f 01 	sts	0x013F, r1
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState                 = DEVICE_STATE_Unattached;
     8a8:	10 92 3b 01 	sts	0x013B, r1
	USB_Device_ConfigurationNumber  = 0;
     8ac:	10 92 3d 01 	sts	0x013D, r1

	#if !defined(NO_DEVICE_REMOTE_WAKEUP)
	USB_Device_RemoteWakeupEnabled  = false;
     8b0:	10 92 3c 01 	sts	0x013C, r1
	#endif

	#if !defined(NO_DEVICE_SELF_POWER)
	USB_Device_CurrentlySelfPowered = false;
     8b4:	00 ee       	ldi	r16, 0xE0	; 224
     8b6:	10 e0       	ldi	r17, 0x00	; 0
			}

			static inline void USB_Device_SetFullSpeed(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetFullSpeed(void)
			{
				UDCON &= ~(1 << LSM);
     8b8:	f8 01       	movw	r30, r16
     8ba:	80 81       	ld	r24, Z
     8bc:	8b 7f       	andi	r24, 0xFB	; 251
     8be:	80 83       	st	Z, r24
     8c0:	88 81       	ld	r24, Y
     8c2:	81 60       	ori	r24, 0x01	; 1
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBCON |= (1 << VBUSTE);
     8c4:	88 83       	st	Y, r24
     8c6:	80 e0       	ldi	r24, 0x00	; 0
     8c8:	60 e0       	ldi	r22, 0x00	; 0
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
     8ca:	42 e0       	ldi	r20, 0x02	; 2
     8cc:	0f df       	rcall	.-482    	; 0x6ec <Endpoint_ConfigureEndpoint_Prv>
     8ce:	e1 ee       	ldi	r30, 0xE1	; 225
     8d0:	f0 e0       	ldi	r31, 0x00	; 0
     8d2:	80 81       	ld	r24, Z
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
     8d4:	8e 7f       	andi	r24, 0xFE	; 254
     8d6:	80 83       	st	Z, r24
     8d8:	e2 ee       	ldi	r30, 0xE2	; 226
     8da:	f0 e0       	ldi	r31, 0x00	; 0
     8dc:	80 81       	ld	r24, Z
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
     8de:	81 60       	ori	r24, 0x01	; 1
     8e0:	80 83       	st	Z, r24
     8e2:	80 81       	ld	r24, Z
     8e4:	88 60       	ori	r24, 0x08	; 8
     8e6:	80 83       	st	Z, r24
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
     8e8:	f8 01       	movw	r30, r16
     8ea:	80 81       	ld	r24, Z
     8ec:	8e 7f       	andi	r24, 0xFE	; 254
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
     8ee:	80 83       	st	Z, r24
     8f0:	88 81       	ld	r24, Y
     8f2:	80 61       	ori	r24, 0x10	; 16
     8f4:	88 83       	st	Y, r24

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON |=  (1 << OTGPADE);
     8f6:	df 91       	pop	r29
     8f8:	cf 91       	pop	r28
     8fa:	1f 91       	pop	r17
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
     8fc:	0f 91       	pop	r16
     8fe:	08 95       	ret

00000900 <USB_Init>:
     900:	e8 ed       	ldi	r30, 0xD8	; 216
     902:	f0 e0       	ldi	r31, 0x00	; 0
     904:	80 81       	ld	r24, Z
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON &= ~(1 << OTGPADE);
     906:	8f 7e       	andi	r24, 0xEF	; 239
     908:	80 83       	st	Z, r24

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON |=  (1 << UVREGE);
     90a:	e7 ed       	ldi	r30, 0xD7	; 215
     90c:	f0 e0       	ldi	r31, 0x00	; 0
     90e:	80 81       	ld	r24, Z
     910:	81 60       	ori	r24, 0x01	; 1
     912:	80 83       	st	Z, r24
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
     914:	81 e0       	ldi	r24, 0x01	; 1
     916:	80 93 3e 01 	sts	0x013E, r24

	USB_ResetInterface();
     91a:	ad cf       	rjmp	.-166    	; 0x876 <USB_ResetInterface>

0000091c <USB_INT_DisableAllInterrupts>:
#include "../USBInterrupt.h"

void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
     91c:	e8 ed       	ldi	r30, 0xD8	; 216
     91e:	f0 e0       	ldi	r31, 0x00	; 0
     920:	80 81       	ld	r24, Z
     922:	8c 7f       	andi	r24, 0xFC	; 252
     924:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
     926:	10 92 e2 00 	sts	0x00E2, r1
	#endif
}
     92a:	08 95       	ret

0000092c <USB_INT_ClearAllInterrupts>:

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
     92c:	10 92 da 00 	sts	0x00DA, r1
	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
     930:	10 92 e1 00 	sts	0x00E1, r1
	#endif
}
     934:	08 95       	ret

00000936 <__vector_10>:

ISR(USB_GEN_vect, ISR_BLOCK)
{
     936:	1f 92       	push	r1
     938:	0f 92       	push	r0
     93a:	0f b6       	in	r0, 0x3f	; 63
     93c:	0f 92       	push	r0
     93e:	0b b6       	in	r0, 0x3b	; 59
     940:	0f 92       	push	r0
     942:	11 24       	eor	r1, r1
     944:	2f 93       	push	r18
     946:	3f 93       	push	r19
     948:	4f 93       	push	r20
     94a:	5f 93       	push	r21
     94c:	6f 93       	push	r22
     94e:	7f 93       	push	r23
     950:	8f 93       	push	r24
     952:	9f 93       	push	r25
     954:	af 93       	push	r26
     956:	bf 93       	push	r27
     958:	ef 93       	push	r30
     95a:	ff 93       	push	r31
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
					case USB_INT_SOFI:
						return (UDINT  & (1 << SOFI));
     95c:	80 91 e1 00 	lds	r24, 0x00E1
	#if defined(USB_CAN_BE_DEVICE)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
     960:	82 ff       	sbrs	r24, 2
     962:	0a c0       	rjmp	.+20     	; 0x978 <__vector_10+0x42>
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
					case USB_INT_SOFI:
						return (UDIEN  & (1 << SOFE));
     964:	80 91 e2 00 	lds	r24, 0x00E2
     968:	82 ff       	sbrs	r24, 2
     96a:	06 c0       	rjmp	.+12     	; 0x978 <__vector_10+0x42>
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
						break;
					case USB_INT_SOFI:
						UDINT  &= ~(1 << SOFI);
     96c:	80 91 e1 00 	lds	r24, 0x00E1
     970:	8b 7f       	andi	r24, 0xFB	; 251
     972:	80 93 e1 00 	sts	0x00E1, r24
	{
		USB_INT_Clear(USB_INT_SOFI);

		EVENT_USB_Device_StartOfFrame();
     976:	9e dc       	rcall	.-1732   	; 0x2b4 <EVENT_USB_Device_StartOfFrame>
     978:	80 91 da 00 	lds	r24, 0x00DA
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBINT & (1 << VBUSTI));
     97c:	80 ff       	sbrs	r24, 0
	}
	#endif

	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	if (USB_INT_HasOccurred(USB_INT_VBUSTI) && USB_INT_IsEnabled(USB_INT_VBUSTI))
     97e:	1d c0       	rjmp	.+58     	; 0x9ba <__vector_10+0x84>
     980:	80 91 d8 00 	lds	r24, 0x00D8
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBCON & (1 << VBUSTE));
     984:	80 ff       	sbrs	r24, 0
     986:	19 c0       	rjmp	.+50     	; 0x9ba <__vector_10+0x84>
     988:	80 91 da 00 	lds	r24, 0x00DA
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBINT &= ~(1 << VBUSTI);
     98c:	8e 7f       	andi	r24, 0xFE	; 254
     98e:	80 93 da 00 	sts	0x00DA, r24
     992:	80 91 d9 00 	lds	r24, 0x00D9
				 *  \return Boolean \c true if the VBUS line is currently detecting power from a host, \c false otherwise.
				 */
				static inline bool USB_VBUS_GetStatus(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
				static inline bool USB_VBUS_GetStatus(void)
				{
					return ((USBSTA & (1 << VBUS)) ? true : false);
     996:	80 ff       	sbrs	r24, 0
	{
		USB_INT_Clear(USB_INT_VBUSTI);

		if (USB_VBUS_GetStatus())
     998:	0c c0       	rjmp	.+24     	; 0x9b2 <__vector_10+0x7c>
     99a:	8c e0       	ldi	r24, 0x0C	; 12

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
     99c:	89 bd       	out	0x29, r24	; 41
     99e:	8e e0       	ldi	r24, 0x0E	; 14
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
     9a0:	89 bd       	out	0x29, r24	; 41
     9a2:	09 b4       	in	r0, 0x29	; 41
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			{
				USB_PLL_On();
				while (!(USB_PLL_IsReady()));
     9a4:	00 fe       	sbrs	r0, 0
     9a6:	fd cf       	rjmp	.-6      	; 0x9a2 <__vector_10+0x6c>
     9a8:	81 e0       	ldi	r24, 0x01	; 1
			}

			USB_DeviceState = DEVICE_STATE_Powered;
     9aa:	80 93 3f 01 	sts	0x013F, r24
     9ae:	5c dc       	rcall	.-1864   	; 0x268 <EVENT_USB_Device_Connect>
			EVENT_USB_Device_Connect();
     9b0:	04 c0       	rjmp	.+8      	; 0x9ba <__vector_10+0x84>
     9b2:	19 bc       	out	0x29, r1	; 41
     9b4:	10 92 3f 01 	sts	0x013F, r1
		else
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			  USB_PLL_Off();

			USB_DeviceState = DEVICE_STATE_Unattached;
     9b8:	59 dc       	rcall	.-1870   	; 0x26c <EVENT_USB_Device_Disconnect>
     9ba:	80 91 e1 00 	lds	r24, 0x00E1
			EVENT_USB_Device_Disconnect();
     9be:	80 ff       	sbrs	r24, 0
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
     9c0:	18 c0       	rjmp	.+48     	; 0x9f2 <__vector_10+0xbc>
     9c2:	80 91 e2 00 	lds	r24, 0x00E2
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
     9c6:	80 ff       	sbrs	r24, 0
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
     9c8:	14 c0       	rjmp	.+40     	; 0x9f2 <__vector_10+0xbc>
     9ca:	80 91 e2 00 	lds	r24, 0x00E2
     9ce:	8e 7f       	andi	r24, 0xFE	; 254
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
     9d0:	80 93 e2 00 	sts	0x00E2, r24
     9d4:	80 91 e2 00 	lds	r24, 0x00E2
     9d8:	80 61       	ori	r24, 0x10	; 16
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
     9da:	80 93 e2 00 	sts	0x00E2, r24
     9de:	80 91 d8 00 	lds	r24, 0x00D8
     9e2:	80 62       	ori	r24, 0x20	; 32
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON |=  (1 << FRZCLK);
     9e4:	80 93 d8 00 	sts	0x00D8, r24
     9e8:	19 bc       	out	0x29, r1	; 41
     9ea:	85 e0       	ldi	r24, 0x05	; 5
     9ec:	80 93 3f 01 	sts	0x013F, r24

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
		EVENT_USB_Device_Disconnect();
		#else
		USB_DeviceState = DEVICE_STATE_Suspended;
     9f0:	d0 d1       	rcall	.+928    	; 0xd92 <USB_Event_Stub>
     9f2:	80 91 e1 00 	lds	r24, 0x00E1
		EVENT_USB_Device_Suspend();
     9f6:	84 ff       	sbrs	r24, 4
     9f8:	2d c0       	rjmp	.+90     	; 0xa54 <__vector_10+0x11e>
					case USB_INT_IDTI:
						return (USBINT & (1 << IDTI));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
     9fa:	80 91 e2 00 	lds	r24, 0x00E2
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
     9fe:	84 ff       	sbrs	r24, 4
     a00:	29 c0       	rjmp	.+82     	; 0xa54 <__vector_10+0x11e>
					case USB_INT_IDTI:
						return (USBCON & (1 << IDTE));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
     a02:	8c e0       	ldi	r24, 0x0C	; 12
     a04:	89 bd       	out	0x29, r24	; 41
     a06:	8e e0       	ldi	r24, 0x0E	; 14
     a08:	89 bd       	out	0x29, r24	; 41

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
     a0a:	09 b4       	in	r0, 0x29	; 41
     a0c:	00 fe       	sbrs	r0, 0
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
     a0e:	fd cf       	rjmp	.-6      	; 0xa0a <__vector_10+0xd4>
     a10:	80 91 d8 00 	lds	r24, 0x00D8
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
     a14:	8f 7d       	andi	r24, 0xDF	; 223
     a16:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
     a1a:	80 91 e1 00 	lds	r24, 0x00E1
     a1e:	8f 7e       	andi	r24, 0xEF	; 239
     a20:	80 93 e1 00 	sts	0x00E1, r24
						USBINT &= ~(1 << IDTI);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
     a24:	80 91 e2 00 	lds	r24, 0x00E2
     a28:	8f 7e       	andi	r24, 0xEF	; 239
     a2a:	80 93 e2 00 	sts	0x00E2, r24
						USBCON &= ~(1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
     a2e:	80 91 e2 00 	lds	r24, 0x00E2
     a32:	81 60       	ori	r24, 0x01	; 1
     a34:	80 93 e2 00 	sts	0x00E2, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
     a38:	80 91 3b 01 	lds	r24, 0x013B
     a3c:	88 23       	and	r24, r24
     a3e:	21 f4       	brne	.+8      	; 0xa48 <__vector_10+0x112>
		USB_INT_Clear(USB_INT_WAKEUPI);

		USB_INT_Disable(USB_INT_WAKEUPI);
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_Device_ConfigurationNumber)
     a40:	80 91 e3 00 	lds	r24, 0x00E3
     a44:	87 ff       	sbrs	r24, 7
     a46:	02 c0       	rjmp	.+4      	; 0xa4c <__vector_10+0x116>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
     a48:	84 e0       	ldi	r24, 0x04	; 4
     a4a:	01 c0       	rjmp	.+2      	; 0xa4e <__vector_10+0x118>
		  USB_DeviceState = DEVICE_STATE_Configured;
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
     a4c:	81 e0       	ldi	r24, 0x01	; 1
     a4e:	80 93 3f 01 	sts	0x013F, r24
     a52:	9f d1       	rcall	.+830    	; 0xd92 <USB_Event_Stub>
     a54:	80 91 e1 00 	lds	r24, 0x00E1
     a58:	83 ff       	sbrs	r24, 3

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
		#else
		EVENT_USB_Device_WakeUp();
     a5a:	22 c0       	rjmp	.+68     	; 0xaa0 <__vector_10+0x16a>
     a5c:	80 91 e2 00 	lds	r24, 0x00E2
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
     a60:	83 ff       	sbrs	r24, 3
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
     a62:	1e c0       	rjmp	.+60     	; 0xaa0 <__vector_10+0x16a>
     a64:	80 91 e1 00 	lds	r24, 0x00E1
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
     a68:	87 7f       	andi	r24, 0xF7	; 247
     a6a:	80 93 e1 00 	sts	0x00E1, r24
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
     a6e:	82 e0       	ldi	r24, 0x02	; 2
     a70:	80 93 3f 01 	sts	0x013F, r24
     a74:	10 92 3b 01 	sts	0x013B, r1
	{
		USB_INT_Clear(USB_INT_EORSTI);

		USB_DeviceState                = DEVICE_STATE_Default;
     a78:	80 91 e1 00 	lds	r24, 0x00E1
     a7c:	8e 7f       	andi	r24, 0xFE	; 254
		USB_Device_ConfigurationNumber = 0;
     a7e:	80 93 e1 00 	sts	0x00E1, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
     a82:	80 91 e2 00 	lds	r24, 0x00E2
     a86:	8e 7f       	andi	r24, 0xFE	; 254
     a88:	80 93 e2 00 	sts	0x00E2, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
     a8c:	80 91 e2 00 	lds	r24, 0x00E2
     a90:	80 61       	ori	r24, 0x10	; 16
     a92:	80 93 e2 00 	sts	0x00E2, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
     a96:	80 e0       	ldi	r24, 0x00	; 0
     a98:	60 e0       	ldi	r22, 0x00	; 0
     a9a:	42 e0       	ldi	r20, 0x02	; 2
     a9c:	27 de       	rcall	.-946    	; 0x6ec <Endpoint_ConfigureEndpoint_Prv>
     a9e:	79 d1       	rcall	.+754    	; 0xd92 <USB_Event_Stub>
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
     aa0:	ff 91       	pop	r31
     aa2:	ef 91       	pop	r30
     aa4:	bf 91       	pop	r27
     aa6:	af 91       	pop	r26
     aa8:	9f 91       	pop	r25

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
     aaa:	8f 91       	pop	r24
     aac:	7f 91       	pop	r23
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
     aae:	6f 91       	pop	r22
     ab0:	5f 91       	pop	r21
     ab2:	4f 91       	pop	r20
     ab4:	3f 91       	pop	r19
     ab6:	2f 91       	pop	r18
     ab8:	0f 90       	pop	r0
     aba:	0b be       	out	0x3b, r0	; 59
     abc:	0f 90       	pop	r0
     abe:	0f be       	out	0x3f, r0	; 63
     ac0:	0f 90       	pop	r0
     ac2:	1f 90       	pop	r1
     ac4:	18 95       	reti

00000ac6 <USB_Device_ProcessControlRequest>:
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_Device_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
     ac6:	1f 93       	push	r17
     ac8:	cf 93       	push	r28
     aca:	df 93       	push	r29
     acc:	cd b7       	in	r28, 0x3d	; 61
     ace:	de b7       	in	r29, 0x3e	; 62
     ad0:	ac 97       	sbiw	r28, 0x2c	; 44
     ad2:	0f b6       	in	r0, 0x3f	; 63
     ad4:	f8 94       	cli
     ad6:	de bf       	out	0x3e, r29	; 62
     ad8:	0f be       	out	0x3f, r0	; 63
     ada:	cd bf       	out	0x3d, r28	; 61
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
     adc:	80 e0       	ldi	r24, 0x00	; 0
	USB_ControlRequest.bRequest      = Endpoint_Read_8();
	USB_ControlRequest.wValue        = Endpoint_Read_16_LE();
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;
     ade:	e0 e4       	ldi	r30, 0x40	; 64
     ae0:	f1 e0       	ldi	r31, 0x01	; 1
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
     ae2:	90 91 f1 00 	lds	r25, 0x00F1

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_8();
     ae6:	91 93       	st	Z+, r25
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
     ae8:	8f 5f       	subi	r24, 0xFF	; 255
     aea:	88 30       	cpi	r24, 0x08	; 8
     aec:	d1 f7       	brne	.-12     	; 0xae2 <USB_Device_ProcessControlRequest+0x1c>
	  *(RequestHeader++) = Endpoint_Read_8();
	#endif

	EVENT_USB_Device_ControlRequest();
     aee:	dc db       	rcall	.-2120   	; 0x2a8 <EVENT_USB_Device_ControlRequest>
     af0:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     af4:	83 ff       	sbrs	r24, 3

	if (Endpoint_IsSETUPReceived())
     af6:	35 c1       	rjmp	.+618    	; 0xd62 <USB_Device_ProcessControlRequest+0x29c>
     af8:	80 91 40 01 	lds	r24, 0x0140
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
     afc:	20 91 41 01 	lds	r18, 0x0141

		switch (USB_ControlRequest.bRequest)
     b00:	25 30       	cpi	r18, 0x05	; 5
     b02:	09 f4       	brne	.+2      	; 0xb06 <USB_Device_ProcessControlRequest+0x40>
     b04:	84 c0       	rjmp	.+264    	; 0xc0e <USB_Device_ProcessControlRequest+0x148>
     b06:	26 30       	cpi	r18, 0x06	; 6
     b08:	40 f4       	brcc	.+16     	; 0xb1a <USB_Device_ProcessControlRequest+0x54>
     b0a:	21 30       	cpi	r18, 0x01	; 1
     b0c:	a1 f1       	breq	.+104    	; 0xb76 <USB_Device_ProcessControlRequest+0xb0>
     b0e:	21 30       	cpi	r18, 0x01	; 1
     b10:	70 f0       	brcs	.+28     	; 0xb2e <USB_Device_ProcessControlRequest+0x68>
     b12:	23 30       	cpi	r18, 0x03	; 3
     b14:	09 f0       	breq	.+2      	; 0xb18 <USB_Device_ProcessControlRequest+0x52>
     b16:	25 c1       	rjmp	.+586    	; 0xd62 <USB_Device_ProcessControlRequest+0x29c>
     b18:	2e c0       	rjmp	.+92     	; 0xb76 <USB_Device_ProcessControlRequest+0xb0>
     b1a:	28 30       	cpi	r18, 0x08	; 8
     b1c:	09 f4       	brne	.+2      	; 0xb20 <USB_Device_ProcessControlRequest+0x5a>
     b1e:	f3 c0       	rjmp	.+486    	; 0xd06 <USB_Device_ProcessControlRequest+0x240>
     b20:	29 30       	cpi	r18, 0x09	; 9
     b22:	09 f4       	brne	.+2      	; 0xb26 <USB_Device_ProcessControlRequest+0x60>
     b24:	02 c1       	rjmp	.+516    	; 0xd2a <USB_Device_ProcessControlRequest+0x264>
     b26:	26 30       	cpi	r18, 0x06	; 6
     b28:	09 f0       	breq	.+2      	; 0xb2c <USB_Device_ProcessControlRequest+0x66>
     b2a:	1b c1       	rjmp	.+566    	; 0xd62 <USB_Device_ProcessControlRequest+0x29c>
     b2c:	93 c0       	rjmp	.+294    	; 0xc54 <USB_Device_ProcessControlRequest+0x18e>
     b2e:	80 38       	cpi	r24, 0x80	; 128
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
     b30:	21 f0       	breq	.+8      	; 0xb3a <USB_Device_ProcessControlRequest+0x74>
     b32:	82 38       	cpi	r24, 0x82	; 130
     b34:	09 f0       	breq	.+2      	; 0xb38 <USB_Device_ProcessControlRequest+0x72>
     b36:	15 c1       	rjmp	.+554    	; 0xd62 <USB_Device_ProcessControlRequest+0x29c>
     b38:	08 c0       	rjmp	.+16     	; 0xb4a <USB_Device_ProcessControlRequest+0x84>
     b3a:	80 91 3c 01 	lds	r24, 0x013C
	Endpoint_ClearOUT();
}

static void USB_Device_GetStatus(void)
{
	uint8_t CurrentStatus = 0;
     b3e:	90 91 3d 01 	lds	r25, 0x013D
			if (USB_Device_CurrentlySelfPowered)
			  CurrentStatus |= FEATURE_SELFPOWERED_ENABLED;
			#endif

			#if !defined(NO_DEVICE_REMOTE_WAKEUP)
			if (USB_Device_RemoteWakeupEnabled)
     b42:	99 23       	and	r25, r25
     b44:	71 f0       	breq	.+28     	; 0xb62 <USB_Device_ProcessControlRequest+0x9c>
     b46:	82 60       	ori	r24, 0x02	; 2
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
     b48:	0c c0       	rjmp	.+24     	; 0xb62 <USB_Device_ProcessControlRequest+0x9c>
     b4a:	80 91 44 01 	lds	r24, 0x0144
			#endif
			break;
		case (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_ENDPOINT):
			#if !defined(CONTROL_ONLY_DEVICE)
			Endpoint_SelectEndpoint((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
     b4e:	8f 70       	andi	r24, 0x0F	; 15
     b50:	80 93 e9 00 	sts	0x00E9, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     b54:	90 91 eb 00 	lds	r25, 0x00EB
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
     b58:	81 e0       	ldi	r24, 0x01	; 1

			CurrentStatus = Endpoint_IsStalled();
     b5a:	95 ff       	sbrs	r25, 5
     b5c:	80 e0       	ldi	r24, 0x00	; 0
     b5e:	10 92 e9 00 	sts	0x00E9, r1
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     b62:	90 91 e8 00 	lds	r25, 0x00E8
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     b66:	97 7f       	andi	r25, 0xF7	; 247
     b68:	90 93 e8 00 	sts	0x00E8, r25
     b6c:	80 93 f1 00 	sts	0x00F1, r24
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
     b70:	10 92 f1 00 	sts	0x00F1, r1
				UEDATX = (Data >> 8);
     b74:	d3 c0       	rjmp	.+422    	; 0xd1c <USB_Device_ProcessControlRequest+0x256>
     b76:	88 23       	and	r24, r24
				}

				break;
			case REQ_ClearFeature:
			case REQ_SetFeature:
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
     b78:	19 f0       	breq	.+6      	; 0xb80 <USB_Device_ProcessControlRequest+0xba>
     b7a:	82 30       	cpi	r24, 0x02	; 2
     b7c:	09 f0       	breq	.+2      	; 0xb80 <USB_Device_ProcessControlRequest+0xba>
     b7e:	f1 c0       	rjmp	.+482    	; 0xd62 <USB_Device_ProcessControlRequest+0x29c>
     b80:	90 e0       	ldi	r25, 0x00	; 0
	Endpoint_ClearStatusStage();
}

static void USB_Device_ClearSetFeature(void)
{
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
     b82:	8f 71       	andi	r24, 0x1F	; 31
     b84:	90 70       	andi	r25, 0x00	; 0
     b86:	00 97       	sbiw	r24, 0x00	; 0
     b88:	29 f0       	breq	.+10     	; 0xb94 <USB_Device_ProcessControlRequest+0xce>
     b8a:	82 30       	cpi	r24, 0x02	; 2
     b8c:	91 05       	cpc	r25, r1
     b8e:	09 f0       	breq	.+2      	; 0xb92 <USB_Device_ProcessControlRequest+0xcc>
     b90:	e8 c0       	rjmp	.+464    	; 0xd62 <USB_Device_ProcessControlRequest+0x29c>
     b92:	0b c0       	rjmp	.+22     	; 0xbaa <USB_Device_ProcessControlRequest+0xe4>
     b94:	80 91 42 01 	lds	r24, 0x0142
	{
		#if !defined(NO_DEVICE_REMOTE_WAKEUP)
		case REQREC_DEVICE:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
     b98:	81 30       	cpi	r24, 0x01	; 1
     b9a:	09 f0       	breq	.+2      	; 0xb9e <USB_Device_ProcessControlRequest+0xd8>
     b9c:	e2 c0       	rjmp	.+452    	; 0xd62 <USB_Device_ProcessControlRequest+0x29c>
     b9e:	23 30       	cpi	r18, 0x03	; 3
			  USB_Device_RemoteWakeupEnabled = (USB_ControlRequest.bRequest == REQ_SetFeature);
     ba0:	09 f0       	breq	.+2      	; 0xba4 <USB_Device_ProcessControlRequest+0xde>
     ba2:	80 e0       	ldi	r24, 0x00	; 0
     ba4:	80 93 3d 01 	sts	0x013D, r24
     ba8:	2c c0       	rjmp	.+88     	; 0xc02 <USB_Device_ProcessControlRequest+0x13c>
     baa:	80 91 42 01 	lds	r24, 0x0142

			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
     bae:	88 23       	and	r24, r24
     bb0:	41 f5       	brne	.+80     	; 0xc02 <USB_Device_ProcessControlRequest+0x13c>
     bb2:	20 91 44 01 	lds	r18, 0x0144
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
     bb6:	2f 70       	andi	r18, 0x0F	; 15
     bb8:	09 f4       	brne	.+2      	; 0xbbc <USB_Device_ProcessControlRequest+0xf6>

				if (EndpointIndex == ENDPOINT_CONTROLEP)
     bba:	d3 c0       	rjmp	.+422    	; 0xd62 <USB_Device_ProcessControlRequest+0x29c>
     bbc:	20 93 e9 00 	sts	0x00E9, r18
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     bc0:	80 91 eb 00 	lds	r24, 0x00EB
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
     bc4:	80 ff       	sbrs	r24, 0
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
     bc6:	1d c0       	rjmp	.+58     	; 0xc02 <USB_Device_ProcessControlRequest+0x13c>
     bc8:	80 91 41 01 	lds	r24, 0x0141
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
     bcc:	83 30       	cpi	r24, 0x03	; 3
     bce:	21 f4       	brne	.+8      	; 0xbd8 <USB_Device_ProcessControlRequest+0x112>
     bd0:	80 91 eb 00 	lds	r24, 0x00EB
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
     bd4:	80 62       	ori	r24, 0x20	; 32
     bd6:	13 c0       	rjmp	.+38     	; 0xbfe <USB_Device_ProcessControlRequest+0x138>
     bd8:	80 91 eb 00 	lds	r24, 0x00EB
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
     bdc:	80 61       	ori	r24, 0x10	; 16
     bde:	80 93 eb 00 	sts	0x00EB, r24
     be2:	81 e0       	ldi	r24, 0x01	; 1
			 *  \param[in] Address  Endpoint address whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t Address)
			{
				UERST = (1 << (Address & ENDPOINT_EPNUM_MASK));
     be4:	90 e0       	ldi	r25, 0x00	; 0
     be6:	02 c0       	rjmp	.+4      	; 0xbec <USB_Device_ProcessControlRequest+0x126>
     be8:	88 0f       	add	r24, r24
     bea:	99 1f       	adc	r25, r25
     bec:	2a 95       	dec	r18
     bee:	e2 f7       	brpl	.-8      	; 0xbe8 <USB_Device_ProcessControlRequest+0x122>
     bf0:	80 93 ea 00 	sts	0x00EA, r24
     bf4:	10 92 ea 00 	sts	0x00EA, r1
				UERST = 0;
     bf8:	80 91 eb 00 	lds	r24, 0x00EB

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
     bfc:	88 60       	ori	r24, 0x08	; 8
     bfe:	80 93 eb 00 	sts	0x00EB, r24
     c02:	10 92 e9 00 	sts	0x00E9, r1
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     c06:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     c0a:	87 7f       	andi	r24, 0xF7	; 247
     c0c:	8a c0       	rjmp	.+276    	; 0xd22 <USB_Device_ProcessControlRequest+0x25c>
     c0e:	88 23       	and	r24, r24
					USB_Device_ClearSetFeature();
				}

				break;
			case REQ_SetAddress:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
     c10:	09 f0       	breq	.+2      	; 0xc14 <USB_Device_ProcessControlRequest+0x14e>
     c12:	a7 c0       	rjmp	.+334    	; 0xd62 <USB_Device_ProcessControlRequest+0x29c>
     c14:	10 91 42 01 	lds	r17, 0x0142
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t DeviceAddress = (USB_ControlRequest.wValue & 0x7F);
     c18:	1f 77       	andi	r17, 0x7F	; 127
     c1a:	80 91 e3 00 	lds	r24, 0x00E3
			#endif

			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				UDADDR = (UDADDR & (1 << ADDEN)) | (Address & 0x7F);
     c1e:	80 78       	andi	r24, 0x80	; 128
     c20:	81 2b       	or	r24, r17
     c22:	80 93 e3 00 	sts	0x00E3, r24
     c26:	80 91 e8 00 	lds	r24, 0x00E8
     c2a:	87 7f       	andi	r24, 0xF7	; 247
     c2c:	80 93 e8 00 	sts	0x00E8, r24
     c30:	ce dd       	rcall	.-1124   	; 0x7ce <Endpoint_ClearStatusStage>

	USB_Device_SetDeviceAddress(DeviceAddress);

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
     c32:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     c36:	80 ff       	sbrs	r24, 0
     c38:	fc cf       	rjmp	.-8      	; 0xc32 <USB_Device_ProcessControlRequest+0x16c>

	while (!(Endpoint_IsINReady()));
     c3a:	80 91 e3 00 	lds	r24, 0x00E3
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address)
			{
				(void)Address;
				
				UDADDR |= (1 << ADDEN);
     c3e:	80 68       	ori	r24, 0x80	; 128
     c40:	80 93 e3 00 	sts	0x00E3, r24
     c44:	11 23       	and	r17, r17
     c46:	11 f0       	breq	.+4      	; 0xc4c <USB_Device_ProcessControlRequest+0x186>

	USB_Device_EnableDeviceAddress(DeviceAddress);

	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
     c48:	83 e0       	ldi	r24, 0x03	; 3
     c4a:	01 c0       	rjmp	.+2      	; 0xc4e <USB_Device_ProcessControlRequest+0x188>
     c4c:	82 e0       	ldi	r24, 0x02	; 2
     c4e:	80 93 3f 01 	sts	0x013F, r24
     c52:	87 c0       	rjmp	.+270    	; 0xd62 <USB_Device_ProcessControlRequest+0x29c>
     c54:	80 58       	subi	r24, 0x80	; 128
     c56:	82 30       	cpi	r24, 0x02	; 2
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_SetAddress();

				break;
			case REQ_GetDescriptor:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
     c58:	08 f0       	brcs	.+2      	; 0xc5c <USB_Device_ProcessControlRequest+0x196>
     c5a:	83 c0       	rjmp	.+262    	; 0xd62 <USB_Device_ProcessControlRequest+0x29c>
     c5c:	80 91 42 01 	lds	r24, 0x0142
	    !(defined(USE_FLASH_DESCRIPTORS) || defined(USE_EEPROM_DESCRIPTORS) || defined(USE_RAM_DESCRIPTORS))
	uint8_t DescriptorAddressSpace;
	#endif

	#if !defined(NO_INTERNAL_SERIAL) && (USE_INTERNAL_SERIAL != NO_DESCRIPTOR)
	if (USB_ControlRequest.wValue == ((DTYPE_String << 8) | USE_INTERNAL_SERIAL))
     c60:	90 91 43 01 	lds	r25, 0x0143
     c64:	23 e0       	ldi	r18, 0x03	; 3
     c66:	8c 3d       	cpi	r24, 0xDC	; 220
     c68:	92 07       	cpc	r25, r18
     c6a:	a9 f5       	brne	.+106    	; 0xcd6 <USB_Device_ProcessControlRequest+0x210>
     c6c:	83 e0       	ldi	r24, 0x03	; 3
     c6e:	8c 83       	std	Y+4, r24	; 0x04
	{
		USB_Descriptor_Header_t Header;
		uint16_t                UnicodeString[INTERNAL_SERIAL_LENGTH_BITS / 4];
	} SignatureDescriptor;

	SignatureDescriptor.Header.Type = DTYPE_String;
     c70:	8a e2       	ldi	r24, 0x2A	; 42
     c72:	8b 83       	std	Y+3, r24	; 0x03
	SignatureDescriptor.Header.Size = USB_STRING_LEN(INTERNAL_SERIAL_LENGTH_BITS / 4);
     c74:	5f b7       	in	r21, 0x3f	; 63
     c76:	f8 94       	cli
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
     c78:	de 01       	movw	r26, r28
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
     c7a:	13 96       	adiw	r26, 0x03	; 3
				__builtin_ssrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				cli();
				#endif

				GCC_MEMORY_BARRIER();
     c7c:	80 e0       	ldi	r24, 0x00	; 0
     c7e:	90 e0       	ldi	r25, 0x00	; 0
     c80:	4e e0       	ldi	r20, 0x0E	; 14
     c82:	61 e2       	ldi	r22, 0x21	; 33
			static inline void USB_Device_GetSerialString(uint16_t* const UnicodeString)
			{
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;
     c84:	e4 2f       	mov	r30, r20

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
				{
					uint8_t SerialByte = boot_signature_byte_get(SigReadAddress);
     c86:	f0 e0       	ldi	r31, 0x00	; 0
     c88:	60 93 57 00 	sts	0x0057, r22
     c8c:	e4 91       	lpm	r30, Z
     c8e:	80 ff       	sbrs	r24, 0
     c90:	03 c0       	rjmp	.+6      	; 0xc98 <USB_Device_ProcessControlRequest+0x1d2>

					if (SerialCharNum & 0x01)
     c92:	e2 95       	swap	r30
     c94:	ef 70       	andi	r30, 0x0F	; 15
					{
						SerialByte >>= 4;
     c96:	4f 5f       	subi	r20, 0xFF	; 255
     c98:	ef 70       	andi	r30, 0x0F	; 15
						SigReadAddress++;
     c9a:	2e 2f       	mov	r18, r30
					}

					SerialByte &= 0x0F;
     c9c:	30 e0       	ldi	r19, 0x00	; 0
     c9e:	ea 30       	cpi	r30, 0x0A	; 10
     ca0:	18 f0       	brcs	.+6      	; 0xca8 <USB_Device_ProcessControlRequest+0x1e2>

					UnicodeString[SerialCharNum] = cpu_to_le16((SerialByte >= 10) ?
     ca2:	29 5c       	subi	r18, 0xC9	; 201
     ca4:	3f 4f       	sbci	r19, 0xFF	; 255
     ca6:	02 c0       	rjmp	.+4      	; 0xcac <USB_Device_ProcessControlRequest+0x1e6>
     ca8:	20 5d       	subi	r18, 0xD0	; 208
     caa:	3f 4f       	sbci	r19, 0xFF	; 255
     cac:	13 96       	adiw	r26, 0x03	; 3
     cae:	3c 93       	st	X, r19
     cb0:	2e 93       	st	-X, r18
     cb2:	12 97       	sbiw	r26, 0x02	; 2
     cb4:	01 96       	adiw	r24, 0x01	; 1
     cb6:	12 96       	adiw	r26, 0x02	; 2
     cb8:	84 31       	cpi	r24, 0x14	; 20
     cba:	91 05       	cpc	r25, r1
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
     cbc:	19 f7       	brne	.-58     	; 0xc84 <USB_Device_ProcessControlRequest+0x1be>
     cbe:	5f bf       	out	0x3f, r21	; 63
     cc0:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     cc4:	87 7f       	andi	r24, 0xF7	; 247
     cc6:	80 93 e8 00 	sts	0x00E8, r24
     cca:	ce 01       	movw	r24, r28
     ccc:	03 96       	adiw	r24, 0x03	; 3

	USB_Device_GetSerialString(SignatureDescriptor.UnicodeString);

	Endpoint_ClearSETUP();

	Endpoint_Write_Control_Stream_LE(&SignatureDescriptor, sizeof(SignatureDescriptor));
     cce:	6a e2       	ldi	r22, 0x2A	; 42
     cd0:	70 e0       	ldi	r23, 0x00	; 0
     cd2:	0a dc       	rcall	.-2028   	; 0x4e8 <Endpoint_Write_Control_Stream_LE>
     cd4:	12 c0       	rjmp	.+36     	; 0xcfa <USB_Device_ProcessControlRequest+0x234>
     cd6:	60 91 44 01 	lds	r22, 0x0144
     cda:	ae 01       	movw	r20, r28
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif

	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
     cdc:	4f 5f       	subi	r20, 0xFF	; 255
     cde:	5f 4f       	sbci	r21, 0xFF	; 255
     ce0:	6a db       	rcall	.-2348   	; 0x3b6 <CALLBACK_USB_GetDescriptor>
     ce2:	bc 01       	movw	r22, r24
     ce4:	00 97       	sbiw	r24, 0x00	; 0
     ce6:	09 f4       	brne	.+2      	; 0xcea <USB_Device_ProcessControlRequest+0x224>
     ce8:	3c c0       	rjmp	.+120    	; 0xd62 <USB_Device_ProcessControlRequest+0x29c>
     cea:	80 91 e8 00 	lds	r24, 0x00E8
     cee:	87 7f       	andi	r24, 0xF7	; 247
     cf0:	80 93 e8 00 	sts	0x00E8, r24
     cf4:	89 81       	ldd	r24, Y+1	; 0x01
     cf6:	9a 81       	ldd	r25, Y+2	; 0x02
     cf8:	9c dc       	rcall	.-1736   	; 0x632 <Endpoint_Write_Control_PStream_LE>
     cfa:	80 91 e8 00 	lds	r24, 0x00E8
	#if defined(USE_RAM_DESCRIPTORS) || !defined(ARCH_HAS_MULTI_ADDRESS_SPACE)
	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_EEPROM_DESCRIPTORS)
	Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_FLASH_DESCRIPTORS)
	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
     cfe:	8b 77       	andi	r24, 0x7B	; 123
     d00:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     d04:	2e c0       	rjmp	.+92     	; 0xd62 <USB_Device_ProcessControlRequest+0x29c>
     d06:	80 38       	cpi	r24, 0x80	; 128
     d08:	61 f5       	brne	.+88     	; 0xd62 <USB_Device_ProcessControlRequest+0x29c>
     d0a:	80 91 e8 00 	lds	r24, 0x00E8
     d0e:	87 7f       	andi	r24, 0xF7	; 247
					USB_Device_GetDescriptor();
				}

				break;
			case REQ_GetConfiguration:
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
     d10:	80 93 e8 00 	sts	0x00E8, r24
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     d14:	80 91 3b 01 	lds	r24, 0x013B
     d18:	80 93 f1 00 	sts	0x00F1, r24
     d1c:	80 91 e8 00 	lds	r24, 0x00E8

static void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();

	Endpoint_Write_8(USB_Device_ConfigurationNumber);
     d20:	8e 77       	andi	r24, 0x7E	; 126
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     d22:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     d26:	53 dd       	rcall	.-1370   	; 0x7ce <Endpoint_ClearStatusStage>
     d28:	1c c0       	rjmp	.+56     	; 0xd62 <USB_Device_ProcessControlRequest+0x29c>
     d2a:	88 23       	and	r24, r24
     d2c:	d1 f4       	brne	.+52     	; 0xd62 <USB_Device_ProcessControlRequest+0x29c>
     d2e:	90 91 42 01 	lds	r25, 0x0142
	Endpoint_ClearIN();

	Endpoint_ClearStatusStage();
     d32:	92 30       	cpi	r25, 0x02	; 2
     d34:	b0 f4       	brcc	.+44     	; 0xd62 <USB_Device_ProcessControlRequest+0x29c>
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_GetConfiguration();

				break;
			case REQ_SetConfiguration:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
     d36:	80 91 e8 00 	lds	r24, 0x00E8
}

static void USB_Device_SetConfiguration(void)
{
	#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
     d3a:	87 7f       	andi	r24, 0xF7	; 247
     d3c:	80 93 e8 00 	sts	0x00E8, r24
     d40:	90 93 3b 01 	sts	0x013B, r25
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     d44:	44 dd       	rcall	.-1400   	; 0x7ce <Endpoint_ClearStatusStage>
     d46:	80 91 3b 01 	lds	r24, 0x013B
     d4a:	88 23       	and	r24, r24
	#endif
	#endif

	Endpoint_ClearSETUP();

	USB_Device_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
     d4c:	21 f4       	brne	.+8      	; 0xd56 <USB_Device_ProcessControlRequest+0x290>
     d4e:	80 91 e3 00 	lds	r24, 0x00E3

	Endpoint_ClearStatusStage();
     d52:	87 ff       	sbrs	r24, 7

	if (USB_Device_ConfigurationNumber)
     d54:	02 c0       	rjmp	.+4      	; 0xd5a <USB_Device_ProcessControlRequest+0x294>
     d56:	84 e0       	ldi	r24, 0x04	; 4
     d58:	01 c0       	rjmp	.+2      	; 0xd5c <USB_Device_ProcessControlRequest+0x296>
     d5a:	81 e0       	ldi	r24, 0x01	; 1
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
     d5c:	80 93 3f 01 	sts	0x013F, r24
	  USB_DeviceState = DEVICE_STATE_Configured;
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
     d60:	87 da       	rcall	.-2802   	; 0x270 <EVENT_USB_Device_ConfigurationChanged>
     d62:	80 91 e8 00 	lds	r24, 0x00E8
     d66:	83 ff       	sbrs	r24, 3
     d68:	0a c0       	rjmp	.+20     	; 0xd7e <USB_Device_ProcessControlRequest+0x2b8>
     d6a:	80 91 e8 00 	lds	r24, 0x00E8

	EVENT_USB_Device_ConfigurationChanged();
     d6e:	87 7f       	andi	r24, 0xF7	; 247
     d70:	80 93 e8 00 	sts	0x00E8, r24
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     d74:	80 91 eb 00 	lds	r24, 0x00EB
			default:
				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
     d78:	80 62       	ori	r24, 0x20	; 32
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     d7a:	80 93 eb 00 	sts	0x00EB, r24
     d7e:	ac 96       	adiw	r28, 0x2c	; 44
     d80:	0f b6       	in	r0, 0x3f	; 63
     d82:	f8 94       	cli
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
     d84:	de bf       	out	0x3e, r29	; 62
     d86:	0f be       	out	0x3f, r0	; 63
     d88:	cd bf       	out	0x3d, r28	; 61
     d8a:	df 91       	pop	r29
     d8c:	cf 91       	pop	r28
	{
		Endpoint_ClearSETUP();
		Endpoint_StallTransaction();
	}
}
     d8e:	1f 91       	pop	r17
     d90:	08 95       	ret

00000d92 <USB_Event_Stub>:
#include "Events.h"

void USB_Event_Stub(void)
{

}
     d92:	08 95       	ret

00000d94 <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
     d94:	cf 93       	push	r28
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_DeviceTask(void)
{
	if (USB_DeviceState == DEVICE_STATE_Unattached)
     d96:	80 91 3f 01 	lds	r24, 0x013F
     d9a:	88 23       	and	r24, r24
     d9c:	a9 f0       	breq	.+42     	; 0xdc8 <USB_USBTask+0x34>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
     d9e:	80 91 e9 00 	lds	r24, 0x00E9
     da2:	8f 70       	andi	r24, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
     da4:	90 91 ec 00 	lds	r25, 0x00EC
     da8:	90 ff       	sbrs	r25, 0
     daa:	02 c0       	rjmp	.+4      	; 0xdb0 <USB_USBTask+0x1c>
     dac:	c0 e8       	ldi	r28, 0x80	; 128
     dae:	01 c0       	rjmp	.+2      	; 0xdb2 <USB_USBTask+0x1e>
     db0:	c0 e0       	ldi	r28, 0x00	; 0
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
     db2:	c8 2b       	or	r28, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     db4:	10 92 e9 00 	sts	0x00E9, r1
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     db8:	80 91 e8 00 	lds	r24, 0x00E8

	uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

	if (Endpoint_IsSETUPReceived())
     dbc:	83 ff       	sbrs	r24, 3
     dbe:	01 c0       	rjmp	.+2      	; 0xdc2 <USB_USBTask+0x2e>
	  USB_Device_ProcessControlRequest();
     dc0:	82 de       	rcall	.-764    	; 0xac6 <USB_Device_ProcessControlRequest>
     dc2:	cf 70       	andi	r28, 0x0F	; 15
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     dc4:	c0 93 e9 00 	sts	0x00E9, r28
     dc8:	cf 91       	pop	r28
	#elif defined(USB_CAN_BE_HOST)
		USB_HostTask();
	#elif defined(USB_CAN_BE_DEVICE)
		USB_DeviceTask();
	#endif
}
     dca:	08 95       	ret

00000dcc <HID_Device_ProcessControlRequest>:
#define  __INCLUDE_FROM_HID_DRIVER
#define  __INCLUDE_FROM_HID_DEVICE_C
#include "HIDClassDevice.h"

void HID_Device_ProcessControlRequest(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
     dcc:	6f 92       	push	r6
     dce:	7f 92       	push	r7
     dd0:	8f 92       	push	r8
     dd2:	9f 92       	push	r9
     dd4:	af 92       	push	r10
     dd6:	bf 92       	push	r11
     dd8:	cf 92       	push	r12
     dda:	df 92       	push	r13
     ddc:	ef 92       	push	r14
     dde:	ff 92       	push	r15
     de0:	0f 93       	push	r16
     de2:	1f 93       	push	r17
     de4:	cf 93       	push	r28
     de6:	df 93       	push	r29
     de8:	00 d0       	rcall	.+0      	; 0xdea <HID_Device_ProcessControlRequest+0x1e>
     dea:	0f 92       	push	r0
     dec:	cd b7       	in	r28, 0x3d	; 61
     dee:	de b7       	in	r29, 0x3e	; 62
     df0:	7c 01       	movw	r14, r24
				Endpoint_ClearStatusStage();
			}

			break;
	}
}
     df2:	6d b6       	in	r6, 0x3d	; 61
     df4:	7e b6       	in	r7, 0x3e	; 62
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     df6:	80 91 e8 00 	lds	r24, 0x00E8
#define  __INCLUDE_FROM_HID_DEVICE_C
#include "HIDClassDevice.h"

void HID_Device_ProcessControlRequest(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
	if (!(Endpoint_IsSETUPReceived()))
     dfa:	83 ff       	sbrs	r24, 3
     dfc:	03 c1       	rjmp	.+518    	; 0x1004 <HID_Device_ProcessControlRequest+0x238>
	  return;

	if (USB_ControlRequest.wIndex != HIDInterfaceInfo->Config.InterfaceNumber)
     dfe:	f7 01       	movw	r30, r14
     e00:	80 81       	ld	r24, Z
     e02:	90 e0       	ldi	r25, 0x00	; 0
     e04:	20 91 44 01 	lds	r18, 0x0144
     e08:	30 91 45 01 	lds	r19, 0x0145
     e0c:	28 17       	cp	r18, r24
     e0e:	39 07       	cpc	r19, r25
     e10:	09 f0       	breq	.+2      	; 0xe14 <HID_Device_ProcessControlRequest+0x48>
     e12:	f8 c0       	rjmp	.+496    	; 0x1004 <HID_Device_ProcessControlRequest+0x238>
	  return;

	switch (USB_ControlRequest.bRequest)
     e14:	80 91 41 01 	lds	r24, 0x0141
     e18:	83 30       	cpi	r24, 0x03	; 3
     e1a:	09 f4       	brne	.+2      	; 0xe1e <HID_Device_ProcessControlRequest+0x52>
     e1c:	9a c0       	rjmp	.+308    	; 0xf52 <HID_Device_ProcessControlRequest+0x186>
     e1e:	84 30       	cpi	r24, 0x04	; 4
     e20:	30 f4       	brcc	.+12     	; 0xe2e <HID_Device_ProcessControlRequest+0x62>
     e22:	81 30       	cpi	r24, 0x01	; 1
     e24:	71 f0       	breq	.+28     	; 0xe42 <HID_Device_ProcessControlRequest+0x76>
     e26:	82 30       	cpi	r24, 0x02	; 2
     e28:	09 f0       	breq	.+2      	; 0xe2c <HID_Device_ProcessControlRequest+0x60>
     e2a:	ec c0       	rjmp	.+472    	; 0x1004 <HID_Device_ProcessControlRequest+0x238>
     e2c:	cf c0       	rjmp	.+414    	; 0xfcc <HID_Device_ProcessControlRequest+0x200>
     e2e:	8a 30       	cpi	r24, 0x0A	; 10
     e30:	09 f4       	brne	.+2      	; 0xe34 <HID_Device_ProcessControlRequest+0x68>
     e32:	b4 c0       	rjmp	.+360    	; 0xf9c <HID_Device_ProcessControlRequest+0x1d0>
     e34:	8b 30       	cpi	r24, 0x0B	; 11
     e36:	09 f4       	brne	.+2      	; 0xe3a <HID_Device_ProcessControlRequest+0x6e>
     e38:	9d c0       	rjmp	.+314    	; 0xf74 <HID_Device_ProcessControlRequest+0x1a8>
     e3a:	89 30       	cpi	r24, 0x09	; 9
     e3c:	09 f0       	breq	.+2      	; 0xe40 <HID_Device_ProcessControlRequest+0x74>
     e3e:	e2 c0       	rjmp	.+452    	; 0x1004 <HID_Device_ProcessControlRequest+0x238>
     e40:	4b c0       	rjmp	.+150    	; 0xed8 <HID_Device_ProcessControlRequest+0x10c>
	{
		case HID_REQ_GetReport:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
     e42:	80 91 40 01 	lds	r24, 0x0140
     e46:	81 3a       	cpi	r24, 0xA1	; 161
     e48:	09 f0       	breq	.+2      	; 0xe4c <HID_Device_ProcessControlRequest+0x80>
     e4a:	dc c0       	rjmp	.+440    	; 0x1004 <HID_Device_ProcessControlRequest+0x238>
     e4c:	9d b6       	in	r9, 0x3d	; 61
     e4e:	8e b6       	in	r8, 0x3e	; 62
			{
				uint16_t ReportSize = 0;
     e50:	1b 82       	std	Y+3, r1	; 0x03
     e52:	1a 82       	std	Y+2, r1	; 0x02
				uint8_t  ReportID   = (USB_ControlRequest.wValue & 0xFF);
     e54:	80 91 42 01 	lds	r24, 0x0142
     e58:	00 91 43 01 	lds	r16, 0x0143
     e5c:	89 83       	std	Y+1, r24	; 0x01
				uint8_t  ReportType = (USB_ControlRequest.wValue >> 8) - 1;
				uint8_t  ReportData[HIDInterfaceInfo->Config.PrevReportINBufferSize];
     e5e:	f7 01       	movw	r30, r14
     e60:	40 85       	ldd	r20, Z+8	; 0x08
     e62:	8d b7       	in	r24, 0x3d	; 61
     e64:	9e b7       	in	r25, 0x3e	; 62
     e66:	84 1b       	sub	r24, r20
     e68:	91 09       	sbc	r25, r1
     e6a:	0f b6       	in	r0, 0x3f	; 63
     e6c:	f8 94       	cli
     e6e:	9e bf       	out	0x3e, r25	; 62
     e70:	0f be       	out	0x3f, r0	; 63
     e72:	8d bf       	out	0x3d, r24	; 61
     e74:	cd b6       	in	r12, 0x3d	; 61
     e76:	de b6       	in	r13, 0x3e	; 62
     e78:	08 94       	sec
     e7a:	c1 1c       	adc	r12, r1
     e7c:	d1 1c       	adc	r13, r1

				memset(ReportData, 0, sizeof(ReportData));
     e7e:	bc 2c       	mov	r11, r12
     e80:	ad 2c       	mov	r10, r13
     e82:	c6 01       	movw	r24, r12
     e84:	60 e0       	ldi	r22, 0x00	; 0
     e86:	70 e0       	ldi	r23, 0x00	; 0
     e88:	50 e0       	ldi	r21, 0x00	; 0
     e8a:	c8 d1       	rcall	.+912    	; 0x121c <memset>
     e8c:	40 2f       	mov	r20, r16
		case HID_REQ_GetReport:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
			{
				uint16_t ReportSize = 0;
				uint8_t  ReportID   = (USB_ControlRequest.wValue & 0xFF);
				uint8_t  ReportType = (USB_ControlRequest.wValue >> 8) - 1;
     e8e:	41 50       	subi	r20, 0x01	; 1
     e90:	c7 01       	movw	r24, r14
				uint8_t  ReportData[HIDInterfaceInfo->Config.PrevReportINBufferSize];

				memset(ReportData, 0, sizeof(ReportData));

				CALLBACK_HID_Device_CreateHIDReport(HIDInterfaceInfo, &ReportID, ReportType, ReportData, &ReportSize);
     e92:	be 01       	movw	r22, r28
     e94:	6f 5f       	subi	r22, 0xFF	; 255
     e96:	7f 4f       	sbci	r23, 0xFF	; 255
     e98:	96 01       	movw	r18, r12
     e9a:	8e 01       	movw	r16, r28
     e9c:	0e 5f       	subi	r16, 0xFE	; 254
     e9e:	1f 4f       	sbci	r17, 0xFF	; 255
     ea0:	20 da       	rcall	.-3008   	; 0x2e2 <CALLBACK_HID_Device_CreateHIDReport>
     ea2:	f7 01       	movw	r30, r14
     ea4:	86 81       	ldd	r24, Z+6	; 0x06

				if (HIDInterfaceInfo->Config.PrevReportINBuffer != NULL)
     ea6:	97 81       	ldd	r25, Z+7	; 0x07
     ea8:	00 97       	sbiw	r24, 0x00	; 0
     eaa:	21 f0       	breq	.+8      	; 0xeb4 <HID_Device_ProcessControlRequest+0xe8>
     eac:	40 85       	ldd	r20, Z+8	; 0x08
     eae:	b6 01       	movw	r22, r12
				{
					memcpy(HIDInterfaceInfo->Config.PrevReportINBuffer, ReportData,
     eb0:	50 e0       	ldi	r21, 0x00	; 0
     eb2:	ab d1       	rcall	.+854    	; 0x120a <memcpy>
     eb4:	10 92 e9 00 	sts	0x00E9, r1
     eb8:	80 91 e8 00 	lds	r24, 0x00E8
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     ebc:	87 7f       	andi	r24, 0xF7	; 247
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     ebe:	80 93 e8 00 	sts	0x00E8, r24
     ec2:	6a 81       	ldd	r22, Y+2	; 0x02
     ec4:	7b 81       	ldd	r23, Y+3	; 0x03
     ec6:	8b 2d       	mov	r24, r11
				}

				Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

				Endpoint_ClearSETUP();
				Endpoint_Write_Control_Stream_LE(ReportData, ReportSize);
     ec8:	9a 2d       	mov	r25, r10
     eca:	0e db       	rcall	.-2532   	; 0x4e8 <Endpoint_Write_Control_Stream_LE>
     ecc:	80 91 e8 00 	lds	r24, 0x00E8
     ed0:	8b 77       	andi	r24, 0x7B	; 123
     ed2:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     ed6:	3a c0       	rjmp	.+116    	; 0xf4c <HID_Device_ProcessControlRequest+0x180>
     ed8:	80 91 40 01 	lds	r24, 0x0140
     edc:	81 32       	cpi	r24, 0x21	; 33
     ede:	09 f0       	breq	.+2      	; 0xee2 <HID_Device_ProcessControlRequest+0x116>
				Endpoint_ClearOUT();
			}

			break;
		case HID_REQ_SetReport:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
     ee0:	91 c0       	rjmp	.+290    	; 0x1004 <HID_Device_ProcessControlRequest+0x238>
     ee2:	9d b6       	in	r9, 0x3d	; 61
     ee4:	8e b6       	in	r8, 0x3e	; 62
     ee6:	00 91 46 01 	lds	r16, 0x0146
     eea:	10 91 47 01 	lds	r17, 0x0147
			{
				uint16_t ReportSize = USB_ControlRequest.wLength;
     eee:	c0 90 42 01 	lds	r12, 0x0142
     ef2:	d0 90 43 01 	lds	r13, 0x0143
				uint8_t  ReportID   = (USB_ControlRequest.wValue & 0xFF);
     ef6:	8d b7       	in	r24, 0x3d	; 61
     ef8:	9e b7       	in	r25, 0x3e	; 62
     efa:	80 1b       	sub	r24, r16
     efc:	91 0b       	sbc	r25, r17
				uint8_t  ReportType = (USB_ControlRequest.wValue >> 8) - 1;
				uint8_t  ReportData[ReportSize];
     efe:	0f b6       	in	r0, 0x3f	; 63
     f00:	f8 94       	cli
     f02:	9e bf       	out	0x3e, r25	; 62
     f04:	0f be       	out	0x3f, r0	; 63
     f06:	8d bf       	out	0x3d, r24	; 61
     f08:	ad b6       	in	r10, 0x3d	; 61
     f0a:	be b6       	in	r11, 0x3e	; 62
     f0c:	08 94       	sec
     f0e:	a1 1c       	adc	r10, r1
     f10:	b1 1c       	adc	r11, r1
     f12:	80 91 e8 00 	lds	r24, 0x00E8
     f16:	87 7f       	andi	r24, 0xF7	; 247
     f18:	80 93 e8 00 	sts	0x00E8, r24
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     f1c:	c5 01       	movw	r24, r10
     f1e:	b8 01       	movw	r22, r16
     f20:	3f db       	rcall	.-2434   	; 0x5a0 <Endpoint_Read_Control_Stream_LE>
     f22:	80 91 e8 00 	lds	r24, 0x00E8

				Endpoint_ClearSETUP();
				Endpoint_Read_Control_Stream_LE(ReportData, ReportSize);
     f26:	8e 77       	andi	r24, 0x7E	; 126
     f28:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     f2c:	81 e0       	ldi	r24, 0x01	; 1
     f2e:	90 e0       	ldi	r25, 0x00	; 0
     f30:	cc 20       	and	r12, r12
     f32:	11 f4       	brne	.+4      	; 0xf38 <HID_Device_ProcessControlRequest+0x16c>
     f34:	80 e0       	ldi	r24, 0x00	; 0
				Endpoint_ClearIN();

				CALLBACK_HID_Device_ProcessHIDReport(HIDInterfaceInfo, ReportID, ReportType,
     f36:	90 e0       	ldi	r25, 0x00	; 0
     f38:	4d 2d       	mov	r20, r13
     f3a:	41 50       	subi	r20, 0x01	; 1
     f3c:	95 01       	movw	r18, r10
     f3e:	28 0f       	add	r18, r24
     f40:	39 1f       	adc	r19, r25
		case HID_REQ_SetReport:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
			{
				uint16_t ReportSize = USB_ControlRequest.wLength;
				uint8_t  ReportID   = (USB_ControlRequest.wValue & 0xFF);
				uint8_t  ReportType = (USB_ControlRequest.wValue >> 8) - 1;
     f42:	08 1b       	sub	r16, r24
     f44:	19 0b       	sbc	r17, r25

				Endpoint_ClearSETUP();
				Endpoint_Read_Control_Stream_LE(ReportData, ReportSize);
				Endpoint_ClearIN();

				CALLBACK_HID_Device_ProcessHIDReport(HIDInterfaceInfo, ReportID, ReportType,
     f46:	c7 01       	movw	r24, r14
     f48:	6c 2d       	mov	r22, r12
     f4a:	24 da       	rcall	.-3000   	; 0x394 <CALLBACK_HID_Device_ProcessHIDReport>
     f4c:	9d be       	out	0x3d, r9	; 61
     f4e:	8e be       	out	0x3e, r8	; 62
     f50:	59 c0       	rjmp	.+178    	; 0x1004 <HID_Device_ProcessControlRequest+0x238>
     f52:	80 91 40 01 	lds	r24, 0x0140
     f56:	81 3a       	cpi	r24, 0xA1	; 161
     f58:	09 f0       	breq	.+2      	; 0xf5c <HID_Device_ProcessControlRequest+0x190>
     f5a:	54 c0       	rjmp	.+168    	; 0x1004 <HID_Device_ProcessControlRequest+0x238>
     f5c:	80 91 e8 00 	lds	r24, 0x00E8
				                                     &ReportData[ReportID ? 1 : 0], ReportSize - (ReportID ? 1 : 0));
			}

			break;
		case HID_REQ_GetProtocol:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
     f60:	87 7f       	andi	r24, 0xF7	; 247
     f62:	80 93 e8 00 	sts	0x00E8, r24
     f66:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     f6a:	80 ff       	sbrs	r24, 0
     f6c:	fc cf       	rjmp	.-8      	; 0xf66 <HID_Device_ProcessControlRequest+0x19a>
     f6e:	f7 01       	movw	r30, r14
     f70:	81 85       	ldd	r24, Z+9	; 0x09
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     f72:	40 c0       	rjmp	.+128    	; 0xff4 <HID_Device_ProcessControlRequest+0x228>
     f74:	80 91 40 01 	lds	r24, 0x0140
			{
				Endpoint_ClearSETUP();
				while (!(Endpoint_IsINReady()));
     f78:	81 32       	cpi	r24, 0x21	; 33
				Endpoint_Write_8(HIDInterfaceInfo->State.UsingReportProtocol);
     f7a:	09 f0       	breq	.+2      	; 0xf7e <HID_Device_ProcessControlRequest+0x1b2>
     f7c:	43 c0       	rjmp	.+134    	; 0x1004 <HID_Device_ProcessControlRequest+0x238>
     f7e:	80 91 e8 00 	lds	r24, 0x00E8
				Endpoint_ClearStatusStage();
			}

			break;
		case HID_REQ_SetProtocol:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
     f82:	87 7f       	andi	r24, 0xF7	; 247
     f84:	80 93 e8 00 	sts	0x00E8, r24
     f88:	22 dc       	rcall	.-1980   	; 0x7ce <Endpoint_ClearStatusStage>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     f8a:	90 91 42 01 	lds	r25, 0x0142
     f8e:	81 e0       	ldi	r24, 0x01	; 1
     f90:	99 23       	and	r25, r25
     f92:	09 f4       	brne	.+2      	; 0xf96 <HID_Device_ProcessControlRequest+0x1ca>
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
     f94:	80 e0       	ldi	r24, 0x00	; 0
     f96:	f7 01       	movw	r30, r14

				HIDInterfaceInfo->State.UsingReportProtocol = ((USB_ControlRequest.wValue & 0xFF) != 0x00);
     f98:	81 87       	std	Z+9, r24	; 0x09
     f9a:	34 c0       	rjmp	.+104    	; 0x1004 <HID_Device_ProcessControlRequest+0x238>
     f9c:	80 91 40 01 	lds	r24, 0x0140
     fa0:	81 32       	cpi	r24, 0x21	; 33
     fa2:	81 f5       	brne	.+96     	; 0x1004 <HID_Device_ProcessControlRequest+0x238>
     fa4:	80 91 e8 00 	lds	r24, 0x00E8
     fa8:	87 7f       	andi	r24, 0xF7	; 247
			}

			break;
		case HID_REQ_SetIdle:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
     faa:	80 93 e8 00 	sts	0x00E8, r24
     fae:	0f dc       	rcall	.-2018   	; 0x7ce <Endpoint_ClearStatusStage>
     fb0:	80 91 42 01 	lds	r24, 0x0142
     fb4:	90 91 43 01 	lds	r25, 0x0143
     fb8:	80 70       	andi	r24, 0x00	; 0
     fba:	36 e0       	ldi	r19, 0x06	; 6
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
     fbc:	96 95       	lsr	r25
     fbe:	87 95       	ror	r24

				HIDInterfaceInfo->State.IdleCount = ((USB_ControlRequest.wValue & 0xFF00) >> 6);
     fc0:	3a 95       	dec	r19
     fc2:	e1 f7       	brne	.-8      	; 0xfbc <HID_Device_ProcessControlRequest+0x1f0>
     fc4:	f7 01       	movw	r30, r14
     fc6:	95 87       	std	Z+13, r25	; 0x0d
     fc8:	84 87       	std	Z+12, r24	; 0x0c
     fca:	1c c0       	rjmp	.+56     	; 0x1004 <HID_Device_ProcessControlRequest+0x238>
     fcc:	80 91 40 01 	lds	r24, 0x0140
     fd0:	81 3a       	cpi	r24, 0xA1	; 161
     fd2:	c1 f4       	brne	.+48     	; 0x1004 <HID_Device_ProcessControlRequest+0x238>
     fd4:	80 91 e8 00 	lds	r24, 0x00E8
     fd8:	87 7f       	andi	r24, 0xF7	; 247
     fda:	80 93 e8 00 	sts	0x00E8, r24
			}

			break;
		case HID_REQ_GetIdle:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
     fde:	80 91 e8 00 	lds	r24, 0x00E8
     fe2:	80 ff       	sbrs	r24, 0
     fe4:	fc cf       	rjmp	.-8      	; 0xfde <HID_Device_ProcessControlRequest+0x212>
     fe6:	f7 01       	movw	r30, r14
     fe8:	84 85       	ldd	r24, Z+12	; 0x0c
     fea:	95 85       	ldd	r25, Z+13	; 0x0d
     fec:	96 95       	lsr	r25
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     fee:	87 95       	ror	r24
     ff0:	96 95       	lsr	r25
			{
				Endpoint_ClearSETUP();
				while (!(Endpoint_IsINReady()));
     ff2:	87 95       	ror	r24
     ff4:	80 93 f1 00 	sts	0x00F1, r24
				Endpoint_Write_8(HIDInterfaceInfo->State.IdleCount >> 2);
     ff8:	80 91 e8 00 	lds	r24, 0x00E8
     ffc:	8e 77       	andi	r24, 0x7E	; 126
     ffe:	80 93 e8 00 	sts	0x00E8, r24
    1002:	e5 db       	rcall	.-2102   	; 0x7ce <Endpoint_ClearStatusStage>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    1004:	0f b6       	in	r0, 0x3f	; 63
    1006:	f8 94       	cli
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1008:	7e be       	out	0x3e, r7	; 62
    100a:	0f be       	out	0x3f, r0	; 63
    100c:	6d be       	out	0x3d, r6	; 61
    100e:	0f 90       	pop	r0
    1010:	0f 90       	pop	r0
				Endpoint_ClearIN();
				Endpoint_ClearStatusStage();
    1012:	0f 90       	pop	r0
    1014:	df 91       	pop	r29
			}

			break;
	}
}
    1016:	cf 91       	pop	r28
    1018:	1f 91       	pop	r17
    101a:	0f 91       	pop	r16
    101c:	ff 90       	pop	r15
    101e:	ef 90       	pop	r14
    1020:	df 90       	pop	r13
    1022:	cf 90       	pop	r12
    1024:	bf 90       	pop	r11
    1026:	af 90       	pop	r10
    1028:	9f 90       	pop	r9
    102a:	8f 90       	pop	r8
    102c:	7f 90       	pop	r7
    102e:	6f 90       	pop	r6
    1030:	08 95       	ret

00001032 <HID_Device_ConfigureEndpoints>:
    1032:	cf 93       	push	r28
    1034:	df 93       	push	r29
    1036:	fc 01       	movw	r30, r24
    1038:	09 96       	adiw	r24, 0x09	; 9
    103a:	dc 01       	movw	r26, r24
    103c:	87 e0       	ldi	r24, 0x07	; 7
    103e:	ed 01       	movw	r28, r26
    1040:	19 92       	st	Y+, r1
    1042:	8a 95       	dec	r24

bool HID_Device_ConfigureEndpoints(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
	memset(&HIDInterfaceInfo->State, 0x00, sizeof(HIDInterfaceInfo->State));
    1044:	e9 f7       	brne	.-6      	; 0x1040 <HID_Device_ConfigureEndpoints+0xe>
	HIDInterfaceInfo->State.UsingReportProtocol = true;
    1046:	81 e0       	ldi	r24, 0x01	; 1
    1048:	81 87       	std	Z+9, r24	; 0x09
	HIDInterfaceInfo->State.IdleCount           = 500;
    104a:	84 ef       	ldi	r24, 0xF4	; 244
    104c:	91 e0       	ldi	r25, 0x01	; 1
    104e:	95 87       	std	Z+13, r25	; 0x0d
    1050:	84 87       	std	Z+12, r24	; 0x0c

	HIDInterfaceInfo->Config.ReportINEndpoint.Type = EP_TYPE_INTERRUPT;
    1052:	83 e0       	ldi	r24, 0x03	; 3
    1054:	84 83       	std	Z+4, r24	; 0x04

	if (!(Endpoint_ConfigureEndpointTable(&HIDInterfaceInfo->Config.ReportINEndpoint, 1)))
    1056:	cf 01       	movw	r24, r30
    1058:	01 96       	adiw	r24, 0x01	; 1
    105a:	61 e0       	ldi	r22, 0x01	; 1
    105c:	7c db       	rcall	.-2312   	; 0x756 <Endpoint_ConfigureEndpointTable>
    105e:	df 91       	pop	r29
	  return false;	
	
	return true;
}
    1060:	cf 91       	pop	r28
    1062:	08 95       	ret

00001064 <HID_Device_USBTask>:
    1064:	4f 92       	push	r4

void HID_Device_USBTask(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
    1066:	5f 92       	push	r5
    1068:	6f 92       	push	r6
    106a:	7f 92       	push	r7
    106c:	8f 92       	push	r8
    106e:	9f 92       	push	r9
    1070:	af 92       	push	r10
    1072:	bf 92       	push	r11
    1074:	cf 92       	push	r12
    1076:	df 92       	push	r13
    1078:	ef 92       	push	r14
    107a:	ff 92       	push	r15
    107c:	0f 93       	push	r16
    107e:	1f 93       	push	r17
    1080:	cf 93       	push	r28
    1082:	df 93       	push	r29
    1084:	00 d0       	rcall	.+0      	; 0x1086 <HID_Device_USBTask+0x22>
    1086:	0f 92       	push	r0
    1088:	cd b7       	in	r28, 0x3d	; 61
    108a:	de b7       	in	r29, 0x3e	; 62
    108c:	7c 01       	movw	r14, r24
			Endpoint_ClearIN();
		}
		
		HIDInterfaceInfo->State.PrevFrameNum = USB_Device_GetFrameNumber();
	}
}
    108e:	4d b6       	in	r4, 0x3d	; 61
    1090:	5e b6       	in	r5, 0x3e	; 62
	return true;
}

void HID_Device_USBTask(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
	if (USB_DeviceState != DEVICE_STATE_Configured)
    1092:	80 91 3f 01 	lds	r24, 0x013F
    1096:	84 30       	cpi	r24, 0x04	; 4
    1098:	09 f0       	breq	.+2      	; 0x109c <HID_Device_USBTask+0x38>
    109a:	91 c0       	rjmp	.+290    	; 0x11be <HID_Device_USBTask+0x15a>
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
    109c:	80 91 e4 00 	lds	r24, 0x00E4
    10a0:	90 91 e5 00 	lds	r25, 0x00E5
	  return;

	if (HIDInterfaceInfo->State.PrevFrameNum == USB_Device_GetFrameNumber())
    10a4:	f7 01       	movw	r30, r14
    10a6:	22 85       	ldd	r18, Z+10	; 0x0a
    10a8:	33 85       	ldd	r19, Z+11	; 0x0b
    10aa:	28 17       	cp	r18, r24
    10ac:	39 07       	cpc	r19, r25
    10ae:	09 f4       	brne	.+2      	; 0x10b2 <HID_Device_USBTask+0x4e>
    10b0:	86 c0       	rjmp	.+268    	; 0x11be <HID_Device_USBTask+0x15a>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    10b2:	81 81       	ldd	r24, Z+1	; 0x01
    10b4:	8f 70       	andi	r24, 0x0F	; 15
    10b6:	80 93 e9 00 	sts	0x00E9, r24
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    10ba:	80 91 e8 00 	lds	r24, 0x00E8
	  return;
	  
	Endpoint_SelectEndpoint(HIDInterfaceInfo->Config.ReportINEndpoint.Address);

	if (Endpoint_IsReadWriteAllowed())
    10be:	85 ff       	sbrs	r24, 5
    10c0:	7e c0       	rjmp	.+252    	; 0x11be <HID_Device_USBTask+0x15a>
    10c2:	7d b6       	in	r7, 0x3d	; 61
    10c4:	6e b6       	in	r6, 0x3e	; 62
	{
		uint8_t  ReportINData[HIDInterfaceInfo->Config.PrevReportINBufferSize];
    10c6:	40 85       	ldd	r20, Z+8	; 0x08
    10c8:	8d b7       	in	r24, 0x3d	; 61
    10ca:	9e b7       	in	r25, 0x3e	; 62
    10cc:	84 1b       	sub	r24, r20
    10ce:	91 09       	sbc	r25, r1
    10d0:	0f b6       	in	r0, 0x3f	; 63
    10d2:	f8 94       	cli
    10d4:	9e bf       	out	0x3e, r25	; 62
    10d6:	0f be       	out	0x3f, r0	; 63
    10d8:	8d bf       	out	0x3d, r24	; 61
    10da:	0d b7       	in	r16, 0x3d	; 61
    10dc:	1e b7       	in	r17, 0x3e	; 62
    10de:	0f 5f       	subi	r16, 0xFF	; 255
    10e0:	1f 4f       	sbci	r17, 0xFF	; 255
		uint8_t  ReportID     = 0;
    10e2:	19 82       	std	Y+1, r1	; 0x01
		uint16_t ReportINSize = 0;
    10e4:	1b 82       	std	Y+3, r1	; 0x03
    10e6:	1a 82       	std	Y+2, r1	; 0x02

		memset(ReportINData, 0, sizeof(ReportINData));
    10e8:	b0 2e       	mov	r11, r16
    10ea:	a1 2e       	mov	r10, r17
    10ec:	c8 01       	movw	r24, r16
    10ee:	60 e0       	ldi	r22, 0x00	; 0
    10f0:	70 e0       	ldi	r23, 0x00	; 0
    10f2:	50 e0       	ldi	r21, 0x00	; 0
    10f4:	93 d0       	rcall	.+294    	; 0x121c <memset>
    10f6:	c7 01       	movw	r24, r14

		bool ForceSend         = CALLBACK_HID_Device_CreateHIDReport(HIDInterfaceInfo, &ReportID, HID_REPORT_ITEM_In,
    10f8:	be 01       	movw	r22, r28
    10fa:	6f 5f       	subi	r22, 0xFF	; 255
    10fc:	7f 4f       	sbci	r23, 0xFF	; 255
    10fe:	40 e0       	ldi	r20, 0x00	; 0
    1100:	98 01       	movw	r18, r16
    1102:	8e 01       	movw	r16, r28
    1104:	0e 5f       	subi	r16, 0xFE	; 254
    1106:	1f 4f       	sbci	r17, 0xFF	; 255
    1108:	ec d8       	rcall	.-3624   	; 0x2e2 <CALLBACK_HID_Device_CreateHIDReport>
    110a:	18 2f       	mov	r17, r24
    110c:	f7 01       	movw	r30, r14
    110e:	84 85       	ldd	r24, Z+12	; 0x0c
		                                                             ReportINData, &ReportINSize);
		bool StatesChanged     = false;
		bool IdlePeriodElapsed = (HIDInterfaceInfo->State.IdleCount && !(HIDInterfaceInfo->State.IdleMSRemaining));
    1110:	95 85       	ldd	r25, Z+13	; 0x0d
    1112:	00 97       	sbiw	r24, 0x00	; 0
    1114:	59 f0       	breq	.+22     	; 0x112c <HID_Device_USBTask+0xc8>
    1116:	81 e0       	ldi	r24, 0x01	; 1
    1118:	90 e0       	ldi	r25, 0x00	; 0
	  return false;	
	
	return true;
}

void HID_Device_USBTask(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
    111a:	26 85       	ldd	r18, Z+14	; 0x0e
    111c:	37 85       	ldd	r19, Z+15	; 0x0f
    111e:	21 15       	cp	r18, r1
    1120:	31 05       	cpc	r19, r1
    1122:	11 f0       	breq	.+4      	; 0x1128 <HID_Device_USBTask+0xc4>
    1124:	80 e0       	ldi	r24, 0x00	; 0
    1126:	90 e0       	ldi	r25, 0x00	; 0
    1128:	4c 01       	movw	r8, r24
    112a:	02 c0       	rjmp	.+4      	; 0x1130 <HID_Device_USBTask+0xcc>
		memset(ReportINData, 0, sizeof(ReportINData));

		bool ForceSend         = CALLBACK_HID_Device_CreateHIDReport(HIDInterfaceInfo, &ReportID, HID_REPORT_ITEM_In,
		                                                             ReportINData, &ReportINSize);
		bool StatesChanged     = false;
		bool IdlePeriodElapsed = (HIDInterfaceInfo->State.IdleCount && !(HIDInterfaceInfo->State.IdleMSRemaining));
    112c:	88 24       	eor	r8, r8
    112e:	99 24       	eor	r9, r9
    1130:	f7 01       	movw	r30, r14
    1132:	c6 80       	ldd	r12, Z+6	; 0x06

		if (HIDInterfaceInfo->Config.PrevReportINBuffer != NULL)
    1134:	d7 80       	ldd	r13, Z+7	; 0x07
    1136:	c1 14       	cp	r12, r1
    1138:	d1 04       	cpc	r13, r1
    113a:	91 f0       	breq	.+36     	; 0x1160 <HID_Device_USBTask+0xfc>
    113c:	4a 81       	ldd	r20, Y+2	; 0x02
    113e:	5b 81       	ldd	r21, Y+3	; 0x03
		{
			StatesChanged = (memcmp(ReportINData, HIDInterfaceInfo->Config.PrevReportINBuffer, ReportINSize) != 0);
    1140:	8b 2d       	mov	r24, r11
    1142:	9a 2d       	mov	r25, r10
    1144:	b6 01       	movw	r22, r12
    1146:	54 d0       	rcall	.+168    	; 0x11f0 <memcmp>
    1148:	01 e0       	ldi	r16, 0x01	; 1
    114a:	00 97       	sbiw	r24, 0x00	; 0
    114c:	09 f4       	brne	.+2      	; 0x1150 <HID_Device_USBTask+0xec>
    114e:	00 e0       	ldi	r16, 0x00	; 0
    1150:	f7 01       	movw	r30, r14
    1152:	40 85       	ldd	r20, Z+8	; 0x08
    1154:	c6 01       	movw	r24, r12
			memcpy(HIDInterfaceInfo->Config.PrevReportINBuffer, ReportINData, HIDInterfaceInfo->Config.PrevReportINBufferSize);
    1156:	6b 2d       	mov	r22, r11
    1158:	7a 2d       	mov	r23, r10
    115a:	50 e0       	ldi	r21, 0x00	; 0
    115c:	56 d0       	rcall	.+172    	; 0x120a <memcpy>
    115e:	01 c0       	rjmp	.+2      	; 0x1162 <HID_Device_USBTask+0xfe>
    1160:	00 e0       	ldi	r16, 0x00	; 0
    1162:	8a 81       	ldd	r24, Y+2	; 0x02
    1164:	9b 81       	ldd	r25, Y+3	; 0x03
    1166:	00 97       	sbiw	r24, 0x00	; 0

		memset(ReportINData, 0, sizeof(ReportINData));

		bool ForceSend         = CALLBACK_HID_Device_CreateHIDReport(HIDInterfaceInfo, &ReportID, HID_REPORT_ITEM_In,
		                                                             ReportINData, &ReportINSize);
		bool StatesChanged     = false;
    1168:	09 f1       	breq	.+66     	; 0x11ac <HID_Device_USBTask+0x148>
		{
			StatesChanged = (memcmp(ReportINData, HIDInterfaceInfo->Config.PrevReportINBuffer, ReportINSize) != 0);
			memcpy(HIDInterfaceInfo->Config.PrevReportINBuffer, ReportINData, HIDInterfaceInfo->Config.PrevReportINBufferSize);
		}

		if (ReportINSize && (ForceSend || StatesChanged || IdlePeriodElapsed))
    116a:	11 23       	and	r17, r17
    116c:	29 f4       	brne	.+10     	; 0x1178 <HID_Device_USBTask+0x114>
    116e:	00 23       	and	r16, r16
    1170:	19 f4       	brne	.+6      	; 0x1178 <HID_Device_USBTask+0x114>
    1172:	81 14       	cp	r8, r1
    1174:	91 04       	cpc	r9, r1
    1176:	d1 f0       	breq	.+52     	; 0x11ac <HID_Device_USBTask+0x148>
    1178:	f7 01       	movw	r30, r14
    117a:	84 85       	ldd	r24, Z+12	; 0x0c
    117c:	95 85       	ldd	r25, Z+13	; 0x0d
    117e:	97 87       	std	Z+15, r25	; 0x0f
		{
			HIDInterfaceInfo->State.IdleMSRemaining = HIDInterfaceInfo->State.IdleCount;
    1180:	86 87       	std	Z+14, r24	; 0x0e
    1182:	81 81       	ldd	r24, Z+1	; 0x01
    1184:	8f 70       	andi	r24, 0x0F	; 15
    1186:	80 93 e9 00 	sts	0x00E9, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    118a:	89 81       	ldd	r24, Y+1	; 0x01
    118c:	88 23       	and	r24, r24
    118e:	11 f0       	breq	.+4      	; 0x1194 <HID_Device_USBTask+0x130>
    1190:	80 93 f1 00 	sts	0x00F1, r24

			Endpoint_SelectEndpoint(HIDInterfaceInfo->Config.ReportINEndpoint.Address);

			if (ReportID)
    1194:	6a 81       	ldd	r22, Y+2	; 0x02
    1196:	7b 81       	ldd	r23, Y+3	; 0x03
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    1198:	8b 2d       	mov	r24, r11
    119a:	9a 2d       	mov	r25, r10
			  Endpoint_Write_8(ReportID);

			Endpoint_Write_Stream_LE(ReportINData, ReportINSize, NULL);
    119c:	40 e0       	ldi	r20, 0x00	; 0
    119e:	50 e0       	ldi	r21, 0x00	; 0
    11a0:	53 d9       	rcall	.-3418   	; 0x448 <Endpoint_Write_Stream_LE>
    11a2:	80 91 e8 00 	lds	r24, 0x00E8
    11a6:	8e 77       	andi	r24, 0x7E	; 126
    11a8:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    11ac:	80 91 e4 00 	lds	r24, 0x00E4
    11b0:	90 91 e5 00 	lds	r25, 0x00E5
    11b4:	f7 01       	movw	r30, r14
    11b6:	93 87       	std	Z+11, r25	; 0x0b
    11b8:	82 87       	std	Z+10, r24	; 0x0a
    11ba:	7d be       	out	0x3d, r7	; 61
    11bc:	6e be       	out	0x3e, r6	; 62

			Endpoint_ClearIN();
		}
		
		HIDInterfaceInfo->State.PrevFrameNum = USB_Device_GetFrameNumber();
    11be:	0f b6       	in	r0, 0x3f	; 63
    11c0:	f8 94       	cli
    11c2:	5e be       	out	0x3e, r5	; 62
    11c4:	0f be       	out	0x3f, r0	; 63
    11c6:	4d be       	out	0x3d, r4	; 61
	}
}
    11c8:	0f 90       	pop	r0
    11ca:	0f 90       	pop	r0
    11cc:	0f 90       	pop	r0
    11ce:	df 91       	pop	r29
    11d0:	cf 91       	pop	r28
    11d2:	1f 91       	pop	r17
    11d4:	0f 91       	pop	r16
    11d6:	ff 90       	pop	r15
    11d8:	ef 90       	pop	r14
    11da:	df 90       	pop	r13
    11dc:	cf 90       	pop	r12
    11de:	bf 90       	pop	r11
    11e0:	af 90       	pop	r10
    11e2:	9f 90       	pop	r9
    11e4:	8f 90       	pop	r8
    11e6:	7f 90       	pop	r7
    11e8:	6f 90       	pop	r6
    11ea:	5f 90       	pop	r5
    11ec:	4f 90       	pop	r4
    11ee:	08 95       	ret

000011f0 <memcmp>:
    11f0:	fb 01       	movw	r30, r22
    11f2:	dc 01       	movw	r26, r24
    11f4:	04 c0       	rjmp	.+8      	; 0x11fe <memcmp+0xe>
    11f6:	8d 91       	ld	r24, X+
    11f8:	01 90       	ld	r0, Z+
    11fa:	80 19       	sub	r24, r0
    11fc:	21 f4       	brne	.+8      	; 0x1206 <memcmp+0x16>
    11fe:	41 50       	subi	r20, 0x01	; 1
    1200:	50 40       	sbci	r21, 0x00	; 0
    1202:	c8 f7       	brcc	.-14     	; 0x11f6 <memcmp+0x6>
    1204:	88 1b       	sub	r24, r24
    1206:	99 0b       	sbc	r25, r25
    1208:	08 95       	ret

0000120a <memcpy>:
    120a:	fb 01       	movw	r30, r22
    120c:	dc 01       	movw	r26, r24
    120e:	02 c0       	rjmp	.+4      	; 0x1214 <memcpy+0xa>
    1210:	01 90       	ld	r0, Z+
    1212:	0d 92       	st	X+, r0
    1214:	41 50       	subi	r20, 0x01	; 1
    1216:	50 40       	sbci	r21, 0x00	; 0
    1218:	d8 f7       	brcc	.-10     	; 0x1210 <memcpy+0x6>
    121a:	08 95       	ret

0000121c <memset>:
    121c:	dc 01       	movw	r26, r24
    121e:	01 c0       	rjmp	.+2      	; 0x1222 <memset+0x6>
    1220:	6d 93       	st	X+, r22
    1222:	41 50       	subi	r20, 0x01	; 1
    1224:	50 40       	sbci	r21, 0x00	; 0
    1226:	e0 f7       	brcc	.-8      	; 0x1220 <memset+0x4>
    1228:	08 95       	ret

0000122a <_exit>:
    122a:	f8 94       	cli

0000122c <__stop_program>:
    122c:	ff cf       	rjmp	.-2      	; 0x122c <__stop_program>
