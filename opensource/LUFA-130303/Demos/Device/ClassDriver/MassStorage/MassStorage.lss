
MassStorage.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000080  00800100  000019c8  00001a5c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000019c8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000d  00800180  00800180  00001adc  2**0
                  ALLOC
  3 .stab         00000a98  00000000  00000000  00001adc  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000002aa  00000000  00000000  00002574  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000578  00000000  00000000  00002820  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000ac5e  00000000  00000000  00002d98  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000026b0  00000000  00000000  0000d9f6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00004ad8  00000000  00000000  000100a6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001020  00000000  00000000  00014b80  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00003be6  00000000  00000000  00015ba0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00006614  00000000  00000000  00019786  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000007c0  00000000  00000000  0001fd9a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	8b c0       	rjmp	.+278    	; 0x118 <__ctors_end>
       2:	00 00       	nop
       4:	a8 c0       	rjmp	.+336    	; 0x156 <__bad_interrupt>
       6:	00 00       	nop
       8:	a6 c0       	rjmp	.+332    	; 0x156 <__bad_interrupt>
       a:	00 00       	nop
       c:	a4 c0       	rjmp	.+328    	; 0x156 <__bad_interrupt>
       e:	00 00       	nop
      10:	a2 c0       	rjmp	.+324    	; 0x156 <__bad_interrupt>
      12:	00 00       	nop
      14:	a0 c0       	rjmp	.+320    	; 0x156 <__bad_interrupt>
      16:	00 00       	nop
      18:	9e c0       	rjmp	.+316    	; 0x156 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	9c c0       	rjmp	.+312    	; 0x156 <__bad_interrupt>
      1e:	00 00       	nop
      20:	9a c0       	rjmp	.+308    	; 0x156 <__bad_interrupt>
      22:	00 00       	nop
      24:	98 c0       	rjmp	.+304    	; 0x156 <__bad_interrupt>
      26:	00 00       	nop
      28:	0c 94 d0 08 	jmp	0x11a0	; 0x11a0 <__vector_10>
      2c:	0c 94 9f 09 	jmp	0x133e	; 0x133e <__vector_11>
      30:	92 c0       	rjmp	.+292    	; 0x156 <__bad_interrupt>
      32:	00 00       	nop
      34:	90 c0       	rjmp	.+288    	; 0x156 <__bad_interrupt>
      36:	00 00       	nop
      38:	8e c0       	rjmp	.+284    	; 0x156 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	8c c0       	rjmp	.+280    	; 0x156 <__bad_interrupt>
      3e:	00 00       	nop
      40:	8a c0       	rjmp	.+276    	; 0x156 <__bad_interrupt>
      42:	00 00       	nop
      44:	88 c0       	rjmp	.+272    	; 0x156 <__bad_interrupt>
      46:	00 00       	nop
      48:	86 c0       	rjmp	.+268    	; 0x156 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	84 c0       	rjmp	.+264    	; 0x156 <__bad_interrupt>
      4e:	00 00       	nop
      50:	82 c0       	rjmp	.+260    	; 0x156 <__bad_interrupt>
      52:	00 00       	nop
      54:	80 c0       	rjmp	.+256    	; 0x156 <__bad_interrupt>
      56:	00 00       	nop
      58:	7e c0       	rjmp	.+252    	; 0x156 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	7c c0       	rjmp	.+248    	; 0x156 <__bad_interrupt>
      5e:	00 00       	nop
      60:	7a c0       	rjmp	.+244    	; 0x156 <__bad_interrupt>
      62:	00 00       	nop
      64:	78 c0       	rjmp	.+240    	; 0x156 <__bad_interrupt>
      66:	00 00       	nop
      68:	76 c0       	rjmp	.+236    	; 0x156 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	74 c0       	rjmp	.+232    	; 0x156 <__bad_interrupt>
      6e:	00 00       	nop
      70:	72 c0       	rjmp	.+228    	; 0x156 <__bad_interrupt>
      72:	00 00       	nop
      74:	70 c0       	rjmp	.+224    	; 0x156 <__bad_interrupt>
      76:	00 00       	nop
      78:	6e c0       	rjmp	.+220    	; 0x156 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	6c c0       	rjmp	.+216    	; 0x156 <__bad_interrupt>
      7e:	00 00       	nop
      80:	6a c0       	rjmp	.+212    	; 0x156 <__bad_interrupt>
      82:	00 00       	nop
      84:	68 c0       	rjmp	.+208    	; 0x156 <__bad_interrupt>
      86:	00 00       	nop
      88:	66 c0       	rjmp	.+204    	; 0x156 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	64 c0       	rjmp	.+200    	; 0x156 <__bad_interrupt>
      8e:	00 00       	nop
      90:	62 c0       	rjmp	.+196    	; 0x156 <__bad_interrupt>
      92:	00 00       	nop
      94:	60 c0       	rjmp	.+192    	; 0x156 <__bad_interrupt>
      96:	00 00       	nop

00000098 <ProductString>:
      98:	2e 03 4c 00 55 00 46 00 41 00 20 00 4d 00 61 00     ..L.U.F.A. .M.a.
      a8:	73 00 73 00 20 00 53 00 74 00 6f 00 72 00 61 00     s.s. .S.t.o.r.a.
      b8:	67 00 65 00 20 00 44 00 65 00 6d 00 6f 00 00 00     g.e. .D.e.m.o...

000000c8 <ManufacturerString>:
      c8:	18 03 44 00 65 00 61 00 6e 00 20 00 43 00 61 00     ..D.e.a.n. .C.a.
      d8:	6d 00 65 00 72 00 61 00 00 00                       m.e.r.a...

000000e2 <LanguageString>:
      e2:	04 03 09 04                                         ....

000000e6 <ConfigurationDescriptor>:
      e6:	09 02 20 00 01 01 00 80 32 09 04 00 00 02 08 06     .. .....2.......
      f6:	50 00 07 05 83 02 40 00 05 07 05 04 02 40 00 05     P.....@......@..

00000106 <DeviceDescriptor>:
     106:	12 01 10 01 00 00 00 08 eb 03 45 20 01 00 01 02     ..........E ....
     116:	dc 01                                               ..

00000118 <__ctors_end>:
     118:	11 24       	eor	r1, r1
     11a:	1f be       	out	0x3f, r1	; 63
     11c:	cf ef       	ldi	r28, 0xFF	; 255
     11e:	d0 e2       	ldi	r29, 0x20	; 32
     120:	de bf       	out	0x3e, r29	; 62
     122:	cd bf       	out	0x3d, r28	; 61

00000124 <__do_copy_data>:
     124:	11 e0       	ldi	r17, 0x01	; 1
     126:	a0 e0       	ldi	r26, 0x00	; 0
     128:	b1 e0       	ldi	r27, 0x01	; 1
     12a:	e8 ec       	ldi	r30, 0xC8	; 200
     12c:	f9 e1       	ldi	r31, 0x19	; 25
     12e:	00 e0       	ldi	r16, 0x00	; 0
     130:	0b bf       	out	0x3b, r16	; 59
     132:	02 c0       	rjmp	.+4      	; 0x138 <__do_copy_data+0x14>
     134:	07 90       	elpm	r0, Z+
     136:	0d 92       	st	X+, r0
     138:	a0 38       	cpi	r26, 0x80	; 128
     13a:	b1 07       	cpc	r27, r17
     13c:	d9 f7       	brne	.-10     	; 0x134 <__do_copy_data+0x10>
     13e:	1b be       	out	0x3b, r1	; 59

00000140 <__do_clear_bss>:
     140:	11 e0       	ldi	r17, 0x01	; 1
     142:	a0 e8       	ldi	r26, 0x80	; 128
     144:	b1 e0       	ldi	r27, 0x01	; 1
     146:	01 c0       	rjmp	.+2      	; 0x14a <.do_clear_bss_start>

00000148 <.do_clear_bss_loop>:
     148:	1d 92       	st	X+, r1

0000014a <.do_clear_bss_start>:
     14a:	ad 38       	cpi	r26, 0x8D	; 141
     14c:	b1 07       	cpc	r27, r17
     14e:	e1 f7       	brne	.-8      	; 0x148 <.do_clear_bss_loop>
     150:	3d d0       	rcall	.+122    	; 0x1cc <main>
     152:	0c 94 e2 0c 	jmp	0x19c4	; 0x19c4 <_exit>

00000156 <__bad_interrupt>:
     156:	54 cf       	rjmp	.-344    	; 0x0 <__vectors>

00000158 <LEDs_SetAllLEDs>:
				PORTD &= ~LEDMask;
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
			{
				PORTD = ((PORTD & ~LEDS_ALL_LEDS) | LEDMask);
     158:	9b b1       	in	r25, 0x0b	; 11
     15a:	9f 70       	andi	r25, 0x0F	; 15
     15c:	98 2b       	or	r25, r24
     15e:	9b b9       	out	0x0b, r25	; 11
			}
     160:	08 95       	ret

00000162 <SetupHardware>:

/** Configures the board hardware and chip peripherals for the demo's functionality. */
void SetupHardware(void)
{
	/* Disable watchdog if enabled by bootloader/fuses */
	MCUSR &= ~(1 << WDRF);
     162:	84 b7       	in	r24, 0x34	; 52
     164:	87 7f       	andi	r24, 0xF7	; 247
     166:	84 bf       	out	0x34, r24	; 52
	wdt_disable();
     168:	88 e1       	ldi	r24, 0x18	; 24
     16a:	0f b6       	in	r0, 0x3f	; 63
     16c:	f8 94       	cli
     16e:	80 93 60 00 	sts	0x0060, r24
     172:	10 92 60 00 	sts	0x0060, r1
     176:	0f be       	out	0x3f, r0	; 63
The type of x is clock_div_t.
*/
void clock_prescale_set(clock_div_t __x)
{
    uint8_t __tmp = _BV(CLKPCE);
    __asm__ __volatile__ (
     178:	90 e0       	ldi	r25, 0x00	; 0
     17a:	80 e8       	ldi	r24, 0x80	; 128
     17c:	0f b6       	in	r0, 0x3f	; 63
     17e:	f8 94       	cli
     180:	80 93 61 00 	sts	0x0061, r24
     184:	90 93 61 00 	sts	0x0061, r25
     188:	0f be       	out	0x3f, r0	; 63

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void LEDs_Init(void)
			{
				DDRD  |=  LEDS_ALL_LEDS;
     18a:	8a b1       	in	r24, 0x0a	; 10
     18c:	80 6f       	ori	r24, 0xF0	; 240
     18e:	8a b9       	out	0x0a, r24	; 10
				PORTD &= ~LEDS_ALL_LEDS;
     190:	8b b1       	in	r24, 0x0b	; 11
     192:	8f 70       	andi	r24, 0x0F	; 15
     194:	8b b9       	out	0x0b, r24	; 11
			 *                         \c SPI_SCK_*, \c SPI_SAMPLE_*, \c SPI_ORDER_* and \c SPI_MODE_* masks.
			 */
			static inline void SPI_Init(const uint8_t SPIOptions)
			{
				/* Prevent high rise times on PB.0 (/SS) from forcing a change to SPI slave mode */
				DDRB  |= (1 << 0);
     196:	20 9a       	sbi	0x04, 0	; 4
				PORTB |= (1 << 0);
     198:	28 9a       	sbi	0x05, 0	; 5

				DDRB  |=  ((1 << 1) | (1 << 2));
     19a:	84 b1       	in	r24, 0x04	; 4
     19c:	86 60       	ori	r24, 0x06	; 6
     19e:	84 b9       	out	0x04, r24	; 4
				DDRB  &= ~(1 << 3);
     1a0:	23 98       	cbi	0x04, 3	; 4
				PORTB |=  (1 << 3);
     1a2:	2b 9a       	sbi	0x05, 3	; 5

				if (SPIOptions & SPI_USE_DOUBLESPEED)
				  SPSR |= (1 << SPI2X);
     1a4:	8d b5       	in	r24, 0x2d	; 45
     1a6:	81 60       	ori	r24, 0x01	; 1
     1a8:	8d bd       	out	0x2d, r24	; 45
				else
				  SPSR &= ~(1 << SPI2X);

				/* Switch /SS to input mode after configuration to allow for forced mode changes */
				DDRB &= ~(1 << 0);
     1aa:	20 98       	cbi	0x04, 0	; 4

				SPCR  = ((1 << SPE) | SPIOptions);
     1ac:	8c e5       	ldi	r24, 0x5C	; 92
     1ae:	8c bd       	out	0x2c, r24	; 44
			/** Initializes the dataflash driver so that commands and data may be sent to an attached dataflash IC.
			 *  The microcontroller's SPI driver MUST be initialized before any of the dataflash commands are used.
			 */
			static inline void Dataflash_Init(void)
			{
				DATAFLASH_CHIPCS_DDR  |= DATAFLASH_CHIPCS_MASK;
     1b0:	8d b1       	in	r24, 0x0d	; 13
     1b2:	83 60       	ori	r24, 0x03	; 3
     1b4:	8d b9       	out	0x0d, r24	; 13
				DATAFLASH_CHIPCS_PORT |= DATAFLASH_CHIPCS_MASK;
     1b6:	8e b1       	in	r24, 0x0e	; 14
     1b8:	83 60       	ori	r24, 0x03	; 3
     1ba:	8e b9       	out	0x0e, r24	; 14

	/* Hardware Initialization */
	LEDs_Init();
	SPI_Init(SPI_SPEED_FCPU_DIV_2 | SPI_ORDER_MSB_FIRST | SPI_SCK_LEAD_FALLING | SPI_SAMPLE_TRAILING | SPI_MODE_MASTER);
	Dataflash_Init();
	USB_Init();
     1bc:	d6 d7       	rcall	.+4012   	; 0x116a <USB_Init>
     1be:	42 d3       	rcall	.+1668   	; 0x844 <DataflashManager_CheckDataflashOperation>

	/* Check if the Dataflash is working, abort if not */
	if (!(DataflashManager_CheckDataflashOperation()))
     1c0:	88 23       	and	r24, r24
     1c2:	19 f4       	brne	.+6      	; 0x1ca <SetupHardware+0x68>
     1c4:	80 e9       	ldi	r24, 0x90	; 144
     1c6:	c8 df       	rcall	.-112    	; 0x158 <LEDs_SetAllLEDs>
	{
		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
     1c8:	ff cf       	rjmp	.-2      	; 0x1c8 <SetupHardware+0x66>
     1ca:	ee c2       	rjmp	.+1500   	; 0x7a8 <DataflashManager_ResetDataflashProtections>

000001cc <main>:
     1cc:	ca df       	rcall	.-108    	; 0x162 <SetupHardware>
     1ce:	80 e1       	ldi	r24, 0x10	; 16
		for(;;);
	}

	/* Clear Dataflash sector protections, if enabled */
	DataflashManager_ResetDataflashProtections();
     1d0:	c3 df       	rcall	.-122    	; 0x158 <LEDs_SetAllLEDs>
     1d2:	78 94       	sei
}
     1d4:	80 e0       	ldi	r24, 0x00	; 0
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				sei();
     1d6:	91 e0       	ldi	r25, 0x01	; 1
	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
	GlobalInterruptEnable();

	for (;;)
	{
		MS_Device_USBTask(&Disk_MS_Interface);
     1d8:	0e 94 bd 0b 	call	0x177a	; 0x177a <MS_Device_USBTask>
     1dc:	0e 94 48 0b 	call	0x1690	; 0x1690 <USB_USBTask>
		USB_USBTask();
     1e0:	f9 cf       	rjmp	.-14     	; 0x1d4 <main+0x8>

000001e2 <EVENT_USB_Device_Connect>:
     1e2:	80 ea       	ldi	r24, 0xA0	; 160
     1e4:	b9 cf       	rjmp	.-142    	; 0x158 <LEDs_SetAllLEDs>

000001e6 <EVENT_USB_Device_Disconnect>:
}

/** Event handler for the library USB Connection event. */
void EVENT_USB_Device_Connect(void)
{
	LEDs_SetAllLEDs(LEDMASK_USB_ENUMERATING);
     1e6:	80 e1       	ldi	r24, 0x10	; 16
}
     1e8:	b7 cf       	rjmp	.-146    	; 0x158 <LEDs_SetAllLEDs>

000001ea <EVENT_USB_Device_ConfigurationChanged>:

/** Event handler for the library USB Disconnection event. */
void EVENT_USB_Device_Disconnect(void)
{
	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
     1ea:	80 e0       	ldi	r24, 0x00	; 0
}
     1ec:	91 e0       	ldi	r25, 0x01	; 1
/** Event handler for the library USB Configuration Changed event. */
void EVENT_USB_Device_ConfigurationChanged(void)
{
	bool ConfigSuccess = true;

	ConfigSuccess &= MS_Device_ConfigureEndpoints(&Disk_MS_Interface);
     1ee:	0e 94 a1 0b 	call	0x1742	; 0x1742 <MS_Device_ConfigureEndpoints>

	LEDs_SetAllLEDs(ConfigSuccess ? LEDMASK_USB_READY : LEDMASK_USB_ERROR);
     1f2:	88 23       	and	r24, r24
     1f4:	11 f0       	breq	.+4      	; 0x1fa <EVENT_USB_Device_ConfigurationChanged+0x10>
     1f6:	80 e6       	ldi	r24, 0x60	; 96
     1f8:	01 c0       	rjmp	.+2      	; 0x1fc <EVENT_USB_Device_ConfigurationChanged+0x12>
     1fa:	80 e9       	ldi	r24, 0x90	; 144
     1fc:	ad cf       	rjmp	.-166    	; 0x158 <LEDs_SetAllLEDs>

000001fe <EVENT_USB_Device_ControlRequest>:
     1fe:	80 e0       	ldi	r24, 0x00	; 0
}
     200:	91 e0       	ldi	r25, 0x01	; 1

/** Event handler for the library USB Control Request reception event. */
void EVENT_USB_Device_ControlRequest(void)
{
	MS_Device_ProcessControlRequest(&Disk_MS_Interface);
     202:	0c 94 64 0b 	jmp	0x16c8	; 0x16c8 <MS_Device_ProcessControlRequest>

00000206 <CALLBACK_MS_Device_SCSICommandReceived>:
}
     206:	cf 93       	push	r28
/** Mass Storage class driver callback function the reception of SCSI commands from the host, which must be processed.
 *
 *  \param[in] MSInterfaceInfo  Pointer to the Mass Storage class interface configuration structure being referenced
 */
bool CALLBACK_MS_Device_SCSICommandReceived(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
     208:	df 93       	push	r29
     20a:	ec 01       	movw	r28, r24
	bool CommandSuccess;

	LEDs_SetAllLEDs(LEDMASK_USB_BUSY);
     20c:	80 e2       	ldi	r24, 0x20	; 32
     20e:	a4 df       	rcall	.-184    	; 0x158 <LEDs_SetAllLEDs>
     210:	ce 01       	movw	r24, r28
	CommandSuccess = SCSI_DecodeSCSICommand(MSInterfaceInfo);
     212:	88 d3       	rcall	.+1808   	; 0x924 <SCSI_DecodeSCSICommand>
     214:	c8 2f       	mov	r28, r24
     216:	80 e6       	ldi	r24, 0x60	; 96
     218:	9f df       	rcall	.-194    	; 0x158 <LEDs_SetAllLEDs>
	LEDs_SetAllLEDs(LEDMASK_USB_READY);
     21a:	8c 2f       	mov	r24, r28
     21c:	df 91       	pop	r29
     21e:	cf 91       	pop	r28

	return CommandSuccess;
}
     220:	08 95       	ret

00000222 <CALLBACK_USB_GetDescriptor>:
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
     222:	92 30       	cpi	r25, 0x02	; 2
     224:	29 f0       	breq	.+10     	; 0x230 <CALLBACK_USB_GetDescriptor+0xe>
     226:	93 30       	cpi	r25, 0x03	; 3
     228:	41 f0       	breq	.+16     	; 0x23a <CALLBACK_USB_GetDescriptor+0x18>
     22a:	91 30       	cpi	r25, 0x01	; 1
     22c:	e9 f4       	brne	.+58     	; 0x268 <CALLBACK_USB_GetDescriptor+0x46>
     22e:	17 c0       	rjmp	.+46     	; 0x25e <CALLBACK_USB_GetDescriptor+0x3c>
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
			Size    = sizeof(USB_Descriptor_Configuration_t);
     230:	80 e2       	ldi	r24, 0x20	; 32
     232:	90 e0       	ldi	r25, 0x00	; 0
		case DTYPE_Device:
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
     234:	e6 ee       	ldi	r30, 0xE6	; 230
     236:	f0 e0       	ldi	r31, 0x00	; 0
			Size    = sizeof(USB_Descriptor_Configuration_t);
			break;
     238:	1b c0       	rjmp	.+54     	; 0x270 <CALLBACK_USB_GetDescriptor+0x4e>
		case DTYPE_String:
			switch (DescriptorNumber)
     23a:	81 30       	cpi	r24, 0x01	; 1
     23c:	41 f0       	breq	.+16     	; 0x24e <CALLBACK_USB_GetDescriptor+0x2c>
     23e:	81 30       	cpi	r24, 0x01	; 1
     240:	18 f0       	brcs	.+6      	; 0x248 <CALLBACK_USB_GetDescriptor+0x26>
     242:	82 30       	cpi	r24, 0x02	; 2
     244:	89 f4       	brne	.+34     	; 0x268 <CALLBACK_USB_GetDescriptor+0x46>
     246:	06 c0       	rjmp	.+12     	; 0x254 <CALLBACK_USB_GetDescriptor+0x32>
			{
				case 0x00:
					Address = &LanguageString;
					Size    = pgm_read_byte(&LanguageString.Header.Size);
     248:	e2 ee       	ldi	r30, 0xE2	; 226
     24a:	f0 e0       	ldi	r31, 0x00	; 0
     24c:	05 c0       	rjmp	.+10     	; 0x258 <CALLBACK_USB_GetDescriptor+0x36>
					break;
				case 0x01:
					Address = &ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
     24e:	e8 ec       	ldi	r30, 0xC8	; 200
     250:	f0 e0       	ldi	r31, 0x00	; 0
     252:	02 c0       	rjmp	.+4      	; 0x258 <CALLBACK_USB_GetDescriptor+0x36>
					break;
				case 0x02:
					Address = &ProductString;
					Size    = pgm_read_byte(&ProductString.Header.Size);
     254:	e8 e9       	ldi	r30, 0x98	; 152
     256:	f0 e0       	ldi	r31, 0x00	; 0
     258:	84 91       	lpm	r24, Z
     25a:	90 e0       	ldi	r25, 0x00	; 0
					break;
     25c:	09 c0       	rjmp	.+18     	; 0x270 <CALLBACK_USB_GetDescriptor+0x4e>

	switch (DescriptorType)
	{
		case DTYPE_Device:
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
     25e:	82 e1       	ldi	r24, 0x12	; 18
     260:	90 e0       	ldi	r25, 0x00	; 0
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
	{
		case DTYPE_Device:
			Address = &DeviceDescriptor;
     262:	e6 e0       	ldi	r30, 0x06	; 6
     264:	f1 e0       	ldi	r31, 0x01	; 1
     266:	04 c0       	rjmp	.+8      	; 0x270 <CALLBACK_USB_GetDescriptor+0x4e>
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;
     268:	80 e0       	ldi	r24, 0x00	; 0
     26a:	90 e0       	ldi	r25, 0x00	; 0
                                    const void** const DescriptorAddress)
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
     26c:	e0 e0       	ldi	r30, 0x00	; 0
     26e:	f0 e0       	ldi	r31, 0x00	; 0
			}

			break;
	}

	*DescriptorAddress = Address;
     270:	da 01       	movw	r26, r20
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	fc 93       	st	X, r31
     276:	ee 93       	st	-X, r30
	return Size;
}
     278:	08 95       	ret

0000027a <Dataflash_ToggleSelectedChipCS>:
			 *          or a DATAFLASH_CHIPn mask (where n is the chip number).
			 */
			static inline uint8_t Dataflash_GetSelectedChip(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t Dataflash_GetSelectedChip(void)
			{
				return (~DATAFLASH_CHIPCS_PORT & DATAFLASH_CHIPCS_MASK);
     27a:	8e b1       	in	r24, 0x0e	; 14
			 *              the chip number).
			 */
			static inline void Dataflash_SelectChip(const uint8_t ChipMask) ATTR_ALWAYS_INLINE;
			static inline void Dataflash_SelectChip(const uint8_t ChipMask)
			{
				DATAFLASH_CHIPCS_PORT = ((DATAFLASH_CHIPCS_PORT | DATAFLASH_CHIPCS_MASK) & ~ChipMask);
     27c:	9e b1       	in	r25, 0x0e	; 14
     27e:	93 60       	ori	r25, 0x03	; 3
     280:	9e b9       	out	0x0e, r25	; 14
     282:	9e b1       	in	r25, 0x0e	; 14
     284:	8c 6f       	ori	r24, 0xFC	; 252
     286:	93 60       	ori	r25, 0x03	; 3
     288:	89 23       	and	r24, r25
     28a:	8e b9       	out	0x0e, r24	; 14
			{
				uint8_t SelectedChipMask = Dataflash_GetSelectedChip();

				Dataflash_DeselectChip();
				Dataflash_SelectChip(SelectedChipMask);
			}
     28c:	08 95       	ret

0000028e <Dataflash_WaitWhileBusy>:
			/** Spin-loops while the currently selected dataflash is busy executing a command, such as a main
			 *  memory page program or main memory to buffer transfer.
			 */
			static inline void Dataflash_WaitWhileBusy(void)
			{
				Dataflash_ToggleSelectedChipCS();
     28e:	f5 df       	rcall	.-22     	; 0x27a <Dataflash_ToggleSelectedChipCS>
     290:	87 ed       	ldi	r24, 0xD7	; 215
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     292:	8e bd       	out	0x2e, r24	; 46
     294:	0d b4       	in	r0, 0x2d	; 45
				while (!(SPSR & (1 << SPIF)));
     296:	07 fe       	sbrs	r0, 7
     298:	fd cf       	rjmp	.-6      	; 0x294 <Dataflash_WaitWhileBusy+0x6>
     29a:	1e bc       	out	0x2e, r1	; 46
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     29c:	0d b4       	in	r0, 0x2d	; 45
				while (!(SPSR & (1 << SPIF)));
     29e:	07 fe       	sbrs	r0, 7
     2a0:	fd cf       	rjmp	.-6      	; 0x29c <Dataflash_WaitWhileBusy+0xe>
     2a2:	0e b4       	in	r0, 0x2e	; 46
				Dataflash_SendByte(DF_CMD_GETSTATUS);
				while (!(Dataflash_ReceiveByte() & DF_STATUS_READY));
     2a4:	07 fe       	sbrs	r0, 7
     2a6:	f9 cf       	rjmp	.-14     	; 0x29a <Dataflash_WaitWhileBusy+0xc>
     2a8:	e8 cf       	rjmp	.-48     	; 0x27a <Dataflash_ToggleSelectedChipCS>

000002aa <Dataflash_SendAddressBytes>:
				Dataflash_ToggleSelectedChipCS();
     2aa:	9c 01       	movw	r18, r24
     2ac:	36 95       	lsr	r19
			}
     2ae:	27 95       	ror	r18
			{
				#if (DATAFLASH_TOTALCHIPS == 2)
					PageAddress >>= 1;
				#endif
				
				Dataflash_SendByte(PageAddress >> 5);
     2b0:	56 e0       	ldi	r21, 0x06	; 6
     2b2:	96 95       	lsr	r25
     2b4:	87 95       	ror	r24
     2b6:	5a 95       	dec	r21
     2b8:	e1 f7       	brne	.-8      	; 0x2b2 <Dataflash_SendAddressBytes+0x8>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     2ba:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     2bc:	0d b4       	in	r0, 0x2d	; 45
     2be:	07 fe       	sbrs	r0, 7
     2c0:	fd cf       	rjmp	.-6      	; 0x2bc <Dataflash_SendAddressBytes+0x12>
				Dataflash_SendByte((PageAddress << 3) | (BufferByte >> 8));
     2c2:	22 0f       	add	r18, r18
     2c4:	22 0f       	add	r18, r18
     2c6:	22 0f       	add	r18, r18
     2c8:	27 2b       	or	r18, r23
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     2ca:	2e bd       	out	0x2e, r18	; 46
				while (!(SPSR & (1 << SPIF)));
     2cc:	0d b4       	in	r0, 0x2d	; 45
     2ce:	07 fe       	sbrs	r0, 7
     2d0:	fd cf       	rjmp	.-6      	; 0x2cc <Dataflash_SendAddressBytes+0x22>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     2d2:	6e bd       	out	0x2e, r22	; 46
				while (!(SPSR & (1 << SPIF)));
     2d4:	0d b4       	in	r0, 0x2d	; 45
     2d6:	07 fe       	sbrs	r0, 7
     2d8:	fd cf       	rjmp	.-6      	; 0x2d4 <Dataflash_SendAddressBytes+0x2a>
				Dataflash_SendByte(BufferByte);
			}
     2da:	08 95       	ret

000002dc <Dataflash_SelectChipFromPage>:
			 *              the chip number).
			 */
			static inline void Dataflash_SelectChip(const uint8_t ChipMask) ATTR_ALWAYS_INLINE;
			static inline void Dataflash_SelectChip(const uint8_t ChipMask)
			{
				DATAFLASH_CHIPCS_PORT = ((DATAFLASH_CHIPCS_PORT | DATAFLASH_CHIPCS_MASK) & ~ChipMask);
     2dc:	2e b1       	in	r18, 0x0e	; 14
     2de:	23 60       	ori	r18, 0x03	; 3
     2e0:	2e b9       	out	0x0e, r18	; 14
			 */
			static inline void Dataflash_SelectChipFromPage(const uint16_t PageAddress)
			{
				Dataflash_DeselectChip();

				if (PageAddress >= (DATAFLASH_PAGES * DATAFLASH_TOTALCHIPS))
     2e2:	20 e4       	ldi	r18, 0x40	; 64
     2e4:	80 30       	cpi	r24, 0x00	; 0
     2e6:	92 07       	cpc	r25, r18
     2e8:	58 f4       	brcc	.+22     	; 0x300 <Dataflash_SelectChipFromPage+0x24>
				  return;

				#if (DATAFLASH_TOTALCHIPS == 2)
					if (PageAddress & 0x01)
     2ea:	80 ff       	sbrs	r24, 0
     2ec:	05 c0       	rjmp	.+10     	; 0x2f8 <Dataflash_SelectChipFromPage+0x1c>
			 *              the chip number).
			 */
			static inline void Dataflash_SelectChip(const uint8_t ChipMask) ATTR_ALWAYS_INLINE;
			static inline void Dataflash_SelectChip(const uint8_t ChipMask)
			{
				DATAFLASH_CHIPCS_PORT = ((DATAFLASH_CHIPCS_PORT | DATAFLASH_CHIPCS_MASK) & ~ChipMask);
     2ee:	8e b1       	in	r24, 0x0e	; 14
     2f0:	83 60       	ori	r24, 0x03	; 3
     2f2:	8d 7f       	andi	r24, 0xFD	; 253
     2f4:	8e b9       	out	0x0e, r24	; 14
     2f6:	08 95       	ret
     2f8:	8e b1       	in	r24, 0x0e	; 14
     2fa:	83 60       	ori	r24, 0x03	; 3
     2fc:	8e 7f       	andi	r24, 0xFE	; 254
     2fe:	8e b9       	out	0x0e, r24	; 14
     300:	08 95       	ret

00000302 <DataflashManager_WriteBlocks>:
 *  \param[in] TotalBlocks   Number of blocks of data to write
 */
void DataflashManager_WriteBlocks(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo,
                                  const uint32_t BlockAddress,
                                  uint16_t TotalBlocks)
{
     302:	3f 92       	push	r3
     304:	4f 92       	push	r4
     306:	5f 92       	push	r5
     308:	6f 92       	push	r6
     30a:	7f 92       	push	r7
     30c:	8f 92       	push	r8
     30e:	9f 92       	push	r9
     310:	af 92       	push	r10
     312:	bf 92       	push	r11
     314:	cf 92       	push	r12
     316:	df 92       	push	r13
     318:	ef 92       	push	r14
     31a:	ff 92       	push	r15
     31c:	0f 93       	push	r16
     31e:	1f 93       	push	r17
     320:	cf 93       	push	r28
     322:	df 93       	push	r29
     324:	0f 92       	push	r0
     326:	cd b7       	in	r28, 0x3d	; 61
     328:	de b7       	in	r29, 0x3e	; 62
     32a:	2c 01       	movw	r4, r24
     32c:	b2 2e       	mov	r11, r18
     32e:	c3 2e       	mov	r12, r19
	uint16_t CurrDFPage          = ((BlockAddress * VIRTUAL_MEMORY_BLOCK_SIZE) / DATAFLASH_PAGE_SIZE);
     330:	db 01       	movw	r26, r22
     332:	ca 01       	movw	r24, r20
     334:	f9 e0       	ldi	r31, 0x09	; 9
     336:	88 0f       	add	r24, r24
     338:	99 1f       	adc	r25, r25
     33a:	aa 1f       	adc	r26, r26
     33c:	bb 1f       	adc	r27, r27
     33e:	fa 95       	dec	r31
     340:	d1 f7       	brne	.-12     	; 0x336 <DataflashManager_WriteBlocks+0x34>
     342:	1a e0       	ldi	r17, 0x0A	; 10
     344:	b6 95       	lsr	r27
     346:	a7 95       	ror	r26
     348:	97 95       	ror	r25
     34a:	87 95       	ror	r24
     34c:	1a 95       	dec	r17
     34e:	d1 f7       	brne	.-12     	; 0x344 <DataflashManager_WriteBlocks+0x42>
     350:	7c 01       	movw	r14, r24
	uint16_t CurrDFPageByte      = ((BlockAddress * VIRTUAL_MEMORY_BLOCK_SIZE) % DATAFLASH_PAGE_SIZE);
     352:	8a 01       	movw	r16, r20
     354:	10 2f       	mov	r17, r16
     356:	00 27       	eor	r16, r16
     358:	11 0f       	add	r17, r17
     35a:	13 70       	andi	r17, 0x03	; 3
	uint8_t  CurrDFPageByteDiv16 = (CurrDFPageByte >> 4);
	bool     UsingSecondBuffer   = false;

	/* Select the correct starting Dataflash IC for the block requested */
	Dataflash_SelectChipFromPage(CurrDFPage);
     35c:	bf df       	rcall	.-130    	; 0x2dc <Dataflash_SelectChipFromPage>
     35e:	83 e5       	ldi	r24, 0x53	; 83
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     360:	8e bd       	out	0x2e, r24	; 46
     362:	0d b4       	in	r0, 0x2d	; 45
				while (!(SPSR & (1 << SPIF)));
     364:	07 fe       	sbrs	r0, 7
     366:	fd cf       	rjmp	.-6      	; 0x362 <DataflashManager_WriteBlocks+0x60>
     368:	c7 01       	movw	r24, r14

#if (DATAFLASH_PAGE_SIZE > VIRTUAL_MEMORY_BLOCK_SIZE)
	/* Copy selected dataflash's current page contents to the Dataflash buffer */
	Dataflash_SendByte(DF_CMD_MAINMEMTOBUFF1);
	Dataflash_SendAddressBytes(CurrDFPage, 0);
     36a:	60 e0       	ldi	r22, 0x00	; 0
     36c:	70 e0       	ldi	r23, 0x00	; 0
     36e:	9d df       	rcall	.-198    	; 0x2aa <Dataflash_SendAddressBytes>
     370:	8e df       	rcall	.-228    	; 0x28e <Dataflash_WaitWhileBusy>
     372:	84 e8       	ldi	r24, 0x84	; 132
	Dataflash_WaitWhileBusy();
     374:	8e bd       	out	0x2e, r24	; 46
     376:	0d b4       	in	r0, 0x2d	; 45
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     378:	07 fe       	sbrs	r0, 7
     37a:	fd cf       	rjmp	.-6      	; 0x376 <DataflashManager_WriteBlocks+0x74>
				while (!(SPSR & (1 << SPIF)));
     37c:	80 e0       	ldi	r24, 0x00	; 0
     37e:	90 e0       	ldi	r25, 0x00	; 0
     380:	b8 01       	movw	r22, r16
#endif

	/* Send the Dataflash buffer write command */
	Dataflash_SendByte(DF_CMD_BUFF1WRITE);
	Dataflash_SendAddressBytes(0, CurrDFPageByte);
     382:	93 df       	rcall	.-218    	; 0x2aa <Dataflash_SendAddressBytes>
     384:	7a d6       	rcall	.+3316   	; 0x107a <Endpoint_WaitUntilReady>
     386:	88 23       	and	r24, r24
     388:	09 f0       	breq	.+2      	; 0x38c <DataflashManager_WriteBlocks+0x8a>
     38a:	f3 c0       	rjmp	.+486    	; 0x572 <DataflashManager_WriteBlocks+0x270>

	/* Wait until endpoint is ready before continuing */
	if (Endpoint_WaitUntilReady())
     38c:	a8 01       	movw	r20, r16
     38e:	74 e0       	ldi	r23, 0x04	; 4
     390:	56 95       	lsr	r21
     392:	47 95       	ror	r20
     394:	7a 95       	dec	r23
                                  const uint32_t BlockAddress,
                                  uint16_t TotalBlocks)
{
	uint16_t CurrDFPage          = ((BlockAddress * VIRTUAL_MEMORY_BLOCK_SIZE) / DATAFLASH_PAGE_SIZE);
	uint16_t CurrDFPageByte      = ((BlockAddress * VIRTUAL_MEMORY_BLOCK_SIZE) % DATAFLASH_PAGE_SIZE);
	uint8_t  CurrDFPageByteDiv16 = (CurrDFPageByte >> 4);
     396:	e1 f7       	brne	.-8      	; 0x390 <DataflashManager_WriteBlocks+0x8e>
     398:	0b 2d       	mov	r16, r11
     39a:	1c 2d       	mov	r17, r12
     39c:	cc 24       	eor	r12, r12
     39e:	dd 24       	eor	r13, r13
     3a0:	33 24       	eor	r3, r3
     3a2:	38 01       	movw	r6, r16
     3a4:	e5 e0       	ldi	r30, 0x05	; 5
     3a6:	66 0c       	add	r6, r6
     3a8:	77 1c       	adc	r7, r7
     3aa:	ea 95       	dec	r30
 *
 *  \param[in] MSInterfaceInfo  Pointer to a structure containing a Mass Storage Class configuration and state
 *  \param[in] BlockAddress  Data block starting address for the write sequence
 *  \param[in] TotalBlocks   Number of blocks of data to write
 */
void DataflashManager_WriteBlocks(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo,
     3ac:	e1 f7       	brne	.-8      	; 0x3a6 <DataflashManager_WriteBlocks+0xa4>
     3ae:	bb 24       	eor	r11, r11
     3b0:	b3 94       	inc	r11
     3b2:	c0 c0       	rjmp	.+384    	; 0x534 <DataflashManager_WriteBlocks+0x232>
     3b4:	60 e2       	ldi	r22, 0x20	; 32
     3b6:	a6 2e       	mov	r10, r22
				CurrDFPageByteDiv16 = 0;
				CurrDFPage++;

				/* Once all the Dataflash ICs have had their first buffers filled, switch buffers to maintain throughput */
				if (Dataflash_GetSelectedChip() == DATAFLASH_CHIP_MASK(DATAFLASH_TOTALCHIPS))
				  UsingSecondBuffer = !(UsingSecondBuffer);
     3b8:	46 01       	movw	r8, r12
     3ba:	86 0c       	add	r8, r6
     3bc:	97 1c       	adc	r9, r7

	/* Wait until endpoint is ready before continuing */
	if (Endpoint_WaitUntilReady())
	  return;

	while (TotalBlocks)
     3be:	80 91 e8 00 	lds	r24, 0x00E8
				/* Select the next Dataflash chip based on the new Dataflash page index */
				Dataflash_SelectChipFromPage(CurrDFPage);

#if (DATAFLASH_PAGE_SIZE > VIRTUAL_MEMORY_BLOCK_SIZE)
				/* If less than one Dataflash page remaining, copy over the existing page to preserve trailing data */
				if ((TotalBlocks * (VIRTUAL_MEMORY_BLOCK_SIZE >> 4)) < (DATAFLASH_PAGE_SIZE >> 4))
     3c2:	85 fd       	sbrc	r24, 5
     3c4:	0b c0       	rjmp	.+22     	; 0x3dc <DataflashManager_WriteBlocks+0xda>
     3c6:	80 91 e8 00 	lds	r24, 0x00E8
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
     3ca:	8b 77       	andi	r24, 0x7B	; 123

		/* Write an endpoint packet sized data block to the Dataflash */
		while (BytesInBlockDiv16 < (VIRTUAL_MEMORY_BLOCK_SIZE >> 4))
		{
			/* Check if the endpoint is currently empty */
			if (!(Endpoint_IsReadWriteAllowed()))
     3cc:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     3d0:	49 83       	std	Y+1, r20	; 0x01
     3d2:	53 d6       	rcall	.+3238   	; 0x107a <Endpoint_WaitUntilReady>
     3d4:	49 81       	ldd	r20, Y+1	; 0x01
     3d6:	88 23       	and	r24, r24
     3d8:	09 f0       	breq	.+2      	; 0x3dc <DataflashManager_WriteBlocks+0xda>
			{
				/* Clear the current endpoint bank */
				Endpoint_ClearOUT();

				/* Wait until the host has sent another packet */
				if (Endpoint_WaitUntilReady())
     3da:	cb c0       	rjmp	.+406    	; 0x572 <DataflashManager_WriteBlocks+0x270>
     3dc:	40 34       	cpi	r20, 0x40	; 64
     3de:	09 f0       	breq	.+2      	; 0x3e2 <DataflashManager_WriteBlocks+0xe0>
     3e0:	3b c0       	rjmp	.+118    	; 0x458 <DataflashManager_WriteBlocks+0x156>
     3e2:	55 df       	rcall	.-342    	; 0x28e <Dataflash_WaitWhileBusy>
     3e4:	33 20       	and	r3, r3
     3e6:	11 f0       	breq	.+4      	; 0x3ec <DataflashManager_WriteBlocks+0xea>
				  return;
			}

			/* Check if end of Dataflash page reached */
			if (CurrDFPageByteDiv16 == (DATAFLASH_PAGE_SIZE >> 4))
     3e8:	86 e8       	ldi	r24, 0x86	; 134
     3ea:	01 c0       	rjmp	.+2      	; 0x3ee <DataflashManager_WriteBlocks+0xec>
     3ec:	83 e8       	ldi	r24, 0x83	; 131
			{
				/* Write the Dataflash buffer contents back to the Dataflash page */
				Dataflash_WaitWhileBusy();
     3ee:	8e bd       	out	0x2e, r24	; 46
     3f0:	0d b4       	in	r0, 0x2d	; 45
				Dataflash_SendByte(UsingSecondBuffer ? DF_CMD_BUFF2TOMAINMEMWITHERASE : DF_CMD_BUFF1TOMAINMEMWITHERASE);
     3f2:	07 fe       	sbrs	r0, 7
     3f4:	fd cf       	rjmp	.-6      	; 0x3f0 <DataflashManager_WriteBlocks+0xee>
     3f6:	c7 01       	movw	r24, r14
     3f8:	60 e0       	ldi	r22, 0x00	; 0
     3fa:	70 e0       	ldi	r23, 0x00	; 0
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     3fc:	56 df       	rcall	.-340    	; 0x2aa <Dataflash_SendAddressBytes>
				while (!(SPSR & (1 << SPIF)));
     3fe:	08 94       	sec
     400:	e1 1c       	adc	r14, r1
     402:	f1 1c       	adc	r15, r1
				Dataflash_SendAddressBytes(CurrDFPage, 0);
     404:	8e b1       	in	r24, 0x0e	; 14
     406:	80 95       	com	r24
     408:	83 70       	andi	r24, 0x03	; 3
     40a:	82 30       	cpi	r24, 0x02	; 2
     40c:	09 f4       	brne	.+2      	; 0x410 <DataflashManager_WriteBlocks+0x10e>

				/* Reset the Dataflash buffer counter, increment the page counter */
				CurrDFPageByteDiv16 = 0;
				CurrDFPage++;
     40e:	3b 24       	eor	r3, r11
     410:	c7 01       	movw	r24, r14
     412:	64 df       	rcall	.-312    	; 0x2dc <Dataflash_SelectChipFromPage>
			 *          or a DATAFLASH_CHIPn mask (where n is the chip number).
			 */
			static inline uint8_t Dataflash_GetSelectedChip(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t Dataflash_GetSelectedChip(void)
			{
				return (~DATAFLASH_CHIPCS_PORT & DATAFLASH_CHIPCS_MASK);
     414:	80 e4       	ldi	r24, 0x40	; 64
     416:	88 16       	cp	r8, r24
     418:	91 04       	cpc	r9, r1

				/* Once all the Dataflash ICs have had their first buffers filled, switch buffers to maintain throughput */
				if (Dataflash_GetSelectedChip() == DATAFLASH_CHIP_MASK(DATAFLASH_TOTALCHIPS))
     41a:	78 f4       	brcc	.+30     	; 0x43a <DataflashManager_WriteBlocks+0x138>
     41c:	38 df       	rcall	.-400    	; 0x28e <Dataflash_WaitWhileBusy>
				  UsingSecondBuffer = !(UsingSecondBuffer);
     41e:	33 20       	and	r3, r3

				/* Select the next Dataflash chip based on the new Dataflash page index */
				Dataflash_SelectChipFromPage(CurrDFPage);
     420:	11 f0       	breq	.+4      	; 0x426 <DataflashManager_WriteBlocks+0x124>
     422:	85 e5       	ldi	r24, 0x55	; 85
     424:	01 c0       	rjmp	.+2      	; 0x428 <DataflashManager_WriteBlocks+0x126>

#if (DATAFLASH_PAGE_SIZE > VIRTUAL_MEMORY_BLOCK_SIZE)
				/* If less than one Dataflash page remaining, copy over the existing page to preserve trailing data */
				if ((TotalBlocks * (VIRTUAL_MEMORY_BLOCK_SIZE >> 4)) < (DATAFLASH_PAGE_SIZE >> 4))
     426:	83 e5       	ldi	r24, 0x53	; 83
     428:	8e bd       	out	0x2e, r24	; 46
     42a:	0d b4       	in	r0, 0x2d	; 45
     42c:	07 fe       	sbrs	r0, 7
				{
					/* Copy selected dataflash's current page contents to the Dataflash buffer */
					Dataflash_WaitWhileBusy();
     42e:	fd cf       	rjmp	.-6      	; 0x42a <DataflashManager_WriteBlocks+0x128>
     430:	c7 01       	movw	r24, r14
					Dataflash_SendByte(UsingSecondBuffer ? DF_CMD_MAINMEMTOBUFF2 : DF_CMD_MAINMEMTOBUFF1);
     432:	60 e0       	ldi	r22, 0x00	; 0
     434:	70 e0       	ldi	r23, 0x00	; 0
     436:	39 df       	rcall	.-398    	; 0x2aa <Dataflash_SendAddressBytes>
     438:	2a df       	rcall	.-428    	; 0x28e <Dataflash_WaitWhileBusy>
     43a:	33 20       	and	r3, r3
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     43c:	11 f0       	breq	.+4      	; 0x442 <DataflashManager_WriteBlocks+0x140>
				while (!(SPSR & (1 << SPIF)));
     43e:	87 e8       	ldi	r24, 0x87	; 135
     440:	01 c0       	rjmp	.+2      	; 0x444 <DataflashManager_WriteBlocks+0x142>
     442:	84 e8       	ldi	r24, 0x84	; 132
					Dataflash_SendAddressBytes(CurrDFPage, 0);
     444:	8e bd       	out	0x2e, r24	; 46
     446:	0d b4       	in	r0, 0x2d	; 45
     448:	07 fe       	sbrs	r0, 7
     44a:	fd cf       	rjmp	.-6      	; 0x446 <DataflashManager_WriteBlocks+0x144>
     44c:	80 e0       	ldi	r24, 0x00	; 0
					Dataflash_WaitWhileBusy();
     44e:	90 e0       	ldi	r25, 0x00	; 0
     450:	60 e0       	ldi	r22, 0x00	; 0
				}
#endif

				/* Send the Dataflash buffer write command */
				Dataflash_SendByte(UsingSecondBuffer ? DF_CMD_BUFF2WRITE : DF_CMD_BUFF1WRITE);
     452:	70 e0       	ldi	r23, 0x00	; 0
     454:	2a df       	rcall	.-428    	; 0x2aa <Dataflash_SendAddressBytes>
     456:	40 e0       	ldi	r20, 0x00	; 0
     458:	80 91 f1 00 	lds	r24, 0x00F1
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     45c:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     45e:	0d b4       	in	r0, 0x2d	; 45
     460:	07 fe       	sbrs	r0, 7
     462:	fd cf       	rjmp	.-6      	; 0x45e <DataflashManager_WriteBlocks+0x15c>
				Dataflash_SendAddressBytes(0, 0);
     464:	80 91 f1 00 	lds	r24, 0x00F1
     468:	8e bd       	out	0x2e, r24	; 46
     46a:	0d b4       	in	r0, 0x2d	; 45
     46c:	07 fe       	sbrs	r0, 7
     46e:	fd cf       	rjmp	.-6      	; 0x46a <DataflashManager_WriteBlocks+0x168>
				Dataflash_WaitWhileBusy();
				Dataflash_SendByte(UsingSecondBuffer ? DF_CMD_BUFF2TOMAINMEMWITHERASE : DF_CMD_BUFF1TOMAINMEMWITHERASE);
				Dataflash_SendAddressBytes(CurrDFPage, 0);

				/* Reset the Dataflash buffer counter, increment the page counter */
				CurrDFPageByteDiv16 = 0;
     470:	80 91 f1 00 	lds	r24, 0x00F1
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
     474:	8e bd       	out	0x2e, r24	; 46
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     476:	0d b4       	in	r0, 0x2d	; 45
				while (!(SPSR & (1 << SPIF)));
     478:	07 fe       	sbrs	r0, 7
     47a:	fd cf       	rjmp	.-6      	; 0x476 <DataflashManager_WriteBlocks+0x174>
     47c:	80 91 f1 00 	lds	r24, 0x00F1
     480:	8e bd       	out	0x2e, r24	; 46
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     482:	0d b4       	in	r0, 0x2d	; 45
				while (!(SPSR & (1 << SPIF)));
     484:	07 fe       	sbrs	r0, 7
     486:	fd cf       	rjmp	.-6      	; 0x482 <DataflashManager_WriteBlocks+0x180>
     488:	80 91 f1 00 	lds	r24, 0x00F1
     48c:	8e bd       	out	0x2e, r24	; 46
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     48e:	0d b4       	in	r0, 0x2d	; 45
				while (!(SPSR & (1 << SPIF)));
     490:	07 fe       	sbrs	r0, 7
     492:	fd cf       	rjmp	.-6      	; 0x48e <DataflashManager_WriteBlocks+0x18c>
     494:	80 91 f1 00 	lds	r24, 0x00F1
     498:	8e bd       	out	0x2e, r24	; 46
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     49a:	0d b4       	in	r0, 0x2d	; 45
				while (!(SPSR & (1 << SPIF)));
     49c:	07 fe       	sbrs	r0, 7
     49e:	fd cf       	rjmp	.-6      	; 0x49a <DataflashManager_WriteBlocks+0x198>
     4a0:	80 91 f1 00 	lds	r24, 0x00F1
     4a4:	8e bd       	out	0x2e, r24	; 46
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     4a6:	0d b4       	in	r0, 0x2d	; 45
				while (!(SPSR & (1 << SPIF)));
     4a8:	07 fe       	sbrs	r0, 7
     4aa:	fd cf       	rjmp	.-6      	; 0x4a6 <DataflashManager_WriteBlocks+0x1a4>
     4ac:	80 91 f1 00 	lds	r24, 0x00F1
     4b0:	8e bd       	out	0x2e, r24	; 46
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     4b2:	0d b4       	in	r0, 0x2d	; 45
				while (!(SPSR & (1 << SPIF)));
     4b4:	07 fe       	sbrs	r0, 7
     4b6:	fd cf       	rjmp	.-6      	; 0x4b2 <DataflashManager_WriteBlocks+0x1b0>
     4b8:	80 91 f1 00 	lds	r24, 0x00F1
     4bc:	8e bd       	out	0x2e, r24	; 46
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     4be:	0d b4       	in	r0, 0x2d	; 45
				while (!(SPSR & (1 << SPIF)));
     4c0:	07 fe       	sbrs	r0, 7
     4c2:	fd cf       	rjmp	.-6      	; 0x4be <DataflashManager_WriteBlocks+0x1bc>
     4c4:	80 91 f1 00 	lds	r24, 0x00F1
     4c8:	8e bd       	out	0x2e, r24	; 46
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     4ca:	0d b4       	in	r0, 0x2d	; 45
				while (!(SPSR & (1 << SPIF)));
     4cc:	07 fe       	sbrs	r0, 7
     4ce:	fd cf       	rjmp	.-6      	; 0x4ca <DataflashManager_WriteBlocks+0x1c8>
     4d0:	80 91 f1 00 	lds	r24, 0x00F1
     4d4:	8e bd       	out	0x2e, r24	; 46
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     4d6:	0d b4       	in	r0, 0x2d	; 45
				while (!(SPSR & (1 << SPIF)));
     4d8:	07 fe       	sbrs	r0, 7
     4da:	fd cf       	rjmp	.-6      	; 0x4d6 <DataflashManager_WriteBlocks+0x1d4>
     4dc:	80 91 f1 00 	lds	r24, 0x00F1
     4e0:	8e bd       	out	0x2e, r24	; 46
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     4e2:	0d b4       	in	r0, 0x2d	; 45
				while (!(SPSR & (1 << SPIF)));
     4e4:	07 fe       	sbrs	r0, 7
     4e6:	fd cf       	rjmp	.-6      	; 0x4e2 <DataflashManager_WriteBlocks+0x1e0>
     4e8:	80 91 f1 00 	lds	r24, 0x00F1
     4ec:	8e bd       	out	0x2e, r24	; 46
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     4ee:	0d b4       	in	r0, 0x2d	; 45
				while (!(SPSR & (1 << SPIF)));
     4f0:	07 fe       	sbrs	r0, 7
     4f2:	fd cf       	rjmp	.-6      	; 0x4ee <DataflashManager_WriteBlocks+0x1ec>
     4f4:	80 91 f1 00 	lds	r24, 0x00F1
     4f8:	8e bd       	out	0x2e, r24	; 46
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     4fa:	0d b4       	in	r0, 0x2d	; 45
				while (!(SPSR & (1 << SPIF)));
     4fc:	07 fe       	sbrs	r0, 7
     4fe:	fd cf       	rjmp	.-6      	; 0x4fa <DataflashManager_WriteBlocks+0x1f8>
     500:	80 91 f1 00 	lds	r24, 0x00F1
     504:	8e bd       	out	0x2e, r24	; 46
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     506:	0d b4       	in	r0, 0x2d	; 45
				while (!(SPSR & (1 << SPIF)));
     508:	07 fe       	sbrs	r0, 7
     50a:	fd cf       	rjmp	.-6      	; 0x506 <DataflashManager_WriteBlocks+0x204>
     50c:	80 91 f1 00 	lds	r24, 0x00F1
     510:	8e bd       	out	0x2e, r24	; 46
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     512:	0d b4       	in	r0, 0x2d	; 45
				while (!(SPSR & (1 << SPIF)));
     514:	07 fe       	sbrs	r0, 7
     516:	fd cf       	rjmp	.-6      	; 0x512 <DataflashManager_WriteBlocks+0x210>
     518:	f2 01       	movw	r30, r4
     51a:	80 ad       	sts	0x60, r24
     51c:	88 23       	and	r24, r24
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     51e:	49 f5       	brne	.+82     	; 0x572 <DataflashManager_WriteBlocks+0x270>
				while (!(SPSR & (1 << SPIF)));
     520:	4f 5f       	subi	r20, 0xFF	; 255
     522:	aa 94       	dec	r10
     524:	09 f0       	breq	.+2      	; 0x528 <DataflashManager_WriteBlocks+0x226>
     526:	4b cf       	rjmp	.-362    	; 0x3be <DataflashManager_WriteBlocks+0xbc>
     528:	01 50       	subi	r16, 0x01	; 1
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     52a:	10 40       	sbci	r17, 0x00	; 0
				while (!(SPSR & (1 << SPIF)));
     52c:	80 ee       	ldi	r24, 0xE0	; 224
     52e:	9f ef       	ldi	r25, 0xFF	; 255
     530:	c8 0e       	add	r12, r24

			/* Increment the block 16 byte block counter */
			BytesInBlockDiv16++;

			/* Check if the current command is being aborted by the host */
			if (MSInterfaceInfo->State.IsMassStoreReset)
     532:	d9 1e       	adc	r13, r25
     534:	01 15       	cp	r16, r1
     536:	11 05       	cpc	r17, r1
     538:	09 f0       	breq	.+2      	; 0x53c <DataflashManager_WriteBlocks+0x23a>
			Dataflash_SendByte(Endpoint_Read_8());
			Dataflash_SendByte(Endpoint_Read_8());
			Dataflash_SendByte(Endpoint_Read_8());

			/* Increment the Dataflash page 16 byte block counter */
			CurrDFPageByteDiv16++;
     53a:	3c cf       	rjmp	.-392    	; 0x3b4 <DataflashManager_WriteBlocks+0xb2>
     53c:	a8 de       	rcall	.-688    	; 0x28e <Dataflash_WaitWhileBusy>
	while (TotalBlocks)
	{
		uint8_t BytesInBlockDiv16 = 0;

		/* Write an endpoint packet sized data block to the Dataflash */
		while (BytesInBlockDiv16 < (VIRTUAL_MEMORY_BLOCK_SIZE >> 4))
     53e:	33 20       	and	r3, r3
     540:	11 f0       	breq	.+4      	; 0x546 <DataflashManager_WriteBlocks+0x244>
			if (MSInterfaceInfo->State.IsMassStoreReset)
			  return;
		}

		/* Decrement the blocks remaining counter */
		TotalBlocks--;
     542:	86 e8       	ldi	r24, 0x86	; 134
     544:	01 c0       	rjmp	.+2      	; 0x548 <DataflashManager_WriteBlocks+0x246>
     546:	83 e8       	ldi	r24, 0x83	; 131
     548:	8e bd       	out	0x2e, r24	; 46
     54a:	0d b4       	in	r0, 0x2d	; 45
     54c:	07 fe       	sbrs	r0, 7

	/* Wait until endpoint is ready before continuing */
	if (Endpoint_WaitUntilReady())
	  return;

	while (TotalBlocks)
     54e:	fd cf       	rjmp	.-6      	; 0x54a <DataflashManager_WriteBlocks+0x248>
     550:	c7 01       	movw	r24, r14
     552:	60 e0       	ldi	r22, 0x00	; 0
     554:	70 e0       	ldi	r23, 0x00	; 0
		/* Decrement the blocks remaining counter */
		TotalBlocks--;
	}

	/* Write the Dataflash buffer contents back to the Dataflash page */
	Dataflash_WaitWhileBusy();
     556:	a9 de       	rcall	.-686    	; 0x2aa <Dataflash_SendAddressBytes>
     558:	9a de       	rcall	.-716    	; 0x28e <Dataflash_WaitWhileBusy>
	Dataflash_SendByte(UsingSecondBuffer ? DF_CMD_BUFF2TOMAINMEMWITHERASE : DF_CMD_BUFF1TOMAINMEMWITHERASE);
     55a:	80 91 e8 00 	lds	r24, 0x00E8
     55e:	85 fd       	sbrc	r24, 5
     560:	05 c0       	rjmp	.+10     	; 0x56c <DataflashManager_WriteBlocks+0x26a>
     562:	80 91 e8 00 	lds	r24, 0x00E8
     566:	8b 77       	andi	r24, 0x7B	; 123
     568:	80 93 e8 00 	sts	0x00E8, r24
	Dataflash_SendAddressBytes(CurrDFPage, 0x00);
     56c:	8e b1       	in	r24, 0x0e	; 14
     56e:	83 60       	ori	r24, 0x03	; 3
     570:	8e b9       	out	0x0e, r24	; 14
     572:	0f 90       	pop	r0
     574:	df 91       	pop	r29
	Dataflash_WaitWhileBusy();
     576:	cf 91       	pop	r28
     578:	1f 91       	pop	r17
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
     57a:	0f 91       	pop	r16
     57c:	ff 90       	pop	r15

	/* If the endpoint is empty, clear it ready for the next packet from the host */
	if (!(Endpoint_IsReadWriteAllowed()))
     57e:	ef 90       	pop	r14
     580:	df 90       	pop	r13
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     582:	cf 90       	pop	r12
     584:	bf 90       	pop	r11
     586:	af 90       	pop	r10
     588:	9f 90       	pop	r9
     58a:	8f 90       	pop	r8
			 *              the chip number).
			 */
			static inline void Dataflash_SelectChip(const uint8_t ChipMask) ATTR_ALWAYS_INLINE;
			static inline void Dataflash_SelectChip(const uint8_t ChipMask)
			{
				DATAFLASH_CHIPCS_PORT = ((DATAFLASH_CHIPCS_PORT | DATAFLASH_CHIPCS_MASK) & ~ChipMask);
     58c:	7f 90       	pop	r7
     58e:	6f 90       	pop	r6
     590:	5f 90       	pop	r5
	  Endpoint_ClearOUT();

	/* Deselect all Dataflash chips */
	Dataflash_DeselectChip();
}
     592:	4f 90       	pop	r4
     594:	3f 90       	pop	r3
     596:	08 95       	ret

00000598 <DataflashManager_ReadBlocks>:
     598:	bf 92       	push	r11
     59a:	cf 92       	push	r12
     59c:	df 92       	push	r13
     59e:	ef 92       	push	r14
     5a0:	ff 92       	push	r15
     5a2:	0f 93       	push	r16
     5a4:	1f 93       	push	r17
     5a6:	cf 93       	push	r28
     5a8:	df 93       	push	r29
     5aa:	6c 01       	movw	r12, r24
     5ac:	79 01       	movw	r14, r18
     5ae:	db 01       	movw	r26, r22
     5b0:	ca 01       	movw	r24, r20
     5b2:	e9 e0       	ldi	r30, 0x09	; 9
     5b4:	88 0f       	add	r24, r24
     5b6:	99 1f       	adc	r25, r25
 */
void DataflashManager_ReadBlocks(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo,
                                 const uint32_t BlockAddress,
                                 uint16_t TotalBlocks)
{
	uint16_t CurrDFPage          = ((BlockAddress * VIRTUAL_MEMORY_BLOCK_SIZE) / DATAFLASH_PAGE_SIZE);
     5b8:	aa 1f       	adc	r26, r26
     5ba:	bb 1f       	adc	r27, r27
     5bc:	ea 95       	dec	r30
     5be:	d1 f7       	brne	.-12     	; 0x5b4 <DataflashManager_ReadBlocks+0x1c>
     5c0:	fa e0       	ldi	r31, 0x0A	; 10
     5c2:	b6 95       	lsr	r27
     5c4:	a7 95       	ror	r26
     5c6:	97 95       	ror	r25
     5c8:	87 95       	ror	r24
     5ca:	fa 95       	dec	r31
     5cc:	d1 f7       	brne	.-12     	; 0x5c2 <DataflashManager_ReadBlocks+0x2a>
     5ce:	8c 01       	movw	r16, r24
	uint16_t CurrDFPageByte      = ((BlockAddress * VIRTUAL_MEMORY_BLOCK_SIZE) % DATAFLASH_PAGE_SIZE);
     5d0:	ea 01       	movw	r28, r20
     5d2:	dc 2f       	mov	r29, r28
     5d4:	cc 27       	eor	r28, r28
     5d6:	dd 0f       	add	r29, r29
     5d8:	d3 70       	andi	r29, 0x03	; 3
	uint8_t  CurrDFPageByteDiv16 = (CurrDFPageByte >> 4);

	/* Select the correct starting Dataflash IC for the block requested */
	Dataflash_SelectChipFromPage(CurrDFPage);
     5da:	80 de       	rcall	.-768    	; 0x2dc <Dataflash_SelectChipFromPage>
     5dc:	82 ed       	ldi	r24, 0xD2	; 210
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     5de:	8e bd       	out	0x2e, r24	; 46
     5e0:	0d b4       	in	r0, 0x2d	; 45
				while (!(SPSR & (1 << SPIF)));
     5e2:	07 fe       	sbrs	r0, 7
     5e4:	fd cf       	rjmp	.-6      	; 0x5e0 <DataflashManager_ReadBlocks+0x48>
     5e6:	c8 01       	movw	r24, r16

	/* Send the Dataflash main memory page read command */
	Dataflash_SendByte(DF_CMD_MAINMEMPAGEREAD);
	Dataflash_SendAddressBytes(CurrDFPage, CurrDFPageByte);
     5e8:	be 01       	movw	r22, r28
     5ea:	5f de       	rcall	.-834    	; 0x2aa <Dataflash_SendAddressBytes>
     5ec:	1e bc       	out	0x2e, r1	; 46
     5ee:	0d b4       	in	r0, 0x2d	; 45
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     5f0:	07 fe       	sbrs	r0, 7
				while (!(SPSR & (1 << SPIF)));
     5f2:	fd cf       	rjmp	.-6      	; 0x5ee <DataflashManager_ReadBlocks+0x56>
     5f4:	1e bc       	out	0x2e, r1	; 46
     5f6:	0d b4       	in	r0, 0x2d	; 45
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     5f8:	07 fe       	sbrs	r0, 7
				while (!(SPSR & (1 << SPIF)));
     5fa:	fd cf       	rjmp	.-6      	; 0x5f6 <DataflashManager_ReadBlocks+0x5e>
     5fc:	1e bc       	out	0x2e, r1	; 46
     5fe:	0d b4       	in	r0, 0x2d	; 45
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     600:	07 fe       	sbrs	r0, 7
				while (!(SPSR & (1 << SPIF)));
     602:	fd cf       	rjmp	.-6      	; 0x5fe <DataflashManager_ReadBlocks+0x66>
     604:	1e bc       	out	0x2e, r1	; 46
     606:	0d b4       	in	r0, 0x2d	; 45
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     608:	07 fe       	sbrs	r0, 7
				while (!(SPSR & (1 << SPIF)));
     60a:	fd cf       	rjmp	.-6      	; 0x606 <DataflashManager_ReadBlocks+0x6e>
     60c:	36 d5       	rcall	.+2668   	; 0x107a <Endpoint_WaitUntilReady>
     60e:	88 23       	and	r24, r24
	Dataflash_SendByte(0x00);
	Dataflash_SendByte(0x00);
	Dataflash_SendByte(0x00);

	/* Wait until endpoint is ready before continuing */
	if (Endpoint_WaitUntilReady())
     610:	09 f0       	breq	.+2      	; 0x614 <DataflashManager_ReadBlocks+0x7c>
     612:	c0 c0       	rjmp	.+384    	; 0x794 <DataflashManager_ReadBlocks+0x1fc>
     614:	34 e0       	ldi	r19, 0x04	; 4
     616:	d6 95       	lsr	r29
     618:	c7 95       	ror	r28
                                 const uint32_t BlockAddress,
                                 uint16_t TotalBlocks)
{
	uint16_t CurrDFPage          = ((BlockAddress * VIRTUAL_MEMORY_BLOCK_SIZE) / DATAFLASH_PAGE_SIZE);
	uint16_t CurrDFPageByte      = ((BlockAddress * VIRTUAL_MEMORY_BLOCK_SIZE) % DATAFLASH_PAGE_SIZE);
	uint8_t  CurrDFPageByteDiv16 = (CurrDFPageByte >> 4);
     61a:	3a 95       	dec	r19
     61c:	e1 f7       	brne	.-8      	; 0x616 <DataflashManager_ReadBlocks+0x7e>
     61e:	42 ed       	ldi	r20, 0xD2	; 210
     620:	b4 2e       	mov	r11, r20
     622:	a8 c0       	rjmp	.+336    	; 0x774 <DataflashManager_ReadBlocks+0x1dc>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     624:	d0 e2       	ldi	r29, 0x20	; 32
     626:	80 91 e8 00 	lds	r24, 0x00E8

	/* Wait until endpoint is ready before continuing */
	if (Endpoint_WaitUntilReady())
	  return;

	while (TotalBlocks)
     62a:	85 fd       	sbrc	r24, 5
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
     62c:	09 c0       	rjmp	.+18     	; 0x640 <DataflashManager_ReadBlocks+0xa8>
     62e:	80 91 e8 00 	lds	r24, 0x00E8

		/* Write an endpoint packet sized data block to the Dataflash */
		while (BytesInBlockDiv16 < (VIRTUAL_MEMORY_BLOCK_SIZE >> 4))
		{
			/* Check if the endpoint is currently full */
			if (!(Endpoint_IsReadWriteAllowed()))
     632:	8e 77       	andi	r24, 0x7E	; 126
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     634:	80 93 e8 00 	sts	0x00E8, r24
     638:	20 d5       	rcall	.+2624   	; 0x107a <Endpoint_WaitUntilReady>
     63a:	88 23       	and	r24, r24
     63c:	09 f0       	breq	.+2      	; 0x640 <DataflashManager_ReadBlocks+0xa8>
			{
				/* Clear the endpoint bank to send its contents to the host */
				Endpoint_ClearIN();

				/* Wait until the endpoint is ready for more data */
				if (Endpoint_WaitUntilReady())
     63e:	aa c0       	rjmp	.+340    	; 0x794 <DataflashManager_ReadBlocks+0x1fc>
     640:	c0 34       	cpi	r28, 0x40	; 64
     642:	e9 f4       	brne	.+58     	; 0x67e <DataflashManager_ReadBlocks+0xe6>
     644:	0f 5f       	subi	r16, 0xFF	; 255
     646:	1f 4f       	sbci	r17, 0xFF	; 255
				  return;
			}

			/* Check if end of Dataflash page reached */
			if (CurrDFPageByteDiv16 == (DATAFLASH_PAGE_SIZE >> 4))
     648:	c8 01       	movw	r24, r16
     64a:	48 de       	rcall	.-880    	; 0x2dc <Dataflash_SelectChipFromPage>
			{
				/* Reset the Dataflash buffer counter, increment the page counter */
				CurrDFPageByteDiv16 = 0;
				CurrDFPage++;
     64c:	be bc       	out	0x2e, r11	; 46
     64e:	0d b4       	in	r0, 0x2d	; 45

				/* Select the next Dataflash chip based on the new Dataflash page index */
				Dataflash_SelectChipFromPage(CurrDFPage);
     650:	07 fe       	sbrs	r0, 7
     652:	fd cf       	rjmp	.-6      	; 0x64e <DataflashManager_ReadBlocks+0xb6>
     654:	c8 01       	movw	r24, r16
     656:	60 e0       	ldi	r22, 0x00	; 0
				while (!(SPSR & (1 << SPIF)));
     658:	70 e0       	ldi	r23, 0x00	; 0
     65a:	27 de       	rcall	.-946    	; 0x2aa <Dataflash_SendAddressBytes>
     65c:	1e bc       	out	0x2e, r1	; 46

				/* Send the Dataflash main memory page read command */
				Dataflash_SendByte(DF_CMD_MAINMEMPAGEREAD);
				Dataflash_SendAddressBytes(CurrDFPage, 0);
     65e:	0d b4       	in	r0, 0x2d	; 45
     660:	07 fe       	sbrs	r0, 7
     662:	fd cf       	rjmp	.-6      	; 0x65e <DataflashManager_ReadBlocks+0xc6>
     664:	1e bc       	out	0x2e, r1	; 46
     666:	0d b4       	in	r0, 0x2d	; 45
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     668:	07 fe       	sbrs	r0, 7
				while (!(SPSR & (1 << SPIF)));
     66a:	fd cf       	rjmp	.-6      	; 0x666 <DataflashManager_ReadBlocks+0xce>
     66c:	1e bc       	out	0x2e, r1	; 46
     66e:	0d b4       	in	r0, 0x2d	; 45
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     670:	07 fe       	sbrs	r0, 7
				while (!(SPSR & (1 << SPIF)));
     672:	fd cf       	rjmp	.-6      	; 0x66e <DataflashManager_ReadBlocks+0xd6>
     674:	1e bc       	out	0x2e, r1	; 46
     676:	0d b4       	in	r0, 0x2d	; 45
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     678:	07 fe       	sbrs	r0, 7
				while (!(SPSR & (1 << SPIF)));
     67a:	fd cf       	rjmp	.-6      	; 0x676 <DataflashManager_ReadBlocks+0xde>
     67c:	c0 e0       	ldi	r28, 0x00	; 0
     67e:	1e bc       	out	0x2e, r1	; 46
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     680:	0d b4       	in	r0, 0x2d	; 45
				while (!(SPSR & (1 << SPIF)));
     682:	07 fe       	sbrs	r0, 7
     684:	fd cf       	rjmp	.-6      	; 0x680 <DataflashManager_ReadBlocks+0xe8>
     686:	8e b5       	in	r24, 0x2e	; 46

			/* Check if end of Dataflash page reached */
			if (CurrDFPageByteDiv16 == (DATAFLASH_PAGE_SIZE >> 4))
			{
				/* Reset the Dataflash buffer counter, increment the page counter */
				CurrDFPageByteDiv16 = 0;
     688:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
				while (!(SPSR & (1 << SPIF)));
     68c:	1e bc       	out	0x2e, r1	; 46
     68e:	0d b4       	in	r0, 0x2d	; 45
     690:	07 fe       	sbrs	r0, 7
				return SPDR;
     692:	fd cf       	rjmp	.-6      	; 0x68e <DataflashManager_ReadBlocks+0xf6>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     694:	8e b5       	in	r24, 0x2e	; 46
     696:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
				while (!(SPSR & (1 << SPIF)));
     69a:	1e bc       	out	0x2e, r1	; 46
     69c:	0d b4       	in	r0, 0x2d	; 45
     69e:	07 fe       	sbrs	r0, 7
				return SPDR;
     6a0:	fd cf       	rjmp	.-6      	; 0x69c <DataflashManager_ReadBlocks+0x104>
     6a2:	8e b5       	in	r24, 0x2e	; 46
     6a4:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
				while (!(SPSR & (1 << SPIF)));
     6a8:	1e bc       	out	0x2e, r1	; 46
     6aa:	0d b4       	in	r0, 0x2d	; 45
     6ac:	07 fe       	sbrs	r0, 7
				return SPDR;
     6ae:	fd cf       	rjmp	.-6      	; 0x6aa <DataflashManager_ReadBlocks+0x112>
     6b0:	8e b5       	in	r24, 0x2e	; 46
     6b2:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
				while (!(SPSR & (1 << SPIF)));
     6b6:	1e bc       	out	0x2e, r1	; 46
     6b8:	0d b4       	in	r0, 0x2d	; 45
     6ba:	07 fe       	sbrs	r0, 7
				return SPDR;
     6bc:	fd cf       	rjmp	.-6      	; 0x6b8 <DataflashManager_ReadBlocks+0x120>
     6be:	8e b5       	in	r24, 0x2e	; 46
     6c0:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
				while (!(SPSR & (1 << SPIF)));
     6c4:	1e bc       	out	0x2e, r1	; 46
     6c6:	0d b4       	in	r0, 0x2d	; 45
     6c8:	07 fe       	sbrs	r0, 7
				return SPDR;
     6ca:	fd cf       	rjmp	.-6      	; 0x6c6 <DataflashManager_ReadBlocks+0x12e>
     6cc:	8e b5       	in	r24, 0x2e	; 46
     6ce:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
				while (!(SPSR & (1 << SPIF)));
     6d2:	1e bc       	out	0x2e, r1	; 46
     6d4:	0d b4       	in	r0, 0x2d	; 45
     6d6:	07 fe       	sbrs	r0, 7
				return SPDR;
     6d8:	fd cf       	rjmp	.-6      	; 0x6d4 <DataflashManager_ReadBlocks+0x13c>
     6da:	8e b5       	in	r24, 0x2e	; 46
     6dc:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
				while (!(SPSR & (1 << SPIF)));
     6e0:	1e bc       	out	0x2e, r1	; 46
     6e2:	0d b4       	in	r0, 0x2d	; 45
     6e4:	07 fe       	sbrs	r0, 7
				return SPDR;
     6e6:	fd cf       	rjmp	.-6      	; 0x6e2 <DataflashManager_ReadBlocks+0x14a>
     6e8:	8e b5       	in	r24, 0x2e	; 46
     6ea:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
				while (!(SPSR & (1 << SPIF)));
     6ee:	1e bc       	out	0x2e, r1	; 46
     6f0:	0d b4       	in	r0, 0x2d	; 45
     6f2:	07 fe       	sbrs	r0, 7
				return SPDR;
     6f4:	fd cf       	rjmp	.-6      	; 0x6f0 <DataflashManager_ReadBlocks+0x158>
     6f6:	8e b5       	in	r24, 0x2e	; 46
     6f8:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
				while (!(SPSR & (1 << SPIF)));
     6fc:	1e bc       	out	0x2e, r1	; 46
     6fe:	0d b4       	in	r0, 0x2d	; 45
     700:	07 fe       	sbrs	r0, 7
				return SPDR;
     702:	fd cf       	rjmp	.-6      	; 0x6fe <DataflashManager_ReadBlocks+0x166>
     704:	8e b5       	in	r24, 0x2e	; 46
     706:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
				while (!(SPSR & (1 << SPIF)));
     70a:	1e bc       	out	0x2e, r1	; 46
     70c:	0d b4       	in	r0, 0x2d	; 45
     70e:	07 fe       	sbrs	r0, 7
				return SPDR;
     710:	fd cf       	rjmp	.-6      	; 0x70c <DataflashManager_ReadBlocks+0x174>
     712:	8e b5       	in	r24, 0x2e	; 46
     714:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
				while (!(SPSR & (1 << SPIF)));
     718:	1e bc       	out	0x2e, r1	; 46
     71a:	0d b4       	in	r0, 0x2d	; 45
     71c:	07 fe       	sbrs	r0, 7
				return SPDR;
     71e:	fd cf       	rjmp	.-6      	; 0x71a <DataflashManager_ReadBlocks+0x182>
     720:	8e b5       	in	r24, 0x2e	; 46
     722:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
				while (!(SPSR & (1 << SPIF)));
     726:	1e bc       	out	0x2e, r1	; 46
     728:	0d b4       	in	r0, 0x2d	; 45
     72a:	07 fe       	sbrs	r0, 7
				return SPDR;
     72c:	fd cf       	rjmp	.-6      	; 0x728 <DataflashManager_ReadBlocks+0x190>
     72e:	8e b5       	in	r24, 0x2e	; 46
     730:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
				while (!(SPSR & (1 << SPIF)));
     734:	1e bc       	out	0x2e, r1	; 46
     736:	0d b4       	in	r0, 0x2d	; 45
     738:	07 fe       	sbrs	r0, 7
				return SPDR;
     73a:	fd cf       	rjmp	.-6      	; 0x736 <DataflashManager_ReadBlocks+0x19e>
     73c:	8e b5       	in	r24, 0x2e	; 46
     73e:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
				while (!(SPSR & (1 << SPIF)));
     742:	1e bc       	out	0x2e, r1	; 46
     744:	0d b4       	in	r0, 0x2d	; 45
     746:	07 fe       	sbrs	r0, 7
				return SPDR;
     748:	fd cf       	rjmp	.-6      	; 0x744 <DataflashManager_ReadBlocks+0x1ac>
     74a:	8e b5       	in	r24, 0x2e	; 46
     74c:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
				while (!(SPSR & (1 << SPIF)));
     750:	1e bc       	out	0x2e, r1	; 46
     752:	0d b4       	in	r0, 0x2d	; 45
     754:	07 fe       	sbrs	r0, 7
				return SPDR;
     756:	fd cf       	rjmp	.-6      	; 0x752 <DataflashManager_ReadBlocks+0x1ba>
     758:	8e b5       	in	r24, 0x2e	; 46
     75a:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
				while (!(SPSR & (1 << SPIF)));
     75e:	f6 01       	movw	r30, r12
     760:	80 ad       	sts	0x60, r24
     762:	88 23       	and	r24, r24
				return SPDR;
     764:	b9 f4       	brne	.+46     	; 0x794 <DataflashManager_ReadBlocks+0x1fc>
     766:	cf 5f       	subi	r28, 0xFF	; 255
     768:	d1 50       	subi	r29, 0x01	; 1

			/* Increment the block 16 byte block counter */
			BytesInBlockDiv16++;

			/* Check if the current command is being aborted by the host */
			if (MSInterfaceInfo->State.IsMassStoreReset)
     76a:	09 f0       	breq	.+2      	; 0x76e <DataflashManager_ReadBlocks+0x1d6>
     76c:	5c cf       	rjmp	.-328    	; 0x626 <DataflashManager_ReadBlocks+0x8e>
     76e:	08 94       	sec
     770:	e1 08       	sbc	r14, r1
			Endpoint_Write_8(Dataflash_ReceiveByte());
			Endpoint_Write_8(Dataflash_ReceiveByte());
			Endpoint_Write_8(Dataflash_ReceiveByte());

			/* Increment the Dataflash page 16 byte block counter */
			CurrDFPageByteDiv16++;
     772:	f1 08       	sbc	r15, r1
     774:	e1 14       	cp	r14, r1
	while (TotalBlocks)
	{
		uint8_t BytesInBlockDiv16 = 0;

		/* Write an endpoint packet sized data block to the Dataflash */
		while (BytesInBlockDiv16 < (VIRTUAL_MEMORY_BLOCK_SIZE >> 4))
     776:	f1 04       	cpc	r15, r1
     778:	09 f0       	breq	.+2      	; 0x77c <DataflashManager_ReadBlocks+0x1e4>
			if (MSInterfaceInfo->State.IsMassStoreReset)
			  return;
		}

		/* Decrement the blocks remaining counter */
		TotalBlocks--;
     77a:	54 cf       	rjmp	.-344    	; 0x624 <DataflashManager_ReadBlocks+0x8c>
     77c:	80 91 e8 00 	lds	r24, 0x00E8

	/* Wait until endpoint is ready before continuing */
	if (Endpoint_WaitUntilReady())
	  return;

	while (TotalBlocks)
     780:	85 fd       	sbrc	r24, 5
     782:	05 c0       	rjmp	.+10     	; 0x78e <DataflashManager_ReadBlocks+0x1f6>
     784:	80 91 e8 00 	lds	r24, 0x00E8
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
     788:	8e 77       	andi	r24, 0x7E	; 126
     78a:	80 93 e8 00 	sts	0x00E8, r24
		/* Decrement the blocks remaining counter */
		TotalBlocks--;
	}

	/* If the endpoint is full, send its contents to the host */
	if (!(Endpoint_IsReadWriteAllowed()))
     78e:	8e b1       	in	r24, 0x0e	; 14
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     790:	83 60       	ori	r24, 0x03	; 3
     792:	8e b9       	out	0x0e, r24	; 14
     794:	df 91       	pop	r29
     796:	cf 91       	pop	r28
     798:	1f 91       	pop	r17
     79a:	0f 91       	pop	r16
     79c:	ff 90       	pop	r15
     79e:	ef 90       	pop	r14
	  Endpoint_ClearIN();

	/* Deselect all Dataflash chips */
	Dataflash_DeselectChip();
}
     7a0:	df 90       	pop	r13
     7a2:	cf 90       	pop	r12
     7a4:	bf 90       	pop	r11
     7a6:	08 95       	ret

000007a8 <DataflashManager_ResetDataflashProtections>:
     7a8:	8e b1       	in	r24, 0x0e	; 14
     7aa:	83 60       	ori	r24, 0x03	; 3
     7ac:	8e 7f       	andi	r24, 0xFE	; 254
     7ae:	8e b9       	out	0x0e, r24	; 14
     7b0:	87 ed       	ldi	r24, 0xD7	; 215
     7b2:	8e bd       	out	0x2e, r24	; 46
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
				while (!(SPSR & (1 << SPIF)));
     7b4:	0d b4       	in	r0, 0x2d	; 45
     7b6:	07 fe       	sbrs	r0, 7
     7b8:	fd cf       	rjmp	.-6      	; 0x7b4 <DataflashManager_ResetDataflashProtections+0xc>
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     7ba:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     7bc:	0d b4       	in	r0, 0x2d	; 45
     7be:	07 fe       	sbrs	r0, 7
     7c0:	fd cf       	rjmp	.-6      	; 0x7bc <DataflashManager_ResetDataflashProtections+0x14>
	/* Select first Dataflash chip, send the read status register command */
	Dataflash_SelectChip(DATAFLASH_CHIP1);
	Dataflash_SendByte(DF_CMD_GETSTATUS);

	/* Check if sector protection is enabled */
	if (Dataflash_ReceiveByte() & DF_STATUS_SECTORPROTECTION_ON)
     7c2:	0e b4       	in	r0, 0x2e	; 46
     7c4:	01 fe       	sbrs	r0, 1
     7c6:	15 c0       	rjmp	.+42     	; 0x7f2 <DataflashManager_ResetDataflashProtections+0x4a>
	{
		Dataflash_ToggleSelectedChipCS();
     7c8:	58 dd       	rcall	.-1360   	; 0x27a <Dataflash_ToggleSelectedChipCS>
     7ca:	8d e3       	ldi	r24, 0x3D	; 61
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     7cc:	8e bd       	out	0x2e, r24	; 46
     7ce:	0d b4       	in	r0, 0x2d	; 45
				while (!(SPSR & (1 << SPIF)));
     7d0:	07 fe       	sbrs	r0, 7
     7d2:	fd cf       	rjmp	.-6      	; 0x7ce <DataflashManager_ResetDataflashProtections+0x26>
     7d4:	8a e2       	ldi	r24, 0x2A	; 42
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     7d6:	8e bd       	out	0x2e, r24	; 46
     7d8:	0d b4       	in	r0, 0x2d	; 45
				while (!(SPSR & (1 << SPIF)));
     7da:	07 fe       	sbrs	r0, 7
     7dc:	fd cf       	rjmp	.-6      	; 0x7d8 <DataflashManager_ResetDataflashProtections+0x30>
     7de:	8f e7       	ldi	r24, 0x7F	; 127
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     7e0:	8e bd       	out	0x2e, r24	; 46
     7e2:	0d b4       	in	r0, 0x2d	; 45
				while (!(SPSR & (1 << SPIF)));
     7e4:	07 fe       	sbrs	r0, 7
     7e6:	fd cf       	rjmp	.-6      	; 0x7e2 <DataflashManager_ResetDataflashProtections+0x3a>
     7e8:	8a e9       	ldi	r24, 0x9A	; 154
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     7ea:	8e bd       	out	0x2e, r24	; 46
     7ec:	0d b4       	in	r0, 0x2d	; 45
				while (!(SPSR & (1 << SPIF)));
     7ee:	07 fe       	sbrs	r0, 7
     7f0:	fd cf       	rjmp	.-6      	; 0x7ec <DataflashManager_ResetDataflashProtections+0x44>
     7f2:	8e b1       	in	r24, 0x0e	; 14
     7f4:	83 60       	ori	r24, 0x03	; 3
     7f6:	8d 7f       	andi	r24, 0xFD	; 253
     7f8:	8e b9       	out	0x0e, r24	; 14
     7fa:	87 ed       	ldi	r24, 0xD7	; 215
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     7fc:	8e bd       	out	0x2e, r24	; 46
     7fe:	0d b4       	in	r0, 0x2d	; 45
				while (!(SPSR & (1 << SPIF)));
     800:	07 fe       	sbrs	r0, 7
     802:	fd cf       	rjmp	.-6      	; 0x7fe <DataflashManager_ResetDataflashProtections+0x56>
     804:	1e bc       	out	0x2e, r1	; 46
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     806:	0d b4       	in	r0, 0x2d	; 45
				while (!(SPSR & (1 << SPIF)));
     808:	07 fe       	sbrs	r0, 7
     80a:	fd cf       	rjmp	.-6      	; 0x806 <DataflashManager_ResetDataflashProtections+0x5e>
     80c:	0e b4       	in	r0, 0x2e	; 46
	#if (DATAFLASH_TOTALCHIPS == 2)
	Dataflash_SelectChip(DATAFLASH_CHIP2);
	Dataflash_SendByte(DF_CMD_GETSTATUS);

	/* Check if sector protection is enabled */
	if (Dataflash_ReceiveByte() & DF_STATUS_SECTORPROTECTION_ON)
     80e:	01 fe       	sbrs	r0, 1
     810:	15 c0       	rjmp	.+42     	; 0x83c <DataflashManager_ResetDataflashProtections+0x94>
     812:	33 dd       	rcall	.-1434   	; 0x27a <Dataflash_ToggleSelectedChipCS>
	{
		Dataflash_ToggleSelectedChipCS();
     814:	8d e3       	ldi	r24, 0x3D	; 61
     816:	8e bd       	out	0x2e, r24	; 46
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     818:	0d b4       	in	r0, 0x2d	; 45
     81a:	07 fe       	sbrs	r0, 7
				while (!(SPSR & (1 << SPIF)));
     81c:	fd cf       	rjmp	.-6      	; 0x818 <DataflashManager_ResetDataflashProtections+0x70>
     81e:	8a e2       	ldi	r24, 0x2A	; 42
     820:	8e bd       	out	0x2e, r24	; 46
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     822:	0d b4       	in	r0, 0x2d	; 45
     824:	07 fe       	sbrs	r0, 7
				while (!(SPSR & (1 << SPIF)));
     826:	fd cf       	rjmp	.-6      	; 0x822 <DataflashManager_ResetDataflashProtections+0x7a>
     828:	8f e7       	ldi	r24, 0x7F	; 127
     82a:	8e bd       	out	0x2e, r24	; 46
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     82c:	0d b4       	in	r0, 0x2d	; 45
     82e:	07 fe       	sbrs	r0, 7
				while (!(SPSR & (1 << SPIF)));
     830:	fd cf       	rjmp	.-6      	; 0x82c <DataflashManager_ResetDataflashProtections+0x84>
     832:	8a e9       	ldi	r24, 0x9A	; 154
     834:	8e bd       	out	0x2e, r24	; 46
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     836:	0d b4       	in	r0, 0x2d	; 45
     838:	07 fe       	sbrs	r0, 7
				while (!(SPSR & (1 << SPIF)));
     83a:	fd cf       	rjmp	.-6      	; 0x836 <DataflashManager_ResetDataflashProtections+0x8e>
     83c:	8e b1       	in	r24, 0x0e	; 14
     83e:	83 60       	ori	r24, 0x03	; 3
     840:	8e b9       	out	0x0e, r24	; 14
     842:	08 95       	ret

00000844 <DataflashManager_CheckDataflashOperation>:
     844:	8e b1       	in	r24, 0x0e	; 14
	}
	#endif

	/* Deselect current Dataflash chip */
	Dataflash_DeselectChip();
}
     846:	83 60       	ori	r24, 0x03	; 3
     848:	8e 7f       	andi	r24, 0xFE	; 254
     84a:	8e b9       	out	0x0e, r24	; 14
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     84c:	8f e9       	ldi	r24, 0x9F	; 159
     84e:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     850:	0d b4       	in	r0, 0x2d	; 45
     852:	07 fe       	sbrs	r0, 7
     854:	fd cf       	rjmp	.-6      	; 0x850 <DataflashManager_CheckDataflashOperation+0xc>
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     856:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     858:	0d b4       	in	r0, 0x2d	; 45
     85a:	07 fe       	sbrs	r0, 7
     85c:	fd cf       	rjmp	.-6      	; 0x858 <DataflashManager_CheckDataflashOperation+0x14>
				return SPDR;
     85e:	9e b5       	in	r25, 0x2e	; 46
     860:	8e b1       	in	r24, 0x0e	; 14
     862:	83 60       	ori	r24, 0x03	; 3
     864:	8e b9       	out	0x0e, r24	; 14
	Dataflash_SendByte(DF_CMD_READMANUFACTURERDEVICEINFO);
	ReturnByte = Dataflash_ReceiveByte();
	Dataflash_DeselectChip();

	/* If returned data is invalid, fail the command */
	if (ReturnByte != DF_MANUFACTURER_ATMEL)
     866:	9f 31       	cpi	r25, 0x1F	; 31
     868:	b1 f4       	brne	.+44     	; 0x896 <DataflashManager_CheckDataflashOperation+0x52>
     86a:	8e b1       	in	r24, 0x0e	; 14
     86c:	83 60       	ori	r24, 0x03	; 3
     86e:	8d 7f       	andi	r24, 0xFD	; 253
     870:	8e b9       	out	0x0e, r24	; 14
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     872:	8f e9       	ldi	r24, 0x9F	; 159
     874:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     876:	0d b4       	in	r0, 0x2d	; 45
     878:	07 fe       	sbrs	r0, 7
     87a:	fd cf       	rjmp	.-6      	; 0x876 <DataflashManager_CheckDataflashOperation+0x32>
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     87c:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     87e:	0d b4       	in	r0, 0x2d	; 45
     880:	07 fe       	sbrs	r0, 7
     882:	fd cf       	rjmp	.-6      	; 0x87e <DataflashManager_CheckDataflashOperation+0x3a>
				return SPDR;
     884:	9e b5       	in	r25, 0x2e	; 46
     886:	8e b1       	in	r24, 0x0e	; 14
     888:	83 60       	ori	r24, 0x03	; 3
     88a:	8e b9       	out	0x0e, r24	; 14

/** Performs a simple test on the attached Dataflash IC(s) to ensure that they are working.
 *
 *  \return Boolean true if all media chips are working, false otherwise
 */
bool DataflashManager_CheckDataflashOperation(void)
     88c:	81 e0       	ldi	r24, 0x01	; 1
     88e:	9f 31       	cpi	r25, 0x1F	; 31
     890:	19 f0       	breq	.+6      	; 0x898 <DataflashManager_CheckDataflashOperation+0x54>
     892:	80 e0       	ldi	r24, 0x00	; 0
     894:	08 95       	ret
	ReturnByte = Dataflash_ReceiveByte();
	Dataflash_DeselectChip();

	/* If returned data is invalid, fail the command */
	if (ReturnByte != DF_MANUFACTURER_ATMEL)
	  return false;
     896:	80 e0       	ldi	r24, 0x00	; 0
	if (ReturnByte != DF_MANUFACTURER_ATMEL)
	  return false;
	#endif

	return true;
}
     898:	08 95       	ret

0000089a <SCSI_Command_ReadWrite_10>:
 *
 *  \return Boolean true if the command completed successfully, false otherwise.
 */
static bool SCSI_Command_ReadWrite_10(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo,
                                      const bool IsDataRead)
{
     89a:	0f 93       	push	r16
     89c:	1f 93       	push	r17
     89e:	cf 93       	push	r28
     8a0:	df 93       	push	r29
     8a2:	ec 01       	movw	r28, r24
     8a4:	86 2f       	mov	r24, r22

				Temp = Data.Bytes[1];
				Data.Bytes[1] = Data.Bytes[2];
				Data.Bytes[2] = Temp;

				return Data.DWord;
     8a6:	48 a1       	lds	r20, 0x48
     8a8:	5f 8d       	ldd	r21, Y+31	; 0x1f
     8aa:	6e 8d       	ldd	r22, Y+30	; 0x1e
     8ac:	7d 8d       	ldd	r23, Y+29	; 0x1d

				Temp = Data.Bytes[0];
				Data.Bytes[0] = Data.Bytes[1];
				Data.Bytes[1] = Temp;

				return Data.Word;
     8ae:	0b a1       	lds	r16, 0x4b
     8b0:	1a a1       	lds	r17, 0x4a

	/* Load in the 16-bit total blocks (SCSI uses big-endian, so have to reverse the byte order) */
	TotalBlocks  = SwapEndian_16(*(uint16_t*)&MSInterfaceInfo->State.CommandBlock.SCSICommandData[7]);

	/* Check if the block address is outside the maximum allowable value for the LUN */
	if (BlockAddress >= LUN_MEDIA_BLOCKS)
     8b2:	40 30       	cpi	r20, 0x00	; 0
     8b4:	90 e8       	ldi	r25, 0x80	; 128
     8b6:	59 07       	cpc	r21, r25
     8b8:	90 e0       	ldi	r25, 0x00	; 0
     8ba:	69 07       	cpc	r22, r25
     8bc:	90 e0       	ldi	r25, 0x00	; 0
     8be:	79 07       	cpc	r23, r25
     8c0:	68 f0       	brcs	.+26     	; 0x8dc <SCSI_Command_ReadWrite_10+0x42>
	{
		/* Block address is invalid, update SENSE key and return command fail */
		SCSI_SET_SENSE(SCSI_SENSE_KEY_ILLEGAL_REQUEST,
     8c2:	80 91 3b 01 	lds	r24, 0x013B
     8c6:	80 7f       	andi	r24, 0xF0	; 240
     8c8:	85 60       	ori	r24, 0x05	; 5
     8ca:	80 93 3b 01 	sts	0x013B, r24
     8ce:	81 e2       	ldi	r24, 0x21	; 33
     8d0:	80 93 45 01 	sts	0x0145, r24
     8d4:	10 92 46 01 	sts	0x0146, r1
		               SCSI_ASENSE_LOGICAL_BLOCK_ADDRESS_OUT_OF_RANGE,
		               SCSI_ASENSEQ_NO_QUALIFIER);

		return false;
     8d8:	80 e0       	ldi	r24, 0x00	; 0
     8da:	1f c0       	rjmp	.+62     	; 0x91a <SCSI_Command_ReadWrite_10+0x80>
	/* Adjust the given block address to the real media address based on the selected LUN */
	BlockAddress += ((uint32_t)MSInterfaceInfo->State.CommandBlock.LUN * LUN_MEDIA_BLOCKS);
	#endif

	/* Determine if the packet is a READ (10) or WRITE (10) command, call appropriate function */
	if (IsDataRead == DATA_READ)
     8dc:	88 23       	and	r24, r24
     8de:	21 f0       	breq	.+8      	; 0x8e8 <SCSI_Command_ReadWrite_10+0x4e>
	  DataflashManager_ReadBlocks(MSInterfaceInfo, BlockAddress, TotalBlocks);
     8e0:	ce 01       	movw	r24, r28
     8e2:	98 01       	movw	r18, r16
     8e4:	59 de       	rcall	.-846    	; 0x598 <DataflashManager_ReadBlocks>
     8e6:	03 c0       	rjmp	.+6      	; 0x8ee <SCSI_Command_ReadWrite_10+0x54>
     8e8:	ce 01       	movw	r24, r28
	else
	  DataflashManager_WriteBlocks(MSInterfaceInfo, BlockAddress, TotalBlocks);
     8ea:	98 01       	movw	r18, r16
     8ec:	0a dd       	rcall	.-1516   	; 0x302 <DataflashManager_WriteBlocks>
     8ee:	20 e0       	ldi	r18, 0x00	; 0
     8f0:	30 e0       	ldi	r19, 0x00	; 0

	/* Update the bytes transferred counter and succeed the command */
	MSInterfaceInfo->State.CommandBlock.DataTransferLength -= ((uint32_t)TotalBlocks * VIRTUAL_MEMORY_BLOCK_SIZE);
     8f2:	89 e0       	ldi	r24, 0x09	; 9
     8f4:	00 0f       	add	r16, r16
     8f6:	11 1f       	adc	r17, r17
     8f8:	22 1f       	adc	r18, r18
     8fa:	33 1f       	adc	r19, r19
     8fc:	8a 95       	dec	r24
     8fe:	d1 f7       	brne	.-12     	; 0x8f4 <SCSI_Command_ReadWrite_10+0x5a>
     900:	8c 89       	ldd	r24, Y+20	; 0x14
     902:	9d 89       	ldd	r25, Y+21	; 0x15
     904:	ae 89       	ldd	r26, Y+22	; 0x16
     906:	bf 89       	ldd	r27, Y+23	; 0x17
     908:	80 1b       	sub	r24, r16
     90a:	91 0b       	sbc	r25, r17
     90c:	a2 0b       	sbc	r26, r18
     90e:	b3 0b       	sbc	r27, r19
     910:	8c 8b       	std	Y+20, r24	; 0x14
     912:	9d 8b       	std	Y+21, r25	; 0x15
     914:	ae 8b       	std	Y+22, r26	; 0x16
     916:	bf 8b       	std	Y+23, r27	; 0x17
     918:	81 e0       	ldi	r24, 0x01	; 1
     91a:	df 91       	pop	r29

	return true;
     91c:	cf 91       	pop	r28
}
     91e:	1f 91       	pop	r17
     920:	0f 91       	pop	r16
     922:	08 95       	ret

00000924 <SCSI_DecodeSCSICommand>:
     924:	cf 92       	push	r12
     926:	df 92       	push	r13
 *  \param[in] MSInterfaceInfo  Pointer to the Mass Storage class interface structure that the command is associated with
 *
 *  \return Boolean true if the command completed successfully, false otherwise
 */
bool SCSI_DecodeSCSICommand(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
     928:	ef 92       	push	r14
     92a:	ff 92       	push	r15
     92c:	0f 93       	push	r16
     92e:	1f 93       	push	r17
     930:	cf 93       	push	r28
     932:	df 93       	push	r29
     934:	cd b7       	in	r28, 0x3d	; 61
     936:	de b7       	in	r29, 0x3e	; 62
     938:	28 97       	sbiw	r28, 0x08	; 8
     93a:	0f b6       	in	r0, 0x3f	; 63
     93c:	f8 94       	cli
     93e:	de bf       	out	0x3e, r29	; 62
     940:	0f be       	out	0x3f, r0	; 63
     942:	cd bf       	out	0x3d, r28	; 61
     944:	8c 01       	movw	r16, r24
	bool CommandSuccess = false;

	/* Run the appropriate SCSI command hander function based on the passed command */
	switch (MSInterfaceInfo->State.CommandBlock.SCSICommandData[0])
     946:	fc 01       	movw	r30, r24
     948:	83 8d       	ldd	r24, Z+27	; 0x1b
     94a:	8d 31       	cpi	r24, 0x1D	; 29
     94c:	09 f4       	brne	.+2      	; 0x950 <SCSI_DecodeSCSICommand+0x2c>
     94e:	a9 c0       	rjmp	.+338    	; 0xaa2 <SCSI_DecodeSCSICommand+0x17e>
     950:	8e 31       	cpi	r24, 0x1E	; 30
     952:	78 f4       	brcc	.+30     	; 0x972 <SCSI_DecodeSCSICommand+0x4e>
     954:	83 30       	cpi	r24, 0x03	; 3
     956:	09 f4       	brne	.+2      	; 0x95a <SCSI_DecodeSCSICommand+0x36>
     958:	53 c0       	rjmp	.+166    	; 0xa00 <SCSI_DecodeSCSICommand+0xdc>
     95a:	84 30       	cpi	r24, 0x04	; 4
     95c:	20 f4       	brcc	.+8      	; 0x966 <SCSI_DecodeSCSICommand+0x42>
     95e:	88 23       	and	r24, r24
     960:	09 f4       	brne	.+2      	; 0x964 <SCSI_DecodeSCSICommand+0x40>
     962:	dc c0       	rjmp	.+440    	; 0xb1c <SCSI_DecodeSCSICommand+0x1f8>
     964:	e1 c0       	rjmp	.+450    	; 0xb28 <SCSI_DecodeSCSICommand+0x204>
     966:	82 31       	cpi	r24, 0x12	; 18
     968:	b9 f0       	breq	.+46     	; 0x998 <SCSI_DecodeSCSICommand+0x74>
     96a:	8a 31       	cpi	r24, 0x1A	; 26
     96c:	09 f0       	breq	.+2      	; 0x970 <SCSI_DecodeSCSICommand+0x4c>
     96e:	dc c0       	rjmp	.+440    	; 0xb28 <SCSI_DecodeSCSICommand+0x204>
     970:	bb c0       	rjmp	.+374    	; 0xae8 <SCSI_DecodeSCSICommand+0x1c4>
     972:	88 32       	cpi	r24, 0x28	; 40
     974:	09 f4       	brne	.+2      	; 0x978 <SCSI_DecodeSCSICommand+0x54>
     976:	b2 c0       	rjmp	.+356    	; 0xadc <SCSI_DecodeSCSICommand+0x1b8>
     978:	89 32       	cpi	r24, 0x29	; 41
     97a:	38 f4       	brcc	.+14     	; 0x98a <SCSI_DecodeSCSICommand+0x66>
     97c:	8e 31       	cpi	r24, 0x1E	; 30
     97e:	09 f4       	brne	.+2      	; 0x982 <SCSI_DecodeSCSICommand+0x5e>
     980:	cd c0       	rjmp	.+410    	; 0xb1c <SCSI_DecodeSCSICommand+0x1f8>
     982:	85 32       	cpi	r24, 0x25	; 37
     984:	09 f0       	breq	.+2      	; 0x988 <SCSI_DecodeSCSICommand+0x64>
     986:	d0 c0       	rjmp	.+416    	; 0xb28 <SCSI_DecodeSCSICommand+0x204>
     988:	60 c0       	rjmp	.+192    	; 0xa4a <SCSI_DecodeSCSICommand+0x126>
     98a:	8a 32       	cpi	r24, 0x2A	; 42
     98c:	09 f4       	brne	.+2      	; 0x990 <SCSI_DecodeSCSICommand+0x6c>
     98e:	a3 c0       	rjmp	.+326    	; 0xad6 <SCSI_DecodeSCSICommand+0x1b2>
     990:	8f 32       	cpi	r24, 0x2F	; 47
     992:	09 f0       	breq	.+2      	; 0x996 <SCSI_DecodeSCSICommand+0x72>
     994:	c9 c0       	rjmp	.+402    	; 0xb28 <SCSI_DecodeSCSICommand+0x204>
     996:	c2 c0       	rjmp	.+388    	; 0xb1c <SCSI_DecodeSCSICommand+0x1f8>
     998:	f8 01       	movw	r30, r16
     99a:	c7 8c       	ldd	r12, Z+31	; 0x1f
     99c:	d6 8c       	ldd	r13, Z+30	; 0x1e
{
	uint16_t AllocationLength  = SwapEndian_16(*(uint16_t*)&MSInterfaceInfo->State.CommandBlock.SCSICommandData[3]);
	uint16_t BytesTransferred  = MIN(AllocationLength, sizeof(InquiryData));

	/* Only the standard INQUIRY data is supported, check if any optional INQUIRY bits set */
	if ((MSInterfaceInfo->State.CommandBlock.SCSICommandData[1] & ((1 << 0) | (1 << 1))) ||
     99e:	84 8d       	ldd	r24, Z+28	; 0x1c
     9a0:	90 e0       	ldi	r25, 0x00	; 0
     9a2:	83 70       	andi	r24, 0x03	; 3
     9a4:	90 70       	andi	r25, 0x00	; 0
     9a6:	00 97       	sbiw	r24, 0x00	; 0
     9a8:	09 f0       	breq	.+2      	; 0x9ac <SCSI_DecodeSCSICommand+0x88>
     9aa:	7f c0       	rjmp	.+254    	; 0xaaa <SCSI_DecodeSCSICommand+0x186>
     9ac:	85 8d       	ldd	r24, Z+29	; 0x1d
     9ae:	88 23       	and	r24, r24
     9b0:	09 f0       	breq	.+2      	; 0x9b4 <SCSI_DecodeSCSICommand+0x90>
     9b2:	7b c0       	rjmp	.+246    	; 0xaaa <SCSI_DecodeSCSICommand+0x186>
 *  \return Boolean true if the command completed successfully, false otherwise.
 */
static bool SCSI_Command_Inquiry(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
	uint16_t AllocationLength  = SwapEndian_16(*(uint16_t*)&MSInterfaceInfo->State.CommandBlock.SCSICommandData[3]);
	uint16_t BytesTransferred  = MIN(AllocationLength, sizeof(InquiryData));
     9b4:	76 01       	movw	r14, r12
     9b6:	f5 e2       	ldi	r31, 0x25	; 37
     9b8:	cf 16       	cp	r12, r31
     9ba:	d1 04       	cpc	r13, r1
     9bc:	18 f0       	brcs	.+6      	; 0x9c4 <SCSI_DecodeSCSICommand+0xa0>
     9be:	24 e2       	ldi	r18, 0x24	; 36
     9c0:	e2 2e       	mov	r14, r18
     9c2:	f1 2c       	mov	r15, r1
		               SCSI_ASENSEQ_NO_QUALIFIER);

		return false;
	}

	Endpoint_Write_Stream_LE(&InquiryData, BytesTransferred, NULL);
     9c4:	8b e4       	ldi	r24, 0x4B	; 75
     9c6:	91 e0       	ldi	r25, 0x01	; 1
     9c8:	b7 01       	movw	r22, r14
     9ca:	40 e0       	ldi	r20, 0x00	; 0
     9cc:	50 e0       	ldi	r21, 0x00	; 0
     9ce:	16 d1       	rcall	.+556    	; 0xbfc <Endpoint_Write_Stream_LE>
     9d0:	c6 01       	movw	r24, r12

	/* Pad out remaining bytes with 0x00 */
	Endpoint_Null_Stream((AllocationLength - BytesTransferred), NULL);
     9d2:	8e 19       	sub	r24, r14
     9d4:	9f 09       	sbc	r25, r15
     9d6:	60 e0       	ldi	r22, 0x00	; 0
     9d8:	70 e0       	ldi	r23, 0x00	; 0
     9da:	cb d0       	rcall	.+406    	; 0xb72 <Endpoint_Null_Stream>
     9dc:	80 91 e8 00 	lds	r24, 0x00E8
     9e0:	8e 77       	andi	r24, 0x7E	; 126
     9e2:	80 93 e8 00 	sts	0x00E8, r24
     9e6:	a7 01       	movw	r20, r14
     9e8:	60 e0       	ldi	r22, 0x00	; 0

	/* Finalize the stream transfer to send the last packet */
	Endpoint_ClearIN();

	/* Succeed the command and update the bytes transferred counter */
	MSInterfaceInfo->State.CommandBlock.DataTransferLength -= BytesTransferred;
     9ea:	70 e0       	ldi	r23, 0x00	; 0
     9ec:	f8 01       	movw	r30, r16
     9ee:	84 89       	ldd	r24, Z+20	; 0x14
     9f0:	95 89       	ldd	r25, Z+21	; 0x15
     9f2:	a6 89       	ldd	r26, Z+22	; 0x16
     9f4:	b7 89       	ldd	r27, Z+23	; 0x17
     9f6:	84 1b       	sub	r24, r20
     9f8:	95 0b       	sbc	r25, r21
     9fa:	a6 0b       	sbc	r26, r22
     9fc:	b7 0b       	sbc	r27, r23
     9fe:	89 c0       	rjmp	.+274    	; 0xb12 <SCSI_DecodeSCSICommand+0x1ee>
     a00:	f8 01       	movw	r30, r16
     a02:	c7 8c       	ldd	r12, Z+31	; 0x1f
 *
 *  \return Boolean true if the command completed successfully, false otherwise.
 */
static bool SCSI_Command_Request_Sense(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
	uint8_t  AllocationLength = MSInterfaceInfo->State.CommandBlock.SCSICommandData[4];
     a04:	ec 2c       	mov	r14, r12
     a06:	f2 e1       	ldi	r31, 0x12	; 18
	uint8_t  BytesTransferred = MIN(AllocationLength, sizeof(SenseData));
     a08:	fc 15       	cp	r31, r12
     a0a:	10 f4       	brcc	.+4      	; 0xa10 <SCSI_DecodeSCSICommand+0xec>
     a0c:	92 e1       	ldi	r25, 0x12	; 18
     a0e:	e9 2e       	mov	r14, r25
     a10:	89 e3       	ldi	r24, 0x39	; 57
     a12:	91 e0       	ldi	r25, 0x01	; 1

	Endpoint_Write_Stream_LE(&SenseData, BytesTransferred, NULL);
     a14:	6e 2d       	mov	r22, r14
     a16:	70 e0       	ldi	r23, 0x00	; 0
     a18:	40 e0       	ldi	r20, 0x00	; 0
     a1a:	50 e0       	ldi	r21, 0x00	; 0
     a1c:	ef d0       	rcall	.+478    	; 0xbfc <Endpoint_Write_Stream_LE>
     a1e:	8c 2d       	mov	r24, r12
     a20:	90 e0       	ldi	r25, 0x00	; 0
     a22:	8e 19       	sub	r24, r14
	Endpoint_Null_Stream((AllocationLength - BytesTransferred), NULL);
     a24:	91 09       	sbc	r25, r1
     a26:	60 e0       	ldi	r22, 0x00	; 0
     a28:	70 e0       	ldi	r23, 0x00	; 0
     a2a:	a3 d0       	rcall	.+326    	; 0xb72 <Endpoint_Null_Stream>
     a2c:	80 91 e8 00 	lds	r24, 0x00E8
     a30:	8e 77       	andi	r24, 0x7E	; 126
     a32:	80 93 e8 00 	sts	0x00E8, r24
     a36:	f8 01       	movw	r30, r16
     a38:	84 89       	ldd	r24, Z+20	; 0x14
     a3a:	95 89       	ldd	r25, Z+21	; 0x15
     a3c:	a6 89       	ldd	r26, Z+22	; 0x16
	Endpoint_ClearIN();

	/* Succeed the command and update the bytes transferred counter */
	MSInterfaceInfo->State.CommandBlock.DataTransferLength -= BytesTransferred;
     a3e:	b7 89       	ldd	r27, Z+23	; 0x17
     a40:	8e 19       	sub	r24, r14
     a42:	91 09       	sbc	r25, r1
     a44:	a1 09       	sbc	r26, r1
     a46:	b1 09       	sbc	r27, r1
     a48:	64 c0       	rjmp	.+200    	; 0xb12 <SCSI_DecodeSCSICommand+0x1ee>
     a4a:	8f ef       	ldi	r24, 0xFF	; 255
     a4c:	9f e7       	ldi	r25, 0x7F	; 127
     a4e:	a0 e0       	ldi	r26, 0x00	; 0
     a50:	b0 e0       	ldi	r27, 0x00	; 0
 *
 *  \return Boolean true if the command completed successfully, false otherwise.
 */
static bool SCSI_Command_Read_Capacity_10(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
	uint32_t LastBlockAddressInLUN = (LUN_MEDIA_BLOCKS - 1);
     a52:	8d 83       	std	Y+5, r24	; 0x05
     a54:	9e 83       	std	Y+6, r25	; 0x06
     a56:	af 83       	std	Y+7, r26	; 0x07
     a58:	b8 87       	std	Y+8, r27	; 0x08
     a5a:	80 e0       	ldi	r24, 0x00	; 0
     a5c:	92 e0       	ldi	r25, 0x02	; 2
     a5e:	a0 e0       	ldi	r26, 0x00	; 0
     a60:	b0 e0       	ldi	r27, 0x00	; 0
	uint32_t MediaBlockSize        = VIRTUAL_MEMORY_BLOCK_SIZE;
     a62:	89 83       	std	Y+1, r24	; 0x01
     a64:	9a 83       	std	Y+2, r25	; 0x02
     a66:	ab 83       	std	Y+3, r26	; 0x03
     a68:	bc 83       	std	Y+4, r27	; 0x04
     a6a:	ce 01       	movw	r24, r28
     a6c:	05 96       	adiw	r24, 0x05	; 5
     a6e:	64 e0       	ldi	r22, 0x04	; 4
     a70:	70 e0       	ldi	r23, 0x00	; 0

	Endpoint_Write_Stream_BE(&LastBlockAddressInLUN, sizeof(LastBlockAddressInLUN), NULL);
     a72:	40 e0       	ldi	r20, 0x00	; 0
     a74:	50 e0       	ldi	r21, 0x00	; 0
     a76:	11 d1       	rcall	.+546    	; 0xc9a <Endpoint_Write_Stream_BE>
     a78:	ce 01       	movw	r24, r28
     a7a:	01 96       	adiw	r24, 0x01	; 1
     a7c:	64 e0       	ldi	r22, 0x04	; 4
     a7e:	70 e0       	ldi	r23, 0x00	; 0
     a80:	40 e0       	ldi	r20, 0x00	; 0
	Endpoint_Write_Stream_BE(&MediaBlockSize, sizeof(MediaBlockSize), NULL);
     a82:	50 e0       	ldi	r21, 0x00	; 0
     a84:	0a d1       	rcall	.+532    	; 0xc9a <Endpoint_Write_Stream_BE>
     a86:	80 91 e8 00 	lds	r24, 0x00E8
     a8a:	8e 77       	andi	r24, 0x7E	; 126
     a8c:	80 93 e8 00 	sts	0x00E8, r24
     a90:	f8 01       	movw	r30, r16
     a92:	84 89       	ldd	r24, Z+20	; 0x14
     a94:	95 89       	ldd	r25, Z+21	; 0x15
     a96:	a6 89       	ldd	r26, Z+22	; 0x16
     a98:	b7 89       	ldd	r27, Z+23	; 0x17
     a9a:	08 97       	sbiw	r24, 0x08	; 8
	Endpoint_ClearIN();

	/* Succeed the command and update the bytes transferred counter */
	MSInterfaceInfo->State.CommandBlock.DataTransferLength -= 8;
     a9c:	a1 09       	sbc	r26, r1
     a9e:	b1 09       	sbc	r27, r1
     aa0:	38 c0       	rjmp	.+112    	; 0xb12 <SCSI_DecodeSCSICommand+0x1ee>
     aa2:	f8 01       	movw	r30, r16
     aa4:	84 8d       	ldd	r24, Z+28	; 0x1c
     aa6:	82 fd       	sbrc	r24, 2
     aa8:	08 c0       	rjmp	.+16     	; 0xaba <SCSI_DecodeSCSICommand+0x196>
     aaa:	80 91 3b 01 	lds	r24, 0x013B
 *  \return Boolean true if the command completed successfully, false otherwise.
 */
static bool SCSI_Command_Send_Diagnostic(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
	/* Check to see if the SELF TEST bit is not set */
	if (!(MSInterfaceInfo->State.CommandBlock.SCSICommandData[1] & (1 << 2)))
     aae:	80 7f       	andi	r24, 0xF0	; 240
     ab0:	85 60       	ori	r24, 0x05	; 5
     ab2:	80 93 3b 01 	sts	0x013B, r24
	{
		/* Only self-test supported - update SENSE key and fail the command */
		SCSI_SET_SENSE(SCSI_SENSE_KEY_ILLEGAL_REQUEST,
     ab6:	84 e2       	ldi	r24, 0x24	; 36
     ab8:	3e c0       	rjmp	.+124    	; 0xb36 <SCSI_DecodeSCSICommand+0x212>
     aba:	c4 de       	rcall	.-632    	; 0x844 <DataflashManager_CheckDataflashOperation>
     abc:	88 23       	and	r24, r24
     abe:	71 f5       	brne	.+92     	; 0xb1c <SCSI_DecodeSCSICommand+0x1f8>
     ac0:	80 91 3b 01 	lds	r24, 0x013B
     ac4:	80 7f       	andi	r24, 0xF0	; 240

		return false;
	}

	/* Check to see if all attached Dataflash ICs are functional */
	if (!(DataflashManager_CheckDataflashOperation()))
     ac6:	84 60       	ori	r24, 0x04	; 4
     ac8:	80 93 3b 01 	sts	0x013B, r24
     acc:	10 92 45 01 	sts	0x0145, r1
	{
		/* Update SENSE key with a hardware error condition and return command fail */
		SCSI_SET_SENSE(SCSI_SENSE_KEY_HARDWARE_ERROR,
     ad0:	10 92 46 01 	sts	0x0146, r1
     ad4:	3e c0       	rjmp	.+124    	; 0xb52 <SCSI_DecodeSCSICommand+0x22e>
     ad6:	c8 01       	movw	r24, r16
     ad8:	60 e0       	ldi	r22, 0x00	; 0
     ada:	02 c0       	rjmp	.+4      	; 0xae0 <SCSI_DecodeSCSICommand+0x1bc>
     adc:	c8 01       	movw	r24, r16
     ade:	61 e0       	ldi	r22, 0x01	; 1
     ae0:	dc de       	rcall	.-584    	; 0x89a <SCSI_Command_ReadWrite_10>
     ae2:	88 23       	and	r24, r24
			break;
		case SCSI_CMD_SEND_DIAGNOSTIC:
			CommandSuccess = SCSI_Command_Send_Diagnostic(MSInterfaceInfo);
			break;
		case SCSI_CMD_WRITE_10:
			CommandSuccess = SCSI_Command_ReadWrite_10(MSInterfaceInfo, DATA_WRITE);
     ae4:	b1 f1       	breq	.+108    	; 0xb52 <SCSI_DecodeSCSICommand+0x22e>
     ae6:	2a c0       	rjmp	.+84     	; 0xb3c <SCSI_DecodeSCSICommand+0x218>
     ae8:	10 92 f1 00 	sts	0x00F1, r1
			break;
		case SCSI_CMD_READ_10:
			CommandSuccess = SCSI_Command_ReadWrite_10(MSInterfaceInfo, DATA_READ);
     aec:	10 92 f1 00 	sts	0x00F1, r1
     af0:	10 92 f1 00 	sts	0x00F1, r1
		                   SCSI_ASENSEQ_NO_QUALIFIER);
			break;
	}

	/* Check if command was successfully processed */
	if (CommandSuccess)
     af4:	10 92 f1 00 	sts	0x00F1, r1
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     af8:	80 91 e8 00 	lds	r24, 0x00E8
     afc:	8e 77       	andi	r24, 0x7E	; 126
     afe:	80 93 e8 00 	sts	0x00E8, r24
     b02:	f8 01       	movw	r30, r16
     b04:	84 89       	ldd	r24, Z+20	; 0x14
     b06:	95 89       	ldd	r25, Z+21	; 0x15
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     b08:	a6 89       	ldd	r26, Z+22	; 0x16
     b0a:	b7 89       	ldd	r27, Z+23	; 0x17
     b0c:	04 97       	sbiw	r24, 0x04	; 4
     b0e:	a1 09       	sbc	r26, r1
     b10:	b1 09       	sbc	r27, r1
	Endpoint_Write_8(DISK_READ_ONLY ? 0x80 : 0x00);
	Endpoint_Write_8(0x00);
	Endpoint_ClearIN();

	/* Update the bytes transferred counter and succeed the command */
	MSInterfaceInfo->State.CommandBlock.DataTransferLength -= 4;
     b12:	84 8b       	std	Z+20, r24	; 0x14
     b14:	95 8b       	std	Z+21, r25	; 0x15
     b16:	a6 8b       	std	Z+22, r26	; 0x16
     b18:	b7 8b       	std	Z+23, r27	; 0x17
     b1a:	10 c0       	rjmp	.+32     	; 0xb3c <SCSI_DecodeSCSICommand+0x218>
     b1c:	f8 01       	movw	r30, r16
     b1e:	14 8a       	std	Z+20, r1	; 0x14
     b20:	15 8a       	std	Z+21, r1	; 0x15
     b22:	16 8a       	std	Z+22, r1	; 0x16
     b24:	17 8a       	std	Z+23, r1	; 0x17
     b26:	0a c0       	rjmp	.+20     	; 0xb3c <SCSI_DecodeSCSICommand+0x218>
     b28:	80 91 3b 01 	lds	r24, 0x013B
		case SCSI_CMD_TEST_UNIT_READY:
		case SCSI_CMD_PREVENT_ALLOW_MEDIUM_REMOVAL:
		case SCSI_CMD_VERIFY_10:
			/* These commands should just succeed, no handling required */
			CommandSuccess = true;
			MSInterfaceInfo->State.CommandBlock.DataTransferLength = 0;
     b2c:	80 7f       	andi	r24, 0xF0	; 240
     b2e:	85 60       	ori	r24, 0x05	; 5
     b30:	80 93 3b 01 	sts	0x013B, r24
     b34:	80 e2       	ldi	r24, 0x20	; 32
			break;
     b36:	80 93 45 01 	sts	0x0145, r24
		default:
			/* Update the SENSE key to reflect the invalid command */
			SCSI_SET_SENSE(SCSI_SENSE_KEY_ILLEGAL_REQUEST,
     b3a:	ca cf       	rjmp	.-108    	; 0xad0 <SCSI_DecodeSCSICommand+0x1ac>
     b3c:	80 91 3b 01 	lds	r24, 0x013B
     b40:	80 7f       	andi	r24, 0xF0	; 240
     b42:	80 93 3b 01 	sts	0x013B, r24
     b46:	10 92 45 01 	sts	0x0145, r1
     b4a:	10 92 46 01 	sts	0x0146, r1
	}

	/* Check if command was successfully processed */
	if (CommandSuccess)
	{
		SCSI_SET_SENSE(SCSI_SENSE_KEY_GOOD,
     b4e:	81 e0       	ldi	r24, 0x01	; 1
     b50:	01 c0       	rjmp	.+2      	; 0xb54 <SCSI_DecodeSCSICommand+0x230>
     b52:	80 e0       	ldi	r24, 0x00	; 0
     b54:	28 96       	adiw	r28, 0x08	; 8
     b56:	0f b6       	in	r0, 0x3f	; 63
     b58:	f8 94       	cli
     b5a:	de bf       	out	0x3e, r29	; 62
     b5c:	0f be       	out	0x3f, r0	; 63
		               SCSI_ASENSE_NO_ADDITIONAL_INFORMATION,
		               SCSI_ASENSEQ_NO_QUALIFIER);

		return true;
     b5e:	cd bf       	out	0x3d, r28	; 61
     b60:	df 91       	pop	r29
	}

	return false;
     b62:	cf 91       	pop	r28
}
     b64:	1f 91       	pop	r17
     b66:	0f 91       	pop	r16
     b68:	ff 90       	pop	r15
     b6a:	ef 90       	pop	r14
     b6c:	df 90       	pop	r13
     b6e:	cf 90       	pop	r12
     b70:	08 95       	ret

00000b72 <Endpoint_Null_Stream>:
	return ENDPOINT_RWSTREAM_NoError;
}

uint8_t Endpoint_Null_Stream(uint16_t Length,
                             uint16_t* const BytesProcessed)
{
     b72:	df 92       	push	r13
     b74:	ef 92       	push	r14
     b76:	ff 92       	push	r15
     b78:	0f 93       	push	r16
     b7a:	1f 93       	push	r17
     b7c:	cf 93       	push	r28
     b7e:	df 93       	push	r29
     b80:	ec 01       	movw	r28, r24
     b82:	8b 01       	movw	r16, r22
	uint8_t  ErrorCode;
	uint16_t BytesInTransfer = 0;
	
	if ((ErrorCode = Endpoint_WaitUntilReady()))
     b84:	7a d2       	rcall	.+1268   	; 0x107a <Endpoint_WaitUntilReady>
     b86:	d8 2e       	mov	r13, r24
     b88:	88 23       	and	r24, r24
     b8a:	79 f5       	brne	.+94     	; 0xbea <Endpoint_Null_Stream+0x78>
     b8c:	01 15       	cp	r16, r1
	  return ErrorCode;
	  
	if (BytesProcessed != NULL)
     b8e:	11 05       	cpc	r17, r1
     b90:	29 f0       	breq	.+10     	; 0xb9c <Endpoint_Null_Stream+0x2a>
     b92:	f8 01       	movw	r30, r16
	  Length -= *BytesProcessed;
     b94:	20 81       	ld	r18, Z
     b96:	31 81       	ldd	r19, Z+1	; 0x01
     b98:	c2 1b       	sub	r28, r18
     b9a:	d3 0b       	sbc	r29, r19
     b9c:	ee 24       	eor	r14, r14
	return ENDPOINT_RWSTREAM_NoError;
}

uint8_t Endpoint_Null_Stream(uint16_t Length,
                             uint16_t* const BytesProcessed)
{
     b9e:	ff 24       	eor	r15, r15
     ba0:	20 c0       	rjmp	.+64     	; 0xbe2 <Endpoint_Null_Stream+0x70>
     ba2:	80 91 e8 00 	lds	r24, 0x00E8
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
     ba6:	85 fd       	sbrc	r24, 5
	if (BytesProcessed != NULL)
	  Length -= *BytesProcessed;

	while (Length)
	{
		if (!(Endpoint_IsReadWriteAllowed()))
     ba8:	16 c0       	rjmp	.+44     	; 0xbd6 <Endpoint_Null_Stream+0x64>
     baa:	80 91 e8 00 	lds	r24, 0x00E8
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     bae:	8e 77       	andi	r24, 0x7E	; 126
     bb0:	80 93 e8 00 	sts	0x00E8, r24
     bb4:	01 15       	cp	r16, r1
		{
			Endpoint_ClearIN();

			if (BytesProcessed != NULL)
     bb6:	11 05       	cpc	r17, r1
     bb8:	51 f0       	breq	.+20     	; 0xbce <Endpoint_Null_Stream+0x5c>
     bba:	f8 01       	movw	r30, r16
			{
				*BytesProcessed += BytesInTransfer;
     bbc:	80 81       	ld	r24, Z
     bbe:	91 81       	ldd	r25, Z+1	; 0x01
     bc0:	8e 0d       	add	r24, r14
     bc2:	9f 1d       	adc	r25, r15
     bc4:	91 83       	std	Z+1, r25	; 0x01
     bc6:	80 83       	st	Z, r24
     bc8:	35 e0       	ldi	r19, 0x05	; 5
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
     bca:	d3 2e       	mov	r13, r19
     bcc:	0e c0       	rjmp	.+28     	; 0xbea <Endpoint_Null_Stream+0x78>
     bce:	55 d2       	rcall	.+1194   	; 0x107a <Endpoint_WaitUntilReady>
			}

			if ((ErrorCode = Endpoint_WaitUntilReady()))
     bd0:	88 23       	and	r24, r24
     bd2:	39 f0       	breq	.+14     	; 0xbe2 <Endpoint_Null_Stream+0x70>
     bd4:	09 c0       	rjmp	.+18     	; 0xbe8 <Endpoint_Null_Stream+0x76>
     bd6:	10 92 f1 00 	sts	0x00F1, r1
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     bda:	21 97       	sbiw	r28, 0x01	; 1
     bdc:	08 94       	sec
		}
		else
		{
			Endpoint_Write_8(0);

			Length--;
     bde:	e1 1c       	adc	r14, r1
			BytesInTransfer++;
     be0:	f1 1c       	adc	r15, r1
     be2:	20 97       	sbiw	r28, 0x00	; 0
     be4:	f1 f6       	brne	.-68     	; 0xba2 <Endpoint_Null_Stream+0x30>
	  return ErrorCode;
	  
	if (BytesProcessed != NULL)
	  Length -= *BytesProcessed;

	while (Length)
     be6:	01 c0       	rjmp	.+2      	; 0xbea <Endpoint_Null_Stream+0x78>
     be8:	d8 2e       	mov	r13, r24
     bea:	8d 2d       	mov	r24, r13
			{
				*BytesProcessed += BytesInTransfer;
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
			}

			if ((ErrorCode = Endpoint_WaitUntilReady()))
     bec:	df 91       	pop	r29
			BytesInTransfer++;
		}
	}
	
	return ENDPOINT_RWSTREAM_NoError;
}
     bee:	cf 91       	pop	r28
     bf0:	1f 91       	pop	r17
     bf2:	0f 91       	pop	r16
     bf4:	ff 90       	pop	r15
     bf6:	ef 90       	pop	r14
     bf8:	df 90       	pop	r13
     bfa:	08 95       	ret

00000bfc <Endpoint_Write_Stream_LE>:
     bfc:	af 92       	push	r10
     bfe:	bf 92       	push	r11
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
     c00:	cf 92       	push	r12
     c02:	df 92       	push	r13
     c04:	ef 92       	push	r14
     c06:	ff 92       	push	r15
     c08:	1f 93       	push	r17
     c0a:	cf 93       	push	r28
     c0c:	df 93       	push	r29
     c0e:	ec 01       	movw	r28, r24
     c10:	7b 01       	movw	r14, r22
     c12:	6a 01       	movw	r12, r20
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	uint16_t BytesInTransfer = 0;
	uint8_t  ErrorCode;

	if ((ErrorCode = Endpoint_WaitUntilReady()))
     c14:	32 d2       	rcall	.+1124   	; 0x107a <Endpoint_WaitUntilReady>
     c16:	18 2f       	mov	r17, r24
     c18:	88 23       	and	r24, r24
     c1a:	a1 f5       	brne	.+104    	; 0xc84 <Endpoint_Write_Stream_LE+0x88>
     c1c:	c1 14       	cp	r12, r1
	  return ErrorCode;

	if (BytesProcessed != NULL)
     c1e:	d1 04       	cpc	r13, r1
     c20:	39 f0       	breq	.+14     	; 0xc30 <Endpoint_Write_Stream_LE+0x34>
     c22:	f6 01       	movw	r30, r12
	{
		Length -= *BytesProcessed;
     c24:	20 81       	ld	r18, Z
     c26:	31 81       	ldd	r19, Z+1	; 0x01
     c28:	e2 1a       	sub	r14, r18
     c2a:	f3 0a       	sbc	r15, r19
     c2c:	c2 0f       	add	r28, r18
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
     c2e:	d3 1f       	adc	r29, r19
     c30:	aa 24       	eor	r10, r10

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
     c32:	bb 24       	eor	r11, r11
     c34:	22 c0       	rjmp	.+68     	; 0xc7a <Endpoint_Write_Stream_LE+0x7e>
     c36:	80 91 e8 00 	lds	r24, 0x00E8
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
     c3a:	85 fd       	sbrc	r24, 5
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
	{
		if (!(Endpoint_IsReadWriteAllowed()))
     c3c:	15 c0       	rjmp	.+42     	; 0xc68 <Endpoint_Write_Stream_LE+0x6c>
     c3e:	80 91 e8 00 	lds	r24, 0x00E8
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     c42:	8e 77       	andi	r24, 0x7E	; 126
     c44:	80 93 e8 00 	sts	0x00E8, r24
     c48:	c1 14       	cp	r12, r1

			#if !defined(INTERRUPT_CONTROL_ENDPOINT)
			USB_USBTask();
			#endif

			if (BytesProcessed != NULL)
     c4a:	d1 04       	cpc	r13, r1
     c4c:	49 f0       	breq	.+18     	; 0xc60 <Endpoint_Write_Stream_LE+0x64>
     c4e:	f6 01       	movw	r30, r12
			{
				*BytesProcessed += BytesInTransfer;
     c50:	80 81       	ld	r24, Z
     c52:	91 81       	ldd	r25, Z+1	; 0x01
     c54:	8a 0d       	add	r24, r10
     c56:	9b 1d       	adc	r25, r11
     c58:	91 83       	std	Z+1, r25	; 0x01
     c5a:	80 83       	st	Z, r24
     c5c:	15 e0       	ldi	r17, 0x05	; 5
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
     c5e:	12 c0       	rjmp	.+36     	; 0xc84 <Endpoint_Write_Stream_LE+0x88>
     c60:	0c d2       	rcall	.+1048   	; 0x107a <Endpoint_WaitUntilReady>
			}

			if ((ErrorCode = Endpoint_WaitUntilReady()))
     c62:	88 23       	and	r24, r24
     c64:	51 f0       	breq	.+20     	; 0xc7a <Endpoint_Write_Stream_LE+0x7e>
     c66:	0d c0       	rjmp	.+26     	; 0xc82 <Endpoint_Write_Stream_LE+0x86>
     c68:	89 91       	ld	r24, Y+
     c6a:	80 93 f1 00 	sts	0x00F1, r24
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     c6e:	08 94       	sec
     c70:	e1 08       	sbc	r14, r1
		}
		else
		{
			TEMPLATE_TRANSFER_BYTE(DataStream);
			TEMPLATE_BUFFER_MOVE(DataStream, 1);
			Length--;
     c72:	f1 08       	sbc	r15, r1
     c74:	08 94       	sec
     c76:	a1 1c       	adc	r10, r1
			BytesInTransfer++;
     c78:	b1 1c       	adc	r11, r1
     c7a:	e1 14       	cp	r14, r1
     c7c:	f1 04       	cpc	r15, r1
	{
		Length -= *BytesProcessed;
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
     c7e:	d9 f6       	brne	.-74     	; 0xc36 <Endpoint_Write_Stream_LE+0x3a>
     c80:	01 c0       	rjmp	.+2      	; 0xc84 <Endpoint_Write_Stream_LE+0x88>
     c82:	18 2f       	mov	r17, r24
     c84:	81 2f       	mov	r24, r17
			{
				*BytesProcessed += BytesInTransfer;
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
			}

			if ((ErrorCode = Endpoint_WaitUntilReady()))
     c86:	df 91       	pop	r29
			BytesInTransfer++;
		}
	}

	return ENDPOINT_RWSTREAM_NoError;
}
     c88:	cf 91       	pop	r28
     c8a:	1f 91       	pop	r17
     c8c:	ff 90       	pop	r15
     c8e:	ef 90       	pop	r14
     c90:	df 90       	pop	r13
     c92:	cf 90       	pop	r12
     c94:	bf 90       	pop	r11
     c96:	af 90       	pop	r10
     c98:	08 95       	ret

00000c9a <Endpoint_Write_Stream_BE>:
     c9a:	af 92       	push	r10
     c9c:	bf 92       	push	r11
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
     c9e:	cf 92       	push	r12
     ca0:	df 92       	push	r13
     ca2:	ff 92       	push	r15
     ca4:	0f 93       	push	r16
     ca6:	1f 93       	push	r17
     ca8:	cf 93       	push	r28
     caa:	df 93       	push	r29
     cac:	ec 01       	movw	r28, r24
     cae:	6b 01       	movw	r12, r22
     cb0:	5a 01       	movw	r10, r20
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	uint16_t BytesInTransfer = 0;
	uint8_t  ErrorCode;

	if ((ErrorCode = Endpoint_WaitUntilReady()))
     cb2:	e3 d1       	rcall	.+966    	; 0x107a <Endpoint_WaitUntilReady>
     cb4:	f8 2e       	mov	r15, r24
     cb6:	88 23       	and	r24, r24
     cb8:	d9 f5       	brne	.+118    	; 0xd30 <Endpoint_Write_Stream_BE+0x96>
     cba:	86 01       	movw	r16, r12

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
     cbc:	01 50       	subi	r16, 0x01	; 1
     cbe:	10 40       	sbci	r17, 0x00	; 0
     cc0:	0c 0f       	add	r16, r28
     cc2:	1d 1f       	adc	r17, r29
     cc4:	a1 14       	cp	r10, r1
	uint8_t  ErrorCode;

	if ((ErrorCode = Endpoint_WaitUntilReady()))
	  return ErrorCode;

	if (BytesProcessed != NULL)
     cc6:	b1 04       	cpc	r11, r1
     cc8:	39 f0       	breq	.+14     	; 0xcd8 <Endpoint_Write_Stream_BE+0x3e>
     cca:	f5 01       	movw	r30, r10
	{
		Length -= *BytesProcessed;
     ccc:	20 81       	ld	r18, Z
     cce:	31 81       	ldd	r19, Z+1	; 0x01
     cd0:	c2 1a       	sub	r12, r18
     cd2:	d3 0a       	sbc	r13, r19
     cd4:	02 1b       	sub	r16, r18
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
     cd6:	13 0b       	sbc	r17, r19
     cd8:	c0 e0       	ldi	r28, 0x00	; 0
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
     cda:	d0 e0       	ldi	r29, 0x00	; 0
     cdc:	24 c0       	rjmp	.+72     	; 0xd26 <Endpoint_Write_Stream_BE+0x8c>
     cde:	80 91 e8 00 	lds	r24, 0x00E8
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
     ce2:	85 fd       	sbrc	r24, 5
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
	{
		if (!(Endpoint_IsReadWriteAllowed()))
     ce4:	16 c0       	rjmp	.+44     	; 0xd12 <Endpoint_Write_Stream_BE+0x78>
     ce6:	80 91 e8 00 	lds	r24, 0x00E8
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     cea:	8e 77       	andi	r24, 0x7E	; 126
     cec:	80 93 e8 00 	sts	0x00E8, r24
     cf0:	a1 14       	cp	r10, r1

			#if !defined(INTERRUPT_CONTROL_ENDPOINT)
			USB_USBTask();
			#endif

			if (BytesProcessed != NULL)
     cf2:	b1 04       	cpc	r11, r1
     cf4:	51 f0       	breq	.+20     	; 0xd0a <Endpoint_Write_Stream_BE+0x70>
     cf6:	f5 01       	movw	r30, r10
			{
				*BytesProcessed += BytesInTransfer;
     cf8:	80 81       	ld	r24, Z
     cfa:	91 81       	ldd	r25, Z+1	; 0x01
     cfc:	8c 0f       	add	r24, r28
     cfe:	9d 1f       	adc	r25, r29
     d00:	91 83       	std	Z+1, r25	; 0x01
     d02:	80 83       	st	Z, r24
     d04:	45 e0       	ldi	r20, 0x05	; 5
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
     d06:	f4 2e       	mov	r15, r20
     d08:	13 c0       	rjmp	.+38     	; 0xd30 <Endpoint_Write_Stream_BE+0x96>
     d0a:	b7 d1       	rcall	.+878    	; 0x107a <Endpoint_WaitUntilReady>
			}

			if ((ErrorCode = Endpoint_WaitUntilReady()))
     d0c:	88 23       	and	r24, r24
     d0e:	59 f0       	breq	.+22     	; 0xd26 <Endpoint_Write_Stream_BE+0x8c>
     d10:	0e c0       	rjmp	.+28     	; 0xd2e <Endpoint_Write_Stream_BE+0x94>
     d12:	f8 01       	movw	r30, r16
     d14:	80 81       	ld	r24, Z
			  return ErrorCode;
		}
		else
		{
			TEMPLATE_TRANSFER_BYTE(DataStream);
     d16:	80 93 f1 00 	sts	0x00F1, r24
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     d1a:	01 50       	subi	r16, 0x01	; 1
     d1c:	10 40       	sbci	r17, 0x00	; 0
			TEMPLATE_BUFFER_MOVE(DataStream, 1);
     d1e:	08 94       	sec
     d20:	c1 08       	sbc	r12, r1
			Length--;
     d22:	d1 08       	sbc	r13, r1
     d24:	21 96       	adiw	r28, 0x01	; 1
     d26:	c1 14       	cp	r12, r1
			BytesInTransfer++;
     d28:	d1 04       	cpc	r13, r1
	{
		Length -= *BytesProcessed;
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
     d2a:	c9 f6       	brne	.-78     	; 0xcde <Endpoint_Write_Stream_BE+0x44>
     d2c:	01 c0       	rjmp	.+2      	; 0xd30 <Endpoint_Write_Stream_BE+0x96>
     d2e:	f8 2e       	mov	r15, r24
     d30:	8f 2d       	mov	r24, r15
			{
				*BytesProcessed += BytesInTransfer;
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
			}

			if ((ErrorCode = Endpoint_WaitUntilReady()))
     d32:	df 91       	pop	r29
			BytesInTransfer++;
		}
	}

	return ENDPOINT_RWSTREAM_NoError;
}
     d34:	cf 91       	pop	r28
     d36:	1f 91       	pop	r17
     d38:	0f 91       	pop	r16
     d3a:	ff 90       	pop	r15
     d3c:	df 90       	pop	r13
     d3e:	cf 90       	pop	r12
     d40:	bf 90       	pop	r11
     d42:	af 90       	pop	r10
     d44:	08 95       	ret

00000d46 <Endpoint_Read_Stream_LE>:
     d46:	af 92       	push	r10
     d48:	bf 92       	push	r11
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
     d4a:	cf 92       	push	r12
     d4c:	df 92       	push	r13
     d4e:	ef 92       	push	r14
     d50:	ff 92       	push	r15
     d52:	1f 93       	push	r17
     d54:	cf 93       	push	r28
     d56:	df 93       	push	r29
     d58:	ec 01       	movw	r28, r24
     d5a:	7b 01       	movw	r14, r22
     d5c:	6a 01       	movw	r12, r20
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	uint16_t BytesInTransfer = 0;
	uint8_t  ErrorCode;

	if ((ErrorCode = Endpoint_WaitUntilReady()))
     d5e:	8d d1       	rcall	.+794    	; 0x107a <Endpoint_WaitUntilReady>
     d60:	18 2f       	mov	r17, r24
     d62:	88 23       	and	r24, r24
     d64:	a1 f5       	brne	.+104    	; 0xdce <Endpoint_Read_Stream_LE+0x88>
     d66:	c1 14       	cp	r12, r1
	  return ErrorCode;

	if (BytesProcessed != NULL)
     d68:	d1 04       	cpc	r13, r1
     d6a:	39 f0       	breq	.+14     	; 0xd7a <Endpoint_Read_Stream_LE+0x34>
     d6c:	f6 01       	movw	r30, r12
	{
		Length -= *BytesProcessed;
     d6e:	20 81       	ld	r18, Z
     d70:	31 81       	ldd	r19, Z+1	; 0x01
     d72:	e2 1a       	sub	r14, r18
     d74:	f3 0a       	sbc	r15, r19
     d76:	c2 0f       	add	r28, r18
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
     d78:	d3 1f       	adc	r29, r19
     d7a:	aa 24       	eor	r10, r10

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
     d7c:	bb 24       	eor	r11, r11
     d7e:	22 c0       	rjmp	.+68     	; 0xdc4 <Endpoint_Read_Stream_LE+0x7e>
     d80:	80 91 e8 00 	lds	r24, 0x00E8
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
     d84:	85 fd       	sbrc	r24, 5
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
	{
		if (!(Endpoint_IsReadWriteAllowed()))
     d86:	15 c0       	rjmp	.+42     	; 0xdb2 <Endpoint_Read_Stream_LE+0x6c>
     d88:	80 91 e8 00 	lds	r24, 0x00E8
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     d8c:	8b 77       	andi	r24, 0x7B	; 123
     d8e:	80 93 e8 00 	sts	0x00E8, r24
     d92:	c1 14       	cp	r12, r1

			#if !defined(INTERRUPT_CONTROL_ENDPOINT)
			USB_USBTask();
			#endif

			if (BytesProcessed != NULL)
     d94:	d1 04       	cpc	r13, r1
     d96:	49 f0       	breq	.+18     	; 0xdaa <Endpoint_Read_Stream_LE+0x64>
     d98:	f6 01       	movw	r30, r12
			{
				*BytesProcessed += BytesInTransfer;
     d9a:	80 81       	ld	r24, Z
     d9c:	91 81       	ldd	r25, Z+1	; 0x01
     d9e:	8a 0d       	add	r24, r10
     da0:	9b 1d       	adc	r25, r11
     da2:	91 83       	std	Z+1, r25	; 0x01
     da4:	80 83       	st	Z, r24
     da6:	15 e0       	ldi	r17, 0x05	; 5
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
     da8:	12 c0       	rjmp	.+36     	; 0xdce <Endpoint_Read_Stream_LE+0x88>
     daa:	67 d1       	rcall	.+718    	; 0x107a <Endpoint_WaitUntilReady>
			}

			if ((ErrorCode = Endpoint_WaitUntilReady()))
     dac:	88 23       	and	r24, r24
     dae:	51 f0       	breq	.+20     	; 0xdc4 <Endpoint_Read_Stream_LE+0x7e>
     db0:	0d c0       	rjmp	.+26     	; 0xdcc <Endpoint_Read_Stream_LE+0x86>
     db2:	80 91 f1 00 	lds	r24, 0x00F1
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
     db6:	89 93       	st	Y+, r24
     db8:	08 94       	sec
			  return ErrorCode;
		}
		else
		{
			TEMPLATE_TRANSFER_BYTE(DataStream);
     dba:	e1 08       	sbc	r14, r1
			TEMPLATE_BUFFER_MOVE(DataStream, 1);
			Length--;
     dbc:	f1 08       	sbc	r15, r1
     dbe:	08 94       	sec
     dc0:	a1 1c       	adc	r10, r1
			BytesInTransfer++;
     dc2:	b1 1c       	adc	r11, r1
     dc4:	e1 14       	cp	r14, r1
     dc6:	f1 04       	cpc	r15, r1
	{
		Length -= *BytesProcessed;
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
     dc8:	d9 f6       	brne	.-74     	; 0xd80 <Endpoint_Read_Stream_LE+0x3a>
     dca:	01 c0       	rjmp	.+2      	; 0xdce <Endpoint_Read_Stream_LE+0x88>
     dcc:	18 2f       	mov	r17, r24
     dce:	81 2f       	mov	r24, r17
			{
				*BytesProcessed += BytesInTransfer;
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
			}

			if ((ErrorCode = Endpoint_WaitUntilReady()))
     dd0:	df 91       	pop	r29
			BytesInTransfer++;
		}
	}

	return ENDPOINT_RWSTREAM_NoError;
}
     dd2:	cf 91       	pop	r28
     dd4:	1f 91       	pop	r17
     dd6:	ff 90       	pop	r15
     dd8:	ef 90       	pop	r14
     dda:	df 90       	pop	r13
     ddc:	cf 90       	pop	r12
     dde:	bf 90       	pop	r11
     de0:	af 90       	pop	r10
     de2:	08 95       	ret

00000de4 <Endpoint_Write_Control_Stream_LE>:
     de4:	20 91 8b 01 	lds	r18, 0x018B
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
     de8:	30 91 8c 01 	lds	r19, 0x018C
     dec:	26 17       	cp	r18, r22
     dee:	37 07       	cpc	r19, r23
     df0:	20 f4       	brcc	.+8      	; 0xdfa <Endpoint_Write_Control_Stream_LE+0x16>
     df2:	b9 01       	movw	r22, r18
     df4:	fc 01       	movw	r30, r24
     df6:	20 e0       	ldi	r18, 0x00	; 0
     df8:	37 c0       	rjmp	.+110    	; 0xe68 <Endpoint_Write_Control_Stream_LE+0x84>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
     dfa:	61 15       	cp	r22, r1
     dfc:	71 05       	cpc	r23, r1
     dfe:	d1 f7       	brne	.-12     	; 0xdf4 <Endpoint_Write_Control_Stream_LE+0x10>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     e00:	20 91 e8 00 	lds	r18, 0x00E8
     e04:	2e 77       	andi	r18, 0x7E	; 126
     e06:	20 93 e8 00 	sts	0x00E8, r18
     e0a:	f4 cf       	rjmp	.-24     	; 0xdf4 <Endpoint_Write_Control_Stream_LE+0x10>
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     e0c:	80 91 84 01 	lds	r24, 0x0184

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     e10:	88 23       	and	r24, r24
     e12:	09 f4       	brne	.+2      	; 0xe16 <Endpoint_Write_Control_Stream_LE+0x32>
     e14:	3f c0       	rjmp	.+126    	; 0xe94 <Endpoint_Write_Control_Stream_LE+0xb0>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     e16:	85 30       	cpi	r24, 0x05	; 5
     e18:	c9 f1       	breq	.+114    	; 0xe8c <Endpoint_Write_Control_Stream_LE+0xa8>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     e1a:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
     e1e:	83 fd       	sbrc	r24, 3
     e20:	37 c0       	rjmp	.+110    	; 0xe90 <Endpoint_Write_Control_Stream_LE+0xac>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     e22:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
     e26:	82 fd       	sbrc	r24, 2
     e28:	2b c0       	rjmp	.+86     	; 0xe80 <Endpoint_Write_Control_Stream_LE+0x9c>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     e2a:	80 91 e8 00 	lds	r24, 0x00E8
		  break;

		if (Endpoint_IsINReady())
     e2e:	80 ff       	sbrs	r24, 0
     e30:	1b c0       	rjmp	.+54     	; 0xe68 <Endpoint_Write_Control_Stream_LE+0x84>
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
     e32:	80 91 f2 00 	lds	r24, 0x00F2
     e36:	90 91 f3 00 	lds	r25, 0x00F3
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
     e3a:	06 c0       	rjmp	.+12     	; 0xe48 <Endpoint_Write_Control_Stream_LE+0x64>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
     e3c:	21 91       	ld	r18, Z+
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     e3e:	20 93 f1 00 	sts	0x00F1, r18
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
     e42:	61 50       	subi	r22, 0x01	; 1
     e44:	70 40       	sbci	r23, 0x00	; 0
				BytesInEndpoint++;
     e46:	01 96       	adiw	r24, 0x01	; 1

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
     e48:	61 15       	cp	r22, r1
     e4a:	71 05       	cpc	r23, r1
     e4c:	19 f0       	breq	.+6      	; 0xe54 <Endpoint_Write_Control_Stream_LE+0x70>
     e4e:	88 30       	cpi	r24, 0x08	; 8
     e50:	91 05       	cpc	r25, r1
     e52:	a0 f3       	brcs	.-24     	; 0xe3c <Endpoint_Write_Control_Stream_LE+0x58>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
     e54:	21 e0       	ldi	r18, 0x01	; 1
     e56:	88 30       	cpi	r24, 0x08	; 8
     e58:	91 05       	cpc	r25, r1
     e5a:	09 f0       	breq	.+2      	; 0xe5e <Endpoint_Write_Control_Stream_LE+0x7a>
     e5c:	20 e0       	ldi	r18, 0x00	; 0
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     e5e:	80 91 e8 00 	lds	r24, 0x00E8
     e62:	8e 77       	andi	r24, 0x7E	; 126
     e64:	80 93 e8 00 	sts	0x00E8, r24
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
     e68:	61 15       	cp	r22, r1
     e6a:	71 05       	cpc	r23, r1
     e6c:	79 f6       	brne	.-98     	; 0xe0c <Endpoint_Write_Control_Stream_LE+0x28>
     e6e:	22 23       	and	r18, r18
     e70:	69 f6       	brne	.-102    	; 0xe0c <Endpoint_Write_Control_Stream_LE+0x28>
     e72:	06 c0       	rjmp	.+12     	; 0xe80 <Endpoint_Write_Control_Stream_LE+0x9c>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     e74:	80 91 84 01 	lds	r24, 0x0184

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     e78:	88 23       	and	r24, r24
     e7a:	61 f0       	breq	.+24     	; 0xe94 <Endpoint_Write_Control_Stream_LE+0xb0>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     e7c:	85 30       	cpi	r24, 0x05	; 5
     e7e:	61 f0       	breq	.+24     	; 0xe98 <Endpoint_Write_Control_Stream_LE+0xb4>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     e80:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
     e84:	82 ff       	sbrs	r24, 2
     e86:	f6 cf       	rjmp	.-20     	; 0xe74 <Endpoint_Write_Control_Stream_LE+0x90>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
     e88:	80 e0       	ldi	r24, 0x00	; 0
     e8a:	08 95       	ret
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
     e8c:	83 e0       	ldi	r24, 0x03	; 3
     e8e:	08 95       	ret
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
     e90:	81 e0       	ldi	r24, 0x01	; 1
     e92:	08 95       	ret
	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
     e94:	82 e0       	ldi	r24, 0x02	; 2
     e96:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
     e98:	83 e0       	ldi	r24, 0x03	; 3
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
     e9a:	08 95       	ret

00000e9c <Endpoint_Write_Control_PStream_LE>:
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
     e9c:	20 91 8b 01 	lds	r18, 0x018B
     ea0:	30 91 8c 01 	lds	r19, 0x018C
     ea4:	26 17       	cp	r18, r22
     ea6:	37 07       	cpc	r19, r23
     ea8:	20 f4       	brcc	.+8      	; 0xeb2 <Endpoint_Write_Control_PStream_LE+0x16>
     eaa:	b9 01       	movw	r22, r18
     eac:	fc 01       	movw	r30, r24
     eae:	20 e0       	ldi	r18, 0x00	; 0
     eb0:	38 c0       	rjmp	.+112    	; 0xf22 <Endpoint_Write_Control_PStream_LE+0x86>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
     eb2:	61 15       	cp	r22, r1
     eb4:	71 05       	cpc	r23, r1
     eb6:	d1 f7       	brne	.-12     	; 0xeac <Endpoint_Write_Control_PStream_LE+0x10>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     eb8:	20 91 e8 00 	lds	r18, 0x00E8
     ebc:	2e 77       	andi	r18, 0x7E	; 126
     ebe:	20 93 e8 00 	sts	0x00E8, r18
     ec2:	f4 cf       	rjmp	.-24     	; 0xeac <Endpoint_Write_Control_PStream_LE+0x10>
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     ec4:	80 91 84 01 	lds	r24, 0x0184

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     ec8:	88 23       	and	r24, r24
     eca:	09 f4       	brne	.+2      	; 0xece <Endpoint_Write_Control_PStream_LE+0x32>
     ecc:	40 c0       	rjmp	.+128    	; 0xf4e <Endpoint_Write_Control_PStream_LE+0xb2>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     ece:	85 30       	cpi	r24, 0x05	; 5
     ed0:	d1 f1       	breq	.+116    	; 0xf46 <Endpoint_Write_Control_PStream_LE+0xaa>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     ed2:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
     ed6:	83 fd       	sbrc	r24, 3
     ed8:	38 c0       	rjmp	.+112    	; 0xf4a <Endpoint_Write_Control_PStream_LE+0xae>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     eda:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
     ede:	82 fd       	sbrc	r24, 2
     ee0:	2c c0       	rjmp	.+88     	; 0xf3a <Endpoint_Write_Control_PStream_LE+0x9e>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     ee2:	80 91 e8 00 	lds	r24, 0x00E8
		  break;

		if (Endpoint_IsINReady())
     ee6:	80 ff       	sbrs	r24, 0
     ee8:	1c c0       	rjmp	.+56     	; 0xf22 <Endpoint_Write_Control_PStream_LE+0x86>
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
     eea:	80 91 f2 00 	lds	r24, 0x00F2
     eee:	90 91 f3 00 	lds	r25, 0x00F3
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
     ef2:	07 c0       	rjmp	.+14     	; 0xf02 <Endpoint_Write_Control_PStream_LE+0x66>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
     ef4:	24 91       	lpm	r18, Z
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     ef6:	20 93 f1 00 	sts	0x00F1, r18
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
     efa:	31 96       	adiw	r30, 0x01	; 1
				Length--;
     efc:	61 50       	subi	r22, 0x01	; 1
     efe:	70 40       	sbci	r23, 0x00	; 0
				BytesInEndpoint++;
     f00:	01 96       	adiw	r24, 0x01	; 1

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
     f02:	61 15       	cp	r22, r1
     f04:	71 05       	cpc	r23, r1
     f06:	19 f0       	breq	.+6      	; 0xf0e <Endpoint_Write_Control_PStream_LE+0x72>
     f08:	88 30       	cpi	r24, 0x08	; 8
     f0a:	91 05       	cpc	r25, r1
     f0c:	98 f3       	brcs	.-26     	; 0xef4 <Endpoint_Write_Control_PStream_LE+0x58>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
     f0e:	21 e0       	ldi	r18, 0x01	; 1
     f10:	88 30       	cpi	r24, 0x08	; 8
     f12:	91 05       	cpc	r25, r1
     f14:	09 f0       	breq	.+2      	; 0xf18 <Endpoint_Write_Control_PStream_LE+0x7c>
     f16:	20 e0       	ldi	r18, 0x00	; 0
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     f18:	80 91 e8 00 	lds	r24, 0x00E8
     f1c:	8e 77       	andi	r24, 0x7E	; 126
     f1e:	80 93 e8 00 	sts	0x00E8, r24
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
     f22:	61 15       	cp	r22, r1
     f24:	71 05       	cpc	r23, r1
     f26:	71 f6       	brne	.-100    	; 0xec4 <Endpoint_Write_Control_PStream_LE+0x28>
     f28:	22 23       	and	r18, r18
     f2a:	61 f6       	brne	.-104    	; 0xec4 <Endpoint_Write_Control_PStream_LE+0x28>
     f2c:	06 c0       	rjmp	.+12     	; 0xf3a <Endpoint_Write_Control_PStream_LE+0x9e>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     f2e:	80 91 84 01 	lds	r24, 0x0184

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     f32:	88 23       	and	r24, r24
     f34:	61 f0       	breq	.+24     	; 0xf4e <Endpoint_Write_Control_PStream_LE+0xb2>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     f36:	85 30       	cpi	r24, 0x05	; 5
     f38:	61 f0       	breq	.+24     	; 0xf52 <Endpoint_Write_Control_PStream_LE+0xb6>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     f3a:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
     f3e:	82 ff       	sbrs	r24, 2
     f40:	f6 cf       	rjmp	.-20     	; 0xf2e <Endpoint_Write_Control_PStream_LE+0x92>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
     f42:	80 e0       	ldi	r24, 0x00	; 0
     f44:	08 95       	ret
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
     f46:	83 e0       	ldi	r24, 0x03	; 3
     f48:	08 95       	ret
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
     f4a:	81 e0       	ldi	r24, 0x01	; 1
     f4c:	08 95       	ret
	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
     f4e:	82 e0       	ldi	r24, 0x02	; 2
     f50:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
     f52:	83 e0       	ldi	r24, 0x03	; 3
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
     f54:	08 95       	ret

00000f56 <Endpoint_ConfigureEndpoint_Prv>:
	UECFG0X = UECFG0XData;
	UECFG1X = UECFG1XData;

	return Endpoint_IsConfigured();
#else
	for (uint8_t EPNum = Number; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
     f56:	98 2f       	mov	r25, r24
     f58:	2a c0       	rjmp	.+84     	; 0xfae <Endpoint_ConfigureEndpoint_Prv+0x58>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     f5a:	90 93 e9 00 	sts	0x00E9, r25
		uint8_t UECFG1XTemp;
		uint8_t UEIENXTemp;

		Endpoint_SelectEndpoint(EPNum);

		if (EPNum == Number)
     f5e:	98 17       	cp	r25, r24
     f60:	39 f0       	breq	.+14     	; 0xf70 <Endpoint_ConfigureEndpoint_Prv+0x1a>
			UECFG1XTemp = UECFG1XData;
			UEIENXTemp  = 0;
		}
		else
		{
			UECFG0XTemp = UECFG0X;
     f62:	70 91 ec 00 	lds	r23, 0x00EC
			UECFG1XTemp = UECFG1X;
     f66:	20 91 ed 00 	lds	r18, 0x00ED
			UEIENXTemp  = UEIENX;
     f6a:	50 91 f0 00 	lds	r21, 0x00F0
     f6e:	03 c0       	rjmp	.+6      	; 0xf76 <Endpoint_ConfigureEndpoint_Prv+0x20>
		Endpoint_SelectEndpoint(EPNum);

		if (EPNum == Number)
		{
			UECFG0XTemp = UECFG0XData;
			UECFG1XTemp = UECFG1XData;
     f70:	24 2f       	mov	r18, r20

		Endpoint_SelectEndpoint(EPNum);

		if (EPNum == Number)
		{
			UECFG0XTemp = UECFG0XData;
     f72:	76 2f       	mov	r23, r22
			UECFG1XTemp = UECFG1XData;
			UEIENXTemp  = 0;
     f74:	50 e0       	ldi	r21, 0x00	; 0
			UECFG0XTemp = UECFG0X;
			UECFG1XTemp = UECFG1X;
			UEIENXTemp  = UEIENX;
		}

		if (!(UECFG1XTemp & (1 << ALLOC)))
     f76:	21 ff       	sbrs	r18, 1
     f78:	19 c0       	rjmp	.+50     	; 0xfac <Endpoint_ConfigureEndpoint_Prv+0x56>
			 *  to and from a host.
			 */
			static inline void Endpoint_DisableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_DisableEndpoint(void)
			{
				UECONX &= ~(1 << EPEN);
     f7a:	30 91 eb 00 	lds	r19, 0x00EB
     f7e:	3e 7f       	andi	r19, 0xFE	; 254
     f80:	30 93 eb 00 	sts	0x00EB, r19
		  continue;

		Endpoint_DisableEndpoint();
		UECFG1X &= ~(1 << ALLOC);
     f84:	30 91 ed 00 	lds	r19, 0x00ED
     f88:	3d 7f       	andi	r19, 0xFD	; 253
     f8a:	30 93 ed 00 	sts	0x00ED, r19
			 *  \note Endpoints must first be configured properly via \ref Endpoint_ConfigureEndpoint().
			 */
			static inline void Endpoint_EnableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_EnableEndpoint(void)
			{
				UECONX |= (1 << EPEN);
     f8e:	30 91 eb 00 	lds	r19, 0x00EB
     f92:	31 60       	ori	r19, 0x01	; 1
     f94:	30 93 eb 00 	sts	0x00EB, r19

		Endpoint_EnableEndpoint();
		UECFG0X = UECFG0XTemp;
     f98:	70 93 ec 00 	sts	0x00EC, r23
		UECFG1X = UECFG1XTemp;
     f9c:	20 93 ed 00 	sts	0x00ED, r18
		UEIENX  = UEIENXTemp;
     fa0:	50 93 f0 00 	sts	0x00F0, r21
			 *  \return Boolean \c true if the currently selected endpoint has been configured, \c false otherwise.
			 */
			static inline bool Endpoint_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsConfigured(void)
			{
				return ((UESTA0X & (1 << CFGOK)) ? true : false);
     fa4:	20 91 ee 00 	lds	r18, 0x00EE

		if (!(Endpoint_IsConfigured()))
     fa8:	27 ff       	sbrs	r18, 7
     faa:	08 c0       	rjmp	.+16     	; 0xfbc <Endpoint_ConfigureEndpoint_Prv+0x66>
	UECFG0X = UECFG0XData;
	UECFG1X = UECFG1XData;

	return Endpoint_IsConfigured();
#else
	for (uint8_t EPNum = Number; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
     fac:	9f 5f       	subi	r25, 0xFF	; 255
     fae:	97 30       	cpi	r25, 0x07	; 7
     fb0:	a0 f2       	brcs	.-88     	; 0xf5a <Endpoint_ConfigureEndpoint_Prv+0x4>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     fb2:	8f 70       	andi	r24, 0x0F	; 15
     fb4:	80 93 e9 00 	sts	0x00E9, r24
		if (!(Endpoint_IsConfigured()))
		  return false;
	}

	Endpoint_SelectEndpoint(Number);
	return true;
     fb8:	81 e0       	ldi	r24, 0x01	; 1
     fba:	08 95       	ret
		UECFG0X = UECFG0XTemp;
		UECFG1X = UECFG1XTemp;
		UEIENX  = UEIENXTemp;

		if (!(Endpoint_IsConfigured()))
		  return false;
     fbc:	80 e0       	ldi	r24, 0x00	; 0
	}

	Endpoint_SelectEndpoint(Number);
	return true;
#endif
}
     fbe:	08 95       	ret

00000fc0 <Endpoint_ConfigureEndpointTable>:
uint8_t USB_Device_ControlEndpointSize = ENDPOINT_CONTROLEP_DEFAULT_SIZE;
#endif

bool Endpoint_ConfigureEndpointTable(const USB_Endpoint_Table_t* const Table,
                                     const uint8_t Entries)
{
     fc0:	0f 93       	push	r16
     fc2:	1f 93       	push	r17
     fc4:	cf 93       	push	r28
     fc6:	df 93       	push	r29
     fc8:	16 2f       	mov	r17, r22
	{
		if (!(Table[i].Address))
		  continue;
	
		if (!(Endpoint_ConfigureEndpoint(Table[i].Address, Table[i].Type, Table[i].Size, Table[i].Banks)))
		  return false;
     fca:	ec 01       	movw	r28, r24
#endif

bool Endpoint_ConfigureEndpointTable(const USB_Endpoint_Table_t* const Table,
                                     const uint8_t Entries)
{
	for (uint8_t i = 0; i < Entries; i++)
     fcc:	00 e0       	ldi	r16, 0x00	; 0
     fce:	2a c0       	rjmp	.+84     	; 0x1024 <Endpoint_ConfigureEndpointTable+0x64>
	{
		if (!(Table[i].Address))
     fd0:	98 81       	ld	r25, Y
     fd2:	99 23       	and	r25, r25
     fd4:	29 f1       	breq	.+74     	; 0x1020 <Endpoint_ConfigureEndpointTable+0x60>
		  continue;
	
		if (!(Endpoint_ConfigureEndpoint(Table[i].Address, Table[i].Type, Table[i].Size, Table[i].Banks)))
     fd6:	6b 81       	ldd	r22, Y+3	; 0x03
     fd8:	e9 81       	ldd	r30, Y+1	; 0x01
     fda:	fa 81       	ldd	r31, Y+2	; 0x02
     fdc:	2c 81       	ldd	r18, Y+4	; 0x04
			static inline bool Endpoint_ConfigureEndpoint(const uint8_t Address,
			                                              const uint8_t Type,
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);
     fde:	89 2f       	mov	r24, r25
     fe0:	8f 70       	andi	r24, 0x0F	; 15

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
     fe2:	87 30       	cpi	r24, 0x07	; 7
     fe4:	18 f5       	brcc	.+70     	; 0x102c <Endpoint_ConfigureEndpointTable+0x6c>
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
				                                      ((Type << EPTYPE0) | ((Address & ENDPOINT_DIR_IN) ? (1 << EPDIR) : 0)),
     fe6:	62 95       	swap	r22
     fe8:	66 0f       	add	r22, r22
     fea:	66 0f       	add	r22, r22
     fec:	60 7c       	andi	r22, 0xC0	; 192
     fee:	99 1f       	adc	r25, r25
     ff0:	99 27       	eor	r25, r25
     ff2:	99 1f       	adc	r25, r25
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
     ff4:	69 2b       	or	r22, r25
     ff6:	22 30       	cpi	r18, 0x02	; 2
     ff8:	10 f0       	brcs	.+4      	; 0xffe <Endpoint_ConfigureEndpointTable+0x3e>
     ffa:	96 e0       	ldi	r25, 0x06	; 6
     ffc:	01 c0       	rjmp	.+2      	; 0x1000 <Endpoint_ConfigureEndpointTable+0x40>
     ffe:	92 e0       	ldi	r25, 0x02	; 2
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes) ATTR_WARN_UNUSED_RESULT ATTR_CONST
			                                                                       ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;
    1000:	28 e0       	ldi	r18, 0x08	; 8
    1002:	30 e0       	ldi	r19, 0x00	; 0
		/* Inline Functions: */
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes) ATTR_WARN_UNUSED_RESULT ATTR_CONST
			                                                                       ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
    1004:	40 e0       	ldi	r20, 0x00	; 0
    1006:	03 c0       	rjmp	.+6      	; 0x100e <Endpoint_ConfigureEndpointTable+0x4e>
				uint16_t CheckBytes = 8;

				while (CheckBytes < Bytes)
				{
					MaskVal++;
    1008:	4f 5f       	subi	r20, 0xFF	; 255
					CheckBytes <<= 1;
    100a:	22 0f       	add	r18, r18
    100c:	33 1f       	adc	r19, r19
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while (CheckBytes < Bytes)
    100e:	2e 17       	cp	r18, r30
    1010:	3f 07       	cpc	r19, r31
    1012:	d0 f3       	brcs	.-12     	; 0x1008 <Endpoint_ConfigureEndpointTable+0x48>
				{
					MaskVal++;
					CheckBytes <<= 1;
				}

				return (MaskVal << EPSIZE0);
    1014:	42 95       	swap	r20
    1016:	40 7f       	andi	r20, 0xF0	; 240
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
    1018:	49 2b       	or	r20, r25
    101a:	9d df       	rcall	.-198    	; 0xf56 <Endpoint_ConfigureEndpoint_Prv>
    101c:	88 23       	and	r24, r24
    101e:	31 f0       	breq	.+12     	; 0x102c <Endpoint_ConfigureEndpointTable+0x6c>
    1020:	0f 5f       	subi	r16, 0xFF	; 255
#endif

bool Endpoint_ConfigureEndpointTable(const USB_Endpoint_Table_t* const Table,
                                     const uint8_t Entries)
{
	for (uint8_t i = 0; i < Entries; i++)
    1022:	25 96       	adiw	r28, 0x05	; 5
    1024:	01 17       	cp	r16, r17
    1026:	a1 f6       	brne	.-88     	; 0xfd0 <Endpoint_ConfigureEndpointTable+0x10>
    1028:	81 e0       	ldi	r24, 0x01	; 1
	
		if (!(Endpoint_ConfigureEndpoint(Table[i].Address, Table[i].Type, Table[i].Size, Table[i].Banks)))
		  return false;
	}
	
	return true;
    102a:	01 c0       	rjmp	.+2      	; 0x102e <Endpoint_ConfigureEndpointTable+0x6e>
    102c:	80 e0       	ldi	r24, 0x00	; 0
	{
		if (!(Table[i].Address))
		  continue;
	
		if (!(Endpoint_ConfigureEndpoint(Table[i].Address, Table[i].Type, Table[i].Size, Table[i].Banks)))
		  return false;
    102e:	df 91       	pop	r29
	}
	
	return true;
}
    1030:	cf 91       	pop	r28
    1032:	1f 91       	pop	r17
    1034:	0f 91       	pop	r16
    1036:	08 95       	ret

00001038 <Endpoint_ClearStatusStage>:
    1038:	80 91 85 01 	lds	r24, 0x0185
	}
}

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
    103c:	87 ff       	sbrs	r24, 7
    103e:	13 c0       	rjmp	.+38     	; 0x1066 <Endpoint_ClearStatusStage+0x2e>
    1040:	04 c0       	rjmp	.+8      	; 0x104a <Endpoint_ClearStatusStage+0x12>
	{
		while (!(Endpoint_IsOUTReceived()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
    1042:	80 91 84 01 	lds	r24, 0x0184
    1046:	88 23       	and	r24, r24
    1048:	b9 f0       	breq	.+46     	; 0x1078 <Endpoint_ClearStatusStage+0x40>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    104a:	80 91 e8 00 	lds	r24, 0x00E8

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
	{
		while (!(Endpoint_IsOUTReceived()))
    104e:	82 ff       	sbrs	r24, 2
    1050:	f8 cf       	rjmp	.-16     	; 0x1042 <Endpoint_ClearStatusStage+0xa>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    1052:	80 91 e8 00 	lds	r24, 0x00E8
    1056:	8b 77       	andi	r24, 0x7B	; 123
    1058:	80 93 e8 00 	sts	0x00E8, r24
    105c:	08 95       	ret
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
    105e:	80 91 84 01 	lds	r24, 0x0184
    1062:	88 23       	and	r24, r24
    1064:	49 f0       	breq	.+18     	; 0x1078 <Endpoint_ClearStatusStage+0x40>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1066:	80 91 e8 00 	lds	r24, 0x00E8

		Endpoint_ClearOUT();
	}
	else
	{
		while (!(Endpoint_IsINReady()))
    106a:	80 ff       	sbrs	r24, 0
    106c:	f8 cf       	rjmp	.-16     	; 0x105e <Endpoint_ClearStatusStage+0x26>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    106e:	80 91 e8 00 	lds	r24, 0x00E8
    1072:	8e 77       	andi	r24, 0x7E	; 126
    1074:	80 93 e8 00 	sts	0x00E8, r24
    1078:	08 95       	ret

0000107a <Endpoint_WaitUntilReady>:
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
    107a:	80 91 e4 00 	lds	r24, 0x00E4
    107e:	90 91 e5 00 	lds	r25, 0x00E5
    1082:	45 e6       	ldi	r20, 0x65	; 101
    1084:	01 c0       	rjmp	.+2      	; 0x1088 <Endpoint_WaitUntilReady+0xe>
    1086:	c9 01       	movw	r24, r18
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    1088:	20 91 ec 00 	lds	r18, 0x00EC
    108c:	20 ff       	sbrs	r18, 0
    108e:	23 c0       	rjmp	.+70     	; 0x10d6 <Endpoint_WaitUntilReady+0x5c>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1090:	20 91 e8 00 	lds	r18, 0x00E8

	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
    1094:	20 fd       	sbrc	r18, 0
    1096:	15 c0       	rjmp	.+42     	; 0x10c2 <Endpoint_WaitUntilReady+0x48>
		{
			if (Endpoint_IsOUTReceived())
			  return ENDPOINT_READYWAIT_NoError;
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    1098:	20 91 84 01 	lds	r18, 0x0184

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    109c:	22 23       	and	r18, r18
    109e:	99 f0       	breq	.+38     	; 0x10c6 <Endpoint_WaitUntilReady+0x4c>
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    10a0:	25 30       	cpi	r18, 0x05	; 5
    10a2:	99 f0       	breq	.+38     	; 0x10ca <Endpoint_WaitUntilReady+0x50>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    10a4:	20 91 eb 00 	lds	r18, 0x00EB
		  return ENDPOINT_READYWAIT_BusSuspended;
		else if (Endpoint_IsStalled())
    10a8:	25 fd       	sbrc	r18, 5
    10aa:	11 c0       	rjmp	.+34     	; 0x10ce <Endpoint_WaitUntilReady+0x54>
    10ac:	20 91 e4 00 	lds	r18, 0x00E4
    10b0:	30 91 e5 00 	lds	r19, 0x00E5
		  return ENDPOINT_READYWAIT_EndpointStalled;

		uint16_t CurrentFrameNumber = USB_Device_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
    10b4:	28 17       	cp	r18, r24
    10b6:	39 07       	cpc	r19, r25
    10b8:	39 f3       	breq	.-50     	; 0x1088 <Endpoint_WaitUntilReady+0xe>
    10ba:	41 50       	subi	r20, 0x01	; 1
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
    10bc:	21 f7       	brne	.-56     	; 0x1086 <Endpoint_WaitUntilReady+0xc>
			  return ENDPOINT_READYWAIT_Timeout;
    10be:	84 e0       	ldi	r24, 0x04	; 4
    10c0:	08 95       	ret
	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
    10c2:	80 e0       	ldi	r24, 0x00	; 0
    10c4:	08 95       	ret
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
    10c6:	82 e0       	ldi	r24, 0x02	; 2
    10c8:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_READYWAIT_BusSuspended;
    10ca:	83 e0       	ldi	r24, 0x03	; 3
    10cc:	08 95       	ret
		else if (Endpoint_IsStalled())
		  return ENDPOINT_READYWAIT_EndpointStalled;
    10ce:	81 e0       	ldi	r24, 0x01	; 1
    10d0:	08 95       	ret
			  return ENDPOINT_READYWAIT_NoError;
		}
		else
		{
			if (Endpoint_IsOUTReceived())
			  return ENDPOINT_READYWAIT_NoError;
    10d2:	80 e0       	ldi	r24, 0x00	; 0

			if (!(TimeoutMSRem--))
			  return ENDPOINT_READYWAIT_Timeout;
		}
	}
}
    10d4:	08 95       	ret
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    10d6:	20 91 e8 00 	lds	r18, 0x00E8
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
		}
		else
		{
			if (Endpoint_IsOUTReceived())
    10da:	22 ff       	sbrs	r18, 2
    10dc:	dd cf       	rjmp	.-70     	; 0x1098 <Endpoint_WaitUntilReady+0x1e>
    10de:	f9 cf       	rjmp	.-14     	; 0x10d2 <Endpoint_WaitUntilReady+0x58>

000010e0 <USB_ResetInterface>:

	USB_IsInitialized = false;
}

void USB_ResetInterface(void)
{
    10e0:	0f 93       	push	r16
    10e2:	1f 93       	push	r17
    10e4:	cf 93       	push	r28
    10e6:	df 93       	push	r29
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
    10e8:	4e d0       	rcall	.+156    	; 0x1186 <USB_INT_DisableAllInterrupts>
    10ea:	55 d0       	rcall	.+170    	; 0x1196 <USB_INT_ClearAllInterrupts>
	USB_INT_ClearAllInterrupts();
    10ec:	c8 ed       	ldi	r28, 0xD8	; 216
    10ee:	d0 e0       	ldi	r29, 0x00	; 0
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
    10f0:	88 81       	ld	r24, Y
    10f2:	8f 77       	andi	r24, 0x7F	; 127
    10f4:	88 83       	st	Y, r24
    10f6:	88 81       	ld	r24, Y
    10f8:	80 68       	ori	r24, 0x80	; 128
				USBCON |=  (1 << USBE);
    10fa:	88 83       	st	Y, r24
    10fc:	88 81       	ld	r24, Y
    10fe:	8f 7d       	andi	r24, 0xDF	; 223
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
    1100:	88 83       	st	Y, r24
    1102:	e7 ed       	ldi	r30, 0xD7	; 215
    1104:	f0 e0       	ldi	r31, 0x00	; 0

	if (USB_CurrentMode == USB_MODE_Device)
	{
		#if defined(USB_CAN_BE_DEVICE)
		#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
		UHWCON |=  (1 << UIMOD);
    1106:	80 81       	ld	r24, Z
    1108:	80 68       	ori	r24, 0x80	; 128
    110a:	80 83       	st	Z, r24
    110c:	19 bc       	out	0x29, r1	; 41
    110e:	10 92 84 01 	sts	0x0184, r1
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState                 = DEVICE_STATE_Unattached;
    1112:	10 92 80 01 	sts	0x0180, r1
	USB_Device_ConfigurationNumber  = 0;
    1116:	10 92 82 01 	sts	0x0182, r1

	#if !defined(NO_DEVICE_REMOTE_WAKEUP)
	USB_Device_RemoteWakeupEnabled  = false;
    111a:	10 92 81 01 	sts	0x0181, r1
	#endif

	#if !defined(NO_DEVICE_SELF_POWER)
	USB_Device_CurrentlySelfPowered = false;
    111e:	00 ee       	ldi	r16, 0xE0	; 224
    1120:	10 e0       	ldi	r17, 0x00	; 0
			}

			static inline void USB_Device_SetFullSpeed(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetFullSpeed(void)
			{
				UDCON &= ~(1 << LSM);
    1122:	f8 01       	movw	r30, r16
    1124:	80 81       	ld	r24, Z
    1126:	8b 7f       	andi	r24, 0xFB	; 251
    1128:	80 83       	st	Z, r24
    112a:	88 81       	ld	r24, Y
    112c:	81 60       	ori	r24, 0x01	; 1
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBCON |= (1 << VBUSTE);
    112e:	88 83       	st	Y, r24
    1130:	80 e0       	ldi	r24, 0x00	; 0
    1132:	60 e0       	ldi	r22, 0x00	; 0
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
    1134:	42 e0       	ldi	r20, 0x02	; 2
    1136:	0f df       	rcall	.-482    	; 0xf56 <Endpoint_ConfigureEndpoint_Prv>
    1138:	e1 ee       	ldi	r30, 0xE1	; 225
    113a:	f0 e0       	ldi	r31, 0x00	; 0
    113c:	80 81       	ld	r24, Z
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
    113e:	8e 7f       	andi	r24, 0xFE	; 254
    1140:	80 83       	st	Z, r24
    1142:	e2 ee       	ldi	r30, 0xE2	; 226
    1144:	f0 e0       	ldi	r31, 0x00	; 0
    1146:	80 81       	ld	r24, Z
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
    1148:	81 60       	ori	r24, 0x01	; 1
    114a:	80 83       	st	Z, r24
    114c:	80 81       	ld	r24, Z
    114e:	88 60       	ori	r24, 0x08	; 8
    1150:	80 83       	st	Z, r24
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
    1152:	f8 01       	movw	r30, r16
    1154:	80 81       	ld	r24, Z
    1156:	8e 7f       	andi	r24, 0xFE	; 254
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
    1158:	80 83       	st	Z, r24
    115a:	88 81       	ld	r24, Y
    115c:	80 61       	ori	r24, 0x10	; 16
    115e:	88 83       	st	Y, r24

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON |=  (1 << OTGPADE);
    1160:	df 91       	pop	r29
    1162:	cf 91       	pop	r28
    1164:	1f 91       	pop	r17
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
    1166:	0f 91       	pop	r16
    1168:	08 95       	ret

0000116a <USB_Init>:
    116a:	e8 ed       	ldi	r30, 0xD8	; 216
    116c:	f0 e0       	ldi	r31, 0x00	; 0
    116e:	80 81       	ld	r24, Z
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON &= ~(1 << OTGPADE);
    1170:	8f 7e       	andi	r24, 0xEF	; 239
    1172:	80 83       	st	Z, r24

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON |=  (1 << UVREGE);
    1174:	e7 ed       	ldi	r30, 0xD7	; 215
    1176:	f0 e0       	ldi	r31, 0x00	; 0
    1178:	80 81       	ld	r24, Z
    117a:	81 60       	ori	r24, 0x01	; 1
    117c:	80 83       	st	Z, r24
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
    117e:	81 e0       	ldi	r24, 0x01	; 1
    1180:	80 93 83 01 	sts	0x0183, r24

	USB_ResetInterface();
    1184:	ad cf       	rjmp	.-166    	; 0x10e0 <USB_ResetInterface>

00001186 <USB_INT_DisableAllInterrupts>:
#include "../USBInterrupt.h"

void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
    1186:	e8 ed       	ldi	r30, 0xD8	; 216
    1188:	f0 e0       	ldi	r31, 0x00	; 0
    118a:	80 81       	ld	r24, Z
    118c:	8c 7f       	andi	r24, 0xFC	; 252
    118e:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
    1190:	10 92 e2 00 	sts	0x00E2, r1
	#endif
}
    1194:	08 95       	ret

00001196 <USB_INT_ClearAllInterrupts>:

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
    1196:	10 92 da 00 	sts	0x00DA, r1
	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
    119a:	10 92 e1 00 	sts	0x00E1, r1
	#endif
}
    119e:	08 95       	ret

000011a0 <__vector_10>:

ISR(USB_GEN_vect, ISR_BLOCK)
{
    11a0:	1f 92       	push	r1
    11a2:	0f 92       	push	r0
    11a4:	0f b6       	in	r0, 0x3f	; 63
    11a6:	0f 92       	push	r0
    11a8:	0b b6       	in	r0, 0x3b	; 59
    11aa:	0f 92       	push	r0
    11ac:	11 24       	eor	r1, r1
    11ae:	2f 93       	push	r18
    11b0:	3f 93       	push	r19
    11b2:	4f 93       	push	r20
    11b4:	5f 93       	push	r21
    11b6:	6f 93       	push	r22
    11b8:	7f 93       	push	r23
    11ba:	8f 93       	push	r24
    11bc:	9f 93       	push	r25
    11be:	af 93       	push	r26
    11c0:	bf 93       	push	r27
    11c2:	ef 93       	push	r30
    11c4:	ff 93       	push	r31
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
					case USB_INT_SOFI:
						return (UDINT  & (1 << SOFI));
    11c6:	80 91 e1 00 	lds	r24, 0x00E1
	#if defined(USB_CAN_BE_DEVICE)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
    11ca:	82 ff       	sbrs	r24, 2
    11cc:	0a c0       	rjmp	.+20     	; 0x11e2 <__vector_10+0x42>
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
					case USB_INT_SOFI:
						return (UDIEN  & (1 << SOFE));
    11ce:	80 91 e2 00 	lds	r24, 0x00E2
    11d2:	82 ff       	sbrs	r24, 2
    11d4:	06 c0       	rjmp	.+12     	; 0x11e2 <__vector_10+0x42>
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
						break;
					case USB_INT_SOFI:
						UDINT  &= ~(1 << SOFI);
    11d6:	80 91 e1 00 	lds	r24, 0x00E1
    11da:	8b 7f       	andi	r24, 0xFB	; 251
    11dc:	80 93 e1 00 	sts	0x00E1, r24
	{
		USB_INT_Clear(USB_INT_SOFI);

		EVENT_USB_Device_StartOfFrame();
    11e0:	56 d2       	rcall	.+1196   	; 0x168e <USB_Event_Stub>
    11e2:	80 91 da 00 	lds	r24, 0x00DA
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBINT & (1 << VBUSTI));
    11e6:	80 ff       	sbrs	r24, 0
	}
	#endif

	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	if (USB_INT_HasOccurred(USB_INT_VBUSTI) && USB_INT_IsEnabled(USB_INT_VBUSTI))
    11e8:	1f c0       	rjmp	.+62     	; 0x1228 <__vector_10+0x88>
    11ea:	80 91 d8 00 	lds	r24, 0x00D8
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBCON & (1 << VBUSTE));
    11ee:	80 ff       	sbrs	r24, 0
    11f0:	1b c0       	rjmp	.+54     	; 0x1228 <__vector_10+0x88>
    11f2:	80 91 da 00 	lds	r24, 0x00DA
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBINT &= ~(1 << VBUSTI);
    11f6:	8e 7f       	andi	r24, 0xFE	; 254
    11f8:	80 93 da 00 	sts	0x00DA, r24
    11fc:	80 91 d9 00 	lds	r24, 0x00D9
				 *  \return Boolean \c true if the VBUS line is currently detecting power from a host, \c false otherwise.
				 */
				static inline bool USB_VBUS_GetStatus(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
				static inline bool USB_VBUS_GetStatus(void)
				{
					return ((USBSTA & (1 << VBUS)) ? true : false);
    1200:	80 ff       	sbrs	r24, 0
	{
		USB_INT_Clear(USB_INT_VBUSTI);

		if (USB_VBUS_GetStatus())
    1202:	0d c0       	rjmp	.+26     	; 0x121e <__vector_10+0x7e>
    1204:	8c e0       	ldi	r24, 0x0C	; 12

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
    1206:	89 bd       	out	0x29, r24	; 41
    1208:	8e e0       	ldi	r24, 0x0E	; 14
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    120a:	89 bd       	out	0x29, r24	; 41
    120c:	09 b4       	in	r0, 0x29	; 41
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			{
				USB_PLL_On();
				while (!(USB_PLL_IsReady()));
    120e:	00 fe       	sbrs	r0, 0
    1210:	fd cf       	rjmp	.-6      	; 0x120c <__vector_10+0x6c>
    1212:	81 e0       	ldi	r24, 0x01	; 1
			}

			USB_DeviceState = DEVICE_STATE_Powered;
    1214:	80 93 84 01 	sts	0x0184, r24
    1218:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <EVENT_USB_Device_Connect>
			EVENT_USB_Device_Connect();
    121c:	05 c0       	rjmp	.+10     	; 0x1228 <__vector_10+0x88>
    121e:	19 bc       	out	0x29, r1	; 41
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    1220:	10 92 84 01 	sts	0x0184, r1
		else
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			  USB_PLL_Off();

			USB_DeviceState = DEVICE_STATE_Unattached;
    1224:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <EVENT_USB_Device_Disconnect>
			EVENT_USB_Device_Disconnect();
    1228:	80 91 e1 00 	lds	r24, 0x00E1
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
    122c:	80 ff       	sbrs	r24, 0
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
    122e:	18 c0       	rjmp	.+48     	; 0x1260 <__vector_10+0xc0>
    1230:	80 91 e2 00 	lds	r24, 0x00E2
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
    1234:	80 ff       	sbrs	r24, 0
    1236:	14 c0       	rjmp	.+40     	; 0x1260 <__vector_10+0xc0>
    1238:	80 91 e2 00 	lds	r24, 0x00E2
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
    123c:	8e 7f       	andi	r24, 0xFE	; 254
    123e:	80 93 e2 00 	sts	0x00E2, r24
    1242:	80 91 e2 00 	lds	r24, 0x00E2
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
    1246:	80 61       	ori	r24, 0x10	; 16
    1248:	80 93 e2 00 	sts	0x00E2, r24
    124c:	80 91 d8 00 	lds	r24, 0x00D8
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON |=  (1 << FRZCLK);
    1250:	80 62       	ori	r24, 0x20	; 32
    1252:	80 93 d8 00 	sts	0x00D8, r24
    1256:	19 bc       	out	0x29, r1	; 41
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    1258:	85 e0       	ldi	r24, 0x05	; 5

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
		EVENT_USB_Device_Disconnect();
		#else
		USB_DeviceState = DEVICE_STATE_Suspended;
    125a:	80 93 84 01 	sts	0x0184, r24
    125e:	17 d2       	rcall	.+1070   	; 0x168e <USB_Event_Stub>
		EVENT_USB_Device_Suspend();
    1260:	80 91 e1 00 	lds	r24, 0x00E1
					case USB_INT_IDTI:
						return (USBINT & (1 << IDTI));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
    1264:	84 ff       	sbrs	r24, 4
    1266:	2d c0       	rjmp	.+90     	; 0x12c2 <__vector_10+0x122>
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
    1268:	80 91 e2 00 	lds	r24, 0x00E2
					case USB_INT_IDTI:
						return (USBCON & (1 << IDTE));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
    126c:	84 ff       	sbrs	r24, 4
    126e:	29 c0       	rjmp	.+82     	; 0x12c2 <__vector_10+0x122>
    1270:	8c e0       	ldi	r24, 0x0C	; 12
    1272:	89 bd       	out	0x29, r24	; 41

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
    1274:	8e e0       	ldi	r24, 0x0E	; 14
    1276:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    1278:	09 b4       	in	r0, 0x29	; 41
    127a:	00 fe       	sbrs	r0, 0
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
    127c:	fd cf       	rjmp	.-6      	; 0x1278 <__vector_10+0xd8>
    127e:	80 91 d8 00 	lds	r24, 0x00D8
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
    1282:	8f 7d       	andi	r24, 0xDF	; 223
    1284:	80 93 d8 00 	sts	0x00D8, r24
    1288:	80 91 e1 00 	lds	r24, 0x00E1
						USBINT &= ~(1 << IDTI);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
    128c:	8f 7e       	andi	r24, 0xEF	; 239
    128e:	80 93 e1 00 	sts	0x00E1, r24
    1292:	80 91 e2 00 	lds	r24, 0x00E2
						USBCON &= ~(1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
    1296:	8f 7e       	andi	r24, 0xEF	; 239
    1298:	80 93 e2 00 	sts	0x00E2, r24
    129c:	80 91 e2 00 	lds	r24, 0x00E2
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
    12a0:	81 60       	ori	r24, 0x01	; 1
    12a2:	80 93 e2 00 	sts	0x00E2, r24
    12a6:	80 91 80 01 	lds	r24, 0x0180
		USB_INT_Clear(USB_INT_WAKEUPI);

		USB_INT_Disable(USB_INT_WAKEUPI);
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_Device_ConfigurationNumber)
    12aa:	88 23       	and	r24, r24
    12ac:	21 f4       	brne	.+8      	; 0x12b6 <__vector_10+0x116>
    12ae:	80 91 e3 00 	lds	r24, 0x00E3
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
    12b2:	87 ff       	sbrs	r24, 7
    12b4:	02 c0       	rjmp	.+4      	; 0x12ba <__vector_10+0x11a>
		  USB_DeviceState = DEVICE_STATE_Configured;
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
    12b6:	84 e0       	ldi	r24, 0x04	; 4
    12b8:	01 c0       	rjmp	.+2      	; 0x12bc <__vector_10+0x11c>
    12ba:	81 e0       	ldi	r24, 0x01	; 1
    12bc:	80 93 84 01 	sts	0x0184, r24
    12c0:	e6 d1       	rcall	.+972    	; 0x168e <USB_Event_Stub>
    12c2:	80 91 e1 00 	lds	r24, 0x00E1

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
		#else
		EVENT_USB_Device_WakeUp();
    12c6:	83 ff       	sbrs	r24, 3
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
    12c8:	27 c0       	rjmp	.+78     	; 0x1318 <__vector_10+0x178>
    12ca:	80 91 e2 00 	lds	r24, 0x00E2
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
    12ce:	83 ff       	sbrs	r24, 3
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
    12d0:	23 c0       	rjmp	.+70     	; 0x1318 <__vector_10+0x178>
    12d2:	80 91 e1 00 	lds	r24, 0x00E1
    12d6:	87 7f       	andi	r24, 0xF7	; 247
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
    12d8:	80 93 e1 00 	sts	0x00E1, r24
    12dc:	82 e0       	ldi	r24, 0x02	; 2
    12de:	80 93 84 01 	sts	0x0184, r24
	{
		USB_INT_Clear(USB_INT_EORSTI);

		USB_DeviceState                = DEVICE_STATE_Default;
    12e2:	10 92 80 01 	sts	0x0180, r1
    12e6:	80 91 e1 00 	lds	r24, 0x00E1
		USB_Device_ConfigurationNumber = 0;
    12ea:	8e 7f       	andi	r24, 0xFE	; 254
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
    12ec:	80 93 e1 00 	sts	0x00E1, r24
    12f0:	80 91 e2 00 	lds	r24, 0x00E2
    12f4:	8e 7f       	andi	r24, 0xFE	; 254
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
    12f6:	80 93 e2 00 	sts	0x00E2, r24
    12fa:	80 91 e2 00 	lds	r24, 0x00E2
    12fe:	80 61       	ori	r24, 0x10	; 16
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
    1300:	80 93 e2 00 	sts	0x00E2, r24
    1304:	80 e0       	ldi	r24, 0x00	; 0
    1306:	60 e0       	ldi	r22, 0x00	; 0
    1308:	42 e0       	ldi	r20, 0x02	; 2
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
    130a:	25 de       	rcall	.-950    	; 0xf56 <Endpoint_ConfigureEndpoint_Prv>
    130c:	80 91 f0 00 	lds	r24, 0x00F0
    1310:	88 60       	ori	r24, 0x08	; 8
    1312:	80 93 f0 00 	sts	0x00F0, r24
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX |= (1 << RXSTPE);
    1316:	bb d1       	rcall	.+886    	; 0x168e <USB_Event_Stub>
    1318:	ff 91       	pop	r31
    131a:	ef 91       	pop	r30
    131c:	bf 91       	pop	r27

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
    131e:	af 91       	pop	r26
    1320:	9f 91       	pop	r25
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
    1322:	8f 91       	pop	r24
    1324:	7f 91       	pop	r23
    1326:	6f 91       	pop	r22
    1328:	5f 91       	pop	r21
    132a:	4f 91       	pop	r20
    132c:	3f 91       	pop	r19
    132e:	2f 91       	pop	r18
    1330:	0f 90       	pop	r0
    1332:	0b be       	out	0x3b, r0	; 59
    1334:	0f 90       	pop	r0
    1336:	0f be       	out	0x3f, r0	; 63
    1338:	0f 90       	pop	r0
    133a:	1f 90       	pop	r1
    133c:	18 95       	reti

0000133e <__vector_11>:
    133e:	1f 92       	push	r1
    1340:	0f 92       	push	r0
    1342:	0f b6       	in	r0, 0x3f	; 63
    1344:	0f 92       	push	r0
    1346:	0b b6       	in	r0, 0x3b	; 59

#if defined(INTERRUPT_CONTROL_ENDPOINT) && defined(USB_CAN_BE_DEVICE)
ISR(USB_COM_vect, ISR_BLOCK)
{
    1348:	0f 92       	push	r0
    134a:	11 24       	eor	r1, r1
    134c:	2f 93       	push	r18
    134e:	3f 93       	push	r19
    1350:	4f 93       	push	r20
    1352:	5f 93       	push	r21
    1354:	6f 93       	push	r22
    1356:	7f 93       	push	r23
    1358:	8f 93       	push	r24
    135a:	9f 93       	push	r25
    135c:	af 93       	push	r26
    135e:	bf 93       	push	r27
    1360:	cf 93       	push	r28
    1362:	ef 93       	push	r30
    1364:	ff 93       	push	r31
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    1366:	c0 91 e9 00 	lds	r28, 0x00E9
    136a:	cf 70       	andi	r28, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    136c:	80 91 ec 00 	lds	r24, 0x00EC
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1370:	10 92 e9 00 	sts	0x00E9, r1
						break;
					case USB_INT_SOFI:
						UDIEN  &= ~(1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX &= ~(1 << RXSTPE);
    1374:	80 91 f0 00 	lds	r24, 0x00F0
    1378:	87 7f       	andi	r24, 0xF7	; 247
    137a:	80 93 f0 00 	sts	0x00F0, r24
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				sei();
    137e:	78 94       	sei
	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Disable(USB_INT_RXSTPI);

	GlobalInterruptEnable();

	USB_Device_ProcessControlRequest();
    1380:	1d d0       	rcall	.+58     	; 0x13bc <USB_Device_ProcessControlRequest>
    1382:	10 92 e9 00 	sts	0x00E9, r1
    1386:	80 91 f0 00 	lds	r24, 0x00F0
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX |= (1 << RXSTPE);
    138a:	88 60       	ori	r24, 0x08	; 8
    138c:	80 93 f0 00 	sts	0x00F0, r24
    1390:	c0 93 e9 00 	sts	0x00E9, r28
    1394:	ff 91       	pop	r31

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Enable(USB_INT_RXSTPI);
	Endpoint_SelectEndpoint(PrevSelectedEndpoint);
}
    1396:	ef 91       	pop	r30
    1398:	cf 91       	pop	r28
    139a:	bf 91       	pop	r27
    139c:	af 91       	pop	r26
    139e:	9f 91       	pop	r25
    13a0:	8f 91       	pop	r24
    13a2:	7f 91       	pop	r23
    13a4:	6f 91       	pop	r22
    13a6:	5f 91       	pop	r21
    13a8:	4f 91       	pop	r20
    13aa:	3f 91       	pop	r19
    13ac:	2f 91       	pop	r18
    13ae:	0f 90       	pop	r0
    13b0:	0b be       	out	0x3b, r0	; 59
    13b2:	0f 90       	pop	r0
    13b4:	0f be       	out	0x3f, r0	; 63
    13b6:	0f 90       	pop	r0
    13b8:	1f 90       	pop	r1
    13ba:	18 95       	reti

000013bc <USB_Device_ProcessControlRequest>:
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_Device_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
    13bc:	1f 93       	push	r17
    13be:	cf 93       	push	r28
    13c0:	df 93       	push	r29
    13c2:	cd b7       	in	r28, 0x3d	; 61
    13c4:	de b7       	in	r29, 0x3e	; 62
    13c6:	ac 97       	sbiw	r28, 0x2c	; 44
    13c8:	0f b6       	in	r0, 0x3f	; 63
    13ca:	f8 94       	cli
    13cc:	de bf       	out	0x3e, r29	; 62
    13ce:	0f be       	out	0x3f, r0	; 63
    13d0:	cd bf       	out	0x3d, r28	; 61
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
    13d2:	80 e0       	ldi	r24, 0x00	; 0
	USB_ControlRequest.bRequest      = Endpoint_Read_8();
	USB_ControlRequest.wValue        = Endpoint_Read_16_LE();
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;
    13d4:	e5 e8       	ldi	r30, 0x85	; 133
    13d6:	f1 e0       	ldi	r31, 0x01	; 1
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    13d8:	90 91 f1 00 	lds	r25, 0x00F1

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_8();
    13dc:	91 93       	st	Z+, r25
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
    13de:	8f 5f       	subi	r24, 0xFF	; 255
    13e0:	88 30       	cpi	r24, 0x08	; 8
    13e2:	d1 f7       	brne	.-12     	; 0x13d8 <USB_Device_ProcessControlRequest+0x1c>
	  *(RequestHeader++) = Endpoint_Read_8();
	#endif

	EVENT_USB_Device_ControlRequest();
    13e4:	0e 94 ff 00 	call	0x1fe	; 0x1fe <EVENT_USB_Device_ControlRequest>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    13e8:	80 91 e8 00 	lds	r24, 0x00E8

	if (Endpoint_IsSETUPReceived())
    13ec:	83 ff       	sbrs	r24, 3
    13ee:	37 c1       	rjmp	.+622    	; 0x165e <USB_Device_ProcessControlRequest+0x2a2>
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
    13f0:	80 91 85 01 	lds	r24, 0x0185

		switch (USB_ControlRequest.bRequest)
    13f4:	20 91 86 01 	lds	r18, 0x0186
    13f8:	25 30       	cpi	r18, 0x05	; 5
    13fa:	09 f4       	brne	.+2      	; 0x13fe <USB_Device_ProcessControlRequest+0x42>
    13fc:	84 c0       	rjmp	.+264    	; 0x1506 <USB_Device_ProcessControlRequest+0x14a>
    13fe:	26 30       	cpi	r18, 0x06	; 6
    1400:	40 f4       	brcc	.+16     	; 0x1412 <USB_Device_ProcessControlRequest+0x56>
    1402:	21 30       	cpi	r18, 0x01	; 1
    1404:	a1 f1       	breq	.+104    	; 0x146e <USB_Device_ProcessControlRequest+0xb2>
    1406:	21 30       	cpi	r18, 0x01	; 1
    1408:	70 f0       	brcs	.+28     	; 0x1426 <USB_Device_ProcessControlRequest+0x6a>
    140a:	23 30       	cpi	r18, 0x03	; 3
    140c:	09 f0       	breq	.+2      	; 0x1410 <USB_Device_ProcessControlRequest+0x54>
    140e:	27 c1       	rjmp	.+590    	; 0x165e <USB_Device_ProcessControlRequest+0x2a2>
    1410:	2e c0       	rjmp	.+92     	; 0x146e <USB_Device_ProcessControlRequest+0xb2>
    1412:	28 30       	cpi	r18, 0x08	; 8
    1414:	09 f4       	brne	.+2      	; 0x1418 <USB_Device_ProcessControlRequest+0x5c>
    1416:	f4 c0       	rjmp	.+488    	; 0x1600 <USB_Device_ProcessControlRequest+0x244>
    1418:	29 30       	cpi	r18, 0x09	; 9
    141a:	09 f4       	brne	.+2      	; 0x141e <USB_Device_ProcessControlRequest+0x62>
    141c:	03 c1       	rjmp	.+518    	; 0x1624 <USB_Device_ProcessControlRequest+0x268>
    141e:	26 30       	cpi	r18, 0x06	; 6
    1420:	09 f0       	breq	.+2      	; 0x1424 <USB_Device_ProcessControlRequest+0x68>
    1422:	1d c1       	rjmp	.+570    	; 0x165e <USB_Device_ProcessControlRequest+0x2a2>
    1424:	93 c0       	rjmp	.+294    	; 0x154c <USB_Device_ProcessControlRequest+0x190>
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    1426:	80 38       	cpi	r24, 0x80	; 128
    1428:	21 f0       	breq	.+8      	; 0x1432 <USB_Device_ProcessControlRequest+0x76>
    142a:	82 38       	cpi	r24, 0x82	; 130
    142c:	09 f0       	breq	.+2      	; 0x1430 <USB_Device_ProcessControlRequest+0x74>
    142e:	17 c1       	rjmp	.+558    	; 0x165e <USB_Device_ProcessControlRequest+0x2a2>
    1430:	08 c0       	rjmp	.+16     	; 0x1442 <USB_Device_ProcessControlRequest+0x86>
	Endpoint_ClearOUT();
}

static void USB_Device_GetStatus(void)
{
	uint8_t CurrentStatus = 0;
    1432:	80 91 81 01 	lds	r24, 0x0181
			if (USB_Device_CurrentlySelfPowered)
			  CurrentStatus |= FEATURE_SELFPOWERED_ENABLED;
			#endif

			#if !defined(NO_DEVICE_REMOTE_WAKEUP)
			if (USB_Device_RemoteWakeupEnabled)
    1436:	90 91 82 01 	lds	r25, 0x0182
    143a:	99 23       	and	r25, r25
    143c:	71 f0       	breq	.+28     	; 0x145a <USB_Device_ProcessControlRequest+0x9e>
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
    143e:	82 60       	ori	r24, 0x02	; 2
    1440:	0c c0       	rjmp	.+24     	; 0x145a <USB_Device_ProcessControlRequest+0x9e>
			#endif
			break;
		case (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_ENDPOINT):
			#if !defined(CONTROL_ONLY_DEVICE)
			Endpoint_SelectEndpoint((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
    1442:	80 91 89 01 	lds	r24, 0x0189
    1446:	8f 70       	andi	r24, 0x0F	; 15
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1448:	80 93 e9 00 	sts	0x00E9, r24
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    144c:	90 91 eb 00 	lds	r25, 0x00EB

			CurrentStatus = Endpoint_IsStalled();
    1450:	81 e0       	ldi	r24, 0x01	; 1
    1452:	95 ff       	sbrs	r25, 5
    1454:	80 e0       	ldi	r24, 0x00	; 0
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1456:	10 92 e9 00 	sts	0x00E9, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    145a:	90 91 e8 00 	lds	r25, 0x00E8
    145e:	97 7f       	andi	r25, 0xF7	; 247
    1460:	90 93 e8 00 	sts	0x00E8, r25
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
    1464:	80 93 f1 00 	sts	0x00F1, r24
				UEDATX = (Data >> 8);
    1468:	10 92 f1 00 	sts	0x00F1, r1
    146c:	d4 c0       	rjmp	.+424    	; 0x1616 <USB_Device_ProcessControlRequest+0x25a>
				}

				break;
			case REQ_ClearFeature:
			case REQ_SetFeature:
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    146e:	88 23       	and	r24, r24
    1470:	19 f0       	breq	.+6      	; 0x1478 <USB_Device_ProcessControlRequest+0xbc>
    1472:	82 30       	cpi	r24, 0x02	; 2
    1474:	09 f0       	breq	.+2      	; 0x1478 <USB_Device_ProcessControlRequest+0xbc>
    1476:	f3 c0       	rjmp	.+486    	; 0x165e <USB_Device_ProcessControlRequest+0x2a2>
	Endpoint_ClearStatusStage();
}

static void USB_Device_ClearSetFeature(void)
{
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
    1478:	90 e0       	ldi	r25, 0x00	; 0
    147a:	8f 71       	andi	r24, 0x1F	; 31
    147c:	90 70       	andi	r25, 0x00	; 0
    147e:	00 97       	sbiw	r24, 0x00	; 0
    1480:	29 f0       	breq	.+10     	; 0x148c <USB_Device_ProcessControlRequest+0xd0>
    1482:	82 30       	cpi	r24, 0x02	; 2
    1484:	91 05       	cpc	r25, r1
    1486:	09 f0       	breq	.+2      	; 0x148a <USB_Device_ProcessControlRequest+0xce>
    1488:	ea c0       	rjmp	.+468    	; 0x165e <USB_Device_ProcessControlRequest+0x2a2>
    148a:	0b c0       	rjmp	.+22     	; 0x14a2 <USB_Device_ProcessControlRequest+0xe6>
	{
		#if !defined(NO_DEVICE_REMOTE_WAKEUP)
		case REQREC_DEVICE:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
    148c:	80 91 87 01 	lds	r24, 0x0187
    1490:	81 30       	cpi	r24, 0x01	; 1
    1492:	09 f0       	breq	.+2      	; 0x1496 <USB_Device_ProcessControlRequest+0xda>
    1494:	e4 c0       	rjmp	.+456    	; 0x165e <USB_Device_ProcessControlRequest+0x2a2>
			  USB_Device_RemoteWakeupEnabled = (USB_ControlRequest.bRequest == REQ_SetFeature);
    1496:	23 30       	cpi	r18, 0x03	; 3
    1498:	09 f0       	breq	.+2      	; 0x149c <USB_Device_ProcessControlRequest+0xe0>
    149a:	80 e0       	ldi	r24, 0x00	; 0
    149c:	80 93 82 01 	sts	0x0182, r24
    14a0:	2c c0       	rjmp	.+88     	; 0x14fa <USB_Device_ProcessControlRequest+0x13e>

			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
    14a2:	80 91 87 01 	lds	r24, 0x0187
    14a6:	88 23       	and	r24, r24
    14a8:	41 f5       	brne	.+80     	; 0x14fa <USB_Device_ProcessControlRequest+0x13e>
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
    14aa:	20 91 89 01 	lds	r18, 0x0189
    14ae:	2f 70       	andi	r18, 0x0F	; 15

				if (EndpointIndex == ENDPOINT_CONTROLEP)
    14b0:	09 f4       	brne	.+2      	; 0x14b4 <USB_Device_ProcessControlRequest+0xf8>
    14b2:	d5 c0       	rjmp	.+426    	; 0x165e <USB_Device_ProcessControlRequest+0x2a2>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    14b4:	20 93 e9 00 	sts	0x00E9, r18
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
    14b8:	80 91 eb 00 	lds	r24, 0x00EB
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
    14bc:	80 ff       	sbrs	r24, 0
    14be:	1d c0       	rjmp	.+58     	; 0x14fa <USB_Device_ProcessControlRequest+0x13e>
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
    14c0:	80 91 86 01 	lds	r24, 0x0186
    14c4:	83 30       	cpi	r24, 0x03	; 3
    14c6:	21 f4       	brne	.+8      	; 0x14d0 <USB_Device_ProcessControlRequest+0x114>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    14c8:	80 91 eb 00 	lds	r24, 0x00EB
    14cc:	80 62       	ori	r24, 0x20	; 32
    14ce:	13 c0       	rjmp	.+38     	; 0x14f6 <USB_Device_ProcessControlRequest+0x13a>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
    14d0:	80 91 eb 00 	lds	r24, 0x00EB
    14d4:	80 61       	ori	r24, 0x10	; 16
    14d6:	80 93 eb 00 	sts	0x00EB, r24
			 *  \param[in] Address  Endpoint address whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t Address)
			{
				UERST = (1 << (Address & ENDPOINT_EPNUM_MASK));
    14da:	81 e0       	ldi	r24, 0x01	; 1
    14dc:	90 e0       	ldi	r25, 0x00	; 0
    14de:	02 c0       	rjmp	.+4      	; 0x14e4 <USB_Device_ProcessControlRequest+0x128>
    14e0:	88 0f       	add	r24, r24
    14e2:	99 1f       	adc	r25, r25
    14e4:	2a 95       	dec	r18
    14e6:	e2 f7       	brpl	.-8      	; 0x14e0 <USB_Device_ProcessControlRequest+0x124>
    14e8:	80 93 ea 00 	sts	0x00EA, r24
				UERST = 0;
    14ec:	10 92 ea 00 	sts	0x00EA, r1

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
    14f0:	80 91 eb 00 	lds	r24, 0x00EB
    14f4:	88 60       	ori	r24, 0x08	; 8
    14f6:	80 93 eb 00 	sts	0x00EB, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    14fa:	10 92 e9 00 	sts	0x00E9, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    14fe:	80 91 e8 00 	lds	r24, 0x00E8
    1502:	87 7f       	andi	r24, 0xF7	; 247
    1504:	8b c0       	rjmp	.+278    	; 0x161c <USB_Device_ProcessControlRequest+0x260>
					USB_Device_ClearSetFeature();
				}

				break;
			case REQ_SetAddress:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    1506:	88 23       	and	r24, r24
    1508:	09 f0       	breq	.+2      	; 0x150c <USB_Device_ProcessControlRequest+0x150>
    150a:	a9 c0       	rjmp	.+338    	; 0x165e <USB_Device_ProcessControlRequest+0x2a2>
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t DeviceAddress = (USB_ControlRequest.wValue & 0x7F);
    150c:	10 91 87 01 	lds	r17, 0x0187
    1510:	1f 77       	andi	r17, 0x7F	; 127
			#endif

			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				UDADDR = (UDADDR & (1 << ADDEN)) | (Address & 0x7F);
    1512:	80 91 e3 00 	lds	r24, 0x00E3
    1516:	80 78       	andi	r24, 0x80	; 128
    1518:	81 2b       	or	r24, r17
    151a:	80 93 e3 00 	sts	0x00E3, r24
    151e:	80 91 e8 00 	lds	r24, 0x00E8
    1522:	87 7f       	andi	r24, 0xF7	; 247
    1524:	80 93 e8 00 	sts	0x00E8, r24

	USB_Device_SetDeviceAddress(DeviceAddress);

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
    1528:	87 dd       	rcall	.-1266   	; 0x1038 <Endpoint_ClearStatusStage>
    152a:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    152e:	80 ff       	sbrs	r24, 0

	while (!(Endpoint_IsINReady()));
    1530:	fc cf       	rjmp	.-8      	; 0x152a <USB_Device_ProcessControlRequest+0x16e>
    1532:	80 91 e3 00 	lds	r24, 0x00E3
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address)
			{
				(void)Address;
				
				UDADDR |= (1 << ADDEN);
    1536:	80 68       	ori	r24, 0x80	; 128
    1538:	80 93 e3 00 	sts	0x00E3, r24
    153c:	11 23       	and	r17, r17

	USB_Device_EnableDeviceAddress(DeviceAddress);

	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
    153e:	11 f0       	breq	.+4      	; 0x1544 <USB_Device_ProcessControlRequest+0x188>
    1540:	83 e0       	ldi	r24, 0x03	; 3
    1542:	01 c0       	rjmp	.+2      	; 0x1546 <USB_Device_ProcessControlRequest+0x18a>
    1544:	82 e0       	ldi	r24, 0x02	; 2
    1546:	80 93 84 01 	sts	0x0184, r24
    154a:	89 c0       	rjmp	.+274    	; 0x165e <USB_Device_ProcessControlRequest+0x2a2>
    154c:	80 58       	subi	r24, 0x80	; 128
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_SetAddress();

				break;
			case REQ_GetDescriptor:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    154e:	82 30       	cpi	r24, 0x02	; 2
    1550:	08 f0       	brcs	.+2      	; 0x1554 <USB_Device_ProcessControlRequest+0x198>
    1552:	85 c0       	rjmp	.+266    	; 0x165e <USB_Device_ProcessControlRequest+0x2a2>
    1554:	80 91 87 01 	lds	r24, 0x0187
	    !(defined(USE_FLASH_DESCRIPTORS) || defined(USE_EEPROM_DESCRIPTORS) || defined(USE_RAM_DESCRIPTORS))
	uint8_t DescriptorAddressSpace;
	#endif

	#if !defined(NO_INTERNAL_SERIAL) && (USE_INTERNAL_SERIAL != NO_DESCRIPTOR)
	if (USB_ControlRequest.wValue == ((DTYPE_String << 8) | USE_INTERNAL_SERIAL))
    1558:	90 91 88 01 	lds	r25, 0x0188
    155c:	23 e0       	ldi	r18, 0x03	; 3
    155e:	8c 3d       	cpi	r24, 0xDC	; 220
    1560:	92 07       	cpc	r25, r18
    1562:	a9 f5       	brne	.+106    	; 0x15ce <USB_Device_ProcessControlRequest+0x212>
    1564:	83 e0       	ldi	r24, 0x03	; 3
	{
		USB_Descriptor_Header_t Header;
		uint16_t                UnicodeString[INTERNAL_SERIAL_LENGTH_BITS / 4];
	} SignatureDescriptor;

	SignatureDescriptor.Header.Type = DTYPE_String;
    1566:	8c 83       	std	Y+4, r24	; 0x04
    1568:	8a e2       	ldi	r24, 0x2A	; 42
	SignatureDescriptor.Header.Size = USB_STRING_LEN(INTERNAL_SERIAL_LENGTH_BITS / 4);
    156a:	8b 83       	std	Y+3, r24	; 0x03
    156c:	5f b7       	in	r21, 0x3f	; 63
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
    156e:	f8 94       	cli
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
    1570:	de 01       	movw	r26, r28
				__builtin_ssrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				cli();
				#endif

				GCC_MEMORY_BARRIER();
    1572:	13 96       	adiw	r26, 0x03	; 3
    1574:	80 e0       	ldi	r24, 0x00	; 0
    1576:	90 e0       	ldi	r25, 0x00	; 0
    1578:	4e e0       	ldi	r20, 0x0E	; 14
			static inline void USB_Device_GetSerialString(uint16_t* const UnicodeString)
			{
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;
    157a:	61 e2       	ldi	r22, 0x21	; 33

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
				{
					uint8_t SerialByte = boot_signature_byte_get(SigReadAddress);
    157c:	e4 2f       	mov	r30, r20
    157e:	f0 e0       	ldi	r31, 0x00	; 0
    1580:	60 93 57 00 	sts	0x0057, r22
    1584:	e4 91       	lpm	r30, Z
    1586:	80 ff       	sbrs	r24, 0

					if (SerialCharNum & 0x01)
    1588:	03 c0       	rjmp	.+6      	; 0x1590 <USB_Device_ProcessControlRequest+0x1d4>
    158a:	e2 95       	swap	r30
					{
						SerialByte >>= 4;
    158c:	ef 70       	andi	r30, 0x0F	; 15
    158e:	4f 5f       	subi	r20, 0xFF	; 255
						SigReadAddress++;
    1590:	ef 70       	andi	r30, 0x0F	; 15
					}

					SerialByte &= 0x0F;
    1592:	2e 2f       	mov	r18, r30
    1594:	30 e0       	ldi	r19, 0x00	; 0
    1596:	ea 30       	cpi	r30, 0x0A	; 10

					UnicodeString[SerialCharNum] = cpu_to_le16((SerialByte >= 10) ?
    1598:	18 f0       	brcs	.+6      	; 0x15a0 <USB_Device_ProcessControlRequest+0x1e4>
    159a:	29 5c       	subi	r18, 0xC9	; 201
    159c:	3f 4f       	sbci	r19, 0xFF	; 255
    159e:	02 c0       	rjmp	.+4      	; 0x15a4 <USB_Device_ProcessControlRequest+0x1e8>
    15a0:	20 5d       	subi	r18, 0xD0	; 208
    15a2:	3f 4f       	sbci	r19, 0xFF	; 255
    15a4:	13 96       	adiw	r26, 0x03	; 3
    15a6:	3c 93       	st	X, r19
    15a8:	2e 93       	st	-X, r18
    15aa:	12 97       	sbiw	r26, 0x02	; 2
    15ac:	01 96       	adiw	r24, 0x01	; 1
    15ae:	12 96       	adiw	r26, 0x02	; 2
    15b0:	84 31       	cpi	r24, 0x14	; 20
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
    15b2:	91 05       	cpc	r25, r1
    15b4:	19 f7       	brne	.-58     	; 0x157c <USB_Device_ProcessControlRequest+0x1c0>
    15b6:	5f bf       	out	0x3f, r21	; 63
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
    15b8:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    15bc:	87 7f       	andi	r24, 0xF7	; 247
    15be:	80 93 e8 00 	sts	0x00E8, r24
    15c2:	ce 01       	movw	r24, r28

	USB_Device_GetSerialString(SignatureDescriptor.UnicodeString);

	Endpoint_ClearSETUP();

	Endpoint_Write_Control_Stream_LE(&SignatureDescriptor, sizeof(SignatureDescriptor));
    15c4:	03 96       	adiw	r24, 0x03	; 3
    15c6:	6a e2       	ldi	r22, 0x2A	; 42
    15c8:	70 e0       	ldi	r23, 0x00	; 0
    15ca:	0c dc       	rcall	.-2024   	; 0xde4 <Endpoint_Write_Control_Stream_LE>
    15cc:	13 c0       	rjmp	.+38     	; 0x15f4 <USB_Device_ProcessControlRequest+0x238>
    15ce:	60 91 89 01 	lds	r22, 0x0189
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif

	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
    15d2:	ae 01       	movw	r20, r28
    15d4:	4f 5f       	subi	r20, 0xFF	; 255
    15d6:	5f 4f       	sbci	r21, 0xFF	; 255
    15d8:	0e 94 11 01 	call	0x222	; 0x222 <CALLBACK_USB_GetDescriptor>
    15dc:	bc 01       	movw	r22, r24
    15de:	00 97       	sbiw	r24, 0x00	; 0
    15e0:	09 f4       	brne	.+2      	; 0x15e4 <USB_Device_ProcessControlRequest+0x228>
    15e2:	3d c0       	rjmp	.+122    	; 0x165e <USB_Device_ProcessControlRequest+0x2a2>
    15e4:	80 91 e8 00 	lds	r24, 0x00E8
    15e8:	87 7f       	andi	r24, 0xF7	; 247
    15ea:	80 93 e8 00 	sts	0x00E8, r24
    15ee:	89 81       	ldd	r24, Y+1	; 0x01
    15f0:	9a 81       	ldd	r25, Y+2	; 0x02
	#if defined(USE_RAM_DESCRIPTORS) || !defined(ARCH_HAS_MULTI_ADDRESS_SPACE)
	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_EEPROM_DESCRIPTORS)
	Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_FLASH_DESCRIPTORS)
	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
    15f2:	54 dc       	rcall	.-1880   	; 0xe9c <Endpoint_Write_Control_PStream_LE>
    15f4:	80 91 e8 00 	lds	r24, 0x00E8
    15f8:	8b 77       	andi	r24, 0x7B	; 123
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    15fa:	80 93 e8 00 	sts	0x00E8, r24
    15fe:	2f c0       	rjmp	.+94     	; 0x165e <USB_Device_ProcessControlRequest+0x2a2>
    1600:	80 38       	cpi	r24, 0x80	; 128
    1602:	69 f5       	brne	.+90     	; 0x165e <USB_Device_ProcessControlRequest+0x2a2>
    1604:	80 91 e8 00 	lds	r24, 0x00E8
					USB_Device_GetDescriptor();
				}

				break;
			case REQ_GetConfiguration:
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
    1608:	87 7f       	andi	r24, 0xF7	; 247
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    160a:	80 93 e8 00 	sts	0x00E8, r24
    160e:	80 91 80 01 	lds	r24, 0x0180
    1612:	80 93 f1 00 	sts	0x00F1, r24

static void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();

	Endpoint_Write_8(USB_Device_ConfigurationNumber);
    1616:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    161a:	8e 77       	andi	r24, 0x7E	; 126
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    161c:	80 93 e8 00 	sts	0x00E8, r24
    1620:	0b dd       	rcall	.-1514   	; 0x1038 <Endpoint_ClearStatusStage>
    1622:	1d c0       	rjmp	.+58     	; 0x165e <USB_Device_ProcessControlRequest+0x2a2>
    1624:	88 23       	and	r24, r24
	Endpoint_ClearIN();

	Endpoint_ClearStatusStage();
    1626:	d9 f4       	brne	.+54     	; 0x165e <USB_Device_ProcessControlRequest+0x2a2>
    1628:	90 91 87 01 	lds	r25, 0x0187
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_GetConfiguration();

				break;
			case REQ_SetConfiguration:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    162c:	92 30       	cpi	r25, 0x02	; 2
    162e:	b8 f4       	brcc	.+46     	; 0x165e <USB_Device_ProcessControlRequest+0x2a2>
}

static void USB_Device_SetConfiguration(void)
{
	#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
    1630:	80 91 e8 00 	lds	r24, 0x00E8
    1634:	87 7f       	andi	r24, 0xF7	; 247
    1636:	80 93 e8 00 	sts	0x00E8, r24
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    163a:	90 93 80 01 	sts	0x0180, r25
    163e:	fc dc       	rcall	.-1544   	; 0x1038 <Endpoint_ClearStatusStage>
    1640:	80 91 80 01 	lds	r24, 0x0180
	#endif
	#endif

	Endpoint_ClearSETUP();

	USB_Device_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
    1644:	88 23       	and	r24, r24

	Endpoint_ClearStatusStage();
    1646:	21 f4       	brne	.+8      	; 0x1650 <USB_Device_ProcessControlRequest+0x294>
    1648:	80 91 e3 00 	lds	r24, 0x00E3

	if (USB_Device_ConfigurationNumber)
    164c:	87 ff       	sbrs	r24, 7
    164e:	02 c0       	rjmp	.+4      	; 0x1654 <USB_Device_ProcessControlRequest+0x298>
    1650:	84 e0       	ldi	r24, 0x04	; 4
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
    1652:	01 c0       	rjmp	.+2      	; 0x1656 <USB_Device_ProcessControlRequest+0x29a>
    1654:	81 e0       	ldi	r24, 0x01	; 1
	  USB_DeviceState = DEVICE_STATE_Configured;
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
    1656:	80 93 84 01 	sts	0x0184, r24
    165a:	0e 94 f5 00 	call	0x1ea	; 0x1ea <EVENT_USB_Device_ConfigurationChanged>
    165e:	80 91 e8 00 	lds	r24, 0x00E8
    1662:	83 ff       	sbrs	r24, 3

	EVENT_USB_Device_ConfigurationChanged();
    1664:	0a c0       	rjmp	.+20     	; 0x167a <USB_Device_ProcessControlRequest+0x2be>
    1666:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    166a:	87 7f       	andi	r24, 0xF7	; 247
			default:
				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
    166c:	80 93 e8 00 	sts	0x00E8, r24
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1670:	80 91 eb 00 	lds	r24, 0x00EB
    1674:	80 62       	ori	r24, 0x20	; 32
    1676:	80 93 eb 00 	sts	0x00EB, r24
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    167a:	ac 96       	adiw	r28, 0x2c	; 44
    167c:	0f b6       	in	r0, 0x3f	; 63
    167e:	f8 94       	cli
    1680:	de bf       	out	0x3e, r29	; 62
    1682:	0f be       	out	0x3f, r0	; 63
	{
		Endpoint_ClearSETUP();
		Endpoint_StallTransaction();
	}
}
    1684:	cd bf       	out	0x3d, r28	; 61
    1686:	df 91       	pop	r29
    1688:	cf 91       	pop	r28
    168a:	1f 91       	pop	r17
    168c:	08 95       	ret

0000168e <USB_Event_Stub>:
#include "Events.h"

void USB_Event_Stub(void)
{

}
    168e:	08 95       	ret

00001690 <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
    1690:	cf 93       	push	r28
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_DeviceTask(void)
{
	if (USB_DeviceState == DEVICE_STATE_Unattached)
    1692:	80 91 84 01 	lds	r24, 0x0184
    1696:	88 23       	and	r24, r24
    1698:	a9 f0       	breq	.+42     	; 0x16c4 <USB_USBTask+0x34>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    169a:	80 91 e9 00 	lds	r24, 0x00E9
    169e:	8f 70       	andi	r24, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    16a0:	90 91 ec 00 	lds	r25, 0x00EC
    16a4:	90 ff       	sbrs	r25, 0
    16a6:	02 c0       	rjmp	.+4      	; 0x16ac <USB_USBTask+0x1c>
    16a8:	c0 e8       	ldi	r28, 0x80	; 128
    16aa:	01 c0       	rjmp	.+2      	; 0x16ae <USB_USBTask+0x1e>
    16ac:	c0 e0       	ldi	r28, 0x00	; 0
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    16ae:	c8 2b       	or	r28, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    16b0:	10 92 e9 00 	sts	0x00E9, r1
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    16b4:	80 91 e8 00 	lds	r24, 0x00E8

	uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

	if (Endpoint_IsSETUPReceived())
    16b8:	83 ff       	sbrs	r24, 3
    16ba:	01 c0       	rjmp	.+2      	; 0x16be <USB_USBTask+0x2e>
	  USB_Device_ProcessControlRequest();
    16bc:	7f de       	rcall	.-770    	; 0x13bc <USB_Device_ProcessControlRequest>
    16be:	cf 70       	andi	r28, 0x0F	; 15
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    16c0:	c0 93 e9 00 	sts	0x00E9, r28
    16c4:	cf 91       	pop	r28
	#elif defined(USB_CAN_BE_HOST)
		USB_HostTask();
	#elif defined(USB_CAN_BE_DEVICE)
		USB_DeviceTask();
	#endif
}
    16c6:	08 95       	ret

000016c8 <MS_Device_ProcessControlRequest>:
#define  __INCLUDE_FROM_MS_DRIVER
#define  __INCLUDE_FROM_MASSSTORAGE_DEVICE_C
#include "MassStorageClassDevice.h"

void MS_Device_ProcessControlRequest(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
    16c8:	cf 93       	push	r28
    16ca:	df 93       	push	r29
    16cc:	ec 01       	movw	r28, r24
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    16ce:	80 91 e8 00 	lds	r24, 0x00E8
	if (!(Endpoint_IsSETUPReceived()))
    16d2:	83 ff       	sbrs	r24, 3
    16d4:	33 c0       	rjmp	.+102    	; 0x173c <MS_Device_ProcessControlRequest+0x74>
	  return;

	if (USB_ControlRequest.wIndex != MSInterfaceInfo->Config.InterfaceNumber)
    16d6:	88 81       	ld	r24, Y
    16d8:	90 e0       	ldi	r25, 0x00	; 0
    16da:	20 91 89 01 	lds	r18, 0x0189
    16de:	30 91 8a 01 	lds	r19, 0x018A
    16e2:	28 17       	cp	r18, r24
    16e4:	39 07       	cpc	r19, r25
    16e6:	51 f5       	brne	.+84     	; 0x173c <MS_Device_ProcessControlRequest+0x74>
	  return;

	switch (USB_ControlRequest.bRequest)
    16e8:	80 91 86 01 	lds	r24, 0x0186
    16ec:	8e 3f       	cpi	r24, 0xFE	; 254
    16ee:	79 f0       	breq	.+30     	; 0x170e <MS_Device_ProcessControlRequest+0x46>
    16f0:	8f 3f       	cpi	r24, 0xFF	; 255
    16f2:	21 f5       	brne	.+72     	; 0x173c <MS_Device_ProcessControlRequest+0x74>
	{
		case MS_REQ_MassStorageReset:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    16f4:	80 91 85 01 	lds	r24, 0x0185
    16f8:	81 32       	cpi	r24, 0x21	; 33
    16fa:	01 f5       	brne	.+64     	; 0x173c <MS_Device_ProcessControlRequest+0x74>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    16fc:	80 91 e8 00 	lds	r24, 0x00E8
    1700:	87 7f       	andi	r24, 0xF7	; 247
    1702:	80 93 e8 00 	sts	0x00E8, r24
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
    1706:	98 dc       	rcall	.-1744   	; 0x1038 <Endpoint_ClearStatusStage>
    1708:	81 e0       	ldi	r24, 0x01	; 1

				MSInterfaceInfo->State.IsMassStoreReset = true;
    170a:	88 af       	sts	0x78, r24
    170c:	17 c0       	rjmp	.+46     	; 0x173c <MS_Device_ProcessControlRequest+0x74>
    170e:	80 91 85 01 	lds	r24, 0x0185
			}

			break;
		case MS_REQ_GetMaxLUN:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    1712:	81 3a       	cpi	r24, 0xA1	; 161
    1714:	99 f4       	brne	.+38     	; 0x173c <MS_Device_ProcessControlRequest+0x74>
    1716:	80 91 e8 00 	lds	r24, 0x00E8
    171a:	87 7f       	andi	r24, 0xF7	; 247
    171c:	80 93 e8 00 	sts	0x00E8, r24
    1720:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1724:	80 ff       	sbrs	r24, 0
			{
				Endpoint_ClearSETUP();
				while (!(Endpoint_IsINReady()));
    1726:	fc cf       	rjmp	.-8      	; 0x1720 <MS_Device_ProcessControlRequest+0x58>
    1728:	8b 85       	ldd	r24, Y+11	; 0x0b
				Endpoint_Write_8(MSInterfaceInfo->Config.TotalLUNs - 1);
    172a:	81 50       	subi	r24, 0x01	; 1
    172c:	80 93 f1 00 	sts	0x00F1, r24
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    1730:	80 91 e8 00 	lds	r24, 0x00E8
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1734:	8e 77       	andi	r24, 0x7E	; 126
    1736:	80 93 e8 00 	sts	0x00E8, r24
    173a:	7e dc       	rcall	.-1796   	; 0x1038 <Endpoint_ClearStatusStage>
				Endpoint_ClearIN();
				Endpoint_ClearStatusStage();
    173c:	df 91       	pop	r29
    173e:	cf 91       	pop	r28
			}

			break;
	}
}
    1740:	08 95       	ret

00001742 <MS_Device_ConfigureEndpoints>:
    1742:	cf 93       	push	r28
    1744:	df 93       	push	r29

bool MS_Device_ConfigureEndpoints(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
    1746:	ec 01       	movw	r28, r24
	memset(&MSInterfaceInfo->State, 0x00, sizeof(MSInterfaceInfo->State));
    1748:	0c 96       	adiw	r24, 0x0c	; 12
    174a:	fc 01       	movw	r30, r24
    174c:	8d e2       	ldi	r24, 0x2D	; 45
    174e:	df 01       	movw	r26, r30
    1750:	1d 92       	st	X+, r1
    1752:	8a 95       	dec	r24
    1754:	e9 f7       	brne	.-6      	; 0x1750 <MS_Device_ConfigureEndpoints+0xe>

	MSInterfaceInfo->Config.DataINEndpoint.Type  = EP_TYPE_BULK;
    1756:	82 e0       	ldi	r24, 0x02	; 2
    1758:	8c 83       	std	Y+4, r24	; 0x04
	MSInterfaceInfo->Config.DataOUTEndpoint.Type = EP_TYPE_BULK;
    175a:	89 87       	std	Y+9, r24	; 0x09

	if (!(Endpoint_ConfigureEndpointTable(&MSInterfaceInfo->Config.DataINEndpoint, 1)))
    175c:	ce 01       	movw	r24, r28
    175e:	01 96       	adiw	r24, 0x01	; 1
    1760:	61 e0       	ldi	r22, 0x01	; 1
    1762:	2e dc       	rcall	.-1956   	; 0xfc0 <Endpoint_ConfigureEndpointTable>
    1764:	88 23       	and	r24, r24
    1766:	29 f0       	breq	.+10     	; 0x1772 <MS_Device_ConfigureEndpoints+0x30>
    1768:	ce 01       	movw	r24, r28
	  return false;

	if (!(Endpoint_ConfigureEndpointTable(&MSInterfaceInfo->Config.DataOUTEndpoint, 1)))
    176a:	06 96       	adiw	r24, 0x06	; 6
    176c:	61 e0       	ldi	r22, 0x01	; 1
    176e:	28 dc       	rcall	.-1968   	; 0xfc0 <Endpoint_ConfigureEndpointTable>
    1770:	01 c0       	rjmp	.+2      	; 0x1774 <MS_Device_ConfigureEndpoints+0x32>
    1772:	80 e0       	ldi	r24, 0x00	; 0
    1774:	df 91       	pop	r29

	MSInterfaceInfo->Config.DataINEndpoint.Type  = EP_TYPE_BULK;
	MSInterfaceInfo->Config.DataOUTEndpoint.Type = EP_TYPE_BULK;

	if (!(Endpoint_ConfigureEndpointTable(&MSInterfaceInfo->Config.DataINEndpoint, 1)))
	  return false;
    1776:	cf 91       	pop	r28

	if (!(Endpoint_ConfigureEndpointTable(&MSInterfaceInfo->Config.DataOUTEndpoint, 1)))
	  return false;

	return true;
}
    1778:	08 95       	ret

0000177a <MS_Device_USBTask>:
    177a:	ef 92       	push	r14
    177c:	ff 92       	push	r15

void MS_Device_USBTask(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
    177e:	0f 93       	push	r16
    1780:	1f 93       	push	r17
    1782:	cf 93       	push	r28
    1784:	df 93       	push	r29
    1786:	00 d0       	rcall	.+0      	; 0x1788 <MS_Device_USBTask+0xe>
    1788:	cd b7       	in	r28, 0x3d	; 61
    178a:	de b7       	in	r29, 0x3e	; 62
    178c:	8c 01       	movw	r16, r24
	if (USB_DeviceState != DEVICE_STATE_Configured)
    178e:	80 91 84 01 	lds	r24, 0x0184
    1792:	84 30       	cpi	r24, 0x04	; 4
    1794:	09 f0       	breq	.+2      	; 0x1798 <MS_Device_USBTask+0x1e>
    1796:	0d c1       	rjmp	.+538    	; 0x19b2 <MS_Device_USBTask+0x238>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1798:	f8 01       	movw	r30, r16
    179a:	86 81       	ldd	r24, Z+6	; 0x06
    179c:	8f 70       	andi	r24, 0x0F	; 15
    179e:	80 93 e9 00 	sts	0x00E9, r24
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    17a2:	80 91 e8 00 	lds	r24, 0x00E8
	  return;

	Endpoint_SelectEndpoint(MSInterfaceInfo->Config.DataOUTEndpoint.Address);

	if (Endpoint_IsOUTReceived())
    17a6:	82 ff       	sbrs	r24, 2
    17a8:	ca c0       	rjmp	.+404    	; 0x193e <MS_Device_USBTask+0x1c4>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    17aa:	86 81       	ldd	r24, Z+6	; 0x06
    17ac:	8f 70       	andi	r24, 0x0F	; 15
    17ae:	80 93 e9 00 	sts	0x00E9, r24
{
	uint16_t BytesProcessed;

	Endpoint_SelectEndpoint(MSInterfaceInfo->Config.DataOUTEndpoint.Address);
	
	BytesProcessed = 0;
    17b2:	1a 82       	std	Y+2, r1	; 0x02
    17b4:	19 82       	std	Y+1, r1	; 0x01
	while (Endpoint_Read_Stream_LE(&MSInterfaceInfo->State.CommandBlock,
    17b6:	2c e0       	ldi	r18, 0x0C	; 12
    17b8:	e2 2e       	mov	r14, r18
    17ba:	f1 2c       	mov	r15, r1
    17bc:	e0 0e       	add	r14, r16
    17be:	f1 1e       	adc	r15, r17
    17c0:	04 c0       	rjmp	.+8      	; 0x17ca <MS_Device_USBTask+0x50>
	                               (sizeof(MS_CommandBlockWrapper_t) - 16), &BytesProcessed) ==
	                               ENDPOINT_RWSTREAM_IncompleteTransfer)
	{
		if (MSInterfaceInfo->State.IsMassStoreReset)
    17c2:	80 ad       	sts	0x60, r24
    17c4:	88 23       	and	r24, r24
    17c6:	09 f0       	breq	.+2      	; 0x17ca <MS_Device_USBTask+0x50>
    17c8:	ba c0       	rjmp	.+372    	; 0x193e <MS_Device_USBTask+0x1c4>
	uint16_t BytesProcessed;

	Endpoint_SelectEndpoint(MSInterfaceInfo->Config.DataOUTEndpoint.Address);
	
	BytesProcessed = 0;
	while (Endpoint_Read_Stream_LE(&MSInterfaceInfo->State.CommandBlock,
    17ca:	c7 01       	movw	r24, r14
    17cc:	6f e0       	ldi	r22, 0x0F	; 15
    17ce:	70 e0       	ldi	r23, 0x00	; 0
    17d0:	ae 01       	movw	r20, r28
    17d2:	4f 5f       	subi	r20, 0xFF	; 255
    17d4:	5f 4f       	sbci	r21, 0xFF	; 255
    17d6:	b7 da       	rcall	.-2706   	; 0xd46 <Endpoint_Read_Stream_LE>
    17d8:	f8 01       	movw	r30, r16
	                               (sizeof(MS_CommandBlockWrapper_t) - 16), &BytesProcessed) ==
	                               ENDPOINT_RWSTREAM_IncompleteTransfer)
	{
		if (MSInterfaceInfo->State.IsMassStoreReset)
    17da:	85 30       	cpi	r24, 0x05	; 5
	uint16_t BytesProcessed;

	Endpoint_SelectEndpoint(MSInterfaceInfo->Config.DataOUTEndpoint.Address);
	
	BytesProcessed = 0;
	while (Endpoint_Read_Stream_LE(&MSInterfaceInfo->State.CommandBlock,
    17dc:	91 f3       	breq	.-28     	; 0x17c2 <MS_Device_USBTask+0x48>
    17de:	84 85       	ldd	r24, Z+12	; 0x0c
	{
		if (MSInterfaceInfo->State.IsMassStoreReset)
		  return false;
	}

	if ((MSInterfaceInfo->State.CommandBlock.Signature         != CPU_TO_LE32(MS_CBW_SIGNATURE))     ||
    17e0:	95 85       	ldd	r25, Z+13	; 0x0d
    17e2:	a6 85       	ldd	r26, Z+14	; 0x0e
    17e4:	b7 85       	ldd	r27, Z+15	; 0x0f
    17e6:	85 35       	cpi	r24, 0x55	; 85
    17e8:	f3 e5       	ldi	r31, 0x53	; 83
    17ea:	9f 07       	cpc	r25, r31
    17ec:	f2 e4       	ldi	r31, 0x42	; 66
    17ee:	af 07       	cpc	r26, r31
    17f0:	f3 e4       	ldi	r31, 0x43	; 67
    17f2:	bf 07       	cpc	r27, r31
    17f4:	81 f4       	brne	.+32     	; 0x1816 <MS_Device_USBTask+0x9c>
    17f6:	f8 01       	movw	r30, r16
    17f8:	91 8d       	ldd	r25, Z+25	; 0x19
    17fa:	83 85       	ldd	r24, Z+11	; 0x0b
    17fc:	98 17       	cp	r25, r24
    17fe:	58 f4       	brcc	.+22     	; 0x1816 <MS_Device_USBTask+0x9c>
    1800:	80 8d       	ldd	r24, Z+24	; 0x18
	    (MSInterfaceInfo->State.CommandBlock.LUN               >= MSInterfaceInfo->Config.TotalLUNs) ||
		(MSInterfaceInfo->State.CommandBlock.Flags              & 0x1F)                              ||
    1802:	90 e0       	ldi	r25, 0x00	; 0
    1804:	8f 71       	andi	r24, 0x1F	; 31
    1806:	90 70       	andi	r25, 0x00	; 0
    1808:	00 97       	sbiw	r24, 0x00	; 0
		if (MSInterfaceInfo->State.IsMassStoreReset)
		  return false;
	}

	if ((MSInterfaceInfo->State.CommandBlock.Signature         != CPU_TO_LE32(MS_CBW_SIGNATURE))     ||
	    (MSInterfaceInfo->State.CommandBlock.LUN               >= MSInterfaceInfo->Config.TotalLUNs) ||
    180a:	29 f4       	brne	.+10     	; 0x1816 <MS_Device_USBTask+0x9c>
    180c:	82 8d       	ldd	r24, Z+26	; 0x1a
		(MSInterfaceInfo->State.CommandBlock.Flags              & 0x1F)                              ||
		(MSInterfaceInfo->State.CommandBlock.SCSICommandLength == 0)                                 ||
    180e:	88 23       	and	r24, r24
		  return false;
	}

	if ((MSInterfaceInfo->State.CommandBlock.Signature         != CPU_TO_LE32(MS_CBW_SIGNATURE))     ||
	    (MSInterfaceInfo->State.CommandBlock.LUN               >= MSInterfaceInfo->Config.TotalLUNs) ||
		(MSInterfaceInfo->State.CommandBlock.Flags              & 0x1F)                              ||
    1810:	11 f0       	breq	.+4      	; 0x1816 <MS_Device_USBTask+0x9c>
    1812:	81 31       	cpi	r24, 0x11	; 17
		(MSInterfaceInfo->State.CommandBlock.SCSICommandLength == 0)                                 ||
    1814:	80 f0       	brcs	.+32     	; 0x1836 <MS_Device_USBTask+0xbc>
    1816:	80 91 eb 00 	lds	r24, 0x00EB
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    181a:	80 62       	ori	r24, 0x20	; 32
    181c:	80 93 eb 00 	sts	0x00EB, r24
    1820:	f8 01       	movw	r30, r16
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1822:	81 81       	ldd	r24, Z+1	; 0x01
    1824:	8f 70       	andi	r24, 0x0F	; 15
    1826:	80 93 e9 00 	sts	0x00E9, r24
    182a:	80 91 eb 00 	lds	r24, 0x00EB
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    182e:	80 62       	ori	r24, 0x20	; 32
    1830:	80 93 eb 00 	sts	0x00EB, r24
    1834:	84 c0       	rjmp	.+264    	; 0x193e <MS_Device_USBTask+0x1c4>
    1836:	1a 82       	std	Y+2, r1	; 0x02
		Endpoint_StallTransaction();

		return false;
	}

	BytesProcessed = 0;
    1838:	19 82       	std	Y+1, r1	; 0x01
    183a:	9b e1       	ldi	r25, 0x1B	; 27
	while (Endpoint_Read_Stream_LE(&MSInterfaceInfo->State.CommandBlock.SCSICommandData,
    183c:	e9 2e       	mov	r14, r25
    183e:	f1 2c       	mov	r15, r1
    1840:	e0 0e       	add	r14, r16
    1842:	f1 1e       	adc	r15, r17
    1844:	05 c0       	rjmp	.+10     	; 0x1850 <MS_Device_USBTask+0xd6>
    1846:	f8 01       	movw	r30, r16
	                                MSInterfaceInfo->State.CommandBlock.SCSICommandLength, &BytesProcessed) ==
	                                ENDPOINT_RWSTREAM_IncompleteTransfer)
	{
		if (MSInterfaceInfo->State.IsMassStoreReset)
    1848:	80 ad       	sts	0x60, r24
    184a:	88 23       	and	r24, r24
    184c:	09 f0       	breq	.+2      	; 0x1850 <MS_Device_USBTask+0xd6>
    184e:	77 c0       	rjmp	.+238    	; 0x193e <MS_Device_USBTask+0x1c4>
    1850:	f8 01       	movw	r30, r16

		return false;
	}

	BytesProcessed = 0;
	while (Endpoint_Read_Stream_LE(&MSInterfaceInfo->State.CommandBlock.SCSICommandData,
    1852:	62 8d       	ldd	r22, Z+26	; 0x1a
    1854:	c7 01       	movw	r24, r14
    1856:	70 e0       	ldi	r23, 0x00	; 0
    1858:	ae 01       	movw	r20, r28
    185a:	4f 5f       	subi	r20, 0xFF	; 255
    185c:	5f 4f       	sbci	r21, 0xFF	; 255
    185e:	73 da       	rcall	.-2842   	; 0xd46 <Endpoint_Read_Stream_LE>
    1860:	85 30       	cpi	r24, 0x05	; 5
    1862:	89 f3       	breq	.-30     	; 0x1846 <MS_Device_USBTask+0xcc>
    1864:	80 91 e8 00 	lds	r24, 0x00E8
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    1868:	8b 77       	andi	r24, 0x7B	; 123
    186a:	80 93 e8 00 	sts	0x00E8, r24
    186e:	f8 01       	movw	r30, r16
    1870:	80 8d       	ldd	r24, Z+24	; 0x18

	if (Endpoint_IsOUTReceived())
	{
		if (MS_Device_ReadInCommandBlock(MSInterfaceInfo))
		{
			if (MSInterfaceInfo->State.CommandBlock.Flags & MS_COMMAND_DIR_DATA_IN)
    1872:	87 ff       	sbrs	r24, 7
    1874:	04 c0       	rjmp	.+8      	; 0x187e <MS_Device_USBTask+0x104>
    1876:	81 81       	ldd	r24, Z+1	; 0x01
    1878:	8f 70       	andi	r24, 0x0F	; 15
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    187a:	80 93 e9 00 	sts	0x00E9, r24
    187e:	c8 01       	movw	r24, r16
    1880:	0e 94 03 01 	call	0x206	; 0x206 <CALLBACK_MS_Device_SCSICommandReceived>
			  Endpoint_SelectEndpoint(MSInterfaceInfo->Config.DataINEndpoint.Address);

			bool SCSICommandResult = CALLBACK_MS_Device_SCSICommandReceived(MSInterfaceInfo);
    1884:	91 e0       	ldi	r25, 0x01	; 1
    1886:	98 27       	eor	r25, r24
	  return false;

	return true;
}

void MS_Device_USBTask(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
    1888:	f8 01       	movw	r30, r16
    188a:	97 ab       	sts	0x57, r25
			if (MSInterfaceInfo->State.CommandBlock.Flags & MS_COMMAND_DIR_DATA_IN)
			  Endpoint_SelectEndpoint(MSInterfaceInfo->Config.DataINEndpoint.Address);

			bool SCSICommandResult = CALLBACK_MS_Device_SCSICommandReceived(MSInterfaceInfo);

			MSInterfaceInfo->State.CommandStatus.Status              = (SCSICommandResult) ? MS_SCSI_COMMAND_Pass : MS_SCSI_COMMAND_Fail;
    188c:	45 e5       	ldi	r20, 0x55	; 85
    188e:	53 e5       	ldi	r21, 0x53	; 83
			MSInterfaceInfo->State.CommandStatus.Signature           = CPU_TO_LE32(MS_CSW_SIGNATURE);
    1890:	62 e4       	ldi	r22, 0x42	; 66
    1892:	73 e5       	ldi	r23, 0x53	; 83
    1894:	43 a7       	lds	r20, 0x73
    1896:	54 a7       	lds	r21, 0x74
    1898:	65 a7       	lds	r22, 0x75
    189a:	76 a7       	lds	r23, 0x76
    189c:	40 89       	ldd	r20, Z+16	; 0x10
    189e:	51 89       	ldd	r21, Z+17	; 0x11
			MSInterfaceInfo->State.CommandStatus.Tag                 = MSInterfaceInfo->State.CommandBlock.Tag;
    18a0:	62 89       	ldd	r22, Z+18	; 0x12
    18a2:	73 89       	ldd	r23, Z+19	; 0x13
    18a4:	47 a7       	lds	r20, 0x77
    18a6:	50 ab       	sts	0x50, r21
    18a8:	61 ab       	sts	0x51, r22
    18aa:	72 ab       	sts	0x52, r23
    18ac:	44 89       	ldd	r20, Z+20	; 0x14
    18ae:	55 89       	ldd	r21, Z+21	; 0x15
			MSInterfaceInfo->State.CommandStatus.DataTransferResidue = MSInterfaceInfo->State.CommandBlock.DataTransferLength;
    18b0:	66 89       	ldd	r22, Z+22	; 0x16
    18b2:	77 89       	ldd	r23, Z+23	; 0x17
    18b4:	43 ab       	sts	0x53, r20
    18b6:	54 ab       	sts	0x54, r21
    18b8:	65 ab       	sts	0x55, r22
    18ba:	76 ab       	sts	0x56, r23
    18bc:	88 23       	and	r24, r24
    18be:	51 f4       	brne	.+20     	; 0x18d4 <MS_Device_USBTask+0x15a>

			if (!(SCSICommandResult) && (le32_to_cpu(MSInterfaceInfo->State.CommandStatus.DataTransferResidue)))
    18c0:	41 15       	cp	r20, r1
    18c2:	51 05       	cpc	r21, r1
    18c4:	61 05       	cpc	r22, r1
    18c6:	71 05       	cpc	r23, r1
    18c8:	29 f0       	breq	.+10     	; 0x18d4 <MS_Device_USBTask+0x15a>
    18ca:	80 91 eb 00 	lds	r24, 0x00EB
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    18ce:	80 62       	ori	r24, 0x20	; 32
    18d0:	80 93 eb 00 	sts	0x00EB, r24
    18d4:	f8 01       	movw	r30, r16
    18d6:	86 81       	ldd	r24, Z+6	; 0x06
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    18d8:	8f 70       	andi	r24, 0x0F	; 15
    18da:	80 93 e9 00 	sts	0x00E9, r24
    18de:	03 c0       	rjmp	.+6      	; 0x18e6 <MS_Device_USBTask+0x16c>
    18e0:	80 ad       	sts	0x60, r24
    18e2:	88 23       	and	r24, r24
	{
		#if !defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_USBTask();
		#endif

		if (MSInterfaceInfo->State.IsMassStoreReset)
    18e4:	61 f5       	brne	.+88     	; 0x193e <MS_Device_USBTask+0x1c4>
    18e6:	80 91 eb 00 	lds	r24, 0x00EB
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    18ea:	f8 01       	movw	r30, r16
    18ec:	85 fd       	sbrc	r24, 5
    18ee:	f8 cf       	rjmp	.-16     	; 0x18e0 <MS_Device_USBTask+0x166>

static void MS_Device_ReturnCommandStatus(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
	Endpoint_SelectEndpoint(MSInterfaceInfo->Config.DataOUTEndpoint.Address);

	while (Endpoint_IsStalled())
    18f0:	81 81       	ldd	r24, Z+1	; 0x01
    18f2:	8f 70       	andi	r24, 0x0F	; 15
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    18f4:	80 93 e9 00 	sts	0x00E9, r24
    18f8:	04 c0       	rjmp	.+8      	; 0x1902 <MS_Device_USBTask+0x188>
    18fa:	f8 01       	movw	r30, r16
    18fc:	80 ad       	sts	0x60, r24
	{
		#if !defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_USBTask();
		#endif

		if (MSInterfaceInfo->State.IsMassStoreReset)
    18fe:	88 23       	and	r24, r24
    1900:	f1 f4       	brne	.+60     	; 0x193e <MS_Device_USBTask+0x1c4>
    1902:	80 91 eb 00 	lds	r24, 0x00EB
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    1906:	85 fd       	sbrc	r24, 5
    1908:	f8 cf       	rjmp	.-16     	; 0x18fa <MS_Device_USBTask+0x180>
		  return;
	}

	Endpoint_SelectEndpoint(MSInterfaceInfo->Config.DataINEndpoint.Address);

	while (Endpoint_IsStalled())
    190a:	1a 82       	std	Y+2, r1	; 0x02
    190c:	19 82       	std	Y+1, r1	; 0x01

		if (MSInterfaceInfo->State.IsMassStoreReset)
		  return;
	}

	uint16_t BytesProcessed = 0;
    190e:	8b e2       	ldi	r24, 0x2B	; 43
    1910:	e8 2e       	mov	r14, r24
	while (Endpoint_Write_Stream_LE(&MSInterfaceInfo->State.CommandStatus,
    1912:	f1 2c       	mov	r15, r1
    1914:	e0 0e       	add	r14, r16
    1916:	f1 1e       	adc	r15, r17
    1918:	04 c0       	rjmp	.+8      	; 0x1922 <MS_Device_USBTask+0x1a8>
    191a:	f8 01       	movw	r30, r16
    191c:	80 ad       	sts	0x60, r24
	                                sizeof(MS_CommandStatusWrapper_t), &BytesProcessed) ==
	                                ENDPOINT_RWSTREAM_IncompleteTransfer)
	{
		if (MSInterfaceInfo->State.IsMassStoreReset)
    191e:	88 23       	and	r24, r24
    1920:	71 f4       	brne	.+28     	; 0x193e <MS_Device_USBTask+0x1c4>
    1922:	c7 01       	movw	r24, r14
    1924:	6d e0       	ldi	r22, 0x0D	; 13
		if (MSInterfaceInfo->State.IsMassStoreReset)
		  return;
	}

	uint16_t BytesProcessed = 0;
	while (Endpoint_Write_Stream_LE(&MSInterfaceInfo->State.CommandStatus,
    1926:	70 e0       	ldi	r23, 0x00	; 0
    1928:	ae 01       	movw	r20, r28
    192a:	4f 5f       	subi	r20, 0xFF	; 255
    192c:	5f 4f       	sbci	r21, 0xFF	; 255
    192e:	66 d9       	rcall	.-3380   	; 0xbfc <Endpoint_Write_Stream_LE>
    1930:	85 30       	cpi	r24, 0x05	; 5
    1932:	99 f3       	breq	.-26     	; 0x191a <MS_Device_USBTask+0x1a0>
    1934:	80 91 e8 00 	lds	r24, 0x00E8
    1938:	8e 77       	andi	r24, 0x7E	; 126
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    193a:	80 93 e8 00 	sts	0x00E8, r24
    193e:	f8 01       	movw	r30, r16
    1940:	80 ad       	sts	0x60, r24
    1942:	88 23       	and	r24, r24

			MS_Device_ReturnCommandStatus(MSInterfaceInfo);
		}
	}

	if (MSInterfaceInfo->State.IsMassStoreReset)
    1944:	b1 f1       	breq	.+108    	; 0x19b2 <MS_Device_USBTask+0x238>
    1946:	26 81       	ldd	r18, Z+6	; 0x06
    1948:	2f 70       	andi	r18, 0x0F	; 15
    194a:	81 e0       	ldi	r24, 0x01	; 1
			 *  \param[in] Address  Endpoint address whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t Address)
			{
				UERST = (1 << (Address & ENDPOINT_EPNUM_MASK));
    194c:	90 e0       	ldi	r25, 0x00	; 0
    194e:	ac 01       	movw	r20, r24
    1950:	02 c0       	rjmp	.+4      	; 0x1956 <MS_Device_USBTask+0x1dc>
    1952:	44 0f       	add	r20, r20
    1954:	55 1f       	adc	r21, r21
    1956:	2a 95       	dec	r18
    1958:	e2 f7       	brpl	.-8      	; 0x1952 <MS_Device_USBTask+0x1d8>
    195a:	40 93 ea 00 	sts	0x00EA, r20
    195e:	10 92 ea 00 	sts	0x00EA, r1
    1962:	21 81       	ldd	r18, Z+1	; 0x01
				UERST = 0;
    1964:	2f 70       	andi	r18, 0x0F	; 15
    1966:	02 c0       	rjmp	.+4      	; 0x196c <MS_Device_USBTask+0x1f2>
			 *  \param[in] Address  Endpoint address whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t Address)
			{
				UERST = (1 << (Address & ENDPOINT_EPNUM_MASK));
    1968:	88 0f       	add	r24, r24
    196a:	99 1f       	adc	r25, r25
    196c:	2a 95       	dec	r18
    196e:	e2 f7       	brpl	.-8      	; 0x1968 <MS_Device_USBTask+0x1ee>
    1970:	80 93 ea 00 	sts	0x00EA, r24
    1974:	10 92 ea 00 	sts	0x00EA, r1
    1978:	86 81       	ldd	r24, Z+6	; 0x06
				UERST = 0;
    197a:	8f 70       	andi	r24, 0x0F	; 15
    197c:	80 93 e9 00 	sts	0x00E9, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1980:	80 91 eb 00 	lds	r24, 0x00EB
    1984:	80 61       	ori	r24, 0x10	; 16
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
    1986:	80 93 eb 00 	sts	0x00EB, r24
    198a:	80 91 eb 00 	lds	r24, 0x00EB
    198e:	88 60       	ori	r24, 0x08	; 8

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
    1990:	80 93 eb 00 	sts	0x00EB, r24
    1994:	81 81       	ldd	r24, Z+1	; 0x01
    1996:	8f 70       	andi	r24, 0x0F	; 15
    1998:	80 93 e9 00 	sts	0x00E9, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    199c:	80 91 eb 00 	lds	r24, 0x00EB
    19a0:	80 61       	ori	r24, 0x10	; 16
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
    19a2:	80 93 eb 00 	sts	0x00EB, r24
    19a6:	80 91 eb 00 	lds	r24, 0x00EB
    19aa:	88 60       	ori	r24, 0x08	; 8

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
    19ac:	80 93 eb 00 	sts	0x00EB, r24
    19b0:	10 ae       	sts	0xb0, r17
    19b2:	0f 90       	pop	r0
    19b4:	0f 90       	pop	r0
		Endpoint_ResetDataToggle();
		Endpoint_SelectEndpoint(MSInterfaceInfo->Config.DataINEndpoint.Address);
		Endpoint_ClearStall();
		Endpoint_ResetDataToggle();

		MSInterfaceInfo->State.IsMassStoreReset = false;
    19b6:	df 91       	pop	r29
	}
}
    19b8:	cf 91       	pop	r28
    19ba:	1f 91       	pop	r17
    19bc:	0f 91       	pop	r16
    19be:	ff 90       	pop	r15
    19c0:	ef 90       	pop	r14
    19c2:	08 95       	ret

000019c4 <_exit>:
    19c4:	f8 94       	cli

000019c6 <__stop_program>:
    19c6:	ff cf       	rjmp	.-2      	; 0x19c6 <__stop_program>
