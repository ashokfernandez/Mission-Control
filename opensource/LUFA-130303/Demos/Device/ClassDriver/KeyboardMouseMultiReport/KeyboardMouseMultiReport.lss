
KeyboardMouseMultiReport.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000020  00800100  000011a6  0000123a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000011a6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000015  00800120  00800120  0000125a  2**0
                  ALLOC
  3 .stab         00000a98  00000000  00000000  0000125c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000002aa  00000000  00000000  00001cf4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000004f0  00000000  00000000  00001fa0  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00008681  00000000  00000000  00002490  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002167  00000000  00000000  0000ab11  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00003ef8  00000000  00000000  0000cc78  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000da0  00000000  00000000  00010b70  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000388b  00000000  00000000  00011910  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00005168  00000000  00000000  0001519b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000006b0  00000000  00000000  0001a303  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	cd c0       	rjmp	.+410    	; 0x19c <__ctors_end>
       2:	00 00       	nop
       4:	e9 c0       	rjmp	.+466    	; 0x1d8 <__bad_interrupt>
       6:	00 00       	nop
       8:	e7 c0       	rjmp	.+462    	; 0x1d8 <__bad_interrupt>
       a:	00 00       	nop
       c:	e5 c0       	rjmp	.+458    	; 0x1d8 <__bad_interrupt>
       e:	00 00       	nop
      10:	e3 c0       	rjmp	.+454    	; 0x1d8 <__bad_interrupt>
      12:	00 00       	nop
      14:	e1 c0       	rjmp	.+450    	; 0x1d8 <__bad_interrupt>
      16:	00 00       	nop
      18:	df c0       	rjmp	.+446    	; 0x1d8 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	dd c0       	rjmp	.+442    	; 0x1d8 <__bad_interrupt>
      1e:	00 00       	nop
      20:	db c0       	rjmp	.+438    	; 0x1d8 <__bad_interrupt>
      22:	00 00       	nop
      24:	d9 c0       	rjmp	.+434    	; 0x1d8 <__bad_interrupt>
      26:	00 00       	nop
      28:	42 c4       	rjmp	.+2180   	; 0x8ae <__vector_10>
      2a:	00 00       	nop
      2c:	d5 c0       	rjmp	.+426    	; 0x1d8 <__bad_interrupt>
      2e:	00 00       	nop
      30:	d3 c0       	rjmp	.+422    	; 0x1d8 <__bad_interrupt>
      32:	00 00       	nop
      34:	d1 c0       	rjmp	.+418    	; 0x1d8 <__bad_interrupt>
      36:	00 00       	nop
      38:	cf c0       	rjmp	.+414    	; 0x1d8 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	cd c0       	rjmp	.+410    	; 0x1d8 <__bad_interrupt>
      3e:	00 00       	nop
      40:	cb c0       	rjmp	.+406    	; 0x1d8 <__bad_interrupt>
      42:	00 00       	nop
      44:	c9 c0       	rjmp	.+402    	; 0x1d8 <__bad_interrupt>
      46:	00 00       	nop
      48:	c7 c0       	rjmp	.+398    	; 0x1d8 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	c5 c0       	rjmp	.+394    	; 0x1d8 <__bad_interrupt>
      4e:	00 00       	nop
      50:	c3 c0       	rjmp	.+390    	; 0x1d8 <__bad_interrupt>
      52:	00 00       	nop
      54:	c1 c0       	rjmp	.+386    	; 0x1d8 <__bad_interrupt>
      56:	00 00       	nop
      58:	bf c0       	rjmp	.+382    	; 0x1d8 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	bd c0       	rjmp	.+378    	; 0x1d8 <__bad_interrupt>
      5e:	00 00       	nop
      60:	bb c0       	rjmp	.+374    	; 0x1d8 <__bad_interrupt>
      62:	00 00       	nop
      64:	b9 c0       	rjmp	.+370    	; 0x1d8 <__bad_interrupt>
      66:	00 00       	nop
      68:	b7 c0       	rjmp	.+366    	; 0x1d8 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	b5 c0       	rjmp	.+362    	; 0x1d8 <__bad_interrupt>
      6e:	00 00       	nop
      70:	b3 c0       	rjmp	.+358    	; 0x1d8 <__bad_interrupt>
      72:	00 00       	nop
      74:	b1 c0       	rjmp	.+354    	; 0x1d8 <__bad_interrupt>
      76:	00 00       	nop
      78:	af c0       	rjmp	.+350    	; 0x1d8 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	ad c0       	rjmp	.+346    	; 0x1d8 <__bad_interrupt>
      7e:	00 00       	nop
      80:	ab c0       	rjmp	.+342    	; 0x1d8 <__bad_interrupt>
      82:	00 00       	nop
      84:	a9 c0       	rjmp	.+338    	; 0x1d8 <__bad_interrupt>
      86:	00 00       	nop
      88:	a7 c0       	rjmp	.+334    	; 0x1d8 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	a5 c0       	rjmp	.+330    	; 0x1d8 <__bad_interrupt>
      8e:	00 00       	nop
      90:	a3 c0       	rjmp	.+326    	; 0x1d8 <__bad_interrupt>
      92:	00 00       	nop
      94:	a1 c0       	rjmp	.+322    	; 0x1d8 <__bad_interrupt>
      96:	00 00       	nop

00000098 <ProductString>:
      98:	36 03 4c 00 55 00 46 00 41 00 20 00 4d 00 75 00     6.L.U.F.A. .M.u.
      a8:	6c 00 74 00 69 00 20 00 48 00 49 00 44 00 20 00     l.t.i. .H.I.D. .
      b8:	52 00 65 00 70 00 6f 00 72 00 74 00 20 00 44 00     R.e.p.o.r.t. .D.
      c8:	65 00 6d 00 6f 00 00 00                             e.m.o...

000000d0 <ManufacturerString>:
      d0:	18 03 44 00 65 00 61 00 6e 00 20 00 43 00 61 00     ..D.e.a.n. .C.a.
      e0:	6d 00 65 00 72 00 61 00 00 00                       m.e.r.a...

000000ea <LanguageString>:
      ea:	04 03 09 04                                         ....

000000ee <ConfigurationDescriptor>:
      ee:	09 02 22 00 01 01 00 c0 32 09 04 00 00 01 03 00     ..".....2.......
      fe:	00 00 09 21 11 01 00 01 22 79 00 07 05 81 03 08     ...!...."y......
     10e:	00 05                                               ..

00000110 <DeviceDescriptor>:
     110:	12 01 10 01 00 00 00 08 eb 03 66 20 01 00 01 02     ..........f ....
     120:	00 01                                               ..

00000122 <HIDReport>:
     122:	05 01 09 02 a1 01 85 01 09 01 a1 00 05 09 19 01     ................
     132:	29 03 15 00 25 01 95 03 75 01 81 02 95 01 75 05     )...%...u.....u.
     142:	81 01 05 01 09 30 09 31 15 ff 25 01 35 ff 45 01     .....0.1..%.5.E.
     152:	95 02 75 08 81 06 c0 c0 05 01 09 06 a1 01 85 02     ..u.............
     162:	05 07 19 e0 29 e7 15 00 25 01 75 01 95 08 81 02     ....)...%.u.....
     172:	95 01 75 08 81 01 05 08 19 01 29 05 95 05 75 01     ..u.......)...u.
     182:	91 02 95 01 75 03 91 01 15 00 25 65 05 07 19 00     ....u.....%e....
     192:	29 65 95 06 75 08 81 00 c0 00                       )e..u.....

0000019c <__ctors_end>:
     19c:	11 24       	eor	r1, r1
     19e:	1f be       	out	0x3f, r1	; 63
     1a0:	cf ef       	ldi	r28, 0xFF	; 255
     1a2:	d0 e2       	ldi	r29, 0x20	; 32
     1a4:	de bf       	out	0x3e, r29	; 62
     1a6:	cd bf       	out	0x3d, r28	; 61

000001a8 <__do_copy_data>:
     1a8:	11 e0       	ldi	r17, 0x01	; 1
     1aa:	a0 e0       	ldi	r26, 0x00	; 0
     1ac:	b1 e0       	ldi	r27, 0x01	; 1
     1ae:	e6 ea       	ldi	r30, 0xA6	; 166
     1b0:	f1 e1       	ldi	r31, 0x11	; 17
     1b2:	00 e0       	ldi	r16, 0x00	; 0
     1b4:	0b bf       	out	0x3b, r16	; 59
     1b6:	02 c0       	rjmp	.+4      	; 0x1bc <__do_copy_data+0x14>
     1b8:	07 90       	elpm	r0, Z+
     1ba:	0d 92       	st	X+, r0
     1bc:	a0 32       	cpi	r26, 0x20	; 32
     1be:	b1 07       	cpc	r27, r17
     1c0:	d9 f7       	brne	.-10     	; 0x1b8 <__do_copy_data+0x10>
     1c2:	1b be       	out	0x3b, r1	; 59

000001c4 <__do_clear_bss>:
     1c4:	11 e0       	ldi	r17, 0x01	; 1
     1c6:	a0 e2       	ldi	r26, 0x20	; 32
     1c8:	b1 e0       	ldi	r27, 0x01	; 1
     1ca:	01 c0       	rjmp	.+2      	; 0x1ce <.do_clear_bss_start>

000001cc <.do_clear_bss_loop>:
     1cc:	1d 92       	st	X+, r1

000001ce <.do_clear_bss_start>:
     1ce:	a5 33       	cpi	r26, 0x35	; 53
     1d0:	b1 07       	cpc	r27, r17
     1d2:	e1 f7       	brne	.-8      	; 0x1cc <.do_clear_bss_loop>
     1d4:	2e d0       	rcall	.+92     	; 0x232 <main>
     1d6:	e5 c7       	rjmp	.+4042   	; 0x11a2 <_exit>

000001d8 <__bad_interrupt>:
     1d8:	13 cf       	rjmp	.-474    	; 0x0 <__vectors>

000001da <LEDs_SetAllLEDs>:
				PORTD &= ~LEDMask;
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
			{
				PORTD = ((PORTD & ~LEDS_ALL_LEDS) | LEDMask);
     1da:	9b b1       	in	r25, 0x0b	; 11
     1dc:	9f 70       	andi	r25, 0x0F	; 15
     1de:	98 2b       	or	r25, r24
     1e0:	9b b9       	out	0x0b, r25	; 11
			}
     1e2:	08 95       	ret

000001e4 <SetupHardware>:

/** Configures the board hardware and chip peripherals for the demo's functionality. */
void SetupHardware()
{
	/* Disable watchdog if enabled by bootloader/fuses */
	MCUSR &= ~(1 << WDRF);
     1e4:	84 b7       	in	r24, 0x34	; 52
     1e6:	87 7f       	andi	r24, 0xF7	; 247
     1e8:	84 bf       	out	0x34, r24	; 52
	wdt_disable();
     1ea:	88 e1       	ldi	r24, 0x18	; 24
     1ec:	0f b6       	in	r0, 0x3f	; 63
     1ee:	f8 94       	cli
     1f0:	80 93 60 00 	sts	0x0060, r24
     1f4:	10 92 60 00 	sts	0x0060, r1
     1f8:	0f be       	out	0x3f, r0	; 63
The type of x is clock_div_t.
*/
void clock_prescale_set(clock_div_t __x)
{
    uint8_t __tmp = _BV(CLKPCE);
    __asm__ __volatile__ (
     1fa:	90 e0       	ldi	r25, 0x00	; 0
     1fc:	80 e8       	ldi	r24, 0x80	; 128
     1fe:	0f b6       	in	r0, 0x3f	; 63
     200:	f8 94       	cli
     202:	80 93 61 00 	sts	0x0061, r24
     206:	90 93 61 00 	sts	0x0061, r25
     20a:	0f be       	out	0x3f, r0	; 63

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void Joystick_Init(void)
			{
				DDRB  &= ~JOY_BMASK;
     20c:	84 b1       	in	r24, 0x04	; 4
     20e:	8f 71       	andi	r24, 0x1F	; 31
     210:	84 b9       	out	0x04, r24	; 4
				DDRE  &= ~JOY_EMASK;
     212:	8d b1       	in	r24, 0x0d	; 13
     214:	8f 7c       	andi	r24, 0xCF	; 207
     216:	8d b9       	out	0x0d, r24	; 13

				PORTB |=  JOY_BMASK;
     218:	85 b1       	in	r24, 0x05	; 5
     21a:	80 6e       	ori	r24, 0xE0	; 224
     21c:	85 b9       	out	0x05, r24	; 5
				PORTE |=  JOY_EMASK;
     21e:	8e b1       	in	r24, 0x0e	; 14
     220:	80 63       	ori	r24, 0x30	; 48
     222:	8e b9       	out	0x0e, r24	; 14

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void LEDs_Init(void)
			{
				DDRD  |=  LEDS_ALL_LEDS;
     224:	8a b1       	in	r24, 0x0a	; 10
     226:	80 6f       	ori	r24, 0xF0	; 240
     228:	8a b9       	out	0x0a, r24	; 10
				PORTD &= ~LEDS_ALL_LEDS;
     22a:	8b b1       	in	r24, 0x0b	; 11
     22c:	8f 70       	andi	r24, 0x0F	; 15
     22e:	8b b9       	out	0x0b, r24	; 11
	clock_prescale_set(clock_div_1);

	/* Hardware Initialization */
	Joystick_Init();
	LEDs_Init();
	USB_Init();
     230:	23 c3       	rjmp	.+1606   	; 0x878 <USB_Init>

00000232 <main>:
     232:	d8 df       	rcall	.-80     	; 0x1e4 <SetupHardware>
}
     234:	80 e1       	ldi	r24, 0x10	; 16
 */
int main(void)
{
	SetupHardware();

	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
     236:	d1 df       	rcall	.-94     	; 0x1da <LEDs_SetAllLEDs>
     238:	78 94       	sei
     23a:	80 e0       	ldi	r24, 0x00	; 0
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				sei();
     23c:	91 e0       	ldi	r25, 0x01	; 1
	GlobalInterruptEnable();

	for (;;)
	{
		HID_Device_USBTask(&Device_HID_Interface);
     23e:	ce d6       	rcall	.+3484   	; 0xfdc <HID_Device_USBTask>
     240:	65 d5       	rcall	.+2762   	; 0xd0c <USB_USBTask>
     242:	fb cf       	rjmp	.-10     	; 0x23a <main+0x8>

00000244 <EVENT_USB_Device_Connect>:
     244:	80 ea       	ldi	r24, 0xA0	; 160
		USB_USBTask();
     246:	c9 cf       	rjmp	.-110    	; 0x1da <LEDs_SetAllLEDs>

00000248 <EVENT_USB_Device_Disconnect>:
     248:	80 e1       	ldi	r24, 0x10	; 16
     24a:	c7 cf       	rjmp	.-114    	; 0x1da <LEDs_SetAllLEDs>

0000024c <EVENT_USB_Device_ConfigurationChanged>:
}

/** Event handler for the library USB Disconnection event. */
void EVENT_USB_Device_Disconnect(void)
{
    LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
     24c:	80 e0       	ldi	r24, 0x00	; 0
}
     24e:	91 e0       	ldi	r25, 0x01	; 1
/** Event handler for the library USB Configuration Changed event. */
void EVENT_USB_Device_ConfigurationChanged(void)
{
	bool ConfigSuccess = true;

	ConfigSuccess &= HID_Device_ConfigureEndpoints(&Device_HID_Interface);
     250:	ac d6       	rcall	.+3416   	; 0xfaa <HID_Device_ConfigureEndpoints>
     252:	90 91 e2 00 	lds	r25, 0x00E2
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
     256:	94 60       	ori	r25, 0x04	; 4
     258:	90 93 e2 00 	sts	0x00E2, r25
     25c:	88 23       	and	r24, r24

	USB_Device_EnableSOFEvents();

	LEDs_SetAllLEDs(ConfigSuccess ? LEDMASK_USB_READY : LEDMASK_USB_ERROR);
     25e:	11 f0       	breq	.+4      	; 0x264 <EVENT_USB_Device_ConfigurationChanged+0x18>
     260:	80 e6       	ldi	r24, 0x60	; 96
     262:	01 c0       	rjmp	.+2      	; 0x266 <EVENT_USB_Device_ConfigurationChanged+0x1a>
     264:	80 e9       	ldi	r24, 0x90	; 144
     266:	b9 cf       	rjmp	.-142    	; 0x1da <LEDs_SetAllLEDs>

00000268 <EVENT_USB_Device_ControlRequest>:
     268:	80 e0       	ldi	r24, 0x00	; 0
     26a:	91 e0       	ldi	r25, 0x01	; 1
}
     26c:	6b c5       	rjmp	.+2774   	; 0xd44 <HID_Device_ProcessControlRequest>

0000026e <EVENT_USB_Device_StartOfFrame>:

/** Event handler for the library USB Control Request reception event. */
void EVENT_USB_Device_ControlRequest(void)
{
	HID_Device_ProcessControlRequest(&Device_HID_Interface);
     26e:	80 91 0e 01 	lds	r24, 0x010E
			 *  \param[in,out] HIDInterfaceInfo  Pointer to a structure containing a HID Class configuration and state.
			 */
			static inline void HID_Device_MillisecondElapsed(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo) ATTR_ALWAYS_INLINE ATTR_NON_NULL_PTR_ARG(1);
			static inline void HID_Device_MillisecondElapsed(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
			{
				if (HIDInterfaceInfo->State.IdleMSRemaining)
     272:	90 91 0f 01 	lds	r25, 0x010F
     276:	00 97       	sbiw	r24, 0x00	; 0
     278:	29 f0       	breq	.+10     	; 0x284 <EVENT_USB_Device_StartOfFrame+0x16>
				  HIDInterfaceInfo->State.IdleMSRemaining--;
     27a:	01 97       	sbiw	r24, 0x01	; 1
     27c:	90 93 0f 01 	sts	0x010F, r25
     280:	80 93 0e 01 	sts	0x010E, r24
     284:	08 95       	ret

00000286 <CALLBACK_HID_Device_CreateHIDReport>:
bool CALLBACK_HID_Device_CreateHIDReport(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo,
                                         uint8_t* const ReportID,
                                         const uint8_t ReportType,
                                         void* ReportData,
                                         uint16_t* const ReportSize)
{
     286:	0f 93       	push	r16
     288:	1f 93       	push	r17
     28a:	cf 93       	push	r28
     28c:	df 93       	push	r29
     28e:	db 01       	movw	r26, r22
     290:	f9 01       	movw	r30, r18
     292:	e8 01       	movw	r28, r16
			}

			static inline uint8_t Joystick_GetStatus(void) ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t Joystick_GetStatus(void)
			{
				return (((uint8_t)~PINB & JOY_BMASK) | (((uint8_t)~PINE & JOY_EMASK) >> JOY_PORTE_MASK_SHIFT));
     294:	23 b1       	in	r18, 0x03	; 3
     296:	8c b1       	in	r24, 0x0c	; 12
     298:	80 95       	com	r24
     29a:	90 e0       	ldi	r25, 0x00	; 0
     29c:	80 73       	andi	r24, 0x30	; 48
     29e:	90 70       	andi	r25, 0x00	; 0
     2a0:	95 95       	asr	r25
     2a2:	87 95       	ror	r24
     2a4:	20 95       	com	r18
     2a6:	20 7e       	andi	r18, 0xE0	; 224
     2a8:	28 2b       	or	r18, r24
			}

			static inline uint8_t Buttons_GetStatus(void) ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t Buttons_GetStatus(void)
			{
				return ((PINE & BUTTONS_BUTTON1) ^ BUTTONS_BUTTON1);
     2aa:	8c b1       	in	r24, 0x0c	; 12
	uint8_t JoyStatus_LCL    = Joystick_GetStatus();
	uint8_t ButtonStatus_LCL = Buttons_GetStatus();

	if (!(ButtonStatus_LCL & BUTTONS_BUTTON1))
     2ac:	82 ff       	sbrs	r24, 2
     2ae:	1e c0       	rjmp	.+60     	; 0x2ec <CALLBACK_HID_Device_CreateHIDReport+0x66>
	{
		USB_KeyboardReport_Data_t* KeyboardReport = (USB_KeyboardReport_Data_t*)ReportData;

		KeyboardReport->Modifier = HID_KEYBOARD_MODIFIER_LEFTSHIFT;
     2b0:	82 e0       	ldi	r24, 0x02	; 2
     2b2:	80 83       	st	Z, r24

		if (JoyStatus_LCL & JOY_UP)
     2b4:	27 ff       	sbrs	r18, 7
     2b6:	02 c0       	rjmp	.+4      	; 0x2bc <CALLBACK_HID_Device_CreateHIDReport+0x36>
		  KeyboardReport->KeyCode[0] = HID_KEYBOARD_SC_A;
     2b8:	84 e0       	ldi	r24, 0x04	; 4
     2ba:	03 c0       	rjmp	.+6      	; 0x2c2 <CALLBACK_HID_Device_CreateHIDReport+0x3c>
		else if (JoyStatus_LCL & JOY_DOWN)
     2bc:	24 ff       	sbrs	r18, 4
     2be:	02 c0       	rjmp	.+4      	; 0x2c4 <CALLBACK_HID_Device_CreateHIDReport+0x3e>
		  KeyboardReport->KeyCode[0] = HID_KEYBOARD_SC_B;
     2c0:	85 e0       	ldi	r24, 0x05	; 5
     2c2:	82 83       	std	Z+2, r24	; 0x02

		if (JoyStatus_LCL & JOY_LEFT)
     2c4:	26 ff       	sbrs	r18, 6
     2c6:	02 c0       	rjmp	.+4      	; 0x2cc <CALLBACK_HID_Device_CreateHIDReport+0x46>
		  KeyboardReport->KeyCode[0] = HID_KEYBOARD_SC_C;
     2c8:	86 e0       	ldi	r24, 0x06	; 6
     2ca:	03 c0       	rjmp	.+6      	; 0x2d2 <CALLBACK_HID_Device_CreateHIDReport+0x4c>
		else if (JoyStatus_LCL & JOY_RIGHT)
     2cc:	23 ff       	sbrs	r18, 3
     2ce:	02 c0       	rjmp	.+4      	; 0x2d4 <CALLBACK_HID_Device_CreateHIDReport+0x4e>
		  KeyboardReport->KeyCode[0] = HID_KEYBOARD_SC_D;
     2d0:	87 e0       	ldi	r24, 0x07	; 7
     2d2:	82 83       	std	Z+2, r24	; 0x02

		if (JoyStatus_LCL & JOY_PRESS)
     2d4:	25 ff       	sbrs	r18, 5
     2d6:	02 c0       	rjmp	.+4      	; 0x2dc <CALLBACK_HID_Device_CreateHIDReport+0x56>
		  KeyboardReport->KeyCode[0] = HID_KEYBOARD_SC_E;
     2d8:	88 e0       	ldi	r24, 0x08	; 8
     2da:	82 83       	std	Z+2, r24	; 0x02

		*ReportID   = HID_REPORTID_KeyboardReport;
     2dc:	82 e0       	ldi	r24, 0x02	; 2
     2de:	8c 93       	st	X, r24
		*ReportSize = sizeof(USB_KeyboardReport_Data_t);
     2e0:	88 e0       	ldi	r24, 0x08	; 8
     2e2:	90 e0       	ldi	r25, 0x00	; 0
     2e4:	99 83       	std	Y+1, r25	; 0x01
     2e6:	88 83       	st	Y, r24
		return false;
     2e8:	80 e0       	ldi	r24, 0x00	; 0
     2ea:	1c c0       	rjmp	.+56     	; 0x324 <CALLBACK_HID_Device_CreateHIDReport+0x9e>
	}
	else
	{
		USB_MouseReport_Data_t* MouseReport = (USB_MouseReport_Data_t*)ReportData;

		if (JoyStatus_LCL & JOY_UP)
     2ec:	27 ff       	sbrs	r18, 7
     2ee:	02 c0       	rjmp	.+4      	; 0x2f4 <CALLBACK_HID_Device_CreateHIDReport+0x6e>
		  MouseReport->Y = -1;
     2f0:	8f ef       	ldi	r24, 0xFF	; 255
     2f2:	03 c0       	rjmp	.+6      	; 0x2fa <CALLBACK_HID_Device_CreateHIDReport+0x74>
		else if (JoyStatus_LCL & JOY_DOWN)
     2f4:	24 ff       	sbrs	r18, 4
     2f6:	02 c0       	rjmp	.+4      	; 0x2fc <CALLBACK_HID_Device_CreateHIDReport+0x76>
		  MouseReport->Y =  1;
     2f8:	81 e0       	ldi	r24, 0x01	; 1
     2fa:	82 83       	std	Z+2, r24	; 0x02

		if (JoyStatus_LCL & JOY_LEFT)
     2fc:	26 ff       	sbrs	r18, 6
     2fe:	02 c0       	rjmp	.+4      	; 0x304 <CALLBACK_HID_Device_CreateHIDReport+0x7e>
		  MouseReport->X = -1;
     300:	8f ef       	ldi	r24, 0xFF	; 255
     302:	03 c0       	rjmp	.+6      	; 0x30a <CALLBACK_HID_Device_CreateHIDReport+0x84>
		else if (JoyStatus_LCL & JOY_RIGHT)
     304:	23 ff       	sbrs	r18, 3
     306:	02 c0       	rjmp	.+4      	; 0x30c <CALLBACK_HID_Device_CreateHIDReport+0x86>
		  MouseReport->X =  1;
     308:	81 e0       	ldi	r24, 0x01	; 1
     30a:	81 83       	std	Z+1, r24	; 0x01

		if (JoyStatus_LCL & JOY_PRESS)
     30c:	25 ff       	sbrs	r18, 5
     30e:	03 c0       	rjmp	.+6      	; 0x316 <CALLBACK_HID_Device_CreateHIDReport+0x90>
		  MouseReport->Button |= (1 << 0);
     310:	80 81       	ld	r24, Z
     312:	81 60       	ori	r24, 0x01	; 1
     314:	80 83       	st	Z, r24

		*ReportID   = HID_REPORTID_MouseReport;
     316:	81 e0       	ldi	r24, 0x01	; 1
     318:	8c 93       	st	X, r24
		*ReportSize = sizeof(USB_MouseReport_Data_t);
     31a:	83 e0       	ldi	r24, 0x03	; 3
     31c:	90 e0       	ldi	r25, 0x00	; 0
     31e:	99 83       	std	Y+1, r25	; 0x01
     320:	88 83       	st	Y, r24
		return true;
     322:	81 e0       	ldi	r24, 0x01	; 1
	}
}
     324:	df 91       	pop	r29
     326:	cf 91       	pop	r28
     328:	1f 91       	pop	r17
     32a:	0f 91       	pop	r16
     32c:	08 95       	ret

0000032e <CALLBACK_HID_Device_ProcessHIDReport>:
                                          const uint16_t ReportSize)
{
	uint8_t  LEDMask   = LEDS_NO_LEDS;
	uint8_t* LEDReport = (uint8_t*)ReportData;

	if (*LEDReport & HID_KEYBOARD_LED_NUMLOCK)
     32e:	f9 01       	movw	r30, r18
     330:	90 81       	ld	r25, Z
     332:	90 ff       	sbrs	r25, 0
     334:	02 c0       	rjmp	.+4      	; 0x33a <CALLBACK_HID_Device_ProcessHIDReport+0xc>
	  LEDMask |= LEDS_LED1;
     336:	80 e1       	ldi	r24, 0x10	; 16
     338:	01 c0       	rjmp	.+2      	; 0x33c <CALLBACK_HID_Device_ProcessHIDReport+0xe>
                                          const uint8_t ReportID,
                                          const uint8_t ReportType,
                                          const void* ReportData,
                                          const uint16_t ReportSize)
{
	uint8_t  LEDMask   = LEDS_NO_LEDS;
     33a:	80 e0       	ldi	r24, 0x00	; 0
	uint8_t* LEDReport = (uint8_t*)ReportData;

	if (*LEDReport & HID_KEYBOARD_LED_NUMLOCK)
	  LEDMask |= LEDS_LED1;

	if (*LEDReport & HID_KEYBOARD_LED_CAPSLOCK)
     33c:	91 fd       	sbrc	r25, 1
	  LEDMask |= LEDS_LED3;
     33e:	80 68       	ori	r24, 0x80	; 128

	if (*LEDReport & HID_KEYBOARD_LED_SCROLLLOCK)
     340:	92 fd       	sbrc	r25, 2
	  LEDMask |= LEDS_LED4;
     342:	80 64       	ori	r24, 0x40	; 64

	LEDs_SetAllLEDs(LEDMask);
     344:	4a cf       	rjmp	.-364    	; 0x1da <LEDs_SetAllLEDs>

00000346 <CALLBACK_USB_GetDescriptor>:
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
     346:	93 30       	cpi	r25, 0x03	; 3
     348:	89 f0       	breq	.+34     	; 0x36c <CALLBACK_USB_GetDescriptor+0x26>
     34a:	94 30       	cpi	r25, 0x04	; 4
     34c:	28 f4       	brcc	.+10     	; 0x358 <CALLBACK_USB_GetDescriptor+0x12>
     34e:	91 30       	cpi	r25, 0x01	; 1
     350:	49 f1       	breq	.+82     	; 0x3a4 <CALLBACK_USB_GetDescriptor+0x5e>
     352:	92 30       	cpi	r25, 0x02	; 2
     354:	61 f5       	brne	.+88     	; 0x3ae <CALLBACK_USB_GetDescriptor+0x68>
     356:	05 c0       	rjmp	.+10     	; 0x362 <CALLBACK_USB_GetDescriptor+0x1c>
     358:	91 32       	cpi	r25, 0x21	; 33
     35a:	d1 f0       	breq	.+52     	; 0x390 <CALLBACK_USB_GetDescriptor+0x4a>
     35c:	92 32       	cpi	r25, 0x22	; 34
     35e:	39 f5       	brne	.+78     	; 0x3ae <CALLBACK_USB_GetDescriptor+0x68>
     360:	1c c0       	rjmp	.+56     	; 0x39a <CALLBACK_USB_GetDescriptor+0x54>
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
			Size    = sizeof(USB_Descriptor_Configuration_t);
     362:	82 e2       	ldi	r24, 0x22	; 34
     364:	90 e0       	ldi	r25, 0x00	; 0
		case DTYPE_Device:
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
     366:	ee ee       	ldi	r30, 0xEE	; 238
     368:	f0 e0       	ldi	r31, 0x00	; 0
			Size    = sizeof(USB_Descriptor_Configuration_t);
			break;
     36a:	25 c0       	rjmp	.+74     	; 0x3b6 <CALLBACK_USB_GetDescriptor+0x70>
		case DTYPE_String:
			switch (DescriptorNumber)
     36c:	81 30       	cpi	r24, 0x01	; 1
     36e:	41 f0       	breq	.+16     	; 0x380 <CALLBACK_USB_GetDescriptor+0x3a>
     370:	81 30       	cpi	r24, 0x01	; 1
     372:	18 f0       	brcs	.+6      	; 0x37a <CALLBACK_USB_GetDescriptor+0x34>
     374:	82 30       	cpi	r24, 0x02	; 2
     376:	d9 f4       	brne	.+54     	; 0x3ae <CALLBACK_USB_GetDescriptor+0x68>
     378:	06 c0       	rjmp	.+12     	; 0x386 <CALLBACK_USB_GetDescriptor+0x40>
			{
				case 0x00:
					Address = &LanguageString;
					Size    = pgm_read_byte(&LanguageString.Header.Size);
     37a:	ea ee       	ldi	r30, 0xEA	; 234
     37c:	f0 e0       	ldi	r31, 0x00	; 0
     37e:	05 c0       	rjmp	.+10     	; 0x38a <CALLBACK_USB_GetDescriptor+0x44>
					break;
				case 0x01:
					Address = &ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
     380:	e0 ed       	ldi	r30, 0xD0	; 208
     382:	f0 e0       	ldi	r31, 0x00	; 0
     384:	02 c0       	rjmp	.+4      	; 0x38a <CALLBACK_USB_GetDescriptor+0x44>
					break;
				case 0x02:
					Address = &ProductString;
					Size    = pgm_read_byte(&ProductString.Header.Size);
     386:	e8 e9       	ldi	r30, 0x98	; 152
     388:	f0 e0       	ldi	r31, 0x00	; 0
     38a:	84 91       	lpm	r24, Z
     38c:	90 e0       	ldi	r25, 0x00	; 0
					break;
     38e:	13 c0       	rjmp	.+38     	; 0x3b6 <CALLBACK_USB_GetDescriptor+0x70>
			}

			break;
		case HID_DTYPE_HID:
			Address = &ConfigurationDescriptor.HID_HIDData;
			Size    = sizeof(USB_HID_Descriptor_HID_t);
     390:	89 e0       	ldi	r24, 0x09	; 9
     392:	90 e0       	ldi	r25, 0x00	; 0
					break;
			}

			break;
		case HID_DTYPE_HID:
			Address = &ConfigurationDescriptor.HID_HIDData;
     394:	e0 e0       	ldi	r30, 0x00	; 0
     396:	f1 e0       	ldi	r31, 0x01	; 1
			Size    = sizeof(USB_HID_Descriptor_HID_t);
			break;
     398:	0e c0       	rjmp	.+28     	; 0x3b6 <CALLBACK_USB_GetDescriptor+0x70>
		case HID_DTYPE_Report:
			Address = &HIDReport;
			Size    = sizeof(HIDReport);
     39a:	89 e7       	ldi	r24, 0x79	; 121
     39c:	90 e0       	ldi	r25, 0x00	; 0
		case HID_DTYPE_HID:
			Address = &ConfigurationDescriptor.HID_HIDData;
			Size    = sizeof(USB_HID_Descriptor_HID_t);
			break;
		case HID_DTYPE_Report:
			Address = &HIDReport;
     39e:	e2 e2       	ldi	r30, 0x22	; 34
     3a0:	f1 e0       	ldi	r31, 0x01	; 1
			Size    = sizeof(HIDReport);
			break;
     3a2:	09 c0       	rjmp	.+18     	; 0x3b6 <CALLBACK_USB_GetDescriptor+0x70>

	switch (DescriptorType)
	{
		case DTYPE_Device:
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
     3a4:	82 e1       	ldi	r24, 0x12	; 18
     3a6:	90 e0       	ldi	r25, 0x00	; 0
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
	{
		case DTYPE_Device:
			Address = &DeviceDescriptor;
     3a8:	e0 e1       	ldi	r30, 0x10	; 16
     3aa:	f1 e0       	ldi	r31, 0x01	; 1
     3ac:	04 c0       	rjmp	.+8      	; 0x3b6 <CALLBACK_USB_GetDescriptor+0x70>
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;
     3ae:	80 e0       	ldi	r24, 0x00	; 0
     3b0:	90 e0       	ldi	r25, 0x00	; 0
                                    const void** const DescriptorAddress)
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
     3b2:	e0 e0       	ldi	r30, 0x00	; 0
     3b4:	f0 e0       	ldi	r31, 0x00	; 0
			Address = &HIDReport;
			Size    = sizeof(HIDReport);
			break;
	}

	*DescriptorAddress = Address;
     3b6:	da 01       	movw	r26, r20
     3b8:	11 96       	adiw	r26, 0x01	; 1
     3ba:	fc 93       	st	X, r31
     3bc:	ee 93       	st	-X, r30
	return Size;
}
     3be:	08 95       	ret

000003c0 <Endpoint_Write_Stream_LE>:
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
     3c0:	af 92       	push	r10
     3c2:	bf 92       	push	r11
     3c4:	cf 92       	push	r12
     3c6:	df 92       	push	r13
     3c8:	ef 92       	push	r14
     3ca:	ff 92       	push	r15
     3cc:	1f 93       	push	r17
     3ce:	cf 93       	push	r28
     3d0:	df 93       	push	r29
     3d2:	ec 01       	movw	r28, r24
     3d4:	7b 01       	movw	r14, r22
     3d6:	6a 01       	movw	r12, r20
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	uint16_t BytesInTransfer = 0;
	uint8_t  ErrorCode;

	if ((ErrorCode = Endpoint_WaitUntilReady()))
     3d8:	d7 d1       	rcall	.+942    	; 0x788 <Endpoint_WaitUntilReady>
     3da:	18 2f       	mov	r17, r24
     3dc:	88 23       	and	r24, r24
     3de:	a9 f5       	brne	.+106    	; 0x44a <Endpoint_Write_Stream_LE+0x8a>
     3e0:	c1 14       	cp	r12, r1
	  return ErrorCode;

	if (BytesProcessed != NULL)
     3e2:	d1 04       	cpc	r13, r1
     3e4:	39 f0       	breq	.+14     	; 0x3f4 <Endpoint_Write_Stream_LE+0x34>
     3e6:	f6 01       	movw	r30, r12
	{
		Length -= *BytesProcessed;
     3e8:	20 81       	ld	r18, Z
     3ea:	31 81       	ldd	r19, Z+1	; 0x01
     3ec:	e2 1a       	sub	r14, r18
     3ee:	f3 0a       	sbc	r15, r19
     3f0:	c2 0f       	add	r28, r18
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
     3f2:	d3 1f       	adc	r29, r19
     3f4:	aa 24       	eor	r10, r10

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
     3f6:	bb 24       	eor	r11, r11
     3f8:	23 c0       	rjmp	.+70     	; 0x440 <Endpoint_Write_Stream_LE+0x80>
     3fa:	80 91 e8 00 	lds	r24, 0x00E8
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
     3fe:	85 fd       	sbrc	r24, 5
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
	{
		if (!(Endpoint_IsReadWriteAllowed()))
     400:	16 c0       	rjmp	.+44     	; 0x42e <Endpoint_Write_Stream_LE+0x6e>
     402:	80 91 e8 00 	lds	r24, 0x00E8
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     406:	8e 77       	andi	r24, 0x7E	; 126
     408:	80 93 e8 00 	sts	0x00E8, r24
     40c:	7f d4       	rcall	.+2302   	; 0xd0c <USB_USBTask>
		{
			TEMPLATE_CLEAR_ENDPOINT();

			#if !defined(INTERRUPT_CONTROL_ENDPOINT)
			USB_USBTask();
     40e:	c1 14       	cp	r12, r1
     410:	d1 04       	cpc	r13, r1
			#endif

			if (BytesProcessed != NULL)
     412:	49 f0       	breq	.+18     	; 0x426 <Endpoint_Write_Stream_LE+0x66>
     414:	f6 01       	movw	r30, r12
     416:	80 81       	ld	r24, Z
			{
				*BytesProcessed += BytesInTransfer;
     418:	91 81       	ldd	r25, Z+1	; 0x01
     41a:	8a 0d       	add	r24, r10
     41c:	9b 1d       	adc	r25, r11
     41e:	91 83       	std	Z+1, r25	; 0x01
     420:	80 83       	st	Z, r24
     422:	15 e0       	ldi	r17, 0x05	; 5
     424:	12 c0       	rjmp	.+36     	; 0x44a <Endpoint_Write_Stream_LE+0x8a>
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
     426:	b0 d1       	rcall	.+864    	; 0x788 <Endpoint_WaitUntilReady>
     428:	88 23       	and	r24, r24
			}

			if ((ErrorCode = Endpoint_WaitUntilReady()))
     42a:	51 f0       	breq	.+20     	; 0x440 <Endpoint_Write_Stream_LE+0x80>
     42c:	0d c0       	rjmp	.+26     	; 0x448 <Endpoint_Write_Stream_LE+0x88>
     42e:	89 91       	ld	r24, Y+
     430:	80 93 f1 00 	sts	0x00F1, r24
			  return ErrorCode;
		}
		else
		{
			TEMPLATE_TRANSFER_BYTE(DataStream);
     434:	08 94       	sec
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     436:	e1 08       	sbc	r14, r1
     438:	f1 08       	sbc	r15, r1
			TEMPLATE_BUFFER_MOVE(DataStream, 1);
			Length--;
     43a:	08 94       	sec
     43c:	a1 1c       	adc	r10, r1
     43e:	b1 1c       	adc	r11, r1
			BytesInTransfer++;
     440:	e1 14       	cp	r14, r1
     442:	f1 04       	cpc	r15, r1
     444:	d1 f6       	brne	.-76     	; 0x3fa <Endpoint_Write_Stream_LE+0x3a>
	{
		Length -= *BytesProcessed;
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
     446:	01 c0       	rjmp	.+2      	; 0x44a <Endpoint_Write_Stream_LE+0x8a>
     448:	18 2f       	mov	r17, r24
     44a:	81 2f       	mov	r24, r17
     44c:	df 91       	pop	r29
			{
				*BytesProcessed += BytesInTransfer;
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
			}

			if ((ErrorCode = Endpoint_WaitUntilReady()))
     44e:	cf 91       	pop	r28
			BytesInTransfer++;
		}
	}

	return ENDPOINT_RWSTREAM_NoError;
}
     450:	1f 91       	pop	r17
     452:	ff 90       	pop	r15
     454:	ef 90       	pop	r14
     456:	df 90       	pop	r13
     458:	cf 90       	pop	r12
     45a:	bf 90       	pop	r11
     45c:	af 90       	pop	r10
     45e:	08 95       	ret

00000460 <Endpoint_Write_Control_Stream_LE>:
     460:	20 91 33 01 	lds	r18, 0x0133
     464:	30 91 34 01 	lds	r19, 0x0134
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
     468:	26 17       	cp	r18, r22
     46a:	37 07       	cpc	r19, r23
     46c:	20 f4       	brcc	.+8      	; 0x476 <Endpoint_Write_Control_Stream_LE+0x16>
     46e:	b9 01       	movw	r22, r18
     470:	fc 01       	movw	r30, r24
     472:	20 e0       	ldi	r18, 0x00	; 0
     474:	37 c0       	rjmp	.+110    	; 0x4e4 <Endpoint_Write_Control_Stream_LE+0x84>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
     476:	61 15       	cp	r22, r1
     478:	71 05       	cpc	r23, r1
     47a:	d1 f7       	brne	.-12     	; 0x470 <Endpoint_Write_Control_Stream_LE+0x10>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     47c:	20 91 e8 00 	lds	r18, 0x00E8
     480:	2e 77       	andi	r18, 0x7E	; 126
     482:	20 93 e8 00 	sts	0x00E8, r18
     486:	f4 cf       	rjmp	.-24     	; 0x470 <Endpoint_Write_Control_Stream_LE+0x10>
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     488:	80 91 2c 01 	lds	r24, 0x012C

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     48c:	88 23       	and	r24, r24
     48e:	09 f4       	brne	.+2      	; 0x492 <Endpoint_Write_Control_Stream_LE+0x32>
     490:	3f c0       	rjmp	.+126    	; 0x510 <Endpoint_Write_Control_Stream_LE+0xb0>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     492:	85 30       	cpi	r24, 0x05	; 5
     494:	c9 f1       	breq	.+114    	; 0x508 <Endpoint_Write_Control_Stream_LE+0xa8>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     496:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
     49a:	83 fd       	sbrc	r24, 3
     49c:	37 c0       	rjmp	.+110    	; 0x50c <Endpoint_Write_Control_Stream_LE+0xac>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     49e:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
     4a2:	82 fd       	sbrc	r24, 2
     4a4:	2b c0       	rjmp	.+86     	; 0x4fc <Endpoint_Write_Control_Stream_LE+0x9c>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     4a6:	80 91 e8 00 	lds	r24, 0x00E8
		  break;

		if (Endpoint_IsINReady())
     4aa:	80 ff       	sbrs	r24, 0
     4ac:	1b c0       	rjmp	.+54     	; 0x4e4 <Endpoint_Write_Control_Stream_LE+0x84>
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
     4ae:	80 91 f2 00 	lds	r24, 0x00F2
     4b2:	90 91 f3 00 	lds	r25, 0x00F3
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
     4b6:	06 c0       	rjmp	.+12     	; 0x4c4 <Endpoint_Write_Control_Stream_LE+0x64>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
     4b8:	21 91       	ld	r18, Z+
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     4ba:	20 93 f1 00 	sts	0x00F1, r18
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
     4be:	61 50       	subi	r22, 0x01	; 1
     4c0:	70 40       	sbci	r23, 0x00	; 0
				BytesInEndpoint++;
     4c2:	01 96       	adiw	r24, 0x01	; 1

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
     4c4:	61 15       	cp	r22, r1
     4c6:	71 05       	cpc	r23, r1
     4c8:	19 f0       	breq	.+6      	; 0x4d0 <Endpoint_Write_Control_Stream_LE+0x70>
     4ca:	88 30       	cpi	r24, 0x08	; 8
     4cc:	91 05       	cpc	r25, r1
     4ce:	a0 f3       	brcs	.-24     	; 0x4b8 <Endpoint_Write_Control_Stream_LE+0x58>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
     4d0:	21 e0       	ldi	r18, 0x01	; 1
     4d2:	88 30       	cpi	r24, 0x08	; 8
     4d4:	91 05       	cpc	r25, r1
     4d6:	09 f0       	breq	.+2      	; 0x4da <Endpoint_Write_Control_Stream_LE+0x7a>
     4d8:	20 e0       	ldi	r18, 0x00	; 0
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     4da:	80 91 e8 00 	lds	r24, 0x00E8
     4de:	8e 77       	andi	r24, 0x7E	; 126
     4e0:	80 93 e8 00 	sts	0x00E8, r24
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
     4e4:	61 15       	cp	r22, r1
     4e6:	71 05       	cpc	r23, r1
     4e8:	79 f6       	brne	.-98     	; 0x488 <Endpoint_Write_Control_Stream_LE+0x28>
     4ea:	22 23       	and	r18, r18
     4ec:	69 f6       	brne	.-102    	; 0x488 <Endpoint_Write_Control_Stream_LE+0x28>
     4ee:	06 c0       	rjmp	.+12     	; 0x4fc <Endpoint_Write_Control_Stream_LE+0x9c>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     4f0:	80 91 2c 01 	lds	r24, 0x012C

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     4f4:	88 23       	and	r24, r24
     4f6:	61 f0       	breq	.+24     	; 0x510 <Endpoint_Write_Control_Stream_LE+0xb0>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     4f8:	85 30       	cpi	r24, 0x05	; 5
     4fa:	61 f0       	breq	.+24     	; 0x514 <Endpoint_Write_Control_Stream_LE+0xb4>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     4fc:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
     500:	82 ff       	sbrs	r24, 2
     502:	f6 cf       	rjmp	.-20     	; 0x4f0 <Endpoint_Write_Control_Stream_LE+0x90>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
     504:	80 e0       	ldi	r24, 0x00	; 0
     506:	08 95       	ret
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
     508:	83 e0       	ldi	r24, 0x03	; 3
     50a:	08 95       	ret
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
     50c:	81 e0       	ldi	r24, 0x01	; 1
     50e:	08 95       	ret
	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
     510:	82 e0       	ldi	r24, 0x02	; 2
     512:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
     514:	83 e0       	ldi	r24, 0x03	; 3
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
     516:	08 95       	ret

00000518 <Endpoint_Read_Control_Stream_LE>:
uint8_t TEMPLATE_FUNC_NAME (void* const Buffer,
                            uint16_t Length)
{
	uint8_t* DataStream = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));

	if (!(Length))
     518:	61 15       	cp	r22, r1
     51a:	71 05       	cpc	r23, r1
     51c:	29 f4       	brne	.+10     	; 0x528 <Endpoint_Read_Control_Stream_LE+0x10>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     51e:	20 91 e8 00 	lds	r18, 0x00E8
     522:	2b 77       	andi	r18, 0x7B	; 123
     524:	20 93 e8 00 	sts	0x00E8, r18

#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (void* const Buffer,
                            uint16_t Length)
{
     528:	38 2f       	mov	r19, r24
     52a:	29 2f       	mov	r18, r25
     52c:	26 c0       	rjmp	.+76     	; 0x57a <Endpoint_Read_Control_Stream_LE+0x62>
	if (!(Length))
	  Endpoint_ClearOUT();

	while (Length)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     52e:	80 91 2c 01 	lds	r24, 0x012C

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     532:	88 23       	and	r24, r24
     534:	b1 f1       	breq	.+108    	; 0x5a2 <Endpoint_Read_Control_Stream_LE+0x8a>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     536:	85 30       	cpi	r24, 0x05	; 5
     538:	81 f1       	breq	.+96     	; 0x59a <Endpoint_Read_Control_Stream_LE+0x82>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     53a:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
     53e:	83 fd       	sbrc	r24, 3
     540:	2e c0       	rjmp	.+92     	; 0x59e <Endpoint_Read_Control_Stream_LE+0x86>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     542:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;

		if (Endpoint_IsOUTReceived())
     546:	82 ff       	sbrs	r24, 2
     548:	f2 cf       	rjmp	.-28     	; 0x52e <Endpoint_Read_Control_Stream_LE+0x16>
     54a:	e3 2f       	mov	r30, r19
     54c:	f2 2f       	mov	r31, r18
     54e:	08 c0       	rjmp	.+16     	; 0x560 <Endpoint_Read_Control_Stream_LE+0x48>
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
     550:	80 91 f1 00 	lds	r24, 0x00F1
		{
			while (Length && Endpoint_BytesInEndpoint())
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
     554:	81 93       	st	Z+, r24
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
     556:	3e 2f       	mov	r19, r30
     558:	2f 2f       	mov	r18, r31
				Length--;
     55a:	61 50       	subi	r22, 0x01	; 1
     55c:	70 40       	sbci	r23, 0x00	; 0
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;

		if (Endpoint_IsOUTReceived())
		{
			while (Length && Endpoint_BytesInEndpoint())
     55e:	41 f0       	breq	.+16     	; 0x570 <Endpoint_Read_Control_Stream_LE+0x58>
     560:	3e 2f       	mov	r19, r30
     562:	2f 2f       	mov	r18, r31
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
     564:	80 91 f2 00 	lds	r24, 0x00F2
     568:	90 91 f3 00 	lds	r25, 0x00F3
     56c:	00 97       	sbiw	r24, 0x00	; 0
     56e:	81 f7       	brne	.-32     	; 0x550 <Endpoint_Read_Control_Stream_LE+0x38>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     570:	80 91 e8 00 	lds	r24, 0x00E8
     574:	8b 77       	andi	r24, 0x7B	; 123
     576:	80 93 e8 00 	sts	0x00E8, r24
	uint8_t* DataStream = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));

	if (!(Length))
	  Endpoint_ClearOUT();

	while (Length)
     57a:	61 15       	cp	r22, r1
     57c:	71 05       	cpc	r23, r1
     57e:	b9 f6       	brne	.-82     	; 0x52e <Endpoint_Read_Control_Stream_LE+0x16>
     580:	06 c0       	rjmp	.+12     	; 0x58e <Endpoint_Read_Control_Stream_LE+0x76>
		}
	}

	while (!(Endpoint_IsINReady()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     582:	80 91 2c 01 	lds	r24, 0x012C

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     586:	88 23       	and	r24, r24
     588:	61 f0       	breq	.+24     	; 0x5a2 <Endpoint_Read_Control_Stream_LE+0x8a>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     58a:	85 30       	cpi	r24, 0x05	; 5
     58c:	61 f0       	breq	.+24     	; 0x5a6 <Endpoint_Read_Control_Stream_LE+0x8e>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     58e:	80 91 e8 00 	lds	r24, 0x00E8

			Endpoint_ClearOUT();
		}
	}

	while (!(Endpoint_IsINReady()))
     592:	80 ff       	sbrs	r24, 0
     594:	f6 cf       	rjmp	.-20     	; 0x582 <Endpoint_Read_Control_Stream_LE+0x6a>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
     596:	80 e0       	ldi	r24, 0x00	; 0
     598:	08 95       	ret
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
     59a:	83 e0       	ldi	r24, 0x03	; 3
     59c:	08 95       	ret
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
     59e:	81 e0       	ldi	r24, 0x01	; 1
     5a0:	08 95       	ret
	while (!(Endpoint_IsINReady()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
     5a2:	82 e0       	ldi	r24, 0x02	; 2
     5a4:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
     5a6:	83 e0       	ldi	r24, 0x03	; 3
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
     5a8:	08 95       	ret

000005aa <Endpoint_Write_Control_PStream_LE>:
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
     5aa:	20 91 33 01 	lds	r18, 0x0133
     5ae:	30 91 34 01 	lds	r19, 0x0134
     5b2:	26 17       	cp	r18, r22
     5b4:	37 07       	cpc	r19, r23
     5b6:	20 f4       	brcc	.+8      	; 0x5c0 <Endpoint_Write_Control_PStream_LE+0x16>
     5b8:	b9 01       	movw	r22, r18
     5ba:	fc 01       	movw	r30, r24
     5bc:	20 e0       	ldi	r18, 0x00	; 0
     5be:	38 c0       	rjmp	.+112    	; 0x630 <Endpoint_Write_Control_PStream_LE+0x86>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
     5c0:	61 15       	cp	r22, r1
     5c2:	71 05       	cpc	r23, r1
     5c4:	d1 f7       	brne	.-12     	; 0x5ba <Endpoint_Write_Control_PStream_LE+0x10>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     5c6:	20 91 e8 00 	lds	r18, 0x00E8
     5ca:	2e 77       	andi	r18, 0x7E	; 126
     5cc:	20 93 e8 00 	sts	0x00E8, r18
     5d0:	f4 cf       	rjmp	.-24     	; 0x5ba <Endpoint_Write_Control_PStream_LE+0x10>
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     5d2:	80 91 2c 01 	lds	r24, 0x012C

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     5d6:	88 23       	and	r24, r24
     5d8:	09 f4       	brne	.+2      	; 0x5dc <Endpoint_Write_Control_PStream_LE+0x32>
     5da:	40 c0       	rjmp	.+128    	; 0x65c <Endpoint_Write_Control_PStream_LE+0xb2>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     5dc:	85 30       	cpi	r24, 0x05	; 5
     5de:	d1 f1       	breq	.+116    	; 0x654 <Endpoint_Write_Control_PStream_LE+0xaa>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     5e0:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
     5e4:	83 fd       	sbrc	r24, 3
     5e6:	38 c0       	rjmp	.+112    	; 0x658 <Endpoint_Write_Control_PStream_LE+0xae>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     5e8:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
     5ec:	82 fd       	sbrc	r24, 2
     5ee:	2c c0       	rjmp	.+88     	; 0x648 <Endpoint_Write_Control_PStream_LE+0x9e>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     5f0:	80 91 e8 00 	lds	r24, 0x00E8
		  break;

		if (Endpoint_IsINReady())
     5f4:	80 ff       	sbrs	r24, 0
     5f6:	1c c0       	rjmp	.+56     	; 0x630 <Endpoint_Write_Control_PStream_LE+0x86>
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
     5f8:	80 91 f2 00 	lds	r24, 0x00F2
     5fc:	90 91 f3 00 	lds	r25, 0x00F3
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
     600:	07 c0       	rjmp	.+14     	; 0x610 <Endpoint_Write_Control_PStream_LE+0x66>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
     602:	24 91       	lpm	r18, Z
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     604:	20 93 f1 00 	sts	0x00F1, r18
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
     608:	31 96       	adiw	r30, 0x01	; 1
				Length--;
     60a:	61 50       	subi	r22, 0x01	; 1
     60c:	70 40       	sbci	r23, 0x00	; 0
				BytesInEndpoint++;
     60e:	01 96       	adiw	r24, 0x01	; 1

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
     610:	61 15       	cp	r22, r1
     612:	71 05       	cpc	r23, r1
     614:	19 f0       	breq	.+6      	; 0x61c <Endpoint_Write_Control_PStream_LE+0x72>
     616:	88 30       	cpi	r24, 0x08	; 8
     618:	91 05       	cpc	r25, r1
     61a:	98 f3       	brcs	.-26     	; 0x602 <Endpoint_Write_Control_PStream_LE+0x58>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
     61c:	21 e0       	ldi	r18, 0x01	; 1
     61e:	88 30       	cpi	r24, 0x08	; 8
     620:	91 05       	cpc	r25, r1
     622:	09 f0       	breq	.+2      	; 0x626 <Endpoint_Write_Control_PStream_LE+0x7c>
     624:	20 e0       	ldi	r18, 0x00	; 0
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     626:	80 91 e8 00 	lds	r24, 0x00E8
     62a:	8e 77       	andi	r24, 0x7E	; 126
     62c:	80 93 e8 00 	sts	0x00E8, r24
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
     630:	61 15       	cp	r22, r1
     632:	71 05       	cpc	r23, r1
     634:	71 f6       	brne	.-100    	; 0x5d2 <Endpoint_Write_Control_PStream_LE+0x28>
     636:	22 23       	and	r18, r18
     638:	61 f6       	brne	.-104    	; 0x5d2 <Endpoint_Write_Control_PStream_LE+0x28>
     63a:	06 c0       	rjmp	.+12     	; 0x648 <Endpoint_Write_Control_PStream_LE+0x9e>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     63c:	80 91 2c 01 	lds	r24, 0x012C

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     640:	88 23       	and	r24, r24
     642:	61 f0       	breq	.+24     	; 0x65c <Endpoint_Write_Control_PStream_LE+0xb2>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     644:	85 30       	cpi	r24, 0x05	; 5
     646:	61 f0       	breq	.+24     	; 0x660 <Endpoint_Write_Control_PStream_LE+0xb6>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     648:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
     64c:	82 ff       	sbrs	r24, 2
     64e:	f6 cf       	rjmp	.-20     	; 0x63c <Endpoint_Write_Control_PStream_LE+0x92>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
     650:	80 e0       	ldi	r24, 0x00	; 0
     652:	08 95       	ret
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
     654:	83 e0       	ldi	r24, 0x03	; 3
     656:	08 95       	ret
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
     658:	81 e0       	ldi	r24, 0x01	; 1
     65a:	08 95       	ret
	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
     65c:	82 e0       	ldi	r24, 0x02	; 2
     65e:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
     660:	83 e0       	ldi	r24, 0x03	; 3
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
     662:	08 95       	ret

00000664 <Endpoint_ConfigureEndpoint_Prv>:
	UECFG0X = UECFG0XData;
	UECFG1X = UECFG1XData;

	return Endpoint_IsConfigured();
#else
	for (uint8_t EPNum = Number; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
     664:	98 2f       	mov	r25, r24
     666:	2a c0       	rjmp	.+84     	; 0x6bc <Endpoint_ConfigureEndpoint_Prv+0x58>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     668:	90 93 e9 00 	sts	0x00E9, r25
		uint8_t UECFG1XTemp;
		uint8_t UEIENXTemp;

		Endpoint_SelectEndpoint(EPNum);

		if (EPNum == Number)
     66c:	98 17       	cp	r25, r24
     66e:	39 f0       	breq	.+14     	; 0x67e <Endpoint_ConfigureEndpoint_Prv+0x1a>
			UECFG1XTemp = UECFG1XData;
			UEIENXTemp  = 0;
		}
		else
		{
			UECFG0XTemp = UECFG0X;
     670:	70 91 ec 00 	lds	r23, 0x00EC
			UECFG1XTemp = UECFG1X;
     674:	20 91 ed 00 	lds	r18, 0x00ED
			UEIENXTemp  = UEIENX;
     678:	50 91 f0 00 	lds	r21, 0x00F0
     67c:	03 c0       	rjmp	.+6      	; 0x684 <Endpoint_ConfigureEndpoint_Prv+0x20>
		Endpoint_SelectEndpoint(EPNum);

		if (EPNum == Number)
		{
			UECFG0XTemp = UECFG0XData;
			UECFG1XTemp = UECFG1XData;
     67e:	24 2f       	mov	r18, r20

		Endpoint_SelectEndpoint(EPNum);

		if (EPNum == Number)
		{
			UECFG0XTemp = UECFG0XData;
     680:	76 2f       	mov	r23, r22
			UECFG1XTemp = UECFG1XData;
			UEIENXTemp  = 0;
     682:	50 e0       	ldi	r21, 0x00	; 0
			UECFG0XTemp = UECFG0X;
			UECFG1XTemp = UECFG1X;
			UEIENXTemp  = UEIENX;
		}

		if (!(UECFG1XTemp & (1 << ALLOC)))
     684:	21 ff       	sbrs	r18, 1
     686:	19 c0       	rjmp	.+50     	; 0x6ba <Endpoint_ConfigureEndpoint_Prv+0x56>
			 *  to and from a host.
			 */
			static inline void Endpoint_DisableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_DisableEndpoint(void)
			{
				UECONX &= ~(1 << EPEN);
     688:	30 91 eb 00 	lds	r19, 0x00EB
     68c:	3e 7f       	andi	r19, 0xFE	; 254
     68e:	30 93 eb 00 	sts	0x00EB, r19
		  continue;

		Endpoint_DisableEndpoint();
		UECFG1X &= ~(1 << ALLOC);
     692:	30 91 ed 00 	lds	r19, 0x00ED
     696:	3d 7f       	andi	r19, 0xFD	; 253
     698:	30 93 ed 00 	sts	0x00ED, r19
			 *  \note Endpoints must first be configured properly via \ref Endpoint_ConfigureEndpoint().
			 */
			static inline void Endpoint_EnableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_EnableEndpoint(void)
			{
				UECONX |= (1 << EPEN);
     69c:	30 91 eb 00 	lds	r19, 0x00EB
     6a0:	31 60       	ori	r19, 0x01	; 1
     6a2:	30 93 eb 00 	sts	0x00EB, r19

		Endpoint_EnableEndpoint();
		UECFG0X = UECFG0XTemp;
     6a6:	70 93 ec 00 	sts	0x00EC, r23
		UECFG1X = UECFG1XTemp;
     6aa:	20 93 ed 00 	sts	0x00ED, r18
		UEIENX  = UEIENXTemp;
     6ae:	50 93 f0 00 	sts	0x00F0, r21
			 *  \return Boolean \c true if the currently selected endpoint has been configured, \c false otherwise.
			 */
			static inline bool Endpoint_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsConfigured(void)
			{
				return ((UESTA0X & (1 << CFGOK)) ? true : false);
     6b2:	20 91 ee 00 	lds	r18, 0x00EE

		if (!(Endpoint_IsConfigured()))
     6b6:	27 ff       	sbrs	r18, 7
     6b8:	08 c0       	rjmp	.+16     	; 0x6ca <Endpoint_ConfigureEndpoint_Prv+0x66>
	UECFG0X = UECFG0XData;
	UECFG1X = UECFG1XData;

	return Endpoint_IsConfigured();
#else
	for (uint8_t EPNum = Number; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
     6ba:	9f 5f       	subi	r25, 0xFF	; 255
     6bc:	97 30       	cpi	r25, 0x07	; 7
     6be:	a0 f2       	brcs	.-88     	; 0x668 <Endpoint_ConfigureEndpoint_Prv+0x4>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     6c0:	8f 70       	andi	r24, 0x0F	; 15
     6c2:	80 93 e9 00 	sts	0x00E9, r24
		if (!(Endpoint_IsConfigured()))
		  return false;
	}

	Endpoint_SelectEndpoint(Number);
	return true;
     6c6:	81 e0       	ldi	r24, 0x01	; 1
     6c8:	08 95       	ret
		UECFG0X = UECFG0XTemp;
		UECFG1X = UECFG1XTemp;
		UEIENX  = UEIENXTemp;

		if (!(Endpoint_IsConfigured()))
		  return false;
     6ca:	80 e0       	ldi	r24, 0x00	; 0
	}

	Endpoint_SelectEndpoint(Number);
	return true;
#endif
}
     6cc:	08 95       	ret

000006ce <Endpoint_ConfigureEndpointTable>:
uint8_t USB_Device_ControlEndpointSize = ENDPOINT_CONTROLEP_DEFAULT_SIZE;
#endif

bool Endpoint_ConfigureEndpointTable(const USB_Endpoint_Table_t* const Table,
                                     const uint8_t Entries)
{
     6ce:	0f 93       	push	r16
     6d0:	1f 93       	push	r17
     6d2:	cf 93       	push	r28
     6d4:	df 93       	push	r29
     6d6:	16 2f       	mov	r17, r22
	{
		if (!(Table[i].Address))
		  continue;
	
		if (!(Endpoint_ConfigureEndpoint(Table[i].Address, Table[i].Type, Table[i].Size, Table[i].Banks)))
		  return false;
     6d8:	ec 01       	movw	r28, r24
#endif

bool Endpoint_ConfigureEndpointTable(const USB_Endpoint_Table_t* const Table,
                                     const uint8_t Entries)
{
	for (uint8_t i = 0; i < Entries; i++)
     6da:	00 e0       	ldi	r16, 0x00	; 0
     6dc:	2a c0       	rjmp	.+84     	; 0x732 <Endpoint_ConfigureEndpointTable+0x64>
	{
		if (!(Table[i].Address))
     6de:	98 81       	ld	r25, Y
     6e0:	99 23       	and	r25, r25
     6e2:	29 f1       	breq	.+74     	; 0x72e <Endpoint_ConfigureEndpointTable+0x60>
		  continue;
	
		if (!(Endpoint_ConfigureEndpoint(Table[i].Address, Table[i].Type, Table[i].Size, Table[i].Banks)))
     6e4:	6b 81       	ldd	r22, Y+3	; 0x03
     6e6:	e9 81       	ldd	r30, Y+1	; 0x01
     6e8:	fa 81       	ldd	r31, Y+2	; 0x02
     6ea:	2c 81       	ldd	r18, Y+4	; 0x04
			static inline bool Endpoint_ConfigureEndpoint(const uint8_t Address,
			                                              const uint8_t Type,
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);
     6ec:	89 2f       	mov	r24, r25
     6ee:	8f 70       	andi	r24, 0x0F	; 15

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
     6f0:	87 30       	cpi	r24, 0x07	; 7
     6f2:	18 f5       	brcc	.+70     	; 0x73a <Endpoint_ConfigureEndpointTable+0x6c>
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
				                                      ((Type << EPTYPE0) | ((Address & ENDPOINT_DIR_IN) ? (1 << EPDIR) : 0)),
     6f4:	62 95       	swap	r22
     6f6:	66 0f       	add	r22, r22
     6f8:	66 0f       	add	r22, r22
     6fa:	60 7c       	andi	r22, 0xC0	; 192
     6fc:	99 1f       	adc	r25, r25
     6fe:	99 27       	eor	r25, r25
     700:	99 1f       	adc	r25, r25
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
     702:	69 2b       	or	r22, r25
     704:	22 30       	cpi	r18, 0x02	; 2
     706:	10 f0       	brcs	.+4      	; 0x70c <Endpoint_ConfigureEndpointTable+0x3e>
     708:	96 e0       	ldi	r25, 0x06	; 6
     70a:	01 c0       	rjmp	.+2      	; 0x70e <Endpoint_ConfigureEndpointTable+0x40>
     70c:	92 e0       	ldi	r25, 0x02	; 2
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes) ATTR_WARN_UNUSED_RESULT ATTR_CONST
			                                                                       ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;
     70e:	28 e0       	ldi	r18, 0x08	; 8
     710:	30 e0       	ldi	r19, 0x00	; 0
		/* Inline Functions: */
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes) ATTR_WARN_UNUSED_RESULT ATTR_CONST
			                                                                       ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
     712:	40 e0       	ldi	r20, 0x00	; 0
     714:	03 c0       	rjmp	.+6      	; 0x71c <Endpoint_ConfigureEndpointTable+0x4e>
				uint16_t CheckBytes = 8;

				while (CheckBytes < Bytes)
				{
					MaskVal++;
     716:	4f 5f       	subi	r20, 0xFF	; 255
					CheckBytes <<= 1;
     718:	22 0f       	add	r18, r18
     71a:	33 1f       	adc	r19, r19
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while (CheckBytes < Bytes)
     71c:	2e 17       	cp	r18, r30
     71e:	3f 07       	cpc	r19, r31
     720:	d0 f3       	brcs	.-12     	; 0x716 <Endpoint_ConfigureEndpointTable+0x48>
				{
					MaskVal++;
					CheckBytes <<= 1;
				}

				return (MaskVal << EPSIZE0);
     722:	42 95       	swap	r20
     724:	40 7f       	andi	r20, 0xF0	; 240
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
     726:	49 2b       	or	r20, r25
     728:	9d df       	rcall	.-198    	; 0x664 <Endpoint_ConfigureEndpoint_Prv>
     72a:	88 23       	and	r24, r24
     72c:	31 f0       	breq	.+12     	; 0x73a <Endpoint_ConfigureEndpointTable+0x6c>
     72e:	0f 5f       	subi	r16, 0xFF	; 255
#endif

bool Endpoint_ConfigureEndpointTable(const USB_Endpoint_Table_t* const Table,
                                     const uint8_t Entries)
{
	for (uint8_t i = 0; i < Entries; i++)
     730:	25 96       	adiw	r28, 0x05	; 5
     732:	01 17       	cp	r16, r17
     734:	a1 f6       	brne	.-88     	; 0x6de <Endpoint_ConfigureEndpointTable+0x10>
     736:	81 e0       	ldi	r24, 0x01	; 1
	
		if (!(Endpoint_ConfigureEndpoint(Table[i].Address, Table[i].Type, Table[i].Size, Table[i].Banks)))
		  return false;
	}
	
	return true;
     738:	01 c0       	rjmp	.+2      	; 0x73c <Endpoint_ConfigureEndpointTable+0x6e>
     73a:	80 e0       	ldi	r24, 0x00	; 0
	{
		if (!(Table[i].Address))
		  continue;
	
		if (!(Endpoint_ConfigureEndpoint(Table[i].Address, Table[i].Type, Table[i].Size, Table[i].Banks)))
		  return false;
     73c:	df 91       	pop	r29
	}
	
	return true;
}
     73e:	cf 91       	pop	r28
     740:	1f 91       	pop	r17
     742:	0f 91       	pop	r16
     744:	08 95       	ret

00000746 <Endpoint_ClearStatusStage>:
     746:	80 91 2d 01 	lds	r24, 0x012D
	}
}

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
     74a:	87 ff       	sbrs	r24, 7
     74c:	13 c0       	rjmp	.+38     	; 0x774 <Endpoint_ClearStatusStage+0x2e>
     74e:	04 c0       	rjmp	.+8      	; 0x758 <Endpoint_ClearStatusStage+0x12>
	{
		while (!(Endpoint_IsOUTReceived()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
     750:	80 91 2c 01 	lds	r24, 0x012C
     754:	88 23       	and	r24, r24
     756:	b9 f0       	breq	.+46     	; 0x786 <Endpoint_ClearStatusStage+0x40>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     758:	80 91 e8 00 	lds	r24, 0x00E8

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
	{
		while (!(Endpoint_IsOUTReceived()))
     75c:	82 ff       	sbrs	r24, 2
     75e:	f8 cf       	rjmp	.-16     	; 0x750 <Endpoint_ClearStatusStage+0xa>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     760:	80 91 e8 00 	lds	r24, 0x00E8
     764:	8b 77       	andi	r24, 0x7B	; 123
     766:	80 93 e8 00 	sts	0x00E8, r24
     76a:	08 95       	ret
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
     76c:	80 91 2c 01 	lds	r24, 0x012C
     770:	88 23       	and	r24, r24
     772:	49 f0       	breq	.+18     	; 0x786 <Endpoint_ClearStatusStage+0x40>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     774:	80 91 e8 00 	lds	r24, 0x00E8

		Endpoint_ClearOUT();
	}
	else
	{
		while (!(Endpoint_IsINReady()))
     778:	80 ff       	sbrs	r24, 0
     77a:	f8 cf       	rjmp	.-16     	; 0x76c <Endpoint_ClearStatusStage+0x26>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     77c:	80 91 e8 00 	lds	r24, 0x00E8
     780:	8e 77       	andi	r24, 0x7E	; 126
     782:	80 93 e8 00 	sts	0x00E8, r24
     786:	08 95       	ret

00000788 <Endpoint_WaitUntilReady>:
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
     788:	80 91 e4 00 	lds	r24, 0x00E4
     78c:	90 91 e5 00 	lds	r25, 0x00E5
     790:	45 e6       	ldi	r20, 0x65	; 101
     792:	01 c0       	rjmp	.+2      	; 0x796 <Endpoint_WaitUntilReady+0xe>
     794:	c9 01       	movw	r24, r18
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
     796:	20 91 ec 00 	lds	r18, 0x00EC
     79a:	20 ff       	sbrs	r18, 0
     79c:	23 c0       	rjmp	.+70     	; 0x7e4 <Endpoint_WaitUntilReady+0x5c>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     79e:	20 91 e8 00 	lds	r18, 0x00E8

	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
     7a2:	20 fd       	sbrc	r18, 0
     7a4:	15 c0       	rjmp	.+42     	; 0x7d0 <Endpoint_WaitUntilReady+0x48>
		{
			if (Endpoint_IsOUTReceived())
			  return ENDPOINT_READYWAIT_NoError;
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     7a6:	20 91 2c 01 	lds	r18, 0x012C

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     7aa:	22 23       	and	r18, r18
     7ac:	99 f0       	breq	.+38     	; 0x7d4 <Endpoint_WaitUntilReady+0x4c>
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     7ae:	25 30       	cpi	r18, 0x05	; 5
     7b0:	99 f0       	breq	.+38     	; 0x7d8 <Endpoint_WaitUntilReady+0x50>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
     7b2:	20 91 eb 00 	lds	r18, 0x00EB
		  return ENDPOINT_READYWAIT_BusSuspended;
		else if (Endpoint_IsStalled())
     7b6:	25 fd       	sbrc	r18, 5
     7b8:	11 c0       	rjmp	.+34     	; 0x7dc <Endpoint_WaitUntilReady+0x54>
     7ba:	20 91 e4 00 	lds	r18, 0x00E4
     7be:	30 91 e5 00 	lds	r19, 0x00E5
		  return ENDPOINT_READYWAIT_EndpointStalled;

		uint16_t CurrentFrameNumber = USB_Device_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
     7c2:	28 17       	cp	r18, r24
     7c4:	39 07       	cpc	r19, r25
     7c6:	39 f3       	breq	.-50     	; 0x796 <Endpoint_WaitUntilReady+0xe>
     7c8:	41 50       	subi	r20, 0x01	; 1
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
     7ca:	21 f7       	brne	.-56     	; 0x794 <Endpoint_WaitUntilReady+0xc>
			  return ENDPOINT_READYWAIT_Timeout;
     7cc:	84 e0       	ldi	r24, 0x04	; 4
     7ce:	08 95       	ret
	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
     7d0:	80 e0       	ldi	r24, 0x00	; 0
     7d2:	08 95       	ret
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
     7d4:	82 e0       	ldi	r24, 0x02	; 2
     7d6:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_READYWAIT_BusSuspended;
     7d8:	83 e0       	ldi	r24, 0x03	; 3
     7da:	08 95       	ret
		else if (Endpoint_IsStalled())
		  return ENDPOINT_READYWAIT_EndpointStalled;
     7dc:	81 e0       	ldi	r24, 0x01	; 1
     7de:	08 95       	ret
			  return ENDPOINT_READYWAIT_NoError;
		}
		else
		{
			if (Endpoint_IsOUTReceived())
			  return ENDPOINT_READYWAIT_NoError;
     7e0:	80 e0       	ldi	r24, 0x00	; 0

			if (!(TimeoutMSRem--))
			  return ENDPOINT_READYWAIT_Timeout;
		}
	}
}
     7e2:	08 95       	ret
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     7e4:	20 91 e8 00 	lds	r18, 0x00E8
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
		}
		else
		{
			if (Endpoint_IsOUTReceived())
     7e8:	22 ff       	sbrs	r18, 2
     7ea:	dd cf       	rjmp	.-70     	; 0x7a6 <Endpoint_WaitUntilReady+0x1e>
     7ec:	f9 cf       	rjmp	.-14     	; 0x7e0 <Endpoint_WaitUntilReady+0x58>

000007ee <USB_ResetInterface>:

	USB_IsInitialized = false;
}

void USB_ResetInterface(void)
{
     7ee:	0f 93       	push	r16
     7f0:	1f 93       	push	r17
     7f2:	cf 93       	push	r28
     7f4:	df 93       	push	r29
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
     7f6:	4e d0       	rcall	.+156    	; 0x894 <USB_INT_DisableAllInterrupts>
     7f8:	55 d0       	rcall	.+170    	; 0x8a4 <USB_INT_ClearAllInterrupts>
	USB_INT_ClearAllInterrupts();
     7fa:	c8 ed       	ldi	r28, 0xD8	; 216
     7fc:	d0 e0       	ldi	r29, 0x00	; 0
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
     7fe:	88 81       	ld	r24, Y
     800:	8f 77       	andi	r24, 0x7F	; 127
     802:	88 83       	st	Y, r24
     804:	88 81       	ld	r24, Y
     806:	80 68       	ori	r24, 0x80	; 128
				USBCON |=  (1 << USBE);
     808:	88 83       	st	Y, r24
     80a:	88 81       	ld	r24, Y
     80c:	8f 7d       	andi	r24, 0xDF	; 223
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
     80e:	88 83       	st	Y, r24
     810:	e7 ed       	ldi	r30, 0xD7	; 215
     812:	f0 e0       	ldi	r31, 0x00	; 0

	if (USB_CurrentMode == USB_MODE_Device)
	{
		#if defined(USB_CAN_BE_DEVICE)
		#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
		UHWCON |=  (1 << UIMOD);
     814:	80 81       	ld	r24, Z
     816:	80 68       	ori	r24, 0x80	; 128
     818:	80 83       	st	Z, r24
     81a:	19 bc       	out	0x29, r1	; 41
     81c:	10 92 2c 01 	sts	0x012C, r1
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState                 = DEVICE_STATE_Unattached;
     820:	10 92 28 01 	sts	0x0128, r1
	USB_Device_ConfigurationNumber  = 0;
     824:	10 92 2a 01 	sts	0x012A, r1

	#if !defined(NO_DEVICE_REMOTE_WAKEUP)
	USB_Device_RemoteWakeupEnabled  = false;
     828:	10 92 29 01 	sts	0x0129, r1
	#endif

	#if !defined(NO_DEVICE_SELF_POWER)
	USB_Device_CurrentlySelfPowered = false;
     82c:	00 ee       	ldi	r16, 0xE0	; 224
     82e:	10 e0       	ldi	r17, 0x00	; 0
			}

			static inline void USB_Device_SetFullSpeed(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetFullSpeed(void)
			{
				UDCON &= ~(1 << LSM);
     830:	f8 01       	movw	r30, r16
     832:	80 81       	ld	r24, Z
     834:	8b 7f       	andi	r24, 0xFB	; 251
     836:	80 83       	st	Z, r24
     838:	88 81       	ld	r24, Y
     83a:	81 60       	ori	r24, 0x01	; 1
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBCON |= (1 << VBUSTE);
     83c:	88 83       	st	Y, r24
     83e:	80 e0       	ldi	r24, 0x00	; 0
     840:	60 e0       	ldi	r22, 0x00	; 0
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
     842:	42 e0       	ldi	r20, 0x02	; 2
     844:	0f df       	rcall	.-482    	; 0x664 <Endpoint_ConfigureEndpoint_Prv>
     846:	e1 ee       	ldi	r30, 0xE1	; 225
     848:	f0 e0       	ldi	r31, 0x00	; 0
     84a:	80 81       	ld	r24, Z
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
     84c:	8e 7f       	andi	r24, 0xFE	; 254
     84e:	80 83       	st	Z, r24
     850:	e2 ee       	ldi	r30, 0xE2	; 226
     852:	f0 e0       	ldi	r31, 0x00	; 0
     854:	80 81       	ld	r24, Z
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
     856:	81 60       	ori	r24, 0x01	; 1
     858:	80 83       	st	Z, r24
     85a:	80 81       	ld	r24, Z
     85c:	88 60       	ori	r24, 0x08	; 8
     85e:	80 83       	st	Z, r24
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
     860:	f8 01       	movw	r30, r16
     862:	80 81       	ld	r24, Z
     864:	8e 7f       	andi	r24, 0xFE	; 254
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
     866:	80 83       	st	Z, r24
     868:	88 81       	ld	r24, Y
     86a:	80 61       	ori	r24, 0x10	; 16
     86c:	88 83       	st	Y, r24

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON |=  (1 << OTGPADE);
     86e:	df 91       	pop	r29
     870:	cf 91       	pop	r28
     872:	1f 91       	pop	r17
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
     874:	0f 91       	pop	r16
     876:	08 95       	ret

00000878 <USB_Init>:
     878:	e8 ed       	ldi	r30, 0xD8	; 216
     87a:	f0 e0       	ldi	r31, 0x00	; 0
     87c:	80 81       	ld	r24, Z
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON &= ~(1 << OTGPADE);
     87e:	8f 7e       	andi	r24, 0xEF	; 239
     880:	80 83       	st	Z, r24

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON |=  (1 << UVREGE);
     882:	e7 ed       	ldi	r30, 0xD7	; 215
     884:	f0 e0       	ldi	r31, 0x00	; 0
     886:	80 81       	ld	r24, Z
     888:	81 60       	ori	r24, 0x01	; 1
     88a:	80 83       	st	Z, r24
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
     88c:	81 e0       	ldi	r24, 0x01	; 1
     88e:	80 93 2b 01 	sts	0x012B, r24

	USB_ResetInterface();
     892:	ad cf       	rjmp	.-166    	; 0x7ee <USB_ResetInterface>

00000894 <USB_INT_DisableAllInterrupts>:
#include "../USBInterrupt.h"

void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
     894:	e8 ed       	ldi	r30, 0xD8	; 216
     896:	f0 e0       	ldi	r31, 0x00	; 0
     898:	80 81       	ld	r24, Z
     89a:	8c 7f       	andi	r24, 0xFC	; 252
     89c:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
     89e:	10 92 e2 00 	sts	0x00E2, r1
	#endif
}
     8a2:	08 95       	ret

000008a4 <USB_INT_ClearAllInterrupts>:

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
     8a4:	10 92 da 00 	sts	0x00DA, r1
	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
     8a8:	10 92 e1 00 	sts	0x00E1, r1
	#endif
}
     8ac:	08 95       	ret

000008ae <__vector_10>:

ISR(USB_GEN_vect, ISR_BLOCK)
{
     8ae:	1f 92       	push	r1
     8b0:	0f 92       	push	r0
     8b2:	0f b6       	in	r0, 0x3f	; 63
     8b4:	0f 92       	push	r0
     8b6:	0b b6       	in	r0, 0x3b	; 59
     8b8:	0f 92       	push	r0
     8ba:	11 24       	eor	r1, r1
     8bc:	2f 93       	push	r18
     8be:	3f 93       	push	r19
     8c0:	4f 93       	push	r20
     8c2:	5f 93       	push	r21
     8c4:	6f 93       	push	r22
     8c6:	7f 93       	push	r23
     8c8:	8f 93       	push	r24
     8ca:	9f 93       	push	r25
     8cc:	af 93       	push	r26
     8ce:	bf 93       	push	r27
     8d0:	ef 93       	push	r30
     8d2:	ff 93       	push	r31
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
					case USB_INT_SOFI:
						return (UDINT  & (1 << SOFI));
     8d4:	80 91 e1 00 	lds	r24, 0x00E1
	#if defined(USB_CAN_BE_DEVICE)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
     8d8:	82 ff       	sbrs	r24, 2
     8da:	0a c0       	rjmp	.+20     	; 0x8f0 <__vector_10+0x42>
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
					case USB_INT_SOFI:
						return (UDIEN  & (1 << SOFE));
     8dc:	80 91 e2 00 	lds	r24, 0x00E2
     8e0:	82 ff       	sbrs	r24, 2
     8e2:	06 c0       	rjmp	.+12     	; 0x8f0 <__vector_10+0x42>
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
						break;
					case USB_INT_SOFI:
						UDINT  &= ~(1 << SOFI);
     8e4:	80 91 e1 00 	lds	r24, 0x00E1
     8e8:	8b 7f       	andi	r24, 0xFB	; 251
     8ea:	80 93 e1 00 	sts	0x00E1, r24
	{
		USB_INT_Clear(USB_INT_SOFI);

		EVENT_USB_Device_StartOfFrame();
     8ee:	bf dc       	rcall	.-1666   	; 0x26e <EVENT_USB_Device_StartOfFrame>
     8f0:	80 91 da 00 	lds	r24, 0x00DA
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBINT & (1 << VBUSTI));
     8f4:	80 ff       	sbrs	r24, 0
	}
	#endif

	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	if (USB_INT_HasOccurred(USB_INT_VBUSTI) && USB_INT_IsEnabled(USB_INT_VBUSTI))
     8f6:	1d c0       	rjmp	.+58     	; 0x932 <__vector_10+0x84>
     8f8:	80 91 d8 00 	lds	r24, 0x00D8
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBCON & (1 << VBUSTE));
     8fc:	80 ff       	sbrs	r24, 0
     8fe:	19 c0       	rjmp	.+50     	; 0x932 <__vector_10+0x84>
     900:	80 91 da 00 	lds	r24, 0x00DA
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBINT &= ~(1 << VBUSTI);
     904:	8e 7f       	andi	r24, 0xFE	; 254
     906:	80 93 da 00 	sts	0x00DA, r24
     90a:	80 91 d9 00 	lds	r24, 0x00D9
				 *  \return Boolean \c true if the VBUS line is currently detecting power from a host, \c false otherwise.
				 */
				static inline bool USB_VBUS_GetStatus(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
				static inline bool USB_VBUS_GetStatus(void)
				{
					return ((USBSTA & (1 << VBUS)) ? true : false);
     90e:	80 ff       	sbrs	r24, 0
	{
		USB_INT_Clear(USB_INT_VBUSTI);

		if (USB_VBUS_GetStatus())
     910:	0c c0       	rjmp	.+24     	; 0x92a <__vector_10+0x7c>
     912:	8c e0       	ldi	r24, 0x0C	; 12

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
     914:	89 bd       	out	0x29, r24	; 41
     916:	8e e0       	ldi	r24, 0x0E	; 14
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
     918:	89 bd       	out	0x29, r24	; 41
     91a:	09 b4       	in	r0, 0x29	; 41
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			{
				USB_PLL_On();
				while (!(USB_PLL_IsReady()));
     91c:	00 fe       	sbrs	r0, 0
     91e:	fd cf       	rjmp	.-6      	; 0x91a <__vector_10+0x6c>
     920:	81 e0       	ldi	r24, 0x01	; 1
			}

			USB_DeviceState = DEVICE_STATE_Powered;
     922:	80 93 2c 01 	sts	0x012C, r24
     926:	8e dc       	rcall	.-1764   	; 0x244 <EVENT_USB_Device_Connect>
			EVENT_USB_Device_Connect();
     928:	04 c0       	rjmp	.+8      	; 0x932 <__vector_10+0x84>
     92a:	19 bc       	out	0x29, r1	; 41
     92c:	10 92 2c 01 	sts	0x012C, r1
		else
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			  USB_PLL_Off();

			USB_DeviceState = DEVICE_STATE_Unattached;
     930:	8b dc       	rcall	.-1770   	; 0x248 <EVENT_USB_Device_Disconnect>
     932:	80 91 e1 00 	lds	r24, 0x00E1
			EVENT_USB_Device_Disconnect();
     936:	80 ff       	sbrs	r24, 0
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
     938:	18 c0       	rjmp	.+48     	; 0x96a <__vector_10+0xbc>
     93a:	80 91 e2 00 	lds	r24, 0x00E2
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
     93e:	80 ff       	sbrs	r24, 0
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
     940:	14 c0       	rjmp	.+40     	; 0x96a <__vector_10+0xbc>
     942:	80 91 e2 00 	lds	r24, 0x00E2
     946:	8e 7f       	andi	r24, 0xFE	; 254
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
     948:	80 93 e2 00 	sts	0x00E2, r24
     94c:	80 91 e2 00 	lds	r24, 0x00E2
     950:	80 61       	ori	r24, 0x10	; 16
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
     952:	80 93 e2 00 	sts	0x00E2, r24
     956:	80 91 d8 00 	lds	r24, 0x00D8
     95a:	80 62       	ori	r24, 0x20	; 32
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON |=  (1 << FRZCLK);
     95c:	80 93 d8 00 	sts	0x00D8, r24
     960:	19 bc       	out	0x29, r1	; 41
     962:	85 e0       	ldi	r24, 0x05	; 5
     964:	80 93 2c 01 	sts	0x012C, r24

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
		EVENT_USB_Device_Disconnect();
		#else
		USB_DeviceState = DEVICE_STATE_Suspended;
     968:	d0 d1       	rcall	.+928    	; 0xd0a <USB_Event_Stub>
     96a:	80 91 e1 00 	lds	r24, 0x00E1
		EVENT_USB_Device_Suspend();
     96e:	84 ff       	sbrs	r24, 4
     970:	2d c0       	rjmp	.+90     	; 0x9cc <__vector_10+0x11e>
					case USB_INT_IDTI:
						return (USBINT & (1 << IDTI));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
     972:	80 91 e2 00 	lds	r24, 0x00E2
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
     976:	84 ff       	sbrs	r24, 4
     978:	29 c0       	rjmp	.+82     	; 0x9cc <__vector_10+0x11e>
					case USB_INT_IDTI:
						return (USBCON & (1 << IDTE));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
     97a:	8c e0       	ldi	r24, 0x0C	; 12
     97c:	89 bd       	out	0x29, r24	; 41
     97e:	8e e0       	ldi	r24, 0x0E	; 14
     980:	89 bd       	out	0x29, r24	; 41

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
     982:	09 b4       	in	r0, 0x29	; 41
     984:	00 fe       	sbrs	r0, 0
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
     986:	fd cf       	rjmp	.-6      	; 0x982 <__vector_10+0xd4>
     988:	80 91 d8 00 	lds	r24, 0x00D8
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
     98c:	8f 7d       	andi	r24, 0xDF	; 223
     98e:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
     992:	80 91 e1 00 	lds	r24, 0x00E1
     996:	8f 7e       	andi	r24, 0xEF	; 239
     998:	80 93 e1 00 	sts	0x00E1, r24
						USBINT &= ~(1 << IDTI);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
     99c:	80 91 e2 00 	lds	r24, 0x00E2
     9a0:	8f 7e       	andi	r24, 0xEF	; 239
     9a2:	80 93 e2 00 	sts	0x00E2, r24
						USBCON &= ~(1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
     9a6:	80 91 e2 00 	lds	r24, 0x00E2
     9aa:	81 60       	ori	r24, 0x01	; 1
     9ac:	80 93 e2 00 	sts	0x00E2, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
     9b0:	80 91 28 01 	lds	r24, 0x0128
     9b4:	88 23       	and	r24, r24
     9b6:	21 f4       	brne	.+8      	; 0x9c0 <__vector_10+0x112>
		USB_INT_Clear(USB_INT_WAKEUPI);

		USB_INT_Disable(USB_INT_WAKEUPI);
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_Device_ConfigurationNumber)
     9b8:	80 91 e3 00 	lds	r24, 0x00E3
     9bc:	87 ff       	sbrs	r24, 7
     9be:	02 c0       	rjmp	.+4      	; 0x9c4 <__vector_10+0x116>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
     9c0:	84 e0       	ldi	r24, 0x04	; 4
     9c2:	01 c0       	rjmp	.+2      	; 0x9c6 <__vector_10+0x118>
		  USB_DeviceState = DEVICE_STATE_Configured;
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
     9c4:	81 e0       	ldi	r24, 0x01	; 1
     9c6:	80 93 2c 01 	sts	0x012C, r24
     9ca:	9f d1       	rcall	.+830    	; 0xd0a <USB_Event_Stub>
     9cc:	80 91 e1 00 	lds	r24, 0x00E1
     9d0:	83 ff       	sbrs	r24, 3

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
		#else
		EVENT_USB_Device_WakeUp();
     9d2:	22 c0       	rjmp	.+68     	; 0xa18 <__vector_10+0x16a>
     9d4:	80 91 e2 00 	lds	r24, 0x00E2
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
     9d8:	83 ff       	sbrs	r24, 3
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
     9da:	1e c0       	rjmp	.+60     	; 0xa18 <__vector_10+0x16a>
     9dc:	80 91 e1 00 	lds	r24, 0x00E1
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
     9e0:	87 7f       	andi	r24, 0xF7	; 247
     9e2:	80 93 e1 00 	sts	0x00E1, r24
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
     9e6:	82 e0       	ldi	r24, 0x02	; 2
     9e8:	80 93 2c 01 	sts	0x012C, r24
     9ec:	10 92 28 01 	sts	0x0128, r1
	{
		USB_INT_Clear(USB_INT_EORSTI);

		USB_DeviceState                = DEVICE_STATE_Default;
     9f0:	80 91 e1 00 	lds	r24, 0x00E1
     9f4:	8e 7f       	andi	r24, 0xFE	; 254
		USB_Device_ConfigurationNumber = 0;
     9f6:	80 93 e1 00 	sts	0x00E1, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
     9fa:	80 91 e2 00 	lds	r24, 0x00E2
     9fe:	8e 7f       	andi	r24, 0xFE	; 254
     a00:	80 93 e2 00 	sts	0x00E2, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
     a04:	80 91 e2 00 	lds	r24, 0x00E2
     a08:	80 61       	ori	r24, 0x10	; 16
     a0a:	80 93 e2 00 	sts	0x00E2, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
     a0e:	80 e0       	ldi	r24, 0x00	; 0
     a10:	60 e0       	ldi	r22, 0x00	; 0
     a12:	42 e0       	ldi	r20, 0x02	; 2
     a14:	27 de       	rcall	.-946    	; 0x664 <Endpoint_ConfigureEndpoint_Prv>
     a16:	79 d1       	rcall	.+754    	; 0xd0a <USB_Event_Stub>
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
     a18:	ff 91       	pop	r31
     a1a:	ef 91       	pop	r30
     a1c:	bf 91       	pop	r27
     a1e:	af 91       	pop	r26
     a20:	9f 91       	pop	r25

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
     a22:	8f 91       	pop	r24
     a24:	7f 91       	pop	r23
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
     a26:	6f 91       	pop	r22
     a28:	5f 91       	pop	r21
     a2a:	4f 91       	pop	r20
     a2c:	3f 91       	pop	r19
     a2e:	2f 91       	pop	r18
     a30:	0f 90       	pop	r0
     a32:	0b be       	out	0x3b, r0	; 59
     a34:	0f 90       	pop	r0
     a36:	0f be       	out	0x3f, r0	; 63
     a38:	0f 90       	pop	r0
     a3a:	1f 90       	pop	r1
     a3c:	18 95       	reti

00000a3e <USB_Device_ProcessControlRequest>:
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_Device_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
     a3e:	1f 93       	push	r17
     a40:	cf 93       	push	r28
     a42:	df 93       	push	r29
     a44:	cd b7       	in	r28, 0x3d	; 61
     a46:	de b7       	in	r29, 0x3e	; 62
     a48:	ac 97       	sbiw	r28, 0x2c	; 44
     a4a:	0f b6       	in	r0, 0x3f	; 63
     a4c:	f8 94       	cli
     a4e:	de bf       	out	0x3e, r29	; 62
     a50:	0f be       	out	0x3f, r0	; 63
     a52:	cd bf       	out	0x3d, r28	; 61
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
     a54:	80 e0       	ldi	r24, 0x00	; 0
	USB_ControlRequest.bRequest      = Endpoint_Read_8();
	USB_ControlRequest.wValue        = Endpoint_Read_16_LE();
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;
     a56:	ed e2       	ldi	r30, 0x2D	; 45
     a58:	f1 e0       	ldi	r31, 0x01	; 1
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
     a5a:	90 91 f1 00 	lds	r25, 0x00F1

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_8();
     a5e:	91 93       	st	Z+, r25
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
     a60:	8f 5f       	subi	r24, 0xFF	; 255
     a62:	88 30       	cpi	r24, 0x08	; 8
     a64:	d1 f7       	brne	.-12     	; 0xa5a <USB_Device_ProcessControlRequest+0x1c>
	  *(RequestHeader++) = Endpoint_Read_8();
	#endif

	EVENT_USB_Device_ControlRequest();
     a66:	00 dc       	rcall	.-2048   	; 0x268 <EVENT_USB_Device_ControlRequest>
     a68:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     a6c:	83 ff       	sbrs	r24, 3

	if (Endpoint_IsSETUPReceived())
     a6e:	35 c1       	rjmp	.+618    	; 0xcda <USB_Device_ProcessControlRequest+0x29c>
     a70:	80 91 2d 01 	lds	r24, 0x012D
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
     a74:	20 91 2e 01 	lds	r18, 0x012E

		switch (USB_ControlRequest.bRequest)
     a78:	25 30       	cpi	r18, 0x05	; 5
     a7a:	09 f4       	brne	.+2      	; 0xa7e <USB_Device_ProcessControlRequest+0x40>
     a7c:	84 c0       	rjmp	.+264    	; 0xb86 <USB_Device_ProcessControlRequest+0x148>
     a7e:	26 30       	cpi	r18, 0x06	; 6
     a80:	40 f4       	brcc	.+16     	; 0xa92 <USB_Device_ProcessControlRequest+0x54>
     a82:	21 30       	cpi	r18, 0x01	; 1
     a84:	a1 f1       	breq	.+104    	; 0xaee <USB_Device_ProcessControlRequest+0xb0>
     a86:	21 30       	cpi	r18, 0x01	; 1
     a88:	70 f0       	brcs	.+28     	; 0xaa6 <USB_Device_ProcessControlRequest+0x68>
     a8a:	23 30       	cpi	r18, 0x03	; 3
     a8c:	09 f0       	breq	.+2      	; 0xa90 <USB_Device_ProcessControlRequest+0x52>
     a8e:	25 c1       	rjmp	.+586    	; 0xcda <USB_Device_ProcessControlRequest+0x29c>
     a90:	2e c0       	rjmp	.+92     	; 0xaee <USB_Device_ProcessControlRequest+0xb0>
     a92:	28 30       	cpi	r18, 0x08	; 8
     a94:	09 f4       	brne	.+2      	; 0xa98 <USB_Device_ProcessControlRequest+0x5a>
     a96:	f3 c0       	rjmp	.+486    	; 0xc7e <USB_Device_ProcessControlRequest+0x240>
     a98:	29 30       	cpi	r18, 0x09	; 9
     a9a:	09 f4       	brne	.+2      	; 0xa9e <USB_Device_ProcessControlRequest+0x60>
     a9c:	02 c1       	rjmp	.+516    	; 0xca2 <USB_Device_ProcessControlRequest+0x264>
     a9e:	26 30       	cpi	r18, 0x06	; 6
     aa0:	09 f0       	breq	.+2      	; 0xaa4 <USB_Device_ProcessControlRequest+0x66>
     aa2:	1b c1       	rjmp	.+566    	; 0xcda <USB_Device_ProcessControlRequest+0x29c>
     aa4:	93 c0       	rjmp	.+294    	; 0xbcc <USB_Device_ProcessControlRequest+0x18e>
     aa6:	80 38       	cpi	r24, 0x80	; 128
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
     aa8:	21 f0       	breq	.+8      	; 0xab2 <USB_Device_ProcessControlRequest+0x74>
     aaa:	82 38       	cpi	r24, 0x82	; 130
     aac:	09 f0       	breq	.+2      	; 0xab0 <USB_Device_ProcessControlRequest+0x72>
     aae:	15 c1       	rjmp	.+554    	; 0xcda <USB_Device_ProcessControlRequest+0x29c>
     ab0:	08 c0       	rjmp	.+16     	; 0xac2 <USB_Device_ProcessControlRequest+0x84>
     ab2:	80 91 29 01 	lds	r24, 0x0129
	Endpoint_ClearOUT();
}

static void USB_Device_GetStatus(void)
{
	uint8_t CurrentStatus = 0;
     ab6:	90 91 2a 01 	lds	r25, 0x012A
			if (USB_Device_CurrentlySelfPowered)
			  CurrentStatus |= FEATURE_SELFPOWERED_ENABLED;
			#endif

			#if !defined(NO_DEVICE_REMOTE_WAKEUP)
			if (USB_Device_RemoteWakeupEnabled)
     aba:	99 23       	and	r25, r25
     abc:	71 f0       	breq	.+28     	; 0xada <USB_Device_ProcessControlRequest+0x9c>
     abe:	82 60       	ori	r24, 0x02	; 2
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
     ac0:	0c c0       	rjmp	.+24     	; 0xada <USB_Device_ProcessControlRequest+0x9c>
     ac2:	80 91 31 01 	lds	r24, 0x0131
			#endif
			break;
		case (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_ENDPOINT):
			#if !defined(CONTROL_ONLY_DEVICE)
			Endpoint_SelectEndpoint((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
     ac6:	8f 70       	andi	r24, 0x0F	; 15
     ac8:	80 93 e9 00 	sts	0x00E9, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     acc:	90 91 eb 00 	lds	r25, 0x00EB
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
     ad0:	81 e0       	ldi	r24, 0x01	; 1

			CurrentStatus = Endpoint_IsStalled();
     ad2:	95 ff       	sbrs	r25, 5
     ad4:	80 e0       	ldi	r24, 0x00	; 0
     ad6:	10 92 e9 00 	sts	0x00E9, r1
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     ada:	90 91 e8 00 	lds	r25, 0x00E8
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     ade:	97 7f       	andi	r25, 0xF7	; 247
     ae0:	90 93 e8 00 	sts	0x00E8, r25
     ae4:	80 93 f1 00 	sts	0x00F1, r24
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
     ae8:	10 92 f1 00 	sts	0x00F1, r1
				UEDATX = (Data >> 8);
     aec:	d3 c0       	rjmp	.+422    	; 0xc94 <USB_Device_ProcessControlRequest+0x256>
     aee:	88 23       	and	r24, r24
				}

				break;
			case REQ_ClearFeature:
			case REQ_SetFeature:
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
     af0:	19 f0       	breq	.+6      	; 0xaf8 <USB_Device_ProcessControlRequest+0xba>
     af2:	82 30       	cpi	r24, 0x02	; 2
     af4:	09 f0       	breq	.+2      	; 0xaf8 <USB_Device_ProcessControlRequest+0xba>
     af6:	f1 c0       	rjmp	.+482    	; 0xcda <USB_Device_ProcessControlRequest+0x29c>
     af8:	90 e0       	ldi	r25, 0x00	; 0
	Endpoint_ClearStatusStage();
}

static void USB_Device_ClearSetFeature(void)
{
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
     afa:	8f 71       	andi	r24, 0x1F	; 31
     afc:	90 70       	andi	r25, 0x00	; 0
     afe:	00 97       	sbiw	r24, 0x00	; 0
     b00:	29 f0       	breq	.+10     	; 0xb0c <USB_Device_ProcessControlRequest+0xce>
     b02:	82 30       	cpi	r24, 0x02	; 2
     b04:	91 05       	cpc	r25, r1
     b06:	09 f0       	breq	.+2      	; 0xb0a <USB_Device_ProcessControlRequest+0xcc>
     b08:	e8 c0       	rjmp	.+464    	; 0xcda <USB_Device_ProcessControlRequest+0x29c>
     b0a:	0b c0       	rjmp	.+22     	; 0xb22 <USB_Device_ProcessControlRequest+0xe4>
     b0c:	80 91 2f 01 	lds	r24, 0x012F
	{
		#if !defined(NO_DEVICE_REMOTE_WAKEUP)
		case REQREC_DEVICE:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
     b10:	81 30       	cpi	r24, 0x01	; 1
     b12:	09 f0       	breq	.+2      	; 0xb16 <USB_Device_ProcessControlRequest+0xd8>
     b14:	e2 c0       	rjmp	.+452    	; 0xcda <USB_Device_ProcessControlRequest+0x29c>
     b16:	23 30       	cpi	r18, 0x03	; 3
			  USB_Device_RemoteWakeupEnabled = (USB_ControlRequest.bRequest == REQ_SetFeature);
     b18:	09 f0       	breq	.+2      	; 0xb1c <USB_Device_ProcessControlRequest+0xde>
     b1a:	80 e0       	ldi	r24, 0x00	; 0
     b1c:	80 93 2a 01 	sts	0x012A, r24
     b20:	2c c0       	rjmp	.+88     	; 0xb7a <USB_Device_ProcessControlRequest+0x13c>
     b22:	80 91 2f 01 	lds	r24, 0x012F

			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
     b26:	88 23       	and	r24, r24
     b28:	41 f5       	brne	.+80     	; 0xb7a <USB_Device_ProcessControlRequest+0x13c>
     b2a:	20 91 31 01 	lds	r18, 0x0131
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
     b2e:	2f 70       	andi	r18, 0x0F	; 15
     b30:	09 f4       	brne	.+2      	; 0xb34 <USB_Device_ProcessControlRequest+0xf6>

				if (EndpointIndex == ENDPOINT_CONTROLEP)
     b32:	d3 c0       	rjmp	.+422    	; 0xcda <USB_Device_ProcessControlRequest+0x29c>
     b34:	20 93 e9 00 	sts	0x00E9, r18
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     b38:	80 91 eb 00 	lds	r24, 0x00EB
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
     b3c:	80 ff       	sbrs	r24, 0
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
     b3e:	1d c0       	rjmp	.+58     	; 0xb7a <USB_Device_ProcessControlRequest+0x13c>
     b40:	80 91 2e 01 	lds	r24, 0x012E
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
     b44:	83 30       	cpi	r24, 0x03	; 3
     b46:	21 f4       	brne	.+8      	; 0xb50 <USB_Device_ProcessControlRequest+0x112>
     b48:	80 91 eb 00 	lds	r24, 0x00EB
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
     b4c:	80 62       	ori	r24, 0x20	; 32
     b4e:	13 c0       	rjmp	.+38     	; 0xb76 <USB_Device_ProcessControlRequest+0x138>
     b50:	80 91 eb 00 	lds	r24, 0x00EB
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
     b54:	80 61       	ori	r24, 0x10	; 16
     b56:	80 93 eb 00 	sts	0x00EB, r24
     b5a:	81 e0       	ldi	r24, 0x01	; 1
			 *  \param[in] Address  Endpoint address whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t Address)
			{
				UERST = (1 << (Address & ENDPOINT_EPNUM_MASK));
     b5c:	90 e0       	ldi	r25, 0x00	; 0
     b5e:	02 c0       	rjmp	.+4      	; 0xb64 <USB_Device_ProcessControlRequest+0x126>
     b60:	88 0f       	add	r24, r24
     b62:	99 1f       	adc	r25, r25
     b64:	2a 95       	dec	r18
     b66:	e2 f7       	brpl	.-8      	; 0xb60 <USB_Device_ProcessControlRequest+0x122>
     b68:	80 93 ea 00 	sts	0x00EA, r24
     b6c:	10 92 ea 00 	sts	0x00EA, r1
				UERST = 0;
     b70:	80 91 eb 00 	lds	r24, 0x00EB

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
     b74:	88 60       	ori	r24, 0x08	; 8
     b76:	80 93 eb 00 	sts	0x00EB, r24
     b7a:	10 92 e9 00 	sts	0x00E9, r1
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     b7e:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     b82:	87 7f       	andi	r24, 0xF7	; 247
     b84:	8a c0       	rjmp	.+276    	; 0xc9a <USB_Device_ProcessControlRequest+0x25c>
     b86:	88 23       	and	r24, r24
					USB_Device_ClearSetFeature();
				}

				break;
			case REQ_SetAddress:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
     b88:	09 f0       	breq	.+2      	; 0xb8c <USB_Device_ProcessControlRequest+0x14e>
     b8a:	a7 c0       	rjmp	.+334    	; 0xcda <USB_Device_ProcessControlRequest+0x29c>
     b8c:	10 91 2f 01 	lds	r17, 0x012F
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t DeviceAddress = (USB_ControlRequest.wValue & 0x7F);
     b90:	1f 77       	andi	r17, 0x7F	; 127
     b92:	80 91 e3 00 	lds	r24, 0x00E3
			#endif

			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				UDADDR = (UDADDR & (1 << ADDEN)) | (Address & 0x7F);
     b96:	80 78       	andi	r24, 0x80	; 128
     b98:	81 2b       	or	r24, r17
     b9a:	80 93 e3 00 	sts	0x00E3, r24
     b9e:	80 91 e8 00 	lds	r24, 0x00E8
     ba2:	87 7f       	andi	r24, 0xF7	; 247
     ba4:	80 93 e8 00 	sts	0x00E8, r24
     ba8:	ce dd       	rcall	.-1124   	; 0x746 <Endpoint_ClearStatusStage>

	USB_Device_SetDeviceAddress(DeviceAddress);

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
     baa:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     bae:	80 ff       	sbrs	r24, 0
     bb0:	fc cf       	rjmp	.-8      	; 0xbaa <USB_Device_ProcessControlRequest+0x16c>

	while (!(Endpoint_IsINReady()));
     bb2:	80 91 e3 00 	lds	r24, 0x00E3
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address)
			{
				(void)Address;
				
				UDADDR |= (1 << ADDEN);
     bb6:	80 68       	ori	r24, 0x80	; 128
     bb8:	80 93 e3 00 	sts	0x00E3, r24
     bbc:	11 23       	and	r17, r17
     bbe:	11 f0       	breq	.+4      	; 0xbc4 <USB_Device_ProcessControlRequest+0x186>

	USB_Device_EnableDeviceAddress(DeviceAddress);

	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
     bc0:	83 e0       	ldi	r24, 0x03	; 3
     bc2:	01 c0       	rjmp	.+2      	; 0xbc6 <USB_Device_ProcessControlRequest+0x188>
     bc4:	82 e0       	ldi	r24, 0x02	; 2
     bc6:	80 93 2c 01 	sts	0x012C, r24
     bca:	87 c0       	rjmp	.+270    	; 0xcda <USB_Device_ProcessControlRequest+0x29c>
     bcc:	80 58       	subi	r24, 0x80	; 128
     bce:	82 30       	cpi	r24, 0x02	; 2
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_SetAddress();

				break;
			case REQ_GetDescriptor:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
     bd0:	08 f0       	brcs	.+2      	; 0xbd4 <USB_Device_ProcessControlRequest+0x196>
     bd2:	83 c0       	rjmp	.+262    	; 0xcda <USB_Device_ProcessControlRequest+0x29c>
     bd4:	80 91 2f 01 	lds	r24, 0x012F
	    !(defined(USE_FLASH_DESCRIPTORS) || defined(USE_EEPROM_DESCRIPTORS) || defined(USE_RAM_DESCRIPTORS))
	uint8_t DescriptorAddressSpace;
	#endif

	#if !defined(NO_INTERNAL_SERIAL) && (USE_INTERNAL_SERIAL != NO_DESCRIPTOR)
	if (USB_ControlRequest.wValue == ((DTYPE_String << 8) | USE_INTERNAL_SERIAL))
     bd8:	90 91 30 01 	lds	r25, 0x0130
     bdc:	23 e0       	ldi	r18, 0x03	; 3
     bde:	8c 3d       	cpi	r24, 0xDC	; 220
     be0:	92 07       	cpc	r25, r18
     be2:	a9 f5       	brne	.+106    	; 0xc4e <USB_Device_ProcessControlRequest+0x210>
     be4:	83 e0       	ldi	r24, 0x03	; 3
     be6:	8c 83       	std	Y+4, r24	; 0x04
	{
		USB_Descriptor_Header_t Header;
		uint16_t                UnicodeString[INTERNAL_SERIAL_LENGTH_BITS / 4];
	} SignatureDescriptor;

	SignatureDescriptor.Header.Type = DTYPE_String;
     be8:	8a e2       	ldi	r24, 0x2A	; 42
     bea:	8b 83       	std	Y+3, r24	; 0x03
	SignatureDescriptor.Header.Size = USB_STRING_LEN(INTERNAL_SERIAL_LENGTH_BITS / 4);
     bec:	5f b7       	in	r21, 0x3f	; 63
     bee:	f8 94       	cli
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
     bf0:	de 01       	movw	r26, r28
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
     bf2:	13 96       	adiw	r26, 0x03	; 3
				__builtin_ssrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				cli();
				#endif

				GCC_MEMORY_BARRIER();
     bf4:	80 e0       	ldi	r24, 0x00	; 0
     bf6:	90 e0       	ldi	r25, 0x00	; 0
     bf8:	4e e0       	ldi	r20, 0x0E	; 14
     bfa:	61 e2       	ldi	r22, 0x21	; 33
			static inline void USB_Device_GetSerialString(uint16_t* const UnicodeString)
			{
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;
     bfc:	e4 2f       	mov	r30, r20

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
				{
					uint8_t SerialByte = boot_signature_byte_get(SigReadAddress);
     bfe:	f0 e0       	ldi	r31, 0x00	; 0
     c00:	60 93 57 00 	sts	0x0057, r22
     c04:	e4 91       	lpm	r30, Z
     c06:	80 ff       	sbrs	r24, 0
     c08:	03 c0       	rjmp	.+6      	; 0xc10 <USB_Device_ProcessControlRequest+0x1d2>

					if (SerialCharNum & 0x01)
     c0a:	e2 95       	swap	r30
     c0c:	ef 70       	andi	r30, 0x0F	; 15
					{
						SerialByte >>= 4;
     c0e:	4f 5f       	subi	r20, 0xFF	; 255
     c10:	ef 70       	andi	r30, 0x0F	; 15
						SigReadAddress++;
     c12:	2e 2f       	mov	r18, r30
					}

					SerialByte &= 0x0F;
     c14:	30 e0       	ldi	r19, 0x00	; 0
     c16:	ea 30       	cpi	r30, 0x0A	; 10
     c18:	18 f0       	brcs	.+6      	; 0xc20 <USB_Device_ProcessControlRequest+0x1e2>

					UnicodeString[SerialCharNum] = cpu_to_le16((SerialByte >= 10) ?
     c1a:	29 5c       	subi	r18, 0xC9	; 201
     c1c:	3f 4f       	sbci	r19, 0xFF	; 255
     c1e:	02 c0       	rjmp	.+4      	; 0xc24 <USB_Device_ProcessControlRequest+0x1e6>
     c20:	20 5d       	subi	r18, 0xD0	; 208
     c22:	3f 4f       	sbci	r19, 0xFF	; 255
     c24:	13 96       	adiw	r26, 0x03	; 3
     c26:	3c 93       	st	X, r19
     c28:	2e 93       	st	-X, r18
     c2a:	12 97       	sbiw	r26, 0x02	; 2
     c2c:	01 96       	adiw	r24, 0x01	; 1
     c2e:	12 96       	adiw	r26, 0x02	; 2
     c30:	84 31       	cpi	r24, 0x14	; 20
     c32:	91 05       	cpc	r25, r1
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
     c34:	19 f7       	brne	.-58     	; 0xbfc <USB_Device_ProcessControlRequest+0x1be>
     c36:	5f bf       	out	0x3f, r21	; 63
     c38:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     c3c:	87 7f       	andi	r24, 0xF7	; 247
     c3e:	80 93 e8 00 	sts	0x00E8, r24
     c42:	ce 01       	movw	r24, r28
     c44:	03 96       	adiw	r24, 0x03	; 3

	USB_Device_GetSerialString(SignatureDescriptor.UnicodeString);

	Endpoint_ClearSETUP();

	Endpoint_Write_Control_Stream_LE(&SignatureDescriptor, sizeof(SignatureDescriptor));
     c46:	6a e2       	ldi	r22, 0x2A	; 42
     c48:	70 e0       	ldi	r23, 0x00	; 0
     c4a:	0a dc       	rcall	.-2028   	; 0x460 <Endpoint_Write_Control_Stream_LE>
     c4c:	12 c0       	rjmp	.+36     	; 0xc72 <USB_Device_ProcessControlRequest+0x234>
     c4e:	60 91 31 01 	lds	r22, 0x0131
     c52:	ae 01       	movw	r20, r28
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif

	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
     c54:	4f 5f       	subi	r20, 0xFF	; 255
     c56:	5f 4f       	sbci	r21, 0xFF	; 255
     c58:	76 db       	rcall	.-2324   	; 0x346 <CALLBACK_USB_GetDescriptor>
     c5a:	bc 01       	movw	r22, r24
     c5c:	00 97       	sbiw	r24, 0x00	; 0
     c5e:	09 f4       	brne	.+2      	; 0xc62 <USB_Device_ProcessControlRequest+0x224>
     c60:	3c c0       	rjmp	.+120    	; 0xcda <USB_Device_ProcessControlRequest+0x29c>
     c62:	80 91 e8 00 	lds	r24, 0x00E8
     c66:	87 7f       	andi	r24, 0xF7	; 247
     c68:	80 93 e8 00 	sts	0x00E8, r24
     c6c:	89 81       	ldd	r24, Y+1	; 0x01
     c6e:	9a 81       	ldd	r25, Y+2	; 0x02
     c70:	9c dc       	rcall	.-1736   	; 0x5aa <Endpoint_Write_Control_PStream_LE>
     c72:	80 91 e8 00 	lds	r24, 0x00E8
	#if defined(USE_RAM_DESCRIPTORS) || !defined(ARCH_HAS_MULTI_ADDRESS_SPACE)
	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_EEPROM_DESCRIPTORS)
	Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_FLASH_DESCRIPTORS)
	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
     c76:	8b 77       	andi	r24, 0x7B	; 123
     c78:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     c7c:	2e c0       	rjmp	.+92     	; 0xcda <USB_Device_ProcessControlRequest+0x29c>
     c7e:	80 38       	cpi	r24, 0x80	; 128
     c80:	61 f5       	brne	.+88     	; 0xcda <USB_Device_ProcessControlRequest+0x29c>
     c82:	80 91 e8 00 	lds	r24, 0x00E8
     c86:	87 7f       	andi	r24, 0xF7	; 247
					USB_Device_GetDescriptor();
				}

				break;
			case REQ_GetConfiguration:
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
     c88:	80 93 e8 00 	sts	0x00E8, r24
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     c8c:	80 91 28 01 	lds	r24, 0x0128
     c90:	80 93 f1 00 	sts	0x00F1, r24
     c94:	80 91 e8 00 	lds	r24, 0x00E8

static void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();

	Endpoint_Write_8(USB_Device_ConfigurationNumber);
     c98:	8e 77       	andi	r24, 0x7E	; 126
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     c9a:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     c9e:	53 dd       	rcall	.-1370   	; 0x746 <Endpoint_ClearStatusStage>
     ca0:	1c c0       	rjmp	.+56     	; 0xcda <USB_Device_ProcessControlRequest+0x29c>
     ca2:	88 23       	and	r24, r24
     ca4:	d1 f4       	brne	.+52     	; 0xcda <USB_Device_ProcessControlRequest+0x29c>
     ca6:	90 91 2f 01 	lds	r25, 0x012F
	Endpoint_ClearIN();

	Endpoint_ClearStatusStage();
     caa:	92 30       	cpi	r25, 0x02	; 2
     cac:	b0 f4       	brcc	.+44     	; 0xcda <USB_Device_ProcessControlRequest+0x29c>
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_GetConfiguration();

				break;
			case REQ_SetConfiguration:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
     cae:	80 91 e8 00 	lds	r24, 0x00E8
}

static void USB_Device_SetConfiguration(void)
{
	#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
     cb2:	87 7f       	andi	r24, 0xF7	; 247
     cb4:	80 93 e8 00 	sts	0x00E8, r24
     cb8:	90 93 28 01 	sts	0x0128, r25
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     cbc:	44 dd       	rcall	.-1400   	; 0x746 <Endpoint_ClearStatusStage>
     cbe:	80 91 28 01 	lds	r24, 0x0128
     cc2:	88 23       	and	r24, r24
	#endif
	#endif

	Endpoint_ClearSETUP();

	USB_Device_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
     cc4:	21 f4       	brne	.+8      	; 0xcce <USB_Device_ProcessControlRequest+0x290>
     cc6:	80 91 e3 00 	lds	r24, 0x00E3

	Endpoint_ClearStatusStage();
     cca:	87 ff       	sbrs	r24, 7

	if (USB_Device_ConfigurationNumber)
     ccc:	02 c0       	rjmp	.+4      	; 0xcd2 <USB_Device_ProcessControlRequest+0x294>
     cce:	84 e0       	ldi	r24, 0x04	; 4
     cd0:	01 c0       	rjmp	.+2      	; 0xcd4 <USB_Device_ProcessControlRequest+0x296>
     cd2:	81 e0       	ldi	r24, 0x01	; 1
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
     cd4:	80 93 2c 01 	sts	0x012C, r24
	  USB_DeviceState = DEVICE_STATE_Configured;
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
     cd8:	b9 da       	rcall	.-2702   	; 0x24c <EVENT_USB_Device_ConfigurationChanged>
     cda:	80 91 e8 00 	lds	r24, 0x00E8
     cde:	83 ff       	sbrs	r24, 3
     ce0:	0a c0       	rjmp	.+20     	; 0xcf6 <USB_Device_ProcessControlRequest+0x2b8>
     ce2:	80 91 e8 00 	lds	r24, 0x00E8

	EVENT_USB_Device_ConfigurationChanged();
     ce6:	87 7f       	andi	r24, 0xF7	; 247
     ce8:	80 93 e8 00 	sts	0x00E8, r24
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     cec:	80 91 eb 00 	lds	r24, 0x00EB
			default:
				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
     cf0:	80 62       	ori	r24, 0x20	; 32
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     cf2:	80 93 eb 00 	sts	0x00EB, r24
     cf6:	ac 96       	adiw	r28, 0x2c	; 44
     cf8:	0f b6       	in	r0, 0x3f	; 63
     cfa:	f8 94       	cli
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
     cfc:	de bf       	out	0x3e, r29	; 62
     cfe:	0f be       	out	0x3f, r0	; 63
     d00:	cd bf       	out	0x3d, r28	; 61
     d02:	df 91       	pop	r29
     d04:	cf 91       	pop	r28
	{
		Endpoint_ClearSETUP();
		Endpoint_StallTransaction();
	}
}
     d06:	1f 91       	pop	r17
     d08:	08 95       	ret

00000d0a <USB_Event_Stub>:
#include "Events.h"

void USB_Event_Stub(void)
{

}
     d0a:	08 95       	ret

00000d0c <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
     d0c:	cf 93       	push	r28
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_DeviceTask(void)
{
	if (USB_DeviceState == DEVICE_STATE_Unattached)
     d0e:	80 91 2c 01 	lds	r24, 0x012C
     d12:	88 23       	and	r24, r24
     d14:	a9 f0       	breq	.+42     	; 0xd40 <USB_USBTask+0x34>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
     d16:	80 91 e9 00 	lds	r24, 0x00E9
     d1a:	8f 70       	andi	r24, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
     d1c:	90 91 ec 00 	lds	r25, 0x00EC
     d20:	90 ff       	sbrs	r25, 0
     d22:	02 c0       	rjmp	.+4      	; 0xd28 <USB_USBTask+0x1c>
     d24:	c0 e8       	ldi	r28, 0x80	; 128
     d26:	01 c0       	rjmp	.+2      	; 0xd2a <USB_USBTask+0x1e>
     d28:	c0 e0       	ldi	r28, 0x00	; 0
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
     d2a:	c8 2b       	or	r28, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     d2c:	10 92 e9 00 	sts	0x00E9, r1
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     d30:	80 91 e8 00 	lds	r24, 0x00E8

	uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

	if (Endpoint_IsSETUPReceived())
     d34:	83 ff       	sbrs	r24, 3
     d36:	01 c0       	rjmp	.+2      	; 0xd3a <USB_USBTask+0x2e>
	  USB_Device_ProcessControlRequest();
     d38:	82 de       	rcall	.-764    	; 0xa3e <USB_Device_ProcessControlRequest>
     d3a:	cf 70       	andi	r28, 0x0F	; 15
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     d3c:	c0 93 e9 00 	sts	0x00E9, r28
     d40:	cf 91       	pop	r28
	#elif defined(USB_CAN_BE_HOST)
		USB_HostTask();
	#elif defined(USB_CAN_BE_DEVICE)
		USB_DeviceTask();
	#endif
}
     d42:	08 95       	ret

00000d44 <HID_Device_ProcessControlRequest>:
#define  __INCLUDE_FROM_HID_DRIVER
#define  __INCLUDE_FROM_HID_DEVICE_C
#include "HIDClassDevice.h"

void HID_Device_ProcessControlRequest(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
     d44:	6f 92       	push	r6
     d46:	7f 92       	push	r7
     d48:	8f 92       	push	r8
     d4a:	9f 92       	push	r9
     d4c:	af 92       	push	r10
     d4e:	bf 92       	push	r11
     d50:	cf 92       	push	r12
     d52:	df 92       	push	r13
     d54:	ef 92       	push	r14
     d56:	ff 92       	push	r15
     d58:	0f 93       	push	r16
     d5a:	1f 93       	push	r17
     d5c:	cf 93       	push	r28
     d5e:	df 93       	push	r29
     d60:	00 d0       	rcall	.+0      	; 0xd62 <HID_Device_ProcessControlRequest+0x1e>
     d62:	0f 92       	push	r0
     d64:	cd b7       	in	r28, 0x3d	; 61
     d66:	de b7       	in	r29, 0x3e	; 62
     d68:	7c 01       	movw	r14, r24
				Endpoint_ClearStatusStage();
			}

			break;
	}
}
     d6a:	6d b6       	in	r6, 0x3d	; 61
     d6c:	7e b6       	in	r7, 0x3e	; 62
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     d6e:	80 91 e8 00 	lds	r24, 0x00E8
#define  __INCLUDE_FROM_HID_DEVICE_C
#include "HIDClassDevice.h"

void HID_Device_ProcessControlRequest(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
	if (!(Endpoint_IsSETUPReceived()))
     d72:	83 ff       	sbrs	r24, 3
     d74:	03 c1       	rjmp	.+518    	; 0xf7c <HID_Device_ProcessControlRequest+0x238>
	  return;

	if (USB_ControlRequest.wIndex != HIDInterfaceInfo->Config.InterfaceNumber)
     d76:	f7 01       	movw	r30, r14
     d78:	80 81       	ld	r24, Z
     d7a:	90 e0       	ldi	r25, 0x00	; 0
     d7c:	20 91 31 01 	lds	r18, 0x0131
     d80:	30 91 32 01 	lds	r19, 0x0132
     d84:	28 17       	cp	r18, r24
     d86:	39 07       	cpc	r19, r25
     d88:	09 f0       	breq	.+2      	; 0xd8c <HID_Device_ProcessControlRequest+0x48>
     d8a:	f8 c0       	rjmp	.+496    	; 0xf7c <HID_Device_ProcessControlRequest+0x238>
	  return;

	switch (USB_ControlRequest.bRequest)
     d8c:	80 91 2e 01 	lds	r24, 0x012E
     d90:	83 30       	cpi	r24, 0x03	; 3
     d92:	09 f4       	brne	.+2      	; 0xd96 <HID_Device_ProcessControlRequest+0x52>
     d94:	9a c0       	rjmp	.+308    	; 0xeca <HID_Device_ProcessControlRequest+0x186>
     d96:	84 30       	cpi	r24, 0x04	; 4
     d98:	30 f4       	brcc	.+12     	; 0xda6 <HID_Device_ProcessControlRequest+0x62>
     d9a:	81 30       	cpi	r24, 0x01	; 1
     d9c:	71 f0       	breq	.+28     	; 0xdba <HID_Device_ProcessControlRequest+0x76>
     d9e:	82 30       	cpi	r24, 0x02	; 2
     da0:	09 f0       	breq	.+2      	; 0xda4 <HID_Device_ProcessControlRequest+0x60>
     da2:	ec c0       	rjmp	.+472    	; 0xf7c <HID_Device_ProcessControlRequest+0x238>
     da4:	cf c0       	rjmp	.+414    	; 0xf44 <HID_Device_ProcessControlRequest+0x200>
     da6:	8a 30       	cpi	r24, 0x0A	; 10
     da8:	09 f4       	brne	.+2      	; 0xdac <HID_Device_ProcessControlRequest+0x68>
     daa:	b4 c0       	rjmp	.+360    	; 0xf14 <HID_Device_ProcessControlRequest+0x1d0>
     dac:	8b 30       	cpi	r24, 0x0B	; 11
     dae:	09 f4       	brne	.+2      	; 0xdb2 <HID_Device_ProcessControlRequest+0x6e>
     db0:	9d c0       	rjmp	.+314    	; 0xeec <HID_Device_ProcessControlRequest+0x1a8>
     db2:	89 30       	cpi	r24, 0x09	; 9
     db4:	09 f0       	breq	.+2      	; 0xdb8 <HID_Device_ProcessControlRequest+0x74>
     db6:	e2 c0       	rjmp	.+452    	; 0xf7c <HID_Device_ProcessControlRequest+0x238>
     db8:	4b c0       	rjmp	.+150    	; 0xe50 <HID_Device_ProcessControlRequest+0x10c>
	{
		case HID_REQ_GetReport:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
     dba:	80 91 2d 01 	lds	r24, 0x012D
     dbe:	81 3a       	cpi	r24, 0xA1	; 161
     dc0:	09 f0       	breq	.+2      	; 0xdc4 <HID_Device_ProcessControlRequest+0x80>
     dc2:	dc c0       	rjmp	.+440    	; 0xf7c <HID_Device_ProcessControlRequest+0x238>
     dc4:	9d b6       	in	r9, 0x3d	; 61
     dc6:	8e b6       	in	r8, 0x3e	; 62
			{
				uint16_t ReportSize = 0;
     dc8:	1b 82       	std	Y+3, r1	; 0x03
     dca:	1a 82       	std	Y+2, r1	; 0x02
				uint8_t  ReportID   = (USB_ControlRequest.wValue & 0xFF);
     dcc:	80 91 2f 01 	lds	r24, 0x012F
     dd0:	00 91 30 01 	lds	r16, 0x0130
     dd4:	89 83       	std	Y+1, r24	; 0x01
				uint8_t  ReportType = (USB_ControlRequest.wValue >> 8) - 1;
				uint8_t  ReportData[HIDInterfaceInfo->Config.PrevReportINBufferSize];
     dd6:	f7 01       	movw	r30, r14
     dd8:	40 85       	ldd	r20, Z+8	; 0x08
     dda:	8d b7       	in	r24, 0x3d	; 61
     ddc:	9e b7       	in	r25, 0x3e	; 62
     dde:	84 1b       	sub	r24, r20
     de0:	91 09       	sbc	r25, r1
     de2:	0f b6       	in	r0, 0x3f	; 63
     de4:	f8 94       	cli
     de6:	9e bf       	out	0x3e, r25	; 62
     de8:	0f be       	out	0x3f, r0	; 63
     dea:	8d bf       	out	0x3d, r24	; 61
     dec:	cd b6       	in	r12, 0x3d	; 61
     dee:	de b6       	in	r13, 0x3e	; 62
     df0:	08 94       	sec
     df2:	c1 1c       	adc	r12, r1
     df4:	d1 1c       	adc	r13, r1

				memset(ReportData, 0, sizeof(ReportData));
     df6:	bc 2c       	mov	r11, r12
     df8:	ad 2c       	mov	r10, r13
     dfa:	c6 01       	movw	r24, r12
     dfc:	60 e0       	ldi	r22, 0x00	; 0
     dfe:	70 e0       	ldi	r23, 0x00	; 0
     e00:	50 e0       	ldi	r21, 0x00	; 0
     e02:	c8 d1       	rcall	.+912    	; 0x1194 <memset>
     e04:	40 2f       	mov	r20, r16
		case HID_REQ_GetReport:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
			{
				uint16_t ReportSize = 0;
				uint8_t  ReportID   = (USB_ControlRequest.wValue & 0xFF);
				uint8_t  ReportType = (USB_ControlRequest.wValue >> 8) - 1;
     e06:	41 50       	subi	r20, 0x01	; 1
     e08:	c7 01       	movw	r24, r14
				uint8_t  ReportData[HIDInterfaceInfo->Config.PrevReportINBufferSize];

				memset(ReportData, 0, sizeof(ReportData));

				CALLBACK_HID_Device_CreateHIDReport(HIDInterfaceInfo, &ReportID, ReportType, ReportData, &ReportSize);
     e0a:	be 01       	movw	r22, r28
     e0c:	6f 5f       	subi	r22, 0xFF	; 255
     e0e:	7f 4f       	sbci	r23, 0xFF	; 255
     e10:	96 01       	movw	r18, r12
     e12:	8e 01       	movw	r16, r28
     e14:	0e 5f       	subi	r16, 0xFE	; 254
     e16:	1f 4f       	sbci	r17, 0xFF	; 255
     e18:	36 da       	rcall	.-2964   	; 0x286 <CALLBACK_HID_Device_CreateHIDReport>
     e1a:	f7 01       	movw	r30, r14
     e1c:	86 81       	ldd	r24, Z+6	; 0x06

				if (HIDInterfaceInfo->Config.PrevReportINBuffer != NULL)
     e1e:	97 81       	ldd	r25, Z+7	; 0x07
     e20:	00 97       	sbiw	r24, 0x00	; 0
     e22:	21 f0       	breq	.+8      	; 0xe2c <HID_Device_ProcessControlRequest+0xe8>
     e24:	40 85       	ldd	r20, Z+8	; 0x08
     e26:	b6 01       	movw	r22, r12
				{
					memcpy(HIDInterfaceInfo->Config.PrevReportINBuffer, ReportData,
     e28:	50 e0       	ldi	r21, 0x00	; 0
     e2a:	ab d1       	rcall	.+854    	; 0x1182 <memcpy>
     e2c:	10 92 e9 00 	sts	0x00E9, r1
     e30:	80 91 e8 00 	lds	r24, 0x00E8
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     e34:	87 7f       	andi	r24, 0xF7	; 247
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     e36:	80 93 e8 00 	sts	0x00E8, r24
     e3a:	6a 81       	ldd	r22, Y+2	; 0x02
     e3c:	7b 81       	ldd	r23, Y+3	; 0x03
     e3e:	8b 2d       	mov	r24, r11
				}

				Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

				Endpoint_ClearSETUP();
				Endpoint_Write_Control_Stream_LE(ReportData, ReportSize);
     e40:	9a 2d       	mov	r25, r10
     e42:	0e db       	rcall	.-2532   	; 0x460 <Endpoint_Write_Control_Stream_LE>
     e44:	80 91 e8 00 	lds	r24, 0x00E8
     e48:	8b 77       	andi	r24, 0x7B	; 123
     e4a:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     e4e:	3a c0       	rjmp	.+116    	; 0xec4 <HID_Device_ProcessControlRequest+0x180>
     e50:	80 91 2d 01 	lds	r24, 0x012D
     e54:	81 32       	cpi	r24, 0x21	; 33
     e56:	09 f0       	breq	.+2      	; 0xe5a <HID_Device_ProcessControlRequest+0x116>
				Endpoint_ClearOUT();
			}

			break;
		case HID_REQ_SetReport:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
     e58:	91 c0       	rjmp	.+290    	; 0xf7c <HID_Device_ProcessControlRequest+0x238>
     e5a:	9d b6       	in	r9, 0x3d	; 61
     e5c:	8e b6       	in	r8, 0x3e	; 62
     e5e:	00 91 33 01 	lds	r16, 0x0133
     e62:	10 91 34 01 	lds	r17, 0x0134
			{
				uint16_t ReportSize = USB_ControlRequest.wLength;
     e66:	c0 90 2f 01 	lds	r12, 0x012F
     e6a:	d0 90 30 01 	lds	r13, 0x0130
				uint8_t  ReportID   = (USB_ControlRequest.wValue & 0xFF);
     e6e:	8d b7       	in	r24, 0x3d	; 61
     e70:	9e b7       	in	r25, 0x3e	; 62
     e72:	80 1b       	sub	r24, r16
     e74:	91 0b       	sbc	r25, r17
				uint8_t  ReportType = (USB_ControlRequest.wValue >> 8) - 1;
				uint8_t  ReportData[ReportSize];
     e76:	0f b6       	in	r0, 0x3f	; 63
     e78:	f8 94       	cli
     e7a:	9e bf       	out	0x3e, r25	; 62
     e7c:	0f be       	out	0x3f, r0	; 63
     e7e:	8d bf       	out	0x3d, r24	; 61
     e80:	ad b6       	in	r10, 0x3d	; 61
     e82:	be b6       	in	r11, 0x3e	; 62
     e84:	08 94       	sec
     e86:	a1 1c       	adc	r10, r1
     e88:	b1 1c       	adc	r11, r1
     e8a:	80 91 e8 00 	lds	r24, 0x00E8
     e8e:	87 7f       	andi	r24, 0xF7	; 247
     e90:	80 93 e8 00 	sts	0x00E8, r24
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     e94:	c5 01       	movw	r24, r10
     e96:	b8 01       	movw	r22, r16
     e98:	3f db       	rcall	.-2434   	; 0x518 <Endpoint_Read_Control_Stream_LE>
     e9a:	80 91 e8 00 	lds	r24, 0x00E8

				Endpoint_ClearSETUP();
				Endpoint_Read_Control_Stream_LE(ReportData, ReportSize);
     e9e:	8e 77       	andi	r24, 0x7E	; 126
     ea0:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     ea4:	81 e0       	ldi	r24, 0x01	; 1
     ea6:	90 e0       	ldi	r25, 0x00	; 0
     ea8:	cc 20       	and	r12, r12
     eaa:	11 f4       	brne	.+4      	; 0xeb0 <HID_Device_ProcessControlRequest+0x16c>
     eac:	80 e0       	ldi	r24, 0x00	; 0
				Endpoint_ClearIN();

				CALLBACK_HID_Device_ProcessHIDReport(HIDInterfaceInfo, ReportID, ReportType,
     eae:	90 e0       	ldi	r25, 0x00	; 0
     eb0:	4d 2d       	mov	r20, r13
     eb2:	41 50       	subi	r20, 0x01	; 1
     eb4:	95 01       	movw	r18, r10
     eb6:	28 0f       	add	r18, r24
     eb8:	39 1f       	adc	r19, r25
		case HID_REQ_SetReport:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
			{
				uint16_t ReportSize = USB_ControlRequest.wLength;
				uint8_t  ReportID   = (USB_ControlRequest.wValue & 0xFF);
				uint8_t  ReportType = (USB_ControlRequest.wValue >> 8) - 1;
     eba:	08 1b       	sub	r16, r24
     ebc:	19 0b       	sbc	r17, r25

				Endpoint_ClearSETUP();
				Endpoint_Read_Control_Stream_LE(ReportData, ReportSize);
				Endpoint_ClearIN();

				CALLBACK_HID_Device_ProcessHIDReport(HIDInterfaceInfo, ReportID, ReportType,
     ebe:	c7 01       	movw	r24, r14
     ec0:	6c 2d       	mov	r22, r12
     ec2:	35 da       	rcall	.-2966   	; 0x32e <CALLBACK_HID_Device_ProcessHIDReport>
     ec4:	9d be       	out	0x3d, r9	; 61
     ec6:	8e be       	out	0x3e, r8	; 62
     ec8:	59 c0       	rjmp	.+178    	; 0xf7c <HID_Device_ProcessControlRequest+0x238>
     eca:	80 91 2d 01 	lds	r24, 0x012D
     ece:	81 3a       	cpi	r24, 0xA1	; 161
     ed0:	09 f0       	breq	.+2      	; 0xed4 <HID_Device_ProcessControlRequest+0x190>
     ed2:	54 c0       	rjmp	.+168    	; 0xf7c <HID_Device_ProcessControlRequest+0x238>
     ed4:	80 91 e8 00 	lds	r24, 0x00E8
				                                     &ReportData[ReportID ? 1 : 0], ReportSize - (ReportID ? 1 : 0));
			}

			break;
		case HID_REQ_GetProtocol:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
     ed8:	87 7f       	andi	r24, 0xF7	; 247
     eda:	80 93 e8 00 	sts	0x00E8, r24
     ede:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     ee2:	80 ff       	sbrs	r24, 0
     ee4:	fc cf       	rjmp	.-8      	; 0xede <HID_Device_ProcessControlRequest+0x19a>
     ee6:	f7 01       	movw	r30, r14
     ee8:	81 85       	ldd	r24, Z+9	; 0x09
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     eea:	40 c0       	rjmp	.+128    	; 0xf6c <HID_Device_ProcessControlRequest+0x228>
     eec:	80 91 2d 01 	lds	r24, 0x012D
			{
				Endpoint_ClearSETUP();
				while (!(Endpoint_IsINReady()));
     ef0:	81 32       	cpi	r24, 0x21	; 33
				Endpoint_Write_8(HIDInterfaceInfo->State.UsingReportProtocol);
     ef2:	09 f0       	breq	.+2      	; 0xef6 <HID_Device_ProcessControlRequest+0x1b2>
     ef4:	43 c0       	rjmp	.+134    	; 0xf7c <HID_Device_ProcessControlRequest+0x238>
     ef6:	80 91 e8 00 	lds	r24, 0x00E8
				Endpoint_ClearStatusStage();
			}

			break;
		case HID_REQ_SetProtocol:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
     efa:	87 7f       	andi	r24, 0xF7	; 247
     efc:	80 93 e8 00 	sts	0x00E8, r24
     f00:	22 dc       	rcall	.-1980   	; 0x746 <Endpoint_ClearStatusStage>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     f02:	90 91 2f 01 	lds	r25, 0x012F
     f06:	81 e0       	ldi	r24, 0x01	; 1
     f08:	99 23       	and	r25, r25
     f0a:	09 f4       	brne	.+2      	; 0xf0e <HID_Device_ProcessControlRequest+0x1ca>
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
     f0c:	80 e0       	ldi	r24, 0x00	; 0
     f0e:	f7 01       	movw	r30, r14

				HIDInterfaceInfo->State.UsingReportProtocol = ((USB_ControlRequest.wValue & 0xFF) != 0x00);
     f10:	81 87       	std	Z+9, r24	; 0x09
     f12:	34 c0       	rjmp	.+104    	; 0xf7c <HID_Device_ProcessControlRequest+0x238>
     f14:	80 91 2d 01 	lds	r24, 0x012D
     f18:	81 32       	cpi	r24, 0x21	; 33
     f1a:	81 f5       	brne	.+96     	; 0xf7c <HID_Device_ProcessControlRequest+0x238>
     f1c:	80 91 e8 00 	lds	r24, 0x00E8
     f20:	87 7f       	andi	r24, 0xF7	; 247
			}

			break;
		case HID_REQ_SetIdle:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
     f22:	80 93 e8 00 	sts	0x00E8, r24
     f26:	0f dc       	rcall	.-2018   	; 0x746 <Endpoint_ClearStatusStage>
     f28:	80 91 2f 01 	lds	r24, 0x012F
     f2c:	90 91 30 01 	lds	r25, 0x0130
     f30:	80 70       	andi	r24, 0x00	; 0
     f32:	36 e0       	ldi	r19, 0x06	; 6
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
     f34:	96 95       	lsr	r25
     f36:	87 95       	ror	r24

				HIDInterfaceInfo->State.IdleCount = ((USB_ControlRequest.wValue & 0xFF00) >> 6);
     f38:	3a 95       	dec	r19
     f3a:	e1 f7       	brne	.-8      	; 0xf34 <HID_Device_ProcessControlRequest+0x1f0>
     f3c:	f7 01       	movw	r30, r14
     f3e:	95 87       	std	Z+13, r25	; 0x0d
     f40:	84 87       	std	Z+12, r24	; 0x0c
     f42:	1c c0       	rjmp	.+56     	; 0xf7c <HID_Device_ProcessControlRequest+0x238>
     f44:	80 91 2d 01 	lds	r24, 0x012D
     f48:	81 3a       	cpi	r24, 0xA1	; 161
     f4a:	c1 f4       	brne	.+48     	; 0xf7c <HID_Device_ProcessControlRequest+0x238>
     f4c:	80 91 e8 00 	lds	r24, 0x00E8
     f50:	87 7f       	andi	r24, 0xF7	; 247
     f52:	80 93 e8 00 	sts	0x00E8, r24
			}

			break;
		case HID_REQ_GetIdle:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
     f56:	80 91 e8 00 	lds	r24, 0x00E8
     f5a:	80 ff       	sbrs	r24, 0
     f5c:	fc cf       	rjmp	.-8      	; 0xf56 <HID_Device_ProcessControlRequest+0x212>
     f5e:	f7 01       	movw	r30, r14
     f60:	84 85       	ldd	r24, Z+12	; 0x0c
     f62:	95 85       	ldd	r25, Z+13	; 0x0d
     f64:	96 95       	lsr	r25
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     f66:	87 95       	ror	r24
     f68:	96 95       	lsr	r25
			{
				Endpoint_ClearSETUP();
				while (!(Endpoint_IsINReady()));
     f6a:	87 95       	ror	r24
     f6c:	80 93 f1 00 	sts	0x00F1, r24
				Endpoint_Write_8(HIDInterfaceInfo->State.IdleCount >> 2);
     f70:	80 91 e8 00 	lds	r24, 0x00E8
     f74:	8e 77       	andi	r24, 0x7E	; 126
     f76:	80 93 e8 00 	sts	0x00E8, r24
     f7a:	e5 db       	rcall	.-2102   	; 0x746 <Endpoint_ClearStatusStage>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     f7c:	0f b6       	in	r0, 0x3f	; 63
     f7e:	f8 94       	cli
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     f80:	7e be       	out	0x3e, r7	; 62
     f82:	0f be       	out	0x3f, r0	; 63
     f84:	6d be       	out	0x3d, r6	; 61
     f86:	0f 90       	pop	r0
     f88:	0f 90       	pop	r0
				Endpoint_ClearIN();
				Endpoint_ClearStatusStage();
     f8a:	0f 90       	pop	r0
     f8c:	df 91       	pop	r29
			}

			break;
	}
}
     f8e:	cf 91       	pop	r28
     f90:	1f 91       	pop	r17
     f92:	0f 91       	pop	r16
     f94:	ff 90       	pop	r15
     f96:	ef 90       	pop	r14
     f98:	df 90       	pop	r13
     f9a:	cf 90       	pop	r12
     f9c:	bf 90       	pop	r11
     f9e:	af 90       	pop	r10
     fa0:	9f 90       	pop	r9
     fa2:	8f 90       	pop	r8
     fa4:	7f 90       	pop	r7
     fa6:	6f 90       	pop	r6
     fa8:	08 95       	ret

00000faa <HID_Device_ConfigureEndpoints>:
     faa:	cf 93       	push	r28
     fac:	df 93       	push	r29
     fae:	fc 01       	movw	r30, r24
     fb0:	09 96       	adiw	r24, 0x09	; 9
     fb2:	dc 01       	movw	r26, r24
     fb4:	87 e0       	ldi	r24, 0x07	; 7
     fb6:	ed 01       	movw	r28, r26
     fb8:	19 92       	st	Y+, r1
     fba:	8a 95       	dec	r24

bool HID_Device_ConfigureEndpoints(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
	memset(&HIDInterfaceInfo->State, 0x00, sizeof(HIDInterfaceInfo->State));
     fbc:	e9 f7       	brne	.-6      	; 0xfb8 <HID_Device_ConfigureEndpoints+0xe>
	HIDInterfaceInfo->State.UsingReportProtocol = true;
     fbe:	81 e0       	ldi	r24, 0x01	; 1
     fc0:	81 87       	std	Z+9, r24	; 0x09
	HIDInterfaceInfo->State.IdleCount           = 500;
     fc2:	84 ef       	ldi	r24, 0xF4	; 244
     fc4:	91 e0       	ldi	r25, 0x01	; 1
     fc6:	95 87       	std	Z+13, r25	; 0x0d
     fc8:	84 87       	std	Z+12, r24	; 0x0c

	HIDInterfaceInfo->Config.ReportINEndpoint.Type = EP_TYPE_INTERRUPT;
     fca:	83 e0       	ldi	r24, 0x03	; 3
     fcc:	84 83       	std	Z+4, r24	; 0x04

	if (!(Endpoint_ConfigureEndpointTable(&HIDInterfaceInfo->Config.ReportINEndpoint, 1)))
     fce:	cf 01       	movw	r24, r30
     fd0:	01 96       	adiw	r24, 0x01	; 1
     fd2:	61 e0       	ldi	r22, 0x01	; 1
     fd4:	7c db       	rcall	.-2312   	; 0x6ce <Endpoint_ConfigureEndpointTable>
     fd6:	df 91       	pop	r29
	  return false;	
	
	return true;
}
     fd8:	cf 91       	pop	r28
     fda:	08 95       	ret

00000fdc <HID_Device_USBTask>:
     fdc:	4f 92       	push	r4

void HID_Device_USBTask(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
     fde:	5f 92       	push	r5
     fe0:	6f 92       	push	r6
     fe2:	7f 92       	push	r7
     fe4:	8f 92       	push	r8
     fe6:	9f 92       	push	r9
     fe8:	af 92       	push	r10
     fea:	bf 92       	push	r11
     fec:	cf 92       	push	r12
     fee:	df 92       	push	r13
     ff0:	ef 92       	push	r14
     ff2:	ff 92       	push	r15
     ff4:	0f 93       	push	r16
     ff6:	1f 93       	push	r17
     ff8:	cf 93       	push	r28
     ffa:	df 93       	push	r29
     ffc:	00 d0       	rcall	.+0      	; 0xffe <HID_Device_USBTask+0x22>
     ffe:	0f 92       	push	r0
    1000:	cd b7       	in	r28, 0x3d	; 61
    1002:	de b7       	in	r29, 0x3e	; 62
    1004:	7c 01       	movw	r14, r24
			Endpoint_ClearIN();
		}
		
		HIDInterfaceInfo->State.PrevFrameNum = USB_Device_GetFrameNumber();
	}
}
    1006:	4d b6       	in	r4, 0x3d	; 61
    1008:	5e b6       	in	r5, 0x3e	; 62
	return true;
}

void HID_Device_USBTask(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
	if (USB_DeviceState != DEVICE_STATE_Configured)
    100a:	80 91 2c 01 	lds	r24, 0x012C
    100e:	84 30       	cpi	r24, 0x04	; 4
    1010:	09 f0       	breq	.+2      	; 0x1014 <HID_Device_USBTask+0x38>
    1012:	91 c0       	rjmp	.+290    	; 0x1136 <HID_Device_USBTask+0x15a>
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
    1014:	80 91 e4 00 	lds	r24, 0x00E4
    1018:	90 91 e5 00 	lds	r25, 0x00E5
	  return;

	if (HIDInterfaceInfo->State.PrevFrameNum == USB_Device_GetFrameNumber())
    101c:	f7 01       	movw	r30, r14
    101e:	22 85       	ldd	r18, Z+10	; 0x0a
    1020:	33 85       	ldd	r19, Z+11	; 0x0b
    1022:	28 17       	cp	r18, r24
    1024:	39 07       	cpc	r19, r25
    1026:	09 f4       	brne	.+2      	; 0x102a <HID_Device_USBTask+0x4e>
    1028:	86 c0       	rjmp	.+268    	; 0x1136 <HID_Device_USBTask+0x15a>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    102a:	81 81       	ldd	r24, Z+1	; 0x01
    102c:	8f 70       	andi	r24, 0x0F	; 15
    102e:	80 93 e9 00 	sts	0x00E9, r24
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    1032:	80 91 e8 00 	lds	r24, 0x00E8
	  return;
	  
	Endpoint_SelectEndpoint(HIDInterfaceInfo->Config.ReportINEndpoint.Address);

	if (Endpoint_IsReadWriteAllowed())
    1036:	85 ff       	sbrs	r24, 5
    1038:	7e c0       	rjmp	.+252    	; 0x1136 <HID_Device_USBTask+0x15a>
    103a:	7d b6       	in	r7, 0x3d	; 61
    103c:	6e b6       	in	r6, 0x3e	; 62
	{
		uint8_t  ReportINData[HIDInterfaceInfo->Config.PrevReportINBufferSize];
    103e:	40 85       	ldd	r20, Z+8	; 0x08
    1040:	8d b7       	in	r24, 0x3d	; 61
    1042:	9e b7       	in	r25, 0x3e	; 62
    1044:	84 1b       	sub	r24, r20
    1046:	91 09       	sbc	r25, r1
    1048:	0f b6       	in	r0, 0x3f	; 63
    104a:	f8 94       	cli
    104c:	9e bf       	out	0x3e, r25	; 62
    104e:	0f be       	out	0x3f, r0	; 63
    1050:	8d bf       	out	0x3d, r24	; 61
    1052:	0d b7       	in	r16, 0x3d	; 61
    1054:	1e b7       	in	r17, 0x3e	; 62
    1056:	0f 5f       	subi	r16, 0xFF	; 255
    1058:	1f 4f       	sbci	r17, 0xFF	; 255
		uint8_t  ReportID     = 0;
    105a:	19 82       	std	Y+1, r1	; 0x01
		uint16_t ReportINSize = 0;
    105c:	1b 82       	std	Y+3, r1	; 0x03
    105e:	1a 82       	std	Y+2, r1	; 0x02

		memset(ReportINData, 0, sizeof(ReportINData));
    1060:	b0 2e       	mov	r11, r16
    1062:	a1 2e       	mov	r10, r17
    1064:	c8 01       	movw	r24, r16
    1066:	60 e0       	ldi	r22, 0x00	; 0
    1068:	70 e0       	ldi	r23, 0x00	; 0
    106a:	50 e0       	ldi	r21, 0x00	; 0
    106c:	93 d0       	rcall	.+294    	; 0x1194 <memset>
    106e:	c7 01       	movw	r24, r14

		bool ForceSend         = CALLBACK_HID_Device_CreateHIDReport(HIDInterfaceInfo, &ReportID, HID_REPORT_ITEM_In,
    1070:	be 01       	movw	r22, r28
    1072:	6f 5f       	subi	r22, 0xFF	; 255
    1074:	7f 4f       	sbci	r23, 0xFF	; 255
    1076:	40 e0       	ldi	r20, 0x00	; 0
    1078:	98 01       	movw	r18, r16
    107a:	8e 01       	movw	r16, r28
    107c:	0e 5f       	subi	r16, 0xFE	; 254
    107e:	1f 4f       	sbci	r17, 0xFF	; 255
    1080:	02 d9       	rcall	.-3580   	; 0x286 <CALLBACK_HID_Device_CreateHIDReport>
    1082:	18 2f       	mov	r17, r24
    1084:	f7 01       	movw	r30, r14
    1086:	84 85       	ldd	r24, Z+12	; 0x0c
		                                                             ReportINData, &ReportINSize);
		bool StatesChanged     = false;
		bool IdlePeriodElapsed = (HIDInterfaceInfo->State.IdleCount && !(HIDInterfaceInfo->State.IdleMSRemaining));
    1088:	95 85       	ldd	r25, Z+13	; 0x0d
    108a:	00 97       	sbiw	r24, 0x00	; 0
    108c:	59 f0       	breq	.+22     	; 0x10a4 <HID_Device_USBTask+0xc8>
    108e:	81 e0       	ldi	r24, 0x01	; 1
    1090:	90 e0       	ldi	r25, 0x00	; 0
	  return false;	
	
	return true;
}

void HID_Device_USBTask(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
    1092:	26 85       	ldd	r18, Z+14	; 0x0e
    1094:	37 85       	ldd	r19, Z+15	; 0x0f
    1096:	21 15       	cp	r18, r1
    1098:	31 05       	cpc	r19, r1
    109a:	11 f0       	breq	.+4      	; 0x10a0 <HID_Device_USBTask+0xc4>
    109c:	80 e0       	ldi	r24, 0x00	; 0
    109e:	90 e0       	ldi	r25, 0x00	; 0
    10a0:	4c 01       	movw	r8, r24
    10a2:	02 c0       	rjmp	.+4      	; 0x10a8 <HID_Device_USBTask+0xcc>
		memset(ReportINData, 0, sizeof(ReportINData));

		bool ForceSend         = CALLBACK_HID_Device_CreateHIDReport(HIDInterfaceInfo, &ReportID, HID_REPORT_ITEM_In,
		                                                             ReportINData, &ReportINSize);
		bool StatesChanged     = false;
		bool IdlePeriodElapsed = (HIDInterfaceInfo->State.IdleCount && !(HIDInterfaceInfo->State.IdleMSRemaining));
    10a4:	88 24       	eor	r8, r8
    10a6:	99 24       	eor	r9, r9
    10a8:	f7 01       	movw	r30, r14
    10aa:	c6 80       	ldd	r12, Z+6	; 0x06

		if (HIDInterfaceInfo->Config.PrevReportINBuffer != NULL)
    10ac:	d7 80       	ldd	r13, Z+7	; 0x07
    10ae:	c1 14       	cp	r12, r1
    10b0:	d1 04       	cpc	r13, r1
    10b2:	91 f0       	breq	.+36     	; 0x10d8 <HID_Device_USBTask+0xfc>
    10b4:	4a 81       	ldd	r20, Y+2	; 0x02
    10b6:	5b 81       	ldd	r21, Y+3	; 0x03
		{
			StatesChanged = (memcmp(ReportINData, HIDInterfaceInfo->Config.PrevReportINBuffer, ReportINSize) != 0);
    10b8:	8b 2d       	mov	r24, r11
    10ba:	9a 2d       	mov	r25, r10
    10bc:	b6 01       	movw	r22, r12
    10be:	54 d0       	rcall	.+168    	; 0x1168 <memcmp>
    10c0:	01 e0       	ldi	r16, 0x01	; 1
    10c2:	00 97       	sbiw	r24, 0x00	; 0
    10c4:	09 f4       	brne	.+2      	; 0x10c8 <HID_Device_USBTask+0xec>
    10c6:	00 e0       	ldi	r16, 0x00	; 0
    10c8:	f7 01       	movw	r30, r14
    10ca:	40 85       	ldd	r20, Z+8	; 0x08
    10cc:	c6 01       	movw	r24, r12
			memcpy(HIDInterfaceInfo->Config.PrevReportINBuffer, ReportINData, HIDInterfaceInfo->Config.PrevReportINBufferSize);
    10ce:	6b 2d       	mov	r22, r11
    10d0:	7a 2d       	mov	r23, r10
    10d2:	50 e0       	ldi	r21, 0x00	; 0
    10d4:	56 d0       	rcall	.+172    	; 0x1182 <memcpy>
    10d6:	01 c0       	rjmp	.+2      	; 0x10da <HID_Device_USBTask+0xfe>
    10d8:	00 e0       	ldi	r16, 0x00	; 0
    10da:	8a 81       	ldd	r24, Y+2	; 0x02
    10dc:	9b 81       	ldd	r25, Y+3	; 0x03
    10de:	00 97       	sbiw	r24, 0x00	; 0

		memset(ReportINData, 0, sizeof(ReportINData));

		bool ForceSend         = CALLBACK_HID_Device_CreateHIDReport(HIDInterfaceInfo, &ReportID, HID_REPORT_ITEM_In,
		                                                             ReportINData, &ReportINSize);
		bool StatesChanged     = false;
    10e0:	09 f1       	breq	.+66     	; 0x1124 <HID_Device_USBTask+0x148>
		{
			StatesChanged = (memcmp(ReportINData, HIDInterfaceInfo->Config.PrevReportINBuffer, ReportINSize) != 0);
			memcpy(HIDInterfaceInfo->Config.PrevReportINBuffer, ReportINData, HIDInterfaceInfo->Config.PrevReportINBufferSize);
		}

		if (ReportINSize && (ForceSend || StatesChanged || IdlePeriodElapsed))
    10e2:	11 23       	and	r17, r17
    10e4:	29 f4       	brne	.+10     	; 0x10f0 <HID_Device_USBTask+0x114>
    10e6:	00 23       	and	r16, r16
    10e8:	19 f4       	brne	.+6      	; 0x10f0 <HID_Device_USBTask+0x114>
    10ea:	81 14       	cp	r8, r1
    10ec:	91 04       	cpc	r9, r1
    10ee:	d1 f0       	breq	.+52     	; 0x1124 <HID_Device_USBTask+0x148>
    10f0:	f7 01       	movw	r30, r14
    10f2:	84 85       	ldd	r24, Z+12	; 0x0c
    10f4:	95 85       	ldd	r25, Z+13	; 0x0d
    10f6:	97 87       	std	Z+15, r25	; 0x0f
		{
			HIDInterfaceInfo->State.IdleMSRemaining = HIDInterfaceInfo->State.IdleCount;
    10f8:	86 87       	std	Z+14, r24	; 0x0e
    10fa:	81 81       	ldd	r24, Z+1	; 0x01
    10fc:	8f 70       	andi	r24, 0x0F	; 15
    10fe:	80 93 e9 00 	sts	0x00E9, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1102:	89 81       	ldd	r24, Y+1	; 0x01
    1104:	88 23       	and	r24, r24
    1106:	11 f0       	breq	.+4      	; 0x110c <HID_Device_USBTask+0x130>
    1108:	80 93 f1 00 	sts	0x00F1, r24

			Endpoint_SelectEndpoint(HIDInterfaceInfo->Config.ReportINEndpoint.Address);

			if (ReportID)
    110c:	6a 81       	ldd	r22, Y+2	; 0x02
    110e:	7b 81       	ldd	r23, Y+3	; 0x03
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    1110:	8b 2d       	mov	r24, r11
    1112:	9a 2d       	mov	r25, r10
			  Endpoint_Write_8(ReportID);

			Endpoint_Write_Stream_LE(ReportINData, ReportINSize, NULL);
    1114:	40 e0       	ldi	r20, 0x00	; 0
    1116:	50 e0       	ldi	r21, 0x00	; 0
    1118:	53 d9       	rcall	.-3418   	; 0x3c0 <Endpoint_Write_Stream_LE>
    111a:	80 91 e8 00 	lds	r24, 0x00E8
    111e:	8e 77       	andi	r24, 0x7E	; 126
    1120:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1124:	80 91 e4 00 	lds	r24, 0x00E4
    1128:	90 91 e5 00 	lds	r25, 0x00E5
    112c:	f7 01       	movw	r30, r14
    112e:	93 87       	std	Z+11, r25	; 0x0b
    1130:	82 87       	std	Z+10, r24	; 0x0a
    1132:	7d be       	out	0x3d, r7	; 61
    1134:	6e be       	out	0x3e, r6	; 62

			Endpoint_ClearIN();
		}
		
		HIDInterfaceInfo->State.PrevFrameNum = USB_Device_GetFrameNumber();
    1136:	0f b6       	in	r0, 0x3f	; 63
    1138:	f8 94       	cli
    113a:	5e be       	out	0x3e, r5	; 62
    113c:	0f be       	out	0x3f, r0	; 63
    113e:	4d be       	out	0x3d, r4	; 61
	}
}
    1140:	0f 90       	pop	r0
    1142:	0f 90       	pop	r0
    1144:	0f 90       	pop	r0
    1146:	df 91       	pop	r29
    1148:	cf 91       	pop	r28
    114a:	1f 91       	pop	r17
    114c:	0f 91       	pop	r16
    114e:	ff 90       	pop	r15
    1150:	ef 90       	pop	r14
    1152:	df 90       	pop	r13
    1154:	cf 90       	pop	r12
    1156:	bf 90       	pop	r11
    1158:	af 90       	pop	r10
    115a:	9f 90       	pop	r9
    115c:	8f 90       	pop	r8
    115e:	7f 90       	pop	r7
    1160:	6f 90       	pop	r6
    1162:	5f 90       	pop	r5
    1164:	4f 90       	pop	r4
    1166:	08 95       	ret

00001168 <memcmp>:
    1168:	fb 01       	movw	r30, r22
    116a:	dc 01       	movw	r26, r24
    116c:	04 c0       	rjmp	.+8      	; 0x1176 <memcmp+0xe>
    116e:	8d 91       	ld	r24, X+
    1170:	01 90       	ld	r0, Z+
    1172:	80 19       	sub	r24, r0
    1174:	21 f4       	brne	.+8      	; 0x117e <memcmp+0x16>
    1176:	41 50       	subi	r20, 0x01	; 1
    1178:	50 40       	sbci	r21, 0x00	; 0
    117a:	c8 f7       	brcc	.-14     	; 0x116e <memcmp+0x6>
    117c:	88 1b       	sub	r24, r24
    117e:	99 0b       	sbc	r25, r25
    1180:	08 95       	ret

00001182 <memcpy>:
    1182:	fb 01       	movw	r30, r22
    1184:	dc 01       	movw	r26, r24
    1186:	02 c0       	rjmp	.+4      	; 0x118c <memcpy+0xa>
    1188:	01 90       	ld	r0, Z+
    118a:	0d 92       	st	X+, r0
    118c:	41 50       	subi	r20, 0x01	; 1
    118e:	50 40       	sbci	r21, 0x00	; 0
    1190:	d8 f7       	brcc	.-10     	; 0x1188 <memcpy+0x6>
    1192:	08 95       	ret

00001194 <memset>:
    1194:	dc 01       	movw	r26, r24
    1196:	01 c0       	rjmp	.+2      	; 0x119a <memset+0x6>
    1198:	6d 93       	st	X+, r22
    119a:	41 50       	subi	r20, 0x01	; 1
    119c:	50 40       	sbci	r21, 0x00	; 0
    119e:	e0 f7       	brcc	.-8      	; 0x1198 <memset+0x4>
    11a0:	08 95       	ret

000011a2 <_exit>:
    11a2:	f8 94       	cli

000011a4 <__stop_program>:
    11a4:	ff cf       	rjmp	.-2      	; 0x11a4 <__stop_program>
