
VirtualSerial.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000003c  00800100  00000f58  00000fec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000f58  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000001c  0080013c  0080013c  00001028  2**0
                  ALLOC
  3 .stab         00000a98  00000000  00000000  00001028  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000002aa  00000000  00000000  00001ac0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000528  00000000  00000000  00001d70  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000088a4  00000000  00000000  00002298  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002239  00000000  00000000  0000ab3c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00003f99  00000000  00000000  0000cd75  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000e34  00000000  00000000  00010d10  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00003a26  00000000  00000000  00011b44  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000051f4  00000000  00000000  0001556a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000006b8  00000000  00000000  0001a75e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	9b c0       	rjmp	.+310    	; 0x138 <__ctors_end>
   2:	00 00       	nop
   4:	b4 c0       	rjmp	.+360    	; 0x16e <__bad_interrupt>
   6:	00 00       	nop
   8:	b2 c0       	rjmp	.+356    	; 0x16e <__bad_interrupt>
   a:	00 00       	nop
   c:	b0 c0       	rjmp	.+352    	; 0x16e <__bad_interrupt>
   e:	00 00       	nop
  10:	ae c0       	rjmp	.+348    	; 0x16e <__bad_interrupt>
  12:	00 00       	nop
  14:	ac c0       	rjmp	.+344    	; 0x16e <__bad_interrupt>
  16:	00 00       	nop
  18:	aa c0       	rjmp	.+340    	; 0x16e <__bad_interrupt>
  1a:	00 00       	nop
  1c:	a8 c0       	rjmp	.+336    	; 0x16e <__bad_interrupt>
  1e:	00 00       	nop
  20:	a6 c0       	rjmp	.+332    	; 0x16e <__bad_interrupt>
  22:	00 00       	nop
  24:	a4 c0       	rjmp	.+328    	; 0x16e <__bad_interrupt>
  26:	00 00       	nop
  28:	21 c3       	rjmp	.+1602   	; 0x66c <__vector_10>
  2a:	00 00       	nop
  2c:	e8 c3       	rjmp	.+2000   	; 0x7fe <__vector_11>
  2e:	00 00       	nop
  30:	9e c0       	rjmp	.+316    	; 0x16e <__bad_interrupt>
  32:	00 00       	nop
  34:	9c c0       	rjmp	.+312    	; 0x16e <__bad_interrupt>
  36:	00 00       	nop
  38:	9a c0       	rjmp	.+308    	; 0x16e <__bad_interrupt>
  3a:	00 00       	nop
  3c:	98 c0       	rjmp	.+304    	; 0x16e <__bad_interrupt>
  3e:	00 00       	nop
  40:	96 c0       	rjmp	.+300    	; 0x16e <__bad_interrupt>
  42:	00 00       	nop
  44:	94 c0       	rjmp	.+296    	; 0x16e <__bad_interrupt>
  46:	00 00       	nop
  48:	92 c0       	rjmp	.+292    	; 0x16e <__bad_interrupt>
  4a:	00 00       	nop
  4c:	90 c0       	rjmp	.+288    	; 0x16e <__bad_interrupt>
  4e:	00 00       	nop
  50:	8e c0       	rjmp	.+284    	; 0x16e <__bad_interrupt>
  52:	00 00       	nop
  54:	8c c0       	rjmp	.+280    	; 0x16e <__bad_interrupt>
  56:	00 00       	nop
  58:	8a c0       	rjmp	.+276    	; 0x16e <__bad_interrupt>
  5a:	00 00       	nop
  5c:	88 c0       	rjmp	.+272    	; 0x16e <__bad_interrupt>
  5e:	00 00       	nop
  60:	86 c0       	rjmp	.+268    	; 0x16e <__bad_interrupt>
  62:	00 00       	nop
  64:	84 c0       	rjmp	.+264    	; 0x16e <__bad_interrupt>
  66:	00 00       	nop
  68:	82 c0       	rjmp	.+260    	; 0x16e <__bad_interrupt>
  6a:	00 00       	nop
  6c:	80 c0       	rjmp	.+256    	; 0x16e <__bad_interrupt>
  6e:	00 00       	nop
  70:	7e c0       	rjmp	.+252    	; 0x16e <__bad_interrupt>
  72:	00 00       	nop
  74:	7c c0       	rjmp	.+248    	; 0x16e <__bad_interrupt>
  76:	00 00       	nop
  78:	7a c0       	rjmp	.+244    	; 0x16e <__bad_interrupt>
  7a:	00 00       	nop
  7c:	78 c0       	rjmp	.+240    	; 0x16e <__bad_interrupt>
  7e:	00 00       	nop
  80:	76 c0       	rjmp	.+236    	; 0x16e <__bad_interrupt>
  82:	00 00       	nop
  84:	74 c0       	rjmp	.+232    	; 0x16e <__bad_interrupt>
  86:	00 00       	nop
  88:	72 c0       	rjmp	.+228    	; 0x16e <__bad_interrupt>
  8a:	00 00       	nop
  8c:	70 c0       	rjmp	.+224    	; 0x16e <__bad_interrupt>
  8e:	00 00       	nop
  90:	6e c0       	rjmp	.+220    	; 0x16e <__bad_interrupt>
  92:	00 00       	nop
  94:	6c c0       	rjmp	.+216    	; 0x16e <__bad_interrupt>
  96:	00 00       	nop
  98:	6a c0       	rjmp	.+212    	; 0x16e <__bad_interrupt>
  9a:	00 00       	nop
  9c:	68 c0       	rjmp	.+208    	; 0x16e <__bad_interrupt>
  9e:	00 00       	nop
  a0:	66 c0       	rjmp	.+204    	; 0x16e <__bad_interrupt>
  a2:	00 00       	nop
  a4:	64 c0       	rjmp	.+200    	; 0x16e <__bad_interrupt>
  a6:	00 00       	nop
  a8:	62 c0       	rjmp	.+196    	; 0x16e <__bad_interrupt>
  aa:	00 00       	nop

000000ac <ProductString>:
  ac:	1c 03 4c 00 55 00 46 00 41 00 20 00 43 00 44 00     ..L.U.F.A. .C.D.
  bc:	43 00 20 00 44 00 65 00 6d 00 6f 00 00 00           C. .D.e.m.o...

000000ca <ManufacturerString>:
  ca:	18 03 44 00 65 00 61 00 6e 00 20 00 43 00 61 00     ..D.e.a.n. .C.a.
  da:	6d 00 65 00 72 00 61 00 00 00                       m.e.r.a...

000000e4 <LanguageString>:
  e4:	04 03 09 04                                         ....

000000e8 <ConfigurationDescriptor>:
  e8:	09 02 3e 00 02 01 00 c0 32 09 04 00 00 01 02 02     ..>.....2.......
  f8:	01 00 05 24 00 10 01 04 24 02 06 05 24 06 00 01     ...$....$...$...
 108:	07 05 82 03 08 00 ff 09 04 01 00 02 0a 00 00 00     ................
 118:	07 05 04 02 10 00 05 07 05 83 02 10 00 05           ..............

00000126 <DeviceDescriptor>:
 126:	12 01 10 01 02 00 00 08 eb 03 44 20 01 00 01 02     ..........D ....
 136:	dc 01                                               ..

00000138 <__ctors_end>:
 138:	11 24       	eor	r1, r1
 13a:	1f be       	out	0x3f, r1	; 63
 13c:	cf ef       	ldi	r28, 0xFF	; 255
 13e:	da e0       	ldi	r29, 0x0A	; 10
 140:	de bf       	out	0x3e, r29	; 62
 142:	cd bf       	out	0x3d, r28	; 61

00000144 <__do_copy_data>:
 144:	11 e0       	ldi	r17, 0x01	; 1
 146:	a0 e0       	ldi	r26, 0x00	; 0
 148:	b1 e0       	ldi	r27, 0x01	; 1
 14a:	e8 e5       	ldi	r30, 0x58	; 88
 14c:	ff e0       	ldi	r31, 0x0F	; 15
 14e:	02 c0       	rjmp	.+4      	; 0x154 <__do_copy_data+0x10>
 150:	05 90       	lpm	r0, Z+
 152:	0d 92       	st	X+, r0
 154:	ac 33       	cpi	r26, 0x3C	; 60
 156:	b1 07       	cpc	r27, r17
 158:	d9 f7       	brne	.-10     	; 0x150 <__do_copy_data+0xc>

0000015a <__do_clear_bss>:
 15a:	11 e0       	ldi	r17, 0x01	; 1
 15c:	ac e3       	ldi	r26, 0x3C	; 60
 15e:	b1 e0       	ldi	r27, 0x01	; 1
 160:	01 c0       	rjmp	.+2      	; 0x164 <.do_clear_bss_start>

00000162 <.do_clear_bss_loop>:
 162:	1d 92       	st	X+, r1

00000164 <.do_clear_bss_start>:
 164:	a8 35       	cpi	r26, 0x58	; 88
 166:	b1 07       	cpc	r27, r17
 168:	e1 f7       	brne	.-8      	; 0x162 <.do_clear_bss_loop>
 16a:	4c d0       	rcall	.+152    	; 0x204 <main>
 16c:	f3 c6       	rjmp	.+3558   	; 0xf54 <_exit>

0000016e <__bad_interrupt>:
 16e:	48 cf       	rjmp	.-368    	; 0x0 <__vectors>

00000170 <LEDs_SetAllLEDs>:
				PORTE &= ~(LEDMask & LEDS_PORTE_LEDS);
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
			{
				PORTB = ((PORTB & ~LEDS_PORTB_LEDS) | (LEDMask & LEDS_PORTB_LEDS));
 170:	25 b1       	in	r18, 0x05	; 5
 172:	98 2f       	mov	r25, r24
 174:	91 72       	andi	r25, 0x21	; 33
 176:	2e 7d       	andi	r18, 0xDE	; 222
 178:	92 2b       	or	r25, r18
 17a:	95 b9       	out	0x05, r25	; 5
				PORTD = ((PORTD & ~(LEDS_PORTD_LEDS << LEDS_PORTD_MASK_SHIFT)) |
 17c:	9b b1       	in	r25, 0x0b	; 11
				         ((LEDMask & LEDS_PORTD_LEDS) << LEDS_PORTD_MASK_SHIFT));
 17e:	28 2f       	mov	r18, r24
 180:	30 e0       	ldi	r19, 0x00	; 0
 182:	20 71       	andi	r18, 0x10	; 16
 184:	30 70       	andi	r19, 0x00	; 0
 186:	22 0f       	add	r18, r18
 188:	33 1f       	adc	r19, r19
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
			{
				PORTB = ((PORTB & ~LEDS_PORTB_LEDS) | (LEDMask & LEDS_PORTB_LEDS));
				PORTD = ((PORTD & ~(LEDS_PORTD_LEDS << LEDS_PORTD_MASK_SHIFT)) |
 18a:	9f 7d       	andi	r25, 0xDF	; 223
 18c:	92 2b       	or	r25, r18
 18e:	9b b9       	out	0x0b, r25	; 11
				         ((LEDMask & LEDS_PORTD_LEDS) << LEDS_PORTD_MASK_SHIFT));
				PORTE = ((PORTE & ~LEDS_PORTE_LEDS) | (LEDMask & LEDS_PORTE_LEDS));
 190:	9e b1       	in	r25, 0x0e	; 14
 192:	80 74       	andi	r24, 0x40	; 64
 194:	9f 7b       	andi	r25, 0xBF	; 191
 196:	89 2b       	or	r24, r25
 198:	8e b9       	out	0x0e, r24	; 14
			}
 19a:	08 95       	ret

0000019c <SetupHardware>:

/** Configures the board hardware and chip peripherals for the demo's functionality. */
void SetupHardware(void)
{
	/* Disable watchdog if enabled by bootloader/fuses */
	MCUSR &= ~(1 << WDRF);
 19c:	84 b7       	in	r24, 0x34	; 52
 19e:	87 7f       	andi	r24, 0xF7	; 247
 1a0:	84 bf       	out	0x34, r24	; 52
	wdt_disable();
 1a2:	88 e1       	ldi	r24, 0x18	; 24
 1a4:	0f b6       	in	r0, 0x3f	; 63
 1a6:	f8 94       	cli
 1a8:	80 93 60 00 	sts	0x0060, r24
 1ac:	10 92 60 00 	sts	0x0060, r1
 1b0:	0f be       	out	0x3f, r0	; 63
The type of x is clock_div_t.
*/
void clock_prescale_set(clock_div_t __x)
{
    uint8_t __tmp = _BV(CLKPCE);
    __asm__ __volatile__ (
 1b2:	90 e0       	ldi	r25, 0x00	; 0
 1b4:	80 e8       	ldi	r24, 0x80	; 128
 1b6:	0f b6       	in	r0, 0x3f	; 63
 1b8:	f8 94       	cli
 1ba:	80 93 61 00 	sts	0x0061, r24
 1be:	90 93 61 00 	sts	0x0061, r25
 1c2:	0f be       	out	0x3f, r0	; 63

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void Buttons_Init(void)
			{
				DDRE  &= ~BUTTONS_BUTTON1;
 1c4:	6a 98       	cbi	0x0d, 2	; 13
				PORTE |=  BUTTONS_BUTTON1;
 1c6:	72 9a       	sbi	0x0e, 2	; 14

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void LEDs_Init(void)
			{
				DDRB  |=  LEDS_PORTB_LEDS;
 1c8:	84 b1       	in	r24, 0x04	; 4
 1ca:	81 62       	ori	r24, 0x21	; 33
 1cc:	84 b9       	out	0x04, r24	; 4
				PORTB &= ~LEDS_PORTB_LEDS;
 1ce:	85 b1       	in	r24, 0x05	; 5
 1d0:	8e 7d       	andi	r24, 0xDE	; 222
 1d2:	85 b9       	out	0x05, r24	; 5
				DDRD  |=  (LEDS_PORTD_LEDS << LEDS_PORTD_MASK_SHIFT);
 1d4:	55 9a       	sbi	0x0a, 5	; 10
				PORTD &= ~(LEDS_PORTD_LEDS << LEDS_PORTD_MASK_SHIFT);
 1d6:	5d 98       	cbi	0x0b, 5	; 11
				DDRE  |=  LEDS_PORTE_LEDS;
 1d8:	6e 9a       	sbi	0x0d, 6	; 13
				PORTE &= ~LEDS_PORTE_LEDS;
 1da:	76 98       	cbi	0x0e, 6	; 14

	/* Hardware Initialization */
	//Joystick_Init();
	Buttons_Init();
	LEDs_Init();
	USB_Init();
 1dc:	2a c2       	rjmp	.+1108   	; 0x632 <USB_Init>

000001de <CheckButtonMovement>:
 1de:	8c b1       	in	r24, 0x0c	; 12
}
 1e0:	82 ff       	sbrs	r24, 2
	// else if (JoyStatus_LCL & JOY_PRESS)
	//   ReportString = "Joystick Pressed\r\n";
	// else
	//   ActionSent = false;

	if (ButtonStatus)
 1e2:	03 c0       	rjmp	.+6      	; 0x1ea <CheckButtonMovement+0xc>
	  ReportString = "Button Presed\r\n";
	else 
	  ActionSent = false;
 1e4:	10 92 4a 01 	sts	0x014A, r1
 1e8:	08 95       	ret


	if ((ReportString != NULL) && (ActionSent == false))
 1ea:	80 91 4a 01 	lds	r24, 0x014A
 1ee:	88 23       	and	r24, r24
 1f0:	41 f4       	brne	.+16     	; 0x202 <CheckButtonMovement+0x24>
	{
		ActionSent = true;
 1f2:	81 e0       	ldi	r24, 0x01	; 1
 1f4:	80 93 4a 01 	sts	0x014A, r24

		/* Write the string to the virtual COM port via the created character stream */
		fputs(ReportString, &USBSerialStream);
 1f8:	80 e0       	ldi	r24, 0x00	; 0
 1fa:	91 e0       	ldi	r25, 0x01	; 1
 1fc:	6c e3       	ldi	r22, 0x3C	; 60
 1fe:	71 e0       	ldi	r23, 0x01	; 1
 200:	6b c6       	rjmp	.+3286   	; 0xed8 <fputs>
 202:	08 95       	ret

00000204 <main>:
 204:	cb df       	rcall	.-106    	; 0x19c <SetupHardware>
/** Main program entry point. This routine contains the overall program flow, including initial
 *  setup of all components and the main program loop.
 */
int main(void)
{
	SetupHardware();
 206:	80 e1       	ldi	r24, 0x10	; 16

	/* Create a regular character stream for the interface so that it can be used with the stdio.h functions */
	CDC_Device_CreateStream(&VirtualSerial_CDC_Interface, &USBSerialStream);
 208:	91 e0       	ldi	r25, 0x01	; 1
 20a:	6c e3       	ldi	r22, 0x3C	; 60
 20c:	71 e0       	ldi	r23, 0x01	; 1
 20e:	50 d6       	rcall	.+3232   	; 0xeb0 <CDC_Device_CreateStream>
 210:	80 e1       	ldi	r24, 0x10	; 16
 212:	ae df       	rcall	.-164    	; 0x170 <LEDs_SetAllLEDs>

	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
 214:	78 94       	sei
 216:	e3 df       	rcall	.-58     	; 0x1de <CheckButtonMovement>
 218:	80 e1       	ldi	r24, 0x10	; 16
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				sei();
 21a:	91 e0       	ldi	r25, 0x01	; 1
	GlobalInterruptEnable();

	for (;;)
	{
		CheckButtonMovement();
 21c:	01 d6       	rcall	.+3074   	; 0xe20 <CDC_Device_ReceiveByte>
 21e:	80 e1       	ldi	r24, 0x10	; 16

		/* Must throw away unused bytes from the host, or it will lock up while waiting for the device */
		CDC_Device_ReceiveByte(&VirtualSerial_CDC_Interface);
 220:	91 e0       	ldi	r25, 0x01	; 1
 222:	e6 d5       	rcall	.+3020   	; 0xdf0 <CDC_Device_USBTask>
 224:	8e d4       	rcall	.+2332   	; 0xb42 <USB_USBTask>
 226:	f7 cf       	rjmp	.-18     	; 0x216 <main+0x12>

00000228 <EVENT_USB_Device_Connect>:

		CDC_Device_USBTask(&VirtualSerial_CDC_Interface);
 228:	81 e4       	ldi	r24, 0x41	; 65
 22a:	a2 cf       	rjmp	.-188    	; 0x170 <LEDs_SetAllLEDs>

0000022c <EVENT_USB_Device_Disconnect>:
 22c:	80 e1       	ldi	r24, 0x10	; 16
 22e:	a0 cf       	rjmp	.-192    	; 0x170 <LEDs_SetAllLEDs>

00000230 <EVENT_USB_Device_ConfigurationChanged>:
		USB_USBTask();
 230:	80 e1       	ldi	r24, 0x10	; 16
 232:	91 e0       	ldi	r25, 0x01	; 1
 234:	4f d5       	rcall	.+2718   	; 0xcd4 <CDC_Device_ConfigureEndpoints>
/** Event handler for the library USB Configuration Changed event. */
void EVENT_USB_Device_ConfigurationChanged(void)
{
	bool ConfigSuccess = true;

	ConfigSuccess &= CDC_Device_ConfigureEndpoints(&VirtualSerial_CDC_Interface);
 236:	88 23       	and	r24, r24

	LEDs_SetAllLEDs(ConfigSuccess ? LEDMASK_USB_READY : LEDMASK_USB_ERROR);
 238:	11 f0       	breq	.+4      	; 0x23e <EVENT_USB_Device_ConfigurationChanged+0xe>
 23a:	81 e2       	ldi	r24, 0x21	; 33
 23c:	01 c0       	rjmp	.+2      	; 0x240 <EVENT_USB_Device_ConfigurationChanged+0x10>
 23e:	80 e5       	ldi	r24, 0x50	; 80
 240:	97 cf       	rjmp	.-210    	; 0x170 <LEDs_SetAllLEDs>

00000242 <EVENT_USB_Device_ControlRequest>:
 242:	80 e1       	ldi	r24, 0x10	; 16
 244:	91 e0       	ldi	r25, 0x01	; 1
}
 246:	99 c4       	rjmp	.+2354   	; 0xb7a <CDC_Device_ProcessControlRequest>

00000248 <CALLBACK_USB_GetDescriptor>:
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
 248:	92 30       	cpi	r25, 0x02	; 2
 24a:	29 f0       	breq	.+10     	; 0x256 <CALLBACK_USB_GetDescriptor+0xe>
 24c:	93 30       	cpi	r25, 0x03	; 3
 24e:	41 f0       	breq	.+16     	; 0x260 <CALLBACK_USB_GetDescriptor+0x18>
 250:	91 30       	cpi	r25, 0x01	; 1
 252:	e9 f4       	brne	.+58     	; 0x28e <CALLBACK_USB_GetDescriptor+0x46>
 254:	17 c0       	rjmp	.+46     	; 0x284 <CALLBACK_USB_GetDescriptor+0x3c>
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
			Size    = sizeof(USB_Descriptor_Configuration_t);
 256:	8e e3       	ldi	r24, 0x3E	; 62
 258:	90 e0       	ldi	r25, 0x00	; 0
		case DTYPE_Device:
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
 25a:	e8 ee       	ldi	r30, 0xE8	; 232
 25c:	f0 e0       	ldi	r31, 0x00	; 0
			Size    = sizeof(USB_Descriptor_Configuration_t);
			break;
 25e:	1b c0       	rjmp	.+54     	; 0x296 <CALLBACK_USB_GetDescriptor+0x4e>
		case DTYPE_String:
			switch (DescriptorNumber)
 260:	81 30       	cpi	r24, 0x01	; 1
 262:	41 f0       	breq	.+16     	; 0x274 <CALLBACK_USB_GetDescriptor+0x2c>
 264:	81 30       	cpi	r24, 0x01	; 1
 266:	18 f0       	brcs	.+6      	; 0x26e <CALLBACK_USB_GetDescriptor+0x26>
 268:	82 30       	cpi	r24, 0x02	; 2
 26a:	89 f4       	brne	.+34     	; 0x28e <CALLBACK_USB_GetDescriptor+0x46>
 26c:	06 c0       	rjmp	.+12     	; 0x27a <CALLBACK_USB_GetDescriptor+0x32>
			{
				case 0x00:
					Address = &LanguageString;
					Size    = pgm_read_byte(&LanguageString.Header.Size);
 26e:	e4 ee       	ldi	r30, 0xE4	; 228
 270:	f0 e0       	ldi	r31, 0x00	; 0
 272:	05 c0       	rjmp	.+10     	; 0x27e <CALLBACK_USB_GetDescriptor+0x36>
					break;
				case 0x01:
					Address = &ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
 274:	ea ec       	ldi	r30, 0xCA	; 202
 276:	f0 e0       	ldi	r31, 0x00	; 0
 278:	02 c0       	rjmp	.+4      	; 0x27e <CALLBACK_USB_GetDescriptor+0x36>
					break;
				case 0x02:
					Address = &ProductString;
					Size    = pgm_read_byte(&ProductString.Header.Size);
 27a:	ec ea       	ldi	r30, 0xAC	; 172
 27c:	f0 e0       	ldi	r31, 0x00	; 0
 27e:	84 91       	lpm	r24, Z
 280:	90 e0       	ldi	r25, 0x00	; 0
					break;
 282:	09 c0       	rjmp	.+18     	; 0x296 <CALLBACK_USB_GetDescriptor+0x4e>

	switch (DescriptorType)
	{
		case DTYPE_Device:
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
 284:	82 e1       	ldi	r24, 0x12	; 18
 286:	90 e0       	ldi	r25, 0x00	; 0
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
	{
		case DTYPE_Device:
			Address = &DeviceDescriptor;
 288:	e6 e2       	ldi	r30, 0x26	; 38
 28a:	f1 e0       	ldi	r31, 0x01	; 1
 28c:	04 c0       	rjmp	.+8      	; 0x296 <CALLBACK_USB_GetDescriptor+0x4e>
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;
 28e:	80 e0       	ldi	r24, 0x00	; 0
 290:	90 e0       	ldi	r25, 0x00	; 0
                                    const void** const DescriptorAddress)
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
 292:	e0 e0       	ldi	r30, 0x00	; 0
 294:	f0 e0       	ldi	r31, 0x00	; 0
			}

			break;
	}

	*DescriptorAddress = Address;
 296:	da 01       	movw	r26, r20
 298:	11 96       	adiw	r26, 0x01	; 1
 29a:	fc 93       	st	X, r31
 29c:	ee 93       	st	-X, r30
	return Size;
}
 29e:	08 95       	ret

000002a0 <Endpoint_Write_Control_Stream_LE>:
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
 2a0:	40 91 56 01 	lds	r20, 0x0156
 2a4:	50 91 57 01 	lds	r21, 0x0157
 2a8:	46 17       	cp	r20, r22
 2aa:	57 07       	cpc	r21, r23
 2ac:	20 f4       	brcc	.+8      	; 0x2b6 <Endpoint_Write_Control_Stream_LE+0x16>
 2ae:	ba 01       	movw	r22, r20
 2b0:	fc 01       	movw	r30, r24
 2b2:	40 e0       	ldi	r20, 0x00	; 0
 2b4:	3c c0       	rjmp	.+120    	; 0x32e <Endpoint_Write_Control_Stream_LE+0x8e>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
 2b6:	61 15       	cp	r22, r1
 2b8:	71 05       	cpc	r23, r1
 2ba:	d1 f7       	brne	.-12     	; 0x2b0 <Endpoint_Write_Control_Stream_LE+0x10>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 2bc:	40 91 e8 00 	lds	r20, 0x00E8
 2c0:	4e 77       	andi	r20, 0x7E	; 126
 2c2:	40 93 e8 00 	sts	0x00E8, r20
 2c6:	f4 cf       	rjmp	.-24     	; 0x2b0 <Endpoint_Write_Control_Stream_LE+0x10>
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
 2c8:	80 91 4f 01 	lds	r24, 0x014F

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
 2cc:	88 23       	and	r24, r24
 2ce:	09 f4       	brne	.+2      	; 0x2d2 <Endpoint_Write_Control_Stream_LE+0x32>
 2d0:	44 c0       	rjmp	.+136    	; 0x35a <Endpoint_Write_Control_Stream_LE+0xba>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
 2d2:	85 30       	cpi	r24, 0x05	; 5
 2d4:	f1 f1       	breq	.+124    	; 0x352 <Endpoint_Write_Control_Stream_LE+0xb2>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 2d6:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
 2da:	83 fd       	sbrc	r24, 3
 2dc:	3c c0       	rjmp	.+120    	; 0x356 <Endpoint_Write_Control_Stream_LE+0xb6>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 2de:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
 2e2:	82 fd       	sbrc	r24, 2
 2e4:	30 c0       	rjmp	.+96     	; 0x346 <Endpoint_Write_Control_Stream_LE+0xa6>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 2e6:	80 91 e8 00 	lds	r24, 0x00E8
		  break;

		if (Endpoint_IsINReady())
 2ea:	80 ff       	sbrs	r24, 0
 2ec:	20 c0       	rjmp	.+64     	; 0x32e <Endpoint_Write_Control_Stream_LE+0x8e>
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
 2ee:	90 91 f3 00 	lds	r25, 0x00F3
 2f2:	80 91 f2 00 	lds	r24, 0x00F2
 2f6:	39 2f       	mov	r19, r25
 2f8:	20 e0       	ldi	r18, 0x00	; 0
 2fa:	90 e0       	ldi	r25, 0x00	; 0
 2fc:	82 2b       	or	r24, r18
 2fe:	93 2b       	or	r25, r19
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
 300:	06 c0       	rjmp	.+12     	; 0x30e <Endpoint_Write_Control_Stream_LE+0x6e>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
 302:	41 91       	ld	r20, Z+
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
 304:	40 93 f1 00 	sts	0x00F1, r20
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
 308:	61 50       	subi	r22, 0x01	; 1
 30a:	70 40       	sbci	r23, 0x00	; 0
				BytesInEndpoint++;
 30c:	01 96       	adiw	r24, 0x01	; 1

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
 30e:	61 15       	cp	r22, r1
 310:	71 05       	cpc	r23, r1
 312:	19 f0       	breq	.+6      	; 0x31a <Endpoint_Write_Control_Stream_LE+0x7a>
 314:	88 30       	cpi	r24, 0x08	; 8
 316:	91 05       	cpc	r25, r1
 318:	a0 f3       	brcs	.-24     	; 0x302 <Endpoint_Write_Control_Stream_LE+0x62>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
 31a:	41 e0       	ldi	r20, 0x01	; 1
 31c:	88 30       	cpi	r24, 0x08	; 8
 31e:	91 05       	cpc	r25, r1
 320:	09 f0       	breq	.+2      	; 0x324 <Endpoint_Write_Control_Stream_LE+0x84>
 322:	40 e0       	ldi	r20, 0x00	; 0
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 324:	80 91 e8 00 	lds	r24, 0x00E8
 328:	8e 77       	andi	r24, 0x7E	; 126
 32a:	80 93 e8 00 	sts	0x00E8, r24
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
 32e:	61 15       	cp	r22, r1
 330:	71 05       	cpc	r23, r1
 332:	51 f6       	brne	.-108    	; 0x2c8 <Endpoint_Write_Control_Stream_LE+0x28>
 334:	44 23       	and	r20, r20
 336:	41 f6       	brne	.-112    	; 0x2c8 <Endpoint_Write_Control_Stream_LE+0x28>
 338:	06 c0       	rjmp	.+12     	; 0x346 <Endpoint_Write_Control_Stream_LE+0xa6>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
 33a:	80 91 4f 01 	lds	r24, 0x014F

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
 33e:	88 23       	and	r24, r24
 340:	61 f0       	breq	.+24     	; 0x35a <Endpoint_Write_Control_Stream_LE+0xba>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
 342:	85 30       	cpi	r24, 0x05	; 5
 344:	61 f0       	breq	.+24     	; 0x35e <Endpoint_Write_Control_Stream_LE+0xbe>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 346:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
 34a:	82 ff       	sbrs	r24, 2
 34c:	f6 cf       	rjmp	.-20     	; 0x33a <Endpoint_Write_Control_Stream_LE+0x9a>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
 34e:	80 e0       	ldi	r24, 0x00	; 0
 350:	08 95       	ret
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
 352:	83 e0       	ldi	r24, 0x03	; 3
 354:	08 95       	ret
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
 356:	81 e0       	ldi	r24, 0x01	; 1
 358:	08 95       	ret
	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
 35a:	82 e0       	ldi	r24, 0x02	; 2
 35c:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
 35e:	83 e0       	ldi	r24, 0x03	; 3
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
 360:	08 95       	ret

00000362 <Endpoint_Write_Control_PStream_LE>:
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
 362:	40 91 56 01 	lds	r20, 0x0156
 366:	50 91 57 01 	lds	r21, 0x0157
 36a:	46 17       	cp	r20, r22
 36c:	57 07       	cpc	r21, r23
 36e:	20 f4       	brcc	.+8      	; 0x378 <Endpoint_Write_Control_PStream_LE+0x16>
 370:	ba 01       	movw	r22, r20
 372:	fc 01       	movw	r30, r24
 374:	40 e0       	ldi	r20, 0x00	; 0
 376:	3e c0       	rjmp	.+124    	; 0x3f4 <Endpoint_Write_Control_PStream_LE+0x92>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
 378:	61 15       	cp	r22, r1
 37a:	71 05       	cpc	r23, r1
 37c:	d1 f7       	brne	.-12     	; 0x372 <Endpoint_Write_Control_PStream_LE+0x10>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 37e:	40 91 e8 00 	lds	r20, 0x00E8
 382:	4e 77       	andi	r20, 0x7E	; 126
 384:	40 93 e8 00 	sts	0x00E8, r20
 388:	f4 cf       	rjmp	.-24     	; 0x372 <Endpoint_Write_Control_PStream_LE+0x10>
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
 38a:	80 91 4f 01 	lds	r24, 0x014F

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
 38e:	88 23       	and	r24, r24
 390:	09 f4       	brne	.+2      	; 0x394 <Endpoint_Write_Control_PStream_LE+0x32>
 392:	46 c0       	rjmp	.+140    	; 0x420 <Endpoint_Write_Control_PStream_LE+0xbe>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
 394:	85 30       	cpi	r24, 0x05	; 5
 396:	09 f4       	brne	.+2      	; 0x39a <Endpoint_Write_Control_PStream_LE+0x38>
 398:	3f c0       	rjmp	.+126    	; 0x418 <Endpoint_Write_Control_PStream_LE+0xb6>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 39a:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
 39e:	83 fd       	sbrc	r24, 3
 3a0:	3d c0       	rjmp	.+122    	; 0x41c <Endpoint_Write_Control_PStream_LE+0xba>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 3a2:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
 3a6:	82 fd       	sbrc	r24, 2
 3a8:	31 c0       	rjmp	.+98     	; 0x40c <Endpoint_Write_Control_PStream_LE+0xaa>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 3aa:	80 91 e8 00 	lds	r24, 0x00E8
		  break;

		if (Endpoint_IsINReady())
 3ae:	80 ff       	sbrs	r24, 0
 3b0:	21 c0       	rjmp	.+66     	; 0x3f4 <Endpoint_Write_Control_PStream_LE+0x92>
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
 3b2:	90 91 f3 00 	lds	r25, 0x00F3
 3b6:	80 91 f2 00 	lds	r24, 0x00F2
 3ba:	39 2f       	mov	r19, r25
 3bc:	20 e0       	ldi	r18, 0x00	; 0
 3be:	90 e0       	ldi	r25, 0x00	; 0
 3c0:	82 2b       	or	r24, r18
 3c2:	93 2b       	or	r25, r19
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
 3c4:	07 c0       	rjmp	.+14     	; 0x3d4 <Endpoint_Write_Control_PStream_LE+0x72>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
 3c6:	44 91       	lpm	r20, Z
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
 3c8:	40 93 f1 00 	sts	0x00F1, r20
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
 3cc:	31 96       	adiw	r30, 0x01	; 1
				Length--;
 3ce:	61 50       	subi	r22, 0x01	; 1
 3d0:	70 40       	sbci	r23, 0x00	; 0
				BytesInEndpoint++;
 3d2:	01 96       	adiw	r24, 0x01	; 1

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
 3d4:	61 15       	cp	r22, r1
 3d6:	71 05       	cpc	r23, r1
 3d8:	19 f0       	breq	.+6      	; 0x3e0 <Endpoint_Write_Control_PStream_LE+0x7e>
 3da:	88 30       	cpi	r24, 0x08	; 8
 3dc:	91 05       	cpc	r25, r1
 3de:	98 f3       	brcs	.-26     	; 0x3c6 <Endpoint_Write_Control_PStream_LE+0x64>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
 3e0:	41 e0       	ldi	r20, 0x01	; 1
 3e2:	88 30       	cpi	r24, 0x08	; 8
 3e4:	91 05       	cpc	r25, r1
 3e6:	09 f0       	breq	.+2      	; 0x3ea <Endpoint_Write_Control_PStream_LE+0x88>
 3e8:	40 e0       	ldi	r20, 0x00	; 0
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 3ea:	80 91 e8 00 	lds	r24, 0x00E8
 3ee:	8e 77       	andi	r24, 0x7E	; 126
 3f0:	80 93 e8 00 	sts	0x00E8, r24
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
 3f4:	61 15       	cp	r22, r1
 3f6:	71 05       	cpc	r23, r1
 3f8:	41 f6       	brne	.-112    	; 0x38a <Endpoint_Write_Control_PStream_LE+0x28>
 3fa:	44 23       	and	r20, r20
 3fc:	31 f6       	brne	.-116    	; 0x38a <Endpoint_Write_Control_PStream_LE+0x28>
 3fe:	06 c0       	rjmp	.+12     	; 0x40c <Endpoint_Write_Control_PStream_LE+0xaa>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
 400:	80 91 4f 01 	lds	r24, 0x014F

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
 404:	88 23       	and	r24, r24
 406:	61 f0       	breq	.+24     	; 0x420 <Endpoint_Write_Control_PStream_LE+0xbe>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
 408:	85 30       	cpi	r24, 0x05	; 5
 40a:	61 f0       	breq	.+24     	; 0x424 <Endpoint_Write_Control_PStream_LE+0xc2>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 40c:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
 410:	82 ff       	sbrs	r24, 2
 412:	f6 cf       	rjmp	.-20     	; 0x400 <Endpoint_Write_Control_PStream_LE+0x9e>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
 414:	80 e0       	ldi	r24, 0x00	; 0
 416:	08 95       	ret
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
 418:	83 e0       	ldi	r24, 0x03	; 3
 41a:	08 95       	ret
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
 41c:	81 e0       	ldi	r24, 0x01	; 1
 41e:	08 95       	ret
	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
 420:	82 e0       	ldi	r24, 0x02	; 2
 422:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
 424:	83 e0       	ldi	r24, 0x03	; 3
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
 426:	08 95       	ret

00000428 <Endpoint_ConfigureEndpoint_Prv>:
	UECFG0X = UECFG0XData;
	UECFG1X = UECFG1XData;

	return Endpoint_IsConfigured();
#else
	for (uint8_t EPNum = Number; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
 428:	98 2f       	mov	r25, r24
 42a:	2a c0       	rjmp	.+84     	; 0x480 <Endpoint_ConfigureEndpoint_Prv+0x58>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 42c:	90 93 e9 00 	sts	0x00E9, r25
		uint8_t UECFG1XTemp;
		uint8_t UEIENXTemp;

		Endpoint_SelectEndpoint(EPNum);

		if (EPNum == Number)
 430:	98 17       	cp	r25, r24
 432:	39 f0       	breq	.+14     	; 0x442 <Endpoint_ConfigureEndpoint_Prv+0x1a>
			UECFG1XTemp = UECFG1XData;
			UEIENXTemp  = 0;
		}
		else
		{
			UECFG0XTemp = UECFG0X;
 434:	70 91 ec 00 	lds	r23, 0x00EC
			UECFG1XTemp = UECFG1X;
 438:	20 91 ed 00 	lds	r18, 0x00ED
			UEIENXTemp  = UEIENX;
 43c:	50 91 f0 00 	lds	r21, 0x00F0
 440:	03 c0       	rjmp	.+6      	; 0x448 <Endpoint_ConfigureEndpoint_Prv+0x20>
		Endpoint_SelectEndpoint(EPNum);

		if (EPNum == Number)
		{
			UECFG0XTemp = UECFG0XData;
			UECFG1XTemp = UECFG1XData;
 442:	24 2f       	mov	r18, r20

		Endpoint_SelectEndpoint(EPNum);

		if (EPNum == Number)
		{
			UECFG0XTemp = UECFG0XData;
 444:	76 2f       	mov	r23, r22
			UECFG1XTemp = UECFG1XData;
			UEIENXTemp  = 0;
 446:	50 e0       	ldi	r21, 0x00	; 0
			UECFG0XTemp = UECFG0X;
			UECFG1XTemp = UECFG1X;
			UEIENXTemp  = UEIENX;
		}

		if (!(UECFG1XTemp & (1 << ALLOC)))
 448:	21 ff       	sbrs	r18, 1
 44a:	19 c0       	rjmp	.+50     	; 0x47e <Endpoint_ConfigureEndpoint_Prv+0x56>
			 *  to and from a host.
			 */
			static inline void Endpoint_DisableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_DisableEndpoint(void)
			{
				UECONX &= ~(1 << EPEN);
 44c:	30 91 eb 00 	lds	r19, 0x00EB
 450:	3e 7f       	andi	r19, 0xFE	; 254
 452:	30 93 eb 00 	sts	0x00EB, r19
		  continue;

		Endpoint_DisableEndpoint();
		UECFG1X &= ~(1 << ALLOC);
 456:	30 91 ed 00 	lds	r19, 0x00ED
 45a:	3d 7f       	andi	r19, 0xFD	; 253
 45c:	30 93 ed 00 	sts	0x00ED, r19
			 *  \note Endpoints must first be configured properly via \ref Endpoint_ConfigureEndpoint().
			 */
			static inline void Endpoint_EnableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_EnableEndpoint(void)
			{
				UECONX |= (1 << EPEN);
 460:	30 91 eb 00 	lds	r19, 0x00EB
 464:	31 60       	ori	r19, 0x01	; 1
 466:	30 93 eb 00 	sts	0x00EB, r19

		Endpoint_EnableEndpoint();
		UECFG0X = UECFG0XTemp;
 46a:	70 93 ec 00 	sts	0x00EC, r23
		UECFG1X = UECFG1XTemp;
 46e:	20 93 ed 00 	sts	0x00ED, r18
		UEIENX  = UEIENXTemp;
 472:	50 93 f0 00 	sts	0x00F0, r21
			 *  \return Boolean \c true if the currently selected endpoint has been configured, \c false otherwise.
			 */
			static inline bool Endpoint_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsConfigured(void)
			{
				return ((UESTA0X & (1 << CFGOK)) ? true : false);
 476:	20 91 ee 00 	lds	r18, 0x00EE

		if (!(Endpoint_IsConfigured()))
 47a:	27 ff       	sbrs	r18, 7
 47c:	08 c0       	rjmp	.+16     	; 0x48e <Endpoint_ConfigureEndpoint_Prv+0x66>
	UECFG0X = UECFG0XData;
	UECFG1X = UECFG1XData;

	return Endpoint_IsConfigured();
#else
	for (uint8_t EPNum = Number; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
 47e:	9f 5f       	subi	r25, 0xFF	; 255
 480:	97 30       	cpi	r25, 0x07	; 7
 482:	a0 f2       	brcs	.-88     	; 0x42c <Endpoint_ConfigureEndpoint_Prv+0x4>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 484:	8f 70       	andi	r24, 0x0F	; 15
 486:	80 93 e9 00 	sts	0x00E9, r24
		if (!(Endpoint_IsConfigured()))
		  return false;
	}

	Endpoint_SelectEndpoint(Number);
	return true;
 48a:	81 e0       	ldi	r24, 0x01	; 1
 48c:	08 95       	ret
		UECFG0X = UECFG0XTemp;
		UECFG1X = UECFG1XTemp;
		UEIENX  = UEIENXTemp;

		if (!(Endpoint_IsConfigured()))
		  return false;
 48e:	80 e0       	ldi	r24, 0x00	; 0
	}

	Endpoint_SelectEndpoint(Number);
	return true;
#endif
}
 490:	08 95       	ret

00000492 <Endpoint_ConfigureEndpointTable>:
uint8_t USB_Device_ControlEndpointSize = ENDPOINT_CONTROLEP_DEFAULT_SIZE;
#endif

bool Endpoint_ConfigureEndpointTable(const USB_Endpoint_Table_t* const Table,
                                     const uint8_t Entries)
{
 492:	0f 93       	push	r16
 494:	1f 93       	push	r17
 496:	cf 93       	push	r28
 498:	df 93       	push	r29
 49a:	16 2f       	mov	r17, r22
	{
		if (!(Table[i].Address))
		  continue;
	
		if (!(Endpoint_ConfigureEndpoint(Table[i].Address, Table[i].Type, Table[i].Size, Table[i].Banks)))
		  return false;
 49c:	ec 01       	movw	r28, r24
#endif

bool Endpoint_ConfigureEndpointTable(const USB_Endpoint_Table_t* const Table,
                                     const uint8_t Entries)
{
	for (uint8_t i = 0; i < Entries; i++)
 49e:	00 e0       	ldi	r16, 0x00	; 0
 4a0:	2a c0       	rjmp	.+84     	; 0x4f6 <Endpoint_ConfigureEndpointTable+0x64>
	{
		if (!(Table[i].Address))
 4a2:	98 81       	ld	r25, Y
 4a4:	99 23       	and	r25, r25
 4a6:	29 f1       	breq	.+74     	; 0x4f2 <Endpoint_ConfigureEndpointTable+0x60>
		  continue;
	
		if (!(Endpoint_ConfigureEndpoint(Table[i].Address, Table[i].Type, Table[i].Size, Table[i].Banks)))
 4a8:	6b 81       	ldd	r22, Y+3	; 0x03
 4aa:	e9 81       	ldd	r30, Y+1	; 0x01
 4ac:	fa 81       	ldd	r31, Y+2	; 0x02
 4ae:	2c 81       	ldd	r18, Y+4	; 0x04
			static inline bool Endpoint_ConfigureEndpoint(const uint8_t Address,
			                                              const uint8_t Type,
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);
 4b0:	89 2f       	mov	r24, r25
 4b2:	8f 70       	andi	r24, 0x0F	; 15

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
 4b4:	87 30       	cpi	r24, 0x07	; 7
 4b6:	18 f5       	brcc	.+70     	; 0x4fe <Endpoint_ConfigureEndpointTable+0x6c>
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
				                                      ((Type << EPTYPE0) | ((Address & ENDPOINT_DIR_IN) ? (1 << EPDIR) : 0)),
 4b8:	62 95       	swap	r22
 4ba:	66 0f       	add	r22, r22
 4bc:	66 0f       	add	r22, r22
 4be:	60 7c       	andi	r22, 0xC0	; 192
 4c0:	99 1f       	adc	r25, r25
 4c2:	99 27       	eor	r25, r25
 4c4:	99 1f       	adc	r25, r25
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
 4c6:	69 2b       	or	r22, r25
 4c8:	22 30       	cpi	r18, 0x02	; 2
 4ca:	10 f0       	brcs	.+4      	; 0x4d0 <Endpoint_ConfigureEndpointTable+0x3e>
 4cc:	96 e0       	ldi	r25, 0x06	; 6
 4ce:	01 c0       	rjmp	.+2      	; 0x4d2 <Endpoint_ConfigureEndpointTable+0x40>
 4d0:	92 e0       	ldi	r25, 0x02	; 2
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes) ATTR_WARN_UNUSED_RESULT ATTR_CONST
			                                                                       ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;
 4d2:	28 e0       	ldi	r18, 0x08	; 8
 4d4:	30 e0       	ldi	r19, 0x00	; 0
		/* Inline Functions: */
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes) ATTR_WARN_UNUSED_RESULT ATTR_CONST
			                                                                       ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
 4d6:	40 e0       	ldi	r20, 0x00	; 0
 4d8:	03 c0       	rjmp	.+6      	; 0x4e0 <Endpoint_ConfigureEndpointTable+0x4e>
				uint16_t CheckBytes = 8;

				while (CheckBytes < Bytes)
				{
					MaskVal++;
 4da:	4f 5f       	subi	r20, 0xFF	; 255
					CheckBytes <<= 1;
 4dc:	22 0f       	add	r18, r18
 4de:	33 1f       	adc	r19, r19
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while (CheckBytes < Bytes)
 4e0:	2e 17       	cp	r18, r30
 4e2:	3f 07       	cpc	r19, r31
 4e4:	d0 f3       	brcs	.-12     	; 0x4da <Endpoint_ConfigureEndpointTable+0x48>
				{
					MaskVal++;
					CheckBytes <<= 1;
				}

				return (MaskVal << EPSIZE0);
 4e6:	42 95       	swap	r20
 4e8:	40 7f       	andi	r20, 0xF0	; 240
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
 4ea:	49 2b       	or	r20, r25
 4ec:	9d df       	rcall	.-198    	; 0x428 <Endpoint_ConfigureEndpoint_Prv>
 4ee:	88 23       	and	r24, r24
 4f0:	31 f0       	breq	.+12     	; 0x4fe <Endpoint_ConfigureEndpointTable+0x6c>
 4f2:	0f 5f       	subi	r16, 0xFF	; 255
#endif

bool Endpoint_ConfigureEndpointTable(const USB_Endpoint_Table_t* const Table,
                                     const uint8_t Entries)
{
	for (uint8_t i = 0; i < Entries; i++)
 4f4:	25 96       	adiw	r28, 0x05	; 5
 4f6:	01 17       	cp	r16, r17
 4f8:	a1 f6       	brne	.-88     	; 0x4a2 <Endpoint_ConfigureEndpointTable+0x10>
 4fa:	81 e0       	ldi	r24, 0x01	; 1
	
		if (!(Endpoint_ConfigureEndpoint(Table[i].Address, Table[i].Type, Table[i].Size, Table[i].Banks)))
		  return false;
	}
	
	return true;
 4fc:	01 c0       	rjmp	.+2      	; 0x500 <Endpoint_ConfigureEndpointTable+0x6e>
 4fe:	80 e0       	ldi	r24, 0x00	; 0
	{
		if (!(Table[i].Address))
		  continue;
	
		if (!(Endpoint_ConfigureEndpoint(Table[i].Address, Table[i].Type, Table[i].Size, Table[i].Banks)))
		  return false;
 500:	df 91       	pop	r29
	}
	
	return true;
}
 502:	cf 91       	pop	r28
 504:	1f 91       	pop	r17
 506:	0f 91       	pop	r16
 508:	08 95       	ret

0000050a <Endpoint_ClearStatusStage>:
 50a:	80 91 50 01 	lds	r24, 0x0150
	}
}

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
 50e:	87 ff       	sbrs	r24, 7
 510:	13 c0       	rjmp	.+38     	; 0x538 <Endpoint_ClearStatusStage+0x2e>
 512:	04 c0       	rjmp	.+8      	; 0x51c <Endpoint_ClearStatusStage+0x12>
	{
		while (!(Endpoint_IsOUTReceived()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
 514:	80 91 4f 01 	lds	r24, 0x014F
 518:	88 23       	and	r24, r24
 51a:	b9 f0       	breq	.+46     	; 0x54a <Endpoint_ClearStatusStage+0x40>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 51c:	80 91 e8 00 	lds	r24, 0x00E8

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
	{
		while (!(Endpoint_IsOUTReceived()))
 520:	82 ff       	sbrs	r24, 2
 522:	f8 cf       	rjmp	.-16     	; 0x514 <Endpoint_ClearStatusStage+0xa>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 524:	80 91 e8 00 	lds	r24, 0x00E8
 528:	8b 77       	andi	r24, 0x7B	; 123
 52a:	80 93 e8 00 	sts	0x00E8, r24
 52e:	08 95       	ret
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
 530:	80 91 4f 01 	lds	r24, 0x014F
 534:	88 23       	and	r24, r24
 536:	49 f0       	breq	.+18     	; 0x54a <Endpoint_ClearStatusStage+0x40>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 538:	80 91 e8 00 	lds	r24, 0x00E8

		Endpoint_ClearOUT();
	}
	else
	{
		while (!(Endpoint_IsINReady()))
 53c:	80 ff       	sbrs	r24, 0
 53e:	f8 cf       	rjmp	.-16     	; 0x530 <Endpoint_ClearStatusStage+0x26>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 540:	80 91 e8 00 	lds	r24, 0x00E8
 544:	8e 77       	andi	r24, 0x7E	; 126
 546:	80 93 e8 00 	sts	0x00E8, r24
 54a:	08 95       	ret

0000054c <Endpoint_WaitUntilReady>:
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
 54c:	80 91 e4 00 	lds	r24, 0x00E4
 550:	90 91 e5 00 	lds	r25, 0x00E5
 554:	45 e6       	ldi	r20, 0x65	; 101
 556:	01 c0       	rjmp	.+2      	; 0x55a <Endpoint_WaitUntilReady+0xe>
 558:	c9 01       	movw	r24, r18
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
 55a:	20 91 ec 00 	lds	r18, 0x00EC
 55e:	20 ff       	sbrs	r18, 0
 560:	23 c0       	rjmp	.+70     	; 0x5a8 <Endpoint_WaitUntilReady+0x5c>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 562:	20 91 e8 00 	lds	r18, 0x00E8

	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
 566:	20 fd       	sbrc	r18, 0
 568:	15 c0       	rjmp	.+42     	; 0x594 <Endpoint_WaitUntilReady+0x48>
		{
			if (Endpoint_IsOUTReceived())
			  return ENDPOINT_READYWAIT_NoError;
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;
 56a:	20 91 4f 01 	lds	r18, 0x014F

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
 56e:	22 23       	and	r18, r18
 570:	99 f0       	breq	.+38     	; 0x598 <Endpoint_WaitUntilReady+0x4c>
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
 572:	25 30       	cpi	r18, 0x05	; 5
 574:	99 f0       	breq	.+38     	; 0x59c <Endpoint_WaitUntilReady+0x50>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
 576:	20 91 eb 00 	lds	r18, 0x00EB
		  return ENDPOINT_READYWAIT_BusSuspended;
		else if (Endpoint_IsStalled())
 57a:	25 fd       	sbrc	r18, 5
 57c:	11 c0       	rjmp	.+34     	; 0x5a0 <Endpoint_WaitUntilReady+0x54>
 57e:	20 91 e4 00 	lds	r18, 0x00E4
 582:	30 91 e5 00 	lds	r19, 0x00E5
		  return ENDPOINT_READYWAIT_EndpointStalled;

		uint16_t CurrentFrameNumber = USB_Device_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
 586:	28 17       	cp	r18, r24
 588:	39 07       	cpc	r19, r25
 58a:	39 f3       	breq	.-50     	; 0x55a <Endpoint_WaitUntilReady+0xe>
 58c:	41 50       	subi	r20, 0x01	; 1
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
 58e:	21 f7       	brne	.-56     	; 0x558 <Endpoint_WaitUntilReady+0xc>
			  return ENDPOINT_READYWAIT_Timeout;
 590:	84 e0       	ldi	r24, 0x04	; 4
 592:	08 95       	ret
	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
 594:	80 e0       	ldi	r24, 0x00	; 0
 596:	08 95       	ret
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
 598:	82 e0       	ldi	r24, 0x02	; 2
 59a:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_READYWAIT_BusSuspended;
 59c:	83 e0       	ldi	r24, 0x03	; 3
 59e:	08 95       	ret
		else if (Endpoint_IsStalled())
		  return ENDPOINT_READYWAIT_EndpointStalled;
 5a0:	81 e0       	ldi	r24, 0x01	; 1
 5a2:	08 95       	ret
			  return ENDPOINT_READYWAIT_NoError;
		}
		else
		{
			if (Endpoint_IsOUTReceived())
			  return ENDPOINT_READYWAIT_NoError;
 5a4:	80 e0       	ldi	r24, 0x00	; 0

			if (!(TimeoutMSRem--))
			  return ENDPOINT_READYWAIT_Timeout;
		}
	}
}
 5a6:	08 95       	ret
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 5a8:	20 91 e8 00 	lds	r18, 0x00E8
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
		}
		else
		{
			if (Endpoint_IsOUTReceived())
 5ac:	22 ff       	sbrs	r18, 2
 5ae:	dd cf       	rjmp	.-70     	; 0x56a <Endpoint_WaitUntilReady+0x1e>
 5b0:	f9 cf       	rjmp	.-14     	; 0x5a4 <Endpoint_WaitUntilReady+0x58>

000005b2 <USB_ResetInterface>:

	USB_IsInitialized = false;
}

void USB_ResetInterface(void)
{
 5b2:	0f 93       	push	r16
 5b4:	1f 93       	push	r17
 5b6:	cf 93       	push	r28
 5b8:	df 93       	push	r29
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
 5ba:	4b d0       	rcall	.+150    	; 0x652 <USB_INT_DisableAllInterrupts>
 5bc:	52 d0       	rcall	.+164    	; 0x662 <USB_INT_ClearAllInterrupts>
	USB_INT_ClearAllInterrupts();
 5be:	c8 ed       	ldi	r28, 0xD8	; 216
 5c0:	d0 e0       	ldi	r29, 0x00	; 0
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
 5c2:	88 81       	ld	r24, Y
 5c4:	8f 77       	andi	r24, 0x7F	; 127
 5c6:	88 83       	st	Y, r24
 5c8:	88 81       	ld	r24, Y
 5ca:	80 68       	ori	r24, 0x80	; 128
				USBCON |=  (1 << USBE);
 5cc:	88 83       	st	Y, r24
 5ce:	88 81       	ld	r24, Y
 5d0:	8f 7d       	andi	r24, 0xDF	; 223
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
 5d2:	88 83       	st	Y, r24
 5d4:	19 bc       	out	0x29, r1	; 41
 5d6:	10 92 4f 01 	sts	0x014F, r1
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState                 = DEVICE_STATE_Unattached;
 5da:	10 92 4b 01 	sts	0x014B, r1
	USB_Device_ConfigurationNumber  = 0;
 5de:	10 92 4d 01 	sts	0x014D, r1

	#if !defined(NO_DEVICE_REMOTE_WAKEUP)
	USB_Device_RemoteWakeupEnabled  = false;
 5e2:	10 92 4c 01 	sts	0x014C, r1
	#endif

	#if !defined(NO_DEVICE_SELF_POWER)
	USB_Device_CurrentlySelfPowered = false;
 5e6:	00 ee       	ldi	r16, 0xE0	; 224
 5e8:	10 e0       	ldi	r17, 0x00	; 0
			}

			static inline void USB_Device_SetFullSpeed(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetFullSpeed(void)
			{
				UDCON &= ~(1 << LSM);
 5ea:	f8 01       	movw	r30, r16
 5ec:	80 81       	ld	r24, Z
 5ee:	8b 7f       	andi	r24, 0xFB	; 251
 5f0:	80 83       	st	Z, r24
 5f2:	88 81       	ld	r24, Y
 5f4:	81 60       	ori	r24, 0x01	; 1
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBCON |= (1 << VBUSTE);
 5f6:	88 83       	st	Y, r24
 5f8:	80 e0       	ldi	r24, 0x00	; 0
 5fa:	60 e0       	ldi	r22, 0x00	; 0
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
 5fc:	42 e0       	ldi	r20, 0x02	; 2
 5fe:	14 df       	rcall	.-472    	; 0x428 <Endpoint_ConfigureEndpoint_Prv>
 600:	e1 ee       	ldi	r30, 0xE1	; 225
 602:	f0 e0       	ldi	r31, 0x00	; 0
 604:	80 81       	ld	r24, Z
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
 606:	8e 7f       	andi	r24, 0xFE	; 254
 608:	80 83       	st	Z, r24
 60a:	e2 ee       	ldi	r30, 0xE2	; 226
 60c:	f0 e0       	ldi	r31, 0x00	; 0
 60e:	80 81       	ld	r24, Z
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
 610:	81 60       	ori	r24, 0x01	; 1
 612:	80 83       	st	Z, r24
 614:	80 81       	ld	r24, Z
 616:	88 60       	ori	r24, 0x08	; 8
 618:	80 83       	st	Z, r24
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
 61a:	f8 01       	movw	r30, r16
 61c:	80 81       	ld	r24, Z
 61e:	8e 7f       	andi	r24, 0xFE	; 254
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
 620:	80 83       	st	Z, r24
 622:	88 81       	ld	r24, Y
 624:	80 61       	ori	r24, 0x10	; 16
 626:	88 83       	st	Y, r24

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON |=  (1 << OTGPADE);
 628:	df 91       	pop	r29
 62a:	cf 91       	pop	r28
 62c:	1f 91       	pop	r17
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
 62e:	0f 91       	pop	r16
 630:	08 95       	ret

00000632 <USB_Init>:
 632:	e8 ed       	ldi	r30, 0xD8	; 216
 634:	f0 e0       	ldi	r31, 0x00	; 0
 636:	80 81       	ld	r24, Z
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON &= ~(1 << OTGPADE);
 638:	8f 7e       	andi	r24, 0xEF	; 239
 63a:	80 83       	st	Z, r24

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON |=  (1 << UVREGE);
 63c:	e7 ed       	ldi	r30, 0xD7	; 215
 63e:	f0 e0       	ldi	r31, 0x00	; 0
 640:	80 81       	ld	r24, Z
 642:	81 60       	ori	r24, 0x01	; 1
 644:	80 83       	st	Z, r24
	  USB_REG_Off();

	if (!(USB_Options & USB_OPT_MANUAL_PLL))
	{
		#if defined(USB_SERIES_4_AVR)
		PLLFRQ = (1 << PDIV2);
 646:	84 e0       	ldi	r24, 0x04	; 4
 648:	82 bf       	out	0x32, r24	; 50
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
 64a:	81 e0       	ldi	r24, 0x01	; 1
 64c:	80 93 4e 01 	sts	0x014E, r24

	USB_ResetInterface();
 650:	b0 cf       	rjmp	.-160    	; 0x5b2 <USB_ResetInterface>

00000652 <USB_INT_DisableAllInterrupts>:
void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
	#elif defined(USB_SERIES_4_AVR)
	USBCON &= ~(1 << VBUSTE);
 652:	e8 ed       	ldi	r30, 0xD8	; 216
 654:	f0 e0       	ldi	r31, 0x00	; 0
 656:	80 81       	ld	r24, Z
 658:	8e 7f       	andi	r24, 0xFE	; 254
 65a:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
 65c:	10 92 e2 00 	sts	0x00E2, r1
	#endif
}
 660:	08 95       	ret

00000662 <USB_INT_ClearAllInterrupts>:

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
 662:	10 92 da 00 	sts	0x00DA, r1
	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
 666:	10 92 e1 00 	sts	0x00E1, r1
	#endif
}
 66a:	08 95       	ret

0000066c <__vector_10>:

ISR(USB_GEN_vect, ISR_BLOCK)
{
 66c:	1f 92       	push	r1
 66e:	0f 92       	push	r0
 670:	0f b6       	in	r0, 0x3f	; 63
 672:	0f 92       	push	r0
 674:	11 24       	eor	r1, r1
 676:	2f 93       	push	r18
 678:	3f 93       	push	r19
 67a:	4f 93       	push	r20
 67c:	5f 93       	push	r21
 67e:	6f 93       	push	r22
 680:	7f 93       	push	r23
 682:	8f 93       	push	r24
 684:	9f 93       	push	r25
 686:	af 93       	push	r26
 688:	bf 93       	push	r27
 68a:	ef 93       	push	r30
 68c:	ff 93       	push	r31
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
					case USB_INT_SOFI:
						return (UDINT  & (1 << SOFI));
 68e:	80 91 e1 00 	lds	r24, 0x00E1
	#if defined(USB_CAN_BE_DEVICE)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
 692:	82 ff       	sbrs	r24, 2
 694:	0a c0       	rjmp	.+20     	; 0x6aa <__vector_10+0x3e>
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
					case USB_INT_SOFI:
						return (UDIEN  & (1 << SOFE));
 696:	80 91 e2 00 	lds	r24, 0x00E2
 69a:	82 ff       	sbrs	r24, 2
 69c:	06 c0       	rjmp	.+12     	; 0x6aa <__vector_10+0x3e>
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
						break;
					case USB_INT_SOFI:
						UDINT  &= ~(1 << SOFI);
 69e:	80 91 e1 00 	lds	r24, 0x00E1
 6a2:	8b 7f       	andi	r24, 0xFB	; 251
 6a4:	80 93 e1 00 	sts	0x00E1, r24
	{
		USB_INT_Clear(USB_INT_SOFI);

		EVENT_USB_Device_StartOfFrame();
 6a8:	4b d2       	rcall	.+1174   	; 0xb40 <USB_Event_Stub>
 6aa:	80 91 da 00 	lds	r24, 0x00DA
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBINT & (1 << VBUSTI));
 6ae:	80 ff       	sbrs	r24, 0
	}
	#endif

	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	if (USB_INT_HasOccurred(USB_INT_VBUSTI) && USB_INT_IsEnabled(USB_INT_VBUSTI))
 6b0:	1d c0       	rjmp	.+58     	; 0x6ec <__vector_10+0x80>
 6b2:	80 91 d8 00 	lds	r24, 0x00D8
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBCON & (1 << VBUSTE));
 6b6:	80 ff       	sbrs	r24, 0
 6b8:	19 c0       	rjmp	.+50     	; 0x6ec <__vector_10+0x80>
 6ba:	80 91 da 00 	lds	r24, 0x00DA
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBINT &= ~(1 << VBUSTI);
 6be:	8e 7f       	andi	r24, 0xFE	; 254
 6c0:	80 93 da 00 	sts	0x00DA, r24
 6c4:	80 91 d9 00 	lds	r24, 0x00D9
				 *  \return Boolean \c true if the VBUS line is currently detecting power from a host, \c false otherwise.
				 */
				static inline bool USB_VBUS_GetStatus(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
				static inline bool USB_VBUS_GetStatus(void)
				{
					return ((USBSTA & (1 << VBUS)) ? true : false);
 6c8:	80 ff       	sbrs	r24, 0
	{
		USB_INT_Clear(USB_INT_VBUSTI);

		if (USB_VBUS_GetStatus())
 6ca:	0c c0       	rjmp	.+24     	; 0x6e4 <__vector_10+0x78>
 6cc:	80 e1       	ldi	r24, 0x10	; 16

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
 6ce:	89 bd       	out	0x29, r24	; 41
 6d0:	82 e1       	ldi	r24, 0x12	; 18
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
 6d2:	89 bd       	out	0x29, r24	; 41
 6d4:	09 b4       	in	r0, 0x29	; 41
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			{
				USB_PLL_On();
				while (!(USB_PLL_IsReady()));
 6d6:	00 fe       	sbrs	r0, 0
 6d8:	fd cf       	rjmp	.-6      	; 0x6d4 <__vector_10+0x68>
 6da:	81 e0       	ldi	r24, 0x01	; 1
			}

			USB_DeviceState = DEVICE_STATE_Powered;
 6dc:	80 93 4f 01 	sts	0x014F, r24
 6e0:	a3 dd       	rcall	.-1210   	; 0x228 <EVENT_USB_Device_Connect>
			EVENT_USB_Device_Connect();
 6e2:	04 c0       	rjmp	.+8      	; 0x6ec <__vector_10+0x80>
 6e4:	19 bc       	out	0x29, r1	; 41
 6e6:	10 92 4f 01 	sts	0x014F, r1
		else
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			  USB_PLL_Off();

			USB_DeviceState = DEVICE_STATE_Unattached;
 6ea:	a0 dd       	rcall	.-1216   	; 0x22c <EVENT_USB_Device_Disconnect>
 6ec:	80 91 e1 00 	lds	r24, 0x00E1
			EVENT_USB_Device_Disconnect();
 6f0:	80 ff       	sbrs	r24, 0
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
 6f2:	18 c0       	rjmp	.+48     	; 0x724 <__vector_10+0xb8>
 6f4:	80 91 e2 00 	lds	r24, 0x00E2
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
 6f8:	80 ff       	sbrs	r24, 0
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
 6fa:	14 c0       	rjmp	.+40     	; 0x724 <__vector_10+0xb8>
 6fc:	80 91 e2 00 	lds	r24, 0x00E2
 700:	8e 7f       	andi	r24, 0xFE	; 254
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
 702:	80 93 e2 00 	sts	0x00E2, r24
 706:	80 91 e2 00 	lds	r24, 0x00E2
 70a:	80 61       	ori	r24, 0x10	; 16
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
 70c:	80 93 e2 00 	sts	0x00E2, r24
 710:	80 91 d8 00 	lds	r24, 0x00D8
 714:	80 62       	ori	r24, 0x20	; 32
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON |=  (1 << FRZCLK);
 716:	80 93 d8 00 	sts	0x00D8, r24
 71a:	19 bc       	out	0x29, r1	; 41
 71c:	85 e0       	ldi	r24, 0x05	; 5
 71e:	80 93 4f 01 	sts	0x014F, r24

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
		EVENT_USB_Device_Disconnect();
		#else
		USB_DeviceState = DEVICE_STATE_Suspended;
 722:	0e d2       	rcall	.+1052   	; 0xb40 <USB_Event_Stub>
 724:	80 91 e1 00 	lds	r24, 0x00E1
		EVENT_USB_Device_Suspend();
 728:	84 ff       	sbrs	r24, 4
 72a:	2d c0       	rjmp	.+90     	; 0x786 <__vector_10+0x11a>
					case USB_INT_IDTI:
						return (USBINT & (1 << IDTI));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
 72c:	80 91 e2 00 	lds	r24, 0x00E2
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
 730:	84 ff       	sbrs	r24, 4
 732:	29 c0       	rjmp	.+82     	; 0x786 <__vector_10+0x11a>
					case USB_INT_IDTI:
						return (USBCON & (1 << IDTE));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
 734:	80 e1       	ldi	r24, 0x10	; 16
 736:	89 bd       	out	0x29, r24	; 41
 738:	82 e1       	ldi	r24, 0x12	; 18
 73a:	89 bd       	out	0x29, r24	; 41

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
 73c:	09 b4       	in	r0, 0x29	; 41
 73e:	00 fe       	sbrs	r0, 0
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
 740:	fd cf       	rjmp	.-6      	; 0x73c <__vector_10+0xd0>
 742:	80 91 d8 00 	lds	r24, 0x00D8
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
 746:	8f 7d       	andi	r24, 0xDF	; 223
 748:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
 74c:	80 91 e1 00 	lds	r24, 0x00E1
 750:	8f 7e       	andi	r24, 0xEF	; 239
 752:	80 93 e1 00 	sts	0x00E1, r24
						USBINT &= ~(1 << IDTI);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
 756:	80 91 e2 00 	lds	r24, 0x00E2
 75a:	8f 7e       	andi	r24, 0xEF	; 239
 75c:	80 93 e2 00 	sts	0x00E2, r24
						USBCON &= ~(1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
 760:	80 91 e2 00 	lds	r24, 0x00E2
 764:	81 60       	ori	r24, 0x01	; 1
 766:	80 93 e2 00 	sts	0x00E2, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
 76a:	80 91 4b 01 	lds	r24, 0x014B
 76e:	88 23       	and	r24, r24
 770:	21 f4       	brne	.+8      	; 0x77a <__vector_10+0x10e>
		USB_INT_Clear(USB_INT_WAKEUPI);

		USB_INT_Disable(USB_INT_WAKEUPI);
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_Device_ConfigurationNumber)
 772:	80 91 e3 00 	lds	r24, 0x00E3
 776:	87 ff       	sbrs	r24, 7
 778:	02 c0       	rjmp	.+4      	; 0x77e <__vector_10+0x112>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
 77a:	84 e0       	ldi	r24, 0x04	; 4
 77c:	01 c0       	rjmp	.+2      	; 0x780 <__vector_10+0x114>
		  USB_DeviceState = DEVICE_STATE_Configured;
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
 77e:	81 e0       	ldi	r24, 0x01	; 1
 780:	80 93 4f 01 	sts	0x014F, r24
 784:	dd d1       	rcall	.+954    	; 0xb40 <USB_Event_Stub>
 786:	80 91 e1 00 	lds	r24, 0x00E1
 78a:	83 ff       	sbrs	r24, 3

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
		#else
		EVENT_USB_Device_WakeUp();
 78c:	27 c0       	rjmp	.+78     	; 0x7dc <__vector_10+0x170>
 78e:	80 91 e2 00 	lds	r24, 0x00E2
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
 792:	83 ff       	sbrs	r24, 3
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
 794:	23 c0       	rjmp	.+70     	; 0x7dc <__vector_10+0x170>
 796:	80 91 e1 00 	lds	r24, 0x00E1
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
 79a:	87 7f       	andi	r24, 0xF7	; 247
 79c:	80 93 e1 00 	sts	0x00E1, r24
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
 7a0:	82 e0       	ldi	r24, 0x02	; 2
 7a2:	80 93 4f 01 	sts	0x014F, r24
 7a6:	10 92 4b 01 	sts	0x014B, r1
	{
		USB_INT_Clear(USB_INT_EORSTI);

		USB_DeviceState                = DEVICE_STATE_Default;
 7aa:	80 91 e1 00 	lds	r24, 0x00E1
 7ae:	8e 7f       	andi	r24, 0xFE	; 254
		USB_Device_ConfigurationNumber = 0;
 7b0:	80 93 e1 00 	sts	0x00E1, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
 7b4:	80 91 e2 00 	lds	r24, 0x00E2
 7b8:	8e 7f       	andi	r24, 0xFE	; 254
 7ba:	80 93 e2 00 	sts	0x00E2, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
 7be:	80 91 e2 00 	lds	r24, 0x00E2
 7c2:	80 61       	ori	r24, 0x10	; 16
 7c4:	80 93 e2 00 	sts	0x00E2, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
 7c8:	80 e0       	ldi	r24, 0x00	; 0
 7ca:	60 e0       	ldi	r22, 0x00	; 0
 7cc:	42 e0       	ldi	r20, 0x02	; 2
 7ce:	2c de       	rcall	.-936    	; 0x428 <Endpoint_ConfigureEndpoint_Prv>
 7d0:	80 91 f0 00 	lds	r24, 0x00F0
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
 7d4:	88 60       	ori	r24, 0x08	; 8
 7d6:	80 93 f0 00 	sts	0x00F0, r24
 7da:	b2 d1       	rcall	.+868    	; 0xb40 <USB_Event_Stub>
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX |= (1 << RXSTPE);
 7dc:	ff 91       	pop	r31
 7de:	ef 91       	pop	r30
 7e0:	bf 91       	pop	r27
 7e2:	af 91       	pop	r26
 7e4:	9f 91       	pop	r25

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
 7e6:	8f 91       	pop	r24
 7e8:	7f 91       	pop	r23
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
 7ea:	6f 91       	pop	r22
 7ec:	5f 91       	pop	r21
 7ee:	4f 91       	pop	r20
 7f0:	3f 91       	pop	r19
 7f2:	2f 91       	pop	r18
 7f4:	0f 90       	pop	r0
 7f6:	0f be       	out	0x3f, r0	; 63
 7f8:	0f 90       	pop	r0
 7fa:	1f 90       	pop	r1
 7fc:	18 95       	reti

000007fe <__vector_11>:
 7fe:	1f 92       	push	r1
 800:	0f 92       	push	r0
 802:	0f b6       	in	r0, 0x3f	; 63
 804:	0f 92       	push	r0
 806:	11 24       	eor	r1, r1
 808:	2f 93       	push	r18
 80a:	3f 93       	push	r19

#if defined(INTERRUPT_CONTROL_ENDPOINT) && defined(USB_CAN_BE_DEVICE)
ISR(USB_COM_vect, ISR_BLOCK)
{
 80c:	4f 93       	push	r20
 80e:	5f 93       	push	r21
 810:	6f 93       	push	r22
 812:	7f 93       	push	r23
 814:	8f 93       	push	r24
 816:	9f 93       	push	r25
 818:	af 93       	push	r26
 81a:	bf 93       	push	r27
 81c:	cf 93       	push	r28
 81e:	ef 93       	push	r30
 820:	ff 93       	push	r31
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
 822:	c0 91 e9 00 	lds	r28, 0x00E9
 826:	cf 70       	andi	r28, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
 828:	80 91 ec 00 	lds	r24, 0x00EC
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 82c:	10 92 e9 00 	sts	0x00E9, r1
						break;
					case USB_INT_SOFI:
						UDIEN  &= ~(1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX &= ~(1 << RXSTPE);
 830:	80 91 f0 00 	lds	r24, 0x00F0
 834:	87 7f       	andi	r24, 0xF7	; 247
 836:	80 93 f0 00 	sts	0x00F0, r24
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				sei();
 83a:	78 94       	sei
	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Disable(USB_INT_RXSTPI);

	GlobalInterruptEnable();

	USB_Device_ProcessControlRequest();
 83c:	1b d0       	rcall	.+54     	; 0x874 <USB_Device_ProcessControlRequest>
 83e:	10 92 e9 00 	sts	0x00E9, r1
 842:	80 91 f0 00 	lds	r24, 0x00F0
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX |= (1 << RXSTPE);
 846:	88 60       	ori	r24, 0x08	; 8
 848:	80 93 f0 00 	sts	0x00F0, r24
 84c:	c0 93 e9 00 	sts	0x00E9, r28
 850:	ff 91       	pop	r31

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Enable(USB_INT_RXSTPI);
	Endpoint_SelectEndpoint(PrevSelectedEndpoint);
}
 852:	ef 91       	pop	r30
 854:	cf 91       	pop	r28
 856:	bf 91       	pop	r27
 858:	af 91       	pop	r26
 85a:	9f 91       	pop	r25
 85c:	8f 91       	pop	r24
 85e:	7f 91       	pop	r23
 860:	6f 91       	pop	r22
 862:	5f 91       	pop	r21
 864:	4f 91       	pop	r20
 866:	3f 91       	pop	r19
 868:	2f 91       	pop	r18
 86a:	0f 90       	pop	r0
 86c:	0f be       	out	0x3f, r0	; 63
 86e:	0f 90       	pop	r0
 870:	1f 90       	pop	r1
 872:	18 95       	reti

00000874 <USB_Device_ProcessControlRequest>:
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_Device_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
 874:	1f 93       	push	r17
 876:	cf 93       	push	r28
 878:	df 93       	push	r29
 87a:	cd b7       	in	r28, 0x3d	; 61
 87c:	de b7       	in	r29, 0x3e	; 62
 87e:	ac 97       	sbiw	r28, 0x2c	; 44
 880:	0f b6       	in	r0, 0x3f	; 63
 882:	f8 94       	cli
 884:	de bf       	out	0x3e, r29	; 62
 886:	0f be       	out	0x3f, r0	; 63
 888:	cd bf       	out	0x3d, r28	; 61
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
 88a:	80 e0       	ldi	r24, 0x00	; 0
	USB_ControlRequest.bRequest      = Endpoint_Read_8();
	USB_ControlRequest.wValue        = Endpoint_Read_16_LE();
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;
 88c:	e0 e5       	ldi	r30, 0x50	; 80
 88e:	f1 e0       	ldi	r31, 0x01	; 1
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
 890:	90 91 f1 00 	lds	r25, 0x00F1

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_8();
 894:	91 93       	st	Z+, r25
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
 896:	8f 5f       	subi	r24, 0xFF	; 255
 898:	88 30       	cpi	r24, 0x08	; 8
 89a:	d1 f7       	brne	.-12     	; 0x890 <USB_Device_ProcessControlRequest+0x1c>
	  *(RequestHeader++) = Endpoint_Read_8();
	#endif

	EVENT_USB_Device_ControlRequest();
 89c:	d2 dc       	rcall	.-1628   	; 0x242 <EVENT_USB_Device_ControlRequest>
 89e:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 8a2:	83 ff       	sbrs	r24, 3

	if (Endpoint_IsSETUPReceived())
 8a4:	35 c1       	rjmp	.+618    	; 0xb10 <__stack+0x11>
 8a6:	80 91 50 01 	lds	r24, 0x0150
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
 8aa:	20 91 51 01 	lds	r18, 0x0151

		switch (USB_ControlRequest.bRequest)
 8ae:	25 30       	cpi	r18, 0x05	; 5
 8b0:	09 f4       	brne	.+2      	; 0x8b4 <USB_Device_ProcessControlRequest+0x40>
 8b2:	84 c0       	rjmp	.+264    	; 0x9bc <USB_Device_ProcessControlRequest+0x148>
 8b4:	26 30       	cpi	r18, 0x06	; 6
 8b6:	40 f4       	brcc	.+16     	; 0x8c8 <USB_Device_ProcessControlRequest+0x54>
 8b8:	21 30       	cpi	r18, 0x01	; 1
 8ba:	a1 f1       	breq	.+104    	; 0x924 <USB_Device_ProcessControlRequest+0xb0>
 8bc:	21 30       	cpi	r18, 0x01	; 1
 8be:	70 f0       	brcs	.+28     	; 0x8dc <USB_Device_ProcessControlRequest+0x68>
 8c0:	23 30       	cpi	r18, 0x03	; 3
 8c2:	09 f0       	breq	.+2      	; 0x8c6 <USB_Device_ProcessControlRequest+0x52>
 8c4:	25 c1       	rjmp	.+586    	; 0xb10 <__stack+0x11>
 8c6:	2e c0       	rjmp	.+92     	; 0x924 <USB_Device_ProcessControlRequest+0xb0>
 8c8:	28 30       	cpi	r18, 0x08	; 8
 8ca:	09 f4       	brne	.+2      	; 0x8ce <USB_Device_ProcessControlRequest+0x5a>
 8cc:	f3 c0       	rjmp	.+486    	; 0xab4 <USB_Device_ProcessControlRequest+0x240>
 8ce:	29 30       	cpi	r18, 0x09	; 9
 8d0:	09 f4       	brne	.+2      	; 0x8d4 <USB_Device_ProcessControlRequest+0x60>
 8d2:	02 c1       	rjmp	.+516    	; 0xad8 <USB_Device_ProcessControlRequest+0x264>
 8d4:	26 30       	cpi	r18, 0x06	; 6
 8d6:	09 f0       	breq	.+2      	; 0x8da <USB_Device_ProcessControlRequest+0x66>
 8d8:	1b c1       	rjmp	.+566    	; 0xb10 <__stack+0x11>
 8da:	93 c0       	rjmp	.+294    	; 0xa02 <USB_Device_ProcessControlRequest+0x18e>
 8dc:	80 38       	cpi	r24, 0x80	; 128
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
 8de:	21 f0       	breq	.+8      	; 0x8e8 <USB_Device_ProcessControlRequest+0x74>
 8e0:	82 38       	cpi	r24, 0x82	; 130
 8e2:	09 f0       	breq	.+2      	; 0x8e6 <USB_Device_ProcessControlRequest+0x72>
 8e4:	15 c1       	rjmp	.+554    	; 0xb10 <__stack+0x11>
 8e6:	08 c0       	rjmp	.+16     	; 0x8f8 <USB_Device_ProcessControlRequest+0x84>
 8e8:	80 91 4c 01 	lds	r24, 0x014C
	Endpoint_ClearOUT();
}

static void USB_Device_GetStatus(void)
{
	uint8_t CurrentStatus = 0;
 8ec:	90 91 4d 01 	lds	r25, 0x014D
			if (USB_Device_CurrentlySelfPowered)
			  CurrentStatus |= FEATURE_SELFPOWERED_ENABLED;
			#endif

			#if !defined(NO_DEVICE_REMOTE_WAKEUP)
			if (USB_Device_RemoteWakeupEnabled)
 8f0:	99 23       	and	r25, r25
 8f2:	71 f0       	breq	.+28     	; 0x910 <USB_Device_ProcessControlRequest+0x9c>
 8f4:	82 60       	ori	r24, 0x02	; 2
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
 8f6:	0c c0       	rjmp	.+24     	; 0x910 <USB_Device_ProcessControlRequest+0x9c>
 8f8:	80 91 54 01 	lds	r24, 0x0154
			#endif
			break;
		case (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_ENDPOINT):
			#if !defined(CONTROL_ONLY_DEVICE)
			Endpoint_SelectEndpoint((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
 8fc:	8f 70       	andi	r24, 0x0F	; 15
 8fe:	80 93 e9 00 	sts	0x00E9, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 902:	90 91 eb 00 	lds	r25, 0x00EB
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
 906:	81 e0       	ldi	r24, 0x01	; 1

			CurrentStatus = Endpoint_IsStalled();
 908:	95 ff       	sbrs	r25, 5
 90a:	80 e0       	ldi	r24, 0x00	; 0
 90c:	10 92 e9 00 	sts	0x00E9, r1
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 910:	90 91 e8 00 	lds	r25, 0x00E8
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 914:	97 7f       	andi	r25, 0xF7	; 247
 916:	90 93 e8 00 	sts	0x00E8, r25
 91a:	80 93 f1 00 	sts	0x00F1, r24
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
 91e:	10 92 f1 00 	sts	0x00F1, r1
				UEDATX = (Data >> 8);
 922:	d3 c0       	rjmp	.+422    	; 0xaca <USB_Device_ProcessControlRequest+0x256>
 924:	88 23       	and	r24, r24
				}

				break;
			case REQ_ClearFeature:
			case REQ_SetFeature:
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
 926:	19 f0       	breq	.+6      	; 0x92e <USB_Device_ProcessControlRequest+0xba>
 928:	82 30       	cpi	r24, 0x02	; 2
 92a:	09 f0       	breq	.+2      	; 0x92e <USB_Device_ProcessControlRequest+0xba>
 92c:	f1 c0       	rjmp	.+482    	; 0xb10 <__stack+0x11>
 92e:	90 e0       	ldi	r25, 0x00	; 0
	Endpoint_ClearStatusStage();
}

static void USB_Device_ClearSetFeature(void)
{
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
 930:	8f 71       	andi	r24, 0x1F	; 31
 932:	90 70       	andi	r25, 0x00	; 0
 934:	00 97       	sbiw	r24, 0x00	; 0
 936:	29 f0       	breq	.+10     	; 0x942 <USB_Device_ProcessControlRequest+0xce>
 938:	82 30       	cpi	r24, 0x02	; 2
 93a:	91 05       	cpc	r25, r1
 93c:	09 f0       	breq	.+2      	; 0x940 <USB_Device_ProcessControlRequest+0xcc>
 93e:	e8 c0       	rjmp	.+464    	; 0xb10 <__stack+0x11>
 940:	0b c0       	rjmp	.+22     	; 0x958 <USB_Device_ProcessControlRequest+0xe4>
 942:	80 91 52 01 	lds	r24, 0x0152
	{
		#if !defined(NO_DEVICE_REMOTE_WAKEUP)
		case REQREC_DEVICE:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
 946:	81 30       	cpi	r24, 0x01	; 1
 948:	09 f0       	breq	.+2      	; 0x94c <USB_Device_ProcessControlRequest+0xd8>
 94a:	e2 c0       	rjmp	.+452    	; 0xb10 <__stack+0x11>
 94c:	23 30       	cpi	r18, 0x03	; 3
			  USB_Device_RemoteWakeupEnabled = (USB_ControlRequest.bRequest == REQ_SetFeature);
 94e:	09 f0       	breq	.+2      	; 0x952 <USB_Device_ProcessControlRequest+0xde>
 950:	80 e0       	ldi	r24, 0x00	; 0
 952:	80 93 4d 01 	sts	0x014D, r24
 956:	2c c0       	rjmp	.+88     	; 0x9b0 <USB_Device_ProcessControlRequest+0x13c>
 958:	80 91 52 01 	lds	r24, 0x0152

			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
 95c:	88 23       	and	r24, r24
 95e:	41 f5       	brne	.+80     	; 0x9b0 <USB_Device_ProcessControlRequest+0x13c>
 960:	20 91 54 01 	lds	r18, 0x0154
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
 964:	2f 70       	andi	r18, 0x0F	; 15
 966:	09 f4       	brne	.+2      	; 0x96a <USB_Device_ProcessControlRequest+0xf6>

				if (EndpointIndex == ENDPOINT_CONTROLEP)
 968:	d3 c0       	rjmp	.+422    	; 0xb10 <__stack+0x11>
 96a:	20 93 e9 00 	sts	0x00E9, r18
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 96e:	80 91 eb 00 	lds	r24, 0x00EB
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
 972:	80 ff       	sbrs	r24, 0
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
 974:	1d c0       	rjmp	.+58     	; 0x9b0 <USB_Device_ProcessControlRequest+0x13c>
 976:	80 91 51 01 	lds	r24, 0x0151
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
 97a:	83 30       	cpi	r24, 0x03	; 3
 97c:	21 f4       	brne	.+8      	; 0x986 <USB_Device_ProcessControlRequest+0x112>
 97e:	80 91 eb 00 	lds	r24, 0x00EB
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
 982:	80 62       	ori	r24, 0x20	; 32
 984:	13 c0       	rjmp	.+38     	; 0x9ac <USB_Device_ProcessControlRequest+0x138>
 986:	80 91 eb 00 	lds	r24, 0x00EB
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
 98a:	80 61       	ori	r24, 0x10	; 16
 98c:	80 93 eb 00 	sts	0x00EB, r24
 990:	81 e0       	ldi	r24, 0x01	; 1
			 *  \param[in] Address  Endpoint address whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t Address)
			{
				UERST = (1 << (Address & ENDPOINT_EPNUM_MASK));
 992:	90 e0       	ldi	r25, 0x00	; 0
 994:	02 c0       	rjmp	.+4      	; 0x99a <USB_Device_ProcessControlRequest+0x126>
 996:	88 0f       	add	r24, r24
 998:	99 1f       	adc	r25, r25
 99a:	2a 95       	dec	r18
 99c:	e2 f7       	brpl	.-8      	; 0x996 <USB_Device_ProcessControlRequest+0x122>
 99e:	80 93 ea 00 	sts	0x00EA, r24
 9a2:	10 92 ea 00 	sts	0x00EA, r1
				UERST = 0;
 9a6:	80 91 eb 00 	lds	r24, 0x00EB

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
 9aa:	88 60       	ori	r24, 0x08	; 8
 9ac:	80 93 eb 00 	sts	0x00EB, r24
 9b0:	10 92 e9 00 	sts	0x00E9, r1
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 9b4:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 9b8:	87 7f       	andi	r24, 0xF7	; 247
 9ba:	8a c0       	rjmp	.+276    	; 0xad0 <USB_Device_ProcessControlRequest+0x25c>
 9bc:	88 23       	and	r24, r24
					USB_Device_ClearSetFeature();
				}

				break;
			case REQ_SetAddress:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
 9be:	09 f0       	breq	.+2      	; 0x9c2 <USB_Device_ProcessControlRequest+0x14e>
 9c0:	a7 c0       	rjmp	.+334    	; 0xb10 <__stack+0x11>
 9c2:	10 91 52 01 	lds	r17, 0x0152
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t DeviceAddress = (USB_ControlRequest.wValue & 0x7F);
 9c6:	1f 77       	andi	r17, 0x7F	; 127
 9c8:	80 91 e3 00 	lds	r24, 0x00E3
			#endif

			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				UDADDR = (UDADDR & (1 << ADDEN)) | (Address & 0x7F);
 9cc:	80 78       	andi	r24, 0x80	; 128
 9ce:	81 2b       	or	r24, r17
 9d0:	80 93 e3 00 	sts	0x00E3, r24
 9d4:	80 91 e8 00 	lds	r24, 0x00E8
 9d8:	87 7f       	andi	r24, 0xF7	; 247
 9da:	80 93 e8 00 	sts	0x00E8, r24
 9de:	95 dd       	rcall	.-1238   	; 0x50a <Endpoint_ClearStatusStage>

	USB_Device_SetDeviceAddress(DeviceAddress);

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
 9e0:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 9e4:	80 ff       	sbrs	r24, 0
 9e6:	fc cf       	rjmp	.-8      	; 0x9e0 <USB_Device_ProcessControlRequest+0x16c>

	while (!(Endpoint_IsINReady()));
 9e8:	80 91 e3 00 	lds	r24, 0x00E3
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address)
			{
				(void)Address;
				
				UDADDR |= (1 << ADDEN);
 9ec:	80 68       	ori	r24, 0x80	; 128
 9ee:	80 93 e3 00 	sts	0x00E3, r24
 9f2:	11 23       	and	r17, r17
 9f4:	11 f0       	breq	.+4      	; 0x9fa <USB_Device_ProcessControlRequest+0x186>

	USB_Device_EnableDeviceAddress(DeviceAddress);

	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
 9f6:	83 e0       	ldi	r24, 0x03	; 3
 9f8:	01 c0       	rjmp	.+2      	; 0x9fc <USB_Device_ProcessControlRequest+0x188>
 9fa:	82 e0       	ldi	r24, 0x02	; 2
 9fc:	80 93 4f 01 	sts	0x014F, r24
 a00:	87 c0       	rjmp	.+270    	; 0xb10 <__stack+0x11>
 a02:	80 58       	subi	r24, 0x80	; 128
 a04:	82 30       	cpi	r24, 0x02	; 2
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_SetAddress();

				break;
			case REQ_GetDescriptor:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
 a06:	08 f0       	brcs	.+2      	; 0xa0a <USB_Device_ProcessControlRequest+0x196>
 a08:	83 c0       	rjmp	.+262    	; 0xb10 <__stack+0x11>
 a0a:	80 91 52 01 	lds	r24, 0x0152
	    !(defined(USE_FLASH_DESCRIPTORS) || defined(USE_EEPROM_DESCRIPTORS) || defined(USE_RAM_DESCRIPTORS))
	uint8_t DescriptorAddressSpace;
	#endif

	#if !defined(NO_INTERNAL_SERIAL) && (USE_INTERNAL_SERIAL != NO_DESCRIPTOR)
	if (USB_ControlRequest.wValue == ((DTYPE_String << 8) | USE_INTERNAL_SERIAL))
 a0e:	90 91 53 01 	lds	r25, 0x0153
 a12:	23 e0       	ldi	r18, 0x03	; 3
 a14:	8c 3d       	cpi	r24, 0xDC	; 220
 a16:	92 07       	cpc	r25, r18
 a18:	a9 f5       	brne	.+106    	; 0xa84 <USB_Device_ProcessControlRequest+0x210>
 a1a:	83 e0       	ldi	r24, 0x03	; 3
 a1c:	8c 83       	std	Y+4, r24	; 0x04
	{
		USB_Descriptor_Header_t Header;
		uint16_t                UnicodeString[INTERNAL_SERIAL_LENGTH_BITS / 4];
	} SignatureDescriptor;

	SignatureDescriptor.Header.Type = DTYPE_String;
 a1e:	8a e2       	ldi	r24, 0x2A	; 42
 a20:	8b 83       	std	Y+3, r24	; 0x03
	SignatureDescriptor.Header.Size = USB_STRING_LEN(INTERNAL_SERIAL_LENGTH_BITS / 4);
 a22:	5f b7       	in	r21, 0x3f	; 63
 a24:	f8 94       	cli
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
 a26:	de 01       	movw	r26, r28
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
 a28:	13 96       	adiw	r26, 0x03	; 3
				__builtin_ssrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				cli();
				#endif

				GCC_MEMORY_BARRIER();
 a2a:	80 e0       	ldi	r24, 0x00	; 0
 a2c:	90 e0       	ldi	r25, 0x00	; 0
 a2e:	4e e0       	ldi	r20, 0x0E	; 14
 a30:	61 e2       	ldi	r22, 0x21	; 33
			static inline void USB_Device_GetSerialString(uint16_t* const UnicodeString)
			{
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;
 a32:	e4 2f       	mov	r30, r20

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
				{
					uint8_t SerialByte = boot_signature_byte_get(SigReadAddress);
 a34:	f0 e0       	ldi	r31, 0x00	; 0
 a36:	60 93 57 00 	sts	0x0057, r22
 a3a:	e4 91       	lpm	r30, Z
 a3c:	80 ff       	sbrs	r24, 0
 a3e:	03 c0       	rjmp	.+6      	; 0xa46 <USB_Device_ProcessControlRequest+0x1d2>

					if (SerialCharNum & 0x01)
 a40:	e2 95       	swap	r30
 a42:	ef 70       	andi	r30, 0x0F	; 15
					{
						SerialByte >>= 4;
 a44:	4f 5f       	subi	r20, 0xFF	; 255
 a46:	ef 70       	andi	r30, 0x0F	; 15
						SigReadAddress++;
 a48:	2e 2f       	mov	r18, r30
					}

					SerialByte &= 0x0F;
 a4a:	30 e0       	ldi	r19, 0x00	; 0
 a4c:	ea 30       	cpi	r30, 0x0A	; 10
 a4e:	18 f0       	brcs	.+6      	; 0xa56 <USB_Device_ProcessControlRequest+0x1e2>

					UnicodeString[SerialCharNum] = cpu_to_le16((SerialByte >= 10) ?
 a50:	29 5c       	subi	r18, 0xC9	; 201
 a52:	3f 4f       	sbci	r19, 0xFF	; 255
 a54:	02 c0       	rjmp	.+4      	; 0xa5a <USB_Device_ProcessControlRequest+0x1e6>
 a56:	20 5d       	subi	r18, 0xD0	; 208
 a58:	3f 4f       	sbci	r19, 0xFF	; 255
 a5a:	13 96       	adiw	r26, 0x03	; 3
 a5c:	3c 93       	st	X, r19
 a5e:	2e 93       	st	-X, r18
 a60:	12 97       	sbiw	r26, 0x02	; 2
 a62:	01 96       	adiw	r24, 0x01	; 1
 a64:	12 96       	adiw	r26, 0x02	; 2
 a66:	84 31       	cpi	r24, 0x14	; 20
 a68:	91 05       	cpc	r25, r1
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
 a6a:	19 f7       	brne	.-58     	; 0xa32 <USB_Device_ProcessControlRequest+0x1be>
 a6c:	5f bf       	out	0x3f, r21	; 63
 a6e:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 a72:	87 7f       	andi	r24, 0xF7	; 247
 a74:	80 93 e8 00 	sts	0x00E8, r24
 a78:	ce 01       	movw	r24, r28
 a7a:	03 96       	adiw	r24, 0x03	; 3

	USB_Device_GetSerialString(SignatureDescriptor.UnicodeString);

	Endpoint_ClearSETUP();

	Endpoint_Write_Control_Stream_LE(&SignatureDescriptor, sizeof(SignatureDescriptor));
 a7c:	6a e2       	ldi	r22, 0x2A	; 42
 a7e:	70 e0       	ldi	r23, 0x00	; 0
 a80:	0f dc       	rcall	.-2018   	; 0x2a0 <Endpoint_Write_Control_Stream_LE>
 a82:	12 c0       	rjmp	.+36     	; 0xaa8 <USB_Device_ProcessControlRequest+0x234>
 a84:	60 91 54 01 	lds	r22, 0x0154
 a88:	ae 01       	movw	r20, r28
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif

	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
 a8a:	4f 5f       	subi	r20, 0xFF	; 255
 a8c:	5f 4f       	sbci	r21, 0xFF	; 255
 a8e:	dc db       	rcall	.-2120   	; 0x248 <CALLBACK_USB_GetDescriptor>
 a90:	bc 01       	movw	r22, r24
 a92:	00 97       	sbiw	r24, 0x00	; 0
 a94:	09 f4       	brne	.+2      	; 0xa98 <USB_Device_ProcessControlRequest+0x224>
 a96:	3c c0       	rjmp	.+120    	; 0xb10 <__stack+0x11>
 a98:	80 91 e8 00 	lds	r24, 0x00E8
 a9c:	87 7f       	andi	r24, 0xF7	; 247
 a9e:	80 93 e8 00 	sts	0x00E8, r24
 aa2:	89 81       	ldd	r24, Y+1	; 0x01
 aa4:	9a 81       	ldd	r25, Y+2	; 0x02
 aa6:	5d dc       	rcall	.-1862   	; 0x362 <Endpoint_Write_Control_PStream_LE>
 aa8:	80 91 e8 00 	lds	r24, 0x00E8
	#if defined(USE_RAM_DESCRIPTORS) || !defined(ARCH_HAS_MULTI_ADDRESS_SPACE)
	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_EEPROM_DESCRIPTORS)
	Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_FLASH_DESCRIPTORS)
	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
 aac:	8b 77       	andi	r24, 0x7B	; 123
 aae:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 ab2:	2e c0       	rjmp	.+92     	; 0xb10 <__stack+0x11>
 ab4:	80 38       	cpi	r24, 0x80	; 128
 ab6:	61 f5       	brne	.+88     	; 0xb10 <__stack+0x11>
 ab8:	80 91 e8 00 	lds	r24, 0x00E8
 abc:	87 7f       	andi	r24, 0xF7	; 247
					USB_Device_GetDescriptor();
				}

				break;
			case REQ_GetConfiguration:
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
 abe:	80 93 e8 00 	sts	0x00E8, r24
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 ac2:	80 91 4b 01 	lds	r24, 0x014B
 ac6:	80 93 f1 00 	sts	0x00F1, r24
 aca:	80 91 e8 00 	lds	r24, 0x00E8

static void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();

	Endpoint_Write_8(USB_Device_ConfigurationNumber);
 ace:	8e 77       	andi	r24, 0x7E	; 126
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
 ad0:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 ad4:	1a dd       	rcall	.-1484   	; 0x50a <Endpoint_ClearStatusStage>
 ad6:	1c c0       	rjmp	.+56     	; 0xb10 <__stack+0x11>
 ad8:	88 23       	and	r24, r24
 ada:	d1 f4       	brne	.+52     	; 0xb10 <__stack+0x11>
 adc:	90 91 52 01 	lds	r25, 0x0152
	Endpoint_ClearIN();

	Endpoint_ClearStatusStage();
 ae0:	92 30       	cpi	r25, 0x02	; 2
 ae2:	b0 f4       	brcc	.+44     	; 0xb10 <__stack+0x11>
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_GetConfiguration();

				break;
			case REQ_SetConfiguration:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
 ae4:	80 91 e8 00 	lds	r24, 0x00E8
}

static void USB_Device_SetConfiguration(void)
{
	#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
 ae8:	87 7f       	andi	r24, 0xF7	; 247
 aea:	80 93 e8 00 	sts	0x00E8, r24
 aee:	90 93 4b 01 	sts	0x014B, r25
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 af2:	0b dd       	rcall	.-1514   	; 0x50a <Endpoint_ClearStatusStage>
 af4:	80 91 4b 01 	lds	r24, 0x014B
 af8:	88 23       	and	r24, r24
	#endif
	#endif

	Endpoint_ClearSETUP();

	USB_Device_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
 afa:	21 f4       	brne	.+8      	; 0xb04 <__stack+0x5>
 afc:	80 91 e3 00 	lds	r24, 0x00E3

	Endpoint_ClearStatusStage();
 b00:	87 ff       	sbrs	r24, 7

	if (USB_Device_ConfigurationNumber)
 b02:	02 c0       	rjmp	.+4      	; 0xb08 <__stack+0x9>
 b04:	84 e0       	ldi	r24, 0x04	; 4
 b06:	01 c0       	rjmp	.+2      	; 0xb0a <__stack+0xb>
 b08:	81 e0       	ldi	r24, 0x01	; 1
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
 b0a:	80 93 4f 01 	sts	0x014F, r24
	  USB_DeviceState = DEVICE_STATE_Configured;
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
 b0e:	90 db       	rcall	.-2272   	; 0x230 <EVENT_USB_Device_ConfigurationChanged>
 b10:	80 91 e8 00 	lds	r24, 0x00E8
 b14:	83 ff       	sbrs	r24, 3
 b16:	0a c0       	rjmp	.+20     	; 0xb2c <__stack+0x2d>
 b18:	80 91 e8 00 	lds	r24, 0x00E8

	EVENT_USB_Device_ConfigurationChanged();
 b1c:	87 7f       	andi	r24, 0xF7	; 247
 b1e:	80 93 e8 00 	sts	0x00E8, r24
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 b22:	80 91 eb 00 	lds	r24, 0x00EB
			default:
				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
 b26:	80 62       	ori	r24, 0x20	; 32
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 b28:	80 93 eb 00 	sts	0x00EB, r24
 b2c:	ac 96       	adiw	r28, 0x2c	; 44
 b2e:	0f b6       	in	r0, 0x3f	; 63
 b30:	f8 94       	cli
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
 b32:	de bf       	out	0x3e, r29	; 62
 b34:	0f be       	out	0x3f, r0	; 63
 b36:	cd bf       	out	0x3d, r28	; 61
 b38:	df 91       	pop	r29
 b3a:	cf 91       	pop	r28
	{
		Endpoint_ClearSETUP();
		Endpoint_StallTransaction();
	}
}
 b3c:	1f 91       	pop	r17
 b3e:	08 95       	ret

00000b40 <USB_Event_Stub>:
#include "Events.h"

void USB_Event_Stub(void)
{

}
 b40:	08 95       	ret

00000b42 <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
 b42:	cf 93       	push	r28
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_DeviceTask(void)
{
	if (USB_DeviceState == DEVICE_STATE_Unattached)
 b44:	80 91 4f 01 	lds	r24, 0x014F
 b48:	88 23       	and	r24, r24
 b4a:	a9 f0       	breq	.+42     	; 0xb76 <USB_USBTask+0x34>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
 b4c:	80 91 e9 00 	lds	r24, 0x00E9
 b50:	8f 70       	andi	r24, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
 b52:	90 91 ec 00 	lds	r25, 0x00EC
 b56:	90 ff       	sbrs	r25, 0
 b58:	02 c0       	rjmp	.+4      	; 0xb5e <USB_USBTask+0x1c>
 b5a:	c0 e8       	ldi	r28, 0x80	; 128
 b5c:	01 c0       	rjmp	.+2      	; 0xb60 <USB_USBTask+0x1e>
 b5e:	c0 e0       	ldi	r28, 0x00	; 0
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
 b60:	c8 2b       	or	r28, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 b62:	10 92 e9 00 	sts	0x00E9, r1
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 b66:	80 91 e8 00 	lds	r24, 0x00E8

	uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

	if (Endpoint_IsSETUPReceived())
 b6a:	83 ff       	sbrs	r24, 3
 b6c:	01 c0       	rjmp	.+2      	; 0xb70 <USB_USBTask+0x2e>
	  USB_Device_ProcessControlRequest();
 b6e:	82 de       	rcall	.-764    	; 0x874 <USB_Device_ProcessControlRequest>
 b70:	cf 70       	andi	r28, 0x0F	; 15
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 b72:	c0 93 e9 00 	sts	0x00E9, r28
 b76:	cf 91       	pop	r28
	#elif defined(USB_CAN_BE_HOST)
		USB_HostTask();
	#elif defined(USB_CAN_BE_DEVICE)
		USB_DeviceTask();
	#endif
}
 b78:	08 95       	ret

00000b7a <CDC_Device_ProcessControlRequest>:
#define  __INCLUDE_FROM_CDC_DRIVER
#define  __INCLUDE_FROM_CDC_DEVICE_C
#include "CDCClassDevice.h"

void CDC_Device_ProcessControlRequest(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
 b7a:	cf 93       	push	r28
 b7c:	df 93       	push	r29
 b7e:	ec 01       	movw	r28, r24
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 b80:	80 91 e8 00 	lds	r24, 0x00E8
	if (!(Endpoint_IsSETUPReceived()))
 b84:	83 ff       	sbrs	r24, 3
 b86:	a3 c0       	rjmp	.+326    	; 0xcce <CDC_Device_ProcessControlRequest+0x154>
	  return;

	if (USB_ControlRequest.wIndex != CDCInterfaceInfo->Config.ControlInterfaceNumber)
 b88:	88 81       	ld	r24, Y
 b8a:	90 e0       	ldi	r25, 0x00	; 0
 b8c:	20 91 54 01 	lds	r18, 0x0154
 b90:	30 91 55 01 	lds	r19, 0x0155
 b94:	28 17       	cp	r18, r24
 b96:	39 07       	cpc	r19, r25
 b98:	09 f0       	breq	.+2      	; 0xb9c <CDC_Device_ProcessControlRequest+0x22>
 b9a:	99 c0       	rjmp	.+306    	; 0xcce <CDC_Device_ProcessControlRequest+0x154>
	  return;

	switch (USB_ControlRequest.bRequest)
 b9c:	80 91 51 01 	lds	r24, 0x0151
 ba0:	81 32       	cpi	r24, 0x21	; 33
 ba2:	69 f0       	breq	.+26     	; 0xbbe <CDC_Device_ProcessControlRequest+0x44>
 ba4:	82 32       	cpi	r24, 0x22	; 34
 ba6:	20 f4       	brcc	.+8      	; 0xbb0 <CDC_Device_ProcessControlRequest+0x36>
 ba8:	80 32       	cpi	r24, 0x20	; 32
 baa:	09 f0       	breq	.+2      	; 0xbae <CDC_Device_ProcessControlRequest+0x34>
 bac:	90 c0       	rjmp	.+288    	; 0xcce <CDC_Device_ProcessControlRequest+0x154>
 bae:	3c c0       	rjmp	.+120    	; 0xc28 <CDC_Device_ProcessControlRequest+0xae>
 bb0:	82 32       	cpi	r24, 0x22	; 34
 bb2:	09 f4       	brne	.+2      	; 0xbb6 <CDC_Device_ProcessControlRequest+0x3c>
 bb4:	6b c0       	rjmp	.+214    	; 0xc8c <CDC_Device_ProcessControlRequest+0x112>
 bb6:	83 32       	cpi	r24, 0x23	; 35
 bb8:	09 f0       	breq	.+2      	; 0xbbc <CDC_Device_ProcessControlRequest+0x42>
 bba:	89 c0       	rjmp	.+274    	; 0xcce <CDC_Device_ProcessControlRequest+0x154>
 bbc:	7a c0       	rjmp	.+244    	; 0xcb2 <CDC_Device_ProcessControlRequest+0x138>
	{
		case CDC_REQ_GetLineEncoding:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
 bbe:	80 91 50 01 	lds	r24, 0x0150
 bc2:	81 3a       	cpi	r24, 0xA1	; 161
 bc4:	09 f0       	breq	.+2      	; 0xbc8 <CDC_Device_ProcessControlRequest+0x4e>
 bc6:	83 c0       	rjmp	.+262    	; 0xcce <CDC_Device_ProcessControlRequest+0x154>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 bc8:	80 91 e8 00 	lds	r24, 0x00E8
 bcc:	87 7f       	andi	r24, 0xF7	; 247
 bce:	80 93 e8 00 	sts	0x00E8, r24
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 bd2:	80 91 e8 00 	lds	r24, 0x00E8
			{
				Endpoint_ClearSETUP();

				while (!(Endpoint_IsINReady()));
 bd6:	80 ff       	sbrs	r24, 0
 bd8:	fc cf       	rjmp	.-8      	; 0xbd2 <CDC_Device_ProcessControlRequest+0x58>

				Endpoint_Write_32_LE(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS);
 bda:	8c 89       	ldd	r24, Y+20	; 0x14
 bdc:	9d 89       	ldd	r25, Y+21	; 0x15
 bde:	ae 89       	ldd	r26, Y+22	; 0x16
 be0:	bf 89       	ldd	r27, Y+23	; 0x17
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_32_LE(const uint32_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_32_LE(const uint32_t Data)
			{
				UEDATX = (Data &  0xFF);
 be2:	80 93 f1 00 	sts	0x00F1, r24
				UEDATX = (Data >> 8);
 be6:	49 2f       	mov	r20, r25
 be8:	5a 2f       	mov	r21, r26
 bea:	6b 2f       	mov	r22, r27
 bec:	77 27       	eor	r23, r23
 bee:	40 93 f1 00 	sts	0x00F1, r20
				UEDATX = (Data >> 16);
 bf2:	ad 01       	movw	r20, r26
 bf4:	66 27       	eor	r22, r22
 bf6:	77 27       	eor	r23, r23
 bf8:	40 93 f1 00 	sts	0x00F1, r20
				UEDATX = (Data >> 24);
 bfc:	8b 2f       	mov	r24, r27
 bfe:	99 27       	eor	r25, r25
 c00:	aa 27       	eor	r26, r26
 c02:	bb 27       	eor	r27, r27
 c04:	80 93 f1 00 	sts	0x00F1, r24
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.CharFormat);
 c08:	88 8d       	ldd	r24, Y+24	; 0x18
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
 c0a:	80 93 f1 00 	sts	0x00F1, r24
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.ParityType);
 c0e:	89 8d       	ldd	r24, Y+25	; 0x19
 c10:	80 93 f1 00 	sts	0x00F1, r24
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.DataBits);
 c14:	8a 8d       	ldd	r24, Y+26	; 0x1a
 c16:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 c1a:	80 91 e8 00 	lds	r24, 0x00E8
 c1e:	8e 77       	andi	r24, 0x7E	; 126
 c20:	80 93 e8 00 	sts	0x00E8, r24

				Endpoint_ClearIN();
				Endpoint_ClearStatusStage();
 c24:	72 dc       	rcall	.-1820   	; 0x50a <Endpoint_ClearStatusStage>
 c26:	53 c0       	rjmp	.+166    	; 0xcce <CDC_Device_ProcessControlRequest+0x154>
 c28:	80 91 50 01 	lds	r24, 0x0150
			}

			break;
		case CDC_REQ_SetLineEncoding:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
 c2c:	81 32       	cpi	r24, 0x21	; 33
 c2e:	09 f0       	breq	.+2      	; 0xc32 <CDC_Device_ProcessControlRequest+0xb8>
 c30:	4e c0       	rjmp	.+156    	; 0xcce <CDC_Device_ProcessControlRequest+0x154>
 c32:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 c36:	87 7f       	andi	r24, 0xF7	; 247
 c38:	80 93 e8 00 	sts	0x00E8, r24
 c3c:	05 c0       	rjmp	.+10     	; 0xc48 <CDC_Device_ProcessControlRequest+0xce>
 c3e:	80 91 4f 01 	lds	r24, 0x014F
			{
				Endpoint_ClearSETUP();

				while (!(Endpoint_IsOUTReceived()))
				{
					if (USB_DeviceState == DEVICE_STATE_Unattached)
 c42:	88 23       	and	r24, r24
 c44:	09 f4       	brne	.+2      	; 0xc48 <CDC_Device_ProcessControlRequest+0xce>
 c46:	43 c0       	rjmp	.+134    	; 0xcce <CDC_Device_ProcessControlRequest+0x154>
 c48:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 c4c:	82 ff       	sbrs	r24, 2
		case CDC_REQ_SetLineEncoding:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
			{
				Endpoint_ClearSETUP();

				while (!(Endpoint_IsOUTReceived()))
 c4e:	f7 cf       	rjmp	.-18     	; 0xc3e <CDC_Device_ProcessControlRequest+0xc4>
 c50:	30 91 f1 00 	lds	r19, 0x00F1
				{
					uint32_t Value;
					uint8_t  Bytes[4];
				} Data;

				Data.Bytes[0] = UEDATX;
 c54:	20 91 f1 00 	lds	r18, 0x00F1
				Data.Bytes[1] = UEDATX;
 c58:	90 91 f1 00 	lds	r25, 0x00F1
				Data.Bytes[2] = UEDATX;
 c5c:	80 91 f1 00 	lds	r24, 0x00F1
				Data.Bytes[3] = UEDATX;
 c60:	3c 8b       	std	Y+20, r19	; 0x14
				{
					if (USB_DeviceState == DEVICE_STATE_Unattached)
					  return;
				}

				CDCInterfaceInfo->State.LineEncoding.BaudRateBPS = Endpoint_Read_32_LE();
 c62:	2d 8b       	std	Y+21, r18	; 0x15
 c64:	9e 8b       	std	Y+22, r25	; 0x16
 c66:	8f 8b       	std	Y+23, r24	; 0x17
 c68:	80 91 f1 00 	lds	r24, 0x00F1
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
 c6c:	88 8f       	std	Y+24, r24	; 0x18
				CDCInterfaceInfo->State.LineEncoding.CharFormat  = Endpoint_Read_8();
 c6e:	80 91 f1 00 	lds	r24, 0x00F1
 c72:	89 8f       	std	Y+25, r24	; 0x19
				CDCInterfaceInfo->State.LineEncoding.ParityType  = Endpoint_Read_8();
 c74:	80 91 f1 00 	lds	r24, 0x00F1
 c78:	8a 8f       	std	Y+26, r24	; 0x1a
				CDCInterfaceInfo->State.LineEncoding.DataBits    = Endpoint_Read_8();
 c7a:	80 91 e8 00 	lds	r24, 0x00E8
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 c7e:	8b 77       	andi	r24, 0x7B	; 123
 c80:	80 93 e8 00 	sts	0x00E8, r24
 c84:	42 dc       	rcall	.-1916   	; 0x50a <Endpoint_ClearStatusStage>

				Endpoint_ClearOUT();
				Endpoint_ClearStatusStage();
 c86:	ce 01       	movw	r24, r28
 c88:	26 d1       	rcall	.+588    	; 0xed6 <CDC_Device_Event_Stub>

				EVENT_CDC_Device_LineEncodingChanged(CDCInterfaceInfo);
 c8a:	21 c0       	rjmp	.+66     	; 0xcce <CDC_Device_ProcessControlRequest+0x154>
 c8c:	80 91 50 01 	lds	r24, 0x0150
 c90:	81 32       	cpi	r24, 0x21	; 33
			}

			break;
		case CDC_REQ_SetControlLineState:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
 c92:	e9 f4       	brne	.+58     	; 0xcce <CDC_Device_ProcessControlRequest+0x154>
 c94:	80 91 e8 00 	lds	r24, 0x00E8
 c98:	87 7f       	andi	r24, 0xF7	; 247
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 c9a:	80 93 e8 00 	sts	0x00E8, r24
 c9e:	35 dc       	rcall	.-1942   	; 0x50a <Endpoint_ClearStatusStage>
 ca0:	80 91 52 01 	lds	r24, 0x0152
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
 ca4:	90 91 53 01 	lds	r25, 0x0153

				CDCInterfaceInfo->State.ControlLineStates.HostToDevice = USB_ControlRequest.wValue;
 ca8:	99 8b       	std	Y+17, r25	; 0x11
 caa:	88 8b       	std	Y+16, r24	; 0x10
 cac:	ce 01       	movw	r24, r28
 cae:	13 d1       	rcall	.+550    	; 0xed6 <CDC_Device_Event_Stub>
 cb0:	0e c0       	rjmp	.+28     	; 0xcce <CDC_Device_ProcessControlRequest+0x154>
 cb2:	80 91 50 01 	lds	r24, 0x0150

				EVENT_CDC_Device_ControLineStateChanged(CDCInterfaceInfo);
 cb6:	81 32       	cpi	r24, 0x21	; 33
 cb8:	51 f4       	brne	.+20     	; 0xcce <CDC_Device_ProcessControlRequest+0x154>
 cba:	80 91 e8 00 	lds	r24, 0x00E8
			}

			break;
		case CDC_REQ_SendBreak:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
 cbe:	87 7f       	andi	r24, 0xF7	; 247
 cc0:	80 93 e8 00 	sts	0x00E8, r24
 cc4:	22 dc       	rcall	.-1980   	; 0x50a <Endpoint_ClearStatusStage>
 cc6:	ce 01       	movw	r24, r28
 cc8:	60 91 52 01 	lds	r22, 0x0152
 ccc:	04 d1       	rcall	.+520    	; 0xed6 <CDC_Device_Event_Stub>
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
 cce:	df 91       	pop	r29
 cd0:	cf 91       	pop	r28

				EVENT_CDC_Device_BreakSent(CDCInterfaceInfo, (uint8_t)USB_ControlRequest.wValue);
 cd2:	08 95       	ret

00000cd4 <CDC_Device_ConfigureEndpoints>:
 cd4:	cf 93       	push	r28
 cd6:	df 93       	push	r29
 cd8:	ec 01       	movw	r28, r24
 cda:	40 96       	adiw	r24, 0x10	; 16
			}

			break;
	}
}
 cdc:	fc 01       	movw	r30, r24
 cde:	8b e0       	ldi	r24, 0x0B	; 11
 ce0:	df 01       	movw	r26, r30

bool CDC_Device_ConfigureEndpoints(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
	memset(&CDCInterfaceInfo->State, 0x00, sizeof(CDCInterfaceInfo->State));
 ce2:	1d 92       	st	X+, r1
 ce4:	8a 95       	dec	r24
 ce6:	e9 f7       	brne	.-6      	; 0xce2 <CDC_Device_ConfigureEndpoints+0xe>

	CDCInterfaceInfo->Config.DataINEndpoint.Type       = EP_TYPE_BULK;
 ce8:	82 e0       	ldi	r24, 0x02	; 2
 cea:	8c 83       	std	Y+4, r24	; 0x04
	CDCInterfaceInfo->Config.DataOUTEndpoint.Type      = EP_TYPE_BULK;
 cec:	89 87       	std	Y+9, r24	; 0x09
	CDCInterfaceInfo->Config.NotificationEndpoint.Type = EP_TYPE_INTERRUPT;
 cee:	83 e0       	ldi	r24, 0x03	; 3
 cf0:	8e 87       	std	Y+14, r24	; 0x0e

	if (!(Endpoint_ConfigureEndpointTable(&CDCInterfaceInfo->Config.DataINEndpoint, 1)))
 cf2:	ce 01       	movw	r24, r28
 cf4:	01 96       	adiw	r24, 0x01	; 1
 cf6:	61 e0       	ldi	r22, 0x01	; 1
 cf8:	cc db       	rcall	.-2152   	; 0x492 <Endpoint_ConfigureEndpointTable>
 cfa:	88 23       	and	r24, r24
 cfc:	59 f0       	breq	.+22     	; 0xd14 <CDC_Device_ConfigureEndpoints+0x40>
 cfe:	ce 01       	movw	r24, r28
	  return false;

	if (!(Endpoint_ConfigureEndpointTable(&CDCInterfaceInfo->Config.DataOUTEndpoint, 1)))
 d00:	06 96       	adiw	r24, 0x06	; 6
 d02:	61 e0       	ldi	r22, 0x01	; 1
 d04:	c6 db       	rcall	.-2164   	; 0x492 <Endpoint_ConfigureEndpointTable>
 d06:	88 23       	and	r24, r24
 d08:	29 f0       	breq	.+10     	; 0xd14 <CDC_Device_ConfigureEndpoints+0x40>
 d0a:	ce 01       	movw	r24, r28
 d0c:	0b 96       	adiw	r24, 0x0b	; 11
	  return false;

	if (!(Endpoint_ConfigureEndpointTable(&CDCInterfaceInfo->Config.NotificationEndpoint, 1)))
 d0e:	61 e0       	ldi	r22, 0x01	; 1
 d10:	c0 db       	rcall	.-2176   	; 0x492 <Endpoint_ConfigureEndpointTable>
 d12:	01 c0       	rjmp	.+2      	; 0xd16 <CDC_Device_ConfigureEndpoints+0x42>
 d14:	80 e0       	ldi	r24, 0x00	; 0
 d16:	df 91       	pop	r29
 d18:	cf 91       	pop	r28

	if (!(Endpoint_ConfigureEndpointTable(&CDCInterfaceInfo->Config.DataINEndpoint, 1)))
	  return false;

	if (!(Endpoint_ConfigureEndpointTable(&CDCInterfaceInfo->Config.DataOUTEndpoint, 1)))
	  return false;
 d1a:	08 95       	ret

00000d1c <CDC_Device_SendByte>:

	if (!(Endpoint_ConfigureEndpointTable(&CDCInterfaceInfo->Config.NotificationEndpoint, 1)))
	  return false;

	return true;
}
 d1c:	cf 93       	push	r28
 d1e:	fc 01       	movw	r30, r24
 d20:	c6 2f       	mov	r28, r22
}

uint8_t CDC_Device_SendByte(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo,
                            const uint8_t Data)
{
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
 d22:	80 91 4f 01 	lds	r24, 0x014F
 d26:	84 30       	cpi	r24, 0x04	; 4
 d28:	e9 f4       	brne	.+58     	; 0xd64 <CDC_Device_SendByte+0x48>
 d2a:	44 89       	ldd	r20, Z+20	; 0x14
 d2c:	55 89       	ldd	r21, Z+21	; 0x15
 d2e:	66 89       	ldd	r22, Z+22	; 0x16
 d30:	77 89       	ldd	r23, Z+23	; 0x17
 d32:	41 15       	cp	r20, r1
 d34:	51 05       	cpc	r21, r1
 d36:	61 05       	cpc	r22, r1
 d38:	71 05       	cpc	r23, r1
 d3a:	a1 f0       	breq	.+40     	; 0xd64 <CDC_Device_SendByte+0x48>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 d3c:	81 81       	ldd	r24, Z+1	; 0x01
 d3e:	8f 70       	andi	r24, 0x0F	; 15
 d40:	80 93 e9 00 	sts	0x00E9, r24
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
 d44:	80 91 e8 00 	lds	r24, 0x00E8
	  return ENDPOINT_RWSTREAM_DeviceDisconnected;

	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataINEndpoint.Address);

	if (!(Endpoint_IsReadWriteAllowed()))
 d48:	85 fd       	sbrc	r24, 5
 d4a:	08 c0       	rjmp	.+16     	; 0xd5c <CDC_Device_SendByte+0x40>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 d4c:	80 91 e8 00 	lds	r24, 0x00E8
 d50:	8e 77       	andi	r24, 0x7E	; 126
 d52:	80 93 e8 00 	sts	0x00E8, r24
	{
		Endpoint_ClearIN();

		uint8_t ErrorCode;

		if ((ErrorCode = Endpoint_WaitUntilReady()) != ENDPOINT_READYWAIT_NoError)
 d56:	fa db       	rcall	.-2060   	; 0x54c <Endpoint_WaitUntilReady>
 d58:	88 23       	and	r24, r24
 d5a:	29 f4       	brne	.+10     	; 0xd66 <CDC_Device_SendByte+0x4a>
 d5c:	c0 93 f1 00 	sts	0x00F1, r28
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
 d60:	80 e0       	ldi	r24, 0x00	; 0
		  return ErrorCode;
	}

	Endpoint_Write_8(Data);
	return ENDPOINT_READYWAIT_NoError;
 d62:	01 c0       	rjmp	.+2      	; 0xd66 <CDC_Device_SendByte+0x4a>
 d64:	82 e0       	ldi	r24, 0x02	; 2

uint8_t CDC_Device_SendByte(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo,
                            const uint8_t Data)
{
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
	  return ENDPOINT_RWSTREAM_DeviceDisconnected;
 d66:	cf 91       	pop	r28
		  return ErrorCode;
	}

	Endpoint_Write_8(Data);
	return ENDPOINT_READYWAIT_NoError;
}
 d68:	08 95       	ret

00000d6a <CDC_Device_putchar>:
 d6a:	28 2f       	mov	r18, r24
	fdev_set_udata(Stream, CDCInterfaceInfo);
}

static int CDC_Device_putchar(char c,
                              FILE* Stream)
{
 d6c:	fb 01       	movw	r30, r22
	return CDC_Device_SendByte((USB_ClassInfo_CDC_Device_t*)fdev_get_udata(Stream), c) ? _FDEV_ERR : 0;
 d6e:	84 85       	ldd	r24, Z+12	; 0x0c
 d70:	95 85       	ldd	r25, Z+13	; 0x0d
 d72:	62 2f       	mov	r22, r18
 d74:	d3 df       	rcall	.-90     	; 0xd1c <CDC_Device_SendByte>
 d76:	88 23       	and	r24, r24
 d78:	19 f0       	breq	.+6      	; 0xd80 <CDC_Device_putchar+0x16>
 d7a:	8f ef       	ldi	r24, 0xFF	; 255
 d7c:	9f ef       	ldi	r25, 0xFF	; 255
 d7e:	08 95       	ret
 d80:	80 e0       	ldi	r24, 0x00	; 0
 d82:	90 e0       	ldi	r25, 0x00	; 0
 d84:	08 95       	ret

00000d86 <CDC_Device_Flush>:
}
 d86:	fc 01       	movw	r30, r24
	return ENDPOINT_READYWAIT_NoError;
}

uint8_t CDC_Device_Flush(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
 d88:	80 91 4f 01 	lds	r24, 0x014F
 d8c:	84 30       	cpi	r24, 0x04	; 4
 d8e:	51 f5       	brne	.+84     	; 0xde4 <CDC_Device_Flush+0x5e>
 d90:	44 89       	ldd	r20, Z+20	; 0x14
 d92:	55 89       	ldd	r21, Z+21	; 0x15
 d94:	66 89       	ldd	r22, Z+22	; 0x16
 d96:	77 89       	ldd	r23, Z+23	; 0x17
 d98:	41 15       	cp	r20, r1
 d9a:	51 05       	cpc	r21, r1
 d9c:	61 05       	cpc	r22, r1
 d9e:	71 05       	cpc	r23, r1
 da0:	09 f1       	breq	.+66     	; 0xde4 <CDC_Device_Flush+0x5e>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 da2:	81 81       	ldd	r24, Z+1	; 0x01
 da4:	8f 70       	andi	r24, 0x0F	; 15
 da6:	80 93 e9 00 	sts	0x00E9, r24
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
 daa:	90 91 f3 00 	lds	r25, 0x00F3
 dae:	80 91 f2 00 	lds	r24, 0x00F2
 db2:	39 2f       	mov	r19, r25
 db4:	20 e0       	ldi	r18, 0x00	; 0
 db6:	90 e0       	ldi	r25, 0x00	; 0
 db8:	82 2b       	or	r24, r18
 dba:	93 2b       	or	r25, r19

	uint8_t ErrorCode;

	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataINEndpoint.Address);

	if (!(Endpoint_BytesInEndpoint()))
 dbc:	00 97       	sbiw	r24, 0x00	; 0
 dbe:	a1 f0       	breq	.+40     	; 0xde8 <CDC_Device_Flush+0x62>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
 dc0:	90 91 e8 00 	lds	r25, 0x00E8
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 dc4:	80 91 e8 00 	lds	r24, 0x00E8
 dc8:	8e 77       	andi	r24, 0x7E	; 126
 dca:	80 93 e8 00 	sts	0x00E8, r24

	bool BankFull = !(Endpoint_IsReadWriteAllowed());

	Endpoint_ClearIN();

	if (BankFull)
 dce:	95 fd       	sbrc	r25, 5
 dd0:	0d c0       	rjmp	.+26     	; 0xdec <CDC_Device_Flush+0x66>
	{
		if ((ErrorCode = Endpoint_WaitUntilReady()) != ENDPOINT_READYWAIT_NoError)
 dd2:	bc db       	rcall	.-2184   	; 0x54c <Endpoint_WaitUntilReady>
 dd4:	88 23       	and	r24, r24
 dd6:	59 f4       	brne	.+22     	; 0xdee <CDC_Device_Flush+0x68>
 dd8:	90 91 e8 00 	lds	r25, 0x00E8
 ddc:	9e 77       	andi	r25, 0x7E	; 126
 dde:	90 93 e8 00 	sts	0x00E8, r25
 de2:	08 95       	ret
 de4:	82 e0       	ldi	r24, 0x02	; 2
}

uint8_t CDC_Device_Flush(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
	  return ENDPOINT_RWSTREAM_DeviceDisconnected;
 de6:	08 95       	ret
 de8:	80 e0       	ldi	r24, 0x00	; 0
	uint8_t ErrorCode;

	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataINEndpoint.Address);

	if (!(Endpoint_BytesInEndpoint()))
	  return ENDPOINT_READYWAIT_NoError;
 dea:	08 95       	ret
 dec:	80 e0       	ldi	r24, 0x00	; 0
		  return ErrorCode;

		Endpoint_ClearIN();
	}

	return ENDPOINT_READYWAIT_NoError;
 dee:	08 95       	ret

00000df0 <CDC_Device_USBTask>:
}
 df0:	20 91 4f 01 	lds	r18, 0x014F
	return true;
}

void CDC_Device_USBTask(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
 df4:	24 30       	cpi	r18, 0x04	; 4
 df6:	99 f4       	brne	.+38     	; 0xe1e <CDC_Device_USBTask+0x2e>
 df8:	fc 01       	movw	r30, r24
 dfa:	44 89       	ldd	r20, Z+20	; 0x14
 dfc:	55 89       	ldd	r21, Z+21	; 0x15
 dfe:	66 89       	ldd	r22, Z+22	; 0x16
 e00:	77 89       	ldd	r23, Z+23	; 0x17
 e02:	41 15       	cp	r20, r1
 e04:	51 05       	cpc	r21, r1
 e06:	61 05       	cpc	r22, r1
 e08:	71 05       	cpc	r23, r1
 e0a:	49 f0       	breq	.+18     	; 0xe1e <CDC_Device_USBTask+0x2e>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 e0c:	21 81       	ldd	r18, Z+1	; 0x01
 e0e:	2f 70       	andi	r18, 0x0F	; 15
 e10:	20 93 e9 00 	sts	0x00E9, r18
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 e14:	20 91 e8 00 	lds	r18, 0x00E8
	  return;

	#if !defined(NO_CLASS_DRIVER_AUTOFLUSH)
	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataINEndpoint.Address);

	if (Endpoint_IsINReady())
 e18:	20 ff       	sbrs	r18, 0
 e1a:	01 c0       	rjmp	.+2      	; 0xe1e <CDC_Device_USBTask+0x2e>
	  CDC_Device_Flush(CDCInterfaceInfo);
 e1c:	b4 cf       	rjmp	.-152    	; 0xd86 <CDC_Device_Flush>
 e1e:	08 95       	ret

00000e20 <CDC_Device_ReceiveByte>:
 e20:	fc 01       	movw	r30, r24
	}
}

int16_t CDC_Device_ReceiveByte(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
 e22:	80 91 4f 01 	lds	r24, 0x014F
 e26:	84 30       	cpi	r24, 0x04	; 4
 e28:	a1 f5       	brne	.+104    	; 0xe92 <CDC_Device_ReceiveByte+0x72>
 e2a:	44 89       	ldd	r20, Z+20	; 0x14
 e2c:	55 89       	ldd	r21, Z+21	; 0x15
 e2e:	66 89       	ldd	r22, Z+22	; 0x16
 e30:	77 89       	ldd	r23, Z+23	; 0x17
 e32:	41 15       	cp	r20, r1
 e34:	51 05       	cpc	r21, r1
 e36:	61 05       	cpc	r22, r1
 e38:	71 05       	cpc	r23, r1
 e3a:	59 f1       	breq	.+86     	; 0xe92 <CDC_Device_ReceiveByte+0x72>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 e3c:	86 81       	ldd	r24, Z+6	; 0x06
 e3e:	8f 70       	andi	r24, 0x0F	; 15
 e40:	80 93 e9 00 	sts	0x00E9, r24
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 e44:	80 91 e8 00 	lds	r24, 0x00E8

	int16_t ReceivedByte = -1;

	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataOUTEndpoint.Address);

	if (Endpoint_IsOUTReceived())
 e48:	82 ff       	sbrs	r24, 2
 e4a:	26 c0       	rjmp	.+76     	; 0xe98 <CDC_Device_ReceiveByte+0x78>
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
 e4c:	90 91 f3 00 	lds	r25, 0x00F3
 e50:	80 91 f2 00 	lds	r24, 0x00F2
 e54:	39 2f       	mov	r19, r25
 e56:	20 e0       	ldi	r18, 0x00	; 0
 e58:	90 e0       	ldi	r25, 0x00	; 0
 e5a:	82 2b       	or	r24, r18
 e5c:	93 2b       	or	r25, r19
	{
		if (Endpoint_BytesInEndpoint())
 e5e:	00 97       	sbiw	r24, 0x00	; 0
 e60:	21 f0       	breq	.+8      	; 0xe6a <CDC_Device_ReceiveByte+0x4a>
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
 e62:	80 91 f1 00 	lds	r24, 0x00F1
		  ReceivedByte = Endpoint_Read_8();
 e66:	90 e0       	ldi	r25, 0x00	; 0
 e68:	02 c0       	rjmp	.+4      	; 0xe6e <CDC_Device_ReceiveByte+0x4e>
int16_t CDC_Device_ReceiveByte(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
	  return -1;

	int16_t ReceivedByte = -1;
 e6a:	8f ef       	ldi	r24, 0xFF	; 255
 e6c:	9f ef       	ldi	r25, 0xFF	; 255
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
 e6e:	30 91 f3 00 	lds	r19, 0x00F3
 e72:	20 91 f2 00 	lds	r18, 0x00F2
 e76:	53 2f       	mov	r21, r19
 e78:	40 e0       	ldi	r20, 0x00	; 0
 e7a:	30 e0       	ldi	r19, 0x00	; 0
 e7c:	24 2b       	or	r18, r20
 e7e:	35 2b       	or	r19, r21
	if (Endpoint_IsOUTReceived())
	{
		if (Endpoint_BytesInEndpoint())
		  ReceivedByte = Endpoint_Read_8();

		if (!(Endpoint_BytesInEndpoint()))
 e80:	21 15       	cp	r18, r1
 e82:	31 05       	cpc	r19, r1
 e84:	59 f4       	brne	.+22     	; 0xe9c <CDC_Device_ReceiveByte+0x7c>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 e86:	20 91 e8 00 	lds	r18, 0x00E8
 e8a:	2b 77       	andi	r18, 0x7B	; 123
 e8c:	20 93 e8 00 	sts	0x00E8, r18
 e90:	08 95       	ret
}

int16_t CDC_Device_ReceiveByte(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
	  return -1;
 e92:	8f ef       	ldi	r24, 0xFF	; 255
 e94:	9f ef       	ldi	r25, 0xFF	; 255
 e96:	08 95       	ret

	int16_t ReceivedByte = -1;
 e98:	8f ef       	ldi	r24, 0xFF	; 255
 e9a:	9f ef       	ldi	r25, 0xFF	; 255
		if (!(Endpoint_BytesInEndpoint()))
		  Endpoint_ClearOUT();
	}

	return ReceivedByte;
}
 e9c:	08 95       	ret

00000e9e <CDC_Device_getchar>:
	return CDC_Device_SendByte((USB_ClassInfo_CDC_Device_t*)fdev_get_udata(Stream), c) ? _FDEV_ERR : 0;
}

static int CDC_Device_getchar(FILE* Stream)
{
	int16_t ReceivedByte = CDC_Device_ReceiveByte((USB_ClassInfo_CDC_Device_t*)fdev_get_udata(Stream));
 e9e:	fc 01       	movw	r30, r24
 ea0:	84 85       	ldd	r24, Z+12	; 0x0c
 ea2:	95 85       	ldd	r25, Z+13	; 0x0d
 ea4:	bd df       	rcall	.-134    	; 0xe20 <CDC_Device_ReceiveByte>
 ea6:	97 ff       	sbrs	r25, 7

	if (ReceivedByte < 0)
 ea8:	02 c0       	rjmp	.+4      	; 0xeae <CDC_Device_getchar+0x10>
 eaa:	8e ef       	ldi	r24, 0xFE	; 254
	  return _FDEV_EOF;
 eac:	9f ef       	ldi	r25, 0xFF	; 255
 eae:	08 95       	ret

00000eb0 <CDC_Device_CreateStream>:

	return ReceivedByte;
}
 eb0:	fb 01       	movw	r30, r22

#if defined(FDEV_SETUP_STREAM)
void CDC_Device_CreateStream(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo,
                             FILE* const Stream)
{
	*Stream = (FILE)FDEV_SETUP_STREAM(CDC_Device_putchar, CDC_Device_getchar, _FDEV_SETUP_RW);
 eb2:	2e e0       	ldi	r18, 0x0E	; 14
 eb4:	db 01       	movw	r26, r22
 eb6:	1d 92       	st	X+, r1
 eb8:	2a 95       	dec	r18
 eba:	e9 f7       	brne	.-6      	; 0xeb6 <CDC_Device_CreateStream+0x6>
 ebc:	23 e0       	ldi	r18, 0x03	; 3
 ebe:	23 83       	std	Z+3, r18	; 0x03
 ec0:	25 eb       	ldi	r18, 0xB5	; 181
 ec2:	36 e0       	ldi	r19, 0x06	; 6
 ec4:	31 87       	std	Z+9, r19	; 0x09
 ec6:	20 87       	std	Z+8, r18	; 0x08
 ec8:	2f e4       	ldi	r18, 0x4F	; 79
 eca:	37 e0       	ldi	r19, 0x07	; 7
 ecc:	33 87       	std	Z+11, r19	; 0x0b
 ece:	22 87       	std	Z+10, r18	; 0x0a
	fdev_set_udata(Stream, CDCInterfaceInfo);
 ed0:	95 87       	std	Z+13, r25	; 0x0d
 ed2:	84 87       	std	Z+12, r24	; 0x0c
}
 ed4:	08 95       	ret

00000ed6 <CDC_Device_Event_Stub>:
#endif

void CDC_Device_Event_Stub(void)
{

}
 ed6:	08 95       	ret

00000ed8 <fputs>:
 ed8:	ef 92       	push	r14
 eda:	ff 92       	push	r15
 edc:	0f 93       	push	r16
 ede:	1f 93       	push	r17
 ee0:	cf 93       	push	r28
 ee2:	df 93       	push	r29
 ee4:	7c 01       	movw	r14, r24
 ee6:	eb 01       	movw	r28, r22
 ee8:	8b 81       	ldd	r24, Y+3	; 0x03
 eea:	81 ff       	sbrs	r24, 1
 eec:	11 c0       	rjmp	.+34     	; 0xf10 <fputs+0x38>
 eee:	00 e0       	ldi	r16, 0x00	; 0
 ef0:	10 e0       	ldi	r17, 0x00	; 0
 ef2:	08 c0       	rjmp	.+16     	; 0xf04 <fputs+0x2c>
 ef4:	e8 85       	ldd	r30, Y+8	; 0x08
 ef6:	f9 85       	ldd	r31, Y+9	; 0x09
 ef8:	be 01       	movw	r22, r28
 efa:	09 95       	icall
 efc:	00 97       	sbiw	r24, 0x00	; 0
 efe:	11 f0       	breq	.+4      	; 0xf04 <fputs+0x2c>
 f00:	0f ef       	ldi	r16, 0xFF	; 255
 f02:	1f ef       	ldi	r17, 0xFF	; 255
 f04:	f7 01       	movw	r30, r14
 f06:	81 91       	ld	r24, Z+
 f08:	7f 01       	movw	r14, r30
 f0a:	88 23       	and	r24, r24
 f0c:	99 f7       	brne	.-26     	; 0xef4 <fputs+0x1c>
 f0e:	02 c0       	rjmp	.+4      	; 0xf14 <fputs+0x3c>
 f10:	0f ef       	ldi	r16, 0xFF	; 255
 f12:	1f ef       	ldi	r17, 0xFF	; 255
 f14:	c8 01       	movw	r24, r16
 f16:	cd b7       	in	r28, 0x3d	; 61
 f18:	de b7       	in	r29, 0x3e	; 62
 f1a:	e6 e0       	ldi	r30, 0x06	; 6
 f1c:	0c c0       	rjmp	.+24     	; 0xf36 <__epilogue_restores__+0x18>

00000f1e <__epilogue_restores__>:
 f1e:	2a 88       	ldd	r2, Y+18	; 0x12
 f20:	39 88       	ldd	r3, Y+17	; 0x11
 f22:	48 88       	ldd	r4, Y+16	; 0x10
 f24:	5f 84       	ldd	r5, Y+15	; 0x0f
 f26:	6e 84       	ldd	r6, Y+14	; 0x0e
 f28:	7d 84       	ldd	r7, Y+13	; 0x0d
 f2a:	8c 84       	ldd	r8, Y+12	; 0x0c
 f2c:	9b 84       	ldd	r9, Y+11	; 0x0b
 f2e:	aa 84       	ldd	r10, Y+10	; 0x0a
 f30:	b9 84       	ldd	r11, Y+9	; 0x09
 f32:	c8 84       	ldd	r12, Y+8	; 0x08
 f34:	df 80       	ldd	r13, Y+7	; 0x07
 f36:	ee 80       	ldd	r14, Y+6	; 0x06
 f38:	fd 80       	ldd	r15, Y+5	; 0x05
 f3a:	0c 81       	ldd	r16, Y+4	; 0x04
 f3c:	1b 81       	ldd	r17, Y+3	; 0x03
 f3e:	aa 81       	ldd	r26, Y+2	; 0x02
 f40:	b9 81       	ldd	r27, Y+1	; 0x01
 f42:	ce 0f       	add	r28, r30
 f44:	d1 1d       	adc	r29, r1
 f46:	0f b6       	in	r0, 0x3f	; 63
 f48:	f8 94       	cli
 f4a:	de bf       	out	0x3e, r29	; 62
 f4c:	0f be       	out	0x3f, r0	; 63
 f4e:	cd bf       	out	0x3d, r28	; 61
 f50:	ed 01       	movw	r28, r26
 f52:	08 95       	ret

00000f54 <_exit>:
 f54:	f8 94       	cli

00000f56 <__stop_program>:
 f56:	ff cf       	rjmp	.-2      	; 0xf56 <__stop_program>
