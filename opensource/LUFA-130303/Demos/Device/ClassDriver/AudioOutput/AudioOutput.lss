
AudioOutput.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000022  00800100  0000108e  00001122  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000108e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000d  00800122  00800122  00001144  2**0
                  ALLOC
  3 .stab         00000a98  00000000  00000000  00001144  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000002aa  00000000  00000000  00001bdc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000510  00000000  00000000  00001e88  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00008bdb  00000000  00000000  00002398  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002240  00000000  00000000  0000af73  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00003f7d  00000000  00000000  0000d1b3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000df4  00000000  00000000  00011130  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00003d20  00000000  00000000  00011f24  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00005268  00000000  00000000  00015c44  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000006b0  00000000  00000000  0001aeac  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	b0 c0       	rjmp	.+352    	; 0x162 <__ctors_end>
       2:	00 00       	nop
       4:	cc c0       	rjmp	.+408    	; 0x19e <__bad_interrupt>
       6:	00 00       	nop
       8:	ca c0       	rjmp	.+404    	; 0x19e <__bad_interrupt>
       a:	00 00       	nop
       c:	c8 c0       	rjmp	.+400    	; 0x19e <__bad_interrupt>
       e:	00 00       	nop
      10:	c6 c0       	rjmp	.+396    	; 0x19e <__bad_interrupt>
      12:	00 00       	nop
      14:	c4 c0       	rjmp	.+392    	; 0x19e <__bad_interrupt>
      16:	00 00       	nop
      18:	c2 c0       	rjmp	.+388    	; 0x19e <__bad_interrupt>
      1a:	00 00       	nop
      1c:	c0 c0       	rjmp	.+384    	; 0x19e <__bad_interrupt>
      1e:	00 00       	nop
      20:	be c0       	rjmp	.+380    	; 0x19e <__bad_interrupt>
      22:	00 00       	nop
      24:	bc c0       	rjmp	.+376    	; 0x19e <__bad_interrupt>
      26:	00 00       	nop
      28:	2d c4       	rjmp	.+2138   	; 0x884 <__vector_10>
      2a:	00 00       	nop
      2c:	b8 c0       	rjmp	.+368    	; 0x19e <__bad_interrupt>
      2e:	00 00       	nop
      30:	b6 c0       	rjmp	.+364    	; 0x19e <__bad_interrupt>
      32:	00 00       	nop
      34:	b4 c0       	rjmp	.+360    	; 0x19e <__bad_interrupt>
      36:	00 00       	nop
      38:	b2 c0       	rjmp	.+356    	; 0x19e <__bad_interrupt>
      3a:	00 00       	nop
      3c:	b0 c0       	rjmp	.+352    	; 0x19e <__bad_interrupt>
      3e:	00 00       	nop
      40:	ae c0       	rjmp	.+348    	; 0x19e <__bad_interrupt>
      42:	00 00       	nop
      44:	ac c0       	rjmp	.+344    	; 0x19e <__bad_interrupt>
      46:	00 00       	nop
      48:	aa c0       	rjmp	.+340    	; 0x19e <__bad_interrupt>
      4a:	00 00       	nop
      4c:	a8 c0       	rjmp	.+336    	; 0x19e <__bad_interrupt>
      4e:	00 00       	nop
      50:	a6 c0       	rjmp	.+332    	; 0x19e <__bad_interrupt>
      52:	00 00       	nop
      54:	cb c0       	rjmp	.+406    	; 0x1ec <__vector_21>
      56:	00 00       	nop
      58:	a2 c0       	rjmp	.+324    	; 0x19e <__bad_interrupt>
      5a:	00 00       	nop
      5c:	a0 c0       	rjmp	.+320    	; 0x19e <__bad_interrupt>
      5e:	00 00       	nop
      60:	9e c0       	rjmp	.+316    	; 0x19e <__bad_interrupt>
      62:	00 00       	nop
      64:	9c c0       	rjmp	.+312    	; 0x19e <__bad_interrupt>
      66:	00 00       	nop
      68:	9a c0       	rjmp	.+308    	; 0x19e <__bad_interrupt>
      6a:	00 00       	nop
      6c:	98 c0       	rjmp	.+304    	; 0x19e <__bad_interrupt>
      6e:	00 00       	nop
      70:	96 c0       	rjmp	.+300    	; 0x19e <__bad_interrupt>
      72:	00 00       	nop
      74:	94 c0       	rjmp	.+296    	; 0x19e <__bad_interrupt>
      76:	00 00       	nop
      78:	92 c0       	rjmp	.+292    	; 0x19e <__bad_interrupt>
      7a:	00 00       	nop
      7c:	90 c0       	rjmp	.+288    	; 0x19e <__bad_interrupt>
      7e:	00 00       	nop
      80:	8e c0       	rjmp	.+284    	; 0x19e <__bad_interrupt>
      82:	00 00       	nop
      84:	8c c0       	rjmp	.+280    	; 0x19e <__bad_interrupt>
      86:	00 00       	nop
      88:	8a c0       	rjmp	.+276    	; 0x19e <__bad_interrupt>
      8a:	00 00       	nop
      8c:	88 c0       	rjmp	.+272    	; 0x19e <__bad_interrupt>
      8e:	00 00       	nop
      90:	86 c0       	rjmp	.+268    	; 0x19e <__bad_interrupt>
      92:	00 00       	nop
      94:	84 c0       	rjmp	.+264    	; 0x19e <__bad_interrupt>
      96:	00 00       	nop

00000098 <ProductString>:
      98:	28 03 4c 00 55 00 46 00 41 00 20 00 41 00 75 00     (.L.U.F.A. .A.u.
      a8:	64 00 69 00 6f 00 20 00 4f 00 75 00 74 00 20 00     d.i.o. .O.u.t. .
      b8:	44 00 65 00 6d 00 6f 00 00 00                       D.e.m.o...

000000c2 <ManufacturerString>:
      c2:	18 03 44 00 65 00 61 00 6e 00 20 00 43 00 61 00     ..D.e.a.n. .C.a.
      d2:	6d 00 65 00 72 00 61 00 00 00                       m.e.r.a...

000000dc <LanguageString>:
      dc:	04 03 09 04                                         ....

000000e0 <ConfigurationDescriptor>:
      e0:	09 02 70 00 02 01 00 c0 32 09 04 00 00 00 01 01     ..p.....2.......
      f0:	00 00 09 24 01 00 01 1e 00 01 01 0c 24 02 01 01     ...$........$...
     100:	01 00 02 03 00 00 00 09 24 03 02 01 03 00 01 00     ........$.......
     110:	09 04 01 00 00 01 02 00 00 09 04 01 01 01 01 02     ................
     120:	00 00 07 24 01 01 01 01 00 17 24 02 01 02 02 10     ...$......$.....
     130:	05 40 1f 00 11 2b 00 22 56 00 44 ac 00 80 bb 00     .@...+."V.D.....
     140:	09 05 01 0d 00 01 01 00 00 07 25 01 01 00 00 00     ..........%.....

00000150 <DeviceDescriptor>:
     150:	12 01 00 02 00 00 00 08 eb 03 46 20 02 00 01 02     ..........F ....
     160:	00 01                                               ..

00000162 <__ctors_end>:
     162:	11 24       	eor	r1, r1
     164:	1f be       	out	0x3f, r1	; 63
     166:	cf ef       	ldi	r28, 0xFF	; 255
     168:	d0 e2       	ldi	r29, 0x20	; 32
     16a:	de bf       	out	0x3e, r29	; 62
     16c:	cd bf       	out	0x3d, r28	; 61

0000016e <__do_copy_data>:
     16e:	11 e0       	ldi	r17, 0x01	; 1
     170:	a0 e0       	ldi	r26, 0x00	; 0
     172:	b1 e0       	ldi	r27, 0x01	; 1
     174:	ee e8       	ldi	r30, 0x8E	; 142
     176:	f0 e1       	ldi	r31, 0x10	; 16
     178:	00 e0       	ldi	r16, 0x00	; 0
     17a:	0b bf       	out	0x3b, r16	; 59
     17c:	02 c0       	rjmp	.+4      	; 0x182 <__do_copy_data+0x14>
     17e:	07 90       	elpm	r0, Z+
     180:	0d 92       	st	X+, r0
     182:	a2 32       	cpi	r26, 0x22	; 34
     184:	b1 07       	cpc	r27, r17
     186:	d9 f7       	brne	.-10     	; 0x17e <__do_copy_data+0x10>
     188:	1b be       	out	0x3b, r1	; 59

0000018a <__do_clear_bss>:
     18a:	11 e0       	ldi	r17, 0x01	; 1
     18c:	a2 e2       	ldi	r26, 0x22	; 34
     18e:	b1 e0       	ldi	r27, 0x01	; 1
     190:	01 c0       	rjmp	.+2      	; 0x194 <.do_clear_bss_start>

00000192 <.do_clear_bss_loop>:
     192:	1d 92       	st	X+, r1

00000194 <.do_clear_bss_start>:
     194:	af 32       	cpi	r26, 0x2F	; 47
     196:	b1 07       	cpc	r27, r17
     198:	e1 f7       	brne	.-8      	; 0x192 <.do_clear_bss_loop>
     19a:	22 d0       	rcall	.+68     	; 0x1e0 <main>
     19c:	76 c7       	rjmp	.+3820   	; 0x108a <_exit>

0000019e <__bad_interrupt>:
     19e:	30 cf       	rjmp	.-416    	; 0x0 <__vectors>

000001a0 <LEDs_SetAllLEDs>:
				PORTD &= ~LEDMask;
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
			{
				PORTD = ((PORTD & ~LEDS_ALL_LEDS) | LEDMask);
     1a0:	9b b1       	in	r25, 0x0b	; 11
     1a2:	9f 70       	andi	r25, 0x0F	; 15
     1a4:	98 2b       	or	r25, r24
     1a6:	9b b9       	out	0x0b, r25	; 11
			}
     1a8:	08 95       	ret

000001aa <SetupHardware>:

/** Configures the board hardware and chip peripherals for the demo's functionality. */
void SetupHardware(void)
{
	/* Disable watchdog if enabled by bootloader/fuses */
	MCUSR &= ~(1 << WDRF);
     1aa:	84 b7       	in	r24, 0x34	; 52
     1ac:	87 7f       	andi	r24, 0xF7	; 247
     1ae:	84 bf       	out	0x34, r24	; 52
	wdt_disable();
     1b0:	88 e1       	ldi	r24, 0x18	; 24
     1b2:	0f b6       	in	r0, 0x3f	; 63
     1b4:	f8 94       	cli
     1b6:	80 93 60 00 	sts	0x0060, r24
     1ba:	10 92 60 00 	sts	0x0060, r1
     1be:	0f be       	out	0x3f, r0	; 63
The type of x is clock_div_t.
*/
void clock_prescale_set(clock_div_t __x)
{
    uint8_t __tmp = _BV(CLKPCE);
    __asm__ __volatile__ (
     1c0:	90 e0       	ldi	r25, 0x00	; 0
     1c2:	80 e8       	ldi	r24, 0x80	; 128
     1c4:	0f b6       	in	r0, 0x3f	; 63
     1c6:	f8 94       	cli
     1c8:	80 93 61 00 	sts	0x0061, r24
     1cc:	90 93 61 00 	sts	0x0061, r25
     1d0:	0f be       	out	0x3f, r0	; 63

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void LEDs_Init(void)
			{
				DDRD  |=  LEDS_ALL_LEDS;
     1d2:	8a b1       	in	r24, 0x0a	; 10
     1d4:	80 6f       	ori	r24, 0xF0	; 240
     1d6:	8a b9       	out	0x0a, r24	; 10
				PORTD &= ~LEDS_ALL_LEDS;
     1d8:	8b b1       	in	r24, 0x0b	; 11
     1da:	8f 70       	andi	r24, 0x0F	; 15
     1dc:	8b b9       	out	0x0b, r24	; 11
	/* Disable clock division */
	clock_prescale_set(clock_div_1);

	/* Hardware Initialization */
	LEDs_Init();
	USB_Init();
     1de:	37 c3       	rjmp	.+1646   	; 0x84e <USB_Init>

000001e0 <main>:
     1e0:	e4 df       	rcall	.-56     	; 0x1aa <SetupHardware>
}
     1e2:	80 e1       	ldi	r24, 0x10	; 16
 */
int main(void)
{
	SetupHardware();

	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
     1e4:	dd df       	rcall	.-70     	; 0x1a0 <LEDs_SetAllLEDs>
     1e6:	78 94       	sei
     1e8:	7c d5       	rcall	.+2808   	; 0xce2 <USB_USBTask>
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				sei();
     1ea:	fe cf       	rjmp	.-4      	; 0x1e8 <main+0x8>

000001ec <__vector_21>:
	GlobalInterruptEnable();

	for (;;)
	{
		Audio_Device_USBTask(&Speaker_Audio_Interface);
		USB_USBTask();
     1ec:	1f 92       	push	r1
     1ee:	0f 92       	push	r0
     1f0:	0f b6       	in	r0, 0x3f	; 63
	USB_Init();
}

/** ISR to handle the reloading of the PWM timer with the next sample. */
ISR(TIMER0_COMPA_vect, ISR_BLOCK)
{
     1f2:	0f 92       	push	r0
     1f4:	0b b6       	in	r0, 0x3b	; 59
     1f6:	0f 92       	push	r0
     1f8:	11 24       	eor	r1, r1
     1fa:	2f 93       	push	r18
     1fc:	3f 93       	push	r19
     1fe:	4f 93       	push	r20
     200:	5f 93       	push	r21
     202:	6f 93       	push	r22
     204:	7f 93       	push	r23
     206:	8f 93       	push	r24
     208:	9f 93       	push	r25
     20a:	af 93       	push	r26
     20c:	bf 93       	push	r27
     20e:	cf 93       	push	r28
     210:	ef 93       	push	r30
     212:	ff 93       	push	r31
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
     214:	80 91 e9 00 	lds	r24, 0x00E9
     218:	8f 70       	andi	r24, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
     21a:	90 91 ec 00 	lds	r25, 0x00EC
     21e:	90 ff       	sbrs	r25, 0
     220:	02 c0       	rjmp	.+4      	; 0x226 <__vector_21+0x3a>
     222:	c0 e8       	ldi	r28, 0x80	; 128
     224:	01 c0       	rjmp	.+2      	; 0x228 <__vector_21+0x3c>
     226:	c0 e0       	ldi	r28, 0x00	; 0
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
     228:	c8 2b       	or	r28, r24
			 */
			static inline bool Audio_Device_IsSampleReceived(USB_ClassInfo_Audio_Device_t* const AudioInterfaceInfo)
			                                                 ATTR_NON_NULL_PTR_ARG(1) ATTR_ALWAYS_INLINE;
			static inline bool Audio_Device_IsSampleReceived(USB_ClassInfo_Audio_Device_t* const AudioInterfaceInfo)
			{
				if ((USB_DeviceState != DEVICE_STATE_Configured) || !(AudioInterfaceInfo->State.InterfaceEnabled))
     22a:	80 91 26 01 	lds	r24, 0x0126
     22e:	84 30       	cpi	r24, 0x04	; 4
     230:	09 f0       	breq	.+2      	; 0x234 <__vector_21+0x48>
     232:	5b c0       	rjmp	.+182    	; 0x2ea <__vector_21+0xfe>
     234:	80 91 0c 01 	lds	r24, 0x010C
     238:	88 23       	and	r24, r24
     23a:	09 f4       	brne	.+2      	; 0x23e <__vector_21+0x52>
     23c:	56 c0       	rjmp	.+172    	; 0x2ea <__vector_21+0xfe>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     23e:	80 91 07 01 	lds	r24, 0x0107
     242:	8f 70       	andi	r24, 0x0F	; 15
     244:	80 93 e9 00 	sts	0x00E9, r24
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     248:	80 91 e8 00 	lds	r24, 0x00E8
	uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();

	/* Check that the USB bus is ready for the next sample to read */
	if (Audio_Device_IsSampleReceived(&Speaker_Audio_Interface))
     24c:	82 ff       	sbrs	r24, 2
     24e:	4d c0       	rjmp	.+154    	; 0x2ea <__vector_21+0xfe>
				{
					uint16_t Value;
					uint8_t  Bytes[2];
				} Data;

				Data.Bytes[0] = UEDATX;
     250:	30 91 f1 00 	lds	r19, 0x00F1
				Data.Bytes[1] = UEDATX;
     254:	80 91 f1 00 	lds	r24, 0x00F1
			{
				int16_t Sample;

				(void)AudioInterfaceInfo;

				Sample = (int16_t)Endpoint_Read_16_LE();
     258:	28 2f       	mov	r18, r24
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
     25a:	80 91 f2 00 	lds	r24, 0x00F2
     25e:	90 91 f3 00 	lds	r25, 0x00F3

				if (!(Endpoint_BytesInEndpoint()))
     262:	00 97       	sbiw	r24, 0x00	; 0
     264:	29 f4       	brne	.+10     	; 0x270 <__vector_21+0x84>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     266:	80 91 e8 00 	lds	r24, 0x00E8
     26a:	8b 77       	andi	r24, 0x7B	; 123
     26c:	80 93 e8 00 	sts	0x00E8, r24
				{
					uint16_t Value;
					uint8_t  Bytes[2];
				} Data;

				Data.Bytes[0] = UEDATX;
     270:	30 91 f1 00 	lds	r19, 0x00F1
				Data.Bytes[1] = UEDATX;
     274:	80 91 f1 00 	lds	r24, 0x00F1
			{
				int16_t Sample;

				(void)AudioInterfaceInfo;

				Sample = (int16_t)Endpoint_Read_16_LE();
     278:	48 2f       	mov	r20, r24
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
     27a:	60 91 f2 00 	lds	r22, 0x00F2
     27e:	70 91 f3 00 	lds	r23, 0x00F3

				if (!(Endpoint_BytesInEndpoint()))
     282:	61 15       	cp	r22, r1
     284:	71 05       	cpc	r23, r1
     286:	29 f4       	brne	.+10     	; 0x292 <__vector_21+0xa6>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     288:	90 91 e8 00 	lds	r25, 0x00E8
     28c:	9b 77       	andi	r25, 0x7B	; 123
     28e:	90 93 e8 00 	sts	0x00E8, r25
		/* Retrieve the signed 16-bit left and right audio samples, convert to 8-bit */
		int8_t LeftSample_8Bit  = (Audio_Device_ReadSample16(&Speaker_Audio_Interface) >> 8);
		int8_t RightSample_8Bit = (Audio_Device_ReadSample16(&Speaker_Audio_Interface) >> 8);

		/* Mix the two channels together to produce a mono, 8-bit sample */
		int8_t MixedSample_8Bit = (((int16_t)LeftSample_8Bit + (int16_t)RightSample_8Bit) >> 1);
     292:	33 27       	eor	r19, r19
     294:	27 fd       	sbrc	r18, 7
     296:	30 95       	com	r19
     298:	55 27       	eor	r21, r21
     29a:	47 fd       	sbrc	r20, 7
     29c:	50 95       	com	r21
     29e:	c9 01       	movw	r24, r18
     2a0:	84 0f       	add	r24, r20
     2a2:	95 1f       	adc	r25, r21
     2a4:	95 95       	asr	r25
     2a6:	87 95       	ror	r24
     2a8:	68 2f       	mov	r22, r24
		#if defined(AUDIO_OUT_MONO)
		/* Load the sample into the PWM timer channel */
		OCR3A = (MixedSample_8Bit ^ (1 << 7));
		#elif defined(AUDIO_OUT_STEREO)
		/* Load the dual 8-bit samples into the PWM timer channels */
		OCR3A = (LeftSample_8Bit  ^ (1 << 7));
     2aa:	80 e8       	ldi	r24, 0x80	; 128
     2ac:	90 e0       	ldi	r25, 0x00	; 0
     2ae:	28 27       	eor	r18, r24
     2b0:	39 27       	eor	r19, r25
     2b2:	30 93 99 00 	sts	0x0099, r19
     2b6:	20 93 98 00 	sts	0x0098, r18
		OCR3B = (RightSample_8Bit ^ (1 << 7));
     2ba:	48 27       	eor	r20, r24
     2bc:	59 27       	eor	r21, r25
     2be:	50 93 9b 00 	sts	0x009B, r21
     2c2:	40 93 9a 00 	sts	0x009A, r20
		#endif

		uint8_t LEDMask = LEDS_NO_LEDS;

		/* Turn on LEDs as the sample amplitude increases */
		if (MixedSample_8Bit > 16)
     2c6:	61 31       	cpi	r22, 0x11	; 17
     2c8:	44 f4       	brge	.+16     	; 0x2da <__vector_21+0xee>
		  LEDMask = (LEDS_LED1 | LEDS_LED2 | LEDS_LED3 | LEDS_LED4);
		else if (MixedSample_8Bit > 8)
     2ca:	69 30       	cpi	r22, 0x09	; 9
     2cc:	44 f4       	brge	.+16     	; 0x2de <__vector_21+0xf2>
		  LEDMask = (LEDS_LED1 | LEDS_LED2 | LEDS_LED3);
		else if (MixedSample_8Bit > 4)
     2ce:	65 30       	cpi	r22, 0x05	; 5
     2d0:	44 f4       	brge	.+16     	; 0x2e2 <__vector_21+0xf6>
		  LEDMask = (LEDS_LED1 | LEDS_LED2);
		else if (MixedSample_8Bit > 2)
     2d2:	63 30       	cpi	r22, 0x03	; 3
     2d4:	44 f4       	brge	.+16     	; 0x2e6 <__vector_21+0xfa>
		#elif defined(AUDIO_OUT_PORTC)
		/* Load the 8-bit mixed sample into PORTC */
		PORTC = MixedSample_8Bit;
		#endif

		uint8_t LEDMask = LEDS_NO_LEDS;
     2d6:	80 e0       	ldi	r24, 0x00	; 0
     2d8:	07 c0       	rjmp	.+14     	; 0x2e8 <__vector_21+0xfc>

		/* Turn on LEDs as the sample amplitude increases */
		if (MixedSample_8Bit > 16)
		  LEDMask = (LEDS_LED1 | LEDS_LED2 | LEDS_LED3 | LEDS_LED4);
     2da:	80 ef       	ldi	r24, 0xF0	; 240
     2dc:	05 c0       	rjmp	.+10     	; 0x2e8 <__vector_21+0xfc>
		else if (MixedSample_8Bit > 8)
		  LEDMask = (LEDS_LED1 | LEDS_LED2 | LEDS_LED3);
     2de:	80 eb       	ldi	r24, 0xB0	; 176
     2e0:	03 c0       	rjmp	.+6      	; 0x2e8 <__vector_21+0xfc>
		else if (MixedSample_8Bit > 4)
		  LEDMask = (LEDS_LED1 | LEDS_LED2);
     2e2:	80 e3       	ldi	r24, 0x30	; 48
     2e4:	01 c0       	rjmp	.+2      	; 0x2e8 <__vector_21+0xfc>
		else if (MixedSample_8Bit > 2)
		  LEDMask = (LEDS_LED1);
     2e6:	80 e1       	ldi	r24, 0x10	; 16

		LEDs_SetAllLEDs(LEDMask);
     2e8:	5b df       	rcall	.-330    	; 0x1a0 <LEDs_SetAllLEDs>
     2ea:	cf 70       	andi	r28, 0x0F	; 15
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     2ec:	c0 93 e9 00 	sts	0x00E9, r28
     2f0:	ff 91       	pop	r31
	}

	Endpoint_SelectEndpoint(PrevEndpoint);
}
     2f2:	ef 91       	pop	r30
     2f4:	cf 91       	pop	r28
     2f6:	bf 91       	pop	r27
     2f8:	af 91       	pop	r26
     2fa:	9f 91       	pop	r25
     2fc:	8f 91       	pop	r24
     2fe:	7f 91       	pop	r23
     300:	6f 91       	pop	r22
     302:	5f 91       	pop	r21
     304:	4f 91       	pop	r20
     306:	3f 91       	pop	r19
     308:	2f 91       	pop	r18
     30a:	0f 90       	pop	r0
     30c:	0b be       	out	0x3b, r0	; 59
     30e:	0f 90       	pop	r0
     310:	0f be       	out	0x3f, r0	; 63
     312:	0f 90       	pop	r0
     314:	1f 90       	pop	r1
     316:	18 95       	reti

00000318 <EVENT_USB_Device_Connect>:
     318:	cf 93       	push	r28

/** Event handler for the library USB Connection event. */
void EVENT_USB_Device_Connect(void)
{
	LEDs_SetAllLEDs(LEDMASK_USB_ENUMERATING);
     31a:	80 ea       	ldi	r24, 0xA0	; 160
     31c:	41 df       	rcall	.-382    	; 0x1a0 <LEDs_SetAllLEDs>
     31e:	c2 e0       	ldi	r28, 0x02	; 2

	/* Sample reload timer initialization */
	TIMSK0  = (1 << OCIE0A);
     320:	c0 93 6e 00 	sts	0x006E, r28
     324:	20 91 0d 01 	lds	r18, 0x010D
	OCR0A   = ((F_CPU / 8 / CurrentAudioSampleFrequency) - 1);
     328:	30 91 0e 01 	lds	r19, 0x010E
     32c:	40 91 0f 01 	lds	r20, 0x010F
     330:	50 91 10 01 	lds	r21, 0x0110
     334:	60 e4       	ldi	r22, 0x40	; 64
     336:	72 e4       	ldi	r23, 0x42	; 66
     338:	8f e0       	ldi	r24, 0x0F	; 15
     33a:	90 e0       	ldi	r25, 0x00	; 0
     33c:	84 d6       	rcall	.+3336   	; 0x1046 <__udivmodsi4>
     33e:	21 50       	subi	r18, 0x01	; 1
     340:	27 bd       	out	0x27, r18	; 39
     342:	c4 bd       	out	0x24, r28	; 36
     344:	c5 bd       	out	0x25, r28	; 37
	TCCR0A  = (1 << WGM01);  // CTC mode
     346:	87 b1       	in	r24, 0x07	; 7
	TCCR0B  = (1 << CS01);   // Fcpu/8 speed
     348:	80 66       	ori	r24, 0x60	; 96
	#if defined(AUDIO_OUT_MONO)
	/* Set speaker as output */
	DDRC   |= (1 << 6);
	#elif defined(AUDIO_OUT_STEREO)
	/* Set speakers as outputs */
	DDRC   |= ((1 << 6) | (1 << 5));
     34a:	87 b9       	out	0x07, r24	; 7
     34c:	81 ef       	ldi	r24, 0xF1	; 241
     34e:	80 93 90 00 	sts	0x0090, r24
	DDRC   |= 0xFF;
	#endif

	#if (defined(AUDIO_OUT_MONO) || defined(AUDIO_OUT_STEREO))
	/* PWM speaker timer initialization */
	TCCR3A  = ((1 << WGM30) | (1 << COM3A1) | (1 << COM3A0)
     352:	89 e0       	ldi	r24, 0x09	; 9
     354:	80 93 91 00 	sts	0x0091, r24
	        | (1 << COM3B1) | (1 << COM3B0)); // Set on match, clear on TOP
	TCCR3B  = ((1 << WGM32) | (1 << CS30));  // Fast 8-Bit PWM, F_CPU speed
     358:	cf 91       	pop	r28
     35a:	08 95       	ret

0000035c <EVENT_USB_Device_Disconnect>:
	#endif
}
     35c:	80 e1       	ldi	r24, 0x10	; 16
     35e:	20 df       	rcall	.-448    	; 0x1a0 <LEDs_SetAllLEDs>

/** Event handler for the library USB Disconnection event. */
void EVENT_USB_Device_Disconnect(void)
{
	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
     360:	15 bc       	out	0x25, r1	; 37

	/* Stop the sample reload timer */
	TCCR0B = 0;
     362:	10 92 91 00 	sts	0x0091, r1

	#if (defined(AUDIO_OUT_MONO) || defined(AUDIO_OUT_STEREO))
	/* Stop the PWM generation timer */
	TCCR3B = 0;
     366:	87 b1       	in	r24, 0x07	; 7
	#if defined(AUDIO_OUT_MONO)
	/* Set speaker as input to reduce current draw */
	DDRC  &= ~(1 << 6);
	#elif defined(AUDIO_OUT_STEREO)
	/* Set speakers as inputs to reduce current draw */
	DDRC  &= ~((1 << 6) | (1 << 5));
     368:	8f 79       	andi	r24, 0x9F	; 159
     36a:	87 b9       	out	0x07, r24	; 7
     36c:	08 95       	ret

0000036e <EVENT_USB_Device_ConfigurationChanged>:
	#elif defined(AUDIO_OUT_PORTC)
	/* Set PORTC low */
	PORTC = 0x00;
	#endif
}
     36e:	80 e0       	ldi	r24, 0x00	; 0
/** Event handler for the library USB Configuration Changed event. */
void EVENT_USB_Device_ConfigurationChanged(void)
{
	bool ConfigSuccess = true;

	ConfigSuccess &= Audio_Device_ConfigureEndpoints(&Speaker_Audio_Interface);
     370:	91 e0       	ldi	r25, 0x01	; 1
     372:	52 d6       	rcall	.+3236   	; 0x1018 <Audio_Device_ConfigureEndpoints>
     374:	88 23       	and	r24, r24

	LEDs_SetAllLEDs(ConfigSuccess ? LEDMASK_USB_READY : LEDMASK_USB_ERROR);
     376:	11 f0       	breq	.+4      	; 0x37c <EVENT_USB_Device_ConfigurationChanged+0xe>
     378:	80 e6       	ldi	r24, 0x60	; 96
     37a:	01 c0       	rjmp	.+2      	; 0x37e <EVENT_USB_Device_ConfigurationChanged+0x10>
     37c:	80 e9       	ldi	r24, 0x90	; 144
     37e:	10 cf       	rjmp	.-480    	; 0x1a0 <LEDs_SetAllLEDs>

00000380 <EVENT_USB_Device_ControlRequest>:
     380:	80 e0       	ldi	r24, 0x00	; 0
     382:	91 e0       	ldi	r25, 0x01	; 1
}
     384:	ca c4       	rjmp	.+2452   	; 0xd1a <Audio_Device_ProcessControlRequest>

00000386 <CALLBACK_Audio_Device_GetSetEndpointProperty>:

/** Event handler for the library USB Control Request reception event. */
void EVENT_USB_Device_ControlRequest(void)
{
	Audio_Device_ProcessControlRequest(&Speaker_Audio_Interface);
     386:	ef 92       	push	r14
}
     388:	ff 92       	push	r15
                                                  const uint8_t EndpointProperty,
                                                  const uint8_t EndpointAddress,
                                                  const uint8_t EndpointControl,
                                                  uint16_t* const DataLength,
                                                  uint8_t* Data)
{
     38a:	0f 93       	push	r16
     38c:	1f 93       	push	r17
     38e:	d8 01       	movw	r26, r16
     390:	f7 01       	movw	r30, r14
	/* Check the requested endpoint to see if a supported endpoint is being manipulated */
	if (EndpointAddress == Speaker_Audio_Interface.Config.DataOUTEndpoint.Address)
     392:	80 91 07 01 	lds	r24, 0x0107
     396:	48 17       	cp	r20, r24
     398:	09 f0       	breq	.+2      	; 0x39c <CALLBACK_Audio_Device_GetSetEndpointProperty+0x16>
     39a:	4a c0       	rjmp	.+148    	; 0x430 <CALLBACK_Audio_Device_GetSetEndpointProperty+0xaa>
	{
		/* Check the requested control to see if a supported control is being manipulated */
		if (EndpointControl == AUDIO_EPCONTROL_SamplingFreq)
     39c:	21 30       	cpi	r18, 0x01	; 1
     39e:	09 f0       	breq	.+2      	; 0x3a2 <CALLBACK_Audio_Device_GetSetEndpointProperty+0x1c>
     3a0:	47 c0       	rjmp	.+142    	; 0x430 <CALLBACK_Audio_Device_GetSetEndpointProperty+0xaa>
		{
			switch (EndpointProperty)
     3a2:	61 30       	cpi	r22, 0x01	; 1
     3a4:	21 f0       	breq	.+8      	; 0x3ae <CALLBACK_Audio_Device_GetSetEndpointProperty+0x28>
     3a6:	61 38       	cpi	r22, 0x81	; 129
     3a8:	09 f0       	breq	.+2      	; 0x3ac <CALLBACK_Audio_Device_GetSetEndpointProperty+0x26>
     3aa:	42 c0       	rjmp	.+132    	; 0x430 <CALLBACK_Audio_Device_GetSetEndpointProperty+0xaa>
     3ac:	30 c0       	rjmp	.+96     	; 0x40e <CALLBACK_Audio_Device_GetSetEndpointProperty+0x88>
			{
				case AUDIO_REQ_SetCurrent:
					/* Check if we are just testing for a valid property, or actually adjusting it */
					if (DataLength != NULL)
     3ae:	10 97       	sbiw	r26, 0x00	; 0
     3b0:	09 f4       	brne	.+2      	; 0x3b4 <CALLBACK_Audio_Device_GetSetEndpointProperty+0x2e>
     3b2:	40 c0       	rjmp	.+128    	; 0x434 <CALLBACK_Audio_Device_GetSetEndpointProperty+0xae>
					{
						/* Set the new sampling frequency to the value given by the host */
						CurrentAudioSampleFrequency = (((uint32_t)Data[2] << 16) | ((uint32_t)Data[1] << 8) | (uint32_t)Data[0]);
     3b4:	02 81       	ldd	r16, Z+2	; 0x02
     3b6:	10 e0       	ldi	r17, 0x00	; 0
     3b8:	20 e0       	ldi	r18, 0x00	; 0
     3ba:	30 e0       	ldi	r19, 0x00	; 0
     3bc:	98 01       	movw	r18, r16
     3be:	11 27       	eor	r17, r17
     3c0:	00 27       	eor	r16, r16
     3c2:	81 81       	ldd	r24, Z+1	; 0x01
     3c4:	90 e0       	ldi	r25, 0x00	; 0
     3c6:	a0 e0       	ldi	r26, 0x00	; 0
     3c8:	b0 e0       	ldi	r27, 0x00	; 0
     3ca:	ba 2f       	mov	r27, r26
     3cc:	a9 2f       	mov	r26, r25
     3ce:	98 2f       	mov	r25, r24
     3d0:	88 27       	eor	r24, r24
     3d2:	08 2b       	or	r16, r24
     3d4:	19 2b       	or	r17, r25
     3d6:	2a 2b       	or	r18, r26
     3d8:	3b 2b       	or	r19, r27
     3da:	80 81       	ld	r24, Z
     3dc:	90 e0       	ldi	r25, 0x00	; 0
     3de:	a0 e0       	ldi	r26, 0x00	; 0
     3e0:	b0 e0       	ldi	r27, 0x00	; 0
     3e2:	08 2b       	or	r16, r24
     3e4:	19 2b       	or	r17, r25
     3e6:	2a 2b       	or	r18, r26
     3e8:	3b 2b       	or	r19, r27
     3ea:	00 93 0d 01 	sts	0x010D, r16
     3ee:	10 93 0e 01 	sts	0x010E, r17
     3f2:	20 93 0f 01 	sts	0x010F, r18
     3f6:	30 93 10 01 	sts	0x0110, r19

						/* Adjust sample reload timer to the new frequency */
						OCR0A = ((F_CPU / 8 / CurrentAudioSampleFrequency) - 1);
     3fa:	60 e4       	ldi	r22, 0x40	; 64
     3fc:	72 e4       	ldi	r23, 0x42	; 66
     3fe:	8f e0       	ldi	r24, 0x0F	; 15
     400:	90 e0       	ldi	r25, 0x00	; 0
     402:	a9 01       	movw	r20, r18
     404:	98 01       	movw	r18, r16
     406:	1f d6       	rcall	.+3134   	; 0x1046 <__udivmodsi4>
     408:	21 50       	subi	r18, 0x01	; 1
     40a:	27 bd       	out	0x27, r18	; 39
     40c:	13 c0       	rjmp	.+38     	; 0x434 <CALLBACK_Audio_Device_GetSetEndpointProperty+0xae>
     40e:	10 97       	sbiw	r26, 0x00	; 0
					}

					return true;
				case AUDIO_REQ_GetCurrent:
					/* Check if we are just testing for a valid property, or actually reading it */
					if (DataLength != NULL)
     410:	89 f0       	breq	.+34     	; 0x434 <CALLBACK_Audio_Device_GetSetEndpointProperty+0xae>
     412:	83 e0       	ldi	r24, 0x03	; 3
					{
						*DataLength = 3;
     414:	90 e0       	ldi	r25, 0x00	; 0
     416:	11 96       	adiw	r26, 0x01	; 1
     418:	9c 93       	st	X, r25
     41a:	8e 93       	st	-X, r24
     41c:	80 91 0d 01 	lds	r24, 0x010D

						Data[2] = (CurrentAudioSampleFrequency >> 16);
     420:	90 91 0e 01 	lds	r25, 0x010E
     424:	20 91 0f 01 	lds	r18, 0x010F
     428:	22 83       	std	Z+2, r18	; 0x02
     42a:	91 83       	std	Z+1, r25	; 0x01
						Data[1] = (CurrentAudioSampleFrequency >> 8);
     42c:	80 83       	st	Z, r24
						Data[0] = (CurrentAudioSampleFrequency &  0xFF);
     42e:	02 c0       	rjmp	.+4      	; 0x434 <CALLBACK_Audio_Device_GetSetEndpointProperty+0xae>
     430:	80 e0       	ldi	r24, 0x00	; 0
					return true;
			}
		}
	}

	return false;
     432:	01 c0       	rjmp	.+2      	; 0x436 <CALLBACK_Audio_Device_GetSetEndpointProperty+0xb0>
     434:	81 e0       	ldi	r24, 0x01	; 1
						Data[2] = (CurrentAudioSampleFrequency >> 16);
						Data[1] = (CurrentAudioSampleFrequency >> 8);
						Data[0] = (CurrentAudioSampleFrequency &  0xFF);
					}

					return true;
     436:	1f 91       	pop	r17
			}
		}
	}

	return false;
}
     438:	0f 91       	pop	r16
     43a:	ff 90       	pop	r15
     43c:	ef 90       	pop	r14
     43e:	08 95       	ret

00000440 <CALLBACK_Audio_Device_GetSetInterfaceProperty>:
     440:	80 e0       	ldi	r24, 0x00	; 0
                                                   uint16_t* const DataLength,
                                                   uint8_t* Data) 
{
	/* No audio interface entities in the device descriptor, thus no properties to get or set. */
	return false;
}
     442:	08 95       	ret

00000444 <CALLBACK_USB_GetDescriptor>:
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
     444:	92 30       	cpi	r25, 0x02	; 2
     446:	29 f0       	breq	.+10     	; 0x452 <CALLBACK_USB_GetDescriptor+0xe>
     448:	93 30       	cpi	r25, 0x03	; 3
     44a:	41 f0       	breq	.+16     	; 0x45c <CALLBACK_USB_GetDescriptor+0x18>
     44c:	91 30       	cpi	r25, 0x01	; 1
     44e:	e9 f4       	brne	.+58     	; 0x48a <CALLBACK_USB_GetDescriptor+0x46>
     450:	17 c0       	rjmp	.+46     	; 0x480 <CALLBACK_USB_GetDescriptor+0x3c>
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
			Size    = sizeof(USB_Descriptor_Configuration_t);
     452:	80 e7       	ldi	r24, 0x70	; 112
     454:	90 e0       	ldi	r25, 0x00	; 0
		case DTYPE_Device:
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
     456:	e0 ee       	ldi	r30, 0xE0	; 224
     458:	f0 e0       	ldi	r31, 0x00	; 0
			Size    = sizeof(USB_Descriptor_Configuration_t);
			break;
     45a:	1b c0       	rjmp	.+54     	; 0x492 <CALLBACK_USB_GetDescriptor+0x4e>
		case DTYPE_String:
			switch (DescriptorNumber)
     45c:	81 30       	cpi	r24, 0x01	; 1
     45e:	41 f0       	breq	.+16     	; 0x470 <CALLBACK_USB_GetDescriptor+0x2c>
     460:	81 30       	cpi	r24, 0x01	; 1
     462:	18 f0       	brcs	.+6      	; 0x46a <CALLBACK_USB_GetDescriptor+0x26>
     464:	82 30       	cpi	r24, 0x02	; 2
     466:	89 f4       	brne	.+34     	; 0x48a <CALLBACK_USB_GetDescriptor+0x46>
     468:	06 c0       	rjmp	.+12     	; 0x476 <CALLBACK_USB_GetDescriptor+0x32>
			{
				case 0x00:
					Address = &LanguageString;
					Size    = pgm_read_byte(&LanguageString.Header.Size);
     46a:	ec ed       	ldi	r30, 0xDC	; 220
     46c:	f0 e0       	ldi	r31, 0x00	; 0
     46e:	05 c0       	rjmp	.+10     	; 0x47a <CALLBACK_USB_GetDescriptor+0x36>
					break;
				case 0x01:
					Address = &ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
     470:	e2 ec       	ldi	r30, 0xC2	; 194
     472:	f0 e0       	ldi	r31, 0x00	; 0
     474:	02 c0       	rjmp	.+4      	; 0x47a <CALLBACK_USB_GetDescriptor+0x36>
					break;
				case 0x02:
					Address = &ProductString;
					Size    = pgm_read_byte(&ProductString.Header.Size);
     476:	e8 e9       	ldi	r30, 0x98	; 152
     478:	f0 e0       	ldi	r31, 0x00	; 0
     47a:	84 91       	lpm	r24, Z
     47c:	90 e0       	ldi	r25, 0x00	; 0
					break;
     47e:	09 c0       	rjmp	.+18     	; 0x492 <CALLBACK_USB_GetDescriptor+0x4e>

	switch (DescriptorType)
	{
		case DTYPE_Device:
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
     480:	82 e1       	ldi	r24, 0x12	; 18
     482:	90 e0       	ldi	r25, 0x00	; 0
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
	{
		case DTYPE_Device:
			Address = &DeviceDescriptor;
     484:	e0 e5       	ldi	r30, 0x50	; 80
     486:	f1 e0       	ldi	r31, 0x01	; 1
     488:	04 c0       	rjmp	.+8      	; 0x492 <CALLBACK_USB_GetDescriptor+0x4e>
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;
     48a:	80 e0       	ldi	r24, 0x00	; 0
     48c:	90 e0       	ldi	r25, 0x00	; 0
                                    const void** const DescriptorAddress)
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
     48e:	e0 e0       	ldi	r30, 0x00	; 0
     490:	f0 e0       	ldi	r31, 0x00	; 0
			}

			break;
	}

	*DescriptorAddress = Address;
     492:	da 01       	movw	r26, r20
     494:	11 96       	adiw	r26, 0x01	; 1
     496:	fc 93       	st	X, r31
     498:	ee 93       	st	-X, r30
	return Size;
}
     49a:	08 95       	ret

0000049c <Endpoint_Write_Control_Stream_LE>:
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
     49c:	20 91 2d 01 	lds	r18, 0x012D
     4a0:	30 91 2e 01 	lds	r19, 0x012E
     4a4:	26 17       	cp	r18, r22
     4a6:	37 07       	cpc	r19, r23
     4a8:	20 f4       	brcc	.+8      	; 0x4b2 <Endpoint_Write_Control_Stream_LE+0x16>
     4aa:	b9 01       	movw	r22, r18
     4ac:	fc 01       	movw	r30, r24
     4ae:	20 e0       	ldi	r18, 0x00	; 0
     4b0:	37 c0       	rjmp	.+110    	; 0x520 <Endpoint_Write_Control_Stream_LE+0x84>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
     4b2:	61 15       	cp	r22, r1
     4b4:	71 05       	cpc	r23, r1
     4b6:	d1 f7       	brne	.-12     	; 0x4ac <Endpoint_Write_Control_Stream_LE+0x10>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     4b8:	20 91 e8 00 	lds	r18, 0x00E8
     4bc:	2e 77       	andi	r18, 0x7E	; 126
     4be:	20 93 e8 00 	sts	0x00E8, r18
     4c2:	f4 cf       	rjmp	.-24     	; 0x4ac <Endpoint_Write_Control_Stream_LE+0x10>
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     4c4:	80 91 26 01 	lds	r24, 0x0126

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     4c8:	88 23       	and	r24, r24
     4ca:	09 f4       	brne	.+2      	; 0x4ce <Endpoint_Write_Control_Stream_LE+0x32>
     4cc:	3f c0       	rjmp	.+126    	; 0x54c <Endpoint_Write_Control_Stream_LE+0xb0>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     4ce:	85 30       	cpi	r24, 0x05	; 5
     4d0:	c9 f1       	breq	.+114    	; 0x544 <Endpoint_Write_Control_Stream_LE+0xa8>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     4d2:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
     4d6:	83 fd       	sbrc	r24, 3
     4d8:	37 c0       	rjmp	.+110    	; 0x548 <Endpoint_Write_Control_Stream_LE+0xac>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     4da:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
     4de:	82 fd       	sbrc	r24, 2
     4e0:	2b c0       	rjmp	.+86     	; 0x538 <Endpoint_Write_Control_Stream_LE+0x9c>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     4e2:	80 91 e8 00 	lds	r24, 0x00E8
		  break;

		if (Endpoint_IsINReady())
     4e6:	80 ff       	sbrs	r24, 0
     4e8:	1b c0       	rjmp	.+54     	; 0x520 <Endpoint_Write_Control_Stream_LE+0x84>
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
     4ea:	80 91 f2 00 	lds	r24, 0x00F2
     4ee:	90 91 f3 00 	lds	r25, 0x00F3
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
     4f2:	06 c0       	rjmp	.+12     	; 0x500 <Endpoint_Write_Control_Stream_LE+0x64>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
     4f4:	21 91       	ld	r18, Z+
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     4f6:	20 93 f1 00 	sts	0x00F1, r18
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
     4fa:	61 50       	subi	r22, 0x01	; 1
     4fc:	70 40       	sbci	r23, 0x00	; 0
				BytesInEndpoint++;
     4fe:	01 96       	adiw	r24, 0x01	; 1

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
     500:	61 15       	cp	r22, r1
     502:	71 05       	cpc	r23, r1
     504:	19 f0       	breq	.+6      	; 0x50c <Endpoint_Write_Control_Stream_LE+0x70>
     506:	88 30       	cpi	r24, 0x08	; 8
     508:	91 05       	cpc	r25, r1
     50a:	a0 f3       	brcs	.-24     	; 0x4f4 <Endpoint_Write_Control_Stream_LE+0x58>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
     50c:	21 e0       	ldi	r18, 0x01	; 1
     50e:	88 30       	cpi	r24, 0x08	; 8
     510:	91 05       	cpc	r25, r1
     512:	09 f0       	breq	.+2      	; 0x516 <Endpoint_Write_Control_Stream_LE+0x7a>
     514:	20 e0       	ldi	r18, 0x00	; 0
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     516:	80 91 e8 00 	lds	r24, 0x00E8
     51a:	8e 77       	andi	r24, 0x7E	; 126
     51c:	80 93 e8 00 	sts	0x00E8, r24
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
     520:	61 15       	cp	r22, r1
     522:	71 05       	cpc	r23, r1
     524:	79 f6       	brne	.-98     	; 0x4c4 <Endpoint_Write_Control_Stream_LE+0x28>
     526:	22 23       	and	r18, r18
     528:	69 f6       	brne	.-102    	; 0x4c4 <Endpoint_Write_Control_Stream_LE+0x28>
     52a:	06 c0       	rjmp	.+12     	; 0x538 <Endpoint_Write_Control_Stream_LE+0x9c>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     52c:	80 91 26 01 	lds	r24, 0x0126

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     530:	88 23       	and	r24, r24
     532:	61 f0       	breq	.+24     	; 0x54c <Endpoint_Write_Control_Stream_LE+0xb0>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     534:	85 30       	cpi	r24, 0x05	; 5
     536:	61 f0       	breq	.+24     	; 0x550 <Endpoint_Write_Control_Stream_LE+0xb4>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     538:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
     53c:	82 ff       	sbrs	r24, 2
     53e:	f6 cf       	rjmp	.-20     	; 0x52c <Endpoint_Write_Control_Stream_LE+0x90>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
     540:	80 e0       	ldi	r24, 0x00	; 0
     542:	08 95       	ret
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
     544:	83 e0       	ldi	r24, 0x03	; 3
     546:	08 95       	ret
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
     548:	81 e0       	ldi	r24, 0x01	; 1
     54a:	08 95       	ret
	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
     54c:	82 e0       	ldi	r24, 0x02	; 2
     54e:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
     550:	83 e0       	ldi	r24, 0x03	; 3
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
     552:	08 95       	ret

00000554 <Endpoint_Read_Control_Stream_LE>:
uint8_t TEMPLATE_FUNC_NAME (void* const Buffer,
                            uint16_t Length)
{
	uint8_t* DataStream = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));

	if (!(Length))
     554:	61 15       	cp	r22, r1
     556:	71 05       	cpc	r23, r1
     558:	29 f4       	brne	.+10     	; 0x564 <Endpoint_Read_Control_Stream_LE+0x10>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     55a:	20 91 e8 00 	lds	r18, 0x00E8
     55e:	2b 77       	andi	r18, 0x7B	; 123
     560:	20 93 e8 00 	sts	0x00E8, r18

#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (void* const Buffer,
                            uint16_t Length)
{
     564:	38 2f       	mov	r19, r24
     566:	29 2f       	mov	r18, r25
     568:	26 c0       	rjmp	.+76     	; 0x5b6 <Endpoint_Read_Control_Stream_LE+0x62>
	if (!(Length))
	  Endpoint_ClearOUT();

	while (Length)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     56a:	80 91 26 01 	lds	r24, 0x0126

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     56e:	88 23       	and	r24, r24
     570:	b1 f1       	breq	.+108    	; 0x5de <Endpoint_Read_Control_Stream_LE+0x8a>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     572:	85 30       	cpi	r24, 0x05	; 5
     574:	81 f1       	breq	.+96     	; 0x5d6 <Endpoint_Read_Control_Stream_LE+0x82>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     576:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
     57a:	83 fd       	sbrc	r24, 3
     57c:	2e c0       	rjmp	.+92     	; 0x5da <Endpoint_Read_Control_Stream_LE+0x86>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     57e:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;

		if (Endpoint_IsOUTReceived())
     582:	82 ff       	sbrs	r24, 2
     584:	f2 cf       	rjmp	.-28     	; 0x56a <Endpoint_Read_Control_Stream_LE+0x16>
     586:	e3 2f       	mov	r30, r19
     588:	f2 2f       	mov	r31, r18
     58a:	08 c0       	rjmp	.+16     	; 0x59c <Endpoint_Read_Control_Stream_LE+0x48>
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
     58c:	80 91 f1 00 	lds	r24, 0x00F1
		{
			while (Length && Endpoint_BytesInEndpoint())
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
     590:	81 93       	st	Z+, r24
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
     592:	3e 2f       	mov	r19, r30
     594:	2f 2f       	mov	r18, r31
				Length--;
     596:	61 50       	subi	r22, 0x01	; 1
     598:	70 40       	sbci	r23, 0x00	; 0
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;

		if (Endpoint_IsOUTReceived())
		{
			while (Length && Endpoint_BytesInEndpoint())
     59a:	41 f0       	breq	.+16     	; 0x5ac <Endpoint_Read_Control_Stream_LE+0x58>
     59c:	3e 2f       	mov	r19, r30
     59e:	2f 2f       	mov	r18, r31
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
     5a0:	80 91 f2 00 	lds	r24, 0x00F2
     5a4:	90 91 f3 00 	lds	r25, 0x00F3
     5a8:	00 97       	sbiw	r24, 0x00	; 0
     5aa:	81 f7       	brne	.-32     	; 0x58c <Endpoint_Read_Control_Stream_LE+0x38>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     5ac:	80 91 e8 00 	lds	r24, 0x00E8
     5b0:	8b 77       	andi	r24, 0x7B	; 123
     5b2:	80 93 e8 00 	sts	0x00E8, r24
	uint8_t* DataStream = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));

	if (!(Length))
	  Endpoint_ClearOUT();

	while (Length)
     5b6:	61 15       	cp	r22, r1
     5b8:	71 05       	cpc	r23, r1
     5ba:	b9 f6       	brne	.-82     	; 0x56a <Endpoint_Read_Control_Stream_LE+0x16>
     5bc:	06 c0       	rjmp	.+12     	; 0x5ca <Endpoint_Read_Control_Stream_LE+0x76>
		}
	}

	while (!(Endpoint_IsINReady()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     5be:	80 91 26 01 	lds	r24, 0x0126

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     5c2:	88 23       	and	r24, r24
     5c4:	61 f0       	breq	.+24     	; 0x5de <Endpoint_Read_Control_Stream_LE+0x8a>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     5c6:	85 30       	cpi	r24, 0x05	; 5
     5c8:	61 f0       	breq	.+24     	; 0x5e2 <Endpoint_Read_Control_Stream_LE+0x8e>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     5ca:	80 91 e8 00 	lds	r24, 0x00E8

			Endpoint_ClearOUT();
		}
	}

	while (!(Endpoint_IsINReady()))
     5ce:	80 ff       	sbrs	r24, 0
     5d0:	f6 cf       	rjmp	.-20     	; 0x5be <Endpoint_Read_Control_Stream_LE+0x6a>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
     5d2:	80 e0       	ldi	r24, 0x00	; 0
     5d4:	08 95       	ret
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
     5d6:	83 e0       	ldi	r24, 0x03	; 3
     5d8:	08 95       	ret
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
     5da:	81 e0       	ldi	r24, 0x01	; 1
     5dc:	08 95       	ret
	while (!(Endpoint_IsINReady()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
     5de:	82 e0       	ldi	r24, 0x02	; 2
     5e0:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
     5e2:	83 e0       	ldi	r24, 0x03	; 3
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
     5e4:	08 95       	ret

000005e6 <Endpoint_Write_Control_PStream_LE>:
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
     5e6:	20 91 2d 01 	lds	r18, 0x012D
     5ea:	30 91 2e 01 	lds	r19, 0x012E
     5ee:	26 17       	cp	r18, r22
     5f0:	37 07       	cpc	r19, r23
     5f2:	20 f4       	brcc	.+8      	; 0x5fc <Endpoint_Write_Control_PStream_LE+0x16>
     5f4:	b9 01       	movw	r22, r18
     5f6:	fc 01       	movw	r30, r24
     5f8:	20 e0       	ldi	r18, 0x00	; 0
     5fa:	38 c0       	rjmp	.+112    	; 0x66c <Endpoint_Write_Control_PStream_LE+0x86>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
     5fc:	61 15       	cp	r22, r1
     5fe:	71 05       	cpc	r23, r1
     600:	d1 f7       	brne	.-12     	; 0x5f6 <Endpoint_Write_Control_PStream_LE+0x10>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     602:	20 91 e8 00 	lds	r18, 0x00E8
     606:	2e 77       	andi	r18, 0x7E	; 126
     608:	20 93 e8 00 	sts	0x00E8, r18
     60c:	f4 cf       	rjmp	.-24     	; 0x5f6 <Endpoint_Write_Control_PStream_LE+0x10>
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     60e:	80 91 26 01 	lds	r24, 0x0126

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     612:	88 23       	and	r24, r24
     614:	09 f4       	brne	.+2      	; 0x618 <Endpoint_Write_Control_PStream_LE+0x32>
     616:	40 c0       	rjmp	.+128    	; 0x698 <Endpoint_Write_Control_PStream_LE+0xb2>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     618:	85 30       	cpi	r24, 0x05	; 5
     61a:	d1 f1       	breq	.+116    	; 0x690 <Endpoint_Write_Control_PStream_LE+0xaa>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     61c:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
     620:	83 fd       	sbrc	r24, 3
     622:	38 c0       	rjmp	.+112    	; 0x694 <Endpoint_Write_Control_PStream_LE+0xae>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     624:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
     628:	82 fd       	sbrc	r24, 2
     62a:	2c c0       	rjmp	.+88     	; 0x684 <Endpoint_Write_Control_PStream_LE+0x9e>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     62c:	80 91 e8 00 	lds	r24, 0x00E8
		  break;

		if (Endpoint_IsINReady())
     630:	80 ff       	sbrs	r24, 0
     632:	1c c0       	rjmp	.+56     	; 0x66c <Endpoint_Write_Control_PStream_LE+0x86>
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
     634:	80 91 f2 00 	lds	r24, 0x00F2
     638:	90 91 f3 00 	lds	r25, 0x00F3
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
     63c:	07 c0       	rjmp	.+14     	; 0x64c <Endpoint_Write_Control_PStream_LE+0x66>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
     63e:	24 91       	lpm	r18, Z
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     640:	20 93 f1 00 	sts	0x00F1, r18
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
     644:	31 96       	adiw	r30, 0x01	; 1
				Length--;
     646:	61 50       	subi	r22, 0x01	; 1
     648:	70 40       	sbci	r23, 0x00	; 0
				BytesInEndpoint++;
     64a:	01 96       	adiw	r24, 0x01	; 1

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
     64c:	61 15       	cp	r22, r1
     64e:	71 05       	cpc	r23, r1
     650:	19 f0       	breq	.+6      	; 0x658 <Endpoint_Write_Control_PStream_LE+0x72>
     652:	88 30       	cpi	r24, 0x08	; 8
     654:	91 05       	cpc	r25, r1
     656:	98 f3       	brcs	.-26     	; 0x63e <Endpoint_Write_Control_PStream_LE+0x58>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
     658:	21 e0       	ldi	r18, 0x01	; 1
     65a:	88 30       	cpi	r24, 0x08	; 8
     65c:	91 05       	cpc	r25, r1
     65e:	09 f0       	breq	.+2      	; 0x662 <Endpoint_Write_Control_PStream_LE+0x7c>
     660:	20 e0       	ldi	r18, 0x00	; 0
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     662:	80 91 e8 00 	lds	r24, 0x00E8
     666:	8e 77       	andi	r24, 0x7E	; 126
     668:	80 93 e8 00 	sts	0x00E8, r24
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
     66c:	61 15       	cp	r22, r1
     66e:	71 05       	cpc	r23, r1
     670:	71 f6       	brne	.-100    	; 0x60e <Endpoint_Write_Control_PStream_LE+0x28>
     672:	22 23       	and	r18, r18
     674:	61 f6       	brne	.-104    	; 0x60e <Endpoint_Write_Control_PStream_LE+0x28>
     676:	06 c0       	rjmp	.+12     	; 0x684 <Endpoint_Write_Control_PStream_LE+0x9e>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     678:	80 91 26 01 	lds	r24, 0x0126

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     67c:	88 23       	and	r24, r24
     67e:	61 f0       	breq	.+24     	; 0x698 <Endpoint_Write_Control_PStream_LE+0xb2>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     680:	85 30       	cpi	r24, 0x05	; 5
     682:	61 f0       	breq	.+24     	; 0x69c <Endpoint_Write_Control_PStream_LE+0xb6>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     684:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
     688:	82 ff       	sbrs	r24, 2
     68a:	f6 cf       	rjmp	.-20     	; 0x678 <Endpoint_Write_Control_PStream_LE+0x92>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
     68c:	80 e0       	ldi	r24, 0x00	; 0
     68e:	08 95       	ret
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
     690:	83 e0       	ldi	r24, 0x03	; 3
     692:	08 95       	ret
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
     694:	81 e0       	ldi	r24, 0x01	; 1
     696:	08 95       	ret
	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
     698:	82 e0       	ldi	r24, 0x02	; 2
     69a:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
     69c:	83 e0       	ldi	r24, 0x03	; 3
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
     69e:	08 95       	ret

000006a0 <Endpoint_ConfigureEndpoint_Prv>:
	UECFG0X = UECFG0XData;
	UECFG1X = UECFG1XData;

	return Endpoint_IsConfigured();
#else
	for (uint8_t EPNum = Number; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
     6a0:	98 2f       	mov	r25, r24
     6a2:	2a c0       	rjmp	.+84     	; 0x6f8 <Endpoint_ConfigureEndpoint_Prv+0x58>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     6a4:	90 93 e9 00 	sts	0x00E9, r25
		uint8_t UECFG1XTemp;
		uint8_t UEIENXTemp;

		Endpoint_SelectEndpoint(EPNum);

		if (EPNum == Number)
     6a8:	98 17       	cp	r25, r24
     6aa:	39 f0       	breq	.+14     	; 0x6ba <Endpoint_ConfigureEndpoint_Prv+0x1a>
			UECFG1XTemp = UECFG1XData;
			UEIENXTemp  = 0;
		}
		else
		{
			UECFG0XTemp = UECFG0X;
     6ac:	70 91 ec 00 	lds	r23, 0x00EC
			UECFG1XTemp = UECFG1X;
     6b0:	20 91 ed 00 	lds	r18, 0x00ED
			UEIENXTemp  = UEIENX;
     6b4:	50 91 f0 00 	lds	r21, 0x00F0
     6b8:	03 c0       	rjmp	.+6      	; 0x6c0 <Endpoint_ConfigureEndpoint_Prv+0x20>
		Endpoint_SelectEndpoint(EPNum);

		if (EPNum == Number)
		{
			UECFG0XTemp = UECFG0XData;
			UECFG1XTemp = UECFG1XData;
     6ba:	24 2f       	mov	r18, r20

		Endpoint_SelectEndpoint(EPNum);

		if (EPNum == Number)
		{
			UECFG0XTemp = UECFG0XData;
     6bc:	76 2f       	mov	r23, r22
			UECFG1XTemp = UECFG1XData;
			UEIENXTemp  = 0;
     6be:	50 e0       	ldi	r21, 0x00	; 0
			UECFG0XTemp = UECFG0X;
			UECFG1XTemp = UECFG1X;
			UEIENXTemp  = UEIENX;
		}

		if (!(UECFG1XTemp & (1 << ALLOC)))
     6c0:	21 ff       	sbrs	r18, 1
     6c2:	19 c0       	rjmp	.+50     	; 0x6f6 <Endpoint_ConfigureEndpoint_Prv+0x56>
			 *  to and from a host.
			 */
			static inline void Endpoint_DisableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_DisableEndpoint(void)
			{
				UECONX &= ~(1 << EPEN);
     6c4:	30 91 eb 00 	lds	r19, 0x00EB
     6c8:	3e 7f       	andi	r19, 0xFE	; 254
     6ca:	30 93 eb 00 	sts	0x00EB, r19
		  continue;

		Endpoint_DisableEndpoint();
		UECFG1X &= ~(1 << ALLOC);
     6ce:	30 91 ed 00 	lds	r19, 0x00ED
     6d2:	3d 7f       	andi	r19, 0xFD	; 253
     6d4:	30 93 ed 00 	sts	0x00ED, r19
			 *  \note Endpoints must first be configured properly via \ref Endpoint_ConfigureEndpoint().
			 */
			static inline void Endpoint_EnableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_EnableEndpoint(void)
			{
				UECONX |= (1 << EPEN);
     6d8:	30 91 eb 00 	lds	r19, 0x00EB
     6dc:	31 60       	ori	r19, 0x01	; 1
     6de:	30 93 eb 00 	sts	0x00EB, r19

		Endpoint_EnableEndpoint();
		UECFG0X = UECFG0XTemp;
     6e2:	70 93 ec 00 	sts	0x00EC, r23
		UECFG1X = UECFG1XTemp;
     6e6:	20 93 ed 00 	sts	0x00ED, r18
		UEIENX  = UEIENXTemp;
     6ea:	50 93 f0 00 	sts	0x00F0, r21
			 *  \return Boolean \c true if the currently selected endpoint has been configured, \c false otherwise.
			 */
			static inline bool Endpoint_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsConfigured(void)
			{
				return ((UESTA0X & (1 << CFGOK)) ? true : false);
     6ee:	20 91 ee 00 	lds	r18, 0x00EE

		if (!(Endpoint_IsConfigured()))
     6f2:	27 ff       	sbrs	r18, 7
     6f4:	08 c0       	rjmp	.+16     	; 0x706 <Endpoint_ConfigureEndpoint_Prv+0x66>
	UECFG0X = UECFG0XData;
	UECFG1X = UECFG1XData;

	return Endpoint_IsConfigured();
#else
	for (uint8_t EPNum = Number; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
     6f6:	9f 5f       	subi	r25, 0xFF	; 255
     6f8:	97 30       	cpi	r25, 0x07	; 7
     6fa:	a0 f2       	brcs	.-88     	; 0x6a4 <Endpoint_ConfigureEndpoint_Prv+0x4>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     6fc:	8f 70       	andi	r24, 0x0F	; 15
     6fe:	80 93 e9 00 	sts	0x00E9, r24
		if (!(Endpoint_IsConfigured()))
		  return false;
	}

	Endpoint_SelectEndpoint(Number);
	return true;
     702:	81 e0       	ldi	r24, 0x01	; 1
     704:	08 95       	ret
		UECFG0X = UECFG0XTemp;
		UECFG1X = UECFG1XTemp;
		UEIENX  = UEIENXTemp;

		if (!(Endpoint_IsConfigured()))
		  return false;
     706:	80 e0       	ldi	r24, 0x00	; 0
	}

	Endpoint_SelectEndpoint(Number);
	return true;
#endif
}
     708:	08 95       	ret

0000070a <Endpoint_ConfigureEndpointTable>:
uint8_t USB_Device_ControlEndpointSize = ENDPOINT_CONTROLEP_DEFAULT_SIZE;
#endif

bool Endpoint_ConfigureEndpointTable(const USB_Endpoint_Table_t* const Table,
                                     const uint8_t Entries)
{
     70a:	0f 93       	push	r16
     70c:	1f 93       	push	r17
     70e:	cf 93       	push	r28
     710:	df 93       	push	r29
     712:	16 2f       	mov	r17, r22
	{
		if (!(Table[i].Address))
		  continue;
	
		if (!(Endpoint_ConfigureEndpoint(Table[i].Address, Table[i].Type, Table[i].Size, Table[i].Banks)))
		  return false;
     714:	ec 01       	movw	r28, r24
#endif

bool Endpoint_ConfigureEndpointTable(const USB_Endpoint_Table_t* const Table,
                                     const uint8_t Entries)
{
	for (uint8_t i = 0; i < Entries; i++)
     716:	00 e0       	ldi	r16, 0x00	; 0
     718:	2a c0       	rjmp	.+84     	; 0x76e <Endpoint_ConfigureEndpointTable+0x64>
	{
		if (!(Table[i].Address))
     71a:	98 81       	ld	r25, Y
     71c:	99 23       	and	r25, r25
     71e:	29 f1       	breq	.+74     	; 0x76a <Endpoint_ConfigureEndpointTable+0x60>
		  continue;
	
		if (!(Endpoint_ConfigureEndpoint(Table[i].Address, Table[i].Type, Table[i].Size, Table[i].Banks)))
     720:	6b 81       	ldd	r22, Y+3	; 0x03
     722:	e9 81       	ldd	r30, Y+1	; 0x01
     724:	fa 81       	ldd	r31, Y+2	; 0x02
     726:	2c 81       	ldd	r18, Y+4	; 0x04
			static inline bool Endpoint_ConfigureEndpoint(const uint8_t Address,
			                                              const uint8_t Type,
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);
     728:	89 2f       	mov	r24, r25
     72a:	8f 70       	andi	r24, 0x0F	; 15

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
     72c:	87 30       	cpi	r24, 0x07	; 7
     72e:	18 f5       	brcc	.+70     	; 0x776 <Endpoint_ConfigureEndpointTable+0x6c>
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
				                                      ((Type << EPTYPE0) | ((Address & ENDPOINT_DIR_IN) ? (1 << EPDIR) : 0)),
     730:	62 95       	swap	r22
     732:	66 0f       	add	r22, r22
     734:	66 0f       	add	r22, r22
     736:	60 7c       	andi	r22, 0xC0	; 192
     738:	99 1f       	adc	r25, r25
     73a:	99 27       	eor	r25, r25
     73c:	99 1f       	adc	r25, r25
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
     73e:	69 2b       	or	r22, r25
     740:	22 30       	cpi	r18, 0x02	; 2
     742:	10 f0       	brcs	.+4      	; 0x748 <Endpoint_ConfigureEndpointTable+0x3e>
     744:	96 e0       	ldi	r25, 0x06	; 6
     746:	01 c0       	rjmp	.+2      	; 0x74a <Endpoint_ConfigureEndpointTable+0x40>
     748:	92 e0       	ldi	r25, 0x02	; 2
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes) ATTR_WARN_UNUSED_RESULT ATTR_CONST
			                                                                       ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;
     74a:	28 e0       	ldi	r18, 0x08	; 8
     74c:	30 e0       	ldi	r19, 0x00	; 0
		/* Inline Functions: */
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes) ATTR_WARN_UNUSED_RESULT ATTR_CONST
			                                                                       ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
     74e:	40 e0       	ldi	r20, 0x00	; 0
     750:	03 c0       	rjmp	.+6      	; 0x758 <Endpoint_ConfigureEndpointTable+0x4e>
				uint16_t CheckBytes = 8;

				while (CheckBytes < Bytes)
				{
					MaskVal++;
     752:	4f 5f       	subi	r20, 0xFF	; 255
					CheckBytes <<= 1;
     754:	22 0f       	add	r18, r18
     756:	33 1f       	adc	r19, r19
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while (CheckBytes < Bytes)
     758:	2e 17       	cp	r18, r30
     75a:	3f 07       	cpc	r19, r31
     75c:	d0 f3       	brcs	.-12     	; 0x752 <Endpoint_ConfigureEndpointTable+0x48>
				{
					MaskVal++;
					CheckBytes <<= 1;
				}

				return (MaskVal << EPSIZE0);
     75e:	42 95       	swap	r20
     760:	40 7f       	andi	r20, 0xF0	; 240
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
     762:	49 2b       	or	r20, r25
     764:	9d df       	rcall	.-198    	; 0x6a0 <Endpoint_ConfigureEndpoint_Prv>
     766:	88 23       	and	r24, r24
     768:	31 f0       	breq	.+12     	; 0x776 <Endpoint_ConfigureEndpointTable+0x6c>
     76a:	0f 5f       	subi	r16, 0xFF	; 255
#endif

bool Endpoint_ConfigureEndpointTable(const USB_Endpoint_Table_t* const Table,
                                     const uint8_t Entries)
{
	for (uint8_t i = 0; i < Entries; i++)
     76c:	25 96       	adiw	r28, 0x05	; 5
     76e:	01 17       	cp	r16, r17
     770:	a1 f6       	brne	.-88     	; 0x71a <Endpoint_ConfigureEndpointTable+0x10>
     772:	81 e0       	ldi	r24, 0x01	; 1
	
		if (!(Endpoint_ConfigureEndpoint(Table[i].Address, Table[i].Type, Table[i].Size, Table[i].Banks)))
		  return false;
	}
	
	return true;
     774:	01 c0       	rjmp	.+2      	; 0x778 <Endpoint_ConfigureEndpointTable+0x6e>
     776:	80 e0       	ldi	r24, 0x00	; 0
	{
		if (!(Table[i].Address))
		  continue;
	
		if (!(Endpoint_ConfigureEndpoint(Table[i].Address, Table[i].Type, Table[i].Size, Table[i].Banks)))
		  return false;
     778:	df 91       	pop	r29
	}
	
	return true;
}
     77a:	cf 91       	pop	r28
     77c:	1f 91       	pop	r17
     77e:	0f 91       	pop	r16
     780:	08 95       	ret

00000782 <Endpoint_ClearStatusStage>:
     782:	80 91 27 01 	lds	r24, 0x0127
	}
}

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
     786:	87 ff       	sbrs	r24, 7
     788:	13 c0       	rjmp	.+38     	; 0x7b0 <Endpoint_ClearStatusStage+0x2e>
     78a:	04 c0       	rjmp	.+8      	; 0x794 <Endpoint_ClearStatusStage+0x12>
	{
		while (!(Endpoint_IsOUTReceived()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
     78c:	80 91 26 01 	lds	r24, 0x0126
     790:	88 23       	and	r24, r24
     792:	b9 f0       	breq	.+46     	; 0x7c2 <Endpoint_ClearStatusStage+0x40>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     794:	80 91 e8 00 	lds	r24, 0x00E8

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
	{
		while (!(Endpoint_IsOUTReceived()))
     798:	82 ff       	sbrs	r24, 2
     79a:	f8 cf       	rjmp	.-16     	; 0x78c <Endpoint_ClearStatusStage+0xa>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     79c:	80 91 e8 00 	lds	r24, 0x00E8
     7a0:	8b 77       	andi	r24, 0x7B	; 123
     7a2:	80 93 e8 00 	sts	0x00E8, r24
     7a6:	08 95       	ret
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
     7a8:	80 91 26 01 	lds	r24, 0x0126
     7ac:	88 23       	and	r24, r24
     7ae:	49 f0       	breq	.+18     	; 0x7c2 <Endpoint_ClearStatusStage+0x40>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     7b0:	80 91 e8 00 	lds	r24, 0x00E8

		Endpoint_ClearOUT();
	}
	else
	{
		while (!(Endpoint_IsINReady()))
     7b4:	80 ff       	sbrs	r24, 0
     7b6:	f8 cf       	rjmp	.-16     	; 0x7a8 <Endpoint_ClearStatusStage+0x26>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     7b8:	80 91 e8 00 	lds	r24, 0x00E8
     7bc:	8e 77       	andi	r24, 0x7E	; 126
     7be:	80 93 e8 00 	sts	0x00E8, r24
     7c2:	08 95       	ret

000007c4 <USB_ResetInterface>:

	USB_IsInitialized = false;
}

void USB_ResetInterface(void)
{
     7c4:	0f 93       	push	r16
     7c6:	1f 93       	push	r17
     7c8:	cf 93       	push	r28
     7ca:	df 93       	push	r29
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
     7cc:	4e d0       	rcall	.+156    	; 0x86a <USB_INT_DisableAllInterrupts>
     7ce:	55 d0       	rcall	.+170    	; 0x87a <USB_INT_ClearAllInterrupts>
	USB_INT_ClearAllInterrupts();
     7d0:	c8 ed       	ldi	r28, 0xD8	; 216
     7d2:	d0 e0       	ldi	r29, 0x00	; 0
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
     7d4:	88 81       	ld	r24, Y
     7d6:	8f 77       	andi	r24, 0x7F	; 127
     7d8:	88 83       	st	Y, r24
     7da:	88 81       	ld	r24, Y
     7dc:	80 68       	ori	r24, 0x80	; 128
				USBCON |=  (1 << USBE);
     7de:	88 83       	st	Y, r24
     7e0:	88 81       	ld	r24, Y
     7e2:	8f 7d       	andi	r24, 0xDF	; 223
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
     7e4:	88 83       	st	Y, r24
     7e6:	e7 ed       	ldi	r30, 0xD7	; 215
     7e8:	f0 e0       	ldi	r31, 0x00	; 0

	if (USB_CurrentMode == USB_MODE_Device)
	{
		#if defined(USB_CAN_BE_DEVICE)
		#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
		UHWCON |=  (1 << UIMOD);
     7ea:	80 81       	ld	r24, Z
     7ec:	80 68       	ori	r24, 0x80	; 128
     7ee:	80 83       	st	Z, r24
     7f0:	19 bc       	out	0x29, r1	; 41
     7f2:	10 92 26 01 	sts	0x0126, r1
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState                 = DEVICE_STATE_Unattached;
     7f6:	10 92 22 01 	sts	0x0122, r1
	USB_Device_ConfigurationNumber  = 0;
     7fa:	10 92 24 01 	sts	0x0124, r1

	#if !defined(NO_DEVICE_REMOTE_WAKEUP)
	USB_Device_RemoteWakeupEnabled  = false;
     7fe:	10 92 23 01 	sts	0x0123, r1
	#endif

	#if !defined(NO_DEVICE_SELF_POWER)
	USB_Device_CurrentlySelfPowered = false;
     802:	00 ee       	ldi	r16, 0xE0	; 224
     804:	10 e0       	ldi	r17, 0x00	; 0
			}

			static inline void USB_Device_SetFullSpeed(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetFullSpeed(void)
			{
				UDCON &= ~(1 << LSM);
     806:	f8 01       	movw	r30, r16
     808:	80 81       	ld	r24, Z
     80a:	8b 7f       	andi	r24, 0xFB	; 251
     80c:	80 83       	st	Z, r24
     80e:	88 81       	ld	r24, Y
     810:	81 60       	ori	r24, 0x01	; 1
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBCON |= (1 << VBUSTE);
     812:	88 83       	st	Y, r24
     814:	80 e0       	ldi	r24, 0x00	; 0
     816:	60 e0       	ldi	r22, 0x00	; 0
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
     818:	42 e0       	ldi	r20, 0x02	; 2
     81a:	42 df       	rcall	.-380    	; 0x6a0 <Endpoint_ConfigureEndpoint_Prv>
     81c:	e1 ee       	ldi	r30, 0xE1	; 225
     81e:	f0 e0       	ldi	r31, 0x00	; 0
     820:	80 81       	ld	r24, Z
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
     822:	8e 7f       	andi	r24, 0xFE	; 254
     824:	80 83       	st	Z, r24
     826:	e2 ee       	ldi	r30, 0xE2	; 226
     828:	f0 e0       	ldi	r31, 0x00	; 0
     82a:	80 81       	ld	r24, Z
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
     82c:	81 60       	ori	r24, 0x01	; 1
     82e:	80 83       	st	Z, r24
     830:	80 81       	ld	r24, Z
     832:	88 60       	ori	r24, 0x08	; 8
     834:	80 83       	st	Z, r24
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
     836:	f8 01       	movw	r30, r16
     838:	80 81       	ld	r24, Z
     83a:	8e 7f       	andi	r24, 0xFE	; 254
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
     83c:	80 83       	st	Z, r24
     83e:	88 81       	ld	r24, Y
     840:	80 61       	ori	r24, 0x10	; 16
     842:	88 83       	st	Y, r24

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON |=  (1 << OTGPADE);
     844:	df 91       	pop	r29
     846:	cf 91       	pop	r28
     848:	1f 91       	pop	r17
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
     84a:	0f 91       	pop	r16
     84c:	08 95       	ret

0000084e <USB_Init>:
     84e:	e8 ed       	ldi	r30, 0xD8	; 216
     850:	f0 e0       	ldi	r31, 0x00	; 0
     852:	80 81       	ld	r24, Z
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON &= ~(1 << OTGPADE);
     854:	8f 7e       	andi	r24, 0xEF	; 239
     856:	80 83       	st	Z, r24

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON |=  (1 << UVREGE);
     858:	e7 ed       	ldi	r30, 0xD7	; 215
     85a:	f0 e0       	ldi	r31, 0x00	; 0
     85c:	80 81       	ld	r24, Z
     85e:	81 60       	ori	r24, 0x01	; 1
     860:	80 83       	st	Z, r24
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
     862:	81 e0       	ldi	r24, 0x01	; 1
     864:	80 93 25 01 	sts	0x0125, r24

	USB_ResetInterface();
     868:	ad cf       	rjmp	.-166    	; 0x7c4 <USB_ResetInterface>

0000086a <USB_INT_DisableAllInterrupts>:
#include "../USBInterrupt.h"

void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
     86a:	e8 ed       	ldi	r30, 0xD8	; 216
     86c:	f0 e0       	ldi	r31, 0x00	; 0
     86e:	80 81       	ld	r24, Z
     870:	8c 7f       	andi	r24, 0xFC	; 252
     872:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
     874:	10 92 e2 00 	sts	0x00E2, r1
	#endif
}
     878:	08 95       	ret

0000087a <USB_INT_ClearAllInterrupts>:

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
     87a:	10 92 da 00 	sts	0x00DA, r1
	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
     87e:	10 92 e1 00 	sts	0x00E1, r1
	#endif
}
     882:	08 95       	ret

00000884 <__vector_10>:

ISR(USB_GEN_vect, ISR_BLOCK)
{
     884:	1f 92       	push	r1
     886:	0f 92       	push	r0
     888:	0f b6       	in	r0, 0x3f	; 63
     88a:	0f 92       	push	r0
     88c:	0b b6       	in	r0, 0x3b	; 59
     88e:	0f 92       	push	r0
     890:	11 24       	eor	r1, r1
     892:	2f 93       	push	r18
     894:	3f 93       	push	r19
     896:	4f 93       	push	r20
     898:	5f 93       	push	r21
     89a:	6f 93       	push	r22
     89c:	7f 93       	push	r23
     89e:	8f 93       	push	r24
     8a0:	9f 93       	push	r25
     8a2:	af 93       	push	r26
     8a4:	bf 93       	push	r27
     8a6:	ef 93       	push	r30
     8a8:	ff 93       	push	r31
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
					case USB_INT_SOFI:
						return (UDINT  & (1 << SOFI));
     8aa:	80 91 e1 00 	lds	r24, 0x00E1
	#if defined(USB_CAN_BE_DEVICE)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
     8ae:	82 ff       	sbrs	r24, 2
     8b0:	0a c0       	rjmp	.+20     	; 0x8c6 <__vector_10+0x42>
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
					case USB_INT_SOFI:
						return (UDIEN  & (1 << SOFE));
     8b2:	80 91 e2 00 	lds	r24, 0x00E2
     8b6:	82 ff       	sbrs	r24, 2
     8b8:	06 c0       	rjmp	.+12     	; 0x8c6 <__vector_10+0x42>
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
						break;
					case USB_INT_SOFI:
						UDINT  &= ~(1 << SOFI);
     8ba:	80 91 e1 00 	lds	r24, 0x00E1
     8be:	8b 7f       	andi	r24, 0xFB	; 251
     8c0:	80 93 e1 00 	sts	0x00E1, r24
	{
		USB_INT_Clear(USB_INT_SOFI);

		EVENT_USB_Device_StartOfFrame();
     8c4:	0d d2       	rcall	.+1050   	; 0xce0 <USB_Event_Stub>
     8c6:	80 91 da 00 	lds	r24, 0x00DA
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBINT & (1 << VBUSTI));
     8ca:	80 ff       	sbrs	r24, 0
	}
	#endif

	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	if (USB_INT_HasOccurred(USB_INT_VBUSTI) && USB_INT_IsEnabled(USB_INT_VBUSTI))
     8cc:	1d c0       	rjmp	.+58     	; 0x908 <__vector_10+0x84>
     8ce:	80 91 d8 00 	lds	r24, 0x00D8
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBCON & (1 << VBUSTE));
     8d2:	80 ff       	sbrs	r24, 0
     8d4:	19 c0       	rjmp	.+50     	; 0x908 <__vector_10+0x84>
     8d6:	80 91 da 00 	lds	r24, 0x00DA
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBINT &= ~(1 << VBUSTI);
     8da:	8e 7f       	andi	r24, 0xFE	; 254
     8dc:	80 93 da 00 	sts	0x00DA, r24
     8e0:	80 91 d9 00 	lds	r24, 0x00D9
				 *  \return Boolean \c true if the VBUS line is currently detecting power from a host, \c false otherwise.
				 */
				static inline bool USB_VBUS_GetStatus(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
				static inline bool USB_VBUS_GetStatus(void)
				{
					return ((USBSTA & (1 << VBUS)) ? true : false);
     8e4:	80 ff       	sbrs	r24, 0
	{
		USB_INT_Clear(USB_INT_VBUSTI);

		if (USB_VBUS_GetStatus())
     8e6:	0c c0       	rjmp	.+24     	; 0x900 <__vector_10+0x7c>
     8e8:	8c e0       	ldi	r24, 0x0C	; 12

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
     8ea:	89 bd       	out	0x29, r24	; 41
     8ec:	8e e0       	ldi	r24, 0x0E	; 14
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
     8ee:	89 bd       	out	0x29, r24	; 41
     8f0:	09 b4       	in	r0, 0x29	; 41
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			{
				USB_PLL_On();
				while (!(USB_PLL_IsReady()));
     8f2:	00 fe       	sbrs	r0, 0
     8f4:	fd cf       	rjmp	.-6      	; 0x8f0 <__vector_10+0x6c>
     8f6:	81 e0       	ldi	r24, 0x01	; 1
			}

			USB_DeviceState = DEVICE_STATE_Powered;
     8f8:	80 93 26 01 	sts	0x0126, r24
     8fc:	0d dd       	rcall	.-1510   	; 0x318 <EVENT_USB_Device_Connect>
			EVENT_USB_Device_Connect();
     8fe:	04 c0       	rjmp	.+8      	; 0x908 <__vector_10+0x84>
     900:	19 bc       	out	0x29, r1	; 41
     902:	10 92 26 01 	sts	0x0126, r1
		else
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			  USB_PLL_Off();

			USB_DeviceState = DEVICE_STATE_Unattached;
     906:	2a dd       	rcall	.-1452   	; 0x35c <EVENT_USB_Device_Disconnect>
     908:	80 91 e1 00 	lds	r24, 0x00E1
			EVENT_USB_Device_Disconnect();
     90c:	80 ff       	sbrs	r24, 0
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
     90e:	18 c0       	rjmp	.+48     	; 0x940 <__vector_10+0xbc>
     910:	80 91 e2 00 	lds	r24, 0x00E2
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
     914:	80 ff       	sbrs	r24, 0
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
     916:	14 c0       	rjmp	.+40     	; 0x940 <__vector_10+0xbc>
     918:	80 91 e2 00 	lds	r24, 0x00E2
     91c:	8e 7f       	andi	r24, 0xFE	; 254
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
     91e:	80 93 e2 00 	sts	0x00E2, r24
     922:	80 91 e2 00 	lds	r24, 0x00E2
     926:	80 61       	ori	r24, 0x10	; 16
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
     928:	80 93 e2 00 	sts	0x00E2, r24
     92c:	80 91 d8 00 	lds	r24, 0x00D8
     930:	80 62       	ori	r24, 0x20	; 32
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON |=  (1 << FRZCLK);
     932:	80 93 d8 00 	sts	0x00D8, r24
     936:	19 bc       	out	0x29, r1	; 41
     938:	85 e0       	ldi	r24, 0x05	; 5
     93a:	80 93 26 01 	sts	0x0126, r24

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
		EVENT_USB_Device_Disconnect();
		#else
		USB_DeviceState = DEVICE_STATE_Suspended;
     93e:	d0 d1       	rcall	.+928    	; 0xce0 <USB_Event_Stub>
     940:	80 91 e1 00 	lds	r24, 0x00E1
		EVENT_USB_Device_Suspend();
     944:	84 ff       	sbrs	r24, 4
     946:	2d c0       	rjmp	.+90     	; 0x9a2 <__vector_10+0x11e>
					case USB_INT_IDTI:
						return (USBINT & (1 << IDTI));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
     948:	80 91 e2 00 	lds	r24, 0x00E2
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
     94c:	84 ff       	sbrs	r24, 4
     94e:	29 c0       	rjmp	.+82     	; 0x9a2 <__vector_10+0x11e>
					case USB_INT_IDTI:
						return (USBCON & (1 << IDTE));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
     950:	8c e0       	ldi	r24, 0x0C	; 12
     952:	89 bd       	out	0x29, r24	; 41
     954:	8e e0       	ldi	r24, 0x0E	; 14
     956:	89 bd       	out	0x29, r24	; 41

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
     958:	09 b4       	in	r0, 0x29	; 41
     95a:	00 fe       	sbrs	r0, 0
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
     95c:	fd cf       	rjmp	.-6      	; 0x958 <__vector_10+0xd4>
     95e:	80 91 d8 00 	lds	r24, 0x00D8
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
     962:	8f 7d       	andi	r24, 0xDF	; 223
     964:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
     968:	80 91 e1 00 	lds	r24, 0x00E1
     96c:	8f 7e       	andi	r24, 0xEF	; 239
     96e:	80 93 e1 00 	sts	0x00E1, r24
						USBINT &= ~(1 << IDTI);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
     972:	80 91 e2 00 	lds	r24, 0x00E2
     976:	8f 7e       	andi	r24, 0xEF	; 239
     978:	80 93 e2 00 	sts	0x00E2, r24
						USBCON &= ~(1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
     97c:	80 91 e2 00 	lds	r24, 0x00E2
     980:	81 60       	ori	r24, 0x01	; 1
     982:	80 93 e2 00 	sts	0x00E2, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
     986:	80 91 22 01 	lds	r24, 0x0122
     98a:	88 23       	and	r24, r24
     98c:	21 f4       	brne	.+8      	; 0x996 <__vector_10+0x112>
		USB_INT_Clear(USB_INT_WAKEUPI);

		USB_INT_Disable(USB_INT_WAKEUPI);
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_Device_ConfigurationNumber)
     98e:	80 91 e3 00 	lds	r24, 0x00E3
     992:	87 ff       	sbrs	r24, 7
     994:	02 c0       	rjmp	.+4      	; 0x99a <__vector_10+0x116>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
     996:	84 e0       	ldi	r24, 0x04	; 4
     998:	01 c0       	rjmp	.+2      	; 0x99c <__vector_10+0x118>
		  USB_DeviceState = DEVICE_STATE_Configured;
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
     99a:	81 e0       	ldi	r24, 0x01	; 1
     99c:	80 93 26 01 	sts	0x0126, r24
     9a0:	9f d1       	rcall	.+830    	; 0xce0 <USB_Event_Stub>
     9a2:	80 91 e1 00 	lds	r24, 0x00E1
     9a6:	83 ff       	sbrs	r24, 3

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
		#else
		EVENT_USB_Device_WakeUp();
     9a8:	22 c0       	rjmp	.+68     	; 0x9ee <__vector_10+0x16a>
     9aa:	80 91 e2 00 	lds	r24, 0x00E2
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
     9ae:	83 ff       	sbrs	r24, 3
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
     9b0:	1e c0       	rjmp	.+60     	; 0x9ee <__vector_10+0x16a>
     9b2:	80 91 e1 00 	lds	r24, 0x00E1
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
     9b6:	87 7f       	andi	r24, 0xF7	; 247
     9b8:	80 93 e1 00 	sts	0x00E1, r24
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
     9bc:	82 e0       	ldi	r24, 0x02	; 2
     9be:	80 93 26 01 	sts	0x0126, r24
     9c2:	10 92 22 01 	sts	0x0122, r1
	{
		USB_INT_Clear(USB_INT_EORSTI);

		USB_DeviceState                = DEVICE_STATE_Default;
     9c6:	80 91 e1 00 	lds	r24, 0x00E1
     9ca:	8e 7f       	andi	r24, 0xFE	; 254
		USB_Device_ConfigurationNumber = 0;
     9cc:	80 93 e1 00 	sts	0x00E1, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
     9d0:	80 91 e2 00 	lds	r24, 0x00E2
     9d4:	8e 7f       	andi	r24, 0xFE	; 254
     9d6:	80 93 e2 00 	sts	0x00E2, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
     9da:	80 91 e2 00 	lds	r24, 0x00E2
     9de:	80 61       	ori	r24, 0x10	; 16
     9e0:	80 93 e2 00 	sts	0x00E2, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
     9e4:	80 e0       	ldi	r24, 0x00	; 0
     9e6:	60 e0       	ldi	r22, 0x00	; 0
     9e8:	42 e0       	ldi	r20, 0x02	; 2
     9ea:	5a de       	rcall	.-844    	; 0x6a0 <Endpoint_ConfigureEndpoint_Prv>
     9ec:	79 d1       	rcall	.+754    	; 0xce0 <USB_Event_Stub>
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
     9ee:	ff 91       	pop	r31
     9f0:	ef 91       	pop	r30
     9f2:	bf 91       	pop	r27
     9f4:	af 91       	pop	r26
     9f6:	9f 91       	pop	r25

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
     9f8:	8f 91       	pop	r24
     9fa:	7f 91       	pop	r23
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
     9fc:	6f 91       	pop	r22
     9fe:	5f 91       	pop	r21
     a00:	4f 91       	pop	r20
     a02:	3f 91       	pop	r19
     a04:	2f 91       	pop	r18
     a06:	0f 90       	pop	r0
     a08:	0b be       	out	0x3b, r0	; 59
     a0a:	0f 90       	pop	r0
     a0c:	0f be       	out	0x3f, r0	; 63
     a0e:	0f 90       	pop	r0
     a10:	1f 90       	pop	r1
     a12:	18 95       	reti

00000a14 <USB_Device_ProcessControlRequest>:
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_Device_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
     a14:	1f 93       	push	r17
     a16:	cf 93       	push	r28
     a18:	df 93       	push	r29
     a1a:	cd b7       	in	r28, 0x3d	; 61
     a1c:	de b7       	in	r29, 0x3e	; 62
     a1e:	ac 97       	sbiw	r28, 0x2c	; 44
     a20:	0f b6       	in	r0, 0x3f	; 63
     a22:	f8 94       	cli
     a24:	de bf       	out	0x3e, r29	; 62
     a26:	0f be       	out	0x3f, r0	; 63
     a28:	cd bf       	out	0x3d, r28	; 61
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
     a2a:	80 e0       	ldi	r24, 0x00	; 0
	USB_ControlRequest.bRequest      = Endpoint_Read_8();
	USB_ControlRequest.wValue        = Endpoint_Read_16_LE();
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;
     a2c:	e7 e2       	ldi	r30, 0x27	; 39
     a2e:	f1 e0       	ldi	r31, 0x01	; 1
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
     a30:	90 91 f1 00 	lds	r25, 0x00F1

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_8();
     a34:	91 93       	st	Z+, r25
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
     a36:	8f 5f       	subi	r24, 0xFF	; 255
     a38:	88 30       	cpi	r24, 0x08	; 8
     a3a:	d1 f7       	brne	.-12     	; 0xa30 <USB_Device_ProcessControlRequest+0x1c>
	  *(RequestHeader++) = Endpoint_Read_8();
	#endif

	EVENT_USB_Device_ControlRequest();
     a3c:	a1 dc       	rcall	.-1726   	; 0x380 <EVENT_USB_Device_ControlRequest>
     a3e:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     a42:	83 ff       	sbrs	r24, 3

	if (Endpoint_IsSETUPReceived())
     a44:	35 c1       	rjmp	.+618    	; 0xcb0 <USB_Device_ProcessControlRequest+0x29c>
     a46:	80 91 27 01 	lds	r24, 0x0127
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
     a4a:	20 91 28 01 	lds	r18, 0x0128

		switch (USB_ControlRequest.bRequest)
     a4e:	25 30       	cpi	r18, 0x05	; 5
     a50:	09 f4       	brne	.+2      	; 0xa54 <USB_Device_ProcessControlRequest+0x40>
     a52:	84 c0       	rjmp	.+264    	; 0xb5c <USB_Device_ProcessControlRequest+0x148>
     a54:	26 30       	cpi	r18, 0x06	; 6
     a56:	40 f4       	brcc	.+16     	; 0xa68 <USB_Device_ProcessControlRequest+0x54>
     a58:	21 30       	cpi	r18, 0x01	; 1
     a5a:	a1 f1       	breq	.+104    	; 0xac4 <USB_Device_ProcessControlRequest+0xb0>
     a5c:	21 30       	cpi	r18, 0x01	; 1
     a5e:	70 f0       	brcs	.+28     	; 0xa7c <USB_Device_ProcessControlRequest+0x68>
     a60:	23 30       	cpi	r18, 0x03	; 3
     a62:	09 f0       	breq	.+2      	; 0xa66 <USB_Device_ProcessControlRequest+0x52>
     a64:	25 c1       	rjmp	.+586    	; 0xcb0 <USB_Device_ProcessControlRequest+0x29c>
     a66:	2e c0       	rjmp	.+92     	; 0xac4 <USB_Device_ProcessControlRequest+0xb0>
     a68:	28 30       	cpi	r18, 0x08	; 8
     a6a:	09 f4       	brne	.+2      	; 0xa6e <USB_Device_ProcessControlRequest+0x5a>
     a6c:	f3 c0       	rjmp	.+486    	; 0xc54 <USB_Device_ProcessControlRequest+0x240>
     a6e:	29 30       	cpi	r18, 0x09	; 9
     a70:	09 f4       	brne	.+2      	; 0xa74 <USB_Device_ProcessControlRequest+0x60>
     a72:	02 c1       	rjmp	.+516    	; 0xc78 <USB_Device_ProcessControlRequest+0x264>
     a74:	26 30       	cpi	r18, 0x06	; 6
     a76:	09 f0       	breq	.+2      	; 0xa7a <USB_Device_ProcessControlRequest+0x66>
     a78:	1b c1       	rjmp	.+566    	; 0xcb0 <USB_Device_ProcessControlRequest+0x29c>
     a7a:	93 c0       	rjmp	.+294    	; 0xba2 <USB_Device_ProcessControlRequest+0x18e>
     a7c:	80 38       	cpi	r24, 0x80	; 128
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
     a7e:	21 f0       	breq	.+8      	; 0xa88 <USB_Device_ProcessControlRequest+0x74>
     a80:	82 38       	cpi	r24, 0x82	; 130
     a82:	09 f0       	breq	.+2      	; 0xa86 <USB_Device_ProcessControlRequest+0x72>
     a84:	15 c1       	rjmp	.+554    	; 0xcb0 <USB_Device_ProcessControlRequest+0x29c>
     a86:	08 c0       	rjmp	.+16     	; 0xa98 <USB_Device_ProcessControlRequest+0x84>
     a88:	80 91 23 01 	lds	r24, 0x0123
	Endpoint_ClearOUT();
}

static void USB_Device_GetStatus(void)
{
	uint8_t CurrentStatus = 0;
     a8c:	90 91 24 01 	lds	r25, 0x0124
			if (USB_Device_CurrentlySelfPowered)
			  CurrentStatus |= FEATURE_SELFPOWERED_ENABLED;
			#endif

			#if !defined(NO_DEVICE_REMOTE_WAKEUP)
			if (USB_Device_RemoteWakeupEnabled)
     a90:	99 23       	and	r25, r25
     a92:	71 f0       	breq	.+28     	; 0xab0 <USB_Device_ProcessControlRequest+0x9c>
     a94:	82 60       	ori	r24, 0x02	; 2
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
     a96:	0c c0       	rjmp	.+24     	; 0xab0 <USB_Device_ProcessControlRequest+0x9c>
     a98:	80 91 2b 01 	lds	r24, 0x012B
			#endif
			break;
		case (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_ENDPOINT):
			#if !defined(CONTROL_ONLY_DEVICE)
			Endpoint_SelectEndpoint((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
     a9c:	8f 70       	andi	r24, 0x0F	; 15
     a9e:	80 93 e9 00 	sts	0x00E9, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     aa2:	90 91 eb 00 	lds	r25, 0x00EB
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
     aa6:	81 e0       	ldi	r24, 0x01	; 1

			CurrentStatus = Endpoint_IsStalled();
     aa8:	95 ff       	sbrs	r25, 5
     aaa:	80 e0       	ldi	r24, 0x00	; 0
     aac:	10 92 e9 00 	sts	0x00E9, r1
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     ab0:	90 91 e8 00 	lds	r25, 0x00E8
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     ab4:	97 7f       	andi	r25, 0xF7	; 247
     ab6:	90 93 e8 00 	sts	0x00E8, r25
     aba:	80 93 f1 00 	sts	0x00F1, r24
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
     abe:	10 92 f1 00 	sts	0x00F1, r1
				UEDATX = (Data >> 8);
     ac2:	d3 c0       	rjmp	.+422    	; 0xc6a <USB_Device_ProcessControlRequest+0x256>
     ac4:	88 23       	and	r24, r24
				}

				break;
			case REQ_ClearFeature:
			case REQ_SetFeature:
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
     ac6:	19 f0       	breq	.+6      	; 0xace <USB_Device_ProcessControlRequest+0xba>
     ac8:	82 30       	cpi	r24, 0x02	; 2
     aca:	09 f0       	breq	.+2      	; 0xace <USB_Device_ProcessControlRequest+0xba>
     acc:	f1 c0       	rjmp	.+482    	; 0xcb0 <USB_Device_ProcessControlRequest+0x29c>
     ace:	90 e0       	ldi	r25, 0x00	; 0
	Endpoint_ClearStatusStage();
}

static void USB_Device_ClearSetFeature(void)
{
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
     ad0:	8f 71       	andi	r24, 0x1F	; 31
     ad2:	90 70       	andi	r25, 0x00	; 0
     ad4:	00 97       	sbiw	r24, 0x00	; 0
     ad6:	29 f0       	breq	.+10     	; 0xae2 <USB_Device_ProcessControlRequest+0xce>
     ad8:	82 30       	cpi	r24, 0x02	; 2
     ada:	91 05       	cpc	r25, r1
     adc:	09 f0       	breq	.+2      	; 0xae0 <USB_Device_ProcessControlRequest+0xcc>
     ade:	e8 c0       	rjmp	.+464    	; 0xcb0 <USB_Device_ProcessControlRequest+0x29c>
     ae0:	0b c0       	rjmp	.+22     	; 0xaf8 <USB_Device_ProcessControlRequest+0xe4>
     ae2:	80 91 29 01 	lds	r24, 0x0129
	{
		#if !defined(NO_DEVICE_REMOTE_WAKEUP)
		case REQREC_DEVICE:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
     ae6:	81 30       	cpi	r24, 0x01	; 1
     ae8:	09 f0       	breq	.+2      	; 0xaec <USB_Device_ProcessControlRequest+0xd8>
     aea:	e2 c0       	rjmp	.+452    	; 0xcb0 <USB_Device_ProcessControlRequest+0x29c>
     aec:	23 30       	cpi	r18, 0x03	; 3
			  USB_Device_RemoteWakeupEnabled = (USB_ControlRequest.bRequest == REQ_SetFeature);
     aee:	09 f0       	breq	.+2      	; 0xaf2 <USB_Device_ProcessControlRequest+0xde>
     af0:	80 e0       	ldi	r24, 0x00	; 0
     af2:	80 93 24 01 	sts	0x0124, r24
     af6:	2c c0       	rjmp	.+88     	; 0xb50 <USB_Device_ProcessControlRequest+0x13c>
     af8:	80 91 29 01 	lds	r24, 0x0129

			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
     afc:	88 23       	and	r24, r24
     afe:	41 f5       	brne	.+80     	; 0xb50 <USB_Device_ProcessControlRequest+0x13c>
     b00:	20 91 2b 01 	lds	r18, 0x012B
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
     b04:	2f 70       	andi	r18, 0x0F	; 15
     b06:	09 f4       	brne	.+2      	; 0xb0a <USB_Device_ProcessControlRequest+0xf6>

				if (EndpointIndex == ENDPOINT_CONTROLEP)
     b08:	d3 c0       	rjmp	.+422    	; 0xcb0 <USB_Device_ProcessControlRequest+0x29c>
     b0a:	20 93 e9 00 	sts	0x00E9, r18
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     b0e:	80 91 eb 00 	lds	r24, 0x00EB
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
     b12:	80 ff       	sbrs	r24, 0
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
     b14:	1d c0       	rjmp	.+58     	; 0xb50 <USB_Device_ProcessControlRequest+0x13c>
     b16:	80 91 28 01 	lds	r24, 0x0128
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
     b1a:	83 30       	cpi	r24, 0x03	; 3
     b1c:	21 f4       	brne	.+8      	; 0xb26 <USB_Device_ProcessControlRequest+0x112>
     b1e:	80 91 eb 00 	lds	r24, 0x00EB
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
     b22:	80 62       	ori	r24, 0x20	; 32
     b24:	13 c0       	rjmp	.+38     	; 0xb4c <USB_Device_ProcessControlRequest+0x138>
     b26:	80 91 eb 00 	lds	r24, 0x00EB
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
     b2a:	80 61       	ori	r24, 0x10	; 16
     b2c:	80 93 eb 00 	sts	0x00EB, r24
     b30:	81 e0       	ldi	r24, 0x01	; 1
			 *  \param[in] Address  Endpoint address whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t Address)
			{
				UERST = (1 << (Address & ENDPOINT_EPNUM_MASK));
     b32:	90 e0       	ldi	r25, 0x00	; 0
     b34:	02 c0       	rjmp	.+4      	; 0xb3a <USB_Device_ProcessControlRequest+0x126>
     b36:	88 0f       	add	r24, r24
     b38:	99 1f       	adc	r25, r25
     b3a:	2a 95       	dec	r18
     b3c:	e2 f7       	brpl	.-8      	; 0xb36 <USB_Device_ProcessControlRequest+0x122>
     b3e:	80 93 ea 00 	sts	0x00EA, r24
     b42:	10 92 ea 00 	sts	0x00EA, r1
				UERST = 0;
     b46:	80 91 eb 00 	lds	r24, 0x00EB

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
     b4a:	88 60       	ori	r24, 0x08	; 8
     b4c:	80 93 eb 00 	sts	0x00EB, r24
     b50:	10 92 e9 00 	sts	0x00E9, r1
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     b54:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     b58:	87 7f       	andi	r24, 0xF7	; 247
     b5a:	8a c0       	rjmp	.+276    	; 0xc70 <USB_Device_ProcessControlRequest+0x25c>
     b5c:	88 23       	and	r24, r24
					USB_Device_ClearSetFeature();
				}

				break;
			case REQ_SetAddress:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
     b5e:	09 f0       	breq	.+2      	; 0xb62 <USB_Device_ProcessControlRequest+0x14e>
     b60:	a7 c0       	rjmp	.+334    	; 0xcb0 <USB_Device_ProcessControlRequest+0x29c>
     b62:	10 91 29 01 	lds	r17, 0x0129
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t DeviceAddress = (USB_ControlRequest.wValue & 0x7F);
     b66:	1f 77       	andi	r17, 0x7F	; 127
     b68:	80 91 e3 00 	lds	r24, 0x00E3
			#endif

			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				UDADDR = (UDADDR & (1 << ADDEN)) | (Address & 0x7F);
     b6c:	80 78       	andi	r24, 0x80	; 128
     b6e:	81 2b       	or	r24, r17
     b70:	80 93 e3 00 	sts	0x00E3, r24
     b74:	80 91 e8 00 	lds	r24, 0x00E8
     b78:	87 7f       	andi	r24, 0xF7	; 247
     b7a:	80 93 e8 00 	sts	0x00E8, r24
     b7e:	01 de       	rcall	.-1022   	; 0x782 <Endpoint_ClearStatusStage>

	USB_Device_SetDeviceAddress(DeviceAddress);

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
     b80:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     b84:	80 ff       	sbrs	r24, 0
     b86:	fc cf       	rjmp	.-8      	; 0xb80 <USB_Device_ProcessControlRequest+0x16c>

	while (!(Endpoint_IsINReady()));
     b88:	80 91 e3 00 	lds	r24, 0x00E3
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address)
			{
				(void)Address;
				
				UDADDR |= (1 << ADDEN);
     b8c:	80 68       	ori	r24, 0x80	; 128
     b8e:	80 93 e3 00 	sts	0x00E3, r24
     b92:	11 23       	and	r17, r17
     b94:	11 f0       	breq	.+4      	; 0xb9a <USB_Device_ProcessControlRequest+0x186>

	USB_Device_EnableDeviceAddress(DeviceAddress);

	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
     b96:	83 e0       	ldi	r24, 0x03	; 3
     b98:	01 c0       	rjmp	.+2      	; 0xb9c <USB_Device_ProcessControlRequest+0x188>
     b9a:	82 e0       	ldi	r24, 0x02	; 2
     b9c:	80 93 26 01 	sts	0x0126, r24
     ba0:	87 c0       	rjmp	.+270    	; 0xcb0 <USB_Device_ProcessControlRequest+0x29c>
     ba2:	80 58       	subi	r24, 0x80	; 128
     ba4:	82 30       	cpi	r24, 0x02	; 2
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_SetAddress();

				break;
			case REQ_GetDescriptor:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
     ba6:	08 f0       	brcs	.+2      	; 0xbaa <USB_Device_ProcessControlRequest+0x196>
     ba8:	83 c0       	rjmp	.+262    	; 0xcb0 <USB_Device_ProcessControlRequest+0x29c>
     baa:	80 91 29 01 	lds	r24, 0x0129
	    !(defined(USE_FLASH_DESCRIPTORS) || defined(USE_EEPROM_DESCRIPTORS) || defined(USE_RAM_DESCRIPTORS))
	uint8_t DescriptorAddressSpace;
	#endif

	#if !defined(NO_INTERNAL_SERIAL) && (USE_INTERNAL_SERIAL != NO_DESCRIPTOR)
	if (USB_ControlRequest.wValue == ((DTYPE_String << 8) | USE_INTERNAL_SERIAL))
     bae:	90 91 2a 01 	lds	r25, 0x012A
     bb2:	23 e0       	ldi	r18, 0x03	; 3
     bb4:	8c 3d       	cpi	r24, 0xDC	; 220
     bb6:	92 07       	cpc	r25, r18
     bb8:	a9 f5       	brne	.+106    	; 0xc24 <USB_Device_ProcessControlRequest+0x210>
     bba:	83 e0       	ldi	r24, 0x03	; 3
     bbc:	8c 83       	std	Y+4, r24	; 0x04
	{
		USB_Descriptor_Header_t Header;
		uint16_t                UnicodeString[INTERNAL_SERIAL_LENGTH_BITS / 4];
	} SignatureDescriptor;

	SignatureDescriptor.Header.Type = DTYPE_String;
     bbe:	8a e2       	ldi	r24, 0x2A	; 42
     bc0:	8b 83       	std	Y+3, r24	; 0x03
	SignatureDescriptor.Header.Size = USB_STRING_LEN(INTERNAL_SERIAL_LENGTH_BITS / 4);
     bc2:	5f b7       	in	r21, 0x3f	; 63
     bc4:	f8 94       	cli
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
     bc6:	de 01       	movw	r26, r28
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
     bc8:	13 96       	adiw	r26, 0x03	; 3
				__builtin_ssrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				cli();
				#endif

				GCC_MEMORY_BARRIER();
     bca:	80 e0       	ldi	r24, 0x00	; 0
     bcc:	90 e0       	ldi	r25, 0x00	; 0
     bce:	4e e0       	ldi	r20, 0x0E	; 14
     bd0:	61 e2       	ldi	r22, 0x21	; 33
			static inline void USB_Device_GetSerialString(uint16_t* const UnicodeString)
			{
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;
     bd2:	e4 2f       	mov	r30, r20

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
				{
					uint8_t SerialByte = boot_signature_byte_get(SigReadAddress);
     bd4:	f0 e0       	ldi	r31, 0x00	; 0
     bd6:	60 93 57 00 	sts	0x0057, r22
     bda:	e4 91       	lpm	r30, Z
     bdc:	80 ff       	sbrs	r24, 0
     bde:	03 c0       	rjmp	.+6      	; 0xbe6 <USB_Device_ProcessControlRequest+0x1d2>

					if (SerialCharNum & 0x01)
     be0:	e2 95       	swap	r30
     be2:	ef 70       	andi	r30, 0x0F	; 15
					{
						SerialByte >>= 4;
     be4:	4f 5f       	subi	r20, 0xFF	; 255
     be6:	ef 70       	andi	r30, 0x0F	; 15
						SigReadAddress++;
     be8:	2e 2f       	mov	r18, r30
					}

					SerialByte &= 0x0F;
     bea:	30 e0       	ldi	r19, 0x00	; 0
     bec:	ea 30       	cpi	r30, 0x0A	; 10
     bee:	18 f0       	brcs	.+6      	; 0xbf6 <USB_Device_ProcessControlRequest+0x1e2>

					UnicodeString[SerialCharNum] = cpu_to_le16((SerialByte >= 10) ?
     bf0:	29 5c       	subi	r18, 0xC9	; 201
     bf2:	3f 4f       	sbci	r19, 0xFF	; 255
     bf4:	02 c0       	rjmp	.+4      	; 0xbfa <USB_Device_ProcessControlRequest+0x1e6>
     bf6:	20 5d       	subi	r18, 0xD0	; 208
     bf8:	3f 4f       	sbci	r19, 0xFF	; 255
     bfa:	13 96       	adiw	r26, 0x03	; 3
     bfc:	3c 93       	st	X, r19
     bfe:	2e 93       	st	-X, r18
     c00:	12 97       	sbiw	r26, 0x02	; 2
     c02:	01 96       	adiw	r24, 0x01	; 1
     c04:	12 96       	adiw	r26, 0x02	; 2
     c06:	84 31       	cpi	r24, 0x14	; 20
     c08:	91 05       	cpc	r25, r1
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
     c0a:	19 f7       	brne	.-58     	; 0xbd2 <USB_Device_ProcessControlRequest+0x1be>
     c0c:	5f bf       	out	0x3f, r21	; 63
     c0e:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     c12:	87 7f       	andi	r24, 0xF7	; 247
     c14:	80 93 e8 00 	sts	0x00E8, r24
     c18:	ce 01       	movw	r24, r28
     c1a:	03 96       	adiw	r24, 0x03	; 3

	USB_Device_GetSerialString(SignatureDescriptor.UnicodeString);

	Endpoint_ClearSETUP();

	Endpoint_Write_Control_Stream_LE(&SignatureDescriptor, sizeof(SignatureDescriptor));
     c1c:	6a e2       	ldi	r22, 0x2A	; 42
     c1e:	70 e0       	ldi	r23, 0x00	; 0
     c20:	3d dc       	rcall	.-1926   	; 0x49c <Endpoint_Write_Control_Stream_LE>
     c22:	12 c0       	rjmp	.+36     	; 0xc48 <USB_Device_ProcessControlRequest+0x234>
     c24:	60 91 2b 01 	lds	r22, 0x012B
     c28:	ae 01       	movw	r20, r28
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif

	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
     c2a:	4f 5f       	subi	r20, 0xFF	; 255
     c2c:	5f 4f       	sbci	r21, 0xFF	; 255
     c2e:	0a dc       	rcall	.-2028   	; 0x444 <CALLBACK_USB_GetDescriptor>
     c30:	bc 01       	movw	r22, r24
     c32:	00 97       	sbiw	r24, 0x00	; 0
     c34:	09 f4       	brne	.+2      	; 0xc38 <USB_Device_ProcessControlRequest+0x224>
     c36:	3c c0       	rjmp	.+120    	; 0xcb0 <USB_Device_ProcessControlRequest+0x29c>
     c38:	80 91 e8 00 	lds	r24, 0x00E8
     c3c:	87 7f       	andi	r24, 0xF7	; 247
     c3e:	80 93 e8 00 	sts	0x00E8, r24
     c42:	89 81       	ldd	r24, Y+1	; 0x01
     c44:	9a 81       	ldd	r25, Y+2	; 0x02
     c46:	cf dc       	rcall	.-1634   	; 0x5e6 <Endpoint_Write_Control_PStream_LE>
     c48:	80 91 e8 00 	lds	r24, 0x00E8
	#if defined(USE_RAM_DESCRIPTORS) || !defined(ARCH_HAS_MULTI_ADDRESS_SPACE)
	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_EEPROM_DESCRIPTORS)
	Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_FLASH_DESCRIPTORS)
	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
     c4c:	8b 77       	andi	r24, 0x7B	; 123
     c4e:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     c52:	2e c0       	rjmp	.+92     	; 0xcb0 <USB_Device_ProcessControlRequest+0x29c>
     c54:	80 38       	cpi	r24, 0x80	; 128
     c56:	61 f5       	brne	.+88     	; 0xcb0 <USB_Device_ProcessControlRequest+0x29c>
     c58:	80 91 e8 00 	lds	r24, 0x00E8
     c5c:	87 7f       	andi	r24, 0xF7	; 247
					USB_Device_GetDescriptor();
				}

				break;
			case REQ_GetConfiguration:
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
     c5e:	80 93 e8 00 	sts	0x00E8, r24
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     c62:	80 91 22 01 	lds	r24, 0x0122
     c66:	80 93 f1 00 	sts	0x00F1, r24
     c6a:	80 91 e8 00 	lds	r24, 0x00E8

static void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();

	Endpoint_Write_8(USB_Device_ConfigurationNumber);
     c6e:	8e 77       	andi	r24, 0x7E	; 126
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     c70:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     c74:	86 dd       	rcall	.-1268   	; 0x782 <Endpoint_ClearStatusStage>
     c76:	1c c0       	rjmp	.+56     	; 0xcb0 <USB_Device_ProcessControlRequest+0x29c>
     c78:	88 23       	and	r24, r24
     c7a:	d1 f4       	brne	.+52     	; 0xcb0 <USB_Device_ProcessControlRequest+0x29c>
     c7c:	90 91 29 01 	lds	r25, 0x0129
	Endpoint_ClearIN();

	Endpoint_ClearStatusStage();
     c80:	92 30       	cpi	r25, 0x02	; 2
     c82:	b0 f4       	brcc	.+44     	; 0xcb0 <USB_Device_ProcessControlRequest+0x29c>
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_GetConfiguration();

				break;
			case REQ_SetConfiguration:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
     c84:	80 91 e8 00 	lds	r24, 0x00E8
}

static void USB_Device_SetConfiguration(void)
{
	#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
     c88:	87 7f       	andi	r24, 0xF7	; 247
     c8a:	80 93 e8 00 	sts	0x00E8, r24
     c8e:	90 93 22 01 	sts	0x0122, r25
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     c92:	77 dd       	rcall	.-1298   	; 0x782 <Endpoint_ClearStatusStage>
     c94:	80 91 22 01 	lds	r24, 0x0122
     c98:	88 23       	and	r24, r24
	#endif
	#endif

	Endpoint_ClearSETUP();

	USB_Device_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
     c9a:	21 f4       	brne	.+8      	; 0xca4 <USB_Device_ProcessControlRequest+0x290>
     c9c:	80 91 e3 00 	lds	r24, 0x00E3

	Endpoint_ClearStatusStage();
     ca0:	87 ff       	sbrs	r24, 7

	if (USB_Device_ConfigurationNumber)
     ca2:	02 c0       	rjmp	.+4      	; 0xca8 <USB_Device_ProcessControlRequest+0x294>
     ca4:	84 e0       	ldi	r24, 0x04	; 4
     ca6:	01 c0       	rjmp	.+2      	; 0xcaa <USB_Device_ProcessControlRequest+0x296>
     ca8:	81 e0       	ldi	r24, 0x01	; 1
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
     caa:	80 93 26 01 	sts	0x0126, r24
	  USB_DeviceState = DEVICE_STATE_Configured;
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
     cae:	5f db       	rcall	.-2370   	; 0x36e <EVENT_USB_Device_ConfigurationChanged>
     cb0:	80 91 e8 00 	lds	r24, 0x00E8
     cb4:	83 ff       	sbrs	r24, 3
     cb6:	0a c0       	rjmp	.+20     	; 0xccc <USB_Device_ProcessControlRequest+0x2b8>
     cb8:	80 91 e8 00 	lds	r24, 0x00E8

	EVENT_USB_Device_ConfigurationChanged();
     cbc:	87 7f       	andi	r24, 0xF7	; 247
     cbe:	80 93 e8 00 	sts	0x00E8, r24
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     cc2:	80 91 eb 00 	lds	r24, 0x00EB
			default:
				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
     cc6:	80 62       	ori	r24, 0x20	; 32
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     cc8:	80 93 eb 00 	sts	0x00EB, r24
     ccc:	ac 96       	adiw	r28, 0x2c	; 44
     cce:	0f b6       	in	r0, 0x3f	; 63
     cd0:	f8 94       	cli
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
     cd2:	de bf       	out	0x3e, r29	; 62
     cd4:	0f be       	out	0x3f, r0	; 63
     cd6:	cd bf       	out	0x3d, r28	; 61
     cd8:	df 91       	pop	r29
     cda:	cf 91       	pop	r28
	{
		Endpoint_ClearSETUP();
		Endpoint_StallTransaction();
	}
}
     cdc:	1f 91       	pop	r17
     cde:	08 95       	ret

00000ce0 <USB_Event_Stub>:
#include "Events.h"

void USB_Event_Stub(void)
{

}
     ce0:	08 95       	ret

00000ce2 <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
     ce2:	cf 93       	push	r28
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_DeviceTask(void)
{
	if (USB_DeviceState == DEVICE_STATE_Unattached)
     ce4:	80 91 26 01 	lds	r24, 0x0126
     ce8:	88 23       	and	r24, r24
     cea:	a9 f0       	breq	.+42     	; 0xd16 <USB_USBTask+0x34>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
     cec:	80 91 e9 00 	lds	r24, 0x00E9
     cf0:	8f 70       	andi	r24, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
     cf2:	90 91 ec 00 	lds	r25, 0x00EC
     cf6:	90 ff       	sbrs	r25, 0
     cf8:	02 c0       	rjmp	.+4      	; 0xcfe <USB_USBTask+0x1c>
     cfa:	c0 e8       	ldi	r28, 0x80	; 128
     cfc:	01 c0       	rjmp	.+2      	; 0xd00 <USB_USBTask+0x1e>
     cfe:	c0 e0       	ldi	r28, 0x00	; 0
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
     d00:	c8 2b       	or	r28, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     d02:	10 92 e9 00 	sts	0x00E9, r1
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     d06:	80 91 e8 00 	lds	r24, 0x00E8

	uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

	if (Endpoint_IsSETUPReceived())
     d0a:	83 ff       	sbrs	r24, 3
     d0c:	01 c0       	rjmp	.+2      	; 0xd10 <USB_USBTask+0x2e>
	  USB_Device_ProcessControlRequest();
     d0e:	82 de       	rcall	.-764    	; 0xa14 <USB_Device_ProcessControlRequest>
     d10:	cf 70       	andi	r28, 0x0F	; 15
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     d12:	c0 93 e9 00 	sts	0x00E9, r28
     d16:	cf 91       	pop	r28
	#elif defined(USB_CAN_BE_HOST)
		USB_HostTask();
	#elif defined(USB_CAN_BE_DEVICE)
		USB_DeviceTask();
	#endif
}
     d18:	08 95       	ret

00000d1a <Audio_Device_ProcessControlRequest>:
#define  __INCLUDE_FROM_AUDIO_DRIVER
#define  __INCLUDE_FROM_AUDIO_DEVICE_C
#include "AudioClassDevice.h"

void Audio_Device_ProcessControlRequest(USB_ClassInfo_Audio_Device_t* const AudioInterfaceInfo)
{
     d1a:	4f 92       	push	r4
     d1c:	5f 92       	push	r5
     d1e:	6f 92       	push	r6
     d20:	7f 92       	push	r7
     d22:	8f 92       	push	r8
     d24:	9f 92       	push	r9
     d26:	af 92       	push	r10
     d28:	bf 92       	push	r11
     d2a:	cf 92       	push	r12
     d2c:	df 92       	push	r13
     d2e:	ef 92       	push	r14
     d30:	ff 92       	push	r15
     d32:	0f 93       	push	r16
     d34:	1f 93       	push	r17
     d36:	cf 93       	push	r28
     d38:	df 93       	push	r29
     d3a:	00 d0       	rcall	.+0      	; 0xd3c <Audio_Device_ProcessControlRequest+0x22>
     d3c:	cd b7       	in	r28, 0x3d	; 61
     d3e:	de b7       	in	r29, 0x3e	; 62
     d40:	5c 01       	movw	r10, r24
				}
			}

			break;
	}
}
     d42:	4d b6       	in	r4, 0x3d	; 61
     d44:	5e b6       	in	r5, 0x3e	; 62
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     d46:	80 91 e8 00 	lds	r24, 0x00E8
#define  __INCLUDE_FROM_AUDIO_DEVICE_C
#include "AudioClassDevice.h"

void Audio_Device_ProcessControlRequest(USB_ClassInfo_Audio_Device_t* const AudioInterfaceInfo)
{
	if (!(Endpoint_IsSETUPReceived()))
     d4a:	83 ff       	sbrs	r24, 3
     d4c:	4d c1       	rjmp	.+666    	; 0xfe8 <Audio_Device_ProcessControlRequest+0x2ce>
	  return;

	if ((USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT) == REQREC_INTERFACE)
     d4e:	20 91 27 01 	lds	r18, 0x0127
     d52:	82 2f       	mov	r24, r18
     d54:	90 e0       	ldi	r25, 0x00	; 0
     d56:	8f 71       	andi	r24, 0x1F	; 31
     d58:	90 70       	andi	r25, 0x00	; 0
     d5a:	81 30       	cpi	r24, 0x01	; 1
     d5c:	91 05       	cpc	r25, r1
     d5e:	41 f4       	brne	.+16     	; 0xd70 <Audio_Device_ProcessControlRequest+0x56>
	{
		uint8_t InterfaceIndex = (USB_ControlRequest.wIndex & 0xFF);
     d60:	30 91 2b 01 	lds	r19, 0x012B
	
		if ((InterfaceIndex != AudioInterfaceInfo->Config.ControlInterfaceNumber) &&
     d64:	f5 01       	movw	r30, r10
     d66:	40 81       	ld	r20, Z
     d68:	34 17       	cp	r19, r20
     d6a:	79 f0       	breq	.+30     	; 0xd8a <Audio_Device_ProcessControlRequest+0x70>
     d6c:	41 81       	ldd	r20, Z+1	; 0x01
     d6e:	0a c0       	rjmp	.+20     	; 0xd84 <Audio_Device_ProcessControlRequest+0x6a>
		    (InterfaceIndex != AudioInterfaceInfo->Config.StreamingInterfaceNumber))
		{
			return;
		}
	}
	else if ((USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT) == REQREC_ENDPOINT)
     d70:	82 30       	cpi	r24, 0x02	; 2
     d72:	91 05       	cpc	r25, r1
     d74:	51 f4       	brne	.+20     	; 0xd8a <Audio_Device_ProcessControlRequest+0x70>
	{
		uint8_t EndpointAddress = (USB_ControlRequest.wIndex & 0xFF);
     d76:	30 91 2b 01 	lds	r19, 0x012B
	
		if ((EndpointAddress != AudioInterfaceInfo->Config.DataINEndpoint.Address) &&
     d7a:	f5 01       	movw	r30, r10
     d7c:	42 81       	ldd	r20, Z+2	; 0x02
     d7e:	34 17       	cp	r19, r20
     d80:	21 f0       	breq	.+8      	; 0xd8a <Audio_Device_ProcessControlRequest+0x70>
     d82:	47 81       	ldd	r20, Z+7	; 0x07
     d84:	34 17       	cp	r19, r20
     d86:	09 f0       	breq	.+2      	; 0xd8a <Audio_Device_ProcessControlRequest+0x70>
     d88:	2f c1       	rjmp	.+606    	; 0xfe8 <Audio_Device_ProcessControlRequest+0x2ce>
		{
			return;
		}
	}

	switch (USB_ControlRequest.bRequest)
     d8a:	d0 90 28 01 	lds	r13, 0x0128
     d8e:	fb e0       	ldi	r31, 0x0B	; 11
     d90:	df 16       	cp	r13, r31
     d92:	a9 f0       	breq	.+42     	; 0xdbe <Audio_Device_ProcessControlRequest+0xa4>
     d94:	fd 15       	cp	r31, r13
     d96:	30 f0       	brcs	.+12     	; 0xda4 <Audio_Device_ProcessControlRequest+0x8a>
     d98:	2d 2d       	mov	r18, r13
     d9a:	21 50       	subi	r18, 0x01	; 1
     d9c:	24 30       	cpi	r18, 0x04	; 4
     d9e:	08 f0       	brcs	.+2      	; 0xda2 <Audio_Device_ProcessControlRequest+0x88>
     da0:	23 c1       	rjmp	.+582    	; 0xfe8 <Audio_Device_ProcessControlRequest+0x2ce>
     da2:	2c c0       	rjmp	.+88     	; 0xdfc <Audio_Device_ProcessControlRequest+0xe2>
     da4:	31 e8       	ldi	r19, 0x81	; 129
     da6:	d3 16       	cp	r13, r19
     da8:	08 f4       	brcc	.+2      	; 0xdac <Audio_Device_ProcessControlRequest+0x92>
     daa:	1e c1       	rjmp	.+572    	; 0xfe8 <Audio_Device_ProcessControlRequest+0x2ce>
     dac:	64 e8       	ldi	r22, 0x84	; 132
     dae:	6d 15       	cp	r22, r13
     db0:	08 f0       	brcs	.+2      	; 0xdb4 <Audio_Device_ProcessControlRequest+0x9a>
     db2:	ab c0       	rjmp	.+342    	; 0xf0a <Audio_Device_ProcessControlRequest+0x1f0>
     db4:	7f ef       	ldi	r23, 0xFF	; 255
     db6:	d7 16       	cp	r13, r23
     db8:	09 f0       	breq	.+2      	; 0xdbc <Audio_Device_ProcessControlRequest+0xa2>
     dba:	16 c1       	rjmp	.+556    	; 0xfe8 <Audio_Device_ProcessControlRequest+0x2ce>
     dbc:	14 c0       	rjmp	.+40     	; 0xde6 <Audio_Device_ProcessControlRequest+0xcc>
	{
		case REQ_SetInterface:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_INTERFACE))
     dbe:	21 30       	cpi	r18, 0x01	; 1
     dc0:	09 f0       	breq	.+2      	; 0xdc4 <Audio_Device_ProcessControlRequest+0xaa>
     dc2:	12 c1       	rjmp	.+548    	; 0xfe8 <Audio_Device_ProcessControlRequest+0x2ce>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     dc4:	80 91 e8 00 	lds	r24, 0x00E8
     dc8:	87 7f       	andi	r24, 0xF7	; 247
     dca:	80 93 e8 00 	sts	0x00E8, r24
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
     dce:	d9 dc       	rcall	.-1614   	; 0x782 <Endpoint_ClearStatusStage>
     dd0:	90 91 29 01 	lds	r25, 0x0129

				AudioInterfaceInfo->State.InterfaceEnabled = ((USB_ControlRequest.wValue & 0xFF) != 0);
     dd4:	81 e0       	ldi	r24, 0x01	; 1
     dd6:	99 23       	and	r25, r25
     dd8:	09 f4       	brne	.+2      	; 0xddc <Audio_Device_ProcessControlRequest+0xc2>
     dda:	80 e0       	ldi	r24, 0x00	; 0
     ddc:	f5 01       	movw	r30, r10
     dde:	84 87       	std	Z+12, r24	; 0x0c
     de0:	c5 01       	movw	r24, r10
				EVENT_Audio_Device_StreamStartStop(AudioInterfaceInfo);
     de2:	30 d1       	rcall	.+608    	; 0x1044 <Audio_Device_Event_Stub>
     de4:	01 c1       	rjmp	.+514    	; 0xfe8 <Audio_Device_ProcessControlRequest+0x2ce>
     de6:	21 52       	subi	r18, 0x21	; 33
     de8:	22 30       	cpi	r18, 0x02	; 2
			}

			break;
		case AUDIO_REQ_GetStatus:
			if ((USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE)) ||
     dea:	08 f0       	brcs	.+2      	; 0xdee <Audio_Device_ProcessControlRequest+0xd4>
     dec:	fd c0       	rjmp	.+506    	; 0xfe8 <Audio_Device_ProcessControlRequest+0x2ce>
     dee:	80 91 e8 00 	lds	r24, 0x00E8
     df2:	87 7f       	andi	r24, 0xF7	; 247
     df4:	80 93 e8 00 	sts	0x00E8, r24
     df8:	c4 dc       	rcall	.-1656   	; 0x782 <Endpoint_ClearStatusStage>
     dfa:	f6 c0       	rjmp	.+492    	; 0xfe8 <Audio_Device_ProcessControlRequest+0x2ce>
			    (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_ENDPOINT)))
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
     dfc:	82 30       	cpi	r24, 0x02	; 2
     dfe:	91 05       	cpc	r25, r1
     e00:	09 f0       	breq	.+2      	; 0xe04 <Audio_Device_ProcessControlRequest+0xea>
			break;
		case AUDIO_REQ_SetCurrent:
		case AUDIO_REQ_SetMinimum:
		case AUDIO_REQ_SetMaximum:
		case AUDIO_REQ_SetResolution:
			if ((USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT) == REQREC_ENDPOINT)
     e02:	3e c0       	rjmp	.+124    	; 0xe80 <Audio_Device_ProcessControlRequest+0x166>
     e04:	c0 90 2b 01 	lds	r12, 0x012B
     e08:	90 90 2a 01 	lds	r9, 0x012A
			{
				uint8_t EndpointProperty = USB_ControlRequest.bRequest;
				uint8_t EndpointAddress  = (uint8_t)USB_ControlRequest.wIndex;
     e0c:	c5 01       	movw	r24, r10
				uint8_t EndpointControl  = (USB_ControlRequest.wValue >> 8);
     e0e:	6d 2d       	mov	r22, r13
     e10:	4c 2d       	mov	r20, r12

				if (CALLBACK_Audio_Device_GetSetEndpointProperty(AudioInterfaceInfo, EndpointProperty, EndpointAddress,
     e12:	29 2d       	mov	r18, r9
     e14:	00 e0       	ldi	r16, 0x00	; 0
     e16:	10 e0       	ldi	r17, 0x00	; 0
     e18:	ee 24       	eor	r14, r14
     e1a:	ff 24       	eor	r15, r15
     e1c:	b4 da       	rcall	.-2712   	; 0x386 <CALLBACK_Audio_Device_GetSetEndpointProperty>
     e1e:	88 23       	and	r24, r24
     e20:	09 f4       	brne	.+2      	; 0xe24 <Audio_Device_ProcessControlRequest+0x10a>
     e22:	e2 c0       	rjmp	.+452    	; 0xfe8 <Audio_Device_ProcessControlRequest+0x2ce>
     e24:	8d b6       	in	r8, 0x3d	; 61
     e26:	7e b6       	in	r7, 0x3e	; 62
     e28:	80 91 2d 01 	lds	r24, 0x012D
     e2c:	90 91 2e 01 	lds	r25, 0x012E
				                                                 EndpointControl, NULL, NULL))
				{
					uint16_t ValueLength = USB_ControlRequest.wLength;
     e30:	9a 83       	std	Y+2, r25	; 0x02
     e32:	89 83       	std	Y+1, r24	; 0x01
     e34:	2d b7       	in	r18, 0x3d	; 61
     e36:	3e b7       	in	r19, 0x3e	; 62
     e38:	28 1b       	sub	r18, r24
     e3a:	39 0b       	sbc	r19, r25
					uint8_t  Value[ValueLength];
     e3c:	0f b6       	in	r0, 0x3f	; 63
     e3e:	f8 94       	cli
     e40:	3e bf       	out	0x3e, r19	; 62
     e42:	0f be       	out	0x3f, r0	; 63
     e44:	2d bf       	out	0x3d, r18	; 61
     e46:	ed b6       	in	r14, 0x3d	; 61
     e48:	fe b6       	in	r15, 0x3e	; 62
     e4a:	08 94       	sec
     e4c:	e1 1c       	adc	r14, r1
     e4e:	f1 1c       	adc	r15, r1
     e50:	80 91 e8 00 	lds	r24, 0x00E8
     e54:	87 7f       	andi	r24, 0xF7	; 247
     e56:	80 93 e8 00 	sts	0x00E8, r24
     e5a:	69 81       	ldd	r22, Y+1	; 0x01
     e5c:	7a 81       	ldd	r23, Y+2	; 0x02
     e5e:	c7 01       	movw	r24, r14
     e60:	79 db       	rcall	.-2318   	; 0x554 <Endpoint_Read_Control_Stream_LE>

					Endpoint_ClearSETUP();
					Endpoint_Read_Control_Stream_LE(Value, ValueLength);
     e62:	80 91 e8 00 	lds	r24, 0x00E8
     e66:	8e 77       	andi	r24, 0x7E	; 126
     e68:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     e6c:	c5 01       	movw	r24, r10
     e6e:	6d 2d       	mov	r22, r13
     e70:	4c 2d       	mov	r20, r12
     e72:	29 2d       	mov	r18, r9
     e74:	8e 01       	movw	r16, r28
					Endpoint_ClearIN();

					CALLBACK_Audio_Device_GetSetEndpointProperty(AudioInterfaceInfo, EndpointProperty, EndpointAddress,
     e76:	0f 5f       	subi	r16, 0xFF	; 255
     e78:	1f 4f       	sbci	r17, 0xFF	; 255
     e7a:	85 da       	rcall	.-2806   	; 0x386 <CALLBACK_Audio_Device_GetSetEndpointProperty>
     e7c:	8d be       	out	0x3d, r8	; 61
     e7e:	7a c0       	rjmp	.+244    	; 0xf74 <Audio_Device_ProcessControlRequest+0x25a>
     e80:	81 30       	cpi	r24, 0x01	; 1
     e82:	91 05       	cpc	r25, r1
     e84:	09 f0       	breq	.+2      	; 0xe88 <Audio_Device_ProcessControlRequest+0x16e>
     e86:	b0 c0       	rjmp	.+352    	; 0xfe8 <Audio_Device_ProcessControlRequest+0x2ce>
     e88:	c0 90 2c 01 	lds	r12, 0x012C
					                                             EndpointControl, &ValueLength, Value);
				}
			}
			else if ((USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT) == REQREC_INTERFACE)
     e8c:	80 90 29 01 	lds	r8, 0x0129
     e90:	90 90 2a 01 	lds	r9, 0x012A
			{
				uint8_t  Property  = USB_ControlRequest.bRequest;
				uint8_t  Entity    = (USB_ControlRequest.wIndex >> 8);
     e94:	c5 01       	movw	r24, r10
     e96:	6d 2d       	mov	r22, r13
				uint16_t Parameter = USB_ControlRequest.wValue;
     e98:	4c 2d       	mov	r20, r12
     e9a:	94 01       	movw	r18, r8
     e9c:	00 e0       	ldi	r16, 0x00	; 0
     e9e:	10 e0       	ldi	r17, 0x00	; 0

				if (CALLBACK_Audio_Device_GetSetInterfaceProperty(AudioInterfaceInfo, Property, Entity,
     ea0:	ee 24       	eor	r14, r14
     ea2:	ff 24       	eor	r15, r15
     ea4:	cd da       	rcall	.-2662   	; 0x440 <CALLBACK_Audio_Device_GetSetInterfaceProperty>
     ea6:	88 23       	and	r24, r24
     ea8:	09 f4       	brne	.+2      	; 0xeac <Audio_Device_ProcessControlRequest+0x192>
     eaa:	9e c0       	rjmp	.+316    	; 0xfe8 <Audio_Device_ProcessControlRequest+0x2ce>
     eac:	7d b6       	in	r7, 0x3d	; 61
     eae:	6e b6       	in	r6, 0x3e	; 62
     eb0:	80 91 2d 01 	lds	r24, 0x012D
     eb4:	90 91 2e 01 	lds	r25, 0x012E
     eb8:	9a 83       	std	Y+2, r25	; 0x02
     eba:	89 83       	std	Y+1, r24	; 0x01
     ebc:	6d b7       	in	r22, 0x3d	; 61
				                                                  Parameter, NULL, NULL))
				{
					uint16_t ValueLength = USB_ControlRequest.wLength;
     ebe:	7e b7       	in	r23, 0x3e	; 62
     ec0:	68 1b       	sub	r22, r24
     ec2:	79 0b       	sbc	r23, r25
     ec4:	0f b6       	in	r0, 0x3f	; 63
     ec6:	f8 94       	cli
     ec8:	7e bf       	out	0x3e, r23	; 62
					uint8_t  Value[ValueLength];
     eca:	0f be       	out	0x3f, r0	; 63
     ecc:	6d bf       	out	0x3d, r22	; 61
     ece:	ed b6       	in	r14, 0x3d	; 61
     ed0:	fe b6       	in	r15, 0x3e	; 62
     ed2:	08 94       	sec
     ed4:	e1 1c       	adc	r14, r1
     ed6:	f1 1c       	adc	r15, r1
     ed8:	80 91 e8 00 	lds	r24, 0x00E8
     edc:	87 7f       	andi	r24, 0xF7	; 247
     ede:	80 93 e8 00 	sts	0x00E8, r24
     ee2:	69 81       	ldd	r22, Y+1	; 0x01
     ee4:	7a 81       	ldd	r23, Y+2	; 0x02
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     ee6:	c7 01       	movw	r24, r14
     ee8:	35 db       	rcall	.-2454   	; 0x554 <Endpoint_Read_Control_Stream_LE>
     eea:	80 91 e8 00 	lds	r24, 0x00E8
     eee:	8e 77       	andi	r24, 0x7E	; 126

					Endpoint_ClearSETUP();
					Endpoint_Read_Control_Stream_LE(Value, ValueLength);
     ef0:	80 93 e8 00 	sts	0x00E8, r24
     ef4:	c5 01       	movw	r24, r10
     ef6:	6d 2d       	mov	r22, r13
     ef8:	4c 2d       	mov	r20, r12
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     efa:	94 01       	movw	r18, r8
     efc:	8e 01       	movw	r16, r28
     efe:	0f 5f       	subi	r16, 0xFF	; 255
     f00:	1f 4f       	sbci	r17, 0xFF	; 255
     f02:	9e da       	rcall	.-2756   	; 0x440 <CALLBACK_Audio_Device_GetSetInterfaceProperty>
					Endpoint_ClearIN();

					CALLBACK_Audio_Device_GetSetInterfaceProperty(AudioInterfaceInfo, Property, Entity,
     f04:	7d be       	out	0x3d, r7	; 61
     f06:	6e be       	out	0x3e, r6	; 62
     f08:	6f c0       	rjmp	.+222    	; 0xfe8 <Audio_Device_ProcessControlRequest+0x2ce>
     f0a:	82 30       	cpi	r24, 0x02	; 2
     f0c:	91 05       	cpc	r25, r1
     f0e:	a1 f5       	brne	.+104    	; 0xf78 <Audio_Device_ProcessControlRequest+0x25e>
     f10:	cd b6       	in	r12, 0x3d	; 61
     f12:	7e b6       	in	r7, 0x3e	; 62
     f14:	40 91 2b 01 	lds	r20, 0x012B
     f18:	20 91 2a 01 	lds	r18, 0x012A
			break;
		case AUDIO_REQ_GetCurrent:
		case AUDIO_REQ_GetMinimum:
		case AUDIO_REQ_GetMaximum:
		case AUDIO_REQ_GetResolution:
			if ((USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT) == REQREC_ENDPOINT)
     f1c:	80 91 2d 01 	lds	r24, 0x012D
     f20:	90 91 2e 01 	lds	r25, 0x012E
     f24:	9a 83       	std	Y+2, r25	; 0x02
			{
				uint8_t  EndpointProperty = USB_ControlRequest.bRequest;
				uint8_t  EndpointAddress  = (uint8_t)USB_ControlRequest.wIndex;
     f26:	89 83       	std	Y+1, r24	; 0x01
     f28:	ed b7       	in	r30, 0x3d	; 61
				uint8_t  EndpointControl  = (USB_ControlRequest.wValue >> 8);
     f2a:	fe b7       	in	r31, 0x3e	; 62
     f2c:	e8 1b       	sub	r30, r24
				uint16_t ValueLength      = USB_ControlRequest.wLength;
     f2e:	f9 0b       	sbc	r31, r25
     f30:	0f b6       	in	r0, 0x3f	; 63
     f32:	f8 94       	cli
     f34:	fe bf       	out	0x3e, r31	; 62
     f36:	0f be       	out	0x3f, r0	; 63
     f38:	ed bf       	out	0x3d, r30	; 61
				uint8_t  Value[ValueLength];
     f3a:	8d b6       	in	r8, 0x3d	; 61
     f3c:	9e b6       	in	r9, 0x3e	; 62
     f3e:	08 94       	sec
     f40:	81 1c       	adc	r8, r1
     f42:	91 1c       	adc	r9, r1
     f44:	c5 01       	movw	r24, r10
     f46:	6d 2d       	mov	r22, r13
     f48:	8e 01       	movw	r16, r28
     f4a:	0f 5f       	subi	r16, 0xFF	; 255
     f4c:	1f 4f       	sbci	r17, 0xFF	; 255
     f4e:	74 01       	movw	r14, r8
     f50:	1a da       	rcall	.-3020   	; 0x386 <CALLBACK_Audio_Device_GetSetEndpointProperty>
     f52:	88 23       	and	r24, r24
     f54:	71 f0       	breq	.+28     	; 0xf72 <Audio_Device_ProcessControlRequest+0x258>

				if (CALLBACK_Audio_Device_GetSetEndpointProperty(AudioInterfaceInfo, EndpointProperty, EndpointAddress,
     f56:	80 91 e8 00 	lds	r24, 0x00E8
     f5a:	87 7f       	andi	r24, 0xF7	; 247
     f5c:	80 93 e8 00 	sts	0x00E8, r24
     f60:	69 81       	ldd	r22, Y+1	; 0x01
     f62:	7a 81       	ldd	r23, Y+2	; 0x02
     f64:	c4 01       	movw	r24, r8
     f66:	9a da       	rcall	.-2764   	; 0x49c <Endpoint_Write_Control_Stream_LE>
     f68:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     f6c:	8b 77       	andi	r24, 0x7B	; 123
     f6e:	80 93 e8 00 	sts	0x00E8, r24
     f72:	cd be       	out	0x3d, r12	; 61
				                                                 EndpointControl, &ValueLength, Value))
				{
					Endpoint_ClearSETUP();
					Endpoint_Write_Control_Stream_LE(Value, ValueLength);
     f74:	7e be       	out	0x3e, r7	; 62
     f76:	38 c0       	rjmp	.+112    	; 0xfe8 <Audio_Device_ProcessControlRequest+0x2ce>
     f78:	81 30       	cpi	r24, 0x01	; 1
     f7a:	91 05       	cpc	r25, r1
     f7c:	a9 f5       	brne	.+106    	; 0xfe8 <Audio_Device_ProcessControlRequest+0x2ce>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     f7e:	cd b6       	in	r12, 0x3d	; 61
     f80:	9e b6       	in	r9, 0x3e	; 62
     f82:	40 91 2c 01 	lds	r20, 0x012C
     f86:	20 91 29 01 	lds	r18, 0x0129
     f8a:	30 91 2a 01 	lds	r19, 0x012A
					Endpoint_ClearOUT();
				}
			}
			else if ((USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT) == REQREC_INTERFACE)
     f8e:	80 91 2d 01 	lds	r24, 0x012D
     f92:	90 91 2e 01 	lds	r25, 0x012E
     f96:	9a 83       	std	Y+2, r25	; 0x02
			{
				uint8_t  Property    = USB_ControlRequest.bRequest;
				uint8_t  Entity      = (USB_ControlRequest.wIndex >> 8);
     f98:	89 83       	std	Y+1, r24	; 0x01
     f9a:	6d b7       	in	r22, 0x3d	; 61
				uint16_t Parameter   = USB_ControlRequest.wValue;
     f9c:	7e b7       	in	r23, 0x3e	; 62
     f9e:	68 1b       	sub	r22, r24
     fa0:	79 0b       	sbc	r23, r25
     fa2:	0f b6       	in	r0, 0x3f	; 63
				uint16_t ValueLength = USB_ControlRequest.wLength;
     fa4:	f8 94       	cli
     fa6:	7e bf       	out	0x3e, r23	; 62
     fa8:	0f be       	out	0x3f, r0	; 63
     faa:	6d bf       	out	0x3d, r22	; 61
     fac:	6d b6       	in	r6, 0x3d	; 61
     fae:	7e b6       	in	r7, 0x3e	; 62
				uint8_t  Value[ValueLength];
     fb0:	08 94       	sec
     fb2:	61 1c       	adc	r6, r1
     fb4:	71 1c       	adc	r7, r1
     fb6:	c5 01       	movw	r24, r10
     fb8:	6d 2d       	mov	r22, r13
     fba:	8e 01       	movw	r16, r28
     fbc:	0f 5f       	subi	r16, 0xFF	; 255
     fbe:	1f 4f       	sbci	r17, 0xFF	; 255
     fc0:	73 01       	movw	r14, r6
     fc2:	3e da       	rcall	.-2948   	; 0x440 <CALLBACK_Audio_Device_GetSetInterfaceProperty>
     fc4:	88 23       	and	r24, r24
     fc6:	71 f0       	breq	.+28     	; 0xfe4 <Audio_Device_ProcessControlRequest+0x2ca>
     fc8:	80 91 e8 00 	lds	r24, 0x00E8

				if (CALLBACK_Audio_Device_GetSetInterfaceProperty(AudioInterfaceInfo, Property, Entity,
     fcc:	87 7f       	andi	r24, 0xF7	; 247
     fce:	80 93 e8 00 	sts	0x00E8, r24
     fd2:	69 81       	ldd	r22, Y+1	; 0x01
     fd4:	7a 81       	ldd	r23, Y+2	; 0x02
     fd6:	c3 01       	movw	r24, r6
     fd8:	61 da       	rcall	.-2878   	; 0x49c <Endpoint_Write_Control_Stream_LE>
     fda:	80 91 e8 00 	lds	r24, 0x00E8
     fde:	8b 77       	andi	r24, 0x7B	; 123
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     fe0:	80 93 e8 00 	sts	0x00E8, r24
     fe4:	cd be       	out	0x3d, r12	; 61
     fe6:	9e be       	out	0x3e, r9	; 62
     fe8:	0f b6       	in	r0, 0x3f	; 63
				                                                  Parameter, &ValueLength, Value))
				{
					Endpoint_ClearSETUP();
					Endpoint_Write_Control_Stream_LE(Value, ValueLength);
     fea:	f8 94       	cli
     fec:	5e be       	out	0x3e, r5	; 62
     fee:	0f be       	out	0x3f, r0	; 63
     ff0:	4d be       	out	0x3d, r4	; 61
     ff2:	0f 90       	pop	r0
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     ff4:	0f 90       	pop	r0
     ff6:	df 91       	pop	r29
     ff8:	cf 91       	pop	r28
     ffa:	1f 91       	pop	r17
     ffc:	0f 91       	pop	r16
     ffe:	ff 90       	pop	r15
    1000:	ef 90       	pop	r14
				}
			}

			break;
	}
}
    1002:	df 90       	pop	r13
    1004:	cf 90       	pop	r12
    1006:	bf 90       	pop	r11
    1008:	af 90       	pop	r10
    100a:	9f 90       	pop	r9
    100c:	8f 90       	pop	r8
    100e:	7f 90       	pop	r7
    1010:	6f 90       	pop	r6
    1012:	5f 90       	pop	r5
    1014:	4f 90       	pop	r4
    1016:	08 95       	ret

00001018 <Audio_Device_ConfigureEndpoints>:
    1018:	cf 93       	push	r28
    101a:	df 93       	push	r29
    101c:	ec 01       	movw	r28, r24
    101e:	1c 86       	std	Y+12, r1	; 0x0c
    1020:	81 e0       	ldi	r24, 0x01	; 1
    1022:	8d 83       	std	Y+5, r24	; 0x05
    1024:	8a 87       	std	Y+10, r24	; 0x0a
    1026:	ce 01       	movw	r24, r28
    1028:	02 96       	adiw	r24, 0x02	; 2
    102a:	61 e0       	ldi	r22, 0x01	; 1
    102c:	6e db       	rcall	.-2340   	; 0x70a <Endpoint_ConfigureEndpointTable>
    102e:	88 23       	and	r24, r24
    1030:	29 f0       	breq	.+10     	; 0x103c <Audio_Device_ConfigureEndpoints+0x24>
	memset(&AudioInterfaceInfo->State, 0x00, sizeof(AudioInterfaceInfo->State));
	
	AudioInterfaceInfo->Config.DataINEndpoint.Type  = EP_TYPE_ISOCHRONOUS;
	AudioInterfaceInfo->Config.DataOUTEndpoint.Type = EP_TYPE_ISOCHRONOUS;

	if (!(Endpoint_ConfigureEndpointTable(&AudioInterfaceInfo->Config.DataINEndpoint, 1)))
    1032:	ce 01       	movw	r24, r28
	  return false;

	if (!(Endpoint_ConfigureEndpointTable(&AudioInterfaceInfo->Config.DataOUTEndpoint, 1)))
    1034:	07 96       	adiw	r24, 0x07	; 7
    1036:	61 e0       	ldi	r22, 0x01	; 1
    1038:	68 db       	rcall	.-2352   	; 0x70a <Endpoint_ConfigureEndpointTable>
    103a:	01 c0       	rjmp	.+2      	; 0x103e <Audio_Device_ConfigureEndpoints+0x26>
    103c:	80 e0       	ldi	r24, 0x00	; 0
    103e:	df 91       	pop	r29
	
	AudioInterfaceInfo->Config.DataINEndpoint.Type  = EP_TYPE_ISOCHRONOUS;
	AudioInterfaceInfo->Config.DataOUTEndpoint.Type = EP_TYPE_ISOCHRONOUS;

	if (!(Endpoint_ConfigureEndpointTable(&AudioInterfaceInfo->Config.DataINEndpoint, 1)))
	  return false;
    1040:	cf 91       	pop	r28

	if (!(Endpoint_ConfigureEndpointTable(&AudioInterfaceInfo->Config.DataOUTEndpoint, 1)))
	  return false;

	return true;
}
    1042:	08 95       	ret

00001044 <Audio_Device_Event_Stub>:
    1044:	08 95       	ret

00001046 <__udivmodsi4>:
    1046:	a1 e2       	ldi	r26, 0x21	; 33
    1048:	1a 2e       	mov	r1, r26
    104a:	aa 1b       	sub	r26, r26
    104c:	bb 1b       	sub	r27, r27
    104e:	fd 01       	movw	r30, r26
    1050:	0d c0       	rjmp	.+26     	; 0x106c <__udivmodsi4_ep>

00001052 <__udivmodsi4_loop>:
    1052:	aa 1f       	adc	r26, r26
    1054:	bb 1f       	adc	r27, r27
    1056:	ee 1f       	adc	r30, r30
    1058:	ff 1f       	adc	r31, r31
    105a:	a2 17       	cp	r26, r18
    105c:	b3 07       	cpc	r27, r19
    105e:	e4 07       	cpc	r30, r20
    1060:	f5 07       	cpc	r31, r21
    1062:	20 f0       	brcs	.+8      	; 0x106c <__udivmodsi4_ep>
    1064:	a2 1b       	sub	r26, r18
    1066:	b3 0b       	sbc	r27, r19
    1068:	e4 0b       	sbc	r30, r20
    106a:	f5 0b       	sbc	r31, r21

0000106c <__udivmodsi4_ep>:
    106c:	66 1f       	adc	r22, r22
    106e:	77 1f       	adc	r23, r23
    1070:	88 1f       	adc	r24, r24
    1072:	99 1f       	adc	r25, r25
    1074:	1a 94       	dec	r1
    1076:	69 f7       	brne	.-38     	; 0x1052 <__udivmodsi4_loop>
    1078:	60 95       	com	r22
    107a:	70 95       	com	r23
    107c:	80 95       	com	r24
    107e:	90 95       	com	r25
    1080:	9b 01       	movw	r18, r22
    1082:	ac 01       	movw	r20, r24
    1084:	bd 01       	movw	r22, r26
    1086:	cf 01       	movw	r24, r30
    1088:	08 95       	ret

0000108a <_exit>:
    108a:	f8 94       	cli

0000108c <__stop_program>:
    108c:	ff cf       	rjmp	.-2      	; 0x108c <__stop_program>
