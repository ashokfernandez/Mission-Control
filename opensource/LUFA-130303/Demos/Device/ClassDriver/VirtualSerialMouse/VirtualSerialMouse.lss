
VirtualSerialMouse.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000008e  00800100  00001544  000015d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001544  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000011  0080018e  0080018e  00001666  2**0
                  ALLOC
  3 .stab         00000a98  00000000  00000000  00001668  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000002aa  00000000  00000000  00002100  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000508  00000000  00000000  000023b0  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00008ae6  00000000  00000000  000028b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000021df  00000000  00000000  0000b39e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00003fda  00000000  00000000  0000d57d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000e24  00000000  00000000  00011558  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00003d92  00000000  00000000  0001237c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000524a  00000000  00000000  0001610e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000006c8  00000000  00000000  0001b358  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	c9 c0       	rjmp	.+402    	; 0x194 <__ctors_end>
       2:	00 00       	nop
       4:	e6 c0       	rjmp	.+460    	; 0x1d2 <__bad_interrupt>
       6:	00 00       	nop
       8:	e4 c0       	rjmp	.+456    	; 0x1d2 <__bad_interrupt>
       a:	00 00       	nop
       c:	e2 c0       	rjmp	.+452    	; 0x1d2 <__bad_interrupt>
       e:	00 00       	nop
      10:	e0 c0       	rjmp	.+448    	; 0x1d2 <__bad_interrupt>
      12:	00 00       	nop
      14:	de c0       	rjmp	.+444    	; 0x1d2 <__bad_interrupt>
      16:	00 00       	nop
      18:	dc c0       	rjmp	.+440    	; 0x1d2 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	da c0       	rjmp	.+436    	; 0x1d2 <__bad_interrupt>
      1e:	00 00       	nop
      20:	d8 c0       	rjmp	.+432    	; 0x1d2 <__bad_interrupt>
      22:	00 00       	nop
      24:	d6 c0       	rjmp	.+428    	; 0x1d2 <__bad_interrupt>
      26:	00 00       	nop
      28:	5a c4       	rjmp	.+2228   	; 0x8de <__vector_10>
      2a:	00 00       	nop
      2c:	25 c5       	rjmp	.+2634   	; 0xa78 <__vector_11>
      2e:	00 00       	nop
      30:	d0 c0       	rjmp	.+416    	; 0x1d2 <__bad_interrupt>
      32:	00 00       	nop
      34:	ce c0       	rjmp	.+412    	; 0x1d2 <__bad_interrupt>
      36:	00 00       	nop
      38:	cc c0       	rjmp	.+408    	; 0x1d2 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	ca c0       	rjmp	.+404    	; 0x1d2 <__bad_interrupt>
      3e:	00 00       	nop
      40:	c8 c0       	rjmp	.+400    	; 0x1d2 <__bad_interrupt>
      42:	00 00       	nop
      44:	c6 c0       	rjmp	.+396    	; 0x1d2 <__bad_interrupt>
      46:	00 00       	nop
      48:	c4 c0       	rjmp	.+392    	; 0x1d2 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	c2 c0       	rjmp	.+388    	; 0x1d2 <__bad_interrupt>
      4e:	00 00       	nop
      50:	c0 c0       	rjmp	.+384    	; 0x1d2 <__bad_interrupt>
      52:	00 00       	nop
      54:	be c0       	rjmp	.+380    	; 0x1d2 <__bad_interrupt>
      56:	00 00       	nop
      58:	bc c0       	rjmp	.+376    	; 0x1d2 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	ba c0       	rjmp	.+372    	; 0x1d2 <__bad_interrupt>
      5e:	00 00       	nop
      60:	b8 c0       	rjmp	.+368    	; 0x1d2 <__bad_interrupt>
      62:	00 00       	nop
      64:	b6 c0       	rjmp	.+364    	; 0x1d2 <__bad_interrupt>
      66:	00 00       	nop
      68:	b4 c0       	rjmp	.+360    	; 0x1d2 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	b2 c0       	rjmp	.+356    	; 0x1d2 <__bad_interrupt>
      6e:	00 00       	nop
      70:	b0 c0       	rjmp	.+352    	; 0x1d2 <__bad_interrupt>
      72:	00 00       	nop
      74:	ae c0       	rjmp	.+348    	; 0x1d2 <__bad_interrupt>
      76:	00 00       	nop
      78:	ac c0       	rjmp	.+344    	; 0x1d2 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	aa c0       	rjmp	.+340    	; 0x1d2 <__bad_interrupt>
      7e:	00 00       	nop
      80:	a8 c0       	rjmp	.+336    	; 0x1d2 <__bad_interrupt>
      82:	00 00       	nop
      84:	a6 c0       	rjmp	.+332    	; 0x1d2 <__bad_interrupt>
      86:	00 00       	nop
      88:	a4 c0       	rjmp	.+328    	; 0x1d2 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	a2 c0       	rjmp	.+324    	; 0x1d2 <__bad_interrupt>
      8e:	00 00       	nop
      90:	a0 c0       	rjmp	.+320    	; 0x1d2 <__bad_interrupt>
      92:	00 00       	nop
      94:	9e c0       	rjmp	.+316    	; 0x1d2 <__bad_interrupt>
      96:	00 00       	nop

00000098 <ProductString>:
      98:	30 03 4c 00 55 00 46 00 41 00 20 00 43 00 44 00     0.L.U.F.A. .C.D.
      a8:	43 00 20 00 61 00 6e 00 64 00 20 00 4d 00 6f 00     C. .a.n.d. .M.o.
      b8:	75 00 73 00 65 00 20 00 44 00 65 00 6d 00 6f 00     u.s.e. .D.e.m.o.
      c8:	00 00                                               ..

000000ca <ManufacturerString>:
      ca:	18 03 44 00 65 00 61 00 6e 00 20 00 43 00 61 00     ..D.e.a.n. .C.a.
      da:	6d 00 65 00 72 00 61 00 00 00                       m.e.r.a...

000000e4 <LanguageString>:
      e4:	04 03 09 04                                         ....

000000e8 <ConfigurationDescriptor>:
      e8:	09 02 5f 00 03 01 00 c0 32 08 0b 00 02 02 02 01     .._.....2.......
      f8:	00 09 04 00 00 01 02 02 01 00 05 24 00 10 01 04     ...........$....
     108:	24 02 06 05 24 06 00 01 07 05 82 03 08 00 ff 09     $...$...........
     118:	04 01 00 02 0a 00 00 00 07 05 04 02 10 00 05 07     ................
     128:	05 83 02 10 00 05 09 04 02 00 01 03 01 02 00 09     ................
     138:	21 11 01 00 01 22 3a 00 07 05 81 03 08 00 05        !....":........

00000147 <DeviceDescriptor>:
     147:	12 01 10 01 ef 02 01 08 eb 03 62 20 01 00 01 02     ..........b ....
     157:	dc 01                                               ..

00000159 <MouseReport>:
     159:	05 01 09 02 a1 01 09 01 a1 00 05 09 19 01 29 03     ..............).
     169:	15 00 25 01 95 03 75 01 81 02 95 01 75 05 81 01     ..%...u.....u...
     179:	05 01 09 30 09 31 16 ff ff 26 01 00 36 ff ff 46     ...0.1...&..6..F
     189:	01 00 95 02 75 08 81 06 c0 c0 00                    ....u......

00000194 <__ctors_end>:
     194:	11 24       	eor	r1, r1
     196:	1f be       	out	0x3f, r1	; 63
     198:	cf ef       	ldi	r28, 0xFF	; 255
     19a:	d0 e2       	ldi	r29, 0x20	; 32
     19c:	de bf       	out	0x3e, r29	; 62
     19e:	cd bf       	out	0x3d, r28	; 61

000001a0 <__do_copy_data>:
     1a0:	11 e0       	ldi	r17, 0x01	; 1
     1a2:	a0 e0       	ldi	r26, 0x00	; 0
     1a4:	b1 e0       	ldi	r27, 0x01	; 1
     1a6:	e4 e4       	ldi	r30, 0x44	; 68
     1a8:	f5 e1       	ldi	r31, 0x15	; 21
     1aa:	00 e0       	ldi	r16, 0x00	; 0
     1ac:	0b bf       	out	0x3b, r16	; 59
     1ae:	02 c0       	rjmp	.+4      	; 0x1b4 <__do_copy_data+0x14>
     1b0:	07 90       	elpm	r0, Z+
     1b2:	0d 92       	st	X+, r0
     1b4:	ae 38       	cpi	r26, 0x8E	; 142
     1b6:	b1 07       	cpc	r27, r17
     1b8:	d9 f7       	brne	.-10     	; 0x1b0 <__do_copy_data+0x10>
     1ba:	1b be       	out	0x3b, r1	; 59

000001bc <__do_clear_bss>:
     1bc:	11 e0       	ldi	r17, 0x01	; 1
     1be:	ae e8       	ldi	r26, 0x8E	; 142
     1c0:	b1 e0       	ldi	r27, 0x01	; 1
     1c2:	01 c0       	rjmp	.+2      	; 0x1c6 <.do_clear_bss_start>

000001c4 <.do_clear_bss_loop>:
     1c4:	1d 92       	st	X+, r1

000001c6 <.do_clear_bss_start>:
     1c6:	af 39       	cpi	r26, 0x9F	; 159
     1c8:	b1 07       	cpc	r27, r17
     1ca:	e1 f7       	brne	.-8      	; 0x1c4 <.do_clear_bss_loop>
     1cc:	62 d0       	rcall	.+196    	; 0x292 <main>
     1ce:	0c 94 a0 0a 	jmp	0x1540	; 0x1540 <_exit>

000001d2 <__bad_interrupt>:
     1d2:	16 cf       	rjmp	.-468    	; 0x0 <__vectors>

000001d4 <LEDs_SetAllLEDs>:
				PORTD &= ~LEDMask;
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
			{
				PORTD = ((PORTD & ~LEDS_ALL_LEDS) | LEDMask);
     1d4:	9b b1       	in	r25, 0x0b	; 11
     1d6:	9f 70       	andi	r25, 0x0F	; 15
     1d8:	98 2b       	or	r25, r24
     1da:	9b b9       	out	0x0b, r25	; 11
			}
     1dc:	08 95       	ret

000001de <Joystick_GetStatus>:
			}

			static inline uint8_t Joystick_GetStatus(void) ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t Joystick_GetStatus(void)
			{
				return (((uint8_t)~PINB & JOY_BMASK) | (((uint8_t)~PINE & JOY_EMASK) >> JOY_PORTE_MASK_SHIFT));
     1de:	83 b1       	in	r24, 0x03	; 3
     1e0:	2c b1       	in	r18, 0x0c	; 12
     1e2:	20 95       	com	r18
     1e4:	30 e0       	ldi	r19, 0x00	; 0
     1e6:	20 73       	andi	r18, 0x30	; 48
     1e8:	30 70       	andi	r19, 0x00	; 0
     1ea:	35 95       	asr	r19
     1ec:	27 95       	ror	r18
     1ee:	80 95       	com	r24
     1f0:	80 7e       	andi	r24, 0xE0	; 224
			}
     1f2:	82 2b       	or	r24, r18
     1f4:	08 95       	ret

000001f6 <SetupHardware>:

/** Configures the board hardware and chip peripherals for the demo's functionality. */
void SetupHardware(void)
{
	/* Disable watchdog if enabled by bootloader/fuses */
	MCUSR &= ~(1 << WDRF);
     1f6:	84 b7       	in	r24, 0x34	; 52
     1f8:	87 7f       	andi	r24, 0xF7	; 247
     1fa:	84 bf       	out	0x34, r24	; 52
	wdt_disable();
     1fc:	88 e1       	ldi	r24, 0x18	; 24
     1fe:	0f b6       	in	r0, 0x3f	; 63
     200:	f8 94       	cli
     202:	80 93 60 00 	sts	0x0060, r24
     206:	10 92 60 00 	sts	0x0060, r1
     20a:	0f be       	out	0x3f, r0	; 63
The type of x is clock_div_t.
*/
void clock_prescale_set(clock_div_t __x)
{
    uint8_t __tmp = _BV(CLKPCE);
    __asm__ __volatile__ (
     20c:	90 e0       	ldi	r25, 0x00	; 0
     20e:	80 e8       	ldi	r24, 0x80	; 128
     210:	0f b6       	in	r0, 0x3f	; 63
     212:	f8 94       	cli
     214:	80 93 61 00 	sts	0x0061, r24
     218:	90 93 61 00 	sts	0x0061, r25
     21c:	0f be       	out	0x3f, r0	; 63

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void Joystick_Init(void)
			{
				DDRB  &= ~JOY_BMASK;
     21e:	84 b1       	in	r24, 0x04	; 4
     220:	8f 71       	andi	r24, 0x1F	; 31
     222:	84 b9       	out	0x04, r24	; 4
				DDRE  &= ~JOY_EMASK;
     224:	8d b1       	in	r24, 0x0d	; 13
     226:	8f 7c       	andi	r24, 0xCF	; 207
     228:	8d b9       	out	0x0d, r24	; 13

				PORTB |=  JOY_BMASK;
     22a:	85 b1       	in	r24, 0x05	; 5
     22c:	80 6e       	ori	r24, 0xE0	; 224
     22e:	85 b9       	out	0x05, r24	; 5
				PORTE |=  JOY_EMASK;
     230:	8e b1       	in	r24, 0x0e	; 14
     232:	80 63       	ori	r24, 0x30	; 48
     234:	8e b9       	out	0x0e, r24	; 14

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void LEDs_Init(void)
			{
				DDRD  |=  LEDS_ALL_LEDS;
     236:	8a b1       	in	r24, 0x0a	; 10
     238:	80 6f       	ori	r24, 0xF0	; 240
     23a:	8a b9       	out	0x0a, r24	; 10
				PORTD &= ~LEDS_ALL_LEDS;
     23c:	8b b1       	in	r24, 0x0b	; 11
     23e:	8f 70       	andi	r24, 0x0F	; 15
     240:	8b b9       	out	0x0b, r24	; 11
	clock_prescale_set(clock_div_1);

	/* Hardware Initialization */
	Joystick_Init();
	LEDs_Init();
	USB_Init();
     242:	32 c3       	rjmp	.+1636   	; 0x8a8 <USB_Init>

00000244 <CheckJoystickMovement>:
     244:	cc df       	rcall	.-104    	; 0x1de <Joystick_GetStatus>
}
     246:	87 fd       	sbrc	r24, 7
{
	uint8_t     JoyStatus_LCL = Joystick_GetStatus();
	char*       ReportString  = NULL;
	static bool ActionSent    = false;

	if (JoyStatus_LCL & JOY_UP)
     248:	0b c0       	rjmp	.+22     	; 0x260 <CheckJoystickMovement+0x1c>
     24a:	84 fd       	sbrc	r24, 4
	  ReportString = "Joystick Up\r\n";
	else if (JoyStatus_LCL & JOY_DOWN)
     24c:	0c c0       	rjmp	.+24     	; 0x266 <CheckJoystickMovement+0x22>
     24e:	86 fd       	sbrc	r24, 6
	  ReportString = "Joystick Down\r\n";
	else if (JoyStatus_LCL & JOY_LEFT)
     250:	0d c0       	rjmp	.+26     	; 0x26c <CheckJoystickMovement+0x28>
     252:	83 fd       	sbrc	r24, 3
	  ReportString = "Joystick Left\r\n";
	else if (JoyStatus_LCL & JOY_RIGHT)
     254:	0e c0       	rjmp	.+28     	; 0x272 <CheckJoystickMovement+0x2e>
     256:	85 fd       	sbrc	r24, 5
	  ReportString = "Joystick Right\r\n";
	else if (JoyStatus_LCL & JOY_PRESS)
     258:	0f c0       	rjmp	.+30     	; 0x278 <CheckJoystickMovement+0x34>
     25a:	10 92 8e 01 	sts	0x018E, r1
	  ReportString = "Joystick Pressed\r\n";
	else
	  ActionSent = false;
     25e:	08 95       	ret
     260:	60 e0       	ldi	r22, 0x00	; 0
	uint8_t     JoyStatus_LCL = Joystick_GetStatus();
	char*       ReportString  = NULL;
	static bool ActionSent    = false;

	if (JoyStatus_LCL & JOY_UP)
	  ReportString = "Joystick Up\r\n";
     262:	71 e0       	ldi	r23, 0x01	; 1
     264:	0b c0       	rjmp	.+22     	; 0x27c <CheckJoystickMovement+0x38>
     266:	6e e0       	ldi	r22, 0x0E	; 14
	else if (JoyStatus_LCL & JOY_DOWN)
	  ReportString = "Joystick Down\r\n";
     268:	71 e0       	ldi	r23, 0x01	; 1
     26a:	08 c0       	rjmp	.+16     	; 0x27c <CheckJoystickMovement+0x38>
     26c:	6e e1       	ldi	r22, 0x1E	; 30
	else if (JoyStatus_LCL & JOY_LEFT)
	  ReportString = "Joystick Left\r\n";
     26e:	71 e0       	ldi	r23, 0x01	; 1
     270:	05 c0       	rjmp	.+10     	; 0x27c <CheckJoystickMovement+0x38>
     272:	6e e2       	ldi	r22, 0x2E	; 46
	else if (JoyStatus_LCL & JOY_RIGHT)
	  ReportString = "Joystick Right\r\n";
     274:	71 e0       	ldi	r23, 0x01	; 1
     276:	02 c0       	rjmp	.+4      	; 0x27c <CheckJoystickMovement+0x38>
     278:	6f e3       	ldi	r22, 0x3F	; 63
	else if (JoyStatus_LCL & JOY_PRESS)
	  ReportString = "Joystick Pressed\r\n";
     27a:	71 e0       	ldi	r23, 0x01	; 1
     27c:	80 91 8e 01 	lds	r24, 0x018E
	else
	  ActionSent = false;

	if ((ReportString != NULL) && (ActionSent == false))
     280:	88 23       	and	r24, r24
     282:	31 f4       	brne	.+12     	; 0x290 <CheckJoystickMovement+0x4c>
     284:	81 e0       	ldi	r24, 0x01	; 1
	{
		ActionSent = true;
     286:	80 93 8e 01 	sts	0x018E, r24
     28a:	82 e6       	ldi	r24, 0x62	; 98

		CDC_Device_SendString(&VirtualSerial_CDC_Interface, ReportString);
     28c:	91 e0       	ldi	r25, 0x01	; 1
     28e:	87 c6       	rjmp	.+3342   	; 0xf9e <CDC_Device_SendString>
     290:	08 95       	ret

00000292 <main>:
     292:	b1 df       	rcall	.-158    	; 0x1f6 <SetupHardware>
     294:	80 e1       	ldi	r24, 0x10	; 16
 */
int main(void)
{
	SetupHardware();

	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
     296:	9e df       	rcall	.-196    	; 0x1d4 <LEDs_SetAllLEDs>
     298:	78 94       	sei
     29a:	d4 df       	rcall	.-88     	; 0x244 <CheckJoystickMovement>
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				sei();
     29c:	82 e6       	ldi	r24, 0x62	; 98
	GlobalInterruptEnable();

	for (;;)
	{
		CheckJoystickMovement();
     29e:	91 e0       	ldi	r25, 0x01	; 1
     2a0:	e8 d6       	rcall	.+3536   	; 0x1072 <CDC_Device_ReceiveByte>

		/* Must throw away unused bytes from the host, or it will lock up while waiting for the device */
		CDC_Device_ReceiveByte(&VirtualSerial_CDC_Interface);
     2a2:	82 e6       	ldi	r24, 0x62	; 98
     2a4:	91 e0       	ldi	r25, 0x01	; 1
     2a6:	cd d6       	rcall	.+3482   	; 0x1042 <CDC_Device_USBTask>
     2a8:	82 e5       	ldi	r24, 0x52	; 82

		CDC_Device_USBTask(&VirtualSerial_CDC_Interface);
     2aa:	91 e0       	ldi	r25, 0x01	; 1
     2ac:	0e 94 bb 09 	call	0x1376	; 0x1376 <HID_Device_USBTask>
     2b0:	89 d5       	rcall	.+2834   	; 0xdc4 <USB_USBTask>
		HID_Device_USBTask(&Mouse_HID_Interface);
     2b2:	f3 cf       	rjmp	.-26     	; 0x29a <main+0x8>

000002b4 <EVENT_USB_Device_Connect>:
     2b4:	80 ea       	ldi	r24, 0xA0	; 160
     2b6:	8e cf       	rjmp	.-228    	; 0x1d4 <LEDs_SetAllLEDs>

000002b8 <EVENT_USB_Device_Disconnect>:
     2b8:	80 e1       	ldi	r24, 0x10	; 16
		USB_USBTask();
     2ba:	8c cf       	rjmp	.-232    	; 0x1d4 <LEDs_SetAllLEDs>

000002bc <EVENT_USB_Device_ConfigurationChanged>:
     2bc:	cf 93       	push	r28
     2be:	82 e5       	ldi	r24, 0x52	; 82
/** Event handler for the library USB Configuration Changed event. */
void EVENT_USB_Device_ConfigurationChanged(void)
{
	bool ConfigSuccess = true;

	ConfigSuccess &= HID_Device_ConfigureEndpoints(&Mouse_HID_Interface);
     2c0:	91 e0       	ldi	r25, 0x01	; 1
     2c2:	0e 94 a2 09 	call	0x1344	; 0x1344 <HID_Device_ConfigureEndpoints>
     2c6:	c8 2f       	mov	r28, r24
	ConfigSuccess &= CDC_Device_ConfigureEndpoints(&VirtualSerial_CDC_Interface);
     2c8:	82 e6       	ldi	r24, 0x62	; 98
     2ca:	91 e0       	ldi	r25, 0x01	; 1
     2cc:	44 d6       	rcall	.+3208   	; 0xf56 <CDC_Device_ConfigureEndpoints>
     2ce:	90 91 e2 00 	lds	r25, 0x00E2
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
     2d2:	94 60       	ori	r25, 0x04	; 4
     2d4:	90 93 e2 00 	sts	0x00E2, r25
     2d8:	28 2f       	mov	r18, r24
     2da:	30 e0       	ldi	r19, 0x00	; 0
     2dc:	8c 2f       	mov	r24, r28
/** Event handler for the library USB Configuration Changed event. */
void EVENT_USB_Device_ConfigurationChanged(void)
{
	bool ConfigSuccess = true;

	ConfigSuccess &= HID_Device_ConfigureEndpoints(&Mouse_HID_Interface);
     2de:	90 e0       	ldi	r25, 0x00	; 0
     2e0:	28 23       	and	r18, r24
	ConfigSuccess &= CDC_Device_ConfigureEndpoints(&VirtualSerial_CDC_Interface);
     2e2:	39 23       	and	r19, r25
     2e4:	21 15       	cp	r18, r1

	USB_Device_EnableSOFEvents();

	LEDs_SetAllLEDs(ConfigSuccess ? LEDMASK_USB_READY : LEDMASK_USB_ERROR);
     2e6:	31 05       	cpc	r19, r1
     2e8:	11 f0       	breq	.+4      	; 0x2ee <EVENT_USB_Device_ConfigurationChanged+0x32>
     2ea:	80 e6       	ldi	r24, 0x60	; 96
     2ec:	01 c0       	rjmp	.+2      	; 0x2f0 <EVENT_USB_Device_ConfigurationChanged+0x34>
     2ee:	80 e9       	ldi	r24, 0x90	; 144
     2f0:	71 df       	rcall	.-286    	; 0x1d4 <LEDs_SetAllLEDs>
     2f2:	cf 91       	pop	r28
     2f4:	08 95       	ret

000002f6 <EVENT_USB_Device_ControlRequest>:
}
     2f6:	82 e6       	ldi	r24, 0x62	; 98
     2f8:	91 e0       	ldi	r25, 0x01	; 1

/** Event handler for the library USB Control Request reception event. */
void EVENT_USB_Device_ControlRequest(void)
{
	CDC_Device_ProcessControlRequest(&VirtualSerial_CDC_Interface);
     2fa:	80 d5       	rcall	.+2816   	; 0xdfc <CDC_Device_ProcessControlRequest>
     2fc:	82 e5       	ldi	r24, 0x52	; 82
	HID_Device_ProcessControlRequest(&Mouse_HID_Interface);
     2fe:	91 e0       	ldi	r25, 0x01	; 1
     300:	ee c6       	rjmp	.+3548   	; 0x10de <HID_Device_ProcessControlRequest>

00000302 <EVENT_USB_Device_StartOfFrame>:
     302:	80 91 60 01 	lds	r24, 0x0160
}
     306:	90 91 61 01 	lds	r25, 0x0161
			 *  \param[in,out] HIDInterfaceInfo  Pointer to a structure containing a HID Class configuration and state.
			 */
			static inline void HID_Device_MillisecondElapsed(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo) ATTR_ALWAYS_INLINE ATTR_NON_NULL_PTR_ARG(1);
			static inline void HID_Device_MillisecondElapsed(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
			{
				if (HIDInterfaceInfo->State.IdleMSRemaining)
     30a:	00 97       	sbiw	r24, 0x00	; 0
     30c:	29 f0       	breq	.+10     	; 0x318 <EVENT_USB_Device_StartOfFrame+0x16>
				  HIDInterfaceInfo->State.IdleMSRemaining--;
     30e:	01 97       	sbiw	r24, 0x01	; 1
     310:	90 93 61 01 	sts	0x0161, r25
     314:	80 93 60 01 	sts	0x0160, r24
     318:	08 95       	ret

0000031a <CALLBACK_HID_Device_CreateHIDReport>:
bool CALLBACK_HID_Device_CreateHIDReport(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo,
                                         uint8_t* const ReportID,
                                         const uint8_t ReportType,
                                         void* ReportData,
                                         uint16_t* const ReportSize)
{
     31a:	0f 93       	push	r16
     31c:	1f 93       	push	r17
     31e:	cf 93       	push	r28
     320:	df 93       	push	r29
     322:	e9 01       	movw	r28, r18
	USB_MouseReport_Data_t* MouseReport = (USB_MouseReport_Data_t*)ReportData;

	uint8_t JoyStatus_LCL    = Joystick_GetStatus();
     324:	5c df       	rcall	.-328    	; 0x1de <Joystick_GetStatus>
     326:	9c b1       	in	r25, 0x0c	; 12
			}

			static inline uint8_t Buttons_GetStatus(void) ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t Buttons_GetStatus(void)
			{
				return ((PINE & BUTTONS_BUTTON1) ^ BUTTONS_BUTTON1);
     328:	90 95       	com	r25
     32a:	94 70       	andi	r25, 0x04	; 4
     32c:	87 ff       	sbrs	r24, 7
	uint8_t ButtonStatus_LCL = Buttons_GetStatus();

	if (JoyStatus_LCL & JOY_UP)
     32e:	02 c0       	rjmp	.+4      	; 0x334 <CALLBACK_HID_Device_CreateHIDReport+0x1a>
     330:	2f ef       	ldi	r18, 0xFF	; 255
	  MouseReport->Y = -1;
     332:	03 c0       	rjmp	.+6      	; 0x33a <CALLBACK_HID_Device_CreateHIDReport+0x20>
     334:	84 ff       	sbrs	r24, 4
	else if (JoyStatus_LCL & JOY_DOWN)
     336:	02 c0       	rjmp	.+4      	; 0x33c <CALLBACK_HID_Device_CreateHIDReport+0x22>
     338:	21 e0       	ldi	r18, 0x01	; 1
	  MouseReport->Y =  1;
     33a:	2a 83       	std	Y+2, r18	; 0x02
     33c:	86 ff       	sbrs	r24, 6

	if (JoyStatus_LCL & JOY_LEFT)
     33e:	02 c0       	rjmp	.+4      	; 0x344 <CALLBACK_HID_Device_CreateHIDReport+0x2a>
     340:	2f ef       	ldi	r18, 0xFF	; 255
	  MouseReport->X = -1;
     342:	03 c0       	rjmp	.+6      	; 0x34a <CALLBACK_HID_Device_CreateHIDReport+0x30>
     344:	83 ff       	sbrs	r24, 3
	else if (JoyStatus_LCL & JOY_RIGHT)
     346:	02 c0       	rjmp	.+4      	; 0x34c <CALLBACK_HID_Device_CreateHIDReport+0x32>
     348:	21 e0       	ldi	r18, 0x01	; 1
	  MouseReport->X =  1;
     34a:	29 83       	std	Y+1, r18	; 0x01
     34c:	85 ff       	sbrs	r24, 5

	if (JoyStatus_LCL & JOY_PRESS)
     34e:	03 c0       	rjmp	.+6      	; 0x356 <CALLBACK_HID_Device_CreateHIDReport+0x3c>
     350:	88 81       	ld	r24, Y
	  MouseReport->Button |= (1 << 0);
     352:	81 60       	ori	r24, 0x01	; 1
     354:	88 83       	st	Y, r24
     356:	99 23       	and	r25, r25

	if (ButtonStatus_LCL & BUTTONS_BUTTON1)
     358:	19 f0       	breq	.+6      	; 0x360 <CALLBACK_HID_Device_CreateHIDReport+0x46>
     35a:	88 81       	ld	r24, Y
	  MouseReport->Button |= (1 << 1);
     35c:	82 60       	ori	r24, 0x02	; 2
     35e:	88 83       	st	Y, r24
     360:	83 e0       	ldi	r24, 0x03	; 3

	*ReportSize = sizeof(USB_MouseReport_Data_t);
     362:	90 e0       	ldi	r25, 0x00	; 0
     364:	f8 01       	movw	r30, r16
     366:	91 83       	std	Z+1, r25	; 0x01
     368:	80 83       	st	Z, r24
     36a:	81 e0       	ldi	r24, 0x01	; 1
	return true;
}
     36c:	df 91       	pop	r29
     36e:	cf 91       	pop	r28
     370:	1f 91       	pop	r17
     372:	0f 91       	pop	r16
     374:	08 95       	ret

00000376 <CALLBACK_HID_Device_ProcessHIDReport>:
     376:	08 95       	ret

00000378 <CALLBACK_USB_GetDescriptor>:
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
     378:	93 30       	cpi	r25, 0x03	; 3
     37a:	89 f0       	breq	.+34     	; 0x39e <CALLBACK_USB_GetDescriptor+0x26>
     37c:	94 30       	cpi	r25, 0x04	; 4
     37e:	28 f4       	brcc	.+10     	; 0x38a <CALLBACK_USB_GetDescriptor+0x12>
     380:	91 30       	cpi	r25, 0x01	; 1
     382:	49 f1       	breq	.+82     	; 0x3d6 <CALLBACK_USB_GetDescriptor+0x5e>
     384:	92 30       	cpi	r25, 0x02	; 2
     386:	61 f5       	brne	.+88     	; 0x3e0 <CALLBACK_USB_GetDescriptor+0x68>
     388:	05 c0       	rjmp	.+10     	; 0x394 <CALLBACK_USB_GetDescriptor+0x1c>
     38a:	91 32       	cpi	r25, 0x21	; 33
     38c:	d1 f0       	breq	.+52     	; 0x3c2 <CALLBACK_USB_GetDescriptor+0x4a>
     38e:	92 32       	cpi	r25, 0x22	; 34
     390:	39 f5       	brne	.+78     	; 0x3e0 <CALLBACK_USB_GetDescriptor+0x68>
     392:	1c c0       	rjmp	.+56     	; 0x3cc <CALLBACK_USB_GetDescriptor+0x54>
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
			Size    = sizeof(USB_Descriptor_Configuration_t);
     394:	8f e5       	ldi	r24, 0x5F	; 95
     396:	90 e0       	ldi	r25, 0x00	; 0
		case DTYPE_Device:
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
     398:	e8 ee       	ldi	r30, 0xE8	; 232
     39a:	f0 e0       	ldi	r31, 0x00	; 0
			Size    = sizeof(USB_Descriptor_Configuration_t);
			break;
     39c:	25 c0       	rjmp	.+74     	; 0x3e8 <CALLBACK_USB_GetDescriptor+0x70>
		case DTYPE_String:
			switch (DescriptorNumber)
     39e:	81 30       	cpi	r24, 0x01	; 1
     3a0:	41 f0       	breq	.+16     	; 0x3b2 <CALLBACK_USB_GetDescriptor+0x3a>
     3a2:	81 30       	cpi	r24, 0x01	; 1
     3a4:	18 f0       	brcs	.+6      	; 0x3ac <CALLBACK_USB_GetDescriptor+0x34>
     3a6:	82 30       	cpi	r24, 0x02	; 2
     3a8:	d9 f4       	brne	.+54     	; 0x3e0 <CALLBACK_USB_GetDescriptor+0x68>
     3aa:	06 c0       	rjmp	.+12     	; 0x3b8 <CALLBACK_USB_GetDescriptor+0x40>
			{
				case 0x00:
					Address = &LanguageString;
					Size    = pgm_read_byte(&LanguageString.Header.Size);
     3ac:	e4 ee       	ldi	r30, 0xE4	; 228
     3ae:	f0 e0       	ldi	r31, 0x00	; 0
     3b0:	05 c0       	rjmp	.+10     	; 0x3bc <CALLBACK_USB_GetDescriptor+0x44>
					break;
				case 0x01:
					Address = &ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
     3b2:	ea ec       	ldi	r30, 0xCA	; 202
     3b4:	f0 e0       	ldi	r31, 0x00	; 0
     3b6:	02 c0       	rjmp	.+4      	; 0x3bc <CALLBACK_USB_GetDescriptor+0x44>
					break;
				case 0x02:
					Address = &ProductString;
					Size    = pgm_read_byte(&ProductString.Header.Size);
     3b8:	e8 e9       	ldi	r30, 0x98	; 152
     3ba:	f0 e0       	ldi	r31, 0x00	; 0
     3bc:	84 91       	lpm	r24, Z
     3be:	90 e0       	ldi	r25, 0x00	; 0
					break;
     3c0:	13 c0       	rjmp	.+38     	; 0x3e8 <CALLBACK_USB_GetDescriptor+0x70>
			}

			break;
		case HID_DTYPE_HID:
			Address = &ConfigurationDescriptor.HID_MouseHID;
			Size    = sizeof(USB_HID_Descriptor_HID_t);
     3c2:	89 e0       	ldi	r24, 0x09	; 9
     3c4:	90 e0       	ldi	r25, 0x00	; 0
					break;
			}

			break;
		case HID_DTYPE_HID:
			Address = &ConfigurationDescriptor.HID_MouseHID;
     3c6:	e7 e3       	ldi	r30, 0x37	; 55
     3c8:	f1 e0       	ldi	r31, 0x01	; 1
			Size    = sizeof(USB_HID_Descriptor_HID_t);
			break;
     3ca:	0e c0       	rjmp	.+28     	; 0x3e8 <CALLBACK_USB_GetDescriptor+0x70>
		case HID_DTYPE_Report:
			Address = &MouseReport;
			Size    = sizeof(MouseReport);
     3cc:	8a e3       	ldi	r24, 0x3A	; 58
     3ce:	90 e0       	ldi	r25, 0x00	; 0
		case HID_DTYPE_HID:
			Address = &ConfigurationDescriptor.HID_MouseHID;
			Size    = sizeof(USB_HID_Descriptor_HID_t);
			break;
		case HID_DTYPE_Report:
			Address = &MouseReport;
     3d0:	e9 e5       	ldi	r30, 0x59	; 89
     3d2:	f1 e0       	ldi	r31, 0x01	; 1
			Size    = sizeof(MouseReport);
			break;
     3d4:	09 c0       	rjmp	.+18     	; 0x3e8 <CALLBACK_USB_GetDescriptor+0x70>

	switch (DescriptorType)
	{
		case DTYPE_Device:
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
     3d6:	82 e1       	ldi	r24, 0x12	; 18
     3d8:	90 e0       	ldi	r25, 0x00	; 0
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
	{
		case DTYPE_Device:
			Address = &DeviceDescriptor;
     3da:	e7 e4       	ldi	r30, 0x47	; 71
     3dc:	f1 e0       	ldi	r31, 0x01	; 1
     3de:	04 c0       	rjmp	.+8      	; 0x3e8 <CALLBACK_USB_GetDescriptor+0x70>
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;
     3e0:	80 e0       	ldi	r24, 0x00	; 0
     3e2:	90 e0       	ldi	r25, 0x00	; 0
                                    const void** const DescriptorAddress)
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
     3e4:	e0 e0       	ldi	r30, 0x00	; 0
     3e6:	f0 e0       	ldi	r31, 0x00	; 0
			Address = &MouseReport;
			Size    = sizeof(MouseReport);
			break;
	}

	*DescriptorAddress = Address;
     3e8:	da 01       	movw	r26, r20
     3ea:	11 96       	adiw	r26, 0x01	; 1
     3ec:	fc 93       	st	X, r31
     3ee:	ee 93       	st	-X, r30
	return Size;
}
     3f0:	08 95       	ret

000003f2 <Endpoint_Write_Stream_LE>:
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
     3f2:	af 92       	push	r10
     3f4:	bf 92       	push	r11
     3f6:	cf 92       	push	r12
     3f8:	df 92       	push	r13
     3fa:	ef 92       	push	r14
     3fc:	ff 92       	push	r15
     3fe:	1f 93       	push	r17
     400:	cf 93       	push	r28
     402:	df 93       	push	r29
     404:	ec 01       	movw	r28, r24
     406:	7b 01       	movw	r14, r22
     408:	6a 01       	movw	r12, r20
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	uint16_t BytesInTransfer = 0;
	uint8_t  ErrorCode;

	if ((ErrorCode = Endpoint_WaitUntilReady()))
     40a:	d6 d1       	rcall	.+940    	; 0x7b8 <Endpoint_WaitUntilReady>
     40c:	18 2f       	mov	r17, r24
     40e:	88 23       	and	r24, r24
     410:	a1 f5       	brne	.+104    	; 0x47a <Endpoint_Write_Stream_LE+0x88>
     412:	c1 14       	cp	r12, r1
	  return ErrorCode;

	if (BytesProcessed != NULL)
     414:	d1 04       	cpc	r13, r1
     416:	39 f0       	breq	.+14     	; 0x426 <Endpoint_Write_Stream_LE+0x34>
     418:	f6 01       	movw	r30, r12
	{
		Length -= *BytesProcessed;
     41a:	20 81       	ld	r18, Z
     41c:	31 81       	ldd	r19, Z+1	; 0x01
     41e:	e2 1a       	sub	r14, r18
     420:	f3 0a       	sbc	r15, r19
     422:	c2 0f       	add	r28, r18
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
     424:	d3 1f       	adc	r29, r19
     426:	aa 24       	eor	r10, r10

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
     428:	bb 24       	eor	r11, r11
     42a:	22 c0       	rjmp	.+68     	; 0x470 <Endpoint_Write_Stream_LE+0x7e>
     42c:	80 91 e8 00 	lds	r24, 0x00E8
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
     430:	85 fd       	sbrc	r24, 5
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
	{
		if (!(Endpoint_IsReadWriteAllowed()))
     432:	15 c0       	rjmp	.+42     	; 0x45e <Endpoint_Write_Stream_LE+0x6c>
     434:	80 91 e8 00 	lds	r24, 0x00E8
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     438:	8e 77       	andi	r24, 0x7E	; 126
     43a:	80 93 e8 00 	sts	0x00E8, r24
     43e:	c1 14       	cp	r12, r1

			#if !defined(INTERRUPT_CONTROL_ENDPOINT)
			USB_USBTask();
			#endif

			if (BytesProcessed != NULL)
     440:	d1 04       	cpc	r13, r1
     442:	49 f0       	breq	.+18     	; 0x456 <Endpoint_Write_Stream_LE+0x64>
     444:	f6 01       	movw	r30, r12
			{
				*BytesProcessed += BytesInTransfer;
     446:	80 81       	ld	r24, Z
     448:	91 81       	ldd	r25, Z+1	; 0x01
     44a:	8a 0d       	add	r24, r10
     44c:	9b 1d       	adc	r25, r11
     44e:	91 83       	std	Z+1, r25	; 0x01
     450:	80 83       	st	Z, r24
     452:	15 e0       	ldi	r17, 0x05	; 5
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
     454:	12 c0       	rjmp	.+36     	; 0x47a <Endpoint_Write_Stream_LE+0x88>
     456:	b0 d1       	rcall	.+864    	; 0x7b8 <Endpoint_WaitUntilReady>
			}

			if ((ErrorCode = Endpoint_WaitUntilReady()))
     458:	88 23       	and	r24, r24
     45a:	51 f0       	breq	.+20     	; 0x470 <Endpoint_Write_Stream_LE+0x7e>
     45c:	0d c0       	rjmp	.+26     	; 0x478 <Endpoint_Write_Stream_LE+0x86>
     45e:	89 91       	ld	r24, Y+
     460:	80 93 f1 00 	sts	0x00F1, r24
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     464:	08 94       	sec
     466:	e1 08       	sbc	r14, r1
		}
		else
		{
			TEMPLATE_TRANSFER_BYTE(DataStream);
			TEMPLATE_BUFFER_MOVE(DataStream, 1);
			Length--;
     468:	f1 08       	sbc	r15, r1
     46a:	08 94       	sec
     46c:	a1 1c       	adc	r10, r1
			BytesInTransfer++;
     46e:	b1 1c       	adc	r11, r1
     470:	e1 14       	cp	r14, r1
     472:	f1 04       	cpc	r15, r1
	{
		Length -= *BytesProcessed;
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
     474:	d9 f6       	brne	.-74     	; 0x42c <Endpoint_Write_Stream_LE+0x3a>
     476:	01 c0       	rjmp	.+2      	; 0x47a <Endpoint_Write_Stream_LE+0x88>
     478:	18 2f       	mov	r17, r24
     47a:	81 2f       	mov	r24, r17
			{
				*BytesProcessed += BytesInTransfer;
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
			}

			if ((ErrorCode = Endpoint_WaitUntilReady()))
     47c:	df 91       	pop	r29
			BytesInTransfer++;
		}
	}

	return ENDPOINT_RWSTREAM_NoError;
}
     47e:	cf 91       	pop	r28
     480:	1f 91       	pop	r17
     482:	ff 90       	pop	r15
     484:	ef 90       	pop	r14
     486:	df 90       	pop	r13
     488:	cf 90       	pop	r12
     48a:	bf 90       	pop	r11
     48c:	af 90       	pop	r10
     48e:	08 95       	ret

00000490 <Endpoint_Write_Control_Stream_LE>:
     490:	20 91 9d 01 	lds	r18, 0x019D
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
     494:	30 91 9e 01 	lds	r19, 0x019E
     498:	26 17       	cp	r18, r22
     49a:	37 07       	cpc	r19, r23
     49c:	20 f4       	brcc	.+8      	; 0x4a6 <Endpoint_Write_Control_Stream_LE+0x16>
     49e:	b9 01       	movw	r22, r18
     4a0:	fc 01       	movw	r30, r24
     4a2:	20 e0       	ldi	r18, 0x00	; 0
     4a4:	37 c0       	rjmp	.+110    	; 0x514 <Endpoint_Write_Control_Stream_LE+0x84>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
     4a6:	61 15       	cp	r22, r1
     4a8:	71 05       	cpc	r23, r1
     4aa:	d1 f7       	brne	.-12     	; 0x4a0 <Endpoint_Write_Control_Stream_LE+0x10>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     4ac:	20 91 e8 00 	lds	r18, 0x00E8
     4b0:	2e 77       	andi	r18, 0x7E	; 126
     4b2:	20 93 e8 00 	sts	0x00E8, r18
     4b6:	f4 cf       	rjmp	.-24     	; 0x4a0 <Endpoint_Write_Control_Stream_LE+0x10>
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     4b8:	80 91 96 01 	lds	r24, 0x0196

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     4bc:	88 23       	and	r24, r24
     4be:	09 f4       	brne	.+2      	; 0x4c2 <Endpoint_Write_Control_Stream_LE+0x32>
     4c0:	3f c0       	rjmp	.+126    	; 0x540 <Endpoint_Write_Control_Stream_LE+0xb0>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     4c2:	85 30       	cpi	r24, 0x05	; 5
     4c4:	c9 f1       	breq	.+114    	; 0x538 <Endpoint_Write_Control_Stream_LE+0xa8>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     4c6:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
     4ca:	83 fd       	sbrc	r24, 3
     4cc:	37 c0       	rjmp	.+110    	; 0x53c <Endpoint_Write_Control_Stream_LE+0xac>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     4ce:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
     4d2:	82 fd       	sbrc	r24, 2
     4d4:	2b c0       	rjmp	.+86     	; 0x52c <Endpoint_Write_Control_Stream_LE+0x9c>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     4d6:	80 91 e8 00 	lds	r24, 0x00E8
		  break;

		if (Endpoint_IsINReady())
     4da:	80 ff       	sbrs	r24, 0
     4dc:	1b c0       	rjmp	.+54     	; 0x514 <Endpoint_Write_Control_Stream_LE+0x84>
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
     4de:	80 91 f2 00 	lds	r24, 0x00F2
     4e2:	90 91 f3 00 	lds	r25, 0x00F3
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
     4e6:	06 c0       	rjmp	.+12     	; 0x4f4 <Endpoint_Write_Control_Stream_LE+0x64>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
     4e8:	21 91       	ld	r18, Z+
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     4ea:	20 93 f1 00 	sts	0x00F1, r18
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
     4ee:	61 50       	subi	r22, 0x01	; 1
     4f0:	70 40       	sbci	r23, 0x00	; 0
				BytesInEndpoint++;
     4f2:	01 96       	adiw	r24, 0x01	; 1

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
     4f4:	61 15       	cp	r22, r1
     4f6:	71 05       	cpc	r23, r1
     4f8:	19 f0       	breq	.+6      	; 0x500 <Endpoint_Write_Control_Stream_LE+0x70>
     4fa:	88 30       	cpi	r24, 0x08	; 8
     4fc:	91 05       	cpc	r25, r1
     4fe:	a0 f3       	brcs	.-24     	; 0x4e8 <Endpoint_Write_Control_Stream_LE+0x58>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
     500:	21 e0       	ldi	r18, 0x01	; 1
     502:	88 30       	cpi	r24, 0x08	; 8
     504:	91 05       	cpc	r25, r1
     506:	09 f0       	breq	.+2      	; 0x50a <Endpoint_Write_Control_Stream_LE+0x7a>
     508:	20 e0       	ldi	r18, 0x00	; 0
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     50a:	80 91 e8 00 	lds	r24, 0x00E8
     50e:	8e 77       	andi	r24, 0x7E	; 126
     510:	80 93 e8 00 	sts	0x00E8, r24
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
     514:	61 15       	cp	r22, r1
     516:	71 05       	cpc	r23, r1
     518:	79 f6       	brne	.-98     	; 0x4b8 <Endpoint_Write_Control_Stream_LE+0x28>
     51a:	22 23       	and	r18, r18
     51c:	69 f6       	brne	.-102    	; 0x4b8 <Endpoint_Write_Control_Stream_LE+0x28>
     51e:	06 c0       	rjmp	.+12     	; 0x52c <Endpoint_Write_Control_Stream_LE+0x9c>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     520:	80 91 96 01 	lds	r24, 0x0196

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     524:	88 23       	and	r24, r24
     526:	61 f0       	breq	.+24     	; 0x540 <Endpoint_Write_Control_Stream_LE+0xb0>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     528:	85 30       	cpi	r24, 0x05	; 5
     52a:	61 f0       	breq	.+24     	; 0x544 <Endpoint_Write_Control_Stream_LE+0xb4>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     52c:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
     530:	82 ff       	sbrs	r24, 2
     532:	f6 cf       	rjmp	.-20     	; 0x520 <Endpoint_Write_Control_Stream_LE+0x90>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
     534:	80 e0       	ldi	r24, 0x00	; 0
     536:	08 95       	ret
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
     538:	83 e0       	ldi	r24, 0x03	; 3
     53a:	08 95       	ret
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
     53c:	81 e0       	ldi	r24, 0x01	; 1
     53e:	08 95       	ret
	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
     540:	82 e0       	ldi	r24, 0x02	; 2
     542:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
     544:	83 e0       	ldi	r24, 0x03	; 3
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
     546:	08 95       	ret

00000548 <Endpoint_Read_Control_Stream_LE>:
uint8_t TEMPLATE_FUNC_NAME (void* const Buffer,
                            uint16_t Length)
{
	uint8_t* DataStream = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));

	if (!(Length))
     548:	61 15       	cp	r22, r1
     54a:	71 05       	cpc	r23, r1
     54c:	29 f4       	brne	.+10     	; 0x558 <Endpoint_Read_Control_Stream_LE+0x10>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     54e:	20 91 e8 00 	lds	r18, 0x00E8
     552:	2b 77       	andi	r18, 0x7B	; 123
     554:	20 93 e8 00 	sts	0x00E8, r18

#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (void* const Buffer,
                            uint16_t Length)
{
     558:	38 2f       	mov	r19, r24
     55a:	29 2f       	mov	r18, r25
     55c:	26 c0       	rjmp	.+76     	; 0x5aa <Endpoint_Read_Control_Stream_LE+0x62>
	if (!(Length))
	  Endpoint_ClearOUT();

	while (Length)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     55e:	80 91 96 01 	lds	r24, 0x0196

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     562:	88 23       	and	r24, r24
     564:	b1 f1       	breq	.+108    	; 0x5d2 <Endpoint_Read_Control_Stream_LE+0x8a>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     566:	85 30       	cpi	r24, 0x05	; 5
     568:	81 f1       	breq	.+96     	; 0x5ca <Endpoint_Read_Control_Stream_LE+0x82>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     56a:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
     56e:	83 fd       	sbrc	r24, 3
     570:	2e c0       	rjmp	.+92     	; 0x5ce <Endpoint_Read_Control_Stream_LE+0x86>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     572:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;

		if (Endpoint_IsOUTReceived())
     576:	82 ff       	sbrs	r24, 2
     578:	f2 cf       	rjmp	.-28     	; 0x55e <Endpoint_Read_Control_Stream_LE+0x16>
     57a:	e3 2f       	mov	r30, r19
     57c:	f2 2f       	mov	r31, r18
     57e:	08 c0       	rjmp	.+16     	; 0x590 <Endpoint_Read_Control_Stream_LE+0x48>
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
     580:	80 91 f1 00 	lds	r24, 0x00F1
		{
			while (Length && Endpoint_BytesInEndpoint())
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
     584:	81 93       	st	Z+, r24
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
     586:	3e 2f       	mov	r19, r30
     588:	2f 2f       	mov	r18, r31
				Length--;
     58a:	61 50       	subi	r22, 0x01	; 1
     58c:	70 40       	sbci	r23, 0x00	; 0
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;

		if (Endpoint_IsOUTReceived())
		{
			while (Length && Endpoint_BytesInEndpoint())
     58e:	41 f0       	breq	.+16     	; 0x5a0 <Endpoint_Read_Control_Stream_LE+0x58>
     590:	3e 2f       	mov	r19, r30
     592:	2f 2f       	mov	r18, r31
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
     594:	80 91 f2 00 	lds	r24, 0x00F2
     598:	90 91 f3 00 	lds	r25, 0x00F3
     59c:	00 97       	sbiw	r24, 0x00	; 0
     59e:	81 f7       	brne	.-32     	; 0x580 <Endpoint_Read_Control_Stream_LE+0x38>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     5a0:	80 91 e8 00 	lds	r24, 0x00E8
     5a4:	8b 77       	andi	r24, 0x7B	; 123
     5a6:	80 93 e8 00 	sts	0x00E8, r24
	uint8_t* DataStream = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));

	if (!(Length))
	  Endpoint_ClearOUT();

	while (Length)
     5aa:	61 15       	cp	r22, r1
     5ac:	71 05       	cpc	r23, r1
     5ae:	b9 f6       	brne	.-82     	; 0x55e <Endpoint_Read_Control_Stream_LE+0x16>
     5b0:	06 c0       	rjmp	.+12     	; 0x5be <Endpoint_Read_Control_Stream_LE+0x76>
		}
	}

	while (!(Endpoint_IsINReady()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     5b2:	80 91 96 01 	lds	r24, 0x0196

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     5b6:	88 23       	and	r24, r24
     5b8:	61 f0       	breq	.+24     	; 0x5d2 <Endpoint_Read_Control_Stream_LE+0x8a>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     5ba:	85 30       	cpi	r24, 0x05	; 5
     5bc:	61 f0       	breq	.+24     	; 0x5d6 <Endpoint_Read_Control_Stream_LE+0x8e>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     5be:	80 91 e8 00 	lds	r24, 0x00E8

			Endpoint_ClearOUT();
		}
	}

	while (!(Endpoint_IsINReady()))
     5c2:	80 ff       	sbrs	r24, 0
     5c4:	f6 cf       	rjmp	.-20     	; 0x5b2 <Endpoint_Read_Control_Stream_LE+0x6a>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
     5c6:	80 e0       	ldi	r24, 0x00	; 0
     5c8:	08 95       	ret
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
     5ca:	83 e0       	ldi	r24, 0x03	; 3
     5cc:	08 95       	ret
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
     5ce:	81 e0       	ldi	r24, 0x01	; 1
     5d0:	08 95       	ret
	while (!(Endpoint_IsINReady()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
     5d2:	82 e0       	ldi	r24, 0x02	; 2
     5d4:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
     5d6:	83 e0       	ldi	r24, 0x03	; 3
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
     5d8:	08 95       	ret

000005da <Endpoint_Write_Control_PStream_LE>:
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
     5da:	20 91 9d 01 	lds	r18, 0x019D
     5de:	30 91 9e 01 	lds	r19, 0x019E
     5e2:	26 17       	cp	r18, r22
     5e4:	37 07       	cpc	r19, r23
     5e6:	20 f4       	brcc	.+8      	; 0x5f0 <Endpoint_Write_Control_PStream_LE+0x16>
     5e8:	b9 01       	movw	r22, r18
     5ea:	fc 01       	movw	r30, r24
     5ec:	20 e0       	ldi	r18, 0x00	; 0
     5ee:	38 c0       	rjmp	.+112    	; 0x660 <Endpoint_Write_Control_PStream_LE+0x86>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
     5f0:	61 15       	cp	r22, r1
     5f2:	71 05       	cpc	r23, r1
     5f4:	d1 f7       	brne	.-12     	; 0x5ea <Endpoint_Write_Control_PStream_LE+0x10>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     5f6:	20 91 e8 00 	lds	r18, 0x00E8
     5fa:	2e 77       	andi	r18, 0x7E	; 126
     5fc:	20 93 e8 00 	sts	0x00E8, r18
     600:	f4 cf       	rjmp	.-24     	; 0x5ea <Endpoint_Write_Control_PStream_LE+0x10>
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     602:	80 91 96 01 	lds	r24, 0x0196

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     606:	88 23       	and	r24, r24
     608:	09 f4       	brne	.+2      	; 0x60c <Endpoint_Write_Control_PStream_LE+0x32>
     60a:	40 c0       	rjmp	.+128    	; 0x68c <Endpoint_Write_Control_PStream_LE+0xb2>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     60c:	85 30       	cpi	r24, 0x05	; 5
     60e:	d1 f1       	breq	.+116    	; 0x684 <Endpoint_Write_Control_PStream_LE+0xaa>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     610:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
     614:	83 fd       	sbrc	r24, 3
     616:	38 c0       	rjmp	.+112    	; 0x688 <Endpoint_Write_Control_PStream_LE+0xae>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     618:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
     61c:	82 fd       	sbrc	r24, 2
     61e:	2c c0       	rjmp	.+88     	; 0x678 <Endpoint_Write_Control_PStream_LE+0x9e>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     620:	80 91 e8 00 	lds	r24, 0x00E8
		  break;

		if (Endpoint_IsINReady())
     624:	80 ff       	sbrs	r24, 0
     626:	1c c0       	rjmp	.+56     	; 0x660 <Endpoint_Write_Control_PStream_LE+0x86>
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
     628:	80 91 f2 00 	lds	r24, 0x00F2
     62c:	90 91 f3 00 	lds	r25, 0x00F3
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
     630:	07 c0       	rjmp	.+14     	; 0x640 <Endpoint_Write_Control_PStream_LE+0x66>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
     632:	24 91       	lpm	r18, Z
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     634:	20 93 f1 00 	sts	0x00F1, r18
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
     638:	31 96       	adiw	r30, 0x01	; 1
				Length--;
     63a:	61 50       	subi	r22, 0x01	; 1
     63c:	70 40       	sbci	r23, 0x00	; 0
				BytesInEndpoint++;
     63e:	01 96       	adiw	r24, 0x01	; 1

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
     640:	61 15       	cp	r22, r1
     642:	71 05       	cpc	r23, r1
     644:	19 f0       	breq	.+6      	; 0x64c <Endpoint_Write_Control_PStream_LE+0x72>
     646:	88 30       	cpi	r24, 0x08	; 8
     648:	91 05       	cpc	r25, r1
     64a:	98 f3       	brcs	.-26     	; 0x632 <Endpoint_Write_Control_PStream_LE+0x58>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
     64c:	21 e0       	ldi	r18, 0x01	; 1
     64e:	88 30       	cpi	r24, 0x08	; 8
     650:	91 05       	cpc	r25, r1
     652:	09 f0       	breq	.+2      	; 0x656 <Endpoint_Write_Control_PStream_LE+0x7c>
     654:	20 e0       	ldi	r18, 0x00	; 0
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     656:	80 91 e8 00 	lds	r24, 0x00E8
     65a:	8e 77       	andi	r24, 0x7E	; 126
     65c:	80 93 e8 00 	sts	0x00E8, r24
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
     660:	61 15       	cp	r22, r1
     662:	71 05       	cpc	r23, r1
     664:	71 f6       	brne	.-100    	; 0x602 <Endpoint_Write_Control_PStream_LE+0x28>
     666:	22 23       	and	r18, r18
     668:	61 f6       	brne	.-104    	; 0x602 <Endpoint_Write_Control_PStream_LE+0x28>
     66a:	06 c0       	rjmp	.+12     	; 0x678 <Endpoint_Write_Control_PStream_LE+0x9e>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     66c:	80 91 96 01 	lds	r24, 0x0196

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     670:	88 23       	and	r24, r24
     672:	61 f0       	breq	.+24     	; 0x68c <Endpoint_Write_Control_PStream_LE+0xb2>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     674:	85 30       	cpi	r24, 0x05	; 5
     676:	61 f0       	breq	.+24     	; 0x690 <Endpoint_Write_Control_PStream_LE+0xb6>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     678:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
     67c:	82 ff       	sbrs	r24, 2
     67e:	f6 cf       	rjmp	.-20     	; 0x66c <Endpoint_Write_Control_PStream_LE+0x92>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
     680:	80 e0       	ldi	r24, 0x00	; 0
     682:	08 95       	ret
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
     684:	83 e0       	ldi	r24, 0x03	; 3
     686:	08 95       	ret
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
     688:	81 e0       	ldi	r24, 0x01	; 1
     68a:	08 95       	ret
	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
     68c:	82 e0       	ldi	r24, 0x02	; 2
     68e:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
     690:	83 e0       	ldi	r24, 0x03	; 3
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
     692:	08 95       	ret

00000694 <Endpoint_ConfigureEndpoint_Prv>:
	UECFG0X = UECFG0XData;
	UECFG1X = UECFG1XData;

	return Endpoint_IsConfigured();
#else
	for (uint8_t EPNum = Number; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
     694:	98 2f       	mov	r25, r24
     696:	2a c0       	rjmp	.+84     	; 0x6ec <Endpoint_ConfigureEndpoint_Prv+0x58>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     698:	90 93 e9 00 	sts	0x00E9, r25
		uint8_t UECFG1XTemp;
		uint8_t UEIENXTemp;

		Endpoint_SelectEndpoint(EPNum);

		if (EPNum == Number)
     69c:	98 17       	cp	r25, r24
     69e:	39 f0       	breq	.+14     	; 0x6ae <Endpoint_ConfigureEndpoint_Prv+0x1a>
			UECFG1XTemp = UECFG1XData;
			UEIENXTemp  = 0;
		}
		else
		{
			UECFG0XTemp = UECFG0X;
     6a0:	70 91 ec 00 	lds	r23, 0x00EC
			UECFG1XTemp = UECFG1X;
     6a4:	20 91 ed 00 	lds	r18, 0x00ED
			UEIENXTemp  = UEIENX;
     6a8:	50 91 f0 00 	lds	r21, 0x00F0
     6ac:	03 c0       	rjmp	.+6      	; 0x6b4 <Endpoint_ConfigureEndpoint_Prv+0x20>
		Endpoint_SelectEndpoint(EPNum);

		if (EPNum == Number)
		{
			UECFG0XTemp = UECFG0XData;
			UECFG1XTemp = UECFG1XData;
     6ae:	24 2f       	mov	r18, r20

		Endpoint_SelectEndpoint(EPNum);

		if (EPNum == Number)
		{
			UECFG0XTemp = UECFG0XData;
     6b0:	76 2f       	mov	r23, r22
			UECFG1XTemp = UECFG1XData;
			UEIENXTemp  = 0;
     6b2:	50 e0       	ldi	r21, 0x00	; 0
			UECFG0XTemp = UECFG0X;
			UECFG1XTemp = UECFG1X;
			UEIENXTemp  = UEIENX;
		}

		if (!(UECFG1XTemp & (1 << ALLOC)))
     6b4:	21 ff       	sbrs	r18, 1
     6b6:	19 c0       	rjmp	.+50     	; 0x6ea <Endpoint_ConfigureEndpoint_Prv+0x56>
			 *  to and from a host.
			 */
			static inline void Endpoint_DisableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_DisableEndpoint(void)
			{
				UECONX &= ~(1 << EPEN);
     6b8:	30 91 eb 00 	lds	r19, 0x00EB
     6bc:	3e 7f       	andi	r19, 0xFE	; 254
     6be:	30 93 eb 00 	sts	0x00EB, r19
		  continue;

		Endpoint_DisableEndpoint();
		UECFG1X &= ~(1 << ALLOC);
     6c2:	30 91 ed 00 	lds	r19, 0x00ED
     6c6:	3d 7f       	andi	r19, 0xFD	; 253
     6c8:	30 93 ed 00 	sts	0x00ED, r19
			 *  \note Endpoints must first be configured properly via \ref Endpoint_ConfigureEndpoint().
			 */
			static inline void Endpoint_EnableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_EnableEndpoint(void)
			{
				UECONX |= (1 << EPEN);
     6cc:	30 91 eb 00 	lds	r19, 0x00EB
     6d0:	31 60       	ori	r19, 0x01	; 1
     6d2:	30 93 eb 00 	sts	0x00EB, r19

		Endpoint_EnableEndpoint();
		UECFG0X = UECFG0XTemp;
     6d6:	70 93 ec 00 	sts	0x00EC, r23
		UECFG1X = UECFG1XTemp;
     6da:	20 93 ed 00 	sts	0x00ED, r18
		UEIENX  = UEIENXTemp;
     6de:	50 93 f0 00 	sts	0x00F0, r21
			 *  \return Boolean \c true if the currently selected endpoint has been configured, \c false otherwise.
			 */
			static inline bool Endpoint_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsConfigured(void)
			{
				return ((UESTA0X & (1 << CFGOK)) ? true : false);
     6e2:	20 91 ee 00 	lds	r18, 0x00EE

		if (!(Endpoint_IsConfigured()))
     6e6:	27 ff       	sbrs	r18, 7
     6e8:	08 c0       	rjmp	.+16     	; 0x6fa <Endpoint_ConfigureEndpoint_Prv+0x66>
	UECFG0X = UECFG0XData;
	UECFG1X = UECFG1XData;

	return Endpoint_IsConfigured();
#else
	for (uint8_t EPNum = Number; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
     6ea:	9f 5f       	subi	r25, 0xFF	; 255
     6ec:	97 30       	cpi	r25, 0x07	; 7
     6ee:	a0 f2       	brcs	.-88     	; 0x698 <Endpoint_ConfigureEndpoint_Prv+0x4>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     6f0:	8f 70       	andi	r24, 0x0F	; 15
     6f2:	80 93 e9 00 	sts	0x00E9, r24
		if (!(Endpoint_IsConfigured()))
		  return false;
	}

	Endpoint_SelectEndpoint(Number);
	return true;
     6f6:	81 e0       	ldi	r24, 0x01	; 1
     6f8:	08 95       	ret
		UECFG0X = UECFG0XTemp;
		UECFG1X = UECFG1XTemp;
		UEIENX  = UEIENXTemp;

		if (!(Endpoint_IsConfigured()))
		  return false;
     6fa:	80 e0       	ldi	r24, 0x00	; 0
	}

	Endpoint_SelectEndpoint(Number);
	return true;
#endif
}
     6fc:	08 95       	ret

000006fe <Endpoint_ConfigureEndpointTable>:
uint8_t USB_Device_ControlEndpointSize = ENDPOINT_CONTROLEP_DEFAULT_SIZE;
#endif

bool Endpoint_ConfigureEndpointTable(const USB_Endpoint_Table_t* const Table,
                                     const uint8_t Entries)
{
     6fe:	0f 93       	push	r16
     700:	1f 93       	push	r17
     702:	cf 93       	push	r28
     704:	df 93       	push	r29
     706:	16 2f       	mov	r17, r22
	{
		if (!(Table[i].Address))
		  continue;
	
		if (!(Endpoint_ConfigureEndpoint(Table[i].Address, Table[i].Type, Table[i].Size, Table[i].Banks)))
		  return false;
     708:	ec 01       	movw	r28, r24
#endif

bool Endpoint_ConfigureEndpointTable(const USB_Endpoint_Table_t* const Table,
                                     const uint8_t Entries)
{
	for (uint8_t i = 0; i < Entries; i++)
     70a:	00 e0       	ldi	r16, 0x00	; 0
     70c:	2a c0       	rjmp	.+84     	; 0x762 <Endpoint_ConfigureEndpointTable+0x64>
	{
		if (!(Table[i].Address))
     70e:	98 81       	ld	r25, Y
     710:	99 23       	and	r25, r25
     712:	29 f1       	breq	.+74     	; 0x75e <Endpoint_ConfigureEndpointTable+0x60>
		  continue;
	
		if (!(Endpoint_ConfigureEndpoint(Table[i].Address, Table[i].Type, Table[i].Size, Table[i].Banks)))
     714:	6b 81       	ldd	r22, Y+3	; 0x03
     716:	e9 81       	ldd	r30, Y+1	; 0x01
     718:	fa 81       	ldd	r31, Y+2	; 0x02
     71a:	2c 81       	ldd	r18, Y+4	; 0x04
			static inline bool Endpoint_ConfigureEndpoint(const uint8_t Address,
			                                              const uint8_t Type,
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);
     71c:	89 2f       	mov	r24, r25
     71e:	8f 70       	andi	r24, 0x0F	; 15

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
     720:	87 30       	cpi	r24, 0x07	; 7
     722:	18 f5       	brcc	.+70     	; 0x76a <Endpoint_ConfigureEndpointTable+0x6c>
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
				                                      ((Type << EPTYPE0) | ((Address & ENDPOINT_DIR_IN) ? (1 << EPDIR) : 0)),
     724:	62 95       	swap	r22
     726:	66 0f       	add	r22, r22
     728:	66 0f       	add	r22, r22
     72a:	60 7c       	andi	r22, 0xC0	; 192
     72c:	99 1f       	adc	r25, r25
     72e:	99 27       	eor	r25, r25
     730:	99 1f       	adc	r25, r25
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
     732:	69 2b       	or	r22, r25
     734:	22 30       	cpi	r18, 0x02	; 2
     736:	10 f0       	brcs	.+4      	; 0x73c <Endpoint_ConfigureEndpointTable+0x3e>
     738:	96 e0       	ldi	r25, 0x06	; 6
     73a:	01 c0       	rjmp	.+2      	; 0x73e <Endpoint_ConfigureEndpointTable+0x40>
     73c:	92 e0       	ldi	r25, 0x02	; 2
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes) ATTR_WARN_UNUSED_RESULT ATTR_CONST
			                                                                       ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;
     73e:	28 e0       	ldi	r18, 0x08	; 8
     740:	30 e0       	ldi	r19, 0x00	; 0
		/* Inline Functions: */
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes) ATTR_WARN_UNUSED_RESULT ATTR_CONST
			                                                                       ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
     742:	40 e0       	ldi	r20, 0x00	; 0
     744:	03 c0       	rjmp	.+6      	; 0x74c <Endpoint_ConfigureEndpointTable+0x4e>
				uint16_t CheckBytes = 8;

				while (CheckBytes < Bytes)
				{
					MaskVal++;
     746:	4f 5f       	subi	r20, 0xFF	; 255
					CheckBytes <<= 1;
     748:	22 0f       	add	r18, r18
     74a:	33 1f       	adc	r19, r19
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while (CheckBytes < Bytes)
     74c:	2e 17       	cp	r18, r30
     74e:	3f 07       	cpc	r19, r31
     750:	d0 f3       	brcs	.-12     	; 0x746 <Endpoint_ConfigureEndpointTable+0x48>
				{
					MaskVal++;
					CheckBytes <<= 1;
				}

				return (MaskVal << EPSIZE0);
     752:	42 95       	swap	r20
     754:	40 7f       	andi	r20, 0xF0	; 240
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
     756:	49 2b       	or	r20, r25
     758:	9d df       	rcall	.-198    	; 0x694 <Endpoint_ConfigureEndpoint_Prv>
     75a:	88 23       	and	r24, r24
     75c:	31 f0       	breq	.+12     	; 0x76a <Endpoint_ConfigureEndpointTable+0x6c>
     75e:	0f 5f       	subi	r16, 0xFF	; 255
#endif

bool Endpoint_ConfigureEndpointTable(const USB_Endpoint_Table_t* const Table,
                                     const uint8_t Entries)
{
	for (uint8_t i = 0; i < Entries; i++)
     760:	25 96       	adiw	r28, 0x05	; 5
     762:	01 17       	cp	r16, r17
     764:	a1 f6       	brne	.-88     	; 0x70e <Endpoint_ConfigureEndpointTable+0x10>
     766:	81 e0       	ldi	r24, 0x01	; 1
	
		if (!(Endpoint_ConfigureEndpoint(Table[i].Address, Table[i].Type, Table[i].Size, Table[i].Banks)))
		  return false;
	}
	
	return true;
     768:	01 c0       	rjmp	.+2      	; 0x76c <Endpoint_ConfigureEndpointTable+0x6e>
     76a:	80 e0       	ldi	r24, 0x00	; 0
	{
		if (!(Table[i].Address))
		  continue;
	
		if (!(Endpoint_ConfigureEndpoint(Table[i].Address, Table[i].Type, Table[i].Size, Table[i].Banks)))
		  return false;
     76c:	df 91       	pop	r29
	}
	
	return true;
}
     76e:	cf 91       	pop	r28
     770:	1f 91       	pop	r17
     772:	0f 91       	pop	r16
     774:	08 95       	ret

00000776 <Endpoint_ClearStatusStage>:
     776:	80 91 97 01 	lds	r24, 0x0197
	}
}

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
     77a:	87 ff       	sbrs	r24, 7
     77c:	13 c0       	rjmp	.+38     	; 0x7a4 <Endpoint_ClearStatusStage+0x2e>
     77e:	04 c0       	rjmp	.+8      	; 0x788 <Endpoint_ClearStatusStage+0x12>
	{
		while (!(Endpoint_IsOUTReceived()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
     780:	80 91 96 01 	lds	r24, 0x0196
     784:	88 23       	and	r24, r24
     786:	b9 f0       	breq	.+46     	; 0x7b6 <Endpoint_ClearStatusStage+0x40>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     788:	80 91 e8 00 	lds	r24, 0x00E8

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
	{
		while (!(Endpoint_IsOUTReceived()))
     78c:	82 ff       	sbrs	r24, 2
     78e:	f8 cf       	rjmp	.-16     	; 0x780 <Endpoint_ClearStatusStage+0xa>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     790:	80 91 e8 00 	lds	r24, 0x00E8
     794:	8b 77       	andi	r24, 0x7B	; 123
     796:	80 93 e8 00 	sts	0x00E8, r24
     79a:	08 95       	ret
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
     79c:	80 91 96 01 	lds	r24, 0x0196
     7a0:	88 23       	and	r24, r24
     7a2:	49 f0       	breq	.+18     	; 0x7b6 <Endpoint_ClearStatusStage+0x40>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     7a4:	80 91 e8 00 	lds	r24, 0x00E8

		Endpoint_ClearOUT();
	}
	else
	{
		while (!(Endpoint_IsINReady()))
     7a8:	80 ff       	sbrs	r24, 0
     7aa:	f8 cf       	rjmp	.-16     	; 0x79c <Endpoint_ClearStatusStage+0x26>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     7ac:	80 91 e8 00 	lds	r24, 0x00E8
     7b0:	8e 77       	andi	r24, 0x7E	; 126
     7b2:	80 93 e8 00 	sts	0x00E8, r24
     7b6:	08 95       	ret

000007b8 <Endpoint_WaitUntilReady>:
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
     7b8:	80 91 e4 00 	lds	r24, 0x00E4
     7bc:	90 91 e5 00 	lds	r25, 0x00E5
     7c0:	45 e6       	ldi	r20, 0x65	; 101
     7c2:	01 c0       	rjmp	.+2      	; 0x7c6 <Endpoint_WaitUntilReady+0xe>
     7c4:	c9 01       	movw	r24, r18
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
     7c6:	20 91 ec 00 	lds	r18, 0x00EC
     7ca:	20 ff       	sbrs	r18, 0
     7cc:	23 c0       	rjmp	.+70     	; 0x814 <Endpoint_WaitUntilReady+0x5c>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     7ce:	20 91 e8 00 	lds	r18, 0x00E8

	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
     7d2:	20 fd       	sbrc	r18, 0
     7d4:	15 c0       	rjmp	.+42     	; 0x800 <Endpoint_WaitUntilReady+0x48>
		{
			if (Endpoint_IsOUTReceived())
			  return ENDPOINT_READYWAIT_NoError;
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     7d6:	20 91 96 01 	lds	r18, 0x0196

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     7da:	22 23       	and	r18, r18
     7dc:	99 f0       	breq	.+38     	; 0x804 <Endpoint_WaitUntilReady+0x4c>
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     7de:	25 30       	cpi	r18, 0x05	; 5
     7e0:	99 f0       	breq	.+38     	; 0x808 <Endpoint_WaitUntilReady+0x50>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
     7e2:	20 91 eb 00 	lds	r18, 0x00EB
		  return ENDPOINT_READYWAIT_BusSuspended;
		else if (Endpoint_IsStalled())
     7e6:	25 fd       	sbrc	r18, 5
     7e8:	11 c0       	rjmp	.+34     	; 0x80c <Endpoint_WaitUntilReady+0x54>
     7ea:	20 91 e4 00 	lds	r18, 0x00E4
     7ee:	30 91 e5 00 	lds	r19, 0x00E5
		  return ENDPOINT_READYWAIT_EndpointStalled;

		uint16_t CurrentFrameNumber = USB_Device_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
     7f2:	28 17       	cp	r18, r24
     7f4:	39 07       	cpc	r19, r25
     7f6:	39 f3       	breq	.-50     	; 0x7c6 <Endpoint_WaitUntilReady+0xe>
     7f8:	41 50       	subi	r20, 0x01	; 1
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
     7fa:	21 f7       	brne	.-56     	; 0x7c4 <Endpoint_WaitUntilReady+0xc>
			  return ENDPOINT_READYWAIT_Timeout;
     7fc:	84 e0       	ldi	r24, 0x04	; 4
     7fe:	08 95       	ret
	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
     800:	80 e0       	ldi	r24, 0x00	; 0
     802:	08 95       	ret
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
     804:	82 e0       	ldi	r24, 0x02	; 2
     806:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_READYWAIT_BusSuspended;
     808:	83 e0       	ldi	r24, 0x03	; 3
     80a:	08 95       	ret
		else if (Endpoint_IsStalled())
		  return ENDPOINT_READYWAIT_EndpointStalled;
     80c:	81 e0       	ldi	r24, 0x01	; 1
     80e:	08 95       	ret
			  return ENDPOINT_READYWAIT_NoError;
		}
		else
		{
			if (Endpoint_IsOUTReceived())
			  return ENDPOINT_READYWAIT_NoError;
     810:	80 e0       	ldi	r24, 0x00	; 0

			if (!(TimeoutMSRem--))
			  return ENDPOINT_READYWAIT_Timeout;
		}
	}
}
     812:	08 95       	ret
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     814:	20 91 e8 00 	lds	r18, 0x00E8
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
		}
		else
		{
			if (Endpoint_IsOUTReceived())
     818:	22 ff       	sbrs	r18, 2
     81a:	dd cf       	rjmp	.-70     	; 0x7d6 <Endpoint_WaitUntilReady+0x1e>
     81c:	f9 cf       	rjmp	.-14     	; 0x810 <Endpoint_WaitUntilReady+0x58>

0000081e <USB_ResetInterface>:

	USB_IsInitialized = false;
}

void USB_ResetInterface(void)
{
     81e:	0f 93       	push	r16
     820:	1f 93       	push	r17
     822:	cf 93       	push	r28
     824:	df 93       	push	r29
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
     826:	4e d0       	rcall	.+156    	; 0x8c4 <USB_INT_DisableAllInterrupts>
     828:	55 d0       	rcall	.+170    	; 0x8d4 <USB_INT_ClearAllInterrupts>
	USB_INT_ClearAllInterrupts();
     82a:	c8 ed       	ldi	r28, 0xD8	; 216
     82c:	d0 e0       	ldi	r29, 0x00	; 0
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
     82e:	88 81       	ld	r24, Y
     830:	8f 77       	andi	r24, 0x7F	; 127
     832:	88 83       	st	Y, r24
     834:	88 81       	ld	r24, Y
     836:	80 68       	ori	r24, 0x80	; 128
				USBCON |=  (1 << USBE);
     838:	88 83       	st	Y, r24
     83a:	88 81       	ld	r24, Y
     83c:	8f 7d       	andi	r24, 0xDF	; 223
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
     83e:	88 83       	st	Y, r24
     840:	e7 ed       	ldi	r30, 0xD7	; 215
     842:	f0 e0       	ldi	r31, 0x00	; 0

	if (USB_CurrentMode == USB_MODE_Device)
	{
		#if defined(USB_CAN_BE_DEVICE)
		#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
		UHWCON |=  (1 << UIMOD);
     844:	80 81       	ld	r24, Z
     846:	80 68       	ori	r24, 0x80	; 128
     848:	80 83       	st	Z, r24
     84a:	19 bc       	out	0x29, r1	; 41
     84c:	10 92 96 01 	sts	0x0196, r1
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState                 = DEVICE_STATE_Unattached;
     850:	10 92 92 01 	sts	0x0192, r1
	USB_Device_ConfigurationNumber  = 0;
     854:	10 92 94 01 	sts	0x0194, r1

	#if !defined(NO_DEVICE_REMOTE_WAKEUP)
	USB_Device_RemoteWakeupEnabled  = false;
     858:	10 92 93 01 	sts	0x0193, r1
	#endif

	#if !defined(NO_DEVICE_SELF_POWER)
	USB_Device_CurrentlySelfPowered = false;
     85c:	00 ee       	ldi	r16, 0xE0	; 224
     85e:	10 e0       	ldi	r17, 0x00	; 0
			}

			static inline void USB_Device_SetFullSpeed(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetFullSpeed(void)
			{
				UDCON &= ~(1 << LSM);
     860:	f8 01       	movw	r30, r16
     862:	80 81       	ld	r24, Z
     864:	8b 7f       	andi	r24, 0xFB	; 251
     866:	80 83       	st	Z, r24
     868:	88 81       	ld	r24, Y
     86a:	81 60       	ori	r24, 0x01	; 1
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBCON |= (1 << VBUSTE);
     86c:	88 83       	st	Y, r24
     86e:	80 e0       	ldi	r24, 0x00	; 0
     870:	60 e0       	ldi	r22, 0x00	; 0
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
     872:	42 e0       	ldi	r20, 0x02	; 2
     874:	0f df       	rcall	.-482    	; 0x694 <Endpoint_ConfigureEndpoint_Prv>
     876:	e1 ee       	ldi	r30, 0xE1	; 225
     878:	f0 e0       	ldi	r31, 0x00	; 0
     87a:	80 81       	ld	r24, Z
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
     87c:	8e 7f       	andi	r24, 0xFE	; 254
     87e:	80 83       	st	Z, r24
     880:	e2 ee       	ldi	r30, 0xE2	; 226
     882:	f0 e0       	ldi	r31, 0x00	; 0
     884:	80 81       	ld	r24, Z
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
     886:	81 60       	ori	r24, 0x01	; 1
     888:	80 83       	st	Z, r24
     88a:	80 81       	ld	r24, Z
     88c:	88 60       	ori	r24, 0x08	; 8
     88e:	80 83       	st	Z, r24
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
     890:	f8 01       	movw	r30, r16
     892:	80 81       	ld	r24, Z
     894:	8e 7f       	andi	r24, 0xFE	; 254
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
     896:	80 83       	st	Z, r24
     898:	88 81       	ld	r24, Y
     89a:	80 61       	ori	r24, 0x10	; 16
     89c:	88 83       	st	Y, r24

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON |=  (1 << OTGPADE);
     89e:	df 91       	pop	r29
     8a0:	cf 91       	pop	r28
     8a2:	1f 91       	pop	r17
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
     8a4:	0f 91       	pop	r16
     8a6:	08 95       	ret

000008a8 <USB_Init>:
     8a8:	e8 ed       	ldi	r30, 0xD8	; 216
     8aa:	f0 e0       	ldi	r31, 0x00	; 0
     8ac:	80 81       	ld	r24, Z
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON &= ~(1 << OTGPADE);
     8ae:	8f 7e       	andi	r24, 0xEF	; 239
     8b0:	80 83       	st	Z, r24

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON |=  (1 << UVREGE);
     8b2:	e7 ed       	ldi	r30, 0xD7	; 215
     8b4:	f0 e0       	ldi	r31, 0x00	; 0
     8b6:	80 81       	ld	r24, Z
     8b8:	81 60       	ori	r24, 0x01	; 1
     8ba:	80 83       	st	Z, r24
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
     8bc:	81 e0       	ldi	r24, 0x01	; 1
     8be:	80 93 95 01 	sts	0x0195, r24

	USB_ResetInterface();
     8c2:	ad cf       	rjmp	.-166    	; 0x81e <USB_ResetInterface>

000008c4 <USB_INT_DisableAllInterrupts>:
#include "../USBInterrupt.h"

void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
     8c4:	e8 ed       	ldi	r30, 0xD8	; 216
     8c6:	f0 e0       	ldi	r31, 0x00	; 0
     8c8:	80 81       	ld	r24, Z
     8ca:	8c 7f       	andi	r24, 0xFC	; 252
     8cc:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
     8ce:	10 92 e2 00 	sts	0x00E2, r1
	#endif
}
     8d2:	08 95       	ret

000008d4 <USB_INT_ClearAllInterrupts>:

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
     8d4:	10 92 da 00 	sts	0x00DA, r1
	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
     8d8:	10 92 e1 00 	sts	0x00E1, r1
	#endif
}
     8dc:	08 95       	ret

000008de <__vector_10>:

ISR(USB_GEN_vect, ISR_BLOCK)
{
     8de:	1f 92       	push	r1
     8e0:	0f 92       	push	r0
     8e2:	0f b6       	in	r0, 0x3f	; 63
     8e4:	0f 92       	push	r0
     8e6:	0b b6       	in	r0, 0x3b	; 59
     8e8:	0f 92       	push	r0
     8ea:	11 24       	eor	r1, r1
     8ec:	2f 93       	push	r18
     8ee:	3f 93       	push	r19
     8f0:	4f 93       	push	r20
     8f2:	5f 93       	push	r21
     8f4:	6f 93       	push	r22
     8f6:	7f 93       	push	r23
     8f8:	8f 93       	push	r24
     8fa:	9f 93       	push	r25
     8fc:	af 93       	push	r26
     8fe:	bf 93       	push	r27
     900:	ef 93       	push	r30
     902:	ff 93       	push	r31
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
					case USB_INT_SOFI:
						return (UDINT  & (1 << SOFI));
     904:	80 91 e1 00 	lds	r24, 0x00E1
	#if defined(USB_CAN_BE_DEVICE)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
     908:	82 ff       	sbrs	r24, 2
     90a:	0a c0       	rjmp	.+20     	; 0x920 <__vector_10+0x42>
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
					case USB_INT_SOFI:
						return (UDIEN  & (1 << SOFE));
     90c:	80 91 e2 00 	lds	r24, 0x00E2
     910:	82 ff       	sbrs	r24, 2
     912:	06 c0       	rjmp	.+12     	; 0x920 <__vector_10+0x42>
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
						break;
					case USB_INT_SOFI:
						UDINT  &= ~(1 << SOFI);
     914:	80 91 e1 00 	lds	r24, 0x00E1
     918:	8b 7f       	andi	r24, 0xFB	; 251
     91a:	80 93 e1 00 	sts	0x00E1, r24
	{
		USB_INT_Clear(USB_INT_SOFI);

		EVENT_USB_Device_StartOfFrame();
     91e:	f1 dc       	rcall	.-1566   	; 0x302 <EVENT_USB_Device_StartOfFrame>
     920:	80 91 da 00 	lds	r24, 0x00DA
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBINT & (1 << VBUSTI));
     924:	80 ff       	sbrs	r24, 0
	}
	#endif

	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	if (USB_INT_HasOccurred(USB_INT_VBUSTI) && USB_INT_IsEnabled(USB_INT_VBUSTI))
     926:	1d c0       	rjmp	.+58     	; 0x962 <__vector_10+0x84>
     928:	80 91 d8 00 	lds	r24, 0x00D8
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBCON & (1 << VBUSTE));
     92c:	80 ff       	sbrs	r24, 0
     92e:	19 c0       	rjmp	.+50     	; 0x962 <__vector_10+0x84>
     930:	80 91 da 00 	lds	r24, 0x00DA
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBINT &= ~(1 << VBUSTI);
     934:	8e 7f       	andi	r24, 0xFE	; 254
     936:	80 93 da 00 	sts	0x00DA, r24
     93a:	80 91 d9 00 	lds	r24, 0x00D9
				 *  \return Boolean \c true if the VBUS line is currently detecting power from a host, \c false otherwise.
				 */
				static inline bool USB_VBUS_GetStatus(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
				static inline bool USB_VBUS_GetStatus(void)
				{
					return ((USBSTA & (1 << VBUS)) ? true : false);
     93e:	80 ff       	sbrs	r24, 0
	{
		USB_INT_Clear(USB_INT_VBUSTI);

		if (USB_VBUS_GetStatus())
     940:	0c c0       	rjmp	.+24     	; 0x95a <__vector_10+0x7c>
     942:	8c e0       	ldi	r24, 0x0C	; 12

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
     944:	89 bd       	out	0x29, r24	; 41
     946:	8e e0       	ldi	r24, 0x0E	; 14
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
     948:	89 bd       	out	0x29, r24	; 41
     94a:	09 b4       	in	r0, 0x29	; 41
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			{
				USB_PLL_On();
				while (!(USB_PLL_IsReady()));
     94c:	00 fe       	sbrs	r0, 0
     94e:	fd cf       	rjmp	.-6      	; 0x94a <__vector_10+0x6c>
     950:	81 e0       	ldi	r24, 0x01	; 1
			}

			USB_DeviceState = DEVICE_STATE_Powered;
     952:	80 93 96 01 	sts	0x0196, r24
     956:	ae dc       	rcall	.-1700   	; 0x2b4 <EVENT_USB_Device_Connect>
			EVENT_USB_Device_Connect();
     958:	04 c0       	rjmp	.+8      	; 0x962 <__vector_10+0x84>
     95a:	19 bc       	out	0x29, r1	; 41
     95c:	10 92 96 01 	sts	0x0196, r1
		else
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			  USB_PLL_Off();

			USB_DeviceState = DEVICE_STATE_Unattached;
     960:	ab dc       	rcall	.-1706   	; 0x2b8 <EVENT_USB_Device_Disconnect>
     962:	80 91 e1 00 	lds	r24, 0x00E1
			EVENT_USB_Device_Disconnect();
     966:	80 ff       	sbrs	r24, 0
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
     968:	18 c0       	rjmp	.+48     	; 0x99a <__vector_10+0xbc>
     96a:	80 91 e2 00 	lds	r24, 0x00E2
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
     96e:	80 ff       	sbrs	r24, 0
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
     970:	14 c0       	rjmp	.+40     	; 0x99a <__vector_10+0xbc>
     972:	80 91 e2 00 	lds	r24, 0x00E2
     976:	8e 7f       	andi	r24, 0xFE	; 254
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
     978:	80 93 e2 00 	sts	0x00E2, r24
     97c:	80 91 e2 00 	lds	r24, 0x00E2
     980:	80 61       	ori	r24, 0x10	; 16
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
     982:	80 93 e2 00 	sts	0x00E2, r24
     986:	80 91 d8 00 	lds	r24, 0x00D8
     98a:	80 62       	ori	r24, 0x20	; 32
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON |=  (1 << FRZCLK);
     98c:	80 93 d8 00 	sts	0x00D8, r24
     990:	19 bc       	out	0x29, r1	; 41
     992:	85 e0       	ldi	r24, 0x05	; 5
     994:	80 93 96 01 	sts	0x0196, r24

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
		EVENT_USB_Device_Disconnect();
		#else
		USB_DeviceState = DEVICE_STATE_Suspended;
     998:	14 d2       	rcall	.+1064   	; 0xdc2 <USB_Event_Stub>
     99a:	80 91 e1 00 	lds	r24, 0x00E1
		EVENT_USB_Device_Suspend();
     99e:	84 ff       	sbrs	r24, 4
     9a0:	2d c0       	rjmp	.+90     	; 0x9fc <__vector_10+0x11e>
					case USB_INT_IDTI:
						return (USBINT & (1 << IDTI));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
     9a2:	80 91 e2 00 	lds	r24, 0x00E2
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
     9a6:	84 ff       	sbrs	r24, 4
     9a8:	29 c0       	rjmp	.+82     	; 0x9fc <__vector_10+0x11e>
					case USB_INT_IDTI:
						return (USBCON & (1 << IDTE));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
     9aa:	8c e0       	ldi	r24, 0x0C	; 12
     9ac:	89 bd       	out	0x29, r24	; 41
     9ae:	8e e0       	ldi	r24, 0x0E	; 14
     9b0:	89 bd       	out	0x29, r24	; 41

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
     9b2:	09 b4       	in	r0, 0x29	; 41
     9b4:	00 fe       	sbrs	r0, 0
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
     9b6:	fd cf       	rjmp	.-6      	; 0x9b2 <__vector_10+0xd4>
     9b8:	80 91 d8 00 	lds	r24, 0x00D8
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
     9bc:	8f 7d       	andi	r24, 0xDF	; 223
     9be:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
     9c2:	80 91 e1 00 	lds	r24, 0x00E1
     9c6:	8f 7e       	andi	r24, 0xEF	; 239
     9c8:	80 93 e1 00 	sts	0x00E1, r24
						USBINT &= ~(1 << IDTI);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
     9cc:	80 91 e2 00 	lds	r24, 0x00E2
     9d0:	8f 7e       	andi	r24, 0xEF	; 239
     9d2:	80 93 e2 00 	sts	0x00E2, r24
						USBCON &= ~(1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
     9d6:	80 91 e2 00 	lds	r24, 0x00E2
     9da:	81 60       	ori	r24, 0x01	; 1
     9dc:	80 93 e2 00 	sts	0x00E2, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
     9e0:	80 91 92 01 	lds	r24, 0x0192
     9e4:	88 23       	and	r24, r24
     9e6:	21 f4       	brne	.+8      	; 0x9f0 <__vector_10+0x112>
		USB_INT_Clear(USB_INT_WAKEUPI);

		USB_INT_Disable(USB_INT_WAKEUPI);
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_Device_ConfigurationNumber)
     9e8:	80 91 e3 00 	lds	r24, 0x00E3
     9ec:	87 ff       	sbrs	r24, 7
     9ee:	02 c0       	rjmp	.+4      	; 0x9f4 <__vector_10+0x116>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
     9f0:	84 e0       	ldi	r24, 0x04	; 4
     9f2:	01 c0       	rjmp	.+2      	; 0x9f6 <__vector_10+0x118>
		  USB_DeviceState = DEVICE_STATE_Configured;
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
     9f4:	81 e0       	ldi	r24, 0x01	; 1
     9f6:	80 93 96 01 	sts	0x0196, r24
     9fa:	e3 d1       	rcall	.+966    	; 0xdc2 <USB_Event_Stub>
     9fc:	80 91 e1 00 	lds	r24, 0x00E1
     a00:	83 ff       	sbrs	r24, 3

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
		#else
		EVENT_USB_Device_WakeUp();
     a02:	27 c0       	rjmp	.+78     	; 0xa52 <__vector_10+0x174>
     a04:	80 91 e2 00 	lds	r24, 0x00E2
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
     a08:	83 ff       	sbrs	r24, 3
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
     a0a:	23 c0       	rjmp	.+70     	; 0xa52 <__vector_10+0x174>
     a0c:	80 91 e1 00 	lds	r24, 0x00E1
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
     a10:	87 7f       	andi	r24, 0xF7	; 247
     a12:	80 93 e1 00 	sts	0x00E1, r24
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
     a16:	82 e0       	ldi	r24, 0x02	; 2
     a18:	80 93 96 01 	sts	0x0196, r24
     a1c:	10 92 92 01 	sts	0x0192, r1
	{
		USB_INT_Clear(USB_INT_EORSTI);

		USB_DeviceState                = DEVICE_STATE_Default;
     a20:	80 91 e1 00 	lds	r24, 0x00E1
     a24:	8e 7f       	andi	r24, 0xFE	; 254
		USB_Device_ConfigurationNumber = 0;
     a26:	80 93 e1 00 	sts	0x00E1, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
     a2a:	80 91 e2 00 	lds	r24, 0x00E2
     a2e:	8e 7f       	andi	r24, 0xFE	; 254
     a30:	80 93 e2 00 	sts	0x00E2, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
     a34:	80 91 e2 00 	lds	r24, 0x00E2
     a38:	80 61       	ori	r24, 0x10	; 16
     a3a:	80 93 e2 00 	sts	0x00E2, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
     a3e:	80 e0       	ldi	r24, 0x00	; 0
     a40:	60 e0       	ldi	r22, 0x00	; 0
     a42:	42 e0       	ldi	r20, 0x02	; 2
     a44:	27 de       	rcall	.-946    	; 0x694 <Endpoint_ConfigureEndpoint_Prv>
     a46:	80 91 f0 00 	lds	r24, 0x00F0
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
     a4a:	88 60       	ori	r24, 0x08	; 8
     a4c:	80 93 f0 00 	sts	0x00F0, r24
     a50:	b8 d1       	rcall	.+880    	; 0xdc2 <USB_Event_Stub>
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX |= (1 << RXSTPE);
     a52:	ff 91       	pop	r31
     a54:	ef 91       	pop	r30
     a56:	bf 91       	pop	r27
     a58:	af 91       	pop	r26
     a5a:	9f 91       	pop	r25

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
     a5c:	8f 91       	pop	r24
     a5e:	7f 91       	pop	r23
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
     a60:	6f 91       	pop	r22
     a62:	5f 91       	pop	r21
     a64:	4f 91       	pop	r20
     a66:	3f 91       	pop	r19
     a68:	2f 91       	pop	r18
     a6a:	0f 90       	pop	r0
     a6c:	0b be       	out	0x3b, r0	; 59
     a6e:	0f 90       	pop	r0
     a70:	0f be       	out	0x3f, r0	; 63
     a72:	0f 90       	pop	r0
     a74:	1f 90       	pop	r1
     a76:	18 95       	reti

00000a78 <__vector_11>:
     a78:	1f 92       	push	r1
     a7a:	0f 92       	push	r0
     a7c:	0f b6       	in	r0, 0x3f	; 63
     a7e:	0f 92       	push	r0
     a80:	0b b6       	in	r0, 0x3b	; 59
     a82:	0f 92       	push	r0
     a84:	11 24       	eor	r1, r1

#if defined(INTERRUPT_CONTROL_ENDPOINT) && defined(USB_CAN_BE_DEVICE)
ISR(USB_COM_vect, ISR_BLOCK)
{
     a86:	2f 93       	push	r18
     a88:	3f 93       	push	r19
     a8a:	4f 93       	push	r20
     a8c:	5f 93       	push	r21
     a8e:	6f 93       	push	r22
     a90:	7f 93       	push	r23
     a92:	8f 93       	push	r24
     a94:	9f 93       	push	r25
     a96:	af 93       	push	r26
     a98:	bf 93       	push	r27
     a9a:	cf 93       	push	r28
     a9c:	ef 93       	push	r30
     a9e:	ff 93       	push	r31
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
     aa0:	c0 91 e9 00 	lds	r28, 0x00E9
     aa4:	cf 70       	andi	r28, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
     aa6:	80 91 ec 00 	lds	r24, 0x00EC
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     aaa:	10 92 e9 00 	sts	0x00E9, r1
						break;
					case USB_INT_SOFI:
						UDIEN  &= ~(1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX &= ~(1 << RXSTPE);
     aae:	80 91 f0 00 	lds	r24, 0x00F0
     ab2:	87 7f       	andi	r24, 0xF7	; 247
     ab4:	80 93 f0 00 	sts	0x00F0, r24
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				sei();
     ab8:	78 94       	sei
	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Disable(USB_INT_RXSTPI);

	GlobalInterruptEnable();

	USB_Device_ProcessControlRequest();
     aba:	1d d0       	rcall	.+58     	; 0xaf6 <USB_Device_ProcessControlRequest>
     abc:	10 92 e9 00 	sts	0x00E9, r1
     ac0:	80 91 f0 00 	lds	r24, 0x00F0
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX |= (1 << RXSTPE);
     ac4:	88 60       	ori	r24, 0x08	; 8
     ac6:	80 93 f0 00 	sts	0x00F0, r24
     aca:	c0 93 e9 00 	sts	0x00E9, r28
     ace:	ff 91       	pop	r31

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Enable(USB_INT_RXSTPI);
	Endpoint_SelectEndpoint(PrevSelectedEndpoint);
}
     ad0:	ef 91       	pop	r30
     ad2:	cf 91       	pop	r28
     ad4:	bf 91       	pop	r27
     ad6:	af 91       	pop	r26
     ad8:	9f 91       	pop	r25
     ada:	8f 91       	pop	r24
     adc:	7f 91       	pop	r23
     ade:	6f 91       	pop	r22
     ae0:	5f 91       	pop	r21
     ae2:	4f 91       	pop	r20
     ae4:	3f 91       	pop	r19
     ae6:	2f 91       	pop	r18
     ae8:	0f 90       	pop	r0
     aea:	0b be       	out	0x3b, r0	; 59
     aec:	0f 90       	pop	r0
     aee:	0f be       	out	0x3f, r0	; 63
     af0:	0f 90       	pop	r0
     af2:	1f 90       	pop	r1
     af4:	18 95       	reti

00000af6 <USB_Device_ProcessControlRequest>:
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_Device_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
     af6:	1f 93       	push	r17
     af8:	cf 93       	push	r28
     afa:	df 93       	push	r29
     afc:	cd b7       	in	r28, 0x3d	; 61
     afe:	de b7       	in	r29, 0x3e	; 62
     b00:	ac 97       	sbiw	r28, 0x2c	; 44
     b02:	0f b6       	in	r0, 0x3f	; 63
     b04:	f8 94       	cli
     b06:	de bf       	out	0x3e, r29	; 62
     b08:	0f be       	out	0x3f, r0	; 63
     b0a:	cd bf       	out	0x3d, r28	; 61
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
     b0c:	80 e0       	ldi	r24, 0x00	; 0
	USB_ControlRequest.bRequest      = Endpoint_Read_8();
	USB_ControlRequest.wValue        = Endpoint_Read_16_LE();
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;
     b0e:	e7 e9       	ldi	r30, 0x97	; 151
     b10:	f1 e0       	ldi	r31, 0x01	; 1
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
     b12:	90 91 f1 00 	lds	r25, 0x00F1

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_8();
     b16:	91 93       	st	Z+, r25
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
     b18:	8f 5f       	subi	r24, 0xFF	; 255
     b1a:	88 30       	cpi	r24, 0x08	; 8
     b1c:	d1 f7       	brne	.-12     	; 0xb12 <USB_Device_ProcessControlRequest+0x1c>
	  *(RequestHeader++) = Endpoint_Read_8();
	#endif

	EVENT_USB_Device_ControlRequest();
     b1e:	eb db       	rcall	.-2090   	; 0x2f6 <EVENT_USB_Device_ControlRequest>
     b20:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     b24:	83 ff       	sbrs	r24, 3

	if (Endpoint_IsSETUPReceived())
     b26:	35 c1       	rjmp	.+618    	; 0xd92 <USB_Device_ProcessControlRequest+0x29c>
     b28:	80 91 97 01 	lds	r24, 0x0197
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
     b2c:	20 91 98 01 	lds	r18, 0x0198

		switch (USB_ControlRequest.bRequest)
     b30:	25 30       	cpi	r18, 0x05	; 5
     b32:	09 f4       	brne	.+2      	; 0xb36 <USB_Device_ProcessControlRequest+0x40>
     b34:	84 c0       	rjmp	.+264    	; 0xc3e <USB_Device_ProcessControlRequest+0x148>
     b36:	26 30       	cpi	r18, 0x06	; 6
     b38:	40 f4       	brcc	.+16     	; 0xb4a <USB_Device_ProcessControlRequest+0x54>
     b3a:	21 30       	cpi	r18, 0x01	; 1
     b3c:	a1 f1       	breq	.+104    	; 0xba6 <USB_Device_ProcessControlRequest+0xb0>
     b3e:	21 30       	cpi	r18, 0x01	; 1
     b40:	70 f0       	brcs	.+28     	; 0xb5e <USB_Device_ProcessControlRequest+0x68>
     b42:	23 30       	cpi	r18, 0x03	; 3
     b44:	09 f0       	breq	.+2      	; 0xb48 <USB_Device_ProcessControlRequest+0x52>
     b46:	25 c1       	rjmp	.+586    	; 0xd92 <USB_Device_ProcessControlRequest+0x29c>
     b48:	2e c0       	rjmp	.+92     	; 0xba6 <USB_Device_ProcessControlRequest+0xb0>
     b4a:	28 30       	cpi	r18, 0x08	; 8
     b4c:	09 f4       	brne	.+2      	; 0xb50 <USB_Device_ProcessControlRequest+0x5a>
     b4e:	f3 c0       	rjmp	.+486    	; 0xd36 <USB_Device_ProcessControlRequest+0x240>
     b50:	29 30       	cpi	r18, 0x09	; 9
     b52:	09 f4       	brne	.+2      	; 0xb56 <USB_Device_ProcessControlRequest+0x60>
     b54:	02 c1       	rjmp	.+516    	; 0xd5a <USB_Device_ProcessControlRequest+0x264>
     b56:	26 30       	cpi	r18, 0x06	; 6
     b58:	09 f0       	breq	.+2      	; 0xb5c <USB_Device_ProcessControlRequest+0x66>
     b5a:	1b c1       	rjmp	.+566    	; 0xd92 <USB_Device_ProcessControlRequest+0x29c>
     b5c:	93 c0       	rjmp	.+294    	; 0xc84 <USB_Device_ProcessControlRequest+0x18e>
     b5e:	80 38       	cpi	r24, 0x80	; 128
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
     b60:	21 f0       	breq	.+8      	; 0xb6a <USB_Device_ProcessControlRequest+0x74>
     b62:	82 38       	cpi	r24, 0x82	; 130
     b64:	09 f0       	breq	.+2      	; 0xb68 <USB_Device_ProcessControlRequest+0x72>
     b66:	15 c1       	rjmp	.+554    	; 0xd92 <USB_Device_ProcessControlRequest+0x29c>
     b68:	08 c0       	rjmp	.+16     	; 0xb7a <USB_Device_ProcessControlRequest+0x84>
     b6a:	80 91 93 01 	lds	r24, 0x0193
	Endpoint_ClearOUT();
}

static void USB_Device_GetStatus(void)
{
	uint8_t CurrentStatus = 0;
     b6e:	90 91 94 01 	lds	r25, 0x0194
			if (USB_Device_CurrentlySelfPowered)
			  CurrentStatus |= FEATURE_SELFPOWERED_ENABLED;
			#endif

			#if !defined(NO_DEVICE_REMOTE_WAKEUP)
			if (USB_Device_RemoteWakeupEnabled)
     b72:	99 23       	and	r25, r25
     b74:	71 f0       	breq	.+28     	; 0xb92 <USB_Device_ProcessControlRequest+0x9c>
     b76:	82 60       	ori	r24, 0x02	; 2
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
     b78:	0c c0       	rjmp	.+24     	; 0xb92 <USB_Device_ProcessControlRequest+0x9c>
     b7a:	80 91 9b 01 	lds	r24, 0x019B
			#endif
			break;
		case (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_ENDPOINT):
			#if !defined(CONTROL_ONLY_DEVICE)
			Endpoint_SelectEndpoint((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
     b7e:	8f 70       	andi	r24, 0x0F	; 15
     b80:	80 93 e9 00 	sts	0x00E9, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     b84:	90 91 eb 00 	lds	r25, 0x00EB
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
     b88:	81 e0       	ldi	r24, 0x01	; 1

			CurrentStatus = Endpoint_IsStalled();
     b8a:	95 ff       	sbrs	r25, 5
     b8c:	80 e0       	ldi	r24, 0x00	; 0
     b8e:	10 92 e9 00 	sts	0x00E9, r1
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     b92:	90 91 e8 00 	lds	r25, 0x00E8
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     b96:	97 7f       	andi	r25, 0xF7	; 247
     b98:	90 93 e8 00 	sts	0x00E8, r25
     b9c:	80 93 f1 00 	sts	0x00F1, r24
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
     ba0:	10 92 f1 00 	sts	0x00F1, r1
				UEDATX = (Data >> 8);
     ba4:	d3 c0       	rjmp	.+422    	; 0xd4c <USB_Device_ProcessControlRequest+0x256>
     ba6:	88 23       	and	r24, r24
				}

				break;
			case REQ_ClearFeature:
			case REQ_SetFeature:
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
     ba8:	19 f0       	breq	.+6      	; 0xbb0 <USB_Device_ProcessControlRequest+0xba>
     baa:	82 30       	cpi	r24, 0x02	; 2
     bac:	09 f0       	breq	.+2      	; 0xbb0 <USB_Device_ProcessControlRequest+0xba>
     bae:	f1 c0       	rjmp	.+482    	; 0xd92 <USB_Device_ProcessControlRequest+0x29c>
     bb0:	90 e0       	ldi	r25, 0x00	; 0
	Endpoint_ClearStatusStage();
}

static void USB_Device_ClearSetFeature(void)
{
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
     bb2:	8f 71       	andi	r24, 0x1F	; 31
     bb4:	90 70       	andi	r25, 0x00	; 0
     bb6:	00 97       	sbiw	r24, 0x00	; 0
     bb8:	29 f0       	breq	.+10     	; 0xbc4 <USB_Device_ProcessControlRequest+0xce>
     bba:	82 30       	cpi	r24, 0x02	; 2
     bbc:	91 05       	cpc	r25, r1
     bbe:	09 f0       	breq	.+2      	; 0xbc2 <USB_Device_ProcessControlRequest+0xcc>
     bc0:	e8 c0       	rjmp	.+464    	; 0xd92 <USB_Device_ProcessControlRequest+0x29c>
     bc2:	0b c0       	rjmp	.+22     	; 0xbda <USB_Device_ProcessControlRequest+0xe4>
     bc4:	80 91 99 01 	lds	r24, 0x0199
	{
		#if !defined(NO_DEVICE_REMOTE_WAKEUP)
		case REQREC_DEVICE:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
     bc8:	81 30       	cpi	r24, 0x01	; 1
     bca:	09 f0       	breq	.+2      	; 0xbce <USB_Device_ProcessControlRequest+0xd8>
     bcc:	e2 c0       	rjmp	.+452    	; 0xd92 <USB_Device_ProcessControlRequest+0x29c>
     bce:	23 30       	cpi	r18, 0x03	; 3
			  USB_Device_RemoteWakeupEnabled = (USB_ControlRequest.bRequest == REQ_SetFeature);
     bd0:	09 f0       	breq	.+2      	; 0xbd4 <USB_Device_ProcessControlRequest+0xde>
     bd2:	80 e0       	ldi	r24, 0x00	; 0
     bd4:	80 93 94 01 	sts	0x0194, r24
     bd8:	2c c0       	rjmp	.+88     	; 0xc32 <USB_Device_ProcessControlRequest+0x13c>
     bda:	80 91 99 01 	lds	r24, 0x0199

			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
     bde:	88 23       	and	r24, r24
     be0:	41 f5       	brne	.+80     	; 0xc32 <USB_Device_ProcessControlRequest+0x13c>
     be2:	20 91 9b 01 	lds	r18, 0x019B
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
     be6:	2f 70       	andi	r18, 0x0F	; 15
     be8:	09 f4       	brne	.+2      	; 0xbec <USB_Device_ProcessControlRequest+0xf6>

				if (EndpointIndex == ENDPOINT_CONTROLEP)
     bea:	d3 c0       	rjmp	.+422    	; 0xd92 <USB_Device_ProcessControlRequest+0x29c>
     bec:	20 93 e9 00 	sts	0x00E9, r18
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     bf0:	80 91 eb 00 	lds	r24, 0x00EB
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
     bf4:	80 ff       	sbrs	r24, 0
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
     bf6:	1d c0       	rjmp	.+58     	; 0xc32 <USB_Device_ProcessControlRequest+0x13c>
     bf8:	80 91 98 01 	lds	r24, 0x0198
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
     bfc:	83 30       	cpi	r24, 0x03	; 3
     bfe:	21 f4       	brne	.+8      	; 0xc08 <USB_Device_ProcessControlRequest+0x112>
     c00:	80 91 eb 00 	lds	r24, 0x00EB
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
     c04:	80 62       	ori	r24, 0x20	; 32
     c06:	13 c0       	rjmp	.+38     	; 0xc2e <USB_Device_ProcessControlRequest+0x138>
     c08:	80 91 eb 00 	lds	r24, 0x00EB
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
     c0c:	80 61       	ori	r24, 0x10	; 16
     c0e:	80 93 eb 00 	sts	0x00EB, r24
     c12:	81 e0       	ldi	r24, 0x01	; 1
			 *  \param[in] Address  Endpoint address whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t Address)
			{
				UERST = (1 << (Address & ENDPOINT_EPNUM_MASK));
     c14:	90 e0       	ldi	r25, 0x00	; 0
     c16:	02 c0       	rjmp	.+4      	; 0xc1c <USB_Device_ProcessControlRequest+0x126>
     c18:	88 0f       	add	r24, r24
     c1a:	99 1f       	adc	r25, r25
     c1c:	2a 95       	dec	r18
     c1e:	e2 f7       	brpl	.-8      	; 0xc18 <USB_Device_ProcessControlRequest+0x122>
     c20:	80 93 ea 00 	sts	0x00EA, r24
     c24:	10 92 ea 00 	sts	0x00EA, r1
				UERST = 0;
     c28:	80 91 eb 00 	lds	r24, 0x00EB

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
     c2c:	88 60       	ori	r24, 0x08	; 8
     c2e:	80 93 eb 00 	sts	0x00EB, r24
     c32:	10 92 e9 00 	sts	0x00E9, r1
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     c36:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     c3a:	87 7f       	andi	r24, 0xF7	; 247
     c3c:	8a c0       	rjmp	.+276    	; 0xd52 <USB_Device_ProcessControlRequest+0x25c>
     c3e:	88 23       	and	r24, r24
					USB_Device_ClearSetFeature();
				}

				break;
			case REQ_SetAddress:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
     c40:	09 f0       	breq	.+2      	; 0xc44 <USB_Device_ProcessControlRequest+0x14e>
     c42:	a7 c0       	rjmp	.+334    	; 0xd92 <USB_Device_ProcessControlRequest+0x29c>
     c44:	10 91 99 01 	lds	r17, 0x0199
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t DeviceAddress = (USB_ControlRequest.wValue & 0x7F);
     c48:	1f 77       	andi	r17, 0x7F	; 127
     c4a:	80 91 e3 00 	lds	r24, 0x00E3
			#endif

			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				UDADDR = (UDADDR & (1 << ADDEN)) | (Address & 0x7F);
     c4e:	80 78       	andi	r24, 0x80	; 128
     c50:	81 2b       	or	r24, r17
     c52:	80 93 e3 00 	sts	0x00E3, r24
     c56:	80 91 e8 00 	lds	r24, 0x00E8
     c5a:	87 7f       	andi	r24, 0xF7	; 247
     c5c:	80 93 e8 00 	sts	0x00E8, r24
     c60:	8a dd       	rcall	.-1260   	; 0x776 <Endpoint_ClearStatusStage>

	USB_Device_SetDeviceAddress(DeviceAddress);

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
     c62:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     c66:	80 ff       	sbrs	r24, 0
     c68:	fc cf       	rjmp	.-8      	; 0xc62 <USB_Device_ProcessControlRequest+0x16c>

	while (!(Endpoint_IsINReady()));
     c6a:	80 91 e3 00 	lds	r24, 0x00E3
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address)
			{
				(void)Address;
				
				UDADDR |= (1 << ADDEN);
     c6e:	80 68       	ori	r24, 0x80	; 128
     c70:	80 93 e3 00 	sts	0x00E3, r24
     c74:	11 23       	and	r17, r17
     c76:	11 f0       	breq	.+4      	; 0xc7c <USB_Device_ProcessControlRequest+0x186>

	USB_Device_EnableDeviceAddress(DeviceAddress);

	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
     c78:	83 e0       	ldi	r24, 0x03	; 3
     c7a:	01 c0       	rjmp	.+2      	; 0xc7e <USB_Device_ProcessControlRequest+0x188>
     c7c:	82 e0       	ldi	r24, 0x02	; 2
     c7e:	80 93 96 01 	sts	0x0196, r24
     c82:	87 c0       	rjmp	.+270    	; 0xd92 <USB_Device_ProcessControlRequest+0x29c>
     c84:	80 58       	subi	r24, 0x80	; 128
     c86:	82 30       	cpi	r24, 0x02	; 2
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_SetAddress();

				break;
			case REQ_GetDescriptor:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
     c88:	08 f0       	brcs	.+2      	; 0xc8c <USB_Device_ProcessControlRequest+0x196>
     c8a:	83 c0       	rjmp	.+262    	; 0xd92 <USB_Device_ProcessControlRequest+0x29c>
     c8c:	80 91 99 01 	lds	r24, 0x0199
	    !(defined(USE_FLASH_DESCRIPTORS) || defined(USE_EEPROM_DESCRIPTORS) || defined(USE_RAM_DESCRIPTORS))
	uint8_t DescriptorAddressSpace;
	#endif

	#if !defined(NO_INTERNAL_SERIAL) && (USE_INTERNAL_SERIAL != NO_DESCRIPTOR)
	if (USB_ControlRequest.wValue == ((DTYPE_String << 8) | USE_INTERNAL_SERIAL))
     c90:	90 91 9a 01 	lds	r25, 0x019A
     c94:	23 e0       	ldi	r18, 0x03	; 3
     c96:	8c 3d       	cpi	r24, 0xDC	; 220
     c98:	92 07       	cpc	r25, r18
     c9a:	a9 f5       	brne	.+106    	; 0xd06 <USB_Device_ProcessControlRequest+0x210>
     c9c:	83 e0       	ldi	r24, 0x03	; 3
     c9e:	8c 83       	std	Y+4, r24	; 0x04
	{
		USB_Descriptor_Header_t Header;
		uint16_t                UnicodeString[INTERNAL_SERIAL_LENGTH_BITS / 4];
	} SignatureDescriptor;

	SignatureDescriptor.Header.Type = DTYPE_String;
     ca0:	8a e2       	ldi	r24, 0x2A	; 42
     ca2:	8b 83       	std	Y+3, r24	; 0x03
	SignatureDescriptor.Header.Size = USB_STRING_LEN(INTERNAL_SERIAL_LENGTH_BITS / 4);
     ca4:	5f b7       	in	r21, 0x3f	; 63
     ca6:	f8 94       	cli
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
     ca8:	de 01       	movw	r26, r28
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
     caa:	13 96       	adiw	r26, 0x03	; 3
				__builtin_ssrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				cli();
				#endif

				GCC_MEMORY_BARRIER();
     cac:	80 e0       	ldi	r24, 0x00	; 0
     cae:	90 e0       	ldi	r25, 0x00	; 0
     cb0:	4e e0       	ldi	r20, 0x0E	; 14
     cb2:	61 e2       	ldi	r22, 0x21	; 33
			static inline void USB_Device_GetSerialString(uint16_t* const UnicodeString)
			{
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;
     cb4:	e4 2f       	mov	r30, r20

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
				{
					uint8_t SerialByte = boot_signature_byte_get(SigReadAddress);
     cb6:	f0 e0       	ldi	r31, 0x00	; 0
     cb8:	60 93 57 00 	sts	0x0057, r22
     cbc:	e4 91       	lpm	r30, Z
     cbe:	80 ff       	sbrs	r24, 0
     cc0:	03 c0       	rjmp	.+6      	; 0xcc8 <USB_Device_ProcessControlRequest+0x1d2>

					if (SerialCharNum & 0x01)
     cc2:	e2 95       	swap	r30
     cc4:	ef 70       	andi	r30, 0x0F	; 15
					{
						SerialByte >>= 4;
     cc6:	4f 5f       	subi	r20, 0xFF	; 255
     cc8:	ef 70       	andi	r30, 0x0F	; 15
						SigReadAddress++;
     cca:	2e 2f       	mov	r18, r30
					}

					SerialByte &= 0x0F;
     ccc:	30 e0       	ldi	r19, 0x00	; 0
     cce:	ea 30       	cpi	r30, 0x0A	; 10
     cd0:	18 f0       	brcs	.+6      	; 0xcd8 <USB_Device_ProcessControlRequest+0x1e2>

					UnicodeString[SerialCharNum] = cpu_to_le16((SerialByte >= 10) ?
     cd2:	29 5c       	subi	r18, 0xC9	; 201
     cd4:	3f 4f       	sbci	r19, 0xFF	; 255
     cd6:	02 c0       	rjmp	.+4      	; 0xcdc <USB_Device_ProcessControlRequest+0x1e6>
     cd8:	20 5d       	subi	r18, 0xD0	; 208
     cda:	3f 4f       	sbci	r19, 0xFF	; 255
     cdc:	13 96       	adiw	r26, 0x03	; 3
     cde:	3c 93       	st	X, r19
     ce0:	2e 93       	st	-X, r18
     ce2:	12 97       	sbiw	r26, 0x02	; 2
     ce4:	01 96       	adiw	r24, 0x01	; 1
     ce6:	12 96       	adiw	r26, 0x02	; 2
     ce8:	84 31       	cpi	r24, 0x14	; 20
     cea:	91 05       	cpc	r25, r1
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
     cec:	19 f7       	brne	.-58     	; 0xcb4 <USB_Device_ProcessControlRequest+0x1be>
     cee:	5f bf       	out	0x3f, r21	; 63
     cf0:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     cf4:	87 7f       	andi	r24, 0xF7	; 247
     cf6:	80 93 e8 00 	sts	0x00E8, r24
     cfa:	ce 01       	movw	r24, r28
     cfc:	03 96       	adiw	r24, 0x03	; 3

	USB_Device_GetSerialString(SignatureDescriptor.UnicodeString);

	Endpoint_ClearSETUP();

	Endpoint_Write_Control_Stream_LE(&SignatureDescriptor, sizeof(SignatureDescriptor));
     cfe:	6a e2       	ldi	r22, 0x2A	; 42
     d00:	70 e0       	ldi	r23, 0x00	; 0
     d02:	c6 db       	rcall	.-2164   	; 0x490 <Endpoint_Write_Control_Stream_LE>
     d04:	12 c0       	rjmp	.+36     	; 0xd2a <USB_Device_ProcessControlRequest+0x234>
     d06:	60 91 9b 01 	lds	r22, 0x019B
     d0a:	ae 01       	movw	r20, r28
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif

	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
     d0c:	4f 5f       	subi	r20, 0xFF	; 255
     d0e:	5f 4f       	sbci	r21, 0xFF	; 255
     d10:	33 db       	rcall	.-2458   	; 0x378 <CALLBACK_USB_GetDescriptor>
     d12:	bc 01       	movw	r22, r24
     d14:	00 97       	sbiw	r24, 0x00	; 0
     d16:	09 f4       	brne	.+2      	; 0xd1a <USB_Device_ProcessControlRequest+0x224>
     d18:	3c c0       	rjmp	.+120    	; 0xd92 <USB_Device_ProcessControlRequest+0x29c>
     d1a:	80 91 e8 00 	lds	r24, 0x00E8
     d1e:	87 7f       	andi	r24, 0xF7	; 247
     d20:	80 93 e8 00 	sts	0x00E8, r24
     d24:	89 81       	ldd	r24, Y+1	; 0x01
     d26:	9a 81       	ldd	r25, Y+2	; 0x02
     d28:	58 dc       	rcall	.-1872   	; 0x5da <Endpoint_Write_Control_PStream_LE>
     d2a:	80 91 e8 00 	lds	r24, 0x00E8
	#if defined(USE_RAM_DESCRIPTORS) || !defined(ARCH_HAS_MULTI_ADDRESS_SPACE)
	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_EEPROM_DESCRIPTORS)
	Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_FLASH_DESCRIPTORS)
	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
     d2e:	8b 77       	andi	r24, 0x7B	; 123
     d30:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     d34:	2e c0       	rjmp	.+92     	; 0xd92 <USB_Device_ProcessControlRequest+0x29c>
     d36:	80 38       	cpi	r24, 0x80	; 128
     d38:	61 f5       	brne	.+88     	; 0xd92 <USB_Device_ProcessControlRequest+0x29c>
     d3a:	80 91 e8 00 	lds	r24, 0x00E8
     d3e:	87 7f       	andi	r24, 0xF7	; 247
					USB_Device_GetDescriptor();
				}

				break;
			case REQ_GetConfiguration:
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
     d40:	80 93 e8 00 	sts	0x00E8, r24
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     d44:	80 91 92 01 	lds	r24, 0x0192
     d48:	80 93 f1 00 	sts	0x00F1, r24
     d4c:	80 91 e8 00 	lds	r24, 0x00E8

static void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();

	Endpoint_Write_8(USB_Device_ConfigurationNumber);
     d50:	8e 77       	andi	r24, 0x7E	; 126
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     d52:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     d56:	0f dd       	rcall	.-1506   	; 0x776 <Endpoint_ClearStatusStage>
     d58:	1c c0       	rjmp	.+56     	; 0xd92 <USB_Device_ProcessControlRequest+0x29c>
     d5a:	88 23       	and	r24, r24
     d5c:	d1 f4       	brne	.+52     	; 0xd92 <USB_Device_ProcessControlRequest+0x29c>
     d5e:	90 91 99 01 	lds	r25, 0x0199
	Endpoint_ClearIN();

	Endpoint_ClearStatusStage();
     d62:	92 30       	cpi	r25, 0x02	; 2
     d64:	b0 f4       	brcc	.+44     	; 0xd92 <USB_Device_ProcessControlRequest+0x29c>
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_GetConfiguration();

				break;
			case REQ_SetConfiguration:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
     d66:	80 91 e8 00 	lds	r24, 0x00E8
}

static void USB_Device_SetConfiguration(void)
{
	#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
     d6a:	87 7f       	andi	r24, 0xF7	; 247
     d6c:	80 93 e8 00 	sts	0x00E8, r24
     d70:	90 93 92 01 	sts	0x0192, r25
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     d74:	00 dd       	rcall	.-1536   	; 0x776 <Endpoint_ClearStatusStage>
     d76:	80 91 92 01 	lds	r24, 0x0192
     d7a:	88 23       	and	r24, r24
	#endif
	#endif

	Endpoint_ClearSETUP();

	USB_Device_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
     d7c:	21 f4       	brne	.+8      	; 0xd86 <USB_Device_ProcessControlRequest+0x290>
     d7e:	80 91 e3 00 	lds	r24, 0x00E3

	Endpoint_ClearStatusStage();
     d82:	87 ff       	sbrs	r24, 7

	if (USB_Device_ConfigurationNumber)
     d84:	02 c0       	rjmp	.+4      	; 0xd8a <USB_Device_ProcessControlRequest+0x294>
     d86:	84 e0       	ldi	r24, 0x04	; 4
     d88:	01 c0       	rjmp	.+2      	; 0xd8c <USB_Device_ProcessControlRequest+0x296>
     d8a:	81 e0       	ldi	r24, 0x01	; 1
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
     d8c:	80 93 96 01 	sts	0x0196, r24
	  USB_DeviceState = DEVICE_STATE_Configured;
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
     d90:	95 da       	rcall	.-2774   	; 0x2bc <EVENT_USB_Device_ConfigurationChanged>
     d92:	80 91 e8 00 	lds	r24, 0x00E8
     d96:	83 ff       	sbrs	r24, 3
     d98:	0a c0       	rjmp	.+20     	; 0xdae <USB_Device_ProcessControlRequest+0x2b8>
     d9a:	80 91 e8 00 	lds	r24, 0x00E8

	EVENT_USB_Device_ConfigurationChanged();
     d9e:	87 7f       	andi	r24, 0xF7	; 247
     da0:	80 93 e8 00 	sts	0x00E8, r24
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     da4:	80 91 eb 00 	lds	r24, 0x00EB
			default:
				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
     da8:	80 62       	ori	r24, 0x20	; 32
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     daa:	80 93 eb 00 	sts	0x00EB, r24
     dae:	ac 96       	adiw	r28, 0x2c	; 44
     db0:	0f b6       	in	r0, 0x3f	; 63
     db2:	f8 94       	cli
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
     db4:	de bf       	out	0x3e, r29	; 62
     db6:	0f be       	out	0x3f, r0	; 63
     db8:	cd bf       	out	0x3d, r28	; 61
     dba:	df 91       	pop	r29
     dbc:	cf 91       	pop	r28
	{
		Endpoint_ClearSETUP();
		Endpoint_StallTransaction();
	}
}
     dbe:	1f 91       	pop	r17
     dc0:	08 95       	ret

00000dc2 <USB_Event_Stub>:
#include "Events.h"

void USB_Event_Stub(void)
{

}
     dc2:	08 95       	ret

00000dc4 <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
     dc4:	cf 93       	push	r28
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_DeviceTask(void)
{
	if (USB_DeviceState == DEVICE_STATE_Unattached)
     dc6:	80 91 96 01 	lds	r24, 0x0196
     dca:	88 23       	and	r24, r24
     dcc:	a9 f0       	breq	.+42     	; 0xdf8 <USB_USBTask+0x34>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
     dce:	80 91 e9 00 	lds	r24, 0x00E9
     dd2:	8f 70       	andi	r24, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
     dd4:	90 91 ec 00 	lds	r25, 0x00EC
     dd8:	90 ff       	sbrs	r25, 0
     dda:	02 c0       	rjmp	.+4      	; 0xde0 <USB_USBTask+0x1c>
     ddc:	c0 e8       	ldi	r28, 0x80	; 128
     dde:	01 c0       	rjmp	.+2      	; 0xde2 <USB_USBTask+0x1e>
     de0:	c0 e0       	ldi	r28, 0x00	; 0
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
     de2:	c8 2b       	or	r28, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     de4:	10 92 e9 00 	sts	0x00E9, r1
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     de8:	80 91 e8 00 	lds	r24, 0x00E8

	uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

	if (Endpoint_IsSETUPReceived())
     dec:	83 ff       	sbrs	r24, 3
     dee:	01 c0       	rjmp	.+2      	; 0xdf2 <USB_USBTask+0x2e>
	  USB_Device_ProcessControlRequest();
     df0:	82 de       	rcall	.-764    	; 0xaf6 <USB_Device_ProcessControlRequest>
     df2:	cf 70       	andi	r28, 0x0F	; 15
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     df4:	c0 93 e9 00 	sts	0x00E9, r28
     df8:	cf 91       	pop	r28
	#elif defined(USB_CAN_BE_HOST)
		USB_HostTask();
	#elif defined(USB_CAN_BE_DEVICE)
		USB_DeviceTask();
	#endif
}
     dfa:	08 95       	ret

00000dfc <CDC_Device_ProcessControlRequest>:
#define  __INCLUDE_FROM_CDC_DRIVER
#define  __INCLUDE_FROM_CDC_DEVICE_C
#include "CDCClassDevice.h"

void CDC_Device_ProcessControlRequest(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
     dfc:	cf 93       	push	r28
     dfe:	df 93       	push	r29
     e00:	ec 01       	movw	r28, r24
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     e02:	80 91 e8 00 	lds	r24, 0x00E8
	if (!(Endpoint_IsSETUPReceived()))
     e06:	83 ff       	sbrs	r24, 3
     e08:	a3 c0       	rjmp	.+326    	; 0xf50 <CDC_Device_ProcessControlRequest+0x154>
	  return;

	if (USB_ControlRequest.wIndex != CDCInterfaceInfo->Config.ControlInterfaceNumber)
     e0a:	88 81       	ld	r24, Y
     e0c:	90 e0       	ldi	r25, 0x00	; 0
     e0e:	20 91 9b 01 	lds	r18, 0x019B
     e12:	30 91 9c 01 	lds	r19, 0x019C
     e16:	28 17       	cp	r18, r24
     e18:	39 07       	cpc	r19, r25
     e1a:	09 f0       	breq	.+2      	; 0xe1e <CDC_Device_ProcessControlRequest+0x22>
     e1c:	99 c0       	rjmp	.+306    	; 0xf50 <CDC_Device_ProcessControlRequest+0x154>
	  return;

	switch (USB_ControlRequest.bRequest)
     e1e:	80 91 98 01 	lds	r24, 0x0198
     e22:	81 32       	cpi	r24, 0x21	; 33
     e24:	69 f0       	breq	.+26     	; 0xe40 <CDC_Device_ProcessControlRequest+0x44>
     e26:	82 32       	cpi	r24, 0x22	; 34
     e28:	20 f4       	brcc	.+8      	; 0xe32 <CDC_Device_ProcessControlRequest+0x36>
     e2a:	80 32       	cpi	r24, 0x20	; 32
     e2c:	09 f0       	breq	.+2      	; 0xe30 <CDC_Device_ProcessControlRequest+0x34>
     e2e:	90 c0       	rjmp	.+288    	; 0xf50 <CDC_Device_ProcessControlRequest+0x154>
     e30:	3c c0       	rjmp	.+120    	; 0xeaa <CDC_Device_ProcessControlRequest+0xae>
     e32:	82 32       	cpi	r24, 0x22	; 34
     e34:	09 f4       	brne	.+2      	; 0xe38 <CDC_Device_ProcessControlRequest+0x3c>
     e36:	6b c0       	rjmp	.+214    	; 0xf0e <CDC_Device_ProcessControlRequest+0x112>
     e38:	83 32       	cpi	r24, 0x23	; 35
     e3a:	09 f0       	breq	.+2      	; 0xe3e <CDC_Device_ProcessControlRequest+0x42>
     e3c:	89 c0       	rjmp	.+274    	; 0xf50 <CDC_Device_ProcessControlRequest+0x154>
     e3e:	7a c0       	rjmp	.+244    	; 0xf34 <CDC_Device_ProcessControlRequest+0x138>
	{
		case CDC_REQ_GetLineEncoding:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
     e40:	80 91 97 01 	lds	r24, 0x0197
     e44:	81 3a       	cpi	r24, 0xA1	; 161
     e46:	09 f0       	breq	.+2      	; 0xe4a <CDC_Device_ProcessControlRequest+0x4e>
     e48:	83 c0       	rjmp	.+262    	; 0xf50 <CDC_Device_ProcessControlRequest+0x154>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     e4a:	80 91 e8 00 	lds	r24, 0x00E8
     e4e:	87 7f       	andi	r24, 0xF7	; 247
     e50:	80 93 e8 00 	sts	0x00E8, r24
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     e54:	80 91 e8 00 	lds	r24, 0x00E8
			{
				Endpoint_ClearSETUP();

				while (!(Endpoint_IsINReady()));
     e58:	80 ff       	sbrs	r24, 0
     e5a:	fc cf       	rjmp	.-8      	; 0xe54 <CDC_Device_ProcessControlRequest+0x58>

				Endpoint_Write_32_LE(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS);
     e5c:	8c 89       	ldd	r24, Y+20	; 0x14
     e5e:	9d 89       	ldd	r25, Y+21	; 0x15
     e60:	ae 89       	ldd	r26, Y+22	; 0x16
     e62:	bf 89       	ldd	r27, Y+23	; 0x17
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_32_LE(const uint32_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_32_LE(const uint32_t Data)
			{
				UEDATX = (Data &  0xFF);
     e64:	80 93 f1 00 	sts	0x00F1, r24
				UEDATX = (Data >> 8);
     e68:	49 2f       	mov	r20, r25
     e6a:	5a 2f       	mov	r21, r26
     e6c:	6b 2f       	mov	r22, r27
     e6e:	77 27       	eor	r23, r23
     e70:	40 93 f1 00 	sts	0x00F1, r20
				UEDATX = (Data >> 16);
     e74:	ad 01       	movw	r20, r26
     e76:	66 27       	eor	r22, r22
     e78:	77 27       	eor	r23, r23
     e7a:	40 93 f1 00 	sts	0x00F1, r20
				UEDATX = (Data >> 24);
     e7e:	8b 2f       	mov	r24, r27
     e80:	99 27       	eor	r25, r25
     e82:	aa 27       	eor	r26, r26
     e84:	bb 27       	eor	r27, r27
     e86:	80 93 f1 00 	sts	0x00F1, r24
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.CharFormat);
     e8a:	88 8d       	ldd	r24, Y+24	; 0x18
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     e8c:	80 93 f1 00 	sts	0x00F1, r24
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.ParityType);
     e90:	89 8d       	ldd	r24, Y+25	; 0x19
     e92:	80 93 f1 00 	sts	0x00F1, r24
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.DataBits);
     e96:	8a 8d       	ldd	r24, Y+26	; 0x1a
     e98:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     e9c:	80 91 e8 00 	lds	r24, 0x00E8
     ea0:	8e 77       	andi	r24, 0x7E	; 126
     ea2:	80 93 e8 00 	sts	0x00E8, r24

				Endpoint_ClearIN();
				Endpoint_ClearStatusStage();
     ea6:	67 dc       	rcall	.-1842   	; 0x776 <Endpoint_ClearStatusStage>
     ea8:	53 c0       	rjmp	.+166    	; 0xf50 <CDC_Device_ProcessControlRequest+0x154>
     eaa:	80 91 97 01 	lds	r24, 0x0197
			}

			break;
		case CDC_REQ_SetLineEncoding:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
     eae:	81 32       	cpi	r24, 0x21	; 33
     eb0:	09 f0       	breq	.+2      	; 0xeb4 <CDC_Device_ProcessControlRequest+0xb8>
     eb2:	4e c0       	rjmp	.+156    	; 0xf50 <CDC_Device_ProcessControlRequest+0x154>
     eb4:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     eb8:	87 7f       	andi	r24, 0xF7	; 247
     eba:	80 93 e8 00 	sts	0x00E8, r24
     ebe:	05 c0       	rjmp	.+10     	; 0xeca <CDC_Device_ProcessControlRequest+0xce>
     ec0:	80 91 96 01 	lds	r24, 0x0196
			{
				Endpoint_ClearSETUP();

				while (!(Endpoint_IsOUTReceived()))
				{
					if (USB_DeviceState == DEVICE_STATE_Unattached)
     ec4:	88 23       	and	r24, r24
     ec6:	09 f4       	brne	.+2      	; 0xeca <CDC_Device_ProcessControlRequest+0xce>
     ec8:	43 c0       	rjmp	.+134    	; 0xf50 <CDC_Device_ProcessControlRequest+0x154>
     eca:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     ece:	82 ff       	sbrs	r24, 2
		case CDC_REQ_SetLineEncoding:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
			{
				Endpoint_ClearSETUP();

				while (!(Endpoint_IsOUTReceived()))
     ed0:	f7 cf       	rjmp	.-18     	; 0xec0 <CDC_Device_ProcessControlRequest+0xc4>
     ed2:	30 91 f1 00 	lds	r19, 0x00F1
				{
					uint32_t Value;
					uint8_t  Bytes[4];
				} Data;

				Data.Bytes[0] = UEDATX;
     ed6:	20 91 f1 00 	lds	r18, 0x00F1
				Data.Bytes[1] = UEDATX;
     eda:	90 91 f1 00 	lds	r25, 0x00F1
				Data.Bytes[2] = UEDATX;
     ede:	80 91 f1 00 	lds	r24, 0x00F1
				Data.Bytes[3] = UEDATX;
     ee2:	3c 8b       	std	Y+20, r19	; 0x14
				{
					if (USB_DeviceState == DEVICE_STATE_Unattached)
					  return;
				}

				CDCInterfaceInfo->State.LineEncoding.BaudRateBPS = Endpoint_Read_32_LE();
     ee4:	2d 8b       	std	Y+21, r18	; 0x15
     ee6:	9e 8b       	std	Y+22, r25	; 0x16
     ee8:	8f 8b       	std	Y+23, r24	; 0x17
     eea:	80 91 f1 00 	lds	r24, 0x00F1
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
     eee:	88 8f       	std	Y+24, r24	; 0x18
				CDCInterfaceInfo->State.LineEncoding.CharFormat  = Endpoint_Read_8();
     ef0:	80 91 f1 00 	lds	r24, 0x00F1
     ef4:	89 8f       	std	Y+25, r24	; 0x19
				CDCInterfaceInfo->State.LineEncoding.ParityType  = Endpoint_Read_8();
     ef6:	80 91 f1 00 	lds	r24, 0x00F1
     efa:	8a 8f       	std	Y+26, r24	; 0x1a
				CDCInterfaceInfo->State.LineEncoding.DataBits    = Endpoint_Read_8();
     efc:	80 91 e8 00 	lds	r24, 0x00E8
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     f00:	8b 77       	andi	r24, 0x7B	; 123
     f02:	80 93 e8 00 	sts	0x00E8, r24
     f06:	37 dc       	rcall	.-1938   	; 0x776 <Endpoint_ClearStatusStage>

				Endpoint_ClearOUT();
				Endpoint_ClearStatusStage();
     f08:	ce 01       	movw	r24, r28
     f0a:	e8 d0       	rcall	.+464    	; 0x10dc <CDC_Device_Event_Stub>

				EVENT_CDC_Device_LineEncodingChanged(CDCInterfaceInfo);
     f0c:	21 c0       	rjmp	.+66     	; 0xf50 <CDC_Device_ProcessControlRequest+0x154>
     f0e:	80 91 97 01 	lds	r24, 0x0197
     f12:	81 32       	cpi	r24, 0x21	; 33
			}

			break;
		case CDC_REQ_SetControlLineState:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
     f14:	e9 f4       	brne	.+58     	; 0xf50 <CDC_Device_ProcessControlRequest+0x154>
     f16:	80 91 e8 00 	lds	r24, 0x00E8
     f1a:	87 7f       	andi	r24, 0xF7	; 247
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     f1c:	80 93 e8 00 	sts	0x00E8, r24
     f20:	2a dc       	rcall	.-1964   	; 0x776 <Endpoint_ClearStatusStage>
     f22:	80 91 99 01 	lds	r24, 0x0199
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
     f26:	90 91 9a 01 	lds	r25, 0x019A

				CDCInterfaceInfo->State.ControlLineStates.HostToDevice = USB_ControlRequest.wValue;
     f2a:	99 8b       	std	Y+17, r25	; 0x11
     f2c:	88 8b       	std	Y+16, r24	; 0x10
     f2e:	ce 01       	movw	r24, r28
     f30:	d5 d0       	rcall	.+426    	; 0x10dc <CDC_Device_Event_Stub>
     f32:	0e c0       	rjmp	.+28     	; 0xf50 <CDC_Device_ProcessControlRequest+0x154>
     f34:	80 91 97 01 	lds	r24, 0x0197

				EVENT_CDC_Device_ControLineStateChanged(CDCInterfaceInfo);
     f38:	81 32       	cpi	r24, 0x21	; 33
     f3a:	51 f4       	brne	.+20     	; 0xf50 <CDC_Device_ProcessControlRequest+0x154>
     f3c:	80 91 e8 00 	lds	r24, 0x00E8
			}

			break;
		case CDC_REQ_SendBreak:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
     f40:	87 7f       	andi	r24, 0xF7	; 247
     f42:	80 93 e8 00 	sts	0x00E8, r24
     f46:	17 dc       	rcall	.-2002   	; 0x776 <Endpoint_ClearStatusStage>
     f48:	ce 01       	movw	r24, r28
     f4a:	60 91 99 01 	lds	r22, 0x0199
     f4e:	c6 d0       	rcall	.+396    	; 0x10dc <CDC_Device_Event_Stub>
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
     f50:	df 91       	pop	r29
     f52:	cf 91       	pop	r28

				EVENT_CDC_Device_BreakSent(CDCInterfaceInfo, (uint8_t)USB_ControlRequest.wValue);
     f54:	08 95       	ret

00000f56 <CDC_Device_ConfigureEndpoints>:
     f56:	cf 93       	push	r28
     f58:	df 93       	push	r29
     f5a:	ec 01       	movw	r28, r24
     f5c:	40 96       	adiw	r24, 0x10	; 16
			}

			break;
	}
}
     f5e:	fc 01       	movw	r30, r24
     f60:	8b e0       	ldi	r24, 0x0B	; 11
     f62:	df 01       	movw	r26, r30

bool CDC_Device_ConfigureEndpoints(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
	memset(&CDCInterfaceInfo->State, 0x00, sizeof(CDCInterfaceInfo->State));
     f64:	1d 92       	st	X+, r1
     f66:	8a 95       	dec	r24
     f68:	e9 f7       	brne	.-6      	; 0xf64 <CDC_Device_ConfigureEndpoints+0xe>

	CDCInterfaceInfo->Config.DataINEndpoint.Type       = EP_TYPE_BULK;
     f6a:	82 e0       	ldi	r24, 0x02	; 2
     f6c:	8c 83       	std	Y+4, r24	; 0x04
	CDCInterfaceInfo->Config.DataOUTEndpoint.Type      = EP_TYPE_BULK;
     f6e:	89 87       	std	Y+9, r24	; 0x09
	CDCInterfaceInfo->Config.NotificationEndpoint.Type = EP_TYPE_INTERRUPT;
     f70:	83 e0       	ldi	r24, 0x03	; 3
     f72:	8e 87       	std	Y+14, r24	; 0x0e

	if (!(Endpoint_ConfigureEndpointTable(&CDCInterfaceInfo->Config.DataINEndpoint, 1)))
     f74:	ce 01       	movw	r24, r28
     f76:	01 96       	adiw	r24, 0x01	; 1
     f78:	61 e0       	ldi	r22, 0x01	; 1
     f7a:	c1 db       	rcall	.-2174   	; 0x6fe <Endpoint_ConfigureEndpointTable>
     f7c:	88 23       	and	r24, r24
     f7e:	59 f0       	breq	.+22     	; 0xf96 <CDC_Device_ConfigureEndpoints+0x40>
     f80:	ce 01       	movw	r24, r28
	  return false;

	if (!(Endpoint_ConfigureEndpointTable(&CDCInterfaceInfo->Config.DataOUTEndpoint, 1)))
     f82:	06 96       	adiw	r24, 0x06	; 6
     f84:	61 e0       	ldi	r22, 0x01	; 1
     f86:	bb db       	rcall	.-2186   	; 0x6fe <Endpoint_ConfigureEndpointTable>
     f88:	88 23       	and	r24, r24
     f8a:	29 f0       	breq	.+10     	; 0xf96 <CDC_Device_ConfigureEndpoints+0x40>
     f8c:	ce 01       	movw	r24, r28
     f8e:	0b 96       	adiw	r24, 0x0b	; 11
	  return false;

	if (!(Endpoint_ConfigureEndpointTable(&CDCInterfaceInfo->Config.NotificationEndpoint, 1)))
     f90:	61 e0       	ldi	r22, 0x01	; 1
     f92:	b5 db       	rcall	.-2198   	; 0x6fe <Endpoint_ConfigureEndpointTable>
     f94:	01 c0       	rjmp	.+2      	; 0xf98 <CDC_Device_ConfigureEndpoints+0x42>
     f96:	80 e0       	ldi	r24, 0x00	; 0
     f98:	df 91       	pop	r29
     f9a:	cf 91       	pop	r28

	if (!(Endpoint_ConfigureEndpointTable(&CDCInterfaceInfo->Config.DataINEndpoint, 1)))
	  return false;

	if (!(Endpoint_ConfigureEndpointTable(&CDCInterfaceInfo->Config.DataOUTEndpoint, 1)))
	  return false;
     f9c:	08 95       	ret

00000f9e <CDC_Device_SendString>:

	if (!(Endpoint_ConfigureEndpointTable(&CDCInterfaceInfo->Config.NotificationEndpoint, 1)))
	  return false;

	return true;
}
     f9e:	fc 01       	movw	r30, r24
     fa0:	cb 01       	movw	r24, r22
     fa2:	20 91 96 01 	lds	r18, 0x0196
}

uint8_t CDC_Device_SendString(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo,
                              const char* const String)
{
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
     fa6:	24 30       	cpi	r18, 0x04	; 4
     fa8:	c1 f4       	brne	.+48     	; 0xfda <CDC_Device_SendString+0x3c>
     faa:	44 89       	ldd	r20, Z+20	; 0x14
     fac:	55 89       	ldd	r21, Z+21	; 0x15
     fae:	66 89       	ldd	r22, Z+22	; 0x16
     fb0:	77 89       	ldd	r23, Z+23	; 0x17
     fb2:	41 15       	cp	r20, r1
     fb4:	51 05       	cpc	r21, r1
     fb6:	61 05       	cpc	r22, r1
     fb8:	71 05       	cpc	r23, r1
     fba:	89 f0       	breq	.+34     	; 0xfde <CDC_Device_SendString+0x40>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     fbc:	21 81       	ldd	r18, Z+1	; 0x01
     fbe:	2f 70       	andi	r18, 0x0F	; 15
     fc0:	20 93 e9 00 	sts	0x00E9, r18
	  return ENDPOINT_RWSTREAM_DeviceDisconnected;

	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataINEndpoint.Address);
	return Endpoint_Write_Stream_LE(String, strlen(String), NULL);
     fc4:	fc 01       	movw	r30, r24
     fc6:	01 90       	ld	r0, Z+
     fc8:	00 20       	and	r0, r0
     fca:	e9 f7       	brne	.-6      	; 0xfc6 <CDC_Device_SendString+0x28>
     fcc:	31 97       	sbiw	r30, 0x01	; 1
     fce:	e8 1b       	sub	r30, r24
     fd0:	f9 0b       	sbc	r31, r25
     fd2:	bf 01       	movw	r22, r30
     fd4:	40 e0       	ldi	r20, 0x00	; 0
     fd6:	50 e0       	ldi	r21, 0x00	; 0
     fd8:	0c ca       	rjmp	.-3048   	; 0x3f2 <Endpoint_Write_Stream_LE>
     fda:	82 e0       	ldi	r24, 0x02	; 2
     fdc:	08 95       	ret

uint8_t CDC_Device_SendString(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo,
                              const char* const String)
{
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
	  return ENDPOINT_RWSTREAM_DeviceDisconnected;
     fde:	82 e0       	ldi	r24, 0x02	; 2
     fe0:	08 95       	ret

00000fe2 <CDC_Device_Flush>:
     fe2:	fc 01       	movw	r30, r24

	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataINEndpoint.Address);
	return Endpoint_Write_Stream_LE(String, strlen(String), NULL);
}
     fe4:	80 91 96 01 	lds	r24, 0x0196
	return ENDPOINT_READYWAIT_NoError;
}

uint8_t CDC_Device_Flush(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
     fe8:	84 30       	cpi	r24, 0x04	; 4
     fea:	29 f5       	brne	.+74     	; 0x1036 <CDC_Device_Flush+0x54>
     fec:	44 89       	ldd	r20, Z+20	; 0x14
     fee:	55 89       	ldd	r21, Z+21	; 0x15
     ff0:	66 89       	ldd	r22, Z+22	; 0x16
     ff2:	77 89       	ldd	r23, Z+23	; 0x17
     ff4:	41 15       	cp	r20, r1
     ff6:	51 05       	cpc	r21, r1
     ff8:	61 05       	cpc	r22, r1
     ffa:	71 05       	cpc	r23, r1
     ffc:	e1 f0       	breq	.+56     	; 0x1036 <CDC_Device_Flush+0x54>
     ffe:	81 81       	ldd	r24, Z+1	; 0x01
    1000:	8f 70       	andi	r24, 0x0F	; 15
    1002:	80 93 e9 00 	sts	0x00E9, r24
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
    1006:	80 91 f2 00 	lds	r24, 0x00F2
    100a:	90 91 f3 00 	lds	r25, 0x00F3

	uint8_t ErrorCode;

	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataINEndpoint.Address);

	if (!(Endpoint_BytesInEndpoint()))
    100e:	00 97       	sbiw	r24, 0x00	; 0
    1010:	a1 f0       	breq	.+40     	; 0x103a <CDC_Device_Flush+0x58>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    1012:	90 91 e8 00 	lds	r25, 0x00E8
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1016:	80 91 e8 00 	lds	r24, 0x00E8
    101a:	8e 77       	andi	r24, 0x7E	; 126
    101c:	80 93 e8 00 	sts	0x00E8, r24

	bool BankFull = !(Endpoint_IsReadWriteAllowed());

	Endpoint_ClearIN();

	if (BankFull)
    1020:	95 fd       	sbrc	r25, 5
    1022:	0d c0       	rjmp	.+26     	; 0x103e <CDC_Device_Flush+0x5c>
	{
		if ((ErrorCode = Endpoint_WaitUntilReady()) != ENDPOINT_READYWAIT_NoError)
    1024:	c9 db       	rcall	.-2158   	; 0x7b8 <Endpoint_WaitUntilReady>
    1026:	88 23       	and	r24, r24
    1028:	59 f4       	brne	.+22     	; 0x1040 <CDC_Device_Flush+0x5e>
    102a:	90 91 e8 00 	lds	r25, 0x00E8
    102e:	9e 77       	andi	r25, 0x7E	; 126
    1030:	90 93 e8 00 	sts	0x00E8, r25
    1034:	08 95       	ret
    1036:	82 e0       	ldi	r24, 0x02	; 2
}

uint8_t CDC_Device_Flush(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
	  return ENDPOINT_RWSTREAM_DeviceDisconnected;
    1038:	08 95       	ret
    103a:	80 e0       	ldi	r24, 0x00	; 0
	uint8_t ErrorCode;

	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataINEndpoint.Address);

	if (!(Endpoint_BytesInEndpoint()))
	  return ENDPOINT_READYWAIT_NoError;
    103c:	08 95       	ret
    103e:	80 e0       	ldi	r24, 0x00	; 0
		  return ErrorCode;

		Endpoint_ClearIN();
	}

	return ENDPOINT_READYWAIT_NoError;
    1040:	08 95       	ret

00001042 <CDC_Device_USBTask>:
}
    1042:	20 91 96 01 	lds	r18, 0x0196
	return true;
}

void CDC_Device_USBTask(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
    1046:	24 30       	cpi	r18, 0x04	; 4
    1048:	99 f4       	brne	.+38     	; 0x1070 <CDC_Device_USBTask+0x2e>
    104a:	fc 01       	movw	r30, r24
    104c:	44 89       	ldd	r20, Z+20	; 0x14
    104e:	55 89       	ldd	r21, Z+21	; 0x15
    1050:	66 89       	ldd	r22, Z+22	; 0x16
    1052:	77 89       	ldd	r23, Z+23	; 0x17
    1054:	41 15       	cp	r20, r1
    1056:	51 05       	cpc	r21, r1
    1058:	61 05       	cpc	r22, r1
    105a:	71 05       	cpc	r23, r1
    105c:	49 f0       	breq	.+18     	; 0x1070 <CDC_Device_USBTask+0x2e>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    105e:	21 81       	ldd	r18, Z+1	; 0x01
    1060:	2f 70       	andi	r18, 0x0F	; 15
    1062:	20 93 e9 00 	sts	0x00E9, r18
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1066:	20 91 e8 00 	lds	r18, 0x00E8
	  return;

	#if !defined(NO_CLASS_DRIVER_AUTOFLUSH)
	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataINEndpoint.Address);

	if (Endpoint_IsINReady())
    106a:	20 ff       	sbrs	r18, 0
    106c:	01 c0       	rjmp	.+2      	; 0x1070 <CDC_Device_USBTask+0x2e>
	  CDC_Device_Flush(CDCInterfaceInfo);
    106e:	b9 cf       	rjmp	.-142    	; 0xfe2 <CDC_Device_Flush>
    1070:	08 95       	ret

00001072 <CDC_Device_ReceiveByte>:
    1072:	fc 01       	movw	r30, r24
	}
}

int16_t CDC_Device_ReceiveByte(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
    1074:	80 91 96 01 	lds	r24, 0x0196
    1078:	84 30       	cpi	r24, 0x04	; 4
    107a:	51 f5       	brne	.+84     	; 0x10d0 <CDC_Device_ReceiveByte+0x5e>
    107c:	44 89       	ldd	r20, Z+20	; 0x14
    107e:	55 89       	ldd	r21, Z+21	; 0x15
    1080:	66 89       	ldd	r22, Z+22	; 0x16
    1082:	77 89       	ldd	r23, Z+23	; 0x17
    1084:	41 15       	cp	r20, r1
    1086:	51 05       	cpc	r21, r1
    1088:	61 05       	cpc	r22, r1
    108a:	71 05       	cpc	r23, r1
    108c:	09 f1       	breq	.+66     	; 0x10d0 <CDC_Device_ReceiveByte+0x5e>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    108e:	86 81       	ldd	r24, Z+6	; 0x06
    1090:	8f 70       	andi	r24, 0x0F	; 15
    1092:	80 93 e9 00 	sts	0x00E9, r24
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    1096:	80 91 e8 00 	lds	r24, 0x00E8

	int16_t ReceivedByte = -1;

	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataOUTEndpoint.Address);

	if (Endpoint_IsOUTReceived())
    109a:	82 ff       	sbrs	r24, 2
    109c:	1c c0       	rjmp	.+56     	; 0x10d6 <CDC_Device_ReceiveByte+0x64>
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
    109e:	80 91 f2 00 	lds	r24, 0x00F2
    10a2:	90 91 f3 00 	lds	r25, 0x00F3
	{
		if (Endpoint_BytesInEndpoint())
    10a6:	00 97       	sbiw	r24, 0x00	; 0
    10a8:	21 f0       	breq	.+8      	; 0x10b2 <CDC_Device_ReceiveByte+0x40>
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    10aa:	80 91 f1 00 	lds	r24, 0x00F1
		  ReceivedByte = Endpoint_Read_8();
    10ae:	90 e0       	ldi	r25, 0x00	; 0
    10b0:	02 c0       	rjmp	.+4      	; 0x10b6 <CDC_Device_ReceiveByte+0x44>
int16_t CDC_Device_ReceiveByte(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
	  return -1;

	int16_t ReceivedByte = -1;
    10b2:	8f ef       	ldi	r24, 0xFF	; 255
    10b4:	9f ef       	ldi	r25, 0xFF	; 255
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
    10b6:	20 91 f2 00 	lds	r18, 0x00F2
    10ba:	30 91 f3 00 	lds	r19, 0x00F3
	if (Endpoint_IsOUTReceived())
	{
		if (Endpoint_BytesInEndpoint())
		  ReceivedByte = Endpoint_Read_8();

		if (!(Endpoint_BytesInEndpoint()))
    10be:	21 15       	cp	r18, r1
    10c0:	31 05       	cpc	r19, r1
    10c2:	59 f4       	brne	.+22     	; 0x10da <CDC_Device_ReceiveByte+0x68>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    10c4:	20 91 e8 00 	lds	r18, 0x00E8
    10c8:	2b 77       	andi	r18, 0x7B	; 123
    10ca:	20 93 e8 00 	sts	0x00E8, r18
    10ce:	08 95       	ret
}

int16_t CDC_Device_ReceiveByte(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
	  return -1;
    10d0:	8f ef       	ldi	r24, 0xFF	; 255
    10d2:	9f ef       	ldi	r25, 0xFF	; 255
    10d4:	08 95       	ret

	int16_t ReceivedByte = -1;
    10d6:	8f ef       	ldi	r24, 0xFF	; 255
    10d8:	9f ef       	ldi	r25, 0xFF	; 255
		if (!(Endpoint_BytesInEndpoint()))
		  Endpoint_ClearOUT();
	}

	return ReceivedByte;
}
    10da:	08 95       	ret

000010dc <CDC_Device_Event_Stub>:
#endif

void CDC_Device_Event_Stub(void)
{

}
    10dc:	08 95       	ret

000010de <HID_Device_ProcessControlRequest>:
#define  __INCLUDE_FROM_HID_DRIVER
#define  __INCLUDE_FROM_HID_DEVICE_C
#include "HIDClassDevice.h"

void HID_Device_ProcessControlRequest(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
    10de:	6f 92       	push	r6
    10e0:	7f 92       	push	r7
    10e2:	8f 92       	push	r8
    10e4:	9f 92       	push	r9
    10e6:	af 92       	push	r10
    10e8:	bf 92       	push	r11
    10ea:	cf 92       	push	r12
    10ec:	df 92       	push	r13
    10ee:	ef 92       	push	r14
    10f0:	ff 92       	push	r15
    10f2:	0f 93       	push	r16
    10f4:	1f 93       	push	r17
    10f6:	cf 93       	push	r28
    10f8:	df 93       	push	r29
    10fa:	00 d0       	rcall	.+0      	; 0x10fc <HID_Device_ProcessControlRequest+0x1e>
    10fc:	0f 92       	push	r0
    10fe:	cd b7       	in	r28, 0x3d	; 61
    1100:	de b7       	in	r29, 0x3e	; 62
    1102:	7c 01       	movw	r14, r24
				Endpoint_ClearStatusStage();
			}

			break;
	}
}
    1104:	6d b6       	in	r6, 0x3d	; 61
    1106:	7e b6       	in	r7, 0x3e	; 62
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    1108:	80 91 e8 00 	lds	r24, 0x00E8
#define  __INCLUDE_FROM_HID_DEVICE_C
#include "HIDClassDevice.h"

void HID_Device_ProcessControlRequest(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
	if (!(Endpoint_IsSETUPReceived()))
    110c:	83 ff       	sbrs	r24, 3
    110e:	03 c1       	rjmp	.+518    	; 0x1316 <HID_Device_ProcessControlRequest+0x238>
	  return;

	if (USB_ControlRequest.wIndex != HIDInterfaceInfo->Config.InterfaceNumber)
    1110:	f7 01       	movw	r30, r14
    1112:	80 81       	ld	r24, Z
    1114:	90 e0       	ldi	r25, 0x00	; 0
    1116:	20 91 9b 01 	lds	r18, 0x019B
    111a:	30 91 9c 01 	lds	r19, 0x019C
    111e:	28 17       	cp	r18, r24
    1120:	39 07       	cpc	r19, r25
    1122:	09 f0       	breq	.+2      	; 0x1126 <HID_Device_ProcessControlRequest+0x48>
    1124:	f8 c0       	rjmp	.+496    	; 0x1316 <HID_Device_ProcessControlRequest+0x238>
	  return;

	switch (USB_ControlRequest.bRequest)
    1126:	80 91 98 01 	lds	r24, 0x0198
    112a:	83 30       	cpi	r24, 0x03	; 3
    112c:	09 f4       	brne	.+2      	; 0x1130 <HID_Device_ProcessControlRequest+0x52>
    112e:	9a c0       	rjmp	.+308    	; 0x1264 <HID_Device_ProcessControlRequest+0x186>
    1130:	84 30       	cpi	r24, 0x04	; 4
    1132:	30 f4       	brcc	.+12     	; 0x1140 <HID_Device_ProcessControlRequest+0x62>
    1134:	81 30       	cpi	r24, 0x01	; 1
    1136:	71 f0       	breq	.+28     	; 0x1154 <HID_Device_ProcessControlRequest+0x76>
    1138:	82 30       	cpi	r24, 0x02	; 2
    113a:	09 f0       	breq	.+2      	; 0x113e <HID_Device_ProcessControlRequest+0x60>
    113c:	ec c0       	rjmp	.+472    	; 0x1316 <HID_Device_ProcessControlRequest+0x238>
    113e:	cf c0       	rjmp	.+414    	; 0x12de <HID_Device_ProcessControlRequest+0x200>
    1140:	8a 30       	cpi	r24, 0x0A	; 10
    1142:	09 f4       	brne	.+2      	; 0x1146 <HID_Device_ProcessControlRequest+0x68>
    1144:	b4 c0       	rjmp	.+360    	; 0x12ae <HID_Device_ProcessControlRequest+0x1d0>
    1146:	8b 30       	cpi	r24, 0x0B	; 11
    1148:	09 f4       	brne	.+2      	; 0x114c <HID_Device_ProcessControlRequest+0x6e>
    114a:	9d c0       	rjmp	.+314    	; 0x1286 <HID_Device_ProcessControlRequest+0x1a8>
    114c:	89 30       	cpi	r24, 0x09	; 9
    114e:	09 f0       	breq	.+2      	; 0x1152 <HID_Device_ProcessControlRequest+0x74>
    1150:	e2 c0       	rjmp	.+452    	; 0x1316 <HID_Device_ProcessControlRequest+0x238>
    1152:	4b c0       	rjmp	.+150    	; 0x11ea <HID_Device_ProcessControlRequest+0x10c>
	{
		case HID_REQ_GetReport:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    1154:	80 91 97 01 	lds	r24, 0x0197
    1158:	81 3a       	cpi	r24, 0xA1	; 161
    115a:	09 f0       	breq	.+2      	; 0x115e <HID_Device_ProcessControlRequest+0x80>
    115c:	dc c0       	rjmp	.+440    	; 0x1316 <HID_Device_ProcessControlRequest+0x238>
    115e:	9d b6       	in	r9, 0x3d	; 61
    1160:	8e b6       	in	r8, 0x3e	; 62
			{
				uint16_t ReportSize = 0;
    1162:	1b 82       	std	Y+3, r1	; 0x03
    1164:	1a 82       	std	Y+2, r1	; 0x02
				uint8_t  ReportID   = (USB_ControlRequest.wValue & 0xFF);
    1166:	80 91 99 01 	lds	r24, 0x0199
    116a:	00 91 9a 01 	lds	r16, 0x019A
    116e:	89 83       	std	Y+1, r24	; 0x01
				uint8_t  ReportType = (USB_ControlRequest.wValue >> 8) - 1;
				uint8_t  ReportData[HIDInterfaceInfo->Config.PrevReportINBufferSize];
    1170:	f7 01       	movw	r30, r14
    1172:	40 85       	ldd	r20, Z+8	; 0x08
    1174:	8d b7       	in	r24, 0x3d	; 61
    1176:	9e b7       	in	r25, 0x3e	; 62
    1178:	84 1b       	sub	r24, r20
    117a:	91 09       	sbc	r25, r1
    117c:	0f b6       	in	r0, 0x3f	; 63
    117e:	f8 94       	cli
    1180:	9e bf       	out	0x3e, r25	; 62
    1182:	0f be       	out	0x3f, r0	; 63
    1184:	8d bf       	out	0x3d, r24	; 61
    1186:	cd b6       	in	r12, 0x3d	; 61
    1188:	de b6       	in	r13, 0x3e	; 62
    118a:	08 94       	sec
    118c:	c1 1c       	adc	r12, r1
    118e:	d1 1c       	adc	r13, r1

				memset(ReportData, 0, sizeof(ReportData));
    1190:	bc 2c       	mov	r11, r12
    1192:	ad 2c       	mov	r10, r13
    1194:	c6 01       	movw	r24, r12
    1196:	60 e0       	ldi	r22, 0x00	; 0
    1198:	70 e0       	ldi	r23, 0x00	; 0
    119a:	50 e0       	ldi	r21, 0x00	; 0
    119c:	ca d1       	rcall	.+916    	; 0x1532 <memset>
    119e:	40 2f       	mov	r20, r16
		case HID_REQ_GetReport:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
			{
				uint16_t ReportSize = 0;
				uint8_t  ReportID   = (USB_ControlRequest.wValue & 0xFF);
				uint8_t  ReportType = (USB_ControlRequest.wValue >> 8) - 1;
    11a0:	41 50       	subi	r20, 0x01	; 1
    11a2:	c7 01       	movw	r24, r14
				uint8_t  ReportData[HIDInterfaceInfo->Config.PrevReportINBufferSize];

				memset(ReportData, 0, sizeof(ReportData));

				CALLBACK_HID_Device_CreateHIDReport(HIDInterfaceInfo, &ReportID, ReportType, ReportData, &ReportSize);
    11a4:	be 01       	movw	r22, r28
    11a6:	6f 5f       	subi	r22, 0xFF	; 255
    11a8:	7f 4f       	sbci	r23, 0xFF	; 255
    11aa:	96 01       	movw	r18, r12
    11ac:	8e 01       	movw	r16, r28
    11ae:	0e 5f       	subi	r16, 0xFE	; 254
    11b0:	1f 4f       	sbci	r17, 0xFF	; 255
    11b2:	b3 d8       	rcall	.-3738   	; 0x31a <CALLBACK_HID_Device_CreateHIDReport>
    11b4:	f7 01       	movw	r30, r14
    11b6:	86 81       	ldd	r24, Z+6	; 0x06

				if (HIDInterfaceInfo->Config.PrevReportINBuffer != NULL)
    11b8:	97 81       	ldd	r25, Z+7	; 0x07
    11ba:	00 97       	sbiw	r24, 0x00	; 0
    11bc:	21 f0       	breq	.+8      	; 0x11c6 <HID_Device_ProcessControlRequest+0xe8>
    11be:	40 85       	ldd	r20, Z+8	; 0x08
    11c0:	b6 01       	movw	r22, r12
				{
					memcpy(HIDInterfaceInfo->Config.PrevReportINBuffer, ReportData,
    11c2:	50 e0       	ldi	r21, 0x00	; 0
    11c4:	ad d1       	rcall	.+858    	; 0x1520 <memcpy>
    11c6:	10 92 e9 00 	sts	0x00E9, r1
    11ca:	80 91 e8 00 	lds	r24, 0x00E8
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    11ce:	87 7f       	andi	r24, 0xF7	; 247
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    11d0:	80 93 e8 00 	sts	0x00E8, r24
    11d4:	6a 81       	ldd	r22, Y+2	; 0x02
    11d6:	7b 81       	ldd	r23, Y+3	; 0x03
    11d8:	8b 2d       	mov	r24, r11
				}

				Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

				Endpoint_ClearSETUP();
				Endpoint_Write_Control_Stream_LE(ReportData, ReportSize);
    11da:	9a 2d       	mov	r25, r10
    11dc:	59 d9       	rcall	.-3406   	; 0x490 <Endpoint_Write_Control_Stream_LE>
    11de:	80 91 e8 00 	lds	r24, 0x00E8
    11e2:	8b 77       	andi	r24, 0x7B	; 123
    11e4:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    11e8:	3a c0       	rjmp	.+116    	; 0x125e <HID_Device_ProcessControlRequest+0x180>
    11ea:	80 91 97 01 	lds	r24, 0x0197
    11ee:	81 32       	cpi	r24, 0x21	; 33
    11f0:	09 f0       	breq	.+2      	; 0x11f4 <HID_Device_ProcessControlRequest+0x116>
				Endpoint_ClearOUT();
			}

			break;
		case HID_REQ_SetReport:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    11f2:	91 c0       	rjmp	.+290    	; 0x1316 <HID_Device_ProcessControlRequest+0x238>
    11f4:	9d b6       	in	r9, 0x3d	; 61
    11f6:	8e b6       	in	r8, 0x3e	; 62
    11f8:	00 91 9d 01 	lds	r16, 0x019D
    11fc:	10 91 9e 01 	lds	r17, 0x019E
			{
				uint16_t ReportSize = USB_ControlRequest.wLength;
    1200:	c0 90 99 01 	lds	r12, 0x0199
    1204:	d0 90 9a 01 	lds	r13, 0x019A
				uint8_t  ReportID   = (USB_ControlRequest.wValue & 0xFF);
    1208:	8d b7       	in	r24, 0x3d	; 61
    120a:	9e b7       	in	r25, 0x3e	; 62
    120c:	80 1b       	sub	r24, r16
    120e:	91 0b       	sbc	r25, r17
				uint8_t  ReportType = (USB_ControlRequest.wValue >> 8) - 1;
				uint8_t  ReportData[ReportSize];
    1210:	0f b6       	in	r0, 0x3f	; 63
    1212:	f8 94       	cli
    1214:	9e bf       	out	0x3e, r25	; 62
    1216:	0f be       	out	0x3f, r0	; 63
    1218:	8d bf       	out	0x3d, r24	; 61
    121a:	ad b6       	in	r10, 0x3d	; 61
    121c:	be b6       	in	r11, 0x3e	; 62
    121e:	08 94       	sec
    1220:	a1 1c       	adc	r10, r1
    1222:	b1 1c       	adc	r11, r1
    1224:	80 91 e8 00 	lds	r24, 0x00E8
    1228:	87 7f       	andi	r24, 0xF7	; 247
    122a:	80 93 e8 00 	sts	0x00E8, r24
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    122e:	c5 01       	movw	r24, r10
    1230:	b8 01       	movw	r22, r16
    1232:	8a d9       	rcall	.-3308   	; 0x548 <Endpoint_Read_Control_Stream_LE>
    1234:	80 91 e8 00 	lds	r24, 0x00E8

				Endpoint_ClearSETUP();
				Endpoint_Read_Control_Stream_LE(ReportData, ReportSize);
    1238:	8e 77       	andi	r24, 0x7E	; 126
    123a:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    123e:	81 e0       	ldi	r24, 0x01	; 1
    1240:	90 e0       	ldi	r25, 0x00	; 0
    1242:	cc 20       	and	r12, r12
    1244:	11 f4       	brne	.+4      	; 0x124a <HID_Device_ProcessControlRequest+0x16c>
    1246:	80 e0       	ldi	r24, 0x00	; 0
				Endpoint_ClearIN();

				CALLBACK_HID_Device_ProcessHIDReport(HIDInterfaceInfo, ReportID, ReportType,
    1248:	90 e0       	ldi	r25, 0x00	; 0
    124a:	4d 2d       	mov	r20, r13
    124c:	41 50       	subi	r20, 0x01	; 1
    124e:	95 01       	movw	r18, r10
    1250:	28 0f       	add	r18, r24
    1252:	39 1f       	adc	r19, r25
		case HID_REQ_SetReport:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
			{
				uint16_t ReportSize = USB_ControlRequest.wLength;
				uint8_t  ReportID   = (USB_ControlRequest.wValue & 0xFF);
				uint8_t  ReportType = (USB_ControlRequest.wValue >> 8) - 1;
    1254:	08 1b       	sub	r16, r24
    1256:	19 0b       	sbc	r17, r25

				Endpoint_ClearSETUP();
				Endpoint_Read_Control_Stream_LE(ReportData, ReportSize);
				Endpoint_ClearIN();

				CALLBACK_HID_Device_ProcessHIDReport(HIDInterfaceInfo, ReportID, ReportType,
    1258:	c7 01       	movw	r24, r14
    125a:	6c 2d       	mov	r22, r12
    125c:	8c d8       	rcall	.-3816   	; 0x376 <CALLBACK_HID_Device_ProcessHIDReport>
    125e:	9d be       	out	0x3d, r9	; 61
    1260:	8e be       	out	0x3e, r8	; 62
    1262:	59 c0       	rjmp	.+178    	; 0x1316 <HID_Device_ProcessControlRequest+0x238>
    1264:	80 91 97 01 	lds	r24, 0x0197
    1268:	81 3a       	cpi	r24, 0xA1	; 161
    126a:	09 f0       	breq	.+2      	; 0x126e <HID_Device_ProcessControlRequest+0x190>
    126c:	54 c0       	rjmp	.+168    	; 0x1316 <HID_Device_ProcessControlRequest+0x238>
    126e:	80 91 e8 00 	lds	r24, 0x00E8
				                                     &ReportData[ReportID ? 1 : 0], ReportSize - (ReportID ? 1 : 0));
			}

			break;
		case HID_REQ_GetProtocol:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    1272:	87 7f       	andi	r24, 0xF7	; 247
    1274:	80 93 e8 00 	sts	0x00E8, r24
    1278:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    127c:	80 ff       	sbrs	r24, 0
    127e:	fc cf       	rjmp	.-8      	; 0x1278 <HID_Device_ProcessControlRequest+0x19a>
    1280:	f7 01       	movw	r30, r14
    1282:	81 85       	ldd	r24, Z+9	; 0x09
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1284:	40 c0       	rjmp	.+128    	; 0x1306 <HID_Device_ProcessControlRequest+0x228>
    1286:	80 91 97 01 	lds	r24, 0x0197
			{
				Endpoint_ClearSETUP();
				while (!(Endpoint_IsINReady()));
    128a:	81 32       	cpi	r24, 0x21	; 33
				Endpoint_Write_8(HIDInterfaceInfo->State.UsingReportProtocol);
    128c:	09 f0       	breq	.+2      	; 0x1290 <HID_Device_ProcessControlRequest+0x1b2>
    128e:	43 c0       	rjmp	.+134    	; 0x1316 <HID_Device_ProcessControlRequest+0x238>
    1290:	80 91 e8 00 	lds	r24, 0x00E8
				Endpoint_ClearStatusStage();
			}

			break;
		case HID_REQ_SetProtocol:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    1294:	87 7f       	andi	r24, 0xF7	; 247
    1296:	80 93 e8 00 	sts	0x00E8, r24
    129a:	6d da       	rcall	.-2854   	; 0x776 <Endpoint_ClearStatusStage>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    129c:	90 91 99 01 	lds	r25, 0x0199
    12a0:	81 e0       	ldi	r24, 0x01	; 1
    12a2:	99 23       	and	r25, r25
    12a4:	09 f4       	brne	.+2      	; 0x12a8 <HID_Device_ProcessControlRequest+0x1ca>
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
    12a6:	80 e0       	ldi	r24, 0x00	; 0
    12a8:	f7 01       	movw	r30, r14

				HIDInterfaceInfo->State.UsingReportProtocol = ((USB_ControlRequest.wValue & 0xFF) != 0x00);
    12aa:	81 87       	std	Z+9, r24	; 0x09
    12ac:	34 c0       	rjmp	.+104    	; 0x1316 <HID_Device_ProcessControlRequest+0x238>
    12ae:	80 91 97 01 	lds	r24, 0x0197
    12b2:	81 32       	cpi	r24, 0x21	; 33
    12b4:	81 f5       	brne	.+96     	; 0x1316 <HID_Device_ProcessControlRequest+0x238>
    12b6:	80 91 e8 00 	lds	r24, 0x00E8
    12ba:	87 7f       	andi	r24, 0xF7	; 247
			}

			break;
		case HID_REQ_SetIdle:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    12bc:	80 93 e8 00 	sts	0x00E8, r24
    12c0:	5a da       	rcall	.-2892   	; 0x776 <Endpoint_ClearStatusStage>
    12c2:	80 91 99 01 	lds	r24, 0x0199
    12c6:	90 91 9a 01 	lds	r25, 0x019A
    12ca:	80 70       	andi	r24, 0x00	; 0
    12cc:	36 e0       	ldi	r19, 0x06	; 6
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
    12ce:	96 95       	lsr	r25
    12d0:	87 95       	ror	r24

				HIDInterfaceInfo->State.IdleCount = ((USB_ControlRequest.wValue & 0xFF00) >> 6);
    12d2:	3a 95       	dec	r19
    12d4:	e1 f7       	brne	.-8      	; 0x12ce <HID_Device_ProcessControlRequest+0x1f0>
    12d6:	f7 01       	movw	r30, r14
    12d8:	95 87       	std	Z+13, r25	; 0x0d
    12da:	84 87       	std	Z+12, r24	; 0x0c
    12dc:	1c c0       	rjmp	.+56     	; 0x1316 <HID_Device_ProcessControlRequest+0x238>
    12de:	80 91 97 01 	lds	r24, 0x0197
    12e2:	81 3a       	cpi	r24, 0xA1	; 161
    12e4:	c1 f4       	brne	.+48     	; 0x1316 <HID_Device_ProcessControlRequest+0x238>
    12e6:	80 91 e8 00 	lds	r24, 0x00E8
    12ea:	87 7f       	andi	r24, 0xF7	; 247
    12ec:	80 93 e8 00 	sts	0x00E8, r24
			}

			break;
		case HID_REQ_GetIdle:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    12f0:	80 91 e8 00 	lds	r24, 0x00E8
    12f4:	80 ff       	sbrs	r24, 0
    12f6:	fc cf       	rjmp	.-8      	; 0x12f0 <HID_Device_ProcessControlRequest+0x212>
    12f8:	f7 01       	movw	r30, r14
    12fa:	84 85       	ldd	r24, Z+12	; 0x0c
    12fc:	95 85       	ldd	r25, Z+13	; 0x0d
    12fe:	96 95       	lsr	r25
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1300:	87 95       	ror	r24
    1302:	96 95       	lsr	r25
			{
				Endpoint_ClearSETUP();
				while (!(Endpoint_IsINReady()));
    1304:	87 95       	ror	r24
    1306:	80 93 f1 00 	sts	0x00F1, r24
				Endpoint_Write_8(HIDInterfaceInfo->State.IdleCount >> 2);
    130a:	80 91 e8 00 	lds	r24, 0x00E8
    130e:	8e 77       	andi	r24, 0x7E	; 126
    1310:	80 93 e8 00 	sts	0x00E8, r24
    1314:	30 da       	rcall	.-2976   	; 0x776 <Endpoint_ClearStatusStage>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    1316:	0f b6       	in	r0, 0x3f	; 63
    1318:	f8 94       	cli
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    131a:	7e be       	out	0x3e, r7	; 62
    131c:	0f be       	out	0x3f, r0	; 63
    131e:	6d be       	out	0x3d, r6	; 61
    1320:	0f 90       	pop	r0
    1322:	0f 90       	pop	r0
				Endpoint_ClearIN();
				Endpoint_ClearStatusStage();
    1324:	0f 90       	pop	r0
    1326:	df 91       	pop	r29
			}

			break;
	}
}
    1328:	cf 91       	pop	r28
    132a:	1f 91       	pop	r17
    132c:	0f 91       	pop	r16
    132e:	ff 90       	pop	r15
    1330:	ef 90       	pop	r14
    1332:	df 90       	pop	r13
    1334:	cf 90       	pop	r12
    1336:	bf 90       	pop	r11
    1338:	af 90       	pop	r10
    133a:	9f 90       	pop	r9
    133c:	8f 90       	pop	r8
    133e:	7f 90       	pop	r7
    1340:	6f 90       	pop	r6
    1342:	08 95       	ret

00001344 <HID_Device_ConfigureEndpoints>:
    1344:	cf 93       	push	r28
    1346:	df 93       	push	r29
    1348:	fc 01       	movw	r30, r24
    134a:	09 96       	adiw	r24, 0x09	; 9
    134c:	dc 01       	movw	r26, r24
    134e:	87 e0       	ldi	r24, 0x07	; 7
    1350:	ed 01       	movw	r28, r26
    1352:	19 92       	st	Y+, r1
    1354:	8a 95       	dec	r24

bool HID_Device_ConfigureEndpoints(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
	memset(&HIDInterfaceInfo->State, 0x00, sizeof(HIDInterfaceInfo->State));
    1356:	e9 f7       	brne	.-6      	; 0x1352 <HID_Device_ConfigureEndpoints+0xe>
	HIDInterfaceInfo->State.UsingReportProtocol = true;
    1358:	81 e0       	ldi	r24, 0x01	; 1
    135a:	81 87       	std	Z+9, r24	; 0x09
	HIDInterfaceInfo->State.IdleCount           = 500;
    135c:	84 ef       	ldi	r24, 0xF4	; 244
    135e:	91 e0       	ldi	r25, 0x01	; 1
    1360:	95 87       	std	Z+13, r25	; 0x0d
    1362:	84 87       	std	Z+12, r24	; 0x0c

	HIDInterfaceInfo->Config.ReportINEndpoint.Type = EP_TYPE_INTERRUPT;
    1364:	83 e0       	ldi	r24, 0x03	; 3
    1366:	84 83       	std	Z+4, r24	; 0x04

	if (!(Endpoint_ConfigureEndpointTable(&HIDInterfaceInfo->Config.ReportINEndpoint, 1)))
    1368:	cf 01       	movw	r24, r30
    136a:	01 96       	adiw	r24, 0x01	; 1
    136c:	61 e0       	ldi	r22, 0x01	; 1
    136e:	c7 d9       	rcall	.-3186   	; 0x6fe <Endpoint_ConfigureEndpointTable>
    1370:	df 91       	pop	r29
	  return false;	
	
	return true;
}
    1372:	cf 91       	pop	r28
    1374:	08 95       	ret

00001376 <HID_Device_USBTask>:
    1376:	4f 92       	push	r4

void HID_Device_USBTask(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
    1378:	5f 92       	push	r5
    137a:	6f 92       	push	r6
    137c:	7f 92       	push	r7
    137e:	8f 92       	push	r8
    1380:	9f 92       	push	r9
    1382:	af 92       	push	r10
    1384:	bf 92       	push	r11
    1386:	cf 92       	push	r12
    1388:	df 92       	push	r13
    138a:	ef 92       	push	r14
    138c:	ff 92       	push	r15
    138e:	0f 93       	push	r16
    1390:	1f 93       	push	r17
    1392:	cf 93       	push	r28
    1394:	df 93       	push	r29
    1396:	00 d0       	rcall	.+0      	; 0x1398 <HID_Device_USBTask+0x22>
    1398:	0f 92       	push	r0
    139a:	cd b7       	in	r28, 0x3d	; 61
    139c:	de b7       	in	r29, 0x3e	; 62
    139e:	7c 01       	movw	r14, r24
			Endpoint_ClearIN();
		}
		
		HIDInterfaceInfo->State.PrevFrameNum = USB_Device_GetFrameNumber();
	}
}
    13a0:	4d b6       	in	r4, 0x3d	; 61
    13a2:	5e b6       	in	r5, 0x3e	; 62
	return true;
}

void HID_Device_USBTask(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
	if (USB_DeviceState != DEVICE_STATE_Configured)
    13a4:	80 91 96 01 	lds	r24, 0x0196
    13a8:	84 30       	cpi	r24, 0x04	; 4
    13aa:	09 f0       	breq	.+2      	; 0x13ae <HID_Device_USBTask+0x38>
    13ac:	93 c0       	rjmp	.+294    	; 0x14d4 <HID_Device_USBTask+0x15e>
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
    13ae:	80 91 e4 00 	lds	r24, 0x00E4
    13b2:	90 91 e5 00 	lds	r25, 0x00E5
	  return;

	if (HIDInterfaceInfo->State.PrevFrameNum == USB_Device_GetFrameNumber())
    13b6:	f7 01       	movw	r30, r14
    13b8:	22 85       	ldd	r18, Z+10	; 0x0a
    13ba:	33 85       	ldd	r19, Z+11	; 0x0b
    13bc:	28 17       	cp	r18, r24
    13be:	39 07       	cpc	r19, r25
    13c0:	09 f4       	brne	.+2      	; 0x13c4 <HID_Device_USBTask+0x4e>
    13c2:	88 c0       	rjmp	.+272    	; 0x14d4 <HID_Device_USBTask+0x15e>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    13c4:	81 81       	ldd	r24, Z+1	; 0x01
    13c6:	8f 70       	andi	r24, 0x0F	; 15
    13c8:	80 93 e9 00 	sts	0x00E9, r24
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    13cc:	80 91 e8 00 	lds	r24, 0x00E8
	  return;
	  
	Endpoint_SelectEndpoint(HIDInterfaceInfo->Config.ReportINEndpoint.Address);

	if (Endpoint_IsReadWriteAllowed())
    13d0:	85 ff       	sbrs	r24, 5
    13d2:	80 c0       	rjmp	.+256    	; 0x14d4 <HID_Device_USBTask+0x15e>
    13d4:	7d b6       	in	r7, 0x3d	; 61
    13d6:	6e b6       	in	r6, 0x3e	; 62
	{
		uint8_t  ReportINData[HIDInterfaceInfo->Config.PrevReportINBufferSize];
    13d8:	40 85       	ldd	r20, Z+8	; 0x08
    13da:	8d b7       	in	r24, 0x3d	; 61
    13dc:	9e b7       	in	r25, 0x3e	; 62
    13de:	84 1b       	sub	r24, r20
    13e0:	91 09       	sbc	r25, r1
    13e2:	0f b6       	in	r0, 0x3f	; 63
    13e4:	f8 94       	cli
    13e6:	9e bf       	out	0x3e, r25	; 62
    13e8:	0f be       	out	0x3f, r0	; 63
    13ea:	8d bf       	out	0x3d, r24	; 61
    13ec:	0d b7       	in	r16, 0x3d	; 61
    13ee:	1e b7       	in	r17, 0x3e	; 62
    13f0:	0f 5f       	subi	r16, 0xFF	; 255
    13f2:	1f 4f       	sbci	r17, 0xFF	; 255
		uint8_t  ReportID     = 0;
    13f4:	19 82       	std	Y+1, r1	; 0x01
		uint16_t ReportINSize = 0;
    13f6:	1b 82       	std	Y+3, r1	; 0x03
    13f8:	1a 82       	std	Y+2, r1	; 0x02

		memset(ReportINData, 0, sizeof(ReportINData));
    13fa:	b0 2e       	mov	r11, r16
    13fc:	a1 2e       	mov	r10, r17
    13fe:	c8 01       	movw	r24, r16
    1400:	60 e0       	ldi	r22, 0x00	; 0
    1402:	70 e0       	ldi	r23, 0x00	; 0
    1404:	50 e0       	ldi	r21, 0x00	; 0
    1406:	95 d0       	rcall	.+298    	; 0x1532 <memset>
    1408:	c7 01       	movw	r24, r14

		bool ForceSend         = CALLBACK_HID_Device_CreateHIDReport(HIDInterfaceInfo, &ReportID, HID_REPORT_ITEM_In,
    140a:	be 01       	movw	r22, r28
    140c:	6f 5f       	subi	r22, 0xFF	; 255
    140e:	7f 4f       	sbci	r23, 0xFF	; 255
    1410:	40 e0       	ldi	r20, 0x00	; 0
    1412:	98 01       	movw	r18, r16
    1414:	8e 01       	movw	r16, r28
    1416:	0e 5f       	subi	r16, 0xFE	; 254
    1418:	1f 4f       	sbci	r17, 0xFF	; 255
    141a:	0e 94 8d 01 	call	0x31a	; 0x31a <CALLBACK_HID_Device_CreateHIDReport>
    141e:	18 2f       	mov	r17, r24
    1420:	f7 01       	movw	r30, r14
		                                                             ReportINData, &ReportINSize);
		bool StatesChanged     = false;
		bool IdlePeriodElapsed = (HIDInterfaceInfo->State.IdleCount && !(HIDInterfaceInfo->State.IdleMSRemaining));
    1422:	84 85       	ldd	r24, Z+12	; 0x0c
    1424:	95 85       	ldd	r25, Z+13	; 0x0d
    1426:	00 97       	sbiw	r24, 0x00	; 0
    1428:	59 f0       	breq	.+22     	; 0x1440 <HID_Device_USBTask+0xca>
    142a:	81 e0       	ldi	r24, 0x01	; 1
	  return false;	
	
	return true;
}

void HID_Device_USBTask(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
    142c:	90 e0       	ldi	r25, 0x00	; 0
    142e:	26 85       	ldd	r18, Z+14	; 0x0e
    1430:	37 85       	ldd	r19, Z+15	; 0x0f
    1432:	21 15       	cp	r18, r1
    1434:	31 05       	cpc	r19, r1
    1436:	11 f0       	breq	.+4      	; 0x143c <HID_Device_USBTask+0xc6>
    1438:	80 e0       	ldi	r24, 0x00	; 0
    143a:	90 e0       	ldi	r25, 0x00	; 0
    143c:	4c 01       	movw	r8, r24
		memset(ReportINData, 0, sizeof(ReportINData));

		bool ForceSend         = CALLBACK_HID_Device_CreateHIDReport(HIDInterfaceInfo, &ReportID, HID_REPORT_ITEM_In,
		                                                             ReportINData, &ReportINSize);
		bool StatesChanged     = false;
		bool IdlePeriodElapsed = (HIDInterfaceInfo->State.IdleCount && !(HIDInterfaceInfo->State.IdleMSRemaining));
    143e:	02 c0       	rjmp	.+4      	; 0x1444 <HID_Device_USBTask+0xce>
    1440:	88 24       	eor	r8, r8
    1442:	99 24       	eor	r9, r9
    1444:	f7 01       	movw	r30, r14

		if (HIDInterfaceInfo->Config.PrevReportINBuffer != NULL)
    1446:	c6 80       	ldd	r12, Z+6	; 0x06
    1448:	d7 80       	ldd	r13, Z+7	; 0x07
    144a:	c1 14       	cp	r12, r1
    144c:	d1 04       	cpc	r13, r1
    144e:	91 f0       	breq	.+36     	; 0x1474 <HID_Device_USBTask+0xfe>
    1450:	4a 81       	ldd	r20, Y+2	; 0x02
		{
			StatesChanged = (memcmp(ReportINData, HIDInterfaceInfo->Config.PrevReportINBuffer, ReportINSize) != 0);
    1452:	5b 81       	ldd	r21, Y+3	; 0x03
    1454:	8b 2d       	mov	r24, r11
    1456:	9a 2d       	mov	r25, r10
    1458:	b6 01       	movw	r22, r12
    145a:	55 d0       	rcall	.+170    	; 0x1506 <memcmp>
    145c:	01 e0       	ldi	r16, 0x01	; 1
    145e:	00 97       	sbiw	r24, 0x00	; 0
    1460:	09 f4       	brne	.+2      	; 0x1464 <HID_Device_USBTask+0xee>
    1462:	00 e0       	ldi	r16, 0x00	; 0
    1464:	f7 01       	movw	r30, r14
    1466:	40 85       	ldd	r20, Z+8	; 0x08
			memcpy(HIDInterfaceInfo->Config.PrevReportINBuffer, ReportINData, HIDInterfaceInfo->Config.PrevReportINBufferSize);
    1468:	c6 01       	movw	r24, r12
    146a:	6b 2d       	mov	r22, r11
    146c:	7a 2d       	mov	r23, r10
    146e:	50 e0       	ldi	r21, 0x00	; 0
    1470:	57 d0       	rcall	.+174    	; 0x1520 <memcpy>
    1472:	01 c0       	rjmp	.+2      	; 0x1476 <HID_Device_USBTask+0x100>
    1474:	00 e0       	ldi	r16, 0x00	; 0
    1476:	8a 81       	ldd	r24, Y+2	; 0x02
    1478:	9b 81       	ldd	r25, Y+3	; 0x03

		memset(ReportINData, 0, sizeof(ReportINData));

		bool ForceSend         = CALLBACK_HID_Device_CreateHIDReport(HIDInterfaceInfo, &ReportID, HID_REPORT_ITEM_In,
		                                                             ReportINData, &ReportINSize);
		bool StatesChanged     = false;
    147a:	00 97       	sbiw	r24, 0x00	; 0
		{
			StatesChanged = (memcmp(ReportINData, HIDInterfaceInfo->Config.PrevReportINBuffer, ReportINSize) != 0);
			memcpy(HIDInterfaceInfo->Config.PrevReportINBuffer, ReportINData, HIDInterfaceInfo->Config.PrevReportINBufferSize);
		}

		if (ReportINSize && (ForceSend || StatesChanged || IdlePeriodElapsed))
    147c:	11 f1       	breq	.+68     	; 0x14c2 <HID_Device_USBTask+0x14c>
    147e:	11 23       	and	r17, r17
    1480:	29 f4       	brne	.+10     	; 0x148c <HID_Device_USBTask+0x116>
    1482:	00 23       	and	r16, r16
    1484:	19 f4       	brne	.+6      	; 0x148c <HID_Device_USBTask+0x116>
    1486:	81 14       	cp	r8, r1
    1488:	91 04       	cpc	r9, r1
    148a:	d9 f0       	breq	.+54     	; 0x14c2 <HID_Device_USBTask+0x14c>
    148c:	f7 01       	movw	r30, r14
    148e:	84 85       	ldd	r24, Z+12	; 0x0c
    1490:	95 85       	ldd	r25, Z+13	; 0x0d
		{
			HIDInterfaceInfo->State.IdleMSRemaining = HIDInterfaceInfo->State.IdleCount;
    1492:	97 87       	std	Z+15, r25	; 0x0f
    1494:	86 87       	std	Z+14, r24	; 0x0e
    1496:	81 81       	ldd	r24, Z+1	; 0x01
    1498:	8f 70       	andi	r24, 0x0F	; 15
    149a:	80 93 e9 00 	sts	0x00E9, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    149e:	89 81       	ldd	r24, Y+1	; 0x01
    14a0:	88 23       	and	r24, r24
    14a2:	11 f0       	breq	.+4      	; 0x14a8 <HID_Device_USBTask+0x132>

			Endpoint_SelectEndpoint(HIDInterfaceInfo->Config.ReportINEndpoint.Address);

			if (ReportID)
    14a4:	80 93 f1 00 	sts	0x00F1, r24
    14a8:	6a 81       	ldd	r22, Y+2	; 0x02
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    14aa:	7b 81       	ldd	r23, Y+3	; 0x03
    14ac:	8b 2d       	mov	r24, r11
			  Endpoint_Write_8(ReportID);

			Endpoint_Write_Stream_LE(ReportINData, ReportINSize, NULL);
    14ae:	9a 2d       	mov	r25, r10
    14b0:	40 e0       	ldi	r20, 0x00	; 0
    14b2:	50 e0       	ldi	r21, 0x00	; 0
    14b4:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <Endpoint_Write_Stream_LE>
    14b8:	80 91 e8 00 	lds	r24, 0x00E8
    14bc:	8e 77       	andi	r24, 0x7E	; 126
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    14be:	80 93 e8 00 	sts	0x00E8, r24
    14c2:	80 91 e4 00 	lds	r24, 0x00E4
    14c6:	90 91 e5 00 	lds	r25, 0x00E5
    14ca:	f7 01       	movw	r30, r14
    14cc:	93 87       	std	Z+11, r25	; 0x0b
    14ce:	82 87       	std	Z+10, r24	; 0x0a

			Endpoint_ClearIN();
		}
		
		HIDInterfaceInfo->State.PrevFrameNum = USB_Device_GetFrameNumber();
    14d0:	7d be       	out	0x3d, r7	; 61
    14d2:	6e be       	out	0x3e, r6	; 62
    14d4:	0f b6       	in	r0, 0x3f	; 63
    14d6:	f8 94       	cli
    14d8:	5e be       	out	0x3e, r5	; 62
	}
}
    14da:	0f be       	out	0x3f, r0	; 63
    14dc:	4d be       	out	0x3d, r4	; 61
    14de:	0f 90       	pop	r0
    14e0:	0f 90       	pop	r0
    14e2:	0f 90       	pop	r0
    14e4:	df 91       	pop	r29
    14e6:	cf 91       	pop	r28
    14e8:	1f 91       	pop	r17
    14ea:	0f 91       	pop	r16
    14ec:	ff 90       	pop	r15
    14ee:	ef 90       	pop	r14
    14f0:	df 90       	pop	r13
    14f2:	cf 90       	pop	r12
    14f4:	bf 90       	pop	r11
    14f6:	af 90       	pop	r10
    14f8:	9f 90       	pop	r9
    14fa:	8f 90       	pop	r8
    14fc:	7f 90       	pop	r7
    14fe:	6f 90       	pop	r6
    1500:	5f 90       	pop	r5
    1502:	4f 90       	pop	r4
    1504:	08 95       	ret

00001506 <memcmp>:
    1506:	fb 01       	movw	r30, r22
    1508:	dc 01       	movw	r26, r24
    150a:	04 c0       	rjmp	.+8      	; 0x1514 <memcmp+0xe>
    150c:	8d 91       	ld	r24, X+
    150e:	01 90       	ld	r0, Z+
    1510:	80 19       	sub	r24, r0
    1512:	21 f4       	brne	.+8      	; 0x151c <memcmp+0x16>
    1514:	41 50       	subi	r20, 0x01	; 1
    1516:	50 40       	sbci	r21, 0x00	; 0
    1518:	c8 f7       	brcc	.-14     	; 0x150c <memcmp+0x6>
    151a:	88 1b       	sub	r24, r24
    151c:	99 0b       	sbc	r25, r25
    151e:	08 95       	ret

00001520 <memcpy>:
    1520:	fb 01       	movw	r30, r22
    1522:	dc 01       	movw	r26, r24
    1524:	02 c0       	rjmp	.+4      	; 0x152a <memcpy+0xa>
    1526:	01 90       	ld	r0, Z+
    1528:	0d 92       	st	X+, r0
    152a:	41 50       	subi	r20, 0x01	; 1
    152c:	50 40       	sbci	r21, 0x00	; 0
    152e:	d8 f7       	brcc	.-10     	; 0x1526 <memcpy+0x6>
    1530:	08 95       	ret

00001532 <memset>:
    1532:	dc 01       	movw	r26, r24
    1534:	01 c0       	rjmp	.+2      	; 0x1538 <memset+0x6>
    1536:	6d 93       	st	X+, r22
    1538:	41 50       	subi	r20, 0x01	; 1
    153a:	50 40       	sbci	r21, 0x00	; 0
    153c:	e0 f7       	brcc	.-8      	; 0x1536 <memset+0x4>
    153e:	08 95       	ret

00001540 <_exit>:
    1540:	f8 94       	cli

00001542 <__stop_program>:
    1542:	ff cf       	rjmp	.-2      	; 0x1542 <__stop_program>
