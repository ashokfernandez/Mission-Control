
Keyboard.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000020  00800100  00001152  000011e6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001152  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000015  00800120  00800120  00001206  2**0
                  ALLOC
  3 .stab         00000a98  00000000  00000000  00001208  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000002aa  00000000  00000000  00001ca0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000004f0  00000000  00000000  00001f50  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000085df  00000000  00000000  00002440  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002117  00000000  00000000  0000aa1f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00003ed4  00000000  00000000  0000cb36  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000da0  00000000  00000000  00010a0c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00003840  00000000  00000000  000117ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000051b2  00000000  00000000  00014fec  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000006b0  00000000  00000000  0001a19e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	a8 c0       	rjmp	.+336    	; 0x152 <__ctors_end>
       2:	00 00       	nop
       4:	c4 c0       	rjmp	.+392    	; 0x18e <__bad_interrupt>
       6:	00 00       	nop
       8:	c2 c0       	rjmp	.+388    	; 0x18e <__bad_interrupt>
       a:	00 00       	nop
       c:	c0 c0       	rjmp	.+384    	; 0x18e <__bad_interrupt>
       e:	00 00       	nop
      10:	be c0       	rjmp	.+380    	; 0x18e <__bad_interrupt>
      12:	00 00       	nop
      14:	bc c0       	rjmp	.+376    	; 0x18e <__bad_interrupt>
      16:	00 00       	nop
      18:	ba c0       	rjmp	.+372    	; 0x18e <__bad_interrupt>
      1a:	00 00       	nop
      1c:	b8 c0       	rjmp	.+368    	; 0x18e <__bad_interrupt>
      1e:	00 00       	nop
      20:	b6 c0       	rjmp	.+364    	; 0x18e <__bad_interrupt>
      22:	00 00       	nop
      24:	b4 c0       	rjmp	.+360    	; 0x18e <__bad_interrupt>
      26:	00 00       	nop
      28:	18 c4       	rjmp	.+2096   	; 0x85a <__vector_10>
      2a:	00 00       	nop
      2c:	b0 c0       	rjmp	.+352    	; 0x18e <__bad_interrupt>
      2e:	00 00       	nop
      30:	ae c0       	rjmp	.+348    	; 0x18e <__bad_interrupt>
      32:	00 00       	nop
      34:	ac c0       	rjmp	.+344    	; 0x18e <__bad_interrupt>
      36:	00 00       	nop
      38:	aa c0       	rjmp	.+340    	; 0x18e <__bad_interrupt>
      3a:	00 00       	nop
      3c:	a8 c0       	rjmp	.+336    	; 0x18e <__bad_interrupt>
      3e:	00 00       	nop
      40:	a6 c0       	rjmp	.+332    	; 0x18e <__bad_interrupt>
      42:	00 00       	nop
      44:	a4 c0       	rjmp	.+328    	; 0x18e <__bad_interrupt>
      46:	00 00       	nop
      48:	a2 c0       	rjmp	.+324    	; 0x18e <__bad_interrupt>
      4a:	00 00       	nop
      4c:	a0 c0       	rjmp	.+320    	; 0x18e <__bad_interrupt>
      4e:	00 00       	nop
      50:	9e c0       	rjmp	.+316    	; 0x18e <__bad_interrupt>
      52:	00 00       	nop
      54:	9c c0       	rjmp	.+312    	; 0x18e <__bad_interrupt>
      56:	00 00       	nop
      58:	9a c0       	rjmp	.+308    	; 0x18e <__bad_interrupt>
      5a:	00 00       	nop
      5c:	98 c0       	rjmp	.+304    	; 0x18e <__bad_interrupt>
      5e:	00 00       	nop
      60:	96 c0       	rjmp	.+300    	; 0x18e <__bad_interrupt>
      62:	00 00       	nop
      64:	94 c0       	rjmp	.+296    	; 0x18e <__bad_interrupt>
      66:	00 00       	nop
      68:	92 c0       	rjmp	.+292    	; 0x18e <__bad_interrupt>
      6a:	00 00       	nop
      6c:	90 c0       	rjmp	.+288    	; 0x18e <__bad_interrupt>
      6e:	00 00       	nop
      70:	8e c0       	rjmp	.+284    	; 0x18e <__bad_interrupt>
      72:	00 00       	nop
      74:	8c c0       	rjmp	.+280    	; 0x18e <__bad_interrupt>
      76:	00 00       	nop
      78:	8a c0       	rjmp	.+276    	; 0x18e <__bad_interrupt>
      7a:	00 00       	nop
      7c:	88 c0       	rjmp	.+272    	; 0x18e <__bad_interrupt>
      7e:	00 00       	nop
      80:	86 c0       	rjmp	.+268    	; 0x18e <__bad_interrupt>
      82:	00 00       	nop
      84:	84 c0       	rjmp	.+264    	; 0x18e <__bad_interrupt>
      86:	00 00       	nop
      88:	82 c0       	rjmp	.+260    	; 0x18e <__bad_interrupt>
      8a:	00 00       	nop
      8c:	80 c0       	rjmp	.+256    	; 0x18e <__bad_interrupt>
      8e:	00 00       	nop
      90:	7e c0       	rjmp	.+252    	; 0x18e <__bad_interrupt>
      92:	00 00       	nop
      94:	7c c0       	rjmp	.+248    	; 0x18e <__bad_interrupt>
      96:	00 00       	nop

00000098 <ProductString>:
      98:	26 03 4c 00 55 00 46 00 41 00 20 00 4b 00 65 00     &.L.U.F.A. .K.e.
      a8:	79 00 62 00 6f 00 61 00 72 00 64 00 20 00 44 00     y.b.o.a.r.d. .D.
      b8:	65 00 6d 00 6f 00 00 00                             e.m.o...

000000c0 <ManufacturerString>:
      c0:	18 03 44 00 65 00 61 00 6e 00 20 00 43 00 61 00     ..D.e.a.n. .C.a.
      d0:	6d 00 65 00 72 00 61 00 00 00                       m.e.r.a...

000000da <LanguageString>:
      da:	04 03 09 04                                         ....

000000de <ConfigurationDescriptor>:
      de:	09 02 22 00 01 01 00 c0 32 09 04 00 00 01 03 01     ..".....2.......
      ee:	01 00 09 21 11 01 00 01 22 3f 00 07 05 81 03 08     ...!...."?......
      fe:	00 05                                               ..

00000100 <DeviceDescriptor>:
     100:	12 01 10 01 00 00 00 08 eb 03 42 20 01 00 01 02     ..........B ....
     110:	00 01                                               ..

00000112 <KeyboardReport>:
     112:	05 01 09 06 a1 01 05 07 19 e0 29 e7 15 00 25 01     ..........)...%.
     122:	75 01 95 08 81 02 95 01 75 08 81 01 05 08 19 01     u.......u.......
     132:	29 05 95 05 75 01 91 02 95 01 75 03 91 01 15 00     )...u.....u.....
     142:	25 ff 05 07 19 00 29 ff 95 06 75 08 81 00 c0 00     %.....)...u.....

00000152 <__ctors_end>:
     152:	11 24       	eor	r1, r1
     154:	1f be       	out	0x3f, r1	; 63
     156:	cf ef       	ldi	r28, 0xFF	; 255
     158:	d0 e2       	ldi	r29, 0x20	; 32
     15a:	de bf       	out	0x3e, r29	; 62
     15c:	cd bf       	out	0x3d, r28	; 61

0000015e <__do_copy_data>:
     15e:	11 e0       	ldi	r17, 0x01	; 1
     160:	a0 e0       	ldi	r26, 0x00	; 0
     162:	b1 e0       	ldi	r27, 0x01	; 1
     164:	e2 e5       	ldi	r30, 0x52	; 82
     166:	f1 e1       	ldi	r31, 0x11	; 17
     168:	00 e0       	ldi	r16, 0x00	; 0
     16a:	0b bf       	out	0x3b, r16	; 59
     16c:	02 c0       	rjmp	.+4      	; 0x172 <__do_copy_data+0x14>
     16e:	07 90       	elpm	r0, Z+
     170:	0d 92       	st	X+, r0
     172:	a0 32       	cpi	r26, 0x20	; 32
     174:	b1 07       	cpc	r27, r17
     176:	d9 f7       	brne	.-10     	; 0x16e <__do_copy_data+0x10>
     178:	1b be       	out	0x3b, r1	; 59

0000017a <__do_clear_bss>:
     17a:	11 e0       	ldi	r17, 0x01	; 1
     17c:	a0 e2       	ldi	r26, 0x20	; 32
     17e:	b1 e0       	ldi	r27, 0x01	; 1
     180:	01 c0       	rjmp	.+2      	; 0x184 <.do_clear_bss_start>

00000182 <.do_clear_bss_loop>:
     182:	1d 92       	st	X+, r1

00000184 <.do_clear_bss_start>:
     184:	a5 33       	cpi	r26, 0x35	; 53
     186:	b1 07       	cpc	r27, r17
     188:	e1 f7       	brne	.-8      	; 0x182 <.do_clear_bss_loop>
     18a:	30 d0       	rcall	.+96     	; 0x1ec <main>
     18c:	e0 c7       	rjmp	.+4032   	; 0x114e <_exit>

0000018e <__bad_interrupt>:
     18e:	38 cf       	rjmp	.-400    	; 0x0 <__vectors>

00000190 <LEDs_SetAllLEDs>:
				PORTD &= ~LEDMask;
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
			{
				PORTD = ((PORTD & ~LEDS_ALL_LEDS) | LEDMask);
     190:	9b b1       	in	r25, 0x0b	; 11
     192:	9f 70       	andi	r25, 0x0F	; 15
     194:	98 2b       	or	r25, r24
     196:	9b b9       	out	0x0b, r25	; 11
			}
     198:	08 95       	ret

0000019a <SetupHardware>:

/** Configures the board hardware and chip peripherals for the demo's functionality. */
void SetupHardware()
{
	/* Disable watchdog if enabled by bootloader/fuses */
	MCUSR &= ~(1 << WDRF);
     19a:	84 b7       	in	r24, 0x34	; 52
     19c:	87 7f       	andi	r24, 0xF7	; 247
     19e:	84 bf       	out	0x34, r24	; 52
	wdt_disable();
     1a0:	88 e1       	ldi	r24, 0x18	; 24
     1a2:	0f b6       	in	r0, 0x3f	; 63
     1a4:	f8 94       	cli
     1a6:	80 93 60 00 	sts	0x0060, r24
     1aa:	10 92 60 00 	sts	0x0060, r1
     1ae:	0f be       	out	0x3f, r0	; 63
The type of x is clock_div_t.
*/
void clock_prescale_set(clock_div_t __x)
{
    uint8_t __tmp = _BV(CLKPCE);
    __asm__ __volatile__ (
     1b0:	90 e0       	ldi	r25, 0x00	; 0
     1b2:	80 e8       	ldi	r24, 0x80	; 128
     1b4:	0f b6       	in	r0, 0x3f	; 63
     1b6:	f8 94       	cli
     1b8:	80 93 61 00 	sts	0x0061, r24
     1bc:	90 93 61 00 	sts	0x0061, r25
     1c0:	0f be       	out	0x3f, r0	; 63

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void Joystick_Init(void)
			{
				DDRB  &= ~JOY_BMASK;
     1c2:	84 b1       	in	r24, 0x04	; 4
     1c4:	8f 71       	andi	r24, 0x1F	; 31
     1c6:	84 b9       	out	0x04, r24	; 4
				DDRE  &= ~JOY_EMASK;
     1c8:	8d b1       	in	r24, 0x0d	; 13
     1ca:	8f 7c       	andi	r24, 0xCF	; 207
     1cc:	8d b9       	out	0x0d, r24	; 13

				PORTB |=  JOY_BMASK;
     1ce:	85 b1       	in	r24, 0x05	; 5
     1d0:	80 6e       	ori	r24, 0xE0	; 224
     1d2:	85 b9       	out	0x05, r24	; 5
				PORTE |=  JOY_EMASK;
     1d4:	8e b1       	in	r24, 0x0e	; 14
     1d6:	80 63       	ori	r24, 0x30	; 48
     1d8:	8e b9       	out	0x0e, r24	; 14

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void LEDs_Init(void)
			{
				DDRD  |=  LEDS_ALL_LEDS;
     1da:	8a b1       	in	r24, 0x0a	; 10
     1dc:	80 6f       	ori	r24, 0xF0	; 240
     1de:	8a b9       	out	0x0a, r24	; 10
				PORTD &= ~LEDS_ALL_LEDS;
     1e0:	8b b1       	in	r24, 0x0b	; 11
     1e2:	8f 70       	andi	r24, 0x0F	; 15
     1e4:	8b b9       	out	0x0b, r24	; 11

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void Buttons_Init(void)
			{
				DDRE  &= ~BUTTONS_BUTTON1;
     1e6:	6a 98       	cbi	0x0d, 2	; 13
				PORTE |=  BUTTONS_BUTTON1;
     1e8:	72 9a       	sbi	0x0e, 2	; 14

	/* Hardware Initialization */
	Joystick_Init();
	LEDs_Init();
	Buttons_Init();
	USB_Init();
     1ea:	1c c3       	rjmp	.+1592   	; 0x824 <USB_Init>

000001ec <main>:
     1ec:	d6 df       	rcall	.-84     	; 0x19a <SetupHardware>
}
     1ee:	80 e1       	ldi	r24, 0x10	; 16
 */
int main(void)
{
	SetupHardware();

	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
     1f0:	cf df       	rcall	.-98     	; 0x190 <LEDs_SetAllLEDs>
     1f2:	78 94       	sei
     1f4:	80 e0       	ldi	r24, 0x00	; 0
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				sei();
     1f6:	91 e0       	ldi	r25, 0x01	; 1
	GlobalInterruptEnable();

	for (;;)
	{
		HID_Device_USBTask(&Keyboard_HID_Interface);
     1f8:	c7 d6       	rcall	.+3470   	; 0xf88 <HID_Device_USBTask>
     1fa:	5e d5       	rcall	.+2748   	; 0xcb8 <USB_USBTask>
     1fc:	fb cf       	rjmp	.-10     	; 0x1f4 <main+0x8>

000001fe <EVENT_USB_Device_Connect>:
     1fe:	80 ea       	ldi	r24, 0xA0	; 160
		USB_USBTask();
     200:	c7 cf       	rjmp	.-114    	; 0x190 <LEDs_SetAllLEDs>

00000202 <EVENT_USB_Device_Disconnect>:
     202:	80 e1       	ldi	r24, 0x10	; 16
     204:	c5 cf       	rjmp	.-118    	; 0x190 <LEDs_SetAllLEDs>

00000206 <EVENT_USB_Device_ConfigurationChanged>:
}

/** Event handler for the library USB Disconnection event. */
void EVENT_USB_Device_Disconnect(void)
{
	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
     206:	80 e0       	ldi	r24, 0x00	; 0
}
     208:	91 e0       	ldi	r25, 0x01	; 1
/** Event handler for the library USB Configuration Changed event. */
void EVENT_USB_Device_ConfigurationChanged(void)
{
	bool ConfigSuccess = true;

	ConfigSuccess &= HID_Device_ConfigureEndpoints(&Keyboard_HID_Interface);
     20a:	a5 d6       	rcall	.+3402   	; 0xf56 <HID_Device_ConfigureEndpoints>
     20c:	90 91 e2 00 	lds	r25, 0x00E2
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
     210:	94 60       	ori	r25, 0x04	; 4
     212:	90 93 e2 00 	sts	0x00E2, r25
     216:	88 23       	and	r24, r24

	USB_Device_EnableSOFEvents();

	LEDs_SetAllLEDs(ConfigSuccess ? LEDMASK_USB_READY : LEDMASK_USB_ERROR);
     218:	11 f0       	breq	.+4      	; 0x21e <EVENT_USB_Device_ConfigurationChanged+0x18>
     21a:	80 e6       	ldi	r24, 0x60	; 96
     21c:	01 c0       	rjmp	.+2      	; 0x220 <EVENT_USB_Device_ConfigurationChanged+0x1a>
     21e:	80 e9       	ldi	r24, 0x90	; 144
     220:	b7 cf       	rjmp	.-146    	; 0x190 <LEDs_SetAllLEDs>

00000222 <EVENT_USB_Device_ControlRequest>:
     222:	80 e0       	ldi	r24, 0x00	; 0
     224:	91 e0       	ldi	r25, 0x01	; 1
}
     226:	64 c5       	rjmp	.+2760   	; 0xcf0 <HID_Device_ProcessControlRequest>

00000228 <EVENT_USB_Device_StartOfFrame>:

/** Event handler for the library USB Control Request reception event. */
void EVENT_USB_Device_ControlRequest(void)
{
	HID_Device_ProcessControlRequest(&Keyboard_HID_Interface);
     228:	80 91 0e 01 	lds	r24, 0x010E
			 *  \param[in,out] HIDInterfaceInfo  Pointer to a structure containing a HID Class configuration and state.
			 */
			static inline void HID_Device_MillisecondElapsed(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo) ATTR_ALWAYS_INLINE ATTR_NON_NULL_PTR_ARG(1);
			static inline void HID_Device_MillisecondElapsed(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
			{
				if (HIDInterfaceInfo->State.IdleMSRemaining)
     22c:	90 91 0f 01 	lds	r25, 0x010F
     230:	00 97       	sbiw	r24, 0x00	; 0
     232:	29 f0       	breq	.+10     	; 0x23e <EVENT_USB_Device_StartOfFrame+0x16>
				  HIDInterfaceInfo->State.IdleMSRemaining--;
     234:	01 97       	sbiw	r24, 0x01	; 1
     236:	90 93 0f 01 	sts	0x010F, r25
     23a:	80 93 0e 01 	sts	0x010E, r24
     23e:	08 95       	ret

00000240 <CALLBACK_HID_Device_CreateHIDReport>:
bool CALLBACK_HID_Device_CreateHIDReport(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo,
                                         uint8_t* const ReportID,
                                         const uint8_t ReportType,
                                         void* ReportData,
                                         uint16_t* const ReportSize)
{
     240:	0f 93       	push	r16
     242:	1f 93       	push	r17
     244:	cf 93       	push	r28
     246:	df 93       	push	r29
     248:	f9 01       	movw	r30, r18
     24a:	d8 01       	movw	r26, r16
			}

			static inline uint8_t Joystick_GetStatus(void) ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t Joystick_GetStatus(void)
			{
				return (((uint8_t)~PINB & JOY_BMASK) | (((uint8_t)~PINE & JOY_EMASK) >> JOY_PORTE_MASK_SHIFT));
     24c:	23 b1       	in	r18, 0x03	; 3
     24e:	8c b1       	in	r24, 0x0c	; 12
     250:	80 95       	com	r24
     252:	90 e0       	ldi	r25, 0x00	; 0
     254:	80 73       	andi	r24, 0x30	; 48
     256:	90 70       	andi	r25, 0x00	; 0
     258:	95 95       	asr	r25
     25a:	87 95       	ror	r24
     25c:	20 95       	com	r18
     25e:	20 7e       	andi	r18, 0xE0	; 224
     260:	28 2b       	or	r18, r24
			}

			static inline uint8_t Buttons_GetStatus(void) ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t Buttons_GetStatus(void)
			{
				return ((PINE & BUTTONS_BUTTON1) ^ BUTTONS_BUTTON1);
     262:	9c b1       	in	r25, 0x0c	; 12
     264:	90 95       	com	r25
     266:	94 70       	andi	r25, 0x04	; 4
	uint8_t JoyStatus_LCL    = Joystick_GetStatus();
	uint8_t ButtonStatus_LCL = Buttons_GetStatus();

	uint8_t UsedKeyCodes = 0;

	if (JoyStatus_LCL & JOY_UP)
     268:	27 ff       	sbrs	r18, 7
     26a:	02 c0       	rjmp	.+4      	; 0x270 <CALLBACK_HID_Device_CreateHIDReport+0x30>
	  KeyboardReport->KeyCode[UsedKeyCodes++] = HID_KEYBOARD_SC_A;
     26c:	84 e0       	ldi	r24, 0x04	; 4
     26e:	03 c0       	rjmp	.+6      	; 0x276 <CALLBACK_HID_Device_CreateHIDReport+0x36>
	else if (JoyStatus_LCL & JOY_DOWN)
     270:	24 ff       	sbrs	r18, 4
     272:	04 c0       	rjmp	.+8      	; 0x27c <CALLBACK_HID_Device_CreateHIDReport+0x3c>
	  KeyboardReport->KeyCode[UsedKeyCodes++] = HID_KEYBOARD_SC_B;
     274:	85 e0       	ldi	r24, 0x05	; 5
     276:	82 83       	std	Z+2, r24	; 0x02
     278:	81 e0       	ldi	r24, 0x01	; 1
     27a:	01 c0       	rjmp	.+2      	; 0x27e <CALLBACK_HID_Device_CreateHIDReport+0x3e>
	USB_KeyboardReport_Data_t* KeyboardReport = (USB_KeyboardReport_Data_t*)ReportData;

	uint8_t JoyStatus_LCL    = Joystick_GetStatus();
	uint8_t ButtonStatus_LCL = Buttons_GetStatus();

	uint8_t UsedKeyCodes = 0;
     27c:	80 e0       	ldi	r24, 0x00	; 0
	if (JoyStatus_LCL & JOY_UP)
	  KeyboardReport->KeyCode[UsedKeyCodes++] = HID_KEYBOARD_SC_A;
	else if (JoyStatus_LCL & JOY_DOWN)
	  KeyboardReport->KeyCode[UsedKeyCodes++] = HID_KEYBOARD_SC_B;

	if (JoyStatus_LCL & JOY_LEFT)
     27e:	26 ff       	sbrs	r18, 6
     280:	05 c0       	rjmp	.+10     	; 0x28c <CALLBACK_HID_Device_CreateHIDReport+0x4c>
	  KeyboardReport->KeyCode[UsedKeyCodes++] = HID_KEYBOARD_SC_C;
     282:	ef 01       	movw	r28, r30
     284:	c8 0f       	add	r28, r24
     286:	d1 1d       	adc	r29, r1
     288:	36 e0       	ldi	r19, 0x06	; 6
     28a:	06 c0       	rjmp	.+12     	; 0x298 <CALLBACK_HID_Device_CreateHIDReport+0x58>
	else if (JoyStatus_LCL & JOY_RIGHT)
     28c:	23 ff       	sbrs	r18, 3
     28e:	06 c0       	rjmp	.+12     	; 0x29c <CALLBACK_HID_Device_CreateHIDReport+0x5c>
	  KeyboardReport->KeyCode[UsedKeyCodes++] = HID_KEYBOARD_SC_D;
     290:	ef 01       	movw	r28, r30
     292:	c8 0f       	add	r28, r24
     294:	d1 1d       	adc	r29, r1
     296:	37 e0       	ldi	r19, 0x07	; 7
     298:	3a 83       	std	Y+2, r19	; 0x02
     29a:	8f 5f       	subi	r24, 0xFF	; 255

	if (JoyStatus_LCL & JOY_PRESS)
     29c:	25 ff       	sbrs	r18, 5
     29e:	06 c0       	rjmp	.+12     	; 0x2ac <CALLBACK_HID_Device_CreateHIDReport+0x6c>
	  KeyboardReport->KeyCode[UsedKeyCodes++] = HID_KEYBOARD_SC_E;
     2a0:	ef 01       	movw	r28, r30
     2a2:	c8 0f       	add	r28, r24
     2a4:	d1 1d       	adc	r29, r1
     2a6:	28 e0       	ldi	r18, 0x08	; 8
     2a8:	2a 83       	std	Y+2, r18	; 0x02
     2aa:	8f 5f       	subi	r24, 0xFF	; 255

	if (ButtonStatus_LCL & BUTTONS_BUTTON1)
     2ac:	99 23       	and	r25, r25
     2ae:	31 f0       	breq	.+12     	; 0x2bc <CALLBACK_HID_Device_CreateHIDReport+0x7c>
	  KeyboardReport->KeyCode[UsedKeyCodes++] = HID_KEYBOARD_SC_F;
     2b0:	ef 01       	movw	r28, r30
     2b2:	c8 0f       	add	r28, r24
     2b4:	d1 1d       	adc	r29, r1
     2b6:	89 e0       	ldi	r24, 0x09	; 9
     2b8:	8a 83       	std	Y+2, r24	; 0x02
     2ba:	02 c0       	rjmp	.+4      	; 0x2c0 <CALLBACK_HID_Device_CreateHIDReport+0x80>

	if (UsedKeyCodes)
     2bc:	88 23       	and	r24, r24
     2be:	11 f0       	breq	.+4      	; 0x2c4 <CALLBACK_HID_Device_CreateHIDReport+0x84>
	  KeyboardReport->Modifier = HID_KEYBOARD_MODIFIER_LEFTSHIFT;
     2c0:	82 e0       	ldi	r24, 0x02	; 2
     2c2:	80 83       	st	Z, r24

	*ReportSize = sizeof(USB_KeyboardReport_Data_t);
     2c4:	88 e0       	ldi	r24, 0x08	; 8
     2c6:	90 e0       	ldi	r25, 0x00	; 0
     2c8:	11 96       	adiw	r26, 0x01	; 1
     2ca:	9c 93       	st	X, r25
     2cc:	8e 93       	st	-X, r24
	return false;
}
     2ce:	80 e0       	ldi	r24, 0x00	; 0
     2d0:	df 91       	pop	r29
     2d2:	cf 91       	pop	r28
     2d4:	1f 91       	pop	r17
     2d6:	0f 91       	pop	r16
     2d8:	08 95       	ret

000002da <CALLBACK_HID_Device_ProcessHIDReport>:
                                          const uint16_t ReportSize)
{
	uint8_t  LEDMask   = LEDS_NO_LEDS;
	uint8_t* LEDReport = (uint8_t*)ReportData;

	if (*LEDReport & HID_KEYBOARD_LED_NUMLOCK)
     2da:	f9 01       	movw	r30, r18
     2dc:	90 81       	ld	r25, Z
     2de:	90 ff       	sbrs	r25, 0
     2e0:	02 c0       	rjmp	.+4      	; 0x2e6 <CALLBACK_HID_Device_ProcessHIDReport+0xc>
	  LEDMask |= LEDS_LED1;
     2e2:	80 e1       	ldi	r24, 0x10	; 16
     2e4:	01 c0       	rjmp	.+2      	; 0x2e8 <CALLBACK_HID_Device_ProcessHIDReport+0xe>
                                          const uint8_t ReportID,
                                          const uint8_t ReportType,
                                          const void* ReportData,
                                          const uint16_t ReportSize)
{
	uint8_t  LEDMask   = LEDS_NO_LEDS;
     2e6:	80 e0       	ldi	r24, 0x00	; 0
	uint8_t* LEDReport = (uint8_t*)ReportData;

	if (*LEDReport & HID_KEYBOARD_LED_NUMLOCK)
	  LEDMask |= LEDS_LED1;

	if (*LEDReport & HID_KEYBOARD_LED_CAPSLOCK)
     2e8:	91 fd       	sbrc	r25, 1
	  LEDMask |= LEDS_LED3;
     2ea:	80 68       	ori	r24, 0x80	; 128

	if (*LEDReport & HID_KEYBOARD_LED_SCROLLLOCK)
     2ec:	92 fd       	sbrc	r25, 2
	  LEDMask |= LEDS_LED4;
     2ee:	80 64       	ori	r24, 0x40	; 64

	LEDs_SetAllLEDs(LEDMask);
     2f0:	4f cf       	rjmp	.-354    	; 0x190 <LEDs_SetAllLEDs>

000002f2 <CALLBACK_USB_GetDescriptor>:
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
     2f2:	93 30       	cpi	r25, 0x03	; 3
     2f4:	89 f0       	breq	.+34     	; 0x318 <CALLBACK_USB_GetDescriptor+0x26>
     2f6:	94 30       	cpi	r25, 0x04	; 4
     2f8:	28 f4       	brcc	.+10     	; 0x304 <CALLBACK_USB_GetDescriptor+0x12>
     2fa:	91 30       	cpi	r25, 0x01	; 1
     2fc:	49 f1       	breq	.+82     	; 0x350 <CALLBACK_USB_GetDescriptor+0x5e>
     2fe:	92 30       	cpi	r25, 0x02	; 2
     300:	61 f5       	brne	.+88     	; 0x35a <CALLBACK_USB_GetDescriptor+0x68>
     302:	05 c0       	rjmp	.+10     	; 0x30e <CALLBACK_USB_GetDescriptor+0x1c>
     304:	91 32       	cpi	r25, 0x21	; 33
     306:	d1 f0       	breq	.+52     	; 0x33c <CALLBACK_USB_GetDescriptor+0x4a>
     308:	92 32       	cpi	r25, 0x22	; 34
     30a:	39 f5       	brne	.+78     	; 0x35a <CALLBACK_USB_GetDescriptor+0x68>
     30c:	1c c0       	rjmp	.+56     	; 0x346 <CALLBACK_USB_GetDescriptor+0x54>
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
			Size    = sizeof(USB_Descriptor_Configuration_t);
     30e:	82 e2       	ldi	r24, 0x22	; 34
     310:	90 e0       	ldi	r25, 0x00	; 0
		case DTYPE_Device:
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
     312:	ee ed       	ldi	r30, 0xDE	; 222
     314:	f0 e0       	ldi	r31, 0x00	; 0
			Size    = sizeof(USB_Descriptor_Configuration_t);
			break;
     316:	25 c0       	rjmp	.+74     	; 0x362 <CALLBACK_USB_GetDescriptor+0x70>
		case DTYPE_String:
			switch (DescriptorNumber)
     318:	81 30       	cpi	r24, 0x01	; 1
     31a:	41 f0       	breq	.+16     	; 0x32c <CALLBACK_USB_GetDescriptor+0x3a>
     31c:	81 30       	cpi	r24, 0x01	; 1
     31e:	18 f0       	brcs	.+6      	; 0x326 <CALLBACK_USB_GetDescriptor+0x34>
     320:	82 30       	cpi	r24, 0x02	; 2
     322:	d9 f4       	brne	.+54     	; 0x35a <CALLBACK_USB_GetDescriptor+0x68>
     324:	06 c0       	rjmp	.+12     	; 0x332 <CALLBACK_USB_GetDescriptor+0x40>
			{
				case 0x00:
					Address = &LanguageString;
					Size    = pgm_read_byte(&LanguageString.Header.Size);
     326:	ea ed       	ldi	r30, 0xDA	; 218
     328:	f0 e0       	ldi	r31, 0x00	; 0
     32a:	05 c0       	rjmp	.+10     	; 0x336 <CALLBACK_USB_GetDescriptor+0x44>
					break;
				case 0x01:
					Address = &ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
     32c:	e0 ec       	ldi	r30, 0xC0	; 192
     32e:	f0 e0       	ldi	r31, 0x00	; 0
     330:	02 c0       	rjmp	.+4      	; 0x336 <CALLBACK_USB_GetDescriptor+0x44>
					break;
				case 0x02:
					Address = &ProductString;
					Size    = pgm_read_byte(&ProductString.Header.Size);
     332:	e8 e9       	ldi	r30, 0x98	; 152
     334:	f0 e0       	ldi	r31, 0x00	; 0
     336:	84 91       	lpm	r24, Z
     338:	90 e0       	ldi	r25, 0x00	; 0
					break;
     33a:	13 c0       	rjmp	.+38     	; 0x362 <CALLBACK_USB_GetDescriptor+0x70>
			}

			break;
		case HID_DTYPE_HID:
			Address = &ConfigurationDescriptor.HID_KeyboardHID;
			Size    = sizeof(USB_HID_Descriptor_HID_t);
     33c:	89 e0       	ldi	r24, 0x09	; 9
     33e:	90 e0       	ldi	r25, 0x00	; 0
					break;
			}

			break;
		case HID_DTYPE_HID:
			Address = &ConfigurationDescriptor.HID_KeyboardHID;
     340:	e0 ef       	ldi	r30, 0xF0	; 240
     342:	f0 e0       	ldi	r31, 0x00	; 0
			Size    = sizeof(USB_HID_Descriptor_HID_t);
			break;
     344:	0e c0       	rjmp	.+28     	; 0x362 <CALLBACK_USB_GetDescriptor+0x70>
		case HID_DTYPE_Report:
			Address = &KeyboardReport;
			Size    = sizeof(KeyboardReport);
     346:	8f e3       	ldi	r24, 0x3F	; 63
     348:	90 e0       	ldi	r25, 0x00	; 0
		case HID_DTYPE_HID:
			Address = &ConfigurationDescriptor.HID_KeyboardHID;
			Size    = sizeof(USB_HID_Descriptor_HID_t);
			break;
		case HID_DTYPE_Report:
			Address = &KeyboardReport;
     34a:	e2 e1       	ldi	r30, 0x12	; 18
     34c:	f1 e0       	ldi	r31, 0x01	; 1
			Size    = sizeof(KeyboardReport);
			break;
     34e:	09 c0       	rjmp	.+18     	; 0x362 <CALLBACK_USB_GetDescriptor+0x70>

	switch (DescriptorType)
	{
		case DTYPE_Device:
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
     350:	82 e1       	ldi	r24, 0x12	; 18
     352:	90 e0       	ldi	r25, 0x00	; 0
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
	{
		case DTYPE_Device:
			Address = &DeviceDescriptor;
     354:	e0 e0       	ldi	r30, 0x00	; 0
     356:	f1 e0       	ldi	r31, 0x01	; 1
     358:	04 c0       	rjmp	.+8      	; 0x362 <CALLBACK_USB_GetDescriptor+0x70>
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;
     35a:	80 e0       	ldi	r24, 0x00	; 0
     35c:	90 e0       	ldi	r25, 0x00	; 0
                                    const void** const DescriptorAddress)
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
     35e:	e0 e0       	ldi	r30, 0x00	; 0
     360:	f0 e0       	ldi	r31, 0x00	; 0
			Address = &KeyboardReport;
			Size    = sizeof(KeyboardReport);
			break;
	}

	*DescriptorAddress = Address;
     362:	da 01       	movw	r26, r20
     364:	11 96       	adiw	r26, 0x01	; 1
     366:	fc 93       	st	X, r31
     368:	ee 93       	st	-X, r30
	return Size;
}
     36a:	08 95       	ret

0000036c <Endpoint_Write_Stream_LE>:
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
     36c:	af 92       	push	r10
     36e:	bf 92       	push	r11
     370:	cf 92       	push	r12
     372:	df 92       	push	r13
     374:	ef 92       	push	r14
     376:	ff 92       	push	r15
     378:	1f 93       	push	r17
     37a:	cf 93       	push	r28
     37c:	df 93       	push	r29
     37e:	ec 01       	movw	r28, r24
     380:	7b 01       	movw	r14, r22
     382:	6a 01       	movw	r12, r20
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	uint16_t BytesInTransfer = 0;
	uint8_t  ErrorCode;

	if ((ErrorCode = Endpoint_WaitUntilReady()))
     384:	d7 d1       	rcall	.+942    	; 0x734 <Endpoint_WaitUntilReady>
     386:	18 2f       	mov	r17, r24
     388:	88 23       	and	r24, r24
     38a:	a9 f5       	brne	.+106    	; 0x3f6 <Endpoint_Write_Stream_LE+0x8a>
     38c:	c1 14       	cp	r12, r1
	  return ErrorCode;

	if (BytesProcessed != NULL)
     38e:	d1 04       	cpc	r13, r1
     390:	39 f0       	breq	.+14     	; 0x3a0 <Endpoint_Write_Stream_LE+0x34>
     392:	f6 01       	movw	r30, r12
	{
		Length -= *BytesProcessed;
     394:	20 81       	ld	r18, Z
     396:	31 81       	ldd	r19, Z+1	; 0x01
     398:	e2 1a       	sub	r14, r18
     39a:	f3 0a       	sbc	r15, r19
     39c:	c2 0f       	add	r28, r18
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
     39e:	d3 1f       	adc	r29, r19
     3a0:	aa 24       	eor	r10, r10

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
     3a2:	bb 24       	eor	r11, r11
     3a4:	23 c0       	rjmp	.+70     	; 0x3ec <Endpoint_Write_Stream_LE+0x80>
     3a6:	80 91 e8 00 	lds	r24, 0x00E8
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
     3aa:	85 fd       	sbrc	r24, 5
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
	{
		if (!(Endpoint_IsReadWriteAllowed()))
     3ac:	16 c0       	rjmp	.+44     	; 0x3da <Endpoint_Write_Stream_LE+0x6e>
     3ae:	80 91 e8 00 	lds	r24, 0x00E8
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     3b2:	8e 77       	andi	r24, 0x7E	; 126
     3b4:	80 93 e8 00 	sts	0x00E8, r24
     3b8:	7f d4       	rcall	.+2302   	; 0xcb8 <USB_USBTask>
		{
			TEMPLATE_CLEAR_ENDPOINT();

			#if !defined(INTERRUPT_CONTROL_ENDPOINT)
			USB_USBTask();
     3ba:	c1 14       	cp	r12, r1
     3bc:	d1 04       	cpc	r13, r1
			#endif

			if (BytesProcessed != NULL)
     3be:	49 f0       	breq	.+18     	; 0x3d2 <Endpoint_Write_Stream_LE+0x66>
     3c0:	f6 01       	movw	r30, r12
     3c2:	80 81       	ld	r24, Z
			{
				*BytesProcessed += BytesInTransfer;
     3c4:	91 81       	ldd	r25, Z+1	; 0x01
     3c6:	8a 0d       	add	r24, r10
     3c8:	9b 1d       	adc	r25, r11
     3ca:	91 83       	std	Z+1, r25	; 0x01
     3cc:	80 83       	st	Z, r24
     3ce:	15 e0       	ldi	r17, 0x05	; 5
     3d0:	12 c0       	rjmp	.+36     	; 0x3f6 <Endpoint_Write_Stream_LE+0x8a>
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
     3d2:	b0 d1       	rcall	.+864    	; 0x734 <Endpoint_WaitUntilReady>
     3d4:	88 23       	and	r24, r24
			}

			if ((ErrorCode = Endpoint_WaitUntilReady()))
     3d6:	51 f0       	breq	.+20     	; 0x3ec <Endpoint_Write_Stream_LE+0x80>
     3d8:	0d c0       	rjmp	.+26     	; 0x3f4 <Endpoint_Write_Stream_LE+0x88>
     3da:	89 91       	ld	r24, Y+
     3dc:	80 93 f1 00 	sts	0x00F1, r24
			  return ErrorCode;
		}
		else
		{
			TEMPLATE_TRANSFER_BYTE(DataStream);
     3e0:	08 94       	sec
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     3e2:	e1 08       	sbc	r14, r1
     3e4:	f1 08       	sbc	r15, r1
			TEMPLATE_BUFFER_MOVE(DataStream, 1);
			Length--;
     3e6:	08 94       	sec
     3e8:	a1 1c       	adc	r10, r1
     3ea:	b1 1c       	adc	r11, r1
			BytesInTransfer++;
     3ec:	e1 14       	cp	r14, r1
     3ee:	f1 04       	cpc	r15, r1
     3f0:	d1 f6       	brne	.-76     	; 0x3a6 <Endpoint_Write_Stream_LE+0x3a>
	{
		Length -= *BytesProcessed;
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
     3f2:	01 c0       	rjmp	.+2      	; 0x3f6 <Endpoint_Write_Stream_LE+0x8a>
     3f4:	18 2f       	mov	r17, r24
     3f6:	81 2f       	mov	r24, r17
     3f8:	df 91       	pop	r29
			{
				*BytesProcessed += BytesInTransfer;
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
			}

			if ((ErrorCode = Endpoint_WaitUntilReady()))
     3fa:	cf 91       	pop	r28
			BytesInTransfer++;
		}
	}

	return ENDPOINT_RWSTREAM_NoError;
}
     3fc:	1f 91       	pop	r17
     3fe:	ff 90       	pop	r15
     400:	ef 90       	pop	r14
     402:	df 90       	pop	r13
     404:	cf 90       	pop	r12
     406:	bf 90       	pop	r11
     408:	af 90       	pop	r10
     40a:	08 95       	ret

0000040c <Endpoint_Write_Control_Stream_LE>:
     40c:	20 91 33 01 	lds	r18, 0x0133
     410:	30 91 34 01 	lds	r19, 0x0134
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
     414:	26 17       	cp	r18, r22
     416:	37 07       	cpc	r19, r23
     418:	20 f4       	brcc	.+8      	; 0x422 <Endpoint_Write_Control_Stream_LE+0x16>
     41a:	b9 01       	movw	r22, r18
     41c:	fc 01       	movw	r30, r24
     41e:	20 e0       	ldi	r18, 0x00	; 0
     420:	37 c0       	rjmp	.+110    	; 0x490 <Endpoint_Write_Control_Stream_LE+0x84>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
     422:	61 15       	cp	r22, r1
     424:	71 05       	cpc	r23, r1
     426:	d1 f7       	brne	.-12     	; 0x41c <Endpoint_Write_Control_Stream_LE+0x10>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     428:	20 91 e8 00 	lds	r18, 0x00E8
     42c:	2e 77       	andi	r18, 0x7E	; 126
     42e:	20 93 e8 00 	sts	0x00E8, r18
     432:	f4 cf       	rjmp	.-24     	; 0x41c <Endpoint_Write_Control_Stream_LE+0x10>
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     434:	80 91 2c 01 	lds	r24, 0x012C

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     438:	88 23       	and	r24, r24
     43a:	09 f4       	brne	.+2      	; 0x43e <Endpoint_Write_Control_Stream_LE+0x32>
     43c:	3f c0       	rjmp	.+126    	; 0x4bc <Endpoint_Write_Control_Stream_LE+0xb0>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     43e:	85 30       	cpi	r24, 0x05	; 5
     440:	c9 f1       	breq	.+114    	; 0x4b4 <Endpoint_Write_Control_Stream_LE+0xa8>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     442:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
     446:	83 fd       	sbrc	r24, 3
     448:	37 c0       	rjmp	.+110    	; 0x4b8 <Endpoint_Write_Control_Stream_LE+0xac>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     44a:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
     44e:	82 fd       	sbrc	r24, 2
     450:	2b c0       	rjmp	.+86     	; 0x4a8 <Endpoint_Write_Control_Stream_LE+0x9c>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     452:	80 91 e8 00 	lds	r24, 0x00E8
		  break;

		if (Endpoint_IsINReady())
     456:	80 ff       	sbrs	r24, 0
     458:	1b c0       	rjmp	.+54     	; 0x490 <Endpoint_Write_Control_Stream_LE+0x84>
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
     45a:	80 91 f2 00 	lds	r24, 0x00F2
     45e:	90 91 f3 00 	lds	r25, 0x00F3
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
     462:	06 c0       	rjmp	.+12     	; 0x470 <Endpoint_Write_Control_Stream_LE+0x64>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
     464:	21 91       	ld	r18, Z+
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     466:	20 93 f1 00 	sts	0x00F1, r18
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
     46a:	61 50       	subi	r22, 0x01	; 1
     46c:	70 40       	sbci	r23, 0x00	; 0
				BytesInEndpoint++;
     46e:	01 96       	adiw	r24, 0x01	; 1

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
     470:	61 15       	cp	r22, r1
     472:	71 05       	cpc	r23, r1
     474:	19 f0       	breq	.+6      	; 0x47c <Endpoint_Write_Control_Stream_LE+0x70>
     476:	88 30       	cpi	r24, 0x08	; 8
     478:	91 05       	cpc	r25, r1
     47a:	a0 f3       	brcs	.-24     	; 0x464 <Endpoint_Write_Control_Stream_LE+0x58>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
     47c:	21 e0       	ldi	r18, 0x01	; 1
     47e:	88 30       	cpi	r24, 0x08	; 8
     480:	91 05       	cpc	r25, r1
     482:	09 f0       	breq	.+2      	; 0x486 <Endpoint_Write_Control_Stream_LE+0x7a>
     484:	20 e0       	ldi	r18, 0x00	; 0
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     486:	80 91 e8 00 	lds	r24, 0x00E8
     48a:	8e 77       	andi	r24, 0x7E	; 126
     48c:	80 93 e8 00 	sts	0x00E8, r24
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
     490:	61 15       	cp	r22, r1
     492:	71 05       	cpc	r23, r1
     494:	79 f6       	brne	.-98     	; 0x434 <Endpoint_Write_Control_Stream_LE+0x28>
     496:	22 23       	and	r18, r18
     498:	69 f6       	brne	.-102    	; 0x434 <Endpoint_Write_Control_Stream_LE+0x28>
     49a:	06 c0       	rjmp	.+12     	; 0x4a8 <Endpoint_Write_Control_Stream_LE+0x9c>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     49c:	80 91 2c 01 	lds	r24, 0x012C

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     4a0:	88 23       	and	r24, r24
     4a2:	61 f0       	breq	.+24     	; 0x4bc <Endpoint_Write_Control_Stream_LE+0xb0>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     4a4:	85 30       	cpi	r24, 0x05	; 5
     4a6:	61 f0       	breq	.+24     	; 0x4c0 <Endpoint_Write_Control_Stream_LE+0xb4>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     4a8:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
     4ac:	82 ff       	sbrs	r24, 2
     4ae:	f6 cf       	rjmp	.-20     	; 0x49c <Endpoint_Write_Control_Stream_LE+0x90>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
     4b0:	80 e0       	ldi	r24, 0x00	; 0
     4b2:	08 95       	ret
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
     4b4:	83 e0       	ldi	r24, 0x03	; 3
     4b6:	08 95       	ret
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
     4b8:	81 e0       	ldi	r24, 0x01	; 1
     4ba:	08 95       	ret
	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
     4bc:	82 e0       	ldi	r24, 0x02	; 2
     4be:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
     4c0:	83 e0       	ldi	r24, 0x03	; 3
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
     4c2:	08 95       	ret

000004c4 <Endpoint_Read_Control_Stream_LE>:
uint8_t TEMPLATE_FUNC_NAME (void* const Buffer,
                            uint16_t Length)
{
	uint8_t* DataStream = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));

	if (!(Length))
     4c4:	61 15       	cp	r22, r1
     4c6:	71 05       	cpc	r23, r1
     4c8:	29 f4       	brne	.+10     	; 0x4d4 <Endpoint_Read_Control_Stream_LE+0x10>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     4ca:	20 91 e8 00 	lds	r18, 0x00E8
     4ce:	2b 77       	andi	r18, 0x7B	; 123
     4d0:	20 93 e8 00 	sts	0x00E8, r18

#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (void* const Buffer,
                            uint16_t Length)
{
     4d4:	38 2f       	mov	r19, r24
     4d6:	29 2f       	mov	r18, r25
     4d8:	26 c0       	rjmp	.+76     	; 0x526 <Endpoint_Read_Control_Stream_LE+0x62>
	if (!(Length))
	  Endpoint_ClearOUT();

	while (Length)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     4da:	80 91 2c 01 	lds	r24, 0x012C

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     4de:	88 23       	and	r24, r24
     4e0:	b1 f1       	breq	.+108    	; 0x54e <Endpoint_Read_Control_Stream_LE+0x8a>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     4e2:	85 30       	cpi	r24, 0x05	; 5
     4e4:	81 f1       	breq	.+96     	; 0x546 <Endpoint_Read_Control_Stream_LE+0x82>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     4e6:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
     4ea:	83 fd       	sbrc	r24, 3
     4ec:	2e c0       	rjmp	.+92     	; 0x54a <Endpoint_Read_Control_Stream_LE+0x86>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     4ee:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;

		if (Endpoint_IsOUTReceived())
     4f2:	82 ff       	sbrs	r24, 2
     4f4:	f2 cf       	rjmp	.-28     	; 0x4da <Endpoint_Read_Control_Stream_LE+0x16>
     4f6:	e3 2f       	mov	r30, r19
     4f8:	f2 2f       	mov	r31, r18
     4fa:	08 c0       	rjmp	.+16     	; 0x50c <Endpoint_Read_Control_Stream_LE+0x48>
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
     4fc:	80 91 f1 00 	lds	r24, 0x00F1
		{
			while (Length && Endpoint_BytesInEndpoint())
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
     500:	81 93       	st	Z+, r24
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
     502:	3e 2f       	mov	r19, r30
     504:	2f 2f       	mov	r18, r31
				Length--;
     506:	61 50       	subi	r22, 0x01	; 1
     508:	70 40       	sbci	r23, 0x00	; 0
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;

		if (Endpoint_IsOUTReceived())
		{
			while (Length && Endpoint_BytesInEndpoint())
     50a:	41 f0       	breq	.+16     	; 0x51c <Endpoint_Read_Control_Stream_LE+0x58>
     50c:	3e 2f       	mov	r19, r30
     50e:	2f 2f       	mov	r18, r31
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
     510:	80 91 f2 00 	lds	r24, 0x00F2
     514:	90 91 f3 00 	lds	r25, 0x00F3
     518:	00 97       	sbiw	r24, 0x00	; 0
     51a:	81 f7       	brne	.-32     	; 0x4fc <Endpoint_Read_Control_Stream_LE+0x38>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     51c:	80 91 e8 00 	lds	r24, 0x00E8
     520:	8b 77       	andi	r24, 0x7B	; 123
     522:	80 93 e8 00 	sts	0x00E8, r24
	uint8_t* DataStream = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));

	if (!(Length))
	  Endpoint_ClearOUT();

	while (Length)
     526:	61 15       	cp	r22, r1
     528:	71 05       	cpc	r23, r1
     52a:	b9 f6       	brne	.-82     	; 0x4da <Endpoint_Read_Control_Stream_LE+0x16>
     52c:	06 c0       	rjmp	.+12     	; 0x53a <Endpoint_Read_Control_Stream_LE+0x76>
		}
	}

	while (!(Endpoint_IsINReady()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     52e:	80 91 2c 01 	lds	r24, 0x012C

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     532:	88 23       	and	r24, r24
     534:	61 f0       	breq	.+24     	; 0x54e <Endpoint_Read_Control_Stream_LE+0x8a>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     536:	85 30       	cpi	r24, 0x05	; 5
     538:	61 f0       	breq	.+24     	; 0x552 <Endpoint_Read_Control_Stream_LE+0x8e>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     53a:	80 91 e8 00 	lds	r24, 0x00E8

			Endpoint_ClearOUT();
		}
	}

	while (!(Endpoint_IsINReady()))
     53e:	80 ff       	sbrs	r24, 0
     540:	f6 cf       	rjmp	.-20     	; 0x52e <Endpoint_Read_Control_Stream_LE+0x6a>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
     542:	80 e0       	ldi	r24, 0x00	; 0
     544:	08 95       	ret
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
     546:	83 e0       	ldi	r24, 0x03	; 3
     548:	08 95       	ret
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
     54a:	81 e0       	ldi	r24, 0x01	; 1
     54c:	08 95       	ret
	while (!(Endpoint_IsINReady()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
     54e:	82 e0       	ldi	r24, 0x02	; 2
     550:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
     552:	83 e0       	ldi	r24, 0x03	; 3
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
     554:	08 95       	ret

00000556 <Endpoint_Write_Control_PStream_LE>:
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
     556:	20 91 33 01 	lds	r18, 0x0133
     55a:	30 91 34 01 	lds	r19, 0x0134
     55e:	26 17       	cp	r18, r22
     560:	37 07       	cpc	r19, r23
     562:	20 f4       	brcc	.+8      	; 0x56c <Endpoint_Write_Control_PStream_LE+0x16>
     564:	b9 01       	movw	r22, r18
     566:	fc 01       	movw	r30, r24
     568:	20 e0       	ldi	r18, 0x00	; 0
     56a:	38 c0       	rjmp	.+112    	; 0x5dc <Endpoint_Write_Control_PStream_LE+0x86>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
     56c:	61 15       	cp	r22, r1
     56e:	71 05       	cpc	r23, r1
     570:	d1 f7       	brne	.-12     	; 0x566 <Endpoint_Write_Control_PStream_LE+0x10>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     572:	20 91 e8 00 	lds	r18, 0x00E8
     576:	2e 77       	andi	r18, 0x7E	; 126
     578:	20 93 e8 00 	sts	0x00E8, r18
     57c:	f4 cf       	rjmp	.-24     	; 0x566 <Endpoint_Write_Control_PStream_LE+0x10>
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     57e:	80 91 2c 01 	lds	r24, 0x012C

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     582:	88 23       	and	r24, r24
     584:	09 f4       	brne	.+2      	; 0x588 <Endpoint_Write_Control_PStream_LE+0x32>
     586:	40 c0       	rjmp	.+128    	; 0x608 <Endpoint_Write_Control_PStream_LE+0xb2>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     588:	85 30       	cpi	r24, 0x05	; 5
     58a:	d1 f1       	breq	.+116    	; 0x600 <Endpoint_Write_Control_PStream_LE+0xaa>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     58c:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
     590:	83 fd       	sbrc	r24, 3
     592:	38 c0       	rjmp	.+112    	; 0x604 <Endpoint_Write_Control_PStream_LE+0xae>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     594:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
     598:	82 fd       	sbrc	r24, 2
     59a:	2c c0       	rjmp	.+88     	; 0x5f4 <Endpoint_Write_Control_PStream_LE+0x9e>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     59c:	80 91 e8 00 	lds	r24, 0x00E8
		  break;

		if (Endpoint_IsINReady())
     5a0:	80 ff       	sbrs	r24, 0
     5a2:	1c c0       	rjmp	.+56     	; 0x5dc <Endpoint_Write_Control_PStream_LE+0x86>
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
     5a4:	80 91 f2 00 	lds	r24, 0x00F2
     5a8:	90 91 f3 00 	lds	r25, 0x00F3
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
     5ac:	07 c0       	rjmp	.+14     	; 0x5bc <Endpoint_Write_Control_PStream_LE+0x66>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
     5ae:	24 91       	lpm	r18, Z
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     5b0:	20 93 f1 00 	sts	0x00F1, r18
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
     5b4:	31 96       	adiw	r30, 0x01	; 1
				Length--;
     5b6:	61 50       	subi	r22, 0x01	; 1
     5b8:	70 40       	sbci	r23, 0x00	; 0
				BytesInEndpoint++;
     5ba:	01 96       	adiw	r24, 0x01	; 1

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
     5bc:	61 15       	cp	r22, r1
     5be:	71 05       	cpc	r23, r1
     5c0:	19 f0       	breq	.+6      	; 0x5c8 <Endpoint_Write_Control_PStream_LE+0x72>
     5c2:	88 30       	cpi	r24, 0x08	; 8
     5c4:	91 05       	cpc	r25, r1
     5c6:	98 f3       	brcs	.-26     	; 0x5ae <Endpoint_Write_Control_PStream_LE+0x58>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
     5c8:	21 e0       	ldi	r18, 0x01	; 1
     5ca:	88 30       	cpi	r24, 0x08	; 8
     5cc:	91 05       	cpc	r25, r1
     5ce:	09 f0       	breq	.+2      	; 0x5d2 <Endpoint_Write_Control_PStream_LE+0x7c>
     5d0:	20 e0       	ldi	r18, 0x00	; 0
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     5d2:	80 91 e8 00 	lds	r24, 0x00E8
     5d6:	8e 77       	andi	r24, 0x7E	; 126
     5d8:	80 93 e8 00 	sts	0x00E8, r24
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
     5dc:	61 15       	cp	r22, r1
     5de:	71 05       	cpc	r23, r1
     5e0:	71 f6       	brne	.-100    	; 0x57e <Endpoint_Write_Control_PStream_LE+0x28>
     5e2:	22 23       	and	r18, r18
     5e4:	61 f6       	brne	.-104    	; 0x57e <Endpoint_Write_Control_PStream_LE+0x28>
     5e6:	06 c0       	rjmp	.+12     	; 0x5f4 <Endpoint_Write_Control_PStream_LE+0x9e>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     5e8:	80 91 2c 01 	lds	r24, 0x012C

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     5ec:	88 23       	and	r24, r24
     5ee:	61 f0       	breq	.+24     	; 0x608 <Endpoint_Write_Control_PStream_LE+0xb2>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     5f0:	85 30       	cpi	r24, 0x05	; 5
     5f2:	61 f0       	breq	.+24     	; 0x60c <Endpoint_Write_Control_PStream_LE+0xb6>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     5f4:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
     5f8:	82 ff       	sbrs	r24, 2
     5fa:	f6 cf       	rjmp	.-20     	; 0x5e8 <Endpoint_Write_Control_PStream_LE+0x92>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
     5fc:	80 e0       	ldi	r24, 0x00	; 0
     5fe:	08 95       	ret
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
     600:	83 e0       	ldi	r24, 0x03	; 3
     602:	08 95       	ret
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
     604:	81 e0       	ldi	r24, 0x01	; 1
     606:	08 95       	ret
	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
     608:	82 e0       	ldi	r24, 0x02	; 2
     60a:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
     60c:	83 e0       	ldi	r24, 0x03	; 3
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
     60e:	08 95       	ret

00000610 <Endpoint_ConfigureEndpoint_Prv>:
	UECFG0X = UECFG0XData;
	UECFG1X = UECFG1XData;

	return Endpoint_IsConfigured();
#else
	for (uint8_t EPNum = Number; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
     610:	98 2f       	mov	r25, r24
     612:	2a c0       	rjmp	.+84     	; 0x668 <Endpoint_ConfigureEndpoint_Prv+0x58>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     614:	90 93 e9 00 	sts	0x00E9, r25
		uint8_t UECFG1XTemp;
		uint8_t UEIENXTemp;

		Endpoint_SelectEndpoint(EPNum);

		if (EPNum == Number)
     618:	98 17       	cp	r25, r24
     61a:	39 f0       	breq	.+14     	; 0x62a <Endpoint_ConfigureEndpoint_Prv+0x1a>
			UECFG1XTemp = UECFG1XData;
			UEIENXTemp  = 0;
		}
		else
		{
			UECFG0XTemp = UECFG0X;
     61c:	70 91 ec 00 	lds	r23, 0x00EC
			UECFG1XTemp = UECFG1X;
     620:	20 91 ed 00 	lds	r18, 0x00ED
			UEIENXTemp  = UEIENX;
     624:	50 91 f0 00 	lds	r21, 0x00F0
     628:	03 c0       	rjmp	.+6      	; 0x630 <Endpoint_ConfigureEndpoint_Prv+0x20>
		Endpoint_SelectEndpoint(EPNum);

		if (EPNum == Number)
		{
			UECFG0XTemp = UECFG0XData;
			UECFG1XTemp = UECFG1XData;
     62a:	24 2f       	mov	r18, r20

		Endpoint_SelectEndpoint(EPNum);

		if (EPNum == Number)
		{
			UECFG0XTemp = UECFG0XData;
     62c:	76 2f       	mov	r23, r22
			UECFG1XTemp = UECFG1XData;
			UEIENXTemp  = 0;
     62e:	50 e0       	ldi	r21, 0x00	; 0
			UECFG0XTemp = UECFG0X;
			UECFG1XTemp = UECFG1X;
			UEIENXTemp  = UEIENX;
		}

		if (!(UECFG1XTemp & (1 << ALLOC)))
     630:	21 ff       	sbrs	r18, 1
     632:	19 c0       	rjmp	.+50     	; 0x666 <Endpoint_ConfigureEndpoint_Prv+0x56>
			 *  to and from a host.
			 */
			static inline void Endpoint_DisableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_DisableEndpoint(void)
			{
				UECONX &= ~(1 << EPEN);
     634:	30 91 eb 00 	lds	r19, 0x00EB
     638:	3e 7f       	andi	r19, 0xFE	; 254
     63a:	30 93 eb 00 	sts	0x00EB, r19
		  continue;

		Endpoint_DisableEndpoint();
		UECFG1X &= ~(1 << ALLOC);
     63e:	30 91 ed 00 	lds	r19, 0x00ED
     642:	3d 7f       	andi	r19, 0xFD	; 253
     644:	30 93 ed 00 	sts	0x00ED, r19
			 *  \note Endpoints must first be configured properly via \ref Endpoint_ConfigureEndpoint().
			 */
			static inline void Endpoint_EnableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_EnableEndpoint(void)
			{
				UECONX |= (1 << EPEN);
     648:	30 91 eb 00 	lds	r19, 0x00EB
     64c:	31 60       	ori	r19, 0x01	; 1
     64e:	30 93 eb 00 	sts	0x00EB, r19

		Endpoint_EnableEndpoint();
		UECFG0X = UECFG0XTemp;
     652:	70 93 ec 00 	sts	0x00EC, r23
		UECFG1X = UECFG1XTemp;
     656:	20 93 ed 00 	sts	0x00ED, r18
		UEIENX  = UEIENXTemp;
     65a:	50 93 f0 00 	sts	0x00F0, r21
			 *  \return Boolean \c true if the currently selected endpoint has been configured, \c false otherwise.
			 */
			static inline bool Endpoint_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsConfigured(void)
			{
				return ((UESTA0X & (1 << CFGOK)) ? true : false);
     65e:	20 91 ee 00 	lds	r18, 0x00EE

		if (!(Endpoint_IsConfigured()))
     662:	27 ff       	sbrs	r18, 7
     664:	08 c0       	rjmp	.+16     	; 0x676 <Endpoint_ConfigureEndpoint_Prv+0x66>
	UECFG0X = UECFG0XData;
	UECFG1X = UECFG1XData;

	return Endpoint_IsConfigured();
#else
	for (uint8_t EPNum = Number; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
     666:	9f 5f       	subi	r25, 0xFF	; 255
     668:	97 30       	cpi	r25, 0x07	; 7
     66a:	a0 f2       	brcs	.-88     	; 0x614 <Endpoint_ConfigureEndpoint_Prv+0x4>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     66c:	8f 70       	andi	r24, 0x0F	; 15
     66e:	80 93 e9 00 	sts	0x00E9, r24
		if (!(Endpoint_IsConfigured()))
		  return false;
	}

	Endpoint_SelectEndpoint(Number);
	return true;
     672:	81 e0       	ldi	r24, 0x01	; 1
     674:	08 95       	ret
		UECFG0X = UECFG0XTemp;
		UECFG1X = UECFG1XTemp;
		UEIENX  = UEIENXTemp;

		if (!(Endpoint_IsConfigured()))
		  return false;
     676:	80 e0       	ldi	r24, 0x00	; 0
	}

	Endpoint_SelectEndpoint(Number);
	return true;
#endif
}
     678:	08 95       	ret

0000067a <Endpoint_ConfigureEndpointTable>:
uint8_t USB_Device_ControlEndpointSize = ENDPOINT_CONTROLEP_DEFAULT_SIZE;
#endif

bool Endpoint_ConfigureEndpointTable(const USB_Endpoint_Table_t* const Table,
                                     const uint8_t Entries)
{
     67a:	0f 93       	push	r16
     67c:	1f 93       	push	r17
     67e:	cf 93       	push	r28
     680:	df 93       	push	r29
     682:	16 2f       	mov	r17, r22
	{
		if (!(Table[i].Address))
		  continue;
	
		if (!(Endpoint_ConfigureEndpoint(Table[i].Address, Table[i].Type, Table[i].Size, Table[i].Banks)))
		  return false;
     684:	ec 01       	movw	r28, r24
#endif

bool Endpoint_ConfigureEndpointTable(const USB_Endpoint_Table_t* const Table,
                                     const uint8_t Entries)
{
	for (uint8_t i = 0; i < Entries; i++)
     686:	00 e0       	ldi	r16, 0x00	; 0
     688:	2a c0       	rjmp	.+84     	; 0x6de <Endpoint_ConfigureEndpointTable+0x64>
	{
		if (!(Table[i].Address))
     68a:	98 81       	ld	r25, Y
     68c:	99 23       	and	r25, r25
     68e:	29 f1       	breq	.+74     	; 0x6da <Endpoint_ConfigureEndpointTable+0x60>
		  continue;
	
		if (!(Endpoint_ConfigureEndpoint(Table[i].Address, Table[i].Type, Table[i].Size, Table[i].Banks)))
     690:	6b 81       	ldd	r22, Y+3	; 0x03
     692:	e9 81       	ldd	r30, Y+1	; 0x01
     694:	fa 81       	ldd	r31, Y+2	; 0x02
     696:	2c 81       	ldd	r18, Y+4	; 0x04
			static inline bool Endpoint_ConfigureEndpoint(const uint8_t Address,
			                                              const uint8_t Type,
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);
     698:	89 2f       	mov	r24, r25
     69a:	8f 70       	andi	r24, 0x0F	; 15

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
     69c:	87 30       	cpi	r24, 0x07	; 7
     69e:	18 f5       	brcc	.+70     	; 0x6e6 <Endpoint_ConfigureEndpointTable+0x6c>
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
				                                      ((Type << EPTYPE0) | ((Address & ENDPOINT_DIR_IN) ? (1 << EPDIR) : 0)),
     6a0:	62 95       	swap	r22
     6a2:	66 0f       	add	r22, r22
     6a4:	66 0f       	add	r22, r22
     6a6:	60 7c       	andi	r22, 0xC0	; 192
     6a8:	99 1f       	adc	r25, r25
     6aa:	99 27       	eor	r25, r25
     6ac:	99 1f       	adc	r25, r25
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
     6ae:	69 2b       	or	r22, r25
     6b0:	22 30       	cpi	r18, 0x02	; 2
     6b2:	10 f0       	brcs	.+4      	; 0x6b8 <Endpoint_ConfigureEndpointTable+0x3e>
     6b4:	96 e0       	ldi	r25, 0x06	; 6
     6b6:	01 c0       	rjmp	.+2      	; 0x6ba <Endpoint_ConfigureEndpointTable+0x40>
     6b8:	92 e0       	ldi	r25, 0x02	; 2
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes) ATTR_WARN_UNUSED_RESULT ATTR_CONST
			                                                                       ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;
     6ba:	28 e0       	ldi	r18, 0x08	; 8
     6bc:	30 e0       	ldi	r19, 0x00	; 0
		/* Inline Functions: */
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes) ATTR_WARN_UNUSED_RESULT ATTR_CONST
			                                                                       ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
     6be:	40 e0       	ldi	r20, 0x00	; 0
     6c0:	03 c0       	rjmp	.+6      	; 0x6c8 <Endpoint_ConfigureEndpointTable+0x4e>
				uint16_t CheckBytes = 8;

				while (CheckBytes < Bytes)
				{
					MaskVal++;
     6c2:	4f 5f       	subi	r20, 0xFF	; 255
					CheckBytes <<= 1;
     6c4:	22 0f       	add	r18, r18
     6c6:	33 1f       	adc	r19, r19
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while (CheckBytes < Bytes)
     6c8:	2e 17       	cp	r18, r30
     6ca:	3f 07       	cpc	r19, r31
     6cc:	d0 f3       	brcs	.-12     	; 0x6c2 <Endpoint_ConfigureEndpointTable+0x48>
				{
					MaskVal++;
					CheckBytes <<= 1;
				}

				return (MaskVal << EPSIZE0);
     6ce:	42 95       	swap	r20
     6d0:	40 7f       	andi	r20, 0xF0	; 240
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
     6d2:	49 2b       	or	r20, r25
     6d4:	9d df       	rcall	.-198    	; 0x610 <Endpoint_ConfigureEndpoint_Prv>
     6d6:	88 23       	and	r24, r24
     6d8:	31 f0       	breq	.+12     	; 0x6e6 <Endpoint_ConfigureEndpointTable+0x6c>
     6da:	0f 5f       	subi	r16, 0xFF	; 255
#endif

bool Endpoint_ConfigureEndpointTable(const USB_Endpoint_Table_t* const Table,
                                     const uint8_t Entries)
{
	for (uint8_t i = 0; i < Entries; i++)
     6dc:	25 96       	adiw	r28, 0x05	; 5
     6de:	01 17       	cp	r16, r17
     6e0:	a1 f6       	brne	.-88     	; 0x68a <Endpoint_ConfigureEndpointTable+0x10>
     6e2:	81 e0       	ldi	r24, 0x01	; 1
	
		if (!(Endpoint_ConfigureEndpoint(Table[i].Address, Table[i].Type, Table[i].Size, Table[i].Banks)))
		  return false;
	}
	
	return true;
     6e4:	01 c0       	rjmp	.+2      	; 0x6e8 <Endpoint_ConfigureEndpointTable+0x6e>
     6e6:	80 e0       	ldi	r24, 0x00	; 0
	{
		if (!(Table[i].Address))
		  continue;
	
		if (!(Endpoint_ConfigureEndpoint(Table[i].Address, Table[i].Type, Table[i].Size, Table[i].Banks)))
		  return false;
     6e8:	df 91       	pop	r29
	}
	
	return true;
}
     6ea:	cf 91       	pop	r28
     6ec:	1f 91       	pop	r17
     6ee:	0f 91       	pop	r16
     6f0:	08 95       	ret

000006f2 <Endpoint_ClearStatusStage>:
     6f2:	80 91 2d 01 	lds	r24, 0x012D
	}
}

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
     6f6:	87 ff       	sbrs	r24, 7
     6f8:	13 c0       	rjmp	.+38     	; 0x720 <Endpoint_ClearStatusStage+0x2e>
     6fa:	04 c0       	rjmp	.+8      	; 0x704 <Endpoint_ClearStatusStage+0x12>
	{
		while (!(Endpoint_IsOUTReceived()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
     6fc:	80 91 2c 01 	lds	r24, 0x012C
     700:	88 23       	and	r24, r24
     702:	b9 f0       	breq	.+46     	; 0x732 <Endpoint_ClearStatusStage+0x40>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     704:	80 91 e8 00 	lds	r24, 0x00E8

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
	{
		while (!(Endpoint_IsOUTReceived()))
     708:	82 ff       	sbrs	r24, 2
     70a:	f8 cf       	rjmp	.-16     	; 0x6fc <Endpoint_ClearStatusStage+0xa>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     70c:	80 91 e8 00 	lds	r24, 0x00E8
     710:	8b 77       	andi	r24, 0x7B	; 123
     712:	80 93 e8 00 	sts	0x00E8, r24
     716:	08 95       	ret
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
     718:	80 91 2c 01 	lds	r24, 0x012C
     71c:	88 23       	and	r24, r24
     71e:	49 f0       	breq	.+18     	; 0x732 <Endpoint_ClearStatusStage+0x40>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     720:	80 91 e8 00 	lds	r24, 0x00E8

		Endpoint_ClearOUT();
	}
	else
	{
		while (!(Endpoint_IsINReady()))
     724:	80 ff       	sbrs	r24, 0
     726:	f8 cf       	rjmp	.-16     	; 0x718 <Endpoint_ClearStatusStage+0x26>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     728:	80 91 e8 00 	lds	r24, 0x00E8
     72c:	8e 77       	andi	r24, 0x7E	; 126
     72e:	80 93 e8 00 	sts	0x00E8, r24
     732:	08 95       	ret

00000734 <Endpoint_WaitUntilReady>:
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
     734:	80 91 e4 00 	lds	r24, 0x00E4
     738:	90 91 e5 00 	lds	r25, 0x00E5
     73c:	45 e6       	ldi	r20, 0x65	; 101
     73e:	01 c0       	rjmp	.+2      	; 0x742 <Endpoint_WaitUntilReady+0xe>
     740:	c9 01       	movw	r24, r18
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
     742:	20 91 ec 00 	lds	r18, 0x00EC
     746:	20 ff       	sbrs	r18, 0
     748:	23 c0       	rjmp	.+70     	; 0x790 <Endpoint_WaitUntilReady+0x5c>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     74a:	20 91 e8 00 	lds	r18, 0x00E8

	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
     74e:	20 fd       	sbrc	r18, 0
     750:	15 c0       	rjmp	.+42     	; 0x77c <Endpoint_WaitUntilReady+0x48>
		{
			if (Endpoint_IsOUTReceived())
			  return ENDPOINT_READYWAIT_NoError;
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     752:	20 91 2c 01 	lds	r18, 0x012C

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     756:	22 23       	and	r18, r18
     758:	99 f0       	breq	.+38     	; 0x780 <Endpoint_WaitUntilReady+0x4c>
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     75a:	25 30       	cpi	r18, 0x05	; 5
     75c:	99 f0       	breq	.+38     	; 0x784 <Endpoint_WaitUntilReady+0x50>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
     75e:	20 91 eb 00 	lds	r18, 0x00EB
		  return ENDPOINT_READYWAIT_BusSuspended;
		else if (Endpoint_IsStalled())
     762:	25 fd       	sbrc	r18, 5
     764:	11 c0       	rjmp	.+34     	; 0x788 <Endpoint_WaitUntilReady+0x54>
     766:	20 91 e4 00 	lds	r18, 0x00E4
     76a:	30 91 e5 00 	lds	r19, 0x00E5
		  return ENDPOINT_READYWAIT_EndpointStalled;

		uint16_t CurrentFrameNumber = USB_Device_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
     76e:	28 17       	cp	r18, r24
     770:	39 07       	cpc	r19, r25
     772:	39 f3       	breq	.-50     	; 0x742 <Endpoint_WaitUntilReady+0xe>
     774:	41 50       	subi	r20, 0x01	; 1
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
     776:	21 f7       	brne	.-56     	; 0x740 <Endpoint_WaitUntilReady+0xc>
			  return ENDPOINT_READYWAIT_Timeout;
     778:	84 e0       	ldi	r24, 0x04	; 4
     77a:	08 95       	ret
	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
     77c:	80 e0       	ldi	r24, 0x00	; 0
     77e:	08 95       	ret
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
     780:	82 e0       	ldi	r24, 0x02	; 2
     782:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_READYWAIT_BusSuspended;
     784:	83 e0       	ldi	r24, 0x03	; 3
     786:	08 95       	ret
		else if (Endpoint_IsStalled())
		  return ENDPOINT_READYWAIT_EndpointStalled;
     788:	81 e0       	ldi	r24, 0x01	; 1
     78a:	08 95       	ret
			  return ENDPOINT_READYWAIT_NoError;
		}
		else
		{
			if (Endpoint_IsOUTReceived())
			  return ENDPOINT_READYWAIT_NoError;
     78c:	80 e0       	ldi	r24, 0x00	; 0

			if (!(TimeoutMSRem--))
			  return ENDPOINT_READYWAIT_Timeout;
		}
	}
}
     78e:	08 95       	ret
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     790:	20 91 e8 00 	lds	r18, 0x00E8
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
		}
		else
		{
			if (Endpoint_IsOUTReceived())
     794:	22 ff       	sbrs	r18, 2
     796:	dd cf       	rjmp	.-70     	; 0x752 <Endpoint_WaitUntilReady+0x1e>
     798:	f9 cf       	rjmp	.-14     	; 0x78c <Endpoint_WaitUntilReady+0x58>

0000079a <USB_ResetInterface>:

	USB_IsInitialized = false;
}

void USB_ResetInterface(void)
{
     79a:	0f 93       	push	r16
     79c:	1f 93       	push	r17
     79e:	cf 93       	push	r28
     7a0:	df 93       	push	r29
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
     7a2:	4e d0       	rcall	.+156    	; 0x840 <USB_INT_DisableAllInterrupts>
     7a4:	55 d0       	rcall	.+170    	; 0x850 <USB_INT_ClearAllInterrupts>
	USB_INT_ClearAllInterrupts();
     7a6:	c8 ed       	ldi	r28, 0xD8	; 216
     7a8:	d0 e0       	ldi	r29, 0x00	; 0
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
     7aa:	88 81       	ld	r24, Y
     7ac:	8f 77       	andi	r24, 0x7F	; 127
     7ae:	88 83       	st	Y, r24
     7b0:	88 81       	ld	r24, Y
     7b2:	80 68       	ori	r24, 0x80	; 128
				USBCON |=  (1 << USBE);
     7b4:	88 83       	st	Y, r24
     7b6:	88 81       	ld	r24, Y
     7b8:	8f 7d       	andi	r24, 0xDF	; 223
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
     7ba:	88 83       	st	Y, r24
     7bc:	e7 ed       	ldi	r30, 0xD7	; 215
     7be:	f0 e0       	ldi	r31, 0x00	; 0

	if (USB_CurrentMode == USB_MODE_Device)
	{
		#if defined(USB_CAN_BE_DEVICE)
		#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
		UHWCON |=  (1 << UIMOD);
     7c0:	80 81       	ld	r24, Z
     7c2:	80 68       	ori	r24, 0x80	; 128
     7c4:	80 83       	st	Z, r24
     7c6:	19 bc       	out	0x29, r1	; 41
     7c8:	10 92 2c 01 	sts	0x012C, r1
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState                 = DEVICE_STATE_Unattached;
     7cc:	10 92 28 01 	sts	0x0128, r1
	USB_Device_ConfigurationNumber  = 0;
     7d0:	10 92 2a 01 	sts	0x012A, r1

	#if !defined(NO_DEVICE_REMOTE_WAKEUP)
	USB_Device_RemoteWakeupEnabled  = false;
     7d4:	10 92 29 01 	sts	0x0129, r1
	#endif

	#if !defined(NO_DEVICE_SELF_POWER)
	USB_Device_CurrentlySelfPowered = false;
     7d8:	00 ee       	ldi	r16, 0xE0	; 224
     7da:	10 e0       	ldi	r17, 0x00	; 0
			}

			static inline void USB_Device_SetFullSpeed(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetFullSpeed(void)
			{
				UDCON &= ~(1 << LSM);
     7dc:	f8 01       	movw	r30, r16
     7de:	80 81       	ld	r24, Z
     7e0:	8b 7f       	andi	r24, 0xFB	; 251
     7e2:	80 83       	st	Z, r24
     7e4:	88 81       	ld	r24, Y
     7e6:	81 60       	ori	r24, 0x01	; 1
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBCON |= (1 << VBUSTE);
     7e8:	88 83       	st	Y, r24
     7ea:	80 e0       	ldi	r24, 0x00	; 0
     7ec:	60 e0       	ldi	r22, 0x00	; 0
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
     7ee:	42 e0       	ldi	r20, 0x02	; 2
     7f0:	0f df       	rcall	.-482    	; 0x610 <Endpoint_ConfigureEndpoint_Prv>
     7f2:	e1 ee       	ldi	r30, 0xE1	; 225
     7f4:	f0 e0       	ldi	r31, 0x00	; 0
     7f6:	80 81       	ld	r24, Z
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
     7f8:	8e 7f       	andi	r24, 0xFE	; 254
     7fa:	80 83       	st	Z, r24
     7fc:	e2 ee       	ldi	r30, 0xE2	; 226
     7fe:	f0 e0       	ldi	r31, 0x00	; 0
     800:	80 81       	ld	r24, Z
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
     802:	81 60       	ori	r24, 0x01	; 1
     804:	80 83       	st	Z, r24
     806:	80 81       	ld	r24, Z
     808:	88 60       	ori	r24, 0x08	; 8
     80a:	80 83       	st	Z, r24
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
     80c:	f8 01       	movw	r30, r16
     80e:	80 81       	ld	r24, Z
     810:	8e 7f       	andi	r24, 0xFE	; 254
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
     812:	80 83       	st	Z, r24
     814:	88 81       	ld	r24, Y
     816:	80 61       	ori	r24, 0x10	; 16
     818:	88 83       	st	Y, r24

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON |=  (1 << OTGPADE);
     81a:	df 91       	pop	r29
     81c:	cf 91       	pop	r28
     81e:	1f 91       	pop	r17
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
     820:	0f 91       	pop	r16
     822:	08 95       	ret

00000824 <USB_Init>:
     824:	e8 ed       	ldi	r30, 0xD8	; 216
     826:	f0 e0       	ldi	r31, 0x00	; 0
     828:	80 81       	ld	r24, Z
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON &= ~(1 << OTGPADE);
     82a:	8f 7e       	andi	r24, 0xEF	; 239
     82c:	80 83       	st	Z, r24

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON |=  (1 << UVREGE);
     82e:	e7 ed       	ldi	r30, 0xD7	; 215
     830:	f0 e0       	ldi	r31, 0x00	; 0
     832:	80 81       	ld	r24, Z
     834:	81 60       	ori	r24, 0x01	; 1
     836:	80 83       	st	Z, r24
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
     838:	81 e0       	ldi	r24, 0x01	; 1
     83a:	80 93 2b 01 	sts	0x012B, r24

	USB_ResetInterface();
     83e:	ad cf       	rjmp	.-166    	; 0x79a <USB_ResetInterface>

00000840 <USB_INT_DisableAllInterrupts>:
#include "../USBInterrupt.h"

void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
     840:	e8 ed       	ldi	r30, 0xD8	; 216
     842:	f0 e0       	ldi	r31, 0x00	; 0
     844:	80 81       	ld	r24, Z
     846:	8c 7f       	andi	r24, 0xFC	; 252
     848:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
     84a:	10 92 e2 00 	sts	0x00E2, r1
	#endif
}
     84e:	08 95       	ret

00000850 <USB_INT_ClearAllInterrupts>:

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
     850:	10 92 da 00 	sts	0x00DA, r1
	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
     854:	10 92 e1 00 	sts	0x00E1, r1
	#endif
}
     858:	08 95       	ret

0000085a <__vector_10>:

ISR(USB_GEN_vect, ISR_BLOCK)
{
     85a:	1f 92       	push	r1
     85c:	0f 92       	push	r0
     85e:	0f b6       	in	r0, 0x3f	; 63
     860:	0f 92       	push	r0
     862:	0b b6       	in	r0, 0x3b	; 59
     864:	0f 92       	push	r0
     866:	11 24       	eor	r1, r1
     868:	2f 93       	push	r18
     86a:	3f 93       	push	r19
     86c:	4f 93       	push	r20
     86e:	5f 93       	push	r21
     870:	6f 93       	push	r22
     872:	7f 93       	push	r23
     874:	8f 93       	push	r24
     876:	9f 93       	push	r25
     878:	af 93       	push	r26
     87a:	bf 93       	push	r27
     87c:	ef 93       	push	r30
     87e:	ff 93       	push	r31
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
					case USB_INT_SOFI:
						return (UDINT  & (1 << SOFI));
     880:	80 91 e1 00 	lds	r24, 0x00E1
	#if defined(USB_CAN_BE_DEVICE)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
     884:	82 ff       	sbrs	r24, 2
     886:	0a c0       	rjmp	.+20     	; 0x89c <__vector_10+0x42>
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
					case USB_INT_SOFI:
						return (UDIEN  & (1 << SOFE));
     888:	80 91 e2 00 	lds	r24, 0x00E2
     88c:	82 ff       	sbrs	r24, 2
     88e:	06 c0       	rjmp	.+12     	; 0x89c <__vector_10+0x42>
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
						break;
					case USB_INT_SOFI:
						UDINT  &= ~(1 << SOFI);
     890:	80 91 e1 00 	lds	r24, 0x00E1
     894:	8b 7f       	andi	r24, 0xFB	; 251
     896:	80 93 e1 00 	sts	0x00E1, r24
	{
		USB_INT_Clear(USB_INT_SOFI);

		EVENT_USB_Device_StartOfFrame();
     89a:	c6 dc       	rcall	.-1652   	; 0x228 <EVENT_USB_Device_StartOfFrame>
     89c:	80 91 da 00 	lds	r24, 0x00DA
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBINT & (1 << VBUSTI));
     8a0:	80 ff       	sbrs	r24, 0
	}
	#endif

	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	if (USB_INT_HasOccurred(USB_INT_VBUSTI) && USB_INT_IsEnabled(USB_INT_VBUSTI))
     8a2:	1d c0       	rjmp	.+58     	; 0x8de <__vector_10+0x84>
     8a4:	80 91 d8 00 	lds	r24, 0x00D8
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBCON & (1 << VBUSTE));
     8a8:	80 ff       	sbrs	r24, 0
     8aa:	19 c0       	rjmp	.+50     	; 0x8de <__vector_10+0x84>
     8ac:	80 91 da 00 	lds	r24, 0x00DA
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBINT &= ~(1 << VBUSTI);
     8b0:	8e 7f       	andi	r24, 0xFE	; 254
     8b2:	80 93 da 00 	sts	0x00DA, r24
     8b6:	80 91 d9 00 	lds	r24, 0x00D9
				 *  \return Boolean \c true if the VBUS line is currently detecting power from a host, \c false otherwise.
				 */
				static inline bool USB_VBUS_GetStatus(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
				static inline bool USB_VBUS_GetStatus(void)
				{
					return ((USBSTA & (1 << VBUS)) ? true : false);
     8ba:	80 ff       	sbrs	r24, 0
	{
		USB_INT_Clear(USB_INT_VBUSTI);

		if (USB_VBUS_GetStatus())
     8bc:	0c c0       	rjmp	.+24     	; 0x8d6 <__vector_10+0x7c>
     8be:	8c e0       	ldi	r24, 0x0C	; 12

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
     8c0:	89 bd       	out	0x29, r24	; 41
     8c2:	8e e0       	ldi	r24, 0x0E	; 14
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
     8c4:	89 bd       	out	0x29, r24	; 41
     8c6:	09 b4       	in	r0, 0x29	; 41
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			{
				USB_PLL_On();
				while (!(USB_PLL_IsReady()));
     8c8:	00 fe       	sbrs	r0, 0
     8ca:	fd cf       	rjmp	.-6      	; 0x8c6 <__vector_10+0x6c>
     8cc:	81 e0       	ldi	r24, 0x01	; 1
			}

			USB_DeviceState = DEVICE_STATE_Powered;
     8ce:	80 93 2c 01 	sts	0x012C, r24
     8d2:	95 dc       	rcall	.-1750   	; 0x1fe <EVENT_USB_Device_Connect>
			EVENT_USB_Device_Connect();
     8d4:	04 c0       	rjmp	.+8      	; 0x8de <__vector_10+0x84>
     8d6:	19 bc       	out	0x29, r1	; 41
     8d8:	10 92 2c 01 	sts	0x012C, r1
		else
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			  USB_PLL_Off();

			USB_DeviceState = DEVICE_STATE_Unattached;
     8dc:	92 dc       	rcall	.-1756   	; 0x202 <EVENT_USB_Device_Disconnect>
     8de:	80 91 e1 00 	lds	r24, 0x00E1
			EVENT_USB_Device_Disconnect();
     8e2:	80 ff       	sbrs	r24, 0
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
     8e4:	18 c0       	rjmp	.+48     	; 0x916 <__vector_10+0xbc>
     8e6:	80 91 e2 00 	lds	r24, 0x00E2
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
     8ea:	80 ff       	sbrs	r24, 0
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
     8ec:	14 c0       	rjmp	.+40     	; 0x916 <__vector_10+0xbc>
     8ee:	80 91 e2 00 	lds	r24, 0x00E2
     8f2:	8e 7f       	andi	r24, 0xFE	; 254
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
     8f4:	80 93 e2 00 	sts	0x00E2, r24
     8f8:	80 91 e2 00 	lds	r24, 0x00E2
     8fc:	80 61       	ori	r24, 0x10	; 16
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
     8fe:	80 93 e2 00 	sts	0x00E2, r24
     902:	80 91 d8 00 	lds	r24, 0x00D8
     906:	80 62       	ori	r24, 0x20	; 32
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON |=  (1 << FRZCLK);
     908:	80 93 d8 00 	sts	0x00D8, r24
     90c:	19 bc       	out	0x29, r1	; 41
     90e:	85 e0       	ldi	r24, 0x05	; 5
     910:	80 93 2c 01 	sts	0x012C, r24

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
		EVENT_USB_Device_Disconnect();
		#else
		USB_DeviceState = DEVICE_STATE_Suspended;
     914:	d0 d1       	rcall	.+928    	; 0xcb6 <USB_Event_Stub>
     916:	80 91 e1 00 	lds	r24, 0x00E1
		EVENT_USB_Device_Suspend();
     91a:	84 ff       	sbrs	r24, 4
     91c:	2d c0       	rjmp	.+90     	; 0x978 <__vector_10+0x11e>
					case USB_INT_IDTI:
						return (USBINT & (1 << IDTI));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
     91e:	80 91 e2 00 	lds	r24, 0x00E2
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
     922:	84 ff       	sbrs	r24, 4
     924:	29 c0       	rjmp	.+82     	; 0x978 <__vector_10+0x11e>
					case USB_INT_IDTI:
						return (USBCON & (1 << IDTE));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
     926:	8c e0       	ldi	r24, 0x0C	; 12
     928:	89 bd       	out	0x29, r24	; 41
     92a:	8e e0       	ldi	r24, 0x0E	; 14
     92c:	89 bd       	out	0x29, r24	; 41

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
     92e:	09 b4       	in	r0, 0x29	; 41
     930:	00 fe       	sbrs	r0, 0
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
     932:	fd cf       	rjmp	.-6      	; 0x92e <__vector_10+0xd4>
     934:	80 91 d8 00 	lds	r24, 0x00D8
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
     938:	8f 7d       	andi	r24, 0xDF	; 223
     93a:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
     93e:	80 91 e1 00 	lds	r24, 0x00E1
     942:	8f 7e       	andi	r24, 0xEF	; 239
     944:	80 93 e1 00 	sts	0x00E1, r24
						USBINT &= ~(1 << IDTI);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
     948:	80 91 e2 00 	lds	r24, 0x00E2
     94c:	8f 7e       	andi	r24, 0xEF	; 239
     94e:	80 93 e2 00 	sts	0x00E2, r24
						USBCON &= ~(1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
     952:	80 91 e2 00 	lds	r24, 0x00E2
     956:	81 60       	ori	r24, 0x01	; 1
     958:	80 93 e2 00 	sts	0x00E2, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
     95c:	80 91 28 01 	lds	r24, 0x0128
     960:	88 23       	and	r24, r24
     962:	21 f4       	brne	.+8      	; 0x96c <__vector_10+0x112>
		USB_INT_Clear(USB_INT_WAKEUPI);

		USB_INT_Disable(USB_INT_WAKEUPI);
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_Device_ConfigurationNumber)
     964:	80 91 e3 00 	lds	r24, 0x00E3
     968:	87 ff       	sbrs	r24, 7
     96a:	02 c0       	rjmp	.+4      	; 0x970 <__vector_10+0x116>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
     96c:	84 e0       	ldi	r24, 0x04	; 4
     96e:	01 c0       	rjmp	.+2      	; 0x972 <__vector_10+0x118>
		  USB_DeviceState = DEVICE_STATE_Configured;
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
     970:	81 e0       	ldi	r24, 0x01	; 1
     972:	80 93 2c 01 	sts	0x012C, r24
     976:	9f d1       	rcall	.+830    	; 0xcb6 <USB_Event_Stub>
     978:	80 91 e1 00 	lds	r24, 0x00E1
     97c:	83 ff       	sbrs	r24, 3

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
		#else
		EVENT_USB_Device_WakeUp();
     97e:	22 c0       	rjmp	.+68     	; 0x9c4 <__vector_10+0x16a>
     980:	80 91 e2 00 	lds	r24, 0x00E2
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
     984:	83 ff       	sbrs	r24, 3
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
     986:	1e c0       	rjmp	.+60     	; 0x9c4 <__vector_10+0x16a>
     988:	80 91 e1 00 	lds	r24, 0x00E1
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
     98c:	87 7f       	andi	r24, 0xF7	; 247
     98e:	80 93 e1 00 	sts	0x00E1, r24
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
     992:	82 e0       	ldi	r24, 0x02	; 2
     994:	80 93 2c 01 	sts	0x012C, r24
     998:	10 92 28 01 	sts	0x0128, r1
	{
		USB_INT_Clear(USB_INT_EORSTI);

		USB_DeviceState                = DEVICE_STATE_Default;
     99c:	80 91 e1 00 	lds	r24, 0x00E1
     9a0:	8e 7f       	andi	r24, 0xFE	; 254
		USB_Device_ConfigurationNumber = 0;
     9a2:	80 93 e1 00 	sts	0x00E1, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
     9a6:	80 91 e2 00 	lds	r24, 0x00E2
     9aa:	8e 7f       	andi	r24, 0xFE	; 254
     9ac:	80 93 e2 00 	sts	0x00E2, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
     9b0:	80 91 e2 00 	lds	r24, 0x00E2
     9b4:	80 61       	ori	r24, 0x10	; 16
     9b6:	80 93 e2 00 	sts	0x00E2, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
     9ba:	80 e0       	ldi	r24, 0x00	; 0
     9bc:	60 e0       	ldi	r22, 0x00	; 0
     9be:	42 e0       	ldi	r20, 0x02	; 2
     9c0:	27 de       	rcall	.-946    	; 0x610 <Endpoint_ConfigureEndpoint_Prv>
     9c2:	79 d1       	rcall	.+754    	; 0xcb6 <USB_Event_Stub>
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
     9c4:	ff 91       	pop	r31
     9c6:	ef 91       	pop	r30
     9c8:	bf 91       	pop	r27
     9ca:	af 91       	pop	r26
     9cc:	9f 91       	pop	r25

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
     9ce:	8f 91       	pop	r24
     9d0:	7f 91       	pop	r23
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
     9d2:	6f 91       	pop	r22
     9d4:	5f 91       	pop	r21
     9d6:	4f 91       	pop	r20
     9d8:	3f 91       	pop	r19
     9da:	2f 91       	pop	r18
     9dc:	0f 90       	pop	r0
     9de:	0b be       	out	0x3b, r0	; 59
     9e0:	0f 90       	pop	r0
     9e2:	0f be       	out	0x3f, r0	; 63
     9e4:	0f 90       	pop	r0
     9e6:	1f 90       	pop	r1
     9e8:	18 95       	reti

000009ea <USB_Device_ProcessControlRequest>:
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_Device_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
     9ea:	1f 93       	push	r17
     9ec:	cf 93       	push	r28
     9ee:	df 93       	push	r29
     9f0:	cd b7       	in	r28, 0x3d	; 61
     9f2:	de b7       	in	r29, 0x3e	; 62
     9f4:	ac 97       	sbiw	r28, 0x2c	; 44
     9f6:	0f b6       	in	r0, 0x3f	; 63
     9f8:	f8 94       	cli
     9fa:	de bf       	out	0x3e, r29	; 62
     9fc:	0f be       	out	0x3f, r0	; 63
     9fe:	cd bf       	out	0x3d, r28	; 61
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
     a00:	80 e0       	ldi	r24, 0x00	; 0
	USB_ControlRequest.bRequest      = Endpoint_Read_8();
	USB_ControlRequest.wValue        = Endpoint_Read_16_LE();
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;
     a02:	ed e2       	ldi	r30, 0x2D	; 45
     a04:	f1 e0       	ldi	r31, 0x01	; 1
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
     a06:	90 91 f1 00 	lds	r25, 0x00F1

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_8();
     a0a:	91 93       	st	Z+, r25
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
     a0c:	8f 5f       	subi	r24, 0xFF	; 255
     a0e:	88 30       	cpi	r24, 0x08	; 8
     a10:	d1 f7       	brne	.-12     	; 0xa06 <USB_Device_ProcessControlRequest+0x1c>
	  *(RequestHeader++) = Endpoint_Read_8();
	#endif

	EVENT_USB_Device_ControlRequest();
     a12:	07 dc       	rcall	.-2034   	; 0x222 <EVENT_USB_Device_ControlRequest>
     a14:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     a18:	83 ff       	sbrs	r24, 3

	if (Endpoint_IsSETUPReceived())
     a1a:	35 c1       	rjmp	.+618    	; 0xc86 <USB_Device_ProcessControlRequest+0x29c>
     a1c:	80 91 2d 01 	lds	r24, 0x012D
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
     a20:	20 91 2e 01 	lds	r18, 0x012E

		switch (USB_ControlRequest.bRequest)
     a24:	25 30       	cpi	r18, 0x05	; 5
     a26:	09 f4       	brne	.+2      	; 0xa2a <USB_Device_ProcessControlRequest+0x40>
     a28:	84 c0       	rjmp	.+264    	; 0xb32 <USB_Device_ProcessControlRequest+0x148>
     a2a:	26 30       	cpi	r18, 0x06	; 6
     a2c:	40 f4       	brcc	.+16     	; 0xa3e <USB_Device_ProcessControlRequest+0x54>
     a2e:	21 30       	cpi	r18, 0x01	; 1
     a30:	a1 f1       	breq	.+104    	; 0xa9a <USB_Device_ProcessControlRequest+0xb0>
     a32:	21 30       	cpi	r18, 0x01	; 1
     a34:	70 f0       	brcs	.+28     	; 0xa52 <USB_Device_ProcessControlRequest+0x68>
     a36:	23 30       	cpi	r18, 0x03	; 3
     a38:	09 f0       	breq	.+2      	; 0xa3c <USB_Device_ProcessControlRequest+0x52>
     a3a:	25 c1       	rjmp	.+586    	; 0xc86 <USB_Device_ProcessControlRequest+0x29c>
     a3c:	2e c0       	rjmp	.+92     	; 0xa9a <USB_Device_ProcessControlRequest+0xb0>
     a3e:	28 30       	cpi	r18, 0x08	; 8
     a40:	09 f4       	brne	.+2      	; 0xa44 <USB_Device_ProcessControlRequest+0x5a>
     a42:	f3 c0       	rjmp	.+486    	; 0xc2a <USB_Device_ProcessControlRequest+0x240>
     a44:	29 30       	cpi	r18, 0x09	; 9
     a46:	09 f4       	brne	.+2      	; 0xa4a <USB_Device_ProcessControlRequest+0x60>
     a48:	02 c1       	rjmp	.+516    	; 0xc4e <USB_Device_ProcessControlRequest+0x264>
     a4a:	26 30       	cpi	r18, 0x06	; 6
     a4c:	09 f0       	breq	.+2      	; 0xa50 <USB_Device_ProcessControlRequest+0x66>
     a4e:	1b c1       	rjmp	.+566    	; 0xc86 <USB_Device_ProcessControlRequest+0x29c>
     a50:	93 c0       	rjmp	.+294    	; 0xb78 <USB_Device_ProcessControlRequest+0x18e>
     a52:	80 38       	cpi	r24, 0x80	; 128
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
     a54:	21 f0       	breq	.+8      	; 0xa5e <USB_Device_ProcessControlRequest+0x74>
     a56:	82 38       	cpi	r24, 0x82	; 130
     a58:	09 f0       	breq	.+2      	; 0xa5c <USB_Device_ProcessControlRequest+0x72>
     a5a:	15 c1       	rjmp	.+554    	; 0xc86 <USB_Device_ProcessControlRequest+0x29c>
     a5c:	08 c0       	rjmp	.+16     	; 0xa6e <USB_Device_ProcessControlRequest+0x84>
     a5e:	80 91 29 01 	lds	r24, 0x0129
	Endpoint_ClearOUT();
}

static void USB_Device_GetStatus(void)
{
	uint8_t CurrentStatus = 0;
     a62:	90 91 2a 01 	lds	r25, 0x012A
			if (USB_Device_CurrentlySelfPowered)
			  CurrentStatus |= FEATURE_SELFPOWERED_ENABLED;
			#endif

			#if !defined(NO_DEVICE_REMOTE_WAKEUP)
			if (USB_Device_RemoteWakeupEnabled)
     a66:	99 23       	and	r25, r25
     a68:	71 f0       	breq	.+28     	; 0xa86 <USB_Device_ProcessControlRequest+0x9c>
     a6a:	82 60       	ori	r24, 0x02	; 2
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
     a6c:	0c c0       	rjmp	.+24     	; 0xa86 <USB_Device_ProcessControlRequest+0x9c>
     a6e:	80 91 31 01 	lds	r24, 0x0131
			#endif
			break;
		case (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_ENDPOINT):
			#if !defined(CONTROL_ONLY_DEVICE)
			Endpoint_SelectEndpoint((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
     a72:	8f 70       	andi	r24, 0x0F	; 15
     a74:	80 93 e9 00 	sts	0x00E9, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     a78:	90 91 eb 00 	lds	r25, 0x00EB
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
     a7c:	81 e0       	ldi	r24, 0x01	; 1

			CurrentStatus = Endpoint_IsStalled();
     a7e:	95 ff       	sbrs	r25, 5
     a80:	80 e0       	ldi	r24, 0x00	; 0
     a82:	10 92 e9 00 	sts	0x00E9, r1
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     a86:	90 91 e8 00 	lds	r25, 0x00E8
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     a8a:	97 7f       	andi	r25, 0xF7	; 247
     a8c:	90 93 e8 00 	sts	0x00E8, r25
     a90:	80 93 f1 00 	sts	0x00F1, r24
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
     a94:	10 92 f1 00 	sts	0x00F1, r1
				UEDATX = (Data >> 8);
     a98:	d3 c0       	rjmp	.+422    	; 0xc40 <USB_Device_ProcessControlRequest+0x256>
     a9a:	88 23       	and	r24, r24
				}

				break;
			case REQ_ClearFeature:
			case REQ_SetFeature:
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
     a9c:	19 f0       	breq	.+6      	; 0xaa4 <USB_Device_ProcessControlRequest+0xba>
     a9e:	82 30       	cpi	r24, 0x02	; 2
     aa0:	09 f0       	breq	.+2      	; 0xaa4 <USB_Device_ProcessControlRequest+0xba>
     aa2:	f1 c0       	rjmp	.+482    	; 0xc86 <USB_Device_ProcessControlRequest+0x29c>
     aa4:	90 e0       	ldi	r25, 0x00	; 0
	Endpoint_ClearStatusStage();
}

static void USB_Device_ClearSetFeature(void)
{
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
     aa6:	8f 71       	andi	r24, 0x1F	; 31
     aa8:	90 70       	andi	r25, 0x00	; 0
     aaa:	00 97       	sbiw	r24, 0x00	; 0
     aac:	29 f0       	breq	.+10     	; 0xab8 <USB_Device_ProcessControlRequest+0xce>
     aae:	82 30       	cpi	r24, 0x02	; 2
     ab0:	91 05       	cpc	r25, r1
     ab2:	09 f0       	breq	.+2      	; 0xab6 <USB_Device_ProcessControlRequest+0xcc>
     ab4:	e8 c0       	rjmp	.+464    	; 0xc86 <USB_Device_ProcessControlRequest+0x29c>
     ab6:	0b c0       	rjmp	.+22     	; 0xace <USB_Device_ProcessControlRequest+0xe4>
     ab8:	80 91 2f 01 	lds	r24, 0x012F
	{
		#if !defined(NO_DEVICE_REMOTE_WAKEUP)
		case REQREC_DEVICE:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
     abc:	81 30       	cpi	r24, 0x01	; 1
     abe:	09 f0       	breq	.+2      	; 0xac2 <USB_Device_ProcessControlRequest+0xd8>
     ac0:	e2 c0       	rjmp	.+452    	; 0xc86 <USB_Device_ProcessControlRequest+0x29c>
     ac2:	23 30       	cpi	r18, 0x03	; 3
			  USB_Device_RemoteWakeupEnabled = (USB_ControlRequest.bRequest == REQ_SetFeature);
     ac4:	09 f0       	breq	.+2      	; 0xac8 <USB_Device_ProcessControlRequest+0xde>
     ac6:	80 e0       	ldi	r24, 0x00	; 0
     ac8:	80 93 2a 01 	sts	0x012A, r24
     acc:	2c c0       	rjmp	.+88     	; 0xb26 <USB_Device_ProcessControlRequest+0x13c>
     ace:	80 91 2f 01 	lds	r24, 0x012F

			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
     ad2:	88 23       	and	r24, r24
     ad4:	41 f5       	brne	.+80     	; 0xb26 <USB_Device_ProcessControlRequest+0x13c>
     ad6:	20 91 31 01 	lds	r18, 0x0131
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
     ada:	2f 70       	andi	r18, 0x0F	; 15
     adc:	09 f4       	brne	.+2      	; 0xae0 <USB_Device_ProcessControlRequest+0xf6>

				if (EndpointIndex == ENDPOINT_CONTROLEP)
     ade:	d3 c0       	rjmp	.+422    	; 0xc86 <USB_Device_ProcessControlRequest+0x29c>
     ae0:	20 93 e9 00 	sts	0x00E9, r18
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     ae4:	80 91 eb 00 	lds	r24, 0x00EB
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
     ae8:	80 ff       	sbrs	r24, 0
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
     aea:	1d c0       	rjmp	.+58     	; 0xb26 <USB_Device_ProcessControlRequest+0x13c>
     aec:	80 91 2e 01 	lds	r24, 0x012E
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
     af0:	83 30       	cpi	r24, 0x03	; 3
     af2:	21 f4       	brne	.+8      	; 0xafc <USB_Device_ProcessControlRequest+0x112>
     af4:	80 91 eb 00 	lds	r24, 0x00EB
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
     af8:	80 62       	ori	r24, 0x20	; 32
     afa:	13 c0       	rjmp	.+38     	; 0xb22 <USB_Device_ProcessControlRequest+0x138>
     afc:	80 91 eb 00 	lds	r24, 0x00EB
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
     b00:	80 61       	ori	r24, 0x10	; 16
     b02:	80 93 eb 00 	sts	0x00EB, r24
     b06:	81 e0       	ldi	r24, 0x01	; 1
			 *  \param[in] Address  Endpoint address whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t Address)
			{
				UERST = (1 << (Address & ENDPOINT_EPNUM_MASK));
     b08:	90 e0       	ldi	r25, 0x00	; 0
     b0a:	02 c0       	rjmp	.+4      	; 0xb10 <USB_Device_ProcessControlRequest+0x126>
     b0c:	88 0f       	add	r24, r24
     b0e:	99 1f       	adc	r25, r25
     b10:	2a 95       	dec	r18
     b12:	e2 f7       	brpl	.-8      	; 0xb0c <USB_Device_ProcessControlRequest+0x122>
     b14:	80 93 ea 00 	sts	0x00EA, r24
     b18:	10 92 ea 00 	sts	0x00EA, r1
				UERST = 0;
     b1c:	80 91 eb 00 	lds	r24, 0x00EB

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
     b20:	88 60       	ori	r24, 0x08	; 8
     b22:	80 93 eb 00 	sts	0x00EB, r24
     b26:	10 92 e9 00 	sts	0x00E9, r1
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     b2a:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     b2e:	87 7f       	andi	r24, 0xF7	; 247
     b30:	8a c0       	rjmp	.+276    	; 0xc46 <USB_Device_ProcessControlRequest+0x25c>
     b32:	88 23       	and	r24, r24
					USB_Device_ClearSetFeature();
				}

				break;
			case REQ_SetAddress:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
     b34:	09 f0       	breq	.+2      	; 0xb38 <USB_Device_ProcessControlRequest+0x14e>
     b36:	a7 c0       	rjmp	.+334    	; 0xc86 <USB_Device_ProcessControlRequest+0x29c>
     b38:	10 91 2f 01 	lds	r17, 0x012F
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t DeviceAddress = (USB_ControlRequest.wValue & 0x7F);
     b3c:	1f 77       	andi	r17, 0x7F	; 127
     b3e:	80 91 e3 00 	lds	r24, 0x00E3
			#endif

			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				UDADDR = (UDADDR & (1 << ADDEN)) | (Address & 0x7F);
     b42:	80 78       	andi	r24, 0x80	; 128
     b44:	81 2b       	or	r24, r17
     b46:	80 93 e3 00 	sts	0x00E3, r24
     b4a:	80 91 e8 00 	lds	r24, 0x00E8
     b4e:	87 7f       	andi	r24, 0xF7	; 247
     b50:	80 93 e8 00 	sts	0x00E8, r24
     b54:	ce dd       	rcall	.-1124   	; 0x6f2 <Endpoint_ClearStatusStage>

	USB_Device_SetDeviceAddress(DeviceAddress);

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
     b56:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     b5a:	80 ff       	sbrs	r24, 0
     b5c:	fc cf       	rjmp	.-8      	; 0xb56 <USB_Device_ProcessControlRequest+0x16c>

	while (!(Endpoint_IsINReady()));
     b5e:	80 91 e3 00 	lds	r24, 0x00E3
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address)
			{
				(void)Address;
				
				UDADDR |= (1 << ADDEN);
     b62:	80 68       	ori	r24, 0x80	; 128
     b64:	80 93 e3 00 	sts	0x00E3, r24
     b68:	11 23       	and	r17, r17
     b6a:	11 f0       	breq	.+4      	; 0xb70 <USB_Device_ProcessControlRequest+0x186>

	USB_Device_EnableDeviceAddress(DeviceAddress);

	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
     b6c:	83 e0       	ldi	r24, 0x03	; 3
     b6e:	01 c0       	rjmp	.+2      	; 0xb72 <USB_Device_ProcessControlRequest+0x188>
     b70:	82 e0       	ldi	r24, 0x02	; 2
     b72:	80 93 2c 01 	sts	0x012C, r24
     b76:	87 c0       	rjmp	.+270    	; 0xc86 <USB_Device_ProcessControlRequest+0x29c>
     b78:	80 58       	subi	r24, 0x80	; 128
     b7a:	82 30       	cpi	r24, 0x02	; 2
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_SetAddress();

				break;
			case REQ_GetDescriptor:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
     b7c:	08 f0       	brcs	.+2      	; 0xb80 <USB_Device_ProcessControlRequest+0x196>
     b7e:	83 c0       	rjmp	.+262    	; 0xc86 <USB_Device_ProcessControlRequest+0x29c>
     b80:	80 91 2f 01 	lds	r24, 0x012F
	    !(defined(USE_FLASH_DESCRIPTORS) || defined(USE_EEPROM_DESCRIPTORS) || defined(USE_RAM_DESCRIPTORS))
	uint8_t DescriptorAddressSpace;
	#endif

	#if !defined(NO_INTERNAL_SERIAL) && (USE_INTERNAL_SERIAL != NO_DESCRIPTOR)
	if (USB_ControlRequest.wValue == ((DTYPE_String << 8) | USE_INTERNAL_SERIAL))
     b84:	90 91 30 01 	lds	r25, 0x0130
     b88:	23 e0       	ldi	r18, 0x03	; 3
     b8a:	8c 3d       	cpi	r24, 0xDC	; 220
     b8c:	92 07       	cpc	r25, r18
     b8e:	a9 f5       	brne	.+106    	; 0xbfa <USB_Device_ProcessControlRequest+0x210>
     b90:	83 e0       	ldi	r24, 0x03	; 3
     b92:	8c 83       	std	Y+4, r24	; 0x04
	{
		USB_Descriptor_Header_t Header;
		uint16_t                UnicodeString[INTERNAL_SERIAL_LENGTH_BITS / 4];
	} SignatureDescriptor;

	SignatureDescriptor.Header.Type = DTYPE_String;
     b94:	8a e2       	ldi	r24, 0x2A	; 42
     b96:	8b 83       	std	Y+3, r24	; 0x03
	SignatureDescriptor.Header.Size = USB_STRING_LEN(INTERNAL_SERIAL_LENGTH_BITS / 4);
     b98:	5f b7       	in	r21, 0x3f	; 63
     b9a:	f8 94       	cli
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
     b9c:	de 01       	movw	r26, r28
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
     b9e:	13 96       	adiw	r26, 0x03	; 3
				__builtin_ssrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				cli();
				#endif

				GCC_MEMORY_BARRIER();
     ba0:	80 e0       	ldi	r24, 0x00	; 0
     ba2:	90 e0       	ldi	r25, 0x00	; 0
     ba4:	4e e0       	ldi	r20, 0x0E	; 14
     ba6:	61 e2       	ldi	r22, 0x21	; 33
			static inline void USB_Device_GetSerialString(uint16_t* const UnicodeString)
			{
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;
     ba8:	e4 2f       	mov	r30, r20

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
				{
					uint8_t SerialByte = boot_signature_byte_get(SigReadAddress);
     baa:	f0 e0       	ldi	r31, 0x00	; 0
     bac:	60 93 57 00 	sts	0x0057, r22
     bb0:	e4 91       	lpm	r30, Z
     bb2:	80 ff       	sbrs	r24, 0
     bb4:	03 c0       	rjmp	.+6      	; 0xbbc <USB_Device_ProcessControlRequest+0x1d2>

					if (SerialCharNum & 0x01)
     bb6:	e2 95       	swap	r30
     bb8:	ef 70       	andi	r30, 0x0F	; 15
					{
						SerialByte >>= 4;
     bba:	4f 5f       	subi	r20, 0xFF	; 255
     bbc:	ef 70       	andi	r30, 0x0F	; 15
						SigReadAddress++;
     bbe:	2e 2f       	mov	r18, r30
					}

					SerialByte &= 0x0F;
     bc0:	30 e0       	ldi	r19, 0x00	; 0
     bc2:	ea 30       	cpi	r30, 0x0A	; 10
     bc4:	18 f0       	brcs	.+6      	; 0xbcc <USB_Device_ProcessControlRequest+0x1e2>

					UnicodeString[SerialCharNum] = cpu_to_le16((SerialByte >= 10) ?
     bc6:	29 5c       	subi	r18, 0xC9	; 201
     bc8:	3f 4f       	sbci	r19, 0xFF	; 255
     bca:	02 c0       	rjmp	.+4      	; 0xbd0 <USB_Device_ProcessControlRequest+0x1e6>
     bcc:	20 5d       	subi	r18, 0xD0	; 208
     bce:	3f 4f       	sbci	r19, 0xFF	; 255
     bd0:	13 96       	adiw	r26, 0x03	; 3
     bd2:	3c 93       	st	X, r19
     bd4:	2e 93       	st	-X, r18
     bd6:	12 97       	sbiw	r26, 0x02	; 2
     bd8:	01 96       	adiw	r24, 0x01	; 1
     bda:	12 96       	adiw	r26, 0x02	; 2
     bdc:	84 31       	cpi	r24, 0x14	; 20
     bde:	91 05       	cpc	r25, r1
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
     be0:	19 f7       	brne	.-58     	; 0xba8 <USB_Device_ProcessControlRequest+0x1be>
     be2:	5f bf       	out	0x3f, r21	; 63
     be4:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     be8:	87 7f       	andi	r24, 0xF7	; 247
     bea:	80 93 e8 00 	sts	0x00E8, r24
     bee:	ce 01       	movw	r24, r28
     bf0:	03 96       	adiw	r24, 0x03	; 3

	USB_Device_GetSerialString(SignatureDescriptor.UnicodeString);

	Endpoint_ClearSETUP();

	Endpoint_Write_Control_Stream_LE(&SignatureDescriptor, sizeof(SignatureDescriptor));
     bf2:	6a e2       	ldi	r22, 0x2A	; 42
     bf4:	70 e0       	ldi	r23, 0x00	; 0
     bf6:	0a dc       	rcall	.-2028   	; 0x40c <Endpoint_Write_Control_Stream_LE>
     bf8:	12 c0       	rjmp	.+36     	; 0xc1e <USB_Device_ProcessControlRequest+0x234>
     bfa:	60 91 31 01 	lds	r22, 0x0131
     bfe:	ae 01       	movw	r20, r28
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif

	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
     c00:	4f 5f       	subi	r20, 0xFF	; 255
     c02:	5f 4f       	sbci	r21, 0xFF	; 255
     c04:	76 db       	rcall	.-2324   	; 0x2f2 <CALLBACK_USB_GetDescriptor>
     c06:	bc 01       	movw	r22, r24
     c08:	00 97       	sbiw	r24, 0x00	; 0
     c0a:	09 f4       	brne	.+2      	; 0xc0e <USB_Device_ProcessControlRequest+0x224>
     c0c:	3c c0       	rjmp	.+120    	; 0xc86 <USB_Device_ProcessControlRequest+0x29c>
     c0e:	80 91 e8 00 	lds	r24, 0x00E8
     c12:	87 7f       	andi	r24, 0xF7	; 247
     c14:	80 93 e8 00 	sts	0x00E8, r24
     c18:	89 81       	ldd	r24, Y+1	; 0x01
     c1a:	9a 81       	ldd	r25, Y+2	; 0x02
     c1c:	9c dc       	rcall	.-1736   	; 0x556 <Endpoint_Write_Control_PStream_LE>
     c1e:	80 91 e8 00 	lds	r24, 0x00E8
	#if defined(USE_RAM_DESCRIPTORS) || !defined(ARCH_HAS_MULTI_ADDRESS_SPACE)
	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_EEPROM_DESCRIPTORS)
	Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_FLASH_DESCRIPTORS)
	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
     c22:	8b 77       	andi	r24, 0x7B	; 123
     c24:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     c28:	2e c0       	rjmp	.+92     	; 0xc86 <USB_Device_ProcessControlRequest+0x29c>
     c2a:	80 38       	cpi	r24, 0x80	; 128
     c2c:	61 f5       	brne	.+88     	; 0xc86 <USB_Device_ProcessControlRequest+0x29c>
     c2e:	80 91 e8 00 	lds	r24, 0x00E8
     c32:	87 7f       	andi	r24, 0xF7	; 247
					USB_Device_GetDescriptor();
				}

				break;
			case REQ_GetConfiguration:
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
     c34:	80 93 e8 00 	sts	0x00E8, r24
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     c38:	80 91 28 01 	lds	r24, 0x0128
     c3c:	80 93 f1 00 	sts	0x00F1, r24
     c40:	80 91 e8 00 	lds	r24, 0x00E8

static void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();

	Endpoint_Write_8(USB_Device_ConfigurationNumber);
     c44:	8e 77       	andi	r24, 0x7E	; 126
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     c46:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     c4a:	53 dd       	rcall	.-1370   	; 0x6f2 <Endpoint_ClearStatusStage>
     c4c:	1c c0       	rjmp	.+56     	; 0xc86 <USB_Device_ProcessControlRequest+0x29c>
     c4e:	88 23       	and	r24, r24
     c50:	d1 f4       	brne	.+52     	; 0xc86 <USB_Device_ProcessControlRequest+0x29c>
     c52:	90 91 2f 01 	lds	r25, 0x012F
	Endpoint_ClearIN();

	Endpoint_ClearStatusStage();
     c56:	92 30       	cpi	r25, 0x02	; 2
     c58:	b0 f4       	brcc	.+44     	; 0xc86 <USB_Device_ProcessControlRequest+0x29c>
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_GetConfiguration();

				break;
			case REQ_SetConfiguration:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
     c5a:	80 91 e8 00 	lds	r24, 0x00E8
}

static void USB_Device_SetConfiguration(void)
{
	#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
     c5e:	87 7f       	andi	r24, 0xF7	; 247
     c60:	80 93 e8 00 	sts	0x00E8, r24
     c64:	90 93 28 01 	sts	0x0128, r25
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     c68:	44 dd       	rcall	.-1400   	; 0x6f2 <Endpoint_ClearStatusStage>
     c6a:	80 91 28 01 	lds	r24, 0x0128
     c6e:	88 23       	and	r24, r24
	#endif
	#endif

	Endpoint_ClearSETUP();

	USB_Device_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
     c70:	21 f4       	brne	.+8      	; 0xc7a <USB_Device_ProcessControlRequest+0x290>
     c72:	80 91 e3 00 	lds	r24, 0x00E3

	Endpoint_ClearStatusStage();
     c76:	87 ff       	sbrs	r24, 7

	if (USB_Device_ConfigurationNumber)
     c78:	02 c0       	rjmp	.+4      	; 0xc7e <USB_Device_ProcessControlRequest+0x294>
     c7a:	84 e0       	ldi	r24, 0x04	; 4
     c7c:	01 c0       	rjmp	.+2      	; 0xc80 <USB_Device_ProcessControlRequest+0x296>
     c7e:	81 e0       	ldi	r24, 0x01	; 1
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
     c80:	80 93 2c 01 	sts	0x012C, r24
	  USB_DeviceState = DEVICE_STATE_Configured;
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
     c84:	c0 da       	rcall	.-2688   	; 0x206 <EVENT_USB_Device_ConfigurationChanged>
     c86:	80 91 e8 00 	lds	r24, 0x00E8
     c8a:	83 ff       	sbrs	r24, 3
     c8c:	0a c0       	rjmp	.+20     	; 0xca2 <USB_Device_ProcessControlRequest+0x2b8>
     c8e:	80 91 e8 00 	lds	r24, 0x00E8

	EVENT_USB_Device_ConfigurationChanged();
     c92:	87 7f       	andi	r24, 0xF7	; 247
     c94:	80 93 e8 00 	sts	0x00E8, r24
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     c98:	80 91 eb 00 	lds	r24, 0x00EB
			default:
				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
     c9c:	80 62       	ori	r24, 0x20	; 32
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     c9e:	80 93 eb 00 	sts	0x00EB, r24
     ca2:	ac 96       	adiw	r28, 0x2c	; 44
     ca4:	0f b6       	in	r0, 0x3f	; 63
     ca6:	f8 94       	cli
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
     ca8:	de bf       	out	0x3e, r29	; 62
     caa:	0f be       	out	0x3f, r0	; 63
     cac:	cd bf       	out	0x3d, r28	; 61
     cae:	df 91       	pop	r29
     cb0:	cf 91       	pop	r28
	{
		Endpoint_ClearSETUP();
		Endpoint_StallTransaction();
	}
}
     cb2:	1f 91       	pop	r17
     cb4:	08 95       	ret

00000cb6 <USB_Event_Stub>:
#include "Events.h"

void USB_Event_Stub(void)
{

}
     cb6:	08 95       	ret

00000cb8 <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
     cb8:	cf 93       	push	r28
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_DeviceTask(void)
{
	if (USB_DeviceState == DEVICE_STATE_Unattached)
     cba:	80 91 2c 01 	lds	r24, 0x012C
     cbe:	88 23       	and	r24, r24
     cc0:	a9 f0       	breq	.+42     	; 0xcec <USB_USBTask+0x34>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
     cc2:	80 91 e9 00 	lds	r24, 0x00E9
     cc6:	8f 70       	andi	r24, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
     cc8:	90 91 ec 00 	lds	r25, 0x00EC
     ccc:	90 ff       	sbrs	r25, 0
     cce:	02 c0       	rjmp	.+4      	; 0xcd4 <USB_USBTask+0x1c>
     cd0:	c0 e8       	ldi	r28, 0x80	; 128
     cd2:	01 c0       	rjmp	.+2      	; 0xcd6 <USB_USBTask+0x1e>
     cd4:	c0 e0       	ldi	r28, 0x00	; 0
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
     cd6:	c8 2b       	or	r28, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     cd8:	10 92 e9 00 	sts	0x00E9, r1
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     cdc:	80 91 e8 00 	lds	r24, 0x00E8

	uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

	if (Endpoint_IsSETUPReceived())
     ce0:	83 ff       	sbrs	r24, 3
     ce2:	01 c0       	rjmp	.+2      	; 0xce6 <USB_USBTask+0x2e>
	  USB_Device_ProcessControlRequest();
     ce4:	82 de       	rcall	.-764    	; 0x9ea <USB_Device_ProcessControlRequest>
     ce6:	cf 70       	andi	r28, 0x0F	; 15
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     ce8:	c0 93 e9 00 	sts	0x00E9, r28
     cec:	cf 91       	pop	r28
	#elif defined(USB_CAN_BE_HOST)
		USB_HostTask();
	#elif defined(USB_CAN_BE_DEVICE)
		USB_DeviceTask();
	#endif
}
     cee:	08 95       	ret

00000cf0 <HID_Device_ProcessControlRequest>:
#define  __INCLUDE_FROM_HID_DRIVER
#define  __INCLUDE_FROM_HID_DEVICE_C
#include "HIDClassDevice.h"

void HID_Device_ProcessControlRequest(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
     cf0:	6f 92       	push	r6
     cf2:	7f 92       	push	r7
     cf4:	8f 92       	push	r8
     cf6:	9f 92       	push	r9
     cf8:	af 92       	push	r10
     cfa:	bf 92       	push	r11
     cfc:	cf 92       	push	r12
     cfe:	df 92       	push	r13
     d00:	ef 92       	push	r14
     d02:	ff 92       	push	r15
     d04:	0f 93       	push	r16
     d06:	1f 93       	push	r17
     d08:	cf 93       	push	r28
     d0a:	df 93       	push	r29
     d0c:	00 d0       	rcall	.+0      	; 0xd0e <HID_Device_ProcessControlRequest+0x1e>
     d0e:	0f 92       	push	r0
     d10:	cd b7       	in	r28, 0x3d	; 61
     d12:	de b7       	in	r29, 0x3e	; 62
     d14:	7c 01       	movw	r14, r24
				Endpoint_ClearStatusStage();
			}

			break;
	}
}
     d16:	6d b6       	in	r6, 0x3d	; 61
     d18:	7e b6       	in	r7, 0x3e	; 62
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     d1a:	80 91 e8 00 	lds	r24, 0x00E8
#define  __INCLUDE_FROM_HID_DEVICE_C
#include "HIDClassDevice.h"

void HID_Device_ProcessControlRequest(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
	if (!(Endpoint_IsSETUPReceived()))
     d1e:	83 ff       	sbrs	r24, 3
     d20:	03 c1       	rjmp	.+518    	; 0xf28 <HID_Device_ProcessControlRequest+0x238>
	  return;

	if (USB_ControlRequest.wIndex != HIDInterfaceInfo->Config.InterfaceNumber)
     d22:	f7 01       	movw	r30, r14
     d24:	80 81       	ld	r24, Z
     d26:	90 e0       	ldi	r25, 0x00	; 0
     d28:	20 91 31 01 	lds	r18, 0x0131
     d2c:	30 91 32 01 	lds	r19, 0x0132
     d30:	28 17       	cp	r18, r24
     d32:	39 07       	cpc	r19, r25
     d34:	09 f0       	breq	.+2      	; 0xd38 <HID_Device_ProcessControlRequest+0x48>
     d36:	f8 c0       	rjmp	.+496    	; 0xf28 <HID_Device_ProcessControlRequest+0x238>
	  return;

	switch (USB_ControlRequest.bRequest)
     d38:	80 91 2e 01 	lds	r24, 0x012E
     d3c:	83 30       	cpi	r24, 0x03	; 3
     d3e:	09 f4       	brne	.+2      	; 0xd42 <HID_Device_ProcessControlRequest+0x52>
     d40:	9a c0       	rjmp	.+308    	; 0xe76 <HID_Device_ProcessControlRequest+0x186>
     d42:	84 30       	cpi	r24, 0x04	; 4
     d44:	30 f4       	brcc	.+12     	; 0xd52 <HID_Device_ProcessControlRequest+0x62>
     d46:	81 30       	cpi	r24, 0x01	; 1
     d48:	71 f0       	breq	.+28     	; 0xd66 <HID_Device_ProcessControlRequest+0x76>
     d4a:	82 30       	cpi	r24, 0x02	; 2
     d4c:	09 f0       	breq	.+2      	; 0xd50 <HID_Device_ProcessControlRequest+0x60>
     d4e:	ec c0       	rjmp	.+472    	; 0xf28 <HID_Device_ProcessControlRequest+0x238>
     d50:	cf c0       	rjmp	.+414    	; 0xef0 <HID_Device_ProcessControlRequest+0x200>
     d52:	8a 30       	cpi	r24, 0x0A	; 10
     d54:	09 f4       	brne	.+2      	; 0xd58 <HID_Device_ProcessControlRequest+0x68>
     d56:	b4 c0       	rjmp	.+360    	; 0xec0 <HID_Device_ProcessControlRequest+0x1d0>
     d58:	8b 30       	cpi	r24, 0x0B	; 11
     d5a:	09 f4       	brne	.+2      	; 0xd5e <HID_Device_ProcessControlRequest+0x6e>
     d5c:	9d c0       	rjmp	.+314    	; 0xe98 <HID_Device_ProcessControlRequest+0x1a8>
     d5e:	89 30       	cpi	r24, 0x09	; 9
     d60:	09 f0       	breq	.+2      	; 0xd64 <HID_Device_ProcessControlRequest+0x74>
     d62:	e2 c0       	rjmp	.+452    	; 0xf28 <HID_Device_ProcessControlRequest+0x238>
     d64:	4b c0       	rjmp	.+150    	; 0xdfc <HID_Device_ProcessControlRequest+0x10c>
	{
		case HID_REQ_GetReport:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
     d66:	80 91 2d 01 	lds	r24, 0x012D
     d6a:	81 3a       	cpi	r24, 0xA1	; 161
     d6c:	09 f0       	breq	.+2      	; 0xd70 <HID_Device_ProcessControlRequest+0x80>
     d6e:	dc c0       	rjmp	.+440    	; 0xf28 <HID_Device_ProcessControlRequest+0x238>
     d70:	9d b6       	in	r9, 0x3d	; 61
     d72:	8e b6       	in	r8, 0x3e	; 62
			{
				uint16_t ReportSize = 0;
     d74:	1b 82       	std	Y+3, r1	; 0x03
     d76:	1a 82       	std	Y+2, r1	; 0x02
				uint8_t  ReportID   = (USB_ControlRequest.wValue & 0xFF);
     d78:	80 91 2f 01 	lds	r24, 0x012F
     d7c:	00 91 30 01 	lds	r16, 0x0130
     d80:	89 83       	std	Y+1, r24	; 0x01
				uint8_t  ReportType = (USB_ControlRequest.wValue >> 8) - 1;
				uint8_t  ReportData[HIDInterfaceInfo->Config.PrevReportINBufferSize];
     d82:	f7 01       	movw	r30, r14
     d84:	40 85       	ldd	r20, Z+8	; 0x08
     d86:	8d b7       	in	r24, 0x3d	; 61
     d88:	9e b7       	in	r25, 0x3e	; 62
     d8a:	84 1b       	sub	r24, r20
     d8c:	91 09       	sbc	r25, r1
     d8e:	0f b6       	in	r0, 0x3f	; 63
     d90:	f8 94       	cli
     d92:	9e bf       	out	0x3e, r25	; 62
     d94:	0f be       	out	0x3f, r0	; 63
     d96:	8d bf       	out	0x3d, r24	; 61
     d98:	cd b6       	in	r12, 0x3d	; 61
     d9a:	de b6       	in	r13, 0x3e	; 62
     d9c:	08 94       	sec
     d9e:	c1 1c       	adc	r12, r1
     da0:	d1 1c       	adc	r13, r1

				memset(ReportData, 0, sizeof(ReportData));
     da2:	bc 2c       	mov	r11, r12
     da4:	ad 2c       	mov	r10, r13
     da6:	c6 01       	movw	r24, r12
     da8:	60 e0       	ldi	r22, 0x00	; 0
     daa:	70 e0       	ldi	r23, 0x00	; 0
     dac:	50 e0       	ldi	r21, 0x00	; 0
     dae:	c8 d1       	rcall	.+912    	; 0x1140 <memset>
     db0:	40 2f       	mov	r20, r16
		case HID_REQ_GetReport:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
			{
				uint16_t ReportSize = 0;
				uint8_t  ReportID   = (USB_ControlRequest.wValue & 0xFF);
				uint8_t  ReportType = (USB_ControlRequest.wValue >> 8) - 1;
     db2:	41 50       	subi	r20, 0x01	; 1
     db4:	c7 01       	movw	r24, r14
				uint8_t  ReportData[HIDInterfaceInfo->Config.PrevReportINBufferSize];

				memset(ReportData, 0, sizeof(ReportData));

				CALLBACK_HID_Device_CreateHIDReport(HIDInterfaceInfo, &ReportID, ReportType, ReportData, &ReportSize);
     db6:	be 01       	movw	r22, r28
     db8:	6f 5f       	subi	r22, 0xFF	; 255
     dba:	7f 4f       	sbci	r23, 0xFF	; 255
     dbc:	96 01       	movw	r18, r12
     dbe:	8e 01       	movw	r16, r28
     dc0:	0e 5f       	subi	r16, 0xFE	; 254
     dc2:	1f 4f       	sbci	r17, 0xFF	; 255
     dc4:	3d da       	rcall	.-2950   	; 0x240 <CALLBACK_HID_Device_CreateHIDReport>
     dc6:	f7 01       	movw	r30, r14
     dc8:	86 81       	ldd	r24, Z+6	; 0x06

				if (HIDInterfaceInfo->Config.PrevReportINBuffer != NULL)
     dca:	97 81       	ldd	r25, Z+7	; 0x07
     dcc:	00 97       	sbiw	r24, 0x00	; 0
     dce:	21 f0       	breq	.+8      	; 0xdd8 <HID_Device_ProcessControlRequest+0xe8>
     dd0:	40 85       	ldd	r20, Z+8	; 0x08
     dd2:	b6 01       	movw	r22, r12
				{
					memcpy(HIDInterfaceInfo->Config.PrevReportINBuffer, ReportData,
     dd4:	50 e0       	ldi	r21, 0x00	; 0
     dd6:	ab d1       	rcall	.+854    	; 0x112e <memcpy>
     dd8:	10 92 e9 00 	sts	0x00E9, r1
     ddc:	80 91 e8 00 	lds	r24, 0x00E8
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     de0:	87 7f       	andi	r24, 0xF7	; 247
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     de2:	80 93 e8 00 	sts	0x00E8, r24
     de6:	6a 81       	ldd	r22, Y+2	; 0x02
     de8:	7b 81       	ldd	r23, Y+3	; 0x03
     dea:	8b 2d       	mov	r24, r11
				}

				Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

				Endpoint_ClearSETUP();
				Endpoint_Write_Control_Stream_LE(ReportData, ReportSize);
     dec:	9a 2d       	mov	r25, r10
     dee:	0e db       	rcall	.-2532   	; 0x40c <Endpoint_Write_Control_Stream_LE>
     df0:	80 91 e8 00 	lds	r24, 0x00E8
     df4:	8b 77       	andi	r24, 0x7B	; 123
     df6:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     dfa:	3a c0       	rjmp	.+116    	; 0xe70 <HID_Device_ProcessControlRequest+0x180>
     dfc:	80 91 2d 01 	lds	r24, 0x012D
     e00:	81 32       	cpi	r24, 0x21	; 33
     e02:	09 f0       	breq	.+2      	; 0xe06 <HID_Device_ProcessControlRequest+0x116>
				Endpoint_ClearOUT();
			}

			break;
		case HID_REQ_SetReport:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
     e04:	91 c0       	rjmp	.+290    	; 0xf28 <HID_Device_ProcessControlRequest+0x238>
     e06:	9d b6       	in	r9, 0x3d	; 61
     e08:	8e b6       	in	r8, 0x3e	; 62
     e0a:	00 91 33 01 	lds	r16, 0x0133
     e0e:	10 91 34 01 	lds	r17, 0x0134
			{
				uint16_t ReportSize = USB_ControlRequest.wLength;
     e12:	c0 90 2f 01 	lds	r12, 0x012F
     e16:	d0 90 30 01 	lds	r13, 0x0130
				uint8_t  ReportID   = (USB_ControlRequest.wValue & 0xFF);
     e1a:	8d b7       	in	r24, 0x3d	; 61
     e1c:	9e b7       	in	r25, 0x3e	; 62
     e1e:	80 1b       	sub	r24, r16
     e20:	91 0b       	sbc	r25, r17
				uint8_t  ReportType = (USB_ControlRequest.wValue >> 8) - 1;
				uint8_t  ReportData[ReportSize];
     e22:	0f b6       	in	r0, 0x3f	; 63
     e24:	f8 94       	cli
     e26:	9e bf       	out	0x3e, r25	; 62
     e28:	0f be       	out	0x3f, r0	; 63
     e2a:	8d bf       	out	0x3d, r24	; 61
     e2c:	ad b6       	in	r10, 0x3d	; 61
     e2e:	be b6       	in	r11, 0x3e	; 62
     e30:	08 94       	sec
     e32:	a1 1c       	adc	r10, r1
     e34:	b1 1c       	adc	r11, r1
     e36:	80 91 e8 00 	lds	r24, 0x00E8
     e3a:	87 7f       	andi	r24, 0xF7	; 247
     e3c:	80 93 e8 00 	sts	0x00E8, r24
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     e40:	c5 01       	movw	r24, r10
     e42:	b8 01       	movw	r22, r16
     e44:	3f db       	rcall	.-2434   	; 0x4c4 <Endpoint_Read_Control_Stream_LE>
     e46:	80 91 e8 00 	lds	r24, 0x00E8

				Endpoint_ClearSETUP();
				Endpoint_Read_Control_Stream_LE(ReportData, ReportSize);
     e4a:	8e 77       	andi	r24, 0x7E	; 126
     e4c:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     e50:	81 e0       	ldi	r24, 0x01	; 1
     e52:	90 e0       	ldi	r25, 0x00	; 0
     e54:	cc 20       	and	r12, r12
     e56:	11 f4       	brne	.+4      	; 0xe5c <HID_Device_ProcessControlRequest+0x16c>
     e58:	80 e0       	ldi	r24, 0x00	; 0
				Endpoint_ClearIN();

				CALLBACK_HID_Device_ProcessHIDReport(HIDInterfaceInfo, ReportID, ReportType,
     e5a:	90 e0       	ldi	r25, 0x00	; 0
     e5c:	4d 2d       	mov	r20, r13
     e5e:	41 50       	subi	r20, 0x01	; 1
     e60:	95 01       	movw	r18, r10
     e62:	28 0f       	add	r18, r24
     e64:	39 1f       	adc	r19, r25
		case HID_REQ_SetReport:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
			{
				uint16_t ReportSize = USB_ControlRequest.wLength;
				uint8_t  ReportID   = (USB_ControlRequest.wValue & 0xFF);
				uint8_t  ReportType = (USB_ControlRequest.wValue >> 8) - 1;
     e66:	08 1b       	sub	r16, r24
     e68:	19 0b       	sbc	r17, r25

				Endpoint_ClearSETUP();
				Endpoint_Read_Control_Stream_LE(ReportData, ReportSize);
				Endpoint_ClearIN();

				CALLBACK_HID_Device_ProcessHIDReport(HIDInterfaceInfo, ReportID, ReportType,
     e6a:	c7 01       	movw	r24, r14
     e6c:	6c 2d       	mov	r22, r12
     e6e:	35 da       	rcall	.-2966   	; 0x2da <CALLBACK_HID_Device_ProcessHIDReport>
     e70:	9d be       	out	0x3d, r9	; 61
     e72:	8e be       	out	0x3e, r8	; 62
     e74:	59 c0       	rjmp	.+178    	; 0xf28 <HID_Device_ProcessControlRequest+0x238>
     e76:	80 91 2d 01 	lds	r24, 0x012D
     e7a:	81 3a       	cpi	r24, 0xA1	; 161
     e7c:	09 f0       	breq	.+2      	; 0xe80 <HID_Device_ProcessControlRequest+0x190>
     e7e:	54 c0       	rjmp	.+168    	; 0xf28 <HID_Device_ProcessControlRequest+0x238>
     e80:	80 91 e8 00 	lds	r24, 0x00E8
				                                     &ReportData[ReportID ? 1 : 0], ReportSize - (ReportID ? 1 : 0));
			}

			break;
		case HID_REQ_GetProtocol:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
     e84:	87 7f       	andi	r24, 0xF7	; 247
     e86:	80 93 e8 00 	sts	0x00E8, r24
     e8a:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     e8e:	80 ff       	sbrs	r24, 0
     e90:	fc cf       	rjmp	.-8      	; 0xe8a <HID_Device_ProcessControlRequest+0x19a>
     e92:	f7 01       	movw	r30, r14
     e94:	81 85       	ldd	r24, Z+9	; 0x09
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     e96:	40 c0       	rjmp	.+128    	; 0xf18 <HID_Device_ProcessControlRequest+0x228>
     e98:	80 91 2d 01 	lds	r24, 0x012D
			{
				Endpoint_ClearSETUP();
				while (!(Endpoint_IsINReady()));
     e9c:	81 32       	cpi	r24, 0x21	; 33
				Endpoint_Write_8(HIDInterfaceInfo->State.UsingReportProtocol);
     e9e:	09 f0       	breq	.+2      	; 0xea2 <HID_Device_ProcessControlRequest+0x1b2>
     ea0:	43 c0       	rjmp	.+134    	; 0xf28 <HID_Device_ProcessControlRequest+0x238>
     ea2:	80 91 e8 00 	lds	r24, 0x00E8
				Endpoint_ClearStatusStage();
			}

			break;
		case HID_REQ_SetProtocol:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
     ea6:	87 7f       	andi	r24, 0xF7	; 247
     ea8:	80 93 e8 00 	sts	0x00E8, r24
     eac:	22 dc       	rcall	.-1980   	; 0x6f2 <Endpoint_ClearStatusStage>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     eae:	90 91 2f 01 	lds	r25, 0x012F
     eb2:	81 e0       	ldi	r24, 0x01	; 1
     eb4:	99 23       	and	r25, r25
     eb6:	09 f4       	brne	.+2      	; 0xeba <HID_Device_ProcessControlRequest+0x1ca>
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
     eb8:	80 e0       	ldi	r24, 0x00	; 0
     eba:	f7 01       	movw	r30, r14

				HIDInterfaceInfo->State.UsingReportProtocol = ((USB_ControlRequest.wValue & 0xFF) != 0x00);
     ebc:	81 87       	std	Z+9, r24	; 0x09
     ebe:	34 c0       	rjmp	.+104    	; 0xf28 <HID_Device_ProcessControlRequest+0x238>
     ec0:	80 91 2d 01 	lds	r24, 0x012D
     ec4:	81 32       	cpi	r24, 0x21	; 33
     ec6:	81 f5       	brne	.+96     	; 0xf28 <HID_Device_ProcessControlRequest+0x238>
     ec8:	80 91 e8 00 	lds	r24, 0x00E8
     ecc:	87 7f       	andi	r24, 0xF7	; 247
			}

			break;
		case HID_REQ_SetIdle:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
     ece:	80 93 e8 00 	sts	0x00E8, r24
     ed2:	0f dc       	rcall	.-2018   	; 0x6f2 <Endpoint_ClearStatusStage>
     ed4:	80 91 2f 01 	lds	r24, 0x012F
     ed8:	90 91 30 01 	lds	r25, 0x0130
     edc:	80 70       	andi	r24, 0x00	; 0
     ede:	36 e0       	ldi	r19, 0x06	; 6
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
     ee0:	96 95       	lsr	r25
     ee2:	87 95       	ror	r24

				HIDInterfaceInfo->State.IdleCount = ((USB_ControlRequest.wValue & 0xFF00) >> 6);
     ee4:	3a 95       	dec	r19
     ee6:	e1 f7       	brne	.-8      	; 0xee0 <HID_Device_ProcessControlRequest+0x1f0>
     ee8:	f7 01       	movw	r30, r14
     eea:	95 87       	std	Z+13, r25	; 0x0d
     eec:	84 87       	std	Z+12, r24	; 0x0c
     eee:	1c c0       	rjmp	.+56     	; 0xf28 <HID_Device_ProcessControlRequest+0x238>
     ef0:	80 91 2d 01 	lds	r24, 0x012D
     ef4:	81 3a       	cpi	r24, 0xA1	; 161
     ef6:	c1 f4       	brne	.+48     	; 0xf28 <HID_Device_ProcessControlRequest+0x238>
     ef8:	80 91 e8 00 	lds	r24, 0x00E8
     efc:	87 7f       	andi	r24, 0xF7	; 247
     efe:	80 93 e8 00 	sts	0x00E8, r24
			}

			break;
		case HID_REQ_GetIdle:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
     f02:	80 91 e8 00 	lds	r24, 0x00E8
     f06:	80 ff       	sbrs	r24, 0
     f08:	fc cf       	rjmp	.-8      	; 0xf02 <HID_Device_ProcessControlRequest+0x212>
     f0a:	f7 01       	movw	r30, r14
     f0c:	84 85       	ldd	r24, Z+12	; 0x0c
     f0e:	95 85       	ldd	r25, Z+13	; 0x0d
     f10:	96 95       	lsr	r25
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     f12:	87 95       	ror	r24
     f14:	96 95       	lsr	r25
			{
				Endpoint_ClearSETUP();
				while (!(Endpoint_IsINReady()));
     f16:	87 95       	ror	r24
     f18:	80 93 f1 00 	sts	0x00F1, r24
				Endpoint_Write_8(HIDInterfaceInfo->State.IdleCount >> 2);
     f1c:	80 91 e8 00 	lds	r24, 0x00E8
     f20:	8e 77       	andi	r24, 0x7E	; 126
     f22:	80 93 e8 00 	sts	0x00E8, r24
     f26:	e5 db       	rcall	.-2102   	; 0x6f2 <Endpoint_ClearStatusStage>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     f28:	0f b6       	in	r0, 0x3f	; 63
     f2a:	f8 94       	cli
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     f2c:	7e be       	out	0x3e, r7	; 62
     f2e:	0f be       	out	0x3f, r0	; 63
     f30:	6d be       	out	0x3d, r6	; 61
     f32:	0f 90       	pop	r0
     f34:	0f 90       	pop	r0
				Endpoint_ClearIN();
				Endpoint_ClearStatusStage();
     f36:	0f 90       	pop	r0
     f38:	df 91       	pop	r29
			}

			break;
	}
}
     f3a:	cf 91       	pop	r28
     f3c:	1f 91       	pop	r17
     f3e:	0f 91       	pop	r16
     f40:	ff 90       	pop	r15
     f42:	ef 90       	pop	r14
     f44:	df 90       	pop	r13
     f46:	cf 90       	pop	r12
     f48:	bf 90       	pop	r11
     f4a:	af 90       	pop	r10
     f4c:	9f 90       	pop	r9
     f4e:	8f 90       	pop	r8
     f50:	7f 90       	pop	r7
     f52:	6f 90       	pop	r6
     f54:	08 95       	ret

00000f56 <HID_Device_ConfigureEndpoints>:
     f56:	cf 93       	push	r28
     f58:	df 93       	push	r29
     f5a:	fc 01       	movw	r30, r24
     f5c:	09 96       	adiw	r24, 0x09	; 9
     f5e:	dc 01       	movw	r26, r24
     f60:	87 e0       	ldi	r24, 0x07	; 7
     f62:	ed 01       	movw	r28, r26
     f64:	19 92       	st	Y+, r1
     f66:	8a 95       	dec	r24

bool HID_Device_ConfigureEndpoints(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
	memset(&HIDInterfaceInfo->State, 0x00, sizeof(HIDInterfaceInfo->State));
     f68:	e9 f7       	brne	.-6      	; 0xf64 <HID_Device_ConfigureEndpoints+0xe>
	HIDInterfaceInfo->State.UsingReportProtocol = true;
     f6a:	81 e0       	ldi	r24, 0x01	; 1
     f6c:	81 87       	std	Z+9, r24	; 0x09
	HIDInterfaceInfo->State.IdleCount           = 500;
     f6e:	84 ef       	ldi	r24, 0xF4	; 244
     f70:	91 e0       	ldi	r25, 0x01	; 1
     f72:	95 87       	std	Z+13, r25	; 0x0d
     f74:	84 87       	std	Z+12, r24	; 0x0c

	HIDInterfaceInfo->Config.ReportINEndpoint.Type = EP_TYPE_INTERRUPT;
     f76:	83 e0       	ldi	r24, 0x03	; 3
     f78:	84 83       	std	Z+4, r24	; 0x04

	if (!(Endpoint_ConfigureEndpointTable(&HIDInterfaceInfo->Config.ReportINEndpoint, 1)))
     f7a:	cf 01       	movw	r24, r30
     f7c:	01 96       	adiw	r24, 0x01	; 1
     f7e:	61 e0       	ldi	r22, 0x01	; 1
     f80:	7c db       	rcall	.-2312   	; 0x67a <Endpoint_ConfigureEndpointTable>
     f82:	df 91       	pop	r29
	  return false;	
	
	return true;
}
     f84:	cf 91       	pop	r28
     f86:	08 95       	ret

00000f88 <HID_Device_USBTask>:
     f88:	4f 92       	push	r4

void HID_Device_USBTask(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
     f8a:	5f 92       	push	r5
     f8c:	6f 92       	push	r6
     f8e:	7f 92       	push	r7
     f90:	8f 92       	push	r8
     f92:	9f 92       	push	r9
     f94:	af 92       	push	r10
     f96:	bf 92       	push	r11
     f98:	cf 92       	push	r12
     f9a:	df 92       	push	r13
     f9c:	ef 92       	push	r14
     f9e:	ff 92       	push	r15
     fa0:	0f 93       	push	r16
     fa2:	1f 93       	push	r17
     fa4:	cf 93       	push	r28
     fa6:	df 93       	push	r29
     fa8:	00 d0       	rcall	.+0      	; 0xfaa <HID_Device_USBTask+0x22>
     faa:	0f 92       	push	r0
     fac:	cd b7       	in	r28, 0x3d	; 61
     fae:	de b7       	in	r29, 0x3e	; 62
     fb0:	7c 01       	movw	r14, r24
			Endpoint_ClearIN();
		}
		
		HIDInterfaceInfo->State.PrevFrameNum = USB_Device_GetFrameNumber();
	}
}
     fb2:	4d b6       	in	r4, 0x3d	; 61
     fb4:	5e b6       	in	r5, 0x3e	; 62
	return true;
}

void HID_Device_USBTask(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
	if (USB_DeviceState != DEVICE_STATE_Configured)
     fb6:	80 91 2c 01 	lds	r24, 0x012C
     fba:	84 30       	cpi	r24, 0x04	; 4
     fbc:	09 f0       	breq	.+2      	; 0xfc0 <HID_Device_USBTask+0x38>
     fbe:	91 c0       	rjmp	.+290    	; 0x10e2 <HID_Device_USBTask+0x15a>
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
     fc0:	80 91 e4 00 	lds	r24, 0x00E4
     fc4:	90 91 e5 00 	lds	r25, 0x00E5
	  return;

	if (HIDInterfaceInfo->State.PrevFrameNum == USB_Device_GetFrameNumber())
     fc8:	f7 01       	movw	r30, r14
     fca:	22 85       	ldd	r18, Z+10	; 0x0a
     fcc:	33 85       	ldd	r19, Z+11	; 0x0b
     fce:	28 17       	cp	r18, r24
     fd0:	39 07       	cpc	r19, r25
     fd2:	09 f4       	brne	.+2      	; 0xfd6 <HID_Device_USBTask+0x4e>
     fd4:	86 c0       	rjmp	.+268    	; 0x10e2 <HID_Device_USBTask+0x15a>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     fd6:	81 81       	ldd	r24, Z+1	; 0x01
     fd8:	8f 70       	andi	r24, 0x0F	; 15
     fda:	80 93 e9 00 	sts	0x00E9, r24
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
     fde:	80 91 e8 00 	lds	r24, 0x00E8
	  return;
	  
	Endpoint_SelectEndpoint(HIDInterfaceInfo->Config.ReportINEndpoint.Address);

	if (Endpoint_IsReadWriteAllowed())
     fe2:	85 ff       	sbrs	r24, 5
     fe4:	7e c0       	rjmp	.+252    	; 0x10e2 <HID_Device_USBTask+0x15a>
     fe6:	7d b6       	in	r7, 0x3d	; 61
     fe8:	6e b6       	in	r6, 0x3e	; 62
	{
		uint8_t  ReportINData[HIDInterfaceInfo->Config.PrevReportINBufferSize];
     fea:	40 85       	ldd	r20, Z+8	; 0x08
     fec:	8d b7       	in	r24, 0x3d	; 61
     fee:	9e b7       	in	r25, 0x3e	; 62
     ff0:	84 1b       	sub	r24, r20
     ff2:	91 09       	sbc	r25, r1
     ff4:	0f b6       	in	r0, 0x3f	; 63
     ff6:	f8 94       	cli
     ff8:	9e bf       	out	0x3e, r25	; 62
     ffa:	0f be       	out	0x3f, r0	; 63
     ffc:	8d bf       	out	0x3d, r24	; 61
     ffe:	0d b7       	in	r16, 0x3d	; 61
    1000:	1e b7       	in	r17, 0x3e	; 62
    1002:	0f 5f       	subi	r16, 0xFF	; 255
    1004:	1f 4f       	sbci	r17, 0xFF	; 255
		uint8_t  ReportID     = 0;
    1006:	19 82       	std	Y+1, r1	; 0x01
		uint16_t ReportINSize = 0;
    1008:	1b 82       	std	Y+3, r1	; 0x03
    100a:	1a 82       	std	Y+2, r1	; 0x02

		memset(ReportINData, 0, sizeof(ReportINData));
    100c:	b0 2e       	mov	r11, r16
    100e:	a1 2e       	mov	r10, r17
    1010:	c8 01       	movw	r24, r16
    1012:	60 e0       	ldi	r22, 0x00	; 0
    1014:	70 e0       	ldi	r23, 0x00	; 0
    1016:	50 e0       	ldi	r21, 0x00	; 0
    1018:	93 d0       	rcall	.+294    	; 0x1140 <memset>
    101a:	c7 01       	movw	r24, r14

		bool ForceSend         = CALLBACK_HID_Device_CreateHIDReport(HIDInterfaceInfo, &ReportID, HID_REPORT_ITEM_In,
    101c:	be 01       	movw	r22, r28
    101e:	6f 5f       	subi	r22, 0xFF	; 255
    1020:	7f 4f       	sbci	r23, 0xFF	; 255
    1022:	40 e0       	ldi	r20, 0x00	; 0
    1024:	98 01       	movw	r18, r16
    1026:	8e 01       	movw	r16, r28
    1028:	0e 5f       	subi	r16, 0xFE	; 254
    102a:	1f 4f       	sbci	r17, 0xFF	; 255
    102c:	09 d9       	rcall	.-3566   	; 0x240 <CALLBACK_HID_Device_CreateHIDReport>
    102e:	18 2f       	mov	r17, r24
    1030:	f7 01       	movw	r30, r14
    1032:	84 85       	ldd	r24, Z+12	; 0x0c
		                                                             ReportINData, &ReportINSize);
		bool StatesChanged     = false;
		bool IdlePeriodElapsed = (HIDInterfaceInfo->State.IdleCount && !(HIDInterfaceInfo->State.IdleMSRemaining));
    1034:	95 85       	ldd	r25, Z+13	; 0x0d
    1036:	00 97       	sbiw	r24, 0x00	; 0
    1038:	59 f0       	breq	.+22     	; 0x1050 <HID_Device_USBTask+0xc8>
    103a:	81 e0       	ldi	r24, 0x01	; 1
    103c:	90 e0       	ldi	r25, 0x00	; 0
	  return false;	
	
	return true;
}

void HID_Device_USBTask(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
    103e:	26 85       	ldd	r18, Z+14	; 0x0e
    1040:	37 85       	ldd	r19, Z+15	; 0x0f
    1042:	21 15       	cp	r18, r1
    1044:	31 05       	cpc	r19, r1
    1046:	11 f0       	breq	.+4      	; 0x104c <HID_Device_USBTask+0xc4>
    1048:	80 e0       	ldi	r24, 0x00	; 0
    104a:	90 e0       	ldi	r25, 0x00	; 0
    104c:	4c 01       	movw	r8, r24
    104e:	02 c0       	rjmp	.+4      	; 0x1054 <HID_Device_USBTask+0xcc>
		memset(ReportINData, 0, sizeof(ReportINData));

		bool ForceSend         = CALLBACK_HID_Device_CreateHIDReport(HIDInterfaceInfo, &ReportID, HID_REPORT_ITEM_In,
		                                                             ReportINData, &ReportINSize);
		bool StatesChanged     = false;
		bool IdlePeriodElapsed = (HIDInterfaceInfo->State.IdleCount && !(HIDInterfaceInfo->State.IdleMSRemaining));
    1050:	88 24       	eor	r8, r8
    1052:	99 24       	eor	r9, r9
    1054:	f7 01       	movw	r30, r14
    1056:	c6 80       	ldd	r12, Z+6	; 0x06

		if (HIDInterfaceInfo->Config.PrevReportINBuffer != NULL)
    1058:	d7 80       	ldd	r13, Z+7	; 0x07
    105a:	c1 14       	cp	r12, r1
    105c:	d1 04       	cpc	r13, r1
    105e:	91 f0       	breq	.+36     	; 0x1084 <HID_Device_USBTask+0xfc>
    1060:	4a 81       	ldd	r20, Y+2	; 0x02
    1062:	5b 81       	ldd	r21, Y+3	; 0x03
		{
			StatesChanged = (memcmp(ReportINData, HIDInterfaceInfo->Config.PrevReportINBuffer, ReportINSize) != 0);
    1064:	8b 2d       	mov	r24, r11
    1066:	9a 2d       	mov	r25, r10
    1068:	b6 01       	movw	r22, r12
    106a:	54 d0       	rcall	.+168    	; 0x1114 <memcmp>
    106c:	01 e0       	ldi	r16, 0x01	; 1
    106e:	00 97       	sbiw	r24, 0x00	; 0
    1070:	09 f4       	brne	.+2      	; 0x1074 <HID_Device_USBTask+0xec>
    1072:	00 e0       	ldi	r16, 0x00	; 0
    1074:	f7 01       	movw	r30, r14
    1076:	40 85       	ldd	r20, Z+8	; 0x08
    1078:	c6 01       	movw	r24, r12
			memcpy(HIDInterfaceInfo->Config.PrevReportINBuffer, ReportINData, HIDInterfaceInfo->Config.PrevReportINBufferSize);
    107a:	6b 2d       	mov	r22, r11
    107c:	7a 2d       	mov	r23, r10
    107e:	50 e0       	ldi	r21, 0x00	; 0
    1080:	56 d0       	rcall	.+172    	; 0x112e <memcpy>
    1082:	01 c0       	rjmp	.+2      	; 0x1086 <HID_Device_USBTask+0xfe>
    1084:	00 e0       	ldi	r16, 0x00	; 0
    1086:	8a 81       	ldd	r24, Y+2	; 0x02
    1088:	9b 81       	ldd	r25, Y+3	; 0x03
    108a:	00 97       	sbiw	r24, 0x00	; 0

		memset(ReportINData, 0, sizeof(ReportINData));

		bool ForceSend         = CALLBACK_HID_Device_CreateHIDReport(HIDInterfaceInfo, &ReportID, HID_REPORT_ITEM_In,
		                                                             ReportINData, &ReportINSize);
		bool StatesChanged     = false;
    108c:	09 f1       	breq	.+66     	; 0x10d0 <HID_Device_USBTask+0x148>
		{
			StatesChanged = (memcmp(ReportINData, HIDInterfaceInfo->Config.PrevReportINBuffer, ReportINSize) != 0);
			memcpy(HIDInterfaceInfo->Config.PrevReportINBuffer, ReportINData, HIDInterfaceInfo->Config.PrevReportINBufferSize);
		}

		if (ReportINSize && (ForceSend || StatesChanged || IdlePeriodElapsed))
    108e:	11 23       	and	r17, r17
    1090:	29 f4       	brne	.+10     	; 0x109c <HID_Device_USBTask+0x114>
    1092:	00 23       	and	r16, r16
    1094:	19 f4       	brne	.+6      	; 0x109c <HID_Device_USBTask+0x114>
    1096:	81 14       	cp	r8, r1
    1098:	91 04       	cpc	r9, r1
    109a:	d1 f0       	breq	.+52     	; 0x10d0 <HID_Device_USBTask+0x148>
    109c:	f7 01       	movw	r30, r14
    109e:	84 85       	ldd	r24, Z+12	; 0x0c
    10a0:	95 85       	ldd	r25, Z+13	; 0x0d
    10a2:	97 87       	std	Z+15, r25	; 0x0f
		{
			HIDInterfaceInfo->State.IdleMSRemaining = HIDInterfaceInfo->State.IdleCount;
    10a4:	86 87       	std	Z+14, r24	; 0x0e
    10a6:	81 81       	ldd	r24, Z+1	; 0x01
    10a8:	8f 70       	andi	r24, 0x0F	; 15
    10aa:	80 93 e9 00 	sts	0x00E9, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    10ae:	89 81       	ldd	r24, Y+1	; 0x01
    10b0:	88 23       	and	r24, r24
    10b2:	11 f0       	breq	.+4      	; 0x10b8 <HID_Device_USBTask+0x130>
    10b4:	80 93 f1 00 	sts	0x00F1, r24

			Endpoint_SelectEndpoint(HIDInterfaceInfo->Config.ReportINEndpoint.Address);

			if (ReportID)
    10b8:	6a 81       	ldd	r22, Y+2	; 0x02
    10ba:	7b 81       	ldd	r23, Y+3	; 0x03
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    10bc:	8b 2d       	mov	r24, r11
    10be:	9a 2d       	mov	r25, r10
			  Endpoint_Write_8(ReportID);

			Endpoint_Write_Stream_LE(ReportINData, ReportINSize, NULL);
    10c0:	40 e0       	ldi	r20, 0x00	; 0
    10c2:	50 e0       	ldi	r21, 0x00	; 0
    10c4:	53 d9       	rcall	.-3418   	; 0x36c <Endpoint_Write_Stream_LE>
    10c6:	80 91 e8 00 	lds	r24, 0x00E8
    10ca:	8e 77       	andi	r24, 0x7E	; 126
    10cc:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    10d0:	80 91 e4 00 	lds	r24, 0x00E4
    10d4:	90 91 e5 00 	lds	r25, 0x00E5
    10d8:	f7 01       	movw	r30, r14
    10da:	93 87       	std	Z+11, r25	; 0x0b
    10dc:	82 87       	std	Z+10, r24	; 0x0a
    10de:	7d be       	out	0x3d, r7	; 61
    10e0:	6e be       	out	0x3e, r6	; 62

			Endpoint_ClearIN();
		}
		
		HIDInterfaceInfo->State.PrevFrameNum = USB_Device_GetFrameNumber();
    10e2:	0f b6       	in	r0, 0x3f	; 63
    10e4:	f8 94       	cli
    10e6:	5e be       	out	0x3e, r5	; 62
    10e8:	0f be       	out	0x3f, r0	; 63
    10ea:	4d be       	out	0x3d, r4	; 61
	}
}
    10ec:	0f 90       	pop	r0
    10ee:	0f 90       	pop	r0
    10f0:	0f 90       	pop	r0
    10f2:	df 91       	pop	r29
    10f4:	cf 91       	pop	r28
    10f6:	1f 91       	pop	r17
    10f8:	0f 91       	pop	r16
    10fa:	ff 90       	pop	r15
    10fc:	ef 90       	pop	r14
    10fe:	df 90       	pop	r13
    1100:	cf 90       	pop	r12
    1102:	bf 90       	pop	r11
    1104:	af 90       	pop	r10
    1106:	9f 90       	pop	r9
    1108:	8f 90       	pop	r8
    110a:	7f 90       	pop	r7
    110c:	6f 90       	pop	r6
    110e:	5f 90       	pop	r5
    1110:	4f 90       	pop	r4
    1112:	08 95       	ret

00001114 <memcmp>:
    1114:	fb 01       	movw	r30, r22
    1116:	dc 01       	movw	r26, r24
    1118:	04 c0       	rjmp	.+8      	; 0x1122 <memcmp+0xe>
    111a:	8d 91       	ld	r24, X+
    111c:	01 90       	ld	r0, Z+
    111e:	80 19       	sub	r24, r0
    1120:	21 f4       	brne	.+8      	; 0x112a <memcmp+0x16>
    1122:	41 50       	subi	r20, 0x01	; 1
    1124:	50 40       	sbci	r21, 0x00	; 0
    1126:	c8 f7       	brcc	.-14     	; 0x111a <memcmp+0x6>
    1128:	88 1b       	sub	r24, r24
    112a:	99 0b       	sbc	r25, r25
    112c:	08 95       	ret

0000112e <memcpy>:
    112e:	fb 01       	movw	r30, r22
    1130:	dc 01       	movw	r26, r24
    1132:	02 c0       	rjmp	.+4      	; 0x1138 <memcpy+0xa>
    1134:	01 90       	ld	r0, Z+
    1136:	0d 92       	st	X+, r0
    1138:	41 50       	subi	r20, 0x01	; 1
    113a:	50 40       	sbci	r21, 0x00	; 0
    113c:	d8 f7       	brcc	.-10     	; 0x1134 <memcpy+0x6>
    113e:	08 95       	ret

00001140 <memset>:
    1140:	dc 01       	movw	r26, r24
    1142:	01 c0       	rjmp	.+2      	; 0x1146 <memset+0x6>
    1144:	6d 93       	st	X+, r22
    1146:	41 50       	subi	r20, 0x01	; 1
    1148:	50 40       	sbci	r21, 0x00	; 0
    114a:	e0 f7       	brcc	.-8      	; 0x1144 <memset+0x4>
    114c:	08 95       	ret

0000114e <_exit>:
    114e:	f8 94       	cli

00001150 <__stop_program>:
    1150:	ff cf       	rjmp	.-2      	; 0x1150 <__stop_program>
