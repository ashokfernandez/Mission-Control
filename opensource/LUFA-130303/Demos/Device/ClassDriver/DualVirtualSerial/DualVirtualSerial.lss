
DualVirtualSerial.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000098  00800100  00000fe4  00001078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000fe4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000e  00800198  00800198  00001110  2**0
                  ALLOC
  3 .stab         00000a98  00000000  00000000  00001110  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000002aa  00000000  00000000  00001ba8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000004e8  00000000  00000000  00001e58  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000872b  00000000  00000000  00002340  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002125  00000000  00000000  0000aa6b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00003eae  00000000  00000000  0000cb90  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000dd0  00000000  00000000  00010a40  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00003be6  00000000  00000000  00011810  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000050f9  00000000  00000000  000153f6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000006a8  00000000  00000000  0001a4ef  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	b9 c0       	rjmp	.+370    	; 0x174 <__ctors_end>
   2:	00 00       	nop
   4:	d5 c0       	rjmp	.+426    	; 0x1b0 <__bad_interrupt>
   6:	00 00       	nop
   8:	d3 c0       	rjmp	.+422    	; 0x1b0 <__bad_interrupt>
   a:	00 00       	nop
   c:	d1 c0       	rjmp	.+418    	; 0x1b0 <__bad_interrupt>
   e:	00 00       	nop
  10:	cf c0       	rjmp	.+414    	; 0x1b0 <__bad_interrupt>
  12:	00 00       	nop
  14:	cd c0       	rjmp	.+410    	; 0x1b0 <__bad_interrupt>
  16:	00 00       	nop
  18:	cb c0       	rjmp	.+406    	; 0x1b0 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	c9 c0       	rjmp	.+402    	; 0x1b0 <__bad_interrupt>
  1e:	00 00       	nop
  20:	c7 c0       	rjmp	.+398    	; 0x1b0 <__bad_interrupt>
  22:	00 00       	nop
  24:	c5 c0       	rjmp	.+394    	; 0x1b0 <__bad_interrupt>
  26:	00 00       	nop
  28:	b4 c3       	rjmp	.+1896   	; 0x792 <__vector_10>
  2a:	00 00       	nop
  2c:	7f c4       	rjmp	.+2302   	; 0x92c <__vector_11>
  2e:	00 00       	nop
  30:	bf c0       	rjmp	.+382    	; 0x1b0 <__bad_interrupt>
  32:	00 00       	nop
  34:	bd c0       	rjmp	.+378    	; 0x1b0 <__bad_interrupt>
  36:	00 00       	nop
  38:	bb c0       	rjmp	.+374    	; 0x1b0 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	b9 c0       	rjmp	.+370    	; 0x1b0 <__bad_interrupt>
  3e:	00 00       	nop
  40:	b7 c0       	rjmp	.+366    	; 0x1b0 <__bad_interrupt>
  42:	00 00       	nop
  44:	b5 c0       	rjmp	.+362    	; 0x1b0 <__bad_interrupt>
  46:	00 00       	nop
  48:	b3 c0       	rjmp	.+358    	; 0x1b0 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	b1 c0       	rjmp	.+354    	; 0x1b0 <__bad_interrupt>
  4e:	00 00       	nop
  50:	af c0       	rjmp	.+350    	; 0x1b0 <__bad_interrupt>
  52:	00 00       	nop
  54:	ad c0       	rjmp	.+346    	; 0x1b0 <__bad_interrupt>
  56:	00 00       	nop
  58:	ab c0       	rjmp	.+342    	; 0x1b0 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	a9 c0       	rjmp	.+338    	; 0x1b0 <__bad_interrupt>
  5e:	00 00       	nop
  60:	a7 c0       	rjmp	.+334    	; 0x1b0 <__bad_interrupt>
  62:	00 00       	nop
  64:	a5 c0       	rjmp	.+330    	; 0x1b0 <__bad_interrupt>
  66:	00 00       	nop
  68:	a3 c0       	rjmp	.+326    	; 0x1b0 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	a1 c0       	rjmp	.+322    	; 0x1b0 <__bad_interrupt>
  6e:	00 00       	nop
  70:	9f c0       	rjmp	.+318    	; 0x1b0 <__bad_interrupt>
  72:	00 00       	nop
  74:	9d c0       	rjmp	.+314    	; 0x1b0 <__bad_interrupt>
  76:	00 00       	nop
  78:	9b c0       	rjmp	.+310    	; 0x1b0 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	99 c0       	rjmp	.+306    	; 0x1b0 <__bad_interrupt>
  7e:	00 00       	nop
  80:	97 c0       	rjmp	.+302    	; 0x1b0 <__bad_interrupt>
  82:	00 00       	nop
  84:	95 c0       	rjmp	.+298    	; 0x1b0 <__bad_interrupt>
  86:	00 00       	nop
  88:	93 c0       	rjmp	.+294    	; 0x1b0 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	91 c0       	rjmp	.+290    	; 0x1b0 <__bad_interrupt>
  8e:	00 00       	nop
  90:	8f c0       	rjmp	.+286    	; 0x1b0 <__bad_interrupt>
  92:	00 00       	nop
  94:	8d c0       	rjmp	.+282    	; 0x1b0 <__bad_interrupt>
  96:	00 00       	nop

00000098 <ProductString>:
  98:	1c 03 4c 00 55 00 46 00 41 00 20 00 44 00 75 00     ..L.U.F.A. .D.u.
  a8:	61 00 6c 00 20 00 43 00 44 00 43 00 20 00 44 00     a.l. .C.D.C. .D.
  b8:	65 00 6d 00 6f 00 00 00                             e.m.o...

000000c0 <ManufacturerString>:
  c0:	18 03 44 00 65 00 61 00 6e 00 20 00 43 00 61 00     ..D.e.a.n. .C.a.
  d0:	6d 00 65 00 72 00 61 00 00 00                       m.e.r.a...

000000da <LanguageString>:
  da:	04 03 09 04                                         ....

000000de <ConfigurationDescriptor>:
  de:	09 02 83 00 04 01 00 c0 32 08 0b 00 02 02 02 01     ........2.......
  ee:	00 09 04 00 00 01 02 02 01 00 05 24 00 10 01 04     ...........$....
  fe:	24 02 06 05 24 06 00 01 07 05 83 03 08 00 ff 09     $...$...........
 10e:	04 01 00 02 0a 00 00 00 07 05 02 02 10 00 05 07     ................
 11e:	05 81 02 10 00 05 08 0b 02 02 02 02 01 00 09 04     ................
 12e:	02 00 01 02 02 01 00 05 24 00 10 01 04 24 02 06     ........$....$..
 13e:	05 24 06 02 03 07 05 86 03 08 00 ff 09 04 03 00     .$..............
 14e:	02 0a 00 00 00 07 05 05 02 10 00 05 07 05 84 02     ................
 15e:	10 00 05                                            ...

00000161 <DeviceDescriptor>:
 161:	12 01 10 01 ef 02 01 08 eb 03 4e 20 01 00 01 02     ..........N ....
 171:	dc 01 00                                            ...

00000174 <__ctors_end>:
 174:	11 24       	eor	r1, r1
 176:	1f be       	out	0x3f, r1	; 63
 178:	cf ef       	ldi	r28, 0xFF	; 255
 17a:	d0 e2       	ldi	r29, 0x20	; 32
 17c:	de bf       	out	0x3e, r29	; 62
 17e:	cd bf       	out	0x3d, r28	; 61

00000180 <__do_copy_data>:
 180:	11 e0       	ldi	r17, 0x01	; 1
 182:	a0 e0       	ldi	r26, 0x00	; 0
 184:	b1 e0       	ldi	r27, 0x01	; 1
 186:	e4 ee       	ldi	r30, 0xE4	; 228
 188:	ff e0       	ldi	r31, 0x0F	; 15
 18a:	00 e0       	ldi	r16, 0x00	; 0
 18c:	0b bf       	out	0x3b, r16	; 59
 18e:	02 c0       	rjmp	.+4      	; 0x194 <__do_copy_data+0x14>
 190:	07 90       	elpm	r0, Z+
 192:	0d 92       	st	X+, r0
 194:	a8 39       	cpi	r26, 0x98	; 152
 196:	b1 07       	cpc	r27, r17
 198:	d9 f7       	brne	.-10     	; 0x190 <__do_copy_data+0x10>
 19a:	1b be       	out	0x3b, r1	; 59

0000019c <__do_clear_bss>:
 19c:	11 e0       	ldi	r17, 0x01	; 1
 19e:	a8 e9       	ldi	r26, 0x98	; 152
 1a0:	b1 e0       	ldi	r27, 0x01	; 1
 1a2:	01 c0       	rjmp	.+2      	; 0x1a6 <.do_clear_bss_start>

000001a4 <.do_clear_bss_loop>:
 1a4:	1d 92       	st	X+, r1

000001a6 <.do_clear_bss_start>:
 1a6:	a6 3a       	cpi	r26, 0xA6	; 166
 1a8:	b1 07       	cpc	r27, r17
 1aa:	e1 f7       	brne	.-8      	; 0x1a4 <.do_clear_bss_loop>
 1ac:	5f d0       	rcall	.+190    	; 0x26c <main>
 1ae:	18 c7       	rjmp	.+3632   	; 0xfe0 <_exit>

000001b0 <__bad_interrupt>:
 1b0:	27 cf       	rjmp	.-434    	; 0x0 <__vectors>

000001b2 <LEDs_SetAllLEDs>:
				PORTD &= ~LEDMask;
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
			{
				PORTD = ((PORTD & ~LEDS_ALL_LEDS) | LEDMask);
 1b2:	9b b1       	in	r25, 0x0b	; 11
 1b4:	9f 70       	andi	r25, 0x0F	; 15
 1b6:	98 2b       	or	r25, r24
 1b8:	9b b9       	out	0x0b, r25	; 11
			}
 1ba:	08 95       	ret

000001bc <SetupHardware>:

/** Configures the board hardware and chip peripherals for the demo's functionality. */
void SetupHardware(void)
{
	/* Disable watchdog if enabled by bootloader/fuses */
	MCUSR &= ~(1 << WDRF);
 1bc:	84 b7       	in	r24, 0x34	; 52
 1be:	87 7f       	andi	r24, 0xF7	; 247
 1c0:	84 bf       	out	0x34, r24	; 52
	wdt_disable();
 1c2:	88 e1       	ldi	r24, 0x18	; 24
 1c4:	0f b6       	in	r0, 0x3f	; 63
 1c6:	f8 94       	cli
 1c8:	80 93 60 00 	sts	0x0060, r24
 1cc:	10 92 60 00 	sts	0x0060, r1
 1d0:	0f be       	out	0x3f, r0	; 63
The type of x is clock_div_t.
*/
void clock_prescale_set(clock_div_t __x)
{
    uint8_t __tmp = _BV(CLKPCE);
    __asm__ __volatile__ (
 1d2:	90 e0       	ldi	r25, 0x00	; 0
 1d4:	80 e8       	ldi	r24, 0x80	; 128
 1d6:	0f b6       	in	r0, 0x3f	; 63
 1d8:	f8 94       	cli
 1da:	80 93 61 00 	sts	0x0061, r24
 1de:	90 93 61 00 	sts	0x0061, r25
 1e2:	0f be       	out	0x3f, r0	; 63

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void Joystick_Init(void)
			{
				DDRB  &= ~JOY_BMASK;
 1e4:	84 b1       	in	r24, 0x04	; 4
 1e6:	8f 71       	andi	r24, 0x1F	; 31
 1e8:	84 b9       	out	0x04, r24	; 4
				DDRE  &= ~JOY_EMASK;
 1ea:	8d b1       	in	r24, 0x0d	; 13
 1ec:	8f 7c       	andi	r24, 0xCF	; 207
 1ee:	8d b9       	out	0x0d, r24	; 13

				PORTB |=  JOY_BMASK;
 1f0:	85 b1       	in	r24, 0x05	; 5
 1f2:	80 6e       	ori	r24, 0xE0	; 224
 1f4:	85 b9       	out	0x05, r24	; 5
				PORTE |=  JOY_EMASK;
 1f6:	8e b1       	in	r24, 0x0e	; 14
 1f8:	80 63       	ori	r24, 0x30	; 48
 1fa:	8e b9       	out	0x0e, r24	; 14

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void LEDs_Init(void)
			{
				DDRD  |=  LEDS_ALL_LEDS;
 1fc:	8a b1       	in	r24, 0x0a	; 10
 1fe:	80 6f       	ori	r24, 0xF0	; 240
 200:	8a b9       	out	0x0a, r24	; 10
				PORTD &= ~LEDS_ALL_LEDS;
 202:	8b b1       	in	r24, 0x0b	; 11
 204:	8f 70       	andi	r24, 0x0F	; 15
 206:	8b b9       	out	0x0b, r24	; 11
	clock_prescale_set(clock_div_1);

	/* Hardware Initialization */
	Joystick_Init();
	LEDs_Init();
	USB_Init();
 208:	a9 c2       	rjmp	.+1362   	; 0x75c <USB_Init>

0000020a <CheckJoystickMovement>:
 20a:	23 b1       	in	r18, 0x03	; 3
}
 20c:	8c b1       	in	r24, 0x0c	; 12
			}

			static inline uint8_t Joystick_GetStatus(void) ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t Joystick_GetStatus(void)
			{
				return (((uint8_t)~PINB & JOY_BMASK) | (((uint8_t)~PINE & JOY_EMASK) >> JOY_PORTE_MASK_SHIFT));
 20e:	80 95       	com	r24
 210:	90 e0       	ldi	r25, 0x00	; 0
 212:	80 73       	andi	r24, 0x30	; 48
 214:	90 70       	andi	r25, 0x00	; 0
 216:	95 95       	asr	r25
 218:	87 95       	ror	r24
 21a:	20 95       	com	r18
 21c:	20 7e       	andi	r18, 0xE0	; 224
 21e:	28 2b       	or	r18, r24
{
	uint8_t     JoyStatus_LCL = Joystick_GetStatus();
	char*       ReportString  = NULL;
	static bool ActionSent = false;

	if (JoyStatus_LCL & JOY_UP)
 220:	27 fd       	sbrc	r18, 7
 222:	0b c0       	rjmp	.+22     	; 0x23a <CheckJoystickMovement+0x30>
	  ReportString = "Joystick Up\r\n";
	else if (JoyStatus_LCL & JOY_DOWN)
 224:	24 fd       	sbrc	r18, 4
 226:	0c c0       	rjmp	.+24     	; 0x240 <CheckJoystickMovement+0x36>
	  ReportString = "Joystick Down\r\n";
	else if (JoyStatus_LCL & JOY_LEFT)
 228:	26 fd       	sbrc	r18, 6
 22a:	0d c0       	rjmp	.+26     	; 0x246 <CheckJoystickMovement+0x3c>
	  ReportString = "Joystick Left\r\n";
	else if (JoyStatus_LCL & JOY_RIGHT)
 22c:	23 fd       	sbrc	r18, 3
 22e:	0e c0       	rjmp	.+28     	; 0x24c <CheckJoystickMovement+0x42>
	  ReportString = "Joystick Right\r\n";
	else if (JoyStatus_LCL & JOY_PRESS)
 230:	25 fd       	sbrc	r18, 5
 232:	0f c0       	rjmp	.+30     	; 0x252 <CheckJoystickMovement+0x48>
	  ReportString = "Joystick Pressed\r\n";
	else
	  ActionSent = false;
 234:	10 92 98 01 	sts	0x0198, r1
 238:	08 95       	ret
	uint8_t     JoyStatus_LCL = Joystick_GetStatus();
	char*       ReportString  = NULL;
	static bool ActionSent = false;

	if (JoyStatus_LCL & JOY_UP)
	  ReportString = "Joystick Up\r\n";
 23a:	60 e0       	ldi	r22, 0x00	; 0
 23c:	71 e0       	ldi	r23, 0x01	; 1
 23e:	0b c0       	rjmp	.+22     	; 0x256 <CheckJoystickMovement+0x4c>
	else if (JoyStatus_LCL & JOY_DOWN)
	  ReportString = "Joystick Down\r\n";
 240:	6e e0       	ldi	r22, 0x0E	; 14
 242:	71 e0       	ldi	r23, 0x01	; 1
 244:	08 c0       	rjmp	.+16     	; 0x256 <CheckJoystickMovement+0x4c>
	else if (JoyStatus_LCL & JOY_LEFT)
	  ReportString = "Joystick Left\r\n";
 246:	6e e1       	ldi	r22, 0x1E	; 30
 248:	71 e0       	ldi	r23, 0x01	; 1
 24a:	05 c0       	rjmp	.+10     	; 0x256 <CheckJoystickMovement+0x4c>
	else if (JoyStatus_LCL & JOY_RIGHT)
	  ReportString = "Joystick Right\r\n";
 24c:	6e e2       	ldi	r22, 0x2E	; 46
 24e:	71 e0       	ldi	r23, 0x01	; 1
 250:	02 c0       	rjmp	.+4      	; 0x256 <CheckJoystickMovement+0x4c>
	else if (JoyStatus_LCL & JOY_PRESS)
	  ReportString = "Joystick Pressed\r\n";
 252:	6f e3       	ldi	r22, 0x3F	; 63
 254:	71 e0       	ldi	r23, 0x01	; 1
	else
	  ActionSent = false;

	if ((ReportString != NULL) && (ActionSent == false))
 256:	80 91 98 01 	lds	r24, 0x0198
 25a:	88 23       	and	r24, r24
 25c:	31 f4       	brne	.+12     	; 0x26a <CheckJoystickMovement+0x60>
	{
		ActionSent = true;
 25e:	81 e0       	ldi	r24, 0x01	; 1
 260:	80 93 98 01 	sts	0x0198, r24

		CDC_Device_SendString(&VirtualSerial1_CDC_Interface, ReportString);
 264:	8d e6       	ldi	r24, 0x6D	; 109
 266:	91 e0       	ldi	r25, 0x01	; 1
 268:	f4 c5       	rjmp	.+3048   	; 0xe52 <CDC_Device_SendString>
 26a:	08 95       	ret

0000026c <main>:
 26c:	a7 df       	rcall	.-178    	; 0x1bc <SetupHardware>
/** Main program entry point. This routine contains the overall program flow, including initial
 *  setup of all components and the main program loop.
 */
int main(void)
{
	SetupHardware();
 26e:	80 e1       	ldi	r24, 0x10	; 16

	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
 270:	a0 df       	rcall	.-192    	; 0x1b2 <LEDs_SetAllLEDs>
 272:	78 94       	sei
 274:	ca df       	rcall	.-108    	; 0x20a <CheckJoystickMovement>
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				sei();
 276:	8d e6       	ldi	r24, 0x6D	; 109
	GlobalInterruptEnable();

	for (;;)
	{
		CheckJoystickMovement();
 278:	91 e0       	ldi	r25, 0x01	; 1
 27a:	7c d6       	rcall	.+3320   	; 0xf74 <CDC_Device_ReceiveByte>

		/* Discard all received data on the first CDC interface */
		CDC_Device_ReceiveByte(&VirtualSerial1_CDC_Interface);
 27c:	82 e5       	ldi	r24, 0x52	; 82
 27e:	91 e0       	ldi	r25, 0x01	; 1
 280:	79 d6       	rcall	.+3314   	; 0xf74 <CDC_Device_ReceiveByte>
 282:	bc 01       	movw	r22, r24

		/* Echo all received data on the second CDC interface */
		int16_t ReceivedByte = CDC_Device_ReceiveByte(&VirtualSerial2_CDC_Interface);
 284:	97 fd       	sbrc	r25, 7
 286:	03 c0       	rjmp	.+6      	; 0x28e <main+0x22>
 288:	82 e5       	ldi	r24, 0x52	; 82
 28a:	91 e0       	ldi	r25, 0x01	; 1
 28c:	04 d6       	rcall	.+3080   	; 0xe96 <CDC_Device_SendByte>
		if (!(ReceivedByte < 0))
 28e:	8d e6       	ldi	r24, 0x6D	; 109
 290:	91 e0       	ldi	r25, 0x01	; 1
		  CDC_Device_SendByte(&VirtualSerial2_CDC_Interface, (uint8_t)ReceivedByte);
 292:	58 d6       	rcall	.+3248   	; 0xf44 <CDC_Device_USBTask>
 294:	82 e5       	ldi	r24, 0x52	; 82
 296:	91 e0       	ldi	r25, 0x01	; 1
 298:	55 d6       	rcall	.+3242   	; 0xf44 <CDC_Device_USBTask>

		CDC_Device_USBTask(&VirtualSerial1_CDC_Interface);
 29a:	ee d4       	rcall	.+2524   	; 0xc78 <USB_USBTask>
 29c:	eb cf       	rjmp	.-42     	; 0x274 <main+0x8>

0000029e <EVENT_USB_Device_Connect>:
 29e:	80 ea       	ldi	r24, 0xA0	; 160
 2a0:	88 cf       	rjmp	.-240    	; 0x1b2 <LEDs_SetAllLEDs>

000002a2 <EVENT_USB_Device_Disconnect>:
		CDC_Device_USBTask(&VirtualSerial2_CDC_Interface);
 2a2:	80 e1       	ldi	r24, 0x10	; 16
 2a4:	86 cf       	rjmp	.-244    	; 0x1b2 <LEDs_SetAllLEDs>

000002a6 <EVENT_USB_Device_ConfigurationChanged>:
 2a6:	cf 93       	push	r28
 2a8:	8d e6       	ldi	r24, 0x6D	; 109
		USB_USBTask();
 2aa:	91 e0       	ldi	r25, 0x01	; 1
 2ac:	ae d5       	rcall	.+2908   	; 0xe0a <CDC_Device_ConfigureEndpoints>
	}
 2ae:	c8 2f       	mov	r28, r24
/** Event handler for the library USB Configuration Changed event. */
void EVENT_USB_Device_ConfigurationChanged(void)
{
	bool ConfigSuccess = true;

	ConfigSuccess &= CDC_Device_ConfigureEndpoints(&VirtualSerial1_CDC_Interface);
 2b0:	82 e5       	ldi	r24, 0x52	; 82
	ConfigSuccess &= CDC_Device_ConfigureEndpoints(&VirtualSerial2_CDC_Interface);
 2b2:	91 e0       	ldi	r25, 0x01	; 1
 2b4:	aa d5       	rcall	.+2900   	; 0xe0a <CDC_Device_ConfigureEndpoints>
 2b6:	28 2f       	mov	r18, r24
 2b8:	30 e0       	ldi	r19, 0x00	; 0
 2ba:	8c 2f       	mov	r24, r28
 2bc:	90 e0       	ldi	r25, 0x00	; 0
/** Event handler for the library USB Configuration Changed event. */
void EVENT_USB_Device_ConfigurationChanged(void)
{
	bool ConfigSuccess = true;

	ConfigSuccess &= CDC_Device_ConfigureEndpoints(&VirtualSerial1_CDC_Interface);
 2be:	28 23       	and	r18, r24
 2c0:	39 23       	and	r19, r25
	ConfigSuccess &= CDC_Device_ConfigureEndpoints(&VirtualSerial2_CDC_Interface);
 2c2:	21 15       	cp	r18, r1
 2c4:	31 05       	cpc	r19, r1

	LEDs_SetAllLEDs(ConfigSuccess ? LEDMASK_USB_READY : LEDMASK_USB_ERROR);
 2c6:	11 f0       	breq	.+4      	; 0x2cc <EVENT_USB_Device_ConfigurationChanged+0x26>
 2c8:	80 e6       	ldi	r24, 0x60	; 96
 2ca:	01 c0       	rjmp	.+2      	; 0x2ce <EVENT_USB_Device_ConfigurationChanged+0x28>
 2cc:	80 e9       	ldi	r24, 0x90	; 144
 2ce:	71 df       	rcall	.-286    	; 0x1b2 <LEDs_SetAllLEDs>
 2d0:	cf 91       	pop	r28
 2d2:	08 95       	ret

000002d4 <EVENT_USB_Device_ControlRequest>:
 2d4:	8d e6       	ldi	r24, 0x6D	; 109
}
 2d6:	91 e0       	ldi	r25, 0x01	; 1
 2d8:	eb d4       	rcall	.+2518   	; 0xcb0 <CDC_Device_ProcessControlRequest>

/** Event handler for the library USB Control Request reception event. */
void EVENT_USB_Device_ControlRequest(void)
{
	CDC_Device_ProcessControlRequest(&VirtualSerial1_CDC_Interface);
 2da:	82 e5       	ldi	r24, 0x52	; 82
	CDC_Device_ProcessControlRequest(&VirtualSerial2_CDC_Interface);
 2dc:	91 e0       	ldi	r25, 0x01	; 1
 2de:	e8 c4       	rjmp	.+2512   	; 0xcb0 <CDC_Device_ProcessControlRequest>

000002e0 <CALLBACK_USB_GetDescriptor>:
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
 2e0:	92 30       	cpi	r25, 0x02	; 2
 2e2:	29 f0       	breq	.+10     	; 0x2ee <CALLBACK_USB_GetDescriptor+0xe>
 2e4:	93 30       	cpi	r25, 0x03	; 3
 2e6:	41 f0       	breq	.+16     	; 0x2f8 <CALLBACK_USB_GetDescriptor+0x18>
 2e8:	91 30       	cpi	r25, 0x01	; 1
 2ea:	e9 f4       	brne	.+58     	; 0x326 <CALLBACK_USB_GetDescriptor+0x46>
 2ec:	17 c0       	rjmp	.+46     	; 0x31c <CALLBACK_USB_GetDescriptor+0x3c>
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
			Size    = sizeof(USB_Descriptor_Configuration_t);
 2ee:	83 e8       	ldi	r24, 0x83	; 131
 2f0:	90 e0       	ldi	r25, 0x00	; 0
		case DTYPE_Device:
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
 2f2:	ee ed       	ldi	r30, 0xDE	; 222
 2f4:	f0 e0       	ldi	r31, 0x00	; 0
			Size    = sizeof(USB_Descriptor_Configuration_t);
			break;
 2f6:	1b c0       	rjmp	.+54     	; 0x32e <CALLBACK_USB_GetDescriptor+0x4e>
		case DTYPE_String:
			switch (DescriptorNumber)
 2f8:	81 30       	cpi	r24, 0x01	; 1
 2fa:	41 f0       	breq	.+16     	; 0x30c <CALLBACK_USB_GetDescriptor+0x2c>
 2fc:	81 30       	cpi	r24, 0x01	; 1
 2fe:	18 f0       	brcs	.+6      	; 0x306 <CALLBACK_USB_GetDescriptor+0x26>
 300:	82 30       	cpi	r24, 0x02	; 2
 302:	89 f4       	brne	.+34     	; 0x326 <CALLBACK_USB_GetDescriptor+0x46>
 304:	06 c0       	rjmp	.+12     	; 0x312 <CALLBACK_USB_GetDescriptor+0x32>
			{
				case 0x00:
					Address = &LanguageString;
					Size    = pgm_read_byte(&LanguageString.Header.Size);
 306:	ea ed       	ldi	r30, 0xDA	; 218
 308:	f0 e0       	ldi	r31, 0x00	; 0
 30a:	05 c0       	rjmp	.+10     	; 0x316 <CALLBACK_USB_GetDescriptor+0x36>
					break;
				case 0x01:
					Address = &ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
 30c:	e0 ec       	ldi	r30, 0xC0	; 192
 30e:	f0 e0       	ldi	r31, 0x00	; 0
 310:	02 c0       	rjmp	.+4      	; 0x316 <CALLBACK_USB_GetDescriptor+0x36>
					break;
				case 0x02:
					Address = &ProductString;
					Size    = pgm_read_byte(&ProductString.Header.Size);
 312:	e8 e9       	ldi	r30, 0x98	; 152
 314:	f0 e0       	ldi	r31, 0x00	; 0
 316:	84 91       	lpm	r24, Z
 318:	90 e0       	ldi	r25, 0x00	; 0
					break;
 31a:	09 c0       	rjmp	.+18     	; 0x32e <CALLBACK_USB_GetDescriptor+0x4e>

	switch (DescriptorType)
	{
		case DTYPE_Device:
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
 31c:	82 e1       	ldi	r24, 0x12	; 18
 31e:	90 e0       	ldi	r25, 0x00	; 0
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
	{
		case DTYPE_Device:
			Address = &DeviceDescriptor;
 320:	e1 e6       	ldi	r30, 0x61	; 97
 322:	f1 e0       	ldi	r31, 0x01	; 1
 324:	04 c0       	rjmp	.+8      	; 0x32e <CALLBACK_USB_GetDescriptor+0x4e>
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;
 326:	80 e0       	ldi	r24, 0x00	; 0
 328:	90 e0       	ldi	r25, 0x00	; 0
                                    const void** const DescriptorAddress)
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
 32a:	e0 e0       	ldi	r30, 0x00	; 0
 32c:	f0 e0       	ldi	r31, 0x00	; 0
			}

			break;
	}

	*DescriptorAddress = Address;
 32e:	da 01       	movw	r26, r20
 330:	11 96       	adiw	r26, 0x01	; 1
 332:	fc 93       	st	X, r31
 334:	ee 93       	st	-X, r30
	return Size;
}
 336:	08 95       	ret

00000338 <Endpoint_Write_Stream_LE>:
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
 338:	af 92       	push	r10
 33a:	bf 92       	push	r11
 33c:	cf 92       	push	r12
 33e:	df 92       	push	r13
 340:	ef 92       	push	r14
 342:	ff 92       	push	r15
 344:	1f 93       	push	r17
 346:	cf 93       	push	r28
 348:	df 93       	push	r29
 34a:	ec 01       	movw	r28, r24
 34c:	7b 01       	movw	r14, r22
 34e:	6a 01       	movw	r12, r20
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	uint16_t BytesInTransfer = 0;
	uint8_t  ErrorCode;

	if ((ErrorCode = Endpoint_WaitUntilReady()))
 350:	8d d1       	rcall	.+794    	; 0x66c <Endpoint_WaitUntilReady>
 352:	18 2f       	mov	r17, r24
 354:	88 23       	and	r24, r24
 356:	a1 f5       	brne	.+104    	; 0x3c0 <Endpoint_Write_Stream_LE+0x88>
 358:	c1 14       	cp	r12, r1
	  return ErrorCode;

	if (BytesProcessed != NULL)
 35a:	d1 04       	cpc	r13, r1
 35c:	39 f0       	breq	.+14     	; 0x36c <Endpoint_Write_Stream_LE+0x34>
 35e:	f6 01       	movw	r30, r12
	{
		Length -= *BytesProcessed;
 360:	20 81       	ld	r18, Z
 362:	31 81       	ldd	r19, Z+1	; 0x01
 364:	e2 1a       	sub	r14, r18
 366:	f3 0a       	sbc	r15, r19
 368:	c2 0f       	add	r28, r18
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
 36a:	d3 1f       	adc	r29, r19
 36c:	aa 24       	eor	r10, r10

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
 36e:	bb 24       	eor	r11, r11
 370:	22 c0       	rjmp	.+68     	; 0x3b6 <Endpoint_Write_Stream_LE+0x7e>
 372:	80 91 e8 00 	lds	r24, 0x00E8
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
 376:	85 fd       	sbrc	r24, 5
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
	{
		if (!(Endpoint_IsReadWriteAllowed()))
 378:	15 c0       	rjmp	.+42     	; 0x3a4 <Endpoint_Write_Stream_LE+0x6c>
 37a:	80 91 e8 00 	lds	r24, 0x00E8
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 37e:	8e 77       	andi	r24, 0x7E	; 126
 380:	80 93 e8 00 	sts	0x00E8, r24
 384:	c1 14       	cp	r12, r1

			#if !defined(INTERRUPT_CONTROL_ENDPOINT)
			USB_USBTask();
			#endif

			if (BytesProcessed != NULL)
 386:	d1 04       	cpc	r13, r1
 388:	49 f0       	breq	.+18     	; 0x39c <Endpoint_Write_Stream_LE+0x64>
 38a:	f6 01       	movw	r30, r12
			{
				*BytesProcessed += BytesInTransfer;
 38c:	80 81       	ld	r24, Z
 38e:	91 81       	ldd	r25, Z+1	; 0x01
 390:	8a 0d       	add	r24, r10
 392:	9b 1d       	adc	r25, r11
 394:	91 83       	std	Z+1, r25	; 0x01
 396:	80 83       	st	Z, r24
 398:	15 e0       	ldi	r17, 0x05	; 5
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
 39a:	12 c0       	rjmp	.+36     	; 0x3c0 <Endpoint_Write_Stream_LE+0x88>
 39c:	67 d1       	rcall	.+718    	; 0x66c <Endpoint_WaitUntilReady>
			}

			if ((ErrorCode = Endpoint_WaitUntilReady()))
 39e:	88 23       	and	r24, r24
 3a0:	51 f0       	breq	.+20     	; 0x3b6 <Endpoint_Write_Stream_LE+0x7e>
 3a2:	0d c0       	rjmp	.+26     	; 0x3be <Endpoint_Write_Stream_LE+0x86>
 3a4:	89 91       	ld	r24, Y+
 3a6:	80 93 f1 00 	sts	0x00F1, r24
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
 3aa:	08 94       	sec
 3ac:	e1 08       	sbc	r14, r1
		}
		else
		{
			TEMPLATE_TRANSFER_BYTE(DataStream);
			TEMPLATE_BUFFER_MOVE(DataStream, 1);
			Length--;
 3ae:	f1 08       	sbc	r15, r1
 3b0:	08 94       	sec
 3b2:	a1 1c       	adc	r10, r1
			BytesInTransfer++;
 3b4:	b1 1c       	adc	r11, r1
 3b6:	e1 14       	cp	r14, r1
 3b8:	f1 04       	cpc	r15, r1
	{
		Length -= *BytesProcessed;
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
 3ba:	d9 f6       	brne	.-74     	; 0x372 <Endpoint_Write_Stream_LE+0x3a>
 3bc:	01 c0       	rjmp	.+2      	; 0x3c0 <Endpoint_Write_Stream_LE+0x88>
 3be:	18 2f       	mov	r17, r24
 3c0:	81 2f       	mov	r24, r17
			{
				*BytesProcessed += BytesInTransfer;
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
			}

			if ((ErrorCode = Endpoint_WaitUntilReady()))
 3c2:	df 91       	pop	r29
			BytesInTransfer++;
		}
	}

	return ENDPOINT_RWSTREAM_NoError;
}
 3c4:	cf 91       	pop	r28
 3c6:	1f 91       	pop	r17
 3c8:	ff 90       	pop	r15
 3ca:	ef 90       	pop	r14
 3cc:	df 90       	pop	r13
 3ce:	cf 90       	pop	r12
 3d0:	bf 90       	pop	r11
 3d2:	af 90       	pop	r10
 3d4:	08 95       	ret

000003d6 <Endpoint_Write_Control_Stream_LE>:
 3d6:	20 91 a4 01 	lds	r18, 0x01A4
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
 3da:	30 91 a5 01 	lds	r19, 0x01A5
 3de:	26 17       	cp	r18, r22
 3e0:	37 07       	cpc	r19, r23
 3e2:	20 f4       	brcc	.+8      	; 0x3ec <Endpoint_Write_Control_Stream_LE+0x16>
 3e4:	b9 01       	movw	r22, r18
 3e6:	fc 01       	movw	r30, r24
 3e8:	20 e0       	ldi	r18, 0x00	; 0
 3ea:	37 c0       	rjmp	.+110    	; 0x45a <Endpoint_Write_Control_Stream_LE+0x84>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
 3ec:	61 15       	cp	r22, r1
 3ee:	71 05       	cpc	r23, r1
 3f0:	d1 f7       	brne	.-12     	; 0x3e6 <Endpoint_Write_Control_Stream_LE+0x10>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 3f2:	20 91 e8 00 	lds	r18, 0x00E8
 3f6:	2e 77       	andi	r18, 0x7E	; 126
 3f8:	20 93 e8 00 	sts	0x00E8, r18
 3fc:	f4 cf       	rjmp	.-24     	; 0x3e6 <Endpoint_Write_Control_Stream_LE+0x10>
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
 3fe:	80 91 9d 01 	lds	r24, 0x019D

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
 402:	88 23       	and	r24, r24
 404:	09 f4       	brne	.+2      	; 0x408 <Endpoint_Write_Control_Stream_LE+0x32>
 406:	3f c0       	rjmp	.+126    	; 0x486 <Endpoint_Write_Control_Stream_LE+0xb0>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
 408:	85 30       	cpi	r24, 0x05	; 5
 40a:	c9 f1       	breq	.+114    	; 0x47e <Endpoint_Write_Control_Stream_LE+0xa8>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 40c:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
 410:	83 fd       	sbrc	r24, 3
 412:	37 c0       	rjmp	.+110    	; 0x482 <Endpoint_Write_Control_Stream_LE+0xac>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 414:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
 418:	82 fd       	sbrc	r24, 2
 41a:	2b c0       	rjmp	.+86     	; 0x472 <Endpoint_Write_Control_Stream_LE+0x9c>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 41c:	80 91 e8 00 	lds	r24, 0x00E8
		  break;

		if (Endpoint_IsINReady())
 420:	80 ff       	sbrs	r24, 0
 422:	1b c0       	rjmp	.+54     	; 0x45a <Endpoint_Write_Control_Stream_LE+0x84>
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
 424:	80 91 f2 00 	lds	r24, 0x00F2
 428:	90 91 f3 00 	lds	r25, 0x00F3
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
 42c:	06 c0       	rjmp	.+12     	; 0x43a <Endpoint_Write_Control_Stream_LE+0x64>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
 42e:	21 91       	ld	r18, Z+
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
 430:	20 93 f1 00 	sts	0x00F1, r18
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
 434:	61 50       	subi	r22, 0x01	; 1
 436:	70 40       	sbci	r23, 0x00	; 0
				BytesInEndpoint++;
 438:	01 96       	adiw	r24, 0x01	; 1

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
 43a:	61 15       	cp	r22, r1
 43c:	71 05       	cpc	r23, r1
 43e:	19 f0       	breq	.+6      	; 0x446 <Endpoint_Write_Control_Stream_LE+0x70>
 440:	88 30       	cpi	r24, 0x08	; 8
 442:	91 05       	cpc	r25, r1
 444:	a0 f3       	brcs	.-24     	; 0x42e <Endpoint_Write_Control_Stream_LE+0x58>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
 446:	21 e0       	ldi	r18, 0x01	; 1
 448:	88 30       	cpi	r24, 0x08	; 8
 44a:	91 05       	cpc	r25, r1
 44c:	09 f0       	breq	.+2      	; 0x450 <Endpoint_Write_Control_Stream_LE+0x7a>
 44e:	20 e0       	ldi	r18, 0x00	; 0
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 450:	80 91 e8 00 	lds	r24, 0x00E8
 454:	8e 77       	andi	r24, 0x7E	; 126
 456:	80 93 e8 00 	sts	0x00E8, r24
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
 45a:	61 15       	cp	r22, r1
 45c:	71 05       	cpc	r23, r1
 45e:	79 f6       	brne	.-98     	; 0x3fe <Endpoint_Write_Control_Stream_LE+0x28>
 460:	22 23       	and	r18, r18
 462:	69 f6       	brne	.-102    	; 0x3fe <Endpoint_Write_Control_Stream_LE+0x28>
 464:	06 c0       	rjmp	.+12     	; 0x472 <Endpoint_Write_Control_Stream_LE+0x9c>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
 466:	80 91 9d 01 	lds	r24, 0x019D

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
 46a:	88 23       	and	r24, r24
 46c:	61 f0       	breq	.+24     	; 0x486 <Endpoint_Write_Control_Stream_LE+0xb0>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
 46e:	85 30       	cpi	r24, 0x05	; 5
 470:	61 f0       	breq	.+24     	; 0x48a <Endpoint_Write_Control_Stream_LE+0xb4>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 472:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
 476:	82 ff       	sbrs	r24, 2
 478:	f6 cf       	rjmp	.-20     	; 0x466 <Endpoint_Write_Control_Stream_LE+0x90>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
 47a:	80 e0       	ldi	r24, 0x00	; 0
 47c:	08 95       	ret
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
 47e:	83 e0       	ldi	r24, 0x03	; 3
 480:	08 95       	ret
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
 482:	81 e0       	ldi	r24, 0x01	; 1
 484:	08 95       	ret
	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
 486:	82 e0       	ldi	r24, 0x02	; 2
 488:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
 48a:	83 e0       	ldi	r24, 0x03	; 3
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
 48c:	08 95       	ret

0000048e <Endpoint_Write_Control_PStream_LE>:
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
 48e:	20 91 a4 01 	lds	r18, 0x01A4
 492:	30 91 a5 01 	lds	r19, 0x01A5
 496:	26 17       	cp	r18, r22
 498:	37 07       	cpc	r19, r23
 49a:	20 f4       	brcc	.+8      	; 0x4a4 <Endpoint_Write_Control_PStream_LE+0x16>
 49c:	b9 01       	movw	r22, r18
 49e:	fc 01       	movw	r30, r24
 4a0:	20 e0       	ldi	r18, 0x00	; 0
 4a2:	38 c0       	rjmp	.+112    	; 0x514 <Endpoint_Write_Control_PStream_LE+0x86>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
 4a4:	61 15       	cp	r22, r1
 4a6:	71 05       	cpc	r23, r1
 4a8:	d1 f7       	brne	.-12     	; 0x49e <Endpoint_Write_Control_PStream_LE+0x10>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 4aa:	20 91 e8 00 	lds	r18, 0x00E8
 4ae:	2e 77       	andi	r18, 0x7E	; 126
 4b0:	20 93 e8 00 	sts	0x00E8, r18
 4b4:	f4 cf       	rjmp	.-24     	; 0x49e <Endpoint_Write_Control_PStream_LE+0x10>
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
 4b6:	80 91 9d 01 	lds	r24, 0x019D

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
 4ba:	88 23       	and	r24, r24
 4bc:	09 f4       	brne	.+2      	; 0x4c0 <Endpoint_Write_Control_PStream_LE+0x32>
 4be:	40 c0       	rjmp	.+128    	; 0x540 <Endpoint_Write_Control_PStream_LE+0xb2>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
 4c0:	85 30       	cpi	r24, 0x05	; 5
 4c2:	d1 f1       	breq	.+116    	; 0x538 <Endpoint_Write_Control_PStream_LE+0xaa>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 4c4:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
 4c8:	83 fd       	sbrc	r24, 3
 4ca:	38 c0       	rjmp	.+112    	; 0x53c <Endpoint_Write_Control_PStream_LE+0xae>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 4cc:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
 4d0:	82 fd       	sbrc	r24, 2
 4d2:	2c c0       	rjmp	.+88     	; 0x52c <Endpoint_Write_Control_PStream_LE+0x9e>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 4d4:	80 91 e8 00 	lds	r24, 0x00E8
		  break;

		if (Endpoint_IsINReady())
 4d8:	80 ff       	sbrs	r24, 0
 4da:	1c c0       	rjmp	.+56     	; 0x514 <Endpoint_Write_Control_PStream_LE+0x86>
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
 4dc:	80 91 f2 00 	lds	r24, 0x00F2
 4e0:	90 91 f3 00 	lds	r25, 0x00F3
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
 4e4:	07 c0       	rjmp	.+14     	; 0x4f4 <Endpoint_Write_Control_PStream_LE+0x66>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
 4e6:	24 91       	lpm	r18, Z
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
 4e8:	20 93 f1 00 	sts	0x00F1, r18
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
 4ec:	31 96       	adiw	r30, 0x01	; 1
				Length--;
 4ee:	61 50       	subi	r22, 0x01	; 1
 4f0:	70 40       	sbci	r23, 0x00	; 0
				BytesInEndpoint++;
 4f2:	01 96       	adiw	r24, 0x01	; 1

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
 4f4:	61 15       	cp	r22, r1
 4f6:	71 05       	cpc	r23, r1
 4f8:	19 f0       	breq	.+6      	; 0x500 <Endpoint_Write_Control_PStream_LE+0x72>
 4fa:	88 30       	cpi	r24, 0x08	; 8
 4fc:	91 05       	cpc	r25, r1
 4fe:	98 f3       	brcs	.-26     	; 0x4e6 <Endpoint_Write_Control_PStream_LE+0x58>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
 500:	21 e0       	ldi	r18, 0x01	; 1
 502:	88 30       	cpi	r24, 0x08	; 8
 504:	91 05       	cpc	r25, r1
 506:	09 f0       	breq	.+2      	; 0x50a <Endpoint_Write_Control_PStream_LE+0x7c>
 508:	20 e0       	ldi	r18, 0x00	; 0
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 50a:	80 91 e8 00 	lds	r24, 0x00E8
 50e:	8e 77       	andi	r24, 0x7E	; 126
 510:	80 93 e8 00 	sts	0x00E8, r24
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
 514:	61 15       	cp	r22, r1
 516:	71 05       	cpc	r23, r1
 518:	71 f6       	brne	.-100    	; 0x4b6 <Endpoint_Write_Control_PStream_LE+0x28>
 51a:	22 23       	and	r18, r18
 51c:	61 f6       	brne	.-104    	; 0x4b6 <Endpoint_Write_Control_PStream_LE+0x28>
 51e:	06 c0       	rjmp	.+12     	; 0x52c <Endpoint_Write_Control_PStream_LE+0x9e>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
 520:	80 91 9d 01 	lds	r24, 0x019D

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
 524:	88 23       	and	r24, r24
 526:	61 f0       	breq	.+24     	; 0x540 <Endpoint_Write_Control_PStream_LE+0xb2>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
 528:	85 30       	cpi	r24, 0x05	; 5
 52a:	61 f0       	breq	.+24     	; 0x544 <Endpoint_Write_Control_PStream_LE+0xb6>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 52c:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
 530:	82 ff       	sbrs	r24, 2
 532:	f6 cf       	rjmp	.-20     	; 0x520 <Endpoint_Write_Control_PStream_LE+0x92>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
 534:	80 e0       	ldi	r24, 0x00	; 0
 536:	08 95       	ret
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
 538:	83 e0       	ldi	r24, 0x03	; 3
 53a:	08 95       	ret
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
 53c:	81 e0       	ldi	r24, 0x01	; 1
 53e:	08 95       	ret
	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
 540:	82 e0       	ldi	r24, 0x02	; 2
 542:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
 544:	83 e0       	ldi	r24, 0x03	; 3
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
 546:	08 95       	ret

00000548 <Endpoint_ConfigureEndpoint_Prv>:
	UECFG0X = UECFG0XData;
	UECFG1X = UECFG1XData;

	return Endpoint_IsConfigured();
#else
	for (uint8_t EPNum = Number; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
 548:	98 2f       	mov	r25, r24
 54a:	2a c0       	rjmp	.+84     	; 0x5a0 <Endpoint_ConfigureEndpoint_Prv+0x58>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 54c:	90 93 e9 00 	sts	0x00E9, r25
		uint8_t UECFG1XTemp;
		uint8_t UEIENXTemp;

		Endpoint_SelectEndpoint(EPNum);

		if (EPNum == Number)
 550:	98 17       	cp	r25, r24
 552:	39 f0       	breq	.+14     	; 0x562 <Endpoint_ConfigureEndpoint_Prv+0x1a>
			UECFG1XTemp = UECFG1XData;
			UEIENXTemp  = 0;
		}
		else
		{
			UECFG0XTemp = UECFG0X;
 554:	70 91 ec 00 	lds	r23, 0x00EC
			UECFG1XTemp = UECFG1X;
 558:	20 91 ed 00 	lds	r18, 0x00ED
			UEIENXTemp  = UEIENX;
 55c:	50 91 f0 00 	lds	r21, 0x00F0
 560:	03 c0       	rjmp	.+6      	; 0x568 <Endpoint_ConfigureEndpoint_Prv+0x20>
		Endpoint_SelectEndpoint(EPNum);

		if (EPNum == Number)
		{
			UECFG0XTemp = UECFG0XData;
			UECFG1XTemp = UECFG1XData;
 562:	24 2f       	mov	r18, r20

		Endpoint_SelectEndpoint(EPNum);

		if (EPNum == Number)
		{
			UECFG0XTemp = UECFG0XData;
 564:	76 2f       	mov	r23, r22
			UECFG1XTemp = UECFG1XData;
			UEIENXTemp  = 0;
 566:	50 e0       	ldi	r21, 0x00	; 0
			UECFG0XTemp = UECFG0X;
			UECFG1XTemp = UECFG1X;
			UEIENXTemp  = UEIENX;
		}

		if (!(UECFG1XTemp & (1 << ALLOC)))
 568:	21 ff       	sbrs	r18, 1
 56a:	19 c0       	rjmp	.+50     	; 0x59e <Endpoint_ConfigureEndpoint_Prv+0x56>
			 *  to and from a host.
			 */
			static inline void Endpoint_DisableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_DisableEndpoint(void)
			{
				UECONX &= ~(1 << EPEN);
 56c:	30 91 eb 00 	lds	r19, 0x00EB
 570:	3e 7f       	andi	r19, 0xFE	; 254
 572:	30 93 eb 00 	sts	0x00EB, r19
		  continue;

		Endpoint_DisableEndpoint();
		UECFG1X &= ~(1 << ALLOC);
 576:	30 91 ed 00 	lds	r19, 0x00ED
 57a:	3d 7f       	andi	r19, 0xFD	; 253
 57c:	30 93 ed 00 	sts	0x00ED, r19
			 *  \note Endpoints must first be configured properly via \ref Endpoint_ConfigureEndpoint().
			 */
			static inline void Endpoint_EnableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_EnableEndpoint(void)
			{
				UECONX |= (1 << EPEN);
 580:	30 91 eb 00 	lds	r19, 0x00EB
 584:	31 60       	ori	r19, 0x01	; 1
 586:	30 93 eb 00 	sts	0x00EB, r19

		Endpoint_EnableEndpoint();
		UECFG0X = UECFG0XTemp;
 58a:	70 93 ec 00 	sts	0x00EC, r23
		UECFG1X = UECFG1XTemp;
 58e:	20 93 ed 00 	sts	0x00ED, r18
		UEIENX  = UEIENXTemp;
 592:	50 93 f0 00 	sts	0x00F0, r21
			 *  \return Boolean \c true if the currently selected endpoint has been configured, \c false otherwise.
			 */
			static inline bool Endpoint_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsConfigured(void)
			{
				return ((UESTA0X & (1 << CFGOK)) ? true : false);
 596:	20 91 ee 00 	lds	r18, 0x00EE

		if (!(Endpoint_IsConfigured()))
 59a:	27 ff       	sbrs	r18, 7
 59c:	08 c0       	rjmp	.+16     	; 0x5ae <Endpoint_ConfigureEndpoint_Prv+0x66>
	UECFG0X = UECFG0XData;
	UECFG1X = UECFG1XData;

	return Endpoint_IsConfigured();
#else
	for (uint8_t EPNum = Number; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
 59e:	9f 5f       	subi	r25, 0xFF	; 255
 5a0:	97 30       	cpi	r25, 0x07	; 7
 5a2:	a0 f2       	brcs	.-88     	; 0x54c <Endpoint_ConfigureEndpoint_Prv+0x4>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 5a4:	8f 70       	andi	r24, 0x0F	; 15
 5a6:	80 93 e9 00 	sts	0x00E9, r24
		if (!(Endpoint_IsConfigured()))
		  return false;
	}

	Endpoint_SelectEndpoint(Number);
	return true;
 5aa:	81 e0       	ldi	r24, 0x01	; 1
 5ac:	08 95       	ret
		UECFG0X = UECFG0XTemp;
		UECFG1X = UECFG1XTemp;
		UEIENX  = UEIENXTemp;

		if (!(Endpoint_IsConfigured()))
		  return false;
 5ae:	80 e0       	ldi	r24, 0x00	; 0
	}

	Endpoint_SelectEndpoint(Number);
	return true;
#endif
}
 5b0:	08 95       	ret

000005b2 <Endpoint_ConfigureEndpointTable>:
uint8_t USB_Device_ControlEndpointSize = ENDPOINT_CONTROLEP_DEFAULT_SIZE;
#endif

bool Endpoint_ConfigureEndpointTable(const USB_Endpoint_Table_t* const Table,
                                     const uint8_t Entries)
{
 5b2:	0f 93       	push	r16
 5b4:	1f 93       	push	r17
 5b6:	cf 93       	push	r28
 5b8:	df 93       	push	r29
 5ba:	16 2f       	mov	r17, r22
	{
		if (!(Table[i].Address))
		  continue;
	
		if (!(Endpoint_ConfigureEndpoint(Table[i].Address, Table[i].Type, Table[i].Size, Table[i].Banks)))
		  return false;
 5bc:	ec 01       	movw	r28, r24
#endif

bool Endpoint_ConfigureEndpointTable(const USB_Endpoint_Table_t* const Table,
                                     const uint8_t Entries)
{
	for (uint8_t i = 0; i < Entries; i++)
 5be:	00 e0       	ldi	r16, 0x00	; 0
 5c0:	2a c0       	rjmp	.+84     	; 0x616 <Endpoint_ConfigureEndpointTable+0x64>
	{
		if (!(Table[i].Address))
 5c2:	98 81       	ld	r25, Y
 5c4:	99 23       	and	r25, r25
 5c6:	29 f1       	breq	.+74     	; 0x612 <Endpoint_ConfigureEndpointTable+0x60>
		  continue;
	
		if (!(Endpoint_ConfigureEndpoint(Table[i].Address, Table[i].Type, Table[i].Size, Table[i].Banks)))
 5c8:	6b 81       	ldd	r22, Y+3	; 0x03
 5ca:	e9 81       	ldd	r30, Y+1	; 0x01
 5cc:	fa 81       	ldd	r31, Y+2	; 0x02
 5ce:	2c 81       	ldd	r18, Y+4	; 0x04
			static inline bool Endpoint_ConfigureEndpoint(const uint8_t Address,
			                                              const uint8_t Type,
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);
 5d0:	89 2f       	mov	r24, r25
 5d2:	8f 70       	andi	r24, 0x0F	; 15

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
 5d4:	87 30       	cpi	r24, 0x07	; 7
 5d6:	18 f5       	brcc	.+70     	; 0x61e <Endpoint_ConfigureEndpointTable+0x6c>
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
				                                      ((Type << EPTYPE0) | ((Address & ENDPOINT_DIR_IN) ? (1 << EPDIR) : 0)),
 5d8:	62 95       	swap	r22
 5da:	66 0f       	add	r22, r22
 5dc:	66 0f       	add	r22, r22
 5de:	60 7c       	andi	r22, 0xC0	; 192
 5e0:	99 1f       	adc	r25, r25
 5e2:	99 27       	eor	r25, r25
 5e4:	99 1f       	adc	r25, r25
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
 5e6:	69 2b       	or	r22, r25
 5e8:	22 30       	cpi	r18, 0x02	; 2
 5ea:	10 f0       	brcs	.+4      	; 0x5f0 <Endpoint_ConfigureEndpointTable+0x3e>
 5ec:	96 e0       	ldi	r25, 0x06	; 6
 5ee:	01 c0       	rjmp	.+2      	; 0x5f2 <Endpoint_ConfigureEndpointTable+0x40>
 5f0:	92 e0       	ldi	r25, 0x02	; 2
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes) ATTR_WARN_UNUSED_RESULT ATTR_CONST
			                                                                       ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;
 5f2:	28 e0       	ldi	r18, 0x08	; 8
 5f4:	30 e0       	ldi	r19, 0x00	; 0
		/* Inline Functions: */
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes) ATTR_WARN_UNUSED_RESULT ATTR_CONST
			                                                                       ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
 5f6:	40 e0       	ldi	r20, 0x00	; 0
 5f8:	03 c0       	rjmp	.+6      	; 0x600 <Endpoint_ConfigureEndpointTable+0x4e>
				uint16_t CheckBytes = 8;

				while (CheckBytes < Bytes)
				{
					MaskVal++;
 5fa:	4f 5f       	subi	r20, 0xFF	; 255
					CheckBytes <<= 1;
 5fc:	22 0f       	add	r18, r18
 5fe:	33 1f       	adc	r19, r19
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while (CheckBytes < Bytes)
 600:	2e 17       	cp	r18, r30
 602:	3f 07       	cpc	r19, r31
 604:	d0 f3       	brcs	.-12     	; 0x5fa <Endpoint_ConfigureEndpointTable+0x48>
				{
					MaskVal++;
					CheckBytes <<= 1;
				}

				return (MaskVal << EPSIZE0);
 606:	42 95       	swap	r20
 608:	40 7f       	andi	r20, 0xF0	; 240
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
 60a:	49 2b       	or	r20, r25
 60c:	9d df       	rcall	.-198    	; 0x548 <Endpoint_ConfigureEndpoint_Prv>
 60e:	88 23       	and	r24, r24
 610:	31 f0       	breq	.+12     	; 0x61e <Endpoint_ConfigureEndpointTable+0x6c>
 612:	0f 5f       	subi	r16, 0xFF	; 255
#endif

bool Endpoint_ConfigureEndpointTable(const USB_Endpoint_Table_t* const Table,
                                     const uint8_t Entries)
{
	for (uint8_t i = 0; i < Entries; i++)
 614:	25 96       	adiw	r28, 0x05	; 5
 616:	01 17       	cp	r16, r17
 618:	a1 f6       	brne	.-88     	; 0x5c2 <Endpoint_ConfigureEndpointTable+0x10>
 61a:	81 e0       	ldi	r24, 0x01	; 1
	
		if (!(Endpoint_ConfigureEndpoint(Table[i].Address, Table[i].Type, Table[i].Size, Table[i].Banks)))
		  return false;
	}
	
	return true;
 61c:	01 c0       	rjmp	.+2      	; 0x620 <Endpoint_ConfigureEndpointTable+0x6e>
 61e:	80 e0       	ldi	r24, 0x00	; 0
	{
		if (!(Table[i].Address))
		  continue;
	
		if (!(Endpoint_ConfigureEndpoint(Table[i].Address, Table[i].Type, Table[i].Size, Table[i].Banks)))
		  return false;
 620:	df 91       	pop	r29
	}
	
	return true;
}
 622:	cf 91       	pop	r28
 624:	1f 91       	pop	r17
 626:	0f 91       	pop	r16
 628:	08 95       	ret

0000062a <Endpoint_ClearStatusStage>:
 62a:	80 91 9e 01 	lds	r24, 0x019E
	}
}

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
 62e:	87 ff       	sbrs	r24, 7
 630:	13 c0       	rjmp	.+38     	; 0x658 <Endpoint_ClearStatusStage+0x2e>
 632:	04 c0       	rjmp	.+8      	; 0x63c <Endpoint_ClearStatusStage+0x12>
	{
		while (!(Endpoint_IsOUTReceived()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
 634:	80 91 9d 01 	lds	r24, 0x019D
 638:	88 23       	and	r24, r24
 63a:	b9 f0       	breq	.+46     	; 0x66a <Endpoint_ClearStatusStage+0x40>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 63c:	80 91 e8 00 	lds	r24, 0x00E8

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
	{
		while (!(Endpoint_IsOUTReceived()))
 640:	82 ff       	sbrs	r24, 2
 642:	f8 cf       	rjmp	.-16     	; 0x634 <Endpoint_ClearStatusStage+0xa>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 644:	80 91 e8 00 	lds	r24, 0x00E8
 648:	8b 77       	andi	r24, 0x7B	; 123
 64a:	80 93 e8 00 	sts	0x00E8, r24
 64e:	08 95       	ret
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
 650:	80 91 9d 01 	lds	r24, 0x019D
 654:	88 23       	and	r24, r24
 656:	49 f0       	breq	.+18     	; 0x66a <Endpoint_ClearStatusStage+0x40>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 658:	80 91 e8 00 	lds	r24, 0x00E8

		Endpoint_ClearOUT();
	}
	else
	{
		while (!(Endpoint_IsINReady()))
 65c:	80 ff       	sbrs	r24, 0
 65e:	f8 cf       	rjmp	.-16     	; 0x650 <Endpoint_ClearStatusStage+0x26>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 660:	80 91 e8 00 	lds	r24, 0x00E8
 664:	8e 77       	andi	r24, 0x7E	; 126
 666:	80 93 e8 00 	sts	0x00E8, r24
 66a:	08 95       	ret

0000066c <Endpoint_WaitUntilReady>:
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
 66c:	80 91 e4 00 	lds	r24, 0x00E4
 670:	90 91 e5 00 	lds	r25, 0x00E5
 674:	45 e6       	ldi	r20, 0x65	; 101
 676:	01 c0       	rjmp	.+2      	; 0x67a <Endpoint_WaitUntilReady+0xe>
 678:	c9 01       	movw	r24, r18
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
 67a:	20 91 ec 00 	lds	r18, 0x00EC
 67e:	20 ff       	sbrs	r18, 0
 680:	23 c0       	rjmp	.+70     	; 0x6c8 <Endpoint_WaitUntilReady+0x5c>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 682:	20 91 e8 00 	lds	r18, 0x00E8

	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
 686:	20 fd       	sbrc	r18, 0
 688:	15 c0       	rjmp	.+42     	; 0x6b4 <Endpoint_WaitUntilReady+0x48>
		{
			if (Endpoint_IsOUTReceived())
			  return ENDPOINT_READYWAIT_NoError;
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;
 68a:	20 91 9d 01 	lds	r18, 0x019D

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
 68e:	22 23       	and	r18, r18
 690:	99 f0       	breq	.+38     	; 0x6b8 <Endpoint_WaitUntilReady+0x4c>
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
 692:	25 30       	cpi	r18, 0x05	; 5
 694:	99 f0       	breq	.+38     	; 0x6bc <Endpoint_WaitUntilReady+0x50>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
 696:	20 91 eb 00 	lds	r18, 0x00EB
		  return ENDPOINT_READYWAIT_BusSuspended;
		else if (Endpoint_IsStalled())
 69a:	25 fd       	sbrc	r18, 5
 69c:	11 c0       	rjmp	.+34     	; 0x6c0 <Endpoint_WaitUntilReady+0x54>
 69e:	20 91 e4 00 	lds	r18, 0x00E4
 6a2:	30 91 e5 00 	lds	r19, 0x00E5
		  return ENDPOINT_READYWAIT_EndpointStalled;

		uint16_t CurrentFrameNumber = USB_Device_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
 6a6:	28 17       	cp	r18, r24
 6a8:	39 07       	cpc	r19, r25
 6aa:	39 f3       	breq	.-50     	; 0x67a <Endpoint_WaitUntilReady+0xe>
 6ac:	41 50       	subi	r20, 0x01	; 1
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
 6ae:	21 f7       	brne	.-56     	; 0x678 <Endpoint_WaitUntilReady+0xc>
			  return ENDPOINT_READYWAIT_Timeout;
 6b0:	84 e0       	ldi	r24, 0x04	; 4
 6b2:	08 95       	ret
	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
 6b4:	80 e0       	ldi	r24, 0x00	; 0
 6b6:	08 95       	ret
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
 6b8:	82 e0       	ldi	r24, 0x02	; 2
 6ba:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_READYWAIT_BusSuspended;
 6bc:	83 e0       	ldi	r24, 0x03	; 3
 6be:	08 95       	ret
		else if (Endpoint_IsStalled())
		  return ENDPOINT_READYWAIT_EndpointStalled;
 6c0:	81 e0       	ldi	r24, 0x01	; 1
 6c2:	08 95       	ret
			  return ENDPOINT_READYWAIT_NoError;
		}
		else
		{
			if (Endpoint_IsOUTReceived())
			  return ENDPOINT_READYWAIT_NoError;
 6c4:	80 e0       	ldi	r24, 0x00	; 0

			if (!(TimeoutMSRem--))
			  return ENDPOINT_READYWAIT_Timeout;
		}
	}
}
 6c6:	08 95       	ret
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 6c8:	20 91 e8 00 	lds	r18, 0x00E8
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
		}
		else
		{
			if (Endpoint_IsOUTReceived())
 6cc:	22 ff       	sbrs	r18, 2
 6ce:	dd cf       	rjmp	.-70     	; 0x68a <Endpoint_WaitUntilReady+0x1e>
 6d0:	f9 cf       	rjmp	.-14     	; 0x6c4 <Endpoint_WaitUntilReady+0x58>

000006d2 <USB_ResetInterface>:

	USB_IsInitialized = false;
}

void USB_ResetInterface(void)
{
 6d2:	0f 93       	push	r16
 6d4:	1f 93       	push	r17
 6d6:	cf 93       	push	r28
 6d8:	df 93       	push	r29
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
 6da:	4e d0       	rcall	.+156    	; 0x778 <USB_INT_DisableAllInterrupts>
 6dc:	55 d0       	rcall	.+170    	; 0x788 <USB_INT_ClearAllInterrupts>
	USB_INT_ClearAllInterrupts();
 6de:	c8 ed       	ldi	r28, 0xD8	; 216
 6e0:	d0 e0       	ldi	r29, 0x00	; 0
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
 6e2:	88 81       	ld	r24, Y
 6e4:	8f 77       	andi	r24, 0x7F	; 127
 6e6:	88 83       	st	Y, r24
 6e8:	88 81       	ld	r24, Y
 6ea:	80 68       	ori	r24, 0x80	; 128
				USBCON |=  (1 << USBE);
 6ec:	88 83       	st	Y, r24
 6ee:	88 81       	ld	r24, Y
 6f0:	8f 7d       	andi	r24, 0xDF	; 223
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
 6f2:	88 83       	st	Y, r24
 6f4:	e7 ed       	ldi	r30, 0xD7	; 215
 6f6:	f0 e0       	ldi	r31, 0x00	; 0

	if (USB_CurrentMode == USB_MODE_Device)
	{
		#if defined(USB_CAN_BE_DEVICE)
		#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
		UHWCON |=  (1 << UIMOD);
 6f8:	80 81       	ld	r24, Z
 6fa:	80 68       	ori	r24, 0x80	; 128
 6fc:	80 83       	st	Z, r24
 6fe:	19 bc       	out	0x29, r1	; 41
 700:	10 92 9d 01 	sts	0x019D, r1
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState                 = DEVICE_STATE_Unattached;
 704:	10 92 99 01 	sts	0x0199, r1
	USB_Device_ConfigurationNumber  = 0;
 708:	10 92 9b 01 	sts	0x019B, r1

	#if !defined(NO_DEVICE_REMOTE_WAKEUP)
	USB_Device_RemoteWakeupEnabled  = false;
 70c:	10 92 9a 01 	sts	0x019A, r1
	#endif

	#if !defined(NO_DEVICE_SELF_POWER)
	USB_Device_CurrentlySelfPowered = false;
 710:	00 ee       	ldi	r16, 0xE0	; 224
 712:	10 e0       	ldi	r17, 0x00	; 0
			}

			static inline void USB_Device_SetFullSpeed(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetFullSpeed(void)
			{
				UDCON &= ~(1 << LSM);
 714:	f8 01       	movw	r30, r16
 716:	80 81       	ld	r24, Z
 718:	8b 7f       	andi	r24, 0xFB	; 251
 71a:	80 83       	st	Z, r24
 71c:	88 81       	ld	r24, Y
 71e:	81 60       	ori	r24, 0x01	; 1
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBCON |= (1 << VBUSTE);
 720:	88 83       	st	Y, r24
 722:	80 e0       	ldi	r24, 0x00	; 0
 724:	60 e0       	ldi	r22, 0x00	; 0
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
 726:	42 e0       	ldi	r20, 0x02	; 2
 728:	0f df       	rcall	.-482    	; 0x548 <Endpoint_ConfigureEndpoint_Prv>
 72a:	e1 ee       	ldi	r30, 0xE1	; 225
 72c:	f0 e0       	ldi	r31, 0x00	; 0
 72e:	80 81       	ld	r24, Z
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
 730:	8e 7f       	andi	r24, 0xFE	; 254
 732:	80 83       	st	Z, r24
 734:	e2 ee       	ldi	r30, 0xE2	; 226
 736:	f0 e0       	ldi	r31, 0x00	; 0
 738:	80 81       	ld	r24, Z
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
 73a:	81 60       	ori	r24, 0x01	; 1
 73c:	80 83       	st	Z, r24
 73e:	80 81       	ld	r24, Z
 740:	88 60       	ori	r24, 0x08	; 8
 742:	80 83       	st	Z, r24
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
 744:	f8 01       	movw	r30, r16
 746:	80 81       	ld	r24, Z
 748:	8e 7f       	andi	r24, 0xFE	; 254
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
 74a:	80 83       	st	Z, r24
 74c:	88 81       	ld	r24, Y
 74e:	80 61       	ori	r24, 0x10	; 16
 750:	88 83       	st	Y, r24

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON |=  (1 << OTGPADE);
 752:	df 91       	pop	r29
 754:	cf 91       	pop	r28
 756:	1f 91       	pop	r17
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
 758:	0f 91       	pop	r16
 75a:	08 95       	ret

0000075c <USB_Init>:
 75c:	e8 ed       	ldi	r30, 0xD8	; 216
 75e:	f0 e0       	ldi	r31, 0x00	; 0
 760:	80 81       	ld	r24, Z
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON &= ~(1 << OTGPADE);
 762:	8f 7e       	andi	r24, 0xEF	; 239
 764:	80 83       	st	Z, r24

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON |=  (1 << UVREGE);
 766:	e7 ed       	ldi	r30, 0xD7	; 215
 768:	f0 e0       	ldi	r31, 0x00	; 0
 76a:	80 81       	ld	r24, Z
 76c:	81 60       	ori	r24, 0x01	; 1
 76e:	80 83       	st	Z, r24
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
 770:	81 e0       	ldi	r24, 0x01	; 1
 772:	80 93 9c 01 	sts	0x019C, r24

	USB_ResetInterface();
 776:	ad cf       	rjmp	.-166    	; 0x6d2 <USB_ResetInterface>

00000778 <USB_INT_DisableAllInterrupts>:
#include "../USBInterrupt.h"

void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
 778:	e8 ed       	ldi	r30, 0xD8	; 216
 77a:	f0 e0       	ldi	r31, 0x00	; 0
 77c:	80 81       	ld	r24, Z
 77e:	8c 7f       	andi	r24, 0xFC	; 252
 780:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
 782:	10 92 e2 00 	sts	0x00E2, r1
	#endif
}
 786:	08 95       	ret

00000788 <USB_INT_ClearAllInterrupts>:

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
 788:	10 92 da 00 	sts	0x00DA, r1
	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
 78c:	10 92 e1 00 	sts	0x00E1, r1
	#endif
}
 790:	08 95       	ret

00000792 <__vector_10>:

ISR(USB_GEN_vect, ISR_BLOCK)
{
 792:	1f 92       	push	r1
 794:	0f 92       	push	r0
 796:	0f b6       	in	r0, 0x3f	; 63
 798:	0f 92       	push	r0
 79a:	0b b6       	in	r0, 0x3b	; 59
 79c:	0f 92       	push	r0
 79e:	11 24       	eor	r1, r1
 7a0:	2f 93       	push	r18
 7a2:	3f 93       	push	r19
 7a4:	4f 93       	push	r20
 7a6:	5f 93       	push	r21
 7a8:	6f 93       	push	r22
 7aa:	7f 93       	push	r23
 7ac:	8f 93       	push	r24
 7ae:	9f 93       	push	r25
 7b0:	af 93       	push	r26
 7b2:	bf 93       	push	r27
 7b4:	ef 93       	push	r30
 7b6:	ff 93       	push	r31
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
					case USB_INT_SOFI:
						return (UDINT  & (1 << SOFI));
 7b8:	80 91 e1 00 	lds	r24, 0x00E1
	#if defined(USB_CAN_BE_DEVICE)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
 7bc:	82 ff       	sbrs	r24, 2
 7be:	0a c0       	rjmp	.+20     	; 0x7d4 <__vector_10+0x42>
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
					case USB_INT_SOFI:
						return (UDIEN  & (1 << SOFE));
 7c0:	80 91 e2 00 	lds	r24, 0x00E2
 7c4:	82 ff       	sbrs	r24, 2
 7c6:	06 c0       	rjmp	.+12     	; 0x7d4 <__vector_10+0x42>
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
						break;
					case USB_INT_SOFI:
						UDINT  &= ~(1 << SOFI);
 7c8:	80 91 e1 00 	lds	r24, 0x00E1
 7cc:	8b 7f       	andi	r24, 0xFB	; 251
 7ce:	80 93 e1 00 	sts	0x00E1, r24
	{
		USB_INT_Clear(USB_INT_SOFI);

		EVENT_USB_Device_StartOfFrame();
 7d2:	51 d2       	rcall	.+1186   	; 0xc76 <USB_Event_Stub>
 7d4:	80 91 da 00 	lds	r24, 0x00DA
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBINT & (1 << VBUSTI));
 7d8:	80 ff       	sbrs	r24, 0
	}
	#endif

	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	if (USB_INT_HasOccurred(USB_INT_VBUSTI) && USB_INT_IsEnabled(USB_INT_VBUSTI))
 7da:	1d c0       	rjmp	.+58     	; 0x816 <__vector_10+0x84>
 7dc:	80 91 d8 00 	lds	r24, 0x00D8
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBCON & (1 << VBUSTE));
 7e0:	80 ff       	sbrs	r24, 0
 7e2:	19 c0       	rjmp	.+50     	; 0x816 <__vector_10+0x84>
 7e4:	80 91 da 00 	lds	r24, 0x00DA
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBINT &= ~(1 << VBUSTI);
 7e8:	8e 7f       	andi	r24, 0xFE	; 254
 7ea:	80 93 da 00 	sts	0x00DA, r24
 7ee:	80 91 d9 00 	lds	r24, 0x00D9
				 *  \return Boolean \c true if the VBUS line is currently detecting power from a host, \c false otherwise.
				 */
				static inline bool USB_VBUS_GetStatus(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
				static inline bool USB_VBUS_GetStatus(void)
				{
					return ((USBSTA & (1 << VBUS)) ? true : false);
 7f2:	80 ff       	sbrs	r24, 0
	{
		USB_INT_Clear(USB_INT_VBUSTI);

		if (USB_VBUS_GetStatus())
 7f4:	0c c0       	rjmp	.+24     	; 0x80e <__vector_10+0x7c>
 7f6:	8c e0       	ldi	r24, 0x0C	; 12

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
 7f8:	89 bd       	out	0x29, r24	; 41
 7fa:	8e e0       	ldi	r24, 0x0E	; 14
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
 7fc:	89 bd       	out	0x29, r24	; 41
 7fe:	09 b4       	in	r0, 0x29	; 41
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			{
				USB_PLL_On();
				while (!(USB_PLL_IsReady()));
 800:	00 fe       	sbrs	r0, 0
 802:	fd cf       	rjmp	.-6      	; 0x7fe <__vector_10+0x6c>
 804:	81 e0       	ldi	r24, 0x01	; 1
			}

			USB_DeviceState = DEVICE_STATE_Powered;
 806:	80 93 9d 01 	sts	0x019D, r24
 80a:	49 dd       	rcall	.-1390   	; 0x29e <EVENT_USB_Device_Connect>
			EVENT_USB_Device_Connect();
 80c:	04 c0       	rjmp	.+8      	; 0x816 <__vector_10+0x84>
 80e:	19 bc       	out	0x29, r1	; 41
 810:	10 92 9d 01 	sts	0x019D, r1
		else
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			  USB_PLL_Off();

			USB_DeviceState = DEVICE_STATE_Unattached;
 814:	46 dd       	rcall	.-1396   	; 0x2a2 <EVENT_USB_Device_Disconnect>
 816:	80 91 e1 00 	lds	r24, 0x00E1
			EVENT_USB_Device_Disconnect();
 81a:	80 ff       	sbrs	r24, 0
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
 81c:	18 c0       	rjmp	.+48     	; 0x84e <__vector_10+0xbc>
 81e:	80 91 e2 00 	lds	r24, 0x00E2
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
 822:	80 ff       	sbrs	r24, 0
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
 824:	14 c0       	rjmp	.+40     	; 0x84e <__vector_10+0xbc>
 826:	80 91 e2 00 	lds	r24, 0x00E2
 82a:	8e 7f       	andi	r24, 0xFE	; 254
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
 82c:	80 93 e2 00 	sts	0x00E2, r24
 830:	80 91 e2 00 	lds	r24, 0x00E2
 834:	80 61       	ori	r24, 0x10	; 16
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
 836:	80 93 e2 00 	sts	0x00E2, r24
 83a:	80 91 d8 00 	lds	r24, 0x00D8
 83e:	80 62       	ori	r24, 0x20	; 32
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON |=  (1 << FRZCLK);
 840:	80 93 d8 00 	sts	0x00D8, r24
 844:	19 bc       	out	0x29, r1	; 41
 846:	85 e0       	ldi	r24, 0x05	; 5
 848:	80 93 9d 01 	sts	0x019D, r24

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
		EVENT_USB_Device_Disconnect();
		#else
		USB_DeviceState = DEVICE_STATE_Suspended;
 84c:	14 d2       	rcall	.+1064   	; 0xc76 <USB_Event_Stub>
 84e:	80 91 e1 00 	lds	r24, 0x00E1
		EVENT_USB_Device_Suspend();
 852:	84 ff       	sbrs	r24, 4
 854:	2d c0       	rjmp	.+90     	; 0x8b0 <__vector_10+0x11e>
					case USB_INT_IDTI:
						return (USBINT & (1 << IDTI));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
 856:	80 91 e2 00 	lds	r24, 0x00E2
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
 85a:	84 ff       	sbrs	r24, 4
 85c:	29 c0       	rjmp	.+82     	; 0x8b0 <__vector_10+0x11e>
					case USB_INT_IDTI:
						return (USBCON & (1 << IDTE));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
 85e:	8c e0       	ldi	r24, 0x0C	; 12
 860:	89 bd       	out	0x29, r24	; 41
 862:	8e e0       	ldi	r24, 0x0E	; 14
 864:	89 bd       	out	0x29, r24	; 41

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
 866:	09 b4       	in	r0, 0x29	; 41
 868:	00 fe       	sbrs	r0, 0
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
 86a:	fd cf       	rjmp	.-6      	; 0x866 <__vector_10+0xd4>
 86c:	80 91 d8 00 	lds	r24, 0x00D8
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
 870:	8f 7d       	andi	r24, 0xDF	; 223
 872:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
 876:	80 91 e1 00 	lds	r24, 0x00E1
 87a:	8f 7e       	andi	r24, 0xEF	; 239
 87c:	80 93 e1 00 	sts	0x00E1, r24
						USBINT &= ~(1 << IDTI);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
 880:	80 91 e2 00 	lds	r24, 0x00E2
 884:	8f 7e       	andi	r24, 0xEF	; 239
 886:	80 93 e2 00 	sts	0x00E2, r24
						USBCON &= ~(1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
 88a:	80 91 e2 00 	lds	r24, 0x00E2
 88e:	81 60       	ori	r24, 0x01	; 1
 890:	80 93 e2 00 	sts	0x00E2, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
 894:	80 91 99 01 	lds	r24, 0x0199
 898:	88 23       	and	r24, r24
 89a:	21 f4       	brne	.+8      	; 0x8a4 <__vector_10+0x112>
		USB_INT_Clear(USB_INT_WAKEUPI);

		USB_INT_Disable(USB_INT_WAKEUPI);
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_Device_ConfigurationNumber)
 89c:	80 91 e3 00 	lds	r24, 0x00E3
 8a0:	87 ff       	sbrs	r24, 7
 8a2:	02 c0       	rjmp	.+4      	; 0x8a8 <__vector_10+0x116>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
 8a4:	84 e0       	ldi	r24, 0x04	; 4
 8a6:	01 c0       	rjmp	.+2      	; 0x8aa <__vector_10+0x118>
		  USB_DeviceState = DEVICE_STATE_Configured;
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
 8a8:	81 e0       	ldi	r24, 0x01	; 1
 8aa:	80 93 9d 01 	sts	0x019D, r24
 8ae:	e3 d1       	rcall	.+966    	; 0xc76 <USB_Event_Stub>
 8b0:	80 91 e1 00 	lds	r24, 0x00E1
 8b4:	83 ff       	sbrs	r24, 3

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
		#else
		EVENT_USB_Device_WakeUp();
 8b6:	27 c0       	rjmp	.+78     	; 0x906 <__vector_10+0x174>
 8b8:	80 91 e2 00 	lds	r24, 0x00E2
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
 8bc:	83 ff       	sbrs	r24, 3
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
 8be:	23 c0       	rjmp	.+70     	; 0x906 <__vector_10+0x174>
 8c0:	80 91 e1 00 	lds	r24, 0x00E1
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
 8c4:	87 7f       	andi	r24, 0xF7	; 247
 8c6:	80 93 e1 00 	sts	0x00E1, r24
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
 8ca:	82 e0       	ldi	r24, 0x02	; 2
 8cc:	80 93 9d 01 	sts	0x019D, r24
 8d0:	10 92 99 01 	sts	0x0199, r1
	{
		USB_INT_Clear(USB_INT_EORSTI);

		USB_DeviceState                = DEVICE_STATE_Default;
 8d4:	80 91 e1 00 	lds	r24, 0x00E1
 8d8:	8e 7f       	andi	r24, 0xFE	; 254
		USB_Device_ConfigurationNumber = 0;
 8da:	80 93 e1 00 	sts	0x00E1, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
 8de:	80 91 e2 00 	lds	r24, 0x00E2
 8e2:	8e 7f       	andi	r24, 0xFE	; 254
 8e4:	80 93 e2 00 	sts	0x00E2, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
 8e8:	80 91 e2 00 	lds	r24, 0x00E2
 8ec:	80 61       	ori	r24, 0x10	; 16
 8ee:	80 93 e2 00 	sts	0x00E2, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
 8f2:	80 e0       	ldi	r24, 0x00	; 0
 8f4:	60 e0       	ldi	r22, 0x00	; 0
 8f6:	42 e0       	ldi	r20, 0x02	; 2
 8f8:	27 de       	rcall	.-946    	; 0x548 <Endpoint_ConfigureEndpoint_Prv>
 8fa:	80 91 f0 00 	lds	r24, 0x00F0
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
 8fe:	88 60       	ori	r24, 0x08	; 8
 900:	80 93 f0 00 	sts	0x00F0, r24
 904:	b8 d1       	rcall	.+880    	; 0xc76 <USB_Event_Stub>
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX |= (1 << RXSTPE);
 906:	ff 91       	pop	r31
 908:	ef 91       	pop	r30
 90a:	bf 91       	pop	r27
 90c:	af 91       	pop	r26
 90e:	9f 91       	pop	r25

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
 910:	8f 91       	pop	r24
 912:	7f 91       	pop	r23
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
 914:	6f 91       	pop	r22
 916:	5f 91       	pop	r21
 918:	4f 91       	pop	r20
 91a:	3f 91       	pop	r19
 91c:	2f 91       	pop	r18
 91e:	0f 90       	pop	r0
 920:	0b be       	out	0x3b, r0	; 59
 922:	0f 90       	pop	r0
 924:	0f be       	out	0x3f, r0	; 63
 926:	0f 90       	pop	r0
 928:	1f 90       	pop	r1
 92a:	18 95       	reti

0000092c <__vector_11>:
 92c:	1f 92       	push	r1
 92e:	0f 92       	push	r0
 930:	0f b6       	in	r0, 0x3f	; 63
 932:	0f 92       	push	r0
 934:	0b b6       	in	r0, 0x3b	; 59
 936:	0f 92       	push	r0
 938:	11 24       	eor	r1, r1

#if defined(INTERRUPT_CONTROL_ENDPOINT) && defined(USB_CAN_BE_DEVICE)
ISR(USB_COM_vect, ISR_BLOCK)
{
 93a:	2f 93       	push	r18
 93c:	3f 93       	push	r19
 93e:	4f 93       	push	r20
 940:	5f 93       	push	r21
 942:	6f 93       	push	r22
 944:	7f 93       	push	r23
 946:	8f 93       	push	r24
 948:	9f 93       	push	r25
 94a:	af 93       	push	r26
 94c:	bf 93       	push	r27
 94e:	cf 93       	push	r28
 950:	ef 93       	push	r30
 952:	ff 93       	push	r31
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
 954:	c0 91 e9 00 	lds	r28, 0x00E9
 958:	cf 70       	andi	r28, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
 95a:	80 91 ec 00 	lds	r24, 0x00EC
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 95e:	10 92 e9 00 	sts	0x00E9, r1
						break;
					case USB_INT_SOFI:
						UDIEN  &= ~(1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX &= ~(1 << RXSTPE);
 962:	80 91 f0 00 	lds	r24, 0x00F0
 966:	87 7f       	andi	r24, 0xF7	; 247
 968:	80 93 f0 00 	sts	0x00F0, r24
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				sei();
 96c:	78 94       	sei
	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Disable(USB_INT_RXSTPI);

	GlobalInterruptEnable();

	USB_Device_ProcessControlRequest();
 96e:	1d d0       	rcall	.+58     	; 0x9aa <USB_Device_ProcessControlRequest>
 970:	10 92 e9 00 	sts	0x00E9, r1
 974:	80 91 f0 00 	lds	r24, 0x00F0
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX |= (1 << RXSTPE);
 978:	88 60       	ori	r24, 0x08	; 8
 97a:	80 93 f0 00 	sts	0x00F0, r24
 97e:	c0 93 e9 00 	sts	0x00E9, r28
 982:	ff 91       	pop	r31

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Enable(USB_INT_RXSTPI);
	Endpoint_SelectEndpoint(PrevSelectedEndpoint);
}
 984:	ef 91       	pop	r30
 986:	cf 91       	pop	r28
 988:	bf 91       	pop	r27
 98a:	af 91       	pop	r26
 98c:	9f 91       	pop	r25
 98e:	8f 91       	pop	r24
 990:	7f 91       	pop	r23
 992:	6f 91       	pop	r22
 994:	5f 91       	pop	r21
 996:	4f 91       	pop	r20
 998:	3f 91       	pop	r19
 99a:	2f 91       	pop	r18
 99c:	0f 90       	pop	r0
 99e:	0b be       	out	0x3b, r0	; 59
 9a0:	0f 90       	pop	r0
 9a2:	0f be       	out	0x3f, r0	; 63
 9a4:	0f 90       	pop	r0
 9a6:	1f 90       	pop	r1
 9a8:	18 95       	reti

000009aa <USB_Device_ProcessControlRequest>:
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_Device_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
 9aa:	1f 93       	push	r17
 9ac:	cf 93       	push	r28
 9ae:	df 93       	push	r29
 9b0:	cd b7       	in	r28, 0x3d	; 61
 9b2:	de b7       	in	r29, 0x3e	; 62
 9b4:	ac 97       	sbiw	r28, 0x2c	; 44
 9b6:	0f b6       	in	r0, 0x3f	; 63
 9b8:	f8 94       	cli
 9ba:	de bf       	out	0x3e, r29	; 62
 9bc:	0f be       	out	0x3f, r0	; 63
 9be:	cd bf       	out	0x3d, r28	; 61
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
 9c0:	80 e0       	ldi	r24, 0x00	; 0
	USB_ControlRequest.bRequest      = Endpoint_Read_8();
	USB_ControlRequest.wValue        = Endpoint_Read_16_LE();
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;
 9c2:	ee e9       	ldi	r30, 0x9E	; 158
 9c4:	f1 e0       	ldi	r31, 0x01	; 1
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
 9c6:	90 91 f1 00 	lds	r25, 0x00F1

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_8();
 9ca:	91 93       	st	Z+, r25
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
 9cc:	8f 5f       	subi	r24, 0xFF	; 255
 9ce:	88 30       	cpi	r24, 0x08	; 8
 9d0:	d1 f7       	brne	.-12     	; 0x9c6 <USB_Device_ProcessControlRequest+0x1c>
	  *(RequestHeader++) = Endpoint_Read_8();
	#endif

	EVENT_USB_Device_ControlRequest();
 9d2:	80 dc       	rcall	.-1792   	; 0x2d4 <EVENT_USB_Device_ControlRequest>
 9d4:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 9d8:	83 ff       	sbrs	r24, 3

	if (Endpoint_IsSETUPReceived())
 9da:	35 c1       	rjmp	.+618    	; 0xc46 <USB_Device_ProcessControlRequest+0x29c>
 9dc:	80 91 9e 01 	lds	r24, 0x019E
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
 9e0:	20 91 9f 01 	lds	r18, 0x019F

		switch (USB_ControlRequest.bRequest)
 9e4:	25 30       	cpi	r18, 0x05	; 5
 9e6:	09 f4       	brne	.+2      	; 0x9ea <USB_Device_ProcessControlRequest+0x40>
 9e8:	84 c0       	rjmp	.+264    	; 0xaf2 <USB_Device_ProcessControlRequest+0x148>
 9ea:	26 30       	cpi	r18, 0x06	; 6
 9ec:	40 f4       	brcc	.+16     	; 0x9fe <USB_Device_ProcessControlRequest+0x54>
 9ee:	21 30       	cpi	r18, 0x01	; 1
 9f0:	a1 f1       	breq	.+104    	; 0xa5a <USB_Device_ProcessControlRequest+0xb0>
 9f2:	21 30       	cpi	r18, 0x01	; 1
 9f4:	70 f0       	brcs	.+28     	; 0xa12 <USB_Device_ProcessControlRequest+0x68>
 9f6:	23 30       	cpi	r18, 0x03	; 3
 9f8:	09 f0       	breq	.+2      	; 0x9fc <USB_Device_ProcessControlRequest+0x52>
 9fa:	25 c1       	rjmp	.+586    	; 0xc46 <USB_Device_ProcessControlRequest+0x29c>
 9fc:	2e c0       	rjmp	.+92     	; 0xa5a <USB_Device_ProcessControlRequest+0xb0>
 9fe:	28 30       	cpi	r18, 0x08	; 8
 a00:	09 f4       	brne	.+2      	; 0xa04 <USB_Device_ProcessControlRequest+0x5a>
 a02:	f3 c0       	rjmp	.+486    	; 0xbea <USB_Device_ProcessControlRequest+0x240>
 a04:	29 30       	cpi	r18, 0x09	; 9
 a06:	09 f4       	brne	.+2      	; 0xa0a <USB_Device_ProcessControlRequest+0x60>
 a08:	02 c1       	rjmp	.+516    	; 0xc0e <USB_Device_ProcessControlRequest+0x264>
 a0a:	26 30       	cpi	r18, 0x06	; 6
 a0c:	09 f0       	breq	.+2      	; 0xa10 <USB_Device_ProcessControlRequest+0x66>
 a0e:	1b c1       	rjmp	.+566    	; 0xc46 <USB_Device_ProcessControlRequest+0x29c>
 a10:	93 c0       	rjmp	.+294    	; 0xb38 <USB_Device_ProcessControlRequest+0x18e>
 a12:	80 38       	cpi	r24, 0x80	; 128
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
 a14:	21 f0       	breq	.+8      	; 0xa1e <USB_Device_ProcessControlRequest+0x74>
 a16:	82 38       	cpi	r24, 0x82	; 130
 a18:	09 f0       	breq	.+2      	; 0xa1c <USB_Device_ProcessControlRequest+0x72>
 a1a:	15 c1       	rjmp	.+554    	; 0xc46 <USB_Device_ProcessControlRequest+0x29c>
 a1c:	08 c0       	rjmp	.+16     	; 0xa2e <USB_Device_ProcessControlRequest+0x84>
 a1e:	80 91 9a 01 	lds	r24, 0x019A
	Endpoint_ClearOUT();
}

static void USB_Device_GetStatus(void)
{
	uint8_t CurrentStatus = 0;
 a22:	90 91 9b 01 	lds	r25, 0x019B
			if (USB_Device_CurrentlySelfPowered)
			  CurrentStatus |= FEATURE_SELFPOWERED_ENABLED;
			#endif

			#if !defined(NO_DEVICE_REMOTE_WAKEUP)
			if (USB_Device_RemoteWakeupEnabled)
 a26:	99 23       	and	r25, r25
 a28:	71 f0       	breq	.+28     	; 0xa46 <USB_Device_ProcessControlRequest+0x9c>
 a2a:	82 60       	ori	r24, 0x02	; 2
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
 a2c:	0c c0       	rjmp	.+24     	; 0xa46 <USB_Device_ProcessControlRequest+0x9c>
 a2e:	80 91 a2 01 	lds	r24, 0x01A2
			#endif
			break;
		case (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_ENDPOINT):
			#if !defined(CONTROL_ONLY_DEVICE)
			Endpoint_SelectEndpoint((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
 a32:	8f 70       	andi	r24, 0x0F	; 15
 a34:	80 93 e9 00 	sts	0x00E9, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 a38:	90 91 eb 00 	lds	r25, 0x00EB
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
 a3c:	81 e0       	ldi	r24, 0x01	; 1

			CurrentStatus = Endpoint_IsStalled();
 a3e:	95 ff       	sbrs	r25, 5
 a40:	80 e0       	ldi	r24, 0x00	; 0
 a42:	10 92 e9 00 	sts	0x00E9, r1
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 a46:	90 91 e8 00 	lds	r25, 0x00E8
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 a4a:	97 7f       	andi	r25, 0xF7	; 247
 a4c:	90 93 e8 00 	sts	0x00E8, r25
 a50:	80 93 f1 00 	sts	0x00F1, r24
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
 a54:	10 92 f1 00 	sts	0x00F1, r1
				UEDATX = (Data >> 8);
 a58:	d3 c0       	rjmp	.+422    	; 0xc00 <USB_Device_ProcessControlRequest+0x256>
 a5a:	88 23       	and	r24, r24
				}

				break;
			case REQ_ClearFeature:
			case REQ_SetFeature:
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
 a5c:	19 f0       	breq	.+6      	; 0xa64 <USB_Device_ProcessControlRequest+0xba>
 a5e:	82 30       	cpi	r24, 0x02	; 2
 a60:	09 f0       	breq	.+2      	; 0xa64 <USB_Device_ProcessControlRequest+0xba>
 a62:	f1 c0       	rjmp	.+482    	; 0xc46 <USB_Device_ProcessControlRequest+0x29c>
 a64:	90 e0       	ldi	r25, 0x00	; 0
	Endpoint_ClearStatusStage();
}

static void USB_Device_ClearSetFeature(void)
{
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
 a66:	8f 71       	andi	r24, 0x1F	; 31
 a68:	90 70       	andi	r25, 0x00	; 0
 a6a:	00 97       	sbiw	r24, 0x00	; 0
 a6c:	29 f0       	breq	.+10     	; 0xa78 <USB_Device_ProcessControlRequest+0xce>
 a6e:	82 30       	cpi	r24, 0x02	; 2
 a70:	91 05       	cpc	r25, r1
 a72:	09 f0       	breq	.+2      	; 0xa76 <USB_Device_ProcessControlRequest+0xcc>
 a74:	e8 c0       	rjmp	.+464    	; 0xc46 <USB_Device_ProcessControlRequest+0x29c>
 a76:	0b c0       	rjmp	.+22     	; 0xa8e <USB_Device_ProcessControlRequest+0xe4>
 a78:	80 91 a0 01 	lds	r24, 0x01A0
	{
		#if !defined(NO_DEVICE_REMOTE_WAKEUP)
		case REQREC_DEVICE:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
 a7c:	81 30       	cpi	r24, 0x01	; 1
 a7e:	09 f0       	breq	.+2      	; 0xa82 <USB_Device_ProcessControlRequest+0xd8>
 a80:	e2 c0       	rjmp	.+452    	; 0xc46 <USB_Device_ProcessControlRequest+0x29c>
 a82:	23 30       	cpi	r18, 0x03	; 3
			  USB_Device_RemoteWakeupEnabled = (USB_ControlRequest.bRequest == REQ_SetFeature);
 a84:	09 f0       	breq	.+2      	; 0xa88 <USB_Device_ProcessControlRequest+0xde>
 a86:	80 e0       	ldi	r24, 0x00	; 0
 a88:	80 93 9b 01 	sts	0x019B, r24
 a8c:	2c c0       	rjmp	.+88     	; 0xae6 <USB_Device_ProcessControlRequest+0x13c>
 a8e:	80 91 a0 01 	lds	r24, 0x01A0

			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
 a92:	88 23       	and	r24, r24
 a94:	41 f5       	brne	.+80     	; 0xae6 <USB_Device_ProcessControlRequest+0x13c>
 a96:	20 91 a2 01 	lds	r18, 0x01A2
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
 a9a:	2f 70       	andi	r18, 0x0F	; 15
 a9c:	09 f4       	brne	.+2      	; 0xaa0 <USB_Device_ProcessControlRequest+0xf6>

				if (EndpointIndex == ENDPOINT_CONTROLEP)
 a9e:	d3 c0       	rjmp	.+422    	; 0xc46 <USB_Device_ProcessControlRequest+0x29c>
 aa0:	20 93 e9 00 	sts	0x00E9, r18
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 aa4:	80 91 eb 00 	lds	r24, 0x00EB
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
 aa8:	80 ff       	sbrs	r24, 0
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
 aaa:	1d c0       	rjmp	.+58     	; 0xae6 <USB_Device_ProcessControlRequest+0x13c>
 aac:	80 91 9f 01 	lds	r24, 0x019F
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
 ab0:	83 30       	cpi	r24, 0x03	; 3
 ab2:	21 f4       	brne	.+8      	; 0xabc <USB_Device_ProcessControlRequest+0x112>
 ab4:	80 91 eb 00 	lds	r24, 0x00EB
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
 ab8:	80 62       	ori	r24, 0x20	; 32
 aba:	13 c0       	rjmp	.+38     	; 0xae2 <USB_Device_ProcessControlRequest+0x138>
 abc:	80 91 eb 00 	lds	r24, 0x00EB
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
 ac0:	80 61       	ori	r24, 0x10	; 16
 ac2:	80 93 eb 00 	sts	0x00EB, r24
 ac6:	81 e0       	ldi	r24, 0x01	; 1
			 *  \param[in] Address  Endpoint address whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t Address)
			{
				UERST = (1 << (Address & ENDPOINT_EPNUM_MASK));
 ac8:	90 e0       	ldi	r25, 0x00	; 0
 aca:	02 c0       	rjmp	.+4      	; 0xad0 <USB_Device_ProcessControlRequest+0x126>
 acc:	88 0f       	add	r24, r24
 ace:	99 1f       	adc	r25, r25
 ad0:	2a 95       	dec	r18
 ad2:	e2 f7       	brpl	.-8      	; 0xacc <USB_Device_ProcessControlRequest+0x122>
 ad4:	80 93 ea 00 	sts	0x00EA, r24
 ad8:	10 92 ea 00 	sts	0x00EA, r1
				UERST = 0;
 adc:	80 91 eb 00 	lds	r24, 0x00EB

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
 ae0:	88 60       	ori	r24, 0x08	; 8
 ae2:	80 93 eb 00 	sts	0x00EB, r24
 ae6:	10 92 e9 00 	sts	0x00E9, r1
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 aea:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 aee:	87 7f       	andi	r24, 0xF7	; 247
 af0:	8a c0       	rjmp	.+276    	; 0xc06 <USB_Device_ProcessControlRequest+0x25c>
 af2:	88 23       	and	r24, r24
					USB_Device_ClearSetFeature();
				}

				break;
			case REQ_SetAddress:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
 af4:	09 f0       	breq	.+2      	; 0xaf8 <USB_Device_ProcessControlRequest+0x14e>
 af6:	a7 c0       	rjmp	.+334    	; 0xc46 <USB_Device_ProcessControlRequest+0x29c>
 af8:	10 91 a0 01 	lds	r17, 0x01A0
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t DeviceAddress = (USB_ControlRequest.wValue & 0x7F);
 afc:	1f 77       	andi	r17, 0x7F	; 127
 afe:	80 91 e3 00 	lds	r24, 0x00E3
			#endif

			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				UDADDR = (UDADDR & (1 << ADDEN)) | (Address & 0x7F);
 b02:	80 78       	andi	r24, 0x80	; 128
 b04:	81 2b       	or	r24, r17
 b06:	80 93 e3 00 	sts	0x00E3, r24
 b0a:	80 91 e8 00 	lds	r24, 0x00E8
 b0e:	87 7f       	andi	r24, 0xF7	; 247
 b10:	80 93 e8 00 	sts	0x00E8, r24
 b14:	8a dd       	rcall	.-1260   	; 0x62a <Endpoint_ClearStatusStage>

	USB_Device_SetDeviceAddress(DeviceAddress);

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
 b16:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 b1a:	80 ff       	sbrs	r24, 0
 b1c:	fc cf       	rjmp	.-8      	; 0xb16 <USB_Device_ProcessControlRequest+0x16c>

	while (!(Endpoint_IsINReady()));
 b1e:	80 91 e3 00 	lds	r24, 0x00E3
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address)
			{
				(void)Address;
				
				UDADDR |= (1 << ADDEN);
 b22:	80 68       	ori	r24, 0x80	; 128
 b24:	80 93 e3 00 	sts	0x00E3, r24
 b28:	11 23       	and	r17, r17
 b2a:	11 f0       	breq	.+4      	; 0xb30 <USB_Device_ProcessControlRequest+0x186>

	USB_Device_EnableDeviceAddress(DeviceAddress);

	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
 b2c:	83 e0       	ldi	r24, 0x03	; 3
 b2e:	01 c0       	rjmp	.+2      	; 0xb32 <USB_Device_ProcessControlRequest+0x188>
 b30:	82 e0       	ldi	r24, 0x02	; 2
 b32:	80 93 9d 01 	sts	0x019D, r24
 b36:	87 c0       	rjmp	.+270    	; 0xc46 <USB_Device_ProcessControlRequest+0x29c>
 b38:	80 58       	subi	r24, 0x80	; 128
 b3a:	82 30       	cpi	r24, 0x02	; 2
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_SetAddress();

				break;
			case REQ_GetDescriptor:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
 b3c:	08 f0       	brcs	.+2      	; 0xb40 <USB_Device_ProcessControlRequest+0x196>
 b3e:	83 c0       	rjmp	.+262    	; 0xc46 <USB_Device_ProcessControlRequest+0x29c>
 b40:	80 91 a0 01 	lds	r24, 0x01A0
	    !(defined(USE_FLASH_DESCRIPTORS) || defined(USE_EEPROM_DESCRIPTORS) || defined(USE_RAM_DESCRIPTORS))
	uint8_t DescriptorAddressSpace;
	#endif

	#if !defined(NO_INTERNAL_SERIAL) && (USE_INTERNAL_SERIAL != NO_DESCRIPTOR)
	if (USB_ControlRequest.wValue == ((DTYPE_String << 8) | USE_INTERNAL_SERIAL))
 b44:	90 91 a1 01 	lds	r25, 0x01A1
 b48:	23 e0       	ldi	r18, 0x03	; 3
 b4a:	8c 3d       	cpi	r24, 0xDC	; 220
 b4c:	92 07       	cpc	r25, r18
 b4e:	a9 f5       	brne	.+106    	; 0xbba <USB_Device_ProcessControlRequest+0x210>
 b50:	83 e0       	ldi	r24, 0x03	; 3
 b52:	8c 83       	std	Y+4, r24	; 0x04
	{
		USB_Descriptor_Header_t Header;
		uint16_t                UnicodeString[INTERNAL_SERIAL_LENGTH_BITS / 4];
	} SignatureDescriptor;

	SignatureDescriptor.Header.Type = DTYPE_String;
 b54:	8a e2       	ldi	r24, 0x2A	; 42
 b56:	8b 83       	std	Y+3, r24	; 0x03
	SignatureDescriptor.Header.Size = USB_STRING_LEN(INTERNAL_SERIAL_LENGTH_BITS / 4);
 b58:	5f b7       	in	r21, 0x3f	; 63
 b5a:	f8 94       	cli
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
 b5c:	de 01       	movw	r26, r28
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
 b5e:	13 96       	adiw	r26, 0x03	; 3
				__builtin_ssrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				cli();
				#endif

				GCC_MEMORY_BARRIER();
 b60:	80 e0       	ldi	r24, 0x00	; 0
 b62:	90 e0       	ldi	r25, 0x00	; 0
 b64:	4e e0       	ldi	r20, 0x0E	; 14
 b66:	61 e2       	ldi	r22, 0x21	; 33
			static inline void USB_Device_GetSerialString(uint16_t* const UnicodeString)
			{
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;
 b68:	e4 2f       	mov	r30, r20

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
				{
					uint8_t SerialByte = boot_signature_byte_get(SigReadAddress);
 b6a:	f0 e0       	ldi	r31, 0x00	; 0
 b6c:	60 93 57 00 	sts	0x0057, r22
 b70:	e4 91       	lpm	r30, Z
 b72:	80 ff       	sbrs	r24, 0
 b74:	03 c0       	rjmp	.+6      	; 0xb7c <USB_Device_ProcessControlRequest+0x1d2>

					if (SerialCharNum & 0x01)
 b76:	e2 95       	swap	r30
 b78:	ef 70       	andi	r30, 0x0F	; 15
					{
						SerialByte >>= 4;
 b7a:	4f 5f       	subi	r20, 0xFF	; 255
 b7c:	ef 70       	andi	r30, 0x0F	; 15
						SigReadAddress++;
 b7e:	2e 2f       	mov	r18, r30
					}

					SerialByte &= 0x0F;
 b80:	30 e0       	ldi	r19, 0x00	; 0
 b82:	ea 30       	cpi	r30, 0x0A	; 10
 b84:	18 f0       	brcs	.+6      	; 0xb8c <USB_Device_ProcessControlRequest+0x1e2>

					UnicodeString[SerialCharNum] = cpu_to_le16((SerialByte >= 10) ?
 b86:	29 5c       	subi	r18, 0xC9	; 201
 b88:	3f 4f       	sbci	r19, 0xFF	; 255
 b8a:	02 c0       	rjmp	.+4      	; 0xb90 <USB_Device_ProcessControlRequest+0x1e6>
 b8c:	20 5d       	subi	r18, 0xD0	; 208
 b8e:	3f 4f       	sbci	r19, 0xFF	; 255
 b90:	13 96       	adiw	r26, 0x03	; 3
 b92:	3c 93       	st	X, r19
 b94:	2e 93       	st	-X, r18
 b96:	12 97       	sbiw	r26, 0x02	; 2
 b98:	01 96       	adiw	r24, 0x01	; 1
 b9a:	12 96       	adiw	r26, 0x02	; 2
 b9c:	84 31       	cpi	r24, 0x14	; 20
 b9e:	91 05       	cpc	r25, r1
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
 ba0:	19 f7       	brne	.-58     	; 0xb68 <USB_Device_ProcessControlRequest+0x1be>
 ba2:	5f bf       	out	0x3f, r21	; 63
 ba4:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 ba8:	87 7f       	andi	r24, 0xF7	; 247
 baa:	80 93 e8 00 	sts	0x00E8, r24
 bae:	ce 01       	movw	r24, r28
 bb0:	03 96       	adiw	r24, 0x03	; 3

	USB_Device_GetSerialString(SignatureDescriptor.UnicodeString);

	Endpoint_ClearSETUP();

	Endpoint_Write_Control_Stream_LE(&SignatureDescriptor, sizeof(SignatureDescriptor));
 bb2:	6a e2       	ldi	r22, 0x2A	; 42
 bb4:	70 e0       	ldi	r23, 0x00	; 0
 bb6:	0f dc       	rcall	.-2018   	; 0x3d6 <Endpoint_Write_Control_Stream_LE>
 bb8:	12 c0       	rjmp	.+36     	; 0xbde <USB_Device_ProcessControlRequest+0x234>
 bba:	60 91 a2 01 	lds	r22, 0x01A2
 bbe:	ae 01       	movw	r20, r28
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif

	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
 bc0:	4f 5f       	subi	r20, 0xFF	; 255
 bc2:	5f 4f       	sbci	r21, 0xFF	; 255
 bc4:	8d db       	rcall	.-2278   	; 0x2e0 <CALLBACK_USB_GetDescriptor>
 bc6:	bc 01       	movw	r22, r24
 bc8:	00 97       	sbiw	r24, 0x00	; 0
 bca:	09 f4       	brne	.+2      	; 0xbce <USB_Device_ProcessControlRequest+0x224>
 bcc:	3c c0       	rjmp	.+120    	; 0xc46 <USB_Device_ProcessControlRequest+0x29c>
 bce:	80 91 e8 00 	lds	r24, 0x00E8
 bd2:	87 7f       	andi	r24, 0xF7	; 247
 bd4:	80 93 e8 00 	sts	0x00E8, r24
 bd8:	89 81       	ldd	r24, Y+1	; 0x01
 bda:	9a 81       	ldd	r25, Y+2	; 0x02
 bdc:	58 dc       	rcall	.-1872   	; 0x48e <Endpoint_Write_Control_PStream_LE>
 bde:	80 91 e8 00 	lds	r24, 0x00E8
	#if defined(USE_RAM_DESCRIPTORS) || !defined(ARCH_HAS_MULTI_ADDRESS_SPACE)
	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_EEPROM_DESCRIPTORS)
	Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_FLASH_DESCRIPTORS)
	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
 be2:	8b 77       	andi	r24, 0x7B	; 123
 be4:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 be8:	2e c0       	rjmp	.+92     	; 0xc46 <USB_Device_ProcessControlRequest+0x29c>
 bea:	80 38       	cpi	r24, 0x80	; 128
 bec:	61 f5       	brne	.+88     	; 0xc46 <USB_Device_ProcessControlRequest+0x29c>
 bee:	80 91 e8 00 	lds	r24, 0x00E8
 bf2:	87 7f       	andi	r24, 0xF7	; 247
					USB_Device_GetDescriptor();
				}

				break;
			case REQ_GetConfiguration:
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
 bf4:	80 93 e8 00 	sts	0x00E8, r24
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 bf8:	80 91 99 01 	lds	r24, 0x0199
 bfc:	80 93 f1 00 	sts	0x00F1, r24
 c00:	80 91 e8 00 	lds	r24, 0x00E8

static void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();

	Endpoint_Write_8(USB_Device_ConfigurationNumber);
 c04:	8e 77       	andi	r24, 0x7E	; 126
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
 c06:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 c0a:	0f dd       	rcall	.-1506   	; 0x62a <Endpoint_ClearStatusStage>
 c0c:	1c c0       	rjmp	.+56     	; 0xc46 <USB_Device_ProcessControlRequest+0x29c>
 c0e:	88 23       	and	r24, r24
 c10:	d1 f4       	brne	.+52     	; 0xc46 <USB_Device_ProcessControlRequest+0x29c>
 c12:	90 91 a0 01 	lds	r25, 0x01A0
	Endpoint_ClearIN();

	Endpoint_ClearStatusStage();
 c16:	92 30       	cpi	r25, 0x02	; 2
 c18:	b0 f4       	brcc	.+44     	; 0xc46 <USB_Device_ProcessControlRequest+0x29c>
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_GetConfiguration();

				break;
			case REQ_SetConfiguration:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
 c1a:	80 91 e8 00 	lds	r24, 0x00E8
}

static void USB_Device_SetConfiguration(void)
{
	#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
 c1e:	87 7f       	andi	r24, 0xF7	; 247
 c20:	80 93 e8 00 	sts	0x00E8, r24
 c24:	90 93 99 01 	sts	0x0199, r25
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 c28:	00 dd       	rcall	.-1536   	; 0x62a <Endpoint_ClearStatusStage>
 c2a:	80 91 99 01 	lds	r24, 0x0199
 c2e:	88 23       	and	r24, r24
	#endif
	#endif

	Endpoint_ClearSETUP();

	USB_Device_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
 c30:	21 f4       	brne	.+8      	; 0xc3a <USB_Device_ProcessControlRequest+0x290>
 c32:	80 91 e3 00 	lds	r24, 0x00E3

	Endpoint_ClearStatusStage();
 c36:	87 ff       	sbrs	r24, 7

	if (USB_Device_ConfigurationNumber)
 c38:	02 c0       	rjmp	.+4      	; 0xc3e <USB_Device_ProcessControlRequest+0x294>
 c3a:	84 e0       	ldi	r24, 0x04	; 4
 c3c:	01 c0       	rjmp	.+2      	; 0xc40 <USB_Device_ProcessControlRequest+0x296>
 c3e:	81 e0       	ldi	r24, 0x01	; 1
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
 c40:	80 93 9d 01 	sts	0x019D, r24
	  USB_DeviceState = DEVICE_STATE_Configured;
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
 c44:	30 db       	rcall	.-2464   	; 0x2a6 <EVENT_USB_Device_ConfigurationChanged>
 c46:	80 91 e8 00 	lds	r24, 0x00E8
 c4a:	83 ff       	sbrs	r24, 3
 c4c:	0a c0       	rjmp	.+20     	; 0xc62 <USB_Device_ProcessControlRequest+0x2b8>
 c4e:	80 91 e8 00 	lds	r24, 0x00E8

	EVENT_USB_Device_ConfigurationChanged();
 c52:	87 7f       	andi	r24, 0xF7	; 247
 c54:	80 93 e8 00 	sts	0x00E8, r24
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 c58:	80 91 eb 00 	lds	r24, 0x00EB
			default:
				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
 c5c:	80 62       	ori	r24, 0x20	; 32
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 c5e:	80 93 eb 00 	sts	0x00EB, r24
 c62:	ac 96       	adiw	r28, 0x2c	; 44
 c64:	0f b6       	in	r0, 0x3f	; 63
 c66:	f8 94       	cli
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
 c68:	de bf       	out	0x3e, r29	; 62
 c6a:	0f be       	out	0x3f, r0	; 63
 c6c:	cd bf       	out	0x3d, r28	; 61
 c6e:	df 91       	pop	r29
 c70:	cf 91       	pop	r28
	{
		Endpoint_ClearSETUP();
		Endpoint_StallTransaction();
	}
}
 c72:	1f 91       	pop	r17
 c74:	08 95       	ret

00000c76 <USB_Event_Stub>:
#include "Events.h"

void USB_Event_Stub(void)
{

}
 c76:	08 95       	ret

00000c78 <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
 c78:	cf 93       	push	r28
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_DeviceTask(void)
{
	if (USB_DeviceState == DEVICE_STATE_Unattached)
 c7a:	80 91 9d 01 	lds	r24, 0x019D
 c7e:	88 23       	and	r24, r24
 c80:	a9 f0       	breq	.+42     	; 0xcac <USB_USBTask+0x34>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
 c82:	80 91 e9 00 	lds	r24, 0x00E9
 c86:	8f 70       	andi	r24, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
 c88:	90 91 ec 00 	lds	r25, 0x00EC
 c8c:	90 ff       	sbrs	r25, 0
 c8e:	02 c0       	rjmp	.+4      	; 0xc94 <USB_USBTask+0x1c>
 c90:	c0 e8       	ldi	r28, 0x80	; 128
 c92:	01 c0       	rjmp	.+2      	; 0xc96 <USB_USBTask+0x1e>
 c94:	c0 e0       	ldi	r28, 0x00	; 0
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
 c96:	c8 2b       	or	r28, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 c98:	10 92 e9 00 	sts	0x00E9, r1
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 c9c:	80 91 e8 00 	lds	r24, 0x00E8

	uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

	if (Endpoint_IsSETUPReceived())
 ca0:	83 ff       	sbrs	r24, 3
 ca2:	01 c0       	rjmp	.+2      	; 0xca6 <USB_USBTask+0x2e>
	  USB_Device_ProcessControlRequest();
 ca4:	82 de       	rcall	.-764    	; 0x9aa <USB_Device_ProcessControlRequest>
 ca6:	cf 70       	andi	r28, 0x0F	; 15
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 ca8:	c0 93 e9 00 	sts	0x00E9, r28
 cac:	cf 91       	pop	r28
	#elif defined(USB_CAN_BE_HOST)
		USB_HostTask();
	#elif defined(USB_CAN_BE_DEVICE)
		USB_DeviceTask();
	#endif
}
 cae:	08 95       	ret

00000cb0 <CDC_Device_ProcessControlRequest>:
#define  __INCLUDE_FROM_CDC_DRIVER
#define  __INCLUDE_FROM_CDC_DEVICE_C
#include "CDCClassDevice.h"

void CDC_Device_ProcessControlRequest(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
 cb0:	cf 93       	push	r28
 cb2:	df 93       	push	r29
 cb4:	ec 01       	movw	r28, r24
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 cb6:	80 91 e8 00 	lds	r24, 0x00E8
	if (!(Endpoint_IsSETUPReceived()))
 cba:	83 ff       	sbrs	r24, 3
 cbc:	a3 c0       	rjmp	.+326    	; 0xe04 <CDC_Device_ProcessControlRequest+0x154>
	  return;

	if (USB_ControlRequest.wIndex != CDCInterfaceInfo->Config.ControlInterfaceNumber)
 cbe:	88 81       	ld	r24, Y
 cc0:	90 e0       	ldi	r25, 0x00	; 0
 cc2:	20 91 a2 01 	lds	r18, 0x01A2
 cc6:	30 91 a3 01 	lds	r19, 0x01A3
 cca:	28 17       	cp	r18, r24
 ccc:	39 07       	cpc	r19, r25
 cce:	09 f0       	breq	.+2      	; 0xcd2 <CDC_Device_ProcessControlRequest+0x22>
 cd0:	99 c0       	rjmp	.+306    	; 0xe04 <CDC_Device_ProcessControlRequest+0x154>
	  return;

	switch (USB_ControlRequest.bRequest)
 cd2:	80 91 9f 01 	lds	r24, 0x019F
 cd6:	81 32       	cpi	r24, 0x21	; 33
 cd8:	69 f0       	breq	.+26     	; 0xcf4 <CDC_Device_ProcessControlRequest+0x44>
 cda:	82 32       	cpi	r24, 0x22	; 34
 cdc:	20 f4       	brcc	.+8      	; 0xce6 <CDC_Device_ProcessControlRequest+0x36>
 cde:	80 32       	cpi	r24, 0x20	; 32
 ce0:	09 f0       	breq	.+2      	; 0xce4 <CDC_Device_ProcessControlRequest+0x34>
 ce2:	90 c0       	rjmp	.+288    	; 0xe04 <CDC_Device_ProcessControlRequest+0x154>
 ce4:	3c c0       	rjmp	.+120    	; 0xd5e <CDC_Device_ProcessControlRequest+0xae>
 ce6:	82 32       	cpi	r24, 0x22	; 34
 ce8:	09 f4       	brne	.+2      	; 0xcec <CDC_Device_ProcessControlRequest+0x3c>
 cea:	6b c0       	rjmp	.+214    	; 0xdc2 <CDC_Device_ProcessControlRequest+0x112>
 cec:	83 32       	cpi	r24, 0x23	; 35
 cee:	09 f0       	breq	.+2      	; 0xcf2 <CDC_Device_ProcessControlRequest+0x42>
 cf0:	89 c0       	rjmp	.+274    	; 0xe04 <CDC_Device_ProcessControlRequest+0x154>
 cf2:	7a c0       	rjmp	.+244    	; 0xde8 <CDC_Device_ProcessControlRequest+0x138>
	{
		case CDC_REQ_GetLineEncoding:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
 cf4:	80 91 9e 01 	lds	r24, 0x019E
 cf8:	81 3a       	cpi	r24, 0xA1	; 161
 cfa:	09 f0       	breq	.+2      	; 0xcfe <CDC_Device_ProcessControlRequest+0x4e>
 cfc:	83 c0       	rjmp	.+262    	; 0xe04 <CDC_Device_ProcessControlRequest+0x154>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 cfe:	80 91 e8 00 	lds	r24, 0x00E8
 d02:	87 7f       	andi	r24, 0xF7	; 247
 d04:	80 93 e8 00 	sts	0x00E8, r24
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 d08:	80 91 e8 00 	lds	r24, 0x00E8
			{
				Endpoint_ClearSETUP();

				while (!(Endpoint_IsINReady()));
 d0c:	80 ff       	sbrs	r24, 0
 d0e:	fc cf       	rjmp	.-8      	; 0xd08 <CDC_Device_ProcessControlRequest+0x58>

				Endpoint_Write_32_LE(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS);
 d10:	8c 89       	ldd	r24, Y+20	; 0x14
 d12:	9d 89       	ldd	r25, Y+21	; 0x15
 d14:	ae 89       	ldd	r26, Y+22	; 0x16
 d16:	bf 89       	ldd	r27, Y+23	; 0x17
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_32_LE(const uint32_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_32_LE(const uint32_t Data)
			{
				UEDATX = (Data &  0xFF);
 d18:	80 93 f1 00 	sts	0x00F1, r24
				UEDATX = (Data >> 8);
 d1c:	49 2f       	mov	r20, r25
 d1e:	5a 2f       	mov	r21, r26
 d20:	6b 2f       	mov	r22, r27
 d22:	77 27       	eor	r23, r23
 d24:	40 93 f1 00 	sts	0x00F1, r20
				UEDATX = (Data >> 16);
 d28:	ad 01       	movw	r20, r26
 d2a:	66 27       	eor	r22, r22
 d2c:	77 27       	eor	r23, r23
 d2e:	40 93 f1 00 	sts	0x00F1, r20
				UEDATX = (Data >> 24);
 d32:	8b 2f       	mov	r24, r27
 d34:	99 27       	eor	r25, r25
 d36:	aa 27       	eor	r26, r26
 d38:	bb 27       	eor	r27, r27
 d3a:	80 93 f1 00 	sts	0x00F1, r24
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.CharFormat);
 d3e:	88 8d       	ldd	r24, Y+24	; 0x18
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
 d40:	80 93 f1 00 	sts	0x00F1, r24
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.ParityType);
 d44:	89 8d       	ldd	r24, Y+25	; 0x19
 d46:	80 93 f1 00 	sts	0x00F1, r24
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.DataBits);
 d4a:	8a 8d       	ldd	r24, Y+26	; 0x1a
 d4c:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 d50:	80 91 e8 00 	lds	r24, 0x00E8
 d54:	8e 77       	andi	r24, 0x7E	; 126
 d56:	80 93 e8 00 	sts	0x00E8, r24

				Endpoint_ClearIN();
				Endpoint_ClearStatusStage();
 d5a:	67 dc       	rcall	.-1842   	; 0x62a <Endpoint_ClearStatusStage>
 d5c:	53 c0       	rjmp	.+166    	; 0xe04 <CDC_Device_ProcessControlRequest+0x154>
 d5e:	80 91 9e 01 	lds	r24, 0x019E
			}

			break;
		case CDC_REQ_SetLineEncoding:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
 d62:	81 32       	cpi	r24, 0x21	; 33
 d64:	09 f0       	breq	.+2      	; 0xd68 <CDC_Device_ProcessControlRequest+0xb8>
 d66:	4e c0       	rjmp	.+156    	; 0xe04 <CDC_Device_ProcessControlRequest+0x154>
 d68:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 d6c:	87 7f       	andi	r24, 0xF7	; 247
 d6e:	80 93 e8 00 	sts	0x00E8, r24
 d72:	05 c0       	rjmp	.+10     	; 0xd7e <CDC_Device_ProcessControlRequest+0xce>
 d74:	80 91 9d 01 	lds	r24, 0x019D
			{
				Endpoint_ClearSETUP();

				while (!(Endpoint_IsOUTReceived()))
				{
					if (USB_DeviceState == DEVICE_STATE_Unattached)
 d78:	88 23       	and	r24, r24
 d7a:	09 f4       	brne	.+2      	; 0xd7e <CDC_Device_ProcessControlRequest+0xce>
 d7c:	43 c0       	rjmp	.+134    	; 0xe04 <CDC_Device_ProcessControlRequest+0x154>
 d7e:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 d82:	82 ff       	sbrs	r24, 2
		case CDC_REQ_SetLineEncoding:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
			{
				Endpoint_ClearSETUP();

				while (!(Endpoint_IsOUTReceived()))
 d84:	f7 cf       	rjmp	.-18     	; 0xd74 <CDC_Device_ProcessControlRequest+0xc4>
 d86:	30 91 f1 00 	lds	r19, 0x00F1
				{
					uint32_t Value;
					uint8_t  Bytes[4];
				} Data;

				Data.Bytes[0] = UEDATX;
 d8a:	20 91 f1 00 	lds	r18, 0x00F1
				Data.Bytes[1] = UEDATX;
 d8e:	90 91 f1 00 	lds	r25, 0x00F1
				Data.Bytes[2] = UEDATX;
 d92:	80 91 f1 00 	lds	r24, 0x00F1
				Data.Bytes[3] = UEDATX;
 d96:	3c 8b       	std	Y+20, r19	; 0x14
				{
					if (USB_DeviceState == DEVICE_STATE_Unattached)
					  return;
				}

				CDCInterfaceInfo->State.LineEncoding.BaudRateBPS = Endpoint_Read_32_LE();
 d98:	2d 8b       	std	Y+21, r18	; 0x15
 d9a:	9e 8b       	std	Y+22, r25	; 0x16
 d9c:	8f 8b       	std	Y+23, r24	; 0x17
 d9e:	80 91 f1 00 	lds	r24, 0x00F1
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
 da2:	88 8f       	std	Y+24, r24	; 0x18
				CDCInterfaceInfo->State.LineEncoding.CharFormat  = Endpoint_Read_8();
 da4:	80 91 f1 00 	lds	r24, 0x00F1
 da8:	89 8f       	std	Y+25, r24	; 0x19
				CDCInterfaceInfo->State.LineEncoding.ParityType  = Endpoint_Read_8();
 daa:	80 91 f1 00 	lds	r24, 0x00F1
 dae:	8a 8f       	std	Y+26, r24	; 0x1a
				CDCInterfaceInfo->State.LineEncoding.DataBits    = Endpoint_Read_8();
 db0:	80 91 e8 00 	lds	r24, 0x00E8
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 db4:	8b 77       	andi	r24, 0x7B	; 123
 db6:	80 93 e8 00 	sts	0x00E8, r24
 dba:	37 dc       	rcall	.-1938   	; 0x62a <Endpoint_ClearStatusStage>

				Endpoint_ClearOUT();
				Endpoint_ClearStatusStage();
 dbc:	ce 01       	movw	r24, r28
 dbe:	0f d1       	rcall	.+542    	; 0xfde <CDC_Device_Event_Stub>

				EVENT_CDC_Device_LineEncodingChanged(CDCInterfaceInfo);
 dc0:	21 c0       	rjmp	.+66     	; 0xe04 <CDC_Device_ProcessControlRequest+0x154>
 dc2:	80 91 9e 01 	lds	r24, 0x019E
 dc6:	81 32       	cpi	r24, 0x21	; 33
			}

			break;
		case CDC_REQ_SetControlLineState:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
 dc8:	e9 f4       	brne	.+58     	; 0xe04 <CDC_Device_ProcessControlRequest+0x154>
 dca:	80 91 e8 00 	lds	r24, 0x00E8
 dce:	87 7f       	andi	r24, 0xF7	; 247
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 dd0:	80 93 e8 00 	sts	0x00E8, r24
 dd4:	2a dc       	rcall	.-1964   	; 0x62a <Endpoint_ClearStatusStage>
 dd6:	80 91 a0 01 	lds	r24, 0x01A0
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
 dda:	90 91 a1 01 	lds	r25, 0x01A1

				CDCInterfaceInfo->State.ControlLineStates.HostToDevice = USB_ControlRequest.wValue;
 dde:	99 8b       	std	Y+17, r25	; 0x11
 de0:	88 8b       	std	Y+16, r24	; 0x10
 de2:	ce 01       	movw	r24, r28
 de4:	fc d0       	rcall	.+504    	; 0xfde <CDC_Device_Event_Stub>
 de6:	0e c0       	rjmp	.+28     	; 0xe04 <CDC_Device_ProcessControlRequest+0x154>
 de8:	80 91 9e 01 	lds	r24, 0x019E

				EVENT_CDC_Device_ControLineStateChanged(CDCInterfaceInfo);
 dec:	81 32       	cpi	r24, 0x21	; 33
 dee:	51 f4       	brne	.+20     	; 0xe04 <CDC_Device_ProcessControlRequest+0x154>
 df0:	80 91 e8 00 	lds	r24, 0x00E8
			}

			break;
		case CDC_REQ_SendBreak:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
 df4:	87 7f       	andi	r24, 0xF7	; 247
 df6:	80 93 e8 00 	sts	0x00E8, r24
 dfa:	17 dc       	rcall	.-2002   	; 0x62a <Endpoint_ClearStatusStage>
 dfc:	ce 01       	movw	r24, r28
 dfe:	60 91 a0 01 	lds	r22, 0x01A0
 e02:	ed d0       	rcall	.+474    	; 0xfde <CDC_Device_Event_Stub>
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
 e04:	df 91       	pop	r29
 e06:	cf 91       	pop	r28

				EVENT_CDC_Device_BreakSent(CDCInterfaceInfo, (uint8_t)USB_ControlRequest.wValue);
 e08:	08 95       	ret

00000e0a <CDC_Device_ConfigureEndpoints>:
 e0a:	cf 93       	push	r28
 e0c:	df 93       	push	r29
 e0e:	ec 01       	movw	r28, r24
 e10:	40 96       	adiw	r24, 0x10	; 16
			}

			break;
	}
}
 e12:	fc 01       	movw	r30, r24
 e14:	8b e0       	ldi	r24, 0x0B	; 11
 e16:	df 01       	movw	r26, r30

bool CDC_Device_ConfigureEndpoints(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
	memset(&CDCInterfaceInfo->State, 0x00, sizeof(CDCInterfaceInfo->State));
 e18:	1d 92       	st	X+, r1
 e1a:	8a 95       	dec	r24
 e1c:	e9 f7       	brne	.-6      	; 0xe18 <CDC_Device_ConfigureEndpoints+0xe>

	CDCInterfaceInfo->Config.DataINEndpoint.Type       = EP_TYPE_BULK;
 e1e:	82 e0       	ldi	r24, 0x02	; 2
 e20:	8c 83       	std	Y+4, r24	; 0x04
	CDCInterfaceInfo->Config.DataOUTEndpoint.Type      = EP_TYPE_BULK;
 e22:	89 87       	std	Y+9, r24	; 0x09
	CDCInterfaceInfo->Config.NotificationEndpoint.Type = EP_TYPE_INTERRUPT;
 e24:	83 e0       	ldi	r24, 0x03	; 3
 e26:	8e 87       	std	Y+14, r24	; 0x0e

	if (!(Endpoint_ConfigureEndpointTable(&CDCInterfaceInfo->Config.DataINEndpoint, 1)))
 e28:	ce 01       	movw	r24, r28
 e2a:	01 96       	adiw	r24, 0x01	; 1
 e2c:	61 e0       	ldi	r22, 0x01	; 1
 e2e:	c1 db       	rcall	.-2174   	; 0x5b2 <Endpoint_ConfigureEndpointTable>
 e30:	88 23       	and	r24, r24
 e32:	59 f0       	breq	.+22     	; 0xe4a <CDC_Device_ConfigureEndpoints+0x40>
 e34:	ce 01       	movw	r24, r28
	  return false;

	if (!(Endpoint_ConfigureEndpointTable(&CDCInterfaceInfo->Config.DataOUTEndpoint, 1)))
 e36:	06 96       	adiw	r24, 0x06	; 6
 e38:	61 e0       	ldi	r22, 0x01	; 1
 e3a:	bb db       	rcall	.-2186   	; 0x5b2 <Endpoint_ConfigureEndpointTable>
 e3c:	88 23       	and	r24, r24
 e3e:	29 f0       	breq	.+10     	; 0xe4a <CDC_Device_ConfigureEndpoints+0x40>
 e40:	ce 01       	movw	r24, r28
 e42:	0b 96       	adiw	r24, 0x0b	; 11
	  return false;

	if (!(Endpoint_ConfigureEndpointTable(&CDCInterfaceInfo->Config.NotificationEndpoint, 1)))
 e44:	61 e0       	ldi	r22, 0x01	; 1
 e46:	b5 db       	rcall	.-2198   	; 0x5b2 <Endpoint_ConfigureEndpointTable>
 e48:	01 c0       	rjmp	.+2      	; 0xe4c <CDC_Device_ConfigureEndpoints+0x42>
 e4a:	80 e0       	ldi	r24, 0x00	; 0
 e4c:	df 91       	pop	r29
 e4e:	cf 91       	pop	r28

	if (!(Endpoint_ConfigureEndpointTable(&CDCInterfaceInfo->Config.DataINEndpoint, 1)))
	  return false;

	if (!(Endpoint_ConfigureEndpointTable(&CDCInterfaceInfo->Config.DataOUTEndpoint, 1)))
	  return false;
 e50:	08 95       	ret

00000e52 <CDC_Device_SendString>:

	if (!(Endpoint_ConfigureEndpointTable(&CDCInterfaceInfo->Config.NotificationEndpoint, 1)))
	  return false;

	return true;
}
 e52:	fc 01       	movw	r30, r24
 e54:	cb 01       	movw	r24, r22
 e56:	20 91 9d 01 	lds	r18, 0x019D
}

uint8_t CDC_Device_SendString(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo,
                              const char* const String)
{
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
 e5a:	24 30       	cpi	r18, 0x04	; 4
 e5c:	c1 f4       	brne	.+48     	; 0xe8e <CDC_Device_SendString+0x3c>
 e5e:	44 89       	ldd	r20, Z+20	; 0x14
 e60:	55 89       	ldd	r21, Z+21	; 0x15
 e62:	66 89       	ldd	r22, Z+22	; 0x16
 e64:	77 89       	ldd	r23, Z+23	; 0x17
 e66:	41 15       	cp	r20, r1
 e68:	51 05       	cpc	r21, r1
 e6a:	61 05       	cpc	r22, r1
 e6c:	71 05       	cpc	r23, r1
 e6e:	89 f0       	breq	.+34     	; 0xe92 <CDC_Device_SendString+0x40>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 e70:	21 81       	ldd	r18, Z+1	; 0x01
 e72:	2f 70       	andi	r18, 0x0F	; 15
 e74:	20 93 e9 00 	sts	0x00E9, r18
	  return ENDPOINT_RWSTREAM_DeviceDisconnected;

	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataINEndpoint.Address);
	return Endpoint_Write_Stream_LE(String, strlen(String), NULL);
 e78:	fc 01       	movw	r30, r24
 e7a:	01 90       	ld	r0, Z+
 e7c:	00 20       	and	r0, r0
 e7e:	e9 f7       	brne	.-6      	; 0xe7a <CDC_Device_SendString+0x28>
 e80:	31 97       	sbiw	r30, 0x01	; 1
 e82:	e8 1b       	sub	r30, r24
 e84:	f9 0b       	sbc	r31, r25
 e86:	bf 01       	movw	r22, r30
 e88:	40 e0       	ldi	r20, 0x00	; 0
 e8a:	50 e0       	ldi	r21, 0x00	; 0
 e8c:	55 ca       	rjmp	.-2902   	; 0x338 <Endpoint_Write_Stream_LE>
 e8e:	82 e0       	ldi	r24, 0x02	; 2
 e90:	08 95       	ret

uint8_t CDC_Device_SendString(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo,
                              const char* const String)
{
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
	  return ENDPOINT_RWSTREAM_DeviceDisconnected;
 e92:	82 e0       	ldi	r24, 0x02	; 2
 e94:	08 95       	ret

00000e96 <CDC_Device_SendByte>:
 e96:	cf 93       	push	r28

	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataINEndpoint.Address);
	return Endpoint_Write_Stream_LE(String, strlen(String), NULL);
}
 e98:	fc 01       	movw	r30, r24
	return Endpoint_Write_Stream_LE(Buffer, Length, NULL);
}

uint8_t CDC_Device_SendByte(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo,
                            const uint8_t Data)
{
 e9a:	c6 2f       	mov	r28, r22
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
 e9c:	80 91 9d 01 	lds	r24, 0x019D
 ea0:	84 30       	cpi	r24, 0x04	; 4
 ea2:	e9 f4       	brne	.+58     	; 0xede <CDC_Device_SendByte+0x48>
 ea4:	44 89       	ldd	r20, Z+20	; 0x14
 ea6:	55 89       	ldd	r21, Z+21	; 0x15
 ea8:	66 89       	ldd	r22, Z+22	; 0x16
 eaa:	77 89       	ldd	r23, Z+23	; 0x17
 eac:	41 15       	cp	r20, r1
 eae:	51 05       	cpc	r21, r1
 eb0:	61 05       	cpc	r22, r1
 eb2:	71 05       	cpc	r23, r1
 eb4:	a1 f0       	breq	.+40     	; 0xede <CDC_Device_SendByte+0x48>
 eb6:	81 81       	ldd	r24, Z+1	; 0x01
 eb8:	8f 70       	andi	r24, 0x0F	; 15
 eba:	80 93 e9 00 	sts	0x00E9, r24
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
 ebe:	80 91 e8 00 	lds	r24, 0x00E8
	  return ENDPOINT_RWSTREAM_DeviceDisconnected;

	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataINEndpoint.Address);

	if (!(Endpoint_IsReadWriteAllowed()))
 ec2:	85 fd       	sbrc	r24, 5
 ec4:	08 c0       	rjmp	.+16     	; 0xed6 <CDC_Device_SendByte+0x40>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 ec6:	80 91 e8 00 	lds	r24, 0x00E8
 eca:	8e 77       	andi	r24, 0x7E	; 126
 ecc:	80 93 e8 00 	sts	0x00E8, r24
	{
		Endpoint_ClearIN();

		uint8_t ErrorCode;

		if ((ErrorCode = Endpoint_WaitUntilReady()) != ENDPOINT_READYWAIT_NoError)
 ed0:	cd db       	rcall	.-2150   	; 0x66c <Endpoint_WaitUntilReady>
 ed2:	88 23       	and	r24, r24
 ed4:	29 f4       	brne	.+10     	; 0xee0 <CDC_Device_SendByte+0x4a>
 ed6:	c0 93 f1 00 	sts	0x00F1, r28
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
 eda:	80 e0       	ldi	r24, 0x00	; 0
		  return ErrorCode;
	}

	Endpoint_Write_8(Data);
	return ENDPOINT_READYWAIT_NoError;
 edc:	01 c0       	rjmp	.+2      	; 0xee0 <CDC_Device_SendByte+0x4a>
 ede:	82 e0       	ldi	r24, 0x02	; 2

uint8_t CDC_Device_SendByte(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo,
                            const uint8_t Data)
{
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
	  return ENDPOINT_RWSTREAM_DeviceDisconnected;
 ee0:	cf 91       	pop	r28
		  return ErrorCode;
	}

	Endpoint_Write_8(Data);
	return ENDPOINT_READYWAIT_NoError;
}
 ee2:	08 95       	ret

00000ee4 <CDC_Device_Flush>:
 ee4:	fc 01       	movw	r30, r24

uint8_t CDC_Device_Flush(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
 ee6:	80 91 9d 01 	lds	r24, 0x019D
 eea:	84 30       	cpi	r24, 0x04	; 4
 eec:	29 f5       	brne	.+74     	; 0xf38 <CDC_Device_Flush+0x54>
 eee:	44 89       	ldd	r20, Z+20	; 0x14
 ef0:	55 89       	ldd	r21, Z+21	; 0x15
 ef2:	66 89       	ldd	r22, Z+22	; 0x16
 ef4:	77 89       	ldd	r23, Z+23	; 0x17
 ef6:	41 15       	cp	r20, r1
 ef8:	51 05       	cpc	r21, r1
 efa:	61 05       	cpc	r22, r1
 efc:	71 05       	cpc	r23, r1
 efe:	e1 f0       	breq	.+56     	; 0xf38 <CDC_Device_Flush+0x54>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 f00:	81 81       	ldd	r24, Z+1	; 0x01
 f02:	8f 70       	andi	r24, 0x0F	; 15
 f04:	80 93 e9 00 	sts	0x00E9, r24
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
 f08:	80 91 f2 00 	lds	r24, 0x00F2
 f0c:	90 91 f3 00 	lds	r25, 0x00F3

	uint8_t ErrorCode;

	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataINEndpoint.Address);

	if (!(Endpoint_BytesInEndpoint()))
 f10:	00 97       	sbiw	r24, 0x00	; 0
 f12:	a1 f0       	breq	.+40     	; 0xf3c <CDC_Device_Flush+0x58>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
 f14:	90 91 e8 00 	lds	r25, 0x00E8
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 f18:	80 91 e8 00 	lds	r24, 0x00E8
 f1c:	8e 77       	andi	r24, 0x7E	; 126
 f1e:	80 93 e8 00 	sts	0x00E8, r24

	bool BankFull = !(Endpoint_IsReadWriteAllowed());

	Endpoint_ClearIN();

	if (BankFull)
 f22:	95 fd       	sbrc	r25, 5
 f24:	0d c0       	rjmp	.+26     	; 0xf40 <CDC_Device_Flush+0x5c>
	{
		if ((ErrorCode = Endpoint_WaitUntilReady()) != ENDPOINT_READYWAIT_NoError)
 f26:	a2 db       	rcall	.-2236   	; 0x66c <Endpoint_WaitUntilReady>
 f28:	88 23       	and	r24, r24
 f2a:	59 f4       	brne	.+22     	; 0xf42 <CDC_Device_Flush+0x5e>
 f2c:	90 91 e8 00 	lds	r25, 0x00E8
 f30:	9e 77       	andi	r25, 0x7E	; 126
 f32:	90 93 e8 00 	sts	0x00E8, r25
 f36:	08 95       	ret
 f38:	82 e0       	ldi	r24, 0x02	; 2
}

uint8_t CDC_Device_Flush(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
	  return ENDPOINT_RWSTREAM_DeviceDisconnected;
 f3a:	08 95       	ret
 f3c:	80 e0       	ldi	r24, 0x00	; 0
	uint8_t ErrorCode;

	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataINEndpoint.Address);

	if (!(Endpoint_BytesInEndpoint()))
	  return ENDPOINT_READYWAIT_NoError;
 f3e:	08 95       	ret
 f40:	80 e0       	ldi	r24, 0x00	; 0
		  return ErrorCode;

		Endpoint_ClearIN();
	}

	return ENDPOINT_READYWAIT_NoError;
 f42:	08 95       	ret

00000f44 <CDC_Device_USBTask>:
}
 f44:	20 91 9d 01 	lds	r18, 0x019D
	return true;
}

void CDC_Device_USBTask(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
 f48:	24 30       	cpi	r18, 0x04	; 4
 f4a:	99 f4       	brne	.+38     	; 0xf72 <CDC_Device_USBTask+0x2e>
 f4c:	fc 01       	movw	r30, r24
 f4e:	44 89       	ldd	r20, Z+20	; 0x14
 f50:	55 89       	ldd	r21, Z+21	; 0x15
 f52:	66 89       	ldd	r22, Z+22	; 0x16
 f54:	77 89       	ldd	r23, Z+23	; 0x17
 f56:	41 15       	cp	r20, r1
 f58:	51 05       	cpc	r21, r1
 f5a:	61 05       	cpc	r22, r1
 f5c:	71 05       	cpc	r23, r1
 f5e:	49 f0       	breq	.+18     	; 0xf72 <CDC_Device_USBTask+0x2e>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 f60:	21 81       	ldd	r18, Z+1	; 0x01
 f62:	2f 70       	andi	r18, 0x0F	; 15
 f64:	20 93 e9 00 	sts	0x00E9, r18
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 f68:	20 91 e8 00 	lds	r18, 0x00E8
	  return;

	#if !defined(NO_CLASS_DRIVER_AUTOFLUSH)
	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataINEndpoint.Address);

	if (Endpoint_IsINReady())
 f6c:	20 ff       	sbrs	r18, 0
 f6e:	01 c0       	rjmp	.+2      	; 0xf72 <CDC_Device_USBTask+0x2e>
	  CDC_Device_Flush(CDCInterfaceInfo);
 f70:	b9 cf       	rjmp	.-142    	; 0xee4 <CDC_Device_Flush>
 f72:	08 95       	ret

00000f74 <CDC_Device_ReceiveByte>:
 f74:	fc 01       	movw	r30, r24
	}
}

int16_t CDC_Device_ReceiveByte(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
 f76:	80 91 9d 01 	lds	r24, 0x019D
 f7a:	84 30       	cpi	r24, 0x04	; 4
 f7c:	51 f5       	brne	.+84     	; 0xfd2 <CDC_Device_ReceiveByte+0x5e>
 f7e:	44 89       	ldd	r20, Z+20	; 0x14
 f80:	55 89       	ldd	r21, Z+21	; 0x15
 f82:	66 89       	ldd	r22, Z+22	; 0x16
 f84:	77 89       	ldd	r23, Z+23	; 0x17
 f86:	41 15       	cp	r20, r1
 f88:	51 05       	cpc	r21, r1
 f8a:	61 05       	cpc	r22, r1
 f8c:	71 05       	cpc	r23, r1
 f8e:	09 f1       	breq	.+66     	; 0xfd2 <CDC_Device_ReceiveByte+0x5e>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 f90:	86 81       	ldd	r24, Z+6	; 0x06
 f92:	8f 70       	andi	r24, 0x0F	; 15
 f94:	80 93 e9 00 	sts	0x00E9, r24
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 f98:	80 91 e8 00 	lds	r24, 0x00E8

	int16_t ReceivedByte = -1;

	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataOUTEndpoint.Address);

	if (Endpoint_IsOUTReceived())
 f9c:	82 ff       	sbrs	r24, 2
 f9e:	1c c0       	rjmp	.+56     	; 0xfd8 <CDC_Device_ReceiveByte+0x64>
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
 fa0:	80 91 f2 00 	lds	r24, 0x00F2
 fa4:	90 91 f3 00 	lds	r25, 0x00F3
	{
		if (Endpoint_BytesInEndpoint())
 fa8:	00 97       	sbiw	r24, 0x00	; 0
 faa:	21 f0       	breq	.+8      	; 0xfb4 <CDC_Device_ReceiveByte+0x40>
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
 fac:	80 91 f1 00 	lds	r24, 0x00F1
		  ReceivedByte = Endpoint_Read_8();
 fb0:	90 e0       	ldi	r25, 0x00	; 0
 fb2:	02 c0       	rjmp	.+4      	; 0xfb8 <CDC_Device_ReceiveByte+0x44>
int16_t CDC_Device_ReceiveByte(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
	  return -1;

	int16_t ReceivedByte = -1;
 fb4:	8f ef       	ldi	r24, 0xFF	; 255
 fb6:	9f ef       	ldi	r25, 0xFF	; 255
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
 fb8:	20 91 f2 00 	lds	r18, 0x00F2
 fbc:	30 91 f3 00 	lds	r19, 0x00F3
	if (Endpoint_IsOUTReceived())
	{
		if (Endpoint_BytesInEndpoint())
		  ReceivedByte = Endpoint_Read_8();

		if (!(Endpoint_BytesInEndpoint()))
 fc0:	21 15       	cp	r18, r1
 fc2:	31 05       	cpc	r19, r1
 fc4:	59 f4       	brne	.+22     	; 0xfdc <CDC_Device_ReceiveByte+0x68>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 fc6:	20 91 e8 00 	lds	r18, 0x00E8
 fca:	2b 77       	andi	r18, 0x7B	; 123
 fcc:	20 93 e8 00 	sts	0x00E8, r18
 fd0:	08 95       	ret
}

int16_t CDC_Device_ReceiveByte(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
	  return -1;
 fd2:	8f ef       	ldi	r24, 0xFF	; 255
 fd4:	9f ef       	ldi	r25, 0xFF	; 255
 fd6:	08 95       	ret

	int16_t ReceivedByte = -1;
 fd8:	8f ef       	ldi	r24, 0xFF	; 255
 fda:	9f ef       	ldi	r25, 0xFF	; 255
		if (!(Endpoint_BytesInEndpoint()))
		  Endpoint_ClearOUT();
	}

	return ReceivedByte;
}
 fdc:	08 95       	ret

00000fde <CDC_Device_Event_Stub>:
#endif

void CDC_Device_Event_Stub(void)
{

}
 fde:	08 95       	ret

00000fe0 <_exit>:
 fe0:	f8 94       	cli

00000fe2 <__stop_program>:
 fe2:	ff cf       	rjmp	.-2      	; 0xfe2 <__stop_program>
