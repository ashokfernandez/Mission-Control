
MassStorageKeyboard.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000090  00800100  00002046  000020da  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002046  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000015  00800190  00800190  0000216a  2**0
                  ALLOC
  3 .stab         00000a98  00000000  00000000  0000216c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000002aa  00000000  00000000  00002c04  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000590  00000000  00000000  00002eb0  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000b14e  00000000  00000000  00003440  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002732  00000000  00000000  0000e58e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00004c1f  00000000  00000000  00010cc0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001064  00000000  00000000  000158e0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00003f00  00000000  00000000  00016944  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00006814  00000000  00000000  0001a844  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000007d8  00000000  00000000  00021058  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	c4 c0       	rjmp	.+392    	; 0x18a <__ctors_end>
       2:	00 00       	nop
       4:	e1 c0       	rjmp	.+450    	; 0x1c8 <__bad_interrupt>
       6:	00 00       	nop
       8:	df c0       	rjmp	.+446    	; 0x1c8 <__bad_interrupt>
       a:	00 00       	nop
       c:	dd c0       	rjmp	.+442    	; 0x1c8 <__bad_interrupt>
       e:	00 00       	nop
      10:	db c0       	rjmp	.+438    	; 0x1c8 <__bad_interrupt>
      12:	00 00       	nop
      14:	d9 c0       	rjmp	.+434    	; 0x1c8 <__bad_interrupt>
      16:	00 00       	nop
      18:	d7 c0       	rjmp	.+430    	; 0x1c8 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	d5 c0       	rjmp	.+426    	; 0x1c8 <__bad_interrupt>
      1e:	00 00       	nop
      20:	d3 c0       	rjmp	.+422    	; 0x1c8 <__bad_interrupt>
      22:	00 00       	nop
      24:	d1 c0       	rjmp	.+418    	; 0x1c8 <__bad_interrupt>
      26:	00 00       	nop
      28:	0c 94 db 09 	jmp	0x13b6	; 0x13b6 <__vector_10>
      2c:	0c 94 ab 0a 	jmp	0x1556	; 0x1556 <__vector_11>
      30:	cb c0       	rjmp	.+406    	; 0x1c8 <__bad_interrupt>
      32:	00 00       	nop
      34:	c9 c0       	rjmp	.+402    	; 0x1c8 <__bad_interrupt>
      36:	00 00       	nop
      38:	c7 c0       	rjmp	.+398    	; 0x1c8 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	c5 c0       	rjmp	.+394    	; 0x1c8 <__bad_interrupt>
      3e:	00 00       	nop
      40:	c3 c0       	rjmp	.+390    	; 0x1c8 <__bad_interrupt>
      42:	00 00       	nop
      44:	c1 c0       	rjmp	.+386    	; 0x1c8 <__bad_interrupt>
      46:	00 00       	nop
      48:	bf c0       	rjmp	.+382    	; 0x1c8 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	bd c0       	rjmp	.+378    	; 0x1c8 <__bad_interrupt>
      4e:	00 00       	nop
      50:	bb c0       	rjmp	.+374    	; 0x1c8 <__bad_interrupt>
      52:	00 00       	nop
      54:	b9 c0       	rjmp	.+370    	; 0x1c8 <__bad_interrupt>
      56:	00 00       	nop
      58:	b7 c0       	rjmp	.+366    	; 0x1c8 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	b5 c0       	rjmp	.+362    	; 0x1c8 <__bad_interrupt>
      5e:	00 00       	nop
      60:	b3 c0       	rjmp	.+358    	; 0x1c8 <__bad_interrupt>
      62:	00 00       	nop
      64:	b1 c0       	rjmp	.+354    	; 0x1c8 <__bad_interrupt>
      66:	00 00       	nop
      68:	af c0       	rjmp	.+350    	; 0x1c8 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	ad c0       	rjmp	.+346    	; 0x1c8 <__bad_interrupt>
      6e:	00 00       	nop
      70:	ab c0       	rjmp	.+342    	; 0x1c8 <__bad_interrupt>
      72:	00 00       	nop
      74:	a9 c0       	rjmp	.+338    	; 0x1c8 <__bad_interrupt>
      76:	00 00       	nop
      78:	a7 c0       	rjmp	.+334    	; 0x1c8 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	a5 c0       	rjmp	.+330    	; 0x1c8 <__bad_interrupt>
      7e:	00 00       	nop
      80:	a3 c0       	rjmp	.+326    	; 0x1c8 <__bad_interrupt>
      82:	00 00       	nop
      84:	a1 c0       	rjmp	.+322    	; 0x1c8 <__bad_interrupt>
      86:	00 00       	nop
      88:	9f c0       	rjmp	.+318    	; 0x1c8 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	9d c0       	rjmp	.+314    	; 0x1c8 <__bad_interrupt>
      8e:	00 00       	nop
      90:	9b c0       	rjmp	.+310    	; 0x1c8 <__bad_interrupt>
      92:	00 00       	nop
      94:	99 c0       	rjmp	.+306    	; 0x1c8 <__bad_interrupt>
      96:	00 00       	nop

00000098 <ProductString>:
      98:	48 03 4c 00 55 00 46 00 41 00 20 00 4d 00 61 00     H.L.U.F.A. .M.a.
      a8:	73 00 73 00 20 00 53 00 74 00 6f 00 72 00 61 00     s.s. .S.t.o.r.a.
      b8:	67 00 65 00 20 00 61 00 6e 00 64 00 20 00 4b 00     g.e. .a.n.d. .K.
      c8:	65 00 79 00 62 00 6f 00 61 00 72 00 64 00 20 00     e.y.b.o.a.r.d. .
      d8:	44 00 65 00 6d 00 6f 00 00 00                       D.e.m.o...

000000e2 <ManufacturerString>:
      e2:	18 03 44 00 65 00 61 00 6e 00 20 00 43 00 61 00     ..D.e.a.n. .C.a.
      f2:	6d 00 65 00 72 00 61 00 00 00                       m.e.r.a...

000000fc <LanguageString>:
      fc:	04 03 09 04                                         ....

00000100 <ConfigurationDescriptor>:
     100:	09 02 39 00 02 01 00 80 32 09 04 00 00 02 08 06     ..9.....2.......
     110:	50 00 07 05 83 02 40 00 05 07 05 04 02 40 00 05     P.....@......@..
     120:	09 04 01 00 01 03 01 01 00 09 21 11 01 00 01 22     ..........!...."
     130:	3f 00 07 05 81 03 08 00 05                          ?........

00000139 <DeviceDescriptor>:
     139:	12 01 10 01 00 00 00 08 eb 03 61 20 01 00 01 02     ..........a ....
     149:	dc 01                                               ..

0000014b <KeyboardReport>:
     14b:	05 01 09 06 a1 01 05 07 19 e0 29 e7 15 00 25 01     ..........)...%.
     15b:	75 01 95 08 81 02 95 01 75 08 81 01 05 08 19 01     u.......u.......
     16b:	29 05 95 05 75 01 91 02 95 01 75 03 91 01 15 00     )...u.....u.....
     17b:	25 ff 05 07 19 00 29 ff 95 06 75 08 81 00 c0        %.....)...u....

0000018a <__ctors_end>:
     18a:	11 24       	eor	r1, r1
     18c:	1f be       	out	0x3f, r1	; 63
     18e:	cf ef       	ldi	r28, 0xFF	; 255
     190:	d0 e2       	ldi	r29, 0x20	; 32
     192:	de bf       	out	0x3e, r29	; 62
     194:	cd bf       	out	0x3d, r28	; 61

00000196 <__do_copy_data>:
     196:	11 e0       	ldi	r17, 0x01	; 1
     198:	a0 e0       	ldi	r26, 0x00	; 0
     19a:	b1 e0       	ldi	r27, 0x01	; 1
     19c:	e6 e4       	ldi	r30, 0x46	; 70
     19e:	f0 e2       	ldi	r31, 0x20	; 32
     1a0:	00 e0       	ldi	r16, 0x00	; 0
     1a2:	0b bf       	out	0x3b, r16	; 59
     1a4:	02 c0       	rjmp	.+4      	; 0x1aa <__do_copy_data+0x14>
     1a6:	07 90       	elpm	r0, Z+
     1a8:	0d 92       	st	X+, r0
     1aa:	a0 39       	cpi	r26, 0x90	; 144
     1ac:	b1 07       	cpc	r27, r17
     1ae:	d9 f7       	brne	.-10     	; 0x1a6 <__do_copy_data+0x10>
     1b0:	1b be       	out	0x3b, r1	; 59

000001b2 <__do_clear_bss>:
     1b2:	11 e0       	ldi	r17, 0x01	; 1
     1b4:	a0 e9       	ldi	r26, 0x90	; 144
     1b6:	b1 e0       	ldi	r27, 0x01	; 1
     1b8:	01 c0       	rjmp	.+2      	; 0x1bc <.do_clear_bss_start>

000001ba <.do_clear_bss_loop>:
     1ba:	1d 92       	st	X+, r1

000001bc <.do_clear_bss_start>:
     1bc:	a5 3a       	cpi	r26, 0xA5	; 165
     1be:	b1 07       	cpc	r27, r17
     1c0:	e1 f7       	brne	.-8      	; 0x1ba <.do_clear_bss_loop>
     1c2:	4c d0       	rcall	.+152    	; 0x25c <main>
     1c4:	0c 94 21 10 	jmp	0x2042	; 0x2042 <_exit>

000001c8 <__bad_interrupt>:
     1c8:	1b cf       	rjmp	.-458    	; 0x0 <__vectors>

000001ca <LEDs_SetAllLEDs>:
				PORTD &= ~LEDMask;
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
			{
				PORTD = ((PORTD & ~LEDS_ALL_LEDS) | LEDMask);
     1ca:	9b b1       	in	r25, 0x0b	; 11
     1cc:	9f 70       	andi	r25, 0x0F	; 15
     1ce:	98 2b       	or	r25, r24
     1d0:	9b b9       	out	0x0b, r25	; 11
			}
     1d2:	08 95       	ret

000001d4 <SetupHardware>:

/** Configures the board hardware and chip peripherals for the demo's functionality. */
void SetupHardware(void)
{
	/* Disable watchdog if enabled by bootloader/fuses */
	MCUSR &= ~(1 << WDRF);
     1d4:	84 b7       	in	r24, 0x34	; 52
     1d6:	87 7f       	andi	r24, 0xF7	; 247
     1d8:	84 bf       	out	0x34, r24	; 52
	wdt_disable();
     1da:	88 e1       	ldi	r24, 0x18	; 24
     1dc:	0f b6       	in	r0, 0x3f	; 63
     1de:	f8 94       	cli
     1e0:	80 93 60 00 	sts	0x0060, r24
     1e4:	10 92 60 00 	sts	0x0060, r1
     1e8:	0f be       	out	0x3f, r0	; 63
The type of x is clock_div_t.
*/
void clock_prescale_set(clock_div_t __x)
{
    uint8_t __tmp = _BV(CLKPCE);
    __asm__ __volatile__ (
     1ea:	90 e0       	ldi	r25, 0x00	; 0
     1ec:	80 e8       	ldi	r24, 0x80	; 128
     1ee:	0f b6       	in	r0, 0x3f	; 63
     1f0:	f8 94       	cli
     1f2:	80 93 61 00 	sts	0x0061, r24
     1f6:	90 93 61 00 	sts	0x0061, r25
     1fa:	0f be       	out	0x3f, r0	; 63

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void LEDs_Init(void)
			{
				DDRD  |=  LEDS_ALL_LEDS;
     1fc:	8a b1       	in	r24, 0x0a	; 10
     1fe:	80 6f       	ori	r24, 0xF0	; 240
     200:	8a b9       	out	0x0a, r24	; 10
				PORTD &= ~LEDS_ALL_LEDS;
     202:	8b b1       	in	r24, 0x0b	; 11
     204:	8f 70       	andi	r24, 0x0F	; 15
     206:	8b b9       	out	0x0b, r24	; 11

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void Joystick_Init(void)
			{
				DDRB  &= ~JOY_BMASK;
     208:	84 b1       	in	r24, 0x04	; 4
     20a:	8f 71       	andi	r24, 0x1F	; 31
     20c:	84 b9       	out	0x04, r24	; 4
				DDRE  &= ~JOY_EMASK;
     20e:	8d b1       	in	r24, 0x0d	; 13
     210:	8f 7c       	andi	r24, 0xCF	; 207
     212:	8d b9       	out	0x0d, r24	; 13

				PORTB |=  JOY_BMASK;
     214:	85 b1       	in	r24, 0x05	; 5
     216:	80 6e       	ori	r24, 0xE0	; 224
     218:	85 b9       	out	0x05, r24	; 5
				PORTE |=  JOY_EMASK;
     21a:	8e b1       	in	r24, 0x0e	; 14
     21c:	80 63       	ori	r24, 0x30	; 48
     21e:	8e b9       	out	0x0e, r24	; 14

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void Buttons_Init(void)
			{
				DDRE  &= ~BUTTONS_BUTTON1;
     220:	6a 98       	cbi	0x0d, 2	; 13
				PORTE |=  BUTTONS_BUTTON1;
     222:	72 9a       	sbi	0x0e, 2	; 14
			 *                         \c SPI_SCK_*, \c SPI_SAMPLE_*, \c SPI_ORDER_* and \c SPI_MODE_* masks.
			 */
			static inline void SPI_Init(const uint8_t SPIOptions)
			{
				/* Prevent high rise times on PB.0 (/SS) from forcing a change to SPI slave mode */
				DDRB  |= (1 << 0);
     224:	20 9a       	sbi	0x04, 0	; 4
				PORTB |= (1 << 0);
     226:	28 9a       	sbi	0x05, 0	; 5

				DDRB  |=  ((1 << 1) | (1 << 2));
     228:	84 b1       	in	r24, 0x04	; 4
     22a:	86 60       	ori	r24, 0x06	; 6
     22c:	84 b9       	out	0x04, r24	; 4
				DDRB  &= ~(1 << 3);
     22e:	23 98       	cbi	0x04, 3	; 4
				PORTB |=  (1 << 3);
     230:	2b 9a       	sbi	0x05, 3	; 5

				if (SPIOptions & SPI_USE_DOUBLESPEED)
				  SPSR |= (1 << SPI2X);
     232:	8d b5       	in	r24, 0x2d	; 45
     234:	81 60       	ori	r24, 0x01	; 1
     236:	8d bd       	out	0x2d, r24	; 45
				else
				  SPSR &= ~(1 << SPI2X);

				/* Switch /SS to input mode after configuration to allow for forced mode changes */
				DDRB &= ~(1 << 0);
     238:	20 98       	cbi	0x04, 0	; 4

				SPCR  = ((1 << SPE) | SPIOptions);
     23a:	8c e5       	ldi	r24, 0x5C	; 92
     23c:	8c bd       	out	0x2c, r24	; 44
			/** Initializes the dataflash driver so that commands and data may be sent to an attached dataflash IC.
			 *  The microcontroller's SPI driver MUST be initialized before any of the dataflash commands are used.
			 */
			static inline void Dataflash_Init(void)
			{
				DATAFLASH_CHIPCS_DDR  |= DATAFLASH_CHIPCS_MASK;
     23e:	8d b1       	in	r24, 0x0d	; 13
     240:	83 60       	ori	r24, 0x03	; 3
     242:	8d b9       	out	0x0d, r24	; 13
				DATAFLASH_CHIPCS_PORT |= DATAFLASH_CHIPCS_MASK;
     244:	8e b1       	in	r24, 0x0e	; 14
     246:	83 60       	ori	r24, 0x03	; 3
     248:	8e b9       	out	0x0e, r24	; 14
	LEDs_Init();
	Joystick_Init();
	Buttons_Init();
	SPI_Init(SPI_SPEED_FCPU_DIV_2 | SPI_ORDER_MSB_FIRST | SPI_SCK_LEAD_FALLING | SPI_SAMPLE_TRAILING | SPI_MODE_MASTER);
	Dataflash_Init();
	USB_Init();
     24a:	0e 94 c0 09 	call	0x1380	; 0x1380 <USB_Init>

	/* Check if the Dataflash is working, abort if not */
	if (!(DataflashManager_CheckDataflashOperation()))
     24e:	bc d3       	rcall	.+1912   	; 0x9c8 <DataflashManager_CheckDataflashOperation>
     250:	88 23       	and	r24, r24
     252:	19 f4       	brne	.+6      	; 0x25a <SetupHardware+0x86>
     254:	80 e9       	ldi	r24, 0x90	; 144
	{
		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
     256:	b9 df       	rcall	.-142    	; 0x1ca <LEDs_SetAllLEDs>
     258:	ff cf       	rjmp	.-2      	; 0x258 <SetupHardware+0x84>
     25a:	68 c3       	rjmp	.+1744   	; 0x92c <DataflashManager_ResetDataflashProtections>

0000025c <main>:
     25c:	bb df       	rcall	.-138    	; 0x1d4 <SetupHardware>
		for(;;);
	}

	/* Clear Dataflash sector protections, if enabled */
	DataflashManager_ResetDataflashProtections();
     25e:	80 e1       	ldi	r24, 0x10	; 16
     260:	b4 df       	rcall	.-152    	; 0x1ca <LEDs_SetAllLEDs>
}
     262:	78 94       	sei
 */
int main(void)
{
	SetupHardware();

	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
     264:	80 e1       	ldi	r24, 0x10	; 16
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				sei();
     266:	91 e0       	ldi	r25, 0x01	; 1
	GlobalInterruptEnable();

	for (;;)
	{
		MS_Device_USBTask(&Disk_MS_Interface);
     268:	0e 94 de 0e 	call	0x1dbc	; 0x1dbc <MS_Device_USBTask>
     26c:	80 e0       	ldi	r24, 0x00	; 0
     26e:	91 e0       	ldi	r25, 0x01	; 1
		HID_Device_USBTask(&Keyboard_HID_Interface);
     270:	0e 94 be 0d 	call	0x1b7c	; 0x1b7c <HID_Device_USBTask>
     274:	0e 94 54 0c 	call	0x18a8	; 0x18a8 <USB_USBTask>
		USB_USBTask();
     278:	f5 cf       	rjmp	.-22     	; 0x264 <main+0x8>

0000027a <EVENT_USB_Device_Connect>:
     27a:	80 ea       	ldi	r24, 0xA0	; 160
     27c:	a6 cf       	rjmp	.-180    	; 0x1ca <LEDs_SetAllLEDs>

0000027e <EVENT_USB_Device_Disconnect>:
}

/** Event handler for the library USB Connection event. */
void EVENT_USB_Device_Connect(void)
{
	LEDs_SetAllLEDs(LEDMASK_USB_ENUMERATING);
     27e:	80 e1       	ldi	r24, 0x10	; 16
}
     280:	a4 cf       	rjmp	.-184    	; 0x1ca <LEDs_SetAllLEDs>

00000282 <EVENT_USB_Device_ConfigurationChanged>:

/** Event handler for the library USB Disconnection event. */
void EVENT_USB_Device_Disconnect(void)
{
	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
     282:	cf 93       	push	r28
}
     284:	80 e0       	ldi	r24, 0x00	; 0
/** Event handler for the library USB Configuration Changed event. */
void EVENT_USB_Device_ConfigurationChanged(void)
{
	bool ConfigSuccess = true;

	ConfigSuccess &= HID_Device_ConfigureEndpoints(&Keyboard_HID_Interface);
     286:	91 e0       	ldi	r25, 0x01	; 1
     288:	0e 94 a5 0d 	call	0x1b4a	; 0x1b4a <HID_Device_ConfigureEndpoints>
     28c:	c8 2f       	mov	r28, r24
	ConfigSuccess &= MS_Device_ConfigureEndpoints(&Disk_MS_Interface);
     28e:	80 e1       	ldi	r24, 0x10	; 16
     290:	91 e0       	ldi	r25, 0x01	; 1
     292:	0e 94 c2 0e 	call	0x1d84	; 0x1d84 <MS_Device_ConfigureEndpoints>
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
     296:	90 91 e2 00 	lds	r25, 0x00E2
     29a:	94 60       	ori	r25, 0x04	; 4
     29c:	90 93 e2 00 	sts	0x00E2, r25
     2a0:	28 2f       	mov	r18, r24
     2a2:	30 e0       	ldi	r19, 0x00	; 0
/** Event handler for the library USB Configuration Changed event. */
void EVENT_USB_Device_ConfigurationChanged(void)
{
	bool ConfigSuccess = true;

	ConfigSuccess &= HID_Device_ConfigureEndpoints(&Keyboard_HID_Interface);
     2a4:	8c 2f       	mov	r24, r28
     2a6:	90 e0       	ldi	r25, 0x00	; 0
	ConfigSuccess &= MS_Device_ConfigureEndpoints(&Disk_MS_Interface);
     2a8:	28 23       	and	r18, r24
     2aa:	39 23       	and	r19, r25

	USB_Device_EnableSOFEvents();

	LEDs_SetAllLEDs(ConfigSuccess ? LEDMASK_USB_READY : LEDMASK_USB_ERROR);
     2ac:	21 15       	cp	r18, r1
     2ae:	31 05       	cpc	r19, r1
     2b0:	11 f0       	breq	.+4      	; 0x2b6 <EVENT_USB_Device_ConfigurationChanged+0x34>
     2b2:	80 e6       	ldi	r24, 0x60	; 96
     2b4:	01 c0       	rjmp	.+2      	; 0x2b8 <EVENT_USB_Device_ConfigurationChanged+0x36>
     2b6:	80 e9       	ldi	r24, 0x90	; 144
     2b8:	88 df       	rcall	.-240    	; 0x1ca <LEDs_SetAllLEDs>
     2ba:	cf 91       	pop	r28
}
     2bc:	08 95       	ret

000002be <EVENT_USB_Device_ControlRequest>:
     2be:	80 e1       	ldi	r24, 0x10	; 16

/** Event handler for the library USB Control Request reception event. */
void EVENT_USB_Device_ControlRequest(void)
{
	MS_Device_ProcessControlRequest(&Disk_MS_Interface);
     2c0:	91 e0       	ldi	r25, 0x01	; 1
     2c2:	0e 94 85 0e 	call	0x1d0a	; 0x1d0a <MS_Device_ProcessControlRequest>
	HID_Device_ProcessControlRequest(&Keyboard_HID_Interface);
     2c6:	80 e0       	ldi	r24, 0x00	; 0
     2c8:	91 e0       	ldi	r25, 0x01	; 1
     2ca:	0c 94 70 0c 	jmp	0x18e0	; 0x18e0 <HID_Device_ProcessControlRequest>

000002ce <CALLBACK_MS_Device_SCSICommandReceived>:
}
     2ce:	cf 93       	push	r28
/** Mass Storage class driver callback function the reception of SCSI commands from the host, which must be processed.
 *
 *  \param[in] MSInterfaceInfo  Pointer to the Mass Storage class interface configuration structure being referenced
 */
bool CALLBACK_MS_Device_SCSICommandReceived(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
     2d0:	df 93       	push	r29
     2d2:	ec 01       	movw	r28, r24
	bool CommandSuccess;

	LEDs_SetAllLEDs(LEDMASK_USB_BUSY);
     2d4:	80 e2       	ldi	r24, 0x20	; 32
     2d6:	79 df       	rcall	.-270    	; 0x1ca <LEDs_SetAllLEDs>
     2d8:	ce 01       	movw	r24, r28
	CommandSuccess = SCSI_DecodeSCSICommand(MSInterfaceInfo);
     2da:	e6 d3       	rcall	.+1996   	; 0xaa8 <SCSI_DecodeSCSICommand>
     2dc:	c8 2f       	mov	r28, r24
     2de:	80 e6       	ldi	r24, 0x60	; 96
     2e0:	74 df       	rcall	.-280    	; 0x1ca <LEDs_SetAllLEDs>
	LEDs_SetAllLEDs(LEDMASK_USB_READY);
     2e2:	8c 2f       	mov	r24, r28
     2e4:	df 91       	pop	r29
     2e6:	cf 91       	pop	r28

	return CommandSuccess;
}
     2e8:	08 95       	ret

000002ea <EVENT_USB_Device_StartOfFrame>:
     2ea:	80 91 0e 01 	lds	r24, 0x010E
     2ee:	90 91 0f 01 	lds	r25, 0x010F
			 *  \param[in,out] HIDInterfaceInfo  Pointer to a structure containing a HID Class configuration and state.
			 */
			static inline void HID_Device_MillisecondElapsed(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo) ATTR_ALWAYS_INLINE ATTR_NON_NULL_PTR_ARG(1);
			static inline void HID_Device_MillisecondElapsed(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
			{
				if (HIDInterfaceInfo->State.IdleMSRemaining)
     2f2:	00 97       	sbiw	r24, 0x00	; 0
     2f4:	29 f0       	breq	.+10     	; 0x300 <EVENT_USB_Device_StartOfFrame+0x16>
				  HIDInterfaceInfo->State.IdleMSRemaining--;
     2f6:	01 97       	sbiw	r24, 0x01	; 1
     2f8:	90 93 0f 01 	sts	0x010F, r25
     2fc:	80 93 0e 01 	sts	0x010E, r24
     300:	08 95       	ret

00000302 <CALLBACK_HID_Device_CreateHIDReport>:
bool CALLBACK_HID_Device_CreateHIDReport(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo,
                                         uint8_t* const ReportID,
                                         const uint8_t ReportType,
                                         void* ReportData,
                                         uint16_t* const ReportSize)
{
     302:	0f 93       	push	r16
     304:	1f 93       	push	r17
     306:	f9 01       	movw	r30, r18
     308:	d8 01       	movw	r26, r16
			}

			static inline uint8_t Joystick_GetStatus(void) ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t Joystick_GetStatus(void)
			{
				return (((uint8_t)~PINB & JOY_BMASK) | (((uint8_t)~PINE & JOY_EMASK) >> JOY_PORTE_MASK_SHIFT));
     30a:	23 b1       	in	r18, 0x03	; 3
     30c:	8c b1       	in	r24, 0x0c	; 12
     30e:	80 95       	com	r24
     310:	90 e0       	ldi	r25, 0x00	; 0
     312:	80 73       	andi	r24, 0x30	; 48
     314:	90 70       	andi	r25, 0x00	; 0
     316:	95 95       	asr	r25
     318:	87 95       	ror	r24
     31a:	20 95       	com	r18
     31c:	20 7e       	andi	r18, 0xE0	; 224
     31e:	28 2b       	or	r18, r24
			}

			static inline uint8_t Buttons_GetStatus(void) ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t Buttons_GetStatus(void)
			{
				return ((PINE & BUTTONS_BUTTON1) ^ BUTTONS_BUTTON1);
     320:	8c b1       	in	r24, 0x0c	; 12
     322:	80 95       	com	r24
     324:	84 70       	andi	r24, 0x04	; 4
	USB_KeyboardReport_Data_t* KeyboardReport = (USB_KeyboardReport_Data_t*)ReportData;

	uint8_t JoyStatus_LCL    = Joystick_GetStatus();
	uint8_t ButtonStatus_LCL = Buttons_GetStatus();

	KeyboardReport->Modifier = HID_KEYBOARD_MODIFIER_LEFTSHIFT;
     326:	92 e0       	ldi	r25, 0x02	; 2
     328:	90 83       	st	Z, r25

	if (JoyStatus_LCL & JOY_UP)
     32a:	27 ff       	sbrs	r18, 7
     32c:	02 c0       	rjmp	.+4      	; 0x332 <CALLBACK_HID_Device_CreateHIDReport+0x30>
	  KeyboardReport->KeyCode[0] = HID_KEYBOARD_SC_A;
     32e:	94 e0       	ldi	r25, 0x04	; 4
     330:	03 c0       	rjmp	.+6      	; 0x338 <CALLBACK_HID_Device_CreateHIDReport+0x36>
	else if (JoyStatus_LCL & JOY_DOWN)
     332:	24 ff       	sbrs	r18, 4
     334:	02 c0       	rjmp	.+4      	; 0x33a <CALLBACK_HID_Device_CreateHIDReport+0x38>
	  KeyboardReport->KeyCode[0] = HID_KEYBOARD_SC_B;
     336:	95 e0       	ldi	r25, 0x05	; 5
     338:	92 83       	std	Z+2, r25	; 0x02

	if (JoyStatus_LCL & JOY_LEFT)
     33a:	26 ff       	sbrs	r18, 6
     33c:	02 c0       	rjmp	.+4      	; 0x342 <CALLBACK_HID_Device_CreateHIDReport+0x40>
	  KeyboardReport->KeyCode[0] = HID_KEYBOARD_SC_C;
     33e:	96 e0       	ldi	r25, 0x06	; 6
     340:	03 c0       	rjmp	.+6      	; 0x348 <CALLBACK_HID_Device_CreateHIDReport+0x46>
	else if (JoyStatus_LCL & JOY_RIGHT)
     342:	23 ff       	sbrs	r18, 3
     344:	02 c0       	rjmp	.+4      	; 0x34a <CALLBACK_HID_Device_CreateHIDReport+0x48>
	  KeyboardReport->KeyCode[0] = HID_KEYBOARD_SC_D;
     346:	97 e0       	ldi	r25, 0x07	; 7
     348:	92 83       	std	Z+2, r25	; 0x02

	if (JoyStatus_LCL & JOY_PRESS)
     34a:	25 ff       	sbrs	r18, 5
     34c:	02 c0       	rjmp	.+4      	; 0x352 <CALLBACK_HID_Device_CreateHIDReport+0x50>
	  KeyboardReport->KeyCode[0] = HID_KEYBOARD_SC_E;
     34e:	98 e0       	ldi	r25, 0x08	; 8
     350:	92 83       	std	Z+2, r25	; 0x02

	if (ButtonStatus_LCL & BUTTONS_BUTTON1)
     352:	88 23       	and	r24, r24
     354:	11 f0       	breq	.+4      	; 0x35a <CALLBACK_HID_Device_CreateHIDReport+0x58>
	  KeyboardReport->KeyCode[0] = HID_KEYBOARD_SC_F;
     356:	89 e0       	ldi	r24, 0x09	; 9
     358:	82 83       	std	Z+2, r24	; 0x02

	*ReportSize = sizeof(USB_KeyboardReport_Data_t);
     35a:	88 e0       	ldi	r24, 0x08	; 8
     35c:	90 e0       	ldi	r25, 0x00	; 0
     35e:	11 96       	adiw	r26, 0x01	; 1
     360:	9c 93       	st	X, r25
     362:	8e 93       	st	-X, r24
	return false;
}
     364:	80 e0       	ldi	r24, 0x00	; 0
     366:	1f 91       	pop	r17
     368:	0f 91       	pop	r16
     36a:	08 95       	ret

0000036c <CALLBACK_HID_Device_ProcessHIDReport>:
                                          const uint16_t ReportSize)
{
	uint8_t  LEDMask   = LEDS_NO_LEDS;
	uint8_t* LEDReport = (uint8_t*)ReportData;

	if (*LEDReport & HID_KEYBOARD_LED_NUMLOCK)
     36c:	f9 01       	movw	r30, r18
     36e:	90 81       	ld	r25, Z
     370:	90 ff       	sbrs	r25, 0
     372:	02 c0       	rjmp	.+4      	; 0x378 <CALLBACK_HID_Device_ProcessHIDReport+0xc>
	  LEDMask |= LEDS_LED1;
     374:	80 e1       	ldi	r24, 0x10	; 16
     376:	01 c0       	rjmp	.+2      	; 0x37a <CALLBACK_HID_Device_ProcessHIDReport+0xe>
                                          const uint8_t ReportID,
                                          const uint8_t ReportType,
                                          const void* ReportData,
                                          const uint16_t ReportSize)
{
	uint8_t  LEDMask   = LEDS_NO_LEDS;
     378:	80 e0       	ldi	r24, 0x00	; 0
	uint8_t* LEDReport = (uint8_t*)ReportData;

	if (*LEDReport & HID_KEYBOARD_LED_NUMLOCK)
	  LEDMask |= LEDS_LED1;

	if (*LEDReport & HID_KEYBOARD_LED_CAPSLOCK)
     37a:	91 fd       	sbrc	r25, 1
	  LEDMask |= LEDS_LED3;
     37c:	80 68       	ori	r24, 0x80	; 128

	if (*LEDReport & HID_KEYBOARD_LED_SCROLLLOCK)
     37e:	92 fd       	sbrc	r25, 2
	  LEDMask |= LEDS_LED4;
     380:	80 64       	ori	r24, 0x40	; 64

	LEDs_SetAllLEDs(LEDMask);
     382:	23 cf       	rjmp	.-442    	; 0x1ca <LEDs_SetAllLEDs>

00000384 <CALLBACK_USB_GetDescriptor>:
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
     384:	93 30       	cpi	r25, 0x03	; 3
     386:	89 f0       	breq	.+34     	; 0x3aa <CALLBACK_USB_GetDescriptor+0x26>
     388:	94 30       	cpi	r25, 0x04	; 4
     38a:	28 f4       	brcc	.+10     	; 0x396 <CALLBACK_USB_GetDescriptor+0x12>
     38c:	91 30       	cpi	r25, 0x01	; 1
     38e:	49 f1       	breq	.+82     	; 0x3e2 <CALLBACK_USB_GetDescriptor+0x5e>
     390:	92 30       	cpi	r25, 0x02	; 2
     392:	61 f5       	brne	.+88     	; 0x3ec <CALLBACK_USB_GetDescriptor+0x68>
     394:	05 c0       	rjmp	.+10     	; 0x3a0 <CALLBACK_USB_GetDescriptor+0x1c>
     396:	91 32       	cpi	r25, 0x21	; 33
     398:	d1 f0       	breq	.+52     	; 0x3ce <CALLBACK_USB_GetDescriptor+0x4a>
     39a:	92 32       	cpi	r25, 0x22	; 34
     39c:	39 f5       	brne	.+78     	; 0x3ec <CALLBACK_USB_GetDescriptor+0x68>
     39e:	1c c0       	rjmp	.+56     	; 0x3d8 <CALLBACK_USB_GetDescriptor+0x54>
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
			Size    = sizeof(USB_Descriptor_Configuration_t);
     3a0:	89 e3       	ldi	r24, 0x39	; 57
     3a2:	90 e0       	ldi	r25, 0x00	; 0
		case DTYPE_Device:
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
     3a4:	e0 e0       	ldi	r30, 0x00	; 0
     3a6:	f1 e0       	ldi	r31, 0x01	; 1
			Size    = sizeof(USB_Descriptor_Configuration_t);
			break;
     3a8:	25 c0       	rjmp	.+74     	; 0x3f4 <CALLBACK_USB_GetDescriptor+0x70>
		case DTYPE_String:
			switch (DescriptorNumber)
     3aa:	81 30       	cpi	r24, 0x01	; 1
     3ac:	41 f0       	breq	.+16     	; 0x3be <CALLBACK_USB_GetDescriptor+0x3a>
     3ae:	81 30       	cpi	r24, 0x01	; 1
     3b0:	18 f0       	brcs	.+6      	; 0x3b8 <CALLBACK_USB_GetDescriptor+0x34>
     3b2:	82 30       	cpi	r24, 0x02	; 2
     3b4:	d9 f4       	brne	.+54     	; 0x3ec <CALLBACK_USB_GetDescriptor+0x68>
     3b6:	06 c0       	rjmp	.+12     	; 0x3c4 <CALLBACK_USB_GetDescriptor+0x40>
			{
				case 0x00:
					Address = &LanguageString;
					Size    = pgm_read_byte(&LanguageString.Header.Size);
     3b8:	ec ef       	ldi	r30, 0xFC	; 252
     3ba:	f0 e0       	ldi	r31, 0x00	; 0
     3bc:	05 c0       	rjmp	.+10     	; 0x3c8 <CALLBACK_USB_GetDescriptor+0x44>
					break;
				case 0x01:
					Address = &ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
     3be:	e2 ee       	ldi	r30, 0xE2	; 226
     3c0:	f0 e0       	ldi	r31, 0x00	; 0
     3c2:	02 c0       	rjmp	.+4      	; 0x3c8 <CALLBACK_USB_GetDescriptor+0x44>
					break;
				case 0x02:
					Address = &ProductString;
					Size    = pgm_read_byte(&ProductString.Header.Size);
     3c4:	e8 e9       	ldi	r30, 0x98	; 152
     3c6:	f0 e0       	ldi	r31, 0x00	; 0
     3c8:	84 91       	lpm	r24, Z
     3ca:	90 e0       	ldi	r25, 0x00	; 0
					break;
     3cc:	13 c0       	rjmp	.+38     	; 0x3f4 <CALLBACK_USB_GetDescriptor+0x70>
			}

			break;
		case HID_DTYPE_HID:
			Address = &ConfigurationDescriptor.HID_KeyboardHID;
			Size    = sizeof(USB_HID_Descriptor_HID_t);
     3ce:	89 e0       	ldi	r24, 0x09	; 9
     3d0:	90 e0       	ldi	r25, 0x00	; 0
					break;
			}

			break;
		case HID_DTYPE_HID:
			Address = &ConfigurationDescriptor.HID_KeyboardHID;
     3d2:	e9 e2       	ldi	r30, 0x29	; 41
     3d4:	f1 e0       	ldi	r31, 0x01	; 1
			Size    = sizeof(USB_HID_Descriptor_HID_t);
			break;
     3d6:	0e c0       	rjmp	.+28     	; 0x3f4 <CALLBACK_USB_GetDescriptor+0x70>
		case HID_DTYPE_Report:
			Address = &KeyboardReport;
			Size    = sizeof(KeyboardReport);
     3d8:	8f e3       	ldi	r24, 0x3F	; 63
     3da:	90 e0       	ldi	r25, 0x00	; 0
		case HID_DTYPE_HID:
			Address = &ConfigurationDescriptor.HID_KeyboardHID;
			Size    = sizeof(USB_HID_Descriptor_HID_t);
			break;
		case HID_DTYPE_Report:
			Address = &KeyboardReport;
     3dc:	eb e4       	ldi	r30, 0x4B	; 75
     3de:	f1 e0       	ldi	r31, 0x01	; 1
			Size    = sizeof(KeyboardReport);
			break;
     3e0:	09 c0       	rjmp	.+18     	; 0x3f4 <CALLBACK_USB_GetDescriptor+0x70>

	switch (DescriptorType)
	{
		case DTYPE_Device:
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
     3e2:	82 e1       	ldi	r24, 0x12	; 18
     3e4:	90 e0       	ldi	r25, 0x00	; 0
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
	{
		case DTYPE_Device:
			Address = &DeviceDescriptor;
     3e6:	e9 e3       	ldi	r30, 0x39	; 57
     3e8:	f1 e0       	ldi	r31, 0x01	; 1
     3ea:	04 c0       	rjmp	.+8      	; 0x3f4 <CALLBACK_USB_GetDescriptor+0x70>
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;
     3ec:	80 e0       	ldi	r24, 0x00	; 0
     3ee:	90 e0       	ldi	r25, 0x00	; 0
                                    const void** const DescriptorAddress)
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
     3f0:	e0 e0       	ldi	r30, 0x00	; 0
     3f2:	f0 e0       	ldi	r31, 0x00	; 0
			Address = &KeyboardReport;
			Size    = sizeof(KeyboardReport);
			break;
	}

	*DescriptorAddress = Address;
     3f4:	da 01       	movw	r26, r20
     3f6:	11 96       	adiw	r26, 0x01	; 1
     3f8:	fc 93       	st	X, r31
     3fa:	ee 93       	st	-X, r30
	return Size;
}
     3fc:	08 95       	ret

000003fe <Dataflash_ToggleSelectedChipCS>:
			 *          or a DATAFLASH_CHIPn mask (where n is the chip number).
			 */
			static inline uint8_t Dataflash_GetSelectedChip(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t Dataflash_GetSelectedChip(void)
			{
				return (~DATAFLASH_CHIPCS_PORT & DATAFLASH_CHIPCS_MASK);
     3fe:	8e b1       	in	r24, 0x0e	; 14
			 *              the chip number).
			 */
			static inline void Dataflash_SelectChip(const uint8_t ChipMask) ATTR_ALWAYS_INLINE;
			static inline void Dataflash_SelectChip(const uint8_t ChipMask)
			{
				DATAFLASH_CHIPCS_PORT = ((DATAFLASH_CHIPCS_PORT | DATAFLASH_CHIPCS_MASK) & ~ChipMask);
     400:	9e b1       	in	r25, 0x0e	; 14
     402:	93 60       	ori	r25, 0x03	; 3
     404:	9e b9       	out	0x0e, r25	; 14
     406:	9e b1       	in	r25, 0x0e	; 14
     408:	8c 6f       	ori	r24, 0xFC	; 252
     40a:	93 60       	ori	r25, 0x03	; 3
     40c:	89 23       	and	r24, r25
     40e:	8e b9       	out	0x0e, r24	; 14
			{
				uint8_t SelectedChipMask = Dataflash_GetSelectedChip();

				Dataflash_DeselectChip();
				Dataflash_SelectChip(SelectedChipMask);
			}
     410:	08 95       	ret

00000412 <Dataflash_WaitWhileBusy>:
			/** Spin-loops while the currently selected dataflash is busy executing a command, such as a main
			 *  memory page program or main memory to buffer transfer.
			 */
			static inline void Dataflash_WaitWhileBusy(void)
			{
				Dataflash_ToggleSelectedChipCS();
     412:	f5 df       	rcall	.-22     	; 0x3fe <Dataflash_ToggleSelectedChipCS>
     414:	87 ed       	ldi	r24, 0xD7	; 215
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     416:	8e bd       	out	0x2e, r24	; 46
     418:	0d b4       	in	r0, 0x2d	; 45
				while (!(SPSR & (1 << SPIF)));
     41a:	07 fe       	sbrs	r0, 7
     41c:	fd cf       	rjmp	.-6      	; 0x418 <Dataflash_WaitWhileBusy+0x6>
     41e:	1e bc       	out	0x2e, r1	; 46
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     420:	0d b4       	in	r0, 0x2d	; 45
				while (!(SPSR & (1 << SPIF)));
     422:	07 fe       	sbrs	r0, 7
     424:	fd cf       	rjmp	.-6      	; 0x420 <Dataflash_WaitWhileBusy+0xe>
     426:	0e b4       	in	r0, 0x2e	; 46
				Dataflash_SendByte(DF_CMD_GETSTATUS);
				while (!(Dataflash_ReceiveByte() & DF_STATUS_READY));
     428:	07 fe       	sbrs	r0, 7
     42a:	f9 cf       	rjmp	.-14     	; 0x41e <Dataflash_WaitWhileBusy+0xc>
     42c:	e8 cf       	rjmp	.-48     	; 0x3fe <Dataflash_ToggleSelectedChipCS>

0000042e <Dataflash_SendAddressBytes>:
				Dataflash_ToggleSelectedChipCS();
     42e:	9c 01       	movw	r18, r24
     430:	36 95       	lsr	r19
			}
     432:	27 95       	ror	r18
			{
				#if (DATAFLASH_TOTALCHIPS == 2)
					PageAddress >>= 1;
				#endif
				
				Dataflash_SendByte(PageAddress >> 5);
     434:	56 e0       	ldi	r21, 0x06	; 6
     436:	96 95       	lsr	r25
     438:	87 95       	ror	r24
     43a:	5a 95       	dec	r21
     43c:	e1 f7       	brne	.-8      	; 0x436 <Dataflash_SendAddressBytes+0x8>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     43e:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     440:	0d b4       	in	r0, 0x2d	; 45
     442:	07 fe       	sbrs	r0, 7
     444:	fd cf       	rjmp	.-6      	; 0x440 <Dataflash_SendAddressBytes+0x12>
				Dataflash_SendByte((PageAddress << 3) | (BufferByte >> 8));
     446:	22 0f       	add	r18, r18
     448:	22 0f       	add	r18, r18
     44a:	22 0f       	add	r18, r18
     44c:	27 2b       	or	r18, r23
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     44e:	2e bd       	out	0x2e, r18	; 46
				while (!(SPSR & (1 << SPIF)));
     450:	0d b4       	in	r0, 0x2d	; 45
     452:	07 fe       	sbrs	r0, 7
     454:	fd cf       	rjmp	.-6      	; 0x450 <Dataflash_SendAddressBytes+0x22>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     456:	6e bd       	out	0x2e, r22	; 46
				while (!(SPSR & (1 << SPIF)));
     458:	0d b4       	in	r0, 0x2d	; 45
     45a:	07 fe       	sbrs	r0, 7
     45c:	fd cf       	rjmp	.-6      	; 0x458 <Dataflash_SendAddressBytes+0x2a>
				Dataflash_SendByte(BufferByte);
			}
     45e:	08 95       	ret

00000460 <Dataflash_SelectChipFromPage>:
			 *              the chip number).
			 */
			static inline void Dataflash_SelectChip(const uint8_t ChipMask) ATTR_ALWAYS_INLINE;
			static inline void Dataflash_SelectChip(const uint8_t ChipMask)
			{
				DATAFLASH_CHIPCS_PORT = ((DATAFLASH_CHIPCS_PORT | DATAFLASH_CHIPCS_MASK) & ~ChipMask);
     460:	2e b1       	in	r18, 0x0e	; 14
     462:	23 60       	ori	r18, 0x03	; 3
     464:	2e b9       	out	0x0e, r18	; 14
			 */
			static inline void Dataflash_SelectChipFromPage(const uint16_t PageAddress)
			{
				Dataflash_DeselectChip();

				if (PageAddress >= (DATAFLASH_PAGES * DATAFLASH_TOTALCHIPS))
     466:	20 e4       	ldi	r18, 0x40	; 64
     468:	80 30       	cpi	r24, 0x00	; 0
     46a:	92 07       	cpc	r25, r18
     46c:	58 f4       	brcc	.+22     	; 0x484 <Dataflash_SelectChipFromPage+0x24>
				  return;

				#if (DATAFLASH_TOTALCHIPS == 2)
					if (PageAddress & 0x01)
     46e:	80 ff       	sbrs	r24, 0
     470:	05 c0       	rjmp	.+10     	; 0x47c <Dataflash_SelectChipFromPage+0x1c>
			 *              the chip number).
			 */
			static inline void Dataflash_SelectChip(const uint8_t ChipMask) ATTR_ALWAYS_INLINE;
			static inline void Dataflash_SelectChip(const uint8_t ChipMask)
			{
				DATAFLASH_CHIPCS_PORT = ((DATAFLASH_CHIPCS_PORT | DATAFLASH_CHIPCS_MASK) & ~ChipMask);
     472:	8e b1       	in	r24, 0x0e	; 14
     474:	83 60       	ori	r24, 0x03	; 3
     476:	8d 7f       	andi	r24, 0xFD	; 253
     478:	8e b9       	out	0x0e, r24	; 14
     47a:	08 95       	ret
     47c:	8e b1       	in	r24, 0x0e	; 14
     47e:	83 60       	ori	r24, 0x03	; 3
     480:	8e 7f       	andi	r24, 0xFE	; 254
     482:	8e b9       	out	0x0e, r24	; 14
     484:	08 95       	ret

00000486 <DataflashManager_WriteBlocks>:
 *  \param[in] TotalBlocks   Number of blocks of data to write
 */
void DataflashManager_WriteBlocks(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo,
                                  const uint32_t BlockAddress,
                                  uint16_t TotalBlocks)
{
     486:	3f 92       	push	r3
     488:	4f 92       	push	r4
     48a:	5f 92       	push	r5
     48c:	6f 92       	push	r6
     48e:	7f 92       	push	r7
     490:	8f 92       	push	r8
     492:	9f 92       	push	r9
     494:	af 92       	push	r10
     496:	bf 92       	push	r11
     498:	cf 92       	push	r12
     49a:	df 92       	push	r13
     49c:	ef 92       	push	r14
     49e:	ff 92       	push	r15
     4a0:	0f 93       	push	r16
     4a2:	1f 93       	push	r17
     4a4:	cf 93       	push	r28
     4a6:	df 93       	push	r29
     4a8:	0f 92       	push	r0
     4aa:	cd b7       	in	r28, 0x3d	; 61
     4ac:	de b7       	in	r29, 0x3e	; 62
     4ae:	2c 01       	movw	r4, r24
     4b0:	b2 2e       	mov	r11, r18
     4b2:	c3 2e       	mov	r12, r19
	uint16_t CurrDFPage          = ((BlockAddress * VIRTUAL_MEMORY_BLOCK_SIZE) / DATAFLASH_PAGE_SIZE);
     4b4:	db 01       	movw	r26, r22
     4b6:	ca 01       	movw	r24, r20
     4b8:	f9 e0       	ldi	r31, 0x09	; 9
     4ba:	88 0f       	add	r24, r24
     4bc:	99 1f       	adc	r25, r25
     4be:	aa 1f       	adc	r26, r26
     4c0:	bb 1f       	adc	r27, r27
     4c2:	fa 95       	dec	r31
     4c4:	d1 f7       	brne	.-12     	; 0x4ba <DataflashManager_WriteBlocks+0x34>
     4c6:	1a e0       	ldi	r17, 0x0A	; 10
     4c8:	b6 95       	lsr	r27
     4ca:	a7 95       	ror	r26
     4cc:	97 95       	ror	r25
     4ce:	87 95       	ror	r24
     4d0:	1a 95       	dec	r17
     4d2:	d1 f7       	brne	.-12     	; 0x4c8 <DataflashManager_WriteBlocks+0x42>
     4d4:	7c 01       	movw	r14, r24
	uint16_t CurrDFPageByte      = ((BlockAddress * VIRTUAL_MEMORY_BLOCK_SIZE) % DATAFLASH_PAGE_SIZE);
     4d6:	8a 01       	movw	r16, r20
     4d8:	10 2f       	mov	r17, r16
     4da:	00 27       	eor	r16, r16
     4dc:	11 0f       	add	r17, r17
     4de:	13 70       	andi	r17, 0x03	; 3
	uint8_t  CurrDFPageByteDiv16 = (CurrDFPageByte >> 4);
	bool     UsingSecondBuffer   = false;

	/* Select the correct starting Dataflash IC for the block requested */
	Dataflash_SelectChipFromPage(CurrDFPage);
     4e0:	bf df       	rcall	.-130    	; 0x460 <Dataflash_SelectChipFromPage>
     4e2:	83 e5       	ldi	r24, 0x53	; 83
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     4e4:	8e bd       	out	0x2e, r24	; 46
     4e6:	0d b4       	in	r0, 0x2d	; 45
				while (!(SPSR & (1 << SPIF)));
     4e8:	07 fe       	sbrs	r0, 7
     4ea:	fd cf       	rjmp	.-6      	; 0x4e6 <DataflashManager_WriteBlocks+0x60>
     4ec:	c7 01       	movw	r24, r14

#if (DATAFLASH_PAGE_SIZE > VIRTUAL_MEMORY_BLOCK_SIZE)
	/* Copy selected dataflash's current page contents to the Dataflash buffer */
	Dataflash_SendByte(DF_CMD_MAINMEMTOBUFF1);
	Dataflash_SendAddressBytes(CurrDFPage, 0);
     4ee:	60 e0       	ldi	r22, 0x00	; 0
     4f0:	70 e0       	ldi	r23, 0x00	; 0
     4f2:	9d df       	rcall	.-198    	; 0x42e <Dataflash_SendAddressBytes>
     4f4:	8e df       	rcall	.-228    	; 0x412 <Dataflash_WaitWhileBusy>
     4f6:	84 e8       	ldi	r24, 0x84	; 132
	Dataflash_WaitWhileBusy();
     4f8:	8e bd       	out	0x2e, r24	; 46
     4fa:	0d b4       	in	r0, 0x2d	; 45
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     4fc:	07 fe       	sbrs	r0, 7
     4fe:	fd cf       	rjmp	.-6      	; 0x4fa <DataflashManager_WriteBlocks+0x74>
				while (!(SPSR & (1 << SPIF)));
     500:	80 e0       	ldi	r24, 0x00	; 0
     502:	90 e0       	ldi	r25, 0x00	; 0
     504:	b8 01       	movw	r22, r16
#endif

	/* Send the Dataflash buffer write command */
	Dataflash_SendByte(DF_CMD_BUFF1WRITE);
	Dataflash_SendAddressBytes(0, CurrDFPageByte);
     506:	93 df       	rcall	.-218    	; 0x42e <Dataflash_SendAddressBytes>
     508:	c3 d6       	rcall	.+3462   	; 0x1290 <Endpoint_WaitUntilReady>
     50a:	88 23       	and	r24, r24
     50c:	09 f0       	breq	.+2      	; 0x510 <DataflashManager_WriteBlocks+0x8a>
     50e:	f3 c0       	rjmp	.+486    	; 0x6f6 <DataflashManager_WriteBlocks+0x270>

	/* Wait until endpoint is ready before continuing */
	if (Endpoint_WaitUntilReady())
     510:	a8 01       	movw	r20, r16
     512:	74 e0       	ldi	r23, 0x04	; 4
     514:	56 95       	lsr	r21
     516:	47 95       	ror	r20
     518:	7a 95       	dec	r23
                                  const uint32_t BlockAddress,
                                  uint16_t TotalBlocks)
{
	uint16_t CurrDFPage          = ((BlockAddress * VIRTUAL_MEMORY_BLOCK_SIZE) / DATAFLASH_PAGE_SIZE);
	uint16_t CurrDFPageByte      = ((BlockAddress * VIRTUAL_MEMORY_BLOCK_SIZE) % DATAFLASH_PAGE_SIZE);
	uint8_t  CurrDFPageByteDiv16 = (CurrDFPageByte >> 4);
     51a:	e1 f7       	brne	.-8      	; 0x514 <DataflashManager_WriteBlocks+0x8e>
     51c:	0b 2d       	mov	r16, r11
     51e:	1c 2d       	mov	r17, r12
     520:	cc 24       	eor	r12, r12
     522:	dd 24       	eor	r13, r13
     524:	33 24       	eor	r3, r3
     526:	38 01       	movw	r6, r16
     528:	e5 e0       	ldi	r30, 0x05	; 5
     52a:	66 0c       	add	r6, r6
     52c:	77 1c       	adc	r7, r7
     52e:	ea 95       	dec	r30
 *
 *  \param[in] MSInterfaceInfo  Pointer to a structure containing a Mass Storage Class configuration and state
 *  \param[in] BlockAddress  Data block starting address for the write sequence
 *  \param[in] TotalBlocks   Number of blocks of data to write
 */
void DataflashManager_WriteBlocks(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo,
     530:	e1 f7       	brne	.-8      	; 0x52a <DataflashManager_WriteBlocks+0xa4>
     532:	bb 24       	eor	r11, r11
     534:	b3 94       	inc	r11
     536:	c0 c0       	rjmp	.+384    	; 0x6b8 <DataflashManager_WriteBlocks+0x232>
     538:	60 e2       	ldi	r22, 0x20	; 32
     53a:	a6 2e       	mov	r10, r22
				CurrDFPageByteDiv16 = 0;
				CurrDFPage++;

				/* Once all the Dataflash ICs have had their first buffers filled, switch buffers to maintain throughput */
				if (Dataflash_GetSelectedChip() == DATAFLASH_CHIP_MASK(DATAFLASH_TOTALCHIPS))
				  UsingSecondBuffer = !(UsingSecondBuffer);
     53c:	46 01       	movw	r8, r12
     53e:	86 0c       	add	r8, r6
     540:	97 1c       	adc	r9, r7

	/* Wait until endpoint is ready before continuing */
	if (Endpoint_WaitUntilReady())
	  return;

	while (TotalBlocks)
     542:	80 91 e8 00 	lds	r24, 0x00E8
				/* Select the next Dataflash chip based on the new Dataflash page index */
				Dataflash_SelectChipFromPage(CurrDFPage);

#if (DATAFLASH_PAGE_SIZE > VIRTUAL_MEMORY_BLOCK_SIZE)
				/* If less than one Dataflash page remaining, copy over the existing page to preserve trailing data */
				if ((TotalBlocks * (VIRTUAL_MEMORY_BLOCK_SIZE >> 4)) < (DATAFLASH_PAGE_SIZE >> 4))
     546:	85 fd       	sbrc	r24, 5
     548:	0b c0       	rjmp	.+22     	; 0x560 <DataflashManager_WriteBlocks+0xda>
     54a:	80 91 e8 00 	lds	r24, 0x00E8
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
     54e:	8b 77       	andi	r24, 0x7B	; 123

		/* Write an endpoint packet sized data block to the Dataflash */
		while (BytesInBlockDiv16 < (VIRTUAL_MEMORY_BLOCK_SIZE >> 4))
		{
			/* Check if the endpoint is currently empty */
			if (!(Endpoint_IsReadWriteAllowed()))
     550:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     554:	49 83       	std	Y+1, r20	; 0x01
     556:	9c d6       	rcall	.+3384   	; 0x1290 <Endpoint_WaitUntilReady>
     558:	49 81       	ldd	r20, Y+1	; 0x01
     55a:	88 23       	and	r24, r24
     55c:	09 f0       	breq	.+2      	; 0x560 <DataflashManager_WriteBlocks+0xda>
			{
				/* Clear the current endpoint bank */
				Endpoint_ClearOUT();

				/* Wait until the host has sent another packet */
				if (Endpoint_WaitUntilReady())
     55e:	cb c0       	rjmp	.+406    	; 0x6f6 <DataflashManager_WriteBlocks+0x270>
     560:	40 34       	cpi	r20, 0x40	; 64
     562:	09 f0       	breq	.+2      	; 0x566 <DataflashManager_WriteBlocks+0xe0>
     564:	3b c0       	rjmp	.+118    	; 0x5dc <DataflashManager_WriteBlocks+0x156>
     566:	55 df       	rcall	.-342    	; 0x412 <Dataflash_WaitWhileBusy>
     568:	33 20       	and	r3, r3
     56a:	11 f0       	breq	.+4      	; 0x570 <DataflashManager_WriteBlocks+0xea>
				  return;
			}

			/* Check if end of Dataflash page reached */
			if (CurrDFPageByteDiv16 == (DATAFLASH_PAGE_SIZE >> 4))
     56c:	86 e8       	ldi	r24, 0x86	; 134
     56e:	01 c0       	rjmp	.+2      	; 0x572 <DataflashManager_WriteBlocks+0xec>
     570:	83 e8       	ldi	r24, 0x83	; 131
			{
				/* Write the Dataflash buffer contents back to the Dataflash page */
				Dataflash_WaitWhileBusy();
     572:	8e bd       	out	0x2e, r24	; 46
     574:	0d b4       	in	r0, 0x2d	; 45
				Dataflash_SendByte(UsingSecondBuffer ? DF_CMD_BUFF2TOMAINMEMWITHERASE : DF_CMD_BUFF1TOMAINMEMWITHERASE);
     576:	07 fe       	sbrs	r0, 7
     578:	fd cf       	rjmp	.-6      	; 0x574 <DataflashManager_WriteBlocks+0xee>
     57a:	c7 01       	movw	r24, r14
     57c:	60 e0       	ldi	r22, 0x00	; 0
     57e:	70 e0       	ldi	r23, 0x00	; 0
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     580:	56 df       	rcall	.-340    	; 0x42e <Dataflash_SendAddressBytes>
				while (!(SPSR & (1 << SPIF)));
     582:	08 94       	sec
     584:	e1 1c       	adc	r14, r1
     586:	f1 1c       	adc	r15, r1
				Dataflash_SendAddressBytes(CurrDFPage, 0);
     588:	8e b1       	in	r24, 0x0e	; 14
     58a:	80 95       	com	r24
     58c:	83 70       	andi	r24, 0x03	; 3
     58e:	82 30       	cpi	r24, 0x02	; 2
     590:	09 f4       	brne	.+2      	; 0x594 <DataflashManager_WriteBlocks+0x10e>

				/* Reset the Dataflash buffer counter, increment the page counter */
				CurrDFPageByteDiv16 = 0;
				CurrDFPage++;
     592:	3b 24       	eor	r3, r11
     594:	c7 01       	movw	r24, r14
     596:	64 df       	rcall	.-312    	; 0x460 <Dataflash_SelectChipFromPage>
			 *          or a DATAFLASH_CHIPn mask (where n is the chip number).
			 */
			static inline uint8_t Dataflash_GetSelectedChip(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t Dataflash_GetSelectedChip(void)
			{
				return (~DATAFLASH_CHIPCS_PORT & DATAFLASH_CHIPCS_MASK);
     598:	80 e4       	ldi	r24, 0x40	; 64
     59a:	88 16       	cp	r8, r24
     59c:	91 04       	cpc	r9, r1

				/* Once all the Dataflash ICs have had their first buffers filled, switch buffers to maintain throughput */
				if (Dataflash_GetSelectedChip() == DATAFLASH_CHIP_MASK(DATAFLASH_TOTALCHIPS))
     59e:	78 f4       	brcc	.+30     	; 0x5be <DataflashManager_WriteBlocks+0x138>
     5a0:	38 df       	rcall	.-400    	; 0x412 <Dataflash_WaitWhileBusy>
				  UsingSecondBuffer = !(UsingSecondBuffer);
     5a2:	33 20       	and	r3, r3

				/* Select the next Dataflash chip based on the new Dataflash page index */
				Dataflash_SelectChipFromPage(CurrDFPage);
     5a4:	11 f0       	breq	.+4      	; 0x5aa <DataflashManager_WriteBlocks+0x124>
     5a6:	85 e5       	ldi	r24, 0x55	; 85
     5a8:	01 c0       	rjmp	.+2      	; 0x5ac <DataflashManager_WriteBlocks+0x126>

#if (DATAFLASH_PAGE_SIZE > VIRTUAL_MEMORY_BLOCK_SIZE)
				/* If less than one Dataflash page remaining, copy over the existing page to preserve trailing data */
				if ((TotalBlocks * (VIRTUAL_MEMORY_BLOCK_SIZE >> 4)) < (DATAFLASH_PAGE_SIZE >> 4))
     5aa:	83 e5       	ldi	r24, 0x53	; 83
     5ac:	8e bd       	out	0x2e, r24	; 46
     5ae:	0d b4       	in	r0, 0x2d	; 45
     5b0:	07 fe       	sbrs	r0, 7
				{
					/* Copy selected dataflash's current page contents to the Dataflash buffer */
					Dataflash_WaitWhileBusy();
     5b2:	fd cf       	rjmp	.-6      	; 0x5ae <DataflashManager_WriteBlocks+0x128>
     5b4:	c7 01       	movw	r24, r14
					Dataflash_SendByte(UsingSecondBuffer ? DF_CMD_MAINMEMTOBUFF2 : DF_CMD_MAINMEMTOBUFF1);
     5b6:	60 e0       	ldi	r22, 0x00	; 0
     5b8:	70 e0       	ldi	r23, 0x00	; 0
     5ba:	39 df       	rcall	.-398    	; 0x42e <Dataflash_SendAddressBytes>
     5bc:	2a df       	rcall	.-428    	; 0x412 <Dataflash_WaitWhileBusy>
     5be:	33 20       	and	r3, r3
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     5c0:	11 f0       	breq	.+4      	; 0x5c6 <DataflashManager_WriteBlocks+0x140>
				while (!(SPSR & (1 << SPIF)));
     5c2:	87 e8       	ldi	r24, 0x87	; 135
     5c4:	01 c0       	rjmp	.+2      	; 0x5c8 <DataflashManager_WriteBlocks+0x142>
     5c6:	84 e8       	ldi	r24, 0x84	; 132
					Dataflash_SendAddressBytes(CurrDFPage, 0);
     5c8:	8e bd       	out	0x2e, r24	; 46
     5ca:	0d b4       	in	r0, 0x2d	; 45
     5cc:	07 fe       	sbrs	r0, 7
     5ce:	fd cf       	rjmp	.-6      	; 0x5ca <DataflashManager_WriteBlocks+0x144>
     5d0:	80 e0       	ldi	r24, 0x00	; 0
					Dataflash_WaitWhileBusy();
     5d2:	90 e0       	ldi	r25, 0x00	; 0
     5d4:	60 e0       	ldi	r22, 0x00	; 0
				}
#endif

				/* Send the Dataflash buffer write command */
				Dataflash_SendByte(UsingSecondBuffer ? DF_CMD_BUFF2WRITE : DF_CMD_BUFF1WRITE);
     5d6:	70 e0       	ldi	r23, 0x00	; 0
     5d8:	2a df       	rcall	.-428    	; 0x42e <Dataflash_SendAddressBytes>
     5da:	40 e0       	ldi	r20, 0x00	; 0
     5dc:	80 91 f1 00 	lds	r24, 0x00F1
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     5e0:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     5e2:	0d b4       	in	r0, 0x2d	; 45
     5e4:	07 fe       	sbrs	r0, 7
     5e6:	fd cf       	rjmp	.-6      	; 0x5e2 <DataflashManager_WriteBlocks+0x15c>
				Dataflash_SendAddressBytes(0, 0);
     5e8:	80 91 f1 00 	lds	r24, 0x00F1
     5ec:	8e bd       	out	0x2e, r24	; 46
     5ee:	0d b4       	in	r0, 0x2d	; 45
     5f0:	07 fe       	sbrs	r0, 7
     5f2:	fd cf       	rjmp	.-6      	; 0x5ee <DataflashManager_WriteBlocks+0x168>
				Dataflash_WaitWhileBusy();
				Dataflash_SendByte(UsingSecondBuffer ? DF_CMD_BUFF2TOMAINMEMWITHERASE : DF_CMD_BUFF1TOMAINMEMWITHERASE);
				Dataflash_SendAddressBytes(CurrDFPage, 0);

				/* Reset the Dataflash buffer counter, increment the page counter */
				CurrDFPageByteDiv16 = 0;
     5f4:	80 91 f1 00 	lds	r24, 0x00F1
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
     5f8:	8e bd       	out	0x2e, r24	; 46
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     5fa:	0d b4       	in	r0, 0x2d	; 45
				while (!(SPSR & (1 << SPIF)));
     5fc:	07 fe       	sbrs	r0, 7
     5fe:	fd cf       	rjmp	.-6      	; 0x5fa <DataflashManager_WriteBlocks+0x174>
     600:	80 91 f1 00 	lds	r24, 0x00F1
     604:	8e bd       	out	0x2e, r24	; 46
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     606:	0d b4       	in	r0, 0x2d	; 45
				while (!(SPSR & (1 << SPIF)));
     608:	07 fe       	sbrs	r0, 7
     60a:	fd cf       	rjmp	.-6      	; 0x606 <DataflashManager_WriteBlocks+0x180>
     60c:	80 91 f1 00 	lds	r24, 0x00F1
     610:	8e bd       	out	0x2e, r24	; 46
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     612:	0d b4       	in	r0, 0x2d	; 45
				while (!(SPSR & (1 << SPIF)));
     614:	07 fe       	sbrs	r0, 7
     616:	fd cf       	rjmp	.-6      	; 0x612 <DataflashManager_WriteBlocks+0x18c>
     618:	80 91 f1 00 	lds	r24, 0x00F1
     61c:	8e bd       	out	0x2e, r24	; 46
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     61e:	0d b4       	in	r0, 0x2d	; 45
				while (!(SPSR & (1 << SPIF)));
     620:	07 fe       	sbrs	r0, 7
     622:	fd cf       	rjmp	.-6      	; 0x61e <DataflashManager_WriteBlocks+0x198>
     624:	80 91 f1 00 	lds	r24, 0x00F1
     628:	8e bd       	out	0x2e, r24	; 46
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     62a:	0d b4       	in	r0, 0x2d	; 45
				while (!(SPSR & (1 << SPIF)));
     62c:	07 fe       	sbrs	r0, 7
     62e:	fd cf       	rjmp	.-6      	; 0x62a <DataflashManager_WriteBlocks+0x1a4>
     630:	80 91 f1 00 	lds	r24, 0x00F1
     634:	8e bd       	out	0x2e, r24	; 46
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     636:	0d b4       	in	r0, 0x2d	; 45
				while (!(SPSR & (1 << SPIF)));
     638:	07 fe       	sbrs	r0, 7
     63a:	fd cf       	rjmp	.-6      	; 0x636 <DataflashManager_WriteBlocks+0x1b0>
     63c:	80 91 f1 00 	lds	r24, 0x00F1
     640:	8e bd       	out	0x2e, r24	; 46
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     642:	0d b4       	in	r0, 0x2d	; 45
				while (!(SPSR & (1 << SPIF)));
     644:	07 fe       	sbrs	r0, 7
     646:	fd cf       	rjmp	.-6      	; 0x642 <DataflashManager_WriteBlocks+0x1bc>
     648:	80 91 f1 00 	lds	r24, 0x00F1
     64c:	8e bd       	out	0x2e, r24	; 46
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     64e:	0d b4       	in	r0, 0x2d	; 45
				while (!(SPSR & (1 << SPIF)));
     650:	07 fe       	sbrs	r0, 7
     652:	fd cf       	rjmp	.-6      	; 0x64e <DataflashManager_WriteBlocks+0x1c8>
     654:	80 91 f1 00 	lds	r24, 0x00F1
     658:	8e bd       	out	0x2e, r24	; 46
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     65a:	0d b4       	in	r0, 0x2d	; 45
				while (!(SPSR & (1 << SPIF)));
     65c:	07 fe       	sbrs	r0, 7
     65e:	fd cf       	rjmp	.-6      	; 0x65a <DataflashManager_WriteBlocks+0x1d4>
     660:	80 91 f1 00 	lds	r24, 0x00F1
     664:	8e bd       	out	0x2e, r24	; 46
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     666:	0d b4       	in	r0, 0x2d	; 45
				while (!(SPSR & (1 << SPIF)));
     668:	07 fe       	sbrs	r0, 7
     66a:	fd cf       	rjmp	.-6      	; 0x666 <DataflashManager_WriteBlocks+0x1e0>
     66c:	80 91 f1 00 	lds	r24, 0x00F1
     670:	8e bd       	out	0x2e, r24	; 46
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     672:	0d b4       	in	r0, 0x2d	; 45
				while (!(SPSR & (1 << SPIF)));
     674:	07 fe       	sbrs	r0, 7
     676:	fd cf       	rjmp	.-6      	; 0x672 <DataflashManager_WriteBlocks+0x1ec>
     678:	80 91 f1 00 	lds	r24, 0x00F1
     67c:	8e bd       	out	0x2e, r24	; 46
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     67e:	0d b4       	in	r0, 0x2d	; 45
				while (!(SPSR & (1 << SPIF)));
     680:	07 fe       	sbrs	r0, 7
     682:	fd cf       	rjmp	.-6      	; 0x67e <DataflashManager_WriteBlocks+0x1f8>
     684:	80 91 f1 00 	lds	r24, 0x00F1
     688:	8e bd       	out	0x2e, r24	; 46
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     68a:	0d b4       	in	r0, 0x2d	; 45
				while (!(SPSR & (1 << SPIF)));
     68c:	07 fe       	sbrs	r0, 7
     68e:	fd cf       	rjmp	.-6      	; 0x68a <DataflashManager_WriteBlocks+0x204>
     690:	80 91 f1 00 	lds	r24, 0x00F1
     694:	8e bd       	out	0x2e, r24	; 46
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     696:	0d b4       	in	r0, 0x2d	; 45
				while (!(SPSR & (1 << SPIF)));
     698:	07 fe       	sbrs	r0, 7
     69a:	fd cf       	rjmp	.-6      	; 0x696 <DataflashManager_WriteBlocks+0x210>
     69c:	f2 01       	movw	r30, r4
     69e:	80 ad       	sts	0x60, r24
     6a0:	88 23       	and	r24, r24
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     6a2:	49 f5       	brne	.+82     	; 0x6f6 <DataflashManager_WriteBlocks+0x270>
				while (!(SPSR & (1 << SPIF)));
     6a4:	4f 5f       	subi	r20, 0xFF	; 255
     6a6:	aa 94       	dec	r10
     6a8:	09 f0       	breq	.+2      	; 0x6ac <DataflashManager_WriteBlocks+0x226>
     6aa:	4b cf       	rjmp	.-362    	; 0x542 <DataflashManager_WriteBlocks+0xbc>
     6ac:	01 50       	subi	r16, 0x01	; 1
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     6ae:	10 40       	sbci	r17, 0x00	; 0
				while (!(SPSR & (1 << SPIF)));
     6b0:	80 ee       	ldi	r24, 0xE0	; 224
     6b2:	9f ef       	ldi	r25, 0xFF	; 255
     6b4:	c8 0e       	add	r12, r24

			/* Increment the block 16 byte block counter */
			BytesInBlockDiv16++;

			/* Check if the current command is being aborted by the host */
			if (MSInterfaceInfo->State.IsMassStoreReset)
     6b6:	d9 1e       	adc	r13, r25
     6b8:	01 15       	cp	r16, r1
     6ba:	11 05       	cpc	r17, r1
     6bc:	09 f0       	breq	.+2      	; 0x6c0 <DataflashManager_WriteBlocks+0x23a>
			Dataflash_SendByte(Endpoint_Read_8());
			Dataflash_SendByte(Endpoint_Read_8());
			Dataflash_SendByte(Endpoint_Read_8());

			/* Increment the Dataflash page 16 byte block counter */
			CurrDFPageByteDiv16++;
     6be:	3c cf       	rjmp	.-392    	; 0x538 <DataflashManager_WriteBlocks+0xb2>
     6c0:	a8 de       	rcall	.-688    	; 0x412 <Dataflash_WaitWhileBusy>
	while (TotalBlocks)
	{
		uint8_t BytesInBlockDiv16 = 0;

		/* Write an endpoint packet sized data block to the Dataflash */
		while (BytesInBlockDiv16 < (VIRTUAL_MEMORY_BLOCK_SIZE >> 4))
     6c2:	33 20       	and	r3, r3
     6c4:	11 f0       	breq	.+4      	; 0x6ca <DataflashManager_WriteBlocks+0x244>
			if (MSInterfaceInfo->State.IsMassStoreReset)
			  return;
		}

		/* Decrement the blocks remaining counter */
		TotalBlocks--;
     6c6:	86 e8       	ldi	r24, 0x86	; 134
     6c8:	01 c0       	rjmp	.+2      	; 0x6cc <DataflashManager_WriteBlocks+0x246>
     6ca:	83 e8       	ldi	r24, 0x83	; 131
     6cc:	8e bd       	out	0x2e, r24	; 46
     6ce:	0d b4       	in	r0, 0x2d	; 45
     6d0:	07 fe       	sbrs	r0, 7

	/* Wait until endpoint is ready before continuing */
	if (Endpoint_WaitUntilReady())
	  return;

	while (TotalBlocks)
     6d2:	fd cf       	rjmp	.-6      	; 0x6ce <DataflashManager_WriteBlocks+0x248>
     6d4:	c7 01       	movw	r24, r14
     6d6:	60 e0       	ldi	r22, 0x00	; 0
     6d8:	70 e0       	ldi	r23, 0x00	; 0
		/* Decrement the blocks remaining counter */
		TotalBlocks--;
	}

	/* Write the Dataflash buffer contents back to the Dataflash page */
	Dataflash_WaitWhileBusy();
     6da:	a9 de       	rcall	.-686    	; 0x42e <Dataflash_SendAddressBytes>
     6dc:	9a de       	rcall	.-716    	; 0x412 <Dataflash_WaitWhileBusy>
	Dataflash_SendByte(UsingSecondBuffer ? DF_CMD_BUFF2TOMAINMEMWITHERASE : DF_CMD_BUFF1TOMAINMEMWITHERASE);
     6de:	80 91 e8 00 	lds	r24, 0x00E8
     6e2:	85 fd       	sbrc	r24, 5
     6e4:	05 c0       	rjmp	.+10     	; 0x6f0 <DataflashManager_WriteBlocks+0x26a>
     6e6:	80 91 e8 00 	lds	r24, 0x00E8
     6ea:	8b 77       	andi	r24, 0x7B	; 123
     6ec:	80 93 e8 00 	sts	0x00E8, r24
	Dataflash_SendAddressBytes(CurrDFPage, 0x00);
     6f0:	8e b1       	in	r24, 0x0e	; 14
     6f2:	83 60       	ori	r24, 0x03	; 3
     6f4:	8e b9       	out	0x0e, r24	; 14
     6f6:	0f 90       	pop	r0
     6f8:	df 91       	pop	r29
	Dataflash_WaitWhileBusy();
     6fa:	cf 91       	pop	r28
     6fc:	1f 91       	pop	r17
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
     6fe:	0f 91       	pop	r16
     700:	ff 90       	pop	r15

	/* If the endpoint is empty, clear it ready for the next packet from the host */
	if (!(Endpoint_IsReadWriteAllowed()))
     702:	ef 90       	pop	r14
     704:	df 90       	pop	r13
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     706:	cf 90       	pop	r12
     708:	bf 90       	pop	r11
     70a:	af 90       	pop	r10
     70c:	9f 90       	pop	r9
     70e:	8f 90       	pop	r8
			 *              the chip number).
			 */
			static inline void Dataflash_SelectChip(const uint8_t ChipMask) ATTR_ALWAYS_INLINE;
			static inline void Dataflash_SelectChip(const uint8_t ChipMask)
			{
				DATAFLASH_CHIPCS_PORT = ((DATAFLASH_CHIPCS_PORT | DATAFLASH_CHIPCS_MASK) & ~ChipMask);
     710:	7f 90       	pop	r7
     712:	6f 90       	pop	r6
     714:	5f 90       	pop	r5
	  Endpoint_ClearOUT();

	/* Deselect all Dataflash chips */
	Dataflash_DeselectChip();
}
     716:	4f 90       	pop	r4
     718:	3f 90       	pop	r3
     71a:	08 95       	ret

0000071c <DataflashManager_ReadBlocks>:
     71c:	bf 92       	push	r11
     71e:	cf 92       	push	r12
     720:	df 92       	push	r13
     722:	ef 92       	push	r14
     724:	ff 92       	push	r15
     726:	0f 93       	push	r16
     728:	1f 93       	push	r17
     72a:	cf 93       	push	r28
     72c:	df 93       	push	r29
     72e:	6c 01       	movw	r12, r24
     730:	79 01       	movw	r14, r18
     732:	db 01       	movw	r26, r22
     734:	ca 01       	movw	r24, r20
     736:	e9 e0       	ldi	r30, 0x09	; 9
     738:	88 0f       	add	r24, r24
     73a:	99 1f       	adc	r25, r25
 */
void DataflashManager_ReadBlocks(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo,
                                 const uint32_t BlockAddress,
                                 uint16_t TotalBlocks)
{
	uint16_t CurrDFPage          = ((BlockAddress * VIRTUAL_MEMORY_BLOCK_SIZE) / DATAFLASH_PAGE_SIZE);
     73c:	aa 1f       	adc	r26, r26
     73e:	bb 1f       	adc	r27, r27
     740:	ea 95       	dec	r30
     742:	d1 f7       	brne	.-12     	; 0x738 <DataflashManager_ReadBlocks+0x1c>
     744:	fa e0       	ldi	r31, 0x0A	; 10
     746:	b6 95       	lsr	r27
     748:	a7 95       	ror	r26
     74a:	97 95       	ror	r25
     74c:	87 95       	ror	r24
     74e:	fa 95       	dec	r31
     750:	d1 f7       	brne	.-12     	; 0x746 <DataflashManager_ReadBlocks+0x2a>
     752:	8c 01       	movw	r16, r24
	uint16_t CurrDFPageByte      = ((BlockAddress * VIRTUAL_MEMORY_BLOCK_SIZE) % DATAFLASH_PAGE_SIZE);
     754:	ea 01       	movw	r28, r20
     756:	dc 2f       	mov	r29, r28
     758:	cc 27       	eor	r28, r28
     75a:	dd 0f       	add	r29, r29
     75c:	d3 70       	andi	r29, 0x03	; 3
	uint8_t  CurrDFPageByteDiv16 = (CurrDFPageByte >> 4);

	/* Select the correct starting Dataflash IC for the block requested */
	Dataflash_SelectChipFromPage(CurrDFPage);
     75e:	80 de       	rcall	.-768    	; 0x460 <Dataflash_SelectChipFromPage>
     760:	82 ed       	ldi	r24, 0xD2	; 210
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     762:	8e bd       	out	0x2e, r24	; 46
     764:	0d b4       	in	r0, 0x2d	; 45
				while (!(SPSR & (1 << SPIF)));
     766:	07 fe       	sbrs	r0, 7
     768:	fd cf       	rjmp	.-6      	; 0x764 <DataflashManager_ReadBlocks+0x48>
     76a:	c8 01       	movw	r24, r16

	/* Send the Dataflash main memory page read command */
	Dataflash_SendByte(DF_CMD_MAINMEMPAGEREAD);
	Dataflash_SendAddressBytes(CurrDFPage, CurrDFPageByte);
     76c:	be 01       	movw	r22, r28
     76e:	5f de       	rcall	.-834    	; 0x42e <Dataflash_SendAddressBytes>
     770:	1e bc       	out	0x2e, r1	; 46
     772:	0d b4       	in	r0, 0x2d	; 45
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     774:	07 fe       	sbrs	r0, 7
				while (!(SPSR & (1 << SPIF)));
     776:	fd cf       	rjmp	.-6      	; 0x772 <DataflashManager_ReadBlocks+0x56>
     778:	1e bc       	out	0x2e, r1	; 46
     77a:	0d b4       	in	r0, 0x2d	; 45
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     77c:	07 fe       	sbrs	r0, 7
				while (!(SPSR & (1 << SPIF)));
     77e:	fd cf       	rjmp	.-6      	; 0x77a <DataflashManager_ReadBlocks+0x5e>
     780:	1e bc       	out	0x2e, r1	; 46
     782:	0d b4       	in	r0, 0x2d	; 45
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     784:	07 fe       	sbrs	r0, 7
				while (!(SPSR & (1 << SPIF)));
     786:	fd cf       	rjmp	.-6      	; 0x782 <DataflashManager_ReadBlocks+0x66>
     788:	1e bc       	out	0x2e, r1	; 46
     78a:	0d b4       	in	r0, 0x2d	; 45
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     78c:	07 fe       	sbrs	r0, 7
				while (!(SPSR & (1 << SPIF)));
     78e:	fd cf       	rjmp	.-6      	; 0x78a <DataflashManager_ReadBlocks+0x6e>
     790:	7f d5       	rcall	.+2814   	; 0x1290 <Endpoint_WaitUntilReady>
     792:	88 23       	and	r24, r24
	Dataflash_SendByte(0x00);
	Dataflash_SendByte(0x00);
	Dataflash_SendByte(0x00);

	/* Wait until endpoint is ready before continuing */
	if (Endpoint_WaitUntilReady())
     794:	09 f0       	breq	.+2      	; 0x798 <DataflashManager_ReadBlocks+0x7c>
     796:	c0 c0       	rjmp	.+384    	; 0x918 <DataflashManager_ReadBlocks+0x1fc>
     798:	34 e0       	ldi	r19, 0x04	; 4
     79a:	d6 95       	lsr	r29
     79c:	c7 95       	ror	r28
                                 const uint32_t BlockAddress,
                                 uint16_t TotalBlocks)
{
	uint16_t CurrDFPage          = ((BlockAddress * VIRTUAL_MEMORY_BLOCK_SIZE) / DATAFLASH_PAGE_SIZE);
	uint16_t CurrDFPageByte      = ((BlockAddress * VIRTUAL_MEMORY_BLOCK_SIZE) % DATAFLASH_PAGE_SIZE);
	uint8_t  CurrDFPageByteDiv16 = (CurrDFPageByte >> 4);
     79e:	3a 95       	dec	r19
     7a0:	e1 f7       	brne	.-8      	; 0x79a <DataflashManager_ReadBlocks+0x7e>
     7a2:	42 ed       	ldi	r20, 0xD2	; 210
     7a4:	b4 2e       	mov	r11, r20
     7a6:	a8 c0       	rjmp	.+336    	; 0x8f8 <DataflashManager_ReadBlocks+0x1dc>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     7a8:	d0 e2       	ldi	r29, 0x20	; 32
     7aa:	80 91 e8 00 	lds	r24, 0x00E8

	/* Wait until endpoint is ready before continuing */
	if (Endpoint_WaitUntilReady())
	  return;

	while (TotalBlocks)
     7ae:	85 fd       	sbrc	r24, 5
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
     7b0:	09 c0       	rjmp	.+18     	; 0x7c4 <DataflashManager_ReadBlocks+0xa8>
     7b2:	80 91 e8 00 	lds	r24, 0x00E8

		/* Write an endpoint packet sized data block to the Dataflash */
		while (BytesInBlockDiv16 < (VIRTUAL_MEMORY_BLOCK_SIZE >> 4))
		{
			/* Check if the endpoint is currently full */
			if (!(Endpoint_IsReadWriteAllowed()))
     7b6:	8e 77       	andi	r24, 0x7E	; 126
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     7b8:	80 93 e8 00 	sts	0x00E8, r24
     7bc:	69 d5       	rcall	.+2770   	; 0x1290 <Endpoint_WaitUntilReady>
     7be:	88 23       	and	r24, r24
     7c0:	09 f0       	breq	.+2      	; 0x7c4 <DataflashManager_ReadBlocks+0xa8>
			{
				/* Clear the endpoint bank to send its contents to the host */
				Endpoint_ClearIN();

				/* Wait until the endpoint is ready for more data */
				if (Endpoint_WaitUntilReady())
     7c2:	aa c0       	rjmp	.+340    	; 0x918 <DataflashManager_ReadBlocks+0x1fc>
     7c4:	c0 34       	cpi	r28, 0x40	; 64
     7c6:	e9 f4       	brne	.+58     	; 0x802 <DataflashManager_ReadBlocks+0xe6>
     7c8:	0f 5f       	subi	r16, 0xFF	; 255
     7ca:	1f 4f       	sbci	r17, 0xFF	; 255
				  return;
			}

			/* Check if end of Dataflash page reached */
			if (CurrDFPageByteDiv16 == (DATAFLASH_PAGE_SIZE >> 4))
     7cc:	c8 01       	movw	r24, r16
     7ce:	48 de       	rcall	.-880    	; 0x460 <Dataflash_SelectChipFromPage>
			{
				/* Reset the Dataflash buffer counter, increment the page counter */
				CurrDFPageByteDiv16 = 0;
				CurrDFPage++;
     7d0:	be bc       	out	0x2e, r11	; 46
     7d2:	0d b4       	in	r0, 0x2d	; 45

				/* Select the next Dataflash chip based on the new Dataflash page index */
				Dataflash_SelectChipFromPage(CurrDFPage);
     7d4:	07 fe       	sbrs	r0, 7
     7d6:	fd cf       	rjmp	.-6      	; 0x7d2 <DataflashManager_ReadBlocks+0xb6>
     7d8:	c8 01       	movw	r24, r16
     7da:	60 e0       	ldi	r22, 0x00	; 0
				while (!(SPSR & (1 << SPIF)));
     7dc:	70 e0       	ldi	r23, 0x00	; 0
     7de:	27 de       	rcall	.-946    	; 0x42e <Dataflash_SendAddressBytes>
     7e0:	1e bc       	out	0x2e, r1	; 46

				/* Send the Dataflash main memory page read command */
				Dataflash_SendByte(DF_CMD_MAINMEMPAGEREAD);
				Dataflash_SendAddressBytes(CurrDFPage, 0);
     7e2:	0d b4       	in	r0, 0x2d	; 45
     7e4:	07 fe       	sbrs	r0, 7
     7e6:	fd cf       	rjmp	.-6      	; 0x7e2 <DataflashManager_ReadBlocks+0xc6>
     7e8:	1e bc       	out	0x2e, r1	; 46
     7ea:	0d b4       	in	r0, 0x2d	; 45
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     7ec:	07 fe       	sbrs	r0, 7
				while (!(SPSR & (1 << SPIF)));
     7ee:	fd cf       	rjmp	.-6      	; 0x7ea <DataflashManager_ReadBlocks+0xce>
     7f0:	1e bc       	out	0x2e, r1	; 46
     7f2:	0d b4       	in	r0, 0x2d	; 45
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     7f4:	07 fe       	sbrs	r0, 7
				while (!(SPSR & (1 << SPIF)));
     7f6:	fd cf       	rjmp	.-6      	; 0x7f2 <DataflashManager_ReadBlocks+0xd6>
     7f8:	1e bc       	out	0x2e, r1	; 46
     7fa:	0d b4       	in	r0, 0x2d	; 45
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     7fc:	07 fe       	sbrs	r0, 7
				while (!(SPSR & (1 << SPIF)));
     7fe:	fd cf       	rjmp	.-6      	; 0x7fa <DataflashManager_ReadBlocks+0xde>
     800:	c0 e0       	ldi	r28, 0x00	; 0
     802:	1e bc       	out	0x2e, r1	; 46
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     804:	0d b4       	in	r0, 0x2d	; 45
				while (!(SPSR & (1 << SPIF)));
     806:	07 fe       	sbrs	r0, 7
     808:	fd cf       	rjmp	.-6      	; 0x804 <DataflashManager_ReadBlocks+0xe8>
     80a:	8e b5       	in	r24, 0x2e	; 46

			/* Check if end of Dataflash page reached */
			if (CurrDFPageByteDiv16 == (DATAFLASH_PAGE_SIZE >> 4))
			{
				/* Reset the Dataflash buffer counter, increment the page counter */
				CurrDFPageByteDiv16 = 0;
     80c:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
				while (!(SPSR & (1 << SPIF)));
     810:	1e bc       	out	0x2e, r1	; 46
     812:	0d b4       	in	r0, 0x2d	; 45
     814:	07 fe       	sbrs	r0, 7
				return SPDR;
     816:	fd cf       	rjmp	.-6      	; 0x812 <DataflashManager_ReadBlocks+0xf6>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     818:	8e b5       	in	r24, 0x2e	; 46
     81a:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
				while (!(SPSR & (1 << SPIF)));
     81e:	1e bc       	out	0x2e, r1	; 46
     820:	0d b4       	in	r0, 0x2d	; 45
     822:	07 fe       	sbrs	r0, 7
				return SPDR;
     824:	fd cf       	rjmp	.-6      	; 0x820 <DataflashManager_ReadBlocks+0x104>
     826:	8e b5       	in	r24, 0x2e	; 46
     828:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
				while (!(SPSR & (1 << SPIF)));
     82c:	1e bc       	out	0x2e, r1	; 46
     82e:	0d b4       	in	r0, 0x2d	; 45
     830:	07 fe       	sbrs	r0, 7
				return SPDR;
     832:	fd cf       	rjmp	.-6      	; 0x82e <DataflashManager_ReadBlocks+0x112>
     834:	8e b5       	in	r24, 0x2e	; 46
     836:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
				while (!(SPSR & (1 << SPIF)));
     83a:	1e bc       	out	0x2e, r1	; 46
     83c:	0d b4       	in	r0, 0x2d	; 45
     83e:	07 fe       	sbrs	r0, 7
				return SPDR;
     840:	fd cf       	rjmp	.-6      	; 0x83c <DataflashManager_ReadBlocks+0x120>
     842:	8e b5       	in	r24, 0x2e	; 46
     844:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
				while (!(SPSR & (1 << SPIF)));
     848:	1e bc       	out	0x2e, r1	; 46
     84a:	0d b4       	in	r0, 0x2d	; 45
     84c:	07 fe       	sbrs	r0, 7
				return SPDR;
     84e:	fd cf       	rjmp	.-6      	; 0x84a <DataflashManager_ReadBlocks+0x12e>
     850:	8e b5       	in	r24, 0x2e	; 46
     852:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
				while (!(SPSR & (1 << SPIF)));
     856:	1e bc       	out	0x2e, r1	; 46
     858:	0d b4       	in	r0, 0x2d	; 45
     85a:	07 fe       	sbrs	r0, 7
				return SPDR;
     85c:	fd cf       	rjmp	.-6      	; 0x858 <DataflashManager_ReadBlocks+0x13c>
     85e:	8e b5       	in	r24, 0x2e	; 46
     860:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
				while (!(SPSR & (1 << SPIF)));
     864:	1e bc       	out	0x2e, r1	; 46
     866:	0d b4       	in	r0, 0x2d	; 45
     868:	07 fe       	sbrs	r0, 7
				return SPDR;
     86a:	fd cf       	rjmp	.-6      	; 0x866 <DataflashManager_ReadBlocks+0x14a>
     86c:	8e b5       	in	r24, 0x2e	; 46
     86e:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
				while (!(SPSR & (1 << SPIF)));
     872:	1e bc       	out	0x2e, r1	; 46
     874:	0d b4       	in	r0, 0x2d	; 45
     876:	07 fe       	sbrs	r0, 7
				return SPDR;
     878:	fd cf       	rjmp	.-6      	; 0x874 <DataflashManager_ReadBlocks+0x158>
     87a:	8e b5       	in	r24, 0x2e	; 46
     87c:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
				while (!(SPSR & (1 << SPIF)));
     880:	1e bc       	out	0x2e, r1	; 46
     882:	0d b4       	in	r0, 0x2d	; 45
     884:	07 fe       	sbrs	r0, 7
				return SPDR;
     886:	fd cf       	rjmp	.-6      	; 0x882 <DataflashManager_ReadBlocks+0x166>
     888:	8e b5       	in	r24, 0x2e	; 46
     88a:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
				while (!(SPSR & (1 << SPIF)));
     88e:	1e bc       	out	0x2e, r1	; 46
     890:	0d b4       	in	r0, 0x2d	; 45
     892:	07 fe       	sbrs	r0, 7
				return SPDR;
     894:	fd cf       	rjmp	.-6      	; 0x890 <DataflashManager_ReadBlocks+0x174>
     896:	8e b5       	in	r24, 0x2e	; 46
     898:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
				while (!(SPSR & (1 << SPIF)));
     89c:	1e bc       	out	0x2e, r1	; 46
     89e:	0d b4       	in	r0, 0x2d	; 45
     8a0:	07 fe       	sbrs	r0, 7
				return SPDR;
     8a2:	fd cf       	rjmp	.-6      	; 0x89e <DataflashManager_ReadBlocks+0x182>
     8a4:	8e b5       	in	r24, 0x2e	; 46
     8a6:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
				while (!(SPSR & (1 << SPIF)));
     8aa:	1e bc       	out	0x2e, r1	; 46
     8ac:	0d b4       	in	r0, 0x2d	; 45
     8ae:	07 fe       	sbrs	r0, 7
				return SPDR;
     8b0:	fd cf       	rjmp	.-6      	; 0x8ac <DataflashManager_ReadBlocks+0x190>
     8b2:	8e b5       	in	r24, 0x2e	; 46
     8b4:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
				while (!(SPSR & (1 << SPIF)));
     8b8:	1e bc       	out	0x2e, r1	; 46
     8ba:	0d b4       	in	r0, 0x2d	; 45
     8bc:	07 fe       	sbrs	r0, 7
				return SPDR;
     8be:	fd cf       	rjmp	.-6      	; 0x8ba <DataflashManager_ReadBlocks+0x19e>
     8c0:	8e b5       	in	r24, 0x2e	; 46
     8c2:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
				while (!(SPSR & (1 << SPIF)));
     8c6:	1e bc       	out	0x2e, r1	; 46
     8c8:	0d b4       	in	r0, 0x2d	; 45
     8ca:	07 fe       	sbrs	r0, 7
				return SPDR;
     8cc:	fd cf       	rjmp	.-6      	; 0x8c8 <DataflashManager_ReadBlocks+0x1ac>
     8ce:	8e b5       	in	r24, 0x2e	; 46
     8d0:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
				while (!(SPSR & (1 << SPIF)));
     8d4:	1e bc       	out	0x2e, r1	; 46
     8d6:	0d b4       	in	r0, 0x2d	; 45
     8d8:	07 fe       	sbrs	r0, 7
				return SPDR;
     8da:	fd cf       	rjmp	.-6      	; 0x8d6 <DataflashManager_ReadBlocks+0x1ba>
     8dc:	8e b5       	in	r24, 0x2e	; 46
     8de:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
				while (!(SPSR & (1 << SPIF)));
     8e2:	f6 01       	movw	r30, r12
     8e4:	80 ad       	sts	0x60, r24
     8e6:	88 23       	and	r24, r24
				return SPDR;
     8e8:	b9 f4       	brne	.+46     	; 0x918 <DataflashManager_ReadBlocks+0x1fc>
     8ea:	cf 5f       	subi	r28, 0xFF	; 255
     8ec:	d1 50       	subi	r29, 0x01	; 1

			/* Increment the block 16 byte block counter */
			BytesInBlockDiv16++;

			/* Check if the current command is being aborted by the host */
			if (MSInterfaceInfo->State.IsMassStoreReset)
     8ee:	09 f0       	breq	.+2      	; 0x8f2 <DataflashManager_ReadBlocks+0x1d6>
     8f0:	5c cf       	rjmp	.-328    	; 0x7aa <DataflashManager_ReadBlocks+0x8e>
     8f2:	08 94       	sec
     8f4:	e1 08       	sbc	r14, r1
			Endpoint_Write_8(Dataflash_ReceiveByte());
			Endpoint_Write_8(Dataflash_ReceiveByte());
			Endpoint_Write_8(Dataflash_ReceiveByte());

			/* Increment the Dataflash page 16 byte block counter */
			CurrDFPageByteDiv16++;
     8f6:	f1 08       	sbc	r15, r1
     8f8:	e1 14       	cp	r14, r1
	while (TotalBlocks)
	{
		uint8_t BytesInBlockDiv16 = 0;

		/* Write an endpoint packet sized data block to the Dataflash */
		while (BytesInBlockDiv16 < (VIRTUAL_MEMORY_BLOCK_SIZE >> 4))
     8fa:	f1 04       	cpc	r15, r1
     8fc:	09 f0       	breq	.+2      	; 0x900 <DataflashManager_ReadBlocks+0x1e4>
			if (MSInterfaceInfo->State.IsMassStoreReset)
			  return;
		}

		/* Decrement the blocks remaining counter */
		TotalBlocks--;
     8fe:	54 cf       	rjmp	.-344    	; 0x7a8 <DataflashManager_ReadBlocks+0x8c>
     900:	80 91 e8 00 	lds	r24, 0x00E8

	/* Wait until endpoint is ready before continuing */
	if (Endpoint_WaitUntilReady())
	  return;

	while (TotalBlocks)
     904:	85 fd       	sbrc	r24, 5
     906:	05 c0       	rjmp	.+10     	; 0x912 <DataflashManager_ReadBlocks+0x1f6>
     908:	80 91 e8 00 	lds	r24, 0x00E8
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
     90c:	8e 77       	andi	r24, 0x7E	; 126
     90e:	80 93 e8 00 	sts	0x00E8, r24
		/* Decrement the blocks remaining counter */
		TotalBlocks--;
	}

	/* If the endpoint is full, send its contents to the host */
	if (!(Endpoint_IsReadWriteAllowed()))
     912:	8e b1       	in	r24, 0x0e	; 14
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     914:	83 60       	ori	r24, 0x03	; 3
     916:	8e b9       	out	0x0e, r24	; 14
     918:	df 91       	pop	r29
     91a:	cf 91       	pop	r28
     91c:	1f 91       	pop	r17
     91e:	0f 91       	pop	r16
     920:	ff 90       	pop	r15
     922:	ef 90       	pop	r14
	  Endpoint_ClearIN();

	/* Deselect all Dataflash chips */
	Dataflash_DeselectChip();
}
     924:	df 90       	pop	r13
     926:	cf 90       	pop	r12
     928:	bf 90       	pop	r11
     92a:	08 95       	ret

0000092c <DataflashManager_ResetDataflashProtections>:
     92c:	8e b1       	in	r24, 0x0e	; 14
     92e:	83 60       	ori	r24, 0x03	; 3
     930:	8e 7f       	andi	r24, 0xFE	; 254
     932:	8e b9       	out	0x0e, r24	; 14
     934:	87 ed       	ldi	r24, 0xD7	; 215
     936:	8e bd       	out	0x2e, r24	; 46
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
				while (!(SPSR & (1 << SPIF)));
     938:	0d b4       	in	r0, 0x2d	; 45
     93a:	07 fe       	sbrs	r0, 7
     93c:	fd cf       	rjmp	.-6      	; 0x938 <DataflashManager_ResetDataflashProtections+0xc>
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     93e:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     940:	0d b4       	in	r0, 0x2d	; 45
     942:	07 fe       	sbrs	r0, 7
     944:	fd cf       	rjmp	.-6      	; 0x940 <DataflashManager_ResetDataflashProtections+0x14>
	/* Select first Dataflash chip, send the read status register command */
	Dataflash_SelectChip(DATAFLASH_CHIP1);
	Dataflash_SendByte(DF_CMD_GETSTATUS);

	/* Check if sector protection is enabled */
	if (Dataflash_ReceiveByte() & DF_STATUS_SECTORPROTECTION_ON)
     946:	0e b4       	in	r0, 0x2e	; 46
     948:	01 fe       	sbrs	r0, 1
     94a:	15 c0       	rjmp	.+42     	; 0x976 <DataflashManager_ResetDataflashProtections+0x4a>
	{
		Dataflash_ToggleSelectedChipCS();
     94c:	58 dd       	rcall	.-1360   	; 0x3fe <Dataflash_ToggleSelectedChipCS>
     94e:	8d e3       	ldi	r24, 0x3D	; 61
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     950:	8e bd       	out	0x2e, r24	; 46
     952:	0d b4       	in	r0, 0x2d	; 45
				while (!(SPSR & (1 << SPIF)));
     954:	07 fe       	sbrs	r0, 7
     956:	fd cf       	rjmp	.-6      	; 0x952 <DataflashManager_ResetDataflashProtections+0x26>
     958:	8a e2       	ldi	r24, 0x2A	; 42
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     95a:	8e bd       	out	0x2e, r24	; 46
     95c:	0d b4       	in	r0, 0x2d	; 45
				while (!(SPSR & (1 << SPIF)));
     95e:	07 fe       	sbrs	r0, 7
     960:	fd cf       	rjmp	.-6      	; 0x95c <DataflashManager_ResetDataflashProtections+0x30>
     962:	8f e7       	ldi	r24, 0x7F	; 127
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     964:	8e bd       	out	0x2e, r24	; 46
     966:	0d b4       	in	r0, 0x2d	; 45
				while (!(SPSR & (1 << SPIF)));
     968:	07 fe       	sbrs	r0, 7
     96a:	fd cf       	rjmp	.-6      	; 0x966 <DataflashManager_ResetDataflashProtections+0x3a>
     96c:	8a e9       	ldi	r24, 0x9A	; 154
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     96e:	8e bd       	out	0x2e, r24	; 46
     970:	0d b4       	in	r0, 0x2d	; 45
				while (!(SPSR & (1 << SPIF)));
     972:	07 fe       	sbrs	r0, 7
     974:	fd cf       	rjmp	.-6      	; 0x970 <DataflashManager_ResetDataflashProtections+0x44>
     976:	8e b1       	in	r24, 0x0e	; 14
     978:	83 60       	ori	r24, 0x03	; 3
     97a:	8d 7f       	andi	r24, 0xFD	; 253
     97c:	8e b9       	out	0x0e, r24	; 14
     97e:	87 ed       	ldi	r24, 0xD7	; 215
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     980:	8e bd       	out	0x2e, r24	; 46
     982:	0d b4       	in	r0, 0x2d	; 45
				while (!(SPSR & (1 << SPIF)));
     984:	07 fe       	sbrs	r0, 7
     986:	fd cf       	rjmp	.-6      	; 0x982 <DataflashManager_ResetDataflashProtections+0x56>
     988:	1e bc       	out	0x2e, r1	; 46
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     98a:	0d b4       	in	r0, 0x2d	; 45
				while (!(SPSR & (1 << SPIF)));
     98c:	07 fe       	sbrs	r0, 7
     98e:	fd cf       	rjmp	.-6      	; 0x98a <DataflashManager_ResetDataflashProtections+0x5e>
     990:	0e b4       	in	r0, 0x2e	; 46
	#if (DATAFLASH_TOTALCHIPS == 2)
	Dataflash_SelectChip(DATAFLASH_CHIP2);
	Dataflash_SendByte(DF_CMD_GETSTATUS);

	/* Check if sector protection is enabled */
	if (Dataflash_ReceiveByte() & DF_STATUS_SECTORPROTECTION_ON)
     992:	01 fe       	sbrs	r0, 1
     994:	15 c0       	rjmp	.+42     	; 0x9c0 <DataflashManager_ResetDataflashProtections+0x94>
     996:	33 dd       	rcall	.-1434   	; 0x3fe <Dataflash_ToggleSelectedChipCS>
	{
		Dataflash_ToggleSelectedChipCS();
     998:	8d e3       	ldi	r24, 0x3D	; 61
     99a:	8e bd       	out	0x2e, r24	; 46
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     99c:	0d b4       	in	r0, 0x2d	; 45
     99e:	07 fe       	sbrs	r0, 7
				while (!(SPSR & (1 << SPIF)));
     9a0:	fd cf       	rjmp	.-6      	; 0x99c <DataflashManager_ResetDataflashProtections+0x70>
     9a2:	8a e2       	ldi	r24, 0x2A	; 42
     9a4:	8e bd       	out	0x2e, r24	; 46
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     9a6:	0d b4       	in	r0, 0x2d	; 45
     9a8:	07 fe       	sbrs	r0, 7
				while (!(SPSR & (1 << SPIF)));
     9aa:	fd cf       	rjmp	.-6      	; 0x9a6 <DataflashManager_ResetDataflashProtections+0x7a>
     9ac:	8f e7       	ldi	r24, 0x7F	; 127
     9ae:	8e bd       	out	0x2e, r24	; 46
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     9b0:	0d b4       	in	r0, 0x2d	; 45
     9b2:	07 fe       	sbrs	r0, 7
				while (!(SPSR & (1 << SPIF)));
     9b4:	fd cf       	rjmp	.-6      	; 0x9b0 <DataflashManager_ResetDataflashProtections+0x84>
     9b6:	8a e9       	ldi	r24, 0x9A	; 154
     9b8:	8e bd       	out	0x2e, r24	; 46
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     9ba:	0d b4       	in	r0, 0x2d	; 45
     9bc:	07 fe       	sbrs	r0, 7
				while (!(SPSR & (1 << SPIF)));
     9be:	fd cf       	rjmp	.-6      	; 0x9ba <DataflashManager_ResetDataflashProtections+0x8e>
     9c0:	8e b1       	in	r24, 0x0e	; 14
     9c2:	83 60       	ori	r24, 0x03	; 3
     9c4:	8e b9       	out	0x0e, r24	; 14
     9c6:	08 95       	ret

000009c8 <DataflashManager_CheckDataflashOperation>:
     9c8:	8e b1       	in	r24, 0x0e	; 14
	}
	#endif

	/* Deselect current Dataflash chip */
	Dataflash_DeselectChip();
}
     9ca:	83 60       	ori	r24, 0x03	; 3
     9cc:	8e 7f       	andi	r24, 0xFE	; 254
     9ce:	8e b9       	out	0x0e, r24	; 14
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     9d0:	8f e9       	ldi	r24, 0x9F	; 159
     9d2:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     9d4:	0d b4       	in	r0, 0x2d	; 45
     9d6:	07 fe       	sbrs	r0, 7
     9d8:	fd cf       	rjmp	.-6      	; 0x9d4 <DataflashManager_CheckDataflashOperation+0xc>
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     9da:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     9dc:	0d b4       	in	r0, 0x2d	; 45
     9de:	07 fe       	sbrs	r0, 7
     9e0:	fd cf       	rjmp	.-6      	; 0x9dc <DataflashManager_CheckDataflashOperation+0x14>
				return SPDR;
     9e2:	9e b5       	in	r25, 0x2e	; 46
     9e4:	8e b1       	in	r24, 0x0e	; 14
     9e6:	83 60       	ori	r24, 0x03	; 3
     9e8:	8e b9       	out	0x0e, r24	; 14
	Dataflash_SendByte(DF_CMD_READMANUFACTURERDEVICEINFO);
	ReturnByte = Dataflash_ReceiveByte();
	Dataflash_DeselectChip();

	/* If returned data is invalid, fail the command */
	if (ReturnByte != DF_MANUFACTURER_ATMEL)
     9ea:	9f 31       	cpi	r25, 0x1F	; 31
     9ec:	b1 f4       	brne	.+44     	; 0xa1a <DataflashManager_CheckDataflashOperation+0x52>
     9ee:	8e b1       	in	r24, 0x0e	; 14
     9f0:	83 60       	ori	r24, 0x03	; 3
     9f2:	8d 7f       	andi	r24, 0xFD	; 253
     9f4:	8e b9       	out	0x0e, r24	; 14
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     9f6:	8f e9       	ldi	r24, 0x9F	; 159
     9f8:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     9fa:	0d b4       	in	r0, 0x2d	; 45
     9fc:	07 fe       	sbrs	r0, 7
     9fe:	fd cf       	rjmp	.-6      	; 0x9fa <DataflashManager_CheckDataflashOperation+0x32>
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     a00:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     a02:	0d b4       	in	r0, 0x2d	; 45
     a04:	07 fe       	sbrs	r0, 7
     a06:	fd cf       	rjmp	.-6      	; 0xa02 <DataflashManager_CheckDataflashOperation+0x3a>
				return SPDR;
     a08:	9e b5       	in	r25, 0x2e	; 46
     a0a:	8e b1       	in	r24, 0x0e	; 14
     a0c:	83 60       	ori	r24, 0x03	; 3
     a0e:	8e b9       	out	0x0e, r24	; 14

/** Performs a simple test on the attached Dataflash IC(s) to ensure that they are working.
 *
 *  \return Boolean true if all media chips are working, false otherwise
 */
bool DataflashManager_CheckDataflashOperation(void)
     a10:	81 e0       	ldi	r24, 0x01	; 1
     a12:	9f 31       	cpi	r25, 0x1F	; 31
     a14:	19 f0       	breq	.+6      	; 0xa1c <DataflashManager_CheckDataflashOperation+0x54>
     a16:	80 e0       	ldi	r24, 0x00	; 0
     a18:	08 95       	ret
	ReturnByte = Dataflash_ReceiveByte();
	Dataflash_DeselectChip();

	/* If returned data is invalid, fail the command */
	if (ReturnByte != DF_MANUFACTURER_ATMEL)
	  return false;
     a1a:	80 e0       	ldi	r24, 0x00	; 0
	if (ReturnByte != DF_MANUFACTURER_ATMEL)
	  return false;
	#endif

	return true;
}
     a1c:	08 95       	ret

00000a1e <SCSI_Command_ReadWrite_10>:
 *
 *  \return Boolean true if the command completed successfully, false otherwise.
 */
static bool SCSI_Command_ReadWrite_10(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo,
                                      const bool IsDataRead)
{
     a1e:	0f 93       	push	r16
     a20:	1f 93       	push	r17
     a22:	cf 93       	push	r28
     a24:	df 93       	push	r29
     a26:	ec 01       	movw	r28, r24
     a28:	86 2f       	mov	r24, r22

				Temp = Data.Bytes[1];
				Data.Bytes[1] = Data.Bytes[2];
				Data.Bytes[2] = Temp;

				return Data.DWord;
     a2a:	48 a1       	lds	r20, 0x48
     a2c:	5f 8d       	ldd	r21, Y+31	; 0x1f
     a2e:	6e 8d       	ldd	r22, Y+30	; 0x1e
     a30:	7d 8d       	ldd	r23, Y+29	; 0x1d

				Temp = Data.Bytes[0];
				Data.Bytes[0] = Data.Bytes[1];
				Data.Bytes[1] = Temp;

				return Data.Word;
     a32:	0b a1       	lds	r16, 0x4b
     a34:	1a a1       	lds	r17, 0x4a

	/* Load in the 16-bit total blocks (SCSI uses big-endian, so have to reverse the byte order) */
	TotalBlocks  = SwapEndian_16(*(uint16_t*)&MSInterfaceInfo->State.CommandBlock.SCSICommandData[7]);

	/* Check if the block address is outside the maximum allowable value for the LUN */
	if (BlockAddress >= LUN_MEDIA_BLOCKS)
     a36:	40 30       	cpi	r20, 0x00	; 0
     a38:	90 e8       	ldi	r25, 0x80	; 128
     a3a:	59 07       	cpc	r21, r25
     a3c:	90 e0       	ldi	r25, 0x00	; 0
     a3e:	69 07       	cpc	r22, r25
     a40:	90 e0       	ldi	r25, 0x00	; 0
     a42:	79 07       	cpc	r23, r25
     a44:	68 f0       	brcs	.+26     	; 0xa60 <SCSI_Command_ReadWrite_10+0x42>
	{
		/* Block address is invalid, update SENSE key and return command fail */
		SCSI_SET_SENSE(SCSI_SENSE_KEY_ILLEGAL_REQUEST,
     a46:	80 91 4b 01 	lds	r24, 0x014B
     a4a:	80 7f       	andi	r24, 0xF0	; 240
     a4c:	85 60       	ori	r24, 0x05	; 5
     a4e:	80 93 4b 01 	sts	0x014B, r24
     a52:	81 e2       	ldi	r24, 0x21	; 33
     a54:	80 93 55 01 	sts	0x0155, r24
     a58:	10 92 56 01 	sts	0x0156, r1
		               SCSI_ASENSE_LOGICAL_BLOCK_ADDRESS_OUT_OF_RANGE,
		               SCSI_ASENSEQ_NO_QUALIFIER);

		return false;
     a5c:	80 e0       	ldi	r24, 0x00	; 0
     a5e:	1f c0       	rjmp	.+62     	; 0xa9e <SCSI_Command_ReadWrite_10+0x80>
	/* Adjust the given block address to the real media address based on the selected LUN */
	BlockAddress += ((uint32_t)MSInterfaceInfo->State.CommandBlock.LUN * LUN_MEDIA_BLOCKS);
	#endif

	/* Determine if the packet is a READ (10) or WRITE (10) command, call appropriate function */
	if (IsDataRead == DATA_READ)
     a60:	88 23       	and	r24, r24
     a62:	21 f0       	breq	.+8      	; 0xa6c <SCSI_Command_ReadWrite_10+0x4e>
	  DataflashManager_ReadBlocks(MSInterfaceInfo, BlockAddress, TotalBlocks);
     a64:	ce 01       	movw	r24, r28
     a66:	98 01       	movw	r18, r16
     a68:	59 de       	rcall	.-846    	; 0x71c <DataflashManager_ReadBlocks>
     a6a:	03 c0       	rjmp	.+6      	; 0xa72 <SCSI_Command_ReadWrite_10+0x54>
     a6c:	ce 01       	movw	r24, r28
	else
	  DataflashManager_WriteBlocks(MSInterfaceInfo, BlockAddress, TotalBlocks);
     a6e:	98 01       	movw	r18, r16
     a70:	0a dd       	rcall	.-1516   	; 0x486 <DataflashManager_WriteBlocks>
     a72:	20 e0       	ldi	r18, 0x00	; 0
     a74:	30 e0       	ldi	r19, 0x00	; 0

	/* Update the bytes transferred counter and succeed the command */
	MSInterfaceInfo->State.CommandBlock.DataTransferLength -= ((uint32_t)TotalBlocks * VIRTUAL_MEMORY_BLOCK_SIZE);
     a76:	89 e0       	ldi	r24, 0x09	; 9
     a78:	00 0f       	add	r16, r16
     a7a:	11 1f       	adc	r17, r17
     a7c:	22 1f       	adc	r18, r18
     a7e:	33 1f       	adc	r19, r19
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <SCSI_Command_ReadWrite_10+0x5a>
     a84:	8c 89       	ldd	r24, Y+20	; 0x14
     a86:	9d 89       	ldd	r25, Y+21	; 0x15
     a88:	ae 89       	ldd	r26, Y+22	; 0x16
     a8a:	bf 89       	ldd	r27, Y+23	; 0x17
     a8c:	80 1b       	sub	r24, r16
     a8e:	91 0b       	sbc	r25, r17
     a90:	a2 0b       	sbc	r26, r18
     a92:	b3 0b       	sbc	r27, r19
     a94:	8c 8b       	std	Y+20, r24	; 0x14
     a96:	9d 8b       	std	Y+21, r25	; 0x15
     a98:	ae 8b       	std	Y+22, r26	; 0x16
     a9a:	bf 8b       	std	Y+23, r27	; 0x17
     a9c:	81 e0       	ldi	r24, 0x01	; 1
     a9e:	df 91       	pop	r29

	return true;
     aa0:	cf 91       	pop	r28
}
     aa2:	1f 91       	pop	r17
     aa4:	0f 91       	pop	r16
     aa6:	08 95       	ret

00000aa8 <SCSI_DecodeSCSICommand>:
     aa8:	cf 92       	push	r12
     aaa:	df 92       	push	r13
 *  \param[in] MSInterfaceInfo  Pointer to the Mass Storage class interface structure that the command is associated with
 *
 *  \return Boolean true if the command completed successfully, false otherwise
 */
bool SCSI_DecodeSCSICommand(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
     aac:	ef 92       	push	r14
     aae:	ff 92       	push	r15
     ab0:	0f 93       	push	r16
     ab2:	1f 93       	push	r17
     ab4:	cf 93       	push	r28
     ab6:	df 93       	push	r29
     ab8:	cd b7       	in	r28, 0x3d	; 61
     aba:	de b7       	in	r29, 0x3e	; 62
     abc:	28 97       	sbiw	r28, 0x08	; 8
     abe:	0f b6       	in	r0, 0x3f	; 63
     ac0:	f8 94       	cli
     ac2:	de bf       	out	0x3e, r29	; 62
     ac4:	0f be       	out	0x3f, r0	; 63
     ac6:	cd bf       	out	0x3d, r28	; 61
     ac8:	8c 01       	movw	r16, r24
	bool CommandSuccess = false;

	/* Run the appropriate SCSI command hander function based on the passed command */
	switch (MSInterfaceInfo->State.CommandBlock.SCSICommandData[0])
     aca:	fc 01       	movw	r30, r24
     acc:	83 8d       	ldd	r24, Z+27	; 0x1b
     ace:	8d 31       	cpi	r24, 0x1D	; 29
     ad0:	09 f4       	brne	.+2      	; 0xad4 <SCSI_DecodeSCSICommand+0x2c>
     ad2:	a9 c0       	rjmp	.+338    	; 0xc26 <SCSI_DecodeSCSICommand+0x17e>
     ad4:	8e 31       	cpi	r24, 0x1E	; 30
     ad6:	78 f4       	brcc	.+30     	; 0xaf6 <SCSI_DecodeSCSICommand+0x4e>
     ad8:	83 30       	cpi	r24, 0x03	; 3
     ada:	09 f4       	brne	.+2      	; 0xade <SCSI_DecodeSCSICommand+0x36>
     adc:	53 c0       	rjmp	.+166    	; 0xb84 <SCSI_DecodeSCSICommand+0xdc>
     ade:	84 30       	cpi	r24, 0x04	; 4
     ae0:	20 f4       	brcc	.+8      	; 0xaea <SCSI_DecodeSCSICommand+0x42>
     ae2:	88 23       	and	r24, r24
     ae4:	09 f4       	brne	.+2      	; 0xae8 <SCSI_DecodeSCSICommand+0x40>
     ae6:	dc c0       	rjmp	.+440    	; 0xca0 <SCSI_DecodeSCSICommand+0x1f8>
     ae8:	e1 c0       	rjmp	.+450    	; 0xcac <SCSI_DecodeSCSICommand+0x204>
     aea:	82 31       	cpi	r24, 0x12	; 18
     aec:	b9 f0       	breq	.+46     	; 0xb1c <SCSI_DecodeSCSICommand+0x74>
     aee:	8a 31       	cpi	r24, 0x1A	; 26
     af0:	09 f0       	breq	.+2      	; 0xaf4 <SCSI_DecodeSCSICommand+0x4c>
     af2:	dc c0       	rjmp	.+440    	; 0xcac <SCSI_DecodeSCSICommand+0x204>
     af4:	bb c0       	rjmp	.+374    	; 0xc6c <SCSI_DecodeSCSICommand+0x1c4>
     af6:	88 32       	cpi	r24, 0x28	; 40
     af8:	09 f4       	brne	.+2      	; 0xafc <SCSI_DecodeSCSICommand+0x54>
     afa:	b2 c0       	rjmp	.+356    	; 0xc60 <SCSI_DecodeSCSICommand+0x1b8>
     afc:	89 32       	cpi	r24, 0x29	; 41
     afe:	38 f4       	brcc	.+14     	; 0xb0e <SCSI_DecodeSCSICommand+0x66>
     b00:	8e 31       	cpi	r24, 0x1E	; 30
     b02:	09 f4       	brne	.+2      	; 0xb06 <SCSI_DecodeSCSICommand+0x5e>
     b04:	cd c0       	rjmp	.+410    	; 0xca0 <SCSI_DecodeSCSICommand+0x1f8>
     b06:	85 32       	cpi	r24, 0x25	; 37
     b08:	09 f0       	breq	.+2      	; 0xb0c <SCSI_DecodeSCSICommand+0x64>
     b0a:	d0 c0       	rjmp	.+416    	; 0xcac <SCSI_DecodeSCSICommand+0x204>
     b0c:	60 c0       	rjmp	.+192    	; 0xbce <SCSI_DecodeSCSICommand+0x126>
     b0e:	8a 32       	cpi	r24, 0x2A	; 42
     b10:	09 f4       	brne	.+2      	; 0xb14 <SCSI_DecodeSCSICommand+0x6c>
     b12:	a3 c0       	rjmp	.+326    	; 0xc5a <SCSI_DecodeSCSICommand+0x1b2>
     b14:	8f 32       	cpi	r24, 0x2F	; 47
     b16:	09 f0       	breq	.+2      	; 0xb1a <SCSI_DecodeSCSICommand+0x72>
     b18:	c9 c0       	rjmp	.+402    	; 0xcac <SCSI_DecodeSCSICommand+0x204>
     b1a:	c2 c0       	rjmp	.+388    	; 0xca0 <SCSI_DecodeSCSICommand+0x1f8>
     b1c:	f8 01       	movw	r30, r16
     b1e:	c7 8c       	ldd	r12, Z+31	; 0x1f
     b20:	d6 8c       	ldd	r13, Z+30	; 0x1e
{
	uint16_t AllocationLength  = SwapEndian_16(*(uint16_t*)&MSInterfaceInfo->State.CommandBlock.SCSICommandData[3]);
	uint16_t BytesTransferred  = MIN(AllocationLength, sizeof(InquiryData));

	/* Only the standard INQUIRY data is supported, check if any optional INQUIRY bits set */
	if ((MSInterfaceInfo->State.CommandBlock.SCSICommandData[1] & ((1 << 0) | (1 << 1))) ||
     b22:	84 8d       	ldd	r24, Z+28	; 0x1c
     b24:	90 e0       	ldi	r25, 0x00	; 0
     b26:	83 70       	andi	r24, 0x03	; 3
     b28:	90 70       	andi	r25, 0x00	; 0
     b2a:	00 97       	sbiw	r24, 0x00	; 0
     b2c:	09 f0       	breq	.+2      	; 0xb30 <SCSI_DecodeSCSICommand+0x88>
     b2e:	7f c0       	rjmp	.+254    	; 0xc2e <SCSI_DecodeSCSICommand+0x186>
     b30:	85 8d       	ldd	r24, Z+29	; 0x1d
     b32:	88 23       	and	r24, r24
     b34:	09 f0       	breq	.+2      	; 0xb38 <SCSI_DecodeSCSICommand+0x90>
     b36:	7b c0       	rjmp	.+246    	; 0xc2e <SCSI_DecodeSCSICommand+0x186>
 *  \return Boolean true if the command completed successfully, false otherwise.
 */
static bool SCSI_Command_Inquiry(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
	uint16_t AllocationLength  = SwapEndian_16(*(uint16_t*)&MSInterfaceInfo->State.CommandBlock.SCSICommandData[3]);
	uint16_t BytesTransferred  = MIN(AllocationLength, sizeof(InquiryData));
     b38:	76 01       	movw	r14, r12
     b3a:	f5 e2       	ldi	r31, 0x25	; 37
     b3c:	cf 16       	cp	r12, r31
     b3e:	d1 04       	cpc	r13, r1
     b40:	18 f0       	brcs	.+6      	; 0xb48 <SCSI_DecodeSCSICommand+0xa0>
     b42:	24 e2       	ldi	r18, 0x24	; 36
     b44:	e2 2e       	mov	r14, r18
     b46:	f1 2c       	mov	r15, r1
		               SCSI_ASENSEQ_NO_QUALIFIER);

		return false;
	}

	Endpoint_Write_Stream_LE(&InquiryData, BytesTransferred, NULL);
     b48:	8b e5       	ldi	r24, 0x5B	; 91
     b4a:	91 e0       	ldi	r25, 0x01	; 1
     b4c:	b7 01       	movw	r22, r14
     b4e:	40 e0       	ldi	r20, 0x00	; 0
     b50:	50 e0       	ldi	r21, 0x00	; 0
     b52:	16 d1       	rcall	.+556    	; 0xd80 <Endpoint_Write_Stream_LE>
     b54:	c6 01       	movw	r24, r12

	/* Pad out remaining bytes with 0x00 */
	Endpoint_Null_Stream((AllocationLength - BytesTransferred), NULL);
     b56:	8e 19       	sub	r24, r14
     b58:	9f 09       	sbc	r25, r15
     b5a:	60 e0       	ldi	r22, 0x00	; 0
     b5c:	70 e0       	ldi	r23, 0x00	; 0
     b5e:	cb d0       	rcall	.+406    	; 0xcf6 <Endpoint_Null_Stream>
     b60:	80 91 e8 00 	lds	r24, 0x00E8
     b64:	8e 77       	andi	r24, 0x7E	; 126
     b66:	80 93 e8 00 	sts	0x00E8, r24
     b6a:	a7 01       	movw	r20, r14
     b6c:	60 e0       	ldi	r22, 0x00	; 0

	/* Finalize the stream transfer to send the last packet */
	Endpoint_ClearIN();

	/* Succeed the command and update the bytes transferred counter */
	MSInterfaceInfo->State.CommandBlock.DataTransferLength -= BytesTransferred;
     b6e:	70 e0       	ldi	r23, 0x00	; 0
     b70:	f8 01       	movw	r30, r16
     b72:	84 89       	ldd	r24, Z+20	; 0x14
     b74:	95 89       	ldd	r25, Z+21	; 0x15
     b76:	a6 89       	ldd	r26, Z+22	; 0x16
     b78:	b7 89       	ldd	r27, Z+23	; 0x17
     b7a:	84 1b       	sub	r24, r20
     b7c:	95 0b       	sbc	r25, r21
     b7e:	a6 0b       	sbc	r26, r22
     b80:	b7 0b       	sbc	r27, r23
     b82:	89 c0       	rjmp	.+274    	; 0xc96 <SCSI_DecodeSCSICommand+0x1ee>
     b84:	f8 01       	movw	r30, r16
     b86:	c7 8c       	ldd	r12, Z+31	; 0x1f
 *
 *  \return Boolean true if the command completed successfully, false otherwise.
 */
static bool SCSI_Command_Request_Sense(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
	uint8_t  AllocationLength = MSInterfaceInfo->State.CommandBlock.SCSICommandData[4];
     b88:	ec 2c       	mov	r14, r12
     b8a:	f2 e1       	ldi	r31, 0x12	; 18
	uint8_t  BytesTransferred = MIN(AllocationLength, sizeof(SenseData));
     b8c:	fc 15       	cp	r31, r12
     b8e:	10 f4       	brcc	.+4      	; 0xb94 <SCSI_DecodeSCSICommand+0xec>
     b90:	92 e1       	ldi	r25, 0x12	; 18
     b92:	e9 2e       	mov	r14, r25
     b94:	89 e4       	ldi	r24, 0x49	; 73
     b96:	91 e0       	ldi	r25, 0x01	; 1

	Endpoint_Write_Stream_LE(&SenseData, BytesTransferred, NULL);
     b98:	6e 2d       	mov	r22, r14
     b9a:	70 e0       	ldi	r23, 0x00	; 0
     b9c:	40 e0       	ldi	r20, 0x00	; 0
     b9e:	50 e0       	ldi	r21, 0x00	; 0
     ba0:	ef d0       	rcall	.+478    	; 0xd80 <Endpoint_Write_Stream_LE>
     ba2:	8c 2d       	mov	r24, r12
     ba4:	90 e0       	ldi	r25, 0x00	; 0
     ba6:	8e 19       	sub	r24, r14
	Endpoint_Null_Stream((AllocationLength - BytesTransferred), NULL);
     ba8:	91 09       	sbc	r25, r1
     baa:	60 e0       	ldi	r22, 0x00	; 0
     bac:	70 e0       	ldi	r23, 0x00	; 0
     bae:	a3 d0       	rcall	.+326    	; 0xcf6 <Endpoint_Null_Stream>
     bb0:	80 91 e8 00 	lds	r24, 0x00E8
     bb4:	8e 77       	andi	r24, 0x7E	; 126
     bb6:	80 93 e8 00 	sts	0x00E8, r24
     bba:	f8 01       	movw	r30, r16
     bbc:	84 89       	ldd	r24, Z+20	; 0x14
     bbe:	95 89       	ldd	r25, Z+21	; 0x15
     bc0:	a6 89       	ldd	r26, Z+22	; 0x16
	Endpoint_ClearIN();

	/* Succeed the command and update the bytes transferred counter */
	MSInterfaceInfo->State.CommandBlock.DataTransferLength -= BytesTransferred;
     bc2:	b7 89       	ldd	r27, Z+23	; 0x17
     bc4:	8e 19       	sub	r24, r14
     bc6:	91 09       	sbc	r25, r1
     bc8:	a1 09       	sbc	r26, r1
     bca:	b1 09       	sbc	r27, r1
     bcc:	64 c0       	rjmp	.+200    	; 0xc96 <SCSI_DecodeSCSICommand+0x1ee>
     bce:	8f ef       	ldi	r24, 0xFF	; 255
     bd0:	9f e7       	ldi	r25, 0x7F	; 127
     bd2:	a0 e0       	ldi	r26, 0x00	; 0
     bd4:	b0 e0       	ldi	r27, 0x00	; 0
 *
 *  \return Boolean true if the command completed successfully, false otherwise.
 */
static bool SCSI_Command_Read_Capacity_10(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
	uint32_t LastBlockAddressInLUN = (LUN_MEDIA_BLOCKS - 1);
     bd6:	8d 83       	std	Y+5, r24	; 0x05
     bd8:	9e 83       	std	Y+6, r25	; 0x06
     bda:	af 83       	std	Y+7, r26	; 0x07
     bdc:	b8 87       	std	Y+8, r27	; 0x08
     bde:	80 e0       	ldi	r24, 0x00	; 0
     be0:	92 e0       	ldi	r25, 0x02	; 2
     be2:	a0 e0       	ldi	r26, 0x00	; 0
     be4:	b0 e0       	ldi	r27, 0x00	; 0
	uint32_t MediaBlockSize        = VIRTUAL_MEMORY_BLOCK_SIZE;
     be6:	89 83       	std	Y+1, r24	; 0x01
     be8:	9a 83       	std	Y+2, r25	; 0x02
     bea:	ab 83       	std	Y+3, r26	; 0x03
     bec:	bc 83       	std	Y+4, r27	; 0x04
     bee:	ce 01       	movw	r24, r28
     bf0:	05 96       	adiw	r24, 0x05	; 5
     bf2:	64 e0       	ldi	r22, 0x04	; 4
     bf4:	70 e0       	ldi	r23, 0x00	; 0

	Endpoint_Write_Stream_BE(&LastBlockAddressInLUN, sizeof(LastBlockAddressInLUN), NULL);
     bf6:	40 e0       	ldi	r20, 0x00	; 0
     bf8:	50 e0       	ldi	r21, 0x00	; 0
     bfa:	11 d1       	rcall	.+546    	; 0xe1e <Endpoint_Write_Stream_BE>
     bfc:	ce 01       	movw	r24, r28
     bfe:	01 96       	adiw	r24, 0x01	; 1
     c00:	64 e0       	ldi	r22, 0x04	; 4
     c02:	70 e0       	ldi	r23, 0x00	; 0
     c04:	40 e0       	ldi	r20, 0x00	; 0
	Endpoint_Write_Stream_BE(&MediaBlockSize, sizeof(MediaBlockSize), NULL);
     c06:	50 e0       	ldi	r21, 0x00	; 0
     c08:	0a d1       	rcall	.+532    	; 0xe1e <Endpoint_Write_Stream_BE>
     c0a:	80 91 e8 00 	lds	r24, 0x00E8
     c0e:	8e 77       	andi	r24, 0x7E	; 126
     c10:	80 93 e8 00 	sts	0x00E8, r24
     c14:	f8 01       	movw	r30, r16
     c16:	84 89       	ldd	r24, Z+20	; 0x14
     c18:	95 89       	ldd	r25, Z+21	; 0x15
     c1a:	a6 89       	ldd	r26, Z+22	; 0x16
     c1c:	b7 89       	ldd	r27, Z+23	; 0x17
     c1e:	08 97       	sbiw	r24, 0x08	; 8
	Endpoint_ClearIN();

	/* Succeed the command and update the bytes transferred counter */
	MSInterfaceInfo->State.CommandBlock.DataTransferLength -= 8;
     c20:	a1 09       	sbc	r26, r1
     c22:	b1 09       	sbc	r27, r1
     c24:	38 c0       	rjmp	.+112    	; 0xc96 <SCSI_DecodeSCSICommand+0x1ee>
     c26:	f8 01       	movw	r30, r16
     c28:	84 8d       	ldd	r24, Z+28	; 0x1c
     c2a:	82 fd       	sbrc	r24, 2
     c2c:	08 c0       	rjmp	.+16     	; 0xc3e <SCSI_DecodeSCSICommand+0x196>
     c2e:	80 91 4b 01 	lds	r24, 0x014B
 *  \return Boolean true if the command completed successfully, false otherwise.
 */
static bool SCSI_Command_Send_Diagnostic(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
	/* Check to see if the SELF TEST bit is not set */
	if (!(MSInterfaceInfo->State.CommandBlock.SCSICommandData[1] & (1 << 2)))
     c32:	80 7f       	andi	r24, 0xF0	; 240
     c34:	85 60       	ori	r24, 0x05	; 5
     c36:	80 93 4b 01 	sts	0x014B, r24
	{
		/* Only self-test supported - update SENSE key and fail the command */
		SCSI_SET_SENSE(SCSI_SENSE_KEY_ILLEGAL_REQUEST,
     c3a:	84 e2       	ldi	r24, 0x24	; 36
     c3c:	3e c0       	rjmp	.+124    	; 0xcba <SCSI_DecodeSCSICommand+0x212>
     c3e:	c4 de       	rcall	.-632    	; 0x9c8 <DataflashManager_CheckDataflashOperation>
     c40:	88 23       	and	r24, r24
     c42:	71 f5       	brne	.+92     	; 0xca0 <SCSI_DecodeSCSICommand+0x1f8>
     c44:	80 91 4b 01 	lds	r24, 0x014B
     c48:	80 7f       	andi	r24, 0xF0	; 240

		return false;
	}

	/* Check to see if all attached Dataflash ICs are functional */
	if (!(DataflashManager_CheckDataflashOperation()))
     c4a:	84 60       	ori	r24, 0x04	; 4
     c4c:	80 93 4b 01 	sts	0x014B, r24
     c50:	10 92 55 01 	sts	0x0155, r1
	{
		/* Update SENSE key with a hardware error condition and return command fail */
		SCSI_SET_SENSE(SCSI_SENSE_KEY_HARDWARE_ERROR,
     c54:	10 92 56 01 	sts	0x0156, r1
     c58:	3e c0       	rjmp	.+124    	; 0xcd6 <SCSI_DecodeSCSICommand+0x22e>
     c5a:	c8 01       	movw	r24, r16
     c5c:	60 e0       	ldi	r22, 0x00	; 0
     c5e:	02 c0       	rjmp	.+4      	; 0xc64 <SCSI_DecodeSCSICommand+0x1bc>
     c60:	c8 01       	movw	r24, r16
     c62:	61 e0       	ldi	r22, 0x01	; 1
     c64:	dc de       	rcall	.-584    	; 0xa1e <SCSI_Command_ReadWrite_10>
     c66:	88 23       	and	r24, r24
			break;
		case SCSI_CMD_SEND_DIAGNOSTIC:
			CommandSuccess = SCSI_Command_Send_Diagnostic(MSInterfaceInfo);
			break;
		case SCSI_CMD_WRITE_10:
			CommandSuccess = SCSI_Command_ReadWrite_10(MSInterfaceInfo, DATA_WRITE);
     c68:	b1 f1       	breq	.+108    	; 0xcd6 <SCSI_DecodeSCSICommand+0x22e>
     c6a:	2a c0       	rjmp	.+84     	; 0xcc0 <SCSI_DecodeSCSICommand+0x218>
     c6c:	10 92 f1 00 	sts	0x00F1, r1
			break;
		case SCSI_CMD_READ_10:
			CommandSuccess = SCSI_Command_ReadWrite_10(MSInterfaceInfo, DATA_READ);
     c70:	10 92 f1 00 	sts	0x00F1, r1
     c74:	10 92 f1 00 	sts	0x00F1, r1
		                   SCSI_ASENSEQ_NO_QUALIFIER);
			break;
	}

	/* Check if command was successfully processed */
	if (CommandSuccess)
     c78:	10 92 f1 00 	sts	0x00F1, r1
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     c7c:	80 91 e8 00 	lds	r24, 0x00E8
     c80:	8e 77       	andi	r24, 0x7E	; 126
     c82:	80 93 e8 00 	sts	0x00E8, r24
     c86:	f8 01       	movw	r30, r16
     c88:	84 89       	ldd	r24, Z+20	; 0x14
     c8a:	95 89       	ldd	r25, Z+21	; 0x15
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     c8c:	a6 89       	ldd	r26, Z+22	; 0x16
     c8e:	b7 89       	ldd	r27, Z+23	; 0x17
     c90:	04 97       	sbiw	r24, 0x04	; 4
     c92:	a1 09       	sbc	r26, r1
     c94:	b1 09       	sbc	r27, r1
	Endpoint_Write_8(DISK_READ_ONLY ? 0x80 : 0x00);
	Endpoint_Write_8(0x00);
	Endpoint_ClearIN();

	/* Update the bytes transferred counter and succeed the command */
	MSInterfaceInfo->State.CommandBlock.DataTransferLength -= 4;
     c96:	84 8b       	std	Z+20, r24	; 0x14
     c98:	95 8b       	std	Z+21, r25	; 0x15
     c9a:	a6 8b       	std	Z+22, r26	; 0x16
     c9c:	b7 8b       	std	Z+23, r27	; 0x17
     c9e:	10 c0       	rjmp	.+32     	; 0xcc0 <SCSI_DecodeSCSICommand+0x218>
     ca0:	f8 01       	movw	r30, r16
     ca2:	14 8a       	std	Z+20, r1	; 0x14
     ca4:	15 8a       	std	Z+21, r1	; 0x15
     ca6:	16 8a       	std	Z+22, r1	; 0x16
     ca8:	17 8a       	std	Z+23, r1	; 0x17
     caa:	0a c0       	rjmp	.+20     	; 0xcc0 <SCSI_DecodeSCSICommand+0x218>
     cac:	80 91 4b 01 	lds	r24, 0x014B
		case SCSI_CMD_TEST_UNIT_READY:
		case SCSI_CMD_PREVENT_ALLOW_MEDIUM_REMOVAL:
		case SCSI_CMD_VERIFY_10:
			/* These commands should just succeed, no handling required */
			CommandSuccess = true;
			MSInterfaceInfo->State.CommandBlock.DataTransferLength = 0;
     cb0:	80 7f       	andi	r24, 0xF0	; 240
     cb2:	85 60       	ori	r24, 0x05	; 5
     cb4:	80 93 4b 01 	sts	0x014B, r24
     cb8:	80 e2       	ldi	r24, 0x20	; 32
			break;
     cba:	80 93 55 01 	sts	0x0155, r24
		default:
			/* Update the SENSE key to reflect the invalid command */
			SCSI_SET_SENSE(SCSI_SENSE_KEY_ILLEGAL_REQUEST,
     cbe:	ca cf       	rjmp	.-108    	; 0xc54 <SCSI_DecodeSCSICommand+0x1ac>
     cc0:	80 91 4b 01 	lds	r24, 0x014B
     cc4:	80 7f       	andi	r24, 0xF0	; 240
     cc6:	80 93 4b 01 	sts	0x014B, r24
     cca:	10 92 55 01 	sts	0x0155, r1
     cce:	10 92 56 01 	sts	0x0156, r1
	}

	/* Check if command was successfully processed */
	if (CommandSuccess)
	{
		SCSI_SET_SENSE(SCSI_SENSE_KEY_GOOD,
     cd2:	81 e0       	ldi	r24, 0x01	; 1
     cd4:	01 c0       	rjmp	.+2      	; 0xcd8 <SCSI_DecodeSCSICommand+0x230>
     cd6:	80 e0       	ldi	r24, 0x00	; 0
     cd8:	28 96       	adiw	r28, 0x08	; 8
     cda:	0f b6       	in	r0, 0x3f	; 63
     cdc:	f8 94       	cli
     cde:	de bf       	out	0x3e, r29	; 62
     ce0:	0f be       	out	0x3f, r0	; 63
		               SCSI_ASENSE_NO_ADDITIONAL_INFORMATION,
		               SCSI_ASENSEQ_NO_QUALIFIER);

		return true;
     ce2:	cd bf       	out	0x3d, r28	; 61
     ce4:	df 91       	pop	r29
	}

	return false;
     ce6:	cf 91       	pop	r28
}
     ce8:	1f 91       	pop	r17
     cea:	0f 91       	pop	r16
     cec:	ff 90       	pop	r15
     cee:	ef 90       	pop	r14
     cf0:	df 90       	pop	r13
     cf2:	cf 90       	pop	r12
     cf4:	08 95       	ret

00000cf6 <Endpoint_Null_Stream>:
	return ENDPOINT_RWSTREAM_NoError;
}

uint8_t Endpoint_Null_Stream(uint16_t Length,
                             uint16_t* const BytesProcessed)
{
     cf6:	df 92       	push	r13
     cf8:	ef 92       	push	r14
     cfa:	ff 92       	push	r15
     cfc:	0f 93       	push	r16
     cfe:	1f 93       	push	r17
     d00:	cf 93       	push	r28
     d02:	df 93       	push	r29
     d04:	ec 01       	movw	r28, r24
     d06:	8b 01       	movw	r16, r22
	uint8_t  ErrorCode;
	uint16_t BytesInTransfer = 0;
	
	if ((ErrorCode = Endpoint_WaitUntilReady()))
     d08:	c3 d2       	rcall	.+1414   	; 0x1290 <Endpoint_WaitUntilReady>
     d0a:	d8 2e       	mov	r13, r24
     d0c:	88 23       	and	r24, r24
     d0e:	79 f5       	brne	.+94     	; 0xd6e <Endpoint_Null_Stream+0x78>
     d10:	01 15       	cp	r16, r1
	  return ErrorCode;
	  
	if (BytesProcessed != NULL)
     d12:	11 05       	cpc	r17, r1
     d14:	29 f0       	breq	.+10     	; 0xd20 <Endpoint_Null_Stream+0x2a>
     d16:	f8 01       	movw	r30, r16
	  Length -= *BytesProcessed;
     d18:	20 81       	ld	r18, Z
     d1a:	31 81       	ldd	r19, Z+1	; 0x01
     d1c:	c2 1b       	sub	r28, r18
     d1e:	d3 0b       	sbc	r29, r19
     d20:	ee 24       	eor	r14, r14
	return ENDPOINT_RWSTREAM_NoError;
}

uint8_t Endpoint_Null_Stream(uint16_t Length,
                             uint16_t* const BytesProcessed)
{
     d22:	ff 24       	eor	r15, r15
     d24:	20 c0       	rjmp	.+64     	; 0xd66 <Endpoint_Null_Stream+0x70>
     d26:	80 91 e8 00 	lds	r24, 0x00E8
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
     d2a:	85 fd       	sbrc	r24, 5
	if (BytesProcessed != NULL)
	  Length -= *BytesProcessed;

	while (Length)
	{
		if (!(Endpoint_IsReadWriteAllowed()))
     d2c:	16 c0       	rjmp	.+44     	; 0xd5a <Endpoint_Null_Stream+0x64>
     d2e:	80 91 e8 00 	lds	r24, 0x00E8
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     d32:	8e 77       	andi	r24, 0x7E	; 126
     d34:	80 93 e8 00 	sts	0x00E8, r24
     d38:	01 15       	cp	r16, r1
		{
			Endpoint_ClearIN();

			if (BytesProcessed != NULL)
     d3a:	11 05       	cpc	r17, r1
     d3c:	51 f0       	breq	.+20     	; 0xd52 <Endpoint_Null_Stream+0x5c>
     d3e:	f8 01       	movw	r30, r16
			{
				*BytesProcessed += BytesInTransfer;
     d40:	80 81       	ld	r24, Z
     d42:	91 81       	ldd	r25, Z+1	; 0x01
     d44:	8e 0d       	add	r24, r14
     d46:	9f 1d       	adc	r25, r15
     d48:	91 83       	std	Z+1, r25	; 0x01
     d4a:	80 83       	st	Z, r24
     d4c:	35 e0       	ldi	r19, 0x05	; 5
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
     d4e:	d3 2e       	mov	r13, r19
     d50:	0e c0       	rjmp	.+28     	; 0xd6e <Endpoint_Null_Stream+0x78>
     d52:	9e d2       	rcall	.+1340   	; 0x1290 <Endpoint_WaitUntilReady>
			}

			if ((ErrorCode = Endpoint_WaitUntilReady()))
     d54:	88 23       	and	r24, r24
     d56:	39 f0       	breq	.+14     	; 0xd66 <Endpoint_Null_Stream+0x70>
     d58:	09 c0       	rjmp	.+18     	; 0xd6c <Endpoint_Null_Stream+0x76>
     d5a:	10 92 f1 00 	sts	0x00F1, r1
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     d5e:	21 97       	sbiw	r28, 0x01	; 1
     d60:	08 94       	sec
		}
		else
		{
			Endpoint_Write_8(0);

			Length--;
     d62:	e1 1c       	adc	r14, r1
			BytesInTransfer++;
     d64:	f1 1c       	adc	r15, r1
     d66:	20 97       	sbiw	r28, 0x00	; 0
     d68:	f1 f6       	brne	.-68     	; 0xd26 <Endpoint_Null_Stream+0x30>
	  return ErrorCode;
	  
	if (BytesProcessed != NULL)
	  Length -= *BytesProcessed;

	while (Length)
     d6a:	01 c0       	rjmp	.+2      	; 0xd6e <Endpoint_Null_Stream+0x78>
     d6c:	d8 2e       	mov	r13, r24
     d6e:	8d 2d       	mov	r24, r13
			{
				*BytesProcessed += BytesInTransfer;
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
			}

			if ((ErrorCode = Endpoint_WaitUntilReady()))
     d70:	df 91       	pop	r29
			BytesInTransfer++;
		}
	}
	
	return ENDPOINT_RWSTREAM_NoError;
}
     d72:	cf 91       	pop	r28
     d74:	1f 91       	pop	r17
     d76:	0f 91       	pop	r16
     d78:	ff 90       	pop	r15
     d7a:	ef 90       	pop	r14
     d7c:	df 90       	pop	r13
     d7e:	08 95       	ret

00000d80 <Endpoint_Write_Stream_LE>:
     d80:	af 92       	push	r10
     d82:	bf 92       	push	r11
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
     d84:	cf 92       	push	r12
     d86:	df 92       	push	r13
     d88:	ef 92       	push	r14
     d8a:	ff 92       	push	r15
     d8c:	1f 93       	push	r17
     d8e:	cf 93       	push	r28
     d90:	df 93       	push	r29
     d92:	ec 01       	movw	r28, r24
     d94:	7b 01       	movw	r14, r22
     d96:	6a 01       	movw	r12, r20
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	uint16_t BytesInTransfer = 0;
	uint8_t  ErrorCode;

	if ((ErrorCode = Endpoint_WaitUntilReady()))
     d98:	7b d2       	rcall	.+1270   	; 0x1290 <Endpoint_WaitUntilReady>
     d9a:	18 2f       	mov	r17, r24
     d9c:	88 23       	and	r24, r24
     d9e:	a1 f5       	brne	.+104    	; 0xe08 <Endpoint_Write_Stream_LE+0x88>
     da0:	c1 14       	cp	r12, r1
	  return ErrorCode;

	if (BytesProcessed != NULL)
     da2:	d1 04       	cpc	r13, r1
     da4:	39 f0       	breq	.+14     	; 0xdb4 <Endpoint_Write_Stream_LE+0x34>
     da6:	f6 01       	movw	r30, r12
	{
		Length -= *BytesProcessed;
     da8:	20 81       	ld	r18, Z
     daa:	31 81       	ldd	r19, Z+1	; 0x01
     dac:	e2 1a       	sub	r14, r18
     dae:	f3 0a       	sbc	r15, r19
     db0:	c2 0f       	add	r28, r18
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
     db2:	d3 1f       	adc	r29, r19
     db4:	aa 24       	eor	r10, r10

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
     db6:	bb 24       	eor	r11, r11
     db8:	22 c0       	rjmp	.+68     	; 0xdfe <Endpoint_Write_Stream_LE+0x7e>
     dba:	80 91 e8 00 	lds	r24, 0x00E8
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
     dbe:	85 fd       	sbrc	r24, 5
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
	{
		if (!(Endpoint_IsReadWriteAllowed()))
     dc0:	15 c0       	rjmp	.+42     	; 0xdec <Endpoint_Write_Stream_LE+0x6c>
     dc2:	80 91 e8 00 	lds	r24, 0x00E8
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     dc6:	8e 77       	andi	r24, 0x7E	; 126
     dc8:	80 93 e8 00 	sts	0x00E8, r24
     dcc:	c1 14       	cp	r12, r1

			#if !defined(INTERRUPT_CONTROL_ENDPOINT)
			USB_USBTask();
			#endif

			if (BytesProcessed != NULL)
     dce:	d1 04       	cpc	r13, r1
     dd0:	49 f0       	breq	.+18     	; 0xde4 <Endpoint_Write_Stream_LE+0x64>
     dd2:	f6 01       	movw	r30, r12
			{
				*BytesProcessed += BytesInTransfer;
     dd4:	80 81       	ld	r24, Z
     dd6:	91 81       	ldd	r25, Z+1	; 0x01
     dd8:	8a 0d       	add	r24, r10
     dda:	9b 1d       	adc	r25, r11
     ddc:	91 83       	std	Z+1, r25	; 0x01
     dde:	80 83       	st	Z, r24
     de0:	15 e0       	ldi	r17, 0x05	; 5
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
     de2:	12 c0       	rjmp	.+36     	; 0xe08 <Endpoint_Write_Stream_LE+0x88>
     de4:	55 d2       	rcall	.+1194   	; 0x1290 <Endpoint_WaitUntilReady>
			}

			if ((ErrorCode = Endpoint_WaitUntilReady()))
     de6:	88 23       	and	r24, r24
     de8:	51 f0       	breq	.+20     	; 0xdfe <Endpoint_Write_Stream_LE+0x7e>
     dea:	0d c0       	rjmp	.+26     	; 0xe06 <Endpoint_Write_Stream_LE+0x86>
     dec:	89 91       	ld	r24, Y+
     dee:	80 93 f1 00 	sts	0x00F1, r24
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     df2:	08 94       	sec
     df4:	e1 08       	sbc	r14, r1
		}
		else
		{
			TEMPLATE_TRANSFER_BYTE(DataStream);
			TEMPLATE_BUFFER_MOVE(DataStream, 1);
			Length--;
     df6:	f1 08       	sbc	r15, r1
     df8:	08 94       	sec
     dfa:	a1 1c       	adc	r10, r1
			BytesInTransfer++;
     dfc:	b1 1c       	adc	r11, r1
     dfe:	e1 14       	cp	r14, r1
     e00:	f1 04       	cpc	r15, r1
	{
		Length -= *BytesProcessed;
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
     e02:	d9 f6       	brne	.-74     	; 0xdba <Endpoint_Write_Stream_LE+0x3a>
     e04:	01 c0       	rjmp	.+2      	; 0xe08 <Endpoint_Write_Stream_LE+0x88>
     e06:	18 2f       	mov	r17, r24
     e08:	81 2f       	mov	r24, r17
			{
				*BytesProcessed += BytesInTransfer;
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
			}

			if ((ErrorCode = Endpoint_WaitUntilReady()))
     e0a:	df 91       	pop	r29
			BytesInTransfer++;
		}
	}

	return ENDPOINT_RWSTREAM_NoError;
}
     e0c:	cf 91       	pop	r28
     e0e:	1f 91       	pop	r17
     e10:	ff 90       	pop	r15
     e12:	ef 90       	pop	r14
     e14:	df 90       	pop	r13
     e16:	cf 90       	pop	r12
     e18:	bf 90       	pop	r11
     e1a:	af 90       	pop	r10
     e1c:	08 95       	ret

00000e1e <Endpoint_Write_Stream_BE>:
     e1e:	af 92       	push	r10
     e20:	bf 92       	push	r11
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
     e22:	cf 92       	push	r12
     e24:	df 92       	push	r13
     e26:	ff 92       	push	r15
     e28:	0f 93       	push	r16
     e2a:	1f 93       	push	r17
     e2c:	cf 93       	push	r28
     e2e:	df 93       	push	r29
     e30:	ec 01       	movw	r28, r24
     e32:	6b 01       	movw	r12, r22
     e34:	5a 01       	movw	r10, r20
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	uint16_t BytesInTransfer = 0;
	uint8_t  ErrorCode;

	if ((ErrorCode = Endpoint_WaitUntilReady()))
     e36:	2c d2       	rcall	.+1112   	; 0x1290 <Endpoint_WaitUntilReady>
     e38:	f8 2e       	mov	r15, r24
     e3a:	88 23       	and	r24, r24
     e3c:	d9 f5       	brne	.+118    	; 0xeb4 <Endpoint_Write_Stream_BE+0x96>
     e3e:	86 01       	movw	r16, r12

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
     e40:	01 50       	subi	r16, 0x01	; 1
     e42:	10 40       	sbci	r17, 0x00	; 0
     e44:	0c 0f       	add	r16, r28
     e46:	1d 1f       	adc	r17, r29
     e48:	a1 14       	cp	r10, r1
	uint8_t  ErrorCode;

	if ((ErrorCode = Endpoint_WaitUntilReady()))
	  return ErrorCode;

	if (BytesProcessed != NULL)
     e4a:	b1 04       	cpc	r11, r1
     e4c:	39 f0       	breq	.+14     	; 0xe5c <Endpoint_Write_Stream_BE+0x3e>
     e4e:	f5 01       	movw	r30, r10
	{
		Length -= *BytesProcessed;
     e50:	20 81       	ld	r18, Z
     e52:	31 81       	ldd	r19, Z+1	; 0x01
     e54:	c2 1a       	sub	r12, r18
     e56:	d3 0a       	sbc	r13, r19
     e58:	02 1b       	sub	r16, r18
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
     e5a:	13 0b       	sbc	r17, r19
     e5c:	c0 e0       	ldi	r28, 0x00	; 0
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
     e5e:	d0 e0       	ldi	r29, 0x00	; 0
     e60:	24 c0       	rjmp	.+72     	; 0xeaa <Endpoint_Write_Stream_BE+0x8c>
     e62:	80 91 e8 00 	lds	r24, 0x00E8
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
     e66:	85 fd       	sbrc	r24, 5
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
	{
		if (!(Endpoint_IsReadWriteAllowed()))
     e68:	16 c0       	rjmp	.+44     	; 0xe96 <Endpoint_Write_Stream_BE+0x78>
     e6a:	80 91 e8 00 	lds	r24, 0x00E8
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     e6e:	8e 77       	andi	r24, 0x7E	; 126
     e70:	80 93 e8 00 	sts	0x00E8, r24
     e74:	a1 14       	cp	r10, r1

			#if !defined(INTERRUPT_CONTROL_ENDPOINT)
			USB_USBTask();
			#endif

			if (BytesProcessed != NULL)
     e76:	b1 04       	cpc	r11, r1
     e78:	51 f0       	breq	.+20     	; 0xe8e <Endpoint_Write_Stream_BE+0x70>
     e7a:	f5 01       	movw	r30, r10
			{
				*BytesProcessed += BytesInTransfer;
     e7c:	80 81       	ld	r24, Z
     e7e:	91 81       	ldd	r25, Z+1	; 0x01
     e80:	8c 0f       	add	r24, r28
     e82:	9d 1f       	adc	r25, r29
     e84:	91 83       	std	Z+1, r25	; 0x01
     e86:	80 83       	st	Z, r24
     e88:	45 e0       	ldi	r20, 0x05	; 5
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
     e8a:	f4 2e       	mov	r15, r20
     e8c:	13 c0       	rjmp	.+38     	; 0xeb4 <Endpoint_Write_Stream_BE+0x96>
     e8e:	00 d2       	rcall	.+1024   	; 0x1290 <Endpoint_WaitUntilReady>
			}

			if ((ErrorCode = Endpoint_WaitUntilReady()))
     e90:	88 23       	and	r24, r24
     e92:	59 f0       	breq	.+22     	; 0xeaa <Endpoint_Write_Stream_BE+0x8c>
     e94:	0e c0       	rjmp	.+28     	; 0xeb2 <Endpoint_Write_Stream_BE+0x94>
     e96:	f8 01       	movw	r30, r16
     e98:	80 81       	ld	r24, Z
			  return ErrorCode;
		}
		else
		{
			TEMPLATE_TRANSFER_BYTE(DataStream);
     e9a:	80 93 f1 00 	sts	0x00F1, r24
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     e9e:	01 50       	subi	r16, 0x01	; 1
     ea0:	10 40       	sbci	r17, 0x00	; 0
			TEMPLATE_BUFFER_MOVE(DataStream, 1);
     ea2:	08 94       	sec
     ea4:	c1 08       	sbc	r12, r1
			Length--;
     ea6:	d1 08       	sbc	r13, r1
     ea8:	21 96       	adiw	r28, 0x01	; 1
     eaa:	c1 14       	cp	r12, r1
			BytesInTransfer++;
     eac:	d1 04       	cpc	r13, r1
	{
		Length -= *BytesProcessed;
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
     eae:	c9 f6       	brne	.-78     	; 0xe62 <Endpoint_Write_Stream_BE+0x44>
     eb0:	01 c0       	rjmp	.+2      	; 0xeb4 <Endpoint_Write_Stream_BE+0x96>
     eb2:	f8 2e       	mov	r15, r24
     eb4:	8f 2d       	mov	r24, r15
			{
				*BytesProcessed += BytesInTransfer;
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
			}

			if ((ErrorCode = Endpoint_WaitUntilReady()))
     eb6:	df 91       	pop	r29
			BytesInTransfer++;
		}
	}

	return ENDPOINT_RWSTREAM_NoError;
}
     eb8:	cf 91       	pop	r28
     eba:	1f 91       	pop	r17
     ebc:	0f 91       	pop	r16
     ebe:	ff 90       	pop	r15
     ec0:	df 90       	pop	r13
     ec2:	cf 90       	pop	r12
     ec4:	bf 90       	pop	r11
     ec6:	af 90       	pop	r10
     ec8:	08 95       	ret

00000eca <Endpoint_Read_Stream_LE>:
     eca:	af 92       	push	r10
     ecc:	bf 92       	push	r11
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
     ece:	cf 92       	push	r12
     ed0:	df 92       	push	r13
     ed2:	ef 92       	push	r14
     ed4:	ff 92       	push	r15
     ed6:	1f 93       	push	r17
     ed8:	cf 93       	push	r28
     eda:	df 93       	push	r29
     edc:	ec 01       	movw	r28, r24
     ede:	7b 01       	movw	r14, r22
     ee0:	6a 01       	movw	r12, r20
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	uint16_t BytesInTransfer = 0;
	uint8_t  ErrorCode;

	if ((ErrorCode = Endpoint_WaitUntilReady()))
     ee2:	d6 d1       	rcall	.+940    	; 0x1290 <Endpoint_WaitUntilReady>
     ee4:	18 2f       	mov	r17, r24
     ee6:	88 23       	and	r24, r24
     ee8:	a1 f5       	brne	.+104    	; 0xf52 <Endpoint_Read_Stream_LE+0x88>
     eea:	c1 14       	cp	r12, r1
	  return ErrorCode;

	if (BytesProcessed != NULL)
     eec:	d1 04       	cpc	r13, r1
     eee:	39 f0       	breq	.+14     	; 0xefe <Endpoint_Read_Stream_LE+0x34>
     ef0:	f6 01       	movw	r30, r12
	{
		Length -= *BytesProcessed;
     ef2:	20 81       	ld	r18, Z
     ef4:	31 81       	ldd	r19, Z+1	; 0x01
     ef6:	e2 1a       	sub	r14, r18
     ef8:	f3 0a       	sbc	r15, r19
     efa:	c2 0f       	add	r28, r18
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
     efc:	d3 1f       	adc	r29, r19
     efe:	aa 24       	eor	r10, r10

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
     f00:	bb 24       	eor	r11, r11
     f02:	22 c0       	rjmp	.+68     	; 0xf48 <Endpoint_Read_Stream_LE+0x7e>
     f04:	80 91 e8 00 	lds	r24, 0x00E8
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
     f08:	85 fd       	sbrc	r24, 5
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
	{
		if (!(Endpoint_IsReadWriteAllowed()))
     f0a:	15 c0       	rjmp	.+42     	; 0xf36 <Endpoint_Read_Stream_LE+0x6c>
     f0c:	80 91 e8 00 	lds	r24, 0x00E8
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     f10:	8b 77       	andi	r24, 0x7B	; 123
     f12:	80 93 e8 00 	sts	0x00E8, r24
     f16:	c1 14       	cp	r12, r1

			#if !defined(INTERRUPT_CONTROL_ENDPOINT)
			USB_USBTask();
			#endif

			if (BytesProcessed != NULL)
     f18:	d1 04       	cpc	r13, r1
     f1a:	49 f0       	breq	.+18     	; 0xf2e <Endpoint_Read_Stream_LE+0x64>
     f1c:	f6 01       	movw	r30, r12
			{
				*BytesProcessed += BytesInTransfer;
     f1e:	80 81       	ld	r24, Z
     f20:	91 81       	ldd	r25, Z+1	; 0x01
     f22:	8a 0d       	add	r24, r10
     f24:	9b 1d       	adc	r25, r11
     f26:	91 83       	std	Z+1, r25	; 0x01
     f28:	80 83       	st	Z, r24
     f2a:	15 e0       	ldi	r17, 0x05	; 5
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
     f2c:	12 c0       	rjmp	.+36     	; 0xf52 <Endpoint_Read_Stream_LE+0x88>
     f2e:	b0 d1       	rcall	.+864    	; 0x1290 <Endpoint_WaitUntilReady>
			}

			if ((ErrorCode = Endpoint_WaitUntilReady()))
     f30:	88 23       	and	r24, r24
     f32:	51 f0       	breq	.+20     	; 0xf48 <Endpoint_Read_Stream_LE+0x7e>
     f34:	0d c0       	rjmp	.+26     	; 0xf50 <Endpoint_Read_Stream_LE+0x86>
     f36:	80 91 f1 00 	lds	r24, 0x00F1
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
     f3a:	89 93       	st	Y+, r24
     f3c:	08 94       	sec
			  return ErrorCode;
		}
		else
		{
			TEMPLATE_TRANSFER_BYTE(DataStream);
     f3e:	e1 08       	sbc	r14, r1
			TEMPLATE_BUFFER_MOVE(DataStream, 1);
			Length--;
     f40:	f1 08       	sbc	r15, r1
     f42:	08 94       	sec
     f44:	a1 1c       	adc	r10, r1
			BytesInTransfer++;
     f46:	b1 1c       	adc	r11, r1
     f48:	e1 14       	cp	r14, r1
     f4a:	f1 04       	cpc	r15, r1
	{
		Length -= *BytesProcessed;
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
     f4c:	d9 f6       	brne	.-74     	; 0xf04 <Endpoint_Read_Stream_LE+0x3a>
     f4e:	01 c0       	rjmp	.+2      	; 0xf52 <Endpoint_Read_Stream_LE+0x88>
     f50:	18 2f       	mov	r17, r24
     f52:	81 2f       	mov	r24, r17
			{
				*BytesProcessed += BytesInTransfer;
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
			}

			if ((ErrorCode = Endpoint_WaitUntilReady()))
     f54:	df 91       	pop	r29
			BytesInTransfer++;
		}
	}

	return ENDPOINT_RWSTREAM_NoError;
}
     f56:	cf 91       	pop	r28
     f58:	1f 91       	pop	r17
     f5a:	ff 90       	pop	r15
     f5c:	ef 90       	pop	r14
     f5e:	df 90       	pop	r13
     f60:	cf 90       	pop	r12
     f62:	bf 90       	pop	r11
     f64:	af 90       	pop	r10
     f66:	08 95       	ret

00000f68 <Endpoint_Write_Control_Stream_LE>:
     f68:	20 91 a3 01 	lds	r18, 0x01A3
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
     f6c:	30 91 a4 01 	lds	r19, 0x01A4
     f70:	26 17       	cp	r18, r22
     f72:	37 07       	cpc	r19, r23
     f74:	20 f4       	brcc	.+8      	; 0xf7e <Endpoint_Write_Control_Stream_LE+0x16>
     f76:	b9 01       	movw	r22, r18
     f78:	fc 01       	movw	r30, r24
     f7a:	20 e0       	ldi	r18, 0x00	; 0
     f7c:	37 c0       	rjmp	.+110    	; 0xfec <Endpoint_Write_Control_Stream_LE+0x84>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
     f7e:	61 15       	cp	r22, r1
     f80:	71 05       	cpc	r23, r1
     f82:	d1 f7       	brne	.-12     	; 0xf78 <Endpoint_Write_Control_Stream_LE+0x10>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     f84:	20 91 e8 00 	lds	r18, 0x00E8
     f88:	2e 77       	andi	r18, 0x7E	; 126
     f8a:	20 93 e8 00 	sts	0x00E8, r18
     f8e:	f4 cf       	rjmp	.-24     	; 0xf78 <Endpoint_Write_Control_Stream_LE+0x10>
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     f90:	80 91 9c 01 	lds	r24, 0x019C

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     f94:	88 23       	and	r24, r24
     f96:	09 f4       	brne	.+2      	; 0xf9a <Endpoint_Write_Control_Stream_LE+0x32>
     f98:	3f c0       	rjmp	.+126    	; 0x1018 <Endpoint_Write_Control_Stream_LE+0xb0>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     f9a:	85 30       	cpi	r24, 0x05	; 5
     f9c:	c9 f1       	breq	.+114    	; 0x1010 <Endpoint_Write_Control_Stream_LE+0xa8>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     f9e:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
     fa2:	83 fd       	sbrc	r24, 3
     fa4:	37 c0       	rjmp	.+110    	; 0x1014 <Endpoint_Write_Control_Stream_LE+0xac>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     fa6:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
     faa:	82 fd       	sbrc	r24, 2
     fac:	2b c0       	rjmp	.+86     	; 0x1004 <Endpoint_Write_Control_Stream_LE+0x9c>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     fae:	80 91 e8 00 	lds	r24, 0x00E8
		  break;

		if (Endpoint_IsINReady())
     fb2:	80 ff       	sbrs	r24, 0
     fb4:	1b c0       	rjmp	.+54     	; 0xfec <Endpoint_Write_Control_Stream_LE+0x84>
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
     fb6:	80 91 f2 00 	lds	r24, 0x00F2
     fba:	90 91 f3 00 	lds	r25, 0x00F3
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
     fbe:	06 c0       	rjmp	.+12     	; 0xfcc <Endpoint_Write_Control_Stream_LE+0x64>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
     fc0:	21 91       	ld	r18, Z+
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     fc2:	20 93 f1 00 	sts	0x00F1, r18
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
     fc6:	61 50       	subi	r22, 0x01	; 1
     fc8:	70 40       	sbci	r23, 0x00	; 0
				BytesInEndpoint++;
     fca:	01 96       	adiw	r24, 0x01	; 1

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
     fcc:	61 15       	cp	r22, r1
     fce:	71 05       	cpc	r23, r1
     fd0:	19 f0       	breq	.+6      	; 0xfd8 <Endpoint_Write_Control_Stream_LE+0x70>
     fd2:	88 30       	cpi	r24, 0x08	; 8
     fd4:	91 05       	cpc	r25, r1
     fd6:	a0 f3       	brcs	.-24     	; 0xfc0 <Endpoint_Write_Control_Stream_LE+0x58>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
     fd8:	21 e0       	ldi	r18, 0x01	; 1
     fda:	88 30       	cpi	r24, 0x08	; 8
     fdc:	91 05       	cpc	r25, r1
     fde:	09 f0       	breq	.+2      	; 0xfe2 <Endpoint_Write_Control_Stream_LE+0x7a>
     fe0:	20 e0       	ldi	r18, 0x00	; 0
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     fe2:	80 91 e8 00 	lds	r24, 0x00E8
     fe6:	8e 77       	andi	r24, 0x7E	; 126
     fe8:	80 93 e8 00 	sts	0x00E8, r24
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
     fec:	61 15       	cp	r22, r1
     fee:	71 05       	cpc	r23, r1
     ff0:	79 f6       	brne	.-98     	; 0xf90 <Endpoint_Write_Control_Stream_LE+0x28>
     ff2:	22 23       	and	r18, r18
     ff4:	69 f6       	brne	.-102    	; 0xf90 <Endpoint_Write_Control_Stream_LE+0x28>
     ff6:	06 c0       	rjmp	.+12     	; 0x1004 <Endpoint_Write_Control_Stream_LE+0x9c>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     ff8:	80 91 9c 01 	lds	r24, 0x019C

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     ffc:	88 23       	and	r24, r24
     ffe:	61 f0       	breq	.+24     	; 0x1018 <Endpoint_Write_Control_Stream_LE+0xb0>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    1000:	85 30       	cpi	r24, 0x05	; 5
    1002:	61 f0       	breq	.+24     	; 0x101c <Endpoint_Write_Control_Stream_LE+0xb4>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    1004:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
    1008:	82 ff       	sbrs	r24, 2
    100a:	f6 cf       	rjmp	.-20     	; 0xff8 <Endpoint_Write_Control_Stream_LE+0x90>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
    100c:	80 e0       	ldi	r24, 0x00	; 0
    100e:	08 95       	ret
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
    1010:	83 e0       	ldi	r24, 0x03	; 3
    1012:	08 95       	ret
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
    1014:	81 e0       	ldi	r24, 0x01	; 1
    1016:	08 95       	ret
	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
    1018:	82 e0       	ldi	r24, 0x02	; 2
    101a:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
    101c:	83 e0       	ldi	r24, 0x03	; 3
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
    101e:	08 95       	ret

00001020 <Endpoint_Read_Control_Stream_LE>:
uint8_t TEMPLATE_FUNC_NAME (void* const Buffer,
                            uint16_t Length)
{
	uint8_t* DataStream = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));

	if (!(Length))
    1020:	61 15       	cp	r22, r1
    1022:	71 05       	cpc	r23, r1
    1024:	29 f4       	brne	.+10     	; 0x1030 <Endpoint_Read_Control_Stream_LE+0x10>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    1026:	20 91 e8 00 	lds	r18, 0x00E8
    102a:	2b 77       	andi	r18, 0x7B	; 123
    102c:	20 93 e8 00 	sts	0x00E8, r18

#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (void* const Buffer,
                            uint16_t Length)
{
    1030:	38 2f       	mov	r19, r24
    1032:	29 2f       	mov	r18, r25
    1034:	26 c0       	rjmp	.+76     	; 0x1082 <Endpoint_Read_Control_Stream_LE+0x62>
	if (!(Length))
	  Endpoint_ClearOUT();

	while (Length)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    1036:	80 91 9c 01 	lds	r24, 0x019C

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    103a:	88 23       	and	r24, r24
    103c:	b1 f1       	breq	.+108    	; 0x10aa <Endpoint_Read_Control_Stream_LE+0x8a>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    103e:	85 30       	cpi	r24, 0x05	; 5
    1040:	81 f1       	breq	.+96     	; 0x10a2 <Endpoint_Read_Control_Stream_LE+0x82>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    1042:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    1046:	83 fd       	sbrc	r24, 3
    1048:	2e c0       	rjmp	.+92     	; 0x10a6 <Endpoint_Read_Control_Stream_LE+0x86>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    104a:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;

		if (Endpoint_IsOUTReceived())
    104e:	82 ff       	sbrs	r24, 2
    1050:	f2 cf       	rjmp	.-28     	; 0x1036 <Endpoint_Read_Control_Stream_LE+0x16>
    1052:	e3 2f       	mov	r30, r19
    1054:	f2 2f       	mov	r31, r18
    1056:	08 c0       	rjmp	.+16     	; 0x1068 <Endpoint_Read_Control_Stream_LE+0x48>
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    1058:	80 91 f1 00 	lds	r24, 0x00F1
		{
			while (Length && Endpoint_BytesInEndpoint())
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
    105c:	81 93       	st	Z+, r24
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
    105e:	3e 2f       	mov	r19, r30
    1060:	2f 2f       	mov	r18, r31
				Length--;
    1062:	61 50       	subi	r22, 0x01	; 1
    1064:	70 40       	sbci	r23, 0x00	; 0
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;

		if (Endpoint_IsOUTReceived())
		{
			while (Length && Endpoint_BytesInEndpoint())
    1066:	41 f0       	breq	.+16     	; 0x1078 <Endpoint_Read_Control_Stream_LE+0x58>
    1068:	3e 2f       	mov	r19, r30
    106a:	2f 2f       	mov	r18, r31
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
    106c:	80 91 f2 00 	lds	r24, 0x00F2
    1070:	90 91 f3 00 	lds	r25, 0x00F3
    1074:	00 97       	sbiw	r24, 0x00	; 0
    1076:	81 f7       	brne	.-32     	; 0x1058 <Endpoint_Read_Control_Stream_LE+0x38>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    1078:	80 91 e8 00 	lds	r24, 0x00E8
    107c:	8b 77       	andi	r24, 0x7B	; 123
    107e:	80 93 e8 00 	sts	0x00E8, r24
	uint8_t* DataStream = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));

	if (!(Length))
	  Endpoint_ClearOUT();

	while (Length)
    1082:	61 15       	cp	r22, r1
    1084:	71 05       	cpc	r23, r1
    1086:	b9 f6       	brne	.-82     	; 0x1036 <Endpoint_Read_Control_Stream_LE+0x16>
    1088:	06 c0       	rjmp	.+12     	; 0x1096 <Endpoint_Read_Control_Stream_LE+0x76>
		}
	}

	while (!(Endpoint_IsINReady()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    108a:	80 91 9c 01 	lds	r24, 0x019C

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    108e:	88 23       	and	r24, r24
    1090:	61 f0       	breq	.+24     	; 0x10aa <Endpoint_Read_Control_Stream_LE+0x8a>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    1092:	85 30       	cpi	r24, 0x05	; 5
    1094:	61 f0       	breq	.+24     	; 0x10ae <Endpoint_Read_Control_Stream_LE+0x8e>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1096:	80 91 e8 00 	lds	r24, 0x00E8

			Endpoint_ClearOUT();
		}
	}

	while (!(Endpoint_IsINReady()))
    109a:	80 ff       	sbrs	r24, 0
    109c:	f6 cf       	rjmp	.-20     	; 0x108a <Endpoint_Read_Control_Stream_LE+0x6a>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
    109e:	80 e0       	ldi	r24, 0x00	; 0
    10a0:	08 95       	ret
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
    10a2:	83 e0       	ldi	r24, 0x03	; 3
    10a4:	08 95       	ret
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
    10a6:	81 e0       	ldi	r24, 0x01	; 1
    10a8:	08 95       	ret
	while (!(Endpoint_IsINReady()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
    10aa:	82 e0       	ldi	r24, 0x02	; 2
    10ac:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
    10ae:	83 e0       	ldi	r24, 0x03	; 3
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
    10b0:	08 95       	ret

000010b2 <Endpoint_Write_Control_PStream_LE>:
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
    10b2:	20 91 a3 01 	lds	r18, 0x01A3
    10b6:	30 91 a4 01 	lds	r19, 0x01A4
    10ba:	26 17       	cp	r18, r22
    10bc:	37 07       	cpc	r19, r23
    10be:	20 f4       	brcc	.+8      	; 0x10c8 <Endpoint_Write_Control_PStream_LE+0x16>
    10c0:	b9 01       	movw	r22, r18
    10c2:	fc 01       	movw	r30, r24
    10c4:	20 e0       	ldi	r18, 0x00	; 0
    10c6:	38 c0       	rjmp	.+112    	; 0x1138 <Endpoint_Write_Control_PStream_LE+0x86>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
    10c8:	61 15       	cp	r22, r1
    10ca:	71 05       	cpc	r23, r1
    10cc:	d1 f7       	brne	.-12     	; 0x10c2 <Endpoint_Write_Control_PStream_LE+0x10>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    10ce:	20 91 e8 00 	lds	r18, 0x00E8
    10d2:	2e 77       	andi	r18, 0x7E	; 126
    10d4:	20 93 e8 00 	sts	0x00E8, r18
    10d8:	f4 cf       	rjmp	.-24     	; 0x10c2 <Endpoint_Write_Control_PStream_LE+0x10>
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    10da:	80 91 9c 01 	lds	r24, 0x019C

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    10de:	88 23       	and	r24, r24
    10e0:	09 f4       	brne	.+2      	; 0x10e4 <Endpoint_Write_Control_PStream_LE+0x32>
    10e2:	40 c0       	rjmp	.+128    	; 0x1164 <Endpoint_Write_Control_PStream_LE+0xb2>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    10e4:	85 30       	cpi	r24, 0x05	; 5
    10e6:	d1 f1       	breq	.+116    	; 0x115c <Endpoint_Write_Control_PStream_LE+0xaa>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    10e8:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    10ec:	83 fd       	sbrc	r24, 3
    10ee:	38 c0       	rjmp	.+112    	; 0x1160 <Endpoint_Write_Control_PStream_LE+0xae>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    10f0:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
    10f4:	82 fd       	sbrc	r24, 2
    10f6:	2c c0       	rjmp	.+88     	; 0x1150 <Endpoint_Write_Control_PStream_LE+0x9e>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    10f8:	80 91 e8 00 	lds	r24, 0x00E8
		  break;

		if (Endpoint_IsINReady())
    10fc:	80 ff       	sbrs	r24, 0
    10fe:	1c c0       	rjmp	.+56     	; 0x1138 <Endpoint_Write_Control_PStream_LE+0x86>
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
    1100:	80 91 f2 00 	lds	r24, 0x00F2
    1104:	90 91 f3 00 	lds	r25, 0x00F3
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
    1108:	07 c0       	rjmp	.+14     	; 0x1118 <Endpoint_Write_Control_PStream_LE+0x66>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
    110a:	24 91       	lpm	r18, Z
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    110c:	20 93 f1 00 	sts	0x00F1, r18
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
    1110:	31 96       	adiw	r30, 0x01	; 1
				Length--;
    1112:	61 50       	subi	r22, 0x01	; 1
    1114:	70 40       	sbci	r23, 0x00	; 0
				BytesInEndpoint++;
    1116:	01 96       	adiw	r24, 0x01	; 1

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
    1118:	61 15       	cp	r22, r1
    111a:	71 05       	cpc	r23, r1
    111c:	19 f0       	breq	.+6      	; 0x1124 <Endpoint_Write_Control_PStream_LE+0x72>
    111e:	88 30       	cpi	r24, 0x08	; 8
    1120:	91 05       	cpc	r25, r1
    1122:	98 f3       	brcs	.-26     	; 0x110a <Endpoint_Write_Control_PStream_LE+0x58>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
    1124:	21 e0       	ldi	r18, 0x01	; 1
    1126:	88 30       	cpi	r24, 0x08	; 8
    1128:	91 05       	cpc	r25, r1
    112a:	09 f0       	breq	.+2      	; 0x112e <Endpoint_Write_Control_PStream_LE+0x7c>
    112c:	20 e0       	ldi	r18, 0x00	; 0
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    112e:	80 91 e8 00 	lds	r24, 0x00E8
    1132:	8e 77       	andi	r24, 0x7E	; 126
    1134:	80 93 e8 00 	sts	0x00E8, r24
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
    1138:	61 15       	cp	r22, r1
    113a:	71 05       	cpc	r23, r1
    113c:	71 f6       	brne	.-100    	; 0x10da <Endpoint_Write_Control_PStream_LE+0x28>
    113e:	22 23       	and	r18, r18
    1140:	61 f6       	brne	.-104    	; 0x10da <Endpoint_Write_Control_PStream_LE+0x28>
    1142:	06 c0       	rjmp	.+12     	; 0x1150 <Endpoint_Write_Control_PStream_LE+0x9e>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    1144:	80 91 9c 01 	lds	r24, 0x019C

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    1148:	88 23       	and	r24, r24
    114a:	61 f0       	breq	.+24     	; 0x1164 <Endpoint_Write_Control_PStream_LE+0xb2>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    114c:	85 30       	cpi	r24, 0x05	; 5
    114e:	61 f0       	breq	.+24     	; 0x1168 <Endpoint_Write_Control_PStream_LE+0xb6>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    1150:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
    1154:	82 ff       	sbrs	r24, 2
    1156:	f6 cf       	rjmp	.-20     	; 0x1144 <Endpoint_Write_Control_PStream_LE+0x92>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
    1158:	80 e0       	ldi	r24, 0x00	; 0
    115a:	08 95       	ret
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
    115c:	83 e0       	ldi	r24, 0x03	; 3
    115e:	08 95       	ret
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
    1160:	81 e0       	ldi	r24, 0x01	; 1
    1162:	08 95       	ret
	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
    1164:	82 e0       	ldi	r24, 0x02	; 2
    1166:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
    1168:	83 e0       	ldi	r24, 0x03	; 3
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
    116a:	08 95       	ret

0000116c <Endpoint_ConfigureEndpoint_Prv>:
	UECFG0X = UECFG0XData;
	UECFG1X = UECFG1XData;

	return Endpoint_IsConfigured();
#else
	for (uint8_t EPNum = Number; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
    116c:	98 2f       	mov	r25, r24
    116e:	2a c0       	rjmp	.+84     	; 0x11c4 <Endpoint_ConfigureEndpoint_Prv+0x58>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1170:	90 93 e9 00 	sts	0x00E9, r25
		uint8_t UECFG1XTemp;
		uint8_t UEIENXTemp;

		Endpoint_SelectEndpoint(EPNum);

		if (EPNum == Number)
    1174:	98 17       	cp	r25, r24
    1176:	39 f0       	breq	.+14     	; 0x1186 <Endpoint_ConfigureEndpoint_Prv+0x1a>
			UECFG1XTemp = UECFG1XData;
			UEIENXTemp  = 0;
		}
		else
		{
			UECFG0XTemp = UECFG0X;
    1178:	70 91 ec 00 	lds	r23, 0x00EC
			UECFG1XTemp = UECFG1X;
    117c:	20 91 ed 00 	lds	r18, 0x00ED
			UEIENXTemp  = UEIENX;
    1180:	50 91 f0 00 	lds	r21, 0x00F0
    1184:	03 c0       	rjmp	.+6      	; 0x118c <Endpoint_ConfigureEndpoint_Prv+0x20>
		Endpoint_SelectEndpoint(EPNum);

		if (EPNum == Number)
		{
			UECFG0XTemp = UECFG0XData;
			UECFG1XTemp = UECFG1XData;
    1186:	24 2f       	mov	r18, r20

		Endpoint_SelectEndpoint(EPNum);

		if (EPNum == Number)
		{
			UECFG0XTemp = UECFG0XData;
    1188:	76 2f       	mov	r23, r22
			UECFG1XTemp = UECFG1XData;
			UEIENXTemp  = 0;
    118a:	50 e0       	ldi	r21, 0x00	; 0
			UECFG0XTemp = UECFG0X;
			UECFG1XTemp = UECFG1X;
			UEIENXTemp  = UEIENX;
		}

		if (!(UECFG1XTemp & (1 << ALLOC)))
    118c:	21 ff       	sbrs	r18, 1
    118e:	19 c0       	rjmp	.+50     	; 0x11c2 <Endpoint_ConfigureEndpoint_Prv+0x56>
			 *  to and from a host.
			 */
			static inline void Endpoint_DisableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_DisableEndpoint(void)
			{
				UECONX &= ~(1 << EPEN);
    1190:	30 91 eb 00 	lds	r19, 0x00EB
    1194:	3e 7f       	andi	r19, 0xFE	; 254
    1196:	30 93 eb 00 	sts	0x00EB, r19
		  continue;

		Endpoint_DisableEndpoint();
		UECFG1X &= ~(1 << ALLOC);
    119a:	30 91 ed 00 	lds	r19, 0x00ED
    119e:	3d 7f       	andi	r19, 0xFD	; 253
    11a0:	30 93 ed 00 	sts	0x00ED, r19
			 *  \note Endpoints must first be configured properly via \ref Endpoint_ConfigureEndpoint().
			 */
			static inline void Endpoint_EnableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_EnableEndpoint(void)
			{
				UECONX |= (1 << EPEN);
    11a4:	30 91 eb 00 	lds	r19, 0x00EB
    11a8:	31 60       	ori	r19, 0x01	; 1
    11aa:	30 93 eb 00 	sts	0x00EB, r19

		Endpoint_EnableEndpoint();
		UECFG0X = UECFG0XTemp;
    11ae:	70 93 ec 00 	sts	0x00EC, r23
		UECFG1X = UECFG1XTemp;
    11b2:	20 93 ed 00 	sts	0x00ED, r18
		UEIENX  = UEIENXTemp;
    11b6:	50 93 f0 00 	sts	0x00F0, r21
			 *  \return Boolean \c true if the currently selected endpoint has been configured, \c false otherwise.
			 */
			static inline bool Endpoint_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsConfigured(void)
			{
				return ((UESTA0X & (1 << CFGOK)) ? true : false);
    11ba:	20 91 ee 00 	lds	r18, 0x00EE

		if (!(Endpoint_IsConfigured()))
    11be:	27 ff       	sbrs	r18, 7
    11c0:	08 c0       	rjmp	.+16     	; 0x11d2 <Endpoint_ConfigureEndpoint_Prv+0x66>
	UECFG0X = UECFG0XData;
	UECFG1X = UECFG1XData;

	return Endpoint_IsConfigured();
#else
	for (uint8_t EPNum = Number; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
    11c2:	9f 5f       	subi	r25, 0xFF	; 255
    11c4:	97 30       	cpi	r25, 0x07	; 7
    11c6:	a0 f2       	brcs	.-88     	; 0x1170 <Endpoint_ConfigureEndpoint_Prv+0x4>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    11c8:	8f 70       	andi	r24, 0x0F	; 15
    11ca:	80 93 e9 00 	sts	0x00E9, r24
		if (!(Endpoint_IsConfigured()))
		  return false;
	}

	Endpoint_SelectEndpoint(Number);
	return true;
    11ce:	81 e0       	ldi	r24, 0x01	; 1
    11d0:	08 95       	ret
		UECFG0X = UECFG0XTemp;
		UECFG1X = UECFG1XTemp;
		UEIENX  = UEIENXTemp;

		if (!(Endpoint_IsConfigured()))
		  return false;
    11d2:	80 e0       	ldi	r24, 0x00	; 0
	}

	Endpoint_SelectEndpoint(Number);
	return true;
#endif
}
    11d4:	08 95       	ret

000011d6 <Endpoint_ConfigureEndpointTable>:
uint8_t USB_Device_ControlEndpointSize = ENDPOINT_CONTROLEP_DEFAULT_SIZE;
#endif

bool Endpoint_ConfigureEndpointTable(const USB_Endpoint_Table_t* const Table,
                                     const uint8_t Entries)
{
    11d6:	0f 93       	push	r16
    11d8:	1f 93       	push	r17
    11da:	cf 93       	push	r28
    11dc:	df 93       	push	r29
    11de:	16 2f       	mov	r17, r22
	{
		if (!(Table[i].Address))
		  continue;
	
		if (!(Endpoint_ConfigureEndpoint(Table[i].Address, Table[i].Type, Table[i].Size, Table[i].Banks)))
		  return false;
    11e0:	ec 01       	movw	r28, r24
#endif

bool Endpoint_ConfigureEndpointTable(const USB_Endpoint_Table_t* const Table,
                                     const uint8_t Entries)
{
	for (uint8_t i = 0; i < Entries; i++)
    11e2:	00 e0       	ldi	r16, 0x00	; 0
    11e4:	2a c0       	rjmp	.+84     	; 0x123a <Endpoint_ConfigureEndpointTable+0x64>
	{
		if (!(Table[i].Address))
    11e6:	98 81       	ld	r25, Y
    11e8:	99 23       	and	r25, r25
    11ea:	29 f1       	breq	.+74     	; 0x1236 <Endpoint_ConfigureEndpointTable+0x60>
		  continue;
	
		if (!(Endpoint_ConfigureEndpoint(Table[i].Address, Table[i].Type, Table[i].Size, Table[i].Banks)))
    11ec:	6b 81       	ldd	r22, Y+3	; 0x03
    11ee:	e9 81       	ldd	r30, Y+1	; 0x01
    11f0:	fa 81       	ldd	r31, Y+2	; 0x02
    11f2:	2c 81       	ldd	r18, Y+4	; 0x04
			static inline bool Endpoint_ConfigureEndpoint(const uint8_t Address,
			                                              const uint8_t Type,
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);
    11f4:	89 2f       	mov	r24, r25
    11f6:	8f 70       	andi	r24, 0x0F	; 15

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
    11f8:	87 30       	cpi	r24, 0x07	; 7
    11fa:	18 f5       	brcc	.+70     	; 0x1242 <Endpoint_ConfigureEndpointTable+0x6c>
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
				                                      ((Type << EPTYPE0) | ((Address & ENDPOINT_DIR_IN) ? (1 << EPDIR) : 0)),
    11fc:	62 95       	swap	r22
    11fe:	66 0f       	add	r22, r22
    1200:	66 0f       	add	r22, r22
    1202:	60 7c       	andi	r22, 0xC0	; 192
    1204:	99 1f       	adc	r25, r25
    1206:	99 27       	eor	r25, r25
    1208:	99 1f       	adc	r25, r25
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
    120a:	69 2b       	or	r22, r25
    120c:	22 30       	cpi	r18, 0x02	; 2
    120e:	10 f0       	brcs	.+4      	; 0x1214 <Endpoint_ConfigureEndpointTable+0x3e>
    1210:	96 e0       	ldi	r25, 0x06	; 6
    1212:	01 c0       	rjmp	.+2      	; 0x1216 <Endpoint_ConfigureEndpointTable+0x40>
    1214:	92 e0       	ldi	r25, 0x02	; 2
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes) ATTR_WARN_UNUSED_RESULT ATTR_CONST
			                                                                       ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;
    1216:	28 e0       	ldi	r18, 0x08	; 8
    1218:	30 e0       	ldi	r19, 0x00	; 0
		/* Inline Functions: */
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes) ATTR_WARN_UNUSED_RESULT ATTR_CONST
			                                                                       ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
    121a:	40 e0       	ldi	r20, 0x00	; 0
    121c:	03 c0       	rjmp	.+6      	; 0x1224 <Endpoint_ConfigureEndpointTable+0x4e>
				uint16_t CheckBytes = 8;

				while (CheckBytes < Bytes)
				{
					MaskVal++;
    121e:	4f 5f       	subi	r20, 0xFF	; 255
					CheckBytes <<= 1;
    1220:	22 0f       	add	r18, r18
    1222:	33 1f       	adc	r19, r19
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while (CheckBytes < Bytes)
    1224:	2e 17       	cp	r18, r30
    1226:	3f 07       	cpc	r19, r31
    1228:	d0 f3       	brcs	.-12     	; 0x121e <Endpoint_ConfigureEndpointTable+0x48>
				{
					MaskVal++;
					CheckBytes <<= 1;
				}

				return (MaskVal << EPSIZE0);
    122a:	42 95       	swap	r20
    122c:	40 7f       	andi	r20, 0xF0	; 240
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
    122e:	49 2b       	or	r20, r25
    1230:	9d df       	rcall	.-198    	; 0x116c <Endpoint_ConfigureEndpoint_Prv>
    1232:	88 23       	and	r24, r24
    1234:	31 f0       	breq	.+12     	; 0x1242 <Endpoint_ConfigureEndpointTable+0x6c>
    1236:	0f 5f       	subi	r16, 0xFF	; 255
#endif

bool Endpoint_ConfigureEndpointTable(const USB_Endpoint_Table_t* const Table,
                                     const uint8_t Entries)
{
	for (uint8_t i = 0; i < Entries; i++)
    1238:	25 96       	adiw	r28, 0x05	; 5
    123a:	01 17       	cp	r16, r17
    123c:	a1 f6       	brne	.-88     	; 0x11e6 <Endpoint_ConfigureEndpointTable+0x10>
    123e:	81 e0       	ldi	r24, 0x01	; 1
	
		if (!(Endpoint_ConfigureEndpoint(Table[i].Address, Table[i].Type, Table[i].Size, Table[i].Banks)))
		  return false;
	}
	
	return true;
    1240:	01 c0       	rjmp	.+2      	; 0x1244 <Endpoint_ConfigureEndpointTable+0x6e>
    1242:	80 e0       	ldi	r24, 0x00	; 0
	{
		if (!(Table[i].Address))
		  continue;
	
		if (!(Endpoint_ConfigureEndpoint(Table[i].Address, Table[i].Type, Table[i].Size, Table[i].Banks)))
		  return false;
    1244:	df 91       	pop	r29
	}
	
	return true;
}
    1246:	cf 91       	pop	r28
    1248:	1f 91       	pop	r17
    124a:	0f 91       	pop	r16
    124c:	08 95       	ret

0000124e <Endpoint_ClearStatusStage>:
    124e:	80 91 9d 01 	lds	r24, 0x019D
	}
}

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
    1252:	87 ff       	sbrs	r24, 7
    1254:	13 c0       	rjmp	.+38     	; 0x127c <Endpoint_ClearStatusStage+0x2e>
    1256:	04 c0       	rjmp	.+8      	; 0x1260 <Endpoint_ClearStatusStage+0x12>
	{
		while (!(Endpoint_IsOUTReceived()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
    1258:	80 91 9c 01 	lds	r24, 0x019C
    125c:	88 23       	and	r24, r24
    125e:	b9 f0       	breq	.+46     	; 0x128e <Endpoint_ClearStatusStage+0x40>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    1260:	80 91 e8 00 	lds	r24, 0x00E8

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
	{
		while (!(Endpoint_IsOUTReceived()))
    1264:	82 ff       	sbrs	r24, 2
    1266:	f8 cf       	rjmp	.-16     	; 0x1258 <Endpoint_ClearStatusStage+0xa>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    1268:	80 91 e8 00 	lds	r24, 0x00E8
    126c:	8b 77       	andi	r24, 0x7B	; 123
    126e:	80 93 e8 00 	sts	0x00E8, r24
    1272:	08 95       	ret
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
    1274:	80 91 9c 01 	lds	r24, 0x019C
    1278:	88 23       	and	r24, r24
    127a:	49 f0       	breq	.+18     	; 0x128e <Endpoint_ClearStatusStage+0x40>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    127c:	80 91 e8 00 	lds	r24, 0x00E8

		Endpoint_ClearOUT();
	}
	else
	{
		while (!(Endpoint_IsINReady()))
    1280:	80 ff       	sbrs	r24, 0
    1282:	f8 cf       	rjmp	.-16     	; 0x1274 <Endpoint_ClearStatusStage+0x26>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1284:	80 91 e8 00 	lds	r24, 0x00E8
    1288:	8e 77       	andi	r24, 0x7E	; 126
    128a:	80 93 e8 00 	sts	0x00E8, r24
    128e:	08 95       	ret

00001290 <Endpoint_WaitUntilReady>:
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
    1290:	80 91 e4 00 	lds	r24, 0x00E4
    1294:	90 91 e5 00 	lds	r25, 0x00E5
    1298:	45 e6       	ldi	r20, 0x65	; 101
    129a:	01 c0       	rjmp	.+2      	; 0x129e <Endpoint_WaitUntilReady+0xe>
    129c:	c9 01       	movw	r24, r18
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    129e:	20 91 ec 00 	lds	r18, 0x00EC
    12a2:	20 ff       	sbrs	r18, 0
    12a4:	23 c0       	rjmp	.+70     	; 0x12ec <Endpoint_WaitUntilReady+0x5c>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    12a6:	20 91 e8 00 	lds	r18, 0x00E8

	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
    12aa:	20 fd       	sbrc	r18, 0
    12ac:	15 c0       	rjmp	.+42     	; 0x12d8 <Endpoint_WaitUntilReady+0x48>
		{
			if (Endpoint_IsOUTReceived())
			  return ENDPOINT_READYWAIT_NoError;
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    12ae:	20 91 9c 01 	lds	r18, 0x019C

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    12b2:	22 23       	and	r18, r18
    12b4:	99 f0       	breq	.+38     	; 0x12dc <Endpoint_WaitUntilReady+0x4c>
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    12b6:	25 30       	cpi	r18, 0x05	; 5
    12b8:	99 f0       	breq	.+38     	; 0x12e0 <Endpoint_WaitUntilReady+0x50>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    12ba:	20 91 eb 00 	lds	r18, 0x00EB
		  return ENDPOINT_READYWAIT_BusSuspended;
		else if (Endpoint_IsStalled())
    12be:	25 fd       	sbrc	r18, 5
    12c0:	11 c0       	rjmp	.+34     	; 0x12e4 <Endpoint_WaitUntilReady+0x54>
    12c2:	20 91 e4 00 	lds	r18, 0x00E4
    12c6:	30 91 e5 00 	lds	r19, 0x00E5
		  return ENDPOINT_READYWAIT_EndpointStalled;

		uint16_t CurrentFrameNumber = USB_Device_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
    12ca:	28 17       	cp	r18, r24
    12cc:	39 07       	cpc	r19, r25
    12ce:	39 f3       	breq	.-50     	; 0x129e <Endpoint_WaitUntilReady+0xe>
    12d0:	41 50       	subi	r20, 0x01	; 1
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
    12d2:	21 f7       	brne	.-56     	; 0x129c <Endpoint_WaitUntilReady+0xc>
			  return ENDPOINT_READYWAIT_Timeout;
    12d4:	84 e0       	ldi	r24, 0x04	; 4
    12d6:	08 95       	ret
	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
    12d8:	80 e0       	ldi	r24, 0x00	; 0
    12da:	08 95       	ret
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
    12dc:	82 e0       	ldi	r24, 0x02	; 2
    12de:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_READYWAIT_BusSuspended;
    12e0:	83 e0       	ldi	r24, 0x03	; 3
    12e2:	08 95       	ret
		else if (Endpoint_IsStalled())
		  return ENDPOINT_READYWAIT_EndpointStalled;
    12e4:	81 e0       	ldi	r24, 0x01	; 1
    12e6:	08 95       	ret
			  return ENDPOINT_READYWAIT_NoError;
		}
		else
		{
			if (Endpoint_IsOUTReceived())
			  return ENDPOINT_READYWAIT_NoError;
    12e8:	80 e0       	ldi	r24, 0x00	; 0

			if (!(TimeoutMSRem--))
			  return ENDPOINT_READYWAIT_Timeout;
		}
	}
}
    12ea:	08 95       	ret
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    12ec:	20 91 e8 00 	lds	r18, 0x00E8
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
		}
		else
		{
			if (Endpoint_IsOUTReceived())
    12f0:	22 ff       	sbrs	r18, 2
    12f2:	dd cf       	rjmp	.-70     	; 0x12ae <Endpoint_WaitUntilReady+0x1e>
    12f4:	f9 cf       	rjmp	.-14     	; 0x12e8 <Endpoint_WaitUntilReady+0x58>

000012f6 <USB_ResetInterface>:

	USB_IsInitialized = false;
}

void USB_ResetInterface(void)
{
    12f6:	0f 93       	push	r16
    12f8:	1f 93       	push	r17
    12fa:	cf 93       	push	r28
    12fc:	df 93       	push	r29
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
    12fe:	4e d0       	rcall	.+156    	; 0x139c <USB_INT_DisableAllInterrupts>
    1300:	55 d0       	rcall	.+170    	; 0x13ac <USB_INT_ClearAllInterrupts>
	USB_INT_ClearAllInterrupts();
    1302:	c8 ed       	ldi	r28, 0xD8	; 216
    1304:	d0 e0       	ldi	r29, 0x00	; 0
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
    1306:	88 81       	ld	r24, Y
    1308:	8f 77       	andi	r24, 0x7F	; 127
    130a:	88 83       	st	Y, r24
    130c:	88 81       	ld	r24, Y
    130e:	80 68       	ori	r24, 0x80	; 128
				USBCON |=  (1 << USBE);
    1310:	88 83       	st	Y, r24
    1312:	88 81       	ld	r24, Y
    1314:	8f 7d       	andi	r24, 0xDF	; 223
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
    1316:	88 83       	st	Y, r24
    1318:	e7 ed       	ldi	r30, 0xD7	; 215
    131a:	f0 e0       	ldi	r31, 0x00	; 0

	if (USB_CurrentMode == USB_MODE_Device)
	{
		#if defined(USB_CAN_BE_DEVICE)
		#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
		UHWCON |=  (1 << UIMOD);
    131c:	80 81       	ld	r24, Z
    131e:	80 68       	ori	r24, 0x80	; 128
    1320:	80 83       	st	Z, r24
    1322:	19 bc       	out	0x29, r1	; 41
    1324:	10 92 9c 01 	sts	0x019C, r1
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState                 = DEVICE_STATE_Unattached;
    1328:	10 92 98 01 	sts	0x0198, r1
	USB_Device_ConfigurationNumber  = 0;
    132c:	10 92 9a 01 	sts	0x019A, r1

	#if !defined(NO_DEVICE_REMOTE_WAKEUP)
	USB_Device_RemoteWakeupEnabled  = false;
    1330:	10 92 99 01 	sts	0x0199, r1
	#endif

	#if !defined(NO_DEVICE_SELF_POWER)
	USB_Device_CurrentlySelfPowered = false;
    1334:	00 ee       	ldi	r16, 0xE0	; 224
    1336:	10 e0       	ldi	r17, 0x00	; 0
			}

			static inline void USB_Device_SetFullSpeed(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetFullSpeed(void)
			{
				UDCON &= ~(1 << LSM);
    1338:	f8 01       	movw	r30, r16
    133a:	80 81       	ld	r24, Z
    133c:	8b 7f       	andi	r24, 0xFB	; 251
    133e:	80 83       	st	Z, r24
    1340:	88 81       	ld	r24, Y
    1342:	81 60       	ori	r24, 0x01	; 1
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBCON |= (1 << VBUSTE);
    1344:	88 83       	st	Y, r24
    1346:	80 e0       	ldi	r24, 0x00	; 0
    1348:	60 e0       	ldi	r22, 0x00	; 0
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
    134a:	42 e0       	ldi	r20, 0x02	; 2
    134c:	0f df       	rcall	.-482    	; 0x116c <Endpoint_ConfigureEndpoint_Prv>
    134e:	e1 ee       	ldi	r30, 0xE1	; 225
    1350:	f0 e0       	ldi	r31, 0x00	; 0
    1352:	80 81       	ld	r24, Z
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
    1354:	8e 7f       	andi	r24, 0xFE	; 254
    1356:	80 83       	st	Z, r24
    1358:	e2 ee       	ldi	r30, 0xE2	; 226
    135a:	f0 e0       	ldi	r31, 0x00	; 0
    135c:	80 81       	ld	r24, Z
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
    135e:	81 60       	ori	r24, 0x01	; 1
    1360:	80 83       	st	Z, r24
    1362:	80 81       	ld	r24, Z
    1364:	88 60       	ori	r24, 0x08	; 8
    1366:	80 83       	st	Z, r24
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
    1368:	f8 01       	movw	r30, r16
    136a:	80 81       	ld	r24, Z
    136c:	8e 7f       	andi	r24, 0xFE	; 254
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
    136e:	80 83       	st	Z, r24
    1370:	88 81       	ld	r24, Y
    1372:	80 61       	ori	r24, 0x10	; 16
    1374:	88 83       	st	Y, r24

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON |=  (1 << OTGPADE);
    1376:	df 91       	pop	r29
    1378:	cf 91       	pop	r28
    137a:	1f 91       	pop	r17
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
    137c:	0f 91       	pop	r16
    137e:	08 95       	ret

00001380 <USB_Init>:
    1380:	e8 ed       	ldi	r30, 0xD8	; 216
    1382:	f0 e0       	ldi	r31, 0x00	; 0
    1384:	80 81       	ld	r24, Z
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON &= ~(1 << OTGPADE);
    1386:	8f 7e       	andi	r24, 0xEF	; 239
    1388:	80 83       	st	Z, r24

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON |=  (1 << UVREGE);
    138a:	e7 ed       	ldi	r30, 0xD7	; 215
    138c:	f0 e0       	ldi	r31, 0x00	; 0
    138e:	80 81       	ld	r24, Z
    1390:	81 60       	ori	r24, 0x01	; 1
    1392:	80 83       	st	Z, r24
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
    1394:	81 e0       	ldi	r24, 0x01	; 1
    1396:	80 93 9b 01 	sts	0x019B, r24

	USB_ResetInterface();
    139a:	ad cf       	rjmp	.-166    	; 0x12f6 <USB_ResetInterface>

0000139c <USB_INT_DisableAllInterrupts>:
#include "../USBInterrupt.h"

void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
    139c:	e8 ed       	ldi	r30, 0xD8	; 216
    139e:	f0 e0       	ldi	r31, 0x00	; 0
    13a0:	80 81       	ld	r24, Z
    13a2:	8c 7f       	andi	r24, 0xFC	; 252
    13a4:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
    13a6:	10 92 e2 00 	sts	0x00E2, r1
	#endif
}
    13aa:	08 95       	ret

000013ac <USB_INT_ClearAllInterrupts>:

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
    13ac:	10 92 da 00 	sts	0x00DA, r1
	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
    13b0:	10 92 e1 00 	sts	0x00E1, r1
	#endif
}
    13b4:	08 95       	ret

000013b6 <__vector_10>:

ISR(USB_GEN_vect, ISR_BLOCK)
{
    13b6:	1f 92       	push	r1
    13b8:	0f 92       	push	r0
    13ba:	0f b6       	in	r0, 0x3f	; 63
    13bc:	0f 92       	push	r0
    13be:	0b b6       	in	r0, 0x3b	; 59
    13c0:	0f 92       	push	r0
    13c2:	11 24       	eor	r1, r1
    13c4:	2f 93       	push	r18
    13c6:	3f 93       	push	r19
    13c8:	4f 93       	push	r20
    13ca:	5f 93       	push	r21
    13cc:	6f 93       	push	r22
    13ce:	7f 93       	push	r23
    13d0:	8f 93       	push	r24
    13d2:	9f 93       	push	r25
    13d4:	af 93       	push	r26
    13d6:	bf 93       	push	r27
    13d8:	ef 93       	push	r30
    13da:	ff 93       	push	r31
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
					case USB_INT_SOFI:
						return (UDINT  & (1 << SOFI));
    13dc:	80 91 e1 00 	lds	r24, 0x00E1
	#if defined(USB_CAN_BE_DEVICE)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
    13e0:	82 ff       	sbrs	r24, 2
    13e2:	0b c0       	rjmp	.+22     	; 0x13fa <__vector_10+0x44>
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
					case USB_INT_SOFI:
						return (UDIEN  & (1 << SOFE));
    13e4:	80 91 e2 00 	lds	r24, 0x00E2
    13e8:	82 ff       	sbrs	r24, 2
    13ea:	07 c0       	rjmp	.+14     	; 0x13fa <__vector_10+0x44>
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
						break;
					case USB_INT_SOFI:
						UDINT  &= ~(1 << SOFI);
    13ec:	80 91 e1 00 	lds	r24, 0x00E1
    13f0:	8b 7f       	andi	r24, 0xFB	; 251
    13f2:	80 93 e1 00 	sts	0x00E1, r24
	{
		USB_INT_Clear(USB_INT_SOFI);

		EVENT_USB_Device_StartOfFrame();
    13f6:	0e 94 75 01 	call	0x2ea	; 0x2ea <EVENT_USB_Device_StartOfFrame>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBINT & (1 << VBUSTI));
    13fa:	80 91 da 00 	lds	r24, 0x00DA
	}
	#endif

	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	if (USB_INT_HasOccurred(USB_INT_VBUSTI) && USB_INT_IsEnabled(USB_INT_VBUSTI))
    13fe:	80 ff       	sbrs	r24, 0
    1400:	1f c0       	rjmp	.+62     	; 0x1440 <__vector_10+0x8a>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBCON & (1 << VBUSTE));
    1402:	80 91 d8 00 	lds	r24, 0x00D8
    1406:	80 ff       	sbrs	r24, 0
    1408:	1b c0       	rjmp	.+54     	; 0x1440 <__vector_10+0x8a>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBINT &= ~(1 << VBUSTI);
    140a:	80 91 da 00 	lds	r24, 0x00DA
    140e:	8e 7f       	andi	r24, 0xFE	; 254
    1410:	80 93 da 00 	sts	0x00DA, r24
				 *  \return Boolean \c true if the VBUS line is currently detecting power from a host, \c false otherwise.
				 */
				static inline bool USB_VBUS_GetStatus(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
				static inline bool USB_VBUS_GetStatus(void)
				{
					return ((USBSTA & (1 << VBUS)) ? true : false);
    1414:	80 91 d9 00 	lds	r24, 0x00D9
	{
		USB_INT_Clear(USB_INT_VBUSTI);

		if (USB_VBUS_GetStatus())
    1418:	80 ff       	sbrs	r24, 0
    141a:	0d c0       	rjmp	.+26     	; 0x1436 <__vector_10+0x80>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
    141c:	8c e0       	ldi	r24, 0x0C	; 12
    141e:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    1420:	8e e0       	ldi	r24, 0x0E	; 14
    1422:	89 bd       	out	0x29, r24	; 41
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			{
				USB_PLL_On();
				while (!(USB_PLL_IsReady()));
    1424:	09 b4       	in	r0, 0x29	; 41
    1426:	00 fe       	sbrs	r0, 0
    1428:	fd cf       	rjmp	.-6      	; 0x1424 <__vector_10+0x6e>
			}

			USB_DeviceState = DEVICE_STATE_Powered;
    142a:	81 e0       	ldi	r24, 0x01	; 1
    142c:	80 93 9c 01 	sts	0x019C, r24
			EVENT_USB_Device_Connect();
    1430:	0e 94 3d 01 	call	0x27a	; 0x27a <EVENT_USB_Device_Connect>
    1434:	05 c0       	rjmp	.+10     	; 0x1440 <__vector_10+0x8a>
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    1436:	19 bc       	out	0x29, r1	; 41
		else
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			  USB_PLL_Off();

			USB_DeviceState = DEVICE_STATE_Unattached;
    1438:	10 92 9c 01 	sts	0x019C, r1
			EVENT_USB_Device_Disconnect();
    143c:	0e 94 3f 01 	call	0x27e	; 0x27e <EVENT_USB_Device_Disconnect>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
    1440:	80 91 e1 00 	lds	r24, 0x00E1
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
    1444:	80 ff       	sbrs	r24, 0
    1446:	18 c0       	rjmp	.+48     	; 0x1478 <__vector_10+0xc2>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
    1448:	80 91 e2 00 	lds	r24, 0x00E2
    144c:	80 ff       	sbrs	r24, 0
    144e:	14 c0       	rjmp	.+40     	; 0x1478 <__vector_10+0xc2>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
    1450:	80 91 e2 00 	lds	r24, 0x00E2
    1454:	8e 7f       	andi	r24, 0xFE	; 254
    1456:	80 93 e2 00 	sts	0x00E2, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
    145a:	80 91 e2 00 	lds	r24, 0x00E2
    145e:	80 61       	ori	r24, 0x10	; 16
    1460:	80 93 e2 00 	sts	0x00E2, r24
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON |=  (1 << FRZCLK);
    1464:	80 91 d8 00 	lds	r24, 0x00D8
    1468:	80 62       	ori	r24, 0x20	; 32
    146a:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    146e:	19 bc       	out	0x29, r1	; 41

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
		EVENT_USB_Device_Disconnect();
		#else
		USB_DeviceState = DEVICE_STATE_Suspended;
    1470:	85 e0       	ldi	r24, 0x05	; 5
    1472:	80 93 9c 01 	sts	0x019C, r24
		EVENT_USB_Device_Suspend();
    1476:	17 d2       	rcall	.+1070   	; 0x18a6 <USB_Event_Stub>
    1478:	80 91 e1 00 	lds	r24, 0x00E1
					case USB_INT_IDTI:
						return (USBINT & (1 << IDTI));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
    147c:	84 ff       	sbrs	r24, 4
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
    147e:	2d c0       	rjmp	.+90     	; 0x14da <__vector_10+0x124>
    1480:	80 91 e2 00 	lds	r24, 0x00E2
					case USB_INT_IDTI:
						return (USBCON & (1 << IDTE));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
    1484:	84 ff       	sbrs	r24, 4
    1486:	29 c0       	rjmp	.+82     	; 0x14da <__vector_10+0x124>
    1488:	8c e0       	ldi	r24, 0x0C	; 12

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
    148a:	89 bd       	out	0x29, r24	; 41
    148c:	8e e0       	ldi	r24, 0x0E	; 14
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    148e:	89 bd       	out	0x29, r24	; 41
    1490:	09 b4       	in	r0, 0x29	; 41
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
    1492:	00 fe       	sbrs	r0, 0
    1494:	fd cf       	rjmp	.-6      	; 0x1490 <__vector_10+0xda>
    1496:	80 91 d8 00 	lds	r24, 0x00D8
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
    149a:	8f 7d       	andi	r24, 0xDF	; 223
    149c:	80 93 d8 00 	sts	0x00D8, r24
    14a0:	80 91 e1 00 	lds	r24, 0x00E1
						USBINT &= ~(1 << IDTI);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
    14a4:	8f 7e       	andi	r24, 0xEF	; 239
    14a6:	80 93 e1 00 	sts	0x00E1, r24
    14aa:	80 91 e2 00 	lds	r24, 0x00E2
						USBCON &= ~(1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
    14ae:	8f 7e       	andi	r24, 0xEF	; 239
    14b0:	80 93 e2 00 	sts	0x00E2, r24
    14b4:	80 91 e2 00 	lds	r24, 0x00E2
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
    14b8:	81 60       	ori	r24, 0x01	; 1
    14ba:	80 93 e2 00 	sts	0x00E2, r24
    14be:	80 91 98 01 	lds	r24, 0x0198
		USB_INT_Clear(USB_INT_WAKEUPI);

		USB_INT_Disable(USB_INT_WAKEUPI);
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_Device_ConfigurationNumber)
    14c2:	88 23       	and	r24, r24
    14c4:	21 f4       	brne	.+8      	; 0x14ce <__vector_10+0x118>
    14c6:	80 91 e3 00 	lds	r24, 0x00E3
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
    14ca:	87 ff       	sbrs	r24, 7
		  USB_DeviceState = DEVICE_STATE_Configured;
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
    14cc:	02 c0       	rjmp	.+4      	; 0x14d2 <__vector_10+0x11c>
    14ce:	84 e0       	ldi	r24, 0x04	; 4
    14d0:	01 c0       	rjmp	.+2      	; 0x14d4 <__vector_10+0x11e>
    14d2:	81 e0       	ldi	r24, 0x01	; 1
    14d4:	80 93 9c 01 	sts	0x019C, r24
    14d8:	e6 d1       	rcall	.+972    	; 0x18a6 <USB_Event_Stub>

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
		#else
		EVENT_USB_Device_WakeUp();
    14da:	80 91 e1 00 	lds	r24, 0x00E1
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
    14de:	83 ff       	sbrs	r24, 3
    14e0:	27 c0       	rjmp	.+78     	; 0x1530 <__vector_10+0x17a>
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
    14e2:	80 91 e2 00 	lds	r24, 0x00E2
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
    14e6:	83 ff       	sbrs	r24, 3
    14e8:	23 c0       	rjmp	.+70     	; 0x1530 <__vector_10+0x17a>
    14ea:	80 91 e1 00 	lds	r24, 0x00E1
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
    14ee:	87 7f       	andi	r24, 0xF7	; 247
    14f0:	80 93 e1 00 	sts	0x00E1, r24
    14f4:	82 e0       	ldi	r24, 0x02	; 2
    14f6:	80 93 9c 01 	sts	0x019C, r24
	{
		USB_INT_Clear(USB_INT_EORSTI);

		USB_DeviceState                = DEVICE_STATE_Default;
    14fa:	10 92 98 01 	sts	0x0198, r1
		USB_Device_ConfigurationNumber = 0;
    14fe:	80 91 e1 00 	lds	r24, 0x00E1
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
    1502:	8e 7f       	andi	r24, 0xFE	; 254
    1504:	80 93 e1 00 	sts	0x00E1, r24
    1508:	80 91 e2 00 	lds	r24, 0x00E2
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
    150c:	8e 7f       	andi	r24, 0xFE	; 254
    150e:	80 93 e2 00 	sts	0x00E2, r24
    1512:	80 91 e2 00 	lds	r24, 0x00E2
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
    1516:	80 61       	ori	r24, 0x10	; 16
    1518:	80 93 e2 00 	sts	0x00E2, r24
    151c:	80 e0       	ldi	r24, 0x00	; 0
    151e:	60 e0       	ldi	r22, 0x00	; 0
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
    1520:	42 e0       	ldi	r20, 0x02	; 2
    1522:	24 de       	rcall	.-952    	; 0x116c <Endpoint_ConfigureEndpoint_Prv>
    1524:	80 91 f0 00 	lds	r24, 0x00F0
    1528:	88 60       	ori	r24, 0x08	; 8
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX |= (1 << RXSTPE);
    152a:	80 93 f0 00 	sts	0x00F0, r24
    152e:	bb d1       	rcall	.+886    	; 0x18a6 <USB_Event_Stub>
    1530:	ff 91       	pop	r31
    1532:	ef 91       	pop	r30

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
    1534:	bf 91       	pop	r27
    1536:	af 91       	pop	r26
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
    1538:	9f 91       	pop	r25
    153a:	8f 91       	pop	r24
    153c:	7f 91       	pop	r23
    153e:	6f 91       	pop	r22
    1540:	5f 91       	pop	r21
    1542:	4f 91       	pop	r20
    1544:	3f 91       	pop	r19
    1546:	2f 91       	pop	r18
    1548:	0f 90       	pop	r0
    154a:	0b be       	out	0x3b, r0	; 59
    154c:	0f 90       	pop	r0
    154e:	0f be       	out	0x3f, r0	; 63
    1550:	0f 90       	pop	r0
    1552:	1f 90       	pop	r1
    1554:	18 95       	reti

00001556 <__vector_11>:
    1556:	1f 92       	push	r1
    1558:	0f 92       	push	r0
    155a:	0f b6       	in	r0, 0x3f	; 63
    155c:	0f 92       	push	r0

#if defined(INTERRUPT_CONTROL_ENDPOINT) && defined(USB_CAN_BE_DEVICE)
ISR(USB_COM_vect, ISR_BLOCK)
{
    155e:	0b b6       	in	r0, 0x3b	; 59
    1560:	0f 92       	push	r0
    1562:	11 24       	eor	r1, r1
    1564:	2f 93       	push	r18
    1566:	3f 93       	push	r19
    1568:	4f 93       	push	r20
    156a:	5f 93       	push	r21
    156c:	6f 93       	push	r22
    156e:	7f 93       	push	r23
    1570:	8f 93       	push	r24
    1572:	9f 93       	push	r25
    1574:	af 93       	push	r26
    1576:	bf 93       	push	r27
    1578:	cf 93       	push	r28
    157a:	ef 93       	push	r30
    157c:	ff 93       	push	r31
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    157e:	c0 91 e9 00 	lds	r28, 0x00E9
    1582:	cf 70       	andi	r28, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    1584:	80 91 ec 00 	lds	r24, 0x00EC
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1588:	10 92 e9 00 	sts	0x00E9, r1
						break;
					case USB_INT_SOFI:
						UDIEN  &= ~(1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX &= ~(1 << RXSTPE);
    158c:	80 91 f0 00 	lds	r24, 0x00F0
    1590:	87 7f       	andi	r24, 0xF7	; 247
    1592:	80 93 f0 00 	sts	0x00F0, r24
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				sei();
    1596:	78 94       	sei
	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Disable(USB_INT_RXSTPI);

	GlobalInterruptEnable();

	USB_Device_ProcessControlRequest();
    1598:	1d d0       	rcall	.+58     	; 0x15d4 <USB_Device_ProcessControlRequest>
    159a:	10 92 e9 00 	sts	0x00E9, r1
    159e:	80 91 f0 00 	lds	r24, 0x00F0
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX |= (1 << RXSTPE);
    15a2:	88 60       	ori	r24, 0x08	; 8
    15a4:	80 93 f0 00 	sts	0x00F0, r24
    15a8:	c0 93 e9 00 	sts	0x00E9, r28
    15ac:	ff 91       	pop	r31

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Enable(USB_INT_RXSTPI);
	Endpoint_SelectEndpoint(PrevSelectedEndpoint);
}
    15ae:	ef 91       	pop	r30
    15b0:	cf 91       	pop	r28
    15b2:	bf 91       	pop	r27
    15b4:	af 91       	pop	r26
    15b6:	9f 91       	pop	r25
    15b8:	8f 91       	pop	r24
    15ba:	7f 91       	pop	r23
    15bc:	6f 91       	pop	r22
    15be:	5f 91       	pop	r21
    15c0:	4f 91       	pop	r20
    15c2:	3f 91       	pop	r19
    15c4:	2f 91       	pop	r18
    15c6:	0f 90       	pop	r0
    15c8:	0b be       	out	0x3b, r0	; 59
    15ca:	0f 90       	pop	r0
    15cc:	0f be       	out	0x3f, r0	; 63
    15ce:	0f 90       	pop	r0
    15d0:	1f 90       	pop	r1
    15d2:	18 95       	reti

000015d4 <USB_Device_ProcessControlRequest>:
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_Device_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
    15d4:	1f 93       	push	r17
    15d6:	cf 93       	push	r28
    15d8:	df 93       	push	r29
    15da:	cd b7       	in	r28, 0x3d	; 61
    15dc:	de b7       	in	r29, 0x3e	; 62
    15de:	ac 97       	sbiw	r28, 0x2c	; 44
    15e0:	0f b6       	in	r0, 0x3f	; 63
    15e2:	f8 94       	cli
    15e4:	de bf       	out	0x3e, r29	; 62
    15e6:	0f be       	out	0x3f, r0	; 63
    15e8:	cd bf       	out	0x3d, r28	; 61
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
    15ea:	80 e0       	ldi	r24, 0x00	; 0
	USB_ControlRequest.bRequest      = Endpoint_Read_8();
	USB_ControlRequest.wValue        = Endpoint_Read_16_LE();
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;
    15ec:	ed e9       	ldi	r30, 0x9D	; 157
    15ee:	f1 e0       	ldi	r31, 0x01	; 1
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    15f0:	90 91 f1 00 	lds	r25, 0x00F1

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_8();
    15f4:	91 93       	st	Z+, r25
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
    15f6:	8f 5f       	subi	r24, 0xFF	; 255
    15f8:	88 30       	cpi	r24, 0x08	; 8
    15fa:	d1 f7       	brne	.-12     	; 0x15f0 <USB_Device_ProcessControlRequest+0x1c>
	  *(RequestHeader++) = Endpoint_Read_8();
	#endif

	EVENT_USB_Device_ControlRequest();
    15fc:	0e 94 5f 01 	call	0x2be	; 0x2be <EVENT_USB_Device_ControlRequest>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    1600:	80 91 e8 00 	lds	r24, 0x00E8

	if (Endpoint_IsSETUPReceived())
    1604:	83 ff       	sbrs	r24, 3
    1606:	37 c1       	rjmp	.+622    	; 0x1876 <USB_Device_ProcessControlRequest+0x2a2>
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
    1608:	80 91 9d 01 	lds	r24, 0x019D

		switch (USB_ControlRequest.bRequest)
    160c:	20 91 9e 01 	lds	r18, 0x019E
    1610:	25 30       	cpi	r18, 0x05	; 5
    1612:	09 f4       	brne	.+2      	; 0x1616 <USB_Device_ProcessControlRequest+0x42>
    1614:	84 c0       	rjmp	.+264    	; 0x171e <USB_Device_ProcessControlRequest+0x14a>
    1616:	26 30       	cpi	r18, 0x06	; 6
    1618:	40 f4       	brcc	.+16     	; 0x162a <USB_Device_ProcessControlRequest+0x56>
    161a:	21 30       	cpi	r18, 0x01	; 1
    161c:	a1 f1       	breq	.+104    	; 0x1686 <USB_Device_ProcessControlRequest+0xb2>
    161e:	21 30       	cpi	r18, 0x01	; 1
    1620:	70 f0       	brcs	.+28     	; 0x163e <USB_Device_ProcessControlRequest+0x6a>
    1622:	23 30       	cpi	r18, 0x03	; 3
    1624:	09 f0       	breq	.+2      	; 0x1628 <USB_Device_ProcessControlRequest+0x54>
    1626:	27 c1       	rjmp	.+590    	; 0x1876 <USB_Device_ProcessControlRequest+0x2a2>
    1628:	2e c0       	rjmp	.+92     	; 0x1686 <USB_Device_ProcessControlRequest+0xb2>
    162a:	28 30       	cpi	r18, 0x08	; 8
    162c:	09 f4       	brne	.+2      	; 0x1630 <USB_Device_ProcessControlRequest+0x5c>
    162e:	f4 c0       	rjmp	.+488    	; 0x1818 <USB_Device_ProcessControlRequest+0x244>
    1630:	29 30       	cpi	r18, 0x09	; 9
    1632:	09 f4       	brne	.+2      	; 0x1636 <USB_Device_ProcessControlRequest+0x62>
    1634:	03 c1       	rjmp	.+518    	; 0x183c <USB_Device_ProcessControlRequest+0x268>
    1636:	26 30       	cpi	r18, 0x06	; 6
    1638:	09 f0       	breq	.+2      	; 0x163c <USB_Device_ProcessControlRequest+0x68>
    163a:	1d c1       	rjmp	.+570    	; 0x1876 <USB_Device_ProcessControlRequest+0x2a2>
    163c:	93 c0       	rjmp	.+294    	; 0x1764 <USB_Device_ProcessControlRequest+0x190>
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    163e:	80 38       	cpi	r24, 0x80	; 128
    1640:	21 f0       	breq	.+8      	; 0x164a <USB_Device_ProcessControlRequest+0x76>
    1642:	82 38       	cpi	r24, 0x82	; 130
    1644:	09 f0       	breq	.+2      	; 0x1648 <USB_Device_ProcessControlRequest+0x74>
    1646:	17 c1       	rjmp	.+558    	; 0x1876 <USB_Device_ProcessControlRequest+0x2a2>
    1648:	08 c0       	rjmp	.+16     	; 0x165a <USB_Device_ProcessControlRequest+0x86>
	Endpoint_ClearOUT();
}

static void USB_Device_GetStatus(void)
{
	uint8_t CurrentStatus = 0;
    164a:	80 91 99 01 	lds	r24, 0x0199
			if (USB_Device_CurrentlySelfPowered)
			  CurrentStatus |= FEATURE_SELFPOWERED_ENABLED;
			#endif

			#if !defined(NO_DEVICE_REMOTE_WAKEUP)
			if (USB_Device_RemoteWakeupEnabled)
    164e:	90 91 9a 01 	lds	r25, 0x019A
    1652:	99 23       	and	r25, r25
    1654:	71 f0       	breq	.+28     	; 0x1672 <USB_Device_ProcessControlRequest+0x9e>
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
    1656:	82 60       	ori	r24, 0x02	; 2
    1658:	0c c0       	rjmp	.+24     	; 0x1672 <USB_Device_ProcessControlRequest+0x9e>
			#endif
			break;
		case (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_ENDPOINT):
			#if !defined(CONTROL_ONLY_DEVICE)
			Endpoint_SelectEndpoint((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
    165a:	80 91 a1 01 	lds	r24, 0x01A1
    165e:	8f 70       	andi	r24, 0x0F	; 15
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1660:	80 93 e9 00 	sts	0x00E9, r24
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    1664:	90 91 eb 00 	lds	r25, 0x00EB

			CurrentStatus = Endpoint_IsStalled();
    1668:	81 e0       	ldi	r24, 0x01	; 1
    166a:	95 ff       	sbrs	r25, 5
    166c:	80 e0       	ldi	r24, 0x00	; 0
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    166e:	10 92 e9 00 	sts	0x00E9, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1672:	90 91 e8 00 	lds	r25, 0x00E8
    1676:	97 7f       	andi	r25, 0xF7	; 247
    1678:	90 93 e8 00 	sts	0x00E8, r25
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
    167c:	80 93 f1 00 	sts	0x00F1, r24
				UEDATX = (Data >> 8);
    1680:	10 92 f1 00 	sts	0x00F1, r1
    1684:	d4 c0       	rjmp	.+424    	; 0x182e <USB_Device_ProcessControlRequest+0x25a>
				}

				break;
			case REQ_ClearFeature:
			case REQ_SetFeature:
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    1686:	88 23       	and	r24, r24
    1688:	19 f0       	breq	.+6      	; 0x1690 <USB_Device_ProcessControlRequest+0xbc>
    168a:	82 30       	cpi	r24, 0x02	; 2
    168c:	09 f0       	breq	.+2      	; 0x1690 <USB_Device_ProcessControlRequest+0xbc>
    168e:	f3 c0       	rjmp	.+486    	; 0x1876 <USB_Device_ProcessControlRequest+0x2a2>
	Endpoint_ClearStatusStage();
}

static void USB_Device_ClearSetFeature(void)
{
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
    1690:	90 e0       	ldi	r25, 0x00	; 0
    1692:	8f 71       	andi	r24, 0x1F	; 31
    1694:	90 70       	andi	r25, 0x00	; 0
    1696:	00 97       	sbiw	r24, 0x00	; 0
    1698:	29 f0       	breq	.+10     	; 0x16a4 <USB_Device_ProcessControlRequest+0xd0>
    169a:	82 30       	cpi	r24, 0x02	; 2
    169c:	91 05       	cpc	r25, r1
    169e:	09 f0       	breq	.+2      	; 0x16a2 <USB_Device_ProcessControlRequest+0xce>
    16a0:	ea c0       	rjmp	.+468    	; 0x1876 <USB_Device_ProcessControlRequest+0x2a2>
    16a2:	0b c0       	rjmp	.+22     	; 0x16ba <USB_Device_ProcessControlRequest+0xe6>
	{
		#if !defined(NO_DEVICE_REMOTE_WAKEUP)
		case REQREC_DEVICE:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
    16a4:	80 91 9f 01 	lds	r24, 0x019F
    16a8:	81 30       	cpi	r24, 0x01	; 1
    16aa:	09 f0       	breq	.+2      	; 0x16ae <USB_Device_ProcessControlRequest+0xda>
    16ac:	e4 c0       	rjmp	.+456    	; 0x1876 <USB_Device_ProcessControlRequest+0x2a2>
			  USB_Device_RemoteWakeupEnabled = (USB_ControlRequest.bRequest == REQ_SetFeature);
    16ae:	23 30       	cpi	r18, 0x03	; 3
    16b0:	09 f0       	breq	.+2      	; 0x16b4 <USB_Device_ProcessControlRequest+0xe0>
    16b2:	80 e0       	ldi	r24, 0x00	; 0
    16b4:	80 93 9a 01 	sts	0x019A, r24
    16b8:	2c c0       	rjmp	.+88     	; 0x1712 <USB_Device_ProcessControlRequest+0x13e>

			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
    16ba:	80 91 9f 01 	lds	r24, 0x019F
    16be:	88 23       	and	r24, r24
    16c0:	41 f5       	brne	.+80     	; 0x1712 <USB_Device_ProcessControlRequest+0x13e>
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
    16c2:	20 91 a1 01 	lds	r18, 0x01A1
    16c6:	2f 70       	andi	r18, 0x0F	; 15

				if (EndpointIndex == ENDPOINT_CONTROLEP)
    16c8:	09 f4       	brne	.+2      	; 0x16cc <USB_Device_ProcessControlRequest+0xf8>
    16ca:	d5 c0       	rjmp	.+426    	; 0x1876 <USB_Device_ProcessControlRequest+0x2a2>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    16cc:	20 93 e9 00 	sts	0x00E9, r18
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
    16d0:	80 91 eb 00 	lds	r24, 0x00EB
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
    16d4:	80 ff       	sbrs	r24, 0
    16d6:	1d c0       	rjmp	.+58     	; 0x1712 <USB_Device_ProcessControlRequest+0x13e>
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
    16d8:	80 91 9e 01 	lds	r24, 0x019E
    16dc:	83 30       	cpi	r24, 0x03	; 3
    16de:	21 f4       	brne	.+8      	; 0x16e8 <USB_Device_ProcessControlRequest+0x114>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    16e0:	80 91 eb 00 	lds	r24, 0x00EB
    16e4:	80 62       	ori	r24, 0x20	; 32
    16e6:	13 c0       	rjmp	.+38     	; 0x170e <USB_Device_ProcessControlRequest+0x13a>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
    16e8:	80 91 eb 00 	lds	r24, 0x00EB
    16ec:	80 61       	ori	r24, 0x10	; 16
    16ee:	80 93 eb 00 	sts	0x00EB, r24
			 *  \param[in] Address  Endpoint address whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t Address)
			{
				UERST = (1 << (Address & ENDPOINT_EPNUM_MASK));
    16f2:	81 e0       	ldi	r24, 0x01	; 1
    16f4:	90 e0       	ldi	r25, 0x00	; 0
    16f6:	02 c0       	rjmp	.+4      	; 0x16fc <USB_Device_ProcessControlRequest+0x128>
    16f8:	88 0f       	add	r24, r24
    16fa:	99 1f       	adc	r25, r25
    16fc:	2a 95       	dec	r18
    16fe:	e2 f7       	brpl	.-8      	; 0x16f8 <USB_Device_ProcessControlRequest+0x124>
    1700:	80 93 ea 00 	sts	0x00EA, r24
				UERST = 0;
    1704:	10 92 ea 00 	sts	0x00EA, r1

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
    1708:	80 91 eb 00 	lds	r24, 0x00EB
    170c:	88 60       	ori	r24, 0x08	; 8
    170e:	80 93 eb 00 	sts	0x00EB, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1712:	10 92 e9 00 	sts	0x00E9, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1716:	80 91 e8 00 	lds	r24, 0x00E8
    171a:	87 7f       	andi	r24, 0xF7	; 247
    171c:	8b c0       	rjmp	.+278    	; 0x1834 <USB_Device_ProcessControlRequest+0x260>
					USB_Device_ClearSetFeature();
				}

				break;
			case REQ_SetAddress:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    171e:	88 23       	and	r24, r24
    1720:	09 f0       	breq	.+2      	; 0x1724 <USB_Device_ProcessControlRequest+0x150>
    1722:	a9 c0       	rjmp	.+338    	; 0x1876 <USB_Device_ProcessControlRequest+0x2a2>
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t DeviceAddress = (USB_ControlRequest.wValue & 0x7F);
    1724:	10 91 9f 01 	lds	r17, 0x019F
    1728:	1f 77       	andi	r17, 0x7F	; 127
			#endif

			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				UDADDR = (UDADDR & (1 << ADDEN)) | (Address & 0x7F);
    172a:	80 91 e3 00 	lds	r24, 0x00E3
    172e:	80 78       	andi	r24, 0x80	; 128
    1730:	81 2b       	or	r24, r17
    1732:	80 93 e3 00 	sts	0x00E3, r24
    1736:	80 91 e8 00 	lds	r24, 0x00E8
    173a:	87 7f       	andi	r24, 0xF7	; 247
    173c:	80 93 e8 00 	sts	0x00E8, r24

	USB_Device_SetDeviceAddress(DeviceAddress);

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
    1740:	86 dd       	rcall	.-1268   	; 0x124e <Endpoint_ClearStatusStage>
    1742:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1746:	80 ff       	sbrs	r24, 0

	while (!(Endpoint_IsINReady()));
    1748:	fc cf       	rjmp	.-8      	; 0x1742 <USB_Device_ProcessControlRequest+0x16e>
    174a:	80 91 e3 00 	lds	r24, 0x00E3
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address)
			{
				(void)Address;
				
				UDADDR |= (1 << ADDEN);
    174e:	80 68       	ori	r24, 0x80	; 128
    1750:	80 93 e3 00 	sts	0x00E3, r24
    1754:	11 23       	and	r17, r17

	USB_Device_EnableDeviceAddress(DeviceAddress);

	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
    1756:	11 f0       	breq	.+4      	; 0x175c <USB_Device_ProcessControlRequest+0x188>
    1758:	83 e0       	ldi	r24, 0x03	; 3
    175a:	01 c0       	rjmp	.+2      	; 0x175e <USB_Device_ProcessControlRequest+0x18a>
    175c:	82 e0       	ldi	r24, 0x02	; 2
    175e:	80 93 9c 01 	sts	0x019C, r24
    1762:	89 c0       	rjmp	.+274    	; 0x1876 <USB_Device_ProcessControlRequest+0x2a2>
    1764:	80 58       	subi	r24, 0x80	; 128
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_SetAddress();

				break;
			case REQ_GetDescriptor:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    1766:	82 30       	cpi	r24, 0x02	; 2
    1768:	08 f0       	brcs	.+2      	; 0x176c <USB_Device_ProcessControlRequest+0x198>
    176a:	85 c0       	rjmp	.+266    	; 0x1876 <USB_Device_ProcessControlRequest+0x2a2>
    176c:	80 91 9f 01 	lds	r24, 0x019F
	    !(defined(USE_FLASH_DESCRIPTORS) || defined(USE_EEPROM_DESCRIPTORS) || defined(USE_RAM_DESCRIPTORS))
	uint8_t DescriptorAddressSpace;
	#endif

	#if !defined(NO_INTERNAL_SERIAL) && (USE_INTERNAL_SERIAL != NO_DESCRIPTOR)
	if (USB_ControlRequest.wValue == ((DTYPE_String << 8) | USE_INTERNAL_SERIAL))
    1770:	90 91 a0 01 	lds	r25, 0x01A0
    1774:	23 e0       	ldi	r18, 0x03	; 3
    1776:	8c 3d       	cpi	r24, 0xDC	; 220
    1778:	92 07       	cpc	r25, r18
    177a:	a9 f5       	brne	.+106    	; 0x17e6 <USB_Device_ProcessControlRequest+0x212>
    177c:	83 e0       	ldi	r24, 0x03	; 3
	{
		USB_Descriptor_Header_t Header;
		uint16_t                UnicodeString[INTERNAL_SERIAL_LENGTH_BITS / 4];
	} SignatureDescriptor;

	SignatureDescriptor.Header.Type = DTYPE_String;
    177e:	8c 83       	std	Y+4, r24	; 0x04
    1780:	8a e2       	ldi	r24, 0x2A	; 42
	SignatureDescriptor.Header.Size = USB_STRING_LEN(INTERNAL_SERIAL_LENGTH_BITS / 4);
    1782:	8b 83       	std	Y+3, r24	; 0x03
    1784:	5f b7       	in	r21, 0x3f	; 63
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
    1786:	f8 94       	cli
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
    1788:	de 01       	movw	r26, r28
				__builtin_ssrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				cli();
				#endif

				GCC_MEMORY_BARRIER();
    178a:	13 96       	adiw	r26, 0x03	; 3
    178c:	80 e0       	ldi	r24, 0x00	; 0
    178e:	90 e0       	ldi	r25, 0x00	; 0
    1790:	4e e0       	ldi	r20, 0x0E	; 14
			static inline void USB_Device_GetSerialString(uint16_t* const UnicodeString)
			{
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;
    1792:	61 e2       	ldi	r22, 0x21	; 33

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
				{
					uint8_t SerialByte = boot_signature_byte_get(SigReadAddress);
    1794:	e4 2f       	mov	r30, r20
    1796:	f0 e0       	ldi	r31, 0x00	; 0
    1798:	60 93 57 00 	sts	0x0057, r22
    179c:	e4 91       	lpm	r30, Z
    179e:	80 ff       	sbrs	r24, 0

					if (SerialCharNum & 0x01)
    17a0:	03 c0       	rjmp	.+6      	; 0x17a8 <USB_Device_ProcessControlRequest+0x1d4>
    17a2:	e2 95       	swap	r30
					{
						SerialByte >>= 4;
    17a4:	ef 70       	andi	r30, 0x0F	; 15
    17a6:	4f 5f       	subi	r20, 0xFF	; 255
						SigReadAddress++;
    17a8:	ef 70       	andi	r30, 0x0F	; 15
					}

					SerialByte &= 0x0F;
    17aa:	2e 2f       	mov	r18, r30
    17ac:	30 e0       	ldi	r19, 0x00	; 0
    17ae:	ea 30       	cpi	r30, 0x0A	; 10

					UnicodeString[SerialCharNum] = cpu_to_le16((SerialByte >= 10) ?
    17b0:	18 f0       	brcs	.+6      	; 0x17b8 <USB_Device_ProcessControlRequest+0x1e4>
    17b2:	29 5c       	subi	r18, 0xC9	; 201
    17b4:	3f 4f       	sbci	r19, 0xFF	; 255
    17b6:	02 c0       	rjmp	.+4      	; 0x17bc <USB_Device_ProcessControlRequest+0x1e8>
    17b8:	20 5d       	subi	r18, 0xD0	; 208
    17ba:	3f 4f       	sbci	r19, 0xFF	; 255
    17bc:	13 96       	adiw	r26, 0x03	; 3
    17be:	3c 93       	st	X, r19
    17c0:	2e 93       	st	-X, r18
    17c2:	12 97       	sbiw	r26, 0x02	; 2
    17c4:	01 96       	adiw	r24, 0x01	; 1
    17c6:	12 96       	adiw	r26, 0x02	; 2
    17c8:	84 31       	cpi	r24, 0x14	; 20
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
    17ca:	91 05       	cpc	r25, r1
    17cc:	19 f7       	brne	.-58     	; 0x1794 <USB_Device_ProcessControlRequest+0x1c0>
    17ce:	5f bf       	out	0x3f, r21	; 63
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
    17d0:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    17d4:	87 7f       	andi	r24, 0xF7	; 247
    17d6:	80 93 e8 00 	sts	0x00E8, r24
    17da:	ce 01       	movw	r24, r28

	USB_Device_GetSerialString(SignatureDescriptor.UnicodeString);

	Endpoint_ClearSETUP();

	Endpoint_Write_Control_Stream_LE(&SignatureDescriptor, sizeof(SignatureDescriptor));
    17dc:	03 96       	adiw	r24, 0x03	; 3
    17de:	6a e2       	ldi	r22, 0x2A	; 42
    17e0:	70 e0       	ldi	r23, 0x00	; 0
    17e2:	c2 db       	rcall	.-2172   	; 0xf68 <Endpoint_Write_Control_Stream_LE>
    17e4:	13 c0       	rjmp	.+38     	; 0x180c <USB_Device_ProcessControlRequest+0x238>
    17e6:	60 91 a1 01 	lds	r22, 0x01A1
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif

	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
    17ea:	ae 01       	movw	r20, r28
    17ec:	4f 5f       	subi	r20, 0xFF	; 255
    17ee:	5f 4f       	sbci	r21, 0xFF	; 255
    17f0:	0e 94 c2 01 	call	0x384	; 0x384 <CALLBACK_USB_GetDescriptor>
    17f4:	bc 01       	movw	r22, r24
    17f6:	00 97       	sbiw	r24, 0x00	; 0
    17f8:	09 f4       	brne	.+2      	; 0x17fc <USB_Device_ProcessControlRequest+0x228>
    17fa:	3d c0       	rjmp	.+122    	; 0x1876 <USB_Device_ProcessControlRequest+0x2a2>
    17fc:	80 91 e8 00 	lds	r24, 0x00E8
    1800:	87 7f       	andi	r24, 0xF7	; 247
    1802:	80 93 e8 00 	sts	0x00E8, r24
    1806:	89 81       	ldd	r24, Y+1	; 0x01
    1808:	9a 81       	ldd	r25, Y+2	; 0x02
	#if defined(USE_RAM_DESCRIPTORS) || !defined(ARCH_HAS_MULTI_ADDRESS_SPACE)
	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_EEPROM_DESCRIPTORS)
	Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_FLASH_DESCRIPTORS)
	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
    180a:	53 dc       	rcall	.-1882   	; 0x10b2 <Endpoint_Write_Control_PStream_LE>
    180c:	80 91 e8 00 	lds	r24, 0x00E8
    1810:	8b 77       	andi	r24, 0x7B	; 123
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    1812:	80 93 e8 00 	sts	0x00E8, r24
    1816:	2f c0       	rjmp	.+94     	; 0x1876 <USB_Device_ProcessControlRequest+0x2a2>
    1818:	80 38       	cpi	r24, 0x80	; 128
    181a:	69 f5       	brne	.+90     	; 0x1876 <USB_Device_ProcessControlRequest+0x2a2>
    181c:	80 91 e8 00 	lds	r24, 0x00E8
					USB_Device_GetDescriptor();
				}

				break;
			case REQ_GetConfiguration:
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
    1820:	87 7f       	andi	r24, 0xF7	; 247
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1822:	80 93 e8 00 	sts	0x00E8, r24
    1826:	80 91 98 01 	lds	r24, 0x0198
    182a:	80 93 f1 00 	sts	0x00F1, r24

static void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();

	Endpoint_Write_8(USB_Device_ConfigurationNumber);
    182e:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    1832:	8e 77       	andi	r24, 0x7E	; 126
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1834:	80 93 e8 00 	sts	0x00E8, r24
    1838:	0a dd       	rcall	.-1516   	; 0x124e <Endpoint_ClearStatusStage>
    183a:	1d c0       	rjmp	.+58     	; 0x1876 <USB_Device_ProcessControlRequest+0x2a2>
    183c:	88 23       	and	r24, r24
	Endpoint_ClearIN();

	Endpoint_ClearStatusStage();
    183e:	d9 f4       	brne	.+54     	; 0x1876 <USB_Device_ProcessControlRequest+0x2a2>
    1840:	90 91 9f 01 	lds	r25, 0x019F
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_GetConfiguration();

				break;
			case REQ_SetConfiguration:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    1844:	92 30       	cpi	r25, 0x02	; 2
    1846:	b8 f4       	brcc	.+46     	; 0x1876 <USB_Device_ProcessControlRequest+0x2a2>
}

static void USB_Device_SetConfiguration(void)
{
	#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
    1848:	80 91 e8 00 	lds	r24, 0x00E8
    184c:	87 7f       	andi	r24, 0xF7	; 247
    184e:	80 93 e8 00 	sts	0x00E8, r24
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1852:	90 93 98 01 	sts	0x0198, r25
    1856:	fb dc       	rcall	.-1546   	; 0x124e <Endpoint_ClearStatusStage>
    1858:	80 91 98 01 	lds	r24, 0x0198
	#endif
	#endif

	Endpoint_ClearSETUP();

	USB_Device_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
    185c:	88 23       	and	r24, r24

	Endpoint_ClearStatusStage();
    185e:	21 f4       	brne	.+8      	; 0x1868 <USB_Device_ProcessControlRequest+0x294>
    1860:	80 91 e3 00 	lds	r24, 0x00E3

	if (USB_Device_ConfigurationNumber)
    1864:	87 ff       	sbrs	r24, 7
    1866:	02 c0       	rjmp	.+4      	; 0x186c <USB_Device_ProcessControlRequest+0x298>
    1868:	84 e0       	ldi	r24, 0x04	; 4
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
    186a:	01 c0       	rjmp	.+2      	; 0x186e <USB_Device_ProcessControlRequest+0x29a>
    186c:	81 e0       	ldi	r24, 0x01	; 1
	  USB_DeviceState = DEVICE_STATE_Configured;
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
    186e:	80 93 9c 01 	sts	0x019C, r24
    1872:	0e 94 41 01 	call	0x282	; 0x282 <EVENT_USB_Device_ConfigurationChanged>
    1876:	80 91 e8 00 	lds	r24, 0x00E8
    187a:	83 ff       	sbrs	r24, 3

	EVENT_USB_Device_ConfigurationChanged();
    187c:	0a c0       	rjmp	.+20     	; 0x1892 <USB_Device_ProcessControlRequest+0x2be>
    187e:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    1882:	87 7f       	andi	r24, 0xF7	; 247
			default:
				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
    1884:	80 93 e8 00 	sts	0x00E8, r24
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1888:	80 91 eb 00 	lds	r24, 0x00EB
    188c:	80 62       	ori	r24, 0x20	; 32
    188e:	80 93 eb 00 	sts	0x00EB, r24
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    1892:	ac 96       	adiw	r28, 0x2c	; 44
    1894:	0f b6       	in	r0, 0x3f	; 63
    1896:	f8 94       	cli
    1898:	de bf       	out	0x3e, r29	; 62
    189a:	0f be       	out	0x3f, r0	; 63
	{
		Endpoint_ClearSETUP();
		Endpoint_StallTransaction();
	}
}
    189c:	cd bf       	out	0x3d, r28	; 61
    189e:	df 91       	pop	r29
    18a0:	cf 91       	pop	r28
    18a2:	1f 91       	pop	r17
    18a4:	08 95       	ret

000018a6 <USB_Event_Stub>:
#include "Events.h"

void USB_Event_Stub(void)
{

}
    18a6:	08 95       	ret

000018a8 <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
    18a8:	cf 93       	push	r28
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_DeviceTask(void)
{
	if (USB_DeviceState == DEVICE_STATE_Unattached)
    18aa:	80 91 9c 01 	lds	r24, 0x019C
    18ae:	88 23       	and	r24, r24
    18b0:	a9 f0       	breq	.+42     	; 0x18dc <USB_USBTask+0x34>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    18b2:	80 91 e9 00 	lds	r24, 0x00E9
    18b6:	8f 70       	andi	r24, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    18b8:	90 91 ec 00 	lds	r25, 0x00EC
    18bc:	90 ff       	sbrs	r25, 0
    18be:	02 c0       	rjmp	.+4      	; 0x18c4 <USB_USBTask+0x1c>
    18c0:	c0 e8       	ldi	r28, 0x80	; 128
    18c2:	01 c0       	rjmp	.+2      	; 0x18c6 <USB_USBTask+0x1e>
    18c4:	c0 e0       	ldi	r28, 0x00	; 0
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    18c6:	c8 2b       	or	r28, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    18c8:	10 92 e9 00 	sts	0x00E9, r1
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    18cc:	80 91 e8 00 	lds	r24, 0x00E8

	uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

	if (Endpoint_IsSETUPReceived())
    18d0:	83 ff       	sbrs	r24, 3
    18d2:	01 c0       	rjmp	.+2      	; 0x18d6 <USB_USBTask+0x2e>
	  USB_Device_ProcessControlRequest();
    18d4:	7f de       	rcall	.-770    	; 0x15d4 <USB_Device_ProcessControlRequest>
    18d6:	cf 70       	andi	r28, 0x0F	; 15
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    18d8:	c0 93 e9 00 	sts	0x00E9, r28
    18dc:	cf 91       	pop	r28
	#elif defined(USB_CAN_BE_HOST)
		USB_HostTask();
	#elif defined(USB_CAN_BE_DEVICE)
		USB_DeviceTask();
	#endif
}
    18de:	08 95       	ret

000018e0 <HID_Device_ProcessControlRequest>:
#define  __INCLUDE_FROM_HID_DRIVER
#define  __INCLUDE_FROM_HID_DEVICE_C
#include "HIDClassDevice.h"

void HID_Device_ProcessControlRequest(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
    18e0:	6f 92       	push	r6
    18e2:	7f 92       	push	r7
    18e4:	8f 92       	push	r8
    18e6:	9f 92       	push	r9
    18e8:	af 92       	push	r10
    18ea:	bf 92       	push	r11
    18ec:	cf 92       	push	r12
    18ee:	df 92       	push	r13
    18f0:	ef 92       	push	r14
    18f2:	ff 92       	push	r15
    18f4:	0f 93       	push	r16
    18f6:	1f 93       	push	r17
    18f8:	cf 93       	push	r28
    18fa:	df 93       	push	r29
    18fc:	00 d0       	rcall	.+0      	; 0x18fe <HID_Device_ProcessControlRequest+0x1e>
    18fe:	0f 92       	push	r0
    1900:	cd b7       	in	r28, 0x3d	; 61
    1902:	de b7       	in	r29, 0x3e	; 62
    1904:	7c 01       	movw	r14, r24
				Endpoint_ClearStatusStage();
			}

			break;
	}
}
    1906:	6d b6       	in	r6, 0x3d	; 61
    1908:	7e b6       	in	r7, 0x3e	; 62
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    190a:	80 91 e8 00 	lds	r24, 0x00E8
#define  __INCLUDE_FROM_HID_DEVICE_C
#include "HIDClassDevice.h"

void HID_Device_ProcessControlRequest(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
	if (!(Endpoint_IsSETUPReceived()))
    190e:	83 ff       	sbrs	r24, 3
    1910:	05 c1       	rjmp	.+522    	; 0x1b1c <HID_Device_ProcessControlRequest+0x23c>
	  return;

	if (USB_ControlRequest.wIndex != HIDInterfaceInfo->Config.InterfaceNumber)
    1912:	f7 01       	movw	r30, r14
    1914:	80 81       	ld	r24, Z
    1916:	90 e0       	ldi	r25, 0x00	; 0
    1918:	20 91 a1 01 	lds	r18, 0x01A1
    191c:	30 91 a2 01 	lds	r19, 0x01A2
    1920:	28 17       	cp	r18, r24
    1922:	39 07       	cpc	r19, r25
    1924:	09 f0       	breq	.+2      	; 0x1928 <HID_Device_ProcessControlRequest+0x48>
    1926:	fa c0       	rjmp	.+500    	; 0x1b1c <HID_Device_ProcessControlRequest+0x23c>
	  return;

	switch (USB_ControlRequest.bRequest)
    1928:	80 91 9e 01 	lds	r24, 0x019E
    192c:	83 30       	cpi	r24, 0x03	; 3
    192e:	09 f4       	brne	.+2      	; 0x1932 <HID_Device_ProcessControlRequest+0x52>
    1930:	9c c0       	rjmp	.+312    	; 0x1a6a <HID_Device_ProcessControlRequest+0x18a>
    1932:	84 30       	cpi	r24, 0x04	; 4
    1934:	30 f4       	brcc	.+12     	; 0x1942 <HID_Device_ProcessControlRequest+0x62>
    1936:	81 30       	cpi	r24, 0x01	; 1
    1938:	71 f0       	breq	.+28     	; 0x1956 <HID_Device_ProcessControlRequest+0x76>
    193a:	82 30       	cpi	r24, 0x02	; 2
    193c:	09 f0       	breq	.+2      	; 0x1940 <HID_Device_ProcessControlRequest+0x60>
    193e:	ee c0       	rjmp	.+476    	; 0x1b1c <HID_Device_ProcessControlRequest+0x23c>
    1940:	d1 c0       	rjmp	.+418    	; 0x1ae4 <HID_Device_ProcessControlRequest+0x204>
    1942:	8a 30       	cpi	r24, 0x0A	; 10
    1944:	09 f4       	brne	.+2      	; 0x1948 <HID_Device_ProcessControlRequest+0x68>
    1946:	b6 c0       	rjmp	.+364    	; 0x1ab4 <HID_Device_ProcessControlRequest+0x1d4>
    1948:	8b 30       	cpi	r24, 0x0B	; 11
    194a:	09 f4       	brne	.+2      	; 0x194e <HID_Device_ProcessControlRequest+0x6e>
    194c:	9f c0       	rjmp	.+318    	; 0x1a8c <HID_Device_ProcessControlRequest+0x1ac>
    194e:	89 30       	cpi	r24, 0x09	; 9
    1950:	09 f0       	breq	.+2      	; 0x1954 <HID_Device_ProcessControlRequest+0x74>
    1952:	e4 c0       	rjmp	.+456    	; 0x1b1c <HID_Device_ProcessControlRequest+0x23c>
    1954:	4c c0       	rjmp	.+152    	; 0x19ee <HID_Device_ProcessControlRequest+0x10e>
	{
		case HID_REQ_GetReport:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    1956:	80 91 9d 01 	lds	r24, 0x019D
    195a:	81 3a       	cpi	r24, 0xA1	; 161
    195c:	09 f0       	breq	.+2      	; 0x1960 <HID_Device_ProcessControlRequest+0x80>
    195e:	de c0       	rjmp	.+444    	; 0x1b1c <HID_Device_ProcessControlRequest+0x23c>
    1960:	9d b6       	in	r9, 0x3d	; 61
    1962:	8e b6       	in	r8, 0x3e	; 62
			{
				uint16_t ReportSize = 0;
    1964:	1b 82       	std	Y+3, r1	; 0x03
    1966:	1a 82       	std	Y+2, r1	; 0x02
				uint8_t  ReportID   = (USB_ControlRequest.wValue & 0xFF);
    1968:	80 91 9f 01 	lds	r24, 0x019F
    196c:	00 91 a0 01 	lds	r16, 0x01A0
    1970:	89 83       	std	Y+1, r24	; 0x01
				uint8_t  ReportType = (USB_ControlRequest.wValue >> 8) - 1;
				uint8_t  ReportData[HIDInterfaceInfo->Config.PrevReportINBufferSize];
    1972:	f7 01       	movw	r30, r14
    1974:	40 85       	ldd	r20, Z+8	; 0x08
    1976:	8d b7       	in	r24, 0x3d	; 61
    1978:	9e b7       	in	r25, 0x3e	; 62
    197a:	84 1b       	sub	r24, r20
    197c:	91 09       	sbc	r25, r1
    197e:	0f b6       	in	r0, 0x3f	; 63
    1980:	f8 94       	cli
    1982:	9e bf       	out	0x3e, r25	; 62
    1984:	0f be       	out	0x3f, r0	; 63
    1986:	8d bf       	out	0x3d, r24	; 61
    1988:	cd b6       	in	r12, 0x3d	; 61
    198a:	de b6       	in	r13, 0x3e	; 62
    198c:	08 94       	sec
    198e:	c1 1c       	adc	r12, r1
    1990:	d1 1c       	adc	r13, r1

				memset(ReportData, 0, sizeof(ReportData));
    1992:	bc 2c       	mov	r11, r12
    1994:	ad 2c       	mov	r10, r13
    1996:	c6 01       	movw	r24, r12
    1998:	60 e0       	ldi	r22, 0x00	; 0
    199a:	70 e0       	ldi	r23, 0x00	; 0
    199c:	50 e0       	ldi	r21, 0x00	; 0
    199e:	4a d3       	rcall	.+1684   	; 0x2034 <memset>
    19a0:	40 2f       	mov	r20, r16
		case HID_REQ_GetReport:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
			{
				uint16_t ReportSize = 0;
				uint8_t  ReportID   = (USB_ControlRequest.wValue & 0xFF);
				uint8_t  ReportType = (USB_ControlRequest.wValue >> 8) - 1;
    19a2:	41 50       	subi	r20, 0x01	; 1
    19a4:	c7 01       	movw	r24, r14
				uint8_t  ReportData[HIDInterfaceInfo->Config.PrevReportINBufferSize];

				memset(ReportData, 0, sizeof(ReportData));

				CALLBACK_HID_Device_CreateHIDReport(HIDInterfaceInfo, &ReportID, ReportType, ReportData, &ReportSize);
    19a6:	be 01       	movw	r22, r28
    19a8:	6f 5f       	subi	r22, 0xFF	; 255
    19aa:	7f 4f       	sbci	r23, 0xFF	; 255
    19ac:	96 01       	movw	r18, r12
    19ae:	8e 01       	movw	r16, r28
    19b0:	0e 5f       	subi	r16, 0xFE	; 254
    19b2:	1f 4f       	sbci	r17, 0xFF	; 255
    19b4:	0e 94 81 01 	call	0x302	; 0x302 <CALLBACK_HID_Device_CreateHIDReport>
    19b8:	f7 01       	movw	r30, r14

				if (HIDInterfaceInfo->Config.PrevReportINBuffer != NULL)
    19ba:	86 81       	ldd	r24, Z+6	; 0x06
    19bc:	97 81       	ldd	r25, Z+7	; 0x07
    19be:	00 97       	sbiw	r24, 0x00	; 0
    19c0:	21 f0       	breq	.+8      	; 0x19ca <HID_Device_ProcessControlRequest+0xea>
    19c2:	40 85       	ldd	r20, Z+8	; 0x08
				{
					memcpy(HIDInterfaceInfo->Config.PrevReportINBuffer, ReportData,
    19c4:	b6 01       	movw	r22, r12
    19c6:	50 e0       	ldi	r21, 0x00	; 0
    19c8:	2c d3       	rcall	.+1624   	; 0x2022 <memcpy>
    19ca:	10 92 e9 00 	sts	0x00E9, r1
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    19ce:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    19d2:	87 7f       	andi	r24, 0xF7	; 247
    19d4:	80 93 e8 00 	sts	0x00E8, r24
    19d8:	6a 81       	ldd	r22, Y+2	; 0x02
    19da:	7b 81       	ldd	r23, Y+3	; 0x03
				}

				Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

				Endpoint_ClearSETUP();
				Endpoint_Write_Control_Stream_LE(ReportData, ReportSize);
    19dc:	8b 2d       	mov	r24, r11
    19de:	9a 2d       	mov	r25, r10
    19e0:	c3 da       	rcall	.-2682   	; 0xf68 <Endpoint_Write_Control_Stream_LE>
    19e2:	80 91 e8 00 	lds	r24, 0x00E8
    19e6:	8b 77       	andi	r24, 0x7B	; 123
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    19e8:	80 93 e8 00 	sts	0x00E8, r24
    19ec:	3b c0       	rjmp	.+118    	; 0x1a64 <HID_Device_ProcessControlRequest+0x184>
    19ee:	80 91 9d 01 	lds	r24, 0x019D
    19f2:	81 32       	cpi	r24, 0x21	; 33
				Endpoint_ClearOUT();
			}

			break;
		case HID_REQ_SetReport:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    19f4:	09 f0       	breq	.+2      	; 0x19f8 <HID_Device_ProcessControlRequest+0x118>
    19f6:	92 c0       	rjmp	.+292    	; 0x1b1c <HID_Device_ProcessControlRequest+0x23c>
    19f8:	9d b6       	in	r9, 0x3d	; 61
    19fa:	8e b6       	in	r8, 0x3e	; 62
    19fc:	00 91 a3 01 	lds	r16, 0x01A3
    1a00:	10 91 a4 01 	lds	r17, 0x01A4
			{
				uint16_t ReportSize = USB_ControlRequest.wLength;
    1a04:	c0 90 9f 01 	lds	r12, 0x019F
    1a08:	d0 90 a0 01 	lds	r13, 0x01A0
				uint8_t  ReportID   = (USB_ControlRequest.wValue & 0xFF);
    1a0c:	8d b7       	in	r24, 0x3d	; 61
    1a0e:	9e b7       	in	r25, 0x3e	; 62
    1a10:	80 1b       	sub	r24, r16
				uint8_t  ReportType = (USB_ControlRequest.wValue >> 8) - 1;
				uint8_t  ReportData[ReportSize];
    1a12:	91 0b       	sbc	r25, r17
    1a14:	0f b6       	in	r0, 0x3f	; 63
    1a16:	f8 94       	cli
    1a18:	9e bf       	out	0x3e, r25	; 62
    1a1a:	0f be       	out	0x3f, r0	; 63
    1a1c:	8d bf       	out	0x3d, r24	; 61
    1a1e:	ad b6       	in	r10, 0x3d	; 61
    1a20:	be b6       	in	r11, 0x3e	; 62
    1a22:	08 94       	sec
    1a24:	a1 1c       	adc	r10, r1
    1a26:	b1 1c       	adc	r11, r1
    1a28:	80 91 e8 00 	lds	r24, 0x00E8
    1a2c:	87 7f       	andi	r24, 0xF7	; 247
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1a2e:	80 93 e8 00 	sts	0x00E8, r24
    1a32:	c5 01       	movw	r24, r10
    1a34:	b8 01       	movw	r22, r16
    1a36:	f4 da       	rcall	.-2584   	; 0x1020 <Endpoint_Read_Control_Stream_LE>

				Endpoint_ClearSETUP();
				Endpoint_Read_Control_Stream_LE(ReportData, ReportSize);
    1a38:	80 91 e8 00 	lds	r24, 0x00E8
    1a3c:	8e 77       	andi	r24, 0x7E	; 126
    1a3e:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1a42:	81 e0       	ldi	r24, 0x01	; 1
    1a44:	90 e0       	ldi	r25, 0x00	; 0
    1a46:	cc 20       	and	r12, r12
    1a48:	11 f4       	brne	.+4      	; 0x1a4e <HID_Device_ProcessControlRequest+0x16e>
				Endpoint_ClearIN();

				CALLBACK_HID_Device_ProcessHIDReport(HIDInterfaceInfo, ReportID, ReportType,
    1a4a:	80 e0       	ldi	r24, 0x00	; 0
    1a4c:	90 e0       	ldi	r25, 0x00	; 0
    1a4e:	4d 2d       	mov	r20, r13
    1a50:	41 50       	subi	r20, 0x01	; 1
    1a52:	95 01       	movw	r18, r10
    1a54:	28 0f       	add	r18, r24
		case HID_REQ_SetReport:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
			{
				uint16_t ReportSize = USB_ControlRequest.wLength;
				uint8_t  ReportID   = (USB_ControlRequest.wValue & 0xFF);
				uint8_t  ReportType = (USB_ControlRequest.wValue >> 8) - 1;
    1a56:	39 1f       	adc	r19, r25
    1a58:	08 1b       	sub	r16, r24

				Endpoint_ClearSETUP();
				Endpoint_Read_Control_Stream_LE(ReportData, ReportSize);
				Endpoint_ClearIN();

				CALLBACK_HID_Device_ProcessHIDReport(HIDInterfaceInfo, ReportID, ReportType,
    1a5a:	19 0b       	sbc	r17, r25
    1a5c:	c7 01       	movw	r24, r14
    1a5e:	6c 2d       	mov	r22, r12
    1a60:	0e 94 b6 01 	call	0x36c	; 0x36c <CALLBACK_HID_Device_ProcessHIDReport>
    1a64:	9d be       	out	0x3d, r9	; 61
    1a66:	8e be       	out	0x3e, r8	; 62
    1a68:	59 c0       	rjmp	.+178    	; 0x1b1c <HID_Device_ProcessControlRequest+0x23c>
    1a6a:	80 91 9d 01 	lds	r24, 0x019D
    1a6e:	81 3a       	cpi	r24, 0xA1	; 161
    1a70:	09 f0       	breq	.+2      	; 0x1a74 <HID_Device_ProcessControlRequest+0x194>
				                                     &ReportData[ReportID ? 1 : 0], ReportSize - (ReportID ? 1 : 0));
			}

			break;
		case HID_REQ_GetProtocol:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    1a72:	54 c0       	rjmp	.+168    	; 0x1b1c <HID_Device_ProcessControlRequest+0x23c>
    1a74:	80 91 e8 00 	lds	r24, 0x00E8
    1a78:	87 7f       	andi	r24, 0xF7	; 247
    1a7a:	80 93 e8 00 	sts	0x00E8, r24
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1a7e:	80 91 e8 00 	lds	r24, 0x00E8
    1a82:	80 ff       	sbrs	r24, 0
    1a84:	fc cf       	rjmp	.-8      	; 0x1a7e <HID_Device_ProcessControlRequest+0x19e>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1a86:	f7 01       	movw	r30, r14
    1a88:	81 85       	ldd	r24, Z+9	; 0x09
			{
				Endpoint_ClearSETUP();
				while (!(Endpoint_IsINReady()));
    1a8a:	40 c0       	rjmp	.+128    	; 0x1b0c <HID_Device_ProcessControlRequest+0x22c>
    1a8c:	80 91 9d 01 	lds	r24, 0x019D
				Endpoint_Write_8(HIDInterfaceInfo->State.UsingReportProtocol);
    1a90:	81 32       	cpi	r24, 0x21	; 33
    1a92:	09 f0       	breq	.+2      	; 0x1a96 <HID_Device_ProcessControlRequest+0x1b6>
				Endpoint_ClearStatusStage();
			}

			break;
		case HID_REQ_SetProtocol:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    1a94:	43 c0       	rjmp	.+134    	; 0x1b1c <HID_Device_ProcessControlRequest+0x23c>
    1a96:	80 91 e8 00 	lds	r24, 0x00E8
    1a9a:	87 7f       	andi	r24, 0xF7	; 247
    1a9c:	80 93 e8 00 	sts	0x00E8, r24
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1aa0:	d6 db       	rcall	.-2132   	; 0x124e <Endpoint_ClearStatusStage>
    1aa2:	90 91 9f 01 	lds	r25, 0x019F
    1aa6:	81 e0       	ldi	r24, 0x01	; 1
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
    1aa8:	99 23       	and	r25, r25
    1aaa:	09 f4       	brne	.+2      	; 0x1aae <HID_Device_ProcessControlRequest+0x1ce>

				HIDInterfaceInfo->State.UsingReportProtocol = ((USB_ControlRequest.wValue & 0xFF) != 0x00);
    1aac:	80 e0       	ldi	r24, 0x00	; 0
    1aae:	f7 01       	movw	r30, r14
    1ab0:	81 87       	std	Z+9, r24	; 0x09
    1ab2:	34 c0       	rjmp	.+104    	; 0x1b1c <HID_Device_ProcessControlRequest+0x23c>
    1ab4:	80 91 9d 01 	lds	r24, 0x019D
    1ab8:	81 32       	cpi	r24, 0x21	; 33
    1aba:	81 f5       	brne	.+96     	; 0x1b1c <HID_Device_ProcessControlRequest+0x23c>
    1abc:	80 91 e8 00 	lds	r24, 0x00E8
			}

			break;
		case HID_REQ_SetIdle:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    1ac0:	87 7f       	andi	r24, 0xF7	; 247
    1ac2:	80 93 e8 00 	sts	0x00E8, r24
    1ac6:	c3 db       	rcall	.-2170   	; 0x124e <Endpoint_ClearStatusStage>
    1ac8:	80 91 9f 01 	lds	r24, 0x019F
    1acc:	90 91 a0 01 	lds	r25, 0x01A0
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
    1ad0:	80 70       	andi	r24, 0x00	; 0
    1ad2:	36 e0       	ldi	r19, 0x06	; 6

				HIDInterfaceInfo->State.IdleCount = ((USB_ControlRequest.wValue & 0xFF00) >> 6);
    1ad4:	96 95       	lsr	r25
    1ad6:	87 95       	ror	r24
    1ad8:	3a 95       	dec	r19
    1ada:	e1 f7       	brne	.-8      	; 0x1ad4 <HID_Device_ProcessControlRequest+0x1f4>
    1adc:	f7 01       	movw	r30, r14
    1ade:	95 87       	std	Z+13, r25	; 0x0d
    1ae0:	84 87       	std	Z+12, r24	; 0x0c
    1ae2:	1c c0       	rjmp	.+56     	; 0x1b1c <HID_Device_ProcessControlRequest+0x23c>
    1ae4:	80 91 9d 01 	lds	r24, 0x019D
    1ae8:	81 3a       	cpi	r24, 0xA1	; 161
    1aea:	c1 f4       	brne	.+48     	; 0x1b1c <HID_Device_ProcessControlRequest+0x23c>
    1aec:	80 91 e8 00 	lds	r24, 0x00E8
			}

			break;
		case HID_REQ_GetIdle:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    1af0:	87 7f       	andi	r24, 0xF7	; 247
    1af2:	80 93 e8 00 	sts	0x00E8, r24
    1af6:	80 91 e8 00 	lds	r24, 0x00E8
    1afa:	80 ff       	sbrs	r24, 0
    1afc:	fc cf       	rjmp	.-8      	; 0x1af6 <HID_Device_ProcessControlRequest+0x216>
    1afe:	f7 01       	movw	r30, r14
    1b00:	84 85       	ldd	r24, Z+12	; 0x0c
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1b02:	95 85       	ldd	r25, Z+13	; 0x0d
    1b04:	96 95       	lsr	r25
			{
				Endpoint_ClearSETUP();
				while (!(Endpoint_IsINReady()));
    1b06:	87 95       	ror	r24
    1b08:	96 95       	lsr	r25
				Endpoint_Write_8(HIDInterfaceInfo->State.IdleCount >> 2);
    1b0a:	87 95       	ror	r24
    1b0c:	80 93 f1 00 	sts	0x00F1, r24
    1b10:	80 91 e8 00 	lds	r24, 0x00E8
    1b14:	8e 77       	andi	r24, 0x7E	; 126
    1b16:	80 93 e8 00 	sts	0x00E8, r24
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    1b1a:	99 db       	rcall	.-2254   	; 0x124e <Endpoint_ClearStatusStage>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1b1c:	0f b6       	in	r0, 0x3f	; 63
    1b1e:	f8 94       	cli
    1b20:	7e be       	out	0x3e, r7	; 62
    1b22:	0f be       	out	0x3f, r0	; 63
    1b24:	6d be       	out	0x3d, r6	; 61
				Endpoint_ClearIN();
				Endpoint_ClearStatusStage();
    1b26:	0f 90       	pop	r0
    1b28:	0f 90       	pop	r0
			}

			break;
	}
}
    1b2a:	0f 90       	pop	r0
    1b2c:	df 91       	pop	r29
    1b2e:	cf 91       	pop	r28
    1b30:	1f 91       	pop	r17
    1b32:	0f 91       	pop	r16
    1b34:	ff 90       	pop	r15
    1b36:	ef 90       	pop	r14
    1b38:	df 90       	pop	r13
    1b3a:	cf 90       	pop	r12
    1b3c:	bf 90       	pop	r11
    1b3e:	af 90       	pop	r10
    1b40:	9f 90       	pop	r9
    1b42:	8f 90       	pop	r8
    1b44:	7f 90       	pop	r7
    1b46:	6f 90       	pop	r6
    1b48:	08 95       	ret

00001b4a <HID_Device_ConfigureEndpoints>:
    1b4a:	cf 93       	push	r28
    1b4c:	df 93       	push	r29
    1b4e:	fc 01       	movw	r30, r24
    1b50:	09 96       	adiw	r24, 0x09	; 9
    1b52:	dc 01       	movw	r26, r24
    1b54:	87 e0       	ldi	r24, 0x07	; 7
    1b56:	ed 01       	movw	r28, r26

bool HID_Device_ConfigureEndpoints(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
	memset(&HIDInterfaceInfo->State, 0x00, sizeof(HIDInterfaceInfo->State));
    1b58:	19 92       	st	Y+, r1
    1b5a:	8a 95       	dec	r24
    1b5c:	e9 f7       	brne	.-6      	; 0x1b58 <HID_Device_ConfigureEndpoints+0xe>
	HIDInterfaceInfo->State.UsingReportProtocol = true;
    1b5e:	81 e0       	ldi	r24, 0x01	; 1
    1b60:	81 87       	std	Z+9, r24	; 0x09
	HIDInterfaceInfo->State.IdleCount           = 500;
    1b62:	84 ef       	ldi	r24, 0xF4	; 244
    1b64:	91 e0       	ldi	r25, 0x01	; 1
    1b66:	95 87       	std	Z+13, r25	; 0x0d
    1b68:	84 87       	std	Z+12, r24	; 0x0c

	HIDInterfaceInfo->Config.ReportINEndpoint.Type = EP_TYPE_INTERRUPT;
    1b6a:	83 e0       	ldi	r24, 0x03	; 3
    1b6c:	84 83       	std	Z+4, r24	; 0x04

	if (!(Endpoint_ConfigureEndpointTable(&HIDInterfaceInfo->Config.ReportINEndpoint, 1)))
    1b6e:	cf 01       	movw	r24, r30
    1b70:	01 96       	adiw	r24, 0x01	; 1
    1b72:	61 e0       	ldi	r22, 0x01	; 1
    1b74:	30 db       	rcall	.-2464   	; 0x11d6 <Endpoint_ConfigureEndpointTable>
    1b76:	df 91       	pop	r29
	  return false;	
	
	return true;
}
    1b78:	cf 91       	pop	r28
    1b7a:	08 95       	ret

00001b7c <HID_Device_USBTask>:
    1b7c:	4f 92       	push	r4

void HID_Device_USBTask(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
    1b7e:	5f 92       	push	r5
    1b80:	6f 92       	push	r6
    1b82:	7f 92       	push	r7
    1b84:	8f 92       	push	r8
    1b86:	9f 92       	push	r9
    1b88:	af 92       	push	r10
    1b8a:	bf 92       	push	r11
    1b8c:	cf 92       	push	r12
    1b8e:	df 92       	push	r13
    1b90:	ef 92       	push	r14
    1b92:	ff 92       	push	r15
    1b94:	0f 93       	push	r16
    1b96:	1f 93       	push	r17
    1b98:	cf 93       	push	r28
    1b9a:	df 93       	push	r29
    1b9c:	00 d0       	rcall	.+0      	; 0x1b9e <HID_Device_USBTask+0x22>
    1b9e:	0f 92       	push	r0
    1ba0:	cd b7       	in	r28, 0x3d	; 61
    1ba2:	de b7       	in	r29, 0x3e	; 62
    1ba4:	7c 01       	movw	r14, r24
			Endpoint_ClearIN();
		}
		
		HIDInterfaceInfo->State.PrevFrameNum = USB_Device_GetFrameNumber();
	}
}
    1ba6:	4d b6       	in	r4, 0x3d	; 61
    1ba8:	5e b6       	in	r5, 0x3e	; 62
	return true;
}

void HID_Device_USBTask(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
	if (USB_DeviceState != DEVICE_STATE_Configured)
    1baa:	80 91 9c 01 	lds	r24, 0x019C
    1bae:	84 30       	cpi	r24, 0x04	; 4
    1bb0:	09 f0       	breq	.+2      	; 0x1bb4 <HID_Device_USBTask+0x38>
    1bb2:	92 c0       	rjmp	.+292    	; 0x1cd8 <HID_Device_USBTask+0x15c>
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
    1bb4:	80 91 e4 00 	lds	r24, 0x00E4
    1bb8:	90 91 e5 00 	lds	r25, 0x00E5
	  return;

	if (HIDInterfaceInfo->State.PrevFrameNum == USB_Device_GetFrameNumber())
    1bbc:	f7 01       	movw	r30, r14
    1bbe:	22 85       	ldd	r18, Z+10	; 0x0a
    1bc0:	33 85       	ldd	r19, Z+11	; 0x0b
    1bc2:	28 17       	cp	r18, r24
    1bc4:	39 07       	cpc	r19, r25
    1bc6:	09 f4       	brne	.+2      	; 0x1bca <HID_Device_USBTask+0x4e>
    1bc8:	87 c0       	rjmp	.+270    	; 0x1cd8 <HID_Device_USBTask+0x15c>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1bca:	81 81       	ldd	r24, Z+1	; 0x01
    1bcc:	8f 70       	andi	r24, 0x0F	; 15
    1bce:	80 93 e9 00 	sts	0x00E9, r24
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    1bd2:	80 91 e8 00 	lds	r24, 0x00E8
	  return;
	  
	Endpoint_SelectEndpoint(HIDInterfaceInfo->Config.ReportINEndpoint.Address);

	if (Endpoint_IsReadWriteAllowed())
    1bd6:	85 ff       	sbrs	r24, 5
    1bd8:	7f c0       	rjmp	.+254    	; 0x1cd8 <HID_Device_USBTask+0x15c>
    1bda:	7d b6       	in	r7, 0x3d	; 61
    1bdc:	6e b6       	in	r6, 0x3e	; 62
	{
		uint8_t  ReportINData[HIDInterfaceInfo->Config.PrevReportINBufferSize];
    1bde:	40 85       	ldd	r20, Z+8	; 0x08
    1be0:	8d b7       	in	r24, 0x3d	; 61
    1be2:	9e b7       	in	r25, 0x3e	; 62
    1be4:	84 1b       	sub	r24, r20
    1be6:	91 09       	sbc	r25, r1
    1be8:	0f b6       	in	r0, 0x3f	; 63
    1bea:	f8 94       	cli
    1bec:	9e bf       	out	0x3e, r25	; 62
    1bee:	0f be       	out	0x3f, r0	; 63
    1bf0:	8d bf       	out	0x3d, r24	; 61
    1bf2:	0d b7       	in	r16, 0x3d	; 61
    1bf4:	1e b7       	in	r17, 0x3e	; 62
    1bf6:	0f 5f       	subi	r16, 0xFF	; 255
    1bf8:	1f 4f       	sbci	r17, 0xFF	; 255
		uint8_t  ReportID     = 0;
    1bfa:	19 82       	std	Y+1, r1	; 0x01
		uint16_t ReportINSize = 0;
    1bfc:	1b 82       	std	Y+3, r1	; 0x03
    1bfe:	1a 82       	std	Y+2, r1	; 0x02

		memset(ReportINData, 0, sizeof(ReportINData));
    1c00:	b0 2e       	mov	r11, r16
    1c02:	a1 2e       	mov	r10, r17
    1c04:	c8 01       	movw	r24, r16
    1c06:	60 e0       	ldi	r22, 0x00	; 0
    1c08:	70 e0       	ldi	r23, 0x00	; 0
    1c0a:	50 e0       	ldi	r21, 0x00	; 0
    1c0c:	13 d2       	rcall	.+1062   	; 0x2034 <memset>
    1c0e:	c7 01       	movw	r24, r14

		bool ForceSend         = CALLBACK_HID_Device_CreateHIDReport(HIDInterfaceInfo, &ReportID, HID_REPORT_ITEM_In,
    1c10:	be 01       	movw	r22, r28
    1c12:	6f 5f       	subi	r22, 0xFF	; 255
    1c14:	7f 4f       	sbci	r23, 0xFF	; 255
    1c16:	40 e0       	ldi	r20, 0x00	; 0
    1c18:	98 01       	movw	r18, r16
    1c1a:	8e 01       	movw	r16, r28
    1c1c:	0e 5f       	subi	r16, 0xFE	; 254
    1c1e:	1f 4f       	sbci	r17, 0xFF	; 255
    1c20:	0e 94 81 01 	call	0x302	; 0x302 <CALLBACK_HID_Device_CreateHIDReport>
    1c24:	18 2f       	mov	r17, r24
    1c26:	f7 01       	movw	r30, r14
		                                                             ReportINData, &ReportINSize);
		bool StatesChanged     = false;
		bool IdlePeriodElapsed = (HIDInterfaceInfo->State.IdleCount && !(HIDInterfaceInfo->State.IdleMSRemaining));
    1c28:	84 85       	ldd	r24, Z+12	; 0x0c
    1c2a:	95 85       	ldd	r25, Z+13	; 0x0d
    1c2c:	00 97       	sbiw	r24, 0x00	; 0
    1c2e:	59 f0       	breq	.+22     	; 0x1c46 <HID_Device_USBTask+0xca>
    1c30:	81 e0       	ldi	r24, 0x01	; 1
	  return false;	
	
	return true;
}

void HID_Device_USBTask(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
    1c32:	90 e0       	ldi	r25, 0x00	; 0
    1c34:	26 85       	ldd	r18, Z+14	; 0x0e
    1c36:	37 85       	ldd	r19, Z+15	; 0x0f
    1c38:	21 15       	cp	r18, r1
    1c3a:	31 05       	cpc	r19, r1
    1c3c:	11 f0       	breq	.+4      	; 0x1c42 <HID_Device_USBTask+0xc6>
    1c3e:	80 e0       	ldi	r24, 0x00	; 0
    1c40:	90 e0       	ldi	r25, 0x00	; 0
    1c42:	4c 01       	movw	r8, r24
		memset(ReportINData, 0, sizeof(ReportINData));

		bool ForceSend         = CALLBACK_HID_Device_CreateHIDReport(HIDInterfaceInfo, &ReportID, HID_REPORT_ITEM_In,
		                                                             ReportINData, &ReportINSize);
		bool StatesChanged     = false;
		bool IdlePeriodElapsed = (HIDInterfaceInfo->State.IdleCount && !(HIDInterfaceInfo->State.IdleMSRemaining));
    1c44:	02 c0       	rjmp	.+4      	; 0x1c4a <HID_Device_USBTask+0xce>
    1c46:	88 24       	eor	r8, r8
    1c48:	99 24       	eor	r9, r9
    1c4a:	f7 01       	movw	r30, r14

		if (HIDInterfaceInfo->Config.PrevReportINBuffer != NULL)
    1c4c:	c6 80       	ldd	r12, Z+6	; 0x06
    1c4e:	d7 80       	ldd	r13, Z+7	; 0x07
    1c50:	c1 14       	cp	r12, r1
    1c52:	d1 04       	cpc	r13, r1
    1c54:	91 f0       	breq	.+36     	; 0x1c7a <HID_Device_USBTask+0xfe>
    1c56:	4a 81       	ldd	r20, Y+2	; 0x02
		{
			StatesChanged = (memcmp(ReportINData, HIDInterfaceInfo->Config.PrevReportINBuffer, ReportINSize) != 0);
    1c58:	5b 81       	ldd	r21, Y+3	; 0x03
    1c5a:	8b 2d       	mov	r24, r11
    1c5c:	9a 2d       	mov	r25, r10
    1c5e:	b6 01       	movw	r22, r12
    1c60:	d3 d1       	rcall	.+934    	; 0x2008 <memcmp>
    1c62:	01 e0       	ldi	r16, 0x01	; 1
    1c64:	00 97       	sbiw	r24, 0x00	; 0
    1c66:	09 f4       	brne	.+2      	; 0x1c6a <HID_Device_USBTask+0xee>
    1c68:	00 e0       	ldi	r16, 0x00	; 0
    1c6a:	f7 01       	movw	r30, r14
    1c6c:	40 85       	ldd	r20, Z+8	; 0x08
			memcpy(HIDInterfaceInfo->Config.PrevReportINBuffer, ReportINData, HIDInterfaceInfo->Config.PrevReportINBufferSize);
    1c6e:	c6 01       	movw	r24, r12
    1c70:	6b 2d       	mov	r22, r11
    1c72:	7a 2d       	mov	r23, r10
    1c74:	50 e0       	ldi	r21, 0x00	; 0
    1c76:	d5 d1       	rcall	.+938    	; 0x2022 <memcpy>
    1c78:	01 c0       	rjmp	.+2      	; 0x1c7c <HID_Device_USBTask+0x100>
    1c7a:	00 e0       	ldi	r16, 0x00	; 0
    1c7c:	8a 81       	ldd	r24, Y+2	; 0x02
    1c7e:	9b 81       	ldd	r25, Y+3	; 0x03

		memset(ReportINData, 0, sizeof(ReportINData));

		bool ForceSend         = CALLBACK_HID_Device_CreateHIDReport(HIDInterfaceInfo, &ReportID, HID_REPORT_ITEM_In,
		                                                             ReportINData, &ReportINSize);
		bool StatesChanged     = false;
    1c80:	00 97       	sbiw	r24, 0x00	; 0
		{
			StatesChanged = (memcmp(ReportINData, HIDInterfaceInfo->Config.PrevReportINBuffer, ReportINSize) != 0);
			memcpy(HIDInterfaceInfo->Config.PrevReportINBuffer, ReportINData, HIDInterfaceInfo->Config.PrevReportINBufferSize);
		}

		if (ReportINSize && (ForceSend || StatesChanged || IdlePeriodElapsed))
    1c82:	09 f1       	breq	.+66     	; 0x1cc6 <HID_Device_USBTask+0x14a>
    1c84:	11 23       	and	r17, r17
    1c86:	29 f4       	brne	.+10     	; 0x1c92 <HID_Device_USBTask+0x116>
    1c88:	00 23       	and	r16, r16
    1c8a:	19 f4       	brne	.+6      	; 0x1c92 <HID_Device_USBTask+0x116>
    1c8c:	81 14       	cp	r8, r1
    1c8e:	91 04       	cpc	r9, r1
    1c90:	d1 f0       	breq	.+52     	; 0x1cc6 <HID_Device_USBTask+0x14a>
    1c92:	f7 01       	movw	r30, r14
    1c94:	84 85       	ldd	r24, Z+12	; 0x0c
    1c96:	95 85       	ldd	r25, Z+13	; 0x0d
		{
			HIDInterfaceInfo->State.IdleMSRemaining = HIDInterfaceInfo->State.IdleCount;
    1c98:	97 87       	std	Z+15, r25	; 0x0f
    1c9a:	86 87       	std	Z+14, r24	; 0x0e
    1c9c:	81 81       	ldd	r24, Z+1	; 0x01
    1c9e:	8f 70       	andi	r24, 0x0F	; 15
    1ca0:	80 93 e9 00 	sts	0x00E9, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1ca4:	89 81       	ldd	r24, Y+1	; 0x01
    1ca6:	88 23       	and	r24, r24
    1ca8:	11 f0       	breq	.+4      	; 0x1cae <HID_Device_USBTask+0x132>

			Endpoint_SelectEndpoint(HIDInterfaceInfo->Config.ReportINEndpoint.Address);

			if (ReportID)
    1caa:	80 93 f1 00 	sts	0x00F1, r24
    1cae:	6a 81       	ldd	r22, Y+2	; 0x02
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    1cb0:	7b 81       	ldd	r23, Y+3	; 0x03
    1cb2:	8b 2d       	mov	r24, r11
			  Endpoint_Write_8(ReportID);

			Endpoint_Write_Stream_LE(ReportINData, ReportINSize, NULL);
    1cb4:	9a 2d       	mov	r25, r10
    1cb6:	40 e0       	ldi	r20, 0x00	; 0
    1cb8:	50 e0       	ldi	r21, 0x00	; 0
    1cba:	62 d8       	rcall	.-3900   	; 0xd80 <Endpoint_Write_Stream_LE>
    1cbc:	80 91 e8 00 	lds	r24, 0x00E8
    1cc0:	8e 77       	andi	r24, 0x7E	; 126
    1cc2:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1cc6:	80 91 e4 00 	lds	r24, 0x00E4
    1cca:	90 91 e5 00 	lds	r25, 0x00E5
    1cce:	f7 01       	movw	r30, r14
    1cd0:	93 87       	std	Z+11, r25	; 0x0b
    1cd2:	82 87       	std	Z+10, r24	; 0x0a
    1cd4:	7d be       	out	0x3d, r7	; 61

			Endpoint_ClearIN();
		}
		
		HIDInterfaceInfo->State.PrevFrameNum = USB_Device_GetFrameNumber();
    1cd6:	6e be       	out	0x3e, r6	; 62
    1cd8:	0f b6       	in	r0, 0x3f	; 63
    1cda:	f8 94       	cli
    1cdc:	5e be       	out	0x3e, r5	; 62
    1cde:	0f be       	out	0x3f, r0	; 63
	}
}
    1ce0:	4d be       	out	0x3d, r4	; 61
    1ce2:	0f 90       	pop	r0
    1ce4:	0f 90       	pop	r0
    1ce6:	0f 90       	pop	r0
    1ce8:	df 91       	pop	r29
    1cea:	cf 91       	pop	r28
    1cec:	1f 91       	pop	r17
    1cee:	0f 91       	pop	r16
    1cf0:	ff 90       	pop	r15
    1cf2:	ef 90       	pop	r14
    1cf4:	df 90       	pop	r13
    1cf6:	cf 90       	pop	r12
    1cf8:	bf 90       	pop	r11
    1cfa:	af 90       	pop	r10
    1cfc:	9f 90       	pop	r9
    1cfe:	8f 90       	pop	r8
    1d00:	7f 90       	pop	r7
    1d02:	6f 90       	pop	r6
    1d04:	5f 90       	pop	r5
    1d06:	4f 90       	pop	r4
    1d08:	08 95       	ret

00001d0a <MS_Device_ProcessControlRequest>:
#define  __INCLUDE_FROM_MS_DRIVER
#define  __INCLUDE_FROM_MASSSTORAGE_DEVICE_C
#include "MassStorageClassDevice.h"

void MS_Device_ProcessControlRequest(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
    1d0a:	cf 93       	push	r28
    1d0c:	df 93       	push	r29
    1d0e:	ec 01       	movw	r28, r24
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    1d10:	80 91 e8 00 	lds	r24, 0x00E8
	if (!(Endpoint_IsSETUPReceived()))
    1d14:	83 ff       	sbrs	r24, 3
    1d16:	33 c0       	rjmp	.+102    	; 0x1d7e <MS_Device_ProcessControlRequest+0x74>
	  return;

	if (USB_ControlRequest.wIndex != MSInterfaceInfo->Config.InterfaceNumber)
    1d18:	88 81       	ld	r24, Y
    1d1a:	90 e0       	ldi	r25, 0x00	; 0
    1d1c:	20 91 a1 01 	lds	r18, 0x01A1
    1d20:	30 91 a2 01 	lds	r19, 0x01A2
    1d24:	28 17       	cp	r18, r24
    1d26:	39 07       	cpc	r19, r25
    1d28:	51 f5       	brne	.+84     	; 0x1d7e <MS_Device_ProcessControlRequest+0x74>
	  return;

	switch (USB_ControlRequest.bRequest)
    1d2a:	80 91 9e 01 	lds	r24, 0x019E
    1d2e:	8e 3f       	cpi	r24, 0xFE	; 254
    1d30:	79 f0       	breq	.+30     	; 0x1d50 <MS_Device_ProcessControlRequest+0x46>
    1d32:	8f 3f       	cpi	r24, 0xFF	; 255
    1d34:	21 f5       	brne	.+72     	; 0x1d7e <MS_Device_ProcessControlRequest+0x74>
	{
		case MS_REQ_MassStorageReset:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    1d36:	80 91 9d 01 	lds	r24, 0x019D
    1d3a:	81 32       	cpi	r24, 0x21	; 33
    1d3c:	01 f5       	brne	.+64     	; 0x1d7e <MS_Device_ProcessControlRequest+0x74>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1d3e:	80 91 e8 00 	lds	r24, 0x00E8
    1d42:	87 7f       	andi	r24, 0xF7	; 247
    1d44:	80 93 e8 00 	sts	0x00E8, r24
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
    1d48:	82 da       	rcall	.-2812   	; 0x124e <Endpoint_ClearStatusStage>
    1d4a:	81 e0       	ldi	r24, 0x01	; 1

				MSInterfaceInfo->State.IsMassStoreReset = true;
    1d4c:	88 af       	sts	0x78, r24
    1d4e:	17 c0       	rjmp	.+46     	; 0x1d7e <MS_Device_ProcessControlRequest+0x74>
    1d50:	80 91 9d 01 	lds	r24, 0x019D
			}

			break;
		case MS_REQ_GetMaxLUN:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    1d54:	81 3a       	cpi	r24, 0xA1	; 161
    1d56:	99 f4       	brne	.+38     	; 0x1d7e <MS_Device_ProcessControlRequest+0x74>
    1d58:	80 91 e8 00 	lds	r24, 0x00E8
    1d5c:	87 7f       	andi	r24, 0xF7	; 247
    1d5e:	80 93 e8 00 	sts	0x00E8, r24
    1d62:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1d66:	80 ff       	sbrs	r24, 0
			{
				Endpoint_ClearSETUP();
				while (!(Endpoint_IsINReady()));
    1d68:	fc cf       	rjmp	.-8      	; 0x1d62 <MS_Device_ProcessControlRequest+0x58>
    1d6a:	8b 85       	ldd	r24, Y+11	; 0x0b
				Endpoint_Write_8(MSInterfaceInfo->Config.TotalLUNs - 1);
    1d6c:	81 50       	subi	r24, 0x01	; 1
    1d6e:	80 93 f1 00 	sts	0x00F1, r24
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    1d72:	80 91 e8 00 	lds	r24, 0x00E8
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1d76:	8e 77       	andi	r24, 0x7E	; 126
    1d78:	80 93 e8 00 	sts	0x00E8, r24
    1d7c:	68 da       	rcall	.-2864   	; 0x124e <Endpoint_ClearStatusStage>
				Endpoint_ClearIN();
				Endpoint_ClearStatusStage();
    1d7e:	df 91       	pop	r29
    1d80:	cf 91       	pop	r28
			}

			break;
	}
}
    1d82:	08 95       	ret

00001d84 <MS_Device_ConfigureEndpoints>:
    1d84:	cf 93       	push	r28
    1d86:	df 93       	push	r29

bool MS_Device_ConfigureEndpoints(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
    1d88:	ec 01       	movw	r28, r24
	memset(&MSInterfaceInfo->State, 0x00, sizeof(MSInterfaceInfo->State));
    1d8a:	0c 96       	adiw	r24, 0x0c	; 12
    1d8c:	fc 01       	movw	r30, r24
    1d8e:	8d e2       	ldi	r24, 0x2D	; 45
    1d90:	df 01       	movw	r26, r30
    1d92:	1d 92       	st	X+, r1
    1d94:	8a 95       	dec	r24
    1d96:	e9 f7       	brne	.-6      	; 0x1d92 <MS_Device_ConfigureEndpoints+0xe>

	MSInterfaceInfo->Config.DataINEndpoint.Type  = EP_TYPE_BULK;
    1d98:	82 e0       	ldi	r24, 0x02	; 2
    1d9a:	8c 83       	std	Y+4, r24	; 0x04
	MSInterfaceInfo->Config.DataOUTEndpoint.Type = EP_TYPE_BULK;
    1d9c:	89 87       	std	Y+9, r24	; 0x09

	if (!(Endpoint_ConfigureEndpointTable(&MSInterfaceInfo->Config.DataINEndpoint, 1)))
    1d9e:	ce 01       	movw	r24, r28
    1da0:	01 96       	adiw	r24, 0x01	; 1
    1da2:	61 e0       	ldi	r22, 0x01	; 1
    1da4:	18 da       	rcall	.-3024   	; 0x11d6 <Endpoint_ConfigureEndpointTable>
    1da6:	88 23       	and	r24, r24
    1da8:	29 f0       	breq	.+10     	; 0x1db4 <MS_Device_ConfigureEndpoints+0x30>
    1daa:	ce 01       	movw	r24, r28
	  return false;

	if (!(Endpoint_ConfigureEndpointTable(&MSInterfaceInfo->Config.DataOUTEndpoint, 1)))
    1dac:	06 96       	adiw	r24, 0x06	; 6
    1dae:	61 e0       	ldi	r22, 0x01	; 1
    1db0:	12 da       	rcall	.-3036   	; 0x11d6 <Endpoint_ConfigureEndpointTable>
    1db2:	01 c0       	rjmp	.+2      	; 0x1db6 <MS_Device_ConfigureEndpoints+0x32>
    1db4:	80 e0       	ldi	r24, 0x00	; 0
    1db6:	df 91       	pop	r29

	MSInterfaceInfo->Config.DataINEndpoint.Type  = EP_TYPE_BULK;
	MSInterfaceInfo->Config.DataOUTEndpoint.Type = EP_TYPE_BULK;

	if (!(Endpoint_ConfigureEndpointTable(&MSInterfaceInfo->Config.DataINEndpoint, 1)))
	  return false;
    1db8:	cf 91       	pop	r28

	if (!(Endpoint_ConfigureEndpointTable(&MSInterfaceInfo->Config.DataOUTEndpoint, 1)))
	  return false;

	return true;
}
    1dba:	08 95       	ret

00001dbc <MS_Device_USBTask>:
    1dbc:	ef 92       	push	r14
    1dbe:	ff 92       	push	r15

void MS_Device_USBTask(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
    1dc0:	0f 93       	push	r16
    1dc2:	1f 93       	push	r17
    1dc4:	cf 93       	push	r28
    1dc6:	df 93       	push	r29
    1dc8:	00 d0       	rcall	.+0      	; 0x1dca <MS_Device_USBTask+0xe>
    1dca:	cd b7       	in	r28, 0x3d	; 61
    1dcc:	de b7       	in	r29, 0x3e	; 62
    1dce:	8c 01       	movw	r16, r24
	if (USB_DeviceState != DEVICE_STATE_Configured)
    1dd0:	80 91 9c 01 	lds	r24, 0x019C
    1dd4:	84 30       	cpi	r24, 0x04	; 4
    1dd6:	09 f0       	breq	.+2      	; 0x1dda <MS_Device_USBTask+0x1e>
    1dd8:	0e c1       	rjmp	.+540    	; 0x1ff6 <MS_Device_USBTask+0x23a>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1dda:	f8 01       	movw	r30, r16
    1ddc:	86 81       	ldd	r24, Z+6	; 0x06
    1dde:	8f 70       	andi	r24, 0x0F	; 15
    1de0:	80 93 e9 00 	sts	0x00E9, r24
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    1de4:	80 91 e8 00 	lds	r24, 0x00E8
	  return;

	Endpoint_SelectEndpoint(MSInterfaceInfo->Config.DataOUTEndpoint.Address);

	if (Endpoint_IsOUTReceived())
    1de8:	82 ff       	sbrs	r24, 2
    1dea:	cb c0       	rjmp	.+406    	; 0x1f82 <MS_Device_USBTask+0x1c6>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1dec:	86 81       	ldd	r24, Z+6	; 0x06
    1dee:	8f 70       	andi	r24, 0x0F	; 15
    1df0:	80 93 e9 00 	sts	0x00E9, r24
{
	uint16_t BytesProcessed;

	Endpoint_SelectEndpoint(MSInterfaceInfo->Config.DataOUTEndpoint.Address);
	
	BytesProcessed = 0;
    1df4:	1a 82       	std	Y+2, r1	; 0x02
    1df6:	19 82       	std	Y+1, r1	; 0x01
	while (Endpoint_Read_Stream_LE(&MSInterfaceInfo->State.CommandBlock,
    1df8:	2c e0       	ldi	r18, 0x0C	; 12
    1dfa:	e2 2e       	mov	r14, r18
    1dfc:	f1 2c       	mov	r15, r1
    1dfe:	e0 0e       	add	r14, r16
    1e00:	f1 1e       	adc	r15, r17
    1e02:	04 c0       	rjmp	.+8      	; 0x1e0c <MS_Device_USBTask+0x50>
	                               (sizeof(MS_CommandBlockWrapper_t) - 16), &BytesProcessed) ==
	                               ENDPOINT_RWSTREAM_IncompleteTransfer)
	{
		if (MSInterfaceInfo->State.IsMassStoreReset)
    1e04:	80 ad       	sts	0x60, r24
    1e06:	88 23       	and	r24, r24
    1e08:	09 f0       	breq	.+2      	; 0x1e0c <MS_Device_USBTask+0x50>
    1e0a:	bb c0       	rjmp	.+374    	; 0x1f82 <MS_Device_USBTask+0x1c6>
	uint16_t BytesProcessed;

	Endpoint_SelectEndpoint(MSInterfaceInfo->Config.DataOUTEndpoint.Address);
	
	BytesProcessed = 0;
	while (Endpoint_Read_Stream_LE(&MSInterfaceInfo->State.CommandBlock,
    1e0c:	c7 01       	movw	r24, r14
    1e0e:	6f e0       	ldi	r22, 0x0F	; 15
    1e10:	70 e0       	ldi	r23, 0x00	; 0
    1e12:	ae 01       	movw	r20, r28
    1e14:	4f 5f       	subi	r20, 0xFF	; 255
    1e16:	5f 4f       	sbci	r21, 0xFF	; 255
    1e18:	58 d8       	rcall	.-3920   	; 0xeca <Endpoint_Read_Stream_LE>
    1e1a:	f8 01       	movw	r30, r16
	                               (sizeof(MS_CommandBlockWrapper_t) - 16), &BytesProcessed) ==
	                               ENDPOINT_RWSTREAM_IncompleteTransfer)
	{
		if (MSInterfaceInfo->State.IsMassStoreReset)
    1e1c:	85 30       	cpi	r24, 0x05	; 5
	uint16_t BytesProcessed;

	Endpoint_SelectEndpoint(MSInterfaceInfo->Config.DataOUTEndpoint.Address);
	
	BytesProcessed = 0;
	while (Endpoint_Read_Stream_LE(&MSInterfaceInfo->State.CommandBlock,
    1e1e:	91 f3       	breq	.-28     	; 0x1e04 <MS_Device_USBTask+0x48>
    1e20:	84 85       	ldd	r24, Z+12	; 0x0c
	{
		if (MSInterfaceInfo->State.IsMassStoreReset)
		  return false;
	}

	if ((MSInterfaceInfo->State.CommandBlock.Signature         != CPU_TO_LE32(MS_CBW_SIGNATURE))     ||
    1e22:	95 85       	ldd	r25, Z+13	; 0x0d
    1e24:	a6 85       	ldd	r26, Z+14	; 0x0e
    1e26:	b7 85       	ldd	r27, Z+15	; 0x0f
    1e28:	85 35       	cpi	r24, 0x55	; 85
    1e2a:	f3 e5       	ldi	r31, 0x53	; 83
    1e2c:	9f 07       	cpc	r25, r31
    1e2e:	f2 e4       	ldi	r31, 0x42	; 66
    1e30:	af 07       	cpc	r26, r31
    1e32:	f3 e4       	ldi	r31, 0x43	; 67
    1e34:	bf 07       	cpc	r27, r31
    1e36:	81 f4       	brne	.+32     	; 0x1e58 <MS_Device_USBTask+0x9c>
    1e38:	f8 01       	movw	r30, r16
    1e3a:	91 8d       	ldd	r25, Z+25	; 0x19
    1e3c:	83 85       	ldd	r24, Z+11	; 0x0b
    1e3e:	98 17       	cp	r25, r24
    1e40:	58 f4       	brcc	.+22     	; 0x1e58 <MS_Device_USBTask+0x9c>
    1e42:	80 8d       	ldd	r24, Z+24	; 0x18
	    (MSInterfaceInfo->State.CommandBlock.LUN               >= MSInterfaceInfo->Config.TotalLUNs) ||
		(MSInterfaceInfo->State.CommandBlock.Flags              & 0x1F)                              ||
    1e44:	90 e0       	ldi	r25, 0x00	; 0
    1e46:	8f 71       	andi	r24, 0x1F	; 31
    1e48:	90 70       	andi	r25, 0x00	; 0
    1e4a:	00 97       	sbiw	r24, 0x00	; 0
		if (MSInterfaceInfo->State.IsMassStoreReset)
		  return false;
	}

	if ((MSInterfaceInfo->State.CommandBlock.Signature         != CPU_TO_LE32(MS_CBW_SIGNATURE))     ||
	    (MSInterfaceInfo->State.CommandBlock.LUN               >= MSInterfaceInfo->Config.TotalLUNs) ||
    1e4c:	29 f4       	brne	.+10     	; 0x1e58 <MS_Device_USBTask+0x9c>
    1e4e:	82 8d       	ldd	r24, Z+26	; 0x1a
		(MSInterfaceInfo->State.CommandBlock.Flags              & 0x1F)                              ||
		(MSInterfaceInfo->State.CommandBlock.SCSICommandLength == 0)                                 ||
    1e50:	88 23       	and	r24, r24
		  return false;
	}

	if ((MSInterfaceInfo->State.CommandBlock.Signature         != CPU_TO_LE32(MS_CBW_SIGNATURE))     ||
	    (MSInterfaceInfo->State.CommandBlock.LUN               >= MSInterfaceInfo->Config.TotalLUNs) ||
		(MSInterfaceInfo->State.CommandBlock.Flags              & 0x1F)                              ||
    1e52:	11 f0       	breq	.+4      	; 0x1e58 <MS_Device_USBTask+0x9c>
    1e54:	81 31       	cpi	r24, 0x11	; 17
		(MSInterfaceInfo->State.CommandBlock.SCSICommandLength == 0)                                 ||
    1e56:	80 f0       	brcs	.+32     	; 0x1e78 <MS_Device_USBTask+0xbc>
    1e58:	80 91 eb 00 	lds	r24, 0x00EB
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    1e5c:	80 62       	ori	r24, 0x20	; 32
    1e5e:	80 93 eb 00 	sts	0x00EB, r24
    1e62:	f8 01       	movw	r30, r16
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1e64:	81 81       	ldd	r24, Z+1	; 0x01
    1e66:	8f 70       	andi	r24, 0x0F	; 15
    1e68:	80 93 e9 00 	sts	0x00E9, r24
    1e6c:	80 91 eb 00 	lds	r24, 0x00EB
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    1e70:	80 62       	ori	r24, 0x20	; 32
    1e72:	80 93 eb 00 	sts	0x00EB, r24
    1e76:	85 c0       	rjmp	.+266    	; 0x1f82 <MS_Device_USBTask+0x1c6>
    1e78:	1a 82       	std	Y+2, r1	; 0x02
		Endpoint_StallTransaction();

		return false;
	}

	BytesProcessed = 0;
    1e7a:	19 82       	std	Y+1, r1	; 0x01
    1e7c:	9b e1       	ldi	r25, 0x1B	; 27
	while (Endpoint_Read_Stream_LE(&MSInterfaceInfo->State.CommandBlock.SCSICommandData,
    1e7e:	e9 2e       	mov	r14, r25
    1e80:	f1 2c       	mov	r15, r1
    1e82:	e0 0e       	add	r14, r16
    1e84:	f1 1e       	adc	r15, r17
    1e86:	05 c0       	rjmp	.+10     	; 0x1e92 <MS_Device_USBTask+0xd6>
    1e88:	f8 01       	movw	r30, r16
	                                MSInterfaceInfo->State.CommandBlock.SCSICommandLength, &BytesProcessed) ==
	                                ENDPOINT_RWSTREAM_IncompleteTransfer)
	{
		if (MSInterfaceInfo->State.IsMassStoreReset)
    1e8a:	80 ad       	sts	0x60, r24
    1e8c:	88 23       	and	r24, r24
    1e8e:	09 f0       	breq	.+2      	; 0x1e92 <MS_Device_USBTask+0xd6>
    1e90:	78 c0       	rjmp	.+240    	; 0x1f82 <MS_Device_USBTask+0x1c6>
    1e92:	f8 01       	movw	r30, r16

		return false;
	}

	BytesProcessed = 0;
	while (Endpoint_Read_Stream_LE(&MSInterfaceInfo->State.CommandBlock.SCSICommandData,
    1e94:	62 8d       	ldd	r22, Z+26	; 0x1a
    1e96:	c7 01       	movw	r24, r14
    1e98:	70 e0       	ldi	r23, 0x00	; 0
    1e9a:	ae 01       	movw	r20, r28
    1e9c:	4f 5f       	subi	r20, 0xFF	; 255
    1e9e:	5f 4f       	sbci	r21, 0xFF	; 255
    1ea0:	14 d8       	rcall	.-4056   	; 0xeca <Endpoint_Read_Stream_LE>
    1ea2:	85 30       	cpi	r24, 0x05	; 5
    1ea4:	89 f3       	breq	.-30     	; 0x1e88 <MS_Device_USBTask+0xcc>
    1ea6:	80 91 e8 00 	lds	r24, 0x00E8
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    1eaa:	8b 77       	andi	r24, 0x7B	; 123
    1eac:	80 93 e8 00 	sts	0x00E8, r24
    1eb0:	f8 01       	movw	r30, r16
    1eb2:	80 8d       	ldd	r24, Z+24	; 0x18

	if (Endpoint_IsOUTReceived())
	{
		if (MS_Device_ReadInCommandBlock(MSInterfaceInfo))
		{
			if (MSInterfaceInfo->State.CommandBlock.Flags & MS_COMMAND_DIR_DATA_IN)
    1eb4:	87 ff       	sbrs	r24, 7
    1eb6:	04 c0       	rjmp	.+8      	; 0x1ec0 <MS_Device_USBTask+0x104>
    1eb8:	81 81       	ldd	r24, Z+1	; 0x01
    1eba:	8f 70       	andi	r24, 0x0F	; 15
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1ebc:	80 93 e9 00 	sts	0x00E9, r24
    1ec0:	c8 01       	movw	r24, r16
    1ec2:	0e 94 67 01 	call	0x2ce	; 0x2ce <CALLBACK_MS_Device_SCSICommandReceived>
			  Endpoint_SelectEndpoint(MSInterfaceInfo->Config.DataINEndpoint.Address);

			bool SCSICommandResult = CALLBACK_MS_Device_SCSICommandReceived(MSInterfaceInfo);
    1ec6:	91 e0       	ldi	r25, 0x01	; 1
    1ec8:	98 27       	eor	r25, r24
	  return false;

	return true;
}

void MS_Device_USBTask(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
    1eca:	f8 01       	movw	r30, r16
    1ecc:	97 ab       	sts	0x57, r25
			if (MSInterfaceInfo->State.CommandBlock.Flags & MS_COMMAND_DIR_DATA_IN)
			  Endpoint_SelectEndpoint(MSInterfaceInfo->Config.DataINEndpoint.Address);

			bool SCSICommandResult = CALLBACK_MS_Device_SCSICommandReceived(MSInterfaceInfo);

			MSInterfaceInfo->State.CommandStatus.Status              = (SCSICommandResult) ? MS_SCSI_COMMAND_Pass : MS_SCSI_COMMAND_Fail;
    1ece:	45 e5       	ldi	r20, 0x55	; 85
    1ed0:	53 e5       	ldi	r21, 0x53	; 83
			MSInterfaceInfo->State.CommandStatus.Signature           = CPU_TO_LE32(MS_CSW_SIGNATURE);
    1ed2:	62 e4       	ldi	r22, 0x42	; 66
    1ed4:	73 e5       	ldi	r23, 0x53	; 83
    1ed6:	43 a7       	lds	r20, 0x73
    1ed8:	54 a7       	lds	r21, 0x74
    1eda:	65 a7       	lds	r22, 0x75
    1edc:	76 a7       	lds	r23, 0x76
    1ede:	40 89       	ldd	r20, Z+16	; 0x10
    1ee0:	51 89       	ldd	r21, Z+17	; 0x11
			MSInterfaceInfo->State.CommandStatus.Tag                 = MSInterfaceInfo->State.CommandBlock.Tag;
    1ee2:	62 89       	ldd	r22, Z+18	; 0x12
    1ee4:	73 89       	ldd	r23, Z+19	; 0x13
    1ee6:	47 a7       	lds	r20, 0x77
    1ee8:	50 ab       	sts	0x50, r21
    1eea:	61 ab       	sts	0x51, r22
    1eec:	72 ab       	sts	0x52, r23
    1eee:	44 89       	ldd	r20, Z+20	; 0x14
    1ef0:	55 89       	ldd	r21, Z+21	; 0x15
			MSInterfaceInfo->State.CommandStatus.DataTransferResidue = MSInterfaceInfo->State.CommandBlock.DataTransferLength;
    1ef2:	66 89       	ldd	r22, Z+22	; 0x16
    1ef4:	77 89       	ldd	r23, Z+23	; 0x17
    1ef6:	43 ab       	sts	0x53, r20
    1ef8:	54 ab       	sts	0x54, r21
    1efa:	65 ab       	sts	0x55, r22
    1efc:	76 ab       	sts	0x56, r23
    1efe:	88 23       	and	r24, r24
    1f00:	51 f4       	brne	.+20     	; 0x1f16 <MS_Device_USBTask+0x15a>

			if (!(SCSICommandResult) && (le32_to_cpu(MSInterfaceInfo->State.CommandStatus.DataTransferResidue)))
    1f02:	41 15       	cp	r20, r1
    1f04:	51 05       	cpc	r21, r1
    1f06:	61 05       	cpc	r22, r1
    1f08:	71 05       	cpc	r23, r1
    1f0a:	29 f0       	breq	.+10     	; 0x1f16 <MS_Device_USBTask+0x15a>
    1f0c:	80 91 eb 00 	lds	r24, 0x00EB
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    1f10:	80 62       	ori	r24, 0x20	; 32
    1f12:	80 93 eb 00 	sts	0x00EB, r24
    1f16:	f8 01       	movw	r30, r16
    1f18:	86 81       	ldd	r24, Z+6	; 0x06
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1f1a:	8f 70       	andi	r24, 0x0F	; 15
    1f1c:	80 93 e9 00 	sts	0x00E9, r24
    1f20:	03 c0       	rjmp	.+6      	; 0x1f28 <MS_Device_USBTask+0x16c>
    1f22:	80 ad       	sts	0x60, r24
    1f24:	88 23       	and	r24, r24
	{
		#if !defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_USBTask();
		#endif

		if (MSInterfaceInfo->State.IsMassStoreReset)
    1f26:	69 f5       	brne	.+90     	; 0x1f82 <MS_Device_USBTask+0x1c6>
    1f28:	80 91 eb 00 	lds	r24, 0x00EB
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    1f2c:	f8 01       	movw	r30, r16
    1f2e:	85 fd       	sbrc	r24, 5
    1f30:	f8 cf       	rjmp	.-16     	; 0x1f22 <MS_Device_USBTask+0x166>

static void MS_Device_ReturnCommandStatus(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
	Endpoint_SelectEndpoint(MSInterfaceInfo->Config.DataOUTEndpoint.Address);

	while (Endpoint_IsStalled())
    1f32:	81 81       	ldd	r24, Z+1	; 0x01
    1f34:	8f 70       	andi	r24, 0x0F	; 15
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1f36:	80 93 e9 00 	sts	0x00E9, r24
    1f3a:	04 c0       	rjmp	.+8      	; 0x1f44 <MS_Device_USBTask+0x188>
    1f3c:	f8 01       	movw	r30, r16
    1f3e:	80 ad       	sts	0x60, r24
	{
		#if !defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_USBTask();
		#endif

		if (MSInterfaceInfo->State.IsMassStoreReset)
    1f40:	88 23       	and	r24, r24
    1f42:	f9 f4       	brne	.+62     	; 0x1f82 <MS_Device_USBTask+0x1c6>
    1f44:	80 91 eb 00 	lds	r24, 0x00EB
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    1f48:	85 fd       	sbrc	r24, 5
    1f4a:	f8 cf       	rjmp	.-16     	; 0x1f3c <MS_Device_USBTask+0x180>
		  return;
	}

	Endpoint_SelectEndpoint(MSInterfaceInfo->Config.DataINEndpoint.Address);

	while (Endpoint_IsStalled())
    1f4c:	1a 82       	std	Y+2, r1	; 0x02
    1f4e:	19 82       	std	Y+1, r1	; 0x01

		if (MSInterfaceInfo->State.IsMassStoreReset)
		  return;
	}

	uint16_t BytesProcessed = 0;
    1f50:	8b e2       	ldi	r24, 0x2B	; 43
    1f52:	e8 2e       	mov	r14, r24
	while (Endpoint_Write_Stream_LE(&MSInterfaceInfo->State.CommandStatus,
    1f54:	f1 2c       	mov	r15, r1
    1f56:	e0 0e       	add	r14, r16
    1f58:	f1 1e       	adc	r15, r17
    1f5a:	04 c0       	rjmp	.+8      	; 0x1f64 <MS_Device_USBTask+0x1a8>
    1f5c:	f8 01       	movw	r30, r16
    1f5e:	80 ad       	sts	0x60, r24
	                                sizeof(MS_CommandStatusWrapper_t), &BytesProcessed) ==
	                                ENDPOINT_RWSTREAM_IncompleteTransfer)
	{
		if (MSInterfaceInfo->State.IsMassStoreReset)
    1f60:	88 23       	and	r24, r24
    1f62:	79 f4       	brne	.+30     	; 0x1f82 <MS_Device_USBTask+0x1c6>
    1f64:	c7 01       	movw	r24, r14
    1f66:	6d e0       	ldi	r22, 0x0D	; 13
		if (MSInterfaceInfo->State.IsMassStoreReset)
		  return;
	}

	uint16_t BytesProcessed = 0;
	while (Endpoint_Write_Stream_LE(&MSInterfaceInfo->State.CommandStatus,
    1f68:	70 e0       	ldi	r23, 0x00	; 0
    1f6a:	ae 01       	movw	r20, r28
    1f6c:	4f 5f       	subi	r20, 0xFF	; 255
    1f6e:	5f 4f       	sbci	r21, 0xFF	; 255
    1f70:	0e 94 c0 06 	call	0xd80	; 0xd80 <Endpoint_Write_Stream_LE>
    1f74:	85 30       	cpi	r24, 0x05	; 5
    1f76:	91 f3       	breq	.-28     	; 0x1f5c <MS_Device_USBTask+0x1a0>
    1f78:	80 91 e8 00 	lds	r24, 0x00E8
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1f7c:	8e 77       	andi	r24, 0x7E	; 126
    1f7e:	80 93 e8 00 	sts	0x00E8, r24
    1f82:	f8 01       	movw	r30, r16
    1f84:	80 ad       	sts	0x60, r24

			MS_Device_ReturnCommandStatus(MSInterfaceInfo);
		}
	}

	if (MSInterfaceInfo->State.IsMassStoreReset)
    1f86:	88 23       	and	r24, r24
    1f88:	b1 f1       	breq	.+108    	; 0x1ff6 <MS_Device_USBTask+0x23a>
    1f8a:	26 81       	ldd	r18, Z+6	; 0x06
    1f8c:	2f 70       	andi	r18, 0x0F	; 15
			 *  \param[in] Address  Endpoint address whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t Address)
			{
				UERST = (1 << (Address & ENDPOINT_EPNUM_MASK));
    1f8e:	81 e0       	ldi	r24, 0x01	; 1
    1f90:	90 e0       	ldi	r25, 0x00	; 0
    1f92:	ac 01       	movw	r20, r24
    1f94:	02 c0       	rjmp	.+4      	; 0x1f9a <MS_Device_USBTask+0x1de>
    1f96:	44 0f       	add	r20, r20
    1f98:	55 1f       	adc	r21, r21
    1f9a:	2a 95       	dec	r18
    1f9c:	e2 f7       	brpl	.-8      	; 0x1f96 <MS_Device_USBTask+0x1da>
    1f9e:	40 93 ea 00 	sts	0x00EA, r20
    1fa2:	10 92 ea 00 	sts	0x00EA, r1
				UERST = 0;
    1fa6:	21 81       	ldd	r18, Z+1	; 0x01
    1fa8:	2f 70       	andi	r18, 0x0F	; 15
			 *  \param[in] Address  Endpoint address whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t Address)
			{
				UERST = (1 << (Address & ENDPOINT_EPNUM_MASK));
    1faa:	02 c0       	rjmp	.+4      	; 0x1fb0 <MS_Device_USBTask+0x1f4>
    1fac:	88 0f       	add	r24, r24
    1fae:	99 1f       	adc	r25, r25
    1fb0:	2a 95       	dec	r18
    1fb2:	e2 f7       	brpl	.-8      	; 0x1fac <MS_Device_USBTask+0x1f0>
    1fb4:	80 93 ea 00 	sts	0x00EA, r24
    1fb8:	10 92 ea 00 	sts	0x00EA, r1
				UERST = 0;
    1fbc:	86 81       	ldd	r24, Z+6	; 0x06
    1fbe:	8f 70       	andi	r24, 0x0F	; 15
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1fc0:	80 93 e9 00 	sts	0x00E9, r24
    1fc4:	80 91 eb 00 	lds	r24, 0x00EB
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
    1fc8:	80 61       	ori	r24, 0x10	; 16
    1fca:	80 93 eb 00 	sts	0x00EB, r24
    1fce:	80 91 eb 00 	lds	r24, 0x00EB

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
    1fd2:	88 60       	ori	r24, 0x08	; 8
    1fd4:	80 93 eb 00 	sts	0x00EB, r24
    1fd8:	81 81       	ldd	r24, Z+1	; 0x01
    1fda:	8f 70       	andi	r24, 0x0F	; 15
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1fdc:	80 93 e9 00 	sts	0x00E9, r24
    1fe0:	80 91 eb 00 	lds	r24, 0x00EB
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
    1fe4:	80 61       	ori	r24, 0x10	; 16
    1fe6:	80 93 eb 00 	sts	0x00EB, r24
    1fea:	80 91 eb 00 	lds	r24, 0x00EB

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
    1fee:	88 60       	ori	r24, 0x08	; 8
    1ff0:	80 93 eb 00 	sts	0x00EB, r24
    1ff4:	10 ae       	sts	0xb0, r17
    1ff6:	0f 90       	pop	r0
		Endpoint_ResetDataToggle();
		Endpoint_SelectEndpoint(MSInterfaceInfo->Config.DataINEndpoint.Address);
		Endpoint_ClearStall();
		Endpoint_ResetDataToggle();

		MSInterfaceInfo->State.IsMassStoreReset = false;
    1ff8:	0f 90       	pop	r0
	}
}
    1ffa:	df 91       	pop	r29
    1ffc:	cf 91       	pop	r28
    1ffe:	1f 91       	pop	r17
    2000:	0f 91       	pop	r16
    2002:	ff 90       	pop	r15
    2004:	ef 90       	pop	r14
    2006:	08 95       	ret

00002008 <memcmp>:
    2008:	fb 01       	movw	r30, r22
    200a:	dc 01       	movw	r26, r24
    200c:	04 c0       	rjmp	.+8      	; 0x2016 <memcmp+0xe>
    200e:	8d 91       	ld	r24, X+
    2010:	01 90       	ld	r0, Z+
    2012:	80 19       	sub	r24, r0
    2014:	21 f4       	brne	.+8      	; 0x201e <memcmp+0x16>
    2016:	41 50       	subi	r20, 0x01	; 1
    2018:	50 40       	sbci	r21, 0x00	; 0
    201a:	c8 f7       	brcc	.-14     	; 0x200e <memcmp+0x6>
    201c:	88 1b       	sub	r24, r24
    201e:	99 0b       	sbc	r25, r25
    2020:	08 95       	ret

00002022 <memcpy>:
    2022:	fb 01       	movw	r30, r22
    2024:	dc 01       	movw	r26, r24
    2026:	02 c0       	rjmp	.+4      	; 0x202c <memcpy+0xa>
    2028:	01 90       	ld	r0, Z+
    202a:	0d 92       	st	X+, r0
    202c:	41 50       	subi	r20, 0x01	; 1
    202e:	50 40       	sbci	r21, 0x00	; 0
    2030:	d8 f7       	brcc	.-10     	; 0x2028 <memcpy+0x6>
    2032:	08 95       	ret

00002034 <memset>:
    2034:	dc 01       	movw	r26, r24
    2036:	01 c0       	rjmp	.+2      	; 0x203a <memset+0x6>
    2038:	6d 93       	st	X+, r22
    203a:	41 50       	subi	r20, 0x01	; 1
    203c:	50 40       	sbci	r21, 0x00	; 0
    203e:	e0 f7       	brcc	.-8      	; 0x2038 <memset+0x4>
    2040:	08 95       	ret

00002042 <_exit>:
    2042:	f8 94       	cli

00002044 <__stop_program>:
    2044:	ff cf       	rjmp	.-2      	; 0x2044 <__stop_program>
