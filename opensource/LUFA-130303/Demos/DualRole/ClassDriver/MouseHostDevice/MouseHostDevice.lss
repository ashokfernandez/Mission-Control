
MouseHostDevice.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000010c  00800100  00002b54  00002be8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002b54  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000002a  0080020c  0080020c  00002cf4  2**0
                  ALLOC
  3 .stab         00001134  00000000  00000000  00002cf4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000422  00000000  00000000  00003e28  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000c38  00000000  00000000  00004250  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000150dd  00000000  00000000  00004e88  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00004cb8  00000000  00000000  00019f65  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00009324  00000000  00000000  0001ec1d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00002410  00000000  00000000  00027f44  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00006a08  00000000  00000000  0002a354  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000d87a  00000000  00000000  00030d5c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000f90  00000000  00000000  0003e5d6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	34 c1       	rjmp	.+616    	; 0x26a <__ctors_end>
       2:	00 00       	nop
       4:	51 c1       	rjmp	.+674    	; 0x2a8 <__bad_interrupt>
       6:	00 00       	nop
       8:	4f c1       	rjmp	.+670    	; 0x2a8 <__bad_interrupt>
       a:	00 00       	nop
       c:	4d c1       	rjmp	.+666    	; 0x2a8 <__bad_interrupt>
       e:	00 00       	nop
      10:	4b c1       	rjmp	.+662    	; 0x2a8 <__bad_interrupt>
      12:	00 00       	nop
      14:	49 c1       	rjmp	.+658    	; 0x2a8 <__bad_interrupt>
      16:	00 00       	nop
      18:	47 c1       	rjmp	.+654    	; 0x2a8 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	45 c1       	rjmp	.+650    	; 0x2a8 <__bad_interrupt>
      1e:	00 00       	nop
      20:	43 c1       	rjmp	.+646    	; 0x2a8 <__bad_interrupt>
      22:	00 00       	nop
      24:	41 c1       	rjmp	.+642    	; 0x2a8 <__bad_interrupt>
      26:	00 00       	nop
      28:	0c 94 b5 09 	jmp	0x136a	; 0x136a <__vector_10>
      2c:	3d c1       	rjmp	.+634    	; 0x2a8 <__bad_interrupt>
      2e:	00 00       	nop
      30:	3b c1       	rjmp	.+630    	; 0x2a8 <__bad_interrupt>
      32:	00 00       	nop
      34:	39 c1       	rjmp	.+626    	; 0x2a8 <__bad_interrupt>
      36:	00 00       	nop
      38:	37 c1       	rjmp	.+622    	; 0x2a8 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	35 c1       	rjmp	.+618    	; 0x2a8 <__bad_interrupt>
      3e:	00 00       	nop
      40:	33 c1       	rjmp	.+614    	; 0x2a8 <__bad_interrupt>
      42:	00 00       	nop
      44:	31 c1       	rjmp	.+610    	; 0x2a8 <__bad_interrupt>
      46:	00 00       	nop
      48:	2f c1       	rjmp	.+606    	; 0x2a8 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	2d c1       	rjmp	.+602    	; 0x2a8 <__bad_interrupt>
      4e:	00 00       	nop
      50:	2b c1       	rjmp	.+598    	; 0x2a8 <__bad_interrupt>
      52:	00 00       	nop
      54:	29 c1       	rjmp	.+594    	; 0x2a8 <__bad_interrupt>
      56:	00 00       	nop
      58:	27 c1       	rjmp	.+590    	; 0x2a8 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	25 c1       	rjmp	.+586    	; 0x2a8 <__bad_interrupt>
      5e:	00 00       	nop
      60:	23 c1       	rjmp	.+582    	; 0x2a8 <__bad_interrupt>
      62:	00 00       	nop
      64:	21 c1       	rjmp	.+578    	; 0x2a8 <__bad_interrupt>
      66:	00 00       	nop
      68:	1f c1       	rjmp	.+574    	; 0x2a8 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	1d c1       	rjmp	.+570    	; 0x2a8 <__bad_interrupt>
      6e:	00 00       	nop
      70:	1b c1       	rjmp	.+566    	; 0x2a8 <__bad_interrupt>
      72:	00 00       	nop
      74:	19 c1       	rjmp	.+562    	; 0x2a8 <__bad_interrupt>
      76:	00 00       	nop
      78:	17 c1       	rjmp	.+558    	; 0x2a8 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	15 c1       	rjmp	.+554    	; 0x2a8 <__bad_interrupt>
      7e:	00 00       	nop
      80:	13 c1       	rjmp	.+550    	; 0x2a8 <__bad_interrupt>
      82:	00 00       	nop
      84:	11 c1       	rjmp	.+546    	; 0x2a8 <__bad_interrupt>
      86:	00 00       	nop
      88:	0f c1       	rjmp	.+542    	; 0x2a8 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	0d c1       	rjmp	.+538    	; 0x2a8 <__bad_interrupt>
      8e:	00 00       	nop
      90:	0b c1       	rjmp	.+534    	; 0x2a8 <__bad_interrupt>
      92:	00 00       	nop
      94:	09 c1       	rjmp	.+530    	; 0x2a8 <__bad_interrupt>
      96:	00 00       	nop

00000098 <__c.5040>:
      98:	1b 5b 33 36 6d 4d 6f 75 73 65 20 48 6f 73 74 2f     .[36mMouse Host/
      a8:	44 65 76 69 63 65 20 44 65 6d 6f 20 72 75 6e 6e     Device Demo runn
      b8:	69 6e 67 2e 0d 0a 1b 5b 33 37 6d 00                 ing....[37m.

000000c4 <__c.5049>:
      c4:	1b 5b 33 33 6d 55 49 44 20 43 68 61 6e 67 65 20     .[33mUID Change 
      d4:	74 6f 20 25 53 20 6d 6f 64 65 0d 0a 1b 5b 33 37     to %S mode...[37
      e4:	6d 00                                               m.

000000e6 <__c.5051>:
      e6:	44 65 76 69 63 65 00                                Device.

000000ed <__c.5053>:
      ed:	48 6f 73 74 00                                      Host.

000000f2 <ProductString>:
      f2:	20 03 4c 00 55 00 46 00 41 00 20 00 4d 00 6f 00      .L.U.F.A. .M.o.
     102:	75 00 73 00 65 00 20 00 44 00 65 00 6d 00 6f 00     u.s.e. .D.e.m.o.
     112:	00 00                                               ..

00000114 <ManufacturerString>:
     114:	18 03 44 00 65 00 61 00 6e 00 20 00 43 00 61 00     ..D.e.a.n. .C.a.
     124:	6d 00 65 00 72 00 61 00 00 00                       m.e.r.a...

0000012e <LanguageString>:
     12e:	04 03 09 04                                         ....

00000132 <ConfigurationDescriptor>:
     132:	09 02 22 00 01 01 00 c0 32 09 04 00 00 01 03 01     ..".....2.......
     142:	02 00 09 21 11 01 00 01 22 3a 00 07 05 81 03 08     ...!....":......
     152:	00 05                                               ..

00000154 <DeviceDescriptor>:
     154:	12 01 10 01 00 00 00 08 eb 03 41 20 00 00 01 02     ..........A ....
     164:	00 01                                               ..

00000166 <MouseReport>:
     166:	05 01 09 02 a1 01 09 01 a1 00 05 09 19 01 29 03     ..............).
     176:	15 00 25 01 95 03 75 01 81 02 95 01 75 05 81 01     ..%...u.....u...
     186:	05 01 09 30 09 31 16 ff ff 26 01 00 36 ff ff 46     ...0.1...&..6..F
     196:	01 00 95 02 75 08 81 06 c0 c0                       ....u.....

000001a0 <__c.5041>:
     1a0:	44 65 76 69 63 65 20 41 74 74 61 63 68 65 64 2e     Device Attached.
     1b0:	0d 0a 00                                            ...

000001b3 <__c.5046>:
     1b3:	0d 0a 44 65 76 69 63 65 20 55 6e 61 74 74 61 63     ..Device Unattac
     1c3:	68 65 64 2e 0d 0a 00                                hed....

000001ca <__c.5056>:
     1ca:	1b 5b 33 31 6d 48 6f 73 74 20 4d 6f 64 65 20 45     .[31mHost Mode E
     1da:	72 72 6f 72 0d 0a 20 2d 2d 20 45 72 72 6f 72 20     rror.. -- Error 
     1ea:	43 6f 64 65 20 25 64 0d 0a 1b 5b 33 37 6d 00        Code %d...[37m.

000001f9 <__c.5063>:
     1f9:	1b 5b 33 31 6d 44 65 76 20 45 6e 75 6d 20 45 72     .[31mDev Enum Er
     209:	72 6f 72 0d 0a 20 2d 2d 20 45 72 72 6f 72 20 43     ror.. -- Error C
     219:	6f 64 65 20 25 64 0d 0a 20 2d 2d 20 53 75 62 20     ode %d.. -- Sub 
     229:	45 72 72 6f 72 20 43 6f 64 65 20 25 64 0d 0a 20     Error Code %d.. 
     239:	2d 2d 20 49 6e 20 53 74 61 74 65 20 25 64 0d 0a     -- In State %d..
     249:	1b 5b 33 37 6d 00                                   .[37m.

0000024f <__c.5070>:
     24f:	64 58 3a 25 32 64 20 64 59 3a 25 32 64 20 42 75     dX:%2d dY:%2d Bu
     25f:	74 74 6f 6e 3a 25 64 0d 0a 00 00                    tton:%d....

0000026a <__ctors_end>:
     26a:	11 24       	eor	r1, r1
     26c:	1f be       	out	0x3f, r1	; 63
     26e:	cf ef       	ldi	r28, 0xFF	; 255
     270:	d0 e2       	ldi	r29, 0x20	; 32
     272:	de bf       	out	0x3e, r29	; 62
     274:	cd bf       	out	0x3d, r28	; 61

00000276 <__do_copy_data>:
     276:	12 e0       	ldi	r17, 0x02	; 2
     278:	a0 e0       	ldi	r26, 0x00	; 0
     27a:	b1 e0       	ldi	r27, 0x01	; 1
     27c:	e4 e5       	ldi	r30, 0x54	; 84
     27e:	fb e2       	ldi	r31, 0x2B	; 43
     280:	00 e0       	ldi	r16, 0x00	; 0
     282:	0b bf       	out	0x3b, r16	; 59
     284:	02 c0       	rjmp	.+4      	; 0x28a <__do_copy_data+0x14>
     286:	07 90       	elpm	r0, Z+
     288:	0d 92       	st	X+, r0
     28a:	ac 30       	cpi	r26, 0x0C	; 12
     28c:	b1 07       	cpc	r27, r17
     28e:	d9 f7       	brne	.-10     	; 0x286 <__do_copy_data+0x10>
     290:	1b be       	out	0x3b, r1	; 59

00000292 <__do_clear_bss>:
     292:	12 e0       	ldi	r17, 0x02	; 2
     294:	ac e0       	ldi	r26, 0x0C	; 12
     296:	b2 e0       	ldi	r27, 0x02	; 2
     298:	01 c0       	rjmp	.+2      	; 0x29c <.do_clear_bss_start>

0000029a <.do_clear_bss_loop>:
     29a:	1d 92       	st	X+, r1

0000029c <.do_clear_bss_start>:
     29c:	a6 33       	cpi	r26, 0x36	; 54
     29e:	b1 07       	cpc	r27, r17
     2a0:	e1 f7       	brne	.-8      	; 0x29a <.do_clear_bss_loop>
     2a2:	40 d0       	rcall	.+128    	; 0x324 <main>
     2a4:	0c 94 a8 15 	jmp	0x2b50	; 0x2b50 <_exit>

000002a8 <__bad_interrupt>:
     2a8:	ab ce       	rjmp	.-682    	; 0x0 <__vectors>

000002aa <SetupHardware>:

/** Configures the board hardware and chip peripherals for the demo's functionality. */
void SetupHardware(void)
{
	/* Disable watchdog if enabled by bootloader/fuses */
	MCUSR &= ~(1 << WDRF);
     2aa:	84 b7       	in	r24, 0x34	; 52
     2ac:	87 7f       	andi	r24, 0xF7	; 247
     2ae:	84 bf       	out	0x34, r24	; 52
	wdt_disable();
     2b0:	28 e1       	ldi	r18, 0x18	; 24
     2b2:	0f b6       	in	r0, 0x3f	; 63
     2b4:	f8 94       	cli
     2b6:	20 93 60 00 	sts	0x0060, r18
     2ba:	10 92 60 00 	sts	0x0060, r1
     2be:	0f be       	out	0x3f, r0	; 63
The type of x is clock_div_t.
*/
void clock_prescale_set(clock_div_t __x)
{
    uint8_t __tmp = _BV(CLKPCE);
    __asm__ __volatile__ (
     2c0:	90 e0       	ldi	r25, 0x00	; 0
     2c2:	80 e8       	ldi	r24, 0x80	; 128
     2c4:	0f b6       	in	r0, 0x3f	; 63
     2c6:	f8 94       	cli
     2c8:	80 93 61 00 	sts	0x0061, r24
     2cc:	90 93 61 00 	sts	0x0061, r25
     2d0:	0f be       	out	0x3f, r0	; 63
			 *  \param[in] DoubleSpeed  Enables double speed mode when set, halving the sample time to double the baud rate.
			 */
			static inline void Serial_Init(const uint32_t BaudRate,
			                               const bool DoubleSpeed)
			{
				UBRR1  = (DoubleSpeed ? SERIAL_2X_UBBRVAL(BaudRate) : SERIAL_UBBRVAL(BaudRate));
     2d2:	83 e3       	ldi	r24, 0x33	; 51
     2d4:	90 e0       	ldi	r25, 0x00	; 0
     2d6:	90 93 cd 00 	sts	0x00CD, r25
     2da:	80 93 cc 00 	sts	0x00CC, r24

				UCSR1C = ((1 << UCSZ11) | (1 << UCSZ10));
     2de:	86 e0       	ldi	r24, 0x06	; 6
     2e0:	80 93 ca 00 	sts	0x00CA, r24
				UCSR1A = (DoubleSpeed ? (1 << U2X1) : 0);
     2e4:	10 92 c8 00 	sts	0x00C8, r1
				UCSR1B = ((1 << TXEN1)  | (1 << RXEN1));
     2e8:	20 93 c9 00 	sts	0x00C9, r18

				DDRD  |= (1 << 3);
     2ec:	53 9a       	sbi	0x0a, 3	; 10
				PORTD |= (1 << 2);
     2ee:	5a 9a       	sbi	0x0b, 2	; 11

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void LEDs_Init(void)
			{
				DDRD  |=  LEDS_ALL_LEDS;
     2f0:	8a b1       	in	r24, 0x0a	; 10
     2f2:	80 6f       	ori	r24, 0xF0	; 240
     2f4:	8a b9       	out	0x0a, r24	; 10
				PORTD &= ~LEDS_ALL_LEDS;
     2f6:	8b b1       	in	r24, 0x0b	; 11
     2f8:	8f 70       	andi	r24, 0x0F	; 15
     2fa:	8b b9       	out	0x0b, r24	; 11

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void Joystick_Init(void)
			{
				DDRB  &= ~JOY_BMASK;
     2fc:	84 b1       	in	r24, 0x04	; 4
     2fe:	8f 71       	andi	r24, 0x1F	; 31
     300:	84 b9       	out	0x04, r24	; 4
				DDRE  &= ~JOY_EMASK;
     302:	8d b1       	in	r24, 0x0d	; 13
     304:	8f 7c       	andi	r24, 0xCF	; 207
     306:	8d b9       	out	0x0d, r24	; 13

				PORTB |=  JOY_BMASK;
     308:	85 b1       	in	r24, 0x05	; 5
     30a:	80 6e       	ori	r24, 0xE0	; 224
     30c:	85 b9       	out	0x05, r24	; 5
				PORTE |=  JOY_EMASK;
     30e:	8e b1       	in	r24, 0x0e	; 14
     310:	80 63       	ori	r24, 0x30	; 48
     312:	8e b9       	out	0x0e, r24	; 14

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void Buttons_Init(void)
			{
				DDRE  &= ~BUTTONS_BUTTON1;
     314:	6a 98       	cbi	0x0d, 2	; 13
				PORTE |=  BUTTONS_BUTTON1;
     316:	72 9a       	sbi	0x0e, 2	; 14
	/* Hardware Initialization */
	Serial_Init(9600, false);
	LEDs_Init();
	Joystick_Init();
	Buttons_Init();
	USB_Init(USB_MODE_UID);
     318:	83 e0       	ldi	r24, 0x03	; 3
     31a:	e9 d7       	rcall	.+4050   	; 0x12ee <USB_Init>
     31c:	80 e0       	ldi	r24, 0x00	; 0

	/* Create a stdio stream for the serial port for stdin and stdout */
	Serial_CreateStream(NULL);
     31e:	90 e0       	ldi	r25, 0x00	; 0
     320:	0c 94 58 12 	jmp	0x24b0	; 0x24b0 <Serial_CreateStream>

00000324 <main>:
     324:	c2 df       	rcall	.-124    	; 0x2aa <SetupHardware>
}
     326:	88 e9       	ldi	r24, 0x98	; 152
 */
int main(void)
{
	SetupHardware();

	puts_P(PSTR(ESC_FG_CYAN "Mouse Host/Device Demo running.\r\n" ESC_FG_WHITE));
     328:	90 e0       	ldi	r25, 0x00	; 0
     32a:	0e 94 df 12 	call	0x25be	; 0x25be <puts_P>
     32e:	8b b1       	in	r24, 0x0b	; 11
				PORTD &= ~LEDMask;
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
			{
				PORTD = ((PORTD & ~LEDS_ALL_LEDS) | LEDMask);
     330:	8f 70       	andi	r24, 0x0F	; 15
     332:	80 61       	ori	r24, 0x10	; 16
     334:	8b b9       	out	0x0b, r24	; 11
     336:	78 94       	sei
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				sei();
     338:	80 91 12 02 	lds	r24, 0x0212
	GlobalInterruptEnable();

	for (;;)
	{
		/* Determine which USB mode we are currently in */
		if (USB_CurrentMode == USB_MODE_Host)
     33c:	82 30       	cpi	r24, 0x02	; 2
     33e:	11 f4       	brne	.+4      	; 0x344 <main+0x20>
     340:	6b d1       	rcall	.+726    	; 0x618 <MouseHost_Task>
		{
			MouseHost_Task();
     342:	04 c0       	rjmp	.+8      	; 0x34c <main+0x28>
     344:	80 e0       	ldi	r24, 0x00	; 0
     346:	91 e0       	ldi	r25, 0x01	; 1
			HID_Host_USBTask(&Mouse_HID_Host_Interface);
		}
		else
		{
			HID_Device_USBTask(&Mouse_HID_Device_Interface);
     348:	0e 94 ec 0f 	call	0x1fd8	; 0x1fd8 <HID_Device_USBTask>
     34c:	0e 94 68 0e 	call	0x1cd0	; 0x1cd0 <USB_USBTask>
		}

		USB_USBTask();
     350:	f3 cf       	rjmp	.-26     	; 0x338 <main+0x14>

00000352 <EVENT_USB_UIDChange>:
     352:	80 91 12 02 	lds	r24, 0x0212
}

/** Event handler for the library USB mode change event. */
void EVENT_USB_UIDChange(void)
{
	printf_P(PSTR(ESC_FG_YELLOW "UID Change to %S mode\r\n" ESC_FG_WHITE),
     356:	81 30       	cpi	r24, 0x01	; 1
     358:	19 f4       	brne	.+6      	; 0x360 <EVENT_USB_UIDChange+0xe>
     35a:	86 ee       	ldi	r24, 0xE6	; 230
     35c:	90 e0       	ldi	r25, 0x00	; 0
     35e:	02 c0       	rjmp	.+4      	; 0x364 <EVENT_USB_UIDChange+0x12>
     360:	8d ee       	ldi	r24, 0xED	; 237
     362:	90 e0       	ldi	r25, 0x00	; 0
     364:	00 d0       	rcall	.+0      	; 0x366 <EVENT_USB_UIDChange+0x14>
     366:	00 d0       	rcall	.+0      	; 0x368 <EVENT_USB_UIDChange+0x16>
     368:	24 ec       	ldi	r18, 0xC4	; 196
     36a:	30 e0       	ldi	r19, 0x00	; 0
     36c:	ed b7       	in	r30, 0x3d	; 61
     36e:	fe b7       	in	r31, 0x3e	; 62
     370:	32 83       	std	Z+2, r19	; 0x02
     372:	21 83       	std	Z+1, r18	; 0x01
     374:	94 83       	std	Z+4, r25	; 0x04
     376:	83 83       	std	Z+3, r24	; 0x03
     378:	0e 94 92 12 	call	0x2524	; 0x2524 <printf_P>
     37c:	8b b1       	in	r24, 0x0b	; 11
     37e:	8f 70       	andi	r24, 0x0F	; 15
     380:	80 61       	ori	r24, 0x10	; 16
     382:	8b b9       	out	0x0b, r24	; 11
     384:	0f 90       	pop	r0
     386:	0f 90       	pop	r0
     388:	0f 90       	pop	r0
     38a:	0f 90       	pop	r0
	         (USB_CurrentMode == USB_MODE_Device) ? PSTR("Device") : PSTR("Host"));

	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
}
     38c:	08 95       	ret

0000038e <CALLBACK_USB_GetDescriptor>:
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
     38e:	93 30       	cpi	r25, 0x03	; 3
     390:	89 f0       	breq	.+34     	; 0x3b4 <CALLBACK_USB_GetDescriptor+0x26>
     392:	94 30       	cpi	r25, 0x04	; 4
     394:	28 f4       	brcc	.+10     	; 0x3a0 <CALLBACK_USB_GetDescriptor+0x12>
     396:	91 30       	cpi	r25, 0x01	; 1
     398:	49 f1       	breq	.+82     	; 0x3ec <CALLBACK_USB_GetDescriptor+0x5e>
     39a:	92 30       	cpi	r25, 0x02	; 2
     39c:	61 f5       	brne	.+88     	; 0x3f6 <CALLBACK_USB_GetDescriptor+0x68>
     39e:	05 c0       	rjmp	.+10     	; 0x3aa <CALLBACK_USB_GetDescriptor+0x1c>
     3a0:	91 32       	cpi	r25, 0x21	; 33
     3a2:	d1 f0       	breq	.+52     	; 0x3d8 <CALLBACK_USB_GetDescriptor+0x4a>
     3a4:	92 32       	cpi	r25, 0x22	; 34
     3a6:	39 f5       	brne	.+78     	; 0x3f6 <CALLBACK_USB_GetDescriptor+0x68>
     3a8:	1c c0       	rjmp	.+56     	; 0x3e2 <CALLBACK_USB_GetDescriptor+0x54>
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
			Size    = sizeof(USB_Descriptor_Configuration_t);
     3aa:	82 e2       	ldi	r24, 0x22	; 34
     3ac:	90 e0       	ldi	r25, 0x00	; 0
		case DTYPE_Device:
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
     3ae:	e2 e3       	ldi	r30, 0x32	; 50
     3b0:	f1 e0       	ldi	r31, 0x01	; 1
			Size    = sizeof(USB_Descriptor_Configuration_t);
			break;
     3b2:	25 c0       	rjmp	.+74     	; 0x3fe <CALLBACK_USB_GetDescriptor+0x70>
		case DTYPE_String:
			switch (DescriptorNumber)
     3b4:	81 30       	cpi	r24, 0x01	; 1
     3b6:	41 f0       	breq	.+16     	; 0x3c8 <CALLBACK_USB_GetDescriptor+0x3a>
     3b8:	81 30       	cpi	r24, 0x01	; 1
     3ba:	18 f0       	brcs	.+6      	; 0x3c2 <CALLBACK_USB_GetDescriptor+0x34>
     3bc:	82 30       	cpi	r24, 0x02	; 2
     3be:	d9 f4       	brne	.+54     	; 0x3f6 <CALLBACK_USB_GetDescriptor+0x68>
     3c0:	06 c0       	rjmp	.+12     	; 0x3ce <CALLBACK_USB_GetDescriptor+0x40>
			{
				case 0x00:
					Address = &LanguageString;
					Size    = pgm_read_byte(&LanguageString.Header.Size);
     3c2:	ee e2       	ldi	r30, 0x2E	; 46
     3c4:	f1 e0       	ldi	r31, 0x01	; 1
     3c6:	05 c0       	rjmp	.+10     	; 0x3d2 <CALLBACK_USB_GetDescriptor+0x44>
					break;
				case 0x01:
					Address = &ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
     3c8:	e4 e1       	ldi	r30, 0x14	; 20
     3ca:	f1 e0       	ldi	r31, 0x01	; 1
     3cc:	02 c0       	rjmp	.+4      	; 0x3d2 <CALLBACK_USB_GetDescriptor+0x44>
					break;
				case 0x02:
					Address = &ProductString;
					Size    = pgm_read_byte(&ProductString.Header.Size);
     3ce:	e2 ef       	ldi	r30, 0xF2	; 242
     3d0:	f0 e0       	ldi	r31, 0x00	; 0
     3d2:	84 91       	lpm	r24, Z
     3d4:	90 e0       	ldi	r25, 0x00	; 0
					break;
     3d6:	13 c0       	rjmp	.+38     	; 0x3fe <CALLBACK_USB_GetDescriptor+0x70>
			}

			break;
		case HID_DTYPE_HID:
			Address = &ConfigurationDescriptor.HID_MouseHID;
			Size    = sizeof(USB_HID_Descriptor_HID_t);
     3d8:	89 e0       	ldi	r24, 0x09	; 9
     3da:	90 e0       	ldi	r25, 0x00	; 0
					break;
			}

			break;
		case HID_DTYPE_HID:
			Address = &ConfigurationDescriptor.HID_MouseHID;
     3dc:	e4 e4       	ldi	r30, 0x44	; 68
     3de:	f1 e0       	ldi	r31, 0x01	; 1
			Size    = sizeof(USB_HID_Descriptor_HID_t);
			break;
     3e0:	0e c0       	rjmp	.+28     	; 0x3fe <CALLBACK_USB_GetDescriptor+0x70>
		case HID_DTYPE_Report:
			Address = &MouseReport;
			Size    = sizeof(MouseReport);
     3e2:	8a e3       	ldi	r24, 0x3A	; 58
     3e4:	90 e0       	ldi	r25, 0x00	; 0
		case HID_DTYPE_HID:
			Address = &ConfigurationDescriptor.HID_MouseHID;
			Size    = sizeof(USB_HID_Descriptor_HID_t);
			break;
		case HID_DTYPE_Report:
			Address = &MouseReport;
     3e6:	e6 e6       	ldi	r30, 0x66	; 102
     3e8:	f1 e0       	ldi	r31, 0x01	; 1
			Size    = sizeof(MouseReport);
			break;
     3ea:	09 c0       	rjmp	.+18     	; 0x3fe <CALLBACK_USB_GetDescriptor+0x70>

	switch (DescriptorType)
	{
		case DTYPE_Device:
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
     3ec:	82 e1       	ldi	r24, 0x12	; 18
     3ee:	90 e0       	ldi	r25, 0x00	; 0
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
	{
		case DTYPE_Device:
			Address = &DeviceDescriptor;
     3f0:	e4 e5       	ldi	r30, 0x54	; 84
     3f2:	f1 e0       	ldi	r31, 0x01	; 1
     3f4:	04 c0       	rjmp	.+8      	; 0x3fe <CALLBACK_USB_GetDescriptor+0x70>
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;
     3f6:	80 e0       	ldi	r24, 0x00	; 0
     3f8:	90 e0       	ldi	r25, 0x00	; 0
                                    const void** const DescriptorAddress)
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
     3fa:	e0 e0       	ldi	r30, 0x00	; 0
     3fc:	f0 e0       	ldi	r31, 0x00	; 0
			Address = &MouseReport;
			Size    = sizeof(MouseReport);
			break;
	}

	*DescriptorAddress = Address;
     3fe:	da 01       	movw	r26, r20
     400:	11 96       	adiw	r26, 0x01	; 1
     402:	fc 93       	st	X, r31
     404:	ee 93       	st	-X, r30
	return Size;
}
     406:	08 95       	ret

00000408 <LEDs_SetAllLEDs>:
     408:	9b b1       	in	r25, 0x0b	; 11
     40a:	9f 70       	andi	r25, 0x0F	; 15
     40c:	98 2b       	or	r25, r24
     40e:	9b b9       	out	0x0b, r25	; 11
			}
     410:	08 95       	ret

00000412 <EVENT_USB_Device_Connect>:


/** Event handler for the library USB WakeUp event. */
void EVENT_USB_Device_Connect(void)
{
	LEDs_SetAllLEDs(LEDMASK_USB_ENUMERATING);
     412:	80 ea       	ldi	r24, 0xA0	; 160
     414:	f9 cf       	rjmp	.-14     	; 0x408 <LEDs_SetAllLEDs>

00000416 <EVENT_USB_Device_Disconnect>:
     416:	80 e1       	ldi	r24, 0x10	; 16
}
     418:	f7 cf       	rjmp	.-18     	; 0x408 <LEDs_SetAllLEDs>

0000041a <EVENT_USB_Device_ConfigurationChanged>:

/** Event handler for the library USB Suspend event. */
void EVENT_USB_Device_Disconnect(void)
{
	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
     41a:	80 e6       	ldi	r24, 0x60	; 96
}
     41c:	f5 df       	rcall	.-22     	; 0x408 <LEDs_SetAllLEDs>

/** Event handler for the library USB Configuration Changed event. */
void EVENT_USB_Device_ConfigurationChanged(void)
{
	LEDs_SetAllLEDs(LEDMASK_USB_READY);
     41e:	80 e0       	ldi	r24, 0x00	; 0

	if (!(HID_Device_ConfigureEndpoints(&Mouse_HID_Device_Interface)))
     420:	91 e0       	ldi	r25, 0x01	; 1
     422:	0e 94 d2 0f 	call	0x1fa4	; 0x1fa4 <HID_Device_ConfigureEndpoints>
     426:	88 23       	and	r24, r24
     428:	11 f4       	brne	.+4      	; 0x42e <EVENT_USB_Device_ConfigurationChanged+0x14>
     42a:	80 e9       	ldi	r24, 0x90	; 144
	  LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
     42c:	ed df       	rcall	.-38     	; 0x408 <LEDs_SetAllLEDs>
     42e:	80 91 e2 00 	lds	r24, 0x00E2
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
     432:	84 60       	ori	r24, 0x04	; 4
     434:	80 93 e2 00 	sts	0x00E2, r24
     438:	08 95       	ret

0000043a <EVENT_USB_Device_ControlRequest>:
     43a:	80 e0       	ldi	r24, 0x00	; 0

	USB_Device_EnableSOFEvents();
}
     43c:	91 e0       	ldi	r25, 0x01	; 1

/** Event handler for the library USB Control Request reception event. */
void EVENT_USB_Device_ControlRequest(void)
{
	HID_Device_ProcessControlRequest(&Mouse_HID_Device_Interface);
     43e:	0c 94 98 0e 	jmp	0x1d30	; 0x1d30 <HID_Device_ProcessControlRequest>

00000442 <EVENT_USB_Device_StartOfFrame>:
}
     442:	80 91 0e 01 	lds	r24, 0x010E
			 *  \param[in,out] HIDInterfaceInfo  Pointer to a structure containing a HID Class configuration and state.
			 */
			static inline void HID_Device_MillisecondElapsed(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo) ATTR_ALWAYS_INLINE ATTR_NON_NULL_PTR_ARG(1);
			static inline void HID_Device_MillisecondElapsed(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
			{
				if (HIDInterfaceInfo->State.IdleMSRemaining)
     446:	90 91 0f 01 	lds	r25, 0x010F
     44a:	00 97       	sbiw	r24, 0x00	; 0
     44c:	29 f0       	breq	.+10     	; 0x458 <EVENT_USB_Device_StartOfFrame+0x16>
				  HIDInterfaceInfo->State.IdleMSRemaining--;
     44e:	01 97       	sbiw	r24, 0x01	; 1
     450:	90 93 0f 01 	sts	0x010F, r25
     454:	80 93 0e 01 	sts	0x010E, r24
     458:	08 95       	ret

0000045a <CALLBACK_HID_Device_CreateHIDReport>:
bool CALLBACK_HID_Device_CreateHIDReport(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo,
                                         uint8_t* const ReportID,
                                         const uint8_t ReportType,
                                         void* ReportData,
                                         uint16_t* const ReportSize)
{
     45a:	0f 93       	push	r16
     45c:	1f 93       	push	r17
     45e:	f9 01       	movw	r30, r18
     460:	d8 01       	movw	r26, r16
			}

			static inline uint8_t Joystick_GetStatus(void) ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t Joystick_GetStatus(void)
			{
				return (((uint8_t)~PINB & JOY_BMASK) | (((uint8_t)~PINE & JOY_EMASK) >> JOY_PORTE_MASK_SHIFT));
     462:	23 b1       	in	r18, 0x03	; 3
     464:	8c b1       	in	r24, 0x0c	; 12
     466:	80 95       	com	r24
     468:	90 e0       	ldi	r25, 0x00	; 0
     46a:	80 73       	andi	r24, 0x30	; 48
     46c:	90 70       	andi	r25, 0x00	; 0
     46e:	95 95       	asr	r25
     470:	87 95       	ror	r24
     472:	20 95       	com	r18
     474:	20 7e       	andi	r18, 0xE0	; 224
     476:	28 2b       	or	r18, r24
			}

			static inline uint8_t Buttons_GetStatus(void) ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t Buttons_GetStatus(void)
			{
				return ((PINE & BUTTONS_BUTTON1) ^ BUTTONS_BUTTON1);
     478:	8c b1       	in	r24, 0x0c	; 12
     47a:	80 95       	com	r24
     47c:	84 70       	andi	r24, 0x04	; 4
	USB_MouseReport_Data_t* MouseReport = (USB_MouseReport_Data_t*)ReportData;

	uint8_t JoyStatus_LCL    = Joystick_GetStatus();
	uint8_t ButtonStatus_LCL = Buttons_GetStatus();

	if (JoyStatus_LCL & JOY_UP)
     47e:	27 ff       	sbrs	r18, 7
     480:	02 c0       	rjmp	.+4      	; 0x486 <CALLBACK_HID_Device_CreateHIDReport+0x2c>
	  MouseReport->Y = -1;
     482:	9f ef       	ldi	r25, 0xFF	; 255
     484:	03 c0       	rjmp	.+6      	; 0x48c <CALLBACK_HID_Device_CreateHIDReport+0x32>
	else if (JoyStatus_LCL & JOY_DOWN)
     486:	24 ff       	sbrs	r18, 4
     488:	02 c0       	rjmp	.+4      	; 0x48e <CALLBACK_HID_Device_CreateHIDReport+0x34>
	  MouseReport->Y =  1;
     48a:	91 e0       	ldi	r25, 0x01	; 1
     48c:	92 83       	std	Z+2, r25	; 0x02

	if (JoyStatus_LCL & JOY_RIGHT)
     48e:	23 ff       	sbrs	r18, 3
     490:	02 c0       	rjmp	.+4      	; 0x496 <CALLBACK_HID_Device_CreateHIDReport+0x3c>
	  MouseReport->X =  1;
     492:	91 e0       	ldi	r25, 0x01	; 1
     494:	03 c0       	rjmp	.+6      	; 0x49c <CALLBACK_HID_Device_CreateHIDReport+0x42>
	else if (JoyStatus_LCL & JOY_LEFT)
     496:	26 ff       	sbrs	r18, 6
     498:	02 c0       	rjmp	.+4      	; 0x49e <CALLBACK_HID_Device_CreateHIDReport+0x44>
	  MouseReport->X = -1;
     49a:	9f ef       	ldi	r25, 0xFF	; 255
     49c:	91 83       	std	Z+1, r25	; 0x01

	if (JoyStatus_LCL & JOY_PRESS)
     49e:	25 ff       	sbrs	r18, 5
     4a0:	03 c0       	rjmp	.+6      	; 0x4a8 <CALLBACK_HID_Device_CreateHIDReport+0x4e>
	  MouseReport->Button |= (1 << 0);
     4a2:	90 81       	ld	r25, Z
     4a4:	91 60       	ori	r25, 0x01	; 1
     4a6:	90 83       	st	Z, r25

	if (ButtonStatus_LCL & BUTTONS_BUTTON1)
     4a8:	88 23       	and	r24, r24
     4aa:	19 f0       	breq	.+6      	; 0x4b2 <CALLBACK_HID_Device_CreateHIDReport+0x58>
	  MouseReport->Button |= (1 << 1);
     4ac:	80 81       	ld	r24, Z
     4ae:	82 60       	ori	r24, 0x02	; 2
     4b0:	80 83       	st	Z, r24

	*ReportSize = sizeof(USB_MouseReport_Data_t);
     4b2:	83 e0       	ldi	r24, 0x03	; 3
     4b4:	90 e0       	ldi	r25, 0x00	; 0
     4b6:	11 96       	adiw	r26, 0x01	; 1
     4b8:	9c 93       	st	X, r25
     4ba:	8e 93       	st	-X, r24
	return true;
}
     4bc:	81 e0       	ldi	r24, 0x01	; 1
     4be:	1f 91       	pop	r17
     4c0:	0f 91       	pop	r16
     4c2:	08 95       	ret

000004c4 <CALLBACK_HID_Device_ProcessHIDReport>:
                                          const uint8_t ReportType,
                                          const void* ReportData,
                                          const uint16_t ReportSize)
{
	// Unused (but mandatory for the HID class driver) in this demo, since there are no Host->Device reports
}
     4c4:	08 95       	ret

000004c6 <LEDs_SetAllLEDs>:
				PORTD &= ~LEDMask;
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
			{
				PORTD = ((PORTD & ~LEDS_ALL_LEDS) | LEDMask);
     4c6:	9b b1       	in	r25, 0x0b	; 11
     4c8:	9f 70       	andi	r25, 0x0F	; 15
     4ca:	98 2b       	or	r25, r24
     4cc:	9b b9       	out	0x0b, r25	; 11
			}
     4ce:	08 95       	ret

000004d0 <EVENT_USB_Host_DeviceAttached>:
/** Event handler for the USB_DeviceAttached event. This indicates that a device has been attached to the host, and
 *  starts the library USB task to begin the enumeration and USB management process.
 */
void EVENT_USB_Host_DeviceAttached(void)
{
	puts_P(PSTR("Device Attached.\r\n"));
     4d0:	80 ea       	ldi	r24, 0xA0	; 160
     4d2:	91 e0       	ldi	r25, 0x01	; 1
     4d4:	0e 94 df 12 	call	0x25be	; 0x25be <puts_P>
	LEDs_SetAllLEDs(LEDMASK_USB_ENUMERATING);
     4d8:	80 ea       	ldi	r24, 0xA0	; 160
     4da:	f5 cf       	rjmp	.-22     	; 0x4c6 <LEDs_SetAllLEDs>

000004dc <EVENT_USB_Host_DeviceUnattached>:
     4dc:	83 eb       	ldi	r24, 0xB3	; 179
}
     4de:	91 e0       	ldi	r25, 0x01	; 1
/** Event handler for the USB_DeviceUnattached event. This indicates that a device has been removed from the host, and
 *  stops the library USB task management process.
 */
void EVENT_USB_Host_DeviceUnattached(void)
{
	puts_P(PSTR("\r\nDevice Unattached.\r\n"));
     4e0:	0e 94 df 12 	call	0x25be	; 0x25be <puts_P>
	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
     4e4:	80 e1       	ldi	r24, 0x10	; 16
     4e6:	ef cf       	rjmp	.-34     	; 0x4c6 <LEDs_SetAllLEDs>

000004e8 <EVENT_USB_Host_DeviceEnumerationComplete>:
     4e8:	cf 93       	push	r28
}
     4ea:	df 93       	push	r29

/** Event handler for the USB_DeviceEnumerationComplete event. This indicates that a device has been successfully
 *  enumerated by the host and is now ready to be used by the application.
 */
void EVENT_USB_Host_DeviceEnumerationComplete(void)
{
     4ec:	cd b7       	in	r28, 0x3d	; 61
     4ee:	de b7       	in	r29, 0x3e	; 62
     4f0:	c2 50       	subi	r28, 0x02	; 2
     4f2:	d2 40       	sbci	r29, 0x02	; 2
     4f4:	0f b6       	in	r0, 0x3f	; 63
     4f6:	f8 94       	cli
     4f8:	de bf       	out	0x3e, r29	; 62
     4fa:	0f be       	out	0x3f, r0	; 63
     4fc:	cd bf       	out	0x3d, r28	; 61
	LEDs_SetAllLEDs(LEDMASK_USB_ENUMERATING);
     4fe:	80 ea       	ldi	r24, 0xA0	; 160
     500:	e2 df       	rcall	.-60     	; 0x4c6 <LEDs_SetAllLEDs>
     502:	81 e0       	ldi	r24, 0x01	; 1

	uint16_t ConfigDescriptorSize;
	uint8_t  ConfigDescriptorData[512];

	if (USB_Host_GetDeviceConfigDescriptor(1, &ConfigDescriptorSize, ConfigDescriptorData,
     504:	be 01       	movw	r22, r28
     506:	6f 5f       	subi	r22, 0xFF	; 255
     508:	7f 4f       	sbci	r23, 0xFF	; 255
     50a:	ae 01       	movw	r20, r28
     50c:	4d 5f       	subi	r20, 0xFD	; 253
     50e:	5f 4f       	sbci	r21, 0xFF	; 255
     510:	20 e0       	ldi	r18, 0x00	; 0
     512:	32 e0       	ldi	r19, 0x02	; 2
     514:	0e 94 13 0b 	call	0x1626	; 0x1626 <USB_Host_GetDeviceConfigDescriptor>
     518:	88 23       	and	r24, r24
     51a:	19 f0       	breq	.+6      	; 0x522 <EVENT_USB_Host_DeviceEnumerationComplete+0x3a>
     51c:	80 e1       	ldi	r24, 0x10	; 16
	                                       sizeof(ConfigDescriptorData)) != HOST_GETCONFIG_Successful)
	{
		printf("Error Retrieving Configuration Descriptor.\r\n");
     51e:	91 e0       	ldi	r25, 0x01	; 1
     520:	1e c0       	rjmp	.+60     	; 0x55e <EVENT_USB_Host_DeviceEnumerationComplete+0x76>
     522:	69 81       	ldd	r22, Y+1	; 0x01
		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
		return;
	}

	if (HID_Host_ConfigurePipes(&Mouse_HID_Host_Interface,
     524:	7a 81       	ldd	r23, Y+2	; 0x02
     526:	8b eb       	ldi	r24, 0xBB	; 187
     528:	91 e0       	ldi	r25, 0x01	; 1
     52a:	ae 01       	movw	r20, r28
     52c:	4d 5f       	subi	r20, 0xFD	; 253
     52e:	5f 4f       	sbci	r21, 0xFF	; 255
     530:	0e 94 dd 10 	call	0x21ba	; 0x21ba <HID_Host_ConfigurePipes>
     534:	88 23       	and	r24, r24
     536:	19 f0       	breq	.+6      	; 0x53e <EVENT_USB_Host_DeviceEnumerationComplete+0x56>
     538:	8c e3       	ldi	r24, 0x3C	; 60
	                            ConfigDescriptorSize, ConfigDescriptorData) != HID_ENUMERROR_NoError)
	{
		printf("Attached Device Not a Valid Mouse.\r\n");
     53a:	91 e0       	ldi	r25, 0x01	; 1
     53c:	10 c0       	rjmp	.+32     	; 0x55e <EVENT_USB_Host_DeviceEnumerationComplete+0x76>
     53e:	81 e0       	ldi	r24, 0x01	; 1
		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
		return;
	}

	if (USB_Host_SetDeviceConfiguration(1) != HOST_SENDCONTROL_Successful)
     540:	0e 94 43 0e 	call	0x1c86	; 0x1c86 <USB_Host_SetDeviceConfiguration>
     544:	88 23       	and	r24, r24
     546:	19 f0       	breq	.+6      	; 0x54e <EVENT_USB_Host_DeviceEnumerationComplete+0x66>
     548:	80 e6       	ldi	r24, 0x60	; 96
	{
		printf("Error Setting Device Configuration.\r\n");
     54a:	91 e0       	ldi	r25, 0x01	; 1
     54c:	08 c0       	rjmp	.+16     	; 0x55e <EVENT_USB_Host_DeviceEnumerationComplete+0x76>
     54e:	8b eb       	ldi	r24, 0xBB	; 187
		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
		return;
	}

	if (HID_Host_SetBootProtocol(&Mouse_HID_Host_Interface) != HOST_SENDCONTROL_Successful)
     550:	91 e0       	ldi	r25, 0x01	; 1
     552:	0e 94 14 12 	call	0x2428	; 0x2428 <HID_Host_SetBootProtocol>
     556:	88 23       	and	r24, r24
     558:	31 f0       	breq	.+12     	; 0x566 <EVENT_USB_Host_DeviceEnumerationComplete+0x7e>
     55a:	85 e8       	ldi	r24, 0x85	; 133
	{
		printf("Could not Set Boot Protocol Mode.\r\n");
     55c:	91 e0       	ldi	r25, 0x01	; 1
     55e:	0e 94 b1 12 	call	0x2562	; 0x2562 <puts>
     562:	80 e9       	ldi	r24, 0x90	; 144
		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
     564:	05 c0       	rjmp	.+10     	; 0x570 <EVENT_USB_Host_DeviceEnumerationComplete+0x88>
     566:	88 ea       	ldi	r24, 0xA8	; 168
		return;
	}

	printf("Mouse Enumerated.\r\n");
     568:	91 e0       	ldi	r25, 0x01	; 1
     56a:	0e 94 b1 12 	call	0x2562	; 0x2562 <puts>
     56e:	80 e6       	ldi	r24, 0x60	; 96
	LEDs_SetAllLEDs(LEDMASK_USB_READY);
     570:	aa df       	rcall	.-172    	; 0x4c6 <LEDs_SetAllLEDs>
     572:	ce 5f       	subi	r28, 0xFE	; 254
     574:	dd 4f       	sbci	r29, 0xFD	; 253
}
     576:	0f b6       	in	r0, 0x3f	; 63
     578:	f8 94       	cli
     57a:	de bf       	out	0x3e, r29	; 62
     57c:	0f be       	out	0x3f, r0	; 63
     57e:	cd bf       	out	0x3d, r28	; 61
     580:	df 91       	pop	r29
     582:	cf 91       	pop	r28
     584:	08 95       	ret

00000586 <EVENT_USB_Host_HostError>:
     586:	cf 93       	push	r28
     588:	df 93       	push	r29

/** Event handler for the USB_HostError event. This indicates that a hardware error occurred while in host mode. */
void EVENT_USB_Host_HostError(const uint8_t ErrorCode)
{
     58a:	0f 92       	push	r0
     58c:	cd b7       	in	r28, 0x3d	; 61
     58e:	de b7       	in	r29, 0x3e	; 62
	USB_Disable();
     590:	89 83       	std	Y+1, r24	; 0x01
     592:	04 d6       	rcall	.+3080   	; 0x119c <USB_Disable>
     594:	00 d0       	rcall	.+0      	; 0x596 <EVENT_USB_Host_HostError+0x10>

	printf_P(PSTR(ESC_FG_RED "Host Mode Error\r\n"
     596:	00 d0       	rcall	.+0      	; 0x598 <EVENT_USB_Host_HostError+0x12>
     598:	ed b7       	in	r30, 0x3d	; 61
     59a:	fe b7       	in	r31, 0x3e	; 62
     59c:	31 96       	adiw	r30, 0x01	; 1
     59e:	2a ec       	ldi	r18, 0xCA	; 202
     5a0:	31 e0       	ldi	r19, 0x01	; 1
     5a2:	ad b7       	in	r26, 0x3d	; 61
     5a4:	be b7       	in	r27, 0x3e	; 62
     5a6:	12 96       	adiw	r26, 0x02	; 2
     5a8:	3c 93       	st	X, r19
     5aa:	2e 93       	st	-X, r18
     5ac:	11 97       	sbiw	r26, 0x01	; 1
     5ae:	89 81       	ldd	r24, Y+1	; 0x01
     5b0:	82 83       	std	Z+2, r24	; 0x02
     5b2:	13 82       	std	Z+3, r1	; 0x03
     5b4:	0e 94 92 12 	call	0x2524	; 0x2524 <printf_P>
     5b8:	0f 90       	pop	r0
	                         " -- Error Code %d\r\n" ESC_FG_WHITE), ErrorCode);

	LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
     5ba:	0f 90       	pop	r0
     5bc:	0f 90       	pop	r0
     5be:	0f 90       	pop	r0
     5c0:	80 e9       	ldi	r24, 0x90	; 144
     5c2:	81 df       	rcall	.-254    	; 0x4c6 <LEDs_SetAllLEDs>
     5c4:	ff cf       	rjmp	.-2      	; 0x5c4 <EVENT_USB_Host_HostError+0x3e>

000005c6 <EVENT_USB_Host_DeviceEnumerationFailed>:
     5c6:	90 91 21 02 	lds	r25, 0x0221
 *  enumerating an attached USB device.
 */
void EVENT_USB_Host_DeviceEnumerationFailed(const uint8_t ErrorCode,
                                            const uint8_t SubErrorCode)
{
	printf_P(PSTR(ESC_FG_RED "Dev Enum Error\r\n"
     5ca:	2d b7       	in	r18, 0x3d	; 61
     5cc:	3e b7       	in	r19, 0x3e	; 62
     5ce:	28 50       	subi	r18, 0x08	; 8
     5d0:	30 40       	sbci	r19, 0x00	; 0
     5d2:	0f b6       	in	r0, 0x3f	; 63
     5d4:	f8 94       	cli
     5d6:	3e bf       	out	0x3e, r19	; 62
     5d8:	0f be       	out	0x3f, r0	; 63
     5da:	2d bf       	out	0x3d, r18	; 61
     5dc:	ed b7       	in	r30, 0x3d	; 61
     5de:	fe b7       	in	r31, 0x3e	; 62
     5e0:	31 96       	adiw	r30, 0x01	; 1
     5e2:	29 ef       	ldi	r18, 0xF9	; 249
     5e4:	31 e0       	ldi	r19, 0x01	; 1
     5e6:	ad b7       	in	r26, 0x3d	; 61
     5e8:	be b7       	in	r27, 0x3e	; 62
     5ea:	12 96       	adiw	r26, 0x02	; 2
     5ec:	3c 93       	st	X, r19
     5ee:	2e 93       	st	-X, r18
     5f0:	11 97       	sbiw	r26, 0x01	; 1
     5f2:	82 83       	std	Z+2, r24	; 0x02
     5f4:	13 82       	std	Z+3, r1	; 0x03
     5f6:	64 83       	std	Z+4, r22	; 0x04
     5f8:	15 82       	std	Z+5, r1	; 0x05
     5fa:	96 83       	std	Z+6, r25	; 0x06
     5fc:	17 82       	std	Z+7, r1	; 0x07
     5fe:	0e 94 92 12 	call	0x2524	; 0x2524 <printf_P>
	                         " -- Error Code %d\r\n"
	                         " -- Sub Error Code %d\r\n"
	                         " -- In State %d\r\n" ESC_FG_WHITE), ErrorCode, SubErrorCode, USB_HostState);

	LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
     602:	2d b7       	in	r18, 0x3d	; 61
     604:	3e b7       	in	r19, 0x3e	; 62
     606:	28 5f       	subi	r18, 0xF8	; 248
     608:	3f 4f       	sbci	r19, 0xFF	; 255
     60a:	0f b6       	in	r0, 0x3f	; 63
     60c:	f8 94       	cli
     60e:	3e bf       	out	0x3e, r19	; 62
     610:	0f be       	out	0x3f, r0	; 63
     612:	2d bf       	out	0x3d, r18	; 61
     614:	80 e9       	ldi	r24, 0x90	; 144
     616:	57 cf       	rjmp	.-338    	; 0x4c6 <LEDs_SetAllLEDs>

00000618 <MouseHost_Task>:
     618:	cf 93       	push	r28
}
     61a:	df 93       	push	r29

/** Host USB management task. This task handles the control of USB Mice while in USB Host mode,
 *  setting up the appropriate data pipes and processing reports from the attached device.
 */
void MouseHost_Task(void)
{
     61c:	00 d0       	rcall	.+0      	; 0x61e <MouseHost_Task+0x6>
     61e:	0f 92       	push	r0
     620:	cd b7       	in	r28, 0x3d	; 61
     622:	de b7       	in	r29, 0x3e	; 62
	if (USB_HostState != HOST_STATE_Configured)
     624:	80 91 21 02 	lds	r24, 0x0221
     628:	8b 30       	cpi	r24, 0x0B	; 11
     62a:	09 f0       	breq	.+2      	; 0x62e <MouseHost_Task+0x16>
     62c:	50 c0       	rjmp	.+160    	; 0x6ce <MouseHost_Task+0xb6>
	  return;

	if (HID_Host_IsReportReceived(&Mouse_HID_Host_Interface))
     62e:	8b eb       	ldi	r24, 0xBB	; 187
     630:	91 e0       	ldi	r25, 0x01	; 1
     632:	0e 94 f6 11 	call	0x23ec	; 0x23ec <HID_Host_IsReportReceived>
     636:	88 23       	and	r24, r24
     638:	09 f4       	brne	.+2      	; 0x63c <MouseHost_Task+0x24>
     63a:	49 c0       	rjmp	.+146    	; 0x6ce <MouseHost_Task+0xb6>
	{
		uint8_t LEDMask  = LEDS_NO_LEDS;

		USB_MouseReport_Data_t MouseReport;
		HID_Host_ReceiveReport(&Mouse_HID_Host_Interface, &MouseReport);
     63c:	8b eb       	ldi	r24, 0xBB	; 187
     63e:	91 e0       	ldi	r25, 0x01	; 1
     640:	be 01       	movw	r22, r28
     642:	6f 5f       	subi	r22, 0xFF	; 255
     644:	7f 4f       	sbci	r23, 0xFF	; 255
     646:	0e 94 ae 11 	call	0x235c	; 0x235c <HID_Host_ReceiveReport>

		printf_P(PSTR("dX:%2d dY:%2d Button:%d\r\n"), MouseReport.X,
     64a:	2d b7       	in	r18, 0x3d	; 61
     64c:	3e b7       	in	r19, 0x3e	; 62
     64e:	28 50       	subi	r18, 0x08	; 8
     650:	30 40       	sbci	r19, 0x00	; 0
     652:	0f b6       	in	r0, 0x3f	; 63
     654:	f8 94       	cli
     656:	3e bf       	out	0x3e, r19	; 62
     658:	0f be       	out	0x3f, r0	; 63
     65a:	2d bf       	out	0x3d, r18	; 61
     65c:	ed b7       	in	r30, 0x3d	; 61
     65e:	fe b7       	in	r31, 0x3e	; 62
     660:	31 96       	adiw	r30, 0x01	; 1
     662:	8f e4       	ldi	r24, 0x4F	; 79
     664:	92 e0       	ldi	r25, 0x02	; 2
     666:	ad b7       	in	r26, 0x3d	; 61
     668:	be b7       	in	r27, 0x3e	; 62
     66a:	12 96       	adiw	r26, 0x02	; 2
     66c:	9c 93       	st	X, r25
     66e:	8e 93       	st	-X, r24
     670:	11 97       	sbiw	r26, 0x01	; 1
     672:	8a 81       	ldd	r24, Y+2	; 0x02
     674:	99 27       	eor	r25, r25
     676:	87 fd       	sbrc	r24, 7
     678:	90 95       	com	r25
     67a:	93 83       	std	Z+3, r25	; 0x03
     67c:	82 83       	std	Z+2, r24	; 0x02
     67e:	8b 81       	ldd	r24, Y+3	; 0x03
     680:	99 27       	eor	r25, r25
     682:	87 fd       	sbrc	r24, 7
     684:	90 95       	com	r25
     686:	95 83       	std	Z+5, r25	; 0x05
     688:	84 83       	std	Z+4, r24	; 0x04
     68a:	89 81       	ldd	r24, Y+1	; 0x01
     68c:	86 83       	std	Z+6, r24	; 0x06
     68e:	17 82       	std	Z+7, r1	; 0x07
     690:	0e 94 92 12 	call	0x2524	; 0x2524 <printf_P>
		                                              MouseReport.Y,
		                                              MouseReport.Button);
		if (MouseReport.X > 0)
     694:	8a 81       	ldd	r24, Y+2	; 0x02
     696:	2d b7       	in	r18, 0x3d	; 61
     698:	3e b7       	in	r19, 0x3e	; 62
     69a:	28 5f       	subi	r18, 0xF8	; 248
     69c:	3f 4f       	sbci	r19, 0xFF	; 255
     69e:	0f b6       	in	r0, 0x3f	; 63
     6a0:	f8 94       	cli
     6a2:	3e bf       	out	0x3e, r19	; 62
     6a4:	0f be       	out	0x3f, r0	; 63
     6a6:	2d bf       	out	0x3d, r18	; 61
     6a8:	18 16       	cp	r1, r24
     6aa:	1c f0       	brlt	.+6      	; 0x6b2 <MouseHost_Task+0x9a>
		  LEDMask |= LEDS_LED1;
		else if (MouseReport.X < 0)
     6ac:	88 23       	and	r24, r24
     6ae:	21 f0       	breq	.+8      	; 0x6b8 <MouseHost_Task+0xa0>
     6b0:	02 c0       	rjmp	.+4      	; 0x6b6 <MouseHost_Task+0x9e>

		printf_P(PSTR("dX:%2d dY:%2d Button:%d\r\n"), MouseReport.X,
		                                              MouseReport.Y,
		                                              MouseReport.Button);
		if (MouseReport.X > 0)
		  LEDMask |= LEDS_LED1;
     6b2:	80 e1       	ldi	r24, 0x10	; 16
     6b4:	01 c0       	rjmp	.+2      	; 0x6b8 <MouseHost_Task+0xa0>
		else if (MouseReport.X < 0)
		  LEDMask |= LEDS_LED2;
     6b6:	80 e2       	ldi	r24, 0x20	; 32

		if (MouseReport.Y > 0)
     6b8:	9b 81       	ldd	r25, Y+3	; 0x03
     6ba:	19 16       	cp	r1, r25
     6bc:	14 f4       	brge	.+4      	; 0x6c2 <MouseHost_Task+0xaa>
		  LEDMask |= LEDS_LED3;
     6be:	80 68       	ori	r24, 0x80	; 128
     6c0:	02 c0       	rjmp	.+4      	; 0x6c6 <MouseHost_Task+0xae>
		else if (MouseReport.Y < 0)
     6c2:	91 11       	cpse	r25, r1
		  LEDMask |= LEDS_LED4;
     6c4:	80 64       	ori	r24, 0x40	; 64

		if (MouseReport.Button)
     6c6:	99 81       	ldd	r25, Y+1	; 0x01
     6c8:	91 11       	cpse	r25, r1
		  LEDMask  = LEDS_ALL_LEDS;
     6ca:	80 ef       	ldi	r24, 0xF0	; 240

		LEDs_SetAllLEDs(LEDMask);
     6cc:	fc de       	rcall	.-520    	; 0x4c6 <LEDs_SetAllLEDs>
     6ce:	0f 90       	pop	r0
	}
}
     6d0:	0f 90       	pop	r0
     6d2:	0f 90       	pop	r0
     6d4:	df 91       	pop	r29
     6d6:	cf 91       	pop	r28
     6d8:	08 95       	ret

000006da <USB_GetHIDReportSize>:
				CurrCollectionPath = CurrCollectionPath->Parent;
				break;
			case HID_RI_INPUT(0):
			case HID_RI_OUTPUT(0):
			case HID_RI_FEATURE(0):
				for (uint8_t ReportItemNum = 0; ReportItemNum < CurrStateTable->ReportCount; ReportItemNum++)
     6da:	9c 01       	movw	r18, r24
     6dc:	80 e0       	ldi	r24, 0x00	; 0
			default:
				ReportItemData  = 0;
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
     6de:	90 e0       	ldi	r25, 0x00	; 0
     6e0:	50 e0       	ldi	r21, 0x00	; 0
			
			default:
				break;
		}

		if ((HIDReportItem & HID_RI_TYPE_MASK) == HID_RI_TYPE_MAIN)
     6e2:	44 0f       	add	r20, r20
     6e4:	55 1f       	adc	r21, r21
     6e6:	42 0f       	add	r20, r18
     6e8:	53 1f       	adc	r21, r19
     6ea:	fa 01       	movw	r30, r20
     6ec:	e8 0f       	add	r30, r24
     6ee:	f9 1f       	adc	r31, r25
     6f0:	ef 56       	subi	r30, 0x6F	; 111
		{
			UsageMinMax.Minimum = 0;
			UsageMinMax.Maximum = 0;
     6f2:	fc 4f       	sbci	r31, 0xFC	; 252
     6f4:	a0 81       	ld	r26, Z
     6f6:	b1 81       	ldd	r27, Z+1	; 0x01
     6f8:	f9 01       	movw	r30, r18
     6fa:	e8 0f       	add	r30, r24
     6fc:	f9 1f       	adc	r31, r25
				break;
		}

		if ((HIDReportItem & HID_RI_TYPE_MASK) == HID_RI_TYPE_MAIN)
		{
			UsageMinMax.Minimum = 0;
     6fe:	e0 57       	subi	r30, 0x70	; 112
     700:	fc 4f       	sbci	r31, 0xFC	; 252
     702:	70 81       	ld	r23, Z
			UsageMinMax.Maximum = 0;
			UsageListSize       = 0;
     704:	76 17       	cp	r23, r22
	memset(CurrStateTable,   0x00, sizeof(HID_StateTable_t));
	memset(CurrReportIDInfo, 0x00, sizeof(HID_ReportSizeInfo_t));

	ParserData->TotalDeviceReports = 1;

	while (ReportSize)
     706:	91 f4       	brne	.+36     	; 0x72c <USB_GetHIDReportSize+0x52>
     708:	cd 01       	movw	r24, r26
     70a:	87 70       	andi	r24, 0x07	; 7
     70c:	90 70       	andi	r25, 0x00	; 0
     70e:	21 e0       	ldi	r18, 0x01	; 1
     710:	30 e0       	ldi	r19, 0x00	; 0
     712:	00 97       	sbiw	r24, 0x00	; 0
			UsageMinMax.Maximum = 0;
			UsageListSize       = 0;
		}
	}

	if (!(ParserData->TotalReportItems))
     714:	11 f4       	brne	.+4      	; 0x71a <USB_GetHIDReportSize+0x40>
     716:	20 e0       	ldi	r18, 0x00	; 0
     718:	30 e0       	ldi	r19, 0x00	; 0
     71a:	cd 01       	movw	r24, r26
	  return HID_PARSE_NoUnfilteredReportItems;
     71c:	e3 e0       	ldi	r30, 0x03	; 3
     71e:	96 95       	lsr	r25

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
		{
			case HID_RI_PUSH(0):
				if (CurrStateTable == &StateTable[HID_STATETABLE_STACK_DEPTH - 1])
				  return HID_PARSE_HIDStackOverflow;
     720:	87 95       	ror	r24
     722:	ea 95       	dec	r30

				CurrStateTable++;
				break;
			case HID_RI_POP(0):
				if (CurrStateTable == &StateTable[0])
				  return HID_PARSE_HIDStackUnderflow;
     724:	e1 f7       	brne	.-8      	; 0x71e <USB_GetHIDReportSize+0x44>
     726:	82 0f       	add	r24, r18

				CurrReportIDInfo->ReportID = CurrStateTable->ReportID;
				break;
			case HID_RI_USAGE(0):
				if (UsageListSize == HID_USAGE_STACK_DEPTH)
				  return HID_PARSE_UsageListOverflow;
     728:	93 1f       	adc	r25, r19
     72a:	08 95       	ret
					CurrCollectionPath = &ParserData->CollectionPaths[1];

					while (CurrCollectionPath->Parent != NULL)
					{
						if (CurrCollectionPath == &ParserData->CollectionPaths[HID_MAX_COLLECTIONS - 1])
						  return HID_PARSE_InsufficientCollectionPaths;
     72c:	07 96       	adiw	r24, 0x07	; 7
     72e:	86 34       	cpi	r24, 0x46	; 70
				}

				break;
			case HID_RI_END_COLLECTION(0):
				if (CurrCollectionPath == NULL)
				  return HID_PARSE_UnexpectedEndCollection;
     730:	91 05       	cpc	r25, r1
     732:	d9 f6       	brne	.-74     	; 0x6ea <USB_GetHIDReportSize+0x10>
					CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType] += CurrStateTable->Attributes.BitSize;

					ParserData->LargestReportSizeBits = MAX(ParserData->LargestReportSizeBits, CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType]);

					if (ParserData->TotalReportItems == HID_MAX_REPORTITEMS)
					  return HID_PARSE_InsufficientReportItems;
     734:	80 e0       	ldi	r24, 0x00	; 0
     736:	90 e0       	ldi	r25, 0x00	; 0
	}

	if (!(ParserData->TotalReportItems))
	  return HID_PARSE_NoUnfilteredReportItems;

	return HID_PARSE_Successful;
     738:	08 95       	ret

0000073a <Endpoint_Write_Stream_LE>:
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
     73a:	af 92       	push	r10
     73c:	bf 92       	push	r11
     73e:	cf 92       	push	r12
     740:	df 92       	push	r13
     742:	ef 92       	push	r14
     744:	ff 92       	push	r15
     746:	1f 93       	push	r17
     748:	cf 93       	push	r28
     74a:	df 93       	push	r29
     74c:	ec 01       	movw	r28, r24
     74e:	7b 01       	movw	r14, r22
     750:	6a 01       	movw	r12, r20
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	uint16_t BytesInTransfer = 0;
	uint8_t  ErrorCode;

	if ((ErrorCode = Endpoint_WaitUntilReady()))
     752:	d8 d1       	rcall	.+944    	; 0xb04 <Endpoint_WaitUntilReady>
     754:	18 2f       	mov	r17, r24
     756:	88 23       	and	r24, r24
     758:	b1 f5       	brne	.+108    	; 0x7c6 <Endpoint_Write_Stream_LE+0x8c>
     75a:	c1 14       	cp	r12, r1
	  return ErrorCode;

	if (BytesProcessed != NULL)
     75c:	d1 04       	cpc	r13, r1
     75e:	39 f0       	breq	.+14     	; 0x76e <Endpoint_Write_Stream_LE+0x34>
     760:	f6 01       	movw	r30, r12
	{
		Length -= *BytesProcessed;
     762:	20 81       	ld	r18, Z
     764:	31 81       	ldd	r19, Z+1	; 0x01
     766:	e2 1a       	sub	r14, r18
     768:	f3 0a       	sbc	r15, r19
     76a:	c2 0f       	add	r28, r18
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
     76c:	d3 1f       	adc	r29, r19
     76e:	aa 24       	eor	r10, r10

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
     770:	bb 24       	eor	r11, r11
     772:	24 c0       	rjmp	.+72     	; 0x7bc <Endpoint_Write_Stream_LE+0x82>
     774:	80 91 e8 00 	lds	r24, 0x00E8
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
     778:	85 fd       	sbrc	r24, 5
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
	{
		if (!(Endpoint_IsReadWriteAllowed()))
     77a:	17 c0       	rjmp	.+46     	; 0x7aa <Endpoint_Write_Stream_LE+0x70>
     77c:	80 91 e8 00 	lds	r24, 0x00E8
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     780:	8e 77       	andi	r24, 0x7E	; 126
     782:	80 93 e8 00 	sts	0x00E8, r24
     786:	0e 94 68 0e 	call	0x1cd0	; 0x1cd0 <USB_USBTask>
		{
			TEMPLATE_CLEAR_ENDPOINT();

			#if !defined(INTERRUPT_CONTROL_ENDPOINT)
			USB_USBTask();
     78a:	c1 14       	cp	r12, r1
			#endif

			if (BytesProcessed != NULL)
     78c:	d1 04       	cpc	r13, r1
     78e:	49 f0       	breq	.+18     	; 0x7a2 <Endpoint_Write_Stream_LE+0x68>
     790:	f6 01       	movw	r30, r12
			{
				*BytesProcessed += BytesInTransfer;
     792:	80 81       	ld	r24, Z
     794:	91 81       	ldd	r25, Z+1	; 0x01
     796:	8a 0d       	add	r24, r10
     798:	9b 1d       	adc	r25, r11
     79a:	91 83       	std	Z+1, r25	; 0x01
     79c:	80 83       	st	Z, r24
     79e:	15 e0       	ldi	r17, 0x05	; 5
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
     7a0:	12 c0       	rjmp	.+36     	; 0x7c6 <Endpoint_Write_Stream_LE+0x8c>
     7a2:	b0 d1       	rcall	.+864    	; 0xb04 <Endpoint_WaitUntilReady>
			}

			if ((ErrorCode = Endpoint_WaitUntilReady()))
     7a4:	88 23       	and	r24, r24
     7a6:	51 f0       	breq	.+20     	; 0x7bc <Endpoint_Write_Stream_LE+0x82>
     7a8:	0d c0       	rjmp	.+26     	; 0x7c4 <Endpoint_Write_Stream_LE+0x8a>
     7aa:	89 91       	ld	r24, Y+
     7ac:	80 93 f1 00 	sts	0x00F1, r24
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     7b0:	08 94       	sec
     7b2:	e1 08       	sbc	r14, r1
		}
		else
		{
			TEMPLATE_TRANSFER_BYTE(DataStream);
			TEMPLATE_BUFFER_MOVE(DataStream, 1);
			Length--;
     7b4:	f1 08       	sbc	r15, r1
     7b6:	08 94       	sec
     7b8:	a1 1c       	adc	r10, r1
			BytesInTransfer++;
     7ba:	b1 1c       	adc	r11, r1
     7bc:	e1 14       	cp	r14, r1
     7be:	f1 04       	cpc	r15, r1
	{
		Length -= *BytesProcessed;
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
     7c0:	c9 f6       	brne	.-78     	; 0x774 <Endpoint_Write_Stream_LE+0x3a>
     7c2:	01 c0       	rjmp	.+2      	; 0x7c6 <Endpoint_Write_Stream_LE+0x8c>
     7c4:	18 2f       	mov	r17, r24
     7c6:	81 2f       	mov	r24, r17
			{
				*BytesProcessed += BytesInTransfer;
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
			}

			if ((ErrorCode = Endpoint_WaitUntilReady()))
     7c8:	df 91       	pop	r29
			BytesInTransfer++;
		}
	}

	return ENDPOINT_RWSTREAM_NoError;
}
     7ca:	cf 91       	pop	r28
     7cc:	1f 91       	pop	r17
     7ce:	ff 90       	pop	r15
     7d0:	ef 90       	pop	r14
     7d2:	df 90       	pop	r13
     7d4:	cf 90       	pop	r12
     7d6:	bf 90       	pop	r11
     7d8:	af 90       	pop	r10
     7da:	08 95       	ret

000007dc <Endpoint_Write_Control_Stream_LE>:
     7dc:	20 91 1f 02 	lds	r18, 0x021F
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
     7e0:	30 91 20 02 	lds	r19, 0x0220
     7e4:	26 17       	cp	r18, r22
     7e6:	37 07       	cpc	r19, r23
     7e8:	20 f4       	brcc	.+8      	; 0x7f2 <Endpoint_Write_Control_Stream_LE+0x16>
     7ea:	b9 01       	movw	r22, r18
     7ec:	fc 01       	movw	r30, r24
     7ee:	20 e0       	ldi	r18, 0x00	; 0
     7f0:	37 c0       	rjmp	.+110    	; 0x860 <Endpoint_Write_Control_Stream_LE+0x84>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
     7f2:	61 15       	cp	r22, r1
     7f4:	71 05       	cpc	r23, r1
     7f6:	d1 f7       	brne	.-12     	; 0x7ec <Endpoint_Write_Control_Stream_LE+0x10>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     7f8:	20 91 e8 00 	lds	r18, 0x00E8
     7fc:	2e 77       	andi	r18, 0x7E	; 126
     7fe:	20 93 e8 00 	sts	0x00E8, r18
     802:	f4 cf       	rjmp	.-24     	; 0x7ec <Endpoint_Write_Control_Stream_LE+0x10>
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     804:	80 91 18 02 	lds	r24, 0x0218

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     808:	88 23       	and	r24, r24
     80a:	09 f4       	brne	.+2      	; 0x80e <Endpoint_Write_Control_Stream_LE+0x32>
     80c:	3f c0       	rjmp	.+126    	; 0x88c <Endpoint_Write_Control_Stream_LE+0xb0>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     80e:	85 30       	cpi	r24, 0x05	; 5
     810:	c9 f1       	breq	.+114    	; 0x884 <Endpoint_Write_Control_Stream_LE+0xa8>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     812:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
     816:	83 fd       	sbrc	r24, 3
     818:	37 c0       	rjmp	.+110    	; 0x888 <Endpoint_Write_Control_Stream_LE+0xac>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     81a:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
     81e:	82 fd       	sbrc	r24, 2
     820:	2b c0       	rjmp	.+86     	; 0x878 <Endpoint_Write_Control_Stream_LE+0x9c>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     822:	80 91 e8 00 	lds	r24, 0x00E8
		  break;

		if (Endpoint_IsINReady())
     826:	80 ff       	sbrs	r24, 0
     828:	1b c0       	rjmp	.+54     	; 0x860 <Endpoint_Write_Control_Stream_LE+0x84>
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
     82a:	80 91 f2 00 	lds	r24, 0x00F2
     82e:	90 91 f3 00 	lds	r25, 0x00F3
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
     832:	06 c0       	rjmp	.+12     	; 0x840 <Endpoint_Write_Control_Stream_LE+0x64>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
     834:	21 91       	ld	r18, Z+
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     836:	20 93 f1 00 	sts	0x00F1, r18
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
     83a:	61 50       	subi	r22, 0x01	; 1
     83c:	70 40       	sbci	r23, 0x00	; 0
				BytesInEndpoint++;
     83e:	01 96       	adiw	r24, 0x01	; 1

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
     840:	61 15       	cp	r22, r1
     842:	71 05       	cpc	r23, r1
     844:	19 f0       	breq	.+6      	; 0x84c <Endpoint_Write_Control_Stream_LE+0x70>
     846:	88 30       	cpi	r24, 0x08	; 8
     848:	91 05       	cpc	r25, r1
     84a:	a0 f3       	brcs	.-24     	; 0x834 <Endpoint_Write_Control_Stream_LE+0x58>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
     84c:	21 e0       	ldi	r18, 0x01	; 1
     84e:	88 30       	cpi	r24, 0x08	; 8
     850:	91 05       	cpc	r25, r1
     852:	09 f0       	breq	.+2      	; 0x856 <Endpoint_Write_Control_Stream_LE+0x7a>
     854:	20 e0       	ldi	r18, 0x00	; 0
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     856:	80 91 e8 00 	lds	r24, 0x00E8
     85a:	8e 77       	andi	r24, 0x7E	; 126
     85c:	80 93 e8 00 	sts	0x00E8, r24
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
     860:	61 15       	cp	r22, r1
     862:	71 05       	cpc	r23, r1
     864:	79 f6       	brne	.-98     	; 0x804 <Endpoint_Write_Control_Stream_LE+0x28>
     866:	22 23       	and	r18, r18
     868:	69 f6       	brne	.-102    	; 0x804 <Endpoint_Write_Control_Stream_LE+0x28>
     86a:	06 c0       	rjmp	.+12     	; 0x878 <Endpoint_Write_Control_Stream_LE+0x9c>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     86c:	80 91 18 02 	lds	r24, 0x0218

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     870:	88 23       	and	r24, r24
     872:	61 f0       	breq	.+24     	; 0x88c <Endpoint_Write_Control_Stream_LE+0xb0>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     874:	85 30       	cpi	r24, 0x05	; 5
     876:	61 f0       	breq	.+24     	; 0x890 <Endpoint_Write_Control_Stream_LE+0xb4>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     878:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
     87c:	82 ff       	sbrs	r24, 2
     87e:	f6 cf       	rjmp	.-20     	; 0x86c <Endpoint_Write_Control_Stream_LE+0x90>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
     880:	80 e0       	ldi	r24, 0x00	; 0
     882:	08 95       	ret
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
     884:	83 e0       	ldi	r24, 0x03	; 3
     886:	08 95       	ret
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
     888:	81 e0       	ldi	r24, 0x01	; 1
     88a:	08 95       	ret
	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
     88c:	82 e0       	ldi	r24, 0x02	; 2
     88e:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
     890:	83 e0       	ldi	r24, 0x03	; 3
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
     892:	08 95       	ret

00000894 <Endpoint_Read_Control_Stream_LE>:
uint8_t TEMPLATE_FUNC_NAME (void* const Buffer,
                            uint16_t Length)
{
	uint8_t* DataStream = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));

	if (!(Length))
     894:	61 15       	cp	r22, r1
     896:	71 05       	cpc	r23, r1
     898:	29 f4       	brne	.+10     	; 0x8a4 <Endpoint_Read_Control_Stream_LE+0x10>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     89a:	20 91 e8 00 	lds	r18, 0x00E8
     89e:	2b 77       	andi	r18, 0x7B	; 123
     8a0:	20 93 e8 00 	sts	0x00E8, r18

#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (void* const Buffer,
                            uint16_t Length)
{
     8a4:	38 2f       	mov	r19, r24
     8a6:	29 2f       	mov	r18, r25
     8a8:	26 c0       	rjmp	.+76     	; 0x8f6 <Endpoint_Read_Control_Stream_LE+0x62>
	if (!(Length))
	  Endpoint_ClearOUT();

	while (Length)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     8aa:	80 91 18 02 	lds	r24, 0x0218

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     8ae:	88 23       	and	r24, r24
     8b0:	b1 f1       	breq	.+108    	; 0x91e <Endpoint_Read_Control_Stream_LE+0x8a>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     8b2:	85 30       	cpi	r24, 0x05	; 5
     8b4:	81 f1       	breq	.+96     	; 0x916 <Endpoint_Read_Control_Stream_LE+0x82>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     8b6:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
     8ba:	83 fd       	sbrc	r24, 3
     8bc:	2e c0       	rjmp	.+92     	; 0x91a <Endpoint_Read_Control_Stream_LE+0x86>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     8be:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;

		if (Endpoint_IsOUTReceived())
     8c2:	82 ff       	sbrs	r24, 2
     8c4:	f2 cf       	rjmp	.-28     	; 0x8aa <Endpoint_Read_Control_Stream_LE+0x16>
     8c6:	e3 2f       	mov	r30, r19
     8c8:	f2 2f       	mov	r31, r18
     8ca:	08 c0       	rjmp	.+16     	; 0x8dc <Endpoint_Read_Control_Stream_LE+0x48>
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
     8cc:	80 91 f1 00 	lds	r24, 0x00F1
		{
			while (Length && Endpoint_BytesInEndpoint())
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
     8d0:	81 93       	st	Z+, r24
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
     8d2:	3e 2f       	mov	r19, r30
     8d4:	2f 2f       	mov	r18, r31
				Length--;
     8d6:	61 50       	subi	r22, 0x01	; 1
     8d8:	70 40       	sbci	r23, 0x00	; 0
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;

		if (Endpoint_IsOUTReceived())
		{
			while (Length && Endpoint_BytesInEndpoint())
     8da:	41 f0       	breq	.+16     	; 0x8ec <Endpoint_Read_Control_Stream_LE+0x58>
     8dc:	3e 2f       	mov	r19, r30
     8de:	2f 2f       	mov	r18, r31
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
     8e0:	80 91 f2 00 	lds	r24, 0x00F2
     8e4:	90 91 f3 00 	lds	r25, 0x00F3
     8e8:	00 97       	sbiw	r24, 0x00	; 0
     8ea:	81 f7       	brne	.-32     	; 0x8cc <Endpoint_Read_Control_Stream_LE+0x38>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     8ec:	80 91 e8 00 	lds	r24, 0x00E8
     8f0:	8b 77       	andi	r24, 0x7B	; 123
     8f2:	80 93 e8 00 	sts	0x00E8, r24
	uint8_t* DataStream = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));

	if (!(Length))
	  Endpoint_ClearOUT();

	while (Length)
     8f6:	61 15       	cp	r22, r1
     8f8:	71 05       	cpc	r23, r1
     8fa:	b9 f6       	brne	.-82     	; 0x8aa <Endpoint_Read_Control_Stream_LE+0x16>
     8fc:	06 c0       	rjmp	.+12     	; 0x90a <Endpoint_Read_Control_Stream_LE+0x76>
		}
	}

	while (!(Endpoint_IsINReady()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     8fe:	80 91 18 02 	lds	r24, 0x0218

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     902:	88 23       	and	r24, r24
     904:	61 f0       	breq	.+24     	; 0x91e <Endpoint_Read_Control_Stream_LE+0x8a>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     906:	85 30       	cpi	r24, 0x05	; 5
     908:	61 f0       	breq	.+24     	; 0x922 <Endpoint_Read_Control_Stream_LE+0x8e>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     90a:	80 91 e8 00 	lds	r24, 0x00E8

			Endpoint_ClearOUT();
		}
	}

	while (!(Endpoint_IsINReady()))
     90e:	80 ff       	sbrs	r24, 0
     910:	f6 cf       	rjmp	.-20     	; 0x8fe <Endpoint_Read_Control_Stream_LE+0x6a>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
     912:	80 e0       	ldi	r24, 0x00	; 0
     914:	08 95       	ret
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
     916:	83 e0       	ldi	r24, 0x03	; 3
     918:	08 95       	ret
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
     91a:	81 e0       	ldi	r24, 0x01	; 1
     91c:	08 95       	ret
	while (!(Endpoint_IsINReady()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
     91e:	82 e0       	ldi	r24, 0x02	; 2
     920:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
     922:	83 e0       	ldi	r24, 0x03	; 3
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
     924:	08 95       	ret

00000926 <Endpoint_Write_Control_PStream_LE>:
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
     926:	20 91 1f 02 	lds	r18, 0x021F
     92a:	30 91 20 02 	lds	r19, 0x0220
     92e:	26 17       	cp	r18, r22
     930:	37 07       	cpc	r19, r23
     932:	20 f4       	brcc	.+8      	; 0x93c <Endpoint_Write_Control_PStream_LE+0x16>
     934:	b9 01       	movw	r22, r18
     936:	fc 01       	movw	r30, r24
     938:	20 e0       	ldi	r18, 0x00	; 0
     93a:	38 c0       	rjmp	.+112    	; 0x9ac <Endpoint_Write_Control_PStream_LE+0x86>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
     93c:	61 15       	cp	r22, r1
     93e:	71 05       	cpc	r23, r1
     940:	d1 f7       	brne	.-12     	; 0x936 <Endpoint_Write_Control_PStream_LE+0x10>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     942:	20 91 e8 00 	lds	r18, 0x00E8
     946:	2e 77       	andi	r18, 0x7E	; 126
     948:	20 93 e8 00 	sts	0x00E8, r18
     94c:	f4 cf       	rjmp	.-24     	; 0x936 <Endpoint_Write_Control_PStream_LE+0x10>
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     94e:	80 91 18 02 	lds	r24, 0x0218

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     952:	88 23       	and	r24, r24
     954:	09 f4       	brne	.+2      	; 0x958 <Endpoint_Write_Control_PStream_LE+0x32>
     956:	40 c0       	rjmp	.+128    	; 0x9d8 <Endpoint_Write_Control_PStream_LE+0xb2>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     958:	85 30       	cpi	r24, 0x05	; 5
     95a:	d1 f1       	breq	.+116    	; 0x9d0 <Endpoint_Write_Control_PStream_LE+0xaa>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     95c:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
     960:	83 fd       	sbrc	r24, 3
     962:	38 c0       	rjmp	.+112    	; 0x9d4 <Endpoint_Write_Control_PStream_LE+0xae>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     964:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
     968:	82 fd       	sbrc	r24, 2
     96a:	2c c0       	rjmp	.+88     	; 0x9c4 <Endpoint_Write_Control_PStream_LE+0x9e>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     96c:	80 91 e8 00 	lds	r24, 0x00E8
		  break;

		if (Endpoint_IsINReady())
     970:	80 ff       	sbrs	r24, 0
     972:	1c c0       	rjmp	.+56     	; 0x9ac <Endpoint_Write_Control_PStream_LE+0x86>
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
     974:	80 91 f2 00 	lds	r24, 0x00F2
     978:	90 91 f3 00 	lds	r25, 0x00F3
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
     97c:	07 c0       	rjmp	.+14     	; 0x98c <Endpoint_Write_Control_PStream_LE+0x66>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
     97e:	24 91       	lpm	r18, Z
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     980:	20 93 f1 00 	sts	0x00F1, r18
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
     984:	31 96       	adiw	r30, 0x01	; 1
				Length--;
     986:	61 50       	subi	r22, 0x01	; 1
     988:	70 40       	sbci	r23, 0x00	; 0
				BytesInEndpoint++;
     98a:	01 96       	adiw	r24, 0x01	; 1

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
     98c:	61 15       	cp	r22, r1
     98e:	71 05       	cpc	r23, r1
     990:	19 f0       	breq	.+6      	; 0x998 <Endpoint_Write_Control_PStream_LE+0x72>
     992:	88 30       	cpi	r24, 0x08	; 8
     994:	91 05       	cpc	r25, r1
     996:	98 f3       	brcs	.-26     	; 0x97e <Endpoint_Write_Control_PStream_LE+0x58>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
     998:	21 e0       	ldi	r18, 0x01	; 1
     99a:	88 30       	cpi	r24, 0x08	; 8
     99c:	91 05       	cpc	r25, r1
     99e:	09 f0       	breq	.+2      	; 0x9a2 <Endpoint_Write_Control_PStream_LE+0x7c>
     9a0:	20 e0       	ldi	r18, 0x00	; 0
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     9a2:	80 91 e8 00 	lds	r24, 0x00E8
     9a6:	8e 77       	andi	r24, 0x7E	; 126
     9a8:	80 93 e8 00 	sts	0x00E8, r24
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
     9ac:	61 15       	cp	r22, r1
     9ae:	71 05       	cpc	r23, r1
     9b0:	71 f6       	brne	.-100    	; 0x94e <Endpoint_Write_Control_PStream_LE+0x28>
     9b2:	22 23       	and	r18, r18
     9b4:	61 f6       	brne	.-104    	; 0x94e <Endpoint_Write_Control_PStream_LE+0x28>
     9b6:	06 c0       	rjmp	.+12     	; 0x9c4 <Endpoint_Write_Control_PStream_LE+0x9e>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     9b8:	80 91 18 02 	lds	r24, 0x0218

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     9bc:	88 23       	and	r24, r24
     9be:	61 f0       	breq	.+24     	; 0x9d8 <Endpoint_Write_Control_PStream_LE+0xb2>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     9c0:	85 30       	cpi	r24, 0x05	; 5
     9c2:	61 f0       	breq	.+24     	; 0x9dc <Endpoint_Write_Control_PStream_LE+0xb6>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     9c4:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
     9c8:	82 ff       	sbrs	r24, 2
     9ca:	f6 cf       	rjmp	.-20     	; 0x9b8 <Endpoint_Write_Control_PStream_LE+0x92>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
     9cc:	80 e0       	ldi	r24, 0x00	; 0
     9ce:	08 95       	ret
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
     9d0:	83 e0       	ldi	r24, 0x03	; 3
     9d2:	08 95       	ret
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
     9d4:	81 e0       	ldi	r24, 0x01	; 1
     9d6:	08 95       	ret
	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
     9d8:	82 e0       	ldi	r24, 0x02	; 2
     9da:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
     9dc:	83 e0       	ldi	r24, 0x03	; 3
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
     9de:	08 95       	ret

000009e0 <Endpoint_ConfigureEndpoint_Prv>:
	UECFG0X = UECFG0XData;
	UECFG1X = UECFG1XData;

	return Endpoint_IsConfigured();
#else
	for (uint8_t EPNum = Number; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
     9e0:	98 2f       	mov	r25, r24
     9e2:	2a c0       	rjmp	.+84     	; 0xa38 <Endpoint_ConfigureEndpoint_Prv+0x58>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     9e4:	90 93 e9 00 	sts	0x00E9, r25
		uint8_t UECFG1XTemp;
		uint8_t UEIENXTemp;

		Endpoint_SelectEndpoint(EPNum);

		if (EPNum == Number)
     9e8:	98 17       	cp	r25, r24
     9ea:	39 f0       	breq	.+14     	; 0x9fa <Endpoint_ConfigureEndpoint_Prv+0x1a>
			UECFG1XTemp = UECFG1XData;
			UEIENXTemp  = 0;
		}
		else
		{
			UECFG0XTemp = UECFG0X;
     9ec:	70 91 ec 00 	lds	r23, 0x00EC
			UECFG1XTemp = UECFG1X;
     9f0:	20 91 ed 00 	lds	r18, 0x00ED
			UEIENXTemp  = UEIENX;
     9f4:	50 91 f0 00 	lds	r21, 0x00F0
     9f8:	03 c0       	rjmp	.+6      	; 0xa00 <Endpoint_ConfigureEndpoint_Prv+0x20>
		Endpoint_SelectEndpoint(EPNum);

		if (EPNum == Number)
		{
			UECFG0XTemp = UECFG0XData;
			UECFG1XTemp = UECFG1XData;
     9fa:	24 2f       	mov	r18, r20

		Endpoint_SelectEndpoint(EPNum);

		if (EPNum == Number)
		{
			UECFG0XTemp = UECFG0XData;
     9fc:	76 2f       	mov	r23, r22
			UECFG1XTemp = UECFG1XData;
			UEIENXTemp  = 0;
     9fe:	50 e0       	ldi	r21, 0x00	; 0
			UECFG0XTemp = UECFG0X;
			UECFG1XTemp = UECFG1X;
			UEIENXTemp  = UEIENX;
		}

		if (!(UECFG1XTemp & (1 << ALLOC)))
     a00:	21 ff       	sbrs	r18, 1
     a02:	19 c0       	rjmp	.+50     	; 0xa36 <Endpoint_ConfigureEndpoint_Prv+0x56>
			 *  to and from a host.
			 */
			static inline void Endpoint_DisableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_DisableEndpoint(void)
			{
				UECONX &= ~(1 << EPEN);
     a04:	30 91 eb 00 	lds	r19, 0x00EB
     a08:	3e 7f       	andi	r19, 0xFE	; 254
     a0a:	30 93 eb 00 	sts	0x00EB, r19
		  continue;

		Endpoint_DisableEndpoint();
		UECFG1X &= ~(1 << ALLOC);
     a0e:	30 91 ed 00 	lds	r19, 0x00ED
     a12:	3d 7f       	andi	r19, 0xFD	; 253
     a14:	30 93 ed 00 	sts	0x00ED, r19
			 *  \note Endpoints must first be configured properly via \ref Endpoint_ConfigureEndpoint().
			 */
			static inline void Endpoint_EnableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_EnableEndpoint(void)
			{
				UECONX |= (1 << EPEN);
     a18:	30 91 eb 00 	lds	r19, 0x00EB
     a1c:	31 60       	ori	r19, 0x01	; 1
     a1e:	30 93 eb 00 	sts	0x00EB, r19

		Endpoint_EnableEndpoint();
		UECFG0X = UECFG0XTemp;
     a22:	70 93 ec 00 	sts	0x00EC, r23
		UECFG1X = UECFG1XTemp;
     a26:	20 93 ed 00 	sts	0x00ED, r18
		UEIENX  = UEIENXTemp;
     a2a:	50 93 f0 00 	sts	0x00F0, r21
			 *  \return Boolean \c true if the currently selected endpoint has been configured, \c false otherwise.
			 */
			static inline bool Endpoint_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsConfigured(void)
			{
				return ((UESTA0X & (1 << CFGOK)) ? true : false);
     a2e:	20 91 ee 00 	lds	r18, 0x00EE

		if (!(Endpoint_IsConfigured()))
     a32:	27 ff       	sbrs	r18, 7
     a34:	08 c0       	rjmp	.+16     	; 0xa46 <Endpoint_ConfigureEndpoint_Prv+0x66>
	UECFG0X = UECFG0XData;
	UECFG1X = UECFG1XData;

	return Endpoint_IsConfigured();
#else
	for (uint8_t EPNum = Number; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
     a36:	9f 5f       	subi	r25, 0xFF	; 255
     a38:	97 30       	cpi	r25, 0x07	; 7
     a3a:	a0 f2       	brcs	.-88     	; 0x9e4 <Endpoint_ConfigureEndpoint_Prv+0x4>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     a3c:	8f 70       	andi	r24, 0x0F	; 15
     a3e:	80 93 e9 00 	sts	0x00E9, r24
		if (!(Endpoint_IsConfigured()))
		  return false;
	}

	Endpoint_SelectEndpoint(Number);
	return true;
     a42:	81 e0       	ldi	r24, 0x01	; 1
     a44:	08 95       	ret
		UECFG0X = UECFG0XTemp;
		UECFG1X = UECFG1XTemp;
		UEIENX  = UEIENXTemp;

		if (!(Endpoint_IsConfigured()))
		  return false;
     a46:	80 e0       	ldi	r24, 0x00	; 0
	}

	Endpoint_SelectEndpoint(Number);
	return true;
#endif
}
     a48:	08 95       	ret

00000a4a <Endpoint_ConfigureEndpointTable>:
uint8_t USB_Device_ControlEndpointSize = ENDPOINT_CONTROLEP_DEFAULT_SIZE;
#endif

bool Endpoint_ConfigureEndpointTable(const USB_Endpoint_Table_t* const Table,
                                     const uint8_t Entries)
{
     a4a:	0f 93       	push	r16
     a4c:	1f 93       	push	r17
     a4e:	cf 93       	push	r28
     a50:	df 93       	push	r29
     a52:	16 2f       	mov	r17, r22
	{
		if (!(Table[i].Address))
		  continue;
	
		if (!(Endpoint_ConfigureEndpoint(Table[i].Address, Table[i].Type, Table[i].Size, Table[i].Banks)))
		  return false;
     a54:	ec 01       	movw	r28, r24
#endif

bool Endpoint_ConfigureEndpointTable(const USB_Endpoint_Table_t* const Table,
                                     const uint8_t Entries)
{
	for (uint8_t i = 0; i < Entries; i++)
     a56:	00 e0       	ldi	r16, 0x00	; 0
     a58:	2a c0       	rjmp	.+84     	; 0xaae <Endpoint_ConfigureEndpointTable+0x64>
	{
		if (!(Table[i].Address))
     a5a:	98 81       	ld	r25, Y
     a5c:	99 23       	and	r25, r25
     a5e:	29 f1       	breq	.+74     	; 0xaaa <Endpoint_ConfigureEndpointTable+0x60>
		  continue;
	
		if (!(Endpoint_ConfigureEndpoint(Table[i].Address, Table[i].Type, Table[i].Size, Table[i].Banks)))
     a60:	6b 81       	ldd	r22, Y+3	; 0x03
     a62:	e9 81       	ldd	r30, Y+1	; 0x01
     a64:	fa 81       	ldd	r31, Y+2	; 0x02
     a66:	2c 81       	ldd	r18, Y+4	; 0x04
			static inline bool Endpoint_ConfigureEndpoint(const uint8_t Address,
			                                              const uint8_t Type,
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);
     a68:	89 2f       	mov	r24, r25
     a6a:	8f 70       	andi	r24, 0x0F	; 15

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
     a6c:	87 30       	cpi	r24, 0x07	; 7
     a6e:	18 f5       	brcc	.+70     	; 0xab6 <Endpoint_ConfigureEndpointTable+0x6c>
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
				                                      ((Type << EPTYPE0) | ((Address & ENDPOINT_DIR_IN) ? (1 << EPDIR) : 0)),
     a70:	62 95       	swap	r22
     a72:	66 0f       	add	r22, r22
     a74:	66 0f       	add	r22, r22
     a76:	60 7c       	andi	r22, 0xC0	; 192
     a78:	99 1f       	adc	r25, r25
     a7a:	99 27       	eor	r25, r25
     a7c:	99 1f       	adc	r25, r25
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
     a7e:	69 2b       	or	r22, r25
     a80:	22 30       	cpi	r18, 0x02	; 2
     a82:	10 f0       	brcs	.+4      	; 0xa88 <Endpoint_ConfigureEndpointTable+0x3e>
     a84:	96 e0       	ldi	r25, 0x06	; 6
     a86:	01 c0       	rjmp	.+2      	; 0xa8a <Endpoint_ConfigureEndpointTable+0x40>
     a88:	92 e0       	ldi	r25, 0x02	; 2
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes) ATTR_WARN_UNUSED_RESULT ATTR_CONST
			                                                                       ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;
     a8a:	28 e0       	ldi	r18, 0x08	; 8
     a8c:	30 e0       	ldi	r19, 0x00	; 0
		/* Inline Functions: */
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes) ATTR_WARN_UNUSED_RESULT ATTR_CONST
			                                                                       ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
     a8e:	40 e0       	ldi	r20, 0x00	; 0
     a90:	03 c0       	rjmp	.+6      	; 0xa98 <Endpoint_ConfigureEndpointTable+0x4e>
				uint16_t CheckBytes = 8;

				while (CheckBytes < Bytes)
				{
					MaskVal++;
     a92:	4f 5f       	subi	r20, 0xFF	; 255
					CheckBytes <<= 1;
     a94:	22 0f       	add	r18, r18
     a96:	33 1f       	adc	r19, r19
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while (CheckBytes < Bytes)
     a98:	2e 17       	cp	r18, r30
     a9a:	3f 07       	cpc	r19, r31
     a9c:	d0 f3       	brcs	.-12     	; 0xa92 <Endpoint_ConfigureEndpointTable+0x48>
				{
					MaskVal++;
					CheckBytes <<= 1;
				}

				return (MaskVal << EPSIZE0);
     a9e:	42 95       	swap	r20
     aa0:	40 7f       	andi	r20, 0xF0	; 240
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
     aa2:	49 2b       	or	r20, r25
     aa4:	9d df       	rcall	.-198    	; 0x9e0 <Endpoint_ConfigureEndpoint_Prv>
     aa6:	88 23       	and	r24, r24
     aa8:	31 f0       	breq	.+12     	; 0xab6 <Endpoint_ConfigureEndpointTable+0x6c>
     aaa:	0f 5f       	subi	r16, 0xFF	; 255
#endif

bool Endpoint_ConfigureEndpointTable(const USB_Endpoint_Table_t* const Table,
                                     const uint8_t Entries)
{
	for (uint8_t i = 0; i < Entries; i++)
     aac:	25 96       	adiw	r28, 0x05	; 5
     aae:	01 17       	cp	r16, r17
     ab0:	a1 f6       	brne	.-88     	; 0xa5a <Endpoint_ConfigureEndpointTable+0x10>
     ab2:	81 e0       	ldi	r24, 0x01	; 1
	
		if (!(Endpoint_ConfigureEndpoint(Table[i].Address, Table[i].Type, Table[i].Size, Table[i].Banks)))
		  return false;
	}
	
	return true;
     ab4:	01 c0       	rjmp	.+2      	; 0xab8 <Endpoint_ConfigureEndpointTable+0x6e>
     ab6:	80 e0       	ldi	r24, 0x00	; 0
	{
		if (!(Table[i].Address))
		  continue;
	
		if (!(Endpoint_ConfigureEndpoint(Table[i].Address, Table[i].Type, Table[i].Size, Table[i].Banks)))
		  return false;
     ab8:	df 91       	pop	r29
	}
	
	return true;
}
     aba:	cf 91       	pop	r28
     abc:	1f 91       	pop	r17
     abe:	0f 91       	pop	r16
     ac0:	08 95       	ret

00000ac2 <Endpoint_ClearStatusStage>:
     ac2:	80 91 19 02 	lds	r24, 0x0219
	}
}

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
     ac6:	87 ff       	sbrs	r24, 7
     ac8:	13 c0       	rjmp	.+38     	; 0xaf0 <Endpoint_ClearStatusStage+0x2e>
     aca:	04 c0       	rjmp	.+8      	; 0xad4 <Endpoint_ClearStatusStage+0x12>
	{
		while (!(Endpoint_IsOUTReceived()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
     acc:	80 91 18 02 	lds	r24, 0x0218
     ad0:	88 23       	and	r24, r24
     ad2:	b9 f0       	breq	.+46     	; 0xb02 <Endpoint_ClearStatusStage+0x40>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     ad4:	80 91 e8 00 	lds	r24, 0x00E8

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
	{
		while (!(Endpoint_IsOUTReceived()))
     ad8:	82 ff       	sbrs	r24, 2
     ada:	f8 cf       	rjmp	.-16     	; 0xacc <Endpoint_ClearStatusStage+0xa>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     adc:	80 91 e8 00 	lds	r24, 0x00E8
     ae0:	8b 77       	andi	r24, 0x7B	; 123
     ae2:	80 93 e8 00 	sts	0x00E8, r24
     ae6:	08 95       	ret
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
     ae8:	80 91 18 02 	lds	r24, 0x0218
     aec:	88 23       	and	r24, r24
     aee:	49 f0       	breq	.+18     	; 0xb02 <Endpoint_ClearStatusStage+0x40>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     af0:	80 91 e8 00 	lds	r24, 0x00E8

		Endpoint_ClearOUT();
	}
	else
	{
		while (!(Endpoint_IsINReady()))
     af4:	80 ff       	sbrs	r24, 0
     af6:	f8 cf       	rjmp	.-16     	; 0xae8 <Endpoint_ClearStatusStage+0x26>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     af8:	80 91 e8 00 	lds	r24, 0x00E8
     afc:	8e 77       	andi	r24, 0x7E	; 126
     afe:	80 93 e8 00 	sts	0x00E8, r24
     b02:	08 95       	ret

00000b04 <Endpoint_WaitUntilReady>:
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
     b04:	80 91 e4 00 	lds	r24, 0x00E4
     b08:	90 91 e5 00 	lds	r25, 0x00E5
     b0c:	45 e6       	ldi	r20, 0x65	; 101
     b0e:	01 c0       	rjmp	.+2      	; 0xb12 <Endpoint_WaitUntilReady+0xe>
     b10:	c9 01       	movw	r24, r18
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
     b12:	20 91 ec 00 	lds	r18, 0x00EC
     b16:	20 ff       	sbrs	r18, 0
     b18:	23 c0       	rjmp	.+70     	; 0xb60 <Endpoint_WaitUntilReady+0x5c>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     b1a:	20 91 e8 00 	lds	r18, 0x00E8

	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
     b1e:	20 fd       	sbrc	r18, 0
     b20:	15 c0       	rjmp	.+42     	; 0xb4c <Endpoint_WaitUntilReady+0x48>
		{
			if (Endpoint_IsOUTReceived())
			  return ENDPOINT_READYWAIT_NoError;
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     b22:	20 91 18 02 	lds	r18, 0x0218

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     b26:	22 23       	and	r18, r18
     b28:	99 f0       	breq	.+38     	; 0xb50 <Endpoint_WaitUntilReady+0x4c>
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     b2a:	25 30       	cpi	r18, 0x05	; 5
     b2c:	99 f0       	breq	.+38     	; 0xb54 <Endpoint_WaitUntilReady+0x50>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
     b2e:	20 91 eb 00 	lds	r18, 0x00EB
		  return ENDPOINT_READYWAIT_BusSuspended;
		else if (Endpoint_IsStalled())
     b32:	25 fd       	sbrc	r18, 5
     b34:	11 c0       	rjmp	.+34     	; 0xb58 <Endpoint_WaitUntilReady+0x54>
     b36:	20 91 e4 00 	lds	r18, 0x00E4
     b3a:	30 91 e5 00 	lds	r19, 0x00E5
		  return ENDPOINT_READYWAIT_EndpointStalled;

		uint16_t CurrentFrameNumber = USB_Device_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
     b3e:	28 17       	cp	r18, r24
     b40:	39 07       	cpc	r19, r25
     b42:	39 f3       	breq	.-50     	; 0xb12 <Endpoint_WaitUntilReady+0xe>
     b44:	41 50       	subi	r20, 0x01	; 1
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
     b46:	21 f7       	brne	.-56     	; 0xb10 <Endpoint_WaitUntilReady+0xc>
			  return ENDPOINT_READYWAIT_Timeout;
     b48:	84 e0       	ldi	r24, 0x04	; 4
     b4a:	08 95       	ret
	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
     b4c:	80 e0       	ldi	r24, 0x00	; 0
     b4e:	08 95       	ret
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
     b50:	82 e0       	ldi	r24, 0x02	; 2
     b52:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_READYWAIT_BusSuspended;
     b54:	83 e0       	ldi	r24, 0x03	; 3
     b56:	08 95       	ret
		else if (Endpoint_IsStalled())
		  return ENDPOINT_READYWAIT_EndpointStalled;
     b58:	81 e0       	ldi	r24, 0x01	; 1
     b5a:	08 95       	ret
			  return ENDPOINT_READYWAIT_NoError;
		}
		else
		{
			if (Endpoint_IsOUTReceived())
			  return ENDPOINT_READYWAIT_NoError;
     b5c:	80 e0       	ldi	r24, 0x00	; 0

			if (!(TimeoutMSRem--))
			  return ENDPOINT_READYWAIT_Timeout;
		}
	}
}
     b5e:	08 95       	ret
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     b60:	20 91 e8 00 	lds	r18, 0x00E8
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
		}
		else
		{
			if (Endpoint_IsOUTReceived())
     b64:	22 ff       	sbrs	r18, 2
     b66:	dd cf       	rjmp	.-70     	; 0xb22 <Endpoint_WaitUntilReady+0x1e>
     b68:	f9 cf       	rjmp	.-14     	; 0xb5c <Endpoint_WaitUntilReady+0x58>

00000b6a <USB_Host_ResetDevice>:
			 *  \return Boolean \c true if the bus is currently suspended, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusSuspended(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusSuspended(void)
			{
				return ((UHCON & (1 << SOFEN)) ? false : true);
     b6a:	80 91 9e 00 	lds	r24, 0x009E
     b6e:	90 e0       	ldi	r25, 0x00	; 0
     b70:	81 70       	andi	r24, 0x01	; 1
     b72:	90 70       	andi	r25, 0x00	; 0
						break;
					case USB_INT_DCONNI:
						UHIEN  &= ~(1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  &= ~(1 << DDISCE);
     b74:	20 91 a0 00 	lds	r18, 0x00A0
     b78:	2d 7f       	andi	r18, 0xFD	; 253
     b7a:	20 93 a0 00 	sts	0x00A0, r18
			 *  woken up automatically and the bus resumed after the reset has been correctly issued.
			 */
			static inline void USB_Host_ResetBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResetBus(void)
			{
				UHCON |=  (1 << RESET);
     b7e:	20 91 9e 00 	lds	r18, 0x009E
     b82:	22 60       	ori	r18, 0x02	; 2
     b84:	20 93 9e 00 	sts	0x009E, r18
			 *  \return Boolean \c true if no bus reset is currently being sent, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusResetComplete(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusResetComplete(void)
			{
				return ((UHCON & (1 << RESET)) ? false : true);
     b88:	20 91 9e 00 	lds	r18, 0x009E
	bool BusSuspended = USB_Host_IsBusSuspended();

	USB_INT_Disable(USB_INT_DDISCI);

	USB_Host_ResetBus();
	while (!(USB_Host_IsBusResetComplete()));
     b8c:	21 fd       	sbrc	r18, 1
     b8e:	fc cf       	rjmp	.-8      	; 0xb88 <USB_Host_ResetDevice+0x1e>
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
     b90:	20 91 9e 00 	lds	r18, 0x009E
     b94:	21 60       	ori	r18, 0x01	; 1
     b96:	20 93 9e 00 	sts	0x009E, r18
	USB_Host_ResumeBus();

	USB_Host_ConfigurationNumber = 0;
     b9a:	10 92 16 02 	sts	0x0216, r1
					case USB_INT_RXSTPI:
						return (UEIENX & (1 << RXSTPE));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
     b9e:	20 91 a0 00 	lds	r18, 0x00A0
     ba2:	30 e0       	ldi	r19, 0x00	; 0
     ba4:	20 72       	andi	r18, 0x20	; 32
     ba6:	30 70       	andi	r19, 0x00	; 0
						UEIENX &= ~(1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  &= ~(1 << HSOFE);
     ba8:	40 91 a0 00 	lds	r20, 0x00A0
     bac:	4f 7d       	andi	r20, 0xDF	; 223
     bae:	40 93 a0 00 	sts	0x00A0, r20
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     bb2:	40 91 9f 00 	lds	r20, 0x009F
     bb6:	4f 7d       	andi	r20, 0xDF	; 223
     bb8:	40 93 9f 00 	sts	0x009F, r20
     bbc:	4a e0       	ldi	r20, 0x0A	; 10
					case USB_INT_RXSTPI:
						return (UEINTX & (1 << RXSTPI));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
     bbe:	50 91 9f 00 	lds	r21, 0x009F
		/* Workaround for powerless-pull-up devices. After a USB bus reset,
		   all disconnection interrupts are suppressed while a USB frame is
		   looked for - if it is found within 10ms, the device is still
		   present.                                                        */

		if (USB_INT_HasOccurred(USB_INT_HSOFI))
     bc2:	55 ff       	sbrs	r21, 5
     bc4:	0b c0       	rjmp	.+22     	; 0xbdc <USB_Host_ResetDevice+0x72>
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     bc6:	40 91 9f 00 	lds	r20, 0x009F
     bca:	4f 7d       	andi	r20, 0xDF	; 223
     bcc:	40 93 9f 00 	sts	0x009F, r20
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
						break;
					case USB_INT_DDISCI:
						UHINT  &= ~(1 << DDISCI);
     bd0:	40 91 9f 00 	lds	r20, 0x009F
     bd4:	4d 7f       	andi	r20, 0xFD	; 253
     bd6:	40 93 9f 00 	sts	0x009F, r20
     bda:	08 c0       	rjmp	.+16     	; 0xbec <USB_Host_ResetDevice+0x82>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     bdc:	ef ec       	ldi	r30, 0xCF	; 207
     bde:	f7 e0       	ldi	r31, 0x07	; 7
     be0:	31 97       	sbiw	r30, 0x01	; 1
     be2:	f1 f7       	brne	.-4      	; 0xbe0 <USB_Host_ResetDevice+0x76>
     be4:	00 c0       	rjmp	.+0      	; 0xbe6 <USB_Host_ResetDevice+0x7c>
     be6:	00 00       	nop
     be8:	41 50       	subi	r20, 0x01	; 1
	bool HSOFIEnabled = USB_INT_IsEnabled(USB_INT_HSOFI);

	USB_INT_Disable(USB_INT_HSOFI);
	USB_INT_Clear(USB_INT_HSOFI);

	for (uint8_t MSRem = 10; MSRem != 0; MSRem--)
     bea:	49 f7       	brne	.-46     	; 0xbbe <USB_Host_ResetDevice+0x54>
		}

		Delay_MS(1);
	}

	if (HSOFIEnabled)
     bec:	21 15       	cp	r18, r1
     bee:	31 05       	cpc	r19, r1
     bf0:	29 f0       	breq	.+10     	; 0xbfc <USB_Host_ResetDevice+0x92>
						UEIENX |= (1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  |= (1 << HSOFE);
     bf2:	20 91 a0 00 	lds	r18, 0x00A0
     bf6:	20 62       	ori	r18, 0x20	; 32
     bf8:	20 93 a0 00 	sts	0x00A0, r18
	  USB_INT_Enable(USB_INT_HSOFI);

	if (BusSuspended)
     bfc:	00 97       	sbiw	r24, 0x00	; 0
     bfe:	29 f4       	brne	.+10     	; 0xc0a <USB_Host_ResetDevice+0xa0>
			 *             some events (such as device disconnections) will not fire until the bus is resumed.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				UHCON &= ~(1 << SOFEN);
     c00:	80 91 9e 00 	lds	r24, 0x009E
     c04:	8e 7f       	andi	r24, 0xFE	; 254
     c06:	80 93 9e 00 	sts	0x009E, r24
						break;
					case USB_INT_DCONNI:
						UHIEN  |= (1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  |= (1 << DDISCE);
     c0a:	80 91 a0 00 	lds	r24, 0x00A0
     c0e:	82 60       	ori	r24, 0x02	; 2
     c10:	80 93 a0 00 	sts	0x00A0, r24
	  USB_Host_SuspendBus();

	USB_INT_Enable(USB_INT_DDISCI);
}
     c14:	08 95       	ret

00000c16 <USB_Host_WaitMS>:
			 *  \return Boolean \c true if the bus is currently suspended, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusSuspended(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusSuspended(void)
			{
				return ((UHCON & (1 << SOFEN)) ? false : true);
     c16:	40 91 9e 00 	lds	r20, 0x009E
     c1a:	50 e0       	ldi	r21, 0x00	; 0
     c1c:	41 70       	andi	r20, 0x01	; 1
     c1e:	50 70       	andi	r21, 0x00	; 0
					case USB_INT_RXSTPI:
						return (UEIENX & (1 << RXSTPE));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
     c20:	20 91 a0 00 	lds	r18, 0x00A0
     c24:	30 e0       	ldi	r19, 0x00	; 0
     c26:	20 72       	andi	r18, 0x20	; 32
     c28:	30 70       	andi	r19, 0x00	; 0
						UEIENX &= ~(1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  &= ~(1 << HSOFE);
     c2a:	90 91 a0 00 	lds	r25, 0x00A0
     c2e:	9f 7d       	andi	r25, 0xDF	; 223
     c30:	90 93 a0 00 	sts	0x00A0, r25
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     c34:	90 91 9f 00 	lds	r25, 0x009F
     c38:	9f 7d       	andi	r25, 0xDF	; 223
     c3a:	90 93 9f 00 	sts	0x009F, r25
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
     c3e:	90 91 9e 00 	lds	r25, 0x009E
     c42:	91 60       	ori	r25, 0x01	; 1
     c44:	90 93 9e 00 	sts	0x009E, r25
     c48:	2a c0       	rjmp	.+84     	; 0xc9e <USB_Host_WaitMS+0x88>
					case USB_INT_RXSTPI:
						return (UEINTX & (1 << RXSTPI));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
     c4a:	90 91 9f 00 	lds	r25, 0x009F

	USB_Host_ResumeBus();

	while (MS)
	{
		if (USB_INT_HasOccurred(USB_INT_HSOFI))
     c4e:	95 ff       	sbrs	r25, 5
     c50:	06 c0       	rjmp	.+12     	; 0xc5e <USB_Host_WaitMS+0x48>
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     c52:	90 91 9f 00 	lds	r25, 0x009F
     c56:	9f 7d       	andi	r25, 0xDF	; 223
     c58:	90 93 9f 00 	sts	0x009F, r25
		{
			USB_INT_Clear(USB_INT_HSOFI);
			MS--;
     c5c:	81 50       	subi	r24, 0x01	; 1
		}

		if ((USB_HostState == HOST_STATE_Unattached) || (USB_CurrentMode != USB_MODE_Host))
     c5e:	90 91 21 02 	lds	r25, 0x0221
     c62:	91 30       	cpi	r25, 0x01	; 1
     c64:	f9 f0       	breq	.+62     	; 0xca4 <USB_Host_WaitMS+0x8e>
     c66:	90 91 12 02 	lds	r25, 0x0212
     c6a:	92 30       	cpi	r25, 0x02	; 2
     c6c:	d9 f4       	brne	.+54     	; 0xca4 <USB_Host_WaitMS+0x8e>
			 *  \return Boolean \c true if an error has occurred on the selected pipe, \c false otherwise.
			 */
			static inline bool Pipe_IsError(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsError(void)
			{
				return ((UPINTX & (1 << PERRI)) ? true : false);
     c6e:	90 91 a6 00 	lds	r25, 0x00A6
			ErrorCode = HOST_WAITERROR_DeviceDisconnect;

			break;
		}

		if (Pipe_IsError())
     c72:	94 ff       	sbrs	r25, 4
     c74:	09 c0       	rjmp	.+18     	; 0xc88 <USB_Host_WaitMS+0x72>

			/** Clears the error flags for the currently selected pipe. */
			static inline void Pipe_ClearError(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearError(void)
			{
				UPERRX = 0;
     c76:	10 92 f5 00 	sts	0x00F5, r1
				UPINTX &= ~(1 << PERRI);
     c7a:	80 91 a6 00 	lds	r24, 0x00A6
     c7e:	8f 7e       	andi	r24, 0xEF	; 239
     c80:	80 93 a6 00 	sts	0x00A6, r24
		{
			Pipe_ClearError();
			ErrorCode = HOST_WAITERROR_PipeError;
     c84:	82 e0       	ldi	r24, 0x02	; 2

			break;
     c86:	0f c0       	rjmp	.+30     	; 0xca6 <USB_Host_WaitMS+0x90>
			 *  \return Boolean \c true if the current pipe has been stalled by the attached device, \c false otherwise.
			 */
			static inline bool Pipe_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsStalled(void)
			{
				return ((UPINTX & (1 << RXSTALLI)) ? true : false);
     c88:	90 91 a6 00 	lds	r25, 0x00A6
		}

		if (Pipe_IsStalled())
     c8c:	91 ff       	sbrs	r25, 1
     c8e:	07 c0       	rjmp	.+14     	; 0xc9e <USB_Host_WaitMS+0x88>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearStall(void)
			{
				UPINTX &= ~(1 << RXSTALLI);
     c90:	80 91 a6 00 	lds	r24, 0x00A6
     c94:	8d 7f       	andi	r24, 0xFD	; 253
     c96:	80 93 a6 00 	sts	0x00A6, r24
		{
			Pipe_ClearStall();
			ErrorCode = HOST_WAITERROR_SetupStalled;
     c9a:	83 e0       	ldi	r24, 0x03	; 3

			break;
     c9c:	04 c0       	rjmp	.+8      	; 0xca6 <USB_Host_WaitMS+0x90>
	USB_INT_Disable(USB_INT_HSOFI);
	USB_INT_Clear(USB_INT_HSOFI);

	USB_Host_ResumeBus();

	while (MS)
     c9e:	88 23       	and	r24, r24
     ca0:	a1 f6       	brne	.-88     	; 0xc4a <USB_Host_WaitMS+0x34>
     ca2:	01 c0       	rjmp	.+2      	; 0xca6 <USB_Host_WaitMS+0x90>
			MS--;
		}

		if ((USB_HostState == HOST_STATE_Unattached) || (USB_CurrentMode != USB_MODE_Host))
		{
			ErrorCode = HOST_WAITERROR_DeviceDisconnect;
     ca4:	81 e0       	ldi	r24, 0x01	; 1

			break;
		}
	}

	if (BusSuspended)
     ca6:	41 15       	cp	r20, r1
     ca8:	51 05       	cpc	r21, r1
     caa:	29 f4       	brne	.+10     	; 0xcb6 <USB_Host_WaitMS+0xa0>
			 *             some events (such as device disconnections) will not fire until the bus is resumed.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				UHCON &= ~(1 << SOFEN);
     cac:	90 91 9e 00 	lds	r25, 0x009E
     cb0:	9e 7f       	andi	r25, 0xFE	; 254
     cb2:	90 93 9e 00 	sts	0x009E, r25
	  USB_Host_SuspendBus();

	if (HSOFIEnabled)
     cb6:	21 15       	cp	r18, r1
     cb8:	31 05       	cpc	r19, r1
     cba:	29 f0       	breq	.+10     	; 0xcc6 <USB_Host_WaitMS+0xb0>
						UEIENX |= (1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  |= (1 << HSOFE);
     cbc:	90 91 a0 00 	lds	r25, 0x00A0
     cc0:	90 62       	ori	r25, 0x20	; 32
     cc2:	90 93 a0 00 	sts	0x00A0, r25
	  USB_INT_Enable(USB_INT_HSOFI);

	return ErrorCode;
}
     cc6:	08 95       	ret

00000cc8 <USB_Host_ProcessNextHostState>:

#define  __INCLUDE_FROM_HOST_C
#include "../Host.h"

void USB_Host_ProcessNextHostState(void)
{
     cc8:	0f 93       	push	r16
     cca:	1f 93       	push	r17
     ccc:	cf 93       	push	r28
     cce:	df 93       	push	r29
     cd0:	cd b7       	in	r28, 0x3d	; 61
     cd2:	de b7       	in	r29, 0x3e	; 62
     cd4:	28 97       	sbiw	r28, 0x08	; 8
     cd6:	0f b6       	in	r0, 0x3f	; 63
     cd8:	f8 94       	cli
     cda:	de bf       	out	0x3e, r29	; 62
     cdc:	0f be       	out	0x3f, r0	; 63
     cde:	cd bf       	out	0x3d, r28	; 61
	uint8_t SubErrorCode = HOST_ENUMERROR_NoError;

	static uint16_t WaitMSRemaining;
	static uint8_t  PostWaitState;

	switch (USB_HostState)
     ce0:	80 91 21 02 	lds	r24, 0x0221
     ce4:	85 30       	cpi	r24, 0x05	; 5
     ce6:	09 f4       	brne	.+2      	; 0xcea <USB_Host_ProcessNextHostState+0x22>
     ce8:	99 c0       	rjmp	.+306    	; 0xe1c <USB_Host_ProcessNextHostState+0x154>
     cea:	86 30       	cpi	r24, 0x06	; 6
     cec:	68 f4       	brcc	.+26     	; 0xd08 <USB_Host_ProcessNextHostState+0x40>
     cee:	82 30       	cpi	r24, 0x02	; 2
     cf0:	c1 f1       	breq	.+112    	; 0xd62 <USB_Host_ProcessNextHostState+0x9a>
     cf2:	83 30       	cpi	r24, 0x03	; 3
     cf4:	18 f4       	brcc	.+6      	; 0xcfc <USB_Host_ProcessNextHostState+0x34>
     cf6:	88 23       	and	r24, r24
     cf8:	a1 f0       	breq	.+40     	; 0xd22 <USB_Host_ProcessNextHostState+0x5a>
     cfa:	04 c1       	rjmp	.+520    	; 0xf04 <USB_Host_ProcessNextHostState+0x23c>
     cfc:	83 30       	cpi	r24, 0x03	; 3
     cfe:	d9 f1       	breq	.+118    	; 0xd76 <USB_Host_ProcessNextHostState+0xae>
     d00:	84 30       	cpi	r24, 0x04	; 4
     d02:	09 f0       	breq	.+2      	; 0xd06 <USB_Host_ProcessNextHostState+0x3e>
     d04:	ff c0       	rjmp	.+510    	; 0xf04 <USB_Host_ProcessNextHostState+0x23c>
     d06:	62 c0       	rjmp	.+196    	; 0xdcc <USB_Host_ProcessNextHostState+0x104>
     d08:	87 30       	cpi	r24, 0x07	; 7
     d0a:	09 f4       	brne	.+2      	; 0xd0e <USB_Host_ProcessNextHostState+0x46>
     d0c:	9e c0       	rjmp	.+316    	; 0xe4a <USB_Host_ProcessNextHostState+0x182>
     d0e:	87 30       	cpi	r24, 0x07	; 7
     d10:	08 f4       	brcc	.+2      	; 0xd14 <USB_Host_ProcessNextHostState+0x4c>
     d12:	8f c0       	rjmp	.+286    	; 0xe32 <USB_Host_ProcessNextHostState+0x16a>
     d14:	88 30       	cpi	r24, 0x08	; 8
     d16:	09 f4       	brne	.+2      	; 0xd1a <USB_Host_ProcessNextHostState+0x52>
     d18:	b8 c0       	rjmp	.+368    	; 0xe8a <USB_Host_ProcessNextHostState+0x1c2>
     d1a:	89 30       	cpi	r24, 0x09	; 9
     d1c:	09 f0       	breq	.+2      	; 0xd20 <USB_Host_ProcessNextHostState+0x58>
     d1e:	f2 c0       	rjmp	.+484    	; 0xf04 <USB_Host_ProcessNextHostState+0x23c>
     d20:	d9 c0       	rjmp	.+434    	; 0xed4 <USB_Host_ProcessNextHostState+0x20c>
	{
		case HOST_STATE_WaitForDevice:
			if (WaitMSRemaining)
     d22:	00 91 0f 02 	lds	r16, 0x020F
     d26:	10 91 10 02 	lds	r17, 0x0210
     d2a:	01 15       	cp	r16, r1
     d2c:	11 05       	cpc	r17, r1
     d2e:	09 f4       	brne	.+2      	; 0xd32 <USB_Host_ProcessNextHostState+0x6a>
     d30:	e9 c0       	rjmp	.+466    	; 0xf04 <USB_Host_ProcessNextHostState+0x23c>
			{
				if ((SubErrorCode = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
     d32:	81 e0       	ldi	r24, 0x01	; 1
     d34:	70 df       	rcall	.-288    	; 0xc16 <USB_Host_WaitMS>
     d36:	68 2f       	mov	r22, r24
     d38:	88 23       	and	r24, r24
     d3a:	31 f0       	breq	.+12     	; 0xd48 <USB_Host_ProcessNextHostState+0x80>
     d3c:	80 91 11 02 	lds	r24, 0x0211
				{
					USB_HostState = PostWaitState;
     d40:	80 93 21 02 	sts	0x0221, r24
     d44:	81 e0       	ldi	r24, 0x01	; 1
					ErrorCode     = HOST_ENUMERROR_WaitStage;
     d46:	d2 c0       	rjmp	.+420    	; 0xeec <USB_Host_ProcessNextHostState+0x224>
					break;
     d48:	01 50       	subi	r16, 0x01	; 1
				}

				if (!(--WaitMSRemaining))
     d4a:	10 40       	sbci	r17, 0x00	; 0
     d4c:	10 93 10 02 	sts	0x0210, r17
     d50:	00 93 0f 02 	sts	0x020F, r16
     d54:	01 15       	cp	r16, r1
     d56:	11 05       	cpc	r17, r1
     d58:	09 f0       	breq	.+2      	; 0xd5c <USB_Host_ProcessNextHostState+0x94>
     d5a:	d4 c0       	rjmp	.+424    	; 0xf04 <USB_Host_ProcessNextHostState+0x23c>
     d5c:	80 91 11 02 	lds	r24, 0x0211
				  USB_HostState = PostWaitState;
     d60:	07 c0       	rjmp	.+14     	; 0xd70 <USB_Host_ProcessNextHostState+0xa8>
     d62:	88 ee       	ldi	r24, 0xE8	; 232
			}

			break;
		case HOST_STATE_Powered:
			WaitMSRemaining = HOST_DEVICE_SETTLE_DELAY_MS;
     d64:	93 e0       	ldi	r25, 0x03	; 3
     d66:	90 93 10 02 	sts	0x0210, r25
     d6a:	80 93 0f 02 	sts	0x020F, r24
     d6e:	83 e0       	ldi	r24, 0x03	; 3

			USB_HostState = HOST_STATE_Powered_WaitForDeviceSettle;
     d70:	80 93 21 02 	sts	0x0221, r24
     d74:	c7 c0       	rjmp	.+398    	; 0xf04 <USB_Host_ProcessNextHostState+0x23c>
			break;
     d76:	80 91 0f 02 	lds	r24, 0x020F
		case HOST_STATE_Powered_WaitForDeviceSettle:
			if (WaitMSRemaining--)
     d7a:	90 91 10 02 	lds	r25, 0x0210
     d7e:	9c 01       	movw	r18, r24
     d80:	21 50       	subi	r18, 0x01	; 1
     d82:	30 40       	sbci	r19, 0x00	; 0
     d84:	30 93 10 02 	sts	0x0210, r19
     d88:	20 93 0f 02 	sts	0x020F, r18
     d8c:	00 97       	sbiw	r24, 0x00	; 0
     d8e:	39 f0       	breq	.+14     	; 0xd9e <USB_Host_ProcessNextHostState+0xd6>
     d90:	8f ec       	ldi	r24, 0xCF	; 207
     d92:	97 e0       	ldi	r25, 0x07	; 7
     d94:	01 97       	sbiw	r24, 0x01	; 1
     d96:	f1 f7       	brne	.-4      	; 0xd94 <USB_Host_ProcessNextHostState+0xcc>
     d98:	00 c0       	rjmp	.+0      	; 0xd9a <USB_Host_ProcessNextHostState+0xd2>
     d9a:	00 00       	nop
     d9c:	b3 c0       	rjmp	.+358    	; 0xf04 <USB_Host_ProcessNextHostState+0x23c>
     d9e:	77 98       	cbi	0x0e, 7	; 14
			static inline void USB_Host_VBUS_Manual_Off(void)
			{
				#if defined(INVERTED_VBUS_ENABLE_LINE)
				PORTE  |=  (1 << 7);
				#else
				PORTE  &= ~(1 << 7);
     da0:	80 91 d8 00 	lds	r24, 0x00D8

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON |=  (1 << OTGPADE);
     da4:	80 61       	ori	r24, 0x10	; 16
     da6:	80 93 d8 00 	sts	0x00D8, r24
     daa:	80 91 dd 00 	lds	r24, 0x00DD
			}

			static inline void USB_Host_VBUS_Auto_Enable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Enable(void)
			{
				OTGCON &= ~(1 << VBUSHWC);
     dae:	8b 7f       	andi	r24, 0xFB	; 251
     db0:	80 93 dd 00 	sts	0x00DD, r24
     db4:	80 91 d7 00 	lds	r24, 0x00D7
				UHWCON |=  (1 << UVCONE);
     db8:	80 61       	ori	r24, 0x10	; 16
     dba:	80 93 d7 00 	sts	0x00D7, r24
     dbe:	80 91 dd 00 	lds	r24, 0x00DD
			}

			static inline void USB_Host_VBUS_Auto_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_On(void)
			{
				OTGCON |=  (1 << VBUSREQ);
     dc2:	82 60       	ori	r24, 0x02	; 2
     dc4:	80 93 dd 00 	sts	0x00DD, r24
     dc8:	84 e0       	ldi	r24, 0x04	; 4
				#if defined(NO_AUTO_VBUS_MANAGEMENT)
				USB_Host_VBUS_Manual_Enable();
				USB_Host_VBUS_Manual_On();
				#endif

				USB_HostState = HOST_STATE_Powered_WaitForConnect;
     dca:	d2 cf       	rjmp	.-92     	; 0xd70 <USB_Host_ProcessNextHostState+0xa8>
     dcc:	80 91 9f 00 	lds	r24, 0x009F
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
					case USB_INT_DCONNI:
						return (UHINT  & (1 << DCONNI));
     dd0:	80 ff       	sbrs	r24, 0
			}

			break;
		case HOST_STATE_Powered_WaitForConnect:
			if (USB_INT_HasOccurred(USB_INT_DCONNI))
     dd2:	98 c0       	rjmp	.+304    	; 0xf04 <USB_Host_ProcessNextHostState+0x23c>
     dd4:	80 91 9f 00 	lds	r24, 0x009F
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
     dd8:	8e 7f       	andi	r24, 0xFE	; 254
     dda:	80 93 9f 00 	sts	0x009F, r24
     dde:	80 91 9f 00 	lds	r24, 0x009F
						break;
					case USB_INT_DDISCI:
						UHINT  &= ~(1 << DDISCI);
     de2:	8d 7f       	andi	r24, 0xFD	; 253
     de4:	80 93 9f 00 	sts	0x009F, r24
     de8:	80 91 df 00 	lds	r24, 0x00DF
						break;
					case USB_INT_BCERRI:
						OTGINT &= ~(1 << BCERRI);
						break;
					case USB_INT_VBERRI:
						OTGINT &= ~(1 << VBERRI);
     dec:	8d 7f       	andi	r24, 0xFD	; 253
     dee:	80 93 df 00 	sts	0x00DF, r24
     df2:	80 91 de 00 	lds	r24, 0x00DE
						break;
					case USB_INT_BCERRI:
						OTGIEN |= (1 << BCERRE);
						break;
					case USB_INT_VBERRI:
						OTGIEN |= (1 << VBERRE);
     df6:	82 60       	ori	r24, 0x02	; 2
     df8:	80 93 de 00 	sts	0x00DE, r24
     dfc:	80 91 9e 00 	lds	r24, 0x009E
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
     e00:	81 60       	ori	r24, 0x01	; 1
     e02:	80 93 9e 00 	sts	0x009E, r24
     e06:	66 d1       	rcall	.+716    	; 0x10d4 <Pipe_ClearPipes>

				USB_INT_Clear(USB_INT_VBERRI);
				USB_INT_Enable(USB_INT_VBERRI);

				USB_Host_ResumeBus();
				Pipe_ClearPipes();
     e08:	10 92 21 02 	sts	0x0221, r1

				HOST_TASK_NONBLOCK_WAIT(100, HOST_STATE_Powered_DoReset);
     e0c:	84 e6       	ldi	r24, 0x64	; 100
     e0e:	90 e0       	ldi	r25, 0x00	; 0
     e10:	90 93 10 02 	sts	0x0210, r25
     e14:	80 93 0f 02 	sts	0x020F, r24
     e18:	85 e0       	ldi	r24, 0x05	; 5
     e1a:	59 c0       	rjmp	.+178    	; 0xece <USB_Host_ProcessNextHostState+0x206>
     e1c:	a6 de       	rcall	.-692    	; 0xb6a <USB_Host_ResetDevice>
     e1e:	10 92 21 02 	sts	0x0221, r1
			}

			break;
		case HOST_STATE_Powered_DoReset:
			USB_Host_ResetDevice();
     e22:	88 ec       	ldi	r24, 0xC8	; 200

			HOST_TASK_NONBLOCK_WAIT(200, HOST_STATE_Powered_ConfigPipe);
     e24:	90 e0       	ldi	r25, 0x00	; 0
     e26:	90 93 10 02 	sts	0x0210, r25
     e2a:	80 93 0f 02 	sts	0x020F, r24
     e2e:	86 e0       	ldi	r24, 0x06	; 6
     e30:	4e c0       	rjmp	.+156    	; 0xece <USB_Host_ProcessNextHostState+0x206>
     e32:	80 e0       	ldi	r24, 0x00	; 0
     e34:	60 e0       	ldi	r22, 0x00	; 0
     e36:	40 e0       	ldi	r20, 0x00	; 0
			break;
		case HOST_STATE_Powered_ConfigPipe:
			if (!(Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL, ENDPOINT_CONTROLEP, PIPE_CONTROLPIPE_DEFAULT_SIZE, 1)))
     e38:	20 e4       	ldi	r18, 0x40	; 64
     e3a:	30 e0       	ldi	r19, 0x00	; 0
     e3c:	01 e0       	ldi	r16, 0x01	; 1
     e3e:	c4 d0       	rcall	.+392    	; 0xfc8 <Pipe_ConfigurePipe>
     e40:	88 23       	and	r24, r24
     e42:	09 f4       	brne	.+2      	; 0xe46 <USB_Host_ProcessNextHostState+0x17e>
     e44:	4f c0       	rjmp	.+158    	; 0xee4 <USB_Host_ProcessNextHostState+0x21c>
     e46:	87 e0       	ldi	r24, 0x07	; 7
     e48:	93 cf       	rjmp	.-218    	; 0xd70 <USB_Host_ProcessNextHostState+0xa8>
     e4a:	a9 e1       	ldi	r26, 0x19	; 25
     e4c:	b2 e0       	ldi	r27, 0x02	; 2
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
				SubErrorCode = 0;
				break;
			}

			USB_HostState = HOST_STATE_Default;
     e4e:	e2 ed       	ldi	r30, 0xD2	; 210
     e50:	f1 e0       	ldi	r31, 0x01	; 1
			break;
		case HOST_STATE_Default:
			USB_ControlRequest = (USB_Request_Header_t)
     e52:	88 e0       	ldi	r24, 0x08	; 8
     e54:	01 90       	ld	r0, Z+
     e56:	0d 92       	st	X+, r0
     e58:	81 50       	subi	r24, 0x01	; 1
     e5a:	e1 f7       	brne	.-8      	; 0xe54 <USB_Host_ProcessNextHostState+0x18c>
     e5c:	10 92 a7 00 	sts	0x00A7, r1
     e60:	ce 01       	movw	r24, r28
     e62:	01 96       	adiw	r24, 0x01	; 1
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
     e64:	12 d6       	rcall	.+3108   	; 0x1a8a <USB_Host_SendControlRequest>
     e66:	68 2f       	mov	r22, r24
				};

			uint8_t DataBuffer[8];

			Pipe_SelectPipe(PIPE_CONTROLPIPE);
			if ((SubErrorCode = USB_Host_SendControlRequest(DataBuffer)) != HOST_SENDCONTROL_Successful)
     e68:	88 23       	and	r24, r24
     e6a:	09 f0       	breq	.+2      	; 0xe6e <USB_Host_ProcessNextHostState+0x1a6>
     e6c:	3e c0       	rjmp	.+124    	; 0xeea <USB_Host_ProcessNextHostState+0x222>
     e6e:	88 85       	ldd	r24, Y+8	; 0x08
     e70:	80 93 e2 01 	sts	0x01E2, r24
     e74:	7a de       	rcall	.-780    	; 0xb6a <USB_Host_ResetDevice>
     e76:	10 92 21 02 	sts	0x0221, r1
			{
				ErrorCode = HOST_ENUMERROR_ControlError;
				break;
			}

			USB_Host_ControlPipeSize = DataBuffer[offsetof(USB_Descriptor_Device_t, Endpoint0Size)];
     e7a:	88 ec       	ldi	r24, 0xC8	; 200
     e7c:	90 e0       	ldi	r25, 0x00	; 0

			USB_Host_ResetDevice();
     e7e:	90 93 10 02 	sts	0x0210, r25

			HOST_TASK_NONBLOCK_WAIT(200, HOST_STATE_Default_PostReset);
     e82:	80 93 0f 02 	sts	0x020F, r24
     e86:	88 e0       	ldi	r24, 0x08	; 8
     e88:	22 c0       	rjmp	.+68     	; 0xece <USB_Host_ProcessNextHostState+0x206>
     e8a:	20 91 e2 01 	lds	r18, 0x01E2
     e8e:	80 e0       	ldi	r24, 0x00	; 0
     e90:	60 e0       	ldi	r22, 0x00	; 0
     e92:	40 e0       	ldi	r20, 0x00	; 0
     e94:	30 e0       	ldi	r19, 0x00	; 0
			break;
		case HOST_STATE_Default_PostReset:
			if (!(Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL, ENDPOINT_CONTROLEP, USB_Host_ControlPipeSize, 1)))
     e96:	01 e0       	ldi	r16, 0x01	; 1
     e98:	97 d0       	rcall	.+302    	; 0xfc8 <Pipe_ConfigurePipe>
     e9a:	88 23       	and	r24, r24
     e9c:	19 f1       	breq	.+70     	; 0xee4 <USB_Host_ProcessNextHostState+0x21c>
     e9e:	a9 e1       	ldi	r26, 0x19	; 25
     ea0:	b2 e0       	ldi	r27, 0x02	; 2
     ea2:	ea ed       	ldi	r30, 0xDA	; 218
     ea4:	f1 e0       	ldi	r31, 0x01	; 1
     ea6:	88 e0       	ldi	r24, 0x08	; 8
     ea8:	01 90       	ld	r0, Z+
     eaa:	0d 92       	st	X+, r0
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
				SubErrorCode = 0;
				break;
			}

			USB_ControlRequest = (USB_Request_Header_t)
     eac:	81 50       	subi	r24, 0x01	; 1
     eae:	e1 f7       	brne	.-8      	; 0xea8 <USB_Host_ProcessNextHostState+0x1e0>
     eb0:	80 e0       	ldi	r24, 0x00	; 0
     eb2:	90 e0       	ldi	r25, 0x00	; 0
     eb4:	ea d5       	rcall	.+3028   	; 0x1a8a <USB_Host_SendControlRequest>
     eb6:	68 2f       	mov	r22, r24
     eb8:	88 23       	and	r24, r24
     eba:	b9 f4       	brne	.+46     	; 0xeea <USB_Host_ProcessNextHostState+0x222>
     ebc:	10 92 21 02 	sts	0x0221, r1
					.wValue        = USB_HOST_DEVICEADDRESS,
					.wIndex        = 0,
					.wLength       = 0,
				};

			if ((SubErrorCode = USB_Host_SendControlRequest(NULL)) != HOST_SENDCONTROL_Successful)
     ec0:	84 e6       	ldi	r24, 0x64	; 100
     ec2:	90 e0       	ldi	r25, 0x00	; 0
     ec4:	90 93 10 02 	sts	0x0210, r25
     ec8:	80 93 0f 02 	sts	0x020F, r24
			{
				ErrorCode = HOST_ENUMERROR_ControlError;
				break;
			}

			HOST_TASK_NONBLOCK_WAIT(100, HOST_STATE_Default_PostAddressSet);
     ecc:	89 e0       	ldi	r24, 0x09	; 9
     ece:	80 93 11 02 	sts	0x0211, r24
     ed2:	18 c0       	rjmp	.+48     	; 0xf04 <USB_Host_ProcessNextHostState+0x23c>
     ed4:	81 e0       	ldi	r24, 0x01	; 1
     ed6:	80 93 a1 00 	sts	0x00A1, r24
     eda:	8a e0       	ldi	r24, 0x0A	; 10
     edc:	80 93 21 02 	sts	0x0221, r24
     ee0:	03 db       	rcall	.-2554   	; 0x4e8 <EVENT_USB_Host_DeviceEnumerationComplete>
			break;
     ee2:	10 c0       	rjmp	.+32     	; 0xf04 <USB_Host_ProcessNextHostState+0x23c>
			}

			static inline void USB_Host_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SetDeviceAddress(const uint8_t Address)
			{
				UHADDR  =  (Address & 0x7F);
     ee4:	60 e0       	ldi	r22, 0x00	; 0
     ee6:	84 e0       	ldi	r24, 0x04	; 4
     ee8:	01 c0       	rjmp	.+2      	; 0xeec <USB_Host_ProcessNextHostState+0x224>
		case HOST_STATE_Default_PostAddressSet:
			USB_Host_SetDeviceAddress(USB_HOST_DEVICEADDRESS);

			USB_HostState = HOST_STATE_Addressed;
     eea:	83 e0       	ldi	r24, 0x03	; 3
     eec:	90 91 21 02 	lds	r25, 0x0221

			EVENT_USB_Host_DeviceEnumerationComplete();
     ef0:	91 30       	cpi	r25, 0x01	; 1
     ef2:	41 f0       	breq	.+16     	; 0xf04 <USB_Host_ProcessNextHostState+0x23c>
			break;
     ef4:	68 db       	rcall	.-2352   	; 0x5c6 <EVENT_USB_Host_DeviceEnumerationFailed>
			break;
		case HOST_STATE_Default_PostReset:
			if (!(Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL, ENDPOINT_CONTROLEP, USB_Host_ControlPipeSize, 1)))
			{
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
				SubErrorCode = 0;
     ef6:	80 91 dd 00 	lds	r24, 0x00DD
			HOST_TASK_NONBLOCK_WAIT(200, HOST_STATE_Default_PostReset);
			break;
		case HOST_STATE_Default_PostReset:
			if (!(Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL, ENDPOINT_CONTROLEP, USB_Host_ControlPipeSize, 1)))
			{
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
     efa:	81 60       	ori	r24, 0x01	; 1
					.wLength       = 0,
				};

			if ((SubErrorCode = USB_Host_SendControlRequest(NULL)) != HOST_SENDCONTROL_Successful)
			{
				ErrorCode = HOST_ENUMERROR_ControlError;
     efc:	80 93 dd 00 	sts	0x00DD, r24

		default:
			break;
	}

	if ((ErrorCode != HOST_ENUMERROR_NoError) && (USB_HostState != HOST_STATE_Unattached))
     f00:	ed da       	rcall	.-2598   	; 0x4dc <EVENT_USB_Host_DeviceUnattached>
     f02:	66 d1       	rcall	.+716    	; 0x11d0 <USB_ResetInterface>
     f04:	28 96       	adiw	r28, 0x08	; 8
	{
		EVENT_USB_Host_DeviceEnumerationFailed(ErrorCode, SubErrorCode);
     f06:	0f b6       	in	r0, 0x3f	; 63
     f08:	f8 94       	cli
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
     f0a:	de bf       	out	0x3e, r29	; 62
     f0c:	0f be       	out	0x3f, r0	; 63
     f0e:	cd bf       	out	0x3d, r28	; 61
     f10:	df 91       	pop	r29
     f12:	cf 91       	pop	r28

		USB_Host_VBUS_Auto_Off();

		EVENT_USB_Host_DeviceUnattached();
     f14:	1f 91       	pop	r17
     f16:	0f 91       	pop	r16

		USB_ResetInterface();
     f18:	08 95       	ret

00000f1a <Pipe_Read_Stream_LE>:
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
     f1a:	af 92       	push	r10
     f1c:	bf 92       	push	r11
     f1e:	cf 92       	push	r12
     f20:	df 92       	push	r13
     f22:	ff 92       	push	r15
     f24:	0f 93       	push	r16
     f26:	1f 93       	push	r17
     f28:	cf 93       	push	r28
     f2a:	df 93       	push	r29
     f2c:	5c 01       	movw	r10, r24
     f2e:	eb 01       	movw	r28, r22
     f30:	6a 01       	movw	r12, r20
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
     f32:	80 91 aa 00 	lds	r24, 0x00AA
     f36:	8f 7c       	andi	r24, 0xCF	; 207
     f38:	80 61       	ori	r24, 0x10	; 16
     f3a:	80 93 aa 00 	sts	0x00AA, r24
	uint16_t BytesInTransfer = 0;
	uint8_t  ErrorCode;

	Pipe_SetPipeToken(TEMPLATE_TOKEN);

	if ((ErrorCode = Pipe_WaitUntilReady()))
     f3e:	00 d1       	rcall	.+512    	; 0x1140 <Pipe_WaitUntilReady>
     f40:	f8 2e       	mov	r15, r24
     f42:	88 23       	and	r24, r24
     f44:	b1 f5       	brne	.+108    	; 0xfb2 <Pipe_Read_Stream_LE+0x98>
     f46:	c1 14       	cp	r12, r1
	  return ErrorCode;

	if (BytesProcessed != NULL)
     f48:	d1 04       	cpc	r13, r1
     f4a:	41 f0       	breq	.+16     	; 0xf5c <Pipe_Read_Stream_LE+0x42>
     f4c:	f6 01       	movw	r30, r12
	{
		Length -= *BytesProcessed;
     f4e:	00 81       	ld	r16, Z
     f50:	11 81       	ldd	r17, Z+1	; 0x01
     f52:	c0 1b       	sub	r28, r16
     f54:	d1 0b       	sbc	r29, r17
     f56:	0a 0d       	add	r16, r10
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
     f58:	1b 1d       	adc	r17, r11
     f5a:	01 c0       	rjmp	.+2      	; 0xf5e <Pipe_Read_Stream_LE+0x44>
     f5c:	85 01       	movw	r16, r10

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
     f5e:	aa 24       	eor	r10, r10
     f60:	bb 24       	eor	r11, r11
     f62:	23 c0       	rjmp	.+70     	; 0xfaa <Pipe_Read_Stream_LE+0x90>
     f64:	80 91 a6 00 	lds	r24, 0x00A6
			 *          on its direction.
			 */
			static inline bool Pipe_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsReadWriteAllowed(void)
			{
				return ((UPINTX & (1 << RWAL)) ? true : false);
     f68:	85 fd       	sbrc	r24, 5
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
	{
		if (!(Pipe_IsReadWriteAllowed()))
     f6a:	16 c0       	rjmp	.+44     	; 0xf98 <Pipe_Read_Stream_LE+0x7e>
     f6c:	80 91 a6 00 	lds	r24, 0x00A6
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
     f70:	8e 77       	andi	r24, 0x7E	; 126
     f72:	80 93 a6 00 	sts	0x00A6, r24
     f76:	c1 14       	cp	r12, r1
		{
			TEMPLATE_CLEAR_PIPE();

			if (BytesProcessed != NULL)
     f78:	d1 04       	cpc	r13, r1
     f7a:	51 f0       	breq	.+20     	; 0xf90 <Pipe_Read_Stream_LE+0x76>
     f7c:	f6 01       	movw	r30, r12
			{
				*BytesProcessed += BytesInTransfer;
     f7e:	80 81       	ld	r24, Z
     f80:	91 81       	ldd	r25, Z+1	; 0x01
     f82:	8a 0d       	add	r24, r10
     f84:	9b 1d       	adc	r25, r11
     f86:	91 83       	std	Z+1, r25	; 0x01
     f88:	80 83       	st	Z, r24
     f8a:	64 e0       	ldi	r22, 0x04	; 4
				return PIPE_RWSTREAM_IncompleteTransfer;
     f8c:	f6 2e       	mov	r15, r22
     f8e:	11 c0       	rjmp	.+34     	; 0xfb2 <Pipe_Read_Stream_LE+0x98>
     f90:	d7 d0       	rcall	.+430    	; 0x1140 <Pipe_WaitUntilReady>
			}

			if ((ErrorCode = Pipe_WaitUntilReady()))
     f92:	88 23       	and	r24, r24
     f94:	51 f0       	breq	.+20     	; 0xfaa <Pipe_Read_Stream_LE+0x90>
     f96:	0c c0       	rjmp	.+24     	; 0xfb0 <Pipe_Read_Stream_LE+0x96>
     f98:	80 91 af 00 	lds	r24, 0x00AF
			 *  \return Next byte in the currently selected pipe's FIFO buffer.
			 */
			static inline uint8_t Pipe_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_Read_8(void)
			{
				return UPDATX;
     f9c:	f8 01       	movw	r30, r16
     f9e:	81 93       	st	Z+, r24
			  return ErrorCode;
		}
		else
		{
			TEMPLATE_TRANSFER_BYTE(DataStream);
     fa0:	8f 01       	movw	r16, r30
     fa2:	21 97       	sbiw	r28, 0x01	; 1
     fa4:	08 94       	sec
			TEMPLATE_BUFFER_MOVE(DataStream, 1);
			Length--;
     fa6:	a1 1c       	adc	r10, r1
			BytesInTransfer++;
     fa8:	b1 1c       	adc	r11, r1
     faa:	20 97       	sbiw	r28, 0x00	; 0
     fac:	d9 f6       	brne	.-74     	; 0xf64 <Pipe_Read_Stream_LE+0x4a>
	{
		Length -= *BytesProcessed;
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
     fae:	01 c0       	rjmp	.+2      	; 0xfb2 <Pipe_Read_Stream_LE+0x98>
     fb0:	f8 2e       	mov	r15, r24
     fb2:	8f 2d       	mov	r24, r15
			{
				*BytesProcessed += BytesInTransfer;
				return PIPE_RWSTREAM_IncompleteTransfer;
			}

			if ((ErrorCode = Pipe_WaitUntilReady()))
     fb4:	df 91       	pop	r29
			BytesInTransfer++;
		}
	}

	return PIPE_RWSTREAM_NoError;
}
     fb6:	cf 91       	pop	r28
     fb8:	1f 91       	pop	r17
     fba:	0f 91       	pop	r16
     fbc:	ff 90       	pop	r15
     fbe:	df 90       	pop	r13
     fc0:	cf 90       	pop	r12
     fc2:	bf 90       	pop	r11
     fc4:	af 90       	pop	r10
     fc6:	08 95       	ret

00000fc8 <Pipe_ConfigurePipe>:
bool Pipe_ConfigurePipe(const uint8_t Address,
                        const uint8_t Type,
                        const uint8_t EndpointAddress,
                        const uint16_t Size,
                        const uint8_t Banks)
{
     fc8:	0f 93       	push	r16
	uint8_t Number = (Address & PIPE_EPNUM_MASK);
     fca:	58 2f       	mov	r21, r24
     fcc:	5f 70       	andi	r21, 0x0F	; 15
	uint8_t Token  = (Address & PIPE_DIR_IN) ? PIPE_TOKEN_IN : PIPE_TOKEN_OUT;
     fce:	87 ff       	sbrs	r24, 7
     fd0:	02 c0       	rjmp	.+4      	; 0xfd6 <Pipe_ConfigurePipe+0xe>
     fd2:	80 e1       	ldi	r24, 0x10	; 16
     fd4:	01 c0       	rjmp	.+2      	; 0xfd8 <Pipe_ConfigurePipe+0x10>
     fd6:	80 e2       	ldi	r24, 0x20	; 32
	
	if (Number >= PIPE_TOTAL_PIPES)
     fd8:	57 30       	cpi	r21, 0x07	; 7
     fda:	08 f0       	brcs	.+2      	; 0xfde <Pipe_ConfigurePipe+0x16>
     fdc:	57 c0       	rjmp	.+174    	; 0x108c <Pipe_ConfigurePipe+0xc4>
	  return false;

	if (Type == EP_TYPE_CONTROL)
     fde:	66 23       	and	r22, r22
     fe0:	09 f4       	brne	.+2      	; 0xfe4 <Pipe_ConfigurePipe+0x1c>
	  Token = PIPE_TOKEN_SETUP;
     fe2:	80 e0       	ldi	r24, 0x00	; 0

		Pipe_SelectPipe(PNum);

		if (PNum == Number)
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointAddress & PIPE_EPNUM_MASK) << PEPNUM0));
     fe4:	4f 70       	andi	r20, 0x0F	; 15
     fe6:	62 95       	swap	r22
     fe8:	66 0f       	add	r22, r22
     fea:	66 0f       	add	r22, r22
     fec:	60 7c       	andi	r22, 0xC0	; 192
     fee:	64 2b       	or	r22, r20
     ff0:	68 2b       	or	r22, r24
     ff2:	45 2f       	mov	r20, r21
			UPCFG1XTemp = ((1 << ALLOC) | Banks | Pipe_BytesToEPSizeMask(Size));
     ff4:	02 60       	ori	r16, 0x02	; 2
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
     ff6:	40 93 a7 00 	sts	0x00A7, r20
		uint8_t UPCFG2XTemp;
		uint8_t UPIENXTemp;

		Pipe_SelectPipe(PNum);

		if (PNum == Number)
     ffa:	45 17       	cp	r20, r21
     ffc:	a9 f4       	brne	.+42     	; 0x1028 <Pipe_ConfigurePipe+0x60>
     ffe:	04 c0       	rjmp	.+8      	; 0x1008 <Pipe_ConfigurePipe+0x40>
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while ((CheckBytes < Bytes) && (CheckBytes < PIPE_MAX_SIZE))
				{
					MaskVal++;
    1000:	7f 5f       	subi	r23, 0xFF	; 255
					CheckBytes <<= 1;
    1002:	88 0f       	add	r24, r24
    1004:	99 1f       	adc	r25, r25
    1006:	03 c0       	rjmp	.+6      	; 0x100e <Pipe_ConfigurePipe+0x46>
    1008:	88 e0       	ldi	r24, 0x08	; 8
    100a:	90 e0       	ldi	r25, 0x00	; 0
    100c:	70 e0       	ldi	r23, 0x00	; 0
			static inline uint8_t Pipe_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while ((CheckBytes < Bytes) && (CheckBytes < PIPE_MAX_SIZE))
    100e:	82 17       	cp	r24, r18
    1010:	93 07       	cpc	r25, r19
    1012:	10 f4       	brcc	.+4      	; 0x1018 <Pipe_ConfigurePipe+0x50>
    1014:	75 30       	cpi	r23, 0x05	; 5
    1016:	a1 f7       	brne	.-24     	; 0x1000 <Pipe_ConfigurePipe+0x38>
				{
					MaskVal++;
					CheckBytes <<= 1;
				}

				return (MaskVal << EPSIZE0);
    1018:	87 2f       	mov	r24, r23
    101a:	82 95       	swap	r24
    101c:	80 7f       	andi	r24, 0xF0	; 240
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointAddress & PIPE_EPNUM_MASK) << PEPNUM0));
			UPCFG1XTemp = ((1 << ALLOC) | Banks | Pipe_BytesToEPSizeMask(Size));
    101e:	80 2b       	or	r24, r16

		Pipe_SelectPipe(PNum);

		if (PNum == Number)
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointAddress & PIPE_EPNUM_MASK) << PEPNUM0));
    1020:	f6 2f       	mov	r31, r22
			UPCFG1XTemp = ((1 << ALLOC) | Banks | Pipe_BytesToEPSizeMask(Size));
			UPCFG2XTemp = 0;
			UPIENXTemp  = 0;
    1022:	70 e0       	ldi	r23, 0x00	; 0

		if (PNum == Number)
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointAddress & PIPE_EPNUM_MASK) << PEPNUM0));
			UPCFG1XTemp = ((1 << ALLOC) | Banks | Pipe_BytesToEPSizeMask(Size));
			UPCFG2XTemp = 0;
    1024:	e0 e0       	ldi	r30, 0x00	; 0
    1026:	08 c0       	rjmp	.+16     	; 0x1038 <Pipe_ConfigurePipe+0x70>
			UPIENXTemp  = 0;
		}
		else
		{
			UPCFG0XTemp = UPCFG0X;
    1028:	f0 91 aa 00 	lds	r31, 0x00AA
			UPCFG1XTemp = UPCFG1X;
    102c:	80 91 ab 00 	lds	r24, 0x00AB
			UPCFG2XTemp = UPCFG2X;
    1030:	e0 91 ad 00 	lds	r30, 0x00AD
			UPIENXTemp  = UPIENX;
    1034:	70 91 ae 00 	lds	r23, 0x00AE
		}

		if (!(UPCFG1XTemp & (1 << ALLOC)))
    1038:	81 ff       	sbrs	r24, 1
    103a:	20 c0       	rjmp	.+64     	; 0x107c <Pipe_ConfigurePipe+0xb4>
			 *  from an attached device.
			 */
			static inline void Pipe_DisablePipe(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_DisablePipe(void)
			{
				UPCONX &= ~(1 << PEN);
    103c:	90 91 a9 00 	lds	r25, 0x00A9
    1040:	9e 7f       	andi	r25, 0xFE	; 254
    1042:	90 93 a9 00 	sts	0x00A9, r25
		  continue;

		Pipe_DisablePipe();
		UPCFG1X &= ~(1 << ALLOC);
    1046:	90 91 ab 00 	lds	r25, 0x00AB
    104a:	9d 7f       	andi	r25, 0xFD	; 253
    104c:	90 93 ab 00 	sts	0x00AB, r25
			 *  \pre The currently selected pipe must first be configured properly via \ref Pipe_ConfigurePipe().
			 */
			static inline void Pipe_EnablePipe(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_EnablePipe(void)
			{
				UPCONX |= (1 << PEN);
    1050:	90 91 a9 00 	lds	r25, 0x00A9
    1054:	91 60       	ori	r25, 0x01	; 1
    1056:	90 93 a9 00 	sts	0x00A9, r25

		Pipe_EnablePipe();
		UPCFG0X = UPCFG0XTemp;
    105a:	f0 93 aa 00 	sts	0x00AA, r31
		UPCFG1X = UPCFG1XTemp;
    105e:	80 93 ab 00 	sts	0x00AB, r24
		UPCFG2X = UPCFG2XTemp;
    1062:	e0 93 ad 00 	sts	0x00AD, r30
		UPIENX  = UPIENXTemp;
    1066:	70 93 ae 00 	sts	0x00AE, r23

			/** Configures the currently selected pipe to allow for an unlimited number of IN requests. */
			static inline void Pipe_SetInfiniteINRequests(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetInfiniteINRequests(void)
			{
				UPCONX |= (1 << INMODE);
    106a:	80 91 a9 00 	lds	r24, 0x00A9
    106e:	80 62       	ori	r24, 0x20	; 32
    1070:	80 93 a9 00 	sts	0x00A9, r24
			 *  \return Boolean \c true if the selected pipe is configured, \c false otherwise.
			 */
			static inline bool Pipe_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsConfigured(void)
			{
				return ((UPSTAX & (1 << CFGOK)) ? true : false);
    1074:	80 91 ac 00 	lds	r24, 0x00AC

		Pipe_SetInfiniteINRequests();

		if (!(Pipe_IsConfigured()))
    1078:	87 ff       	sbrs	r24, 7
    107a:	08 c0       	rjmp	.+16     	; 0x108c <Pipe_ConfigurePipe+0xc4>

	Pipe_SetInfiniteINRequests();

	return Pipe_IsConfigured();
#else
	for (uint8_t PNum = Number; PNum < PIPE_TOTAL_PIPES; PNum++)
    107c:	4f 5f       	subi	r20, 0xFF	; 255
    107e:	47 30       	cpi	r20, 0x07	; 7
    1080:	09 f0       	breq	.+2      	; 0x1084 <Pipe_ConfigurePipe+0xbc>
    1082:	b9 cf       	rjmp	.-142    	; 0xff6 <Pipe_ConfigurePipe+0x2e>
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
    1084:	50 93 a7 00 	sts	0x00A7, r21
		if (!(Pipe_IsConfigured()))
		  return false;
	}

	Pipe_SelectPipe(Number);
	return true;
    1088:	81 e0       	ldi	r24, 0x01	; 1
    108a:	01 c0       	rjmp	.+2      	; 0x108e <Pipe_ConfigurePipe+0xc6>
		UPIENX  = UPIENXTemp;

		Pipe_SetInfiniteINRequests();

		if (!(Pipe_IsConfigured()))
		  return false;
    108c:	80 e0       	ldi	r24, 0x00	; 0
	}

	Pipe_SelectPipe(Number);
	return true;
#endif
}
    108e:	0f 91       	pop	r16
    1090:	08 95       	ret

00001092 <Pipe_ConfigurePipeTable>:

uint8_t USB_Host_ControlPipeSize = PIPE_CONTROLPIPE_DEFAULT_SIZE;

bool Pipe_ConfigurePipeTable(const USB_Pipe_Table_t* const Table,
                             const uint8_t Entries)
{
    1092:	ff 92       	push	r15
    1094:	0f 93       	push	r16
    1096:	1f 93       	push	r17
    1098:	cf 93       	push	r28
    109a:	df 93       	push	r29
    109c:	16 2f       	mov	r17, r22
		{
			return false;
		}
	}
	
	return true;
    109e:	ec 01       	movw	r28, r24
uint8_t USB_Host_ControlPipeSize = PIPE_CONTROLPIPE_DEFAULT_SIZE;

bool Pipe_ConfigurePipeTable(const USB_Pipe_Table_t* const Table,
                             const uint8_t Entries)
{
	for (uint8_t i = 0; i < Entries; i++)
    10a0:	ff 24       	eor	r15, r15
    10a2:	0d c0       	rjmp	.+26     	; 0x10be <Pipe_ConfigurePipeTable+0x2c>
	{
		if (!(Table[i].Address))
    10a4:	88 81       	ld	r24, Y
    10a6:	88 23       	and	r24, r24
    10a8:	41 f0       	breq	.+16     	; 0x10ba <Pipe_ConfigurePipeTable+0x28>
		  continue;
	
		if (!(Pipe_ConfigurePipe(Table[i].Address, Table[i].Type, Table[i].EndpointAddress, Table[i].Size, Table[i].Banks)))
    10aa:	29 81       	ldd	r18, Y+1	; 0x01
    10ac:	3a 81       	ldd	r19, Y+2	; 0x02
    10ae:	6c 81       	ldd	r22, Y+4	; 0x04
    10b0:	4b 81       	ldd	r20, Y+3	; 0x03
    10b2:	0d 81       	ldd	r16, Y+5	; 0x05
    10b4:	89 df       	rcall	.-238    	; 0xfc8 <Pipe_ConfigurePipe>
    10b6:	88 23       	and	r24, r24
    10b8:	31 f0       	breq	.+12     	; 0x10c6 <Pipe_ConfigurePipeTable+0x34>
    10ba:	f3 94       	inc	r15
uint8_t USB_Host_ControlPipeSize = PIPE_CONTROLPIPE_DEFAULT_SIZE;

bool Pipe_ConfigurePipeTable(const USB_Pipe_Table_t* const Table,
                             const uint8_t Entries)
{
	for (uint8_t i = 0; i < Entries; i++)
    10bc:	26 96       	adiw	r28, 0x06	; 6
    10be:	f1 16       	cp	r15, r17
    10c0:	89 f7       	brne	.-30     	; 0x10a4 <Pipe_ConfigurePipeTable+0x12>
    10c2:	81 e0       	ldi	r24, 0x01	; 1
		{
			return false;
		}
	}
	
	return true;
    10c4:	01 c0       	rjmp	.+2      	; 0x10c8 <Pipe_ConfigurePipeTable+0x36>
    10c6:	80 e0       	ldi	r24, 0x00	; 0
		if (!(Table[i].Address))
		  continue;
	
		if (!(Pipe_ConfigurePipe(Table[i].Address, Table[i].Type, Table[i].EndpointAddress, Table[i].Size, Table[i].Banks)))
		{
			return false;
    10c8:	df 91       	pop	r29
		}
	}
	
	return true;
}
    10ca:	cf 91       	pop	r28
    10cc:	1f 91       	pop	r17
    10ce:	0f 91       	pop	r16
    10d0:	ff 90       	pop	r15
    10d2:	08 95       	ret

000010d4 <Pipe_ClearPipes>:
    10d4:	10 92 f8 00 	sts	0x00F8, r1

void Pipe_ClearPipes(void)
{
	UPINT = 0;

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
    10d8:	80 e0       	ldi	r24, 0x00	; 0
    10da:	80 93 a7 00 	sts	0x00A7, r24
	{
		Pipe_SelectPipe(PNum);
		UPIENX  = 0;
    10de:	10 92 ae 00 	sts	0x00AE, r1
		UPINTX  = 0;
    10e2:	10 92 a6 00 	sts	0x00A6, r1
		UPCFG1X = 0;
    10e6:	10 92 ab 00 	sts	0x00AB, r1
			 *  from an attached device.
			 */
			static inline void Pipe_DisablePipe(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_DisablePipe(void)
			{
				UPCONX &= ~(1 << PEN);
    10ea:	90 91 a9 00 	lds	r25, 0x00A9
    10ee:	9e 7f       	andi	r25, 0xFE	; 254
    10f0:	90 93 a9 00 	sts	0x00A9, r25

void Pipe_ClearPipes(void)
{
	UPINT = 0;

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
    10f4:	8f 5f       	subi	r24, 0xFF	; 255
    10f6:	87 30       	cpi	r24, 0x07	; 7
    10f8:	81 f7       	brne	.-32     	; 0x10da <Pipe_ClearPipes+0x6>
		UPIENX  = 0;
		UPINTX  = 0;
		UPCFG1X = 0;
		Pipe_DisablePipe();
	}
}
    10fa:	08 95       	ret

000010fc <Pipe_IsEndpointBound>:
			 *  \return Index of the currently selected pipe.
			 */
			static inline uint8_t Pipe_GetCurrentPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetCurrentPipe(void)
			{
				return ((UPNUM & PIPE_PIPENUM_MASK) | Pipe_GetPipeDirection());
    10fc:	40 91 a7 00 	lds	r20, 0x00A7
			 *  \return The currently selected pipe's direction, as a \c PIPE_DIR_* mask.
			 */
			static inline uint8_t Pipe_GetPipeDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetPipeDirection(void)
			{
				return (UPCFG0X & (1 << EPDIR)) ? PIPE_DIR_IN : PIPE_DIR_OUT;
    1100:	90 91 aa 00 	lds	r25, 0x00AA

bool Pipe_IsEndpointBound(const uint8_t EndpointAddress)
{
	uint8_t PrevPipeNumber = Pipe_GetCurrentPipe();

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
    1104:	90 e0       	ldi	r25, 0x00	; 0
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
    1106:	90 93 a7 00 	sts	0x00A7, r25
			 *  \return Boolean \c true if the selected pipe is configured, \c false otherwise.
			 */
			static inline bool Pipe_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsConfigured(void)
			{
				return ((UPSTAX & (1 << CFGOK)) ? true : false);
    110a:	20 91 ac 00 	lds	r18, 0x00AC
	{
		Pipe_SelectPipe(PNum);

		if (!(Pipe_IsConfigured()))
    110e:	27 ff       	sbrs	r18, 7
    1110:	0c c0       	rjmp	.+24     	; 0x112a <Pipe_IsEndpointBound+0x2e>
			 *  \return Endpoint address the currently selected pipe is bound to.
			 */
			static inline uint8_t Pipe_GetBoundEndpointAddress(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetBoundEndpointAddress(void)
			{
				uint8_t UPCFG0X_Temp = UPCFG0X;
    1112:	30 91 aa 00 	lds	r19, 0x00AA
				
				return (((UPCFG0X_Temp >> PEPNUM0) & PIPE_EPNUM_MASK) | ((UPCFG0X_Temp & PEPNUM1) ? ENDPOINT_DIR_OUT : ENDPOINT_DIR_IN));
    1116:	53 2f       	mov	r21, r19
    1118:	5f 70       	andi	r21, 0x0F	; 15
    111a:	30 ff       	sbrs	r19, 0
    111c:	02 c0       	rjmp	.+4      	; 0x1122 <Pipe_IsEndpointBound+0x26>
    111e:	20 e0       	ldi	r18, 0x00	; 0
    1120:	01 c0       	rjmp	.+2      	; 0x1124 <Pipe_IsEndpointBound+0x28>
    1122:	20 e8       	ldi	r18, 0x80	; 128
    1124:	25 2b       	or	r18, r21
		  continue;

		if (Pipe_GetBoundEndpointAddress() == EndpointAddress)
    1126:	28 17       	cp	r18, r24
    1128:	49 f0       	breq	.+18     	; 0x113c <Pipe_IsEndpointBound+0x40>

bool Pipe_IsEndpointBound(const uint8_t EndpointAddress)
{
	uint8_t PrevPipeNumber = Pipe_GetCurrentPipe();

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
    112a:	9f 5f       	subi	r25, 0xFF	; 255
    112c:	97 30       	cpi	r25, 0x07	; 7
    112e:	59 f7       	brne	.-42     	; 0x1106 <Pipe_IsEndpointBound+0xa>
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
    1130:	84 2f       	mov	r24, r20
    1132:	8f 70       	andi	r24, 0x0F	; 15
    1134:	80 93 a7 00 	sts	0x00A7, r24
		if (Pipe_GetBoundEndpointAddress() == EndpointAddress)
		  return true;
	}

	Pipe_SelectPipe(PrevPipeNumber);
	return false;
    1138:	80 e0       	ldi	r24, 0x00	; 0
    113a:	08 95       	ret

		if (!(Pipe_IsConfigured()))
		  continue;

		if (Pipe_GetBoundEndpointAddress() == EndpointAddress)
		  return true;
    113c:	81 e0       	ldi	r24, 0x01	; 1
	}

	Pipe_SelectPipe(PrevPipeNumber);
	return false;
}
    113e:	08 95       	ret

00001140 <Pipe_WaitUntilReady>:
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Host_GetFrameNumber(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t USB_Host_GetFrameNumber(void)
			{
				return UHFNUM;
    1140:	80 91 a2 00 	lds	r24, 0x00A2
    1144:	90 91 a3 00 	lds	r25, 0x00A3
    1148:	45 e6       	ldi	r20, 0x65	; 101
    114a:	01 c0       	rjmp	.+2      	; 0x114e <Pipe_WaitUntilReady+0xe>
    114c:	c9 01       	movw	r24, r18
			 *  \return The current pipe token, as a \c PIPE_TOKEN_* mask.
			 */
			static inline uint8_t Pipe_GetPipeToken(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetPipeToken(void)
			{
				return (UPCFG0X & (0x03 << PTOKEN0));
    114e:	20 91 aa 00 	lds	r18, 0x00AA
    1152:	20 73       	andi	r18, 0x30	; 48

	uint16_t PreviousFrameNumber = USB_Host_GetFrameNumber();

	for (;;)
	{
		if (Pipe_GetPipeToken() == PIPE_TOKEN_IN)
    1154:	20 31       	cpi	r18, 0x10	; 16
    1156:	29 f4       	brne	.+10     	; 0x1162 <Pipe_WaitUntilReady+0x22>
			 *  \return Boolean \c true if the current pipe has received an IN packet, \c false otherwise.
			 */
			static inline bool Pipe_IsINReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsINReceived(void)
			{
				return ((UPINTX & (1 << RXINI)) ? true : false);
    1158:	20 91 a6 00 	lds	r18, 0x00A6
		{
			if (Pipe_IsINReceived())
    115c:	20 ff       	sbrs	r18, 0
    115e:	05 c0       	rjmp	.+10     	; 0x116a <Pipe_WaitUntilReady+0x2a>
    1160:	17 c0       	rjmp	.+46     	; 0x1190 <Pipe_WaitUntilReady+0x50>
			 *  \return Boolean \c true if the current pipe is ready for an OUT packet, \c false otherwise.
			 */
			static inline bool Pipe_IsOUTReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsOUTReady(void)
			{
				return ((UPINTX & (1 << TXOUTI)) ? true : false);
    1162:	20 91 a6 00 	lds	r18, 0x00A6
			  return PIPE_READYWAIT_NoError;
		}
		else
		{
			if (Pipe_IsOUTReady())
    1166:	22 fd       	sbrc	r18, 2
    1168:	13 c0       	rjmp	.+38     	; 0x1190 <Pipe_WaitUntilReady+0x50>
			 *  \return Boolean \c true if the current pipe has been stalled by the attached device, \c false otherwise.
			 */
			static inline bool Pipe_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsStalled(void)
			{
				return ((UPINTX & (1 << RXSTALLI)) ? true : false);
    116a:	20 91 a6 00 	lds	r18, 0x00A6
			  return PIPE_READYWAIT_NoError;
		}

		if (Pipe_IsStalled())
    116e:	21 fd       	sbrc	r18, 1
    1170:	11 c0       	rjmp	.+34     	; 0x1194 <Pipe_WaitUntilReady+0x54>
		  return PIPE_READYWAIT_PipeStalled;
		else if (USB_HostState == HOST_STATE_Unattached)
    1172:	20 91 21 02 	lds	r18, 0x0221
    1176:	21 30       	cpi	r18, 0x01	; 1
    1178:	79 f0       	breq	.+30     	; 0x1198 <Pipe_WaitUntilReady+0x58>
    117a:	20 91 a2 00 	lds	r18, 0x00A2
    117e:	30 91 a3 00 	lds	r19, 0x00A3
		  return PIPE_READYWAIT_DeviceDisconnected;

		uint16_t CurrentFrameNumber = USB_Host_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
    1182:	28 17       	cp	r18, r24
    1184:	39 07       	cpc	r19, r25
    1186:	19 f3       	breq	.-58     	; 0x114e <Pipe_WaitUntilReady+0xe>
    1188:	41 50       	subi	r20, 0x01	; 1
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
    118a:	01 f7       	brne	.-64     	; 0x114c <Pipe_WaitUntilReady+0xc>
			  return PIPE_READYWAIT_Timeout;
    118c:	83 e0       	ldi	r24, 0x03	; 3
    118e:	08 95       	ret
			  return PIPE_READYWAIT_NoError;
		}
		else
		{
			if (Pipe_IsOUTReady())
			  return PIPE_READYWAIT_NoError;
    1190:	80 e0       	ldi	r24, 0x00	; 0
    1192:	08 95       	ret
		}

		if (Pipe_IsStalled())
		  return PIPE_READYWAIT_PipeStalled;
    1194:	81 e0       	ldi	r24, 0x01	; 1
    1196:	08 95       	ret
		else if (USB_HostState == HOST_STATE_Unattached)
		  return PIPE_READYWAIT_DeviceDisconnected;
    1198:	82 e0       	ldi	r24, 0x02	; 2

			if (!(TimeoutMSRem--))
			  return PIPE_READYWAIT_Timeout;
		}
	}
}
    119a:	08 95       	ret

0000119c <USB_Disable>:
	USB_ResetInterface();
}

void USB_Disable(void)
{
	USB_INT_DisableAllInterrupts();
    119c:	d1 d0       	rcall	.+418    	; 0x1340 <USB_INT_DisableAllInterrupts>
    119e:	dc d0       	rcall	.+440    	; 0x1358 <USB_INT_ClearAllInterrupts>
	USB_INT_ClearAllInterrupts();
    11a0:	e0 ee       	ldi	r30, 0xE0	; 224
    11a2:	f0 e0       	ldi	r31, 0x00	; 0
			 *  enumerating the device once attached until \ref USB_Attach() is called.
			 */
			static inline void USB_Detach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Detach(void)
			{
				UDCON  |=  (1 << DETACH);
    11a4:	80 81       	ld	r24, Z
    11a6:	81 60       	ori	r24, 0x01	; 1
    11a8:	80 83       	st	Z, r24
    11aa:	e8 ed       	ldi	r30, 0xD8	; 216
    11ac:	f0 e0       	ldi	r31, 0x00	; 0
			}

			static inline void USB_Controller_Disable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Disable(void)
			{
				USBCON &= ~(1 << USBE);
    11ae:	80 81       	ld	r24, Z
    11b0:	8f 77       	andi	r24, 0x7F	; 127
    11b2:	80 83       	st	Z, r24
    11b4:	19 bc       	out	0x29, r1	; 41
    11b6:	a7 ed       	ldi	r26, 0xD7	; 215
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    11b8:	b0 e0       	ldi	r27, 0x00	; 0

			static inline void USB_REG_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_Off(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON &= ~(1 << UVREGE);
    11ba:	8c 91       	ld	r24, X
    11bc:	8e 7f       	andi	r24, 0xFE	; 254
    11be:	8c 93       	st	X, r24
    11c0:	80 81       	ld	r24, Z
    11c2:	8f 7e       	andi	r24, 0xEF	; 239
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON &= ~(1 << OTGPADE);
    11c4:	80 83       	st	Z, r24
    11c6:	10 92 12 02 	sts	0x0212, r1
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USB_OTGPAD_Off();
	#endif

	#if defined(USB_CAN_BE_BOTH)
	USB_CurrentMode = USB_MODE_None;
    11ca:	10 92 17 02 	sts	0x0217, r1
	#endif

	USB_IsInitialized = false;
    11ce:	08 95       	ret

000011d0 <USB_ResetInterface>:
    11d0:	cf 93       	push	r28
}
    11d2:	c0 91 d7 00 	lds	r28, 0x00D7
{
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
    11d6:	b4 d0       	rcall	.+360    	; 0x1340 <USB_INT_DisableAllInterrupts>
    11d8:	bf d0       	rcall	.+382    	; 0x1358 <USB_INT_ClearAllInterrupts>
	USB_INT_ClearAllInterrupts();
    11da:	80 91 d8 00 	lds	r24, 0x00D8
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
    11de:	8f 77       	andi	r24, 0x7F	; 127
    11e0:	80 93 d8 00 	sts	0x00D8, r24
    11e4:	80 91 d8 00 	lds	r24, 0x00D8
				USBCON |=  (1 << USBE);
    11e8:	80 68       	ori	r24, 0x80	; 128
    11ea:	80 93 d8 00 	sts	0x00D8, r24
    11ee:	c6 ff       	sbrs	r28, 6
    11f0:	05 c0       	rjmp	.+10     	; 0x11fc <USB_ResetInterface+0x2c>

	USB_Controller_Reset();

	#if defined(USB_CAN_BE_BOTH)
	if (UIDModeSelectEnabled)
    11f2:	80 91 d8 00 	lds	r24, 0x00D8
						USBCON |= (1 << VBUSTE);
						break;
					#endif
					#if defined(USB_CAN_BE_BOTH)
					case USB_INT_IDTI:
						USBCON |= (1 << IDTE);
    11f6:	82 60       	ori	r24, 0x02	; 2
    11f8:	80 93 d8 00 	sts	0x00D8, r24
    11fc:	80 91 d8 00 	lds	r24, 0x00D8
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
    1200:	8f 7d       	andi	r24, 0xDF	; 223
    1202:	80 93 d8 00 	sts	0x00D8, r24
    1206:	80 91 12 02 	lds	r24, 0x0212
	  USB_INT_Enable(USB_INT_IDTI);
	#endif

	USB_CLK_Unfreeze();

	if (USB_CurrentMode == USB_MODE_Device)
    120a:	81 30       	cpi	r24, 0x01	; 1
    120c:	61 f5       	brne	.+88     	; 0x1266 <USB_ResetInterface+0x96>
    120e:	80 91 d7 00 	lds	r24, 0x00D7
	{
		#if defined(USB_CAN_BE_DEVICE)
		#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
		UHWCON |=  (1 << UIMOD);
    1212:	80 68       	ori	r24, 0x80	; 128
    1214:	80 93 d7 00 	sts	0x00D7, r24
    1218:	19 bc       	out	0x29, r1	; 41
    121a:	10 92 18 02 	sts	0x0218, r1
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState                 = DEVICE_STATE_Unattached;
    121e:	10 92 13 02 	sts	0x0213, r1
	USB_Device_ConfigurationNumber  = 0;
    1222:	10 92 15 02 	sts	0x0215, r1

	#if !defined(NO_DEVICE_REMOTE_WAKEUP)
	USB_Device_RemoteWakeupEnabled  = false;
    1226:	10 92 14 02 	sts	0x0214, r1
	#endif

	#if !defined(NO_DEVICE_SELF_POWER)
	USB_Device_CurrentlySelfPowered = false;
    122a:	80 91 e0 00 	lds	r24, 0x00E0
			}

			static inline void USB_Device_SetFullSpeed(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetFullSpeed(void)
			{
				UDCON &= ~(1 << LSM);
    122e:	8b 7f       	andi	r24, 0xFB	; 251
    1230:	80 93 e0 00 	sts	0x00E0, r24
    1234:	80 91 d8 00 	lds	r24, 0x00D8
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBCON |= (1 << VBUSTE);
    1238:	81 60       	ori	r24, 0x01	; 1
    123a:	80 93 d8 00 	sts	0x00D8, r24
    123e:	80 e0       	ldi	r24, 0x00	; 0
    1240:	60 e0       	ldi	r22, 0x00	; 0
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
    1242:	42 e0       	ldi	r20, 0x02	; 2
    1244:	cd db       	rcall	.-2150   	; 0x9e0 <Endpoint_ConfigureEndpoint_Prv>
    1246:	80 91 e1 00 	lds	r24, 0x00E1
    124a:	8e 7f       	andi	r24, 0xFE	; 254
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
    124c:	80 93 e1 00 	sts	0x00E1, r24
    1250:	80 91 e2 00 	lds	r24, 0x00E2
    1254:	81 60       	ori	r24, 0x01	; 1
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
    1256:	80 93 e2 00 	sts	0x00E2, r24
    125a:	80 91 e2 00 	lds	r24, 0x00E2
    125e:	88 60       	ori	r24, 0x08	; 8
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
    1260:	80 93 e2 00 	sts	0x00E2, r24
    1264:	38 c0       	rjmp	.+112    	; 0x12d6 <USB_ResetInterface+0x106>
    1266:	80 91 12 02 	lds	r24, 0x0212
    126a:	82 30       	cpi	r24, 0x02	; 2
		}

		USB_Init_Device();
		#endif
	}
	else if (USB_CurrentMode == USB_MODE_Host)
    126c:	c9 f5       	brne	.+114    	; 0x12e0 <USB_ResetInterface+0x110>
    126e:	80 91 d7 00 	lds	r24, 0x00D7
    1272:	8f 77       	andi	r24, 0x7F	; 127
	{
		#if defined(USB_CAN_BE_HOST)
		UHWCON &= ~(1 << UIMOD);
    1274:	80 93 d7 00 	sts	0x00D7, r24
    1278:	8c e0       	ldi	r24, 0x0C	; 12
    127a:	89 bd       	out	0x29, r24	; 41
    127c:	8e e0       	ldi	r24, 0x0E	; 14

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
    127e:	89 bd       	out	0x29, r24	; 41
    1280:	09 b4       	in	r0, 0x29	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    1282:	00 fe       	sbrs	r0, 0
    1284:	fd cf       	rjmp	.-6      	; 0x1280 <USB_ResetInterface+0xb0>

		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			#if defined(USB_CAN_BE_HOST)
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
    1286:	81 e0       	ldi	r24, 0x01	; 1
    1288:	80 93 21 02 	sts	0x0221, r24
#endif

#if defined(USB_CAN_BE_HOST)
static void USB_Init_Host(void)
{
	USB_HostState                = HOST_STATE_Unattached;
    128c:	10 92 16 02 	sts	0x0216, r1
    1290:	80 e4       	ldi	r24, 0x40	; 64
	USB_Host_ConfigurationNumber = 0;
    1292:	80 93 e2 01 	sts	0x01E2, r24
	USB_Host_ControlPipeSize     = PIPE_CONTROLPIPE_DEFAULT_SIZE;
    1296:	80 91 d8 00 	lds	r24, 0x00D8
    129a:	80 64       	ori	r24, 0x40	; 64
	#if !defined(__DOXYGEN__)
		/* Macros: */
			static inline void USB_Host_HostMode_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_HostMode_On(void)
			{
				USBCON |=  (1 << HOST);
    129c:	80 93 d8 00 	sts	0x00D8, r24
    12a0:	80 91 dd 00 	lds	r24, 0x00DD
    12a4:	81 60       	ori	r24, 0x01	; 1
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
    12a6:	80 93 dd 00 	sts	0x00DD, r24
    12aa:	80 91 dd 00 	lds	r24, 0x00DD
    12ae:	84 60       	ori	r24, 0x04	; 4
			}

			static inline void USB_Host_VBUS_Manual_Enable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Manual_Enable(void)
			{
				OTGCON |=  (1 << VBUSHWC);
    12b0:	80 93 dd 00 	sts	0x00DD, r24
    12b4:	80 91 d7 00 	lds	r24, 0x00D7
    12b8:	8f 7e       	andi	r24, 0xEF	; 239
				UHWCON &= ~(1 << UVCONE);
    12ba:	80 93 d7 00 	sts	0x00D7, r24
    12be:	6f 9a       	sbi	0x0d, 7	; 13
    12c0:	77 9a       	sbi	0x0e, 7	; 14
    12c2:	80 91 de 00 	lds	r24, 0x00DE
			static inline void USB_Host_VBUS_Manual_On(void)
			{
				#if defined(INVERTED_VBUS_ENABLE_LINE)
				PORTE  &= ~(1 << 7);
				#else
				PORTE  |=  (1 << 7);
    12c6:	81 60       	ori	r24, 0x01	; 1
						break;
					case USB_INT_VBERRI:
						OTGIEN |= (1 << VBERRE);
						break;
					case USB_INT_SRPI:
						OTGIEN |= (1 << SRPE);
    12c8:	80 93 de 00 	sts	0x00DE, r24
    12cc:	80 91 de 00 	lds	r24, 0x00DE
    12d0:	84 60       	ori	r24, 0x04	; 4
						break;
					case USB_INT_RSTI:
						UHIEN  |= (1 << RSTE);
						break;
					case USB_INT_BCERRI:
						OTGIEN |= (1 << BCERRE);
    12d2:	80 93 de 00 	sts	0x00DE, r24
    12d6:	80 91 e0 00 	lds	r24, 0x00E0
    12da:	8e 7f       	andi	r24, 0xFE	; 254
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
    12dc:	80 93 e0 00 	sts	0x00E0, r24
    12e0:	80 91 d8 00 	lds	r24, 0x00D8
    12e4:	80 61       	ori	r24, 0x10	; 16

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON |=  (1 << OTGPADE);
    12e6:	80 93 d8 00 	sts	0x00D8, r24
    12ea:	cf 91       	pop	r28
    12ec:	08 95       	ret

000012ee <USB_Init>:
    12ee:	90 91 d8 00 	lds	r25, 0x00D8
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
    12f2:	9f 7e       	andi	r25, 0xEF	; 239
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON &= ~(1 << OTGPADE);
    12f4:	90 93 d8 00 	sts	0x00D8, r25

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON |=  (1 << UVREGE);
    12f8:	90 91 d7 00 	lds	r25, 0x00D7
    12fc:	91 60       	ori	r25, 0x01	; 1
    12fe:	90 93 d7 00 	sts	0x00D7, r25
		PLLFRQ = (1 << PDIV2);
		#endif
	}

	#if defined(USB_CAN_BE_BOTH)
	if (Mode == USB_MODE_UID)
    1302:	83 30       	cpi	r24, 0x03	; 3
    1304:	91 f4       	brne	.+36     	; 0x132a <USB_Init+0x3c>
	{
		UHWCON |=  (1 << UIDE);
    1306:	80 91 d7 00 	lds	r24, 0x00D7
    130a:	80 64       	ori	r24, 0x40	; 64
    130c:	80 93 d7 00 	sts	0x00D7, r24
						USBCON |= (1 << VBUSTE);
						break;
					#endif
					#if defined(USB_CAN_BE_BOTH)
					case USB_INT_IDTI:
						USBCON |= (1 << IDTE);
    1310:	80 91 d8 00 	lds	r24, 0x00D8
    1314:	82 60       	ori	r24, 0x02	; 2
    1316:	80 93 d8 00 	sts	0x00D8, r24

			#if defined(USB_CAN_BE_BOTH)
			static inline uint8_t USB_GetUSBModeFromUID(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t USB_GetUSBModeFromUID(void)
			{
				if (USBSTA & (1 << ID))
    131a:	80 91 d9 00 	lds	r24, 0x00D9
    131e:	81 ff       	sbrs	r24, 1
    1320:	02 c0       	rjmp	.+4      	; 0x1326 <USB_Init+0x38>
				  return USB_MODE_Device;
    1322:	81 e0       	ldi	r24, 0x01	; 1
    1324:	07 c0       	rjmp	.+14     	; 0x1334 <USB_Init+0x46>
				else
				  return USB_MODE_Host;
    1326:	82 e0       	ldi	r24, 0x02	; 2
    1328:	05 c0       	rjmp	.+10     	; 0x1334 <USB_Init+0x46>
		USB_INT_Enable(USB_INT_IDTI);
		USB_CurrentMode = USB_GetUSBModeFromUID();
	}
	else
	{
		UHWCON &= ~(1 << UIDE);
    132a:	90 91 d7 00 	lds	r25, 0x00D7
    132e:	9f 7b       	andi	r25, 0xBF	; 191
    1330:	90 93 d7 00 	sts	0x00D7, r25
		USB_CurrentMode = Mode;
    1334:	80 93 12 02 	sts	0x0212, r24
	}
	#endif

	USB_IsInitialized = true;
    1338:	81 e0       	ldi	r24, 0x01	; 1
    133a:	80 93 17 02 	sts	0x0217, r24

	USB_ResetInterface();
    133e:	48 cf       	rjmp	.-368    	; 0x11d0 <USB_ResetInterface>

00001340 <USB_INT_DisableAllInterrupts>:
#include "../USBInterrupt.h"

void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
    1340:	e8 ed       	ldi	r30, 0xD8	; 216
    1342:	f0 e0       	ldi	r31, 0x00	; 0
    1344:	80 81       	ld	r24, Z
    1346:	8c 7f       	andi	r24, 0xFC	; 252
    1348:	80 83       	st	Z, r24
	#elif defined(USB_SERIES_4_AVR)
	USBCON &= ~(1 << VBUSTE);
	#endif

	#if defined(USB_CAN_BE_BOTH)
	OTGIEN  = 0;
    134a:	10 92 de 00 	sts	0x00DE, r1
	#endif

	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
    134e:	10 92 a0 00 	sts	0x00A0, r1
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
    1352:	10 92 e2 00 	sts	0x00E2, r1
	#endif
}
    1356:	08 95       	ret

00001358 <USB_INT_ClearAllInterrupts>:

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
    1358:	10 92 da 00 	sts	0x00DA, r1
	#endif

	#if defined(USB_CAN_BE_BOTH)
	OTGINT = 0;
    135c:	10 92 df 00 	sts	0x00DF, r1
	#endif

	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
    1360:	10 92 9f 00 	sts	0x009F, r1
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
    1364:	10 92 e1 00 	sts	0x00E1, r1
	#endif
}
    1368:	08 95       	ret

0000136a <__vector_10>:

ISR(USB_GEN_vect, ISR_BLOCK)
{
    136a:	1f 92       	push	r1
    136c:	0f 92       	push	r0
    136e:	0f b6       	in	r0, 0x3f	; 63
    1370:	0f 92       	push	r0
    1372:	0b b6       	in	r0, 0x3b	; 59
    1374:	0f 92       	push	r0
    1376:	11 24       	eor	r1, r1
    1378:	2f 93       	push	r18
    137a:	3f 93       	push	r19
    137c:	4f 93       	push	r20
    137e:	5f 93       	push	r21
    1380:	6f 93       	push	r22
    1382:	7f 93       	push	r23
    1384:	8f 93       	push	r24
    1386:	9f 93       	push	r25
    1388:	af 93       	push	r26
    138a:	bf 93       	push	r27
    138c:	ef 93       	push	r30
    138e:	ff 93       	push	r31
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
					case USB_INT_SOFI:
						return (UDINT  & (1 << SOFI));
    1390:	80 91 e1 00 	lds	r24, 0x00E1
	#if defined(USB_CAN_BE_DEVICE)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
    1394:	82 ff       	sbrs	r24, 2
    1396:	0a c0       	rjmp	.+20     	; 0x13ac <__vector_10+0x42>
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
					case USB_INT_SOFI:
						return (UDIEN  & (1 << SOFE));
    1398:	80 91 e2 00 	lds	r24, 0x00E2
    139c:	82 ff       	sbrs	r24, 2
    139e:	06 c0       	rjmp	.+12     	; 0x13ac <__vector_10+0x42>
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
						break;
					case USB_INT_SOFI:
						UDINT  &= ~(1 << SOFI);
    13a0:	80 91 e1 00 	lds	r24, 0x00E1
    13a4:	8b 7f       	andi	r24, 0xFB	; 251
    13a6:	80 93 e1 00 	sts	0x00E1, r24
	{
		USB_INT_Clear(USB_INT_SOFI);

		EVENT_USB_Device_StartOfFrame();
    13aa:	4b d8       	rcall	.-3946   	; 0x442 <EVENT_USB_Device_StartOfFrame>
    13ac:	80 91 da 00 	lds	r24, 0x00DA
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBINT & (1 << VBUSTI));
    13b0:	80 ff       	sbrs	r24, 0
	}
	#endif

	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	if (USB_INT_HasOccurred(USB_INT_VBUSTI) && USB_INT_IsEnabled(USB_INT_VBUSTI))
    13b2:	1d c0       	rjmp	.+58     	; 0x13ee <__vector_10+0x84>
    13b4:	80 91 d8 00 	lds	r24, 0x00D8
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBCON & (1 << VBUSTE));
    13b8:	80 ff       	sbrs	r24, 0
    13ba:	19 c0       	rjmp	.+50     	; 0x13ee <__vector_10+0x84>
    13bc:	80 91 da 00 	lds	r24, 0x00DA
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBINT &= ~(1 << VBUSTI);
    13c0:	8e 7f       	andi	r24, 0xFE	; 254
    13c2:	80 93 da 00 	sts	0x00DA, r24
    13c6:	80 91 d9 00 	lds	r24, 0x00D9
				 *  \return Boolean \c true if the VBUS line is currently detecting power from a host, \c false otherwise.
				 */
				static inline bool USB_VBUS_GetStatus(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
				static inline bool USB_VBUS_GetStatus(void)
				{
					return ((USBSTA & (1 << VBUS)) ? true : false);
    13ca:	80 ff       	sbrs	r24, 0
	{
		USB_INT_Clear(USB_INT_VBUSTI);

		if (USB_VBUS_GetStatus())
    13cc:	0c c0       	rjmp	.+24     	; 0x13e6 <__vector_10+0x7c>
    13ce:	8c e0       	ldi	r24, 0x0C	; 12

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
    13d0:	89 bd       	out	0x29, r24	; 41
    13d2:	8e e0       	ldi	r24, 0x0E	; 14
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    13d4:	89 bd       	out	0x29, r24	; 41
    13d6:	09 b4       	in	r0, 0x29	; 41
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			{
				USB_PLL_On();
				while (!(USB_PLL_IsReady()));
    13d8:	00 fe       	sbrs	r0, 0
    13da:	fd cf       	rjmp	.-6      	; 0x13d6 <__vector_10+0x6c>
    13dc:	81 e0       	ldi	r24, 0x01	; 1
			}

			USB_DeviceState = DEVICE_STATE_Powered;
    13de:	80 93 18 02 	sts	0x0218, r24
    13e2:	17 d8       	rcall	.-4050   	; 0x412 <EVENT_USB_Device_Connect>
			EVENT_USB_Device_Connect();
    13e4:	04 c0       	rjmp	.+8      	; 0x13ee <__vector_10+0x84>
    13e6:	19 bc       	out	0x29, r1	; 41
    13e8:	10 92 18 02 	sts	0x0218, r1
		else
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			  USB_PLL_Off();

			USB_DeviceState = DEVICE_STATE_Unattached;
    13ec:	14 d8       	rcall	.-4056   	; 0x416 <EVENT_USB_Device_Disconnect>
    13ee:	80 91 e1 00 	lds	r24, 0x00E1
			EVENT_USB_Device_Disconnect();
    13f2:	80 ff       	sbrs	r24, 0
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
    13f4:	18 c0       	rjmp	.+48     	; 0x1426 <__vector_10+0xbc>
    13f6:	80 91 e2 00 	lds	r24, 0x00E2
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
    13fa:	80 ff       	sbrs	r24, 0
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
    13fc:	14 c0       	rjmp	.+40     	; 0x1426 <__vector_10+0xbc>
    13fe:	80 91 e2 00 	lds	r24, 0x00E2
    1402:	8e 7f       	andi	r24, 0xFE	; 254
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
    1404:	80 93 e2 00 	sts	0x00E2, r24
    1408:	80 91 e2 00 	lds	r24, 0x00E2
    140c:	80 61       	ori	r24, 0x10	; 16
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
    140e:	80 93 e2 00 	sts	0x00E2, r24
    1412:	80 91 d8 00 	lds	r24, 0x00D8
    1416:	80 62       	ori	r24, 0x20	; 32
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON |=  (1 << FRZCLK);
    1418:	80 93 d8 00 	sts	0x00D8, r24
    141c:	19 bc       	out	0x29, r1	; 41
    141e:	85 e0       	ldi	r24, 0x05	; 5
    1420:	80 93 18 02 	sts	0x0218, r24

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
		EVENT_USB_Device_Disconnect();
		#else
		USB_DeviceState = DEVICE_STATE_Suspended;
    1424:	09 d3       	rcall	.+1554   	; 0x1a38 <USB_Event_Stub>
    1426:	80 91 e1 00 	lds	r24, 0x00E1
		EVENT_USB_Device_Suspend();
    142a:	84 ff       	sbrs	r24, 4
    142c:	2d c0       	rjmp	.+90     	; 0x1488 <__vector_10+0x11e>
					case USB_INT_IDTI:
						return (USBINT & (1 << IDTI));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
    142e:	80 91 e2 00 	lds	r24, 0x00E2
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
    1432:	84 ff       	sbrs	r24, 4
    1434:	29 c0       	rjmp	.+82     	; 0x1488 <__vector_10+0x11e>
					case USB_INT_IDTI:
						return (USBCON & (1 << IDTE));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
    1436:	8c e0       	ldi	r24, 0x0C	; 12
    1438:	89 bd       	out	0x29, r24	; 41
    143a:	8e e0       	ldi	r24, 0x0E	; 14
    143c:	89 bd       	out	0x29, r24	; 41

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
    143e:	09 b4       	in	r0, 0x29	; 41
    1440:	00 fe       	sbrs	r0, 0
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    1442:	fd cf       	rjmp	.-6      	; 0x143e <__vector_10+0xd4>
    1444:	80 91 d8 00 	lds	r24, 0x00D8
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
    1448:	8f 7d       	andi	r24, 0xDF	; 223
    144a:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
    144e:	80 91 e1 00 	lds	r24, 0x00E1
    1452:	8f 7e       	andi	r24, 0xEF	; 239
    1454:	80 93 e1 00 	sts	0x00E1, r24
						USBINT &= ~(1 << IDTI);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
    1458:	80 91 e2 00 	lds	r24, 0x00E2
    145c:	8f 7e       	andi	r24, 0xEF	; 239
    145e:	80 93 e2 00 	sts	0x00E2, r24
						USBCON &= ~(1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
    1462:	80 91 e2 00 	lds	r24, 0x00E2
    1466:	81 60       	ori	r24, 0x01	; 1
    1468:	80 93 e2 00 	sts	0x00E2, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
    146c:	80 91 13 02 	lds	r24, 0x0213
    1470:	88 23       	and	r24, r24
    1472:	21 f4       	brne	.+8      	; 0x147c <__vector_10+0x112>
		USB_INT_Clear(USB_INT_WAKEUPI);

		USB_INT_Disable(USB_INT_WAKEUPI);
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_Device_ConfigurationNumber)
    1474:	80 91 e3 00 	lds	r24, 0x00E3
    1478:	87 ff       	sbrs	r24, 7
    147a:	02 c0       	rjmp	.+4      	; 0x1480 <__vector_10+0x116>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
    147c:	84 e0       	ldi	r24, 0x04	; 4
    147e:	01 c0       	rjmp	.+2      	; 0x1482 <__vector_10+0x118>
		  USB_DeviceState = DEVICE_STATE_Configured;
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
    1480:	81 e0       	ldi	r24, 0x01	; 1
    1482:	80 93 18 02 	sts	0x0218, r24
    1486:	d8 d2       	rcall	.+1456   	; 0x1a38 <USB_Event_Stub>
    1488:	80 91 e1 00 	lds	r24, 0x00E1
    148c:	83 ff       	sbrs	r24, 3

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
		#else
		EVENT_USB_Device_WakeUp();
    148e:	22 c0       	rjmp	.+68     	; 0x14d4 <__vector_10+0x16a>
    1490:	80 91 e2 00 	lds	r24, 0x00E2
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
    1494:	83 ff       	sbrs	r24, 3
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
    1496:	1e c0       	rjmp	.+60     	; 0x14d4 <__vector_10+0x16a>
    1498:	80 91 e1 00 	lds	r24, 0x00E1
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
    149c:	87 7f       	andi	r24, 0xF7	; 247
    149e:	80 93 e1 00 	sts	0x00E1, r24
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
    14a2:	82 e0       	ldi	r24, 0x02	; 2
    14a4:	80 93 18 02 	sts	0x0218, r24
    14a8:	10 92 13 02 	sts	0x0213, r1
	{
		USB_INT_Clear(USB_INT_EORSTI);

		USB_DeviceState                = DEVICE_STATE_Default;
    14ac:	80 91 e1 00 	lds	r24, 0x00E1
    14b0:	8e 7f       	andi	r24, 0xFE	; 254
		USB_Device_ConfigurationNumber = 0;
    14b2:	80 93 e1 00 	sts	0x00E1, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
    14b6:	80 91 e2 00 	lds	r24, 0x00E2
    14ba:	8e 7f       	andi	r24, 0xFE	; 254
    14bc:	80 93 e2 00 	sts	0x00E2, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
    14c0:	80 91 e2 00 	lds	r24, 0x00E2
    14c4:	80 61       	ori	r24, 0x10	; 16
    14c6:	80 93 e2 00 	sts	0x00E2, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
    14ca:	80 e0       	ldi	r24, 0x00	; 0
    14cc:	60 e0       	ldi	r22, 0x00	; 0
    14ce:	42 e0       	ldi	r20, 0x02	; 2
    14d0:	87 da       	rcall	.-2802   	; 0x9e0 <Endpoint_ConfigureEndpoint_Prv>
    14d2:	b2 d2       	rcall	.+1380   	; 0x1a38 <USB_Event_Stub>
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
    14d4:	80 91 9f 00 	lds	r24, 0x009F
    14d8:	85 ff       	sbrs	r24, 5
    14da:	0a c0       	rjmp	.+20     	; 0x14f0 <__vector_10+0x186>
    14dc:	80 91 a0 00 	lds	r24, 0x00A0

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
    14e0:	85 ff       	sbrs	r24, 5
					case USB_INT_RXSTPI:
						return (UEINTX & (1 << RXSTPI));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
    14e2:	06 c0       	rjmp	.+12     	; 0x14f0 <__vector_10+0x186>
    14e4:	80 91 9f 00 	lds	r24, 0x009F
	}
	#endif

	#if defined(USB_CAN_BE_HOST)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_HSOFI) && USB_INT_IsEnabled(USB_INT_HSOFI))
    14e8:	8f 7d       	andi	r24, 0xDF	; 223
					case USB_INT_RXSTPI:
						return (UEIENX & (1 << RXSTPE));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
    14ea:	80 93 9f 00 	sts	0x009F, r24
    14ee:	a4 d2       	rcall	.+1352   	; 0x1a38 <USB_Event_Stub>
    14f0:	80 91 9f 00 	lds	r24, 0x009F
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
    14f4:	81 ff       	sbrs	r24, 1
    14f6:	16 c0       	rjmp	.+44     	; 0x1524 <__vector_10+0x1ba>
    14f8:	80 91 a0 00 	lds	r24, 0x00A0
	{
		USB_INT_Clear(USB_INT_HSOFI);

		EVENT_USB_Host_StartOfFrame();
    14fc:	81 ff       	sbrs	r24, 1
    14fe:	12 c0       	rjmp	.+36     	; 0x1524 <__vector_10+0x1ba>
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
					case USB_INT_DCONNI:
						return (UHINT  & (1 << DCONNI));
					case USB_INT_DDISCI:
						return (UHINT  & (1 << DDISCI));
    1500:	80 91 9f 00 	lds	r24, 0x009F
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_DDISCI) && USB_INT_IsEnabled(USB_INT_DDISCI))
    1504:	8d 7f       	andi	r24, 0xFD	; 253
    1506:	80 93 9f 00 	sts	0x009F, r24
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
					case USB_INT_DCONNI:
						return (UHIEN  & (1 << DCONNE));
					case USB_INT_DDISCI:
						return (UHIEN  & (1 << DDISCE));
    150a:	80 91 9f 00 	lds	r24, 0x009F
    150e:	8e 7f       	andi	r24, 0xFE	; 254
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
						break;
					case USB_INT_DDISCI:
						UHINT  &= ~(1 << DDISCI);
    1510:	80 93 9f 00 	sts	0x009F, r24
    1514:	80 91 a0 00 	lds	r24, 0x00A0
    1518:	8d 7f       	andi	r24, 0xFD	; 253
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
    151a:	80 93 a0 00 	sts	0x00A0, r24
    151e:	0e 94 6e 02 	call	0x4dc	; 0x4dc <EVENT_USB_Host_DeviceUnattached>
    1522:	56 de       	rcall	.-852    	; 0x11d0 <USB_ResetInterface>
						break;
					case USB_INT_DCONNI:
						UHIEN  &= ~(1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  &= ~(1 << DDISCE);
    1524:	80 91 df 00 	lds	r24, 0x00DF
    1528:	81 ff       	sbrs	r24, 1
    152a:	16 c0       	rjmp	.+44     	; 0x1558 <__vector_10+0x1ee>
    152c:	80 91 de 00 	lds	r24, 0x00DE
	{
		USB_INT_Clear(USB_INT_DDISCI);
		USB_INT_Clear(USB_INT_DCONNI);
		USB_INT_Disable(USB_INT_DDISCI);

		EVENT_USB_Host_DeviceUnattached();
    1530:	81 ff       	sbrs	r24, 1

		USB_ResetInterface();
    1532:	12 c0       	rjmp	.+36     	; 0x1558 <__vector_10+0x1ee>
    1534:	80 91 df 00 	lds	r24, 0x00DF
					case USB_INT_RSTI:
						return (UHINT  & (1 << RSTI));
					case USB_INT_BCERRI:
						return (OTGINT & (1 << BCERRI));
					case USB_INT_VBERRI:
						return (OTGINT & (1 << VBERRI));
    1538:	8d 7f       	andi	r24, 0xFD	; 253
	}

	if (USB_INT_HasOccurred(USB_INT_VBERRI) && USB_INT_IsEnabled(USB_INT_VBERRI))
    153a:	80 93 df 00 	sts	0x00DF, r24
					case USB_INT_RSTI:
						return (UHIEN  & (1 << RSTE));
					case USB_INT_BCERRI:
						return (OTGIEN & (1 << BCERRE));
					case USB_INT_VBERRI:
						return (OTGIEN & (1 << VBERRE));
    153e:	77 98       	cbi	0x0e, 7	; 14
    1540:	80 91 dd 00 	lds	r24, 0x00DD
    1544:	81 60       	ori	r24, 0x01	; 1
						break;
					case USB_INT_BCERRI:
						OTGINT &= ~(1 << BCERRI);
						break;
					case USB_INT_VBERRI:
						OTGINT &= ~(1 << VBERRI);
    1546:	80 93 dd 00 	sts	0x00DD, r24
    154a:	80 e0       	ldi	r24, 0x00	; 0
    154c:	1c d8       	rcall	.-4040   	; 0x586 <EVENT_USB_Host_HostError>
    154e:	0e 94 6e 02 	call	0x4dc	; 0x4dc <EVENT_USB_Host_DeviceUnattached>
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
    1552:	81 e0       	ldi	r24, 0x01	; 1
    1554:	80 93 21 02 	sts	0x0221, r24
    1558:	80 91 df 00 	lds	r24, 0x00DF
		USB_INT_Clear(USB_INT_VBERRI);

		USB_Host_VBUS_Manual_Off();
		USB_Host_VBUS_Auto_Off();

		EVENT_USB_Host_HostError(HOST_ERROR_VBusVoltageDip);
    155c:	80 ff       	sbrs	r24, 0
    155e:	18 c0       	rjmp	.+48     	; 0x1590 <__vector_10+0x226>
    1560:	80 91 de 00 	lds	r24, 0x00DE
		EVENT_USB_Host_DeviceUnattached();
    1564:	80 ff       	sbrs	r24, 0

		USB_HostState = HOST_STATE_Unattached;
    1566:	14 c0       	rjmp	.+40     	; 0x1590 <__vector_10+0x226>
    1568:	80 91 df 00 	lds	r24, 0x00DF
					case USB_INT_BCERRI:
						return (OTGINT & (1 << BCERRI));
					case USB_INT_VBERRI:
						return (OTGINT & (1 << VBERRI));
					case USB_INT_SRPI:
						return (OTGINT & (1 << SRPI));
    156c:	8e 7f       	andi	r24, 0xFE	; 254
    156e:	80 93 df 00 	sts	0x00DF, r24
	}

	if (USB_INT_HasOccurred(USB_INT_SRPI) && USB_INT_IsEnabled(USB_INT_SRPI))
    1572:	80 91 de 00 	lds	r24, 0x00DE
					case USB_INT_BCERRI:
						return (OTGIEN & (1 << BCERRE));
					case USB_INT_VBERRI:
						return (OTGIEN & (1 << VBERRE));
					case USB_INT_SRPI:
						return (OTGIEN & (1 << SRPE));
    1576:	8e 7f       	andi	r24, 0xFE	; 254
    1578:	80 93 de 00 	sts	0x00DE, r24
						break;
					case USB_INT_VBERRI:
						OTGINT &= ~(1 << VBERRI);
						break;
					case USB_INT_SRPI:
						OTGINT &= ~(1 << SRPI);
    157c:	0e 94 68 02 	call	0x4d0	; 0x4d0 <EVENT_USB_Host_DeviceAttached>
    1580:	80 91 a0 00 	lds	r24, 0x00A0
    1584:	82 60       	ori	r24, 0x02	; 2
						break;
					case USB_INT_VBERRI:
						OTGIEN &= ~(1 << VBERRE);
						break;
					case USB_INT_SRPI:
						OTGIEN &= ~(1 << SRPE);
    1586:	80 93 a0 00 	sts	0x00A0, r24
    158a:	82 e0       	ldi	r24, 0x02	; 2
    158c:	80 93 21 02 	sts	0x0221, r24
	{
		USB_INT_Clear(USB_INT_SRPI);
		USB_INT_Disable(USB_INT_SRPI);

		EVENT_USB_Host_DeviceAttached();
    1590:	80 91 df 00 	lds	r24, 0x00DF
						break;
					case USB_INT_DCONNI:
						UHIEN  |= (1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  |= (1 << DDISCE);
    1594:	82 ff       	sbrs	r24, 2
    1596:	0f c0       	rjmp	.+30     	; 0x15b6 <__vector_10+0x24c>
    1598:	80 91 de 00 	lds	r24, 0x00DE
    159c:	82 ff       	sbrs	r24, 2

		USB_INT_Enable(USB_INT_DDISCI);

		USB_HostState = HOST_STATE_Powered;
    159e:	0b c0       	rjmp	.+22     	; 0x15b6 <__vector_10+0x24c>
    15a0:	80 91 df 00 	lds	r24, 0x00DF
					case USB_INT_DDISCI:
						return (UHINT  & (1 << DDISCI));
					case USB_INT_RSTI:
						return (UHINT  & (1 << RSTI));
					case USB_INT_BCERRI:
						return (OTGINT & (1 << BCERRI));
    15a4:	8b 7f       	andi	r24, 0xFB	; 251
    15a6:	80 93 df 00 	sts	0x00DF, r24
	}

	if (USB_INT_HasOccurred(USB_INT_BCERRI) && USB_INT_IsEnabled(USB_INT_BCERRI))
    15aa:	82 e0       	ldi	r24, 0x02	; 2
					case USB_INT_DDISCI:
						return (UHIEN  & (1 << DDISCE));
					case USB_INT_RSTI:
						return (UHIEN  & (1 << RSTE));
					case USB_INT_BCERRI:
						return (OTGIEN & (1 << BCERRE));
    15ac:	60 e0       	ldi	r22, 0x00	; 0
    15ae:	0b d8       	rcall	.-4074   	; 0x5c6 <EVENT_USB_Host_DeviceEnumerationFailed>
    15b0:	0e 94 6e 02 	call	0x4dc	; 0x4dc <EVENT_USB_Host_DeviceUnattached>
						break;
					case USB_INT_RSTI:
						UHINT  &= ~(1 << RSTI);
						break;
					case USB_INT_BCERRI:
						OTGINT &= ~(1 << BCERRI);
    15b4:	0d de       	rcall	.-998    	; 0x11d0 <USB_ResetInterface>
    15b6:	80 91 da 00 	lds	r24, 0x00DA
    15ba:	81 ff       	sbrs	r24, 1
    15bc:	21 c0       	rjmp	.+66     	; 0x1600 <__vector_10+0x296>
	{
		USB_INT_Clear(USB_INT_BCERRI);

		EVENT_USB_Host_DeviceEnumerationFailed(HOST_ENUMERROR_NoDeviceDetected, 0);
    15be:	80 91 d8 00 	lds	r24, 0x00D8
    15c2:	81 ff       	sbrs	r24, 1
    15c4:	1d c0       	rjmp	.+58     	; 0x1600 <__vector_10+0x296>
		EVENT_USB_Host_DeviceUnattached();
    15c6:	80 91 da 00 	lds	r24, 0x00DA

		USB_ResetInterface();
    15ca:	8d 7f       	andi	r24, 0xFD	; 253
    15cc:	80 93 da 00 	sts	0x00DA, r24
					case USB_INT_VBUSTI:
						return (USBINT & (1 << VBUSTI));
					#endif
					#if defined(USB_CAN_BE_BOTH)
					case USB_INT_IDTI:
						return (USBINT & (1 << IDTI));
    15d0:	80 91 18 02 	lds	r24, 0x0218
	}
	#endif

	#if defined(USB_CAN_BE_BOTH)
	if (USB_INT_HasOccurred(USB_INT_IDTI) && USB_INT_IsEnabled(USB_INT_IDTI))
    15d4:	88 23       	and	r24, r24
					case USB_INT_VBUSTI:
						return (USBCON & (1 << VBUSTE));
					#endif
					#if defined(USB_CAN_BE_BOTH)
					case USB_INT_IDTI:
						return (USBCON & (1 << IDTE));
    15d6:	11 f0       	breq	.+4      	; 0x15dc <__vector_10+0x272>
    15d8:	0e 94 0b 02 	call	0x416	; 0x416 <EVENT_USB_Device_Disconnect>
    15dc:	80 91 21 02 	lds	r24, 0x0221
						USBINT &= ~(1 << VBUSTI);
						break;
					#endif
					#if defined(USB_CAN_BE_BOTH)
					case USB_INT_IDTI:
						USBINT &= ~(1 << IDTI);
    15e0:	81 30       	cpi	r24, 0x01	; 1
    15e2:	11 f0       	breq	.+4      	; 0x15e8 <__vector_10+0x27e>
    15e4:	0e 94 6e 02 	call	0x4dc	; 0x4dc <EVENT_USB_Host_DeviceUnattached>
	{
		USB_INT_Clear(USB_INT_IDTI);

		if (USB_DeviceState != DEVICE_STATE_Unattached)
    15e8:	80 91 d9 00 	lds	r24, 0x00D9
    15ec:	81 ff       	sbrs	r24, 1
    15ee:	02 c0       	rjmp	.+4      	; 0x15f4 <__vector_10+0x28a>
		  EVENT_USB_Device_Disconnect();
    15f0:	81 e0       	ldi	r24, 0x01	; 1
    15f2:	01 c0       	rjmp	.+2      	; 0x15f6 <__vector_10+0x28c>

		if (USB_HostState != HOST_STATE_Unattached)
    15f4:	82 e0       	ldi	r24, 0x02	; 2
    15f6:	80 93 12 02 	sts	0x0212, r24
    15fa:	ea dd       	rcall	.-1068   	; 0x11d0 <USB_ResetInterface>
		  EVENT_USB_Host_DeviceUnattached();
    15fc:	0e 94 a9 01 	call	0x352	; 0x352 <EVENT_USB_UIDChange>

			#if defined(USB_CAN_BE_BOTH)
			static inline uint8_t USB_GetUSBModeFromUID(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t USB_GetUSBModeFromUID(void)
			{
				if (USBSTA & (1 << ID))
    1600:	ff 91       	pop	r31
    1602:	ef 91       	pop	r30
    1604:	bf 91       	pop	r27
    1606:	af 91       	pop	r26
				  return USB_MODE_Device;
    1608:	9f 91       	pop	r25
    160a:	8f 91       	pop	r24
				else
				  return USB_MODE_Host;
    160c:	7f 91       	pop	r23

		USB_CurrentMode = USB_GetUSBModeFromUID();
    160e:	6f 91       	pop	r22
    1610:	5f 91       	pop	r21
		USB_ResetInterface();
    1612:	4f 91       	pop	r20
    1614:	3f 91       	pop	r19

		EVENT_USB_UIDChange();
    1616:	2f 91       	pop	r18
    1618:	0f 90       	pop	r0
	}
	#endif
}
    161a:	0b be       	out	0x3b, r0	; 59
    161c:	0f 90       	pop	r0
    161e:	0f be       	out	0x3f, r0	; 63
    1620:	0f 90       	pop	r0
    1622:	1f 90       	pop	r1
    1624:	18 95       	reti

00001626 <USB_Host_GetDeviceConfigDescriptor>:
#if defined(USB_CAN_BE_HOST)
uint8_t USB_Host_GetDeviceConfigDescriptor(const uint8_t ConfigNumber,
                                           uint16_t* const ConfigSizePtr,
                                           void* const BufferPtr,
                                           const uint16_t BufferSize)
{
    1626:	cf 92       	push	r12
    1628:	df 92       	push	r13
    162a:	ef 92       	push	r14
    162c:	ff 92       	push	r15
    162e:	0f 93       	push	r16
    1630:	1f 93       	push	r17
    1632:	cf 93       	push	r28
    1634:	df 93       	push	r29
    1636:	cd b7       	in	r28, 0x3d	; 61
    1638:	de b7       	in	r29, 0x3e	; 62
    163a:	29 97       	sbiw	r28, 0x09	; 9
    163c:	0f b6       	in	r0, 0x3f	; 63
    163e:	f8 94       	cli
    1640:	de bf       	out	0x3e, r29	; 62
    1642:	0f be       	out	0x3f, r0	; 63
    1644:	cd bf       	out	0x3d, r28	; 61
    1646:	6b 01       	movw	r12, r22
    1648:	8a 01       	movw	r16, r20
    164a:	79 01       	movw	r14, r18
	uint8_t ErrorCode;
	uint8_t ConfigHeader[sizeof(USB_Descriptor_Configuration_Header_t)];

	USB_ControlRequest = (USB_Request_Header_t)
    164c:	90 e8       	ldi	r25, 0x80	; 128
    164e:	90 93 19 02 	sts	0x0219, r25
    1652:	96 e0       	ldi	r25, 0x06	; 6
    1654:	90 93 1a 02 	sts	0x021A, r25
		{
			.bmRequestType = (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE),
			.bRequest      = REQ_GetDescriptor,
			.wValue        = ((DTYPE_Configuration << 8) | (ConfigNumber - 1)),
    1658:	90 e0       	ldi	r25, 0x00	; 0
    165a:	01 97       	sbiw	r24, 0x01	; 1
    165c:	92 60       	ori	r25, 0x02	; 2
                                           const uint16_t BufferSize)
{
	uint8_t ErrorCode;
	uint8_t ConfigHeader[sizeof(USB_Descriptor_Configuration_Header_t)];

	USB_ControlRequest = (USB_Request_Header_t)
    165e:	90 93 1c 02 	sts	0x021C, r25
    1662:	80 93 1b 02 	sts	0x021B, r24
    1666:	10 92 1e 02 	sts	0x021E, r1
    166a:	10 92 1d 02 	sts	0x021D, r1
    166e:	89 e0       	ldi	r24, 0x09	; 9
    1670:	90 e0       	ldi	r25, 0x00	; 0
    1672:	90 93 20 02 	sts	0x0220, r25
    1676:	80 93 1f 02 	sts	0x021F, r24
    167a:	10 92 a7 00 	sts	0x00A7, r1
			.wLength       = sizeof(USB_Descriptor_Configuration_Header_t),
		};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	if ((ErrorCode = USB_Host_SendControlRequest(ConfigHeader)) != HOST_SENDCONTROL_Successful)
    167e:	ce 01       	movw	r24, r28
    1680:	01 96       	adiw	r24, 0x01	; 1
    1682:	03 d2       	rcall	.+1030   	; 0x1a8a <USB_Host_SendControlRequest>
    1684:	88 23       	and	r24, r24
    1686:	b9 f4       	brne	.+46     	; 0x16b6 <USB_Host_GetDeviceConfigDescriptor+0x90>
    1688:	8b 81       	ldd	r24, Y+3	; 0x03
	  return ErrorCode;

	*ConfigSizePtr = le16_to_cpu(DESCRIPTOR_PCAST(ConfigHeader, USB_Descriptor_Configuration_Header_t)->TotalConfigurationSize);
    168a:	9c 81       	ldd	r25, Y+4	; 0x04
    168c:	f6 01       	movw	r30, r12
    168e:	91 83       	std	Z+1, r25	; 0x01
    1690:	80 83       	st	Z, r24
    1692:	e8 16       	cp	r14, r24

	if (*ConfigSizePtr > BufferSize)
    1694:	f9 06       	cpc	r15, r25
    1696:	70 f0       	brcs	.+28     	; 0x16b4 <USB_Host_GetDeviceConfigDescriptor+0x8e>
    1698:	90 93 20 02 	sts	0x0220, r25
	  return HOST_GETCONFIG_BuffOverflow;

	USB_ControlRequest.wLength = *ConfigSizePtr;
    169c:	80 93 1f 02 	sts	0x021F, r24
    16a0:	c8 01       	movw	r24, r16

	if ((ErrorCode = USB_Host_SendControlRequest(BufferPtr)) != HOST_SENDCONTROL_Successful)
    16a2:	f3 d1       	rcall	.+998    	; 0x1a8a <USB_Host_SendControlRequest>
    16a4:	88 23       	and	r24, r24
    16a6:	39 f4       	brne	.+14     	; 0x16b6 <USB_Host_GetDeviceConfigDescriptor+0x90>
    16a8:	f8 01       	movw	r30, r16
    16aa:	91 81       	ldd	r25, Z+1	; 0x01
	  return ErrorCode;

	if (DESCRIPTOR_TYPE(BufferPtr) != DTYPE_Configuration)
    16ac:	92 30       	cpi	r25, 0x02	; 2
    16ae:	19 f0       	breq	.+6      	; 0x16b6 <USB_Host_GetDeviceConfigDescriptor+0x90>
    16b0:	86 e0       	ldi	r24, 0x06	; 6
    16b2:	01 c0       	rjmp	.+2      	; 0x16b6 <USB_Host_GetDeviceConfigDescriptor+0x90>
	  return HOST_GETCONFIG_InvalidData;
    16b4:	85 e0       	ldi	r24, 0x05	; 5
    16b6:	29 96       	adiw	r28, 0x09	; 9
	  return ErrorCode;

	*ConfigSizePtr = le16_to_cpu(DESCRIPTOR_PCAST(ConfigHeader, USB_Descriptor_Configuration_Header_t)->TotalConfigurationSize);

	if (*ConfigSizePtr > BufferSize)
	  return HOST_GETCONFIG_BuffOverflow;
    16b8:	0f b6       	in	r0, 0x3f	; 63

	if (DESCRIPTOR_TYPE(BufferPtr) != DTYPE_Configuration)
	  return HOST_GETCONFIG_InvalidData;

	return HOST_GETCONFIG_Successful;
}
    16ba:	f8 94       	cli
    16bc:	de bf       	out	0x3e, r29	; 62
    16be:	0f be       	out	0x3f, r0	; 63
    16c0:	cd bf       	out	0x3d, r28	; 61
    16c2:	df 91       	pop	r29
    16c4:	cf 91       	pop	r28
    16c6:	1f 91       	pop	r17
    16c8:	0f 91       	pop	r16
    16ca:	ff 90       	pop	r15
    16cc:	ef 90       	pop	r14
    16ce:	df 90       	pop	r13
    16d0:	cf 90       	pop	r12
    16d2:	08 95       	ret

000016d4 <USB_GetNextDescriptorComp>:
    16d4:	af 92       	push	r10
    16d6:	bf 92       	push	r11
}

uint8_t USB_GetNextDescriptorComp(uint16_t* const BytesRem,
                                  void** const CurrConfigLoc,
                                  ConfigComparatorPtr_t const ComparatorRoutine)
{
    16d8:	cf 92       	push	r12
    16da:	df 92       	push	r13
    16dc:	ef 92       	push	r14
    16de:	ff 92       	push	r15
    16e0:	0f 93       	push	r16
    16e2:	1f 93       	push	r17
    16e4:	cf 93       	push	r28
    16e6:	df 93       	push	r29
    16e8:	7c 01       	movw	r14, r24
    16ea:	8b 01       	movw	r16, r22
    16ec:	5a 01       	movw	r10, r20
	uint8_t ErrorCode;

	while (*BytesRem)
    16ee:	28 c0       	rjmp	.+80     	; 0x1740 <USB_GetNextDescriptorComp+0x6c>
	{
		uint8_t* PrevDescLoc  = *CurrConfigLoc;
    16f0:	f8 01       	movw	r30, r16
    16f2:	c0 80       	ld	r12, Z
    16f4:	d1 80       	ldd	r13, Z+1	; 0x01
			static inline void USB_GetNextDescriptor(uint16_t* const BytesRem,
			                                         void** CurrConfigLoc) ATTR_NON_NULL_PTR_ARG(1) ATTR_NON_NULL_PTR_ARG(2);
			static inline void USB_GetNextDescriptor(uint16_t* const BytesRem,
			                                         void** CurrConfigLoc)
			{
				uint16_t CurrDescriptorSize = DESCRIPTOR_CAST(*CurrConfigLoc, USB_Descriptor_Header_t).Size;
    16f6:	f6 01       	movw	r30, r12
    16f8:	80 81       	ld	r24, Z
    16fa:	90 e0       	ldi	r25, 0x00	; 0
    16fc:	9e 01       	movw	r18, r28
    16fe:	8c 17       	cp	r24, r28
    1700:	9d 07       	cpc	r25, r29
    1702:	08 f4       	brcc	.+2      	; 0x1706 <USB_GetNextDescriptorComp+0x32>
    1704:	9c 01       	movw	r18, r24

				if (*BytesRem < CurrDescriptorSize)
				  CurrDescriptorSize = *BytesRem;

				*CurrConfigLoc  = (void*)((uintptr_t)*CurrConfigLoc + CurrDescriptorSize);
    1706:	c6 01       	movw	r24, r12
    1708:	82 0f       	add	r24, r18
    170a:	93 1f       	adc	r25, r19
    170c:	f8 01       	movw	r30, r16
    170e:	91 83       	std	Z+1, r25	; 0x01
    1710:	80 83       	st	Z, r24
				*BytesRem      -= CurrDescriptorSize;
    1712:	f7 01       	movw	r30, r14
    1714:	80 81       	ld	r24, Z
    1716:	91 81       	ldd	r25, Z+1	; 0x01
    1718:	82 1b       	sub	r24, r18
    171a:	93 0b       	sbc	r25, r19
    171c:	91 83       	std	Z+1, r25	; 0x01
    171e:	80 83       	st	Z, r24
		uint16_t PrevBytesRem = *BytesRem;

		USB_GetNextDescriptor(BytesRem, CurrConfigLoc);

		if ((ErrorCode = ComparatorRoutine(*CurrConfigLoc)) != DESCRIPTOR_SEARCH_NotFound)
    1720:	f8 01       	movw	r30, r16
    1722:	80 81       	ld	r24, Z
    1724:	91 81       	ldd	r25, Z+1	; 0x01
    1726:	f5 01       	movw	r30, r10
    1728:	09 95       	icall
    172a:	82 30       	cpi	r24, 0x02	; 2
    172c:	49 f0       	breq	.+18     	; 0x1740 <USB_GetNextDescriptorComp+0x6c>
		{
			if (ErrorCode == DESCRIPTOR_SEARCH_Fail)
    172e:	81 30       	cpi	r24, 0x01	; 1
    1730:	69 f4       	brne	.+26     	; 0x174c <USB_GetNextDescriptorComp+0x78>
			{
				*CurrConfigLoc = PrevDescLoc;
    1732:	f8 01       	movw	r30, r16
    1734:	d1 82       	std	Z+1, r13	; 0x01
    1736:	c0 82       	st	Z, r12
				*BytesRem      = PrevBytesRem;
    1738:	f7 01       	movw	r30, r14
    173a:	d1 83       	std	Z+1, r29	; 0x01
    173c:	c0 83       	st	Z, r28
    173e:	06 c0       	rjmp	.+12     	; 0x174c <USB_GetNextDescriptorComp+0x78>
                                  void** const CurrConfigLoc,
                                  ConfigComparatorPtr_t const ComparatorRoutine)
{
	uint8_t ErrorCode;

	while (*BytesRem)
    1740:	f7 01       	movw	r30, r14
    1742:	c0 81       	ld	r28, Z
    1744:	d1 81       	ldd	r29, Z+1	; 0x01
    1746:	20 97       	sbiw	r28, 0x00	; 0
    1748:	99 f6       	brne	.-90     	; 0x16f0 <USB_GetNextDescriptorComp+0x1c>

			return ErrorCode;
		}
	}

	return DESCRIPTOR_SEARCH_COMP_EndOfDescriptor;
    174a:	82 e0       	ldi	r24, 0x02	; 2
}
    174c:	df 91       	pop	r29
    174e:	cf 91       	pop	r28
    1750:	1f 91       	pop	r17
    1752:	0f 91       	pop	r16
    1754:	ff 90       	pop	r15
    1756:	ef 90       	pop	r14
    1758:	df 90       	pop	r13
    175a:	cf 90       	pop	r12
    175c:	bf 90       	pop	r11
    175e:	af 90       	pop	r10
    1760:	08 95       	ret

00001762 <USB_Device_ProcessControlRequest>:
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_Device_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
    1762:	1f 93       	push	r17
    1764:	cf 93       	push	r28
    1766:	df 93       	push	r29
    1768:	cd b7       	in	r28, 0x3d	; 61
    176a:	de b7       	in	r29, 0x3e	; 62
    176c:	ac 97       	sbiw	r28, 0x2c	; 44
    176e:	0f b6       	in	r0, 0x3f	; 63
    1770:	f8 94       	cli
    1772:	de bf       	out	0x3e, r29	; 62
    1774:	0f be       	out	0x3f, r0	; 63
    1776:	cd bf       	out	0x3d, r28	; 61
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
    1778:	80 e0       	ldi	r24, 0x00	; 0
	USB_ControlRequest.bRequest      = Endpoint_Read_8();
	USB_ControlRequest.wValue        = Endpoint_Read_16_LE();
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;
    177a:	e9 e1       	ldi	r30, 0x19	; 25
    177c:	f2 e0       	ldi	r31, 0x02	; 2
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    177e:	90 91 f1 00 	lds	r25, 0x00F1

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_8();
    1782:	91 93       	st	Z+, r25
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
    1784:	8f 5f       	subi	r24, 0xFF	; 255
    1786:	88 30       	cpi	r24, 0x08	; 8
    1788:	d1 f7       	brne	.-12     	; 0x177e <USB_Device_ProcessControlRequest+0x1c>
	  *(RequestHeader++) = Endpoint_Read_8();
	#endif

	EVENT_USB_Device_ControlRequest();
    178a:	0e 94 1d 02 	call	0x43a	; 0x43a <EVENT_USB_Device_ControlRequest>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    178e:	80 91 e8 00 	lds	r24, 0x00E8

	if (Endpoint_IsSETUPReceived())
    1792:	83 ff       	sbrs	r24, 3
    1794:	39 c1       	rjmp	.+626    	; 0x1a08 <USB_Device_ProcessControlRequest+0x2a6>
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
    1796:	80 91 19 02 	lds	r24, 0x0219

		switch (USB_ControlRequest.bRequest)
    179a:	20 91 1a 02 	lds	r18, 0x021A
    179e:	25 30       	cpi	r18, 0x05	; 5
    17a0:	09 f4       	brne	.+2      	; 0x17a4 <USB_Device_ProcessControlRequest+0x42>
    17a2:	84 c0       	rjmp	.+264    	; 0x18ac <USB_Device_ProcessControlRequest+0x14a>
    17a4:	26 30       	cpi	r18, 0x06	; 6
    17a6:	40 f4       	brcc	.+16     	; 0x17b8 <USB_Device_ProcessControlRequest+0x56>
    17a8:	21 30       	cpi	r18, 0x01	; 1
    17aa:	a1 f1       	breq	.+104    	; 0x1814 <USB_Device_ProcessControlRequest+0xb2>
    17ac:	21 30       	cpi	r18, 0x01	; 1
    17ae:	70 f0       	brcs	.+28     	; 0x17cc <USB_Device_ProcessControlRequest+0x6a>
    17b0:	23 30       	cpi	r18, 0x03	; 3
    17b2:	09 f0       	breq	.+2      	; 0x17b6 <USB_Device_ProcessControlRequest+0x54>
    17b4:	29 c1       	rjmp	.+594    	; 0x1a08 <USB_Device_ProcessControlRequest+0x2a6>
    17b6:	2e c0       	rjmp	.+92     	; 0x1814 <USB_Device_ProcessControlRequest+0xb2>
    17b8:	28 30       	cpi	r18, 0x08	; 8
    17ba:	09 f4       	brne	.+2      	; 0x17be <USB_Device_ProcessControlRequest+0x5c>
    17bc:	f6 c0       	rjmp	.+492    	; 0x19aa <USB_Device_ProcessControlRequest+0x248>
    17be:	29 30       	cpi	r18, 0x09	; 9
    17c0:	09 f4       	brne	.+2      	; 0x17c4 <USB_Device_ProcessControlRequest+0x62>
    17c2:	05 c1       	rjmp	.+522    	; 0x19ce <USB_Device_ProcessControlRequest+0x26c>
    17c4:	26 30       	cpi	r18, 0x06	; 6
    17c6:	09 f0       	breq	.+2      	; 0x17ca <USB_Device_ProcessControlRequest+0x68>
    17c8:	1f c1       	rjmp	.+574    	; 0x1a08 <USB_Device_ProcessControlRequest+0x2a6>
    17ca:	93 c0       	rjmp	.+294    	; 0x18f2 <USB_Device_ProcessControlRequest+0x190>
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    17cc:	80 38       	cpi	r24, 0x80	; 128
    17ce:	21 f0       	breq	.+8      	; 0x17d8 <USB_Device_ProcessControlRequest+0x76>
    17d0:	82 38       	cpi	r24, 0x82	; 130
    17d2:	09 f0       	breq	.+2      	; 0x17d6 <USB_Device_ProcessControlRequest+0x74>
    17d4:	19 c1       	rjmp	.+562    	; 0x1a08 <USB_Device_ProcessControlRequest+0x2a6>
    17d6:	08 c0       	rjmp	.+16     	; 0x17e8 <USB_Device_ProcessControlRequest+0x86>
	Endpoint_ClearOUT();
}

static void USB_Device_GetStatus(void)
{
	uint8_t CurrentStatus = 0;
    17d8:	80 91 14 02 	lds	r24, 0x0214
			if (USB_Device_CurrentlySelfPowered)
			  CurrentStatus |= FEATURE_SELFPOWERED_ENABLED;
			#endif

			#if !defined(NO_DEVICE_REMOTE_WAKEUP)
			if (USB_Device_RemoteWakeupEnabled)
    17dc:	90 91 15 02 	lds	r25, 0x0215
    17e0:	99 23       	and	r25, r25
    17e2:	71 f0       	breq	.+28     	; 0x1800 <USB_Device_ProcessControlRequest+0x9e>
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
    17e4:	82 60       	ori	r24, 0x02	; 2
    17e6:	0c c0       	rjmp	.+24     	; 0x1800 <USB_Device_ProcessControlRequest+0x9e>
			#endif
			break;
		case (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_ENDPOINT):
			#if !defined(CONTROL_ONLY_DEVICE)
			Endpoint_SelectEndpoint((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
    17e8:	80 91 1d 02 	lds	r24, 0x021D
    17ec:	8f 70       	andi	r24, 0x0F	; 15
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    17ee:	80 93 e9 00 	sts	0x00E9, r24
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    17f2:	90 91 eb 00 	lds	r25, 0x00EB

			CurrentStatus = Endpoint_IsStalled();
    17f6:	81 e0       	ldi	r24, 0x01	; 1
    17f8:	95 ff       	sbrs	r25, 5
    17fa:	80 e0       	ldi	r24, 0x00	; 0
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    17fc:	10 92 e9 00 	sts	0x00E9, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1800:	90 91 e8 00 	lds	r25, 0x00E8
    1804:	97 7f       	andi	r25, 0xF7	; 247
    1806:	90 93 e8 00 	sts	0x00E8, r25
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
    180a:	80 93 f1 00 	sts	0x00F1, r24
				UEDATX = (Data >> 8);
    180e:	10 92 f1 00 	sts	0x00F1, r1
    1812:	d6 c0       	rjmp	.+428    	; 0x19c0 <USB_Device_ProcessControlRequest+0x25e>
				}

				break;
			case REQ_ClearFeature:
			case REQ_SetFeature:
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    1814:	88 23       	and	r24, r24
    1816:	19 f0       	breq	.+6      	; 0x181e <USB_Device_ProcessControlRequest+0xbc>
    1818:	82 30       	cpi	r24, 0x02	; 2
    181a:	09 f0       	breq	.+2      	; 0x181e <USB_Device_ProcessControlRequest+0xbc>
    181c:	f5 c0       	rjmp	.+490    	; 0x1a08 <USB_Device_ProcessControlRequest+0x2a6>
	Endpoint_ClearStatusStage();
}

static void USB_Device_ClearSetFeature(void)
{
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
    181e:	90 e0       	ldi	r25, 0x00	; 0
    1820:	8f 71       	andi	r24, 0x1F	; 31
    1822:	90 70       	andi	r25, 0x00	; 0
    1824:	00 97       	sbiw	r24, 0x00	; 0
    1826:	29 f0       	breq	.+10     	; 0x1832 <USB_Device_ProcessControlRequest+0xd0>
    1828:	82 30       	cpi	r24, 0x02	; 2
    182a:	91 05       	cpc	r25, r1
    182c:	09 f0       	breq	.+2      	; 0x1830 <USB_Device_ProcessControlRequest+0xce>
    182e:	ec c0       	rjmp	.+472    	; 0x1a08 <USB_Device_ProcessControlRequest+0x2a6>
    1830:	0b c0       	rjmp	.+22     	; 0x1848 <USB_Device_ProcessControlRequest+0xe6>
	{
		#if !defined(NO_DEVICE_REMOTE_WAKEUP)
		case REQREC_DEVICE:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
    1832:	80 91 1b 02 	lds	r24, 0x021B
    1836:	81 30       	cpi	r24, 0x01	; 1
    1838:	09 f0       	breq	.+2      	; 0x183c <USB_Device_ProcessControlRequest+0xda>
    183a:	e6 c0       	rjmp	.+460    	; 0x1a08 <USB_Device_ProcessControlRequest+0x2a6>
			  USB_Device_RemoteWakeupEnabled = (USB_ControlRequest.bRequest == REQ_SetFeature);
    183c:	23 30       	cpi	r18, 0x03	; 3
    183e:	09 f0       	breq	.+2      	; 0x1842 <USB_Device_ProcessControlRequest+0xe0>
    1840:	80 e0       	ldi	r24, 0x00	; 0
    1842:	80 93 15 02 	sts	0x0215, r24
    1846:	2c c0       	rjmp	.+88     	; 0x18a0 <USB_Device_ProcessControlRequest+0x13e>

			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
    1848:	80 91 1b 02 	lds	r24, 0x021B
    184c:	88 23       	and	r24, r24
    184e:	41 f5       	brne	.+80     	; 0x18a0 <USB_Device_ProcessControlRequest+0x13e>
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
    1850:	20 91 1d 02 	lds	r18, 0x021D
    1854:	2f 70       	andi	r18, 0x0F	; 15

				if (EndpointIndex == ENDPOINT_CONTROLEP)
    1856:	09 f4       	brne	.+2      	; 0x185a <USB_Device_ProcessControlRequest+0xf8>
    1858:	d7 c0       	rjmp	.+430    	; 0x1a08 <USB_Device_ProcessControlRequest+0x2a6>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    185a:	20 93 e9 00 	sts	0x00E9, r18
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
    185e:	80 91 eb 00 	lds	r24, 0x00EB
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
    1862:	80 ff       	sbrs	r24, 0
    1864:	1d c0       	rjmp	.+58     	; 0x18a0 <USB_Device_ProcessControlRequest+0x13e>
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
    1866:	80 91 1a 02 	lds	r24, 0x021A
    186a:	83 30       	cpi	r24, 0x03	; 3
    186c:	21 f4       	brne	.+8      	; 0x1876 <USB_Device_ProcessControlRequest+0x114>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    186e:	80 91 eb 00 	lds	r24, 0x00EB
    1872:	80 62       	ori	r24, 0x20	; 32
    1874:	13 c0       	rjmp	.+38     	; 0x189c <USB_Device_ProcessControlRequest+0x13a>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
    1876:	80 91 eb 00 	lds	r24, 0x00EB
    187a:	80 61       	ori	r24, 0x10	; 16
    187c:	80 93 eb 00 	sts	0x00EB, r24
			 *  \param[in] Address  Endpoint address whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t Address)
			{
				UERST = (1 << (Address & ENDPOINT_EPNUM_MASK));
    1880:	81 e0       	ldi	r24, 0x01	; 1
    1882:	90 e0       	ldi	r25, 0x00	; 0
    1884:	02 c0       	rjmp	.+4      	; 0x188a <USB_Device_ProcessControlRequest+0x128>
    1886:	88 0f       	add	r24, r24
    1888:	99 1f       	adc	r25, r25
    188a:	2a 95       	dec	r18
    188c:	e2 f7       	brpl	.-8      	; 0x1886 <USB_Device_ProcessControlRequest+0x124>
    188e:	80 93 ea 00 	sts	0x00EA, r24
				UERST = 0;
    1892:	10 92 ea 00 	sts	0x00EA, r1

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
    1896:	80 91 eb 00 	lds	r24, 0x00EB
    189a:	88 60       	ori	r24, 0x08	; 8
    189c:	80 93 eb 00 	sts	0x00EB, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    18a0:	10 92 e9 00 	sts	0x00E9, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    18a4:	80 91 e8 00 	lds	r24, 0x00E8
    18a8:	87 7f       	andi	r24, 0xF7	; 247
    18aa:	8d c0       	rjmp	.+282    	; 0x19c6 <USB_Device_ProcessControlRequest+0x264>
					USB_Device_ClearSetFeature();
				}

				break;
			case REQ_SetAddress:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    18ac:	88 23       	and	r24, r24
    18ae:	09 f0       	breq	.+2      	; 0x18b2 <USB_Device_ProcessControlRequest+0x150>
    18b0:	ab c0       	rjmp	.+342    	; 0x1a08 <USB_Device_ProcessControlRequest+0x2a6>
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t DeviceAddress = (USB_ControlRequest.wValue & 0x7F);
    18b2:	10 91 1b 02 	lds	r17, 0x021B
    18b6:	1f 77       	andi	r17, 0x7F	; 127
			#endif

			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				UDADDR = (UDADDR & (1 << ADDEN)) | (Address & 0x7F);
    18b8:	80 91 e3 00 	lds	r24, 0x00E3
    18bc:	80 78       	andi	r24, 0x80	; 128
    18be:	81 2b       	or	r24, r17
    18c0:	80 93 e3 00 	sts	0x00E3, r24
    18c4:	80 91 e8 00 	lds	r24, 0x00E8
    18c8:	87 7f       	andi	r24, 0xF7	; 247
    18ca:	80 93 e8 00 	sts	0x00E8, r24

	USB_Device_SetDeviceAddress(DeviceAddress);

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
    18ce:	f9 d8       	rcall	.-3598   	; 0xac2 <Endpoint_ClearStatusStage>
    18d0:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    18d4:	80 ff       	sbrs	r24, 0

	while (!(Endpoint_IsINReady()));
    18d6:	fc cf       	rjmp	.-8      	; 0x18d0 <USB_Device_ProcessControlRequest+0x16e>
    18d8:	80 91 e3 00 	lds	r24, 0x00E3
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address)
			{
				(void)Address;
				
				UDADDR |= (1 << ADDEN);
    18dc:	80 68       	ori	r24, 0x80	; 128
    18de:	80 93 e3 00 	sts	0x00E3, r24
    18e2:	11 23       	and	r17, r17

	USB_Device_EnableDeviceAddress(DeviceAddress);

	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
    18e4:	11 f0       	breq	.+4      	; 0x18ea <USB_Device_ProcessControlRequest+0x188>
    18e6:	83 e0       	ldi	r24, 0x03	; 3
    18e8:	01 c0       	rjmp	.+2      	; 0x18ec <USB_Device_ProcessControlRequest+0x18a>
    18ea:	82 e0       	ldi	r24, 0x02	; 2
    18ec:	80 93 18 02 	sts	0x0218, r24
    18f0:	8b c0       	rjmp	.+278    	; 0x1a08 <USB_Device_ProcessControlRequest+0x2a6>
    18f2:	80 58       	subi	r24, 0x80	; 128
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_SetAddress();

				break;
			case REQ_GetDescriptor:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    18f4:	82 30       	cpi	r24, 0x02	; 2
    18f6:	08 f0       	brcs	.+2      	; 0x18fa <USB_Device_ProcessControlRequest+0x198>
    18f8:	87 c0       	rjmp	.+270    	; 0x1a08 <USB_Device_ProcessControlRequest+0x2a6>
    18fa:	80 91 1b 02 	lds	r24, 0x021B
	    !(defined(USE_FLASH_DESCRIPTORS) || defined(USE_EEPROM_DESCRIPTORS) || defined(USE_RAM_DESCRIPTORS))
	uint8_t DescriptorAddressSpace;
	#endif

	#if !defined(NO_INTERNAL_SERIAL) && (USE_INTERNAL_SERIAL != NO_DESCRIPTOR)
	if (USB_ControlRequest.wValue == ((DTYPE_String << 8) | USE_INTERNAL_SERIAL))
    18fe:	90 91 1c 02 	lds	r25, 0x021C
    1902:	23 e0       	ldi	r18, 0x03	; 3
    1904:	8c 3d       	cpi	r24, 0xDC	; 220
    1906:	92 07       	cpc	r25, r18
    1908:	b1 f5       	brne	.+108    	; 0x1976 <USB_Device_ProcessControlRequest+0x214>
    190a:	83 e0       	ldi	r24, 0x03	; 3
	{
		USB_Descriptor_Header_t Header;
		uint16_t                UnicodeString[INTERNAL_SERIAL_LENGTH_BITS / 4];
	} SignatureDescriptor;

	SignatureDescriptor.Header.Type = DTYPE_String;
    190c:	8c 83       	std	Y+4, r24	; 0x04
    190e:	8a e2       	ldi	r24, 0x2A	; 42
	SignatureDescriptor.Header.Size = USB_STRING_LEN(INTERNAL_SERIAL_LENGTH_BITS / 4);
    1910:	8b 83       	std	Y+3, r24	; 0x03
    1912:	5f b7       	in	r21, 0x3f	; 63
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
    1914:	f8 94       	cli
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
    1916:	de 01       	movw	r26, r28
				__builtin_ssrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				cli();
				#endif

				GCC_MEMORY_BARRIER();
    1918:	13 96       	adiw	r26, 0x03	; 3
    191a:	80 e0       	ldi	r24, 0x00	; 0
    191c:	90 e0       	ldi	r25, 0x00	; 0
    191e:	4e e0       	ldi	r20, 0x0E	; 14
			static inline void USB_Device_GetSerialString(uint16_t* const UnicodeString)
			{
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;
    1920:	61 e2       	ldi	r22, 0x21	; 33

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
				{
					uint8_t SerialByte = boot_signature_byte_get(SigReadAddress);
    1922:	e4 2f       	mov	r30, r20
    1924:	f0 e0       	ldi	r31, 0x00	; 0
    1926:	60 93 57 00 	sts	0x0057, r22
    192a:	e4 91       	lpm	r30, Z
    192c:	80 ff       	sbrs	r24, 0

					if (SerialCharNum & 0x01)
    192e:	03 c0       	rjmp	.+6      	; 0x1936 <USB_Device_ProcessControlRequest+0x1d4>
    1930:	e2 95       	swap	r30
					{
						SerialByte >>= 4;
    1932:	ef 70       	andi	r30, 0x0F	; 15
    1934:	4f 5f       	subi	r20, 0xFF	; 255
						SigReadAddress++;
    1936:	ef 70       	andi	r30, 0x0F	; 15
					}

					SerialByte &= 0x0F;
    1938:	2e 2f       	mov	r18, r30
    193a:	30 e0       	ldi	r19, 0x00	; 0
    193c:	ea 30       	cpi	r30, 0x0A	; 10

					UnicodeString[SerialCharNum] = cpu_to_le16((SerialByte >= 10) ?
    193e:	18 f0       	brcs	.+6      	; 0x1946 <USB_Device_ProcessControlRequest+0x1e4>
    1940:	29 5c       	subi	r18, 0xC9	; 201
    1942:	3f 4f       	sbci	r19, 0xFF	; 255
    1944:	02 c0       	rjmp	.+4      	; 0x194a <USB_Device_ProcessControlRequest+0x1e8>
    1946:	20 5d       	subi	r18, 0xD0	; 208
    1948:	3f 4f       	sbci	r19, 0xFF	; 255
    194a:	13 96       	adiw	r26, 0x03	; 3
    194c:	3c 93       	st	X, r19
    194e:	2e 93       	st	-X, r18
    1950:	12 97       	sbiw	r26, 0x02	; 2
    1952:	01 96       	adiw	r24, 0x01	; 1
    1954:	12 96       	adiw	r26, 0x02	; 2
    1956:	84 31       	cpi	r24, 0x14	; 20
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
    1958:	91 05       	cpc	r25, r1
    195a:	19 f7       	brne	.-58     	; 0x1922 <USB_Device_ProcessControlRequest+0x1c0>
    195c:	5f bf       	out	0x3f, r21	; 63
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
    195e:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1962:	87 7f       	andi	r24, 0xF7	; 247
    1964:	80 93 e8 00 	sts	0x00E8, r24
    1968:	ce 01       	movw	r24, r28

	USB_Device_GetSerialString(SignatureDescriptor.UnicodeString);

	Endpoint_ClearSETUP();

	Endpoint_Write_Control_Stream_LE(&SignatureDescriptor, sizeof(SignatureDescriptor));
    196a:	03 96       	adiw	r24, 0x03	; 3
    196c:	6a e2       	ldi	r22, 0x2A	; 42
    196e:	70 e0       	ldi	r23, 0x00	; 0
    1970:	0e 94 ee 03 	call	0x7dc	; 0x7dc <Endpoint_Write_Control_Stream_LE>
    1974:	14 c0       	rjmp	.+40     	; 0x199e <USB_Device_ProcessControlRequest+0x23c>
    1976:	60 91 1d 02 	lds	r22, 0x021D
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif

	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
    197a:	ae 01       	movw	r20, r28
    197c:	4f 5f       	subi	r20, 0xFF	; 255
    197e:	5f 4f       	sbci	r21, 0xFF	; 255
    1980:	0e 94 c7 01 	call	0x38e	; 0x38e <CALLBACK_USB_GetDescriptor>
    1984:	bc 01       	movw	r22, r24
    1986:	00 97       	sbiw	r24, 0x00	; 0
    1988:	09 f4       	brne	.+2      	; 0x198c <USB_Device_ProcessControlRequest+0x22a>
    198a:	3e c0       	rjmp	.+124    	; 0x1a08 <USB_Device_ProcessControlRequest+0x2a6>
    198c:	80 91 e8 00 	lds	r24, 0x00E8
    1990:	87 7f       	andi	r24, 0xF7	; 247
    1992:	80 93 e8 00 	sts	0x00E8, r24
    1996:	89 81       	ldd	r24, Y+1	; 0x01
	#if defined(USE_RAM_DESCRIPTORS) || !defined(ARCH_HAS_MULTI_ADDRESS_SPACE)
	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_EEPROM_DESCRIPTORS)
	Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_FLASH_DESCRIPTORS)
	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
    1998:	9a 81       	ldd	r25, Y+2	; 0x02
    199a:	0e 94 93 04 	call	0x926	; 0x926 <Endpoint_Write_Control_PStream_LE>
    199e:	80 91 e8 00 	lds	r24, 0x00E8
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    19a2:	8b 77       	andi	r24, 0x7B	; 123
    19a4:	80 93 e8 00 	sts	0x00E8, r24
    19a8:	2f c0       	rjmp	.+94     	; 0x1a08 <USB_Device_ProcessControlRequest+0x2a6>
    19aa:	80 38       	cpi	r24, 0x80	; 128
					USB_Device_GetDescriptor();
				}

				break;
			case REQ_GetConfiguration:
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
    19ac:	69 f5       	brne	.+90     	; 0x1a08 <USB_Device_ProcessControlRequest+0x2a6>
    19ae:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    19b2:	87 7f       	andi	r24, 0xF7	; 247
    19b4:	80 93 e8 00 	sts	0x00E8, r24
    19b8:	80 91 13 02 	lds	r24, 0x0213

static void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();

	Endpoint_Write_8(USB_Device_ConfigurationNumber);
    19bc:	80 93 f1 00 	sts	0x00F1, r24
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    19c0:	80 91 e8 00 	lds	r24, 0x00E8
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    19c4:	8e 77       	andi	r24, 0x7E	; 126
    19c6:	80 93 e8 00 	sts	0x00E8, r24
    19ca:	7b d8       	rcall	.-3850   	; 0xac2 <Endpoint_ClearStatusStage>
	Endpoint_ClearIN();

	Endpoint_ClearStatusStage();
    19cc:	1d c0       	rjmp	.+58     	; 0x1a08 <USB_Device_ProcessControlRequest+0x2a6>
    19ce:	88 23       	and	r24, r24
    19d0:	d9 f4       	brne	.+54     	; 0x1a08 <USB_Device_ProcessControlRequest+0x2a6>
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_GetConfiguration();

				break;
			case REQ_SetConfiguration:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    19d2:	90 91 1b 02 	lds	r25, 0x021B
}

static void USB_Device_SetConfiguration(void)
{
	#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
    19d6:	92 30       	cpi	r25, 0x02	; 2
    19d8:	b8 f4       	brcc	.+46     	; 0x1a08 <USB_Device_ProcessControlRequest+0x2a6>
    19da:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    19de:	87 7f       	andi	r24, 0xF7	; 247
    19e0:	80 93 e8 00 	sts	0x00E8, r24
    19e4:	90 93 13 02 	sts	0x0213, r25
	#endif
	#endif

	Endpoint_ClearSETUP();

	USB_Device_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
    19e8:	6c d8       	rcall	.-3880   	; 0xac2 <Endpoint_ClearStatusStage>
    19ea:	80 91 13 02 	lds	r24, 0x0213

	Endpoint_ClearStatusStage();
    19ee:	88 23       	and	r24, r24

	if (USB_Device_ConfigurationNumber)
    19f0:	21 f4       	brne	.+8      	; 0x19fa <USB_Device_ProcessControlRequest+0x298>
    19f2:	80 91 e3 00 	lds	r24, 0x00E3
    19f6:	87 ff       	sbrs	r24, 7
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
    19f8:	02 c0       	rjmp	.+4      	; 0x19fe <USB_Device_ProcessControlRequest+0x29c>
    19fa:	84 e0       	ldi	r24, 0x04	; 4
	  USB_DeviceState = DEVICE_STATE_Configured;
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
    19fc:	01 c0       	rjmp	.+2      	; 0x1a00 <USB_Device_ProcessControlRequest+0x29e>
    19fe:	81 e0       	ldi	r24, 0x01	; 1
    1a00:	80 93 18 02 	sts	0x0218, r24
    1a04:	0e 94 0d 02 	call	0x41a	; 0x41a <EVENT_USB_Device_ConfigurationChanged>
    1a08:	80 91 e8 00 	lds	r24, 0x00E8

	EVENT_USB_Device_ConfigurationChanged();
    1a0c:	83 ff       	sbrs	r24, 3
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    1a0e:	0a c0       	rjmp	.+20     	; 0x1a24 <USB_Device_ProcessControlRequest+0x2c2>
    1a10:	80 91 e8 00 	lds	r24, 0x00E8
			default:
				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
    1a14:	87 7f       	andi	r24, 0xF7	; 247
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1a16:	80 93 e8 00 	sts	0x00E8, r24
    1a1a:	80 91 eb 00 	lds	r24, 0x00EB
    1a1e:	80 62       	ori	r24, 0x20	; 32
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    1a20:	80 93 eb 00 	sts	0x00EB, r24
    1a24:	ac 96       	adiw	r28, 0x2c	; 44
    1a26:	0f b6       	in	r0, 0x3f	; 63
    1a28:	f8 94       	cli
	{
		Endpoint_ClearSETUP();
		Endpoint_StallTransaction();
	}
}
    1a2a:	de bf       	out	0x3e, r29	; 62
    1a2c:	0f be       	out	0x3f, r0	; 63
    1a2e:	cd bf       	out	0x3d, r28	; 61
    1a30:	df 91       	pop	r29
    1a32:	cf 91       	pop	r28
    1a34:	1f 91       	pop	r17
    1a36:	08 95       	ret

00001a38 <USB_Event_Stub>:
#include "Events.h"

void USB_Event_Stub(void)
{

}
    1a38:	08 95       	ret

00001a3a <USB_Host_WaitForIOS>:
	
	return ReturnStatus;
}

static uint8_t USB_Host_WaitForIOS(const uint8_t WaitType)
{
    1a3a:	1f 93       	push	r17
    1a3c:	cf 93       	push	r28
    1a3e:	df 93       	push	r29
    1a40:	18 2f       	mov	r17, r24
	uint8_t  TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#else
	uint16_t TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#endif

	while (!(((WaitType == USB_HOST_WAITFOR_SetupSent)  && Pipe_IsSETUPSent())  ||
    1a42:	c9 ee       	ldi	r28, 0xE9	; 233
    1a44:	d3 e0       	ldi	r29, 0x03	; 3
    1a46:	06 c0       	rjmp	.+12     	; 0x1a54 <USB_Host_WaitForIOS+0x1a>
	         ((WaitType == USB_HOST_WAITFOR_InReceived) && Pipe_IsINReceived()) ||
	         ((WaitType == USB_HOST_WAITFOR_OutReady)   && Pipe_IsOUTReady())))
	{
		uint8_t ErrorCode;

		if ((ErrorCode = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
    1a48:	81 e0       	ldi	r24, 0x01	; 1
    1a4a:	e5 d8       	rcall	.-3638   	; 0xc16 <USB_Host_WaitMS>
    1a4c:	88 23       	and	r24, r24
    1a4e:	c9 f4       	brne	.+50     	; 0x1a82 <USB_Host_WaitForIOS+0x48>
    1a50:	21 97       	sbiw	r28, 0x01	; 1
    1a52:	b1 f0       	breq	.+44     	; 0x1a80 <USB_Host_WaitForIOS+0x46>
		  return ErrorCode;

		if (!(TimeoutCounter--))
    1a54:	11 23       	and	r17, r17
	uint8_t  TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#else
	uint16_t TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#endif

	while (!(((WaitType == USB_HOST_WAITFOR_SetupSent)  && Pipe_IsSETUPSent())  ||
    1a56:	29 f4       	brne	.+10     	; 0x1a62 <USB_Host_WaitForIOS+0x28>
    1a58:	80 91 a6 00 	lds	r24, 0x00A6
			 *  \return Boolean \c true if the current pipe is ready for a SETUP packet, \c false otherwise.
			 */
			static inline bool Pipe_IsSETUPSent(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsSETUPSent(void)
			{
				return ((UPINTX & (1 << TXSTPI)) ? true : false);
    1a5c:	83 ff       	sbrs	r24, 3
    1a5e:	f4 cf       	rjmp	.-24     	; 0x1a48 <USB_Host_WaitForIOS+0xe>
    1a60:	0d c0       	rjmp	.+26     	; 0x1a7c <USB_Host_WaitForIOS+0x42>
    1a62:	11 30       	cpi	r17, 0x01	; 1
    1a64:	29 f4       	brne	.+10     	; 0x1a70 <USB_Host_WaitForIOS+0x36>
    1a66:	80 91 a6 00 	lds	r24, 0x00A6
			 *  \return Boolean \c true if the current pipe has received an IN packet, \c false otherwise.
			 */
			static inline bool Pipe_IsINReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsINReceived(void)
			{
				return ((UPINTX & (1 << RXINI)) ? true : false);
    1a6a:	80 ff       	sbrs	r24, 0
	         ((WaitType == USB_HOST_WAITFOR_InReceived) && Pipe_IsINReceived()) ||
    1a6c:	ed cf       	rjmp	.-38     	; 0x1a48 <USB_Host_WaitForIOS+0xe>
    1a6e:	06 c0       	rjmp	.+12     	; 0x1a7c <USB_Host_WaitForIOS+0x42>
    1a70:	12 30       	cpi	r17, 0x02	; 2
	uint8_t  TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#else
	uint16_t TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#endif

	while (!(((WaitType == USB_HOST_WAITFOR_SetupSent)  && Pipe_IsSETUPSent())  ||
    1a72:	51 f7       	brne	.-44     	; 0x1a48 <USB_Host_WaitForIOS+0xe>
    1a74:	80 91 a6 00 	lds	r24, 0x00A6
			 *  \return Boolean \c true if the current pipe is ready for an OUT packet, \c false otherwise.
			 */
			static inline bool Pipe_IsOUTReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsOUTReady(void)
			{
				return ((UPINTX & (1 << TXOUTI)) ? true : false);
    1a78:	82 ff       	sbrs	r24, 2
	         ((WaitType == USB_HOST_WAITFOR_InReceived) && Pipe_IsINReceived()) ||
	         ((WaitType == USB_HOST_WAITFOR_OutReady)   && Pipe_IsOUTReady())))
    1a7a:	e6 cf       	rjmp	.-52     	; 0x1a48 <USB_Host_WaitForIOS+0xe>
    1a7c:	80 e0       	ldi	r24, 0x00	; 0

		if (!(TimeoutCounter--))
		  return HOST_SENDCONTROL_SoftwareTimeOut;
	}

	return HOST_SENDCONTROL_Successful;
    1a7e:	01 c0       	rjmp	.+2      	; 0x1a82 <USB_Host_WaitForIOS+0x48>
    1a80:	84 e0       	ldi	r24, 0x04	; 4

		if ((ErrorCode = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
		  return ErrorCode;

		if (!(TimeoutCounter--))
		  return HOST_SENDCONTROL_SoftwareTimeOut;
    1a82:	df 91       	pop	r29
	}

	return HOST_SENDCONTROL_Successful;
}
    1a84:	cf 91       	pop	r28
    1a86:	1f 91       	pop	r17
    1a88:	08 95       	ret

00001a8a <USB_Host_SendControlRequest>:
    1a8a:	ef 92       	push	r14

uint8_t USB_Host_SendControlRequest(void* const BufferPtr)
{
    1a8c:	ff 92       	push	r15
    1a8e:	0f 93       	push	r16
    1a90:	1f 93       	push	r17
    1a92:	cf 93       	push	r28
    1a94:	df 93       	push	r29
    1a96:	ec 01       	movw	r28, r24
			 *  \return Boolean \c true if the bus is currently suspended, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusSuspended(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusSuspended(void)
			{
				return ((UHCON & (1 << SOFEN)) ? false : true);
    1a98:	e0 90 9e 00 	lds	r14, 0x009E
    1a9c:	ff 24       	eor	r15, r15
    1a9e:	81 e0       	ldi	r24, 0x01	; 1
    1aa0:	e8 22       	and	r14, r24
    1aa2:	ff 24       	eor	r15, r15

static uint8_t USB_Host_SendControlRequest_PRV(void* const BufferPtr)
{
	uint8_t* DataStream   = (uint8_t*)BufferPtr;
	uint8_t  ReturnStatus = HOST_SENDCONTROL_Successful;
	uint16_t DataLen      = USB_ControlRequest.wLength;
    1aa4:	00 91 1f 02 	lds	r16, 0x021F
    1aa8:	10 91 20 02 	lds	r17, 0x0220
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
    1aac:	80 91 9e 00 	lds	r24, 0x009E
    1ab0:	81 60       	ori	r24, 0x01	; 1
    1ab2:	80 93 9e 00 	sts	0x009E, r24

	USB_Host_ResumeBus();

	if ((ReturnStatus = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
    1ab6:	81 e0       	ldi	r24, 0x01	; 1
    1ab8:	ae d8       	rcall	.-3748   	; 0xc16 <USB_Host_WaitMS>
    1aba:	88 23       	and	r24, r24
    1abc:	09 f0       	breq	.+2      	; 0x1ac0 <USB_Host_SendControlRequest+0x36>
    1abe:	ca c0       	rjmp	.+404    	; 0x1c54 <USB_Host_SendControlRequest+0x1ca>
    1ac0:	80 91 aa 00 	lds	r24, 0x00AA
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    1ac4:	8f 7c       	andi	r24, 0xCF	; 207
    1ac6:	80 93 aa 00 	sts	0x00AA, r24
    1aca:	10 92 f5 00 	sts	0x00F5, r1

			/** Clears the error flags for the currently selected pipe. */
			static inline void Pipe_ClearError(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearError(void)
			{
				UPERRX = 0;
    1ace:	80 91 a6 00 	lds	r24, 0x00A6
				UPINTX &= ~(1 << PERRI);
    1ad2:	8f 7e       	andi	r24, 0xEF	; 239
    1ad4:	80 93 a6 00 	sts	0x00A6, r24
    1ad8:	80 91 a9 00 	lds	r24, 0x00A9

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    1adc:	8f 7b       	andi	r24, 0xBF	; 191
    1ade:	80 93 a9 00 	sts	0x00A9, r24
    1ae2:	88 e0       	ldi	r24, 0x08	; 8
    1ae4:	e9 e1       	ldi	r30, 0x19	; 25
	Pipe_Write_8(USB_ControlRequest.bRequest);
	Pipe_Write_16_LE(USB_ControlRequest.wValue);
	Pipe_Write_16_LE(USB_ControlRequest.wIndex);
	Pipe_Write_16_LE(USB_ControlRequest.wLength);
	#else
	uint8_t* HeaderStream = (uint8_t*)&USB_ControlRequest;
    1ae6:	f2 e0       	ldi	r31, 0x02	; 2
    1ae8:	91 91       	ld	r25, Z+

	for (uint8_t HeaderByte = 0; HeaderByte < sizeof(USB_Request_Header_t); HeaderByte++)
	  Pipe_Write_8(*(HeaderStream++));
    1aea:	90 93 af 00 	sts	0x00AF, r25
			 *  \param[in] Data  Data to write into the the currently selected pipe's FIFO buffer.
			 */
			static inline void Pipe_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Write_8(const uint8_t Data)
			{
				UPDATX = Data;
    1aee:	81 50       	subi	r24, 0x01	; 1
    1af0:	d9 f7       	brne	.-10     	; 0x1ae8 <USB_Host_SendControlRequest+0x5e>
	Pipe_Write_16_LE(USB_ControlRequest.wIndex);
	Pipe_Write_16_LE(USB_ControlRequest.wLength);
	#else
	uint8_t* HeaderStream = (uint8_t*)&USB_ControlRequest;

	for (uint8_t HeaderByte = 0; HeaderByte < sizeof(USB_Request_Header_t); HeaderByte++)
    1af2:	80 91 a6 00 	lds	r24, 0x00A6
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearSETUP(void)
			{
				UPINTX &= ~((1 << TXSTPI) | (1 << FIFOCON));
    1af6:	87 77       	andi	r24, 0x77	; 119
    1af8:	80 93 a6 00 	sts	0x00A6, r24
    1afc:	80 e0       	ldi	r24, 0x00	; 0
	  Pipe_Write_8(*(HeaderStream++));
	#endif

	Pipe_ClearSETUP();

	if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_SetupSent)) != HOST_SENDCONTROL_Successful)
    1afe:	9d df       	rcall	.-198    	; 0x1a3a <USB_Host_WaitForIOS>
    1b00:	88 23       	and	r24, r24
    1b02:	09 f0       	breq	.+2      	; 0x1b06 <USB_Host_SendControlRequest+0x7c>
    1b04:	a7 c0       	rjmp	.+334    	; 0x1c54 <USB_Host_SendControlRequest+0x1ca>
    1b06:	80 91 a9 00 	lds	r24, 0x00A9

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    1b0a:	80 64       	ori	r24, 0x40	; 64
    1b0c:	80 93 a9 00 	sts	0x00A9, r24
    1b10:	81 e0       	ldi	r24, 0x01	; 1
    1b12:	81 d8       	rcall	.-3838   	; 0xc16 <USB_Host_WaitMS>
	  return ReturnStatus;

	Pipe_Freeze();

	if ((ReturnStatus = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
    1b14:	88 23       	and	r24, r24
    1b16:	09 f0       	breq	.+2      	; 0x1b1a <USB_Host_SendControlRequest+0x90>
    1b18:	9d c0       	rjmp	.+314    	; 0x1c54 <USB_Host_SendControlRequest+0x1ca>
    1b1a:	80 91 19 02 	lds	r24, 0x0219
    1b1e:	87 ff       	sbrs	r24, 7
	  return ReturnStatus;

	if ((USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_DIRECTION) == REQDIR_DEVICETOHOST)
    1b20:	4f c0       	rjmp	.+158    	; 0x1bc0 <USB_Host_SendControlRequest+0x136>
    1b22:	80 91 aa 00 	lds	r24, 0x00AA
    1b26:	8f 7c       	andi	r24, 0xCF	; 207
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    1b28:	80 61       	ori	r24, 0x10	; 16
    1b2a:	80 93 aa 00 	sts	0x00AA, r24
    1b2e:	20 97       	sbiw	r28, 0x00	; 0
    1b30:	61 f5       	brne	.+88     	; 0x1b8a <USB_Host_SendControlRequest+0x100>
    1b32:	2e c0       	rjmp	.+92     	; 0x1b90 <USB_Host_SendControlRequest+0x106>
	{
		Pipe_SetPipeToken(PIPE_TOKEN_IN);

		if (DataStream != NULL)
    1b34:	80 91 a9 00 	lds	r24, 0x00A9
    1b38:	8f 7b       	andi	r24, 0xBF	; 191

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    1b3a:	80 93 a9 00 	sts	0x00A9, r24
    1b3e:	81 e0       	ldi	r24, 0x01	; 1
    1b40:	7c df       	rcall	.-264    	; 0x1a3a <USB_Host_WaitForIOS>
    1b42:	88 23       	and	r24, r24
		{
			while (DataLen)
			{
				Pipe_Unfreeze();

				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_InReceived)) != HOST_SENDCONTROL_Successful)
    1b44:	09 f0       	breq	.+2      	; 0x1b48 <USB_Host_SendControlRequest+0xbe>
    1b46:	86 c0       	rjmp	.+268    	; 0x1c54 <USB_Host_SendControlRequest+0x1ca>
    1b48:	80 91 f6 00 	lds	r24, 0x00F6
    1b4c:	90 91 f7 00 	lds	r25, 0x00F7
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
    1b50:	00 97       	sbiw	r24, 0x00	; 0
    1b52:	41 f4       	brne	.+16     	; 0x1b64 <USB_Host_SendControlRequest+0xda>
    1b54:	00 e0       	ldi	r16, 0x00	; 0
    1b56:	10 e0       	ldi	r17, 0x00	; 0
				  return ReturnStatus;

				if (!(Pipe_BytesInPipe()))
    1b58:	05 c0       	rjmp	.+10     	; 0x1b64 <USB_Host_SendControlRequest+0xda>
    1b5a:	80 91 af 00 	lds	r24, 0x00AF
				  DataLen = 0;
    1b5e:	89 93       	st	Y+, r24
    1b60:	01 50       	subi	r16, 0x01	; 1
			 *  \return Next byte in the currently selected pipe's FIFO buffer.
			 */
			static inline uint8_t Pipe_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_Read_8(void)
			{
				return UPDATX;
    1b62:	10 40       	sbci	r17, 0x00	; 0
    1b64:	80 91 f6 00 	lds	r24, 0x00F6

				while (Pipe_BytesInPipe() && DataLen)
				{
					*(DataStream++) = Pipe_Read_8();
					DataLen--;
    1b68:	90 91 f7 00 	lds	r25, 0x00F7
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
    1b6c:	00 97       	sbiw	r24, 0x00	; 0
    1b6e:	19 f0       	breq	.+6      	; 0x1b76 <USB_Host_SendControlRequest+0xec>
    1b70:	01 15       	cp	r16, r1
    1b72:	11 05       	cpc	r17, r1
				  return ReturnStatus;

				if (!(Pipe_BytesInPipe()))
				  DataLen = 0;

				while (Pipe_BytesInPipe() && DataLen)
    1b74:	91 f7       	brne	.-28     	; 0x1b5a <USB_Host_SendControlRequest+0xd0>
    1b76:	80 91 a9 00 	lds	r24, 0x00A9
    1b7a:	80 64       	ori	r24, 0x40	; 64
    1b7c:	80 93 a9 00 	sts	0x00A9, r24

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    1b80:	80 91 a6 00 	lds	r24, 0x00A6
    1b84:	8e 77       	andi	r24, 0x7E	; 126
    1b86:	80 93 a6 00 	sts	0x00A6, r24
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
    1b8a:	01 15       	cp	r16, r1
    1b8c:	11 05       	cpc	r17, r1
    1b8e:	91 f6       	brne	.-92     	; 0x1b34 <USB_Host_SendControlRequest+0xaa>
    1b90:	80 91 aa 00 	lds	r24, 0x00AA
	{
		Pipe_SetPipeToken(PIPE_TOKEN_IN);

		if (DataStream != NULL)
		{
			while (DataLen)
    1b94:	8f 7c       	andi	r24, 0xCF	; 207
    1b96:	80 62       	ori	r24, 0x20	; 32
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    1b98:	80 93 aa 00 	sts	0x00AA, r24
    1b9c:	80 91 a9 00 	lds	r24, 0x00A9
    1ba0:	8f 7b       	andi	r24, 0xBF	; 191
    1ba2:	80 93 a9 00 	sts	0x00A9, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    1ba6:	82 e0       	ldi	r24, 0x02	; 2
    1ba8:	48 df       	rcall	.-368    	; 0x1a3a <USB_Host_WaitForIOS>
    1baa:	88 23       	and	r24, r24
    1bac:	09 f0       	breq	.+2      	; 0x1bb0 <USB_Host_SendControlRequest+0x126>
		}

		Pipe_SetPipeToken(PIPE_TOKEN_OUT);
		Pipe_Unfreeze();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    1bae:	52 c0       	rjmp	.+164    	; 0x1c54 <USB_Host_SendControlRequest+0x1ca>
    1bb0:	80 91 a6 00 	lds	r24, 0x00A6
    1bb4:	8b 77       	andi	r24, 0x7B	; 123
    1bb6:	80 93 a6 00 	sts	0x00A6, r24
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearOUT(void)
			{
				UPINTX &= ~((1 << TXOUTI) | (1 << FIFOCON));
    1bba:	82 e0       	ldi	r24, 0x02	; 2
    1bbc:	3e df       	rcall	.-388    	; 0x1a3a <USB_Host_WaitForIOS>
    1bbe:	4a c0       	rjmp	.+148    	; 0x1c54 <USB_Host_SendControlRequest+0x1ca>
    1bc0:	20 97       	sbiw	r28, 0x00	; 0
    1bc2:	a1 f1       	breq	.+104    	; 0x1c2c <USB_Host_SendControlRequest+0x1a2>
		  return ReturnStatus;

		Pipe_ClearOUT();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    1bc4:	80 91 aa 00 	lds	r24, 0x00AA
    1bc8:	8f 7c       	andi	r24, 0xCF	; 207
    1bca:	80 62       	ori	r24, 0x20	; 32
		  return ReturnStatus;
	}
	else
	{
		if (DataStream != NULL)
    1bcc:	80 93 aa 00 	sts	0x00AA, r24
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    1bd0:	80 91 a9 00 	lds	r24, 0x00A9
    1bd4:	8f 7b       	andi	r24, 0xBF	; 191
    1bd6:	80 93 a9 00 	sts	0x00A9, r24
    1bda:	1c c0       	rjmp	.+56     	; 0x1c14 <USB_Host_SendControlRequest+0x18a>

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    1bdc:	2e df       	rcall	.-420    	; 0x1a3a <USB_Host_WaitForIOS>
    1bde:	88 23       	and	r24, r24
    1be0:	c9 f5       	brne	.+114    	; 0x1c54 <USB_Host_SendControlRequest+0x1ca>
    1be2:	fe 01       	movw	r30, r28
    1be4:	07 c0       	rjmp	.+14     	; 0x1bf4 <USB_Host_SendControlRequest+0x16a>
    1be6:	81 91       	ld	r24, Z+
			Pipe_SetPipeToken(PIPE_TOKEN_OUT);
			Pipe_Unfreeze();

			while (DataLen)
			{
				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    1be8:	ef 01       	movw	r28, r30
    1bea:	80 93 af 00 	sts	0x00AF, r24
    1bee:	01 50       	subi	r16, 0x01	; 1
    1bf0:	10 40       	sbci	r17, 0x00	; 0
    1bf2:	59 f0       	breq	.+22     	; 0x1c0a <USB_Host_SendControlRequest+0x180>
				  return ReturnStatus;

				while (DataLen && (Pipe_BytesInPipe() < USB_Host_ControlPipeSize))
				{
					Pipe_Write_8(*(DataStream++));
    1bf4:	ef 01       	movw	r28, r30
    1bf6:	20 91 f6 00 	lds	r18, 0x00F6
			 *  \param[in] Data  Data to write into the the currently selected pipe's FIFO buffer.
			 */
			static inline void Pipe_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Write_8(const uint8_t Data)
			{
				UPDATX = Data;
    1bfa:	30 91 f7 00 	lds	r19, 0x00F7
					DataLen--;
    1bfe:	80 91 e2 01 	lds	r24, 0x01E2
			while (DataLen)
			{
				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
				  return ReturnStatus;

				while (DataLen && (Pipe_BytesInPipe() < USB_Host_ControlPipeSize))
    1c02:	90 e0       	ldi	r25, 0x00	; 0
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
    1c04:	28 17       	cp	r18, r24
    1c06:	39 07       	cpc	r19, r25
    1c08:	70 f3       	brcs	.-36     	; 0x1be6 <USB_Host_SendControlRequest+0x15c>
    1c0a:	80 91 a6 00 	lds	r24, 0x00A6
    1c0e:	8b 77       	andi	r24, 0x7B	; 123
    1c10:	80 93 a6 00 	sts	0x00A6, r24
    1c14:	82 e0       	ldi	r24, 0x02	; 2
    1c16:	01 15       	cp	r16, r1
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearOUT(void)
			{
				UPINTX &= ~((1 << TXOUTI) | (1 << FIFOCON));
    1c18:	11 05       	cpc	r17, r1
    1c1a:	01 f7       	brne	.-64     	; 0x1bdc <USB_Host_SendControlRequest+0x152>
    1c1c:	0e df       	rcall	.-484    	; 0x1a3a <USB_Host_WaitForIOS>
    1c1e:	88 23       	and	r24, r24
    1c20:	c9 f4       	brne	.+50     	; 0x1c54 <USB_Host_SendControlRequest+0x1ca>
			Pipe_SetPipeToken(PIPE_TOKEN_OUT);
			Pipe_Unfreeze();

			while (DataLen)
			{
				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    1c22:	80 91 a9 00 	lds	r24, 0x00A9
		if (DataStream != NULL)
		{
			Pipe_SetPipeToken(PIPE_TOKEN_OUT);
			Pipe_Unfreeze();

			while (DataLen)
    1c26:	80 64       	ori	r24, 0x40	; 64
    1c28:	80 93 a9 00 	sts	0x00A9, r24
				}

				Pipe_ClearOUT();
			}

			if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    1c2c:	80 91 aa 00 	lds	r24, 0x00AA
    1c30:	8f 7c       	andi	r24, 0xCF	; 207

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    1c32:	80 61       	ori	r24, 0x10	; 16
    1c34:	80 93 aa 00 	sts	0x00AA, r24
    1c38:	80 91 a9 00 	lds	r24, 0x00A9
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    1c3c:	8f 7b       	andi	r24, 0xBF	; 191
    1c3e:	80 93 a9 00 	sts	0x00A9, r24
    1c42:	81 e0       	ldi	r24, 0x01	; 1
    1c44:	fa de       	rcall	.-524    	; 0x1a3a <USB_Host_WaitForIOS>
    1c46:	88 23       	and	r24, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    1c48:	29 f4       	brne	.+10     	; 0x1c54 <USB_Host_SendControlRequest+0x1ca>
    1c4a:	90 91 a6 00 	lds	r25, 0x00A6
    1c4e:	9e 77       	andi	r25, 0x7E	; 126
    1c50:	90 93 a6 00 	sts	0x00A6, r25
		}

		Pipe_SetPipeToken(PIPE_TOKEN_IN);
		Pipe_Unfreeze();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_InReceived)) != HOST_SENDCONTROL_Successful)
    1c54:	90 91 a9 00 	lds	r25, 0x00A9
    1c58:	90 64       	ori	r25, 0x40	; 64
    1c5a:	90 93 a9 00 	sts	0x00A9, r25
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
    1c5e:	e1 14       	cp	r14, r1
    1c60:	f1 04       	cpc	r15, r1
    1c62:	29 f4       	brne	.+10     	; 0x1c6e <USB_Host_SendControlRequest+0x1e4>
    1c64:	90 91 9e 00 	lds	r25, 0x009E

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    1c68:	9e 7f       	andi	r25, 0xFE	; 254
    1c6a:	90 93 9e 00 	sts	0x009E, r25
    1c6e:	91 e0       	ldi	r25, 0x01	; 1
	bool BusSuspended    = USB_Host_IsBusSuspended();
	uint8_t ReturnStatus = USB_Host_SendControlRequest_PRV(BufferPtr);

	Pipe_Freeze();

	if (BusSuspended)
    1c70:	90 93 a8 00 	sts	0x00A8, r25
    1c74:	10 92 a8 00 	sts	0x00A8, r1
			 *             some events (such as device disconnections) will not fire until the bus is resumed.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				UHCON &= ~(1 << SOFEN);
    1c78:	df 91       	pop	r29
    1c7a:	cf 91       	pop	r28
    1c7c:	1f 91       	pop	r17
    1c7e:	0f 91       	pop	r16
			 *  \param[in] Address  Address of the pipe to reset.
			 */
			static inline void Pipe_ResetPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ResetPipe(const uint8_t Address)
			{
				UPRST = (1 << (Address & PIPE_PIPENUM_MASK));
    1c80:	ff 90       	pop	r15
    1c82:	ef 90       	pop	r14
    1c84:	08 95       	ret

00001c86 <USB_Host_SetDeviceConfiguration>:
				UPRST = 0;
    1c86:	cf 93       	push	r28
    1c88:	c8 2f       	mov	r28, r24
	  USB_Host_SuspendBus();

	Pipe_ResetPipe(PIPE_CONTROLPIPE);

	return ReturnStatus;
}
    1c8a:	10 92 19 02 	sts	0x0219, r1
    1c8e:	89 e0       	ldi	r24, 0x09	; 9
    1c90:	80 93 1a 02 	sts	0x021A, r24
    1c94:	c0 93 1b 02 	sts	0x021B, r28

uint8_t USB_Host_SetDeviceConfiguration(const uint8_t ConfigNumber)
{
	uint8_t ErrorCode;

	USB_ControlRequest = (USB_Request_Header_t)
    1c98:	10 92 1c 02 	sts	0x021C, r1
    1c9c:	10 92 1e 02 	sts	0x021E, r1
    1ca0:	10 92 1d 02 	sts	0x021D, r1
    1ca4:	10 92 20 02 	sts	0x0220, r1
    1ca8:	10 92 1f 02 	sts	0x021F, r1
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
    1cac:	10 92 a7 00 	sts	0x00A7, r1
			.wLength       = 0,
		};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	if ((ErrorCode = USB_Host_SendControlRequest(NULL)) == HOST_SENDCONTROL_Successful)
    1cb0:	80 e0       	ldi	r24, 0x00	; 0
    1cb2:	90 e0       	ldi	r25, 0x00	; 0
    1cb4:	ea de       	rcall	.-556    	; 0x1a8a <USB_Host_SendControlRequest>
    1cb6:	88 23       	and	r24, r24
    1cb8:	49 f4       	brne	.+18     	; 0x1ccc <USB_Host_SetDeviceConfiguration+0x46>
    1cba:	c0 93 16 02 	sts	0x0216, r28
	{
		USB_Host_ConfigurationNumber = ConfigNumber;
    1cbe:	cc 23       	and	r28, r28
		USB_HostState                = (ConfigNumber) ? HOST_STATE_Configured : HOST_STATE_Addressed;
    1cc0:	11 f0       	breq	.+4      	; 0x1cc6 <USB_Host_SetDeviceConfiguration+0x40>
    1cc2:	9b e0       	ldi	r25, 0x0B	; 11
    1cc4:	01 c0       	rjmp	.+2      	; 0x1cc8 <USB_Host_SetDeviceConfiguration+0x42>
    1cc6:	9a e0       	ldi	r25, 0x0A	; 10
    1cc8:	90 93 21 02 	sts	0x0221, r25
    1ccc:	cf 91       	pop	r28
	}

	return ErrorCode;
}
    1cce:	08 95       	ret

00001cd0 <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
    1cd0:	cf 93       	push	r28
	#if defined(USB_CAN_BE_BOTH)
		if (USB_CurrentMode == USB_MODE_Device)
    1cd2:	80 91 12 02 	lds	r24, 0x0212
    1cd6:	81 30       	cpi	r24, 0x01	; 1
    1cd8:	d1 f4       	brne	.+52     	; 0x1d0e <USB_USBTask+0x3e>
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_DeviceTask(void)
{
	if (USB_DeviceState == DEVICE_STATE_Unattached)
    1cda:	80 91 18 02 	lds	r24, 0x0218
    1cde:	88 23       	and	r24, r24
    1ce0:	29 f1       	breq	.+74     	; 0x1d2c <USB_USBTask+0x5c>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    1ce2:	80 91 e9 00 	lds	r24, 0x00E9
    1ce6:	8f 70       	andi	r24, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    1ce8:	90 91 ec 00 	lds	r25, 0x00EC
    1cec:	90 ff       	sbrs	r25, 0
    1cee:	02 c0       	rjmp	.+4      	; 0x1cf4 <USB_USBTask+0x24>
    1cf0:	c0 e8       	ldi	r28, 0x80	; 128
    1cf2:	01 c0       	rjmp	.+2      	; 0x1cf6 <USB_USBTask+0x26>
    1cf4:	c0 e0       	ldi	r28, 0x00	; 0
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    1cf6:	c8 2b       	or	r28, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1cf8:	10 92 e9 00 	sts	0x00E9, r1
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    1cfc:	80 91 e8 00 	lds	r24, 0x00E8

	uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

	if (Endpoint_IsSETUPReceived())
    1d00:	83 ff       	sbrs	r24, 3
    1d02:	01 c0       	rjmp	.+2      	; 0x1d06 <USB_USBTask+0x36>
	  USB_Device_ProcessControlRequest();
    1d04:	2e dd       	rcall	.-1444   	; 0x1762 <USB_Device_ProcessControlRequest>
    1d06:	cf 70       	andi	r28, 0x0F	; 15
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1d08:	c0 93 e9 00 	sts	0x00E9, r28
    1d0c:	0f c0       	rjmp	.+30     	; 0x1d2c <USB_USBTask+0x5c>
    1d0e:	80 91 12 02 	lds	r24, 0x0212
void USB_USBTask(void)
{
	#if defined(USB_CAN_BE_BOTH)
		if (USB_CurrentMode == USB_MODE_Device)
		  USB_DeviceTask();
		else if (USB_CurrentMode == USB_MODE_Host)
    1d12:	82 30       	cpi	r24, 0x02	; 2
    1d14:	59 f4       	brne	.+22     	; 0x1d2c <USB_USBTask+0x5c>
    1d16:	c0 91 a7 00 	lds	r28, 0x00A7
			 *  \return Index of the currently selected pipe.
			 */
			static inline uint8_t Pipe_GetCurrentPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetCurrentPipe(void)
			{
				return ((UPNUM & PIPE_PIPENUM_MASK) | Pipe_GetPipeDirection());
    1d1a:	cf 70       	andi	r28, 0x0F	; 15
    1d1c:	80 91 aa 00 	lds	r24, 0x00AA
			 *  \return The currently selected pipe's direction, as a \c PIPE_DIR_* mask.
			 */
			static inline uint8_t Pipe_GetPipeDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetPipeDirection(void)
			{
				return (UPCFG0X & (1 << EPDIR)) ? PIPE_DIR_IN : PIPE_DIR_OUT;
    1d20:	10 92 a7 00 	sts	0x00A7, r1
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
    1d24:	0e 94 64 06 	call	0xcc8	; 0xcc8 <USB_Host_ProcessNextHostState>
{
	uint8_t PrevPipe = Pipe_GetCurrentPipe();

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	USB_Host_ProcessNextHostState();
    1d28:	c0 93 a7 00 	sts	0x00A7, r28
    1d2c:	cf 91       	pop	r28
	#elif defined(USB_CAN_BE_HOST)
		USB_HostTask();
	#elif defined(USB_CAN_BE_DEVICE)
		USB_DeviceTask();
	#endif
}
    1d2e:	08 95       	ret

00001d30 <HID_Device_ProcessControlRequest>:
#define  __INCLUDE_FROM_HID_DRIVER
#define  __INCLUDE_FROM_HID_DEVICE_C
#include "HIDClassDevice.h"

void HID_Device_ProcessControlRequest(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
    1d30:	6f 92       	push	r6
    1d32:	7f 92       	push	r7
    1d34:	8f 92       	push	r8
    1d36:	9f 92       	push	r9
    1d38:	af 92       	push	r10
    1d3a:	bf 92       	push	r11
    1d3c:	cf 92       	push	r12
    1d3e:	df 92       	push	r13
    1d40:	ef 92       	push	r14
    1d42:	ff 92       	push	r15
    1d44:	0f 93       	push	r16
    1d46:	1f 93       	push	r17
    1d48:	cf 93       	push	r28
    1d4a:	df 93       	push	r29
    1d4c:	00 d0       	rcall	.+0      	; 0x1d4e <HID_Device_ProcessControlRequest+0x1e>
    1d4e:	0f 92       	push	r0
    1d50:	cd b7       	in	r28, 0x3d	; 61
    1d52:	de b7       	in	r29, 0x3e	; 62
    1d54:	7c 01       	movw	r14, r24
				Endpoint_ClearStatusStage();
			}

			break;
	}
}
    1d56:	6d b6       	in	r6, 0x3d	; 61
    1d58:	7e b6       	in	r7, 0x3e	; 62
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    1d5a:	80 91 e8 00 	lds	r24, 0x00E8
#define  __INCLUDE_FROM_HID_DEVICE_C
#include "HIDClassDevice.h"

void HID_Device_ProcessControlRequest(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
	if (!(Endpoint_IsSETUPReceived()))
    1d5e:	83 ff       	sbrs	r24, 3
    1d60:	0a c1       	rjmp	.+532    	; 0x1f76 <HID_Device_ProcessControlRequest+0x246>
	  return;

	if (USB_ControlRequest.wIndex != HIDInterfaceInfo->Config.InterfaceNumber)
    1d62:	f7 01       	movw	r30, r14
    1d64:	80 81       	ld	r24, Z
    1d66:	90 e0       	ldi	r25, 0x00	; 0
    1d68:	20 91 1d 02 	lds	r18, 0x021D
    1d6c:	30 91 1e 02 	lds	r19, 0x021E
    1d70:	28 17       	cp	r18, r24
    1d72:	39 07       	cpc	r19, r25
    1d74:	09 f0       	breq	.+2      	; 0x1d78 <HID_Device_ProcessControlRequest+0x48>
    1d76:	ff c0       	rjmp	.+510    	; 0x1f76 <HID_Device_ProcessControlRequest+0x246>
	  return;

	switch (USB_ControlRequest.bRequest)
    1d78:	80 91 1a 02 	lds	r24, 0x021A
    1d7c:	83 30       	cpi	r24, 0x03	; 3
    1d7e:	09 f4       	brne	.+2      	; 0x1d82 <HID_Device_ProcessControlRequest+0x52>
    1d80:	9e c0       	rjmp	.+316    	; 0x1ebe <HID_Device_ProcessControlRequest+0x18e>
    1d82:	84 30       	cpi	r24, 0x04	; 4
    1d84:	30 f4       	brcc	.+12     	; 0x1d92 <HID_Device_ProcessControlRequest+0x62>
    1d86:	81 30       	cpi	r24, 0x01	; 1
    1d88:	71 f0       	breq	.+28     	; 0x1da6 <HID_Device_ProcessControlRequest+0x76>
    1d8a:	82 30       	cpi	r24, 0x02	; 2
    1d8c:	09 f0       	breq	.+2      	; 0x1d90 <HID_Device_ProcessControlRequest+0x60>
    1d8e:	f3 c0       	rjmp	.+486    	; 0x1f76 <HID_Device_ProcessControlRequest+0x246>
    1d90:	d5 c0       	rjmp	.+426    	; 0x1f3c <HID_Device_ProcessControlRequest+0x20c>
    1d92:	8a 30       	cpi	r24, 0x0A	; 10
    1d94:	09 f4       	brne	.+2      	; 0x1d98 <HID_Device_ProcessControlRequest+0x68>
    1d96:	b9 c0       	rjmp	.+370    	; 0x1f0a <HID_Device_ProcessControlRequest+0x1da>
    1d98:	8b 30       	cpi	r24, 0x0B	; 11
    1d9a:	09 f4       	brne	.+2      	; 0x1d9e <HID_Device_ProcessControlRequest+0x6e>
    1d9c:	a1 c0       	rjmp	.+322    	; 0x1ee0 <HID_Device_ProcessControlRequest+0x1b0>
    1d9e:	89 30       	cpi	r24, 0x09	; 9
    1da0:	09 f0       	breq	.+2      	; 0x1da4 <HID_Device_ProcessControlRequest+0x74>
    1da2:	e9 c0       	rjmp	.+466    	; 0x1f76 <HID_Device_ProcessControlRequest+0x246>
    1da4:	4d c0       	rjmp	.+154    	; 0x1e40 <HID_Device_ProcessControlRequest+0x110>
	{
		case HID_REQ_GetReport:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    1da6:	80 91 19 02 	lds	r24, 0x0219
    1daa:	81 3a       	cpi	r24, 0xA1	; 161
    1dac:	09 f0       	breq	.+2      	; 0x1db0 <HID_Device_ProcessControlRequest+0x80>
    1dae:	e3 c0       	rjmp	.+454    	; 0x1f76 <HID_Device_ProcessControlRequest+0x246>
    1db0:	9d b6       	in	r9, 0x3d	; 61
    1db2:	8e b6       	in	r8, 0x3e	; 62
			{
				uint16_t ReportSize = 0;
    1db4:	1b 82       	std	Y+3, r1	; 0x03
    1db6:	1a 82       	std	Y+2, r1	; 0x02
				uint8_t  ReportID   = (USB_ControlRequest.wValue & 0xFF);
    1db8:	80 91 1b 02 	lds	r24, 0x021B
    1dbc:	00 91 1c 02 	lds	r16, 0x021C
    1dc0:	89 83       	std	Y+1, r24	; 0x01
				uint8_t  ReportType = (USB_ControlRequest.wValue >> 8) - 1;
				uint8_t  ReportData[HIDInterfaceInfo->Config.PrevReportINBufferSize];
    1dc2:	f7 01       	movw	r30, r14
    1dc4:	40 85       	ldd	r20, Z+8	; 0x08
    1dc6:	8d b7       	in	r24, 0x3d	; 61
    1dc8:	9e b7       	in	r25, 0x3e	; 62
    1dca:	84 1b       	sub	r24, r20
    1dcc:	91 09       	sbc	r25, r1
    1dce:	0f b6       	in	r0, 0x3f	; 63
    1dd0:	f8 94       	cli
    1dd2:	9e bf       	out	0x3e, r25	; 62
    1dd4:	0f be       	out	0x3f, r0	; 63
    1dd6:	8d bf       	out	0x3d, r24	; 61
    1dd8:	cd b6       	in	r12, 0x3d	; 61
    1dda:	de b6       	in	r13, 0x3e	; 62
    1ddc:	08 94       	sec
    1dde:	c1 1c       	adc	r12, r1
    1de0:	d1 1c       	adc	r13, r1

				memset(ReportData, 0, sizeof(ReportData));
    1de2:	bc 2c       	mov	r11, r12
    1de4:	ad 2c       	mov	r10, r13
    1de6:	c6 01       	movw	r24, r12
    1de8:	60 e0       	ldi	r22, 0x00	; 0
    1dea:	70 e0       	ldi	r23, 0x00	; 0
    1dec:	50 e0       	ldi	r21, 0x00	; 0
    1dee:	93 d3       	rcall	.+1830   	; 0x2516 <memset>
    1df0:	40 2f       	mov	r20, r16
		case HID_REQ_GetReport:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
			{
				uint16_t ReportSize = 0;
				uint8_t  ReportID   = (USB_ControlRequest.wValue & 0xFF);
				uint8_t  ReportType = (USB_ControlRequest.wValue >> 8) - 1;
    1df2:	41 50       	subi	r20, 0x01	; 1
    1df4:	c7 01       	movw	r24, r14
				uint8_t  ReportData[HIDInterfaceInfo->Config.PrevReportINBufferSize];

				memset(ReportData, 0, sizeof(ReportData));

				CALLBACK_HID_Device_CreateHIDReport(HIDInterfaceInfo, &ReportID, ReportType, ReportData, &ReportSize);
    1df6:	be 01       	movw	r22, r28
    1df8:	6f 5f       	subi	r22, 0xFF	; 255
    1dfa:	7f 4f       	sbci	r23, 0xFF	; 255
    1dfc:	96 01       	movw	r18, r12
    1dfe:	8e 01       	movw	r16, r28
    1e00:	0e 5f       	subi	r16, 0xFE	; 254
    1e02:	1f 4f       	sbci	r17, 0xFF	; 255
    1e04:	0e 94 2d 02 	call	0x45a	; 0x45a <CALLBACK_HID_Device_CreateHIDReport>
    1e08:	f7 01       	movw	r30, r14

				if (HIDInterfaceInfo->Config.PrevReportINBuffer != NULL)
    1e0a:	86 81       	ldd	r24, Z+6	; 0x06
    1e0c:	97 81       	ldd	r25, Z+7	; 0x07
    1e0e:	00 97       	sbiw	r24, 0x00	; 0
    1e10:	21 f0       	breq	.+8      	; 0x1e1a <HID_Device_ProcessControlRequest+0xea>
    1e12:	40 85       	ldd	r20, Z+8	; 0x08
				{
					memcpy(HIDInterfaceInfo->Config.PrevReportINBuffer, ReportData,
    1e14:	b6 01       	movw	r22, r12
    1e16:	50 e0       	ldi	r21, 0x00	; 0
    1e18:	75 d3       	rcall	.+1770   	; 0x2504 <memcpy>
    1e1a:	10 92 e9 00 	sts	0x00E9, r1
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1e1e:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1e22:	87 7f       	andi	r24, 0xF7	; 247
    1e24:	80 93 e8 00 	sts	0x00E8, r24
    1e28:	6a 81       	ldd	r22, Y+2	; 0x02
    1e2a:	7b 81       	ldd	r23, Y+3	; 0x03
				}

				Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

				Endpoint_ClearSETUP();
				Endpoint_Write_Control_Stream_LE(ReportData, ReportSize);
    1e2c:	8b 2d       	mov	r24, r11
    1e2e:	9a 2d       	mov	r25, r10
    1e30:	0e 94 ee 03 	call	0x7dc	; 0x7dc <Endpoint_Write_Control_Stream_LE>
    1e34:	80 91 e8 00 	lds	r24, 0x00E8
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    1e38:	8b 77       	andi	r24, 0x7B	; 123
    1e3a:	80 93 e8 00 	sts	0x00E8, r24
    1e3e:	3c c0       	rjmp	.+120    	; 0x1eb8 <HID_Device_ProcessControlRequest+0x188>
    1e40:	80 91 19 02 	lds	r24, 0x0219
				Endpoint_ClearOUT();
			}

			break;
		case HID_REQ_SetReport:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    1e44:	81 32       	cpi	r24, 0x21	; 33
    1e46:	09 f0       	breq	.+2      	; 0x1e4a <HID_Device_ProcessControlRequest+0x11a>
    1e48:	96 c0       	rjmp	.+300    	; 0x1f76 <HID_Device_ProcessControlRequest+0x246>
    1e4a:	9d b6       	in	r9, 0x3d	; 61
    1e4c:	8e b6       	in	r8, 0x3e	; 62
    1e4e:	00 91 1f 02 	lds	r16, 0x021F
			{
				uint16_t ReportSize = USB_ControlRequest.wLength;
    1e52:	10 91 20 02 	lds	r17, 0x0220
    1e56:	c0 90 1b 02 	lds	r12, 0x021B
				uint8_t  ReportID   = (USB_ControlRequest.wValue & 0xFF);
    1e5a:	d0 90 1c 02 	lds	r13, 0x021C
    1e5e:	8d b7       	in	r24, 0x3d	; 61
    1e60:	9e b7       	in	r25, 0x3e	; 62
				uint8_t  ReportType = (USB_ControlRequest.wValue >> 8) - 1;
				uint8_t  ReportData[ReportSize];
    1e62:	80 1b       	sub	r24, r16
    1e64:	91 0b       	sbc	r25, r17
    1e66:	0f b6       	in	r0, 0x3f	; 63
    1e68:	f8 94       	cli
    1e6a:	9e bf       	out	0x3e, r25	; 62
    1e6c:	0f be       	out	0x3f, r0	; 63
    1e6e:	8d bf       	out	0x3d, r24	; 61
    1e70:	ad b6       	in	r10, 0x3d	; 61
    1e72:	be b6       	in	r11, 0x3e	; 62
    1e74:	08 94       	sec
    1e76:	a1 1c       	adc	r10, r1
    1e78:	b1 1c       	adc	r11, r1
    1e7a:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1e7e:	87 7f       	andi	r24, 0xF7	; 247
    1e80:	80 93 e8 00 	sts	0x00E8, r24
    1e84:	c5 01       	movw	r24, r10
    1e86:	b8 01       	movw	r22, r16

				Endpoint_ClearSETUP();
				Endpoint_Read_Control_Stream_LE(ReportData, ReportSize);
    1e88:	0e 94 4a 04 	call	0x894	; 0x894 <Endpoint_Read_Control_Stream_LE>
    1e8c:	80 91 e8 00 	lds	r24, 0x00E8
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1e90:	8e 77       	andi	r24, 0x7E	; 126
    1e92:	80 93 e8 00 	sts	0x00E8, r24
    1e96:	81 e0       	ldi	r24, 0x01	; 1
    1e98:	90 e0       	ldi	r25, 0x00	; 0
				Endpoint_ClearIN();

				CALLBACK_HID_Device_ProcessHIDReport(HIDInterfaceInfo, ReportID, ReportType,
    1e9a:	cc 20       	and	r12, r12
    1e9c:	11 f4       	brne	.+4      	; 0x1ea2 <HID_Device_ProcessControlRequest+0x172>
    1e9e:	80 e0       	ldi	r24, 0x00	; 0
    1ea0:	90 e0       	ldi	r25, 0x00	; 0
    1ea2:	4d 2d       	mov	r20, r13
    1ea4:	41 50       	subi	r20, 0x01	; 1
		case HID_REQ_SetReport:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
			{
				uint16_t ReportSize = USB_ControlRequest.wLength;
				uint8_t  ReportID   = (USB_ControlRequest.wValue & 0xFF);
				uint8_t  ReportType = (USB_ControlRequest.wValue >> 8) - 1;
    1ea6:	95 01       	movw	r18, r10
    1ea8:	28 0f       	add	r18, r24

				Endpoint_ClearSETUP();
				Endpoint_Read_Control_Stream_LE(ReportData, ReportSize);
				Endpoint_ClearIN();

				CALLBACK_HID_Device_ProcessHIDReport(HIDInterfaceInfo, ReportID, ReportType,
    1eaa:	39 1f       	adc	r19, r25
    1eac:	08 1b       	sub	r16, r24
    1eae:	19 0b       	sbc	r17, r25
    1eb0:	c7 01       	movw	r24, r14
    1eb2:	6c 2d       	mov	r22, r12
    1eb4:	0e 94 62 02 	call	0x4c4	; 0x4c4 <CALLBACK_HID_Device_ProcessHIDReport>
    1eb8:	9d be       	out	0x3d, r9	; 61
    1eba:	8e be       	out	0x3e, r8	; 62
    1ebc:	5c c0       	rjmp	.+184    	; 0x1f76 <HID_Device_ProcessControlRequest+0x246>
    1ebe:	80 91 19 02 	lds	r24, 0x0219
				                                     &ReportData[ReportID ? 1 : 0], ReportSize - (ReportID ? 1 : 0));
			}

			break;
		case HID_REQ_GetProtocol:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    1ec2:	81 3a       	cpi	r24, 0xA1	; 161
    1ec4:	09 f0       	breq	.+2      	; 0x1ec8 <HID_Device_ProcessControlRequest+0x198>
    1ec6:	57 c0       	rjmp	.+174    	; 0x1f76 <HID_Device_ProcessControlRequest+0x246>
    1ec8:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1ecc:	87 7f       	andi	r24, 0xF7	; 247
    1ece:	80 93 e8 00 	sts	0x00E8, r24
    1ed2:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1ed6:	80 ff       	sbrs	r24, 0
    1ed8:	fc cf       	rjmp	.-8      	; 0x1ed2 <HID_Device_ProcessControlRequest+0x1a2>
			{
				Endpoint_ClearSETUP();
				while (!(Endpoint_IsINReady()));
    1eda:	f7 01       	movw	r30, r14
    1edc:	81 85       	ldd	r24, Z+9	; 0x09
				Endpoint_Write_8(HIDInterfaceInfo->State.UsingReportProtocol);
    1ede:	42 c0       	rjmp	.+132    	; 0x1f64 <HID_Device_ProcessControlRequest+0x234>
    1ee0:	80 91 19 02 	lds	r24, 0x0219
				Endpoint_ClearStatusStage();
			}

			break;
		case HID_REQ_SetProtocol:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    1ee4:	81 32       	cpi	r24, 0x21	; 33
    1ee6:	09 f0       	breq	.+2      	; 0x1eea <HID_Device_ProcessControlRequest+0x1ba>
    1ee8:	46 c0       	rjmp	.+140    	; 0x1f76 <HID_Device_ProcessControlRequest+0x246>
    1eea:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1eee:	87 7f       	andi	r24, 0xF7	; 247
    1ef0:	80 93 e8 00 	sts	0x00E8, r24
    1ef4:	0e 94 61 05 	call	0xac2	; 0xac2 <Endpoint_ClearStatusStage>
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
    1ef8:	90 91 1b 02 	lds	r25, 0x021B

				HIDInterfaceInfo->State.UsingReportProtocol = ((USB_ControlRequest.wValue & 0xFF) != 0x00);
    1efc:	81 e0       	ldi	r24, 0x01	; 1
    1efe:	99 23       	and	r25, r25
    1f00:	09 f4       	brne	.+2      	; 0x1f04 <HID_Device_ProcessControlRequest+0x1d4>
    1f02:	80 e0       	ldi	r24, 0x00	; 0
    1f04:	f7 01       	movw	r30, r14
    1f06:	81 87       	std	Z+9, r24	; 0x09
    1f08:	36 c0       	rjmp	.+108    	; 0x1f76 <HID_Device_ProcessControlRequest+0x246>
    1f0a:	80 91 19 02 	lds	r24, 0x0219
			}

			break;
		case HID_REQ_SetIdle:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    1f0e:	81 32       	cpi	r24, 0x21	; 33
    1f10:	91 f5       	brne	.+100    	; 0x1f76 <HID_Device_ProcessControlRequest+0x246>
    1f12:	80 91 e8 00 	lds	r24, 0x00E8
    1f16:	87 7f       	andi	r24, 0xF7	; 247
    1f18:	80 93 e8 00 	sts	0x00E8, r24
    1f1c:	0e 94 61 05 	call	0xac2	; 0xac2 <Endpoint_ClearStatusStage>
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
    1f20:	80 91 1b 02 	lds	r24, 0x021B

				HIDInterfaceInfo->State.IdleCount = ((USB_ControlRequest.wValue & 0xFF00) >> 6);
    1f24:	90 91 1c 02 	lds	r25, 0x021C
    1f28:	80 70       	andi	r24, 0x00	; 0
    1f2a:	36 e0       	ldi	r19, 0x06	; 6
    1f2c:	96 95       	lsr	r25
    1f2e:	87 95       	ror	r24
    1f30:	3a 95       	dec	r19
    1f32:	e1 f7       	brne	.-8      	; 0x1f2c <HID_Device_ProcessControlRequest+0x1fc>
    1f34:	f7 01       	movw	r30, r14
    1f36:	95 87       	std	Z+13, r25	; 0x0d
    1f38:	84 87       	std	Z+12, r24	; 0x0c
    1f3a:	1d c0       	rjmp	.+58     	; 0x1f76 <HID_Device_ProcessControlRequest+0x246>
    1f3c:	80 91 19 02 	lds	r24, 0x0219
			}

			break;
		case HID_REQ_GetIdle:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    1f40:	81 3a       	cpi	r24, 0xA1	; 161
    1f42:	c9 f4       	brne	.+50     	; 0x1f76 <HID_Device_ProcessControlRequest+0x246>
    1f44:	80 91 e8 00 	lds	r24, 0x00E8
    1f48:	87 7f       	andi	r24, 0xF7	; 247
    1f4a:	80 93 e8 00 	sts	0x00E8, r24
    1f4e:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1f52:	80 ff       	sbrs	r24, 0
    1f54:	fc cf       	rjmp	.-8      	; 0x1f4e <HID_Device_ProcessControlRequest+0x21e>
			{
				Endpoint_ClearSETUP();
				while (!(Endpoint_IsINReady()));
    1f56:	f7 01       	movw	r30, r14
    1f58:	84 85       	ldd	r24, Z+12	; 0x0c
				Endpoint_Write_8(HIDInterfaceInfo->State.IdleCount >> 2);
    1f5a:	95 85       	ldd	r25, Z+13	; 0x0d
    1f5c:	96 95       	lsr	r25
    1f5e:	87 95       	ror	r24
    1f60:	96 95       	lsr	r25
    1f62:	87 95       	ror	r24
    1f64:	80 93 f1 00 	sts	0x00F1, r24
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    1f68:	80 91 e8 00 	lds	r24, 0x00E8
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1f6c:	8e 77       	andi	r24, 0x7E	; 126
    1f6e:	80 93 e8 00 	sts	0x00E8, r24
    1f72:	0e 94 61 05 	call	0xac2	; 0xac2 <Endpoint_ClearStatusStage>
				Endpoint_ClearIN();
				Endpoint_ClearStatusStage();
    1f76:	0f b6       	in	r0, 0x3f	; 63
    1f78:	f8 94       	cli
			}

			break;
	}
}
    1f7a:	7e be       	out	0x3e, r7	; 62
    1f7c:	0f be       	out	0x3f, r0	; 63
    1f7e:	6d be       	out	0x3d, r6	; 61
    1f80:	0f 90       	pop	r0
    1f82:	0f 90       	pop	r0
    1f84:	0f 90       	pop	r0
    1f86:	df 91       	pop	r29
    1f88:	cf 91       	pop	r28
    1f8a:	1f 91       	pop	r17
    1f8c:	0f 91       	pop	r16
    1f8e:	ff 90       	pop	r15
    1f90:	ef 90       	pop	r14
    1f92:	df 90       	pop	r13
    1f94:	cf 90       	pop	r12
    1f96:	bf 90       	pop	r11
    1f98:	af 90       	pop	r10
    1f9a:	9f 90       	pop	r9
    1f9c:	8f 90       	pop	r8
    1f9e:	7f 90       	pop	r7
    1fa0:	6f 90       	pop	r6
    1fa2:	08 95       	ret

00001fa4 <HID_Device_ConfigureEndpoints>:
    1fa4:	cf 93       	push	r28
    1fa6:	df 93       	push	r29

bool HID_Device_ConfigureEndpoints(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
    1fa8:	fc 01       	movw	r30, r24
	memset(&HIDInterfaceInfo->State, 0x00, sizeof(HIDInterfaceInfo->State));
    1faa:	09 96       	adiw	r24, 0x09	; 9
    1fac:	dc 01       	movw	r26, r24
    1fae:	87 e0       	ldi	r24, 0x07	; 7
    1fb0:	ed 01       	movw	r28, r26
    1fb2:	19 92       	st	Y+, r1
    1fb4:	8a 95       	dec	r24
    1fb6:	e9 f7       	brne	.-6      	; 0x1fb2 <HID_Device_ConfigureEndpoints+0xe>
	HIDInterfaceInfo->State.UsingReportProtocol = true;
    1fb8:	81 e0       	ldi	r24, 0x01	; 1
    1fba:	81 87       	std	Z+9, r24	; 0x09
	HIDInterfaceInfo->State.IdleCount           = 500;
    1fbc:	84 ef       	ldi	r24, 0xF4	; 244
    1fbe:	91 e0       	ldi	r25, 0x01	; 1
    1fc0:	95 87       	std	Z+13, r25	; 0x0d
    1fc2:	84 87       	std	Z+12, r24	; 0x0c

	HIDInterfaceInfo->Config.ReportINEndpoint.Type = EP_TYPE_INTERRUPT;
    1fc4:	83 e0       	ldi	r24, 0x03	; 3
    1fc6:	84 83       	std	Z+4, r24	; 0x04

	if (!(Endpoint_ConfigureEndpointTable(&HIDInterfaceInfo->Config.ReportINEndpoint, 1)))
    1fc8:	cf 01       	movw	r24, r30
    1fca:	01 96       	adiw	r24, 0x01	; 1
    1fcc:	61 e0       	ldi	r22, 0x01	; 1
    1fce:	0e 94 25 05 	call	0xa4a	; 0xa4a <Endpoint_ConfigureEndpointTable>
	  return false;	
	
	return true;
}
    1fd2:	df 91       	pop	r29
    1fd4:	cf 91       	pop	r28
    1fd6:	08 95       	ret

00001fd8 <HID_Device_USBTask>:

void HID_Device_USBTask(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
    1fd8:	4f 92       	push	r4
    1fda:	5f 92       	push	r5
    1fdc:	6f 92       	push	r6
    1fde:	7f 92       	push	r7
    1fe0:	8f 92       	push	r8
    1fe2:	9f 92       	push	r9
    1fe4:	af 92       	push	r10
    1fe6:	bf 92       	push	r11
    1fe8:	cf 92       	push	r12
    1fea:	df 92       	push	r13
    1fec:	ef 92       	push	r14
    1fee:	ff 92       	push	r15
    1ff0:	0f 93       	push	r16
    1ff2:	1f 93       	push	r17
    1ff4:	cf 93       	push	r28
    1ff6:	df 93       	push	r29
    1ff8:	00 d0       	rcall	.+0      	; 0x1ffa <HID_Device_USBTask+0x22>
    1ffa:	0f 92       	push	r0
    1ffc:	cd b7       	in	r28, 0x3d	; 61
    1ffe:	de b7       	in	r29, 0x3e	; 62
    2000:	7c 01       	movw	r14, r24
			Endpoint_ClearIN();
		}
		
		HIDInterfaceInfo->State.PrevFrameNum = USB_Device_GetFrameNumber();
	}
}
    2002:	4d b6       	in	r4, 0x3d	; 61
    2004:	5e b6       	in	r5, 0x3e	; 62
	return true;
}

void HID_Device_USBTask(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
	if (USB_DeviceState != DEVICE_STATE_Configured)
    2006:	80 91 18 02 	lds	r24, 0x0218
    200a:	84 30       	cpi	r24, 0x04	; 4
    200c:	09 f0       	breq	.+2      	; 0x2010 <HID_Device_USBTask+0x38>
    200e:	93 c0       	rjmp	.+294    	; 0x2136 <__stack+0x37>
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
    2010:	80 91 e4 00 	lds	r24, 0x00E4
    2014:	90 91 e5 00 	lds	r25, 0x00E5
	  return;

	if (HIDInterfaceInfo->State.PrevFrameNum == USB_Device_GetFrameNumber())
    2018:	f7 01       	movw	r30, r14
    201a:	22 85       	ldd	r18, Z+10	; 0x0a
    201c:	33 85       	ldd	r19, Z+11	; 0x0b
    201e:	28 17       	cp	r18, r24
    2020:	39 07       	cpc	r19, r25
    2022:	09 f4       	brne	.+2      	; 0x2026 <HID_Device_USBTask+0x4e>
    2024:	88 c0       	rjmp	.+272    	; 0x2136 <__stack+0x37>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    2026:	81 81       	ldd	r24, Z+1	; 0x01
    2028:	8f 70       	andi	r24, 0x0F	; 15
    202a:	80 93 e9 00 	sts	0x00E9, r24
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    202e:	80 91 e8 00 	lds	r24, 0x00E8
	  return;
	  
	Endpoint_SelectEndpoint(HIDInterfaceInfo->Config.ReportINEndpoint.Address);

	if (Endpoint_IsReadWriteAllowed())
    2032:	85 ff       	sbrs	r24, 5
    2034:	80 c0       	rjmp	.+256    	; 0x2136 <__stack+0x37>
    2036:	7d b6       	in	r7, 0x3d	; 61
    2038:	6e b6       	in	r6, 0x3e	; 62
	{
		uint8_t  ReportINData[HIDInterfaceInfo->Config.PrevReportINBufferSize];
    203a:	40 85       	ldd	r20, Z+8	; 0x08
    203c:	8d b7       	in	r24, 0x3d	; 61
    203e:	9e b7       	in	r25, 0x3e	; 62
    2040:	84 1b       	sub	r24, r20
    2042:	91 09       	sbc	r25, r1
    2044:	0f b6       	in	r0, 0x3f	; 63
    2046:	f8 94       	cli
    2048:	9e bf       	out	0x3e, r25	; 62
    204a:	0f be       	out	0x3f, r0	; 63
    204c:	8d bf       	out	0x3d, r24	; 61
    204e:	0d b7       	in	r16, 0x3d	; 61
    2050:	1e b7       	in	r17, 0x3e	; 62
    2052:	0f 5f       	subi	r16, 0xFF	; 255
    2054:	1f 4f       	sbci	r17, 0xFF	; 255
		uint8_t  ReportID     = 0;
    2056:	19 82       	std	Y+1, r1	; 0x01
		uint16_t ReportINSize = 0;
    2058:	1b 82       	std	Y+3, r1	; 0x03
    205a:	1a 82       	std	Y+2, r1	; 0x02

		memset(ReportINData, 0, sizeof(ReportINData));
    205c:	b0 2e       	mov	r11, r16
    205e:	a1 2e       	mov	r10, r17
    2060:	c8 01       	movw	r24, r16
    2062:	60 e0       	ldi	r22, 0x00	; 0
    2064:	70 e0       	ldi	r23, 0x00	; 0
    2066:	50 e0       	ldi	r21, 0x00	; 0
    2068:	56 d2       	rcall	.+1196   	; 0x2516 <memset>
    206a:	c7 01       	movw	r24, r14

		bool ForceSend         = CALLBACK_HID_Device_CreateHIDReport(HIDInterfaceInfo, &ReportID, HID_REPORT_ITEM_In,
    206c:	be 01       	movw	r22, r28
    206e:	6f 5f       	subi	r22, 0xFF	; 255
    2070:	7f 4f       	sbci	r23, 0xFF	; 255
    2072:	40 e0       	ldi	r20, 0x00	; 0
    2074:	98 01       	movw	r18, r16
    2076:	8e 01       	movw	r16, r28
    2078:	0e 5f       	subi	r16, 0xFE	; 254
    207a:	1f 4f       	sbci	r17, 0xFF	; 255
    207c:	0e 94 2d 02 	call	0x45a	; 0x45a <CALLBACK_HID_Device_CreateHIDReport>
    2080:	18 2f       	mov	r17, r24
    2082:	f7 01       	movw	r30, r14
		                                                             ReportINData, &ReportINSize);
		bool StatesChanged     = false;
		bool IdlePeriodElapsed = (HIDInterfaceInfo->State.IdleCount && !(HIDInterfaceInfo->State.IdleMSRemaining));
    2084:	84 85       	ldd	r24, Z+12	; 0x0c
    2086:	95 85       	ldd	r25, Z+13	; 0x0d
    2088:	00 97       	sbiw	r24, 0x00	; 0
    208a:	59 f0       	breq	.+22     	; 0x20a2 <HID_Device_USBTask+0xca>
    208c:	81 e0       	ldi	r24, 0x01	; 1
	  return false;	
	
	return true;
}

void HID_Device_USBTask(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
    208e:	90 e0       	ldi	r25, 0x00	; 0
    2090:	26 85       	ldd	r18, Z+14	; 0x0e
    2092:	37 85       	ldd	r19, Z+15	; 0x0f
    2094:	21 15       	cp	r18, r1
    2096:	31 05       	cpc	r19, r1
    2098:	11 f0       	breq	.+4      	; 0x209e <HID_Device_USBTask+0xc6>
    209a:	80 e0       	ldi	r24, 0x00	; 0
    209c:	90 e0       	ldi	r25, 0x00	; 0
    209e:	4c 01       	movw	r8, r24
		memset(ReportINData, 0, sizeof(ReportINData));

		bool ForceSend         = CALLBACK_HID_Device_CreateHIDReport(HIDInterfaceInfo, &ReportID, HID_REPORT_ITEM_In,
		                                                             ReportINData, &ReportINSize);
		bool StatesChanged     = false;
		bool IdlePeriodElapsed = (HIDInterfaceInfo->State.IdleCount && !(HIDInterfaceInfo->State.IdleMSRemaining));
    20a0:	02 c0       	rjmp	.+4      	; 0x20a6 <HID_Device_USBTask+0xce>
    20a2:	88 24       	eor	r8, r8
    20a4:	99 24       	eor	r9, r9
    20a6:	f7 01       	movw	r30, r14

		if (HIDInterfaceInfo->Config.PrevReportINBuffer != NULL)
    20a8:	c6 80       	ldd	r12, Z+6	; 0x06
    20aa:	d7 80       	ldd	r13, Z+7	; 0x07
    20ac:	c1 14       	cp	r12, r1
    20ae:	d1 04       	cpc	r13, r1
    20b0:	91 f0       	breq	.+36     	; 0x20d6 <HID_Device_USBTask+0xfe>
    20b2:	4a 81       	ldd	r20, Y+2	; 0x02
		{
			StatesChanged = (memcmp(ReportINData, HIDInterfaceInfo->Config.PrevReportINBuffer, ReportINSize) != 0);
    20b4:	5b 81       	ldd	r21, Y+3	; 0x03
    20b6:	8b 2d       	mov	r24, r11
    20b8:	9a 2d       	mov	r25, r10
    20ba:	b6 01       	movw	r22, r12
    20bc:	16 d2       	rcall	.+1068   	; 0x24ea <memcmp>
    20be:	01 e0       	ldi	r16, 0x01	; 1
    20c0:	00 97       	sbiw	r24, 0x00	; 0
    20c2:	09 f4       	brne	.+2      	; 0x20c6 <HID_Device_USBTask+0xee>
    20c4:	00 e0       	ldi	r16, 0x00	; 0
    20c6:	f7 01       	movw	r30, r14
    20c8:	40 85       	ldd	r20, Z+8	; 0x08
			memcpy(HIDInterfaceInfo->Config.PrevReportINBuffer, ReportINData, HIDInterfaceInfo->Config.PrevReportINBufferSize);
    20ca:	c6 01       	movw	r24, r12
    20cc:	6b 2d       	mov	r22, r11
    20ce:	7a 2d       	mov	r23, r10
    20d0:	50 e0       	ldi	r21, 0x00	; 0
    20d2:	18 d2       	rcall	.+1072   	; 0x2504 <memcpy>
    20d4:	01 c0       	rjmp	.+2      	; 0x20d8 <HID_Device_USBTask+0x100>
    20d6:	00 e0       	ldi	r16, 0x00	; 0
    20d8:	8a 81       	ldd	r24, Y+2	; 0x02
    20da:	9b 81       	ldd	r25, Y+3	; 0x03

		memset(ReportINData, 0, sizeof(ReportINData));

		bool ForceSend         = CALLBACK_HID_Device_CreateHIDReport(HIDInterfaceInfo, &ReportID, HID_REPORT_ITEM_In,
		                                                             ReportINData, &ReportINSize);
		bool StatesChanged     = false;
    20dc:	00 97       	sbiw	r24, 0x00	; 0
		{
			StatesChanged = (memcmp(ReportINData, HIDInterfaceInfo->Config.PrevReportINBuffer, ReportINSize) != 0);
			memcpy(HIDInterfaceInfo->Config.PrevReportINBuffer, ReportINData, HIDInterfaceInfo->Config.PrevReportINBufferSize);
		}

		if (ReportINSize && (ForceSend || StatesChanged || IdlePeriodElapsed))
    20de:	11 f1       	breq	.+68     	; 0x2124 <__stack+0x25>
    20e0:	11 23       	and	r17, r17
    20e2:	29 f4       	brne	.+10     	; 0x20ee <HID_Device_USBTask+0x116>
    20e4:	00 23       	and	r16, r16
    20e6:	19 f4       	brne	.+6      	; 0x20ee <HID_Device_USBTask+0x116>
    20e8:	81 14       	cp	r8, r1
    20ea:	91 04       	cpc	r9, r1
    20ec:	d9 f0       	breq	.+54     	; 0x2124 <__stack+0x25>
    20ee:	f7 01       	movw	r30, r14
    20f0:	84 85       	ldd	r24, Z+12	; 0x0c
    20f2:	95 85       	ldd	r25, Z+13	; 0x0d
		{
			HIDInterfaceInfo->State.IdleMSRemaining = HIDInterfaceInfo->State.IdleCount;
    20f4:	97 87       	std	Z+15, r25	; 0x0f
    20f6:	86 87       	std	Z+14, r24	; 0x0e
    20f8:	81 81       	ldd	r24, Z+1	; 0x01
    20fa:	8f 70       	andi	r24, 0x0F	; 15
    20fc:	80 93 e9 00 	sts	0x00E9, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    2100:	89 81       	ldd	r24, Y+1	; 0x01
    2102:	88 23       	and	r24, r24
    2104:	11 f0       	breq	.+4      	; 0x210a <__stack+0xb>

			Endpoint_SelectEndpoint(HIDInterfaceInfo->Config.ReportINEndpoint.Address);

			if (ReportID)
    2106:	80 93 f1 00 	sts	0x00F1, r24
    210a:	6a 81       	ldd	r22, Y+2	; 0x02
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    210c:	7b 81       	ldd	r23, Y+3	; 0x03
    210e:	8b 2d       	mov	r24, r11
			  Endpoint_Write_8(ReportID);

			Endpoint_Write_Stream_LE(ReportINData, ReportINSize, NULL);
    2110:	9a 2d       	mov	r25, r10
    2112:	40 e0       	ldi	r20, 0x00	; 0
    2114:	50 e0       	ldi	r21, 0x00	; 0
    2116:	0e 94 9d 03 	call	0x73a	; 0x73a <Endpoint_Write_Stream_LE>
    211a:	80 91 e8 00 	lds	r24, 0x00E8
    211e:	8e 77       	andi	r24, 0x7E	; 126
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    2120:	80 93 e8 00 	sts	0x00E8, r24
    2124:	80 91 e4 00 	lds	r24, 0x00E4
    2128:	90 91 e5 00 	lds	r25, 0x00E5
    212c:	f7 01       	movw	r30, r14
    212e:	93 87       	std	Z+11, r25	; 0x0b
    2130:	82 87       	std	Z+10, r24	; 0x0a

			Endpoint_ClearIN();
		}
		
		HIDInterfaceInfo->State.PrevFrameNum = USB_Device_GetFrameNumber();
    2132:	7d be       	out	0x3d, r7	; 61
    2134:	6e be       	out	0x3e, r6	; 62
    2136:	0f b6       	in	r0, 0x3f	; 63
    2138:	f8 94       	cli
    213a:	5e be       	out	0x3e, r5	; 62
	}
}
    213c:	0f be       	out	0x3f, r0	; 63
    213e:	4d be       	out	0x3d, r4	; 61
    2140:	0f 90       	pop	r0
    2142:	0f 90       	pop	r0
    2144:	0f 90       	pop	r0
    2146:	df 91       	pop	r29
    2148:	cf 91       	pop	r28
    214a:	1f 91       	pop	r17
    214c:	0f 91       	pop	r16
    214e:	ff 90       	pop	r15
    2150:	ef 90       	pop	r14
    2152:	df 90       	pop	r13
    2154:	cf 90       	pop	r12
    2156:	bf 90       	pop	r11
    2158:	af 90       	pop	r10
    215a:	9f 90       	pop	r9
    215c:	8f 90       	pop	r8
    215e:	7f 90       	pop	r7
    2160:	6f 90       	pop	r6
    2162:	5f 90       	pop	r5
    2164:	4f 90       	pop	r4
    2166:	08 95       	ret

00002168 <DCOMP_HID_Host_NextHIDInterface>:

	return HID_ENUMERROR_NoError;
}

static uint8_t DCOMP_HID_Host_NextHIDInterface(void* const CurrentDescriptor)
{
    2168:	fc 01       	movw	r30, r24
	USB_Descriptor_Header_t* Header = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Header_t);

	if (Header->Type == DTYPE_Interface)
    216a:	81 81       	ldd	r24, Z+1	; 0x01
    216c:	84 30       	cpi	r24, 0x04	; 4
    216e:	19 f4       	brne	.+6      	; 0x2176 <DCOMP_HID_Host_NextHIDInterface+0xe>
	{
		USB_Descriptor_Interface_t* Interface = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Interface_t);

		if (Interface->Class == HID_CSCP_HIDClass)
    2170:	85 81       	ldd	r24, Z+5	; 0x05
    2172:	83 30       	cpi	r24, 0x03	; 3
    2174:	11 f0       	breq	.+4      	; 0x217a <DCOMP_HID_Host_NextHIDInterface+0x12>
		  return DESCRIPTOR_SEARCH_Found;
	}

	return DESCRIPTOR_SEARCH_NotFound;
    2176:	82 e0       	ldi	r24, 0x02	; 2
    2178:	08 95       	ret
	if (Header->Type == DTYPE_Interface)
	{
		USB_Descriptor_Interface_t* Interface = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Interface_t);

		if (Interface->Class == HID_CSCP_HIDClass)
		  return DESCRIPTOR_SEARCH_Found;
    217a:	80 e0       	ldi	r24, 0x00	; 0
	}

	return DESCRIPTOR_SEARCH_NotFound;
}
    217c:	08 95       	ret

0000217e <DCOMP_HID_Host_NextHIDDescriptor>:

static uint8_t DCOMP_HID_Host_NextHIDDescriptor(void* const CurrentDescriptor)
{
	USB_Descriptor_Header_t* Header = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Header_t);

	if (Header->Type == HID_DTYPE_HID)
    217e:	fc 01       	movw	r30, r24
    2180:	81 81       	ldd	r24, Z+1	; 0x01
    2182:	81 32       	cpi	r24, 0x21	; 33
    2184:	21 f0       	breq	.+8      	; 0x218e <DCOMP_HID_Host_NextHIDDescriptor+0x10>
	  return DESCRIPTOR_SEARCH_Found;
	else if (Header->Type == DTYPE_Interface)
    2186:	84 30       	cpi	r24, 0x04	; 4
    2188:	21 f4       	brne	.+8      	; 0x2192 <DCOMP_HID_Host_NextHIDDescriptor+0x14>
	  return DESCRIPTOR_SEARCH_Fail;
    218a:	81 e0       	ldi	r24, 0x01	; 1
    218c:	08 95       	ret
static uint8_t DCOMP_HID_Host_NextHIDDescriptor(void* const CurrentDescriptor)
{
	USB_Descriptor_Header_t* Header = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Header_t);

	if (Header->Type == HID_DTYPE_HID)
	  return DESCRIPTOR_SEARCH_Found;
    218e:	80 e0       	ldi	r24, 0x00	; 0
    2190:	08 95       	ret
	else if (Header->Type == DTYPE_Interface)
	  return DESCRIPTOR_SEARCH_Fail;
	else
	  return DESCRIPTOR_SEARCH_NotFound;
    2192:	82 e0       	ldi	r24, 0x02	; 2
}
    2194:	08 95       	ret

00002196 <DCOMP_HID_Host_NextHIDInterfaceEndpoint>:

static uint8_t DCOMP_HID_Host_NextHIDInterfaceEndpoint(void* const CurrentDescriptor)
{
    2196:	fc 01       	movw	r30, r24
	USB_Descriptor_Header_t* Header = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Header_t);

	if (Header->Type == DTYPE_Endpoint)
    2198:	81 81       	ldd	r24, Z+1	; 0x01
    219a:	85 30       	cpi	r24, 0x05	; 5
    219c:	31 f4       	brne	.+12     	; 0x21aa <DCOMP_HID_Host_NextHIDInterfaceEndpoint+0x14>
	{
		USB_Descriptor_Endpoint_t* Endpoint = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Endpoint_t);

		if (!(Pipe_IsEndpointBound(Endpoint->EndpointAddress)))
    219e:	82 81       	ldd	r24, Z+2	; 0x02
    21a0:	0e 94 7e 08 	call	0x10fc	; 0x10fc <Pipe_IsEndpointBound>
    21a4:	88 23       	and	r24, r24
    21a6:	19 f4       	brne	.+6      	; 0x21ae <DCOMP_HID_Host_NextHIDInterfaceEndpoint+0x18>
    21a8:	04 c0       	rjmp	.+8      	; 0x21b2 <DCOMP_HID_Host_NextHIDInterfaceEndpoint+0x1c>
		  return DESCRIPTOR_SEARCH_Found;
	}
	else if (Header->Type == DTYPE_Interface)
    21aa:	84 30       	cpi	r24, 0x04	; 4
    21ac:	21 f0       	breq	.+8      	; 0x21b6 <DCOMP_HID_Host_NextHIDInterfaceEndpoint+0x20>
	{
		return DESCRIPTOR_SEARCH_Fail;
	}

	return DESCRIPTOR_SEARCH_NotFound;
    21ae:	82 e0       	ldi	r24, 0x02	; 2
    21b0:	08 95       	ret
	if (Header->Type == DTYPE_Endpoint)
	{
		USB_Descriptor_Endpoint_t* Endpoint = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Endpoint_t);

		if (!(Pipe_IsEndpointBound(Endpoint->EndpointAddress)))
		  return DESCRIPTOR_SEARCH_Found;
    21b2:	80 e0       	ldi	r24, 0x00	; 0
    21b4:	08 95       	ret
	}
	else if (Header->Type == DTYPE_Interface)
	{
		return DESCRIPTOR_SEARCH_Fail;
    21b6:	81 e0       	ldi	r24, 0x01	; 1
	}

	return DESCRIPTOR_SEARCH_NotFound;
}
    21b8:	08 95       	ret

000021ba <HID_Host_ConfigurePipes>:
#include "HIDClassHost.h"

uint8_t HID_Host_ConfigurePipes(USB_ClassInfo_HID_Host_t* const HIDInterfaceInfo,
                                uint16_t ConfigDescriptorSize,
                                void* ConfigDescriptorData)
{
    21ba:	8f 92       	push	r8
    21bc:	9f 92       	push	r9
    21be:	af 92       	push	r10
    21c0:	bf 92       	push	r11
    21c2:	cf 92       	push	r12
    21c4:	df 92       	push	r13
    21c6:	ef 92       	push	r14
    21c8:	ff 92       	push	r15
    21ca:	0f 93       	push	r16
    21cc:	1f 93       	push	r17
    21ce:	cf 93       	push	r28
    21d0:	df 93       	push	r29
    21d2:	00 d0       	rcall	.+0      	; 0x21d4 <HID_Host_ConfigurePipes+0x1a>
    21d4:	00 d0       	rcall	.+0      	; 0x21d6 <HID_Host_ConfigurePipes+0x1c>
    21d6:	cd b7       	in	r28, 0x3d	; 61
    21d8:	de b7       	in	r29, 0x3e	; 62
    21da:	8c 01       	movw	r16, r24
    21dc:	7a 83       	std	Y+2, r23	; 0x02
    21de:	69 83       	std	Y+1, r22	; 0x01
    21e0:	5c 83       	std	Y+4, r21	; 0x04
    21e2:	4b 83       	std	Y+3, r20	; 0x03
	USB_Descriptor_Endpoint_t*  DataINEndpoint  = NULL;
	USB_Descriptor_Endpoint_t*  DataOUTEndpoint = NULL;
	USB_Descriptor_Interface_t* HIDInterface    = NULL;
	USB_HID_Descriptor_HID_t*   HIDDescriptor   = NULL;

	memset(&HIDInterfaceInfo->State, 0x00, sizeof(HIDInterfaceInfo->State));
    21e4:	0f 96       	adiw	r24, 0x0f	; 15
    21e6:	fc 01       	movw	r30, r24
    21e8:	88 e0       	ldi	r24, 0x08	; 8
    21ea:	df 01       	movw	r26, r30
    21ec:	1d 92       	st	X+, r1
    21ee:	8a 95       	dec	r24
    21f0:	e9 f7       	brne	.-6      	; 0x21ec <HID_Host_ConfigurePipes+0x32>

	if (DESCRIPTOR_TYPE(ConfigDescriptorData) != DTYPE_Configuration)
    21f2:	eb 81       	ldd	r30, Y+3	; 0x03
    21f4:	fc 81       	ldd	r31, Y+4	; 0x04
    21f6:	81 81       	ldd	r24, Z+1	; 0x01
    21f8:	82 30       	cpi	r24, 0x02	; 2
    21fa:	09 f0       	breq	.+2      	; 0x21fe <HID_Host_ConfigurePipes+0x44>
    21fc:	99 c0       	rjmp	.+306    	; 0x2330 <HID_Host_ConfigurePipes+0x176>
    21fe:	88 24       	eor	r8, r8
    2200:	99 24       	eor	r9, r9
    2202:	aa 24       	eor	r10, r10
    2204:	bb 24       	eor	r11, r11
    2206:	ee 24       	eor	r14, r14
    2208:	ff 24       	eor	r15, r15
    220a:	cc 24       	eor	r12, r12
    220c:	dd 24       	eor	r13, r13
	  return HID_ENUMERROR_InvalidConfigDescriptor;

	while (!(DataINEndpoint) || !(DataOUTEndpoint))
	{
		if (!(HIDInterface) ||
    220e:	a1 14       	cp	r10, r1
    2210:	b1 04       	cpc	r11, r1
    2212:	51 f0       	breq	.+20     	; 0x2228 <HID_Host_ConfigurePipes+0x6e>
		    USB_GetNextDescriptorComp(&ConfigDescriptorSize, &ConfigDescriptorData,
    2214:	ce 01       	movw	r24, r28
    2216:	01 96       	adiw	r24, 0x01	; 1
    2218:	be 01       	movw	r22, r28
    221a:	6d 5f       	subi	r22, 0xFD	; 253
    221c:	7f 4f       	sbci	r23, 0xFF	; 255
    221e:	4b ec       	ldi	r20, 0xCB	; 203
    2220:	50 e1       	ldi	r21, 0x10	; 16
    2222:	58 da       	rcall	.-2896   	; 0x16d4 <USB_GetNextDescriptorComp>
    2224:	88 23       	and	r24, r24
	if (DESCRIPTOR_TYPE(ConfigDescriptorData) != DTYPE_Configuration)
	  return HID_ENUMERROR_InvalidConfigDescriptor;

	while (!(DataINEndpoint) || !(DataOUTEndpoint))
	{
		if (!(HIDInterface) ||
    2226:	51 f1       	breq	.+84     	; 0x227c <HID_Host_ConfigurePipes+0xc2>
    2228:	c1 14       	cp	r12, r1
		    USB_GetNextDescriptorComp(&ConfigDescriptorSize, &ConfigDescriptorData,
		                              DCOMP_HID_Host_NextHIDInterfaceEndpoint) != DESCRIPTOR_SEARCH_COMP_Found)
		{
			if (DataINEndpoint)
    222a:	d1 04       	cpc	r13, r1
    222c:	b9 f5       	brne	.+110    	; 0x229c <HID_Host_ConfigurePipes+0xe2>
    222e:	ce 01       	movw	r24, r28
			  break;

			do
			{
				if (USB_GetNextDescriptorComp(&ConfigDescriptorSize, &ConfigDescriptorData,
    2230:	01 96       	adiw	r24, 0x01	; 1
    2232:	be 01       	movw	r22, r28
    2234:	6d 5f       	subi	r22, 0xFD	; 253
    2236:	7f 4f       	sbci	r23, 0xFF	; 255
    2238:	44 eb       	ldi	r20, 0xB4	; 180
    223a:	50 e1       	ldi	r21, 0x10	; 16
    223c:	4b da       	rcall	.-2922   	; 0x16d4 <USB_GetNextDescriptorComp>
    223e:	88 23       	and	r24, r24
    2240:	09 f0       	breq	.+2      	; 0x2244 <HID_Host_ConfigurePipes+0x8a>
    2242:	78 c0       	rjmp	.+240    	; 0x2334 <HID_Host_ConfigurePipes+0x17a>
    2244:	ab 80       	ldd	r10, Y+3	; 0x03
    2246:	bc 80       	ldd	r11, Y+4	; 0x04
				                              DCOMP_HID_Host_NextHIDInterface) != DESCRIPTOR_SEARCH_COMP_Found)
				{
					return HID_ENUMERROR_NoCompatibleInterfaceFound;
				}

				HIDInterface = DESCRIPTOR_PCAST(ConfigDescriptorData, USB_Descriptor_Interface_t);
    2248:	f8 01       	movw	r30, r16
    224a:	84 85       	ldd	r24, Z+12	; 0x0c
			} while (HIDInterfaceInfo->Config.HIDInterfaceProtocol &&
    224c:	88 23       	and	r24, r24
    224e:	31 f0       	breq	.+12     	; 0x225c <HID_Host_ConfigurePipes+0xa2>
					 (HIDInterface->Protocol != HIDInterfaceInfo->Config.HIDInterfaceProtocol));
    2250:	d5 01       	movw	r26, r10
    2252:	17 96       	adiw	r26, 0x07	; 7
				{
					return HID_ENUMERROR_NoCompatibleInterfaceFound;
				}

				HIDInterface = DESCRIPTOR_PCAST(ConfigDescriptorData, USB_Descriptor_Interface_t);
			} while (HIDInterfaceInfo->Config.HIDInterfaceProtocol &&
    2254:	9c 91       	ld	r25, X
    2256:	17 97       	sbiw	r26, 0x07	; 7
    2258:	98 17       	cp	r25, r24
    225a:	49 f7       	brne	.-46     	; 0x222e <HID_Host_ConfigurePipes+0x74>
    225c:	ce 01       	movw	r24, r28
    225e:	01 96       	adiw	r24, 0x01	; 1
					 (HIDInterface->Protocol != HIDInterfaceInfo->Config.HIDInterfaceProtocol));

			if (USB_GetNextDescriptorComp(&ConfigDescriptorSize, &ConfigDescriptorData,
    2260:	be 01       	movw	r22, r28
    2262:	6d 5f       	subi	r22, 0xFD	; 253
    2264:	7f 4f       	sbci	r23, 0xFF	; 255
    2266:	4f eb       	ldi	r20, 0xBF	; 191
    2268:	50 e1       	ldi	r21, 0x10	; 16
    226a:	34 da       	rcall	.-2968   	; 0x16d4 <USB_GetNextDescriptorComp>
    226c:	88 23       	and	r24, r24
    226e:	09 f0       	breq	.+2      	; 0x2272 <HID_Host_ConfigurePipes+0xb8>
    2270:	61 c0       	rjmp	.+194    	; 0x2334 <HID_Host_ConfigurePipes+0x17a>
    2272:	8b 80       	ldd	r8, Y+3	; 0x03
    2274:	9c 80       	ldd	r9, Y+4	; 0x04
    2276:	ee 24       	eor	r14, r14
			                              DCOMP_HID_Host_NextHIDDescriptor) != DESCRIPTOR_SEARCH_COMP_Found)
			{
				return HID_ENUMERROR_NoCompatibleInterfaceFound;
			}

			HIDDescriptor = DESCRIPTOR_PCAST(ConfigDescriptorData, USB_HID_Descriptor_HID_t);
    2278:	ff 24       	eor	r15, r15
    227a:	c9 cf       	rjmp	.-110    	; 0x220e <HID_Host_ConfigurePipes+0x54>

			DataINEndpoint  = NULL;
			DataOUTEndpoint = NULL;
    227c:	eb 81       	ldd	r30, Y+3	; 0x03
    227e:	fc 81       	ldd	r31, Y+4	; 0x04
    2280:	82 81       	ldd	r24, Z+2	; 0x02

			continue;
		}

		USB_Descriptor_Endpoint_t* EndpointData = DESCRIPTOR_PCAST(ConfigDescriptorData, USB_Descriptor_Endpoint_t);
    2282:	87 ff       	sbrs	r24, 7
    2284:	02 c0       	rjmp	.+4      	; 0x228a <HID_Host_ConfigurePipes+0xd0>

		if ((EndpointData->EndpointAddress & ENDPOINT_DIR_MASK) == ENDPOINT_DIR_IN)
    2286:	6f 01       	movw	r12, r30
    2288:	01 c0       	rjmp	.+2      	; 0x228c <HID_Host_ConfigurePipes+0xd2>
    228a:	7f 01       	movw	r14, r30
		  DataINEndpoint  = EndpointData;
    228c:	c1 14       	cp	r12, r1
    228e:	d1 04       	cpc	r13, r1
		else
		  DataOUTEndpoint = EndpointData;
    2290:	09 f4       	brne	.+2      	; 0x2294 <HID_Host_ConfigurePipes+0xda>
	memset(&HIDInterfaceInfo->State, 0x00, sizeof(HIDInterfaceInfo->State));

	if (DESCRIPTOR_TYPE(ConfigDescriptorData) != DTYPE_Configuration)
	  return HID_ENUMERROR_InvalidConfigDescriptor;

	while (!(DataINEndpoint) || !(DataOUTEndpoint))
    2292:	bd cf       	rjmp	.-134    	; 0x220e <HID_Host_ConfigurePipes+0x54>
    2294:	e1 14       	cp	r14, r1
    2296:	f1 04       	cpc	r15, r1
    2298:	09 f4       	brne	.+2      	; 0x229c <HID_Host_ConfigurePipes+0xe2>
    229a:	b9 cf       	rjmp	.-142    	; 0x220e <HID_Host_ConfigurePipes+0x54>
    229c:	f6 01       	movw	r30, r12
    229e:	84 81       	ldd	r24, Z+4	; 0x04
    22a0:	95 81       	ldd	r25, Z+5	; 0x05
		  DataINEndpoint  = EndpointData;
		else
		  DataOUTEndpoint = EndpointData;
	}

	HIDInterfaceInfo->Config.DataINPipe.Size  = le16_to_cpu(DataINEndpoint->EndpointSize);
    22a2:	d8 01       	movw	r26, r16
    22a4:	12 96       	adiw	r26, 0x02	; 2
    22a6:	9c 93       	st	X, r25
    22a8:	8e 93       	st	-X, r24
    22aa:	11 97       	sbiw	r26, 0x01	; 1
    22ac:	82 81       	ldd	r24, Z+2	; 0x02
    22ae:	13 96       	adiw	r26, 0x03	; 3
    22b0:	8c 93       	st	X, r24
	HIDInterfaceInfo->Config.DataINPipe.EndpointAddress = DataINEndpoint->EndpointAddress;
    22b2:	13 97       	sbiw	r26, 0x03	; 3
    22b4:	83 e0       	ldi	r24, 0x03	; 3
    22b6:	c8 2e       	mov	r12, r24
    22b8:	14 96       	adiw	r26, 0x04	; 4
	HIDInterfaceInfo->Config.DataINPipe.Type  = EP_TYPE_INTERRUPT;
    22ba:	cc 92       	st	X, r12
    22bc:	c8 01       	movw	r24, r16
    22be:	61 e0       	ldi	r22, 0x01	; 1
    22c0:	0e 94 49 08 	call	0x1092	; 0x1092 <Pipe_ConfigurePipeTable>

	if (!(Pipe_ConfigurePipeTable(&HIDInterfaceInfo->Config.DataINPipe, 1)))
    22c4:	88 23       	and	r24, r24
    22c6:	c1 f1       	breq	.+112    	; 0x2338 <HID_Host_ConfigurePipes+0x17e>
    22c8:	e1 14       	cp	r14, r1
    22ca:	f1 04       	cpc	r15, r1
    22cc:	a9 f0       	breq	.+42     	; 0x22f8 <HID_Host_ConfigurePipes+0x13e>
	  return false;

	if (DataOUTEndpoint)
    22ce:	f7 01       	movw	r30, r14
    22d0:	84 81       	ldd	r24, Z+4	; 0x04
    22d2:	95 81       	ldd	r25, Z+5	; 0x05
	{
		HIDInterfaceInfo->Config.DataOUTPipe.Size = le16_to_cpu(DataOUTEndpoint->EndpointSize);
    22d4:	d8 01       	movw	r26, r16
    22d6:	18 96       	adiw	r26, 0x08	; 8
    22d8:	9c 93       	st	X, r25
    22da:	8e 93       	st	-X, r24
    22dc:	17 97       	sbiw	r26, 0x07	; 7
    22de:	82 81       	ldd	r24, Z+2	; 0x02
    22e0:	19 96       	adiw	r26, 0x09	; 9
    22e2:	8c 93       	st	X, r24
		HIDInterfaceInfo->Config.DataOUTPipe.EndpointAddress = DataOUTEndpoint->EndpointAddress;
    22e4:	19 97       	sbiw	r26, 0x09	; 9
    22e6:	1a 96       	adiw	r26, 0x0a	; 10
    22e8:	cc 92       	st	X, r12
    22ea:	c8 01       	movw	r24, r16
		HIDInterfaceInfo->Config.DataOUTPipe.Type = EP_TYPE_INTERRUPT;
    22ec:	06 96       	adiw	r24, 0x06	; 6
    22ee:	61 e0       	ldi	r22, 0x01	; 1

		if (!(Pipe_ConfigurePipeTable(&HIDInterfaceInfo->Config.DataOUTPipe, 1)))
    22f0:	0e 94 49 08 	call	0x1092	; 0x1092 <Pipe_ConfigurePipeTable>
    22f4:	88 23       	and	r24, r24
    22f6:	01 f1       	breq	.+64     	; 0x2338 <HID_Host_ConfigurePipes+0x17e>
    22f8:	f5 01       	movw	r30, r10
    22fa:	82 81       	ldd	r24, Z+2	; 0x02
    22fc:	d8 01       	movw	r26, r16
		  return false;
	}

	HIDInterfaceInfo->State.InterfaceNumber      = HIDInterface->InterfaceNumber;
    22fe:	50 96       	adiw	r26, 0x10	; 16
    2300:	8c 93       	st	X, r24
    2302:	50 97       	sbiw	r26, 0x10	; 16
    2304:	f4 01       	movw	r30, r8
    2306:	87 81       	ldd	r24, Z+7	; 0x07
    2308:	90 85       	ldd	r25, Z+8	; 0x08
	HIDInterfaceInfo->State.HIDReportSize        = LE16_TO_CPU(HIDDescriptor->HIDReportLength);
    230a:	55 96       	adiw	r26, 0x15	; 21
    230c:	9c 93       	st	X, r25
    230e:	8e 93       	st	-X, r24
    2310:	54 97       	sbiw	r26, 0x14	; 20
    2312:	81 e0       	ldi	r24, 0x01	; 1
    2314:	d5 01       	movw	r26, r10
    2316:	16 96       	adiw	r26, 0x06	; 6
	HIDInterfaceInfo->State.SupportsBootProtocol = (HIDInterface->SubClass != HID_CSCP_NonBootProtocol);
    2318:	9c 91       	ld	r25, X
    231a:	16 97       	sbiw	r26, 0x06	; 6
    231c:	99 23       	and	r25, r25
    231e:	09 f4       	brne	.+2      	; 0x2322 <HID_Host_ConfigurePipes+0x168>
    2320:	80 e0       	ldi	r24, 0x00	; 0
    2322:	f8 01       	movw	r30, r16
    2324:	81 8b       	std	Z+17, r24	; 0x11
    2326:	88 e0       	ldi	r24, 0x08	; 8
    2328:	86 8b       	std	Z+22, r24	; 0x16
    232a:	81 e0       	ldi	r24, 0x01	; 1
	HIDInterfaceInfo->State.LargestReportSize    = 8;
    232c:	87 87       	std	Z+15, r24	; 0x0f
    232e:	04 c0       	rjmp	.+8      	; 0x2338 <HID_Host_ConfigurePipes+0x17e>
	HIDInterfaceInfo->State.IsActive             = true;
    2330:	81 e0       	ldi	r24, 0x01	; 1
    2332:	03 c0       	rjmp	.+6      	; 0x233a <HID_Host_ConfigurePipes+0x180>
    2334:	82 e0       	ldi	r24, 0x02	; 2
	USB_HID_Descriptor_HID_t*   HIDDescriptor   = NULL;

	memset(&HIDInterfaceInfo->State, 0x00, sizeof(HIDInterfaceInfo->State));

	if (DESCRIPTOR_TYPE(ConfigDescriptorData) != DTYPE_Configuration)
	  return HID_ENUMERROR_InvalidConfigDescriptor;
    2336:	01 c0       	rjmp	.+2      	; 0x233a <HID_Host_ConfigurePipes+0x180>
    2338:	80 e0       	ldi	r24, 0x00	; 0
					 (HIDInterface->Protocol != HIDInterfaceInfo->Config.HIDInterfaceProtocol));

			if (USB_GetNextDescriptorComp(&ConfigDescriptorSize, &ConfigDescriptorData,
			                              DCOMP_HID_Host_NextHIDDescriptor) != DESCRIPTOR_SEARCH_COMP_Found)
			{
				return HID_ENUMERROR_NoCompatibleInterfaceFound;
    233a:	0f 90       	pop	r0
    233c:	0f 90       	pop	r0
		HIDInterfaceInfo->Config.DataOUTPipe.Size = le16_to_cpu(DataOUTEndpoint->EndpointSize);
		HIDInterfaceInfo->Config.DataOUTPipe.EndpointAddress = DataOUTEndpoint->EndpointAddress;
		HIDInterfaceInfo->Config.DataOUTPipe.Type = EP_TYPE_INTERRUPT;

		if (!(Pipe_ConfigurePipeTable(&HIDInterfaceInfo->Config.DataOUTPipe, 1)))
		  return false;
    233e:	0f 90       	pop	r0
	HIDInterfaceInfo->State.SupportsBootProtocol = (HIDInterface->SubClass != HID_CSCP_NonBootProtocol);
	HIDInterfaceInfo->State.LargestReportSize    = 8;
	HIDInterfaceInfo->State.IsActive             = true;

	return HID_ENUMERROR_NoError;
}
    2340:	0f 90       	pop	r0
    2342:	df 91       	pop	r29
    2344:	cf 91       	pop	r28
    2346:	1f 91       	pop	r17
    2348:	0f 91       	pop	r16
    234a:	ff 90       	pop	r15
    234c:	ef 90       	pop	r14
    234e:	df 90       	pop	r13
    2350:	cf 90       	pop	r12
    2352:	bf 90       	pop	r11
    2354:	af 90       	pop	r10
    2356:	9f 90       	pop	r9
    2358:	8f 90       	pop	r8
    235a:	08 95       	ret

0000235c <HID_Host_ReceiveReport>:
    235c:	cf 93       	push	r28
    235e:	df 93       	push	r29
    2360:	fc 01       	movw	r30, r24
#endif

uint8_t HID_Host_ReceiveReport(USB_ClassInfo_HID_Host_t* const HIDInterfaceInfo,
                               void* Buffer)
{
	if ((USB_HostState != HOST_STATE_Configured) || !(HIDInterfaceInfo->State.IsActive))
    2362:	80 91 21 02 	lds	r24, 0x0221
    2366:	8b 30       	cpi	r24, 0x0B	; 11
    2368:	e9 f5       	brne	.+122    	; 0x23e4 <HID_Host_ReceiveReport+0x88>
    236a:	87 85       	ldd	r24, Z+15	; 0x0f
    236c:	88 23       	and	r24, r24
    236e:	d1 f1       	breq	.+116    	; 0x23e4 <HID_Host_ReceiveReport+0x88>
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
    2370:	80 81       	ld	r24, Z
    2372:	8f 70       	andi	r24, 0x0F	; 15
    2374:	80 93 a7 00 	sts	0x00A7, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    2378:	80 91 a9 00 	lds	r24, 0x00A9
    237c:	8f 7b       	andi	r24, 0xBF	; 191
    237e:	80 93 a9 00 	sts	0x00A9, r24

	uint16_t ReportSize;
	uint8_t* BufferPos = Buffer;

#if !defined(HID_HOST_BOOT_PROTOCOL_ONLY)
	if (!(HIDInterfaceInfo->State.UsingBootProtocol))
    2382:	83 89       	ldd	r24, Z+19	; 0x13
    2384:	88 23       	and	r24, r24
    2386:	b1 f4       	brne	.+44     	; 0x23b4 <HID_Host_ReceiveReport+0x58>
	{
		uint8_t ReportID = 0;

		if (HIDInterfaceInfo->Config.HIDParserData->UsingReportIDs)
    2388:	a5 85       	ldd	r26, Z+13	; 0x0d
    238a:	b6 85       	ldd	r27, Z+14	; 0x0e
    238c:	a8 52       	subi	r26, 0x28	; 40
    238e:	bc 4f       	sbci	r27, 0xFC	; 252
    2390:	8c 91       	ld	r24, X
    2392:	88 23       	and	r24, r24
    2394:	29 f0       	breq	.+10     	; 0x23a0 <HID_Host_ReceiveReport+0x44>
			 *  \return Next byte in the currently selected pipe's FIFO buffer.
			 */
			static inline uint8_t Pipe_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_Read_8(void)
			{
				return UPDATX;
    2396:	20 91 af 00 	lds	r18, 0x00AF
		{
			ReportID = Pipe_Read_8();
			*(BufferPos++) = ReportID;
    239a:	eb 01       	movw	r28, r22
    239c:	29 93       	st	Y+, r18
    239e:	02 c0       	rjmp	.+4      	; 0x23a4 <HID_Host_ReceiveReport+0x48>

	Pipe_SelectPipe(HIDInterfaceInfo->Config.DataINPipe.Address);
	Pipe_Unfreeze();

	uint16_t ReportSize;
	uint8_t* BufferPos = Buffer;
    23a0:	eb 01       	movw	r28, r22

#if !defined(HID_HOST_BOOT_PROTOCOL_ONLY)
	if (!(HIDInterfaceInfo->State.UsingBootProtocol))
	{
		uint8_t ReportID = 0;
    23a2:	20 e0       	ldi	r18, 0x00	; 0
		{
			ReportID = Pipe_Read_8();
			*(BufferPos++) = ReportID;
		}

		ReportSize = USB_GetHIDReportSize(HIDInterfaceInfo->Config.HIDParserData, ReportID, HID_REPORT_ITEM_In);
    23a4:	85 85       	ldd	r24, Z+13	; 0x0d
    23a6:	96 85       	ldd	r25, Z+14	; 0x0e
    23a8:	62 2f       	mov	r22, r18
    23aa:	40 e0       	ldi	r20, 0x00	; 0
    23ac:	0e 94 6d 03 	call	0x6da	; 0x6da <USB_GetHIDReportSize>
    23b0:	9c 01       	movw	r18, r24
    23b2:	05 c0       	rjmp	.+10     	; 0x23be <HID_Host_ReceiveReport+0x62>
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
    23b4:	20 91 f6 00 	lds	r18, 0x00F6
    23b8:	30 91 f7 00 	lds	r19, 0x00F7

	Pipe_SelectPipe(HIDInterfaceInfo->Config.DataINPipe.Address);
	Pipe_Unfreeze();

	uint16_t ReportSize;
	uint8_t* BufferPos = Buffer;
    23bc:	eb 01       	movw	r28, r22
#endif
	{
		ReportSize = Pipe_BytesInPipe();
	}

	if ((ErrorCode = Pipe_Read_Stream_LE(BufferPos, ReportSize, NULL)) != PIPE_RWSTREAM_NoError)
    23be:	ce 01       	movw	r24, r28
    23c0:	b9 01       	movw	r22, r18
    23c2:	40 e0       	ldi	r20, 0x00	; 0
    23c4:	50 e0       	ldi	r21, 0x00	; 0
    23c6:	0e 94 8d 07 	call	0xf1a	; 0xf1a <Pipe_Read_Stream_LE>
    23ca:	88 23       	and	r24, r24
    23cc:	61 f4       	brne	.+24     	; 0x23e6 <HID_Host_ReceiveReport+0x8a>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
    23ce:	90 91 a6 00 	lds	r25, 0x00A6
    23d2:	9e 77       	andi	r25, 0x7E	; 126
    23d4:	90 93 a6 00 	sts	0x00A6, r25

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    23d8:	90 91 a9 00 	lds	r25, 0x00A9
    23dc:	90 64       	ori	r25, 0x40	; 64
    23de:	90 93 a9 00 	sts	0x00A9, r25
	  return ErrorCode;

	Pipe_ClearIN();
	Pipe_Freeze();

	return PIPE_RWSTREAM_NoError;
    23e2:	01 c0       	rjmp	.+2      	; 0x23e6 <HID_Host_ReceiveReport+0x8a>

uint8_t HID_Host_ReceiveReport(USB_ClassInfo_HID_Host_t* const HIDInterfaceInfo,
                               void* Buffer)
{
	if ((USB_HostState != HOST_STATE_Configured) || !(HIDInterfaceInfo->State.IsActive))
	  return PIPE_READYWAIT_DeviceDisconnected;
    23e4:	82 e0       	ldi	r24, 0x02	; 2

	Pipe_ClearIN();
	Pipe_Freeze();

	return PIPE_RWSTREAM_NoError;
}
    23e6:	df 91       	pop	r29
    23e8:	cf 91       	pop	r28
    23ea:	08 95       	ret

000023ec <HID_Host_IsReportReceived>:
		return USB_Host_SendControlRequest(Buffer);
	}
}

bool HID_Host_IsReportReceived(USB_ClassInfo_HID_Host_t* const HIDInterfaceInfo)
{
    23ec:	fc 01       	movw	r30, r24
	if ((USB_HostState != HOST_STATE_Configured) || !(HIDInterfaceInfo->State.IsActive))
    23ee:	80 91 21 02 	lds	r24, 0x0221
    23f2:	8b 30       	cpi	r24, 0x0B	; 11
    23f4:	a9 f4       	brne	.+42     	; 0x2420 <HID_Host_IsReportReceived+0x34>
    23f6:	87 85       	ldd	r24, Z+15	; 0x0f
    23f8:	88 23       	and	r24, r24
    23fa:	a1 f0       	breq	.+40     	; 0x2424 <HID_Host_IsReportReceived+0x38>
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
    23fc:	80 81       	ld	r24, Z
    23fe:	8f 70       	andi	r24, 0x0F	; 15
    2400:	80 93 a7 00 	sts	0x00A7, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    2404:	80 91 a9 00 	lds	r24, 0x00A9
    2408:	8f 7b       	andi	r24, 0xBF	; 191
    240a:	80 93 a9 00 	sts	0x00A9, r24
			 *  \return Boolean \c true if the current pipe has received an IN packet, \c false otherwise.
			 */
			static inline bool Pipe_IsINReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsINReceived(void)
			{
				return ((UPINTX & (1 << RXINI)) ? true : false);
    240e:	80 91 a6 00 	lds	r24, 0x00A6
    2412:	81 70       	andi	r24, 0x01	; 1

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    2414:	90 91 a9 00 	lds	r25, 0x00A9
    2418:	90 64       	ori	r25, 0x40	; 64
    241a:	90 93 a9 00 	sts	0x00A9, r25

	ReportReceived = Pipe_IsINReceived();

	Pipe_Freeze();

	return ReportReceived;
    241e:	08 95       	ret
}

bool HID_Host_IsReportReceived(USB_ClassInfo_HID_Host_t* const HIDInterfaceInfo)
{
	if ((USB_HostState != HOST_STATE_Configured) || !(HIDInterfaceInfo->State.IsActive))
	  return false;
    2420:	80 e0       	ldi	r24, 0x00	; 0
    2422:	08 95       	ret
    2424:	80 e0       	ldi	r24, 0x00	; 0
	ReportReceived = Pipe_IsINReceived();

	Pipe_Freeze();

	return ReportReceived;
}
    2426:	08 95       	ret

00002428 <HID_Host_SetBootProtocol>:

uint8_t HID_Host_SetBootProtocol(USB_ClassInfo_HID_Host_t* const HIDInterfaceInfo)
{
    2428:	cf 93       	push	r28
    242a:	df 93       	push	r29
    242c:	ec 01       	movw	r28, r24
	uint8_t ErrorCode;

	if (!(HIDInterfaceInfo->State.SupportsBootProtocol))
    242e:	89 89       	ldd	r24, Y+17	; 0x11
    2430:	88 23       	and	r24, r24
    2432:	f9 f0       	breq	.+62     	; 0x2472 <HID_Host_SetBootProtocol+0x4a>
	  return HID_ERROR_LOGICAL;

	USB_ControlRequest = (USB_Request_Header_t)
    2434:	88 89       	ldd	r24, Y+16	; 0x10
    2436:	91 e2       	ldi	r25, 0x21	; 33
    2438:	90 93 19 02 	sts	0x0219, r25
    243c:	9b e0       	ldi	r25, 0x0B	; 11
    243e:	90 93 1a 02 	sts	0x021A, r25
    2442:	10 92 1c 02 	sts	0x021C, r1
    2446:	10 92 1b 02 	sts	0x021B, r1
    244a:	80 93 1d 02 	sts	0x021D, r24
    244e:	10 92 1e 02 	sts	0x021E, r1
    2452:	10 92 20 02 	sts	0x0220, r1
    2456:	10 92 1f 02 	sts	0x021F, r1
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
    245a:	10 92 a7 00 	sts	0x00A7, r1
			.wLength       = 0,
		};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	if ((ErrorCode = USB_Host_SendControlRequest(NULL)) != HOST_SENDCONTROL_Successful)
    245e:	80 e0       	ldi	r24, 0x00	; 0
    2460:	90 e0       	ldi	r25, 0x00	; 0
    2462:	13 db       	rcall	.-2522   	; 0x1a8a <USB_Host_SendControlRequest>
    2464:	88 23       	and	r24, r24
    2466:	31 f4       	brne	.+12     	; 0x2474 <HID_Host_SetBootProtocol+0x4c>
    2468:	98 e0       	ldi	r25, 0x08	; 8
	  return ErrorCode;

	HIDInterfaceInfo->State.LargestReportSize = 8;
    246a:	9e 8b       	std	Y+22, r25	; 0x16
    246c:	91 e0       	ldi	r25, 0x01	; 1
	HIDInterfaceInfo->State.UsingBootProtocol = true;
    246e:	9b 8b       	std	Y+19, r25	; 0x13
    2470:	01 c0       	rjmp	.+2      	; 0x2474 <HID_Host_SetBootProtocol+0x4c>

	return HOST_SENDCONTROL_Successful;
    2472:	80 e8       	ldi	r24, 0x80	; 128
uint8_t HID_Host_SetBootProtocol(USB_ClassInfo_HID_Host_t* const HIDInterfaceInfo)
{
	uint8_t ErrorCode;

	if (!(HIDInterfaceInfo->State.SupportsBootProtocol))
	  return HID_ERROR_LOGICAL;
    2474:	df 91       	pop	r29

	HIDInterfaceInfo->State.LargestReportSize = 8;
	HIDInterfaceInfo->State.UsingBootProtocol = true;

	return HOST_SENDCONTROL_Successful;
}
    2476:	cf 91       	pop	r28
    2478:	08 95       	ret

0000247a <Serial_putchar>:
			 *  \param[in] DataByte  Byte to transmit through the USART.
			 */
			static inline void Serial_SendByte(const char DataByte) ATTR_ALWAYS_INLINE;
			static inline void Serial_SendByte(const char DataByte)
			{
				while (!(UCSR1A & (1 << UDRE1)));
    247a:	90 91 c8 00 	lds	r25, 0x00C8
    247e:	95 ff       	sbrs	r25, 5
    2480:	fc cf       	rjmp	.-8      	; 0x247a <Serial_putchar>
				UDR1 = DataByte;
    2482:	80 93 ce 00 	sts	0x00CE, r24
{
	(void)Stream;

	Serial_SendByte(DataByte);
	return 0;
}
    2486:	80 e0       	ldi	r24, 0x00	; 0
    2488:	90 e0       	ldi	r25, 0x00	; 0
    248a:	08 95       	ret

0000248c <Serial_getchar>:
			 *  \return Boolean \c true if a character has been received, \c false otherwise.
			 */
			static inline bool Serial_IsCharReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Serial_IsCharReceived(void)
			{
				return ((UCSR1A & (1 << RXC1)) ? true : false);
    248c:	80 91 c8 00 	lds	r24, 0x00C8

int Serial_getchar(FILE *Stream)
{
	(void)Stream;

	if (!(Serial_IsCharReceived()))
    2490:	87 ff       	sbrs	r24, 7
    2492:	08 c0       	rjmp	.+16     	; 0x24a4 <Serial_getchar+0x18>
    2494:	80 91 c8 00 	lds	r24, 0x00C8
			 *  \return Next byte received from the USART, or a negative value if no byte has been received.
			 */
			static inline int16_t Serial_ReceiveByte(void) ATTR_ALWAYS_INLINE;
			static inline int16_t Serial_ReceiveByte(void)
			{
				if (!(Serial_IsCharReceived()))
    2498:	87 ff       	sbrs	r24, 7
    249a:	07 c0       	rjmp	.+14     	; 0x24aa <Serial_getchar+0x1e>
				  return -1;

				return UDR1;
    249c:	80 91 ce 00 	lds	r24, 0x00CE
    24a0:	90 e0       	ldi	r25, 0x00	; 0
    24a2:	08 95       	ret
	  return _FDEV_EOF;
    24a4:	8e ef       	ldi	r24, 0xFE	; 254
    24a6:	9f ef       	ldi	r25, 0xFF	; 255
    24a8:	08 95       	ret
			 */
			static inline int16_t Serial_ReceiveByte(void) ATTR_ALWAYS_INLINE;
			static inline int16_t Serial_ReceiveByte(void)
			{
				if (!(Serial_IsCharReceived()))
				  return -1;
    24aa:	8f ef       	ldi	r24, 0xFF	; 255
    24ac:	9f ef       	ldi	r25, 0xFF	; 255

	return Serial_ReceiveByte();
}
    24ae:	08 95       	ret

000024b0 <Serial_CreateStream>:
	while (Length--)
	  Serial_SendByte(*((uint8_t*)Buffer++));
}

void Serial_CreateStream(FILE* Stream)
{
    24b0:	fc 01       	movw	r30, r24
	if (!(Stream))
    24b2:	00 97       	sbiw	r24, 0x00	; 0
    24b4:	51 f4       	brne	.+20     	; 0x24ca <Serial_CreateStream+0x1a>
	{
		Stream = &USARTSerialStream;
		stdin  = Stream;
    24b6:	e2 e2       	ldi	r30, 0x22	; 34
    24b8:	f2 e0       	ldi	r31, 0x02	; 2
    24ba:	f0 93 31 02 	sts	0x0231, r31
    24be:	e0 93 30 02 	sts	0x0230, r30
		stdout = Stream;
    24c2:	f0 93 33 02 	sts	0x0233, r31
    24c6:	e0 93 32 02 	sts	0x0232, r30
	}

	*Stream = (FILE)FDEV_SETUP_STREAM(Serial_putchar, Serial_getchar, _FDEV_SETUP_RW);
    24ca:	8e e0       	ldi	r24, 0x0E	; 14
    24cc:	df 01       	movw	r26, r30
    24ce:	1d 92       	st	X+, r1
    24d0:	8a 95       	dec	r24
    24d2:	e9 f7       	brne	.-6      	; 0x24ce <Serial_CreateStream+0x1e>
    24d4:	83 e0       	ldi	r24, 0x03	; 3
    24d6:	83 83       	std	Z+3, r24	; 0x03
    24d8:	8d e3       	ldi	r24, 0x3D	; 61
    24da:	92 e1       	ldi	r25, 0x12	; 18
    24dc:	91 87       	std	Z+9, r25	; 0x09
    24de:	80 87       	std	Z+8, r24	; 0x08
    24e0:	86 e4       	ldi	r24, 0x46	; 70
    24e2:	92 e1       	ldi	r25, 0x12	; 18
    24e4:	93 87       	std	Z+11, r25	; 0x0b
    24e6:	82 87       	std	Z+10, r24	; 0x0a
}
    24e8:	08 95       	ret

000024ea <memcmp>:
    24ea:	fb 01       	movw	r30, r22
    24ec:	dc 01       	movw	r26, r24
    24ee:	04 c0       	rjmp	.+8      	; 0x24f8 <memcmp+0xe>
    24f0:	8d 91       	ld	r24, X+
    24f2:	01 90       	ld	r0, Z+
    24f4:	80 19       	sub	r24, r0
    24f6:	21 f4       	brne	.+8      	; 0x2500 <memcmp+0x16>
    24f8:	41 50       	subi	r20, 0x01	; 1
    24fa:	50 40       	sbci	r21, 0x00	; 0
    24fc:	c8 f7       	brcc	.-14     	; 0x24f0 <memcmp+0x6>
    24fe:	88 1b       	sub	r24, r24
    2500:	99 0b       	sbc	r25, r25
    2502:	08 95       	ret

00002504 <memcpy>:
    2504:	fb 01       	movw	r30, r22
    2506:	dc 01       	movw	r26, r24
    2508:	02 c0       	rjmp	.+4      	; 0x250e <memcpy+0xa>
    250a:	01 90       	ld	r0, Z+
    250c:	0d 92       	st	X+, r0
    250e:	41 50       	subi	r20, 0x01	; 1
    2510:	50 40       	sbci	r21, 0x00	; 0
    2512:	d8 f7       	brcc	.-10     	; 0x250a <memcpy+0x6>
    2514:	08 95       	ret

00002516 <memset>:
    2516:	dc 01       	movw	r26, r24
    2518:	01 c0       	rjmp	.+2      	; 0x251c <memset+0x6>
    251a:	6d 93       	st	X+, r22
    251c:	41 50       	subi	r20, 0x01	; 1
    251e:	50 40       	sbci	r21, 0x00	; 0
    2520:	e0 f7       	brcc	.-8      	; 0x251a <memset+0x4>
    2522:	08 95       	ret

00002524 <printf_P>:
    2524:	cf 93       	push	r28
    2526:	df 93       	push	r29
    2528:	cd b7       	in	r28, 0x3d	; 61
    252a:	de b7       	in	r29, 0x3e	; 62
    252c:	fe 01       	movw	r30, r28
    252e:	35 96       	adiw	r30, 0x05	; 5
    2530:	61 91       	ld	r22, Z+
    2532:	71 91       	ld	r23, Z+
    2534:	80 91 32 02 	lds	r24, 0x0232
    2538:	90 91 33 02 	lds	r25, 0x0233
    253c:	dc 01       	movw	r26, r24
    253e:	13 96       	adiw	r26, 0x03	; 3
    2540:	2c 91       	ld	r18, X
    2542:	13 97       	sbiw	r26, 0x03	; 3
    2544:	28 60       	ori	r18, 0x08	; 8
    2546:	13 96       	adiw	r26, 0x03	; 3
    2548:	2c 93       	st	X, r18
    254a:	af 01       	movw	r20, r30
    254c:	67 d0       	rcall	.+206    	; 0x261c <vfprintf>
    254e:	e0 91 32 02 	lds	r30, 0x0232
    2552:	f0 91 33 02 	lds	r31, 0x0233
    2556:	23 81       	ldd	r18, Z+3	; 0x03
    2558:	27 7f       	andi	r18, 0xF7	; 247
    255a:	23 83       	std	Z+3, r18	; 0x03
    255c:	df 91       	pop	r29
    255e:	cf 91       	pop	r28
    2560:	08 95       	ret

00002562 <puts>:
    2562:	0f 93       	push	r16
    2564:	1f 93       	push	r17
    2566:	cf 93       	push	r28
    2568:	df 93       	push	r29
    256a:	8c 01       	movw	r16, r24
    256c:	e0 91 32 02 	lds	r30, 0x0232
    2570:	f0 91 33 02 	lds	r31, 0x0233
    2574:	83 81       	ldd	r24, Z+3	; 0x03
    2576:	81 ff       	sbrs	r24, 1
    2578:	1a c0       	rjmp	.+52     	; 0x25ae <puts+0x4c>
    257a:	c0 e0       	ldi	r28, 0x00	; 0
    257c:	d0 e0       	ldi	r29, 0x00	; 0
    257e:	05 c0       	rjmp	.+10     	; 0x258a <puts+0x28>
    2580:	09 95       	icall
    2582:	00 97       	sbiw	r24, 0x00	; 0
    2584:	11 f0       	breq	.+4      	; 0x258a <puts+0x28>
    2586:	cf ef       	ldi	r28, 0xFF	; 255
    2588:	df ef       	ldi	r29, 0xFF	; 255
    258a:	f8 01       	movw	r30, r16
    258c:	81 91       	ld	r24, Z+
    258e:	8f 01       	movw	r16, r30
    2590:	60 91 32 02 	lds	r22, 0x0232
    2594:	70 91 33 02 	lds	r23, 0x0233
    2598:	db 01       	movw	r26, r22
    259a:	18 96       	adiw	r26, 0x08	; 8
    259c:	ed 91       	ld	r30, X+
    259e:	fc 91       	ld	r31, X
    25a0:	19 97       	sbiw	r26, 0x09	; 9
    25a2:	88 23       	and	r24, r24
    25a4:	69 f7       	brne	.-38     	; 0x2580 <puts+0x1e>
    25a6:	8a e0       	ldi	r24, 0x0A	; 10
    25a8:	09 95       	icall
    25aa:	00 97       	sbiw	r24, 0x00	; 0
    25ac:	11 f0       	breq	.+4      	; 0x25b2 <puts+0x50>
    25ae:	cf ef       	ldi	r28, 0xFF	; 255
    25b0:	df ef       	ldi	r29, 0xFF	; 255
    25b2:	ce 01       	movw	r24, r28
    25b4:	df 91       	pop	r29
    25b6:	cf 91       	pop	r28
    25b8:	1f 91       	pop	r17
    25ba:	0f 91       	pop	r16
    25bc:	08 95       	ret

000025be <puts_P>:
    25be:	0f 93       	push	r16
    25c0:	1f 93       	push	r17
    25c2:	cf 93       	push	r28
    25c4:	df 93       	push	r29
    25c6:	8c 01       	movw	r16, r24
    25c8:	e0 91 32 02 	lds	r30, 0x0232
    25cc:	f0 91 33 02 	lds	r31, 0x0233
    25d0:	83 81       	ldd	r24, Z+3	; 0x03
    25d2:	81 ff       	sbrs	r24, 1
    25d4:	1b c0       	rjmp	.+54     	; 0x260c <puts_P+0x4e>
    25d6:	c0 e0       	ldi	r28, 0x00	; 0
    25d8:	d0 e0       	ldi	r29, 0x00	; 0
    25da:	07 c0       	rjmp	.+14     	; 0x25ea <puts_P+0x2c>
    25dc:	09 95       	icall
    25de:	00 97       	sbiw	r24, 0x00	; 0
    25e0:	11 f0       	breq	.+4      	; 0x25e6 <puts_P+0x28>
    25e2:	cf ef       	ldi	r28, 0xFF	; 255
    25e4:	df ef       	ldi	r29, 0xFF	; 255
    25e6:	0f 5f       	subi	r16, 0xFF	; 255
    25e8:	1f 4f       	sbci	r17, 0xFF	; 255
    25ea:	f8 01       	movw	r30, r16
    25ec:	84 91       	lpm	r24, Z
    25ee:	60 91 32 02 	lds	r22, 0x0232
    25f2:	70 91 33 02 	lds	r23, 0x0233
    25f6:	db 01       	movw	r26, r22
    25f8:	18 96       	adiw	r26, 0x08	; 8
    25fa:	ed 91       	ld	r30, X+
    25fc:	fc 91       	ld	r31, X
    25fe:	19 97       	sbiw	r26, 0x09	; 9
    2600:	88 23       	and	r24, r24
    2602:	61 f7       	brne	.-40     	; 0x25dc <puts_P+0x1e>
    2604:	8a e0       	ldi	r24, 0x0A	; 10
    2606:	09 95       	icall
    2608:	00 97       	sbiw	r24, 0x00	; 0
    260a:	11 f0       	breq	.+4      	; 0x2610 <puts_P+0x52>
    260c:	cf ef       	ldi	r28, 0xFF	; 255
    260e:	df ef       	ldi	r29, 0xFF	; 255
    2610:	ce 01       	movw	r24, r28
    2612:	df 91       	pop	r29
    2614:	cf 91       	pop	r28
    2616:	1f 91       	pop	r17
    2618:	0f 91       	pop	r16
    261a:	08 95       	ret

0000261c <vfprintf>:
    261c:	2f 92       	push	r2
    261e:	3f 92       	push	r3
    2620:	4f 92       	push	r4
    2622:	5f 92       	push	r5
    2624:	6f 92       	push	r6
    2626:	7f 92       	push	r7
    2628:	8f 92       	push	r8
    262a:	9f 92       	push	r9
    262c:	af 92       	push	r10
    262e:	bf 92       	push	r11
    2630:	cf 92       	push	r12
    2632:	df 92       	push	r13
    2634:	ef 92       	push	r14
    2636:	ff 92       	push	r15
    2638:	0f 93       	push	r16
    263a:	1f 93       	push	r17
    263c:	cf 93       	push	r28
    263e:	df 93       	push	r29
    2640:	cd b7       	in	r28, 0x3d	; 61
    2642:	de b7       	in	r29, 0x3e	; 62
    2644:	2d 97       	sbiw	r28, 0x0d	; 13
    2646:	0f b6       	in	r0, 0x3f	; 63
    2648:	f8 94       	cli
    264a:	de bf       	out	0x3e, r29	; 62
    264c:	0f be       	out	0x3f, r0	; 63
    264e:	cd bf       	out	0x3d, r28	; 61
    2650:	3c 01       	movw	r6, r24
    2652:	7d 87       	std	Y+13, r23	; 0x0d
    2654:	6c 87       	std	Y+12, r22	; 0x0c
    2656:	5a 01       	movw	r10, r20
    2658:	fc 01       	movw	r30, r24
    265a:	17 82       	std	Z+7, r1	; 0x07
    265c:	16 82       	std	Z+6, r1	; 0x06
    265e:	83 81       	ldd	r24, Z+3	; 0x03
    2660:	81 ff       	sbrs	r24, 1
    2662:	bb c1       	rjmp	.+886    	; 0x29da <vfprintf+0x3be>
    2664:	2e 01       	movw	r4, r28
    2666:	08 94       	sec
    2668:	41 1c       	adc	r4, r1
    266a:	51 1c       	adc	r5, r1
    266c:	f3 01       	movw	r30, r6
    266e:	93 81       	ldd	r25, Z+3	; 0x03
    2670:	ec 85       	ldd	r30, Y+12	; 0x0c
    2672:	fd 85       	ldd	r31, Y+13	; 0x0d
    2674:	93 fd       	sbrc	r25, 3
    2676:	85 91       	lpm	r24, Z+
    2678:	93 ff       	sbrs	r25, 3
    267a:	81 91       	ld	r24, Z+
    267c:	fd 87       	std	Y+13, r31	; 0x0d
    267e:	ec 87       	std	Y+12, r30	; 0x0c
    2680:	88 23       	and	r24, r24
    2682:	09 f4       	brne	.+2      	; 0x2686 <vfprintf+0x6a>
    2684:	a6 c1       	rjmp	.+844    	; 0x29d2 <vfprintf+0x3b6>
    2686:	85 32       	cpi	r24, 0x25	; 37
    2688:	41 f4       	brne	.+16     	; 0x269a <vfprintf+0x7e>
    268a:	93 fd       	sbrc	r25, 3
    268c:	85 91       	lpm	r24, Z+
    268e:	93 ff       	sbrs	r25, 3
    2690:	81 91       	ld	r24, Z+
    2692:	fd 87       	std	Y+13, r31	; 0x0d
    2694:	ec 87       	std	Y+12, r30	; 0x0c
    2696:	85 32       	cpi	r24, 0x25	; 37
    2698:	21 f4       	brne	.+8      	; 0x26a2 <vfprintf+0x86>
    269a:	90 e0       	ldi	r25, 0x00	; 0
    269c:	b3 01       	movw	r22, r6
    269e:	ce d1       	rcall	.+924    	; 0x2a3c <fputc>
    26a0:	e5 cf       	rjmp	.-54     	; 0x266c <vfprintf+0x50>
    26a2:	ff 24       	eor	r15, r15
    26a4:	ee 24       	eor	r14, r14
    26a6:	10 e0       	ldi	r17, 0x00	; 0
    26a8:	10 32       	cpi	r17, 0x20	; 32
    26aa:	b0 f4       	brcc	.+44     	; 0x26d8 <vfprintf+0xbc>
    26ac:	8b 32       	cpi	r24, 0x2B	; 43
    26ae:	69 f0       	breq	.+26     	; 0x26ca <vfprintf+0xae>
    26b0:	8c 32       	cpi	r24, 0x2C	; 44
    26b2:	28 f4       	brcc	.+10     	; 0x26be <vfprintf+0xa2>
    26b4:	80 32       	cpi	r24, 0x20	; 32
    26b6:	51 f0       	breq	.+20     	; 0x26cc <vfprintf+0xb0>
    26b8:	83 32       	cpi	r24, 0x23	; 35
    26ba:	71 f4       	brne	.+28     	; 0x26d8 <vfprintf+0xbc>
    26bc:	0b c0       	rjmp	.+22     	; 0x26d4 <vfprintf+0xb8>
    26be:	8d 32       	cpi	r24, 0x2D	; 45
    26c0:	39 f0       	breq	.+14     	; 0x26d0 <vfprintf+0xb4>
    26c2:	80 33       	cpi	r24, 0x30	; 48
    26c4:	49 f4       	brne	.+18     	; 0x26d8 <vfprintf+0xbc>
    26c6:	11 60       	ori	r17, 0x01	; 1
    26c8:	2c c0       	rjmp	.+88     	; 0x2722 <vfprintf+0x106>
    26ca:	12 60       	ori	r17, 0x02	; 2
    26cc:	14 60       	ori	r17, 0x04	; 4
    26ce:	29 c0       	rjmp	.+82     	; 0x2722 <vfprintf+0x106>
    26d0:	18 60       	ori	r17, 0x08	; 8
    26d2:	27 c0       	rjmp	.+78     	; 0x2722 <vfprintf+0x106>
    26d4:	10 61       	ori	r17, 0x10	; 16
    26d6:	25 c0       	rjmp	.+74     	; 0x2722 <vfprintf+0x106>
    26d8:	17 fd       	sbrc	r17, 7
    26da:	2e c0       	rjmp	.+92     	; 0x2738 <vfprintf+0x11c>
    26dc:	28 2f       	mov	r18, r24
    26de:	20 53       	subi	r18, 0x30	; 48
    26e0:	2a 30       	cpi	r18, 0x0A	; 10
    26e2:	98 f4       	brcc	.+38     	; 0x270a <vfprintf+0xee>
    26e4:	16 ff       	sbrs	r17, 6
    26e6:	08 c0       	rjmp	.+16     	; 0x26f8 <vfprintf+0xdc>
    26e8:	8f 2d       	mov	r24, r15
    26ea:	88 0f       	add	r24, r24
    26ec:	f8 2e       	mov	r15, r24
    26ee:	ff 0c       	add	r15, r15
    26f0:	ff 0c       	add	r15, r15
    26f2:	f8 0e       	add	r15, r24
    26f4:	f2 0e       	add	r15, r18
    26f6:	15 c0       	rjmp	.+42     	; 0x2722 <vfprintf+0x106>
    26f8:	8e 2d       	mov	r24, r14
    26fa:	88 0f       	add	r24, r24
    26fc:	e8 2e       	mov	r14, r24
    26fe:	ee 0c       	add	r14, r14
    2700:	ee 0c       	add	r14, r14
    2702:	e8 0e       	add	r14, r24
    2704:	e2 0e       	add	r14, r18
    2706:	10 62       	ori	r17, 0x20	; 32
    2708:	0c c0       	rjmp	.+24     	; 0x2722 <vfprintf+0x106>
    270a:	8e 32       	cpi	r24, 0x2E	; 46
    270c:	21 f4       	brne	.+8      	; 0x2716 <vfprintf+0xfa>
    270e:	16 fd       	sbrc	r17, 6
    2710:	60 c1       	rjmp	.+704    	; 0x29d2 <vfprintf+0x3b6>
    2712:	10 64       	ori	r17, 0x40	; 64
    2714:	06 c0       	rjmp	.+12     	; 0x2722 <vfprintf+0x106>
    2716:	8c 36       	cpi	r24, 0x6C	; 108
    2718:	11 f4       	brne	.+4      	; 0x271e <vfprintf+0x102>
    271a:	10 68       	ori	r17, 0x80	; 128
    271c:	02 c0       	rjmp	.+4      	; 0x2722 <vfprintf+0x106>
    271e:	88 36       	cpi	r24, 0x68	; 104
    2720:	59 f4       	brne	.+22     	; 0x2738 <vfprintf+0x11c>
    2722:	ec 85       	ldd	r30, Y+12	; 0x0c
    2724:	fd 85       	ldd	r31, Y+13	; 0x0d
    2726:	93 fd       	sbrc	r25, 3
    2728:	85 91       	lpm	r24, Z+
    272a:	93 ff       	sbrs	r25, 3
    272c:	81 91       	ld	r24, Z+
    272e:	fd 87       	std	Y+13, r31	; 0x0d
    2730:	ec 87       	std	Y+12, r30	; 0x0c
    2732:	88 23       	and	r24, r24
    2734:	09 f0       	breq	.+2      	; 0x2738 <vfprintf+0x11c>
    2736:	b8 cf       	rjmp	.-144    	; 0x26a8 <vfprintf+0x8c>
    2738:	98 2f       	mov	r25, r24
    273a:	95 54       	subi	r25, 0x45	; 69
    273c:	93 30       	cpi	r25, 0x03	; 3
    273e:	18 f0       	brcs	.+6      	; 0x2746 <vfprintf+0x12a>
    2740:	90 52       	subi	r25, 0x20	; 32
    2742:	93 30       	cpi	r25, 0x03	; 3
    2744:	38 f4       	brcc	.+14     	; 0x2754 <vfprintf+0x138>
    2746:	24 e0       	ldi	r18, 0x04	; 4
    2748:	30 e0       	ldi	r19, 0x00	; 0
    274a:	a2 0e       	add	r10, r18
    274c:	b3 1e       	adc	r11, r19
    274e:	3f e3       	ldi	r19, 0x3F	; 63
    2750:	39 83       	std	Y+1, r19	; 0x01
    2752:	0f c0       	rjmp	.+30     	; 0x2772 <vfprintf+0x156>
    2754:	83 36       	cpi	r24, 0x63	; 99
    2756:	31 f0       	breq	.+12     	; 0x2764 <vfprintf+0x148>
    2758:	83 37       	cpi	r24, 0x73	; 115
    275a:	81 f0       	breq	.+32     	; 0x277c <vfprintf+0x160>
    275c:	83 35       	cpi	r24, 0x53	; 83
    275e:	09 f0       	breq	.+2      	; 0x2762 <vfprintf+0x146>
    2760:	56 c0       	rjmp	.+172    	; 0x280e <vfprintf+0x1f2>
    2762:	21 c0       	rjmp	.+66     	; 0x27a6 <vfprintf+0x18a>
    2764:	f5 01       	movw	r30, r10
    2766:	80 81       	ld	r24, Z
    2768:	89 83       	std	Y+1, r24	; 0x01
    276a:	22 e0       	ldi	r18, 0x02	; 2
    276c:	30 e0       	ldi	r19, 0x00	; 0
    276e:	a2 0e       	add	r10, r18
    2770:	b3 1e       	adc	r11, r19
    2772:	21 e0       	ldi	r18, 0x01	; 1
    2774:	c2 2e       	mov	r12, r18
    2776:	d1 2c       	mov	r13, r1
    2778:	42 01       	movw	r8, r4
    277a:	13 c0       	rjmp	.+38     	; 0x27a2 <vfprintf+0x186>
    277c:	92 e0       	ldi	r25, 0x02	; 2
    277e:	29 2e       	mov	r2, r25
    2780:	31 2c       	mov	r3, r1
    2782:	2a 0c       	add	r2, r10
    2784:	3b 1c       	adc	r3, r11
    2786:	f5 01       	movw	r30, r10
    2788:	80 80       	ld	r8, Z
    278a:	91 80       	ldd	r9, Z+1	; 0x01
    278c:	16 ff       	sbrs	r17, 6
    278e:	03 c0       	rjmp	.+6      	; 0x2796 <vfprintf+0x17a>
    2790:	6f 2d       	mov	r22, r15
    2792:	70 e0       	ldi	r23, 0x00	; 0
    2794:	02 c0       	rjmp	.+4      	; 0x279a <vfprintf+0x17e>
    2796:	6f ef       	ldi	r22, 0xFF	; 255
    2798:	7f ef       	ldi	r23, 0xFF	; 255
    279a:	c4 01       	movw	r24, r8
    279c:	44 d1       	rcall	.+648    	; 0x2a26 <strnlen>
    279e:	6c 01       	movw	r12, r24
    27a0:	51 01       	movw	r10, r2
    27a2:	1f 77       	andi	r17, 0x7F	; 127
    27a4:	14 c0       	rjmp	.+40     	; 0x27ce <vfprintf+0x1b2>
    27a6:	82 e0       	ldi	r24, 0x02	; 2
    27a8:	28 2e       	mov	r2, r24
    27aa:	31 2c       	mov	r3, r1
    27ac:	2a 0c       	add	r2, r10
    27ae:	3b 1c       	adc	r3, r11
    27b0:	f5 01       	movw	r30, r10
    27b2:	80 80       	ld	r8, Z
    27b4:	91 80       	ldd	r9, Z+1	; 0x01
    27b6:	16 ff       	sbrs	r17, 6
    27b8:	03 c0       	rjmp	.+6      	; 0x27c0 <vfprintf+0x1a4>
    27ba:	6f 2d       	mov	r22, r15
    27bc:	70 e0       	ldi	r23, 0x00	; 0
    27be:	02 c0       	rjmp	.+4      	; 0x27c4 <vfprintf+0x1a8>
    27c0:	6f ef       	ldi	r22, 0xFF	; 255
    27c2:	7f ef       	ldi	r23, 0xFF	; 255
    27c4:	c4 01       	movw	r24, r8
    27c6:	24 d1       	rcall	.+584    	; 0x2a10 <strnlen_P>
    27c8:	6c 01       	movw	r12, r24
    27ca:	10 68       	ori	r17, 0x80	; 128
    27cc:	51 01       	movw	r10, r2
    27ce:	13 fd       	sbrc	r17, 3
    27d0:	1a c0       	rjmp	.+52     	; 0x2806 <vfprintf+0x1ea>
    27d2:	05 c0       	rjmp	.+10     	; 0x27de <vfprintf+0x1c2>
    27d4:	80 e2       	ldi	r24, 0x20	; 32
    27d6:	90 e0       	ldi	r25, 0x00	; 0
    27d8:	b3 01       	movw	r22, r6
    27da:	30 d1       	rcall	.+608    	; 0x2a3c <fputc>
    27dc:	ea 94       	dec	r14
    27de:	8e 2d       	mov	r24, r14
    27e0:	90 e0       	ldi	r25, 0x00	; 0
    27e2:	c8 16       	cp	r12, r24
    27e4:	d9 06       	cpc	r13, r25
    27e6:	b0 f3       	brcs	.-20     	; 0x27d4 <vfprintf+0x1b8>
    27e8:	0e c0       	rjmp	.+28     	; 0x2806 <vfprintf+0x1ea>
    27ea:	f4 01       	movw	r30, r8
    27ec:	17 fd       	sbrc	r17, 7
    27ee:	85 91       	lpm	r24, Z+
    27f0:	17 ff       	sbrs	r17, 7
    27f2:	81 91       	ld	r24, Z+
    27f4:	4f 01       	movw	r8, r30
    27f6:	90 e0       	ldi	r25, 0x00	; 0
    27f8:	b3 01       	movw	r22, r6
    27fa:	20 d1       	rcall	.+576    	; 0x2a3c <fputc>
    27fc:	e1 10       	cpse	r14, r1
    27fe:	ea 94       	dec	r14
    2800:	08 94       	sec
    2802:	c1 08       	sbc	r12, r1
    2804:	d1 08       	sbc	r13, r1
    2806:	c1 14       	cp	r12, r1
    2808:	d1 04       	cpc	r13, r1
    280a:	79 f7       	brne	.-34     	; 0x27ea <vfprintf+0x1ce>
    280c:	df c0       	rjmp	.+446    	; 0x29cc <vfprintf+0x3b0>
    280e:	84 36       	cpi	r24, 0x64	; 100
    2810:	11 f0       	breq	.+4      	; 0x2816 <vfprintf+0x1fa>
    2812:	89 36       	cpi	r24, 0x69	; 105
    2814:	49 f5       	brne	.+82     	; 0x2868 <vfprintf+0x24c>
    2816:	f5 01       	movw	r30, r10
    2818:	17 ff       	sbrs	r17, 7
    281a:	07 c0       	rjmp	.+14     	; 0x282a <vfprintf+0x20e>
    281c:	80 81       	ld	r24, Z
    281e:	91 81       	ldd	r25, Z+1	; 0x01
    2820:	a2 81       	ldd	r26, Z+2	; 0x02
    2822:	b3 81       	ldd	r27, Z+3	; 0x03
    2824:	24 e0       	ldi	r18, 0x04	; 4
    2826:	30 e0       	ldi	r19, 0x00	; 0
    2828:	08 c0       	rjmp	.+16     	; 0x283a <vfprintf+0x21e>
    282a:	80 81       	ld	r24, Z
    282c:	91 81       	ldd	r25, Z+1	; 0x01
    282e:	aa 27       	eor	r26, r26
    2830:	97 fd       	sbrc	r25, 7
    2832:	a0 95       	com	r26
    2834:	ba 2f       	mov	r27, r26
    2836:	22 e0       	ldi	r18, 0x02	; 2
    2838:	30 e0       	ldi	r19, 0x00	; 0
    283a:	a2 0e       	add	r10, r18
    283c:	b3 1e       	adc	r11, r19
    283e:	01 2f       	mov	r16, r17
    2840:	0f 76       	andi	r16, 0x6F	; 111
    2842:	b7 ff       	sbrs	r27, 7
    2844:	08 c0       	rjmp	.+16     	; 0x2856 <vfprintf+0x23a>
    2846:	b0 95       	com	r27
    2848:	a0 95       	com	r26
    284a:	90 95       	com	r25
    284c:	81 95       	neg	r24
    284e:	9f 4f       	sbci	r25, 0xFF	; 255
    2850:	af 4f       	sbci	r26, 0xFF	; 255
    2852:	bf 4f       	sbci	r27, 0xFF	; 255
    2854:	00 68       	ori	r16, 0x80	; 128
    2856:	bc 01       	movw	r22, r24
    2858:	cd 01       	movw	r24, r26
    285a:	a2 01       	movw	r20, r4
    285c:	2a e0       	ldi	r18, 0x0A	; 10
    285e:	30 e0       	ldi	r19, 0x00	; 0
    2860:	19 d1       	rcall	.+562    	; 0x2a94 <__ultoa_invert>
    2862:	d8 2e       	mov	r13, r24
    2864:	d4 18       	sub	r13, r4
    2866:	3e c0       	rjmp	.+124    	; 0x28e4 <vfprintf+0x2c8>
    2868:	85 37       	cpi	r24, 0x75	; 117
    286a:	21 f4       	brne	.+8      	; 0x2874 <vfprintf+0x258>
    286c:	1f 7e       	andi	r17, 0xEF	; 239
    286e:	2a e0       	ldi	r18, 0x0A	; 10
    2870:	30 e0       	ldi	r19, 0x00	; 0
    2872:	20 c0       	rjmp	.+64     	; 0x28b4 <vfprintf+0x298>
    2874:	19 7f       	andi	r17, 0xF9	; 249
    2876:	8f 36       	cpi	r24, 0x6F	; 111
    2878:	a9 f0       	breq	.+42     	; 0x28a4 <vfprintf+0x288>
    287a:	80 37       	cpi	r24, 0x70	; 112
    287c:	20 f4       	brcc	.+8      	; 0x2886 <vfprintf+0x26a>
    287e:	88 35       	cpi	r24, 0x58	; 88
    2880:	09 f0       	breq	.+2      	; 0x2884 <vfprintf+0x268>
    2882:	a7 c0       	rjmp	.+334    	; 0x29d2 <vfprintf+0x3b6>
    2884:	0b c0       	rjmp	.+22     	; 0x289c <vfprintf+0x280>
    2886:	80 37       	cpi	r24, 0x70	; 112
    2888:	21 f0       	breq	.+8      	; 0x2892 <vfprintf+0x276>
    288a:	88 37       	cpi	r24, 0x78	; 120
    288c:	09 f0       	breq	.+2      	; 0x2890 <vfprintf+0x274>
    288e:	a1 c0       	rjmp	.+322    	; 0x29d2 <vfprintf+0x3b6>
    2890:	01 c0       	rjmp	.+2      	; 0x2894 <vfprintf+0x278>
    2892:	10 61       	ori	r17, 0x10	; 16
    2894:	14 ff       	sbrs	r17, 4
    2896:	09 c0       	rjmp	.+18     	; 0x28aa <vfprintf+0x28e>
    2898:	14 60       	ori	r17, 0x04	; 4
    289a:	07 c0       	rjmp	.+14     	; 0x28aa <vfprintf+0x28e>
    289c:	14 ff       	sbrs	r17, 4
    289e:	08 c0       	rjmp	.+16     	; 0x28b0 <vfprintf+0x294>
    28a0:	16 60       	ori	r17, 0x06	; 6
    28a2:	06 c0       	rjmp	.+12     	; 0x28b0 <vfprintf+0x294>
    28a4:	28 e0       	ldi	r18, 0x08	; 8
    28a6:	30 e0       	ldi	r19, 0x00	; 0
    28a8:	05 c0       	rjmp	.+10     	; 0x28b4 <vfprintf+0x298>
    28aa:	20 e1       	ldi	r18, 0x10	; 16
    28ac:	30 e0       	ldi	r19, 0x00	; 0
    28ae:	02 c0       	rjmp	.+4      	; 0x28b4 <vfprintf+0x298>
    28b0:	20 e1       	ldi	r18, 0x10	; 16
    28b2:	32 e0       	ldi	r19, 0x02	; 2
    28b4:	f5 01       	movw	r30, r10
    28b6:	17 ff       	sbrs	r17, 7
    28b8:	07 c0       	rjmp	.+14     	; 0x28c8 <vfprintf+0x2ac>
    28ba:	60 81       	ld	r22, Z
    28bc:	71 81       	ldd	r23, Z+1	; 0x01
    28be:	82 81       	ldd	r24, Z+2	; 0x02
    28c0:	93 81       	ldd	r25, Z+3	; 0x03
    28c2:	44 e0       	ldi	r20, 0x04	; 4
    28c4:	50 e0       	ldi	r21, 0x00	; 0
    28c6:	06 c0       	rjmp	.+12     	; 0x28d4 <vfprintf+0x2b8>
    28c8:	60 81       	ld	r22, Z
    28ca:	71 81       	ldd	r23, Z+1	; 0x01
    28cc:	80 e0       	ldi	r24, 0x00	; 0
    28ce:	90 e0       	ldi	r25, 0x00	; 0
    28d0:	42 e0       	ldi	r20, 0x02	; 2
    28d2:	50 e0       	ldi	r21, 0x00	; 0
    28d4:	a4 0e       	add	r10, r20
    28d6:	b5 1e       	adc	r11, r21
    28d8:	a2 01       	movw	r20, r4
    28da:	dc d0       	rcall	.+440    	; 0x2a94 <__ultoa_invert>
    28dc:	d8 2e       	mov	r13, r24
    28de:	d4 18       	sub	r13, r4
    28e0:	01 2f       	mov	r16, r17
    28e2:	0f 77       	andi	r16, 0x7F	; 127
    28e4:	06 ff       	sbrs	r16, 6
    28e6:	09 c0       	rjmp	.+18     	; 0x28fa <vfprintf+0x2de>
    28e8:	0e 7f       	andi	r16, 0xFE	; 254
    28ea:	df 14       	cp	r13, r15
    28ec:	30 f4       	brcc	.+12     	; 0x28fa <vfprintf+0x2de>
    28ee:	04 ff       	sbrs	r16, 4
    28f0:	06 c0       	rjmp	.+12     	; 0x28fe <vfprintf+0x2e2>
    28f2:	02 fd       	sbrc	r16, 2
    28f4:	04 c0       	rjmp	.+8      	; 0x28fe <vfprintf+0x2e2>
    28f6:	0f 7e       	andi	r16, 0xEF	; 239
    28f8:	02 c0       	rjmp	.+4      	; 0x28fe <vfprintf+0x2e2>
    28fa:	1d 2d       	mov	r17, r13
    28fc:	01 c0       	rjmp	.+2      	; 0x2900 <vfprintf+0x2e4>
    28fe:	1f 2d       	mov	r17, r15
    2900:	80 2f       	mov	r24, r16
    2902:	90 e0       	ldi	r25, 0x00	; 0
    2904:	04 ff       	sbrs	r16, 4
    2906:	0c c0       	rjmp	.+24     	; 0x2920 <vfprintf+0x304>
    2908:	fe 01       	movw	r30, r28
    290a:	ed 0d       	add	r30, r13
    290c:	f1 1d       	adc	r31, r1
    290e:	20 81       	ld	r18, Z
    2910:	20 33       	cpi	r18, 0x30	; 48
    2912:	11 f4       	brne	.+4      	; 0x2918 <vfprintf+0x2fc>
    2914:	09 7e       	andi	r16, 0xE9	; 233
    2916:	09 c0       	rjmp	.+18     	; 0x292a <vfprintf+0x30e>
    2918:	02 ff       	sbrs	r16, 2
    291a:	06 c0       	rjmp	.+12     	; 0x2928 <vfprintf+0x30c>
    291c:	1e 5f       	subi	r17, 0xFE	; 254
    291e:	05 c0       	rjmp	.+10     	; 0x292a <vfprintf+0x30e>
    2920:	86 78       	andi	r24, 0x86	; 134
    2922:	90 70       	andi	r25, 0x00	; 0
    2924:	00 97       	sbiw	r24, 0x00	; 0
    2926:	09 f0       	breq	.+2      	; 0x292a <vfprintf+0x30e>
    2928:	1f 5f       	subi	r17, 0xFF	; 255
    292a:	80 2e       	mov	r8, r16
    292c:	99 24       	eor	r9, r9
    292e:	03 fd       	sbrc	r16, 3
    2930:	11 c0       	rjmp	.+34     	; 0x2954 <vfprintf+0x338>
    2932:	00 ff       	sbrs	r16, 0
    2934:	0c c0       	rjmp	.+24     	; 0x294e <vfprintf+0x332>
    2936:	fd 2c       	mov	r15, r13
    2938:	1e 15       	cp	r17, r14
    293a:	48 f4       	brcc	.+18     	; 0x294e <vfprintf+0x332>
    293c:	fe 0c       	add	r15, r14
    293e:	f1 1a       	sub	r15, r17
    2940:	1e 2d       	mov	r17, r14
    2942:	05 c0       	rjmp	.+10     	; 0x294e <vfprintf+0x332>
    2944:	80 e2       	ldi	r24, 0x20	; 32
    2946:	90 e0       	ldi	r25, 0x00	; 0
    2948:	b3 01       	movw	r22, r6
    294a:	78 d0       	rcall	.+240    	; 0x2a3c <fputc>
    294c:	1f 5f       	subi	r17, 0xFF	; 255
    294e:	1e 15       	cp	r17, r14
    2950:	c8 f3       	brcs	.-14     	; 0x2944 <vfprintf+0x328>
    2952:	04 c0       	rjmp	.+8      	; 0x295c <vfprintf+0x340>
    2954:	1e 15       	cp	r17, r14
    2956:	10 f4       	brcc	.+4      	; 0x295c <vfprintf+0x340>
    2958:	e1 1a       	sub	r14, r17
    295a:	01 c0       	rjmp	.+2      	; 0x295e <vfprintf+0x342>
    295c:	ee 24       	eor	r14, r14
    295e:	84 fe       	sbrs	r8, 4
    2960:	0e c0       	rjmp	.+28     	; 0x297e <vfprintf+0x362>
    2962:	80 e3       	ldi	r24, 0x30	; 48
    2964:	90 e0       	ldi	r25, 0x00	; 0
    2966:	b3 01       	movw	r22, r6
    2968:	69 d0       	rcall	.+210    	; 0x2a3c <fputc>
    296a:	82 fe       	sbrs	r8, 2
    296c:	1d c0       	rjmp	.+58     	; 0x29a8 <vfprintf+0x38c>
    296e:	81 fe       	sbrs	r8, 1
    2970:	03 c0       	rjmp	.+6      	; 0x2978 <vfprintf+0x35c>
    2972:	88 e5       	ldi	r24, 0x58	; 88
    2974:	90 e0       	ldi	r25, 0x00	; 0
    2976:	10 c0       	rjmp	.+32     	; 0x2998 <vfprintf+0x37c>
    2978:	88 e7       	ldi	r24, 0x78	; 120
    297a:	90 e0       	ldi	r25, 0x00	; 0
    297c:	0d c0       	rjmp	.+26     	; 0x2998 <vfprintf+0x37c>
    297e:	c4 01       	movw	r24, r8
    2980:	86 78       	andi	r24, 0x86	; 134
    2982:	90 70       	andi	r25, 0x00	; 0
    2984:	00 97       	sbiw	r24, 0x00	; 0
    2986:	81 f0       	breq	.+32     	; 0x29a8 <vfprintf+0x38c>
    2988:	81 fc       	sbrc	r8, 1
    298a:	02 c0       	rjmp	.+4      	; 0x2990 <vfprintf+0x374>
    298c:	80 e2       	ldi	r24, 0x20	; 32
    298e:	01 c0       	rjmp	.+2      	; 0x2992 <vfprintf+0x376>
    2990:	8b e2       	ldi	r24, 0x2B	; 43
    2992:	07 fd       	sbrc	r16, 7
    2994:	8d e2       	ldi	r24, 0x2D	; 45
    2996:	90 e0       	ldi	r25, 0x00	; 0
    2998:	b3 01       	movw	r22, r6
    299a:	50 d0       	rcall	.+160    	; 0x2a3c <fputc>
    299c:	05 c0       	rjmp	.+10     	; 0x29a8 <vfprintf+0x38c>
    299e:	80 e3       	ldi	r24, 0x30	; 48
    29a0:	90 e0       	ldi	r25, 0x00	; 0
    29a2:	b3 01       	movw	r22, r6
    29a4:	4b d0       	rcall	.+150    	; 0x2a3c <fputc>
    29a6:	fa 94       	dec	r15
    29a8:	df 14       	cp	r13, r15
    29aa:	c8 f3       	brcs	.-14     	; 0x299e <vfprintf+0x382>
    29ac:	da 94       	dec	r13
    29ae:	f2 01       	movw	r30, r4
    29b0:	ed 0d       	add	r30, r13
    29b2:	f1 1d       	adc	r31, r1
    29b4:	80 81       	ld	r24, Z
    29b6:	90 e0       	ldi	r25, 0x00	; 0
    29b8:	b3 01       	movw	r22, r6
    29ba:	40 d0       	rcall	.+128    	; 0x2a3c <fputc>
    29bc:	dd 20       	and	r13, r13
    29be:	b1 f7       	brne	.-20     	; 0x29ac <vfprintf+0x390>
    29c0:	05 c0       	rjmp	.+10     	; 0x29cc <vfprintf+0x3b0>
    29c2:	80 e2       	ldi	r24, 0x20	; 32
    29c4:	90 e0       	ldi	r25, 0x00	; 0
    29c6:	b3 01       	movw	r22, r6
    29c8:	39 d0       	rcall	.+114    	; 0x2a3c <fputc>
    29ca:	ea 94       	dec	r14
    29cc:	ee 20       	and	r14, r14
    29ce:	c9 f7       	brne	.-14     	; 0x29c2 <vfprintf+0x3a6>
    29d0:	4d ce       	rjmp	.-870    	; 0x266c <vfprintf+0x50>
    29d2:	f3 01       	movw	r30, r6
    29d4:	86 81       	ldd	r24, Z+6	; 0x06
    29d6:	97 81       	ldd	r25, Z+7	; 0x07
    29d8:	02 c0       	rjmp	.+4      	; 0x29de <vfprintf+0x3c2>
    29da:	8f ef       	ldi	r24, 0xFF	; 255
    29dc:	9f ef       	ldi	r25, 0xFF	; 255
    29de:	2d 96       	adiw	r28, 0x0d	; 13
    29e0:	0f b6       	in	r0, 0x3f	; 63
    29e2:	f8 94       	cli
    29e4:	de bf       	out	0x3e, r29	; 62
    29e6:	0f be       	out	0x3f, r0	; 63
    29e8:	cd bf       	out	0x3d, r28	; 61
    29ea:	df 91       	pop	r29
    29ec:	cf 91       	pop	r28
    29ee:	1f 91       	pop	r17
    29f0:	0f 91       	pop	r16
    29f2:	ff 90       	pop	r15
    29f4:	ef 90       	pop	r14
    29f6:	df 90       	pop	r13
    29f8:	cf 90       	pop	r12
    29fa:	bf 90       	pop	r11
    29fc:	af 90       	pop	r10
    29fe:	9f 90       	pop	r9
    2a00:	8f 90       	pop	r8
    2a02:	7f 90       	pop	r7
    2a04:	6f 90       	pop	r6
    2a06:	5f 90       	pop	r5
    2a08:	4f 90       	pop	r4
    2a0a:	3f 90       	pop	r3
    2a0c:	2f 90       	pop	r2
    2a0e:	08 95       	ret

00002a10 <strnlen_P>:
    2a10:	fc 01       	movw	r30, r24
    2a12:	05 90       	lpm	r0, Z+
    2a14:	61 50       	subi	r22, 0x01	; 1
    2a16:	70 40       	sbci	r23, 0x00	; 0
    2a18:	01 10       	cpse	r0, r1
    2a1a:	d8 f7       	brcc	.-10     	; 0x2a12 <strnlen_P+0x2>
    2a1c:	80 95       	com	r24
    2a1e:	90 95       	com	r25
    2a20:	8e 0f       	add	r24, r30
    2a22:	9f 1f       	adc	r25, r31
    2a24:	08 95       	ret

00002a26 <strnlen>:
    2a26:	fc 01       	movw	r30, r24
    2a28:	61 50       	subi	r22, 0x01	; 1
    2a2a:	70 40       	sbci	r23, 0x00	; 0
    2a2c:	01 90       	ld	r0, Z+
    2a2e:	01 10       	cpse	r0, r1
    2a30:	d8 f7       	brcc	.-10     	; 0x2a28 <strnlen+0x2>
    2a32:	80 95       	com	r24
    2a34:	90 95       	com	r25
    2a36:	8e 0f       	add	r24, r30
    2a38:	9f 1f       	adc	r25, r31
    2a3a:	08 95       	ret

00002a3c <fputc>:
    2a3c:	0f 93       	push	r16
    2a3e:	1f 93       	push	r17
    2a40:	cf 93       	push	r28
    2a42:	df 93       	push	r29
    2a44:	8c 01       	movw	r16, r24
    2a46:	eb 01       	movw	r28, r22
    2a48:	8b 81       	ldd	r24, Y+3	; 0x03
    2a4a:	81 ff       	sbrs	r24, 1
    2a4c:	1b c0       	rjmp	.+54     	; 0x2a84 <fputc+0x48>
    2a4e:	82 ff       	sbrs	r24, 2
    2a50:	0d c0       	rjmp	.+26     	; 0x2a6c <fputc+0x30>
    2a52:	2e 81       	ldd	r18, Y+6	; 0x06
    2a54:	3f 81       	ldd	r19, Y+7	; 0x07
    2a56:	8c 81       	ldd	r24, Y+4	; 0x04
    2a58:	9d 81       	ldd	r25, Y+5	; 0x05
    2a5a:	28 17       	cp	r18, r24
    2a5c:	39 07       	cpc	r19, r25
    2a5e:	64 f4       	brge	.+24     	; 0x2a78 <fputc+0x3c>
    2a60:	e8 81       	ld	r30, Y
    2a62:	f9 81       	ldd	r31, Y+1	; 0x01
    2a64:	01 93       	st	Z+, r16
    2a66:	f9 83       	std	Y+1, r31	; 0x01
    2a68:	e8 83       	st	Y, r30
    2a6a:	06 c0       	rjmp	.+12     	; 0x2a78 <fputc+0x3c>
    2a6c:	e8 85       	ldd	r30, Y+8	; 0x08
    2a6e:	f9 85       	ldd	r31, Y+9	; 0x09
    2a70:	80 2f       	mov	r24, r16
    2a72:	09 95       	icall
    2a74:	00 97       	sbiw	r24, 0x00	; 0
    2a76:	31 f4       	brne	.+12     	; 0x2a84 <fputc+0x48>
    2a78:	8e 81       	ldd	r24, Y+6	; 0x06
    2a7a:	9f 81       	ldd	r25, Y+7	; 0x07
    2a7c:	01 96       	adiw	r24, 0x01	; 1
    2a7e:	9f 83       	std	Y+7, r25	; 0x07
    2a80:	8e 83       	std	Y+6, r24	; 0x06
    2a82:	02 c0       	rjmp	.+4      	; 0x2a88 <fputc+0x4c>
    2a84:	0f ef       	ldi	r16, 0xFF	; 255
    2a86:	1f ef       	ldi	r17, 0xFF	; 255
    2a88:	c8 01       	movw	r24, r16
    2a8a:	df 91       	pop	r29
    2a8c:	cf 91       	pop	r28
    2a8e:	1f 91       	pop	r17
    2a90:	0f 91       	pop	r16
    2a92:	08 95       	ret

00002a94 <__ultoa_invert>:
    2a94:	fa 01       	movw	r30, r20
    2a96:	aa 27       	eor	r26, r26
    2a98:	28 30       	cpi	r18, 0x08	; 8
    2a9a:	51 f1       	breq	.+84     	; 0x2af0 <__ultoa_invert+0x5c>
    2a9c:	20 31       	cpi	r18, 0x10	; 16
    2a9e:	81 f1       	breq	.+96     	; 0x2b00 <__ultoa_invert+0x6c>
    2aa0:	e8 94       	clt
    2aa2:	6f 93       	push	r22
    2aa4:	6e 7f       	andi	r22, 0xFE	; 254
    2aa6:	6e 5f       	subi	r22, 0xFE	; 254
    2aa8:	7f 4f       	sbci	r23, 0xFF	; 255
    2aaa:	8f 4f       	sbci	r24, 0xFF	; 255
    2aac:	9f 4f       	sbci	r25, 0xFF	; 255
    2aae:	af 4f       	sbci	r26, 0xFF	; 255
    2ab0:	b1 e0       	ldi	r27, 0x01	; 1
    2ab2:	3e d0       	rcall	.+124    	; 0x2b30 <__ultoa_invert+0x9c>
    2ab4:	b4 e0       	ldi	r27, 0x04	; 4
    2ab6:	3c d0       	rcall	.+120    	; 0x2b30 <__ultoa_invert+0x9c>
    2ab8:	67 0f       	add	r22, r23
    2aba:	78 1f       	adc	r23, r24
    2abc:	89 1f       	adc	r24, r25
    2abe:	9a 1f       	adc	r25, r26
    2ac0:	a1 1d       	adc	r26, r1
    2ac2:	68 0f       	add	r22, r24
    2ac4:	79 1f       	adc	r23, r25
    2ac6:	8a 1f       	adc	r24, r26
    2ac8:	91 1d       	adc	r25, r1
    2aca:	a1 1d       	adc	r26, r1
    2acc:	6a 0f       	add	r22, r26
    2ace:	71 1d       	adc	r23, r1
    2ad0:	81 1d       	adc	r24, r1
    2ad2:	91 1d       	adc	r25, r1
    2ad4:	a1 1d       	adc	r26, r1
    2ad6:	20 d0       	rcall	.+64     	; 0x2b18 <__ultoa_invert+0x84>
    2ad8:	09 f4       	brne	.+2      	; 0x2adc <__ultoa_invert+0x48>
    2ada:	68 94       	set
    2adc:	3f 91       	pop	r19
    2ade:	2a e0       	ldi	r18, 0x0A	; 10
    2ae0:	26 9f       	mul	r18, r22
    2ae2:	11 24       	eor	r1, r1
    2ae4:	30 19       	sub	r19, r0
    2ae6:	30 5d       	subi	r19, 0xD0	; 208
    2ae8:	31 93       	st	Z+, r19
    2aea:	de f6       	brtc	.-74     	; 0x2aa2 <__ultoa_invert+0xe>
    2aec:	cf 01       	movw	r24, r30
    2aee:	08 95       	ret
    2af0:	46 2f       	mov	r20, r22
    2af2:	47 70       	andi	r20, 0x07	; 7
    2af4:	40 5d       	subi	r20, 0xD0	; 208
    2af6:	41 93       	st	Z+, r20
    2af8:	b3 e0       	ldi	r27, 0x03	; 3
    2afa:	0f d0       	rcall	.+30     	; 0x2b1a <__ultoa_invert+0x86>
    2afc:	c9 f7       	brne	.-14     	; 0x2af0 <__ultoa_invert+0x5c>
    2afe:	f6 cf       	rjmp	.-20     	; 0x2aec <__ultoa_invert+0x58>
    2b00:	46 2f       	mov	r20, r22
    2b02:	4f 70       	andi	r20, 0x0F	; 15
    2b04:	40 5d       	subi	r20, 0xD0	; 208
    2b06:	4a 33       	cpi	r20, 0x3A	; 58
    2b08:	18 f0       	brcs	.+6      	; 0x2b10 <__ultoa_invert+0x7c>
    2b0a:	49 5d       	subi	r20, 0xD9	; 217
    2b0c:	31 fd       	sbrc	r19, 1
    2b0e:	40 52       	subi	r20, 0x20	; 32
    2b10:	41 93       	st	Z+, r20
    2b12:	02 d0       	rcall	.+4      	; 0x2b18 <__ultoa_invert+0x84>
    2b14:	a9 f7       	brne	.-22     	; 0x2b00 <__ultoa_invert+0x6c>
    2b16:	ea cf       	rjmp	.-44     	; 0x2aec <__ultoa_invert+0x58>
    2b18:	b4 e0       	ldi	r27, 0x04	; 4
    2b1a:	a6 95       	lsr	r26
    2b1c:	97 95       	ror	r25
    2b1e:	87 95       	ror	r24
    2b20:	77 95       	ror	r23
    2b22:	67 95       	ror	r22
    2b24:	ba 95       	dec	r27
    2b26:	c9 f7       	brne	.-14     	; 0x2b1a <__ultoa_invert+0x86>
    2b28:	00 97       	sbiw	r24, 0x00	; 0
    2b2a:	61 05       	cpc	r22, r1
    2b2c:	71 05       	cpc	r23, r1
    2b2e:	08 95       	ret
    2b30:	9b 01       	movw	r18, r22
    2b32:	ac 01       	movw	r20, r24
    2b34:	0a 2e       	mov	r0, r26
    2b36:	06 94       	lsr	r0
    2b38:	57 95       	ror	r21
    2b3a:	47 95       	ror	r20
    2b3c:	37 95       	ror	r19
    2b3e:	27 95       	ror	r18
    2b40:	ba 95       	dec	r27
    2b42:	c9 f7       	brne	.-14     	; 0x2b36 <__ultoa_invert+0xa2>
    2b44:	62 0f       	add	r22, r18
    2b46:	73 1f       	adc	r23, r19
    2b48:	84 1f       	adc	r24, r20
    2b4a:	95 1f       	adc	r25, r21
    2b4c:	a0 1d       	adc	r26, r0
    2b4e:	08 95       	ret

00002b50 <_exit>:
    2b50:	f8 94       	cli

00002b52 <__stop_program>:
    2b52:	ff cf       	rjmp	.-2      	; 0x2b52 <__stop_program>
