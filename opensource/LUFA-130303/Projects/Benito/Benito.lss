
Benito.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000002e  00800100  00001018  000010ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001018  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000009d  0080012e  0080012e  000010da  2**0
                  ALLOC
  3 .stab         00000a98  00000000  00000000  000010dc  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000002aa  00000000  00000000  00001b74  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000538  00000000  00000000  00001e20  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00008972  00000000  00000000  00002358  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000021de  00000000  00000000  0000acca  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00003df0  00000000  00000000  0000cea8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000e20  00000000  00000000  00010c98  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000039e8  00000000  00000000  00011ab8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000051c0  00000000  00000000  000154a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000768  00000000  00000000  0001a660  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	8b c0       	rjmp	.+278    	; 0x118 <__ctors_end>
       2:	00 00       	nop
       4:	a4 c0       	rjmp	.+328    	; 0x14e <__bad_interrupt>
       6:	00 00       	nop
       8:	a2 c0       	rjmp	.+324    	; 0x14e <__bad_interrupt>
       a:	00 00       	nop
       c:	a0 c0       	rjmp	.+320    	; 0x14e <__bad_interrupt>
       e:	00 00       	nop
      10:	9e c0       	rjmp	.+316    	; 0x14e <__bad_interrupt>
      12:	00 00       	nop
      14:	9c c0       	rjmp	.+312    	; 0x14e <__bad_interrupt>
      16:	00 00       	nop
      18:	9a c0       	rjmp	.+308    	; 0x14e <__bad_interrupt>
      1a:	00 00       	nop
      1c:	98 c0       	rjmp	.+304    	; 0x14e <__bad_interrupt>
      1e:	00 00       	nop
      20:	96 c0       	rjmp	.+300    	; 0x14e <__bad_interrupt>
      22:	00 00       	nop
      24:	94 c0       	rjmp	.+296    	; 0x14e <__bad_interrupt>
      26:	00 00       	nop
      28:	92 c0       	rjmp	.+292    	; 0x14e <__bad_interrupt>
      2a:	00 00       	nop
      2c:	e0 c3       	rjmp	.+1984   	; 0x7ee <__vector_11>
      2e:	00 00       	nop
      30:	81 c4       	rjmp	.+2306   	; 0x934 <__vector_12>
      32:	00 00       	nop
      34:	8c c0       	rjmp	.+280    	; 0x14e <__bad_interrupt>
      36:	00 00       	nop
      38:	8a c0       	rjmp	.+276    	; 0x14e <__bad_interrupt>
      3a:	00 00       	nop
      3c:	88 c0       	rjmp	.+272    	; 0x14e <__bad_interrupt>
      3e:	00 00       	nop
      40:	86 c0       	rjmp	.+268    	; 0x14e <__bad_interrupt>
      42:	00 00       	nop
      44:	84 c0       	rjmp	.+264    	; 0x14e <__bad_interrupt>
      46:	00 00       	nop
      48:	82 c0       	rjmp	.+260    	; 0x14e <__bad_interrupt>
      4a:	00 00       	nop
      4c:	80 c0       	rjmp	.+256    	; 0x14e <__bad_interrupt>
      4e:	00 00       	nop
      50:	7e c0       	rjmp	.+252    	; 0x14e <__bad_interrupt>
      52:	00 00       	nop
      54:	7c c0       	rjmp	.+248    	; 0x14e <__bad_interrupt>
      56:	00 00       	nop
      58:	7a c0       	rjmp	.+244    	; 0x14e <__bad_interrupt>
      5a:	00 00       	nop
      5c:	a0 c1       	rjmp	.+832    	; 0x39e <__vector_23>
      5e:	00 00       	nop
      60:	76 c0       	rjmp	.+236    	; 0x14e <__bad_interrupt>
      62:	00 00       	nop
      64:	74 c0       	rjmp	.+232    	; 0x14e <__bad_interrupt>
      66:	00 00       	nop
      68:	72 c0       	rjmp	.+228    	; 0x14e <__bad_interrupt>
      6a:	00 00       	nop
      6c:	70 c0       	rjmp	.+224    	; 0x14e <__bad_interrupt>
      6e:	00 00       	nop
      70:	6e c0       	rjmp	.+220    	; 0x14e <__bad_interrupt>
      72:	00 00       	nop

00000074 <ProductString>:
      74:	34 03 42 00 65 00 6e 00 69 00 74 00 6f 00 20 00     4.B.e.n.i.t.o. .
      84:	41 00 72 00 64 00 75 00 69 00 6e 00 6f 00 20 00     A.r.d.u.i.n.o. .
      94:	50 00 72 00 6f 00 67 00 72 00 61 00 6d 00 6d 00     P.r.o.g.r.a.m.m.
      a4:	65 00 72 00 00 00                                   e.r...

000000aa <ManufacturerString>:
      aa:	18 03 44 00 65 00 61 00 6e 00 20 00 43 00 61 00     ..D.e.a.n. .C.a.
      ba:	6d 00 65 00 72 00 61 00 00 00                       m.e.r.a...

000000c4 <LanguageString>:
      c4:	04 03 09 04                                         ....

000000c8 <ConfigurationDescriptor>:
      c8:	09 02 3e 00 02 01 00 c0 32 09 04 00 00 01 02 02     ..>.....2.......
      d8:	01 00 05 24 00 10 01 04 24 02 06 05 24 06 00 01     ...$....$...$...
      e8:	07 05 82 03 08 00 ff 09 04 01 00 02 0a 00 00 00     ................
      f8:	07 05 04 02 10 00 05 07 05 83 02 10 00 05           ..............

00000106 <DeviceDescriptor>:
     106:	12 01 10 01 02 00 00 08 eb 03 60 20 01 00 01 02     ..........` ....
     116:	dc 01                                               ..

00000118 <__ctors_end>:
     118:	11 24       	eor	r1, r1
     11a:	1f be       	out	0x3f, r1	; 63
     11c:	cf ef       	ldi	r28, 0xFF	; 255
     11e:	d4 e0       	ldi	r29, 0x04	; 4
     120:	de bf       	out	0x3e, r29	; 62
     122:	cd bf       	out	0x3d, r28	; 61

00000124 <__do_copy_data>:
     124:	11 e0       	ldi	r17, 0x01	; 1
     126:	a0 e0       	ldi	r26, 0x00	; 0
     128:	b1 e0       	ldi	r27, 0x01	; 1
     12a:	e8 e1       	ldi	r30, 0x18	; 24
     12c:	f0 e1       	ldi	r31, 0x10	; 16
     12e:	02 c0       	rjmp	.+4      	; 0x134 <__do_copy_data+0x10>
     130:	05 90       	lpm	r0, Z+
     132:	0d 92       	st	X+, r0
     134:	ae 32       	cpi	r26, 0x2E	; 46
     136:	b1 07       	cpc	r27, r17
     138:	d9 f7       	brne	.-10     	; 0x130 <__do_copy_data+0xc>

0000013a <__do_clear_bss>:
     13a:	11 e0       	ldi	r17, 0x01	; 1
     13c:	ae e2       	ldi	r26, 0x2E	; 46
     13e:	b1 e0       	ldi	r27, 0x01	; 1
     140:	01 c0       	rjmp	.+2      	; 0x144 <.do_clear_bss_start>

00000142 <.do_clear_bss_loop>:
     142:	1d 92       	st	X+, r1

00000144 <.do_clear_bss_start>:
     144:	ab 3c       	cpi	r26, 0xCB	; 203
     146:	b1 07       	cpc	r27, r17
     148:	e1 f7       	brne	.-8      	; 0x142 <.do_clear_bss_loop>
     14a:	23 d0       	rcall	.+70     	; 0x192 <main>
     14c:	63 c7       	rjmp	.+3782   	; 0x1014 <_exit>

0000014e <__bad_interrupt>:
     14e:	58 cf       	rjmp	.-336    	; 0x0 <__vectors>

00000150 <LEDs_SetAllLEDs>:
				PORTC |= LEDMask;
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
			{
				PORTC = ((PORTC | LEDS_ALL_LEDS) & ~LEDMask);
     150:	98 b1       	in	r25, 0x08	; 8
     152:	80 95       	com	r24
     154:	90 6c       	ori	r25, 0xC0	; 192
     156:	89 23       	and	r24, r25
     158:	88 b9       	out	0x08, r24	; 8
			}
     15a:	08 95       	ret

0000015c <SetupHardware>:

/** Configures the board hardware and chip peripherals for the demo's functionality. */
void SetupHardware(void)
{
	/* Disable watchdog if enabled by bootloader/fuses */
	MCUSR &= ~(1 << WDRF);
     15c:	84 b7       	in	r24, 0x34	; 52
     15e:	87 7f       	andi	r24, 0xF7	; 247
     160:	84 bf       	out	0x34, r24	; 52
	wdt_disable();
     162:	88 e1       	ldi	r24, 0x18	; 24
     164:	0f b6       	in	r0, 0x3f	; 63
     166:	f8 94       	cli
     168:	80 93 60 00 	sts	0x0060, r24
     16c:	10 92 60 00 	sts	0x0060, r1
     170:	0f be       	out	0x3f, r0	; 63

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void LEDs_Init(void)
			{
				DDRC  |= LEDS_ALL_LEDS;
     172:	87 b1       	in	r24, 0x07	; 7
     174:	80 6c       	ori	r24, 0xC0	; 192
     176:	87 b9       	out	0x07, r24	; 7
				PORTC |= LEDS_ALL_LEDS;
     178:	88 b1       	in	r24, 0x08	; 8
     17a:	80 6c       	ori	r24, 0xC0	; 192
     17c:	88 b9       	out	0x08, r24	; 8

	/* Hardware Initialization */
	LEDs_Init();
	USB_Init();
     17e:	28 d3       	rcall	.+1616   	; 0x7d0 <USB_Init>
     180:	8d e7       	ldi	r24, 0x7D	; 125

	/* Millisecond Timer Interrupt */
	OCR0A  = (F_CPU / 64 / 1000);
     182:	87 bd       	out	0x27, r24	; 39
     184:	82 e0       	ldi	r24, 0x02	; 2
	TCCR0A = (1 << WGM01);
     186:	84 bd       	out	0x24, r24	; 36
     188:	83 e0       	ldi	r24, 0x03	; 3
	TCCR0B = ((1 << CS01) | (1 << CS00));
     18a:	85 bd       	out	0x25, r24	; 37
     18c:	5c 98       	cbi	0x0b, 4	; 11

	/* Tristate target /RESET Line */
	AVR_RESET_LINE_PORT &= ~AVR_RESET_LINE_MASK;
     18e:	54 98       	cbi	0x0a, 4	; 10
	AVR_RESET_LINE_DDR  &= ~AVR_RESET_LINE_MASK;
     190:	08 95       	ret

00000192 <main>:
}
     192:	e4 df       	rcall	.-56     	; 0x15c <SetupHardware>
/** Main program entry point. This routine contains the overall program flow, including initial
 *  setup of all components and the main program loop.
 */
int main(void)
{
	SetupHardware();
     194:	8e e2       	ldi	r24, 0x2E	; 46
		                                         const uint16_t Size) ATTR_NON_NULL_PTR_ARG(1) ATTR_NON_NULL_PTR_ARG(2);
		static inline void RingBuffer_InitBuffer(RingBuffer_t* Buffer,
		                                         uint8_t* const DataPtr,
		                                         const uint16_t Size)
		{
			GCC_FORCE_POINTER_ACCESS(Buffer);
     196:	91 e0       	ldi	r25, 0x01	; 1
     198:	fc 01       	movw	r30, r24
     19a:	4f b7       	in	r20, 0x3f	; 63
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
     19c:	f8 94       	cli
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
     19e:	2a e3       	ldi	r18, 0x3A	; 58

			uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
			GlobalInterruptDisable();

			Buffer->In     = DataPtr;
     1a0:	31 e0       	ldi	r19, 0x01	; 1
     1a2:	31 83       	std	Z+1, r19	; 0x01
     1a4:	20 83       	st	Z, r18
     1a6:	33 83       	std	Z+3, r19	; 0x03
			Buffer->Out    = DataPtr;
     1a8:	22 83       	std	Z+2, r18	; 0x02
     1aa:	35 83       	std	Z+5, r19	; 0x05
			Buffer->Start  = &DataPtr[0];
     1ac:	24 83       	std	Z+4, r18	; 0x04
     1ae:	2a eb       	ldi	r18, 0xBA	; 186
			Buffer->End    = &DataPtr[Size];
     1b0:	31 e0       	ldi	r19, 0x01	; 1
     1b2:	37 83       	std	Z+7, r19	; 0x07
     1b4:	26 83       	std	Z+6, r18	; 0x06
     1b6:	20 e8       	ldi	r18, 0x80	; 128
			Buffer->Size   = Size;
     1b8:	30 e0       	ldi	r19, 0x00	; 0
     1ba:	31 87       	std	Z+9, r19	; 0x09
     1bc:	20 87       	std	Z+8, r18	; 0x08
     1be:	13 86       	std	Z+11, r1	; 0x0b
			Buffer->Count  = 0;
     1c0:	12 86       	std	Z+10, r1	; 0x0a
     1c2:	4f bf       	out	0x3f, r20	; 63
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
     1c4:	78 94       	sei
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				sei();
     1c6:	1e e1       	ldi	r17, 0x1E	; 30
		if ((UCSR1A & (1 << UDRE1)) && CDC_Device_BytesReceived(&VirtualSerial_CDC_Interface))
		{
			UDR1 = CDC_Device_ReceiveByte(&VirtualSerial_CDC_Interface);

			LEDs_TurnOnLEDs(LEDMASK_TX);
			PulseMSRemaining.TxLEDPulse = TX_RX_LED_PULSE_MS;
     1c8:	4a e0       	ldi	r20, 0x0A	; 10

			/* Check if the receive buffer flush period has expired */
			uint16_t BufferCount = RingBuffer_GetCount(&USARTtoUSB_Buffer);
			if (!(--FlushPeriodRemaining) || (BufferCount > 200))
			{
				FlushPeriodRemaining = RECEIVE_BUFFER_FLUSH_MS;
     1ca:	e4 2e       	mov	r14, r20
     1cc:	6c 01       	movw	r12, r24
		 *  \return Next data element stored in the buffer.
		 */
		static inline uint8_t RingBuffer_Remove(RingBuffer_t* Buffer) ATTR_NON_NULL_PTR_ARG(1);
		static inline uint8_t RingBuffer_Remove(RingBuffer_t* Buffer)
		{
			GCC_FORCE_POINTER_ACCESS(Buffer);
     1ce:	00 ec       	ldi	r16, 0xC0	; 192
				PORTC = ((PORTC | LEDMask) & ~ActiveMask);
			}

			static inline void LEDs_ToggleLEDs(const uint8_t LEDMask)
			{
				PINC  = LEDMask;
     1d0:	54 e6       	ldi	r21, 0x64	; 100

			/* Check if the LEDs should be ping-ponging (during enumeration) */
			if (PulseMSRemaining.PingPongLEDPulse && !(--PulseMSRemaining.PingPongLEDPulse))
			{
				LEDs_ToggleLEDs(LEDMASK_TX | LEDMASK_RX);
				PulseMSRemaining.PingPongLEDPulse = PING_PONG_LED_PULSE_MS;
     1d2:	f5 2e       	mov	r15, r21
     1d4:	80 91 c8 00 	lds	r24, 0x00C8
	GlobalInterruptEnable();

	for (;;)
	{
		/* Echo bytes from the host to the target via the hardware USART */
		if ((UCSR1A & (1 << UDRE1)) && CDC_Device_BytesReceived(&VirtualSerial_CDC_Interface))
     1d8:	85 ff       	sbrs	r24, 5
     1da:	0d c0       	rjmp	.+26     	; 0x1f6 <main+0x64>
     1dc:	80 e0       	ldi	r24, 0x00	; 0
     1de:	91 e0       	ldi	r25, 0x01	; 1
     1e0:	9e d6       	rcall	.+3388   	; 0xf1e <CDC_Device_BytesReceived>
     1e2:	00 97       	sbiw	r24, 0x00	; 0
     1e4:	41 f0       	breq	.+16     	; 0x1f6 <main+0x64>
     1e6:	80 e0       	ldi	r24, 0x00	; 0
     1e8:	91 e0       	ldi	r25, 0x01	; 1
		{
			UDR1 = CDC_Device_ReceiveByte(&VirtualSerial_CDC_Interface);
     1ea:	c2 d6       	rcall	.+3460   	; 0xf70 <CDC_Device_ReceiveByte>
     1ec:	80 93 ce 00 	sts	0x00CE, r24
     1f0:	47 98       	cbi	0x08, 7	; 8
     1f2:	10 93 bc 01 	sts	0x01BC, r17
				PORTC &= ~LEDS_ALL_LEDS;
			}

			static inline void LEDs_TurnOnLEDs(const uint8_t LEDMask)
			{
				PORTC &= ~LEDMask;
     1f6:	a9 9b       	sbis	0x15, 1	; 21

			LEDs_TurnOnLEDs(LEDMASK_TX);
			PulseMSRemaining.TxLEDPulse = TX_RX_LED_PULSE_MS;
     1f8:	73 c0       	rjmp	.+230    	; 0x2e0 <main+0x14e>
     1fa:	a8 9a       	sbi	0x15, 0	; 21
		}

		/* Check if the millisecond timer has elapsed */
		if (TIFR0 & (1 << OCF0A))
     1fc:	80 91 bb 01 	lds	r24, 0x01BB
		{
			/* Clear flush timer expiry flag */
			TIFR0 |= (1 << TOV0);
     200:	88 23       	and	r24, r24

			/* Check if the reset pulse period has elapsed, if so tristate the target reset line */
			if (PulseMSRemaining.ResetPulse && !(--PulseMSRemaining.ResetPulse))
     202:	59 f0       	breq	.+22     	; 0x21a <main+0x88>
     204:	80 91 bb 01 	lds	r24, 0x01BB
     208:	81 50       	subi	r24, 0x01	; 1
     20a:	80 93 bb 01 	sts	0x01BB, r24
     20e:	88 23       	and	r24, r24
     210:	21 f4       	brne	.+8      	; 0x21a <main+0x88>
     212:	88 b1       	in	r24, 0x08	; 8
     214:	80 6c       	ori	r24, 0xC0	; 192
     216:	88 b9       	out	0x08, r24	; 8
			}

			static inline void LEDs_TurnOffLEDs(const uint8_t LEDMask)
			{
				PORTC |= LEDMask;
     218:	54 98       	cbi	0x0a, 4	; 10
     21a:	80 91 be 01 	lds	r24, 0x01BE
			{
				LEDs_TurnOffLEDs(LEDMASK_BUSY);
				AVR_RESET_LINE_DDR &= ~AVR_RESET_LINE_MASK;
     21e:	88 23       	and	r24, r24
			}

			/* Check if the LEDs should be ping-ponging (during enumeration) */
			if (PulseMSRemaining.PingPongLEDPulse && !(--PulseMSRemaining.PingPongLEDPulse))
     220:	51 f0       	breq	.+20     	; 0x236 <main+0xa4>
     222:	80 91 be 01 	lds	r24, 0x01BE
     226:	81 50       	subi	r24, 0x01	; 1
     228:	80 93 be 01 	sts	0x01BE, r24
     22c:	88 23       	and	r24, r24
     22e:	19 f4       	brne	.+6      	; 0x236 <main+0xa4>
     230:	06 b9       	out	0x06, r16	; 6
     232:	f0 92 be 01 	sts	0x01BE, r15
				PORTC = ((PORTC | LEDMask) & ~ActiveMask);
			}

			static inline void LEDs_ToggleLEDs(const uint8_t LEDMask)
			{
				PINC  = LEDMask;
     236:	80 91 bc 01 	lds	r24, 0x01BC
			{
				LEDs_ToggleLEDs(LEDMASK_TX | LEDMASK_RX);
				PulseMSRemaining.PingPongLEDPulse = PING_PONG_LED_PULSE_MS;
     23a:	88 23       	and	r24, r24
			}

			/* Turn off TX LED(s) once the TX pulse period has elapsed */
			if (PulseMSRemaining.TxLEDPulse && !(--PulseMSRemaining.TxLEDPulse))
     23c:	41 f0       	breq	.+16     	; 0x24e <main+0xbc>
     23e:	80 91 bc 01 	lds	r24, 0x01BC
     242:	81 50       	subi	r24, 0x01	; 1
     244:	80 93 bc 01 	sts	0x01BC, r24
     248:	88 23       	and	r24, r24
     24a:	09 f4       	brne	.+2      	; 0x24e <main+0xbc>
     24c:	47 9a       	sbi	0x08, 7	; 8
     24e:	80 91 bd 01 	lds	r24, 0x01BD
				PORTC &= ~LEDMask;
			}

			static inline void LEDs_TurnOffLEDs(const uint8_t LEDMask)
			{
				PORTC |= LEDMask;
     252:	88 23       	and	r24, r24
			  LEDs_TurnOffLEDs(LEDMASK_TX);

			/* Turn off RX LED(s) once the RX pulse period has elapsed */
			if (PulseMSRemaining.RxLEDPulse && !(--PulseMSRemaining.RxLEDPulse))
     254:	41 f0       	breq	.+16     	; 0x266 <main+0xd4>
     256:	80 91 bd 01 	lds	r24, 0x01BD
     25a:	81 50       	subi	r24, 0x01	; 1
     25c:	80 93 bd 01 	sts	0x01BD, r24
     260:	88 23       	and	r24, r24
     262:	09 f4       	brne	.+2      	; 0x266 <main+0xd4>
     264:	46 9a       	sbi	0x08, 6	; 8
     266:	8f b7       	in	r24, 0x3f	; 63
     268:	f8 94       	cli
     26a:	c0 91 38 01 	lds	r28, 0x0138
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
     26e:	d0 91 39 01 	lds	r29, 0x0139
			uint16_t Count;

			uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
			GlobalInterruptDisable();

			Count = Buffer->Count;
     272:	8f bf       	out	0x3f, r24	; 63
     274:	80 91 1b 01 	lds	r24, 0x011B
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
     278:	81 50       	subi	r24, 0x01	; 1
			  LEDs_TurnOffLEDs(LEDMASK_RX);

			/* Check if the receive buffer flush period has expired */
			uint16_t BufferCount = RingBuffer_GetCount(&USARTtoUSB_Buffer);
			if (!(--FlushPeriodRemaining) || (BufferCount > 200))
     27a:	80 93 1b 01 	sts	0x011B, r24
     27e:	88 23       	and	r24, r24
     280:	19 f0       	breq	.+6      	; 0x288 <main+0xf6>
     282:	c9 3c       	cpi	r28, 0xC9	; 201
     284:	d1 05       	cpc	r29, r1
     286:	60 f1       	brcs	.+88     	; 0x2e0 <main+0x14e>
     288:	e0 92 1b 01 	sts	0x011B, r14
     28c:	20 97       	sbiw	r28, 0x00	; 0
			{
				FlushPeriodRemaining = RECEIVE_BUFFER_FLUSH_MS;
     28e:	31 f1       	breq	.+76     	; 0x2dc <main+0x14a>
     290:	46 98       	cbi	0x08, 6	; 8

				/* Start RX LED indicator pulse */
				if (BufferCount)
     292:	10 93 bd 01 	sts	0x01BD, r17
				PORTC &= ~LEDS_ALL_LEDS;
			}

			static inline void LEDs_TurnOnLEDs(const uint8_t LEDMask)
			{
				PORTC &= ~LEDMask;
     296:	22 c0       	rjmp	.+68     	; 0x2dc <main+0x14a>
				{
					LEDs_TurnOnLEDs(LEDMASK_RX);
					PulseMSRemaining.RxLEDPulse = TX_RX_LED_PULSE_MS;
     298:	e0 91 30 01 	lds	r30, 0x0130
     29c:	f0 91 31 01 	lds	r31, 0x0131
		 *  \return Next data element stored in the buffer.
		 */
		static inline uint8_t RingBuffer_Peek(RingBuffer_t* const Buffer) ATTR_WARN_UNUSED_RESULT ATTR_NON_NULL_PTR_ARG(1);
		static inline uint8_t RingBuffer_Peek(RingBuffer_t* const Buffer)
		{
			return *Buffer->Out;
     2a0:	80 e0       	ldi	r24, 0x00	; 0
     2a2:	91 e0       	ldi	r25, 0x01	; 1
     2a4:	60 81       	ld	r22, Z

				/* Echo bytes from the target to the host via the virtual serial port */
				while (BufferCount--)
				{
					/* Try to send the next byte of data to the host, abort if there is an error without dequeuing */
					if (CDC_Device_SendByte(&VirtualSerial_CDC_Interface,
     2a6:	d1 d5       	rcall	.+2978   	; 0xe4a <CDC_Device_SendByte>
     2a8:	88 23       	and	r24, r24
     2aa:	d1 f4       	brne	.+52     	; 0x2e0 <main+0x14e>
     2ac:	f6 01       	movw	r30, r12
     2ae:	82 81       	ldd	r24, Z+2	; 0x02
     2b0:	93 81       	ldd	r25, Z+3	; 0x03
     2b2:	01 96       	adiw	r24, 0x01	; 1
		 *  \return Next data element stored in the buffer.
		 */
		static inline uint8_t RingBuffer_Remove(RingBuffer_t* Buffer) ATTR_NON_NULL_PTR_ARG(1);
		static inline uint8_t RingBuffer_Remove(RingBuffer_t* Buffer)
		{
			GCC_FORCE_POINTER_ACCESS(Buffer);
     2b4:	93 83       	std	Z+3, r25	; 0x03

			uint8_t Data = *Buffer->Out;

			if (++Buffer->Out == Buffer->End)
     2b6:	82 83       	std	Z+2, r24	; 0x02
     2b8:	26 81       	ldd	r18, Z+6	; 0x06
     2ba:	37 81       	ldd	r19, Z+7	; 0x07
     2bc:	82 17       	cp	r24, r18
     2be:	93 07       	cpc	r25, r19
     2c0:	21 f4       	brne	.+8      	; 0x2ca <main+0x138>
     2c2:	84 81       	ldd	r24, Z+4	; 0x04
     2c4:	95 81       	ldd	r25, Z+5	; 0x05
     2c6:	93 83       	std	Z+3, r25	; 0x03
     2c8:	82 83       	std	Z+2, r24	; 0x02
			  Buffer->Out = Buffer->Start;
     2ca:	2f b7       	in	r18, 0x3f	; 63
     2cc:	f8 94       	cli
     2ce:	82 85       	ldd	r24, Z+10	; 0x0a
     2d0:	93 85       	ldd	r25, Z+11	; 0x0b
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
     2d2:	01 97       	sbiw	r24, 0x01	; 1
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
     2d4:	93 87       	std	Z+11, r25	; 0x0b

			uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
			GlobalInterruptDisable();

			Buffer->Count--;
     2d6:	82 87       	std	Z+10, r24	; 0x0a
     2d8:	2f bf       	out	0x3f, r18	; 63
     2da:	21 97       	sbiw	r28, 0x01	; 1
     2dc:	20 97       	sbiw	r28, 0x00	; 0
     2de:	e1 f6       	brne	.-72     	; 0x298 <main+0x106>
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
     2e0:	80 e0       	ldi	r24, 0x00	; 0
				  __builtin_csrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				SREG = GlobalIntState;
				#endif

				GCC_MEMORY_BARRIER();
     2e2:	91 e0       	ldi	r25, 0x01	; 1
					LEDs_TurnOnLEDs(LEDMASK_RX);
					PulseMSRemaining.RxLEDPulse = TX_RX_LED_PULSE_MS;
				}

				/* Echo bytes from the target to the host via the virtual serial port */
				while (BufferCount--)
     2e4:	05 d6       	rcall	.+3082   	; 0xef0 <CDC_Device_USBTask>
     2e6:	c6 d4       	rcall	.+2444   	; 0xc74 <USB_USBTask>
					RingBuffer_Remove(&USARTtoUSB_Buffer);
				}
			}
		}

		CDC_Device_USBTask(&VirtualSerial_CDC_Interface);
     2e8:	75 cf       	rjmp	.-278    	; 0x1d4 <main+0x42>

000002ea <EVENT_USB_Device_Connect>:
     2ea:	84 e6       	ldi	r24, 0x64	; 100
     2ec:	80 93 be 01 	sts	0x01BE, r24
		USB_USBTask();
     2f0:	80 e8       	ldi	r24, 0x80	; 128
     2f2:	2e cf       	rjmp	.-420    	; 0x150 <LEDs_SetAllLEDs>

000002f4 <EVENT_USB_Device_Disconnect>:
	}
     2f4:	10 92 be 01 	sts	0x01BE, r1

/** Event handler for the library USB Disconnection event. */
void EVENT_USB_Device_Disconnect(void)
{
	PulseMSRemaining.PingPongLEDPulse = 0;
	LEDs_SetAllLEDs(LEDS_NO_LEDS);
     2f8:	80 e0       	ldi	r24, 0x00	; 0
     2fa:	2a cf       	rjmp	.-428    	; 0x150 <LEDs_SetAllLEDs>

000002fc <EVENT_USB_Device_ConfigurationChanged>:
     2fc:	80 e0       	ldi	r24, 0x00	; 0
}
     2fe:	91 e0       	ldi	r25, 0x01	; 1
/** Event handler for the library USB Configuration Changed event. */
void EVENT_USB_Device_ConfigurationChanged(void)
{
	bool ConfigSuccess = true;

	ConfigSuccess &= CDC_Device_ConfigureEndpoints(&VirtualSerial_CDC_Interface);
     300:	80 d5       	rcall	.+2816   	; 0xe02 <CDC_Device_ConfigureEndpoints>
     302:	10 92 be 01 	sts	0x01BE, r1

	PulseMSRemaining.PingPongLEDPulse = 0;
     306:	88 23       	and	r24, r24

	LEDs_SetAllLEDs(ConfigSuccess ? LEDS_NO_LEDS : LEDMASK_ERROR);
     308:	11 f0       	breq	.+4      	; 0x30e <EVENT_USB_Device_ConfigurationChanged+0x12>
     30a:	80 e0       	ldi	r24, 0x00	; 0
     30c:	01 c0       	rjmp	.+2      	; 0x310 <EVENT_USB_Device_ConfigurationChanged+0x14>
     30e:	80 ec       	ldi	r24, 0xC0	; 192
     310:	1f cf       	rjmp	.-450    	; 0x150 <LEDs_SetAllLEDs>

00000312 <EVENT_USB_Device_ControlRequest>:
     312:	80 e0       	ldi	r24, 0x00	; 0
     314:	91 e0       	ldi	r25, 0x01	; 1
}
     316:	c9 c4       	rjmp	.+2450   	; 0xcaa <CDC_Device_ProcessControlRequest>

00000318 <EVENT_CDC_Device_LineEncodingChanged>:
 *  the device from the USB host before passing along unhandled control requests to the library for processing
 *  internally.
 */
void EVENT_USB_Device_ControlRequest(void)
{
	CDC_Device_ProcessControlRequest(&VirtualSerial_CDC_Interface);
     318:	cf 93       	push	r28
}
     31a:	fc 01       	movw	r30, r24
 */
void EVENT_CDC_Device_LineEncodingChanged(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
	uint8_t ConfigMask = 0;

	switch (CDCInterfaceInfo->State.LineEncoding.ParityType)
     31c:	a1 8d       	ldd	r26, Z+25	; 0x19
     31e:	a1 50       	subi	r26, 0x01	; 1
     320:	a2 30       	cpi	r26, 0x02	; 2
     322:	28 f4       	brcc	.+10     	; 0x32e <EVENT_CDC_Device_LineEncodingChanged+0x16>
     324:	b0 e0       	ldi	r27, 0x00	; 0
     326:	a4 5e       	subi	r26, 0xE4	; 228
     328:	be 4f       	sbci	r27, 0xFE	; 254
     32a:	cc 91       	ld	r28, X
     32c:	01 c0       	rjmp	.+2      	; 0x330 <EVENT_CDC_Device_LineEncodingChanged+0x18>
     32e:	c0 e0       	ldi	r28, 0x00	; 0
		case CDC_PARITY_Even:
			ConfigMask = (1 << UPM11);
			break;
	}

	if (CDCInterfaceInfo->State.LineEncoding.CharFormat == CDC_LINEENCODING_TwoStopBits)
     330:	80 8d       	ldd	r24, Z+24	; 0x18
     332:	82 30       	cpi	r24, 0x02	; 2
     334:	09 f4       	brne	.+2      	; 0x338 <EVENT_CDC_Device_LineEncodingChanged+0x20>
	  ConfigMask |= (1 << USBS1);
     336:	c8 60       	ori	r28, 0x08	; 8

	switch (CDCInterfaceInfo->State.LineEncoding.DataBits)
     338:	82 8d       	ldd	r24, Z+26	; 0x1a
     33a:	87 30       	cpi	r24, 0x07	; 7
     33c:	31 f0       	breq	.+12     	; 0x34a <EVENT_CDC_Device_LineEncodingChanged+0x32>
     33e:	88 30       	cpi	r24, 0x08	; 8
     340:	31 f0       	breq	.+12     	; 0x34e <EVENT_CDC_Device_LineEncodingChanged+0x36>
     342:	86 30       	cpi	r24, 0x06	; 6
     344:	29 f4       	brne	.+10     	; 0x350 <EVENT_CDC_Device_LineEncodingChanged+0x38>
	{
		case 6:
			ConfigMask |= (1 << UCSZ10);
     346:	c2 60       	ori	r28, 0x02	; 2
			break;
     348:	03 c0       	rjmp	.+6      	; 0x350 <EVENT_CDC_Device_LineEncodingChanged+0x38>
		case 7:
			ConfigMask |= (1 << UCSZ11);
     34a:	c4 60       	ori	r28, 0x04	; 4
			break;
     34c:	01 c0       	rjmp	.+2      	; 0x350 <EVENT_CDC_Device_LineEncodingChanged+0x38>
		case 8:
			ConfigMask |= ((1 << UCSZ11) | (1 << UCSZ10));
     34e:	c6 60       	ori	r28, 0x06	; 6
			break;
	}

	/* Must turn off USART before reconfiguring it, otherwise incorrect operation may occur */
	UCSR1B = 0;
     350:	10 92 c9 00 	sts	0x00C9, r1
	UCSR1A = 0;
     354:	10 92 c8 00 	sts	0x00C8, r1
	UCSR1C = 0;
     358:	10 92 ca 00 	sts	0x00CA, r1

	/* Set the new baud rate before configuring the USART */
	UBRR1  = SERIAL_2X_UBBRVAL(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS);
     35c:	24 89       	ldd	r18, Z+20	; 0x14
     35e:	35 89       	ldd	r19, Z+21	; 0x15
     360:	46 89       	ldd	r20, Z+22	; 0x16
     362:	57 89       	ldd	r21, Z+23	; 0x17
     364:	da 01       	movw	r26, r20
     366:	c9 01       	movw	r24, r18
     368:	b6 95       	lsr	r27
     36a:	a7 95       	ror	r26
     36c:	97 95       	ror	r25
     36e:	87 95       	ror	r24
     370:	80 5c       	subi	r24, 0xC0	; 192
     372:	9d 4b       	sbci	r25, 0xBD	; 189
     374:	a0 4f       	sbci	r26, 0xF0	; 240
     376:	bf 4f       	sbci	r27, 0xFF	; 255
     378:	bc 01       	movw	r22, r24
     37a:	cd 01       	movw	r24, r26
     37c:	29 d6       	rcall	.+3154   	; 0xfd0 <__udivmodsi4>
     37e:	21 50       	subi	r18, 0x01	; 1
     380:	30 40       	sbci	r19, 0x00	; 0
     382:	30 93 cd 00 	sts	0x00CD, r19
     386:	20 93 cc 00 	sts	0x00CC, r18
     38a:	c0 93 ca 00 	sts	0x00CA, r28

	/* Reconfigure the USART in double speed mode for a wider baud rate range at the expense of accuracy */
	UCSR1C = ConfigMask;
     38e:	82 e0       	ldi	r24, 0x02	; 2
	UCSR1A = (1 << U2X1);
     390:	80 93 c8 00 	sts	0x00C8, r24
     394:	88 e9       	ldi	r24, 0x98	; 152
	UCSR1B = ((1 << RXCIE1) | (1 << TXEN1) | (1 << RXEN1));
     396:	80 93 c9 00 	sts	0x00C9, r24
     39a:	cf 91       	pop	r28
}
     39c:	08 95       	ret

0000039e <__vector_23>:
     39e:	1f 92       	push	r1

/** ISR to manage the reception of data from the serial port, placing received bytes into a circular buffer
 *  for later transmission to the host.
 */
ISR(USART1_RX_vect, ISR_BLOCK)
{
     3a0:	0f 92       	push	r0
     3a2:	0f b6       	in	r0, 0x3f	; 63
     3a4:	0f 92       	push	r0
     3a6:	11 24       	eor	r1, r1
     3a8:	2f 93       	push	r18
     3aa:	3f 93       	push	r19
     3ac:	8f 93       	push	r24
     3ae:	9f 93       	push	r25
     3b0:	af 93       	push	r26
     3b2:	bf 93       	push	r27
     3b4:	ef 93       	push	r30
     3b6:	ff 93       	push	r31
	uint8_t ReceivedByte = UDR1;
     3b8:	80 91 ce 00 	lds	r24, 0x00CE

	if (USB_DeviceState == DEVICE_STATE_Configured)
     3bc:	9e b3       	in	r25, 0x1e	; 30
     3be:	94 30       	cpi	r25, 0x04	; 4
     3c0:	d9 f4       	brne	.+54     	; 0x3f8 <__vector_23+0x5a>
		 *  \param[in]     Data    Data element to insert into the buffer.
		 */
		static inline void RingBuffer_Insert(RingBuffer_t* Buffer, const uint8_t Data) ATTR_NON_NULL_PTR_ARG(1);
		static inline void RingBuffer_Insert(RingBuffer_t* Buffer, const uint8_t Data)
		{
			GCC_FORCE_POINTER_ACCESS(Buffer);
     3c2:	ee e2       	ldi	r30, 0x2E	; 46
     3c4:	f1 e0       	ldi	r31, 0x01	; 1

			*Buffer->In = Data;
     3c6:	a0 81       	ld	r26, Z
     3c8:	b1 81       	ldd	r27, Z+1	; 0x01
     3ca:	8c 93       	st	X, r24

			if (++Buffer->In == Buffer->End)
     3cc:	80 81       	ld	r24, Z
     3ce:	91 81       	ldd	r25, Z+1	; 0x01
     3d0:	01 96       	adiw	r24, 0x01	; 1
     3d2:	91 83       	std	Z+1, r25	; 0x01
     3d4:	80 83       	st	Z, r24
     3d6:	26 81       	ldd	r18, Z+6	; 0x06
     3d8:	37 81       	ldd	r19, Z+7	; 0x07
     3da:	82 17       	cp	r24, r18
     3dc:	93 07       	cpc	r25, r19
     3de:	21 f4       	brne	.+8      	; 0x3e8 <__vector_23+0x4a>
			  Buffer->In = Buffer->Start;
     3e0:	84 81       	ldd	r24, Z+4	; 0x04
     3e2:	95 81       	ldd	r25, Z+5	; 0x05
     3e4:	91 83       	std	Z+1, r25	; 0x01
     3e6:	80 83       	st	Z, r24
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
     3e8:	2f b7       	in	r18, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
     3ea:	f8 94       	cli

			uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
			GlobalInterruptDisable();

			Buffer->Count++;
     3ec:	82 85       	ldd	r24, Z+10	; 0x0a
     3ee:	93 85       	ldd	r25, Z+11	; 0x0b
     3f0:	01 96       	adiw	r24, 0x01	; 1
     3f2:	93 87       	std	Z+11, r25	; 0x0b
     3f4:	82 87       	std	Z+10, r24	; 0x0a
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
     3f6:	2f bf       	out	0x3f, r18	; 63
	  RingBuffer_Insert(&USARTtoUSB_Buffer, ReceivedByte);
}
     3f8:	ff 91       	pop	r31
     3fa:	ef 91       	pop	r30
     3fc:	bf 91       	pop	r27
     3fe:	af 91       	pop	r26
     400:	9f 91       	pop	r25
     402:	8f 91       	pop	r24
     404:	3f 91       	pop	r19
     406:	2f 91       	pop	r18
     408:	0f 90       	pop	r0
     40a:	0f be       	out	0x3f, r0	; 63
     40c:	0f 90       	pop	r0
     40e:	1f 90       	pop	r1
     410:	18 95       	reti

00000412 <EVENT_CDC_Device_ControLineStateChanged>:
/** Event handler for the CDC Class driver Host-to-Device Line Encoding Changed event.
 *
 *  \param[in] CDCInterfaceInfo  Pointer to the CDC class interface configuration structure being referenced
 */
void EVENT_CDC_Device_ControLineStateChanged(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
     412:	cf 93       	push	r28
	static bool PreviousDTRState = false;
	bool        CurrentDTRState  = (CDCInterfaceInfo->State.ControlLineStates.HostToDevice & CDC_CONTROL_LINE_OUT_DTR);
     414:	fc 01       	movw	r30, r24
     416:	c0 89       	ldd	r28, Z+16	; 0x10
     418:	c1 70       	andi	r28, 0x01	; 1

	/* Check if the DTR line has been asserted - if so, start the target AVR's reset pulse */
	if (!(PreviousDTRState) && CurrentDTRState)
     41a:	80 91 ba 01 	lds	r24, 0x01BA
     41e:	88 23       	and	r24, r24
     420:	41 f4       	brne	.+16     	; 0x432 <EVENT_CDC_Device_ControLineStateChanged+0x20>
     422:	cc 23       	and	r28, r28
     424:	31 f0       	breq	.+12     	; 0x432 <EVENT_CDC_Device_ControLineStateChanged+0x20>
	{
		LEDs_SetAllLEDs(LEDMASK_BUSY);
     426:	80 ec       	ldi	r24, 0xC0	; 192
     428:	93 de       	rcall	.-730    	; 0x150 <LEDs_SetAllLEDs>
     42a:	54 9a       	sbi	0x0a, 4	; 10

		AVR_RESET_LINE_DDR |= AVR_RESET_LINE_MASK;
     42c:	8a e0       	ldi	r24, 0x0A	; 10
		PulseMSRemaining.ResetPulse = AVR_RESET_PULSE_MS;
     42e:	80 93 bb 01 	sts	0x01BB, r24
     432:	c0 93 ba 01 	sts	0x01BA, r28
	}

	PreviousDTRState = CurrentDTRState;
     436:	cf 91       	pop	r28
}
     438:	08 95       	ret

0000043a <CALLBACK_USB_GetDescriptor>:
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
     43a:	92 30       	cpi	r25, 0x02	; 2
     43c:	29 f0       	breq	.+10     	; 0x448 <CALLBACK_USB_GetDescriptor+0xe>
     43e:	93 30       	cpi	r25, 0x03	; 3
     440:	41 f0       	breq	.+16     	; 0x452 <CALLBACK_USB_GetDescriptor+0x18>
     442:	91 30       	cpi	r25, 0x01	; 1
     444:	e9 f4       	brne	.+58     	; 0x480 <CALLBACK_USB_GetDescriptor+0x46>
     446:	17 c0       	rjmp	.+46     	; 0x476 <CALLBACK_USB_GetDescriptor+0x3c>
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
			Size    = sizeof(USB_Descriptor_Configuration_t);
     448:	8e e3       	ldi	r24, 0x3E	; 62
     44a:	90 e0       	ldi	r25, 0x00	; 0
		case DTYPE_Device:
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
     44c:	e8 ec       	ldi	r30, 0xC8	; 200
     44e:	f0 e0       	ldi	r31, 0x00	; 0
			Size    = sizeof(USB_Descriptor_Configuration_t);
			break;
     450:	1b c0       	rjmp	.+54     	; 0x488 <CALLBACK_USB_GetDescriptor+0x4e>
		case DTYPE_String:
			switch (DescriptorNumber)
     452:	81 30       	cpi	r24, 0x01	; 1
     454:	41 f0       	breq	.+16     	; 0x466 <CALLBACK_USB_GetDescriptor+0x2c>
     456:	81 30       	cpi	r24, 0x01	; 1
     458:	18 f0       	brcs	.+6      	; 0x460 <CALLBACK_USB_GetDescriptor+0x26>
     45a:	82 30       	cpi	r24, 0x02	; 2
     45c:	89 f4       	brne	.+34     	; 0x480 <CALLBACK_USB_GetDescriptor+0x46>
     45e:	06 c0       	rjmp	.+12     	; 0x46c <CALLBACK_USB_GetDescriptor+0x32>
			{
				case 0x00:
					Address = &LanguageString;
					Size    = pgm_read_byte(&LanguageString.Header.Size);
     460:	e4 ec       	ldi	r30, 0xC4	; 196
     462:	f0 e0       	ldi	r31, 0x00	; 0
     464:	05 c0       	rjmp	.+10     	; 0x470 <CALLBACK_USB_GetDescriptor+0x36>
					break;
				case 0x01:
					Address = &ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
     466:	ea ea       	ldi	r30, 0xAA	; 170
     468:	f0 e0       	ldi	r31, 0x00	; 0
     46a:	02 c0       	rjmp	.+4      	; 0x470 <CALLBACK_USB_GetDescriptor+0x36>
					break;
				case 0x02:
					Address = &ProductString;
					Size    = pgm_read_byte(&ProductString.Header.Size);
     46c:	e4 e7       	ldi	r30, 0x74	; 116
     46e:	f0 e0       	ldi	r31, 0x00	; 0
     470:	84 91       	lpm	r24, Z
     472:	90 e0       	ldi	r25, 0x00	; 0
					break;
     474:	09 c0       	rjmp	.+18     	; 0x488 <CALLBACK_USB_GetDescriptor+0x4e>

	switch (DescriptorType)
	{
		case DTYPE_Device:
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
     476:	82 e1       	ldi	r24, 0x12	; 18
     478:	90 e0       	ldi	r25, 0x00	; 0
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
	{
		case DTYPE_Device:
			Address = &DeviceDescriptor;
     47a:	e6 e0       	ldi	r30, 0x06	; 6
     47c:	f1 e0       	ldi	r31, 0x01	; 1
     47e:	04 c0       	rjmp	.+8      	; 0x488 <CALLBACK_USB_GetDescriptor+0x4e>
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;
     480:	80 e0       	ldi	r24, 0x00	; 0
     482:	90 e0       	ldi	r25, 0x00	; 0
                                    const void** const DescriptorAddress)
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
     484:	e0 e0       	ldi	r30, 0x00	; 0
     486:	f0 e0       	ldi	r31, 0x00	; 0
			}

			break;
	}

	*DescriptorAddress = Address;
     488:	da 01       	movw	r26, r20
     48a:	11 96       	adiw	r26, 0x01	; 1
     48c:	fc 93       	st	X, r31
     48e:	ee 93       	st	-X, r30
	return Size;
}
     490:	08 95       	ret

00000492 <Endpoint_Write_Control_Stream_LE>:
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
     492:	20 91 c9 01 	lds	r18, 0x01C9
     496:	30 91 ca 01 	lds	r19, 0x01CA
     49a:	26 17       	cp	r18, r22
     49c:	37 07       	cpc	r19, r23
     49e:	28 f4       	brcc	.+10     	; 0x4aa <Endpoint_Write_Control_Stream_LE+0x18>
     4a0:	b9 01       	movw	r22, r18

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
     4a2:	58 2f       	mov	r21, r24
     4a4:	49 2f       	mov	r20, r25
     4a6:	20 e0       	ldi	r18, 0x00	; 0
     4a8:	3e c0       	rjmp	.+124    	; 0x526 <__stack+0x27>
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
     4aa:	61 15       	cp	r22, r1
     4ac:	71 05       	cpc	r23, r1
     4ae:	c9 f7       	brne	.-14     	; 0x4a2 <Endpoint_Write_Control_Stream_LE+0x10>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     4b0:	20 91 e8 00 	lds	r18, 0x00E8
     4b4:	2e 77       	andi	r18, 0x7E	; 126
     4b6:	20 93 e8 00 	sts	0x00E8, r18
     4ba:	f3 cf       	rjmp	.-26     	; 0x4a2 <Endpoint_Write_Control_Stream_LE+0x10>
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     4bc:	8e b3       	in	r24, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     4be:	88 23       	and	r24, r24
     4c0:	09 f4       	brne	.+2      	; 0x4c4 <Endpoint_Write_Control_Stream_LE+0x32>
     4c2:	46 c0       	rjmp	.+140    	; 0x550 <__stack+0x51>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     4c4:	85 30       	cpi	r24, 0x05	; 5
     4c6:	09 f4       	brne	.+2      	; 0x4ca <Endpoint_Write_Control_Stream_LE+0x38>
     4c8:	3f c0       	rjmp	.+126    	; 0x548 <__stack+0x49>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     4ca:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
     4ce:	83 fd       	sbrc	r24, 3
     4d0:	3d c0       	rjmp	.+122    	; 0x54c <__stack+0x4d>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     4d2:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
     4d6:	82 fd       	sbrc	r24, 2
     4d8:	31 c0       	rjmp	.+98     	; 0x53c <__stack+0x3d>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     4da:	80 91 e8 00 	lds	r24, 0x00E8
		  break;

		if (Endpoint_IsINReady())
     4de:	80 ff       	sbrs	r24, 0
     4e0:	22 c0       	rjmp	.+68     	; 0x526 <__stack+0x27>
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
				#elif defined(USB_SERIES_2_AVR)
					return UEBCLX;
     4e2:	20 91 f2 00 	lds	r18, 0x00F2
     4e6:	30 e0       	ldi	r19, 0x00	; 0
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
     4e8:	e5 2f       	mov	r30, r21
     4ea:	f4 2f       	mov	r31, r20
  this software.
*/

#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
     4ec:	2e 1b       	sub	r18, r30
     4ee:	3f 0b       	sbc	r19, r31

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
     4f0:	05 c0       	rjmp	.+10     	; 0x4fc <Endpoint_Write_Control_Stream_LE+0x6a>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
     4f2:	81 91       	ld	r24, Z+
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     4f4:	80 93 f1 00 	sts	0x00F1, r24
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
     4f8:	61 50       	subi	r22, 0x01	; 1
     4fa:	70 40       	sbci	r23, 0x00	; 0
  this software.
*/

#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
     4fc:	cf 01       	movw	r24, r30
     4fe:	82 0f       	add	r24, r18
     500:	93 1f       	adc	r25, r19

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
     502:	61 15       	cp	r22, r1
     504:	71 05       	cpc	r23, r1
     506:	19 f0       	breq	.+6      	; 0x50e <__stack+0xf>
     508:	88 30       	cpi	r24, 0x08	; 8
     50a:	91 05       	cpc	r25, r1
     50c:	90 f3       	brcs	.-28     	; 0x4f2 <Endpoint_Write_Control_Stream_LE+0x60>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
     50e:	21 e0       	ldi	r18, 0x01	; 1
     510:	88 30       	cpi	r24, 0x08	; 8
     512:	91 05       	cpc	r25, r1
     514:	09 f0       	breq	.+2      	; 0x518 <__stack+0x19>
     516:	20 e0       	ldi	r18, 0x00	; 0
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     518:	80 91 e8 00 	lds	r24, 0x00E8
     51c:	8e 77       	andi	r24, 0x7E	; 126
     51e:	80 93 e8 00 	sts	0x00E8, r24
     522:	5e 2f       	mov	r21, r30
     524:	4f 2f       	mov	r20, r31
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
     526:	61 15       	cp	r22, r1
     528:	71 05       	cpc	r23, r1
     52a:	41 f6       	brne	.-112    	; 0x4bc <Endpoint_Write_Control_Stream_LE+0x2a>
     52c:	22 23       	and	r18, r18
     52e:	31 f6       	brne	.-116    	; 0x4bc <Endpoint_Write_Control_Stream_LE+0x2a>
     530:	05 c0       	rjmp	.+10     	; 0x53c <__stack+0x3d>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     532:	8e b3       	in	r24, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     534:	88 23       	and	r24, r24
     536:	61 f0       	breq	.+24     	; 0x550 <__stack+0x51>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     538:	85 30       	cpi	r24, 0x05	; 5
     53a:	61 f0       	breq	.+24     	; 0x554 <__stack+0x55>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     53c:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
     540:	82 ff       	sbrs	r24, 2
     542:	f7 cf       	rjmp	.-18     	; 0x532 <__stack+0x33>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
     544:	80 e0       	ldi	r24, 0x00	; 0
     546:	08 95       	ret
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
     548:	83 e0       	ldi	r24, 0x03	; 3
     54a:	08 95       	ret
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
     54c:	81 e0       	ldi	r24, 0x01	; 1
     54e:	08 95       	ret
	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
     550:	82 e0       	ldi	r24, 0x02	; 2
     552:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
     554:	83 e0       	ldi	r24, 0x03	; 3
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
     556:	08 95       	ret

00000558 <Endpoint_Write_Control_PStream_LE>:
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
     558:	20 91 c9 01 	lds	r18, 0x01C9
     55c:	30 91 ca 01 	lds	r19, 0x01CA
     560:	26 17       	cp	r18, r22
     562:	37 07       	cpc	r19, r23
     564:	28 f4       	brcc	.+10     	; 0x570 <Endpoint_Write_Control_PStream_LE+0x18>
     566:	b9 01       	movw	r22, r18

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
     568:	58 2f       	mov	r21, r24
     56a:	49 2f       	mov	r20, r25
     56c:	20 e0       	ldi	r18, 0x00	; 0
     56e:	3f c0       	rjmp	.+126    	; 0x5ee <Endpoint_Write_Control_PStream_LE+0x96>
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
     570:	61 15       	cp	r22, r1
     572:	71 05       	cpc	r23, r1
     574:	c9 f7       	brne	.-14     	; 0x568 <Endpoint_Write_Control_PStream_LE+0x10>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     576:	20 91 e8 00 	lds	r18, 0x00E8
     57a:	2e 77       	andi	r18, 0x7E	; 126
     57c:	20 93 e8 00 	sts	0x00E8, r18
     580:	f3 cf       	rjmp	.-26     	; 0x568 <Endpoint_Write_Control_PStream_LE+0x10>
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     582:	8e b3       	in	r24, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     584:	88 23       	and	r24, r24
     586:	09 f4       	brne	.+2      	; 0x58a <Endpoint_Write_Control_PStream_LE+0x32>
     588:	47 c0       	rjmp	.+142    	; 0x618 <Endpoint_Write_Control_PStream_LE+0xc0>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     58a:	85 30       	cpi	r24, 0x05	; 5
     58c:	09 f4       	brne	.+2      	; 0x590 <Endpoint_Write_Control_PStream_LE+0x38>
     58e:	40 c0       	rjmp	.+128    	; 0x610 <Endpoint_Write_Control_PStream_LE+0xb8>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     590:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
     594:	83 fd       	sbrc	r24, 3
     596:	3e c0       	rjmp	.+124    	; 0x614 <Endpoint_Write_Control_PStream_LE+0xbc>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     598:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
     59c:	82 fd       	sbrc	r24, 2
     59e:	32 c0       	rjmp	.+100    	; 0x604 <Endpoint_Write_Control_PStream_LE+0xac>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     5a0:	80 91 e8 00 	lds	r24, 0x00E8
		  break;

		if (Endpoint_IsINReady())
     5a4:	80 ff       	sbrs	r24, 0
     5a6:	23 c0       	rjmp	.+70     	; 0x5ee <Endpoint_Write_Control_PStream_LE+0x96>
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
				#elif defined(USB_SERIES_2_AVR)
					return UEBCLX;
     5a8:	20 91 f2 00 	lds	r18, 0x00F2
     5ac:	30 e0       	ldi	r19, 0x00	; 0
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
     5ae:	e5 2f       	mov	r30, r21
     5b0:	f4 2f       	mov	r31, r20
  this software.
*/

#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
     5b2:	2e 1b       	sub	r18, r30
     5b4:	3f 0b       	sbc	r19, r31

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
     5b6:	06 c0       	rjmp	.+12     	; 0x5c4 <Endpoint_Write_Control_PStream_LE+0x6c>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
     5b8:	84 91       	lpm	r24, Z
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     5ba:	80 93 f1 00 	sts	0x00F1, r24
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
     5be:	31 96       	adiw	r30, 0x01	; 1
				Length--;
     5c0:	61 50       	subi	r22, 0x01	; 1
     5c2:	70 40       	sbci	r23, 0x00	; 0
  this software.
*/

#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
     5c4:	c9 01       	movw	r24, r18
     5c6:	8e 0f       	add	r24, r30
     5c8:	9f 1f       	adc	r25, r31

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
     5ca:	61 15       	cp	r22, r1
     5cc:	71 05       	cpc	r23, r1
     5ce:	19 f0       	breq	.+6      	; 0x5d6 <Endpoint_Write_Control_PStream_LE+0x7e>
     5d0:	88 30       	cpi	r24, 0x08	; 8
     5d2:	91 05       	cpc	r25, r1
     5d4:	88 f3       	brcs	.-30     	; 0x5b8 <Endpoint_Write_Control_PStream_LE+0x60>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
     5d6:	21 e0       	ldi	r18, 0x01	; 1
     5d8:	88 30       	cpi	r24, 0x08	; 8
     5da:	91 05       	cpc	r25, r1
     5dc:	09 f0       	breq	.+2      	; 0x5e0 <Endpoint_Write_Control_PStream_LE+0x88>
     5de:	20 e0       	ldi	r18, 0x00	; 0
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     5e0:	80 91 e8 00 	lds	r24, 0x00E8
     5e4:	8e 77       	andi	r24, 0x7E	; 126
     5e6:	80 93 e8 00 	sts	0x00E8, r24
     5ea:	5e 2f       	mov	r21, r30
     5ec:	4f 2f       	mov	r20, r31
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
     5ee:	61 15       	cp	r22, r1
     5f0:	71 05       	cpc	r23, r1
     5f2:	39 f6       	brne	.-114    	; 0x582 <Endpoint_Write_Control_PStream_LE+0x2a>
     5f4:	22 23       	and	r18, r18
     5f6:	29 f6       	brne	.-118    	; 0x582 <Endpoint_Write_Control_PStream_LE+0x2a>
     5f8:	05 c0       	rjmp	.+10     	; 0x604 <Endpoint_Write_Control_PStream_LE+0xac>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     5fa:	8e b3       	in	r24, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     5fc:	88 23       	and	r24, r24
     5fe:	61 f0       	breq	.+24     	; 0x618 <Endpoint_Write_Control_PStream_LE+0xc0>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     600:	85 30       	cpi	r24, 0x05	; 5
     602:	61 f0       	breq	.+24     	; 0x61c <Endpoint_Write_Control_PStream_LE+0xc4>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     604:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
     608:	82 ff       	sbrs	r24, 2
     60a:	f7 cf       	rjmp	.-18     	; 0x5fa <Endpoint_Write_Control_PStream_LE+0xa2>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
     60c:	80 e0       	ldi	r24, 0x00	; 0
     60e:	08 95       	ret
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
     610:	83 e0       	ldi	r24, 0x03	; 3
     612:	08 95       	ret
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
     614:	81 e0       	ldi	r24, 0x01	; 1
     616:	08 95       	ret
	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
     618:	82 e0       	ldi	r24, 0x02	; 2
     61a:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
     61c:	83 e0       	ldi	r24, 0x03	; 3
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
     61e:	08 95       	ret

00000620 <Endpoint_ConfigureEndpoint_Prv>:
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     620:	8f 70       	andi	r24, 0x0F	; 15
     622:	80 93 e9 00 	sts	0x00E9, r24
			 *  \note Endpoints must first be configured properly via \ref Endpoint_ConfigureEndpoint().
			 */
			static inline void Endpoint_EnableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_EnableEndpoint(void)
			{
				UECONX |= (1 << EPEN);
     626:	eb ee       	ldi	r30, 0xEB	; 235
     628:	f0 e0       	ldi	r31, 0x00	; 0
     62a:	80 81       	ld	r24, Z
     62c:	81 60       	ori	r24, 0x01	; 1
     62e:	80 83       	st	Z, r24
{
#if defined(CONTROL_ONLY_DEVICE) || defined(ORDERED_EP_CONFIG)
	Endpoint_SelectEndpoint(Number);
	Endpoint_EnableEndpoint();

	UECFG1X = 0;
     630:	ed ee       	ldi	r30, 0xED	; 237
     632:	f0 e0       	ldi	r31, 0x00	; 0
     634:	10 82       	st	Z, r1
	UECFG0X = UECFG0XData;
     636:	60 93 ec 00 	sts	0x00EC, r22
	UECFG1X = UECFG1XData;
     63a:	40 83       	st	Z, r20
			 *  \return Boolean \c true if the currently selected endpoint has been configured, \c false otherwise.
			 */
			static inline bool Endpoint_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsConfigured(void)
			{
				return ((UESTA0X & (1 << CFGOK)) ? true : false);
     63c:	80 91 ee 00 	lds	r24, 0x00EE
	}

	Endpoint_SelectEndpoint(Number);
	return true;
#endif
}
     640:	88 1f       	adc	r24, r24
     642:	88 27       	eor	r24, r24
     644:	88 1f       	adc	r24, r24
     646:	08 95       	ret

00000648 <Endpoint_ConfigureEndpointTable>:
uint8_t USB_Device_ControlEndpointSize = ENDPOINT_CONTROLEP_DEFAULT_SIZE;
#endif

bool Endpoint_ConfigureEndpointTable(const USB_Endpoint_Table_t* const Table,
                                     const uint8_t Entries)
{
     648:	0f 93       	push	r16
     64a:	1f 93       	push	r17
     64c:	cf 93       	push	r28
     64e:	df 93       	push	r29
     650:	16 2f       	mov	r17, r22
	{
		if (!(Table[i].Address))
		  continue;
	
		if (!(Endpoint_ConfigureEndpoint(Table[i].Address, Table[i].Type, Table[i].Size, Table[i].Banks)))
		  return false;
     652:	ec 01       	movw	r28, r24
#endif

bool Endpoint_ConfigureEndpointTable(const USB_Endpoint_Table_t* const Table,
                                     const uint8_t Entries)
{
	for (uint8_t i = 0; i < Entries; i++)
     654:	00 e0       	ldi	r16, 0x00	; 0
     656:	2a c0       	rjmp	.+84     	; 0x6ac <Endpoint_ConfigureEndpointTable+0x64>
	{
		if (!(Table[i].Address))
     658:	98 81       	ld	r25, Y
     65a:	99 23       	and	r25, r25
     65c:	29 f1       	breq	.+74     	; 0x6a8 <Endpoint_ConfigureEndpointTable+0x60>
		  continue;
	
		if (!(Endpoint_ConfigureEndpoint(Table[i].Address, Table[i].Type, Table[i].Size, Table[i].Banks)))
     65e:	6b 81       	ldd	r22, Y+3	; 0x03
     660:	e9 81       	ldd	r30, Y+1	; 0x01
     662:	fa 81       	ldd	r31, Y+2	; 0x02
     664:	2c 81       	ldd	r18, Y+4	; 0x04
			static inline bool Endpoint_ConfigureEndpoint(const uint8_t Address,
			                                              const uint8_t Type,
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);
     666:	89 2f       	mov	r24, r25
     668:	8f 70       	andi	r24, 0x0F	; 15

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
     66a:	85 30       	cpi	r24, 0x05	; 5
     66c:	18 f5       	brcc	.+70     	; 0x6b4 <Endpoint_ConfigureEndpointTable+0x6c>
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
				                                      ((Type << EPTYPE0) | ((Address & ENDPOINT_DIR_IN) ? (1 << EPDIR) : 0)),
     66e:	62 95       	swap	r22
     670:	66 0f       	add	r22, r22
     672:	66 0f       	add	r22, r22
     674:	60 7c       	andi	r22, 0xC0	; 192
     676:	99 1f       	adc	r25, r25
     678:	99 27       	eor	r25, r25
     67a:	99 1f       	adc	r25, r25
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
     67c:	69 2b       	or	r22, r25
     67e:	22 30       	cpi	r18, 0x02	; 2
     680:	10 f0       	brcs	.+4      	; 0x686 <Endpoint_ConfigureEndpointTable+0x3e>
     682:	96 e0       	ldi	r25, 0x06	; 6
     684:	01 c0       	rjmp	.+2      	; 0x688 <Endpoint_ConfigureEndpointTable+0x40>
     686:	92 e0       	ldi	r25, 0x02	; 2
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes) ATTR_WARN_UNUSED_RESULT ATTR_CONST
			                                                                       ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;
     688:	28 e0       	ldi	r18, 0x08	; 8
     68a:	30 e0       	ldi	r19, 0x00	; 0
		/* Inline Functions: */
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes) ATTR_WARN_UNUSED_RESULT ATTR_CONST
			                                                                       ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
     68c:	40 e0       	ldi	r20, 0x00	; 0
     68e:	03 c0       	rjmp	.+6      	; 0x696 <Endpoint_ConfigureEndpointTable+0x4e>
				uint16_t CheckBytes = 8;

				while (CheckBytes < Bytes)
				{
					MaskVal++;
     690:	4f 5f       	subi	r20, 0xFF	; 255
					CheckBytes <<= 1;
     692:	22 0f       	add	r18, r18
     694:	33 1f       	adc	r19, r19
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while (CheckBytes < Bytes)
     696:	2e 17       	cp	r18, r30
     698:	3f 07       	cpc	r19, r31
     69a:	d0 f3       	brcs	.-12     	; 0x690 <Endpoint_ConfigureEndpointTable+0x48>
				{
					MaskVal++;
					CheckBytes <<= 1;
				}

				return (MaskVal << EPSIZE0);
     69c:	42 95       	swap	r20
     69e:	40 7f       	andi	r20, 0xF0	; 240
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
     6a0:	49 2b       	or	r20, r25
     6a2:	be df       	rcall	.-132    	; 0x620 <Endpoint_ConfigureEndpoint_Prv>
     6a4:	88 23       	and	r24, r24
     6a6:	31 f0       	breq	.+12     	; 0x6b4 <Endpoint_ConfigureEndpointTable+0x6c>
     6a8:	0f 5f       	subi	r16, 0xFF	; 255
#endif

bool Endpoint_ConfigureEndpointTable(const USB_Endpoint_Table_t* const Table,
                                     const uint8_t Entries)
{
	for (uint8_t i = 0; i < Entries; i++)
     6aa:	25 96       	adiw	r28, 0x05	; 5
     6ac:	01 17       	cp	r16, r17
     6ae:	a1 f6       	brne	.-88     	; 0x658 <Endpoint_ConfigureEndpointTable+0x10>
     6b0:	81 e0       	ldi	r24, 0x01	; 1
	
		if (!(Endpoint_ConfigureEndpoint(Table[i].Address, Table[i].Type, Table[i].Size, Table[i].Banks)))
		  return false;
	}
	
	return true;
     6b2:	01 c0       	rjmp	.+2      	; 0x6b6 <Endpoint_ConfigureEndpointTable+0x6e>
     6b4:	80 e0       	ldi	r24, 0x00	; 0
	{
		if (!(Table[i].Address))
		  continue;
	
		if (!(Endpoint_ConfigureEndpoint(Table[i].Address, Table[i].Type, Table[i].Size, Table[i].Banks)))
		  return false;
     6b6:	df 91       	pop	r29
	}
	
	return true;
}
     6b8:	cf 91       	pop	r28
     6ba:	1f 91       	pop	r17
     6bc:	0f 91       	pop	r16
     6be:	08 95       	ret

000006c0 <Endpoint_ClearStatusStage>:
     6c0:	80 91 c3 01 	lds	r24, 0x01C3
	}
}

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
     6c4:	87 ff       	sbrs	r24, 7
     6c6:	11 c0       	rjmp	.+34     	; 0x6ea <Endpoint_ClearStatusStage+0x2a>
     6c8:	03 c0       	rjmp	.+6      	; 0x6d0 <Endpoint_ClearStatusStage+0x10>
	{
		while (!(Endpoint_IsOUTReceived()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
     6ca:	8e b3       	in	r24, 0x1e	; 30
     6cc:	88 23       	and	r24, r24
     6ce:	b1 f0       	breq	.+44     	; 0x6fc <Endpoint_ClearStatusStage+0x3c>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     6d0:	80 91 e8 00 	lds	r24, 0x00E8

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
	{
		while (!(Endpoint_IsOUTReceived()))
     6d4:	82 ff       	sbrs	r24, 2
     6d6:	f9 cf       	rjmp	.-14     	; 0x6ca <Endpoint_ClearStatusStage+0xa>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     6d8:	80 91 e8 00 	lds	r24, 0x00E8
     6dc:	8b 77       	andi	r24, 0x7B	; 123
     6de:	80 93 e8 00 	sts	0x00E8, r24
     6e2:	08 95       	ret
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
     6e4:	8e b3       	in	r24, 0x1e	; 30
     6e6:	88 23       	and	r24, r24
     6e8:	49 f0       	breq	.+18     	; 0x6fc <Endpoint_ClearStatusStage+0x3c>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     6ea:	80 91 e8 00 	lds	r24, 0x00E8

		Endpoint_ClearOUT();
	}
	else
	{
		while (!(Endpoint_IsINReady()))
     6ee:	80 ff       	sbrs	r24, 0
     6f0:	f9 cf       	rjmp	.-14     	; 0x6e4 <Endpoint_ClearStatusStage+0x24>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     6f2:	80 91 e8 00 	lds	r24, 0x00E8
     6f6:	8e 77       	andi	r24, 0x7E	; 126
     6f8:	80 93 e8 00 	sts	0x00E8, r24
     6fc:	08 95       	ret

000006fe <Endpoint_WaitUntilReady>:
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
     6fe:	80 91 e4 00 	lds	r24, 0x00E4
     702:	90 91 e5 00 	lds	r25, 0x00E5
     706:	45 e6       	ldi	r20, 0x65	; 101
     708:	01 c0       	rjmp	.+2      	; 0x70c <Endpoint_WaitUntilReady+0xe>
     70a:	c9 01       	movw	r24, r18
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
     70c:	20 91 ec 00 	lds	r18, 0x00EC
     710:	20 ff       	sbrs	r18, 0
     712:	22 c0       	rjmp	.+68     	; 0x758 <Endpoint_WaitUntilReady+0x5a>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     714:	20 91 e8 00 	lds	r18, 0x00E8

	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
     718:	20 fd       	sbrc	r18, 0
     71a:	14 c0       	rjmp	.+40     	; 0x744 <Endpoint_WaitUntilReady+0x46>
		{
			if (Endpoint_IsOUTReceived())
			  return ENDPOINT_READYWAIT_NoError;
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     71c:	2e b3       	in	r18, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     71e:	22 23       	and	r18, r18
     720:	99 f0       	breq	.+38     	; 0x748 <Endpoint_WaitUntilReady+0x4a>
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     722:	25 30       	cpi	r18, 0x05	; 5
     724:	99 f0       	breq	.+38     	; 0x74c <Endpoint_WaitUntilReady+0x4e>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
     726:	20 91 eb 00 	lds	r18, 0x00EB
		  return ENDPOINT_READYWAIT_BusSuspended;
		else if (Endpoint_IsStalled())
     72a:	25 fd       	sbrc	r18, 5
     72c:	11 c0       	rjmp	.+34     	; 0x750 <Endpoint_WaitUntilReady+0x52>
     72e:	20 91 e4 00 	lds	r18, 0x00E4
     732:	30 91 e5 00 	lds	r19, 0x00E5
		  return ENDPOINT_READYWAIT_EndpointStalled;

		uint16_t CurrentFrameNumber = USB_Device_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
     736:	28 17       	cp	r18, r24
     738:	39 07       	cpc	r19, r25
     73a:	41 f3       	breq	.-48     	; 0x70c <Endpoint_WaitUntilReady+0xe>
     73c:	41 50       	subi	r20, 0x01	; 1
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
     73e:	29 f7       	brne	.-54     	; 0x70a <Endpoint_WaitUntilReady+0xc>
			  return ENDPOINT_READYWAIT_Timeout;
     740:	84 e0       	ldi	r24, 0x04	; 4
     742:	08 95       	ret
	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
     744:	80 e0       	ldi	r24, 0x00	; 0
     746:	08 95       	ret
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
     748:	82 e0       	ldi	r24, 0x02	; 2
     74a:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_READYWAIT_BusSuspended;
     74c:	83 e0       	ldi	r24, 0x03	; 3
     74e:	08 95       	ret
		else if (Endpoint_IsStalled())
		  return ENDPOINT_READYWAIT_EndpointStalled;
     750:	81 e0       	ldi	r24, 0x01	; 1
     752:	08 95       	ret
			  return ENDPOINT_READYWAIT_NoError;
		}
		else
		{
			if (Endpoint_IsOUTReceived())
			  return ENDPOINT_READYWAIT_NoError;
     754:	80 e0       	ldi	r24, 0x00	; 0

			if (!(TimeoutMSRem--))
			  return ENDPOINT_READYWAIT_Timeout;
		}
	}
}
     756:	08 95       	ret
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     758:	20 91 e8 00 	lds	r18, 0x00E8
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
		}
		else
		{
			if (Endpoint_IsOUTReceived())
     75c:	22 ff       	sbrs	r18, 2
     75e:	de cf       	rjmp	.-68     	; 0x71c <Endpoint_WaitUntilReady+0x1e>
     760:	f9 cf       	rjmp	.-14     	; 0x754 <Endpoint_WaitUntilReady+0x56>

00000762 <USB_ResetInterface>:
{
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
     762:	3f d0       	rcall	.+126    	; 0x7e2 <USB_INT_DisableAllInterrupts>
     764:	41 d0       	rcall	.+130    	; 0x7e8 <USB_INT_ClearAllInterrupts>
	USB_INT_ClearAllInterrupts();
     766:	80 91 d8 00 	lds	r24, 0x00D8
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
     76a:	8f 77       	andi	r24, 0x7F	; 127
     76c:	80 93 d8 00 	sts	0x00D8, r24
     770:	80 91 d8 00 	lds	r24, 0x00D8
				USBCON |=  (1 << USBE);
     774:	80 68       	ori	r24, 0x80	; 128
     776:	80 93 d8 00 	sts	0x00D8, r24
     77a:	80 91 d8 00 	lds	r24, 0x00D8
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
     77e:	8f 7d       	andi	r24, 0xDF	; 223
     780:	80 93 d8 00 	sts	0x00D8, r24
     784:	19 bc       	out	0x29, r1	; 41
     786:	82 e0       	ldi	r24, 0x02	; 2

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
     788:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
     78a:	09 b4       	in	r0, 0x29	; 41
     78c:	00 fe       	sbrs	r0, 0

		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			#if defined(USB_SERIES_2_AVR)
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
     78e:	fd cf       	rjmp	.-6      	; 0x78a <USB_ResetInterface+0x28>
     790:	1e ba       	out	0x1e, r1	; 30
     792:	10 92 bf 01 	sts	0x01BF, r1

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState                 = DEVICE_STATE_Unattached;
	USB_Device_ConfigurationNumber  = 0;
     796:	10 92 c1 01 	sts	0x01C1, r1

	#if !defined(NO_DEVICE_REMOTE_WAKEUP)
	USB_Device_RemoteWakeupEnabled  = false;
     79a:	10 92 c0 01 	sts	0x01C0, r1
	#endif

	#if !defined(NO_DEVICE_SELF_POWER)
	USB_Device_CurrentlySelfPowered = false;
     79e:	80 e0       	ldi	r24, 0x00	; 0
     7a0:	60 e0       	ldi	r22, 0x00	; 0
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
     7a2:	42 e0       	ldi	r20, 0x02	; 2
     7a4:	3d df       	rcall	.-390    	; 0x620 <Endpoint_ConfigureEndpoint_Prv>
     7a6:	80 91 e1 00 	lds	r24, 0x00E1
     7aa:	8e 7f       	andi	r24, 0xFE	; 254
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
     7ac:	80 93 e1 00 	sts	0x00E1, r24
     7b0:	80 91 e2 00 	lds	r24, 0x00E2
     7b4:	81 60       	ori	r24, 0x01	; 1
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
     7b6:	80 93 e2 00 	sts	0x00E2, r24
     7ba:	80 91 e2 00 	lds	r24, 0x00E2
     7be:	88 60       	ori	r24, 0x08	; 8
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
     7c0:	80 93 e2 00 	sts	0x00E2, r24
     7c4:	80 91 e0 00 	lds	r24, 0x00E0
     7c8:	8e 7f       	andi	r24, 0xFE	; 254
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
     7ca:	80 93 e0 00 	sts	0x00E0, r24
     7ce:	08 95       	ret

000007d0 <USB_Init>:
     7d0:	e3 e6       	ldi	r30, 0x63	; 99
     7d2:	f0 e0       	ldi	r31, 0x00	; 0
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
     7d4:	80 81       	ld	r24, Z
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON |=  (1 << UVREGE);
			#else
				REGCR  &= ~(1 << REGDIS);
     7d6:	8e 7f       	andi	r24, 0xFE	; 254
     7d8:	80 83       	st	Z, r24
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
     7da:	81 e0       	ldi	r24, 0x01	; 1
     7dc:	80 93 c2 01 	sts	0x01C2, r24

	USB_ResetInterface();
     7e0:	c0 cf       	rjmp	.-128    	; 0x762 <USB_ResetInterface>

000007e2 <USB_INT_DisableAllInterrupts>:
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
     7e2:	10 92 e2 00 	sts	0x00E2, r1
	#endif
}
     7e6:	08 95       	ret

000007e8 <USB_INT_ClearAllInterrupts>:
	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
     7e8:	10 92 e1 00 	sts	0x00E1, r1
	#endif
}
     7ec:	08 95       	ret

000007ee <__vector_11>:

ISR(USB_GEN_vect, ISR_BLOCK)
{
     7ee:	1f 92       	push	r1
     7f0:	0f 92       	push	r0
     7f2:	0f b6       	in	r0, 0x3f	; 63
     7f4:	0f 92       	push	r0
     7f6:	11 24       	eor	r1, r1
     7f8:	2f 93       	push	r18
     7fa:	3f 93       	push	r19
     7fc:	4f 93       	push	r20
     7fe:	5f 93       	push	r21
     800:	6f 93       	push	r22
     802:	7f 93       	push	r23
     804:	8f 93       	push	r24
     806:	9f 93       	push	r25
     808:	af 93       	push	r26
     80a:	bf 93       	push	r27
     80c:	ef 93       	push	r30
     80e:	ff 93       	push	r31
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
					case USB_INT_SOFI:
						return (UDINT  & (1 << SOFI));
     810:	80 91 e1 00 	lds	r24, 0x00E1
	#if defined(USB_CAN_BE_DEVICE)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
     814:	82 ff       	sbrs	r24, 2
     816:	0a c0       	rjmp	.+20     	; 0x82c <__vector_11+0x3e>
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
					case USB_INT_SOFI:
						return (UDIEN  & (1 << SOFE));
     818:	80 91 e2 00 	lds	r24, 0x00E2
     81c:	82 ff       	sbrs	r24, 2
     81e:	06 c0       	rjmp	.+12     	; 0x82c <__vector_11+0x3e>
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
						break;
					case USB_INT_SOFI:
						UDINT  &= ~(1 << SOFI);
     820:	80 91 e1 00 	lds	r24, 0x00E1
     824:	8b 7f       	andi	r24, 0xFB	; 251
     826:	80 93 e1 00 	sts	0x00E1, r24
	{
		USB_INT_Clear(USB_INT_SOFI);

		EVENT_USB_Device_StartOfFrame();
     82a:	23 d2       	rcall	.+1094   	; 0xc72 <USB_Event_Stub>
     82c:	80 91 e1 00 	lds	r24, 0x00E1
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
     830:	80 ff       	sbrs	r24, 0
			EVENT_USB_Device_Disconnect();
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
     832:	16 c0       	rjmp	.+44     	; 0x860 <__vector_11+0x72>
     834:	80 91 e2 00 	lds	r24, 0x00E2
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
     838:	80 ff       	sbrs	r24, 0
     83a:	12 c0       	rjmp	.+36     	; 0x860 <__vector_11+0x72>
     83c:	80 91 e2 00 	lds	r24, 0x00E2
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
     840:	8e 7f       	andi	r24, 0xFE	; 254
     842:	80 93 e2 00 	sts	0x00E2, r24
     846:	80 91 e2 00 	lds	r24, 0x00E2
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
     84a:	80 61       	ori	r24, 0x10	; 16
     84c:	80 93 e2 00 	sts	0x00E2, r24
     850:	80 91 d8 00 	lds	r24, 0x00D8
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON |=  (1 << FRZCLK);
     854:	80 62       	ori	r24, 0x20	; 32
     856:	80 93 d8 00 	sts	0x00D8, r24
     85a:	19 bc       	out	0x29, r1	; 41
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
     85c:	1e ba       	out	0x1e, r1	; 30

		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		  USB_PLL_Off();

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
     85e:	4a dd       	rcall	.-1388   	; 0x2f4 <EVENT_USB_Device_Disconnect>
		EVENT_USB_Device_Disconnect();
     860:	80 91 e1 00 	lds	r24, 0x00E1
					case USB_INT_IDTI:
						return (USBINT & (1 << IDTI));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
     864:	84 ff       	sbrs	r24, 4
     866:	2b c0       	rjmp	.+86     	; 0x8be <__vector_11+0xd0>
		USB_DeviceState = DEVICE_STATE_Suspended;
		EVENT_USB_Device_Suspend();
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
     868:	80 91 e2 00 	lds	r24, 0x00E2
					case USB_INT_IDTI:
						return (USBCON & (1 << IDTE));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
     86c:	84 ff       	sbrs	r24, 4
     86e:	27 c0       	rjmp	.+78     	; 0x8be <__vector_11+0xd0>
     870:	19 bc       	out	0x29, r1	; 41
     872:	82 e0       	ldi	r24, 0x02	; 2

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
     874:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
     876:	09 b4       	in	r0, 0x29	; 41
     878:	00 fe       	sbrs	r0, 0
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
     87a:	fd cf       	rjmp	.-6      	; 0x876 <__vector_11+0x88>
     87c:	80 91 d8 00 	lds	r24, 0x00D8
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
     880:	8f 7d       	andi	r24, 0xDF	; 223
     882:	80 93 d8 00 	sts	0x00D8, r24
     886:	80 91 e1 00 	lds	r24, 0x00E1
						USBINT &= ~(1 << IDTI);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
     88a:	8f 7e       	andi	r24, 0xEF	; 239
     88c:	80 93 e1 00 	sts	0x00E1, r24
     890:	80 91 e2 00 	lds	r24, 0x00E2
						USBCON &= ~(1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
     894:	8f 7e       	andi	r24, 0xEF	; 239
     896:	80 93 e2 00 	sts	0x00E2, r24
     89a:	80 91 e2 00 	lds	r24, 0x00E2
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
     89e:	81 60       	ori	r24, 0x01	; 1
     8a0:	80 93 e2 00 	sts	0x00E2, r24
     8a4:	80 91 bf 01 	lds	r24, 0x01BF
		USB_INT_Clear(USB_INT_WAKEUPI);

		USB_INT_Disable(USB_INT_WAKEUPI);
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_Device_ConfigurationNumber)
     8a8:	88 23       	and	r24, r24
     8aa:	21 f4       	brne	.+8      	; 0x8b4 <__vector_11+0xc6>
     8ac:	80 91 e3 00 	lds	r24, 0x00E3
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
     8b0:	87 ff       	sbrs	r24, 7
     8b2:	02 c0       	rjmp	.+4      	; 0x8b8 <__vector_11+0xca>
		  USB_DeviceState = DEVICE_STATE_Configured;
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
     8b4:	84 e0       	ldi	r24, 0x04	; 4
     8b6:	01 c0       	rjmp	.+2      	; 0x8ba <__vector_11+0xcc>
     8b8:	81 e0       	ldi	r24, 0x01	; 1
     8ba:	8e bb       	out	0x1e, r24	; 30
     8bc:	16 dd       	rcall	.-1492   	; 0x2ea <EVENT_USB_Device_Connect>
     8be:	80 91 e1 00 	lds	r24, 0x00E1

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
     8c2:	83 ff       	sbrs	r24, 3
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
     8c4:	26 c0       	rjmp	.+76     	; 0x912 <__vector_11+0x124>
     8c6:	80 91 e2 00 	lds	r24, 0x00E2
		#else
		EVENT_USB_Device_WakeUp();
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
     8ca:	83 ff       	sbrs	r24, 3
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
     8cc:	22 c0       	rjmp	.+68     	; 0x912 <__vector_11+0x124>
     8ce:	80 91 e1 00 	lds	r24, 0x00E1
     8d2:	87 7f       	andi	r24, 0xF7	; 247
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
     8d4:	80 93 e1 00 	sts	0x00E1, r24
     8d8:	82 e0       	ldi	r24, 0x02	; 2
     8da:	8e bb       	out	0x1e, r24	; 30
     8dc:	10 92 bf 01 	sts	0x01BF, r1
	{
		USB_INT_Clear(USB_INT_EORSTI);

		USB_DeviceState                = DEVICE_STATE_Default;
     8e0:	80 91 e1 00 	lds	r24, 0x00E1
		USB_Device_ConfigurationNumber = 0;
     8e4:	8e 7f       	andi	r24, 0xFE	; 254
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
     8e6:	80 93 e1 00 	sts	0x00E1, r24
     8ea:	80 91 e2 00 	lds	r24, 0x00E2
     8ee:	8e 7f       	andi	r24, 0xFE	; 254
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
     8f0:	80 93 e2 00 	sts	0x00E2, r24
     8f4:	80 91 e2 00 	lds	r24, 0x00E2
     8f8:	80 61       	ori	r24, 0x10	; 16
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
     8fa:	80 93 e2 00 	sts	0x00E2, r24
     8fe:	80 e0       	ldi	r24, 0x00	; 0
     900:	60 e0       	ldi	r22, 0x00	; 0
     902:	42 e0       	ldi	r20, 0x02	; 2
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
     904:	8d de       	rcall	.-742    	; 0x620 <Endpoint_ConfigureEndpoint_Prv>
     906:	80 91 f0 00 	lds	r24, 0x00F0
     90a:	88 60       	ori	r24, 0x08	; 8
     90c:	80 93 f0 00 	sts	0x00F0, r24
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX |= (1 << RXSTPE);
     910:	b0 d1       	rcall	.+864    	; 0xc72 <USB_Event_Stub>
     912:	ff 91       	pop	r31
     914:	ef 91       	pop	r30
     916:	bf 91       	pop	r27

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
     918:	af 91       	pop	r26
     91a:	9f 91       	pop	r25
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
     91c:	8f 91       	pop	r24
     91e:	7f 91       	pop	r23
     920:	6f 91       	pop	r22
     922:	5f 91       	pop	r21
     924:	4f 91       	pop	r20
     926:	3f 91       	pop	r19
     928:	2f 91       	pop	r18
     92a:	0f 90       	pop	r0
     92c:	0f be       	out	0x3f, r0	; 63
     92e:	0f 90       	pop	r0
     930:	1f 90       	pop	r1
     932:	18 95       	reti

00000934 <__vector_12>:
     934:	1f 92       	push	r1
     936:	0f 92       	push	r0
     938:	0f b6       	in	r0, 0x3f	; 63
     93a:	0f 92       	push	r0
     93c:	11 24       	eor	r1, r1

#if defined(INTERRUPT_CONTROL_ENDPOINT) && defined(USB_CAN_BE_DEVICE)
ISR(USB_COM_vect, ISR_BLOCK)
{
     93e:	2f 93       	push	r18
     940:	3f 93       	push	r19
     942:	4f 93       	push	r20
     944:	5f 93       	push	r21
     946:	6f 93       	push	r22
     948:	7f 93       	push	r23
     94a:	8f 93       	push	r24
     94c:	9f 93       	push	r25
     94e:	af 93       	push	r26
     950:	bf 93       	push	r27
     952:	cf 93       	push	r28
     954:	ef 93       	push	r30
     956:	ff 93       	push	r31
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
     958:	c0 91 e9 00 	lds	r28, 0x00E9
     95c:	cf 70       	andi	r28, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
     95e:	80 91 ec 00 	lds	r24, 0x00EC
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     962:	10 92 e9 00 	sts	0x00E9, r1
						break;
					case USB_INT_SOFI:
						UDIEN  &= ~(1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX &= ~(1 << RXSTPE);
     966:	80 91 f0 00 	lds	r24, 0x00F0
     96a:	87 7f       	andi	r24, 0xF7	; 247
     96c:	80 93 f0 00 	sts	0x00F0, r24
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				sei();
     970:	78 94       	sei
	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Disable(USB_INT_RXSTPI);

	GlobalInterruptEnable();

	USB_Device_ProcessControlRequest();
     972:	1b d0       	rcall	.+54     	; 0x9aa <USB_Device_ProcessControlRequest>
     974:	10 92 e9 00 	sts	0x00E9, r1
     978:	80 91 f0 00 	lds	r24, 0x00F0
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX |= (1 << RXSTPE);
     97c:	88 60       	ori	r24, 0x08	; 8
     97e:	80 93 f0 00 	sts	0x00F0, r24
     982:	c0 93 e9 00 	sts	0x00E9, r28
     986:	ff 91       	pop	r31

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Enable(USB_INT_RXSTPI);
	Endpoint_SelectEndpoint(PrevSelectedEndpoint);
}
     988:	ef 91       	pop	r30
     98a:	cf 91       	pop	r28
     98c:	bf 91       	pop	r27
     98e:	af 91       	pop	r26
     990:	9f 91       	pop	r25
     992:	8f 91       	pop	r24
     994:	7f 91       	pop	r23
     996:	6f 91       	pop	r22
     998:	5f 91       	pop	r21
     99a:	4f 91       	pop	r20
     99c:	3f 91       	pop	r19
     99e:	2f 91       	pop	r18
     9a0:	0f 90       	pop	r0
     9a2:	0f be       	out	0x3f, r0	; 63
     9a4:	0f 90       	pop	r0
     9a6:	1f 90       	pop	r1
     9a8:	18 95       	reti

000009aa <USB_Device_ProcessControlRequest>:
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_Device_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
     9aa:	1f 93       	push	r17
     9ac:	cf 93       	push	r28
     9ae:	df 93       	push	r29
     9b0:	cd b7       	in	r28, 0x3d	; 61
     9b2:	de b7       	in	r29, 0x3e	; 62
     9b4:	ac 97       	sbiw	r28, 0x2c	; 44
     9b6:	0f b6       	in	r0, 0x3f	; 63
     9b8:	f8 94       	cli
     9ba:	de bf       	out	0x3e, r29	; 62
     9bc:	0f be       	out	0x3f, r0	; 63
     9be:	cd bf       	out	0x3d, r28	; 61
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
     9c0:	80 e0       	ldi	r24, 0x00	; 0
	USB_ControlRequest.bRequest      = Endpoint_Read_8();
	USB_ControlRequest.wValue        = Endpoint_Read_16_LE();
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;
     9c2:	e3 ec       	ldi	r30, 0xC3	; 195
     9c4:	f1 e0       	ldi	r31, 0x01	; 1
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
     9c6:	90 91 f1 00 	lds	r25, 0x00F1

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_8();
     9ca:	91 93       	st	Z+, r25
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
     9cc:	8f 5f       	subi	r24, 0xFF	; 255
     9ce:	88 30       	cpi	r24, 0x08	; 8
     9d0:	d1 f7       	brne	.-12     	; 0x9c6 <USB_Device_ProcessControlRequest+0x1c>
	  *(RequestHeader++) = Endpoint_Read_8();
	#endif

	EVENT_USB_Device_ControlRequest();
     9d2:	9f dc       	rcall	.-1730   	; 0x312 <EVENT_USB_Device_ControlRequest>
     9d4:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     9d8:	83 ff       	sbrs	r24, 3

	if (Endpoint_IsSETUPReceived())
     9da:	33 c1       	rjmp	.+614    	; 0xc42 <USB_Device_ProcessControlRequest+0x298>
     9dc:	80 91 c3 01 	lds	r24, 0x01C3
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
     9e0:	20 91 c4 01 	lds	r18, 0x01C4

		switch (USB_ControlRequest.bRequest)
     9e4:	25 30       	cpi	r18, 0x05	; 5
     9e6:	09 f4       	brne	.+2      	; 0x9ea <USB_Device_ProcessControlRequest+0x40>
     9e8:	84 c0       	rjmp	.+264    	; 0xaf2 <USB_Device_ProcessControlRequest+0x148>
     9ea:	26 30       	cpi	r18, 0x06	; 6
     9ec:	40 f4       	brcc	.+16     	; 0x9fe <USB_Device_ProcessControlRequest+0x54>
     9ee:	21 30       	cpi	r18, 0x01	; 1
     9f0:	a1 f1       	breq	.+104    	; 0xa5a <USB_Device_ProcessControlRequest+0xb0>
     9f2:	21 30       	cpi	r18, 0x01	; 1
     9f4:	70 f0       	brcs	.+28     	; 0xa12 <USB_Device_ProcessControlRequest+0x68>
     9f6:	23 30       	cpi	r18, 0x03	; 3
     9f8:	09 f0       	breq	.+2      	; 0x9fc <USB_Device_ProcessControlRequest+0x52>
     9fa:	23 c1       	rjmp	.+582    	; 0xc42 <USB_Device_ProcessControlRequest+0x298>
     9fc:	2e c0       	rjmp	.+92     	; 0xa5a <USB_Device_ProcessControlRequest+0xb0>
     9fe:	28 30       	cpi	r18, 0x08	; 8
     a00:	09 f4       	brne	.+2      	; 0xa04 <USB_Device_ProcessControlRequest+0x5a>
     a02:	f2 c0       	rjmp	.+484    	; 0xbe8 <USB_Device_ProcessControlRequest+0x23e>
     a04:	29 30       	cpi	r18, 0x09	; 9
     a06:	09 f4       	brne	.+2      	; 0xa0a <USB_Device_ProcessControlRequest+0x60>
     a08:	01 c1       	rjmp	.+514    	; 0xc0c <USB_Device_ProcessControlRequest+0x262>
     a0a:	26 30       	cpi	r18, 0x06	; 6
     a0c:	09 f0       	breq	.+2      	; 0xa10 <USB_Device_ProcessControlRequest+0x66>
     a0e:	19 c1       	rjmp	.+562    	; 0xc42 <USB_Device_ProcessControlRequest+0x298>
     a10:	92 c0       	rjmp	.+292    	; 0xb36 <USB_Device_ProcessControlRequest+0x18c>
     a12:	80 38       	cpi	r24, 0x80	; 128
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
     a14:	21 f0       	breq	.+8      	; 0xa1e <USB_Device_ProcessControlRequest+0x74>
     a16:	82 38       	cpi	r24, 0x82	; 130
     a18:	09 f0       	breq	.+2      	; 0xa1c <USB_Device_ProcessControlRequest+0x72>
     a1a:	13 c1       	rjmp	.+550    	; 0xc42 <USB_Device_ProcessControlRequest+0x298>
     a1c:	08 c0       	rjmp	.+16     	; 0xa2e <USB_Device_ProcessControlRequest+0x84>
     a1e:	80 91 c0 01 	lds	r24, 0x01C0
	Endpoint_ClearOUT();
}

static void USB_Device_GetStatus(void)
{
	uint8_t CurrentStatus = 0;
     a22:	90 91 c1 01 	lds	r25, 0x01C1
			if (USB_Device_CurrentlySelfPowered)
			  CurrentStatus |= FEATURE_SELFPOWERED_ENABLED;
			#endif

			#if !defined(NO_DEVICE_REMOTE_WAKEUP)
			if (USB_Device_RemoteWakeupEnabled)
     a26:	99 23       	and	r25, r25
     a28:	71 f0       	breq	.+28     	; 0xa46 <USB_Device_ProcessControlRequest+0x9c>
     a2a:	82 60       	ori	r24, 0x02	; 2
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
     a2c:	0c c0       	rjmp	.+24     	; 0xa46 <USB_Device_ProcessControlRequest+0x9c>
     a2e:	80 91 c7 01 	lds	r24, 0x01C7
			#endif
			break;
		case (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_ENDPOINT):
			#if !defined(CONTROL_ONLY_DEVICE)
			Endpoint_SelectEndpoint((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
     a32:	8f 70       	andi	r24, 0x0F	; 15
     a34:	80 93 e9 00 	sts	0x00E9, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     a38:	90 91 eb 00 	lds	r25, 0x00EB
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
     a3c:	81 e0       	ldi	r24, 0x01	; 1

			CurrentStatus = Endpoint_IsStalled();
     a3e:	95 ff       	sbrs	r25, 5
     a40:	80 e0       	ldi	r24, 0x00	; 0
     a42:	10 92 e9 00 	sts	0x00E9, r1
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     a46:	90 91 e8 00 	lds	r25, 0x00E8
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     a4a:	97 7f       	andi	r25, 0xF7	; 247
     a4c:	90 93 e8 00 	sts	0x00E8, r25
     a50:	80 93 f1 00 	sts	0x00F1, r24
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
     a54:	10 92 f1 00 	sts	0x00F1, r1
				UEDATX = (Data >> 8);
     a58:	d2 c0       	rjmp	.+420    	; 0xbfe <USB_Device_ProcessControlRequest+0x254>
     a5a:	88 23       	and	r24, r24
				}

				break;
			case REQ_ClearFeature:
			case REQ_SetFeature:
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
     a5c:	19 f0       	breq	.+6      	; 0xa64 <USB_Device_ProcessControlRequest+0xba>
     a5e:	82 30       	cpi	r24, 0x02	; 2
     a60:	09 f0       	breq	.+2      	; 0xa64 <USB_Device_ProcessControlRequest+0xba>
     a62:	ef c0       	rjmp	.+478    	; 0xc42 <USB_Device_ProcessControlRequest+0x298>
     a64:	90 e0       	ldi	r25, 0x00	; 0
	Endpoint_ClearStatusStage();
}

static void USB_Device_ClearSetFeature(void)
{
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
     a66:	8f 71       	andi	r24, 0x1F	; 31
     a68:	90 70       	andi	r25, 0x00	; 0
     a6a:	00 97       	sbiw	r24, 0x00	; 0
     a6c:	29 f0       	breq	.+10     	; 0xa78 <USB_Device_ProcessControlRequest+0xce>
     a6e:	82 30       	cpi	r24, 0x02	; 2
     a70:	91 05       	cpc	r25, r1
     a72:	09 f0       	breq	.+2      	; 0xa76 <USB_Device_ProcessControlRequest+0xcc>
     a74:	e6 c0       	rjmp	.+460    	; 0xc42 <USB_Device_ProcessControlRequest+0x298>
     a76:	0b c0       	rjmp	.+22     	; 0xa8e <USB_Device_ProcessControlRequest+0xe4>
     a78:	80 91 c5 01 	lds	r24, 0x01C5
	{
		#if !defined(NO_DEVICE_REMOTE_WAKEUP)
		case REQREC_DEVICE:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
     a7c:	81 30       	cpi	r24, 0x01	; 1
     a7e:	09 f0       	breq	.+2      	; 0xa82 <USB_Device_ProcessControlRequest+0xd8>
     a80:	e0 c0       	rjmp	.+448    	; 0xc42 <USB_Device_ProcessControlRequest+0x298>
     a82:	23 30       	cpi	r18, 0x03	; 3
			  USB_Device_RemoteWakeupEnabled = (USB_ControlRequest.bRequest == REQ_SetFeature);
     a84:	09 f0       	breq	.+2      	; 0xa88 <USB_Device_ProcessControlRequest+0xde>
     a86:	80 e0       	ldi	r24, 0x00	; 0
     a88:	80 93 c1 01 	sts	0x01C1, r24
     a8c:	2c c0       	rjmp	.+88     	; 0xae6 <USB_Device_ProcessControlRequest+0x13c>
     a8e:	80 91 c5 01 	lds	r24, 0x01C5

			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
     a92:	88 23       	and	r24, r24
     a94:	41 f5       	brne	.+80     	; 0xae6 <USB_Device_ProcessControlRequest+0x13c>
     a96:	20 91 c7 01 	lds	r18, 0x01C7
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
     a9a:	2f 70       	andi	r18, 0x0F	; 15
     a9c:	09 f4       	brne	.+2      	; 0xaa0 <USB_Device_ProcessControlRequest+0xf6>

				if (EndpointIndex == ENDPOINT_CONTROLEP)
     a9e:	d1 c0       	rjmp	.+418    	; 0xc42 <USB_Device_ProcessControlRequest+0x298>
     aa0:	20 93 e9 00 	sts	0x00E9, r18
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     aa4:	80 91 eb 00 	lds	r24, 0x00EB
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
     aa8:	80 ff       	sbrs	r24, 0
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
     aaa:	1d c0       	rjmp	.+58     	; 0xae6 <USB_Device_ProcessControlRequest+0x13c>
     aac:	80 91 c4 01 	lds	r24, 0x01C4
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
     ab0:	83 30       	cpi	r24, 0x03	; 3
     ab2:	21 f4       	brne	.+8      	; 0xabc <USB_Device_ProcessControlRequest+0x112>
     ab4:	80 91 eb 00 	lds	r24, 0x00EB
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
     ab8:	80 62       	ori	r24, 0x20	; 32
     aba:	13 c0       	rjmp	.+38     	; 0xae2 <USB_Device_ProcessControlRequest+0x138>
     abc:	80 91 eb 00 	lds	r24, 0x00EB
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
     ac0:	80 61       	ori	r24, 0x10	; 16
     ac2:	80 93 eb 00 	sts	0x00EB, r24
     ac6:	81 e0       	ldi	r24, 0x01	; 1
			 *  \param[in] Address  Endpoint address whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t Address)
			{
				UERST = (1 << (Address & ENDPOINT_EPNUM_MASK));
     ac8:	90 e0       	ldi	r25, 0x00	; 0
     aca:	02 c0       	rjmp	.+4      	; 0xad0 <USB_Device_ProcessControlRequest+0x126>
     acc:	88 0f       	add	r24, r24
     ace:	99 1f       	adc	r25, r25
     ad0:	2a 95       	dec	r18
     ad2:	e2 f7       	brpl	.-8      	; 0xacc <USB_Device_ProcessControlRequest+0x122>
     ad4:	80 93 ea 00 	sts	0x00EA, r24
     ad8:	10 92 ea 00 	sts	0x00EA, r1
				UERST = 0;
     adc:	80 91 eb 00 	lds	r24, 0x00EB

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
     ae0:	88 60       	ori	r24, 0x08	; 8
     ae2:	80 93 eb 00 	sts	0x00EB, r24
     ae6:	10 92 e9 00 	sts	0x00E9, r1
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     aea:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     aee:	87 7f       	andi	r24, 0xF7	; 247
     af0:	89 c0       	rjmp	.+274    	; 0xc04 <USB_Device_ProcessControlRequest+0x25a>
     af2:	88 23       	and	r24, r24
					USB_Device_ClearSetFeature();
				}

				break;
			case REQ_SetAddress:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
     af4:	09 f0       	breq	.+2      	; 0xaf8 <USB_Device_ProcessControlRequest+0x14e>
     af6:	a5 c0       	rjmp	.+330    	; 0xc42 <USB_Device_ProcessControlRequest+0x298>
     af8:	10 91 c5 01 	lds	r17, 0x01C5
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t DeviceAddress = (USB_ControlRequest.wValue & 0x7F);
     afc:	1f 77       	andi	r17, 0x7F	; 127
     afe:	80 91 e3 00 	lds	r24, 0x00E3
			#endif

			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				UDADDR = (UDADDR & (1 << ADDEN)) | (Address & 0x7F);
     b02:	80 78       	andi	r24, 0x80	; 128
     b04:	81 2b       	or	r24, r17
     b06:	80 93 e3 00 	sts	0x00E3, r24
     b0a:	80 91 e8 00 	lds	r24, 0x00E8
     b0e:	87 7f       	andi	r24, 0xF7	; 247
     b10:	80 93 e8 00 	sts	0x00E8, r24
     b14:	d5 dd       	rcall	.-1110   	; 0x6c0 <Endpoint_ClearStatusStage>

	USB_Device_SetDeviceAddress(DeviceAddress);

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
     b16:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     b1a:	80 ff       	sbrs	r24, 0
     b1c:	fc cf       	rjmp	.-8      	; 0xb16 <USB_Device_ProcessControlRequest+0x16c>

	while (!(Endpoint_IsINReady()));
     b1e:	80 91 e3 00 	lds	r24, 0x00E3
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address)
			{
				(void)Address;
				
				UDADDR |= (1 << ADDEN);
     b22:	80 68       	ori	r24, 0x80	; 128
     b24:	80 93 e3 00 	sts	0x00E3, r24
     b28:	11 23       	and	r17, r17
     b2a:	11 f0       	breq	.+4      	; 0xb30 <USB_Device_ProcessControlRequest+0x186>

	USB_Device_EnableDeviceAddress(DeviceAddress);

	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
     b2c:	83 e0       	ldi	r24, 0x03	; 3
     b2e:	01 c0       	rjmp	.+2      	; 0xb32 <USB_Device_ProcessControlRequest+0x188>
     b30:	82 e0       	ldi	r24, 0x02	; 2
     b32:	8e bb       	out	0x1e, r24	; 30
     b34:	86 c0       	rjmp	.+268    	; 0xc42 <USB_Device_ProcessControlRequest+0x298>
     b36:	80 58       	subi	r24, 0x80	; 128
     b38:	82 30       	cpi	r24, 0x02	; 2
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_SetAddress();

				break;
			case REQ_GetDescriptor:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
     b3a:	08 f0       	brcs	.+2      	; 0xb3e <USB_Device_ProcessControlRequest+0x194>
     b3c:	82 c0       	rjmp	.+260    	; 0xc42 <USB_Device_ProcessControlRequest+0x298>
     b3e:	80 91 c5 01 	lds	r24, 0x01C5
	    !(defined(USE_FLASH_DESCRIPTORS) || defined(USE_EEPROM_DESCRIPTORS) || defined(USE_RAM_DESCRIPTORS))
	uint8_t DescriptorAddressSpace;
	#endif

	#if !defined(NO_INTERNAL_SERIAL) && (USE_INTERNAL_SERIAL != NO_DESCRIPTOR)
	if (USB_ControlRequest.wValue == ((DTYPE_String << 8) | USE_INTERNAL_SERIAL))
     b42:	90 91 c6 01 	lds	r25, 0x01C6
     b46:	23 e0       	ldi	r18, 0x03	; 3
     b48:	8c 3d       	cpi	r24, 0xDC	; 220
     b4a:	92 07       	cpc	r25, r18
     b4c:	a9 f5       	brne	.+106    	; 0xbb8 <USB_Device_ProcessControlRequest+0x20e>
     b4e:	83 e0       	ldi	r24, 0x03	; 3
     b50:	8c 83       	std	Y+4, r24	; 0x04
	{
		USB_Descriptor_Header_t Header;
		uint16_t                UnicodeString[INTERNAL_SERIAL_LENGTH_BITS / 4];
	} SignatureDescriptor;

	SignatureDescriptor.Header.Type = DTYPE_String;
     b52:	8a e2       	ldi	r24, 0x2A	; 42
     b54:	8b 83       	std	Y+3, r24	; 0x03
	SignatureDescriptor.Header.Size = USB_STRING_LEN(INTERNAL_SERIAL_LENGTH_BITS / 4);
     b56:	5f b7       	in	r21, 0x3f	; 63
     b58:	f8 94       	cli
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
     b5a:	de 01       	movw	r26, r28
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
     b5c:	13 96       	adiw	r26, 0x03	; 3
				__builtin_ssrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				cli();
				#endif

				GCC_MEMORY_BARRIER();
     b5e:	80 e0       	ldi	r24, 0x00	; 0
     b60:	90 e0       	ldi	r25, 0x00	; 0
     b62:	4e e0       	ldi	r20, 0x0E	; 14
     b64:	61 e2       	ldi	r22, 0x21	; 33
			static inline void USB_Device_GetSerialString(uint16_t* const UnicodeString)
			{
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;
     b66:	e4 2f       	mov	r30, r20

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
				{
					uint8_t SerialByte = boot_signature_byte_get(SigReadAddress);
     b68:	f0 e0       	ldi	r31, 0x00	; 0
     b6a:	60 93 57 00 	sts	0x0057, r22
     b6e:	e4 91       	lpm	r30, Z
     b70:	80 ff       	sbrs	r24, 0
     b72:	03 c0       	rjmp	.+6      	; 0xb7a <USB_Device_ProcessControlRequest+0x1d0>

					if (SerialCharNum & 0x01)
     b74:	e2 95       	swap	r30
     b76:	ef 70       	andi	r30, 0x0F	; 15
					{
						SerialByte >>= 4;
     b78:	4f 5f       	subi	r20, 0xFF	; 255
     b7a:	ef 70       	andi	r30, 0x0F	; 15
						SigReadAddress++;
     b7c:	2e 2f       	mov	r18, r30
					}

					SerialByte &= 0x0F;
     b7e:	30 e0       	ldi	r19, 0x00	; 0
     b80:	ea 30       	cpi	r30, 0x0A	; 10
     b82:	18 f0       	brcs	.+6      	; 0xb8a <USB_Device_ProcessControlRequest+0x1e0>

					UnicodeString[SerialCharNum] = cpu_to_le16((SerialByte >= 10) ?
     b84:	29 5c       	subi	r18, 0xC9	; 201
     b86:	3f 4f       	sbci	r19, 0xFF	; 255
     b88:	02 c0       	rjmp	.+4      	; 0xb8e <USB_Device_ProcessControlRequest+0x1e4>
     b8a:	20 5d       	subi	r18, 0xD0	; 208
     b8c:	3f 4f       	sbci	r19, 0xFF	; 255
     b8e:	13 96       	adiw	r26, 0x03	; 3
     b90:	3c 93       	st	X, r19
     b92:	2e 93       	st	-X, r18
     b94:	12 97       	sbiw	r26, 0x02	; 2
     b96:	01 96       	adiw	r24, 0x01	; 1
     b98:	12 96       	adiw	r26, 0x02	; 2
     b9a:	84 31       	cpi	r24, 0x14	; 20
     b9c:	91 05       	cpc	r25, r1
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
     b9e:	19 f7       	brne	.-58     	; 0xb66 <USB_Device_ProcessControlRequest+0x1bc>
     ba0:	5f bf       	out	0x3f, r21	; 63
     ba2:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     ba6:	87 7f       	andi	r24, 0xF7	; 247
     ba8:	80 93 e8 00 	sts	0x00E8, r24
     bac:	ce 01       	movw	r24, r28
     bae:	03 96       	adiw	r24, 0x03	; 3

	USB_Device_GetSerialString(SignatureDescriptor.UnicodeString);

	Endpoint_ClearSETUP();

	Endpoint_Write_Control_Stream_LE(&SignatureDescriptor, sizeof(SignatureDescriptor));
     bb0:	6a e2       	ldi	r22, 0x2A	; 42
     bb2:	70 e0       	ldi	r23, 0x00	; 0
     bb4:	6e dc       	rcall	.-1828   	; 0x492 <Endpoint_Write_Control_Stream_LE>
     bb6:	12 c0       	rjmp	.+36     	; 0xbdc <USB_Device_ProcessControlRequest+0x232>
     bb8:	60 91 c7 01 	lds	r22, 0x01C7
     bbc:	ae 01       	movw	r20, r28
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif

	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
     bbe:	4f 5f       	subi	r20, 0xFF	; 255
     bc0:	5f 4f       	sbci	r21, 0xFF	; 255
     bc2:	3b dc       	rcall	.-1930   	; 0x43a <CALLBACK_USB_GetDescriptor>
     bc4:	bc 01       	movw	r22, r24
     bc6:	00 97       	sbiw	r24, 0x00	; 0
     bc8:	09 f4       	brne	.+2      	; 0xbcc <USB_Device_ProcessControlRequest+0x222>
     bca:	3b c0       	rjmp	.+118    	; 0xc42 <USB_Device_ProcessControlRequest+0x298>
     bcc:	80 91 e8 00 	lds	r24, 0x00E8
     bd0:	87 7f       	andi	r24, 0xF7	; 247
     bd2:	80 93 e8 00 	sts	0x00E8, r24
     bd6:	89 81       	ldd	r24, Y+1	; 0x01
     bd8:	9a 81       	ldd	r25, Y+2	; 0x02
     bda:	be dc       	rcall	.-1668   	; 0x558 <Endpoint_Write_Control_PStream_LE>
     bdc:	80 91 e8 00 	lds	r24, 0x00E8
	#if defined(USE_RAM_DESCRIPTORS) || !defined(ARCH_HAS_MULTI_ADDRESS_SPACE)
	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_EEPROM_DESCRIPTORS)
	Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_FLASH_DESCRIPTORS)
	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
     be0:	8b 77       	andi	r24, 0x7B	; 123
     be2:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     be6:	2d c0       	rjmp	.+90     	; 0xc42 <USB_Device_ProcessControlRequest+0x298>
     be8:	80 38       	cpi	r24, 0x80	; 128
     bea:	59 f5       	brne	.+86     	; 0xc42 <USB_Device_ProcessControlRequest+0x298>
     bec:	80 91 e8 00 	lds	r24, 0x00E8
     bf0:	87 7f       	andi	r24, 0xF7	; 247
					USB_Device_GetDescriptor();
				}

				break;
			case REQ_GetConfiguration:
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
     bf2:	80 93 e8 00 	sts	0x00E8, r24
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     bf6:	80 91 bf 01 	lds	r24, 0x01BF
     bfa:	80 93 f1 00 	sts	0x00F1, r24
     bfe:	80 91 e8 00 	lds	r24, 0x00E8

static void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();

	Endpoint_Write_8(USB_Device_ConfigurationNumber);
     c02:	8e 77       	andi	r24, 0x7E	; 126
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     c04:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     c08:	5b dd       	rcall	.-1354   	; 0x6c0 <Endpoint_ClearStatusStage>
     c0a:	1b c0       	rjmp	.+54     	; 0xc42 <USB_Device_ProcessControlRequest+0x298>
     c0c:	88 23       	and	r24, r24
     c0e:	c9 f4       	brne	.+50     	; 0xc42 <USB_Device_ProcessControlRequest+0x298>
     c10:	90 91 c5 01 	lds	r25, 0x01C5
	Endpoint_ClearIN();

	Endpoint_ClearStatusStage();
     c14:	92 30       	cpi	r25, 0x02	; 2
     c16:	a8 f4       	brcc	.+42     	; 0xc42 <USB_Device_ProcessControlRequest+0x298>
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_GetConfiguration();

				break;
			case REQ_SetConfiguration:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
     c18:	80 91 e8 00 	lds	r24, 0x00E8
}

static void USB_Device_SetConfiguration(void)
{
	#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
     c1c:	87 7f       	andi	r24, 0xF7	; 247
     c1e:	80 93 e8 00 	sts	0x00E8, r24
     c22:	90 93 bf 01 	sts	0x01BF, r25
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     c26:	4c dd       	rcall	.-1384   	; 0x6c0 <Endpoint_ClearStatusStage>
     c28:	80 91 bf 01 	lds	r24, 0x01BF
     c2c:	88 23       	and	r24, r24
	#endif
	#endif

	Endpoint_ClearSETUP();

	USB_Device_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
     c2e:	21 f4       	brne	.+8      	; 0xc38 <USB_Device_ProcessControlRequest+0x28e>
     c30:	80 91 e3 00 	lds	r24, 0x00E3

	Endpoint_ClearStatusStage();
     c34:	87 ff       	sbrs	r24, 7

	if (USB_Device_ConfigurationNumber)
     c36:	02 c0       	rjmp	.+4      	; 0xc3c <USB_Device_ProcessControlRequest+0x292>
     c38:	84 e0       	ldi	r24, 0x04	; 4
     c3a:	01 c0       	rjmp	.+2      	; 0xc3e <USB_Device_ProcessControlRequest+0x294>
     c3c:	81 e0       	ldi	r24, 0x01	; 1
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
     c3e:	8e bb       	out	0x1e, r24	; 30
     c40:	5d db       	rcall	.-2374   	; 0x2fc <EVENT_USB_Device_ConfigurationChanged>
	  USB_DeviceState = DEVICE_STATE_Configured;
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
     c42:	80 91 e8 00 	lds	r24, 0x00E8
     c46:	83 ff       	sbrs	r24, 3
     c48:	0a c0       	rjmp	.+20     	; 0xc5e <USB_Device_ProcessControlRequest+0x2b4>
     c4a:	80 91 e8 00 	lds	r24, 0x00E8

	EVENT_USB_Device_ConfigurationChanged();
     c4e:	87 7f       	andi	r24, 0xF7	; 247
     c50:	80 93 e8 00 	sts	0x00E8, r24
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     c54:	80 91 eb 00 	lds	r24, 0x00EB
			default:
				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
     c58:	80 62       	ori	r24, 0x20	; 32
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     c5a:	80 93 eb 00 	sts	0x00EB, r24
     c5e:	ac 96       	adiw	r28, 0x2c	; 44
     c60:	0f b6       	in	r0, 0x3f	; 63
     c62:	f8 94       	cli
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
     c64:	de bf       	out	0x3e, r29	; 62
     c66:	0f be       	out	0x3f, r0	; 63
     c68:	cd bf       	out	0x3d, r28	; 61
     c6a:	df 91       	pop	r29
     c6c:	cf 91       	pop	r28
	{
		Endpoint_ClearSETUP();
		Endpoint_StallTransaction();
	}
}
     c6e:	1f 91       	pop	r17
     c70:	08 95       	ret

00000c72 <USB_Event_Stub>:
#include "Events.h"

void USB_Event_Stub(void)
{

}
     c72:	08 95       	ret

00000c74 <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
     c74:	cf 93       	push	r28
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_DeviceTask(void)
{
	if (USB_DeviceState == DEVICE_STATE_Unattached)
     c76:	8e b3       	in	r24, 0x1e	; 30
     c78:	88 23       	and	r24, r24
     c7a:	a9 f0       	breq	.+42     	; 0xca6 <USB_USBTask+0x32>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
     c7c:	80 91 e9 00 	lds	r24, 0x00E9
     c80:	8f 70       	andi	r24, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
     c82:	90 91 ec 00 	lds	r25, 0x00EC
     c86:	90 ff       	sbrs	r25, 0
     c88:	02 c0       	rjmp	.+4      	; 0xc8e <USB_USBTask+0x1a>
     c8a:	c0 e8       	ldi	r28, 0x80	; 128
     c8c:	01 c0       	rjmp	.+2      	; 0xc90 <USB_USBTask+0x1c>
     c8e:	c0 e0       	ldi	r28, 0x00	; 0
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
     c90:	c8 2b       	or	r28, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     c92:	10 92 e9 00 	sts	0x00E9, r1
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     c96:	80 91 e8 00 	lds	r24, 0x00E8

	uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

	if (Endpoint_IsSETUPReceived())
     c9a:	83 ff       	sbrs	r24, 3
     c9c:	01 c0       	rjmp	.+2      	; 0xca0 <USB_USBTask+0x2c>
	  USB_Device_ProcessControlRequest();
     c9e:	85 de       	rcall	.-758    	; 0x9aa <USB_Device_ProcessControlRequest>
     ca0:	cf 70       	andi	r28, 0x0F	; 15
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     ca2:	c0 93 e9 00 	sts	0x00E9, r28
     ca6:	cf 91       	pop	r28
	#elif defined(USB_CAN_BE_HOST)
		USB_HostTask();
	#elif defined(USB_CAN_BE_DEVICE)
		USB_DeviceTask();
	#endif
}
     ca8:	08 95       	ret

00000caa <CDC_Device_ProcessControlRequest>:
#define  __INCLUDE_FROM_CDC_DRIVER
#define  __INCLUDE_FROM_CDC_DEVICE_C
#include "CDCClassDevice.h"

void CDC_Device_ProcessControlRequest(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
     caa:	cf 93       	push	r28
     cac:	df 93       	push	r29
     cae:	ec 01       	movw	r28, r24
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     cb0:	80 91 e8 00 	lds	r24, 0x00E8
	if (!(Endpoint_IsSETUPReceived()))
     cb4:	83 ff       	sbrs	r24, 3
     cb6:	a2 c0       	rjmp	.+324    	; 0xdfc <CDC_Device_ProcessControlRequest+0x152>
	  return;

	if (USB_ControlRequest.wIndex != CDCInterfaceInfo->Config.ControlInterfaceNumber)
     cb8:	88 81       	ld	r24, Y
     cba:	90 e0       	ldi	r25, 0x00	; 0
     cbc:	20 91 c7 01 	lds	r18, 0x01C7
     cc0:	30 91 c8 01 	lds	r19, 0x01C8
     cc4:	28 17       	cp	r18, r24
     cc6:	39 07       	cpc	r19, r25
     cc8:	09 f0       	breq	.+2      	; 0xccc <CDC_Device_ProcessControlRequest+0x22>
     cca:	98 c0       	rjmp	.+304    	; 0xdfc <CDC_Device_ProcessControlRequest+0x152>
	  return;

	switch (USB_ControlRequest.bRequest)
     ccc:	80 91 c4 01 	lds	r24, 0x01C4
     cd0:	81 32       	cpi	r24, 0x21	; 33
     cd2:	69 f0       	breq	.+26     	; 0xcee <CDC_Device_ProcessControlRequest+0x44>
     cd4:	82 32       	cpi	r24, 0x22	; 34
     cd6:	20 f4       	brcc	.+8      	; 0xce0 <CDC_Device_ProcessControlRequest+0x36>
     cd8:	80 32       	cpi	r24, 0x20	; 32
     cda:	09 f0       	breq	.+2      	; 0xcde <CDC_Device_ProcessControlRequest+0x34>
     cdc:	8f c0       	rjmp	.+286    	; 0xdfc <CDC_Device_ProcessControlRequest+0x152>
     cde:	3c c0       	rjmp	.+120    	; 0xd58 <CDC_Device_ProcessControlRequest+0xae>
     ce0:	82 32       	cpi	r24, 0x22	; 34
     ce2:	09 f4       	brne	.+2      	; 0xce6 <CDC_Device_ProcessControlRequest+0x3c>
     ce4:	6a c0       	rjmp	.+212    	; 0xdba <CDC_Device_ProcessControlRequest+0x110>
     ce6:	83 32       	cpi	r24, 0x23	; 35
     ce8:	09 f0       	breq	.+2      	; 0xcec <CDC_Device_ProcessControlRequest+0x42>
     cea:	88 c0       	rjmp	.+272    	; 0xdfc <CDC_Device_ProcessControlRequest+0x152>
     cec:	79 c0       	rjmp	.+242    	; 0xde0 <CDC_Device_ProcessControlRequest+0x136>
	{
		case CDC_REQ_GetLineEncoding:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
     cee:	80 91 c3 01 	lds	r24, 0x01C3
     cf2:	81 3a       	cpi	r24, 0xA1	; 161
     cf4:	09 f0       	breq	.+2      	; 0xcf8 <CDC_Device_ProcessControlRequest+0x4e>
     cf6:	82 c0       	rjmp	.+260    	; 0xdfc <CDC_Device_ProcessControlRequest+0x152>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     cf8:	80 91 e8 00 	lds	r24, 0x00E8
     cfc:	87 7f       	andi	r24, 0xF7	; 247
     cfe:	80 93 e8 00 	sts	0x00E8, r24
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     d02:	80 91 e8 00 	lds	r24, 0x00E8
			{
				Endpoint_ClearSETUP();

				while (!(Endpoint_IsINReady()));
     d06:	80 ff       	sbrs	r24, 0
     d08:	fc cf       	rjmp	.-8      	; 0xd02 <CDC_Device_ProcessControlRequest+0x58>

				Endpoint_Write_32_LE(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS);
     d0a:	8c 89       	ldd	r24, Y+20	; 0x14
     d0c:	9d 89       	ldd	r25, Y+21	; 0x15
     d0e:	ae 89       	ldd	r26, Y+22	; 0x16
     d10:	bf 89       	ldd	r27, Y+23	; 0x17
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_32_LE(const uint32_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_32_LE(const uint32_t Data)
			{
				UEDATX = (Data &  0xFF);
     d12:	80 93 f1 00 	sts	0x00F1, r24
				UEDATX = (Data >> 8);
     d16:	49 2f       	mov	r20, r25
     d18:	5a 2f       	mov	r21, r26
     d1a:	6b 2f       	mov	r22, r27
     d1c:	77 27       	eor	r23, r23
     d1e:	40 93 f1 00 	sts	0x00F1, r20
				UEDATX = (Data >> 16);
     d22:	ad 01       	movw	r20, r26
     d24:	66 27       	eor	r22, r22
     d26:	77 27       	eor	r23, r23
     d28:	40 93 f1 00 	sts	0x00F1, r20
				UEDATX = (Data >> 24);
     d2c:	8b 2f       	mov	r24, r27
     d2e:	99 27       	eor	r25, r25
     d30:	aa 27       	eor	r26, r26
     d32:	bb 27       	eor	r27, r27
     d34:	80 93 f1 00 	sts	0x00F1, r24
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.CharFormat);
     d38:	88 8d       	ldd	r24, Y+24	; 0x18
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     d3a:	80 93 f1 00 	sts	0x00F1, r24
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.ParityType);
     d3e:	89 8d       	ldd	r24, Y+25	; 0x19
     d40:	80 93 f1 00 	sts	0x00F1, r24
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.DataBits);
     d44:	8a 8d       	ldd	r24, Y+26	; 0x1a
     d46:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     d4a:	80 91 e8 00 	lds	r24, 0x00E8
     d4e:	8e 77       	andi	r24, 0x7E	; 126
     d50:	80 93 e8 00 	sts	0x00E8, r24

				Endpoint_ClearIN();
				Endpoint_ClearStatusStage();
     d54:	b5 dc       	rcall	.-1686   	; 0x6c0 <Endpoint_ClearStatusStage>
     d56:	52 c0       	rjmp	.+164    	; 0xdfc <CDC_Device_ProcessControlRequest+0x152>
     d58:	80 91 c3 01 	lds	r24, 0x01C3
			}

			break;
		case CDC_REQ_SetLineEncoding:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
     d5c:	81 32       	cpi	r24, 0x21	; 33
     d5e:	09 f0       	breq	.+2      	; 0xd62 <CDC_Device_ProcessControlRequest+0xb8>
     d60:	4d c0       	rjmp	.+154    	; 0xdfc <CDC_Device_ProcessControlRequest+0x152>
     d62:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     d66:	87 7f       	andi	r24, 0xF7	; 247
     d68:	80 93 e8 00 	sts	0x00E8, r24
     d6c:	04 c0       	rjmp	.+8      	; 0xd76 <CDC_Device_ProcessControlRequest+0xcc>
     d6e:	8e b3       	in	r24, 0x1e	; 30
			{
				Endpoint_ClearSETUP();

				while (!(Endpoint_IsOUTReceived()))
				{
					if (USB_DeviceState == DEVICE_STATE_Unattached)
     d70:	88 23       	and	r24, r24
     d72:	09 f4       	brne	.+2      	; 0xd76 <CDC_Device_ProcessControlRequest+0xcc>
     d74:	43 c0       	rjmp	.+134    	; 0xdfc <CDC_Device_ProcessControlRequest+0x152>
     d76:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     d7a:	82 ff       	sbrs	r24, 2
		case CDC_REQ_SetLineEncoding:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
			{
				Endpoint_ClearSETUP();

				while (!(Endpoint_IsOUTReceived()))
     d7c:	f8 cf       	rjmp	.-16     	; 0xd6e <CDC_Device_ProcessControlRequest+0xc4>
     d7e:	30 91 f1 00 	lds	r19, 0x00F1
				{
					uint32_t Value;
					uint8_t  Bytes[4];
				} Data;

				Data.Bytes[0] = UEDATX;
     d82:	20 91 f1 00 	lds	r18, 0x00F1
				Data.Bytes[1] = UEDATX;
     d86:	90 91 f1 00 	lds	r25, 0x00F1
				Data.Bytes[2] = UEDATX;
     d8a:	80 91 f1 00 	lds	r24, 0x00F1
				Data.Bytes[3] = UEDATX;
     d8e:	3c 8b       	std	Y+20, r19	; 0x14
				{
					if (USB_DeviceState == DEVICE_STATE_Unattached)
					  return;
				}

				CDCInterfaceInfo->State.LineEncoding.BaudRateBPS = Endpoint_Read_32_LE();
     d90:	2d 8b       	std	Y+21, r18	; 0x15
     d92:	9e 8b       	std	Y+22, r25	; 0x16
     d94:	8f 8b       	std	Y+23, r24	; 0x17
     d96:	80 91 f1 00 	lds	r24, 0x00F1
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
     d9a:	88 8f       	std	Y+24, r24	; 0x18
				CDCInterfaceInfo->State.LineEncoding.CharFormat  = Endpoint_Read_8();
     d9c:	80 91 f1 00 	lds	r24, 0x00F1
     da0:	89 8f       	std	Y+25, r24	; 0x19
				CDCInterfaceInfo->State.LineEncoding.ParityType  = Endpoint_Read_8();
     da2:	80 91 f1 00 	lds	r24, 0x00F1
     da6:	8a 8f       	std	Y+26, r24	; 0x1a
				CDCInterfaceInfo->State.LineEncoding.DataBits    = Endpoint_Read_8();
     da8:	80 91 e8 00 	lds	r24, 0x00E8
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     dac:	8b 77       	andi	r24, 0x7B	; 123
     dae:	80 93 e8 00 	sts	0x00E8, r24
     db2:	86 dc       	rcall	.-1780   	; 0x6c0 <Endpoint_ClearStatusStage>

				Endpoint_ClearOUT();
				Endpoint_ClearStatusStage();
     db4:	ce 01       	movw	r24, r28
     db6:	b0 da       	rcall	.-2720   	; 0x318 <EVENT_CDC_Device_LineEncodingChanged>

				EVENT_CDC_Device_LineEncodingChanged(CDCInterfaceInfo);
     db8:	21 c0       	rjmp	.+66     	; 0xdfc <CDC_Device_ProcessControlRequest+0x152>
     dba:	80 91 c3 01 	lds	r24, 0x01C3
     dbe:	81 32       	cpi	r24, 0x21	; 33
			}

			break;
		case CDC_REQ_SetControlLineState:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
     dc0:	e9 f4       	brne	.+58     	; 0xdfc <CDC_Device_ProcessControlRequest+0x152>
     dc2:	80 91 e8 00 	lds	r24, 0x00E8
     dc6:	87 7f       	andi	r24, 0xF7	; 247
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     dc8:	80 93 e8 00 	sts	0x00E8, r24
     dcc:	79 dc       	rcall	.-1806   	; 0x6c0 <Endpoint_ClearStatusStage>
     dce:	80 91 c5 01 	lds	r24, 0x01C5
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
     dd2:	90 91 c6 01 	lds	r25, 0x01C6

				CDCInterfaceInfo->State.ControlLineStates.HostToDevice = USB_ControlRequest.wValue;
     dd6:	99 8b       	std	Y+17, r25	; 0x11
     dd8:	88 8b       	std	Y+16, r24	; 0x10
     dda:	ce 01       	movw	r24, r28
     ddc:	1a db       	rcall	.-2508   	; 0x412 <EVENT_CDC_Device_ControLineStateChanged>
     dde:	0e c0       	rjmp	.+28     	; 0xdfc <CDC_Device_ProcessControlRequest+0x152>
     de0:	80 91 c3 01 	lds	r24, 0x01C3

				EVENT_CDC_Device_ControLineStateChanged(CDCInterfaceInfo);
     de4:	81 32       	cpi	r24, 0x21	; 33
     de6:	51 f4       	brne	.+20     	; 0xdfc <CDC_Device_ProcessControlRequest+0x152>
     de8:	80 91 e8 00 	lds	r24, 0x00E8
			}

			break;
		case CDC_REQ_SendBreak:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
     dec:	87 7f       	andi	r24, 0xF7	; 247
     dee:	80 93 e8 00 	sts	0x00E8, r24
     df2:	66 dc       	rcall	.-1844   	; 0x6c0 <Endpoint_ClearStatusStage>
     df4:	ce 01       	movw	r24, r28
     df6:	60 91 c5 01 	lds	r22, 0x01C5
     dfa:	e9 d0       	rcall	.+466    	; 0xfce <CDC_Device_Event_Stub>
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
     dfc:	df 91       	pop	r29
     dfe:	cf 91       	pop	r28

				EVENT_CDC_Device_BreakSent(CDCInterfaceInfo, (uint8_t)USB_ControlRequest.wValue);
     e00:	08 95       	ret

00000e02 <CDC_Device_ConfigureEndpoints>:
     e02:	cf 93       	push	r28
     e04:	df 93       	push	r29
     e06:	ec 01       	movw	r28, r24
     e08:	40 96       	adiw	r24, 0x10	; 16
			}

			break;
	}
}
     e0a:	fc 01       	movw	r30, r24
     e0c:	8b e0       	ldi	r24, 0x0B	; 11
     e0e:	df 01       	movw	r26, r30

bool CDC_Device_ConfigureEndpoints(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
	memset(&CDCInterfaceInfo->State, 0x00, sizeof(CDCInterfaceInfo->State));
     e10:	1d 92       	st	X+, r1
     e12:	8a 95       	dec	r24
     e14:	e9 f7       	brne	.-6      	; 0xe10 <CDC_Device_ConfigureEndpoints+0xe>

	CDCInterfaceInfo->Config.DataINEndpoint.Type       = EP_TYPE_BULK;
     e16:	82 e0       	ldi	r24, 0x02	; 2
     e18:	8c 83       	std	Y+4, r24	; 0x04
	CDCInterfaceInfo->Config.DataOUTEndpoint.Type      = EP_TYPE_BULK;
     e1a:	89 87       	std	Y+9, r24	; 0x09
	CDCInterfaceInfo->Config.NotificationEndpoint.Type = EP_TYPE_INTERRUPT;
     e1c:	83 e0       	ldi	r24, 0x03	; 3
     e1e:	8e 87       	std	Y+14, r24	; 0x0e

	if (!(Endpoint_ConfigureEndpointTable(&CDCInterfaceInfo->Config.DataINEndpoint, 1)))
     e20:	ce 01       	movw	r24, r28
     e22:	01 96       	adiw	r24, 0x01	; 1
     e24:	61 e0       	ldi	r22, 0x01	; 1
     e26:	10 dc       	rcall	.-2016   	; 0x648 <Endpoint_ConfigureEndpointTable>
     e28:	88 23       	and	r24, r24
     e2a:	59 f0       	breq	.+22     	; 0xe42 <CDC_Device_ConfigureEndpoints+0x40>
     e2c:	ce 01       	movw	r24, r28
	  return false;

	if (!(Endpoint_ConfigureEndpointTable(&CDCInterfaceInfo->Config.DataOUTEndpoint, 1)))
     e2e:	06 96       	adiw	r24, 0x06	; 6
     e30:	61 e0       	ldi	r22, 0x01	; 1
     e32:	0a dc       	rcall	.-2028   	; 0x648 <Endpoint_ConfigureEndpointTable>
     e34:	88 23       	and	r24, r24
     e36:	29 f0       	breq	.+10     	; 0xe42 <CDC_Device_ConfigureEndpoints+0x40>
     e38:	ce 01       	movw	r24, r28
     e3a:	0b 96       	adiw	r24, 0x0b	; 11
	  return false;

	if (!(Endpoint_ConfigureEndpointTable(&CDCInterfaceInfo->Config.NotificationEndpoint, 1)))
     e3c:	61 e0       	ldi	r22, 0x01	; 1
     e3e:	04 dc       	rcall	.-2040   	; 0x648 <Endpoint_ConfigureEndpointTable>
     e40:	01 c0       	rjmp	.+2      	; 0xe44 <CDC_Device_ConfigureEndpoints+0x42>
     e42:	80 e0       	ldi	r24, 0x00	; 0
     e44:	df 91       	pop	r29
     e46:	cf 91       	pop	r28

	if (!(Endpoint_ConfigureEndpointTable(&CDCInterfaceInfo->Config.DataINEndpoint, 1)))
	  return false;

	if (!(Endpoint_ConfigureEndpointTable(&CDCInterfaceInfo->Config.DataOUTEndpoint, 1)))
	  return false;
     e48:	08 95       	ret

00000e4a <CDC_Device_SendByte>:

	if (!(Endpoint_ConfigureEndpointTable(&CDCInterfaceInfo->Config.NotificationEndpoint, 1)))
	  return false;

	return true;
}
     e4a:	cf 93       	push	r28
     e4c:	fc 01       	movw	r30, r24
     e4e:	c6 2f       	mov	r28, r22
}

uint8_t CDC_Device_SendByte(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo,
                            const uint8_t Data)
{
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
     e50:	8e b3       	in	r24, 0x1e	; 30
     e52:	84 30       	cpi	r24, 0x04	; 4
     e54:	e9 f4       	brne	.+58     	; 0xe90 <CDC_Device_SendByte+0x46>
     e56:	44 89       	ldd	r20, Z+20	; 0x14
     e58:	55 89       	ldd	r21, Z+21	; 0x15
     e5a:	66 89       	ldd	r22, Z+22	; 0x16
     e5c:	77 89       	ldd	r23, Z+23	; 0x17
     e5e:	41 15       	cp	r20, r1
     e60:	51 05       	cpc	r21, r1
     e62:	61 05       	cpc	r22, r1
     e64:	71 05       	cpc	r23, r1
     e66:	a1 f0       	breq	.+40     	; 0xe90 <CDC_Device_SendByte+0x46>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     e68:	81 81       	ldd	r24, Z+1	; 0x01
     e6a:	8f 70       	andi	r24, 0x0F	; 15
     e6c:	80 93 e9 00 	sts	0x00E9, r24
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
     e70:	80 91 e8 00 	lds	r24, 0x00E8
	  return ENDPOINT_RWSTREAM_DeviceDisconnected;

	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataINEndpoint.Address);

	if (!(Endpoint_IsReadWriteAllowed()))
     e74:	85 fd       	sbrc	r24, 5
     e76:	08 c0       	rjmp	.+16     	; 0xe88 <CDC_Device_SendByte+0x3e>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     e78:	80 91 e8 00 	lds	r24, 0x00E8
     e7c:	8e 77       	andi	r24, 0x7E	; 126
     e7e:	80 93 e8 00 	sts	0x00E8, r24
	{
		Endpoint_ClearIN();

		uint8_t ErrorCode;

		if ((ErrorCode = Endpoint_WaitUntilReady()) != ENDPOINT_READYWAIT_NoError)
     e82:	3d dc       	rcall	.-1926   	; 0x6fe <Endpoint_WaitUntilReady>
     e84:	88 23       	and	r24, r24
     e86:	29 f4       	brne	.+10     	; 0xe92 <CDC_Device_SendByte+0x48>
     e88:	c0 93 f1 00 	sts	0x00F1, r28
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     e8c:	80 e0       	ldi	r24, 0x00	; 0
		  return ErrorCode;
	}

	Endpoint_Write_8(Data);
	return ENDPOINT_READYWAIT_NoError;
     e8e:	01 c0       	rjmp	.+2      	; 0xe92 <CDC_Device_SendByte+0x48>
     e90:	82 e0       	ldi	r24, 0x02	; 2

uint8_t CDC_Device_SendByte(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo,
                            const uint8_t Data)
{
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
	  return ENDPOINT_RWSTREAM_DeviceDisconnected;
     e92:	cf 91       	pop	r28
		  return ErrorCode;
	}

	Endpoint_Write_8(Data);
	return ENDPOINT_READYWAIT_NoError;
}
     e94:	08 95       	ret

00000e96 <CDC_Device_Flush>:
     e96:	fc 01       	movw	r30, r24

uint8_t CDC_Device_Flush(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
     e98:	8e b3       	in	r24, 0x1e	; 30
     e9a:	84 30       	cpi	r24, 0x04	; 4
     e9c:	19 f5       	brne	.+70     	; 0xee4 <CDC_Device_Flush+0x4e>
     e9e:	44 89       	ldd	r20, Z+20	; 0x14
     ea0:	55 89       	ldd	r21, Z+21	; 0x15
     ea2:	66 89       	ldd	r22, Z+22	; 0x16
     ea4:	77 89       	ldd	r23, Z+23	; 0x17
     ea6:	41 15       	cp	r20, r1
     ea8:	51 05       	cpc	r21, r1
     eaa:	61 05       	cpc	r22, r1
     eac:	71 05       	cpc	r23, r1
     eae:	d1 f0       	breq	.+52     	; 0xee4 <CDC_Device_Flush+0x4e>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     eb0:	81 81       	ldd	r24, Z+1	; 0x01
     eb2:	8f 70       	andi	r24, 0x0F	; 15
     eb4:	80 93 e9 00 	sts	0x00E9, r24
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
				#elif defined(USB_SERIES_2_AVR)
					return UEBCLX;
     eb8:	80 91 f2 00 	lds	r24, 0x00F2

	uint8_t ErrorCode;

	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataINEndpoint.Address);

	if (!(Endpoint_BytesInEndpoint()))
     ebc:	88 23       	and	r24, r24
     ebe:	a1 f0       	breq	.+40     	; 0xee8 <CDC_Device_Flush+0x52>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
     ec0:	90 91 e8 00 	lds	r25, 0x00E8
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     ec4:	80 91 e8 00 	lds	r24, 0x00E8
     ec8:	8e 77       	andi	r24, 0x7E	; 126
     eca:	80 93 e8 00 	sts	0x00E8, r24

	bool BankFull = !(Endpoint_IsReadWriteAllowed());

	Endpoint_ClearIN();

	if (BankFull)
     ece:	95 fd       	sbrc	r25, 5
     ed0:	0d c0       	rjmp	.+26     	; 0xeec <CDC_Device_Flush+0x56>
	{
		if ((ErrorCode = Endpoint_WaitUntilReady()) != ENDPOINT_READYWAIT_NoError)
     ed2:	15 dc       	rcall	.-2006   	; 0x6fe <Endpoint_WaitUntilReady>
     ed4:	88 23       	and	r24, r24
     ed6:	59 f4       	brne	.+22     	; 0xeee <CDC_Device_Flush+0x58>
     ed8:	90 91 e8 00 	lds	r25, 0x00E8
     edc:	9e 77       	andi	r25, 0x7E	; 126
     ede:	90 93 e8 00 	sts	0x00E8, r25
     ee2:	08 95       	ret
     ee4:	82 e0       	ldi	r24, 0x02	; 2
}

uint8_t CDC_Device_Flush(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
	  return ENDPOINT_RWSTREAM_DeviceDisconnected;
     ee6:	08 95       	ret
     ee8:	80 e0       	ldi	r24, 0x00	; 0
	uint8_t ErrorCode;

	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataINEndpoint.Address);

	if (!(Endpoint_BytesInEndpoint()))
	  return ENDPOINT_READYWAIT_NoError;
     eea:	08 95       	ret
     eec:	80 e0       	ldi	r24, 0x00	; 0
		  return ErrorCode;

		Endpoint_ClearIN();
	}

	return ENDPOINT_READYWAIT_NoError;
     eee:	08 95       	ret

00000ef0 <CDC_Device_USBTask>:
}
     ef0:	2e b3       	in	r18, 0x1e	; 30
	return true;
}

void CDC_Device_USBTask(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
     ef2:	24 30       	cpi	r18, 0x04	; 4
     ef4:	99 f4       	brne	.+38     	; 0xf1c <CDC_Device_USBTask+0x2c>
     ef6:	fc 01       	movw	r30, r24
     ef8:	44 89       	ldd	r20, Z+20	; 0x14
     efa:	55 89       	ldd	r21, Z+21	; 0x15
     efc:	66 89       	ldd	r22, Z+22	; 0x16
     efe:	77 89       	ldd	r23, Z+23	; 0x17
     f00:	41 15       	cp	r20, r1
     f02:	51 05       	cpc	r21, r1
     f04:	61 05       	cpc	r22, r1
     f06:	71 05       	cpc	r23, r1
     f08:	49 f0       	breq	.+18     	; 0xf1c <CDC_Device_USBTask+0x2c>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     f0a:	21 81       	ldd	r18, Z+1	; 0x01
     f0c:	2f 70       	andi	r18, 0x0F	; 15
     f0e:	20 93 e9 00 	sts	0x00E9, r18
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     f12:	20 91 e8 00 	lds	r18, 0x00E8
	  return;

	#if !defined(NO_CLASS_DRIVER_AUTOFLUSH)
	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataINEndpoint.Address);

	if (Endpoint_IsINReady())
     f16:	20 ff       	sbrs	r18, 0
     f18:	01 c0       	rjmp	.+2      	; 0xf1c <CDC_Device_USBTask+0x2c>
	  CDC_Device_Flush(CDCInterfaceInfo);
     f1a:	bd cf       	rjmp	.-134    	; 0xe96 <CDC_Device_Flush>
     f1c:	08 95       	ret

00000f1e <CDC_Device_BytesReceived>:
     f1e:	fc 01       	movw	r30, r24
	return ENDPOINT_READYWAIT_NoError;
}

uint16_t CDC_Device_BytesReceived(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
     f20:	8e b3       	in	r24, 0x1e	; 30
     f22:	84 30       	cpi	r24, 0x04	; 4
     f24:	f9 f4       	brne	.+62     	; 0xf64 <CDC_Device_BytesReceived+0x46>
     f26:	44 89       	ldd	r20, Z+20	; 0x14
     f28:	55 89       	ldd	r21, Z+21	; 0x15
     f2a:	66 89       	ldd	r22, Z+22	; 0x16
     f2c:	77 89       	ldd	r23, Z+23	; 0x17
     f2e:	41 15       	cp	r20, r1
     f30:	51 05       	cpc	r21, r1
     f32:	61 05       	cpc	r22, r1
     f34:	71 05       	cpc	r23, r1
     f36:	b1 f0       	breq	.+44     	; 0xf64 <CDC_Device_BytesReceived+0x46>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     f38:	86 81       	ldd	r24, Z+6	; 0x06
     f3a:	8f 70       	andi	r24, 0x0F	; 15
     f3c:	80 93 e9 00 	sts	0x00E9, r24
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     f40:	80 91 e8 00 	lds	r24, 0x00E8
	  return 0;

	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataOUTEndpoint.Address);

	if (Endpoint_IsOUTReceived())
     f44:	82 ff       	sbrs	r24, 2
     f46:	11 c0       	rjmp	.+34     	; 0xf6a <CDC_Device_BytesReceived+0x4c>
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
				#elif defined(USB_SERIES_2_AVR)
					return UEBCLX;
     f48:	80 91 f2 00 	lds	r24, 0x00F2
	{
		if (!(Endpoint_BytesInEndpoint()))
     f4c:	88 23       	and	r24, r24
     f4e:	31 f4       	brne	.+12     	; 0xf5c <CDC_Device_BytesReceived+0x3e>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     f50:	80 91 e8 00 	lds	r24, 0x00E8
     f54:	8b 77       	andi	r24, 0x7B	; 123
     f56:	80 93 e8 00 	sts	0x00E8, r24
     f5a:	04 c0       	rjmp	.+8      	; 0xf64 <CDC_Device_BytesReceived+0x46>
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
				#elif defined(USB_SERIES_2_AVR)
					return UEBCLX;
     f5c:	80 91 f2 00 	lds	r24, 0x00F2
     f60:	90 e0       	ldi	r25, 0x00	; 0
			Endpoint_ClearOUT();
			return 0;
		}
		else
		{
			return Endpoint_BytesInEndpoint();
     f62:	08 95       	ret
}

uint16_t CDC_Device_BytesReceived(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
	  return 0;
     f64:	80 e0       	ldi	r24, 0x00	; 0
     f66:	90 e0       	ldi	r25, 0x00	; 0
     f68:	08 95       	ret
			return Endpoint_BytesInEndpoint();
		}
	}
	else
	{
		return 0;
     f6a:	80 e0       	ldi	r24, 0x00	; 0
     f6c:	90 e0       	ldi	r25, 0x00	; 0
	}
}
     f6e:	08 95       	ret

00000f70 <CDC_Device_ReceiveByte>:

int16_t CDC_Device_ReceiveByte(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
     f70:	fc 01       	movw	r30, r24
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
     f72:	8e b3       	in	r24, 0x1e	; 30
     f74:	84 30       	cpi	r24, 0x04	; 4
     f76:	29 f5       	brne	.+74     	; 0xfc2 <CDC_Device_ReceiveByte+0x52>
     f78:	44 89       	ldd	r20, Z+20	; 0x14
     f7a:	55 89       	ldd	r21, Z+21	; 0x15
     f7c:	66 89       	ldd	r22, Z+22	; 0x16
     f7e:	77 89       	ldd	r23, Z+23	; 0x17
     f80:	41 15       	cp	r20, r1
     f82:	51 05       	cpc	r21, r1
     f84:	61 05       	cpc	r22, r1
     f86:	71 05       	cpc	r23, r1
     f88:	e1 f0       	breq	.+56     	; 0xfc2 <CDC_Device_ReceiveByte+0x52>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     f8a:	86 81       	ldd	r24, Z+6	; 0x06
     f8c:	8f 70       	andi	r24, 0x0F	; 15
     f8e:	80 93 e9 00 	sts	0x00E9, r24
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     f92:	80 91 e8 00 	lds	r24, 0x00E8

	int16_t ReceivedByte = -1;

	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataOUTEndpoint.Address);

	if (Endpoint_IsOUTReceived())
     f96:	82 ff       	sbrs	r24, 2
     f98:	17 c0       	rjmp	.+46     	; 0xfc8 <CDC_Device_ReceiveByte+0x58>
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
				#elif defined(USB_SERIES_2_AVR)
					return UEBCLX;
     f9a:	80 91 f2 00 	lds	r24, 0x00F2
	{
		if (Endpoint_BytesInEndpoint())
     f9e:	88 23       	and	r24, r24
     fa0:	21 f0       	breq	.+8      	; 0xfaa <CDC_Device_ReceiveByte+0x3a>
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
     fa2:	80 91 f1 00 	lds	r24, 0x00F1
		  ReceivedByte = Endpoint_Read_8();
     fa6:	90 e0       	ldi	r25, 0x00	; 0
     fa8:	02 c0       	rjmp	.+4      	; 0xfae <CDC_Device_ReceiveByte+0x3e>
int16_t CDC_Device_ReceiveByte(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
	  return -1;

	int16_t ReceivedByte = -1;
     faa:	8f ef       	ldi	r24, 0xFF	; 255
     fac:	9f ef       	ldi	r25, 0xFF	; 255
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
				#elif defined(USB_SERIES_2_AVR)
					return UEBCLX;
     fae:	20 91 f2 00 	lds	r18, 0x00F2
	if (Endpoint_IsOUTReceived())
	{
		if (Endpoint_BytesInEndpoint())
		  ReceivedByte = Endpoint_Read_8();

		if (!(Endpoint_BytesInEndpoint()))
     fb2:	22 23       	and	r18, r18
     fb4:	59 f4       	brne	.+22     	; 0xfcc <CDC_Device_ReceiveByte+0x5c>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     fb6:	20 91 e8 00 	lds	r18, 0x00E8
     fba:	2b 77       	andi	r18, 0x7B	; 123
     fbc:	20 93 e8 00 	sts	0x00E8, r18
     fc0:	08 95       	ret
}

int16_t CDC_Device_ReceiveByte(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
	  return -1;
     fc2:	8f ef       	ldi	r24, 0xFF	; 255
     fc4:	9f ef       	ldi	r25, 0xFF	; 255
     fc6:	08 95       	ret

	int16_t ReceivedByte = -1;
     fc8:	8f ef       	ldi	r24, 0xFF	; 255
     fca:	9f ef       	ldi	r25, 0xFF	; 255
		if (!(Endpoint_BytesInEndpoint()))
		  Endpoint_ClearOUT();
	}

	return ReceivedByte;
}
     fcc:	08 95       	ret

00000fce <CDC_Device_Event_Stub>:
#endif

void CDC_Device_Event_Stub(void)
{

}
     fce:	08 95       	ret

00000fd0 <__udivmodsi4>:
     fd0:	a1 e2       	ldi	r26, 0x21	; 33
     fd2:	1a 2e       	mov	r1, r26
     fd4:	aa 1b       	sub	r26, r26
     fd6:	bb 1b       	sub	r27, r27
     fd8:	fd 01       	movw	r30, r26
     fda:	0d c0       	rjmp	.+26     	; 0xff6 <__udivmodsi4_ep>

00000fdc <__udivmodsi4_loop>:
     fdc:	aa 1f       	adc	r26, r26
     fde:	bb 1f       	adc	r27, r27
     fe0:	ee 1f       	adc	r30, r30
     fe2:	ff 1f       	adc	r31, r31
     fe4:	a2 17       	cp	r26, r18
     fe6:	b3 07       	cpc	r27, r19
     fe8:	e4 07       	cpc	r30, r20
     fea:	f5 07       	cpc	r31, r21
     fec:	20 f0       	brcs	.+8      	; 0xff6 <__udivmodsi4_ep>
     fee:	a2 1b       	sub	r26, r18
     ff0:	b3 0b       	sbc	r27, r19
     ff2:	e4 0b       	sbc	r30, r20
     ff4:	f5 0b       	sbc	r31, r21

00000ff6 <__udivmodsi4_ep>:
     ff6:	66 1f       	adc	r22, r22
     ff8:	77 1f       	adc	r23, r23
     ffa:	88 1f       	adc	r24, r24
     ffc:	99 1f       	adc	r25, r25
     ffe:	1a 94       	dec	r1
    1000:	69 f7       	brne	.-38     	; 0xfdc <__udivmodsi4_loop>
    1002:	60 95       	com	r22
    1004:	70 95       	com	r23
    1006:	80 95       	com	r24
    1008:	90 95       	com	r25
    100a:	9b 01       	movw	r18, r22
    100c:	ac 01       	movw	r20, r24
    100e:	bd 01       	movw	r22, r26
    1010:	cf 01       	movw	r24, r30
    1012:	08 95       	ret

00001014 <_exit>:
    1014:	f8 94       	cli

00001016 <__stop_program>:
    1016:	ff cf       	rjmp	.-2      	; 0x1016 <__stop_program>
