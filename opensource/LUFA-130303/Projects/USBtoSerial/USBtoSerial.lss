
USBtoSerial.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000002e  00800100  0000106a  000010fe  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000106a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000124  0080012e  0080012e  0000112c  2**0
                  ALLOC
  3 .stab         00000a98  00000000  00000000  0000112c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000002aa  00000000  00000000  00001bc4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000520  00000000  00000000  00001e70  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00008b75  00000000  00000000  00002390  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000021d0  00000000  00000000  0000af05  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00003eb6  00000000  00000000  0000d0d5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000e48  00000000  00000000  00010f8c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00003aa5  00000000  00000000  00011dd4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00005353  00000000  00000000  00015879  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000006c0  00000000  00000000  0001abcc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	9a c0       	rjmp	.+308    	; 0x136 <__ctors_end>
       2:	00 00       	nop
       4:	b6 c0       	rjmp	.+364    	; 0x172 <__bad_interrupt>
       6:	00 00       	nop
       8:	b4 c0       	rjmp	.+360    	; 0x172 <__bad_interrupt>
       a:	00 00       	nop
       c:	b2 c0       	rjmp	.+356    	; 0x172 <__bad_interrupt>
       e:	00 00       	nop
      10:	b0 c0       	rjmp	.+352    	; 0x172 <__bad_interrupt>
      12:	00 00       	nop
      14:	ae c0       	rjmp	.+348    	; 0x172 <__bad_interrupt>
      16:	00 00       	nop
      18:	ac c0       	rjmp	.+344    	; 0x172 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	aa c0       	rjmp	.+340    	; 0x172 <__bad_interrupt>
      1e:	00 00       	nop
      20:	a8 c0       	rjmp	.+336    	; 0x172 <__bad_interrupt>
      22:	00 00       	nop
      24:	a6 c0       	rjmp	.+332    	; 0x172 <__bad_interrupt>
      26:	00 00       	nop
      28:	04 c4       	rjmp	.+2056   	; 0x832 <__vector_10>
      2a:	00 00       	nop
      2c:	ca c4       	rjmp	.+2452   	; 0x9c2 <__vector_11>
      2e:	00 00       	nop
      30:	a0 c0       	rjmp	.+320    	; 0x172 <__bad_interrupt>
      32:	00 00       	nop
      34:	9e c0       	rjmp	.+316    	; 0x172 <__bad_interrupt>
      36:	00 00       	nop
      38:	9c c0       	rjmp	.+312    	; 0x172 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	9a c0       	rjmp	.+308    	; 0x172 <__bad_interrupt>
      3e:	00 00       	nop
      40:	98 c0       	rjmp	.+304    	; 0x172 <__bad_interrupt>
      42:	00 00       	nop
      44:	96 c0       	rjmp	.+300    	; 0x172 <__bad_interrupt>
      46:	00 00       	nop
      48:	94 c0       	rjmp	.+296    	; 0x172 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	92 c0       	rjmp	.+292    	; 0x172 <__bad_interrupt>
      4e:	00 00       	nop
      50:	90 c0       	rjmp	.+288    	; 0x172 <__bad_interrupt>
      52:	00 00       	nop
      54:	8e c0       	rjmp	.+284    	; 0x172 <__bad_interrupt>
      56:	00 00       	nop
      58:	8c c0       	rjmp	.+280    	; 0x172 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	8a c0       	rjmp	.+276    	; 0x172 <__bad_interrupt>
      5e:	00 00       	nop
      60:	88 c0       	rjmp	.+272    	; 0x172 <__bad_interrupt>
      62:	00 00       	nop
      64:	74 c1       	rjmp	.+744    	; 0x34e <__vector_25>
      66:	00 00       	nop
      68:	84 c0       	rjmp	.+264    	; 0x172 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	82 c0       	rjmp	.+260    	; 0x172 <__bad_interrupt>
      6e:	00 00       	nop
      70:	80 c0       	rjmp	.+256    	; 0x172 <__bad_interrupt>
      72:	00 00       	nop
      74:	7e c0       	rjmp	.+252    	; 0x172 <__bad_interrupt>
      76:	00 00       	nop
      78:	7c c0       	rjmp	.+248    	; 0x172 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	7a c0       	rjmp	.+244    	; 0x172 <__bad_interrupt>
      7e:	00 00       	nop
      80:	78 c0       	rjmp	.+240    	; 0x172 <__bad_interrupt>
      82:	00 00       	nop
      84:	76 c0       	rjmp	.+236    	; 0x172 <__bad_interrupt>
      86:	00 00       	nop
      88:	74 c0       	rjmp	.+232    	; 0x172 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	72 c0       	rjmp	.+228    	; 0x172 <__bad_interrupt>
      8e:	00 00       	nop
      90:	70 c0       	rjmp	.+224    	; 0x172 <__bad_interrupt>
      92:	00 00       	nop
      94:	6e c0       	rjmp	.+220    	; 0x172 <__bad_interrupt>
      96:	00 00       	nop

00000098 <ProductString>:
      98:	2e 03 4c 00 55 00 46 00 41 00 20 00 55 00 53 00     ..L.U.F.A. .U.S.
      a8:	42 00 2d 00 52 00 53 00 32 00 33 00 32 00 20 00     B.-.R.S.2.3.2. .
      b8:	41 00 64 00 61 00 70 00 74 00 65 00 72 00 00 00     A.d.a.p.t.e.r...

000000c8 <ManufacturerString>:
      c8:	18 03 44 00 65 00 61 00 6e 00 20 00 43 00 61 00     ..D.e.a.n. .C.a.
      d8:	6d 00 65 00 72 00 61 00 00 00                       m.e.r.a...

000000e2 <LanguageString>:
      e2:	04 03 09 04                                         ....

000000e6 <ConfigurationDescriptor>:
      e6:	09 02 3e 00 02 01 00 c0 32 09 04 00 00 01 02 02     ..>.....2.......
      f6:	01 00 05 24 00 10 01 04 24 02 06 05 24 06 00 01     ...$....$...$...
     106:	07 05 82 03 08 00 ff 09 04 01 00 02 0a 00 00 00     ................
     116:	07 05 04 02 10 00 05 07 05 83 02 10 00 05           ..............

00000124 <DeviceDescriptor>:
     124:	12 01 10 01 02 00 00 08 eb 03 4b 20 01 00 01 02     ..........K ....
     134:	dc 01                                               ..

00000136 <__ctors_end>:
     136:	11 24       	eor	r1, r1
     138:	1f be       	out	0x3f, r1	; 63
     13a:	cf ef       	ldi	r28, 0xFF	; 255
     13c:	d0 e2       	ldi	r29, 0x20	; 32
     13e:	de bf       	out	0x3e, r29	; 62
     140:	cd bf       	out	0x3d, r28	; 61

00000142 <__do_copy_data>:
     142:	11 e0       	ldi	r17, 0x01	; 1
     144:	a0 e0       	ldi	r26, 0x00	; 0
     146:	b1 e0       	ldi	r27, 0x01	; 1
     148:	ea e6       	ldi	r30, 0x6A	; 106
     14a:	f0 e1       	ldi	r31, 0x10	; 16
     14c:	00 e0       	ldi	r16, 0x00	; 0
     14e:	0b bf       	out	0x3b, r16	; 59
     150:	02 c0       	rjmp	.+4      	; 0x156 <__do_copy_data+0x14>
     152:	07 90       	elpm	r0, Z+
     154:	0d 92       	st	X+, r0
     156:	ae 32       	cpi	r26, 0x2E	; 46
     158:	b1 07       	cpc	r27, r17
     15a:	d9 f7       	brne	.-10     	; 0x152 <__do_copy_data+0x10>
     15c:	1b be       	out	0x3b, r1	; 59

0000015e <__do_clear_bss>:
     15e:	12 e0       	ldi	r17, 0x02	; 2
     160:	ae e2       	ldi	r26, 0x2E	; 46
     162:	b1 e0       	ldi	r27, 0x01	; 1
     164:	01 c0       	rjmp	.+2      	; 0x168 <.do_clear_bss_start>

00000166 <.do_clear_bss_loop>:
     166:	1d 92       	st	X+, r1

00000168 <.do_clear_bss_start>:
     168:	a2 35       	cpi	r26, 0x52	; 82
     16a:	b1 07       	cpc	r27, r17
     16c:	e1 f7       	brne	.-8      	; 0x166 <.do_clear_bss_loop>
     16e:	56 d0       	rcall	.+172    	; 0x21c <main>
     170:	7a c7       	rjmp	.+3828   	; 0x1066 <_exit>

00000172 <__bad_interrupt>:
     172:	46 cf       	rjmp	.-372    	; 0x0 <__vectors>

00000174 <LEDs_SetAllLEDs>:
				PORTD &= ~LEDMask;
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
			{
				PORTD = ((PORTD & ~LEDS_ALL_LEDS) | LEDMask);
     174:	9b b1       	in	r25, 0x0b	; 11
     176:	9f 70       	andi	r25, 0x0F	; 15
     178:	98 2b       	or	r25, r24
     17a:	9b b9       	out	0x0b, r25	; 11
			}
     17c:	08 95       	ret

0000017e <RingBuffer_Insert>:
		 *  \param[in]     Data    Data element to insert into the buffer.
		 */
		static inline void RingBuffer_Insert(RingBuffer_t* Buffer, const uint8_t Data) ATTR_NON_NULL_PTR_ARG(1);
		static inline void RingBuffer_Insert(RingBuffer_t* Buffer, const uint8_t Data)
		{
			GCC_FORCE_POINTER_ACCESS(Buffer);
     17e:	fc 01       	movw	r30, r24

			*Buffer->In = Data;
     180:	a0 81       	ld	r26, Z
     182:	b1 81       	ldd	r27, Z+1	; 0x01
     184:	6c 93       	st	X, r22

			if (++Buffer->In == Buffer->End)
     186:	80 81       	ld	r24, Z
     188:	91 81       	ldd	r25, Z+1	; 0x01
     18a:	01 96       	adiw	r24, 0x01	; 1
     18c:	91 83       	std	Z+1, r25	; 0x01
     18e:	80 83       	st	Z, r24
     190:	26 81       	ldd	r18, Z+6	; 0x06
     192:	37 81       	ldd	r19, Z+7	; 0x07
     194:	82 17       	cp	r24, r18
     196:	93 07       	cpc	r25, r19
     198:	21 f4       	brne	.+8      	; 0x1a2 <RingBuffer_Insert+0x24>
			  Buffer->In = Buffer->Start;
     19a:	84 81       	ldd	r24, Z+4	; 0x04
     19c:	95 81       	ldd	r25, Z+5	; 0x05
     19e:	91 83       	std	Z+1, r25	; 0x01
     1a0:	80 83       	st	Z, r24
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
     1a2:	2f b7       	in	r18, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
     1a4:	f8 94       	cli

			uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
			GlobalInterruptDisable();

			Buffer->Count++;
     1a6:	82 85       	ldd	r24, Z+10	; 0x0a
     1a8:	93 85       	ldd	r25, Z+11	; 0x0b
     1aa:	01 96       	adiw	r24, 0x01	; 1
     1ac:	93 87       	std	Z+11, r25	; 0x0b
     1ae:	82 87       	std	Z+10, r24	; 0x0a
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
     1b0:	2f bf       	out	0x3f, r18	; 63

			SetGlobalInterruptMask(CurrentGlobalInt);
		}
     1b2:	08 95       	ret

000001b4 <RingBuffer_Remove>:
		 *  \return Next data element stored in the buffer.
		 */
		static inline uint8_t RingBuffer_Remove(RingBuffer_t* Buffer) ATTR_NON_NULL_PTR_ARG(1);
		static inline uint8_t RingBuffer_Remove(RingBuffer_t* Buffer)
		{
			GCC_FORCE_POINTER_ACCESS(Buffer);
     1b4:	fc 01       	movw	r30, r24

			uint8_t Data = *Buffer->Out;
     1b6:	a2 81       	ldd	r26, Z+2	; 0x02
     1b8:	b3 81       	ldd	r27, Z+3	; 0x03
     1ba:	8d 91       	ld	r24, X+

			if (++Buffer->Out == Buffer->End)
     1bc:	b3 83       	std	Z+3, r27	; 0x03
     1be:	a2 83       	std	Z+2, r26	; 0x02
     1c0:	26 81       	ldd	r18, Z+6	; 0x06
     1c2:	37 81       	ldd	r19, Z+7	; 0x07
     1c4:	a2 17       	cp	r26, r18
     1c6:	b3 07       	cpc	r27, r19
     1c8:	21 f4       	brne	.+8      	; 0x1d2 <RingBuffer_Remove+0x1e>
			  Buffer->Out = Buffer->Start;
     1ca:	24 81       	ldd	r18, Z+4	; 0x04
     1cc:	35 81       	ldd	r19, Z+5	; 0x05
     1ce:	33 83       	std	Z+3, r19	; 0x03
     1d0:	22 83       	std	Z+2, r18	; 0x02
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
     1d2:	9f b7       	in	r25, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
     1d4:	f8 94       	cli

			uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
			GlobalInterruptDisable();

			Buffer->Count--;
     1d6:	22 85       	ldd	r18, Z+10	; 0x0a
     1d8:	33 85       	ldd	r19, Z+11	; 0x0b
     1da:	21 50       	subi	r18, 0x01	; 1
     1dc:	30 40       	sbci	r19, 0x00	; 0
     1de:	33 87       	std	Z+11, r19	; 0x0b
     1e0:	22 87       	std	Z+10, r18	; 0x0a
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
     1e2:	9f bf       	out	0x3f, r25	; 63

			SetGlobalInterruptMask(CurrentGlobalInt);

			return Data;
		}
     1e4:	08 95       	ret

000001e6 <SetupHardware>:

/** Configures the board hardware and chip peripherals for the demo's functionality. */
void SetupHardware(void)
{
	/* Disable watchdog if enabled by bootloader/fuses */
	MCUSR &= ~(1 << WDRF);
     1e6:	84 b7       	in	r24, 0x34	; 52
     1e8:	87 7f       	andi	r24, 0xF7	; 247
     1ea:	84 bf       	out	0x34, r24	; 52
	wdt_disable();
     1ec:	88 e1       	ldi	r24, 0x18	; 24
     1ee:	0f b6       	in	r0, 0x3f	; 63
     1f0:	f8 94       	cli
     1f2:	80 93 60 00 	sts	0x0060, r24
     1f6:	10 92 60 00 	sts	0x0060, r1
     1fa:	0f be       	out	0x3f, r0	; 63
The type of x is clock_div_t.
*/
void clock_prescale_set(clock_div_t __x)
{
    uint8_t __tmp = _BV(CLKPCE);
    __asm__ __volatile__ (
     1fc:	90 e0       	ldi	r25, 0x00	; 0
     1fe:	80 e8       	ldi	r24, 0x80	; 128
     200:	0f b6       	in	r0, 0x3f	; 63
     202:	f8 94       	cli
     204:	80 93 61 00 	sts	0x0061, r24
     208:	90 93 61 00 	sts	0x0061, r25
     20c:	0f be       	out	0x3f, r0	; 63

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void LEDs_Init(void)
			{
				DDRD  |=  LEDS_ALL_LEDS;
     20e:	8a b1       	in	r24, 0x0a	; 10
     210:	80 6f       	ori	r24, 0xF0	; 240
     212:	8a b9       	out	0x0a, r24	; 10
				PORTD &= ~LEDS_ALL_LEDS;
     214:	8b b1       	in	r24, 0x0b	; 11
     216:	8f 70       	andi	r24, 0x0F	; 15
     218:	8b b9       	out	0x0b, r24	; 11
	/* Disable clock division */
	clock_prescale_set(clock_div_1);

	/* Hardware Initialization */
	LEDs_Init();
	USB_Init();
     21a:	f0 c2       	rjmp	.+1504   	; 0x7fc <USB_Init>

0000021c <main>:
     21c:	e4 df       	rcall	.-56     	; 0x1e6 <SetupHardware>
}
     21e:	ee e2       	ldi	r30, 0x2E	; 46
		                                         const uint16_t Size) ATTR_NON_NULL_PTR_ARG(1) ATTR_NON_NULL_PTR_ARG(2);
		static inline void RingBuffer_InitBuffer(RingBuffer_t* Buffer,
		                                         uint8_t* const DataPtr,
		                                         const uint16_t Size)
		{
			GCC_FORCE_POINTER_ACCESS(Buffer);
     220:	f1 e0       	ldi	r31, 0x01	; 1
     222:	2f b7       	in	r18, 0x3f	; 63
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
     224:	f8 94       	cli
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
     226:	8a e3       	ldi	r24, 0x3A	; 58

			uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
			GlobalInterruptDisable();

			Buffer->In     = DataPtr;
     228:	91 e0       	ldi	r25, 0x01	; 1
     22a:	91 83       	std	Z+1, r25	; 0x01
     22c:	80 83       	st	Z, r24
     22e:	93 83       	std	Z+3, r25	; 0x03
			Buffer->Out    = DataPtr;
     230:	82 83       	std	Z+2, r24	; 0x02
     232:	95 83       	std	Z+5, r25	; 0x05
			Buffer->Start  = &DataPtr[0];
     234:	84 83       	std	Z+4, r24	; 0x04
     236:	8a eb       	ldi	r24, 0xBA	; 186
			Buffer->End    = &DataPtr[Size];
     238:	91 e0       	ldi	r25, 0x01	; 1
     23a:	97 83       	std	Z+7, r25	; 0x07
     23c:	86 83       	std	Z+6, r24	; 0x06
     23e:	80 e8       	ldi	r24, 0x80	; 128
			Buffer->Size   = Size;
     240:	90 e0       	ldi	r25, 0x00	; 0
     242:	91 87       	std	Z+9, r25	; 0x09
     244:	80 87       	std	Z+8, r24	; 0x08
     246:	13 86       	std	Z+11, r1	; 0x0b
			Buffer->Count  = 0;
     248:	12 86       	std	Z+10, r1	; 0x0a
     24a:	2f bf       	out	0x3f, r18	; 63
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
     24c:	ea eb       	ldi	r30, 0xBA	; 186
		                                         const uint16_t Size) ATTR_NON_NULL_PTR_ARG(1) ATTR_NON_NULL_PTR_ARG(2);
		static inline void RingBuffer_InitBuffer(RingBuffer_t* Buffer,
		                                         uint8_t* const DataPtr,
		                                         const uint16_t Size)
		{
			GCC_FORCE_POINTER_ACCESS(Buffer);
     24e:	f1 e0       	ldi	r31, 0x01	; 1
     250:	4f b7       	in	r20, 0x3f	; 63
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
     252:	f8 94       	cli
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
     254:	26 ec       	ldi	r18, 0xC6	; 198

			uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
			GlobalInterruptDisable();

			Buffer->In     = DataPtr;
     256:	31 e0       	ldi	r19, 0x01	; 1
     258:	31 83       	std	Z+1, r19	; 0x01
     25a:	20 83       	st	Z, r18
     25c:	33 83       	std	Z+3, r19	; 0x03
			Buffer->Out    = DataPtr;
     25e:	22 83       	std	Z+2, r18	; 0x02
     260:	35 83       	std	Z+5, r19	; 0x05
			Buffer->Start  = &DataPtr[0];
     262:	24 83       	std	Z+4, r18	; 0x04
     264:	26 e4       	ldi	r18, 0x46	; 70
			Buffer->End    = &DataPtr[Size];
     266:	32 e0       	ldi	r19, 0x02	; 2
     268:	37 83       	std	Z+7, r19	; 0x07
     26a:	26 83       	std	Z+6, r18	; 0x06
     26c:	91 87       	std	Z+9, r25	; 0x09
			Buffer->Size   = Size;
     26e:	80 87       	std	Z+8, r24	; 0x08
     270:	13 86       	std	Z+11, r1	; 0x0b
			Buffer->Count  = 0;
     272:	12 86       	std	Z+10, r1	; 0x0a
     274:	4f bf       	out	0x3f, r20	; 63
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
     276:	80 e1       	ldi	r24, 0x10	; 16
	SetupHardware();

	RingBuffer_InitBuffer(&USBtoUSART_Buffer, USBtoUSART_Buffer_Data, sizeof(USBtoUSART_Buffer_Data));
	RingBuffer_InitBuffer(&USARTtoUSB_Buffer, USARTtoUSB_Buffer_Data, sizeof(USARTtoUSB_Buffer_Data));

	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
     278:	7d df       	rcall	.-262    	; 0x174 <LEDs_SetAllLEDs>
     27a:	78 94       	sei
     27c:	8f b7       	in	r24, 0x3f	; 63
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				sei();
     27e:	f8 94       	cli
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
     280:	20 91 38 01 	lds	r18, 0x0138
			uint16_t Count;

			uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
			GlobalInterruptDisable();

			Count = Buffer->Count;
     284:	30 91 39 01 	lds	r19, 0x0139
     288:	8f bf       	out	0x3f, r24	; 63
     28a:	80 91 36 01 	lds	r24, 0x0136
	GlobalInterruptEnable();

	for (;;)
	{
		/* Only try to read in bytes from the CDC interface if the transmit buffer is not full */
		if (!(RingBuffer_IsFull(&USBtoUSART_Buffer)))
     28e:	90 91 37 01 	lds	r25, 0x0137
     292:	28 17       	cp	r18, r24
     294:	39 07       	cpc	r19, r25
     296:	49 f0       	breq	.+18     	; 0x2aa <main+0x8e>
     298:	80 e0       	ldi	r24, 0x00	; 0
     29a:	91 e0       	ldi	r25, 0x01	; 1
		{
			int16_t ReceivedByte = CDC_Device_ReceiveByte(&VirtualSerial_CDC_Interface);
     29c:	8d d6       	rcall	.+3354   	; 0xfb8 <CDC_Device_ReceiveByte>
     29e:	bc 01       	movw	r22, r24
     2a0:	97 fd       	sbrc	r25, 7
     2a2:	03 c0       	rjmp	.+6      	; 0x2aa <main+0x8e>
     2a4:	8e e2       	ldi	r24, 0x2E	; 46

			/* Read bytes from the USB OUT endpoint into the USART transmit buffer */
			if (!(ReceivedByte < 0))
     2a6:	91 e0       	ldi	r25, 0x01	; 1
     2a8:	6a df       	rcall	.-300    	; 0x17e <RingBuffer_Insert>
			  RingBuffer_Insert(&USBtoUSART_Buffer, ReceivedByte);
     2aa:	2f b7       	in	r18, 0x3f	; 63
     2ac:	f8 94       	cli
     2ae:	80 91 c4 01 	lds	r24, 0x01C4
     2b2:	90 91 c5 01 	lds	r25, 0x01C5
     2b6:	2f bf       	out	0x3f, r18	; 63
     2b8:	00 97       	sbiw	r24, 0x00	; 0
     2ba:	11 f1       	breq	.+68     	; 0x300 <main+0xe4>
     2bc:	20 91 01 01 	lds	r18, 0x0101
		}

		/* Check if the UART receive buffer flush timer has expired or the buffer is nearly full */
		uint16_t BufferCount = RingBuffer_GetCount(&USARTtoUSB_Buffer);
		if (BufferCount)
     2c0:	2f 70       	andi	r18, 0x0F	; 15
     2c2:	20 93 e9 00 	sts	0x00E9, r18
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     2c6:	20 91 e8 00 	lds	r18, 0x00E8
     2ca:	20 ff       	sbrs	r18, 0
     2cc:	19 c0       	rjmp	.+50     	; 0x300 <main+0xe4>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     2ce:	80 31       	cpi	r24, 0x10	; 16
     2d0:	91 05       	cpc	r25, r1
		{
			Endpoint_SelectEndpoint(VirtualSerial_CDC_Interface.Config.DataINEndpoint.Address);

			/* Check if a packet is already enqueued to the host - if so, we shouldn't try to send more data
			 * until it completes as there is a chance nothing is listening and a lengthy timeout could occur */
			if (Endpoint_IsINReady())
     2d2:	10 f0       	brcs	.+4      	; 0x2d8 <main+0xbc>
     2d4:	8f e0       	ldi	r24, 0x0F	; 15
			{
				/* Never send more than one bank size less one byte to the host at a time, so that we don't block
				 * while a Zero Length Packet (ZLP) to terminate the transfer is sent if the host isn't listening */
				uint8_t BytesToSend = MIN(BufferCount, (CDC_TXRX_EPSIZE - 1));
     2d6:	90 e0       	ldi	r25, 0x00	; 0
     2d8:	18 2f       	mov	r17, r24
     2da:	c0 e0       	ldi	r28, 0x00	; 0
     2dc:	d0 e0       	ldi	r29, 0x00	; 0
     2de:	0e c0       	rjmp	.+28     	; 0x2fc <main+0xe0>
     2e0:	e0 91 bc 01 	lds	r30, 0x01BC

				/* Read bytes from the USART receive buffer into the USB IN endpoint */
				while (BytesToSend--)
     2e4:	f0 91 bd 01 	lds	r31, 0x01BD
		 *  \return Next data element stored in the buffer.
		 */
		static inline uint8_t RingBuffer_Peek(RingBuffer_t* const Buffer) ATTR_WARN_UNUSED_RESULT ATTR_NON_NULL_PTR_ARG(1);
		static inline uint8_t RingBuffer_Peek(RingBuffer_t* const Buffer)
		{
			return *Buffer->Out;
     2e8:	80 e0       	ldi	r24, 0x00	; 0
     2ea:	91 e0       	ldi	r25, 0x01	; 1
     2ec:	60 81       	ld	r22, Z
     2ee:	f8 d5       	rcall	.+3056   	; 0xee0 <CDC_Device_SendByte>
				{
					/* Try to send the next byte of data to the host, abort if there is an error without dequeuing */
					if (CDC_Device_SendByte(&VirtualSerial_CDC_Interface,
     2f0:	21 96       	adiw	r28, 0x01	; 1
     2f2:	88 23       	and	r24, r24
     2f4:	29 f4       	brne	.+10     	; 0x300 <main+0xe4>
     2f6:	8a eb       	ldi	r24, 0xBA	; 186
     2f8:	91 e0       	ldi	r25, 0x01	; 1
     2fa:	5c df       	rcall	.-328    	; 0x1b4 <RingBuffer_Remove>
     2fc:	1c 17       	cp	r17, r28
     2fe:	81 f7       	brne	.-32     	; 0x2e0 <main+0xc4>
					{
						break;
					}

					/* Dequeue the already sent byte from the buffer now we have confirmed that no transmission error occurred */
					RingBuffer_Remove(&USARTtoUSB_Buffer);
     300:	2f b7       	in	r18, 0x3f	; 63
     302:	f8 94       	cli
     304:	80 91 38 01 	lds	r24, 0x0138
				/* Never send more than one bank size less one byte to the host at a time, so that we don't block
				 * while a Zero Length Packet (ZLP) to terminate the transfer is sent if the host isn't listening */
				uint8_t BytesToSend = MIN(BufferCount, (CDC_TXRX_EPSIZE - 1));

				/* Read bytes from the USART receive buffer into the USB IN endpoint */
				while (BytesToSend--)
     308:	90 91 39 01 	lds	r25, 0x0139
     30c:	2f bf       	out	0x3f, r18	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
     30e:	00 97       	sbiw	r24, 0x00	; 0
			uint16_t Count;

			uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
			GlobalInterruptDisable();

			Count = Buffer->Count;
     310:	49 f0       	breq	.+18     	; 0x324 <main+0x108>
     312:	8e e2       	ldi	r24, 0x2E	; 46
     314:	91 e0       	ldi	r25, 0x01	; 1
     316:	4e df       	rcall	.-356    	; 0x1b4 <RingBuffer_Remove>
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
     318:	90 91 c8 00 	lds	r25, 0x00C8
				}
			}
		}

		/* Load the next byte from the USART transmit buffer into the USART */
		if (!(RingBuffer_IsEmpty(&USBtoUSART_Buffer)))
     31c:	95 ff       	sbrs	r25, 5
		  Serial_SendByte(RingBuffer_Remove(&USBtoUSART_Buffer));
     31e:	fc cf       	rjmp	.-8      	; 0x318 <main+0xfc>
     320:	80 93 ce 00 	sts	0x00CE, r24
     324:	80 e0       	ldi	r24, 0x00	; 0
			 *  \param[in] DataByte  Byte to transmit through the USART.
			 */
			static inline void Serial_SendByte(const char DataByte) ATTR_ALWAYS_INLINE;
			static inline void Serial_SendByte(const char DataByte)
			{
				while (!(UCSR1A & (1 << UDRE1)));
     326:	91 e0       	ldi	r25, 0x01	; 1
     328:	30 d6       	rcall	.+3168   	; 0xf8a <CDC_Device_USBTask>
     32a:	ef d4       	rcall	.+2526   	; 0xd0a <USB_USBTask>
     32c:	a7 cf       	rjmp	.-178    	; 0x27c <main+0x60>

0000032e <EVENT_USB_Device_Connect>:
				UDR1 = DataByte;
     32e:	80 ea       	ldi	r24, 0xA0	; 160
     330:	21 cf       	rjmp	.-446    	; 0x174 <LEDs_SetAllLEDs>

00000332 <EVENT_USB_Device_Disconnect>:

		CDC_Device_USBTask(&VirtualSerial_CDC_Interface);
     332:	80 e1       	ldi	r24, 0x10	; 16
     334:	1f cf       	rjmp	.-450    	; 0x174 <LEDs_SetAllLEDs>

00000336 <EVENT_USB_Device_ConfigurationChanged>:
     336:	80 e0       	ldi	r24, 0x00	; 0
     338:	91 e0       	ldi	r25, 0x01	; 1
		USB_USBTask();
     33a:	ae d5       	rcall	.+2908   	; 0xe98 <CDC_Device_ConfigureEndpoints>
     33c:	88 23       	and	r24, r24
	}
     33e:	11 f0       	breq	.+4      	; 0x344 <EVENT_USB_Device_ConfigurationChanged+0xe>
{
	bool ConfigSuccess = true;

	ConfigSuccess &= CDC_Device_ConfigureEndpoints(&VirtualSerial_CDC_Interface);

	LEDs_SetAllLEDs(ConfigSuccess ? LEDMASK_USB_READY : LEDMASK_USB_ERROR);
     340:	80 e6       	ldi	r24, 0x60	; 96
     342:	01 c0       	rjmp	.+2      	; 0x346 <EVENT_USB_Device_ConfigurationChanged+0x10>
     344:	80 e9       	ldi	r24, 0x90	; 144
     346:	16 cf       	rjmp	.-468    	; 0x174 <LEDs_SetAllLEDs>

00000348 <EVENT_USB_Device_ControlRequest>:
     348:	80 e0       	ldi	r24, 0x00	; 0
     34a:	91 e0       	ldi	r25, 0x01	; 1
}
     34c:	f9 c4       	rjmp	.+2546   	; 0xd40 <CDC_Device_ProcessControlRequest>

0000034e <__vector_25>:

/** Event handler for the library USB Control Request reception event. */
void EVENT_USB_Device_ControlRequest(void)
{
	CDC_Device_ProcessControlRequest(&VirtualSerial_CDC_Interface);
     34e:	1f 92       	push	r1
}
     350:	0f 92       	push	r0

/** ISR to manage the reception of data from the serial port, placing received bytes into a circular buffer
 *  for later transmission to the host.
 */
ISR(USART1_RX_vect, ISR_BLOCK)
{
     352:	0f b6       	in	r0, 0x3f	; 63
     354:	0f 92       	push	r0
     356:	0b b6       	in	r0, 0x3b	; 59
     358:	0f 92       	push	r0
     35a:	11 24       	eor	r1, r1
     35c:	2f 93       	push	r18
     35e:	3f 93       	push	r19
     360:	4f 93       	push	r20
     362:	5f 93       	push	r21
     364:	6f 93       	push	r22
     366:	7f 93       	push	r23
     368:	8f 93       	push	r24
     36a:	9f 93       	push	r25
     36c:	af 93       	push	r26
     36e:	bf 93       	push	r27
     370:	ef 93       	push	r30
     372:	ff 93       	push	r31
	uint8_t ReceivedByte = UDR1;
     374:	60 91 ce 00 	lds	r22, 0x00CE

	if (USB_DeviceState == DEVICE_STATE_Configured)
     378:	8e b3       	in	r24, 0x1e	; 30
     37a:	84 30       	cpi	r24, 0x04	; 4
     37c:	19 f4       	brne	.+6      	; 0x384 <__vector_25+0x36>
	  RingBuffer_Insert(&USARTtoUSB_Buffer, ReceivedByte);
     37e:	8a eb       	ldi	r24, 0xBA	; 186
     380:	91 e0       	ldi	r25, 0x01	; 1
     382:	fd de       	rcall	.-518    	; 0x17e <RingBuffer_Insert>
     384:	ff 91       	pop	r31
}
     386:	ef 91       	pop	r30
     388:	bf 91       	pop	r27
     38a:	af 91       	pop	r26
     38c:	9f 91       	pop	r25
     38e:	8f 91       	pop	r24
     390:	7f 91       	pop	r23
     392:	6f 91       	pop	r22
     394:	5f 91       	pop	r21
     396:	4f 91       	pop	r20
     398:	3f 91       	pop	r19
     39a:	2f 91       	pop	r18
     39c:	0f 90       	pop	r0
     39e:	0b be       	out	0x3b, r0	; 59
     3a0:	0f 90       	pop	r0
     3a2:	0f be       	out	0x3f, r0	; 63
     3a4:	0f 90       	pop	r0
     3a6:	1f 90       	pop	r1
     3a8:	18 95       	reti

000003aa <EVENT_CDC_Device_LineEncodingChanged>:
     3aa:	cf 93       	push	r28
/** Event handler for the CDC Class driver Line Encoding Changed event.
 *
 *  \param[in] CDCInterfaceInfo  Pointer to the CDC class interface configuration structure being referenced
 */
void EVENT_CDC_Device_LineEncodingChanged(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
     3ac:	fc 01       	movw	r30, r24
	uint8_t ConfigMask = 0;

	switch (CDCInterfaceInfo->State.LineEncoding.ParityType)
     3ae:	a1 8d       	ldd	r26, Z+25	; 0x19
     3b0:	a1 50       	subi	r26, 0x01	; 1
     3b2:	a2 30       	cpi	r26, 0x02	; 2
     3b4:	28 f4       	brcc	.+10     	; 0x3c0 <EVENT_CDC_Device_LineEncodingChanged+0x16>
     3b6:	b0 e0       	ldi	r27, 0x00	; 0
     3b8:	a5 5e       	subi	r26, 0xE5	; 229
     3ba:	be 4f       	sbci	r27, 0xFE	; 254
     3bc:	cc 91       	ld	r28, X
     3be:	01 c0       	rjmp	.+2      	; 0x3c2 <EVENT_CDC_Device_LineEncodingChanged+0x18>
     3c0:	c0 e0       	ldi	r28, 0x00	; 0
		case CDC_PARITY_Even:
			ConfigMask = (1 << UPM11);
			break;
	}

	if (CDCInterfaceInfo->State.LineEncoding.CharFormat == CDC_LINEENCODING_TwoStopBits)
     3c2:	80 8d       	ldd	r24, Z+24	; 0x18
     3c4:	82 30       	cpi	r24, 0x02	; 2
     3c6:	09 f4       	brne	.+2      	; 0x3ca <EVENT_CDC_Device_LineEncodingChanged+0x20>
	  ConfigMask |= (1 << USBS1);
     3c8:	c8 60       	ori	r28, 0x08	; 8

	switch (CDCInterfaceInfo->State.LineEncoding.DataBits)
     3ca:	82 8d       	ldd	r24, Z+26	; 0x1a
     3cc:	87 30       	cpi	r24, 0x07	; 7
     3ce:	31 f0       	breq	.+12     	; 0x3dc <EVENT_CDC_Device_LineEncodingChanged+0x32>
     3d0:	88 30       	cpi	r24, 0x08	; 8
     3d2:	31 f0       	breq	.+12     	; 0x3e0 <EVENT_CDC_Device_LineEncodingChanged+0x36>
     3d4:	86 30       	cpi	r24, 0x06	; 6
     3d6:	29 f4       	brne	.+10     	; 0x3e2 <EVENT_CDC_Device_LineEncodingChanged+0x38>
	{
		case 6:
			ConfigMask |= (1 << UCSZ10);
     3d8:	c2 60       	ori	r28, 0x02	; 2
			break;
     3da:	03 c0       	rjmp	.+6      	; 0x3e2 <EVENT_CDC_Device_LineEncodingChanged+0x38>
		case 7:
			ConfigMask |= (1 << UCSZ11);
     3dc:	c4 60       	ori	r28, 0x04	; 4
			break;
     3de:	01 c0       	rjmp	.+2      	; 0x3e2 <EVENT_CDC_Device_LineEncodingChanged+0x38>
		case 8:
			ConfigMask |= ((1 << UCSZ11) | (1 << UCSZ10));
     3e0:	c6 60       	ori	r28, 0x06	; 6
			break;
	}

	/* Must turn off USART before reconfiguring it, otherwise incorrect operation may occur */
	UCSR1B = 0;
     3e2:	10 92 c9 00 	sts	0x00C9, r1
	UCSR1A = 0;
     3e6:	10 92 c8 00 	sts	0x00C8, r1
	UCSR1C = 0;
     3ea:	10 92 ca 00 	sts	0x00CA, r1

	/* Set the new baud rate before configuring the USART */
	UBRR1  = SERIAL_2X_UBBRVAL(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS);
     3ee:	24 89       	ldd	r18, Z+20	; 0x14
     3f0:	35 89       	ldd	r19, Z+21	; 0x15
     3f2:	46 89       	ldd	r20, Z+22	; 0x16
     3f4:	57 89       	ldd	r21, Z+23	; 0x17
     3f6:	da 01       	movw	r26, r20
     3f8:	c9 01       	movw	r24, r18
     3fa:	b6 95       	lsr	r27
     3fc:	a7 95       	ror	r26
     3fe:	97 95       	ror	r25
     400:	87 95       	ror	r24
     402:	80 5c       	subi	r24, 0xC0	; 192
     404:	9d 4b       	sbci	r25, 0xBD	; 189
     406:	a0 4f       	sbci	r26, 0xF0	; 240
     408:	bf 4f       	sbci	r27, 0xFF	; 255
     40a:	bc 01       	movw	r22, r24
     40c:	cd 01       	movw	r24, r26
     40e:	09 d6       	rcall	.+3090   	; 0x1022 <__udivmodsi4>
     410:	21 50       	subi	r18, 0x01	; 1
     412:	30 40       	sbci	r19, 0x00	; 0
     414:	30 93 cd 00 	sts	0x00CD, r19
     418:	20 93 cc 00 	sts	0x00CC, r18
     41c:	c0 93 ca 00 	sts	0x00CA, r28

	/* Reconfigure the USART in double speed mode for a wider baud rate range at the expense of accuracy */
	UCSR1C = ConfigMask;
     420:	82 e0       	ldi	r24, 0x02	; 2
	UCSR1A = (1 << U2X1);
     422:	80 93 c8 00 	sts	0x00C8, r24
     426:	88 e9       	ldi	r24, 0x98	; 152
	UCSR1B = ((1 << RXCIE1) | (1 << TXEN1) | (1 << RXEN1));
     428:	80 93 c9 00 	sts	0x00C9, r24
     42c:	cf 91       	pop	r28
}
     42e:	08 95       	ret

00000430 <CALLBACK_USB_GetDescriptor>:
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
     430:	92 30       	cpi	r25, 0x02	; 2
     432:	29 f0       	breq	.+10     	; 0x43e <CALLBACK_USB_GetDescriptor+0xe>
     434:	93 30       	cpi	r25, 0x03	; 3
     436:	41 f0       	breq	.+16     	; 0x448 <CALLBACK_USB_GetDescriptor+0x18>
     438:	91 30       	cpi	r25, 0x01	; 1
     43a:	e9 f4       	brne	.+58     	; 0x476 <CALLBACK_USB_GetDescriptor+0x46>
     43c:	17 c0       	rjmp	.+46     	; 0x46c <CALLBACK_USB_GetDescriptor+0x3c>
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
			Size    = sizeof(USB_Descriptor_Configuration_t);
     43e:	8e e3       	ldi	r24, 0x3E	; 62
     440:	90 e0       	ldi	r25, 0x00	; 0
		case DTYPE_Device:
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
     442:	e6 ee       	ldi	r30, 0xE6	; 230
     444:	f0 e0       	ldi	r31, 0x00	; 0
			Size    = sizeof(USB_Descriptor_Configuration_t);
			break;
     446:	1b c0       	rjmp	.+54     	; 0x47e <CALLBACK_USB_GetDescriptor+0x4e>
		case DTYPE_String:
			switch (DescriptorNumber)
     448:	81 30       	cpi	r24, 0x01	; 1
     44a:	41 f0       	breq	.+16     	; 0x45c <CALLBACK_USB_GetDescriptor+0x2c>
     44c:	81 30       	cpi	r24, 0x01	; 1
     44e:	18 f0       	brcs	.+6      	; 0x456 <CALLBACK_USB_GetDescriptor+0x26>
     450:	82 30       	cpi	r24, 0x02	; 2
     452:	89 f4       	brne	.+34     	; 0x476 <CALLBACK_USB_GetDescriptor+0x46>
     454:	06 c0       	rjmp	.+12     	; 0x462 <CALLBACK_USB_GetDescriptor+0x32>
			{
				case 0x00:
					Address = &LanguageString;
					Size    = pgm_read_byte(&LanguageString.Header.Size);
     456:	e2 ee       	ldi	r30, 0xE2	; 226
     458:	f0 e0       	ldi	r31, 0x00	; 0
     45a:	05 c0       	rjmp	.+10     	; 0x466 <CALLBACK_USB_GetDescriptor+0x36>
					break;
				case 0x01:
					Address = &ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
     45c:	e8 ec       	ldi	r30, 0xC8	; 200
     45e:	f0 e0       	ldi	r31, 0x00	; 0
     460:	02 c0       	rjmp	.+4      	; 0x466 <CALLBACK_USB_GetDescriptor+0x36>
					break;
				case 0x02:
					Address = &ProductString;
					Size    = pgm_read_byte(&ProductString.Header.Size);
     462:	e8 e9       	ldi	r30, 0x98	; 152
     464:	f0 e0       	ldi	r31, 0x00	; 0
     466:	84 91       	lpm	r24, Z
     468:	90 e0       	ldi	r25, 0x00	; 0
					break;
     46a:	09 c0       	rjmp	.+18     	; 0x47e <CALLBACK_USB_GetDescriptor+0x4e>

	switch (DescriptorType)
	{
		case DTYPE_Device:
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
     46c:	82 e1       	ldi	r24, 0x12	; 18
     46e:	90 e0       	ldi	r25, 0x00	; 0
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
	{
		case DTYPE_Device:
			Address = &DeviceDescriptor;
     470:	e4 e2       	ldi	r30, 0x24	; 36
     472:	f1 e0       	ldi	r31, 0x01	; 1
     474:	04 c0       	rjmp	.+8      	; 0x47e <CALLBACK_USB_GetDescriptor+0x4e>
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;
     476:	80 e0       	ldi	r24, 0x00	; 0
     478:	90 e0       	ldi	r25, 0x00	; 0
                                    const void** const DescriptorAddress)
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
     47a:	e0 e0       	ldi	r30, 0x00	; 0
     47c:	f0 e0       	ldi	r31, 0x00	; 0
			}

			break;
	}

	*DescriptorAddress = Address;
     47e:	da 01       	movw	r26, r20
     480:	11 96       	adiw	r26, 0x01	; 1
     482:	fc 93       	st	X, r31
     484:	ee 93       	st	-X, r30
	return Size;
}
     486:	08 95       	ret

00000488 <Endpoint_Write_Control_Stream_LE>:
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
     488:	20 91 50 02 	lds	r18, 0x0250
     48c:	30 91 51 02 	lds	r19, 0x0251
     490:	26 17       	cp	r18, r22
     492:	37 07       	cpc	r19, r23
     494:	20 f4       	brcc	.+8      	; 0x49e <Endpoint_Write_Control_Stream_LE+0x16>
     496:	b9 01       	movw	r22, r18
     498:	fc 01       	movw	r30, r24
     49a:	20 e0       	ldi	r18, 0x00	; 0
     49c:	35 c0       	rjmp	.+106    	; 0x508 <Endpoint_Write_Control_Stream_LE+0x80>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
     49e:	61 15       	cp	r22, r1
     4a0:	71 05       	cpc	r23, r1
     4a2:	d1 f7       	brne	.-12     	; 0x498 <Endpoint_Write_Control_Stream_LE+0x10>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     4a4:	20 91 e8 00 	lds	r18, 0x00E8
     4a8:	2e 77       	andi	r18, 0x7E	; 126
     4aa:	20 93 e8 00 	sts	0x00E8, r18
     4ae:	f4 cf       	rjmp	.-24     	; 0x498 <Endpoint_Write_Control_Stream_LE+0x10>
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     4b0:	8e b3       	in	r24, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     4b2:	88 23       	and	r24, r24
     4b4:	f1 f1       	breq	.+124    	; 0x532 <Endpoint_Write_Control_Stream_LE+0xaa>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     4b6:	85 30       	cpi	r24, 0x05	; 5
     4b8:	c1 f1       	breq	.+112    	; 0x52a <Endpoint_Write_Control_Stream_LE+0xa2>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     4ba:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
     4be:	83 fd       	sbrc	r24, 3
     4c0:	36 c0       	rjmp	.+108    	; 0x52e <Endpoint_Write_Control_Stream_LE+0xa6>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     4c2:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
     4c6:	82 fd       	sbrc	r24, 2
     4c8:	2a c0       	rjmp	.+84     	; 0x51e <Endpoint_Write_Control_Stream_LE+0x96>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     4ca:	80 91 e8 00 	lds	r24, 0x00E8
		  break;

		if (Endpoint_IsINReady())
     4ce:	80 ff       	sbrs	r24, 0
     4d0:	1b c0       	rjmp	.+54     	; 0x508 <Endpoint_Write_Control_Stream_LE+0x80>
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
     4d2:	80 91 f2 00 	lds	r24, 0x00F2
     4d6:	90 91 f3 00 	lds	r25, 0x00F3
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
     4da:	06 c0       	rjmp	.+12     	; 0x4e8 <Endpoint_Write_Control_Stream_LE+0x60>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
     4dc:	21 91       	ld	r18, Z+
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     4de:	20 93 f1 00 	sts	0x00F1, r18
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
     4e2:	61 50       	subi	r22, 0x01	; 1
     4e4:	70 40       	sbci	r23, 0x00	; 0
				BytesInEndpoint++;
     4e6:	01 96       	adiw	r24, 0x01	; 1

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
     4e8:	61 15       	cp	r22, r1
     4ea:	71 05       	cpc	r23, r1
     4ec:	19 f0       	breq	.+6      	; 0x4f4 <Endpoint_Write_Control_Stream_LE+0x6c>
     4ee:	88 30       	cpi	r24, 0x08	; 8
     4f0:	91 05       	cpc	r25, r1
     4f2:	a0 f3       	brcs	.-24     	; 0x4dc <Endpoint_Write_Control_Stream_LE+0x54>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
     4f4:	21 e0       	ldi	r18, 0x01	; 1
     4f6:	88 30       	cpi	r24, 0x08	; 8
     4f8:	91 05       	cpc	r25, r1
     4fa:	09 f0       	breq	.+2      	; 0x4fe <Endpoint_Write_Control_Stream_LE+0x76>
     4fc:	20 e0       	ldi	r18, 0x00	; 0
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     4fe:	80 91 e8 00 	lds	r24, 0x00E8
     502:	8e 77       	andi	r24, 0x7E	; 126
     504:	80 93 e8 00 	sts	0x00E8, r24
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
     508:	61 15       	cp	r22, r1
     50a:	71 05       	cpc	r23, r1
     50c:	89 f6       	brne	.-94     	; 0x4b0 <Endpoint_Write_Control_Stream_LE+0x28>
     50e:	22 23       	and	r18, r18
     510:	79 f6       	brne	.-98     	; 0x4b0 <Endpoint_Write_Control_Stream_LE+0x28>
     512:	05 c0       	rjmp	.+10     	; 0x51e <Endpoint_Write_Control_Stream_LE+0x96>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     514:	8e b3       	in	r24, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     516:	88 23       	and	r24, r24
     518:	61 f0       	breq	.+24     	; 0x532 <Endpoint_Write_Control_Stream_LE+0xaa>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     51a:	85 30       	cpi	r24, 0x05	; 5
     51c:	61 f0       	breq	.+24     	; 0x536 <Endpoint_Write_Control_Stream_LE+0xae>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     51e:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
     522:	82 ff       	sbrs	r24, 2
     524:	f7 cf       	rjmp	.-18     	; 0x514 <Endpoint_Write_Control_Stream_LE+0x8c>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
     526:	80 e0       	ldi	r24, 0x00	; 0
     528:	08 95       	ret
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
     52a:	83 e0       	ldi	r24, 0x03	; 3
     52c:	08 95       	ret
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	08 95       	ret
	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
     532:	82 e0       	ldi	r24, 0x02	; 2
     534:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
     536:	83 e0       	ldi	r24, 0x03	; 3
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
     538:	08 95       	ret

0000053a <Endpoint_Write_Control_PStream_LE>:
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
     53a:	20 91 50 02 	lds	r18, 0x0250
     53e:	30 91 51 02 	lds	r19, 0x0251
     542:	26 17       	cp	r18, r22
     544:	37 07       	cpc	r19, r23
     546:	20 f4       	brcc	.+8      	; 0x550 <Endpoint_Write_Control_PStream_LE+0x16>
     548:	b9 01       	movw	r22, r18
     54a:	fc 01       	movw	r30, r24
     54c:	20 e0       	ldi	r18, 0x00	; 0
     54e:	37 c0       	rjmp	.+110    	; 0x5be <Endpoint_Write_Control_PStream_LE+0x84>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
     550:	61 15       	cp	r22, r1
     552:	71 05       	cpc	r23, r1
     554:	d1 f7       	brne	.-12     	; 0x54a <Endpoint_Write_Control_PStream_LE+0x10>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     556:	20 91 e8 00 	lds	r18, 0x00E8
     55a:	2e 77       	andi	r18, 0x7E	; 126
     55c:	20 93 e8 00 	sts	0x00E8, r18
     560:	f4 cf       	rjmp	.-24     	; 0x54a <Endpoint_Write_Control_PStream_LE+0x10>
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     562:	8e b3       	in	r24, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     564:	88 23       	and	r24, r24
     566:	09 f4       	brne	.+2      	; 0x56a <Endpoint_Write_Control_PStream_LE+0x30>
     568:	3f c0       	rjmp	.+126    	; 0x5e8 <Endpoint_Write_Control_PStream_LE+0xae>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     56a:	85 30       	cpi	r24, 0x05	; 5
     56c:	c9 f1       	breq	.+114    	; 0x5e0 <Endpoint_Write_Control_PStream_LE+0xa6>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     56e:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
     572:	83 fd       	sbrc	r24, 3
     574:	37 c0       	rjmp	.+110    	; 0x5e4 <Endpoint_Write_Control_PStream_LE+0xaa>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     576:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
     57a:	82 fd       	sbrc	r24, 2
     57c:	2b c0       	rjmp	.+86     	; 0x5d4 <Endpoint_Write_Control_PStream_LE+0x9a>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     57e:	80 91 e8 00 	lds	r24, 0x00E8
		  break;

		if (Endpoint_IsINReady())
     582:	80 ff       	sbrs	r24, 0
     584:	1c c0       	rjmp	.+56     	; 0x5be <Endpoint_Write_Control_PStream_LE+0x84>
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
     586:	80 91 f2 00 	lds	r24, 0x00F2
     58a:	90 91 f3 00 	lds	r25, 0x00F3
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
     58e:	07 c0       	rjmp	.+14     	; 0x59e <Endpoint_Write_Control_PStream_LE+0x64>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
     590:	24 91       	lpm	r18, Z
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     592:	20 93 f1 00 	sts	0x00F1, r18
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
     596:	31 96       	adiw	r30, 0x01	; 1
				Length--;
     598:	61 50       	subi	r22, 0x01	; 1
     59a:	70 40       	sbci	r23, 0x00	; 0
				BytesInEndpoint++;
     59c:	01 96       	adiw	r24, 0x01	; 1

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
     59e:	61 15       	cp	r22, r1
     5a0:	71 05       	cpc	r23, r1
     5a2:	19 f0       	breq	.+6      	; 0x5aa <Endpoint_Write_Control_PStream_LE+0x70>
     5a4:	88 30       	cpi	r24, 0x08	; 8
     5a6:	91 05       	cpc	r25, r1
     5a8:	98 f3       	brcs	.-26     	; 0x590 <Endpoint_Write_Control_PStream_LE+0x56>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
     5aa:	21 e0       	ldi	r18, 0x01	; 1
     5ac:	88 30       	cpi	r24, 0x08	; 8
     5ae:	91 05       	cpc	r25, r1
     5b0:	09 f0       	breq	.+2      	; 0x5b4 <Endpoint_Write_Control_PStream_LE+0x7a>
     5b2:	20 e0       	ldi	r18, 0x00	; 0
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     5b4:	80 91 e8 00 	lds	r24, 0x00E8
     5b8:	8e 77       	andi	r24, 0x7E	; 126
     5ba:	80 93 e8 00 	sts	0x00E8, r24
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
     5be:	61 15       	cp	r22, r1
     5c0:	71 05       	cpc	r23, r1
     5c2:	79 f6       	brne	.-98     	; 0x562 <Endpoint_Write_Control_PStream_LE+0x28>
     5c4:	22 23       	and	r18, r18
     5c6:	69 f6       	brne	.-102    	; 0x562 <Endpoint_Write_Control_PStream_LE+0x28>
     5c8:	05 c0       	rjmp	.+10     	; 0x5d4 <Endpoint_Write_Control_PStream_LE+0x9a>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     5ca:	8e b3       	in	r24, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     5cc:	88 23       	and	r24, r24
     5ce:	61 f0       	breq	.+24     	; 0x5e8 <Endpoint_Write_Control_PStream_LE+0xae>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     5d0:	85 30       	cpi	r24, 0x05	; 5
     5d2:	61 f0       	breq	.+24     	; 0x5ec <Endpoint_Write_Control_PStream_LE+0xb2>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     5d4:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
     5d8:	82 ff       	sbrs	r24, 2
     5da:	f7 cf       	rjmp	.-18     	; 0x5ca <Endpoint_Write_Control_PStream_LE+0x90>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
     5dc:	80 e0       	ldi	r24, 0x00	; 0
     5de:	08 95       	ret
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
     5e0:	83 e0       	ldi	r24, 0x03	; 3
     5e2:	08 95       	ret
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
     5e4:	81 e0       	ldi	r24, 0x01	; 1
     5e6:	08 95       	ret
	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
     5e8:	82 e0       	ldi	r24, 0x02	; 2
     5ea:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
     5ec:	83 e0       	ldi	r24, 0x03	; 3
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
     5ee:	08 95       	ret

000005f0 <Endpoint_ConfigureEndpoint_Prv>:
	UECFG0X = UECFG0XData;
	UECFG1X = UECFG1XData;

	return Endpoint_IsConfigured();
#else
	for (uint8_t EPNum = Number; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
     5f0:	98 2f       	mov	r25, r24
     5f2:	2a c0       	rjmp	.+84     	; 0x648 <Endpoint_ConfigureEndpoint_Prv+0x58>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     5f4:	90 93 e9 00 	sts	0x00E9, r25
		uint8_t UECFG1XTemp;
		uint8_t UEIENXTemp;

		Endpoint_SelectEndpoint(EPNum);

		if (EPNum == Number)
     5f8:	98 17       	cp	r25, r24
     5fa:	39 f0       	breq	.+14     	; 0x60a <Endpoint_ConfigureEndpoint_Prv+0x1a>
			UECFG1XTemp = UECFG1XData;
			UEIENXTemp  = 0;
		}
		else
		{
			UECFG0XTemp = UECFG0X;
     5fc:	70 91 ec 00 	lds	r23, 0x00EC
			UECFG1XTemp = UECFG1X;
     600:	20 91 ed 00 	lds	r18, 0x00ED
			UEIENXTemp  = UEIENX;
     604:	50 91 f0 00 	lds	r21, 0x00F0
     608:	03 c0       	rjmp	.+6      	; 0x610 <Endpoint_ConfigureEndpoint_Prv+0x20>
		Endpoint_SelectEndpoint(EPNum);

		if (EPNum == Number)
		{
			UECFG0XTemp = UECFG0XData;
			UECFG1XTemp = UECFG1XData;
     60a:	24 2f       	mov	r18, r20

		Endpoint_SelectEndpoint(EPNum);

		if (EPNum == Number)
		{
			UECFG0XTemp = UECFG0XData;
     60c:	76 2f       	mov	r23, r22
			UECFG1XTemp = UECFG1XData;
			UEIENXTemp  = 0;
     60e:	50 e0       	ldi	r21, 0x00	; 0
			UECFG0XTemp = UECFG0X;
			UECFG1XTemp = UECFG1X;
			UEIENXTemp  = UEIENX;
		}

		if (!(UECFG1XTemp & (1 << ALLOC)))
     610:	21 ff       	sbrs	r18, 1
     612:	19 c0       	rjmp	.+50     	; 0x646 <Endpoint_ConfigureEndpoint_Prv+0x56>
			 *  to and from a host.
			 */
			static inline void Endpoint_DisableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_DisableEndpoint(void)
			{
				UECONX &= ~(1 << EPEN);
     614:	30 91 eb 00 	lds	r19, 0x00EB
     618:	3e 7f       	andi	r19, 0xFE	; 254
     61a:	30 93 eb 00 	sts	0x00EB, r19
		  continue;

		Endpoint_DisableEndpoint();
		UECFG1X &= ~(1 << ALLOC);
     61e:	30 91 ed 00 	lds	r19, 0x00ED
     622:	3d 7f       	andi	r19, 0xFD	; 253
     624:	30 93 ed 00 	sts	0x00ED, r19
			 *  \note Endpoints must first be configured properly via \ref Endpoint_ConfigureEndpoint().
			 */
			static inline void Endpoint_EnableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_EnableEndpoint(void)
			{
				UECONX |= (1 << EPEN);
     628:	30 91 eb 00 	lds	r19, 0x00EB
     62c:	31 60       	ori	r19, 0x01	; 1
     62e:	30 93 eb 00 	sts	0x00EB, r19

		Endpoint_EnableEndpoint();
		UECFG0X = UECFG0XTemp;
     632:	70 93 ec 00 	sts	0x00EC, r23
		UECFG1X = UECFG1XTemp;
     636:	20 93 ed 00 	sts	0x00ED, r18
		UEIENX  = UEIENXTemp;
     63a:	50 93 f0 00 	sts	0x00F0, r21
			 *  \return Boolean \c true if the currently selected endpoint has been configured, \c false otherwise.
			 */
			static inline bool Endpoint_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsConfigured(void)
			{
				return ((UESTA0X & (1 << CFGOK)) ? true : false);
     63e:	20 91 ee 00 	lds	r18, 0x00EE

		if (!(Endpoint_IsConfigured()))
     642:	27 ff       	sbrs	r18, 7
     644:	08 c0       	rjmp	.+16     	; 0x656 <Endpoint_ConfigureEndpoint_Prv+0x66>
	UECFG0X = UECFG0XData;
	UECFG1X = UECFG1XData;

	return Endpoint_IsConfigured();
#else
	for (uint8_t EPNum = Number; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
     646:	9f 5f       	subi	r25, 0xFF	; 255
     648:	97 30       	cpi	r25, 0x07	; 7
     64a:	a0 f2       	brcs	.-88     	; 0x5f4 <Endpoint_ConfigureEndpoint_Prv+0x4>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     64c:	8f 70       	andi	r24, 0x0F	; 15
     64e:	80 93 e9 00 	sts	0x00E9, r24
		if (!(Endpoint_IsConfigured()))
		  return false;
	}

	Endpoint_SelectEndpoint(Number);
	return true;
     652:	81 e0       	ldi	r24, 0x01	; 1
     654:	08 95       	ret
		UECFG0X = UECFG0XTemp;
		UECFG1X = UECFG1XTemp;
		UEIENX  = UEIENXTemp;

		if (!(Endpoint_IsConfigured()))
		  return false;
     656:	80 e0       	ldi	r24, 0x00	; 0
	}

	Endpoint_SelectEndpoint(Number);
	return true;
#endif
}
     658:	08 95       	ret

0000065a <Endpoint_ConfigureEndpointTable>:
uint8_t USB_Device_ControlEndpointSize = ENDPOINT_CONTROLEP_DEFAULT_SIZE;
#endif

bool Endpoint_ConfigureEndpointTable(const USB_Endpoint_Table_t* const Table,
                                     const uint8_t Entries)
{
     65a:	0f 93       	push	r16
     65c:	1f 93       	push	r17
     65e:	cf 93       	push	r28
     660:	df 93       	push	r29
     662:	16 2f       	mov	r17, r22
	{
		if (!(Table[i].Address))
		  continue;
	
		if (!(Endpoint_ConfigureEndpoint(Table[i].Address, Table[i].Type, Table[i].Size, Table[i].Banks)))
		  return false;
     664:	ec 01       	movw	r28, r24
#endif

bool Endpoint_ConfigureEndpointTable(const USB_Endpoint_Table_t* const Table,
                                     const uint8_t Entries)
{
	for (uint8_t i = 0; i < Entries; i++)
     666:	00 e0       	ldi	r16, 0x00	; 0
     668:	2a c0       	rjmp	.+84     	; 0x6be <Endpoint_ConfigureEndpointTable+0x64>
	{
		if (!(Table[i].Address))
     66a:	98 81       	ld	r25, Y
     66c:	99 23       	and	r25, r25
     66e:	29 f1       	breq	.+74     	; 0x6ba <Endpoint_ConfigureEndpointTable+0x60>
		  continue;
	
		if (!(Endpoint_ConfigureEndpoint(Table[i].Address, Table[i].Type, Table[i].Size, Table[i].Banks)))
     670:	6b 81       	ldd	r22, Y+3	; 0x03
     672:	e9 81       	ldd	r30, Y+1	; 0x01
     674:	fa 81       	ldd	r31, Y+2	; 0x02
     676:	2c 81       	ldd	r18, Y+4	; 0x04
			static inline bool Endpoint_ConfigureEndpoint(const uint8_t Address,
			                                              const uint8_t Type,
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);
     678:	89 2f       	mov	r24, r25
     67a:	8f 70       	andi	r24, 0x0F	; 15

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
     67c:	87 30       	cpi	r24, 0x07	; 7
     67e:	18 f5       	brcc	.+70     	; 0x6c6 <Endpoint_ConfigureEndpointTable+0x6c>
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
				                                      ((Type << EPTYPE0) | ((Address & ENDPOINT_DIR_IN) ? (1 << EPDIR) : 0)),
     680:	62 95       	swap	r22
     682:	66 0f       	add	r22, r22
     684:	66 0f       	add	r22, r22
     686:	60 7c       	andi	r22, 0xC0	; 192
     688:	99 1f       	adc	r25, r25
     68a:	99 27       	eor	r25, r25
     68c:	99 1f       	adc	r25, r25
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
     68e:	69 2b       	or	r22, r25
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	10 f0       	brcs	.+4      	; 0x698 <Endpoint_ConfigureEndpointTable+0x3e>
     694:	96 e0       	ldi	r25, 0x06	; 6
     696:	01 c0       	rjmp	.+2      	; 0x69a <Endpoint_ConfigureEndpointTable+0x40>
     698:	92 e0       	ldi	r25, 0x02	; 2
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes) ATTR_WARN_UNUSED_RESULT ATTR_CONST
			                                                                       ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;
     69a:	28 e0       	ldi	r18, 0x08	; 8
     69c:	30 e0       	ldi	r19, 0x00	; 0
		/* Inline Functions: */
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes) ATTR_WARN_UNUSED_RESULT ATTR_CONST
			                                                                       ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
     69e:	40 e0       	ldi	r20, 0x00	; 0
     6a0:	03 c0       	rjmp	.+6      	; 0x6a8 <Endpoint_ConfigureEndpointTable+0x4e>
				uint16_t CheckBytes = 8;

				while (CheckBytes < Bytes)
				{
					MaskVal++;
     6a2:	4f 5f       	subi	r20, 0xFF	; 255
					CheckBytes <<= 1;
     6a4:	22 0f       	add	r18, r18
     6a6:	33 1f       	adc	r19, r19
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while (CheckBytes < Bytes)
     6a8:	2e 17       	cp	r18, r30
     6aa:	3f 07       	cpc	r19, r31
     6ac:	d0 f3       	brcs	.-12     	; 0x6a2 <Endpoint_ConfigureEndpointTable+0x48>
				{
					MaskVal++;
					CheckBytes <<= 1;
				}

				return (MaskVal << EPSIZE0);
     6ae:	42 95       	swap	r20
     6b0:	40 7f       	andi	r20, 0xF0	; 240
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
     6b2:	49 2b       	or	r20, r25
     6b4:	9d df       	rcall	.-198    	; 0x5f0 <Endpoint_ConfigureEndpoint_Prv>
     6b6:	88 23       	and	r24, r24
     6b8:	31 f0       	breq	.+12     	; 0x6c6 <Endpoint_ConfigureEndpointTable+0x6c>
     6ba:	0f 5f       	subi	r16, 0xFF	; 255
#endif

bool Endpoint_ConfigureEndpointTable(const USB_Endpoint_Table_t* const Table,
                                     const uint8_t Entries)
{
	for (uint8_t i = 0; i < Entries; i++)
     6bc:	25 96       	adiw	r28, 0x05	; 5
     6be:	01 17       	cp	r16, r17
     6c0:	a1 f6       	brne	.-88     	; 0x66a <Endpoint_ConfigureEndpointTable+0x10>
     6c2:	81 e0       	ldi	r24, 0x01	; 1
	
		if (!(Endpoint_ConfigureEndpoint(Table[i].Address, Table[i].Type, Table[i].Size, Table[i].Banks)))
		  return false;
	}
	
	return true;
     6c4:	01 c0       	rjmp	.+2      	; 0x6c8 <Endpoint_ConfigureEndpointTable+0x6e>
     6c6:	80 e0       	ldi	r24, 0x00	; 0
	{
		if (!(Table[i].Address))
		  continue;
	
		if (!(Endpoint_ConfigureEndpoint(Table[i].Address, Table[i].Type, Table[i].Size, Table[i].Banks)))
		  return false;
     6c8:	df 91       	pop	r29
	}
	
	return true;
}
     6ca:	cf 91       	pop	r28
     6cc:	1f 91       	pop	r17
     6ce:	0f 91       	pop	r16
     6d0:	08 95       	ret

000006d2 <Endpoint_ClearStatusStage>:
     6d2:	80 91 4a 02 	lds	r24, 0x024A
	}
}

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
     6d6:	87 ff       	sbrs	r24, 7
     6d8:	11 c0       	rjmp	.+34     	; 0x6fc <Endpoint_ClearStatusStage+0x2a>
     6da:	03 c0       	rjmp	.+6      	; 0x6e2 <Endpoint_ClearStatusStage+0x10>
	{
		while (!(Endpoint_IsOUTReceived()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
     6dc:	8e b3       	in	r24, 0x1e	; 30
     6de:	88 23       	and	r24, r24
     6e0:	b1 f0       	breq	.+44     	; 0x70e <Endpoint_ClearStatusStage+0x3c>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     6e2:	80 91 e8 00 	lds	r24, 0x00E8

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
	{
		while (!(Endpoint_IsOUTReceived()))
     6e6:	82 ff       	sbrs	r24, 2
     6e8:	f9 cf       	rjmp	.-14     	; 0x6dc <Endpoint_ClearStatusStage+0xa>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     6ea:	80 91 e8 00 	lds	r24, 0x00E8
     6ee:	8b 77       	andi	r24, 0x7B	; 123
     6f0:	80 93 e8 00 	sts	0x00E8, r24
     6f4:	08 95       	ret
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
     6f6:	8e b3       	in	r24, 0x1e	; 30
     6f8:	88 23       	and	r24, r24
     6fa:	49 f0       	breq	.+18     	; 0x70e <Endpoint_ClearStatusStage+0x3c>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     6fc:	80 91 e8 00 	lds	r24, 0x00E8

		Endpoint_ClearOUT();
	}
	else
	{
		while (!(Endpoint_IsINReady()))
     700:	80 ff       	sbrs	r24, 0
     702:	f9 cf       	rjmp	.-14     	; 0x6f6 <Endpoint_ClearStatusStage+0x24>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     704:	80 91 e8 00 	lds	r24, 0x00E8
     708:	8e 77       	andi	r24, 0x7E	; 126
     70a:	80 93 e8 00 	sts	0x00E8, r24
     70e:	08 95       	ret

00000710 <Endpoint_WaitUntilReady>:
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
     710:	80 91 e4 00 	lds	r24, 0x00E4
     714:	90 91 e5 00 	lds	r25, 0x00E5
     718:	45 e6       	ldi	r20, 0x65	; 101
     71a:	01 c0       	rjmp	.+2      	; 0x71e <Endpoint_WaitUntilReady+0xe>
     71c:	c9 01       	movw	r24, r18
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
     71e:	20 91 ec 00 	lds	r18, 0x00EC
     722:	20 ff       	sbrs	r18, 0
     724:	22 c0       	rjmp	.+68     	; 0x76a <Endpoint_WaitUntilReady+0x5a>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     726:	20 91 e8 00 	lds	r18, 0x00E8

	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
     72a:	20 fd       	sbrc	r18, 0
     72c:	14 c0       	rjmp	.+40     	; 0x756 <Endpoint_WaitUntilReady+0x46>
		{
			if (Endpoint_IsOUTReceived())
			  return ENDPOINT_READYWAIT_NoError;
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     72e:	2e b3       	in	r18, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     730:	22 23       	and	r18, r18
     732:	99 f0       	breq	.+38     	; 0x75a <Endpoint_WaitUntilReady+0x4a>
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     734:	25 30       	cpi	r18, 0x05	; 5
     736:	99 f0       	breq	.+38     	; 0x75e <Endpoint_WaitUntilReady+0x4e>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
     738:	20 91 eb 00 	lds	r18, 0x00EB
		  return ENDPOINT_READYWAIT_BusSuspended;
		else if (Endpoint_IsStalled())
     73c:	25 fd       	sbrc	r18, 5
     73e:	11 c0       	rjmp	.+34     	; 0x762 <Endpoint_WaitUntilReady+0x52>
     740:	20 91 e4 00 	lds	r18, 0x00E4
     744:	30 91 e5 00 	lds	r19, 0x00E5
		  return ENDPOINT_READYWAIT_EndpointStalled;

		uint16_t CurrentFrameNumber = USB_Device_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
     748:	28 17       	cp	r18, r24
     74a:	39 07       	cpc	r19, r25
     74c:	41 f3       	breq	.-48     	; 0x71e <Endpoint_WaitUntilReady+0xe>
     74e:	41 50       	subi	r20, 0x01	; 1
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
     750:	29 f7       	brne	.-54     	; 0x71c <Endpoint_WaitUntilReady+0xc>
			  return ENDPOINT_READYWAIT_Timeout;
     752:	84 e0       	ldi	r24, 0x04	; 4
     754:	08 95       	ret
	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
     756:	80 e0       	ldi	r24, 0x00	; 0
     758:	08 95       	ret
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
     75a:	82 e0       	ldi	r24, 0x02	; 2
     75c:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_READYWAIT_BusSuspended;
     75e:	83 e0       	ldi	r24, 0x03	; 3
     760:	08 95       	ret
		else if (Endpoint_IsStalled())
		  return ENDPOINT_READYWAIT_EndpointStalled;
     762:	81 e0       	ldi	r24, 0x01	; 1
     764:	08 95       	ret
			  return ENDPOINT_READYWAIT_NoError;
		}
		else
		{
			if (Endpoint_IsOUTReceived())
			  return ENDPOINT_READYWAIT_NoError;
     766:	80 e0       	ldi	r24, 0x00	; 0

			if (!(TimeoutMSRem--))
			  return ENDPOINT_READYWAIT_Timeout;
		}
	}
}
     768:	08 95       	ret
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     76a:	20 91 e8 00 	lds	r18, 0x00E8
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
		}
		else
		{
			if (Endpoint_IsOUTReceived())
     76e:	22 ff       	sbrs	r18, 2
     770:	de cf       	rjmp	.-68     	; 0x72e <Endpoint_WaitUntilReady+0x1e>
     772:	f9 cf       	rjmp	.-14     	; 0x766 <Endpoint_WaitUntilReady+0x56>

00000774 <USB_ResetInterface>:

	USB_IsInitialized = false;
}

void USB_ResetInterface(void)
{
     774:	0f 93       	push	r16
     776:	1f 93       	push	r17
     778:	cf 93       	push	r28
     77a:	df 93       	push	r29
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
     77c:	4d d0       	rcall	.+154    	; 0x818 <USB_INT_DisableAllInterrupts>
     77e:	54 d0       	rcall	.+168    	; 0x828 <USB_INT_ClearAllInterrupts>
	USB_INT_ClearAllInterrupts();
     780:	c8 ed       	ldi	r28, 0xD8	; 216
     782:	d0 e0       	ldi	r29, 0x00	; 0
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
     784:	88 81       	ld	r24, Y
     786:	8f 77       	andi	r24, 0x7F	; 127
     788:	88 83       	st	Y, r24
     78a:	88 81       	ld	r24, Y
     78c:	80 68       	ori	r24, 0x80	; 128
				USBCON |=  (1 << USBE);
     78e:	88 83       	st	Y, r24
     790:	88 81       	ld	r24, Y
     792:	8f 7d       	andi	r24, 0xDF	; 223
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
     794:	88 83       	st	Y, r24
     796:	e7 ed       	ldi	r30, 0xD7	; 215
     798:	f0 e0       	ldi	r31, 0x00	; 0

	if (USB_CurrentMode == USB_MODE_Device)
	{
		#if defined(USB_CAN_BE_DEVICE)
		#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
		UHWCON |=  (1 << UIMOD);
     79a:	80 81       	ld	r24, Z
     79c:	80 68       	ori	r24, 0x80	; 128
     79e:	80 83       	st	Z, r24
     7a0:	19 bc       	out	0x29, r1	; 41
     7a2:	1e ba       	out	0x1e, r1	; 30
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
     7a4:	10 92 46 02 	sts	0x0246, r1

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState                 = DEVICE_STATE_Unattached;
	USB_Device_ConfigurationNumber  = 0;
     7a8:	10 92 48 02 	sts	0x0248, r1

	#if !defined(NO_DEVICE_REMOTE_WAKEUP)
	USB_Device_RemoteWakeupEnabled  = false;
     7ac:	10 92 47 02 	sts	0x0247, r1
	#endif

	#if !defined(NO_DEVICE_SELF_POWER)
	USB_Device_CurrentlySelfPowered = false;
     7b0:	00 ee       	ldi	r16, 0xE0	; 224
     7b2:	10 e0       	ldi	r17, 0x00	; 0
			}

			static inline void USB_Device_SetFullSpeed(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetFullSpeed(void)
			{
				UDCON &= ~(1 << LSM);
     7b4:	f8 01       	movw	r30, r16
     7b6:	80 81       	ld	r24, Z
     7b8:	8b 7f       	andi	r24, 0xFB	; 251
     7ba:	80 83       	st	Z, r24
     7bc:	88 81       	ld	r24, Y
     7be:	81 60       	ori	r24, 0x01	; 1
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBCON |= (1 << VBUSTE);
     7c0:	88 83       	st	Y, r24
     7c2:	80 e0       	ldi	r24, 0x00	; 0
     7c4:	60 e0       	ldi	r22, 0x00	; 0
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
     7c6:	42 e0       	ldi	r20, 0x02	; 2
     7c8:	13 df       	rcall	.-474    	; 0x5f0 <Endpoint_ConfigureEndpoint_Prv>
     7ca:	e1 ee       	ldi	r30, 0xE1	; 225
     7cc:	f0 e0       	ldi	r31, 0x00	; 0
     7ce:	80 81       	ld	r24, Z
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
     7d0:	8e 7f       	andi	r24, 0xFE	; 254
     7d2:	80 83       	st	Z, r24
     7d4:	e2 ee       	ldi	r30, 0xE2	; 226
     7d6:	f0 e0       	ldi	r31, 0x00	; 0
     7d8:	80 81       	ld	r24, Z
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
     7da:	81 60       	ori	r24, 0x01	; 1
     7dc:	80 83       	st	Z, r24
     7de:	80 81       	ld	r24, Z
     7e0:	88 60       	ori	r24, 0x08	; 8
     7e2:	80 83       	st	Z, r24
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
     7e4:	f8 01       	movw	r30, r16
     7e6:	80 81       	ld	r24, Z
     7e8:	8e 7f       	andi	r24, 0xFE	; 254
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
     7ea:	80 83       	st	Z, r24
     7ec:	88 81       	ld	r24, Y
     7ee:	80 61       	ori	r24, 0x10	; 16
     7f0:	88 83       	st	Y, r24

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON |=  (1 << OTGPADE);
     7f2:	df 91       	pop	r29
     7f4:	cf 91       	pop	r28
     7f6:	1f 91       	pop	r17
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
     7f8:	0f 91       	pop	r16
     7fa:	08 95       	ret

000007fc <USB_Init>:
     7fc:	e8 ed       	ldi	r30, 0xD8	; 216
     7fe:	f0 e0       	ldi	r31, 0x00	; 0
     800:	80 81       	ld	r24, Z
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON &= ~(1 << OTGPADE);
     802:	8f 7e       	andi	r24, 0xEF	; 239
     804:	80 83       	st	Z, r24

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON |=  (1 << UVREGE);
     806:	e7 ed       	ldi	r30, 0xD7	; 215
     808:	f0 e0       	ldi	r31, 0x00	; 0
     80a:	80 81       	ld	r24, Z
     80c:	81 60       	ori	r24, 0x01	; 1
     80e:	80 83       	st	Z, r24
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
     810:	81 e0       	ldi	r24, 0x01	; 1
     812:	80 93 49 02 	sts	0x0249, r24

	USB_ResetInterface();
     816:	ae cf       	rjmp	.-164    	; 0x774 <USB_ResetInterface>

00000818 <USB_INT_DisableAllInterrupts>:
#include "../USBInterrupt.h"

void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
     818:	e8 ed       	ldi	r30, 0xD8	; 216
     81a:	f0 e0       	ldi	r31, 0x00	; 0
     81c:	80 81       	ld	r24, Z
     81e:	8c 7f       	andi	r24, 0xFC	; 252
     820:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
     822:	10 92 e2 00 	sts	0x00E2, r1
	#endif
}
     826:	08 95       	ret

00000828 <USB_INT_ClearAllInterrupts>:

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
     828:	10 92 da 00 	sts	0x00DA, r1
	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
     82c:	10 92 e1 00 	sts	0x00E1, r1
	#endif
}
     830:	08 95       	ret

00000832 <__vector_10>:

ISR(USB_GEN_vect, ISR_BLOCK)
{
     832:	1f 92       	push	r1
     834:	0f 92       	push	r0
     836:	0f b6       	in	r0, 0x3f	; 63
     838:	0f 92       	push	r0
     83a:	0b b6       	in	r0, 0x3b	; 59
     83c:	0f 92       	push	r0
     83e:	11 24       	eor	r1, r1
     840:	2f 93       	push	r18
     842:	3f 93       	push	r19
     844:	4f 93       	push	r20
     846:	5f 93       	push	r21
     848:	6f 93       	push	r22
     84a:	7f 93       	push	r23
     84c:	8f 93       	push	r24
     84e:	9f 93       	push	r25
     850:	af 93       	push	r26
     852:	bf 93       	push	r27
     854:	ef 93       	push	r30
     856:	ff 93       	push	r31
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
					case USB_INT_SOFI:
						return (UDINT  & (1 << SOFI));
     858:	80 91 e1 00 	lds	r24, 0x00E1
	#if defined(USB_CAN_BE_DEVICE)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
     85c:	82 ff       	sbrs	r24, 2
     85e:	0a c0       	rjmp	.+20     	; 0x874 <__vector_10+0x42>
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
					case USB_INT_SOFI:
						return (UDIEN  & (1 << SOFE));
     860:	80 91 e2 00 	lds	r24, 0x00E2
     864:	82 ff       	sbrs	r24, 2
     866:	06 c0       	rjmp	.+12     	; 0x874 <__vector_10+0x42>
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
						break;
					case USB_INT_SOFI:
						UDINT  &= ~(1 << SOFI);
     868:	80 91 e1 00 	lds	r24, 0x00E1
     86c:	8b 7f       	andi	r24, 0xFB	; 251
     86e:	80 93 e1 00 	sts	0x00E1, r24
	{
		USB_INT_Clear(USB_INT_SOFI);

		EVENT_USB_Device_StartOfFrame();
     872:	4a d2       	rcall	.+1172   	; 0xd08 <USB_Event_Stub>
     874:	80 91 da 00 	lds	r24, 0x00DA
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBINT & (1 << VBUSTI));
     878:	80 ff       	sbrs	r24, 0
	}
	#endif

	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	if (USB_INT_HasOccurred(USB_INT_VBUSTI) && USB_INT_IsEnabled(USB_INT_VBUSTI))
     87a:	1b c0       	rjmp	.+54     	; 0x8b2 <__vector_10+0x80>
     87c:	80 91 d8 00 	lds	r24, 0x00D8
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBCON & (1 << VBUSTE));
     880:	80 ff       	sbrs	r24, 0
     882:	17 c0       	rjmp	.+46     	; 0x8b2 <__vector_10+0x80>
     884:	80 91 da 00 	lds	r24, 0x00DA
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBINT &= ~(1 << VBUSTI);
     888:	8e 7f       	andi	r24, 0xFE	; 254
     88a:	80 93 da 00 	sts	0x00DA, r24
     88e:	80 91 d9 00 	lds	r24, 0x00D9
				 *  \return Boolean \c true if the VBUS line is currently detecting power from a host, \c false otherwise.
				 */
				static inline bool USB_VBUS_GetStatus(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
				static inline bool USB_VBUS_GetStatus(void)
				{
					return ((USBSTA & (1 << VBUS)) ? true : false);
     892:	80 ff       	sbrs	r24, 0
	{
		USB_INT_Clear(USB_INT_VBUSTI);

		if (USB_VBUS_GetStatus())
     894:	0b c0       	rjmp	.+22     	; 0x8ac <__vector_10+0x7a>
     896:	8c e0       	ldi	r24, 0x0C	; 12

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
     898:	89 bd       	out	0x29, r24	; 41
     89a:	8e e0       	ldi	r24, 0x0E	; 14
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
     89c:	89 bd       	out	0x29, r24	; 41
     89e:	09 b4       	in	r0, 0x29	; 41
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			{
				USB_PLL_On();
				while (!(USB_PLL_IsReady()));
     8a0:	00 fe       	sbrs	r0, 0
     8a2:	fd cf       	rjmp	.-6      	; 0x89e <__vector_10+0x6c>
     8a4:	81 e0       	ldi	r24, 0x01	; 1
			}

			USB_DeviceState = DEVICE_STATE_Powered;
     8a6:	8e bb       	out	0x1e, r24	; 30
     8a8:	42 dd       	rcall	.-1404   	; 0x32e <EVENT_USB_Device_Connect>
			EVENT_USB_Device_Connect();
     8aa:	03 c0       	rjmp	.+6      	; 0x8b2 <__vector_10+0x80>
     8ac:	19 bc       	out	0x29, r1	; 41
     8ae:	1e ba       	out	0x1e, r1	; 30
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
     8b0:	40 dd       	rcall	.-1408   	; 0x332 <EVENT_USB_Device_Disconnect>
		else
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			  USB_PLL_Off();

			USB_DeviceState = DEVICE_STATE_Unattached;
     8b2:	80 91 e1 00 	lds	r24, 0x00E1
			EVENT_USB_Device_Disconnect();
     8b6:	80 ff       	sbrs	r24, 0
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
     8b8:	17 c0       	rjmp	.+46     	; 0x8e8 <__vector_10+0xb6>
     8ba:	80 91 e2 00 	lds	r24, 0x00E2
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
     8be:	80 ff       	sbrs	r24, 0
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
     8c0:	13 c0       	rjmp	.+38     	; 0x8e8 <__vector_10+0xb6>
     8c2:	80 91 e2 00 	lds	r24, 0x00E2
     8c6:	8e 7f       	andi	r24, 0xFE	; 254
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
     8c8:	80 93 e2 00 	sts	0x00E2, r24
     8cc:	80 91 e2 00 	lds	r24, 0x00E2
     8d0:	80 61       	ori	r24, 0x10	; 16
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
     8d2:	80 93 e2 00 	sts	0x00E2, r24
     8d6:	80 91 d8 00 	lds	r24, 0x00D8
     8da:	80 62       	ori	r24, 0x20	; 32
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON |=  (1 << FRZCLK);
     8dc:	80 93 d8 00 	sts	0x00D8, r24
     8e0:	19 bc       	out	0x29, r1	; 41
     8e2:	85 e0       	ldi	r24, 0x05	; 5
     8e4:	8e bb       	out	0x1e, r24	; 30
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
     8e6:	10 d2       	rcall	.+1056   	; 0xd08 <USB_Event_Stub>

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
		EVENT_USB_Device_Disconnect();
		#else
		USB_DeviceState = DEVICE_STATE_Suspended;
     8e8:	80 91 e1 00 	lds	r24, 0x00E1
		EVENT_USB_Device_Suspend();
     8ec:	84 ff       	sbrs	r24, 4
     8ee:	2c c0       	rjmp	.+88     	; 0x948 <__vector_10+0x116>
					case USB_INT_IDTI:
						return (USBINT & (1 << IDTI));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
     8f0:	80 91 e2 00 	lds	r24, 0x00E2
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
     8f4:	84 ff       	sbrs	r24, 4
     8f6:	28 c0       	rjmp	.+80     	; 0x948 <__vector_10+0x116>
					case USB_INT_IDTI:
						return (USBCON & (1 << IDTE));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
     8f8:	8c e0       	ldi	r24, 0x0C	; 12
     8fa:	89 bd       	out	0x29, r24	; 41
     8fc:	8e e0       	ldi	r24, 0x0E	; 14
     8fe:	89 bd       	out	0x29, r24	; 41

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
     900:	09 b4       	in	r0, 0x29	; 41
     902:	00 fe       	sbrs	r0, 0
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
     904:	fd cf       	rjmp	.-6      	; 0x900 <__vector_10+0xce>
     906:	80 91 d8 00 	lds	r24, 0x00D8
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
     90a:	8f 7d       	andi	r24, 0xDF	; 223
     90c:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
     910:	80 91 e1 00 	lds	r24, 0x00E1
     914:	8f 7e       	andi	r24, 0xEF	; 239
     916:	80 93 e1 00 	sts	0x00E1, r24
						USBINT &= ~(1 << IDTI);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
     91a:	80 91 e2 00 	lds	r24, 0x00E2
     91e:	8f 7e       	andi	r24, 0xEF	; 239
     920:	80 93 e2 00 	sts	0x00E2, r24
						USBCON &= ~(1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
     924:	80 91 e2 00 	lds	r24, 0x00E2
     928:	81 60       	ori	r24, 0x01	; 1
     92a:	80 93 e2 00 	sts	0x00E2, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
     92e:	80 91 46 02 	lds	r24, 0x0246
     932:	88 23       	and	r24, r24
     934:	21 f4       	brne	.+8      	; 0x93e <__vector_10+0x10c>
		USB_INT_Clear(USB_INT_WAKEUPI);

		USB_INT_Disable(USB_INT_WAKEUPI);
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_Device_ConfigurationNumber)
     936:	80 91 e3 00 	lds	r24, 0x00E3
     93a:	87 ff       	sbrs	r24, 7
     93c:	02 c0       	rjmp	.+4      	; 0x942 <__vector_10+0x110>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
     93e:	84 e0       	ldi	r24, 0x04	; 4
     940:	01 c0       	rjmp	.+2      	; 0x944 <__vector_10+0x112>
		  USB_DeviceState = DEVICE_STATE_Configured;
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
     942:	81 e0       	ldi	r24, 0x01	; 1
     944:	8e bb       	out	0x1e, r24	; 30
     946:	e0 d1       	rcall	.+960    	; 0xd08 <USB_Event_Stub>
     948:	80 91 e1 00 	lds	r24, 0x00E1
     94c:	83 ff       	sbrs	r24, 3

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
		#else
		EVENT_USB_Device_WakeUp();
     94e:	26 c0       	rjmp	.+76     	; 0x99c <__vector_10+0x16a>
     950:	80 91 e2 00 	lds	r24, 0x00E2
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
     954:	83 ff       	sbrs	r24, 3
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
     956:	22 c0       	rjmp	.+68     	; 0x99c <__vector_10+0x16a>
     958:	80 91 e1 00 	lds	r24, 0x00E1
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
     95c:	87 7f       	andi	r24, 0xF7	; 247
     95e:	80 93 e1 00 	sts	0x00E1, r24
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
     962:	82 e0       	ldi	r24, 0x02	; 2
     964:	8e bb       	out	0x1e, r24	; 30
     966:	10 92 46 02 	sts	0x0246, r1
     96a:	80 91 e1 00 	lds	r24, 0x00E1
	{
		USB_INT_Clear(USB_INT_EORSTI);

		USB_DeviceState                = DEVICE_STATE_Default;
     96e:	8e 7f       	andi	r24, 0xFE	; 254
		USB_Device_ConfigurationNumber = 0;
     970:	80 93 e1 00 	sts	0x00E1, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
     974:	80 91 e2 00 	lds	r24, 0x00E2
     978:	8e 7f       	andi	r24, 0xFE	; 254
     97a:	80 93 e2 00 	sts	0x00E2, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
     97e:	80 91 e2 00 	lds	r24, 0x00E2
     982:	80 61       	ori	r24, 0x10	; 16
     984:	80 93 e2 00 	sts	0x00E2, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
     988:	80 e0       	ldi	r24, 0x00	; 0
     98a:	60 e0       	ldi	r22, 0x00	; 0
     98c:	42 e0       	ldi	r20, 0x02	; 2
     98e:	30 de       	rcall	.-928    	; 0x5f0 <Endpoint_ConfigureEndpoint_Prv>
     990:	80 91 f0 00 	lds	r24, 0x00F0
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
     994:	88 60       	ori	r24, 0x08	; 8
     996:	80 93 f0 00 	sts	0x00F0, r24
     99a:	b6 d1       	rcall	.+876    	; 0xd08 <USB_Event_Stub>
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX |= (1 << RXSTPE);
     99c:	ff 91       	pop	r31
     99e:	ef 91       	pop	r30
     9a0:	bf 91       	pop	r27
     9a2:	af 91       	pop	r26
     9a4:	9f 91       	pop	r25

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
     9a6:	8f 91       	pop	r24
     9a8:	7f 91       	pop	r23
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
     9aa:	6f 91       	pop	r22
     9ac:	5f 91       	pop	r21
     9ae:	4f 91       	pop	r20
     9b0:	3f 91       	pop	r19
     9b2:	2f 91       	pop	r18
     9b4:	0f 90       	pop	r0
     9b6:	0b be       	out	0x3b, r0	; 59
     9b8:	0f 90       	pop	r0
     9ba:	0f be       	out	0x3f, r0	; 63
     9bc:	0f 90       	pop	r0
     9be:	1f 90       	pop	r1
     9c0:	18 95       	reti

000009c2 <__vector_11>:
     9c2:	1f 92       	push	r1
     9c4:	0f 92       	push	r0
     9c6:	0f b6       	in	r0, 0x3f	; 63
     9c8:	0f 92       	push	r0
     9ca:	0b b6       	in	r0, 0x3b	; 59
     9cc:	0f 92       	push	r0
     9ce:	11 24       	eor	r1, r1

#if defined(INTERRUPT_CONTROL_ENDPOINT) && defined(USB_CAN_BE_DEVICE)
ISR(USB_COM_vect, ISR_BLOCK)
{
     9d0:	2f 93       	push	r18
     9d2:	3f 93       	push	r19
     9d4:	4f 93       	push	r20
     9d6:	5f 93       	push	r21
     9d8:	6f 93       	push	r22
     9da:	7f 93       	push	r23
     9dc:	8f 93       	push	r24
     9de:	9f 93       	push	r25
     9e0:	af 93       	push	r26
     9e2:	bf 93       	push	r27
     9e4:	cf 93       	push	r28
     9e6:	ef 93       	push	r30
     9e8:	ff 93       	push	r31
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
     9ea:	c0 91 e9 00 	lds	r28, 0x00E9
     9ee:	cf 70       	andi	r28, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
     9f0:	80 91 ec 00 	lds	r24, 0x00EC
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     9f4:	10 92 e9 00 	sts	0x00E9, r1
						break;
					case USB_INT_SOFI:
						UDIEN  &= ~(1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX &= ~(1 << RXSTPE);
     9f8:	80 91 f0 00 	lds	r24, 0x00F0
     9fc:	87 7f       	andi	r24, 0xF7	; 247
     9fe:	80 93 f0 00 	sts	0x00F0, r24
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				sei();
     a02:	78 94       	sei
	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Disable(USB_INT_RXSTPI);

	GlobalInterruptEnable();

	USB_Device_ProcessControlRequest();
     a04:	1d d0       	rcall	.+58     	; 0xa40 <USB_Device_ProcessControlRequest>
     a06:	10 92 e9 00 	sts	0x00E9, r1
     a0a:	80 91 f0 00 	lds	r24, 0x00F0
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX |= (1 << RXSTPE);
     a0e:	88 60       	ori	r24, 0x08	; 8
     a10:	80 93 f0 00 	sts	0x00F0, r24
     a14:	c0 93 e9 00 	sts	0x00E9, r28
     a18:	ff 91       	pop	r31

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Enable(USB_INT_RXSTPI);
	Endpoint_SelectEndpoint(PrevSelectedEndpoint);
}
     a1a:	ef 91       	pop	r30
     a1c:	cf 91       	pop	r28
     a1e:	bf 91       	pop	r27
     a20:	af 91       	pop	r26
     a22:	9f 91       	pop	r25
     a24:	8f 91       	pop	r24
     a26:	7f 91       	pop	r23
     a28:	6f 91       	pop	r22
     a2a:	5f 91       	pop	r21
     a2c:	4f 91       	pop	r20
     a2e:	3f 91       	pop	r19
     a30:	2f 91       	pop	r18
     a32:	0f 90       	pop	r0
     a34:	0b be       	out	0x3b, r0	; 59
     a36:	0f 90       	pop	r0
     a38:	0f be       	out	0x3f, r0	; 63
     a3a:	0f 90       	pop	r0
     a3c:	1f 90       	pop	r1
     a3e:	18 95       	reti

00000a40 <USB_Device_ProcessControlRequest>:
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_Device_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
     a40:	1f 93       	push	r17
     a42:	cf 93       	push	r28
     a44:	df 93       	push	r29
     a46:	cd b7       	in	r28, 0x3d	; 61
     a48:	de b7       	in	r29, 0x3e	; 62
     a4a:	ac 97       	sbiw	r28, 0x2c	; 44
     a4c:	0f b6       	in	r0, 0x3f	; 63
     a4e:	f8 94       	cli
     a50:	de bf       	out	0x3e, r29	; 62
     a52:	0f be       	out	0x3f, r0	; 63
     a54:	cd bf       	out	0x3d, r28	; 61
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
     a56:	80 e0       	ldi	r24, 0x00	; 0
	USB_ControlRequest.bRequest      = Endpoint_Read_8();
	USB_ControlRequest.wValue        = Endpoint_Read_16_LE();
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;
     a58:	ea e4       	ldi	r30, 0x4A	; 74
     a5a:	f2 e0       	ldi	r31, 0x02	; 2
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
     a5c:	90 91 f1 00 	lds	r25, 0x00F1

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_8();
     a60:	91 93       	st	Z+, r25
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
     a62:	8f 5f       	subi	r24, 0xFF	; 255
     a64:	88 30       	cpi	r24, 0x08	; 8
     a66:	d1 f7       	brne	.-12     	; 0xa5c <USB_Device_ProcessControlRequest+0x1c>
	  *(RequestHeader++) = Endpoint_Read_8();
	#endif

	EVENT_USB_Device_ControlRequest();
     a68:	6f dc       	rcall	.-1826   	; 0x348 <EVENT_USB_Device_ControlRequest>
     a6a:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     a6e:	83 ff       	sbrs	r24, 3

	if (Endpoint_IsSETUPReceived())
     a70:	33 c1       	rjmp	.+614    	; 0xcd8 <USB_Device_ProcessControlRequest+0x298>
     a72:	80 91 4a 02 	lds	r24, 0x024A
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
     a76:	20 91 4b 02 	lds	r18, 0x024B

		switch (USB_ControlRequest.bRequest)
     a7a:	25 30       	cpi	r18, 0x05	; 5
     a7c:	09 f4       	brne	.+2      	; 0xa80 <USB_Device_ProcessControlRequest+0x40>
     a7e:	84 c0       	rjmp	.+264    	; 0xb88 <USB_Device_ProcessControlRequest+0x148>
     a80:	26 30       	cpi	r18, 0x06	; 6
     a82:	40 f4       	brcc	.+16     	; 0xa94 <USB_Device_ProcessControlRequest+0x54>
     a84:	21 30       	cpi	r18, 0x01	; 1
     a86:	a1 f1       	breq	.+104    	; 0xaf0 <USB_Device_ProcessControlRequest+0xb0>
     a88:	21 30       	cpi	r18, 0x01	; 1
     a8a:	70 f0       	brcs	.+28     	; 0xaa8 <USB_Device_ProcessControlRequest+0x68>
     a8c:	23 30       	cpi	r18, 0x03	; 3
     a8e:	09 f0       	breq	.+2      	; 0xa92 <USB_Device_ProcessControlRequest+0x52>
     a90:	23 c1       	rjmp	.+582    	; 0xcd8 <USB_Device_ProcessControlRequest+0x298>
     a92:	2e c0       	rjmp	.+92     	; 0xaf0 <USB_Device_ProcessControlRequest+0xb0>
     a94:	28 30       	cpi	r18, 0x08	; 8
     a96:	09 f4       	brne	.+2      	; 0xa9a <USB_Device_ProcessControlRequest+0x5a>
     a98:	f2 c0       	rjmp	.+484    	; 0xc7e <USB_Device_ProcessControlRequest+0x23e>
     a9a:	29 30       	cpi	r18, 0x09	; 9
     a9c:	09 f4       	brne	.+2      	; 0xaa0 <USB_Device_ProcessControlRequest+0x60>
     a9e:	01 c1       	rjmp	.+514    	; 0xca2 <USB_Device_ProcessControlRequest+0x262>
     aa0:	26 30       	cpi	r18, 0x06	; 6
     aa2:	09 f0       	breq	.+2      	; 0xaa6 <USB_Device_ProcessControlRequest+0x66>
     aa4:	19 c1       	rjmp	.+562    	; 0xcd8 <USB_Device_ProcessControlRequest+0x298>
     aa6:	92 c0       	rjmp	.+292    	; 0xbcc <USB_Device_ProcessControlRequest+0x18c>
     aa8:	80 38       	cpi	r24, 0x80	; 128
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
     aaa:	21 f0       	breq	.+8      	; 0xab4 <USB_Device_ProcessControlRequest+0x74>
     aac:	82 38       	cpi	r24, 0x82	; 130
     aae:	09 f0       	breq	.+2      	; 0xab2 <USB_Device_ProcessControlRequest+0x72>
     ab0:	13 c1       	rjmp	.+550    	; 0xcd8 <USB_Device_ProcessControlRequest+0x298>
     ab2:	08 c0       	rjmp	.+16     	; 0xac4 <USB_Device_ProcessControlRequest+0x84>
     ab4:	80 91 47 02 	lds	r24, 0x0247
	Endpoint_ClearOUT();
}

static void USB_Device_GetStatus(void)
{
	uint8_t CurrentStatus = 0;
     ab8:	90 91 48 02 	lds	r25, 0x0248
			if (USB_Device_CurrentlySelfPowered)
			  CurrentStatus |= FEATURE_SELFPOWERED_ENABLED;
			#endif

			#if !defined(NO_DEVICE_REMOTE_WAKEUP)
			if (USB_Device_RemoteWakeupEnabled)
     abc:	99 23       	and	r25, r25
     abe:	71 f0       	breq	.+28     	; 0xadc <USB_Device_ProcessControlRequest+0x9c>
     ac0:	82 60       	ori	r24, 0x02	; 2
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
     ac2:	0c c0       	rjmp	.+24     	; 0xadc <USB_Device_ProcessControlRequest+0x9c>
     ac4:	80 91 4e 02 	lds	r24, 0x024E
			#endif
			break;
		case (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_ENDPOINT):
			#if !defined(CONTROL_ONLY_DEVICE)
			Endpoint_SelectEndpoint((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
     ac8:	8f 70       	andi	r24, 0x0F	; 15
     aca:	80 93 e9 00 	sts	0x00E9, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     ace:	90 91 eb 00 	lds	r25, 0x00EB
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
     ad2:	81 e0       	ldi	r24, 0x01	; 1

			CurrentStatus = Endpoint_IsStalled();
     ad4:	95 ff       	sbrs	r25, 5
     ad6:	80 e0       	ldi	r24, 0x00	; 0
     ad8:	10 92 e9 00 	sts	0x00E9, r1
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     adc:	90 91 e8 00 	lds	r25, 0x00E8
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     ae0:	97 7f       	andi	r25, 0xF7	; 247
     ae2:	90 93 e8 00 	sts	0x00E8, r25
     ae6:	80 93 f1 00 	sts	0x00F1, r24
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
     aea:	10 92 f1 00 	sts	0x00F1, r1
				UEDATX = (Data >> 8);
     aee:	d2 c0       	rjmp	.+420    	; 0xc94 <USB_Device_ProcessControlRequest+0x254>
     af0:	88 23       	and	r24, r24
				}

				break;
			case REQ_ClearFeature:
			case REQ_SetFeature:
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
     af2:	19 f0       	breq	.+6      	; 0xafa <USB_Device_ProcessControlRequest+0xba>
     af4:	82 30       	cpi	r24, 0x02	; 2
     af6:	09 f0       	breq	.+2      	; 0xafa <USB_Device_ProcessControlRequest+0xba>
     af8:	ef c0       	rjmp	.+478    	; 0xcd8 <USB_Device_ProcessControlRequest+0x298>
     afa:	90 e0       	ldi	r25, 0x00	; 0
	Endpoint_ClearStatusStage();
}

static void USB_Device_ClearSetFeature(void)
{
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
     afc:	8f 71       	andi	r24, 0x1F	; 31
     afe:	90 70       	andi	r25, 0x00	; 0
     b00:	00 97       	sbiw	r24, 0x00	; 0
     b02:	29 f0       	breq	.+10     	; 0xb0e <USB_Device_ProcessControlRequest+0xce>
     b04:	82 30       	cpi	r24, 0x02	; 2
     b06:	91 05       	cpc	r25, r1
     b08:	09 f0       	breq	.+2      	; 0xb0c <USB_Device_ProcessControlRequest+0xcc>
     b0a:	e6 c0       	rjmp	.+460    	; 0xcd8 <USB_Device_ProcessControlRequest+0x298>
     b0c:	0b c0       	rjmp	.+22     	; 0xb24 <USB_Device_ProcessControlRequest+0xe4>
     b0e:	80 91 4c 02 	lds	r24, 0x024C
	{
		#if !defined(NO_DEVICE_REMOTE_WAKEUP)
		case REQREC_DEVICE:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
     b12:	81 30       	cpi	r24, 0x01	; 1
     b14:	09 f0       	breq	.+2      	; 0xb18 <USB_Device_ProcessControlRequest+0xd8>
     b16:	e0 c0       	rjmp	.+448    	; 0xcd8 <USB_Device_ProcessControlRequest+0x298>
     b18:	23 30       	cpi	r18, 0x03	; 3
			  USB_Device_RemoteWakeupEnabled = (USB_ControlRequest.bRequest == REQ_SetFeature);
     b1a:	09 f0       	breq	.+2      	; 0xb1e <USB_Device_ProcessControlRequest+0xde>
     b1c:	80 e0       	ldi	r24, 0x00	; 0
     b1e:	80 93 48 02 	sts	0x0248, r24
     b22:	2c c0       	rjmp	.+88     	; 0xb7c <USB_Device_ProcessControlRequest+0x13c>
     b24:	80 91 4c 02 	lds	r24, 0x024C

			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
     b28:	88 23       	and	r24, r24
     b2a:	41 f5       	brne	.+80     	; 0xb7c <USB_Device_ProcessControlRequest+0x13c>
     b2c:	20 91 4e 02 	lds	r18, 0x024E
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
     b30:	2f 70       	andi	r18, 0x0F	; 15
     b32:	09 f4       	brne	.+2      	; 0xb36 <USB_Device_ProcessControlRequest+0xf6>

				if (EndpointIndex == ENDPOINT_CONTROLEP)
     b34:	d1 c0       	rjmp	.+418    	; 0xcd8 <USB_Device_ProcessControlRequest+0x298>
     b36:	20 93 e9 00 	sts	0x00E9, r18
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     b3a:	80 91 eb 00 	lds	r24, 0x00EB
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
     b3e:	80 ff       	sbrs	r24, 0
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
     b40:	1d c0       	rjmp	.+58     	; 0xb7c <USB_Device_ProcessControlRequest+0x13c>
     b42:	80 91 4b 02 	lds	r24, 0x024B
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
     b46:	83 30       	cpi	r24, 0x03	; 3
     b48:	21 f4       	brne	.+8      	; 0xb52 <USB_Device_ProcessControlRequest+0x112>
     b4a:	80 91 eb 00 	lds	r24, 0x00EB
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
     b4e:	80 62       	ori	r24, 0x20	; 32
     b50:	13 c0       	rjmp	.+38     	; 0xb78 <USB_Device_ProcessControlRequest+0x138>
     b52:	80 91 eb 00 	lds	r24, 0x00EB
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
     b56:	80 61       	ori	r24, 0x10	; 16
     b58:	80 93 eb 00 	sts	0x00EB, r24
     b5c:	81 e0       	ldi	r24, 0x01	; 1
			 *  \param[in] Address  Endpoint address whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t Address)
			{
				UERST = (1 << (Address & ENDPOINT_EPNUM_MASK));
     b5e:	90 e0       	ldi	r25, 0x00	; 0
     b60:	02 c0       	rjmp	.+4      	; 0xb66 <USB_Device_ProcessControlRequest+0x126>
     b62:	88 0f       	add	r24, r24
     b64:	99 1f       	adc	r25, r25
     b66:	2a 95       	dec	r18
     b68:	e2 f7       	brpl	.-8      	; 0xb62 <USB_Device_ProcessControlRequest+0x122>
     b6a:	80 93 ea 00 	sts	0x00EA, r24
     b6e:	10 92 ea 00 	sts	0x00EA, r1
				UERST = 0;
     b72:	80 91 eb 00 	lds	r24, 0x00EB

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
     b76:	88 60       	ori	r24, 0x08	; 8
     b78:	80 93 eb 00 	sts	0x00EB, r24
     b7c:	10 92 e9 00 	sts	0x00E9, r1
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     b80:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     b84:	87 7f       	andi	r24, 0xF7	; 247
     b86:	89 c0       	rjmp	.+274    	; 0xc9a <USB_Device_ProcessControlRequest+0x25a>
     b88:	88 23       	and	r24, r24
					USB_Device_ClearSetFeature();
				}

				break;
			case REQ_SetAddress:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
     b8a:	09 f0       	breq	.+2      	; 0xb8e <USB_Device_ProcessControlRequest+0x14e>
     b8c:	a5 c0       	rjmp	.+330    	; 0xcd8 <USB_Device_ProcessControlRequest+0x298>
     b8e:	10 91 4c 02 	lds	r17, 0x024C
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t DeviceAddress = (USB_ControlRequest.wValue & 0x7F);
     b92:	1f 77       	andi	r17, 0x7F	; 127
     b94:	80 91 e3 00 	lds	r24, 0x00E3
			#endif

			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				UDADDR = (UDADDR & (1 << ADDEN)) | (Address & 0x7F);
     b98:	80 78       	andi	r24, 0x80	; 128
     b9a:	81 2b       	or	r24, r17
     b9c:	80 93 e3 00 	sts	0x00E3, r24
     ba0:	80 91 e8 00 	lds	r24, 0x00E8
     ba4:	87 7f       	andi	r24, 0xF7	; 247
     ba6:	80 93 e8 00 	sts	0x00E8, r24
     baa:	93 dd       	rcall	.-1242   	; 0x6d2 <Endpoint_ClearStatusStage>

	USB_Device_SetDeviceAddress(DeviceAddress);

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
     bac:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     bb0:	80 ff       	sbrs	r24, 0
     bb2:	fc cf       	rjmp	.-8      	; 0xbac <USB_Device_ProcessControlRequest+0x16c>

	while (!(Endpoint_IsINReady()));
     bb4:	80 91 e3 00 	lds	r24, 0x00E3
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address)
			{
				(void)Address;
				
				UDADDR |= (1 << ADDEN);
     bb8:	80 68       	ori	r24, 0x80	; 128
     bba:	80 93 e3 00 	sts	0x00E3, r24
     bbe:	11 23       	and	r17, r17
     bc0:	11 f0       	breq	.+4      	; 0xbc6 <USB_Device_ProcessControlRequest+0x186>

	USB_Device_EnableDeviceAddress(DeviceAddress);

	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
     bc2:	83 e0       	ldi	r24, 0x03	; 3
     bc4:	01 c0       	rjmp	.+2      	; 0xbc8 <USB_Device_ProcessControlRequest+0x188>
     bc6:	82 e0       	ldi	r24, 0x02	; 2
     bc8:	8e bb       	out	0x1e, r24	; 30
     bca:	86 c0       	rjmp	.+268    	; 0xcd8 <USB_Device_ProcessControlRequest+0x298>
     bcc:	80 58       	subi	r24, 0x80	; 128
     bce:	82 30       	cpi	r24, 0x02	; 2
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_SetAddress();

				break;
			case REQ_GetDescriptor:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
     bd0:	08 f0       	brcs	.+2      	; 0xbd4 <USB_Device_ProcessControlRequest+0x194>
     bd2:	82 c0       	rjmp	.+260    	; 0xcd8 <USB_Device_ProcessControlRequest+0x298>
     bd4:	80 91 4c 02 	lds	r24, 0x024C
	    !(defined(USE_FLASH_DESCRIPTORS) || defined(USE_EEPROM_DESCRIPTORS) || defined(USE_RAM_DESCRIPTORS))
	uint8_t DescriptorAddressSpace;
	#endif

	#if !defined(NO_INTERNAL_SERIAL) && (USE_INTERNAL_SERIAL != NO_DESCRIPTOR)
	if (USB_ControlRequest.wValue == ((DTYPE_String << 8) | USE_INTERNAL_SERIAL))
     bd8:	90 91 4d 02 	lds	r25, 0x024D
     bdc:	23 e0       	ldi	r18, 0x03	; 3
     bde:	8c 3d       	cpi	r24, 0xDC	; 220
     be0:	92 07       	cpc	r25, r18
     be2:	a9 f5       	brne	.+106    	; 0xc4e <USB_Device_ProcessControlRequest+0x20e>
     be4:	83 e0       	ldi	r24, 0x03	; 3
     be6:	8c 83       	std	Y+4, r24	; 0x04
	{
		USB_Descriptor_Header_t Header;
		uint16_t                UnicodeString[INTERNAL_SERIAL_LENGTH_BITS / 4];
	} SignatureDescriptor;

	SignatureDescriptor.Header.Type = DTYPE_String;
     be8:	8a e2       	ldi	r24, 0x2A	; 42
     bea:	8b 83       	std	Y+3, r24	; 0x03
	SignatureDescriptor.Header.Size = USB_STRING_LEN(INTERNAL_SERIAL_LENGTH_BITS / 4);
     bec:	5f b7       	in	r21, 0x3f	; 63
     bee:	f8 94       	cli
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
     bf0:	de 01       	movw	r26, r28
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
     bf2:	13 96       	adiw	r26, 0x03	; 3
				__builtin_ssrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				cli();
				#endif

				GCC_MEMORY_BARRIER();
     bf4:	80 e0       	ldi	r24, 0x00	; 0
     bf6:	90 e0       	ldi	r25, 0x00	; 0
     bf8:	4e e0       	ldi	r20, 0x0E	; 14
     bfa:	61 e2       	ldi	r22, 0x21	; 33
			static inline void USB_Device_GetSerialString(uint16_t* const UnicodeString)
			{
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;
     bfc:	e4 2f       	mov	r30, r20

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
				{
					uint8_t SerialByte = boot_signature_byte_get(SigReadAddress);
     bfe:	f0 e0       	ldi	r31, 0x00	; 0
     c00:	60 93 57 00 	sts	0x0057, r22
     c04:	e4 91       	lpm	r30, Z
     c06:	80 ff       	sbrs	r24, 0
     c08:	03 c0       	rjmp	.+6      	; 0xc10 <USB_Device_ProcessControlRequest+0x1d0>

					if (SerialCharNum & 0x01)
     c0a:	e2 95       	swap	r30
     c0c:	ef 70       	andi	r30, 0x0F	; 15
					{
						SerialByte >>= 4;
     c0e:	4f 5f       	subi	r20, 0xFF	; 255
     c10:	ef 70       	andi	r30, 0x0F	; 15
						SigReadAddress++;
     c12:	2e 2f       	mov	r18, r30
					}

					SerialByte &= 0x0F;
     c14:	30 e0       	ldi	r19, 0x00	; 0
     c16:	ea 30       	cpi	r30, 0x0A	; 10
     c18:	18 f0       	brcs	.+6      	; 0xc20 <USB_Device_ProcessControlRequest+0x1e0>

					UnicodeString[SerialCharNum] = cpu_to_le16((SerialByte >= 10) ?
     c1a:	29 5c       	subi	r18, 0xC9	; 201
     c1c:	3f 4f       	sbci	r19, 0xFF	; 255
     c1e:	02 c0       	rjmp	.+4      	; 0xc24 <USB_Device_ProcessControlRequest+0x1e4>
     c20:	20 5d       	subi	r18, 0xD0	; 208
     c22:	3f 4f       	sbci	r19, 0xFF	; 255
     c24:	13 96       	adiw	r26, 0x03	; 3
     c26:	3c 93       	st	X, r19
     c28:	2e 93       	st	-X, r18
     c2a:	12 97       	sbiw	r26, 0x02	; 2
     c2c:	01 96       	adiw	r24, 0x01	; 1
     c2e:	12 96       	adiw	r26, 0x02	; 2
     c30:	84 31       	cpi	r24, 0x14	; 20
     c32:	91 05       	cpc	r25, r1
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
     c34:	19 f7       	brne	.-58     	; 0xbfc <USB_Device_ProcessControlRequest+0x1bc>
     c36:	5f bf       	out	0x3f, r21	; 63
     c38:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     c3c:	87 7f       	andi	r24, 0xF7	; 247
     c3e:	80 93 e8 00 	sts	0x00E8, r24
     c42:	ce 01       	movw	r24, r28
     c44:	03 96       	adiw	r24, 0x03	; 3

	USB_Device_GetSerialString(SignatureDescriptor.UnicodeString);

	Endpoint_ClearSETUP();

	Endpoint_Write_Control_Stream_LE(&SignatureDescriptor, sizeof(SignatureDescriptor));
     c46:	6a e2       	ldi	r22, 0x2A	; 42
     c48:	70 e0       	ldi	r23, 0x00	; 0
     c4a:	1e dc       	rcall	.-1988   	; 0x488 <Endpoint_Write_Control_Stream_LE>
     c4c:	12 c0       	rjmp	.+36     	; 0xc72 <USB_Device_ProcessControlRequest+0x232>
     c4e:	60 91 4e 02 	lds	r22, 0x024E
     c52:	ae 01       	movw	r20, r28
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif

	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
     c54:	4f 5f       	subi	r20, 0xFF	; 255
     c56:	5f 4f       	sbci	r21, 0xFF	; 255
     c58:	eb db       	rcall	.-2090   	; 0x430 <CALLBACK_USB_GetDescriptor>
     c5a:	bc 01       	movw	r22, r24
     c5c:	00 97       	sbiw	r24, 0x00	; 0
     c5e:	09 f4       	brne	.+2      	; 0xc62 <USB_Device_ProcessControlRequest+0x222>
     c60:	3b c0       	rjmp	.+118    	; 0xcd8 <USB_Device_ProcessControlRequest+0x298>
     c62:	80 91 e8 00 	lds	r24, 0x00E8
     c66:	87 7f       	andi	r24, 0xF7	; 247
     c68:	80 93 e8 00 	sts	0x00E8, r24
     c6c:	89 81       	ldd	r24, Y+1	; 0x01
     c6e:	9a 81       	ldd	r25, Y+2	; 0x02
     c70:	64 dc       	rcall	.-1848   	; 0x53a <Endpoint_Write_Control_PStream_LE>
     c72:	80 91 e8 00 	lds	r24, 0x00E8
	#if defined(USE_RAM_DESCRIPTORS) || !defined(ARCH_HAS_MULTI_ADDRESS_SPACE)
	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_EEPROM_DESCRIPTORS)
	Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_FLASH_DESCRIPTORS)
	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
     c76:	8b 77       	andi	r24, 0x7B	; 123
     c78:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     c7c:	2d c0       	rjmp	.+90     	; 0xcd8 <USB_Device_ProcessControlRequest+0x298>
     c7e:	80 38       	cpi	r24, 0x80	; 128
     c80:	59 f5       	brne	.+86     	; 0xcd8 <USB_Device_ProcessControlRequest+0x298>
     c82:	80 91 e8 00 	lds	r24, 0x00E8
     c86:	87 7f       	andi	r24, 0xF7	; 247
					USB_Device_GetDescriptor();
				}

				break;
			case REQ_GetConfiguration:
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
     c88:	80 93 e8 00 	sts	0x00E8, r24
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     c8c:	80 91 46 02 	lds	r24, 0x0246
     c90:	80 93 f1 00 	sts	0x00F1, r24
     c94:	80 91 e8 00 	lds	r24, 0x00E8

static void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();

	Endpoint_Write_8(USB_Device_ConfigurationNumber);
     c98:	8e 77       	andi	r24, 0x7E	; 126
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     c9a:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     c9e:	19 dd       	rcall	.-1486   	; 0x6d2 <Endpoint_ClearStatusStage>
     ca0:	1b c0       	rjmp	.+54     	; 0xcd8 <USB_Device_ProcessControlRequest+0x298>
     ca2:	88 23       	and	r24, r24
     ca4:	c9 f4       	brne	.+50     	; 0xcd8 <USB_Device_ProcessControlRequest+0x298>
     ca6:	90 91 4c 02 	lds	r25, 0x024C
	Endpoint_ClearIN();

	Endpoint_ClearStatusStage();
     caa:	92 30       	cpi	r25, 0x02	; 2
     cac:	a8 f4       	brcc	.+42     	; 0xcd8 <USB_Device_ProcessControlRequest+0x298>
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_GetConfiguration();

				break;
			case REQ_SetConfiguration:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
     cae:	80 91 e8 00 	lds	r24, 0x00E8
}

static void USB_Device_SetConfiguration(void)
{
	#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
     cb2:	87 7f       	andi	r24, 0xF7	; 247
     cb4:	80 93 e8 00 	sts	0x00E8, r24
     cb8:	90 93 46 02 	sts	0x0246, r25
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     cbc:	0a dd       	rcall	.-1516   	; 0x6d2 <Endpoint_ClearStatusStage>
     cbe:	80 91 46 02 	lds	r24, 0x0246
     cc2:	88 23       	and	r24, r24
	#endif
	#endif

	Endpoint_ClearSETUP();

	USB_Device_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
     cc4:	21 f4       	brne	.+8      	; 0xcce <USB_Device_ProcessControlRequest+0x28e>
     cc6:	80 91 e3 00 	lds	r24, 0x00E3

	Endpoint_ClearStatusStage();
     cca:	87 ff       	sbrs	r24, 7

	if (USB_Device_ConfigurationNumber)
     ccc:	02 c0       	rjmp	.+4      	; 0xcd2 <USB_Device_ProcessControlRequest+0x292>
     cce:	84 e0       	ldi	r24, 0x04	; 4
     cd0:	01 c0       	rjmp	.+2      	; 0xcd4 <USB_Device_ProcessControlRequest+0x294>
     cd2:	81 e0       	ldi	r24, 0x01	; 1
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
     cd4:	8e bb       	out	0x1e, r24	; 30
     cd6:	2f db       	rcall	.-2466   	; 0x336 <EVENT_USB_Device_ConfigurationChanged>
	  USB_DeviceState = DEVICE_STATE_Configured;
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
     cd8:	80 91 e8 00 	lds	r24, 0x00E8
     cdc:	83 ff       	sbrs	r24, 3
     cde:	0a c0       	rjmp	.+20     	; 0xcf4 <USB_Device_ProcessControlRequest+0x2b4>
     ce0:	80 91 e8 00 	lds	r24, 0x00E8

	EVENT_USB_Device_ConfigurationChanged();
     ce4:	87 7f       	andi	r24, 0xF7	; 247
     ce6:	80 93 e8 00 	sts	0x00E8, r24
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     cea:	80 91 eb 00 	lds	r24, 0x00EB
			default:
				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
     cee:	80 62       	ori	r24, 0x20	; 32
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     cf0:	80 93 eb 00 	sts	0x00EB, r24
     cf4:	ac 96       	adiw	r28, 0x2c	; 44
     cf6:	0f b6       	in	r0, 0x3f	; 63
     cf8:	f8 94       	cli
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
     cfa:	de bf       	out	0x3e, r29	; 62
     cfc:	0f be       	out	0x3f, r0	; 63
     cfe:	cd bf       	out	0x3d, r28	; 61
     d00:	df 91       	pop	r29
     d02:	cf 91       	pop	r28
	{
		Endpoint_ClearSETUP();
		Endpoint_StallTransaction();
	}
}
     d04:	1f 91       	pop	r17
     d06:	08 95       	ret

00000d08 <USB_Event_Stub>:
#include "Events.h"

void USB_Event_Stub(void)
{

}
     d08:	08 95       	ret

00000d0a <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
     d0a:	cf 93       	push	r28
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_DeviceTask(void)
{
	if (USB_DeviceState == DEVICE_STATE_Unattached)
     d0c:	8e b3       	in	r24, 0x1e	; 30
     d0e:	88 23       	and	r24, r24
     d10:	a9 f0       	breq	.+42     	; 0xd3c <USB_USBTask+0x32>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
     d12:	80 91 e9 00 	lds	r24, 0x00E9
     d16:	8f 70       	andi	r24, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
     d18:	90 91 ec 00 	lds	r25, 0x00EC
     d1c:	90 ff       	sbrs	r25, 0
     d1e:	02 c0       	rjmp	.+4      	; 0xd24 <USB_USBTask+0x1a>
     d20:	c0 e8       	ldi	r28, 0x80	; 128
     d22:	01 c0       	rjmp	.+2      	; 0xd26 <USB_USBTask+0x1c>
     d24:	c0 e0       	ldi	r28, 0x00	; 0
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
     d26:	c8 2b       	or	r28, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     d28:	10 92 e9 00 	sts	0x00E9, r1
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     d2c:	80 91 e8 00 	lds	r24, 0x00E8

	uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

	if (Endpoint_IsSETUPReceived())
     d30:	83 ff       	sbrs	r24, 3
     d32:	01 c0       	rjmp	.+2      	; 0xd36 <USB_USBTask+0x2c>
	  USB_Device_ProcessControlRequest();
     d34:	85 de       	rcall	.-758    	; 0xa40 <USB_Device_ProcessControlRequest>
     d36:	cf 70       	andi	r28, 0x0F	; 15
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     d38:	c0 93 e9 00 	sts	0x00E9, r28
     d3c:	cf 91       	pop	r28
	#elif defined(USB_CAN_BE_HOST)
		USB_HostTask();
	#elif defined(USB_CAN_BE_DEVICE)
		USB_DeviceTask();
	#endif
}
     d3e:	08 95       	ret

00000d40 <CDC_Device_ProcessControlRequest>:
#define  __INCLUDE_FROM_CDC_DRIVER
#define  __INCLUDE_FROM_CDC_DEVICE_C
#include "CDCClassDevice.h"

void CDC_Device_ProcessControlRequest(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
     d40:	cf 93       	push	r28
     d42:	df 93       	push	r29
     d44:	ec 01       	movw	r28, r24
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     d46:	80 91 e8 00 	lds	r24, 0x00E8
	if (!(Endpoint_IsSETUPReceived()))
     d4a:	83 ff       	sbrs	r24, 3
     d4c:	a2 c0       	rjmp	.+324    	; 0xe92 <CDC_Device_ProcessControlRequest+0x152>
	  return;

	if (USB_ControlRequest.wIndex != CDCInterfaceInfo->Config.ControlInterfaceNumber)
     d4e:	88 81       	ld	r24, Y
     d50:	90 e0       	ldi	r25, 0x00	; 0
     d52:	20 91 4e 02 	lds	r18, 0x024E
     d56:	30 91 4f 02 	lds	r19, 0x024F
     d5a:	28 17       	cp	r18, r24
     d5c:	39 07       	cpc	r19, r25
     d5e:	09 f0       	breq	.+2      	; 0xd62 <CDC_Device_ProcessControlRequest+0x22>
     d60:	98 c0       	rjmp	.+304    	; 0xe92 <CDC_Device_ProcessControlRequest+0x152>
	  return;

	switch (USB_ControlRequest.bRequest)
     d62:	80 91 4b 02 	lds	r24, 0x024B
     d66:	81 32       	cpi	r24, 0x21	; 33
     d68:	69 f0       	breq	.+26     	; 0xd84 <CDC_Device_ProcessControlRequest+0x44>
     d6a:	82 32       	cpi	r24, 0x22	; 34
     d6c:	20 f4       	brcc	.+8      	; 0xd76 <CDC_Device_ProcessControlRequest+0x36>
     d6e:	80 32       	cpi	r24, 0x20	; 32
     d70:	09 f0       	breq	.+2      	; 0xd74 <CDC_Device_ProcessControlRequest+0x34>
     d72:	8f c0       	rjmp	.+286    	; 0xe92 <CDC_Device_ProcessControlRequest+0x152>
     d74:	3c c0       	rjmp	.+120    	; 0xdee <CDC_Device_ProcessControlRequest+0xae>
     d76:	82 32       	cpi	r24, 0x22	; 34
     d78:	09 f4       	brne	.+2      	; 0xd7c <CDC_Device_ProcessControlRequest+0x3c>
     d7a:	6a c0       	rjmp	.+212    	; 0xe50 <CDC_Device_ProcessControlRequest+0x110>
     d7c:	83 32       	cpi	r24, 0x23	; 35
     d7e:	09 f0       	breq	.+2      	; 0xd82 <CDC_Device_ProcessControlRequest+0x42>
     d80:	88 c0       	rjmp	.+272    	; 0xe92 <CDC_Device_ProcessControlRequest+0x152>
     d82:	79 c0       	rjmp	.+242    	; 0xe76 <CDC_Device_ProcessControlRequest+0x136>
	{
		case CDC_REQ_GetLineEncoding:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
     d84:	80 91 4a 02 	lds	r24, 0x024A
     d88:	81 3a       	cpi	r24, 0xA1	; 161
     d8a:	09 f0       	breq	.+2      	; 0xd8e <CDC_Device_ProcessControlRequest+0x4e>
     d8c:	82 c0       	rjmp	.+260    	; 0xe92 <CDC_Device_ProcessControlRequest+0x152>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     d8e:	80 91 e8 00 	lds	r24, 0x00E8
     d92:	87 7f       	andi	r24, 0xF7	; 247
     d94:	80 93 e8 00 	sts	0x00E8, r24
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     d98:	80 91 e8 00 	lds	r24, 0x00E8
			{
				Endpoint_ClearSETUP();

				while (!(Endpoint_IsINReady()));
     d9c:	80 ff       	sbrs	r24, 0
     d9e:	fc cf       	rjmp	.-8      	; 0xd98 <CDC_Device_ProcessControlRequest+0x58>

				Endpoint_Write_32_LE(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS);
     da0:	8c 89       	ldd	r24, Y+20	; 0x14
     da2:	9d 89       	ldd	r25, Y+21	; 0x15
     da4:	ae 89       	ldd	r26, Y+22	; 0x16
     da6:	bf 89       	ldd	r27, Y+23	; 0x17
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_32_LE(const uint32_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_32_LE(const uint32_t Data)
			{
				UEDATX = (Data &  0xFF);
     da8:	80 93 f1 00 	sts	0x00F1, r24
				UEDATX = (Data >> 8);
     dac:	49 2f       	mov	r20, r25
     dae:	5a 2f       	mov	r21, r26
     db0:	6b 2f       	mov	r22, r27
     db2:	77 27       	eor	r23, r23
     db4:	40 93 f1 00 	sts	0x00F1, r20
				UEDATX = (Data >> 16);
     db8:	ad 01       	movw	r20, r26
     dba:	66 27       	eor	r22, r22
     dbc:	77 27       	eor	r23, r23
     dbe:	40 93 f1 00 	sts	0x00F1, r20
				UEDATX = (Data >> 24);
     dc2:	8b 2f       	mov	r24, r27
     dc4:	99 27       	eor	r25, r25
     dc6:	aa 27       	eor	r26, r26
     dc8:	bb 27       	eor	r27, r27
     dca:	80 93 f1 00 	sts	0x00F1, r24
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.CharFormat);
     dce:	88 8d       	ldd	r24, Y+24	; 0x18
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     dd0:	80 93 f1 00 	sts	0x00F1, r24
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.ParityType);
     dd4:	89 8d       	ldd	r24, Y+25	; 0x19
     dd6:	80 93 f1 00 	sts	0x00F1, r24
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.DataBits);
     dda:	8a 8d       	ldd	r24, Y+26	; 0x1a
     ddc:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     de0:	80 91 e8 00 	lds	r24, 0x00E8
     de4:	8e 77       	andi	r24, 0x7E	; 126
     de6:	80 93 e8 00 	sts	0x00E8, r24

				Endpoint_ClearIN();
				Endpoint_ClearStatusStage();
     dea:	73 dc       	rcall	.-1818   	; 0x6d2 <Endpoint_ClearStatusStage>
     dec:	52 c0       	rjmp	.+164    	; 0xe92 <CDC_Device_ProcessControlRequest+0x152>
     dee:	80 91 4a 02 	lds	r24, 0x024A
			}

			break;
		case CDC_REQ_SetLineEncoding:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
     df2:	81 32       	cpi	r24, 0x21	; 33
     df4:	09 f0       	breq	.+2      	; 0xdf8 <CDC_Device_ProcessControlRequest+0xb8>
     df6:	4d c0       	rjmp	.+154    	; 0xe92 <CDC_Device_ProcessControlRequest+0x152>
     df8:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     dfc:	87 7f       	andi	r24, 0xF7	; 247
     dfe:	80 93 e8 00 	sts	0x00E8, r24
     e02:	04 c0       	rjmp	.+8      	; 0xe0c <CDC_Device_ProcessControlRequest+0xcc>
     e04:	8e b3       	in	r24, 0x1e	; 30
			{
				Endpoint_ClearSETUP();

				while (!(Endpoint_IsOUTReceived()))
				{
					if (USB_DeviceState == DEVICE_STATE_Unattached)
     e06:	88 23       	and	r24, r24
     e08:	09 f4       	brne	.+2      	; 0xe0c <CDC_Device_ProcessControlRequest+0xcc>
     e0a:	43 c0       	rjmp	.+134    	; 0xe92 <CDC_Device_ProcessControlRequest+0x152>
     e0c:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     e10:	82 ff       	sbrs	r24, 2
		case CDC_REQ_SetLineEncoding:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
			{
				Endpoint_ClearSETUP();

				while (!(Endpoint_IsOUTReceived()))
     e12:	f8 cf       	rjmp	.-16     	; 0xe04 <CDC_Device_ProcessControlRequest+0xc4>
     e14:	30 91 f1 00 	lds	r19, 0x00F1
				{
					uint32_t Value;
					uint8_t  Bytes[4];
				} Data;

				Data.Bytes[0] = UEDATX;
     e18:	20 91 f1 00 	lds	r18, 0x00F1
				Data.Bytes[1] = UEDATX;
     e1c:	90 91 f1 00 	lds	r25, 0x00F1
				Data.Bytes[2] = UEDATX;
     e20:	80 91 f1 00 	lds	r24, 0x00F1
				Data.Bytes[3] = UEDATX;
     e24:	3c 8b       	std	Y+20, r19	; 0x14
				{
					if (USB_DeviceState == DEVICE_STATE_Unattached)
					  return;
				}

				CDCInterfaceInfo->State.LineEncoding.BaudRateBPS = Endpoint_Read_32_LE();
     e26:	2d 8b       	std	Y+21, r18	; 0x15
     e28:	9e 8b       	std	Y+22, r25	; 0x16
     e2a:	8f 8b       	std	Y+23, r24	; 0x17
     e2c:	80 91 f1 00 	lds	r24, 0x00F1
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
     e30:	88 8f       	std	Y+24, r24	; 0x18
				CDCInterfaceInfo->State.LineEncoding.CharFormat  = Endpoint_Read_8();
     e32:	80 91 f1 00 	lds	r24, 0x00F1
     e36:	89 8f       	std	Y+25, r24	; 0x19
				CDCInterfaceInfo->State.LineEncoding.ParityType  = Endpoint_Read_8();
     e38:	80 91 f1 00 	lds	r24, 0x00F1
     e3c:	8a 8f       	std	Y+26, r24	; 0x1a
				CDCInterfaceInfo->State.LineEncoding.DataBits    = Endpoint_Read_8();
     e3e:	80 91 e8 00 	lds	r24, 0x00E8
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     e42:	8b 77       	andi	r24, 0x7B	; 123
     e44:	80 93 e8 00 	sts	0x00E8, r24
     e48:	44 dc       	rcall	.-1912   	; 0x6d2 <Endpoint_ClearStatusStage>

				Endpoint_ClearOUT();
				Endpoint_ClearStatusStage();
     e4a:	ce 01       	movw	r24, r28
     e4c:	ae da       	rcall	.-2724   	; 0x3aa <EVENT_CDC_Device_LineEncodingChanged>

				EVENT_CDC_Device_LineEncodingChanged(CDCInterfaceInfo);
     e4e:	21 c0       	rjmp	.+66     	; 0xe92 <CDC_Device_ProcessControlRequest+0x152>
     e50:	80 91 4a 02 	lds	r24, 0x024A
     e54:	81 32       	cpi	r24, 0x21	; 33
			}

			break;
		case CDC_REQ_SetControlLineState:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
     e56:	e9 f4       	brne	.+58     	; 0xe92 <CDC_Device_ProcessControlRequest+0x152>
     e58:	80 91 e8 00 	lds	r24, 0x00E8
     e5c:	87 7f       	andi	r24, 0xF7	; 247
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     e5e:	80 93 e8 00 	sts	0x00E8, r24
     e62:	37 dc       	rcall	.-1938   	; 0x6d2 <Endpoint_ClearStatusStage>
     e64:	80 91 4c 02 	lds	r24, 0x024C
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
     e68:	90 91 4d 02 	lds	r25, 0x024D

				CDCInterfaceInfo->State.ControlLineStates.HostToDevice = USB_ControlRequest.wValue;
     e6c:	99 8b       	std	Y+17, r25	; 0x11
     e6e:	88 8b       	std	Y+16, r24	; 0x10
     e70:	ce 01       	movw	r24, r28
     e72:	d6 d0       	rcall	.+428    	; 0x1020 <CDC_Device_Event_Stub>
     e74:	0e c0       	rjmp	.+28     	; 0xe92 <CDC_Device_ProcessControlRequest+0x152>
     e76:	80 91 4a 02 	lds	r24, 0x024A

				EVENT_CDC_Device_ControLineStateChanged(CDCInterfaceInfo);
     e7a:	81 32       	cpi	r24, 0x21	; 33
     e7c:	51 f4       	brne	.+20     	; 0xe92 <CDC_Device_ProcessControlRequest+0x152>
     e7e:	80 91 e8 00 	lds	r24, 0x00E8
			}

			break;
		case CDC_REQ_SendBreak:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
     e82:	87 7f       	andi	r24, 0xF7	; 247
     e84:	80 93 e8 00 	sts	0x00E8, r24
     e88:	24 dc       	rcall	.-1976   	; 0x6d2 <Endpoint_ClearStatusStage>
     e8a:	ce 01       	movw	r24, r28
     e8c:	60 91 4c 02 	lds	r22, 0x024C
     e90:	c7 d0       	rcall	.+398    	; 0x1020 <CDC_Device_Event_Stub>
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
     e92:	df 91       	pop	r29
     e94:	cf 91       	pop	r28

				EVENT_CDC_Device_BreakSent(CDCInterfaceInfo, (uint8_t)USB_ControlRequest.wValue);
     e96:	08 95       	ret

00000e98 <CDC_Device_ConfigureEndpoints>:
     e98:	cf 93       	push	r28
     e9a:	df 93       	push	r29
     e9c:	ec 01       	movw	r28, r24
     e9e:	40 96       	adiw	r24, 0x10	; 16
			}

			break;
	}
}
     ea0:	fc 01       	movw	r30, r24
     ea2:	8b e0       	ldi	r24, 0x0B	; 11
     ea4:	df 01       	movw	r26, r30

bool CDC_Device_ConfigureEndpoints(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
	memset(&CDCInterfaceInfo->State, 0x00, sizeof(CDCInterfaceInfo->State));
     ea6:	1d 92       	st	X+, r1
     ea8:	8a 95       	dec	r24
     eaa:	e9 f7       	brne	.-6      	; 0xea6 <CDC_Device_ConfigureEndpoints+0xe>

	CDCInterfaceInfo->Config.DataINEndpoint.Type       = EP_TYPE_BULK;
     eac:	82 e0       	ldi	r24, 0x02	; 2
     eae:	8c 83       	std	Y+4, r24	; 0x04
	CDCInterfaceInfo->Config.DataOUTEndpoint.Type      = EP_TYPE_BULK;
     eb0:	89 87       	std	Y+9, r24	; 0x09
	CDCInterfaceInfo->Config.NotificationEndpoint.Type = EP_TYPE_INTERRUPT;
     eb2:	83 e0       	ldi	r24, 0x03	; 3
     eb4:	8e 87       	std	Y+14, r24	; 0x0e

	if (!(Endpoint_ConfigureEndpointTable(&CDCInterfaceInfo->Config.DataINEndpoint, 1)))
     eb6:	ce 01       	movw	r24, r28
     eb8:	01 96       	adiw	r24, 0x01	; 1
     eba:	61 e0       	ldi	r22, 0x01	; 1
     ebc:	ce db       	rcall	.-2148   	; 0x65a <Endpoint_ConfigureEndpointTable>
     ebe:	88 23       	and	r24, r24
     ec0:	59 f0       	breq	.+22     	; 0xed8 <CDC_Device_ConfigureEndpoints+0x40>
     ec2:	ce 01       	movw	r24, r28
	  return false;

	if (!(Endpoint_ConfigureEndpointTable(&CDCInterfaceInfo->Config.DataOUTEndpoint, 1)))
     ec4:	06 96       	adiw	r24, 0x06	; 6
     ec6:	61 e0       	ldi	r22, 0x01	; 1
     ec8:	c8 db       	rcall	.-2160   	; 0x65a <Endpoint_ConfigureEndpointTable>
     eca:	88 23       	and	r24, r24
     ecc:	29 f0       	breq	.+10     	; 0xed8 <CDC_Device_ConfigureEndpoints+0x40>
     ece:	ce 01       	movw	r24, r28
     ed0:	0b 96       	adiw	r24, 0x0b	; 11
	  return false;

	if (!(Endpoint_ConfigureEndpointTable(&CDCInterfaceInfo->Config.NotificationEndpoint, 1)))
     ed2:	61 e0       	ldi	r22, 0x01	; 1
     ed4:	c2 db       	rcall	.-2172   	; 0x65a <Endpoint_ConfigureEndpointTable>
     ed6:	01 c0       	rjmp	.+2      	; 0xeda <CDC_Device_ConfigureEndpoints+0x42>
     ed8:	80 e0       	ldi	r24, 0x00	; 0
     eda:	df 91       	pop	r29
     edc:	cf 91       	pop	r28

	if (!(Endpoint_ConfigureEndpointTable(&CDCInterfaceInfo->Config.DataINEndpoint, 1)))
	  return false;

	if (!(Endpoint_ConfigureEndpointTable(&CDCInterfaceInfo->Config.DataOUTEndpoint, 1)))
	  return false;
     ede:	08 95       	ret

00000ee0 <CDC_Device_SendByte>:

	if (!(Endpoint_ConfigureEndpointTable(&CDCInterfaceInfo->Config.NotificationEndpoint, 1)))
	  return false;

	return true;
}
     ee0:	cf 93       	push	r28
     ee2:	fc 01       	movw	r30, r24
     ee4:	c6 2f       	mov	r28, r22
}

uint8_t CDC_Device_SendByte(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo,
                            const uint8_t Data)
{
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
     ee6:	8e b3       	in	r24, 0x1e	; 30
     ee8:	84 30       	cpi	r24, 0x04	; 4
     eea:	e9 f4       	brne	.+58     	; 0xf26 <CDC_Device_SendByte+0x46>
     eec:	44 89       	ldd	r20, Z+20	; 0x14
     eee:	55 89       	ldd	r21, Z+21	; 0x15
     ef0:	66 89       	ldd	r22, Z+22	; 0x16
     ef2:	77 89       	ldd	r23, Z+23	; 0x17
     ef4:	41 15       	cp	r20, r1
     ef6:	51 05       	cpc	r21, r1
     ef8:	61 05       	cpc	r22, r1
     efa:	71 05       	cpc	r23, r1
     efc:	a1 f0       	breq	.+40     	; 0xf26 <CDC_Device_SendByte+0x46>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     efe:	81 81       	ldd	r24, Z+1	; 0x01
     f00:	8f 70       	andi	r24, 0x0F	; 15
     f02:	80 93 e9 00 	sts	0x00E9, r24
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
     f06:	80 91 e8 00 	lds	r24, 0x00E8
	  return ENDPOINT_RWSTREAM_DeviceDisconnected;

	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataINEndpoint.Address);

	if (!(Endpoint_IsReadWriteAllowed()))
     f0a:	85 fd       	sbrc	r24, 5
     f0c:	08 c0       	rjmp	.+16     	; 0xf1e <CDC_Device_SendByte+0x3e>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     f0e:	80 91 e8 00 	lds	r24, 0x00E8
     f12:	8e 77       	andi	r24, 0x7E	; 126
     f14:	80 93 e8 00 	sts	0x00E8, r24
	{
		Endpoint_ClearIN();

		uint8_t ErrorCode;

		if ((ErrorCode = Endpoint_WaitUntilReady()) != ENDPOINT_READYWAIT_NoError)
     f18:	fb db       	rcall	.-2058   	; 0x710 <Endpoint_WaitUntilReady>
     f1a:	88 23       	and	r24, r24
     f1c:	29 f4       	brne	.+10     	; 0xf28 <CDC_Device_SendByte+0x48>
     f1e:	c0 93 f1 00 	sts	0x00F1, r28
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     f22:	80 e0       	ldi	r24, 0x00	; 0
		  return ErrorCode;
	}

	Endpoint_Write_8(Data);
	return ENDPOINT_READYWAIT_NoError;
     f24:	01 c0       	rjmp	.+2      	; 0xf28 <CDC_Device_SendByte+0x48>
     f26:	82 e0       	ldi	r24, 0x02	; 2

uint8_t CDC_Device_SendByte(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo,
                            const uint8_t Data)
{
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
	  return ENDPOINT_RWSTREAM_DeviceDisconnected;
     f28:	cf 91       	pop	r28
		  return ErrorCode;
	}

	Endpoint_Write_8(Data);
	return ENDPOINT_READYWAIT_NoError;
}
     f2a:	08 95       	ret

00000f2c <CDC_Device_Flush>:
     f2c:	fc 01       	movw	r30, r24

uint8_t CDC_Device_Flush(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
     f2e:	8e b3       	in	r24, 0x1e	; 30
     f30:	84 30       	cpi	r24, 0x04	; 4
     f32:	29 f5       	brne	.+74     	; 0xf7e <CDC_Device_Flush+0x52>
     f34:	44 89       	ldd	r20, Z+20	; 0x14
     f36:	55 89       	ldd	r21, Z+21	; 0x15
     f38:	66 89       	ldd	r22, Z+22	; 0x16
     f3a:	77 89       	ldd	r23, Z+23	; 0x17
     f3c:	41 15       	cp	r20, r1
     f3e:	51 05       	cpc	r21, r1
     f40:	61 05       	cpc	r22, r1
     f42:	71 05       	cpc	r23, r1
     f44:	e1 f0       	breq	.+56     	; 0xf7e <CDC_Device_Flush+0x52>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     f46:	81 81       	ldd	r24, Z+1	; 0x01
     f48:	8f 70       	andi	r24, 0x0F	; 15
     f4a:	80 93 e9 00 	sts	0x00E9, r24
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
     f4e:	80 91 f2 00 	lds	r24, 0x00F2
     f52:	90 91 f3 00 	lds	r25, 0x00F3

	uint8_t ErrorCode;

	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataINEndpoint.Address);

	if (!(Endpoint_BytesInEndpoint()))
     f56:	00 97       	sbiw	r24, 0x00	; 0
     f58:	a1 f0       	breq	.+40     	; 0xf82 <CDC_Device_Flush+0x56>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
     f5a:	90 91 e8 00 	lds	r25, 0x00E8
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     f5e:	80 91 e8 00 	lds	r24, 0x00E8
     f62:	8e 77       	andi	r24, 0x7E	; 126
     f64:	80 93 e8 00 	sts	0x00E8, r24

	bool BankFull = !(Endpoint_IsReadWriteAllowed());

	Endpoint_ClearIN();

	if (BankFull)
     f68:	95 fd       	sbrc	r25, 5
     f6a:	0d c0       	rjmp	.+26     	; 0xf86 <CDC_Device_Flush+0x5a>
	{
		if ((ErrorCode = Endpoint_WaitUntilReady()) != ENDPOINT_READYWAIT_NoError)
     f6c:	d1 db       	rcall	.-2142   	; 0x710 <Endpoint_WaitUntilReady>
     f6e:	88 23       	and	r24, r24
     f70:	59 f4       	brne	.+22     	; 0xf88 <CDC_Device_Flush+0x5c>
     f72:	90 91 e8 00 	lds	r25, 0x00E8
     f76:	9e 77       	andi	r25, 0x7E	; 126
     f78:	90 93 e8 00 	sts	0x00E8, r25
     f7c:	08 95       	ret
     f7e:	82 e0       	ldi	r24, 0x02	; 2
}

uint8_t CDC_Device_Flush(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
	  return ENDPOINT_RWSTREAM_DeviceDisconnected;
     f80:	08 95       	ret
     f82:	80 e0       	ldi	r24, 0x00	; 0
	uint8_t ErrorCode;

	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataINEndpoint.Address);

	if (!(Endpoint_BytesInEndpoint()))
	  return ENDPOINT_READYWAIT_NoError;
     f84:	08 95       	ret
     f86:	80 e0       	ldi	r24, 0x00	; 0
		  return ErrorCode;

		Endpoint_ClearIN();
	}

	return ENDPOINT_READYWAIT_NoError;
     f88:	08 95       	ret

00000f8a <CDC_Device_USBTask>:
}
     f8a:	2e b3       	in	r18, 0x1e	; 30
	return true;
}

void CDC_Device_USBTask(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
     f8c:	24 30       	cpi	r18, 0x04	; 4
     f8e:	99 f4       	brne	.+38     	; 0xfb6 <CDC_Device_USBTask+0x2c>
     f90:	fc 01       	movw	r30, r24
     f92:	44 89       	ldd	r20, Z+20	; 0x14
     f94:	55 89       	ldd	r21, Z+21	; 0x15
     f96:	66 89       	ldd	r22, Z+22	; 0x16
     f98:	77 89       	ldd	r23, Z+23	; 0x17
     f9a:	41 15       	cp	r20, r1
     f9c:	51 05       	cpc	r21, r1
     f9e:	61 05       	cpc	r22, r1
     fa0:	71 05       	cpc	r23, r1
     fa2:	49 f0       	breq	.+18     	; 0xfb6 <CDC_Device_USBTask+0x2c>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     fa4:	21 81       	ldd	r18, Z+1	; 0x01
     fa6:	2f 70       	andi	r18, 0x0F	; 15
     fa8:	20 93 e9 00 	sts	0x00E9, r18
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     fac:	20 91 e8 00 	lds	r18, 0x00E8
	  return;

	#if !defined(NO_CLASS_DRIVER_AUTOFLUSH)
	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataINEndpoint.Address);

	if (Endpoint_IsINReady())
     fb0:	20 ff       	sbrs	r18, 0
     fb2:	01 c0       	rjmp	.+2      	; 0xfb6 <CDC_Device_USBTask+0x2c>
	  CDC_Device_Flush(CDCInterfaceInfo);
     fb4:	bb cf       	rjmp	.-138    	; 0xf2c <CDC_Device_Flush>
     fb6:	08 95       	ret

00000fb8 <CDC_Device_ReceiveByte>:
     fb8:	fc 01       	movw	r30, r24
	}
}

int16_t CDC_Device_ReceiveByte(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
     fba:	8e b3       	in	r24, 0x1e	; 30
     fbc:	84 30       	cpi	r24, 0x04	; 4
     fbe:	51 f5       	brne	.+84     	; 0x1014 <CDC_Device_ReceiveByte+0x5c>
     fc0:	44 89       	ldd	r20, Z+20	; 0x14
     fc2:	55 89       	ldd	r21, Z+21	; 0x15
     fc4:	66 89       	ldd	r22, Z+22	; 0x16
     fc6:	77 89       	ldd	r23, Z+23	; 0x17
     fc8:	41 15       	cp	r20, r1
     fca:	51 05       	cpc	r21, r1
     fcc:	61 05       	cpc	r22, r1
     fce:	71 05       	cpc	r23, r1
     fd0:	09 f1       	breq	.+66     	; 0x1014 <CDC_Device_ReceiveByte+0x5c>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     fd2:	86 81       	ldd	r24, Z+6	; 0x06
     fd4:	8f 70       	andi	r24, 0x0F	; 15
     fd6:	80 93 e9 00 	sts	0x00E9, r24
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     fda:	80 91 e8 00 	lds	r24, 0x00E8

	int16_t ReceivedByte = -1;

	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataOUTEndpoint.Address);

	if (Endpoint_IsOUTReceived())
     fde:	82 ff       	sbrs	r24, 2
     fe0:	1c c0       	rjmp	.+56     	; 0x101a <CDC_Device_ReceiveByte+0x62>
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
     fe2:	80 91 f2 00 	lds	r24, 0x00F2
     fe6:	90 91 f3 00 	lds	r25, 0x00F3
	{
		if (Endpoint_BytesInEndpoint())
     fea:	00 97       	sbiw	r24, 0x00	; 0
     fec:	21 f0       	breq	.+8      	; 0xff6 <CDC_Device_ReceiveByte+0x3e>
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
     fee:	80 91 f1 00 	lds	r24, 0x00F1
		  ReceivedByte = Endpoint_Read_8();
     ff2:	90 e0       	ldi	r25, 0x00	; 0
     ff4:	02 c0       	rjmp	.+4      	; 0xffa <CDC_Device_ReceiveByte+0x42>
int16_t CDC_Device_ReceiveByte(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
	  return -1;

	int16_t ReceivedByte = -1;
     ff6:	8f ef       	ldi	r24, 0xFF	; 255
     ff8:	9f ef       	ldi	r25, 0xFF	; 255
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
     ffa:	20 91 f2 00 	lds	r18, 0x00F2
     ffe:	30 91 f3 00 	lds	r19, 0x00F3
	if (Endpoint_IsOUTReceived())
	{
		if (Endpoint_BytesInEndpoint())
		  ReceivedByte = Endpoint_Read_8();

		if (!(Endpoint_BytesInEndpoint()))
    1002:	21 15       	cp	r18, r1
    1004:	31 05       	cpc	r19, r1
    1006:	59 f4       	brne	.+22     	; 0x101e <CDC_Device_ReceiveByte+0x66>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    1008:	20 91 e8 00 	lds	r18, 0x00E8
    100c:	2b 77       	andi	r18, 0x7B	; 123
    100e:	20 93 e8 00 	sts	0x00E8, r18
    1012:	08 95       	ret
}

int16_t CDC_Device_ReceiveByte(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
	  return -1;
    1014:	8f ef       	ldi	r24, 0xFF	; 255
    1016:	9f ef       	ldi	r25, 0xFF	; 255
    1018:	08 95       	ret

	int16_t ReceivedByte = -1;
    101a:	8f ef       	ldi	r24, 0xFF	; 255
    101c:	9f ef       	ldi	r25, 0xFF	; 255
		if (!(Endpoint_BytesInEndpoint()))
		  Endpoint_ClearOUT();
	}

	return ReceivedByte;
}
    101e:	08 95       	ret

00001020 <CDC_Device_Event_Stub>:
#endif

void CDC_Device_Event_Stub(void)
{

}
    1020:	08 95       	ret

00001022 <__udivmodsi4>:
    1022:	a1 e2       	ldi	r26, 0x21	; 33
    1024:	1a 2e       	mov	r1, r26
    1026:	aa 1b       	sub	r26, r26
    1028:	bb 1b       	sub	r27, r27
    102a:	fd 01       	movw	r30, r26
    102c:	0d c0       	rjmp	.+26     	; 0x1048 <__udivmodsi4_ep>

0000102e <__udivmodsi4_loop>:
    102e:	aa 1f       	adc	r26, r26
    1030:	bb 1f       	adc	r27, r27
    1032:	ee 1f       	adc	r30, r30
    1034:	ff 1f       	adc	r31, r31
    1036:	a2 17       	cp	r26, r18
    1038:	b3 07       	cpc	r27, r19
    103a:	e4 07       	cpc	r30, r20
    103c:	f5 07       	cpc	r31, r21
    103e:	20 f0       	brcs	.+8      	; 0x1048 <__udivmodsi4_ep>
    1040:	a2 1b       	sub	r26, r18
    1042:	b3 0b       	sbc	r27, r19
    1044:	e4 0b       	sbc	r30, r20
    1046:	f5 0b       	sbc	r31, r21

00001048 <__udivmodsi4_ep>:
    1048:	66 1f       	adc	r22, r22
    104a:	77 1f       	adc	r23, r23
    104c:	88 1f       	adc	r24, r24
    104e:	99 1f       	adc	r25, r25
    1050:	1a 94       	dec	r1
    1052:	69 f7       	brne	.-38     	; 0x102e <__udivmodsi4_loop>
    1054:	60 95       	com	r22
    1056:	70 95       	com	r23
    1058:	80 95       	com	r24
    105a:	90 95       	com	r25
    105c:	9b 01       	movw	r18, r22
    105e:	ac 01       	movw	r20, r24
    1060:	bd 01       	movw	r22, r26
    1062:	cf 01       	movw	r24, r30
    1064:	08 95       	ret

00001066 <_exit>:
    1066:	f8 94       	cli

00001068 <__stop_program>:
    1068:	ff cf       	rjmp	.-2      	; 0x1068 <__stop_program>
