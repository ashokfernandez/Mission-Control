
TempDataLogger.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000de  00800100  00005022  000050d6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00005022  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000268  008001de  008001de  000051b4  2**0
                  ALLOC
  3 .eeprom       00000001  00810000  00810000  000051b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .stab         00001050  00000000  00000000  000051b8  2**2
                  CONTENTS, READONLY, DEBUGGING
  5 .stabstr      000003c6  00000000  00000000  00006208  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_aranges 00000840  00000000  00000000  000065d0  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000e1b1  00000000  00000000  00006e10  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000348d  00000000  00000000  00014fc1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00005c83  00000000  00000000  0001844e  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  0000195c  00000000  00000000  0001e0d4  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000048cc  00000000  00000000  0001fa30  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000a36a  00000000  00000000  000242fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000ae8  00000000  00000000  0002e666  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	20 c1       	rjmp	.+576    	; 0x242 <__ctors_end>
       2:	00 00       	nop
       4:	3d c1       	rjmp	.+634    	; 0x280 <__bad_interrupt>
       6:	00 00       	nop
       8:	3b c1       	rjmp	.+630    	; 0x280 <__bad_interrupt>
       a:	00 00       	nop
       c:	39 c1       	rjmp	.+626    	; 0x280 <__bad_interrupt>
       e:	00 00       	nop
      10:	37 c1       	rjmp	.+622    	; 0x280 <__bad_interrupt>
      12:	00 00       	nop
      14:	35 c1       	rjmp	.+618    	; 0x280 <__bad_interrupt>
      16:	00 00       	nop
      18:	33 c1       	rjmp	.+614    	; 0x280 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	31 c1       	rjmp	.+610    	; 0x280 <__bad_interrupt>
      1e:	00 00       	nop
      20:	2f c1       	rjmp	.+606    	; 0x280 <__bad_interrupt>
      22:	00 00       	nop
      24:	2d c1       	rjmp	.+602    	; 0x280 <__bad_interrupt>
      26:	00 00       	nop
      28:	0c 94 6f 1d 	jmp	0x3ade	; 0x3ade <__vector_10>
      2c:	0c 94 39 1e 	jmp	0x3c72	; 0x3c72 <__vector_11>
      30:	27 c1       	rjmp	.+590    	; 0x280 <__bad_interrupt>
      32:	00 00       	nop
      34:	25 c1       	rjmp	.+586    	; 0x280 <__bad_interrupt>
      36:	00 00       	nop
      38:	23 c1       	rjmp	.+582    	; 0x280 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	21 c1       	rjmp	.+578    	; 0x280 <__bad_interrupt>
      3e:	00 00       	nop
      40:	1f c1       	rjmp	.+574    	; 0x280 <__bad_interrupt>
      42:	00 00       	nop
      44:	23 c1       	rjmp	.+582    	; 0x28c <__vector_17>
      46:	00 00       	nop
      48:	1b c1       	rjmp	.+566    	; 0x280 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	19 c1       	rjmp	.+562    	; 0x280 <__bad_interrupt>
      4e:	00 00       	nop
      50:	17 c1       	rjmp	.+558    	; 0x280 <__bad_interrupt>
      52:	00 00       	nop
      54:	15 c1       	rjmp	.+554    	; 0x280 <__bad_interrupt>
      56:	00 00       	nop
      58:	13 c1       	rjmp	.+550    	; 0x280 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	11 c1       	rjmp	.+546    	; 0x280 <__bad_interrupt>
      5e:	00 00       	nop
      60:	0f c1       	rjmp	.+542    	; 0x280 <__bad_interrupt>
      62:	00 00       	nop
      64:	0d c1       	rjmp	.+538    	; 0x280 <__bad_interrupt>
      66:	00 00       	nop
      68:	0b c1       	rjmp	.+534    	; 0x280 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	09 c1       	rjmp	.+530    	; 0x280 <__bad_interrupt>
      6e:	00 00       	nop
      70:	07 c1       	rjmp	.+526    	; 0x280 <__bad_interrupt>
      72:	00 00       	nop
      74:	05 c1       	rjmp	.+522    	; 0x280 <__bad_interrupt>
      76:	00 00       	nop
      78:	03 c1       	rjmp	.+518    	; 0x280 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	01 c1       	rjmp	.+514    	; 0x280 <__bad_interrupt>
      7e:	00 00       	nop
      80:	ff c0       	rjmp	.+510    	; 0x280 <__bad_interrupt>
      82:	00 00       	nop
      84:	fd c0       	rjmp	.+506    	; 0x280 <__bad_interrupt>
      86:	00 00       	nop
      88:	fb c0       	rjmp	.+502    	; 0x280 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	f9 c0       	rjmp	.+498    	; 0x280 <__bad_interrupt>
      8e:	00 00       	nop
      90:	f7 c0       	rjmp	.+494    	; 0x280 <__bad_interrupt>
      92:	00 00       	nop
      94:	f5 c0       	rjmp	.+490    	; 0x280 <__bad_interrupt>
      96:	00 00       	nop

00000098 <ProductString>:
      98:	2e 03 54 00 65 00 6d 00 70 00 65 00 72 00 61 00     ..T.e.m.p.e.r.a.
      a8:	74 00 75 00 72 00 65 00 20 00 44 00 61 00 74 00     t.u.r.e. .D.a.t.
      b8:	61 00 6c 00 6f 00 67 00 67 00 65 00 72 00 00 00     a.l.o.g.g.e.r...

000000c8 <ManufacturerString>:
      c8:	18 03 44 00 65 00 61 00 6e 00 20 00 43 00 61 00     ..D.e.a.n. .C.a.
      d8:	6d 00 65 00 72 00 61 00 00 00                       m.e.r.a...

000000e2 <LanguageString>:
      e2:	04 03 09 04                                         ....

000000e6 <ConfigurationDescriptor>:
      e6:	09 02 39 00 02 01 00 c0 32 09 04 00 00 02 08 06     ..9.....2.......
      f6:	50 00 07 05 83 02 40 00 05 07 05 04 02 40 00 05     P.....@......@..
     106:	09 04 01 00 01 03 00 00 00 09 21 11 01 00 01 22     ..........!...."
     116:	20 00 07 05 81 03 10 00 05                           ........

0000011f <DeviceDescriptor>:
     11f:	12 01 10 01 00 00 00 08 eb 03 63 20 01 00 01 02     ..........c ....
     12f:	dc 01                                               ..

00000131 <GenericReport>:
     131:	06 00 ff 09 01 a1 01 09 02 15 00 25 ff 75 08 95     ...........%.u..
     141:	07 81 02 09 03 15 00 25 ff 75 08 95 07 91 02 c0     .......%.u......

00000151 <Temperature_Lookup>:
     151:	b4 03 b0 03 ab 03 a6 03 a0 03 9a 03 94 03 8e 03     ................
     161:	88 03 81 03 7a 03 73 03 6b 03 63 03 5b 03 53 03     ....z.s.k.c.[.S.
     171:	4a 03 41 03 38 03 2f 03 25 03 1b 03 11 03 07 03     J.A.8./.%.......
     181:	fc 02 f1 02 e6 02 db 02 d0 02 c4 02 b8 02 ac 02     ................
     191:	a0 02 94 02 88 02 7c 02 6f 02 63 02 56 02 4a 02     ......|.o.c.V.J.
     1a1:	3d 02 31 02 25 02 18 02 0c 02 00 02 f3 01 e7 01     =.1.%...........
     1b1:	db 01 cf 01 c4 01 b8 01 ac 01 a1 01 96 01 8b 01     ................
     1c1:	80 01 76 01 6b 01 61 01 57 01 4d 01 44 01 3a 01     ..v.k.a.W.M.D.:.
     1d1:	31 01 28 01 1f 01 17 01 0f 01 06 01 fe 00 f7 00     1.(.............
     1e1:	ef 00 e8 00 e1 00 da 00 d3 00 cd 00 c7 00 c0 00     ................
     1f1:	ba 00 b5 00 af 00 aa 00 a4 00 9f 00 9a 00 96 00     ................
     201:	91 00 8c 00 88 00 84 00 80 00 7c 00 78 00 74 00     ..........|.x.t.
     211:	71 00 6d 00 6a 00 67 00 64 00 61 00 5e 00 5b 00     q.m.j.g.d.a.^.[.
     221:	58 00 55 00 53 00 50 00 4e 00 4c 00 49 00 47 00     X.U.S.P.N.L.I.G.
     231:	45 00 43 00 41 00 3f 00 3d 00 3c 00 3a 00 38 00     E.C.A.?.=.<.:.8.
     241:	00                                                  .

00000242 <__ctors_end>:
     242:	11 24       	eor	r1, r1
     244:	1f be       	out	0x3f, r1	; 63
     246:	cf ef       	ldi	r28, 0xFF	; 255
     248:	d0 e2       	ldi	r29, 0x20	; 32
     24a:	de bf       	out	0x3e, r29	; 62
     24c:	cd bf       	out	0x3d, r28	; 61

0000024e <__do_copy_data>:
     24e:	11 e0       	ldi	r17, 0x01	; 1
     250:	a0 e0       	ldi	r26, 0x00	; 0
     252:	b1 e0       	ldi	r27, 0x01	; 1
     254:	e2 e2       	ldi	r30, 0x22	; 34
     256:	f0 e5       	ldi	r31, 0x50	; 80
     258:	00 e0       	ldi	r16, 0x00	; 0
     25a:	0b bf       	out	0x3b, r16	; 59
     25c:	02 c0       	rjmp	.+4      	; 0x262 <__do_copy_data+0x14>
     25e:	07 90       	elpm	r0, Z+
     260:	0d 92       	st	X+, r0
     262:	ae 3d       	cpi	r26, 0xDE	; 222
     264:	b1 07       	cpc	r27, r17
     266:	d9 f7       	brne	.-10     	; 0x25e <__do_copy_data+0x10>
     268:	1b be       	out	0x3b, r1	; 59

0000026a <__do_clear_bss>:
     26a:	14 e0       	ldi	r17, 0x04	; 4
     26c:	ae ed       	ldi	r26, 0xDE	; 222
     26e:	b1 e0       	ldi	r27, 0x01	; 1
     270:	01 c0       	rjmp	.+2      	; 0x274 <.do_clear_bss_start>

00000272 <.do_clear_bss_loop>:
     272:	1d 92       	st	X+, r1

00000274 <.do_clear_bss_start>:
     274:	a6 34       	cpi	r26, 0x46	; 70
     276:	b1 07       	cpc	r27, r17
     278:	e1 f7       	brne	.-8      	; 0x272 <.do_clear_bss_loop>
     27a:	80 d1       	rcall	.+768    	; 0x57c <main>
     27c:	0c 94 0f 28 	jmp	0x501e	; 0x501e <_exit>

00000280 <__bad_interrupt>:
     280:	bf ce       	rjmp	.-642    	; 0x0 <__vectors>

00000282 <LEDs_SetAllLEDs>:
				PORTD &= ~LEDMask;
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
			{
				PORTD = ((PORTD & ~LEDS_ALL_LEDS) | LEDMask);
     282:	9b b1       	in	r25, 0x0b	; 11
     284:	9f 70       	andi	r25, 0x0F	; 15
     286:	98 2b       	or	r25, r24
     288:	9b b9       	out	0x0b, r25	; 11
			}
     28a:	08 95       	ret

0000028c <__vector_17>:
static FIL TempLogFile;


/** ISR to handle the 500ms ticks for sampling and data logging */
ISR(TIMER1_COMPA_vect, ISR_BLOCK)
{
     28c:	1f 92       	push	r1
     28e:	0f 92       	push	r0
     290:	0f b6       	in	r0, 0x3f	; 63
     292:	0f 92       	push	r0
     294:	0b b6       	in	r0, 0x3b	; 59
     296:	0f 92       	push	r0
     298:	11 24       	eor	r1, r1
     29a:	9f 92       	push	r9
     29c:	af 92       	push	r10
     29e:	bf 92       	push	r11
     2a0:	cf 92       	push	r12
     2a2:	df 92       	push	r13
     2a4:	ef 92       	push	r14
     2a6:	ff 92       	push	r15
     2a8:	0f 93       	push	r16
     2aa:	1f 93       	push	r17
     2ac:	2f 93       	push	r18
     2ae:	3f 93       	push	r19
     2b0:	4f 93       	push	r20
     2b2:	5f 93       	push	r21
     2b4:	6f 93       	push	r22
     2b6:	7f 93       	push	r23
     2b8:	8f 93       	push	r24
     2ba:	9f 93       	push	r25
     2bc:	af 93       	push	r26
     2be:	bf 93       	push	r27
     2c0:	ef 93       	push	r30
     2c2:	ff 93       	push	r31
     2c4:	cf 93       	push	r28
     2c6:	df 93       	push	r29
     2c8:	cd b7       	in	r28, 0x3d	; 61
     2ca:	de b7       	in	r29, 0x3e	; 62
     2cc:	cc 56       	subi	r28, 0x6C	; 108
     2ce:	d0 40       	sbci	r29, 0x00	; 0
     2d0:	de bf       	out	0x3e, r29	; 62
     2d2:	cd bf       	out	0x3d, r28	; 61
			}

			static inline uint8_t LEDs_GetLEDs(void) ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t LEDs_GetLEDs(void)
			{
				return (PORTD & LEDS_ALL_LEDS);
     2d4:	9b b0       	in	r9, 0x0b	; 11
	uint8_t LEDMask = LEDs_GetLEDs();

	/* Check to see if the logging interval has expired */
	if (++CurrentLoggingTicks < LoggingInterval500MS_SRAM)
     2d6:	80 91 de 01 	lds	r24, 0x01DE
     2da:	90 91 df 01 	lds	r25, 0x01DF
     2de:	01 96       	adiw	r24, 0x01	; 1
     2e0:	90 93 df 01 	sts	0x01DF, r25
     2e4:	80 93 de 01 	sts	0x01DE, r24
     2e8:	20 91 e0 01 	lds	r18, 0x01E0
     2ec:	30 e0       	ldi	r19, 0x00	; 0
     2ee:	82 17       	cp	r24, r18
     2f0:	93 07       	cpc	r25, r19
     2f2:	08 f4       	brcc	.+2      	; 0x2f6 <__vector_17+0x6a>
     2f4:	5c c0       	rjmp	.+184    	; 0x3ae <__vector_17+0x122>
	  return;

	/* Reset log tick counter to prepare for next logging interval */
	CurrentLoggingTicks = 0;
     2f6:	10 92 df 01 	sts	0x01DF, r1
     2fa:	10 92 de 01 	sts	0x01DE, r1

	LEDs_SetAllLEDs(LEDMASK_USB_BUSY);
     2fe:	80 e2       	ldi	r24, 0x20	; 32
     300:	c0 df       	rcall	.-128    	; 0x282 <LEDs_SetAllLEDs>
     302:	8e b3       	in	r24, 0x1e	; 30

	/* Only log when not connected to a USB host */
	if (USB_DeviceState == DEVICE_STATE_Unattached)
     304:	88 23       	and	r24, r24
     306:	09 f0       	breq	.+2      	; 0x30a <__vector_17+0x7e>
     308:	4f c0       	rjmp	.+158    	; 0x3a8 <__vector_17+0x11c>
     30a:	ce 01       	movw	r24, r28
	{
		TimeDate_t CurrentTimeDate;
		DS1307_GetTimeDate(&CurrentTimeDate);
     30c:	03 96       	adiw	r24, 0x03	; 3
     30e:	e3 d6       	rcall	.+3526   	; 0x10d6 <DS1307_GetTimeDate>
     310:	ae 80       	ldd	r10, Y+6	; 0x06
     312:	bf 80       	ldd	r11, Y+7	; 0x07

		char     LineBuffer[100];
		uint16_t BytesWritten;

		BytesWritten = sprintf(LineBuffer, "%02d/%02d/20%02d, %02d:%02d:%02d, %d Degrees\r\n",
     314:	c8 84       	ldd	r12, Y+8	; 0x08
     316:	db 80       	ldd	r13, Y+3	; 0x03
     318:	ec 80       	ldd	r14, Y+4	; 0x04
     31a:	fd 80       	ldd	r15, Y+5	; 0x05
     31c:	0e 94 8f 24 	call	0x491e	; 0x491e <Temperature_GetTemperature>
		                       CurrentTimeDate.Day, CurrentTimeDate.Month, CurrentTimeDate.Year,
		                       CurrentTimeDate.Hour, CurrentTimeDate.Minute, CurrentTimeDate.Second,
		                       Temperature_GetTemperature());
     320:	2d b7       	in	r18, 0x3d	; 61
     322:	3e b7       	in	r19, 0x3e	; 62
		DS1307_GetTimeDate(&CurrentTimeDate);

		char     LineBuffer[100];
		uint16_t BytesWritten;

		BytesWritten = sprintf(LineBuffer, "%02d/%02d/20%02d, %02d:%02d:%02d, %d Degrees\r\n",
     324:	22 51       	subi	r18, 0x12	; 18
     326:	30 40       	sbci	r19, 0x00	; 0
     328:	0f b6       	in	r0, 0x3f	; 63
     32a:	f8 94       	cli
     32c:	3e bf       	out	0x3e, r19	; 62
     32e:	0f be       	out	0x3f, r0	; 63
     330:	2d bf       	out	0x3d, r18	; 61
     332:	ed b7       	in	r30, 0x3d	; 61
     334:	fe b7       	in	r31, 0x3e	; 62
     336:	31 96       	adiw	r30, 0x01	; 1
     338:	8e 01       	movw	r16, r28
     33a:	07 5f       	subi	r16, 0xF7	; 247
     33c:	1f 4f       	sbci	r17, 0xFF	; 255
     33e:	ad b7       	in	r26, 0x3d	; 61
     340:	be b7       	in	r27, 0x3e	; 62
     342:	12 96       	adiw	r26, 0x02	; 2
     344:	1c 93       	st	X, r17
     346:	0e 93       	st	-X, r16
     348:	11 97       	sbiw	r26, 0x01	; 1
     34a:	20 e0       	ldi	r18, 0x00	; 0
     34c:	31 e0       	ldi	r19, 0x01	; 1
     34e:	33 83       	std	Z+3, r19	; 0x03
     350:	22 83       	std	Z+2, r18	; 0x02
     352:	a4 82       	std	Z+4, r10	; 0x04
     354:	15 82       	std	Z+5, r1	; 0x05
     356:	b6 82       	std	Z+6, r11	; 0x06
     358:	17 82       	std	Z+7, r1	; 0x07
     35a:	c0 86       	std	Z+8, r12	; 0x08
     35c:	11 86       	std	Z+9, r1	; 0x09
     35e:	d2 86       	std	Z+10, r13	; 0x0a
     360:	13 86       	std	Z+11, r1	; 0x0b
     362:	e4 86       	std	Z+12, r14	; 0x0c
     364:	15 86       	std	Z+13, r1	; 0x0d
     366:	f6 86       	std	Z+14, r15	; 0x0e
     368:	17 86       	std	Z+15, r1	; 0x0f
     36a:	99 27       	eor	r25, r25
     36c:	87 fd       	sbrc	r24, 7
     36e:	90 95       	com	r25
     370:	91 8b       	std	Z+17, r25	; 0x11
     372:	80 8b       	std	Z+16, r24	; 0x10
     374:	0e 94 2d 25 	call	0x4a5a	; 0x4a5a <sprintf>
     378:	ac 01       	movw	r20, r24
     37a:	89 83       	std	Y+1, r24	; 0x01
     37c:	5a 83       	std	Y+2, r21	; 0x02
     37e:	2d b7       	in	r18, 0x3d	; 61
     380:	3e b7       	in	r19, 0x3e	; 62
		                       CurrentTimeDate.Day, CurrentTimeDate.Month, CurrentTimeDate.Year,
		                       CurrentTimeDate.Hour, CurrentTimeDate.Minute, CurrentTimeDate.Second,
		                       Temperature_GetTemperature());

		f_write(&TempLogFile, LineBuffer, BytesWritten, &BytesWritten);
     382:	2e 5e       	subi	r18, 0xEE	; 238
     384:	3f 4f       	sbci	r19, 0xFF	; 255
     386:	0f b6       	in	r0, 0x3f	; 63
     388:	f8 94       	cli
     38a:	3e bf       	out	0x3e, r19	; 62
     38c:	0f be       	out	0x3f, r0	; 63
     38e:	2d bf       	out	0x3d, r18	; 61
     390:	81 ee       	ldi	r24, 0xE1	; 225
     392:	91 e0       	ldi	r25, 0x01	; 1
     394:	b8 01       	movw	r22, r16
     396:	9e 01       	movw	r18, r28
     398:	2f 5f       	subi	r18, 0xFF	; 255
     39a:	3f 4f       	sbci	r19, 0xFF	; 255
     39c:	0e 94 9b 15 	call	0x2b36	; 0x2b36 <f_write>
     3a0:	81 ee       	ldi	r24, 0xE1	; 225
     3a2:	91 e0       	ldi	r25, 0x01	; 1
		f_sync(&TempLogFile);
     3a4:	0e 94 9c 17 	call	0x2f38	; 0x2f38 <f_sync>
     3a8:	89 2d       	mov	r24, r9
     3aa:	80 7f       	andi	r24, 0xF0	; 240
	}

	LEDs_SetAllLEDs(LEDMask);
     3ac:	6a df       	rcall	.-300    	; 0x282 <LEDs_SetAllLEDs>
     3ae:	c4 59       	subi	r28, 0x94	; 148
     3b0:	df 4f       	sbci	r29, 0xFF	; 255
     3b2:	de bf       	out	0x3e, r29	; 62
}
     3b4:	cd bf       	out	0x3d, r28	; 61
     3b6:	df 91       	pop	r29
     3b8:	cf 91       	pop	r28
     3ba:	ff 91       	pop	r31
     3bc:	ef 91       	pop	r30
     3be:	bf 91       	pop	r27
     3c0:	af 91       	pop	r26
     3c2:	9f 91       	pop	r25
     3c4:	8f 91       	pop	r24
     3c6:	7f 91       	pop	r23
     3c8:	6f 91       	pop	r22
     3ca:	5f 91       	pop	r21
     3cc:	4f 91       	pop	r20
     3ce:	3f 91       	pop	r19
     3d0:	2f 91       	pop	r18
     3d2:	1f 91       	pop	r17
     3d4:	0f 91       	pop	r16
     3d6:	ff 90       	pop	r15
     3d8:	ef 90       	pop	r14
     3da:	df 90       	pop	r13
     3dc:	cf 90       	pop	r12
     3de:	bf 90       	pop	r11
     3e0:	af 90       	pop	r10
     3e2:	9f 90       	pop	r9
     3e4:	0f 90       	pop	r0
     3e6:	0b be       	out	0x3b, r0	; 59
     3e8:	0f 90       	pop	r0
     3ea:	0f be       	out	0x3f, r0	; 63
     3ec:	0f 90       	pop	r0
     3ee:	1f 90       	pop	r1
     3f0:	18 95       	reti

000003f2 <OpenLogFile>:
     3f2:	ef 92       	push	r14
     3f4:	ff 92       	push	r15
     3f6:	0f 93       	push	r16
	}
}

/** Opens the log file on the Dataflash's FAT formatted partition according to the current date */
void OpenLogFile(void)
{
     3f8:	1f 93       	push	r17
     3fa:	cf 93       	push	r28
     3fc:	df 93       	push	r29
     3fe:	cd b7       	in	r28, 0x3d	; 61
     400:	de b7       	in	r29, 0x3e	; 62
     402:	62 97       	sbiw	r28, 0x12	; 18
     404:	0f b6       	in	r0, 0x3f	; 63
     406:	f8 94       	cli
     408:	de bf       	out	0x3e, r29	; 62
     40a:	0f be       	out	0x3f, r0	; 63
     40c:	cd bf       	out	0x3d, r28	; 61
	char LogFileName[12];

	/* Get the current date for the filename as "DDMMYY.csv" */
	TimeDate_t CurrentTimeDate;
	DS1307_GetTimeDate(&CurrentTimeDate);
     40e:	ce 01       	movw	r24, r28
     410:	01 96       	adiw	r24, 0x01	; 1
     412:	61 d6       	rcall	.+3266   	; 0x10d6 <DS1307_GetTimeDate>
     414:	8d b7       	in	r24, 0x3d	; 61
	sprintf(LogFileName, "%02d%02d%02d.csv", CurrentTimeDate.Day, CurrentTimeDate.Month, CurrentTimeDate.Year);
     416:	9e b7       	in	r25, 0x3e	; 62
     418:	0a 97       	sbiw	r24, 0x0a	; 10
     41a:	0f b6       	in	r0, 0x3f	; 63
     41c:	f8 94       	cli
     41e:	9e bf       	out	0x3e, r25	; 62
     420:	0f be       	out	0x3f, r0	; 63
     422:	8d bf       	out	0x3d, r24	; 61
     424:	ed b7       	in	r30, 0x3d	; 61
     426:	fe b7       	in	r31, 0x3e	; 62
     428:	31 96       	adiw	r30, 0x01	; 1
     42a:	27 e0       	ldi	r18, 0x07	; 7
     42c:	e2 2e       	mov	r14, r18
     42e:	f1 2c       	mov	r15, r1
     430:	ec 0e       	add	r14, r28
     432:	fd 1e       	adc	r15, r29
     434:	ad b7       	in	r26, 0x3d	; 61
     436:	be b7       	in	r27, 0x3e	; 62
     438:	12 96       	adiw	r26, 0x02	; 2
     43a:	fc 92       	st	X, r15
     43c:	ee 92       	st	-X, r14
     43e:	11 97       	sbiw	r26, 0x01	; 1
     440:	8f e2       	ldi	r24, 0x2F	; 47
     442:	91 e0       	ldi	r25, 0x01	; 1
     444:	93 83       	std	Z+3, r25	; 0x03
     446:	82 83       	std	Z+2, r24	; 0x02
     448:	8c 81       	ldd	r24, Y+4	; 0x04
     44a:	84 83       	std	Z+4, r24	; 0x04
     44c:	15 82       	std	Z+5, r1	; 0x05
     44e:	8d 81       	ldd	r24, Y+5	; 0x05
     450:	86 83       	std	Z+6, r24	; 0x06
     452:	17 82       	std	Z+7, r1	; 0x07
     454:	8e 81       	ldd	r24, Y+6	; 0x06
     456:	80 87       	std	Z+8, r24	; 0x08
     458:	11 86       	std	Z+9, r1	; 0x09
     45a:	0e 94 2d 25 	call	0x4a5a	; 0x4a5a <sprintf>
     45e:	8d b7       	in	r24, 0x3d	; 61

	/* Mount the storage device, open the file */
	f_mount(0, &DiskFATState);
     460:	9e b7       	in	r25, 0x3e	; 62
     462:	0a 96       	adiw	r24, 0x0a	; 10
     464:	0f b6       	in	r0, 0x3f	; 63
     466:	f8 94       	cli
     468:	9e bf       	out	0x3e, r25	; 62
     46a:	0f be       	out	0x3f, r0	; 63
     46c:	8d bf       	out	0x3d, r24	; 61
     46e:	80 e0       	ldi	r24, 0x00	; 0
     470:	61 e0       	ldi	r22, 0x01	; 1
     472:	72 e0       	ldi	r23, 0x02	; 2
     474:	0e 94 5a 10 	call	0x20b4	; 0x20b4 <f_mount>
     478:	01 ee       	ldi	r16, 0xE1	; 225
	f_open(&TempLogFile, LogFileName, FA_OPEN_ALWAYS | FA_WRITE);
     47a:	11 e0       	ldi	r17, 0x01	; 1
     47c:	c8 01       	movw	r24, r16
     47e:	b7 01       	movw	r22, r14
     480:	42 e1       	ldi	r20, 0x12	; 18
     482:	0e 94 70 10 	call	0x20e0	; 0x20e0 <f_open>
     486:	40 91 eb 01 	lds	r20, 0x01EB
	f_lseek(&TempLogFile, TempLogFile.fsize);
     48a:	50 91 ec 01 	lds	r21, 0x01EC
     48e:	60 91 ed 01 	lds	r22, 0x01ED
     492:	70 91 ee 01 	lds	r23, 0x01EE
     496:	c8 01       	movw	r24, r16
     498:	0e 94 55 18 	call	0x30aa	; 0x30aa <f_lseek>
     49c:	62 96       	adiw	r28, 0x12	; 18
}
     49e:	0f b6       	in	r0, 0x3f	; 63
     4a0:	f8 94       	cli
     4a2:	de bf       	out	0x3e, r29	; 62
     4a4:	0f be       	out	0x3f, r0	; 63
     4a6:	cd bf       	out	0x3d, r28	; 61
     4a8:	df 91       	pop	r29
     4aa:	cf 91       	pop	r28
     4ac:	1f 91       	pop	r17
     4ae:	0f 91       	pop	r16
     4b0:	ff 90       	pop	r15
     4b2:	ef 90       	pop	r14
     4b4:	08 95       	ret

000004b6 <CloseLogFile>:
     4b6:	cf 93       	push	r28

/** Closes the open data log file on the Dataflash's FAT formatted partition */
void CloseLogFile(void)
{
     4b8:	df 93       	push	r29
	/* Sync any data waiting to be written, unmount the storage device */
	f_sync(&TempLogFile);
     4ba:	c1 ee       	ldi	r28, 0xE1	; 225
     4bc:	d1 e0       	ldi	r29, 0x01	; 1
     4be:	ce 01       	movw	r24, r28
     4c0:	0e 94 9c 17 	call	0x2f38	; 0x2f38 <f_sync>
	f_close(&TempLogFile);
     4c4:	ce 01       	movw	r24, r28
     4c6:	0e 94 4a 18 	call	0x3094	; 0x3094 <f_close>
}
     4ca:	df 91       	pop	r29
     4cc:	cf 91       	pop	r28
     4ce:	08 95       	ret

000004d0 <SetupHardware>:

/** Configures the board hardware and chip peripherals for the demo's functionality. */
void SetupHardware(void)
{
	/* Disable watchdog if enabled by bootloader/fuses */
	MCUSR &= ~(1 << WDRF);
     4d0:	84 b7       	in	r24, 0x34	; 52
     4d2:	87 7f       	andi	r24, 0xF7	; 247
     4d4:	84 bf       	out	0x34, r24	; 52
	wdt_disable();
     4d6:	88 e1       	ldi	r24, 0x18	; 24
     4d8:	0f b6       	in	r0, 0x3f	; 63
     4da:	f8 94       	cli
     4dc:	80 93 60 00 	sts	0x0060, r24
     4e0:	10 92 60 00 	sts	0x0060, r1
     4e4:	0f be       	out	0x3f, r0	; 63
The type of x is clock_div_t.
*/
void clock_prescale_set(clock_div_t __x)
{
    uint8_t __tmp = _BV(CLKPCE);
    __asm__ __volatile__ (
     4e6:	90 e0       	ldi	r25, 0x00	; 0
     4e8:	80 e8       	ldi	r24, 0x80	; 128
     4ea:	0f b6       	in	r0, 0x3f	; 63
     4ec:	f8 94       	cli
     4ee:	80 93 61 00 	sts	0x0061, r24
     4f2:	90 93 61 00 	sts	0x0061, r25
     4f6:	0f be       	out	0x3f, r0	; 63

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void LEDs_Init(void)
			{
				DDRD  |=  LEDS_ALL_LEDS;
     4f8:	8a b1       	in	r24, 0x0a	; 10
     4fa:	80 6f       	ori	r24, 0xF0	; 240
     4fc:	8a b9       	out	0x0a, r24	; 10
				PORTD &= ~LEDS_ALL_LEDS;
     4fe:	8b b1       	in	r24, 0x0b	; 11
     500:	8f 70       	andi	r24, 0x0F	; 15
     502:	8b b9       	out	0x0b, r24	; 11
			 *                         \c SPI_SCK_*, \c SPI_SAMPLE_*, \c SPI_ORDER_* and \c SPI_MODE_* masks.
			 */
			static inline void SPI_Init(const uint8_t SPIOptions)
			{
				/* Prevent high rise times on PB.0 (/SS) from forcing a change to SPI slave mode */
				DDRB  |= (1 << 0);
     504:	20 9a       	sbi	0x04, 0	; 4
				PORTB |= (1 << 0);
     506:	28 9a       	sbi	0x05, 0	; 5

				DDRB  |=  ((1 << 1) | (1 << 2));
     508:	84 b1       	in	r24, 0x04	; 4
     50a:	86 60       	ori	r24, 0x06	; 6
     50c:	84 b9       	out	0x04, r24	; 4
				DDRB  &= ~(1 << 3);
     50e:	23 98       	cbi	0x04, 3	; 4
				PORTB |=  (1 << 3);
     510:	2b 9a       	sbi	0x05, 3	; 5

				if (SPIOptions & SPI_USE_DOUBLESPEED)
				  SPSR |= (1 << SPI2X);
     512:	8d b5       	in	r24, 0x2d	; 45
     514:	81 60       	ori	r24, 0x01	; 1
     516:	8d bd       	out	0x2d, r24	; 45
				else
				  SPSR &= ~(1 << SPI2X);

				/* Switch /SS to input mode after configuration to allow for forced mode changes */
				DDRB &= ~(1 << 0);
     518:	20 98       	cbi	0x04, 0	; 4

				SPCR  = ((1 << SPE) | SPIOptions);
     51a:	8c e5       	ldi	r24, 0x5C	; 92
     51c:	8c bd       	out	0x2c, r24	; 44
			 *  \param[in] Mode  Mask of ADC prescale and mode settings.
			 */
			static inline void ADC_Init(const uint8_t Mode) ATTR_ALWAYS_INLINE;
			static inline void ADC_Init(const uint8_t Mode)
			{
				ADCSRA = ((1 << ADEN) | Mode);
     51e:	87 ea       	ldi	r24, 0xA7	; 167
     520:	80 93 7a 00 	sts	0x007A, r24
			 */
			static inline void ADC_SetupChannel(const uint8_t ChannelIndex)
			{
				#if (defined(__AVR_AT90USB1286__) || defined(__AVR_AT90USB646__) || \
					 defined(__AVR_AT90USB1287__) || defined(__AVR_AT90USB647__))
				DDRF  &= ~(1 << ChannelIndex);
     524:	80 98       	cbi	0x10, 0	; 16
				DIDR0 |=  (1 << ChannelIndex);
     526:	80 91 7e 00 	lds	r24, 0x007E
     52a:	81 60       	ori	r24, 0x01	; 1
     52c:	80 93 7e 00 	sts	0x007E, r24
			/** Initializes the dataflash driver so that commands and data may be sent to an attached dataflash IC.
			 *  The microcontroller's SPI driver MUST be initialized before any of the dataflash commands are used.
			 */
			static inline void Dataflash_Init(void)
			{
				DATAFLASH_CHIPCS_DDR  |= DATAFLASH_CHIPCS_MASK;
     530:	8d b1       	in	r24, 0x0d	; 13
     532:	83 60       	ori	r24, 0x03	; 3
     534:	8d b9       	out	0x0d, r24	; 13
				DATAFLASH_CHIPCS_PORT |= DATAFLASH_CHIPCS_MASK;
     536:	8e b1       	in	r24, 0x0e	; 14
     538:	83 60       	ori	r24, 0x03	; 3
     53a:	8e b9       	out	0x0e, r24	; 14
	LEDs_Init();
	SPI_Init(SPI_SPEED_FCPU_DIV_2 | SPI_SCK_LEAD_FALLING | SPI_SAMPLE_TRAILING | SPI_MODE_MASTER);
	ADC_Init(ADC_FREE_RUNNING | ADC_PRESCALE_128);
	Temperature_Init();
	Dataflash_Init();
	USB_Init();
     53c:	0e 94 54 1d 	call	0x3aa8	; 0x3aa8 <USB_Init>
			 *  \param[in] BitLength  Length of the bits sent on the bus.
			 */
			static inline void TWI_Init(const uint8_t Prescale, const uint8_t BitLength) ATTR_ALWAYS_INLINE;
			static inline void TWI_Init(const uint8_t Prescale, const uint8_t BitLength)
			{
				TWCR |= (1 << TWEN);
     540:	80 91 bc 00 	lds	r24, 0x00BC
     544:	84 60       	ori	r24, 0x04	; 4
     546:	80 93 bc 00 	sts	0x00BC, r24
				TWSR  = Prescale;
     54a:	81 e0       	ldi	r24, 0x01	; 1
     54c:	80 93 b9 00 	sts	0x00B9, r24
				TWBR  = BitLength;
     550:	8c e0       	ldi	r24, 0x0C	; 12
     552:	80 93 b8 00 	sts	0x00B8, r24
	TWI_Init(TWI_BIT_PRESCALE_4, TWI_BITLENGTH_FROM_FREQ(4, 50000));

	/* 500ms logging interval timer configuration */
	OCR1A   = (((F_CPU / 1024) / 2) - 1);
     556:	81 e4       	ldi	r24, 0x41	; 65
     558:	9f e0       	ldi	r25, 0x0F	; 15
     55a:	90 93 89 00 	sts	0x0089, r25
     55e:	80 93 88 00 	sts	0x0088, r24
	TCCR1B  = (1 << WGM12) | (1 << CS12) | (1 << CS10);
     562:	8d e0       	ldi	r24, 0x0D	; 13
     564:	80 93 81 00 	sts	0x0081, r24
	TIMSK1  = (1 << OCIE1A);
     568:	82 e0       	ldi	r24, 0x02	; 2
     56a:	80 93 6f 00 	sts	0x006F, r24

	/* Check if the Dataflash is working, abort if not */
	if (!(DataflashManager_CheckDataflashOperation()))
     56e:	1c d5       	rcall	.+2616   	; 0xfa8 <DataflashManager_CheckDataflashOperation>
     570:	88 23       	and	r24, r24
     572:	19 f4       	brne	.+6      	; 0x57a <SetupHardware+0xaa>
     574:	80 e9       	ldi	r24, 0x90	; 144
	{
		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
     576:	85 de       	rcall	.-758    	; 0x282 <LEDs_SetAllLEDs>
     578:	ff cf       	rjmp	.-2      	; 0x578 <SetupHardware+0xa8>
     57a:	c8 c4       	rjmp	.+2448   	; 0xf0c <DataflashManager_ResetDataflashProtections>

0000057c <main>:
     57c:	a9 df       	rcall	.-174    	; 0x4d0 <SetupHardware>
		for(;;);
	}

	/* Clear Dataflash sector protections, if enabled */
	DataflashManager_ResetDataflashProtections();
     57e:	80 e0       	ldi	r24, 0x00	; 0
     580:	90 e0       	ldi	r25, 0x00	; 0
}
     582:	0e 94 55 27 	call	0x4eaa	; 0x4eaa <__eerd_byte_usb1287>
int main(void)
{
	SetupHardware();

	/* Fetch logging interval from EEPROM */
	LoggingInterval500MS_SRAM = eeprom_read_byte(&LoggingInterval500MS_EEPROM);
     586:	80 93 e0 01 	sts	0x01E0, r24
     58a:	8f 3f       	cpi	r24, 0xFF	; 255

	/* Check if the logging interval is invalid (0xFF) indicating that the EEPROM is blank */
	if (LoggingInterval500MS_SRAM == 0xFF)
     58c:	19 f4       	brne	.+6      	; 0x594 <main+0x18>
     58e:	8a e0       	ldi	r24, 0x0A	; 10
	  LoggingInterval500MS_SRAM = DEFAULT_LOG_INTERVAL;
     590:	80 93 e0 01 	sts	0x01E0, r24
     594:	2e df       	rcall	.-420    	; 0x3f2 <OpenLogFile>

	/* Mount and open the log file on the Dataflash FAT partition */
	OpenLogFile();
     596:	80 e1       	ldi	r24, 0x10	; 16
     598:	74 de       	rcall	.-792    	; 0x282 <LEDs_SetAllLEDs>

	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
     59a:	78 94       	sei
     59c:	80 e5       	ldi	r24, 0x50	; 80
     59e:	91 e0       	ldi	r25, 0x01	; 1
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				sei();
     5a0:	0e 94 68 22 	call	0x44d0	; 0x44d0 <MS_Device_USBTask>
	GlobalInterruptEnable();

	for (;;)
	{
		MS_Device_USBTask(&Disk_MS_Interface);
     5a4:	80 e4       	ldi	r24, 0x40	; 64
     5a6:	91 e0       	ldi	r25, 0x01	; 1
     5a8:	0e 94 49 21 	call	0x4292	; 0x4292 <HID_Device_USBTask>
		HID_Device_USBTask(&Generic_HID_Interface);
     5ac:	0e 94 e0 1f 	call	0x3fc0	; 0x3fc0 <USB_USBTask>
     5b0:	f5 cf       	rjmp	.-22     	; 0x59c <main+0x20>

000005b2 <EVENT_USB_Device_Connect>:
		USB_USBTask();
     5b2:	80 ea       	ldi	r24, 0xA0	; 160
     5b4:	66 de       	rcall	.-820    	; 0x282 <LEDs_SetAllLEDs>
     5b6:	7f cf       	rjmp	.-258    	; 0x4b6 <CloseLogFile>

000005b8 <EVENT_USB_Device_Disconnect>:
void EVENT_USB_Device_Connect(void)
{
	LEDs_SetAllLEDs(LEDMASK_USB_ENUMERATING);

	/* Close the log file so that the host has exclusive file system access */
	CloseLogFile();
     5b8:	80 e1       	ldi	r24, 0x10	; 16
     5ba:	63 de       	rcall	.-826    	; 0x282 <LEDs_SetAllLEDs>
}
     5bc:	1a cf       	rjmp	.-460    	; 0x3f2 <OpenLogFile>

000005be <EVENT_USB_Device_ConfigurationChanged>:
void EVENT_USB_Device_Disconnect(void)
{
	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);

	/* Mount and open the log file on the Dataflash FAT partition */
	OpenLogFile();
     5be:	cf 93       	push	r28
     5c0:	80 e4       	ldi	r24, 0x40	; 64
}
     5c2:	91 e0       	ldi	r25, 0x01	; 1
/** Event handler for the library USB Configuration Changed event. */
void EVENT_USB_Device_ConfigurationChanged(void)
{
	bool ConfigSuccess = true;

	ConfigSuccess &= HID_Device_ConfigureEndpoints(&Generic_HID_Interface);
     5c4:	0e 94 30 21 	call	0x4260	; 0x4260 <HID_Device_ConfigureEndpoints>
     5c8:	c8 2f       	mov	r28, r24
	ConfigSuccess &= MS_Device_ConfigureEndpoints(&Disk_MS_Interface);
     5ca:	80 e5       	ldi	r24, 0x50	; 80
     5cc:	91 e0       	ldi	r25, 0x01	; 1
     5ce:	0e 94 4c 22 	call	0x4498	; 0x4498 <MS_Device_ConfigureEndpoints>
     5d2:	28 2f       	mov	r18, r24
     5d4:	30 e0       	ldi	r19, 0x00	; 0
/** Event handler for the library USB Configuration Changed event. */
void EVENT_USB_Device_ConfigurationChanged(void)
{
	bool ConfigSuccess = true;

	ConfigSuccess &= HID_Device_ConfigureEndpoints(&Generic_HID_Interface);
     5d6:	8c 2f       	mov	r24, r28
     5d8:	90 e0       	ldi	r25, 0x00	; 0
	ConfigSuccess &= MS_Device_ConfigureEndpoints(&Disk_MS_Interface);
     5da:	28 23       	and	r18, r24
     5dc:	39 23       	and	r19, r25

	LEDs_SetAllLEDs(ConfigSuccess ? LEDMASK_USB_READY : LEDMASK_USB_ERROR);
     5de:	21 15       	cp	r18, r1
     5e0:	31 05       	cpc	r19, r1
     5e2:	11 f0       	breq	.+4      	; 0x5e8 <EVENT_USB_Device_ConfigurationChanged+0x2a>
     5e4:	80 e6       	ldi	r24, 0x60	; 96
     5e6:	01 c0       	rjmp	.+2      	; 0x5ea <EVENT_USB_Device_ConfigurationChanged+0x2c>
     5e8:	80 e9       	ldi	r24, 0x90	; 144
     5ea:	4b de       	rcall	.-874    	; 0x282 <LEDs_SetAllLEDs>
     5ec:	cf 91       	pop	r28
}
     5ee:	08 95       	ret

000005f0 <EVENT_USB_Device_ControlRequest>:
     5f0:	80 e5       	ldi	r24, 0x50	; 80

/** Event handler for the library USB Control Request reception event. */
void EVENT_USB_Device_ControlRequest(void)
{
	MS_Device_ProcessControlRequest(&Disk_MS_Interface);
     5f2:	91 e0       	ldi	r25, 0x01	; 1
     5f4:	0e 94 0f 22 	call	0x441e	; 0x441e <MS_Device_ProcessControlRequest>
	HID_Device_ProcessControlRequest(&Generic_HID_Interface);
     5f8:	80 e4       	ldi	r24, 0x40	; 64
     5fa:	91 e0       	ldi	r25, 0x01	; 1
     5fc:	0c 94 fb 1f 	jmp	0x3ff6	; 0x3ff6 <HID_Device_ProcessControlRequest>

00000600 <CALLBACK_MS_Device_SCSICommandReceived>:
}
     600:	cf 93       	push	r28
/** Mass Storage class driver callback function the reception of SCSI commands from the host, which must be processed.
 *
 *  \param[in] MSInterfaceInfo  Pointer to the Mass Storage class interface configuration structure being referenced
 */
bool CALLBACK_MS_Device_SCSICommandReceived(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
     602:	df 93       	push	r29
     604:	ec 01       	movw	r28, r24
	bool CommandSuccess;

	LEDs_SetAllLEDs(LEDMASK_USB_BUSY);
     606:	80 e2       	ldi	r24, 0x20	; 32
     608:	3c de       	rcall	.-904    	; 0x282 <LEDs_SetAllLEDs>
     60a:	ce 01       	movw	r24, r28
	CommandSuccess = SCSI_DecodeSCSICommand(MSInterfaceInfo);
     60c:	29 d6       	rcall	.+3154   	; 0x1260 <SCSI_DecodeSCSICommand>
     60e:	c8 2f       	mov	r28, r24
     610:	80 e6       	ldi	r24, 0x60	; 96
     612:	37 de       	rcall	.-914    	; 0x282 <LEDs_SetAllLEDs>
	LEDs_SetAllLEDs(LEDMASK_USB_READY);
     614:	8c 2f       	mov	r24, r28
     616:	df 91       	pop	r29
     618:	cf 91       	pop	r28

	return CommandSuccess;
}
     61a:	08 95       	ret

0000061c <CALLBACK_HID_Device_CreateHIDReport>:
     61c:	0f 93       	push	r16
     61e:	1f 93       	push	r17
     620:	cf 93       	push	r28
bool CALLBACK_HID_Device_CreateHIDReport(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo,
                                         uint8_t* const ReportID,
                                         const uint8_t ReportType,
                                         void* ReportData,
                                         uint16_t* const ReportSize)
{
     622:	df 93       	push	r29
     624:	e9 01       	movw	r28, r18
	Device_Report_t* ReportParams = (Device_Report_t*)ReportData;

	DS1307_GetTimeDate(&ReportParams->TimeDate);
     626:	c9 01       	movw	r24, r18
     628:	56 d5       	rcall	.+2732   	; 0x10d6 <DS1307_GetTimeDate>
     62a:	80 91 e0 01 	lds	r24, 0x01E0

	ReportParams->LogInterval500MS = LoggingInterval500MS_SRAM;
     62e:	8e 83       	std	Y+6, r24	; 0x06
     630:	87 e0       	ldi	r24, 0x07	; 7

	*ReportSize = sizeof(Device_Report_t);
     632:	90 e0       	ldi	r25, 0x00	; 0
     634:	f8 01       	movw	r30, r16
     636:	91 83       	std	Z+1, r25	; 0x01
     638:	80 83       	st	Z, r24
     63a:	81 e0       	ldi	r24, 0x01	; 1
	return true;
}
     63c:	df 91       	pop	r29
     63e:	cf 91       	pop	r28
     640:	1f 91       	pop	r17
     642:	0f 91       	pop	r16
     644:	08 95       	ret

00000646 <CALLBACK_HID_Device_ProcessHIDReport>:
     646:	cf 93       	push	r28
void CALLBACK_HID_Device_ProcessHIDReport(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo,
                                          const uint8_t ReportID,
                                          const uint8_t ReportType,
                                          const void* ReportData,
                                          const uint16_t ReportSize)
{
     648:	df 93       	push	r29
     64a:	e9 01       	movw	r28, r18
	Device_Report_t* ReportParams = (Device_Report_t*)ReportData;

	DS1307_SetTimeDate(&ReportParams->TimeDate);
     64c:	c9 01       	movw	r24, r18
     64e:	d7 d4       	rcall	.+2478   	; 0xffe <DS1307_SetTimeDate>
     650:	6e 81       	ldd	r22, Y+6	; 0x06

	/* If the logging interval has changed from its current value, write it to EEPROM */
	if (LoggingInterval500MS_SRAM != ReportParams->LogInterval500MS)
     652:	80 91 e0 01 	lds	r24, 0x01E0
     656:	86 17       	cp	r24, r22
     658:	31 f0       	breq	.+12     	; 0x666 <CALLBACK_HID_Device_ProcessHIDReport+0x20>
     65a:	60 93 e0 01 	sts	0x01E0, r22
	{
		LoggingInterval500MS_SRAM = ReportParams->LogInterval500MS;
     65e:	80 e0       	ldi	r24, 0x00	; 0
		eeprom_update_byte(&LoggingInterval500MS_EEPROM, LoggingInterval500MS_SRAM);
     660:	90 e0       	ldi	r25, 0x00	; 0
     662:	0e 94 5d 27 	call	0x4eba	; 0x4eba <__eeupd_byte_usb1287>
     666:	df 91       	pop	r29
	}
}
     668:	cf 91       	pop	r28
     66a:	08 95       	ret

0000066c <CALLBACK_USB_GetDescriptor>:
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
     66c:	93 30       	cpi	r25, 0x03	; 3
     66e:	89 f0       	breq	.+34     	; 0x692 <CALLBACK_USB_GetDescriptor+0x26>
     670:	94 30       	cpi	r25, 0x04	; 4
     672:	28 f4       	brcc	.+10     	; 0x67e <CALLBACK_USB_GetDescriptor+0x12>
     674:	91 30       	cpi	r25, 0x01	; 1
     676:	49 f1       	breq	.+82     	; 0x6ca <CALLBACK_USB_GetDescriptor+0x5e>
     678:	92 30       	cpi	r25, 0x02	; 2
     67a:	61 f5       	brne	.+88     	; 0x6d4 <CALLBACK_USB_GetDescriptor+0x68>
     67c:	05 c0       	rjmp	.+10     	; 0x688 <CALLBACK_USB_GetDescriptor+0x1c>
     67e:	91 32       	cpi	r25, 0x21	; 33
     680:	d1 f0       	breq	.+52     	; 0x6b6 <CALLBACK_USB_GetDescriptor+0x4a>
     682:	92 32       	cpi	r25, 0x22	; 34
     684:	39 f5       	brne	.+78     	; 0x6d4 <CALLBACK_USB_GetDescriptor+0x68>
     686:	1c c0       	rjmp	.+56     	; 0x6c0 <CALLBACK_USB_GetDescriptor+0x54>
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
			Size    = sizeof(USB_Descriptor_Configuration_t);
     688:	89 e3       	ldi	r24, 0x39	; 57
     68a:	90 e0       	ldi	r25, 0x00	; 0
		case DTYPE_Device:
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
     68c:	e6 ee       	ldi	r30, 0xE6	; 230
     68e:	f0 e0       	ldi	r31, 0x00	; 0
			Size    = sizeof(USB_Descriptor_Configuration_t);
			break;
     690:	25 c0       	rjmp	.+74     	; 0x6dc <CALLBACK_USB_GetDescriptor+0x70>
		case DTYPE_String:
			switch (DescriptorNumber)
     692:	81 30       	cpi	r24, 0x01	; 1
     694:	41 f0       	breq	.+16     	; 0x6a6 <CALLBACK_USB_GetDescriptor+0x3a>
     696:	81 30       	cpi	r24, 0x01	; 1
     698:	18 f0       	brcs	.+6      	; 0x6a0 <CALLBACK_USB_GetDescriptor+0x34>
     69a:	82 30       	cpi	r24, 0x02	; 2
     69c:	d9 f4       	brne	.+54     	; 0x6d4 <CALLBACK_USB_GetDescriptor+0x68>
     69e:	06 c0       	rjmp	.+12     	; 0x6ac <CALLBACK_USB_GetDescriptor+0x40>
			{
				case 0x00:
					Address = &LanguageString;
					Size    = pgm_read_byte(&LanguageString.Header.Size);
     6a0:	e2 ee       	ldi	r30, 0xE2	; 226
     6a2:	f0 e0       	ldi	r31, 0x00	; 0
     6a4:	05 c0       	rjmp	.+10     	; 0x6b0 <CALLBACK_USB_GetDescriptor+0x44>
					break;
				case 0x01:
					Address = &ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
     6a6:	e8 ec       	ldi	r30, 0xC8	; 200
     6a8:	f0 e0       	ldi	r31, 0x00	; 0
     6aa:	02 c0       	rjmp	.+4      	; 0x6b0 <CALLBACK_USB_GetDescriptor+0x44>
					break;
				case 0x02:
					Address = &ProductString;
					Size    = pgm_read_byte(&ProductString.Header.Size);
     6ac:	e8 e9       	ldi	r30, 0x98	; 152
     6ae:	f0 e0       	ldi	r31, 0x00	; 0
     6b0:	84 91       	lpm	r24, Z
     6b2:	90 e0       	ldi	r25, 0x00	; 0
					break;
     6b4:	13 c0       	rjmp	.+38     	; 0x6dc <CALLBACK_USB_GetDescriptor+0x70>
			}

			break;
		case HID_DTYPE_HID:
			Address = &ConfigurationDescriptor.HID_GenericHID;
			Size    = sizeof(USB_HID_Descriptor_HID_t);
     6b6:	89 e0       	ldi	r24, 0x09	; 9
     6b8:	90 e0       	ldi	r25, 0x00	; 0
					break;
			}

			break;
		case HID_DTYPE_HID:
			Address = &ConfigurationDescriptor.HID_GenericHID;
     6ba:	ef e0       	ldi	r30, 0x0F	; 15
     6bc:	f1 e0       	ldi	r31, 0x01	; 1
			Size    = sizeof(USB_HID_Descriptor_HID_t);
			break;
     6be:	0e c0       	rjmp	.+28     	; 0x6dc <CALLBACK_USB_GetDescriptor+0x70>
		case HID_DTYPE_Report:
			Address = &GenericReport;
			Size    = sizeof(GenericReport);
     6c0:	80 e2       	ldi	r24, 0x20	; 32
     6c2:	90 e0       	ldi	r25, 0x00	; 0
		case HID_DTYPE_HID:
			Address = &ConfigurationDescriptor.HID_GenericHID;
			Size    = sizeof(USB_HID_Descriptor_HID_t);
			break;
		case HID_DTYPE_Report:
			Address = &GenericReport;
     6c4:	e1 e3       	ldi	r30, 0x31	; 49
     6c6:	f1 e0       	ldi	r31, 0x01	; 1
			Size    = sizeof(GenericReport);
			break;
     6c8:	09 c0       	rjmp	.+18     	; 0x6dc <CALLBACK_USB_GetDescriptor+0x70>

	switch (DescriptorType)
	{
		case DTYPE_Device:
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
     6ca:	82 e1       	ldi	r24, 0x12	; 18
     6cc:	90 e0       	ldi	r25, 0x00	; 0
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
	{
		case DTYPE_Device:
			Address = &DeviceDescriptor;
     6ce:	ef e1       	ldi	r30, 0x1F	; 31
     6d0:	f1 e0       	ldi	r31, 0x01	; 1
     6d2:	04 c0       	rjmp	.+8      	; 0x6dc <CALLBACK_USB_GetDescriptor+0x70>
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;
     6d4:	80 e0       	ldi	r24, 0x00	; 0
     6d6:	90 e0       	ldi	r25, 0x00	; 0
                                    const void** const DescriptorAddress)
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
     6d8:	e0 e0       	ldi	r30, 0x00	; 0
     6da:	f0 e0       	ldi	r31, 0x00	; 0
			Address = &GenericReport;
			Size    = sizeof(GenericReport);
			break;
	}

	*DescriptorAddress = Address;
     6dc:	da 01       	movw	r26, r20
     6de:	11 96       	adiw	r26, 0x01	; 1
     6e0:	fc 93       	st	X, r31
     6e2:	ee 93       	st	-X, r30
	return Size;
}
     6e4:	08 95       	ret

000006e6 <Dataflash_ToggleSelectedChipCS>:
			 *          or a DATAFLASH_CHIPn mask (where n is the chip number).
			 */
			static inline uint8_t Dataflash_GetSelectedChip(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t Dataflash_GetSelectedChip(void)
			{
				return (~DATAFLASH_CHIPCS_PORT & DATAFLASH_CHIPCS_MASK);
     6e6:	8e b1       	in	r24, 0x0e	; 14
			 *              the chip number).
			 */
			static inline void Dataflash_SelectChip(const uint8_t ChipMask) ATTR_ALWAYS_INLINE;
			static inline void Dataflash_SelectChip(const uint8_t ChipMask)
			{
				DATAFLASH_CHIPCS_PORT = ((DATAFLASH_CHIPCS_PORT | DATAFLASH_CHIPCS_MASK) & ~ChipMask);
     6e8:	9e b1       	in	r25, 0x0e	; 14
     6ea:	93 60       	ori	r25, 0x03	; 3
     6ec:	9e b9       	out	0x0e, r25	; 14
     6ee:	9e b1       	in	r25, 0x0e	; 14
     6f0:	8c 6f       	ori	r24, 0xFC	; 252
     6f2:	93 60       	ori	r25, 0x03	; 3
     6f4:	89 23       	and	r24, r25
     6f6:	8e b9       	out	0x0e, r24	; 14
			{
				uint8_t SelectedChipMask = Dataflash_GetSelectedChip();

				Dataflash_DeselectChip();
				Dataflash_SelectChip(SelectedChipMask);
			}
     6f8:	08 95       	ret

000006fa <Dataflash_WaitWhileBusy>:
			/** Spin-loops while the currently selected dataflash is busy executing a command, such as a main
			 *  memory page program or main memory to buffer transfer.
			 */
			static inline void Dataflash_WaitWhileBusy(void)
			{
				Dataflash_ToggleSelectedChipCS();
     6fa:	f5 df       	rcall	.-22     	; 0x6e6 <Dataflash_ToggleSelectedChipCS>
     6fc:	87 ed       	ldi	r24, 0xD7	; 215
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     6fe:	8e bd       	out	0x2e, r24	; 46
     700:	0d b4       	in	r0, 0x2d	; 45
				while (!(SPSR & (1 << SPIF)));
     702:	07 fe       	sbrs	r0, 7
     704:	fd cf       	rjmp	.-6      	; 0x700 <Dataflash_WaitWhileBusy+0x6>
     706:	1e bc       	out	0x2e, r1	; 46
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     708:	0d b4       	in	r0, 0x2d	; 45
				while (!(SPSR & (1 << SPIF)));
     70a:	07 fe       	sbrs	r0, 7
     70c:	fd cf       	rjmp	.-6      	; 0x708 <Dataflash_WaitWhileBusy+0xe>
     70e:	0e b4       	in	r0, 0x2e	; 46
				Dataflash_SendByte(DF_CMD_GETSTATUS);
				while (!(Dataflash_ReceiveByte() & DF_STATUS_READY));
     710:	07 fe       	sbrs	r0, 7
     712:	f9 cf       	rjmp	.-14     	; 0x706 <Dataflash_WaitWhileBusy+0xc>
     714:	e8 cf       	rjmp	.-48     	; 0x6e6 <Dataflash_ToggleSelectedChipCS>

00000716 <Dataflash_SendAddressBytes>:
				Dataflash_ToggleSelectedChipCS();
     716:	9c 01       	movw	r18, r24
     718:	36 95       	lsr	r19
			}
     71a:	27 95       	ror	r18
			{
				#if (DATAFLASH_TOTALCHIPS == 2)
					PageAddress >>= 1;
				#endif
				
				Dataflash_SendByte(PageAddress >> 5);
     71c:	56 e0       	ldi	r21, 0x06	; 6
     71e:	96 95       	lsr	r25
     720:	87 95       	ror	r24
     722:	5a 95       	dec	r21
     724:	e1 f7       	brne	.-8      	; 0x71e <Dataflash_SendAddressBytes+0x8>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     726:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     728:	0d b4       	in	r0, 0x2d	; 45
     72a:	07 fe       	sbrs	r0, 7
     72c:	fd cf       	rjmp	.-6      	; 0x728 <Dataflash_SendAddressBytes+0x12>
				Dataflash_SendByte((PageAddress << 3) | (BufferByte >> 8));
     72e:	22 0f       	add	r18, r18
     730:	22 0f       	add	r18, r18
     732:	22 0f       	add	r18, r18
     734:	27 2b       	or	r18, r23
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     736:	2e bd       	out	0x2e, r18	; 46
				while (!(SPSR & (1 << SPIF)));
     738:	0d b4       	in	r0, 0x2d	; 45
     73a:	07 fe       	sbrs	r0, 7
     73c:	fd cf       	rjmp	.-6      	; 0x738 <Dataflash_SendAddressBytes+0x22>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     73e:	6e bd       	out	0x2e, r22	; 46
				while (!(SPSR & (1 << SPIF)));
     740:	0d b4       	in	r0, 0x2d	; 45
     742:	07 fe       	sbrs	r0, 7
     744:	fd cf       	rjmp	.-6      	; 0x740 <Dataflash_SendAddressBytes+0x2a>
				Dataflash_SendByte(BufferByte);
			}
     746:	08 95       	ret

00000748 <Dataflash_SelectChipFromPage>:
			 *              the chip number).
			 */
			static inline void Dataflash_SelectChip(const uint8_t ChipMask) ATTR_ALWAYS_INLINE;
			static inline void Dataflash_SelectChip(const uint8_t ChipMask)
			{
				DATAFLASH_CHIPCS_PORT = ((DATAFLASH_CHIPCS_PORT | DATAFLASH_CHIPCS_MASK) & ~ChipMask);
     748:	2e b1       	in	r18, 0x0e	; 14
     74a:	23 60       	ori	r18, 0x03	; 3
     74c:	2e b9       	out	0x0e, r18	; 14
			 */
			static inline void Dataflash_SelectChipFromPage(const uint16_t PageAddress)
			{
				Dataflash_DeselectChip();

				if (PageAddress >= (DATAFLASH_PAGES * DATAFLASH_TOTALCHIPS))
     74e:	20 e4       	ldi	r18, 0x40	; 64
     750:	80 30       	cpi	r24, 0x00	; 0
     752:	92 07       	cpc	r25, r18
     754:	58 f4       	brcc	.+22     	; 0x76c <Dataflash_SelectChipFromPage+0x24>
				  return;

				#if (DATAFLASH_TOTALCHIPS == 2)
					if (PageAddress & 0x01)
     756:	80 ff       	sbrs	r24, 0
     758:	05 c0       	rjmp	.+10     	; 0x764 <Dataflash_SelectChipFromPage+0x1c>
			 *              the chip number).
			 */
			static inline void Dataflash_SelectChip(const uint8_t ChipMask) ATTR_ALWAYS_INLINE;
			static inline void Dataflash_SelectChip(const uint8_t ChipMask)
			{
				DATAFLASH_CHIPCS_PORT = ((DATAFLASH_CHIPCS_PORT | DATAFLASH_CHIPCS_MASK) & ~ChipMask);
     75a:	8e b1       	in	r24, 0x0e	; 14
     75c:	83 60       	ori	r24, 0x03	; 3
     75e:	8d 7f       	andi	r24, 0xFD	; 253
     760:	8e b9       	out	0x0e, r24	; 14
     762:	08 95       	ret
     764:	8e b1       	in	r24, 0x0e	; 14
     766:	83 60       	ori	r24, 0x03	; 3
     768:	8e 7f       	andi	r24, 0xFE	; 254
     76a:	8e b9       	out	0x0e, r24	; 14
     76c:	08 95       	ret

0000076e <DataflashManager_WriteBlocks>:
 *  \param[in] TotalBlocks   Number of blocks of data to write
 */
void DataflashManager_WriteBlocks(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo,
                                  const uint32_t BlockAddress,
                                  uint16_t TotalBlocks)
{
     76e:	3f 92       	push	r3
     770:	4f 92       	push	r4
     772:	5f 92       	push	r5
     774:	6f 92       	push	r6
     776:	7f 92       	push	r7
     778:	8f 92       	push	r8
     77a:	9f 92       	push	r9
     77c:	af 92       	push	r10
     77e:	bf 92       	push	r11
     780:	cf 92       	push	r12
     782:	df 92       	push	r13
     784:	ef 92       	push	r14
     786:	ff 92       	push	r15
     788:	0f 93       	push	r16
     78a:	1f 93       	push	r17
     78c:	cf 93       	push	r28
     78e:	df 93       	push	r29
     790:	0f 92       	push	r0
     792:	cd b7       	in	r28, 0x3d	; 61
     794:	de b7       	in	r29, 0x3e	; 62
     796:	2c 01       	movw	r4, r24
     798:	b2 2e       	mov	r11, r18
     79a:	c3 2e       	mov	r12, r19
	uint16_t CurrDFPage          = ((BlockAddress * VIRTUAL_MEMORY_BLOCK_SIZE) / DATAFLASH_PAGE_SIZE);
     79c:	db 01       	movw	r26, r22
     79e:	ca 01       	movw	r24, r20
     7a0:	f9 e0       	ldi	r31, 0x09	; 9
     7a2:	88 0f       	add	r24, r24
     7a4:	99 1f       	adc	r25, r25
     7a6:	aa 1f       	adc	r26, r26
     7a8:	bb 1f       	adc	r27, r27
     7aa:	fa 95       	dec	r31
     7ac:	d1 f7       	brne	.-12     	; 0x7a2 <DataflashManager_WriteBlocks+0x34>
     7ae:	1a e0       	ldi	r17, 0x0A	; 10
     7b0:	b6 95       	lsr	r27
     7b2:	a7 95       	ror	r26
     7b4:	97 95       	ror	r25
     7b6:	87 95       	ror	r24
     7b8:	1a 95       	dec	r17
     7ba:	d1 f7       	brne	.-12     	; 0x7b0 <DataflashManager_WriteBlocks+0x42>
     7bc:	7c 01       	movw	r14, r24
	uint16_t CurrDFPageByte      = ((BlockAddress * VIRTUAL_MEMORY_BLOCK_SIZE) % DATAFLASH_PAGE_SIZE);
     7be:	8a 01       	movw	r16, r20
     7c0:	10 2f       	mov	r17, r16
     7c2:	00 27       	eor	r16, r16
     7c4:	11 0f       	add	r17, r17
     7c6:	13 70       	andi	r17, 0x03	; 3
	uint8_t  CurrDFPageByteDiv16 = (CurrDFPageByte >> 4);
	bool     UsingSecondBuffer   = false;

	/* Select the correct starting Dataflash IC for the block requested */
	Dataflash_SelectChipFromPage(CurrDFPage);
     7c8:	bf df       	rcall	.-130    	; 0x748 <Dataflash_SelectChipFromPage>
     7ca:	83 e5       	ldi	r24, 0x53	; 83
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     7cc:	8e bd       	out	0x2e, r24	; 46
     7ce:	0d b4       	in	r0, 0x2d	; 45
				while (!(SPSR & (1 << SPIF)));
     7d0:	07 fe       	sbrs	r0, 7
     7d2:	fd cf       	rjmp	.-6      	; 0x7ce <DataflashManager_WriteBlocks+0x60>
     7d4:	c7 01       	movw	r24, r14

#if (DATAFLASH_PAGE_SIZE > VIRTUAL_MEMORY_BLOCK_SIZE)
	/* Copy selected dataflash's current page contents to the Dataflash buffer */
	Dataflash_SendByte(DF_CMD_MAINMEMTOBUFF1);
	Dataflash_SendAddressBytes(CurrDFPage, 0);
     7d6:	60 e0       	ldi	r22, 0x00	; 0
     7d8:	70 e0       	ldi	r23, 0x00	; 0
     7da:	9d df       	rcall	.-198    	; 0x716 <Dataflash_SendAddressBytes>
     7dc:	8e df       	rcall	.-228    	; 0x6fa <Dataflash_WaitWhileBusy>
     7de:	84 e8       	ldi	r24, 0x84	; 132
	Dataflash_WaitWhileBusy();
     7e0:	8e bd       	out	0x2e, r24	; 46
     7e2:	0d b4       	in	r0, 0x2d	; 45
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     7e4:	07 fe       	sbrs	r0, 7
     7e6:	fd cf       	rjmp	.-6      	; 0x7e2 <DataflashManager_WriteBlocks+0x74>
				while (!(SPSR & (1 << SPIF)));
     7e8:	80 e0       	ldi	r24, 0x00	; 0
     7ea:	90 e0       	ldi	r25, 0x00	; 0
     7ec:	b8 01       	movw	r22, r16
#endif

	/* Send the Dataflash buffer write command */
	Dataflash_SendByte(DF_CMD_BUFF1WRITE);
	Dataflash_SendAddressBytes(0, CurrDFPageByte);
     7ee:	93 df       	rcall	.-218    	; 0x716 <Dataflash_SendAddressBytes>
     7f0:	0e 94 de 1c 	call	0x39bc	; 0x39bc <Endpoint_WaitUntilReady>
     7f4:	88 23       	and	r24, r24
     7f6:	09 f0       	breq	.+2      	; 0x7fa <DataflashManager_WriteBlocks+0x8c>

	/* Wait until endpoint is ready before continuing */
	if (Endpoint_WaitUntilReady())
     7f8:	f4 c0       	rjmp	.+488    	; 0x9e2 <DataflashManager_WriteBlocks+0x274>
     7fa:	a8 01       	movw	r20, r16
     7fc:	74 e0       	ldi	r23, 0x04	; 4
     7fe:	56 95       	lsr	r21
     800:	47 95       	ror	r20
                                  const uint32_t BlockAddress,
                                  uint16_t TotalBlocks)
{
	uint16_t CurrDFPage          = ((BlockAddress * VIRTUAL_MEMORY_BLOCK_SIZE) / DATAFLASH_PAGE_SIZE);
	uint16_t CurrDFPageByte      = ((BlockAddress * VIRTUAL_MEMORY_BLOCK_SIZE) % DATAFLASH_PAGE_SIZE);
	uint8_t  CurrDFPageByteDiv16 = (CurrDFPageByte >> 4);
     802:	7a 95       	dec	r23
     804:	e1 f7       	brne	.-8      	; 0x7fe <DataflashManager_WriteBlocks+0x90>
     806:	0b 2d       	mov	r16, r11
     808:	1c 2d       	mov	r17, r12
     80a:	cc 24       	eor	r12, r12
     80c:	dd 24       	eor	r13, r13
     80e:	33 24       	eor	r3, r3
     810:	38 01       	movw	r6, r16
     812:	e5 e0       	ldi	r30, 0x05	; 5
     814:	66 0c       	add	r6, r6
     816:	77 1c       	adc	r7, r7
 *
 *  \param[in] MSInterfaceInfo  Pointer to a structure containing a Mass Storage Class configuration and state
 *  \param[in] BlockAddress  Data block starting address for the write sequence
 *  \param[in] TotalBlocks   Number of blocks of data to write
 */
void DataflashManager_WriteBlocks(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo,
     818:	ea 95       	dec	r30
     81a:	e1 f7       	brne	.-8      	; 0x814 <DataflashManager_WriteBlocks+0xa6>
     81c:	bb 24       	eor	r11, r11
     81e:	b3 94       	inc	r11
     820:	c1 c0       	rjmp	.+386    	; 0x9a4 <DataflashManager_WriteBlocks+0x236>
     822:	60 e2       	ldi	r22, 0x20	; 32
				CurrDFPageByteDiv16 = 0;
				CurrDFPage++;

				/* Once all the Dataflash ICs have had their first buffers filled, switch buffers to maintain throughput */
				if (Dataflash_GetSelectedChip() == DATAFLASH_CHIP_MASK(DATAFLASH_TOTALCHIPS))
				  UsingSecondBuffer = !(UsingSecondBuffer);
     824:	a6 2e       	mov	r10, r22
     826:	46 01       	movw	r8, r12
     828:	86 0c       	add	r8, r6

	/* Wait until endpoint is ready before continuing */
	if (Endpoint_WaitUntilReady())
	  return;

	while (TotalBlocks)
     82a:	97 1c       	adc	r9, r7
     82c:	80 91 e8 00 	lds	r24, 0x00E8
				/* Select the next Dataflash chip based on the new Dataflash page index */
				Dataflash_SelectChipFromPage(CurrDFPage);

#if (DATAFLASH_PAGE_SIZE > VIRTUAL_MEMORY_BLOCK_SIZE)
				/* If less than one Dataflash page remaining, copy over the existing page to preserve trailing data */
				if ((TotalBlocks * (VIRTUAL_MEMORY_BLOCK_SIZE >> 4)) < (DATAFLASH_PAGE_SIZE >> 4))
     830:	85 fd       	sbrc	r24, 5
     832:	0c c0       	rjmp	.+24     	; 0x84c <DataflashManager_WriteBlocks+0xde>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
     834:	80 91 e8 00 	lds	r24, 0x00E8

		/* Write an endpoint packet sized data block to the Dataflash */
		while (BytesInBlockDiv16 < (VIRTUAL_MEMORY_BLOCK_SIZE >> 4))
		{
			/* Check if the endpoint is currently empty */
			if (!(Endpoint_IsReadWriteAllowed()))
     838:	8b 77       	andi	r24, 0x7B	; 123
     83a:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     83e:	49 83       	std	Y+1, r20	; 0x01
     840:	0e 94 de 1c 	call	0x39bc	; 0x39bc <Endpoint_WaitUntilReady>
     844:	49 81       	ldd	r20, Y+1	; 0x01
			{
				/* Clear the current endpoint bank */
				Endpoint_ClearOUT();

				/* Wait until the host has sent another packet */
				if (Endpoint_WaitUntilReady())
     846:	88 23       	and	r24, r24
     848:	09 f0       	breq	.+2      	; 0x84c <DataflashManager_WriteBlocks+0xde>
     84a:	cb c0       	rjmp	.+406    	; 0x9e2 <DataflashManager_WriteBlocks+0x274>
     84c:	40 34       	cpi	r20, 0x40	; 64
     84e:	09 f0       	breq	.+2      	; 0x852 <DataflashManager_WriteBlocks+0xe4>
     850:	3b c0       	rjmp	.+118    	; 0x8c8 <DataflashManager_WriteBlocks+0x15a>
     852:	53 df       	rcall	.-346    	; 0x6fa <Dataflash_WaitWhileBusy>
				  return;
			}

			/* Check if end of Dataflash page reached */
			if (CurrDFPageByteDiv16 == (DATAFLASH_PAGE_SIZE >> 4))
     854:	33 20       	and	r3, r3
     856:	11 f0       	breq	.+4      	; 0x85c <DataflashManager_WriteBlocks+0xee>
     858:	86 e8       	ldi	r24, 0x86	; 134
			{
				/* Write the Dataflash buffer contents back to the Dataflash page */
				Dataflash_WaitWhileBusy();
     85a:	01 c0       	rjmp	.+2      	; 0x85e <DataflashManager_WriteBlocks+0xf0>
     85c:	83 e8       	ldi	r24, 0x83	; 131
				Dataflash_SendByte(UsingSecondBuffer ? DF_CMD_BUFF2TOMAINMEMWITHERASE : DF_CMD_BUFF1TOMAINMEMWITHERASE);
     85e:	8e bd       	out	0x2e, r24	; 46
     860:	0d b4       	in	r0, 0x2d	; 45
     862:	07 fe       	sbrs	r0, 7
     864:	fd cf       	rjmp	.-6      	; 0x860 <DataflashManager_WriteBlocks+0xf2>
     866:	c7 01       	movw	r24, r14
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     868:	60 e0       	ldi	r22, 0x00	; 0
				while (!(SPSR & (1 << SPIF)));
     86a:	70 e0       	ldi	r23, 0x00	; 0
     86c:	54 df       	rcall	.-344    	; 0x716 <Dataflash_SendAddressBytes>
     86e:	08 94       	sec
				Dataflash_SendAddressBytes(CurrDFPage, 0);
     870:	e1 1c       	adc	r14, r1
     872:	f1 1c       	adc	r15, r1
     874:	8e b1       	in	r24, 0x0e	; 14
     876:	80 95       	com	r24
     878:	83 70       	andi	r24, 0x03	; 3

				/* Reset the Dataflash buffer counter, increment the page counter */
				CurrDFPageByteDiv16 = 0;
				CurrDFPage++;
     87a:	82 30       	cpi	r24, 0x02	; 2
     87c:	09 f4       	brne	.+2      	; 0x880 <DataflashManager_WriteBlocks+0x112>
     87e:	3b 24       	eor	r3, r11
			 *          or a DATAFLASH_CHIPn mask (where n is the chip number).
			 */
			static inline uint8_t Dataflash_GetSelectedChip(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t Dataflash_GetSelectedChip(void)
			{
				return (~DATAFLASH_CHIPCS_PORT & DATAFLASH_CHIPCS_MASK);
     880:	c7 01       	movw	r24, r14
     882:	62 df       	rcall	.-316    	; 0x748 <Dataflash_SelectChipFromPage>
     884:	80 e4       	ldi	r24, 0x40	; 64

				/* Once all the Dataflash ICs have had their first buffers filled, switch buffers to maintain throughput */
				if (Dataflash_GetSelectedChip() == DATAFLASH_CHIP_MASK(DATAFLASH_TOTALCHIPS))
     886:	88 16       	cp	r8, r24
     888:	91 04       	cpc	r9, r1
				  UsingSecondBuffer = !(UsingSecondBuffer);
     88a:	78 f4       	brcc	.+30     	; 0x8aa <DataflashManager_WriteBlocks+0x13c>

				/* Select the next Dataflash chip based on the new Dataflash page index */
				Dataflash_SelectChipFromPage(CurrDFPage);
     88c:	36 df       	rcall	.-404    	; 0x6fa <Dataflash_WaitWhileBusy>
     88e:	33 20       	and	r3, r3
     890:	11 f0       	breq	.+4      	; 0x896 <DataflashManager_WriteBlocks+0x128>

#if (DATAFLASH_PAGE_SIZE > VIRTUAL_MEMORY_BLOCK_SIZE)
				/* If less than one Dataflash page remaining, copy over the existing page to preserve trailing data */
				if ((TotalBlocks * (VIRTUAL_MEMORY_BLOCK_SIZE >> 4)) < (DATAFLASH_PAGE_SIZE >> 4))
     892:	85 e5       	ldi	r24, 0x55	; 85
     894:	01 c0       	rjmp	.+2      	; 0x898 <DataflashManager_WriteBlocks+0x12a>
     896:	83 e5       	ldi	r24, 0x53	; 83
     898:	8e bd       	out	0x2e, r24	; 46
				{
					/* Copy selected dataflash's current page contents to the Dataflash buffer */
					Dataflash_WaitWhileBusy();
     89a:	0d b4       	in	r0, 0x2d	; 45
     89c:	07 fe       	sbrs	r0, 7
					Dataflash_SendByte(UsingSecondBuffer ? DF_CMD_MAINMEMTOBUFF2 : DF_CMD_MAINMEMTOBUFF1);
     89e:	fd cf       	rjmp	.-6      	; 0x89a <DataflashManager_WriteBlocks+0x12c>
     8a0:	c7 01       	movw	r24, r14
     8a2:	60 e0       	ldi	r22, 0x00	; 0
     8a4:	70 e0       	ldi	r23, 0x00	; 0
     8a6:	37 df       	rcall	.-402    	; 0x716 <Dataflash_SendAddressBytes>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     8a8:	28 df       	rcall	.-432    	; 0x6fa <Dataflash_WaitWhileBusy>
				while (!(SPSR & (1 << SPIF)));
     8aa:	33 20       	and	r3, r3
     8ac:	11 f0       	breq	.+4      	; 0x8b2 <DataflashManager_WriteBlocks+0x144>
     8ae:	87 e8       	ldi	r24, 0x87	; 135
					Dataflash_SendAddressBytes(CurrDFPage, 0);
     8b0:	01 c0       	rjmp	.+2      	; 0x8b4 <DataflashManager_WriteBlocks+0x146>
     8b2:	84 e8       	ldi	r24, 0x84	; 132
     8b4:	8e bd       	out	0x2e, r24	; 46
     8b6:	0d b4       	in	r0, 0x2d	; 45
     8b8:	07 fe       	sbrs	r0, 7
					Dataflash_WaitWhileBusy();
     8ba:	fd cf       	rjmp	.-6      	; 0x8b6 <DataflashManager_WriteBlocks+0x148>
     8bc:	80 e0       	ldi	r24, 0x00	; 0
				}
#endif

				/* Send the Dataflash buffer write command */
				Dataflash_SendByte(UsingSecondBuffer ? DF_CMD_BUFF2WRITE : DF_CMD_BUFF1WRITE);
     8be:	90 e0       	ldi	r25, 0x00	; 0
     8c0:	60 e0       	ldi	r22, 0x00	; 0
     8c2:	70 e0       	ldi	r23, 0x00	; 0
     8c4:	28 df       	rcall	.-432    	; 0x716 <Dataflash_SendAddressBytes>
     8c6:	40 e0       	ldi	r20, 0x00	; 0
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     8c8:	80 91 f1 00 	lds	r24, 0x00F1
				while (!(SPSR & (1 << SPIF)));
     8cc:	8e bd       	out	0x2e, r24	; 46
     8ce:	0d b4       	in	r0, 0x2d	; 45
				Dataflash_SendAddressBytes(0, 0);
     8d0:	07 fe       	sbrs	r0, 7
     8d2:	fd cf       	rjmp	.-6      	; 0x8ce <DataflashManager_WriteBlocks+0x160>
     8d4:	80 91 f1 00 	lds	r24, 0x00F1
     8d8:	8e bd       	out	0x2e, r24	; 46
     8da:	0d b4       	in	r0, 0x2d	; 45
				Dataflash_WaitWhileBusy();
				Dataflash_SendByte(UsingSecondBuffer ? DF_CMD_BUFF2TOMAINMEMWITHERASE : DF_CMD_BUFF1TOMAINMEMWITHERASE);
				Dataflash_SendAddressBytes(CurrDFPage, 0);

				/* Reset the Dataflash buffer counter, increment the page counter */
				CurrDFPageByteDiv16 = 0;
     8dc:	07 fe       	sbrs	r0, 7
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
     8de:	fd cf       	rjmp	.-6      	; 0x8da <DataflashManager_WriteBlocks+0x16c>
     8e0:	80 91 f1 00 	lds	r24, 0x00F1
     8e4:	8e bd       	out	0x2e, r24	; 46
     8e6:	0d b4       	in	r0, 0x2d	; 45
     8e8:	07 fe       	sbrs	r0, 7
     8ea:	fd cf       	rjmp	.-6      	; 0x8e6 <DataflashManager_WriteBlocks+0x178>
     8ec:	80 91 f1 00 	lds	r24, 0x00F1
     8f0:	8e bd       	out	0x2e, r24	; 46
     8f2:	0d b4       	in	r0, 0x2d	; 45
     8f4:	07 fe       	sbrs	r0, 7
     8f6:	fd cf       	rjmp	.-6      	; 0x8f2 <DataflashManager_WriteBlocks+0x184>
     8f8:	80 91 f1 00 	lds	r24, 0x00F1
     8fc:	8e bd       	out	0x2e, r24	; 46
     8fe:	0d b4       	in	r0, 0x2d	; 45
     900:	07 fe       	sbrs	r0, 7
     902:	fd cf       	rjmp	.-6      	; 0x8fe <DataflashManager_WriteBlocks+0x190>
     904:	80 91 f1 00 	lds	r24, 0x00F1
     908:	8e bd       	out	0x2e, r24	; 46
     90a:	0d b4       	in	r0, 0x2d	; 45
     90c:	07 fe       	sbrs	r0, 7
     90e:	fd cf       	rjmp	.-6      	; 0x90a <DataflashManager_WriteBlocks+0x19c>
     910:	80 91 f1 00 	lds	r24, 0x00F1
     914:	8e bd       	out	0x2e, r24	; 46
     916:	0d b4       	in	r0, 0x2d	; 45
     918:	07 fe       	sbrs	r0, 7
     91a:	fd cf       	rjmp	.-6      	; 0x916 <DataflashManager_WriteBlocks+0x1a8>
     91c:	80 91 f1 00 	lds	r24, 0x00F1
     920:	8e bd       	out	0x2e, r24	; 46
     922:	0d b4       	in	r0, 0x2d	; 45
     924:	07 fe       	sbrs	r0, 7
     926:	fd cf       	rjmp	.-6      	; 0x922 <DataflashManager_WriteBlocks+0x1b4>
     928:	80 91 f1 00 	lds	r24, 0x00F1
     92c:	8e bd       	out	0x2e, r24	; 46
     92e:	0d b4       	in	r0, 0x2d	; 45
     930:	07 fe       	sbrs	r0, 7
     932:	fd cf       	rjmp	.-6      	; 0x92e <DataflashManager_WriteBlocks+0x1c0>
     934:	80 91 f1 00 	lds	r24, 0x00F1
     938:	8e bd       	out	0x2e, r24	; 46
     93a:	0d b4       	in	r0, 0x2d	; 45
     93c:	07 fe       	sbrs	r0, 7
     93e:	fd cf       	rjmp	.-6      	; 0x93a <DataflashManager_WriteBlocks+0x1cc>
     940:	80 91 f1 00 	lds	r24, 0x00F1
     944:	8e bd       	out	0x2e, r24	; 46
     946:	0d b4       	in	r0, 0x2d	; 45
     948:	07 fe       	sbrs	r0, 7
     94a:	fd cf       	rjmp	.-6      	; 0x946 <DataflashManager_WriteBlocks+0x1d8>
     94c:	80 91 f1 00 	lds	r24, 0x00F1
     950:	8e bd       	out	0x2e, r24	; 46
     952:	0d b4       	in	r0, 0x2d	; 45
     954:	07 fe       	sbrs	r0, 7
     956:	fd cf       	rjmp	.-6      	; 0x952 <DataflashManager_WriteBlocks+0x1e4>
     958:	80 91 f1 00 	lds	r24, 0x00F1
     95c:	8e bd       	out	0x2e, r24	; 46
     95e:	0d b4       	in	r0, 0x2d	; 45
     960:	07 fe       	sbrs	r0, 7
     962:	fd cf       	rjmp	.-6      	; 0x95e <DataflashManager_WriteBlocks+0x1f0>
     964:	80 91 f1 00 	lds	r24, 0x00F1
     968:	8e bd       	out	0x2e, r24	; 46
     96a:	0d b4       	in	r0, 0x2d	; 45
     96c:	07 fe       	sbrs	r0, 7
     96e:	fd cf       	rjmp	.-6      	; 0x96a <DataflashManager_WriteBlocks+0x1fc>
     970:	80 91 f1 00 	lds	r24, 0x00F1
     974:	8e bd       	out	0x2e, r24	; 46
     976:	0d b4       	in	r0, 0x2d	; 45
     978:	07 fe       	sbrs	r0, 7
     97a:	fd cf       	rjmp	.-6      	; 0x976 <DataflashManager_WriteBlocks+0x208>
     97c:	80 91 f1 00 	lds	r24, 0x00F1
     980:	8e bd       	out	0x2e, r24	; 46
     982:	0d b4       	in	r0, 0x2d	; 45
     984:	07 fe       	sbrs	r0, 7
     986:	fd cf       	rjmp	.-6      	; 0x982 <DataflashManager_WriteBlocks+0x214>
     988:	f2 01       	movw	r30, r4
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     98a:	80 ad       	sts	0x60, r24
				while (!(SPSR & (1 << SPIF)));
     98c:	88 23       	and	r24, r24
     98e:	49 f5       	brne	.+82     	; 0x9e2 <DataflashManager_WriteBlocks+0x274>
     990:	4f 5f       	subi	r20, 0xFF	; 255
     992:	aa 94       	dec	r10
     994:	09 f0       	breq	.+2      	; 0x998 <DataflashManager_WriteBlocks+0x22a>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     996:	4a cf       	rjmp	.-364    	; 0x82c <DataflashManager_WriteBlocks+0xbe>
				while (!(SPSR & (1 << SPIF)));
     998:	01 50       	subi	r16, 0x01	; 1
     99a:	10 40       	sbci	r17, 0x00	; 0
     99c:	80 ee       	ldi	r24, 0xE0	; 224

			/* Increment the block 16 byte block counter */
			BytesInBlockDiv16++;

			/* Check if the current command is being aborted by the host */
			if (MSInterfaceInfo->State.IsMassStoreReset)
     99e:	9f ef       	ldi	r25, 0xFF	; 255
     9a0:	c8 0e       	add	r12, r24
     9a2:	d9 1e       	adc	r13, r25
     9a4:	01 15       	cp	r16, r1
			Dataflash_SendByte(Endpoint_Read_8());
			Dataflash_SendByte(Endpoint_Read_8());
			Dataflash_SendByte(Endpoint_Read_8());

			/* Increment the Dataflash page 16 byte block counter */
			CurrDFPageByteDiv16++;
     9a6:	11 05       	cpc	r17, r1
     9a8:	09 f0       	breq	.+2      	; 0x9ac <DataflashManager_WriteBlocks+0x23e>
	while (TotalBlocks)
	{
		uint8_t BytesInBlockDiv16 = 0;

		/* Write an endpoint packet sized data block to the Dataflash */
		while (BytesInBlockDiv16 < (VIRTUAL_MEMORY_BLOCK_SIZE >> 4))
     9aa:	3b cf       	rjmp	.-394    	; 0x822 <DataflashManager_WriteBlocks+0xb4>
     9ac:	a6 de       	rcall	.-692    	; 0x6fa <Dataflash_WaitWhileBusy>
			if (MSInterfaceInfo->State.IsMassStoreReset)
			  return;
		}

		/* Decrement the blocks remaining counter */
		TotalBlocks--;
     9ae:	33 20       	and	r3, r3
     9b0:	11 f0       	breq	.+4      	; 0x9b6 <DataflashManager_WriteBlocks+0x248>
     9b2:	86 e8       	ldi	r24, 0x86	; 134
     9b4:	01 c0       	rjmp	.+2      	; 0x9b8 <DataflashManager_WriteBlocks+0x24a>
     9b6:	83 e8       	ldi	r24, 0x83	; 131
     9b8:	8e bd       	out	0x2e, r24	; 46

	/* Wait until endpoint is ready before continuing */
	if (Endpoint_WaitUntilReady())
	  return;

	while (TotalBlocks)
     9ba:	0d b4       	in	r0, 0x2d	; 45
     9bc:	07 fe       	sbrs	r0, 7
     9be:	fd cf       	rjmp	.-6      	; 0x9ba <DataflashManager_WriteBlocks+0x24c>
     9c0:	c7 01       	movw	r24, r14
		/* Decrement the blocks remaining counter */
		TotalBlocks--;
	}

	/* Write the Dataflash buffer contents back to the Dataflash page */
	Dataflash_WaitWhileBusy();
     9c2:	60 e0       	ldi	r22, 0x00	; 0
     9c4:	70 e0       	ldi	r23, 0x00	; 0
	Dataflash_SendByte(UsingSecondBuffer ? DF_CMD_BUFF2TOMAINMEMWITHERASE : DF_CMD_BUFF1TOMAINMEMWITHERASE);
     9c6:	a7 de       	rcall	.-690    	; 0x716 <Dataflash_SendAddressBytes>
     9c8:	98 de       	rcall	.-720    	; 0x6fa <Dataflash_WaitWhileBusy>
     9ca:	80 91 e8 00 	lds	r24, 0x00E8
     9ce:	85 fd       	sbrc	r24, 5
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     9d0:	05 c0       	rjmp	.+10     	; 0x9dc <DataflashManager_WriteBlocks+0x26e>
				while (!(SPSR & (1 << SPIF)));
     9d2:	80 91 e8 00 	lds	r24, 0x00E8
     9d6:	8b 77       	andi	r24, 0x7B	; 123
	Dataflash_SendAddressBytes(CurrDFPage, 0x00);
     9d8:	80 93 e8 00 	sts	0x00E8, r24
     9dc:	8e b1       	in	r24, 0x0e	; 14
     9de:	83 60       	ori	r24, 0x03	; 3
     9e0:	8e b9       	out	0x0e, r24	; 14
	Dataflash_WaitWhileBusy();
     9e2:	0f 90       	pop	r0
     9e4:	df 91       	pop	r29
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
     9e6:	cf 91       	pop	r28
     9e8:	1f 91       	pop	r17

	/* If the endpoint is empty, clear it ready for the next packet from the host */
	if (!(Endpoint_IsReadWriteAllowed()))
     9ea:	0f 91       	pop	r16
     9ec:	ff 90       	pop	r15
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     9ee:	ef 90       	pop	r14
     9f0:	df 90       	pop	r13
     9f2:	cf 90       	pop	r12
     9f4:	bf 90       	pop	r11
     9f6:	af 90       	pop	r10
			 *              the chip number).
			 */
			static inline void Dataflash_SelectChip(const uint8_t ChipMask) ATTR_ALWAYS_INLINE;
			static inline void Dataflash_SelectChip(const uint8_t ChipMask)
			{
				DATAFLASH_CHIPCS_PORT = ((DATAFLASH_CHIPCS_PORT | DATAFLASH_CHIPCS_MASK) & ~ChipMask);
     9f8:	9f 90       	pop	r9
     9fa:	8f 90       	pop	r8
     9fc:	7f 90       	pop	r7
	  Endpoint_ClearOUT();

	/* Deselect all Dataflash chips */
	Dataflash_DeselectChip();
}
     9fe:	6f 90       	pop	r6
     a00:	5f 90       	pop	r5
     a02:	4f 90       	pop	r4
     a04:	3f 90       	pop	r3
     a06:	08 95       	ret

00000a08 <DataflashManager_ReadBlocks>:
     a08:	bf 92       	push	r11
     a0a:	cf 92       	push	r12
     a0c:	df 92       	push	r13
     a0e:	ef 92       	push	r14
     a10:	ff 92       	push	r15
     a12:	0f 93       	push	r16
     a14:	1f 93       	push	r17
     a16:	cf 93       	push	r28
     a18:	df 93       	push	r29
     a1a:	6c 01       	movw	r12, r24
     a1c:	79 01       	movw	r14, r18
     a1e:	db 01       	movw	r26, r22
     a20:	ca 01       	movw	r24, r20
     a22:	e9 e0       	ldi	r30, 0x09	; 9
 */
void DataflashManager_ReadBlocks(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo,
                                 const uint32_t BlockAddress,
                                 uint16_t TotalBlocks)
{
	uint16_t CurrDFPage          = ((BlockAddress * VIRTUAL_MEMORY_BLOCK_SIZE) / DATAFLASH_PAGE_SIZE);
     a24:	88 0f       	add	r24, r24
     a26:	99 1f       	adc	r25, r25
     a28:	aa 1f       	adc	r26, r26
     a2a:	bb 1f       	adc	r27, r27
     a2c:	ea 95       	dec	r30
     a2e:	d1 f7       	brne	.-12     	; 0xa24 <DataflashManager_ReadBlocks+0x1c>
     a30:	fa e0       	ldi	r31, 0x0A	; 10
     a32:	b6 95       	lsr	r27
     a34:	a7 95       	ror	r26
     a36:	97 95       	ror	r25
     a38:	87 95       	ror	r24
     a3a:	fa 95       	dec	r31
     a3c:	d1 f7       	brne	.-12     	; 0xa32 <DataflashManager_ReadBlocks+0x2a>
     a3e:	8c 01       	movw	r16, r24
	uint16_t CurrDFPageByte      = ((BlockAddress * VIRTUAL_MEMORY_BLOCK_SIZE) % DATAFLASH_PAGE_SIZE);
     a40:	ea 01       	movw	r28, r20
     a42:	dc 2f       	mov	r29, r28
     a44:	cc 27       	eor	r28, r28
     a46:	dd 0f       	add	r29, r29
     a48:	d3 70       	andi	r29, 0x03	; 3
	uint8_t  CurrDFPageByteDiv16 = (CurrDFPageByte >> 4);

	/* Select the correct starting Dataflash IC for the block requested */
	Dataflash_SelectChipFromPage(CurrDFPage);
     a4a:	7e de       	rcall	.-772    	; 0x748 <Dataflash_SelectChipFromPage>
     a4c:	82 ed       	ldi	r24, 0xD2	; 210
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     a4e:	8e bd       	out	0x2e, r24	; 46
     a50:	0d b4       	in	r0, 0x2d	; 45
				while (!(SPSR & (1 << SPIF)));
     a52:	07 fe       	sbrs	r0, 7
     a54:	fd cf       	rjmp	.-6      	; 0xa50 <DataflashManager_ReadBlocks+0x48>
     a56:	c8 01       	movw	r24, r16

	/* Send the Dataflash main memory page read command */
	Dataflash_SendByte(DF_CMD_MAINMEMPAGEREAD);
	Dataflash_SendAddressBytes(CurrDFPage, CurrDFPageByte);
     a58:	be 01       	movw	r22, r28
     a5a:	5d de       	rcall	.-838    	; 0x716 <Dataflash_SendAddressBytes>
     a5c:	1e bc       	out	0x2e, r1	; 46
     a5e:	0d b4       	in	r0, 0x2d	; 45
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     a60:	07 fe       	sbrs	r0, 7
				while (!(SPSR & (1 << SPIF)));
     a62:	fd cf       	rjmp	.-6      	; 0xa5e <DataflashManager_ReadBlocks+0x56>
     a64:	1e bc       	out	0x2e, r1	; 46
     a66:	0d b4       	in	r0, 0x2d	; 45
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     a68:	07 fe       	sbrs	r0, 7
				while (!(SPSR & (1 << SPIF)));
     a6a:	fd cf       	rjmp	.-6      	; 0xa66 <DataflashManager_ReadBlocks+0x5e>
     a6c:	1e bc       	out	0x2e, r1	; 46
     a6e:	0d b4       	in	r0, 0x2d	; 45
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     a70:	07 fe       	sbrs	r0, 7
				while (!(SPSR & (1 << SPIF)));
     a72:	fd cf       	rjmp	.-6      	; 0xa6e <DataflashManager_ReadBlocks+0x66>
     a74:	1e bc       	out	0x2e, r1	; 46
     a76:	0d b4       	in	r0, 0x2d	; 45
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     a78:	07 fe       	sbrs	r0, 7
				while (!(SPSR & (1 << SPIF)));
     a7a:	fd cf       	rjmp	.-6      	; 0xa76 <DataflashManager_ReadBlocks+0x6e>
     a7c:	0e 94 de 1c 	call	0x39bc	; 0x39bc <Endpoint_WaitUntilReady>
	Dataflash_SendByte(0x00);
	Dataflash_SendByte(0x00);
	Dataflash_SendByte(0x00);

	/* Wait until endpoint is ready before continuing */
	if (Endpoint_WaitUntilReady())
     a80:	88 23       	and	r24, r24
     a82:	09 f0       	breq	.+2      	; 0xa86 <DataflashManager_ReadBlocks+0x7e>
     a84:	c1 c0       	rjmp	.+386    	; 0xc08 <DataflashManager_ReadBlocks+0x200>
     a86:	34 e0       	ldi	r19, 0x04	; 4
     a88:	d6 95       	lsr	r29
                                 const uint32_t BlockAddress,
                                 uint16_t TotalBlocks)
{
	uint16_t CurrDFPage          = ((BlockAddress * VIRTUAL_MEMORY_BLOCK_SIZE) / DATAFLASH_PAGE_SIZE);
	uint16_t CurrDFPageByte      = ((BlockAddress * VIRTUAL_MEMORY_BLOCK_SIZE) % DATAFLASH_PAGE_SIZE);
	uint8_t  CurrDFPageByteDiv16 = (CurrDFPageByte >> 4);
     a8a:	c7 95       	ror	r28
     a8c:	3a 95       	dec	r19
     a8e:	e1 f7       	brne	.-8      	; 0xa88 <DataflashManager_ReadBlocks+0x80>
     a90:	42 ed       	ldi	r20, 0xD2	; 210
     a92:	b4 2e       	mov	r11, r20
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     a94:	a9 c0       	rjmp	.+338    	; 0xbe8 <DataflashManager_ReadBlocks+0x1e0>
     a96:	d0 e2       	ldi	r29, 0x20	; 32
     a98:	80 91 e8 00 	lds	r24, 0x00E8
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
     a9c:	85 fd       	sbrc	r24, 5
     a9e:	0a c0       	rjmp	.+20     	; 0xab4 <DataflashManager_ReadBlocks+0xac>

		/* Write an endpoint packet sized data block to the Dataflash */
		while (BytesInBlockDiv16 < (VIRTUAL_MEMORY_BLOCK_SIZE >> 4))
		{
			/* Check if the endpoint is currently full */
			if (!(Endpoint_IsReadWriteAllowed()))
     aa0:	80 91 e8 00 	lds	r24, 0x00E8
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     aa4:	8e 77       	andi	r24, 0x7E	; 126
     aa6:	80 93 e8 00 	sts	0x00E8, r24
     aaa:	0e 94 de 1c 	call	0x39bc	; 0x39bc <Endpoint_WaitUntilReady>
			{
				/* Clear the endpoint bank to send its contents to the host */
				Endpoint_ClearIN();

				/* Wait until the endpoint is ready for more data */
				if (Endpoint_WaitUntilReady())
     aae:	88 23       	and	r24, r24
     ab0:	09 f0       	breq	.+2      	; 0xab4 <DataflashManager_ReadBlocks+0xac>
     ab2:	aa c0       	rjmp	.+340    	; 0xc08 <DataflashManager_ReadBlocks+0x200>
     ab4:	c0 34       	cpi	r28, 0x40	; 64
     ab6:	e9 f4       	brne	.+58     	; 0xaf2 <DataflashManager_ReadBlocks+0xea>
				  return;
			}

			/* Check if end of Dataflash page reached */
			if (CurrDFPageByteDiv16 == (DATAFLASH_PAGE_SIZE >> 4))
     ab8:	0f 5f       	subi	r16, 0xFF	; 255
     aba:	1f 4f       	sbci	r17, 0xFF	; 255
			{
				/* Reset the Dataflash buffer counter, increment the page counter */
				CurrDFPageByteDiv16 = 0;
				CurrDFPage++;
     abc:	c8 01       	movw	r24, r16
     abe:	44 de       	rcall	.-888    	; 0x748 <Dataflash_SelectChipFromPage>

				/* Select the next Dataflash chip based on the new Dataflash page index */
				Dataflash_SelectChipFromPage(CurrDFPage);
     ac0:	be bc       	out	0x2e, r11	; 46
     ac2:	0d b4       	in	r0, 0x2d	; 45
     ac4:	07 fe       	sbrs	r0, 7
     ac6:	fd cf       	rjmp	.-6      	; 0xac2 <DataflashManager_ReadBlocks+0xba>
				while (!(SPSR & (1 << SPIF)));
     ac8:	c8 01       	movw	r24, r16
     aca:	60 e0       	ldi	r22, 0x00	; 0
     acc:	70 e0       	ldi	r23, 0x00	; 0

				/* Send the Dataflash main memory page read command */
				Dataflash_SendByte(DF_CMD_MAINMEMPAGEREAD);
				Dataflash_SendAddressBytes(CurrDFPage, 0);
     ace:	23 de       	rcall	.-954    	; 0x716 <Dataflash_SendAddressBytes>
     ad0:	1e bc       	out	0x2e, r1	; 46
     ad2:	0d b4       	in	r0, 0x2d	; 45
     ad4:	07 fe       	sbrs	r0, 7
     ad6:	fd cf       	rjmp	.-6      	; 0xad2 <DataflashManager_ReadBlocks+0xca>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     ad8:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     ada:	0d b4       	in	r0, 0x2d	; 45
     adc:	07 fe       	sbrs	r0, 7
     ade:	fd cf       	rjmp	.-6      	; 0xada <DataflashManager_ReadBlocks+0xd2>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     ae0:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     ae2:	0d b4       	in	r0, 0x2d	; 45
     ae4:	07 fe       	sbrs	r0, 7
     ae6:	fd cf       	rjmp	.-6      	; 0xae2 <DataflashManager_ReadBlocks+0xda>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     ae8:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     aea:	0d b4       	in	r0, 0x2d	; 45
     aec:	07 fe       	sbrs	r0, 7
     aee:	fd cf       	rjmp	.-6      	; 0xaea <DataflashManager_ReadBlocks+0xe2>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     af0:	c0 e0       	ldi	r28, 0x00	; 0
				while (!(SPSR & (1 << SPIF)));
     af2:	1e bc       	out	0x2e, r1	; 46
     af4:	0d b4       	in	r0, 0x2d	; 45
     af6:	07 fe       	sbrs	r0, 7

			/* Check if end of Dataflash page reached */
			if (CurrDFPageByteDiv16 == (DATAFLASH_PAGE_SIZE >> 4))
			{
				/* Reset the Dataflash buffer counter, increment the page counter */
				CurrDFPageByteDiv16 = 0;
     af8:	fd cf       	rjmp	.-6      	; 0xaf4 <DataflashManager_ReadBlocks+0xec>
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     afa:	8e b5       	in	r24, 0x2e	; 46
				while (!(SPSR & (1 << SPIF)));
     afc:	80 93 f1 00 	sts	0x00F1, r24
     b00:	1e bc       	out	0x2e, r1	; 46
				return SPDR;
     b02:	0d b4       	in	r0, 0x2d	; 45
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     b04:	07 fe       	sbrs	r0, 7
     b06:	fd cf       	rjmp	.-6      	; 0xb02 <DataflashManager_ReadBlocks+0xfa>
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     b08:	8e b5       	in	r24, 0x2e	; 46
				while (!(SPSR & (1 << SPIF)));
     b0a:	80 93 f1 00 	sts	0x00F1, r24
     b0e:	1e bc       	out	0x2e, r1	; 46
				return SPDR;
     b10:	0d b4       	in	r0, 0x2d	; 45
     b12:	07 fe       	sbrs	r0, 7
     b14:	fd cf       	rjmp	.-6      	; 0xb10 <DataflashManager_ReadBlocks+0x108>
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     b16:	8e b5       	in	r24, 0x2e	; 46
				while (!(SPSR & (1 << SPIF)));
     b18:	80 93 f1 00 	sts	0x00F1, r24
     b1c:	1e bc       	out	0x2e, r1	; 46
				return SPDR;
     b1e:	0d b4       	in	r0, 0x2d	; 45
     b20:	07 fe       	sbrs	r0, 7
     b22:	fd cf       	rjmp	.-6      	; 0xb1e <DataflashManager_ReadBlocks+0x116>
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     b24:	8e b5       	in	r24, 0x2e	; 46
				while (!(SPSR & (1 << SPIF)));
     b26:	80 93 f1 00 	sts	0x00F1, r24
     b2a:	1e bc       	out	0x2e, r1	; 46
				return SPDR;
     b2c:	0d b4       	in	r0, 0x2d	; 45
     b2e:	07 fe       	sbrs	r0, 7
     b30:	fd cf       	rjmp	.-6      	; 0xb2c <DataflashManager_ReadBlocks+0x124>
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     b32:	8e b5       	in	r24, 0x2e	; 46
				while (!(SPSR & (1 << SPIF)));
     b34:	80 93 f1 00 	sts	0x00F1, r24
     b38:	1e bc       	out	0x2e, r1	; 46
				return SPDR;
     b3a:	0d b4       	in	r0, 0x2d	; 45
     b3c:	07 fe       	sbrs	r0, 7
     b3e:	fd cf       	rjmp	.-6      	; 0xb3a <DataflashManager_ReadBlocks+0x132>
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     b40:	8e b5       	in	r24, 0x2e	; 46
				while (!(SPSR & (1 << SPIF)));
     b42:	80 93 f1 00 	sts	0x00F1, r24
     b46:	1e bc       	out	0x2e, r1	; 46
				return SPDR;
     b48:	0d b4       	in	r0, 0x2d	; 45
     b4a:	07 fe       	sbrs	r0, 7
     b4c:	fd cf       	rjmp	.-6      	; 0xb48 <DataflashManager_ReadBlocks+0x140>
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     b4e:	8e b5       	in	r24, 0x2e	; 46
				while (!(SPSR & (1 << SPIF)));
     b50:	80 93 f1 00 	sts	0x00F1, r24
     b54:	1e bc       	out	0x2e, r1	; 46
				return SPDR;
     b56:	0d b4       	in	r0, 0x2d	; 45
     b58:	07 fe       	sbrs	r0, 7
     b5a:	fd cf       	rjmp	.-6      	; 0xb56 <DataflashManager_ReadBlocks+0x14e>
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     b5c:	8e b5       	in	r24, 0x2e	; 46
				while (!(SPSR & (1 << SPIF)));
     b5e:	80 93 f1 00 	sts	0x00F1, r24
     b62:	1e bc       	out	0x2e, r1	; 46
				return SPDR;
     b64:	0d b4       	in	r0, 0x2d	; 45
     b66:	07 fe       	sbrs	r0, 7
     b68:	fd cf       	rjmp	.-6      	; 0xb64 <DataflashManager_ReadBlocks+0x15c>
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     b6a:	8e b5       	in	r24, 0x2e	; 46
				while (!(SPSR & (1 << SPIF)));
     b6c:	80 93 f1 00 	sts	0x00F1, r24
     b70:	1e bc       	out	0x2e, r1	; 46
				return SPDR;
     b72:	0d b4       	in	r0, 0x2d	; 45
     b74:	07 fe       	sbrs	r0, 7
     b76:	fd cf       	rjmp	.-6      	; 0xb72 <DataflashManager_ReadBlocks+0x16a>
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     b78:	8e b5       	in	r24, 0x2e	; 46
				while (!(SPSR & (1 << SPIF)));
     b7a:	80 93 f1 00 	sts	0x00F1, r24
     b7e:	1e bc       	out	0x2e, r1	; 46
				return SPDR;
     b80:	0d b4       	in	r0, 0x2d	; 45
     b82:	07 fe       	sbrs	r0, 7
     b84:	fd cf       	rjmp	.-6      	; 0xb80 <DataflashManager_ReadBlocks+0x178>
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     b86:	8e b5       	in	r24, 0x2e	; 46
				while (!(SPSR & (1 << SPIF)));
     b88:	80 93 f1 00 	sts	0x00F1, r24
     b8c:	1e bc       	out	0x2e, r1	; 46
				return SPDR;
     b8e:	0d b4       	in	r0, 0x2d	; 45
     b90:	07 fe       	sbrs	r0, 7
     b92:	fd cf       	rjmp	.-6      	; 0xb8e <DataflashManager_ReadBlocks+0x186>
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     b94:	8e b5       	in	r24, 0x2e	; 46
				while (!(SPSR & (1 << SPIF)));
     b96:	80 93 f1 00 	sts	0x00F1, r24
     b9a:	1e bc       	out	0x2e, r1	; 46
				return SPDR;
     b9c:	0d b4       	in	r0, 0x2d	; 45
     b9e:	07 fe       	sbrs	r0, 7
     ba0:	fd cf       	rjmp	.-6      	; 0xb9c <DataflashManager_ReadBlocks+0x194>
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     ba2:	8e b5       	in	r24, 0x2e	; 46
				while (!(SPSR & (1 << SPIF)));
     ba4:	80 93 f1 00 	sts	0x00F1, r24
     ba8:	1e bc       	out	0x2e, r1	; 46
				return SPDR;
     baa:	0d b4       	in	r0, 0x2d	; 45
     bac:	07 fe       	sbrs	r0, 7
     bae:	fd cf       	rjmp	.-6      	; 0xbaa <DataflashManager_ReadBlocks+0x1a2>
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     bb0:	8e b5       	in	r24, 0x2e	; 46
				while (!(SPSR & (1 << SPIF)));
     bb2:	80 93 f1 00 	sts	0x00F1, r24
     bb6:	1e bc       	out	0x2e, r1	; 46
				return SPDR;
     bb8:	0d b4       	in	r0, 0x2d	; 45
     bba:	07 fe       	sbrs	r0, 7
     bbc:	fd cf       	rjmp	.-6      	; 0xbb8 <DataflashManager_ReadBlocks+0x1b0>
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     bbe:	8e b5       	in	r24, 0x2e	; 46
				while (!(SPSR & (1 << SPIF)));
     bc0:	80 93 f1 00 	sts	0x00F1, r24
     bc4:	1e bc       	out	0x2e, r1	; 46
				return SPDR;
     bc6:	0d b4       	in	r0, 0x2d	; 45
     bc8:	07 fe       	sbrs	r0, 7
     bca:	fd cf       	rjmp	.-6      	; 0xbc6 <DataflashManager_ReadBlocks+0x1be>
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     bcc:	8e b5       	in	r24, 0x2e	; 46
				while (!(SPSR & (1 << SPIF)));
     bce:	80 93 f1 00 	sts	0x00F1, r24
     bd2:	f6 01       	movw	r30, r12
				return SPDR;
     bd4:	80 ad       	sts	0x60, r24
     bd6:	88 23       	and	r24, r24
     bd8:	b9 f4       	brne	.+46     	; 0xc08 <DataflashManager_ReadBlocks+0x200>

			/* Increment the block 16 byte block counter */
			BytesInBlockDiv16++;

			/* Check if the current command is being aborted by the host */
			if (MSInterfaceInfo->State.IsMassStoreReset)
     bda:	cf 5f       	subi	r28, 0xFF	; 255
     bdc:	d1 50       	subi	r29, 0x01	; 1
     bde:	09 f0       	breq	.+2      	; 0xbe2 <DataflashManager_ReadBlocks+0x1da>
     be0:	5b cf       	rjmp	.-330    	; 0xa98 <DataflashManager_ReadBlocks+0x90>
			Endpoint_Write_8(Dataflash_ReceiveByte());
			Endpoint_Write_8(Dataflash_ReceiveByte());
			Endpoint_Write_8(Dataflash_ReceiveByte());

			/* Increment the Dataflash page 16 byte block counter */
			CurrDFPageByteDiv16++;
     be2:	08 94       	sec
     be4:	e1 08       	sbc	r14, r1
	while (TotalBlocks)
	{
		uint8_t BytesInBlockDiv16 = 0;

		/* Write an endpoint packet sized data block to the Dataflash */
		while (BytesInBlockDiv16 < (VIRTUAL_MEMORY_BLOCK_SIZE >> 4))
     be6:	f1 08       	sbc	r15, r1
     be8:	e1 14       	cp	r14, r1
			if (MSInterfaceInfo->State.IsMassStoreReset)
			  return;
		}

		/* Decrement the blocks remaining counter */
		TotalBlocks--;
     bea:	f1 04       	cpc	r15, r1
     bec:	09 f0       	breq	.+2      	; 0xbf0 <DataflashManager_ReadBlocks+0x1e8>
     bee:	53 cf       	rjmp	.-346    	; 0xa96 <DataflashManager_ReadBlocks+0x8e>

	/* Wait until endpoint is ready before continuing */
	if (Endpoint_WaitUntilReady())
	  return;

	while (TotalBlocks)
     bf0:	80 91 e8 00 	lds	r24, 0x00E8
     bf4:	85 fd       	sbrc	r24, 5
     bf6:	05 c0       	rjmp	.+10     	; 0xc02 <DataflashManager_ReadBlocks+0x1fa>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
     bf8:	80 91 e8 00 	lds	r24, 0x00E8
		/* Decrement the blocks remaining counter */
		TotalBlocks--;
	}

	/* If the endpoint is full, send its contents to the host */
	if (!(Endpoint_IsReadWriteAllowed()))
     bfc:	8e 77       	andi	r24, 0x7E	; 126
     bfe:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     c02:	8e b1       	in	r24, 0x0e	; 14
     c04:	83 60       	ori	r24, 0x03	; 3
     c06:	8e b9       	out	0x0e, r24	; 14
     c08:	df 91       	pop	r29
     c0a:	cf 91       	pop	r28
     c0c:	1f 91       	pop	r17
     c0e:	0f 91       	pop	r16
	  Endpoint_ClearIN();

	/* Deselect all Dataflash chips */
	Dataflash_DeselectChip();
}
     c10:	ff 90       	pop	r15
     c12:	ef 90       	pop	r14
     c14:	df 90       	pop	r13
     c16:	cf 90       	pop	r12
     c18:	bf 90       	pop	r11
     c1a:	08 95       	ret

00000c1c <DataflashManager_WriteBlocks_RAM>:
     c1c:	2f 92       	push	r2
     c1e:	3f 92       	push	r3
     c20:	4f 92       	push	r4
     c22:	5f 92       	push	r5
 *  \param[in] BufferPtr     Pointer to the data source RAM buffer
 */
void DataflashManager_WriteBlocks_RAM(const uint32_t BlockAddress,
                                      uint16_t TotalBlocks,
                                      const uint8_t* BufferPtr)
{
     c24:	6f 92       	push	r6
     c26:	7f 92       	push	r7
     c28:	8f 92       	push	r8
     c2a:	9f 92       	push	r9
     c2c:	af 92       	push	r10
     c2e:	bf 92       	push	r11
     c30:	cf 92       	push	r12
     c32:	df 92       	push	r13
     c34:	ef 92       	push	r14
     c36:	ff 92       	push	r15
     c38:	0f 93       	push	r16
     c3a:	1f 93       	push	r17
     c3c:	cf 93       	push	r28
     c3e:	df 93       	push	r29
     c40:	dc 01       	movw	r26, r24
     c42:	cb 01       	movw	r24, r22
     c44:	84 2e       	mov	r8, r20
     c46:	a5 2e       	mov	r10, r21
     c48:	39 01       	movw	r6, r18
	uint16_t CurrDFPage          = ((BlockAddress * VIRTUAL_MEMORY_BLOCK_SIZE) / DATAFLASH_PAGE_SIZE);
     c4a:	ac 01       	movw	r20, r24
     c4c:	bd 01       	movw	r22, r26
     c4e:	c9 e0       	ldi	r28, 0x09	; 9
     c50:	44 0f       	add	r20, r20
     c52:	55 1f       	adc	r21, r21
     c54:	66 1f       	adc	r22, r22
     c56:	77 1f       	adc	r23, r23
     c58:	ca 95       	dec	r28
     c5a:	d1 f7       	brne	.-12     	; 0xc50 <DataflashManager_WriteBlocks_RAM+0x34>
     c5c:	da e0       	ldi	r29, 0x0A	; 10
     c5e:	76 95       	lsr	r23
     c60:	67 95       	ror	r22
     c62:	57 95       	ror	r21
     c64:	47 95       	ror	r20
     c66:	da 95       	dec	r29
     c68:	d1 f7       	brne	.-12     	; 0xc5e <DataflashManager_WriteBlocks_RAM+0x42>
     c6a:	6a 01       	movw	r12, r20
	uint16_t CurrDFPageByte      = ((BlockAddress * VIRTUAL_MEMORY_BLOCK_SIZE) % DATAFLASH_PAGE_SIZE);
     c6c:	ec 01       	movw	r28, r24
     c6e:	dc 2f       	mov	r29, r28
     c70:	cc 27       	eor	r28, r28
     c72:	dd 0f       	add	r29, r29
     c74:	d3 70       	andi	r29, 0x03	; 3
	uint8_t  CurrDFPageByteDiv16 = (CurrDFPageByte >> 4);
     c76:	ce 01       	movw	r24, r28
     c78:	04 e0       	ldi	r16, 0x04	; 4
     c7a:	96 95       	lsr	r25
     c7c:	87 95       	ror	r24
     c7e:	0a 95       	dec	r16
     c80:	e1 f7       	brne	.-8      	; 0xc7a <DataflashManager_WriteBlocks_RAM+0x5e>
     c82:	f8 2e       	mov	r15, r24
	bool     UsingSecondBuffer   = false;

	/* Select the correct starting Dataflash IC for the block requested */
	Dataflash_SelectChipFromPage(CurrDFPage);
     c84:	ca 01       	movw	r24, r20
     c86:	60 dd       	rcall	.-1344   	; 0x748 <Dataflash_SelectChipFromPage>
     c88:	83 e5       	ldi	r24, 0x53	; 83
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     c8a:	8e bd       	out	0x2e, r24	; 46
     c8c:	0d b4       	in	r0, 0x2d	; 45
				while (!(SPSR & (1 << SPIF)));
     c8e:	07 fe       	sbrs	r0, 7
     c90:	fd cf       	rjmp	.-6      	; 0xc8c <DataflashManager_WriteBlocks_RAM+0x70>
     c92:	c6 01       	movw	r24, r12

#if (DATAFLASH_PAGE_SIZE > VIRTUAL_MEMORY_BLOCK_SIZE)
	/* Copy selected dataflash's current page contents to the Dataflash buffer */
	Dataflash_SendByte(DF_CMD_MAINMEMTOBUFF1);
	Dataflash_SendAddressBytes(CurrDFPage, 0);
     c94:	60 e0       	ldi	r22, 0x00	; 0
     c96:	70 e0       	ldi	r23, 0x00	; 0
     c98:	3e dd       	rcall	.-1412   	; 0x716 <Dataflash_SendAddressBytes>
     c9a:	2f dd       	rcall	.-1442   	; 0x6fa <Dataflash_WaitWhileBusy>
     c9c:	84 e8       	ldi	r24, 0x84	; 132
	Dataflash_WaitWhileBusy();
     c9e:	8e bd       	out	0x2e, r24	; 46
     ca0:	0d b4       	in	r0, 0x2d	; 45
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     ca2:	07 fe       	sbrs	r0, 7
     ca4:	fd cf       	rjmp	.-6      	; 0xca0 <DataflashManager_WriteBlocks_RAM+0x84>
				while (!(SPSR & (1 << SPIF)));
     ca6:	80 e0       	ldi	r24, 0x00	; 0
     ca8:	90 e0       	ldi	r25, 0x00	; 0
     caa:	be 01       	movw	r22, r28
#endif

	/* Send the Dataflash buffer write command */
	Dataflash_SendByte(DF_CMD_BUFF1WRITE);
	Dataflash_SendAddressBytes(0, CurrDFPageByte);
     cac:	34 dd       	rcall	.-1432   	; 0x716 <Dataflash_SendAddressBytes>
     cae:	08 2d       	mov	r16, r8
     cb0:	1a 2d       	mov	r17, r10
     cb2:	88 24       	eor	r8, r8
     cb4:	99 24       	eor	r9, r9

	while (TotalBlocks)
     cb6:	c0 e0       	ldi	r28, 0x00	; 0
     cb8:	18 01       	movw	r2, r16
     cba:	b5 e0       	ldi	r27, 0x05	; 5
     cbc:	22 0c       	add	r2, r2
                                      const uint8_t* BufferPtr)
{
	uint16_t CurrDFPage          = ((BlockAddress * VIRTUAL_MEMORY_BLOCK_SIZE) / DATAFLASH_PAGE_SIZE);
	uint16_t CurrDFPageByte      = ((BlockAddress * VIRTUAL_MEMORY_BLOCK_SIZE) % DATAFLASH_PAGE_SIZE);
	uint8_t  CurrDFPageByteDiv16 = (CurrDFPageByte >> 4);
	bool     UsingSecondBuffer   = false;
     cbe:	33 1c       	adc	r3, r3
 *
 *  \param[in] BlockAddress  Data block starting address for the write sequence
 *  \param[in] TotalBlocks   Number of blocks of data to write
 *  \param[in] BufferPtr     Pointer to the data source RAM buffer
 */
void DataflashManager_WriteBlocks_RAM(const uint32_t BlockAddress,
     cc0:	ba 95       	dec	r27
     cc2:	e1 f7       	brne	.-8      	; 0xcbc <DataflashManager_WriteBlocks_RAM+0xa0>
     cc4:	ee 24       	eor	r14, r14
     cc6:	e3 94       	inc	r14
     cc8:	60 c0       	rjmp	.+192    	; 0xd8a <DataflashManager_WriteBlocks_RAM+0x16e>
     cca:	53 01       	movw	r10, r6
				CurrDFPageByteDiv16 = 0;
				CurrDFPage++;

				/* Once all the Dataflash ICs have had their first buffers filled, switch buffers to maintain throughput */
				if (Dataflash_GetSelectedChip() == DATAFLASH_CHIP_MASK(DATAFLASH_TOTALCHIPS))
				  UsingSecondBuffer = !(UsingSecondBuffer);
     ccc:	d0 e2       	ldi	r29, 0x20	; 32
     cce:	24 01       	movw	r4, r8

	/* Send the Dataflash buffer write command */
	Dataflash_SendByte(DF_CMD_BUFF1WRITE);
	Dataflash_SendAddressBytes(0, CurrDFPageByte);

	while (TotalBlocks)
     cd0:	42 0c       	add	r4, r2
     cd2:	53 1c       	adc	r5, r3
     cd4:	80 e4       	ldi	r24, 0x40	; 64
				/* Select the next Dataflash chip based on the new Dataflash page index */
				Dataflash_SelectChipFromPage(CurrDFPage);

#if (DATAFLASH_PAGE_SIZE > VIRTUAL_MEMORY_BLOCK_SIZE)
				/* If less than one Dataflash page remaining, copy over the existing page to preserve trailing data */
				if ((TotalBlocks * (VIRTUAL_MEMORY_BLOCK_SIZE >> 4)) < (DATAFLASH_PAGE_SIZE >> 4))
     cd6:	f8 16       	cp	r15, r24
     cd8:	09 f0       	breq	.+2      	; 0xcdc <DataflashManager_WriteBlocks_RAM+0xc0>
     cda:	3c c0       	rjmp	.+120    	; 0xd54 <DataflashManager_WriteBlocks_RAM+0x138>

		/* Write an endpoint packet sized data block to the Dataflash */
		while (BytesInBlockDiv16 < (VIRTUAL_MEMORY_BLOCK_SIZE >> 4))
		{
			/* Check if end of Dataflash page reached */
			if (CurrDFPageByteDiv16 == (DATAFLASH_PAGE_SIZE >> 4))
     cdc:	0e dd       	rcall	.-1508   	; 0x6fa <Dataflash_WaitWhileBusy>
     cde:	cc 23       	and	r28, r28
     ce0:	11 f0       	breq	.+4      	; 0xce6 <DataflashManager_WriteBlocks_RAM+0xca>
     ce2:	86 e8       	ldi	r24, 0x86	; 134
			{
				/* Write the Dataflash buffer contents back to the Dataflash page */
				Dataflash_WaitWhileBusy();
     ce4:	01 c0       	rjmp	.+2      	; 0xce8 <DataflashManager_WriteBlocks_RAM+0xcc>
     ce6:	83 e8       	ldi	r24, 0x83	; 131
				Dataflash_SendByte(UsingSecondBuffer ? DF_CMD_BUFF2TOMAINMEMWITHERASE : DF_CMD_BUFF1TOMAINMEMWITHERASE);
     ce8:	8e bd       	out	0x2e, r24	; 46
     cea:	0d b4       	in	r0, 0x2d	; 45
     cec:	07 fe       	sbrs	r0, 7
     cee:	fd cf       	rjmp	.-6      	; 0xcea <DataflashManager_WriteBlocks_RAM+0xce>
     cf0:	c6 01       	movw	r24, r12
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     cf2:	60 e0       	ldi	r22, 0x00	; 0
				while (!(SPSR & (1 << SPIF)));
     cf4:	70 e0       	ldi	r23, 0x00	; 0
     cf6:	0f dd       	rcall	.-1506   	; 0x716 <Dataflash_SendAddressBytes>
     cf8:	08 94       	sec
				Dataflash_SendAddressBytes(CurrDFPage, 0);
     cfa:	c1 1c       	adc	r12, r1
     cfc:	d1 1c       	adc	r13, r1
     cfe:	8e b1       	in	r24, 0x0e	; 14
     d00:	80 95       	com	r24
     d02:	83 70       	andi	r24, 0x03	; 3

				/* Reset the Dataflash buffer counter, increment the page counter */
				CurrDFPageByteDiv16 = 0;
				CurrDFPage++;
     d04:	82 30       	cpi	r24, 0x02	; 2
     d06:	09 f4       	brne	.+2      	; 0xd0a <DataflashManager_WriteBlocks_RAM+0xee>
     d08:	ce 25       	eor	r28, r14
			 *          or a DATAFLASH_CHIPn mask (where n is the chip number).
			 */
			static inline uint8_t Dataflash_GetSelectedChip(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t Dataflash_GetSelectedChip(void)
			{
				return (~DATAFLASH_CHIPCS_PORT & DATAFLASH_CHIPCS_MASK);
     d0a:	c6 01       	movw	r24, r12
     d0c:	1d dd       	rcall	.-1478   	; 0x748 <Dataflash_SelectChipFromPage>
     d0e:	90 e4       	ldi	r25, 0x40	; 64

				/* Once all the Dataflash ICs have had their first buffers filled, switch buffers to maintain throughput */
				if (Dataflash_GetSelectedChip() == DATAFLASH_CHIP_MASK(DATAFLASH_TOTALCHIPS))
     d10:	49 16       	cp	r4, r25
     d12:	51 04       	cpc	r5, r1
				  UsingSecondBuffer = !(UsingSecondBuffer);
     d14:	78 f4       	brcc	.+30     	; 0xd34 <DataflashManager_WriteBlocks_RAM+0x118>

				/* Select the next Dataflash chip based on the new Dataflash page index */
				Dataflash_SelectChipFromPage(CurrDFPage);
     d16:	f1 dc       	rcall	.-1566   	; 0x6fa <Dataflash_WaitWhileBusy>
     d18:	cc 23       	and	r28, r28
     d1a:	11 f0       	breq	.+4      	; 0xd20 <DataflashManager_WriteBlocks_RAM+0x104>

#if (DATAFLASH_PAGE_SIZE > VIRTUAL_MEMORY_BLOCK_SIZE)
				/* If less than one Dataflash page remaining, copy over the existing page to preserve trailing data */
				if ((TotalBlocks * (VIRTUAL_MEMORY_BLOCK_SIZE >> 4)) < (DATAFLASH_PAGE_SIZE >> 4))
     d1c:	85 e5       	ldi	r24, 0x55	; 85
     d1e:	01 c0       	rjmp	.+2      	; 0xd22 <DataflashManager_WriteBlocks_RAM+0x106>
     d20:	83 e5       	ldi	r24, 0x53	; 83
     d22:	8e bd       	out	0x2e, r24	; 46
				{
					/* Copy selected dataflash's current page contents to the Dataflash buffer */
					Dataflash_WaitWhileBusy();
     d24:	0d b4       	in	r0, 0x2d	; 45
     d26:	07 fe       	sbrs	r0, 7
					Dataflash_SendByte(UsingSecondBuffer ? DF_CMD_MAINMEMTOBUFF2 : DF_CMD_MAINMEMTOBUFF1);
     d28:	fd cf       	rjmp	.-6      	; 0xd24 <DataflashManager_WriteBlocks_RAM+0x108>
     d2a:	c6 01       	movw	r24, r12
     d2c:	60 e0       	ldi	r22, 0x00	; 0
     d2e:	70 e0       	ldi	r23, 0x00	; 0
     d30:	f2 dc       	rcall	.-1564   	; 0x716 <Dataflash_SendAddressBytes>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     d32:	e3 dc       	rcall	.-1594   	; 0x6fa <Dataflash_WaitWhileBusy>
				while (!(SPSR & (1 << SPIF)));
     d34:	d8 dc       	rcall	.-1616   	; 0x6e6 <Dataflash_ToggleSelectedChipCS>
     d36:	cc 23       	and	r28, r28
     d38:	11 f0       	breq	.+4      	; 0xd3e <DataflashManager_WriteBlocks_RAM+0x122>
					Dataflash_SendAddressBytes(CurrDFPage, 0);
     d3a:	87 e8       	ldi	r24, 0x87	; 135
     d3c:	01 c0       	rjmp	.+2      	; 0xd40 <DataflashManager_WriteBlocks_RAM+0x124>
     d3e:	84 e8       	ldi	r24, 0x84	; 132
     d40:	8e bd       	out	0x2e, r24	; 46
     d42:	0d b4       	in	r0, 0x2d	; 45
					Dataflash_WaitWhileBusy();
     d44:	07 fe       	sbrs	r0, 7
     d46:	fd cf       	rjmp	.-6      	; 0xd42 <DataflashManager_WriteBlocks_RAM+0x126>
				}
#endif

				/* Send the Dataflash buffer write command */
				Dataflash_ToggleSelectedChipCS();
     d48:	80 e0       	ldi	r24, 0x00	; 0
     d4a:	90 e0       	ldi	r25, 0x00	; 0
				Dataflash_SendByte(UsingSecondBuffer ? DF_CMD_BUFF2WRITE : DF_CMD_BUFF1WRITE);
     d4c:	60 e0       	ldi	r22, 0x00	; 0
     d4e:	70 e0       	ldi	r23, 0x00	; 0
     d50:	e2 dc       	rcall	.-1596   	; 0x716 <Dataflash_SendAddressBytes>
     d52:	ff 24       	eor	r15, r15
     d54:	f5 01       	movw	r30, r10
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     d56:	80 e1       	ldi	r24, 0x10	; 16
				while (!(SPSR & (1 << SPIF)));
     d58:	91 91       	ld	r25, Z+
     d5a:	9e bd       	out	0x2e, r25	; 46
     d5c:	0d b4       	in	r0, 0x2d	; 45
				Dataflash_SendAddressBytes(0, 0);
     d5e:	07 fe       	sbrs	r0, 7
     d60:	fd cf       	rjmp	.-6      	; 0xd5c <DataflashManager_WriteBlocks_RAM+0x140>
     d62:	81 50       	subi	r24, 0x01	; 1
     d64:	c9 f7       	brne	.-14     	; 0xd58 <DataflashManager_WriteBlocks_RAM+0x13c>
     d66:	80 e1       	ldi	r24, 0x10	; 16
     d68:	90 e0       	ldi	r25, 0x00	; 0
				Dataflash_WaitWhileBusy();
				Dataflash_SendByte(UsingSecondBuffer ? DF_CMD_BUFF2TOMAINMEMWITHERASE : DF_CMD_BUFF1TOMAINMEMWITHERASE);
				Dataflash_SendAddressBytes(CurrDFPage, 0);

				/* Reset the Dataflash buffer counter, increment the page counter */
				CurrDFPageByteDiv16 = 0;
     d6a:	a8 0e       	add	r10, r24
     d6c:	b9 1e       	adc	r11, r25
     d6e:	f3 94       	inc	r15
				Dataflash_SendAddressBytes(0, 0);
			}

			/* Write one 16-byte chunk of data to the Dataflash */
			for (uint8_t ByteNum = 0; ByteNum < 16; ByteNum++)
			  Dataflash_SendByte(*(BufferPtr++));
     d70:	d1 50       	subi	r29, 0x01	; 1
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     d72:	09 f0       	breq	.+2      	; 0xd76 <DataflashManager_WriteBlocks_RAM+0x15a>
				while (!(SPSR & (1 << SPIF)));
     d74:	af cf       	rjmp	.-162    	; 0xcd4 <DataflashManager_WriteBlocks_RAM+0xb8>
     d76:	80 e0       	ldi	r24, 0x00	; 0
     d78:	92 e0       	ldi	r25, 0x02	; 2
     d7a:	68 0e       	add	r6, r24
				Dataflash_SendByte(UsingSecondBuffer ? DF_CMD_BUFF2WRITE : DF_CMD_BUFF1WRITE);
				Dataflash_SendAddressBytes(0, 0);
			}

			/* Write one 16-byte chunk of data to the Dataflash */
			for (uint8_t ByteNum = 0; ByteNum < 16; ByteNum++)
     d7c:	79 1e       	adc	r7, r25
     d7e:	01 50       	subi	r16, 0x01	; 1
     d80:	10 40       	sbci	r17, 0x00	; 0
     d82:	80 ee       	ldi	r24, 0xE0	; 224
     d84:	9f ef       	ldi	r25, 0xFF	; 255
			  Dataflash_SendByte(*(BufferPtr++));

			/* Increment the Dataflash page 16 byte block counter */
			CurrDFPageByteDiv16++;
     d86:	88 0e       	add	r8, r24
     d88:	99 1e       	adc	r9, r25
	while (TotalBlocks)
	{
		uint8_t BytesInBlockDiv16 = 0;

		/* Write an endpoint packet sized data block to the Dataflash */
		while (BytesInBlockDiv16 < (VIRTUAL_MEMORY_BLOCK_SIZE >> 4))
     d8a:	01 15       	cp	r16, r1
     d8c:	11 05       	cpc	r17, r1
     d8e:	09 f0       	breq	.+2      	; 0xd92 <DataflashManager_WriteBlocks_RAM+0x176>
     d90:	9c cf       	rjmp	.-200    	; 0xcca <DataflashManager_WriteBlocks_RAM+0xae>
     d92:	b3 dc       	rcall	.-1690   	; 0x6fa <Dataflash_WaitWhileBusy>
     d94:	cc 23       	and	r28, r28
			/* Increment the block 16 byte block counter */
			BytesInBlockDiv16++;
		}

		/* Decrement the blocks remaining counter */
		TotalBlocks--;
     d96:	11 f0       	breq	.+4      	; 0xd9c <DataflashManager_WriteBlocks_RAM+0x180>
     d98:	86 e8       	ldi	r24, 0x86	; 134
     d9a:	01 c0       	rjmp	.+2      	; 0xd9e <DataflashManager_WriteBlocks_RAM+0x182>
     d9c:	83 e8       	ldi	r24, 0x83	; 131
     d9e:	8e bd       	out	0x2e, r24	; 46
     da0:	0d b4       	in	r0, 0x2d	; 45

	/* Send the Dataflash buffer write command */
	Dataflash_SendByte(DF_CMD_BUFF1WRITE);
	Dataflash_SendAddressBytes(0, CurrDFPageByte);

	while (TotalBlocks)
     da2:	07 fe       	sbrs	r0, 7
     da4:	fd cf       	rjmp	.-6      	; 0xda0 <DataflashManager_WriteBlocks_RAM+0x184>
     da6:	c6 01       	movw	r24, r12
     da8:	60 e0       	ldi	r22, 0x00	; 0
		/* Decrement the blocks remaining counter */
		TotalBlocks--;
	}

	/* Write the Dataflash buffer contents back to the Dataflash page */
	Dataflash_WaitWhileBusy();
     daa:	70 e0       	ldi	r23, 0x00	; 0
     dac:	b4 dc       	rcall	.-1688   	; 0x716 <Dataflash_SendAddressBytes>
	Dataflash_SendByte(UsingSecondBuffer ? DF_CMD_BUFF2TOMAINMEMWITHERASE : DF_CMD_BUFF1TOMAINMEMWITHERASE);
     dae:	a5 dc       	rcall	.-1718   	; 0x6fa <Dataflash_WaitWhileBusy>
     db0:	8e b1       	in	r24, 0x0e	; 14
     db2:	83 60       	ori	r24, 0x03	; 3
     db4:	8e b9       	out	0x0e, r24	; 14
     db6:	df 91       	pop	r29
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     db8:	cf 91       	pop	r28
				while (!(SPSR & (1 << SPIF)));
     dba:	1f 91       	pop	r17
     dbc:	0f 91       	pop	r16
     dbe:	ff 90       	pop	r15
	Dataflash_SendAddressBytes(CurrDFPage, 0x00);
     dc0:	ef 90       	pop	r14
     dc2:	df 90       	pop	r13
     dc4:	cf 90       	pop	r12
     dc6:	bf 90       	pop	r11
     dc8:	af 90       	pop	r10
	Dataflash_WaitWhileBusy();
     dca:	9f 90       	pop	r9
     dcc:	8f 90       	pop	r8
			 *              the chip number).
			 */
			static inline void Dataflash_SelectChip(const uint8_t ChipMask) ATTR_ALWAYS_INLINE;
			static inline void Dataflash_SelectChip(const uint8_t ChipMask)
			{
				DATAFLASH_CHIPCS_PORT = ((DATAFLASH_CHIPCS_PORT | DATAFLASH_CHIPCS_MASK) & ~ChipMask);
     dce:	7f 90       	pop	r7
     dd0:	6f 90       	pop	r6
     dd2:	5f 90       	pop	r5

	/* Deselect all Dataflash chips */
	Dataflash_DeselectChip();
}
     dd4:	4f 90       	pop	r4
     dd6:	3f 90       	pop	r3
     dd8:	2f 90       	pop	r2
     dda:	08 95       	ret

00000ddc <DataflashManager_ReadBlocks_RAM>:
     ddc:	8f 92       	push	r8
     dde:	9f 92       	push	r9
     de0:	af 92       	push	r10
     de2:	bf 92       	push	r11
     de4:	cf 92       	push	r12
     de6:	df 92       	push	r13
     de8:	ef 92       	push	r14
     dea:	ff 92       	push	r15
     dec:	0f 93       	push	r16
     dee:	1f 93       	push	r17
     df0:	cf 93       	push	r28
     df2:	df 93       	push	r29
     df4:	dc 01       	movw	r26, r24
     df6:	cb 01       	movw	r24, r22
     df8:	4a 01       	movw	r8, r20
 *  \param[out] BufferPtr    Pointer to the data destination RAM buffer
 */
void DataflashManager_ReadBlocks_RAM(const uint32_t BlockAddress,
                                     uint16_t TotalBlocks,
                                     uint8_t* BufferPtr)
{
     dfa:	59 01       	movw	r10, r18
	uint16_t CurrDFPage          = ((BlockAddress * VIRTUAL_MEMORY_BLOCK_SIZE) / DATAFLASH_PAGE_SIZE);
     dfc:	ac 01       	movw	r20, r24
     dfe:	bd 01       	movw	r22, r26
     e00:	e9 e0       	ldi	r30, 0x09	; 9
     e02:	44 0f       	add	r20, r20
     e04:	55 1f       	adc	r21, r21
     e06:	66 1f       	adc	r22, r22
     e08:	77 1f       	adc	r23, r23
     e0a:	ea 95       	dec	r30
     e0c:	d1 f7       	brne	.-12     	; 0xe02 <DataflashManager_ReadBlocks_RAM+0x26>
     e0e:	fa e0       	ldi	r31, 0x0A	; 10
     e10:	76 95       	lsr	r23
     e12:	67 95       	ror	r22
     e14:	57 95       	ror	r21
     e16:	47 95       	ror	r20
     e18:	fa 95       	dec	r31
     e1a:	d1 f7       	brne	.-12     	; 0xe10 <DataflashManager_ReadBlocks_RAM+0x34>
     e1c:	6a 01       	movw	r12, r20
	uint16_t CurrDFPageByte      = ((BlockAddress * VIRTUAL_MEMORY_BLOCK_SIZE) % DATAFLASH_PAGE_SIZE);
     e1e:	8c 01       	movw	r16, r24
     e20:	10 2f       	mov	r17, r16
     e22:	00 27       	eor	r16, r16
     e24:	11 0f       	add	r17, r17
     e26:	13 70       	andi	r17, 0x03	; 3
	uint8_t  CurrDFPageByteDiv16 = (CurrDFPageByte >> 4);
     e28:	c8 01       	movw	r24, r16
     e2a:	d4 e0       	ldi	r29, 0x04	; 4
     e2c:	96 95       	lsr	r25
     e2e:	87 95       	ror	r24
     e30:	da 95       	dec	r29
     e32:	e1 f7       	brne	.-8      	; 0xe2c <DataflashManager_ReadBlocks_RAM+0x50>
     e34:	c8 2f       	mov	r28, r24

	/* Select the correct starting Dataflash IC for the block requested */
	Dataflash_SelectChipFromPage(CurrDFPage);
     e36:	ca 01       	movw	r24, r20
     e38:	87 dc       	rcall	.-1778   	; 0x748 <Dataflash_SelectChipFromPage>
     e3a:	82 ed       	ldi	r24, 0xD2	; 210
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     e3c:	8e bd       	out	0x2e, r24	; 46
     e3e:	0d b4       	in	r0, 0x2d	; 45
				while (!(SPSR & (1 << SPIF)));
     e40:	07 fe       	sbrs	r0, 7
     e42:	fd cf       	rjmp	.-6      	; 0xe3e <DataflashManager_ReadBlocks_RAM+0x62>
     e44:	c6 01       	movw	r24, r12

	/* Send the Dataflash main memory page read command */
	Dataflash_SendByte(DF_CMD_MAINMEMPAGEREAD);
	Dataflash_SendAddressBytes(CurrDFPage, CurrDFPageByte);
     e46:	b8 01       	movw	r22, r16
     e48:	66 dc       	rcall	.-1844   	; 0x716 <Dataflash_SendAddressBytes>
     e4a:	1e bc       	out	0x2e, r1	; 46
     e4c:	0d b4       	in	r0, 0x2d	; 45
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     e4e:	07 fe       	sbrs	r0, 7
				while (!(SPSR & (1 << SPIF)));
     e50:	fd cf       	rjmp	.-6      	; 0xe4c <DataflashManager_ReadBlocks_RAM+0x70>
     e52:	1e bc       	out	0x2e, r1	; 46
     e54:	0d b4       	in	r0, 0x2d	; 45
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     e56:	07 fe       	sbrs	r0, 7
				while (!(SPSR & (1 << SPIF)));
     e58:	fd cf       	rjmp	.-6      	; 0xe54 <DataflashManager_ReadBlocks_RAM+0x78>
     e5a:	1e bc       	out	0x2e, r1	; 46
     e5c:	0d b4       	in	r0, 0x2d	; 45
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     e5e:	07 fe       	sbrs	r0, 7
				while (!(SPSR & (1 << SPIF)));
     e60:	fd cf       	rjmp	.-6      	; 0xe5c <DataflashManager_ReadBlocks_RAM+0x80>
     e62:	1e bc       	out	0x2e, r1	; 46
     e64:	0d b4       	in	r0, 0x2d	; 45
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     e66:	07 fe       	sbrs	r0, 7
				while (!(SPSR & (1 << SPIF)));
     e68:	fd cf       	rjmp	.-6      	; 0xe64 <DataflashManager_ReadBlocks_RAM+0x88>
     e6a:	3b c0       	rjmp	.+118    	; 0xee2 <DataflashManager_ReadBlocks_RAM+0x106>
     e6c:	75 01       	movw	r14, r10
     e6e:	00 e2       	ldi	r16, 0x20	; 32
	Dataflash_SendByte(0x00);
	Dataflash_SendByte(0x00);
	Dataflash_SendByte(0x00);
	Dataflash_SendByte(0x00);

	while (TotalBlocks)
     e70:	c0 34       	cpi	r28, 0x40	; 64
     e72:	f1 f4       	brne	.+60     	; 0xeb0 <DataflashManager_ReadBlocks_RAM+0xd4>

		/* Write an endpoint packet sized data block to the Dataflash */
		while (BytesInBlockDiv16 < (VIRTUAL_MEMORY_BLOCK_SIZE >> 4))
		{
			/* Check if end of Dataflash page reached */
			if (CurrDFPageByteDiv16 == (DATAFLASH_PAGE_SIZE >> 4))
     e74:	08 94       	sec
     e76:	c1 1c       	adc	r12, r1
			{
				/* Reset the Dataflash buffer counter, increment the page counter */
				CurrDFPageByteDiv16 = 0;
				CurrDFPage++;
     e78:	d1 1c       	adc	r13, r1
     e7a:	c6 01       	movw	r24, r12
     e7c:	65 dc       	rcall	.-1846   	; 0x748 <Dataflash_SelectChipFromPage>

				/* Select the next Dataflash chip based on the new Dataflash page index */
				Dataflash_SelectChipFromPage(CurrDFPage);
     e7e:	de bd       	out	0x2e, r29	; 46
     e80:	0d b4       	in	r0, 0x2d	; 45
     e82:	07 fe       	sbrs	r0, 7
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     e84:	fd cf       	rjmp	.-6      	; 0xe80 <DataflashManager_ReadBlocks_RAM+0xa4>
				while (!(SPSR & (1 << SPIF)));
     e86:	c6 01       	movw	r24, r12
     e88:	60 e0       	ldi	r22, 0x00	; 0
     e8a:	70 e0       	ldi	r23, 0x00	; 0

				/* Send the Dataflash main memory page read command */
				Dataflash_SendByte(DF_CMD_MAINMEMPAGEREAD);
				Dataflash_SendAddressBytes(CurrDFPage, 0);
     e8c:	44 dc       	rcall	.-1912   	; 0x716 <Dataflash_SendAddressBytes>
     e8e:	1e bc       	out	0x2e, r1	; 46
     e90:	0d b4       	in	r0, 0x2d	; 45
     e92:	07 fe       	sbrs	r0, 7
     e94:	fd cf       	rjmp	.-6      	; 0xe90 <DataflashManager_ReadBlocks_RAM+0xb4>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     e96:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     e98:	0d b4       	in	r0, 0x2d	; 45
     e9a:	07 fe       	sbrs	r0, 7
     e9c:	fd cf       	rjmp	.-6      	; 0xe98 <DataflashManager_ReadBlocks_RAM+0xbc>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     e9e:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     ea0:	0d b4       	in	r0, 0x2d	; 45
     ea2:	07 fe       	sbrs	r0, 7
     ea4:	fd cf       	rjmp	.-6      	; 0xea0 <DataflashManager_ReadBlocks_RAM+0xc4>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     ea6:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     ea8:	0d b4       	in	r0, 0x2d	; 45
     eaa:	07 fe       	sbrs	r0, 7
     eac:	fd cf       	rjmp	.-6      	; 0xea8 <DataflashManager_ReadBlocks_RAM+0xcc>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     eae:	c0 e0       	ldi	r28, 0x00	; 0
				while (!(SPSR & (1 << SPIF)));
     eb0:	f7 01       	movw	r30, r14
     eb2:	80 e1       	ldi	r24, 0x10	; 16
     eb4:	1e bc       	out	0x2e, r1	; 46
		{
			/* Check if end of Dataflash page reached */
			if (CurrDFPageByteDiv16 == (DATAFLASH_PAGE_SIZE >> 4))
			{
				/* Reset the Dataflash buffer counter, increment the page counter */
				CurrDFPageByteDiv16 = 0;
     eb6:	0d b4       	in	r0, 0x2d	; 45
     eb8:	07 fe       	sbrs	r0, 7
     eba:	fd cf       	rjmp	.-6      	; 0xeb6 <DataflashManager_ReadBlocks_RAM+0xda>
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     ebc:	9e b5       	in	r25, 0x2e	; 46
				while (!(SPSR & (1 << SPIF)));
     ebe:	91 93       	st	Z+, r25
     ec0:	81 50       	subi	r24, 0x01	; 1
     ec2:	c1 f7       	brne	.-16     	; 0xeb4 <DataflashManager_ReadBlocks_RAM+0xd8>
				return SPDR;
     ec4:	80 e1       	ldi	r24, 0x10	; 16
				Dataflash_SendByte(0x00);
			}

			/* Read one 16-byte chunk of data from the Dataflash */
			for (uint8_t ByteNum = 0; ByteNum < 16; ByteNum++)
			  *(BufferPtr++) = Dataflash_ReceiveByte();
     ec6:	90 e0       	ldi	r25, 0x00	; 0
     ec8:	e8 0e       	add	r14, r24
				Dataflash_SendByte(0x00);
				Dataflash_SendByte(0x00);
			}

			/* Read one 16-byte chunk of data from the Dataflash */
			for (uint8_t ByteNum = 0; ByteNum < 16; ByteNum++)
     eca:	f9 1e       	adc	r15, r25
     ecc:	cf 5f       	subi	r28, 0xFF	; 255
     ece:	01 50       	subi	r16, 0x01	; 1
     ed0:	79 f6       	brne	.-98     	; 0xe70 <DataflashManager_ReadBlocks_RAM+0x94>
     ed2:	80 e0       	ldi	r24, 0x00	; 0
			  *(BufferPtr++) = Dataflash_ReceiveByte();

			/* Increment the Dataflash page 16 byte block counter */
			CurrDFPageByteDiv16++;
     ed4:	92 e0       	ldi	r25, 0x02	; 2
     ed6:	a8 0e       	add	r10, r24
	while (TotalBlocks)
	{
		uint8_t BytesInBlockDiv16 = 0;

		/* Write an endpoint packet sized data block to the Dataflash */
		while (BytesInBlockDiv16 < (VIRTUAL_MEMORY_BLOCK_SIZE >> 4))
     ed8:	b9 1e       	adc	r11, r25
     eda:	08 94       	sec
     edc:	81 08       	sbc	r8, r1
     ede:	91 08       	sbc	r9, r1
     ee0:	01 c0       	rjmp	.+2      	; 0xee4 <DataflashManager_ReadBlocks_RAM+0x108>
			/* Increment the block 16 byte block counter */
			BytesInBlockDiv16++;
		}

		/* Decrement the blocks remaining counter */
		TotalBlocks--;
     ee2:	d2 ed       	ldi	r29, 0xD2	; 210
     ee4:	81 14       	cp	r8, r1
     ee6:	91 04       	cpc	r9, r1
     ee8:	09 f0       	breq	.+2      	; 0xeec <DataflashManager_ReadBlocks_RAM+0x110>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     eea:	c0 cf       	rjmp	.-128    	; 0xe6c <DataflashManager_ReadBlocks_RAM+0x90>
	Dataflash_SendByte(0x00);
	Dataflash_SendByte(0x00);
	Dataflash_SendByte(0x00);
	Dataflash_SendByte(0x00);

	while (TotalBlocks)
     eec:	8e b1       	in	r24, 0x0e	; 14
     eee:	83 60       	ori	r24, 0x03	; 3
     ef0:	8e b9       	out	0x0e, r24	; 14
     ef2:	df 91       	pop	r29
     ef4:	cf 91       	pop	r28
     ef6:	1f 91       	pop	r17
     ef8:	0f 91       	pop	r16
		TotalBlocks--;
	}

	/* Deselect all Dataflash chips */
	Dataflash_DeselectChip();
}
     efa:	ff 90       	pop	r15
     efc:	ef 90       	pop	r14
     efe:	df 90       	pop	r13
     f00:	cf 90       	pop	r12
     f02:	bf 90       	pop	r11
     f04:	af 90       	pop	r10
     f06:	9f 90       	pop	r9
     f08:	8f 90       	pop	r8
     f0a:	08 95       	ret

00000f0c <DataflashManager_ResetDataflashProtections>:
     f0c:	8e b1       	in	r24, 0x0e	; 14
     f0e:	83 60       	ori	r24, 0x03	; 3
     f10:	8e 7f       	andi	r24, 0xFE	; 254
     f12:	8e b9       	out	0x0e, r24	; 14
     f14:	87 ed       	ldi	r24, 0xD7	; 215
     f16:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     f18:	0d b4       	in	r0, 0x2d	; 45
     f1a:	07 fe       	sbrs	r0, 7
     f1c:	fd cf       	rjmp	.-6      	; 0xf18 <DataflashManager_ResetDataflashProtections+0xc>
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     f1e:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     f20:	0d b4       	in	r0, 0x2d	; 45
     f22:	07 fe       	sbrs	r0, 7
     f24:	fd cf       	rjmp	.-6      	; 0xf20 <DataflashManager_ResetDataflashProtections+0x14>
	/* Select first Dataflash chip, send the read status register command */
	Dataflash_SelectChip(DATAFLASH_CHIP1);
	Dataflash_SendByte(DF_CMD_GETSTATUS);

	/* Check if sector protection is enabled */
	if (Dataflash_ReceiveByte() & DF_STATUS_SECTORPROTECTION_ON)
     f26:	0e b4       	in	r0, 0x2e	; 46
     f28:	01 fe       	sbrs	r0, 1
     f2a:	15 c0       	rjmp	.+42     	; 0xf56 <DataflashManager_ResetDataflashProtections+0x4a>
	{
		Dataflash_ToggleSelectedChipCS();
     f2c:	dc db       	rcall	.-2120   	; 0x6e6 <Dataflash_ToggleSelectedChipCS>
     f2e:	8d e3       	ldi	r24, 0x3D	; 61
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     f30:	8e bd       	out	0x2e, r24	; 46
     f32:	0d b4       	in	r0, 0x2d	; 45
				while (!(SPSR & (1 << SPIF)));
     f34:	07 fe       	sbrs	r0, 7
     f36:	fd cf       	rjmp	.-6      	; 0xf32 <DataflashManager_ResetDataflashProtections+0x26>
     f38:	8a e2       	ldi	r24, 0x2A	; 42
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     f3a:	8e bd       	out	0x2e, r24	; 46
     f3c:	0d b4       	in	r0, 0x2d	; 45
				while (!(SPSR & (1 << SPIF)));
     f3e:	07 fe       	sbrs	r0, 7
     f40:	fd cf       	rjmp	.-6      	; 0xf3c <DataflashManager_ResetDataflashProtections+0x30>
     f42:	8f e7       	ldi	r24, 0x7F	; 127
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     f44:	8e bd       	out	0x2e, r24	; 46
     f46:	0d b4       	in	r0, 0x2d	; 45
				while (!(SPSR & (1 << SPIF)));
     f48:	07 fe       	sbrs	r0, 7
     f4a:	fd cf       	rjmp	.-6      	; 0xf46 <DataflashManager_ResetDataflashProtections+0x3a>
     f4c:	8a e9       	ldi	r24, 0x9A	; 154
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     f4e:	8e bd       	out	0x2e, r24	; 46
     f50:	0d b4       	in	r0, 0x2d	; 45
				while (!(SPSR & (1 << SPIF)));
     f52:	07 fe       	sbrs	r0, 7
     f54:	fd cf       	rjmp	.-6      	; 0xf50 <DataflashManager_ResetDataflashProtections+0x44>
     f56:	8e b1       	in	r24, 0x0e	; 14
     f58:	83 60       	ori	r24, 0x03	; 3
     f5a:	8d 7f       	andi	r24, 0xFD	; 253
     f5c:	8e b9       	out	0x0e, r24	; 14
     f5e:	87 ed       	ldi	r24, 0xD7	; 215
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     f60:	8e bd       	out	0x2e, r24	; 46
     f62:	0d b4       	in	r0, 0x2d	; 45
				while (!(SPSR & (1 << SPIF)));
     f64:	07 fe       	sbrs	r0, 7
     f66:	fd cf       	rjmp	.-6      	; 0xf62 <DataflashManager_ResetDataflashProtections+0x56>
     f68:	1e bc       	out	0x2e, r1	; 46
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     f6a:	0d b4       	in	r0, 0x2d	; 45
				while (!(SPSR & (1 << SPIF)));
     f6c:	07 fe       	sbrs	r0, 7
     f6e:	fd cf       	rjmp	.-6      	; 0xf6a <DataflashManager_ResetDataflashProtections+0x5e>
     f70:	0e b4       	in	r0, 0x2e	; 46
	#if (DATAFLASH_TOTALCHIPS == 2)
	Dataflash_SelectChip(DATAFLASH_CHIP2);
	Dataflash_SendByte(DF_CMD_GETSTATUS);

	/* Check if sector protection is enabled */
	if (Dataflash_ReceiveByte() & DF_STATUS_SECTORPROTECTION_ON)
     f72:	01 fe       	sbrs	r0, 1
     f74:	15 c0       	rjmp	.+42     	; 0xfa0 <DataflashManager_ResetDataflashProtections+0x94>
     f76:	b7 db       	rcall	.-2194   	; 0x6e6 <Dataflash_ToggleSelectedChipCS>
	{
		Dataflash_ToggleSelectedChipCS();
     f78:	8d e3       	ldi	r24, 0x3D	; 61
     f7a:	8e bd       	out	0x2e, r24	; 46
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     f7c:	0d b4       	in	r0, 0x2d	; 45
     f7e:	07 fe       	sbrs	r0, 7
				while (!(SPSR & (1 << SPIF)));
     f80:	fd cf       	rjmp	.-6      	; 0xf7c <DataflashManager_ResetDataflashProtections+0x70>
     f82:	8a e2       	ldi	r24, 0x2A	; 42
     f84:	8e bd       	out	0x2e, r24	; 46
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     f86:	0d b4       	in	r0, 0x2d	; 45
     f88:	07 fe       	sbrs	r0, 7
				while (!(SPSR & (1 << SPIF)));
     f8a:	fd cf       	rjmp	.-6      	; 0xf86 <DataflashManager_ResetDataflashProtections+0x7a>
     f8c:	8f e7       	ldi	r24, 0x7F	; 127
     f8e:	8e bd       	out	0x2e, r24	; 46
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     f90:	0d b4       	in	r0, 0x2d	; 45
     f92:	07 fe       	sbrs	r0, 7
				while (!(SPSR & (1 << SPIF)));
     f94:	fd cf       	rjmp	.-6      	; 0xf90 <DataflashManager_ResetDataflashProtections+0x84>
     f96:	8a e9       	ldi	r24, 0x9A	; 154
     f98:	8e bd       	out	0x2e, r24	; 46
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     f9a:	0d b4       	in	r0, 0x2d	; 45
     f9c:	07 fe       	sbrs	r0, 7
				while (!(SPSR & (1 << SPIF)));
     f9e:	fd cf       	rjmp	.-6      	; 0xf9a <DataflashManager_ResetDataflashProtections+0x8e>
     fa0:	8e b1       	in	r24, 0x0e	; 14
     fa2:	83 60       	ori	r24, 0x03	; 3
     fa4:	8e b9       	out	0x0e, r24	; 14
     fa6:	08 95       	ret

00000fa8 <DataflashManager_CheckDataflashOperation>:
     fa8:	8e b1       	in	r24, 0x0e	; 14
	}
	#endif

	/* Deselect current Dataflash chip */
	Dataflash_DeselectChip();
}
     faa:	83 60       	ori	r24, 0x03	; 3
     fac:	8e 7f       	andi	r24, 0xFE	; 254
     fae:	8e b9       	out	0x0e, r24	; 14
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     fb0:	8f e9       	ldi	r24, 0x9F	; 159
     fb2:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     fb4:	0d b4       	in	r0, 0x2d	; 45
     fb6:	07 fe       	sbrs	r0, 7
     fb8:	fd cf       	rjmp	.-6      	; 0xfb4 <DataflashManager_CheckDataflashOperation+0xc>
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     fba:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     fbc:	0d b4       	in	r0, 0x2d	; 45
     fbe:	07 fe       	sbrs	r0, 7
     fc0:	fd cf       	rjmp	.-6      	; 0xfbc <DataflashManager_CheckDataflashOperation+0x14>
				return SPDR;
     fc2:	9e b5       	in	r25, 0x2e	; 46
     fc4:	8e b1       	in	r24, 0x0e	; 14
     fc6:	83 60       	ori	r24, 0x03	; 3
     fc8:	8e b9       	out	0x0e, r24	; 14
	Dataflash_SendByte(DF_CMD_READMANUFACTURERDEVICEINFO);
	ReturnByte = Dataflash_ReceiveByte();
	Dataflash_DeselectChip();

	/* If returned data is invalid, fail the command */
	if (ReturnByte != DF_MANUFACTURER_ATMEL)
     fca:	9f 31       	cpi	r25, 0x1F	; 31
     fcc:	b1 f4       	brne	.+44     	; 0xffa <DataflashManager_CheckDataflashOperation+0x52>
     fce:	8e b1       	in	r24, 0x0e	; 14
     fd0:	83 60       	ori	r24, 0x03	; 3
     fd2:	8d 7f       	andi	r24, 0xFD	; 253
     fd4:	8e b9       	out	0x0e, r24	; 14
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     fd6:	8f e9       	ldi	r24, 0x9F	; 159
     fd8:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     fda:	0d b4       	in	r0, 0x2d	; 45
     fdc:	07 fe       	sbrs	r0, 7
     fde:	fd cf       	rjmp	.-6      	; 0xfda <DataflashManager_CheckDataflashOperation+0x32>
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     fe0:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     fe2:	0d b4       	in	r0, 0x2d	; 45
     fe4:	07 fe       	sbrs	r0, 7
     fe6:	fd cf       	rjmp	.-6      	; 0xfe2 <DataflashManager_CheckDataflashOperation+0x3a>
				return SPDR;
     fe8:	9e b5       	in	r25, 0x2e	; 46
     fea:	8e b1       	in	r24, 0x0e	; 14
     fec:	83 60       	ori	r24, 0x03	; 3
     fee:	8e b9       	out	0x0e, r24	; 14

/** Performs a simple test on the attached Dataflash IC(s) to ensure that they are working.
 *
 *  \return Boolean true if all media chips are working, false otherwise
 */
bool DataflashManager_CheckDataflashOperation(void)
     ff0:	81 e0       	ldi	r24, 0x01	; 1
     ff2:	9f 31       	cpi	r25, 0x1F	; 31
     ff4:	19 f0       	breq	.+6      	; 0xffc <DataflashManager_CheckDataflashOperation+0x54>
     ff6:	80 e0       	ldi	r24, 0x00	; 0
     ff8:	08 95       	ret
	ReturnByte = Dataflash_ReceiveByte();
	Dataflash_DeselectChip();

	/* If returned data is invalid, fail the command */
	if (ReturnByte != DF_MANUFACTURER_ATMEL)
	  return false;
     ffa:	80 e0       	ldi	r24, 0x00	; 0
	if (ReturnByte != DF_MANUFACTURER_ATMEL)
	  return false;
	#endif

	return true;
}
     ffc:	08 95       	ret

00000ffe <DS1307_SetTimeDate>:
*/

#include "DS1307.h"

bool DS1307_SetTimeDate(const TimeDate_t* NewTimeDate)
{
     ffe:	ef 92       	push	r14
    1000:	0f 93       	push	r16
    1002:	1f 93       	push	r17
    1004:	cf 93       	push	r28
    1006:	df 93       	push	r29
    1008:	cd b7       	in	r28, 0x3d	; 61
    100a:	de b7       	in	r29, 0x3e	; 62
    100c:	28 97       	sbiw	r28, 0x08	; 8
    100e:	0f b6       	in	r0, 0x3f	; 63
    1010:	f8 94       	cli
    1012:	de bf       	out	0x3e, r29	; 62
    1014:	0f be       	out	0x3f, r0	; 63
    1016:	cd bf       	out	0x3d, r28	; 61
    1018:	fc 01       	movw	r30, r24
#if !defined(DUMMY_RTC)
	DS1307_DateTimeRegs_t NewRegValues;
	const uint8_t         WriteAddress = 0;
    101a:	19 82       	std	Y+1, r1	; 0x01

	// Convert new time data to the DS1307's time register layout
	NewRegValues.Byte1.Fields.TenSec    = (NewTimeDate->Second / 10);
    101c:	82 81       	ldd	r24, Z+2	; 0x02
    101e:	2a e0       	ldi	r18, 0x0A	; 10
    1020:	62 2f       	mov	r22, r18
    1022:	0e 94 e2 24 	call	0x49c4	; 0x49c4 <__udivmodqi4>
    1026:	87 70       	andi	r24, 0x07	; 7
    1028:	82 95       	swap	r24
    102a:	80 7f       	andi	r24, 0xF0	; 240
	NewRegValues.Byte1.Fields.Sec       = (NewTimeDate->Second % 10);
	NewRegValues.Byte1.Fields.CH        = false;
    102c:	89 2b       	or	r24, r25
    102e:	8a 83       	std	Y+2, r24	; 0x02
	NewRegValues.Byte2.Fields.TenMin    = (NewTimeDate->Minute / 10);
    1030:	81 81       	ldd	r24, Z+1	; 0x01
    1032:	0e 94 e2 24 	call	0x49c4	; 0x49c4 <__udivmodqi4>
    1036:	87 70       	andi	r24, 0x07	; 7
    1038:	82 95       	swap	r24
    103a:	80 7f       	andi	r24, 0xF0	; 240
    103c:	3b 81       	ldd	r19, Y+3	; 0x03
    103e:	30 78       	andi	r19, 0x80	; 128
	NewRegValues.Byte2.Fields.Min       = (NewTimeDate->Minute % 10);
    1040:	38 2b       	or	r19, r24
    1042:	39 2b       	or	r19, r25
    1044:	3b 83       	std	Y+3, r19	; 0x03
	NewRegValues.Byte3.Fields.TenHour   = (NewTimeDate->Hour / 10);
    1046:	80 81       	ld	r24, Z
    1048:	0e 94 e2 24 	call	0x49c4	; 0x49c4 <__udivmodqi4>
    104c:	83 70       	andi	r24, 0x03	; 3
    104e:	82 95       	swap	r24
    1050:	80 7f       	andi	r24, 0xF0	; 240
    1052:	3c 81       	ldd	r19, Y+4	; 0x04
    1054:	30 7c       	andi	r19, 0xC0	; 192
	NewRegValues.Byte3.Fields.Hour      = (NewTimeDate->Hour % 10);
    1056:	38 2b       	or	r19, r24
    1058:	39 2b       	or	r19, r25
	NewRegValues.Byte3.Fields.TwelveHourMode = false;
    105a:	3f 7b       	andi	r19, 0xBF	; 191
    105c:	3c 83       	std	Y+4, r19	; 0x04

	// Convert new date data to the DS1307's date register layout
	NewRegValues.Byte4.Fields.DayOfWeek = 0;
    105e:	8d 81       	ldd	r24, Y+5	; 0x05
    1060:	88 7f       	andi	r24, 0xF8	; 248
    1062:	8d 83       	std	Y+5, r24	; 0x05
	NewRegValues.Byte5.Fields.TenDay    = (NewTimeDate->Day / 10);
    1064:	83 81       	ldd	r24, Z+3	; 0x03
    1066:	0e 94 e2 24 	call	0x49c4	; 0x49c4 <__udivmodqi4>
    106a:	83 70       	andi	r24, 0x03	; 3
    106c:	82 95       	swap	r24
    106e:	80 7f       	andi	r24, 0xF0	; 240
    1070:	3e 81       	ldd	r19, Y+6	; 0x06
    1072:	30 7c       	andi	r19, 0xC0	; 192
	NewRegValues.Byte5.Fields.Day       = (NewTimeDate->Day % 10);
    1074:	38 2b       	or	r19, r24
    1076:	39 2b       	or	r19, r25
    1078:	3e 83       	std	Y+6, r19	; 0x06
	NewRegValues.Byte6.Fields.TenMonth  = (NewTimeDate->Month / 10);
    107a:	84 81       	ldd	r24, Z+4	; 0x04
    107c:	0e 94 e2 24 	call	0x49c4	; 0x49c4 <__udivmodqi4>
    1080:	81 70       	andi	r24, 0x01	; 1
    1082:	82 95       	swap	r24
    1084:	80 7f       	andi	r24, 0xF0	; 240
    1086:	3f 81       	ldd	r19, Y+7	; 0x07
    1088:	30 7e       	andi	r19, 0xE0	; 224
	NewRegValues.Byte6.Fields.Month     = (NewTimeDate->Month % 10);
    108a:	38 2b       	or	r19, r24
    108c:	39 2b       	or	r19, r25
    108e:	3f 83       	std	Y+7, r19	; 0x07
	NewRegValues.Byte7.Fields.TenYear   = (NewTimeDate->Year / 10);
    1090:	85 81       	ldd	r24, Z+5	; 0x05
    1092:	0e 94 e2 24 	call	0x49c4	; 0x49c4 <__udivmodqi4>
	NewRegValues.Byte7.Fields.Year      = (NewTimeDate->Year % 10);
    1096:	82 95       	swap	r24
    1098:	80 7f       	andi	r24, 0xF0	; 240
    109a:	89 2b       	or	r24, r25
    109c:	88 87       	std	Y+8, r24	; 0x08

	// Write the new Time and Date into the DS1307
	if (TWI_WritePacket(DS1307_ADDRESS, 10, &WriteAddress, sizeof(WriteAddress),
    109e:	80 ed       	ldi	r24, 0xD0	; 208
    10a0:	ae 01       	movw	r20, r28
    10a2:	4f 5f       	subi	r20, 0xFF	; 255
    10a4:	5f 4f       	sbci	r21, 0xFF	; 255
    10a6:	21 e0       	ldi	r18, 0x01	; 1
    10a8:	8e 01       	movw	r16, r28
    10aa:	0e 5f       	subi	r16, 0xFE	; 254
    10ac:	1f 4f       	sbci	r17, 0xFF	; 255
    10ae:	97 e0       	ldi	r25, 0x07	; 7
    10b0:	e9 2e       	mov	r14, r25
    10b2:	0e 94 5c 24 	call	0x48b8	; 0x48b8 <TWI_WritePacket>
           www.lufa-lib.org
*/

#include "DS1307.h"

bool DS1307_SetTimeDate(const TimeDate_t* NewTimeDate)
    10b6:	91 e0       	ldi	r25, 0x01	; 1
    10b8:	81 11       	cpse	r24, r1
    10ba:	90 e0       	ldi	r25, 0x00	; 0
		return false;
	}
#endif

	return true;
}
    10bc:	89 2f       	mov	r24, r25
    10be:	28 96       	adiw	r28, 0x08	; 8
    10c0:	0f b6       	in	r0, 0x3f	; 63
    10c2:	f8 94       	cli
    10c4:	de bf       	out	0x3e, r29	; 62
    10c6:	0f be       	out	0x3f, r0	; 63
    10c8:	cd bf       	out	0x3d, r28	; 61
    10ca:	df 91       	pop	r29
    10cc:	cf 91       	pop	r28
    10ce:	1f 91       	pop	r17
    10d0:	0f 91       	pop	r16
    10d2:	ef 90       	pop	r14
    10d4:	08 95       	ret

000010d6 <DS1307_GetTimeDate>:

bool DS1307_GetTimeDate(TimeDate_t* const TimeDate)
{
    10d6:	cf 92       	push	r12
    10d8:	df 92       	push	r13
    10da:	ef 92       	push	r14
    10dc:	0f 93       	push	r16
    10de:	1f 93       	push	r17
    10e0:	cf 93       	push	r28
    10e2:	df 93       	push	r29
    10e4:	cd b7       	in	r28, 0x3d	; 61
    10e6:	de b7       	in	r29, 0x3e	; 62
    10e8:	28 97       	sbiw	r28, 0x08	; 8
    10ea:	0f b6       	in	r0, 0x3f	; 63
    10ec:	f8 94       	cli
    10ee:	de bf       	out	0x3e, r29	; 62
    10f0:	0f be       	out	0x3f, r0	; 63
    10f2:	cd bf       	out	0x3d, r28	; 61
    10f4:	6c 01       	movw	r12, r24
	TimeDate->Day    = 1;
	TimeDate->Month  = 1;
	TimeDate->Year   = 1;
#else
	DS1307_DateTimeRegs_t CurrentRegValues;
	const uint8_t         ReadAddress = 0;
    10f6:	19 82       	std	Y+1, r1	; 0x01

	// Read in the stored Time and Date from the DS1307
	if (TWI_ReadPacket(DS1307_ADDRESS, 10, &ReadAddress, sizeof(ReadAddress),
    10f8:	80 ed       	ldi	r24, 0xD0	; 208
    10fa:	6a e0       	ldi	r22, 0x0A	; 10
    10fc:	ae 01       	movw	r20, r28
    10fe:	4f 5f       	subi	r20, 0xFF	; 255
    1100:	5f 4f       	sbci	r21, 0xFF	; 255
    1102:	21 e0       	ldi	r18, 0x01	; 1
    1104:	8e 01       	movw	r16, r28
    1106:	0e 5f       	subi	r16, 0xFE	; 254
    1108:	1f 4f       	sbci	r17, 0xFF	; 255
    110a:	37 e0       	ldi	r19, 0x07	; 7
    110c:	e3 2e       	mov	r14, r19
    110e:	0e 94 1a 24 	call	0x4834	; 0x4834 <TWI_ReadPacket>
    1112:	88 23       	and	r24, r24
    1114:	09 f0       	breq	.+2      	; 0x1118 <DS1307_GetTimeDate+0x42>
    1116:	50 c0       	rjmp	.+160    	; 0x11b8 <DS1307_GetTimeDate+0xe2>
	{
		return false;
	}

	// Convert stored time value into decimal
	TimeDate->Second  = (CurrentRegValues.Byte1.Fields.TenSec  * 10) + CurrentRegValues.Byte1.Fields.Sec;
    1118:	2a 81       	ldd	r18, Y+2	; 0x02
    111a:	92 2f       	mov	r25, r18
    111c:	96 95       	lsr	r25
    111e:	96 95       	lsr	r25
    1120:	96 95       	lsr	r25
    1122:	9e 70       	andi	r25, 0x0E	; 14
    1124:	89 2f       	mov	r24, r25
    1126:	88 0f       	add	r24, r24
    1128:	88 0f       	add	r24, r24
    112a:	89 0f       	add	r24, r25
    112c:	2f 70       	andi	r18, 0x0F	; 15
    112e:	82 0f       	add	r24, r18
    1130:	f6 01       	movw	r30, r12
    1132:	82 83       	std	Z+2, r24	; 0x02
	TimeDate->Minute  = (CurrentRegValues.Byte2.Fields.TenMin  * 10) + CurrentRegValues.Byte2.Fields.Min;
    1134:	2b 81       	ldd	r18, Y+3	; 0x03
    1136:	92 2f       	mov	r25, r18
    1138:	96 95       	lsr	r25
    113a:	96 95       	lsr	r25
    113c:	96 95       	lsr	r25
    113e:	9e 70       	andi	r25, 0x0E	; 14
    1140:	89 2f       	mov	r24, r25
    1142:	88 0f       	add	r24, r24
    1144:	88 0f       	add	r24, r24
    1146:	89 0f       	add	r24, r25
    1148:	2f 70       	andi	r18, 0x0F	; 15
    114a:	82 0f       	add	r24, r18
    114c:	81 83       	std	Z+1, r24	; 0x01
	TimeDate->Hour    = (CurrentRegValues.Byte3.Fields.TenHour * 10) + CurrentRegValues.Byte3.Fields.Hour;
    114e:	2c 81       	ldd	r18, Y+4	; 0x04
    1150:	92 2f       	mov	r25, r18
    1152:	96 95       	lsr	r25
    1154:	96 95       	lsr	r25
    1156:	96 95       	lsr	r25
    1158:	96 70       	andi	r25, 0x06	; 6
    115a:	89 2f       	mov	r24, r25
    115c:	88 0f       	add	r24, r24
    115e:	88 0f       	add	r24, r24
    1160:	89 0f       	add	r24, r25
    1162:	2f 70       	andi	r18, 0x0F	; 15
    1164:	82 0f       	add	r24, r18
    1166:	80 83       	st	Z, r24

	// Convert stored date value into decimal
	TimeDate->Day    = (CurrentRegValues.Byte5.Fields.TenDay   * 10) + CurrentRegValues.Byte5.Fields.Day;
    1168:	2e 81       	ldd	r18, Y+6	; 0x06
    116a:	92 2f       	mov	r25, r18
    116c:	96 95       	lsr	r25
    116e:	96 95       	lsr	r25
    1170:	96 95       	lsr	r25
    1172:	96 70       	andi	r25, 0x06	; 6
    1174:	89 2f       	mov	r24, r25
    1176:	88 0f       	add	r24, r24
    1178:	88 0f       	add	r24, r24
    117a:	89 0f       	add	r24, r25
    117c:	2f 70       	andi	r18, 0x0F	; 15
    117e:	82 0f       	add	r24, r18
    1180:	83 83       	std	Z+3, r24	; 0x03
	TimeDate->Month  = (CurrentRegValues.Byte6.Fields.TenMonth * 10) + CurrentRegValues.Byte6.Fields.Month;
    1182:	2f 81       	ldd	r18, Y+7	; 0x07
    1184:	92 2f       	mov	r25, r18
    1186:	96 95       	lsr	r25
    1188:	96 95       	lsr	r25
    118a:	96 95       	lsr	r25
    118c:	92 70       	andi	r25, 0x02	; 2
    118e:	89 2f       	mov	r24, r25
    1190:	88 0f       	add	r24, r24
    1192:	88 0f       	add	r24, r24
    1194:	89 0f       	add	r24, r25
    1196:	2f 70       	andi	r18, 0x0F	; 15
    1198:	82 0f       	add	r24, r18
    119a:	84 83       	std	Z+4, r24	; 0x04
	TimeDate->Year   = (CurrentRegValues.Byte7.Fields.TenYear  * 10) + CurrentRegValues.Byte7.Fields.Year;
    119c:	28 85       	ldd	r18, Y+8	; 0x08
    119e:	92 2f       	mov	r25, r18
    11a0:	92 95       	swap	r25
    11a2:	9f 70       	andi	r25, 0x0F	; 15
    11a4:	99 0f       	add	r25, r25
    11a6:	89 2f       	mov	r24, r25
    11a8:	88 0f       	add	r24, r24
    11aa:	88 0f       	add	r24, r24
    11ac:	89 0f       	add	r24, r25
    11ae:	2f 70       	andi	r18, 0x0F	; 15
    11b0:	82 0f       	add	r24, r18
    11b2:	85 83       	std	Z+5, r24	; 0x05
#endif

	return true;
    11b4:	81 e0       	ldi	r24, 0x01	; 1
    11b6:	01 c0       	rjmp	.+2      	; 0x11ba <DS1307_GetTimeDate+0xe4>

	// Read in the stored Time and Date from the DS1307
	if (TWI_ReadPacket(DS1307_ADDRESS, 10, &ReadAddress, sizeof(ReadAddress),
	                   (uint8_t*)&CurrentRegValues, sizeof(DS1307_DateTimeRegs_t)) != TWI_ERROR_NoError)
	{
		return false;
    11b8:	80 e0       	ldi	r24, 0x00	; 0
	TimeDate->Month  = (CurrentRegValues.Byte6.Fields.TenMonth * 10) + CurrentRegValues.Byte6.Fields.Month;
	TimeDate->Year   = (CurrentRegValues.Byte7.Fields.TenYear  * 10) + CurrentRegValues.Byte7.Fields.Year;
#endif

	return true;
}
    11ba:	28 96       	adiw	r28, 0x08	; 8
    11bc:	0f b6       	in	r0, 0x3f	; 63
    11be:	f8 94       	cli
    11c0:	de bf       	out	0x3e, r29	; 62
    11c2:	0f be       	out	0x3f, r0	; 63
    11c4:	cd bf       	out	0x3d, r28	; 61
    11c6:	df 91       	pop	r29
    11c8:	cf 91       	pop	r28
    11ca:	1f 91       	pop	r17
    11cc:	0f 91       	pop	r16
    11ce:	ef 90       	pop	r14
    11d0:	df 90       	pop	r13
    11d2:	cf 90       	pop	r12
    11d4:	08 95       	ret

000011d6 <SCSI_Command_ReadWrite_10>:
 *
 *  \return Boolean true if the command completed successfully, false otherwise.
 */
static bool SCSI_Command_ReadWrite_10(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo,
                                      const bool IsDataRead)
{
    11d6:	0f 93       	push	r16
    11d8:	1f 93       	push	r17
    11da:	cf 93       	push	r28
    11dc:	df 93       	push	r29
    11de:	ec 01       	movw	r28, r24
    11e0:	86 2f       	mov	r24, r22

				Temp = Data.Bytes[1];
				Data.Bytes[1] = Data.Bytes[2];
				Data.Bytes[2] = Temp;

				return Data.DWord;
    11e2:	48 a1       	lds	r20, 0x48
    11e4:	5f 8d       	ldd	r21, Y+31	; 0x1f
    11e6:	6e 8d       	ldd	r22, Y+30	; 0x1e
    11e8:	7d 8d       	ldd	r23, Y+29	; 0x1d

				Temp = Data.Bytes[0];
				Data.Bytes[0] = Data.Bytes[1];
				Data.Bytes[1] = Temp;

				return Data.Word;
    11ea:	0b a1       	lds	r16, 0x4b
    11ec:	1a a1       	lds	r17, 0x4a

	/* Load in the 16-bit total blocks (SCSI uses big-endian, so have to reverse the byte order) */
	TotalBlocks  = SwapEndian_16(*(uint16_t*)&MSInterfaceInfo->State.CommandBlock.SCSICommandData[7]);

	/* Check if the block address is outside the maximum allowable value for the LUN */
	if (BlockAddress >= VIRTUAL_MEMORY_BLOCKS)
    11ee:	40 30       	cpi	r20, 0x00	; 0
    11f0:	90 e8       	ldi	r25, 0x80	; 128
    11f2:	59 07       	cpc	r21, r25
    11f4:	90 e0       	ldi	r25, 0x00	; 0
    11f6:	69 07       	cpc	r22, r25
    11f8:	90 e0       	ldi	r25, 0x00	; 0
    11fa:	79 07       	cpc	r23, r25
    11fc:	68 f0       	brcs	.+26     	; 0x1218 <SCSI_Command_ReadWrite_10+0x42>
	{
		/* Block address is invalid, update SENSE key and return command fail */
		SCSI_SET_SENSE(SCSI_SENSE_KEY_ILLEGAL_REQUEST,
    11fe:	80 91 8b 01 	lds	r24, 0x018B
    1202:	80 7f       	andi	r24, 0xF0	; 240
    1204:	85 60       	ori	r24, 0x05	; 5
    1206:	80 93 8b 01 	sts	0x018B, r24
    120a:	81 e2       	ldi	r24, 0x21	; 33
    120c:	80 93 95 01 	sts	0x0195, r24
    1210:	10 92 96 01 	sts	0x0196, r1
		               SCSI_ASENSE_LOGICAL_BLOCK_ADDRESS_OUT_OF_RANGE,
		               SCSI_ASENSEQ_NO_QUALIFIER);

		return false;
    1214:	80 e0       	ldi	r24, 0x00	; 0
    1216:	1f c0       	rjmp	.+62     	; 0x1256 <SCSI_Command_ReadWrite_10+0x80>
	}

	/* Determine if the packet is a READ (10) or WRITE (10) command, call appropriate function */
	if (IsDataRead == DATA_READ)
    1218:	88 23       	and	r24, r24
    121a:	21 f0       	breq	.+8      	; 0x1224 <SCSI_Command_ReadWrite_10+0x4e>
	  DataflashManager_ReadBlocks(MSInterfaceInfo, BlockAddress, TotalBlocks);
    121c:	ce 01       	movw	r24, r28
    121e:	98 01       	movw	r18, r16
    1220:	f3 db       	rcall	.-2074   	; 0xa08 <DataflashManager_ReadBlocks>
    1222:	03 c0       	rjmp	.+6      	; 0x122a <SCSI_Command_ReadWrite_10+0x54>
    1224:	ce 01       	movw	r24, r28
	else
	  DataflashManager_WriteBlocks(MSInterfaceInfo, BlockAddress, TotalBlocks);
    1226:	98 01       	movw	r18, r16
    1228:	a2 da       	rcall	.-2748   	; 0x76e <DataflashManager_WriteBlocks>
    122a:	20 e0       	ldi	r18, 0x00	; 0
    122c:	30 e0       	ldi	r19, 0x00	; 0

	/* Update the bytes transferred counter and succeed the command */
	MSInterfaceInfo->State.CommandBlock.DataTransferLength -= ((uint32_t)TotalBlocks * VIRTUAL_MEMORY_BLOCK_SIZE);
    122e:	89 e0       	ldi	r24, 0x09	; 9
    1230:	00 0f       	add	r16, r16
    1232:	11 1f       	adc	r17, r17
    1234:	22 1f       	adc	r18, r18
    1236:	33 1f       	adc	r19, r19
    1238:	8a 95       	dec	r24
    123a:	d1 f7       	brne	.-12     	; 0x1230 <SCSI_Command_ReadWrite_10+0x5a>
    123c:	8c 89       	ldd	r24, Y+20	; 0x14
    123e:	9d 89       	ldd	r25, Y+21	; 0x15
    1240:	ae 89       	ldd	r26, Y+22	; 0x16
    1242:	bf 89       	ldd	r27, Y+23	; 0x17
    1244:	80 1b       	sub	r24, r16
    1246:	91 0b       	sbc	r25, r17
    1248:	a2 0b       	sbc	r26, r18
    124a:	b3 0b       	sbc	r27, r19
    124c:	8c 8b       	std	Y+20, r24	; 0x14
    124e:	9d 8b       	std	Y+21, r25	; 0x15
    1250:	ae 8b       	std	Y+22, r26	; 0x16
    1252:	bf 8b       	std	Y+23, r27	; 0x17
    1254:	81 e0       	ldi	r24, 0x01	; 1
    1256:	df 91       	pop	r29

	return true;
    1258:	cf 91       	pop	r28
}
    125a:	1f 91       	pop	r17
    125c:	0f 91       	pop	r16
    125e:	08 95       	ret

00001260 <SCSI_DecodeSCSICommand>:
    1260:	cf 92       	push	r12
    1262:	df 92       	push	r13
 *  \param[in] MSInterfaceInfo  Pointer to the Mass Storage class interface structure that the command is associated with
 *
 *  \return Boolean true if the command completed successfully, false otherwise
 */
bool SCSI_DecodeSCSICommand(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
    1264:	ef 92       	push	r14
    1266:	ff 92       	push	r15
    1268:	0f 93       	push	r16
    126a:	1f 93       	push	r17
    126c:	cf 93       	push	r28
    126e:	df 93       	push	r29
    1270:	cd b7       	in	r28, 0x3d	; 61
    1272:	de b7       	in	r29, 0x3e	; 62
    1274:	28 97       	sbiw	r28, 0x08	; 8
    1276:	0f b6       	in	r0, 0x3f	; 63
    1278:	f8 94       	cli
    127a:	de bf       	out	0x3e, r29	; 62
    127c:	0f be       	out	0x3f, r0	; 63
    127e:	cd bf       	out	0x3d, r28	; 61
    1280:	8c 01       	movw	r16, r24
	bool CommandSuccess = false;

	/* Run the appropriate SCSI command hander function based on the passed command */
	switch (MSInterfaceInfo->State.CommandBlock.SCSICommandData[0])
    1282:	fc 01       	movw	r30, r24
    1284:	83 8d       	ldd	r24, Z+27	; 0x1b
    1286:	8d 31       	cpi	r24, 0x1D	; 29
    1288:	09 f4       	brne	.+2      	; 0x128c <SCSI_DecodeSCSICommand+0x2c>
    128a:	af c0       	rjmp	.+350    	; 0x13ea <SCSI_DecodeSCSICommand+0x18a>
    128c:	8e 31       	cpi	r24, 0x1E	; 30
    128e:	78 f4       	brcc	.+30     	; 0x12ae <SCSI_DecodeSCSICommand+0x4e>
    1290:	83 30       	cpi	r24, 0x03	; 3
    1292:	09 f4       	brne	.+2      	; 0x1296 <SCSI_DecodeSCSICommand+0x36>
    1294:	55 c0       	rjmp	.+170    	; 0x1340 <SCSI_DecodeSCSICommand+0xe0>
    1296:	84 30       	cpi	r24, 0x04	; 4
    1298:	20 f4       	brcc	.+8      	; 0x12a2 <SCSI_DecodeSCSICommand+0x42>
    129a:	88 23       	and	r24, r24
    129c:	09 f4       	brne	.+2      	; 0x12a0 <SCSI_DecodeSCSICommand+0x40>
    129e:	e2 c0       	rjmp	.+452    	; 0x1464 <SCSI_DecodeSCSICommand+0x204>
    12a0:	e7 c0       	rjmp	.+462    	; 0x1470 <SCSI_DecodeSCSICommand+0x210>
    12a2:	82 31       	cpi	r24, 0x12	; 18
    12a4:	b9 f0       	breq	.+46     	; 0x12d4 <SCSI_DecodeSCSICommand+0x74>
    12a6:	8a 31       	cpi	r24, 0x1A	; 26
    12a8:	09 f0       	breq	.+2      	; 0x12ac <SCSI_DecodeSCSICommand+0x4c>
    12aa:	e2 c0       	rjmp	.+452    	; 0x1470 <SCSI_DecodeSCSICommand+0x210>
    12ac:	c1 c0       	rjmp	.+386    	; 0x1430 <SCSI_DecodeSCSICommand+0x1d0>
    12ae:	88 32       	cpi	r24, 0x28	; 40
    12b0:	09 f4       	brne	.+2      	; 0x12b4 <SCSI_DecodeSCSICommand+0x54>
    12b2:	b8 c0       	rjmp	.+368    	; 0x1424 <SCSI_DecodeSCSICommand+0x1c4>
    12b4:	89 32       	cpi	r24, 0x29	; 41
    12b6:	38 f4       	brcc	.+14     	; 0x12c6 <SCSI_DecodeSCSICommand+0x66>
    12b8:	8e 31       	cpi	r24, 0x1E	; 30
    12ba:	09 f4       	brne	.+2      	; 0x12be <SCSI_DecodeSCSICommand+0x5e>
    12bc:	d3 c0       	rjmp	.+422    	; 0x1464 <SCSI_DecodeSCSICommand+0x204>
    12be:	85 32       	cpi	r24, 0x25	; 37
    12c0:	09 f0       	breq	.+2      	; 0x12c4 <SCSI_DecodeSCSICommand+0x64>
    12c2:	d6 c0       	rjmp	.+428    	; 0x1470 <SCSI_DecodeSCSICommand+0x210>
    12c4:	64 c0       	rjmp	.+200    	; 0x138e <SCSI_DecodeSCSICommand+0x12e>
    12c6:	8a 32       	cpi	r24, 0x2A	; 42
    12c8:	09 f4       	brne	.+2      	; 0x12cc <SCSI_DecodeSCSICommand+0x6c>
    12ca:	a9 c0       	rjmp	.+338    	; 0x141e <SCSI_DecodeSCSICommand+0x1be>
    12cc:	8f 32       	cpi	r24, 0x2F	; 47
    12ce:	09 f0       	breq	.+2      	; 0x12d2 <SCSI_DecodeSCSICommand+0x72>
    12d0:	cf c0       	rjmp	.+414    	; 0x1470 <SCSI_DecodeSCSICommand+0x210>
    12d2:	c8 c0       	rjmp	.+400    	; 0x1464 <SCSI_DecodeSCSICommand+0x204>
    12d4:	f8 01       	movw	r30, r16
    12d6:	c7 8c       	ldd	r12, Z+31	; 0x1f
    12d8:	d6 8c       	ldd	r13, Z+30	; 0x1e
{
	uint16_t AllocationLength  = SwapEndian_16(*(uint16_t*)&MSInterfaceInfo->State.CommandBlock.SCSICommandData[3]);
	uint16_t BytesTransferred  = MIN(AllocationLength, sizeof(InquiryData));

	/* Only the standard INQUIRY data is supported, check if any optional INQUIRY bits set */
	if ((MSInterfaceInfo->State.CommandBlock.SCSICommandData[1] & ((1 << 0) | (1 << 1))) ||
    12da:	84 8d       	ldd	r24, Z+28	; 0x1c
    12dc:	90 e0       	ldi	r25, 0x00	; 0
    12de:	83 70       	andi	r24, 0x03	; 3
    12e0:	90 70       	andi	r25, 0x00	; 0
    12e2:	00 97       	sbiw	r24, 0x00	; 0
    12e4:	09 f0       	breq	.+2      	; 0x12e8 <SCSI_DecodeSCSICommand+0x88>
    12e6:	85 c0       	rjmp	.+266    	; 0x13f2 <SCSI_DecodeSCSICommand+0x192>
    12e8:	85 8d       	ldd	r24, Z+29	; 0x1d
    12ea:	88 23       	and	r24, r24
    12ec:	09 f0       	breq	.+2      	; 0x12f0 <SCSI_DecodeSCSICommand+0x90>
    12ee:	81 c0       	rjmp	.+258    	; 0x13f2 <SCSI_DecodeSCSICommand+0x192>
 *  \return Boolean true if the command completed successfully, false otherwise.
 */
static bool SCSI_Command_Inquiry(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
	uint16_t AllocationLength  = SwapEndian_16(*(uint16_t*)&MSInterfaceInfo->State.CommandBlock.SCSICommandData[3]);
	uint16_t BytesTransferred  = MIN(AllocationLength, sizeof(InquiryData));
    12f0:	76 01       	movw	r14, r12
    12f2:	f5 e2       	ldi	r31, 0x25	; 37
    12f4:	cf 16       	cp	r12, r31
    12f6:	d1 04       	cpc	r13, r1
    12f8:	18 f0       	brcs	.+6      	; 0x1300 <SCSI_DecodeSCSICommand+0xa0>
    12fa:	24 e2       	ldi	r18, 0x24	; 36
    12fc:	e2 2e       	mov	r14, r18
    12fe:	f1 2c       	mov	r15, r1
		               SCSI_ASENSEQ_NO_QUALIFIER);

		return false;
	}

	Endpoint_Write_Stream_LE(&InquiryData, BytesTransferred, NULL);
    1300:	8b e9       	ldi	r24, 0x9B	; 155
    1302:	91 e0       	ldi	r25, 0x01	; 1
    1304:	b7 01       	movw	r22, r14
    1306:	40 e0       	ldi	r20, 0x00	; 0
    1308:	50 e0       	ldi	r21, 0x00	; 0
    130a:	0e 94 5f 1a 	call	0x34be	; 0x34be <Endpoint_Write_Stream_LE>

	/* Pad out remaining bytes with 0x00 */
	Endpoint_Null_Stream((AllocationLength - BytesTransferred), NULL);
    130e:	c6 01       	movw	r24, r12
    1310:	8e 19       	sub	r24, r14
    1312:	9f 09       	sbc	r25, r15
    1314:	60 e0       	ldi	r22, 0x00	; 0
    1316:	70 e0       	ldi	r23, 0x00	; 0
    1318:	0e 94 1a 1a 	call	0x3434	; 0x3434 <Endpoint_Null_Stream>
    131c:	80 91 e8 00 	lds	r24, 0x00E8
    1320:	8e 77       	andi	r24, 0x7E	; 126
    1322:	80 93 e8 00 	sts	0x00E8, r24

	/* Finalize the stream transfer to send the last packet */
	Endpoint_ClearIN();

	/* Succeed the command and update the bytes transferred counter */
	MSInterfaceInfo->State.CommandBlock.DataTransferLength -= BytesTransferred;
    1326:	a7 01       	movw	r20, r14
    1328:	60 e0       	ldi	r22, 0x00	; 0
    132a:	70 e0       	ldi	r23, 0x00	; 0
    132c:	f8 01       	movw	r30, r16
    132e:	84 89       	ldd	r24, Z+20	; 0x14
    1330:	95 89       	ldd	r25, Z+21	; 0x15
    1332:	a6 89       	ldd	r26, Z+22	; 0x16
    1334:	b7 89       	ldd	r27, Z+23	; 0x17
    1336:	84 1b       	sub	r24, r20
    1338:	95 0b       	sbc	r25, r21
    133a:	a6 0b       	sbc	r26, r22
    133c:	b7 0b       	sbc	r27, r23
    133e:	8d c0       	rjmp	.+282    	; 0x145a <SCSI_DecodeSCSICommand+0x1fa>
 *
 *  \return Boolean true if the command completed successfully, false otherwise.
 */
static bool SCSI_Command_Request_Sense(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
	uint8_t  AllocationLength = MSInterfaceInfo->State.CommandBlock.SCSICommandData[4];
    1340:	f8 01       	movw	r30, r16
    1342:	c7 8c       	ldd	r12, Z+31	; 0x1f
	uint8_t  BytesTransferred = MIN(AllocationLength, sizeof(SenseData));
    1344:	ec 2c       	mov	r14, r12
    1346:	f2 e1       	ldi	r31, 0x12	; 18
    1348:	fc 15       	cp	r31, r12
    134a:	10 f4       	brcc	.+4      	; 0x1350 <SCSI_DecodeSCSICommand+0xf0>
    134c:	92 e1       	ldi	r25, 0x12	; 18
    134e:	e9 2e       	mov	r14, r25

	Endpoint_Write_Stream_LE(&SenseData, BytesTransferred, NULL);
    1350:	89 e8       	ldi	r24, 0x89	; 137
    1352:	91 e0       	ldi	r25, 0x01	; 1
    1354:	6e 2d       	mov	r22, r14
    1356:	70 e0       	ldi	r23, 0x00	; 0
    1358:	40 e0       	ldi	r20, 0x00	; 0
    135a:	50 e0       	ldi	r21, 0x00	; 0
    135c:	0e 94 5f 1a 	call	0x34be	; 0x34be <Endpoint_Write_Stream_LE>
	Endpoint_Null_Stream((AllocationLength - BytesTransferred), NULL);
    1360:	8c 2d       	mov	r24, r12
    1362:	90 e0       	ldi	r25, 0x00	; 0
    1364:	8e 19       	sub	r24, r14
    1366:	91 09       	sbc	r25, r1
    1368:	60 e0       	ldi	r22, 0x00	; 0
    136a:	70 e0       	ldi	r23, 0x00	; 0
    136c:	0e 94 1a 1a 	call	0x3434	; 0x3434 <Endpoint_Null_Stream>
    1370:	80 91 e8 00 	lds	r24, 0x00E8
    1374:	8e 77       	andi	r24, 0x7E	; 126
    1376:	80 93 e8 00 	sts	0x00E8, r24
	Endpoint_ClearIN();

	/* Succeed the command and update the bytes transferred counter */
	MSInterfaceInfo->State.CommandBlock.DataTransferLength -= BytesTransferred;
    137a:	f8 01       	movw	r30, r16
    137c:	84 89       	ldd	r24, Z+20	; 0x14
    137e:	95 89       	ldd	r25, Z+21	; 0x15
    1380:	a6 89       	ldd	r26, Z+22	; 0x16
    1382:	b7 89       	ldd	r27, Z+23	; 0x17
    1384:	8e 19       	sub	r24, r14
    1386:	91 09       	sbc	r25, r1
    1388:	a1 09       	sbc	r26, r1
    138a:	b1 09       	sbc	r27, r1
    138c:	66 c0       	rjmp	.+204    	; 0x145a <SCSI_DecodeSCSICommand+0x1fa>
 *
 *  \return Boolean true if the command completed successfully, false otherwise.
 */
static bool SCSI_Command_Read_Capacity_10(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
	uint32_t LastBlockAddressInLUN = (VIRTUAL_MEMORY_BLOCKS - 1);
    138e:	8f ef       	ldi	r24, 0xFF	; 255
    1390:	9f e7       	ldi	r25, 0x7F	; 127
    1392:	a0 e0       	ldi	r26, 0x00	; 0
    1394:	b0 e0       	ldi	r27, 0x00	; 0
    1396:	8d 83       	std	Y+5, r24	; 0x05
    1398:	9e 83       	std	Y+6, r25	; 0x06
    139a:	af 83       	std	Y+7, r26	; 0x07
    139c:	b8 87       	std	Y+8, r27	; 0x08
	uint32_t MediaBlockSize        = VIRTUAL_MEMORY_BLOCK_SIZE;
    139e:	80 e0       	ldi	r24, 0x00	; 0
    13a0:	92 e0       	ldi	r25, 0x02	; 2
    13a2:	a0 e0       	ldi	r26, 0x00	; 0
    13a4:	b0 e0       	ldi	r27, 0x00	; 0
    13a6:	89 83       	std	Y+1, r24	; 0x01
    13a8:	9a 83       	std	Y+2, r25	; 0x02
    13aa:	ab 83       	std	Y+3, r26	; 0x03
    13ac:	bc 83       	std	Y+4, r27	; 0x04

	Endpoint_Write_Stream_BE(&LastBlockAddressInLUN, sizeof(LastBlockAddressInLUN), NULL);
    13ae:	ce 01       	movw	r24, r28
    13b0:	05 96       	adiw	r24, 0x05	; 5
    13b2:	64 e0       	ldi	r22, 0x04	; 4
    13b4:	70 e0       	ldi	r23, 0x00	; 0
    13b6:	40 e0       	ldi	r20, 0x00	; 0
    13b8:	50 e0       	ldi	r21, 0x00	; 0
    13ba:	0e 94 ae 1a 	call	0x355c	; 0x355c <Endpoint_Write_Stream_BE>
	Endpoint_Write_Stream_BE(&MediaBlockSize, sizeof(MediaBlockSize), NULL);
    13be:	ce 01       	movw	r24, r28
    13c0:	01 96       	adiw	r24, 0x01	; 1
    13c2:	64 e0       	ldi	r22, 0x04	; 4
    13c4:	70 e0       	ldi	r23, 0x00	; 0
    13c6:	40 e0       	ldi	r20, 0x00	; 0
    13c8:	50 e0       	ldi	r21, 0x00	; 0
    13ca:	0e 94 ae 1a 	call	0x355c	; 0x355c <Endpoint_Write_Stream_BE>
    13ce:	80 91 e8 00 	lds	r24, 0x00E8
    13d2:	8e 77       	andi	r24, 0x7E	; 126
    13d4:	80 93 e8 00 	sts	0x00E8, r24
	Endpoint_ClearIN();

	/* Succeed the command and update the bytes transferred counter */
	MSInterfaceInfo->State.CommandBlock.DataTransferLength -= 8;
    13d8:	f8 01       	movw	r30, r16
    13da:	84 89       	ldd	r24, Z+20	; 0x14
    13dc:	95 89       	ldd	r25, Z+21	; 0x15
    13de:	a6 89       	ldd	r26, Z+22	; 0x16
    13e0:	b7 89       	ldd	r27, Z+23	; 0x17
    13e2:	08 97       	sbiw	r24, 0x08	; 8
    13e4:	a1 09       	sbc	r26, r1
    13e6:	b1 09       	sbc	r27, r1
    13e8:	38 c0       	rjmp	.+112    	; 0x145a <SCSI_DecodeSCSICommand+0x1fa>
 *  \return Boolean true if the command completed successfully, false otherwise.
 */
static bool SCSI_Command_Send_Diagnostic(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
	/* Check to see if the SELF TEST bit is not set */
	if (!(MSInterfaceInfo->State.CommandBlock.SCSICommandData[1] & (1 << 2)))
    13ea:	f8 01       	movw	r30, r16
    13ec:	84 8d       	ldd	r24, Z+28	; 0x1c
    13ee:	82 fd       	sbrc	r24, 2
    13f0:	08 c0       	rjmp	.+16     	; 0x1402 <SCSI_DecodeSCSICommand+0x1a2>
	{
		/* Only self-test supported - update SENSE key and fail the command */
		SCSI_SET_SENSE(SCSI_SENSE_KEY_ILLEGAL_REQUEST,
    13f2:	80 91 8b 01 	lds	r24, 0x018B
    13f6:	80 7f       	andi	r24, 0xF0	; 240
    13f8:	85 60       	ori	r24, 0x05	; 5
    13fa:	80 93 8b 01 	sts	0x018B, r24
    13fe:	84 e2       	ldi	r24, 0x24	; 36
    1400:	3e c0       	rjmp	.+124    	; 0x147e <SCSI_DecodeSCSICommand+0x21e>

		return false;
	}

	/* Check to see if all attached Dataflash ICs are functional */
	if (!(DataflashManager_CheckDataflashOperation()))
    1402:	d2 dd       	rcall	.-1116   	; 0xfa8 <DataflashManager_CheckDataflashOperation>
    1404:	88 23       	and	r24, r24
    1406:	71 f5       	brne	.+92     	; 0x1464 <SCSI_DecodeSCSICommand+0x204>
    1408:	80 91 8b 01 	lds	r24, 0x018B
	{
		/* Update SENSE key with a hardware error condition and return command fail */
		SCSI_SET_SENSE(SCSI_SENSE_KEY_HARDWARE_ERROR,
    140c:	80 7f       	andi	r24, 0xF0	; 240
    140e:	84 60       	ori	r24, 0x04	; 4
    1410:	80 93 8b 01 	sts	0x018B, r24
    1414:	10 92 95 01 	sts	0x0195, r1
    1418:	10 92 96 01 	sts	0x0196, r1
    141c:	3e c0       	rjmp	.+124    	; 0x149a <SCSI_DecodeSCSICommand+0x23a>
    141e:	c8 01       	movw	r24, r16
			break;
		case SCSI_CMD_SEND_DIAGNOSTIC:
			CommandSuccess = SCSI_Command_Send_Diagnostic(MSInterfaceInfo);
			break;
		case SCSI_CMD_WRITE_10:
			CommandSuccess = SCSI_Command_ReadWrite_10(MSInterfaceInfo, DATA_WRITE);
    1420:	60 e0       	ldi	r22, 0x00	; 0
    1422:	02 c0       	rjmp	.+4      	; 0x1428 <SCSI_DecodeSCSICommand+0x1c8>
    1424:	c8 01       	movw	r24, r16
			break;
		case SCSI_CMD_READ_10:
			CommandSuccess = SCSI_Command_ReadWrite_10(MSInterfaceInfo, DATA_READ);
    1426:	61 e0       	ldi	r22, 0x01	; 1
    1428:	d6 de       	rcall	.-596    	; 0x11d6 <SCSI_Command_ReadWrite_10>
    142a:	88 23       	and	r24, r24
    142c:	b1 f1       	breq	.+108    	; 0x149a <SCSI_DecodeSCSICommand+0x23a>
		                   SCSI_ASENSEQ_NO_QUALIFIER);
			break;
	}

	/* Check if command was successfully processed */
	if (CommandSuccess)
    142e:	2a c0       	rjmp	.+84     	; 0x1484 <SCSI_DecodeSCSICommand+0x224>
    1430:	10 92 f1 00 	sts	0x00F1, r1
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    1434:	10 92 f1 00 	sts	0x00F1, r1
    1438:	10 92 f1 00 	sts	0x00F1, r1
    143c:	10 92 f1 00 	sts	0x00F1, r1
    1440:	80 91 e8 00 	lds	r24, 0x00E8
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1444:	8e 77       	andi	r24, 0x7E	; 126
    1446:	80 93 e8 00 	sts	0x00E8, r24
    144a:	f8 01       	movw	r30, r16
    144c:	84 89       	ldd	r24, Z+20	; 0x14
	Endpoint_Write_8(DISK_READ_ONLY ? 0x80 : 0x00);
	Endpoint_Write_8(0x00);
	Endpoint_ClearIN();

	/* Update the bytes transferred counter and succeed the command */
	MSInterfaceInfo->State.CommandBlock.DataTransferLength -= 4;
    144e:	95 89       	ldd	r25, Z+21	; 0x15
    1450:	a6 89       	ldd	r26, Z+22	; 0x16
    1452:	b7 89       	ldd	r27, Z+23	; 0x17
    1454:	04 97       	sbiw	r24, 0x04	; 4
    1456:	a1 09       	sbc	r26, r1
    1458:	b1 09       	sbc	r27, r1
    145a:	84 8b       	std	Z+20, r24	; 0x14
    145c:	95 8b       	std	Z+21, r25	; 0x15
    145e:	a6 8b       	std	Z+22, r26	; 0x16
    1460:	b7 8b       	std	Z+23, r27	; 0x17
    1462:	10 c0       	rjmp	.+32     	; 0x1484 <SCSI_DecodeSCSICommand+0x224>
    1464:	f8 01       	movw	r30, r16
		case SCSI_CMD_READ_10:
			CommandSuccess = SCSI_Command_ReadWrite_10(MSInterfaceInfo, DATA_READ);
			break;
		case SCSI_CMD_MODE_SENSE_6:
			CommandSuccess = SCSI_Command_ModeSense_6(MSInterfaceInfo);
			break;
    1466:	14 8a       	std	Z+20, r1	; 0x14
		case SCSI_CMD_TEST_UNIT_READY:
		case SCSI_CMD_PREVENT_ALLOW_MEDIUM_REMOVAL:
		case SCSI_CMD_VERIFY_10:
			/* These commands should just succeed, no handling required */
			CommandSuccess = true;
			MSInterfaceInfo->State.CommandBlock.DataTransferLength = 0;
    1468:	15 8a       	std	Z+21, r1	; 0x15
    146a:	16 8a       	std	Z+22, r1	; 0x16
    146c:	17 8a       	std	Z+23, r1	; 0x17
    146e:	0a c0       	rjmp	.+20     	; 0x1484 <SCSI_DecodeSCSICommand+0x224>
    1470:	80 91 8b 01 	lds	r24, 0x018B
			break;
		default:
			/* Update the SENSE key to reflect the invalid command */
			SCSI_SET_SENSE(SCSI_SENSE_KEY_ILLEGAL_REQUEST,
    1474:	80 7f       	andi	r24, 0xF0	; 240
    1476:	85 60       	ori	r24, 0x05	; 5
    1478:	80 93 8b 01 	sts	0x018B, r24
    147c:	80 e2       	ldi	r24, 0x20	; 32
    147e:	80 93 95 01 	sts	0x0195, r24
    1482:	ca cf       	rjmp	.-108    	; 0x1418 <SCSI_DecodeSCSICommand+0x1b8>
    1484:	80 91 8b 01 	lds	r24, 0x018B
	}

	/* Check if command was successfully processed */
	if (CommandSuccess)
	{
		SCSI_SET_SENSE(SCSI_SENSE_KEY_GOOD,
    1488:	80 7f       	andi	r24, 0xF0	; 240
    148a:	80 93 8b 01 	sts	0x018B, r24
    148e:	10 92 95 01 	sts	0x0195, r1
    1492:	10 92 96 01 	sts	0x0196, r1
    1496:	81 e0       	ldi	r24, 0x01	; 1
    1498:	01 c0       	rjmp	.+2      	; 0x149c <SCSI_DecodeSCSICommand+0x23c>
		               SCSI_ASENSE_NO_ADDITIONAL_INFORMATION,
		               SCSI_ASENSEQ_NO_QUALIFIER);

		return true;
    149a:	80 e0       	ldi	r24, 0x00	; 0
    149c:	28 96       	adiw	r28, 0x08	; 8
	}

	return false;
    149e:	0f b6       	in	r0, 0x3f	; 63
}
    14a0:	f8 94       	cli
    14a2:	de bf       	out	0x3e, r29	; 62
    14a4:	0f be       	out	0x3f, r0	; 63
    14a6:	cd bf       	out	0x3d, r28	; 61
    14a8:	df 91       	pop	r29
    14aa:	cf 91       	pop	r28
    14ac:	1f 91       	pop	r17
    14ae:	0f 91       	pop	r16
    14b0:	ff 90       	pop	r15
    14b2:	ef 90       	pop	r14
    14b4:	df 90       	pop	r13
    14b6:	cf 90       	pop	r12
    14b8:	08 95       	ret

000014ba <disk_initialize>:
DSTATUS disk_initialize (
	BYTE drv				/* Physical drive number (0..) */
)
{
	return FR_OK;
}
    14ba:	80 e0       	ldi	r24, 0x00	; 0
    14bc:	08 95       	ret

000014be <disk_status>:
DSTATUS disk_status (
	BYTE drv		/* Physical drive number (0..) */
)
{
	return FR_OK;
}
    14be:	80 e0       	ldi	r24, 0x00	; 0
    14c0:	08 95       	ret

000014c2 <disk_read>:
	BYTE drv,		/* Physical drive number (0..) */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	/* Sector address (LBA) */
	BYTE count		/* Number of sectors to read (1..128) */
)
{
    14c2:	0f 93       	push	r16
    14c4:	fb 01       	movw	r30, r22
    14c6:	ca 01       	movw	r24, r20
    14c8:	b9 01       	movw	r22, r18
    14ca:	40 2f       	mov	r20, r16
	DataflashManager_ReadBlocks_RAM(sector, count, buff);
    14cc:	50 e0       	ldi	r21, 0x00	; 0
    14ce:	9f 01       	movw	r18, r30
    14d0:	85 dc       	rcall	.-1782   	; 0xddc <DataflashManager_ReadBlocks_RAM>
    14d2:	80 e0       	ldi	r24, 0x00	; 0
	return RES_OK;
}
    14d4:	0f 91       	pop	r16
    14d6:	08 95       	ret

000014d8 <disk_write>:
    14d8:	0f 93       	push	r16
	BYTE drv,			/* Physical drive number (0..) */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address (LBA) */
	BYTE count			/* Number of sectors to write (1..128) */
)
{
    14da:	fb 01       	movw	r30, r22
    14dc:	ca 01       	movw	r24, r20
    14de:	b9 01       	movw	r22, r18
    14e0:	40 2f       	mov	r20, r16
	DataflashManager_WriteBlocks_RAM(sector, count, buff);
    14e2:	50 e0       	ldi	r21, 0x00	; 0
    14e4:	9f 01       	movw	r18, r30
    14e6:	9a db       	rcall	.-2252   	; 0xc1c <DataflashManager_WriteBlocks_RAM>
    14e8:	80 e0       	ldi	r24, 0x00	; 0
	return RES_OK;
}
    14ea:	0f 91       	pop	r16
    14ec:	08 95       	ret

000014ee <disk_ioctl>:
    14ee:	66 23       	and	r22, r22
	BYTE drv,		/* Physical drive number (0..) */
	BYTE ctrl,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
	if (ctrl == CTRL_SYNC)
    14f0:	11 f4       	brne	.+4      	; 0x14f6 <disk_ioctl+0x8>
	  return RES_OK;
    14f2:	80 e0       	ldi	r24, 0x00	; 0
    14f4:	08 95       	ret
	else
	  return RES_PARERR;
    14f6:	84 e0       	ldi	r24, 0x04	; 4
}
    14f8:	08 95       	ret

000014fa <get_fattime>:


DWORD get_fattime (void)
{
    14fa:	0f 93       	push	r16
    14fc:	1f 93       	push	r17
    14fe:	cf 93       	push	r28
    1500:	df 93       	push	r29
    1502:	00 d0       	rcall	.+0      	; 0x1504 <get_fattime+0xa>
    1504:	00 d0       	rcall	.+0      	; 0x1506 <get_fattime+0xc>
    1506:	00 d0       	rcall	.+0      	; 0x1508 <get_fattime+0xe>
    1508:	cd b7       	in	r28, 0x3d	; 61
    150a:	de b7       	in	r29, 0x3e	; 62
	TimeDate_t CurrTimeDate;

	DS1307_GetTimeDate(&CurrTimeDate);
    150c:	ce 01       	movw	r24, r28
    150e:	01 96       	adiw	r24, 0x01	; 1
    1510:	e2 dd       	rcall	.-1084   	; 0x10d6 <DS1307_GetTimeDate>
    1512:	0c 81       	ldd	r16, Y+4	; 0x04


	return ((DWORD)(20 + CurrTimeDate.Year) << 25) |
	             ((DWORD)CurrTimeDate.Month << 21) |
	               ((DWORD)CurrTimeDate.Day << 16) |
    1514:	10 e0       	ldi	r17, 0x00	; 0
    1516:	20 e0       	ldi	r18, 0x00	; 0
    1518:	30 e0       	ldi	r19, 0x00	; 0
    151a:	98 01       	movw	r18, r16
    151c:	11 27       	eor	r17, r17
    151e:	00 27       	eor	r16, r16
    1520:	8d 81       	ldd	r24, Y+5	; 0x05

	DS1307_GetTimeDate(&CurrTimeDate);


	return ((DWORD)(20 + CurrTimeDate.Year) << 25) |
	             ((DWORD)CurrTimeDate.Month << 21) |
    1522:	90 e0       	ldi	r25, 0x00	; 0
    1524:	a0 e0       	ldi	r26, 0x00	; 0
    1526:	b0 e0       	ldi	r27, 0x00	; 0
    1528:	45 e1       	ldi	r20, 0x15	; 21
    152a:	88 0f       	add	r24, r24
    152c:	99 1f       	adc	r25, r25
    152e:	aa 1f       	adc	r26, r26
    1530:	bb 1f       	adc	r27, r27
    1532:	4a 95       	dec	r20
    1534:	d1 f7       	brne	.-12     	; 0x152a <get_fattime+0x30>
    1536:	08 2b       	or	r16, r24
	TimeDate_t CurrTimeDate;

	DS1307_GetTimeDate(&CurrTimeDate);


	return ((DWORD)(20 + CurrTimeDate.Year) << 25) |
    1538:	19 2b       	or	r17, r25
    153a:	2a 2b       	or	r18, r26
    153c:	3b 2b       	or	r19, r27
    153e:	89 81       	ldd	r24, Y+1	; 0x01
	             ((DWORD)CurrTimeDate.Month << 21) |
	               ((DWORD)CurrTimeDate.Day << 16) |
	              ((DWORD)CurrTimeDate.Hour << 11) |
    1540:	90 e0       	ldi	r25, 0x00	; 0
    1542:	a0 e0       	ldi	r26, 0x00	; 0
    1544:	b0 e0       	ldi	r27, 0x00	; 0
    1546:	5b e0       	ldi	r21, 0x0B	; 11
    1548:	88 0f       	add	r24, r24
    154a:	99 1f       	adc	r25, r25
    154c:	aa 1f       	adc	r26, r26
    154e:	bb 1f       	adc	r27, r27
    1550:	5a 95       	dec	r21
    1552:	d1 f7       	brne	.-12     	; 0x1548 <get_fattime+0x4e>
    1554:	08 2b       	or	r16, r24

	DS1307_GetTimeDate(&CurrTimeDate);


	return ((DWORD)(20 + CurrTimeDate.Year) << 25) |
	             ((DWORD)CurrTimeDate.Month << 21) |
    1556:	19 2b       	or	r17, r25
    1558:	2a 2b       	or	r18, r26
    155a:	3b 2b       	or	r19, r27
    155c:	8a 81       	ldd	r24, Y+2	; 0x02
	               ((DWORD)CurrTimeDate.Day << 16) |
	              ((DWORD)CurrTimeDate.Hour << 11) |
	             ((DWORD)CurrTimeDate.Minute << 5) |
    155e:	90 e0       	ldi	r25, 0x00	; 0
    1560:	a0 e0       	ldi	r26, 0x00	; 0
    1562:	b0 e0       	ldi	r27, 0x00	; 0
    1564:	65 e0       	ldi	r22, 0x05	; 5
    1566:	88 0f       	add	r24, r24
    1568:	99 1f       	adc	r25, r25
    156a:	aa 1f       	adc	r26, r26
    156c:	bb 1f       	adc	r27, r27
    156e:	6a 95       	dec	r22
    1570:	d1 f7       	brne	.-12     	; 0x1566 <get_fattime+0x6c>
    1572:	08 2b       	or	r16, r24
	DS1307_GetTimeDate(&CurrTimeDate);


	return ((DWORD)(20 + CurrTimeDate.Year) << 25) |
	             ((DWORD)CurrTimeDate.Month << 21) |
	               ((DWORD)CurrTimeDate.Day << 16) |
    1574:	19 2b       	or	r17, r25
    1576:	2a 2b       	or	r18, r26
    1578:	3b 2b       	or	r19, r27
    157a:	8b 81       	ldd	r24, Y+3	; 0x03
	              ((DWORD)CurrTimeDate.Hour << 11) |
	             ((DWORD)CurrTimeDate.Minute << 5) |
	      (((DWORD)CurrTimeDate.Second >> 1) << 0);
    157c:	86 95       	lsr	r24
    157e:	90 e0       	ldi	r25, 0x00	; 0
    1580:	a0 e0       	ldi	r26, 0x00	; 0
    1582:	b0 e0       	ldi	r27, 0x00	; 0
    1584:	08 2b       	or	r16, r24


	return ((DWORD)(20 + CurrTimeDate.Year) << 25) |
	             ((DWORD)CurrTimeDate.Month << 21) |
	               ((DWORD)CurrTimeDate.Day << 16) |
	              ((DWORD)CurrTimeDate.Hour << 11) |
    1586:	19 2b       	or	r17, r25
    1588:	2a 2b       	or	r18, r26
    158a:	3b 2b       	or	r19, r27
    158c:	8e 81       	ldd	r24, Y+6	; 0x06
	TimeDate_t CurrTimeDate;

	DS1307_GetTimeDate(&CurrTimeDate);


	return ((DWORD)(20 + CurrTimeDate.Year) << 25) |
    158e:	90 e0       	ldi	r25, 0x00	; 0
    1590:	44 96       	adiw	r24, 0x14	; 20
    1592:	aa 27       	eor	r26, r26
    1594:	97 fd       	sbrc	r25, 7
    1596:	a0 95       	com	r26
    1598:	ba 2f       	mov	r27, r26
    159a:	79 e1       	ldi	r23, 0x19	; 25
    159c:	88 0f       	add	r24, r24
    159e:	99 1f       	adc	r25, r25
    15a0:	aa 1f       	adc	r26, r26
    15a2:	bb 1f       	adc	r27, r27
    15a4:	7a 95       	dec	r23
    15a6:	d1 f7       	brne	.-12     	; 0x159c <get_fattime+0xa2>
    15a8:	08 2b       	or	r16, r24
    15aa:	19 2b       	or	r17, r25
    15ac:	2a 2b       	or	r18, r26
    15ae:	3b 2b       	or	r19, r27
    15b0:	b8 01       	movw	r22, r16
	             ((DWORD)CurrTimeDate.Month << 21) |
	               ((DWORD)CurrTimeDate.Day << 16) |
	              ((DWORD)CurrTimeDate.Hour << 11) |
	             ((DWORD)CurrTimeDate.Minute << 5) |
	      (((DWORD)CurrTimeDate.Second >> 1) << 0);
}
    15b2:	c9 01       	movw	r24, r18
    15b4:	26 96       	adiw	r28, 0x06	; 6
    15b6:	0f b6       	in	r0, 0x3f	; 63
    15b8:	f8 94       	cli
    15ba:	de bf       	out	0x3e, r29	; 62
    15bc:	0f be       	out	0x3f, r0	; 63
    15be:	cd bf       	out	0x3d, r28	; 61
    15c0:	df 91       	pop	r29
    15c2:	cf 91       	pop	r28
    15c4:	1f 91       	pop	r17
    15c6:	0f 91       	pop	r16
    15c8:	08 95       	ret

000015ca <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
    15ca:	cf 93       	push	r28
    15cc:	df 93       	push	r29
    15ce:	9c 01       	movw	r18, r24
	BYTE *d = (BYTE*)dst;
	const BYTE *s = (const BYTE*)src;
    15d0:	fb 01       	movw	r30, r22
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
	BYTE *d = (BYTE*)dst;
    15d2:	dc 01       	movw	r26, r24
	const BYTE *s = (const BYTE*)src;

#if _WORD_ACCESS == 1
	while (cnt >= sizeof (int)) {
    15d4:	ca 01       	movw	r24, r20
    15d6:	05 c0       	rjmp	.+10     	; 0x15e2 <mem_cpy+0x18>
		*(int*)d = *(int*)s;
    15d8:	c1 91       	ld	r28, Z+
    15da:	d1 91       	ld	r29, Z+
    15dc:	cd 93       	st	X+, r28
    15de:	dd 93       	st	X+, r29
		d += sizeof (int); s += sizeof (int);
		cnt -= sizeof (int);
    15e0:	02 97       	sbiw	r24, 0x02	; 2
void mem_cpy (void* dst, const void* src, UINT cnt) {
	BYTE *d = (BYTE*)dst;
	const BYTE *s = (const BYTE*)src;

#if _WORD_ACCESS == 1
	while (cnt >= sizeof (int)) {
    15e2:	82 30       	cpi	r24, 0x02	; 2
    15e4:	91 05       	cpc	r25, r1
    15e6:	c0 f7       	brcc	.-16     	; 0x15d8 <mem_cpy+0xe>
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
    15e8:	ca 01       	movw	r24, r20
    15ea:	8e 7f       	andi	r24, 0xFE	; 254
    15ec:	f9 01       	movw	r30, r18
    15ee:	e8 0f       	add	r30, r24
    15f0:	f9 1f       	adc	r31, r25
    15f2:	86 0f       	add	r24, r22
    15f4:	97 1f       	adc	r25, r23
		*(int*)d = *(int*)s;
		d += sizeof (int); s += sizeof (int);
		cnt -= sizeof (int);
	}
#endif
	while (cnt--)
    15f6:	40 ff       	sbrs	r20, 0
    15f8:	03 c0       	rjmp	.+6      	; 0x1600 <mem_cpy+0x36>
		*d++ = *s++;
    15fa:	dc 01       	movw	r26, r24
    15fc:	8c 91       	ld	r24, X
    15fe:	80 83       	st	Z, r24
}
    1600:	df 91       	pop	r29
    1602:	cf 91       	pop	r28
    1604:	08 95       	ret

00001606 <mem_set>:

/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
	BYTE *d = (BYTE*)dst;
    1606:	fc 01       	movw	r30, r24

	while (cnt--)
    1608:	03 c0       	rjmp	.+6      	; 0x1610 <mem_set+0xa>
		*d++ = (BYTE)val;
    160a:	61 93       	st	Z+, r22
    160c:	41 50       	subi	r20, 0x01	; 1
    160e:	50 40       	sbci	r21, 0x00	; 0
/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
	BYTE *d = (BYTE*)dst;

	while (cnt--)
    1610:	41 15       	cp	r20, r1
    1612:	51 05       	cpc	r21, r1
    1614:	d1 f7       	brne	.-12     	; 0x160a <mem_set+0x4>
		*d++ = (BYTE)val;
}
    1616:	08 95       	ret

00001618 <st_clust>:
static
void st_clust (
	BYTE *dir,	/* Pointer to the directory entry */
	DWORD cl	/* Value to be set */
)
{
    1618:	fc 01       	movw	r30, r24
	ST_WORD(dir+DIR_FstClusLO, cl);
    161a:	53 8f       	std	Z+27, r21	; 0x1b
    161c:	42 8f       	std	Z+26, r20	; 0x1a
	ST_WORD(dir+DIR_FstClusHI, cl >> 16);
    161e:	75 8b       	std	Z+21, r23	; 0x15
    1620:	64 8b       	std	Z+20, r22	; 0x14
}
    1622:	08 95       	ret

00001624 <validate>:

static
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	void* obj		/* Pointer to the object FIL/DIR to check validity */
)
{
    1624:	dc 01       	movw	r26, r24
	FIL *fil;


	fil = (FIL*)obj;	/* Assuming offset of fs and id in the FIL/DIR is identical */
	if (!fil->fs || !fil->fs->fs_type || fil->fs->id != fil->id)
    1626:	ed 91       	ld	r30, X+
    1628:	fc 91       	ld	r31, X
    162a:	11 97       	sbiw	r26, 0x01	; 1
    162c:	30 97       	sbiw	r30, 0x00	; 0
    162e:	91 f0       	breq	.+36     	; 0x1654 <validate+0x30>
    1630:	80 81       	ld	r24, Z
    1632:	88 23       	and	r24, r24
    1634:	79 f0       	breq	.+30     	; 0x1654 <validate+0x30>
    1636:	26 81       	ldd	r18, Z+6	; 0x06
    1638:	37 81       	ldd	r19, Z+7	; 0x07
    163a:	12 96       	adiw	r26, 0x02	; 2
    163c:	8d 91       	ld	r24, X+
    163e:	9c 91       	ld	r25, X
    1640:	13 97       	sbiw	r26, 0x03	; 3
    1642:	28 17       	cp	r18, r24
    1644:	39 07       	cpc	r19, r25
    1646:	31 f4       	brne	.+12     	; 0x1654 <validate+0x30>
		return FR_INVALID_OBJECT;

	ENTER_FF(fil->fs);		/* Lock file system */

	if (disk_status(fil->fs->drv) & STA_NOINIT)
    1648:	81 81       	ldd	r24, Z+1	; 0x01
    164a:	39 df       	rcall	.-398    	; 0x14be <disk_status>
    164c:	80 ff       	sbrs	r24, 0
    164e:	04 c0       	rjmp	.+8      	; 0x1658 <validate+0x34>
    1650:	83 e0       	ldi	r24, 0x03	; 3
		return FR_NOT_READY;
    1652:	08 95       	ret
    1654:	89 e0       	ldi	r24, 0x09	; 9
	FIL *fil;


	fil = (FIL*)obj;	/* Assuming offset of fs and id in the FIL/DIR is identical */
	if (!fil->fs || !fil->fs->fs_type || fil->fs->id != fil->id)
		return FR_INVALID_OBJECT;
    1656:	08 95       	ret
    1658:	80 e0       	ldi	r24, 0x00	; 0
	ENTER_FF(fil->fs);		/* Lock file system */

	if (disk_status(fil->fs->drv) & STA_NOINIT)
		return FR_NOT_READY;

	return FR_OK;
    165a:	08 95       	ret

0000165c <move_window>:
}
    165c:	6f 92       	push	r6
static
FRESULT move_window (
	FATFS *fs,		/* File system object */
	DWORD sector	/* Sector number to make appearance in the fs->win[] */
)					/* Move to zero only writes back dirty window */
{
    165e:	7f 92       	push	r7
    1660:	8f 92       	push	r8
    1662:	9f 92       	push	r9
    1664:	af 92       	push	r10
    1666:	bf 92       	push	r11
    1668:	cf 92       	push	r12
    166a:	df 92       	push	r13
    166c:	ef 92       	push	r14
    166e:	ff 92       	push	r15
    1670:	0f 93       	push	r16
    1672:	1f 93       	push	r17
    1674:	cf 93       	push	r28
    1676:	df 93       	push	r29
    1678:	ec 01       	movw	r28, r24
    167a:	4a 01       	movw	r8, r20
    167c:	5b 01       	movw	r10, r22
	DWORD wsect;


	wsect = fs->winsect;
    167e:	ca a4       	lds	r28, 0xaa
    1680:	db a4       	lds	r29, 0xab
    1682:	ec a4       	lds	r30, 0xac
    1684:	fd a4       	lds	r31, 0xad
	if (wsect != sector) {	/* Changed current window */
    1686:	c4 16       	cp	r12, r20
    1688:	d5 06       	cpc	r13, r21
    168a:	e6 06       	cpc	r14, r22
    168c:	f7 06       	cpc	r15, r23
    168e:	09 f4       	brne	.+2      	; 0x1692 <move_window+0x36>
    1690:	49 c0       	rjmp	.+146    	; 0x1724 <move_window+0xc8>
#if !_FS_READONLY
		if (fs->wflag) {	/* Write back dirty window if needed */
    1692:	8c 81       	ldd	r24, Y+4	; 0x04
    1694:	88 23       	and	r24, r24
    1696:	91 f1       	breq	.+100    	; 0x16fc <move_window+0xa0>
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
    1698:	8e e2       	ldi	r24, 0x2E	; 46
    169a:	68 2e       	mov	r6, r24
    169c:	71 2c       	mov	r7, r1
    169e:	6c 0e       	add	r6, r28
    16a0:	7d 1e       	adc	r7, r29
    16a2:	89 81       	ldd	r24, Y+1	; 0x01
    16a4:	b3 01       	movw	r22, r6
    16a6:	a7 01       	movw	r20, r14
    16a8:	96 01       	movw	r18, r12
    16aa:	01 e0       	ldi	r16, 0x01	; 1
    16ac:	15 df       	rcall	.-470    	; 0x14d8 <disk_write>
    16ae:	88 23       	and	r24, r24
    16b0:	d9 f5       	brne	.+118    	; 0x1728 <move_window+0xcc>
    16b2:	1c 82       	std	Y+4, r1	; 0x04
				return FR_DISK_ERR;
			fs->wflag = 0;
    16b4:	8a 8d       	ldd	r24, Y+26	; 0x1a
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
    16b6:	9b 8d       	ldd	r25, Y+27	; 0x1b
    16b8:	ac 8d       	ldd	r26, Y+28	; 0x1c
    16ba:	bd 8d       	ldd	r27, Y+29	; 0x1d
    16bc:	4e 8d       	ldd	r20, Y+30	; 0x1e
    16be:	5f 8d       	ldd	r21, Y+31	; 0x1f
    16c0:	68 a1       	lds	r22, 0x48
    16c2:	79 a1       	lds	r23, 0x49
    16c4:	84 0f       	add	r24, r20
    16c6:	95 1f       	adc	r25, r21
    16c8:	a6 1f       	adc	r26, r22
    16ca:	b7 1f       	adc	r27, r23
    16cc:	c8 16       	cp	r12, r24
    16ce:	d9 06       	cpc	r13, r25
    16d0:	ea 06       	cpc	r14, r26
    16d2:	fb 06       	cpc	r15, r27
    16d4:	98 f4       	brcc	.+38     	; 0x16fc <move_window+0xa0>
    16d6:	1b 81       	ldd	r17, Y+3	; 0x03
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
    16d8:	0f c0       	rjmp	.+30     	; 0x16f8 <move_window+0x9c>
    16da:	8a 8d       	ldd	r24, Y+26	; 0x1a
					wsect += fs->fsize;
    16dc:	9b 8d       	ldd	r25, Y+27	; 0x1b
    16de:	ac 8d       	ldd	r26, Y+28	; 0x1c
    16e0:	bd 8d       	ldd	r27, Y+29	; 0x1d
    16e2:	c8 0e       	add	r12, r24
    16e4:	d9 1e       	adc	r13, r25
    16e6:	ea 1e       	adc	r14, r26
    16e8:	fb 1e       	adc	r15, r27
    16ea:	89 81       	ldd	r24, Y+1	; 0x01
					disk_write(fs->drv, fs->win, wsect, 1);
    16ec:	b3 01       	movw	r22, r6
    16ee:	a7 01       	movw	r20, r14
    16f0:	96 01       	movw	r18, r12
    16f2:	01 e0       	ldi	r16, 0x01	; 1
    16f4:	f1 de       	rcall	.-542    	; 0x14d8 <disk_write>
    16f6:	11 50       	subi	r17, 0x01	; 1
    16f8:	12 30       	cpi	r17, 0x02	; 2
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
				return FR_DISK_ERR;
			fs->wflag = 0;
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
    16fa:	78 f7       	brcc	.-34     	; 0x16da <move_window+0x7e>
    16fc:	81 14       	cp	r8, r1
    16fe:	91 04       	cpc	r9, r1
					disk_write(fs->drv, fs->win, wsect, 1);
				}
			}
		}
#endif
		if (sector) {
    1700:	a1 04       	cpc	r10, r1
    1702:	b1 04       	cpc	r11, r1
    1704:	79 f0       	breq	.+30     	; 0x1724 <move_window+0xc8>
    1706:	be 01       	movw	r22, r28
    1708:	62 5d       	subi	r22, 0xD2	; 210
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK)
    170a:	7f 4f       	sbci	r23, 0xFF	; 255
    170c:	89 81       	ldd	r24, Y+1	; 0x01
    170e:	a5 01       	movw	r20, r10
    1710:	94 01       	movw	r18, r8
    1712:	01 e0       	ldi	r16, 0x01	; 1
    1714:	d6 de       	rcall	.-596    	; 0x14c2 <disk_read>
    1716:	88 23       	and	r24, r24
    1718:	39 f4       	brne	.+14     	; 0x1728 <move_window+0xcc>
    171a:	8a a6       	lds	r24, 0xba
    171c:	9b a6       	lds	r25, 0xbb
    171e:	ac a6       	lds	r26, 0xbc
				return FR_DISK_ERR;
			fs->winsect = sector;
    1720:	bd a6       	lds	r27, 0xbd
    1722:	03 c0       	rjmp	.+6      	; 0x172a <move_window+0xce>
    1724:	80 e0       	ldi	r24, 0x00	; 0
    1726:	01 c0       	rjmp	.+2      	; 0x172a <move_window+0xce>
    1728:	81 e0       	ldi	r24, 0x01	; 1
		}
	}

	return FR_OK;
    172a:	df 91       	pop	r29
    172c:	cf 91       	pop	r28
			}
		}
#endif
		if (sector) {
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK)
				return FR_DISK_ERR;
    172e:	1f 91       	pop	r17
			fs->winsect = sector;
		}
	}

	return FR_OK;
}
    1730:	0f 91       	pop	r16
    1732:	ff 90       	pop	r15
    1734:	ef 90       	pop	r14
    1736:	df 90       	pop	r13
    1738:	cf 90       	pop	r12
    173a:	bf 90       	pop	r11
    173c:	af 90       	pop	r10
    173e:	9f 90       	pop	r9
    1740:	8f 90       	pop	r8
    1742:	7f 90       	pop	r7
    1744:	6f 90       	pop	r6
    1746:	08 95       	ret

00001748 <check_fs>:
    1748:	0f 93       	push	r16
    174a:	cf 93       	push	r28
    174c:	df 93       	push	r29
static
BYTE check_fs (	/* 0:FAT-VBR, 1:Any BR but not FAT, 2:Not a BR, 3:Disk error */
	FATFS *fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
    174e:	ec 01       	movw	r28, r24
    1750:	9a 01       	movw	r18, r20
    1752:	ab 01       	movw	r20, r22
	if (disk_read(fs->drv, fs->win, sect, 1) != RES_OK)	/* Load boot record */
    1754:	bc 01       	movw	r22, r24
    1756:	62 5d       	subi	r22, 0xD2	; 210
    1758:	7f 4f       	sbci	r23, 0xFF	; 255
    175a:	89 81       	ldd	r24, Y+1	; 0x01
    175c:	01 e0       	ldi	r16, 0x01	; 1
    175e:	b1 de       	rcall	.-670    	; 0x14c2 <disk_read>
    1760:	88 23       	and	r24, r24
    1762:	51 f5       	brne	.+84     	; 0x17b8 <check_fs+0x70>
    1764:	fe 01       	movw	r30, r28
		return 3;
	if (LD_WORD(&fs->win[BS_55AA]) != 0xAA55)		/* Check record signature (always placed at offset 510 even if the sector size is >512) */
    1766:	e4 5d       	subi	r30, 0xD4	; 212
    1768:	fd 4f       	sbci	r31, 0xFD	; 253
    176a:	80 81       	ld	r24, Z
    176c:	91 81       	ldd	r25, Z+1	; 0x01
    176e:	2a ea       	ldi	r18, 0xAA	; 170
    1770:	85 35       	cpi	r24, 0x55	; 85
    1772:	92 07       	cpc	r25, r18
    1774:	19 f5       	brne	.+70     	; 0x17bc <check_fs+0x74>
    1776:	fe 01       	movw	r30, r28
		return 2;

	if ((LD_DWORD(&fs->win[BS_FilSysType]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
    1778:	ec 59       	subi	r30, 0x9C	; 156
    177a:	ff 4f       	sbci	r31, 0xFF	; 255
    177c:	80 81       	ld	r24, Z
    177e:	91 81       	ldd	r25, Z+1	; 0x01
    1780:	a2 81       	ldd	r26, Z+2	; 0x02
    1782:	b3 81       	ldd	r27, Z+3	; 0x03
    1784:	b0 70       	andi	r27, 0x00	; 0
    1786:	86 34       	cpi	r24, 0x46	; 70
    1788:	21 e4       	ldi	r18, 0x41	; 65
    178a:	92 07       	cpc	r25, r18
    178c:	24 e5       	ldi	r18, 0x54	; 84
    178e:	a2 07       	cpc	r26, r18
    1790:	20 e0       	ldi	r18, 0x00	; 0
    1792:	b2 07       	cpc	r27, r18
    1794:	a9 f0       	breq	.+42     	; 0x17c0 <check_fs+0x78>
    1796:	c0 58       	subi	r28, 0x80	; 128
		return 0;
	if ((LD_DWORD(&fs->win[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)
    1798:	df 4f       	sbci	r29, 0xFF	; 255
    179a:	48 81       	ld	r20, Y
    179c:	59 81       	ldd	r21, Y+1	; 0x01
    179e:	6a 81       	ldd	r22, Y+2	; 0x02
    17a0:	7b 81       	ldd	r23, Y+3	; 0x03
    17a2:	70 70       	andi	r23, 0x00	; 0
    17a4:	81 e0       	ldi	r24, 0x01	; 1
	FATFS *fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
	if (disk_read(fs->drv, fs->win, sect, 1) != RES_OK)	/* Load boot record */
		return 3;
    17a6:	46 34       	cpi	r20, 0x46	; 70
    17a8:	91 e4       	ldi	r25, 0x41	; 65
    17aa:	59 07       	cpc	r21, r25
    17ac:	94 e5       	ldi	r25, 0x54	; 84
    17ae:	69 07       	cpc	r22, r25
    17b0:	90 e0       	ldi	r25, 0x00	; 0
    17b2:	79 07       	cpc	r23, r25
    17b4:	31 f4       	brne	.+12     	; 0x17c2 <check_fs+0x7a>
    17b6:	04 c0       	rjmp	.+8      	; 0x17c0 <check_fs+0x78>
    17b8:	83 e0       	ldi	r24, 0x03	; 3
    17ba:	03 c0       	rjmp	.+6      	; 0x17c2 <check_fs+0x7a>
    17bc:	82 e0       	ldi	r24, 0x02	; 2
	if (LD_WORD(&fs->win[BS_55AA]) != 0xAA55)		/* Check record signature (always placed at offset 510 even if the sector size is >512) */
		return 2;
    17be:	01 c0       	rjmp	.+2      	; 0x17c2 <check_fs+0x7a>
    17c0:	80 e0       	ldi	r24, 0x00	; 0

	if ((LD_DWORD(&fs->win[BS_FilSysType]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
		return 0;
    17c2:	df 91       	pop	r29
	if ((LD_DWORD(&fs->win[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)
		return 0;

	return 1;
}
    17c4:	cf 91       	pop	r28
    17c6:	0f 91       	pop	r16
    17c8:	08 95       	ret

000017ca <ld_clust.isra.0>:
    17ca:	0f 93       	push	r16
/*-----------------------------------------------------------------------*/
/* Directory handling - Load/Store start cluster number                  */
/*-----------------------------------------------------------------------*/

static
DWORD ld_clust (
    17cc:	1f 93       	push	r17
    17ce:	fb 01       	movw	r30, r22
	BYTE *dir	/* Pointer to the directory entry */
)
{
	DWORD cl;

	cl = LD_WORD(dir+DIR_FstClusLO);
    17d0:	02 8d       	ldd	r16, Z+26	; 0x1a
    17d2:	13 8d       	ldd	r17, Z+27	; 0x1b
    17d4:	20 e0       	ldi	r18, 0x00	; 0
    17d6:	30 e0       	ldi	r19, 0x00	; 0
	if (fs->fs_type == FS_FAT32)
    17d8:	83 30       	cpi	r24, 0x03	; 3
    17da:	59 f4       	brne	.+22     	; 0x17f2 <ld_clust.isra.0+0x28>
		cl |= (DWORD)LD_WORD(dir+DIR_FstClusHI) << 16;
    17dc:	84 89       	ldd	r24, Z+20	; 0x14
    17de:	95 89       	ldd	r25, Z+21	; 0x15
    17e0:	a0 e0       	ldi	r26, 0x00	; 0
    17e2:	b0 e0       	ldi	r27, 0x00	; 0
    17e4:	dc 01       	movw	r26, r24
    17e6:	99 27       	eor	r25, r25
    17e8:	88 27       	eor	r24, r24
    17ea:	08 2b       	or	r16, r24
    17ec:	19 2b       	or	r17, r25
    17ee:	2a 2b       	or	r18, r26
    17f0:	3b 2b       	or	r19, r27

	return cl;
}
    17f2:	b8 01       	movw	r22, r16
    17f4:	c9 01       	movw	r24, r18
    17f6:	1f 91       	pop	r17
    17f8:	0f 91       	pop	r16
    17fa:	08 95       	ret

000017fc <clust2sect>:

DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS *fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
    17fc:	0f 93       	push	r16
    17fe:	1f 93       	push	r17
    1800:	cf 93       	push	r28
    1802:	df 93       	push	r29
    1804:	ec 01       	movw	r28, r24
    1806:	db 01       	movw	r26, r22
    1808:	ca 01       	movw	r24, r20
	clst -= 2;
    180a:	02 97       	sbiw	r24, 0x02	; 2
    180c:	a1 09       	sbc	r26, r1
    180e:	b1 09       	sbc	r27, r1
	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
    1810:	4e 89       	ldd	r20, Y+22	; 0x16
    1812:	5f 89       	ldd	r21, Y+23	; 0x17
    1814:	68 8d       	ldd	r22, Y+24	; 0x18
    1816:	79 8d       	ldd	r23, Y+25	; 0x19
    1818:	42 50       	subi	r20, 0x02	; 2
    181a:	50 40       	sbci	r21, 0x00	; 0
    181c:	60 40       	sbci	r22, 0x00	; 0
    181e:	70 40       	sbci	r23, 0x00	; 0
    1820:	84 17       	cp	r24, r20
    1822:	95 07       	cpc	r25, r21
    1824:	a6 07       	cpc	r26, r22
    1826:	b7 07       	cpc	r27, r23
    1828:	98 f4       	brcc	.+38     	; 0x1850 <clust2sect+0x54>
	return clst * fs->csize + fs->database;
    182a:	2a 81       	ldd	r18, Y+2	; 0x02
    182c:	30 e0       	ldi	r19, 0x00	; 0
    182e:	40 e0       	ldi	r20, 0x00	; 0
    1830:	50 e0       	ldi	r21, 0x00	; 0
    1832:	bc 01       	movw	r22, r24
    1834:	cd 01       	movw	r24, r26
    1836:	0e 94 c3 24 	call	0x4986	; 0x4986 <__mulsi3>
    183a:	8b 01       	movw	r16, r22
    183c:	9c 01       	movw	r18, r24
    183e:	8e a1       	lds	r24, 0x4e
    1840:	9f a1       	lds	r25, 0x4f
    1842:	a8 a5       	lds	r26, 0x68
    1844:	b9 a5       	lds	r27, 0x69
    1846:	08 0f       	add	r16, r24
    1848:	19 1f       	adc	r17, r25
    184a:	2a 1f       	adc	r18, r26
    184c:	3b 1f       	adc	r19, r27
    184e:	03 c0       	rjmp	.+6      	; 0x1856 <clust2sect+0x5a>
	FATFS *fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;
	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
    1850:	00 e0       	ldi	r16, 0x00	; 0
    1852:	10 e0       	ldi	r17, 0x00	; 0
    1854:	98 01       	movw	r18, r16
	return clst * fs->csize + fs->database;
}
    1856:	b8 01       	movw	r22, r16
    1858:	c9 01       	movw	r24, r18
    185a:	df 91       	pop	r29
    185c:	cf 91       	pop	r28
    185e:	1f 91       	pop	r17
    1860:	0f 91       	pop	r16
    1862:	08 95       	ret

00001864 <get_fat>:

DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, Else:Cluster status */
	FATFS *fs,	/* File system object */
	DWORD clst	/* Cluster# to get the link information */
)
{
    1864:	bf 92       	push	r11
    1866:	cf 92       	push	r12
    1868:	df 92       	push	r13
    186a:	ef 92       	push	r14
    186c:	ff 92       	push	r15
    186e:	0f 93       	push	r16
    1870:	1f 93       	push	r17
    1872:	cf 93       	push	r28
    1874:	df 93       	push	r29
    1876:	ec 01       	movw	r28, r24
    1878:	6a 01       	movw	r12, r20
    187a:	7b 01       	movw	r14, r22
	UINT wc, bc;
	BYTE *p;


	if (clst < 2 || clst >= fs->n_fatent)	/* Check range */
    187c:	42 30       	cpi	r20, 0x02	; 2
    187e:	51 05       	cpc	r21, r1
    1880:	61 05       	cpc	r22, r1
    1882:	71 05       	cpc	r23, r1
    1884:	08 f4       	brcc	.+2      	; 0x1888 <get_fat+0x24>
    1886:	a0 c0       	rjmp	.+320    	; 0x19c8 <get_fat+0x164>
    1888:	8e 89       	ldd	r24, Y+22	; 0x16
    188a:	9f 89       	ldd	r25, Y+23	; 0x17
    188c:	a8 8d       	ldd	r26, Y+24	; 0x18
    188e:	b9 8d       	ldd	r27, Y+25	; 0x19
    1890:	48 17       	cp	r20, r24
    1892:	59 07       	cpc	r21, r25
    1894:	6a 07       	cpc	r22, r26
    1896:	7b 07       	cpc	r23, r27
    1898:	08 f0       	brcs	.+2      	; 0x189c <get_fat+0x38>
    189a:	96 c0       	rjmp	.+300    	; 0x19c8 <get_fat+0x164>
		return 1;

	switch (fs->fs_type) {
    189c:	88 81       	ld	r24, Y
    189e:	82 30       	cpi	r24, 0x02	; 2
    18a0:	09 f4       	brne	.+2      	; 0x18a4 <get_fat+0x40>
    18a2:	56 c0       	rjmp	.+172    	; 0x1950 <get_fat+0xec>
    18a4:	83 30       	cpi	r24, 0x03	; 3
    18a6:	09 f4       	brne	.+2      	; 0x18aa <get_fat+0x46>
    18a8:	6e c0       	rjmp	.+220    	; 0x1986 <get_fat+0x122>
    18aa:	81 30       	cpi	r24, 0x01	; 1
    18ac:	09 f0       	breq	.+2      	; 0x18b0 <get_fat+0x4c>
    18ae:	91 c0       	rjmp	.+290    	; 0x19d2 <get_fat+0x16e>
	case FS_FAT12 :
		bc = (UINT)clst; bc += bc / 2;
    18b0:	8a 01       	movw	r16, r20
    18b2:	16 95       	lsr	r17
    18b4:	07 95       	ror	r16
    18b6:	04 0f       	add	r16, r20
    18b8:	15 1f       	adc	r17, r21
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
    18ba:	a8 01       	movw	r20, r16
    18bc:	45 2f       	mov	r20, r21
    18be:	55 27       	eor	r21, r21
    18c0:	46 95       	lsr	r20
    18c2:	60 e0       	ldi	r22, 0x00	; 0
    18c4:	70 e0       	ldi	r23, 0x00	; 0
    18c6:	8e 8d       	ldd	r24, Y+30	; 0x1e
    18c8:	9f 8d       	ldd	r25, Y+31	; 0x1f
    18ca:	a8 a1       	lds	r26, 0x48
    18cc:	b9 a1       	lds	r27, 0x49
    18ce:	48 0f       	add	r20, r24
    18d0:	59 1f       	adc	r21, r25
    18d2:	6a 1f       	adc	r22, r26
    18d4:	7b 1f       	adc	r23, r27
    18d6:	ce 01       	movw	r24, r28
    18d8:	c1 de       	rcall	.-638    	; 0x165c <move_window>
    18da:	88 23       	and	r24, r24
    18dc:	09 f0       	breq	.+2      	; 0x18e0 <get_fat+0x7c>
    18de:	79 c0       	rjmp	.+242    	; 0x19d2 <get_fat+0x16e>
    18e0:	f8 01       	movw	r30, r16
		wc = fs->win[bc % SS(fs)]; bc++;
    18e2:	f1 70       	andi	r31, 0x01	; 1
    18e4:	ec 0f       	add	r30, r28
    18e6:	fd 1f       	adc	r31, r29
    18e8:	b6 a4       	lds	r27, 0xa6
    18ea:	0f 5f       	subi	r16, 0xFF	; 255
    18ec:	1f 4f       	sbci	r17, 0xFF	; 255
    18ee:	a8 01       	movw	r20, r16
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
    18f0:	45 2f       	mov	r20, r21
    18f2:	55 27       	eor	r21, r21
    18f4:	46 95       	lsr	r20
    18f6:	60 e0       	ldi	r22, 0x00	; 0
    18f8:	70 e0       	ldi	r23, 0x00	; 0
    18fa:	8e 8d       	ldd	r24, Y+30	; 0x1e
    18fc:	9f 8d       	ldd	r25, Y+31	; 0x1f
    18fe:	a8 a1       	lds	r26, 0x48
    1900:	b9 a1       	lds	r27, 0x49
    1902:	48 0f       	add	r20, r24
    1904:	59 1f       	adc	r21, r25
    1906:	6a 1f       	adc	r22, r26
    1908:	7b 1f       	adc	r23, r27
    190a:	ce 01       	movw	r24, r28
    190c:	a7 de       	rcall	.-690    	; 0x165c <move_window>
    190e:	88 23       	and	r24, r24
    1910:	09 f0       	breq	.+2      	; 0x1914 <get_fat+0xb0>
    1912:	5f c0       	rjmp	.+190    	; 0x19d2 <get_fat+0x16e>
    1914:	6b 2d       	mov	r22, r11
    1916:	70 e0       	ldi	r23, 0x00	; 0

	switch (fs->fs_type) {
	case FS_FAT12 :
		bc = (UINT)clst; bc += bc / 2;
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
		wc = fs->win[bc % SS(fs)]; bc++;
    1918:	f8 01       	movw	r30, r16
    191a:	f1 70       	andi	r31, 0x01	; 1
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
		wc |= fs->win[bc % SS(fs)] << 8;
    191c:	ec 0f       	add	r30, r28
    191e:	fd 1f       	adc	r31, r29
    1920:	96 a5       	lds	r25, 0x66
    1922:	80 e0       	ldi	r24, 0x00	; 0
    1924:	68 2b       	or	r22, r24
    1926:	79 2b       	or	r23, r25
    1928:	81 e0       	ldi	r24, 0x01	; 1
    192a:	c8 22       	and	r12, r24
		return (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
    192c:	dd 24       	eor	r13, r13
    192e:	c1 14       	cp	r12, r1
    1930:	d1 04       	cpc	r13, r1
    1932:	39 f0       	breq	.+14     	; 0x1942 <get_fat+0xde>
    1934:	c4 e0       	ldi	r28, 0x04	; 4
    1936:	76 95       	lsr	r23
    1938:	67 95       	ror	r22
    193a:	ca 95       	dec	r28
    193c:	e1 f7       	brne	.-8      	; 0x1936 <get_fat+0xd2>
    193e:	8b 01       	movw	r16, r22
    1940:	1f c0       	rjmp	.+62     	; 0x1980 <get_fat+0x11c>
    1942:	8b 01       	movw	r16, r22
    1944:	20 e0       	ldi	r18, 0x00	; 0
    1946:	30 e0       	ldi	r19, 0x00	; 0
    1948:	1f 70       	andi	r17, 0x0F	; 15
    194a:	20 70       	andi	r18, 0x00	; 0
    194c:	30 70       	andi	r19, 0x00	; 0
    194e:	44 c0       	rjmp	.+136    	; 0x19d8 <get_fat+0x174>
    1950:	45 2f       	mov	r20, r21
    1952:	56 2f       	mov	r21, r22

	case FS_FAT16 :
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)))) break;
    1954:	67 2f       	mov	r22, r23
    1956:	77 27       	eor	r23, r23
    1958:	8e 8d       	ldd	r24, Y+30	; 0x1e
    195a:	9f 8d       	ldd	r25, Y+31	; 0x1f
    195c:	a8 a1       	lds	r26, 0x48
    195e:	b9 a1       	lds	r27, 0x49
    1960:	48 0f       	add	r20, r24
    1962:	59 1f       	adc	r21, r25
    1964:	6a 1f       	adc	r22, r26
    1966:	7b 1f       	adc	r23, r27
    1968:	ce 01       	movw	r24, r28
    196a:	78 de       	rcall	.-784    	; 0x165c <move_window>
    196c:	88 23       	and	r24, r24
    196e:	89 f5       	brne	.+98     	; 0x19d2 <get_fat+0x16e>
    1970:	f6 01       	movw	r30, r12
    1972:	ee 0f       	add	r30, r30
    1974:	ff 1f       	adc	r31, r31
		p = &fs->win[clst * 2 % SS(fs)];
    1976:	f1 70       	andi	r31, 0x01	; 1
    1978:	ec 0f       	add	r30, r28
    197a:	fd 1f       	adc	r31, r29
    197c:	06 a5       	lds	r16, 0x66
		return LD_WORD(p);
    197e:	17 a5       	lds	r17, 0x67
    1980:	20 e0       	ldi	r18, 0x00	; 0
    1982:	30 e0       	ldi	r19, 0x00	; 0
    1984:	29 c0       	rjmp	.+82     	; 0x19d8 <get_fat+0x174>
    1986:	e7 e0       	ldi	r30, 0x07	; 7
    1988:	76 95       	lsr	r23
    198a:	67 95       	ror	r22

	case FS_FAT32 :
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)))) break;
    198c:	57 95       	ror	r21
    198e:	47 95       	ror	r20
    1990:	ea 95       	dec	r30
    1992:	d1 f7       	brne	.-12     	; 0x1988 <get_fat+0x124>
    1994:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1996:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1998:	a8 a1       	lds	r26, 0x48
    199a:	b9 a1       	lds	r27, 0x49
    199c:	48 0f       	add	r20, r24
    199e:	59 1f       	adc	r21, r25
    19a0:	6a 1f       	adc	r22, r26
    19a2:	7b 1f       	adc	r23, r27
    19a4:	ce 01       	movw	r24, r28
    19a6:	5a de       	rcall	.-844    	; 0x165c <move_window>
    19a8:	88 23       	and	r24, r24
    19aa:	99 f4       	brne	.+38     	; 0x19d2 <get_fat+0x16e>
    19ac:	f6 01       	movw	r30, r12
    19ae:	ee 0f       	add	r30, r30
    19b0:	ff 1f       	adc	r31, r31
    19b2:	ee 0f       	add	r30, r30
		p = &fs->win[clst * 4 % SS(fs)];
    19b4:	ff 1f       	adc	r31, r31
    19b6:	f1 70       	andi	r31, 0x01	; 1
    19b8:	ec 0f       	add	r30, r28
    19ba:	fd 1f       	adc	r31, r29
    19bc:	06 a5       	lds	r16, 0x66
    19be:	17 a5       	lds	r17, 0x67
		return LD_DWORD(p) & 0x0FFFFFFF;
    19c0:	20 a9       	sts	0x40, r18
    19c2:	31 a9       	sts	0x41, r19
    19c4:	3f 70       	andi	r19, 0x0F	; 15
    19c6:	08 c0       	rjmp	.+16     	; 0x19d8 <get_fat+0x174>
    19c8:	01 e0       	ldi	r16, 0x01	; 1
    19ca:	10 e0       	ldi	r17, 0x00	; 0
    19cc:	20 e0       	ldi	r18, 0x00	; 0
    19ce:	30 e0       	ldi	r19, 0x00	; 0
	UINT wc, bc;
	BYTE *p;


	if (clst < 2 || clst >= fs->n_fatent)	/* Check range */
		return 1;
    19d0:	03 c0       	rjmp	.+6      	; 0x19d8 <get_fat+0x174>
    19d2:	0f ef       	ldi	r16, 0xFF	; 255
    19d4:	1f ef       	ldi	r17, 0xFF	; 255
    19d6:	98 01       	movw	r18, r16
    19d8:	b8 01       	movw	r22, r16
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)))) break;
		p = &fs->win[clst * 4 % SS(fs)];
		return LD_DWORD(p) & 0x0FFFFFFF;
	}

	return 0xFFFFFFFF;	/* An error occurred at the disk I/O layer */
    19da:	c9 01       	movw	r24, r18
    19dc:	df 91       	pop	r29
    19de:	cf 91       	pop	r28
}
    19e0:	1f 91       	pop	r17
    19e2:	0f 91       	pop	r16
    19e4:	ff 90       	pop	r15
    19e6:	ef 90       	pop	r14
    19e8:	df 90       	pop	r13
    19ea:	cf 90       	pop	r12
    19ec:	bf 90       	pop	r11
    19ee:	08 95       	ret

000019f0 <dir_sdi.constprop.2>:
    19f0:	0f 93       	push	r16
    19f2:	1f 93       	push	r17
    19f4:	cf 93       	push	r28
    19f6:	df 93       	push	r29
/*-----------------------------------------------------------------------*/
/* Directory handling - Set directory index                              */
/*-----------------------------------------------------------------------*/

static
FRESULT dir_sdi (
    19f8:	8c 01       	movw	r16, r24
{
	DWORD clst;
	WORD ic;


	dj->index = idx;
    19fa:	dc 01       	movw	r26, r24
    19fc:	15 96       	adiw	r26, 0x05	; 5
    19fe:	1c 92       	st	X, r1
    1a00:	1e 92       	st	-X, r1
    1a02:	14 97       	sbiw	r26, 0x04	; 4
	clst = dj->sclust;
    1a04:	16 96       	adiw	r26, 0x06	; 6
    1a06:	4d 91       	ld	r20, X+
    1a08:	5d 91       	ld	r21, X+
    1a0a:	6d 91       	ld	r22, X+
    1a0c:	7c 91       	ld	r23, X
    1a0e:	19 97       	sbiw	r26, 0x09	; 9
	if (clst == 1 || clst >= dj->fs->n_fatent)	/* Check start cluster range */
    1a10:	41 30       	cpi	r20, 0x01	; 1
    1a12:	51 05       	cpc	r21, r1
    1a14:	61 05       	cpc	r22, r1
    1a16:	71 05       	cpc	r23, r1
    1a18:	09 f4       	brne	.+2      	; 0x1a1c <dir_sdi.constprop.2+0x2c>
    1a1a:	67 c0       	rjmp	.+206    	; 0x1aea <dir_sdi.constprop.2+0xfa>
    1a1c:	cd 91       	ld	r28, X+
    1a1e:	dc 91       	ld	r29, X
    1a20:	8e 89       	ldd	r24, Y+22	; 0x16
    1a22:	9f 89       	ldd	r25, Y+23	; 0x17
    1a24:	a8 8d       	ldd	r26, Y+24	; 0x18
    1a26:	b9 8d       	ldd	r27, Y+25	; 0x19
    1a28:	48 17       	cp	r20, r24
    1a2a:	59 07       	cpc	r21, r25
    1a2c:	6a 07       	cpc	r22, r26
    1a2e:	7b 07       	cpc	r23, r27
    1a30:	08 f0       	brcs	.+2      	; 0x1a34 <dir_sdi.constprop.2+0x44>
    1a32:	5b c0       	rjmp	.+182    	; 0x1aea <dir_sdi.constprop.2+0xfa>
		return FR_INT_ERR;
	if (!clst && dj->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
    1a34:	41 15       	cp	r20, r1
    1a36:	51 05       	cpc	r21, r1
    1a38:	61 05       	cpc	r22, r1
    1a3a:	71 05       	cpc	r23, r1
    1a3c:	d9 f4       	brne	.+54     	; 0x1a74 <dir_sdi.constprop.2+0x84>
    1a3e:	88 81       	ld	r24, Y
    1a40:	83 30       	cpi	r24, 0x03	; 3
    1a42:	49 f4       	brne	.+18     	; 0x1a56 <dir_sdi.constprop.2+0x66>
		clst = dj->fs->dirbase;
    1a44:	4a a1       	lds	r20, 0x4a
    1a46:	5b a1       	lds	r21, 0x4b
    1a48:	6c a1       	lds	r22, 0x4c
    1a4a:	7d a1       	lds	r23, 0x4d

	if (clst == 0) {	/* Static table (root-dir in FAT12/16) */
    1a4c:	41 15       	cp	r20, r1
    1a4e:	51 05       	cpc	r21, r1
    1a50:	61 05       	cpc	r22, r1
    1a52:	71 05       	cpc	r23, r1
    1a54:	79 f4       	brne	.+30     	; 0x1a74 <dir_sdi.constprop.2+0x84>
		dj->clust = clst;
    1a56:	f8 01       	movw	r30, r16
    1a58:	12 86       	std	Z+10, r1	; 0x0a
    1a5a:	13 86       	std	Z+11, r1	; 0x0b
    1a5c:	14 86       	std	Z+12, r1	; 0x0c
    1a5e:	15 86       	std	Z+13, r1	; 0x0d
		if (idx >= dj->fs->n_rootdir)		/* Index is out of range */
    1a60:	88 85       	ldd	r24, Y+8	; 0x08
    1a62:	99 85       	ldd	r25, Y+9	; 0x09
    1a64:	00 97       	sbiw	r24, 0x00	; 0
    1a66:	09 f4       	brne	.+2      	; 0x1a6a <dir_sdi.constprop.2+0x7a>
    1a68:	40 c0       	rjmp	.+128    	; 0x1aea <dir_sdi.constprop.2+0xfa>
			return FR_INT_ERR;
		dj->sect = dj->fs->dirbase + idx / (SS(dj->fs) / SZ_DIR);	/* Sector# */
    1a6a:	8a a1       	lds	r24, 0x4a
    1a6c:	9b a1       	lds	r25, 0x4b
    1a6e:	ac a1       	lds	r26, 0x4c
    1a70:	bd a1       	lds	r27, 0x4d
    1a72:	2d c0       	rjmp	.+90     	; 0x1ace <dir_sdi.constprop.2+0xde>
	}
	else {				/* Dynamic table (sub-dirs or root-dir in FAT32) */
		ic = SS(dj->fs) / SZ_DIR * dj->fs->csize;	/* Entries per cluster */
    1a74:	8a 81       	ldd	r24, Y+2	; 0x02
		while (idx >= ic) {	/* Follow cluster chain */
    1a76:	88 23       	and	r24, r24
    1a78:	01 f5       	brne	.+64     	; 0x1aba <dir_sdi.constprop.2+0xca>
			clst = get_fat(dj->fs, clst);				/* Get next cluster */
    1a7a:	d8 01       	movw	r26, r16
    1a7c:	8d 91       	ld	r24, X+
    1a7e:	9c 91       	ld	r25, X
    1a80:	f1 de       	rcall	.-542    	; 0x1864 <get_fat>
    1a82:	ab 01       	movw	r20, r22
    1a84:	bc 01       	movw	r22, r24
    1a86:	4f 3f       	cpi	r20, 0xFF	; 255
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
    1a88:	bf ef       	ldi	r27, 0xFF	; 255
    1a8a:	5b 07       	cpc	r21, r27
    1a8c:	bf ef       	ldi	r27, 0xFF	; 255
    1a8e:	6b 07       	cpc	r22, r27
    1a90:	bf ef       	ldi	r27, 0xFF	; 255
    1a92:	7b 07       	cpc	r23, r27
    1a94:	41 f1       	breq	.+80     	; 0x1ae6 <dir_sdi.constprop.2+0xf6>
    1a96:	42 30       	cpi	r20, 0x02	; 2
			if (clst < 2 || clst >= dj->fs->n_fatent)	/* Reached to end of table or int error */
    1a98:	51 05       	cpc	r21, r1
    1a9a:	61 05       	cpc	r22, r1
    1a9c:	71 05       	cpc	r23, r1
    1a9e:	28 f1       	brcs	.+74     	; 0x1aea <dir_sdi.constprop.2+0xfa>
    1aa0:	d8 01       	movw	r26, r16
    1aa2:	ed 91       	ld	r30, X+
    1aa4:	fc 91       	ld	r31, X
    1aa6:	86 89       	ldd	r24, Z+22	; 0x16
    1aa8:	97 89       	ldd	r25, Z+23	; 0x17
    1aaa:	a0 8d       	ldd	r26, Z+24	; 0x18
    1aac:	b1 8d       	ldd	r27, Z+25	; 0x19
    1aae:	48 17       	cp	r20, r24
    1ab0:	59 07       	cpc	r21, r25
    1ab2:	6a 07       	cpc	r22, r26
    1ab4:	7b 07       	cpc	r23, r27
    1ab6:	08 f3       	brcs	.-62     	; 0x1a7a <dir_sdi.constprop.2+0x8a>
    1ab8:	18 c0       	rjmp	.+48     	; 0x1aea <dir_sdi.constprop.2+0xfa>
    1aba:	f8 01       	movw	r30, r16
				return FR_INT_ERR;
			idx -= ic;
		}
		dj->clust = clst;
    1abc:	42 87       	std	Z+10, r20	; 0x0a
    1abe:	53 87       	std	Z+11, r21	; 0x0b
    1ac0:	64 87       	std	Z+12, r22	; 0x0c
    1ac2:	75 87       	std	Z+13, r23	; 0x0d
    1ac4:	ce 01       	movw	r24, r28
		dj->sect = clust2sect(dj->fs, clst) + idx / (SS(dj->fs) / SZ_DIR);	/* Sector# */
    1ac6:	9a de       	rcall	.-716    	; 0x17fc <clust2sect>
    1ac8:	dc 01       	movw	r26, r24
    1aca:	cb 01       	movw	r24, r22
    1acc:	f8 01       	movw	r30, r16
    1ace:	86 87       	std	Z+14, r24	; 0x0e
    1ad0:	97 87       	std	Z+15, r25	; 0x0f
    1ad2:	a0 8b       	std	Z+16, r26	; 0x10
    1ad4:	b1 8b       	std	Z+17, r27	; 0x11
    1ad6:	ae 96       	adiw	r28, 0x2e	; 46
    1ad8:	d8 01       	movw	r26, r16
	}

	dj->dir = dj->fs->win + (idx % (SS(dj->fs) / SZ_DIR)) * SZ_DIR;	/* Ptr to the entry in the sector */
    1ada:	53 96       	adiw	r26, 0x13	; 19
    1adc:	dc 93       	st	X, r29
    1ade:	ce 93       	st	-X, r28
    1ae0:	52 97       	sbiw	r26, 0x12	; 18
    1ae2:	80 e0       	ldi	r24, 0x00	; 0
    1ae4:	03 c0       	rjmp	.+6      	; 0x1aec <dir_sdi.constprop.2+0xfc>

	return FR_OK;	/* Seek succeeded */
    1ae6:	81 e0       	ldi	r24, 0x01	; 1
    1ae8:	01 c0       	rjmp	.+2      	; 0x1aec <dir_sdi.constprop.2+0xfc>
	}
	else {				/* Dynamic table (sub-dirs or root-dir in FAT32) */
		ic = SS(dj->fs) / SZ_DIR * dj->fs->csize;	/* Entries per cluster */
		while (idx >= ic) {	/* Follow cluster chain */
			clst = get_fat(dj->fs, clst);				/* Get next cluster */
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
    1aea:	82 e0       	ldi	r24, 0x02	; 2
    1aec:	df 91       	pop	r29
			if (clst < 2 || clst >= dj->fs->n_fatent)	/* Reached to end of table or int error */
				return FR_INT_ERR;
    1aee:	cf 91       	pop	r28
	}

	dj->dir = dj->fs->win + (idx % (SS(dj->fs) / SZ_DIR)) * SZ_DIR;	/* Ptr to the entry in the sector */

	return FR_OK;	/* Seek succeeded */
}
    1af0:	1f 91       	pop	r17
    1af2:	0f 91       	pop	r16
    1af4:	08 95       	ret

00001af6 <put_fat>:
    1af6:	8f 92       	push	r8
    1af8:	9f 92       	push	r9
FRESULT put_fat (
	FATFS *fs,	/* File system object */
	DWORD clst,	/* Cluster# to be changed in range of 2 to fs->n_fatent - 1 */
	DWORD val	/* New value to mark the cluster */
)
{
    1afa:	af 92       	push	r10
    1afc:	bf 92       	push	r11
    1afe:	cf 92       	push	r12
    1b00:	df 92       	push	r13
    1b02:	ef 92       	push	r14
    1b04:	ff 92       	push	r15
    1b06:	0f 93       	push	r16
    1b08:	1f 93       	push	r17
    1b0a:	cf 93       	push	r28
    1b0c:	df 93       	push	r29
    1b0e:	ec 01       	movw	r28, r24
    1b10:	6a 01       	movw	r12, r20
    1b12:	7b 01       	movw	r14, r22
    1b14:	48 01       	movw	r8, r16
    1b16:	59 01       	movw	r10, r18
	UINT bc;
	BYTE *p;
	FRESULT res;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
    1b18:	42 30       	cpi	r20, 0x02	; 2
    1b1a:	51 05       	cpc	r21, r1
    1b1c:	61 05       	cpc	r22, r1
    1b1e:	71 05       	cpc	r23, r1
    1b20:	08 f4       	brcc	.+2      	; 0x1b24 <put_fat+0x2e>
    1b22:	b9 c0       	rjmp	.+370    	; 0x1c96 <put_fat+0x1a0>
    1b24:	8e 89       	ldd	r24, Y+22	; 0x16
    1b26:	9f 89       	ldd	r25, Y+23	; 0x17
    1b28:	a8 8d       	ldd	r26, Y+24	; 0x18
    1b2a:	b9 8d       	ldd	r27, Y+25	; 0x19
    1b2c:	48 17       	cp	r20, r24
    1b2e:	59 07       	cpc	r21, r25
    1b30:	6a 07       	cpc	r22, r26
    1b32:	7b 07       	cpc	r23, r27
    1b34:	08 f0       	brcs	.+2      	; 0x1b38 <put_fat+0x42>
    1b36:	af c0       	rjmp	.+350    	; 0x1c96 <put_fat+0x1a0>
		res = FR_INT_ERR;

	} else {
		switch (fs->fs_type) {
    1b38:	88 81       	ld	r24, Y
    1b3a:	82 30       	cpi	r24, 0x02	; 2
    1b3c:	09 f4       	brne	.+2      	; 0x1b40 <put_fat+0x4a>
    1b3e:	60 c0       	rjmp	.+192    	; 0x1c00 <put_fat+0x10a>
    1b40:	83 30       	cpi	r24, 0x03	; 3
    1b42:	09 f4       	brne	.+2      	; 0x1b46 <put_fat+0x50>
    1b44:	77 c0       	rjmp	.+238    	; 0x1c34 <put_fat+0x13e>
    1b46:	81 30       	cpi	r24, 0x01	; 1
    1b48:	09 f0       	breq	.+2      	; 0x1b4c <put_fat+0x56>
    1b4a:	a1 c0       	rjmp	.+322    	; 0x1c8e <put_fat+0x198>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
    1b4c:	8a 01       	movw	r16, r20
    1b4e:	16 95       	lsr	r17
    1b50:	07 95       	ror	r16
    1b52:	04 0f       	add	r16, r20
    1b54:	15 1f       	adc	r17, r21
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
    1b56:	a8 01       	movw	r20, r16
    1b58:	45 2f       	mov	r20, r21
    1b5a:	55 27       	eor	r21, r21
    1b5c:	46 95       	lsr	r20
    1b5e:	60 e0       	ldi	r22, 0x00	; 0
    1b60:	70 e0       	ldi	r23, 0x00	; 0
    1b62:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1b64:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1b66:	a8 a1       	lds	r26, 0x48
    1b68:	b9 a1       	lds	r27, 0x49
    1b6a:	48 0f       	add	r20, r24
    1b6c:	59 1f       	adc	r21, r25
    1b6e:	6a 1f       	adc	r22, r26
    1b70:	7b 1f       	adc	r23, r27
    1b72:	ce 01       	movw	r24, r28
    1b74:	73 dd       	rcall	.-1306   	; 0x165c <move_window>
    1b76:	88 23       	and	r24, r24
			if (res != FR_OK) break;
    1b78:	09 f0       	breq	.+2      	; 0x1b7c <put_fat+0x86>
    1b7a:	8a c0       	rjmp	.+276    	; 0x1c90 <put_fat+0x19a>
    1b7c:	f8 01       	movw	r30, r16
			p = &fs->win[bc % SS(fs)];
    1b7e:	f1 70       	andi	r31, 0x01	; 1
    1b80:	81 e0       	ldi	r24, 0x01	; 1
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
    1b82:	c8 22       	and	r12, r24
    1b84:	dd 24       	eor	r13, r13
    1b86:	ec 0f       	add	r30, r28
    1b88:	fd 1f       	adc	r31, r29
    1b8a:	c1 14       	cp	r12, r1
    1b8c:	d1 04       	cpc	r13, r1
    1b8e:	39 f0       	breq	.+14     	; 0x1b9e <put_fat+0xa8>
    1b90:	96 a5       	lds	r25, 0x66
    1b92:	9f 70       	andi	r25, 0x0F	; 15
    1b94:	88 2d       	mov	r24, r8
    1b96:	82 95       	swap	r24
    1b98:	80 7f       	andi	r24, 0xF0	; 240
    1b9a:	89 2b       	or	r24, r25
    1b9c:	01 c0       	rjmp	.+2      	; 0x1ba0 <put_fat+0xaa>
    1b9e:	88 2d       	mov	r24, r8
    1ba0:	86 a7       	lds	r24, 0x76
    1ba2:	0f 5f       	subi	r16, 0xFF	; 255
			bc++;
    1ba4:	1f 4f       	sbci	r17, 0xFF	; 255
    1ba6:	81 e0       	ldi	r24, 0x01	; 1
			fs->wflag = 1;
    1ba8:	8c 83       	std	Y+4, r24	; 0x04
    1baa:	a8 01       	movw	r20, r16
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
    1bac:	45 2f       	mov	r20, r21
    1bae:	55 27       	eor	r21, r21
    1bb0:	46 95       	lsr	r20
    1bb2:	60 e0       	ldi	r22, 0x00	; 0
    1bb4:	70 e0       	ldi	r23, 0x00	; 0
    1bb6:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1bb8:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1bba:	a8 a1       	lds	r26, 0x48
    1bbc:	b9 a1       	lds	r27, 0x49
    1bbe:	48 0f       	add	r20, r24
    1bc0:	59 1f       	adc	r21, r25
    1bc2:	6a 1f       	adc	r22, r26
    1bc4:	7b 1f       	adc	r23, r27
    1bc6:	ce 01       	movw	r24, r28
    1bc8:	49 dd       	rcall	.-1390   	; 0x165c <move_window>
    1bca:	88 23       	and	r24, r24
    1bcc:	09 f0       	breq	.+2      	; 0x1bd0 <put_fat+0xda>
			if (res != FR_OK) break;
    1bce:	60 c0       	rjmp	.+192    	; 0x1c90 <put_fat+0x19a>
    1bd0:	f8 01       	movw	r30, r16
    1bd2:	f1 70       	andi	r31, 0x01	; 1
			p = &fs->win[bc % SS(fs)];
    1bd4:	ec 0f       	add	r30, r28
    1bd6:	fd 1f       	adc	r31, r29
    1bd8:	c1 14       	cp	r12, r1
    1bda:	d1 04       	cpc	r13, r1
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
    1bdc:	51 f0       	breq	.+20     	; 0x1bf2 <put_fat+0xfc>
    1bde:	b5 01       	movw	r22, r10
    1be0:	a4 01       	movw	r20, r8
    1be2:	14 e0       	ldi	r17, 0x04	; 4
    1be4:	76 95       	lsr	r23
    1be6:	67 95       	ror	r22
    1be8:	57 95       	ror	r21
    1bea:	47 95       	ror	r20
    1bec:	1a 95       	dec	r17
    1bee:	d1 f7       	brne	.-12     	; 0x1be4 <put_fat+0xee>
    1bf0:	05 c0       	rjmp	.+10     	; 0x1bfc <put_fat+0x106>
    1bf2:	46 a5       	lds	r20, 0x66
    1bf4:	40 7f       	andi	r20, 0xF0	; 240
    1bf6:	99 2d       	mov	r25, r9
    1bf8:	9f 70       	andi	r25, 0x0F	; 15
    1bfa:	49 2b       	or	r20, r25
    1bfc:	46 a7       	lds	r20, 0x76
    1bfe:	48 c0       	rjmp	.+144    	; 0x1c90 <put_fat+0x19a>
    1c00:	45 2f       	mov	r20, r21
			break;
    1c02:	56 2f       	mov	r21, r22

		case FS_FAT16 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
    1c04:	67 2f       	mov	r22, r23
    1c06:	77 27       	eor	r23, r23
    1c08:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1c0a:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1c0c:	a8 a1       	lds	r26, 0x48
    1c0e:	b9 a1       	lds	r27, 0x49
    1c10:	48 0f       	add	r20, r24
    1c12:	59 1f       	adc	r21, r25
    1c14:	6a 1f       	adc	r22, r26
    1c16:	7b 1f       	adc	r23, r27
    1c18:	ce 01       	movw	r24, r28
    1c1a:	20 dd       	rcall	.-1472   	; 0x165c <move_window>
    1c1c:	88 23       	and	r24, r24
    1c1e:	c1 f5       	brne	.+112    	; 0x1c90 <put_fat+0x19a>
    1c20:	f6 01       	movw	r30, r12
			if (res != FR_OK) break;
    1c22:	ee 0f       	add	r30, r30
    1c24:	ff 1f       	adc	r31, r31
			p = &fs->win[clst * 2 % SS(fs)];
    1c26:	f1 70       	andi	r31, 0x01	; 1
    1c28:	be 96       	adiw	r30, 0x2e	; 46
    1c2a:	ec 0f       	add	r30, r28
    1c2c:	fd 1f       	adc	r31, r29
    1c2e:	91 82       	std	Z+1, r9	; 0x01
			ST_WORD(p, (WORD)val);
    1c30:	80 82       	st	Z, r8
    1c32:	2e c0       	rjmp	.+92     	; 0x1c90 <put_fat+0x19a>
    1c34:	e7 e0       	ldi	r30, 0x07	; 7
    1c36:	76 95       	lsr	r23
			break;
    1c38:	67 95       	ror	r22

		case FS_FAT32 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
    1c3a:	57 95       	ror	r21
    1c3c:	47 95       	ror	r20
    1c3e:	ea 95       	dec	r30
    1c40:	d1 f7       	brne	.-12     	; 0x1c36 <put_fat+0x140>
    1c42:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1c44:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1c46:	a8 a1       	lds	r26, 0x48
    1c48:	b9 a1       	lds	r27, 0x49
    1c4a:	48 0f       	add	r20, r24
    1c4c:	59 1f       	adc	r21, r25
    1c4e:	6a 1f       	adc	r22, r26
    1c50:	7b 1f       	adc	r23, r27
    1c52:	ce 01       	movw	r24, r28
    1c54:	03 dd       	rcall	.-1530   	; 0x165c <move_window>
    1c56:	88 23       	and	r24, r24
    1c58:	d9 f4       	brne	.+54     	; 0x1c90 <put_fat+0x19a>
    1c5a:	f6 01       	movw	r30, r12
    1c5c:	ee 0f       	add	r30, r30
			if (res != FR_OK) break;
    1c5e:	ff 1f       	adc	r31, r31
    1c60:	ee 0f       	add	r30, r30
			p = &fs->win[clst * 4 % SS(fs)];
    1c62:	ff 1f       	adc	r31, r31
    1c64:	f1 70       	andi	r31, 0x01	; 1
    1c66:	be 96       	adiw	r30, 0x2e	; 46
    1c68:	ec 0f       	add	r30, r28
    1c6a:	fd 1f       	adc	r31, r29
    1c6c:	40 81       	ld	r20, Z
    1c6e:	51 81       	ldd	r21, Z+1	; 0x01
    1c70:	62 81       	ldd	r22, Z+2	; 0x02
    1c72:	73 81       	ldd	r23, Z+3	; 0x03
			val |= LD_DWORD(p) & 0xF0000000;
    1c74:	40 70       	andi	r20, 0x00	; 0
    1c76:	50 70       	andi	r21, 0x00	; 0
    1c78:	60 70       	andi	r22, 0x00	; 0
    1c7a:	70 7f       	andi	r23, 0xF0	; 240
    1c7c:	48 29       	or	r20, r8
    1c7e:	59 29       	or	r21, r9
    1c80:	6a 29       	or	r22, r10
    1c82:	7b 29       	or	r23, r11
    1c84:	40 83       	st	Z, r20
    1c86:	51 83       	std	Z+1, r21	; 0x01
    1c88:	62 83       	std	Z+2, r22	; 0x02
    1c8a:	73 83       	std	Z+3, r23	; 0x03
			ST_DWORD(p, val);
    1c8c:	01 c0       	rjmp	.+2      	; 0x1c90 <put_fat+0x19a>
    1c8e:	82 e0       	ldi	r24, 0x02	; 2
    1c90:	91 e0       	ldi	r25, 0x01	; 1
    1c92:	9c 83       	std	Y+4, r25	; 0x04
			break;
    1c94:	01 c0       	rjmp	.+2      	; 0x1c98 <put_fat+0x1a2>

		default :
			res = FR_INT_ERR;
    1c96:	82 e0       	ldi	r24, 0x02	; 2
		}
		fs->wflag = 1;
    1c98:	df 91       	pop	r29
    1c9a:	cf 91       	pop	r28
    1c9c:	1f 91       	pop	r17
	BYTE *p;
	FRESULT res;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
		res = FR_INT_ERR;
    1c9e:	0f 91       	pop	r16
		}
		fs->wflag = 1;
	}

	return res;
}
    1ca0:	ff 90       	pop	r15
    1ca2:	ef 90       	pop	r14
    1ca4:	df 90       	pop	r13
    1ca6:	cf 90       	pop	r12
    1ca8:	bf 90       	pop	r11
    1caa:	af 90       	pop	r10
    1cac:	9f 90       	pop	r9
    1cae:	8f 90       	pop	r8
    1cb0:	08 95       	ret

00001cb2 <create_chain>:
    1cb2:	4f 92       	push	r4
    1cb4:	5f 92       	push	r5
    1cb6:	6f 92       	push	r6
    1cb8:	7f 92       	push	r7
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	FATFS *fs,			/* File system object */
	DWORD clst			/* Cluster# to stretch. 0 means create a new chain. */
)
{
    1cba:	8f 92       	push	r8
    1cbc:	9f 92       	push	r9
    1cbe:	af 92       	push	r10
    1cc0:	bf 92       	push	r11
    1cc2:	cf 92       	push	r12
    1cc4:	df 92       	push	r13
    1cc6:	ef 92       	push	r14
    1cc8:	ff 92       	push	r15
    1cca:	0f 93       	push	r16
    1ccc:	1f 93       	push	r17
    1cce:	cf 93       	push	r28
    1cd0:	df 93       	push	r29
    1cd2:	ec 01       	movw	r28, r24
    1cd4:	2a 01       	movw	r4, r20
    1cd6:	3b 01       	movw	r6, r22
	DWORD cs, ncl, scl;
	FRESULT res;


	if (clst == 0) {		/* Create a new chain */
    1cd8:	41 15       	cp	r20, r1
    1cda:	51 05       	cpc	r21, r1
    1cdc:	61 05       	cpc	r22, r1
    1cde:	71 05       	cpc	r23, r1
    1ce0:	99 f4       	brne	.+38     	; 0x1d08 <create_chain+0x56>
		scl = fs->last_clust;			/* Get suggested start point */
    1ce2:	8a 84       	ldd	r8, Y+10	; 0x0a
    1ce4:	9b 84       	ldd	r9, Y+11	; 0x0b
    1ce6:	ac 84       	ldd	r10, Y+12	; 0x0c
    1ce8:	bd 84       	ldd	r11, Y+13	; 0x0d
		if (!scl || scl >= fs->n_fatent) scl = 1;
    1cea:	81 14       	cp	r8, r1
    1cec:	91 04       	cpc	r9, r1
    1cee:	a1 04       	cpc	r10, r1
    1cf0:	b1 04       	cpc	r11, r1
    1cf2:	01 f1       	breq	.+64     	; 0x1d34 <create_chain+0x82>
    1cf4:	8e 89       	ldd	r24, Y+22	; 0x16
    1cf6:	9f 89       	ldd	r25, Y+23	; 0x17
    1cf8:	a8 8d       	ldd	r26, Y+24	; 0x18
    1cfa:	b9 8d       	ldd	r27, Y+25	; 0x19
    1cfc:	88 16       	cp	r8, r24
    1cfe:	99 06       	cpc	r9, r25
    1d00:	aa 06       	cpc	r10, r26
    1d02:	bb 06       	cpc	r11, r27
    1d04:	b8 f4       	brcc	.+46     	; 0x1d34 <create_chain+0x82>
    1d06:	1b c0       	rjmp	.+54     	; 0x1d3e <create_chain+0x8c>
	}
	else {					/* Stretch the current chain */
		cs = get_fat(fs, clst);			/* Check the cluster status */
    1d08:	ad dd       	rcall	.-1190   	; 0x1864 <get_fat>
    1d0a:	8b 01       	movw	r16, r22
    1d0c:	9c 01       	movw	r18, r24
    1d0e:	62 30       	cpi	r22, 0x02	; 2
		if (cs < 2) return 1;			/* It is an invalid cluster */
    1d10:	71 05       	cpc	r23, r1
    1d12:	81 05       	cpc	r24, r1
    1d14:	91 05       	cpc	r25, r1
    1d16:	08 f4       	brcc	.+2      	; 0x1d1a <create_chain+0x68>
    1d18:	90 c0       	rjmp	.+288    	; 0x1e3a <create_chain+0x188>
    1d1a:	8e 89       	ldd	r24, Y+22	; 0x16
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
    1d1c:	9f 89       	ldd	r25, Y+23	; 0x17
    1d1e:	a8 8d       	ldd	r26, Y+24	; 0x18
    1d20:	b9 8d       	ldd	r27, Y+25	; 0x19
    1d22:	08 17       	cp	r16, r24
    1d24:	19 07       	cpc	r17, r25
    1d26:	2a 07       	cpc	r18, r26
    1d28:	3b 07       	cpc	r19, r27
    1d2a:	08 f4       	brcc	.+2      	; 0x1d2e <create_chain+0x7c>
    1d2c:	8a c0       	rjmp	.+276    	; 0x1e42 <create_chain+0x190>
    1d2e:	53 01       	movw	r10, r6
    1d30:	42 01       	movw	r8, r4
    1d32:	05 c0       	rjmp	.+10     	; 0x1d3e <create_chain+0x8c>
    1d34:	51 e0       	ldi	r21, 0x01	; 1
	FRESULT res;


	if (clst == 0) {		/* Create a new chain */
		scl = fs->last_clust;			/* Get suggested start point */
		if (!scl || scl >= fs->n_fatent) scl = 1;
    1d36:	85 2e       	mov	r8, r21
    1d38:	91 2c       	mov	r9, r1
    1d3a:	a1 2c       	mov	r10, r1
    1d3c:	b1 2c       	mov	r11, r1
    1d3e:	75 01       	movw	r14, r10
    1d40:	64 01       	movw	r12, r8
    1d42:	08 94       	sec
		scl = clst;
	}

	ncl = scl;				/* Start cluster */
	for (;;) {
		ncl++;							/* Next cluster */
    1d44:	c1 1c       	adc	r12, r1
    1d46:	d1 1c       	adc	r13, r1
    1d48:	e1 1c       	adc	r14, r1
    1d4a:	f1 1c       	adc	r15, r1
    1d4c:	8e 89       	ldd	r24, Y+22	; 0x16
		if (ncl >= fs->n_fatent) {		/* Wrap around */
    1d4e:	9f 89       	ldd	r25, Y+23	; 0x17
    1d50:	a8 8d       	ldd	r26, Y+24	; 0x18
    1d52:	b9 8d       	ldd	r27, Y+25	; 0x19
    1d54:	c8 16       	cp	r12, r24
    1d56:	d9 06       	cpc	r13, r25
    1d58:	ea 06       	cpc	r14, r26
    1d5a:	fb 06       	cpc	r15, r27
    1d5c:	60 f0       	brcs	.+24     	; 0x1d76 <create_chain+0xc4>
    1d5e:	22 e0       	ldi	r18, 0x02	; 2
			ncl = 2;
			if (ncl > scl) return 0;	/* No free cluster */
    1d60:	82 16       	cp	r8, r18
    1d62:	91 04       	cpc	r9, r1
    1d64:	a1 04       	cpc	r10, r1
    1d66:	b1 04       	cpc	r11, r1
    1d68:	08 f4       	brcc	.+2      	; 0x1d6c <create_chain+0xba>
    1d6a:	60 c0       	rjmp	.+192    	; 0x1e2c <create_chain+0x17a>
    1d6c:	42 e0       	ldi	r20, 0x02	; 2

	ncl = scl;				/* Start cluster */
	for (;;) {
		ncl++;							/* Next cluster */
		if (ncl >= fs->n_fatent) {		/* Wrap around */
			ncl = 2;
    1d6e:	c4 2e       	mov	r12, r20
    1d70:	d1 2c       	mov	r13, r1
    1d72:	e1 2c       	mov	r14, r1
    1d74:	f1 2c       	mov	r15, r1
    1d76:	ce 01       	movw	r24, r28
			if (ncl > scl) return 0;	/* No free cluster */
		}
		cs = get_fat(fs, ncl);			/* Get the cluster status */
    1d78:	b7 01       	movw	r22, r14
    1d7a:	a6 01       	movw	r20, r12
    1d7c:	73 dd       	rcall	.-1306   	; 0x1864 <get_fat>
    1d7e:	8b 01       	movw	r16, r22
    1d80:	9c 01       	movw	r18, r24
    1d82:	61 15       	cp	r22, r1
    1d84:	71 05       	cpc	r23, r1
		if (cs == 0) break;				/* Found a free cluster */
    1d86:	81 05       	cpc	r24, r1
    1d88:	91 05       	cpc	r25, r1
    1d8a:	a9 f0       	breq	.+42     	; 0x1db6 <create_chain+0x104>
    1d8c:	0f 3f       	cpi	r16, 0xFF	; 255
    1d8e:	8f ef       	ldi	r24, 0xFF	; 255
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
    1d90:	18 07       	cpc	r17, r24
    1d92:	8f ef       	ldi	r24, 0xFF	; 255
    1d94:	28 07       	cpc	r18, r24
    1d96:	8f ef       	ldi	r24, 0xFF	; 255
    1d98:	38 07       	cpc	r19, r24
    1d9a:	09 f4       	brne	.+2      	; 0x1d9e <create_chain+0xec>
    1d9c:	52 c0       	rjmp	.+164    	; 0x1e42 <create_chain+0x190>
    1d9e:	01 30       	cpi	r16, 0x01	; 1
    1da0:	11 05       	cpc	r17, r1
    1da2:	21 05       	cpc	r18, r1
    1da4:	31 05       	cpc	r19, r1
    1da6:	09 f4       	brne	.+2      	; 0x1daa <create_chain+0xf8>
    1da8:	4c c0       	rjmp	.+152    	; 0x1e42 <create_chain+0x190>
    1daa:	c8 14       	cp	r12, r8
    1dac:	d9 04       	cpc	r13, r9
			return cs;
		if (ncl == scl) return 0;		/* No free cluster */
    1dae:	ea 04       	cpc	r14, r10
    1db0:	fb 04       	cpc	r15, r11
    1db2:	39 f6       	brne	.-114    	; 0x1d42 <create_chain+0x90>
    1db4:	3b c0       	rjmp	.+118    	; 0x1e2c <create_chain+0x17a>
    1db6:	8c 2c       	mov	r8, r12
    1db8:	bd 2c       	mov	r11, r13
		if (ncl >= fs->n_fatent) {		/* Wrap around */
			ncl = 2;
			if (ncl > scl) return 0;	/* No free cluster */
		}
		cs = get_fat(fs, ncl);			/* Get the cluster status */
		if (cs == 0) break;				/* Found a free cluster */
    1dba:	ae 2c       	mov	r10, r14
    1dbc:	9f 2c       	mov	r9, r15
    1dbe:	ce 01       	movw	r24, r28
    1dc0:	a6 01       	movw	r20, r12
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
			return cs;
		if (ncl == scl) return 0;		/* No free cluster */
	}

	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
    1dc2:	b7 01       	movw	r22, r14
    1dc4:	0f ef       	ldi	r16, 0xFF	; 255
    1dc6:	1f ef       	ldi	r17, 0xFF	; 255
    1dc8:	2f ef       	ldi	r18, 0xFF	; 255
    1dca:	3f e0       	ldi	r19, 0x0F	; 15
    1dcc:	94 de       	rcall	.-728    	; 0x1af6 <put_fat>
    1dce:	88 23       	and	r24, r24
    1dd0:	39 f5       	brne	.+78     	; 0x1e20 <create_chain+0x16e>
    1dd2:	41 14       	cp	r4, r1
	if (res == FR_OK && clst != 0) {
    1dd4:	51 04       	cpc	r5, r1
    1dd6:	61 04       	cpc	r6, r1
    1dd8:	71 04       	cpc	r7, r1
    1dda:	41 f0       	breq	.+16     	; 0x1dec <create_chain+0x13a>
    1ddc:	ce 01       	movw	r24, r28
    1dde:	b3 01       	movw	r22, r6
    1de0:	a2 01       	movw	r20, r4
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
    1de2:	86 01       	movw	r16, r12
    1de4:	97 01       	movw	r18, r14
    1de6:	87 de       	rcall	.-754    	; 0x1af6 <put_fat>
    1de8:	88 23       	and	r24, r24
    1dea:	d1 f4       	brne	.+52     	; 0x1e20 <create_chain+0x16e>
    1dec:	8a 86       	std	Y+10, r8	; 0x0a
    1dee:	bb 86       	std	Y+11, r11	; 0x0b
	}
	if (res == FR_OK) {
    1df0:	ac 86       	std	Y+12, r10	; 0x0c
    1df2:	9d 86       	std	Y+13, r9	; 0x0d
		fs->last_clust = ncl;			/* Update FSINFO */
    1df4:	8e 85       	ldd	r24, Y+14	; 0x0e
    1df6:	9f 85       	ldd	r25, Y+15	; 0x0f
    1df8:	a8 89       	ldd	r26, Y+16	; 0x10
    1dfa:	b9 89       	ldd	r27, Y+17	; 0x11
		if (fs->free_clust != 0xFFFFFFFF) {
    1dfc:	8f 3f       	cpi	r24, 0xFF	; 255
    1dfe:	2f ef       	ldi	r18, 0xFF	; 255
    1e00:	92 07       	cpc	r25, r18
    1e02:	2f ef       	ldi	r18, 0xFF	; 255
    1e04:	a2 07       	cpc	r26, r18
    1e06:	2f ef       	ldi	r18, 0xFF	; 255
    1e08:	b2 07       	cpc	r27, r18
    1e0a:	a1 f0       	breq	.+40     	; 0x1e34 <create_chain+0x182>
    1e0c:	01 97       	sbiw	r24, 0x01	; 1
    1e0e:	a1 09       	sbc	r26, r1
    1e10:	b1 09       	sbc	r27, r1
    1e12:	8e 87       	std	Y+14, r24	; 0x0e
			fs->free_clust--;
    1e14:	9f 87       	std	Y+15, r25	; 0x0f
    1e16:	a8 8b       	std	Y+16, r26	; 0x10
    1e18:	b9 8b       	std	Y+17, r27	; 0x11
    1e1a:	81 e0       	ldi	r24, 0x01	; 1
    1e1c:	8d 83       	std	Y+5, r24	; 0x05
    1e1e:	0a c0       	rjmp	.+20     	; 0x1e34 <create_chain+0x182>
    1e20:	81 30       	cpi	r24, 0x01	; 1
			fs->fsi_flag = 1;
    1e22:	59 f4       	brne	.+22     	; 0x1e3a <create_chain+0x188>
    1e24:	0f ef       	ldi	r16, 0xFF	; 255
    1e26:	1f ef       	ldi	r17, 0xFF	; 255
		}
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
    1e28:	98 01       	movw	r18, r16
    1e2a:	0b c0       	rjmp	.+22     	; 0x1e42 <create_chain+0x190>
    1e2c:	00 e0       	ldi	r16, 0x00	; 0
    1e2e:	10 e0       	ldi	r17, 0x00	; 0
    1e30:	98 01       	movw	r18, r16
    1e32:	07 c0       	rjmp	.+14     	; 0x1e42 <create_chain+0x190>
		}
		cs = get_fat(fs, ncl);			/* Get the cluster status */
		if (cs == 0) break;				/* Found a free cluster */
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
			return cs;
		if (ncl == scl) return 0;		/* No free cluster */
    1e34:	97 01       	movw	r18, r14
    1e36:	86 01       	movw	r16, r12
    1e38:	04 c0       	rjmp	.+8      	; 0x1e42 <create_chain+0x190>
    1e3a:	01 e0       	ldi	r16, 0x01	; 1
	if (res == FR_OK && clst != 0) {
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
	}
	if (res == FR_OK) {
		fs->last_clust = ncl;			/* Update FSINFO */
		if (fs->free_clust != 0xFFFFFFFF) {
    1e3c:	10 e0       	ldi	r17, 0x00	; 0
    1e3e:	20 e0       	ldi	r18, 0x00	; 0
    1e40:	30 e0       	ldi	r19, 0x00	; 0
			fs->free_clust--;
			fs->fsi_flag = 1;
		}
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
    1e42:	b8 01       	movw	r22, r16
    1e44:	c9 01       	movw	r24, r18
    1e46:	df 91       	pop	r29
    1e48:	cf 91       	pop	r28
	}

	return ncl;		/* Return new cluster number or error code */
}
    1e4a:	1f 91       	pop	r17
    1e4c:	0f 91       	pop	r16
    1e4e:	ff 90       	pop	r15
    1e50:	ef 90       	pop	r14
    1e52:	df 90       	pop	r13
    1e54:	cf 90       	pop	r12
    1e56:	bf 90       	pop	r11
    1e58:	af 90       	pop	r10
    1e5a:	9f 90       	pop	r9
    1e5c:	8f 90       	pop	r8
    1e5e:	7f 90       	pop	r7
    1e60:	6f 90       	pop	r6
    1e62:	5f 90       	pop	r5
    1e64:	4f 90       	pop	r4
    1e66:	08 95       	ret

00001e68 <dir_next>:
    1e68:	8f 92       	push	r8
    1e6a:	9f 92       	push	r9
    1e6c:	af 92       	push	r10
    1e6e:	bf 92       	push	r11
static
FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table, FR_DENIED:EOT and could not stretch */
	DIR *dj,		/* Pointer to directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
    1e70:	cf 92       	push	r12
    1e72:	df 92       	push	r13
    1e74:	ef 92       	push	r14
    1e76:	ff 92       	push	r15
    1e78:	0f 93       	push	r16
    1e7a:	1f 93       	push	r17
    1e7c:	cf 93       	push	r28
    1e7e:	df 93       	push	r29
    1e80:	8c 01       	movw	r16, r24
    1e82:	eb 01       	movw	r28, r22
	DWORD clst;
	WORD i;


	stretch = stretch;		/* To suppress warning on read-only cfg. */
	i = dj->index + 1;
    1e84:	dc 01       	movw	r26, r24
    1e86:	14 96       	adiw	r26, 0x04	; 4
    1e88:	ad 90       	ld	r10, X+
    1e8a:	bc 90       	ld	r11, X
    1e8c:	15 97       	sbiw	r26, 0x05	; 5
    1e8e:	08 94       	sec
    1e90:	a1 1c       	adc	r10, r1
    1e92:	b1 1c       	adc	r11, r1
	if (!i || !dj->sect)	/* Report EOT when index has reached 65535 */
    1e94:	a1 14       	cp	r10, r1
    1e96:	b1 04       	cpc	r11, r1
    1e98:	09 f4       	brne	.+2      	; 0x1e9c <dir_next+0x34>
    1e9a:	f8 c0       	rjmp	.+496    	; 0x208c <dir_next+0x224>
    1e9c:	1e 96       	adiw	r26, 0x0e	; 14
    1e9e:	8d 91       	ld	r24, X+
    1ea0:	9d 91       	ld	r25, X+
    1ea2:	0d 90       	ld	r0, X+
    1ea4:	bc 91       	ld	r27, X
    1ea6:	a0 2d       	mov	r26, r0
    1ea8:	00 97       	sbiw	r24, 0x00	; 0
    1eaa:	a1 05       	cpc	r26, r1
    1eac:	b1 05       	cpc	r27, r1
    1eae:	09 f4       	brne	.+2      	; 0x1eb2 <dir_next+0x4a>
    1eb0:	ed c0       	rjmp	.+474    	; 0x208c <dir_next+0x224>
		return FR_NO_FILE;

	if (!(i % (SS(dj->fs) / SZ_DIR))) {	/* Sector changed? */
    1eb2:	2f e0       	ldi	r18, 0x0F	; 15
    1eb4:	82 2e       	mov	r8, r18
    1eb6:	91 2c       	mov	r9, r1
    1eb8:	8a 20       	and	r8, r10
    1eba:	9b 20       	and	r9, r11
    1ebc:	81 14       	cp	r8, r1
    1ebe:	91 04       	cpc	r9, r1
    1ec0:	09 f0       	breq	.+2      	; 0x1ec4 <dir_next+0x5c>
    1ec2:	ce c0       	rjmp	.+412    	; 0x2060 <dir_next+0x1f8>
		dj->sect++;					/* Next sector */
    1ec4:	01 96       	adiw	r24, 0x01	; 1
    1ec6:	a1 1d       	adc	r26, r1
    1ec8:	b1 1d       	adc	r27, r1
    1eca:	f8 01       	movw	r30, r16
    1ecc:	86 87       	std	Z+14, r24	; 0x0e
    1ece:	97 87       	std	Z+15, r25	; 0x0f
    1ed0:	a0 8b       	std	Z+16, r26	; 0x10
    1ed2:	b1 8b       	std	Z+17, r27	; 0x11

		if (dj->clust == 0) {	/* Static table */
    1ed4:	42 85       	ldd	r20, Z+10	; 0x0a
    1ed6:	53 85       	ldd	r21, Z+11	; 0x0b
    1ed8:	64 85       	ldd	r22, Z+12	; 0x0c
    1eda:	75 85       	ldd	r23, Z+13	; 0x0d
    1edc:	01 90       	ld	r0, Z+
    1ede:	f0 81       	ld	r31, Z
    1ee0:	e0 2d       	mov	r30, r0
    1ee2:	41 15       	cp	r20, r1
    1ee4:	51 05       	cpc	r21, r1
    1ee6:	61 05       	cpc	r22, r1
    1ee8:	71 05       	cpc	r23, r1
    1eea:	39 f4       	brne	.+14     	; 0x1efa <dir_next+0x92>
			if (i >= dj->fs->n_rootdir)	/* Report EOT when end of table */
    1eec:	80 85       	ldd	r24, Z+8	; 0x08
    1eee:	91 85       	ldd	r25, Z+9	; 0x09
    1ef0:	a8 16       	cp	r10, r24
    1ef2:	b9 06       	cpc	r11, r25
    1ef4:	08 f0       	brcs	.+2      	; 0x1ef8 <dir_next+0x90>
    1ef6:	ca c0       	rjmp	.+404    	; 0x208c <dir_next+0x224>
    1ef8:	b3 c0       	rjmp	.+358    	; 0x2060 <dir_next+0x1f8>
				return FR_NO_FILE;
		}
		else {					/* Dynamic table */
			if (((i / (SS(dj->fs) / SZ_DIR)) & (dj->fs->csize - 1)) == 0) {	/* Cluster changed? */
    1efa:	82 81       	ldd	r24, Z+2	; 0x02
    1efc:	90 e0       	ldi	r25, 0x00	; 0
    1efe:	01 97       	sbiw	r24, 0x01	; 1
    1f00:	95 01       	movw	r18, r10
    1f02:	a4 e0       	ldi	r26, 0x04	; 4
    1f04:	36 95       	lsr	r19
    1f06:	27 95       	ror	r18
    1f08:	aa 95       	dec	r26
    1f0a:	e1 f7       	brne	.-8      	; 0x1f04 <dir_next+0x9c>
    1f0c:	82 23       	and	r24, r18
    1f0e:	93 23       	and	r25, r19
    1f10:	00 97       	sbiw	r24, 0x00	; 0
    1f12:	09 f0       	breq	.+2      	; 0x1f16 <dir_next+0xae>
    1f14:	a5 c0       	rjmp	.+330    	; 0x2060 <dir_next+0x1f8>
				clst = get_fat(dj->fs, dj->clust);				/* Get next cluster */
    1f16:	cf 01       	movw	r24, r30
    1f18:	a5 dc       	rcall	.-1718   	; 0x1864 <get_fat>
    1f1a:	6b 01       	movw	r12, r22
    1f1c:	7c 01       	movw	r14, r24
    1f1e:	62 30       	cpi	r22, 0x02	; 2
				if (clst <= 1) return FR_INT_ERR;
    1f20:	71 05       	cpc	r23, r1
    1f22:	81 05       	cpc	r24, r1
    1f24:	91 05       	cpc	r25, r1
    1f26:	08 f4       	brcc	.+2      	; 0x1f2a <dir_next+0xc2>
    1f28:	b5 c0       	rjmp	.+362    	; 0x2094 <dir_next+0x22c>
    1f2a:	8f ef       	ldi	r24, 0xFF	; 255
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
    1f2c:	c8 16       	cp	r12, r24
    1f2e:	8f ef       	ldi	r24, 0xFF	; 255
    1f30:	d8 06       	cpc	r13, r24
    1f32:	8f ef       	ldi	r24, 0xFF	; 255
    1f34:	e8 06       	cpc	r14, r24
    1f36:	8f ef       	ldi	r24, 0xFF	; 255
    1f38:	f8 06       	cpc	r15, r24
    1f3a:	09 f4       	brne	.+2      	; 0x1f3e <dir_next+0xd6>
    1f3c:	ad c0       	rjmp	.+346    	; 0x2098 <dir_next+0x230>
    1f3e:	d8 01       	movw	r26, r16
				if (clst >= dj->fs->n_fatent) {					/* When it reached end of dynamic table */
    1f40:	ed 91       	ld	r30, X+
    1f42:	fc 91       	ld	r31, X
    1f44:	86 89       	ldd	r24, Z+22	; 0x16
    1f46:	97 89       	ldd	r25, Z+23	; 0x17
    1f48:	a0 8d       	ldd	r26, Z+24	; 0x18
    1f4a:	b1 8d       	ldd	r27, Z+25	; 0x19
    1f4c:	c8 16       	cp	r12, r24
    1f4e:	d9 06       	cpc	r13, r25
    1f50:	ea 06       	cpc	r14, r26
    1f52:	fb 06       	cpc	r15, r27
    1f54:	08 f4       	brcc	.+2      	; 0x1f58 <dir_next+0xf0>
    1f56:	73 c0       	rjmp	.+230    	; 0x203e <dir_next+0x1d6>
    1f58:	20 97       	sbiw	r28, 0x00	; 0
#if !_FS_READONLY
					BYTE c;
					if (!stretch) return FR_NO_FILE;			/* When do not stretch, report EOT */
    1f5a:	09 f4       	brne	.+2      	; 0x1f5e <dir_next+0xf6>
    1f5c:	97 c0       	rjmp	.+302    	; 0x208c <dir_next+0x224>
    1f5e:	d8 01       	movw	r26, r16
					clst = create_chain(dj->fs, dj->clust);		/* Stretch cluster chain */
    1f60:	1a 96       	adiw	r26, 0x0a	; 10
    1f62:	4d 91       	ld	r20, X+
    1f64:	5d 91       	ld	r21, X+
    1f66:	6d 91       	ld	r22, X+
    1f68:	7c 91       	ld	r23, X
    1f6a:	1d 97       	sbiw	r26, 0x0d	; 13
    1f6c:	cf 01       	movw	r24, r30
    1f6e:	a1 de       	rcall	.-702    	; 0x1cb2 <create_chain>
    1f70:	6b 01       	movw	r12, r22
    1f72:	7c 01       	movw	r14, r24
    1f74:	61 15       	cp	r22, r1
    1f76:	71 05       	cpc	r23, r1
					if (clst == 0) return FR_DENIED;			/* No free cluster */
    1f78:	81 05       	cpc	r24, r1
    1f7a:	91 05       	cpc	r25, r1
    1f7c:	09 f4       	brne	.+2      	; 0x1f80 <dir_next+0x118>
    1f7e:	88 c0       	rjmp	.+272    	; 0x2090 <dir_next+0x228>
    1f80:	61 30       	cpi	r22, 0x01	; 1
    1f82:	71 05       	cpc	r23, r1
					if (clst == 1) return FR_INT_ERR;
    1f84:	81 05       	cpc	r24, r1
    1f86:	91 05       	cpc	r25, r1
    1f88:	09 f4       	brne	.+2      	; 0x1f8c <dir_next+0x124>
    1f8a:	84 c0       	rjmp	.+264    	; 0x2094 <dir_next+0x22c>
    1f8c:	6f 3f       	cpi	r22, 0xFF	; 255
    1f8e:	ef ef       	ldi	r30, 0xFF	; 255
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
    1f90:	7e 07       	cpc	r23, r30
    1f92:	ef ef       	ldi	r30, 0xFF	; 255
    1f94:	8e 07       	cpc	r24, r30
    1f96:	ef ef       	ldi	r30, 0xFF	; 255
    1f98:	9e 07       	cpc	r25, r30
    1f9a:	09 f4       	brne	.+2      	; 0x1f9e <dir_next+0x136>
    1f9c:	7d c0       	rjmp	.+250    	; 0x2098 <dir_next+0x230>
    1f9e:	d8 01       	movw	r26, r16
    1fa0:	8d 91       	ld	r24, X+
					/* Clean-up stretched table */
					if (move_window(dj->fs, 0)) return FR_DISK_ERR;	/* Flush active window */
    1fa2:	9c 91       	ld	r25, X
    1fa4:	40 e0       	ldi	r20, 0x00	; 0
    1fa6:	50 e0       	ldi	r21, 0x00	; 0
    1fa8:	ba 01       	movw	r22, r20
    1faa:	58 db       	rcall	.-2384   	; 0x165c <move_window>
    1fac:	88 23       	and	r24, r24
    1fae:	09 f0       	breq	.+2      	; 0x1fb2 <dir_next+0x14a>
    1fb0:	73 c0       	rjmp	.+230    	; 0x2098 <dir_next+0x230>
    1fb2:	f8 01       	movw	r30, r16
    1fb4:	80 81       	ld	r24, Z
    1fb6:	91 81       	ldd	r25, Z+1	; 0x01
					mem_set(dj->fs->win, 0, SS(dj->fs));			/* Clear window buffer */
    1fb8:	8e 96       	adiw	r24, 0x2e	; 46
    1fba:	60 e0       	ldi	r22, 0x00	; 0
    1fbc:	70 e0       	ldi	r23, 0x00	; 0
    1fbe:	40 e0       	ldi	r20, 0x00	; 0
    1fc0:	52 e0       	ldi	r21, 0x02	; 2
    1fc2:	21 db       	rcall	.-2494   	; 0x1606 <mem_set>
    1fc4:	d8 01       	movw	r26, r16
    1fc6:	cd 91       	ld	r28, X+
    1fc8:	dc 91       	ld	r29, X
    1fca:	ce 01       	movw	r24, r28
					dj->fs->winsect = clust2sect(dj->fs, clst);	/* Cluster start sector */
    1fcc:	b7 01       	movw	r22, r14
    1fce:	a6 01       	movw	r20, r12
    1fd0:	15 dc       	rcall	.-2006   	; 0x17fc <clust2sect>
    1fd2:	dc 01       	movw	r26, r24
    1fd4:	cb 01       	movw	r24, r22
    1fd6:	8a a7       	lds	r24, 0x7a
    1fd8:	9b a7       	lds	r25, 0x7b
    1fda:	ac a7       	lds	r26, 0x7c
    1fdc:	bd a7       	lds	r27, 0x7d
    1fde:	c0 e0       	ldi	r28, 0x00	; 0
    1fe0:	d1 e0       	ldi	r29, 0x01	; 1
    1fe2:	1a c0       	rjmp	.+52     	; 0x2018 <dir_next+0x1b0>
    1fe4:	d4 83       	std	Z+4, r29	; 0x04
    1fe6:	f8 01       	movw	r30, r16
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
    1fe8:	80 81       	ld	r24, Z
						dj->fs->wflag = 1;
    1fea:	91 81       	ldd	r25, Z+1	; 0x01
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
					/* Clean-up stretched table */
					if (move_window(dj->fs, 0)) return FR_DISK_ERR;	/* Flush active window */
					mem_set(dj->fs->win, 0, SS(dj->fs));			/* Clear window buffer */
					dj->fs->winsect = clust2sect(dj->fs, clst);	/* Cluster start sector */
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
    1fec:	40 e0       	ldi	r20, 0x00	; 0
						dj->fs->wflag = 1;
    1fee:	50 e0       	ldi	r21, 0x00	; 0
						if (move_window(dj->fs, 0)) return FR_DISK_ERR;
    1ff0:	ba 01       	movw	r22, r20
    1ff2:	34 db       	rcall	.-2456   	; 0x165c <move_window>
    1ff4:	88 23       	and	r24, r24
    1ff6:	09 f0       	breq	.+2      	; 0x1ffa <dir_next+0x192>
    1ff8:	4f c0       	rjmp	.+158    	; 0x2098 <dir_next+0x230>
    1ffa:	d8 01       	movw	r26, r16
    1ffc:	ed 91       	ld	r30, X+
    1ffe:	fc 91       	ld	r31, X
    2000:	82 a5       	lds	r24, 0x62
    2002:	93 a5       	lds	r25, 0x63
    2004:	a4 a5       	lds	r26, 0x64
						dj->fs->winsect++;
    2006:	b5 a5       	lds	r27, 0x65
    2008:	01 96       	adiw	r24, 0x01	; 1
    200a:	a1 1d       	adc	r26, r1
    200c:	b1 1d       	adc	r27, r1
    200e:	82 a7       	lds	r24, 0x72
    2010:	93 a7       	lds	r25, 0x73
    2012:	a4 a7       	lds	r26, 0x74
    2014:	b5 a7       	lds	r27, 0x75
    2016:	cf 5f       	subi	r28, 0xFF	; 255
    2018:	d8 01       	movw	r26, r16
    201a:	ed 91       	ld	r30, X+
    201c:	fc 91       	ld	r31, X
    201e:	11 97       	sbiw	r26, 0x01	; 1
    2020:	82 81       	ldd	r24, Z+2	; 0x02
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
					/* Clean-up stretched table */
					if (move_window(dj->fs, 0)) return FR_DISK_ERR;	/* Flush active window */
					mem_set(dj->fs->win, 0, SS(dj->fs));			/* Clear window buffer */
					dj->fs->winsect = clust2sect(dj->fs, clst);	/* Cluster start sector */
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
    2022:	c8 17       	cp	r28, r24
    2024:	f8 f2       	brcs	.-66     	; 0x1fe4 <dir_next+0x17c>
    2026:	82 a5       	lds	r24, 0x62
    2028:	93 a5       	lds	r25, 0x63
    202a:	a4 a5       	lds	r26, 0x64
    202c:	b5 a5       	lds	r27, 0x65
    202e:	8c 1b       	sub	r24, r28
    2030:	91 09       	sbc	r25, r1
						dj->fs->wflag = 1;
						if (move_window(dj->fs, 0)) return FR_DISK_ERR;
						dj->fs->winsect++;
					}
					dj->fs->winsect -= c;						/* Rewind window address */
    2032:	a1 09       	sbc	r26, r1
    2034:	b1 09       	sbc	r27, r1
    2036:	82 a7       	lds	r24, 0x72
    2038:	93 a7       	lds	r25, 0x73
    203a:	a4 a7       	lds	r26, 0x74
    203c:	b5 a7       	lds	r27, 0x75
    203e:	f8 01       	movw	r30, r16
    2040:	c2 86       	std	Z+10, r12	; 0x0a
    2042:	d3 86       	std	Z+11, r13	; 0x0b
    2044:	e4 86       	std	Z+12, r14	; 0x0c
    2046:	f5 86       	std	Z+13, r15	; 0x0d
    2048:	80 81       	ld	r24, Z
#else
					return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dj->clust = clst;				/* Initialize data for new cluster */
    204a:	91 81       	ldd	r25, Z+1	; 0x01
    204c:	b7 01       	movw	r22, r14
    204e:	a6 01       	movw	r20, r12
    2050:	d5 db       	rcall	.-2134   	; 0x17fc <clust2sect>
    2052:	dc 01       	movw	r26, r24
				dj->sect = clust2sect(dj->fs, clst);
    2054:	cb 01       	movw	r24, r22
    2056:	f8 01       	movw	r30, r16
    2058:	86 87       	std	Z+14, r24	; 0x0e
    205a:	97 87       	std	Z+15, r25	; 0x0f
    205c:	a0 8b       	std	Z+16, r26	; 0x10
    205e:	b1 8b       	std	Z+17, r27	; 0x11
    2060:	d8 01       	movw	r26, r16
    2062:	15 96       	adiw	r26, 0x05	; 5
    2064:	bc 92       	st	X, r11
    2066:	ae 92       	st	-X, r10
    2068:	14 97       	sbiw	r26, 0x04	; 4
    206a:	8d 91       	ld	r24, X+
    206c:	9c 91       	ld	r25, X
			}
		}
	}

	dj->index = i;
    206e:	11 97       	sbiw	r26, 0x01	; 1
    2070:	8e 96       	adiw	r24, 0x2e	; 46
    2072:	65 e0       	ldi	r22, 0x05	; 5
    2074:	88 0c       	add	r8, r8
    2076:	99 1c       	adc	r9, r9
	dj->dir = dj->fs->win + (i % (SS(dj->fs) / SZ_DIR)) * SZ_DIR;
    2078:	6a 95       	dec	r22
    207a:	e1 f7       	brne	.-8      	; 0x2074 <dir_next+0x20c>
    207c:	88 0d       	add	r24, r8
    207e:	99 1d       	adc	r25, r9
    2080:	53 96       	adiw	r26, 0x13	; 19
    2082:	9c 93       	st	X, r25
    2084:	8e 93       	st	-X, r24
    2086:	52 97       	sbiw	r26, 0x12	; 18
    2088:	80 e0       	ldi	r24, 0x00	; 0
    208a:	07 c0       	rjmp	.+14     	; 0x209a <dir_next+0x232>
    208c:	84 e0       	ldi	r24, 0x04	; 4
    208e:	05 c0       	rjmp	.+10     	; 0x209a <dir_next+0x232>
    2090:	87 e0       	ldi	r24, 0x07	; 7
    2092:	03 c0       	rjmp	.+6      	; 0x209a <dir_next+0x232>
    2094:	82 e0       	ldi	r24, 0x02	; 2

	return FR_OK;
    2096:	01 c0       	rjmp	.+2      	; 0x209a <dir_next+0x232>
    2098:	81 e0       	ldi	r24, 0x01	; 1
				if (clst <= 1) return FR_INT_ERR;
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
				if (clst >= dj->fs->n_fatent) {					/* When it reached end of dynamic table */
#if !_FS_READONLY
					BYTE c;
					if (!stretch) return FR_NO_FILE;			/* When do not stretch, report EOT */
    209a:	df 91       	pop	r29
    209c:	cf 91       	pop	r28
					clst = create_chain(dj->fs, dj->clust);		/* Stretch cluster chain */
					if (clst == 0) return FR_DENIED;			/* No free cluster */
    209e:	1f 91       	pop	r17
    20a0:	0f 91       	pop	r16
					if (clst == 1) return FR_INT_ERR;
    20a2:	ff 90       	pop	r15
    20a4:	ef 90       	pop	r14
					if (move_window(dj->fs, 0)) return FR_DISK_ERR;	/* Flush active window */
					mem_set(dj->fs->win, 0, SS(dj->fs));			/* Clear window buffer */
					dj->fs->winsect = clust2sect(dj->fs, clst);	/* Cluster start sector */
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
						dj->fs->wflag = 1;
						if (move_window(dj->fs, 0)) return FR_DISK_ERR;
    20a6:	df 90       	pop	r13

	dj->index = i;
	dj->dir = dj->fs->win + (i % (SS(dj->fs) / SZ_DIR)) * SZ_DIR;

	return FR_OK;
}
    20a8:	cf 90       	pop	r12
    20aa:	bf 90       	pop	r11
    20ac:	af 90       	pop	r10
    20ae:	9f 90       	pop	r9
    20b0:	8f 90       	pop	r8
    20b2:	08 95       	ret

000020b4 <f_mount>:
    20b4:	88 23       	and	r24, r24
    20b6:	91 f4       	brne	.+36     	; 0x20dc <f_mount+0x28>
    20b8:	e0 91 36 04 	lds	r30, 0x0436
    20bc:	f0 91 37 04 	lds	r31, 0x0437
    20c0:	30 97       	sbiw	r30, 0x00	; 0

	if (vol >= _VOLUMES)		/* Check if the drive number is valid */
		return FR_INVALID_DRIVE;
	rfs = FatFs[vol];			/* Get current fs object */

	if (rfs) {
    20c2:	09 f0       	breq	.+2      	; 0x20c6 <f_mount+0x12>
		clear_lock(rfs);
#endif
#if _FS_REENTRANT				/* Discard sync object of the current volume */
		if (!ff_del_syncobj(rfs->sobj)) return FR_INT_ERR;
#endif
		rfs->fs_type = 0;		/* Clear old fs object */
    20c4:	10 82       	st	Z, r1
	}

	if (fs) {
    20c6:	61 15       	cp	r22, r1
    20c8:	71 05       	cpc	r23, r1
    20ca:	11 f0       	breq	.+4      	; 0x20d0 <f_mount+0x1c>
		fs->fs_type = 0;		/* Clear new fs object */
    20cc:	fb 01       	movw	r30, r22
    20ce:	10 82       	st	Z, r1
#if _FS_REENTRANT				/* Create sync object for the new volume */
		if (!ff_cre_syncobj(vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;			/* Register new fs object */
    20d0:	70 93 37 04 	sts	0x0437, r23
    20d4:	60 93 36 04 	sts	0x0436, r22

	return FR_OK;
    20d8:	80 e0       	ldi	r24, 0x00	; 0
    20da:	08 95       	ret
{
	FATFS *rfs;


	if (vol >= _VOLUMES)		/* Check if the drive number is valid */
		return FR_INVALID_DRIVE;
    20dc:	8b e0       	ldi	r24, 0x0B	; 11
#endif
	}
	FatFs[vol] = fs;			/* Register new fs object */

	return FR_OK;
}
    20de:	08 95       	ret

000020e0 <f_open>:
FRESULT f_open (
	FIL *fp,			/* Pointer to the blank file object */
	const TCHAR *path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
    20e0:	2f 92       	push	r2
    20e2:	3f 92       	push	r3
    20e4:	4f 92       	push	r4
    20e6:	5f 92       	push	r5
    20e8:	6f 92       	push	r6
    20ea:	7f 92       	push	r7
    20ec:	8f 92       	push	r8
    20ee:	9f 92       	push	r9
    20f0:	af 92       	push	r10
    20f2:	bf 92       	push	r11
    20f4:	cf 92       	push	r12
    20f6:	df 92       	push	r13
    20f8:	ef 92       	push	r14
    20fa:	ff 92       	push	r15
    20fc:	0f 93       	push	r16
    20fe:	1f 93       	push	r17
    2100:	cf 93       	push	r28
    2102:	df 93       	push	r29
    2104:	cd b7       	in	r28, 0x3d	; 61
    2106:	de b7       	in	r29, 0x3e	; 62
    2108:	e9 97       	sbiw	r28, 0x39	; 57
    210a:	0f b6       	in	r0, 0x3f	; 63
    210c:	f8 94       	cli
    210e:	de bf       	out	0x3e, r29	; 62
    2110:	0f be       	out	0x3f, r0	; 63
    2112:	cd bf       	out	0x3d, r28	; 61
    2114:	98 a7       	lds	r25, 0x78
    2116:	8f a3       	lds	r24, 0x5f
    2118:	7c a3       	lds	r23, 0x5c
    211a:	6b a3       	lds	r22, 0x5b
	DIR dj;
	BYTE *dir;
	DEF_NAMEBUF;


	if (!fp) return FR_INVALID_OBJECT;
    211c:	00 97       	sbiw	r24, 0x00	; 0
    211e:	09 f4       	brne	.+2      	; 0x2122 <__stack+0x23>
    2120:	b3 c4       	rjmp	.+2406   	; 0x2a88 <__stack+0x989>
	fp->fs = 0;			/* Clear file object */
    2122:	dc 01       	movw	r26, r24
    2124:	11 96       	adiw	r26, 0x01	; 1
    2126:	1c 92       	st	X, r1
    2128:	1e 92       	st	-X, r1
	const TCHAR *p = *path;
	FATFS *fs;


	/* Get logical drive number from the path name */
	vol = p[0] - '0';					/* Is there a drive number? */
    212a:	fb 01       	movw	r30, r22
    212c:	80 81       	ld	r24, Z
    212e:	90 e0       	ldi	r25, 0x00	; 0
    2130:	c0 97       	sbiw	r24, 0x30	; 48
	if (vol <= 9 && p[1] == ':') {		/* Found a drive number, get and strip it */
    2132:	8a 30       	cpi	r24, 0x0A	; 10
    2134:	91 05       	cpc	r25, r1
    2136:	38 f4       	brcc	.+14     	; 0x2146 <__stack+0x47>
    2138:	21 81       	ldd	r18, Z+1	; 0x01
    213a:	2a 33       	cpi	r18, 0x3A	; 58
    213c:	21 f4       	brne	.+8      	; 0x2146 <__stack+0x47>
		p += 2; *path = p;				/* Return pointer to the path name */
    213e:	32 96       	adiw	r30, 0x02	; 2
    2140:	fc a3       	lds	r31, 0x5c
    2142:	eb a3       	lds	r30, 0x5b
    2144:	02 c0       	rjmp	.+4      	; 0x214a <__stack+0x4b>
	} else {							/* No drive number is given */
#if _FS_RPATH
		vol = CurrVol;					/* Use current drive */
#else
		vol = 0;						/* Use drive 0 */
    2146:	80 e0       	ldi	r24, 0x00	; 0
    2148:	90 e0       	ldi	r25, 0x00	; 0
#endif
	}

	/* Check if the file system object is valid or not */
	*rfs = 0;
	if (vol >= _VOLUMES) 				/* Is the drive number valid? */
    214a:	00 97       	sbiw	r24, 0x00	; 0
    214c:	09 f0       	breq	.+2      	; 0x2150 <__stack+0x51>
    214e:	2f c2       	rjmp	.+1118   	; 0x25ae <__stack+0x4af>
		return FR_INVALID_DRIVE;
	fs = FatFs[vol];					/* Get corresponding file system object */
    2150:	a0 90 36 04 	lds	r10, 0x0436
    2154:	b0 90 37 04 	lds	r11, 0x0437
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
    2158:	a1 14       	cp	r10, r1
    215a:	b1 04       	cpc	r11, r1
    215c:	09 f4       	brne	.+2      	; 0x2160 <__stack+0x61>
    215e:	29 c2       	rjmp	.+1106   	; 0x25b2 <__stack+0x4b3>

	if (!fp) return FR_INVALID_OBJECT;
	fp->fs = 0;			/* Clear file object */

#if !_FS_READONLY
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
    2160:	f4 2f       	mov	r31, r20
    2162:	ff 71       	andi	r31, 0x1F	; 31
    2164:	f9 a7       	lds	r31, 0x79
	res = chk_mounted(&path, &dj.fs, (BYTE)(mode & ~FA_READ));
    2166:	14 2f       	mov	r17, r20
    2168:	1e 71       	andi	r17, 0x1E	; 30
	fs = FatFs[vol];					/* Get corresponding file system object */
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */

	ENTER_FF(fs);						/* Lock file system */

	*rfs = fs;							/* Return pointer to the corresponding file system object */
    216a:	be 86       	std	Y+14, r11	; 0x0e
    216c:	ad 86       	std	Y+13, r10	; 0x0d
	if (fs->fs_type) {					/* If the volume has been mounted */
    216e:	d5 01       	movw	r26, r10
    2170:	8c 91       	ld	r24, X
    2172:	88 23       	and	r24, r24
    2174:	59 f0       	breq	.+22     	; 0x218c <__stack+0x8d>
		stat = disk_status(fs->drv);
    2176:	11 96       	adiw	r26, 0x01	; 1
    2178:	8c 91       	ld	r24, X
    217a:	a1 d9       	rcall	.-3262   	; 0x14be <disk_status>
    217c:	80 fd       	sbrc	r24, 0
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized (has not been changed), */
    217e:	06 c0       	rjmp	.+12     	; 0x218c <__stack+0x8d>
    2180:	11 23       	and	r17, r17
			if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check write protection if needed */
    2182:	09 f4       	brne	.+2      	; 0x2186 <__stack+0x87>
    2184:	b1 c4       	rjmp	.+2402   	; 0x2ae8 <__stack+0x9e9>
    2186:	82 fd       	sbrc	r24, 2
    2188:	18 c2       	rjmp	.+1072   	; 0x25ba <__stack+0x4bb>
    218a:	ae c4       	rjmp	.+2396   	; 0x2ae8 <__stack+0x9e9>
    218c:	f5 01       	movw	r30, r10
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
    218e:	10 82       	st	Z, r1
    2190:	11 82       	std	Z+1, r1	; 0x01
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
    2192:	80 e0       	ldi	r24, 0x00	; 0
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
    2194:	92 d9       	rcall	.-3292   	; 0x14ba <disk_initialize>
    2196:	80 fd       	sbrc	r24, 0
    2198:	0e c2       	rjmp	.+1052   	; 0x25b6 <__stack+0x4b7>
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
    219a:	11 23       	and	r17, r17
    219c:	11 f0       	breq	.+4      	; 0x21a2 <__stack+0xa3>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
	if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check disk write protection if needed */
    219e:	82 fd       	sbrc	r24, 2
    21a0:	0c c2       	rjmp	.+1048   	; 0x25ba <__stack+0x4bb>
    21a2:	c5 01       	movw	r24, r10
    21a4:	40 e0       	ldi	r20, 0x00	; 0
#if _MAX_SS != 512						/* Get disk sector size (variable sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &fs->ssize) != RES_OK)
		return FR_DISK_ERR;
#endif
	/* Search FAT partition on the drive. Supports only generic partitions, FDISK and SFD. */
	fmt = check_fs(fs, bsect = 0);		/* Load sector 0 and check if it is an FAT-VBR (in SFD) */
    21a6:	50 e0       	ldi	r21, 0x00	; 0
    21a8:	ba 01       	movw	r22, r20
    21aa:	ce da       	rcall	.-2660   	; 0x1748 <check_fs>
    21ac:	81 30       	cpi	r24, 0x01	; 1
    21ae:	b9 f4       	brne	.+46     	; 0x21de <__stack+0xdf>
    21b0:	f5 01       	movw	r30, r10
	if (LD2PT(vol) && !fmt) fmt = 1;	/* Force non-SFD if the volume is forced partition */
	if (fmt == 1) {						/* Not an FAT-VBR, the physical drive can be partitioned */
    21b2:	e0 51       	subi	r30, 0x10	; 16
    21b4:	fe 4f       	sbci	r31, 0xFE	; 254
		/* Check the partition listed in the partition table */
		pi = LD2PT(vol);
		if (pi) pi--;
		tbl = &fs->win[MBR_Table + pi * SZ_PTE];/* Partition table */
		if (tbl[4]) {						/* Is the partition existing? */
    21b6:	80 81       	ld	r24, Z
    21b8:	88 23       	and	r24, r24
    21ba:	09 f4       	brne	.+2      	; 0x21be <__stack+0xbf>
    21bc:	00 c2       	rjmp	.+1024   	; 0x25be <__stack+0x4bf>
    21be:	f5 01       	movw	r30, r10
    21c0:	ec 50       	subi	r30, 0x0C	; 12
    21c2:	fe 4f       	sbci	r31, 0xFE	; 254
			bsect = LD_DWORD(&tbl[8]);		/* Partition offset in LBA */
    21c4:	20 81       	ld	r18, Z
    21c6:	31 81       	ldd	r19, Z+1	; 0x01
    21c8:	42 81       	ldd	r20, Z+2	; 0x02
    21ca:	53 81       	ldd	r21, Z+3	; 0x03
    21cc:	2a a7       	lds	r18, 0x7a
    21ce:	3b a7       	lds	r19, 0x7b
    21d0:	4c a7       	lds	r20, 0x7c
    21d2:	5d a7       	lds	r21, 0x7d
    21d4:	c5 01       	movw	r24, r10
    21d6:	ba 01       	movw	r22, r20
    21d8:	a9 01       	movw	r20, r18
			fmt = check_fs(fs, bsect);		/* Check the partition */
    21da:	b6 da       	rcall	.-2708   	; 0x1748 <check_fs>
    21dc:	04 c0       	rjmp	.+8      	; 0x21e6 <__stack+0xe7>
    21de:	1a a6       	lds	r17, 0xba
    21e0:	1b a6       	lds	r17, 0xbb
    21e2:	1c a6       	lds	r17, 0xbc
    21e4:	1d a6       	lds	r17, 0xbd
#if _MAX_SS != 512						/* Get disk sector size (variable sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &fs->ssize) != RES_OK)
		return FR_DISK_ERR;
#endif
	/* Search FAT partition on the drive. Supports only generic partitions, FDISK and SFD. */
	fmt = check_fs(fs, bsect = 0);		/* Load sector 0 and check if it is an FAT-VBR (in SFD) */
    21e6:	83 30       	cpi	r24, 0x03	; 3
    21e8:	09 f4       	brne	.+2      	; 0x21ec <__stack+0xed>
    21ea:	fe c3       	rjmp	.+2044   	; 0x29e8 <__stack+0x8e9>
    21ec:	88 23       	and	r24, r24
		if (tbl[4]) {						/* Is the partition existing? */
			bsect = LD_DWORD(&tbl[8]);		/* Partition offset in LBA */
			fmt = check_fs(fs, bsect);		/* Check the partition */
		}
	}
	if (fmt == 3) return FR_DISK_ERR;
    21ee:	09 f0       	breq	.+2      	; 0x21f2 <__stack+0xf3>
    21f0:	e6 c1       	rjmp	.+972    	; 0x25be <__stack+0x4bf>
    21f2:	d5 01       	movw	r26, r10
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
    21f4:	d9 96       	adiw	r26, 0x39	; 57
    21f6:	8d 91       	ld	r24, X+
    21f8:	9c 91       	ld	r25, X

	/* An FAT volume is found. Following code initializes the file system object */

	if (LD_WORD(fs->win+BPB_BytsPerSec) != SS(fs))		/* (BPB_BytsPerSec must be equal to the physical sector size) */
    21fa:	da 97       	sbiw	r26, 0x3a	; 58
    21fc:	b2 e0       	ldi	r27, 0x02	; 2
    21fe:	80 30       	cpi	r24, 0x00	; 0
    2200:	9b 07       	cpc	r25, r27
    2202:	09 f0       	breq	.+2      	; 0x2206 <__stack+0x107>
    2204:	dc c1       	rjmp	.+952    	; 0x25be <__stack+0x4bf>
    2206:	f5 01       	movw	r30, r10
    2208:	ec 5b       	subi	r30, 0xBC	; 188
    220a:	ff 4f       	sbci	r31, 0xFF	; 255
    220c:	80 81       	ld	r24, Z
		return FR_NO_FILESYSTEM;

	fasize = LD_WORD(fs->win+BPB_FATSz16);				/* Number of sectors per FAT */
    220e:	91 81       	ldd	r25, Z+1	; 0x01
    2210:	9c 01       	movw	r18, r24
    2212:	40 e0       	ldi	r20, 0x00	; 0
    2214:	50 e0       	ldi	r21, 0x00	; 0
    2216:	2e a7       	lds	r18, 0x7e
    2218:	3f a7       	lds	r19, 0x7f
    221a:	48 ab       	sts	0x58, r20
    221c:	59 ab       	sts	0x59, r21
    221e:	21 15       	cp	r18, r1
    2220:	31 05       	cpc	r19, r1
    2222:	41 05       	cpc	r20, r1
    2224:	51 05       	cpc	r21, r1
	if (!fasize) fasize = LD_DWORD(fs->win+BPB_FATSz32);
    2226:	59 f4       	brne	.+22     	; 0x223e <__stack+0x13f>
    2228:	f5 01       	movw	r30, r10
    222a:	ee 5a       	subi	r30, 0xAE	; 174
    222c:	ff 4f       	sbci	r31, 0xFF	; 255
    222e:	80 81       	ld	r24, Z
    2230:	91 81       	ldd	r25, Z+1	; 0x01
    2232:	a2 81       	ldd	r26, Z+2	; 0x02
    2234:	b3 81       	ldd	r27, Z+3	; 0x03
    2236:	8e a7       	lds	r24, 0x7e
    2238:	9f a7       	lds	r25, 0x7f
    223a:	a8 ab       	sts	0x58, r26
    223c:	b9 ab       	sts	0x59, r27
    223e:	2e a5       	lds	r18, 0x6e
    2240:	3f a5       	lds	r19, 0x6f
    2242:	48 a9       	sts	0x48, r20
    2244:	59 a9       	sts	0x49, r21
	fs->fsize = fasize;
    2246:	d5 01       	movw	r26, r10
    2248:	5a 96       	adiw	r26, 0x1a	; 26
    224a:	2d 93       	st	X+, r18
    224c:	3d 93       	st	X+, r19
    224e:	4d 93       	st	X+, r20
    2250:	5c 93       	st	X, r21
    2252:	5d 97       	sbiw	r26, 0x1d	; 29
    2254:	de 96       	adiw	r26, 0x3e	; 62
    2256:	4c 91       	ld	r20, X
    2258:	de 97       	sbiw	r26, 0x3e	; 62
    225a:	13 96       	adiw	r26, 0x03	; 3

	fs->n_fats = b = fs->win[BPB_NumFATs];				/* Number of FAT copies */
    225c:	4c 93       	st	X, r20
    225e:	13 97       	sbiw	r26, 0x03	; 3
    2260:	84 2f       	mov	r24, r20
    2262:	81 50       	subi	r24, 0x01	; 1
    2264:	82 30       	cpi	r24, 0x02	; 2
    2266:	08 f0       	brcs	.+2      	; 0x226a <__stack+0x16b>
	if (b != 1 && b != 2) return FR_NO_FILESYSTEM;		/* (Must be 1 or 2) */
    2268:	aa c1       	rjmp	.+852    	; 0x25be <__stack+0x4bf>
    226a:	db 96       	adiw	r26, 0x3b	; 59
    226c:	1c 91       	ld	r17, X
    226e:	db 97       	sbiw	r26, 0x3b	; 59
    2270:	12 96       	adiw	r26, 0x02	; 2
	fasize *= b;										/* Number of sectors for FAT area */

	fs->csize = b = fs->win[BPB_SecPerClus];			/* Number of sectors per cluster */
    2272:	1c 93       	st	X, r17
    2274:	12 97       	sbiw	r26, 0x02	; 2
    2276:	11 23       	and	r17, r17
    2278:	09 f4       	brne	.+2      	; 0x227c <__stack+0x17d>
    227a:	a1 c1       	rjmp	.+834    	; 0x25be <__stack+0x4bf>
    227c:	21 2f       	mov	r18, r17
	if (!b || (b & (b - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
    227e:	30 e0       	ldi	r19, 0x00	; 0
    2280:	c9 01       	movw	r24, r18
    2282:	01 97       	sbiw	r24, 0x01	; 1
    2284:	82 23       	and	r24, r18
    2286:	93 23       	and	r25, r19
    2288:	00 97       	sbiw	r24, 0x00	; 0
    228a:	09 f0       	breq	.+2      	; 0x228e <__stack+0x18f>
    228c:	98 c1       	rjmp	.+816    	; 0x25be <__stack+0x4bf>
    228e:	f5 01       	movw	r30, r10
    2290:	ff 96       	adiw	r30, 0x3f	; 63
    2292:	20 80       	ld	r2, Z
    2294:	31 80       	ldd	r3, Z+1	; 0x01

	fs->n_rootdir = LD_WORD(fs->win+BPB_RootEntCnt);	/* Number of root directory entries */
    2296:	f5 01       	movw	r30, r10
    2298:	31 86       	std	Z+9, r3	; 0x09
    229a:	20 86       	std	Z+8, r2	; 0x08
    229c:	c1 01       	movw	r24, r2
    229e:	8f 70       	andi	r24, 0x0F	; 15
    22a0:	90 70       	andi	r25, 0x00	; 0
    22a2:	00 97       	sbiw	r24, 0x00	; 0
	if (fs->n_rootdir % (SS(fs) / SZ_DIR)) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be sector aligned) */
    22a4:	09 f0       	breq	.+2      	; 0x22a8 <__stack+0x1a9>
    22a6:	8b c1       	rjmp	.+790    	; 0x25be <__stack+0x4bf>
    22a8:	ef 5b       	subi	r30, 0xBF	; 191
    22aa:	ff 4f       	sbci	r31, 0xFF	; 255
    22ac:	80 81       	ld	r24, Z
    22ae:	91 81       	ldd	r25, Z+1	; 0x01

	tsect = LD_WORD(fs->win+BPB_TotSec16);				/* Number of sectors on the volume */
    22b0:	2c 01       	movw	r4, r24
    22b2:	66 24       	eor	r6, r6
    22b4:	77 24       	eor	r7, r7
    22b6:	41 14       	cp	r4, r1
    22b8:	51 04       	cpc	r5, r1
    22ba:	61 04       	cpc	r6, r1
    22bc:	71 04       	cpc	r7, r1
	if (!tsect) tsect = LD_DWORD(fs->win+BPB_TotSec32);
    22be:	39 f4       	brne	.+14     	; 0x22ce <__stack+0x1cf>
    22c0:	f5 01       	movw	r30, r10
    22c2:	e2 5b       	subi	r30, 0xB2	; 178
    22c4:	ff 4f       	sbci	r31, 0xFF	; 255
    22c6:	40 80       	ld	r4, Z
    22c8:	51 80       	ldd	r5, Z+1	; 0x01
    22ca:	62 80       	ldd	r6, Z+2	; 0x02
    22cc:	73 80       	ldd	r7, Z+3	; 0x03
    22ce:	d5 01       	movw	r26, r10
    22d0:	dc 96       	adiw	r26, 0x3c	; 60
    22d2:	ed 90       	ld	r14, X+
    22d4:	fc 90       	ld	r15, X

	nrsv = LD_WORD(fs->win+BPB_RsvdSecCnt);				/* Number of reserved sectors */
    22d6:	dd 97       	sbiw	r26, 0x3d	; 61
    22d8:	e1 14       	cp	r14, r1
    22da:	f1 04       	cpc	r15, r1
    22dc:	09 f4       	brne	.+2      	; 0x22e0 <__stack+0x1e1>
    22de:	6f c1       	rjmp	.+734    	; 0x25be <__stack+0x4bf>
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (BPB_RsvdSecCnt must not be 0) */
    22e0:	24 2f       	mov	r18, r20
    22e2:	30 e0       	ldi	r19, 0x00	; 0
    22e4:	40 e0       	ldi	r20, 0x00	; 0
    22e6:	50 e0       	ldi	r21, 0x00	; 0
	if (!fasize) fasize = LD_DWORD(fs->win+BPB_FATSz32);
	fs->fsize = fasize;

	fs->n_fats = b = fs->win[BPB_NumFATs];				/* Number of FAT copies */
	if (b != 1 && b != 2) return FR_NO_FILESYSTEM;		/* (Must be 1 or 2) */
	fasize *= b;										/* Number of sectors for FAT area */
    22e8:	6e a5       	lds	r22, 0x6e
    22ea:	7f a5       	lds	r23, 0x6f
    22ec:	88 a9       	sts	0x48, r24
    22ee:	99 a9       	sts	0x49, r25
    22f0:	0e 94 c3 24 	call	0x4986	; 0x4986 <__mulsi3>
    22f4:	6a ab       	sts	0x5a, r22
    22f6:	7b ab       	sts	0x5b, r23
    22f8:	8c ab       	sts	0x5c, r24
    22fa:	9d ab       	sts	0x5d, r25
    22fc:	97 01       	movw	r18, r14
    22fe:	40 e0       	ldi	r20, 0x00	; 0
    2300:	50 e0       	ldi	r21, 0x00	; 0
    2302:	2e ab       	sts	0x5e, r18

	nrsv = LD_WORD(fs->win+BPB_RsvdSecCnt);				/* Number of reserved sectors */
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (BPB_RsvdSecCnt must not be 0) */

	/* Determine the FAT sub type */
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIR);	/* RSV+FAT+DIR */
    2304:	3f ab       	sts	0x5f, r19
    2306:	48 af       	sts	0x78, r20
    2308:	59 af       	sts	0x79, r21
    230a:	61 01       	movw	r12, r2
    230c:	e4 e0       	ldi	r30, 0x04	; 4
    230e:	d6 94       	lsr	r13
    2310:	c7 94       	ror	r12
    2312:	ea 95       	dec	r30
    2314:	e1 f7       	brne	.-8      	; 0x230e <__stack+0x20f>
    2316:	ee 24       	eor	r14, r14
    2318:	ff 24       	eor	r15, r15
    231a:	c2 0e       	add	r12, r18
    231c:	d3 1e       	adc	r13, r19
    231e:	e4 1e       	adc	r14, r20
    2320:	f5 1e       	adc	r15, r21
    2322:	c6 0e       	add	r12, r22
    2324:	d7 1e       	adc	r13, r23
    2326:	e8 1e       	adc	r14, r24
    2328:	f9 1e       	adc	r15, r25
    232a:	4c 14       	cp	r4, r12
    232c:	5d 04       	cpc	r5, r13
    232e:	6e 04       	cpc	r6, r14
    2330:	7f 04       	cpc	r7, r15
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
    2332:	08 f4       	brcc	.+2      	; 0x2336 <__stack+0x237>
    2334:	44 c1       	rjmp	.+648    	; 0x25be <__stack+0x4bf>
    2336:	c3 01       	movw	r24, r6
    2338:	b2 01       	movw	r22, r4
    233a:	6c 19       	sub	r22, r12
    233c:	7d 09       	sbc	r23, r13
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
    233e:	8e 09       	sbc	r24, r14
    2340:	9f 09       	sbc	r25, r15
    2342:	21 2f       	mov	r18, r17
    2344:	30 e0       	ldi	r19, 0x00	; 0
    2346:	40 e0       	ldi	r20, 0x00	; 0
    2348:	50 e0       	ldi	r21, 0x00	; 0
    234a:	0e 94 ee 24 	call	0x49dc	; 0x49dc <__udivmodsi4>
    234e:	89 01       	movw	r16, r18
    2350:	9a 01       	movw	r18, r20
    2352:	01 15       	cp	r16, r1
    2354:	11 05       	cpc	r17, r1
    2356:	21 05       	cpc	r18, r1
    2358:	31 05       	cpc	r19, r1
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
    235a:	09 f4       	brne	.+2      	; 0x235e <__stack+0x25f>
    235c:	30 c1       	rjmp	.+608    	; 0x25be <__stack+0x4bf>
    235e:	06 3f       	cpi	r16, 0xF6	; 246
    2360:	4f e0       	ldi	r20, 0x0F	; 15
    2362:	14 07       	cpc	r17, r20
    2364:	40 e0       	ldi	r20, 0x00	; 0
	fmt = FS_FAT12;
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
    2366:	24 07       	cpc	r18, r20
    2368:	40 e0       	ldi	r20, 0x00	; 0
    236a:	34 07       	cpc	r19, r20
    236c:	58 f0       	brcs	.+22     	; 0x2384 <__stack+0x285>
    236e:	06 3f       	cpi	r16, 0xF6	; 246
    2370:	5f ef       	ldi	r21, 0xFF	; 255
    2372:	15 07       	cpc	r17, r21
    2374:	50 e0       	ldi	r21, 0x00	; 0
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
    2376:	25 07       	cpc	r18, r21
    2378:	50 e0       	ldi	r21, 0x00	; 0
    237a:	35 07       	cpc	r19, r21
    237c:	30 f4       	brcc	.+12     	; 0x238a <__stack+0x28b>
    237e:	92 e0       	ldi	r25, 0x02	; 2
    2380:	89 2e       	mov	r8, r25
    2382:	05 c0       	rjmp	.+10     	; 0x238e <__stack+0x28f>
    2384:	88 24       	eor	r8, r8
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIR);	/* RSV+FAT+DIR */
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
	fmt = FS_FAT12;
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
    2386:	83 94       	inc	r8
    2388:	02 c0       	rjmp	.+4      	; 0x238e <__stack+0x28f>
    238a:	83 e0       	ldi	r24, 0x03	; 3
	/* Determine the FAT sub type */
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIR);	/* RSV+FAT+DIR */
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
	fmt = FS_FAT12;
    238c:	88 2e       	mov	r8, r24
    238e:	0e 5f       	subi	r16, 0xFE	; 254
    2390:	1f 4f       	sbci	r17, 0xFF	; 255
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
    2392:	2f 4f       	sbci	r18, 0xFF	; 255
    2394:	3f 4f       	sbci	r19, 0xFF	; 255

	/* Boundaries and Limits */
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
    2396:	d5 01       	movw	r26, r10
    2398:	56 96       	adiw	r26, 0x16	; 22
    239a:	0d 93       	st	X+, r16
    239c:	1d 93       	st	X+, r17
    239e:	2d 93       	st	X+, r18
    23a0:	3c 93       	st	X, r19
    23a2:	59 97       	sbiw	r26, 0x19	; 25
    23a4:	8a a5       	lds	r24, 0x6a
    23a6:	9b a5       	lds	r25, 0x6b
    23a8:	ac a5       	lds	r26, 0x6c
    23aa:	bd a5       	lds	r27, 0x6d
	fs->database = bsect + sysect;						/* Data start sector */
    23ac:	c8 0e       	add	r12, r24
    23ae:	d9 1e       	adc	r13, r25
    23b0:	ea 1e       	adc	r14, r26
    23b2:	fb 1e       	adc	r15, r27
    23b4:	d5 01       	movw	r26, r10
    23b6:	96 96       	adiw	r26, 0x26	; 38
    23b8:	cd 92       	st	X+, r12
    23ba:	dd 92       	st	X+, r13
    23bc:	ed 92       	st	X+, r14
    23be:	fc 92       	st	X, r15
    23c0:	99 97       	sbiw	r26, 0x29	; 41
    23c2:	4a a5       	lds	r20, 0x6a
    23c4:	5b a5       	lds	r21, 0x6b
    23c6:	6c a5       	lds	r22, 0x6c
    23c8:	7d a5       	lds	r23, 0x6d
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
    23ca:	8e a9       	sts	0x4e, r24
    23cc:	9f a9       	sts	0x4f, r25
    23ce:	a8 ad       	sts	0x68, r26
    23d0:	b9 ad       	sts	0x69, r27
    23d2:	48 0f       	add	r20, r24
    23d4:	59 1f       	adc	r21, r25
    23d6:	6a 1f       	adc	r22, r26
    23d8:	7b 1f       	adc	r23, r27
    23da:	d5 01       	movw	r26, r10
    23dc:	5e 96       	adiw	r26, 0x1e	; 30
    23de:	4d 93       	st	X+, r20
    23e0:	5d 93       	st	X+, r21
    23e2:	6d 93       	st	X+, r22
    23e4:	7c 93       	st	X, r23
    23e6:	91 97       	sbiw	r26, 0x21	; 33
    23e8:	b3 e0       	ldi	r27, 0x03	; 3
    23ea:	8b 16       	cp	r8, r27
    23ec:	d9 f4       	brne	.+54     	; 0x2424 <__stack+0x325>
    23ee:	21 14       	cp	r2, r1
	if (fmt == FS_FAT32) {
    23f0:	31 04       	cpc	r3, r1
    23f2:	09 f0       	breq	.+2      	; 0x23f6 <__stack+0x2f7>
    23f4:	e4 c0       	rjmp	.+456    	; 0x25be <__stack+0x4bf>
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
    23f6:	f5 01       	movw	r30, r10
    23f8:	e6 5a       	subi	r30, 0xA6	; 166
    23fa:	ff 4f       	sbci	r31, 0xFF	; 255
    23fc:	80 81       	ld	r24, Z
		fs->dirbase = LD_DWORD(fs->win+BPB_RootClus);	/* Root directory start cluster */
    23fe:	91 81       	ldd	r25, Z+1	; 0x01
    2400:	a2 81       	ldd	r26, Z+2	; 0x02
    2402:	b3 81       	ldd	r27, Z+3	; 0x03
    2404:	f5 01       	movw	r30, r10
    2406:	82 a3       	lds	r24, 0x52
    2408:	93 a3       	lds	r25, 0x53
    240a:	a4 a3       	lds	r26, 0x54
    240c:	b5 a3       	lds	r27, 0x55
    240e:	b9 01       	movw	r22, r18
    2410:	a8 01       	movw	r20, r16
    2412:	44 0f       	add	r20, r20
    2414:	55 1f       	adc	r21, r21
		szbfat = fs->n_fatent * 4;						/* (Required FAT size) */
    2416:	66 1f       	adc	r22, r22
    2418:	77 1f       	adc	r23, r23
    241a:	44 0f       	add	r20, r20
    241c:	55 1f       	adc	r21, r21
    241e:	66 1f       	adc	r22, r22
    2420:	77 1f       	adc	r23, r23
    2422:	2c c0       	rjmp	.+88     	; 0x247c <__stack+0x37d>
    2424:	21 14       	cp	r2, r1
    2426:	31 04       	cpc	r3, r1
    2428:	09 f4       	brne	.+2      	; 0x242c <__stack+0x32d>
    242a:	c9 c0       	rjmp	.+402    	; 0x25be <__stack+0x4bf>
	} else {
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
    242c:	8a a9       	sts	0x4a, r24
    242e:	9b a9       	sts	0x4b, r25
    2430:	ac a9       	sts	0x4c, r26
    2432:	bd a9       	sts	0x4d, r27
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
    2434:	84 0f       	add	r24, r20
    2436:	95 1f       	adc	r25, r21
    2438:	a6 1f       	adc	r26, r22
    243a:	b7 1f       	adc	r27, r23
    243c:	f5 01       	movw	r30, r10
    243e:	82 a3       	lds	r24, 0x52
    2440:	93 a3       	lds	r25, 0x53
    2442:	a4 a3       	lds	r26, 0x54
    2444:	b5 a3       	lds	r27, 0x55
    2446:	b9 01       	movw	r22, r18
    2448:	a8 01       	movw	r20, r16
    244a:	44 0f       	add	r20, r20
    244c:	55 1f       	adc	r21, r21
    244e:	66 1f       	adc	r22, r22
    2450:	77 1f       	adc	r23, r23
    2452:	f2 e0       	ldi	r31, 0x02	; 2
    2454:	8f 16       	cp	r8, r31
    2456:	91 f0       	breq	.+36     	; 0x247c <__stack+0x37d>
    2458:	40 0f       	add	r20, r16
		szbfat = (fmt == FS_FAT16) ?					/* (Required FAT size) */
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
    245a:	51 1f       	adc	r21, r17
    245c:	62 1f       	adc	r22, r18
    245e:	73 1f       	adc	r23, r19
    2460:	76 95       	lsr	r23
    2462:	67 95       	ror	r22
    2464:	57 95       	ror	r21
    2466:	47 95       	ror	r20
    2468:	d9 01       	movw	r26, r18
    246a:	c8 01       	movw	r24, r16
    246c:	81 70       	andi	r24, 0x01	; 1
    246e:	90 70       	andi	r25, 0x00	; 0
    2470:	a0 70       	andi	r26, 0x00	; 0
    2472:	b0 70       	andi	r27, 0x00	; 0
    2474:	48 0f       	add	r20, r24
    2476:	59 1f       	adc	r21, r25
    2478:	6a 1f       	adc	r22, r26
    247a:	7b 1f       	adc	r23, r27
    247c:	41 50       	subi	r20, 0x01	; 1
    247e:	5e 4f       	sbci	r21, 0xFE	; 254
    2480:	6f 4f       	sbci	r22, 0xFF	; 255
    2482:	7f 4f       	sbci	r23, 0xFF	; 255
	}
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than required) */
    2484:	e9 e0       	ldi	r30, 0x09	; 9
    2486:	76 95       	lsr	r23
    2488:	67 95       	ror	r22
    248a:	57 95       	ror	r21
    248c:	47 95       	ror	r20
    248e:	ea 95       	dec	r30
    2490:	d1 f7       	brne	.-12     	; 0x2486 <__stack+0x387>
    2492:	8e a5       	lds	r24, 0x6e
    2494:	9f a5       	lds	r25, 0x6f
    2496:	a8 a9       	sts	0x48, r26
    2498:	b9 a9       	sts	0x49, r27
    249a:	84 17       	cp	r24, r20
    249c:	95 07       	cpc	r25, r21
    249e:	a6 07       	cpc	r26, r22
    24a0:	b7 07       	cpc	r27, r23
    24a2:	08 f4       	brcc	.+2      	; 0x24a6 <__stack+0x3a7>
    24a4:	8c c0       	rjmp	.+280    	; 0x25be <__stack+0x4bf>
    24a6:	8f ef       	ldi	r24, 0xFF	; 255
    24a8:	9f ef       	ldi	r25, 0xFF	; 255
    24aa:	dc 01       	movw	r26, r24
    24ac:	f5 01       	movw	r30, r10
		return FR_NO_FILESYSTEM;

#if !_FS_READONLY
	/* Initialize cluster allocation information */
	fs->free_clust = 0xFFFFFFFF;
    24ae:	86 87       	std	Z+14, r24	; 0x0e
    24b0:	97 87       	std	Z+15, r25	; 0x0f
    24b2:	a0 8b       	std	Z+16, r26	; 0x10
    24b4:	b1 8b       	std	Z+17, r27	; 0x11
    24b6:	12 86       	std	Z+10, r1	; 0x0a
    24b8:	13 86       	std	Z+11, r1	; 0x0b
    24ba:	14 86       	std	Z+12, r1	; 0x0c
    24bc:	15 86       	std	Z+13, r1	; 0x0d
	fs->last_clust = 0;
    24be:	b3 e0       	ldi	r27, 0x03	; 3
    24c0:	8b 16       	cp	r8, r27
    24c2:	09 f0       	breq	.+2      	; 0x24c6 <__stack+0x3c7>
    24c4:	5e c0       	rjmp	.+188    	; 0x2582 <__stack+0x483>

	/* Get fsinfo if available */
	if (fmt == FS_FAT32) {
    24c6:	15 82       	std	Z+5, r1	; 0x05
    24c8:	e2 5a       	subi	r30, 0xA2	; 162
    24ca:	ff 4f       	sbci	r31, 0xFF	; 255
    24cc:	00 81       	ld	r16, Z
	 	fs->fsi_flag = 0;
    24ce:	11 81       	ldd	r17, Z+1	; 0x01
		fs->fsi_sector = bsect + LD_WORD(fs->win+BPB_FSInfo);
    24d0:	20 e0       	ldi	r18, 0x00	; 0
    24d2:	30 e0       	ldi	r19, 0x00	; 0
    24d4:	8a a5       	lds	r24, 0x6a
    24d6:	9b a5       	lds	r25, 0x6b
    24d8:	ac a5       	lds	r26, 0x6c
    24da:	bd a5       	lds	r27, 0x6d
    24dc:	08 0f       	add	r16, r24
    24de:	19 1f       	adc	r17, r25
    24e0:	2a 1f       	adc	r18, r26
    24e2:	3b 1f       	adc	r19, r27
    24e4:	d5 01       	movw	r26, r10
    24e6:	52 96       	adiw	r26, 0x12	; 18
    24e8:	0d 93       	st	X+, r16
    24ea:	1d 93       	st	X+, r17
    24ec:	2d 93       	st	X+, r18
    24ee:	3c 93       	st	X, r19
    24f0:	55 97       	sbiw	r26, 0x15	; 21
    24f2:	b5 01       	movw	r22, r10
    24f4:	62 5d       	subi	r22, 0xD2	; 210
    24f6:	7f 4f       	sbci	r23, 0xFF	; 255
    24f8:	11 96       	adiw	r26, 0x01	; 1
		if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
    24fa:	8c 91       	ld	r24, X
    24fc:	a9 01       	movw	r20, r18
    24fe:	98 01       	movw	r18, r16
    2500:	01 e0       	ldi	r16, 0x01	; 1
    2502:	0e 94 61 0a 	call	0x14c2	; 0x14c2 <disk_read>
    2506:	88 23       	and	r24, r24
    2508:	e1 f5       	brne	.+120    	; 0x2582 <__stack+0x483>
    250a:	f5 01       	movw	r30, r10
    250c:	e4 5d       	subi	r30, 0xD4	; 212
    250e:	fd 4f       	sbci	r31, 0xFD	; 253
    2510:	80 81       	ld	r24, Z
			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
    2512:	91 81       	ldd	r25, Z+1	; 0x01
    2514:	ba ea       	ldi	r27, 0xAA	; 170
    2516:	85 35       	cpi	r24, 0x55	; 85

	/* Get fsinfo if available */
	if (fmt == FS_FAT32) {
	 	fs->fsi_flag = 0;
		fs->fsi_sector = bsect + LD_WORD(fs->win+BPB_FSInfo);
		if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
    2518:	9b 07       	cpc	r25, r27
    251a:	99 f5       	brne	.+102    	; 0x2582 <__stack+0x483>
    251c:	f5 01       	movw	r30, r10
    251e:	86 a5       	lds	r24, 0x66
    2520:	97 a5       	lds	r25, 0x67
    2522:	a0 a9       	sts	0x40, r26
			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
    2524:	b1 a9       	sts	0x41, r27
    2526:	82 35       	cpi	r24, 0x52	; 82
    2528:	f2 e5       	ldi	r31, 0x52	; 82
    252a:	9f 07       	cpc	r25, r31
    252c:	f1 e6       	ldi	r31, 0x61	; 97
    252e:	af 07       	cpc	r26, r31
    2530:	f1 e4       	ldi	r31, 0x41	; 65
    2532:	bf 07       	cpc	r27, r31
    2534:	31 f5       	brne	.+76     	; 0x2582 <__stack+0x483>
    2536:	f5 01       	movw	r30, r10
    2538:	ee 5e       	subi	r30, 0xEE	; 238
    253a:	fd 4f       	sbci	r31, 0xFD	; 253
    253c:	80 81       	ld	r24, Z
			LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
			LD_DWORD(fs->win+FSI_StrucSig) == 0x61417272) {
    253e:	91 81       	ldd	r25, Z+1	; 0x01
    2540:	a2 81       	ldd	r26, Z+2	; 0x02
    2542:	b3 81       	ldd	r27, Z+3	; 0x03
	if (fmt == FS_FAT32) {
	 	fs->fsi_flag = 0;
		fs->fsi_sector = bsect + LD_WORD(fs->win+BPB_FSInfo);
		if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
			LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
    2544:	82 37       	cpi	r24, 0x72	; 114
    2546:	22 e7       	ldi	r18, 0x72	; 114
    2548:	92 07       	cpc	r25, r18
    254a:	21 e4       	ldi	r18, 0x41	; 65
    254c:	a2 07       	cpc	r26, r18
    254e:	21 e6       	ldi	r18, 0x61	; 97
    2550:	b2 07       	cpc	r27, r18
    2552:	b9 f4       	brne	.+46     	; 0x2582 <__stack+0x483>
    2554:	f5 01       	movw	r30, r10
    2556:	e6 5e       	subi	r30, 0xE6	; 230
    2558:	fd 4f       	sbci	r31, 0xFD	; 253
    255a:	80 81       	ld	r24, Z
			LD_DWORD(fs->win+FSI_StrucSig) == 0x61417272) {
				fs->last_clust = LD_DWORD(fs->win+FSI_Nxt_Free);
    255c:	91 81       	ldd	r25, Z+1	; 0x01
    255e:	a2 81       	ldd	r26, Z+2	; 0x02
    2560:	b3 81       	ldd	r27, Z+3	; 0x03
    2562:	f5 01       	movw	r30, r10
    2564:	82 87       	std	Z+10, r24	; 0x0a
    2566:	93 87       	std	Z+11, r25	; 0x0b
    2568:	a4 87       	std	Z+12, r26	; 0x0c
    256a:	b5 87       	std	Z+13, r27	; 0x0d
    256c:	ea 5e       	subi	r30, 0xEA	; 234
    256e:	fd 4f       	sbci	r31, 0xFD	; 253
    2570:	80 81       	ld	r24, Z
    2572:	91 81       	ldd	r25, Z+1	; 0x01
				fs->free_clust = LD_DWORD(fs->win+FSI_Free_Count);
    2574:	a2 81       	ldd	r26, Z+2	; 0x02
    2576:	b3 81       	ldd	r27, Z+3	; 0x03
    2578:	f5 01       	movw	r30, r10
    257a:	86 87       	std	Z+14, r24	; 0x0e
    257c:	97 87       	std	Z+15, r25	; 0x0f
    257e:	a0 8b       	std	Z+16, r26	; 0x10
    2580:	b1 8b       	std	Z+17, r27	; 0x11
    2582:	d5 01       	movw	r26, r10
    2584:	8c 92       	st	X, r8
    2586:	80 91 38 04 	lds	r24, 0x0438
		}
	}
#endif
	fs->fs_type = fmt;		/* FAT sub-type */
    258a:	90 91 39 04 	lds	r25, 0x0439
	fs->id = ++Fsid;		/* File system mount ID */
    258e:	01 96       	adiw	r24, 0x01	; 1
    2590:	90 93 39 04 	sts	0x0439, r25
    2594:	80 93 38 04 	sts	0x0438, r24
    2598:	17 96       	adiw	r26, 0x07	; 7
    259a:	9c 93       	st	X, r25
    259c:	8e 93       	st	-X, r24
    259e:	16 97       	sbiw	r26, 0x06	; 6
    25a0:	f5 01       	movw	r30, r10
    25a2:	12 a6       	lds	r17, 0xb2
    25a4:	13 a6       	lds	r17, 0xb3
    25a6:	14 a6       	lds	r17, 0xb4
	fs->winsect = 0;		/* Invalidate sector cache */
    25a8:	15 a6       	lds	r17, 0xb5
    25aa:	14 82       	std	Z+4, r1	; 0x04
    25ac:	9d c2       	rjmp	.+1338   	; 0x2ae8 <__stack+0x9e9>
    25ae:	1b e0       	ldi	r17, 0x0B	; 11
    25b0:	6e c2       	rjmp	.+1244   	; 0x2a8e <__stack+0x98f>
	fs->wflag = 0;
    25b2:	1c e0       	ldi	r17, 0x0C	; 12
    25b4:	6c c2       	rjmp	.+1240   	; 0x2a8e <__stack+0x98f>
	}

	/* Check if the file system object is valid or not */
	*rfs = 0;
	if (vol >= _VOLUMES) 				/* Is the drive number valid? */
		return FR_INVALID_DRIVE;
    25b6:	13 e0       	ldi	r17, 0x03	; 3
    25b8:	6a c2       	rjmp	.+1236   	; 0x2a8e <__stack+0x98f>
	fs = FatFs[vol];					/* Get corresponding file system object */
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
    25ba:	1a e0       	ldi	r17, 0x0A	; 10
    25bc:	68 c2       	rjmp	.+1232   	; 0x2a8e <__stack+0x98f>

	fs->fs_type = 0;					/* Clear the file system object */
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
    25be:	1d e0       	ldi	r17, 0x0D	; 13
    25c0:	66 c2       	rjmp	.+1228   	; 0x2a8e <__stack+0x98f>
	if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check disk write protection if needed */
		return FR_WRITE_PROTECTED;
    25c2:	8c 35       	cpi	r24, 0x5C	; 92
    25c4:	31 f4       	brne	.+12     	; 0x25d2 <__stack+0x4d3>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
		szbfat = (fmt == FS_FAT16) ?					/* (Required FAT size) */
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
	}
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than required) */
		return FR_NO_FILESYSTEM;
    25c6:	2b a1       	lds	r18, 0x4b
    25c8:	3c a1       	lds	r19, 0x4c
		path++;	dj->sclust = 0;		/* Strip it and start from the root dir */
	} else {							/* No heading separator */
		dj->sclust = dj->fs->cdir;	/* Start from the current dir */
	}
#else
	if (*path == '/' || *path == '\\')	/* Strip heading separator if exist */
    25ca:	2f 5f       	subi	r18, 0xFF	; 255
    25cc:	3f 4f       	sbci	r19, 0xFF	; 255
		path++;
    25ce:	3c a3       	lds	r19, 0x5c
    25d0:	2b a3       	lds	r18, 0x5b
    25d2:	1b 8a       	std	Y+19, r1	; 0x13
    25d4:	1c 8a       	std	Y+20, r1	; 0x14
    25d6:	1d 8a       	std	Y+21, r1	; 0x15
    25d8:	1e 8a       	std	Y+22, r1	; 0x16
	dj->sclust = 0;						/* Start from the root dir */
    25da:	ab a1       	lds	r26, 0x4b
    25dc:	bc a1       	lds	r27, 0x4c
    25de:	8c 91       	ld	r24, X
    25e0:	80 32       	cpi	r24, 0x20	; 32
#endif

	if ((UINT)*path < ' ') {			/* Nul path means the start directory itself */
    25e2:	38 f4       	brcc	.+14     	; 0x25f2 <__stack+0x4f3>
    25e4:	ce 01       	movw	r24, r28
    25e6:	0d 96       	adiw	r24, 0x0d	; 13
    25e8:	03 da       	rcall	.-3066   	; 0x19f0 <dir_sdi.constprop.2>
    25ea:	18 2f       	mov	r17, r24
		res = dir_sdi(dj, 0);
    25ec:	18 a2       	lds	r17, 0x98
    25ee:	1f 8e       	std	Y+31, r1	; 0x1f
    25f0:	fe c0       	rjmp	.+508    	; 0x27ee <__stack+0x6ef>
    25f2:	65 e0       	ldi	r22, 0x05	; 5
    25f4:	86 2e       	mov	r8, r22
		dj->dir = 0;
    25f6:	ab a0       	lds	r26, 0x8b
    25f8:	bc a0       	lds	r27, 0x8c
    25fa:	65 01       	movw	r12, r10
	}
	*path = &p[si];						/* Return pointer to the next segment */
	c = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */

	if (!i) return FR_INVALID_NAME;		/* Reject nul string */
	if (sfn[0] == DDE) sfn[0] = NDDE;	/* When first char collides with DDE, replace it with 0x05 */
    25fc:	f5 01       	movw	r30, r10
    25fe:	80 81       	ld	r24, Z
    2600:	08 94       	sec
    2602:	a1 1c       	adc	r10, r1
	dj->sclust = 0;						/* Start from the root dir */
#endif

	if ((UINT)*path < ' ') {			/* Nul path means the start directory itself */
		res = dir_sdi(dj, 0);
		dj->dir = 0;
    2604:	b1 1c       	adc	r11, r1
	BYTE b, c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
    2606:	8f 32       	cpi	r24, 0x2F	; 47
    2608:	c1 f3       	breq	.-16     	; 0x25fa <__stack+0x4fb>
    260a:	8c 35       	cpi	r24, 0x5C	; 92
    260c:	b1 f3       	breq	.-20     	; 0x25fa <__stack+0x4fb>
    260e:	e9 a0       	lds	r30, 0x89
    2610:	fa a0       	lds	r31, 0x8a
    2612:	c7 01       	movw	r24, r14
    2614:	60 e2       	ldi	r22, 0x20	; 32
    2616:	70 e0       	ldi	r23, 0x00	; 0
	sfn = dj->fn;
    2618:	4b e0       	ldi	r20, 0x0B	; 11
    261a:	50 e0       	ldi	r21, 0x00	; 0
	mem_set(sfn, ' ', 11);
    261c:	0e 94 03 0b 	call	0x1606	; 0x1606 <mem_set>
    2620:	60 e0       	ldi	r22, 0x00	; 0
    2622:	70 e0       	ldi	r23, 0x00	; 0
    2624:	a0 e0       	ldi	r26, 0x00	; 0
    2626:	b0 e0       	ldi	r27, 0x00	; 0
    2628:	08 e0       	ldi	r16, 0x08	; 8
	si = i = b = 0; ni = 8;
    262a:	10 e0       	ldi	r17, 0x00	; 0
    262c:	30 e0       	ldi	r19, 0x00	; 0
    262e:	01 c0       	rjmp	.+2      	; 0x2632 <__stack+0x533>
    2630:	d5 01       	movw	r26, r10
    2632:	f6 01       	movw	r30, r12
    2634:	ea 0f       	add	r30, r26
    2636:	fb 1f       	adc	r31, r27
    2638:	20 81       	ld	r18, Z
	for (;;) {
		c = (BYTE)p[si++];
		if (c <= ' ' || c == '/' || c == '\\') break;	/* Break on end of segment */
		if (c == '.' || i >= ni) {
			if (ni != 8 || c != '.') return FR_INVALID_NAME;
			i = 8; ni = 11;
    263a:	5d 01       	movw	r10, r26
		sfn[NS] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
    263c:	08 94       	sec
    263e:	a1 1c       	adc	r10, r1
    2640:	b1 1c       	adc	r11, r1
    2642:	21 32       	cpi	r18, 0x21	; 33
    2644:	08 f4       	brcc	.+2      	; 0x2648 <__stack+0x549>
    2646:	60 c0       	rjmp	.+192    	; 0x2708 <__stack+0x609>
    2648:	2f 32       	cpi	r18, 0x2F	; 47
    264a:	09 f4       	brne	.+2      	; 0x264e <__stack+0x54f>
		if (c <= ' ' || c == '/' || c == '\\') break;	/* Break on end of segment */
    264c:	5f c0       	rjmp	.+190    	; 0x270c <__stack+0x60d>
    264e:	2c 35       	cpi	r18, 0x5C	; 92
    2650:	09 f4       	brne	.+2      	; 0x2654 <__stack+0x555>
    2652:	5c c0       	rjmp	.+184    	; 0x270c <__stack+0x60d>
    2654:	2e 32       	cpi	r18, 0x2E	; 46
    2656:	19 f0       	breq	.+6      	; 0x265e <__stack+0x55f>
    2658:	60 17       	cp	r22, r16
    265a:	71 07       	cpc	r23, r17
    265c:	70 f0       	brcs	.+28     	; 0x267a <__stack+0x57b>
		if (c == '.' || i >= ni) {
    265e:	08 30       	cpi	r16, 0x08	; 8
    2660:	11 05       	cpc	r17, r1
    2662:	09 f0       	breq	.+2      	; 0x2666 <__stack+0x567>
    2664:	bf c0       	rjmp	.+382    	; 0x27e4 <__stack+0x6e5>
    2666:	2e 32       	cpi	r18, 0x2E	; 46
			if (ni != 8 || c != '.') return FR_INVALID_NAME;
    2668:	09 f0       	breq	.+2      	; 0x266c <__stack+0x56d>
    266a:	bc c0       	rjmp	.+376    	; 0x27e4 <__stack+0x6e5>
    266c:	33 0f       	add	r19, r19
    266e:	33 0f       	add	r19, r19
    2670:	68 e0       	ldi	r22, 0x08	; 8
    2672:	70 e0       	ldi	r23, 0x00	; 0
    2674:	0b e0       	ldi	r16, 0x0B	; 11
			i = 8; ni = 11;
			b <<= 2; continue;
    2676:	10 e0       	ldi	r17, 0x00	; 0
    2678:	db cf       	rjmp	.-74     	; 0x2630 <__stack+0x531>
	for (;;) {
		c = (BYTE)p[si++];
		if (c <= ' ' || c == '/' || c == '\\') break;	/* Break on end of segment */
		if (c == '.' || i >= ni) {
			if (ni != 8 || c != '.') return FR_INVALID_NAME;
			i = 8; ni = 11;
    267a:	27 fd       	sbrc	r18, 7
    267c:	33 60       	ori	r19, 0x03	; 3
    267e:	82 2f       	mov	r24, r18
    2680:	81 58       	subi	r24, 0x81	; 129
    2682:	8f 31       	cpi	r24, 0x1F	; 31
			b <<= 2; continue;
		}
		if (c >= 0x80) {				/* Extended char? */
    2684:	18 f0       	brcs	.+6      	; 0x268c <__stack+0x58d>
			b |= 3;						/* Eliminate NT flag */
    2686:	8f 55       	subi	r24, 0x5F	; 95
#if !_DF1S	/* ASCII only cfg */
			return FR_INVALID_NAME;
#endif
#endif
		}
		if (IsDBCS1(c)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
    2688:	8d 31       	cpi	r24, 0x1D	; 29
    268a:	f8 f4       	brcc	.+62     	; 0x26ca <__stack+0x5cb>
    268c:	f6 01       	movw	r30, r12
    268e:	ea 0d       	add	r30, r10
    2690:	fb 1d       	adc	r31, r11
    2692:	40 81       	ld	r20, Z
    2694:	84 2f       	mov	r24, r20
			d = (BYTE)p[si++];			/* Get 2nd byte */
    2696:	80 54       	subi	r24, 0x40	; 64
    2698:	8f 33       	cpi	r24, 0x3F	; 63
    269a:	20 f0       	brcs	.+8      	; 0x26a4 <__stack+0x5a5>
    269c:	80 54       	subi	r24, 0x40	; 64
			if (!IsDBCS2(d) || i >= ni - 1)	/* Reject invalid DBC */
    269e:	8d 37       	cpi	r24, 0x7D	; 125
    26a0:	08 f0       	brcs	.+2      	; 0x26a4 <__stack+0x5a5>
    26a2:	a0 c0       	rjmp	.+320    	; 0x27e4 <__stack+0x6e5>
    26a4:	c8 01       	movw	r24, r16
    26a6:	01 97       	sbiw	r24, 0x01	; 1
    26a8:	68 17       	cp	r22, r24
    26aa:	79 07       	cpc	r23, r25
    26ac:	08 f0       	brcs	.+2      	; 0x26b0 <__stack+0x5b1>
    26ae:	9a c0       	rjmp	.+308    	; 0x27e4 <__stack+0x6e5>
    26b0:	52 e0       	ldi	r21, 0x02	; 2
    26b2:	a5 2e       	mov	r10, r21
    26b4:	b1 2c       	mov	r11, r1
    26b6:	aa 0e       	add	r10, r26
    26b8:	bb 1e       	adc	r11, r27
			return FR_INVALID_NAME;
#endif
#endif
		}
		if (IsDBCS1(c)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			d = (BYTE)p[si++];			/* Get 2nd byte */
    26ba:	f7 01       	movw	r30, r14
    26bc:	e6 0f       	add	r30, r22
    26be:	f7 1f       	adc	r31, r23
    26c0:	20 83       	st	Z, r18
    26c2:	41 83       	std	Z+1, r20	; 0x01
			if (!IsDBCS2(d) || i >= ni - 1)	/* Reject invalid DBC */
				return FR_INVALID_NAME;
			sfn[i++] = c;
    26c4:	6e 5f       	subi	r22, 0xFE	; 254
    26c6:	7f 4f       	sbci	r23, 0xFF	; 255
    26c8:	b3 cf       	rjmp	.-154    	; 0x2630 <__stack+0x531>
    26ca:	42 2f       	mov	r20, r18
			sfn[i++] = d;
    26cc:	50 e0       	ldi	r21, 0x00	; 0
    26ce:	ef eb       	ldi	r30, 0xBF	; 191
    26d0:	f1 e0       	ldi	r31, 0x01	; 1
    26d2:	81 91       	ld	r24, Z+
		} else {						/* Single byte code */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c))	/* Reject illegal chrs for SFN */
    26d4:	88 23       	and	r24, r24
    26d6:	29 f0       	breq	.+10     	; 0x26e2 <__stack+0x5e3>
    26d8:	90 e0       	ldi	r25, 0x00	; 0
    26da:	84 17       	cp	r24, r20
}

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {
	while (*str && *str != chr) str++;
    26dc:	95 07       	cpc	r25, r21
    26de:	c9 f7       	brne	.-14     	; 0x26d2 <__stack+0x5d3>
    26e0:	81 c0       	rjmp	.+258    	; 0x27e4 <__stack+0x6e5>
    26e2:	82 2f       	mov	r24, r18
    26e4:	81 54       	subi	r24, 0x41	; 65
    26e6:	8a 31       	cpi	r24, 0x1A	; 26
    26e8:	10 f4       	brcc	.+4      	; 0x26ee <__stack+0x5ef>
    26ea:	32 60       	ori	r19, 0x02	; 2
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* Single byte code */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c))	/* Reject illegal chrs for SFN */
				return FR_INVALID_NAME;
			if (IsUpper(c)) {			/* ASCII large capital? */
    26ec:	06 c0       	rjmp	.+12     	; 0x26fa <__stack+0x5fb>
    26ee:	82 2f       	mov	r24, r18
    26f0:	81 56       	subi	r24, 0x61	; 97
    26f2:	8a 31       	cpi	r24, 0x1A	; 26
				b |= 2;
    26f4:	10 f4       	brcc	.+4      	; 0x26fa <__stack+0x5fb>
    26f6:	31 60       	ori	r19, 0x01	; 1
			} else {
				if (IsLower(c)) {		/* ASCII small capital? */
    26f8:	20 52       	subi	r18, 0x20	; 32
    26fa:	f7 01       	movw	r30, r14
    26fc:	e6 0f       	add	r30, r22
    26fe:	f7 1f       	adc	r31, r23
					b |= 1; c -= 0x20;
    2700:	20 83       	st	Z, r18
    2702:	6f 5f       	subi	r22, 0xFF	; 255
				}
			}
			sfn[i++] = c;
    2704:	7f 4f       	sbci	r23, 0xFF	; 255
    2706:	94 cf       	rjmp	.-216    	; 0x2630 <__stack+0x531>
    2708:	44 e0       	ldi	r20, 0x04	; 4
    270a:	01 c0       	rjmp	.+2      	; 0x270e <__stack+0x60f>
    270c:	40 e0       	ldi	r20, 0x00	; 0
    270e:	61 15       	cp	r22, r1
    2710:	71 05       	cpc	r23, r1
		}
	}
	*path = &p[si];						/* Return pointer to the next segment */
	c = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
    2712:	09 f4       	brne	.+2      	; 0x2716 <__stack+0x617>
    2714:	67 c0       	rjmp	.+206    	; 0x27e4 <__stack+0x6e5>
    2716:	d7 01       	movw	r26, r14

	if (!i) return FR_INVALID_NAME;		/* Reject nul string */
    2718:	8c 91       	ld	r24, X
    271a:	85 3e       	cpi	r24, 0xE5	; 229
    271c:	09 f4       	brne	.+2      	; 0x2720 <__stack+0x621>
    271e:	8c 92       	st	X, r8
	if (sfn[0] == DDE) sfn[0] = NDDE;	/* When first char collides with DDE, replace it with 0x05 */
    2720:	08 30       	cpi	r16, 0x08	; 8
    2722:	11 05       	cpc	r17, r1
    2724:	11 f4       	brne	.+4      	; 0x272a <__stack+0x62b>
    2726:	33 0f       	add	r19, r19
    2728:	33 0f       	add	r19, r19

	if (ni == 8) b <<= 2;
    272a:	83 2f       	mov	r24, r19
    272c:	90 e0       	ldi	r25, 0x00	; 0
    272e:	9c 01       	movw	r18, r24
    2730:	23 70       	andi	r18, 0x03	; 3
    2732:	30 70       	andi	r19, 0x00	; 0
	if ((b & 0x03) == 0x01) c |= NS_EXT;	/* NT flag (Name extension has only small capital) */
    2734:	21 30       	cpi	r18, 0x01	; 1
    2736:	31 05       	cpc	r19, r1
    2738:	09 f4       	brne	.+2      	; 0x273c <__stack+0x63d>
    273a:	40 61       	ori	r20, 0x10	; 16
    273c:	8c 70       	andi	r24, 0x0C	; 12
    273e:	90 70       	andi	r25, 0x00	; 0
    2740:	84 30       	cpi	r24, 0x04	; 4
    2742:	91 05       	cpc	r25, r1
    2744:	09 f4       	brne	.+2      	; 0x2748 <__stack+0x649>
	if ((b & 0x0C) == 0x04) c |= NS_BODY;	/* NT flag (Name body has only small capital) */
    2746:	48 60       	ori	r20, 0x08	; 8
    2748:	f7 01       	movw	r30, r14
    274a:	43 87       	std	Z+11, r20	; 0x0b
    274c:	ce 01       	movw	r24, r28
    274e:	0d 96       	adiw	r24, 0x0d	; 13
    2750:	4f d9       	rcall	.-3426   	; 0x19f0 <dir_sdi.constprop.2>

	sfn[NS] = c;		/* Store NT flag, File name is created */
    2752:	88 23       	and	r24, r24
    2754:	21 f5       	brne	.+72     	; 0x279e <__stack+0x69f>
	BYTE c, *dir;
#if _USE_LFN
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dj, 0);			/* Rewind directory object */
    2756:	4b 8d       	ldd	r20, Y+27	; 0x1b
    2758:	5c 8d       	ldd	r21, Y+28	; 0x1c
    275a:	6d 8d       	ldd	r22, Y+29	; 0x1d
    275c:	7e 8d       	ldd	r23, Y+30	; 0x1e
	if (res != FR_OK) return res;
    275e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2760:	9e 85       	ldd	r25, Y+14	; 0x0e

#if _USE_LFN
	ord = sum = 0xFF;
#endif
	do {
		res = move_window(dj->fs, dj->sect);
    2762:	0e 94 2e 0b 	call	0x165c	; 0x165c <move_window>
    2766:	88 23       	and	r24, r24
    2768:	d1 f4       	brne	.+52     	; 0x279e <__stack+0x69f>
    276a:	ef 8d       	ldd	r30, Y+31	; 0x1f
    276c:	f8 a1       	lds	r31, 0x48
    276e:	90 81       	ld	r25, Z
    2770:	99 23       	and	r25, r25
		if (res != FR_OK) break;
    2772:	a1 f0       	breq	.+40     	; 0x279c <__stack+0x69d>
    2774:	93 85       	ldd	r25, Z+11	; 0x0b
		dir = dj->dir;					/* Ptr to the directory entry of current index */
    2776:	93 fd       	sbrc	r25, 3
    2778:	0b c0       	rjmp	.+22     	; 0x2790 <__stack+0x691>
		c = dir[DIR_Name];
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
    277a:	a9 a1       	lds	r26, 0x49
    277c:	ba a1       	lds	r27, 0x4a
    277e:	2c e0       	ldi	r18, 0x0C	; 12
				ord = 0xFF; dj->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
				if (!(dj->fn[NS] & NS_LOSS) && !mem_cmp(dir, dj->fn, 11)) break;	/* SFN matched? */
			}
		}
#else		/* Non LFN configuration */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dj->fn, 11)) /* Is it a valid entry? */
    2780:	30 e0       	ldi	r19, 0x00	; 0
    2782:	21 50       	subi	r18, 0x01	; 1
    2784:	30 40       	sbci	r19, 0x00	; 0
    2786:	59 f0       	breq	.+22     	; 0x279e <__stack+0x69f>
    2788:	41 91       	ld	r20, Z+
    278a:	9d 91       	ld	r25, X+
    278c:	49 17       	cp	r20, r25
    278e:	c9 f3       	breq	.-14     	; 0x2782 <__stack+0x683>
    2790:	ce 01       	movw	r24, r28
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
	int r = 0;

	while (cnt-- && (r = *d++ - *s++) == 0) ;
    2792:	0d 96       	adiw	r24, 0x0d	; 13
    2794:	60 e0       	ldi	r22, 0x00	; 0
    2796:	70 e0       	ldi	r23, 0x00	; 0
    2798:	67 db       	rcall	.-2354   	; 0x1e68 <dir_next>
    279a:	db cf       	rjmp	.-74     	; 0x2752 <__stack+0x653>
		}
#else		/* Non LFN configuration */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dj->fn, 11)) /* Is it a valid entry? */
			break;
#endif
		res = dir_next(dj, 0);		/* Next entry */
    279c:	84 e0       	ldi	r24, 0x04	; 4
    279e:	e9 a1       	lds	r30, 0x49
    27a0:	fa a1       	lds	r31, 0x4a
    27a2:	93 85       	ldd	r25, Z+11	; 0x0b
    27a4:	88 23       	and	r24, r24
    27a6:	31 f0       	breq	.+12     	; 0x27b4 <__stack+0x6b5>
    27a8:	18 2f       	mov	r17, r24
	do {
		res = move_window(dj->fs, dj->sect);
		if (res != FR_OK) break;
		dir = dj->dir;					/* Ptr to the directory entry of current index */
		c = dir[DIR_Name];
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
    27aa:	14 30       	cpi	r17, 0x04	; 4
	} else {							/* Follow path */
		for (;;) {
			res = create_name(dj, &path);	/* Get a segment */
			if (res != FR_OK) break;
			res = dir_find(dj);				/* Find it */
			ns = *(dj->fn+NS);
    27ac:	01 f5       	brne	.+64     	; 0x27ee <__stack+0x6ef>
    27ae:	92 ff       	sbrs	r25, 2
    27b0:	1b c0       	rjmp	.+54     	; 0x27e8 <__stack+0x6e9>
			if (res != FR_OK) {				/* Failed to find the object */
    27b2:	1d c0       	rjmp	.+58     	; 0x27ee <__stack+0x6ef>
    27b4:	92 fd       	sbrc	r25, 2
    27b6:	1a c0       	rjmp	.+52     	; 0x27ec <__stack+0x6ed>
				if (res != FR_NO_FILE) break;	/* Abort if any hard error occurred */
    27b8:	6f 8d       	ldd	r22, Y+31	; 0x1f
    27ba:	78 a1       	lds	r23, 0x48
				if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exit */
					dj->sclust = 0; dj->dir = 0;	/* It is the root dir */
					res = FR_OK;
					if (!(ns & NS_LAST)) continue;
				} else {							/* Could not find the object */
					if (!(ns & NS_LAST)) res = FR_NO_PATH;
    27bc:	db 01       	movw	r26, r22
    27be:	1b 96       	adiw	r26, 0x0b	; 11
    27c0:	8c 91       	ld	r24, X
				}
				break;
			}
			if (ns & NS_LAST) break;			/* Last segment match. Function completed. */
    27c2:	1b 97       	sbiw	r26, 0x0b	; 11
    27c4:	84 ff       	sbrs	r24, 4
			dir = dj->dir;						/* There is next segment. Follow the sub directory */
    27c6:	10 c0       	rjmp	.+32     	; 0x27e8 <__stack+0x6e9>
    27c8:	ac 0c       	add	r10, r12
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* Cannot follow because it is a file */
    27ca:	bd 1c       	adc	r11, r13
    27cc:	ed 85       	ldd	r30, Y+13	; 0x0d
    27ce:	fe 85       	ldd	r31, Y+14	; 0x0e
    27d0:	80 81       	ld	r24, Z
    27d2:	0e 94 e5 0b 	call	0x17ca	; 0x17ca <ld_clust.isra.0>
				}
			}
			sfn[i++] = c;
		}
	}
	*path = &p[si];						/* Return pointer to the next segment */
    27d6:	dc 01       	movw	r26, r24
    27d8:	cb 01       	movw	r24, r22
		}
#endif
	}

	LEAVE_FF(fp->fs, res);
}
    27da:	8b 8b       	std	Y+19, r24	; 0x13
    27dc:	9c 8b       	std	Y+20, r25	; 0x14
			if (ns & NS_LAST) break;			/* Last segment match. Function completed. */
			dir = dj->dir;						/* There is next segment. Follow the sub directory */
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* Cannot follow because it is a file */
				res = FR_NO_PATH; break;
			}
			dj->sclust = ld_clust(dj->fs, dir);
    27de:	ad 8b       	std	Y+21, r26	; 0x15
    27e0:	be 8b       	std	Y+22, r27	; 0x16
    27e2:	0b cf       	rjmp	.-490    	; 0x25fa <__stack+0x4fb>
    27e4:	16 e0       	ldi	r17, 0x06	; 6
    27e6:	03 c0       	rjmp	.+6      	; 0x27ee <__stack+0x6ef>
    27e8:	15 e0       	ldi	r17, 0x05	; 5
    27ea:	01 c0       	rjmp	.+2      	; 0x27ee <__stack+0x6ef>
    27ec:	18 2f       	mov	r17, r24
    27ee:	cf 8c       	ldd	r12, Y+31	; 0x1f
    27f0:	d8 a0       	lds	r29, 0x88
		}
	}
	*path = &p[si];						/* Return pointer to the next segment */
	c = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */

	if (!i) return FR_INVALID_NAME;		/* Reject nul string */
    27f2:	11 23       	and	r17, r17
    27f4:	21 f4       	brne	.+8      	; 0x27fe <__stack+0x6ff>
				break;
			}
			if (ns & NS_LAST) break;			/* Last segment match. Function completed. */
			dir = dj->dir;						/* There is next segment. Follow the sub directory */
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* Cannot follow because it is a file */
				res = FR_NO_PATH; break;
    27f6:	c1 14       	cp	r12, r1
    27f8:	d1 04       	cpc	r13, r1
    27fa:	09 f4       	brne	.+2      	; 0x27fe <__stack+0x6ff>
	res = chk_mounted(&path, &dj.fs, 0);
#endif
	if (res == FR_OK) {
		INIT_BUF(dj);
		res = follow_path(&dj, path);	/* Follow the file path */
		dir = dj.dir;
    27fc:	16 e0       	ldi	r17, 0x06	; 6
    27fe:	b9 a5       	lds	r27, 0x69
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
    2800:	2b 2f       	mov	r18, r27
    2802:	30 e0       	ldi	r19, 0x00	; 0
			if (!dir)	/* Current dir itself */
    2804:	c9 01       	movw	r24, r18
    2806:	8c 71       	andi	r24, 0x1C	; 28
    2808:	90 70       	andi	r25, 0x00	; 0
				res = FR_INVALID_NAME;
    280a:	00 97       	sbiw	r24, 0x00	; 0
			else
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
    280c:	09 f4       	brne	.+2      	; 0x2810 <__stack+0x711>
    280e:	ee c0       	rjmp	.+476    	; 0x29ec <__stack+0x8ed>
    2810:	11 23       	and	r17, r17
    2812:	09 f4       	brne	.+2      	; 0x2816 <__stack+0x717>
    2814:	49 c0       	rjmp	.+146    	; 0x28a8 <__stack+0x7a9>
    2816:	14 30       	cpi	r17, 0x04	; 4
    2818:	09 f0       	breq	.+2      	; 0x281c <__stack+0x71d>
    281a:	3d c0       	rjmp	.+122    	; 0x2896 <__stack+0x797>
    281c:	3d e0       	ldi	r19, 0x0D	; 13
			DWORD dw, cl;

			if (res != FR_OK) {					/* No file, create new */
    281e:	e3 2e       	mov	r14, r19
    2820:	f1 2c       	mov	r15, r1
    2822:	ec 0e       	add	r14, r28
				if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
    2824:	fd 1e       	adc	r15, r29
    2826:	c7 01       	movw	r24, r14
    2828:	e3 d8       	rcall	.-3642   	; 0x19f0 <dir_sdi.constprop.2>
#if _FS_LOCK
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
#else
					res = dir_register(&dj);
    282a:	18 2f       	mov	r17, r24
    282c:	88 23       	and	r24, r24
    282e:	99 f5       	brne	.+102    	; 0x2896 <__stack+0x797>
    2830:	0e 2d       	mov	r16, r14
    2832:	ef 2c       	mov	r14, r15
			} while (res == FR_OK && --ne);
		}
	}

#else	/* Non LFN configuration */
	res = dir_sdi(dj, 0);
    2834:	4b 8d       	ldd	r20, Y+27	; 0x1b
    2836:	5c 8d       	ldd	r21, Y+28	; 0x1c
    2838:	6d 8d       	ldd	r22, Y+29	; 0x1d
    283a:	7e 8d       	ldd	r23, Y+30	; 0x1e
	if (res == FR_OK) {
    283c:	8d 85       	ldd	r24, Y+13	; 0x0d
    283e:	9e 85       	ldd	r25, Y+14	; 0x0e
			if (res != FR_OK) {					/* No file, create new */
				if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
#if _FS_LOCK
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
#else
					res = dir_register(&dj);
    2840:	0e 94 2e 0b 	call	0x165c	; 0x165c <move_window>

#else	/* Non LFN configuration */
	res = dir_sdi(dj, 0);
	if (res == FR_OK) {
		do {	/* Find a blank entry for the SFN */
			res = move_window(dj->fs, dj->sect);
    2844:	88 23       	and	r24, r24
    2846:	31 f5       	brne	.+76     	; 0x2894 <__stack+0x795>
    2848:	ef 8d       	ldd	r30, Y+31	; 0x1f
    284a:	f8 a1       	lds	r31, 0x48
    284c:	80 81       	ld	r24, Z
    284e:	85 3e       	cpi	r24, 0xE5	; 229
    2850:	09 f4       	brne	.+2      	; 0x2854 <__stack+0x755>
    2852:	37 c1       	rjmp	.+622    	; 0x2ac2 <__stack+0x9c3>
			if (res != FR_OK) break;
    2854:	88 23       	and	r24, r24
    2856:	09 f4       	brne	.+2      	; 0x285a <__stack+0x75b>
			c = *dj->dir;
    2858:	34 c1       	rjmp	.+616    	; 0x2ac2 <__stack+0x9c3>
    285a:	80 2f       	mov	r24, r16
    285c:	9e 2d       	mov	r25, r14
			if (c == DDE || c == 0) break;	/* Is it a blank entry? */
    285e:	61 e0       	ldi	r22, 0x01	; 1
    2860:	70 e0       	ldi	r23, 0x00	; 0
    2862:	02 db       	rcall	.-2556   	; 0x1e68 <dir_next>
    2864:	88 23       	and	r24, r24
    2866:	31 f3       	breq	.-52     	; 0x2834 <__stack+0x735>
    2868:	15 c0       	rjmp	.+42     	; 0x2894 <__stack+0x795>
			res = dir_next(dj, 1);			/* Next entry with table stretch */
    286a:	ef 8c       	ldd	r14, Y+31	; 0x1f
    286c:	f8 a0       	lds	r31, 0x88
    286e:	c7 01       	movw	r24, r14
    2870:	60 e0       	ldi	r22, 0x00	; 0
    2872:	70 e0       	ldi	r23, 0x00	; 0
    2874:	40 e2       	ldi	r20, 0x20	; 32
		} while (res == FR_OK);
    2876:	50 e0       	ldi	r21, 0x00	; 0
    2878:	0e 94 03 0b 	call	0x1606	; 0x1606 <mem_set>
#endif

	if (res == FR_OK) {		/* Initialize the SFN entry */
		res = move_window(dj->fs, dj->sect);
		if (res == FR_OK) {
			dir = dj->dir;
    287c:	69 a1       	lds	r22, 0x49
    287e:	7a a1       	lds	r23, 0x4a
			mem_set(dir, 0, SZ_DIR);	/* Clean the entry */
    2880:	c7 01       	movw	r24, r14
    2882:	4b e0       	ldi	r20, 0x0B	; 11
    2884:	50 e0       	ldi	r21, 0x00	; 0
    2886:	0e 94 e5 0a 	call	0x15ca	; 0x15ca <mem_cpy>
    288a:	ed 85       	ldd	r30, Y+13	; 0x0d
    288c:	fe 85       	ldd	r31, Y+14	; 0x0e
			mem_cpy(dir, dj->fn, 11);	/* Put SFN */
    288e:	81 e0       	ldi	r24, 0x01	; 1
    2890:	84 83       	std	Z+4, r24	; 0x04
    2892:	01 c0       	rjmp	.+2      	; 0x2896 <__stack+0x797>
    2894:	18 2f       	mov	r17, r24
    2896:	cf 8c       	ldd	r12, Y+31	; 0x1f
    2898:	d8 a0       	lds	r29, 0x88
    289a:	11 23       	and	r17, r17
#if _USE_LFN
			dir[DIR_NTres] = *(dj->fn+NS) & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			dj->fs->wflag = 1;
    289c:	09 f0       	breq	.+2      	; 0x28a0 <__stack+0x7a1>
    289e:	f7 c0       	rjmp	.+494    	; 0x2a8e <__stack+0x98f>
    28a0:	e9 a5       	lds	r30, 0x69
    28a2:	e8 60       	ori	r30, 0x08	; 8
    28a4:	e9 a7       	lds	r30, 0x79
    28a6:	09 c0       	rjmp	.+18     	; 0x28ba <__stack+0x7bb>
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
#else
					res = dir_register(&dj);
#endif
				mode |= FA_CREATE_ALWAYS;		/* File is created */
				dir = dj.dir;					/* New entry */
    28a8:	d6 01       	movw	r26, r12
    28aa:	1b 96       	adiw	r26, 0x0b	; 11
				} else {
					if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
						res = FR_EXIST;
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
    28ac:	8c 91       	ld	r24, X
    28ae:	1b 97       	sbiw	r26, 0x0b	; 11
    28b0:	81 71       	andi	r24, 0x11	; 17
#if _FS_LOCK
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
#else
					res = dir_register(&dj);
#endif
				mode |= FA_CREATE_ALWAYS;		/* File is created */
    28b2:	09 f0       	breq	.+2      	; 0x28b6 <__stack+0x7b7>
    28b4:	17 c1       	rjmp	.+558    	; 0x2ae4 <__stack+0x9e5>
    28b6:	22 fd       	sbrc	r18, 2
    28b8:	11 c1       	rjmp	.+546    	; 0x2adc <__stack+0x9dd>
				dir = dj.dir;					/* New entry */
			}
			else {								/* Any object is already existing */
				if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
    28ba:	b9 a5       	lds	r27, 0x69
    28bc:	b3 ff       	sbrs	r27, 3
    28be:	a3 c0       	rjmp	.+326    	; 0x2a06 <__stack+0x907>
    28c0:	0e 94 7d 0a 	call	0x14fa	; 0x14fa <get_fattime>
    28c4:	dc 01       	movw	r26, r24
    28c6:	cb 01       	movw	r24, r22
					res = FR_DENIED;
				} else {
					if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
    28c8:	f6 01       	movw	r30, r12
    28ca:	86 87       	std	Z+14, r24	; 0x0e
						res = FR_EXIST;
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
    28cc:	97 87       	std	Z+15, r25	; 0x0f
    28ce:	a0 8b       	std	Z+16, r26	; 0x10
    28d0:	b1 8b       	std	Z+17, r27	; 0x11
				dw = get_fattime();					/* Created time */
    28d2:	13 86       	std	Z+11, r1	; 0x0b
    28d4:	14 8e       	std	Z+28, r1	; 0x1c
    28d6:	15 8e       	std	Z+29, r1	; 0x1d
    28d8:	16 8e       	std	Z+30, r1	; 0x1e
				ST_DWORD(dir+DIR_CrtTime, dw);
    28da:	17 8e       	std	Z+31, r1	; 0x1f
    28dc:	ed 85       	ldd	r30, Y+13	; 0x0d
    28de:	fe 85       	ldd	r31, Y+14	; 0x0e
    28e0:	80 81       	ld	r24, Z
    28e2:	b6 01       	movw	r22, r12
				dir[DIR_Attr] = 0;					/* Reset attribute */
    28e4:	0e 94 e5 0b 	call	0x17ca	; 0x17ca <ld_clust.isra.0>
				ST_DWORD(dir+DIR_FileSize, 0);		/* size = 0 */
    28e8:	6b a3       	lds	r22, 0x5b
    28ea:	7c a3       	lds	r23, 0x5c
    28ec:	8d a3       	lds	r24, 0x5d
		}
#endif
	}

	LEAVE_FF(fp->fs, res);
}
    28ee:	9e a3       	lds	r25, 0x5e
    28f0:	c6 01       	movw	r24, r12
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
				dw = get_fattime();					/* Created time */
				ST_DWORD(dir+DIR_CrtTime, dw);
				dir[DIR_Attr] = 0;					/* Reset attribute */
				ST_DWORD(dir+DIR_FileSize, 0);		/* size = 0 */
				cl = ld_clust(dj.fs, dir);			/* Get start cluster */
    28f2:	40 e0       	ldi	r20, 0x00	; 0
    28f4:	50 e0       	ldi	r21, 0x00	; 0
    28f6:	ba 01       	movw	r22, r20
    28f8:	0e 94 0c 0b 	call	0x1618	; 0x1618 <st_clust>
    28fc:	ed 84       	ldd	r14, Y+13	; 0x0d
    28fe:	fe 84       	ldd	r15, Y+14	; 0x0e
    2900:	81 e0       	ldi	r24, 0x01	; 1
				st_clust(dir, 0);					/* cluster = 0 */
    2902:	f7 01       	movw	r30, r14
    2904:	84 83       	std	Z+4, r24	; 0x04
    2906:	2b a1       	lds	r18, 0x4b
    2908:	3c a1       	lds	r19, 0x4c
    290a:	4d a1       	lds	r20, 0x4d
    290c:	5e a1       	lds	r21, 0x4e
				dj.fs->wflag = 1;
    290e:	21 15       	cp	r18, r1
    2910:	31 05       	cpc	r19, r1
    2912:	41 05       	cpc	r20, r1
    2914:	51 05       	cpc	r21, r1
    2916:	09 f4       	brne	.+2      	; 0x291a <__stack+0x81b>
				if (cl) {							/* Remove the cluster chain if exist */
    2918:	76 c0       	rjmp	.+236    	; 0x2a06 <__stack+0x907>
    291a:	82 a5       	lds	r24, 0x62
    291c:	93 a5       	lds	r25, 0x63
    291e:	a4 a5       	lds	r26, 0x64
    2920:	b5 a5       	lds	r27, 0x65
    2922:	8a a7       	lds	r24, 0x7a
    2924:	9b a7       	lds	r25, 0x7b
    2926:	ac a7       	lds	r26, 0x7c
    2928:	bd a7       	lds	r27, 0x7d
    292a:	22 30       	cpi	r18, 0x02	; 2
					dw = dj.fs->winsect;
    292c:	31 05       	cpc	r19, r1
    292e:	41 05       	cpc	r20, r1
    2930:	51 05       	cpc	r21, r1
    2932:	08 f4       	brcc	.+2      	; 0x2936 <__stack+0x837>
    2934:	57 c0       	rjmp	.+174    	; 0x29e4 <__stack+0x8e5>
    2936:	86 89       	ldd	r24, Z+22	; 0x16
    2938:	97 89       	ldd	r25, Z+23	; 0x17
    293a:	a0 8d       	ldd	r26, Z+24	; 0x18
	DWORD nxt;
#if _USE_ERASE
	DWORD scl = clst, ecl = clst, rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
    293c:	b1 8d       	ldd	r27, Z+25	; 0x19
    293e:	28 17       	cp	r18, r24
    2940:	39 07       	cpc	r19, r25
    2942:	4a 07       	cpc	r20, r26
    2944:	5b 07       	cpc	r21, r27
    2946:	08 f0       	brcs	.+2      	; 0x294a <__stack+0x84b>
    2948:	4d c0       	rjmp	.+154    	; 0x29e4 <__stack+0x8e5>
    294a:	49 01       	movw	r8, r18
    294c:	5a 01       	movw	r10, r20
    294e:	33 24       	eor	r3, r3
    2950:	33 94       	inc	r3
    2952:	3c c0       	rjmp	.+120    	; 0x29cc <__stack+0x8cd>
    2954:	c7 01       	movw	r24, r14
    2956:	b5 01       	movw	r22, r10
    2958:	a4 01       	movw	r20, r8
    295a:	0e 94 32 0c 	call	0x1864	; 0x1864 <get_fat>
    295e:	2b 01       	movw	r4, r22
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
			if (res != FR_OK) break;
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSInfo */
				fs->free_clust++;
				fs->fsi_flag = 1;
    2960:	3c 01       	movw	r6, r24
    2962:	61 15       	cp	r22, r1
    2964:	71 05       	cpc	r23, r1
		res = FR_INT_ERR;

	} else {
		res = FR_OK;
		while (clst < fs->n_fatent) {			/* Not a last link? */
			nxt = get_fat(fs, clst);			/* Get cluster status */
    2966:	81 05       	cpc	r24, r1
    2968:	91 05       	cpc	r25, r1
    296a:	09 f4       	brne	.+2      	; 0x296e <__stack+0x86f>
    296c:	c8 c0       	rjmp	.+400    	; 0x2afe <__stack+0x9ff>
    296e:	61 30       	cpi	r22, 0x01	; 1
    2970:	71 05       	cpc	r23, r1
    2972:	81 05       	cpc	r24, r1
			if (nxt == 0) break;				/* Empty cluster? */
    2974:	91 05       	cpc	r25, r1
    2976:	b1 f1       	breq	.+108    	; 0x29e4 <__stack+0x8e5>
    2978:	6f 3f       	cpi	r22, 0xFF	; 255
    297a:	2f ef       	ldi	r18, 0xFF	; 255
    297c:	72 07       	cpc	r23, r18
    297e:	2f ef       	ldi	r18, 0xFF	; 255
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
    2980:	82 07       	cpc	r24, r18
    2982:	2f ef       	ldi	r18, 0xFF	; 255
    2984:	92 07       	cpc	r25, r18
    2986:	81 f1       	breq	.+96     	; 0x29e8 <__stack+0x8e9>
    2988:	c7 01       	movw	r24, r14
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
    298a:	b5 01       	movw	r22, r10
    298c:	a4 01       	movw	r20, r8
    298e:	00 e0       	ldi	r16, 0x00	; 0
    2990:	10 e0       	ldi	r17, 0x00	; 0
    2992:	98 01       	movw	r18, r16
    2994:	b0 d8       	rcall	.-3744   	; 0x1af6 <put_fat>
    2996:	88 23       	and	r24, r24
    2998:	09 f0       	breq	.+2      	; 0x299c <__stack+0x89d>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
    299a:	78 c0       	rjmp	.+240    	; 0x2a8c <__stack+0x98d>
    299c:	f7 01       	movw	r30, r14
    299e:	86 85       	ldd	r24, Z+14	; 0x0e
    29a0:	97 85       	ldd	r25, Z+15	; 0x0f
    29a2:	a0 89       	ldd	r26, Z+16	; 0x10
    29a4:	b1 89       	ldd	r27, Z+17	; 0x11
    29a6:	8f 3f       	cpi	r24, 0xFF	; 255
    29a8:	ff ef       	ldi	r31, 0xFF	; 255
			if (res != FR_OK) break;
    29aa:	9f 07       	cpc	r25, r31
    29ac:	ff ef       	ldi	r31, 0xFF	; 255
    29ae:	af 07       	cpc	r26, r31
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSInfo */
    29b0:	ff ef       	ldi	r31, 0xFF	; 255
    29b2:	bf 07       	cpc	r27, r31
    29b4:	49 f0       	breq	.+18     	; 0x29c8 <__stack+0x8c9>
    29b6:	01 96       	adiw	r24, 0x01	; 1
    29b8:	a1 1d       	adc	r26, r1
    29ba:	b1 1d       	adc	r27, r1
    29bc:	f7 01       	movw	r30, r14
    29be:	86 87       	std	Z+14, r24	; 0x0e
    29c0:	97 87       	std	Z+15, r25	; 0x0f
    29c2:	a0 8b       	std	Z+16, r26	; 0x10
    29c4:	b1 8b       	std	Z+17, r27	; 0x11
    29c6:	35 82       	std	Z+5, r3	; 0x05
    29c8:	53 01       	movw	r10, r6
				fs->free_clust++;
    29ca:	42 01       	movw	r8, r4
    29cc:	f7 01       	movw	r30, r14
    29ce:	86 89       	ldd	r24, Z+22	; 0x16
    29d0:	97 89       	ldd	r25, Z+23	; 0x17
    29d2:	a0 8d       	ldd	r26, Z+24	; 0x18
    29d4:	b1 8d       	ldd	r27, Z+25	; 0x19
    29d6:	88 16       	cp	r8, r24
    29d8:	99 06       	cpc	r9, r25
				fs->fsi_flag = 1;
    29da:	aa 06       	cpc	r10, r26
	DWORD nxt;
#if _USE_ERASE
	DWORD scl = clst, ecl = clst, rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
    29dc:	bb 06       	cpc	r11, r27
    29de:	08 f4       	brcc	.+2      	; 0x29e2 <__stack+0x8e3>
		res = FR_INT_ERR;

	} else {
		res = FR_OK;
		while (clst < fs->n_fatent) {			/* Not a last link? */
    29e0:	b9 cf       	rjmp	.-142    	; 0x2954 <__stack+0x855>
    29e2:	8d c0       	rjmp	.+282    	; 0x2afe <__stack+0x9ff>
    29e4:	12 e0       	ldi	r17, 0x02	; 2
    29e6:	53 c0       	rjmp	.+166    	; 0x2a8e <__stack+0x98f>
    29e8:	11 e0       	ldi	r17, 0x01	; 1
    29ea:	51 c0       	rjmp	.+162    	; 0x2a8e <__stack+0x98f>
    29ec:	11 23       	and	r17, r17
    29ee:	09 f0       	breq	.+2      	; 0x29f2 <__stack+0x8f3>
    29f0:	4e c0       	rjmp	.+156    	; 0x2a8e <__stack+0x98f>
    29f2:	d6 01       	movw	r26, r12
    29f4:	1b 96       	adiw	r26, 0x0b	; 11
    29f6:	8c 91       	ld	r24, X
			nxt = get_fat(fs, clst);			/* Get cluster status */
			if (nxt == 0) break;				/* Empty cluster? */
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
    29f8:	1b 97       	sbiw	r26, 0x0b	; 11
    29fa:	84 fd       	sbrc	r24, 4
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
    29fc:	71 c0       	rjmp	.+226    	; 0x2ae0 <__stack+0x9e1>
    29fe:	21 ff       	sbrs	r18, 1
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {						/* Follow succeeded */
    2a00:	02 c0       	rjmp	.+4      	; 0x2a06 <__stack+0x907>
    2a02:	80 fd       	sbrc	r24, 0
    2a04:	6f c0       	rjmp	.+222    	; 0x2ae4 <__stack+0x9e5>
				if (dir[DIR_Attr] & AM_DIR) {		/* It is a directory */
    2a06:	b9 a5       	lds	r27, 0x69
    2a08:	b3 ff       	sbrs	r27, 3
    2a0a:	02 c0       	rjmp	.+4      	; 0x2a10 <__stack+0x911>
    2a0c:	b0 62       	ori	r27, 0x20	; 32
    2a0e:	b9 a7       	lds	r27, 0x79
    2a10:	0d 85       	ldd	r16, Y+13	; 0x0d
					res = FR_NO_FILE;
				} else {
					if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
    2a12:	1e 85       	ldd	r17, Y+14	; 0x0e
    2a14:	f8 01       	movw	r30, r16
    2a16:	82 a5       	lds	r24, 0x62
    2a18:	93 a5       	lds	r25, 0x63
						res = FR_DENIED;
				}
			}
		}
		if (res == FR_OK) {
			if (mode & FA_CREATE_ALWAYS)			/* Set file change flag if created or overwritten */
    2a1a:	a4 a5       	lds	r26, 0x64
    2a1c:	b5 a5       	lds	r27, 0x65
    2a1e:	ef a1       	lds	r30, 0x4f
				mode |= FA__WRITTEN;
    2a20:	f8 a5       	lds	r31, 0x68
    2a22:	82 8f       	std	Z+26, r24	; 0x1a
			fp->dir_sect = dj.fs->winsect;			/* Pointer to the directory entry */
    2a24:	93 8f       	std	Z+27, r25	; 0x1b
    2a26:	a4 8f       	std	Z+28, r26	; 0x1c
    2a28:	b5 8f       	std	Z+29, r27	; 0x1d
    2a2a:	d7 8e       	std	Z+31, r13	; 0x1f
    2a2c:	c6 8e       	std	Z+30, r12	; 0x1e
    2a2e:	29 a5       	lds	r18, 0x69
    2a30:	24 83       	std	Z+4, r18	; 0x04
    2a32:	d8 01       	movw	r26, r16
    2a34:	8c 91       	ld	r24, X
    2a36:	b6 01       	movw	r22, r12
    2a38:	0e 94 e5 0b 	call	0x17ca	; 0x17ca <ld_clust.isra.0>
    2a3c:	dc 01       	movw	r26, r24
			fp->dir_ptr = dir;
    2a3e:	cb 01       	movw	r24, r22
    2a40:	ef a1       	lds	r30, 0x4f
		}
#endif
		FREE_BUF();

		if (res == FR_OK) {
			fp->flag = mode;					/* File access mode */
    2a42:	f8 a5       	lds	r31, 0x68
    2a44:	86 87       	std	Z+14, r24	; 0x0e
			fp->sclust = ld_clust(dj.fs, dir);	/* File start cluster */
    2a46:	97 87       	std	Z+15, r25	; 0x0f
    2a48:	a0 8b       	std	Z+16, r26	; 0x10
    2a4a:	b1 8b       	std	Z+17, r27	; 0x11
    2a4c:	f6 01       	movw	r30, r12
    2a4e:	84 8d       	ldd	r24, Z+28	; 0x1c
    2a50:	95 8d       	ldd	r25, Z+29	; 0x1d
    2a52:	a6 8d       	ldd	r26, Z+30	; 0x1e
    2a54:	b7 8d       	ldd	r27, Z+31	; 0x1f
    2a56:	ef a1       	lds	r30, 0x4f
    2a58:	f8 a5       	lds	r31, 0x68
    2a5a:	82 87       	std	Z+10, r24	; 0x0a
    2a5c:	93 87       	std	Z+11, r25	; 0x0b
    2a5e:	a4 87       	std	Z+12, r26	; 0x0c
			fp->fsize = LD_DWORD(dir+DIR_FileSize);	/* File size */
    2a60:	b5 87       	std	Z+13, r27	; 0x0d
    2a62:	16 82       	std	Z+6, r1	; 0x06
    2a64:	17 82       	std	Z+7, r1	; 0x07
    2a66:	10 86       	std	Z+8, r1	; 0x08
    2a68:	11 86       	std	Z+9, r1	; 0x09
    2a6a:	16 8a       	std	Z+22, r1	; 0x16
    2a6c:	17 8a       	std	Z+23, r1	; 0x17
    2a6e:	10 8e       	std	Z+24, r1	; 0x18
    2a70:	11 8e       	std	Z+25, r1	; 0x19
    2a72:	11 83       	std	Z+1, r17	; 0x01
    2a74:	00 83       	st	Z, r16
			fp->fptr = 0;						/* File pointer */
    2a76:	d8 01       	movw	r26, r16
    2a78:	16 96       	adiw	r26, 0x06	; 6
    2a7a:	8d 91       	ld	r24, X+
    2a7c:	9c 91       	ld	r25, X
			fp->dsect = 0;
    2a7e:	17 97       	sbiw	r26, 0x07	; 7
    2a80:	93 83       	std	Z+3, r25	; 0x03
    2a82:	82 83       	std	Z+2, r24	; 0x02
    2a84:	10 e0       	ldi	r17, 0x00	; 0
#if _USE_FASTSEEK
			fp->cltbl = 0;						/* Normal seek mode */
#endif
			fp->fs = dj.fs; fp->id = dj.fs->id;	/* Validate file object */
    2a86:	03 c0       	rjmp	.+6      	; 0x2a8e <__stack+0x98f>
    2a88:	19 e0       	ldi	r17, 0x09	; 9
    2a8a:	01 c0       	rjmp	.+2      	; 0x2a8e <__stack+0x98f>
    2a8c:	18 2f       	mov	r17, r24
    2a8e:	81 2f       	mov	r24, r17
    2a90:	e9 96       	adiw	r28, 0x39	; 57
    2a92:	0f b6       	in	r0, 0x3f	; 63
    2a94:	f8 94       	cli
    2a96:	de bf       	out	0x3e, r29	; 62
    2a98:	0f be       	out	0x3f, r0	; 63
    2a9a:	cd bf       	out	0x3d, r28	; 61
	DIR dj;
	BYTE *dir;
	DEF_NAMEBUF;


	if (!fp) return FR_INVALID_OBJECT;
    2a9c:	df 91       	pop	r29
    2a9e:	cf 91       	pop	r28
    2aa0:	1f 91       	pop	r17
			fp->fs = dj.fs; fp->id = dj.fs->id;	/* Validate file object */
		}
	}

	LEAVE_FF(dj.fs, res);
}
    2aa2:	0f 91       	pop	r16
    2aa4:	ff 90       	pop	r15
    2aa6:	ef 90       	pop	r14
    2aa8:	df 90       	pop	r13
    2aaa:	cf 90       	pop	r12
    2aac:	bf 90       	pop	r11
    2aae:	af 90       	pop	r10
    2ab0:	9f 90       	pop	r9
    2ab2:	8f 90       	pop	r8
    2ab4:	7f 90       	pop	r7
    2ab6:	6f 90       	pop	r6
    2ab8:	5f 90       	pop	r5
    2aba:	4f 90       	pop	r4
    2abc:	3f 90       	pop	r3
    2abe:	2f 90       	pop	r2
    2ac0:	08 95       	ret
    2ac2:	4b 8d       	ldd	r20, Y+27	; 0x1b
    2ac4:	5c 8d       	ldd	r21, Y+28	; 0x1c
    2ac6:	6d 8d       	ldd	r22, Y+29	; 0x1d
    2ac8:	7e 8d       	ldd	r23, Y+30	; 0x1e
    2aca:	8d 85       	ldd	r24, Y+13	; 0x0d
    2acc:	9e 85       	ldd	r25, Y+14	; 0x0e
    2ace:	0e 94 2e 0b 	call	0x165c	; 0x165c <move_window>
    2ad2:	18 2f       	mov	r17, r24
    2ad4:	88 23       	and	r24, r24
		} while (res == FR_OK);
	}
#endif

	if (res == FR_OK) {		/* Initialize the SFN entry */
		res = move_window(dj->fs, dj->sect);
    2ad6:	09 f0       	breq	.+2      	; 0x2ada <__stack+0x9db>
    2ad8:	de ce       	rjmp	.-580    	; 0x2896 <__stack+0x797>
    2ada:	c7 ce       	rjmp	.-626    	; 0x286a <__stack+0x76b>
    2adc:	18 e0       	ldi	r17, 0x08	; 8
    2ade:	d7 cf       	rjmp	.-82     	; 0x2a8e <__stack+0x98f>
    2ae0:	14 e0       	ldi	r17, 0x04	; 4
    2ae2:	d5 cf       	rjmp	.-86     	; 0x2a8e <__stack+0x98f>
    2ae4:	17 e0       	ldi	r17, 0x07	; 7
    2ae6:	d3 cf       	rjmp	.-90     	; 0x2a8e <__stack+0x98f>
		if (res == FR_OK) {
    2ae8:	ce 01       	movw	r24, r28
    2aea:	01 96       	adiw	r24, 0x01	; 1
    2aec:	9a a3       	lds	r25, 0x5a
    2aee:	89 a3       	lds	r24, 0x59
			else {								/* Any object is already existing */
				if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
					res = FR_DENIED;
				} else {
					if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
						res = FR_EXIST;
    2af0:	eb a1       	lds	r30, 0x4b
    2af2:	fc a1       	lds	r31, 0x4c
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {						/* Follow succeeded */
				if (dir[DIR_Attr] & AM_DIR) {		/* It is a directory */
					res = FR_NO_FILE;
    2af4:	80 81       	ld	r24, Z
    2af6:	8f 32       	cpi	r24, 0x2F	; 47
				} else {
					if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
						res = FR_DENIED;
    2af8:	09 f0       	breq	.+2      	; 0x2afc <__stack+0x9fd>
    2afa:	63 cd       	rjmp	.-1338   	; 0x25c2 <__stack+0x4c3>
#else
	mode &= FA_READ;
	res = chk_mounted(&path, &dj.fs, 0);
#endif
	if (res == FR_OK) {
		INIT_BUF(dj);
    2afc:	64 cd       	rjmp	.-1336   	; 0x25c6 <__stack+0x4c7>
    2afe:	8d 85       	ldd	r24, Y+13	; 0x0d
    2b00:	9e 85       	ldd	r25, Y+14	; 0x0e
    2b02:	4b a1       	lds	r20, 0x4b
		path++;	dj->sclust = 0;		/* Strip it and start from the root dir */
	} else {							/* No heading separator */
		dj->sclust = dj->fs->cdir;	/* Start from the current dir */
	}
#else
	if (*path == '/' || *path == '\\')	/* Strip heading separator if exist */
    2b04:	5c a1       	lds	r21, 0x4c
    2b06:	6d a1       	lds	r22, 0x4d
    2b08:	7e a1       	lds	r23, 0x4e
    2b0a:	41 50       	subi	r20, 0x01	; 1
    2b0c:	50 40       	sbci	r21, 0x00	; 0
    2b0e:	60 40       	sbci	r22, 0x00	; 0
    2b10:	70 40       	sbci	r23, 0x00	; 0
				dj.fs->wflag = 1;
				if (cl) {							/* Remove the cluster chain if exist */
					dw = dj.fs->winsect;
					res = remove_chain(dj.fs, cl);
					if (res == FR_OK) {
						dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
    2b12:	dc 01       	movw	r26, r24
    2b14:	1a 96       	adiw	r26, 0x0a	; 10
    2b16:	4d 93       	st	X+, r20
    2b18:	5d 93       	st	X+, r21
    2b1a:	6d 93       	st	X+, r22
    2b1c:	7c 93       	st	X, r23
    2b1e:	1d 97       	sbiw	r26, 0x0d	; 13
    2b20:	4a a5       	lds	r20, 0x6a
    2b22:	5b a5       	lds	r21, 0x6b
    2b24:	6c a5       	lds	r22, 0x6c
    2b26:	7d a5       	lds	r23, 0x6d
    2b28:	0e 94 2e 0b 	call	0x165c	; 0x165c <move_window>
    2b2c:	18 2f       	mov	r17, r24
    2b2e:	88 23       	and	r24, r24
    2b30:	09 f4       	brne	.+2      	; 0x2b34 <__stack+0xa35>
    2b32:	69 cf       	rjmp	.-302    	; 0x2a06 <__stack+0x907>
						res = move_window(dj.fs, dw);
    2b34:	ac cf       	rjmp	.-168    	; 0x2a8e <__stack+0x98f>

00002b36 <f_write>:
    2b36:	2f 92       	push	r2
    2b38:	3f 92       	push	r3
    2b3a:	4f 92       	push	r4
    2b3c:	5f 92       	push	r5
    2b3e:	6f 92       	push	r6
    2b40:	7f 92       	push	r7
					if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
						res = FR_DENIED;
				}
			}
		}
		if (res == FR_OK) {
    2b42:	8f 92       	push	r8
    2b44:	9f 92       	push	r9
    2b46:	af 92       	push	r10
    2b48:	bf 92       	push	r11
	FIL *fp,			/* Pointer to the file object */
	const void *buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT *bw			/* Pointer to number of bytes written */
)
{
    2b4a:	cf 92       	push	r12
    2b4c:	df 92       	push	r13
    2b4e:	ef 92       	push	r14
    2b50:	ff 92       	push	r15
    2b52:	0f 93       	push	r16
    2b54:	1f 93       	push	r17
    2b56:	cf 93       	push	r28
    2b58:	df 93       	push	r29
    2b5a:	00 d0       	rcall	.+0      	; 0x2b5c <f_write+0x26>
    2b5c:	00 d0       	rcall	.+0      	; 0x2b5e <f_write+0x28>
    2b5e:	cd b7       	in	r28, 0x3d	; 61
    2b60:	de b7       	in	r29, 0x3e	; 62
    2b62:	9c 83       	std	Y+4, r25	; 0x04
    2b64:	8b 83       	std	Y+3, r24	; 0x03
    2b66:	e6 2e       	mov	r14, r22
    2b68:	07 2f       	mov	r16, r23
    2b6a:	2a 01       	movw	r4, r20
    2b6c:	3a 83       	std	Y+2, r19	; 0x02
    2b6e:	29 83       	std	Y+1, r18	; 0x01
	UINT wcnt, cc;
	const BYTE *wbuff = buff;
	BYTE csect;


	*bw = 0;	/* Clear write byte counter */
    2b70:	d9 01       	movw	r26, r18
    2b72:	1d 92       	st	X+, r1
    2b74:	1c 92       	st	X, r1

	res = validate(fp);						/* Check validity */
    2b76:	0e 94 12 0b 	call	0x1624	; 0x1624 <validate>
    2b7a:	78 2e       	mov	r7, r24
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
    2b7c:	88 23       	and	r24, r24
    2b7e:	09 f0       	breq	.+2      	; 0x2b82 <f_write+0x4c>
    2b80:	c3 c1       	rjmp	.+902    	; 0x2f08 <f_write+0x3d2>
	if (fp->flag & FA__ERROR)				/* Aborted file? */
    2b82:	eb 81       	ldd	r30, Y+3	; 0x03
    2b84:	fc 81       	ldd	r31, Y+4	; 0x04
    2b86:	84 81       	ldd	r24, Z+4	; 0x04
    2b88:	87 fd       	sbrc	r24, 7
    2b8a:	be c0       	rjmp	.+380    	; 0x2d08 <f_write+0x1d2>
		LEAVE_FF(fp->fs, FR_INT_ERR);
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
    2b8c:	81 ff       	sbrs	r24, 1
    2b8e:	ba c1       	rjmp	.+884    	; 0x2f04 <f_write+0x3ce>
		LEAVE_FF(fp->fs, FR_DENIED);
	if ((DWORD)(fp->fsize + btw) < fp->fsize) btw = 0;	/* File size cannot reach 4GB */
    2b90:	42 85       	ldd	r20, Z+10	; 0x0a
    2b92:	53 85       	ldd	r21, Z+11	; 0x0b
    2b94:	64 85       	ldd	r22, Z+12	; 0x0c
    2b96:	75 85       	ldd	r23, Z+13	; 0x0d
    2b98:	c2 01       	movw	r24, r4
    2b9a:	a0 e0       	ldi	r26, 0x00	; 0
    2b9c:	b0 e0       	ldi	r27, 0x00	; 0
    2b9e:	84 0f       	add	r24, r20
    2ba0:	95 1f       	adc	r25, r21
    2ba2:	a6 1f       	adc	r26, r22
    2ba4:	b7 1f       	adc	r27, r23
    2ba6:	84 17       	cp	r24, r20
    2ba8:	95 07       	cpc	r25, r21
    2baa:	a6 07       	cpc	r26, r22
    2bac:	b7 07       	cpc	r27, r23
    2bae:	10 f4       	brcc	.+4      	; 0x2bb4 <f_write+0x7e>
    2bb0:	44 24       	eor	r4, r4
    2bb2:	55 24       	eor	r5, r5
    2bb4:	2e 2c       	mov	r2, r14
    2bb6:	30 2e       	mov	r3, r16
		if (wcnt > btw) wcnt = btw;
#if _FS_TINY
		if (move_window(fp->fs, fp->dsect))	/* Move sector window */
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(&fp->fs->win[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->fs->wflag = 1;
    2bb8:	66 24       	eor	r6, r6
    2bba:	63 94       	inc	r6
    2bbc:	82 c1       	rjmp	.+772    	; 0x2ec2 <f_write+0x38c>
		LEAVE_FF(fp->fs, FR_DENIED);
	if ((DWORD)(fp->fsize + btw) < fp->fsize) btw = 0;	/* File size cannot reach 4GB */

	for ( ;  btw;							/* Repeat until all data written */
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {	/* On the sector boundary? */
    2bbe:	ab 81       	ldd	r26, Y+3	; 0x03
    2bc0:	bc 81       	ldd	r27, Y+4	; 0x04
    2bc2:	16 96       	adiw	r26, 0x06	; 6
    2bc4:	4d 91       	ld	r20, X+
    2bc6:	5d 91       	ld	r21, X+
    2bc8:	6d 91       	ld	r22, X+
    2bca:	7c 91       	ld	r23, X
    2bcc:	19 97       	sbiw	r26, 0x09	; 9
    2bce:	db 01       	movw	r26, r22
    2bd0:	ca 01       	movw	r24, r20
    2bd2:	91 70       	andi	r25, 0x01	; 1
    2bd4:	a0 70       	andi	r26, 0x00	; 0
    2bd6:	b0 70       	andi	r27, 0x00	; 0
    2bd8:	00 97       	sbiw	r24, 0x00	; 0
    2bda:	a1 05       	cpc	r26, r1
    2bdc:	b1 05       	cpc	r27, r1
    2bde:	09 f0       	breq	.+2      	; 0x2be2 <f_write+0xac>
    2be0:	15 c1       	rjmp	.+554    	; 0x2e0c <f_write+0x2d6>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
    2be2:	eb 81       	ldd	r30, Y+3	; 0x03
    2be4:	fc 81       	ldd	r31, Y+4	; 0x04
    2be6:	20 81       	ld	r18, Z
    2be8:	31 81       	ldd	r19, Z+1	; 0x01
    2bea:	db 01       	movw	r26, r22
    2bec:	ca 01       	movw	r24, r20
    2bee:	19 e0       	ldi	r17, 0x09	; 9
    2bf0:	b6 95       	lsr	r27
    2bf2:	a7 95       	ror	r26
    2bf4:	97 95       	ror	r25
    2bf6:	87 95       	ror	r24
    2bf8:	1a 95       	dec	r17
    2bfa:	d1 f7       	brne	.-12     	; 0x2bf0 <f_write+0xba>
    2bfc:	f9 01       	movw	r30, r18
    2bfe:	c2 80       	ldd	r12, Z+2	; 0x02
    2c00:	ca 94       	dec	r12
    2c02:	c8 22       	and	r12, r24
			if (!csect) {					/* On the cluster boundary? */
    2c04:	09 f0       	breq	.+2      	; 0x2c08 <f_write+0xd2>
    2c06:	47 c0       	rjmp	.+142    	; 0x2c96 <f_write+0x160>
				if (fp->fptr == 0) {		/* On the top of the file? */
    2c08:	41 15       	cp	r20, r1
    2c0a:	51 05       	cpc	r21, r1
    2c0c:	61 05       	cpc	r22, r1
    2c0e:	71 05       	cpc	r23, r1
    2c10:	c1 f4       	brne	.+48     	; 0x2c42 <f_write+0x10c>
					clst = fp->sclust;		/* Follow from the origin */
    2c12:	eb 81       	ldd	r30, Y+3	; 0x03
    2c14:	fc 81       	ldd	r31, Y+4	; 0x04
    2c16:	86 85       	ldd	r24, Z+14	; 0x0e
    2c18:	97 85       	ldd	r25, Z+15	; 0x0f
    2c1a:	a0 89       	ldd	r26, Z+16	; 0x10
    2c1c:	b1 89       	ldd	r27, Z+17	; 0x11
					if (clst == 0)			/* When no cluster is allocated, */
    2c1e:	00 97       	sbiw	r24, 0x00	; 0
    2c20:	a1 05       	cpc	r26, r1
    2c22:	b1 05       	cpc	r27, r1
    2c24:	f9 f4       	brne	.+62     	; 0x2c64 <f_write+0x12e>
						fp->sclust = clst = create_chain(fp->fs, 0);	/* Create a new cluster chain */
    2c26:	c9 01       	movw	r24, r18
    2c28:	40 e0       	ldi	r20, 0x00	; 0
    2c2a:	50 e0       	ldi	r21, 0x00	; 0
    2c2c:	ba 01       	movw	r22, r20
    2c2e:	41 d8       	rcall	.-3966   	; 0x1cb2 <create_chain>
    2c30:	dc 01       	movw	r26, r24
    2c32:	cb 01       	movw	r24, r22
    2c34:	eb 81       	ldd	r30, Y+3	; 0x03
    2c36:	fc 81       	ldd	r31, Y+4	; 0x04
    2c38:	86 87       	std	Z+14, r24	; 0x0e
    2c3a:	97 87       	std	Z+15, r25	; 0x0f
    2c3c:	a0 8b       	std	Z+16, r26	; 0x10
    2c3e:	b1 8b       	std	Z+17, r27	; 0x11
    2c40:	0c c0       	rjmp	.+24     	; 0x2c5a <f_write+0x124>
    2c42:	ab 81       	ldd	r26, Y+3	; 0x03
#if _USE_FASTSEEK
					if (fp->cltbl)
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
					else
#endif
						clst = create_chain(fp->fs, fp->clust);	/* Follow or stretch cluster chain on the FAT */
    2c44:	bc 81       	ldd	r27, Y+4	; 0x04
    2c46:	52 96       	adiw	r26, 0x12	; 18
    2c48:	4d 91       	ld	r20, X+
    2c4a:	5d 91       	ld	r21, X+
    2c4c:	6d 91       	ld	r22, X+
    2c4e:	7c 91       	ld	r23, X
    2c50:	55 97       	sbiw	r26, 0x15	; 21
    2c52:	c9 01       	movw	r24, r18
    2c54:	2e d8       	rcall	.-4004   	; 0x1cb2 <create_chain>
    2c56:	dc 01       	movw	r26, r24
    2c58:	cb 01       	movw	r24, r22
    2c5a:	00 97       	sbiw	r24, 0x00	; 0
    2c5c:	a1 05       	cpc	r26, r1
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
    2c5e:	b1 05       	cpc	r27, r1
    2c60:	09 f4       	brne	.+2      	; 0x2c64 <f_write+0x12e>
    2c62:	33 c1       	rjmp	.+614    	; 0x2eca <f_write+0x394>
    2c64:	81 30       	cpi	r24, 0x01	; 1
    2c66:	91 05       	cpc	r25, r1
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
    2c68:	a1 05       	cpc	r26, r1
    2c6a:	b1 05       	cpc	r27, r1
    2c6c:	31 f4       	brne	.+12     	; 0x2c7a <f_write+0x144>
    2c6e:	eb 81       	ldd	r30, Y+3	; 0x03
    2c70:	fc 81       	ldd	r31, Y+4	; 0x04
    2c72:	84 81       	ldd	r24, Z+4	; 0x04
    2c74:	80 68       	ori	r24, 0x80	; 128
    2c76:	84 83       	std	Z+4, r24	; 0x04
    2c78:	47 c0       	rjmp	.+142    	; 0x2d08 <f_write+0x1d2>
    2c7a:	8f 3f       	cpi	r24, 0xFF	; 255
    2c7c:	ff ef       	ldi	r31, 0xFF	; 255
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
    2c7e:	9f 07       	cpc	r25, r31
    2c80:	ff ef       	ldi	r31, 0xFF	; 255
    2c82:	af 07       	cpc	r26, r31
    2c84:	ff ef       	ldi	r31, 0xFF	; 255
    2c86:	bf 07       	cpc	r27, r31
    2c88:	11 f1       	breq	.+68     	; 0x2cce <f_write+0x198>
    2c8a:	eb 81       	ldd	r30, Y+3	; 0x03
    2c8c:	fc 81       	ldd	r31, Y+4	; 0x04
				fp->clust = clst;			/* Update current cluster */
    2c8e:	82 8b       	std	Z+18, r24	; 0x12
    2c90:	93 8b       	std	Z+19, r25	; 0x13
    2c92:	a4 8b       	std	Z+20, r26	; 0x14
    2c94:	b5 8b       	std	Z+21, r27	; 0x15
    2c96:	ab 81       	ldd	r26, Y+3	; 0x03
    2c98:	bc 81       	ldd	r27, Y+4	; 0x04
			}
#if _FS_TINY
			if (fp->fs->winsect == fp->dsect && move_window(fp->fs, 0))	/* Write-back sector cache */
    2c9a:	8d 91       	ld	r24, X+
    2c9c:	9c 91       	ld	r25, X
    2c9e:	11 97       	sbiw	r26, 0x01	; 1
    2ca0:	fc 01       	movw	r30, r24
    2ca2:	42 a5       	lds	r20, 0x62
    2ca4:	53 a5       	lds	r21, 0x63
    2ca6:	64 a5       	lds	r22, 0x64
    2ca8:	75 a5       	lds	r23, 0x65
    2caa:	56 96       	adiw	r26, 0x16	; 22
    2cac:	0d 91       	ld	r16, X+
    2cae:	1d 91       	ld	r17, X+
    2cb0:	2d 91       	ld	r18, X+
    2cb2:	3c 91       	ld	r19, X
    2cb4:	59 97       	sbiw	r26, 0x19	; 25
    2cb6:	40 17       	cp	r20, r16
    2cb8:	51 07       	cpc	r21, r17
    2cba:	62 07       	cpc	r22, r18
    2cbc:	73 07       	cpc	r23, r19
    2cbe:	51 f4       	brne	.+20     	; 0x2cd4 <f_write+0x19e>
    2cc0:	40 e0       	ldi	r20, 0x00	; 0
    2cc2:	50 e0       	ldi	r21, 0x00	; 0
    2cc4:	ba 01       	movw	r22, r20
    2cc6:	0e 94 2e 0b 	call	0x165c	; 0x165c <move_window>
    2cca:	88 23       	and	r24, r24
    2ccc:	19 f0       	breq	.+6      	; 0x2cd4 <f_write+0x19e>
    2cce:	ab 81       	ldd	r26, Y+3	; 0x03
    2cd0:	bc 81       	ldd	r27, Y+4	; 0x04
				ABORT(fp->fs, FR_DISK_ERR);
    2cd2:	88 c0       	rjmp	.+272    	; 0x2de4 <f_write+0x2ae>
    2cd4:	eb 81       	ldd	r30, Y+3	; 0x03
    2cd6:	fc 81       	ldd	r31, Y+4	; 0x04
				if (disk_write(fp->fs->drv, fp->buf, fp->dsect, 1) != RES_OK)
					ABORT(fp->fs, FR_DISK_ERR);
				fp->flag &= ~FA__DIRTY;
			}
#endif
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
    2cd8:	00 81       	ld	r16, Z
    2cda:	11 81       	ldd	r17, Z+1	; 0x01
    2cdc:	42 89       	ldd	r20, Z+18	; 0x12
    2cde:	53 89       	ldd	r21, Z+19	; 0x13
    2ce0:	64 89       	ldd	r22, Z+20	; 0x14
    2ce2:	75 89       	ldd	r23, Z+21	; 0x15
    2ce4:	c8 01       	movw	r24, r16
    2ce6:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <clust2sect>
    2cea:	dc 01       	movw	r26, r24
    2cec:	cb 01       	movw	r24, r22
    2cee:	00 97       	sbiw	r24, 0x00	; 0
    2cf0:	a1 05       	cpc	r26, r1
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
    2cf2:	b1 05       	cpc	r27, r1
    2cf4:	61 f4       	brne	.+24     	; 0x2d0e <f_write+0x1d8>
    2cf6:	ab 81       	ldd	r26, Y+3	; 0x03
    2cf8:	bc 81       	ldd	r27, Y+4	; 0x04
    2cfa:	14 96       	adiw	r26, 0x04	; 4
    2cfc:	8c 91       	ld	r24, X
    2cfe:	14 97       	sbiw	r26, 0x04	; 4
    2d00:	80 68       	ori	r24, 0x80	; 128
    2d02:	14 96       	adiw	r26, 0x04	; 4
    2d04:	8c 93       	st	X, r24
    2d06:	14 97       	sbiw	r26, 0x04	; 4
    2d08:	32 e0       	ldi	r19, 0x02	; 2
    2d0a:	73 2e       	mov	r7, r19
    2d0c:	fd c0       	rjmp	.+506    	; 0x2f08 <f_write+0x3d2>
    2d0e:	4c 01       	movw	r8, r24
    2d10:	5d 01       	movw	r10, r26
			sect += csect;
    2d12:	8c 0c       	add	r8, r12
    2d14:	91 1c       	adc	r9, r1
    2d16:	a1 1c       	adc	r10, r1
    2d18:	b1 1c       	adc	r11, r1
    2d1a:	72 01       	movw	r14, r4
    2d1c:	ef 2c       	mov	r14, r15
			cc = btw / SS(fp->fs);			/* When remaining bytes >= sector size, */
    2d1e:	ff 24       	eor	r15, r15
    2d20:	e6 94       	lsr	r14
    2d22:	e1 14       	cp	r14, r1
    2d24:	f1 04       	cpc	r15, r1
			if (cc) {						/* Write maximum contiguous sectors directly */
    2d26:	09 f4       	brne	.+2      	; 0x2d2a <f_write+0x1f4>
    2d28:	44 c0       	rjmp	.+136    	; 0x2db2 <f_write+0x27c>
    2d2a:	f8 01       	movw	r30, r16
    2d2c:	82 81       	ldd	r24, Z+2	; 0x02
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
    2d2e:	dd 24       	eor	r13, r13
    2d30:	97 01       	movw	r18, r14
    2d32:	2c 0d       	add	r18, r12
    2d34:	3d 1d       	adc	r19, r13
    2d36:	90 e0       	ldi	r25, 0x00	; 0
    2d38:	82 17       	cp	r24, r18
    2d3a:	93 07       	cpc	r25, r19
    2d3c:	18 f4       	brcc	.+6      	; 0x2d44 <f_write+0x20e>
    2d3e:	7c 01       	movw	r14, r24
    2d40:	ec 18       	sub	r14, r12
					cc = fp->fs->csize - csect;
    2d42:	fd 08       	sbc	r15, r13
    2d44:	d8 01       	movw	r26, r16
    2d46:	11 96       	adiw	r26, 0x01	; 1
				if (disk_write(fp->fs->drv, wbuff, sect, (BYTE)cc) != RES_OK)
    2d48:	8c 91       	ld	r24, X
    2d4a:	b1 01       	movw	r22, r2
    2d4c:	a5 01       	movw	r20, r10
    2d4e:	94 01       	movw	r18, r8
    2d50:	0e 2d       	mov	r16, r14
    2d52:	0e 94 6c 0a 	call	0x14d8	; 0x14d8 <disk_write>
    2d56:	88 23       	and	r24, r24
    2d58:	09 f0       	breq	.+2      	; 0x2d5c <f_write+0x226>
    2d5a:	6c c0       	rjmp	.+216    	; 0x2e34 <f_write+0x2fe>
    2d5c:	ab 81       	ldd	r26, Y+3	; 0x03
    2d5e:	bc 81       	ldd	r27, Y+4	; 0x04
					ABORT(fp->fs, FR_DISK_ERR);
#if _FS_TINY
				if (fp->fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
    2d60:	ed 91       	ld	r30, X+
    2d62:	fc 91       	ld	r31, X
    2d64:	42 a5       	lds	r20, 0x62
    2d66:	53 a5       	lds	r21, 0x63
    2d68:	64 a5       	lds	r22, 0x64
    2d6a:	75 a5       	lds	r23, 0x65
    2d6c:	48 19       	sub	r20, r8
    2d6e:	59 09       	sbc	r21, r9
    2d70:	6a 09       	sbc	r22, r10
    2d72:	7b 09       	sbc	r23, r11
    2d74:	c7 01       	movw	r24, r14
    2d76:	a0 e0       	ldi	r26, 0x00	; 0
    2d78:	b0 e0       	ldi	r27, 0x00	; 0
    2d7a:	48 17       	cp	r20, r24
    2d7c:	59 07       	cpc	r21, r25
    2d7e:	6a 07       	cpc	r22, r26
    2d80:	7b 07       	cpc	r23, r27
    2d82:	90 f4       	brcc	.+36     	; 0x2da8 <f_write+0x272>
    2d84:	ba 01       	movw	r22, r20
    2d86:	76 2f       	mov	r23, r22
					mem_cpy(fp->fs->win, wbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), SS(fp->fs));
    2d88:	66 27       	eor	r22, r22
    2d8a:	77 0f       	add	r23, r23
    2d8c:	62 0d       	add	r22, r2
    2d8e:	73 1d       	adc	r23, r3
    2d90:	cf 01       	movw	r24, r30
    2d92:	8e 96       	adiw	r24, 0x2e	; 46
    2d94:	40 e0       	ldi	r20, 0x00	; 0
    2d96:	52 e0       	ldi	r21, 0x02	; 2
    2d98:	0e 94 e5 0a 	call	0x15ca	; 0x15ca <mem_cpy>
    2d9c:	ab 81       	ldd	r26, Y+3	; 0x03
    2d9e:	bc 81       	ldd	r27, Y+4	; 0x04
					fp->fs->wflag = 0;
    2da0:	ed 91       	ld	r30, X+
    2da2:	fc 91       	ld	r31, X
    2da4:	11 97       	sbiw	r26, 0x01	; 1
    2da6:	14 82       	std	Z+4, r1	; 0x04
    2da8:	87 01       	movw	r16, r14
    2daa:	10 2f       	mov	r17, r16
				if (fp->dsect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fp->buf, wbuff + ((fp->dsect - sect) * SS(fp->fs)), SS(fp->fs));
					fp->flag &= ~FA__DIRTY;
				}
#endif
				wcnt = SS(fp->fs) * cc;		/* Number of bytes transferred */
    2dac:	00 27       	eor	r16, r16
    2dae:	11 0f       	add	r17, r17
    2db0:	69 c0       	rjmp	.+210    	; 0x2e84 <f_write+0x34e>
    2db2:	eb 81       	ldd	r30, Y+3	; 0x03
				continue;
    2db4:	fc 81       	ldd	r31, Y+4	; 0x04
			}
#if _FS_TINY
			if (fp->fptr >= fp->fsize) {	/* Avoid silly cache filling at growing edge */
    2db6:	86 81       	ldd	r24, Z+6	; 0x06
    2db8:	97 81       	ldd	r25, Z+7	; 0x07
    2dba:	a0 85       	ldd	r26, Z+8	; 0x08
    2dbc:	b1 85       	ldd	r27, Z+9	; 0x09
    2dbe:	42 85       	ldd	r20, Z+10	; 0x0a
    2dc0:	53 85       	ldd	r21, Z+11	; 0x0b
    2dc2:	64 85       	ldd	r22, Z+12	; 0x0c
    2dc4:	75 85       	ldd	r23, Z+13	; 0x0d
    2dc6:	84 17       	cp	r24, r20
    2dc8:	95 07       	cpc	r25, r21
    2dca:	a6 07       	cpc	r26, r22
    2dcc:	b7 07       	cpc	r27, r23
    2dce:	c0 f0       	brcs	.+48     	; 0x2e00 <f_write+0x2ca>
    2dd0:	c8 01       	movw	r24, r16
    2dd2:	40 e0       	ldi	r20, 0x00	; 0
				if (move_window(fp->fs, 0)) ABORT(fp->fs, FR_DISK_ERR);
    2dd4:	50 e0       	ldi	r21, 0x00	; 0
    2dd6:	ba 01       	movw	r22, r20
    2dd8:	0e 94 2e 0b 	call	0x165c	; 0x165c <move_window>
    2ddc:	ab 81       	ldd	r26, Y+3	; 0x03
    2dde:	bc 81       	ldd	r27, Y+4	; 0x04
    2de0:	88 23       	and	r24, r24
    2de2:	41 f0       	breq	.+16     	; 0x2df4 <f_write+0x2be>
    2de4:	14 96       	adiw	r26, 0x04	; 4
    2de6:	8c 91       	ld	r24, X
    2de8:	14 97       	sbiw	r26, 0x04	; 4
    2dea:	80 68       	ori	r24, 0x80	; 128
    2dec:	14 96       	adiw	r26, 0x04	; 4
    2dee:	8c 93       	st	X, r24
    2df0:	14 97       	sbiw	r26, 0x04	; 4
    2df2:	25 c0       	rjmp	.+74     	; 0x2e3e <f_write+0x308>
    2df4:	ed 91       	ld	r30, X+
    2df6:	fc 91       	ld	r31, X
				fp->fs->winsect = sect;
    2df8:	82 a6       	lds	r24, 0xb2
    2dfa:	93 a6       	lds	r25, 0xb3
    2dfc:	a4 a6       	lds	r26, 0xb4
    2dfe:	b5 a6       	lds	r27, 0xb5
    2e00:	eb 81       	ldd	r30, Y+3	; 0x03
    2e02:	fc 81       	ldd	r31, Y+4	; 0x04
				if (fp->fptr < fp->fsize &&
					disk_read(fp->fs->drv, fp->buf, sect, 1) != RES_OK)
						ABORT(fp->fs, FR_DISK_ERR);
			}
#endif
			fp->dsect = sect;
    2e04:	86 8a       	std	Z+22, r8	; 0x16
    2e06:	97 8a       	std	Z+23, r9	; 0x17
    2e08:	a0 8e       	std	Z+24, r10	; 0x18
    2e0a:	b1 8e       	std	Z+25, r11	; 0x19
    2e0c:	ab 81       	ldd	r26, Y+3	; 0x03
    2e0e:	bc 81       	ldd	r27, Y+4	; 0x04
		}
		wcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));/* Put partial sector into file I/O buffer */
    2e10:	16 96       	adiw	r26, 0x06	; 6
    2e12:	cd 90       	ld	r12, X+
    2e14:	dd 90       	ld	r13, X+
    2e16:	ed 90       	ld	r14, X+
    2e18:	fc 90       	ld	r15, X
    2e1a:	19 97       	sbiw	r26, 0x09	; 9
    2e1c:	56 96       	adiw	r26, 0x16	; 22
    2e1e:	4d 91       	ld	r20, X+
		if (wcnt > btw) wcnt = btw;
#if _FS_TINY
		if (move_window(fp->fs, fp->dsect))	/* Move sector window */
    2e20:	5d 91       	ld	r21, X+
    2e22:	6d 91       	ld	r22, X+
    2e24:	7c 91       	ld	r23, X
    2e26:	59 97       	sbiw	r26, 0x19	; 25
    2e28:	8d 91       	ld	r24, X+
    2e2a:	9c 91       	ld	r25, X
    2e2c:	0e 94 2e 0b 	call	0x165c	; 0x165c <move_window>
    2e30:	88 23       	and	r24, r24
    2e32:	41 f0       	breq	.+16     	; 0x2e44 <f_write+0x30e>
    2e34:	eb 81       	ldd	r30, Y+3	; 0x03
    2e36:	fc 81       	ldd	r31, Y+4	; 0x04
			ABORT(fp->fs, FR_DISK_ERR);
    2e38:	84 81       	ldd	r24, Z+4	; 0x04
    2e3a:	80 68       	ori	r24, 0x80	; 128
    2e3c:	84 83       	std	Z+4, r24	; 0x04
    2e3e:	77 24       	eor	r7, r7
    2e40:	73 94       	inc	r7
    2e42:	62 c0       	rjmp	.+196    	; 0x2f08 <f_write+0x3d2>
    2e44:	c6 01       	movw	r24, r12
    2e46:	91 70       	andi	r25, 0x01	; 1
						ABORT(fp->fs, FR_DISK_ERR);
			}
#endif
			fp->dsect = sect;
		}
		wcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));/* Put partial sector into file I/O buffer */
    2e48:	20 e0       	ldi	r18, 0x00	; 0
    2e4a:	32 e0       	ldi	r19, 0x02	; 2
    2e4c:	28 1b       	sub	r18, r24
    2e4e:	39 0b       	sbc	r19, r25
    2e50:	82 01       	movw	r16, r4
    2e52:	24 15       	cp	r18, r4
    2e54:	35 05       	cpc	r19, r5
    2e56:	08 f4       	brcc	.+2      	; 0x2e5a <f_write+0x324>
    2e58:	89 01       	movw	r16, r18
    2e5a:	ab 81       	ldd	r26, Y+3	; 0x03
    2e5c:	bc 81       	ldd	r27, Y+4	; 0x04
		if (wcnt > btw) wcnt = btw;
#if _FS_TINY
		if (move_window(fp->fs, fp->dsect))	/* Move sector window */
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(&fp->fs->win[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
    2e5e:	16 96       	adiw	r26, 0x06	; 6
    2e60:	8d 91       	ld	r24, X+
    2e62:	9c 91       	ld	r25, X
    2e64:	17 97       	sbiw	r26, 0x07	; 7
    2e66:	91 70       	andi	r25, 0x01	; 1
    2e68:	8e 96       	adiw	r24, 0x2e	; 46
    2e6a:	2d 91       	ld	r18, X+
    2e6c:	3c 91       	ld	r19, X
    2e6e:	82 0f       	add	r24, r18
    2e70:	93 1f       	adc	r25, r19
    2e72:	b1 01       	movw	r22, r2
    2e74:	a8 01       	movw	r20, r16
    2e76:	0e 94 e5 0a 	call	0x15ca	; 0x15ca <mem_cpy>
    2e7a:	ab 81       	ldd	r26, Y+3	; 0x03
    2e7c:	bc 81       	ldd	r27, Y+4	; 0x04
		fp->fs->wflag = 1;
    2e7e:	ed 91       	ld	r30, X+
    2e80:	fc 91       	ld	r31, X
    2e82:	64 82       	std	Z+4, r6	; 0x04
    2e84:	20 0e       	add	r2, r16
    2e86:	31 1e       	adc	r3, r17
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
		LEAVE_FF(fp->fs, FR_DENIED);
	if ((DWORD)(fp->fsize + btw) < fp->fsize) btw = 0;	/* File size cannot reach 4GB */

	for ( ;  btw;							/* Repeat until all data written */
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
    2e88:	a8 01       	movw	r20, r16
    2e8a:	60 e0       	ldi	r22, 0x00	; 0
    2e8c:	70 e0       	ldi	r23, 0x00	; 0
    2e8e:	eb 81       	ldd	r30, Y+3	; 0x03
    2e90:	fc 81       	ldd	r31, Y+4	; 0x04
    2e92:	86 81       	ldd	r24, Z+6	; 0x06
    2e94:	97 81       	ldd	r25, Z+7	; 0x07
    2e96:	a0 85       	ldd	r26, Z+8	; 0x08
    2e98:	b1 85       	ldd	r27, Z+9	; 0x09
    2e9a:	84 0f       	add	r24, r20
    2e9c:	95 1f       	adc	r25, r21
    2e9e:	a6 1f       	adc	r26, r22
    2ea0:	b7 1f       	adc	r27, r23
    2ea2:	86 83       	std	Z+6, r24	; 0x06
    2ea4:	97 83       	std	Z+7, r25	; 0x07
    2ea6:	a0 87       	std	Z+8, r26	; 0x08
    2ea8:	b1 87       	std	Z+9, r27	; 0x09
    2eaa:	a9 81       	ldd	r26, Y+1	; 0x01
    2eac:	ba 81       	ldd	r27, Y+2	; 0x02
    2eae:	8d 91       	ld	r24, X+
    2eb0:	9c 91       	ld	r25, X
    2eb2:	11 97       	sbiw	r26, 0x01	; 1
    2eb4:	80 0f       	add	r24, r16
    2eb6:	91 1f       	adc	r25, r17
    2eb8:	11 96       	adiw	r26, 0x01	; 1
    2eba:	9c 93       	st	X, r25
    2ebc:	8e 93       	st	-X, r24
    2ebe:	40 1a       	sub	r4, r16
    2ec0:	51 0a       	sbc	r5, r17
    2ec2:	41 14       	cp	r4, r1
    2ec4:	51 04       	cpc	r5, r1
		LEAVE_FF(fp->fs, FR_INT_ERR);
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
		LEAVE_FF(fp->fs, FR_DENIED);
	if ((DWORD)(fp->fsize + btw) < fp->fsize) btw = 0;	/* File size cannot reach 4GB */

	for ( ;  btw;							/* Repeat until all data written */
    2ec6:	09 f0       	breq	.+2      	; 0x2eca <f_write+0x394>
    2ec8:	7a ce       	rjmp	.-780    	; 0x2bbe <f_write+0x88>
    2eca:	eb 81       	ldd	r30, Y+3	; 0x03
    2ecc:	fc 81       	ldd	r31, Y+4	; 0x04
		mem_cpy(&fp->buf[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->flag |= FA__DIRTY;
#endif
	}

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
    2ece:	86 81       	ldd	r24, Z+6	; 0x06
    2ed0:	97 81       	ldd	r25, Z+7	; 0x07
    2ed2:	a0 85       	ldd	r26, Z+8	; 0x08
    2ed4:	b1 85       	ldd	r27, Z+9	; 0x09
    2ed6:	42 85       	ldd	r20, Z+10	; 0x0a
    2ed8:	53 85       	ldd	r21, Z+11	; 0x0b
    2eda:	64 85       	ldd	r22, Z+12	; 0x0c
    2edc:	75 85       	ldd	r23, Z+13	; 0x0d
    2ede:	48 17       	cp	r20, r24
    2ee0:	59 07       	cpc	r21, r25
    2ee2:	6a 07       	cpc	r22, r26
    2ee4:	7b 07       	cpc	r23, r27
    2ee6:	20 f4       	brcc	.+8      	; 0x2ef0 <f_write+0x3ba>
    2ee8:	82 87       	std	Z+10, r24	; 0x0a
    2eea:	93 87       	std	Z+11, r25	; 0x0b
    2eec:	a4 87       	std	Z+12, r26	; 0x0c
    2eee:	b5 87       	std	Z+13, r27	; 0x0d
    2ef0:	ab 81       	ldd	r26, Y+3	; 0x03
    2ef2:	bc 81       	ldd	r27, Y+4	; 0x04
	fp->flag |= FA__WRITTEN;						/* Set file change flag */
    2ef4:	14 96       	adiw	r26, 0x04	; 4
    2ef6:	8c 91       	ld	r24, X
    2ef8:	14 97       	sbiw	r26, 0x04	; 4
    2efa:	80 62       	ori	r24, 0x20	; 32
    2efc:	14 96       	adiw	r26, 0x04	; 4
    2efe:	8c 93       	st	X, r24
    2f00:	14 97       	sbiw	r26, 0x04	; 4
    2f02:	02 c0       	rjmp	.+4      	; 0x2f08 <f_write+0x3d2>
    2f04:	b7 e0       	ldi	r27, 0x07	; 7

	LEAVE_FF(fp->fs, FR_OK);
    2f06:	7b 2e       	mov	r7, r27
	res = validate(fp);						/* Check validity */
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
	if (fp->flag & FA__ERROR)				/* Aborted file? */
		LEAVE_FF(fp->fs, FR_INT_ERR);
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
		LEAVE_FF(fp->fs, FR_DENIED);
    2f08:	87 2d       	mov	r24, r7
    2f0a:	0f 90       	pop	r0

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
	fp->flag |= FA__WRITTEN;						/* Set file change flag */

	LEAVE_FF(fp->fs, FR_OK);
}
    2f0c:	0f 90       	pop	r0
    2f0e:	0f 90       	pop	r0
    2f10:	0f 90       	pop	r0
    2f12:	df 91       	pop	r29
    2f14:	cf 91       	pop	r28
    2f16:	1f 91       	pop	r17
    2f18:	0f 91       	pop	r16
    2f1a:	ff 90       	pop	r15
    2f1c:	ef 90       	pop	r14
    2f1e:	df 90       	pop	r13
    2f20:	cf 90       	pop	r12
    2f22:	bf 90       	pop	r11
    2f24:	af 90       	pop	r10
    2f26:	9f 90       	pop	r9
    2f28:	8f 90       	pop	r8
    2f2a:	7f 90       	pop	r7
    2f2c:	6f 90       	pop	r6
    2f2e:	5f 90       	pop	r5
    2f30:	4f 90       	pop	r4
    2f32:	3f 90       	pop	r3
    2f34:	2f 90       	pop	r2
    2f36:	08 95       	ret

00002f38 <f_sync>:
    2f38:	0f 93       	push	r16
    2f3a:	1f 93       	push	r17
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL *fp		/* Pointer to the file object */
)
{
    2f3c:	cf 93       	push	r28
    2f3e:	df 93       	push	r29
    2f40:	ec 01       	movw	r28, r24
	FRESULT res;
	DWORD tim;
	BYTE *dir;


	res = validate(fp);					/* Check validity of the object */
    2f42:	0e 94 12 0b 	call	0x1624	; 0x1624 <validate>
    2f46:	98 2f       	mov	r25, r24
	if (res == FR_OK) {
    2f48:	88 23       	and	r24, r24
    2f4a:	09 f0       	breq	.+2      	; 0x2f4e <f_sync+0x16>
    2f4c:	9d c0       	rjmp	.+314    	; 0x3088 <f_sync+0x150>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
    2f4e:	8c 81       	ldd	r24, Y+4	; 0x04
    2f50:	85 ff       	sbrs	r24, 5
    2f52:	9a c0       	rjmp	.+308    	; 0x3088 <f_sync+0x150>
					LEAVE_FF(fp->fs, FR_DISK_ERR);
				fp->flag &= ~FA__DIRTY;
			}
#endif
			/* Update the directory entry */
			res = move_window(fp->fs, fp->dir_sect);
    2f54:	4a 8d       	ldd	r20, Y+26	; 0x1a
    2f56:	5b 8d       	ldd	r21, Y+27	; 0x1b
    2f58:	6c 8d       	ldd	r22, Y+28	; 0x1c
    2f5a:	7d 8d       	ldd	r23, Y+29	; 0x1d
    2f5c:	88 81       	ld	r24, Y
    2f5e:	99 81       	ldd	r25, Y+1	; 0x01
    2f60:	0e 94 2e 0b 	call	0x165c	; 0x165c <move_window>
    2f64:	98 2f       	mov	r25, r24
			if (res == FR_OK) {
    2f66:	88 23       	and	r24, r24
    2f68:	09 f0       	breq	.+2      	; 0x2f6c <f_sync+0x34>
    2f6a:	8e c0       	rjmp	.+284    	; 0x3088 <f_sync+0x150>
				dir = fp->dir_ptr;
    2f6c:	0e 8d       	ldd	r16, Y+30	; 0x1e
    2f6e:	1f 8d       	ldd	r17, Y+31	; 0x1f
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
    2f70:	f8 01       	movw	r30, r16
    2f72:	83 85       	ldd	r24, Z+11	; 0x0b
    2f74:	80 62       	ori	r24, 0x20	; 32
    2f76:	83 87       	std	Z+11, r24	; 0x0b
				ST_DWORD(dir+DIR_FileSize, fp->fsize);		/* Update file size */
    2f78:	8a 85       	ldd	r24, Y+10	; 0x0a
    2f7a:	9b 85       	ldd	r25, Y+11	; 0x0b
    2f7c:	ac 85       	ldd	r26, Y+12	; 0x0c
    2f7e:	bd 85       	ldd	r27, Y+13	; 0x0d
    2f80:	84 8f       	std	Z+28, r24	; 0x1c
    2f82:	95 8f       	std	Z+29, r25	; 0x1d
    2f84:	a6 8f       	std	Z+30, r26	; 0x1e
    2f86:	b7 8f       	std	Z+31, r27	; 0x1f
				st_clust(dir, fp->sclust);					/* Update start cluster */
    2f88:	4e 85       	ldd	r20, Y+14	; 0x0e
    2f8a:	5f 85       	ldd	r21, Y+15	; 0x0f
    2f8c:	68 89       	ldd	r22, Y+16	; 0x10
    2f8e:	79 89       	ldd	r23, Y+17	; 0x11
    2f90:	c8 01       	movw	r24, r16
    2f92:	0e 94 0c 0b 	call	0x1618	; 0x1618 <st_clust>
				tim = get_fattime();						/* Update updated time */
    2f96:	0e 94 7d 0a 	call	0x14fa	; 0x14fa <get_fattime>
    2f9a:	dc 01       	movw	r26, r24
    2f9c:	cb 01       	movw	r24, r22
				ST_DWORD(dir+DIR_WrtTime, tim);
    2f9e:	f8 01       	movw	r30, r16
    2fa0:	86 8b       	std	Z+22, r24	; 0x16
    2fa2:	97 8b       	std	Z+23, r25	; 0x17
    2fa4:	a0 8f       	std	Z+24, r26	; 0x18
    2fa6:	b1 8f       	std	Z+25, r27	; 0x19
				ST_WORD(dir+DIR_LstAccDate, 0);
    2fa8:	13 8a       	std	Z+19, r1	; 0x13
    2faa:	12 8a       	std	Z+18, r1	; 0x12
				fp->flag &= ~FA__WRITTEN;
    2fac:	8c 81       	ldd	r24, Y+4	; 0x04
    2fae:	8f 7d       	andi	r24, 0xDF	; 223
    2fb0:	8c 83       	std	Y+4, r24	; 0x04
				fp->fs->wflag = 1;
    2fb2:	e8 81       	ld	r30, Y
    2fb4:	f9 81       	ldd	r31, Y+1	; 0x01
    2fb6:	81 e0       	ldi	r24, 0x01	; 1
    2fb8:	84 83       	std	Z+4, r24	; 0x04
				res = sync(fp->fs);
    2fba:	09 90       	ld	r0, Y+
    2fbc:	d8 81       	ld	r29, Y
    2fbe:	c0 2d       	mov	r28, r0
)
{
	FRESULT res;


	res = move_window(fs, 0);
    2fc0:	ce 01       	movw	r24, r28
    2fc2:	40 e0       	ldi	r20, 0x00	; 0
    2fc4:	50 e0       	ldi	r21, 0x00	; 0
    2fc6:	ba 01       	movw	r22, r20
    2fc8:	0e 94 2e 0b 	call	0x165c	; 0x165c <move_window>
    2fcc:	98 2f       	mov	r25, r24
	if (res == FR_OK) {
    2fce:	88 23       	and	r24, r24
    2fd0:	09 f0       	breq	.+2      	; 0x2fd4 <f_sync+0x9c>
    2fd2:	5a c0       	rjmp	.+180    	; 0x3088 <f_sync+0x150>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag) {
    2fd4:	88 81       	ld	r24, Y
    2fd6:	83 30       	cpi	r24, 0x03	; 3
    2fd8:	09 f0       	breq	.+2      	; 0x2fdc <f_sync+0xa4>
    2fda:	4c c0       	rjmp	.+152    	; 0x3074 <f_sync+0x13c>
    2fdc:	8d 81       	ldd	r24, Y+5	; 0x05
    2fde:	88 23       	and	r24, r24
    2fe0:	09 f4       	brne	.+2      	; 0x2fe4 <f_sync+0xac>
    2fe2:	48 c0       	rjmp	.+144    	; 0x3074 <f_sync+0x13c>
			fs->winsect = 0;
    2fe4:	1a a6       	lds	r17, 0xba
    2fe6:	1b a6       	lds	r17, 0xbb
    2fe8:	1c a6       	lds	r17, 0xbc
    2fea:	1d a6       	lds	r17, 0xbd
			/* Create FSInfo structure */
			mem_set(fs->win, 0, 512);
    2fec:	8e 01       	movw	r16, r28
    2fee:	02 5d       	subi	r16, 0xD2	; 210
    2ff0:	1f 4f       	sbci	r17, 0xFF	; 255
    2ff2:	c8 01       	movw	r24, r16
    2ff4:	60 e0       	ldi	r22, 0x00	; 0
    2ff6:	70 e0       	ldi	r23, 0x00	; 0
    2ff8:	40 e0       	ldi	r20, 0x00	; 0
    2ffa:	52 e0       	ldi	r21, 0x02	; 2
    2ffc:	0e 94 03 0b 	call	0x1606	; 0x1606 <mem_set>
			ST_WORD(fs->win+BS_55AA, 0xAA55);
    3000:	fe 01       	movw	r30, r28
    3002:	e4 5d       	subi	r30, 0xD4	; 212
    3004:	fd 4f       	sbci	r31, 0xFD	; 253
    3006:	85 e5       	ldi	r24, 0x55	; 85
    3008:	9a ea       	ldi	r25, 0xAA	; 170
    300a:	91 83       	std	Z+1, r25	; 0x01
    300c:	80 83       	st	Z, r24
			ST_DWORD(fs->win+FSI_LeadSig, 0x41615252);
    300e:	82 e5       	ldi	r24, 0x52	; 82
    3010:	92 e5       	ldi	r25, 0x52	; 82
    3012:	a1 e6       	ldi	r26, 0x61	; 97
    3014:	b1 e4       	ldi	r27, 0x41	; 65
    3016:	8e a7       	lds	r24, 0x7e
    3018:	9f a7       	lds	r25, 0x7f
    301a:	a8 ab       	sts	0x58, r26
    301c:	b9 ab       	sts	0x59, r27
			ST_DWORD(fs->win+FSI_StrucSig, 0x61417272);
    301e:	fe 01       	movw	r30, r28
    3020:	ee 5e       	subi	r30, 0xEE	; 238
    3022:	fd 4f       	sbci	r31, 0xFD	; 253
    3024:	82 e7       	ldi	r24, 0x72	; 114
    3026:	92 e7       	ldi	r25, 0x72	; 114
    3028:	a1 e4       	ldi	r26, 0x41	; 65
    302a:	b1 e6       	ldi	r27, 0x61	; 97
    302c:	80 83       	st	Z, r24
    302e:	91 83       	std	Z+1, r25	; 0x01
    3030:	a2 83       	std	Z+2, r26	; 0x02
    3032:	b3 83       	std	Z+3, r27	; 0x03
			ST_DWORD(fs->win+FSI_Free_Count, fs->free_clust);
    3034:	fe 01       	movw	r30, r28
    3036:	ea 5e       	subi	r30, 0xEA	; 234
    3038:	fd 4f       	sbci	r31, 0xFD	; 253
    303a:	8e 85       	ldd	r24, Y+14	; 0x0e
    303c:	9f 85       	ldd	r25, Y+15	; 0x0f
    303e:	a8 89       	ldd	r26, Y+16	; 0x10
    3040:	b9 89       	ldd	r27, Y+17	; 0x11
    3042:	80 83       	st	Z, r24
    3044:	91 83       	std	Z+1, r25	; 0x01
    3046:	a2 83       	std	Z+2, r26	; 0x02
    3048:	b3 83       	std	Z+3, r27	; 0x03
			ST_DWORD(fs->win+FSI_Nxt_Free, fs->last_clust);
    304a:	fe 01       	movw	r30, r28
    304c:	e6 5e       	subi	r30, 0xE6	; 230
    304e:	fd 4f       	sbci	r31, 0xFD	; 253
    3050:	8a 85       	ldd	r24, Y+10	; 0x0a
    3052:	9b 85       	ldd	r25, Y+11	; 0x0b
    3054:	ac 85       	ldd	r26, Y+12	; 0x0c
    3056:	bd 85       	ldd	r27, Y+13	; 0x0d
    3058:	80 83       	st	Z, r24
    305a:	91 83       	std	Z+1, r25	; 0x01
    305c:	a2 83       	std	Z+2, r26	; 0x02
    305e:	b3 83       	std	Z+3, r27	; 0x03
			/* Write it into the FSInfo sector */
			disk_write(fs->drv, fs->win, fs->fsi_sector, 1);
    3060:	2a 89       	ldd	r18, Y+18	; 0x12
    3062:	3b 89       	ldd	r19, Y+19	; 0x13
    3064:	4c 89       	ldd	r20, Y+20	; 0x14
    3066:	5d 89       	ldd	r21, Y+21	; 0x15
    3068:	89 81       	ldd	r24, Y+1	; 0x01
    306a:	b8 01       	movw	r22, r16
    306c:	01 e0       	ldi	r16, 0x01	; 1
    306e:	0e 94 6c 0a 	call	0x14d8	; 0x14d8 <disk_write>
			fs->fsi_flag = 0;
    3072:	1d 82       	std	Y+5, r1	; 0x05
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK)
    3074:	89 81       	ldd	r24, Y+1	; 0x01
    3076:	60 e0       	ldi	r22, 0x00	; 0
    3078:	40 e0       	ldi	r20, 0x00	; 0
    307a:	50 e0       	ldi	r21, 0x00	; 0
    307c:	0e 94 77 0a 	call	0x14ee	; 0x14ee <disk_ioctl>
    3080:	91 e0       	ldi	r25, 0x01	; 1
    3082:	88 23       	and	r24, r24
    3084:	09 f4       	brne	.+2      	; 0x3088 <f_sync+0x150>
    3086:	90 e0       	ldi	r25, 0x00	; 0
			}
		}
	}

	LEAVE_FF(fp->fs, res);
}
    3088:	89 2f       	mov	r24, r25
    308a:	df 91       	pop	r29
    308c:	cf 91       	pop	r28
    308e:	1f 91       	pop	r17
    3090:	0f 91       	pop	r16
    3092:	08 95       	ret

00003094 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL *fp		/* Pointer to the file object to be closed */
)
{
    3094:	cf 93       	push	r28
    3096:	df 93       	push	r29
    3098:	ec 01       	movw	r28, r24
#endif
		if (res == FR_OK) fp->fs = 0;	/* Discard file object */
		LEAVE_FF(fs, res);
	}
#else
	res = f_sync(fp);		/* Flush cached data */
    309a:	4e df       	rcall	.-356    	; 0x2f38 <f_sync>
    309c:	88 23       	and	r24, r24
#else
		res = dec_lock(fp->lockid);
#endif
	}
#endif
	if (res == FR_OK) fp->fs = 0;	/* Discard file object */
    309e:	11 f4       	brne	.+4      	; 0x30a4 <f_close+0x10>
    30a0:	19 82       	std	Y+1, r1	; 0x01
    30a2:	18 82       	st	Y, r1
    30a4:	df 91       	pop	r29
	return res;
#endif
}
    30a6:	cf 91       	pop	r28
    30a8:	08 95       	ret

000030aa <f_lseek>:
    30aa:	2f 92       	push	r2

FRESULT f_lseek (
	FIL *fp,		/* Pointer to the file object */
	DWORD ofs		/* File pointer from top of file */
)
{
    30ac:	3f 92       	push	r3
    30ae:	4f 92       	push	r4
    30b0:	5f 92       	push	r5
    30b2:	7f 92       	push	r7
    30b4:	8f 92       	push	r8
    30b6:	9f 92       	push	r9
    30b8:	af 92       	push	r10
    30ba:	bf 92       	push	r11
    30bc:	cf 92       	push	r12
    30be:	df 92       	push	r13
    30c0:	ef 92       	push	r14
    30c2:	ff 92       	push	r15
    30c4:	0f 93       	push	r16
    30c6:	1f 93       	push	r17
    30c8:	cf 93       	push	r28
    30ca:	df 93       	push	r29
    30cc:	00 d0       	rcall	.+0      	; 0x30ce <f_lseek+0x24>
    30ce:	00 d0       	rcall	.+0      	; 0x30d0 <f_lseek+0x26>
    30d0:	00 d0       	rcall	.+0      	; 0x30d2 <f_lseek+0x28>
    30d2:	cd b7       	in	r28, 0x3d	; 61
    30d4:	de b7       	in	r29, 0x3e	; 62
    30d6:	9e 83       	std	Y+6, r25	; 0x06
    30d8:	8d 83       	std	Y+5, r24	; 0x05
    30da:	6a 01       	movw	r12, r20
    30dc:	7b 01       	movw	r14, r22
	FRESULT res;


	res = validate(fp);					/* Check validity of the object */
    30de:	0e 94 12 0b 	call	0x1624	; 0x1624 <validate>
    30e2:	78 2e       	mov	r7, r24
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
    30e4:	88 23       	and	r24, r24
    30e6:	09 f0       	breq	.+2      	; 0x30ea <f_lseek+0x40>
    30e8:	8c c1       	rjmp	.+792    	; 0x3402 <f_lseek+0x358>
	if (fp->flag & FA__ERROR)			/* Check abort flag */
    30ea:	ad 81       	ldd	r26, Y+5	; 0x05
    30ec:	be 81       	ldd	r27, Y+6	; 0x06
    30ee:	14 96       	adiw	r26, 0x04	; 4
    30f0:	2c 91       	ld	r18, X
    30f2:	14 97       	sbiw	r26, 0x04	; 4
    30f4:	27 fd       	sbrc	r18, 7
    30f6:	83 c1       	rjmp	.+774    	; 0x33fe <f_lseek+0x354>

	/* Normal Seek */
	{
		DWORD clst, bcs, nsect, ifptr;

		if (ofs > fp->fsize					/* In read-only mode, clip offset with the file size */
    30f8:	1a 96       	adiw	r26, 0x0a	; 10
    30fa:	8d 91       	ld	r24, X+
    30fc:	9d 91       	ld	r25, X+
    30fe:	0d 90       	ld	r0, X+
    3100:	bc 91       	ld	r27, X
    3102:	a0 2d       	mov	r26, r0
    3104:	8c 15       	cp	r24, r12
    3106:	9d 05       	cpc	r25, r13
    3108:	ae 05       	cpc	r26, r14
    310a:	bf 05       	cpc	r27, r15
    310c:	20 f4       	brcc	.+8      	; 0x3116 <f_lseek+0x6c>
#if !_FS_READONLY
			 && !(fp->flag & FA_WRITE)
    310e:	21 fd       	sbrc	r18, 1
    3110:	02 c0       	rjmp	.+4      	; 0x3116 <f_lseek+0x6c>
    3112:	6c 01       	movw	r12, r24
    3114:	7d 01       	movw	r14, r26
#endif
			) ofs = fp->fsize;

		ifptr = fp->fptr;
    3116:	ed 81       	ldd	r30, Y+5	; 0x05
    3118:	fe 81       	ldd	r31, Y+6	; 0x06
    311a:	86 81       	ldd	r24, Z+6	; 0x06
    311c:	97 81       	ldd	r25, Z+7	; 0x07
    311e:	a0 85       	ldd	r26, Z+8	; 0x08
    3120:	b1 85       	ldd	r27, Z+9	; 0x09
		fp->fptr = nsect = 0;
    3122:	16 82       	std	Z+6, r1	; 0x06
    3124:	17 82       	std	Z+7, r1	; 0x07
    3126:	10 86       	std	Z+8, r1	; 0x08
    3128:	11 86       	std	Z+9, r1	; 0x09
		if (ofs) {
    312a:	c1 14       	cp	r12, r1
    312c:	d1 04       	cpc	r13, r1
    312e:	e1 04       	cpc	r14, r1
    3130:	f1 04       	cpc	r15, r1
    3132:	09 f4       	brne	.+2      	; 0x3136 <f_lseek+0x8c>
    3134:	31 c1       	rjmp	.+610    	; 0x3398 <f_lseek+0x2ee>
			bcs = (DWORD)fp->fs->csize * SS(fp->fs);	/* Cluster size (byte) */
    3136:	00 81       	ld	r16, Z
    3138:	11 81       	ldd	r17, Z+1	; 0x01
    313a:	f8 01       	movw	r30, r16
    313c:	82 80       	ldd	r8, Z+2	; 0x02
    313e:	99 24       	eor	r9, r9
    3140:	aa 24       	eor	r10, r10
    3142:	bb 24       	eor	r11, r11
    3144:	39 e0       	ldi	r19, 0x09	; 9
    3146:	88 0c       	add	r8, r8
    3148:	99 1c       	adc	r9, r9
    314a:	aa 1c       	adc	r10, r10
    314c:	bb 1c       	adc	r11, r11
    314e:	3a 95       	dec	r19
    3150:	d1 f7       	brne	.-12     	; 0x3146 <f_lseek+0x9c>
			if (ifptr > 0 &&
    3152:	00 97       	sbiw	r24, 0x00	; 0
    3154:	a1 05       	cpc	r26, r1
    3156:	b1 05       	cpc	r27, r1
    3158:	f1 f1       	breq	.+124    	; 0x31d6 <f_lseek+0x12c>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
    315a:	1c 01       	movw	r2, r24
    315c:	2d 01       	movw	r4, r26
    315e:	08 94       	sec
    3160:	21 08       	sbc	r2, r1
    3162:	31 08       	sbc	r3, r1
    3164:	41 08       	sbc	r4, r1
    3166:	51 08       	sbc	r5, r1
    3168:	c7 01       	movw	r24, r14
    316a:	b6 01       	movw	r22, r12
    316c:	61 50       	subi	r22, 0x01	; 1
    316e:	70 40       	sbci	r23, 0x00	; 0
    3170:	80 40       	sbci	r24, 0x00	; 0
    3172:	90 40       	sbci	r25, 0x00	; 0
    3174:	a5 01       	movw	r20, r10
    3176:	94 01       	movw	r18, r8
    3178:	0e 94 ee 24 	call	0x49dc	; 0x49dc <__udivmodsi4>
    317c:	29 83       	std	Y+1, r18	; 0x01
    317e:	3a 83       	std	Y+2, r19	; 0x02
    3180:	4b 83       	std	Y+3, r20	; 0x03
    3182:	5c 83       	std	Y+4, r21	; 0x04
    3184:	c2 01       	movw	r24, r4
    3186:	b1 01       	movw	r22, r2
    3188:	a5 01       	movw	r20, r10
    318a:	94 01       	movw	r18, r8
    318c:	0e 94 ee 24 	call	0x49dc	; 0x49dc <__udivmodsi4>

		ifptr = fp->fptr;
		fp->fptr = nsect = 0;
		if (ofs) {
			bcs = (DWORD)fp->fs->csize * SS(fp->fs);	/* Cluster size (byte) */
			if (ifptr > 0 &&
    3190:	89 81       	ldd	r24, Y+1	; 0x01
    3192:	9a 81       	ldd	r25, Y+2	; 0x02
    3194:	ab 81       	ldd	r26, Y+3	; 0x03
    3196:	bc 81       	ldd	r27, Y+4	; 0x04
    3198:	82 17       	cp	r24, r18
    319a:	93 07       	cpc	r25, r19
    319c:	a4 07       	cpc	r26, r20
    319e:	b5 07       	cpc	r27, r21
    31a0:	d0 f0       	brcs	.+52     	; 0x31d6 <f_lseek+0x12c>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
				fp->fptr = (ifptr - 1) & ~(bcs - 1);	/* start from the current cluster */
    31a2:	88 27       	eor	r24, r24
    31a4:	99 27       	eor	r25, r25
    31a6:	dc 01       	movw	r26, r24
    31a8:	88 19       	sub	r24, r8
    31aa:	99 09       	sbc	r25, r9
    31ac:	aa 09       	sbc	r26, r10
    31ae:	bb 09       	sbc	r27, r11
    31b0:	82 21       	and	r24, r2
    31b2:	93 21       	and	r25, r3
    31b4:	a4 21       	and	r26, r4
    31b6:	b5 21       	and	r27, r5
    31b8:	ed 81       	ldd	r30, Y+5	; 0x05
    31ba:	fe 81       	ldd	r31, Y+6	; 0x06
    31bc:	86 83       	std	Z+6, r24	; 0x06
    31be:	97 83       	std	Z+7, r25	; 0x07
    31c0:	a0 87       	std	Z+8, r26	; 0x08
    31c2:	b1 87       	std	Z+9, r27	; 0x09
				ofs -= fp->fptr;
    31c4:	c8 1a       	sub	r12, r24
    31c6:	d9 0a       	sbc	r13, r25
    31c8:	ea 0a       	sbc	r14, r26
    31ca:	fb 0a       	sbc	r15, r27
				clst = fp->clust;
    31cc:	42 89       	ldd	r20, Z+18	; 0x12
    31ce:	53 89       	ldd	r21, Z+19	; 0x13
    31d0:	64 89       	ldd	r22, Z+20	; 0x14
    31d2:	75 89       	ldd	r23, Z+21	; 0x15
    31d4:	36 c0       	rjmp	.+108    	; 0x3242 <f_lseek+0x198>
			} else {									/* When seek to back cluster, */
				clst = fp->sclust;						/* start from the first cluster */
    31d6:	ad 81       	ldd	r26, Y+5	; 0x05
    31d8:	be 81       	ldd	r27, Y+6	; 0x06
    31da:	1e 96       	adiw	r26, 0x0e	; 14
    31dc:	4d 91       	ld	r20, X+
    31de:	5d 91       	ld	r21, X+
    31e0:	6d 91       	ld	r22, X+
    31e2:	7c 91       	ld	r23, X
    31e4:	51 97       	sbiw	r26, 0x11	; 17
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
    31e6:	41 15       	cp	r20, r1
    31e8:	51 05       	cpc	r21, r1
    31ea:	61 05       	cpc	r22, r1
    31ec:	71 05       	cpc	r23, r1
    31ee:	09 f5       	brne	.+66     	; 0x3232 <f_lseek+0x188>
					clst = create_chain(fp->fs, 0);
    31f0:	c8 01       	movw	r24, r16
    31f2:	40 e0       	ldi	r20, 0x00	; 0
    31f4:	50 e0       	ldi	r21, 0x00	; 0
    31f6:	ba 01       	movw	r22, r20
    31f8:	0e 94 59 0e 	call	0x1cb2	; 0x1cb2 <create_chain>
    31fc:	ab 01       	movw	r20, r22
    31fe:	bc 01       	movw	r22, r24
					if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
    3200:	41 30       	cpi	r20, 0x01	; 1
    3202:	51 05       	cpc	r21, r1
    3204:	61 05       	cpc	r22, r1
    3206:	71 05       	cpc	r23, r1
    3208:	19 f4       	brne	.+6      	; 0x3210 <f_lseek+0x166>
    320a:	ed 81       	ldd	r30, Y+5	; 0x05
    320c:	fe 81       	ldd	r31, Y+6	; 0x06
    320e:	5f c0       	rjmp	.+190    	; 0x32ce <f_lseek+0x224>
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
    3210:	4f 3f       	cpi	r20, 0xFF	; 255
    3212:	ff ef       	ldi	r31, 0xFF	; 255
    3214:	5f 07       	cpc	r21, r31
    3216:	ff ef       	ldi	r31, 0xFF	; 255
    3218:	6f 07       	cpc	r22, r31
    321a:	ff ef       	ldi	r31, 0xFF	; 255
    321c:	7f 07       	cpc	r23, r31
    321e:	19 f4       	brne	.+6      	; 0x3226 <f_lseek+0x17c>
    3220:	ad 81       	ldd	r26, Y+5	; 0x05
    3222:	be 81       	ldd	r27, Y+6	; 0x06
    3224:	36 c0       	rjmp	.+108    	; 0x3292 <f_lseek+0x1e8>
					fp->sclust = clst;
    3226:	ed 81       	ldd	r30, Y+5	; 0x05
    3228:	fe 81       	ldd	r31, Y+6	; 0x06
    322a:	46 87       	std	Z+14, r20	; 0x0e
    322c:	57 87       	std	Z+15, r21	; 0x0f
    322e:	60 8b       	std	Z+16, r22	; 0x10
    3230:	71 8b       	std	Z+17, r23	; 0x11
				}
#endif
				fp->clust = clst;
    3232:	ad 81       	ldd	r26, Y+5	; 0x05
    3234:	be 81       	ldd	r27, Y+6	; 0x06
    3236:	52 96       	adiw	r26, 0x12	; 18
    3238:	4d 93       	st	X+, r20
    323a:	5d 93       	st	X+, r21
    323c:	6d 93       	st	X+, r22
    323e:	7c 93       	st	X, r23
    3240:	55 97       	sbiw	r26, 0x15	; 21
			}
			if (clst != 0) {
    3242:	41 15       	cp	r20, r1
    3244:	51 05       	cpc	r21, r1
    3246:	61 05       	cpc	r22, r1
    3248:	71 05       	cpc	r23, r1
    324a:	09 f4       	brne	.+2      	; 0x324e <f_lseek+0x1a4>
    324c:	a5 c0       	rjmp	.+330    	; 0x3398 <f_lseek+0x2ee>
    324e:	0d 81       	ldd	r16, Y+5	; 0x05
    3250:	1e 81       	ldd	r17, Y+6	; 0x06
    3252:	5b c0       	rjmp	.+182    	; 0x330a <f_lseek+0x260>
				while (ofs > bcs) {						/* Cluster following loop */
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
    3254:	f8 01       	movw	r30, r16
    3256:	24 81       	ldd	r18, Z+4	; 0x04
    3258:	80 81       	ld	r24, Z
    325a:	91 81       	ldd	r25, Z+1	; 0x01
    325c:	21 ff       	sbrs	r18, 1
    325e:	0a c0       	rjmp	.+20     	; 0x3274 <f_lseek+0x1ca>
						clst = create_chain(fp->fs, clst);	/* Force stretch if in write mode */
    3260:	0e 94 59 0e 	call	0x1cb2	; 0x1cb2 <create_chain>
    3264:	ab 01       	movw	r20, r22
    3266:	bc 01       	movw	r22, r24
						if (clst == 0) {				/* When disk gets full, clip file size */
    3268:	41 15       	cp	r20, r1
    326a:	51 05       	cpc	r21, r1
    326c:	61 05       	cpc	r22, r1
    326e:	71 05       	cpc	r23, r1
    3270:	29 f4       	brne	.+10     	; 0x327c <f_lseek+0x1d2>
    3272:	54 c0       	rjmp	.+168    	; 0x331c <f_lseek+0x272>
							ofs = bcs; break;
						}
					} else
#endif
						clst = get_fat(fp->fs, clst);	/* Follow cluster chain if not in write mode */
    3274:	0e 94 32 0c 	call	0x1864	; 0x1864 <get_fat>
    3278:	ab 01       	movw	r20, r22
    327a:	bc 01       	movw	r22, r24
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
    327c:	4f 3f       	cpi	r20, 0xFF	; 255
    327e:	ff ef       	ldi	r31, 0xFF	; 255
    3280:	5f 07       	cpc	r21, r31
    3282:	ff ef       	ldi	r31, 0xFF	; 255
    3284:	6f 07       	cpc	r22, r31
    3286:	ff ef       	ldi	r31, 0xFF	; 255
    3288:	7f 07       	cpc	r23, r31
    328a:	69 f4       	brne	.+26     	; 0x32a6 <f_lseek+0x1fc>
    328c:	1e 83       	std	Y+6, r17	; 0x06
    328e:	0d 83       	std	Y+5, r16	; 0x05
    3290:	d8 01       	movw	r26, r16
    3292:	14 96       	adiw	r26, 0x04	; 4
    3294:	8c 91       	ld	r24, X
    3296:	14 97       	sbiw	r26, 0x04	; 4
    3298:	80 68       	ori	r24, 0x80	; 128
    329a:	14 96       	adiw	r26, 0x04	; 4
    329c:	8c 93       	st	X, r24
    329e:	14 97       	sbiw	r26, 0x04	; 4
    32a0:	77 24       	eor	r7, r7
    32a2:	73 94       	inc	r7
    32a4:	ae c0       	rjmp	.+348    	; 0x3402 <f_lseek+0x358>
					if (clst <= 1 || clst >= fp->fs->n_fatent) ABORT(fp->fs, FR_INT_ERR);
    32a6:	42 30       	cpi	r20, 0x02	; 2
    32a8:	51 05       	cpc	r21, r1
    32aa:	61 05       	cpc	r22, r1
    32ac:	71 05       	cpc	r23, r1
    32ae:	60 f0       	brcs	.+24     	; 0x32c8 <f_lseek+0x21e>
    32b0:	d8 01       	movw	r26, r16
    32b2:	ed 91       	ld	r30, X+
    32b4:	fc 91       	ld	r31, X
    32b6:	86 89       	ldd	r24, Z+22	; 0x16
    32b8:	97 89       	ldd	r25, Z+23	; 0x17
    32ba:	a0 8d       	ldd	r26, Z+24	; 0x18
    32bc:	b1 8d       	ldd	r27, Z+25	; 0x19
    32be:	48 17       	cp	r20, r24
    32c0:	59 07       	cpc	r21, r25
    32c2:	6a 07       	cpc	r22, r26
    32c4:	7b 07       	cpc	r23, r27
    32c6:	38 f0       	brcs	.+14     	; 0x32d6 <f_lseek+0x22c>
    32c8:	1e 83       	std	Y+6, r17	; 0x06
    32ca:	0d 83       	std	Y+5, r16	; 0x05
    32cc:	f8 01       	movw	r30, r16
    32ce:	84 81       	ldd	r24, Z+4	; 0x04
    32d0:	80 68       	ori	r24, 0x80	; 128
    32d2:	84 83       	std	Z+4, r24	; 0x04
    32d4:	94 c0       	rjmp	.+296    	; 0x33fe <f_lseek+0x354>
					fp->clust = clst;
    32d6:	d8 01       	movw	r26, r16
    32d8:	52 96       	adiw	r26, 0x12	; 18
    32da:	4d 93       	st	X+, r20
    32dc:	5d 93       	st	X+, r21
    32de:	6d 93       	st	X+, r22
    32e0:	7c 93       	st	X, r23
    32e2:	55 97       	sbiw	r26, 0x15	; 21
					fp->fptr += bcs;
    32e4:	16 96       	adiw	r26, 0x06	; 6
    32e6:	8d 91       	ld	r24, X+
    32e8:	9d 91       	ld	r25, X+
    32ea:	0d 90       	ld	r0, X+
    32ec:	bc 91       	ld	r27, X
    32ee:	a0 2d       	mov	r26, r0
    32f0:	88 0d       	add	r24, r8
    32f2:	99 1d       	adc	r25, r9
    32f4:	aa 1d       	adc	r26, r10
    32f6:	bb 1d       	adc	r27, r11
    32f8:	f8 01       	movw	r30, r16
    32fa:	86 83       	std	Z+6, r24	; 0x06
    32fc:	97 83       	std	Z+7, r25	; 0x07
    32fe:	a0 87       	std	Z+8, r26	; 0x08
    3300:	b1 87       	std	Z+9, r27	; 0x09
					ofs -= bcs;
    3302:	c8 18       	sub	r12, r8
    3304:	d9 08       	sbc	r13, r9
    3306:	ea 08       	sbc	r14, r10
    3308:	fb 08       	sbc	r15, r11
				}
#endif
				fp->clust = clst;
			}
			if (clst != 0) {
				while (ofs > bcs) {						/* Cluster following loop */
    330a:	8c 14       	cp	r8, r12
    330c:	9d 04       	cpc	r9, r13
    330e:	ae 04       	cpc	r10, r14
    3310:	bf 04       	cpc	r11, r15
    3312:	08 f4       	brcc	.+2      	; 0x3316 <f_lseek+0x26c>
    3314:	9f cf       	rjmp	.-194    	; 0x3254 <f_lseek+0x1aa>
    3316:	1e 83       	std	Y+6, r17	; 0x06
    3318:	0d 83       	std	Y+5, r16	; 0x05
    331a:	04 c0       	rjmp	.+8      	; 0x3324 <f_lseek+0x27a>
    331c:	1e 83       	std	Y+6, r17	; 0x06
    331e:	0d 83       	std	Y+5, r16	; 0x05
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
						clst = create_chain(fp->fs, clst);	/* Force stretch if in write mode */
						if (clst == 0) {				/* When disk gets full, clip file size */
    3320:	75 01       	movw	r14, r10
    3322:	64 01       	movw	r12, r8
					if (clst <= 1 || clst >= fp->fs->n_fatent) ABORT(fp->fs, FR_INT_ERR);
					fp->clust = clst;
					fp->fptr += bcs;
					ofs -= bcs;
				}
				fp->fptr += ofs;
    3324:	ed 81       	ldd	r30, Y+5	; 0x05
    3326:	fe 81       	ldd	r31, Y+6	; 0x06
    3328:	86 81       	ldd	r24, Z+6	; 0x06
    332a:	97 81       	ldd	r25, Z+7	; 0x07
    332c:	a0 85       	ldd	r26, Z+8	; 0x08
    332e:	b1 85       	ldd	r27, Z+9	; 0x09
    3330:	8c 0d       	add	r24, r12
    3332:	9d 1d       	adc	r25, r13
    3334:	ae 1d       	adc	r26, r14
    3336:	bf 1d       	adc	r27, r15
    3338:	86 83       	std	Z+6, r24	; 0x06
    333a:	97 83       	std	Z+7, r25	; 0x07
    333c:	a0 87       	std	Z+8, r26	; 0x08
    333e:	b1 87       	std	Z+9, r27	; 0x09
				if (ofs % SS(fp->fs)) {
    3340:	d7 01       	movw	r26, r14
    3342:	c6 01       	movw	r24, r12
    3344:	91 70       	andi	r25, 0x01	; 1
    3346:	a0 70       	andi	r26, 0x00	; 0
    3348:	b0 70       	andi	r27, 0x00	; 0
    334a:	00 97       	sbiw	r24, 0x00	; 0
    334c:	a1 05       	cpc	r26, r1
    334e:	b1 05       	cpc	r27, r1
    3350:	19 f1       	breq	.+70     	; 0x3398 <f_lseek+0x2ee>
					nsect = clust2sect(fp->fs, clst);	/* Current sector */
    3352:	80 81       	ld	r24, Z
    3354:	91 81       	ldd	r25, Z+1	; 0x01
    3356:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <clust2sect>
    335a:	ab 01       	movw	r20, r22
    335c:	bc 01       	movw	r22, r24
					if (!nsect) ABORT(fp->fs, FR_INT_ERR);
    335e:	41 15       	cp	r20, r1
    3360:	51 05       	cpc	r21, r1
    3362:	61 05       	cpc	r22, r1
    3364:	71 05       	cpc	r23, r1
    3366:	51 f4       	brne	.+20     	; 0x337c <f_lseek+0x2d2>
    3368:	ad 81       	ldd	r26, Y+5	; 0x05
    336a:	be 81       	ldd	r27, Y+6	; 0x06
    336c:	14 96       	adiw	r26, 0x04	; 4
    336e:	8c 91       	ld	r24, X
    3370:	14 97       	sbiw	r26, 0x04	; 4
    3372:	80 68       	ori	r24, 0x80	; 128
    3374:	14 96       	adiw	r26, 0x04	; 4
    3376:	8c 93       	st	X, r24
    3378:	14 97       	sbiw	r26, 0x04	; 4
    337a:	41 c0       	rjmp	.+130    	; 0x33fe <f_lseek+0x354>
					nsect += ofs / SS(fp->fs);
    337c:	d7 01       	movw	r26, r14
    337e:	c6 01       	movw	r24, r12
    3380:	29 e0       	ldi	r18, 0x09	; 9
    3382:	b6 95       	lsr	r27
    3384:	a7 95       	ror	r26
    3386:	97 95       	ror	r25
    3388:	87 95       	ror	r24
    338a:	2a 95       	dec	r18
    338c:	d1 f7       	brne	.-12     	; 0x3382 <f_lseek+0x2d8>
    338e:	84 0f       	add	r24, r20
    3390:	95 1f       	adc	r25, r21
    3392:	a6 1f       	adc	r26, r22
    3394:	b7 1f       	adc	r27, r23
    3396:	03 c0       	rjmp	.+6      	; 0x339e <f_lseek+0x2f4>
			 && !(fp->flag & FA_WRITE)
#endif
			) ofs = fp->fsize;

		ifptr = fp->fptr;
		fp->fptr = nsect = 0;
    3398:	80 e0       	ldi	r24, 0x00	; 0
    339a:	90 e0       	ldi	r25, 0x00	; 0
    339c:	dc 01       	movw	r26, r24
					if (!nsect) ABORT(fp->fs, FR_INT_ERR);
					nsect += ofs / SS(fp->fs);
				}
			}
		}
		if (fp->fptr % SS(fp->fs) && nsect != fp->dsect) {	/* Fill sector cache if needed */
    339e:	ed 81       	ldd	r30, Y+5	; 0x05
    33a0:	fe 81       	ldd	r31, Y+6	; 0x06
    33a2:	06 81       	ldd	r16, Z+6	; 0x06
    33a4:	17 81       	ldd	r17, Z+7	; 0x07
    33a6:	20 85       	ldd	r18, Z+8	; 0x08
    33a8:	31 85       	ldd	r19, Z+9	; 0x09
    33aa:	b9 01       	movw	r22, r18
    33ac:	a8 01       	movw	r20, r16
    33ae:	51 70       	andi	r21, 0x01	; 1
    33b0:	60 70       	andi	r22, 0x00	; 0
    33b2:	70 70       	andi	r23, 0x00	; 0
    33b4:	41 15       	cp	r20, r1
    33b6:	51 05       	cpc	r21, r1
    33b8:	61 05       	cpc	r22, r1
    33ba:	71 05       	cpc	r23, r1
    33bc:	69 f0       	breq	.+26     	; 0x33d8 <f_lseek+0x32e>
    33be:	46 89       	ldd	r20, Z+22	; 0x16
    33c0:	57 89       	ldd	r21, Z+23	; 0x17
    33c2:	60 8d       	ldd	r22, Z+24	; 0x18
    33c4:	71 8d       	ldd	r23, Z+25	; 0x19
    33c6:	84 17       	cp	r24, r20
    33c8:	95 07       	cpc	r25, r21
    33ca:	a6 07       	cpc	r26, r22
    33cc:	b7 07       	cpc	r27, r23
    33ce:	21 f0       	breq	.+8      	; 0x33d8 <f_lseek+0x32e>
			}
#endif
			if (disk_read(fp->fs->drv, fp->buf, nsect, 1) != RES_OK)	/* Fill sector cache */
				ABORT(fp->fs, FR_DISK_ERR);
#endif
			fp->dsect = nsect;
    33d0:	86 8b       	std	Z+22, r24	; 0x16
    33d2:	97 8b       	std	Z+23, r25	; 0x17
    33d4:	a0 8f       	std	Z+24, r26	; 0x18
    33d6:	b1 8f       	std	Z+25, r27	; 0x19
		}
#if !_FS_READONLY
		if (fp->fptr > fp->fsize) {			/* Set file change flag if the file size is extended */
    33d8:	ed 81       	ldd	r30, Y+5	; 0x05
    33da:	fe 81       	ldd	r31, Y+6	; 0x06
    33dc:	82 85       	ldd	r24, Z+10	; 0x0a
    33de:	93 85       	ldd	r25, Z+11	; 0x0b
    33e0:	a4 85       	ldd	r26, Z+12	; 0x0c
    33e2:	b5 85       	ldd	r27, Z+13	; 0x0d
    33e4:	80 17       	cp	r24, r16
    33e6:	91 07       	cpc	r25, r17
    33e8:	a2 07       	cpc	r26, r18
    33ea:	b3 07       	cpc	r27, r19
    33ec:	50 f4       	brcc	.+20     	; 0x3402 <f_lseek+0x358>
			fp->fsize = fp->fptr;
    33ee:	02 87       	std	Z+10, r16	; 0x0a
    33f0:	13 87       	std	Z+11, r17	; 0x0b
    33f2:	24 87       	std	Z+12, r18	; 0x0c
    33f4:	35 87       	std	Z+13, r19	; 0x0d
			fp->flag |= FA__WRITTEN;
    33f6:	84 81       	ldd	r24, Z+4	; 0x04
    33f8:	80 62       	ori	r24, 0x20	; 32
    33fa:	84 83       	std	Z+4, r24	; 0x04
    33fc:	02 c0       	rjmp	.+4      	; 0x3402 <f_lseek+0x358>


	res = validate(fp);					/* Check validity of the object */
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
	if (fp->flag & FA__ERROR)			/* Check abort flag */
		LEAVE_FF(fp->fs, FR_INT_ERR);
    33fe:	02 e0       	ldi	r16, 0x02	; 2
    3400:	70 2e       	mov	r7, r16
		}
#endif
	}

	LEAVE_FF(fp->fs, res);
}
    3402:	87 2d       	mov	r24, r7
    3404:	26 96       	adiw	r28, 0x06	; 6
    3406:	0f b6       	in	r0, 0x3f	; 63
    3408:	f8 94       	cli
    340a:	de bf       	out	0x3e, r29	; 62
    340c:	0f be       	out	0x3f, r0	; 63
    340e:	cd bf       	out	0x3d, r28	; 61
    3410:	df 91       	pop	r29
    3412:	cf 91       	pop	r28
    3414:	1f 91       	pop	r17
    3416:	0f 91       	pop	r16
    3418:	ff 90       	pop	r15
    341a:	ef 90       	pop	r14
    341c:	df 90       	pop	r13
    341e:	cf 90       	pop	r12
    3420:	bf 90       	pop	r11
    3422:	af 90       	pop	r10
    3424:	9f 90       	pop	r9
    3426:	8f 90       	pop	r8
    3428:	7f 90       	pop	r7
    342a:	5f 90       	pop	r5
    342c:	4f 90       	pop	r4
    342e:	3f 90       	pop	r3
    3430:	2f 90       	pop	r2
    3432:	08 95       	ret

00003434 <Endpoint_Null_Stream>:
	return ENDPOINT_RWSTREAM_NoError;
}

uint8_t Endpoint_Null_Stream(uint16_t Length,
                             uint16_t* const BytesProcessed)
{
    3434:	df 92       	push	r13
    3436:	ef 92       	push	r14
    3438:	ff 92       	push	r15
    343a:	0f 93       	push	r16
    343c:	1f 93       	push	r17
    343e:	cf 93       	push	r28
    3440:	df 93       	push	r29
    3442:	ec 01       	movw	r28, r24
    3444:	8b 01       	movw	r16, r22
	uint8_t  ErrorCode;
	uint16_t BytesInTransfer = 0;
	
	if ((ErrorCode = Endpoint_WaitUntilReady()))
    3446:	ba d2       	rcall	.+1396   	; 0x39bc <Endpoint_WaitUntilReady>
    3448:	d8 2e       	mov	r13, r24
    344a:	88 23       	and	r24, r24
    344c:	79 f5       	brne	.+94     	; 0x34ac <Endpoint_Null_Stream+0x78>
    344e:	01 15       	cp	r16, r1
	  return ErrorCode;
	  
	if (BytesProcessed != NULL)
    3450:	11 05       	cpc	r17, r1
    3452:	29 f0       	breq	.+10     	; 0x345e <Endpoint_Null_Stream+0x2a>
    3454:	f8 01       	movw	r30, r16
	  Length -= *BytesProcessed;
    3456:	20 81       	ld	r18, Z
    3458:	31 81       	ldd	r19, Z+1	; 0x01
    345a:	c2 1b       	sub	r28, r18
    345c:	d3 0b       	sbc	r29, r19
    345e:	ee 24       	eor	r14, r14
	return ENDPOINT_RWSTREAM_NoError;
}

uint8_t Endpoint_Null_Stream(uint16_t Length,
                             uint16_t* const BytesProcessed)
{
    3460:	ff 24       	eor	r15, r15
    3462:	20 c0       	rjmp	.+64     	; 0x34a4 <Endpoint_Null_Stream+0x70>
    3464:	80 91 e8 00 	lds	r24, 0x00E8
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    3468:	85 fd       	sbrc	r24, 5
	if (BytesProcessed != NULL)
	  Length -= *BytesProcessed;

	while (Length)
	{
		if (!(Endpoint_IsReadWriteAllowed()))
    346a:	16 c0       	rjmp	.+44     	; 0x3498 <Endpoint_Null_Stream+0x64>
    346c:	80 91 e8 00 	lds	r24, 0x00E8
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    3470:	8e 77       	andi	r24, 0x7E	; 126
    3472:	80 93 e8 00 	sts	0x00E8, r24
    3476:	01 15       	cp	r16, r1
		{
			Endpoint_ClearIN();

			if (BytesProcessed != NULL)
    3478:	11 05       	cpc	r17, r1
    347a:	51 f0       	breq	.+20     	; 0x3490 <Endpoint_Null_Stream+0x5c>
    347c:	f8 01       	movw	r30, r16
			{
				*BytesProcessed += BytesInTransfer;
    347e:	80 81       	ld	r24, Z
    3480:	91 81       	ldd	r25, Z+1	; 0x01
    3482:	8e 0d       	add	r24, r14
    3484:	9f 1d       	adc	r25, r15
    3486:	91 83       	std	Z+1, r25	; 0x01
    3488:	80 83       	st	Z, r24
    348a:	35 e0       	ldi	r19, 0x05	; 5
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
    348c:	d3 2e       	mov	r13, r19
    348e:	0e c0       	rjmp	.+28     	; 0x34ac <Endpoint_Null_Stream+0x78>
    3490:	95 d2       	rcall	.+1322   	; 0x39bc <Endpoint_WaitUntilReady>
			}

			if ((ErrorCode = Endpoint_WaitUntilReady()))
    3492:	88 23       	and	r24, r24
    3494:	39 f0       	breq	.+14     	; 0x34a4 <Endpoint_Null_Stream+0x70>
    3496:	09 c0       	rjmp	.+18     	; 0x34aa <Endpoint_Null_Stream+0x76>
    3498:	10 92 f1 00 	sts	0x00F1, r1
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    349c:	21 97       	sbiw	r28, 0x01	; 1
    349e:	08 94       	sec
		}
		else
		{
			Endpoint_Write_8(0);

			Length--;
    34a0:	e1 1c       	adc	r14, r1
			BytesInTransfer++;
    34a2:	f1 1c       	adc	r15, r1
    34a4:	20 97       	sbiw	r28, 0x00	; 0
    34a6:	f1 f6       	brne	.-68     	; 0x3464 <Endpoint_Null_Stream+0x30>
	  return ErrorCode;
	  
	if (BytesProcessed != NULL)
	  Length -= *BytesProcessed;

	while (Length)
    34a8:	01 c0       	rjmp	.+2      	; 0x34ac <Endpoint_Null_Stream+0x78>
    34aa:	d8 2e       	mov	r13, r24
    34ac:	8d 2d       	mov	r24, r13
			{
				*BytesProcessed += BytesInTransfer;
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
			}

			if ((ErrorCode = Endpoint_WaitUntilReady()))
    34ae:	df 91       	pop	r29
			BytesInTransfer++;
		}
	}
	
	return ENDPOINT_RWSTREAM_NoError;
}
    34b0:	cf 91       	pop	r28
    34b2:	1f 91       	pop	r17
    34b4:	0f 91       	pop	r16
    34b6:	ff 90       	pop	r15
    34b8:	ef 90       	pop	r14
    34ba:	df 90       	pop	r13
    34bc:	08 95       	ret

000034be <Endpoint_Write_Stream_LE>:
    34be:	af 92       	push	r10
    34c0:	bf 92       	push	r11
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
    34c2:	cf 92       	push	r12
    34c4:	df 92       	push	r13
    34c6:	ef 92       	push	r14
    34c8:	ff 92       	push	r15
    34ca:	1f 93       	push	r17
    34cc:	cf 93       	push	r28
    34ce:	df 93       	push	r29
    34d0:	ec 01       	movw	r28, r24
    34d2:	7b 01       	movw	r14, r22
    34d4:	6a 01       	movw	r12, r20
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	uint16_t BytesInTransfer = 0;
	uint8_t  ErrorCode;

	if ((ErrorCode = Endpoint_WaitUntilReady()))
    34d6:	72 d2       	rcall	.+1252   	; 0x39bc <Endpoint_WaitUntilReady>
    34d8:	18 2f       	mov	r17, r24
    34da:	88 23       	and	r24, r24
    34dc:	a1 f5       	brne	.+104    	; 0x3546 <Endpoint_Write_Stream_LE+0x88>
    34de:	c1 14       	cp	r12, r1
	  return ErrorCode;

	if (BytesProcessed != NULL)
    34e0:	d1 04       	cpc	r13, r1
    34e2:	39 f0       	breq	.+14     	; 0x34f2 <Endpoint_Write_Stream_LE+0x34>
    34e4:	f6 01       	movw	r30, r12
	{
		Length -= *BytesProcessed;
    34e6:	20 81       	ld	r18, Z
    34e8:	31 81       	ldd	r19, Z+1	; 0x01
    34ea:	e2 1a       	sub	r14, r18
    34ec:	f3 0a       	sbc	r15, r19
    34ee:	c2 0f       	add	r28, r18
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
    34f0:	d3 1f       	adc	r29, r19
    34f2:	aa 24       	eor	r10, r10

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
    34f4:	bb 24       	eor	r11, r11
    34f6:	22 c0       	rjmp	.+68     	; 0x353c <Endpoint_Write_Stream_LE+0x7e>
    34f8:	80 91 e8 00 	lds	r24, 0x00E8
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    34fc:	85 fd       	sbrc	r24, 5
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
	{
		if (!(Endpoint_IsReadWriteAllowed()))
    34fe:	15 c0       	rjmp	.+42     	; 0x352a <Endpoint_Write_Stream_LE+0x6c>
    3500:	80 91 e8 00 	lds	r24, 0x00E8
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    3504:	8e 77       	andi	r24, 0x7E	; 126
    3506:	80 93 e8 00 	sts	0x00E8, r24
    350a:	c1 14       	cp	r12, r1

			#if !defined(INTERRUPT_CONTROL_ENDPOINT)
			USB_USBTask();
			#endif

			if (BytesProcessed != NULL)
    350c:	d1 04       	cpc	r13, r1
    350e:	49 f0       	breq	.+18     	; 0x3522 <Endpoint_Write_Stream_LE+0x64>
    3510:	f6 01       	movw	r30, r12
			{
				*BytesProcessed += BytesInTransfer;
    3512:	80 81       	ld	r24, Z
    3514:	91 81       	ldd	r25, Z+1	; 0x01
    3516:	8a 0d       	add	r24, r10
    3518:	9b 1d       	adc	r25, r11
    351a:	91 83       	std	Z+1, r25	; 0x01
    351c:	80 83       	st	Z, r24
    351e:	15 e0       	ldi	r17, 0x05	; 5
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
    3520:	12 c0       	rjmp	.+36     	; 0x3546 <Endpoint_Write_Stream_LE+0x88>
    3522:	4c d2       	rcall	.+1176   	; 0x39bc <Endpoint_WaitUntilReady>
			}

			if ((ErrorCode = Endpoint_WaitUntilReady()))
    3524:	88 23       	and	r24, r24
    3526:	51 f0       	breq	.+20     	; 0x353c <Endpoint_Write_Stream_LE+0x7e>
    3528:	0d c0       	rjmp	.+26     	; 0x3544 <Endpoint_Write_Stream_LE+0x86>
    352a:	89 91       	ld	r24, Y+
    352c:	80 93 f1 00 	sts	0x00F1, r24
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    3530:	08 94       	sec
    3532:	e1 08       	sbc	r14, r1
		}
		else
		{
			TEMPLATE_TRANSFER_BYTE(DataStream);
			TEMPLATE_BUFFER_MOVE(DataStream, 1);
			Length--;
    3534:	f1 08       	sbc	r15, r1
    3536:	08 94       	sec
    3538:	a1 1c       	adc	r10, r1
			BytesInTransfer++;
    353a:	b1 1c       	adc	r11, r1
    353c:	e1 14       	cp	r14, r1
    353e:	f1 04       	cpc	r15, r1
	{
		Length -= *BytesProcessed;
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
    3540:	d9 f6       	brne	.-74     	; 0x34f8 <Endpoint_Write_Stream_LE+0x3a>
    3542:	01 c0       	rjmp	.+2      	; 0x3546 <Endpoint_Write_Stream_LE+0x88>
    3544:	18 2f       	mov	r17, r24
    3546:	81 2f       	mov	r24, r17
			{
				*BytesProcessed += BytesInTransfer;
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
			}

			if ((ErrorCode = Endpoint_WaitUntilReady()))
    3548:	df 91       	pop	r29
			BytesInTransfer++;
		}
	}

	return ENDPOINT_RWSTREAM_NoError;
}
    354a:	cf 91       	pop	r28
    354c:	1f 91       	pop	r17
    354e:	ff 90       	pop	r15
    3550:	ef 90       	pop	r14
    3552:	df 90       	pop	r13
    3554:	cf 90       	pop	r12
    3556:	bf 90       	pop	r11
    3558:	af 90       	pop	r10
    355a:	08 95       	ret

0000355c <Endpoint_Write_Stream_BE>:
    355c:	af 92       	push	r10
    355e:	bf 92       	push	r11
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
    3560:	cf 92       	push	r12
    3562:	df 92       	push	r13
    3564:	ff 92       	push	r15
    3566:	0f 93       	push	r16
    3568:	1f 93       	push	r17
    356a:	cf 93       	push	r28
    356c:	df 93       	push	r29
    356e:	ec 01       	movw	r28, r24
    3570:	6b 01       	movw	r12, r22
    3572:	5a 01       	movw	r10, r20
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	uint16_t BytesInTransfer = 0;
	uint8_t  ErrorCode;

	if ((ErrorCode = Endpoint_WaitUntilReady()))
    3574:	23 d2       	rcall	.+1094   	; 0x39bc <Endpoint_WaitUntilReady>
    3576:	f8 2e       	mov	r15, r24
    3578:	88 23       	and	r24, r24
    357a:	d9 f5       	brne	.+118    	; 0x35f2 <Endpoint_Write_Stream_BE+0x96>
    357c:	86 01       	movw	r16, r12

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
    357e:	01 50       	subi	r16, 0x01	; 1
    3580:	10 40       	sbci	r17, 0x00	; 0
    3582:	0c 0f       	add	r16, r28
    3584:	1d 1f       	adc	r17, r29
    3586:	a1 14       	cp	r10, r1
	uint8_t  ErrorCode;

	if ((ErrorCode = Endpoint_WaitUntilReady()))
	  return ErrorCode;

	if (BytesProcessed != NULL)
    3588:	b1 04       	cpc	r11, r1
    358a:	39 f0       	breq	.+14     	; 0x359a <Endpoint_Write_Stream_BE+0x3e>
    358c:	f5 01       	movw	r30, r10
	{
		Length -= *BytesProcessed;
    358e:	20 81       	ld	r18, Z
    3590:	31 81       	ldd	r19, Z+1	; 0x01
    3592:	c2 1a       	sub	r12, r18
    3594:	d3 0a       	sbc	r13, r19
    3596:	02 1b       	sub	r16, r18
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
    3598:	13 0b       	sbc	r17, r19
    359a:	c0 e0       	ldi	r28, 0x00	; 0
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
    359c:	d0 e0       	ldi	r29, 0x00	; 0
    359e:	24 c0       	rjmp	.+72     	; 0x35e8 <Endpoint_Write_Stream_BE+0x8c>
    35a0:	80 91 e8 00 	lds	r24, 0x00E8
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    35a4:	85 fd       	sbrc	r24, 5
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
	{
		if (!(Endpoint_IsReadWriteAllowed()))
    35a6:	16 c0       	rjmp	.+44     	; 0x35d4 <Endpoint_Write_Stream_BE+0x78>
    35a8:	80 91 e8 00 	lds	r24, 0x00E8
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    35ac:	8e 77       	andi	r24, 0x7E	; 126
    35ae:	80 93 e8 00 	sts	0x00E8, r24
    35b2:	a1 14       	cp	r10, r1

			#if !defined(INTERRUPT_CONTROL_ENDPOINT)
			USB_USBTask();
			#endif

			if (BytesProcessed != NULL)
    35b4:	b1 04       	cpc	r11, r1
    35b6:	51 f0       	breq	.+20     	; 0x35cc <Endpoint_Write_Stream_BE+0x70>
    35b8:	f5 01       	movw	r30, r10
			{
				*BytesProcessed += BytesInTransfer;
    35ba:	80 81       	ld	r24, Z
    35bc:	91 81       	ldd	r25, Z+1	; 0x01
    35be:	8c 0f       	add	r24, r28
    35c0:	9d 1f       	adc	r25, r29
    35c2:	91 83       	std	Z+1, r25	; 0x01
    35c4:	80 83       	st	Z, r24
    35c6:	45 e0       	ldi	r20, 0x05	; 5
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
    35c8:	f4 2e       	mov	r15, r20
    35ca:	13 c0       	rjmp	.+38     	; 0x35f2 <Endpoint_Write_Stream_BE+0x96>
    35cc:	f7 d1       	rcall	.+1006   	; 0x39bc <Endpoint_WaitUntilReady>
			}

			if ((ErrorCode = Endpoint_WaitUntilReady()))
    35ce:	88 23       	and	r24, r24
    35d0:	59 f0       	breq	.+22     	; 0x35e8 <Endpoint_Write_Stream_BE+0x8c>
    35d2:	0e c0       	rjmp	.+28     	; 0x35f0 <Endpoint_Write_Stream_BE+0x94>
    35d4:	f8 01       	movw	r30, r16
    35d6:	80 81       	ld	r24, Z
			  return ErrorCode;
		}
		else
		{
			TEMPLATE_TRANSFER_BYTE(DataStream);
    35d8:	80 93 f1 00 	sts	0x00F1, r24
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    35dc:	01 50       	subi	r16, 0x01	; 1
    35de:	10 40       	sbci	r17, 0x00	; 0
			TEMPLATE_BUFFER_MOVE(DataStream, 1);
    35e0:	08 94       	sec
    35e2:	c1 08       	sbc	r12, r1
			Length--;
    35e4:	d1 08       	sbc	r13, r1
    35e6:	21 96       	adiw	r28, 0x01	; 1
    35e8:	c1 14       	cp	r12, r1
			BytesInTransfer++;
    35ea:	d1 04       	cpc	r13, r1
	{
		Length -= *BytesProcessed;
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
    35ec:	c9 f6       	brne	.-78     	; 0x35a0 <Endpoint_Write_Stream_BE+0x44>
    35ee:	01 c0       	rjmp	.+2      	; 0x35f2 <Endpoint_Write_Stream_BE+0x96>
    35f0:	f8 2e       	mov	r15, r24
    35f2:	8f 2d       	mov	r24, r15
			{
				*BytesProcessed += BytesInTransfer;
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
			}

			if ((ErrorCode = Endpoint_WaitUntilReady()))
    35f4:	df 91       	pop	r29
			BytesInTransfer++;
		}
	}

	return ENDPOINT_RWSTREAM_NoError;
}
    35f6:	cf 91       	pop	r28
    35f8:	1f 91       	pop	r17
    35fa:	0f 91       	pop	r16
    35fc:	ff 90       	pop	r15
    35fe:	df 90       	pop	r13
    3600:	cf 90       	pop	r12
    3602:	bf 90       	pop	r11
    3604:	af 90       	pop	r10
    3606:	08 95       	ret

00003608 <Endpoint_Read_Stream_LE>:
    3608:	af 92       	push	r10
    360a:	bf 92       	push	r11
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
    360c:	cf 92       	push	r12
    360e:	df 92       	push	r13
    3610:	ef 92       	push	r14
    3612:	ff 92       	push	r15
    3614:	1f 93       	push	r17
    3616:	cf 93       	push	r28
    3618:	df 93       	push	r29
    361a:	ec 01       	movw	r28, r24
    361c:	7b 01       	movw	r14, r22
    361e:	6a 01       	movw	r12, r20
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	uint16_t BytesInTransfer = 0;
	uint8_t  ErrorCode;

	if ((ErrorCode = Endpoint_WaitUntilReady()))
    3620:	cd d1       	rcall	.+922    	; 0x39bc <Endpoint_WaitUntilReady>
    3622:	18 2f       	mov	r17, r24
    3624:	88 23       	and	r24, r24
    3626:	a1 f5       	brne	.+104    	; 0x3690 <Endpoint_Read_Stream_LE+0x88>
    3628:	c1 14       	cp	r12, r1
	  return ErrorCode;

	if (BytesProcessed != NULL)
    362a:	d1 04       	cpc	r13, r1
    362c:	39 f0       	breq	.+14     	; 0x363c <Endpoint_Read_Stream_LE+0x34>
    362e:	f6 01       	movw	r30, r12
	{
		Length -= *BytesProcessed;
    3630:	20 81       	ld	r18, Z
    3632:	31 81       	ldd	r19, Z+1	; 0x01
    3634:	e2 1a       	sub	r14, r18
    3636:	f3 0a       	sbc	r15, r19
    3638:	c2 0f       	add	r28, r18
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
    363a:	d3 1f       	adc	r29, r19
    363c:	aa 24       	eor	r10, r10

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
    363e:	bb 24       	eor	r11, r11
    3640:	22 c0       	rjmp	.+68     	; 0x3686 <Endpoint_Read_Stream_LE+0x7e>
    3642:	80 91 e8 00 	lds	r24, 0x00E8
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    3646:	85 fd       	sbrc	r24, 5
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
	{
		if (!(Endpoint_IsReadWriteAllowed()))
    3648:	15 c0       	rjmp	.+42     	; 0x3674 <Endpoint_Read_Stream_LE+0x6c>
    364a:	80 91 e8 00 	lds	r24, 0x00E8
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    364e:	8b 77       	andi	r24, 0x7B	; 123
    3650:	80 93 e8 00 	sts	0x00E8, r24
    3654:	c1 14       	cp	r12, r1

			#if !defined(INTERRUPT_CONTROL_ENDPOINT)
			USB_USBTask();
			#endif

			if (BytesProcessed != NULL)
    3656:	d1 04       	cpc	r13, r1
    3658:	49 f0       	breq	.+18     	; 0x366c <Endpoint_Read_Stream_LE+0x64>
    365a:	f6 01       	movw	r30, r12
			{
				*BytesProcessed += BytesInTransfer;
    365c:	80 81       	ld	r24, Z
    365e:	91 81       	ldd	r25, Z+1	; 0x01
    3660:	8a 0d       	add	r24, r10
    3662:	9b 1d       	adc	r25, r11
    3664:	91 83       	std	Z+1, r25	; 0x01
    3666:	80 83       	st	Z, r24
    3668:	15 e0       	ldi	r17, 0x05	; 5
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
    366a:	12 c0       	rjmp	.+36     	; 0x3690 <Endpoint_Read_Stream_LE+0x88>
    366c:	a7 d1       	rcall	.+846    	; 0x39bc <Endpoint_WaitUntilReady>
			}

			if ((ErrorCode = Endpoint_WaitUntilReady()))
    366e:	88 23       	and	r24, r24
    3670:	51 f0       	breq	.+20     	; 0x3686 <Endpoint_Read_Stream_LE+0x7e>
    3672:	0d c0       	rjmp	.+26     	; 0x368e <Endpoint_Read_Stream_LE+0x86>
    3674:	80 91 f1 00 	lds	r24, 0x00F1
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    3678:	89 93       	st	Y+, r24
    367a:	08 94       	sec
			  return ErrorCode;
		}
		else
		{
			TEMPLATE_TRANSFER_BYTE(DataStream);
    367c:	e1 08       	sbc	r14, r1
			TEMPLATE_BUFFER_MOVE(DataStream, 1);
			Length--;
    367e:	f1 08       	sbc	r15, r1
    3680:	08 94       	sec
    3682:	a1 1c       	adc	r10, r1
			BytesInTransfer++;
    3684:	b1 1c       	adc	r11, r1
    3686:	e1 14       	cp	r14, r1
    3688:	f1 04       	cpc	r15, r1
	{
		Length -= *BytesProcessed;
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
    368a:	d9 f6       	brne	.-74     	; 0x3642 <Endpoint_Read_Stream_LE+0x3a>
    368c:	01 c0       	rjmp	.+2      	; 0x3690 <Endpoint_Read_Stream_LE+0x88>
    368e:	18 2f       	mov	r17, r24
    3690:	81 2f       	mov	r24, r17
			{
				*BytesProcessed += BytesInTransfer;
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
			}

			if ((ErrorCode = Endpoint_WaitUntilReady()))
    3692:	df 91       	pop	r29
			BytesInTransfer++;
		}
	}

	return ENDPOINT_RWSTREAM_NoError;
}
    3694:	cf 91       	pop	r28
    3696:	1f 91       	pop	r17
    3698:	ff 90       	pop	r15
    369a:	ef 90       	pop	r14
    369c:	df 90       	pop	r13
    369e:	cf 90       	pop	r12
    36a0:	bf 90       	pop	r11
    36a2:	af 90       	pop	r10
    36a4:	08 95       	ret

000036a6 <Endpoint_Write_Control_Stream_LE>:
    36a6:	20 91 44 04 	lds	r18, 0x0444
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
    36aa:	30 91 45 04 	lds	r19, 0x0445
    36ae:	26 17       	cp	r18, r22
    36b0:	37 07       	cpc	r19, r23
    36b2:	20 f4       	brcc	.+8      	; 0x36bc <Endpoint_Write_Control_Stream_LE+0x16>
    36b4:	b9 01       	movw	r22, r18
    36b6:	fc 01       	movw	r30, r24
    36b8:	20 e0       	ldi	r18, 0x00	; 0
    36ba:	35 c0       	rjmp	.+106    	; 0x3726 <Endpoint_Write_Control_Stream_LE+0x80>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
    36bc:	61 15       	cp	r22, r1
    36be:	71 05       	cpc	r23, r1
    36c0:	d1 f7       	brne	.-12     	; 0x36b6 <Endpoint_Write_Control_Stream_LE+0x10>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    36c2:	20 91 e8 00 	lds	r18, 0x00E8
    36c6:	2e 77       	andi	r18, 0x7E	; 126
    36c8:	20 93 e8 00 	sts	0x00E8, r18
    36cc:	f4 cf       	rjmp	.-24     	; 0x36b6 <Endpoint_Write_Control_Stream_LE+0x10>
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    36ce:	8e b3       	in	r24, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    36d0:	88 23       	and	r24, r24
    36d2:	f1 f1       	breq	.+124    	; 0x3750 <Endpoint_Write_Control_Stream_LE+0xaa>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    36d4:	85 30       	cpi	r24, 0x05	; 5
    36d6:	c1 f1       	breq	.+112    	; 0x3748 <Endpoint_Write_Control_Stream_LE+0xa2>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    36d8:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    36dc:	83 fd       	sbrc	r24, 3
    36de:	36 c0       	rjmp	.+108    	; 0x374c <Endpoint_Write_Control_Stream_LE+0xa6>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    36e0:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
    36e4:	82 fd       	sbrc	r24, 2
    36e6:	2a c0       	rjmp	.+84     	; 0x373c <Endpoint_Write_Control_Stream_LE+0x96>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    36e8:	80 91 e8 00 	lds	r24, 0x00E8
		  break;

		if (Endpoint_IsINReady())
    36ec:	80 ff       	sbrs	r24, 0
    36ee:	1b c0       	rjmp	.+54     	; 0x3726 <Endpoint_Write_Control_Stream_LE+0x80>
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
    36f0:	80 91 f2 00 	lds	r24, 0x00F2
    36f4:	90 91 f3 00 	lds	r25, 0x00F3
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
    36f8:	06 c0       	rjmp	.+12     	; 0x3706 <Endpoint_Write_Control_Stream_LE+0x60>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
    36fa:	21 91       	ld	r18, Z+
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    36fc:	20 93 f1 00 	sts	0x00F1, r18
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
    3700:	61 50       	subi	r22, 0x01	; 1
    3702:	70 40       	sbci	r23, 0x00	; 0
				BytesInEndpoint++;
    3704:	01 96       	adiw	r24, 0x01	; 1

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
    3706:	61 15       	cp	r22, r1
    3708:	71 05       	cpc	r23, r1
    370a:	19 f0       	breq	.+6      	; 0x3712 <Endpoint_Write_Control_Stream_LE+0x6c>
    370c:	88 30       	cpi	r24, 0x08	; 8
    370e:	91 05       	cpc	r25, r1
    3710:	a0 f3       	brcs	.-24     	; 0x36fa <Endpoint_Write_Control_Stream_LE+0x54>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
    3712:	21 e0       	ldi	r18, 0x01	; 1
    3714:	88 30       	cpi	r24, 0x08	; 8
    3716:	91 05       	cpc	r25, r1
    3718:	09 f0       	breq	.+2      	; 0x371c <Endpoint_Write_Control_Stream_LE+0x76>
    371a:	20 e0       	ldi	r18, 0x00	; 0
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    371c:	80 91 e8 00 	lds	r24, 0x00E8
    3720:	8e 77       	andi	r24, 0x7E	; 126
    3722:	80 93 e8 00 	sts	0x00E8, r24
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
    3726:	61 15       	cp	r22, r1
    3728:	71 05       	cpc	r23, r1
    372a:	89 f6       	brne	.-94     	; 0x36ce <Endpoint_Write_Control_Stream_LE+0x28>
    372c:	22 23       	and	r18, r18
    372e:	79 f6       	brne	.-98     	; 0x36ce <Endpoint_Write_Control_Stream_LE+0x28>
    3730:	05 c0       	rjmp	.+10     	; 0x373c <Endpoint_Write_Control_Stream_LE+0x96>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    3732:	8e b3       	in	r24, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    3734:	88 23       	and	r24, r24
    3736:	61 f0       	breq	.+24     	; 0x3750 <Endpoint_Write_Control_Stream_LE+0xaa>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    3738:	85 30       	cpi	r24, 0x05	; 5
    373a:	61 f0       	breq	.+24     	; 0x3754 <Endpoint_Write_Control_Stream_LE+0xae>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    373c:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
    3740:	82 ff       	sbrs	r24, 2
    3742:	f7 cf       	rjmp	.-18     	; 0x3732 <Endpoint_Write_Control_Stream_LE+0x8c>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
    3744:	80 e0       	ldi	r24, 0x00	; 0
    3746:	08 95       	ret
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
    3748:	83 e0       	ldi	r24, 0x03	; 3
    374a:	08 95       	ret
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
    374c:	81 e0       	ldi	r24, 0x01	; 1
    374e:	08 95       	ret
	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
    3750:	82 e0       	ldi	r24, 0x02	; 2
    3752:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
    3754:	83 e0       	ldi	r24, 0x03	; 3
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
    3756:	08 95       	ret

00003758 <Endpoint_Read_Control_Stream_LE>:
uint8_t TEMPLATE_FUNC_NAME (void* const Buffer,
                            uint16_t Length)
{
	uint8_t* DataStream = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));

	if (!(Length))
    3758:	61 15       	cp	r22, r1
    375a:	71 05       	cpc	r23, r1
    375c:	29 f4       	brne	.+10     	; 0x3768 <Endpoint_Read_Control_Stream_LE+0x10>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    375e:	20 91 e8 00 	lds	r18, 0x00E8
    3762:	2b 77       	andi	r18, 0x7B	; 123
    3764:	20 93 e8 00 	sts	0x00E8, r18

#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (void* const Buffer,
                            uint16_t Length)
{
    3768:	38 2f       	mov	r19, r24
    376a:	29 2f       	mov	r18, r25
    376c:	25 c0       	rjmp	.+74     	; 0x37b8 <Endpoint_Read_Control_Stream_LE+0x60>
	if (!(Length))
	  Endpoint_ClearOUT();

	while (Length)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    376e:	8e b3       	in	r24, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    3770:	88 23       	and	r24, r24
    3772:	a9 f1       	breq	.+106    	; 0x37de <Endpoint_Read_Control_Stream_LE+0x86>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    3774:	85 30       	cpi	r24, 0x05	; 5
    3776:	79 f1       	breq	.+94     	; 0x37d6 <Endpoint_Read_Control_Stream_LE+0x7e>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    3778:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    377c:	83 fd       	sbrc	r24, 3
    377e:	2d c0       	rjmp	.+90     	; 0x37da <Endpoint_Read_Control_Stream_LE+0x82>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    3780:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;

		if (Endpoint_IsOUTReceived())
    3784:	82 ff       	sbrs	r24, 2
    3786:	f3 cf       	rjmp	.-26     	; 0x376e <Endpoint_Read_Control_Stream_LE+0x16>
    3788:	e3 2f       	mov	r30, r19
    378a:	f2 2f       	mov	r31, r18
    378c:	08 c0       	rjmp	.+16     	; 0x379e <Endpoint_Read_Control_Stream_LE+0x46>
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    378e:	80 91 f1 00 	lds	r24, 0x00F1
		{
			while (Length && Endpoint_BytesInEndpoint())
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
    3792:	81 93       	st	Z+, r24
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
    3794:	3e 2f       	mov	r19, r30
    3796:	2f 2f       	mov	r18, r31
				Length--;
    3798:	61 50       	subi	r22, 0x01	; 1
    379a:	70 40       	sbci	r23, 0x00	; 0
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;

		if (Endpoint_IsOUTReceived())
		{
			while (Length && Endpoint_BytesInEndpoint())
    379c:	41 f0       	breq	.+16     	; 0x37ae <Endpoint_Read_Control_Stream_LE+0x56>
    379e:	3e 2f       	mov	r19, r30
    37a0:	2f 2f       	mov	r18, r31
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
    37a2:	80 91 f2 00 	lds	r24, 0x00F2
    37a6:	90 91 f3 00 	lds	r25, 0x00F3
    37aa:	00 97       	sbiw	r24, 0x00	; 0
    37ac:	81 f7       	brne	.-32     	; 0x378e <Endpoint_Read_Control_Stream_LE+0x36>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    37ae:	80 91 e8 00 	lds	r24, 0x00E8
    37b2:	8b 77       	andi	r24, 0x7B	; 123
    37b4:	80 93 e8 00 	sts	0x00E8, r24
	uint8_t* DataStream = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));

	if (!(Length))
	  Endpoint_ClearOUT();

	while (Length)
    37b8:	61 15       	cp	r22, r1
    37ba:	71 05       	cpc	r23, r1
    37bc:	c1 f6       	brne	.-80     	; 0x376e <Endpoint_Read_Control_Stream_LE+0x16>
    37be:	05 c0       	rjmp	.+10     	; 0x37ca <Endpoint_Read_Control_Stream_LE+0x72>
		}
	}

	while (!(Endpoint_IsINReady()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    37c0:	8e b3       	in	r24, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    37c2:	88 23       	and	r24, r24
    37c4:	61 f0       	breq	.+24     	; 0x37de <Endpoint_Read_Control_Stream_LE+0x86>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    37c6:	85 30       	cpi	r24, 0x05	; 5
    37c8:	61 f0       	breq	.+24     	; 0x37e2 <Endpoint_Read_Control_Stream_LE+0x8a>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    37ca:	80 91 e8 00 	lds	r24, 0x00E8

			Endpoint_ClearOUT();
		}
	}

	while (!(Endpoint_IsINReady()))
    37ce:	80 ff       	sbrs	r24, 0
    37d0:	f7 cf       	rjmp	.-18     	; 0x37c0 <Endpoint_Read_Control_Stream_LE+0x68>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
    37d2:	80 e0       	ldi	r24, 0x00	; 0
    37d4:	08 95       	ret
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
    37d6:	83 e0       	ldi	r24, 0x03	; 3
    37d8:	08 95       	ret
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
    37da:	81 e0       	ldi	r24, 0x01	; 1
    37dc:	08 95       	ret
	while (!(Endpoint_IsINReady()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
    37de:	82 e0       	ldi	r24, 0x02	; 2
    37e0:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
    37e2:	83 e0       	ldi	r24, 0x03	; 3
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
    37e4:	08 95       	ret

000037e6 <Endpoint_Write_Control_PStream_LE>:
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
    37e6:	20 91 44 04 	lds	r18, 0x0444
    37ea:	30 91 45 04 	lds	r19, 0x0445
    37ee:	26 17       	cp	r18, r22
    37f0:	37 07       	cpc	r19, r23
    37f2:	20 f4       	brcc	.+8      	; 0x37fc <Endpoint_Write_Control_PStream_LE+0x16>
    37f4:	b9 01       	movw	r22, r18
    37f6:	fc 01       	movw	r30, r24
    37f8:	20 e0       	ldi	r18, 0x00	; 0
    37fa:	37 c0       	rjmp	.+110    	; 0x386a <Endpoint_Write_Control_PStream_LE+0x84>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
    37fc:	61 15       	cp	r22, r1
    37fe:	71 05       	cpc	r23, r1
    3800:	d1 f7       	brne	.-12     	; 0x37f6 <Endpoint_Write_Control_PStream_LE+0x10>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    3802:	20 91 e8 00 	lds	r18, 0x00E8
    3806:	2e 77       	andi	r18, 0x7E	; 126
    3808:	20 93 e8 00 	sts	0x00E8, r18
    380c:	f4 cf       	rjmp	.-24     	; 0x37f6 <Endpoint_Write_Control_PStream_LE+0x10>
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    380e:	8e b3       	in	r24, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    3810:	88 23       	and	r24, r24
    3812:	09 f4       	brne	.+2      	; 0x3816 <Endpoint_Write_Control_PStream_LE+0x30>
    3814:	3f c0       	rjmp	.+126    	; 0x3894 <Endpoint_Write_Control_PStream_LE+0xae>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    3816:	85 30       	cpi	r24, 0x05	; 5
    3818:	c9 f1       	breq	.+114    	; 0x388c <Endpoint_Write_Control_PStream_LE+0xa6>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    381a:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    381e:	83 fd       	sbrc	r24, 3
    3820:	37 c0       	rjmp	.+110    	; 0x3890 <Endpoint_Write_Control_PStream_LE+0xaa>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    3822:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
    3826:	82 fd       	sbrc	r24, 2
    3828:	2b c0       	rjmp	.+86     	; 0x3880 <Endpoint_Write_Control_PStream_LE+0x9a>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    382a:	80 91 e8 00 	lds	r24, 0x00E8
		  break;

		if (Endpoint_IsINReady())
    382e:	80 ff       	sbrs	r24, 0
    3830:	1c c0       	rjmp	.+56     	; 0x386a <Endpoint_Write_Control_PStream_LE+0x84>
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
    3832:	80 91 f2 00 	lds	r24, 0x00F2
    3836:	90 91 f3 00 	lds	r25, 0x00F3
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
    383a:	07 c0       	rjmp	.+14     	; 0x384a <Endpoint_Write_Control_PStream_LE+0x64>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
    383c:	24 91       	lpm	r18, Z
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    383e:	20 93 f1 00 	sts	0x00F1, r18
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
    3842:	31 96       	adiw	r30, 0x01	; 1
				Length--;
    3844:	61 50       	subi	r22, 0x01	; 1
    3846:	70 40       	sbci	r23, 0x00	; 0
				BytesInEndpoint++;
    3848:	01 96       	adiw	r24, 0x01	; 1

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
    384a:	61 15       	cp	r22, r1
    384c:	71 05       	cpc	r23, r1
    384e:	19 f0       	breq	.+6      	; 0x3856 <Endpoint_Write_Control_PStream_LE+0x70>
    3850:	88 30       	cpi	r24, 0x08	; 8
    3852:	91 05       	cpc	r25, r1
    3854:	98 f3       	brcs	.-26     	; 0x383c <Endpoint_Write_Control_PStream_LE+0x56>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
    3856:	21 e0       	ldi	r18, 0x01	; 1
    3858:	88 30       	cpi	r24, 0x08	; 8
    385a:	91 05       	cpc	r25, r1
    385c:	09 f0       	breq	.+2      	; 0x3860 <Endpoint_Write_Control_PStream_LE+0x7a>
    385e:	20 e0       	ldi	r18, 0x00	; 0
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    3860:	80 91 e8 00 	lds	r24, 0x00E8
    3864:	8e 77       	andi	r24, 0x7E	; 126
    3866:	80 93 e8 00 	sts	0x00E8, r24
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
    386a:	61 15       	cp	r22, r1
    386c:	71 05       	cpc	r23, r1
    386e:	79 f6       	brne	.-98     	; 0x380e <Endpoint_Write_Control_PStream_LE+0x28>
    3870:	22 23       	and	r18, r18
    3872:	69 f6       	brne	.-102    	; 0x380e <Endpoint_Write_Control_PStream_LE+0x28>
    3874:	05 c0       	rjmp	.+10     	; 0x3880 <Endpoint_Write_Control_PStream_LE+0x9a>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    3876:	8e b3       	in	r24, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    3878:	88 23       	and	r24, r24
    387a:	61 f0       	breq	.+24     	; 0x3894 <Endpoint_Write_Control_PStream_LE+0xae>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    387c:	85 30       	cpi	r24, 0x05	; 5
    387e:	61 f0       	breq	.+24     	; 0x3898 <Endpoint_Write_Control_PStream_LE+0xb2>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    3880:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
    3884:	82 ff       	sbrs	r24, 2
    3886:	f7 cf       	rjmp	.-18     	; 0x3876 <Endpoint_Write_Control_PStream_LE+0x90>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
    3888:	80 e0       	ldi	r24, 0x00	; 0
    388a:	08 95       	ret
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
    388c:	83 e0       	ldi	r24, 0x03	; 3
    388e:	08 95       	ret
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
    3890:	81 e0       	ldi	r24, 0x01	; 1
    3892:	08 95       	ret
	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
    3894:	82 e0       	ldi	r24, 0x02	; 2
    3896:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
    3898:	83 e0       	ldi	r24, 0x03	; 3
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
    389a:	08 95       	ret

0000389c <Endpoint_ConfigureEndpoint_Prv>:
	UECFG0X = UECFG0XData;
	UECFG1X = UECFG1XData;

	return Endpoint_IsConfigured();
#else
	for (uint8_t EPNum = Number; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
    389c:	98 2f       	mov	r25, r24
    389e:	2a c0       	rjmp	.+84     	; 0x38f4 <Endpoint_ConfigureEndpoint_Prv+0x58>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    38a0:	90 93 e9 00 	sts	0x00E9, r25
		uint8_t UECFG1XTemp;
		uint8_t UEIENXTemp;

		Endpoint_SelectEndpoint(EPNum);

		if (EPNum == Number)
    38a4:	98 17       	cp	r25, r24
    38a6:	39 f0       	breq	.+14     	; 0x38b6 <Endpoint_ConfigureEndpoint_Prv+0x1a>
			UECFG1XTemp = UECFG1XData;
			UEIENXTemp  = 0;
		}
		else
		{
			UECFG0XTemp = UECFG0X;
    38a8:	70 91 ec 00 	lds	r23, 0x00EC
			UECFG1XTemp = UECFG1X;
    38ac:	20 91 ed 00 	lds	r18, 0x00ED
			UEIENXTemp  = UEIENX;
    38b0:	50 91 f0 00 	lds	r21, 0x00F0
    38b4:	03 c0       	rjmp	.+6      	; 0x38bc <Endpoint_ConfigureEndpoint_Prv+0x20>
		Endpoint_SelectEndpoint(EPNum);

		if (EPNum == Number)
		{
			UECFG0XTemp = UECFG0XData;
			UECFG1XTemp = UECFG1XData;
    38b6:	24 2f       	mov	r18, r20

		Endpoint_SelectEndpoint(EPNum);

		if (EPNum == Number)
		{
			UECFG0XTemp = UECFG0XData;
    38b8:	76 2f       	mov	r23, r22
			UECFG1XTemp = UECFG1XData;
			UEIENXTemp  = 0;
    38ba:	50 e0       	ldi	r21, 0x00	; 0
			UECFG0XTemp = UECFG0X;
			UECFG1XTemp = UECFG1X;
			UEIENXTemp  = UEIENX;
		}

		if (!(UECFG1XTemp & (1 << ALLOC)))
    38bc:	21 ff       	sbrs	r18, 1
    38be:	19 c0       	rjmp	.+50     	; 0x38f2 <Endpoint_ConfigureEndpoint_Prv+0x56>
			 *  to and from a host.
			 */
			static inline void Endpoint_DisableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_DisableEndpoint(void)
			{
				UECONX &= ~(1 << EPEN);
    38c0:	30 91 eb 00 	lds	r19, 0x00EB
    38c4:	3e 7f       	andi	r19, 0xFE	; 254
    38c6:	30 93 eb 00 	sts	0x00EB, r19
		  continue;

		Endpoint_DisableEndpoint();
		UECFG1X &= ~(1 << ALLOC);
    38ca:	30 91 ed 00 	lds	r19, 0x00ED
    38ce:	3d 7f       	andi	r19, 0xFD	; 253
    38d0:	30 93 ed 00 	sts	0x00ED, r19
			 *  \note Endpoints must first be configured properly via \ref Endpoint_ConfigureEndpoint().
			 */
			static inline void Endpoint_EnableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_EnableEndpoint(void)
			{
				UECONX |= (1 << EPEN);
    38d4:	30 91 eb 00 	lds	r19, 0x00EB
    38d8:	31 60       	ori	r19, 0x01	; 1
    38da:	30 93 eb 00 	sts	0x00EB, r19

		Endpoint_EnableEndpoint();
		UECFG0X = UECFG0XTemp;
    38de:	70 93 ec 00 	sts	0x00EC, r23
		UECFG1X = UECFG1XTemp;
    38e2:	20 93 ed 00 	sts	0x00ED, r18
		UEIENX  = UEIENXTemp;
    38e6:	50 93 f0 00 	sts	0x00F0, r21
			 *  \return Boolean \c true if the currently selected endpoint has been configured, \c false otherwise.
			 */
			static inline bool Endpoint_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsConfigured(void)
			{
				return ((UESTA0X & (1 << CFGOK)) ? true : false);
    38ea:	20 91 ee 00 	lds	r18, 0x00EE

		if (!(Endpoint_IsConfigured()))
    38ee:	27 ff       	sbrs	r18, 7
    38f0:	08 c0       	rjmp	.+16     	; 0x3902 <Endpoint_ConfigureEndpoint_Prv+0x66>
	UECFG0X = UECFG0XData;
	UECFG1X = UECFG1XData;

	return Endpoint_IsConfigured();
#else
	for (uint8_t EPNum = Number; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
    38f2:	9f 5f       	subi	r25, 0xFF	; 255
    38f4:	97 30       	cpi	r25, 0x07	; 7
    38f6:	a0 f2       	brcs	.-88     	; 0x38a0 <Endpoint_ConfigureEndpoint_Prv+0x4>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    38f8:	8f 70       	andi	r24, 0x0F	; 15
    38fa:	80 93 e9 00 	sts	0x00E9, r24
		if (!(Endpoint_IsConfigured()))
		  return false;
	}

	Endpoint_SelectEndpoint(Number);
	return true;
    38fe:	81 e0       	ldi	r24, 0x01	; 1
    3900:	08 95       	ret
		UECFG0X = UECFG0XTemp;
		UECFG1X = UECFG1XTemp;
		UEIENX  = UEIENXTemp;

		if (!(Endpoint_IsConfigured()))
		  return false;
    3902:	80 e0       	ldi	r24, 0x00	; 0
	}

	Endpoint_SelectEndpoint(Number);
	return true;
#endif
}
    3904:	08 95       	ret

00003906 <Endpoint_ConfigureEndpointTable>:
uint8_t USB_Device_ControlEndpointSize = ENDPOINT_CONTROLEP_DEFAULT_SIZE;
#endif

bool Endpoint_ConfigureEndpointTable(const USB_Endpoint_Table_t* const Table,
                                     const uint8_t Entries)
{
    3906:	0f 93       	push	r16
    3908:	1f 93       	push	r17
    390a:	cf 93       	push	r28
    390c:	df 93       	push	r29
    390e:	16 2f       	mov	r17, r22
	{
		if (!(Table[i].Address))
		  continue;
	
		if (!(Endpoint_ConfigureEndpoint(Table[i].Address, Table[i].Type, Table[i].Size, Table[i].Banks)))
		  return false;
    3910:	ec 01       	movw	r28, r24
#endif

bool Endpoint_ConfigureEndpointTable(const USB_Endpoint_Table_t* const Table,
                                     const uint8_t Entries)
{
	for (uint8_t i = 0; i < Entries; i++)
    3912:	00 e0       	ldi	r16, 0x00	; 0
    3914:	2a c0       	rjmp	.+84     	; 0x396a <Endpoint_ConfigureEndpointTable+0x64>
	{
		if (!(Table[i].Address))
    3916:	98 81       	ld	r25, Y
    3918:	99 23       	and	r25, r25
    391a:	29 f1       	breq	.+74     	; 0x3966 <Endpoint_ConfigureEndpointTable+0x60>
		  continue;
	
		if (!(Endpoint_ConfigureEndpoint(Table[i].Address, Table[i].Type, Table[i].Size, Table[i].Banks)))
    391c:	6b 81       	ldd	r22, Y+3	; 0x03
    391e:	e9 81       	ldd	r30, Y+1	; 0x01
    3920:	fa 81       	ldd	r31, Y+2	; 0x02
    3922:	2c 81       	ldd	r18, Y+4	; 0x04
			static inline bool Endpoint_ConfigureEndpoint(const uint8_t Address,
			                                              const uint8_t Type,
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);
    3924:	89 2f       	mov	r24, r25
    3926:	8f 70       	andi	r24, 0x0F	; 15

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
    3928:	87 30       	cpi	r24, 0x07	; 7
    392a:	18 f5       	brcc	.+70     	; 0x3972 <Endpoint_ConfigureEndpointTable+0x6c>
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
				                                      ((Type << EPTYPE0) | ((Address & ENDPOINT_DIR_IN) ? (1 << EPDIR) : 0)),
    392c:	62 95       	swap	r22
    392e:	66 0f       	add	r22, r22
    3930:	66 0f       	add	r22, r22
    3932:	60 7c       	andi	r22, 0xC0	; 192
    3934:	99 1f       	adc	r25, r25
    3936:	99 27       	eor	r25, r25
    3938:	99 1f       	adc	r25, r25
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
    393a:	69 2b       	or	r22, r25
    393c:	22 30       	cpi	r18, 0x02	; 2
    393e:	10 f0       	brcs	.+4      	; 0x3944 <Endpoint_ConfigureEndpointTable+0x3e>
    3940:	96 e0       	ldi	r25, 0x06	; 6
    3942:	01 c0       	rjmp	.+2      	; 0x3946 <Endpoint_ConfigureEndpointTable+0x40>
    3944:	92 e0       	ldi	r25, 0x02	; 2
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes) ATTR_WARN_UNUSED_RESULT ATTR_CONST
			                                                                       ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;
    3946:	28 e0       	ldi	r18, 0x08	; 8
    3948:	30 e0       	ldi	r19, 0x00	; 0
		/* Inline Functions: */
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes) ATTR_WARN_UNUSED_RESULT ATTR_CONST
			                                                                       ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
    394a:	40 e0       	ldi	r20, 0x00	; 0
    394c:	03 c0       	rjmp	.+6      	; 0x3954 <Endpoint_ConfigureEndpointTable+0x4e>
				uint16_t CheckBytes = 8;

				while (CheckBytes < Bytes)
				{
					MaskVal++;
    394e:	4f 5f       	subi	r20, 0xFF	; 255
					CheckBytes <<= 1;
    3950:	22 0f       	add	r18, r18
    3952:	33 1f       	adc	r19, r19
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while (CheckBytes < Bytes)
    3954:	2e 17       	cp	r18, r30
    3956:	3f 07       	cpc	r19, r31
    3958:	d0 f3       	brcs	.-12     	; 0x394e <Endpoint_ConfigureEndpointTable+0x48>
				{
					MaskVal++;
					CheckBytes <<= 1;
				}

				return (MaskVal << EPSIZE0);
    395a:	42 95       	swap	r20
    395c:	40 7f       	andi	r20, 0xF0	; 240
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
    395e:	49 2b       	or	r20, r25
    3960:	9d df       	rcall	.-198    	; 0x389c <Endpoint_ConfigureEndpoint_Prv>
    3962:	88 23       	and	r24, r24
    3964:	31 f0       	breq	.+12     	; 0x3972 <Endpoint_ConfigureEndpointTable+0x6c>
    3966:	0f 5f       	subi	r16, 0xFF	; 255
#endif

bool Endpoint_ConfigureEndpointTable(const USB_Endpoint_Table_t* const Table,
                                     const uint8_t Entries)
{
	for (uint8_t i = 0; i < Entries; i++)
    3968:	25 96       	adiw	r28, 0x05	; 5
    396a:	01 17       	cp	r16, r17
    396c:	a1 f6       	brne	.-88     	; 0x3916 <Endpoint_ConfigureEndpointTable+0x10>
    396e:	81 e0       	ldi	r24, 0x01	; 1
	
		if (!(Endpoint_ConfigureEndpoint(Table[i].Address, Table[i].Type, Table[i].Size, Table[i].Banks)))
		  return false;
	}
	
	return true;
    3970:	01 c0       	rjmp	.+2      	; 0x3974 <Endpoint_ConfigureEndpointTable+0x6e>
    3972:	80 e0       	ldi	r24, 0x00	; 0
	{
		if (!(Table[i].Address))
		  continue;
	
		if (!(Endpoint_ConfigureEndpoint(Table[i].Address, Table[i].Type, Table[i].Size, Table[i].Banks)))
		  return false;
    3974:	df 91       	pop	r29
	}
	
	return true;
}
    3976:	cf 91       	pop	r28
    3978:	1f 91       	pop	r17
    397a:	0f 91       	pop	r16
    397c:	08 95       	ret

0000397e <Endpoint_ClearStatusStage>:
    397e:	80 91 3e 04 	lds	r24, 0x043E
	}
}

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
    3982:	87 ff       	sbrs	r24, 7
    3984:	11 c0       	rjmp	.+34     	; 0x39a8 <Endpoint_ClearStatusStage+0x2a>
    3986:	03 c0       	rjmp	.+6      	; 0x398e <Endpoint_ClearStatusStage+0x10>
	{
		while (!(Endpoint_IsOUTReceived()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
    3988:	8e b3       	in	r24, 0x1e	; 30
    398a:	88 23       	and	r24, r24
    398c:	b1 f0       	breq	.+44     	; 0x39ba <Endpoint_ClearStatusStage+0x3c>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    398e:	80 91 e8 00 	lds	r24, 0x00E8

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
	{
		while (!(Endpoint_IsOUTReceived()))
    3992:	82 ff       	sbrs	r24, 2
    3994:	f9 cf       	rjmp	.-14     	; 0x3988 <Endpoint_ClearStatusStage+0xa>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    3996:	80 91 e8 00 	lds	r24, 0x00E8
    399a:	8b 77       	andi	r24, 0x7B	; 123
    399c:	80 93 e8 00 	sts	0x00E8, r24
    39a0:	08 95       	ret
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
    39a2:	8e b3       	in	r24, 0x1e	; 30
    39a4:	88 23       	and	r24, r24
    39a6:	49 f0       	breq	.+18     	; 0x39ba <Endpoint_ClearStatusStage+0x3c>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    39a8:	80 91 e8 00 	lds	r24, 0x00E8

		Endpoint_ClearOUT();
	}
	else
	{
		while (!(Endpoint_IsINReady()))
    39ac:	80 ff       	sbrs	r24, 0
    39ae:	f9 cf       	rjmp	.-14     	; 0x39a2 <Endpoint_ClearStatusStage+0x24>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    39b0:	80 91 e8 00 	lds	r24, 0x00E8
    39b4:	8e 77       	andi	r24, 0x7E	; 126
    39b6:	80 93 e8 00 	sts	0x00E8, r24
    39ba:	08 95       	ret

000039bc <Endpoint_WaitUntilReady>:
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
    39bc:	80 91 e4 00 	lds	r24, 0x00E4
    39c0:	90 91 e5 00 	lds	r25, 0x00E5
    39c4:	45 e6       	ldi	r20, 0x65	; 101
    39c6:	01 c0       	rjmp	.+2      	; 0x39ca <Endpoint_WaitUntilReady+0xe>
    39c8:	c9 01       	movw	r24, r18
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    39ca:	20 91 ec 00 	lds	r18, 0x00EC
    39ce:	20 ff       	sbrs	r18, 0
    39d0:	22 c0       	rjmp	.+68     	; 0x3a16 <Endpoint_WaitUntilReady+0x5a>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    39d2:	20 91 e8 00 	lds	r18, 0x00E8

	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
    39d6:	20 fd       	sbrc	r18, 0
    39d8:	14 c0       	rjmp	.+40     	; 0x3a02 <Endpoint_WaitUntilReady+0x46>
		{
			if (Endpoint_IsOUTReceived())
			  return ENDPOINT_READYWAIT_NoError;
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    39da:	2e b3       	in	r18, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    39dc:	22 23       	and	r18, r18
    39de:	99 f0       	breq	.+38     	; 0x3a06 <Endpoint_WaitUntilReady+0x4a>
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    39e0:	25 30       	cpi	r18, 0x05	; 5
    39e2:	99 f0       	breq	.+38     	; 0x3a0a <Endpoint_WaitUntilReady+0x4e>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    39e4:	20 91 eb 00 	lds	r18, 0x00EB
		  return ENDPOINT_READYWAIT_BusSuspended;
		else if (Endpoint_IsStalled())
    39e8:	25 fd       	sbrc	r18, 5
    39ea:	11 c0       	rjmp	.+34     	; 0x3a0e <Endpoint_WaitUntilReady+0x52>
    39ec:	20 91 e4 00 	lds	r18, 0x00E4
    39f0:	30 91 e5 00 	lds	r19, 0x00E5
		  return ENDPOINT_READYWAIT_EndpointStalled;

		uint16_t CurrentFrameNumber = USB_Device_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
    39f4:	28 17       	cp	r18, r24
    39f6:	39 07       	cpc	r19, r25
    39f8:	41 f3       	breq	.-48     	; 0x39ca <Endpoint_WaitUntilReady+0xe>
    39fa:	41 50       	subi	r20, 0x01	; 1
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
    39fc:	29 f7       	brne	.-54     	; 0x39c8 <Endpoint_WaitUntilReady+0xc>
			  return ENDPOINT_READYWAIT_Timeout;
    39fe:	84 e0       	ldi	r24, 0x04	; 4
    3a00:	08 95       	ret
	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
    3a02:	80 e0       	ldi	r24, 0x00	; 0
    3a04:	08 95       	ret
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
    3a06:	82 e0       	ldi	r24, 0x02	; 2
    3a08:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_READYWAIT_BusSuspended;
    3a0a:	83 e0       	ldi	r24, 0x03	; 3
    3a0c:	08 95       	ret
		else if (Endpoint_IsStalled())
		  return ENDPOINT_READYWAIT_EndpointStalled;
    3a0e:	81 e0       	ldi	r24, 0x01	; 1
    3a10:	08 95       	ret
			  return ENDPOINT_READYWAIT_NoError;
		}
		else
		{
			if (Endpoint_IsOUTReceived())
			  return ENDPOINT_READYWAIT_NoError;
    3a12:	80 e0       	ldi	r24, 0x00	; 0

			if (!(TimeoutMSRem--))
			  return ENDPOINT_READYWAIT_Timeout;
		}
	}
}
    3a14:	08 95       	ret
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    3a16:	20 91 e8 00 	lds	r18, 0x00E8
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
		}
		else
		{
			if (Endpoint_IsOUTReceived())
    3a1a:	22 ff       	sbrs	r18, 2
    3a1c:	de cf       	rjmp	.-68     	; 0x39da <Endpoint_WaitUntilReady+0x1e>
    3a1e:	f9 cf       	rjmp	.-14     	; 0x3a12 <Endpoint_WaitUntilReady+0x56>

00003a20 <USB_ResetInterface>:

	USB_IsInitialized = false;
}

void USB_ResetInterface(void)
{
    3a20:	0f 93       	push	r16
    3a22:	1f 93       	push	r17
    3a24:	cf 93       	push	r28
    3a26:	df 93       	push	r29
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
    3a28:	4d d0       	rcall	.+154    	; 0x3ac4 <USB_INT_DisableAllInterrupts>
    3a2a:	54 d0       	rcall	.+168    	; 0x3ad4 <USB_INT_ClearAllInterrupts>
	USB_INT_ClearAllInterrupts();
    3a2c:	c8 ed       	ldi	r28, 0xD8	; 216
    3a2e:	d0 e0       	ldi	r29, 0x00	; 0
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
    3a30:	88 81       	ld	r24, Y
    3a32:	8f 77       	andi	r24, 0x7F	; 127
    3a34:	88 83       	st	Y, r24
    3a36:	88 81       	ld	r24, Y
    3a38:	80 68       	ori	r24, 0x80	; 128
				USBCON |=  (1 << USBE);
    3a3a:	88 83       	st	Y, r24
    3a3c:	88 81       	ld	r24, Y
    3a3e:	8f 7d       	andi	r24, 0xDF	; 223
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
    3a40:	88 83       	st	Y, r24
    3a42:	e7 ed       	ldi	r30, 0xD7	; 215
    3a44:	f0 e0       	ldi	r31, 0x00	; 0

	if (USB_CurrentMode == USB_MODE_Device)
	{
		#if defined(USB_CAN_BE_DEVICE)
		#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
		UHWCON |=  (1 << UIMOD);
    3a46:	80 81       	ld	r24, Z
    3a48:	80 68       	ori	r24, 0x80	; 128
    3a4a:	80 83       	st	Z, r24
    3a4c:	19 bc       	out	0x29, r1	; 41
    3a4e:	1e ba       	out	0x1e, r1	; 30
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    3a50:	10 92 3a 04 	sts	0x043A, r1

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState                 = DEVICE_STATE_Unattached;
	USB_Device_ConfigurationNumber  = 0;
    3a54:	10 92 3c 04 	sts	0x043C, r1

	#if !defined(NO_DEVICE_REMOTE_WAKEUP)
	USB_Device_RemoteWakeupEnabled  = false;
    3a58:	10 92 3b 04 	sts	0x043B, r1
	#endif

	#if !defined(NO_DEVICE_SELF_POWER)
	USB_Device_CurrentlySelfPowered = false;
    3a5c:	00 ee       	ldi	r16, 0xE0	; 224
    3a5e:	10 e0       	ldi	r17, 0x00	; 0
			}

			static inline void USB_Device_SetFullSpeed(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetFullSpeed(void)
			{
				UDCON &= ~(1 << LSM);
    3a60:	f8 01       	movw	r30, r16
    3a62:	80 81       	ld	r24, Z
    3a64:	8b 7f       	andi	r24, 0xFB	; 251
    3a66:	80 83       	st	Z, r24
    3a68:	88 81       	ld	r24, Y
    3a6a:	81 60       	ori	r24, 0x01	; 1
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBCON |= (1 << VBUSTE);
    3a6c:	88 83       	st	Y, r24
    3a6e:	80 e0       	ldi	r24, 0x00	; 0
    3a70:	60 e0       	ldi	r22, 0x00	; 0
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
    3a72:	42 e0       	ldi	r20, 0x02	; 2
    3a74:	13 df       	rcall	.-474    	; 0x389c <Endpoint_ConfigureEndpoint_Prv>
    3a76:	e1 ee       	ldi	r30, 0xE1	; 225
    3a78:	f0 e0       	ldi	r31, 0x00	; 0
    3a7a:	80 81       	ld	r24, Z
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
    3a7c:	8e 7f       	andi	r24, 0xFE	; 254
    3a7e:	80 83       	st	Z, r24
    3a80:	e2 ee       	ldi	r30, 0xE2	; 226
    3a82:	f0 e0       	ldi	r31, 0x00	; 0
    3a84:	80 81       	ld	r24, Z
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
    3a86:	81 60       	ori	r24, 0x01	; 1
    3a88:	80 83       	st	Z, r24
    3a8a:	80 81       	ld	r24, Z
    3a8c:	88 60       	ori	r24, 0x08	; 8
    3a8e:	80 83       	st	Z, r24
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
    3a90:	f8 01       	movw	r30, r16
    3a92:	80 81       	ld	r24, Z
    3a94:	8e 7f       	andi	r24, 0xFE	; 254
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
    3a96:	80 83       	st	Z, r24
    3a98:	88 81       	ld	r24, Y
    3a9a:	80 61       	ori	r24, 0x10	; 16
    3a9c:	88 83       	st	Y, r24

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON |=  (1 << OTGPADE);
    3a9e:	df 91       	pop	r29
    3aa0:	cf 91       	pop	r28
    3aa2:	1f 91       	pop	r17
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
    3aa4:	0f 91       	pop	r16
    3aa6:	08 95       	ret

00003aa8 <USB_Init>:
    3aa8:	e8 ed       	ldi	r30, 0xD8	; 216
    3aaa:	f0 e0       	ldi	r31, 0x00	; 0
    3aac:	80 81       	ld	r24, Z
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON &= ~(1 << OTGPADE);
    3aae:	8f 7e       	andi	r24, 0xEF	; 239
    3ab0:	80 83       	st	Z, r24

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON |=  (1 << UVREGE);
    3ab2:	e7 ed       	ldi	r30, 0xD7	; 215
    3ab4:	f0 e0       	ldi	r31, 0x00	; 0
    3ab6:	80 81       	ld	r24, Z
    3ab8:	81 60       	ori	r24, 0x01	; 1
    3aba:	80 83       	st	Z, r24
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
    3abc:	81 e0       	ldi	r24, 0x01	; 1
    3abe:	80 93 3d 04 	sts	0x043D, r24

	USB_ResetInterface();
    3ac2:	ae cf       	rjmp	.-164    	; 0x3a20 <USB_ResetInterface>

00003ac4 <USB_INT_DisableAllInterrupts>:
#include "../USBInterrupt.h"

void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
    3ac4:	e8 ed       	ldi	r30, 0xD8	; 216
    3ac6:	f0 e0       	ldi	r31, 0x00	; 0
    3ac8:	80 81       	ld	r24, Z
    3aca:	8c 7f       	andi	r24, 0xFC	; 252
    3acc:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
    3ace:	10 92 e2 00 	sts	0x00E2, r1
	#endif
}
    3ad2:	08 95       	ret

00003ad4 <USB_INT_ClearAllInterrupts>:

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
    3ad4:	10 92 da 00 	sts	0x00DA, r1
	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
    3ad8:	10 92 e1 00 	sts	0x00E1, r1
	#endif
}
    3adc:	08 95       	ret

00003ade <__vector_10>:

ISR(USB_GEN_vect, ISR_BLOCK)
{
    3ade:	1f 92       	push	r1
    3ae0:	0f 92       	push	r0
    3ae2:	0f b6       	in	r0, 0x3f	; 63
    3ae4:	0f 92       	push	r0
    3ae6:	0b b6       	in	r0, 0x3b	; 59
    3ae8:	0f 92       	push	r0
    3aea:	11 24       	eor	r1, r1
    3aec:	2f 93       	push	r18
    3aee:	3f 93       	push	r19
    3af0:	4f 93       	push	r20
    3af2:	5f 93       	push	r21
    3af4:	6f 93       	push	r22
    3af6:	7f 93       	push	r23
    3af8:	8f 93       	push	r24
    3afa:	9f 93       	push	r25
    3afc:	af 93       	push	r26
    3afe:	bf 93       	push	r27
    3b00:	ef 93       	push	r30
    3b02:	ff 93       	push	r31
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
					case USB_INT_SOFI:
						return (UDINT  & (1 << SOFI));
    3b04:	80 91 e1 00 	lds	r24, 0x00E1
	#if defined(USB_CAN_BE_DEVICE)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
    3b08:	82 ff       	sbrs	r24, 2
    3b0a:	0a c0       	rjmp	.+20     	; 0x3b20 <__vector_10+0x42>
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
					case USB_INT_SOFI:
						return (UDIEN  & (1 << SOFE));
    3b0c:	80 91 e2 00 	lds	r24, 0x00E2
    3b10:	82 ff       	sbrs	r24, 2
    3b12:	06 c0       	rjmp	.+12     	; 0x3b20 <__vector_10+0x42>
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
						break;
					case USB_INT_SOFI:
						UDINT  &= ~(1 << SOFI);
    3b14:	80 91 e1 00 	lds	r24, 0x00E1
    3b18:	8b 7f       	andi	r24, 0xFB	; 251
    3b1a:	80 93 e1 00 	sts	0x00E1, r24
	{
		USB_INT_Clear(USB_INT_SOFI);

		EVENT_USB_Device_StartOfFrame();
    3b1e:	4f d2       	rcall	.+1182   	; 0x3fbe <USB_Event_Stub>
    3b20:	80 91 da 00 	lds	r24, 0x00DA
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBINT & (1 << VBUSTI));
    3b24:	80 ff       	sbrs	r24, 0
	}
	#endif

	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	if (USB_INT_HasOccurred(USB_INT_VBUSTI) && USB_INT_IsEnabled(USB_INT_VBUSTI))
    3b26:	1d c0       	rjmp	.+58     	; 0x3b62 <__vector_10+0x84>
    3b28:	80 91 d8 00 	lds	r24, 0x00D8
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBCON & (1 << VBUSTE));
    3b2c:	80 ff       	sbrs	r24, 0
    3b2e:	19 c0       	rjmp	.+50     	; 0x3b62 <__vector_10+0x84>
    3b30:	80 91 da 00 	lds	r24, 0x00DA
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBINT &= ~(1 << VBUSTI);
    3b34:	8e 7f       	andi	r24, 0xFE	; 254
    3b36:	80 93 da 00 	sts	0x00DA, r24
    3b3a:	80 91 d9 00 	lds	r24, 0x00D9
				 *  \return Boolean \c true if the VBUS line is currently detecting power from a host, \c false otherwise.
				 */
				static inline bool USB_VBUS_GetStatus(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
				static inline bool USB_VBUS_GetStatus(void)
				{
					return ((USBSTA & (1 << VBUS)) ? true : false);
    3b3e:	80 ff       	sbrs	r24, 0
	{
		USB_INT_Clear(USB_INT_VBUSTI);

		if (USB_VBUS_GetStatus())
    3b40:	0c c0       	rjmp	.+24     	; 0x3b5a <__vector_10+0x7c>
    3b42:	8c e0       	ldi	r24, 0x0C	; 12

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
    3b44:	89 bd       	out	0x29, r24	; 41
    3b46:	8e e0       	ldi	r24, 0x0E	; 14
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    3b48:	89 bd       	out	0x29, r24	; 41
    3b4a:	09 b4       	in	r0, 0x29	; 41
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			{
				USB_PLL_On();
				while (!(USB_PLL_IsReady()));
    3b4c:	00 fe       	sbrs	r0, 0
    3b4e:	fd cf       	rjmp	.-6      	; 0x3b4a <__vector_10+0x6c>
    3b50:	81 e0       	ldi	r24, 0x01	; 1
			}

			USB_DeviceState = DEVICE_STATE_Powered;
    3b52:	8e bb       	out	0x1e, r24	; 30
    3b54:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <EVENT_USB_Device_Connect>
			EVENT_USB_Device_Connect();
    3b58:	04 c0       	rjmp	.+8      	; 0x3b62 <__vector_10+0x84>
    3b5a:	19 bc       	out	0x29, r1	; 41
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    3b5c:	1e ba       	out	0x1e, r1	; 30
		else
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			  USB_PLL_Off();

			USB_DeviceState = DEVICE_STATE_Unattached;
    3b5e:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <EVENT_USB_Device_Disconnect>
			EVENT_USB_Device_Disconnect();
    3b62:	80 91 e1 00 	lds	r24, 0x00E1
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
    3b66:	80 ff       	sbrs	r24, 0
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
    3b68:	17 c0       	rjmp	.+46     	; 0x3b98 <__vector_10+0xba>
    3b6a:	80 91 e2 00 	lds	r24, 0x00E2
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
    3b6e:	80 ff       	sbrs	r24, 0
    3b70:	13 c0       	rjmp	.+38     	; 0x3b98 <__vector_10+0xba>
    3b72:	80 91 e2 00 	lds	r24, 0x00E2
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
    3b76:	8e 7f       	andi	r24, 0xFE	; 254
    3b78:	80 93 e2 00 	sts	0x00E2, r24
    3b7c:	80 91 e2 00 	lds	r24, 0x00E2
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
    3b80:	80 61       	ori	r24, 0x10	; 16
    3b82:	80 93 e2 00 	sts	0x00E2, r24
    3b86:	80 91 d8 00 	lds	r24, 0x00D8
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON |=  (1 << FRZCLK);
    3b8a:	80 62       	ori	r24, 0x20	; 32
    3b8c:	80 93 d8 00 	sts	0x00D8, r24
    3b90:	19 bc       	out	0x29, r1	; 41
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    3b92:	85 e0       	ldi	r24, 0x05	; 5

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
		EVENT_USB_Device_Disconnect();
		#else
		USB_DeviceState = DEVICE_STATE_Suspended;
    3b94:	8e bb       	out	0x1e, r24	; 30
    3b96:	13 d2       	rcall	.+1062   	; 0x3fbe <USB_Event_Stub>
		EVENT_USB_Device_Suspend();
    3b98:	80 91 e1 00 	lds	r24, 0x00E1
					case USB_INT_IDTI:
						return (USBINT & (1 << IDTI));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
    3b9c:	84 ff       	sbrs	r24, 4
    3b9e:	2c c0       	rjmp	.+88     	; 0x3bf8 <__vector_10+0x11a>
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
    3ba0:	80 91 e2 00 	lds	r24, 0x00E2
					case USB_INT_IDTI:
						return (USBCON & (1 << IDTE));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
    3ba4:	84 ff       	sbrs	r24, 4
    3ba6:	28 c0       	rjmp	.+80     	; 0x3bf8 <__vector_10+0x11a>
    3ba8:	8c e0       	ldi	r24, 0x0C	; 12
    3baa:	89 bd       	out	0x29, r24	; 41

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
    3bac:	8e e0       	ldi	r24, 0x0E	; 14
    3bae:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    3bb0:	09 b4       	in	r0, 0x29	; 41
    3bb2:	00 fe       	sbrs	r0, 0
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
    3bb4:	fd cf       	rjmp	.-6      	; 0x3bb0 <__vector_10+0xd2>
    3bb6:	80 91 d8 00 	lds	r24, 0x00D8
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
    3bba:	8f 7d       	andi	r24, 0xDF	; 223
    3bbc:	80 93 d8 00 	sts	0x00D8, r24
    3bc0:	80 91 e1 00 	lds	r24, 0x00E1
						USBINT &= ~(1 << IDTI);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
    3bc4:	8f 7e       	andi	r24, 0xEF	; 239
    3bc6:	80 93 e1 00 	sts	0x00E1, r24
    3bca:	80 91 e2 00 	lds	r24, 0x00E2
						USBCON &= ~(1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
    3bce:	8f 7e       	andi	r24, 0xEF	; 239
    3bd0:	80 93 e2 00 	sts	0x00E2, r24
    3bd4:	80 91 e2 00 	lds	r24, 0x00E2
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
    3bd8:	81 60       	ori	r24, 0x01	; 1
    3bda:	80 93 e2 00 	sts	0x00E2, r24
    3bde:	80 91 3a 04 	lds	r24, 0x043A
		USB_INT_Clear(USB_INT_WAKEUPI);

		USB_INT_Disable(USB_INT_WAKEUPI);
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_Device_ConfigurationNumber)
    3be2:	88 23       	and	r24, r24
    3be4:	21 f4       	brne	.+8      	; 0x3bee <__vector_10+0x110>
    3be6:	80 91 e3 00 	lds	r24, 0x00E3
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
    3bea:	87 ff       	sbrs	r24, 7
    3bec:	02 c0       	rjmp	.+4      	; 0x3bf2 <__vector_10+0x114>
		  USB_DeviceState = DEVICE_STATE_Configured;
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
    3bee:	84 e0       	ldi	r24, 0x04	; 4
    3bf0:	01 c0       	rjmp	.+2      	; 0x3bf4 <__vector_10+0x116>
    3bf2:	81 e0       	ldi	r24, 0x01	; 1
    3bf4:	8e bb       	out	0x1e, r24	; 30
    3bf6:	e3 d1       	rcall	.+966    	; 0x3fbe <USB_Event_Stub>
    3bf8:	80 91 e1 00 	lds	r24, 0x00E1

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
		#else
		EVENT_USB_Device_WakeUp();
    3bfc:	83 ff       	sbrs	r24, 3
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
    3bfe:	26 c0       	rjmp	.+76     	; 0x3c4c <__vector_10+0x16e>
    3c00:	80 91 e2 00 	lds	r24, 0x00E2
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
    3c04:	83 ff       	sbrs	r24, 3
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
    3c06:	22 c0       	rjmp	.+68     	; 0x3c4c <__vector_10+0x16e>
    3c08:	80 91 e1 00 	lds	r24, 0x00E1
    3c0c:	87 7f       	andi	r24, 0xF7	; 247
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
    3c0e:	80 93 e1 00 	sts	0x00E1, r24
    3c12:	82 e0       	ldi	r24, 0x02	; 2
    3c14:	8e bb       	out	0x1e, r24	; 30
    3c16:	10 92 3a 04 	sts	0x043A, r1
	{
		USB_INT_Clear(USB_INT_EORSTI);

		USB_DeviceState                = DEVICE_STATE_Default;
    3c1a:	80 91 e1 00 	lds	r24, 0x00E1
		USB_Device_ConfigurationNumber = 0;
    3c1e:	8e 7f       	andi	r24, 0xFE	; 254
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
    3c20:	80 93 e1 00 	sts	0x00E1, r24
    3c24:	80 91 e2 00 	lds	r24, 0x00E2
    3c28:	8e 7f       	andi	r24, 0xFE	; 254
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
    3c2a:	80 93 e2 00 	sts	0x00E2, r24
    3c2e:	80 91 e2 00 	lds	r24, 0x00E2
    3c32:	80 61       	ori	r24, 0x10	; 16
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
    3c34:	80 93 e2 00 	sts	0x00E2, r24
    3c38:	80 e0       	ldi	r24, 0x00	; 0
    3c3a:	60 e0       	ldi	r22, 0x00	; 0
    3c3c:	42 e0       	ldi	r20, 0x02	; 2
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
    3c3e:	2e de       	rcall	.-932    	; 0x389c <Endpoint_ConfigureEndpoint_Prv>
    3c40:	80 91 f0 00 	lds	r24, 0x00F0
    3c44:	88 60       	ori	r24, 0x08	; 8
    3c46:	80 93 f0 00 	sts	0x00F0, r24
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX |= (1 << RXSTPE);
    3c4a:	b9 d1       	rcall	.+882    	; 0x3fbe <USB_Event_Stub>
    3c4c:	ff 91       	pop	r31
    3c4e:	ef 91       	pop	r30
    3c50:	bf 91       	pop	r27

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
    3c52:	af 91       	pop	r26
    3c54:	9f 91       	pop	r25
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
    3c56:	8f 91       	pop	r24
    3c58:	7f 91       	pop	r23
    3c5a:	6f 91       	pop	r22
    3c5c:	5f 91       	pop	r21
    3c5e:	4f 91       	pop	r20
    3c60:	3f 91       	pop	r19
    3c62:	2f 91       	pop	r18
    3c64:	0f 90       	pop	r0
    3c66:	0b be       	out	0x3b, r0	; 59
    3c68:	0f 90       	pop	r0
    3c6a:	0f be       	out	0x3f, r0	; 63
    3c6c:	0f 90       	pop	r0
    3c6e:	1f 90       	pop	r1
    3c70:	18 95       	reti

00003c72 <__vector_11>:
    3c72:	1f 92       	push	r1
    3c74:	0f 92       	push	r0
    3c76:	0f b6       	in	r0, 0x3f	; 63
    3c78:	0f 92       	push	r0
    3c7a:	0b b6       	in	r0, 0x3b	; 59

#if defined(INTERRUPT_CONTROL_ENDPOINT) && defined(USB_CAN_BE_DEVICE)
ISR(USB_COM_vect, ISR_BLOCK)
{
    3c7c:	0f 92       	push	r0
    3c7e:	11 24       	eor	r1, r1
    3c80:	2f 93       	push	r18
    3c82:	3f 93       	push	r19
    3c84:	4f 93       	push	r20
    3c86:	5f 93       	push	r21
    3c88:	6f 93       	push	r22
    3c8a:	7f 93       	push	r23
    3c8c:	8f 93       	push	r24
    3c8e:	9f 93       	push	r25
    3c90:	af 93       	push	r26
    3c92:	bf 93       	push	r27
    3c94:	cf 93       	push	r28
    3c96:	ef 93       	push	r30
    3c98:	ff 93       	push	r31
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    3c9a:	c0 91 e9 00 	lds	r28, 0x00E9
    3c9e:	cf 70       	andi	r28, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    3ca0:	80 91 ec 00 	lds	r24, 0x00EC
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    3ca4:	10 92 e9 00 	sts	0x00E9, r1
						break;
					case USB_INT_SOFI:
						UDIEN  &= ~(1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX &= ~(1 << RXSTPE);
    3ca8:	80 91 f0 00 	lds	r24, 0x00F0
    3cac:	87 7f       	andi	r24, 0xF7	; 247
    3cae:	80 93 f0 00 	sts	0x00F0, r24
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				sei();
    3cb2:	78 94       	sei
	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Disable(USB_INT_RXSTPI);

	GlobalInterruptEnable();

	USB_Device_ProcessControlRequest();
    3cb4:	1d d0       	rcall	.+58     	; 0x3cf0 <USB_Device_ProcessControlRequest>
    3cb6:	10 92 e9 00 	sts	0x00E9, r1
    3cba:	80 91 f0 00 	lds	r24, 0x00F0
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX |= (1 << RXSTPE);
    3cbe:	88 60       	ori	r24, 0x08	; 8
    3cc0:	80 93 f0 00 	sts	0x00F0, r24
    3cc4:	c0 93 e9 00 	sts	0x00E9, r28
    3cc8:	ff 91       	pop	r31

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Enable(USB_INT_RXSTPI);
	Endpoint_SelectEndpoint(PrevSelectedEndpoint);
}
    3cca:	ef 91       	pop	r30
    3ccc:	cf 91       	pop	r28
    3cce:	bf 91       	pop	r27
    3cd0:	af 91       	pop	r26
    3cd2:	9f 91       	pop	r25
    3cd4:	8f 91       	pop	r24
    3cd6:	7f 91       	pop	r23
    3cd8:	6f 91       	pop	r22
    3cda:	5f 91       	pop	r21
    3cdc:	4f 91       	pop	r20
    3cde:	3f 91       	pop	r19
    3ce0:	2f 91       	pop	r18
    3ce2:	0f 90       	pop	r0
    3ce4:	0b be       	out	0x3b, r0	; 59
    3ce6:	0f 90       	pop	r0
    3ce8:	0f be       	out	0x3f, r0	; 63
    3cea:	0f 90       	pop	r0
    3cec:	1f 90       	pop	r1
    3cee:	18 95       	reti

00003cf0 <USB_Device_ProcessControlRequest>:
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_Device_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
    3cf0:	1f 93       	push	r17
    3cf2:	cf 93       	push	r28
    3cf4:	df 93       	push	r29
    3cf6:	cd b7       	in	r28, 0x3d	; 61
    3cf8:	de b7       	in	r29, 0x3e	; 62
    3cfa:	ac 97       	sbiw	r28, 0x2c	; 44
    3cfc:	0f b6       	in	r0, 0x3f	; 63
    3cfe:	f8 94       	cli
    3d00:	de bf       	out	0x3e, r29	; 62
    3d02:	0f be       	out	0x3f, r0	; 63
    3d04:	cd bf       	out	0x3d, r28	; 61
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
    3d06:	80 e0       	ldi	r24, 0x00	; 0
	USB_ControlRequest.bRequest      = Endpoint_Read_8();
	USB_ControlRequest.wValue        = Endpoint_Read_16_LE();
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;
    3d08:	ee e3       	ldi	r30, 0x3E	; 62
    3d0a:	f4 e0       	ldi	r31, 0x04	; 4
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    3d0c:	90 91 f1 00 	lds	r25, 0x00F1

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_8();
    3d10:	91 93       	st	Z+, r25
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
    3d12:	8f 5f       	subi	r24, 0xFF	; 255
    3d14:	88 30       	cpi	r24, 0x08	; 8
    3d16:	d1 f7       	brne	.-12     	; 0x3d0c <USB_Device_ProcessControlRequest+0x1c>
	  *(RequestHeader++) = Endpoint_Read_8();
	#endif

	EVENT_USB_Device_ControlRequest();
    3d18:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <EVENT_USB_Device_ControlRequest>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    3d1c:	80 91 e8 00 	lds	r24, 0x00E8

	if (Endpoint_IsSETUPReceived())
    3d20:	83 ff       	sbrs	r24, 3
    3d22:	35 c1       	rjmp	.+618    	; 0x3f8e <USB_Device_ProcessControlRequest+0x29e>
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
    3d24:	80 91 3e 04 	lds	r24, 0x043E

		switch (USB_ControlRequest.bRequest)
    3d28:	20 91 3f 04 	lds	r18, 0x043F
    3d2c:	25 30       	cpi	r18, 0x05	; 5
    3d2e:	09 f4       	brne	.+2      	; 0x3d32 <USB_Device_ProcessControlRequest+0x42>
    3d30:	84 c0       	rjmp	.+264    	; 0x3e3a <USB_Device_ProcessControlRequest+0x14a>
    3d32:	26 30       	cpi	r18, 0x06	; 6
    3d34:	40 f4       	brcc	.+16     	; 0x3d46 <USB_Device_ProcessControlRequest+0x56>
    3d36:	21 30       	cpi	r18, 0x01	; 1
    3d38:	a1 f1       	breq	.+104    	; 0x3da2 <USB_Device_ProcessControlRequest+0xb2>
    3d3a:	21 30       	cpi	r18, 0x01	; 1
    3d3c:	70 f0       	brcs	.+28     	; 0x3d5a <USB_Device_ProcessControlRequest+0x6a>
    3d3e:	23 30       	cpi	r18, 0x03	; 3
    3d40:	09 f0       	breq	.+2      	; 0x3d44 <USB_Device_ProcessControlRequest+0x54>
    3d42:	25 c1       	rjmp	.+586    	; 0x3f8e <USB_Device_ProcessControlRequest+0x29e>
    3d44:	2e c0       	rjmp	.+92     	; 0x3da2 <USB_Device_ProcessControlRequest+0xb2>
    3d46:	28 30       	cpi	r18, 0x08	; 8
    3d48:	09 f4       	brne	.+2      	; 0x3d4c <USB_Device_ProcessControlRequest+0x5c>
    3d4a:	f3 c0       	rjmp	.+486    	; 0x3f32 <USB_Device_ProcessControlRequest+0x242>
    3d4c:	29 30       	cpi	r18, 0x09	; 9
    3d4e:	09 f4       	brne	.+2      	; 0x3d52 <USB_Device_ProcessControlRequest+0x62>
    3d50:	02 c1       	rjmp	.+516    	; 0x3f56 <USB_Device_ProcessControlRequest+0x266>
    3d52:	26 30       	cpi	r18, 0x06	; 6
    3d54:	09 f0       	breq	.+2      	; 0x3d58 <USB_Device_ProcessControlRequest+0x68>
    3d56:	1b c1       	rjmp	.+566    	; 0x3f8e <USB_Device_ProcessControlRequest+0x29e>
    3d58:	92 c0       	rjmp	.+292    	; 0x3e7e <USB_Device_ProcessControlRequest+0x18e>
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    3d5a:	80 38       	cpi	r24, 0x80	; 128
    3d5c:	21 f0       	breq	.+8      	; 0x3d66 <USB_Device_ProcessControlRequest+0x76>
    3d5e:	82 38       	cpi	r24, 0x82	; 130
    3d60:	09 f0       	breq	.+2      	; 0x3d64 <USB_Device_ProcessControlRequest+0x74>
    3d62:	15 c1       	rjmp	.+554    	; 0x3f8e <USB_Device_ProcessControlRequest+0x29e>
    3d64:	08 c0       	rjmp	.+16     	; 0x3d76 <USB_Device_ProcessControlRequest+0x86>
	Endpoint_ClearOUT();
}

static void USB_Device_GetStatus(void)
{
	uint8_t CurrentStatus = 0;
    3d66:	80 91 3b 04 	lds	r24, 0x043B
			if (USB_Device_CurrentlySelfPowered)
			  CurrentStatus |= FEATURE_SELFPOWERED_ENABLED;
			#endif

			#if !defined(NO_DEVICE_REMOTE_WAKEUP)
			if (USB_Device_RemoteWakeupEnabled)
    3d6a:	90 91 3c 04 	lds	r25, 0x043C
    3d6e:	99 23       	and	r25, r25
    3d70:	71 f0       	breq	.+28     	; 0x3d8e <USB_Device_ProcessControlRequest+0x9e>
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
    3d72:	82 60       	ori	r24, 0x02	; 2
    3d74:	0c c0       	rjmp	.+24     	; 0x3d8e <USB_Device_ProcessControlRequest+0x9e>
			#endif
			break;
		case (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_ENDPOINT):
			#if !defined(CONTROL_ONLY_DEVICE)
			Endpoint_SelectEndpoint((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
    3d76:	80 91 42 04 	lds	r24, 0x0442
    3d7a:	8f 70       	andi	r24, 0x0F	; 15
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    3d7c:	80 93 e9 00 	sts	0x00E9, r24
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    3d80:	90 91 eb 00 	lds	r25, 0x00EB

			CurrentStatus = Endpoint_IsStalled();
    3d84:	81 e0       	ldi	r24, 0x01	; 1
    3d86:	95 ff       	sbrs	r25, 5
    3d88:	80 e0       	ldi	r24, 0x00	; 0
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    3d8a:	10 92 e9 00 	sts	0x00E9, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    3d8e:	90 91 e8 00 	lds	r25, 0x00E8
    3d92:	97 7f       	andi	r25, 0xF7	; 247
    3d94:	90 93 e8 00 	sts	0x00E8, r25
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
    3d98:	80 93 f1 00 	sts	0x00F1, r24
				UEDATX = (Data >> 8);
    3d9c:	10 92 f1 00 	sts	0x00F1, r1
    3da0:	d3 c0       	rjmp	.+422    	; 0x3f48 <USB_Device_ProcessControlRequest+0x258>
				}

				break;
			case REQ_ClearFeature:
			case REQ_SetFeature:
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    3da2:	88 23       	and	r24, r24
    3da4:	19 f0       	breq	.+6      	; 0x3dac <USB_Device_ProcessControlRequest+0xbc>
    3da6:	82 30       	cpi	r24, 0x02	; 2
    3da8:	09 f0       	breq	.+2      	; 0x3dac <USB_Device_ProcessControlRequest+0xbc>
    3daa:	f1 c0       	rjmp	.+482    	; 0x3f8e <USB_Device_ProcessControlRequest+0x29e>
	Endpoint_ClearStatusStage();
}

static void USB_Device_ClearSetFeature(void)
{
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
    3dac:	90 e0       	ldi	r25, 0x00	; 0
    3dae:	8f 71       	andi	r24, 0x1F	; 31
    3db0:	90 70       	andi	r25, 0x00	; 0
    3db2:	00 97       	sbiw	r24, 0x00	; 0
    3db4:	29 f0       	breq	.+10     	; 0x3dc0 <USB_Device_ProcessControlRequest+0xd0>
    3db6:	82 30       	cpi	r24, 0x02	; 2
    3db8:	91 05       	cpc	r25, r1
    3dba:	09 f0       	breq	.+2      	; 0x3dbe <USB_Device_ProcessControlRequest+0xce>
    3dbc:	e8 c0       	rjmp	.+464    	; 0x3f8e <USB_Device_ProcessControlRequest+0x29e>
    3dbe:	0b c0       	rjmp	.+22     	; 0x3dd6 <USB_Device_ProcessControlRequest+0xe6>
	{
		#if !defined(NO_DEVICE_REMOTE_WAKEUP)
		case REQREC_DEVICE:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
    3dc0:	80 91 40 04 	lds	r24, 0x0440
    3dc4:	81 30       	cpi	r24, 0x01	; 1
    3dc6:	09 f0       	breq	.+2      	; 0x3dca <USB_Device_ProcessControlRequest+0xda>
    3dc8:	e2 c0       	rjmp	.+452    	; 0x3f8e <USB_Device_ProcessControlRequest+0x29e>
			  USB_Device_RemoteWakeupEnabled = (USB_ControlRequest.bRequest == REQ_SetFeature);
    3dca:	23 30       	cpi	r18, 0x03	; 3
    3dcc:	09 f0       	breq	.+2      	; 0x3dd0 <USB_Device_ProcessControlRequest+0xe0>
    3dce:	80 e0       	ldi	r24, 0x00	; 0
    3dd0:	80 93 3c 04 	sts	0x043C, r24
    3dd4:	2c c0       	rjmp	.+88     	; 0x3e2e <USB_Device_ProcessControlRequest+0x13e>

			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
    3dd6:	80 91 40 04 	lds	r24, 0x0440
    3dda:	88 23       	and	r24, r24
    3ddc:	41 f5       	brne	.+80     	; 0x3e2e <USB_Device_ProcessControlRequest+0x13e>
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
    3dde:	20 91 42 04 	lds	r18, 0x0442
    3de2:	2f 70       	andi	r18, 0x0F	; 15

				if (EndpointIndex == ENDPOINT_CONTROLEP)
    3de4:	09 f4       	brne	.+2      	; 0x3de8 <USB_Device_ProcessControlRequest+0xf8>
    3de6:	d3 c0       	rjmp	.+422    	; 0x3f8e <USB_Device_ProcessControlRequest+0x29e>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    3de8:	20 93 e9 00 	sts	0x00E9, r18
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
    3dec:	80 91 eb 00 	lds	r24, 0x00EB
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
    3df0:	80 ff       	sbrs	r24, 0
    3df2:	1d c0       	rjmp	.+58     	; 0x3e2e <USB_Device_ProcessControlRequest+0x13e>
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
    3df4:	80 91 3f 04 	lds	r24, 0x043F
    3df8:	83 30       	cpi	r24, 0x03	; 3
    3dfa:	21 f4       	brne	.+8      	; 0x3e04 <USB_Device_ProcessControlRequest+0x114>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    3dfc:	80 91 eb 00 	lds	r24, 0x00EB
    3e00:	80 62       	ori	r24, 0x20	; 32
    3e02:	13 c0       	rjmp	.+38     	; 0x3e2a <USB_Device_ProcessControlRequest+0x13a>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
    3e04:	80 91 eb 00 	lds	r24, 0x00EB
    3e08:	80 61       	ori	r24, 0x10	; 16
    3e0a:	80 93 eb 00 	sts	0x00EB, r24
			 *  \param[in] Address  Endpoint address whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t Address)
			{
				UERST = (1 << (Address & ENDPOINT_EPNUM_MASK));
    3e0e:	81 e0       	ldi	r24, 0x01	; 1
    3e10:	90 e0       	ldi	r25, 0x00	; 0
    3e12:	02 c0       	rjmp	.+4      	; 0x3e18 <USB_Device_ProcessControlRequest+0x128>
    3e14:	88 0f       	add	r24, r24
    3e16:	99 1f       	adc	r25, r25
    3e18:	2a 95       	dec	r18
    3e1a:	e2 f7       	brpl	.-8      	; 0x3e14 <USB_Device_ProcessControlRequest+0x124>
    3e1c:	80 93 ea 00 	sts	0x00EA, r24
				UERST = 0;
    3e20:	10 92 ea 00 	sts	0x00EA, r1

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
    3e24:	80 91 eb 00 	lds	r24, 0x00EB
    3e28:	88 60       	ori	r24, 0x08	; 8
    3e2a:	80 93 eb 00 	sts	0x00EB, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    3e2e:	10 92 e9 00 	sts	0x00E9, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    3e32:	80 91 e8 00 	lds	r24, 0x00E8
    3e36:	87 7f       	andi	r24, 0xF7	; 247
    3e38:	8a c0       	rjmp	.+276    	; 0x3f4e <USB_Device_ProcessControlRequest+0x25e>
					USB_Device_ClearSetFeature();
				}

				break;
			case REQ_SetAddress:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    3e3a:	88 23       	and	r24, r24
    3e3c:	09 f0       	breq	.+2      	; 0x3e40 <USB_Device_ProcessControlRequest+0x150>
    3e3e:	a7 c0       	rjmp	.+334    	; 0x3f8e <USB_Device_ProcessControlRequest+0x29e>
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t DeviceAddress = (USB_ControlRequest.wValue & 0x7F);
    3e40:	10 91 40 04 	lds	r17, 0x0440
    3e44:	1f 77       	andi	r17, 0x7F	; 127
			#endif

			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				UDADDR = (UDADDR & (1 << ADDEN)) | (Address & 0x7F);
    3e46:	80 91 e3 00 	lds	r24, 0x00E3
    3e4a:	80 78       	andi	r24, 0x80	; 128
    3e4c:	81 2b       	or	r24, r17
    3e4e:	80 93 e3 00 	sts	0x00E3, r24
    3e52:	80 91 e8 00 	lds	r24, 0x00E8
    3e56:	87 7f       	andi	r24, 0xF7	; 247
    3e58:	80 93 e8 00 	sts	0x00E8, r24

	USB_Device_SetDeviceAddress(DeviceAddress);

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
    3e5c:	90 dd       	rcall	.-1248   	; 0x397e <Endpoint_ClearStatusStage>
    3e5e:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    3e62:	80 ff       	sbrs	r24, 0

	while (!(Endpoint_IsINReady()));
    3e64:	fc cf       	rjmp	.-8      	; 0x3e5e <USB_Device_ProcessControlRequest+0x16e>
    3e66:	80 91 e3 00 	lds	r24, 0x00E3
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address)
			{
				(void)Address;
				
				UDADDR |= (1 << ADDEN);
    3e6a:	80 68       	ori	r24, 0x80	; 128
    3e6c:	80 93 e3 00 	sts	0x00E3, r24
    3e70:	11 23       	and	r17, r17

	USB_Device_EnableDeviceAddress(DeviceAddress);

	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
    3e72:	11 f0       	breq	.+4      	; 0x3e78 <USB_Device_ProcessControlRequest+0x188>
    3e74:	83 e0       	ldi	r24, 0x03	; 3
    3e76:	01 c0       	rjmp	.+2      	; 0x3e7a <USB_Device_ProcessControlRequest+0x18a>
    3e78:	82 e0       	ldi	r24, 0x02	; 2
    3e7a:	8e bb       	out	0x1e, r24	; 30
    3e7c:	88 c0       	rjmp	.+272    	; 0x3f8e <USB_Device_ProcessControlRequest+0x29e>
    3e7e:	80 58       	subi	r24, 0x80	; 128
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_SetAddress();

				break;
			case REQ_GetDescriptor:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    3e80:	82 30       	cpi	r24, 0x02	; 2
    3e82:	08 f0       	brcs	.+2      	; 0x3e86 <USB_Device_ProcessControlRequest+0x196>
    3e84:	84 c0       	rjmp	.+264    	; 0x3f8e <USB_Device_ProcessControlRequest+0x29e>
    3e86:	80 91 40 04 	lds	r24, 0x0440
	    !(defined(USE_FLASH_DESCRIPTORS) || defined(USE_EEPROM_DESCRIPTORS) || defined(USE_RAM_DESCRIPTORS))
	uint8_t DescriptorAddressSpace;
	#endif

	#if !defined(NO_INTERNAL_SERIAL) && (USE_INTERNAL_SERIAL != NO_DESCRIPTOR)
	if (USB_ControlRequest.wValue == ((DTYPE_String << 8) | USE_INTERNAL_SERIAL))
    3e8a:	90 91 41 04 	lds	r25, 0x0441
    3e8e:	23 e0       	ldi	r18, 0x03	; 3
    3e90:	8c 3d       	cpi	r24, 0xDC	; 220
    3e92:	92 07       	cpc	r25, r18
    3e94:	a9 f5       	brne	.+106    	; 0x3f00 <USB_Device_ProcessControlRequest+0x210>
    3e96:	83 e0       	ldi	r24, 0x03	; 3
	{
		USB_Descriptor_Header_t Header;
		uint16_t                UnicodeString[INTERNAL_SERIAL_LENGTH_BITS / 4];
	} SignatureDescriptor;

	SignatureDescriptor.Header.Type = DTYPE_String;
    3e98:	8c 83       	std	Y+4, r24	; 0x04
    3e9a:	8a e2       	ldi	r24, 0x2A	; 42
	SignatureDescriptor.Header.Size = USB_STRING_LEN(INTERNAL_SERIAL_LENGTH_BITS / 4);
    3e9c:	8b 83       	std	Y+3, r24	; 0x03
    3e9e:	5f b7       	in	r21, 0x3f	; 63
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
    3ea0:	f8 94       	cli
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
    3ea2:	de 01       	movw	r26, r28
				__builtin_ssrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				cli();
				#endif

				GCC_MEMORY_BARRIER();
    3ea4:	13 96       	adiw	r26, 0x03	; 3
    3ea6:	80 e0       	ldi	r24, 0x00	; 0
    3ea8:	90 e0       	ldi	r25, 0x00	; 0
    3eaa:	4e e0       	ldi	r20, 0x0E	; 14
			static inline void USB_Device_GetSerialString(uint16_t* const UnicodeString)
			{
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;
    3eac:	61 e2       	ldi	r22, 0x21	; 33

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
				{
					uint8_t SerialByte = boot_signature_byte_get(SigReadAddress);
    3eae:	e4 2f       	mov	r30, r20
    3eb0:	f0 e0       	ldi	r31, 0x00	; 0
    3eb2:	60 93 57 00 	sts	0x0057, r22
    3eb6:	e4 91       	lpm	r30, Z
    3eb8:	80 ff       	sbrs	r24, 0

					if (SerialCharNum & 0x01)
    3eba:	03 c0       	rjmp	.+6      	; 0x3ec2 <USB_Device_ProcessControlRequest+0x1d2>
    3ebc:	e2 95       	swap	r30
					{
						SerialByte >>= 4;
    3ebe:	ef 70       	andi	r30, 0x0F	; 15
    3ec0:	4f 5f       	subi	r20, 0xFF	; 255
						SigReadAddress++;
    3ec2:	ef 70       	andi	r30, 0x0F	; 15
					}

					SerialByte &= 0x0F;
    3ec4:	2e 2f       	mov	r18, r30
    3ec6:	30 e0       	ldi	r19, 0x00	; 0
    3ec8:	ea 30       	cpi	r30, 0x0A	; 10

					UnicodeString[SerialCharNum] = cpu_to_le16((SerialByte >= 10) ?
    3eca:	18 f0       	brcs	.+6      	; 0x3ed2 <USB_Device_ProcessControlRequest+0x1e2>
    3ecc:	29 5c       	subi	r18, 0xC9	; 201
    3ece:	3f 4f       	sbci	r19, 0xFF	; 255
    3ed0:	02 c0       	rjmp	.+4      	; 0x3ed6 <USB_Device_ProcessControlRequest+0x1e6>
    3ed2:	20 5d       	subi	r18, 0xD0	; 208
    3ed4:	3f 4f       	sbci	r19, 0xFF	; 255
    3ed6:	13 96       	adiw	r26, 0x03	; 3
    3ed8:	3c 93       	st	X, r19
    3eda:	2e 93       	st	-X, r18
    3edc:	12 97       	sbiw	r26, 0x02	; 2
    3ede:	01 96       	adiw	r24, 0x01	; 1
    3ee0:	12 96       	adiw	r26, 0x02	; 2
    3ee2:	84 31       	cpi	r24, 0x14	; 20
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
    3ee4:	91 05       	cpc	r25, r1
    3ee6:	19 f7       	brne	.-58     	; 0x3eae <USB_Device_ProcessControlRequest+0x1be>
    3ee8:	5f bf       	out	0x3f, r21	; 63
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
    3eea:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    3eee:	87 7f       	andi	r24, 0xF7	; 247
    3ef0:	80 93 e8 00 	sts	0x00E8, r24
    3ef4:	ce 01       	movw	r24, r28

	USB_Device_GetSerialString(SignatureDescriptor.UnicodeString);

	Endpoint_ClearSETUP();

	Endpoint_Write_Control_Stream_LE(&SignatureDescriptor, sizeof(SignatureDescriptor));
    3ef6:	03 96       	adiw	r24, 0x03	; 3
    3ef8:	6a e2       	ldi	r22, 0x2A	; 42
    3efa:	70 e0       	ldi	r23, 0x00	; 0
    3efc:	d4 db       	rcall	.-2136   	; 0x36a6 <Endpoint_Write_Control_Stream_LE>
    3efe:	13 c0       	rjmp	.+38     	; 0x3f26 <USB_Device_ProcessControlRequest+0x236>
    3f00:	60 91 42 04 	lds	r22, 0x0442
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif

	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
    3f04:	ae 01       	movw	r20, r28
    3f06:	4f 5f       	subi	r20, 0xFF	; 255
    3f08:	5f 4f       	sbci	r21, 0xFF	; 255
    3f0a:	0e 94 36 03 	call	0x66c	; 0x66c <CALLBACK_USB_GetDescriptor>
    3f0e:	bc 01       	movw	r22, r24
    3f10:	00 97       	sbiw	r24, 0x00	; 0
    3f12:	09 f4       	brne	.+2      	; 0x3f16 <USB_Device_ProcessControlRequest+0x226>
    3f14:	3c c0       	rjmp	.+120    	; 0x3f8e <USB_Device_ProcessControlRequest+0x29e>
    3f16:	80 91 e8 00 	lds	r24, 0x00E8
    3f1a:	87 7f       	andi	r24, 0xF7	; 247
    3f1c:	80 93 e8 00 	sts	0x00E8, r24
    3f20:	89 81       	ldd	r24, Y+1	; 0x01
    3f22:	9a 81       	ldd	r25, Y+2	; 0x02
	#if defined(USE_RAM_DESCRIPTORS) || !defined(ARCH_HAS_MULTI_ADDRESS_SPACE)
	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_EEPROM_DESCRIPTORS)
	Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_FLASH_DESCRIPTORS)
	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
    3f24:	60 dc       	rcall	.-1856   	; 0x37e6 <Endpoint_Write_Control_PStream_LE>
    3f26:	80 91 e8 00 	lds	r24, 0x00E8
    3f2a:	8b 77       	andi	r24, 0x7B	; 123
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    3f2c:	80 93 e8 00 	sts	0x00E8, r24
    3f30:	2e c0       	rjmp	.+92     	; 0x3f8e <USB_Device_ProcessControlRequest+0x29e>
    3f32:	80 38       	cpi	r24, 0x80	; 128
    3f34:	61 f5       	brne	.+88     	; 0x3f8e <USB_Device_ProcessControlRequest+0x29e>
    3f36:	80 91 e8 00 	lds	r24, 0x00E8
					USB_Device_GetDescriptor();
				}

				break;
			case REQ_GetConfiguration:
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
    3f3a:	87 7f       	andi	r24, 0xF7	; 247
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    3f3c:	80 93 e8 00 	sts	0x00E8, r24
    3f40:	80 91 3a 04 	lds	r24, 0x043A
    3f44:	80 93 f1 00 	sts	0x00F1, r24

static void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();

	Endpoint_Write_8(USB_Device_ConfigurationNumber);
    3f48:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    3f4c:	8e 77       	andi	r24, 0x7E	; 126
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    3f4e:	80 93 e8 00 	sts	0x00E8, r24
    3f52:	15 dd       	rcall	.-1494   	; 0x397e <Endpoint_ClearStatusStage>
    3f54:	1c c0       	rjmp	.+56     	; 0x3f8e <USB_Device_ProcessControlRequest+0x29e>
    3f56:	88 23       	and	r24, r24
	Endpoint_ClearIN();

	Endpoint_ClearStatusStage();
    3f58:	d1 f4       	brne	.+52     	; 0x3f8e <USB_Device_ProcessControlRequest+0x29e>
    3f5a:	90 91 40 04 	lds	r25, 0x0440
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_GetConfiguration();

				break;
			case REQ_SetConfiguration:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    3f5e:	92 30       	cpi	r25, 0x02	; 2
    3f60:	b0 f4       	brcc	.+44     	; 0x3f8e <USB_Device_ProcessControlRequest+0x29e>
}

static void USB_Device_SetConfiguration(void)
{
	#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
    3f62:	80 91 e8 00 	lds	r24, 0x00E8
    3f66:	87 7f       	andi	r24, 0xF7	; 247
    3f68:	80 93 e8 00 	sts	0x00E8, r24
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    3f6c:	90 93 3a 04 	sts	0x043A, r25
    3f70:	06 dd       	rcall	.-1524   	; 0x397e <Endpoint_ClearStatusStage>
    3f72:	80 91 3a 04 	lds	r24, 0x043A
	#endif
	#endif

	Endpoint_ClearSETUP();

	USB_Device_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
    3f76:	88 23       	and	r24, r24

	Endpoint_ClearStatusStage();
    3f78:	21 f4       	brne	.+8      	; 0x3f82 <USB_Device_ProcessControlRequest+0x292>
    3f7a:	80 91 e3 00 	lds	r24, 0x00E3

	if (USB_Device_ConfigurationNumber)
    3f7e:	87 ff       	sbrs	r24, 7
    3f80:	02 c0       	rjmp	.+4      	; 0x3f86 <USB_Device_ProcessControlRequest+0x296>
    3f82:	84 e0       	ldi	r24, 0x04	; 4
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
    3f84:	01 c0       	rjmp	.+2      	; 0x3f88 <USB_Device_ProcessControlRequest+0x298>
    3f86:	81 e0       	ldi	r24, 0x01	; 1
	  USB_DeviceState = DEVICE_STATE_Configured;
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
    3f88:	8e bb       	out	0x1e, r24	; 30
    3f8a:	0e 94 df 02 	call	0x5be	; 0x5be <EVENT_USB_Device_ConfigurationChanged>
    3f8e:	80 91 e8 00 	lds	r24, 0x00E8
    3f92:	83 ff       	sbrs	r24, 3

	EVENT_USB_Device_ConfigurationChanged();
    3f94:	0a c0       	rjmp	.+20     	; 0x3faa <USB_Device_ProcessControlRequest+0x2ba>
    3f96:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    3f9a:	87 7f       	andi	r24, 0xF7	; 247
			default:
				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
    3f9c:	80 93 e8 00 	sts	0x00E8, r24
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    3fa0:	80 91 eb 00 	lds	r24, 0x00EB
    3fa4:	80 62       	ori	r24, 0x20	; 32
    3fa6:	80 93 eb 00 	sts	0x00EB, r24
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    3faa:	ac 96       	adiw	r28, 0x2c	; 44
    3fac:	0f b6       	in	r0, 0x3f	; 63
    3fae:	f8 94       	cli
    3fb0:	de bf       	out	0x3e, r29	; 62
    3fb2:	0f be       	out	0x3f, r0	; 63
	{
		Endpoint_ClearSETUP();
		Endpoint_StallTransaction();
	}
}
    3fb4:	cd bf       	out	0x3d, r28	; 61
    3fb6:	df 91       	pop	r29
    3fb8:	cf 91       	pop	r28
    3fba:	1f 91       	pop	r17
    3fbc:	08 95       	ret

00003fbe <USB_Event_Stub>:
#include "Events.h"

void USB_Event_Stub(void)
{

}
    3fbe:	08 95       	ret

00003fc0 <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
    3fc0:	cf 93       	push	r28
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_DeviceTask(void)
{
	if (USB_DeviceState == DEVICE_STATE_Unattached)
    3fc2:	8e b3       	in	r24, 0x1e	; 30
    3fc4:	88 23       	and	r24, r24
    3fc6:	a9 f0       	breq	.+42     	; 0x3ff2 <USB_USBTask+0x32>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    3fc8:	80 91 e9 00 	lds	r24, 0x00E9
    3fcc:	8f 70       	andi	r24, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    3fce:	90 91 ec 00 	lds	r25, 0x00EC
    3fd2:	90 ff       	sbrs	r25, 0
    3fd4:	02 c0       	rjmp	.+4      	; 0x3fda <USB_USBTask+0x1a>
    3fd6:	c0 e8       	ldi	r28, 0x80	; 128
    3fd8:	01 c0       	rjmp	.+2      	; 0x3fdc <USB_USBTask+0x1c>
    3fda:	c0 e0       	ldi	r28, 0x00	; 0
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    3fdc:	c8 2b       	or	r28, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    3fde:	10 92 e9 00 	sts	0x00E9, r1
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    3fe2:	80 91 e8 00 	lds	r24, 0x00E8

	uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

	if (Endpoint_IsSETUPReceived())
    3fe6:	83 ff       	sbrs	r24, 3
    3fe8:	01 c0       	rjmp	.+2      	; 0x3fec <USB_USBTask+0x2c>
	  USB_Device_ProcessControlRequest();
    3fea:	82 de       	rcall	.-764    	; 0x3cf0 <USB_Device_ProcessControlRequest>
    3fec:	cf 70       	andi	r28, 0x0F	; 15
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    3fee:	c0 93 e9 00 	sts	0x00E9, r28
    3ff2:	cf 91       	pop	r28
	#elif defined(USB_CAN_BE_HOST)
		USB_HostTask();
	#elif defined(USB_CAN_BE_DEVICE)
		USB_DeviceTask();
	#endif
}
    3ff4:	08 95       	ret

00003ff6 <HID_Device_ProcessControlRequest>:
#define  __INCLUDE_FROM_HID_DRIVER
#define  __INCLUDE_FROM_HID_DEVICE_C
#include "HIDClassDevice.h"

void HID_Device_ProcessControlRequest(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
    3ff6:	6f 92       	push	r6
    3ff8:	7f 92       	push	r7
    3ffa:	8f 92       	push	r8
    3ffc:	9f 92       	push	r9
    3ffe:	af 92       	push	r10
    4000:	bf 92       	push	r11
    4002:	cf 92       	push	r12
    4004:	df 92       	push	r13
    4006:	ef 92       	push	r14
    4008:	ff 92       	push	r15
    400a:	0f 93       	push	r16
    400c:	1f 93       	push	r17
    400e:	cf 93       	push	r28
    4010:	df 93       	push	r29
    4012:	00 d0       	rcall	.+0      	; 0x4014 <HID_Device_ProcessControlRequest+0x1e>
    4014:	0f 92       	push	r0
    4016:	cd b7       	in	r28, 0x3d	; 61
    4018:	de b7       	in	r29, 0x3e	; 62
    401a:	7c 01       	movw	r14, r24
				Endpoint_ClearStatusStage();
			}

			break;
	}
}
    401c:	6d b6       	in	r6, 0x3d	; 61
    401e:	7e b6       	in	r7, 0x3e	; 62
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    4020:	80 91 e8 00 	lds	r24, 0x00E8
#define  __INCLUDE_FROM_HID_DEVICE_C
#include "HIDClassDevice.h"

void HID_Device_ProcessControlRequest(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
	if (!(Endpoint_IsSETUPReceived()))
    4024:	83 ff       	sbrs	r24, 3
    4026:	05 c1       	rjmp	.+522    	; 0x4232 <HID_Device_ProcessControlRequest+0x23c>
	  return;

	if (USB_ControlRequest.wIndex != HIDInterfaceInfo->Config.InterfaceNumber)
    4028:	f7 01       	movw	r30, r14
    402a:	80 81       	ld	r24, Z
    402c:	90 e0       	ldi	r25, 0x00	; 0
    402e:	20 91 42 04 	lds	r18, 0x0442
    4032:	30 91 43 04 	lds	r19, 0x0443
    4036:	28 17       	cp	r18, r24
    4038:	39 07       	cpc	r19, r25
    403a:	09 f0       	breq	.+2      	; 0x403e <HID_Device_ProcessControlRequest+0x48>
    403c:	fa c0       	rjmp	.+500    	; 0x4232 <HID_Device_ProcessControlRequest+0x23c>
	  return;

	switch (USB_ControlRequest.bRequest)
    403e:	80 91 3f 04 	lds	r24, 0x043F
    4042:	83 30       	cpi	r24, 0x03	; 3
    4044:	09 f4       	brne	.+2      	; 0x4048 <HID_Device_ProcessControlRequest+0x52>
    4046:	9c c0       	rjmp	.+312    	; 0x4180 <HID_Device_ProcessControlRequest+0x18a>
    4048:	84 30       	cpi	r24, 0x04	; 4
    404a:	30 f4       	brcc	.+12     	; 0x4058 <HID_Device_ProcessControlRequest+0x62>
    404c:	81 30       	cpi	r24, 0x01	; 1
    404e:	71 f0       	breq	.+28     	; 0x406c <HID_Device_ProcessControlRequest+0x76>
    4050:	82 30       	cpi	r24, 0x02	; 2
    4052:	09 f0       	breq	.+2      	; 0x4056 <HID_Device_ProcessControlRequest+0x60>
    4054:	ee c0       	rjmp	.+476    	; 0x4232 <HID_Device_ProcessControlRequest+0x23c>
    4056:	d1 c0       	rjmp	.+418    	; 0x41fa <HID_Device_ProcessControlRequest+0x204>
    4058:	8a 30       	cpi	r24, 0x0A	; 10
    405a:	09 f4       	brne	.+2      	; 0x405e <HID_Device_ProcessControlRequest+0x68>
    405c:	b6 c0       	rjmp	.+364    	; 0x41ca <HID_Device_ProcessControlRequest+0x1d4>
    405e:	8b 30       	cpi	r24, 0x0B	; 11
    4060:	09 f4       	brne	.+2      	; 0x4064 <HID_Device_ProcessControlRequest+0x6e>
    4062:	9f c0       	rjmp	.+318    	; 0x41a2 <HID_Device_ProcessControlRequest+0x1ac>
    4064:	89 30       	cpi	r24, 0x09	; 9
    4066:	09 f0       	breq	.+2      	; 0x406a <HID_Device_ProcessControlRequest+0x74>
    4068:	e4 c0       	rjmp	.+456    	; 0x4232 <HID_Device_ProcessControlRequest+0x23c>
    406a:	4c c0       	rjmp	.+152    	; 0x4104 <HID_Device_ProcessControlRequest+0x10e>
	{
		case HID_REQ_GetReport:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    406c:	80 91 3e 04 	lds	r24, 0x043E
    4070:	81 3a       	cpi	r24, 0xA1	; 161
    4072:	09 f0       	breq	.+2      	; 0x4076 <HID_Device_ProcessControlRequest+0x80>
    4074:	de c0       	rjmp	.+444    	; 0x4232 <HID_Device_ProcessControlRequest+0x23c>
    4076:	9d b6       	in	r9, 0x3d	; 61
    4078:	8e b6       	in	r8, 0x3e	; 62
			{
				uint16_t ReportSize = 0;
    407a:	1b 82       	std	Y+3, r1	; 0x03
    407c:	1a 82       	std	Y+2, r1	; 0x02
				uint8_t  ReportID   = (USB_ControlRequest.wValue & 0xFF);
    407e:	80 91 40 04 	lds	r24, 0x0440
    4082:	00 91 41 04 	lds	r16, 0x0441
    4086:	89 83       	std	Y+1, r24	; 0x01
				uint8_t  ReportType = (USB_ControlRequest.wValue >> 8) - 1;
				uint8_t  ReportData[HIDInterfaceInfo->Config.PrevReportINBufferSize];
    4088:	f7 01       	movw	r30, r14
    408a:	40 85       	ldd	r20, Z+8	; 0x08
    408c:	8d b7       	in	r24, 0x3d	; 61
    408e:	9e b7       	in	r25, 0x3e	; 62
    4090:	84 1b       	sub	r24, r20
    4092:	91 09       	sbc	r25, r1
    4094:	0f b6       	in	r0, 0x3f	; 63
    4096:	f8 94       	cli
    4098:	9e bf       	out	0x3e, r25	; 62
    409a:	0f be       	out	0x3f, r0	; 63
    409c:	8d bf       	out	0x3d, r24	; 61
    409e:	cd b6       	in	r12, 0x3d	; 61
    40a0:	de b6       	in	r13, 0x3e	; 62
    40a2:	08 94       	sec
    40a4:	c1 1c       	adc	r12, r1
    40a6:	d1 1c       	adc	r13, r1

				memset(ReportData, 0, sizeof(ReportData));
    40a8:	bc 2c       	mov	r11, r12
    40aa:	ad 2c       	mov	r10, r13
    40ac:	c6 01       	movw	r24, r12
    40ae:	60 e0       	ldi	r22, 0x00	; 0
    40b0:	70 e0       	ldi	r23, 0x00	; 0
    40b2:	50 e0       	ldi	r21, 0x00	; 0
    40b4:	cb d4       	rcall	.+2454   	; 0x4a4c <memset>
    40b6:	40 2f       	mov	r20, r16
		case HID_REQ_GetReport:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
			{
				uint16_t ReportSize = 0;
				uint8_t  ReportID   = (USB_ControlRequest.wValue & 0xFF);
				uint8_t  ReportType = (USB_ControlRequest.wValue >> 8) - 1;
    40b8:	41 50       	subi	r20, 0x01	; 1
    40ba:	c7 01       	movw	r24, r14
				uint8_t  ReportData[HIDInterfaceInfo->Config.PrevReportINBufferSize];

				memset(ReportData, 0, sizeof(ReportData));

				CALLBACK_HID_Device_CreateHIDReport(HIDInterfaceInfo, &ReportID, ReportType, ReportData, &ReportSize);
    40bc:	be 01       	movw	r22, r28
    40be:	6f 5f       	subi	r22, 0xFF	; 255
    40c0:	7f 4f       	sbci	r23, 0xFF	; 255
    40c2:	96 01       	movw	r18, r12
    40c4:	8e 01       	movw	r16, r28
    40c6:	0e 5f       	subi	r16, 0xFE	; 254
    40c8:	1f 4f       	sbci	r17, 0xFF	; 255
    40ca:	0e 94 0e 03 	call	0x61c	; 0x61c <CALLBACK_HID_Device_CreateHIDReport>
    40ce:	f7 01       	movw	r30, r14

				if (HIDInterfaceInfo->Config.PrevReportINBuffer != NULL)
    40d0:	86 81       	ldd	r24, Z+6	; 0x06
    40d2:	97 81       	ldd	r25, Z+7	; 0x07
    40d4:	00 97       	sbiw	r24, 0x00	; 0
    40d6:	21 f0       	breq	.+8      	; 0x40e0 <HID_Device_ProcessControlRequest+0xea>
    40d8:	40 85       	ldd	r20, Z+8	; 0x08
				{
					memcpy(HIDInterfaceInfo->Config.PrevReportINBuffer, ReportData,
    40da:	b6 01       	movw	r22, r12
    40dc:	50 e0       	ldi	r21, 0x00	; 0
    40de:	ad d4       	rcall	.+2394   	; 0x4a3a <memcpy>
    40e0:	10 92 e9 00 	sts	0x00E9, r1
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    40e4:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    40e8:	87 7f       	andi	r24, 0xF7	; 247
    40ea:	80 93 e8 00 	sts	0x00E8, r24
    40ee:	6a 81       	ldd	r22, Y+2	; 0x02
    40f0:	7b 81       	ldd	r23, Y+3	; 0x03
				}

				Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

				Endpoint_ClearSETUP();
				Endpoint_Write_Control_Stream_LE(ReportData, ReportSize);
    40f2:	8b 2d       	mov	r24, r11
    40f4:	9a 2d       	mov	r25, r10
    40f6:	d7 da       	rcall	.-2642   	; 0x36a6 <Endpoint_Write_Control_Stream_LE>
    40f8:	80 91 e8 00 	lds	r24, 0x00E8
    40fc:	8b 77       	andi	r24, 0x7B	; 123
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    40fe:	80 93 e8 00 	sts	0x00E8, r24
    4102:	3b c0       	rjmp	.+118    	; 0x417a <HID_Device_ProcessControlRequest+0x184>
    4104:	80 91 3e 04 	lds	r24, 0x043E
    4108:	81 32       	cpi	r24, 0x21	; 33
				Endpoint_ClearOUT();
			}

			break;
		case HID_REQ_SetReport:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    410a:	09 f0       	breq	.+2      	; 0x410e <HID_Device_ProcessControlRequest+0x118>
    410c:	92 c0       	rjmp	.+292    	; 0x4232 <HID_Device_ProcessControlRequest+0x23c>
    410e:	9d b6       	in	r9, 0x3d	; 61
    4110:	8e b6       	in	r8, 0x3e	; 62
    4112:	00 91 44 04 	lds	r16, 0x0444
    4116:	10 91 45 04 	lds	r17, 0x0445
			{
				uint16_t ReportSize = USB_ControlRequest.wLength;
    411a:	c0 90 40 04 	lds	r12, 0x0440
    411e:	d0 90 41 04 	lds	r13, 0x0441
				uint8_t  ReportID   = (USB_ControlRequest.wValue & 0xFF);
    4122:	8d b7       	in	r24, 0x3d	; 61
    4124:	9e b7       	in	r25, 0x3e	; 62
    4126:	80 1b       	sub	r24, r16
				uint8_t  ReportType = (USB_ControlRequest.wValue >> 8) - 1;
				uint8_t  ReportData[ReportSize];
    4128:	91 0b       	sbc	r25, r17
    412a:	0f b6       	in	r0, 0x3f	; 63
    412c:	f8 94       	cli
    412e:	9e bf       	out	0x3e, r25	; 62
    4130:	0f be       	out	0x3f, r0	; 63
    4132:	8d bf       	out	0x3d, r24	; 61
    4134:	ad b6       	in	r10, 0x3d	; 61
    4136:	be b6       	in	r11, 0x3e	; 62
    4138:	08 94       	sec
    413a:	a1 1c       	adc	r10, r1
    413c:	b1 1c       	adc	r11, r1
    413e:	80 91 e8 00 	lds	r24, 0x00E8
    4142:	87 7f       	andi	r24, 0xF7	; 247
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    4144:	80 93 e8 00 	sts	0x00E8, r24
    4148:	c5 01       	movw	r24, r10
    414a:	b8 01       	movw	r22, r16
    414c:	05 db       	rcall	.-2550   	; 0x3758 <Endpoint_Read_Control_Stream_LE>

				Endpoint_ClearSETUP();
				Endpoint_Read_Control_Stream_LE(ReportData, ReportSize);
    414e:	80 91 e8 00 	lds	r24, 0x00E8
    4152:	8e 77       	andi	r24, 0x7E	; 126
    4154:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    4158:	81 e0       	ldi	r24, 0x01	; 1
    415a:	90 e0       	ldi	r25, 0x00	; 0
    415c:	cc 20       	and	r12, r12
    415e:	11 f4       	brne	.+4      	; 0x4164 <HID_Device_ProcessControlRequest+0x16e>
				Endpoint_ClearIN();

				CALLBACK_HID_Device_ProcessHIDReport(HIDInterfaceInfo, ReportID, ReportType,
    4160:	80 e0       	ldi	r24, 0x00	; 0
    4162:	90 e0       	ldi	r25, 0x00	; 0
    4164:	4d 2d       	mov	r20, r13
    4166:	41 50       	subi	r20, 0x01	; 1
    4168:	95 01       	movw	r18, r10
    416a:	28 0f       	add	r18, r24
		case HID_REQ_SetReport:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
			{
				uint16_t ReportSize = USB_ControlRequest.wLength;
				uint8_t  ReportID   = (USB_ControlRequest.wValue & 0xFF);
				uint8_t  ReportType = (USB_ControlRequest.wValue >> 8) - 1;
    416c:	39 1f       	adc	r19, r25
    416e:	08 1b       	sub	r16, r24

				Endpoint_ClearSETUP();
				Endpoint_Read_Control_Stream_LE(ReportData, ReportSize);
				Endpoint_ClearIN();

				CALLBACK_HID_Device_ProcessHIDReport(HIDInterfaceInfo, ReportID, ReportType,
    4170:	19 0b       	sbc	r17, r25
    4172:	c7 01       	movw	r24, r14
    4174:	6c 2d       	mov	r22, r12
    4176:	0e 94 23 03 	call	0x646	; 0x646 <CALLBACK_HID_Device_ProcessHIDReport>
    417a:	9d be       	out	0x3d, r9	; 61
    417c:	8e be       	out	0x3e, r8	; 62
    417e:	59 c0       	rjmp	.+178    	; 0x4232 <HID_Device_ProcessControlRequest+0x23c>
    4180:	80 91 3e 04 	lds	r24, 0x043E
    4184:	81 3a       	cpi	r24, 0xA1	; 161
    4186:	09 f0       	breq	.+2      	; 0x418a <HID_Device_ProcessControlRequest+0x194>
				                                     &ReportData[ReportID ? 1 : 0], ReportSize - (ReportID ? 1 : 0));
			}

			break;
		case HID_REQ_GetProtocol:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    4188:	54 c0       	rjmp	.+168    	; 0x4232 <HID_Device_ProcessControlRequest+0x23c>
    418a:	80 91 e8 00 	lds	r24, 0x00E8
    418e:	87 7f       	andi	r24, 0xF7	; 247
    4190:	80 93 e8 00 	sts	0x00E8, r24
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    4194:	80 91 e8 00 	lds	r24, 0x00E8
    4198:	80 ff       	sbrs	r24, 0
    419a:	fc cf       	rjmp	.-8      	; 0x4194 <HID_Device_ProcessControlRequest+0x19e>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    419c:	f7 01       	movw	r30, r14
    419e:	81 85       	ldd	r24, Z+9	; 0x09
			{
				Endpoint_ClearSETUP();
				while (!(Endpoint_IsINReady()));
    41a0:	40 c0       	rjmp	.+128    	; 0x4222 <HID_Device_ProcessControlRequest+0x22c>
    41a2:	80 91 3e 04 	lds	r24, 0x043E
				Endpoint_Write_8(HIDInterfaceInfo->State.UsingReportProtocol);
    41a6:	81 32       	cpi	r24, 0x21	; 33
    41a8:	09 f0       	breq	.+2      	; 0x41ac <HID_Device_ProcessControlRequest+0x1b6>
				Endpoint_ClearStatusStage();
			}

			break;
		case HID_REQ_SetProtocol:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    41aa:	43 c0       	rjmp	.+134    	; 0x4232 <HID_Device_ProcessControlRequest+0x23c>
    41ac:	80 91 e8 00 	lds	r24, 0x00E8
    41b0:	87 7f       	andi	r24, 0xF7	; 247
    41b2:	80 93 e8 00 	sts	0x00E8, r24
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    41b6:	e3 db       	rcall	.-2106   	; 0x397e <Endpoint_ClearStatusStage>
    41b8:	90 91 40 04 	lds	r25, 0x0440
    41bc:	81 e0       	ldi	r24, 0x01	; 1
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
    41be:	99 23       	and	r25, r25
    41c0:	09 f4       	brne	.+2      	; 0x41c4 <HID_Device_ProcessControlRequest+0x1ce>

				HIDInterfaceInfo->State.UsingReportProtocol = ((USB_ControlRequest.wValue & 0xFF) != 0x00);
    41c2:	80 e0       	ldi	r24, 0x00	; 0
    41c4:	f7 01       	movw	r30, r14
    41c6:	81 87       	std	Z+9, r24	; 0x09
    41c8:	34 c0       	rjmp	.+104    	; 0x4232 <HID_Device_ProcessControlRequest+0x23c>
    41ca:	80 91 3e 04 	lds	r24, 0x043E
    41ce:	81 32       	cpi	r24, 0x21	; 33
    41d0:	81 f5       	brne	.+96     	; 0x4232 <HID_Device_ProcessControlRequest+0x23c>
    41d2:	80 91 e8 00 	lds	r24, 0x00E8
			}

			break;
		case HID_REQ_SetIdle:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    41d6:	87 7f       	andi	r24, 0xF7	; 247
    41d8:	80 93 e8 00 	sts	0x00E8, r24
    41dc:	d0 db       	rcall	.-2144   	; 0x397e <Endpoint_ClearStatusStage>
    41de:	80 91 40 04 	lds	r24, 0x0440
    41e2:	90 91 41 04 	lds	r25, 0x0441
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
    41e6:	80 70       	andi	r24, 0x00	; 0
    41e8:	36 e0       	ldi	r19, 0x06	; 6

				HIDInterfaceInfo->State.IdleCount = ((USB_ControlRequest.wValue & 0xFF00) >> 6);
    41ea:	96 95       	lsr	r25
    41ec:	87 95       	ror	r24
    41ee:	3a 95       	dec	r19
    41f0:	e1 f7       	brne	.-8      	; 0x41ea <HID_Device_ProcessControlRequest+0x1f4>
    41f2:	f7 01       	movw	r30, r14
    41f4:	95 87       	std	Z+13, r25	; 0x0d
    41f6:	84 87       	std	Z+12, r24	; 0x0c
    41f8:	1c c0       	rjmp	.+56     	; 0x4232 <HID_Device_ProcessControlRequest+0x23c>
    41fa:	80 91 3e 04 	lds	r24, 0x043E
    41fe:	81 3a       	cpi	r24, 0xA1	; 161
    4200:	c1 f4       	brne	.+48     	; 0x4232 <HID_Device_ProcessControlRequest+0x23c>
    4202:	80 91 e8 00 	lds	r24, 0x00E8
			}

			break;
		case HID_REQ_GetIdle:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    4206:	87 7f       	andi	r24, 0xF7	; 247
    4208:	80 93 e8 00 	sts	0x00E8, r24
    420c:	80 91 e8 00 	lds	r24, 0x00E8
    4210:	80 ff       	sbrs	r24, 0
    4212:	fc cf       	rjmp	.-8      	; 0x420c <HID_Device_ProcessControlRequest+0x216>
    4214:	f7 01       	movw	r30, r14
    4216:	84 85       	ldd	r24, Z+12	; 0x0c
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    4218:	95 85       	ldd	r25, Z+13	; 0x0d
    421a:	96 95       	lsr	r25
			{
				Endpoint_ClearSETUP();
				while (!(Endpoint_IsINReady()));
    421c:	87 95       	ror	r24
    421e:	96 95       	lsr	r25
				Endpoint_Write_8(HIDInterfaceInfo->State.IdleCount >> 2);
    4220:	87 95       	ror	r24
    4222:	80 93 f1 00 	sts	0x00F1, r24
    4226:	80 91 e8 00 	lds	r24, 0x00E8
    422a:	8e 77       	andi	r24, 0x7E	; 126
    422c:	80 93 e8 00 	sts	0x00E8, r24
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    4230:	a6 db       	rcall	.-2228   	; 0x397e <Endpoint_ClearStatusStage>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    4232:	0f b6       	in	r0, 0x3f	; 63
    4234:	f8 94       	cli
    4236:	7e be       	out	0x3e, r7	; 62
    4238:	0f be       	out	0x3f, r0	; 63
    423a:	6d be       	out	0x3d, r6	; 61
				Endpoint_ClearIN();
				Endpoint_ClearStatusStage();
    423c:	0f 90       	pop	r0
    423e:	0f 90       	pop	r0
			}

			break;
	}
}
    4240:	0f 90       	pop	r0
    4242:	df 91       	pop	r29
    4244:	cf 91       	pop	r28
    4246:	1f 91       	pop	r17
    4248:	0f 91       	pop	r16
    424a:	ff 90       	pop	r15
    424c:	ef 90       	pop	r14
    424e:	df 90       	pop	r13
    4250:	cf 90       	pop	r12
    4252:	bf 90       	pop	r11
    4254:	af 90       	pop	r10
    4256:	9f 90       	pop	r9
    4258:	8f 90       	pop	r8
    425a:	7f 90       	pop	r7
    425c:	6f 90       	pop	r6
    425e:	08 95       	ret

00004260 <HID_Device_ConfigureEndpoints>:
    4260:	cf 93       	push	r28
    4262:	df 93       	push	r29
    4264:	fc 01       	movw	r30, r24
    4266:	09 96       	adiw	r24, 0x09	; 9
    4268:	dc 01       	movw	r26, r24
    426a:	87 e0       	ldi	r24, 0x07	; 7
    426c:	ed 01       	movw	r28, r26

bool HID_Device_ConfigureEndpoints(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
	memset(&HIDInterfaceInfo->State, 0x00, sizeof(HIDInterfaceInfo->State));
    426e:	19 92       	st	Y+, r1
    4270:	8a 95       	dec	r24
    4272:	e9 f7       	brne	.-6      	; 0x426e <HID_Device_ConfigureEndpoints+0xe>
	HIDInterfaceInfo->State.UsingReportProtocol = true;
    4274:	81 e0       	ldi	r24, 0x01	; 1
    4276:	81 87       	std	Z+9, r24	; 0x09
	HIDInterfaceInfo->State.IdleCount           = 500;
    4278:	84 ef       	ldi	r24, 0xF4	; 244
    427a:	91 e0       	ldi	r25, 0x01	; 1
    427c:	95 87       	std	Z+13, r25	; 0x0d
    427e:	84 87       	std	Z+12, r24	; 0x0c

	HIDInterfaceInfo->Config.ReportINEndpoint.Type = EP_TYPE_INTERRUPT;
    4280:	83 e0       	ldi	r24, 0x03	; 3
    4282:	84 83       	std	Z+4, r24	; 0x04

	if (!(Endpoint_ConfigureEndpointTable(&HIDInterfaceInfo->Config.ReportINEndpoint, 1)))
    4284:	cf 01       	movw	r24, r30
    4286:	01 96       	adiw	r24, 0x01	; 1
    4288:	61 e0       	ldi	r22, 0x01	; 1
    428a:	3d db       	rcall	.-2438   	; 0x3906 <Endpoint_ConfigureEndpointTable>
    428c:	df 91       	pop	r29
	  return false;	
	
	return true;
}
    428e:	cf 91       	pop	r28
    4290:	08 95       	ret

00004292 <HID_Device_USBTask>:
    4292:	4f 92       	push	r4

void HID_Device_USBTask(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
    4294:	5f 92       	push	r5
    4296:	6f 92       	push	r6
    4298:	7f 92       	push	r7
    429a:	8f 92       	push	r8
    429c:	9f 92       	push	r9
    429e:	af 92       	push	r10
    42a0:	bf 92       	push	r11
    42a2:	cf 92       	push	r12
    42a4:	df 92       	push	r13
    42a6:	ef 92       	push	r14
    42a8:	ff 92       	push	r15
    42aa:	0f 93       	push	r16
    42ac:	1f 93       	push	r17
    42ae:	cf 93       	push	r28
    42b0:	df 93       	push	r29
    42b2:	00 d0       	rcall	.+0      	; 0x42b4 <HID_Device_USBTask+0x22>
    42b4:	0f 92       	push	r0
    42b6:	cd b7       	in	r28, 0x3d	; 61
    42b8:	de b7       	in	r29, 0x3e	; 62
    42ba:	7c 01       	movw	r14, r24
			Endpoint_ClearIN();
		}
		
		HIDInterfaceInfo->State.PrevFrameNum = USB_Device_GetFrameNumber();
	}
}
    42bc:	4d b6       	in	r4, 0x3d	; 61
    42be:	5e b6       	in	r5, 0x3e	; 62
	return true;
}

void HID_Device_USBTask(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
	if (USB_DeviceState != DEVICE_STATE_Configured)
    42c0:	8e b3       	in	r24, 0x1e	; 30
    42c2:	84 30       	cpi	r24, 0x04	; 4
    42c4:	09 f0       	breq	.+2      	; 0x42c8 <HID_Device_USBTask+0x36>
    42c6:	92 c0       	rjmp	.+292    	; 0x43ec <HID_Device_USBTask+0x15a>
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
    42c8:	80 91 e4 00 	lds	r24, 0x00E4
    42cc:	90 91 e5 00 	lds	r25, 0x00E5
	  return;

	if (HIDInterfaceInfo->State.PrevFrameNum == USB_Device_GetFrameNumber())
    42d0:	f7 01       	movw	r30, r14
    42d2:	22 85       	ldd	r18, Z+10	; 0x0a
    42d4:	33 85       	ldd	r19, Z+11	; 0x0b
    42d6:	28 17       	cp	r18, r24
    42d8:	39 07       	cpc	r19, r25
    42da:	09 f4       	brne	.+2      	; 0x42de <HID_Device_USBTask+0x4c>
    42dc:	87 c0       	rjmp	.+270    	; 0x43ec <HID_Device_USBTask+0x15a>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    42de:	81 81       	ldd	r24, Z+1	; 0x01
    42e0:	8f 70       	andi	r24, 0x0F	; 15
    42e2:	80 93 e9 00 	sts	0x00E9, r24
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    42e6:	80 91 e8 00 	lds	r24, 0x00E8
	  return;
	  
	Endpoint_SelectEndpoint(HIDInterfaceInfo->Config.ReportINEndpoint.Address);

	if (Endpoint_IsReadWriteAllowed())
    42ea:	85 ff       	sbrs	r24, 5
    42ec:	7f c0       	rjmp	.+254    	; 0x43ec <HID_Device_USBTask+0x15a>
    42ee:	7d b6       	in	r7, 0x3d	; 61
    42f0:	6e b6       	in	r6, 0x3e	; 62
	{
		uint8_t  ReportINData[HIDInterfaceInfo->Config.PrevReportINBufferSize];
    42f2:	40 85       	ldd	r20, Z+8	; 0x08
    42f4:	8d b7       	in	r24, 0x3d	; 61
    42f6:	9e b7       	in	r25, 0x3e	; 62
    42f8:	84 1b       	sub	r24, r20
    42fa:	91 09       	sbc	r25, r1
    42fc:	0f b6       	in	r0, 0x3f	; 63
    42fe:	f8 94       	cli
    4300:	9e bf       	out	0x3e, r25	; 62
    4302:	0f be       	out	0x3f, r0	; 63
    4304:	8d bf       	out	0x3d, r24	; 61
    4306:	0d b7       	in	r16, 0x3d	; 61
    4308:	1e b7       	in	r17, 0x3e	; 62
    430a:	0f 5f       	subi	r16, 0xFF	; 255
    430c:	1f 4f       	sbci	r17, 0xFF	; 255
		uint8_t  ReportID     = 0;
    430e:	19 82       	std	Y+1, r1	; 0x01
		uint16_t ReportINSize = 0;
    4310:	1b 82       	std	Y+3, r1	; 0x03
    4312:	1a 82       	std	Y+2, r1	; 0x02

		memset(ReportINData, 0, sizeof(ReportINData));
    4314:	b0 2e       	mov	r11, r16
    4316:	a1 2e       	mov	r10, r17
    4318:	c8 01       	movw	r24, r16
    431a:	60 e0       	ldi	r22, 0x00	; 0
    431c:	70 e0       	ldi	r23, 0x00	; 0
    431e:	50 e0       	ldi	r21, 0x00	; 0
    4320:	95 d3       	rcall	.+1834   	; 0x4a4c <memset>
    4322:	c7 01       	movw	r24, r14

		bool ForceSend         = CALLBACK_HID_Device_CreateHIDReport(HIDInterfaceInfo, &ReportID, HID_REPORT_ITEM_In,
    4324:	be 01       	movw	r22, r28
    4326:	6f 5f       	subi	r22, 0xFF	; 255
    4328:	7f 4f       	sbci	r23, 0xFF	; 255
    432a:	40 e0       	ldi	r20, 0x00	; 0
    432c:	98 01       	movw	r18, r16
    432e:	8e 01       	movw	r16, r28
    4330:	0e 5f       	subi	r16, 0xFE	; 254
    4332:	1f 4f       	sbci	r17, 0xFF	; 255
    4334:	0e 94 0e 03 	call	0x61c	; 0x61c <CALLBACK_HID_Device_CreateHIDReport>
    4338:	18 2f       	mov	r17, r24
    433a:	f7 01       	movw	r30, r14
		                                                             ReportINData, &ReportINSize);
		bool StatesChanged     = false;
		bool IdlePeriodElapsed = (HIDInterfaceInfo->State.IdleCount && !(HIDInterfaceInfo->State.IdleMSRemaining));
    433c:	84 85       	ldd	r24, Z+12	; 0x0c
    433e:	95 85       	ldd	r25, Z+13	; 0x0d
    4340:	00 97       	sbiw	r24, 0x00	; 0
    4342:	59 f0       	breq	.+22     	; 0x435a <HID_Device_USBTask+0xc8>
    4344:	81 e0       	ldi	r24, 0x01	; 1
	  return false;	
	
	return true;
}

void HID_Device_USBTask(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
    4346:	90 e0       	ldi	r25, 0x00	; 0
    4348:	26 85       	ldd	r18, Z+14	; 0x0e
    434a:	37 85       	ldd	r19, Z+15	; 0x0f
    434c:	21 15       	cp	r18, r1
    434e:	31 05       	cpc	r19, r1
    4350:	11 f0       	breq	.+4      	; 0x4356 <HID_Device_USBTask+0xc4>
    4352:	80 e0       	ldi	r24, 0x00	; 0
    4354:	90 e0       	ldi	r25, 0x00	; 0
    4356:	4c 01       	movw	r8, r24
		memset(ReportINData, 0, sizeof(ReportINData));

		bool ForceSend         = CALLBACK_HID_Device_CreateHIDReport(HIDInterfaceInfo, &ReportID, HID_REPORT_ITEM_In,
		                                                             ReportINData, &ReportINSize);
		bool StatesChanged     = false;
		bool IdlePeriodElapsed = (HIDInterfaceInfo->State.IdleCount && !(HIDInterfaceInfo->State.IdleMSRemaining));
    4358:	02 c0       	rjmp	.+4      	; 0x435e <HID_Device_USBTask+0xcc>
    435a:	88 24       	eor	r8, r8
    435c:	99 24       	eor	r9, r9
    435e:	f7 01       	movw	r30, r14

		if (HIDInterfaceInfo->Config.PrevReportINBuffer != NULL)
    4360:	c6 80       	ldd	r12, Z+6	; 0x06
    4362:	d7 80       	ldd	r13, Z+7	; 0x07
    4364:	c1 14       	cp	r12, r1
    4366:	d1 04       	cpc	r13, r1
    4368:	91 f0       	breq	.+36     	; 0x438e <HID_Device_USBTask+0xfc>
    436a:	4a 81       	ldd	r20, Y+2	; 0x02
		{
			StatesChanged = (memcmp(ReportINData, HIDInterfaceInfo->Config.PrevReportINBuffer, ReportINSize) != 0);
    436c:	5b 81       	ldd	r21, Y+3	; 0x03
    436e:	8b 2d       	mov	r24, r11
    4370:	9a 2d       	mov	r25, r10
    4372:	b6 01       	movw	r22, r12
    4374:	55 d3       	rcall	.+1706   	; 0x4a20 <memcmp>
    4376:	01 e0       	ldi	r16, 0x01	; 1
    4378:	00 97       	sbiw	r24, 0x00	; 0
    437a:	09 f4       	brne	.+2      	; 0x437e <HID_Device_USBTask+0xec>
    437c:	00 e0       	ldi	r16, 0x00	; 0
    437e:	f7 01       	movw	r30, r14
    4380:	40 85       	ldd	r20, Z+8	; 0x08
			memcpy(HIDInterfaceInfo->Config.PrevReportINBuffer, ReportINData, HIDInterfaceInfo->Config.PrevReportINBufferSize);
    4382:	c6 01       	movw	r24, r12
    4384:	6b 2d       	mov	r22, r11
    4386:	7a 2d       	mov	r23, r10
    4388:	50 e0       	ldi	r21, 0x00	; 0
    438a:	57 d3       	rcall	.+1710   	; 0x4a3a <memcpy>
    438c:	01 c0       	rjmp	.+2      	; 0x4390 <HID_Device_USBTask+0xfe>
    438e:	00 e0       	ldi	r16, 0x00	; 0
    4390:	8a 81       	ldd	r24, Y+2	; 0x02
    4392:	9b 81       	ldd	r25, Y+3	; 0x03

		memset(ReportINData, 0, sizeof(ReportINData));

		bool ForceSend         = CALLBACK_HID_Device_CreateHIDReport(HIDInterfaceInfo, &ReportID, HID_REPORT_ITEM_In,
		                                                             ReportINData, &ReportINSize);
		bool StatesChanged     = false;
    4394:	00 97       	sbiw	r24, 0x00	; 0
		{
			StatesChanged = (memcmp(ReportINData, HIDInterfaceInfo->Config.PrevReportINBuffer, ReportINSize) != 0);
			memcpy(HIDInterfaceInfo->Config.PrevReportINBuffer, ReportINData, HIDInterfaceInfo->Config.PrevReportINBufferSize);
		}

		if (ReportINSize && (ForceSend || StatesChanged || IdlePeriodElapsed))
    4396:	09 f1       	breq	.+66     	; 0x43da <HID_Device_USBTask+0x148>
    4398:	11 23       	and	r17, r17
    439a:	29 f4       	brne	.+10     	; 0x43a6 <HID_Device_USBTask+0x114>
    439c:	00 23       	and	r16, r16
    439e:	19 f4       	brne	.+6      	; 0x43a6 <HID_Device_USBTask+0x114>
    43a0:	81 14       	cp	r8, r1
    43a2:	91 04       	cpc	r9, r1
    43a4:	d1 f0       	breq	.+52     	; 0x43da <HID_Device_USBTask+0x148>
    43a6:	f7 01       	movw	r30, r14
    43a8:	84 85       	ldd	r24, Z+12	; 0x0c
    43aa:	95 85       	ldd	r25, Z+13	; 0x0d
		{
			HIDInterfaceInfo->State.IdleMSRemaining = HIDInterfaceInfo->State.IdleCount;
    43ac:	97 87       	std	Z+15, r25	; 0x0f
    43ae:	86 87       	std	Z+14, r24	; 0x0e
    43b0:	81 81       	ldd	r24, Z+1	; 0x01
    43b2:	8f 70       	andi	r24, 0x0F	; 15
    43b4:	80 93 e9 00 	sts	0x00E9, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    43b8:	89 81       	ldd	r24, Y+1	; 0x01
    43ba:	88 23       	and	r24, r24
    43bc:	11 f0       	breq	.+4      	; 0x43c2 <HID_Device_USBTask+0x130>

			Endpoint_SelectEndpoint(HIDInterfaceInfo->Config.ReportINEndpoint.Address);

			if (ReportID)
    43be:	80 93 f1 00 	sts	0x00F1, r24
    43c2:	6a 81       	ldd	r22, Y+2	; 0x02
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    43c4:	7b 81       	ldd	r23, Y+3	; 0x03
    43c6:	8b 2d       	mov	r24, r11
			  Endpoint_Write_8(ReportID);

			Endpoint_Write_Stream_LE(ReportINData, ReportINSize, NULL);
    43c8:	9a 2d       	mov	r25, r10
    43ca:	40 e0       	ldi	r20, 0x00	; 0
    43cc:	50 e0       	ldi	r21, 0x00	; 0
    43ce:	77 d8       	rcall	.-3858   	; 0x34be <Endpoint_Write_Stream_LE>
    43d0:	80 91 e8 00 	lds	r24, 0x00E8
    43d4:	8e 77       	andi	r24, 0x7E	; 126
    43d6:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    43da:	80 91 e4 00 	lds	r24, 0x00E4
    43de:	90 91 e5 00 	lds	r25, 0x00E5
    43e2:	f7 01       	movw	r30, r14
    43e4:	93 87       	std	Z+11, r25	; 0x0b
    43e6:	82 87       	std	Z+10, r24	; 0x0a
    43e8:	7d be       	out	0x3d, r7	; 61

			Endpoint_ClearIN();
		}
		
		HIDInterfaceInfo->State.PrevFrameNum = USB_Device_GetFrameNumber();
    43ea:	6e be       	out	0x3e, r6	; 62
    43ec:	0f b6       	in	r0, 0x3f	; 63
    43ee:	f8 94       	cli
    43f0:	5e be       	out	0x3e, r5	; 62
    43f2:	0f be       	out	0x3f, r0	; 63
	}
}
    43f4:	4d be       	out	0x3d, r4	; 61
    43f6:	0f 90       	pop	r0
    43f8:	0f 90       	pop	r0
    43fa:	0f 90       	pop	r0
    43fc:	df 91       	pop	r29
    43fe:	cf 91       	pop	r28
    4400:	1f 91       	pop	r17
    4402:	0f 91       	pop	r16
    4404:	ff 90       	pop	r15
    4406:	ef 90       	pop	r14
    4408:	df 90       	pop	r13
    440a:	cf 90       	pop	r12
    440c:	bf 90       	pop	r11
    440e:	af 90       	pop	r10
    4410:	9f 90       	pop	r9
    4412:	8f 90       	pop	r8
    4414:	7f 90       	pop	r7
    4416:	6f 90       	pop	r6
    4418:	5f 90       	pop	r5
    441a:	4f 90       	pop	r4
    441c:	08 95       	ret

0000441e <MS_Device_ProcessControlRequest>:
#define  __INCLUDE_FROM_MS_DRIVER
#define  __INCLUDE_FROM_MASSSTORAGE_DEVICE_C
#include "MassStorageClassDevice.h"

void MS_Device_ProcessControlRequest(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
    441e:	cf 93       	push	r28
    4420:	df 93       	push	r29
    4422:	ec 01       	movw	r28, r24
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    4424:	80 91 e8 00 	lds	r24, 0x00E8
	if (!(Endpoint_IsSETUPReceived()))
    4428:	83 ff       	sbrs	r24, 3
    442a:	33 c0       	rjmp	.+102    	; 0x4492 <MS_Device_ProcessControlRequest+0x74>
	  return;

	if (USB_ControlRequest.wIndex != MSInterfaceInfo->Config.InterfaceNumber)
    442c:	88 81       	ld	r24, Y
    442e:	90 e0       	ldi	r25, 0x00	; 0
    4430:	20 91 42 04 	lds	r18, 0x0442
    4434:	30 91 43 04 	lds	r19, 0x0443
    4438:	28 17       	cp	r18, r24
    443a:	39 07       	cpc	r19, r25
    443c:	51 f5       	brne	.+84     	; 0x4492 <MS_Device_ProcessControlRequest+0x74>
	  return;

	switch (USB_ControlRequest.bRequest)
    443e:	80 91 3f 04 	lds	r24, 0x043F
    4442:	8e 3f       	cpi	r24, 0xFE	; 254
    4444:	79 f0       	breq	.+30     	; 0x4464 <MS_Device_ProcessControlRequest+0x46>
    4446:	8f 3f       	cpi	r24, 0xFF	; 255
    4448:	21 f5       	brne	.+72     	; 0x4492 <MS_Device_ProcessControlRequest+0x74>
	{
		case MS_REQ_MassStorageReset:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    444a:	80 91 3e 04 	lds	r24, 0x043E
    444e:	81 32       	cpi	r24, 0x21	; 33
    4450:	01 f5       	brne	.+64     	; 0x4492 <MS_Device_ProcessControlRequest+0x74>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    4452:	80 91 e8 00 	lds	r24, 0x00E8
    4456:	87 7f       	andi	r24, 0xF7	; 247
    4458:	80 93 e8 00 	sts	0x00E8, r24
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
    445c:	90 da       	rcall	.-2784   	; 0x397e <Endpoint_ClearStatusStage>
    445e:	81 e0       	ldi	r24, 0x01	; 1

				MSInterfaceInfo->State.IsMassStoreReset = true;
    4460:	88 af       	sts	0x78, r24
    4462:	17 c0       	rjmp	.+46     	; 0x4492 <MS_Device_ProcessControlRequest+0x74>
    4464:	80 91 3e 04 	lds	r24, 0x043E
			}

			break;
		case MS_REQ_GetMaxLUN:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    4468:	81 3a       	cpi	r24, 0xA1	; 161
    446a:	99 f4       	brne	.+38     	; 0x4492 <MS_Device_ProcessControlRequest+0x74>
    446c:	80 91 e8 00 	lds	r24, 0x00E8
    4470:	87 7f       	andi	r24, 0xF7	; 247
    4472:	80 93 e8 00 	sts	0x00E8, r24
    4476:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    447a:	80 ff       	sbrs	r24, 0
			{
				Endpoint_ClearSETUP();
				while (!(Endpoint_IsINReady()));
    447c:	fc cf       	rjmp	.-8      	; 0x4476 <MS_Device_ProcessControlRequest+0x58>
    447e:	8b 85       	ldd	r24, Y+11	; 0x0b
				Endpoint_Write_8(MSInterfaceInfo->Config.TotalLUNs - 1);
    4480:	81 50       	subi	r24, 0x01	; 1
    4482:	80 93 f1 00 	sts	0x00F1, r24
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    4486:	80 91 e8 00 	lds	r24, 0x00E8
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    448a:	8e 77       	andi	r24, 0x7E	; 126
    448c:	80 93 e8 00 	sts	0x00E8, r24
    4490:	76 da       	rcall	.-2836   	; 0x397e <Endpoint_ClearStatusStage>
				Endpoint_ClearIN();
				Endpoint_ClearStatusStage();
    4492:	df 91       	pop	r29
    4494:	cf 91       	pop	r28
			}

			break;
	}
}
    4496:	08 95       	ret

00004498 <MS_Device_ConfigureEndpoints>:
    4498:	cf 93       	push	r28
    449a:	df 93       	push	r29

bool MS_Device_ConfigureEndpoints(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
    449c:	ec 01       	movw	r28, r24
	memset(&MSInterfaceInfo->State, 0x00, sizeof(MSInterfaceInfo->State));
    449e:	0c 96       	adiw	r24, 0x0c	; 12
    44a0:	fc 01       	movw	r30, r24
    44a2:	8d e2       	ldi	r24, 0x2D	; 45
    44a4:	df 01       	movw	r26, r30
    44a6:	1d 92       	st	X+, r1
    44a8:	8a 95       	dec	r24
    44aa:	e9 f7       	brne	.-6      	; 0x44a6 <MS_Device_ConfigureEndpoints+0xe>

	MSInterfaceInfo->Config.DataINEndpoint.Type  = EP_TYPE_BULK;
    44ac:	82 e0       	ldi	r24, 0x02	; 2
    44ae:	8c 83       	std	Y+4, r24	; 0x04
	MSInterfaceInfo->Config.DataOUTEndpoint.Type = EP_TYPE_BULK;
    44b0:	89 87       	std	Y+9, r24	; 0x09

	if (!(Endpoint_ConfigureEndpointTable(&MSInterfaceInfo->Config.DataINEndpoint, 1)))
    44b2:	ce 01       	movw	r24, r28
    44b4:	01 96       	adiw	r24, 0x01	; 1
    44b6:	61 e0       	ldi	r22, 0x01	; 1
    44b8:	26 da       	rcall	.-2996   	; 0x3906 <Endpoint_ConfigureEndpointTable>
    44ba:	88 23       	and	r24, r24
    44bc:	29 f0       	breq	.+10     	; 0x44c8 <MS_Device_ConfigureEndpoints+0x30>
    44be:	ce 01       	movw	r24, r28
	  return false;

	if (!(Endpoint_ConfigureEndpointTable(&MSInterfaceInfo->Config.DataOUTEndpoint, 1)))
    44c0:	06 96       	adiw	r24, 0x06	; 6
    44c2:	61 e0       	ldi	r22, 0x01	; 1
    44c4:	20 da       	rcall	.-3008   	; 0x3906 <Endpoint_ConfigureEndpointTable>
    44c6:	01 c0       	rjmp	.+2      	; 0x44ca <MS_Device_ConfigureEndpoints+0x32>
    44c8:	80 e0       	ldi	r24, 0x00	; 0
    44ca:	df 91       	pop	r29

	MSInterfaceInfo->Config.DataINEndpoint.Type  = EP_TYPE_BULK;
	MSInterfaceInfo->Config.DataOUTEndpoint.Type = EP_TYPE_BULK;

	if (!(Endpoint_ConfigureEndpointTable(&MSInterfaceInfo->Config.DataINEndpoint, 1)))
	  return false;
    44cc:	cf 91       	pop	r28

	if (!(Endpoint_ConfigureEndpointTable(&MSInterfaceInfo->Config.DataOUTEndpoint, 1)))
	  return false;

	return true;
}
    44ce:	08 95       	ret

000044d0 <MS_Device_USBTask>:
    44d0:	ef 92       	push	r14
    44d2:	ff 92       	push	r15

void MS_Device_USBTask(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
    44d4:	0f 93       	push	r16
    44d6:	1f 93       	push	r17
    44d8:	cf 93       	push	r28
    44da:	df 93       	push	r29
    44dc:	00 d0       	rcall	.+0      	; 0x44de <MS_Device_USBTask+0xe>
    44de:	cd b7       	in	r28, 0x3d	; 61
    44e0:	de b7       	in	r29, 0x3e	; 62
    44e2:	8c 01       	movw	r16, r24
	if (USB_DeviceState != DEVICE_STATE_Configured)
    44e4:	8e b3       	in	r24, 0x1e	; 30
    44e6:	84 30       	cpi	r24, 0x04	; 4
    44e8:	09 f0       	breq	.+2      	; 0x44ec <MS_Device_USBTask+0x1c>
    44ea:	0e c1       	rjmp	.+540    	; 0x4708 <MS_Device_USBTask+0x238>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    44ec:	f8 01       	movw	r30, r16
    44ee:	86 81       	ldd	r24, Z+6	; 0x06
    44f0:	8f 70       	andi	r24, 0x0F	; 15
    44f2:	80 93 e9 00 	sts	0x00E9, r24
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    44f6:	80 91 e8 00 	lds	r24, 0x00E8
	  return;

	Endpoint_SelectEndpoint(MSInterfaceInfo->Config.DataOUTEndpoint.Address);

	if (Endpoint_IsOUTReceived())
    44fa:	82 ff       	sbrs	r24, 2
    44fc:	cb c0       	rjmp	.+406    	; 0x4694 <MS_Device_USBTask+0x1c4>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    44fe:	86 81       	ldd	r24, Z+6	; 0x06
    4500:	8f 70       	andi	r24, 0x0F	; 15
    4502:	80 93 e9 00 	sts	0x00E9, r24
{
	uint16_t BytesProcessed;

	Endpoint_SelectEndpoint(MSInterfaceInfo->Config.DataOUTEndpoint.Address);
	
	BytesProcessed = 0;
    4506:	1a 82       	std	Y+2, r1	; 0x02
    4508:	19 82       	std	Y+1, r1	; 0x01
	while (Endpoint_Read_Stream_LE(&MSInterfaceInfo->State.CommandBlock,
    450a:	2c e0       	ldi	r18, 0x0C	; 12
    450c:	e2 2e       	mov	r14, r18
    450e:	f1 2c       	mov	r15, r1
    4510:	e0 0e       	add	r14, r16
    4512:	f1 1e       	adc	r15, r17
    4514:	04 c0       	rjmp	.+8      	; 0x451e <MS_Device_USBTask+0x4e>
	                               (sizeof(MS_CommandBlockWrapper_t) - 16), &BytesProcessed) ==
	                               ENDPOINT_RWSTREAM_IncompleteTransfer)
	{
		if (MSInterfaceInfo->State.IsMassStoreReset)
    4516:	80 ad       	sts	0x60, r24
    4518:	88 23       	and	r24, r24
    451a:	09 f0       	breq	.+2      	; 0x451e <MS_Device_USBTask+0x4e>
    451c:	bb c0       	rjmp	.+374    	; 0x4694 <MS_Device_USBTask+0x1c4>
	uint16_t BytesProcessed;

	Endpoint_SelectEndpoint(MSInterfaceInfo->Config.DataOUTEndpoint.Address);
	
	BytesProcessed = 0;
	while (Endpoint_Read_Stream_LE(&MSInterfaceInfo->State.CommandBlock,
    451e:	c7 01       	movw	r24, r14
    4520:	6f e0       	ldi	r22, 0x0F	; 15
    4522:	70 e0       	ldi	r23, 0x00	; 0
    4524:	ae 01       	movw	r20, r28
    4526:	4f 5f       	subi	r20, 0xFF	; 255
    4528:	5f 4f       	sbci	r21, 0xFF	; 255
    452a:	6e d8       	rcall	.-3876   	; 0x3608 <Endpoint_Read_Stream_LE>
    452c:	f8 01       	movw	r30, r16
	                               (sizeof(MS_CommandBlockWrapper_t) - 16), &BytesProcessed) ==
	                               ENDPOINT_RWSTREAM_IncompleteTransfer)
	{
		if (MSInterfaceInfo->State.IsMassStoreReset)
    452e:	85 30       	cpi	r24, 0x05	; 5
	uint16_t BytesProcessed;

	Endpoint_SelectEndpoint(MSInterfaceInfo->Config.DataOUTEndpoint.Address);
	
	BytesProcessed = 0;
	while (Endpoint_Read_Stream_LE(&MSInterfaceInfo->State.CommandBlock,
    4530:	91 f3       	breq	.-28     	; 0x4516 <MS_Device_USBTask+0x46>
    4532:	84 85       	ldd	r24, Z+12	; 0x0c
	{
		if (MSInterfaceInfo->State.IsMassStoreReset)
		  return false;
	}

	if ((MSInterfaceInfo->State.CommandBlock.Signature         != CPU_TO_LE32(MS_CBW_SIGNATURE))     ||
    4534:	95 85       	ldd	r25, Z+13	; 0x0d
    4536:	a6 85       	ldd	r26, Z+14	; 0x0e
    4538:	b7 85       	ldd	r27, Z+15	; 0x0f
    453a:	85 35       	cpi	r24, 0x55	; 85
    453c:	f3 e5       	ldi	r31, 0x53	; 83
    453e:	9f 07       	cpc	r25, r31
    4540:	f2 e4       	ldi	r31, 0x42	; 66
    4542:	af 07       	cpc	r26, r31
    4544:	f3 e4       	ldi	r31, 0x43	; 67
    4546:	bf 07       	cpc	r27, r31
    4548:	81 f4       	brne	.+32     	; 0x456a <MS_Device_USBTask+0x9a>
    454a:	f8 01       	movw	r30, r16
    454c:	91 8d       	ldd	r25, Z+25	; 0x19
    454e:	83 85       	ldd	r24, Z+11	; 0x0b
    4550:	98 17       	cp	r25, r24
    4552:	58 f4       	brcc	.+22     	; 0x456a <MS_Device_USBTask+0x9a>
    4554:	80 8d       	ldd	r24, Z+24	; 0x18
	    (MSInterfaceInfo->State.CommandBlock.LUN               >= MSInterfaceInfo->Config.TotalLUNs) ||
		(MSInterfaceInfo->State.CommandBlock.Flags              & 0x1F)                              ||
    4556:	90 e0       	ldi	r25, 0x00	; 0
    4558:	8f 71       	andi	r24, 0x1F	; 31
    455a:	90 70       	andi	r25, 0x00	; 0
    455c:	00 97       	sbiw	r24, 0x00	; 0
		if (MSInterfaceInfo->State.IsMassStoreReset)
		  return false;
	}

	if ((MSInterfaceInfo->State.CommandBlock.Signature         != CPU_TO_LE32(MS_CBW_SIGNATURE))     ||
	    (MSInterfaceInfo->State.CommandBlock.LUN               >= MSInterfaceInfo->Config.TotalLUNs) ||
    455e:	29 f4       	brne	.+10     	; 0x456a <MS_Device_USBTask+0x9a>
    4560:	82 8d       	ldd	r24, Z+26	; 0x1a
		(MSInterfaceInfo->State.CommandBlock.Flags              & 0x1F)                              ||
		(MSInterfaceInfo->State.CommandBlock.SCSICommandLength == 0)                                 ||
    4562:	88 23       	and	r24, r24
		  return false;
	}

	if ((MSInterfaceInfo->State.CommandBlock.Signature         != CPU_TO_LE32(MS_CBW_SIGNATURE))     ||
	    (MSInterfaceInfo->State.CommandBlock.LUN               >= MSInterfaceInfo->Config.TotalLUNs) ||
		(MSInterfaceInfo->State.CommandBlock.Flags              & 0x1F)                              ||
    4564:	11 f0       	breq	.+4      	; 0x456a <MS_Device_USBTask+0x9a>
    4566:	81 31       	cpi	r24, 0x11	; 17
		(MSInterfaceInfo->State.CommandBlock.SCSICommandLength == 0)                                 ||
    4568:	80 f0       	brcs	.+32     	; 0x458a <MS_Device_USBTask+0xba>
    456a:	80 91 eb 00 	lds	r24, 0x00EB
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    456e:	80 62       	ori	r24, 0x20	; 32
    4570:	80 93 eb 00 	sts	0x00EB, r24
    4574:	f8 01       	movw	r30, r16
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    4576:	81 81       	ldd	r24, Z+1	; 0x01
    4578:	8f 70       	andi	r24, 0x0F	; 15
    457a:	80 93 e9 00 	sts	0x00E9, r24
    457e:	80 91 eb 00 	lds	r24, 0x00EB
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    4582:	80 62       	ori	r24, 0x20	; 32
    4584:	80 93 eb 00 	sts	0x00EB, r24
    4588:	85 c0       	rjmp	.+266    	; 0x4694 <MS_Device_USBTask+0x1c4>
    458a:	1a 82       	std	Y+2, r1	; 0x02
		Endpoint_StallTransaction();

		return false;
	}

	BytesProcessed = 0;
    458c:	19 82       	std	Y+1, r1	; 0x01
    458e:	9b e1       	ldi	r25, 0x1B	; 27
	while (Endpoint_Read_Stream_LE(&MSInterfaceInfo->State.CommandBlock.SCSICommandData,
    4590:	e9 2e       	mov	r14, r25
    4592:	f1 2c       	mov	r15, r1
    4594:	e0 0e       	add	r14, r16
    4596:	f1 1e       	adc	r15, r17
    4598:	05 c0       	rjmp	.+10     	; 0x45a4 <MS_Device_USBTask+0xd4>
    459a:	f8 01       	movw	r30, r16
	                                MSInterfaceInfo->State.CommandBlock.SCSICommandLength, &BytesProcessed) ==
	                                ENDPOINT_RWSTREAM_IncompleteTransfer)
	{
		if (MSInterfaceInfo->State.IsMassStoreReset)
    459c:	80 ad       	sts	0x60, r24
    459e:	88 23       	and	r24, r24
    45a0:	09 f0       	breq	.+2      	; 0x45a4 <MS_Device_USBTask+0xd4>
    45a2:	78 c0       	rjmp	.+240    	; 0x4694 <MS_Device_USBTask+0x1c4>
    45a4:	f8 01       	movw	r30, r16

		return false;
	}

	BytesProcessed = 0;
	while (Endpoint_Read_Stream_LE(&MSInterfaceInfo->State.CommandBlock.SCSICommandData,
    45a6:	62 8d       	ldd	r22, Z+26	; 0x1a
    45a8:	c7 01       	movw	r24, r14
    45aa:	70 e0       	ldi	r23, 0x00	; 0
    45ac:	ae 01       	movw	r20, r28
    45ae:	4f 5f       	subi	r20, 0xFF	; 255
    45b0:	5f 4f       	sbci	r21, 0xFF	; 255
    45b2:	2a d8       	rcall	.-4012   	; 0x3608 <Endpoint_Read_Stream_LE>
    45b4:	85 30       	cpi	r24, 0x05	; 5
    45b6:	89 f3       	breq	.-30     	; 0x459a <MS_Device_USBTask+0xca>
    45b8:	80 91 e8 00 	lds	r24, 0x00E8
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    45bc:	8b 77       	andi	r24, 0x7B	; 123
    45be:	80 93 e8 00 	sts	0x00E8, r24
    45c2:	f8 01       	movw	r30, r16
    45c4:	80 8d       	ldd	r24, Z+24	; 0x18

	if (Endpoint_IsOUTReceived())
	{
		if (MS_Device_ReadInCommandBlock(MSInterfaceInfo))
		{
			if (MSInterfaceInfo->State.CommandBlock.Flags & MS_COMMAND_DIR_DATA_IN)
    45c6:	87 ff       	sbrs	r24, 7
    45c8:	04 c0       	rjmp	.+8      	; 0x45d2 <MS_Device_USBTask+0x102>
    45ca:	81 81       	ldd	r24, Z+1	; 0x01
    45cc:	8f 70       	andi	r24, 0x0F	; 15
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    45ce:	80 93 e9 00 	sts	0x00E9, r24
    45d2:	c8 01       	movw	r24, r16
    45d4:	0e 94 00 03 	call	0x600	; 0x600 <CALLBACK_MS_Device_SCSICommandReceived>
			  Endpoint_SelectEndpoint(MSInterfaceInfo->Config.DataINEndpoint.Address);

			bool SCSICommandResult = CALLBACK_MS_Device_SCSICommandReceived(MSInterfaceInfo);
    45d8:	91 e0       	ldi	r25, 0x01	; 1
    45da:	98 27       	eor	r25, r24
	  return false;

	return true;
}

void MS_Device_USBTask(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
    45dc:	f8 01       	movw	r30, r16
    45de:	97 ab       	sts	0x57, r25
			if (MSInterfaceInfo->State.CommandBlock.Flags & MS_COMMAND_DIR_DATA_IN)
			  Endpoint_SelectEndpoint(MSInterfaceInfo->Config.DataINEndpoint.Address);

			bool SCSICommandResult = CALLBACK_MS_Device_SCSICommandReceived(MSInterfaceInfo);

			MSInterfaceInfo->State.CommandStatus.Status              = (SCSICommandResult) ? MS_SCSI_COMMAND_Pass : MS_SCSI_COMMAND_Fail;
    45e0:	45 e5       	ldi	r20, 0x55	; 85
    45e2:	53 e5       	ldi	r21, 0x53	; 83
			MSInterfaceInfo->State.CommandStatus.Signature           = CPU_TO_LE32(MS_CSW_SIGNATURE);
    45e4:	62 e4       	ldi	r22, 0x42	; 66
    45e6:	73 e5       	ldi	r23, 0x53	; 83
    45e8:	43 a7       	lds	r20, 0x73
    45ea:	54 a7       	lds	r21, 0x74
    45ec:	65 a7       	lds	r22, 0x75
    45ee:	76 a7       	lds	r23, 0x76
    45f0:	40 89       	ldd	r20, Z+16	; 0x10
    45f2:	51 89       	ldd	r21, Z+17	; 0x11
			MSInterfaceInfo->State.CommandStatus.Tag                 = MSInterfaceInfo->State.CommandBlock.Tag;
    45f4:	62 89       	ldd	r22, Z+18	; 0x12
    45f6:	73 89       	ldd	r23, Z+19	; 0x13
    45f8:	47 a7       	lds	r20, 0x77
    45fa:	50 ab       	sts	0x50, r21
    45fc:	61 ab       	sts	0x51, r22
    45fe:	72 ab       	sts	0x52, r23
    4600:	44 89       	ldd	r20, Z+20	; 0x14
    4602:	55 89       	ldd	r21, Z+21	; 0x15
			MSInterfaceInfo->State.CommandStatus.DataTransferResidue = MSInterfaceInfo->State.CommandBlock.DataTransferLength;
    4604:	66 89       	ldd	r22, Z+22	; 0x16
    4606:	77 89       	ldd	r23, Z+23	; 0x17
    4608:	43 ab       	sts	0x53, r20
    460a:	54 ab       	sts	0x54, r21
    460c:	65 ab       	sts	0x55, r22
    460e:	76 ab       	sts	0x56, r23
    4610:	88 23       	and	r24, r24
    4612:	51 f4       	brne	.+20     	; 0x4628 <MS_Device_USBTask+0x158>

			if (!(SCSICommandResult) && (le32_to_cpu(MSInterfaceInfo->State.CommandStatus.DataTransferResidue)))
    4614:	41 15       	cp	r20, r1
    4616:	51 05       	cpc	r21, r1
    4618:	61 05       	cpc	r22, r1
    461a:	71 05       	cpc	r23, r1
    461c:	29 f0       	breq	.+10     	; 0x4628 <MS_Device_USBTask+0x158>
    461e:	80 91 eb 00 	lds	r24, 0x00EB
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    4622:	80 62       	ori	r24, 0x20	; 32
    4624:	80 93 eb 00 	sts	0x00EB, r24
    4628:	f8 01       	movw	r30, r16
    462a:	86 81       	ldd	r24, Z+6	; 0x06
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    462c:	8f 70       	andi	r24, 0x0F	; 15
    462e:	80 93 e9 00 	sts	0x00E9, r24
    4632:	03 c0       	rjmp	.+6      	; 0x463a <MS_Device_USBTask+0x16a>
    4634:	80 ad       	sts	0x60, r24
    4636:	88 23       	and	r24, r24
	{
		#if !defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_USBTask();
		#endif

		if (MSInterfaceInfo->State.IsMassStoreReset)
    4638:	69 f5       	brne	.+90     	; 0x4694 <MS_Device_USBTask+0x1c4>
    463a:	80 91 eb 00 	lds	r24, 0x00EB
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    463e:	f8 01       	movw	r30, r16
    4640:	85 fd       	sbrc	r24, 5
    4642:	f8 cf       	rjmp	.-16     	; 0x4634 <MS_Device_USBTask+0x164>

static void MS_Device_ReturnCommandStatus(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
	Endpoint_SelectEndpoint(MSInterfaceInfo->Config.DataOUTEndpoint.Address);

	while (Endpoint_IsStalled())
    4644:	81 81       	ldd	r24, Z+1	; 0x01
    4646:	8f 70       	andi	r24, 0x0F	; 15
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    4648:	80 93 e9 00 	sts	0x00E9, r24
    464c:	04 c0       	rjmp	.+8      	; 0x4656 <MS_Device_USBTask+0x186>
    464e:	f8 01       	movw	r30, r16
    4650:	80 ad       	sts	0x60, r24
	{
		#if !defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_USBTask();
		#endif

		if (MSInterfaceInfo->State.IsMassStoreReset)
    4652:	88 23       	and	r24, r24
    4654:	f9 f4       	brne	.+62     	; 0x4694 <MS_Device_USBTask+0x1c4>
    4656:	80 91 eb 00 	lds	r24, 0x00EB
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    465a:	85 fd       	sbrc	r24, 5
    465c:	f8 cf       	rjmp	.-16     	; 0x464e <MS_Device_USBTask+0x17e>
		  return;
	}

	Endpoint_SelectEndpoint(MSInterfaceInfo->Config.DataINEndpoint.Address);

	while (Endpoint_IsStalled())
    465e:	1a 82       	std	Y+2, r1	; 0x02
    4660:	19 82       	std	Y+1, r1	; 0x01

		if (MSInterfaceInfo->State.IsMassStoreReset)
		  return;
	}

	uint16_t BytesProcessed = 0;
    4662:	8b e2       	ldi	r24, 0x2B	; 43
    4664:	e8 2e       	mov	r14, r24
	while (Endpoint_Write_Stream_LE(&MSInterfaceInfo->State.CommandStatus,
    4666:	f1 2c       	mov	r15, r1
    4668:	e0 0e       	add	r14, r16
    466a:	f1 1e       	adc	r15, r17
    466c:	04 c0       	rjmp	.+8      	; 0x4676 <MS_Device_USBTask+0x1a6>
    466e:	f8 01       	movw	r30, r16
    4670:	80 ad       	sts	0x60, r24
	                                sizeof(MS_CommandStatusWrapper_t), &BytesProcessed) ==
	                                ENDPOINT_RWSTREAM_IncompleteTransfer)
	{
		if (MSInterfaceInfo->State.IsMassStoreReset)
    4672:	88 23       	and	r24, r24
    4674:	79 f4       	brne	.+30     	; 0x4694 <MS_Device_USBTask+0x1c4>
    4676:	c7 01       	movw	r24, r14
    4678:	6d e0       	ldi	r22, 0x0D	; 13
		if (MSInterfaceInfo->State.IsMassStoreReset)
		  return;
	}

	uint16_t BytesProcessed = 0;
	while (Endpoint_Write_Stream_LE(&MSInterfaceInfo->State.CommandStatus,
    467a:	70 e0       	ldi	r23, 0x00	; 0
    467c:	ae 01       	movw	r20, r28
    467e:	4f 5f       	subi	r20, 0xFF	; 255
    4680:	5f 4f       	sbci	r21, 0xFF	; 255
    4682:	0e 94 5f 1a 	call	0x34be	; 0x34be <Endpoint_Write_Stream_LE>
    4686:	85 30       	cpi	r24, 0x05	; 5
    4688:	91 f3       	breq	.-28     	; 0x466e <MS_Device_USBTask+0x19e>
    468a:	80 91 e8 00 	lds	r24, 0x00E8
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    468e:	8e 77       	andi	r24, 0x7E	; 126
    4690:	80 93 e8 00 	sts	0x00E8, r24
    4694:	f8 01       	movw	r30, r16
    4696:	80 ad       	sts	0x60, r24

			MS_Device_ReturnCommandStatus(MSInterfaceInfo);
		}
	}

	if (MSInterfaceInfo->State.IsMassStoreReset)
    4698:	88 23       	and	r24, r24
    469a:	b1 f1       	breq	.+108    	; 0x4708 <MS_Device_USBTask+0x238>
    469c:	26 81       	ldd	r18, Z+6	; 0x06
    469e:	2f 70       	andi	r18, 0x0F	; 15
			 *  \param[in] Address  Endpoint address whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t Address)
			{
				UERST = (1 << (Address & ENDPOINT_EPNUM_MASK));
    46a0:	81 e0       	ldi	r24, 0x01	; 1
    46a2:	90 e0       	ldi	r25, 0x00	; 0
    46a4:	ac 01       	movw	r20, r24
    46a6:	02 c0       	rjmp	.+4      	; 0x46ac <MS_Device_USBTask+0x1dc>
    46a8:	44 0f       	add	r20, r20
    46aa:	55 1f       	adc	r21, r21
    46ac:	2a 95       	dec	r18
    46ae:	e2 f7       	brpl	.-8      	; 0x46a8 <MS_Device_USBTask+0x1d8>
    46b0:	40 93 ea 00 	sts	0x00EA, r20
    46b4:	10 92 ea 00 	sts	0x00EA, r1
				UERST = 0;
    46b8:	21 81       	ldd	r18, Z+1	; 0x01
    46ba:	2f 70       	andi	r18, 0x0F	; 15
			 *  \param[in] Address  Endpoint address whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t Address)
			{
				UERST = (1 << (Address & ENDPOINT_EPNUM_MASK));
    46bc:	02 c0       	rjmp	.+4      	; 0x46c2 <MS_Device_USBTask+0x1f2>
    46be:	88 0f       	add	r24, r24
    46c0:	99 1f       	adc	r25, r25
    46c2:	2a 95       	dec	r18
    46c4:	e2 f7       	brpl	.-8      	; 0x46be <MS_Device_USBTask+0x1ee>
    46c6:	80 93 ea 00 	sts	0x00EA, r24
    46ca:	10 92 ea 00 	sts	0x00EA, r1
				UERST = 0;
    46ce:	86 81       	ldd	r24, Z+6	; 0x06
    46d0:	8f 70       	andi	r24, 0x0F	; 15
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    46d2:	80 93 e9 00 	sts	0x00E9, r24
    46d6:	80 91 eb 00 	lds	r24, 0x00EB
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
    46da:	80 61       	ori	r24, 0x10	; 16
    46dc:	80 93 eb 00 	sts	0x00EB, r24
    46e0:	80 91 eb 00 	lds	r24, 0x00EB

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
    46e4:	88 60       	ori	r24, 0x08	; 8
    46e6:	80 93 eb 00 	sts	0x00EB, r24
    46ea:	81 81       	ldd	r24, Z+1	; 0x01
    46ec:	8f 70       	andi	r24, 0x0F	; 15
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    46ee:	80 93 e9 00 	sts	0x00E9, r24
    46f2:	80 91 eb 00 	lds	r24, 0x00EB
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
    46f6:	80 61       	ori	r24, 0x10	; 16
    46f8:	80 93 eb 00 	sts	0x00EB, r24
    46fc:	80 91 eb 00 	lds	r24, 0x00EB

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
    4700:	88 60       	ori	r24, 0x08	; 8
    4702:	80 93 eb 00 	sts	0x00EB, r24
    4706:	10 ae       	sts	0xb0, r17
    4708:	0f 90       	pop	r0
		Endpoint_ResetDataToggle();
		Endpoint_SelectEndpoint(MSInterfaceInfo->Config.DataINEndpoint.Address);
		Endpoint_ClearStall();
		Endpoint_ResetDataToggle();

		MSInterfaceInfo->State.IsMassStoreReset = false;
    470a:	0f 90       	pop	r0
	}
}
    470c:	df 91       	pop	r29
    470e:	cf 91       	pop	r28
    4710:	1f 91       	pop	r17
    4712:	0f 91       	pop	r16
    4714:	ff 90       	pop	r15
    4716:	ef 90       	pop	r14
    4718:	08 95       	ret

0000471a <TWI_StartTransmission>:
	for (;;)
	{
		bool     BusCaptured = false;
		uint16_t TimeoutRemaining;

		TWCR = ((1 << TWINT) | (1 << TWSTA) | (1 << TWEN));
    471a:	94 ea       	ldi	r25, 0xA4	; 164
    471c:	90 93 bc 00 	sts	0x00BC, r25

		TimeoutRemaining = (TimeoutMS * 100);
    4720:	94 e6       	ldi	r25, 0x64	; 100
    4722:	69 9f       	mul	r22, r25
    4724:	b0 01       	movw	r22, r0
    4726:	11 24       	eor	r1, r1
    4728:	ab 01       	movw	r20, r22
uint8_t TWI_StartTransmission(const uint8_t SlaveAddress,
                              const uint8_t TimeoutMS)
{
	for (;;)
	{
		bool     BusCaptured = false;
    472a:	90 e0       	ldi	r25, 0x00	; 0
					case TW_START:
					case TW_REP_START:
						BusCaptured = true;
						break;
					case TW_MT_ARB_LOST:
						TWCR = ((1 << TWINT) | (1 << TWSTA) | (1 << TWEN));
    472c:	e4 ea       	ldi	r30, 0xA4	; 164
		uint16_t TimeoutRemaining;

		TWCR = ((1 << TWINT) | (1 << TWSTA) | (1 << TWEN));

		TimeoutRemaining = (TimeoutMS * 100);
		while (TimeoutRemaining && !(BusCaptured))
    472e:	22 c0       	rjmp	.+68     	; 0x4774 <TWI_StartTransmission+0x5a>
		{
			if (TWCR & (1 << TWINT))
    4730:	20 91 bc 00 	lds	r18, 0x00BC
    4734:	27 ff       	sbrs	r18, 7
    4736:	18 c0       	rjmp	.+48     	; 0x4768 <TWI_StartTransmission+0x4e>
			{
				switch (TWSR & TW_STATUS_MASK)
    4738:	20 91 b9 00 	lds	r18, 0x00B9
    473c:	30 e0       	ldi	r19, 0x00	; 0
    473e:	28 7f       	andi	r18, 0xF8	; 248
    4740:	30 70       	andi	r19, 0x00	; 0
    4742:	20 31       	cpi	r18, 0x10	; 16
    4744:	31 05       	cpc	r19, r1
    4746:	79 f0       	breq	.+30     	; 0x4766 <TWI_StartTransmission+0x4c>
    4748:	28 33       	cpi	r18, 0x38	; 56
    474a:	31 05       	cpc	r19, r1
    474c:	21 f0       	breq	.+8      	; 0x4756 <TWI_StartTransmission+0x3c>
    474e:	28 30       	cpi	r18, 0x08	; 8
    4750:	31 05       	cpc	r19, r1
    4752:	21 f4       	brne	.+8      	; 0x475c <TWI_StartTransmission+0x42>
    4754:	08 c0       	rjmp	.+16     	; 0x4766 <TWI_StartTransmission+0x4c>
					case TW_START:
					case TW_REP_START:
						BusCaptured = true;
						break;
					case TW_MT_ARB_LOST:
						TWCR = ((1 << TWINT) | (1 << TWSTA) | (1 << TWEN));
    4756:	e0 93 bc 00 	sts	0x00BC, r30
						continue;
    475a:	0c c0       	rjmp	.+24     	; 0x4774 <TWI_StartTransmission+0x5a>
					default:
						TWCR = (1 << TWEN);
    475c:	84 e0       	ldi	r24, 0x04	; 4
    475e:	80 93 bc 00 	sts	0x00BC, r24
						return TWI_ERROR_BusFault;
    4762:	81 e0       	ldi	r24, 0x01	; 1
    4764:	08 95       	ret
			{
				switch (TWSR & TW_STATUS_MASK)
				{
					case TW_START:
					case TW_REP_START:
						BusCaptured = true;
    4766:	91 e0       	ldi	r25, 0x01	; 1
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    4768:	2a e1       	ldi	r18, 0x1A	; 26
    476a:	2a 95       	dec	r18
    476c:	f1 f7       	brne	.-4      	; 0x476a <TWI_StartTransmission+0x50>
    476e:	00 c0       	rjmp	.+0      	; 0x4770 <TWI_StartTransmission+0x56>
						return TWI_ERROR_BusFault;
				}
			}

			_delay_us(10);
			TimeoutRemaining--;
    4770:	41 50       	subi	r20, 0x01	; 1
    4772:	50 40       	sbci	r21, 0x00	; 0
		uint16_t TimeoutRemaining;

		TWCR = ((1 << TWINT) | (1 << TWSTA) | (1 << TWEN));

		TimeoutRemaining = (TimeoutMS * 100);
		while (TimeoutRemaining && !(BusCaptured))
    4774:	41 15       	cp	r20, r1
    4776:	51 05       	cpc	r21, r1
    4778:	19 f0       	breq	.+6      	; 0x4780 <TWI_StartTransmission+0x66>
    477a:	99 23       	and	r25, r25
    477c:	c9 f2       	breq	.-78     	; 0x4730 <TWI_StartTransmission+0x16>
    477e:	26 c0       	rjmp	.+76     	; 0x47cc <TWI_StartTransmission+0xb2>
			TimeoutRemaining--;
		}

		if (!(TimeoutRemaining))
		{
			TWCR = (1 << TWEN);
    4780:	84 e0       	ldi	r24, 0x04	; 4
    4782:	80 93 bc 00 	sts	0x00BC, r24
			return TWI_ERROR_BusCaptureTimeout;
    4786:	82 e0       	ldi	r24, 0x02	; 2
    4788:	08 95       	ret
		TWCR = ((1 << TWINT) | (1 << TWEN));

		TimeoutRemaining = (TimeoutMS * 100);
		while (TimeoutRemaining)
		{
			if (TWCR & (1 << TWINT))
    478a:	80 91 bc 00 	lds	r24, 0x00BC
    478e:	87 fd       	sbrc	r24, 7
    4790:	0b c0       	rjmp	.+22     	; 0x47a8 <TWI_StartTransmission+0x8e>
    4792:	8a e1       	ldi	r24, 0x1A	; 26
    4794:	8a 95       	dec	r24
    4796:	f1 f7       	brne	.-4      	; 0x4794 <TWI_StartTransmission+0x7a>
    4798:	00 c0       	rjmp	.+0      	; 0x479a <TWI_StartTransmission+0x80>
			  break;

			_delay_us(10);
			TimeoutRemaining--;
    479a:	61 50       	subi	r22, 0x01	; 1
    479c:	70 40       	sbci	r23, 0x00	; 0

		TWDR = SlaveAddress;
		TWCR = ((1 << TWINT) | (1 << TWEN));

		TimeoutRemaining = (TimeoutMS * 100);
		while (TimeoutRemaining)
    479e:	61 15       	cp	r22, r1
    47a0:	71 05       	cpc	r23, r1
    47a2:	99 f7       	brne	.-26     	; 0x478a <TWI_StartTransmission+0x70>
			_delay_us(10);
			TimeoutRemaining--;
		}

		if (!(TimeoutRemaining))
		  return TWI_ERROR_SlaveResponseTimeout;
    47a4:	83 e0       	ldi	r24, 0x03	; 3
    47a6:	08 95       	ret

		switch (TWSR & TW_STATUS_MASK)
    47a8:	80 91 b9 00 	lds	r24, 0x00B9
    47ac:	90 e0       	ldi	r25, 0x00	; 0
    47ae:	88 7f       	andi	r24, 0xF8	; 248
    47b0:	90 70       	andi	r25, 0x00	; 0
    47b2:	88 31       	cpi	r24, 0x18	; 24
    47b4:	91 05       	cpc	r25, r1
    47b6:	41 f0       	breq	.+16     	; 0x47c8 <TWI_StartTransmission+0xae>
    47b8:	80 34       	cpi	r24, 0x40	; 64
    47ba:	91 05       	cpc	r25, r1
    47bc:	29 f0       	breq	.+10     	; 0x47c8 <TWI_StartTransmission+0xae>
		{
			case TW_MT_SLA_ACK:
			case TW_MR_SLA_ACK:
				return TWI_ERROR_NoError;
			default:
				TWCR = ((1 << TWINT) | (1 << TWSTO) | (1 << TWEN));
    47be:	84 e9       	ldi	r24, 0x94	; 148
    47c0:	80 93 bc 00 	sts	0x00BC, r24
				return TWI_ERROR_SlaveNotReady;
    47c4:	84 e0       	ldi	r24, 0x04	; 4
    47c6:	08 95       	ret

		switch (TWSR & TW_STATUS_MASK)
		{
			case TW_MT_SLA_ACK:
			case TW_MR_SLA_ACK:
				return TWI_ERROR_NoError;
    47c8:	80 e0       	ldi	r24, 0x00	; 0
			default:
				TWCR = ((1 << TWINT) | (1 << TWSTO) | (1 << TWEN));
				return TWI_ERROR_SlaveNotReady;
		}
	}
}
    47ca:	08 95       	ret
		{
			TWCR = (1 << TWEN);
			return TWI_ERROR_BusCaptureTimeout;
		}

		TWDR = SlaveAddress;
    47cc:	80 93 bb 00 	sts	0x00BB, r24
		TWCR = ((1 << TWINT) | (1 << TWEN));
    47d0:	84 e8       	ldi	r24, 0x84	; 132
    47d2:	80 93 bc 00 	sts	0x00BC, r24

		TimeoutRemaining = (TimeoutMS * 100);
		while (TimeoutRemaining)
    47d6:	e3 cf       	rjmp	.-58     	; 0x479e <TWI_StartTransmission+0x84>

000047d8 <TWI_SendByte>:
	}
}

bool TWI_SendByte(const uint8_t Byte)
{
	TWDR = Byte;
    47d8:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = ((1 << TWINT) | (1 << TWEN));
    47dc:	84 e8       	ldi	r24, 0x84	; 132
    47de:	80 93 bc 00 	sts	0x00BC, r24
	while (!(TWCR & (1 << TWINT)));
    47e2:	80 91 bc 00 	lds	r24, 0x00BC
    47e6:	87 ff       	sbrs	r24, 7
    47e8:	fc cf       	rjmp	.-8      	; 0x47e2 <TWI_SendByte+0xa>

	return ((TWSR & TW_STATUS_MASK) == TW_MT_DATA_ACK);
    47ea:	90 91 b9 00 	lds	r25, 0x00B9
    47ee:	98 7f       	andi	r25, 0xF8	; 248
    47f0:	81 e0       	ldi	r24, 0x01	; 1
    47f2:	98 32       	cpi	r25, 0x28	; 40
    47f4:	09 f0       	breq	.+2      	; 0x47f8 <TWI_SendByte+0x20>
    47f6:	80 e0       	ldi	r24, 0x00	; 0
}
    47f8:	08 95       	ret

000047fa <TWI_ReceiveByte>:
bool TWI_ReceiveByte(uint8_t* const Byte,
					 const bool LastByte)
{
	uint8_t TWCRMask;

	if (LastByte)
    47fa:	66 23       	and	r22, r22
    47fc:	11 f0       	breq	.+4      	; 0x4802 <TWI_ReceiveByte+0x8>
	  TWCRMask = ((1 << TWINT) | (1 << TWEN));
    47fe:	24 e8       	ldi	r18, 0x84	; 132
    4800:	01 c0       	rjmp	.+2      	; 0x4804 <TWI_ReceiveByte+0xa>
	else
	  TWCRMask = ((1 << TWINT) | (1 << TWEN) | (1 << TWEA));
    4802:	24 ec       	ldi	r18, 0xC4	; 196

	TWCR = TWCRMask;
    4804:	20 93 bc 00 	sts	0x00BC, r18
	while (!(TWCR & (1 << TWINT)));
    4808:	20 91 bc 00 	lds	r18, 0x00BC
    480c:	27 ff       	sbrs	r18, 7
    480e:	fc cf       	rjmp	.-8      	; 0x4808 <TWI_ReceiveByte+0xe>
	*Byte = TWDR;
    4810:	20 91 bb 00 	lds	r18, 0x00BB
    4814:	fc 01       	movw	r30, r24
    4816:	20 83       	st	Z, r18

	uint8_t Status = (TWSR & TW_STATUS_MASK);
    4818:	90 91 b9 00 	lds	r25, 0x00B9
    481c:	98 7f       	andi	r25, 0xF8	; 248

	return ((LastByte) ? (Status == TW_MR_DATA_NACK) : (Status == TW_MR_DATA_ACK));
    481e:	81 e0       	ldi	r24, 0x01	; 1
    4820:	66 23       	and	r22, r22
    4822:	21 f0       	breq	.+8      	; 0x482c <TWI_ReceiveByte+0x32>
    4824:	98 35       	cpi	r25, 0x58	; 88
    4826:	29 f0       	breq	.+10     	; 0x4832 <TWI_ReceiveByte+0x38>
    4828:	80 e0       	ldi	r24, 0x00	; 0
    482a:	08 95       	ret
    482c:	90 35       	cpi	r25, 0x50	; 80
    482e:	09 f0       	breq	.+2      	; 0x4832 <TWI_ReceiveByte+0x38>
    4830:	80 e0       	ldi	r24, 0x00	; 0
}
    4832:	08 95       	ret

00004834 <TWI_ReadPacket>:
                       const uint8_t TimeoutMS,
                       const uint8_t* InternalAddress,
                       uint8_t InternalAddressLen,
                       uint8_t* Buffer,
                       uint8_t Length)
{
    4834:	af 92       	push	r10
    4836:	bf 92       	push	r11
    4838:	df 92       	push	r13
    483a:	ef 92       	push	r14
    483c:	ff 92       	push	r15
    483e:	0f 93       	push	r16
    4840:	1f 93       	push	r17
    4842:	cf 93       	push	r28
    4844:	df 93       	push	r29
    4846:	d8 2f       	mov	r29, r24
    4848:	c6 2f       	mov	r28, r22
    484a:	5a 01       	movw	r10, r20
    484c:	f2 2e       	mov	r15, r18
	uint8_t ErrorCode;

	if ((ErrorCode = TWI_StartTransmission((SlaveAddress & TWI_DEVICE_ADDRESS_MASK) | TWI_ADDRESS_WRITE,
    484e:	8e 7f       	andi	r24, 0xFE	; 254
    4850:	64 df       	rcall	.-312    	; 0x471a <TWI_StartTransmission>
    4852:	d8 2e       	mov	r13, r24
    4854:	88 23       	and	r24, r24
    4856:	41 f0       	breq	.+16     	; 0x4868 <TWI_ReadPacket+0x34>
    4858:	24 c0       	rjmp	.+72     	; 0x48a2 <TWI_ReadPacket+0x6e>
    485a:	f5 01       	movw	r30, r10
	                                       TimeoutMS)) == TWI_ERROR_NoError)
	{
		while (InternalAddressLen--)
		{
			if (!(TWI_SendByte(*(InternalAddress++))))
    485c:	81 91       	ld	r24, Z+
    485e:	5f 01       	movw	r10, r30
    4860:	bb df       	rcall	.-138    	; 0x47d8 <TWI_SendByte>
    4862:	fa 94       	dec	r15
    4864:	88 23       	and	r24, r24
    4866:	11 f0       	breq	.+4      	; 0x486c <TWI_ReadPacket+0x38>
    4868:	ff 20       	and	r15, r15
    486a:	b9 f7       	brne	.-18     	; 0x485a <TWI_ReadPacket+0x26>
	uint8_t ErrorCode;

	if ((ErrorCode = TWI_StartTransmission((SlaveAddress & TWI_DEVICE_ADDRESS_MASK) | TWI_ADDRESS_WRITE,
	                                       TimeoutMS)) == TWI_ERROR_NoError)
	{
		while (InternalAddressLen--)
    486c:	8d 2f       	mov	r24, r29
    486e:	81 60       	ori	r24, 0x01	; 1
				ErrorCode = TWI_ERROR_SlaveNAK;
				break;
			}
		}

		if ((ErrorCode = TWI_StartTransmission((SlaveAddress & TWI_DEVICE_ADDRESS_MASK) | TWI_ADDRESS_READ,
    4870:	6c 2f       	mov	r22, r28
    4872:	53 df       	rcall	.-346    	; 0x471a <TWI_StartTransmission>
    4874:	d8 2e       	mov	r13, r24
    4876:	88 23       	and	r24, r24
    4878:	61 f0       	breq	.+24     	; 0x4892 <TWI_ReadPacket+0x5e>
    487a:	13 c0       	rjmp	.+38     	; 0x48a2 <TWI_ReadPacket+0x6e>
    487c:	ea 94       	dec	r14
    487e:	e8 01       	movw	r28, r16
    4880:	21 96       	adiw	r28, 0x01	; 1
											   TimeoutMS)) == TWI_ERROR_NoError)
		{
			while (Length--)
    4882:	61 e0       	ldi	r22, 0x01	; 1
			{
				if (!(TWI_ReceiveByte(Buffer++, (Length == 0))))
    4884:	e1 10       	cpse	r14, r1
    4886:	60 e0       	ldi	r22, 0x00	; 0
    4888:	c8 01       	movw	r24, r16
    488a:	b7 df       	rcall	.-146    	; 0x47fa <TWI_ReceiveByte>
    488c:	88 23       	and	r24, r24
    488e:	21 f0       	breq	.+8      	; 0x4898 <TWI_ReadPacket+0x64>
    4890:	8e 01       	movw	r16, r28
    4892:	ee 20       	and	r14, r14
    4894:	99 f7       	brne	.-26     	; 0x487c <TWI_ReadPacket+0x48>
    4896:	02 c0       	rjmp	.+4      	; 0x489c <TWI_ReadPacket+0x68>
    4898:	85 e0       	ldi	r24, 0x05	; 5
		}

		if ((ErrorCode = TWI_StartTransmission((SlaveAddress & TWI_DEVICE_ADDRESS_MASK) | TWI_ADDRESS_READ,
											   TimeoutMS)) == TWI_ERROR_NoError)
		{
			while (Length--)
    489a:	d8 2e       	mov	r13, r24
    489c:	84 e9       	ldi	r24, 0x94	; 148
    489e:	80 93 bc 00 	sts	0x00BC, r24
			{
				if (!(TWI_ReceiveByte(Buffer++, (Length == 0))))
				{
					ErrorCode = TWI_ERROR_SlaveNAK;
    48a2:	8d 2d       	mov	r24, r13

			/** Sends a TWI STOP onto the TWI bus, terminating communication with the currently addressed device. */
			static inline void TWI_StopTransmission(void) ATTR_ALWAYS_INLINE;
			static inline void TWI_StopTransmission(void)
			{
				TWCR = ((1 << TWINT) | (1 << TWSTO) | (1 << TWEN));
    48a4:	df 91       	pop	r29
    48a6:	cf 91       	pop	r28
    48a8:	1f 91       	pop	r17
			TWI_StopTransmission();
		}
	}

	return ErrorCode;
}
    48aa:	0f 91       	pop	r16
    48ac:	ff 90       	pop	r15
    48ae:	ef 90       	pop	r14
    48b0:	df 90       	pop	r13
    48b2:	bf 90       	pop	r11
    48b4:	af 90       	pop	r10
    48b6:	08 95       	ret

000048b8 <TWI_WritePacket>:
    48b8:	cf 92       	push	r12
    48ba:	df 92       	push	r13
    48bc:	ef 92       	push	r14
    48be:	ff 92       	push	r15
                        const uint8_t TimeoutMS,
                        const uint8_t* InternalAddress,
                        uint8_t InternalAddressLen,
                        const uint8_t* Buffer,
                        uint8_t Length)
{
    48c0:	0f 93       	push	r16
    48c2:	1f 93       	push	r17
    48c4:	cf 93       	push	r28
    48c6:	df 93       	push	r29
    48c8:	6a 01       	movw	r12, r20
    48ca:	f2 2e       	mov	r15, r18
    48cc:	e8 01       	movw	r28, r16
	uint8_t ErrorCode;

	if ((ErrorCode = TWI_StartTransmission((SlaveAddress & TWI_DEVICE_ADDRESS_MASK) | TWI_ADDRESS_WRITE,
    48ce:	8e 7f       	andi	r24, 0xFE	; 254
    48d0:	24 df       	rcall	.-440    	; 0x471a <TWI_StartTransmission>
    48d2:	18 2f       	mov	r17, r24
    48d4:	88 23       	and	r24, r24
    48d6:	41 f0       	breq	.+16     	; 0x48e8 <TWI_WritePacket+0x30>
    48d8:	18 c0       	rjmp	.+48     	; 0x490a <TWI_WritePacket+0x52>
    48da:	f6 01       	movw	r30, r12
	                                       TimeoutMS)) == TWI_ERROR_NoError)
	{
		while (InternalAddressLen--)
		{
			if (!(TWI_SendByte(*(InternalAddress++))))
    48dc:	81 91       	ld	r24, Z+
    48de:	6f 01       	movw	r12, r30
    48e0:	7b df       	rcall	.-266    	; 0x47d8 <TWI_SendByte>
    48e2:	fa 94       	dec	r15
    48e4:	88 23       	and	r24, r24
    48e6:	49 f0       	breq	.+18     	; 0x48fa <TWI_WritePacket+0x42>
    48e8:	ff 20       	and	r15, r15
    48ea:	b9 f7       	brne	.-18     	; 0x48da <TWI_WritePacket+0x22>
	uint8_t ErrorCode;

	if ((ErrorCode = TWI_StartTransmission((SlaveAddress & TWI_DEVICE_ADDRESS_MASK) | TWI_ADDRESS_WRITE,
	                                       TimeoutMS)) == TWI_ERROR_NoError)
	{
		while (InternalAddressLen--)
    48ec:	07 c0       	rjmp	.+14     	; 0x48fc <TWI_WritePacket+0x44>
    48ee:	89 91       	ld	r24, Y+
    48f0:	73 df       	rcall	.-282    	; 0x47d8 <TWI_SendByte>
			}
		}

		while (Length--)
		{
			if (!(TWI_SendByte(*(Buffer++))))
    48f2:	ea 94       	dec	r14
    48f4:	88 23       	and	r24, r24
    48f6:	11 f4       	brne	.+4      	; 0x48fc <TWI_WritePacket+0x44>
    48f8:	04 c0       	rjmp	.+8      	; 0x4902 <TWI_WritePacket+0x4a>
    48fa:	15 e0       	ldi	r17, 0x05	; 5
    48fc:	ee 20       	and	r14, r14
    48fe:	b9 f7       	brne	.-18     	; 0x48ee <TWI_WritePacket+0x36>
	{
		while (InternalAddressLen--)
		{
			if (!(TWI_SendByte(*(InternalAddress++))))
			{
				ErrorCode = TWI_ERROR_SlaveNAK;
    4900:	01 c0       	rjmp	.+2      	; 0x4904 <TWI_WritePacket+0x4c>
				break;
			}
		}

		while (Length--)
    4902:	15 e0       	ldi	r17, 0x05	; 5
    4904:	84 e9       	ldi	r24, 0x94	; 148
    4906:	80 93 bc 00 	sts	0x00BC, r24
    490a:	81 2f       	mov	r24, r17
    490c:	df 91       	pop	r29
    490e:	cf 91       	pop	r28

		TWI_StopTransmission();
	}

	return ErrorCode;
}
    4910:	1f 91       	pop	r17
    4912:	0f 91       	pop	r16
    4914:	ff 90       	pop	r15
    4916:	ef 90       	pop	r14
    4918:	df 90       	pop	r13
    491a:	cf 90       	pop	r12
    491c:	08 95       	ret

0000491e <Temperature_GetTemperature>:
			 *
			 *  \param[in] MUXMask  ADC channel mask, reference mask and adjustment mask.
			 */
			static inline void ADC_StartReading(const uint16_t MUXMask)
			{
				ADMUX = MUXMask;
    491e:	80 e4       	ldi	r24, 0x40	; 64
    4920:	80 93 7c 00 	sts	0x007C, r24
				  ADCSRB |=  (1 << MUX5);
				else
				  ADCSRB &= ~(1 << MUX5);
				#endif

				ADCSRA |= (1 << ADSC);
    4924:	80 91 7a 00 	lds	r24, 0x007A
    4928:	80 64       	ori	r24, 0x40	; 64
    492a:	80 93 7a 00 	sts	0x007A, r24
			 *          complete and ready to be read out with \ref ADC_GetResult().
			 */
			static inline bool ADC_IsReadingComplete(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool ADC_IsReadingComplete(void)
			{
				return ((ADCSRA & (1 << ADIF)) ? true : false);
    492e:	80 91 7a 00 	lds	r24, 0x007A
			static inline uint16_t ADC_GetChannelReading(const uint16_t MUXMask) ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t ADC_GetChannelReading(const uint16_t MUXMask)
			{
				ADC_StartReading(MUXMask);

				while (!(ADC_IsReadingComplete()));
    4932:	84 ff       	sbrs	r24, 4
    4934:	fc cf       	rjmp	.-8      	; 0x492e <Temperature_GetTemperature+0x10>
			 *  \return The result of the last ADC conversion as an unsigned value.
			 */
			static inline uint16_t ADC_GetResult(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t ADC_GetResult(void)
			{
				ADCSRA |= (1 << ADIF);
    4936:	80 91 7a 00 	lds	r24, 0x007A
    493a:	80 61       	ori	r24, 0x10	; 16
    493c:	80 93 7a 00 	sts	0x007A, r24
				return ADC;
    4940:	40 91 78 00 	lds	r20, 0x0078
    4944:	50 91 79 00 	lds	r21, 0x0079

int8_t Temperature_GetTemperature(void)
{
	uint16_t Temp_ADC = ADC_GetChannelReading(ADC_REFERENCE_AVCC | ADC_RIGHT_ADJUSTED | TEMP_ADC_CHANNEL_MASK);

	if (Temp_ADC > pgm_read_word(&Temperature_Lookup[0]))
    4948:	e1 e5       	ldi	r30, 0x51	; 81
    494a:	f1 e0       	ldi	r31, 0x01	; 1
    494c:	85 91       	lpm	r24, Z+
    494e:	94 91       	lpm	r25, Z
    4950:	84 17       	cp	r24, r20
    4952:	95 07       	cpc	r25, r21
    4954:	b0 f0       	brcs	.+44     	; 0x4982 <Temperature_GetTemperature+0x64>
    4956:	20 e0       	ldi	r18, 0x00	; 0
    4958:	30 e0       	ldi	r19, 0x00	; 0
	  return TEMP_MIN_TEMP;

	for (uint16_t Index = 0; Index < TEMP_TABLE_SIZE; Index++)
	{
		if (Temp_ADC > pgm_read_word(&Temperature_Lookup[Index]))
    495a:	f9 01       	movw	r30, r18
    495c:	ee 0f       	add	r30, r30
    495e:	ff 1f       	adc	r31, r31
    4960:	ef 5a       	subi	r30, 0xAF	; 175
    4962:	fe 4f       	sbci	r31, 0xFE	; 254
    4964:	85 91       	lpm	r24, Z+
    4966:	94 91       	lpm	r25, Z
    4968:	84 17       	cp	r24, r20
    496a:	95 07       	cpc	r25, r21
    496c:	18 f4       	brcc	.+6      	; 0x4974 <Temperature_GetTemperature+0x56>
		  return (Index + TEMP_TABLE_OFFSET_DEGREES);
    496e:	82 2f       	mov	r24, r18
    4970:	85 51       	subi	r24, 0x15	; 21
    4972:	08 95       	ret
	uint16_t Temp_ADC = ADC_GetChannelReading(ADC_REFERENCE_AVCC | ADC_RIGHT_ADJUSTED | TEMP_ADC_CHANNEL_MASK);

	if (Temp_ADC > pgm_read_word(&Temperature_Lookup[0]))
	  return TEMP_MIN_TEMP;

	for (uint16_t Index = 0; Index < TEMP_TABLE_SIZE; Index++)
    4974:	2f 5f       	subi	r18, 0xFF	; 255
    4976:	3f 4f       	sbci	r19, 0xFF	; 255
    4978:	28 37       	cpi	r18, 0x78	; 120
    497a:	31 05       	cpc	r19, r1
    497c:	71 f7       	brne	.-36     	; 0x495a <Temperature_GetTemperature+0x3c>
	{
		if (Temp_ADC > pgm_read_word(&Temperature_Lookup[Index]))
		  return (Index + TEMP_TABLE_OFFSET_DEGREES);
	}

	return TEMP_MAX_TEMP;
    497e:	82 e6       	ldi	r24, 0x62	; 98
    4980:	08 95       	ret
int8_t Temperature_GetTemperature(void)
{
	uint16_t Temp_ADC = ADC_GetChannelReading(ADC_REFERENCE_AVCC | ADC_RIGHT_ADJUSTED | TEMP_ADC_CHANNEL_MASK);

	if (Temp_ADC > pgm_read_word(&Temperature_Lookup[0]))
	  return TEMP_MIN_TEMP;
    4982:	8b ee       	ldi	r24, 0xEB	; 235
		if (Temp_ADC > pgm_read_word(&Temperature_Lookup[Index]))
		  return (Index + TEMP_TABLE_OFFSET_DEGREES);
	}

	return TEMP_MAX_TEMP;
}
    4984:	08 95       	ret

00004986 <__mulsi3>:
    4986:	62 9f       	mul	r22, r18
    4988:	d0 01       	movw	r26, r0
    498a:	73 9f       	mul	r23, r19
    498c:	f0 01       	movw	r30, r0
    498e:	82 9f       	mul	r24, r18
    4990:	e0 0d       	add	r30, r0
    4992:	f1 1d       	adc	r31, r1
    4994:	64 9f       	mul	r22, r20
    4996:	e0 0d       	add	r30, r0
    4998:	f1 1d       	adc	r31, r1
    499a:	92 9f       	mul	r25, r18
    499c:	f0 0d       	add	r31, r0
    499e:	83 9f       	mul	r24, r19
    49a0:	f0 0d       	add	r31, r0
    49a2:	74 9f       	mul	r23, r20
    49a4:	f0 0d       	add	r31, r0
    49a6:	65 9f       	mul	r22, r21
    49a8:	f0 0d       	add	r31, r0
    49aa:	99 27       	eor	r25, r25
    49ac:	72 9f       	mul	r23, r18
    49ae:	b0 0d       	add	r27, r0
    49b0:	e1 1d       	adc	r30, r1
    49b2:	f9 1f       	adc	r31, r25
    49b4:	63 9f       	mul	r22, r19
    49b6:	b0 0d       	add	r27, r0
    49b8:	e1 1d       	adc	r30, r1
    49ba:	f9 1f       	adc	r31, r25
    49bc:	bd 01       	movw	r22, r26
    49be:	cf 01       	movw	r24, r30
    49c0:	11 24       	eor	r1, r1
    49c2:	08 95       	ret

000049c4 <__udivmodqi4>:
    49c4:	99 1b       	sub	r25, r25
    49c6:	79 e0       	ldi	r23, 0x09	; 9
    49c8:	04 c0       	rjmp	.+8      	; 0x49d2 <__udivmodqi4_ep>

000049ca <__udivmodqi4_loop>:
    49ca:	99 1f       	adc	r25, r25
    49cc:	96 17       	cp	r25, r22
    49ce:	08 f0       	brcs	.+2      	; 0x49d2 <__udivmodqi4_ep>
    49d0:	96 1b       	sub	r25, r22

000049d2 <__udivmodqi4_ep>:
    49d2:	88 1f       	adc	r24, r24
    49d4:	7a 95       	dec	r23
    49d6:	c9 f7       	brne	.-14     	; 0x49ca <__udivmodqi4_loop>
    49d8:	80 95       	com	r24
    49da:	08 95       	ret

000049dc <__udivmodsi4>:
    49dc:	a1 e2       	ldi	r26, 0x21	; 33
    49de:	1a 2e       	mov	r1, r26
    49e0:	aa 1b       	sub	r26, r26
    49e2:	bb 1b       	sub	r27, r27
    49e4:	fd 01       	movw	r30, r26
    49e6:	0d c0       	rjmp	.+26     	; 0x4a02 <__udivmodsi4_ep>

000049e8 <__udivmodsi4_loop>:
    49e8:	aa 1f       	adc	r26, r26
    49ea:	bb 1f       	adc	r27, r27
    49ec:	ee 1f       	adc	r30, r30
    49ee:	ff 1f       	adc	r31, r31
    49f0:	a2 17       	cp	r26, r18
    49f2:	b3 07       	cpc	r27, r19
    49f4:	e4 07       	cpc	r30, r20
    49f6:	f5 07       	cpc	r31, r21
    49f8:	20 f0       	brcs	.+8      	; 0x4a02 <__udivmodsi4_ep>
    49fa:	a2 1b       	sub	r26, r18
    49fc:	b3 0b       	sbc	r27, r19
    49fe:	e4 0b       	sbc	r30, r20
    4a00:	f5 0b       	sbc	r31, r21

00004a02 <__udivmodsi4_ep>:
    4a02:	66 1f       	adc	r22, r22
    4a04:	77 1f       	adc	r23, r23
    4a06:	88 1f       	adc	r24, r24
    4a08:	99 1f       	adc	r25, r25
    4a0a:	1a 94       	dec	r1
    4a0c:	69 f7       	brne	.-38     	; 0x49e8 <__udivmodsi4_loop>
    4a0e:	60 95       	com	r22
    4a10:	70 95       	com	r23
    4a12:	80 95       	com	r24
    4a14:	90 95       	com	r25
    4a16:	9b 01       	movw	r18, r22
    4a18:	ac 01       	movw	r20, r24
    4a1a:	bd 01       	movw	r22, r26
    4a1c:	cf 01       	movw	r24, r30
    4a1e:	08 95       	ret

00004a20 <memcmp>:
    4a20:	fb 01       	movw	r30, r22
    4a22:	dc 01       	movw	r26, r24
    4a24:	04 c0       	rjmp	.+8      	; 0x4a2e <memcmp+0xe>
    4a26:	8d 91       	ld	r24, X+
    4a28:	01 90       	ld	r0, Z+
    4a2a:	80 19       	sub	r24, r0
    4a2c:	21 f4       	brne	.+8      	; 0x4a36 <memcmp+0x16>
    4a2e:	41 50       	subi	r20, 0x01	; 1
    4a30:	50 40       	sbci	r21, 0x00	; 0
    4a32:	c8 f7       	brcc	.-14     	; 0x4a26 <memcmp+0x6>
    4a34:	88 1b       	sub	r24, r24
    4a36:	99 0b       	sbc	r25, r25
    4a38:	08 95       	ret

00004a3a <memcpy>:
    4a3a:	fb 01       	movw	r30, r22
    4a3c:	dc 01       	movw	r26, r24
    4a3e:	02 c0       	rjmp	.+4      	; 0x4a44 <memcpy+0xa>
    4a40:	01 90       	ld	r0, Z+
    4a42:	0d 92       	st	X+, r0
    4a44:	41 50       	subi	r20, 0x01	; 1
    4a46:	50 40       	sbci	r21, 0x00	; 0
    4a48:	d8 f7       	brcc	.-10     	; 0x4a40 <memcpy+0x6>
    4a4a:	08 95       	ret

00004a4c <memset>:
    4a4c:	dc 01       	movw	r26, r24
    4a4e:	01 c0       	rjmp	.+2      	; 0x4a52 <memset+0x6>
    4a50:	6d 93       	st	X+, r22
    4a52:	41 50       	subi	r20, 0x01	; 1
    4a54:	50 40       	sbci	r21, 0x00	; 0
    4a56:	e0 f7       	brcc	.-8      	; 0x4a50 <memset+0x4>
    4a58:	08 95       	ret

00004a5a <sprintf>:
    4a5a:	0f 93       	push	r16
    4a5c:	1f 93       	push	r17
    4a5e:	cf 93       	push	r28
    4a60:	df 93       	push	r29
    4a62:	cd b7       	in	r28, 0x3d	; 61
    4a64:	de b7       	in	r29, 0x3e	; 62
    4a66:	2e 97       	sbiw	r28, 0x0e	; 14
    4a68:	0f b6       	in	r0, 0x3f	; 63
    4a6a:	f8 94       	cli
    4a6c:	de bf       	out	0x3e, r29	; 62
    4a6e:	0f be       	out	0x3f, r0	; 63
    4a70:	cd bf       	out	0x3d, r28	; 61
    4a72:	0d 89       	ldd	r16, Y+21	; 0x15
    4a74:	1e 89       	ldd	r17, Y+22	; 0x16
    4a76:	86 e0       	ldi	r24, 0x06	; 6
    4a78:	8c 83       	std	Y+4, r24	; 0x04
    4a7a:	1a 83       	std	Y+2, r17	; 0x02
    4a7c:	09 83       	std	Y+1, r16	; 0x01
    4a7e:	8f ef       	ldi	r24, 0xFF	; 255
    4a80:	9f e7       	ldi	r25, 0x7F	; 127
    4a82:	9e 83       	std	Y+6, r25	; 0x06
    4a84:	8d 83       	std	Y+5, r24	; 0x05
    4a86:	ae 01       	movw	r20, r28
    4a88:	47 5e       	subi	r20, 0xE7	; 231
    4a8a:	5f 4f       	sbci	r21, 0xFF	; 255
    4a8c:	ce 01       	movw	r24, r28
    4a8e:	01 96       	adiw	r24, 0x01	; 1
    4a90:	6f 89       	ldd	r22, Y+23	; 0x17
    4a92:	78 8d       	ldd	r23, Y+24	; 0x18
    4a94:	10 d0       	rcall	.+32     	; 0x4ab6 <vfprintf>
    4a96:	ef 81       	ldd	r30, Y+7	; 0x07
    4a98:	f8 85       	ldd	r31, Y+8	; 0x08
    4a9a:	e0 0f       	add	r30, r16
    4a9c:	f1 1f       	adc	r31, r17
    4a9e:	10 82       	st	Z, r1
    4aa0:	2e 96       	adiw	r28, 0x0e	; 14
    4aa2:	0f b6       	in	r0, 0x3f	; 63
    4aa4:	f8 94       	cli
    4aa6:	de bf       	out	0x3e, r29	; 62
    4aa8:	0f be       	out	0x3f, r0	; 63
    4aaa:	cd bf       	out	0x3d, r28	; 61
    4aac:	df 91       	pop	r29
    4aae:	cf 91       	pop	r28
    4ab0:	1f 91       	pop	r17
    4ab2:	0f 91       	pop	r16
    4ab4:	08 95       	ret

00004ab6 <vfprintf>:
    4ab6:	2f 92       	push	r2
    4ab8:	3f 92       	push	r3
    4aba:	4f 92       	push	r4
    4abc:	5f 92       	push	r5
    4abe:	6f 92       	push	r6
    4ac0:	7f 92       	push	r7
    4ac2:	8f 92       	push	r8
    4ac4:	9f 92       	push	r9
    4ac6:	af 92       	push	r10
    4ac8:	bf 92       	push	r11
    4aca:	cf 92       	push	r12
    4acc:	df 92       	push	r13
    4ace:	ef 92       	push	r14
    4ad0:	ff 92       	push	r15
    4ad2:	0f 93       	push	r16
    4ad4:	1f 93       	push	r17
    4ad6:	cf 93       	push	r28
    4ad8:	df 93       	push	r29
    4ada:	cd b7       	in	r28, 0x3d	; 61
    4adc:	de b7       	in	r29, 0x3e	; 62
    4ade:	2d 97       	sbiw	r28, 0x0d	; 13
    4ae0:	0f b6       	in	r0, 0x3f	; 63
    4ae2:	f8 94       	cli
    4ae4:	de bf       	out	0x3e, r29	; 62
    4ae6:	0f be       	out	0x3f, r0	; 63
    4ae8:	cd bf       	out	0x3d, r28	; 61
    4aea:	3c 01       	movw	r6, r24
    4aec:	7d 87       	std	Y+13, r23	; 0x0d
    4aee:	6c 87       	std	Y+12, r22	; 0x0c
    4af0:	5a 01       	movw	r10, r20
    4af2:	fc 01       	movw	r30, r24
    4af4:	17 82       	std	Z+7, r1	; 0x07
    4af6:	16 82       	std	Z+6, r1	; 0x06
    4af8:	83 81       	ldd	r24, Z+3	; 0x03
    4afa:	81 ff       	sbrs	r24, 1
    4afc:	bb c1       	rjmp	.+886    	; 0x4e74 <vfprintf+0x3be>
    4afe:	2e 01       	movw	r4, r28
    4b00:	08 94       	sec
    4b02:	41 1c       	adc	r4, r1
    4b04:	51 1c       	adc	r5, r1
    4b06:	f3 01       	movw	r30, r6
    4b08:	93 81       	ldd	r25, Z+3	; 0x03
    4b0a:	ec 85       	ldd	r30, Y+12	; 0x0c
    4b0c:	fd 85       	ldd	r31, Y+13	; 0x0d
    4b0e:	93 fd       	sbrc	r25, 3
    4b10:	85 91       	lpm	r24, Z+
    4b12:	93 ff       	sbrs	r25, 3
    4b14:	81 91       	ld	r24, Z+
    4b16:	fd 87       	std	Y+13, r31	; 0x0d
    4b18:	ec 87       	std	Y+12, r30	; 0x0c
    4b1a:	88 23       	and	r24, r24
    4b1c:	09 f4       	brne	.+2      	; 0x4b20 <vfprintf+0x6a>
    4b1e:	a6 c1       	rjmp	.+844    	; 0x4e6c <vfprintf+0x3b6>
    4b20:	85 32       	cpi	r24, 0x25	; 37
    4b22:	41 f4       	brne	.+16     	; 0x4b34 <vfprintf+0x7e>
    4b24:	93 fd       	sbrc	r25, 3
    4b26:	85 91       	lpm	r24, Z+
    4b28:	93 ff       	sbrs	r25, 3
    4b2a:	81 91       	ld	r24, Z+
    4b2c:	fd 87       	std	Y+13, r31	; 0x0d
    4b2e:	ec 87       	std	Y+12, r30	; 0x0c
    4b30:	85 32       	cpi	r24, 0x25	; 37
    4b32:	21 f4       	brne	.+8      	; 0x4b3c <vfprintf+0x86>
    4b34:	90 e0       	ldi	r25, 0x00	; 0
    4b36:	b3 01       	movw	r22, r6
    4b38:	e8 d1       	rcall	.+976    	; 0x4f0a <fputc>
    4b3a:	e5 cf       	rjmp	.-54     	; 0x4b06 <vfprintf+0x50>
    4b3c:	ff 24       	eor	r15, r15
    4b3e:	ee 24       	eor	r14, r14
    4b40:	10 e0       	ldi	r17, 0x00	; 0
    4b42:	10 32       	cpi	r17, 0x20	; 32
    4b44:	b0 f4       	brcc	.+44     	; 0x4b72 <vfprintf+0xbc>
    4b46:	8b 32       	cpi	r24, 0x2B	; 43
    4b48:	69 f0       	breq	.+26     	; 0x4b64 <vfprintf+0xae>
    4b4a:	8c 32       	cpi	r24, 0x2C	; 44
    4b4c:	28 f4       	brcc	.+10     	; 0x4b58 <vfprintf+0xa2>
    4b4e:	80 32       	cpi	r24, 0x20	; 32
    4b50:	51 f0       	breq	.+20     	; 0x4b66 <vfprintf+0xb0>
    4b52:	83 32       	cpi	r24, 0x23	; 35
    4b54:	71 f4       	brne	.+28     	; 0x4b72 <vfprintf+0xbc>
    4b56:	0b c0       	rjmp	.+22     	; 0x4b6e <vfprintf+0xb8>
    4b58:	8d 32       	cpi	r24, 0x2D	; 45
    4b5a:	39 f0       	breq	.+14     	; 0x4b6a <vfprintf+0xb4>
    4b5c:	80 33       	cpi	r24, 0x30	; 48
    4b5e:	49 f4       	brne	.+18     	; 0x4b72 <vfprintf+0xbc>
    4b60:	11 60       	ori	r17, 0x01	; 1
    4b62:	2c c0       	rjmp	.+88     	; 0x4bbc <vfprintf+0x106>
    4b64:	12 60       	ori	r17, 0x02	; 2
    4b66:	14 60       	ori	r17, 0x04	; 4
    4b68:	29 c0       	rjmp	.+82     	; 0x4bbc <vfprintf+0x106>
    4b6a:	18 60       	ori	r17, 0x08	; 8
    4b6c:	27 c0       	rjmp	.+78     	; 0x4bbc <vfprintf+0x106>
    4b6e:	10 61       	ori	r17, 0x10	; 16
    4b70:	25 c0       	rjmp	.+74     	; 0x4bbc <vfprintf+0x106>
    4b72:	17 fd       	sbrc	r17, 7
    4b74:	2e c0       	rjmp	.+92     	; 0x4bd2 <vfprintf+0x11c>
    4b76:	28 2f       	mov	r18, r24
    4b78:	20 53       	subi	r18, 0x30	; 48
    4b7a:	2a 30       	cpi	r18, 0x0A	; 10
    4b7c:	98 f4       	brcc	.+38     	; 0x4ba4 <vfprintf+0xee>
    4b7e:	16 ff       	sbrs	r17, 6
    4b80:	08 c0       	rjmp	.+16     	; 0x4b92 <vfprintf+0xdc>
    4b82:	8f 2d       	mov	r24, r15
    4b84:	88 0f       	add	r24, r24
    4b86:	f8 2e       	mov	r15, r24
    4b88:	ff 0c       	add	r15, r15
    4b8a:	ff 0c       	add	r15, r15
    4b8c:	f8 0e       	add	r15, r24
    4b8e:	f2 0e       	add	r15, r18
    4b90:	15 c0       	rjmp	.+42     	; 0x4bbc <vfprintf+0x106>
    4b92:	8e 2d       	mov	r24, r14
    4b94:	88 0f       	add	r24, r24
    4b96:	e8 2e       	mov	r14, r24
    4b98:	ee 0c       	add	r14, r14
    4b9a:	ee 0c       	add	r14, r14
    4b9c:	e8 0e       	add	r14, r24
    4b9e:	e2 0e       	add	r14, r18
    4ba0:	10 62       	ori	r17, 0x20	; 32
    4ba2:	0c c0       	rjmp	.+24     	; 0x4bbc <vfprintf+0x106>
    4ba4:	8e 32       	cpi	r24, 0x2E	; 46
    4ba6:	21 f4       	brne	.+8      	; 0x4bb0 <vfprintf+0xfa>
    4ba8:	16 fd       	sbrc	r17, 6
    4baa:	60 c1       	rjmp	.+704    	; 0x4e6c <vfprintf+0x3b6>
    4bac:	10 64       	ori	r17, 0x40	; 64
    4bae:	06 c0       	rjmp	.+12     	; 0x4bbc <vfprintf+0x106>
    4bb0:	8c 36       	cpi	r24, 0x6C	; 108
    4bb2:	11 f4       	brne	.+4      	; 0x4bb8 <vfprintf+0x102>
    4bb4:	10 68       	ori	r17, 0x80	; 128
    4bb6:	02 c0       	rjmp	.+4      	; 0x4bbc <vfprintf+0x106>
    4bb8:	88 36       	cpi	r24, 0x68	; 104
    4bba:	59 f4       	brne	.+22     	; 0x4bd2 <vfprintf+0x11c>
    4bbc:	ec 85       	ldd	r30, Y+12	; 0x0c
    4bbe:	fd 85       	ldd	r31, Y+13	; 0x0d
    4bc0:	93 fd       	sbrc	r25, 3
    4bc2:	85 91       	lpm	r24, Z+
    4bc4:	93 ff       	sbrs	r25, 3
    4bc6:	81 91       	ld	r24, Z+
    4bc8:	fd 87       	std	Y+13, r31	; 0x0d
    4bca:	ec 87       	std	Y+12, r30	; 0x0c
    4bcc:	88 23       	and	r24, r24
    4bce:	09 f0       	breq	.+2      	; 0x4bd2 <vfprintf+0x11c>
    4bd0:	b8 cf       	rjmp	.-144    	; 0x4b42 <vfprintf+0x8c>
    4bd2:	98 2f       	mov	r25, r24
    4bd4:	95 54       	subi	r25, 0x45	; 69
    4bd6:	93 30       	cpi	r25, 0x03	; 3
    4bd8:	18 f0       	brcs	.+6      	; 0x4be0 <vfprintf+0x12a>
    4bda:	90 52       	subi	r25, 0x20	; 32
    4bdc:	93 30       	cpi	r25, 0x03	; 3
    4bde:	38 f4       	brcc	.+14     	; 0x4bee <vfprintf+0x138>
    4be0:	24 e0       	ldi	r18, 0x04	; 4
    4be2:	30 e0       	ldi	r19, 0x00	; 0
    4be4:	a2 0e       	add	r10, r18
    4be6:	b3 1e       	adc	r11, r19
    4be8:	3f e3       	ldi	r19, 0x3F	; 63
    4bea:	39 83       	std	Y+1, r19	; 0x01
    4bec:	0f c0       	rjmp	.+30     	; 0x4c0c <vfprintf+0x156>
    4bee:	83 36       	cpi	r24, 0x63	; 99
    4bf0:	31 f0       	breq	.+12     	; 0x4bfe <vfprintf+0x148>
    4bf2:	83 37       	cpi	r24, 0x73	; 115
    4bf4:	81 f0       	breq	.+32     	; 0x4c16 <vfprintf+0x160>
    4bf6:	83 35       	cpi	r24, 0x53	; 83
    4bf8:	09 f0       	breq	.+2      	; 0x4bfc <vfprintf+0x146>
    4bfa:	56 c0       	rjmp	.+172    	; 0x4ca8 <vfprintf+0x1f2>
    4bfc:	21 c0       	rjmp	.+66     	; 0x4c40 <vfprintf+0x18a>
    4bfe:	f5 01       	movw	r30, r10
    4c00:	80 81       	ld	r24, Z
    4c02:	89 83       	std	Y+1, r24	; 0x01
    4c04:	22 e0       	ldi	r18, 0x02	; 2
    4c06:	30 e0       	ldi	r19, 0x00	; 0
    4c08:	a2 0e       	add	r10, r18
    4c0a:	b3 1e       	adc	r11, r19
    4c0c:	21 e0       	ldi	r18, 0x01	; 1
    4c0e:	c2 2e       	mov	r12, r18
    4c10:	d1 2c       	mov	r13, r1
    4c12:	42 01       	movw	r8, r4
    4c14:	13 c0       	rjmp	.+38     	; 0x4c3c <vfprintf+0x186>
    4c16:	92 e0       	ldi	r25, 0x02	; 2
    4c18:	29 2e       	mov	r2, r25
    4c1a:	31 2c       	mov	r3, r1
    4c1c:	2a 0c       	add	r2, r10
    4c1e:	3b 1c       	adc	r3, r11
    4c20:	f5 01       	movw	r30, r10
    4c22:	80 80       	ld	r8, Z
    4c24:	91 80       	ldd	r9, Z+1	; 0x01
    4c26:	16 ff       	sbrs	r17, 6
    4c28:	03 c0       	rjmp	.+6      	; 0x4c30 <vfprintf+0x17a>
    4c2a:	6f 2d       	mov	r22, r15
    4c2c:	70 e0       	ldi	r23, 0x00	; 0
    4c2e:	02 c0       	rjmp	.+4      	; 0x4c34 <vfprintf+0x17e>
    4c30:	6f ef       	ldi	r22, 0xFF	; 255
    4c32:	7f ef       	ldi	r23, 0xFF	; 255
    4c34:	c4 01       	movw	r24, r8
    4c36:	5e d1       	rcall	.+700    	; 0x4ef4 <strnlen>
    4c38:	6c 01       	movw	r12, r24
    4c3a:	51 01       	movw	r10, r2
    4c3c:	1f 77       	andi	r17, 0x7F	; 127
    4c3e:	14 c0       	rjmp	.+40     	; 0x4c68 <vfprintf+0x1b2>
    4c40:	82 e0       	ldi	r24, 0x02	; 2
    4c42:	28 2e       	mov	r2, r24
    4c44:	31 2c       	mov	r3, r1
    4c46:	2a 0c       	add	r2, r10
    4c48:	3b 1c       	adc	r3, r11
    4c4a:	f5 01       	movw	r30, r10
    4c4c:	80 80       	ld	r8, Z
    4c4e:	91 80       	ldd	r9, Z+1	; 0x01
    4c50:	16 ff       	sbrs	r17, 6
    4c52:	03 c0       	rjmp	.+6      	; 0x4c5a <vfprintf+0x1a4>
    4c54:	6f 2d       	mov	r22, r15
    4c56:	70 e0       	ldi	r23, 0x00	; 0
    4c58:	02 c0       	rjmp	.+4      	; 0x4c5e <vfprintf+0x1a8>
    4c5a:	6f ef       	ldi	r22, 0xFF	; 255
    4c5c:	7f ef       	ldi	r23, 0xFF	; 255
    4c5e:	c4 01       	movw	r24, r8
    4c60:	3e d1       	rcall	.+636    	; 0x4ede <strnlen_P>
    4c62:	6c 01       	movw	r12, r24
    4c64:	10 68       	ori	r17, 0x80	; 128
    4c66:	51 01       	movw	r10, r2
    4c68:	13 fd       	sbrc	r17, 3
    4c6a:	1a c0       	rjmp	.+52     	; 0x4ca0 <vfprintf+0x1ea>
    4c6c:	05 c0       	rjmp	.+10     	; 0x4c78 <vfprintf+0x1c2>
    4c6e:	80 e2       	ldi	r24, 0x20	; 32
    4c70:	90 e0       	ldi	r25, 0x00	; 0
    4c72:	b3 01       	movw	r22, r6
    4c74:	4a d1       	rcall	.+660    	; 0x4f0a <fputc>
    4c76:	ea 94       	dec	r14
    4c78:	8e 2d       	mov	r24, r14
    4c7a:	90 e0       	ldi	r25, 0x00	; 0
    4c7c:	c8 16       	cp	r12, r24
    4c7e:	d9 06       	cpc	r13, r25
    4c80:	b0 f3       	brcs	.-20     	; 0x4c6e <vfprintf+0x1b8>
    4c82:	0e c0       	rjmp	.+28     	; 0x4ca0 <vfprintf+0x1ea>
    4c84:	f4 01       	movw	r30, r8
    4c86:	17 fd       	sbrc	r17, 7
    4c88:	85 91       	lpm	r24, Z+
    4c8a:	17 ff       	sbrs	r17, 7
    4c8c:	81 91       	ld	r24, Z+
    4c8e:	4f 01       	movw	r8, r30
    4c90:	90 e0       	ldi	r25, 0x00	; 0
    4c92:	b3 01       	movw	r22, r6
    4c94:	3a d1       	rcall	.+628    	; 0x4f0a <fputc>
    4c96:	e1 10       	cpse	r14, r1
    4c98:	ea 94       	dec	r14
    4c9a:	08 94       	sec
    4c9c:	c1 08       	sbc	r12, r1
    4c9e:	d1 08       	sbc	r13, r1
    4ca0:	c1 14       	cp	r12, r1
    4ca2:	d1 04       	cpc	r13, r1
    4ca4:	79 f7       	brne	.-34     	; 0x4c84 <vfprintf+0x1ce>
    4ca6:	df c0       	rjmp	.+446    	; 0x4e66 <vfprintf+0x3b0>
    4ca8:	84 36       	cpi	r24, 0x64	; 100
    4caa:	11 f0       	breq	.+4      	; 0x4cb0 <vfprintf+0x1fa>
    4cac:	89 36       	cpi	r24, 0x69	; 105
    4cae:	49 f5       	brne	.+82     	; 0x4d02 <vfprintf+0x24c>
    4cb0:	f5 01       	movw	r30, r10
    4cb2:	17 ff       	sbrs	r17, 7
    4cb4:	07 c0       	rjmp	.+14     	; 0x4cc4 <vfprintf+0x20e>
    4cb6:	80 81       	ld	r24, Z
    4cb8:	91 81       	ldd	r25, Z+1	; 0x01
    4cba:	a2 81       	ldd	r26, Z+2	; 0x02
    4cbc:	b3 81       	ldd	r27, Z+3	; 0x03
    4cbe:	24 e0       	ldi	r18, 0x04	; 4
    4cc0:	30 e0       	ldi	r19, 0x00	; 0
    4cc2:	08 c0       	rjmp	.+16     	; 0x4cd4 <vfprintf+0x21e>
    4cc4:	80 81       	ld	r24, Z
    4cc6:	91 81       	ldd	r25, Z+1	; 0x01
    4cc8:	aa 27       	eor	r26, r26
    4cca:	97 fd       	sbrc	r25, 7
    4ccc:	a0 95       	com	r26
    4cce:	ba 2f       	mov	r27, r26
    4cd0:	22 e0       	ldi	r18, 0x02	; 2
    4cd2:	30 e0       	ldi	r19, 0x00	; 0
    4cd4:	a2 0e       	add	r10, r18
    4cd6:	b3 1e       	adc	r11, r19
    4cd8:	01 2f       	mov	r16, r17
    4cda:	0f 76       	andi	r16, 0x6F	; 111
    4cdc:	b7 ff       	sbrs	r27, 7
    4cde:	08 c0       	rjmp	.+16     	; 0x4cf0 <vfprintf+0x23a>
    4ce0:	b0 95       	com	r27
    4ce2:	a0 95       	com	r26
    4ce4:	90 95       	com	r25
    4ce6:	81 95       	neg	r24
    4ce8:	9f 4f       	sbci	r25, 0xFF	; 255
    4cea:	af 4f       	sbci	r26, 0xFF	; 255
    4cec:	bf 4f       	sbci	r27, 0xFF	; 255
    4cee:	00 68       	ori	r16, 0x80	; 128
    4cf0:	bc 01       	movw	r22, r24
    4cf2:	cd 01       	movw	r24, r26
    4cf4:	a2 01       	movw	r20, r4
    4cf6:	2a e0       	ldi	r18, 0x0A	; 10
    4cf8:	30 e0       	ldi	r19, 0x00	; 0
    4cfa:	33 d1       	rcall	.+614    	; 0x4f62 <__ultoa_invert>
    4cfc:	d8 2e       	mov	r13, r24
    4cfe:	d4 18       	sub	r13, r4
    4d00:	3e c0       	rjmp	.+124    	; 0x4d7e <vfprintf+0x2c8>
    4d02:	85 37       	cpi	r24, 0x75	; 117
    4d04:	21 f4       	brne	.+8      	; 0x4d0e <vfprintf+0x258>
    4d06:	1f 7e       	andi	r17, 0xEF	; 239
    4d08:	2a e0       	ldi	r18, 0x0A	; 10
    4d0a:	30 e0       	ldi	r19, 0x00	; 0
    4d0c:	20 c0       	rjmp	.+64     	; 0x4d4e <vfprintf+0x298>
    4d0e:	19 7f       	andi	r17, 0xF9	; 249
    4d10:	8f 36       	cpi	r24, 0x6F	; 111
    4d12:	a9 f0       	breq	.+42     	; 0x4d3e <vfprintf+0x288>
    4d14:	80 37       	cpi	r24, 0x70	; 112
    4d16:	20 f4       	brcc	.+8      	; 0x4d20 <vfprintf+0x26a>
    4d18:	88 35       	cpi	r24, 0x58	; 88
    4d1a:	09 f0       	breq	.+2      	; 0x4d1e <vfprintf+0x268>
    4d1c:	a7 c0       	rjmp	.+334    	; 0x4e6c <vfprintf+0x3b6>
    4d1e:	0b c0       	rjmp	.+22     	; 0x4d36 <vfprintf+0x280>
    4d20:	80 37       	cpi	r24, 0x70	; 112
    4d22:	21 f0       	breq	.+8      	; 0x4d2c <vfprintf+0x276>
    4d24:	88 37       	cpi	r24, 0x78	; 120
    4d26:	09 f0       	breq	.+2      	; 0x4d2a <vfprintf+0x274>
    4d28:	a1 c0       	rjmp	.+322    	; 0x4e6c <vfprintf+0x3b6>
    4d2a:	01 c0       	rjmp	.+2      	; 0x4d2e <vfprintf+0x278>
    4d2c:	10 61       	ori	r17, 0x10	; 16
    4d2e:	14 ff       	sbrs	r17, 4
    4d30:	09 c0       	rjmp	.+18     	; 0x4d44 <vfprintf+0x28e>
    4d32:	14 60       	ori	r17, 0x04	; 4
    4d34:	07 c0       	rjmp	.+14     	; 0x4d44 <vfprintf+0x28e>
    4d36:	14 ff       	sbrs	r17, 4
    4d38:	08 c0       	rjmp	.+16     	; 0x4d4a <vfprintf+0x294>
    4d3a:	16 60       	ori	r17, 0x06	; 6
    4d3c:	06 c0       	rjmp	.+12     	; 0x4d4a <vfprintf+0x294>
    4d3e:	28 e0       	ldi	r18, 0x08	; 8
    4d40:	30 e0       	ldi	r19, 0x00	; 0
    4d42:	05 c0       	rjmp	.+10     	; 0x4d4e <vfprintf+0x298>
    4d44:	20 e1       	ldi	r18, 0x10	; 16
    4d46:	30 e0       	ldi	r19, 0x00	; 0
    4d48:	02 c0       	rjmp	.+4      	; 0x4d4e <vfprintf+0x298>
    4d4a:	20 e1       	ldi	r18, 0x10	; 16
    4d4c:	32 e0       	ldi	r19, 0x02	; 2
    4d4e:	f5 01       	movw	r30, r10
    4d50:	17 ff       	sbrs	r17, 7
    4d52:	07 c0       	rjmp	.+14     	; 0x4d62 <vfprintf+0x2ac>
    4d54:	60 81       	ld	r22, Z
    4d56:	71 81       	ldd	r23, Z+1	; 0x01
    4d58:	82 81       	ldd	r24, Z+2	; 0x02
    4d5a:	93 81       	ldd	r25, Z+3	; 0x03
    4d5c:	44 e0       	ldi	r20, 0x04	; 4
    4d5e:	50 e0       	ldi	r21, 0x00	; 0
    4d60:	06 c0       	rjmp	.+12     	; 0x4d6e <vfprintf+0x2b8>
    4d62:	60 81       	ld	r22, Z
    4d64:	71 81       	ldd	r23, Z+1	; 0x01
    4d66:	80 e0       	ldi	r24, 0x00	; 0
    4d68:	90 e0       	ldi	r25, 0x00	; 0
    4d6a:	42 e0       	ldi	r20, 0x02	; 2
    4d6c:	50 e0       	ldi	r21, 0x00	; 0
    4d6e:	a4 0e       	add	r10, r20
    4d70:	b5 1e       	adc	r11, r21
    4d72:	a2 01       	movw	r20, r4
    4d74:	f6 d0       	rcall	.+492    	; 0x4f62 <__ultoa_invert>
    4d76:	d8 2e       	mov	r13, r24
    4d78:	d4 18       	sub	r13, r4
    4d7a:	01 2f       	mov	r16, r17
    4d7c:	0f 77       	andi	r16, 0x7F	; 127
    4d7e:	06 ff       	sbrs	r16, 6
    4d80:	09 c0       	rjmp	.+18     	; 0x4d94 <vfprintf+0x2de>
    4d82:	0e 7f       	andi	r16, 0xFE	; 254
    4d84:	df 14       	cp	r13, r15
    4d86:	30 f4       	brcc	.+12     	; 0x4d94 <vfprintf+0x2de>
    4d88:	04 ff       	sbrs	r16, 4
    4d8a:	06 c0       	rjmp	.+12     	; 0x4d98 <vfprintf+0x2e2>
    4d8c:	02 fd       	sbrc	r16, 2
    4d8e:	04 c0       	rjmp	.+8      	; 0x4d98 <vfprintf+0x2e2>
    4d90:	0f 7e       	andi	r16, 0xEF	; 239
    4d92:	02 c0       	rjmp	.+4      	; 0x4d98 <vfprintf+0x2e2>
    4d94:	1d 2d       	mov	r17, r13
    4d96:	01 c0       	rjmp	.+2      	; 0x4d9a <vfprintf+0x2e4>
    4d98:	1f 2d       	mov	r17, r15
    4d9a:	80 2f       	mov	r24, r16
    4d9c:	90 e0       	ldi	r25, 0x00	; 0
    4d9e:	04 ff       	sbrs	r16, 4
    4da0:	0c c0       	rjmp	.+24     	; 0x4dba <vfprintf+0x304>
    4da2:	fe 01       	movw	r30, r28
    4da4:	ed 0d       	add	r30, r13
    4da6:	f1 1d       	adc	r31, r1
    4da8:	20 81       	ld	r18, Z
    4daa:	20 33       	cpi	r18, 0x30	; 48
    4dac:	11 f4       	brne	.+4      	; 0x4db2 <vfprintf+0x2fc>
    4dae:	09 7e       	andi	r16, 0xE9	; 233
    4db0:	09 c0       	rjmp	.+18     	; 0x4dc4 <vfprintf+0x30e>
    4db2:	02 ff       	sbrs	r16, 2
    4db4:	06 c0       	rjmp	.+12     	; 0x4dc2 <vfprintf+0x30c>
    4db6:	1e 5f       	subi	r17, 0xFE	; 254
    4db8:	05 c0       	rjmp	.+10     	; 0x4dc4 <vfprintf+0x30e>
    4dba:	86 78       	andi	r24, 0x86	; 134
    4dbc:	90 70       	andi	r25, 0x00	; 0
    4dbe:	00 97       	sbiw	r24, 0x00	; 0
    4dc0:	09 f0       	breq	.+2      	; 0x4dc4 <vfprintf+0x30e>
    4dc2:	1f 5f       	subi	r17, 0xFF	; 255
    4dc4:	80 2e       	mov	r8, r16
    4dc6:	99 24       	eor	r9, r9
    4dc8:	03 fd       	sbrc	r16, 3
    4dca:	11 c0       	rjmp	.+34     	; 0x4dee <vfprintf+0x338>
    4dcc:	00 ff       	sbrs	r16, 0
    4dce:	0c c0       	rjmp	.+24     	; 0x4de8 <vfprintf+0x332>
    4dd0:	fd 2c       	mov	r15, r13
    4dd2:	1e 15       	cp	r17, r14
    4dd4:	48 f4       	brcc	.+18     	; 0x4de8 <vfprintf+0x332>
    4dd6:	fe 0c       	add	r15, r14
    4dd8:	f1 1a       	sub	r15, r17
    4dda:	1e 2d       	mov	r17, r14
    4ddc:	05 c0       	rjmp	.+10     	; 0x4de8 <vfprintf+0x332>
    4dde:	80 e2       	ldi	r24, 0x20	; 32
    4de0:	90 e0       	ldi	r25, 0x00	; 0
    4de2:	b3 01       	movw	r22, r6
    4de4:	92 d0       	rcall	.+292    	; 0x4f0a <fputc>
    4de6:	1f 5f       	subi	r17, 0xFF	; 255
    4de8:	1e 15       	cp	r17, r14
    4dea:	c8 f3       	brcs	.-14     	; 0x4dde <vfprintf+0x328>
    4dec:	04 c0       	rjmp	.+8      	; 0x4df6 <vfprintf+0x340>
    4dee:	1e 15       	cp	r17, r14
    4df0:	10 f4       	brcc	.+4      	; 0x4df6 <vfprintf+0x340>
    4df2:	e1 1a       	sub	r14, r17
    4df4:	01 c0       	rjmp	.+2      	; 0x4df8 <vfprintf+0x342>
    4df6:	ee 24       	eor	r14, r14
    4df8:	84 fe       	sbrs	r8, 4
    4dfa:	0e c0       	rjmp	.+28     	; 0x4e18 <vfprintf+0x362>
    4dfc:	80 e3       	ldi	r24, 0x30	; 48
    4dfe:	90 e0       	ldi	r25, 0x00	; 0
    4e00:	b3 01       	movw	r22, r6
    4e02:	83 d0       	rcall	.+262    	; 0x4f0a <fputc>
    4e04:	82 fe       	sbrs	r8, 2
    4e06:	1d c0       	rjmp	.+58     	; 0x4e42 <vfprintf+0x38c>
    4e08:	81 fe       	sbrs	r8, 1
    4e0a:	03 c0       	rjmp	.+6      	; 0x4e12 <vfprintf+0x35c>
    4e0c:	88 e5       	ldi	r24, 0x58	; 88
    4e0e:	90 e0       	ldi	r25, 0x00	; 0
    4e10:	10 c0       	rjmp	.+32     	; 0x4e32 <vfprintf+0x37c>
    4e12:	88 e7       	ldi	r24, 0x78	; 120
    4e14:	90 e0       	ldi	r25, 0x00	; 0
    4e16:	0d c0       	rjmp	.+26     	; 0x4e32 <vfprintf+0x37c>
    4e18:	c4 01       	movw	r24, r8
    4e1a:	86 78       	andi	r24, 0x86	; 134
    4e1c:	90 70       	andi	r25, 0x00	; 0
    4e1e:	00 97       	sbiw	r24, 0x00	; 0
    4e20:	81 f0       	breq	.+32     	; 0x4e42 <vfprintf+0x38c>
    4e22:	81 fc       	sbrc	r8, 1
    4e24:	02 c0       	rjmp	.+4      	; 0x4e2a <vfprintf+0x374>
    4e26:	80 e2       	ldi	r24, 0x20	; 32
    4e28:	01 c0       	rjmp	.+2      	; 0x4e2c <vfprintf+0x376>
    4e2a:	8b e2       	ldi	r24, 0x2B	; 43
    4e2c:	07 fd       	sbrc	r16, 7
    4e2e:	8d e2       	ldi	r24, 0x2D	; 45
    4e30:	90 e0       	ldi	r25, 0x00	; 0
    4e32:	b3 01       	movw	r22, r6
    4e34:	6a d0       	rcall	.+212    	; 0x4f0a <fputc>
    4e36:	05 c0       	rjmp	.+10     	; 0x4e42 <vfprintf+0x38c>
    4e38:	80 e3       	ldi	r24, 0x30	; 48
    4e3a:	90 e0       	ldi	r25, 0x00	; 0
    4e3c:	b3 01       	movw	r22, r6
    4e3e:	65 d0       	rcall	.+202    	; 0x4f0a <fputc>
    4e40:	fa 94       	dec	r15
    4e42:	df 14       	cp	r13, r15
    4e44:	c8 f3       	brcs	.-14     	; 0x4e38 <vfprintf+0x382>
    4e46:	da 94       	dec	r13
    4e48:	f2 01       	movw	r30, r4
    4e4a:	ed 0d       	add	r30, r13
    4e4c:	f1 1d       	adc	r31, r1
    4e4e:	80 81       	ld	r24, Z
    4e50:	90 e0       	ldi	r25, 0x00	; 0
    4e52:	b3 01       	movw	r22, r6
    4e54:	5a d0       	rcall	.+180    	; 0x4f0a <fputc>
    4e56:	dd 20       	and	r13, r13
    4e58:	b1 f7       	brne	.-20     	; 0x4e46 <vfprintf+0x390>
    4e5a:	05 c0       	rjmp	.+10     	; 0x4e66 <vfprintf+0x3b0>
    4e5c:	80 e2       	ldi	r24, 0x20	; 32
    4e5e:	90 e0       	ldi	r25, 0x00	; 0
    4e60:	b3 01       	movw	r22, r6
    4e62:	53 d0       	rcall	.+166    	; 0x4f0a <fputc>
    4e64:	ea 94       	dec	r14
    4e66:	ee 20       	and	r14, r14
    4e68:	c9 f7       	brne	.-14     	; 0x4e5c <vfprintf+0x3a6>
    4e6a:	4d ce       	rjmp	.-870    	; 0x4b06 <vfprintf+0x50>
    4e6c:	f3 01       	movw	r30, r6
    4e6e:	86 81       	ldd	r24, Z+6	; 0x06
    4e70:	97 81       	ldd	r25, Z+7	; 0x07
    4e72:	02 c0       	rjmp	.+4      	; 0x4e78 <vfprintf+0x3c2>
    4e74:	8f ef       	ldi	r24, 0xFF	; 255
    4e76:	9f ef       	ldi	r25, 0xFF	; 255
    4e78:	2d 96       	adiw	r28, 0x0d	; 13
    4e7a:	0f b6       	in	r0, 0x3f	; 63
    4e7c:	f8 94       	cli
    4e7e:	de bf       	out	0x3e, r29	; 62
    4e80:	0f be       	out	0x3f, r0	; 63
    4e82:	cd bf       	out	0x3d, r28	; 61
    4e84:	df 91       	pop	r29
    4e86:	cf 91       	pop	r28
    4e88:	1f 91       	pop	r17
    4e8a:	0f 91       	pop	r16
    4e8c:	ff 90       	pop	r15
    4e8e:	ef 90       	pop	r14
    4e90:	df 90       	pop	r13
    4e92:	cf 90       	pop	r12
    4e94:	bf 90       	pop	r11
    4e96:	af 90       	pop	r10
    4e98:	9f 90       	pop	r9
    4e9a:	8f 90       	pop	r8
    4e9c:	7f 90       	pop	r7
    4e9e:	6f 90       	pop	r6
    4ea0:	5f 90       	pop	r5
    4ea2:	4f 90       	pop	r4
    4ea4:	3f 90       	pop	r3
    4ea6:	2f 90       	pop	r2
    4ea8:	08 95       	ret

00004eaa <__eerd_byte_usb1287>:
    4eaa:	f9 99       	sbic	0x1f, 1	; 31
    4eac:	fe cf       	rjmp	.-4      	; 0x4eaa <__eerd_byte_usb1287>
    4eae:	92 bd       	out	0x22, r25	; 34
    4eb0:	81 bd       	out	0x21, r24	; 33
    4eb2:	f8 9a       	sbi	0x1f, 0	; 31
    4eb4:	99 27       	eor	r25, r25
    4eb6:	80 b5       	in	r24, 0x20	; 32
    4eb8:	08 95       	ret

00004eba <__eeupd_byte_usb1287>:
    4eba:	26 2f       	mov	r18, r22

00004ebc <__eeupd_r18_usb1287>:
    4ebc:	f9 99       	sbic	0x1f, 1	; 31
    4ebe:	fe cf       	rjmp	.-4      	; 0x4ebc <__eeupd_r18_usb1287>
    4ec0:	92 bd       	out	0x22, r25	; 34
    4ec2:	81 bd       	out	0x21, r24	; 33
    4ec4:	f8 9a       	sbi	0x1f, 0	; 31
    4ec6:	01 97       	sbiw	r24, 0x01	; 1
    4ec8:	00 b4       	in	r0, 0x20	; 32
    4eca:	02 16       	cp	r0, r18
    4ecc:	39 f0       	breq	.+14     	; 0x4edc <__eeupd_r18_usb1287+0x20>
    4ece:	1f ba       	out	0x1f, r1	; 31
    4ed0:	20 bd       	out	0x20, r18	; 32
    4ed2:	0f b6       	in	r0, 0x3f	; 63
    4ed4:	f8 94       	cli
    4ed6:	fa 9a       	sbi	0x1f, 2	; 31
    4ed8:	f9 9a       	sbi	0x1f, 1	; 31
    4eda:	0f be       	out	0x3f, r0	; 63
    4edc:	08 95       	ret

00004ede <strnlen_P>:
    4ede:	fc 01       	movw	r30, r24
    4ee0:	05 90       	lpm	r0, Z+
    4ee2:	61 50       	subi	r22, 0x01	; 1
    4ee4:	70 40       	sbci	r23, 0x00	; 0
    4ee6:	01 10       	cpse	r0, r1
    4ee8:	d8 f7       	brcc	.-10     	; 0x4ee0 <strnlen_P+0x2>
    4eea:	80 95       	com	r24
    4eec:	90 95       	com	r25
    4eee:	8e 0f       	add	r24, r30
    4ef0:	9f 1f       	adc	r25, r31
    4ef2:	08 95       	ret

00004ef4 <strnlen>:
    4ef4:	fc 01       	movw	r30, r24
    4ef6:	61 50       	subi	r22, 0x01	; 1
    4ef8:	70 40       	sbci	r23, 0x00	; 0
    4efa:	01 90       	ld	r0, Z+
    4efc:	01 10       	cpse	r0, r1
    4efe:	d8 f7       	brcc	.-10     	; 0x4ef6 <strnlen+0x2>
    4f00:	80 95       	com	r24
    4f02:	90 95       	com	r25
    4f04:	8e 0f       	add	r24, r30
    4f06:	9f 1f       	adc	r25, r31
    4f08:	08 95       	ret

00004f0a <fputc>:
    4f0a:	0f 93       	push	r16
    4f0c:	1f 93       	push	r17
    4f0e:	cf 93       	push	r28
    4f10:	df 93       	push	r29
    4f12:	8c 01       	movw	r16, r24
    4f14:	eb 01       	movw	r28, r22
    4f16:	8b 81       	ldd	r24, Y+3	; 0x03
    4f18:	81 ff       	sbrs	r24, 1
    4f1a:	1b c0       	rjmp	.+54     	; 0x4f52 <fputc+0x48>
    4f1c:	82 ff       	sbrs	r24, 2
    4f1e:	0d c0       	rjmp	.+26     	; 0x4f3a <fputc+0x30>
    4f20:	2e 81       	ldd	r18, Y+6	; 0x06
    4f22:	3f 81       	ldd	r19, Y+7	; 0x07
    4f24:	8c 81       	ldd	r24, Y+4	; 0x04
    4f26:	9d 81       	ldd	r25, Y+5	; 0x05
    4f28:	28 17       	cp	r18, r24
    4f2a:	39 07       	cpc	r19, r25
    4f2c:	64 f4       	brge	.+24     	; 0x4f46 <fputc+0x3c>
    4f2e:	e8 81       	ld	r30, Y
    4f30:	f9 81       	ldd	r31, Y+1	; 0x01
    4f32:	01 93       	st	Z+, r16
    4f34:	f9 83       	std	Y+1, r31	; 0x01
    4f36:	e8 83       	st	Y, r30
    4f38:	06 c0       	rjmp	.+12     	; 0x4f46 <fputc+0x3c>
    4f3a:	e8 85       	ldd	r30, Y+8	; 0x08
    4f3c:	f9 85       	ldd	r31, Y+9	; 0x09
    4f3e:	80 2f       	mov	r24, r16
    4f40:	09 95       	icall
    4f42:	00 97       	sbiw	r24, 0x00	; 0
    4f44:	31 f4       	brne	.+12     	; 0x4f52 <fputc+0x48>
    4f46:	8e 81       	ldd	r24, Y+6	; 0x06
    4f48:	9f 81       	ldd	r25, Y+7	; 0x07
    4f4a:	01 96       	adiw	r24, 0x01	; 1
    4f4c:	9f 83       	std	Y+7, r25	; 0x07
    4f4e:	8e 83       	std	Y+6, r24	; 0x06
    4f50:	02 c0       	rjmp	.+4      	; 0x4f56 <fputc+0x4c>
    4f52:	0f ef       	ldi	r16, 0xFF	; 255
    4f54:	1f ef       	ldi	r17, 0xFF	; 255
    4f56:	c8 01       	movw	r24, r16
    4f58:	df 91       	pop	r29
    4f5a:	cf 91       	pop	r28
    4f5c:	1f 91       	pop	r17
    4f5e:	0f 91       	pop	r16
    4f60:	08 95       	ret

00004f62 <__ultoa_invert>:
    4f62:	fa 01       	movw	r30, r20
    4f64:	aa 27       	eor	r26, r26
    4f66:	28 30       	cpi	r18, 0x08	; 8
    4f68:	51 f1       	breq	.+84     	; 0x4fbe <__ultoa_invert+0x5c>
    4f6a:	20 31       	cpi	r18, 0x10	; 16
    4f6c:	81 f1       	breq	.+96     	; 0x4fce <__ultoa_invert+0x6c>
    4f6e:	e8 94       	clt
    4f70:	6f 93       	push	r22
    4f72:	6e 7f       	andi	r22, 0xFE	; 254
    4f74:	6e 5f       	subi	r22, 0xFE	; 254
    4f76:	7f 4f       	sbci	r23, 0xFF	; 255
    4f78:	8f 4f       	sbci	r24, 0xFF	; 255
    4f7a:	9f 4f       	sbci	r25, 0xFF	; 255
    4f7c:	af 4f       	sbci	r26, 0xFF	; 255
    4f7e:	b1 e0       	ldi	r27, 0x01	; 1
    4f80:	3e d0       	rcall	.+124    	; 0x4ffe <__ultoa_invert+0x9c>
    4f82:	b4 e0       	ldi	r27, 0x04	; 4
    4f84:	3c d0       	rcall	.+120    	; 0x4ffe <__ultoa_invert+0x9c>
    4f86:	67 0f       	add	r22, r23
    4f88:	78 1f       	adc	r23, r24
    4f8a:	89 1f       	adc	r24, r25
    4f8c:	9a 1f       	adc	r25, r26
    4f8e:	a1 1d       	adc	r26, r1
    4f90:	68 0f       	add	r22, r24
    4f92:	79 1f       	adc	r23, r25
    4f94:	8a 1f       	adc	r24, r26
    4f96:	91 1d       	adc	r25, r1
    4f98:	a1 1d       	adc	r26, r1
    4f9a:	6a 0f       	add	r22, r26
    4f9c:	71 1d       	adc	r23, r1
    4f9e:	81 1d       	adc	r24, r1
    4fa0:	91 1d       	adc	r25, r1
    4fa2:	a1 1d       	adc	r26, r1
    4fa4:	20 d0       	rcall	.+64     	; 0x4fe6 <__ultoa_invert+0x84>
    4fa6:	09 f4       	brne	.+2      	; 0x4faa <__ultoa_invert+0x48>
    4fa8:	68 94       	set
    4faa:	3f 91       	pop	r19
    4fac:	2a e0       	ldi	r18, 0x0A	; 10
    4fae:	26 9f       	mul	r18, r22
    4fb0:	11 24       	eor	r1, r1
    4fb2:	30 19       	sub	r19, r0
    4fb4:	30 5d       	subi	r19, 0xD0	; 208
    4fb6:	31 93       	st	Z+, r19
    4fb8:	de f6       	brtc	.-74     	; 0x4f70 <__ultoa_invert+0xe>
    4fba:	cf 01       	movw	r24, r30
    4fbc:	08 95       	ret
    4fbe:	46 2f       	mov	r20, r22
    4fc0:	47 70       	andi	r20, 0x07	; 7
    4fc2:	40 5d       	subi	r20, 0xD0	; 208
    4fc4:	41 93       	st	Z+, r20
    4fc6:	b3 e0       	ldi	r27, 0x03	; 3
    4fc8:	0f d0       	rcall	.+30     	; 0x4fe8 <__ultoa_invert+0x86>
    4fca:	c9 f7       	brne	.-14     	; 0x4fbe <__ultoa_invert+0x5c>
    4fcc:	f6 cf       	rjmp	.-20     	; 0x4fba <__ultoa_invert+0x58>
    4fce:	46 2f       	mov	r20, r22
    4fd0:	4f 70       	andi	r20, 0x0F	; 15
    4fd2:	40 5d       	subi	r20, 0xD0	; 208
    4fd4:	4a 33       	cpi	r20, 0x3A	; 58
    4fd6:	18 f0       	brcs	.+6      	; 0x4fde <__ultoa_invert+0x7c>
    4fd8:	49 5d       	subi	r20, 0xD9	; 217
    4fda:	31 fd       	sbrc	r19, 1
    4fdc:	40 52       	subi	r20, 0x20	; 32
    4fde:	41 93       	st	Z+, r20
    4fe0:	02 d0       	rcall	.+4      	; 0x4fe6 <__ultoa_invert+0x84>
    4fe2:	a9 f7       	brne	.-22     	; 0x4fce <__ultoa_invert+0x6c>
    4fe4:	ea cf       	rjmp	.-44     	; 0x4fba <__ultoa_invert+0x58>
    4fe6:	b4 e0       	ldi	r27, 0x04	; 4
    4fe8:	a6 95       	lsr	r26
    4fea:	97 95       	ror	r25
    4fec:	87 95       	ror	r24
    4fee:	77 95       	ror	r23
    4ff0:	67 95       	ror	r22
    4ff2:	ba 95       	dec	r27
    4ff4:	c9 f7       	brne	.-14     	; 0x4fe8 <__ultoa_invert+0x86>
    4ff6:	00 97       	sbiw	r24, 0x00	; 0
    4ff8:	61 05       	cpc	r22, r1
    4ffa:	71 05       	cpc	r23, r1
    4ffc:	08 95       	ret
    4ffe:	9b 01       	movw	r18, r22
    5000:	ac 01       	movw	r20, r24
    5002:	0a 2e       	mov	r0, r26
    5004:	06 94       	lsr	r0
    5006:	57 95       	ror	r21
    5008:	47 95       	ror	r20
    500a:	37 95       	ror	r19
    500c:	27 95       	ror	r18
    500e:	ba 95       	dec	r27
    5010:	c9 f7       	brne	.-14     	; 0x5004 <__ultoa_invert+0xa2>
    5012:	62 0f       	add	r22, r18
    5014:	73 1f       	adc	r23, r19
    5016:	84 1f       	adc	r24, r20
    5018:	95 1f       	adc	r25, r21
    501a:	a0 1d       	adc	r26, r0
    501c:	08 95       	ret

0000501e <_exit>:
    501e:	f8 94       	cli

00005020 <__stop_program>:
    5020:	ff cf       	rjmp	.-2      	; 0x5020 <__stop_program>
