
XPLAINBridge.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000cc  00800100  0000247a  0000252e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000247a  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000012e  008001cc  008001cc  000025fa  2**0
                  ALLOC
  3 .eeprom       00000002  00810000  00810000  000025fa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .stab         00000a98  00000000  00000000  000025fc  2**2
                  CONTENTS, READONLY, DEBUGGING
  5 .stabstr      000002aa  00000000  00000000  00003094  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_aranges 00000758  00000000  00000000  00003340  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000b70e  00000000  00000000  00003a98  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00002f41  00000000  00000000  0000f1a6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00005135  00000000  00000000  000120e7  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00001440  00000000  00000000  0001721c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00004761  00000000  00000000  0001865c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00006b59  00000000  00000000  0001cdbd  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000938  00000000  00000000  00023916  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	b5 c0       	rjmp	.+362    	; 0x16c <__ctors_end>
       2:	00 00       	nop
       4:	2c c2       	rjmp	.+1112   	; 0x45e <__vector_1>
       6:	00 00       	nop
       8:	d0 c0       	rjmp	.+416    	; 0x1aa <__bad_interrupt>
       a:	00 00       	nop
       c:	ce c0       	rjmp	.+412    	; 0x1aa <__bad_interrupt>
       e:	00 00       	nop
      10:	cc c0       	rjmp	.+408    	; 0x1aa <__bad_interrupt>
      12:	00 00       	nop
      14:	ca c0       	rjmp	.+404    	; 0x1aa <__bad_interrupt>
      16:	00 00       	nop
      18:	c8 c0       	rjmp	.+400    	; 0x1aa <__bad_interrupt>
      1a:	00 00       	nop
      1c:	c6 c0       	rjmp	.+396    	; 0x1aa <__bad_interrupt>
      1e:	00 00       	nop
      20:	c4 c0       	rjmp	.+392    	; 0x1aa <__bad_interrupt>
      22:	00 00       	nop
      24:	c2 c0       	rjmp	.+388    	; 0x1aa <__bad_interrupt>
      26:	00 00       	nop
      28:	0c 94 61 0e 	jmp	0x1cc2	; 0x1cc2 <__vector_10>
      2c:	be c0       	rjmp	.+380    	; 0x1aa <__bad_interrupt>
      2e:	00 00       	nop
      30:	bc c0       	rjmp	.+376    	; 0x1aa <__bad_interrupt>
      32:	00 00       	nop
      34:	ba c0       	rjmp	.+372    	; 0x1aa <__bad_interrupt>
      36:	00 00       	nop
      38:	b8 c0       	rjmp	.+368    	; 0x1aa <__bad_interrupt>
      3a:	00 00       	nop
      3c:	b6 c0       	rjmp	.+364    	; 0x1aa <__bad_interrupt>
      3e:	00 00       	nop
      40:	b4 c0       	rjmp	.+360    	; 0x1aa <__bad_interrupt>
      42:	00 00       	nop
      44:	30 c2       	rjmp	.+1120   	; 0x4a6 <__vector_17>
      46:	00 00       	nop
      48:	b0 c0       	rjmp	.+352    	; 0x1aa <__bad_interrupt>
      4a:	00 00       	nop
      4c:	ae c0       	rjmp	.+348    	; 0x1aa <__bad_interrupt>
      4e:	00 00       	nop
      50:	ac c0       	rjmp	.+344    	; 0x1aa <__bad_interrupt>
      52:	00 00       	nop
      54:	48 c3       	rjmp	.+1680   	; 0x6e6 <__vector_21>
      56:	00 00       	nop
      58:	a8 c0       	rjmp	.+336    	; 0x1aa <__bad_interrupt>
      5a:	00 00       	nop
      5c:	a6 c0       	rjmp	.+332    	; 0x1aa <__bad_interrupt>
      5e:	00 00       	nop
      60:	a4 c0       	rjmp	.+328    	; 0x1aa <__bad_interrupt>
      62:	00 00       	nop
      64:	a2 c0       	rjmp	.+324    	; 0x1aa <__bad_interrupt>
      66:	00 00       	nop
      68:	a0 c0       	rjmp	.+320    	; 0x1aa <__bad_interrupt>
      6a:	00 00       	nop
      6c:	9e c0       	rjmp	.+316    	; 0x1aa <__bad_interrupt>
      6e:	00 00       	nop
      70:	9c c0       	rjmp	.+312    	; 0x1aa <__bad_interrupt>
      72:	00 00       	nop
      74:	9a c0       	rjmp	.+308    	; 0x1aa <__bad_interrupt>
      76:	00 00       	nop
      78:	98 c0       	rjmp	.+304    	; 0x1aa <__bad_interrupt>
      7a:	00 00       	nop
      7c:	96 c0       	rjmp	.+300    	; 0x1aa <__bad_interrupt>
      7e:	00 00       	nop
      80:	68 c2       	rjmp	.+1232   	; 0x552 <__vector_32>
      82:	00 00       	nop
      84:	92 c0       	rjmp	.+292    	; 0x1aa <__bad_interrupt>
      86:	00 00       	nop
      88:	90 c0       	rjmp	.+288    	; 0x1aa <__bad_interrupt>
      8a:	00 00       	nop
      8c:	8e c0       	rjmp	.+284    	; 0x1aa <__bad_interrupt>
      8e:	00 00       	nop
      90:	8c c0       	rjmp	.+280    	; 0x1aa <__bad_interrupt>
      92:	00 00       	nop
      94:	8a c0       	rjmp	.+276    	; 0x1aa <__bad_interrupt>
      96:	00 00       	nop

00000098 <USART_ProductString>:
      98:	26 03 4c 00 55 00 46 00 41 00 20 00 58 00 50 00     &.L.U.F.A. .X.P.
      a8:	4c 00 41 00 49 00 4e 00 20 00 42 00 72 00 69 00     L.A.I.N. .B.r.i.
      b8:	64 00 67 00 65 00 00 00                             d.g.e...

000000c0 <USART_ManufacturerString>:
      c0:	18 03 44 00 65 00 61 00 6e 00 20 00 43 00 61 00     ..D.e.a.n. .C.a.
      d0:	6d 00 65 00 72 00 61 00 00 00                       m.e.r.a...

000000da <USART_LanguageString>:
      da:	04 03 09 04                                         ....

000000de <USART_ConfigurationDescriptor>:
      de:	09 02 3e 00 02 01 00 80 32 09 04 00 00 01 02 02     ..>.....2.......
      ee:	01 00 05 24 00 10 01 04 24 02 06 05 24 06 00 01     ...$....$...$...
      fe:	07 05 82 03 08 00 ff 09 04 01 00 02 0a 00 00 00     ................
     10e:	07 05 04 02 10 00 05 07 05 83 02 10 00 05           ..............

0000011c <USART_DeviceDescriptor>:
     11c:	12 01 10 01 02 00 00 10 eb 03 4b 20 01 00 01 02     ..........K ....
     12c:	dc 01                                               ..

0000012e <AVRISP_ProductString>:
     12e:	18 03 41 00 56 00 52 00 49 00 53 00 50 00 20 00     ..A.V.R.I.S.P. .
     13e:	6d 00 6b 00 49 00 49 00 00 00                       m.k.I.I...

00000148 <AVRISP_ManufacturerString>:
     148:	0c 03 41 00 54 00 4d 00 45 00 4c 00 00 00           ..A.T.M.E.L...

00000156 <AVRISP_LanguageString>:
     156:	04 03 09 04                                         ....

0000015a <AVRISP_DeviceDescriptor>:
     15a:	12 01 10 01 ff 00 00 10 eb 03 04 21 00 02 01 02     ...........!....
     16a:	03 01                                               ..

0000016c <__ctors_end>:
     16c:	11 24       	eor	r1, r1
     16e:	1f be       	out	0x3f, r1	; 63
     170:	cf ef       	ldi	r28, 0xFF	; 255
     172:	d0 e2       	ldi	r29, 0x20	; 32
     174:	de bf       	out	0x3e, r29	; 62
     176:	cd bf       	out	0x3d, r28	; 61

00000178 <__do_copy_data>:
     178:	11 e0       	ldi	r17, 0x01	; 1
     17a:	a0 e0       	ldi	r26, 0x00	; 0
     17c:	b1 e0       	ldi	r27, 0x01	; 1
     17e:	ea e7       	ldi	r30, 0x7A	; 122
     180:	f4 e2       	ldi	r31, 0x24	; 36
     182:	00 e0       	ldi	r16, 0x00	; 0
     184:	0b bf       	out	0x3b, r16	; 59
     186:	02 c0       	rjmp	.+4      	; 0x18c <__do_copy_data+0x14>
     188:	07 90       	elpm	r0, Z+
     18a:	0d 92       	st	X+, r0
     18c:	ac 3c       	cpi	r26, 0xCC	; 204
     18e:	b1 07       	cpc	r27, r17
     190:	d9 f7       	brne	.-10     	; 0x188 <__do_copy_data+0x10>
     192:	1b be       	out	0x3b, r1	; 59

00000194 <__do_clear_bss>:
     194:	12 e0       	ldi	r17, 0x02	; 2
     196:	ac ec       	ldi	r26, 0xCC	; 204
     198:	b1 e0       	ldi	r27, 0x01	; 1
     19a:	01 c0       	rjmp	.+2      	; 0x19e <.do_clear_bss_start>

0000019c <.do_clear_bss_loop>:
     19c:	1d 92       	st	X+, r1

0000019e <.do_clear_bss_start>:
     19e:	aa 3f       	cpi	r26, 0xFA	; 250
     1a0:	b1 07       	cpc	r27, r17
     1a2:	e1 f7       	brne	.-8      	; 0x19c <.do_clear_bss_loop>
     1a4:	c2 d0       	rcall	.+388    	; 0x32a <main>
     1a6:	0c 94 3b 12 	jmp	0x2476	; 0x2476 <_exit>

000001aa <__bad_interrupt>:
     1aa:	2a cf       	rjmp	.-428    	; 0x0 <__vectors>

000001ac <LEDs_SetAllLEDs>:
				PORTB |= LEDMask;
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
			{
				PORTB = ((PORTB | LEDS_ALL_LEDS) & ~LEDMask);
     1ac:	95 b1       	in	r25, 0x05	; 5
     1ae:	80 95       	com	r24
     1b0:	90 64       	ori	r25, 0x40	; 64
     1b2:	89 23       	and	r24, r25
     1b4:	85 b9       	out	0x05, r24	; 5
			}
     1b6:	08 95       	ret

000001b8 <AVRISP_Task>:
}

void AVRISP_Task(void)
{
	/* Must be in the configured state for the AVRISP code to process data */
	if (USB_DeviceState != DEVICE_STATE_Configured)
     1b8:	8e b3       	in	r24, 0x1e	; 30
     1ba:	84 30       	cpi	r24, 0x04	; 4
     1bc:	69 f4       	brne	.+26     	; 0x1d8 <AVRISP_Task+0x20>
	  return;

	V2Params_UpdateParamValues();
     1be:	c4 d3       	rcall	.+1928   	; 0x948 <V2Params_UpdateParamValues>
     1c0:	82 e0       	ldi	r24, 0x02	; 2
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     1c2:	80 93 e9 00 	sts	0x00E9, r24
     1c6:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     1ca:	82 ff       	sbrs	r24, 2

	Endpoint_SelectEndpoint(AVRISP_DATA_OUT_EPADDR);

	/* Check to see if a V2 Protocol command has been received */
	if (Endpoint_IsOUTReceived())
     1cc:	05 c0       	rjmp	.+10     	; 0x1d8 <AVRISP_Task+0x20>
     1ce:	80 e4       	ldi	r24, 0x40	; 64
	{
		LEDs_SetAllLEDs(LEDMASK_BUSY);
     1d0:	ed df       	rcall	.-38     	; 0x1ac <LEDs_SetAllLEDs>
     1d2:	b5 d2       	rcall	.+1386   	; 0x73e <V2Protocol_ProcessCommand>
     1d4:	80 e0       	ldi	r24, 0x00	; 0

		/* Pass off processing of the V2 Protocol command to the V2 Protocol handler */
		V2Protocol_ProcessCommand();
     1d6:	ea cf       	rjmp	.-44     	; 0x1ac <LEDs_SetAllLEDs>
     1d8:	08 95       	ret

000001da <UARTBridge_Task>:

		LEDs_SetAllLEDs(LEDMASK_USB_READY);
     1da:	0f 93       	push	r16
     1dc:	1f 93       	push	r17
     1de:	cf 93       	push	r28
     1e0:	df 93       	push	r29
}

void UARTBridge_Task(void)
{
	/* Must be in the configured state for the USART Bridge code to process data */
	if (USB_DeviceState != DEVICE_STATE_Configured)
     1e2:	8e b3       	in	r24, 0x1e	; 30
     1e4:	84 30       	cpi	r24, 0x04	; 4
     1e6:	09 f0       	breq	.+2      	; 0x1ea <UARTBridge_Task+0x10>
     1e8:	68 c0       	rjmp	.+208    	; 0x2ba <UARTBridge_Task+0xe0>
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
     1ea:	8f b7       	in	r24, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
     1ec:	f8 94       	cli
			uint16_t Count;

			uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
			GlobalInterruptDisable();

			Count = Buffer->Count;
     1ee:	20 91 dc 02 	lds	r18, 0x02DC
     1f2:	30 91 dd 02 	lds	r19, 0x02DD
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
     1f6:	8f bf       	out	0x3f, r24	; 63
	  return;

	/* Only try to read in bytes from the CDC interface if the transmit buffer is not full */
	if (!(RingBuffer_IsFull(&USBtoUART_Buffer)))
     1f8:	80 91 da 02 	lds	r24, 0x02DA
     1fc:	90 91 db 02 	lds	r25, 0x02DB
     200:	28 17       	cp	r18, r24
     202:	39 07       	cpc	r19, r25
     204:	09 f1       	breq	.+66     	; 0x248 <UARTBridge_Task+0x6e>
	{
		int16_t ReceivedByte = CDC_Device_ReceiveByte(&VirtualSerial_CDC_Interface);
     206:	80 e0       	ldi	r24, 0x00	; 0
     208:	91 e0       	ldi	r25, 0x01	; 1
     20a:	0e 94 ca 11 	call	0x2394	; 0x2394 <CDC_Device_ReceiveByte>

		/* Read bytes from the USB OUT endpoint into the UART transmit buffer */
		if (!(ReceivedByte < 0))
     20e:	97 fd       	sbrc	r25, 7
     210:	1b c0       	rjmp	.+54     	; 0x248 <UARTBridge_Task+0x6e>
		 *  \param[in]     Data    Data element to insert into the buffer.
		 */
		static inline void RingBuffer_Insert(RingBuffer_t* Buffer, const uint8_t Data) ATTR_NON_NULL_PTR_ARG(1);
		static inline void RingBuffer_Insert(RingBuffer_t* Buffer, const uint8_t Data)
		{
			GCC_FORCE_POINTER_ACCESS(Buffer);
     212:	e2 ed       	ldi	r30, 0xD2	; 210
     214:	f2 e0       	ldi	r31, 0x02	; 2

			*Buffer->In = Data;
     216:	a0 81       	ld	r26, Z
     218:	b1 81       	ldd	r27, Z+1	; 0x01
		  RingBuffer_Insert(&USBtoUART_Buffer, ReceivedByte);
     21a:	8c 93       	st	X, r24

			if (++Buffer->In == Buffer->End)
     21c:	80 81       	ld	r24, Z
     21e:	91 81       	ldd	r25, Z+1	; 0x01
     220:	01 96       	adiw	r24, 0x01	; 1
     222:	91 83       	std	Z+1, r25	; 0x01
     224:	80 83       	st	Z, r24
     226:	26 81       	ldd	r18, Z+6	; 0x06
     228:	37 81       	ldd	r19, Z+7	; 0x07
     22a:	82 17       	cp	r24, r18
     22c:	93 07       	cpc	r25, r19
     22e:	21 f4       	brne	.+8      	; 0x238 <UARTBridge_Task+0x5e>
			  Buffer->In = Buffer->Start;
     230:	84 81       	ldd	r24, Z+4	; 0x04
     232:	95 81       	ldd	r25, Z+5	; 0x05
     234:	91 83       	std	Z+1, r25	; 0x01
     236:	80 83       	st	Z, r24
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
     238:	2f b7       	in	r18, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
     23a:	f8 94       	cli

			uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
			GlobalInterruptDisable();

			Buffer->Count++;
     23c:	82 85       	ldd	r24, Z+10	; 0x0a
     23e:	93 85       	ldd	r25, Z+11	; 0x0b
     240:	01 96       	adiw	r24, 0x01	; 1
     242:	93 87       	std	Z+11, r25	; 0x0b
     244:	82 87       	std	Z+10, r24	; 0x0a
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
     246:	2f bf       	out	0x3f, r18	; 63
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
     248:	8f b7       	in	r24, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
     24a:	f8 94       	cli
			uint16_t Count;

			uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
			GlobalInterruptDisable();

			Count = Buffer->Count;
     24c:	c0 91 e8 02 	lds	r28, 0x02E8
     250:	d0 91 e9 02 	lds	r29, 0x02E9
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
     254:	8f bf       	out	0x3f, r24	; 63
	}

	/* Check if the UART receive buffer flush timer has expired or buffer is nearly full */
	uint16_t BufferCount = RingBuffer_GetCount(&UARTtoUSB_Buffer);
	if ((TIFR0 & (1 << TOV0)) || (BufferCount > 200))
     256:	a8 99       	sbic	0x15, 0	; 21
     258:	03 c0       	rjmp	.+6      	; 0x260 <UARTBridge_Task+0x86>
     25a:	c9 3c       	cpi	r28, 0xC9	; 201
     25c:	d1 05       	cpc	r29, r1
     25e:	48 f1       	brcs	.+82     	; 0x2b2 <UARTBridge_Task+0xd8>
	{
		/* Clear flush timer expiry flag */
		TIFR0 |= (1 << TOV0);
     260:	a8 9a       	sbi	0x15, 0	; 21
		 *  \return Next data element stored in the buffer.
		 */
		static inline uint8_t RingBuffer_Remove(RingBuffer_t* Buffer) ATTR_NON_NULL_PTR_ARG(1);
		static inline uint8_t RingBuffer_Remove(RingBuffer_t* Buffer)
		{
			GCC_FORCE_POINTER_ACCESS(Buffer);
     262:	0e ed       	ldi	r16, 0xDE	; 222
     264:	12 e0       	ldi	r17, 0x02	; 2

		/* Read bytes from the USART receive buffer into the USB IN endpoint */
		while (BufferCount--)
     266:	23 c0       	rjmp	.+70     	; 0x2ae <UARTBridge_Task+0xd4>
		 *  \return Next data element stored in the buffer.
		 */
		static inline uint8_t RingBuffer_Peek(RingBuffer_t* const Buffer) ATTR_WARN_UNUSED_RESULT ATTR_NON_NULL_PTR_ARG(1);
		static inline uint8_t RingBuffer_Peek(RingBuffer_t* const Buffer)
		{
			return *Buffer->Out;
     268:	e0 91 e0 02 	lds	r30, 0x02E0
     26c:	f0 91 e1 02 	lds	r31, 0x02E1
		{
			/* Try to send the next byte of data to the host, abort if there is an error without dequeuing */
			if (CDC_Device_SendByte(&VirtualSerial_CDC_Interface,
     270:	80 e0       	ldi	r24, 0x00	; 0
     272:	91 e0       	ldi	r25, 0x01	; 1
     274:	60 81       	ld	r22, Z
     276:	0e 94 5e 11 	call	0x22bc	; 0x22bc <CDC_Device_SendByte>
     27a:	88 23       	and	r24, r24
     27c:	d1 f4       	brne	.+52     	; 0x2b2 <UARTBridge_Task+0xd8>
		 *  \return Next data element stored in the buffer.
		 */
		static inline uint8_t RingBuffer_Remove(RingBuffer_t* Buffer) ATTR_NON_NULL_PTR_ARG(1);
		static inline uint8_t RingBuffer_Remove(RingBuffer_t* Buffer)
		{
			GCC_FORCE_POINTER_ACCESS(Buffer);
     27e:	f8 01       	movw	r30, r16

			uint8_t Data = *Buffer->Out;

			if (++Buffer->Out == Buffer->End)
     280:	82 81       	ldd	r24, Z+2	; 0x02
     282:	93 81       	ldd	r25, Z+3	; 0x03
     284:	01 96       	adiw	r24, 0x01	; 1
     286:	93 83       	std	Z+3, r25	; 0x03
     288:	82 83       	std	Z+2, r24	; 0x02
     28a:	26 81       	ldd	r18, Z+6	; 0x06
     28c:	37 81       	ldd	r19, Z+7	; 0x07
     28e:	82 17       	cp	r24, r18
     290:	93 07       	cpc	r25, r19
     292:	21 f4       	brne	.+8      	; 0x29c <UARTBridge_Task+0xc2>
			  Buffer->Out = Buffer->Start;
     294:	84 81       	ldd	r24, Z+4	; 0x04
     296:	95 81       	ldd	r25, Z+5	; 0x05
     298:	93 83       	std	Z+3, r25	; 0x03
     29a:	82 83       	std	Z+2, r24	; 0x02
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
     29c:	2f b7       	in	r18, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
     29e:	f8 94       	cli

			uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
			GlobalInterruptDisable();

			Buffer->Count--;
     2a0:	82 85       	ldd	r24, Z+10	; 0x0a
     2a2:	93 85       	ldd	r25, Z+11	; 0x0b
     2a4:	01 97       	sbiw	r24, 0x01	; 1
     2a6:	93 87       	std	Z+11, r25	; 0x0b
     2a8:	82 87       	std	Z+10, r24	; 0x0a
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
     2aa:	2f bf       	out	0x3f, r18	; 63
				  __builtin_csrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				SREG = GlobalIntState;
				#endif

				GCC_MEMORY_BARRIER();
     2ac:	21 97       	sbiw	r28, 0x01	; 1
	{
		/* Clear flush timer expiry flag */
		TIFR0 |= (1 << TOV0);

		/* Read bytes from the USART receive buffer into the USB IN endpoint */
		while (BufferCount--)
     2ae:	20 97       	sbiw	r28, 0x00	; 0
     2b0:	d9 f6       	brne	.-74     	; 0x268 <UARTBridge_Task+0x8e>
			/* Dequeue the already sent byte from the buffer now we have confirmed that no transmission error occurred */
			RingBuffer_Remove(&UARTtoUSB_Buffer);
		}
	}

	CDC_Device_USBTask(&VirtualSerial_CDC_Interface);
     2b2:	80 e0       	ldi	r24, 0x00	; 0
     2b4:	91 e0       	ldi	r25, 0x01	; 1
     2b6:	0e 94 b3 11 	call	0x2366	; 0x2366 <CDC_Device_USBTask>
}
     2ba:	df 91       	pop	r29
     2bc:	cf 91       	pop	r28
     2be:	1f 91       	pop	r17
     2c0:	0f 91       	pop	r16
     2c2:	08 95       	ret

000002c4 <SetupHardware>:

/** Configures the board hardware and chip peripherals for the demo's functionality. */
void SetupHardware(void)
{
	/* Disable watchdog if enabled by bootloader/fuses */
	MCUSR &= ~(1 << WDRF);
     2c4:	84 b7       	in	r24, 0x34	; 52
     2c6:	87 7f       	andi	r24, 0xF7	; 247
     2c8:	84 bf       	out	0x34, r24	; 52
	wdt_disable();
     2ca:	88 e1       	ldi	r24, 0x18	; 24
     2cc:	0f b6       	in	r0, 0x3f	; 63
     2ce:	f8 94       	cli
     2d0:	80 93 60 00 	sts	0x0060, r24
     2d4:	10 92 60 00 	sts	0x0060, r1
     2d8:	0f be       	out	0x3f, r0	; 63
The type of x is clock_div_t.
*/
void clock_prescale_set(clock_div_t __x)
{
    uint8_t __tmp = _BV(CLKPCE);
    __asm__ __volatile__ (
     2da:	90 e0       	ldi	r25, 0x00	; 0
     2dc:	80 e8       	ldi	r24, 0x80	; 128
     2de:	0f b6       	in	r0, 0x3f	; 63
     2e0:	f8 94       	cli
     2e2:	80 93 61 00 	sts	0x0061, r24
     2e6:	90 93 61 00 	sts	0x0061, r25
     2ea:	0f be       	out	0x3f, r0	; 63

	/* Disable clock division */
	clock_prescale_set(clock_div_1);

	/* Disable JTAG debugging */
	MCUCR |= (1 << JTD);
     2ec:	85 b7       	in	r24, 0x35	; 53
     2ee:	80 68       	ori	r24, 0x80	; 128
     2f0:	85 bf       	out	0x35, r24	; 53
	MCUCR |= (1 << JTD);
     2f2:	85 b7       	in	r24, 0x35	; 53
     2f4:	80 68       	ori	r24, 0x80	; 128
     2f6:	85 bf       	out	0x35, r24	; 53

	/* Enable pull-up on the JTAG TDI pin so we can use it to select the mode */
	PORTF |= (1 << 7);
     2f8:	8f 9a       	sbi	0x11, 7	; 17
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     2fa:	8f e1       	ldi	r24, 0x1F	; 31
     2fc:	9e e4       	ldi	r25, 0x4E	; 78
     2fe:	01 97       	sbiw	r24, 0x01	; 1
     300:	f1 f7       	brne	.-4      	; 0x2fe <SetupHardware+0x3a>
     302:	00 c0       	rjmp	.+0      	; 0x304 <SetupHardware+0x40>
     304:	00 00       	nop
	Delay_MS(10);

	/* Select the firmware mode based on the JTD pin's value */
	CurrentFirmwareMode = (PINF & (1 << 7)) ? MODE_USART_BRIDGE : MODE_PDI_PROGRAMMER;
     306:	8f b1       	in	r24, 0x0f	; 15
     308:	80 95       	com	r24
     30a:	88 1f       	adc	r24, r24
     30c:	88 27       	eor	r24, r24
     30e:	88 1f       	adc	r24, r24
     310:	80 93 cc 01 	sts	0x01CC, r24

	/* Re-enable JTAG debugging */
	MCUCR &= ~(1 << JTD);
     314:	85 b7       	in	r24, 0x35	; 53
     316:	8f 77       	andi	r24, 0x7F	; 127
     318:	85 bf       	out	0x35, r24	; 53
	MCUCR &= ~(1 << JTD);
     31a:	85 b7       	in	r24, 0x35	; 53
     31c:	8f 77       	andi	r24, 0x7F	; 127
     31e:	85 bf       	out	0x35, r24	; 53

	/* Hardware Initialization */
	SoftUART_Init();
     320:	84 d0       	rcall	.+264    	; 0x42a <SoftUART_Init>
     322:	26 9a       	sbi	0x04, 6	; 4

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void LEDs_Init(void)
			{
				DDRB  |= LEDS_ALL_LEDS;
     324:	2e 9a       	sbi	0x05, 6	; 5
				PORTB |= LEDS_ALL_LEDS;
     326:	0c 94 46 0e 	jmp	0x1c8c	; 0x1c8c <USB_Init>

0000032a <main>:
	#if defined(RESET_TOGGLES_LIBUSB_COMPAT)
	UpdateCurrentCompatibilityMode();
	#endif
	
	/* USB Stack Initialization */	
	USB_Init();
     32a:	cc df       	rcall	.-104    	; 0x2c4 <SetupHardware>
}
     32c:	80 e4       	ldi	r24, 0x40	; 64
 */
int main(void)
{
	SetupHardware();

	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
     32e:	3e df       	rcall	.-388    	; 0x1ac <LEDs_SetAllLEDs>
     330:	78 94       	sei
     332:	80 91 cc 01 	lds	r24, 0x01CC
	GlobalInterruptEnable();

	for (;;)
	{
		if (CurrentFirmwareMode == MODE_USART_BRIDGE)
     336:	88 23       	and	r24, r24
     338:	11 f4       	brne	.+4      	; 0x33e <main+0x14>
     33a:	4f df       	rcall	.-354    	; 0x1da <UARTBridge_Task>
     33c:	01 c0       	rjmp	.+2      	; 0x340 <main+0x16>
		  UARTBridge_Task();
     33e:	3c df       	rcall	.-392    	; 0x1b8 <AVRISP_Task>
     340:	0e 94 72 10 	call	0x20e4	; 0x20e4 <USB_USBTask>
		else
		  AVRISP_Task();
     344:	f6 cf       	rjmp	.-20     	; 0x332 <main+0x8>

00000346 <EVENT_USB_Device_ConfigurationChanged>:
     346:	cf 93       	push	r28

		USB_USBTask();
     348:	80 91 cc 01 	lds	r24, 0x01CC
	}
     34c:	88 23       	and	r24, r24
void EVENT_USB_Device_ConfigurationChanged(void)
{
	bool ConfigSuccess = true;

	/* Configure the device endpoints according to the selected mode */
	if (CurrentFirmwareMode == MODE_USART_BRIDGE)
     34e:	a9 f5       	brne	.+106    	; 0x3ba <EVENT_USB_Device_ConfigurationChanged+0x74>
	{
		ConfigSuccess &= CDC_Device_ConfigureEndpoints(&VirtualSerial_CDC_Interface);
     350:	80 e0       	ldi	r24, 0x00	; 0
     352:	91 e0       	ldi	r25, 0x01	; 1
     354:	0e 94 3a 11 	call	0x2274	; 0x2274 <CDC_Device_ConfigureEndpoints>
     358:	c8 2f       	mov	r28, r24

		/* Configure the UART flush timer - run at Fcpu/1024 for maximum interval before overflow */
		TCCR0B = ((1 << CS02) | (1 << CS00));
     35a:	85 e0       	ldi	r24, 0x05	; 5
     35c:	85 bd       	out	0x25, r24	; 37
		                                         const uint16_t Size) ATTR_NON_NULL_PTR_ARG(1) ATTR_NON_NULL_PTR_ARG(2);
		static inline void RingBuffer_InitBuffer(RingBuffer_t* Buffer,
		                                         uint8_t* const DataPtr,
		                                         const uint16_t Size)
		{
			GCC_FORCE_POINTER_ACCESS(Buffer);
     35e:	e2 ed       	ldi	r30, 0xD2	; 210
     360:	f2 e0       	ldi	r31, 0x02	; 2
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
     362:	2f b7       	in	r18, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
     364:	f8 94       	cli

			uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
			GlobalInterruptDisable();

			Buffer->In     = DataPtr;
     366:	8d ec       	ldi	r24, 0xCD	; 205
     368:	91 e0       	ldi	r25, 0x01	; 1
     36a:	91 83       	std	Z+1, r25	; 0x01
     36c:	80 83       	st	Z, r24
			Buffer->Out    = DataPtr;
     36e:	93 83       	std	Z+3, r25	; 0x03
     370:	82 83       	std	Z+2, r24	; 0x02
			Buffer->Start  = &DataPtr[0];
     372:	95 83       	std	Z+5, r25	; 0x05
     374:	84 83       	std	Z+4, r24	; 0x04
			Buffer->End    = &DataPtr[Size];
     376:	8d e4       	ldi	r24, 0x4D	; 77
     378:	92 e0       	ldi	r25, 0x02	; 2
     37a:	97 83       	std	Z+7, r25	; 0x07
     37c:	86 83       	std	Z+6, r24	; 0x06
			Buffer->Size   = Size;
     37e:	80 e8       	ldi	r24, 0x80	; 128
     380:	90 e0       	ldi	r25, 0x00	; 0
     382:	91 87       	std	Z+9, r25	; 0x09
     384:	80 87       	std	Z+8, r24	; 0x08
			Buffer->Count  = 0;
     386:	13 86       	std	Z+11, r1	; 0x0b
     388:	12 86       	std	Z+10, r1	; 0x0a
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
     38a:	2f bf       	out	0x3f, r18	; 63
		                                         const uint16_t Size) ATTR_NON_NULL_PTR_ARG(1) ATTR_NON_NULL_PTR_ARG(2);
		static inline void RingBuffer_InitBuffer(RingBuffer_t* Buffer,
		                                         uint8_t* const DataPtr,
		                                         const uint16_t Size)
		{
			GCC_FORCE_POINTER_ACCESS(Buffer);
     38c:	ee ed       	ldi	r30, 0xDE	; 222
     38e:	f2 e0       	ldi	r31, 0x02	; 2
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
     390:	4f b7       	in	r20, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
     392:	f8 94       	cli

			uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
			GlobalInterruptDisable();

			Buffer->In     = DataPtr;
     394:	2d e4       	ldi	r18, 0x4D	; 77
     396:	32 e0       	ldi	r19, 0x02	; 2
     398:	31 83       	std	Z+1, r19	; 0x01
     39a:	20 83       	st	Z, r18
			Buffer->Out    = DataPtr;
     39c:	33 83       	std	Z+3, r19	; 0x03
     39e:	22 83       	std	Z+2, r18	; 0x02
			Buffer->Start  = &DataPtr[0];
     3a0:	35 83       	std	Z+5, r19	; 0x05
     3a2:	24 83       	std	Z+4, r18	; 0x04
			Buffer->End    = &DataPtr[Size];
     3a4:	2d ec       	ldi	r18, 0xCD	; 205
     3a6:	32 e0       	ldi	r19, 0x02	; 2
     3a8:	37 83       	std	Z+7, r19	; 0x07
     3aa:	26 83       	std	Z+6, r18	; 0x06
			Buffer->Size   = Size;
     3ac:	91 87       	std	Z+9, r25	; 0x09
     3ae:	80 87       	std	Z+8, r24	; 0x08
			Buffer->Count  = 0;
     3b0:	13 86       	std	Z+11, r1	; 0x0b
     3b2:	12 86       	std	Z+10, r1	; 0x0a
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
     3b4:	4f bf       	out	0x3f, r20	; 63
		/* Initialize ring buffers used to hold serial data between USB and software UART interfaces */
		RingBuffer_InitBuffer(&USBtoUART_Buffer, USBtoUART_Buffer_Data, sizeof(USBtoUART_Buffer_Data));
		RingBuffer_InitBuffer(&UARTtoUSB_Buffer, UARTtoUSB_Buffer_Data, sizeof(UARTtoUSB_Buffer_Data));

		/* Start the software USART */
		SoftUART_Init();
     3b6:	39 d0       	rcall	.+114    	; 0x42a <SoftUART_Init>
     3b8:	07 c0       	rjmp	.+14     	; 0x3c8 <EVENT_USB_Device_ConfigurationChanged+0x82>
     3ba:	82 e0       	ldi	r24, 0x02	; 2
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
     3bc:	60 e8       	ldi	r22, 0x80	; 128
     3be:	42 e3       	ldi	r20, 0x32	; 50
     3c0:	0e 94 65 0d 	call	0x1aca	; 0x1aca <Endpoint_ConfigureEndpoint_Prv>
     3c4:	c8 2f       	mov	r28, r24
     3c6:	a4 d1       	rcall	.+840    	; 0x710 <V2Protocol_Init>

		if ((AVRISP_DATA_IN_EPADDR & ENDPOINT_EPNUM_MASK) != (AVRISP_DATA_OUT_EPADDR & ENDPOINT_EPNUM_MASK))
		  ConfigSuccess &= Endpoint_ConfigureEndpoint(AVRISP_DATA_IN_EPADDR, EP_TYPE_BULK, AVRISP_DATA_EPSIZE, 1);

		/* Configure the V2 protocol packet handler */
		V2Protocol_Init();
     3c8:	cc 23       	and	r28, r28
     3ca:	11 f0       	breq	.+4      	; 0x3d0 <EVENT_USB_Device_ConfigurationChanged+0x8a>
	}

	LEDs_SetAllLEDs(ConfigSuccess ? LEDMASK_USB_READY : LEDMASK_USB_ERROR);
     3cc:	80 e0       	ldi	r24, 0x00	; 0
     3ce:	01 c0       	rjmp	.+2      	; 0x3d2 <EVENT_USB_Device_ConfigurationChanged+0x8c>
     3d0:	80 e4       	ldi	r24, 0x40	; 64
     3d2:	ec de       	rcall	.-552    	; 0x1ac <LEDs_SetAllLEDs>
     3d4:	cf 91       	pop	r28
     3d6:	08 95       	ret

000003d8 <EVENT_USB_Device_ControlRequest>:
     3d8:	80 91 cc 01 	lds	r24, 0x01CC
}
     3dc:	88 23       	and	r24, r24

/** Event handler for the library USB Control Request reception event. */
void EVENT_USB_Device_ControlRequest(void)
{
	if (CurrentFirmwareMode == MODE_USART_BRIDGE)
     3de:	21 f4       	brne	.+8      	; 0x3e8 <EVENT_USB_Device_ControlRequest+0x10>
	  CDC_Device_ProcessControlRequest(&VirtualSerial_CDC_Interface);
     3e0:	80 e0       	ldi	r24, 0x00	; 0
     3e2:	91 e0       	ldi	r25, 0x01	; 1
     3e4:	0c 94 8d 10 	jmp	0x211a	; 0x211a <CDC_Device_ProcessControlRequest>
     3e8:	08 95       	ret

000003ea <EVENT_USB_Device_Connect>:
}

/** Event handler for the library USB Connection event. */
void EVENT_USB_Device_Connect(void)
{
	LEDs_SetAllLEDs(LEDMASK_USB_ENUMERATING);
     3ea:	80 e4       	ldi	r24, 0x40	; 64
     3ec:	df ce       	rjmp	.-578    	; 0x1ac <LEDs_SetAllLEDs>

000003ee <EVENT_USB_Device_Disconnect>:
     3ee:	80 e4       	ldi	r24, 0x40	; 64
}
     3f0:	dd ce       	rjmp	.-582    	; 0x1ac <LEDs_SetAllLEDs>

000003f2 <EVENT_CDC_Device_LineEncodingChanged>:

/** Event handler for the library USB Disconnection event. */
void EVENT_USB_Device_Disconnect(void)
{
	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
     3f2:	fc 01       	movw	r30, r24
}
     3f4:	24 89       	ldd	r18, Z+20	; 0x14
		#define STXDDR     DDRD

	/* Inline Functions: */
		static inline void SoftUART_SetBaud(const uint32_t Baud)
		{
			uint16_t BitTime = ((F_CPU / Baud) - 1);
     3f6:	35 89       	ldd	r19, Z+21	; 0x15
     3f8:	46 89       	ldd	r20, Z+22	; 0x16
     3fa:	57 89       	ldd	r21, Z+23	; 0x17
     3fc:	60 e0       	ldi	r22, 0x00	; 0
     3fe:	72 e1       	ldi	r23, 0x12	; 18
     400:	8a e7       	ldi	r24, 0x7A	; 122
     402:	90 e0       	ldi	r25, 0x00	; 0
     404:	0e 94 ff 11 	call	0x23fe	; 0x23fe <__udivmodsi4>
     408:	21 50       	subi	r18, 0x01	; 1
     40a:	30 40       	sbci	r19, 0x00	; 0

			OCR1A = BitTime;
     40c:	30 93 89 00 	sts	0x0089, r19
     410:	20 93 88 00 	sts	0x0088, r18
			OCR3A = BitTime;
     414:	30 93 99 00 	sts	0x0099, r19
     418:	20 93 98 00 	sts	0x0098, r18
 */
void EVENT_CDC_Device_LineEncodingChanged(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
	/* Change the software UART's baud rate to match the new baud rate */
	SoftUART_SetBaud(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS);
}
     41c:	08 95       	ret

0000041e <CALLBACK_USB_GetDescriptor>:
                                    const uint8_t wIndex,
                                    const void** const DescriptorAddress,
		                            uint8_t* const DescriptorMemorySpace)
{
	/* Return the correct descriptors based on the selected mode */
	if (CurrentFirmwareMode == MODE_USART_BRIDGE)
     41e:	70 91 cc 01 	lds	r23, 0x01CC
     422:	77 23       	and	r23, r23
     424:	09 f4       	brne	.+2      	; 0x428 <CALLBACK_USB_GetDescriptor+0xa>
	  return USART_GetDescriptor(wValue, wIndex, DescriptorAddress, DescriptorMemorySpace);
     426:	f2 c0       	rjmp	.+484    	; 0x60c <USART_GetDescriptor>
     428:	1f c1       	rjmp	.+574    	; 0x668 <AVRISP_GetDescriptor>

0000042a <SoftUART_Init>:

/** Initializes the software UART, ready for data transmission and reception into the global ring buffers. */
void SoftUART_Init(void)
{
	/* Set TX pin to output high, enable RX pull-up */
	STXPORT |= (1 << STX);
     42a:	59 9a       	sbi	0x0b, 1	; 11
	STXDDR  |= (1 << STX);
     42c:	51 9a       	sbi	0x0a, 1	; 10
	SRXPORT |= (1 << SRX);
     42e:	58 9a       	sbi	0x0b, 0	; 11

	/* Enable INT0 for the detection of incoming start bits that signal the start of a byte */
	EICRA  = (1 << ISC01);
     430:	22 e0       	ldi	r18, 0x02	; 2
     432:	20 93 69 00 	sts	0x0069, r18
	EIMSK  = (1 << INT0);
     436:	81 e0       	ldi	r24, 0x01	; 1
     438:	8d bb       	out	0x1d, r24	; 29
	/* Inline Functions: */
		static inline void SoftUART_SetBaud(const uint32_t Baud)
		{
			uint16_t BitTime = ((F_CPU / Baud) - 1);

			OCR1A = BitTime;
     43a:	80 e4       	ldi	r24, 0x40	; 64
     43c:	93 e0       	ldi	r25, 0x03	; 3
     43e:	90 93 89 00 	sts	0x0089, r25
     442:	80 93 88 00 	sts	0x0088, r24
			OCR3A = BitTime;
     446:	90 93 99 00 	sts	0x0099, r25
     44a:	80 93 98 00 	sts	0x0098, r24

	/* Set the transmission and reception timer compare values for the default baud rate */
	SoftUART_SetBaud(9600);

	/* Setup reception timer compare ISR */
	TIMSK1 = (1 << OCIE1A);
     44e:	20 93 6f 00 	sts	0x006F, r18

	/* Setup transmission timer compare ISR and start the timer */
	TIMSK3 = (1 << OCIE3A);
     452:	20 93 71 00 	sts	0x0071, r18
	TCCR3B = ((1 << CS30) | (1 << WGM32));
     456:	89 e0       	ldi	r24, 0x09	; 9
     458:	80 93 91 00 	sts	0x0091, r24
}
     45c:	08 95       	ret

0000045e <__vector_1>:

/** ISR to detect the start of a bit being sent to the software UART. */
ISR(INT0_vect, ISR_BLOCK)
{
     45e:	1f 92       	push	r1
     460:	0f 92       	push	r0
     462:	0f b6       	in	r0, 0x3f	; 63
     464:	0f 92       	push	r0
     466:	11 24       	eor	r1, r1
     468:	8f 93       	push	r24
     46a:	9f 93       	push	r25
	/* Reset the number of reception bits remaining counter */
	RX_BitsRemaining = 8;
     46c:	88 e0       	ldi	r24, 0x08	; 8
     46e:	80 93 cd 02 	sts	0x02CD, r24

	/* Reset the bit reception timer to -(1/2) of the total bit time, so that the first data bit is
	 * sampled mid way through the total bit time, making reception more robust.
	 */
	TCNT1 = -(OCR1A >> 1);
     472:	80 91 88 00 	lds	r24, 0x0088
     476:	90 91 89 00 	lds	r25, 0x0089
     47a:	96 95       	lsr	r25
     47c:	87 95       	ror	r24
     47e:	90 95       	com	r25
     480:	81 95       	neg	r24
     482:	9f 4f       	sbci	r25, 0xFF	; 255
     484:	90 93 85 00 	sts	0x0085, r25
     488:	80 93 84 00 	sts	0x0084, r24

	/* Check to see that the pin is still low (prevents glitches from starting a frame reception) */
	if (!(SRXPIN & (1 << SRX)))
     48c:	48 99       	sbic	0x09, 0	; 9
     48e:	04 c0       	rjmp	.+8      	; 0x498 <__vector_1+0x3a>
	{
		/* Disable start bit detection ISR while the next byte is received */
		EIMSK = 0;
     490:	1d ba       	out	0x1d, r1	; 29

		/* Start the reception timer */
		TCCR1B = ((1 << CS10) | (1 << WGM12));
     492:	89 e0       	ldi	r24, 0x09	; 9
     494:	80 93 81 00 	sts	0x0081, r24
	}
}
     498:	9f 91       	pop	r25
     49a:	8f 91       	pop	r24
     49c:	0f 90       	pop	r0
     49e:	0f be       	out	0x3f, r0	; 63
     4a0:	0f 90       	pop	r0
     4a2:	1f 90       	pop	r1
     4a4:	18 95       	reti

000004a6 <__vector_17>:

/** ISR to manage the reception of bits to the software UART. */
ISR(TIMER1_COMPA_vect, ISR_BLOCK)
{
     4a6:	1f 92       	push	r1
     4a8:	0f 92       	push	r0
     4aa:	0f b6       	in	r0, 0x3f	; 63
     4ac:	0f 92       	push	r0
     4ae:	0b b6       	in	r0, 0x3b	; 59
     4b0:	0f 92       	push	r0
     4b2:	11 24       	eor	r1, r1
     4b4:	2f 93       	push	r18
     4b6:	3f 93       	push	r19
     4b8:	8f 93       	push	r24
     4ba:	9f 93       	push	r25
     4bc:	af 93       	push	r26
     4be:	bf 93       	push	r27
     4c0:	ef 93       	push	r30
     4c2:	ff 93       	push	r31
	/* Cache the current RX pin value for later checking */
	uint8_t SRX_Cached = (SRXPIN & (1 << SRX));
     4c4:	89 b1       	in	r24, 0x09	; 9
     4c6:	81 70       	andi	r24, 0x01	; 1

	/* Check if reception has finished */
	if (RX_BitsRemaining)
     4c8:	20 91 cd 02 	lds	r18, 0x02CD
     4cc:	22 23       	and	r18, r18
     4ce:	71 f0       	breq	.+28     	; 0x4ec <__vector_17+0x46>
	{
		/* Shift the current received bit mask to the next bit position */
		RX_Data >>= 1;
     4d0:	90 91 ce 02 	lds	r25, 0x02CE
     4d4:	96 95       	lsr	r25
     4d6:	90 93 ce 02 	sts	0x02CE, r25
		RX_BitsRemaining--;
     4da:	21 50       	subi	r18, 0x01	; 1
     4dc:	20 93 cd 02 	sts	0x02CD, r18

		/* Store next bit into the received data variable */
		if (SRX_Cached)
     4e0:	88 23       	and	r24, r24
     4e2:	41 f1       	breq	.+80     	; 0x534 <__vector_17+0x8e>
		  RX_Data |= (1 << 7);
     4e4:	90 68       	ori	r25, 0x80	; 128
     4e6:	90 93 ce 02 	sts	0x02CE, r25
     4ea:	24 c0       	rjmp	.+72     	; 0x534 <__vector_17+0x8e>
	}
	else
	{
		/* Disable the reception timer as all data has now been received, re-enable start bit detection ISR */
		TCCR1B = 0;
     4ec:	10 92 81 00 	sts	0x0081, r1
		EIFR   = (1 << INTF0);
     4f0:	91 e0       	ldi	r25, 0x01	; 1
     4f2:	9c bb       	out	0x1c, r25	; 28
		EIMSK  = (1 << INT0);
     4f4:	9d bb       	out	0x1d, r25	; 29

		/* Reception complete, store the received byte if stop bit valid */
		if (SRX_Cached)
     4f6:	88 23       	and	r24, r24
     4f8:	e9 f0       	breq	.+58     	; 0x534 <__vector_17+0x8e>
		 *  \param[in]     Data    Data element to insert into the buffer.
		 */
		static inline void RingBuffer_Insert(RingBuffer_t* Buffer, const uint8_t Data) ATTR_NON_NULL_PTR_ARG(1);
		static inline void RingBuffer_Insert(RingBuffer_t* Buffer, const uint8_t Data)
		{
			GCC_FORCE_POINTER_ACCESS(Buffer);
     4fa:	ee ed       	ldi	r30, 0xDE	; 222
     4fc:	f2 e0       	ldi	r31, 0x02	; 2

			*Buffer->In = Data;
     4fe:	a0 81       	ld	r26, Z
     500:	b1 81       	ldd	r27, Z+1	; 0x01
     502:	80 91 ce 02 	lds	r24, 0x02CE
     506:	8c 93       	st	X, r24

			if (++Buffer->In == Buffer->End)
     508:	80 81       	ld	r24, Z
     50a:	91 81       	ldd	r25, Z+1	; 0x01
     50c:	01 96       	adiw	r24, 0x01	; 1
     50e:	91 83       	std	Z+1, r25	; 0x01
     510:	80 83       	st	Z, r24
     512:	26 81       	ldd	r18, Z+6	; 0x06
     514:	37 81       	ldd	r19, Z+7	; 0x07
     516:	82 17       	cp	r24, r18
     518:	93 07       	cpc	r25, r19
     51a:	21 f4       	brne	.+8      	; 0x524 <__vector_17+0x7e>
			  Buffer->In = Buffer->Start;
     51c:	84 81       	ldd	r24, Z+4	; 0x04
     51e:	95 81       	ldd	r25, Z+5	; 0x05
     520:	91 83       	std	Z+1, r25	; 0x01
     522:	80 83       	st	Z, r24
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
     524:	2f b7       	in	r18, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
     526:	f8 94       	cli

			uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
			GlobalInterruptDisable();

			Buffer->Count++;
     528:	82 85       	ldd	r24, Z+10	; 0x0a
     52a:	93 85       	ldd	r25, Z+11	; 0x0b
     52c:	01 96       	adiw	r24, 0x01	; 1
     52e:	93 87       	std	Z+11, r25	; 0x0b
     530:	82 87       	std	Z+10, r24	; 0x0a
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
     532:	2f bf       	out	0x3f, r18	; 63
		  RingBuffer_Insert(&UARTtoUSB_Buffer, RX_Data);
	}
}
     534:	ff 91       	pop	r31
     536:	ef 91       	pop	r30
     538:	bf 91       	pop	r27
     53a:	af 91       	pop	r26
     53c:	9f 91       	pop	r25
     53e:	8f 91       	pop	r24
     540:	3f 91       	pop	r19
     542:	2f 91       	pop	r18
     544:	0f 90       	pop	r0
     546:	0b be       	out	0x3b, r0	; 59
     548:	0f 90       	pop	r0
     54a:	0f be       	out	0x3f, r0	; 63
     54c:	0f 90       	pop	r0
     54e:	1f 90       	pop	r1
     550:	18 95       	reti

00000552 <__vector_32>:

/** ISR to manage the transmission of bits via the software UART. */
ISR(TIMER3_COMPA_vect, ISR_BLOCK)
{
     552:	1f 92       	push	r1
     554:	0f 92       	push	r0
     556:	0f b6       	in	r0, 0x3f	; 63
     558:	0f 92       	push	r0
     55a:	0b b6       	in	r0, 0x3b	; 59
     55c:	0f 92       	push	r0
     55e:	11 24       	eor	r1, r1
     560:	2f 93       	push	r18
     562:	3f 93       	push	r19
     564:	8f 93       	push	r24
     566:	9f 93       	push	r25
     568:	af 93       	push	r26
     56a:	bf 93       	push	r27
     56c:	ef 93       	push	r30
     56e:	ff 93       	push	r31
	/* Check if transmission has finished */
	if (TX_BitsRemaining)
     570:	80 91 cf 02 	lds	r24, 0x02CF
     574:	88 23       	and	r24, r24
     576:	71 f0       	breq	.+28     	; 0x594 <__vector_32+0x42>
	{
		/* Set the TX line to the value of the next bit in the byte to send */
		if (TX_Data & (1 << 0))
     578:	80 91 d0 02 	lds	r24, 0x02D0
     57c:	80 ff       	sbrs	r24, 0
     57e:	02 c0       	rjmp	.+4      	; 0x584 <__vector_32+0x32>
		  STXPORT &= ~(1 << STX);
     580:	59 98       	cbi	0x0b, 1	; 11
     582:	01 c0       	rjmp	.+2      	; 0x586 <__vector_32+0x34>
		else
		  STXPORT |=  (1 << STX);
     584:	59 9a       	sbi	0x0b, 1	; 11

		/* Shift the transmission byte to move the next bit into position and decrement the bits remaining counter */
		TX_Data >>= 1;
     586:	86 95       	lsr	r24
     588:	80 93 d0 02 	sts	0x02D0, r24
		TX_BitsRemaining--;
     58c:	80 91 cf 02 	lds	r24, 0x02CF
     590:	81 50       	subi	r24, 0x01	; 1
     592:	2b c0       	rjmp	.+86     	; 0x5ea <__vector_32+0x98>
	}
	else if (!(RX_BitsRemaining) && !(RingBuffer_IsEmpty(&USBtoUART_Buffer)))
     594:	80 91 cd 02 	lds	r24, 0x02CD
     598:	88 23       	and	r24, r24
     59a:	49 f5       	brne	.+82     	; 0x5ee <__vector_32+0x9c>
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
     59c:	2f b7       	in	r18, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
     59e:	f8 94       	cli
			uint16_t Count;

			uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
			GlobalInterruptDisable();

			Count = Buffer->Count;
     5a0:	80 91 dc 02 	lds	r24, 0x02DC
     5a4:	90 91 dd 02 	lds	r25, 0x02DD
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
     5a8:	2f bf       	out	0x3f, r18	; 63
     5aa:	00 97       	sbiw	r24, 0x00	; 0
     5ac:	01 f1       	breq	.+64     	; 0x5ee <__vector_32+0x9c>
	{
		/* Start bit - TX line low */
		STXPORT &= ~(1 << STX);
     5ae:	59 98       	cbi	0x0b, 1	; 11
		 *  \return Next data element stored in the buffer.
		 */
		static inline uint8_t RingBuffer_Remove(RingBuffer_t* Buffer) ATTR_NON_NULL_PTR_ARG(1);
		static inline uint8_t RingBuffer_Remove(RingBuffer_t* Buffer)
		{
			GCC_FORCE_POINTER_ACCESS(Buffer);
     5b0:	e2 ed       	ldi	r30, 0xD2	; 210
     5b2:	f2 e0       	ldi	r31, 0x02	; 2

			uint8_t Data = *Buffer->Out;
     5b4:	a2 81       	ldd	r26, Z+2	; 0x02
     5b6:	b3 81       	ldd	r27, Z+3	; 0x03
     5b8:	2d 91       	ld	r18, X+

			if (++Buffer->Out == Buffer->End)
     5ba:	b3 83       	std	Z+3, r27	; 0x03
     5bc:	a2 83       	std	Z+2, r26	; 0x02
     5be:	86 81       	ldd	r24, Z+6	; 0x06
     5c0:	97 81       	ldd	r25, Z+7	; 0x07
     5c2:	a8 17       	cp	r26, r24
     5c4:	b9 07       	cpc	r27, r25
     5c6:	21 f4       	brne	.+8      	; 0x5d0 <__vector_32+0x7e>
			  Buffer->Out = Buffer->Start;
     5c8:	84 81       	ldd	r24, Z+4	; 0x04
     5ca:	95 81       	ldd	r25, Z+5	; 0x05
     5cc:	93 83       	std	Z+3, r25	; 0x03
     5ce:	82 83       	std	Z+2, r24	; 0x02
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
     5d0:	3f b7       	in	r19, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
     5d2:	f8 94       	cli

			uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
			GlobalInterruptDisable();

			Buffer->Count--;
     5d4:	82 85       	ldd	r24, Z+10	; 0x0a
     5d6:	93 85       	ldd	r25, Z+11	; 0x0b
     5d8:	01 97       	sbiw	r24, 0x01	; 1
     5da:	93 87       	std	Z+11, r25	; 0x0b
     5dc:	82 87       	std	Z+10, r24	; 0x0a
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
     5de:	3f bf       	out	0x3f, r19	; 63

		/* Transmission complete, get the next byte to send (if available) */
		TX_Data          = ~RingBuffer_Remove(&USBtoUART_Buffer);
     5e0:	82 2f       	mov	r24, r18
     5e2:	80 95       	com	r24
     5e4:	80 93 d0 02 	sts	0x02D0, r24
		TX_BitsRemaining = 9;
     5e8:	89 e0       	ldi	r24, 0x09	; 9
     5ea:	80 93 cf 02 	sts	0x02CF, r24
	}
}
     5ee:	ff 91       	pop	r31
     5f0:	ef 91       	pop	r30
     5f2:	bf 91       	pop	r27
     5f4:	af 91       	pop	r26
     5f6:	9f 91       	pop	r25
     5f8:	8f 91       	pop	r24
     5fa:	3f 91       	pop	r19
     5fc:	2f 91       	pop	r18
     5fe:	0f 90       	pop	r0
     600:	0b be       	out	0x3b, r0	; 59
     602:	0f 90       	pop	r0
     604:	0f be       	out	0x3f, r0	; 63
     606:	0f 90       	pop	r0
     608:	1f 90       	pop	r1
     60a:	18 95       	reti

0000060c <USART_GetDescriptor>:
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;

	*DescriptorMemorySpace = MEMSPACE_FLASH;
     60c:	d9 01       	movw	r26, r18
     60e:	1c 92       	st	X, r1
	
	switch (DescriptorType)
     610:	92 30       	cpi	r25, 0x02	; 2
     612:	29 f0       	breq	.+10     	; 0x61e <USART_GetDescriptor+0x12>
     614:	93 30       	cpi	r25, 0x03	; 3
     616:	41 f0       	breq	.+16     	; 0x628 <USART_GetDescriptor+0x1c>
     618:	91 30       	cpi	r25, 0x01	; 1
     61a:	e9 f4       	brne	.+58     	; 0x656 <USART_GetDescriptor+0x4a>
     61c:	17 c0       	rjmp	.+46     	; 0x64c <USART_GetDescriptor+0x40>
			Address = &USART_DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			Address = &USART_ConfigurationDescriptor;
			Size    = sizeof(USART_USB_Descriptor_Configuration_t);
     61e:	8e e3       	ldi	r24, 0x3E	; 62
     620:	90 e0       	ldi	r25, 0x00	; 0
		case DTYPE_Device:
			Address = &USART_DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			Address = &USART_ConfigurationDescriptor;
     622:	ee ed       	ldi	r30, 0xDE	; 222
     624:	f0 e0       	ldi	r31, 0x00	; 0
			Size    = sizeof(USART_USB_Descriptor_Configuration_t);
			break;
     626:	1b c0       	rjmp	.+54     	; 0x65e <USART_GetDescriptor+0x52>
		case DTYPE_String:
			switch (DescriptorNumber)
     628:	81 30       	cpi	r24, 0x01	; 1
     62a:	41 f0       	breq	.+16     	; 0x63c <USART_GetDescriptor+0x30>
     62c:	81 30       	cpi	r24, 0x01	; 1
     62e:	18 f0       	brcs	.+6      	; 0x636 <USART_GetDescriptor+0x2a>
     630:	82 30       	cpi	r24, 0x02	; 2
     632:	89 f4       	brne	.+34     	; 0x656 <USART_GetDescriptor+0x4a>
     634:	06 c0       	rjmp	.+12     	; 0x642 <USART_GetDescriptor+0x36>
			{
				case 0x00:
					Address = &USART_LanguageString;
					Size    = pgm_read_byte(&USART_LanguageString.Header.Size);
     636:	ea ed       	ldi	r30, 0xDA	; 218
     638:	f0 e0       	ldi	r31, 0x00	; 0
     63a:	05 c0       	rjmp	.+10     	; 0x646 <USART_GetDescriptor+0x3a>
					break;
				case 0x01:
					Address = &USART_ManufacturerString;
					Size    = pgm_read_byte(&USART_ManufacturerString.Header.Size);
     63c:	e0 ec       	ldi	r30, 0xC0	; 192
     63e:	f0 e0       	ldi	r31, 0x00	; 0
     640:	02 c0       	rjmp	.+4      	; 0x646 <USART_GetDescriptor+0x3a>
					break;
				case 0x02:
					Address = &USART_ProductString;
					Size    = pgm_read_byte(&USART_ProductString.Header.Size);
     642:	e8 e9       	ldi	r30, 0x98	; 152
     644:	f0 e0       	ldi	r31, 0x00	; 0
     646:	84 91       	lpm	r24, Z
     648:	90 e0       	ldi	r25, 0x00	; 0
					break;
     64a:	09 c0       	rjmp	.+18     	; 0x65e <USART_GetDescriptor+0x52>
	
	switch (DescriptorType)
	{
		case DTYPE_Device:
			Address = &USART_DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
     64c:	82 e1       	ldi	r24, 0x12	; 18
     64e:	90 e0       	ldi	r25, 0x00	; 0
	*DescriptorMemorySpace = MEMSPACE_FLASH;
	
	switch (DescriptorType)
	{
		case DTYPE_Device:
			Address = &USART_DeviceDescriptor;
     650:	ec e1       	ldi	r30, 0x1C	; 28
     652:	f1 e0       	ldi	r31, 0x01	; 1
     654:	04 c0       	rjmp	.+8      	; 0x65e <USART_GetDescriptor+0x52>
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;
     656:	80 e0       	ldi	r24, 0x00	; 0
     658:	90 e0       	ldi	r25, 0x00	; 0
                             uint8_t* const DescriptorMemorySpace)
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
     65a:	e0 e0       	ldi	r30, 0x00	; 0
     65c:	f0 e0       	ldi	r31, 0x00	; 0
			}

			break;
	}

	*DescriptorAddress = Address;
     65e:	da 01       	movw	r26, r20
     660:	11 96       	adiw	r26, 0x01	; 1
     662:	fc 93       	st	X, r31
     664:	ee 93       	st	-X, r30
	return Size;
}
     666:	08 95       	ret

00000668 <AVRISP_GetDescriptor>:
 */
uint16_t AVRISP_GetDescriptor(const uint16_t wValue,
                              const uint8_t wIndex,
                              const void** const DescriptorAddress,
                              uint8_t* DescriptorMemorySpace)
{
     668:	f9 01       	movw	r30, r18
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;

	*DescriptorMemorySpace = MEMSPACE_FLASH;
     66a:	10 82       	st	Z, r1
	
	switch (DescriptorType)
     66c:	92 30       	cpi	r25, 0x02	; 2
     66e:	29 f0       	breq	.+10     	; 0x67a <AVRISP_GetDescriptor+0x12>
     670:	93 30       	cpi	r25, 0x03	; 3
     672:	49 f0       	breq	.+18     	; 0x686 <AVRISP_GetDescriptor+0x1e>
     674:	91 30       	cpi	r25, 0x01	; 1
     676:	71 f5       	brne	.+92     	; 0x6d4 <AVRISP_GetDescriptor+0x6c>
     678:	28 c0       	rjmp	.+80     	; 0x6ca <AVRISP_GetDescriptor+0x62>
		case DTYPE_Device:
			Address = &AVRISP_DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			*DescriptorMemorySpace = MEMSPACE_RAM;
     67a:	90 83       	st	Z, r25
				/* Update the configuration descriptor with the current endpoint address */
				AVRISP_ConfigurationDescriptor.AVRISP_DataInEndpoint.EndpointAddress = AVRISP_CurrDataINEndpointAddress;
			#endif

			Address = &AVRISP_ConfigurationDescriptor;
			Size    = sizeof(AVRISP_USB_Descriptor_Configuration_t);
     67c:	80 e2       	ldi	r24, 0x20	; 32
     67e:	90 e0       	ldi	r25, 0x00	; 0
			#if defined(RESET_TOGGLES_LIBUSB_COMPAT)
				/* Update the configuration descriptor with the current endpoint address */
				AVRISP_ConfigurationDescriptor.AVRISP_DataInEndpoint.EndpointAddress = AVRISP_CurrDataINEndpointAddress;
			#endif

			Address = &AVRISP_ConfigurationDescriptor;
     680:	e9 e3       	ldi	r30, 0x39	; 57
     682:	f1 e0       	ldi	r31, 0x01	; 1
			Size    = sizeof(AVRISP_USB_Descriptor_Configuration_t);
			break;
     684:	2b c0       	rjmp	.+86     	; 0x6dc <AVRISP_GetDescriptor+0x74>
		case DTYPE_String:
			switch (DescriptorNumber)
     686:	81 30       	cpi	r24, 0x01	; 1
     688:	51 f0       	breq	.+20     	; 0x69e <AVRISP_GetDescriptor+0x36>
     68a:	81 30       	cpi	r24, 0x01	; 1
     68c:	28 f0       	brcs	.+10     	; 0x698 <AVRISP_GetDescriptor+0x30>
     68e:	82 30       	cpi	r24, 0x02	; 2
     690:	49 f0       	breq	.+18     	; 0x6a4 <AVRISP_GetDescriptor+0x3c>
     692:	83 30       	cpi	r24, 0x03	; 3
     694:	f9 f4       	brne	.+62     	; 0x6d4 <AVRISP_GetDescriptor+0x6c>
     696:	0b c0       	rjmp	.+22     	; 0x6ae <AVRISP_GetDescriptor+0x46>
			{
				case 0x00:
					Address = &AVRISP_LanguageString;
					Size    = pgm_read_byte(&AVRISP_LanguageString.Header.Size);
     698:	e6 e5       	ldi	r30, 0x56	; 86
     69a:	f1 e0       	ldi	r31, 0x01	; 1
     69c:	05 c0       	rjmp	.+10     	; 0x6a8 <AVRISP_GetDescriptor+0x40>
					break;
				case 0x01:
					Address = &AVRISP_ManufacturerString;
					Size    = pgm_read_byte(&AVRISP_ManufacturerString.Header.Size);
     69e:	e8 e4       	ldi	r30, 0x48	; 72
     6a0:	f1 e0       	ldi	r31, 0x01	; 1
     6a2:	02 c0       	rjmp	.+4      	; 0x6a8 <AVRISP_GetDescriptor+0x40>
					break;
				case 0x02:
					Address = &AVRISP_ProductString;
					Size    = pgm_read_byte(&AVRISP_ProductString.Header.Size);
     6a4:	ee e2       	ldi	r30, 0x2E	; 46
     6a6:	f1 e0       	ldi	r31, 0x01	; 1
     6a8:	84 91       	lpm	r24, Z
     6aa:	90 e0       	ldi	r25, 0x00	; 0
					break;
     6ac:	17 c0       	rjmp	.+46     	; 0x6dc <AVRISP_GetDescriptor+0x74>
				case 0x03:
					Address = &AVRISP_SerialString;
					Size    = AVRISP_SerialString.Header.Size;
     6ae:	80 91 1b 01 	lds	r24, 0x011B
     6b2:	90 e0       	ldi	r25, 0x00	; 0
					
					/* Update serial number to have a different serial based on the current endpoint address */
					((uint16_t*)&AVRISP_SerialString.UnicodeString)[6] = cpu_to_le16('0' + (AVRISP_DATA_IN_EPADDR & ENDPOINT_EPNUM_MASK));
     6b4:	22 e3       	ldi	r18, 0x32	; 50
     6b6:	30 e0       	ldi	r19, 0x00	; 0
     6b8:	30 93 2a 01 	sts	0x012A, r19
     6bc:	20 93 29 01 	sts	0x0129, r18
					
					*DescriptorMemorySpace = MEMSPACE_RAM;
     6c0:	22 e0       	ldi	r18, 0x02	; 2
     6c2:	20 83       	st	Z, r18
				case 0x02:
					Address = &AVRISP_ProductString;
					Size    = pgm_read_byte(&AVRISP_ProductString.Header.Size);
					break;
				case 0x03:
					Address = &AVRISP_SerialString;
     6c4:	eb e1       	ldi	r30, 0x1B	; 27
     6c6:	f1 e0       	ldi	r31, 0x01	; 1
					
					/* Update serial number to have a different serial based on the current endpoint address */
					((uint16_t*)&AVRISP_SerialString.UnicodeString)[6] = cpu_to_le16('0' + (AVRISP_DATA_IN_EPADDR & ENDPOINT_EPNUM_MASK));
					
					*DescriptorMemorySpace = MEMSPACE_RAM;
					break;
     6c8:	09 c0       	rjmp	.+18     	; 0x6dc <AVRISP_GetDescriptor+0x74>
	
	switch (DescriptorType)
	{
		case DTYPE_Device:
			Address = &AVRISP_DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
     6ca:	82 e1       	ldi	r24, 0x12	; 18
     6cc:	90 e0       	ldi	r25, 0x00	; 0
	*DescriptorMemorySpace = MEMSPACE_FLASH;
	
	switch (DescriptorType)
	{
		case DTYPE_Device:
			Address = &AVRISP_DeviceDescriptor;
     6ce:	ea e5       	ldi	r30, 0x5A	; 90
     6d0:	f1 e0       	ldi	r31, 0x01	; 1
     6d2:	04 c0       	rjmp	.+8      	; 0x6dc <AVRISP_GetDescriptor+0x74>
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;
     6d4:	80 e0       	ldi	r24, 0x00	; 0
     6d6:	90 e0       	ldi	r25, 0x00	; 0
                              uint8_t* DescriptorMemorySpace)
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
     6d8:	e0 e0       	ldi	r30, 0x00	; 0
     6da:	f0 e0       	ldi	r31, 0x00	; 0
			}

			break;
	}

	*DescriptorAddress = Address;
     6dc:	da 01       	movw	r26, r20
     6de:	11 96       	adiw	r26, 0x01	; 1
     6e0:	fc 93       	st	X, r31
     6e2:	ee 93       	st	-X, r30
	return Size;
}
     6e4:	08 95       	ret

000006e6 <__vector_21>:
bool MustLoadExtendedAddress;


/** ISR to manage timeouts whilst processing a V2Protocol command */
ISR(TIMER0_COMPA_vect, ISR_NOBLOCK)
{
     6e6:	78 94       	sei
     6e8:	1f 92       	push	r1
     6ea:	0f 92       	push	r0
     6ec:	0f b6       	in	r0, 0x3f	; 63
     6ee:	0f 92       	push	r0
     6f0:	11 24       	eor	r1, r1
     6f2:	8f 93       	push	r24
	if (TimeoutTicksRemaining)
     6f4:	8a b5       	in	r24, 0x2a	; 42
     6f6:	88 23       	and	r24, r24
     6f8:	21 f0       	breq	.+8      	; 0x702 <__vector_21+0x1c>
	  TimeoutTicksRemaining--;
     6fa:	8a b5       	in	r24, 0x2a	; 42
     6fc:	81 50       	subi	r24, 0x01	; 1
     6fe:	8a bd       	out	0x2a, r24	; 42
     700:	01 c0       	rjmp	.+2      	; 0x704 <__vector_21+0x1e>
	else
	  TCCR0B = 0;
     702:	15 bc       	out	0x25, r1	; 37
}
     704:	8f 91       	pop	r24
     706:	0f 90       	pop	r0
     708:	0f be       	out	0x3f, r0	; 63
     70a:	0f 90       	pop	r0
     70c:	1f 90       	pop	r1
     70e:	18 95       	reti

00000710 <V2Protocol_Init>:
			 *  \param[in] Mode  Mask of ADC prescale and mode settings.
			 */
			static inline void ADC_Init(const uint8_t Mode) ATTR_ALWAYS_INLINE;
			static inline void ADC_Init(const uint8_t Mode)
			{
				ADCSRA = ((1 << ADEN) | Mode);
     710:	ea e7       	ldi	r30, 0x7A	; 122
     712:	f0 e0       	ldi	r31, 0x00	; 0
     714:	87 ea       	ldi	r24, 0xA7	; 167
     716:	80 83       	st	Z, r24
			 */
			static inline void ADC_SetupChannel(const uint8_t ChannelIndex)
			{
				#if (defined(__AVR_AT90USB1286__) || defined(__AVR_AT90USB646__) || \
					 defined(__AVR_AT90USB1287__) || defined(__AVR_AT90USB647__))
				DDRF  &= ~(1 << ChannelIndex);
     718:	82 98       	cbi	0x10, 2	; 16
				DIDR0 |=  (1 << ChannelIndex);
     71a:	ae e7       	ldi	r26, 0x7E	; 126
     71c:	b0 e0       	ldi	r27, 0x00	; 0
     71e:	8c 91       	ld	r24, X
     720:	84 60       	ori	r24, 0x04	; 4
     722:	8c 93       	st	X, r24
			 *
			 *  \param[in] MUXMask  ADC channel mask, reference mask and adjustment mask.
			 */
			static inline void ADC_StartReading(const uint16_t MUXMask)
			{
				ADMUX = MUXMask;
     724:	82 e4       	ldi	r24, 0x42	; 66
     726:	80 93 7c 00 	sts	0x007C, r24
				  ADCSRB |=  (1 << MUX5);
				else
				  ADCSRB &= ~(1 << MUX5);
				#endif

				ADCSRA |= (1 << ADSC);
     72a:	80 81       	ld	r24, Z
     72c:	80 64       	ori	r24, 0x40	; 64
     72e:	80 83       	st	Z, r24
	ADC_SetupChannel(VTARGET_ADC_CHANNEL);
	ADC_StartReading(VTARGET_REF_MASK | ADC_RIGHT_ADJUSTED | VTARGET_ADC_CHANNEL_MASK);
	#endif

	/* Timeout timer initialization (~10ms period) */
	OCR0A  = (((F_CPU / 1024) / 100) - 1);
     730:	8d e4       	ldi	r24, 0x4D	; 77
     732:	87 bd       	out	0x27, r24	; 39
	TCCR0A = (1 << WGM01);
     734:	82 e0       	ldi	r24, 0x02	; 2
     736:	84 bd       	out	0x24, r24	; 36
	TIMSK0 = (1 << OCIE0A);
     738:	80 93 6e 00 	sts	0x006E, r24

	V2Params_LoadNonVolatileParamValues();
     73c:	ea c0       	rjmp	.+468    	; 0x912 <V2Params_LoadNonVolatileParamValues>

0000073e <V2Protocol_ProcessCommand>:
     73e:	0f 93       	push	r16

	#if defined(ENABLE_ISP_PROTOCOL)
	ISPTarget_ConfigureRescueClock();
	#endif
}
     740:	1f 93       	push	r17
/** Master V2 Protocol packet handler, for received V2 Protocol packets from a connected host.
 *  This routine decodes the issued command and passes off the handling of the command to the
 *  appropriate function.
 */
void V2Protocol_ProcessCommand(void)
{
     742:	cf 93       	push	r28
     744:	df 93       	push	r29
     746:	0f 92       	push	r0
     748:	cd b7       	in	r28, 0x3d	; 61
     74a:	de b7       	in	r29, 0x3e	; 62
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
     74c:	10 91 f1 00 	lds	r17, 0x00F1
	uint8_t V2Command = Endpoint_Read_8();

	/* Reset timeout counter duration and start the timer */
	TimeoutTicksRemaining = COMMAND_TIMEOUT_TICKS;
     750:	84 e6       	ldi	r24, 0x64	; 100
     752:	8a bd       	out	0x2a, r24	; 42
	TCCR0B = ((1 << CS02) | (1 << CS00));	
     754:	85 e0       	ldi	r24, 0x05	; 5
     756:	85 bd       	out	0x25, r24	; 37

	switch (V2Command)
     758:	16 30       	cpi	r17, 0x06	; 6
     75a:	09 f4       	brne	.+2      	; 0x75e <V2Protocol_ProcessCommand+0x20>
     75c:	5c c0       	rjmp	.+184    	; 0x816 <V2Protocol_ProcessCommand+0xd8>
     75e:	17 30       	cpi	r17, 0x07	; 7
     760:	48 f4       	brcc	.+18     	; 0x774 <V2Protocol_ProcessCommand+0x36>
     762:	11 30       	cpi	r17, 0x01	; 1
     764:	89 f0       	breq	.+34     	; 0x788 <V2Protocol_ProcessCommand+0x4a>
     766:	11 30       	cpi	r17, 0x01	; 1
     768:	08 f4       	brcc	.+2      	; 0x76c <V2Protocol_ProcessCommand+0x2e>
     76a:	97 c0       	rjmp	.+302    	; 0x89a <V2Protocol_ProcessCommand+0x15c>
     76c:	14 30       	cpi	r17, 0x04	; 4
     76e:	08 f0       	brcs	.+2      	; 0x772 <V2Protocol_ProcessCommand+0x34>
     770:	94 c0       	rjmp	.+296    	; 0x89a <V2Protocol_ProcessCommand+0x15c>
     772:	26 c0       	rjmp	.+76     	; 0x7c0 <V2Protocol_ProcessCommand+0x82>
     774:	10 35       	cpi	r17, 0x50	; 80
     776:	09 f4       	brne	.+2      	; 0x77a <V2Protocol_ProcessCommand+0x3c>
     778:	87 c0       	rjmp	.+270    	; 0x888 <V2Protocol_ProcessCommand+0x14a>
     77a:	11 35       	cpi	r17, 0x51	; 81
     77c:	09 f4       	brne	.+2      	; 0x780 <V2Protocol_ProcessCommand+0x42>
     77e:	82 c0       	rjmp	.+260    	; 0x884 <V2Protocol_ProcessCommand+0x146>
     780:	1a 30       	cpi	r17, 0x0A	; 10
     782:	09 f0       	breq	.+2      	; 0x786 <V2Protocol_ProcessCommand+0x48>
     784:	8a c0       	rjmp	.+276    	; 0x89a <V2Protocol_ProcessCommand+0x15c>
     786:	6c c0       	rjmp	.+216    	; 0x860 <V2Protocol_ProcessCommand+0x122>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     788:	80 91 e8 00 	lds	r24, 0x00E8
     78c:	8b 77       	andi	r24, 0x7B	; 123
     78e:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     792:	82 e0       	ldi	r24, 0x02	; 2
     794:	80 93 e9 00 	sts	0x00E9, r24
			 *  \param[in] DirectionMask  New endpoint direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask)
			{
				UECFG0X = ((UECFG0X & ~(1 << EPDIR)) | (DirectionMask ? (1 << EPDIR) : 0));
     798:	80 91 ec 00 	lds	r24, 0x00EC
     79c:	81 60       	ori	r24, 0x01	; 1
     79e:	80 93 ec 00 	sts	0x00EC, r24
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     7a2:	10 93 f1 00 	sts	0x00F1, r17
     7a6:	10 92 f1 00 	sts	0x00F1, r1
     7aa:	8a e0       	ldi	r24, 0x0A	; 10
     7ac:	80 93 f1 00 	sts	0x00F1, r24
	Endpoint_SetEndpointDirection(ENDPOINT_DIR_IN);

	Endpoint_Write_8(CMD_SIGN_ON);
	Endpoint_Write_8(STATUS_CMD_OK);
	Endpoint_Write_8(sizeof(PROGRAMMER_ID) - 1);
	Endpoint_Write_Stream_LE(PROGRAMMER_ID, (sizeof(PROGRAMMER_ID) - 1), NULL);
     7b0:	89 e5       	ldi	r24, 0x59	; 89
     7b2:	91 e0       	ldi	r25, 0x01	; 1
     7b4:	6a e0       	ldi	r22, 0x0A	; 10
     7b6:	70 e0       	ldi	r23, 0x00	; 0
     7b8:	40 e0       	ldi	r20, 0x00	; 0
     7ba:	50 e0       	ldi	r21, 0x00	; 0
     7bc:	71 d7       	rcall	.+3810   	; 0x16a0 <Endpoint_Write_Stream_LE>
     7be:	86 c0       	rjmp	.+268    	; 0x8cc <V2Protocol_ProcessCommand+0x18e>
     7c0:	00 91 f1 00 	lds	r16, 0x00F1
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
     7c4:	12 30       	cpi	r17, 0x02	; 2
static void V2Protocol_GetSetParam(const uint8_t V2Command)
{
	uint8_t ParamID = Endpoint_Read_8();
	uint8_t ParamValue;

	if (V2Command == CMD_SET_PARAMETER)
     7c6:	11 f4       	brne	.+4      	; 0x7cc <V2Protocol_ProcessCommand+0x8e>
     7c8:	60 91 f1 00 	lds	r22, 0x00F1
     7cc:	80 91 e8 00 	lds	r24, 0x00E8
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     7d0:	8b 77       	andi	r24, 0x7B	; 123
     7d2:	80 93 e8 00 	sts	0x00E8, r24
     7d6:	82 e0       	ldi	r24, 0x02	; 2
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     7d8:	80 93 e9 00 	sts	0x00E9, r24
     7dc:	80 91 ec 00 	lds	r24, 0x00EC
			 *  \param[in] DirectionMask  New endpoint direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask)
			{
				UECFG0X = ((UECFG0X & ~(1 << EPDIR)) | (DirectionMask ? (1 << EPDIR) : 0));
     7e0:	81 60       	ori	r24, 0x01	; 1
     7e2:	80 93 ec 00 	sts	0x00EC, r24
     7e6:	10 93 f1 00 	sts	0x00F1, r17
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     7ea:	80 2f       	mov	r24, r16
	Endpoint_SelectEndpoint(AVRISP_DATA_IN_EPADDR);
	Endpoint_SetEndpointDirection(ENDPOINT_DIR_IN);

	Endpoint_Write_8(V2Command);

	uint8_t ParamPrivs = V2Params_GetParameterPrivileges(ParamID);
     7ec:	69 83       	std	Y+1, r22	; 0x01
     7ee:	c6 d0       	rcall	.+396    	; 0x97c <V2Params_GetParameterPrivileges>
     7f0:	69 81       	ldd	r22, Y+1	; 0x01
     7f2:	12 30       	cpi	r17, 0x02	; 2

	if ((V2Command == CMD_SET_PARAMETER) && (ParamPrivs & PARAM_PRIV_WRITE))
     7f4:	39 f4       	brne	.+14     	; 0x804 <V2Protocol_ProcessCommand+0xc6>
     7f6:	81 ff       	sbrs	r24, 1
     7f8:	0c c0       	rjmp	.+24     	; 0x812 <V2Protocol_ProcessCommand+0xd4>
     7fa:	10 92 f1 00 	sts	0x00F1, r1
     7fe:	80 2f       	mov	r24, r16
     800:	cd d0       	rcall	.+410    	; 0x99c <V2Params_SetParameterValue>
	{
		Endpoint_Write_8(STATUS_CMD_OK);
		V2Params_SetParameterValue(ParamID, ParamValue);
     802:	64 c0       	rjmp	.+200    	; 0x8cc <V2Protocol_ProcessCommand+0x18e>
     804:	80 ff       	sbrs	r24, 0
     806:	05 c0       	rjmp	.+10     	; 0x812 <V2Protocol_ProcessCommand+0xd4>
     808:	10 92 f1 00 	sts	0x00F1, r1
	}
	else if ((V2Command == CMD_GET_PARAMETER) && (ParamPrivs & PARAM_PRIV_READ))
     80c:	80 2f       	mov	r24, r16
     80e:	be d0       	rcall	.+380    	; 0x98c <V2Params_GetParameterValue>
     810:	5b c0       	rjmp	.+182    	; 0x8c8 <V2Protocol_ProcessCommand+0x18a>
	{
		Endpoint_Write_8(STATUS_CMD_OK);
		Endpoint_Write_8(V2Params_GetParameterValue(ParamID));
     812:	80 ec       	ldi	r24, 0xC0	; 192
     814:	59 c0       	rjmp	.+178    	; 0x8c8 <V2Protocol_ProcessCommand+0x18a>
     816:	8b ee       	ldi	r24, 0xEB	; 235
     818:	92 e0       	ldi	r25, 0x02	; 2
     81a:	64 e0       	ldi	r22, 0x04	; 4
     81c:	70 e0       	ldi	r23, 0x00	; 0
 *  global storage variable for later use, and issuing LOAD EXTENDED ADDRESS commands
 *  to the attached device as required.
 */
static void V2Protocol_LoadAddress(void)
{
	Endpoint_Read_Stream_BE(&CurrentAddress, sizeof(CurrentAddress), NULL);
     81e:	40 e0       	ldi	r20, 0x00	; 0
     820:	50 e0       	ldi	r21, 0x00	; 0
     822:	de d7       	rcall	.+4028   	; 0x17e0 <Endpoint_Read_Stream_BE>
     824:	80 91 e8 00 	lds	r24, 0x00E8
     828:	8b 77       	andi	r24, 0x7B	; 123
     82a:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     82e:	82 e0       	ldi	r24, 0x02	; 2
     830:	80 93 e9 00 	sts	0x00E9, r24
     834:	80 91 ec 00 	lds	r24, 0x00EC
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     838:	81 60       	ori	r24, 0x01	; 1
     83a:	80 93 ec 00 	sts	0x00EC, r24
			 *  \param[in] DirectionMask  New endpoint direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask)
			{
				UECFG0X = ((UECFG0X & ~(1 << EPDIR)) | (DirectionMask ? (1 << EPDIR) : 0));
     83e:	80 91 eb 02 	lds	r24, 0x02EB
     842:	90 91 ec 02 	lds	r25, 0x02EC
     846:	a0 91 ed 02 	lds	r26, 0x02ED

	Endpoint_ClearOUT();
	Endpoint_SelectEndpoint(AVRISP_DATA_IN_EPADDR);
	Endpoint_SetEndpointDirection(ENDPOINT_DIR_IN);

	if (CurrentAddress & (1UL << 31))
     84a:	b0 91 ee 02 	lds	r27, 0x02EE
     84e:	b7 ff       	sbrs	r27, 7
     850:	03 c0       	rjmp	.+6      	; 0x858 <V2Protocol_ProcessCommand+0x11a>
     852:	81 e0       	ldi	r24, 0x01	; 1
     854:	80 93 ea 02 	sts	0x02EA, r24
     858:	86 e0       	ldi	r24, 0x06	; 6
     85a:	80 93 f1 00 	sts	0x00F1, r24
	  MustLoadExtendedAddress = true;
     85e:	0f c0       	rjmp	.+30     	; 0x87e <V2Protocol_ProcessCommand+0x140>
     860:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     864:	8b 77       	andi	r24, 0x7B	; 123
     866:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     86a:	82 e0       	ldi	r24, 0x02	; 2
     86c:	80 93 e9 00 	sts	0x00E9, r24
     870:	80 91 ec 00 	lds	r24, 0x00EC
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     874:	81 60       	ori	r24, 0x01	; 1
     876:	80 93 ec 00 	sts	0x00EC, r24
			 *  \param[in] DirectionMask  New endpoint direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask)
			{
				UECFG0X = ((UECFG0X & ~(1 << EPDIR)) | (DirectionMask ? (1 << EPDIR) : 0));
     87a:	10 93 f1 00 	sts	0x00F1, r17
     87e:	10 92 f1 00 	sts	0x00F1, r1
     882:	24 c0       	rjmp	.+72     	; 0x8cc <V2Protocol_ProcessCommand+0x18e>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     884:	c0 d1       	rcall	.+896    	; 0xc06 <XPROGProtocol_SetMode>
     886:	27 c0       	rjmp	.+78     	; 0x8d6 <V2Protocol_ProcessCommand+0x198>
     888:	ee d1       	rcall	.+988    	; 0xc66 <XPROGProtocol_Command>
     88a:	25 c0       	rjmp	.+74     	; 0x8d6 <V2Protocol_ProcessCommand+0x198>
     88c:	80 91 e8 00 	lds	r24, 0x00E8
			ISPProtocol_SPIMulti();
			break;
#endif
#if defined(ENABLE_XPROG_PROTOCOL)
		case CMD_XPROG_SETMODE:
			XPROGProtocol_SetMode();
     890:	8b 77       	andi	r24, 0x7B	; 123
			break;
     892:	80 93 e8 00 	sts	0x00E8, r24
		case CMD_XPROG:
			XPROGProtocol_Command();
     896:	0e 94 d4 0d 	call	0x1ba8	; 0x1ba8 <Endpoint_WaitUntilReady>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     89a:	80 91 f2 00 	lds	r24, 0x00F2
     89e:	90 91 f3 00 	lds	r25, 0x00F3
     8a2:	80 34       	cpi	r24, 0x40	; 64
{
	/* Discard all incoming data */
	while (Endpoint_BytesInEndpoint() == AVRISP_DATA_EPSIZE)
	{
		Endpoint_ClearOUT();
		Endpoint_WaitUntilReady();
     8a4:	91 05       	cpc	r25, r1
     8a6:	91 f3       	breq	.-28     	; 0x88c <V2Protocol_ProcessCommand+0x14e>
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
     8a8:	80 91 e8 00 	lds	r24, 0x00E8
     8ac:	8b 77       	andi	r24, 0x7B	; 123
     8ae:	80 93 e8 00 	sts	0x00E8, r24
 *  \param[in] V2Command  Issued V2 Protocol command byte from the host
 */
static void V2Protocol_UnknownCommand(const uint8_t V2Command)
{
	/* Discard all incoming data */
	while (Endpoint_BytesInEndpoint() == AVRISP_DATA_EPSIZE)
     8b2:	82 e0       	ldi	r24, 0x02	; 2
     8b4:	80 93 e9 00 	sts	0x00E9, r24
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     8b8:	80 91 ec 00 	lds	r24, 0x00EC
     8bc:	81 60       	ori	r24, 0x01	; 1
     8be:	80 93 ec 00 	sts	0x00EC, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     8c2:	10 93 f1 00 	sts	0x00F1, r17
			 *  \param[in] DirectionMask  New endpoint direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask)
			{
				UECFG0X = ((UECFG0X & ~(1 << EPDIR)) | (DirectionMask ? (1 << EPDIR) : 0));
     8c6:	89 ec       	ldi	r24, 0xC9	; 201
     8c8:	80 93 f1 00 	sts	0x00F1, r24
     8cc:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     8d0:	8e 77       	andi	r24, 0x7E	; 126
     8d2:	80 93 e8 00 	sts	0x00E8, r24
     8d6:	15 bc       	out	0x25, r1	; 37
     8d8:	0e 94 d4 0d 	call	0x1ba8	; 0x1ba8 <Endpoint_WaitUntilReady>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     8dc:	82 e0       	ldi	r24, 0x02	; 2
     8de:	80 93 e9 00 	sts	0x00E9, r24
     8e2:	80 91 ec 00 	lds	r24, 0x00EC
	}

	/* Disable the timeout management timer */
	TCCR0B = 0;

	Endpoint_WaitUntilReady();
     8e6:	8e 7f       	andi	r24, 0xFE	; 254
     8e8:	80 93 ec 00 	sts	0x00EC, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     8ec:	0f 90       	pop	r0
     8ee:	df 91       	pop	r29
			 *  \param[in] DirectionMask  New endpoint direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask)
			{
				UECFG0X = ((UECFG0X & ~(1 << EPDIR)) | (DirectionMask ? (1 << EPDIR) : 0));
     8f0:	cf 91       	pop	r28
     8f2:	1f 91       	pop	r17
     8f4:	0f 91       	pop	r16
     8f6:	08 95       	ret

000008f8 <V2Params_GetParamFromTable>:
 *  \param[in] ParamID  Parameter ID to find in the table
 *
 *  \return Pointer to the associated parameter information from the parameter table if found, NULL otherwise
 */
static ParameterItem_t* const V2Params_GetParamFromTable(const uint8_t ParamID)
{
     8f8:	9a e0       	ldi	r25, 0x0A	; 10
	ParameterItem_t* CurrTableItem = ParameterTable;
     8fa:	e4 e6       	ldi	r30, 0x64	; 100
     8fc:	f1 e0       	ldi	r31, 0x01	; 1

	/* Find the parameter in the parameter table if present */
	for (uint8_t TableIndex = 0; TableIndex < TABLE_PARAM_COUNT; TableIndex++)
	{
		if (ParamID == CurrTableItem->ParamID)
     8fe:	20 81       	ld	r18, Z
     900:	82 17       	cp	r24, r18
     902:	29 f0       	breq	.+10     	; 0x90e <V2Params_GetParamFromTable+0x16>
		  return CurrTableItem;

		CurrTableItem++;
     904:	33 96       	adiw	r30, 0x03	; 3
     906:	91 50       	subi	r25, 0x01	; 1
static ParameterItem_t* const V2Params_GetParamFromTable(const uint8_t ParamID)
{
	ParameterItem_t* CurrTableItem = ParameterTable;

	/* Find the parameter in the parameter table if present */
	for (uint8_t TableIndex = 0; TableIndex < TABLE_PARAM_COUNT; TableIndex++)
     908:	d1 f7       	brne	.-12     	; 0x8fe <V2Params_GetParamFromTable+0x6>
		  return CurrTableItem;

		CurrTableItem++;
	}

	return NULL;
     90a:	e0 e0       	ldi	r30, 0x00	; 0
     90c:	f0 e0       	ldi	r31, 0x00	; 0
}
     90e:	cf 01       	movw	r24, r30
     910:	08 95       	ret

00000912 <V2Params_LoadNonVolatileParamValues>:
	};


/** Loads saved non-volatile parameter values from the EEPROM into the parameter table, as needed. */
void V2Params_LoadNonVolatileParamValues(void)
{
     912:	cf 93       	push	r28
     914:	df 93       	push	r29
	/* Read parameter values that are stored in non-volatile EEPROM */
	uint8_t ResetPolarity = eeprom_read_byte(&EEPROM_Reset_Polarity);
     916:	80 e0       	ldi	r24, 0x00	; 0
     918:	90 e0       	ldi	r25, 0x00	; 0
     91a:	0e 94 21 12 	call	0x2442	; 0x2442 <__eerd_byte_usb1287>
     91e:	d8 2f       	mov	r29, r24
	uint8_t SCKDuration   = eeprom_read_byte(&EEPROM_SCK_Duration);
     920:	81 e0       	ldi	r24, 0x01	; 1
     922:	90 e0       	ldi	r25, 0x00	; 0
     924:	0e 94 21 12 	call	0x2442	; 0x2442 <__eerd_byte_usb1287>
     928:	c8 2f       	mov	r28, r24

	/* Update current parameter table if the EEPROM contents was not blank */
	if (ResetPolarity != 0xFF)
     92a:	df 3f       	cpi	r29, 0xFF	; 255
     92c:	21 f0       	breq	.+8      	; 0x936 <V2Params_LoadNonVolatileParamValues+0x24>
	  V2Params_GetParamFromTable(PARAM_RESET_POLARITY)->ParamValue = ResetPolarity;
     92e:	8e e9       	ldi	r24, 0x9E	; 158
     930:	e3 df       	rcall	.-58     	; 0x8f8 <V2Params_GetParamFromTable>
     932:	fc 01       	movw	r30, r24
     934:	d2 83       	std	Z+2, r29	; 0x02
     936:	cf 3f       	cpi	r28, 0xFF	; 255

	/* Update current parameter table if the EEPROM contents was not blank */
	if (SCKDuration != 0xFF)
     938:	21 f0       	breq	.+8      	; 0x942 <V2Params_LoadNonVolatileParamValues+0x30>
     93a:	88 e9       	ldi	r24, 0x98	; 152
	  V2Params_GetParamFromTable(PARAM_SCK_DURATION)->ParamValue   = SCKDuration;
     93c:	dd df       	rcall	.-70     	; 0x8f8 <V2Params_GetParamFromTable>
     93e:	fc 01       	movw	r30, r24
     940:	c2 83       	std	Z+2, r28	; 0x02
     942:	df 91       	pop	r29
     944:	cf 91       	pop	r28
}
     946:	08 95       	ret

00000948 <V2Params_UpdateParamValues>:
     948:	84 e9       	ldi	r24, 0x94	; 148
     94a:	d6 df       	rcall	.-84     	; 0x8f8 <V2Params_GetParamFromTable>
 */
void V2Params_UpdateParamValues(void)
{
	#if (defined(ADC) && !defined(NO_VTARGET_DETECT))
	/* Update VTARGET parameter with the latest ADC conversion of VTARGET on supported AVR models */
	V2Params_GetParamFromTable(PARAM_VTARGET)->ParamValue = (((uint16_t)(VTARGET_REF_VOLTS * 10 * VTARGET_SCALE_FACTOR) * ADC_GetResult()) / 1024);
     94c:	ea e7       	ldi	r30, 0x7A	; 122
			 *  \return The result of the last ADC conversion as an unsigned value.
			 */
			static inline uint16_t ADC_GetResult(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t ADC_GetResult(void)
			{
				ADCSRA |= (1 << ADIF);
     94e:	f0 e0       	ldi	r31, 0x00	; 0
     950:	20 81       	ld	r18, Z
     952:	20 61       	ori	r18, 0x10	; 16
     954:	20 83       	st	Z, r18
     956:	40 91 78 00 	lds	r20, 0x0078
				return ADC;
     95a:	50 91 79 00 	lds	r21, 0x0079
     95e:	22 e3       	ldi	r18, 0x32	; 50
     960:	30 e0       	ldi	r19, 0x00	; 0
     962:	42 9f       	mul	r20, r18
     964:	b0 01       	movw	r22, r0
     966:	43 9f       	mul	r20, r19
     968:	70 0d       	add	r23, r0
     96a:	52 9f       	mul	r21, r18
     96c:	70 0d       	add	r23, r0
     96e:	11 24       	eor	r1, r1
     970:	27 2f       	mov	r18, r23
     972:	26 95       	lsr	r18
     974:	26 95       	lsr	r18
     976:	fc 01       	movw	r30, r24
     978:	22 83       	std	Z+2, r18	; 0x02
     97a:	08 95       	ret

0000097c <V2Params_GetParameterPrivileges>:
	#endif
}
     97c:	bd df       	rcall	.-134    	; 0x8f8 <V2Params_GetParamFromTable>
 *
 *  \return Privileges for the requested parameter, as a mask of \c PARAM_PRIV_* masks
 */
uint8_t V2Params_GetParameterPrivileges(const uint8_t ParamID)
{
	ParameterItem_t* const ParamInfo = V2Params_GetParamFromTable(ParamID);
     97e:	00 97       	sbiw	r24, 0x00	; 0

	if (ParamInfo == NULL)
     980:	19 f0       	breq	.+6      	; 0x988 <V2Params_GetParameterPrivileges+0xc>
     982:	fc 01       	movw	r30, r24
	  return 0;

	return ParamInfo->ParamPrivileges;
     984:	81 81       	ldd	r24, Z+1	; 0x01
     986:	08 95       	ret
     988:	80 e0       	ldi	r24, 0x00	; 0
uint8_t V2Params_GetParameterPrivileges(const uint8_t ParamID)
{
	ParameterItem_t* const ParamInfo = V2Params_GetParamFromTable(ParamID);

	if (ParamInfo == NULL)
	  return 0;
     98a:	08 95       	ret

0000098c <V2Params_GetParameterValue>:

	return ParamInfo->ParamPrivileges;
}
     98c:	b5 df       	rcall	.-150    	; 0x8f8 <V2Params_GetParamFromTable>
 *
 *  \return Current value of the parameter in the table, or 0 if not found
 */
uint8_t V2Params_GetParameterValue(const uint8_t ParamID)
{
	ParameterItem_t* const ParamInfo = V2Params_GetParamFromTable(ParamID);
     98e:	00 97       	sbiw	r24, 0x00	; 0

	if (ParamInfo == NULL)
     990:	19 f0       	breq	.+6      	; 0x998 <V2Params_GetParameterValue+0xc>
     992:	fc 01       	movw	r30, r24
	  return 0;

	return ParamInfo->ParamValue;
     994:	82 81       	ldd	r24, Z+2	; 0x02
     996:	08 95       	ret
     998:	80 e0       	ldi	r24, 0x00	; 0
uint8_t V2Params_GetParameterValue(const uint8_t ParamID)
{
	ParameterItem_t* const ParamInfo = V2Params_GetParamFromTable(ParamID);

	if (ParamInfo == NULL)
	  return 0;
     99a:	08 95       	ret

0000099c <V2Params_SetParameterValue>:

	return ParamInfo->ParamValue;
}
     99c:	1f 93       	push	r17
 *
 *  \return Pointer to the associated parameter information from the parameter table if found, NULL otherwise
 */
void V2Params_SetParameterValue(const uint8_t ParamID,
                                const uint8_t Value)
{
     99e:	cf 93       	push	r28
     9a0:	df 93       	push	r29
     9a2:	0f 92       	push	r0
     9a4:	cd b7       	in	r28, 0x3d	; 61
     9a6:	de b7       	in	r29, 0x3e	; 62
     9a8:	18 2f       	mov	r17, r24
	ParameterItem_t* const ParamInfo = V2Params_GetParamFromTable(ParamID);
     9aa:	69 83       	std	Y+1, r22	; 0x01
     9ac:	a5 df       	rcall	.-182    	; 0x8f8 <V2Params_GetParamFromTable>
     9ae:	fc 01       	movw	r30, r24
     9b0:	69 81       	ldd	r22, Y+1	; 0x01

	if (ParamInfo == NULL)
     9b2:	00 97       	sbiw	r24, 0x00	; 0
     9b4:	61 f0       	breq	.+24     	; 0x9ce <V2Params_SetParameterValue+0x32>
     9b6:	62 83       	std	Z+2, r22	; 0x02
	  return;

	ParamInfo->ParamValue = Value;
     9b8:	1e 39       	cpi	r17, 0x9E	; 158

	/* The target RESET line polarity is a non-volatile parameter, save to EEPROM when changed */
	if (ParamID == PARAM_RESET_POLARITY)
     9ba:	19 f4       	brne	.+6      	; 0x9c2 <V2Params_SetParameterValue+0x26>
     9bc:	80 e0       	ldi	r24, 0x00	; 0
	  eeprom_update_byte(&EEPROM_Reset_Polarity, Value);
     9be:	90 e0       	ldi	r25, 0x00	; 0
     9c0:	04 c0       	rjmp	.+8      	; 0x9ca <V2Params_SetParameterValue+0x2e>
     9c2:	18 39       	cpi	r17, 0x98	; 152

	/* The target SCK line period is a non-volatile parameter, save to EEPROM when changed */
	if (ParamID == PARAM_SCK_DURATION)
     9c4:	21 f4       	brne	.+8      	; 0x9ce <V2Params_SetParameterValue+0x32>
     9c6:	81 e0       	ldi	r24, 0x01	; 1
	  eeprom_update_byte(&EEPROM_SCK_Duration, Value);
     9c8:	90 e0       	ldi	r25, 0x00	; 0
     9ca:	0e 94 29 12 	call	0x2452	; 0x2452 <__eeupd_byte_usb1287>
     9ce:	0f 90       	pop	r0
}
     9d0:	df 91       	pop	r29
     9d2:	cf 91       	pop	r28
     9d4:	1f 91       	pop	r17
     9d6:	08 95       	ret

000009d8 <SwapEndian_32>:
			 *
			 *  \return Input data with the individual bytes reversed.
			 */
			static inline uint32_t SwapEndian_32(const uint32_t DWord) ATTR_WARN_UNUSED_RESULT ATTR_CONST;
			static inline uint32_t SwapEndian_32(const uint32_t DWord)
			{
     9d8:	9b 01       	movw	r18, r22
				Temp = Data.Bytes[1];
				Data.Bytes[1] = Data.Bytes[2];
				Data.Bytes[2] = Temp;

				return Data.DWord;
			}
     9da:	69 2f       	mov	r22, r25
     9dc:	78 2f       	mov	r23, r24
     9de:	83 2f       	mov	r24, r19
     9e0:	92 2f       	mov	r25, r18
     9e2:	08 95       	ret

000009e4 <XPROGProtocol_WriteMemory>:
	Endpoint_ClearIN();
}

/** Handler for the XPROG WRITE_MEMORY command to write to a specific memory space within the attached device. */
static void XPROGProtocol_WriteMemory(void)
{
     9e4:	af 92       	push	r10
     9e6:	bf 92       	push	r11
     9e8:	cf 92       	push	r12
     9ea:	df 92       	push	r13
     9ec:	ef 92       	push	r14
     9ee:	ff 92       	push	r15
     9f0:	0f 93       	push	r16
     9f2:	1f 93       	push	r17
     9f4:	cf 93       	push	r28
     9f6:	df 93       	push	r29
     9f8:	cd b7       	in	r28, 0x3d	; 61
     9fa:	de b7       	in	r29, 0x3e	; 62
     9fc:	c8 50       	subi	r28, 0x08	; 8
     9fe:	d1 40       	sbci	r29, 0x01	; 1
     a00:	0f b6       	in	r0, 0x3f	; 63
     a02:	f8 94       	cli
     a04:	de bf       	out	0x3e, r29	; 62
     a06:	0f be       	out	0x3f, r0	; 63
     a08:	cd bf       	out	0x3d, r28	; 61
		uint32_t Address;
		uint16_t Length;
		uint8_t  ProgData[256];
	} WriteMemory_XPROG_Params;

	Endpoint_Read_Stream_LE(&WriteMemory_XPROG_Params, (sizeof(WriteMemory_XPROG_Params) -
     a0a:	ce 01       	movw	r24, r28
     a0c:	01 96       	adiw	r24, 0x01	; 1
     a0e:	68 e0       	ldi	r22, 0x08	; 8
     a10:	70 e0       	ldi	r23, 0x00	; 0
     a12:	40 e0       	ldi	r20, 0x00	; 0
     a14:	50 e0       	ldi	r21, 0x00	; 0
     a16:	94 d6       	rcall	.+3368   	; 0x1740 <Endpoint_Read_Stream_LE>
     a18:	6b 81       	ldd	r22, Y+3	; 0x03
	                                                    sizeof(WriteMemory_XPROG_Params).ProgData), NULL);
	WriteMemory_XPROG_Params.Address = SwapEndian_32(WriteMemory_XPROG_Params.Address);
     a1a:	7c 81       	ldd	r23, Y+4	; 0x04
     a1c:	8d 81       	ldd	r24, Y+5	; 0x05
     a1e:	9e 81       	ldd	r25, Y+6	; 0x06
     a20:	db df       	rcall	.-74     	; 0x9d8 <SwapEndian_32>
     a22:	dc 01       	movw	r26, r24
     a24:	cb 01       	movw	r24, r22
     a26:	8b 83       	std	Y+3, r24	; 0x03
     a28:	9c 83       	std	Y+4, r25	; 0x04
     a2a:	ad 83       	std	Y+5, r26	; 0x05
     a2c:	be 83       	std	Y+6, r27	; 0x06
     a2e:	7f 81       	ldd	r23, Y+7	; 0x07
     a30:	68 85       	ldd	r22, Y+8	; 0x08
				{
					uint16_t Word;
					uint8_t  Bytes[2];
				} Data;

				Data.Word = Word;
     a32:	6f 83       	std	Y+7, r22	; 0x07
     a34:	78 87       	std	Y+8, r23	; 0x08
	WriteMemory_XPROG_Params.Length  = SwapEndian_16(WriteMemory_XPROG_Params.Length);
     a36:	ce 01       	movw	r24, r28
     a38:	09 96       	adiw	r24, 0x09	; 9
	Endpoint_Read_Stream_LE(&WriteMemory_XPROG_Params.ProgData, WriteMemory_XPROG_Params.Length, NULL);
     a3a:	40 e0       	ldi	r20, 0x00	; 0
     a3c:	50 e0       	ldi	r21, 0x00	; 0
     a3e:	80 d6       	rcall	.+3328   	; 0x1740 <Endpoint_Read_Stream_LE>
     a40:	8f 81       	ldd	r24, Y+7	; 0x07
     a42:	98 85       	ldd	r25, Y+8	; 0x08
     a44:	09 96       	adiw	r24, 0x09	; 9

	// The driver will terminate transfers that are a round multiple of the endpoint bank in size with a ZLP, need
	// to catch this and discard it before continuing on with packet processing to prevent communication issues
	if (((sizeof(uint8_t) + sizeof(WriteMemory_XPROG_Params) - sizeof(WriteMemory_XPROG_Params.ProgData)) +
     a46:	8f 73       	andi	r24, 0x3F	; 63
     a48:	90 70       	andi	r25, 0x00	; 0
     a4a:	00 97       	sbiw	r24, 0x00	; 0
	    WriteMemory_XPROG_Params.Length) % AVRISP_DATA_EPSIZE == 0)
     a4c:	39 f4       	brne	.+14     	; 0xa5c <XPROGProtocol_WriteMemory+0x78>
     a4e:	80 91 e8 00 	lds	r24, 0x00E8
	WriteMemory_XPROG_Params.Length  = SwapEndian_16(WriteMemory_XPROG_Params.Length);
	Endpoint_Read_Stream_LE(&WriteMemory_XPROG_Params.ProgData, WriteMemory_XPROG_Params.Length, NULL);

	// The driver will terminate transfers that are a round multiple of the endpoint bank in size with a ZLP, need
	// to catch this and discard it before continuing on with packet processing to prevent communication issues
	if (((sizeof(uint8_t) + sizeof(WriteMemory_XPROG_Params) - sizeof(WriteMemory_XPROG_Params.ProgData)) +
     a52:	8b 77       	andi	r24, 0x7B	; 123
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     a54:	80 93 e8 00 	sts	0x00E8, r24
     a58:	0e 94 d4 0d 	call	0x1ba8	; 0x1ba8 <Endpoint_WaitUntilReady>
     a5c:	80 91 e8 00 	lds	r24, 0x00E8
	    WriteMemory_XPROG_Params.Length) % AVRISP_DATA_EPSIZE == 0)
	{
		Endpoint_ClearOUT();
		Endpoint_WaitUntilReady();
     a60:	8b 77       	andi	r24, 0x7B	; 123
     a62:	80 93 e8 00 	sts	0x00E8, r24
     a66:	82 e0       	ldi	r24, 0x02	; 2
     a68:	80 93 e9 00 	sts	0x00E9, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     a6c:	80 91 ec 00 	lds	r24, 0x00EC
     a70:	81 60       	ori	r24, 0x01	; 1
			 *  \param[in] DirectionMask  New endpoint direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask)
			{
				UECFG0X = ((UECFG0X & ~(1 << EPDIR)) | (DirectionMask ? (1 << EPDIR) : 0));
     a72:	80 93 ec 00 	sts	0x00EC, r24
     a76:	80 91 d1 02 	lds	r24, 0x02D1
     a7a:	88 23       	and	r24, r24

	Endpoint_ClearOUT();
	Endpoint_SelectEndpoint(AVRISP_DATA_IN_EPADDR);
	Endpoint_SetEndpointDirection(ENDPOINT_DIR_IN);

	if (XPROG_SelectedProtocol == XPRG_PROTOCOL_PDI)
     a7c:	79 f5       	brne	.+94     	; 0xadc <XPROGProtocol_WriteMemory+0xf8>
     a7e:	29 81       	ldd	r18, Y+1	; 0x01
     a80:	21 50       	subi	r18, 0x01	; 1
     a82:	eb 80       	ldd	r14, Y+3	; 0x03
     a84:	fc 80       	ldd	r15, Y+4	; 0x04
     a86:	0d 81       	ldd	r16, Y+5	; 0x05
     a88:	1e 81       	ldd	r17, Y+6	; 0x06
     a8a:	26 30       	cpi	r18, 0x06	; 6
     a8c:	a0 f4       	brcc	.+40     	; 0xab6 <XPROGProtocol_WriteMemory+0xd2>
     a8e:	30 e0       	ldi	r19, 0x00	; 0
     a90:	f9 01       	movw	r30, r18
     a92:	ee 56       	subi	r30, 0x6E	; 110
     a94:	fe 4f       	sbci	r31, 0xFE	; 254
     a96:	40 81       	ld	r20, Z
     a98:	f9 01       	movw	r30, r18
     a9a:	e8 56       	subi	r30, 0x68	; 104
     a9c:	fe 4f       	sbci	r31, 0xFE	; 254
     a9e:	80 81       	ld	r24, Z
     aa0:	f9 01       	movw	r30, r18
     aa2:	e2 56       	subi	r30, 0x62	; 98
     aa4:	fe 4f       	sbci	r31, 0xFE	; 254
     aa6:	60 81       	ld	r22, Z
     aa8:	2c 55       	subi	r18, 0x5C	; 92
     aaa:	3e 4f       	sbci	r19, 0xFE	; 254
     aac:	f9 01       	movw	r30, r18
				PagedMemory      = false;
				break;
		}

		/* Send the appropriate memory write commands to the device, indicate timeout if occurred */
		if ((PagedMemory && !(XMEGANVM_WritePageMemory(WriteBuffCommand, EraseBuffCommand, WriteCommand,
     aae:	90 81       	ld	r25, Z
     ab0:	99 23       	and	r25, r25
     ab2:	71 f0       	breq	.+28     	; 0xad0 <XPROGProtocol_WriteMemory+0xec>
     ab4:	03 c0       	rjmp	.+6      	; 0xabc <XPROGProtocol_WriteMemory+0xd8>
     ab6:	66 e2       	ldi	r22, 0x26	; 38
     ab8:	83 e2       	ldi	r24, 0x23	; 35
     aba:	4e e2       	ldi	r20, 0x2E	; 46
		uint8_t WriteCommand     = XMEGA_NVM_CMD_WRITEFLASHPAGE;
		uint8_t WriteBuffCommand = XMEGA_NVM_CMD_LOADFLASHPAGEBUFF;
		uint8_t EraseBuffCommand = XMEGA_NVM_CMD_ERASEFLASHPAGEBUFF;
		bool    PagedMemory      = true;

		switch (WriteMemory_XPROG_Params.MemoryType)
     abc:	af 80       	ldd	r10, Y+7	; 0x07
     abe:	b8 84       	ldd	r11, Y+8	; 0x08
     ac0:	2a 81       	ldd	r18, Y+2	; 0x02
				PagedMemory      = false;
				break;
		}

		/* Send the appropriate memory write commands to the device, indicate timeout if occurred */
		if ((PagedMemory && !(XMEGANVM_WritePageMemory(WriteBuffCommand, EraseBuffCommand, WriteCommand,
     ac2:	99 e0       	ldi	r25, 0x09	; 9
     ac4:	c9 2e       	mov	r12, r25
     ac6:	d1 2c       	mov	r13, r1
     ac8:	cc 0e       	add	r12, r28
     aca:	dd 1e       	adc	r13, r29
     acc:	04 d4       	rcall	.+2056   	; 0x12d6 <XMEGANVM_WritePageMemory>
     ace:	0e c0       	rjmp	.+28     	; 0xaec <XPROGProtocol_WriteMemory+0x108>
     ad0:	84 2f       	mov	r24, r20
     ad2:	b8 01       	movw	r22, r16
     ad4:	a7 01       	movw	r20, r14
     ad6:	29 85       	ldd	r18, Y+9	; 0x09
													   WriteMemory_XPROG_Params.PageMode, WriteMemory_XPROG_Params.Address,
													   WriteMemory_XPROG_Params.ProgData, WriteMemory_XPROG_Params.Length))) ||
		   (!PagedMemory && !(XMEGANVM_WriteByteMemory(WriteCommand, WriteMemory_XPROG_Params.Address,
     ad8:	da d3       	rcall	.+1972   	; 0x128e <XMEGANVM_WriteByteMemory>
     ada:	08 c0       	rjmp	.+16     	; 0xaec <XPROGProtocol_WriteMemory+0x108>
     adc:	4f 81       	ldd	r20, Y+7	; 0x07
     ade:	58 85       	ldd	r21, Y+8	; 0x08
     ae0:	8b 81       	ldd	r24, Y+3	; 0x03
     ae2:	9c 81       	ldd	r25, Y+4	; 0x04
     ae4:	be 01       	movw	r22, r28
		}
	}
	else
	{
		/* Send write command to the TPI device, indicate timeout if occurred */
		if (!(TINYNVM_WriteMemory(WriteMemory_XPROG_Params.Address, WriteMemory_XPROG_Params.ProgData,
     ae6:	67 5f       	subi	r22, 0xF7	; 247
     ae8:	7f 4f       	sbci	r23, 0xFF	; 255
     aea:	87 d5       	rcall	.+2830   	; 0x15fa <TINYNVM_WriteMemory>
     aec:	88 23       	and	r24, r24
     aee:	11 f0       	breq	.+4      	; 0xaf4 <XPROGProtocol_WriteMemory+0x110>
     af0:	80 e0       	ldi	r24, 0x00	; 0
     af2:	01 c0       	rjmp	.+2      	; 0xaf6 <XPROGProtocol_WriteMemory+0x112>
     af4:	83 e0       	ldi	r24, 0x03	; 3
     af6:	90 e5       	ldi	r25, 0x50	; 80
     af8:	90 93 f1 00 	sts	0x00F1, r25
}

/** Handler for the XPROG WRITE_MEMORY command to write to a specific memory space within the attached device. */
static void XPROGProtocol_WriteMemory(void)
{
	uint8_t ReturnStatus = XPRG_ERR_OK;
     afc:	94 e0       	ldi	r25, 0x04	; 4
     afe:	90 93 f1 00 	sts	0x00F1, r25
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     b02:	80 93 f1 00 	sts	0x00F1, r24
     b06:	80 91 e8 00 	lds	r24, 0x00E8
     b0a:	8e 77       	andi	r24, 0x7E	; 126
     b0c:	80 93 e8 00 	sts	0x00E8, r24
     b10:	c8 5f       	subi	r28, 0xF8	; 248
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     b12:	de 4f       	sbci	r29, 0xFE	; 254
     b14:	0f b6       	in	r0, 0x3f	; 63
     b16:	f8 94       	cli
     b18:	de bf       	out	0x3e, r29	; 62
     b1a:	0f be       	out	0x3f, r0	; 63

	Endpoint_Write_8(CMD_XPROG);
	Endpoint_Write_8(XPRG_CMD_WRITE_MEM);
	Endpoint_Write_8(ReturnStatus);
	Endpoint_ClearIN();
}
     b1c:	cd bf       	out	0x3d, r28	; 61
     b1e:	df 91       	pop	r29
     b20:	cf 91       	pop	r28
     b22:	1f 91       	pop	r17
     b24:	0f 91       	pop	r16
     b26:	ff 90       	pop	r15
     b28:	ef 90       	pop	r14
     b2a:	df 90       	pop	r13
     b2c:	cf 90       	pop	r12
     b2e:	bf 90       	pop	r11
     b30:	af 90       	pop	r10
     b32:	08 95       	ret

00000b34 <XPROGProtocol_ReadMemory>:
     b34:	cf 93       	push	r28
     b36:	df 93       	push	r29
     b38:	cd b7       	in	r28, 0x3d	; 61
     b3a:	de b7       	in	r29, 0x3e	; 62
     b3c:	c7 50       	subi	r28, 0x07	; 7
     b3e:	d1 40       	sbci	r29, 0x01	; 1

/** Handler for the XPROG READ_MEMORY command to read data from a specific address space within the
 *  attached device.
 */
static void XPROGProtocol_ReadMemory(void)
{
     b40:	0f b6       	in	r0, 0x3f	; 63
     b42:	f8 94       	cli
     b44:	de bf       	out	0x3e, r29	; 62
     b46:	0f be       	out	0x3f, r0	; 63
     b48:	cd bf       	out	0x3d, r28	; 61
		uint8_t  MemoryType;
		uint32_t Address;
		uint16_t Length;
	} ReadMemory_XPROG_Params;

	Endpoint_Read_Stream_LE(&ReadMemory_XPROG_Params, sizeof(ReadMemory_XPROG_Params), NULL);
     b4a:	ce 01       	movw	r24, r28
     b4c:	01 96       	adiw	r24, 0x01	; 1
     b4e:	67 e0       	ldi	r22, 0x07	; 7
     b50:	70 e0       	ldi	r23, 0x00	; 0
     b52:	40 e0       	ldi	r20, 0x00	; 0
     b54:	50 e0       	ldi	r21, 0x00	; 0
     b56:	f4 d5       	rcall	.+3048   	; 0x1740 <Endpoint_Read_Stream_LE>
     b58:	6a 81       	ldd	r22, Y+2	; 0x02
	ReadMemory_XPROG_Params.Address = SwapEndian_32(ReadMemory_XPROG_Params.Address);
     b5a:	7b 81       	ldd	r23, Y+3	; 0x03
     b5c:	8c 81       	ldd	r24, Y+4	; 0x04
     b5e:	9d 81       	ldd	r25, Y+5	; 0x05
     b60:	3b df       	rcall	.-394    	; 0x9d8 <SwapEndian_32>
     b62:	dc 01       	movw	r26, r24
     b64:	cb 01       	movw	r24, r22
     b66:	8a 83       	std	Y+2, r24	; 0x02
     b68:	9b 83       	std	Y+3, r25	; 0x03
     b6a:	ac 83       	std	Y+4, r26	; 0x04
     b6c:	bd 83       	std	Y+5, r27	; 0x05
     b6e:	8e 81       	ldd	r24, Y+6	; 0x06
     b70:	9f 81       	ldd	r25, Y+7	; 0x07
     b72:	9e 83       	std	Y+6, r25	; 0x06
     b74:	8f 83       	std	Y+7, r24	; 0x07
	ReadMemory_XPROG_Params.Length  = SwapEndian_16(ReadMemory_XPROG_Params.Length);
     b76:	80 91 e8 00 	lds	r24, 0x00E8
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     b7a:	8b 77       	andi	r24, 0x7B	; 123
     b7c:	80 93 e8 00 	sts	0x00E8, r24
     b80:	82 e0       	ldi	r24, 0x02	; 2
     b82:	80 93 e9 00 	sts	0x00E9, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     b86:	80 91 ec 00 	lds	r24, 0x00EC
			 *  \param[in] DirectionMask  New endpoint direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask)
			{
				UECFG0X = ((UECFG0X & ~(1 << EPDIR)) | (DirectionMask ? (1 << EPDIR) : 0));
     b8a:	81 60       	ori	r24, 0x01	; 1
     b8c:	80 93 ec 00 	sts	0x00EC, r24
     b90:	80 91 d1 02 	lds	r24, 0x02D1
	Endpoint_SelectEndpoint(AVRISP_DATA_IN_EPADDR);
	Endpoint_SetEndpointDirection(ENDPOINT_DIR_IN);

	uint8_t ReadBuffer[256];

	if (XPROG_SelectedProtocol == XPRG_PROTOCOL_PDI)
     b94:	2e 81       	ldd	r18, Y+6	; 0x06
     b96:	3f 81       	ldd	r19, Y+7	; 0x07
     b98:	88 23       	and	r24, r24
     b9a:	49 f4       	brne	.+18     	; 0xbae <XPROGProtocol_ReadMemory+0x7a>
     b9c:	6a 81       	ldd	r22, Y+2	; 0x02
     b9e:	7b 81       	ldd	r23, Y+3	; 0x03
	{
		/* Read the PDI target's memory, indicate timeout if occurred */
		if (!(XMEGANVM_ReadMemory(ReadMemory_XPROG_Params.Address, ReadBuffer, ReadMemory_XPROG_Params.Length)))
     ba0:	8c 81       	ldd	r24, Y+4	; 0x04
     ba2:	9d 81       	ldd	r25, Y+5	; 0x05
     ba4:	ae 01       	movw	r20, r28
     ba6:	48 5f       	subi	r20, 0xF8	; 248
     ba8:	5f 4f       	sbci	r21, 0xFF	; 255
     baa:	37 d3       	rcall	.+1646   	; 0x121a <XMEGANVM_ReadMemory>
     bac:	07 c0       	rjmp	.+14     	; 0xbbc <XPROGProtocol_ReadMemory+0x88>
     bae:	8a 81       	ldd	r24, Y+2	; 0x02
     bb0:	9b 81       	ldd	r25, Y+3	; 0x03
     bb2:	be 01       	movw	r22, r28
		  ReturnStatus = XPRG_ERR_TIMEOUT;
	}
	else
	{
		/* Read the TPI target's memory, indicate timeout if occurred */
		if (!(TINYNVM_ReadMemory(ReadMemory_XPROG_Params.Address, ReadBuffer, ReadMemory_XPROG_Params.Length)))
     bb4:	68 5f       	subi	r22, 0xF8	; 248
     bb6:	7f 4f       	sbci	r23, 0xFF	; 255
     bb8:	a9 01       	movw	r20, r18
     bba:	f3 d4       	rcall	.+2534   	; 0x15a2 <TINYNVM_ReadMemory>
     bbc:	88 23       	and	r24, r24
     bbe:	11 f0       	breq	.+4      	; 0xbc4 <XPROGProtocol_ReadMemory+0x90>
     bc0:	80 e0       	ldi	r24, 0x00	; 0
     bc2:	01 c0       	rjmp	.+2      	; 0xbc6 <XPROGProtocol_ReadMemory+0x92>
     bc4:	83 e0       	ldi	r24, 0x03	; 3
     bc6:	90 e5       	ldi	r25, 0x50	; 80
/** Handler for the XPROG READ_MEMORY command to read data from a specific address space within the
 *  attached device.
 */
static void XPROGProtocol_ReadMemory(void)
{
	uint8_t ReturnStatus = XPRG_ERR_OK;
     bc8:	90 93 f1 00 	sts	0x00F1, r25
	}
	else
	{
		/* Read the TPI target's memory, indicate timeout if occurred */
		if (!(TINYNVM_ReadMemory(ReadMemory_XPROG_Params.Address, ReadBuffer, ReadMemory_XPROG_Params.Length)))
		  ReturnStatus = XPRG_ERR_TIMEOUT;
     bcc:	95 e0       	ldi	r25, 0x05	; 5
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     bce:	90 93 f1 00 	sts	0x00F1, r25
     bd2:	80 93 f1 00 	sts	0x00F1, r24
     bd6:	88 23       	and	r24, r24
     bd8:	39 f4       	brne	.+14     	; 0xbe8 <XPROGProtocol_ReadMemory+0xb4>
     bda:	6e 81       	ldd	r22, Y+6	; 0x06
     bdc:	7f 81       	ldd	r23, Y+7	; 0x07

	Endpoint_Write_8(CMD_XPROG);
	Endpoint_Write_8(XPRG_CMD_READ_MEM);
	Endpoint_Write_8(ReturnStatus);

	if (ReturnStatus == XPRG_ERR_OK)
     bde:	ce 01       	movw	r24, r28
     be0:	08 96       	adiw	r24, 0x08	; 8
	  Endpoint_Write_Stream_LE(ReadBuffer, ReadMemory_XPROG_Params.Length, NULL);
     be2:	40 e0       	ldi	r20, 0x00	; 0
     be4:	50 e0       	ldi	r21, 0x00	; 0
     be6:	5c d5       	rcall	.+2744   	; 0x16a0 <Endpoint_Write_Stream_LE>
     be8:	80 91 e8 00 	lds	r24, 0x00E8
     bec:	8e 77       	andi	r24, 0x7E	; 126
     bee:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     bf2:	c9 5f       	subi	r28, 0xF9	; 249
     bf4:	de 4f       	sbci	r29, 0xFE	; 254
     bf6:	0f b6       	in	r0, 0x3f	; 63
     bf8:	f8 94       	cli
     bfa:	de bf       	out	0x3e, r29	; 62

	Endpoint_ClearIN();
}
     bfc:	0f be       	out	0x3f, r0	; 63
     bfe:	cd bf       	out	0x3d, r28	; 61
     c00:	df 91       	pop	r29
     c02:	cf 91       	pop	r28
     c04:	08 95       	ret

00000c06 <XPROGProtocol_SetMode>:
     c06:	cf 93       	push	r28
     c08:	df 93       	push	r29
     c0a:	0f 92       	push	r0
     c0c:	cd b7       	in	r28, 0x3d	; 61
     c0e:	de b7       	in	r29, 0x3e	; 62
	struct
	{
		uint8_t Protocol;
	} SetMode_XPROG_Params;

	Endpoint_Read_Stream_LE(&SetMode_XPROG_Params, sizeof(SetMode_XPROG_Params), NULL);
     c10:	ce 01       	movw	r24, r28
     c12:	01 96       	adiw	r24, 0x01	; 1
     c14:	61 e0       	ldi	r22, 0x01	; 1
     c16:	70 e0       	ldi	r23, 0x00	; 0
     c18:	40 e0       	ldi	r20, 0x00	; 0
     c1a:	50 e0       	ldi	r21, 0x00	; 0
     c1c:	91 d5       	rcall	.+2850   	; 0x1740 <Endpoint_Read_Stream_LE>
     c1e:	80 91 e8 00 	lds	r24, 0x00E8
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     c22:	8b 77       	andi	r24, 0x7B	; 123
     c24:	80 93 e8 00 	sts	0x00E8, r24
     c28:	82 e0       	ldi	r24, 0x02	; 2
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     c2a:	80 93 e9 00 	sts	0x00E9, r24
     c2e:	80 91 ec 00 	lds	r24, 0x00EC
			 *  \param[in] DirectionMask  New endpoint direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask)
			{
				UECFG0X = ((UECFG0X & ~(1 << EPDIR)) | (DirectionMask ? (1 << EPDIR) : 0));
     c32:	81 60       	ori	r24, 0x01	; 1
     c34:	80 93 ec 00 	sts	0x00EC, r24
     c38:	89 81       	ldd	r24, Y+1	; 0x01

	Endpoint_ClearOUT();
	Endpoint_SelectEndpoint(AVRISP_DATA_IN_EPADDR);
	Endpoint_SetEndpointDirection(ENDPOINT_DIR_IN);

	XPROG_SelectedProtocol = SetMode_XPROG_Params.Protocol;
     c3a:	80 93 d1 02 	sts	0x02D1, r24
     c3e:	81 e5       	ldi	r24, 0x51	; 81
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     c40:	80 93 f1 00 	sts	0x00F1, r24
     c44:	89 81       	ldd	r24, Y+1	; 0x01

	Endpoint_Write_8(CMD_XPROG_SETMODE);
	Endpoint_Write_8((SetMode_XPROG_Params.Protocol != XPRG_PROTOCOL_JTAG) ? STATUS_CMD_OK : STATUS_CMD_FAILED);
     c46:	81 30       	cpi	r24, 0x01	; 1
     c48:	11 f0       	breq	.+4      	; 0xc4e <XPROGProtocol_SetMode+0x48>
     c4a:	80 e0       	ldi	r24, 0x00	; 0
     c4c:	01 c0       	rjmp	.+2      	; 0xc50 <XPROGProtocol_SetMode+0x4a>
     c4e:	80 ec       	ldi	r24, 0xC0	; 192
     c50:	80 93 f1 00 	sts	0x00F1, r24
     c54:	80 91 e8 00 	lds	r24, 0x00E8
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     c58:	8e 77       	andi	r24, 0x7E	; 126
     c5a:	80 93 e8 00 	sts	0x00E8, r24
     c5e:	0f 90       	pop	r0
	Endpoint_ClearIN();
}
     c60:	df 91       	pop	r29
     c62:	cf 91       	pop	r28
     c64:	08 95       	ret

00000c66 <XPROGProtocol_Command>:
     c66:	cf 93       	push	r28

/** Handler for the CMD_XPROG command, which wraps up XPROG commands in a V2 wrapper which need to be
 *  removed and processed so that the underlying XPROG command can be handled.
 */
void XPROGProtocol_Command(void)
{
     c68:	df 93       	push	r29
     c6a:	cd b7       	in	r28, 0x3d	; 61
     c6c:	de b7       	in	r29, 0x3e	; 62
     c6e:	29 97       	sbiw	r28, 0x09	; 9
     c70:	0f b6       	in	r0, 0x3f	; 63
     c72:	f8 94       	cli
     c74:	de bf       	out	0x3e, r29	; 62
     c76:	0f be       	out	0x3f, r0	; 63
     c78:	cd bf       	out	0x3d, r28	; 61
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
     c7a:	80 91 f1 00 	lds	r24, 0x00F1
	uint8_t XPROGCommand = Endpoint_Read_8();

	switch (XPROGCommand)
     c7e:	84 30       	cpi	r24, 0x04	; 4
     c80:	09 f4       	brne	.+2      	; 0xc84 <XPROGProtocol_Command+0x1e>
     c82:	96 c0       	rjmp	.+300    	; 0xdb0 <XPROGProtocol_Command+0x14a>
     c84:	85 30       	cpi	r24, 0x05	; 5
     c86:	48 f4       	brcc	.+18     	; 0xc9a <XPROGProtocol_Command+0x34>
     c88:	82 30       	cpi	r24, 0x02	; 2
     c8a:	89 f1       	breq	.+98     	; 0xcee <XPROGProtocol_Command+0x88>
     c8c:	83 30       	cpi	r24, 0x03	; 3
     c8e:	08 f0       	brcs	.+2      	; 0xc92 <XPROGProtocol_Command+0x2c>
     c90:	4a c0       	rjmp	.+148    	; 0xd26 <XPROGProtocol_Command+0xc0>
     c92:	81 30       	cpi	r24, 0x01	; 1
     c94:	09 f0       	breq	.+2      	; 0xc98 <XPROGProtocol_Command+0x32>
     c96:	29 c1       	rjmp	.+594    	; 0xeea <XPROGProtocol_Command+0x284>
     c98:	0a c0       	rjmp	.+20     	; 0xcae <XPROGProtocol_Command+0x48>
     c9a:	86 30       	cpi	r24, 0x06	; 6
     c9c:	09 f4       	brne	.+2      	; 0xca0 <XPROGProtocol_Command+0x3a>
     c9e:	8c c0       	rjmp	.+280    	; 0xdb8 <XPROGProtocol_Command+0x152>
     ca0:	86 30       	cpi	r24, 0x06	; 6
     ca2:	08 f4       	brcc	.+2      	; 0xca6 <XPROGProtocol_Command+0x40>
     ca4:	87 c0       	rjmp	.+270    	; 0xdb4 <XPROGProtocol_Command+0x14e>
     ca6:	87 30       	cpi	r24, 0x07	; 7
     ca8:	09 f0       	breq	.+2      	; 0xcac <XPROGProtocol_Command+0x46>
     caa:	1f c1       	rjmp	.+574    	; 0xeea <XPROGProtocol_Command+0x284>
     cac:	c9 c0       	rjmp	.+402    	; 0xe40 <XPROGProtocol_Command+0x1da>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     cae:	80 91 e8 00 	lds	r24, 0x00E8
     cb2:	8b 77       	andi	r24, 0x7B	; 123
     cb4:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     cb8:	82 e0       	ldi	r24, 0x02	; 2
     cba:	80 93 e9 00 	sts	0x00E9, r24
			 *  \param[in] DirectionMask  New endpoint direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask)
			{
				UECFG0X = ((UECFG0X & ~(1 << EPDIR)) | (DirectionMask ? (1 << EPDIR) : 0));
     cbe:	80 91 ec 00 	lds	r24, 0x00EC
     cc2:	81 60       	ori	r24, 0x01	; 1
     cc4:	80 93 ec 00 	sts	0x00EC, r24
	Endpoint_SelectEndpoint(AVRISP_DATA_IN_EPADDR);
	Endpoint_SetEndpointDirection(ENDPOINT_DIR_IN);

	bool NVMBusEnabled = false;

	if (XPROG_SelectedProtocol == XPRG_PROTOCOL_PDI)
     cc8:	80 91 d1 02 	lds	r24, 0x02D1
     ccc:	88 23       	and	r24, r24
     cce:	11 f4       	brne	.+4      	; 0xcd4 <XPROGProtocol_Command+0x6e>
	  NVMBusEnabled = XMEGANVM_EnablePDI();
     cd0:	20 d2       	rcall	.+1088   	; 0x1112 <XMEGANVM_EnablePDI>
     cd2:	05 c0       	rjmp	.+10     	; 0xcde <XPROGProtocol_Command+0x78>
     cd4:	82 30       	cpi	r24, 0x02	; 2
	else if (XPROG_SelectedProtocol == XPRG_PROTOCOL_TPI)
     cd6:	11 f4       	brne	.+4      	; 0xcdc <XPROGProtocol_Command+0x76>
     cd8:	1b d4       	rcall	.+2102   	; 0x1510 <TINYNVM_EnableTPI>
	  NVMBusEnabled = TINYNVM_EnableTPI();
     cda:	01 c0       	rjmp	.+2      	; 0xcde <XPROGProtocol_Command+0x78>
     cdc:	80 e0       	ldi	r24, 0x00	; 0
     cde:	90 e5       	ldi	r25, 0x50	; 80
{
	Endpoint_ClearOUT();
	Endpoint_SelectEndpoint(AVRISP_DATA_IN_EPADDR);
	Endpoint_SetEndpointDirection(ENDPOINT_DIR_IN);

	bool NVMBusEnabled = false;
     ce0:	90 93 f1 00 	sts	0x00F1, r25
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     ce4:	91 e0       	ldi	r25, 0x01	; 1
     ce6:	90 93 f1 00 	sts	0x00F1, r25
     cea:	89 27       	eor	r24, r25
     cec:	f7 c0       	rjmp	.+494    	; 0xedc <XPROGProtocol_Command+0x276>
}

/** Handler for the CMD_XPROG command, which wraps up XPROG commands in a V2 wrapper which need to be
 *  removed and processed so that the underlying XPROG command can be handled.
 */
void XPROGProtocol_Command(void)
     cee:	90 91 e8 00 	lds	r25, 0x00E8
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     cf2:	9b 77       	andi	r25, 0x7B	; 123
     cf4:	90 93 e8 00 	sts	0x00E8, r25
     cf8:	80 93 e9 00 	sts	0x00E9, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     cfc:	80 91 ec 00 	lds	r24, 0x00EC
			 *  \param[in] DirectionMask  New endpoint direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask)
			{
				UECFG0X = ((UECFG0X & ~(1 << EPDIR)) | (DirectionMask ? (1 << EPDIR) : 0));
     d00:	81 60       	ori	r24, 0x01	; 1
     d02:	80 93 ec 00 	sts	0x00EC, r24
     d06:	80 91 d1 02 	lds	r24, 0x02D1
{
	Endpoint_ClearOUT();
	Endpoint_SelectEndpoint(AVRISP_DATA_IN_EPADDR);
	Endpoint_SetEndpointDirection(ENDPOINT_DIR_IN);

	if (XPROG_SelectedProtocol == XPRG_PROTOCOL_PDI)
     d0a:	88 23       	and	r24, r24
     d0c:	11 f4       	brne	.+4      	; 0xd12 <XPROGProtocol_Command+0xac>
     d0e:	43 d2       	rcall	.+1158   	; 0x1196 <XMEGANVM_DisablePDI>
     d10:	01 c0       	rjmp	.+2      	; 0xd14 <XPROGProtocol_Command+0xae>
	  XMEGANVM_DisablePDI();
     d12:	3c d4       	rcall	.+2168   	; 0x158c <TINYNVM_DisableTPI>
     d14:	80 e5       	ldi	r24, 0x50	; 80
     d16:	80 93 f1 00 	sts	0x00F1, r24
	else
	  TINYNVM_DisableTPI();
     d1a:	82 e0       	ldi	r24, 0x02	; 2
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     d1c:	80 93 f1 00 	sts	0x00F1, r24
     d20:	10 92 f1 00 	sts	0x00F1, r1
     d24:	dd c0       	rjmp	.+442    	; 0xee0 <XPROGProtocol_Command+0x27a>
     d26:	ce 01       	movw	r24, r28
     d28:	05 96       	adiw	r24, 0x05	; 5
     d2a:	65 e0       	ldi	r22, 0x05	; 5
     d2c:	70 e0       	ldi	r23, 0x00	; 0
	{
		uint8_t  MemoryType;
		uint32_t Address;
	} Erase_XPROG_Params;

	Endpoint_Read_Stream_LE(&Erase_XPROG_Params, sizeof(Erase_XPROG_Params), NULL);
     d2e:	40 e0       	ldi	r20, 0x00	; 0
     d30:	50 e0       	ldi	r21, 0x00	; 0
     d32:	06 d5       	rcall	.+2572   	; 0x1740 <Endpoint_Read_Stream_LE>
     d34:	6e 81       	ldd	r22, Y+6	; 0x06
     d36:	7f 81       	ldd	r23, Y+7	; 0x07
     d38:	88 85       	ldd	r24, Y+8	; 0x08
     d3a:	99 85       	ldd	r25, Y+9	; 0x09
     d3c:	4d de       	rcall	.-870    	; 0x9d8 <SwapEndian_32>
	Erase_XPROG_Params.Address = SwapEndian_32(Erase_XPROG_Params.Address);
     d3e:	dc 01       	movw	r26, r24
     d40:	cb 01       	movw	r24, r22
     d42:	8e 83       	std	Y+6, r24	; 0x06
     d44:	9f 83       	std	Y+7, r25	; 0x07
     d46:	a8 87       	std	Y+8, r26	; 0x08
     d48:	b9 87       	std	Y+9, r27	; 0x09
     d4a:	80 91 e8 00 	lds	r24, 0x00E8
     d4e:	8b 77       	andi	r24, 0x7B	; 123
     d50:	80 93 e8 00 	sts	0x00E8, r24
     d54:	82 e0       	ldi	r24, 0x02	; 2
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     d56:	80 93 e9 00 	sts	0x00E9, r24
     d5a:	80 91 ec 00 	lds	r24, 0x00EC
     d5e:	81 60       	ori	r24, 0x01	; 1
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     d60:	80 93 ec 00 	sts	0x00EC, r24
     d64:	80 91 d1 02 	lds	r24, 0x02D1
			 *  \param[in] DirectionMask  New endpoint direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask)
			{
				UECFG0X = ((UECFG0X & ~(1 << EPDIR)) | (DirectionMask ? (1 << EPDIR) : 0));
     d68:	ed 81       	ldd	r30, Y+5	; 0x05
     d6a:	88 23       	and	r24, r24
     d6c:	79 f4       	brne	.+30     	; 0xd8c <XPROGProtocol_Command+0x126>
     d6e:	e1 50       	subi	r30, 0x01	; 1
	Endpoint_SelectEndpoint(AVRISP_DATA_IN_EPADDR);
	Endpoint_SetEndpointDirection(ENDPOINT_DIR_IN);

	uint8_t EraseCommand;

	if (XPROG_SelectedProtocol == XPRG_PROTOCOL_PDI)
     d70:	e8 30       	cpi	r30, 0x08	; 8
     d72:	28 f4       	brcc	.+10     	; 0xd7e <XPROGProtocol_Command+0x118>
     d74:	f0 e0       	ldi	r31, 0x00	; 0
     d76:	e6 57       	subi	r30, 0x76	; 118
     d78:	fe 4f       	sbci	r31, 0xFE	; 254
     d7a:	80 81       	ld	r24, Z
     d7c:	01 c0       	rjmp	.+2      	; 0xd80 <XPROGProtocol_Command+0x11a>
     d7e:	80 e0       	ldi	r24, 0x00	; 0
     d80:	4e 81       	ldd	r20, Y+6	; 0x06
     d82:	5f 81       	ldd	r21, Y+7	; 0x07
     d84:	68 85       	ldd	r22, Y+8	; 0x08
     d86:	79 85       	ldd	r23, Y+9	; 0x09
     d88:	17 d3       	rcall	.+1582   	; 0x13b8 <XMEGANVM_EraseMemory>
     d8a:	08 c0       	rjmp	.+16     	; 0xd9c <XPROGProtocol_Command+0x136>
				EraseCommand = XMEGA_NVM_CMD_NOOP;
				break;
		}

		/* Erase the target memory, indicate timeout if occurred */
		if (!(XMEGANVM_EraseMemory(EraseCommand, Erase_XPROG_Params.Address)))
     d8c:	e1 30       	cpi	r30, 0x01	; 1
     d8e:	11 f4       	brne	.+4      	; 0xd94 <XPROGProtocol_Command+0x12e>
     d90:	80 e1       	ldi	r24, 0x10	; 16
     d92:	01 c0       	rjmp	.+2      	; 0xd96 <XPROGProtocol_Command+0x130>
     d94:	84 e1       	ldi	r24, 0x14	; 20
     d96:	6e 81       	ldd	r22, Y+6	; 0x06
     d98:	7f 81       	ldd	r23, Y+7	; 0x07
		  ReturnStatus = XPRG_ERR_TIMEOUT;
	}
	else
	{
		if (Erase_XPROG_Params.MemoryType == XPRG_ERASE_CHIP)
     d9a:	67 d4       	rcall	.+2254   	; 0x166a <TINYNVM_EraseMemory>
     d9c:	88 23       	and	r24, r24
		  EraseCommand = TINY_NVM_CMD_CHIPERASE;
     d9e:	11 f0       	breq	.+4      	; 0xda4 <XPROGProtocol_Command+0x13e>
     da0:	80 e0       	ldi	r24, 0x00	; 0
		else
		  EraseCommand = TINY_NVM_CMD_SECTIONERASE;
     da2:	01 c0       	rjmp	.+2      	; 0xda6 <XPROGProtocol_Command+0x140>

		/* Erase the target memory, indicate timeout if occurred */
		if (!(TINYNVM_EraseMemory(EraseCommand, Erase_XPROG_Params.Address)))
     da4:	83 e0       	ldi	r24, 0x03	; 3
     da6:	90 e5       	ldi	r25, 0x50	; 80
     da8:	90 93 f1 00 	sts	0x00F1, r25
     dac:	93 e0       	ldi	r25, 0x03	; 3
     dae:	94 c0       	rjmp	.+296    	; 0xed8 <XPROGProtocol_Command+0x272>
}

/** Handler for the XPRG ERASE command to erase a specific memory address space in the attached device. */
static void XPROGProtocol_Erase(void)
{
	uint8_t ReturnStatus = XPRG_ERR_OK;
     db0:	19 de       	rcall	.-974    	; 0x9e4 <XPROGProtocol_WriteMemory>
     db2:	9b c0       	rjmp	.+310    	; 0xeea <XPROGProtocol_Command+0x284>
		else
		  EraseCommand = TINY_NVM_CMD_SECTIONERASE;

		/* Erase the target memory, indicate timeout if occurred */
		if (!(TINYNVM_EraseMemory(EraseCommand, Erase_XPROG_Params.Address)))
		  ReturnStatus = XPRG_ERR_TIMEOUT;
     db4:	bf de       	rcall	.-642    	; 0xb34 <XPROGProtocol_ReadMemory>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     db6:	99 c0       	rjmp	.+306    	; 0xeea <XPROGProtocol_Command+0x284>
     db8:	ce 01       	movw	r24, r28
     dba:	05 96       	adiw	r24, 0x05	; 5
     dbc:	61 e0       	ldi	r22, 0x01	; 1
     dbe:	70 e0       	ldi	r23, 0x00	; 0
			break;
		case XPRG_CMD_ERASE:
			XPROGProtocol_Erase();
			break;
		case XPRG_CMD_WRITE_MEM:
			XPROGProtocol_WriteMemory();
     dc0:	40 e0       	ldi	r20, 0x00	; 0
     dc2:	50 e0       	ldi	r21, 0x00	; 0
			break;
     dc4:	bd d4       	rcall	.+2426   	; 0x1740 <Endpoint_Read_Stream_LE>
		case XPRG_CMD_READ_MEM:
			XPROGProtocol_ReadMemory();
     dc6:	80 91 e8 00 	lds	r24, 0x00E8
			break;
     dca:	8b 77       	andi	r24, 0x7B	; 123
	struct
	{
		uint8_t CRCType;
	} ReadCRC_XPROG_Params;

	Endpoint_Read_Stream_LE(&ReadCRC_XPROG_Params, sizeof(ReadCRC_XPROG_Params), NULL);
     dcc:	80 93 e8 00 	sts	0x00E8, r24
     dd0:	82 e0       	ldi	r24, 0x02	; 2
     dd2:	80 93 e9 00 	sts	0x00E9, r24
     dd6:	80 91 ec 00 	lds	r24, 0x00EC
     dda:	81 60       	ori	r24, 0x01	; 1
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     ddc:	80 93 ec 00 	sts	0x00EC, r24
     de0:	80 91 d1 02 	lds	r24, 0x02D1
     de4:	88 23       	and	r24, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     de6:	91 f4       	brne	.+36     	; 0xe0c <XPROGProtocol_Command+0x1a6>
     de8:	ed 81       	ldd	r30, Y+5	; 0x05
     dea:	e1 50       	subi	r30, 0x01	; 1
			 *  \param[in] DirectionMask  New endpoint direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask)
			{
				UECFG0X = ((UECFG0X & ~(1 << EPDIR)) | (DirectionMask ? (1 << EPDIR) : 0));
     dec:	e2 30       	cpi	r30, 0x02	; 2
     dee:	28 f4       	brcc	.+10     	; 0xdfa <XPROGProtocol_Command+0x194>
     df0:	f0 e0       	ldi	r31, 0x00	; 0
     df2:	e6 55       	subi	r30, 0x56	; 86
     df4:	fe 4f       	sbci	r31, 0xFE	; 254
	Endpoint_SelectEndpoint(AVRISP_DATA_IN_EPADDR);
	Endpoint_SetEndpointDirection(ENDPOINT_DIR_IN);

	uint32_t MemoryCRC;

	if (XPROG_SelectedProtocol == XPRG_PROTOCOL_PDI)
     df6:	80 81       	ld	r24, Z
     df8:	01 c0       	rjmp	.+2      	; 0xdfc <XPROGProtocol_Command+0x196>
     dfa:	88 e7       	ldi	r24, 0x78	; 120
     dfc:	be 01       	movw	r22, r28
     dfe:	6f 5f       	subi	r22, 0xFF	; 255
     e00:	7f 4f       	sbci	r23, 0xFF	; 255
     e02:	d4 d1       	rcall	.+936    	; 0x11ac <XMEGANVM_GetMemoryCRC>
     e04:	88 23       	and	r24, r24
     e06:	21 f0       	breq	.+8      	; 0xe10 <XPROGProtocol_Command+0x1aa>
     e08:	80 e0       	ldi	r24, 0x00	; 0
     e0a:	03 c0       	rjmp	.+6      	; 0xe12 <XPROGProtocol_Command+0x1ac>
     e0c:	81 e0       	ldi	r24, 0x01	; 1
     e0e:	01 c0       	rjmp	.+2      	; 0xe12 <XPROGProtocol_Command+0x1ac>
     e10:	83 e0       	ldi	r24, 0x03	; 3
				CRCCommand = XMEGA_NVM_CMD_FLASHCRC;
				break;
		}

		/* Perform and retrieve the memory CRC, indicate timeout if occurred */
		if (!(XMEGANVM_GetMemoryCRC(CRCCommand, &MemoryCRC)))
     e12:	90 e5       	ldi	r25, 0x50	; 80
     e14:	90 93 f1 00 	sts	0x00F1, r25
     e18:	96 e0       	ldi	r25, 0x06	; 6
     e1a:	90 93 f1 00 	sts	0x00F1, r25
     e1e:	80 93 f1 00 	sts	0x00F1, r24
/** Handler for the XPROG CRC command to read a specific memory space's CRC value for comparison between the
 *  attached device's memory and a data set on the host.
 */
static void XPROGProtocol_ReadCRC(void)
{
	uint8_t ReturnStatus = XPRG_ERR_OK;
     e22:	88 23       	and	r24, r24
		  ReturnStatus = XPRG_ERR_TIMEOUT;
	}
	else
	{
		/* TPI does not support memory CRC */
		ReturnStatus = XPRG_ERR_FAILED;
     e24:	09 f0       	breq	.+2      	; 0xe28 <XPROGProtocol_Command+0x1c2>
     e26:	5c c0       	rjmp	.+184    	; 0xee0 <XPROGProtocol_Command+0x27a>
				break;
		}

		/* Perform and retrieve the memory CRC, indicate timeout if occurred */
		if (!(XMEGANVM_GetMemoryCRC(CRCCommand, &MemoryCRC)))
		  ReturnStatus = XPRG_ERR_TIMEOUT;
     e28:	89 81       	ldd	r24, Y+1	; 0x01
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     e2a:	9a 81       	ldd	r25, Y+2	; 0x02
     e2c:	ab 81       	ldd	r26, Y+3	; 0x03
     e2e:	bc 81       	ldd	r27, Y+4	; 0x04
     e30:	cd 01       	movw	r24, r26
     e32:	aa 27       	eor	r26, r26
     e34:	bb 27       	eor	r27, r27
     e36:	80 93 f1 00 	sts	0x00F1, r24

	Endpoint_Write_8(CMD_XPROG);
	Endpoint_Write_8(XPRG_CMD_CRC);
	Endpoint_Write_8(ReturnStatus);

	if (ReturnStatus == XPRG_ERR_OK)
     e3a:	99 81       	ldd	r25, Y+1	; 0x01
     e3c:	8a 81       	ldd	r24, Y+2	; 0x02
     e3e:	4c c0       	rjmp	.+152    	; 0xed8 <XPROGProtocol_Command+0x272>
	{
		Endpoint_Write_8(MemoryCRC >> 16);
     e40:	80 91 f1 00 	lds	r24, 0x00F1
     e44:	83 30       	cpi	r24, 0x03	; 3
     e46:	31 f1       	breq	.+76     	; 0xe94 <XPROGProtocol_Command+0x22e>
     e48:	84 30       	cpi	r24, 0x04	; 4
     e4a:	28 f4       	brcc	.+10     	; 0xe56 <XPROGProtocol_Command+0x1f0>
     e4c:	81 30       	cpi	r24, 0x01	; 1
     e4e:	41 f0       	breq	.+16     	; 0xe60 <XPROGProtocol_Command+0x1fa>
     e50:	82 30       	cpi	r24, 0x02	; 2
		Endpoint_Write_16_LE(MemoryCRC & 0xFFFF);
     e52:	81 f5       	brne	.+96     	; 0xeb4 <XPROGProtocol_Command+0x24e>
     e54:	16 c0       	rjmp	.+44     	; 0xe82 <XPROGProtocol_Command+0x21c>
     e56:	84 30       	cpi	r24, 0x04	; 4
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
     e58:	11 f1       	breq	.+68     	; 0xe9e <XPROGProtocol_Command+0x238>
     e5a:	85 30       	cpi	r24, 0x05	; 5
	uint8_t ReturnStatus = XPRG_ERR_OK;

	uint8_t XPROGParam = Endpoint_Read_8();

	/* Determine which parameter is being set, store the new parameter value */
	switch (XPROGParam)
     e5c:	59 f5       	brne	.+86     	; 0xeb4 <XPROGProtocol_Command+0x24e>
     e5e:	24 c0       	rjmp	.+72     	; 0xea8 <XPROGProtocol_Command+0x242>
     e60:	80 91 f1 00 	lds	r24, 0x00F1
     e64:	90 91 f1 00 	lds	r25, 0x00F1
     e68:	20 91 f1 00 	lds	r18, 0x00F1
     e6c:	30 91 f1 00 	lds	r19, 0x00F1
     e70:	30 93 86 01 	sts	0x0186, r19
     e74:	20 93 87 01 	sts	0x0187, r18
				{
					uint32_t Value;
					uint8_t  Bytes[4];
				} Data;

				Data.Bytes[3] = UEDATX;
     e78:	90 93 88 01 	sts	0x0188, r25
				Data.Bytes[2] = UEDATX;
     e7c:	80 93 89 01 	sts	0x0189, r24
				Data.Bytes[1] = UEDATX;
     e80:	17 c0       	rjmp	.+46     	; 0xeb0 <XPROGProtocol_Command+0x24a>
     e82:	80 91 f1 00 	lds	r24, 0x00F1
				Data.Bytes[0] = UEDATX;
     e86:	90 91 f1 00 	lds	r25, 0x00F1
	{
		case XPRG_PARAM_NVMBASE:
			XPROG_Param_NVMBase       = Endpoint_Read_32_BE();
     e8a:	90 93 84 01 	sts	0x0184, r25
     e8e:	80 93 85 01 	sts	0x0185, r24
     e92:	0e c0       	rjmp	.+28     	; 0xeb0 <XPROGProtocol_Command+0x24a>
     e94:	80 91 f1 00 	lds	r24, 0x00F1
     e98:	80 93 83 01 	sts	0x0183, r24
				{
					uint16_t Value;
					uint8_t  Bytes[2];
				} Data;

				Data.Bytes[1] = UEDATX;
     e9c:	09 c0       	rjmp	.+18     	; 0xeb0 <XPROGProtocol_Command+0x24a>
				Data.Bytes[0] = UEDATX;
     e9e:	80 91 f1 00 	lds	r24, 0x00F1
			break;
		case XPRG_PARAM_EEPPAGESIZE:
			XPROG_Param_EEPageSize    = Endpoint_Read_16_BE();
     ea2:	80 93 82 01 	sts	0x0182, r24
     ea6:	04 c0       	rjmp	.+8      	; 0xeb0 <XPROGProtocol_Command+0x24a>
     ea8:	80 91 f1 00 	lds	r24, 0x00F1
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
     eac:	80 91 f1 00 	lds	r24, 0x00F1
			break;
		case XPRG_PARAM_NVMCMD_REG:
			XPROG_Param_NVMCMDRegAddr = Endpoint_Read_8();
     eb0:	80 e0       	ldi	r24, 0x00	; 0
     eb2:	01 c0       	rjmp	.+2      	; 0xeb6 <XPROGProtocol_Command+0x250>
     eb4:	81 e0       	ldi	r24, 0x01	; 1
     eb6:	90 91 e8 00 	lds	r25, 0x00E8
			break;
		case XPRG_PARAM_NVMCSR_REG:
			XPROG_Param_NVMCSRRegAddr = Endpoint_Read_8();
     eba:	9b 77       	andi	r25, 0x7B	; 123
     ebc:	90 93 e8 00 	sts	0x00E8, r25
			static inline void Endpoint_Discard_16(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Discard_16(void)
			{
				uint8_t Dummy;

				Dummy = UEDATX;
     ec0:	92 e0       	ldi	r25, 0x02	; 2
     ec2:	90 93 e9 00 	sts	0x00E9, r25
				Dummy = UEDATX;
     ec6:	90 91 ec 00 	lds	r25, 0x00EC
/** Handler for the XPROG SET_PARAM command to set a XPROG parameter for use when communicating with the
 *  attached device.
 */
static void XPROGProtocol_SetParam(void)
{
	uint8_t ReturnStatus = XPRG_ERR_OK;
     eca:	91 60       	ori	r25, 0x01	; 1
			         the communication with AVRStudio 5.1 will fail.
			*/
			Endpoint_Discard_16();
			break;
		default:
			ReturnStatus = XPRG_ERR_FAILED;
     ecc:	90 93 ec 00 	sts	0x00EC, r25
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     ed0:	90 e5       	ldi	r25, 0x50	; 80
     ed2:	90 93 f1 00 	sts	0x00F1, r25
     ed6:	97 e0       	ldi	r25, 0x07	; 7
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     ed8:	90 93 f1 00 	sts	0x00F1, r25
     edc:	80 93 f1 00 	sts	0x00F1, r24
			 *  \param[in] DirectionMask  New endpoint direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask)
			{
				UECFG0X = ((UECFG0X & ~(1 << EPDIR)) | (DirectionMask ? (1 << EPDIR) : 0));
     ee0:	80 91 e8 00 	lds	r24, 0x00E8
     ee4:	8e 77       	andi	r24, 0x7E	; 126
     ee6:	80 93 e8 00 	sts	0x00E8, r24
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     eea:	29 96       	adiw	r28, 0x09	; 9
     eec:	0f b6       	in	r0, 0x3f	; 63
     eee:	f8 94       	cli
     ef0:	de bf       	out	0x3e, r29	; 62
     ef2:	0f be       	out	0x3f, r0	; 63
     ef4:	cd bf       	out	0x3d, r28	; 61
     ef6:	df 91       	pop	r29
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     ef8:	cf 91       	pop	r28
     efa:	08 95       	ret

00000efc <XPROGTarget_SetTxMode>:
}

static void XPROGTarget_SetTxMode(void)
{
	/* Wait for a full cycle of the clock */
	while (PIND & (1 << 5));
     efc:	4d 99       	sbic	0x09, 5	; 9
     efe:	fe cf       	rjmp	.-4      	; 0xefc <XPROGTarget_SetTxMode>
	while (!(PIND & (1 << 5)));
     f00:	4d 9b       	sbis	0x09, 5	; 9
     f02:	fe cf       	rjmp	.-4      	; 0xf00 <XPROGTarget_SetTxMode+0x4>
	while (PIND & (1 << 5));
     f04:	4d 99       	sbic	0x09, 5	; 9
     f06:	fe cf       	rjmp	.-4      	; 0xf04 <XPROGTarget_SetTxMode+0x8>

	PORTD  |=  (1 << 3);
     f08:	5b 9a       	sbi	0x0b, 3	; 11
	DDRD   |=  (1 << 3);
     f0a:	53 9a       	sbi	0x0a, 3	; 10

	UCSR1B &= ~(1 << RXEN1);
     f0c:	80 91 c9 00 	lds	r24, 0x00C9
     f10:	8f 7e       	andi	r24, 0xEF	; 239
     f12:	80 93 c9 00 	sts	0x00C9, r24
	UCSR1B |=  (1 << TXEN1);
     f16:	80 91 c9 00 	lds	r24, 0x00C9
     f1a:	88 60       	ori	r24, 0x08	; 8
     f1c:	80 93 c9 00 	sts	0x00C9, r24

	IsSending = true;
     f20:	81 e0       	ldi	r24, 0x01	; 1
     f22:	80 93 ef 02 	sts	0x02EF, r24
}
     f26:	08 95       	ret

00000f28 <XPROGTarget_SetRxMode>:

static void XPROGTarget_SetRxMode(void)
{
	while (!(UCSR1A & (1 << TXC1)));
     f28:	80 91 c8 00 	lds	r24, 0x00C8
     f2c:	86 ff       	sbrs	r24, 6
     f2e:	fc cf       	rjmp	.-8      	; 0xf28 <XPROGTarget_SetRxMode>
	UCSR1A |=  (1 << TXC1);
     f30:	80 91 c8 00 	lds	r24, 0x00C8
     f34:	80 64       	ori	r24, 0x40	; 64
     f36:	80 93 c8 00 	sts	0x00C8, r24

	UCSR1B &= ~(1 << TXEN1);
     f3a:	80 91 c9 00 	lds	r24, 0x00C9
     f3e:	87 7f       	andi	r24, 0xF7	; 247
     f40:	80 93 c9 00 	sts	0x00C9, r24
	UCSR1B |=  (1 << RXEN1);
     f44:	80 91 c9 00 	lds	r24, 0x00C9
     f48:	80 61       	ori	r24, 0x10	; 16
     f4a:	80 93 c9 00 	sts	0x00C9, r24

	DDRD   &= ~(1 << 3);
     f4e:	53 98       	cbi	0x0a, 3	; 10
	PORTD  &= ~(1 << 3);
     f50:	5b 98       	cbi	0x0b, 3	; 11

	IsSending = false;
     f52:	10 92 ef 02 	sts	0x02EF, r1
}
     f56:	08 95       	ret

00000f58 <XPROGTarget_DisableTargetPDI>:

/** Disables the target's PDI interface, exits programming mode and starts the target's application. */
void XPROGTarget_DisableTargetPDI(void)
{
	/* Switch to Rx mode to ensure that all pending transmissions are complete */
	if (IsSending)
     f58:	80 91 ef 02 	lds	r24, 0x02EF
     f5c:	88 23       	and	r24, r24
     f5e:	09 f0       	breq	.+2      	; 0xf62 <XPROGTarget_DisableTargetPDI+0xa>
	  XPROGTarget_SetRxMode();
     f60:	e3 df       	rcall	.-58     	; 0xf28 <XPROGTarget_SetRxMode>
     f62:	80 ec       	ldi	r24, 0xC0	; 192

	/* Turn off receiver and transmitter of the USART, clear settings */
	UCSR1A  = ((1 << TXC1) | (1 << RXC1));
     f64:	80 93 c8 00 	sts	0x00C8, r24
     f68:	10 92 c9 00 	sts	0x00C9, r1
	UCSR1B  = 0;
     f6c:	10 92 ca 00 	sts	0x00CA, r1
	UCSR1C  = 0;
     f70:	8a b1       	in	r24, 0x0a	; 10

	/* Tristate all pins */
	DDRD  &= ~((1 << 5) | (1 << 3));
     f72:	87 7d       	andi	r24, 0xD7	; 215
     f74:	8a b9       	out	0x0a, r24	; 10
     f76:	8b b1       	in	r24, 0x0b	; 11
	PORTD &= ~((1 << 5) | (1 << 3) | (1 << 2));
     f78:	83 7d       	andi	r24, 0xD3	; 211
     f7a:	8b b9       	out	0x0b, r24	; 11
     f7c:	08 95       	ret

00000f7e <XPROGTarget_DisableTargetTPI>:
}
     f7e:	80 91 ef 02 	lds	r24, 0x02EF

/** Disables the target's TPI interface, exits programming mode and starts the target's application. */
void XPROGTarget_DisableTargetTPI(void)
{
	/* Switch to Rx mode to ensure that all pending transmissions are complete */
	if (IsSending)
     f82:	88 23       	and	r24, r24
     f84:	09 f0       	breq	.+2      	; 0xf88 <XPROGTarget_DisableTargetTPI+0xa>
	  XPROGTarget_SetRxMode();
     f86:	d0 df       	rcall	.-96     	; 0xf28 <XPROGTarget_SetRxMode>
     f88:	80 91 c8 00 	lds	r24, 0x00C8

	/* Turn off receiver and transmitter of the USART, clear settings */
	UCSR1A |= (1 << TXC1) | (1 << RXC1);
     f8c:	80 6c       	ori	r24, 0xC0	; 192
     f8e:	80 93 c8 00 	sts	0x00C8, r24
     f92:	10 92 c9 00 	sts	0x00C9, r1
	UCSR1B  = 0;
     f96:	10 92 ca 00 	sts	0x00CA, r1
	UCSR1C  = 0;
     f9a:	8a b1       	in	r24, 0x0a	; 10

	/* Set all USART lines as inputs, tristate */
	DDRD  &= ~((1 << 5) | (1 << 3));
     f9c:	87 7d       	andi	r24, 0xD7	; 215
     f9e:	8a b9       	out	0x0a, r24	; 10
     fa0:	8b b1       	in	r24, 0x0b	; 11
	PORTD &= ~((1 << 5) | (1 << 3) | (1 << 2));
     fa2:	83 7d       	andi	r24, 0xD3	; 211
     fa4:	8b b9       	out	0x0b, r24	; 11
     fa6:	24 98       	cbi	0x04, 4	; 4

	/* Tristate target /RESET line */
	AUX_LINE_DDR  &= ~AUX_LINE_MASK;
     fa8:	2c 98       	cbi	0x05, 4	; 5
	AUX_LINE_PORT &= ~AUX_LINE_MASK;
     faa:	08 95       	ret

00000fac <XPROGTarget_SendByte>:
}
     fac:	cf 93       	push	r28
/** Sends a byte via the USART.
 *
 *  \param[in] Byte  Byte to send through the USART
 */
void XPROGTarget_SendByte(const uint8_t Byte)
{
     fae:	df 93       	push	r29
     fb0:	0f 92       	push	r0
     fb2:	cd b7       	in	r28, 0x3d	; 61
     fb4:	de b7       	in	r29, 0x3e	; 62
	/* Switch to Tx mode if currently in Rx mode */
	if (!(IsSending))
     fb6:	90 91 ef 02 	lds	r25, 0x02EF
     fba:	99 23       	and	r25, r25
     fbc:	19 f4       	brne	.+6      	; 0xfc4 <XPROGTarget_SendByte+0x18>
	  XPROGTarget_SetTxMode();
     fbe:	89 83       	std	Y+1, r24	; 0x01
     fc0:	9d df       	rcall	.-198    	; 0xefc <XPROGTarget_SetTxMode>
     fc2:	89 81       	ldd	r24, Y+1	; 0x01
     fc4:	90 91 c8 00 	lds	r25, 0x00C8

	/* Wait until there is space in the hardware Tx buffer before writing */
	while (!(UCSR1A & (1 << UDRE1)));
     fc8:	95 ff       	sbrs	r25, 5
     fca:	fc cf       	rjmp	.-8      	; 0xfc4 <XPROGTarget_SendByte+0x18>
     fcc:	90 91 c8 00 	lds	r25, 0x00C8
	UCSR1A |= (1 << TXC1);
     fd0:	90 64       	ori	r25, 0x40	; 64
     fd2:	90 93 c8 00 	sts	0x00C8, r25
     fd6:	80 93 ce 00 	sts	0x00CE, r24
	UDR1    = Byte;
     fda:	0f 90       	pop	r0
}
     fdc:	df 91       	pop	r29
     fde:	cf 91       	pop	r28
     fe0:	08 95       	ret

00000fe2 <XPROGTarget_ReceiveByte>:
     fe2:	80 91 ef 02 	lds	r24, 0x02EF
 *  \return Received byte from the USART
 */
uint8_t XPROGTarget_ReceiveByte(void)
{
	/* Switch to Rx mode if currently in Tx mode */
	if (IsSending)
     fe6:	88 23       	and	r24, r24
     fe8:	09 f0       	breq	.+2      	; 0xfec <XPROGTarget_ReceiveByte+0xa>
	  XPROGTarget_SetRxMode();
     fea:	9e df       	rcall	.-196    	; 0xf28 <XPROGTarget_SetRxMode>
     fec:	80 91 c8 00 	lds	r24, 0x00C8

	/* Wait until a byte has been received before reading */
	while (!(UCSR1A & (1 << RXC1)) && TimeoutTicksRemaining);
     ff0:	87 fd       	sbrc	r24, 7
     ff2:	03 c0       	rjmp	.+6      	; 0xffa <XPROGTarget_ReceiveByte+0x18>
     ff4:	8a b5       	in	r24, 0x2a	; 42
     ff6:	88 23       	and	r24, r24
     ff8:	c9 f7       	brne	.-14     	; 0xfec <XPROGTarget_ReceiveByte+0xa>
     ffa:	80 91 ce 00 	lds	r24, 0x00CE

	return UDR1;
     ffe:	08 95       	ret

00001000 <XPROGTarget_SendIdle>:
}
    1000:	80 91 ef 02 	lds	r24, 0x02EF

/** Sends an IDLE via the USART to the attached target, consisting of a full frame of idle bits. */
void XPROGTarget_SendIdle(void)
{
	/* Switch to Tx mode if currently in Rx mode */
	if (!(IsSending))
    1004:	88 23       	and	r24, r24
    1006:	09 f4       	brne	.+2      	; 0x100a <XPROGTarget_SendIdle+0xa>
	  XPROGTarget_SetTxMode();
    1008:	79 df       	rcall	.-270    	; 0xefc <XPROGTarget_SetTxMode>
    100a:	8c e0       	ldi	r24, 0x0C	; 12
	return UDR1;
}

/** Sends an IDLE via the USART to the attached target, consisting of a full frame of idle bits. */
void XPROGTarget_SendIdle(void)
{
    100c:	4d 99       	sbic	0x09, 5	; 9

	/* Need to do nothing for a full frame to send an IDLE */
	for (uint8_t i = 0; i < BITS_IN_USART_FRAME; i++)
	{
		/* Wait for a full cycle of the clock */
		while (PIND & (1 << 5));
    100e:	fe cf       	rjmp	.-4      	; 0x100c <XPROGTarget_SendIdle+0xc>
    1010:	4d 9b       	sbis	0x09, 5	; 9
		while (!(PIND & (1 << 5)));
    1012:	fe cf       	rjmp	.-4      	; 0x1010 <XPROGTarget_SendIdle+0x10>
    1014:	4d 99       	sbic	0x09, 5	; 9
		while (PIND & (1 << 5));
    1016:	fe cf       	rjmp	.-4      	; 0x1014 <XPROGTarget_SendIdle+0x14>
    1018:	81 50       	subi	r24, 0x01	; 1
    101a:	c1 f7       	brne	.-16     	; 0x100c <XPROGTarget_SendIdle+0xc>
	/* Switch to Tx mode if currently in Rx mode */
	if (!(IsSending))
	  XPROGTarget_SetTxMode();

	/* Need to do nothing for a full frame to send an IDLE */
	for (uint8_t i = 0; i < BITS_IN_USART_FRAME; i++)
    101c:	08 95       	ret

0000101e <XPROGTarget_EnableTargetTPI>:
		/* Wait for a full cycle of the clock */
		while (PIND & (1 << 5));
		while (!(PIND & (1 << 5)));
		while (PIND & (1 << 5));
	}
}
    101e:	10 92 ef 02 	sts	0x02EF, r1
void XPROGTarget_EnableTargetTPI(void)
{
	IsSending = false;

	/* Set /RESET line low for at least 400ns to enable TPI functionality */
	AUX_LINE_DDR  |=  AUX_LINE_MASK;
    1022:	24 9a       	sbi	0x04, 4	; 4
	AUX_LINE_PORT &= ~AUX_LINE_MASK;
    1024:	2c 98       	cbi	0x05, 4	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1026:	82 e0       	ldi	r24, 0x02	; 2
    1028:	8a 95       	dec	r24
    102a:	f1 f7       	brne	.-4      	; 0x1028 <XPROGTarget_EnableTargetTPI+0xa>
    102c:	00 c0       	rjmp	.+0      	; 0x102e <XPROGTarget_EnableTargetTPI+0x10>
	_delay_us(1);

	/* Set Tx and XCK as outputs, Rx as input */
	DDRD |=  (1 << 5) | (1 << 3);
    102e:	8a b1       	in	r24, 0x0a	; 10
    1030:	88 62       	ori	r24, 0x28	; 40
    1032:	8a b9       	out	0x0a, r24	; 10
	DDRD &= ~(1 << 2);
    1034:	52 98       	cbi	0x0a, 2	; 10

	/* Set up the synchronous USART for TPI communications - 8 data bits, even parity, 2 stop bits */
	UBRR1  = ((F_CPU / 2 / XPROG_HARDWARE_SPEED) - 1);
    1036:	8f e0       	ldi	r24, 0x0F	; 15
    1038:	90 e0       	ldi	r25, 0x00	; 0
    103a:	90 93 cd 00 	sts	0x00CD, r25
    103e:	80 93 cc 00 	sts	0x00CC, r24
	UCSR1B = (1 << TXEN1);
    1042:	88 e0       	ldi	r24, 0x08	; 8
    1044:	80 93 c9 00 	sts	0x00C9, r24
	UCSR1C = (1 << UMSEL10) | (1 << UPM11) | (1 << USBS1) | (1 << UCSZ11) | (1 << UCSZ10) | (1 << UCPOL1);
    1048:	8f e6       	ldi	r24, 0x6F	; 111
    104a:	80 93 ca 00 	sts	0x00CA, r24

	/* Send two IDLEs of 12 bits each to enable TPI interface (need at least 16 idle bits) */
	XPROGTarget_SendIdle();
    104e:	d8 df       	rcall	.-80     	; 0x1000 <XPROGTarget_SendIdle>
    1050:	d7 cf       	rjmp	.-82     	; 0x1000 <XPROGTarget_SendIdle>

00001052 <XPROGTarget_EnableTargetPDI>:
	XPROGTarget_SendIdle();
    1052:	10 92 ef 02 	sts	0x02EF, r1
}
    1056:	8a b1       	in	r24, 0x0a	; 10
void XPROGTarget_EnableTargetPDI(void)
{
	IsSending = false;

	/* Set Tx and XCK as outputs, Rx as input */
	DDRD |=  (1 << 5) | (1 << 3);
    1058:	88 62       	ori	r24, 0x28	; 40
    105a:	8a b9       	out	0x0a, r24	; 10
	DDRD &= ~(1 << 2);
    105c:	52 98       	cbi	0x0a, 2	; 10

	/* Set DATA line high for at least 90ns to disable /RESET functionality */
	PORTD |= (1 << 3);
    105e:	5b 9a       	sbi	0x0b, 3	; 11
    1060:	82 e0       	ldi	r24, 0x02	; 2
    1062:	8a 95       	dec	r24
    1064:	f1 f7       	brne	.-4      	; 0x1062 <XPROGTarget_EnableTargetPDI+0x10>
    1066:	00 c0       	rjmp	.+0      	; 0x1068 <XPROGTarget_EnableTargetPDI+0x16>
	_delay_us(1);

	/* Set up the synchronous USART for XMEGA communications - 8 data bits, even parity, 2 stop bits */
	UBRR1  = ((F_CPU / 2 / XPROG_HARDWARE_SPEED) - 1);
    1068:	8f e0       	ldi	r24, 0x0F	; 15
    106a:	90 e0       	ldi	r25, 0x00	; 0
    106c:	90 93 cd 00 	sts	0x00CD, r25
    1070:	80 93 cc 00 	sts	0x00CC, r24
	UCSR1B = (1 << TXEN1);
    1074:	88 e0       	ldi	r24, 0x08	; 8
    1076:	80 93 c9 00 	sts	0x00C9, r24
	UCSR1C = (1 << UMSEL10) | (1 << UPM11) | (1 << USBS1) | (1 << UCSZ11) | (1 << UCSZ10) | (1 << UCPOL1);
    107a:	8f e6       	ldi	r24, 0x6F	; 111
    107c:	80 93 ca 00 	sts	0x00CA, r24

	/* Send two IDLEs of 12 bits each to enable PDI interface (need at least 16 idle bits) */
	XPROGTarget_SendIdle();
    1080:	bf df       	rcall	.-130    	; 0x1000 <XPROGTarget_SendIdle>
    1082:	be cf       	rjmp	.-132    	; 0x1000 <XPROGTarget_SendIdle>

00001084 <XMEGANVM_SendAddress>:
/** Sends the given 32-bit absolute address to the target.
 *
 *  \param[in] AbsoluteAddress  Absolute address to send to the target
 */
static void XMEGANVM_SendAddress(const uint32_t AbsoluteAddress)
{
    1084:	1f 93       	push	r17
    1086:	cf 93       	push	r28
    1088:	df 93       	push	r29
    108a:	00 d0       	rcall	.+0      	; 0x108c <XMEGANVM_SendAddress+0x8>
    108c:	cd b7       	in	r28, 0x3d	; 61
    108e:	de b7       	in	r29, 0x3e	; 62
    1090:	18 2f       	mov	r17, r24
	/* Send the given 32-bit address to the target, LSB first */
	XPROGTarget_SendByte(AbsoluteAddress &  0xFF);
    1092:	86 2f       	mov	r24, r22
    1094:	79 83       	std	Y+1, r23	; 0x01
    1096:	9a 83       	std	Y+2, r25	; 0x02
    1098:	89 df       	rcall	.-238    	; 0xfac <XPROGTarget_SendByte>
    109a:	79 81       	ldd	r23, Y+1	; 0x01
	XPROGTarget_SendByte(AbsoluteAddress >> 8);
    109c:	87 2f       	mov	r24, r23
    109e:	86 df       	rcall	.-244    	; 0xfac <XPROGTarget_SendByte>
    10a0:	81 2f       	mov	r24, r17
    10a2:	84 df       	rcall	.-248    	; 0xfac <XPROGTarget_SendByte>
	XPROGTarget_SendByte(AbsoluteAddress >> 16);
    10a4:	9a 81       	ldd	r25, Y+2	; 0x02
    10a6:	89 2f       	mov	r24, r25
    10a8:	81 df       	rcall	.-254    	; 0xfac <XPROGTarget_SendByte>
	XPROGTarget_SendByte(AbsoluteAddress >> 24);
    10aa:	0f 90       	pop	r0
    10ac:	0f 90       	pop	r0
    10ae:	df 91       	pop	r29
    10b0:	cf 91       	pop	r28
}
    10b2:	1f 91       	pop	r17
    10b4:	08 95       	ret

000010b6 <XMEGANVM_SendNVMRegAddress>:
    10b6:	90 e0       	ldi	r25, 0x00	; 0
    10b8:	a0 e0       	ldi	r26, 0x00	; 0
    10ba:	b0 e0       	ldi	r27, 0x00	; 0
    10bc:	40 91 86 01 	lds	r20, 0x0186
 *  \param[in] Register  NVM register whose absolute address is to be sent
 */
static void XMEGANVM_SendNVMRegAddress(const uint8_t Register)
{
	/* Determine the absolute register address from the NVM base memory address and the NVM register address */
	uint32_t Address = XPROG_Param_NVMBase | Register;
    10c0:	50 91 87 01 	lds	r21, 0x0187
    10c4:	60 91 88 01 	lds	r22, 0x0188
    10c8:	70 91 89 01 	lds	r23, 0x0189
    10cc:	84 2b       	or	r24, r20
    10ce:	95 2b       	or	r25, r21
    10d0:	a6 2b       	or	r26, r22
    10d2:	b7 2b       	or	r27, r23

	/* Send the calculated 32-bit address to the target, LSB first */
	XMEGANVM_SendAddress(Address);
    10d4:	bc 01       	movw	r22, r24
    10d6:	cd 01       	movw	r24, r26
    10d8:	d5 cf       	rjmp	.-86     	; 0x1084 <XMEGANVM_SendAddress>

000010da <XMEGANVM_WaitWhileNVMBusBusy>:
    10da:	80 e8       	ldi	r24, 0x80	; 128
}
    10dc:	67 df       	rcall	.-306    	; 0xfac <XPROGTarget_SendByte>
{
	/* Poll the STATUS register to check to see if NVM access has been enabled */
	for (;;)
	{
		/* Send the LDCS command to read the PDI STATUS register to see the NVM bus is active */
		XPROGTarget_SendByte(PDI_CMD_LDCS | PDI_STATUS_REG);
    10de:	81 df       	rcall	.-254    	; 0xfe2 <XPROGTarget_ReceiveByte>

		uint8_t StatusRegister = XPROGTarget_ReceiveByte();
    10e0:	9a b5       	in	r25, 0x2a	; 42
    10e2:	99 23       	and	r25, r25

		/* We might have timed out waiting for the status register read response, check here */
		if (!(TimeoutTicksRemaining))
    10e4:	21 f0       	breq	.+8      	; 0x10ee <XMEGANVM_WaitWhileNVMBusBusy+0x14>
    10e6:	81 ff       	sbrs	r24, 1
    10e8:	f8 cf       	rjmp	.-16     	; 0x10da <XMEGANVM_WaitWhileNVMBusBusy>
		  return false;

		/* Check the status register read response to see if the NVM bus is enabled */
		if (StatusRegister & PDI_STATUS_NVM)
    10ea:	81 e0       	ldi	r24, 0x01	; 1
    10ec:	08 95       	ret
		  return true;
    10ee:	80 e0       	ldi	r24, 0x00	; 0
    10f0:	08 95       	ret

000010f2 <XMEGANVM_WaitWhileNVMControllerBusy>:

		uint8_t StatusRegister = XPROGTarget_ReceiveByte();

		/* We might have timed out waiting for the status register read response, check here */
		if (!(TimeoutTicksRemaining))
		  return false;
    10f2:	8b e6       	ldi	r24, 0x6B	; 107

		/* Check the status register read response to see if the NVM bus is enabled */
		if (StatusRegister & PDI_STATUS_NVM)
		  return true;
	}
}
    10f4:	5b df       	rcall	.-330    	; 0xfac <XPROGTarget_SendByte>
 *  \return Boolean true if the NVM controller became ready within the timeout period, false otherwise
 */
bool XMEGANVM_WaitWhileNVMControllerBusy(void)
{
	/* Preload the pointer register with the NVM STATUS register address to check the BUSY flag */
	XPROGTarget_SendByte(PDI_CMD_ST | (PDI_POINTER_DIRECT << 2) | PDI_DATSIZE_4BYTES);
    10f6:	8f e0       	ldi	r24, 0x0F	; 15
	XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_STATUS);
    10f8:	de df       	rcall	.-68     	; 0x10b6 <XMEGANVM_SendNVMRegAddress>
    10fa:	80 e2       	ldi	r24, 0x20	; 32
    10fc:	57 df       	rcall	.-338    	; 0xfac <XPROGTarget_SendByte>

	/* Poll the NVM STATUS register while the NVM controller is busy */
	for (;;)
	{
		/* Fetch the current status value via the pointer register (without auto-increment afterwards) */
		XPROGTarget_SendByte(PDI_CMD_LD | (PDI_POINTER_INDIRECT << 2) | PDI_DATSIZE_1BYTE);
    10fe:	71 df       	rcall	.-286    	; 0xfe2 <XPROGTarget_ReceiveByte>
    1100:	9a b5       	in	r25, 0x2a	; 42
    1102:	99 23       	and	r25, r25

		uint8_t StatusRegister = XPROGTarget_ReceiveByte();
    1104:	21 f0       	breq	.+8      	; 0x110e <XMEGANVM_WaitWhileNVMControllerBusy+0x1c>
    1106:	87 fd       	sbrc	r24, 7

		/* We might have timed out waiting for the status register read response, check here */
		if (!(TimeoutTicksRemaining))
    1108:	f8 cf       	rjmp	.-16     	; 0x10fa <XMEGANVM_WaitWhileNVMControllerBusy+0x8>
    110a:	81 e0       	ldi	r24, 0x01	; 1
    110c:	08 95       	ret
		  return false;

		/* Check to see if the BUSY flag is still set */
		if (!(StatusRegister & (1 << 7)))
    110e:	80 e0       	ldi	r24, 0x00	; 0
    1110:	08 95       	ret

00001112 <XMEGANVM_EnablePDI>:
		  return true;
    1112:	cf 92       	push	r12
    1114:	df 92       	push	r13

		uint8_t StatusRegister = XPROGTarget_ReceiveByte();

		/* We might have timed out waiting for the status register read response, check here */
		if (!(TimeoutTicksRemaining))
		  return false;
    1116:	ef 92       	push	r14

		/* Check to see if the BUSY flag is still set */
		if (!(StatusRegister & (1 << 7)))
		  return true;
	}
}
    1118:	ff 92       	push	r15
/** Enables the physical PDI interface on the target and enables access to the internal NVM controller.
 *
 *  \return Boolean true if the PDI interface was enabled successfully, false otherwise
 */
bool XMEGANVM_EnablePDI(void)
{
    111a:	0f 93       	push	r16
    111c:	1f 93       	push	r17
    111e:	cf 93       	push	r28
    1120:	df 93       	push	r29
    1122:	cd b7       	in	r28, 0x3d	; 61
    1124:	de b7       	in	r29, 0x3e	; 62
    1126:	28 97       	sbiw	r28, 0x08	; 8
    1128:	0f b6       	in	r0, 0x3f	; 63
    112a:	f8 94       	cli
    112c:	de bf       	out	0x3e, r29	; 62
    112e:	0f be       	out	0x3f, r0	; 63
    1130:	cd bf       	out	0x3d, r28	; 61
	/* Enable PDI programming mode with the attached target */
	XPROGTarget_EnableTargetPDI();
    1132:	8f df       	rcall	.-226    	; 0x1052 <XPROGTarget_EnableTargetPDI>
    1134:	81 ec       	ldi	r24, 0xC1	; 193

	/* Store the RESET key into the RESET PDI register to keep the XMEGA in reset */
	XPROGTarget_SendByte(PDI_CMD_STCS | PDI_RESET_REG);
    1136:	3a df       	rcall	.-396    	; 0xfac <XPROGTarget_SendByte>
    1138:	89 e5       	ldi	r24, 0x59	; 89
    113a:	38 df       	rcall	.-400    	; 0xfac <XPROGTarget_SendByte>
	XPROGTarget_SendByte(PDI_RESET_KEY);
    113c:	82 ec       	ldi	r24, 0xC2	; 194
    113e:	36 df       	rcall	.-404    	; 0xfac <XPROGTarget_SendByte>
    1140:	82 e0       	ldi	r24, 0x02	; 2

	/* Lower direction change guard time to 32 USART bits */
	XPROGTarget_SendByte(PDI_CMD_STCS | PDI_CTRL_REG);
    1142:	34 df       	rcall	.-408    	; 0xfac <XPROGTarget_SendByte>
    1144:	80 ee       	ldi	r24, 0xE0	; 224
    1146:	32 df       	rcall	.-412    	; 0xfac <XPROGTarget_SendByte>
	XPROGTarget_SendByte(0x02);
    1148:	8e 01       	movw	r16, r28
    114a:	07 5f       	subi	r16, 0xF7	; 247
    114c:	1f 4f       	sbci	r17, 0xFF	; 255

	/* Enable access to the XPROG NVM bus by sending the documented NVM access key to the device */
	XPROGTarget_SendByte(PDI_CMD_KEY);
    114e:	7e 01       	movw	r14, r28
    1150:	08 94       	sec
    1152:	e1 1c       	adc	r14, r1
    1154:	f1 1c       	adc	r15, r1
    1156:	67 01       	movw	r12, r14
    1158:	f6 01       	movw	r30, r12

/** Enables the physical PDI interface on the target and enables access to the internal NVM controller.
 *
 *  \return Boolean true if the PDI interface was enabled successfully, false otherwise
 */
bool XMEGANVM_EnablePDI(void)
    115a:	ac ea       	ldi	r26, 0xAC	; 172
    115c:	b1 e0       	ldi	r27, 0x01	; 1
    115e:	88 e0       	ldi	r24, 0x08	; 8
    1160:	0d 90       	ld	r0, X+
	XPROGTarget_SendByte(0x02);

	/* Enable access to the XPROG NVM bus by sending the documented NVM access key to the device */
	XPROGTarget_SendByte(PDI_CMD_KEY);
	for (uint8_t i = sizeof(PDI_NVMENABLE_KEY); i > 0; i--)
	  XPROGTarget_SendByte(PDI_NVMENABLE_KEY[i - 1]);
    1162:	01 92       	st	Z+, r0
    1164:	81 50       	subi	r24, 0x01	; 1
    1166:	e1 f7       	brne	.-8      	; 0x1160 <XMEGANVM_EnablePDI+0x4e>
    1168:	f8 01       	movw	r30, r16
    116a:	82 91       	ld	r24, -Z
    116c:	8f 01       	movw	r16, r30
    116e:	1e df       	rcall	.-452    	; 0xfac <XPROGTarget_SendByte>
    1170:	0e 15       	cp	r16, r14
    1172:	1f 05       	cpc	r17, r15
    1174:	89 f7       	brne	.-30     	; 0x1158 <XMEGANVM_EnablePDI+0x46>
    1176:	b1 df       	rcall	.-158    	; 0x10da <XMEGANVM_WaitWhileNVMBusBusy>
    1178:	28 96       	adiw	r28, 0x08	; 8
    117a:	0f b6       	in	r0, 0x3f	; 63
    117c:	f8 94       	cli
	XPROGTarget_SendByte(PDI_CMD_STCS | PDI_CTRL_REG);
	XPROGTarget_SendByte(0x02);

	/* Enable access to the XPROG NVM bus by sending the documented NVM access key to the device */
	XPROGTarget_SendByte(PDI_CMD_KEY);
	for (uint8_t i = sizeof(PDI_NVMENABLE_KEY); i > 0; i--)
    117e:	de bf       	out	0x3e, r29	; 62
    1180:	0f be       	out	0x3f, r0	; 63
    1182:	cd bf       	out	0x3d, r28	; 61
	  XPROGTarget_SendByte(PDI_NVMENABLE_KEY[i - 1]);

	/* Wait until the NVM bus becomes active */
	return XMEGANVM_WaitWhileNVMBusBusy();
    1184:	df 91       	pop	r29
    1186:	cf 91       	pop	r28
}
    1188:	1f 91       	pop	r17
    118a:	0f 91       	pop	r16
    118c:	ff 90       	pop	r15
    118e:	ef 90       	pop	r14
    1190:	df 90       	pop	r13
    1192:	cf 90       	pop	r12
    1194:	08 95       	ret

00001196 <XMEGANVM_DisablePDI>:
    1196:	a1 df       	rcall	.-190    	; 0x10da <XMEGANVM_WaitWhileNVMBusBusy>
    1198:	81 ec       	ldi	r24, 0xC1	; 193
    119a:	08 df       	rcall	.-496    	; 0xfac <XPROGTarget_SendByte>
    119c:	80 e0       	ldi	r24, 0x00	; 0
    119e:	06 df       	rcall	.-500    	; 0xfac <XPROGTarget_SendByte>
    11a0:	81 e8       	ldi	r24, 0x81	; 129
    11a2:	04 df       	rcall	.-504    	; 0xfac <XPROGTarget_SendByte>
    11a4:	1e df       	rcall	.-452    	; 0xfe2 <XPROGTarget_ReceiveByte>
		/* Clear reset register */
		XPROGTarget_SendByte(PDI_CMD_STCS | PDI_RESET_REG);
		XPROGTarget_SendByte(0x00);

		/* Read back the reset register, check to see if it took effect */
		XPROGTarget_SendByte(PDI_CMD_LDCS | PDI_RESET_REG);
    11a6:	88 23       	and	r24, r24
    11a8:	b9 f7       	brne	.-18     	; 0x1198 <XMEGANVM_DisablePDI+0x2>
    11aa:	d6 ce       	rjmp	.-596    	; 0xf58 <XPROGTarget_DisableTargetPDI>

000011ac <XMEGANVM_GetMemoryCRC>:
	} while (XPROGTarget_ReceiveByte() != 0x00);
    11ac:	1f 93       	push	r17
    11ae:	cf 93       	push	r28
    11b0:	df 93       	push	r29
    11b2:	18 2f       	mov	r17, r24

	XPROGTarget_DisableTargetPDI();
    11b4:	eb 01       	movw	r28, r22
    11b6:	18 82       	st	Y, r1
}
    11b8:	19 82       	std	Y+1, r1	; 0x01
 *  \return Boolean true if the command sequence complete successfully
 */
bool XMEGANVM_GetMemoryCRC(const uint8_t CRCCommand,
                           uint32_t* const CRCDest)
{
	*CRCDest = 0;
    11ba:	1a 82       	std	Y+2, r1	; 0x02
    11bc:	1b 82       	std	Y+3, r1	; 0x03

	/* Wait until the NVM controller is no longer busy */
	if (!(XMEGANVM_WaitWhileNVMControllerBusy()))
    11be:	99 df       	rcall	.-206    	; 0x10f2 <XMEGANVM_WaitWhileNVMControllerBusy>
    11c0:	88 23       	and	r24, r24
    11c2:	31 f1       	breq	.+76     	; 0x1210 <XMEGANVM_GetMemoryCRC+0x64>
    11c4:	8c e4       	ldi	r24, 0x4C	; 76
	  return false;

	/* Set the NVM command to the correct CRC read command */
	XPROGTarget_SendByte(PDI_CMD_STS | (PDI_DATSIZE_4BYTES << 2));
    11c6:	f2 de       	rcall	.-540    	; 0xfac <XPROGTarget_SendByte>
    11c8:	8a e0       	ldi	r24, 0x0A	; 10
    11ca:	75 df       	rcall	.-278    	; 0x10b6 <XMEGANVM_SendNVMRegAddress>
	XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_CMD);
    11cc:	81 2f       	mov	r24, r17
    11ce:	ee de       	rcall	.-548    	; 0xfac <XPROGTarget_SendByte>
    11d0:	8c e4       	ldi	r24, 0x4C	; 76
	XPROGTarget_SendByte(CRCCommand);
    11d2:	ec de       	rcall	.-552    	; 0xfac <XPROGTarget_SendByte>
    11d4:	8b e0       	ldi	r24, 0x0B	; 11
    11d6:	6f df       	rcall	.-290    	; 0x10b6 <XMEGANVM_SendNVMRegAddress>

	/* Set CMDEX bit in NVM CTRLA register to start the CRC generation */
	XPROGTarget_SendByte(PDI_CMD_STS | (PDI_DATSIZE_4BYTES << 2));
    11d8:	81 e0       	ldi	r24, 0x01	; 1
    11da:	e8 de       	rcall	.-560    	; 0xfac <XPROGTarget_SendByte>
    11dc:	7e df       	rcall	.-260    	; 0x10da <XMEGANVM_WaitWhileNVMBusBusy>
	XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_CTRLA);
    11de:	88 23       	and	r24, r24
    11e0:	b9 f0       	breq	.+46     	; 0x1210 <XMEGANVM_GetMemoryCRC+0x64>
    11e2:	87 df       	rcall	.-242    	; 0x10f2 <XMEGANVM_WaitWhileNVMControllerBusy>
	XPROGTarget_SendByte(XMEGA_NVM_BIT_CTRLA_CMDEX);
    11e4:	88 23       	and	r24, r24
    11e6:	a1 f0       	breq	.+40     	; 0x1210 <XMEGANVM_GetMemoryCRC+0x64>
    11e8:	8b e6       	ldi	r24, 0x6B	; 107

	/* Wait until the NVM bus is ready again */
	if (!(XMEGANVM_WaitWhileNVMBusBusy()))
    11ea:	e0 de       	rcall	.-576    	; 0xfac <XPROGTarget_SendByte>
    11ec:	84 e0       	ldi	r24, 0x04	; 4
    11ee:	63 df       	rcall	.-314    	; 0x10b6 <XMEGANVM_SendNVMRegAddress>
    11f0:	80 ea       	ldi	r24, 0xA0	; 160
	  return false;

	/* Wait until the NVM controller is no longer busy */
	if (!(XMEGANVM_WaitWhileNVMControllerBusy()))
    11f2:	dc de       	rcall	.-584    	; 0xfac <XPROGTarget_SendByte>
    11f4:	82 e0       	ldi	r24, 0x02	; 2
    11f6:	da de       	rcall	.-588    	; 0xfac <XPROGTarget_SendByte>
    11f8:	84 e2       	ldi	r24, 0x24	; 36
	  return false;

	/* Load the PDI pointer register with the DAT0 register start address */
	XPROGTarget_SendByte(PDI_CMD_ST | (PDI_POINTER_DIRECT << 2) | PDI_DATSIZE_4BYTES);
    11fa:	d8 de       	rcall	.-592    	; 0xfac <XPROGTarget_SendByte>
    11fc:	f2 de       	rcall	.-540    	; 0xfe2 <XPROGTarget_ReceiveByte>
    11fe:	88 83       	st	Y, r24
	XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_DAT0);
    1200:	f0 de       	rcall	.-544    	; 0xfe2 <XPROGTarget_ReceiveByte>
    1202:	89 83       	std	Y+1, r24	; 0x01
    1204:	ee de       	rcall	.-548    	; 0xfe2 <XPROGTarget_ReceiveByte>

	/* Send the REPEAT command to grab the CRC bytes */
	XPROGTarget_SendByte(PDI_CMD_REPEAT | PDI_DATSIZE_1BYTE);
    1206:	8a 83       	std	Y+2, r24	; 0x02
    1208:	9a b5       	in	r25, 0x2a	; 42
    120a:	81 e0       	ldi	r24, 0x01	; 1
	XPROGTarget_SendByte(XMEGA_CRC_LENGTH_BYTES - 1);
    120c:	99 23       	and	r25, r25
    120e:	09 f4       	brne	.+2      	; 0x1212 <XMEGANVM_GetMemoryCRC+0x66>
    1210:	80 e0       	ldi	r24, 0x00	; 0

	/* Read in the CRC bytes from the target */
	XPROGTarget_SendByte(PDI_CMD_LD | (PDI_POINTER_INDIRECT_PI << 2) | PDI_DATSIZE_1BYTE);
    1212:	df 91       	pop	r29
    1214:	cf 91       	pop	r28
    1216:	1f 91       	pop	r17
	for (uint8_t i = 0; i < XMEGA_CRC_LENGTH_BYTES; i++)
	  ((uint8_t*)CRCDest)[i] = XPROGTarget_ReceiveByte();
    1218:	08 95       	ret

0000121a <XMEGANVM_ReadMemory>:
    121a:	cf 92       	push	r12
    121c:	df 92       	push	r13
    121e:	ef 92       	push	r14
    1220:	ff 92       	push	r15
    1222:	0f 93       	push	r16
    1224:	1f 93       	push	r17
    1226:	cf 93       	push	r28
    1228:	df 93       	push	r29

	return (TimeoutTicksRemaining > 0);
    122a:	6b 01       	movw	r12, r22
    122c:	7c 01       	movw	r14, r24
    122e:	8a 01       	movw	r16, r20
    1230:	e9 01       	movw	r28, r18
	if (!(XMEGANVM_WaitWhileNVMBusBusy()))
	  return false;

	/* Wait until the NVM controller is no longer busy */
	if (!(XMEGANVM_WaitWhileNVMControllerBusy()))
	  return false;
    1232:	5f df       	rcall	.-322    	; 0x10f2 <XMEGANVM_WaitWhileNVMControllerBusy>
	XPROGTarget_SendByte(PDI_CMD_LD | (PDI_POINTER_INDIRECT_PI << 2) | PDI_DATSIZE_1BYTE);
	for (uint8_t i = 0; i < XMEGA_CRC_LENGTH_BYTES; i++)
	  ((uint8_t*)CRCDest)[i] = XPROGTarget_ReceiveByte();

	return (TimeoutTicksRemaining > 0);
}
    1234:	88 23       	and	r24, r24
    1236:	09 f1       	breq	.+66     	; 0x127a <XMEGANVM_ReadMemory+0x60>
    1238:	8c e4       	ldi	r24, 0x4C	; 76
    123a:	b8 de       	rcall	.-656    	; 0xfac <XPROGTarget_SendByte>
	/* Wait until the NVM controller is no longer busy */
	if (!(XMEGANVM_WaitWhileNVMControllerBusy()))
	  return false;

	/* Send the READNVM command to the NVM controller for reading of an arbitrary location */
	XPROGTarget_SendByte(PDI_CMD_STS | (PDI_DATSIZE_4BYTES << 2));
    123c:	8a e0       	ldi	r24, 0x0A	; 10
    123e:	3b df       	rcall	.-394    	; 0x10b6 <XMEGANVM_SendNVMRegAddress>
	XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_CMD);
    1240:	83 e4       	ldi	r24, 0x43	; 67
    1242:	b4 de       	rcall	.-664    	; 0xfac <XPROGTarget_SendByte>
    1244:	8b e6       	ldi	r24, 0x6B	; 107
	XPROGTarget_SendByte(XMEGA_NVM_CMD_READNVM);
    1246:	b2 de       	rcall	.-668    	; 0xfac <XPROGTarget_SendByte>
    1248:	c7 01       	movw	r24, r14
    124a:	b6 01       	movw	r22, r12

	/* Load the PDI pointer register with the start address we want to read from */
	XPROGTarget_SendByte(PDI_CMD_ST | (PDI_POINTER_DIRECT << 2) | PDI_DATSIZE_4BYTES);
    124c:	1b df       	rcall	.-458    	; 0x1084 <XMEGANVM_SendAddress>
    124e:	80 ea       	ldi	r24, 0xA0	; 160
    1250:	ad de       	rcall	.-678    	; 0xfac <XPROGTarget_SendByte>
	XMEGANVM_SendAddress(ReadAddress);
    1252:	8c 2f       	mov	r24, r28
    1254:	81 50       	subi	r24, 0x01	; 1
    1256:	aa de       	rcall	.-684    	; 0xfac <XPROGTarget_SendByte>
    1258:	84 e2       	ldi	r24, 0x24	; 36

	/* Send the REPEAT command with the specified number of bytes to read */
	XPROGTarget_SendByte(PDI_CMD_REPEAT | PDI_DATSIZE_1BYTE);
    125a:	a8 de       	rcall	.-688    	; 0xfac <XPROGTarget_SendByte>
    125c:	04 c0       	rjmp	.+8      	; 0x1266 <XMEGANVM_ReadMemory+0x4c>
    125e:	c1 de       	rcall	.-638    	; 0xfe2 <XPROGTarget_ReceiveByte>
	XPROGTarget_SendByte(ReadSize - 1);
    1260:	f8 01       	movw	r30, r16
    1262:	81 93       	st	Z+, r24
    1264:	8f 01       	movw	r16, r30
    1266:	20 97       	sbiw	r28, 0x00	; 0

	/* Send a LD command with indirect access and post-increment to read out the bytes */
	XPROGTarget_SendByte(PDI_CMD_LD | (PDI_POINTER_INDIRECT_PI << 2) | PDI_DATSIZE_1BYTE);
    1268:	21 f0       	breq	.+8      	; 0x1272 <XMEGANVM_ReadMemory+0x58>
    126a:	8a b5       	in	r24, 0x2a	; 42
    126c:	21 97       	sbiw	r28, 0x01	; 1
	while (ReadSize-- && TimeoutTicksRemaining)
    126e:	88 23       	and	r24, r24
	  *(ReadBuffer++) = XPROGTarget_ReceiveByte();
    1270:	b1 f7       	brne	.-20     	; 0x125e <XMEGANVM_ReadMemory+0x44>
    1272:	9a b5       	in	r25, 0x2a	; 42
    1274:	81 e0       	ldi	r24, 0x01	; 1
    1276:	99 23       	and	r25, r25
    1278:	09 f4       	brne	.+2      	; 0x127c <XMEGANVM_ReadMemory+0x62>
	XPROGTarget_SendByte(PDI_CMD_REPEAT | PDI_DATSIZE_1BYTE);
	XPROGTarget_SendByte(ReadSize - 1);

	/* Send a LD command with indirect access and post-increment to read out the bytes */
	XPROGTarget_SendByte(PDI_CMD_LD | (PDI_POINTER_INDIRECT_PI << 2) | PDI_DATSIZE_1BYTE);
	while (ReadSize-- && TimeoutTicksRemaining)
    127a:	80 e0       	ldi	r24, 0x00	; 0
    127c:	df 91       	pop	r29
    127e:	cf 91       	pop	r28
    1280:	1f 91       	pop	r17
    1282:	0f 91       	pop	r16
    1284:	ff 90       	pop	r15
	  *(ReadBuffer++) = XPROGTarget_ReceiveByte();

	return (TimeoutTicksRemaining > 0);
    1286:	ef 90       	pop	r14
    1288:	df 90       	pop	r13
    128a:	cf 90       	pop	r12
    128c:	08 95       	ret

0000128e <XMEGANVM_WriteByteMemory>:
                         uint8_t* ReadBuffer,
                         uint16_t ReadSize)
{
	/* Wait until the NVM controller is no longer busy */
	if (!(XMEGANVM_WaitWhileNVMControllerBusy()))
	  return false;
    128e:	cf 92       	push	r12
	XPROGTarget_SendByte(PDI_CMD_LD | (PDI_POINTER_INDIRECT_PI << 2) | PDI_DATSIZE_1BYTE);
	while (ReadSize-- && TimeoutTicksRemaining)
	  *(ReadBuffer++) = XPROGTarget_ReceiveByte();

	return (TimeoutTicksRemaining > 0);
}
    1290:	df 92       	push	r13
    1292:	ef 92       	push	r14
    1294:	ff 92       	push	r15
    1296:	cf 93       	push	r28
    1298:	df 93       	push	r29
    129a:	c8 2f       	mov	r28, r24
    129c:	6a 01       	movw	r12, r20
    129e:	7b 01       	movw	r14, r22
    12a0:	d2 2f       	mov	r29, r18
bool XMEGANVM_WriteByteMemory(const uint8_t WriteCommand,
                              const uint32_t WriteAddress,
                              const uint8_t Byte)
{
	/* Wait until the NVM controller is no longer busy */
	if (!(XMEGANVM_WaitWhileNVMControllerBusy()))
    12a2:	27 df       	rcall	.-434    	; 0x10f2 <XMEGANVM_WaitWhileNVMControllerBusy>
    12a4:	88 23       	and	r24, r24
    12a6:	79 f0       	breq	.+30     	; 0x12c6 <XMEGANVM_WriteByteMemory+0x38>
    12a8:	8c e4       	ldi	r24, 0x4C	; 76
	  return false;

	/* Send the memory write command to the target */
	XPROGTarget_SendByte(PDI_CMD_STS | (PDI_DATSIZE_4BYTES << 2));
    12aa:	80 de       	rcall	.-768    	; 0xfac <XPROGTarget_SendByte>
    12ac:	8a e0       	ldi	r24, 0x0A	; 10
    12ae:	03 df       	rcall	.-506    	; 0x10b6 <XMEGANVM_SendNVMRegAddress>
	XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_CMD);
    12b0:	8c 2f       	mov	r24, r28
    12b2:	7c de       	rcall	.-776    	; 0xfac <XPROGTarget_SendByte>
    12b4:	8c e4       	ldi	r24, 0x4C	; 76
	XPROGTarget_SendByte(WriteCommand);
    12b6:	7a de       	rcall	.-780    	; 0xfac <XPROGTarget_SendByte>
    12b8:	c7 01       	movw	r24, r14
    12ba:	b6 01       	movw	r22, r12

	/* Send new memory byte to the memory of the target */
	XPROGTarget_SendByte(PDI_CMD_STS | (PDI_DATSIZE_4BYTES << 2));
    12bc:	e3 de       	rcall	.-570    	; 0x1084 <XMEGANVM_SendAddress>
    12be:	8d 2f       	mov	r24, r29
    12c0:	75 de       	rcall	.-790    	; 0xfac <XPROGTarget_SendByte>
	XMEGANVM_SendAddress(WriteAddress);
    12c2:	81 e0       	ldi	r24, 0x01	; 1
    12c4:	01 c0       	rjmp	.+2      	; 0x12c8 <XMEGANVM_WriteByteMemory+0x3a>
    12c6:	80 e0       	ldi	r24, 0x00	; 0
    12c8:	df 91       	pop	r29
	XPROGTarget_SendByte(Byte);
    12ca:	cf 91       	pop	r28
    12cc:	ff 90       	pop	r15
    12ce:	ef 90       	pop	r14

	return true;
    12d0:	df 90       	pop	r13
    12d2:	cf 90       	pop	r12
                              const uint32_t WriteAddress,
                              const uint8_t Byte)
{
	/* Wait until the NVM controller is no longer busy */
	if (!(XMEGANVM_WaitWhileNVMControllerBusy()))
	  return false;
    12d4:	08 95       	ret

000012d6 <XMEGANVM_WritePageMemory>:
	XPROGTarget_SendByte(PDI_CMD_STS | (PDI_DATSIZE_4BYTES << 2));
	XMEGANVM_SendAddress(WriteAddress);
	XPROGTarget_SendByte(Byte);

	return true;
}
    12d6:	3f 92       	push	r3
    12d8:	4f 92       	push	r4
    12da:	5f 92       	push	r5
    12dc:	6f 92       	push	r6
    12de:	7f 92       	push	r7
    12e0:	8f 92       	push	r8
    12e2:	9f 92       	push	r9
                              const uint8_t WritePageCommand,
                              const uint8_t PageMode,
                              const uint32_t WriteAddress,
                              const uint8_t* WriteBuffer,
                              uint16_t WriteSize)
{
    12e4:	af 92       	push	r10
    12e6:	bf 92       	push	r11
    12e8:	cf 92       	push	r12
    12ea:	df 92       	push	r13
    12ec:	ef 92       	push	r14
    12ee:	ff 92       	push	r15
    12f0:	0f 93       	push	r16
    12f2:	1f 93       	push	r17
    12f4:	cf 93       	push	r28
    12f6:	df 93       	push	r29
    12f8:	88 2e       	mov	r8, r24
    12fa:	96 2e       	mov	r9, r22
    12fc:	34 2e       	mov	r3, r20
    12fe:	27 01       	movw	r4, r14
    1300:	38 01       	movw	r6, r16
    1302:	e6 01       	movw	r28, r12
	if (PageMode & XPRG_PAGEMODE_ERASE)
    1304:	12 2f       	mov	r17, r18
    1306:	20 ff       	sbrs	r18, 0
    1308:	10 c0       	rjmp	.+32     	; 0x132a <XMEGANVM_WritePageMemory+0x54>
	{
		/* Wait until the NVM controller is no longer busy */
		if (!(XMEGANVM_WaitWhileNVMControllerBusy()))
    130a:	f3 de       	rcall	.-538    	; 0x10f2 <XMEGANVM_WaitWhileNVMControllerBusy>
    130c:	88 23       	and	r24, r24
    130e:	09 f4       	brne	.+2      	; 0x1312 <XMEGANVM_WritePageMemory+0x3c>
    1310:	40 c0       	rjmp	.+128    	; 0x1392 <XMEGANVM_WritePageMemory+0xbc>
    1312:	8c e4       	ldi	r24, 0x4C	; 76
		  return false;

		/* Send the memory buffer erase command to the target */
		XPROGTarget_SendByte(PDI_CMD_STS | (PDI_DATSIZE_4BYTES << 2));
    1314:	4b de       	rcall	.-874    	; 0xfac <XPROGTarget_SendByte>
    1316:	8a e0       	ldi	r24, 0x0A	; 10
    1318:	ce de       	rcall	.-612    	; 0x10b6 <XMEGANVM_SendNVMRegAddress>
		XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_CMD);
    131a:	89 2d       	mov	r24, r9
    131c:	47 de       	rcall	.-882    	; 0xfac <XPROGTarget_SendByte>
    131e:	8c e4       	ldi	r24, 0x4C	; 76
		XPROGTarget_SendByte(EraseBuffCommand);
    1320:	45 de       	rcall	.-886    	; 0xfac <XPROGTarget_SendByte>
    1322:	8b e0       	ldi	r24, 0x0B	; 11
    1324:	c8 de       	rcall	.-624    	; 0x10b6 <XMEGANVM_SendNVMRegAddress>

		/* Set CMDEX bit in NVM CTRLA register to start the buffer erase */
		XPROGTarget_SendByte(PDI_CMD_STS | (PDI_DATSIZE_4BYTES << 2));
    1326:	81 e0       	ldi	r24, 0x01	; 1
    1328:	41 de       	rcall	.-894    	; 0xfac <XPROGTarget_SendByte>
    132a:	a1 14       	cp	r10, r1
		XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_CTRLA);
    132c:	b1 04       	cpc	r11, r1
    132e:	e9 f0       	breq	.+58     	; 0x136a <XMEGANVM_WritePageMemory+0x94>
    1330:	e0 de       	rcall	.-576    	; 0x10f2 <XMEGANVM_WaitWhileNVMControllerBusy>
		XPROGTarget_SendByte(XMEGA_NVM_BIT_CTRLA_CMDEX);
    1332:	88 23       	and	r24, r24
    1334:	71 f1       	breq	.+92     	; 0x1392 <XMEGANVM_WritePageMemory+0xbc>
    1336:	8c e4       	ldi	r24, 0x4C	; 76
	}

	if (WriteSize)
    1338:	39 de       	rcall	.-910    	; 0xfac <XPROGTarget_SendByte>
    133a:	8a e0       	ldi	r24, 0x0A	; 10
    133c:	bc de       	rcall	.-648    	; 0x10b6 <XMEGANVM_SendNVMRegAddress>
	{
		/* Wait until the NVM controller is no longer busy */
		if (!(XMEGANVM_WaitWhileNVMControllerBusy()))
    133e:	88 2d       	mov	r24, r8
    1340:	35 de       	rcall	.-918    	; 0xfac <XPROGTarget_SendByte>
    1342:	8b e6       	ldi	r24, 0x6B	; 107
    1344:	33 de       	rcall	.-922    	; 0xfac <XPROGTarget_SendByte>
		  return false;

		/* Send the memory buffer write command to the target */
		XPROGTarget_SendByte(PDI_CMD_STS | (PDI_DATSIZE_4BYTES << 2));
    1346:	c3 01       	movw	r24, r6
    1348:	b2 01       	movw	r22, r4
    134a:	9c de       	rcall	.-712    	; 0x1084 <XMEGANVM_SendAddress>
		XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_CMD);
    134c:	80 ea       	ldi	r24, 0xA0	; 160
    134e:	2e de       	rcall	.-932    	; 0xfac <XPROGTarget_SendByte>
    1350:	8a 2d       	mov	r24, r10
		XPROGTarget_SendByte(WriteBuffCommand);
    1352:	81 50       	subi	r24, 0x01	; 1
    1354:	2b de       	rcall	.-938    	; 0xfac <XPROGTarget_SendByte>
    1356:	84 e6       	ldi	r24, 0x64	; 100

		/* Load the PDI pointer register with the start address we want to write to */
		XPROGTarget_SendByte(PDI_CMD_ST | (PDI_POINTER_DIRECT << 2) | PDI_DATSIZE_4BYTES);
    1358:	29 de       	rcall	.-942    	; 0xfac <XPROGTarget_SendByte>
    135a:	89 91       	ld	r24, Y+
    135c:	27 de       	rcall	.-946    	; 0xfac <XPROGTarget_SendByte>
		XMEGANVM_SendAddress(WriteAddress);
    135e:	08 94       	sec
    1360:	a1 08       	sbc	r10, r1
    1362:	b1 08       	sbc	r11, r1
    1364:	a1 14       	cp	r10, r1

		/* Send the REPEAT command with the specified number of bytes to write */
		XPROGTarget_SendByte(PDI_CMD_REPEAT | PDI_DATSIZE_1BYTE);
    1366:	b1 04       	cpc	r11, r1
    1368:	c1 f7       	brne	.-16     	; 0x135a <XMEGANVM_WritePageMemory+0x84>
    136a:	11 ff       	sbrs	r17, 1
		XPROGTarget_SendByte(WriteSize - 1);
    136c:	10 c0       	rjmp	.+32     	; 0x138e <XMEGANVM_WritePageMemory+0xb8>
    136e:	c1 de       	rcall	.-638    	; 0x10f2 <XMEGANVM_WaitWhileNVMControllerBusy>
    1370:	88 23       	and	r24, r24
    1372:	79 f0       	breq	.+30     	; 0x1392 <XMEGANVM_WritePageMemory+0xbc>

		/* Send a ST command with indirect access and post-increment to write the bytes */
		XPROGTarget_SendByte(PDI_CMD_ST | (PDI_POINTER_INDIRECT_PI << 2) | PDI_DATSIZE_1BYTE);
    1374:	8c e4       	ldi	r24, 0x4C	; 76
    1376:	1a de       	rcall	.-972    	; 0xfac <XPROGTarget_SendByte>
    1378:	8a e0       	ldi	r24, 0x0A	; 10
		while (WriteSize--)
		  XPROGTarget_SendByte(*(WriteBuffer++));
    137a:	9d de       	rcall	.-710    	; 0x10b6 <XMEGANVM_SendNVMRegAddress>
    137c:	83 2d       	mov	r24, r3
    137e:	16 de       	rcall	.-980    	; 0xfac <XPROGTarget_SendByte>
    1380:	8c e4       	ldi	r24, 0x4C	; 76
    1382:	14 de       	rcall	.-984    	; 0xfac <XPROGTarget_SendByte>
    1384:	c3 01       	movw	r24, r6
		XPROGTarget_SendByte(PDI_CMD_REPEAT | PDI_DATSIZE_1BYTE);
		XPROGTarget_SendByte(WriteSize - 1);

		/* Send a ST command with indirect access and post-increment to write the bytes */
		XPROGTarget_SendByte(PDI_CMD_ST | (PDI_POINTER_INDIRECT_PI << 2) | PDI_DATSIZE_1BYTE);
		while (WriteSize--)
    1386:	b2 01       	movw	r22, r4
    1388:	7d de       	rcall	.-774    	; 0x1084 <XMEGANVM_SendAddress>
    138a:	80 e0       	ldi	r24, 0x00	; 0
		  XPROGTarget_SendByte(*(WriteBuffer++));
	}

	if (PageMode & XPRG_PAGEMODE_WRITE)
    138c:	0f de       	rcall	.-994    	; 0xfac <XPROGTarget_SendByte>
    138e:	81 e0       	ldi	r24, 0x01	; 1
	{
		/* Wait until the NVM controller is no longer busy */
		if (!(XMEGANVM_WaitWhileNVMControllerBusy()))
    1390:	01 c0       	rjmp	.+2      	; 0x1394 <XMEGANVM_WritePageMemory+0xbe>
    1392:	80 e0       	ldi	r24, 0x00	; 0
    1394:	df 91       	pop	r29
    1396:	cf 91       	pop	r28
		  return false;

		/* Send the memory write command to the target */
		XPROGTarget_SendByte(PDI_CMD_STS | (PDI_DATSIZE_4BYTES << 2));
    1398:	1f 91       	pop	r17
    139a:	0f 91       	pop	r16
    139c:	ff 90       	pop	r15
		XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_CMD);
    139e:	ef 90       	pop	r14
    13a0:	df 90       	pop	r13
    13a2:	cf 90       	pop	r12
		XPROGTarget_SendByte(WritePageCommand);
    13a4:	bf 90       	pop	r11
    13a6:	af 90       	pop	r10
    13a8:	9f 90       	pop	r9

		/* Send the address of the first page location to write the memory page */
		XPROGTarget_SendByte(PDI_CMD_STS | (PDI_DATSIZE_4BYTES << 2));
    13aa:	8f 90       	pop	r8
    13ac:	7f 90       	pop	r7
    13ae:	6f 90       	pop	r6
		XMEGANVM_SendAddress(WriteAddress);
    13b0:	5f 90       	pop	r5
    13b2:	4f 90       	pop	r4
    13b4:	3f 90       	pop	r3
    13b6:	08 95       	ret

000013b8 <XMEGANVM_EraseMemory>:
		XPROGTarget_SendByte(0x00);
    13b8:	cf 92       	push	r12
    13ba:	df 92       	push	r13
    13bc:	ef 92       	push	r14
	}

	return true;
    13be:	ff 92       	push	r15
    13c0:	cf 93       	push	r28

	if (PageMode & XPRG_PAGEMODE_WRITE)
	{
		/* Wait until the NVM controller is no longer busy */
		if (!(XMEGANVM_WaitWhileNVMControllerBusy()))
		  return false;
    13c2:	c8 2f       	mov	r28, r24
		XMEGANVM_SendAddress(WriteAddress);
		XPROGTarget_SendByte(0x00);
	}

	return true;
}
    13c4:	6a 01       	movw	r12, r20
    13c6:	7b 01       	movw	r14, r22
    13c8:	94 de       	rcall	.-728    	; 0x10f2 <XMEGANVM_WaitWhileNVMControllerBusy>
    13ca:	88 23       	and	r24, r24
    13cc:	09 f4       	brne	.+2      	; 0x13d0 <XMEGANVM_EraseMemory+0x18>
    13ce:	55 c0       	rjmp	.+170    	; 0x147a <XMEGANVM_EraseMemory+0xc2>
    13d0:	8c e4       	ldi	r24, 0x4C	; 76
    13d2:	c0 34       	cpi	r28, 0x40	; 64
    13d4:	29 f4       	brne	.+10     	; 0x13e0 <XMEGANVM_EraseMemory+0x28>
    13d6:	ea dd       	rcall	.-1068   	; 0xfac <XPROGTarget_SendByte>
    13d8:	8a e0       	ldi	r24, 0x0A	; 10
    13da:	6d de       	rcall	.-806    	; 0x10b6 <XMEGANVM_SendNVMRegAddress>
    13dc:	80 e4       	ldi	r24, 0x40	; 64
    13de:	38 c0       	rjmp	.+112    	; 0x1450 <XMEGANVM_EraseMemory+0x98>
    13e0:	c0 33       	cpi	r28, 0x30	; 48
    13e2:	09 f0       	breq	.+2      	; 0x13e6 <XMEGANVM_EraseMemory+0x2e>
    13e4:	3c c0       	rjmp	.+120    	; 0x145e <XMEGANVM_EraseMemory+0xa6>
    13e6:	e2 dd       	rcall	.-1084   	; 0xfac <XPROGTarget_SendByte>
		/* Set CMDEX bit in NVM CTRLA register to start the erase sequence */
		XPROGTarget_SendByte(PDI_CMD_STS | (PDI_DATSIZE_4BYTES << 2));
		XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_CTRLA);
		XPROGTarget_SendByte(XMEGA_NVM_BIT_CTRLA_CMDEX);
	}
	else if (EraseCommand == XMEGA_NVM_CMD_ERASEEEPROM)
    13e8:	8a e0       	ldi	r24, 0x0A	; 10
    13ea:	65 de       	rcall	.-822    	; 0x10b6 <XMEGANVM_SendNVMRegAddress>
	{
		/* Send the EEPROM page buffer erase command to the target */
		XPROGTarget_SendByte(PDI_CMD_STS | (PDI_DATSIZE_4BYTES << 2));
    13ec:	86 e3       	ldi	r24, 0x36	; 54
    13ee:	de dd       	rcall	.-1092   	; 0xfac <XPROGTarget_SendByte>
		XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_CMD);
    13f0:	8c e4       	ldi	r24, 0x4C	; 76
    13f2:	dc dd       	rcall	.-1096   	; 0xfac <XPROGTarget_SendByte>
    13f4:	8b e0       	ldi	r24, 0x0B	; 11
		XPROGTarget_SendByte(XMEGA_NVM_CMD_ERASEEEPROMPAGEBUFF);
    13f6:	5f de       	rcall	.-834    	; 0x10b6 <XMEGANVM_SendNVMRegAddress>
    13f8:	81 e0       	ldi	r24, 0x01	; 1
    13fa:	d8 dd       	rcall	.-1104   	; 0xfac <XPROGTarget_SendByte>

		/* Set CMDEX bit in NVM CTRLA register to start the buffer erase */
		XPROGTarget_SendByte(PDI_CMD_STS | (PDI_DATSIZE_4BYTES << 2));
    13fc:	7a de       	rcall	.-780    	; 0x10f2 <XMEGANVM_WaitWhileNVMControllerBusy>
    13fe:	88 23       	and	r24, r24
    1400:	09 f4       	brne	.+2      	; 0x1404 <XMEGANVM_EraseMemory+0x4c>
		XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_CTRLA);
    1402:	3b c0       	rjmp	.+118    	; 0x147a <XMEGANVM_EraseMemory+0xc2>
    1404:	8c e4       	ldi	r24, 0x4C	; 76
    1406:	d2 dd       	rcall	.-1116   	; 0xfac <XPROGTarget_SendByte>
		XPROGTarget_SendByte(XMEGA_NVM_BIT_CTRLA_CMDEX);
    1408:	8a e0       	ldi	r24, 0x0A	; 10
    140a:	55 de       	rcall	.-854    	; 0x10b6 <XMEGANVM_SendNVMRegAddress>
    140c:	83 e3       	ldi	r24, 0x33	; 51

		/* Wait until the NVM controller is no longer busy */
		if (!(XMEGANVM_WaitWhileNVMControllerBusy()))
    140e:	ce dd       	rcall	.-1124   	; 0xfac <XPROGTarget_SendByte>
    1410:	8b e6       	ldi	r24, 0x6B	; 107
    1412:	cc dd       	rcall	.-1128   	; 0xfac <XPROGTarget_SendByte>
    1414:	c7 01       	movw	r24, r14
    1416:	b6 01       	movw	r22, r12
		  return false;

		/* Send the EEPROM memory buffer write command to the target */
		XPROGTarget_SendByte(PDI_CMD_STS | (PDI_DATSIZE_4BYTES << 2));
    1418:	35 de       	rcall	.-918    	; 0x1084 <XMEGANVM_SendAddress>
    141a:	80 ea       	ldi	r24, 0xA0	; 160
    141c:	c7 dd       	rcall	.-1138   	; 0xfac <XPROGTarget_SendByte>
		XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_CMD);
    141e:	80 91 84 01 	lds	r24, 0x0184
    1422:	81 50       	subi	r24, 0x01	; 1
		XPROGTarget_SendByte(XMEGA_NVM_CMD_LOADEEPROMPAGEBUFF);
    1424:	c3 dd       	rcall	.-1146   	; 0xfac <XPROGTarget_SendByte>
    1426:	84 e6       	ldi	r24, 0x64	; 100
    1428:	c1 dd       	rcall	.-1150   	; 0xfac <XPROGTarget_SendByte>

		/* Load the PDI pointer register with the EEPROM page start address */
		XPROGTarget_SendByte(PDI_CMD_ST | (PDI_POINTER_DIRECT << 2) | PDI_DATSIZE_4BYTES);
    142a:	c0 e0       	ldi	r28, 0x00	; 0
    142c:	03 c0       	rjmp	.+6      	; 0x1434 <XMEGANVM_EraseMemory+0x7c>
    142e:	80 e0       	ldi	r24, 0x00	; 0
		XMEGANVM_SendAddress(Address);
    1430:	bd dd       	rcall	.-1158   	; 0xfac <XPROGTarget_SendByte>
    1432:	cf 5f       	subi	r28, 0xFF	; 255
    1434:	2c 2f       	mov	r18, r28
    1436:	30 e0       	ldi	r19, 0x00	; 0

		/* Send the REPEAT command with the specified number of bytes to write */
		XPROGTarget_SendByte(PDI_CMD_REPEAT | PDI_DATSIZE_1BYTE);
    1438:	80 91 84 01 	lds	r24, 0x0184
    143c:	90 91 85 01 	lds	r25, 0x0185
		XPROGTarget_SendByte(XPROG_Param_EEPageSize - 1);
    1440:	28 17       	cp	r18, r24
    1442:	39 07       	cpc	r19, r25
    1444:	a0 f3       	brcs	.-24     	; 0x142e <XMEGANVM_EraseMemory+0x76>
    1446:	8c e4       	ldi	r24, 0x4C	; 76

		/* Send a ST command with indirect access and post-increment to tag each byte in the EEPROM page buffer */
		XPROGTarget_SendByte(PDI_CMD_ST | (PDI_POINTER_INDIRECT_PI << 2) | PDI_DATSIZE_1BYTE);
    1448:	b1 dd       	rcall	.-1182   	; 0xfac <XPROGTarget_SendByte>
    144a:	8a e0       	ldi	r24, 0x0A	; 10
    144c:	34 de       	rcall	.-920    	; 0x10b6 <XMEGANVM_SendNVMRegAddress>
		for (uint8_t PageByte = 0; PageByte < XPROG_Param_EEPageSize; PageByte++)
    144e:	80 e3       	ldi	r24, 0x30	; 48
    1450:	ad dd       	rcall	.-1190   	; 0xfac <XPROGTarget_SendByte>
		  XPROGTarget_SendByte(0x00);
    1452:	8c e4       	ldi	r24, 0x4C	; 76
    1454:	ab dd       	rcall	.-1194   	; 0xfac <XPROGTarget_SendByte>
    1456:	8b e0       	ldi	r24, 0x0B	; 11
		XPROGTarget_SendByte(PDI_CMD_REPEAT | PDI_DATSIZE_1BYTE);
		XPROGTarget_SendByte(XPROG_Param_EEPageSize - 1);

		/* Send a ST command with indirect access and post-increment to tag each byte in the EEPROM page buffer */
		XPROGTarget_SendByte(PDI_CMD_ST | (PDI_POINTER_INDIRECT_PI << 2) | PDI_DATSIZE_1BYTE);
		for (uint8_t PageByte = 0; PageByte < XPROG_Param_EEPageSize; PageByte++)
    1458:	2e de       	rcall	.-932    	; 0x10b6 <XMEGANVM_SendNVMRegAddress>
    145a:	81 e0       	ldi	r24, 0x01	; 1
    145c:	0b c0       	rjmp	.+22     	; 0x1474 <XMEGANVM_EraseMemory+0xbc>
    145e:	a6 dd       	rcall	.-1204   	; 0xfac <XPROGTarget_SendByte>
    1460:	8a e0       	ldi	r24, 0x0A	; 10
    1462:	29 de       	rcall	.-942    	; 0x10b6 <XMEGANVM_SendNVMRegAddress>
    1464:	8c 2f       	mov	r24, r28
    1466:	a2 dd       	rcall	.-1212   	; 0xfac <XPROGTarget_SendByte>
    1468:	8c e4       	ldi	r24, 0x4C	; 76
    146a:	a0 dd       	rcall	.-1216   	; 0xfac <XPROGTarget_SendByte>
		  XPROGTarget_SendByte(0x00);

		/* Send the memory erase command to the target */
		XPROGTarget_SendByte(PDI_CMD_STS | (PDI_DATSIZE_4BYTES << 2));
    146c:	c7 01       	movw	r24, r14
    146e:	b6 01       	movw	r22, r12
    1470:	09 de       	rcall	.-1006   	; 0x1084 <XMEGANVM_SendAddress>
		XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_CMD);
    1472:	80 e0       	ldi	r24, 0x00	; 0
    1474:	9b dd       	rcall	.-1226   	; 0xfac <XPROGTarget_SendByte>
    1476:	31 de       	rcall	.-926    	; 0x10da <XMEGANVM_WaitWhileNVMBusBusy>
		XPROGTarget_SendByte(EraseCommand);
    1478:	01 c0       	rjmp	.+2      	; 0x147c <XMEGANVM_EraseMemory+0xc4>
    147a:	80 e0       	ldi	r24, 0x00	; 0
    147c:	cf 91       	pop	r28

		/* Set CMDEX bit in NVM CTRLA register to start the EEPROM erase sequence */
		XPROGTarget_SendByte(PDI_CMD_STS | (PDI_DATSIZE_4BYTES << 2));
    147e:	ff 90       	pop	r15
    1480:	ef 90       	pop	r14
    1482:	df 90       	pop	r13
		XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_CTRLA);
    1484:	cf 90       	pop	r12
    1486:	08 95       	ret

00001488 <TINYNVM_SendWriteNVMRegister>:
 */
static void TINYNVM_SendWriteNVMRegister(const uint8_t Address)
{
	/* The TPI command for reading from the I/O space uses strange addressing, where the I/O address's upper
	 * two bits of the 6-bit address are shifted left once */
	XPROGTarget_SendByte(TPI_CMD_SOUT | ((Address & 0x30) << 1) | (Address & 0x0F));
    1488:	98 2f       	mov	r25, r24
    148a:	9f 70       	andi	r25, 0x0F	; 15
    148c:	90 69       	ori	r25, 0x90	; 144
    148e:	28 2f       	mov	r18, r24
    1490:	30 e0       	ldi	r19, 0x00	; 0
    1492:	20 73       	andi	r18, 0x30	; 48
    1494:	30 70       	andi	r19, 0x00	; 0
    1496:	22 0f       	add	r18, r18
    1498:	33 1f       	adc	r19, r19
    149a:	89 2f       	mov	r24, r25
    149c:	82 2b       	or	r24, r18
    149e:	86 cd       	rjmp	.-1268   	; 0xfac <XPROGTarget_SendByte>

000014a0 <TINYNVM_SendPointerAddress>:
    14a0:	1f 93       	push	r17
}
    14a2:	cf 93       	push	r28

#if defined(ENABLE_XPROG_PROTOCOL) || defined(__DOXYGEN__)

/** Sends the given pointer address to the target's TPI pointer register */
static void TINYNVM_SendPointerAddress(const uint16_t AbsoluteAddress)
{
    14a4:	df 93       	push	r29
    14a6:	0f 92       	push	r0
    14a8:	cd b7       	in	r28, 0x3d	; 61
    14aa:	de b7       	in	r29, 0x3e	; 62
    14ac:	18 2f       	mov	r17, r24
	/* Send the given 16-bit address to the target, LSB first */
	XPROGTarget_SendByte(TPI_CMD_SSTPR | 0);
    14ae:	88 e6       	ldi	r24, 0x68	; 104
    14b0:	99 83       	std	Y+1, r25	; 0x01
    14b2:	7c dd       	rcall	.-1288   	; 0xfac <XPROGTarget_SendByte>
    14b4:	81 2f       	mov	r24, r17
	XPROGTarget_SendByte(AbsoluteAddress & 0xFF);
    14b6:	7a dd       	rcall	.-1292   	; 0xfac <XPROGTarget_SendByte>
    14b8:	89 e6       	ldi	r24, 0x69	; 105
    14ba:	78 dd       	rcall	.-1296   	; 0xfac <XPROGTarget_SendByte>
	XPROGTarget_SendByte(TPI_CMD_SSTPR | 1);
    14bc:	99 81       	ldd	r25, Y+1	; 0x01
    14be:	89 2f       	mov	r24, r25
    14c0:	75 dd       	rcall	.-1302   	; 0xfac <XPROGTarget_SendByte>
	XPROGTarget_SendByte(AbsoluteAddress >> 8);
    14c2:	0f 90       	pop	r0
    14c4:	df 91       	pop	r29
    14c6:	cf 91       	pop	r28
    14c8:	1f 91       	pop	r17
}
    14ca:	08 95       	ret

000014cc <TINYNVM_WaitWhileNVMBusBusy>:
    14cc:	80 e8       	ldi	r24, 0x80	; 128
    14ce:	6e dd       	rcall	.-1316   	; 0xfac <XPROGTarget_SendByte>
    14d0:	88 dd       	rcall	.-1264   	; 0xfe2 <XPROGTarget_ReceiveByte>
    14d2:	9a b5       	in	r25, 0x2a	; 42
	for (;;)
	{
		/* Send the SLDCS command to read the TPI STATUS register to see the NVM bus is active */
		XPROGTarget_SendByte(TPI_CMD_SLDCS | TPI_STATUS_REG);

		uint8_t StatusRegister = XPROGTarget_ReceiveByte();
    14d4:	99 23       	and	r25, r25

		/* We might have timed out waiting for the status register read response, check here */
		if (!(TimeoutTicksRemaining))
    14d6:	21 f0       	breq	.+8      	; 0x14e0 <TINYNVM_WaitWhileNVMBusBusy+0x14>
    14d8:	81 ff       	sbrs	r24, 1
    14da:	f8 cf       	rjmp	.-16     	; 0x14cc <TINYNVM_WaitWhileNVMBusBusy>
		  return false;

		/* Check the status register read response to see if the NVM bus is enabled */
		if (StatusRegister & TPI_STATUS_NVM)
    14dc:	81 e0       	ldi	r24, 0x01	; 1
    14de:	08 95       	ret
		  return true;
    14e0:	80 e0       	ldi	r24, 0x00	; 0
    14e2:	08 95       	ret

000014e4 <TINYNVM_WaitWhileNVMControllerBusy>:

		uint8_t StatusRegister = XPROGTarget_ReceiveByte();

		/* We might have timed out waiting for the status register read response, check here */
		if (!(TimeoutTicksRemaining))
		  return false;
    14e4:	20 91 82 01 	lds	r18, 0x0182
 */
static void TINYNVM_SendReadNVMRegister(const uint8_t Address)
{
	/* The TPI command for reading from the I/O space uses strange addressing, where the I/O address's upper
	 * two bits of the 6-bit address are shifted left once */
	XPROGTarget_SendByte(TPI_CMD_SIN | ((Address & 0x30) << 1) | (Address & 0x0F));
    14e8:	82 2f       	mov	r24, r18
    14ea:	8f 70       	andi	r24, 0x0F	; 15
    14ec:	80 61       	ori	r24, 0x10	; 16
    14ee:	30 e0       	ldi	r19, 0x00	; 0
    14f0:	20 73       	andi	r18, 0x30	; 48
    14f2:	30 70       	andi	r19, 0x00	; 0
    14f4:	22 0f       	add	r18, r18
    14f6:	33 1f       	adc	r19, r19
    14f8:	82 2b       	or	r24, r18
    14fa:	58 dd       	rcall	.-1360   	; 0xfac <XPROGTarget_SendByte>
    14fc:	72 dd       	rcall	.-1308   	; 0xfe2 <XPROGTarget_ReceiveByte>
	for (;;)
	{
		/* Send the SIN command to read the TPI STATUS register to see the NVM bus is busy */
		TINYNVM_SendReadNVMRegister(XPROG_Param_NVMCSRRegAddr);

		uint8_t StatusRegister = XPROGTarget_ReceiveByte();
    14fe:	9a b5       	in	r25, 0x2a	; 42
    1500:	99 23       	and	r25, r25

		/* We might have timed out waiting for the status register read response, check here */
		if (!(TimeoutTicksRemaining))
    1502:	21 f0       	breq	.+8      	; 0x150c <TINYNVM_WaitWhileNVMControllerBusy+0x28>
    1504:	87 fd       	sbrc	r24, 7
    1506:	ee cf       	rjmp	.-36     	; 0x14e4 <TINYNVM_WaitWhileNVMControllerBusy>
		  return false;

		/* Check to see if the BUSY flag is still set */
		if (!(StatusRegister & (1 << 7)))
    1508:	81 e0       	ldi	r24, 0x01	; 1
    150a:	08 95       	ret
		  return true;
    150c:	80 e0       	ldi	r24, 0x00	; 0
    150e:	08 95       	ret

00001510 <TINYNVM_EnableTPI>:

		uint8_t StatusRegister = XPROGTarget_ReceiveByte();

		/* We might have timed out waiting for the status register read response, check here */
		if (!(TimeoutTicksRemaining))
		  return false;
    1510:	cf 92       	push	r12

		/* Check to see if the BUSY flag is still set */
		if (!(StatusRegister & (1 << 7)))
		  return true;
	}
}
    1512:	df 92       	push	r13
/** Enables the physical TPI interface on the target and enables access to the internal NVM controller.
 *
 *  \return Boolean true if the TPI interface was enabled successfully, false otherwise
 */
bool TINYNVM_EnableTPI(void)
{
    1514:	ef 92       	push	r14
    1516:	ff 92       	push	r15
    1518:	0f 93       	push	r16
    151a:	1f 93       	push	r17
    151c:	cf 93       	push	r28
    151e:	df 93       	push	r29
    1520:	cd b7       	in	r28, 0x3d	; 61
    1522:	de b7       	in	r29, 0x3e	; 62
    1524:	28 97       	sbiw	r28, 0x08	; 8
    1526:	0f b6       	in	r0, 0x3f	; 63
    1528:	f8 94       	cli
    152a:	de bf       	out	0x3e, r29	; 62
    152c:	0f be       	out	0x3f, r0	; 63
    152e:	cd bf       	out	0x3d, r28	; 61
	/* Enable TPI programming mode with the attached target */
	XPROGTarget_EnableTargetTPI();
    1530:	76 dd       	rcall	.-1300   	; 0x101e <XPROGTarget_EnableTargetTPI>
    1532:	82 ec       	ldi	r24, 0xC2	; 194

	/* Lower direction change guard time to 32 USART bits */
	XPROGTarget_SendByte(TPI_CMD_SSTCS | TPI_CTRL_REG);
    1534:	3b dd       	rcall	.-1418   	; 0xfac <XPROGTarget_SendByte>
    1536:	82 e0       	ldi	r24, 0x02	; 2
    1538:	39 dd       	rcall	.-1422   	; 0xfac <XPROGTarget_SendByte>
	XPROGTarget_SendByte(0x02);
    153a:	80 ee       	ldi	r24, 0xE0	; 224
    153c:	37 dd       	rcall	.-1426   	; 0xfac <XPROGTarget_SendByte>
    153e:	8e 01       	movw	r16, r28

	/* Enable access to the XPROG NVM bus by sending the documented NVM access key to the device */
	XPROGTarget_SendByte(TPI_CMD_SKEY);
    1540:	07 5f       	subi	r16, 0xF7	; 247
    1542:	1f 4f       	sbci	r17, 0xFF	; 255
    1544:	7e 01       	movw	r14, r28
    1546:	08 94       	sec
    1548:	e1 1c       	adc	r14, r1
    154a:	f1 1c       	adc	r15, r1

/** Enables the physical TPI interface on the target and enables access to the internal NVM controller.
 *
 *  \return Boolean true if the TPI interface was enabled successfully, false otherwise
 */
bool TINYNVM_EnableTPI(void)
    154c:	67 01       	movw	r12, r14
    154e:	f6 01       	movw	r30, r12
    1550:	a4 eb       	ldi	r26, 0xB4	; 180
    1552:	b1 e0       	ldi	r27, 0x01	; 1
	XPROGTarget_SendByte(0x02);

	/* Enable access to the XPROG NVM bus by sending the documented NVM access key to the device */
	XPROGTarget_SendByte(TPI_CMD_SKEY);
	for (uint8_t i = sizeof(TPI_NVMENABLE_KEY); i > 0; i--)
	  XPROGTarget_SendByte(TPI_NVMENABLE_KEY[i - 1]);
    1554:	88 e0       	ldi	r24, 0x08	; 8
    1556:	0d 90       	ld	r0, X+
    1558:	01 92       	st	Z+, r0
    155a:	81 50       	subi	r24, 0x01	; 1
    155c:	e1 f7       	brne	.-8      	; 0x1556 <TINYNVM_EnableTPI+0x46>
    155e:	f8 01       	movw	r30, r16
    1560:	82 91       	ld	r24, -Z
    1562:	8f 01       	movw	r16, r30
    1564:	23 dd       	rcall	.-1466   	; 0xfac <XPROGTarget_SendByte>
    1566:	0e 15       	cp	r16, r14
    1568:	1f 05       	cpc	r17, r15
    156a:	89 f7       	brne	.-30     	; 0x154e <TINYNVM_EnableTPI+0x3e>
    156c:	af df       	rcall	.-162    	; 0x14cc <TINYNVM_WaitWhileNVMBusBusy>
    156e:	28 96       	adiw	r28, 0x08	; 8
	XPROGTarget_SendByte(TPI_CMD_SSTCS | TPI_CTRL_REG);
	XPROGTarget_SendByte(0x02);

	/* Enable access to the XPROG NVM bus by sending the documented NVM access key to the device */
	XPROGTarget_SendByte(TPI_CMD_SKEY);
	for (uint8_t i = sizeof(TPI_NVMENABLE_KEY); i > 0; i--)
    1570:	0f b6       	in	r0, 0x3f	; 63
    1572:	f8 94       	cli
    1574:	de bf       	out	0x3e, r29	; 62
	  XPROGTarget_SendByte(TPI_NVMENABLE_KEY[i - 1]);

	/* Wait until the NVM bus becomes active */
	return TINYNVM_WaitWhileNVMBusBusy();
    1576:	0f be       	out	0x3f, r0	; 63
    1578:	cd bf       	out	0x3d, r28	; 61
}
    157a:	df 91       	pop	r29
    157c:	cf 91       	pop	r28
    157e:	1f 91       	pop	r17
    1580:	0f 91       	pop	r16
    1582:	ff 90       	pop	r15
    1584:	ef 90       	pop	r14
    1586:	df 90       	pop	r13
    1588:	cf 90       	pop	r12
    158a:	08 95       	ret

0000158c <TINYNVM_DisableTPI>:
    158c:	9f df       	rcall	.-194    	; 0x14cc <TINYNVM_WaitWhileNVMBusBusy>
    158e:	80 ec       	ldi	r24, 0xC0	; 192
    1590:	0d dd       	rcall	.-1510   	; 0xfac <XPROGTarget_SendByte>
    1592:	80 e0       	ldi	r24, 0x00	; 0
    1594:	0b dd       	rcall	.-1514   	; 0xfac <XPROGTarget_SendByte>
    1596:	81 e8       	ldi	r24, 0x81	; 129

	do
	{
		/* Clear the NVMEN bit in the TPI STATUS register to disable TPI mode */
		XPROGTarget_SendByte(TPI_CMD_SSTCS | TPI_STATUS_REG);
		XPROGTarget_SendByte(0x00);
    1598:	09 dd       	rcall	.-1518   	; 0xfac <XPROGTarget_SendByte>
    159a:	23 dd       	rcall	.-1466   	; 0xfe2 <XPROGTarget_ReceiveByte>

		/* Read back the STATUS register, check to see if it took effect */
		XPROGTarget_SendByte(TPI_CMD_SLDCS | PDI_RESET_REG);
    159c:	88 23       	and	r24, r24
    159e:	b9 f7       	brne	.-18     	; 0x158e <TINYNVM_DisableTPI+0x2>
    15a0:	ee cc       	rjmp	.-1572   	; 0xf7e <XPROGTarget_DisableTargetTPI>

000015a2 <TINYNVM_ReadMemory>:
	} while (XPROGTarget_ReceiveByte() != 0x00);
    15a2:	ef 92       	push	r14
    15a4:	ff 92       	push	r15
    15a6:	0f 93       	push	r16
    15a8:	1f 93       	push	r17

	XPROGTarget_DisableTargetTPI();
    15aa:	cf 93       	push	r28
    15ac:	df 93       	push	r29
}
    15ae:	7c 01       	movw	r14, r24
 *  \return Boolean true if the command sequence complete successfully
 */
bool TINYNVM_ReadMemory(const uint16_t ReadAddress,
                        uint8_t* ReadBuffer,
                        uint16_t ReadSize)
{
    15b0:	8b 01       	movw	r16, r22
    15b2:	ea 01       	movw	r28, r20
	/* Wait until the NVM controller is no longer busy */
	if (!(TINYNVM_WaitWhileNVMControllerBusy()))
    15b4:	97 df       	rcall	.-210    	; 0x14e4 <TINYNVM_WaitWhileNVMControllerBusy>
    15b6:	88 23       	and	r24, r24
    15b8:	c1 f0       	breq	.+48     	; 0x15ea <TINYNVM_ReadMemory+0x48>
    15ba:	80 91 83 01 	lds	r24, 0x0183
	  return false;

	/* Set the NVM control register to the NO OP command for memory reading */
	TINYNVM_SendWriteNVMRegister(XPROG_Param_NVMCMDRegAddr);
    15be:	64 df       	rcall	.-312    	; 0x1488 <TINYNVM_SendWriteNVMRegister>
    15c0:	80 e0       	ldi	r24, 0x00	; 0
    15c2:	f4 dc       	rcall	.-1560   	; 0xfac <XPROGTarget_SendByte>
	XPROGTarget_SendByte(TINY_NVM_CMD_NOOP);
    15c4:	c7 01       	movw	r24, r14
    15c6:	6c df       	rcall	.-296    	; 0x14a0 <TINYNVM_SendPointerAddress>
    15c8:	06 c0       	rjmp	.+12     	; 0x15d6 <TINYNVM_ReadMemory+0x34>

	/* Send the address of the location to read from */
	TINYNVM_SendPointerAddress(ReadAddress);
    15ca:	84 e2       	ldi	r24, 0x24	; 36
    15cc:	ef dc       	rcall	.-1570   	; 0xfac <XPROGTarget_SendByte>
    15ce:	09 dd       	rcall	.-1518   	; 0xfe2 <XPROGTarget_ReceiveByte>

	while (ReadSize-- && TimeoutTicksRemaining)
    15d0:	f8 01       	movw	r30, r16
	{
		/* Read the byte of data from the target */
		XPROGTarget_SendByte(TPI_CMD_SLD | TPI_POINTER_INDIRECT_PI);
    15d2:	81 93       	st	Z+, r24
    15d4:	8f 01       	movw	r16, r30
    15d6:	20 97       	sbiw	r28, 0x00	; 0
		*(ReadBuffer++) = XPROGTarget_ReceiveByte();
    15d8:	21 f0       	breq	.+8      	; 0x15e2 <TINYNVM_ReadMemory+0x40>
    15da:	8a b5       	in	r24, 0x2a	; 42
    15dc:	21 97       	sbiw	r28, 0x01	; 1
    15de:	88 23       	and	r24, r24
    15e0:	a1 f7       	brne	.-24     	; 0x15ca <TINYNVM_ReadMemory+0x28>
	XPROGTarget_SendByte(TINY_NVM_CMD_NOOP);

	/* Send the address of the location to read from */
	TINYNVM_SendPointerAddress(ReadAddress);

	while (ReadSize-- && TimeoutTicksRemaining)
    15e2:	9a b5       	in	r25, 0x2a	; 42
    15e4:	81 e0       	ldi	r24, 0x01	; 1
    15e6:	99 23       	and	r25, r25
    15e8:	09 f4       	brne	.+2      	; 0x15ec <TINYNVM_ReadMemory+0x4a>
    15ea:	80 e0       	ldi	r24, 0x00	; 0
    15ec:	df 91       	pop	r29
		/* Read the byte of data from the target */
		XPROGTarget_SendByte(TPI_CMD_SLD | TPI_POINTER_INDIRECT_PI);
		*(ReadBuffer++) = XPROGTarget_ReceiveByte();
	}

	return (TimeoutTicksRemaining > 0);
    15ee:	cf 91       	pop	r28
    15f0:	1f 91       	pop	r17
    15f2:	0f 91       	pop	r16
    15f4:	ff 90       	pop	r15
                        uint8_t* ReadBuffer,
                        uint16_t ReadSize)
{
	/* Wait until the NVM controller is no longer busy */
	if (!(TINYNVM_WaitWhileNVMControllerBusy()))
	  return false;
    15f6:	ef 90       	pop	r14
		XPROGTarget_SendByte(TPI_CMD_SLD | TPI_POINTER_INDIRECT_PI);
		*(ReadBuffer++) = XPROGTarget_ReceiveByte();
	}

	return (TimeoutTicksRemaining > 0);
}
    15f8:	08 95       	ret

000015fa <TINYNVM_WriteMemory>:
    15fa:	ef 92       	push	r14
    15fc:	ff 92       	push	r15
    15fe:	0f 93       	push	r16
    1600:	1f 93       	push	r17
    1602:	cf 93       	push	r28
    1604:	df 93       	push	r29
 *  \return Boolean true if the command sequence complete successfully
 */
bool TINYNVM_WriteMemory(const uint16_t WriteAddress,
                         uint8_t* WriteBuffer,
                         uint16_t WriteLength)
{
    1606:	7c 01       	movw	r14, r24
    1608:	8b 01       	movw	r16, r22
    160a:	ea 01       	movw	r28, r20
	/* Wait until the NVM controller is no longer busy */
	if (!(TINYNVM_WaitWhileNVMControllerBusy()))
    160c:	6b df       	rcall	.-298    	; 0x14e4 <TINYNVM_WaitWhileNVMControllerBusy>
    160e:	88 23       	and	r24, r24
    1610:	21 f1       	breq	.+72     	; 0x165a <TINYNVM_WriteMemory+0x60>
    1612:	c0 ff       	sbrs	r28, 0
	  return false;

	/* Must have an integer number of words to write - if extra byte, word-align via a dummy high byte */
	if (WriteLength & 0x01)
    1614:	06 c0       	rjmp	.+12     	; 0x1622 <TINYNVM_WriteMemory+0x28>
    1616:	f8 01       	movw	r30, r16
	  WriteBuffer[WriteLength++] = 0xFF;
    1618:	ec 0f       	add	r30, r28
    161a:	fd 1f       	adc	r31, r29
    161c:	8f ef       	ldi	r24, 0xFF	; 255
    161e:	80 83       	st	Z, r24
    1620:	21 96       	adiw	r28, 0x01	; 1
    1622:	80 91 83 01 	lds	r24, 0x0183

	/* Set the NVM control register to the WORD WRITE command for memory writing */
	TINYNVM_SendWriteNVMRegister(XPROG_Param_NVMCMDRegAddr);
    1626:	30 df       	rcall	.-416    	; 0x1488 <TINYNVM_SendWriteNVMRegister>
    1628:	8d e1       	ldi	r24, 0x1D	; 29
    162a:	c0 dc       	rcall	.-1664   	; 0xfac <XPROGTarget_SendByte>
	XPROGTarget_SendByte(TINY_NVM_CMD_WORDWRITE);
    162c:	c7 01       	movw	r24, r14
    162e:	38 df       	rcall	.-400    	; 0x14a0 <TINYNVM_SendPointerAddress>
    1630:	10 c0       	rjmp	.+32     	; 0x1652 <TINYNVM_WriteMemory+0x58>

	/* Send the address of the location to write to */
	TINYNVM_SendPointerAddress(WriteAddress);
    1632:	58 df       	rcall	.-336    	; 0x14e4 <TINYNVM_WaitWhileNVMControllerBusy>
    1634:	88 23       	and	r24, r24
    1636:	89 f0       	breq	.+34     	; 0x165a <TINYNVM_WriteMemory+0x60>

	while (WriteLength)
    1638:	84 e6       	ldi	r24, 0x64	; 100
	{
		/* Wait until the NVM controller is no longer busy */
		if (!(TINYNVM_WaitWhileNVMControllerBusy()))
    163a:	b8 dc       	rcall	.-1680   	; 0xfac <XPROGTarget_SendByte>
    163c:	f8 01       	movw	r30, r16
    163e:	80 81       	ld	r24, Z
    1640:	b5 dc       	rcall	.-1686   	; 0xfac <XPROGTarget_SendByte>
		  return false;

		/* Write the low byte of data to the target */
		XPROGTarget_SendByte(TPI_CMD_SST | TPI_POINTER_INDIRECT_PI);
    1642:	84 e6       	ldi	r24, 0x64	; 100
    1644:	b3 dc       	rcall	.-1690   	; 0xfac <XPROGTarget_SendByte>
    1646:	f8 01       	movw	r30, r16
		XPROGTarget_SendByte(*(WriteBuffer++));
    1648:	81 81       	ldd	r24, Z+1	; 0x01
    164a:	0e 5f       	subi	r16, 0xFE	; 254
    164c:	1f 4f       	sbci	r17, 0xFF	; 255
    164e:	ae dc       	rcall	.-1700   	; 0xfac <XPROGTarget_SendByte>

		/* Write the high byte of data to the target */
		XPROGTarget_SendByte(TPI_CMD_SST | TPI_POINTER_INDIRECT_PI);
    1650:	22 97       	sbiw	r28, 0x02	; 2
    1652:	20 97       	sbiw	r28, 0x00	; 0
    1654:	71 f7       	brne	.-36     	; 0x1632 <TINYNVM_WriteMemory+0x38>
		XPROGTarget_SendByte(*(WriteBuffer++));
    1656:	81 e0       	ldi	r24, 0x01	; 1
    1658:	01 c0       	rjmp	.+2      	; 0x165c <TINYNVM_WriteMemory+0x62>
 *  \param[in] WriteBuffer   Buffer to source data from
 *  \param[in] WriteLength   Total number of bytes to write to the device (must be an integer multiple of 2)
 *
 *  \return Boolean true if the command sequence complete successfully
 */
bool TINYNVM_WriteMemory(const uint16_t WriteAddress,
    165a:	80 e0       	ldi	r24, 0x00	; 0
    165c:	df 91       	pop	r29
		XPROGTarget_SendByte(TPI_CMD_SST | TPI_POINTER_INDIRECT_PI);
		XPROGTarget_SendByte(*(WriteBuffer++));

		/* Write the high byte of data to the target */
		XPROGTarget_SendByte(TPI_CMD_SST | TPI_POINTER_INDIRECT_PI);
		XPROGTarget_SendByte(*(WriteBuffer++));
    165e:	cf 91       	pop	r28
    1660:	1f 91       	pop	r17

		/* Need to decrement the write length twice, since we wrote a whole two-byte word */
		WriteLength -= 2;
    1662:	0f 91       	pop	r16
	XPROGTarget_SendByte(TINY_NVM_CMD_WORDWRITE);

	/* Send the address of the location to write to */
	TINYNVM_SendPointerAddress(WriteAddress);

	while (WriteLength)
    1664:	ff 90       	pop	r15
    1666:	ef 90       	pop	r14

		/* Need to decrement the write length twice, since we wrote a whole two-byte word */
		WriteLength -= 2;
	}

	return true;
    1668:	08 95       	ret

0000166a <TINYNVM_EraseMemory>:
    166a:	1f 93       	push	r17

	while (WriteLength)
	{
		/* Wait until the NVM controller is no longer busy */
		if (!(TINYNVM_WaitWhileNVMControllerBusy()))
		  return false;
    166c:	cf 93       	push	r28
		/* Need to decrement the write length twice, since we wrote a whole two-byte word */
		WriteLength -= 2;
	}

	return true;
}
    166e:	df 93       	push	r29
    1670:	18 2f       	mov	r17, r24
    1672:	eb 01       	movw	r28, r22
    1674:	37 df       	rcall	.-402    	; 0x14e4 <TINYNVM_WaitWhileNVMControllerBusy>
    1676:	88 23       	and	r24, r24
    1678:	71 f0       	breq	.+28     	; 0x1696 <TINYNVM_EraseMemory+0x2c>
    167a:	80 91 83 01 	lds	r24, 0x0183
	/* Wait until the NVM controller is no longer busy */
	if (!(TINYNVM_WaitWhileNVMControllerBusy()))
	  return false;

	/* Set the NVM control register to the target memory erase command */
	TINYNVM_SendWriteNVMRegister(XPROG_Param_NVMCMDRegAddr);
    167e:	04 df       	rcall	.-504    	; 0x1488 <TINYNVM_SendWriteNVMRegister>
    1680:	81 2f       	mov	r24, r17
    1682:	94 dc       	rcall	.-1752   	; 0xfac <XPROGTarget_SendByte>
	XPROGTarget_SendByte(EraseCommand);
    1684:	ce 01       	movw	r24, r28
    1686:	81 60       	ori	r24, 0x01	; 1
    1688:	0b df       	rcall	.-490    	; 0x14a0 <TINYNVM_SendPointerAddress>

	/* Write to a high byte location within the target address space to start the erase process */
	TINYNVM_SendPointerAddress(Address | 0x0001);
    168a:	80 e6       	ldi	r24, 0x60	; 96
    168c:	8f dc       	rcall	.-1762   	; 0xfac <XPROGTarget_SendByte>
    168e:	80 e0       	ldi	r24, 0x00	; 0
    1690:	8d dc       	rcall	.-1766   	; 0xfac <XPROGTarget_SendByte>
	XPROGTarget_SendByte(TPI_CMD_SST | TPI_POINTER_INDIRECT);
    1692:	28 df       	rcall	.-432    	; 0x14e4 <TINYNVM_WaitWhileNVMControllerBusy>
    1694:	01 c0       	rjmp	.+2      	; 0x1698 <TINYNVM_EraseMemory+0x2e>
    1696:	80 e0       	ldi	r24, 0x00	; 0
	XPROGTarget_SendByte(0x00);
    1698:	df 91       	pop	r29
    169a:	cf 91       	pop	r28
    169c:	1f 91       	pop	r17

	/* Wait until the NVM controller is no longer busy */
	if (!(TINYNVM_WaitWhileNVMControllerBusy()))
    169e:	08 95       	ret

000016a0 <Endpoint_Write_Stream_LE>:
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
    16a0:	af 92       	push	r10
    16a2:	bf 92       	push	r11
    16a4:	cf 92       	push	r12
    16a6:	df 92       	push	r13
    16a8:	ef 92       	push	r14
    16aa:	ff 92       	push	r15
    16ac:	1f 93       	push	r17
    16ae:	cf 93       	push	r28
    16b0:	df 93       	push	r29
    16b2:	ec 01       	movw	r28, r24
    16b4:	7b 01       	movw	r14, r22
    16b6:	6a 01       	movw	r12, r20
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	uint16_t BytesInTransfer = 0;
	uint8_t  ErrorCode;

	if ((ErrorCode = Endpoint_WaitUntilReady()))
    16b8:	77 d2       	rcall	.+1262   	; 0x1ba8 <Endpoint_WaitUntilReady>
    16ba:	18 2f       	mov	r17, r24
    16bc:	88 23       	and	r24, r24
    16be:	a9 f5       	brne	.+106    	; 0x172a <Endpoint_Write_Stream_LE+0x8a>
    16c0:	c1 14       	cp	r12, r1
	  return ErrorCode;

	if (BytesProcessed != NULL)
    16c2:	d1 04       	cpc	r13, r1
    16c4:	39 f0       	breq	.+14     	; 0x16d4 <Endpoint_Write_Stream_LE+0x34>
    16c6:	f6 01       	movw	r30, r12
	{
		Length -= *BytesProcessed;
    16c8:	20 81       	ld	r18, Z
    16ca:	31 81       	ldd	r19, Z+1	; 0x01
    16cc:	e2 1a       	sub	r14, r18
    16ce:	f3 0a       	sbc	r15, r19
    16d0:	c2 0f       	add	r28, r18
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
    16d2:	d3 1f       	adc	r29, r19
    16d4:	aa 24       	eor	r10, r10

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
    16d6:	bb 24       	eor	r11, r11
    16d8:	23 c0       	rjmp	.+70     	; 0x1720 <Endpoint_Write_Stream_LE+0x80>
    16da:	80 91 e8 00 	lds	r24, 0x00E8
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    16de:	85 fd       	sbrc	r24, 5
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
	{
		if (!(Endpoint_IsReadWriteAllowed()))
    16e0:	16 c0       	rjmp	.+44     	; 0x170e <Endpoint_Write_Stream_LE+0x6e>
    16e2:	80 91 e8 00 	lds	r24, 0x00E8
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    16e6:	8e 77       	andi	r24, 0x7E	; 126
    16e8:	80 93 e8 00 	sts	0x00E8, r24
    16ec:	fb d4       	rcall	.+2550   	; 0x20e4 <USB_USBTask>
		{
			TEMPLATE_CLEAR_ENDPOINT();

			#if !defined(INTERRUPT_CONTROL_ENDPOINT)
			USB_USBTask();
    16ee:	c1 14       	cp	r12, r1
    16f0:	d1 04       	cpc	r13, r1
			#endif

			if (BytesProcessed != NULL)
    16f2:	49 f0       	breq	.+18     	; 0x1706 <Endpoint_Write_Stream_LE+0x66>
    16f4:	f6 01       	movw	r30, r12
    16f6:	80 81       	ld	r24, Z
			{
				*BytesProcessed += BytesInTransfer;
    16f8:	91 81       	ldd	r25, Z+1	; 0x01
    16fa:	8a 0d       	add	r24, r10
    16fc:	9b 1d       	adc	r25, r11
    16fe:	91 83       	std	Z+1, r25	; 0x01
    1700:	80 83       	st	Z, r24
    1702:	15 e0       	ldi	r17, 0x05	; 5
    1704:	12 c0       	rjmp	.+36     	; 0x172a <Endpoint_Write_Stream_LE+0x8a>
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
    1706:	50 d2       	rcall	.+1184   	; 0x1ba8 <Endpoint_WaitUntilReady>
    1708:	88 23       	and	r24, r24
			}

			if ((ErrorCode = Endpoint_WaitUntilReady()))
    170a:	51 f0       	breq	.+20     	; 0x1720 <Endpoint_Write_Stream_LE+0x80>
    170c:	0d c0       	rjmp	.+26     	; 0x1728 <Endpoint_Write_Stream_LE+0x88>
    170e:	89 91       	ld	r24, Y+
    1710:	80 93 f1 00 	sts	0x00F1, r24
			  return ErrorCode;
		}
		else
		{
			TEMPLATE_TRANSFER_BYTE(DataStream);
    1714:	08 94       	sec
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    1716:	e1 08       	sbc	r14, r1
    1718:	f1 08       	sbc	r15, r1
			TEMPLATE_BUFFER_MOVE(DataStream, 1);
			Length--;
    171a:	08 94       	sec
    171c:	a1 1c       	adc	r10, r1
    171e:	b1 1c       	adc	r11, r1
			BytesInTransfer++;
    1720:	e1 14       	cp	r14, r1
    1722:	f1 04       	cpc	r15, r1
    1724:	d1 f6       	brne	.-76     	; 0x16da <Endpoint_Write_Stream_LE+0x3a>
	{
		Length -= *BytesProcessed;
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
    1726:	01 c0       	rjmp	.+2      	; 0x172a <Endpoint_Write_Stream_LE+0x8a>
    1728:	18 2f       	mov	r17, r24
    172a:	81 2f       	mov	r24, r17
    172c:	df 91       	pop	r29
			{
				*BytesProcessed += BytesInTransfer;
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
			}

			if ((ErrorCode = Endpoint_WaitUntilReady()))
    172e:	cf 91       	pop	r28
			BytesInTransfer++;
		}
	}

	return ENDPOINT_RWSTREAM_NoError;
}
    1730:	1f 91       	pop	r17
    1732:	ff 90       	pop	r15
    1734:	ef 90       	pop	r14
    1736:	df 90       	pop	r13
    1738:	cf 90       	pop	r12
    173a:	bf 90       	pop	r11
    173c:	af 90       	pop	r10
    173e:	08 95       	ret

00001740 <Endpoint_Read_Stream_LE>:
    1740:	af 92       	push	r10
    1742:	bf 92       	push	r11
    1744:	cf 92       	push	r12
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
    1746:	df 92       	push	r13
    1748:	ef 92       	push	r14
    174a:	ff 92       	push	r15
    174c:	1f 93       	push	r17
    174e:	cf 93       	push	r28
    1750:	df 93       	push	r29
    1752:	ec 01       	movw	r28, r24
    1754:	7b 01       	movw	r14, r22
    1756:	6a 01       	movw	r12, r20
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	uint16_t BytesInTransfer = 0;
	uint8_t  ErrorCode;

	if ((ErrorCode = Endpoint_WaitUntilReady()))
    1758:	27 d2       	rcall	.+1102   	; 0x1ba8 <Endpoint_WaitUntilReady>
    175a:	18 2f       	mov	r17, r24
    175c:	88 23       	and	r24, r24
    175e:	a9 f5       	brne	.+106    	; 0x17ca <Endpoint_Read_Stream_LE+0x8a>
    1760:	c1 14       	cp	r12, r1
	  return ErrorCode;

	if (BytesProcessed != NULL)
    1762:	d1 04       	cpc	r13, r1
    1764:	39 f0       	breq	.+14     	; 0x1774 <Endpoint_Read_Stream_LE+0x34>
    1766:	f6 01       	movw	r30, r12
	{
		Length -= *BytesProcessed;
    1768:	20 81       	ld	r18, Z
    176a:	31 81       	ldd	r19, Z+1	; 0x01
    176c:	e2 1a       	sub	r14, r18
    176e:	f3 0a       	sbc	r15, r19
    1770:	c2 0f       	add	r28, r18
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
    1772:	d3 1f       	adc	r29, r19
    1774:	aa 24       	eor	r10, r10

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
    1776:	bb 24       	eor	r11, r11
    1778:	23 c0       	rjmp	.+70     	; 0x17c0 <Endpoint_Read_Stream_LE+0x80>
    177a:	80 91 e8 00 	lds	r24, 0x00E8
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    177e:	85 fd       	sbrc	r24, 5
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
	{
		if (!(Endpoint_IsReadWriteAllowed()))
    1780:	16 c0       	rjmp	.+44     	; 0x17ae <Endpoint_Read_Stream_LE+0x6e>
    1782:	80 91 e8 00 	lds	r24, 0x00E8
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    1786:	8b 77       	andi	r24, 0x7B	; 123
    1788:	80 93 e8 00 	sts	0x00E8, r24
    178c:	ab d4       	rcall	.+2390   	; 0x20e4 <USB_USBTask>
		{
			TEMPLATE_CLEAR_ENDPOINT();

			#if !defined(INTERRUPT_CONTROL_ENDPOINT)
			USB_USBTask();
    178e:	c1 14       	cp	r12, r1
    1790:	d1 04       	cpc	r13, r1
			#endif

			if (BytesProcessed != NULL)
    1792:	49 f0       	breq	.+18     	; 0x17a6 <Endpoint_Read_Stream_LE+0x66>
    1794:	f6 01       	movw	r30, r12
    1796:	80 81       	ld	r24, Z
			{
				*BytesProcessed += BytesInTransfer;
    1798:	91 81       	ldd	r25, Z+1	; 0x01
    179a:	8a 0d       	add	r24, r10
    179c:	9b 1d       	adc	r25, r11
    179e:	91 83       	std	Z+1, r25	; 0x01
    17a0:	80 83       	st	Z, r24
    17a2:	15 e0       	ldi	r17, 0x05	; 5
    17a4:	12 c0       	rjmp	.+36     	; 0x17ca <Endpoint_Read_Stream_LE+0x8a>
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
    17a6:	00 d2       	rcall	.+1024   	; 0x1ba8 <Endpoint_WaitUntilReady>
    17a8:	88 23       	and	r24, r24
			}

			if ((ErrorCode = Endpoint_WaitUntilReady()))
    17aa:	51 f0       	breq	.+20     	; 0x17c0 <Endpoint_Read_Stream_LE+0x80>
    17ac:	0d c0       	rjmp	.+26     	; 0x17c8 <Endpoint_Read_Stream_LE+0x88>
    17ae:	80 91 f1 00 	lds	r24, 0x00F1
    17b2:	89 93       	st	Y+, r24
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    17b4:	08 94       	sec
    17b6:	e1 08       	sbc	r14, r1
			  return ErrorCode;
		}
		else
		{
			TEMPLATE_TRANSFER_BYTE(DataStream);
    17b8:	f1 08       	sbc	r15, r1
			TEMPLATE_BUFFER_MOVE(DataStream, 1);
			Length--;
    17ba:	08 94       	sec
    17bc:	a1 1c       	adc	r10, r1
    17be:	b1 1c       	adc	r11, r1
			BytesInTransfer++;
    17c0:	e1 14       	cp	r14, r1
    17c2:	f1 04       	cpc	r15, r1
    17c4:	d1 f6       	brne	.-76     	; 0x177a <Endpoint_Read_Stream_LE+0x3a>
	{
		Length -= *BytesProcessed;
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
    17c6:	01 c0       	rjmp	.+2      	; 0x17ca <Endpoint_Read_Stream_LE+0x8a>
    17c8:	18 2f       	mov	r17, r24
    17ca:	81 2f       	mov	r24, r17
    17cc:	df 91       	pop	r29
			{
				*BytesProcessed += BytesInTransfer;
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
			}

			if ((ErrorCode = Endpoint_WaitUntilReady()))
    17ce:	cf 91       	pop	r28
			BytesInTransfer++;
		}
	}

	return ENDPOINT_RWSTREAM_NoError;
}
    17d0:	1f 91       	pop	r17
    17d2:	ff 90       	pop	r15
    17d4:	ef 90       	pop	r14
    17d6:	df 90       	pop	r13
    17d8:	cf 90       	pop	r12
    17da:	bf 90       	pop	r11
    17dc:	af 90       	pop	r10
    17de:	08 95       	ret

000017e0 <Endpoint_Read_Stream_BE>:
    17e0:	af 92       	push	r10
    17e2:	bf 92       	push	r11
    17e4:	df 92       	push	r13
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
    17e6:	ef 92       	push	r14
    17e8:	ff 92       	push	r15
    17ea:	0f 93       	push	r16
    17ec:	1f 93       	push	r17
    17ee:	cf 93       	push	r28
    17f0:	df 93       	push	r29
    17f2:	ec 01       	movw	r28, r24
    17f4:	7b 01       	movw	r14, r22
    17f6:	5a 01       	movw	r10, r20
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	uint16_t BytesInTransfer = 0;
	uint8_t  ErrorCode;

	if ((ErrorCode = Endpoint_WaitUntilReady()))
    17f8:	d7 d1       	rcall	.+942    	; 0x1ba8 <Endpoint_WaitUntilReady>
    17fa:	d8 2e       	mov	r13, r24
    17fc:	88 23       	and	r24, r24
    17fe:	e1 f5       	brne	.+120    	; 0x1878 <Endpoint_Read_Stream_BE+0x98>
    1800:	87 01       	movw	r16, r14

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
    1802:	01 50       	subi	r16, 0x01	; 1
    1804:	10 40       	sbci	r17, 0x00	; 0
    1806:	0c 0f       	add	r16, r28
    1808:	1d 1f       	adc	r17, r29
    180a:	a1 14       	cp	r10, r1
	uint8_t  ErrorCode;

	if ((ErrorCode = Endpoint_WaitUntilReady()))
	  return ErrorCode;

	if (BytesProcessed != NULL)
    180c:	b1 04       	cpc	r11, r1
    180e:	39 f0       	breq	.+14     	; 0x181e <Endpoint_Read_Stream_BE+0x3e>
    1810:	f5 01       	movw	r30, r10
	{
		Length -= *BytesProcessed;
    1812:	80 81       	ld	r24, Z
    1814:	91 81       	ldd	r25, Z+1	; 0x01
    1816:	e8 1a       	sub	r14, r24
    1818:	f9 0a       	sbc	r15, r25
    181a:	08 1b       	sub	r16, r24
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
    181c:	19 0b       	sbc	r17, r25
    181e:	c0 e0       	ldi	r28, 0x00	; 0
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
    1820:	d0 e0       	ldi	r29, 0x00	; 0
    1822:	25 c0       	rjmp	.+74     	; 0x186e <Endpoint_Read_Stream_BE+0x8e>
    1824:	80 91 e8 00 	lds	r24, 0x00E8
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    1828:	85 fd       	sbrc	r24, 5
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
	{
		if (!(Endpoint_IsReadWriteAllowed()))
    182a:	17 c0       	rjmp	.+46     	; 0x185a <Endpoint_Read_Stream_BE+0x7a>
    182c:	80 91 e8 00 	lds	r24, 0x00E8
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    1830:	8b 77       	andi	r24, 0x7B	; 123
    1832:	80 93 e8 00 	sts	0x00E8, r24
    1836:	56 d4       	rcall	.+2220   	; 0x20e4 <USB_USBTask>
		{
			TEMPLATE_CLEAR_ENDPOINT();

			#if !defined(INTERRUPT_CONTROL_ENDPOINT)
			USB_USBTask();
    1838:	a1 14       	cp	r10, r1
    183a:	b1 04       	cpc	r11, r1
			#endif

			if (BytesProcessed != NULL)
    183c:	51 f0       	breq	.+20     	; 0x1852 <Endpoint_Read_Stream_BE+0x72>
    183e:	f5 01       	movw	r30, r10
    1840:	80 81       	ld	r24, Z
			{
				*BytesProcessed += BytesInTransfer;
    1842:	91 81       	ldd	r25, Z+1	; 0x01
    1844:	8c 0f       	add	r24, r28
    1846:	9d 1f       	adc	r25, r29
    1848:	91 83       	std	Z+1, r25	; 0x01
    184a:	80 83       	st	Z, r24
    184c:	55 e0       	ldi	r21, 0x05	; 5
    184e:	d5 2e       	mov	r13, r21
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
    1850:	13 c0       	rjmp	.+38     	; 0x1878 <Endpoint_Read_Stream_BE+0x98>
    1852:	aa d1       	rcall	.+852    	; 0x1ba8 <Endpoint_WaitUntilReady>
    1854:	88 23       	and	r24, r24
			}

			if ((ErrorCode = Endpoint_WaitUntilReady()))
    1856:	59 f0       	breq	.+22     	; 0x186e <Endpoint_Read_Stream_BE+0x8e>
    1858:	0e c0       	rjmp	.+28     	; 0x1876 <Endpoint_Read_Stream_BE+0x96>
    185a:	80 91 f1 00 	lds	r24, 0x00F1
    185e:	f8 01       	movw	r30, r16
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    1860:	80 83       	st	Z, r24
    1862:	01 50       	subi	r16, 0x01	; 1
			  return ErrorCode;
		}
		else
		{
			TEMPLATE_TRANSFER_BYTE(DataStream);
    1864:	10 40       	sbci	r17, 0x00	; 0
    1866:	08 94       	sec
			TEMPLATE_BUFFER_MOVE(DataStream, 1);
    1868:	e1 08       	sbc	r14, r1
    186a:	f1 08       	sbc	r15, r1
			Length--;
    186c:	21 96       	adiw	r28, 0x01	; 1
    186e:	e1 14       	cp	r14, r1
    1870:	f1 04       	cpc	r15, r1
			BytesInTransfer++;
    1872:	c1 f6       	brne	.-80     	; 0x1824 <Endpoint_Read_Stream_BE+0x44>
	{
		Length -= *BytesProcessed;
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
    1874:	01 c0       	rjmp	.+2      	; 0x1878 <Endpoint_Read_Stream_BE+0x98>
    1876:	d8 2e       	mov	r13, r24
    1878:	8d 2d       	mov	r24, r13
    187a:	df 91       	pop	r29
			{
				*BytesProcessed += BytesInTransfer;
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
			}

			if ((ErrorCode = Endpoint_WaitUntilReady()))
    187c:	cf 91       	pop	r28
			BytesInTransfer++;
		}
	}

	return ENDPOINT_RWSTREAM_NoError;
}
    187e:	1f 91       	pop	r17
    1880:	0f 91       	pop	r16
    1882:	ff 90       	pop	r15
    1884:	ef 90       	pop	r14
    1886:	df 90       	pop	r13
    1888:	bf 90       	pop	r11
    188a:	af 90       	pop	r10
    188c:	08 95       	ret

0000188e <Endpoint_Write_Control_Stream_LE>:
    188e:	20 91 f8 02 	lds	r18, 0x02F8
    1892:	30 91 f9 02 	lds	r19, 0x02F9
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
    1896:	26 17       	cp	r18, r22
    1898:	37 07       	cpc	r19, r23
    189a:	20 f4       	brcc	.+8      	; 0x18a4 <Endpoint_Write_Control_Stream_LE+0x16>
    189c:	b9 01       	movw	r22, r18
    189e:	fc 01       	movw	r30, r24
    18a0:	20 e0       	ldi	r18, 0x00	; 0
    18a2:	35 c0       	rjmp	.+106    	; 0x190e <Endpoint_Write_Control_Stream_LE+0x80>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
    18a4:	61 15       	cp	r22, r1
    18a6:	71 05       	cpc	r23, r1
    18a8:	d1 f7       	brne	.-12     	; 0x189e <Endpoint_Write_Control_Stream_LE+0x10>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    18aa:	20 91 e8 00 	lds	r18, 0x00E8
    18ae:	2e 77       	andi	r18, 0x7E	; 126
    18b0:	20 93 e8 00 	sts	0x00E8, r18
    18b4:	f4 cf       	rjmp	.-24     	; 0x189e <Endpoint_Write_Control_Stream_LE+0x10>
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    18b6:	8e b3       	in	r24, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    18b8:	88 23       	and	r24, r24
    18ba:	f1 f1       	breq	.+124    	; 0x1938 <Endpoint_Write_Control_Stream_LE+0xaa>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    18bc:	85 30       	cpi	r24, 0x05	; 5
    18be:	c1 f1       	breq	.+112    	; 0x1930 <Endpoint_Write_Control_Stream_LE+0xa2>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    18c0:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    18c4:	83 fd       	sbrc	r24, 3
    18c6:	36 c0       	rjmp	.+108    	; 0x1934 <Endpoint_Write_Control_Stream_LE+0xa6>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    18c8:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
    18cc:	82 fd       	sbrc	r24, 2
    18ce:	2a c0       	rjmp	.+84     	; 0x1924 <Endpoint_Write_Control_Stream_LE+0x96>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    18d0:	80 91 e8 00 	lds	r24, 0x00E8
		  break;

		if (Endpoint_IsINReady())
    18d4:	80 ff       	sbrs	r24, 0
    18d6:	1b c0       	rjmp	.+54     	; 0x190e <Endpoint_Write_Control_Stream_LE+0x80>
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
    18d8:	80 91 f2 00 	lds	r24, 0x00F2
    18dc:	90 91 f3 00 	lds	r25, 0x00F3
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
    18e0:	06 c0       	rjmp	.+12     	; 0x18ee <Endpoint_Write_Control_Stream_LE+0x60>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
    18e2:	21 91       	ld	r18, Z+
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    18e4:	20 93 f1 00 	sts	0x00F1, r18
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
    18e8:	61 50       	subi	r22, 0x01	; 1
    18ea:	70 40       	sbci	r23, 0x00	; 0
				BytesInEndpoint++;
    18ec:	01 96       	adiw	r24, 0x01	; 1

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
    18ee:	61 15       	cp	r22, r1
    18f0:	71 05       	cpc	r23, r1
    18f2:	19 f0       	breq	.+6      	; 0x18fa <Endpoint_Write_Control_Stream_LE+0x6c>
    18f4:	80 31       	cpi	r24, 0x10	; 16
    18f6:	91 05       	cpc	r25, r1
    18f8:	a0 f3       	brcs	.-24     	; 0x18e2 <Endpoint_Write_Control_Stream_LE+0x54>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
    18fa:	21 e0       	ldi	r18, 0x01	; 1
    18fc:	80 31       	cpi	r24, 0x10	; 16
    18fe:	91 05       	cpc	r25, r1
    1900:	09 f0       	breq	.+2      	; 0x1904 <Endpoint_Write_Control_Stream_LE+0x76>
    1902:	20 e0       	ldi	r18, 0x00	; 0
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1904:	80 91 e8 00 	lds	r24, 0x00E8
    1908:	8e 77       	andi	r24, 0x7E	; 126
    190a:	80 93 e8 00 	sts	0x00E8, r24
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
    190e:	61 15       	cp	r22, r1
    1910:	71 05       	cpc	r23, r1
    1912:	89 f6       	brne	.-94     	; 0x18b6 <Endpoint_Write_Control_Stream_LE+0x28>
    1914:	22 23       	and	r18, r18
    1916:	79 f6       	brne	.-98     	; 0x18b6 <Endpoint_Write_Control_Stream_LE+0x28>
    1918:	05 c0       	rjmp	.+10     	; 0x1924 <Endpoint_Write_Control_Stream_LE+0x96>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    191a:	8e b3       	in	r24, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    191c:	88 23       	and	r24, r24
    191e:	61 f0       	breq	.+24     	; 0x1938 <Endpoint_Write_Control_Stream_LE+0xaa>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    1920:	85 30       	cpi	r24, 0x05	; 5
    1922:	61 f0       	breq	.+24     	; 0x193c <Endpoint_Write_Control_Stream_LE+0xae>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    1924:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
    1928:	82 ff       	sbrs	r24, 2
    192a:	f7 cf       	rjmp	.-18     	; 0x191a <Endpoint_Write_Control_Stream_LE+0x8c>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
    192c:	80 e0       	ldi	r24, 0x00	; 0
    192e:	08 95       	ret
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
    1930:	83 e0       	ldi	r24, 0x03	; 3
    1932:	08 95       	ret
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
    1934:	81 e0       	ldi	r24, 0x01	; 1
    1936:	08 95       	ret
	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
    1938:	82 e0       	ldi	r24, 0x02	; 2
    193a:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
    193c:	83 e0       	ldi	r24, 0x03	; 3
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
    193e:	08 95       	ret

00001940 <Endpoint_Write_Control_PStream_LE>:
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
    1940:	20 91 f8 02 	lds	r18, 0x02F8
    1944:	30 91 f9 02 	lds	r19, 0x02F9
    1948:	26 17       	cp	r18, r22
    194a:	37 07       	cpc	r19, r23
    194c:	20 f4       	brcc	.+8      	; 0x1956 <Endpoint_Write_Control_PStream_LE+0x16>
    194e:	b9 01       	movw	r22, r18
    1950:	fc 01       	movw	r30, r24
    1952:	20 e0       	ldi	r18, 0x00	; 0
    1954:	37 c0       	rjmp	.+110    	; 0x19c4 <Endpoint_Write_Control_PStream_LE+0x84>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
    1956:	61 15       	cp	r22, r1
    1958:	71 05       	cpc	r23, r1
    195a:	d1 f7       	brne	.-12     	; 0x1950 <Endpoint_Write_Control_PStream_LE+0x10>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    195c:	20 91 e8 00 	lds	r18, 0x00E8
    1960:	2e 77       	andi	r18, 0x7E	; 126
    1962:	20 93 e8 00 	sts	0x00E8, r18
    1966:	f4 cf       	rjmp	.-24     	; 0x1950 <Endpoint_Write_Control_PStream_LE+0x10>
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    1968:	8e b3       	in	r24, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    196a:	88 23       	and	r24, r24
    196c:	09 f4       	brne	.+2      	; 0x1970 <Endpoint_Write_Control_PStream_LE+0x30>
    196e:	3f c0       	rjmp	.+126    	; 0x19ee <Endpoint_Write_Control_PStream_LE+0xae>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    1970:	85 30       	cpi	r24, 0x05	; 5
    1972:	c9 f1       	breq	.+114    	; 0x19e6 <Endpoint_Write_Control_PStream_LE+0xa6>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    1974:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    1978:	83 fd       	sbrc	r24, 3
    197a:	37 c0       	rjmp	.+110    	; 0x19ea <Endpoint_Write_Control_PStream_LE+0xaa>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    197c:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
    1980:	82 fd       	sbrc	r24, 2
    1982:	2b c0       	rjmp	.+86     	; 0x19da <Endpoint_Write_Control_PStream_LE+0x9a>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1984:	80 91 e8 00 	lds	r24, 0x00E8
		  break;

		if (Endpoint_IsINReady())
    1988:	80 ff       	sbrs	r24, 0
    198a:	1c c0       	rjmp	.+56     	; 0x19c4 <Endpoint_Write_Control_PStream_LE+0x84>
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
    198c:	80 91 f2 00 	lds	r24, 0x00F2
    1990:	90 91 f3 00 	lds	r25, 0x00F3
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
    1994:	07 c0       	rjmp	.+14     	; 0x19a4 <Endpoint_Write_Control_PStream_LE+0x64>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
    1996:	24 91       	lpm	r18, Z
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    1998:	20 93 f1 00 	sts	0x00F1, r18
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
    199c:	31 96       	adiw	r30, 0x01	; 1
				Length--;
    199e:	61 50       	subi	r22, 0x01	; 1
    19a0:	70 40       	sbci	r23, 0x00	; 0
				BytesInEndpoint++;
    19a2:	01 96       	adiw	r24, 0x01	; 1

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
    19a4:	61 15       	cp	r22, r1
    19a6:	71 05       	cpc	r23, r1
    19a8:	19 f0       	breq	.+6      	; 0x19b0 <Endpoint_Write_Control_PStream_LE+0x70>
    19aa:	80 31       	cpi	r24, 0x10	; 16
    19ac:	91 05       	cpc	r25, r1
    19ae:	98 f3       	brcs	.-26     	; 0x1996 <Endpoint_Write_Control_PStream_LE+0x56>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
    19b0:	21 e0       	ldi	r18, 0x01	; 1
    19b2:	80 31       	cpi	r24, 0x10	; 16
    19b4:	91 05       	cpc	r25, r1
    19b6:	09 f0       	breq	.+2      	; 0x19ba <Endpoint_Write_Control_PStream_LE+0x7a>
    19b8:	20 e0       	ldi	r18, 0x00	; 0
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    19ba:	80 91 e8 00 	lds	r24, 0x00E8
    19be:	8e 77       	andi	r24, 0x7E	; 126
    19c0:	80 93 e8 00 	sts	0x00E8, r24
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
    19c4:	61 15       	cp	r22, r1
    19c6:	71 05       	cpc	r23, r1
    19c8:	79 f6       	brne	.-98     	; 0x1968 <Endpoint_Write_Control_PStream_LE+0x28>
    19ca:	22 23       	and	r18, r18
    19cc:	69 f6       	brne	.-102    	; 0x1968 <Endpoint_Write_Control_PStream_LE+0x28>
    19ce:	05 c0       	rjmp	.+10     	; 0x19da <Endpoint_Write_Control_PStream_LE+0x9a>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    19d0:	8e b3       	in	r24, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    19d2:	88 23       	and	r24, r24
    19d4:	61 f0       	breq	.+24     	; 0x19ee <Endpoint_Write_Control_PStream_LE+0xae>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    19d6:	85 30       	cpi	r24, 0x05	; 5
    19d8:	61 f0       	breq	.+24     	; 0x19f2 <Endpoint_Write_Control_PStream_LE+0xb2>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    19da:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
    19de:	82 ff       	sbrs	r24, 2
    19e0:	f7 cf       	rjmp	.-18     	; 0x19d0 <Endpoint_Write_Control_PStream_LE+0x90>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
    19e2:	80 e0       	ldi	r24, 0x00	; 0
    19e4:	08 95       	ret
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
    19e6:	83 e0       	ldi	r24, 0x03	; 3
    19e8:	08 95       	ret
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
    19ea:	81 e0       	ldi	r24, 0x01	; 1
    19ec:	08 95       	ret
	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
    19ee:	82 e0       	ldi	r24, 0x02	; 2
    19f0:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
    19f2:	83 e0       	ldi	r24, 0x03	; 3
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
    19f4:	08 95       	ret

000019f6 <Endpoint_Write_Control_EStream_LE>:

#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
                            uint16_t Length)
{
    19f6:	ef 92       	push	r14
    19f8:	ff 92       	push	r15
    19fa:	0f 93       	push	r16
    19fc:	1f 93       	push	r17
    19fe:	cf 93       	push	r28
    1a00:	df 93       	push	r29
    1a02:	8b 01       	movw	r16, r22
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
    1a04:	20 91 f8 02 	lds	r18, 0x02F8
    1a08:	30 91 f9 02 	lds	r19, 0x02F9
    1a0c:	26 17       	cp	r18, r22
    1a0e:	37 07       	cpc	r19, r23
    1a10:	20 f4       	brcc	.+8      	; 0x1a1a <Endpoint_Write_Control_EStream_LE+0x24>
    1a12:	89 01       	movw	r16, r18
    1a14:	7c 01       	movw	r14, r24
    1a16:	80 e0       	ldi	r24, 0x00	; 0
    1a18:	3b c0       	rjmp	.+118    	; 0x1a90 <Endpoint_Write_Control_EStream_LE+0x9a>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
    1a1a:	61 15       	cp	r22, r1
    1a1c:	71 05       	cpc	r23, r1
    1a1e:	d1 f7       	brne	.-12     	; 0x1a14 <Endpoint_Write_Control_EStream_LE+0x1e>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1a20:	20 91 e8 00 	lds	r18, 0x00E8
    1a24:	2e 77       	andi	r18, 0x7E	; 126
    1a26:	20 93 e8 00 	sts	0x00E8, r18
    1a2a:	f4 cf       	rjmp	.-24     	; 0x1a14 <Endpoint_Write_Control_EStream_LE+0x1e>
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    1a2c:	9e b3       	in	r25, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    1a2e:	99 23       	and	r25, r25
    1a30:	09 f4       	brne	.+2      	; 0x1a34 <Endpoint_Write_Control_EStream_LE+0x3e>
    1a32:	41 c0       	rjmp	.+130    	; 0x1ab6 <Endpoint_Write_Control_EStream_LE+0xc0>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    1a34:	95 30       	cpi	r25, 0x05	; 5
    1a36:	09 f4       	brne	.+2      	; 0x1a3a <Endpoint_Write_Control_EStream_LE+0x44>
    1a38:	40 c0       	rjmp	.+128    	; 0x1aba <Endpoint_Write_Control_EStream_LE+0xc4>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    1a3a:	90 91 e8 00 	lds	r25, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    1a3e:	93 fd       	sbrc	r25, 3
    1a40:	38 c0       	rjmp	.+112    	; 0x1ab2 <Endpoint_Write_Control_EStream_LE+0xbc>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    1a42:	90 91 e8 00 	lds	r25, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
    1a46:	92 fd       	sbrc	r25, 2
    1a48:	2e c0       	rjmp	.+92     	; 0x1aa6 <Endpoint_Write_Control_EStream_LE+0xb0>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1a4a:	90 91 e8 00 	lds	r25, 0x00E8
		  break;

		if (Endpoint_IsINReady())
    1a4e:	90 ff       	sbrs	r25, 0
    1a50:	1f c0       	rjmp	.+62     	; 0x1a90 <Endpoint_Write_Control_EStream_LE+0x9a>
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
    1a52:	c0 91 f2 00 	lds	r28, 0x00F2
    1a56:	d0 91 f3 00 	lds	r29, 0x00F3
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
    1a5a:	0a c0       	rjmp	.+20     	; 0x1a70 <Endpoint_Write_Control_EStream_LE+0x7a>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
    1a5c:	c7 01       	movw	r24, r14
    1a5e:	f1 d4       	rcall	.+2530   	; 0x2442 <__eerd_byte_usb1287>
    1a60:	80 93 f1 00 	sts	0x00F1, r24
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    1a64:	08 94       	sec
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
    1a66:	e1 1c       	adc	r14, r1
    1a68:	f1 1c       	adc	r15, r1
    1a6a:	01 50       	subi	r16, 0x01	; 1
				Length--;
    1a6c:	10 40       	sbci	r17, 0x00	; 0
    1a6e:	21 96       	adiw	r28, 0x01	; 1
				BytesInEndpoint++;
    1a70:	01 15       	cp	r16, r1

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
    1a72:	11 05       	cpc	r17, r1
    1a74:	19 f0       	breq	.+6      	; 0x1a7c <Endpoint_Write_Control_EStream_LE+0x86>
    1a76:	c0 31       	cpi	r28, 0x10	; 16
    1a78:	d1 05       	cpc	r29, r1
    1a7a:	80 f3       	brcs	.-32     	; 0x1a5c <Endpoint_Write_Control_EStream_LE+0x66>
    1a7c:	81 e0       	ldi	r24, 0x01	; 1
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
    1a7e:	c0 31       	cpi	r28, 0x10	; 16
    1a80:	d1 05       	cpc	r29, r1
    1a82:	09 f0       	breq	.+2      	; 0x1a86 <Endpoint_Write_Control_EStream_LE+0x90>
    1a84:	80 e0       	ldi	r24, 0x00	; 0
    1a86:	90 91 e8 00 	lds	r25, 0x00E8
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1a8a:	9e 77       	andi	r25, 0x7E	; 126
    1a8c:	90 93 e8 00 	sts	0x00E8, r25
    1a90:	01 15       	cp	r16, r1
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
    1a92:	11 05       	cpc	r17, r1
    1a94:	59 f6       	brne	.-106    	; 0x1a2c <Endpoint_Write_Control_EStream_LE+0x36>
    1a96:	88 23       	and	r24, r24
    1a98:	49 f6       	brne	.-110    	; 0x1a2c <Endpoint_Write_Control_EStream_LE+0x36>
    1a9a:	05 c0       	rjmp	.+10     	; 0x1aa6 <Endpoint_Write_Control_EStream_LE+0xb0>
    1a9c:	8e b3       	in	r24, 0x1e	; 30
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    1a9e:	88 23       	and	r24, r24

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    1aa0:	51 f0       	breq	.+20     	; 0x1ab6 <Endpoint_Write_Control_EStream_LE+0xc0>
    1aa2:	85 30       	cpi	r24, 0x05	; 5
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    1aa4:	51 f0       	breq	.+20     	; 0x1aba <Endpoint_Write_Control_EStream_LE+0xc4>
    1aa6:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    1aaa:	82 ff       	sbrs	r24, 2
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
    1aac:	f7 cf       	rjmp	.-18     	; 0x1a9c <Endpoint_Write_Control_EStream_LE+0xa6>
    1aae:	80 e0       	ldi	r24, 0x00	; 0
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
    1ab0:	05 c0       	rjmp	.+10     	; 0x1abc <Endpoint_Write_Control_EStream_LE+0xc6>
    1ab2:	81 e0       	ldi	r24, 0x01	; 1
		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
    1ab4:	03 c0       	rjmp	.+6      	; 0x1abc <Endpoint_Write_Control_EStream_LE+0xc6>
    1ab6:	82 e0       	ldi	r24, 0x02	; 2
	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
    1ab8:	01 c0       	rjmp	.+2      	; 0x1abc <Endpoint_Write_Control_EStream_LE+0xc6>
    1aba:	83 e0       	ldi	r24, 0x03	; 3
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
    1abc:	df 91       	pop	r29
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
    1abe:	cf 91       	pop	r28
    1ac0:	1f 91       	pop	r17
    1ac2:	0f 91       	pop	r16
    1ac4:	ff 90       	pop	r15
    1ac6:	ef 90       	pop	r14
    1ac8:	08 95       	ret

00001aca <Endpoint_ConfigureEndpoint_Prv>:
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1aca:	8f 70       	andi	r24, 0x0F	; 15
    1acc:	80 93 e9 00 	sts	0x00E9, r24
			 *  \note Endpoints must first be configured properly via \ref Endpoint_ConfigureEndpoint().
			 */
			static inline void Endpoint_EnableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_EnableEndpoint(void)
			{
				UECONX |= (1 << EPEN);
    1ad0:	eb ee       	ldi	r30, 0xEB	; 235
    1ad2:	f0 e0       	ldi	r31, 0x00	; 0
    1ad4:	80 81       	ld	r24, Z
    1ad6:	81 60       	ori	r24, 0x01	; 1
    1ad8:	80 83       	st	Z, r24
{
#if defined(CONTROL_ONLY_DEVICE) || defined(ORDERED_EP_CONFIG)
	Endpoint_SelectEndpoint(Number);
	Endpoint_EnableEndpoint();

	UECFG1X = 0;
    1ada:	ed ee       	ldi	r30, 0xED	; 237
    1adc:	f0 e0       	ldi	r31, 0x00	; 0
    1ade:	10 82       	st	Z, r1
	UECFG0X = UECFG0XData;
    1ae0:	60 93 ec 00 	sts	0x00EC, r22
	UECFG1X = UECFG1XData;
    1ae4:	40 83       	st	Z, r20
			 *  \return Boolean \c true if the currently selected endpoint has been configured, \c false otherwise.
			 */
			static inline bool Endpoint_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsConfigured(void)
			{
				return ((UESTA0X & (1 << CFGOK)) ? true : false);
    1ae6:	80 91 ee 00 	lds	r24, 0x00EE
	}

	Endpoint_SelectEndpoint(Number);
	return true;
#endif
}
    1aea:	88 1f       	adc	r24, r24
    1aec:	88 27       	eor	r24, r24
    1aee:	88 1f       	adc	r24, r24
    1af0:	08 95       	ret

00001af2 <Endpoint_ConfigureEndpointTable>:
uint8_t USB_Device_ControlEndpointSize = ENDPOINT_CONTROLEP_DEFAULT_SIZE;
#endif

bool Endpoint_ConfigureEndpointTable(const USB_Endpoint_Table_t* const Table,
                                     const uint8_t Entries)
{
    1af2:	0f 93       	push	r16
    1af4:	1f 93       	push	r17
    1af6:	cf 93       	push	r28
    1af8:	df 93       	push	r29
    1afa:	16 2f       	mov	r17, r22
	{
		if (!(Table[i].Address))
		  continue;
	
		if (!(Endpoint_ConfigureEndpoint(Table[i].Address, Table[i].Type, Table[i].Size, Table[i].Banks)))
		  return false;
    1afc:	ec 01       	movw	r28, r24
#endif

bool Endpoint_ConfigureEndpointTable(const USB_Endpoint_Table_t* const Table,
                                     const uint8_t Entries)
{
	for (uint8_t i = 0; i < Entries; i++)
    1afe:	00 e0       	ldi	r16, 0x00	; 0
    1b00:	2a c0       	rjmp	.+84     	; 0x1b56 <Endpoint_ConfigureEndpointTable+0x64>
	{
		if (!(Table[i].Address))
    1b02:	98 81       	ld	r25, Y
    1b04:	99 23       	and	r25, r25
    1b06:	29 f1       	breq	.+74     	; 0x1b52 <Endpoint_ConfigureEndpointTable+0x60>
		  continue;
	
		if (!(Endpoint_ConfigureEndpoint(Table[i].Address, Table[i].Type, Table[i].Size, Table[i].Banks)))
    1b08:	6b 81       	ldd	r22, Y+3	; 0x03
    1b0a:	e9 81       	ldd	r30, Y+1	; 0x01
    1b0c:	fa 81       	ldd	r31, Y+2	; 0x02
    1b0e:	2c 81       	ldd	r18, Y+4	; 0x04
			static inline bool Endpoint_ConfigureEndpoint(const uint8_t Address,
			                                              const uint8_t Type,
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);
    1b10:	89 2f       	mov	r24, r25
    1b12:	8f 70       	andi	r24, 0x0F	; 15

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
    1b14:	87 30       	cpi	r24, 0x07	; 7
    1b16:	18 f5       	brcc	.+70     	; 0x1b5e <Endpoint_ConfigureEndpointTable+0x6c>
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
				                                      ((Type << EPTYPE0) | ((Address & ENDPOINT_DIR_IN) ? (1 << EPDIR) : 0)),
    1b18:	62 95       	swap	r22
    1b1a:	66 0f       	add	r22, r22
    1b1c:	66 0f       	add	r22, r22
    1b1e:	60 7c       	andi	r22, 0xC0	; 192
    1b20:	99 1f       	adc	r25, r25
    1b22:	99 27       	eor	r25, r25
    1b24:	99 1f       	adc	r25, r25
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
    1b26:	69 2b       	or	r22, r25
    1b28:	22 30       	cpi	r18, 0x02	; 2
    1b2a:	10 f0       	brcs	.+4      	; 0x1b30 <Endpoint_ConfigureEndpointTable+0x3e>
    1b2c:	96 e0       	ldi	r25, 0x06	; 6
    1b2e:	01 c0       	rjmp	.+2      	; 0x1b32 <Endpoint_ConfigureEndpointTable+0x40>
    1b30:	92 e0       	ldi	r25, 0x02	; 2
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes) ATTR_WARN_UNUSED_RESULT ATTR_CONST
			                                                                       ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;
    1b32:	28 e0       	ldi	r18, 0x08	; 8
    1b34:	30 e0       	ldi	r19, 0x00	; 0
		/* Inline Functions: */
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes) ATTR_WARN_UNUSED_RESULT ATTR_CONST
			                                                                       ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
    1b36:	40 e0       	ldi	r20, 0x00	; 0
    1b38:	03 c0       	rjmp	.+6      	; 0x1b40 <Endpoint_ConfigureEndpointTable+0x4e>
				uint16_t CheckBytes = 8;

				while (CheckBytes < Bytes)
				{
					MaskVal++;
    1b3a:	4f 5f       	subi	r20, 0xFF	; 255
					CheckBytes <<= 1;
    1b3c:	22 0f       	add	r18, r18
    1b3e:	33 1f       	adc	r19, r19
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while (CheckBytes < Bytes)
    1b40:	2e 17       	cp	r18, r30
    1b42:	3f 07       	cpc	r19, r31
    1b44:	d0 f3       	brcs	.-12     	; 0x1b3a <Endpoint_ConfigureEndpointTable+0x48>
				{
					MaskVal++;
					CheckBytes <<= 1;
				}

				return (MaskVal << EPSIZE0);
    1b46:	42 95       	swap	r20
    1b48:	40 7f       	andi	r20, 0xF0	; 240
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
    1b4a:	49 2b       	or	r20, r25
    1b4c:	be df       	rcall	.-132    	; 0x1aca <Endpoint_ConfigureEndpoint_Prv>
    1b4e:	88 23       	and	r24, r24
    1b50:	31 f0       	breq	.+12     	; 0x1b5e <Endpoint_ConfigureEndpointTable+0x6c>
    1b52:	0f 5f       	subi	r16, 0xFF	; 255
#endif

bool Endpoint_ConfigureEndpointTable(const USB_Endpoint_Table_t* const Table,
                                     const uint8_t Entries)
{
	for (uint8_t i = 0; i < Entries; i++)
    1b54:	25 96       	adiw	r28, 0x05	; 5
    1b56:	01 17       	cp	r16, r17
    1b58:	a1 f6       	brne	.-88     	; 0x1b02 <Endpoint_ConfigureEndpointTable+0x10>
    1b5a:	81 e0       	ldi	r24, 0x01	; 1
	
		if (!(Endpoint_ConfigureEndpoint(Table[i].Address, Table[i].Type, Table[i].Size, Table[i].Banks)))
		  return false;
	}
	
	return true;
    1b5c:	01 c0       	rjmp	.+2      	; 0x1b60 <Endpoint_ConfigureEndpointTable+0x6e>
    1b5e:	80 e0       	ldi	r24, 0x00	; 0
	{
		if (!(Table[i].Address))
		  continue;
	
		if (!(Endpoint_ConfigureEndpoint(Table[i].Address, Table[i].Type, Table[i].Size, Table[i].Banks)))
		  return false;
    1b60:	df 91       	pop	r29
	}
	
	return true;
}
    1b62:	cf 91       	pop	r28
    1b64:	1f 91       	pop	r17
    1b66:	0f 91       	pop	r16
    1b68:	08 95       	ret

00001b6a <Endpoint_ClearStatusStage>:
    1b6a:	80 91 f2 02 	lds	r24, 0x02F2
	}
}

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
    1b6e:	87 ff       	sbrs	r24, 7
    1b70:	11 c0       	rjmp	.+34     	; 0x1b94 <Endpoint_ClearStatusStage+0x2a>
    1b72:	03 c0       	rjmp	.+6      	; 0x1b7a <Endpoint_ClearStatusStage+0x10>
	{
		while (!(Endpoint_IsOUTReceived()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
    1b74:	8e b3       	in	r24, 0x1e	; 30
    1b76:	88 23       	and	r24, r24
    1b78:	b1 f0       	breq	.+44     	; 0x1ba6 <Endpoint_ClearStatusStage+0x3c>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    1b7a:	80 91 e8 00 	lds	r24, 0x00E8

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
	{
		while (!(Endpoint_IsOUTReceived()))
    1b7e:	82 ff       	sbrs	r24, 2
    1b80:	f9 cf       	rjmp	.-14     	; 0x1b74 <Endpoint_ClearStatusStage+0xa>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    1b82:	80 91 e8 00 	lds	r24, 0x00E8
    1b86:	8b 77       	andi	r24, 0x7B	; 123
    1b88:	80 93 e8 00 	sts	0x00E8, r24
    1b8c:	08 95       	ret
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
    1b8e:	8e b3       	in	r24, 0x1e	; 30
    1b90:	88 23       	and	r24, r24
    1b92:	49 f0       	breq	.+18     	; 0x1ba6 <Endpoint_ClearStatusStage+0x3c>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1b94:	80 91 e8 00 	lds	r24, 0x00E8

		Endpoint_ClearOUT();
	}
	else
	{
		while (!(Endpoint_IsINReady()))
    1b98:	80 ff       	sbrs	r24, 0
    1b9a:	f9 cf       	rjmp	.-14     	; 0x1b8e <Endpoint_ClearStatusStage+0x24>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1b9c:	80 91 e8 00 	lds	r24, 0x00E8
    1ba0:	8e 77       	andi	r24, 0x7E	; 126
    1ba2:	80 93 e8 00 	sts	0x00E8, r24
    1ba6:	08 95       	ret

00001ba8 <Endpoint_WaitUntilReady>:
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
    1ba8:	80 91 e4 00 	lds	r24, 0x00E4
    1bac:	90 91 e5 00 	lds	r25, 0x00E5
    1bb0:	45 e6       	ldi	r20, 0x65	; 101
    1bb2:	01 c0       	rjmp	.+2      	; 0x1bb6 <Endpoint_WaitUntilReady+0xe>
    1bb4:	c9 01       	movw	r24, r18
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    1bb6:	20 91 ec 00 	lds	r18, 0x00EC
    1bba:	20 ff       	sbrs	r18, 0
    1bbc:	22 c0       	rjmp	.+68     	; 0x1c02 <Endpoint_WaitUntilReady+0x5a>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1bbe:	20 91 e8 00 	lds	r18, 0x00E8

	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
    1bc2:	20 fd       	sbrc	r18, 0
    1bc4:	14 c0       	rjmp	.+40     	; 0x1bee <Endpoint_WaitUntilReady+0x46>
		{
			if (Endpoint_IsOUTReceived())
			  return ENDPOINT_READYWAIT_NoError;
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    1bc6:	2e b3       	in	r18, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    1bc8:	22 23       	and	r18, r18
    1bca:	99 f0       	breq	.+38     	; 0x1bf2 <Endpoint_WaitUntilReady+0x4a>
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    1bcc:	25 30       	cpi	r18, 0x05	; 5
    1bce:	99 f0       	breq	.+38     	; 0x1bf6 <Endpoint_WaitUntilReady+0x4e>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    1bd0:	20 91 eb 00 	lds	r18, 0x00EB
		  return ENDPOINT_READYWAIT_BusSuspended;
		else if (Endpoint_IsStalled())
    1bd4:	25 fd       	sbrc	r18, 5
    1bd6:	11 c0       	rjmp	.+34     	; 0x1bfa <Endpoint_WaitUntilReady+0x52>
    1bd8:	20 91 e4 00 	lds	r18, 0x00E4
    1bdc:	30 91 e5 00 	lds	r19, 0x00E5
		  return ENDPOINT_READYWAIT_EndpointStalled;

		uint16_t CurrentFrameNumber = USB_Device_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
    1be0:	28 17       	cp	r18, r24
    1be2:	39 07       	cpc	r19, r25
    1be4:	41 f3       	breq	.-48     	; 0x1bb6 <Endpoint_WaitUntilReady+0xe>
    1be6:	41 50       	subi	r20, 0x01	; 1
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
    1be8:	29 f7       	brne	.-54     	; 0x1bb4 <Endpoint_WaitUntilReady+0xc>
			  return ENDPOINT_READYWAIT_Timeout;
    1bea:	84 e0       	ldi	r24, 0x04	; 4
    1bec:	08 95       	ret
	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
    1bee:	80 e0       	ldi	r24, 0x00	; 0
    1bf0:	08 95       	ret
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
    1bf2:	82 e0       	ldi	r24, 0x02	; 2
    1bf4:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_READYWAIT_BusSuspended;
    1bf6:	83 e0       	ldi	r24, 0x03	; 3
    1bf8:	08 95       	ret
		else if (Endpoint_IsStalled())
		  return ENDPOINT_READYWAIT_EndpointStalled;
    1bfa:	81 e0       	ldi	r24, 0x01	; 1
    1bfc:	08 95       	ret
			  return ENDPOINT_READYWAIT_NoError;
		}
		else
		{
			if (Endpoint_IsOUTReceived())
			  return ENDPOINT_READYWAIT_NoError;
    1bfe:	80 e0       	ldi	r24, 0x00	; 0

			if (!(TimeoutMSRem--))
			  return ENDPOINT_READYWAIT_Timeout;
		}
	}
}
    1c00:	08 95       	ret
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    1c02:	20 91 e8 00 	lds	r18, 0x00E8
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
		}
		else
		{
			if (Endpoint_IsOUTReceived())
    1c06:	22 ff       	sbrs	r18, 2
    1c08:	de cf       	rjmp	.-68     	; 0x1bc6 <Endpoint_WaitUntilReady+0x1e>
    1c0a:	f9 cf       	rjmp	.-14     	; 0x1bfe <Endpoint_WaitUntilReady+0x56>

00001c0c <USB_ResetInterface>:

	USB_IsInitialized = false;
}

void USB_ResetInterface(void)
{
    1c0c:	0f 93       	push	r16
    1c0e:	1f 93       	push	r17
    1c10:	cf 93       	push	r28
    1c12:	df 93       	push	r29
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
    1c14:	49 d0       	rcall	.+146    	; 0x1ca8 <USB_INT_DisableAllInterrupts>
    1c16:	50 d0       	rcall	.+160    	; 0x1cb8 <USB_INT_ClearAllInterrupts>
	USB_INT_ClearAllInterrupts();
    1c18:	c8 ed       	ldi	r28, 0xD8	; 216
    1c1a:	d0 e0       	ldi	r29, 0x00	; 0
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
    1c1c:	88 81       	ld	r24, Y
    1c1e:	8f 77       	andi	r24, 0x7F	; 127
    1c20:	88 83       	st	Y, r24
    1c22:	88 81       	ld	r24, Y
    1c24:	80 68       	ori	r24, 0x80	; 128
				USBCON |=  (1 << USBE);
    1c26:	88 83       	st	Y, r24
    1c28:	88 81       	ld	r24, Y
    1c2a:	8f 7d       	andi	r24, 0xDF	; 223
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
    1c2c:	88 83       	st	Y, r24
    1c2e:	e7 ed       	ldi	r30, 0xD7	; 215
    1c30:	f0 e0       	ldi	r31, 0x00	; 0

	if (USB_CurrentMode == USB_MODE_Device)
	{
		#if defined(USB_CAN_BE_DEVICE)
		#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
		UHWCON |=  (1 << UIMOD);
    1c32:	80 81       	ld	r24, Z
    1c34:	80 68       	ori	r24, 0x80	; 128
    1c36:	80 83       	st	Z, r24
    1c38:	19 bc       	out	0x29, r1	; 41
    1c3a:	1e ba       	out	0x1e, r1	; 30
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    1c3c:	10 92 f0 02 	sts	0x02F0, r1

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState                 = DEVICE_STATE_Unattached;
	USB_Device_ConfigurationNumber  = 0;
    1c40:	00 ee       	ldi	r16, 0xE0	; 224
    1c42:	10 e0       	ldi	r17, 0x00	; 0
			}

			static inline void USB_Device_SetFullSpeed(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetFullSpeed(void)
			{
				UDCON &= ~(1 << LSM);
    1c44:	f8 01       	movw	r30, r16
    1c46:	80 81       	ld	r24, Z
    1c48:	8b 7f       	andi	r24, 0xFB	; 251
    1c4a:	80 83       	st	Z, r24
    1c4c:	88 81       	ld	r24, Y
    1c4e:	81 60       	ori	r24, 0x01	; 1
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBCON |= (1 << VBUSTE);
    1c50:	88 83       	st	Y, r24
    1c52:	80 e0       	ldi	r24, 0x00	; 0
    1c54:	60 e0       	ldi	r22, 0x00	; 0
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
    1c56:	42 e1       	ldi	r20, 0x12	; 18
    1c58:	38 df       	rcall	.-400    	; 0x1aca <Endpoint_ConfigureEndpoint_Prv>
    1c5a:	e1 ee       	ldi	r30, 0xE1	; 225
    1c5c:	f0 e0       	ldi	r31, 0x00	; 0
    1c5e:	80 81       	ld	r24, Z
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
    1c60:	8e 7f       	andi	r24, 0xFE	; 254
    1c62:	80 83       	st	Z, r24
    1c64:	e2 ee       	ldi	r30, 0xE2	; 226
    1c66:	f0 e0       	ldi	r31, 0x00	; 0
    1c68:	80 81       	ld	r24, Z
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
    1c6a:	81 60       	ori	r24, 0x01	; 1
    1c6c:	80 83       	st	Z, r24
    1c6e:	80 81       	ld	r24, Z
    1c70:	88 60       	ori	r24, 0x08	; 8
    1c72:	80 83       	st	Z, r24
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
    1c74:	f8 01       	movw	r30, r16
    1c76:	80 81       	ld	r24, Z
    1c78:	8e 7f       	andi	r24, 0xFE	; 254
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
    1c7a:	80 83       	st	Z, r24
    1c7c:	88 81       	ld	r24, Y
    1c7e:	80 61       	ori	r24, 0x10	; 16
    1c80:	88 83       	st	Y, r24

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON |=  (1 << OTGPADE);
    1c82:	df 91       	pop	r29
    1c84:	cf 91       	pop	r28
    1c86:	1f 91       	pop	r17
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
    1c88:	0f 91       	pop	r16
    1c8a:	08 95       	ret

00001c8c <USB_Init>:
    1c8c:	e8 ed       	ldi	r30, 0xD8	; 216
    1c8e:	f0 e0       	ldi	r31, 0x00	; 0
    1c90:	80 81       	ld	r24, Z
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON &= ~(1 << OTGPADE);
    1c92:	8f 7e       	andi	r24, 0xEF	; 239
    1c94:	80 83       	st	Z, r24

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON |=  (1 << UVREGE);
    1c96:	e7 ed       	ldi	r30, 0xD7	; 215
    1c98:	f0 e0       	ldi	r31, 0x00	; 0
    1c9a:	80 81       	ld	r24, Z
    1c9c:	81 60       	ori	r24, 0x01	; 1
    1c9e:	80 83       	st	Z, r24
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
    1ca0:	81 e0       	ldi	r24, 0x01	; 1
    1ca2:	80 93 f1 02 	sts	0x02F1, r24

	USB_ResetInterface();
    1ca6:	b2 cf       	rjmp	.-156    	; 0x1c0c <USB_ResetInterface>

00001ca8 <USB_INT_DisableAllInterrupts>:
#include "../USBInterrupt.h"

void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
    1ca8:	e8 ed       	ldi	r30, 0xD8	; 216
    1caa:	f0 e0       	ldi	r31, 0x00	; 0
    1cac:	80 81       	ld	r24, Z
    1cae:	8c 7f       	andi	r24, 0xFC	; 252
    1cb0:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
    1cb2:	10 92 e2 00 	sts	0x00E2, r1
	#endif
}
    1cb6:	08 95       	ret

00001cb8 <USB_INT_ClearAllInterrupts>:

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
    1cb8:	10 92 da 00 	sts	0x00DA, r1
	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
    1cbc:	10 92 e1 00 	sts	0x00E1, r1
	#endif
}
    1cc0:	08 95       	ret

00001cc2 <__vector_10>:

ISR(USB_GEN_vect, ISR_BLOCK)
{
    1cc2:	1f 92       	push	r1
    1cc4:	0f 92       	push	r0
    1cc6:	0f b6       	in	r0, 0x3f	; 63
    1cc8:	0f 92       	push	r0
    1cca:	0b b6       	in	r0, 0x3b	; 59
    1ccc:	0f 92       	push	r0
    1cce:	11 24       	eor	r1, r1
    1cd0:	2f 93       	push	r18
    1cd2:	3f 93       	push	r19
    1cd4:	4f 93       	push	r20
    1cd6:	5f 93       	push	r21
    1cd8:	6f 93       	push	r22
    1cda:	7f 93       	push	r23
    1cdc:	8f 93       	push	r24
    1cde:	9f 93       	push	r25
    1ce0:	af 93       	push	r26
    1ce2:	bf 93       	push	r27
    1ce4:	ef 93       	push	r30
    1ce6:	ff 93       	push	r31
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBINT & (1 << VBUSTI));
    1ce8:	80 91 da 00 	lds	r24, 0x00DA
		EVENT_USB_Device_StartOfFrame();
	}
	#endif

	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	if (USB_INT_HasOccurred(USB_INT_VBUSTI) && USB_INT_IsEnabled(USB_INT_VBUSTI))
    1cec:	80 ff       	sbrs	r24, 0
    1cee:	1d c0       	rjmp	.+58     	; 0x1d2a <__vector_10+0x68>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBCON & (1 << VBUSTE));
    1cf0:	80 91 d8 00 	lds	r24, 0x00D8
    1cf4:	80 ff       	sbrs	r24, 0
    1cf6:	19 c0       	rjmp	.+50     	; 0x1d2a <__vector_10+0x68>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBINT &= ~(1 << VBUSTI);
    1cf8:	80 91 da 00 	lds	r24, 0x00DA
    1cfc:	8e 7f       	andi	r24, 0xFE	; 254
    1cfe:	80 93 da 00 	sts	0x00DA, r24
				 *  \return Boolean \c true if the VBUS line is currently detecting power from a host, \c false otherwise.
				 */
				static inline bool USB_VBUS_GetStatus(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
				static inline bool USB_VBUS_GetStatus(void)
				{
					return ((USBSTA & (1 << VBUS)) ? true : false);
    1d02:	80 91 d9 00 	lds	r24, 0x00D9
	{
		USB_INT_Clear(USB_INT_VBUSTI);

		if (USB_VBUS_GetStatus())
    1d06:	80 ff       	sbrs	r24, 0
    1d08:	0c c0       	rjmp	.+24     	; 0x1d22 <__vector_10+0x60>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
    1d0a:	8c e0       	ldi	r24, 0x0C	; 12
    1d0c:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    1d0e:	8e e0       	ldi	r24, 0x0E	; 14
    1d10:	89 bd       	out	0x29, r24	; 41
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			{
				USB_PLL_On();
				while (!(USB_PLL_IsReady()));
    1d12:	09 b4       	in	r0, 0x29	; 41
    1d14:	00 fe       	sbrs	r0, 0
    1d16:	fd cf       	rjmp	.-6      	; 0x1d12 <__vector_10+0x50>
			}

			USB_DeviceState = DEVICE_STATE_Powered;
    1d18:	81 e0       	ldi	r24, 0x01	; 1
    1d1a:	8e bb       	out	0x1e, r24	; 30
			EVENT_USB_Device_Connect();
    1d1c:	0e 94 f5 01 	call	0x3ea	; 0x3ea <EVENT_USB_Device_Connect>
    1d20:	04 c0       	rjmp	.+8      	; 0x1d2a <__vector_10+0x68>
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    1d22:	19 bc       	out	0x29, r1	; 41
		else
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			  USB_PLL_Off();

			USB_DeviceState = DEVICE_STATE_Unattached;
    1d24:	1e ba       	out	0x1e, r1	; 30
			EVENT_USB_Device_Disconnect();
    1d26:	0e 94 f7 01 	call	0x3ee	; 0x3ee <EVENT_USB_Device_Disconnect>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
    1d2a:	80 91 e1 00 	lds	r24, 0x00E1
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
    1d2e:	80 ff       	sbrs	r24, 0
    1d30:	17 c0       	rjmp	.+46     	; 0x1d60 <__vector_10+0x9e>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
    1d32:	80 91 e2 00 	lds	r24, 0x00E2
    1d36:	80 ff       	sbrs	r24, 0
    1d38:	13 c0       	rjmp	.+38     	; 0x1d60 <__vector_10+0x9e>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
    1d3a:	80 91 e2 00 	lds	r24, 0x00E2
    1d3e:	8e 7f       	andi	r24, 0xFE	; 254
    1d40:	80 93 e2 00 	sts	0x00E2, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
    1d44:	80 91 e2 00 	lds	r24, 0x00E2
    1d48:	80 61       	ori	r24, 0x10	; 16
    1d4a:	80 93 e2 00 	sts	0x00E2, r24
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON |=  (1 << FRZCLK);
    1d4e:	80 91 d8 00 	lds	r24, 0x00D8
    1d52:	80 62       	ori	r24, 0x20	; 32
    1d54:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    1d58:	19 bc       	out	0x29, r1	; 41

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
		EVENT_USB_Device_Disconnect();
		#else
		USB_DeviceState = DEVICE_STATE_Suspended;
    1d5a:	85 e0       	ldi	r24, 0x05	; 5
    1d5c:	8e bb       	out	0x1e, r24	; 30
		EVENT_USB_Device_Suspend();
    1d5e:	c1 d1       	rcall	.+898    	; 0x20e2 <USB_Event_Stub>
    1d60:	80 91 e1 00 	lds	r24, 0x00E1
					case USB_INT_IDTI:
						return (USBINT & (1 << IDTI));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
    1d64:	84 ff       	sbrs	r24, 4
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
    1d66:	2c c0       	rjmp	.+88     	; 0x1dc0 <__vector_10+0xfe>
    1d68:	80 91 e2 00 	lds	r24, 0x00E2
					case USB_INT_IDTI:
						return (USBCON & (1 << IDTE));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
    1d6c:	84 ff       	sbrs	r24, 4
    1d6e:	28 c0       	rjmp	.+80     	; 0x1dc0 <__vector_10+0xfe>
    1d70:	8c e0       	ldi	r24, 0x0C	; 12

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
    1d72:	89 bd       	out	0x29, r24	; 41
    1d74:	8e e0       	ldi	r24, 0x0E	; 14
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    1d76:	89 bd       	out	0x29, r24	; 41
    1d78:	09 b4       	in	r0, 0x29	; 41
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
    1d7a:	00 fe       	sbrs	r0, 0
    1d7c:	fd cf       	rjmp	.-6      	; 0x1d78 <__vector_10+0xb6>
    1d7e:	80 91 d8 00 	lds	r24, 0x00D8
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
    1d82:	8f 7d       	andi	r24, 0xDF	; 223
    1d84:	80 93 d8 00 	sts	0x00D8, r24
    1d88:	80 91 e1 00 	lds	r24, 0x00E1
						USBINT &= ~(1 << IDTI);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
    1d8c:	8f 7e       	andi	r24, 0xEF	; 239
    1d8e:	80 93 e1 00 	sts	0x00E1, r24
    1d92:	80 91 e2 00 	lds	r24, 0x00E2
						USBCON &= ~(1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
    1d96:	8f 7e       	andi	r24, 0xEF	; 239
    1d98:	80 93 e2 00 	sts	0x00E2, r24
    1d9c:	80 91 e2 00 	lds	r24, 0x00E2
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
    1da0:	81 60       	ori	r24, 0x01	; 1
    1da2:	80 93 e2 00 	sts	0x00E2, r24
    1da6:	80 91 f0 02 	lds	r24, 0x02F0
		USB_INT_Clear(USB_INT_WAKEUPI);

		USB_INT_Disable(USB_INT_WAKEUPI);
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_Device_ConfigurationNumber)
    1daa:	88 23       	and	r24, r24
    1dac:	21 f4       	brne	.+8      	; 0x1db6 <__vector_10+0xf4>
    1dae:	80 91 e3 00 	lds	r24, 0x00E3
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
    1db2:	87 ff       	sbrs	r24, 7
		  USB_DeviceState = DEVICE_STATE_Configured;
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
    1db4:	02 c0       	rjmp	.+4      	; 0x1dba <__vector_10+0xf8>
    1db6:	84 e0       	ldi	r24, 0x04	; 4
    1db8:	01 c0       	rjmp	.+2      	; 0x1dbc <__vector_10+0xfa>
    1dba:	81 e0       	ldi	r24, 0x01	; 1
    1dbc:	8e bb       	out	0x1e, r24	; 30
    1dbe:	91 d1       	rcall	.+802    	; 0x20e2 <USB_Event_Stub>

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
		#else
		EVENT_USB_Device_WakeUp();
    1dc0:	80 91 e1 00 	lds	r24, 0x00E1
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
    1dc4:	83 ff       	sbrs	r24, 3
    1dc6:	21 c0       	rjmp	.+66     	; 0x1e0a <__vector_10+0x148>
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
    1dc8:	80 91 e2 00 	lds	r24, 0x00E2
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
    1dcc:	83 ff       	sbrs	r24, 3
    1dce:	1d c0       	rjmp	.+58     	; 0x1e0a <__vector_10+0x148>
    1dd0:	80 91 e1 00 	lds	r24, 0x00E1
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
    1dd4:	87 7f       	andi	r24, 0xF7	; 247
    1dd6:	80 93 e1 00 	sts	0x00E1, r24
    1dda:	82 e0       	ldi	r24, 0x02	; 2
    1ddc:	8e bb       	out	0x1e, r24	; 30
	{
		USB_INT_Clear(USB_INT_EORSTI);

		USB_DeviceState                = DEVICE_STATE_Default;
    1dde:	10 92 f0 02 	sts	0x02F0, r1
		USB_Device_ConfigurationNumber = 0;
    1de2:	80 91 e1 00 	lds	r24, 0x00E1
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
    1de6:	8e 7f       	andi	r24, 0xFE	; 254
    1de8:	80 93 e1 00 	sts	0x00E1, r24
    1dec:	80 91 e2 00 	lds	r24, 0x00E2
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
    1df0:	8e 7f       	andi	r24, 0xFE	; 254
    1df2:	80 93 e2 00 	sts	0x00E2, r24
    1df6:	80 91 e2 00 	lds	r24, 0x00E2
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
    1dfa:	80 61       	ori	r24, 0x10	; 16
    1dfc:	80 93 e2 00 	sts	0x00E2, r24
    1e00:	80 e0       	ldi	r24, 0x00	; 0
    1e02:	60 e0       	ldi	r22, 0x00	; 0
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
    1e04:	42 e1       	ldi	r20, 0x12	; 18
    1e06:	61 de       	rcall	.-830    	; 0x1aca <Endpoint_ConfigureEndpoint_Prv>
    1e08:	6c d1       	rcall	.+728    	; 0x20e2 <USB_Event_Stub>
    1e0a:	ff 91       	pop	r31
    1e0c:	ef 91       	pop	r30

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
    1e0e:	bf 91       	pop	r27
    1e10:	af 91       	pop	r26
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
    1e12:	9f 91       	pop	r25
    1e14:	8f 91       	pop	r24
    1e16:	7f 91       	pop	r23
    1e18:	6f 91       	pop	r22
    1e1a:	5f 91       	pop	r21
    1e1c:	4f 91       	pop	r20
    1e1e:	3f 91       	pop	r19
    1e20:	2f 91       	pop	r18
    1e22:	0f 90       	pop	r0
    1e24:	0b be       	out	0x3b, r0	; 59
    1e26:	0f 90       	pop	r0
    1e28:	0f be       	out	0x3f, r0	; 63
    1e2a:	0f 90       	pop	r0
    1e2c:	1f 90       	pop	r1
    1e2e:	18 95       	reti

00001e30 <USB_Device_ProcessControlRequest>:
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_Device_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
    1e30:	1f 93       	push	r17
    1e32:	cf 93       	push	r28
    1e34:	df 93       	push	r29
    1e36:	cd b7       	in	r28, 0x3d	; 61
    1e38:	de b7       	in	r29, 0x3e	; 62
    1e3a:	ad 97       	sbiw	r28, 0x2d	; 45
    1e3c:	0f b6       	in	r0, 0x3f	; 63
    1e3e:	f8 94       	cli
    1e40:	de bf       	out	0x3e, r29	; 62
    1e42:	0f be       	out	0x3f, r0	; 63
    1e44:	cd bf       	out	0x3d, r28	; 61
    1e46:	88 e0       	ldi	r24, 0x08	; 8
	USB_ControlRequest.bRequest      = Endpoint_Read_8();
	USB_ControlRequest.wValue        = Endpoint_Read_16_LE();
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;
    1e48:	e2 ef       	ldi	r30, 0xF2	; 242
    1e4a:	f2 e0       	ldi	r31, 0x02	; 2
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    1e4c:	90 91 f1 00 	lds	r25, 0x00F1

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_8();
    1e50:	91 93       	st	Z+, r25
    1e52:	81 50       	subi	r24, 0x01	; 1
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
    1e54:	d9 f7       	brne	.-10     	; 0x1e4c <USB_Device_ProcessControlRequest+0x1c>
	  *(RequestHeader++) = Endpoint_Read_8();
	#endif

	EVENT_USB_Device_ControlRequest();
    1e56:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <EVENT_USB_Device_ControlRequest>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    1e5a:	80 91 e8 00 	lds	r24, 0x00E8

	if (Endpoint_IsSETUPReceived())
    1e5e:	83 ff       	sbrs	r24, 3
    1e60:	28 c1       	rjmp	.+592    	; 0x20b2 <USB_Device_ProcessControlRequest+0x282>
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
    1e62:	80 91 f2 02 	lds	r24, 0x02F2

		switch (USB_ControlRequest.bRequest)
    1e66:	90 91 f3 02 	lds	r25, 0x02F3
    1e6a:	95 30       	cpi	r25, 0x05	; 5
    1e6c:	09 f4       	brne	.+2      	; 0x1e70 <USB_Device_ProcessControlRequest+0x40>
    1e6e:	6c c0       	rjmp	.+216    	; 0x1f48 <USB_Device_ProcessControlRequest+0x118>
    1e70:	96 30       	cpi	r25, 0x06	; 6
    1e72:	40 f4       	brcc	.+16     	; 0x1e84 <USB_Device_ProcessControlRequest+0x54>
    1e74:	91 30       	cpi	r25, 0x01	; 1
    1e76:	69 f1       	breq	.+90     	; 0x1ed2 <USB_Device_ProcessControlRequest+0xa2>
    1e78:	91 30       	cpi	r25, 0x01	; 1
    1e7a:	70 f0       	brcs	.+28     	; 0x1e98 <USB_Device_ProcessControlRequest+0x68>
    1e7c:	93 30       	cpi	r25, 0x03	; 3
    1e7e:	09 f0       	breq	.+2      	; 0x1e82 <USB_Device_ProcessControlRequest+0x52>
    1e80:	18 c1       	rjmp	.+560    	; 0x20b2 <USB_Device_ProcessControlRequest+0x282>
    1e82:	27 c0       	rjmp	.+78     	; 0x1ed2 <USB_Device_ProcessControlRequest+0xa2>
    1e84:	98 30       	cpi	r25, 0x08	; 8
    1e86:	09 f4       	brne	.+2      	; 0x1e8a <USB_Device_ProcessControlRequest+0x5a>
    1e88:	e6 c0       	rjmp	.+460    	; 0x2056 <USB_Device_ProcessControlRequest+0x226>
    1e8a:	99 30       	cpi	r25, 0x09	; 9
    1e8c:	09 f4       	brne	.+2      	; 0x1e90 <USB_Device_ProcessControlRequest+0x60>
    1e8e:	f5 c0       	rjmp	.+490    	; 0x207a <USB_Device_ProcessControlRequest+0x24a>
    1e90:	96 30       	cpi	r25, 0x06	; 6
    1e92:	09 f0       	breq	.+2      	; 0x1e96 <USB_Device_ProcessControlRequest+0x66>
    1e94:	0e c1       	rjmp	.+540    	; 0x20b2 <USB_Device_ProcessControlRequest+0x282>
    1e96:	7a c0       	rjmp	.+244    	; 0x1f8c <USB_Device_ProcessControlRequest+0x15c>
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    1e98:	80 38       	cpi	r24, 0x80	; 128
    1e9a:	81 f0       	breq	.+32     	; 0x1ebc <USB_Device_ProcessControlRequest+0x8c>
    1e9c:	82 38       	cpi	r24, 0x82	; 130
    1e9e:	09 f0       	breq	.+2      	; 0x1ea2 <USB_Device_ProcessControlRequest+0x72>
    1ea0:	08 c1       	rjmp	.+528    	; 0x20b2 <USB_Device_ProcessControlRequest+0x282>
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
			#endif
			break;
		case (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_ENDPOINT):
			#if !defined(CONTROL_ONLY_DEVICE)
			Endpoint_SelectEndpoint((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
    1ea2:	80 91 f6 02 	lds	r24, 0x02F6
    1ea6:	8f 70       	andi	r24, 0x0F	; 15
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1ea8:	80 93 e9 00 	sts	0x00E9, r24
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    1eac:	90 91 eb 00 	lds	r25, 0x00EB

			CurrentStatus = Endpoint_IsStalled();
    1eb0:	81 e0       	ldi	r24, 0x01	; 1
    1eb2:	95 ff       	sbrs	r25, 5
    1eb4:	80 e0       	ldi	r24, 0x00	; 0
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1eb6:	10 92 e9 00 	sts	0x00E9, r1
    1eba:	01 c0       	rjmp	.+2      	; 0x1ebe <USB_Device_ProcessControlRequest+0x8e>
	Endpoint_ClearOUT();
}

static void USB_Device_GetStatus(void)
{
	uint8_t CurrentStatus = 0;
    1ebc:	80 e0       	ldi	r24, 0x00	; 0
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1ebe:	90 91 e8 00 	lds	r25, 0x00E8
    1ec2:	97 7f       	andi	r25, 0xF7	; 247
    1ec4:	90 93 e8 00 	sts	0x00E8, r25
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
    1ec8:	80 93 f1 00 	sts	0x00F1, r24
				UEDATX = (Data >> 8);
    1ecc:	10 92 f1 00 	sts	0x00F1, r1
    1ed0:	cd c0       	rjmp	.+410    	; 0x206c <USB_Device_ProcessControlRequest+0x23c>
				}

				break;
			case REQ_ClearFeature:
			case REQ_SetFeature:
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    1ed2:	88 23       	and	r24, r24
    1ed4:	19 f0       	breq	.+6      	; 0x1edc <USB_Device_ProcessControlRequest+0xac>
    1ed6:	82 30       	cpi	r24, 0x02	; 2
    1ed8:	09 f0       	breq	.+2      	; 0x1edc <USB_Device_ProcessControlRequest+0xac>
    1eda:	eb c0       	rjmp	.+470    	; 0x20b2 <USB_Device_ProcessControlRequest+0x282>
	Endpoint_ClearStatusStage();
}

static void USB_Device_ClearSetFeature(void)
{
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
    1edc:	8f 71       	andi	r24, 0x1F	; 31
    1ede:	82 30       	cpi	r24, 0x02	; 2
    1ee0:	09 f0       	breq	.+2      	; 0x1ee4 <USB_Device_ProcessControlRequest+0xb4>
    1ee2:	e7 c0       	rjmp	.+462    	; 0x20b2 <USB_Device_ProcessControlRequest+0x282>

			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
    1ee4:	80 91 f4 02 	lds	r24, 0x02F4
    1ee8:	88 23       	and	r24, r24
    1eea:	41 f5       	brne	.+80     	; 0x1f3c <USB_Device_ProcessControlRequest+0x10c>
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
    1eec:	20 91 f6 02 	lds	r18, 0x02F6
    1ef0:	2f 70       	andi	r18, 0x0F	; 15

				if (EndpointIndex == ENDPOINT_CONTROLEP)
    1ef2:	09 f4       	brne	.+2      	; 0x1ef6 <USB_Device_ProcessControlRequest+0xc6>
    1ef4:	de c0       	rjmp	.+444    	; 0x20b2 <USB_Device_ProcessControlRequest+0x282>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1ef6:	20 93 e9 00 	sts	0x00E9, r18
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
    1efa:	80 91 eb 00 	lds	r24, 0x00EB
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
    1efe:	80 ff       	sbrs	r24, 0
    1f00:	1d c0       	rjmp	.+58     	; 0x1f3c <USB_Device_ProcessControlRequest+0x10c>
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
    1f02:	80 91 f3 02 	lds	r24, 0x02F3
    1f06:	83 30       	cpi	r24, 0x03	; 3
    1f08:	21 f4       	brne	.+8      	; 0x1f12 <USB_Device_ProcessControlRequest+0xe2>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    1f0a:	80 91 eb 00 	lds	r24, 0x00EB
    1f0e:	80 62       	ori	r24, 0x20	; 32
    1f10:	13 c0       	rjmp	.+38     	; 0x1f38 <USB_Device_ProcessControlRequest+0x108>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
    1f12:	80 91 eb 00 	lds	r24, 0x00EB
    1f16:	80 61       	ori	r24, 0x10	; 16
    1f18:	80 93 eb 00 	sts	0x00EB, r24
			 *  \param[in] Address  Endpoint address whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t Address)
			{
				UERST = (1 << (Address & ENDPOINT_EPNUM_MASK));
    1f1c:	81 e0       	ldi	r24, 0x01	; 1
    1f1e:	90 e0       	ldi	r25, 0x00	; 0
    1f20:	02 c0       	rjmp	.+4      	; 0x1f26 <USB_Device_ProcessControlRequest+0xf6>
    1f22:	88 0f       	add	r24, r24
    1f24:	99 1f       	adc	r25, r25
    1f26:	2a 95       	dec	r18
    1f28:	e2 f7       	brpl	.-8      	; 0x1f22 <USB_Device_ProcessControlRequest+0xf2>
    1f2a:	80 93 ea 00 	sts	0x00EA, r24
				UERST = 0;
    1f2e:	10 92 ea 00 	sts	0x00EA, r1

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
    1f32:	80 91 eb 00 	lds	r24, 0x00EB
    1f36:	88 60       	ori	r24, 0x08	; 8
    1f38:	80 93 eb 00 	sts	0x00EB, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1f3c:	10 92 e9 00 	sts	0x00E9, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1f40:	80 91 e8 00 	lds	r24, 0x00E8
    1f44:	87 7f       	andi	r24, 0xF7	; 247
    1f46:	95 c0       	rjmp	.+298    	; 0x2072 <USB_Device_ProcessControlRequest+0x242>
					USB_Device_ClearSetFeature();
				}

				break;
			case REQ_SetAddress:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    1f48:	88 23       	and	r24, r24
    1f4a:	09 f0       	breq	.+2      	; 0x1f4e <USB_Device_ProcessControlRequest+0x11e>
    1f4c:	b2 c0       	rjmp	.+356    	; 0x20b2 <USB_Device_ProcessControlRequest+0x282>
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t DeviceAddress = (USB_ControlRequest.wValue & 0x7F);
    1f4e:	10 91 f4 02 	lds	r17, 0x02F4
    1f52:	1f 77       	andi	r17, 0x7F	; 127
			#endif

			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				UDADDR = (UDADDR & (1 << ADDEN)) | (Address & 0x7F);
    1f54:	80 91 e3 00 	lds	r24, 0x00E3
    1f58:	80 78       	andi	r24, 0x80	; 128
    1f5a:	81 2b       	or	r24, r17
    1f5c:	80 93 e3 00 	sts	0x00E3, r24
    1f60:	80 91 e8 00 	lds	r24, 0x00E8
    1f64:	87 7f       	andi	r24, 0xF7	; 247
    1f66:	80 93 e8 00 	sts	0x00E8, r24

	USB_Device_SetDeviceAddress(DeviceAddress);

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
    1f6a:	ff dd       	rcall	.-1026   	; 0x1b6a <Endpoint_ClearStatusStage>
    1f6c:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1f70:	80 ff       	sbrs	r24, 0

	while (!(Endpoint_IsINReady()));
    1f72:	fc cf       	rjmp	.-8      	; 0x1f6c <USB_Device_ProcessControlRequest+0x13c>
    1f74:	80 91 e3 00 	lds	r24, 0x00E3
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address)
			{
				(void)Address;
				
				UDADDR |= (1 << ADDEN);
    1f78:	80 68       	ori	r24, 0x80	; 128
    1f7a:	80 93 e3 00 	sts	0x00E3, r24
    1f7e:	11 23       	and	r17, r17

	USB_Device_EnableDeviceAddress(DeviceAddress);

	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
    1f80:	11 f0       	breq	.+4      	; 0x1f86 <USB_Device_ProcessControlRequest+0x156>
    1f82:	83 e0       	ldi	r24, 0x03	; 3
    1f84:	01 c0       	rjmp	.+2      	; 0x1f88 <USB_Device_ProcessControlRequest+0x158>
    1f86:	82 e0       	ldi	r24, 0x02	; 2
    1f88:	8e bb       	out	0x1e, r24	; 30
    1f8a:	93 c0       	rjmp	.+294    	; 0x20b2 <USB_Device_ProcessControlRequest+0x282>
    1f8c:	80 58       	subi	r24, 0x80	; 128
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_SetAddress();

				break;
			case REQ_GetDescriptor:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    1f8e:	82 30       	cpi	r24, 0x02	; 2
    1f90:	08 f0       	brcs	.+2      	; 0x1f94 <USB_Device_ProcessControlRequest+0x164>
    1f92:	8f c0       	rjmp	.+286    	; 0x20b2 <USB_Device_ProcessControlRequest+0x282>
    1f94:	80 91 f4 02 	lds	r24, 0x02F4
	    !(defined(USE_FLASH_DESCRIPTORS) || defined(USE_EEPROM_DESCRIPTORS) || defined(USE_RAM_DESCRIPTORS))
	uint8_t DescriptorAddressSpace;
	#endif

	#if !defined(NO_INTERNAL_SERIAL) && (USE_INTERNAL_SERIAL != NO_DESCRIPTOR)
	if (USB_ControlRequest.wValue == ((DTYPE_String << 8) | USE_INTERNAL_SERIAL))
    1f98:	90 91 f5 02 	lds	r25, 0x02F5
    1f9c:	23 e0       	ldi	r18, 0x03	; 3
    1f9e:	8c 3d       	cpi	r24, 0xDC	; 220
    1fa0:	92 07       	cpc	r25, r18
    1fa2:	a1 f5       	brne	.+104    	; 0x200c <USB_Device_ProcessControlRequest+0x1dc>
    1fa4:	83 e0       	ldi	r24, 0x03	; 3
	{
		USB_Descriptor_Header_t Header;
		uint16_t                UnicodeString[INTERNAL_SERIAL_LENGTH_BITS / 4];
	} SignatureDescriptor;

	SignatureDescriptor.Header.Type = DTYPE_String;
    1fa6:	8d 83       	std	Y+5, r24	; 0x05
    1fa8:	8a e2       	ldi	r24, 0x2A	; 42
	SignatureDescriptor.Header.Size = USB_STRING_LEN(INTERNAL_SERIAL_LENGTH_BITS / 4);
    1faa:	8c 83       	std	Y+4, r24	; 0x04
    1fac:	5f b7       	in	r21, 0x3f	; 63
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
    1fae:	f8 94       	cli
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
    1fb0:	de 01       	movw	r26, r28
				__builtin_ssrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				cli();
				#endif

				GCC_MEMORY_BARRIER();
    1fb2:	14 96       	adiw	r26, 0x04	; 4
    1fb4:	80 e0       	ldi	r24, 0x00	; 0
    1fb6:	90 e0       	ldi	r25, 0x00	; 0
    1fb8:	4e e0       	ldi	r20, 0x0E	; 14
			static inline void USB_Device_GetSerialString(uint16_t* const UnicodeString)
			{
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;
    1fba:	61 e2       	ldi	r22, 0x21	; 33

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
				{
					uint8_t SerialByte = boot_signature_byte_get(SigReadAddress);
    1fbc:	e4 2f       	mov	r30, r20
    1fbe:	f0 e0       	ldi	r31, 0x00	; 0
    1fc0:	60 93 57 00 	sts	0x0057, r22
    1fc4:	e4 91       	lpm	r30, Z
    1fc6:	80 ff       	sbrs	r24, 0

					if (SerialCharNum & 0x01)
    1fc8:	03 c0       	rjmp	.+6      	; 0x1fd0 <USB_Device_ProcessControlRequest+0x1a0>
    1fca:	e2 95       	swap	r30
					{
						SerialByte >>= 4;
    1fcc:	ef 70       	andi	r30, 0x0F	; 15
    1fce:	4f 5f       	subi	r20, 0xFF	; 255
						SigReadAddress++;
    1fd0:	ef 70       	andi	r30, 0x0F	; 15
					}

					SerialByte &= 0x0F;
    1fd2:	2e 2f       	mov	r18, r30
    1fd4:	30 e0       	ldi	r19, 0x00	; 0
    1fd6:	ea 30       	cpi	r30, 0x0A	; 10

					UnicodeString[SerialCharNum] = cpu_to_le16((SerialByte >= 10) ?
    1fd8:	18 f0       	brcs	.+6      	; 0x1fe0 <USB_Device_ProcessControlRequest+0x1b0>
    1fda:	29 5c       	subi	r18, 0xC9	; 201
    1fdc:	3f 4f       	sbci	r19, 0xFF	; 255
    1fde:	02 c0       	rjmp	.+4      	; 0x1fe4 <USB_Device_ProcessControlRequest+0x1b4>
    1fe0:	20 5d       	subi	r18, 0xD0	; 208
    1fe2:	3f 4f       	sbci	r19, 0xFF	; 255
    1fe4:	13 96       	adiw	r26, 0x03	; 3
    1fe6:	3c 93       	st	X, r19
    1fe8:	2e 93       	st	-X, r18
    1fea:	12 97       	sbiw	r26, 0x02	; 2
    1fec:	01 96       	adiw	r24, 0x01	; 1
    1fee:	12 96       	adiw	r26, 0x02	; 2
    1ff0:	84 31       	cpi	r24, 0x14	; 20
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
    1ff2:	91 05       	cpc	r25, r1
    1ff4:	19 f7       	brne	.-58     	; 0x1fbc <USB_Device_ProcessControlRequest+0x18c>
    1ff6:	5f bf       	out	0x3f, r21	; 63
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
    1ff8:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1ffc:	87 7f       	andi	r24, 0xF7	; 247
    1ffe:	80 93 e8 00 	sts	0x00E8, r24
    2002:	ce 01       	movw	r24, r28

	USB_Device_GetSerialString(SignatureDescriptor.UnicodeString);

	Endpoint_ClearSETUP();

	Endpoint_Write_Control_Stream_LE(&SignatureDescriptor, sizeof(SignatureDescriptor));
    2004:	04 96       	adiw	r24, 0x04	; 4
    2006:	6a e2       	ldi	r22, 0x2A	; 42
    2008:	70 e0       	ldi	r23, 0x00	; 0
    200a:	1e c0       	rjmp	.+60     	; 0x2048 <USB_Device_ProcessControlRequest+0x218>
    200c:	60 91 f6 02 	lds	r22, 0x02F6
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif

	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
    2010:	ae 01       	movw	r20, r28
    2012:	4e 5f       	subi	r20, 0xFE	; 254
    2014:	5f 4f       	sbci	r21, 0xFF	; 255
    2016:	9e 01       	movw	r18, r28
    2018:	2f 5f       	subi	r18, 0xFF	; 255
    201a:	3f 4f       	sbci	r19, 0xFF	; 255
    201c:	0e 94 0f 02 	call	0x41e	; 0x41e <CALLBACK_USB_GetDescriptor>
    2020:	bc 01       	movw	r22, r24
    2022:	00 97       	sbiw	r24, 0x00	; 0
    2024:	09 f4       	brne	.+2      	; 0x2028 <USB_Device_ProcessControlRequest+0x1f8>
    2026:	45 c0       	rjmp	.+138    	; 0x20b2 <USB_Device_ProcessControlRequest+0x282>
    2028:	80 91 e8 00 	lds	r24, 0x00E8
    202c:	87 7f       	andi	r24, 0xF7	; 247
    202e:	80 93 e8 00 	sts	0x00E8, r24
    2032:	29 81       	ldd	r18, Y+1	; 0x01
	#elif defined(USE_EEPROM_DESCRIPTORS)
	Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_FLASH_DESCRIPTORS)
	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
	#else
	if (DescriptorAddressSpace == MEMSPACE_FLASH)
    2034:	8a 81       	ldd	r24, Y+2	; 0x02
    2036:	9b 81       	ldd	r25, Y+3	; 0x03
    2038:	22 23       	and	r18, r18
    203a:	11 f4       	brne	.+4      	; 0x2040 <USB_Device_ProcessControlRequest+0x210>
    203c:	81 dc       	rcall	.-1790   	; 0x1940 <Endpoint_Write_Control_PStream_LE>
	  Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
    203e:	05 c0       	rjmp	.+10     	; 0x204a <USB_Device_ProcessControlRequest+0x21a>
    2040:	21 30       	cpi	r18, 0x01	; 1
    2042:	11 f4       	brne	.+4      	; 0x2048 <USB_Device_ProcessControlRequest+0x218>
	else if (DescriptorAddressSpace == MEMSPACE_EEPROM)
    2044:	d8 dc       	rcall	.-1616   	; 0x19f6 <Endpoint_Write_Control_EStream_LE>
    2046:	01 c0       	rjmp	.+2      	; 0x204a <USB_Device_ProcessControlRequest+0x21a>
	  Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
    2048:	22 dc       	rcall	.-1980   	; 0x188e <Endpoint_Write_Control_Stream_LE>
    204a:	80 91 e8 00 	lds	r24, 0x00E8
	else
	  Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
    204e:	8b 77       	andi	r24, 0x7B	; 123
    2050:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    2054:	2e c0       	rjmp	.+92     	; 0x20b2 <USB_Device_ProcessControlRequest+0x282>
    2056:	80 38       	cpi	r24, 0x80	; 128
    2058:	61 f5       	brne	.+88     	; 0x20b2 <USB_Device_ProcessControlRequest+0x282>
    205a:	80 91 e8 00 	lds	r24, 0x00E8
					USB_Device_GetDescriptor();
				}

				break;
			case REQ_GetConfiguration:
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
    205e:	87 7f       	andi	r24, 0xF7	; 247
    2060:	80 93 e8 00 	sts	0x00E8, r24
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    2064:	80 91 f0 02 	lds	r24, 0x02F0
    2068:	80 93 f1 00 	sts	0x00F1, r24

static void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();

	Endpoint_Write_8(USB_Device_ConfigurationNumber);
    206c:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    2070:	8e 77       	andi	r24, 0x7E	; 126
    2072:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    2076:	79 dd       	rcall	.-1294   	; 0x1b6a <Endpoint_ClearStatusStage>
    2078:	1c c0       	rjmp	.+56     	; 0x20b2 <USB_Device_ProcessControlRequest+0x282>
    207a:	88 23       	and	r24, r24
    207c:	d1 f4       	brne	.+52     	; 0x20b2 <USB_Device_ProcessControlRequest+0x282>
	Endpoint_ClearIN();

	Endpoint_ClearStatusStage();
    207e:	90 91 f4 02 	lds	r25, 0x02F4
    2082:	92 30       	cpi	r25, 0x02	; 2
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_GetConfiguration();

				break;
			case REQ_SetConfiguration:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    2084:	b0 f4       	brcc	.+44     	; 0x20b2 <USB_Device_ProcessControlRequest+0x282>
    2086:	80 91 e8 00 	lds	r24, 0x00E8
}

static void USB_Device_SetConfiguration(void)
{
	#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
    208a:	87 7f       	andi	r24, 0xF7	; 247
    208c:	80 93 e8 00 	sts	0x00E8, r24
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    2090:	90 93 f0 02 	sts	0x02F0, r25
    2094:	6a dd       	rcall	.-1324   	; 0x1b6a <Endpoint_ClearStatusStage>
    2096:	80 91 f0 02 	lds	r24, 0x02F0
	#endif
	#endif

	Endpoint_ClearSETUP();

	USB_Device_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
    209a:	88 23       	and	r24, r24
    209c:	21 f4       	brne	.+8      	; 0x20a6 <USB_Device_ProcessControlRequest+0x276>

	Endpoint_ClearStatusStage();
    209e:	80 91 e3 00 	lds	r24, 0x00E3

	if (USB_Device_ConfigurationNumber)
    20a2:	87 ff       	sbrs	r24, 7
    20a4:	02 c0       	rjmp	.+4      	; 0x20aa <USB_Device_ProcessControlRequest+0x27a>
    20a6:	84 e0       	ldi	r24, 0x04	; 4
    20a8:	01 c0       	rjmp	.+2      	; 0x20ac <USB_Device_ProcessControlRequest+0x27c>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
    20aa:	81 e0       	ldi	r24, 0x01	; 1
    20ac:	8e bb       	out	0x1e, r24	; 30
	  USB_DeviceState = DEVICE_STATE_Configured;
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
    20ae:	0e 94 a3 01 	call	0x346	; 0x346 <EVENT_USB_Device_ConfigurationChanged>
    20b2:	80 91 e8 00 	lds	r24, 0x00E8
    20b6:	83 ff       	sbrs	r24, 3
    20b8:	0a c0       	rjmp	.+20     	; 0x20ce <USB_Device_ProcessControlRequest+0x29e>

	EVENT_USB_Device_ConfigurationChanged();
    20ba:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    20be:	87 7f       	andi	r24, 0xF7	; 247
    20c0:	80 93 e8 00 	sts	0x00E8, r24
			default:
				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
    20c4:	80 91 eb 00 	lds	r24, 0x00EB
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    20c8:	80 62       	ori	r24, 0x20	; 32
    20ca:	80 93 eb 00 	sts	0x00EB, r24
    20ce:	ad 96       	adiw	r28, 0x2d	; 45
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    20d0:	0f b6       	in	r0, 0x3f	; 63
    20d2:	f8 94       	cli
    20d4:	de bf       	out	0x3e, r29	; 62
    20d6:	0f be       	out	0x3f, r0	; 63
    20d8:	cd bf       	out	0x3d, r28	; 61
	{
		Endpoint_ClearSETUP();
		Endpoint_StallTransaction();
	}
}
    20da:	df 91       	pop	r29
    20dc:	cf 91       	pop	r28
    20de:	1f 91       	pop	r17
    20e0:	08 95       	ret

000020e2 <USB_Event_Stub>:
#include "Events.h"

void USB_Event_Stub(void)
{

}
    20e2:	08 95       	ret

000020e4 <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
    20e4:	cf 93       	push	r28
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_DeviceTask(void)
{
	if (USB_DeviceState == DEVICE_STATE_Unattached)
    20e6:	8e b3       	in	r24, 0x1e	; 30
    20e8:	88 23       	and	r24, r24
    20ea:	a9 f0       	breq	.+42     	; 0x2116 <__stack+0x17>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    20ec:	80 91 e9 00 	lds	r24, 0x00E9
    20f0:	8f 70       	andi	r24, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    20f2:	90 91 ec 00 	lds	r25, 0x00EC
    20f6:	90 ff       	sbrs	r25, 0
    20f8:	02 c0       	rjmp	.+4      	; 0x20fe <USB_USBTask+0x1a>
    20fa:	c0 e8       	ldi	r28, 0x80	; 128
    20fc:	01 c0       	rjmp	.+2      	; 0x2100 <__stack+0x1>
    20fe:	c0 e0       	ldi	r28, 0x00	; 0
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    2100:	c8 2b       	or	r28, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    2102:	10 92 e9 00 	sts	0x00E9, r1
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    2106:	80 91 e8 00 	lds	r24, 0x00E8

	uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

	if (Endpoint_IsSETUPReceived())
    210a:	83 ff       	sbrs	r24, 3
    210c:	01 c0       	rjmp	.+2      	; 0x2110 <__stack+0x11>
	  USB_Device_ProcessControlRequest();
    210e:	90 de       	rcall	.-736    	; 0x1e30 <USB_Device_ProcessControlRequest>
    2110:	cf 70       	andi	r28, 0x0F	; 15
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    2112:	c0 93 e9 00 	sts	0x00E9, r28
    2116:	cf 91       	pop	r28
	#elif defined(USB_CAN_BE_HOST)
		USB_HostTask();
	#elif defined(USB_CAN_BE_DEVICE)
		USB_DeviceTask();
	#endif
}
    2118:	08 95       	ret

0000211a <CDC_Device_ProcessControlRequest>:
#define  __INCLUDE_FROM_CDC_DRIVER
#define  __INCLUDE_FROM_CDC_DEVICE_C
#include "CDCClassDevice.h"

void CDC_Device_ProcessControlRequest(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
    211a:	cf 93       	push	r28
    211c:	df 93       	push	r29
    211e:	ec 01       	movw	r28, r24
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    2120:	80 91 e8 00 	lds	r24, 0x00E8
	if (!(Endpoint_IsSETUPReceived()))
    2124:	83 ff       	sbrs	r24, 3
    2126:	a3 c0       	rjmp	.+326    	; 0x226e <CDC_Device_ProcessControlRequest+0x154>
	  return;

	if (USB_ControlRequest.wIndex != CDCInterfaceInfo->Config.ControlInterfaceNumber)
    2128:	88 81       	ld	r24, Y
    212a:	90 e0       	ldi	r25, 0x00	; 0
    212c:	20 91 f6 02 	lds	r18, 0x02F6
    2130:	30 91 f7 02 	lds	r19, 0x02F7
    2134:	28 17       	cp	r18, r24
    2136:	39 07       	cpc	r19, r25
    2138:	09 f0       	breq	.+2      	; 0x213c <CDC_Device_ProcessControlRequest+0x22>
    213a:	99 c0       	rjmp	.+306    	; 0x226e <CDC_Device_ProcessControlRequest+0x154>
	  return;

	switch (USB_ControlRequest.bRequest)
    213c:	80 91 f3 02 	lds	r24, 0x02F3
    2140:	81 32       	cpi	r24, 0x21	; 33
    2142:	69 f0       	breq	.+26     	; 0x215e <CDC_Device_ProcessControlRequest+0x44>
    2144:	82 32       	cpi	r24, 0x22	; 34
    2146:	20 f4       	brcc	.+8      	; 0x2150 <CDC_Device_ProcessControlRequest+0x36>
    2148:	80 32       	cpi	r24, 0x20	; 32
    214a:	09 f0       	breq	.+2      	; 0x214e <CDC_Device_ProcessControlRequest+0x34>
    214c:	90 c0       	rjmp	.+288    	; 0x226e <CDC_Device_ProcessControlRequest+0x154>
    214e:	3c c0       	rjmp	.+120    	; 0x21c8 <CDC_Device_ProcessControlRequest+0xae>
    2150:	82 32       	cpi	r24, 0x22	; 34
    2152:	09 f4       	brne	.+2      	; 0x2156 <CDC_Device_ProcessControlRequest+0x3c>
    2154:	6b c0       	rjmp	.+214    	; 0x222c <CDC_Device_ProcessControlRequest+0x112>
    2156:	83 32       	cpi	r24, 0x23	; 35
    2158:	09 f0       	breq	.+2      	; 0x215c <CDC_Device_ProcessControlRequest+0x42>
    215a:	89 c0       	rjmp	.+274    	; 0x226e <CDC_Device_ProcessControlRequest+0x154>
    215c:	7a c0       	rjmp	.+244    	; 0x2252 <CDC_Device_ProcessControlRequest+0x138>
	{
		case CDC_REQ_GetLineEncoding:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    215e:	80 91 f2 02 	lds	r24, 0x02F2
    2162:	81 3a       	cpi	r24, 0xA1	; 161
    2164:	09 f0       	breq	.+2      	; 0x2168 <CDC_Device_ProcessControlRequest+0x4e>
    2166:	83 c0       	rjmp	.+262    	; 0x226e <CDC_Device_ProcessControlRequest+0x154>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    2168:	80 91 e8 00 	lds	r24, 0x00E8
    216c:	87 7f       	andi	r24, 0xF7	; 247
    216e:	80 93 e8 00 	sts	0x00E8, r24
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    2172:	80 91 e8 00 	lds	r24, 0x00E8
			{
				Endpoint_ClearSETUP();

				while (!(Endpoint_IsINReady()));
    2176:	80 ff       	sbrs	r24, 0
    2178:	fc cf       	rjmp	.-8      	; 0x2172 <CDC_Device_ProcessControlRequest+0x58>

				Endpoint_Write_32_LE(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS);
    217a:	8c 89       	ldd	r24, Y+20	; 0x14
    217c:	9d 89       	ldd	r25, Y+21	; 0x15
    217e:	ae 89       	ldd	r26, Y+22	; 0x16
    2180:	bf 89       	ldd	r27, Y+23	; 0x17
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_32_LE(const uint32_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_32_LE(const uint32_t Data)
			{
				UEDATX = (Data &  0xFF);
    2182:	80 93 f1 00 	sts	0x00F1, r24
				UEDATX = (Data >> 8);
    2186:	49 2f       	mov	r20, r25
    2188:	5a 2f       	mov	r21, r26
    218a:	6b 2f       	mov	r22, r27
    218c:	77 27       	eor	r23, r23
    218e:	40 93 f1 00 	sts	0x00F1, r20
				UEDATX = (Data >> 16);
    2192:	ad 01       	movw	r20, r26
    2194:	66 27       	eor	r22, r22
    2196:	77 27       	eor	r23, r23
    2198:	40 93 f1 00 	sts	0x00F1, r20
				UEDATX = (Data >> 24);
    219c:	8b 2f       	mov	r24, r27
    219e:	99 27       	eor	r25, r25
    21a0:	aa 27       	eor	r26, r26
    21a2:	bb 27       	eor	r27, r27
    21a4:	80 93 f1 00 	sts	0x00F1, r24
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.CharFormat);
    21a8:	88 8d       	ldd	r24, Y+24	; 0x18
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    21aa:	80 93 f1 00 	sts	0x00F1, r24
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.ParityType);
    21ae:	89 8d       	ldd	r24, Y+25	; 0x19
    21b0:	80 93 f1 00 	sts	0x00F1, r24
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.DataBits);
    21b4:	8a 8d       	ldd	r24, Y+26	; 0x1a
    21b6:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    21ba:	80 91 e8 00 	lds	r24, 0x00E8
    21be:	8e 77       	andi	r24, 0x7E	; 126
    21c0:	80 93 e8 00 	sts	0x00E8, r24

				Endpoint_ClearIN();
				Endpoint_ClearStatusStage();
    21c4:	d2 dc       	rcall	.-1628   	; 0x1b6a <Endpoint_ClearStatusStage>
    21c6:	53 c0       	rjmp	.+166    	; 0x226e <CDC_Device_ProcessControlRequest+0x154>
    21c8:	80 91 f2 02 	lds	r24, 0x02F2
			}

			break;
		case CDC_REQ_SetLineEncoding:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    21cc:	81 32       	cpi	r24, 0x21	; 33
    21ce:	09 f0       	breq	.+2      	; 0x21d2 <CDC_Device_ProcessControlRequest+0xb8>
    21d0:	4e c0       	rjmp	.+156    	; 0x226e <CDC_Device_ProcessControlRequest+0x154>
    21d2:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    21d6:	87 7f       	andi	r24, 0xF7	; 247
    21d8:	80 93 e8 00 	sts	0x00E8, r24
    21dc:	04 c0       	rjmp	.+8      	; 0x21e6 <CDC_Device_ProcessControlRequest+0xcc>
    21de:	8e b3       	in	r24, 0x1e	; 30
			{
				Endpoint_ClearSETUP();

				while (!(Endpoint_IsOUTReceived()))
				{
					if (USB_DeviceState == DEVICE_STATE_Unattached)
    21e0:	88 23       	and	r24, r24
    21e2:	09 f4       	brne	.+2      	; 0x21e6 <CDC_Device_ProcessControlRequest+0xcc>
    21e4:	44 c0       	rjmp	.+136    	; 0x226e <CDC_Device_ProcessControlRequest+0x154>
    21e6:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    21ea:	82 ff       	sbrs	r24, 2
		case CDC_REQ_SetLineEncoding:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
			{
				Endpoint_ClearSETUP();

				while (!(Endpoint_IsOUTReceived()))
    21ec:	f8 cf       	rjmp	.-16     	; 0x21de <CDC_Device_ProcessControlRequest+0xc4>
    21ee:	30 91 f1 00 	lds	r19, 0x00F1
				{
					uint32_t Value;
					uint8_t  Bytes[4];
				} Data;

				Data.Bytes[0] = UEDATX;
    21f2:	20 91 f1 00 	lds	r18, 0x00F1
				Data.Bytes[1] = UEDATX;
    21f6:	90 91 f1 00 	lds	r25, 0x00F1
				Data.Bytes[2] = UEDATX;
    21fa:	80 91 f1 00 	lds	r24, 0x00F1
				Data.Bytes[3] = UEDATX;
    21fe:	3c 8b       	std	Y+20, r19	; 0x14
				{
					if (USB_DeviceState == DEVICE_STATE_Unattached)
					  return;
				}

				CDCInterfaceInfo->State.LineEncoding.BaudRateBPS = Endpoint_Read_32_LE();
    2200:	2d 8b       	std	Y+21, r18	; 0x15
    2202:	9e 8b       	std	Y+22, r25	; 0x16
    2204:	8f 8b       	std	Y+23, r24	; 0x17
    2206:	80 91 f1 00 	lds	r24, 0x00F1
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    220a:	88 8f       	std	Y+24, r24	; 0x18
				CDCInterfaceInfo->State.LineEncoding.CharFormat  = Endpoint_Read_8();
    220c:	80 91 f1 00 	lds	r24, 0x00F1
    2210:	89 8f       	std	Y+25, r24	; 0x19
				CDCInterfaceInfo->State.LineEncoding.ParityType  = Endpoint_Read_8();
    2212:	80 91 f1 00 	lds	r24, 0x00F1
    2216:	8a 8f       	std	Y+26, r24	; 0x1a
				CDCInterfaceInfo->State.LineEncoding.DataBits    = Endpoint_Read_8();
    2218:	80 91 e8 00 	lds	r24, 0x00E8
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    221c:	8b 77       	andi	r24, 0x7B	; 123
    221e:	80 93 e8 00 	sts	0x00E8, r24
    2222:	a3 dc       	rcall	.-1722   	; 0x1b6a <Endpoint_ClearStatusStage>

				Endpoint_ClearOUT();
				Endpoint_ClearStatusStage();
    2224:	ce 01       	movw	r24, r28
    2226:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <EVENT_CDC_Device_LineEncodingChanged>

				EVENT_CDC_Device_LineEncodingChanged(CDCInterfaceInfo);
    222a:	21 c0       	rjmp	.+66     	; 0x226e <CDC_Device_ProcessControlRequest+0x154>
    222c:	80 91 f2 02 	lds	r24, 0x02F2
			}

			break;
		case CDC_REQ_SetControlLineState:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    2230:	81 32       	cpi	r24, 0x21	; 33
    2232:	e9 f4       	brne	.+58     	; 0x226e <CDC_Device_ProcessControlRequest+0x154>
    2234:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    2238:	87 7f       	andi	r24, 0xF7	; 247
    223a:	80 93 e8 00 	sts	0x00E8, r24
    223e:	95 dc       	rcall	.-1750   	; 0x1b6a <Endpoint_ClearStatusStage>
    2240:	80 91 f4 02 	lds	r24, 0x02F4
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
    2244:	90 91 f5 02 	lds	r25, 0x02F5

				CDCInterfaceInfo->State.ControlLineStates.HostToDevice = USB_ControlRequest.wValue;
    2248:	99 8b       	std	Y+17, r25	; 0x11
    224a:	88 8b       	std	Y+16, r24	; 0x10
    224c:	ce 01       	movw	r24, r28
    224e:	d6 d0       	rcall	.+428    	; 0x23fc <CDC_Device_Event_Stub>
    2250:	0e c0       	rjmp	.+28     	; 0x226e <CDC_Device_ProcessControlRequest+0x154>

				EVENT_CDC_Device_ControLineStateChanged(CDCInterfaceInfo);
    2252:	80 91 f2 02 	lds	r24, 0x02F2
    2256:	81 32       	cpi	r24, 0x21	; 33
    2258:	51 f4       	brne	.+20     	; 0x226e <CDC_Device_ProcessControlRequest+0x154>
			}

			break;
		case CDC_REQ_SendBreak:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    225a:	80 91 e8 00 	lds	r24, 0x00E8
    225e:	87 7f       	andi	r24, 0xF7	; 247
    2260:	80 93 e8 00 	sts	0x00E8, r24
    2264:	82 dc       	rcall	.-1788   	; 0x1b6a <Endpoint_ClearStatusStage>
    2266:	ce 01       	movw	r24, r28
    2268:	60 91 f4 02 	lds	r22, 0x02F4
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
    226c:	c7 d0       	rcall	.+398    	; 0x23fc <CDC_Device_Event_Stub>
    226e:	df 91       	pop	r29

				EVENT_CDC_Device_BreakSent(CDCInterfaceInfo, (uint8_t)USB_ControlRequest.wValue);
    2270:	cf 91       	pop	r28
    2272:	08 95       	ret

00002274 <CDC_Device_ConfigureEndpoints>:
    2274:	cf 93       	push	r28
    2276:	df 93       	push	r29
    2278:	ec 01       	movw	r28, r24
			}

			break;
	}
}
    227a:	40 96       	adiw	r24, 0x10	; 16
    227c:	fc 01       	movw	r30, r24
    227e:	8b e0       	ldi	r24, 0x0B	; 11

bool CDC_Device_ConfigureEndpoints(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
	memset(&CDCInterfaceInfo->State, 0x00, sizeof(CDCInterfaceInfo->State));
    2280:	df 01       	movw	r26, r30
    2282:	1d 92       	st	X+, r1
    2284:	8a 95       	dec	r24
    2286:	e9 f7       	brne	.-6      	; 0x2282 <CDC_Device_ConfigureEndpoints+0xe>

	CDCInterfaceInfo->Config.DataINEndpoint.Type       = EP_TYPE_BULK;
    2288:	82 e0       	ldi	r24, 0x02	; 2
    228a:	8c 83       	std	Y+4, r24	; 0x04
	CDCInterfaceInfo->Config.DataOUTEndpoint.Type      = EP_TYPE_BULK;
    228c:	89 87       	std	Y+9, r24	; 0x09
	CDCInterfaceInfo->Config.NotificationEndpoint.Type = EP_TYPE_INTERRUPT;
    228e:	83 e0       	ldi	r24, 0x03	; 3
    2290:	8e 87       	std	Y+14, r24	; 0x0e

	if (!(Endpoint_ConfigureEndpointTable(&CDCInterfaceInfo->Config.DataINEndpoint, 1)))
    2292:	ce 01       	movw	r24, r28
    2294:	01 96       	adiw	r24, 0x01	; 1
    2296:	61 e0       	ldi	r22, 0x01	; 1
    2298:	2c dc       	rcall	.-1960   	; 0x1af2 <Endpoint_ConfigureEndpointTable>
    229a:	88 23       	and	r24, r24
    229c:	59 f0       	breq	.+22     	; 0x22b4 <CDC_Device_ConfigureEndpoints+0x40>
    229e:	ce 01       	movw	r24, r28
	  return false;

	if (!(Endpoint_ConfigureEndpointTable(&CDCInterfaceInfo->Config.DataOUTEndpoint, 1)))
    22a0:	06 96       	adiw	r24, 0x06	; 6
    22a2:	61 e0       	ldi	r22, 0x01	; 1
    22a4:	26 dc       	rcall	.-1972   	; 0x1af2 <Endpoint_ConfigureEndpointTable>
    22a6:	88 23       	and	r24, r24
    22a8:	29 f0       	breq	.+10     	; 0x22b4 <CDC_Device_ConfigureEndpoints+0x40>
    22aa:	ce 01       	movw	r24, r28
    22ac:	0b 96       	adiw	r24, 0x0b	; 11
	  return false;

	if (!(Endpoint_ConfigureEndpointTable(&CDCInterfaceInfo->Config.NotificationEndpoint, 1)))
    22ae:	61 e0       	ldi	r22, 0x01	; 1
    22b0:	20 dc       	rcall	.-1984   	; 0x1af2 <Endpoint_ConfigureEndpointTable>
    22b2:	01 c0       	rjmp	.+2      	; 0x22b6 <CDC_Device_ConfigureEndpoints+0x42>
    22b4:	80 e0       	ldi	r24, 0x00	; 0
    22b6:	df 91       	pop	r29
    22b8:	cf 91       	pop	r28

	if (!(Endpoint_ConfigureEndpointTable(&CDCInterfaceInfo->Config.DataINEndpoint, 1)))
	  return false;

	if (!(Endpoint_ConfigureEndpointTable(&CDCInterfaceInfo->Config.DataOUTEndpoint, 1)))
	  return false;
    22ba:	08 95       	ret

000022bc <CDC_Device_SendByte>:

	if (!(Endpoint_ConfigureEndpointTable(&CDCInterfaceInfo->Config.NotificationEndpoint, 1)))
	  return false;

	return true;
}
    22bc:	cf 93       	push	r28
    22be:	fc 01       	movw	r30, r24
    22c0:	c6 2f       	mov	r28, r22
}

uint8_t CDC_Device_SendByte(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo,
                            const uint8_t Data)
{
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
    22c2:	8e b3       	in	r24, 0x1e	; 30
    22c4:	84 30       	cpi	r24, 0x04	; 4
    22c6:	e9 f4       	brne	.+58     	; 0x2302 <CDC_Device_SendByte+0x46>
    22c8:	44 89       	ldd	r20, Z+20	; 0x14
    22ca:	55 89       	ldd	r21, Z+21	; 0x15
    22cc:	66 89       	ldd	r22, Z+22	; 0x16
    22ce:	77 89       	ldd	r23, Z+23	; 0x17
    22d0:	41 15       	cp	r20, r1
    22d2:	51 05       	cpc	r21, r1
    22d4:	61 05       	cpc	r22, r1
    22d6:	71 05       	cpc	r23, r1
    22d8:	a1 f0       	breq	.+40     	; 0x2302 <CDC_Device_SendByte+0x46>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    22da:	81 81       	ldd	r24, Z+1	; 0x01
    22dc:	8f 70       	andi	r24, 0x0F	; 15
    22de:	80 93 e9 00 	sts	0x00E9, r24
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    22e2:	80 91 e8 00 	lds	r24, 0x00E8
	  return ENDPOINT_RWSTREAM_DeviceDisconnected;

	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataINEndpoint.Address);

	if (!(Endpoint_IsReadWriteAllowed()))
    22e6:	85 fd       	sbrc	r24, 5
    22e8:	08 c0       	rjmp	.+16     	; 0x22fa <CDC_Device_SendByte+0x3e>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    22ea:	80 91 e8 00 	lds	r24, 0x00E8
    22ee:	8e 77       	andi	r24, 0x7E	; 126
    22f0:	80 93 e8 00 	sts	0x00E8, r24
	{
		Endpoint_ClearIN();

		uint8_t ErrorCode;

		if ((ErrorCode = Endpoint_WaitUntilReady()) != ENDPOINT_READYWAIT_NoError)
    22f4:	59 dc       	rcall	.-1870   	; 0x1ba8 <Endpoint_WaitUntilReady>
    22f6:	88 23       	and	r24, r24
    22f8:	29 f4       	brne	.+10     	; 0x2304 <CDC_Device_SendByte+0x48>
    22fa:	c0 93 f1 00 	sts	0x00F1, r28
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    22fe:	80 e0       	ldi	r24, 0x00	; 0
		  return ErrorCode;
	}

	Endpoint_Write_8(Data);
	return ENDPOINT_READYWAIT_NoError;
    2300:	01 c0       	rjmp	.+2      	; 0x2304 <CDC_Device_SendByte+0x48>
    2302:	82 e0       	ldi	r24, 0x02	; 2

uint8_t CDC_Device_SendByte(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo,
                            const uint8_t Data)
{
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
	  return ENDPOINT_RWSTREAM_DeviceDisconnected;
    2304:	cf 91       	pop	r28
		  return ErrorCode;
	}

	Endpoint_Write_8(Data);
	return ENDPOINT_READYWAIT_NoError;
}
    2306:	08 95       	ret

00002308 <CDC_Device_Flush>:
    2308:	fc 01       	movw	r30, r24

uint8_t CDC_Device_Flush(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
    230a:	8e b3       	in	r24, 0x1e	; 30
    230c:	84 30       	cpi	r24, 0x04	; 4
    230e:	29 f5       	brne	.+74     	; 0x235a <CDC_Device_Flush+0x52>
    2310:	44 89       	ldd	r20, Z+20	; 0x14
    2312:	55 89       	ldd	r21, Z+21	; 0x15
    2314:	66 89       	ldd	r22, Z+22	; 0x16
    2316:	77 89       	ldd	r23, Z+23	; 0x17
    2318:	41 15       	cp	r20, r1
    231a:	51 05       	cpc	r21, r1
    231c:	61 05       	cpc	r22, r1
    231e:	71 05       	cpc	r23, r1
    2320:	e1 f0       	breq	.+56     	; 0x235a <CDC_Device_Flush+0x52>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    2322:	81 81       	ldd	r24, Z+1	; 0x01
    2324:	8f 70       	andi	r24, 0x0F	; 15
    2326:	80 93 e9 00 	sts	0x00E9, r24
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
    232a:	80 91 f2 00 	lds	r24, 0x00F2
    232e:	90 91 f3 00 	lds	r25, 0x00F3

	uint8_t ErrorCode;

	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataINEndpoint.Address);

	if (!(Endpoint_BytesInEndpoint()))
    2332:	00 97       	sbiw	r24, 0x00	; 0
    2334:	a1 f0       	breq	.+40     	; 0x235e <CDC_Device_Flush+0x56>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    2336:	90 91 e8 00 	lds	r25, 0x00E8
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    233a:	80 91 e8 00 	lds	r24, 0x00E8
    233e:	8e 77       	andi	r24, 0x7E	; 126
    2340:	80 93 e8 00 	sts	0x00E8, r24

	bool BankFull = !(Endpoint_IsReadWriteAllowed());

	Endpoint_ClearIN();

	if (BankFull)
    2344:	95 fd       	sbrc	r25, 5
    2346:	0d c0       	rjmp	.+26     	; 0x2362 <CDC_Device_Flush+0x5a>
	{
		if ((ErrorCode = Endpoint_WaitUntilReady()) != ENDPOINT_READYWAIT_NoError)
    2348:	2f dc       	rcall	.-1954   	; 0x1ba8 <Endpoint_WaitUntilReady>
    234a:	88 23       	and	r24, r24
    234c:	59 f4       	brne	.+22     	; 0x2364 <CDC_Device_Flush+0x5c>
    234e:	90 91 e8 00 	lds	r25, 0x00E8
    2352:	9e 77       	andi	r25, 0x7E	; 126
    2354:	90 93 e8 00 	sts	0x00E8, r25
    2358:	08 95       	ret
    235a:	82 e0       	ldi	r24, 0x02	; 2
}

uint8_t CDC_Device_Flush(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
	  return ENDPOINT_RWSTREAM_DeviceDisconnected;
    235c:	08 95       	ret
    235e:	80 e0       	ldi	r24, 0x00	; 0
	uint8_t ErrorCode;

	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataINEndpoint.Address);

	if (!(Endpoint_BytesInEndpoint()))
	  return ENDPOINT_READYWAIT_NoError;
    2360:	08 95       	ret
    2362:	80 e0       	ldi	r24, 0x00	; 0
		  return ErrorCode;

		Endpoint_ClearIN();
	}

	return ENDPOINT_READYWAIT_NoError;
    2364:	08 95       	ret

00002366 <CDC_Device_USBTask>:
}
    2366:	2e b3       	in	r18, 0x1e	; 30
	return true;
}

void CDC_Device_USBTask(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
    2368:	24 30       	cpi	r18, 0x04	; 4
    236a:	99 f4       	brne	.+38     	; 0x2392 <CDC_Device_USBTask+0x2c>
    236c:	fc 01       	movw	r30, r24
    236e:	44 89       	ldd	r20, Z+20	; 0x14
    2370:	55 89       	ldd	r21, Z+21	; 0x15
    2372:	66 89       	ldd	r22, Z+22	; 0x16
    2374:	77 89       	ldd	r23, Z+23	; 0x17
    2376:	41 15       	cp	r20, r1
    2378:	51 05       	cpc	r21, r1
    237a:	61 05       	cpc	r22, r1
    237c:	71 05       	cpc	r23, r1
    237e:	49 f0       	breq	.+18     	; 0x2392 <CDC_Device_USBTask+0x2c>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    2380:	21 81       	ldd	r18, Z+1	; 0x01
    2382:	2f 70       	andi	r18, 0x0F	; 15
    2384:	20 93 e9 00 	sts	0x00E9, r18
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    2388:	20 91 e8 00 	lds	r18, 0x00E8
	  return;

	#if !defined(NO_CLASS_DRIVER_AUTOFLUSH)
	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataINEndpoint.Address);

	if (Endpoint_IsINReady())
    238c:	20 ff       	sbrs	r18, 0
    238e:	01 c0       	rjmp	.+2      	; 0x2392 <CDC_Device_USBTask+0x2c>
	  CDC_Device_Flush(CDCInterfaceInfo);
    2390:	bb cf       	rjmp	.-138    	; 0x2308 <CDC_Device_Flush>
    2392:	08 95       	ret

00002394 <CDC_Device_ReceiveByte>:
    2394:	fc 01       	movw	r30, r24
	}
}

int16_t CDC_Device_ReceiveByte(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
    2396:	8e b3       	in	r24, 0x1e	; 30
    2398:	84 30       	cpi	r24, 0x04	; 4
    239a:	51 f5       	brne	.+84     	; 0x23f0 <CDC_Device_ReceiveByte+0x5c>
    239c:	44 89       	ldd	r20, Z+20	; 0x14
    239e:	55 89       	ldd	r21, Z+21	; 0x15
    23a0:	66 89       	ldd	r22, Z+22	; 0x16
    23a2:	77 89       	ldd	r23, Z+23	; 0x17
    23a4:	41 15       	cp	r20, r1
    23a6:	51 05       	cpc	r21, r1
    23a8:	61 05       	cpc	r22, r1
    23aa:	71 05       	cpc	r23, r1
    23ac:	09 f1       	breq	.+66     	; 0x23f0 <CDC_Device_ReceiveByte+0x5c>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    23ae:	86 81       	ldd	r24, Z+6	; 0x06
    23b0:	8f 70       	andi	r24, 0x0F	; 15
    23b2:	80 93 e9 00 	sts	0x00E9, r24
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    23b6:	80 91 e8 00 	lds	r24, 0x00E8

	int16_t ReceivedByte = -1;

	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataOUTEndpoint.Address);

	if (Endpoint_IsOUTReceived())
    23ba:	82 ff       	sbrs	r24, 2
    23bc:	1c c0       	rjmp	.+56     	; 0x23f6 <CDC_Device_ReceiveByte+0x62>
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
    23be:	80 91 f2 00 	lds	r24, 0x00F2
    23c2:	90 91 f3 00 	lds	r25, 0x00F3
	{
		if (Endpoint_BytesInEndpoint())
    23c6:	00 97       	sbiw	r24, 0x00	; 0
    23c8:	21 f0       	breq	.+8      	; 0x23d2 <CDC_Device_ReceiveByte+0x3e>
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    23ca:	80 91 f1 00 	lds	r24, 0x00F1
		  ReceivedByte = Endpoint_Read_8();
    23ce:	90 e0       	ldi	r25, 0x00	; 0
    23d0:	02 c0       	rjmp	.+4      	; 0x23d6 <CDC_Device_ReceiveByte+0x42>
int16_t CDC_Device_ReceiveByte(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
	  return -1;

	int16_t ReceivedByte = -1;
    23d2:	8f ef       	ldi	r24, 0xFF	; 255
    23d4:	9f ef       	ldi	r25, 0xFF	; 255
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
    23d6:	20 91 f2 00 	lds	r18, 0x00F2
    23da:	30 91 f3 00 	lds	r19, 0x00F3
	if (Endpoint_IsOUTReceived())
	{
		if (Endpoint_BytesInEndpoint())
		  ReceivedByte = Endpoint_Read_8();

		if (!(Endpoint_BytesInEndpoint()))
    23de:	21 15       	cp	r18, r1
    23e0:	31 05       	cpc	r19, r1
    23e2:	59 f4       	brne	.+22     	; 0x23fa <CDC_Device_ReceiveByte+0x66>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    23e4:	20 91 e8 00 	lds	r18, 0x00E8
    23e8:	2b 77       	andi	r18, 0x7B	; 123
    23ea:	20 93 e8 00 	sts	0x00E8, r18
    23ee:	08 95       	ret
}

int16_t CDC_Device_ReceiveByte(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
	  return -1;
    23f0:	8f ef       	ldi	r24, 0xFF	; 255
    23f2:	9f ef       	ldi	r25, 0xFF	; 255
    23f4:	08 95       	ret

	int16_t ReceivedByte = -1;
    23f6:	8f ef       	ldi	r24, 0xFF	; 255
    23f8:	9f ef       	ldi	r25, 0xFF	; 255
		if (!(Endpoint_BytesInEndpoint()))
		  Endpoint_ClearOUT();
	}

	return ReceivedByte;
}
    23fa:	08 95       	ret

000023fc <CDC_Device_Event_Stub>:
#endif

void CDC_Device_Event_Stub(void)
{

}
    23fc:	08 95       	ret

000023fe <__udivmodsi4>:
    23fe:	a1 e2       	ldi	r26, 0x21	; 33
    2400:	1a 2e       	mov	r1, r26
    2402:	aa 1b       	sub	r26, r26
    2404:	bb 1b       	sub	r27, r27
    2406:	fd 01       	movw	r30, r26
    2408:	0d c0       	rjmp	.+26     	; 0x2424 <__udivmodsi4_ep>

0000240a <__udivmodsi4_loop>:
    240a:	aa 1f       	adc	r26, r26
    240c:	bb 1f       	adc	r27, r27
    240e:	ee 1f       	adc	r30, r30
    2410:	ff 1f       	adc	r31, r31
    2412:	a2 17       	cp	r26, r18
    2414:	b3 07       	cpc	r27, r19
    2416:	e4 07       	cpc	r30, r20
    2418:	f5 07       	cpc	r31, r21
    241a:	20 f0       	brcs	.+8      	; 0x2424 <__udivmodsi4_ep>
    241c:	a2 1b       	sub	r26, r18
    241e:	b3 0b       	sbc	r27, r19
    2420:	e4 0b       	sbc	r30, r20
    2422:	f5 0b       	sbc	r31, r21

00002424 <__udivmodsi4_ep>:
    2424:	66 1f       	adc	r22, r22
    2426:	77 1f       	adc	r23, r23
    2428:	88 1f       	adc	r24, r24
    242a:	99 1f       	adc	r25, r25
    242c:	1a 94       	dec	r1
    242e:	69 f7       	brne	.-38     	; 0x240a <__udivmodsi4_loop>
    2430:	60 95       	com	r22
    2432:	70 95       	com	r23
    2434:	80 95       	com	r24
    2436:	90 95       	com	r25
    2438:	9b 01       	movw	r18, r22
    243a:	ac 01       	movw	r20, r24
    243c:	bd 01       	movw	r22, r26
    243e:	cf 01       	movw	r24, r30
    2440:	08 95       	ret

00002442 <__eerd_byte_usb1287>:
    2442:	f9 99       	sbic	0x1f, 1	; 31
    2444:	fe cf       	rjmp	.-4      	; 0x2442 <__eerd_byte_usb1287>
    2446:	92 bd       	out	0x22, r25	; 34
    2448:	81 bd       	out	0x21, r24	; 33
    244a:	f8 9a       	sbi	0x1f, 0	; 31
    244c:	99 27       	eor	r25, r25
    244e:	80 b5       	in	r24, 0x20	; 32
    2450:	08 95       	ret

00002452 <__eeupd_byte_usb1287>:
    2452:	26 2f       	mov	r18, r22

00002454 <__eeupd_r18_usb1287>:
    2454:	f9 99       	sbic	0x1f, 1	; 31
    2456:	fe cf       	rjmp	.-4      	; 0x2454 <__eeupd_r18_usb1287>
    2458:	92 bd       	out	0x22, r25	; 34
    245a:	81 bd       	out	0x21, r24	; 33
    245c:	f8 9a       	sbi	0x1f, 0	; 31
    245e:	01 97       	sbiw	r24, 0x01	; 1
    2460:	00 b4       	in	r0, 0x20	; 32
    2462:	02 16       	cp	r0, r18
    2464:	39 f0       	breq	.+14     	; 0x2474 <__eeupd_r18_usb1287+0x20>
    2466:	1f ba       	out	0x1f, r1	; 31
    2468:	20 bd       	out	0x20, r18	; 32
    246a:	0f b6       	in	r0, 0x3f	; 63
    246c:	f8 94       	cli
    246e:	fa 9a       	sbi	0x1f, 2	; 31
    2470:	f9 9a       	sbi	0x1f, 1	; 31
    2472:	0f be       	out	0x3f, r0	; 63
    2474:	08 95       	ret

00002476 <_exit>:
    2476:	f8 94       	cli

00002478 <__stop_program>:
    2478:	ff cf       	rjmp	.-2      	; 0x2478 <__stop_program>
