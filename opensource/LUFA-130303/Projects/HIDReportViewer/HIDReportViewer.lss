
HIDReportViewer.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000050  00800100  000026e0  00002774  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000026e0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000003fb  00800150  00800150  000027c4  2**0
                  ALLOC
  3 .stab         00000f90  00000000  00000000  000027c4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000030d  00000000  00000000  00003754  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000008a8  00000000  00000000  00003a68  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000dadc  00000000  00000000  00004310  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000343e  00000000  00000000  00011dec  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00005ab9  00000000  00000000  0001522a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000019dc  00000000  00000000  0001ace4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00004f39  00000000  00000000  0001c6c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000098e0  00000000  00000000  000215f9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000a70  00000000  00000000  0002aed9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	96 c2       	rjmp	.+1324   	; 0x52e <__ctors_end>
       2:	00 00       	nop
       4:	b3 c2       	rjmp	.+1382   	; 0x56c <__bad_interrupt>
       6:	00 00       	nop
       8:	b1 c2       	rjmp	.+1378   	; 0x56c <__bad_interrupt>
       a:	00 00       	nop
       c:	af c2       	rjmp	.+1374   	; 0x56c <__bad_interrupt>
       e:	00 00       	nop
      10:	ad c2       	rjmp	.+1370   	; 0x56c <__bad_interrupt>
      12:	00 00       	nop
      14:	ab c2       	rjmp	.+1366   	; 0x56c <__bad_interrupt>
      16:	00 00       	nop
      18:	a9 c2       	rjmp	.+1362   	; 0x56c <__bad_interrupt>
      1a:	00 00       	nop
      1c:	a7 c2       	rjmp	.+1358   	; 0x56c <__bad_interrupt>
      1e:	00 00       	nop
      20:	a5 c2       	rjmp	.+1354   	; 0x56c <__bad_interrupt>
      22:	00 00       	nop
      24:	a3 c2       	rjmp	.+1350   	; 0x56c <__bad_interrupt>
      26:	00 00       	nop
      28:	0c 94 28 0c 	jmp	0x1850	; 0x1850 <__vector_10>
      2c:	9f c2       	rjmp	.+1342   	; 0x56c <__bad_interrupt>
      2e:	00 00       	nop
      30:	9d c2       	rjmp	.+1338   	; 0x56c <__bad_interrupt>
      32:	00 00       	nop
      34:	9b c2       	rjmp	.+1334   	; 0x56c <__bad_interrupt>
      36:	00 00       	nop
      38:	99 c2       	rjmp	.+1330   	; 0x56c <__bad_interrupt>
      3a:	00 00       	nop
      3c:	97 c2       	rjmp	.+1326   	; 0x56c <__bad_interrupt>
      3e:	00 00       	nop
      40:	95 c2       	rjmp	.+1322   	; 0x56c <__bad_interrupt>
      42:	00 00       	nop
      44:	93 c2       	rjmp	.+1318   	; 0x56c <__bad_interrupt>
      46:	00 00       	nop
      48:	91 c2       	rjmp	.+1314   	; 0x56c <__bad_interrupt>
      4a:	00 00       	nop
      4c:	8f c2       	rjmp	.+1310   	; 0x56c <__bad_interrupt>
      4e:	00 00       	nop
      50:	8d c2       	rjmp	.+1306   	; 0x56c <__bad_interrupt>
      52:	00 00       	nop
      54:	8b c2       	rjmp	.+1302   	; 0x56c <__bad_interrupt>
      56:	00 00       	nop
      58:	89 c2       	rjmp	.+1298   	; 0x56c <__bad_interrupt>
      5a:	00 00       	nop
      5c:	87 c2       	rjmp	.+1294   	; 0x56c <__bad_interrupt>
      5e:	00 00       	nop
      60:	85 c2       	rjmp	.+1290   	; 0x56c <__bad_interrupt>
      62:	00 00       	nop
      64:	83 c2       	rjmp	.+1286   	; 0x56c <__bad_interrupt>
      66:	00 00       	nop
      68:	81 c2       	rjmp	.+1282   	; 0x56c <__bad_interrupt>
      6a:	00 00       	nop
      6c:	7f c2       	rjmp	.+1278   	; 0x56c <__bad_interrupt>
      6e:	00 00       	nop
      70:	7d c2       	rjmp	.+1274   	; 0x56c <__bad_interrupt>
      72:	00 00       	nop
      74:	7b c2       	rjmp	.+1270   	; 0x56c <__bad_interrupt>
      76:	00 00       	nop
      78:	79 c2       	rjmp	.+1266   	; 0x56c <__bad_interrupt>
      7a:	00 00       	nop
      7c:	77 c2       	rjmp	.+1262   	; 0x56c <__bad_interrupt>
      7e:	00 00       	nop
      80:	75 c2       	rjmp	.+1258   	; 0x56c <__bad_interrupt>
      82:	00 00       	nop
      84:	73 c2       	rjmp	.+1254   	; 0x56c <__bad_interrupt>
      86:	00 00       	nop
      88:	71 c2       	rjmp	.+1250   	; 0x56c <__bad_interrupt>
      8a:	00 00       	nop
      8c:	6f c2       	rjmp	.+1246   	; 0x56c <__bad_interrupt>
      8e:	00 00       	nop
      90:	6d c2       	rjmp	.+1242   	; 0x56c <__bad_interrupt>
      92:	00 00       	nop
      94:	6b c2       	rjmp	.+1238   	; 0x56c <__bad_interrupt>
      96:	00 00       	nop

00000098 <__c.4271>:
      98:	1b 5b 33 36 6d 48 49 44 20 44 65 76 69 63 65 20     .[36mHID Device 
      a8:	52 65 70 6f 72 74 20 56 69 65 77 65 72 20 52 75     Report Viewer Ru
      b8:	6e 6e 69 6e 67 2e 0d 0a 1b 5b 33 37 6d 00           nning....[37m.

000000c6 <__c.4280>:
      c6:	0d 0a 0d 0a 54 6f 74 61 6c 20 44 65 76 69 63 65     ....Total Device
      d6:	20 52 65 70 6f 72 74 73 3a 20 25 64 0d 0a 00         Reports: %d...

000000e5 <__c.4287>:
      e5:	20 20 2b 20 52 65 70 6f 72 74 20 49 44 20 30 78       + Report ID 0x
      f5:	25 30 32 58 0d 0a 20 20 20 20 2d 20 49 6e 70 75     %02X..    - Inpu
     105:	74 20 44 61 74 61 3a 20 20 20 25 64 20 62 69 74     t Data:   %d bit
     115:	73 20 28 25 64 20 62 79 74 65 73 29 0d 0a 20 20     s (%d bytes)..  
     125:	20 20 2d 20 4f 75 74 70 75 74 20 44 61 74 61 3a       - Output Data:
     135:	20 20 25 64 20 62 69 74 73 20 28 25 64 20 62 79       %d bits (%d by
     145:	74 65 73 29 0d 0a 20 20 20 20 2d 20 46 65 61 74     tes)..    - Feat
     155:	75 72 65 20 44 61 74 61 3a 20 25 64 20 62 69 74     ure Data: %d bit
     165:	73 20 28 25 64 20 62 79 74 65 73 29 0d 0a 00        s (%d bytes)...

00000174 <__c.4295>:
     174:	0d 0a 52 65 70 6f 72 74 20 49 74 65 6d 73 20 28     ..Report Items (
     184:	25 64 20 69 6e 20 54 61 62 6c 65 29 3a 0d 0a 00     %d in Table):...

00000194 <__c.4299>:
     194:	20 20 2b 20 49 74 65 6d 20 25 64 3a 0d 0a 20 20       + Item %d:..  
     1a4:	20 20 2d 20 52 65 70 6f 72 74 20 49 44 3a 20 20       - Report ID:  
     1b4:	20 20 20 20 20 20 20 20 30 78 25 30 32 58 0d 0a             0x%02X..
     1c4:	20 20 20 20 2d 20 44 61 74 61 20 44 69 72 65 63         - Data Direc
     1d4:	74 69 6f 6e 3a 20 20 20 20 20 25 73 0d 0a 20 20     tion:     %s..  
     1e4:	20 20 2d 20 49 74 65 6d 20 46 6c 61 67 73 3a 20       - Item Flags: 
     1f4:	20 20 20 20 20 20 20 20 30 78 25 30 32 58 0d 0a             0x%02X..
     204:	20 20 20 20 2d 20 49 74 65 6d 20 4f 66 66 73 65         - Item Offse
     214:	74 20 28 42 69 74 73 29 3a 20 30 78 25 30 32 58     t (Bits): 0x%02X
     224:	0d 0a 20 20 20 20 2d 20 49 74 65 6d 20 53 69 7a     ..    - Item Siz
     234:	65 20 28 42 69 74 73 29 3a 20 20 20 30 78 25 30     e (Bits):   0x%0
     244:	32 58 0d 0a 20 20 20 20 2d 20 55 73 61 67 65 20     2X..    - Usage 
     254:	50 61 67 65 3a 20 20 20 20 20 20 20 20 20 30 78     Page:         0x
     264:	25 30 34 58 0d 0a 20 20 20 20 2d 20 55 73 61 67     %04X..    - Usag
     274:	65 3a 20 20 20 20 20 20 20 20 20 20 20 20 20 20     e:              
     284:	30 78 25 30 34 58 0d 0a 20 20 20 20 2d 20 55 6e     0x%04X..    - Un
     294:	69 74 20 54 79 70 65 3a 20 20 20 20 20 20 20 20     it Type:        
     2a4:	20 20 30 78 25 30 38 6c 58 0d 0a 20 20 20 20 2d       0x%08lX..    -
     2b4:	20 55 6e 69 74 20 45 78 70 6f 6e 65 6e 74 3a 20      Unit Exponent: 
     2c4:	20 20 20 20 20 30 78 25 30 32 58 0d 0a 20 20 20          0x%02X..   
     2d4:	20 2d 20 4c 6f 67 69 63 61 6c 20 4d 69 6e 69 6d      - Logical Minim
     2e4:	75 6d 3a 20 20 20 20 30 78 25 30 38 6c 58 0d 0a     um:    0x%08lX..
     2f4:	20 20 20 20 2d 20 4c 6f 67 69 63 61 6c 20 4d 61         - Logical Ma
     304:	78 69 6d 75 6d 3a 20 20 20 20 30 78 25 30 38 6c     ximum:    0x%08l
     314:	58 0d 0a 20 20 20 20 2d 20 50 68 79 73 69 63 61     X..    - Physica
     324:	6c 20 4d 69 6e 69 6d 75 6d 3a 20 20 20 30 78 25     l Minimum:   0x%
     334:	30 38 6c 58 0d 0a 20 20 20 20 2d 20 50 68 79 73     08lX..    - Phys
     344:	69 63 61 6c 20 4d 61 78 69 6d 75 6d 3a 20 20 20     ical Maximum:   
     354:	30 78 25 30 38 6c 58 0d 0a 20 20 20 20 2d 20 43     0x%08lX..    - C
     364:	6f 6c 6c 65 63 74 69 6f 6e 20 50 61 74 68 3a 0d     ollection Path:.
     374:	0a 00                                               ..

00000376 <__c.4308>:
     376:	20 20 20 20 20 20 7c 0d 0a 20 20 20 20 20 20 2d           |..      -
     386:	20 54 79 70 65 3a 20 20 30 78 25 30 32 58 0d 0a      Type:  0x%02X..
     396:	20 20 20 20 20 20 2d 20 55 73 61 67 65 3a 20 30           - Usage: 0
     3a6:	78 25 30 32 58 0d 0a 00                             x%02X...

000003ae <__c.4313>:
     3ae:	20 20 20 20 20 20 7c 0d 0a 20 20 20 20 20 20 45           |..      E
     3be:	4e 44 0d 0a 00                                      ND...

000003c3 <__c.4321>:
     3c3:	44 65 76 69 63 65 20 41 74 74 61 63 68 65 64 2e     Device Attached.
     3d3:	0d 0a 00                                            ...

000003d6 <__c.4326>:
     3d6:	0d 0a 44 65 76 69 63 65 20 55 6e 61 74 74 61 63     ..Device Unattac
     3e6:	68 65 64 2e 0d 0a 00                                hed....

000003ed <__c.4333>:
     3ed:	45 72 72 6f 72 20 52 65 74 72 69 65 76 69 6e 67     Error Retrieving
     3fd:	20 43 6f 6e 66 69 67 75 72 61 74 69 6f 6e 20 44      Configuration D
     40d:	65 73 63 72 69 70 74 6f 72 2e 0d 0a 00              escriptor....

0000041a <__c.4335>:
     41a:	41 74 74 61 63 68 65 64 20 44 65 76 69 63 65 20     Attached Device 
     42a:	4e 6f 74 20 61 20 56 61 6c 69 64 20 48 49 44 20     Not a Valid HID 
     43a:	44 65 76 69 63 65 2e 0d 0a 00                       Device....

00000444 <__c.4337>:
     444:	45 72 72 6f 72 20 53 65 74 74 69 6e 67 20 44 65     Error Setting De
     454:	76 69 63 65 20 43 6f 6e 66 69 67 75 72 61 74 69     vice Configurati
     464:	6f 6e 2e 0d 0a 00                                   on....

0000046a <__c.4339>:
     46a:	45 72 72 6f 72 20 53 65 74 74 69 6e 67 20 52 65     Error Setting Re
     47a:	70 6f 72 74 20 50 72 6f 74 6f 63 6f 6c 20 4d 6f     port Protocol Mo
     48a:	64 65 2e 0d 0a 00                                   de....

00000490 <__c.4341>:
     490:	48 49 44 20 44 65 76 69 63 65 20 45 6e 75 6d 65     HID Device Enume
     4a0:	72 61 74 65 64 2e 0d 0a 00                          rated....

000004a9 <__c.4346>:
     4a9:	1b 5b 33 31 6d 48 6f 73 74 20 4d 6f 64 65 20 45     .[31mHost Mode E
     4b9:	72 72 6f 72 0d 0a 20 2d 2d 20 45 72 72 6f 72 20     rror.. -- Error 
     4c9:	43 6f 64 65 20 25 64 0d 0a 1b 5b 33 37 6d 00        Code %d...[37m.

000004d8 <__c.4353>:
     4d8:	1b 5b 33 31 6d 44 65 76 20 45 6e 75 6d 20 45 72     .[31mDev Enum Er
     4e8:	72 6f 72 0d 0a 20 2d 2d 20 45 72 72 6f 72 20 43     ror.. -- Error C
     4f8:	6f 64 65 20 25 64 0d 0a 20 2d 2d 20 53 75 62 20     ode %d.. -- Sub 
     508:	45 72 72 6f 72 20 43 6f 64 65 20 25 64 0d 0a 20     Error Code %d.. 
     518:	2d 2d 20 49 6e 20 53 74 61 74 65 20 25 64 0d 0a     -- In State %d..
     528:	1b 5b 33 37 6d 00                                   .[37m.

0000052e <__ctors_end>:
     52e:	11 24       	eor	r1, r1
     530:	1f be       	out	0x3f, r1	; 63
     532:	cf ef       	ldi	r28, 0xFF	; 255
     534:	d0 e2       	ldi	r29, 0x20	; 32
     536:	de bf       	out	0x3e, r29	; 62
     538:	cd bf       	out	0x3d, r28	; 61

0000053a <__do_copy_data>:
     53a:	11 e0       	ldi	r17, 0x01	; 1
     53c:	a0 e0       	ldi	r26, 0x00	; 0
     53e:	b1 e0       	ldi	r27, 0x01	; 1
     540:	e0 ee       	ldi	r30, 0xE0	; 224
     542:	f6 e2       	ldi	r31, 0x26	; 38
     544:	00 e0       	ldi	r16, 0x00	; 0
     546:	0b bf       	out	0x3b, r16	; 59
     548:	02 c0       	rjmp	.+4      	; 0x54e <__do_copy_data+0x14>
     54a:	07 90       	elpm	r0, Z+
     54c:	0d 92       	st	X+, r0
     54e:	a0 35       	cpi	r26, 0x50	; 80
     550:	b1 07       	cpc	r27, r17
     552:	d9 f7       	brne	.-10     	; 0x54a <__do_copy_data+0x10>
     554:	1b be       	out	0x3b, r1	; 59

00000556 <__do_clear_bss>:
     556:	15 e0       	ldi	r17, 0x05	; 5
     558:	a0 e5       	ldi	r26, 0x50	; 80
     55a:	b1 e0       	ldi	r27, 0x01	; 1
     55c:	01 c0       	rjmp	.+2      	; 0x560 <.do_clear_bss_start>

0000055e <.do_clear_bss_loop>:
     55e:	1d 92       	st	X+, r1

00000560 <.do_clear_bss_start>:
     560:	ab 34       	cpi	r26, 0x4B	; 75
     562:	b1 07       	cpc	r27, r17
     564:	e1 f7       	brne	.-8      	; 0x55e <.do_clear_bss_loop>
     566:	ed d1       	rcall	.+986    	; 0x942 <main>
     568:	0c 94 6e 13 	jmp	0x26dc	; 0x26dc <_exit>

0000056c <__bad_interrupt>:
     56c:	49 cd       	rjmp	.-1390   	; 0x0 <__vectors>

0000056e <LEDs_SetAllLEDs>:
				PORTD &= ~LEDMask;
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
			{
				PORTD = ((PORTD & ~LEDS_ALL_LEDS) | LEDMask);
     56e:	9b b1       	in	r25, 0x0b	; 11
     570:	9f 70       	andi	r25, 0x0F	; 15
     572:	98 2b       	or	r25, r24
     574:	9b b9       	out	0x0b, r25	; 11
			}
     576:	08 95       	ret

00000578 <OutputReportSizes>:

/** Prints a summary of the device's HID report sizes from the HID parser output to the serial port
 *  for display to the user.
 */
void OutputReportSizes(void)
{
     578:	bf 92       	push	r11
     57a:	cf 92       	push	r12
     57c:	df 92       	push	r13
     57e:	ef 92       	push	r14
     580:	ff 92       	push	r15
     582:	0f 93       	push	r16
     584:	1f 93       	push	r17
     586:	cf 93       	push	r28
     588:	df 93       	push	r29
	printf_P(PSTR("\r\n\r\nTotal Device Reports: %" PRId8 "\r\n"), HIDReportInfo.TotalDeviceReports);
     58a:	00 d0       	rcall	.+0      	; 0x58c <OutputReportSizes+0x14>
     58c:	00 d0       	rcall	.+0      	; 0x58e <OutputReportSizes+0x16>
     58e:	ed b7       	in	r30, 0x3d	; 61
     590:	fe b7       	in	r31, 0x3e	; 62
     592:	31 96       	adiw	r30, 0x01	; 1
     594:	86 ec       	ldi	r24, 0xC6	; 198
     596:	90 e0       	ldi	r25, 0x00	; 0
     598:	ad b7       	in	r26, 0x3d	; 61
     59a:	be b7       	in	r27, 0x3e	; 62
     59c:	12 96       	adiw	r26, 0x02	; 2
     59e:	9c 93       	st	X, r25
     5a0:	8e 93       	st	-X, r24
     5a2:	11 97       	sbiw	r26, 0x01	; 1
     5a4:	80 91 df 04 	lds	r24, 0x04DF
     5a8:	82 83       	std	Z+2, r24	; 0x02
     5aa:	13 82       	std	Z+3, r1	; 0x03
     5ac:	0e 94 86 10 	call	0x210c	; 0x210c <printf_P>

	for (uint8_t ReportIndex = 0; ReportIndex < HIDReportInfo.TotalDeviceReports; ReportIndex++)
     5b0:	0f 90       	pop	r0
     5b2:	0f 90       	pop	r0
     5b4:	0f 90       	pop	r0
     5b6:	0f 90       	pop	r0
     5b8:	bb 24       	eor	r11, r11
		uint8_t ReportSizeInBits      = CurrReportIDInfo->ReportSizeBits[HID_REPORT_ITEM_In];
		uint8_t ReportSizeOutBits     = CurrReportIDInfo->ReportSizeBits[HID_REPORT_ITEM_Out];
		uint8_t ReportSizeFeatureBits = CurrReportIDInfo->ReportSizeBits[HID_REPORT_ITEM_Feature];

		/* Print out the byte sizes of each report within the device */
		printf_P(PSTR("  + Report ID 0x%02" PRIX8 "\r\n"
     5ba:	35 ee       	ldi	r19, 0xE5	; 229
     5bc:	c3 2e       	mov	r12, r19
     5be:	30 e0       	ldi	r19, 0x00	; 0
     5c0:	d3 2e       	mov	r13, r19
 */
void OutputReportSizes(void)
{
	printf_P(PSTR("\r\n\r\nTotal Device Reports: %" PRId8 "\r\n"), HIDReportInfo.TotalDeviceReports);

	for (uint8_t ReportIndex = 0; ReportIndex < HIDReportInfo.TotalDeviceReports; ReportIndex++)
     5c2:	7d c0       	rjmp	.+250    	; 0x6be <OutputReportSizes+0x146>
	{
		const HID_ReportSizeInfo_t* CurrReportIDInfo = &HIDReportInfo.ReportIDSizes[ReportIndex];
     5c4:	8b 2d       	mov	r24, r11
     5c6:	90 e0       	ldi	r25, 0x00	; 0
     5c8:	fc 01       	movw	r30, r24
     5ca:	23 e0       	ldi	r18, 0x03	; 3
     5cc:	ee 0f       	add	r30, r30
     5ce:	ff 1f       	adc	r31, r31
     5d0:	2a 95       	dec	r18
     5d2:	e1 f7       	brne	.-8      	; 0x5cc <OutputReportSizes+0x54>
     5d4:	e8 1b       	sub	r30, r24
     5d6:	f9 0b       	sbc	r31, r25
     5d8:	e0 52       	subi	r30, 0x20	; 32
     5da:	fb 4f       	sbci	r31, 0xFB	; 251

		uint8_t ReportSizeInBits      = CurrReportIDInfo->ReportSizeBits[HID_REPORT_ITEM_In];
     5dc:	81 81       	ldd	r24, Z+1	; 0x01
		uint8_t ReportSizeOutBits     = CurrReportIDInfo->ReportSizeBits[HID_REPORT_ITEM_Out];
     5de:	43 81       	ldd	r20, Z+3	; 0x03
		uint8_t ReportSizeFeatureBits = CurrReportIDInfo->ReportSizeBits[HID_REPORT_ITEM_Feature];
     5e0:	65 81       	ldd	r22, Z+5	; 0x05
					  "    - Input Data:   %" PRId8 " bits (%" PRId8 " bytes)\r\n"
					  "    - Output Data:  %" PRId8 " bits (%" PRId8 " bytes)\r\n"
					  "    - Feature Data: %" PRId8 " bits (%" PRId8 " bytes)\r\n"),
				 CurrReportIDInfo->ReportID,
				 ReportSizeInBits,
				 ((ReportSizeInBits      >> 3) + ((ReportSizeInBits      & 0x07) != 0)),
     5e2:	28 2f       	mov	r18, r24
     5e4:	30 e0       	ldi	r19, 0x00	; 0
				 ReportSizeOutBits,
				 ((ReportSizeOutBits     >> 3) + ((ReportSizeOutBits     & 0x07) != 0)),
     5e6:	04 2f       	mov	r16, r20
     5e8:	10 e0       	ldi	r17, 0x00	; 0
				 ReportSizeFeatureBits,
				 ((ReportSizeFeatureBits >> 3) + ((ReportSizeFeatureBits & 0x07) != 0)));
     5ea:	e6 2e       	mov	r14, r22
     5ec:	ff 24       	eor	r15, r15
		uint8_t ReportSizeInBits      = CurrReportIDInfo->ReportSizeBits[HID_REPORT_ITEM_In];
		uint8_t ReportSizeOutBits     = CurrReportIDInfo->ReportSizeBits[HID_REPORT_ITEM_Out];
		uint8_t ReportSizeFeatureBits = CurrReportIDInfo->ReportSizeBits[HID_REPORT_ITEM_Feature];

		/* Print out the byte sizes of each report within the device */
		printf_P(PSTR("  + Report ID 0x%02" PRIX8 "\r\n"
     5ee:	cd b7       	in	r28, 0x3d	; 61
     5f0:	de b7       	in	r29, 0x3e	; 62
     5f2:	60 97       	sbiw	r28, 0x10	; 16
     5f4:	0f b6       	in	r0, 0x3f	; 63
     5f6:	f8 94       	cli
     5f8:	de bf       	out	0x3e, r29	; 62
     5fa:	0f be       	out	0x3f, r0	; 63
     5fc:	cd bf       	out	0x3d, r28	; 61
     5fe:	ad b7       	in	r26, 0x3d	; 61
     600:	be b7       	in	r27, 0x3e	; 62
     602:	11 96       	adiw	r26, 0x01	; 1
     604:	da 82       	std	Y+2, r13	; 0x02
     606:	c9 82       	std	Y+1, r12	; 0x01
     608:	90 81       	ld	r25, Z
     60a:	12 96       	adiw	r26, 0x02	; 2
     60c:	9c 93       	st	X, r25
     60e:	12 97       	sbiw	r26, 0x02	; 2
     610:	13 96       	adiw	r26, 0x03	; 3
     612:	1c 92       	st	X, r1
     614:	13 97       	sbiw	r26, 0x03	; 3
     616:	15 96       	adiw	r26, 0x05	; 5
     618:	3c 93       	st	X, r19
     61a:	2e 93       	st	-X, r18
     61c:	14 97       	sbiw	r26, 0x04	; 4
					  "    - Input Data:   %" PRId8 " bits (%" PRId8 " bytes)\r\n"
					  "    - Output Data:  %" PRId8 " bits (%" PRId8 " bytes)\r\n"
					  "    - Feature Data: %" PRId8 " bits (%" PRId8 " bytes)\r\n"),
				 CurrReportIDInfo->ReportID,
				 ReportSizeInBits,
				 ((ReportSizeInBits      >> 3) + ((ReportSizeInBits      & 0x07) != 0)),
     61e:	86 95       	lsr	r24
     620:	86 95       	lsr	r24
     622:	86 95       	lsr	r24
     624:	e8 2f       	mov	r30, r24
     626:	f0 e0       	ldi	r31, 0x00	; 0
     628:	27 70       	andi	r18, 0x07	; 7
     62a:	30 70       	andi	r19, 0x00	; 0
     62c:	81 e0       	ldi	r24, 0x01	; 1
     62e:	90 e0       	ldi	r25, 0x00	; 0
     630:	21 15       	cp	r18, r1
     632:	31 05       	cpc	r19, r1
     634:	11 f4       	brne	.+4      	; 0x63a <OutputReportSizes+0xc2>
     636:	80 e0       	ldi	r24, 0x00	; 0
     638:	90 e0       	ldi	r25, 0x00	; 0
		uint8_t ReportSizeInBits      = CurrReportIDInfo->ReportSizeBits[HID_REPORT_ITEM_In];
		uint8_t ReportSizeOutBits     = CurrReportIDInfo->ReportSizeBits[HID_REPORT_ITEM_Out];
		uint8_t ReportSizeFeatureBits = CurrReportIDInfo->ReportSizeBits[HID_REPORT_ITEM_Feature];

		/* Print out the byte sizes of each report within the device */
		printf_P(PSTR("  + Report ID 0x%02" PRIX8 "\r\n"
     63a:	8e 0f       	add	r24, r30
     63c:	9f 1f       	adc	r25, r31
     63e:	17 96       	adiw	r26, 0x07	; 7
     640:	9c 93       	st	X, r25
     642:	8e 93       	st	-X, r24
     644:	16 97       	sbiw	r26, 0x06	; 6
     646:	19 96       	adiw	r26, 0x09	; 9
     648:	1c 93       	st	X, r17
     64a:	0e 93       	st	-X, r16
     64c:	18 97       	sbiw	r26, 0x08	; 8
					  "    - Feature Data: %" PRId8 " bits (%" PRId8 " bytes)\r\n"),
				 CurrReportIDInfo->ReportID,
				 ReportSizeInBits,
				 ((ReportSizeInBits      >> 3) + ((ReportSizeInBits      & 0x07) != 0)),
				 ReportSizeOutBits,
				 ((ReportSizeOutBits     >> 3) + ((ReportSizeOutBits     & 0x07) != 0)),
     64e:	46 95       	lsr	r20
     650:	46 95       	lsr	r20
     652:	46 95       	lsr	r20
     654:	50 e0       	ldi	r21, 0x00	; 0
     656:	98 01       	movw	r18, r16
     658:	27 70       	andi	r18, 0x07	; 7
     65a:	30 70       	andi	r19, 0x00	; 0
     65c:	81 e0       	ldi	r24, 0x01	; 1
     65e:	90 e0       	ldi	r25, 0x00	; 0
     660:	21 15       	cp	r18, r1
     662:	31 05       	cpc	r19, r1
     664:	11 f4       	brne	.+4      	; 0x66a <OutputReportSizes+0xf2>
     666:	80 e0       	ldi	r24, 0x00	; 0
     668:	90 e0       	ldi	r25, 0x00	; 0
		uint8_t ReportSizeInBits      = CurrReportIDInfo->ReportSizeBits[HID_REPORT_ITEM_In];
		uint8_t ReportSizeOutBits     = CurrReportIDInfo->ReportSizeBits[HID_REPORT_ITEM_Out];
		uint8_t ReportSizeFeatureBits = CurrReportIDInfo->ReportSizeBits[HID_REPORT_ITEM_Feature];

		/* Print out the byte sizes of each report within the device */
		printf_P(PSTR("  + Report ID 0x%02" PRIX8 "\r\n"
     66a:	84 0f       	add	r24, r20
     66c:	95 1f       	adc	r25, r21
     66e:	1b 96       	adiw	r26, 0x0b	; 11
     670:	9c 93       	st	X, r25
     672:	8e 93       	st	-X, r24
     674:	1a 97       	sbiw	r26, 0x0a	; 10
     676:	1d 96       	adiw	r26, 0x0d	; 13
     678:	fc 92       	st	X, r15
     67a:	ee 92       	st	-X, r14
     67c:	1c 97       	sbiw	r26, 0x0c	; 12
				 ReportSizeInBits,
				 ((ReportSizeInBits      >> 3) + ((ReportSizeInBits      & 0x07) != 0)),
				 ReportSizeOutBits,
				 ((ReportSizeOutBits     >> 3) + ((ReportSizeOutBits     & 0x07) != 0)),
				 ReportSizeFeatureBits,
				 ((ReportSizeFeatureBits >> 3) + ((ReportSizeFeatureBits & 0x07) != 0)));
     67e:	66 95       	lsr	r22
     680:	66 95       	lsr	r22
     682:	66 95       	lsr	r22
     684:	46 2f       	mov	r20, r22
     686:	50 e0       	ldi	r21, 0x00	; 0
     688:	97 01       	movw	r18, r14
     68a:	27 70       	andi	r18, 0x07	; 7
     68c:	30 70       	andi	r19, 0x00	; 0
     68e:	81 e0       	ldi	r24, 0x01	; 1
     690:	90 e0       	ldi	r25, 0x00	; 0
     692:	21 15       	cp	r18, r1
     694:	31 05       	cpc	r19, r1
     696:	11 f4       	brne	.+4      	; 0x69c <OutputReportSizes+0x124>
     698:	80 e0       	ldi	r24, 0x00	; 0
     69a:	90 e0       	ldi	r25, 0x00	; 0
		uint8_t ReportSizeInBits      = CurrReportIDInfo->ReportSizeBits[HID_REPORT_ITEM_In];
		uint8_t ReportSizeOutBits     = CurrReportIDInfo->ReportSizeBits[HID_REPORT_ITEM_Out];
		uint8_t ReportSizeFeatureBits = CurrReportIDInfo->ReportSizeBits[HID_REPORT_ITEM_Feature];

		/* Print out the byte sizes of each report within the device */
		printf_P(PSTR("  + Report ID 0x%02" PRIX8 "\r\n"
     69c:	84 0f       	add	r24, r20
     69e:	95 1f       	adc	r25, r21
     6a0:	1f 96       	adiw	r26, 0x0f	; 15
     6a2:	9c 93       	st	X, r25
     6a4:	8e 93       	st	-X, r24
     6a6:	1e 97       	sbiw	r26, 0x0e	; 14
     6a8:	0e 94 86 10 	call	0x210c	; 0x210c <printf_P>
 */
void OutputReportSizes(void)
{
	printf_P(PSTR("\r\n\r\nTotal Device Reports: %" PRId8 "\r\n"), HIDReportInfo.TotalDeviceReports);

	for (uint8_t ReportIndex = 0; ReportIndex < HIDReportInfo.TotalDeviceReports; ReportIndex++)
     6ac:	b3 94       	inc	r11
     6ae:	8d b7       	in	r24, 0x3d	; 61
     6b0:	9e b7       	in	r25, 0x3e	; 62
     6b2:	40 96       	adiw	r24, 0x10	; 16
     6b4:	0f b6       	in	r0, 0x3f	; 63
     6b6:	f8 94       	cli
     6b8:	9e bf       	out	0x3e, r25	; 62
     6ba:	0f be       	out	0x3f, r0	; 63
     6bc:	8d bf       	out	0x3d, r24	; 61
     6be:	80 91 df 04 	lds	r24, 0x04DF
     6c2:	b8 16       	cp	r11, r24
     6c4:	08 f4       	brcc	.+2      	; 0x6c8 <OutputReportSizes+0x150>
     6c6:	7e cf       	rjmp	.-260    	; 0x5c4 <OutputReportSizes+0x4c>
				 ReportSizeOutBits,
				 ((ReportSizeOutBits     >> 3) + ((ReportSizeOutBits     & 0x07) != 0)),
				 ReportSizeFeatureBits,
				 ((ReportSizeFeatureBits >> 3) + ((ReportSizeFeatureBits & 0x07) != 0)));
	}
}
     6c8:	df 91       	pop	r29
     6ca:	cf 91       	pop	r28
     6cc:	1f 91       	pop	r17
     6ce:	0f 91       	pop	r16
     6d0:	ff 90       	pop	r15
     6d2:	ef 90       	pop	r14
     6d4:	df 90       	pop	r13
     6d6:	cf 90       	pop	r12
     6d8:	bf 90       	pop	r11
     6da:	08 95       	ret

000006dc <OutputCollectionPath>:
 *  for display to the user, from the given starting node to the root node.
 *
 *  \param[in] CollectionPath  Starting HID Collection node to print
 */
void OutputCollectionPath(const HID_CollectionPath_t* const CollectionPath)
{
     6dc:	0f 93       	push	r16
     6de:	1f 93       	push	r17
     6e0:	cf 93       	push	r28
     6e2:	df 93       	push	r29
	const HID_CollectionPath_t* CurrentNode = CollectionPath;
     6e4:	ec 01       	movw	r28, r24

	while (CurrentNode != NULL)
	{
		printf_P(PSTR("      |\r\n"
     6e6:	06 e7       	ldi	r16, 0x76	; 118
     6e8:	13 e0       	ldi	r17, 0x03	; 3
 */
void OutputCollectionPath(const HID_CollectionPath_t* const CollectionPath)
{
	const HID_CollectionPath_t* CurrentNode = CollectionPath;

	while (CurrentNode != NULL)
     6ea:	29 c0       	rjmp	.+82     	; 0x73e <OutputCollectionPath+0x62>
	{
		printf_P(PSTR("      |\r\n"
     6ec:	8d b7       	in	r24, 0x3d	; 61
     6ee:	9e b7       	in	r25, 0x3e	; 62
     6f0:	08 97       	sbiw	r24, 0x08	; 8
     6f2:	0f b6       	in	r0, 0x3f	; 63
     6f4:	f8 94       	cli
     6f6:	9e bf       	out	0x3e, r25	; 62
     6f8:	0f be       	out	0x3f, r0	; 63
     6fa:	8d bf       	out	0x3d, r24	; 61
     6fc:	ed b7       	in	r30, 0x3d	; 61
     6fe:	fe b7       	in	r31, 0x3e	; 62
     700:	31 96       	adiw	r30, 0x01	; 1
     702:	ad b7       	in	r26, 0x3d	; 61
     704:	be b7       	in	r27, 0x3e	; 62
     706:	12 96       	adiw	r26, 0x02	; 2
     708:	1c 93       	st	X, r17
     70a:	0e 93       	st	-X, r16
     70c:	11 97       	sbiw	r26, 0x01	; 1
     70e:	88 81       	ld	r24, Y
     710:	82 83       	std	Z+2, r24	; 0x02
     712:	13 82       	std	Z+3, r1	; 0x03
     714:	89 81       	ldd	r24, Y+1	; 0x01
     716:	9a 81       	ldd	r25, Y+2	; 0x02
     718:	ab 81       	ldd	r26, Y+3	; 0x03
     71a:	bc 81       	ldd	r27, Y+4	; 0x04
     71c:	84 83       	std	Z+4, r24	; 0x04
     71e:	95 83       	std	Z+5, r25	; 0x05
     720:	a6 83       	std	Z+6, r26	; 0x06
     722:	b7 83       	std	Z+7, r27	; 0x07
     724:	0e 94 86 10 	call	0x210c	; 0x210c <printf_P>
					  "      - Type:  0x%02" PRIX8 "\r\n"
					  "      - Usage: 0x%02" PRIX8 "\r\n"),
					  CurrentNode->Type, CurrentNode->Usage);

		CurrentNode = CurrentNode->Parent;
     728:	0d 80       	ldd	r0, Y+5	; 0x05
     72a:	de 81       	ldd	r29, Y+6	; 0x06
     72c:	c0 2d       	mov	r28, r0
     72e:	ed b7       	in	r30, 0x3d	; 61
     730:	fe b7       	in	r31, 0x3e	; 62
     732:	38 96       	adiw	r30, 0x08	; 8
     734:	0f b6       	in	r0, 0x3f	; 63
     736:	f8 94       	cli
     738:	fe bf       	out	0x3e, r31	; 62
     73a:	0f be       	out	0x3f, r0	; 63
     73c:	ed bf       	out	0x3d, r30	; 61
 */
void OutputCollectionPath(const HID_CollectionPath_t* const CollectionPath)
{
	const HID_CollectionPath_t* CurrentNode = CollectionPath;

	while (CurrentNode != NULL)
     73e:	20 97       	sbiw	r28, 0x00	; 0
     740:	a9 f6       	brne	.-86     	; 0x6ec <OutputCollectionPath+0x10>
					  CurrentNode->Type, CurrentNode->Usage);

		CurrentNode = CurrentNode->Parent;
	}

	printf_P(PSTR("      |\r\n"
     742:	00 d0       	rcall	.+0      	; 0x744 <OutputCollectionPath+0x68>
     744:	8e ea       	ldi	r24, 0xAE	; 174
     746:	93 e0       	ldi	r25, 0x03	; 3
     748:	ad b7       	in	r26, 0x3d	; 61
     74a:	be b7       	in	r27, 0x3e	; 62
     74c:	12 96       	adiw	r26, 0x02	; 2
     74e:	9c 93       	st	X, r25
     750:	8e 93       	st	-X, r24
     752:	11 97       	sbiw	r26, 0x01	; 1
     754:	0e 94 86 10 	call	0x210c	; 0x210c <printf_P>
     758:	0f 90       	pop	r0
     75a:	0f 90       	pop	r0
				  "      END\r\n"));
}
     75c:	df 91       	pop	r29
     75e:	cf 91       	pop	r28
     760:	1f 91       	pop	r17
     762:	0f 91       	pop	r16
     764:	08 95       	ret

00000766 <OutputParsedReportItems>:

/** Prints a summary of the device's parsed and stored report items along with their attributes
 *  to the serial port for display to the user.
 */
void OutputParsedReportItems(void)
{
     766:	cf 92       	push	r12
     768:	df 92       	push	r13
     76a:	ef 92       	push	r14
     76c:	ff 92       	push	r15
     76e:	1f 93       	push	r17
     770:	cf 93       	push	r28
     772:	df 93       	push	r29
	printf_P(PSTR("\r\nReport Items (%" PRId8 " in Table):\r\n"), HIDReportInfo.TotalReportItems);
     774:	00 d0       	rcall	.+0      	; 0x776 <OutputParsedReportItems+0x10>
     776:	00 d0       	rcall	.+0      	; 0x778 <OutputParsedReportItems+0x12>
     778:	ed b7       	in	r30, 0x3d	; 61
     77a:	fe b7       	in	r31, 0x3e	; 62
     77c:	31 96       	adiw	r30, 0x01	; 1
     77e:	84 e7       	ldi	r24, 0x74	; 116
     780:	91 e0       	ldi	r25, 0x01	; 1
     782:	ad b7       	in	r26, 0x3d	; 61
     784:	be b7       	in	r27, 0x3e	; 62
     786:	12 96       	adiw	r26, 0x02	; 2
     788:	9c 93       	st	X, r25
     78a:	8e 93       	st	-X, r24
     78c:	11 97       	sbiw	r26, 0x01	; 1
     78e:	80 91 50 01 	lds	r24, 0x0150
     792:	82 83       	std	Z+2, r24	; 0x02
     794:	13 82       	std	Z+3, r1	; 0x03
     796:	0e 94 86 10 	call	0x210c	; 0x210c <printf_P>

	for (uint8_t ItemIndex = 0; ItemIndex < HIDReportInfo.TotalReportItems; ItemIndex++)
     79a:	0f 90       	pop	r0
     79c:	0f 90       	pop	r0
     79e:	0f 90       	pop	r0
     7a0:	0f 90       	pop	r0
     7a2:	10 e0       	ldi	r17, 0x00	; 0
	{
		const HID_ReportItem_t* RItem = &HIDReportInfo.ReportItems[ItemIndex];
     7a4:	4a e2       	ldi	r20, 0x2A	; 42
     7a6:	e4 2e       	mov	r14, r20
     7a8:	f1 2c       	mov	r15, r1

		printf_P(PSTR("  + Item %" PRId8 ":\r\n"
     7aa:	54 e9       	ldi	r21, 0x94	; 148
     7ac:	c5 2e       	mov	r12, r21
     7ae:	51 e0       	ldi	r21, 0x01	; 1
     7b0:	d5 2e       	mov	r13, r21
 */
void OutputParsedReportItems(void)
{
	printf_P(PSTR("\r\nReport Items (%" PRId8 " in Table):\r\n"), HIDReportInfo.TotalReportItems);

	for (uint8_t ItemIndex = 0; ItemIndex < HIDReportInfo.TotalReportItems; ItemIndex++)
     7b2:	7e c0       	rjmp	.+252    	; 0x8b0 <OutputParsedReportItems+0x14a>
	{
		const HID_ReportItem_t* RItem = &HIDReportInfo.ReportItems[ItemIndex];
     7b4:	81 2f       	mov	r24, r17
     7b6:	90 e0       	ldi	r25, 0x00	; 0
     7b8:	8e 9d       	mul	r24, r14
     7ba:	e0 01       	movw	r28, r0
     7bc:	8f 9d       	mul	r24, r15
     7be:	d0 0d       	add	r29, r0
     7c0:	9e 9d       	mul	r25, r14
     7c2:	d0 0d       	add	r29, r0
     7c4:	11 24       	eor	r1, r1
     7c6:	cf 5a       	subi	r28, 0xAF	; 175
     7c8:	de 4f       	sbci	r29, 0xFE	; 254

		printf_P(PSTR("  + Item %" PRId8 ":\r\n"
     7ca:	2d 81       	ldd	r18, Y+5	; 0x05
					  "    - Physical Minimum:   0x%08" PRIX32 "\r\n"
					  "    - Physical Maximum:   0x%08" PRIX32 "\r\n"
					  "    - Collection Path:\r\n"),
				 ItemIndex,
				 RItem->ReportID,
				 ((RItem->ItemType == HID_REPORT_ITEM_In) ? "IN" : ((RItem->ItemType == HID_REPORT_ITEM_Out) ? "OUT" : "FEATURE")),
     7cc:	8a 81       	ldd	r24, Y+2	; 0x02

	for (uint8_t ItemIndex = 0; ItemIndex < HIDReportInfo.TotalReportItems; ItemIndex++)
	{
		const HID_ReportItem_t* RItem = &HIDReportInfo.ReportItems[ItemIndex];

		printf_P(PSTR("  + Item %" PRId8 ":\r\n"
     7ce:	88 23       	and	r24, r24
     7d0:	29 f0       	breq	.+10     	; 0x7dc <OutputParsedReportItems+0x76>
					  "    - Physical Minimum:   0x%08" PRIX32 "\r\n"
					  "    - Physical Maximum:   0x%08" PRIX32 "\r\n"
					  "    - Collection Path:\r\n"),
				 ItemIndex,
				 RItem->ReportID,
				 ((RItem->ItemType == HID_REPORT_ITEM_In) ? "IN" : ((RItem->ItemType == HID_REPORT_ITEM_Out) ? "OUT" : "FEATURE")),
     7d2:	81 30       	cpi	r24, 0x01	; 1
     7d4:	31 f4       	brne	.+12     	; 0x7e2 <OutputParsedReportItems+0x7c>
     7d6:	8b e0       	ldi	r24, 0x0B	; 11
     7d8:	91 e0       	ldi	r25, 0x01	; 1
     7da:	05 c0       	rjmp	.+10     	; 0x7e6 <OutputParsedReportItems+0x80>

	for (uint8_t ItemIndex = 0; ItemIndex < HIDReportInfo.TotalReportItems; ItemIndex++)
	{
		const HID_ReportItem_t* RItem = &HIDReportInfo.ReportItems[ItemIndex];

		printf_P(PSTR("  + Item %" PRId8 ":\r\n"
     7dc:	88 e0       	ldi	r24, 0x08	; 8
     7de:	91 e0       	ldi	r25, 0x01	; 1
     7e0:	02 c0       	rjmp	.+4      	; 0x7e6 <OutputParsedReportItems+0x80>
					  "    - Physical Minimum:   0x%08" PRIX32 "\r\n"
					  "    - Physical Maximum:   0x%08" PRIX32 "\r\n"
					  "    - Collection Path:\r\n"),
				 ItemIndex,
				 RItem->ReportID,
				 ((RItem->ItemType == HID_REPORT_ITEM_In) ? "IN" : ((RItem->ItemType == HID_REPORT_ITEM_Out) ? "OUT" : "FEATURE")),
     7e2:	80 e0       	ldi	r24, 0x00	; 0
     7e4:	91 e0       	ldi	r25, 0x01	; 1

	for (uint8_t ItemIndex = 0; ItemIndex < HIDReportInfo.TotalReportItems; ItemIndex++)
	{
		const HID_ReportItem_t* RItem = &HIDReportInfo.ReportItems[ItemIndex];

		printf_P(PSTR("  + Item %" PRId8 ":\r\n"
     7e6:	4d b7       	in	r20, 0x3d	; 61
     7e8:	5e b7       	in	r21, 0x3e	; 62
     7ea:	48 52       	subi	r20, 0x28	; 40
     7ec:	50 40       	sbci	r21, 0x00	; 0
     7ee:	0f b6       	in	r0, 0x3f	; 63
     7f0:	f8 94       	cli
     7f2:	5e bf       	out	0x3e, r21	; 62
     7f4:	0f be       	out	0x3f, r0	; 63
     7f6:	4d bf       	out	0x3d, r20	; 61
     7f8:	ed b7       	in	r30, 0x3d	; 61
     7fa:	fe b7       	in	r31, 0x3e	; 62
     7fc:	31 96       	adiw	r30, 0x01	; 1
     7fe:	ad b7       	in	r26, 0x3d	; 61
     800:	be b7       	in	r27, 0x3e	; 62
     802:	12 96       	adiw	r26, 0x02	; 2
     804:	dc 92       	st	X, r13
     806:	ce 92       	st	-X, r12
     808:	11 97       	sbiw	r26, 0x01	; 1
     80a:	12 83       	std	Z+2, r17	; 0x02
     80c:	13 82       	std	Z+3, r1	; 0x03
     80e:	24 83       	std	Z+4, r18	; 0x04
     810:	15 82       	std	Z+5, r1	; 0x05
     812:	97 83       	std	Z+7, r25	; 0x07
     814:	86 83       	std	Z+6, r24	; 0x06
     816:	8b 81       	ldd	r24, Y+3	; 0x03
     818:	9c 81       	ldd	r25, Y+4	; 0x04
     81a:	91 87       	std	Z+9, r25	; 0x09
     81c:	80 87       	std	Z+8, r24	; 0x08
     81e:	88 81       	ld	r24, Y
     820:	99 81       	ldd	r25, Y+1	; 0x01
     822:	93 87       	std	Z+11, r25	; 0x0b
     824:	82 87       	std	Z+10, r24	; 0x0a
     826:	88 85       	ldd	r24, Y+8	; 0x08
     828:	84 87       	std	Z+12, r24	; 0x0c
     82a:	15 86       	std	Z+13, r1	; 0x0d
     82c:	89 85       	ldd	r24, Y+9	; 0x09
     82e:	9a 85       	ldd	r25, Y+10	; 0x0a
     830:	97 87       	std	Z+15, r25	; 0x0f
     832:	86 87       	std	Z+14, r24	; 0x0e
     834:	8b 85       	ldd	r24, Y+11	; 0x0b
     836:	9c 85       	ldd	r25, Y+12	; 0x0c
     838:	91 8b       	std	Z+17, r25	; 0x11
     83a:	80 8b       	std	Z+16, r24	; 0x10
     83c:	8d 85       	ldd	r24, Y+13	; 0x0d
     83e:	9e 85       	ldd	r25, Y+14	; 0x0e
     840:	af 85       	ldd	r26, Y+15	; 0x0f
     842:	b8 89       	ldd	r27, Y+16	; 0x10
     844:	82 8b       	std	Z+18, r24	; 0x12
     846:	93 8b       	std	Z+19, r25	; 0x13
     848:	a4 8b       	std	Z+20, r26	; 0x14
     84a:	b5 8b       	std	Z+21, r27	; 0x15
     84c:	89 89       	ldd	r24, Y+17	; 0x11
     84e:	86 8b       	std	Z+22, r24	; 0x16
     850:	17 8a       	std	Z+23, r1	; 0x17
     852:	8a 89       	ldd	r24, Y+18	; 0x12
     854:	9b 89       	ldd	r25, Y+19	; 0x13
     856:	ac 89       	ldd	r26, Y+20	; 0x14
     858:	bd 89       	ldd	r27, Y+21	; 0x15
     85a:	80 8f       	std	Z+24, r24	; 0x18
     85c:	91 8f       	std	Z+25, r25	; 0x19
     85e:	a2 8f       	std	Z+26, r26	; 0x1a
     860:	b3 8f       	std	Z+27, r27	; 0x1b
     862:	8e 89       	ldd	r24, Y+22	; 0x16
     864:	9f 89       	ldd	r25, Y+23	; 0x17
     866:	a8 8d       	ldd	r26, Y+24	; 0x18
     868:	b9 8d       	ldd	r27, Y+25	; 0x19
     86a:	84 8f       	std	Z+28, r24	; 0x1c
     86c:	95 8f       	std	Z+29, r25	; 0x1d
     86e:	a6 8f       	std	Z+30, r26	; 0x1e
     870:	b7 8f       	std	Z+31, r27	; 0x1f
     872:	8a 8d       	ldd	r24, Y+26	; 0x1a
     874:	9b 8d       	ldd	r25, Y+27	; 0x1b
     876:	ac 8d       	ldd	r26, Y+28	; 0x1c
     878:	bd 8d       	ldd	r27, Y+29	; 0x1d
     87a:	80 a3       	lds	r24, 0x50
     87c:	91 a3       	lds	r25, 0x51
     87e:	a2 a3       	lds	r26, 0x52
     880:	b3 a3       	lds	r27, 0x53
     882:	8e 8d       	ldd	r24, Y+30	; 0x1e
     884:	9f 8d       	ldd	r25, Y+31	; 0x1f
     886:	a8 a1       	lds	r26, 0x48
     888:	b9 a1       	lds	r27, 0x49
     88a:	84 a3       	lds	r24, 0x54
     88c:	95 a3       	lds	r25, 0x55
     88e:	a6 a3       	lds	r26, 0x56
     890:	b7 a3       	lds	r27, 0x57
     892:	0e 94 86 10 	call	0x210c	; 0x210c <printf_P>
				 RItem->Attributes.Logical.Minimum,
				 RItem->Attributes.Logical.Maximum,
				 RItem->Attributes.Physical.Minimum,
				 RItem->Attributes.Physical.Maximum);

		OutputCollectionPath(RItem->CollectionPath);
     896:	4d b7       	in	r20, 0x3d	; 61
     898:	5e b7       	in	r21, 0x3e	; 62
     89a:	48 5d       	subi	r20, 0xD8	; 216
     89c:	5f 4f       	sbci	r21, 0xFF	; 255
     89e:	0f b6       	in	r0, 0x3f	; 63
     8a0:	f8 94       	cli
     8a2:	5e bf       	out	0x3e, r21	; 62
     8a4:	0f be       	out	0x3f, r0	; 63
     8a6:	4d bf       	out	0x3d, r20	; 61
     8a8:	8e 81       	ldd	r24, Y+6	; 0x06
     8aa:	9f 81       	ldd	r25, Y+7	; 0x07
     8ac:	17 df       	rcall	.-466    	; 0x6dc <OutputCollectionPath>
     8ae:	1f 5f       	subi	r17, 0xFF	; 255
 */
void OutputParsedReportItems(void)
{
	printf_P(PSTR("\r\nReport Items (%" PRId8 " in Table):\r\n"), HIDReportInfo.TotalReportItems);

	for (uint8_t ItemIndex = 0; ItemIndex < HIDReportInfo.TotalReportItems; ItemIndex++)
     8b0:	80 91 50 01 	lds	r24, 0x0150
     8b4:	18 17       	cp	r17, r24
     8b6:	08 f4       	brcc	.+2      	; 0x8ba <OutputParsedReportItems+0x154>
     8b8:	7d cf       	rjmp	.-262    	; 0x7b4 <OutputParsedReportItems+0x4e>
     8ba:	df 91       	pop	r29
				 RItem->Attributes.Physical.Minimum,
				 RItem->Attributes.Physical.Maximum);

		OutputCollectionPath(RItem->CollectionPath);
	}
}
     8bc:	cf 91       	pop	r28
     8be:	1f 91       	pop	r17
     8c0:	ff 90       	pop	r15
     8c2:	ef 90       	pop	r14
     8c4:	df 90       	pop	r13
     8c6:	cf 90       	pop	r12
     8c8:	08 95       	ret

000008ca <RetrieveDeviceData>:
     8ca:	80 91 36 05 	lds	r24, 0x0536
/** Task to retrieve the HID device information from an attached device, and output
 *  the relevant data to the serial port for analysis.
 */
void RetrieveDeviceData(void)
{
	if (USB_HostState != HOST_STATE_Configured)
     8ce:	8b 30       	cpi	r24, 0x0B	; 11
     8d0:	49 f4       	brne	.+18     	; 0x8e4 <RetrieveDeviceData+0x1a>
	  return;

	LEDs_SetAllLEDs(LEDMASK_USB_BUSY);
     8d2:	80 ed       	ldi	r24, 0xD0	; 208
     8d4:	4c de       	rcall	.-872    	; 0x56e <LEDs_SetAllLEDs>
     8d6:	50 de       	rcall	.-864    	; 0x578 <OutputReportSizes>

	OutputReportSizes();
     8d8:	46 df       	rcall	.-372    	; 0x766 <OutputParsedReportItems>
     8da:	80 e6       	ldi	r24, 0x60	; 96
	OutputParsedReportItems();
     8dc:	48 de       	rcall	.-880    	; 0x56e <LEDs_SetAllLEDs>
     8de:	80 e0       	ldi	r24, 0x00	; 0

	LEDs_SetAllLEDs(LEDMASK_USB_READY);
     8e0:	0c 94 80 0e 	jmp	0x1d00	; 0x1d00 <USB_Host_SetDeviceConfiguration>
     8e4:	08 95       	ret

000008e6 <SetupHardware>:
	USB_Host_SetDeviceConfiguration(0);
     8e6:	84 b7       	in	r24, 0x34	; 52
     8e8:	87 7f       	andi	r24, 0xF7	; 247
     8ea:	84 bf       	out	0x34, r24	; 52
     8ec:	28 e1       	ldi	r18, 0x18	; 24
/** Configures the board hardware and chip peripherals for the demo's functionality. */
void SetupHardware(void)
{
	/* Disable watchdog if enabled by bootloader/fuses */
	MCUSR &= ~(1 << WDRF);
	wdt_disable();
     8ee:	0f b6       	in	r0, 0x3f	; 63
     8f0:	f8 94       	cli
     8f2:	20 93 60 00 	sts	0x0060, r18
     8f6:	10 92 60 00 	sts	0x0060, r1
     8fa:	0f be       	out	0x3f, r0	; 63
The type of x is clock_div_t.
*/
void clock_prescale_set(clock_div_t __x)
{
    uint8_t __tmp = _BV(CLKPCE);
    __asm__ __volatile__ (
     8fc:	90 e0       	ldi	r25, 0x00	; 0
     8fe:	80 e8       	ldi	r24, 0x80	; 128
     900:	0f b6       	in	r0, 0x3f	; 63
     902:	f8 94       	cli
     904:	80 93 61 00 	sts	0x0061, r24
     908:	90 93 61 00 	sts	0x0061, r25
     90c:	0f be       	out	0x3f, r0	; 63
			 *  \param[in] DoubleSpeed  Enables double speed mode when set, halving the sample time to double the baud rate.
			 */
			static inline void Serial_Init(const uint32_t BaudRate,
			                               const bool DoubleSpeed)
			{
				UBRR1  = (DoubleSpeed ? SERIAL_2X_UBBRVAL(BaudRate) : SERIAL_UBBRVAL(BaudRate));
     90e:	83 e3       	ldi	r24, 0x33	; 51
     910:	90 e0       	ldi	r25, 0x00	; 0
     912:	90 93 cd 00 	sts	0x00CD, r25
     916:	80 93 cc 00 	sts	0x00CC, r24

				UCSR1C = ((1 << UCSZ11) | (1 << UCSZ10));
     91a:	86 e0       	ldi	r24, 0x06	; 6
     91c:	80 93 ca 00 	sts	0x00CA, r24
				UCSR1A = (DoubleSpeed ? (1 << U2X1) : 0);
     920:	10 92 c8 00 	sts	0x00C8, r1
				UCSR1B = ((1 << TXEN1)  | (1 << RXEN1));
     924:	20 93 c9 00 	sts	0x00C9, r18

				DDRD  |= (1 << 3);
     928:	53 9a       	sbi	0x0a, 3	; 10
				PORTD |= (1 << 2);
     92a:	5a 9a       	sbi	0x0b, 2	; 11

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void LEDs_Init(void)
			{
				DDRD  |=  LEDS_ALL_LEDS;
     92c:	8a b1       	in	r24, 0x0a	; 10
     92e:	80 6f       	ori	r24, 0xF0	; 240
     930:	8a b9       	out	0x0a, r24	; 10
				PORTD &= ~LEDS_ALL_LEDS;
     932:	8b b1       	in	r24, 0x0b	; 11
     934:	8f 70       	andi	r24, 0x0F	; 15
     936:	8b b9       	out	0x0b, r24	; 11
	clock_prescale_set(clock_div_1);

	/* Hardware Initialization */
	Serial_Init(9600, false);
	LEDs_Init();
	USB_Init();
     938:	70 d7       	rcall	.+3808   	; 0x181a <USB_Init>
     93a:	80 e0       	ldi	r24, 0x00	; 0

	/* Create a stdio stream for the serial port for stdin and stdout */
	Serial_CreateStream(NULL);
     93c:	90 e0       	ldi	r25, 0x00	; 0
     93e:	0c 94 69 10 	jmp	0x20d2	; 0x20d2 <Serial_CreateStream>

00000942 <main>:
     942:	d1 df       	rcall	.-94     	; 0x8e6 <SetupHardware>
}
     944:	88 e9       	ldi	r24, 0x98	; 152
 */
int main(void)
{
	SetupHardware();

	puts_P(PSTR(ESC_FG_CYAN "HID Device Report Viewer Running.\r\n" ESC_FG_WHITE));
     946:	90 e0       	ldi	r25, 0x00	; 0
     948:	0e 94 a5 10 	call	0x214a	; 0x214a <puts_P>
     94c:	80 e1       	ldi	r24, 0x10	; 16

	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
     94e:	0f de       	rcall	.-994    	; 0x56e <LEDs_SetAllLEDs>
     950:	78 94       	sei
     952:	bb df       	rcall	.-138    	; 0x8ca <RetrieveDeviceData>
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				sei();
     954:	0e 94 a5 0e 	call	0x1d4a	; 0x1d4a <USB_USBTask>
	GlobalInterruptEnable();

	for (;;)
	{
		RetrieveDeviceData();
     958:	fc cf       	rjmp	.-8      	; 0x952 <main+0x10>

0000095a <EVENT_USB_Host_DeviceAttached>:

		HID_Host_USBTask(&Device_HID_Interface);
		USB_USBTask();
     95a:	83 ec       	ldi	r24, 0xC3	; 195
     95c:	93 e0       	ldi	r25, 0x03	; 3
     95e:	0e 94 a5 10 	call	0x214a	; 0x214a <puts_P>
 *  starts the library USB task to begin the enumeration and USB management process.
 */
void EVENT_USB_Host_DeviceAttached(void)
{
	puts_P(PSTR("Device Attached.\r\n"));
	LEDs_SetAllLEDs(LEDMASK_USB_ENUMERATING);
     962:	80 ea       	ldi	r24, 0xA0	; 160
     964:	04 ce       	rjmp	.-1016   	; 0x56e <LEDs_SetAllLEDs>

00000966 <EVENT_USB_Host_DeviceUnattached>:
     966:	86 ed       	ldi	r24, 0xD6	; 214
}
     968:	93 e0       	ldi	r25, 0x03	; 3
/** Event handler for the USB_DeviceUnattached event. This indicates that a device has been removed from the host, and
 *  stops the library USB task management process.
 */
void EVENT_USB_Host_DeviceUnattached(void)
{
	puts_P(PSTR("\r\nDevice Unattached.\r\n"));
     96a:	0e 94 a5 10 	call	0x214a	; 0x214a <puts_P>
	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
     96e:	80 e1       	ldi	r24, 0x10	; 16
     970:	fe cd       	rjmp	.-1028   	; 0x56e <LEDs_SetAllLEDs>

00000972 <EVENT_USB_Host_DeviceEnumerationComplete>:
     972:	cf 93       	push	r28
}
     974:	df 93       	push	r29

/** Event handler for the USB_DeviceEnumerationComplete event. This indicates that a device has been successfully
 *  enumerated by the host and is now ready to be used by the application.
 */
void EVENT_USB_Host_DeviceEnumerationComplete(void)
{
     976:	cd b7       	in	r28, 0x3d	; 61
     978:	de b7       	in	r29, 0x3e	; 62
     97a:	c2 50       	subi	r28, 0x02	; 2
     97c:	d2 40       	sbci	r29, 0x02	; 2
     97e:	0f b6       	in	r0, 0x3f	; 63
     980:	f8 94       	cli
     982:	de bf       	out	0x3e, r29	; 62
     984:	0f be       	out	0x3f, r0	; 63
     986:	cd bf       	out	0x3d, r28	; 61
	LEDs_SetAllLEDs(LEDMASK_USB_ENUMERATING);
     988:	80 ea       	ldi	r24, 0xA0	; 160
     98a:	f1 dd       	rcall	.-1054   	; 0x56e <LEDs_SetAllLEDs>
     98c:	81 e0       	ldi	r24, 0x01	; 1

	uint16_t ConfigDescriptorSize;
	uint8_t  ConfigDescriptorData[512];

	if (USB_Host_GetDeviceConfigDescriptor(1, &ConfigDescriptorSize, ConfigDescriptorData,
     98e:	be 01       	movw	r22, r28
     990:	6f 5f       	subi	r22, 0xFF	; 255
     992:	7f 4f       	sbci	r23, 0xFF	; 255
     994:	ae 01       	movw	r20, r28
     996:	4d 5f       	subi	r20, 0xFD	; 253
     998:	5f 4f       	sbci	r21, 0xFF	; 255
     99a:	20 e0       	ldi	r18, 0x00	; 0
     99c:	32 e0       	ldi	r19, 0x02	; 2
     99e:	eb d7       	rcall	.+4054   	; 0x1976 <USB_Host_GetDeviceConfigDescriptor>
     9a0:	88 23       	and	r24, r24
     9a2:	19 f0       	breq	.+6      	; 0x9aa <EVENT_USB_Host_DeviceEnumerationComplete+0x38>
     9a4:	8d ee       	ldi	r24, 0xED	; 237
     9a6:	93 e0       	ldi	r25, 0x03	; 3
	                                       sizeof(ConfigDescriptorData)) != HOST_GETCONFIG_Successful)
	{
		puts_P(PSTR("Error Retrieving Configuration Descriptor.\r\n"));
     9a8:	15 c0       	rjmp	.+42     	; 0x9d4 <EVENT_USB_Host_DeviceEnumerationComplete+0x62>
     9aa:	69 81       	ldd	r22, Y+1	; 0x01
     9ac:	7a 81       	ldd	r23, Y+2	; 0x02
		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
		return;
	}

	if (HID_Host_ConfigurePipes(&Device_HID_Interface,
     9ae:	8f e0       	ldi	r24, 0x0F	; 15
     9b0:	91 e0       	ldi	r25, 0x01	; 1
     9b2:	ae 01       	movw	r20, r28
     9b4:	4d 5f       	subi	r20, 0xFD	; 253
     9b6:	5f 4f       	sbci	r21, 0xFF	; 255
     9b8:	0e 94 da 0e 	call	0x1db4	; 0x1db4 <HID_Host_ConfigurePipes>
     9bc:	88 23       	and	r24, r24
     9be:	19 f0       	breq	.+6      	; 0x9c6 <EVENT_USB_Host_DeviceEnumerationComplete+0x54>
     9c0:	8a e1       	ldi	r24, 0x1A	; 26
     9c2:	94 e0       	ldi	r25, 0x04	; 4
	                            ConfigDescriptorSize, ConfigDescriptorData) != HID_ENUMERROR_NoError)
	{
		puts_P(PSTR("Attached Device Not a Valid HID Device.\r\n"));
     9c4:	07 c0       	rjmp	.+14     	; 0x9d4 <EVENT_USB_Host_DeviceEnumerationComplete+0x62>
     9c6:	81 e0       	ldi	r24, 0x01	; 1
     9c8:	0e 94 80 0e 	call	0x1d00	; 0x1d00 <USB_Host_SetDeviceConfiguration>
		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
		return;
	}

	if (USB_Host_SetDeviceConfiguration(1) != HOST_SENDCONTROL_Successful)
     9cc:	88 23       	and	r24, r24
     9ce:	31 f0       	breq	.+12     	; 0x9dc <EVENT_USB_Host_DeviceEnumerationComplete+0x6a>
     9d0:	84 e4       	ldi	r24, 0x44	; 68
     9d2:	94 e0       	ldi	r25, 0x04	; 4
	{
		puts_P(PSTR("Error Setting Device Configuration.\r\n"));
     9d4:	0e 94 a5 10 	call	0x214a	; 0x214a <puts_P>
     9d8:	80 e9       	ldi	r24, 0x90	; 144
     9da:	15 c0       	rjmp	.+42     	; 0xa06 <EVENT_USB_Host_DeviceEnumerationComplete+0x94>
		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
     9dc:	8f e0       	ldi	r24, 0x0F	; 15
     9de:	91 e0       	ldi	r25, 0x01	; 1
		return;
	}

	if (HID_Host_SetReportProtocol(&Device_HID_Interface) != 0)
     9e0:	0e 94 a9 0f 	call	0x1f52	; 0x1f52 <HID_Host_SetReportProtocol>
     9e4:	88 23       	and	r24, r24
     9e6:	51 f0       	breq	.+20     	; 0x9fc <EVENT_USB_Host_DeviceEnumerationComplete+0x8a>
     9e8:	8a e6       	ldi	r24, 0x6A	; 106
     9ea:	94 e0       	ldi	r25, 0x04	; 4
	{
		puts_P(PSTR("Error Setting Report Protocol Mode.\r\n"));
     9ec:	0e 94 a5 10 	call	0x214a	; 0x214a <puts_P>
     9f0:	80 e9       	ldi	r24, 0x90	; 144
     9f2:	bd dd       	rcall	.-1158   	; 0x56e <LEDs_SetAllLEDs>
		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
     9f4:	80 e0       	ldi	r24, 0x00	; 0
     9f6:	0e 94 80 0e 	call	0x1d00	; 0x1d00 <USB_Host_SetDeviceConfiguration>
		USB_Host_SetDeviceConfiguration(0);
     9fa:	06 c0       	rjmp	.+12     	; 0xa08 <EVENT_USB_Host_DeviceEnumerationComplete+0x96>
     9fc:	80 e9       	ldi	r24, 0x90	; 144
     9fe:	94 e0       	ldi	r25, 0x04	; 4
		return;
     a00:	0e 94 a5 10 	call	0x214a	; 0x214a <puts_P>
	}

	puts_P(PSTR("HID Device Enumerated.\r\n"));
     a04:	80 e6       	ldi	r24, 0x60	; 96
     a06:	b3 dd       	rcall	.-1178   	; 0x56e <LEDs_SetAllLEDs>
     a08:	ce 5f       	subi	r28, 0xFE	; 254
	LEDs_SetAllLEDs(LEDMASK_USB_READY);
     a0a:	dd 4f       	sbci	r29, 0xFD	; 253
     a0c:	0f b6       	in	r0, 0x3f	; 63
     a0e:	f8 94       	cli
}
     a10:	de bf       	out	0x3e, r29	; 62
     a12:	0f be       	out	0x3f, r0	; 63
     a14:	cd bf       	out	0x3d, r28	; 61
     a16:	df 91       	pop	r29
     a18:	cf 91       	pop	r28
     a1a:	08 95       	ret

00000a1c <EVENT_USB_Host_HostError>:
     a1c:	cf 93       	push	r28
     a1e:	df 93       	push	r29
     a20:	0f 92       	push	r0
     a22:	cd b7       	in	r28, 0x3d	; 61

/** Event handler for the USB_HostError event. This indicates that a hardware error occurred while in host mode. */
void EVENT_USB_Host_HostError(const uint8_t ErrorCode)
{
     a24:	de b7       	in	r29, 0x3e	; 62
	USB_Disable();
     a26:	89 83       	std	Y+1, r24	; 0x01
     a28:	90 d6       	rcall	.+3360   	; 0x174a <USB_Disable>
     a2a:	00 d0       	rcall	.+0      	; 0xa2c <EVENT_USB_Host_HostError+0x10>

	printf_P(PSTR(ESC_FG_RED "Host Mode Error\r\n"
     a2c:	00 d0       	rcall	.+0      	; 0xa2e <EVENT_USB_Host_HostError+0x12>
     a2e:	ed b7       	in	r30, 0x3d	; 61
     a30:	fe b7       	in	r31, 0x3e	; 62
     a32:	31 96       	adiw	r30, 0x01	; 1
     a34:	29 ea       	ldi	r18, 0xA9	; 169
     a36:	34 e0       	ldi	r19, 0x04	; 4
     a38:	ad b7       	in	r26, 0x3d	; 61
     a3a:	be b7       	in	r27, 0x3e	; 62
     a3c:	12 96       	adiw	r26, 0x02	; 2
     a3e:	3c 93       	st	X, r19
     a40:	2e 93       	st	-X, r18
     a42:	11 97       	sbiw	r26, 0x01	; 1
     a44:	89 81       	ldd	r24, Y+1	; 0x01
     a46:	82 83       	std	Z+2, r24	; 0x02
     a48:	13 82       	std	Z+3, r1	; 0x03
     a4a:	0e 94 86 10 	call	0x210c	; 0x210c <printf_P>
     a4e:	0f 90       	pop	r0
	                         " -- Error Code %d\r\n" ESC_FG_WHITE), ErrorCode);

	LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
     a50:	0f 90       	pop	r0
     a52:	0f 90       	pop	r0
     a54:	0f 90       	pop	r0
     a56:	80 e9       	ldi	r24, 0x90	; 144
     a58:	8a dd       	rcall	.-1260   	; 0x56e <LEDs_SetAllLEDs>
     a5a:	ff cf       	rjmp	.-2      	; 0xa5a <EVENT_USB_Host_HostError+0x3e>

00000a5c <EVENT_USB_Host_DeviceEnumerationFailed>:
     a5c:	90 91 36 05 	lds	r25, 0x0536
 *  enumerating an attached USB device.
 */
void EVENT_USB_Host_DeviceEnumerationFailed(const uint8_t ErrorCode,
                                            const uint8_t SubErrorCode)
{
	printf_P(PSTR(ESC_FG_RED "Dev Enum Error\r\n"
     a60:	2d b7       	in	r18, 0x3d	; 61
     a62:	3e b7       	in	r19, 0x3e	; 62
     a64:	28 50       	subi	r18, 0x08	; 8
     a66:	30 40       	sbci	r19, 0x00	; 0
     a68:	0f b6       	in	r0, 0x3f	; 63
     a6a:	f8 94       	cli
     a6c:	3e bf       	out	0x3e, r19	; 62
     a6e:	0f be       	out	0x3f, r0	; 63
     a70:	2d bf       	out	0x3d, r18	; 61
     a72:	ed b7       	in	r30, 0x3d	; 61
     a74:	fe b7       	in	r31, 0x3e	; 62
     a76:	31 96       	adiw	r30, 0x01	; 1
     a78:	28 ed       	ldi	r18, 0xD8	; 216
     a7a:	34 e0       	ldi	r19, 0x04	; 4
     a7c:	ad b7       	in	r26, 0x3d	; 61
     a7e:	be b7       	in	r27, 0x3e	; 62
     a80:	12 96       	adiw	r26, 0x02	; 2
     a82:	3c 93       	st	X, r19
     a84:	2e 93       	st	-X, r18
     a86:	11 97       	sbiw	r26, 0x01	; 1
     a88:	82 83       	std	Z+2, r24	; 0x02
     a8a:	13 82       	std	Z+3, r1	; 0x03
     a8c:	64 83       	std	Z+4, r22	; 0x04
     a8e:	15 82       	std	Z+5, r1	; 0x05
     a90:	96 83       	std	Z+6, r25	; 0x06
     a92:	17 82       	std	Z+7, r1	; 0x07
     a94:	0e 94 86 10 	call	0x210c	; 0x210c <printf_P>
	                         " -- Error Code %d\r\n"
	                         " -- Sub Error Code %d\r\n"
	                         " -- In State %d\r\n" ESC_FG_WHITE), ErrorCode, SubErrorCode, USB_HostState);

	LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
     a98:	2d b7       	in	r18, 0x3d	; 61
     a9a:	3e b7       	in	r19, 0x3e	; 62
     a9c:	28 5f       	subi	r18, 0xF8	; 248
     a9e:	3f 4f       	sbci	r19, 0xFF	; 255
     aa0:	0f b6       	in	r0, 0x3f	; 63
     aa2:	f8 94       	cli
     aa4:	3e bf       	out	0x3e, r19	; 62
     aa6:	0f be       	out	0x3f, r0	; 63
     aa8:	2d bf       	out	0x3d, r18	; 61
     aaa:	80 e9       	ldi	r24, 0x90	; 144
     aac:	60 cd       	rjmp	.-1344   	; 0x56e <LEDs_SetAllLEDs>

00000aae <CALLBACK_HIDParser_FilterHIDReportItem>:
     aae:	81 e0       	ldi	r24, 0x01	; 1
}
     ab0:	08 95       	ret

00000ab2 <USB_ProcessHIDReport>:
#include "HIDParser.h"

uint8_t USB_ProcessHIDReport(const uint8_t* ReportData,
                             uint16_t ReportSize,
                             HID_ReportInfo_t* const ParserData)
{
     ab2:	2f 92       	push	r2
     ab4:	3f 92       	push	r3
     ab6:	4f 92       	push	r4
     ab8:	5f 92       	push	r5
     aba:	6f 92       	push	r6
     abc:	7f 92       	push	r7
     abe:	8f 92       	push	r8
     ac0:	9f 92       	push	r9
     ac2:	af 92       	push	r10
     ac4:	bf 92       	push	r11
     ac6:	cf 92       	push	r12
     ac8:	df 92       	push	r13
     aca:	ef 92       	push	r14
     acc:	ff 92       	push	r15
     ace:	0f 93       	push	r16
     ad0:	1f 93       	push	r17
     ad2:	cf 93       	push	r28
     ad4:	df 93       	push	r29
     ad6:	cd b7       	in	r28, 0x3d	; 61
     ad8:	de b7       	in	r29, 0x3e	; 62
     ada:	cf 58       	subi	r28, 0x8F	; 143
     adc:	d0 40       	sbci	r29, 0x00	; 0
     ade:	0f b6       	in	r0, 0x3f	; 63
     ae0:	f8 94       	cli
     ae2:	de bf       	out	0x3e, r29	; 62
     ae4:	0f be       	out	0x3f, r0	; 63
     ae6:	cd bf       	out	0x3d, r28	; 61
     ae8:	5c 01       	movw	r10, r24
     aea:	e7 96       	adiw	r28, 0x37	; 55
     aec:	7f af       	sts	0x7f, r23
     aee:	6e af       	sts	0x7e, r22
     af0:	e7 97       	sbiw	r28, 0x37	; 55
     af2:	ba 01       	movw	r22, r20
	HID_StateTable_t      StateTable[HID_STATETABLE_STACK_DEPTH];
	HID_StateTable_t*     CurrStateTable          = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath      = NULL;
	HID_ReportSizeInfo_t* CurrReportIDInfo        = &ParserData->ReportIDSizes[0];
     af4:	40 57       	subi	r20, 0x70	; 112
     af6:	5c 4f       	sbci	r21, 0xFC	; 252
	uint16_t              UsageList[HID_USAGE_STACK_DEPTH];
	uint8_t               UsageListSize           = 0;
	HID_MinMax_t          UsageMinMax             = {0, 0};

	memset(ParserData,       0x00, sizeof(HID_ReportInfo_t));
     af8:	89 ed       	ldi	r24, 0xD9	; 217
     afa:	93 e0       	ldi	r25, 0x03	; 3
     afc:	db 01       	movw	r26, r22
     afe:	fc 01       	movw	r30, r24
     b00:	1d 92       	st	X+, r1
     b02:	31 97       	sbiw	r30, 0x01	; 1
     b04:	e9 f7       	brne	.-6      	; 0xb00 <USB_ProcessHIDReport+0x4e>
uint8_t USB_ProcessHIDReport(const uint8_t* ReportData,
                             uint16_t ReportSize,
                             HID_ReportInfo_t* const ParserData)
{
	HID_StateTable_t      StateTable[HID_STATETABLE_STACK_DEPTH];
	HID_StateTable_t*     CurrStateTable          = &StateTable[0];
     b06:	de 01       	movw	r26, r28
     b08:	db 96       	adiw	r26, 0x3b	; 59
	uint16_t              UsageList[HID_USAGE_STACK_DEPTH];
	uint8_t               UsageListSize           = 0;
	HID_MinMax_t          UsageMinMax             = {0, 0};

	memset(ParserData,       0x00, sizeof(HID_ReportInfo_t));
	memset(CurrStateTable,   0x00, sizeof(HID_StateTable_t));
     b0a:	8c e1       	ldi	r24, 0x1C	; 28
     b0c:	fd 01       	movw	r30, r26
     b0e:	11 92       	st	Z+, r1
     b10:	8a 95       	dec	r24
     b12:	e9 f7       	brne	.-6      	; 0xb0e <USB_ProcessHIDReport+0x5c>
	memset(CurrReportIDInfo, 0x00, sizeof(HID_ReportSizeInfo_t));
     b14:	87 e0       	ldi	r24, 0x07	; 7
     b16:	fa 01       	movw	r30, r20
     b18:	11 92       	st	Z+, r1
     b1a:	8a 95       	dec	r24
     b1c:	e9 f7       	brne	.-6      	; 0xb18 <USB_ProcessHIDReport+0x66>

	ParserData->TotalDeviceReports = 1;
     b1e:	fb 01       	movw	r30, r22
     b20:	e1 57       	subi	r30, 0x71	; 113
     b22:	fc 4f       	sbci	r31, 0xFC	; 252
     b24:	81 e0       	ldi	r24, 0x01	; 1
     b26:	80 83       	st	Z, r24
	HID_StateTable_t*     CurrStateTable          = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath      = NULL;
	HID_ReportSizeInfo_t* CurrReportIDInfo        = &ParserData->ReportIDSizes[0];
	uint16_t              UsageList[HID_USAGE_STACK_DEPTH];
	uint8_t               UsageListSize           = 0;
	HID_MinMax_t          UsageMinMax             = {0, 0};
     b28:	eb 96       	adiw	r28, 0x3b	; 59
     b2a:	1c ae       	sts	0xbc, r17
     b2c:	1d ae       	sts	0xbd, r17
     b2e:	1e ae       	sts	0xbe, r17
     b30:	1f ae       	sts	0xbf, r17
     b32:	eb 97       	sbiw	r28, 0x3b	; 59
     b34:	44 24       	eor	r4, r4
     b36:	55 24       	eor	r5, r5
     b38:	32 01       	movw	r6, r4
	HID_StateTable_t      StateTable[HID_STATETABLE_STACK_DEPTH];
	HID_StateTable_t*     CurrStateTable          = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath      = NULL;
	HID_ReportSizeInfo_t* CurrReportIDInfo        = &ParserData->ReportIDSizes[0];
	uint16_t              UsageList[HID_USAGE_STACK_DEPTH];
	uint8_t               UsageListSize           = 0;
     b3a:	30 e0       	ldi	r19, 0x00	; 0
                             uint16_t ReportSize,
                             HID_ReportInfo_t* const ParserData)
{
	HID_StateTable_t      StateTable[HID_STATETABLE_STACK_DEPTH];
	HID_StateTable_t*     CurrStateTable          = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath      = NULL;
     b3c:	88 24       	eor	r8, r8
     b3e:	99 24       	eor	r9, r9
uint8_t USB_ProcessHIDReport(const uint8_t* ReportData,
                             uint16_t ReportSize,
                             HID_ReportInfo_t* const ParserData)
{
	HID_StateTable_t      StateTable[HID_STATETABLE_STACK_DEPTH];
	HID_StateTable_t*     CurrStateTable          = &StateTable[0];
     b40:	8d 01       	movw	r16, r26

					NewReportItem.BitOffset = CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType];

					CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType] += CurrStateTable->Attributes.BitSize;

					ParserData->LargestReportSizeBits = MAX(ParserData->LargestReportSizeBits, CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType]);
     b42:	cb 01       	movw	r24, r22
     b44:	8a 52       	subi	r24, 0x2A	; 42
     b46:	9c 4f       	sbci	r25, 0xFC	; 252
     b48:	cf 57       	subi	r28, 0x7F	; 127
     b4a:	df 4f       	sbci	r29, 0xFF	; 255
     b4c:	99 83       	std	Y+1, r25	; 0x01
     b4e:	88 83       	st	Y, r24
     b50:	c1 58       	subi	r28, 0x81	; 129
     b52:	d0 40       	sbci	r29, 0x00	; 0
				       sizeof(HID_ReportItem_t));

				CurrStateTable++;
				break;
			case HID_RI_POP(0):
				if (CurrStateTable == &StateTable[0])
     b54:	e5 96       	adiw	r28, 0x35	; 53
     b56:	bf af       	sts	0x7f, r27
     b58:	ae af       	sts	0x7e, r26
     b5a:	e5 97       	sbiw	r28, 0x35	; 53

					CurrCollectionPath = &ParserData->CollectionPaths[1];

					while (CurrCollectionPath->Parent != NULL)
					{
						if (CurrCollectionPath == &ParserData->CollectionPaths[HID_MAX_COLLECTIONS - 1])
     b5c:	db 01       	movw	r26, r22
     b5e:	a8 57       	subi	r26, 0x78	; 120
     b60:	bc 4f       	sbci	r27, 0xFC	; 252
     b62:	c9 57       	subi	r28, 0x79	; 121
     b64:	df 4f       	sbci	r29, 0xFF	; 255
     b66:	b9 83       	std	Y+1, r27	; 0x01
     b68:	a8 83       	st	Y, r26
     b6a:	c7 58       	subi	r28, 0x87	; 135
     b6c:	d0 40       	sbci	r29, 0x00	; 0
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
		{
			case HID_RI_PUSH(0):
				if (CurrStateTable == &StateTable[HID_STATETABLE_STACK_DEPTH - 1])
     b6e:	f8 01       	movw	r30, r16
     b70:	7c 96       	adiw	r30, 0x1c	; 28
     b72:	c7 57       	subi	r28, 0x77	; 119
     b74:	df 4f       	sbci	r29, 0xFF	; 255
     b76:	f9 83       	std	Y+1, r31	; 0x01
     b78:	e8 83       	st	Y, r30
     b7a:	c9 58       	subi	r28, 0x89	; 137
     b7c:	d0 40       	sbci	r29, 0x00	; 0
     b7e:	cb 01       	movw	r24, r22
     b80:	b5 01       	movw	r22, r10
     b82:	5c 01       	movw	r10, r24
	memset(CurrStateTable,   0x00, sizeof(HID_StateTable_t));
	memset(CurrReportIDInfo, 0x00, sizeof(HID_ReportSizeInfo_t));

	ParserData->TotalDeviceReports = 1;

	while (ReportSize)
     b84:	18 c3       	rjmp	.+1584   	; 0x11b6 <USB_ProcessHIDReport+0x704>
	{
		uint8_t  HIDReportItem  = *ReportData;
     b86:	db 01       	movw	r26, r22
     b88:	2c 91       	ld	r18, X
		uint32_t ReportItemData;

		ReportData++;
		ReportSize--;
     b8a:	e7 96       	adiw	r28, 0x37	; 55
     b8c:	ee ad       	sts	0x6e, r30
     b8e:	ff ad       	sts	0x6f, r31
     b90:	e7 97       	sbiw	r28, 0x37	; 55
     b92:	31 97       	sbiw	r30, 0x01	; 1
     b94:	e7 96       	adiw	r28, 0x37	; 55
     b96:	ff af       	sts	0x7f, r31
     b98:	ee af       	sts	0x7e, r30
     b9a:	e7 97       	sbiw	r28, 0x37	; 55

		switch (HIDReportItem & HID_RI_DATA_SIZE_MASK)
     b9c:	82 2f       	mov	r24, r18
     b9e:	90 e0       	ldi	r25, 0x00	; 0
     ba0:	ed 96       	adiw	r28, 0x3d	; 61
     ba2:	9f af       	sts	0x7f, r25
     ba4:	8e af       	sts	0x7e, r24
     ba6:	ed 97       	sbiw	r28, 0x3d	; 61
     ba8:	83 70       	andi	r24, 0x03	; 3
     baa:	90 70       	andi	r25, 0x00	; 0
     bac:	82 30       	cpi	r24, 0x02	; 2
     bae:	91 05       	cpc	r25, r1
     bb0:	09 f4       	brne	.+2      	; 0xbb4 <USB_ProcessHIDReport+0x102>
     bb2:	49 c0       	rjmp	.+146    	; 0xc46 <USB_ProcessHIDReport+0x194>
     bb4:	83 30       	cpi	r24, 0x03	; 3
     bb6:	91 05       	cpc	r25, r1
     bb8:	51 f0       	breq	.+20     	; 0xbce <USB_ProcessHIDReport+0x11c>
     bba:	81 30       	cpi	r24, 0x01	; 1
     bbc:	91 05       	cpc	r25, r1
     bbe:	09 f4       	brne	.+2      	; 0xbc2 <USB_ProcessHIDReport+0x110>
     bc0:	69 c0       	rjmp	.+210    	; 0xc94 <USB_ProcessHIDReport+0x1e2>
	while (ReportSize)
	{
		uint8_t  HIDReportItem  = *ReportData;
		uint32_t ReportItemData;

		ReportData++;
     bc2:	6f 5f       	subi	r22, 0xFF	; 255
     bc4:	7f 4f       	sbci	r23, 0xFF	; 255
				ReportSize     -= 1;
				ReportData     += 1;
				break;

			default:
				ReportItemData  = 0;
     bc6:	cc 24       	eor	r12, r12
     bc8:	dd 24       	eor	r13, r13
     bca:	76 01       	movw	r14, r12
     bcc:	75 c0       	rjmp	.+234    	; 0xcb8 <USB_ProcessHIDReport+0x206>
		ReportSize--;

		switch (HIDReportItem & HID_RI_DATA_SIZE_MASK)
		{
			case HID_RI_DATA_BITS_32:
				ReportItemData  = (((uint32_t)ReportData[3] << 24) | ((uint32_t)ReportData[2] << 16) |
     bce:	db 01       	movw	r26, r22
     bd0:	14 96       	adiw	r26, 0x04	; 4
     bd2:	8c 91       	ld	r24, X
     bd4:	90 e0       	ldi	r25, 0x00	; 0
     bd6:	a0 e0       	ldi	r26, 0x00	; 0
     bd8:	b0 e0       	ldi	r27, 0x00	; 0
     bda:	f8 2e       	mov	r15, r24
     bdc:	ee 24       	eor	r14, r14
     bde:	dd 24       	eor	r13, r13
     be0:	cc 24       	eor	r12, r12
     be2:	fb 01       	movw	r30, r22
     be4:	83 81       	ldd	r24, Z+3	; 0x03
     be6:	90 e0       	ldi	r25, 0x00	; 0
     be8:	a0 e0       	ldi	r26, 0x00	; 0
     bea:	b0 e0       	ldi	r27, 0x00	; 0
     bec:	dc 01       	movw	r26, r24
     bee:	99 27       	eor	r25, r25
     bf0:	88 27       	eor	r24, r24
     bf2:	c8 2a       	or	r12, r24
     bf4:	d9 2a       	or	r13, r25
     bf6:	ea 2a       	or	r14, r26
     bf8:	fb 2a       	or	r15, r27
			                       ((uint16_t)ReportData[1] << 8)  | ReportData[0]);
     bfa:	81 81       	ldd	r24, Z+1	; 0x01
     bfc:	90 e0       	ldi	r25, 0x00	; 0
     bfe:	a0 e0       	ldi	r26, 0x00	; 0
     c00:	b0 e0       	ldi	r27, 0x00	; 0
		ReportSize--;

		switch (HIDReportItem & HID_RI_DATA_SIZE_MASK)
		{
			case HID_RI_DATA_BITS_32:
				ReportItemData  = (((uint32_t)ReportData[3] << 24) | ((uint32_t)ReportData[2] << 16) |
     c02:	c8 2a       	or	r12, r24
     c04:	d9 2a       	or	r13, r25
     c06:	ea 2a       	or	r14, r26
     c08:	fb 2a       	or	r15, r27
			                       ((uint16_t)ReportData[1] << 8)  | ReportData[0]);
     c0a:	f2 81       	ldd	r31, Z+2	; 0x02
     c0c:	ef 96       	adiw	r28, 0x3f	; 63
     c0e:	ff af       	sts	0x7f, r31
     c10:	ef 97       	sbiw	r28, 0x3f	; 63
     c12:	ee 96       	adiw	r28, 0x3e	; 62
     c14:	1f ae       	sts	0xbf, r17
     c16:	ee 97       	sbiw	r28, 0x3e	; 62
		ReportSize--;

		switch (HIDReportItem & HID_RI_DATA_SIZE_MASK)
		{
			case HID_RI_DATA_BITS_32:
				ReportItemData  = (((uint32_t)ReportData[3] << 24) | ((uint32_t)ReportData[2] << 16) |
     c18:	ef 96       	adiw	r28, 0x3f	; 63
     c1a:	ee ad       	sts	0x6e, r30
     c1c:	ff ad       	sts	0x6f, r31
     c1e:	ef 97       	sbiw	r28, 0x3f	; 63
     c20:	cf 01       	movw	r24, r30
     c22:	a0 e0       	ldi	r26, 0x00	; 0
     c24:	b0 e0       	ldi	r27, 0x00	; 0
     c26:	c8 2a       	or	r12, r24
     c28:	d9 2a       	or	r13, r25
     c2a:	ea 2a       	or	r14, r26
     c2c:	fb 2a       	or	r15, r27
			                       ((uint16_t)ReportData[1] << 8)  | ReportData[0]);
				ReportSize     -= 4;
     c2e:	e7 96       	adiw	r28, 0x37	; 55
     c30:	8e ad       	sts	0x6e, r24
     c32:	9f ad       	sts	0x6f, r25
     c34:	e7 97       	sbiw	r28, 0x37	; 55
     c36:	04 97       	sbiw	r24, 0x04	; 4
     c38:	e7 96       	adiw	r28, 0x37	; 55
     c3a:	9f af       	sts	0x7f, r25
     c3c:	8e af       	sts	0x7e, r24
     c3e:	e7 97       	sbiw	r28, 0x37	; 55
				ReportData     += 4;
     c40:	6b 5f       	subi	r22, 0xFB	; 251
     c42:	7f 4f       	sbci	r23, 0xFF	; 255
				break;
     c44:	39 c0       	rjmp	.+114    	; 0xcb8 <USB_ProcessHIDReport+0x206>

			case HID_RI_DATA_BITS_16:
				ReportItemData  = (((uint16_t)ReportData[1] << 8) | (ReportData[0]));
     c46:	db 01       	movw	r26, r22
     c48:	12 96       	adiw	r26, 0x02	; 2
     c4a:	bc 91       	ld	r27, X
     c4c:	c0 58       	subi	r28, 0x80	; 128
     c4e:	df 4f       	sbci	r29, 0xFF	; 255
     c50:	b8 83       	st	Y, r27
     c52:	c0 58       	subi	r28, 0x80	; 128
     c54:	d0 40       	sbci	r29, 0x00	; 0
     c56:	c1 58       	subi	r28, 0x81	; 129
     c58:	df 4f       	sbci	r29, 0xFF	; 255
     c5a:	18 82       	st	Y, r1
     c5c:	cf 57       	subi	r28, 0x7F	; 127
     c5e:	d0 40       	sbci	r29, 0x00	; 0
     c60:	fb 01       	movw	r30, r22
     c62:	81 81       	ldd	r24, Z+1	; 0x01
     c64:	90 e0       	ldi	r25, 0x00	; 0
     c66:	c1 58       	subi	r28, 0x81	; 129
     c68:	df 4f       	sbci	r29, 0xFF	; 255
     c6a:	a8 81       	ld	r26, Y
     c6c:	b9 81       	ldd	r27, Y+1	; 0x01
     c6e:	cf 57       	subi	r28, 0x7F	; 127
     c70:	d0 40       	sbci	r29, 0x00	; 0
     c72:	8a 2b       	or	r24, r26
     c74:	9b 2b       	or	r25, r27
     c76:	6c 01       	movw	r12, r24
     c78:	ee 24       	eor	r14, r14
     c7a:	ff 24       	eor	r15, r15
				ReportSize     -= 2;
     c7c:	e7 96       	adiw	r28, 0x37	; 55
     c7e:	ee ad       	sts	0x6e, r30
     c80:	ff ad       	sts	0x6f, r31
     c82:	e7 97       	sbiw	r28, 0x37	; 55
     c84:	32 97       	sbiw	r30, 0x02	; 2
     c86:	e7 96       	adiw	r28, 0x37	; 55
     c88:	ff af       	sts	0x7f, r31
     c8a:	ee af       	sts	0x7e, r30
     c8c:	e7 97       	sbiw	r28, 0x37	; 55
				ReportData     += 2;
     c8e:	6d 5f       	subi	r22, 0xFD	; 253
     c90:	7f 4f       	sbci	r23, 0xFF	; 255
				break;
     c92:	12 c0       	rjmp	.+36     	; 0xcb8 <USB_ProcessHIDReport+0x206>

			case HID_RI_DATA_BITS_8:
				ReportItemData  = ReportData[0];
     c94:	db 01       	movw	r26, r22
     c96:	11 96       	adiw	r26, 0x01	; 1
     c98:	cc 90       	ld	r12, X
     c9a:	11 97       	sbiw	r26, 0x01	; 1
     c9c:	dd 24       	eor	r13, r13
     c9e:	ee 24       	eor	r14, r14
     ca0:	ff 24       	eor	r15, r15
				ReportSize     -= 1;
     ca2:	e7 96       	adiw	r28, 0x37	; 55
     ca4:	ee ad       	sts	0x6e, r30
     ca6:	ff ad       	sts	0x6f, r31
     ca8:	e7 97       	sbiw	r28, 0x37	; 55
     caa:	31 97       	sbiw	r30, 0x01	; 1
     cac:	e7 96       	adiw	r28, 0x37	; 55
     cae:	ff af       	sts	0x7f, r31
     cb0:	ee af       	sts	0x7e, r30
     cb2:	e7 97       	sbiw	r28, 0x37	; 55
				ReportData     += 1;
     cb4:	6e 5f       	subi	r22, 0xFE	; 254
     cb6:	7f 4f       	sbci	r23, 0xFF	; 255
			default:
				ReportItemData  = 0;
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
     cb8:	ed 96       	adiw	r28, 0x3d	; 61
     cba:	8e ad       	sts	0x6e, r24
     cbc:	9f ad       	sts	0x6f, r25
     cbe:	ed 97       	sbiw	r28, 0x3d	; 61
     cc0:	8c 7f       	andi	r24, 0xFC	; 252
     cc2:	90 70       	andi	r25, 0x00	; 0
     cc4:	84 36       	cpi	r24, 0x64	; 100
     cc6:	91 05       	cpc	r25, r1
     cc8:	09 f4       	brne	.+2      	; 0xccc <USB_ProcessHIDReport+0x21a>
     cca:	b0 c0       	rjmp	.+352    	; 0xe2c <USB_ProcessHIDReport+0x37a>
     ccc:	85 36       	cpi	r24, 0x65	; 101
     cce:	91 05       	cpc	r25, r1
     cd0:	8c f5       	brge	.+98     	; 0xd34 <USB_ProcessHIDReport+0x282>
     cd2:	84 32       	cpi	r24, 0x24	; 36
     cd4:	91 05       	cpc	r25, r1
     cd6:	09 f4       	brne	.+2      	; 0xcda <USB_ProcessHIDReport+0x228>
     cd8:	90 c0       	rjmp	.+288    	; 0xdfa <USB_ProcessHIDReport+0x348>
     cda:	85 32       	cpi	r24, 0x25	; 37
     cdc:	91 05       	cpc	r25, r1
     cde:	ac f4       	brge	.+42     	; 0xd0a <USB_ProcessHIDReport+0x258>
     ce0:	88 30       	cpi	r24, 0x08	; 8
     ce2:	91 05       	cpc	r25, r1
     ce4:	09 f4       	brne	.+2      	; 0xce8 <USB_ProcessHIDReport+0x236>
     ce6:	fb c0       	rjmp	.+502    	; 0xede <USB_ProcessHIDReport+0x42c>
     ce8:	89 30       	cpi	r24, 0x09	; 9
     cea:	91 05       	cpc	r25, r1
     cec:	2c f4       	brge	.+10     	; 0xcf8 <USB_ProcessHIDReport+0x246>
     cee:	84 30       	cpi	r24, 0x04	; 4
     cf0:	91 05       	cpc	r25, r1
     cf2:	09 f0       	breq	.+2      	; 0xcf6 <USB_ProcessHIDReport+0x244>
     cf4:	4e c2       	rjmp	.+1180   	; 0x1192 <USB_ProcessHIDReport+0x6e0>
     cf6:	75 c0       	rjmp	.+234    	; 0xde2 <USB_ProcessHIDReport+0x330>
     cf8:	84 31       	cpi	r24, 0x14	; 20
     cfa:	91 05       	cpc	r25, r1
     cfc:	09 f4       	brne	.+2      	; 0xd00 <USB_ProcessHIDReport+0x24e>
     cfe:	75 c0       	rjmp	.+234    	; 0xdea <USB_ProcessHIDReport+0x338>
     d00:	88 31       	cpi	r24, 0x18	; 24
     d02:	91 05       	cpc	r25, r1
     d04:	09 f0       	breq	.+2      	; 0xd08 <USB_ProcessHIDReport+0x256>
     d06:	45 c2       	rjmp	.+1162   	; 0x1192 <USB_ProcessHIDReport+0x6e0>
     d08:	42 c2       	rjmp	.+1156   	; 0x118e <USB_ProcessHIDReport+0x6dc>
     d0a:	84 33       	cpi	r24, 0x34	; 52
     d0c:	91 05       	cpc	r25, r1
     d0e:	09 f4       	brne	.+2      	; 0xd12 <USB_ProcessHIDReport+0x260>
     d10:	7a c0       	rjmp	.+244    	; 0xe06 <USB_ProcessHIDReport+0x354>
     d12:	85 33       	cpi	r24, 0x35	; 53
     d14:	91 05       	cpc	r25, r1
     d16:	2c f4       	brge	.+10     	; 0xd22 <USB_ProcessHIDReport+0x270>
     d18:	88 32       	cpi	r24, 0x28	; 40
     d1a:	91 05       	cpc	r25, r1
     d1c:	09 f0       	breq	.+2      	; 0xd20 <USB_ProcessHIDReport+0x26e>
     d1e:	39 c2       	rjmp	.+1138   	; 0x1192 <USB_ProcessHIDReport+0x6e0>
     d20:	ef c0       	rjmp	.+478    	; 0xf00 <USB_ProcessHIDReport+0x44e>
     d22:	84 34       	cpi	r24, 0x44	; 68
     d24:	91 05       	cpc	r25, r1
     d26:	09 f4       	brne	.+2      	; 0xd2a <USB_ProcessHIDReport+0x278>
     d28:	76 c0       	rjmp	.+236    	; 0xe16 <USB_ProcessHIDReport+0x364>
     d2a:	84 35       	cpi	r24, 0x54	; 84
     d2c:	91 05       	cpc	r25, r1
     d2e:	09 f0       	breq	.+2      	; 0xd32 <USB_ProcessHIDReport+0x280>
     d30:	30 c2       	rjmp	.+1120   	; 0x1192 <USB_ProcessHIDReport+0x6e0>
     d32:	77 c0       	rjmp	.+238    	; 0xe22 <USB_ProcessHIDReport+0x370>
     d34:	84 39       	cpi	r24, 0x94	; 148
     d36:	91 05       	cpc	r25, r1
     d38:	09 f4       	brne	.+2      	; 0xd3c <USB_ProcessHIDReport+0x28a>
     d3a:	81 c0       	rjmp	.+258    	; 0xe3e <USB_ProcessHIDReport+0x38c>
     d3c:	85 39       	cpi	r24, 0x95	; 149
     d3e:	91 05       	cpc	r25, r1
     d40:	ac f4       	brge	.+42     	; 0xd6c <USB_ProcessHIDReport+0x2ba>
     d42:	80 38       	cpi	r24, 0x80	; 128
     d44:	91 05       	cpc	r25, r1
     d46:	09 f4       	brne	.+2      	; 0xd4a <USB_ProcessHIDReport+0x298>
     d48:	f8 c1       	rjmp	.+1008   	; 0x113a <USB_ProcessHIDReport+0x688>
     d4a:	81 38       	cpi	r24, 0x81	; 129
     d4c:	91 05       	cpc	r25, r1
     d4e:	2c f4       	brge	.+10     	; 0xd5a <USB_ProcessHIDReport+0x2a8>
     d50:	84 37       	cpi	r24, 0x74	; 116
     d52:	91 05       	cpc	r25, r1
     d54:	09 f0       	breq	.+2      	; 0xd58 <USB_ProcessHIDReport+0x2a6>
     d56:	1d c2       	rjmp	.+1082   	; 0x1192 <USB_ProcessHIDReport+0x6e0>
     d58:	6f c0       	rjmp	.+222    	; 0xe38 <USB_ProcessHIDReport+0x386>
     d5a:	84 38       	cpi	r24, 0x84	; 132
     d5c:	91 05       	cpc	r25, r1
     d5e:	09 f4       	brne	.+2      	; 0xd62 <USB_ProcessHIDReport+0x2b0>
     d60:	71 c0       	rjmp	.+226    	; 0xe44 <USB_ProcessHIDReport+0x392>
     d62:	80 39       	cpi	r24, 0x90	; 144
     d64:	91 05       	cpc	r25, r1
     d66:	09 f0       	breq	.+2      	; 0xd6a <USB_ProcessHIDReport+0x2b8>
     d68:	14 c2       	rjmp	.+1064   	; 0x1192 <USB_ProcessHIDReport+0x6e0>
     d6a:	e7 c1       	rjmp	.+974    	; 0x113a <USB_ProcessHIDReport+0x688>
     d6c:	80 3b       	cpi	r24, 0xB0	; 176
     d6e:	91 05       	cpc	r25, r1
     d70:	09 f4       	brne	.+2      	; 0xd74 <USB_ProcessHIDReport+0x2c2>
     d72:	e3 c1       	rjmp	.+966    	; 0x113a <USB_ProcessHIDReport+0x688>
     d74:	81 3b       	cpi	r24, 0xB1	; 177
     d76:	91 05       	cpc	r25, r1
     d78:	4c f4       	brge	.+18     	; 0xd8c <USB_ProcessHIDReport+0x2da>
     d7a:	80 3a       	cpi	r24, 0xA0	; 160
     d7c:	91 05       	cpc	r25, r1
     d7e:	09 f4       	brne	.+2      	; 0xd82 <USB_ProcessHIDReport+0x2d0>
     d80:	c6 c0       	rjmp	.+396    	; 0xf0e <USB_ProcessHIDReport+0x45c>
     d82:	84 3a       	cpi	r24, 0xA4	; 164
     d84:	91 05       	cpc	r25, r1
     d86:	09 f0       	breq	.+2      	; 0xd8a <USB_ProcessHIDReport+0x2d8>
     d88:	04 c2       	rjmp	.+1032   	; 0x1192 <USB_ProcessHIDReport+0x6e0>
     d8a:	08 c0       	rjmp	.+16     	; 0xd9c <USB_ProcessHIDReport+0x2ea>
     d8c:	84 3b       	cpi	r24, 0xB4	; 180
     d8e:	91 05       	cpc	r25, r1
     d90:	e9 f0       	breq	.+58     	; 0xdcc <USB_ProcessHIDReport+0x31a>
     d92:	80 3c       	cpi	r24, 0xC0	; 192
     d94:	91 05       	cpc	r25, r1
     d96:	09 f0       	breq	.+2      	; 0xd9a <USB_ProcessHIDReport+0x2e8>
     d98:	fc c1       	rjmp	.+1016   	; 0x1192 <USB_ProcessHIDReport+0x6e0>
     d9a:	08 c1       	rjmp	.+528    	; 0xfac <USB_ProcessHIDReport+0x4fa>
		{
			case HID_RI_PUSH(0):
				if (CurrStateTable == &StateTable[HID_STATETABLE_STACK_DEPTH - 1])
     d9c:	c7 57       	subi	r28, 0x77	; 119
     d9e:	df 4f       	sbci	r29, 0xFF	; 255
     da0:	88 81       	ld	r24, Y
     da2:	99 81       	ldd	r25, Y+1	; 0x01
     da4:	c9 58       	subi	r28, 0x89	; 137
     da6:	d0 40       	sbci	r29, 0x00	; 0
     da8:	08 17       	cp	r16, r24
     daa:	19 07       	cpc	r17, r25
     dac:	09 f4       	brne	.+2      	; 0xdb0 <USB_ProcessHIDReport+0x2fe>
     dae:	10 c2       	rjmp	.+1056   	; 0x11d0 <USB_ProcessHIDReport+0x71e>
				  return HID_PARSE_HIDStackOverflow;

				memcpy((CurrStateTable + 1),
     db0:	ec e1       	ldi	r30, 0x1C	; 28
     db2:	ce 2e       	mov	r12, r30
     db4:	d1 2c       	mov	r13, r1
     db6:	c0 0e       	add	r12, r16
     db8:	d1 1e       	adc	r13, r17
     dba:	d6 01       	movw	r26, r12
     dbc:	f8 01       	movw	r30, r16
     dbe:	8a e2       	ldi	r24, 0x2A	; 42
     dc0:	01 90       	ld	r0, Z+
     dc2:	0d 92       	st	X+, r0
     dc4:	81 50       	subi	r24, 0x01	; 1
     dc6:	e1 f7       	brne	.-8      	; 0xdc0 <USB_ProcessHIDReport+0x30e>
				       CurrStateTable,
				       sizeof(HID_ReportItem_t));

				CurrStateTable++;
     dc8:	86 01       	movw	r16, r12
				break;
     dca:	e3 c1       	rjmp	.+966    	; 0x1192 <USB_ProcessHIDReport+0x6e0>
			case HID_RI_POP(0):
				if (CurrStateTable == &StateTable[0])
     dcc:	e5 96       	adiw	r28, 0x35	; 53
     dce:	ae ad       	sts	0x6e, r26
     dd0:	bf ad       	sts	0x6f, r27
     dd2:	e5 97       	sbiw	r28, 0x35	; 53
     dd4:	0a 17       	cp	r16, r26
     dd6:	1b 07       	cpc	r17, r27
     dd8:	09 f4       	brne	.+2      	; 0xddc <USB_ProcessHIDReport+0x32a>
     dda:	fc c1       	rjmp	.+1016   	; 0x11d4 <USB_ProcessHIDReport+0x722>
				  return HID_PARSE_HIDStackUnderflow;

				CurrStateTable--;
     ddc:	0c 51       	subi	r16, 0x1C	; 28
     dde:	10 40       	sbci	r17, 0x00	; 0
				break;
     de0:	d8 c1       	rjmp	.+944    	; 0x1192 <USB_ProcessHIDReport+0x6e0>
			case HID_RI_USAGE_PAGE(0):
				if ((HIDReportItem & HID_RI_DATA_SIZE_MASK) == HID_RI_DATA_BITS_32)
				  CurrStateTable->Attributes.Usage.Page = (ReportItemData >> 16);

				CurrStateTable->Attributes.Usage.Page       = ReportItemData;
     de2:	f8 01       	movw	r30, r16
     de4:	d2 82       	std	Z+2, r13	; 0x02
     de6:	c1 82       	std	Z+1, r12	; 0x01
				break;
     de8:	d4 c1       	rjmp	.+936    	; 0x1192 <USB_ProcessHIDReport+0x6e0>
			case HID_RI_LOGICAL_MINIMUM(0):
				CurrStateTable->Attributes.Logical.Minimum  = ReportItemData;
     dea:	d8 01       	movw	r26, r16
     dec:	1a 96       	adiw	r26, 0x0a	; 10
     dee:	cd 92       	st	X+, r12
     df0:	dd 92       	st	X+, r13
     df2:	ed 92       	st	X+, r14
     df4:	fc 92       	st	X, r15
     df6:	1d 97       	sbiw	r26, 0x0d	; 13
				break;
     df8:	cc c1       	rjmp	.+920    	; 0x1192 <USB_ProcessHIDReport+0x6e0>
			case HID_RI_LOGICAL_MAXIMUM(0):
				CurrStateTable->Attributes.Logical.Maximum  = ReportItemData;
     dfa:	f8 01       	movw	r30, r16
     dfc:	c6 86       	std	Z+14, r12	; 0x0e
     dfe:	d7 86       	std	Z+15, r13	; 0x0f
     e00:	e0 8a       	std	Z+16, r14	; 0x10
     e02:	f1 8a       	std	Z+17, r15	; 0x11
				break;
     e04:	c6 c1       	rjmp	.+908    	; 0x1192 <USB_ProcessHIDReport+0x6e0>
			case HID_RI_PHYSICAL_MINIMUM(0):
				CurrStateTable->Attributes.Physical.Minimum = ReportItemData;
     e06:	d8 01       	movw	r26, r16
     e08:	52 96       	adiw	r26, 0x12	; 18
     e0a:	cd 92       	st	X+, r12
     e0c:	dd 92       	st	X+, r13
     e0e:	ed 92       	st	X+, r14
     e10:	fc 92       	st	X, r15
     e12:	55 97       	sbiw	r26, 0x15	; 21
				break;
     e14:	be c1       	rjmp	.+892    	; 0x1192 <USB_ProcessHIDReport+0x6e0>
			case HID_RI_PHYSICAL_MAXIMUM(0):
				CurrStateTable->Attributes.Physical.Maximum = ReportItemData;
     e16:	f8 01       	movw	r30, r16
     e18:	c6 8a       	std	Z+22, r12	; 0x16
     e1a:	d7 8a       	std	Z+23, r13	; 0x17
     e1c:	e0 8e       	std	Z+24, r14	; 0x18
     e1e:	f1 8e       	std	Z+25, r15	; 0x19
				break;
     e20:	b8 c1       	rjmp	.+880    	; 0x1192 <USB_ProcessHIDReport+0x6e0>
			case HID_RI_UNIT_EXPONENT(0):
				CurrStateTable->Attributes.Unit.Exponent    = ReportItemData;
     e22:	d8 01       	movw	r26, r16
     e24:	19 96       	adiw	r26, 0x09	; 9
     e26:	cc 92       	st	X, r12
     e28:	19 97       	sbiw	r26, 0x09	; 9
				break;
     e2a:	b3 c1       	rjmp	.+870    	; 0x1192 <USB_ProcessHIDReport+0x6e0>
			case HID_RI_UNIT(0):
				CurrStateTable->Attributes.Unit.Type        = ReportItemData;
     e2c:	f8 01       	movw	r30, r16
     e2e:	c5 82       	std	Z+5, r12	; 0x05
     e30:	d6 82       	std	Z+6, r13	; 0x06
     e32:	e7 82       	std	Z+7, r14	; 0x07
     e34:	f0 86       	std	Z+8, r15	; 0x08
				break;
     e36:	ad c1       	rjmp	.+858    	; 0x1192 <USB_ProcessHIDReport+0x6e0>
			case HID_RI_REPORT_SIZE(0):
				CurrStateTable->Attributes.BitSize          = ReportItemData;
     e38:	d8 01       	movw	r26, r16
     e3a:	cc 92       	st	X, r12
				break;
     e3c:	aa c1       	rjmp	.+852    	; 0x1192 <USB_ProcessHIDReport+0x6e0>
			case HID_RI_REPORT_COUNT(0):
				CurrStateTable->ReportCount                 = ReportItemData;
     e3e:	f8 01       	movw	r30, r16
     e40:	c2 8e       	std	Z+26, r12	; 0x1a
				break;
     e42:	a7 c1       	rjmp	.+846    	; 0x1192 <USB_ProcessHIDReport+0x6e0>
			case HID_RI_REPORT_ID(0):
				CurrStateTable->ReportID                    = ReportItemData;
     e44:	ac 2d       	mov	r26, r12
     e46:	f8 01       	movw	r30, r16
     e48:	c3 8e       	std	Z+27, r12	; 0x1b

				if (ParserData->UsingReportIDs)
     e4a:	f5 01       	movw	r30, r10
     e4c:	e8 52       	subi	r30, 0x28	; 40
     e4e:	fc 4f       	sbci	r31, 0xFC	; 252
     e50:	80 81       	ld	r24, Z
     e52:	88 23       	and	r24, r24
     e54:	d1 f1       	breq	.+116    	; 0xeca <USB_ProcessHIDReport+0x418>
				{
					CurrReportIDInfo = NULL;

					for (uint8_t i = 0; i < ParserData->TotalDeviceReports; i++)
     e56:	f5 01       	movw	r30, r10
     e58:	e1 57       	subi	r30, 0x71	; 113
     e5a:	fc 4f       	sbci	r31, 0xFC	; 252
     e5c:	90 81       	ld	r25, Z
     e5e:	a5 01       	movw	r20, r10
     e60:	20 e0       	ldi	r18, 0x00	; 0
     e62:	18 c0       	rjmp	.+48     	; 0xe94 <USB_ProcessHIDReport+0x3e2>
     e64:	49 5f       	subi	r20, 0xF9	; 249
     e66:	5f 4f       	sbci	r21, 0xFF	; 255

#define  __INCLUDE_FROM_USB_DRIVER
#define  __INCLUDE_FROM_HID_DRIVER
#include "HIDParser.h"

uint8_t USB_ProcessHIDReport(const uint8_t* ReportData,
     e68:	fa 01       	movw	r30, r20
     e6a:	e7 57       	subi	r30, 0x77	; 119
     e6c:	fc 4f       	sbci	r31, 0xFC	; 252
				{
					CurrReportIDInfo = NULL;

					for (uint8_t i = 0; i < ParserData->TotalDeviceReports; i++)
					{
						if (ParserData->ReportIDSizes[i].ReportID == CurrStateTable->ReportID)
     e6e:	80 81       	ld	r24, Z
     e70:	8a 17       	cp	r24, r26
     e72:	79 f4       	brne	.+30     	; 0xe92 <USB_ProcessHIDReport+0x3e0>
						{
							CurrReportIDInfo = &ParserData->ReportIDSizes[i];
     e74:	82 2f       	mov	r24, r18
     e76:	90 e0       	ldi	r25, 0x00	; 0
     e78:	ac 01       	movw	r20, r24
     e7a:	23 e0       	ldi	r18, 0x03	; 3
     e7c:	44 0f       	add	r20, r20
     e7e:	55 1f       	adc	r21, r21
     e80:	2a 95       	dec	r18
     e82:	e1 f7       	brne	.-8      	; 0xe7c <USB_ProcessHIDReport+0x3ca>
     e84:	48 1b       	sub	r20, r24
     e86:	59 0b       	sbc	r21, r25
     e88:	40 57       	subi	r20, 0x70	; 112
     e8a:	5c 4f       	sbci	r21, 0xFC	; 252
     e8c:	4a 0d       	add	r20, r10
     e8e:	5b 1d       	adc	r21, r11
     e90:	1c c0       	rjmp	.+56     	; 0xeca <USB_ProcessHIDReport+0x418>

				if (ParserData->UsingReportIDs)
				{
					CurrReportIDInfo = NULL;

					for (uint8_t i = 0; i < ParserData->TotalDeviceReports; i++)
     e92:	2f 5f       	subi	r18, 0xFF	; 255
     e94:	29 17       	cp	r18, r25
     e96:	31 f7       	brne	.-52     	; 0xe64 <USB_ProcessHIDReport+0x3b2>
     e98:	c4 c1       	rjmp	.+904    	; 0x1222 <USB_ProcessHIDReport+0x770>
					if (CurrReportIDInfo == NULL)
					{
						if (ParserData->TotalDeviceReports == HID_MAX_REPORT_IDS)
						  return HID_PARSE_InsufficientReportIDItems;

						CurrReportIDInfo = &ParserData->ReportIDSizes[ParserData->TotalDeviceReports++];
     e9a:	82 2f       	mov	r24, r18
     e9c:	90 e0       	ldi	r25, 0x00	; 0
     e9e:	ac 01       	movw	r20, r24
     ea0:	b3 e0       	ldi	r27, 0x03	; 3
     ea2:	44 0f       	add	r20, r20
     ea4:	55 1f       	adc	r21, r21
     ea6:	ba 95       	dec	r27
     ea8:	e1 f7       	brne	.-8      	; 0xea2 <USB_ProcessHIDReport+0x3f0>
     eaa:	48 1b       	sub	r20, r24
     eac:	59 0b       	sbc	r21, r25
     eae:	40 57       	subi	r20, 0x70	; 112
     eb0:	5c 4f       	sbci	r21, 0xFC	; 252
     eb2:	4a 0d       	add	r20, r10
     eb4:	5b 1d       	adc	r21, r11
     eb6:	f5 01       	movw	r30, r10
     eb8:	e1 57       	subi	r30, 0x71	; 113
     eba:	fc 4f       	sbci	r31, 0xFC	; 252
     ebc:	2f 5f       	subi	r18, 0xFF	; 255
     ebe:	20 83       	st	Z, r18
						memset(CurrReportIDInfo, 0x00, sizeof(HID_ReportSizeInfo_t));
     ec0:	87 e0       	ldi	r24, 0x07	; 7
     ec2:	da 01       	movw	r26, r20
     ec4:	1d 92       	st	X+, r1
     ec6:	8a 95       	dec	r24
     ec8:	e9 f7       	brne	.-6      	; 0xec4 <USB_ProcessHIDReport+0x412>
					}
				}

				ParserData->UsingReportIDs = true;
     eca:	f5 01       	movw	r30, r10
     ecc:	e8 52       	subi	r30, 0x28	; 40
     ece:	fc 4f       	sbci	r31, 0xFC	; 252
     ed0:	81 e0       	ldi	r24, 0x01	; 1
     ed2:	80 83       	st	Z, r24

				CurrReportIDInfo->ReportID = CurrStateTable->ReportID;
     ed4:	f8 01       	movw	r30, r16
     ed6:	83 8d       	ldd	r24, Z+27	; 0x1b
     ed8:	da 01       	movw	r26, r20
     eda:	8c 93       	st	X, r24
				break;
     edc:	5a c1       	rjmp	.+692    	; 0x1192 <USB_ProcessHIDReport+0x6e0>
			case HID_RI_USAGE(0):
				if (UsageListSize == HID_USAGE_STACK_DEPTH)
     ede:	38 30       	cpi	r19, 0x08	; 8
     ee0:	09 f4       	brne	.+2      	; 0xee4 <USB_ProcessHIDReport+0x432>
     ee2:	7a c1       	rjmp	.+756    	; 0x11d8 <USB_ProcessHIDReport+0x726>
				  return HID_PARSE_UsageListOverflow;

				UsageList[UsageListSize++] = ReportItemData;
     ee4:	e3 2f       	mov	r30, r19
     ee6:	f0 e0       	ldi	r31, 0x00	; 0
     ee8:	ee 0f       	add	r30, r30
     eea:	ff 1f       	adc	r31, r31
     eec:	81 e0       	ldi	r24, 0x01	; 1
     eee:	90 e0       	ldi	r25, 0x00	; 0
     ef0:	8c 0f       	add	r24, r28
     ef2:	9d 1f       	adc	r25, r29
     ef4:	e8 0f       	add	r30, r24
     ef6:	f9 1f       	adc	r31, r25
     ef8:	d1 82       	std	Z+1, r13	; 0x01
     efa:	c0 82       	st	Z, r12
     efc:	3f 5f       	subi	r19, 0xFF	; 255
				break;
     efe:	49 c1       	rjmp	.+658    	; 0x1192 <USB_ProcessHIDReport+0x6e0>
			case HID_RI_USAGE_MINIMUM(0):
				UsageMinMax.Minimum = ReportItemData;
				break;
			case HID_RI_USAGE_MAXIMUM(0):
				UsageMinMax.Maximum = ReportItemData;
				break;
     f00:	eb 96       	adiw	r28, 0x3b	; 59
     f02:	cc ae       	sts	0xbc, r28
     f04:	dd ae       	sts	0xbd, r29
     f06:	ee ae       	sts	0xbe, r30
     f08:	ff ae       	sts	0xbf, r31
     f0a:	eb 97       	sbiw	r28, 0x3b	; 59
     f0c:	42 c1       	rjmp	.+644    	; 0x1192 <USB_ProcessHIDReport+0x6e0>
			case HID_RI_COLLECTION(0):
				if (CurrCollectionPath == NULL)
     f0e:	81 14       	cp	r8, r1
     f10:	91 04       	cpc	r9, r1
     f12:	39 f4       	brne	.+14     	; 0xf22 <USB_ProcessHIDReport+0x470>
				{
					CurrCollectionPath = &ParserData->CollectionPaths[0];
     f14:	e9 e4       	ldi	r30, 0x49	; 73
     f16:	8e 2e       	mov	r8, r30
     f18:	e3 e0       	ldi	r30, 0x03	; 3
     f1a:	9e 2e       	mov	r9, r30
     f1c:	8a 0c       	add	r8, r10
     f1e:	9b 1c       	adc	r9, r11
     f20:	16 c0       	rjmp	.+44     	; 0xf4e <USB_ProcessHIDReport+0x49c>
				}
				else
				{
					HID_CollectionPath_t* ParentCollectionPath = CurrCollectionPath;

					CurrCollectionPath = &ParserData->CollectionPaths[1];
     f22:	f5 01       	movw	r30, r10
     f24:	e0 5b       	subi	r30, 0xB0	; 176
     f26:	fc 4f       	sbci	r31, 0xFC	; 252

					while (CurrCollectionPath->Parent != NULL)
     f28:	0b c0       	rjmp	.+22     	; 0xf40 <USB_ProcessHIDReport+0x48e>
					{
						if (CurrCollectionPath == &ParserData->CollectionPaths[HID_MAX_COLLECTIONS - 1])
     f2a:	c9 57       	subi	r28, 0x79	; 121
     f2c:	df 4f       	sbci	r29, 0xFF	; 255
     f2e:	a8 81       	ld	r26, Y
     f30:	b9 81       	ldd	r27, Y+1	; 0x01
     f32:	c7 58       	subi	r28, 0x87	; 135
     f34:	d0 40       	sbci	r29, 0x00	; 0
     f36:	ea 17       	cp	r30, r26
     f38:	fb 07       	cpc	r31, r27
     f3a:	09 f4       	brne	.+2      	; 0xf3e <USB_ProcessHIDReport+0x48c>
     f3c:	4f c1       	rjmp	.+670    	; 0x11dc <USB_ProcessHIDReport+0x72a>
						  return HID_PARSE_InsufficientCollectionPaths;

						CurrCollectionPath++;
     f3e:	37 96       	adiw	r30, 0x07	; 7
				{
					HID_CollectionPath_t* ParentCollectionPath = CurrCollectionPath;

					CurrCollectionPath = &ParserData->CollectionPaths[1];

					while (CurrCollectionPath->Parent != NULL)
     f40:	85 81       	ldd	r24, Z+5	; 0x05
     f42:	96 81       	ldd	r25, Z+6	; 0x06
     f44:	00 97       	sbiw	r24, 0x00	; 0
     f46:	89 f7       	brne	.-30     	; 0xf2a <USB_ProcessHIDReport+0x478>
						  return HID_PARSE_InsufficientCollectionPaths;

						CurrCollectionPath++;
					}

					CurrCollectionPath->Parent = ParentCollectionPath;
     f48:	96 82       	std	Z+6, r9	; 0x06
     f4a:	85 82       	std	Z+5, r8	; 0x05
     f4c:	4f 01       	movw	r8, r30
				}

				CurrCollectionPath->Type       = ReportItemData;
     f4e:	f4 01       	movw	r30, r8
     f50:	c0 82       	st	Z, r12
				CurrCollectionPath->Usage.Page = CurrStateTable->Attributes.Usage.Page;
     f52:	d8 01       	movw	r26, r16
     f54:	11 96       	adiw	r26, 0x01	; 1
     f56:	8d 91       	ld	r24, X+
     f58:	9c 91       	ld	r25, X
     f5a:	12 97       	sbiw	r26, 0x02	; 2
     f5c:	92 83       	std	Z+2, r25	; 0x02
     f5e:	81 83       	std	Z+1, r24	; 0x01

				if (UsageListSize)
     f60:	33 23       	and	r19, r19
     f62:	81 f0       	breq	.+32     	; 0xf84 <USB_ProcessHIDReport+0x4d2>
				{
					CurrCollectionPath->Usage.Usage = UsageList[0];
     f64:	89 81       	ldd	r24, Y+1	; 0x01
     f66:	9a 81       	ldd	r25, Y+2	; 0x02
     f68:	94 83       	std	Z+4, r25	; 0x04
     f6a:	83 83       	std	Z+3, r24	; 0x03
     f6c:	fe 01       	movw	r30, r28
     f6e:	31 96       	adiw	r30, 0x01	; 1

					for (uint8_t i = 0; i < UsageListSize; i++)
     f70:	80 e0       	ldi	r24, 0x00	; 0
					  UsageList[i] = UsageList[i + 1];
     f72:	a2 81       	ldd	r26, Z+2	; 0x02
     f74:	b3 81       	ldd	r27, Z+3	; 0x03
     f76:	a1 93       	st	Z+, r26
     f78:	b1 93       	st	Z+, r27

				if (UsageListSize)
				{
					CurrCollectionPath->Usage.Usage = UsageList[0];

					for (uint8_t i = 0; i < UsageListSize; i++)
     f7a:	8f 5f       	subi	r24, 0xFF	; 255
     f7c:	83 17       	cp	r24, r19
     f7e:	c9 f7       	brne	.-14     	; 0xf72 <USB_ProcessHIDReport+0x4c0>
					  UsageList[i] = UsageList[i + 1];

					UsageListSize--;
     f80:	31 50       	subi	r19, 0x01	; 1
     f82:	07 c1       	rjmp	.+526    	; 0x1192 <USB_ProcessHIDReport+0x6e0>
				}
				else if (UsageMinMax.Minimum <= UsageMinMax.Maximum)
     f84:	eb 96       	adiw	r28, 0x3b	; 59
     f86:	8c ad       	sts	0x6c, r24
     f88:	9d ad       	sts	0x6d, r25
     f8a:	ae ad       	sts	0x6e, r26
     f8c:	bf ad       	sts	0x6f, r27
     f8e:	eb 97       	sbiw	r28, 0x3b	; 59
     f90:	84 15       	cp	r24, r4
     f92:	95 05       	cpc	r25, r5
     f94:	a6 05       	cpc	r26, r6
     f96:	b7 05       	cpc	r27, r7
     f98:	08 f4       	brcc	.+2      	; 0xf9c <USB_ProcessHIDReport+0x4ea>
     f9a:	fb c0       	rjmp	.+502    	; 0x1192 <USB_ProcessHIDReport+0x6e0>
				{
					CurrCollectionPath->Usage.Usage = UsageMinMax.Minimum++;
     f9c:	54 82       	std	Z+4, r5	; 0x04
     f9e:	43 82       	std	Z+3, r4	; 0x03
     fa0:	08 94       	sec
     fa2:	41 1c       	adc	r4, r1
     fa4:	51 1c       	adc	r5, r1
     fa6:	61 1c       	adc	r6, r1
     fa8:	71 1c       	adc	r7, r1
     faa:	f3 c0       	rjmp	.+486    	; 0x1192 <USB_ProcessHIDReport+0x6e0>
				}

				break;
			case HID_RI_END_COLLECTION(0):
				if (CurrCollectionPath == NULL)
     fac:	81 14       	cp	r8, r1
     fae:	91 04       	cpc	r9, r1
     fb0:	09 f4       	brne	.+2      	; 0xfb4 <USB_ProcessHIDReport+0x502>
     fb2:	16 c1       	rjmp	.+556    	; 0x11e0 <USB_ProcessHIDReport+0x72e>
				  return HID_PARSE_UnexpectedEndCollection;

				CurrCollectionPath = CurrCollectionPath->Parent;
     fb4:	f4 01       	movw	r30, r8
     fb6:	85 80       	ldd	r8, Z+5	; 0x05
     fb8:	96 80       	ldd	r9, Z+6	; 0x06
				break;
     fba:	eb c0       	rjmp	.+470    	; 0x1192 <USB_ProcessHIDReport+0x6e0>
			case HID_RI_FEATURE(0):
				for (uint8_t ReportItemNum = 0; ReportItemNum < CurrStateTable->ReportCount; ReportItemNum++)
				{
					HID_ReportItem_t NewReportItem;

					memcpy(&NewReportItem.Attributes,
     fbc:	fe 01       	movw	r30, r28
     fbe:	79 96       	adiw	r30, 0x19	; 25
     fc0:	d8 01       	movw	r26, r16
     fc2:	8a e1       	ldi	r24, 0x1A	; 26
     fc4:	0d 90       	ld	r0, X+
     fc6:	01 92       	st	Z+, r0
     fc8:	81 50       	subi	r24, 0x01	; 1
     fca:	e1 f7       	brne	.-8      	; 0xfc4 <USB_ProcessHIDReport+0x512>
					       &CurrStateTable->Attributes,
					       sizeof(HID_ReportItem_Attributes_t));

					NewReportItem.ItemFlags      = ReportItemData;
     fcc:	dd 8a       	std	Y+21, r13	; 0x15
     fce:	cc 8a       	std	Y+20, r12	; 0x14
					NewReportItem.CollectionPath = CurrCollectionPath;
     fd0:	78 8f       	std	Y+24, r23	; 0x18
     fd2:	6f 8b       	std	Y+23, r22	; 0x17
					NewReportItem.ReportID       = CurrStateTable->ReportID;
     fd4:	d8 01       	movw	r26, r16
     fd6:	5b 96       	adiw	r26, 0x1b	; 27
     fd8:	8c 91       	ld	r24, X
     fda:	5b 97       	sbiw	r26, 0x1b	; 27
     fdc:	8e 8b       	std	Y+22, r24	; 0x16

					if (UsageListSize)
     fde:	33 23       	and	r19, r19
     fe0:	81 f0       	breq	.+32     	; 0x1002 <USB_ProcessHIDReport+0x550>
					{
						NewReportItem.Attributes.Usage.Usage = UsageList[0];
     fe2:	89 81       	ldd	r24, Y+1	; 0x01
     fe4:	9a 81       	ldd	r25, Y+2	; 0x02
     fe6:	9d 8f       	std	Y+29, r25	; 0x1d
     fe8:	8c 8f       	std	Y+28, r24	; 0x1c
     fea:	fe 01       	movw	r30, r28
     fec:	31 96       	adiw	r30, 0x01	; 1

						for (uint8_t i = 0; i < UsageListSize; i++)
     fee:	80 e0       	ldi	r24, 0x00	; 0
						  UsageList[i] = UsageList[i + 1];
     ff0:	42 81       	ldd	r20, Z+2	; 0x02
     ff2:	53 81       	ldd	r21, Z+3	; 0x03
     ff4:	41 93       	st	Z+, r20
     ff6:	51 93       	st	Z+, r21

					if (UsageListSize)
					{
						NewReportItem.Attributes.Usage.Usage = UsageList[0];

						for (uint8_t i = 0; i < UsageListSize; i++)
     ff8:	8f 5f       	subi	r24, 0xFF	; 255
     ffa:	83 17       	cp	r24, r19
     ffc:	c9 f7       	brne	.-14     	; 0xff0 <USB_ProcessHIDReport+0x53e>
						  UsageList[i] = UsageList[i + 1];

						UsageListSize--;
     ffe:	31 50       	subi	r19, 0x01	; 1
    1000:	12 c0       	rjmp	.+36     	; 0x1026 <USB_ProcessHIDReport+0x574>
					}
					else if (UsageMinMax.Minimum <= UsageMinMax.Maximum)
    1002:	eb 96       	adiw	r28, 0x3b	; 59
    1004:	8c ad       	sts	0x6c, r24
    1006:	9d ad       	sts	0x6d, r25
    1008:	ae ad       	sts	0x6e, r26
    100a:	bf ad       	sts	0x6f, r27
    100c:	eb 97       	sbiw	r28, 0x3b	; 59
    100e:	84 15       	cp	r24, r4
    1010:	95 05       	cpc	r25, r5
    1012:	a6 05       	cpc	r26, r6
    1014:	b7 05       	cpc	r27, r7
    1016:	38 f0       	brcs	.+14     	; 0x1026 <USB_ProcessHIDReport+0x574>
					{
						NewReportItem.Attributes.Usage.Usage = UsageMinMax.Minimum++;
    1018:	5d 8e       	std	Y+29, r5	; 0x1d
    101a:	4c 8e       	std	Y+28, r4	; 0x1c
    101c:	08 94       	sec
    101e:	41 1c       	adc	r4, r1
    1020:	51 1c       	adc	r5, r1
    1022:	61 1c       	adc	r6, r1
    1024:	71 1c       	adc	r7, r1
					}

					uint8_t ItemTypeTag = (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK));

					if (ItemTypeTag == HID_RI_INPUT(0))
    1026:	90 e8       	ldi	r25, 0x80	; 128
    1028:	29 16       	cp	r2, r25
    102a:	11 f4       	brne	.+4      	; 0x1030 <USB_ProcessHIDReport+0x57e>
					  NewReportItem.ItemType = HID_REPORT_ITEM_In;
    102c:	1b 8a       	std	Y+19, r1	; 0x13
    102e:	08 c0       	rjmp	.+16     	; 0x1040 <USB_ProcessHIDReport+0x58e>
					else if (ItemTypeTag == HID_RI_OUTPUT(0))
    1030:	a0 e9       	ldi	r26, 0x90	; 144
    1032:	2a 16       	cp	r2, r26
    1034:	19 f4       	brne	.+6      	; 0x103c <USB_ProcessHIDReport+0x58a>
					  NewReportItem.ItemType = HID_REPORT_ITEM_Out;
    1036:	b1 e0       	ldi	r27, 0x01	; 1
    1038:	bb 8b       	std	Y+19, r27	; 0x13
    103a:	02 c0       	rjmp	.+4      	; 0x1040 <USB_ProcessHIDReport+0x58e>
					else
					  NewReportItem.ItemType = HID_REPORT_ITEM_Feature;
    103c:	e2 e0       	ldi	r30, 0x02	; 2
    103e:	eb 8b       	std	Y+19, r30	; 0x13

					NewReportItem.BitOffset = CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType];
    1040:	eb 89       	ldd	r30, Y+19	; 0x13
    1042:	f0 e0       	ldi	r31, 0x00	; 0
    1044:	ee 0f       	add	r30, r30
    1046:	ff 1f       	adc	r31, r31
    1048:	e8 0d       	add	r30, r8
    104a:	f9 1d       	adc	r31, r9
    104c:	81 81       	ldd	r24, Z+1	; 0x01
    104e:	92 81       	ldd	r25, Z+2	; 0x02
    1050:	9a 8b       	std	Y+18, r25	; 0x12
    1052:	89 8b       	std	Y+17, r24	; 0x11

					CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType] += CurrStateTable->Attributes.BitSize;
    1054:	d8 01       	movw	r26, r16
    1056:	2c 91       	ld	r18, X
    1058:	81 81       	ldd	r24, Z+1	; 0x01
    105a:	92 81       	ldd	r25, Z+2	; 0x02
    105c:	82 0f       	add	r24, r18
    105e:	91 1d       	adc	r25, r1
    1060:	92 83       	std	Z+2, r25	; 0x02
    1062:	81 83       	std	Z+1, r24	; 0x01

					ParserData->LargestReportSizeBits = MAX(ParserData->LargestReportSizeBits, CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType]);
    1064:	eb 89       	ldd	r30, Y+19	; 0x13
    1066:	f0 e0       	ldi	r31, 0x00	; 0
    1068:	ee 0f       	add	r30, r30
    106a:	ff 1f       	adc	r31, r31
    106c:	e8 0d       	add	r30, r8
    106e:	f9 1d       	adc	r31, r9
    1070:	cf 57       	subi	r28, 0x7F	; 127
    1072:	df 4f       	sbci	r29, 0xFF	; 255
    1074:	a8 81       	ld	r26, Y
    1076:	b9 81       	ldd	r27, Y+1	; 0x01
    1078:	c1 58       	subi	r28, 0x81	; 129
    107a:	d0 40       	sbci	r29, 0x00	; 0
    107c:	4d 91       	ld	r20, X+
    107e:	5c 91       	ld	r21, X
    1080:	11 97       	sbiw	r26, 0x01	; 1
    1082:	81 81       	ldd	r24, Z+1	; 0x01
    1084:	92 81       	ldd	r25, Z+2	; 0x02
    1086:	84 17       	cp	r24, r20
    1088:	95 07       	cpc	r25, r21
    108a:	08 f4       	brcc	.+2      	; 0x108e <USB_ProcessHIDReport+0x5dc>
    108c:	ca 01       	movw	r24, r20
    108e:	cf 57       	subi	r28, 0x7F	; 127
    1090:	df 4f       	sbci	r29, 0xFF	; 255
    1092:	e8 81       	ld	r30, Y
    1094:	f9 81       	ldd	r31, Y+1	; 0x01
    1096:	c1 58       	subi	r28, 0x81	; 129
    1098:	d0 40       	sbci	r29, 0x00	; 0
    109a:	91 83       	std	Z+1, r25	; 0x01
    109c:	80 83       	st	Z, r24

					if (ParserData->TotalReportItems == HID_MAX_REPORTITEMS)
    109e:	d5 01       	movw	r26, r10
    10a0:	8c 91       	ld	r24, X
    10a2:	84 31       	cpi	r24, 0x14	; 20
    10a4:	09 f4       	brne	.+2      	; 0x10a8 <USB_ProcessHIDReport+0x5f6>
    10a6:	9e c0       	rjmp	.+316    	; 0x11e4 <USB_ProcessHIDReport+0x732>
					  return HID_PARSE_InsufficientReportItems;

					memcpy(&ParserData->ReportItems[ParserData->TotalReportItems],
    10a8:	90 e0       	ldi	r25, 0x00	; 0
    10aa:	4a e2       	ldi	r20, 0x2A	; 42
    10ac:	50 e0       	ldi	r21, 0x00	; 0
    10ae:	84 9f       	mul	r24, r20
    10b0:	f0 01       	movw	r30, r0
    10b2:	85 9f       	mul	r24, r21
    10b4:	f0 0d       	add	r31, r0
    10b6:	94 9f       	mul	r25, r20
    10b8:	f0 0d       	add	r31, r0
    10ba:	11 24       	eor	r1, r1
    10bc:	ea 0d       	add	r30, r10
    10be:	fb 1d       	adc	r31, r11
    10c0:	31 96       	adiw	r30, 0x01	; 1
    10c2:	de 01       	movw	r26, r28
    10c4:	51 96       	adiw	r26, 0x11	; 17
    10c6:	8a e2       	ldi	r24, 0x2A	; 42
    10c8:	0d 90       	ld	r0, X+
    10ca:	01 92       	st	Z+, r0
    10cc:	81 50       	subi	r24, 0x01	; 1
    10ce:	e1 f7       	brne	.-8      	; 0x10c8 <USB_ProcessHIDReport+0x616>
					       &NewReportItem, sizeof(HID_ReportItem_t));

					if (!(ReportItemData & HID_IOF_CONSTANT) && CALLBACK_HIDParser_FilterHIDReportItem(&NewReportItem))
    10d0:	cd 57       	subi	r28, 0x7D	; 125
    10d2:	df 4f       	sbci	r29, 0xFF	; 255
    10d4:	88 81       	ld	r24, Y
    10d6:	99 81       	ldd	r25, Y+1	; 0x01
    10d8:	aa 81       	ldd	r26, Y+2	; 0x02
    10da:	bb 81       	ldd	r27, Y+3	; 0x03
    10dc:	c3 58       	subi	r28, 0x83	; 131
    10de:	d0 40       	sbci	r29, 0x00	; 0
    10e0:	00 97       	sbiw	r24, 0x00	; 0
    10e2:	a1 05       	cpc	r26, r1
    10e4:	b1 05       	cpc	r27, r1
    10e6:	39 f5       	brne	.+78     	; 0x1136 <USB_ProcessHIDReport+0x684>
    10e8:	ce 01       	movw	r24, r28
    10ea:	41 96       	adiw	r24, 0x11	; 17
    10ec:	c1 57       	subi	r28, 0x71	; 113
    10ee:	df 4f       	sbci	r29, 0xFF	; 255
    10f0:	38 83       	st	Y, r19
    10f2:	cf 58       	subi	r28, 0x8F	; 143
    10f4:	d0 40       	sbci	r29, 0x00	; 0
    10f6:	c3 57       	subi	r28, 0x73	; 115
    10f8:	df 4f       	sbci	r29, 0xFF	; 255
    10fa:	68 83       	st	Y, r22
    10fc:	cd 58       	subi	r28, 0x8D	; 141
    10fe:	d0 40       	sbci	r29, 0x00	; 0
    1100:	c2 57       	subi	r28, 0x72	; 114
    1102:	df 4f       	sbci	r29, 0xFF	; 255
    1104:	78 83       	st	Y, r23
    1106:	ce 58       	subi	r28, 0x8E	; 142
    1108:	d0 40       	sbci	r29, 0x00	; 0
    110a:	d1 dc       	rcall	.-1630   	; 0xaae <CALLBACK_HIDParser_FilterHIDReportItem>
    110c:	c1 57       	subi	r28, 0x71	; 113
    110e:	df 4f       	sbci	r29, 0xFF	; 255
    1110:	38 81       	ld	r19, Y
    1112:	cf 58       	subi	r28, 0x8F	; 143
    1114:	d0 40       	sbci	r29, 0x00	; 0
    1116:	c3 57       	subi	r28, 0x73	; 115
    1118:	df 4f       	sbci	r29, 0xFF	; 255
    111a:	68 81       	ld	r22, Y
    111c:	cd 58       	subi	r28, 0x8D	; 141
    111e:	d0 40       	sbci	r29, 0x00	; 0
    1120:	c2 57       	subi	r28, 0x72	; 114
    1122:	df 4f       	sbci	r29, 0xFF	; 255
    1124:	78 81       	ld	r23, Y
    1126:	ce 58       	subi	r28, 0x8E	; 142
    1128:	d0 40       	sbci	r29, 0x00	; 0
    112a:	88 23       	and	r24, r24
    112c:	21 f0       	breq	.+8      	; 0x1136 <USB_ProcessHIDReport+0x684>
    112e:	d5 01       	movw	r26, r10
					  ParserData->TotalReportItems++;
    1130:	8c 91       	ld	r24, X
    1132:	8f 5f       	subi	r24, 0xFF	; 255
    1134:	8c 93       	st	X, r24
    1136:	33 94       	inc	r3
				CurrCollectionPath = CurrCollectionPath->Parent;
				break;
			case HID_RI_INPUT(0):
			case HID_RI_OUTPUT(0):
			case HID_RI_FEATURE(0):
				for (uint8_t ReportItemNum = 0; ReportItemNum < CurrStateTable->ReportCount; ReportItemNum++)
    1138:	1a c0       	rjmp	.+52     	; 0x116e <USB_ProcessHIDReport+0x6bc>
    113a:	33 24       	eor	r3, r3
			default:
				ReportItemData  = 0;
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
    113c:	8c ef       	ldi	r24, 0xFC	; 252
					else if (UsageMinMax.Minimum <= UsageMinMax.Maximum)
					{
						NewReportItem.Attributes.Usage.Usage = UsageMinMax.Minimum++;
					}

					uint8_t ItemTypeTag = (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK));
    113e:	28 2e       	mov	r2, r24
    1140:	22 22       	and	r2, r18
    1142:	d7 01       	movw	r26, r14
					  return HID_PARSE_InsufficientReportItems;

					memcpy(&ParserData->ReportItems[ParserData->TotalReportItems],
					       &NewReportItem, sizeof(HID_ReportItem_t));

					if (!(ReportItemData & HID_IOF_CONSTANT) && CALLBACK_HIDParser_FilterHIDReportItem(&NewReportItem))
    1144:	c6 01       	movw	r24, r12
    1146:	81 70       	andi	r24, 0x01	; 1
    1148:	90 70       	andi	r25, 0x00	; 0
    114a:	a0 70       	andi	r26, 0x00	; 0
    114c:	b0 70       	andi	r27, 0x00	; 0
    114e:	cd 57       	subi	r28, 0x7D	; 125
    1150:	df 4f       	sbci	r29, 0xFF	; 255
    1152:	88 83       	st	Y, r24
    1154:	99 83       	std	Y+1, r25	; 0x01
    1156:	aa 83       	std	Y+2, r26	; 0x02
    1158:	bb 83       	std	Y+3, r27	; 0x03
    115a:	c3 58       	subi	r28, 0x83	; 131
    115c:	d0 40       	sbci	r29, 0x00	; 0
    115e:	c5 57       	subi	r28, 0x75	; 117
    1160:	df 4f       	sbci	r29, 0xFF	; 255
    1162:	79 83       	std	Y+1, r23	; 0x01
    1164:	68 83       	st	Y, r22
    1166:	cb 58       	subi	r28, 0x8B	; 139
    1168:	d0 40       	sbci	r29, 0x00	; 0
    116a:	b4 01       	movw	r22, r8
    116c:	4a 01       	movw	r8, r20
    116e:	d8 01       	movw	r26, r16
				CurrCollectionPath = CurrCollectionPath->Parent;
				break;
			case HID_RI_INPUT(0):
			case HID_RI_OUTPUT(0):
			case HID_RI_FEATURE(0):
				for (uint8_t ReportItemNum = 0; ReportItemNum < CurrStateTable->ReportCount; ReportItemNum++)
    1170:	5a 96       	adiw	r26, 0x1a	; 26
    1172:	8c 91       	ld	r24, X
    1174:	5a 97       	sbiw	r26, 0x1a	; 26
    1176:	38 16       	cp	r3, r24
    1178:	08 f4       	brcc	.+2      	; 0x117c <USB_ProcessHIDReport+0x6ca>
    117a:	20 cf       	rjmp	.-448    	; 0xfbc <USB_ProcessHIDReport+0x50a>
    117c:	a4 01       	movw	r20, r8
    117e:	4b 01       	movw	r8, r22
    1180:	c5 57       	subi	r28, 0x75	; 117
    1182:	df 4f       	sbci	r29, 0xFF	; 255
    1184:	68 81       	ld	r22, Y
    1186:	79 81       	ldd	r23, Y+1	; 0x01
    1188:	cb 58       	subi	r28, 0x8B	; 139
    118a:	d0 40       	sbci	r29, 0x00	; 0
    118c:	02 c0       	rjmp	.+4      	; 0x1192 <USB_ProcessHIDReport+0x6e0>
    118e:	26 01       	movw	r4, r12
			default:
				ReportItemData  = 0;
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
    1190:	37 01       	movw	r6, r14
    1192:	ed 96       	adiw	r28, 0x3d	; 61
			
			default:
				break;
		}

		if ((HIDReportItem & HID_RI_TYPE_MASK) == HID_RI_TYPE_MAIN)
    1194:	8e ad       	sts	0x6e, r24
    1196:	9f ad       	sts	0x6f, r25
    1198:	ed 97       	sbiw	r28, 0x3d	; 61
    119a:	8c 70       	andi	r24, 0x0C	; 12
    119c:	90 70       	andi	r25, 0x00	; 0
    119e:	00 97       	sbiw	r24, 0x00	; 0
    11a0:	51 f4       	brne	.+20     	; 0x11b6 <USB_ProcessHIDReport+0x704>
    11a2:	eb 96       	adiw	r28, 0x3b	; 59
		{
			UsageMinMax.Minimum = 0;
			UsageMinMax.Maximum = 0;
    11a4:	1c ae       	sts	0xbc, r17
    11a6:	1d ae       	sts	0xbd, r17
    11a8:	1e ae       	sts	0xbe, r17
    11aa:	1f ae       	sts	0xbf, r17
    11ac:	eb 97       	sbiw	r28, 0x3b	; 59
    11ae:	44 24       	eor	r4, r4
				break;
		}

		if ((HIDReportItem & HID_RI_TYPE_MASK) == HID_RI_TYPE_MAIN)
		{
			UsageMinMax.Minimum = 0;
    11b0:	55 24       	eor	r5, r5
    11b2:	32 01       	movw	r6, r4
    11b4:	30 e0       	ldi	r19, 0x00	; 0
			UsageMinMax.Maximum = 0;
			UsageListSize       = 0;
    11b6:	e7 96       	adiw	r28, 0x37	; 55
	memset(CurrStateTable,   0x00, sizeof(HID_StateTable_t));
	memset(CurrReportIDInfo, 0x00, sizeof(HID_ReportSizeInfo_t));

	ParserData->TotalDeviceReports = 1;

	while (ReportSize)
    11b8:	ee ad       	sts	0x6e, r30
    11ba:	ff ad       	sts	0x6f, r31
    11bc:	e7 97       	sbiw	r28, 0x37	; 55
    11be:	30 97       	sbiw	r30, 0x00	; 0
    11c0:	09 f0       	breq	.+2      	; 0x11c4 <USB_ProcessHIDReport+0x712>
    11c2:	e1 cc       	rjmp	.-1598   	; 0xb86 <USB_ProcessHIDReport+0xd4>
    11c4:	d5 01       	movw	r26, r10
			UsageMinMax.Maximum = 0;
			UsageListSize       = 0;
		}
	}

	if (!(ParserData->TotalReportItems))
    11c6:	8c 91       	ld	r24, X
    11c8:	88 23       	and	r24, r24
    11ca:	71 f4       	brne	.+28     	; 0x11e8 <USB_ProcessHIDReport+0x736>
    11cc:	88 e0       	ldi	r24, 0x08	; 8
	  return HID_PARSE_NoUnfilteredReportItems;
    11ce:	0f c0       	rjmp	.+30     	; 0x11ee <USB_ProcessHIDReport+0x73c>
    11d0:	81 e0       	ldi	r24, 0x01	; 1

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
		{
			case HID_RI_PUSH(0):
				if (CurrStateTable == &StateTable[HID_STATETABLE_STACK_DEPTH - 1])
				  return HID_PARSE_HIDStackOverflow;
    11d2:	0d c0       	rjmp	.+26     	; 0x11ee <USB_ProcessHIDReport+0x73c>
    11d4:	82 e0       	ldi	r24, 0x02	; 2

				CurrStateTable++;
				break;
			case HID_RI_POP(0):
				if (CurrStateTable == &StateTable[0])
				  return HID_PARSE_HIDStackUnderflow;
    11d6:	0b c0       	rjmp	.+22     	; 0x11ee <USB_ProcessHIDReport+0x73c>
    11d8:	86 e0       	ldi	r24, 0x06	; 6

				CurrReportIDInfo->ReportID = CurrStateTable->ReportID;
				break;
			case HID_RI_USAGE(0):
				if (UsageListSize == HID_USAGE_STACK_DEPTH)
				  return HID_PARSE_UsageListOverflow;
    11da:	09 c0       	rjmp	.+18     	; 0x11ee <USB_ProcessHIDReport+0x73c>
    11dc:	85 e0       	ldi	r24, 0x05	; 5
					CurrCollectionPath = &ParserData->CollectionPaths[1];

					while (CurrCollectionPath->Parent != NULL)
					{
						if (CurrCollectionPath == &ParserData->CollectionPaths[HID_MAX_COLLECTIONS - 1])
						  return HID_PARSE_InsufficientCollectionPaths;
    11de:	07 c0       	rjmp	.+14     	; 0x11ee <USB_ProcessHIDReport+0x73c>
    11e0:	84 e0       	ldi	r24, 0x04	; 4
				}

				break;
			case HID_RI_END_COLLECTION(0):
				if (CurrCollectionPath == NULL)
				  return HID_PARSE_UnexpectedEndCollection;
    11e2:	05 c0       	rjmp	.+10     	; 0x11ee <USB_ProcessHIDReport+0x73c>
    11e4:	83 e0       	ldi	r24, 0x03	; 3
					CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType] += CurrStateTable->Attributes.BitSize;

					ParserData->LargestReportSizeBits = MAX(ParserData->LargestReportSizeBits, CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType]);

					if (ParserData->TotalReportItems == HID_MAX_REPORTITEMS)
					  return HID_PARSE_InsufficientReportItems;
    11e6:	03 c0       	rjmp	.+6      	; 0x11ee <USB_ProcessHIDReport+0x73c>
    11e8:	80 e0       	ldi	r24, 0x00	; 0
	}

	if (!(ParserData->TotalReportItems))
	  return HID_PARSE_NoUnfilteredReportItems;

	return HID_PARSE_Successful;
    11ea:	01 c0       	rjmp	.+2      	; 0x11ee <USB_ProcessHIDReport+0x73c>
    11ec:	87 e0       	ldi	r24, 0x07	; 7
					}

					if (CurrReportIDInfo == NULL)
					{
						if (ParserData->TotalDeviceReports == HID_MAX_REPORT_IDS)
						  return HID_PARSE_InsufficientReportIDItems;
    11ee:	c1 57       	subi	r28, 0x71	; 113

	if (!(ParserData->TotalReportItems))
	  return HID_PARSE_NoUnfilteredReportItems;

	return HID_PARSE_Successful;
}
    11f0:	df 4f       	sbci	r29, 0xFF	; 255
    11f2:	0f b6       	in	r0, 0x3f	; 63
    11f4:	f8 94       	cli
    11f6:	de bf       	out	0x3e, r29	; 62
    11f8:	0f be       	out	0x3f, r0	; 63
    11fa:	cd bf       	out	0x3d, r28	; 61
    11fc:	df 91       	pop	r29
    11fe:	cf 91       	pop	r28
    1200:	1f 91       	pop	r17
    1202:	0f 91       	pop	r16
    1204:	ff 90       	pop	r15
    1206:	ef 90       	pop	r14
    1208:	df 90       	pop	r13
    120a:	cf 90       	pop	r12
    120c:	bf 90       	pop	r11
    120e:	af 90       	pop	r10
    1210:	9f 90       	pop	r9
    1212:	8f 90       	pop	r8
    1214:	7f 90       	pop	r7
    1216:	6f 90       	pop	r6
    1218:	5f 90       	pop	r5
    121a:	4f 90       	pop	r4
    121c:	3f 90       	pop	r3
    121e:	2f 90       	pop	r2
    1220:	08 95       	ret
    1222:	2a 30       	cpi	r18, 0x0A	; 10
						}
					}

					if (CurrReportIDInfo == NULL)
					{
						if (ParserData->TotalDeviceReports == HID_MAX_REPORT_IDS)
    1224:	09 f0       	breq	.+2      	; 0x1228 <USB_ProcessHIDReport+0x776>
    1226:	39 ce       	rjmp	.-910    	; 0xe9a <USB_ProcessHIDReport+0x3e8>
    1228:	e1 cf       	rjmp	.-62     	; 0x11ec <USB_ProcessHIDReport+0x73a>

0000122a <USB_Host_ResetDevice>:
			 *  \return Boolean \c true if the bus is currently suspended, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusSuspended(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusSuspended(void)
			{
				return ((UHCON & (1 << SOFEN)) ? false : true);
    122a:	80 91 9e 00 	lds	r24, 0x009E
    122e:	90 e0       	ldi	r25, 0x00	; 0
    1230:	81 70       	andi	r24, 0x01	; 1
    1232:	90 70       	andi	r25, 0x00	; 0
						break;
					case USB_INT_DCONNI:
						UHIEN  &= ~(1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  &= ~(1 << DDISCE);
    1234:	20 91 a0 00 	lds	r18, 0x00A0
    1238:	2d 7f       	andi	r18, 0xFD	; 253
    123a:	20 93 a0 00 	sts	0x00A0, r18
			 *  woken up automatically and the bus resumed after the reset has been correctly issued.
			 */
			static inline void USB_Host_ResetBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResetBus(void)
			{
				UHCON |=  (1 << RESET);
    123e:	20 91 9e 00 	lds	r18, 0x009E
    1242:	22 60       	ori	r18, 0x02	; 2
    1244:	20 93 9e 00 	sts	0x009E, r18
			 *  \return Boolean \c true if no bus reset is currently being sent, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusResetComplete(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusResetComplete(void)
			{
				return ((UHCON & (1 << RESET)) ? false : true);
    1248:	20 91 9e 00 	lds	r18, 0x009E
	bool BusSuspended = USB_Host_IsBusSuspended();

	USB_INT_Disable(USB_INT_DDISCI);

	USB_Host_ResetBus();
	while (!(USB_Host_IsBusResetComplete()));
    124c:	21 fd       	sbrc	r18, 1
    124e:	fc cf       	rjmp	.-8      	; 0x1248 <USB_Host_ResetDevice+0x1e>
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
    1250:	20 91 9e 00 	lds	r18, 0x009E
    1254:	21 60       	ori	r18, 0x01	; 1
    1256:	20 93 9e 00 	sts	0x009E, r18
	USB_Host_ResumeBus();

	USB_Host_ConfigurationNumber = 0;
    125a:	10 92 2c 05 	sts	0x052C, r1
					case USB_INT_RXSTPI:
						return (UEIENX & (1 << RXSTPE));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
    125e:	20 91 a0 00 	lds	r18, 0x00A0
    1262:	30 e0       	ldi	r19, 0x00	; 0
    1264:	20 72       	andi	r18, 0x20	; 32
    1266:	30 70       	andi	r19, 0x00	; 0
						UEIENX &= ~(1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  &= ~(1 << HSOFE);
    1268:	40 91 a0 00 	lds	r20, 0x00A0
    126c:	4f 7d       	andi	r20, 0xDF	; 223
    126e:	40 93 a0 00 	sts	0x00A0, r20
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
    1272:	40 91 9f 00 	lds	r20, 0x009F
    1276:	4f 7d       	andi	r20, 0xDF	; 223
    1278:	40 93 9f 00 	sts	0x009F, r20
    127c:	4a e0       	ldi	r20, 0x0A	; 10
					case USB_INT_RXSTPI:
						return (UEINTX & (1 << RXSTPI));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
    127e:	50 91 9f 00 	lds	r21, 0x009F
		/* Workaround for powerless-pull-up devices. After a USB bus reset,
		   all disconnection interrupts are suppressed while a USB frame is
		   looked for - if it is found within 10ms, the device is still
		   present.                                                        */

		if (USB_INT_HasOccurred(USB_INT_HSOFI))
    1282:	55 ff       	sbrs	r21, 5
    1284:	0b c0       	rjmp	.+22     	; 0x129c <USB_Host_ResetDevice+0x72>
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
    1286:	40 91 9f 00 	lds	r20, 0x009F
    128a:	4f 7d       	andi	r20, 0xDF	; 223
    128c:	40 93 9f 00 	sts	0x009F, r20
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
						break;
					case USB_INT_DDISCI:
						UHINT  &= ~(1 << DDISCI);
    1290:	40 91 9f 00 	lds	r20, 0x009F
    1294:	4d 7f       	andi	r20, 0xFD	; 253
    1296:	40 93 9f 00 	sts	0x009F, r20
    129a:	08 c0       	rjmp	.+16     	; 0x12ac <USB_Host_ResetDevice+0x82>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    129c:	ef ec       	ldi	r30, 0xCF	; 207
    129e:	f7 e0       	ldi	r31, 0x07	; 7
    12a0:	31 97       	sbiw	r30, 0x01	; 1
    12a2:	f1 f7       	brne	.-4      	; 0x12a0 <USB_Host_ResetDevice+0x76>
    12a4:	00 c0       	rjmp	.+0      	; 0x12a6 <USB_Host_ResetDevice+0x7c>
    12a6:	00 00       	nop
    12a8:	41 50       	subi	r20, 0x01	; 1
	bool HSOFIEnabled = USB_INT_IsEnabled(USB_INT_HSOFI);

	USB_INT_Disable(USB_INT_HSOFI);
	USB_INT_Clear(USB_INT_HSOFI);

	for (uint8_t MSRem = 10; MSRem != 0; MSRem--)
    12aa:	49 f7       	brne	.-46     	; 0x127e <USB_Host_ResetDevice+0x54>
		}

		Delay_MS(1);
	}

	if (HSOFIEnabled)
    12ac:	21 15       	cp	r18, r1
    12ae:	31 05       	cpc	r19, r1
    12b0:	29 f0       	breq	.+10     	; 0x12bc <USB_Host_ResetDevice+0x92>
						UEIENX |= (1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  |= (1 << HSOFE);
    12b2:	20 91 a0 00 	lds	r18, 0x00A0
    12b6:	20 62       	ori	r18, 0x20	; 32
    12b8:	20 93 a0 00 	sts	0x00A0, r18
	  USB_INT_Enable(USB_INT_HSOFI);

	if (BusSuspended)
    12bc:	00 97       	sbiw	r24, 0x00	; 0
    12be:	29 f4       	brne	.+10     	; 0x12ca <USB_Host_ResetDevice+0xa0>
			 *             some events (such as device disconnections) will not fire until the bus is resumed.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				UHCON &= ~(1 << SOFEN);
    12c0:	80 91 9e 00 	lds	r24, 0x009E
    12c4:	8e 7f       	andi	r24, 0xFE	; 254
    12c6:	80 93 9e 00 	sts	0x009E, r24
						break;
					case USB_INT_DCONNI:
						UHIEN  |= (1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  |= (1 << DDISCE);
    12ca:	80 91 a0 00 	lds	r24, 0x00A0
    12ce:	82 60       	ori	r24, 0x02	; 2
    12d0:	80 93 a0 00 	sts	0x00A0, r24
	  USB_Host_SuspendBus();

	USB_INT_Enable(USB_INT_DDISCI);
}
    12d4:	08 95       	ret

000012d6 <USB_Host_WaitMS>:
			 *  \return Boolean \c true if the bus is currently suspended, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusSuspended(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusSuspended(void)
			{
				return ((UHCON & (1 << SOFEN)) ? false : true);
    12d6:	40 91 9e 00 	lds	r20, 0x009E
    12da:	50 e0       	ldi	r21, 0x00	; 0
    12dc:	41 70       	andi	r20, 0x01	; 1
    12de:	50 70       	andi	r21, 0x00	; 0
					case USB_INT_RXSTPI:
						return (UEIENX & (1 << RXSTPE));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
    12e0:	20 91 a0 00 	lds	r18, 0x00A0
    12e4:	30 e0       	ldi	r19, 0x00	; 0
    12e6:	20 72       	andi	r18, 0x20	; 32
    12e8:	30 70       	andi	r19, 0x00	; 0
						UEIENX &= ~(1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  &= ~(1 << HSOFE);
    12ea:	90 91 a0 00 	lds	r25, 0x00A0
    12ee:	9f 7d       	andi	r25, 0xDF	; 223
    12f0:	90 93 a0 00 	sts	0x00A0, r25
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
    12f4:	90 91 9f 00 	lds	r25, 0x009F
    12f8:	9f 7d       	andi	r25, 0xDF	; 223
    12fa:	90 93 9f 00 	sts	0x009F, r25
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
    12fe:	90 91 9e 00 	lds	r25, 0x009E
    1302:	91 60       	ori	r25, 0x01	; 1
    1304:	90 93 9e 00 	sts	0x009E, r25
    1308:	26 c0       	rjmp	.+76     	; 0x1356 <USB_Host_WaitMS+0x80>
					case USB_INT_RXSTPI:
						return (UEINTX & (1 << RXSTPI));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
    130a:	90 91 9f 00 	lds	r25, 0x009F

	USB_Host_ResumeBus();

	while (MS)
	{
		if (USB_INT_HasOccurred(USB_INT_HSOFI))
    130e:	95 ff       	sbrs	r25, 5
    1310:	06 c0       	rjmp	.+12     	; 0x131e <USB_Host_WaitMS+0x48>
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
    1312:	90 91 9f 00 	lds	r25, 0x009F
    1316:	9f 7d       	andi	r25, 0xDF	; 223
    1318:	90 93 9f 00 	sts	0x009F, r25
		{
			USB_INT_Clear(USB_INT_HSOFI);
			MS--;
    131c:	81 50       	subi	r24, 0x01	; 1
		}

		if ((USB_HostState == HOST_STATE_Unattached) || (USB_CurrentMode != USB_MODE_Host))
    131e:	90 91 36 05 	lds	r25, 0x0536
    1322:	91 30       	cpi	r25, 0x01	; 1
    1324:	d9 f0       	breq	.+54     	; 0x135c <USB_Host_WaitMS+0x86>
			 *  \return Boolean \c true if an error has occurred on the selected pipe, \c false otherwise.
			 */
			static inline bool Pipe_IsError(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsError(void)
			{
				return ((UPINTX & (1 << PERRI)) ? true : false);
    1326:	90 91 a6 00 	lds	r25, 0x00A6
			ErrorCode = HOST_WAITERROR_DeviceDisconnect;

			break;
		}

		if (Pipe_IsError())
    132a:	94 ff       	sbrs	r25, 4
    132c:	09 c0       	rjmp	.+18     	; 0x1340 <USB_Host_WaitMS+0x6a>

			/** Clears the error flags for the currently selected pipe. */
			static inline void Pipe_ClearError(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearError(void)
			{
				UPERRX = 0;
    132e:	10 92 f5 00 	sts	0x00F5, r1
				UPINTX &= ~(1 << PERRI);
    1332:	80 91 a6 00 	lds	r24, 0x00A6
    1336:	8f 7e       	andi	r24, 0xEF	; 239
    1338:	80 93 a6 00 	sts	0x00A6, r24
		{
			Pipe_ClearError();
			ErrorCode = HOST_WAITERROR_PipeError;
    133c:	82 e0       	ldi	r24, 0x02	; 2

			break;
    133e:	0f c0       	rjmp	.+30     	; 0x135e <USB_Host_WaitMS+0x88>
			 *  \return Boolean \c true if the current pipe has been stalled by the attached device, \c false otherwise.
			 */
			static inline bool Pipe_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsStalled(void)
			{
				return ((UPINTX & (1 << RXSTALLI)) ? true : false);
    1340:	90 91 a6 00 	lds	r25, 0x00A6
		}

		if (Pipe_IsStalled())
    1344:	91 ff       	sbrs	r25, 1
    1346:	07 c0       	rjmp	.+14     	; 0x1356 <USB_Host_WaitMS+0x80>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearStall(void)
			{
				UPINTX &= ~(1 << RXSTALLI);
    1348:	80 91 a6 00 	lds	r24, 0x00A6
    134c:	8d 7f       	andi	r24, 0xFD	; 253
    134e:	80 93 a6 00 	sts	0x00A6, r24
		{
			Pipe_ClearStall();
			ErrorCode = HOST_WAITERROR_SetupStalled;
    1352:	83 e0       	ldi	r24, 0x03	; 3

			break;
    1354:	04 c0       	rjmp	.+8      	; 0x135e <USB_Host_WaitMS+0x88>
	USB_INT_Disable(USB_INT_HSOFI);
	USB_INT_Clear(USB_INT_HSOFI);

	USB_Host_ResumeBus();

	while (MS)
    1356:	88 23       	and	r24, r24
    1358:	c1 f6       	brne	.-80     	; 0x130a <USB_Host_WaitMS+0x34>
    135a:	01 c0       	rjmp	.+2      	; 0x135e <USB_Host_WaitMS+0x88>
			MS--;
		}

		if ((USB_HostState == HOST_STATE_Unattached) || (USB_CurrentMode != USB_MODE_Host))
		{
			ErrorCode = HOST_WAITERROR_DeviceDisconnect;
    135c:	81 e0       	ldi	r24, 0x01	; 1

			break;
		}
	}

	if (BusSuspended)
    135e:	41 15       	cp	r20, r1
    1360:	51 05       	cpc	r21, r1
    1362:	29 f4       	brne	.+10     	; 0x136e <USB_Host_WaitMS+0x98>
			 *             some events (such as device disconnections) will not fire until the bus is resumed.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				UHCON &= ~(1 << SOFEN);
    1364:	90 91 9e 00 	lds	r25, 0x009E
    1368:	9e 7f       	andi	r25, 0xFE	; 254
    136a:	90 93 9e 00 	sts	0x009E, r25
	  USB_Host_SuspendBus();

	if (HSOFIEnabled)
    136e:	21 15       	cp	r18, r1
    1370:	31 05       	cpc	r19, r1
    1372:	29 f0       	breq	.+10     	; 0x137e <USB_Host_WaitMS+0xa8>
						UEIENX |= (1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  |= (1 << HSOFE);
    1374:	90 91 a0 00 	lds	r25, 0x00A0
    1378:	90 62       	ori	r25, 0x20	; 32
    137a:	90 93 a0 00 	sts	0x00A0, r25
	  USB_INT_Enable(USB_INT_HSOFI);

	return ErrorCode;
}
    137e:	08 95       	ret

00001380 <USB_Host_ProcessNextHostState>:

#define  __INCLUDE_FROM_HOST_C
#include "../Host.h"

void USB_Host_ProcessNextHostState(void)
{
    1380:	0f 93       	push	r16
    1382:	1f 93       	push	r17
    1384:	cf 93       	push	r28
    1386:	df 93       	push	r29
    1388:	cd b7       	in	r28, 0x3d	; 61
    138a:	de b7       	in	r29, 0x3e	; 62
    138c:	28 97       	sbiw	r28, 0x08	; 8
    138e:	0f b6       	in	r0, 0x3f	; 63
    1390:	f8 94       	cli
    1392:	de bf       	out	0x3e, r29	; 62
    1394:	0f be       	out	0x3f, r0	; 63
    1396:	cd bf       	out	0x3d, r28	; 61
	uint8_t SubErrorCode = HOST_ENUMERROR_NoError;

	static uint16_t WaitMSRemaining;
	static uint8_t  PostWaitState;

	switch (USB_HostState)
    1398:	80 91 36 05 	lds	r24, 0x0536
    139c:	85 30       	cpi	r24, 0x05	; 5
    139e:	09 f4       	brne	.+2      	; 0x13a2 <USB_Host_ProcessNextHostState+0x22>
    13a0:	99 c0       	rjmp	.+306    	; 0x14d4 <USB_Host_ProcessNextHostState+0x154>
    13a2:	86 30       	cpi	r24, 0x06	; 6
    13a4:	68 f4       	brcc	.+26     	; 0x13c0 <USB_Host_ProcessNextHostState+0x40>
    13a6:	82 30       	cpi	r24, 0x02	; 2
    13a8:	c1 f1       	breq	.+112    	; 0x141a <USB_Host_ProcessNextHostState+0x9a>
    13aa:	83 30       	cpi	r24, 0x03	; 3
    13ac:	18 f4       	brcc	.+6      	; 0x13b4 <USB_Host_ProcessNextHostState+0x34>
    13ae:	88 23       	and	r24, r24
    13b0:	a1 f0       	breq	.+40     	; 0x13da <USB_Host_ProcessNextHostState+0x5a>
    13b2:	04 c1       	rjmp	.+520    	; 0x15bc <USB_Host_ProcessNextHostState+0x23c>
    13b4:	83 30       	cpi	r24, 0x03	; 3
    13b6:	d9 f1       	breq	.+118    	; 0x142e <USB_Host_ProcessNextHostState+0xae>
    13b8:	84 30       	cpi	r24, 0x04	; 4
    13ba:	09 f0       	breq	.+2      	; 0x13be <USB_Host_ProcessNextHostState+0x3e>
    13bc:	ff c0       	rjmp	.+510    	; 0x15bc <USB_Host_ProcessNextHostState+0x23c>
    13be:	62 c0       	rjmp	.+196    	; 0x1484 <USB_Host_ProcessNextHostState+0x104>
    13c0:	87 30       	cpi	r24, 0x07	; 7
    13c2:	09 f4       	brne	.+2      	; 0x13c6 <USB_Host_ProcessNextHostState+0x46>
    13c4:	9e c0       	rjmp	.+316    	; 0x1502 <USB_Host_ProcessNextHostState+0x182>
    13c6:	87 30       	cpi	r24, 0x07	; 7
    13c8:	08 f4       	brcc	.+2      	; 0x13cc <USB_Host_ProcessNextHostState+0x4c>
    13ca:	8f c0       	rjmp	.+286    	; 0x14ea <USB_Host_ProcessNextHostState+0x16a>
    13cc:	88 30       	cpi	r24, 0x08	; 8
    13ce:	09 f4       	brne	.+2      	; 0x13d2 <USB_Host_ProcessNextHostState+0x52>
    13d0:	b8 c0       	rjmp	.+368    	; 0x1542 <USB_Host_ProcessNextHostState+0x1c2>
    13d2:	89 30       	cpi	r24, 0x09	; 9
    13d4:	09 f0       	breq	.+2      	; 0x13d8 <USB_Host_ProcessNextHostState+0x58>
    13d6:	f2 c0       	rjmp	.+484    	; 0x15bc <USB_Host_ProcessNextHostState+0x23c>
    13d8:	d9 c0       	rjmp	.+434    	; 0x158c <USB_Host_ProcessNextHostState+0x20c>
	{
		case HOST_STATE_WaitForDevice:
			if (WaitMSRemaining)
    13da:	00 91 29 05 	lds	r16, 0x0529
    13de:	10 91 2a 05 	lds	r17, 0x052A
    13e2:	01 15       	cp	r16, r1
    13e4:	11 05       	cpc	r17, r1
    13e6:	09 f4       	brne	.+2      	; 0x13ea <USB_Host_ProcessNextHostState+0x6a>
    13e8:	e9 c0       	rjmp	.+466    	; 0x15bc <USB_Host_ProcessNextHostState+0x23c>
			{
				if ((SubErrorCode = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
    13ea:	81 e0       	ldi	r24, 0x01	; 1
    13ec:	74 df       	rcall	.-280    	; 0x12d6 <USB_Host_WaitMS>
    13ee:	68 2f       	mov	r22, r24
    13f0:	88 23       	and	r24, r24
    13f2:	31 f0       	breq	.+12     	; 0x1400 <USB_Host_ProcessNextHostState+0x80>
    13f4:	80 91 2b 05 	lds	r24, 0x052B
				{
					USB_HostState = PostWaitState;
    13f8:	80 93 36 05 	sts	0x0536, r24
    13fc:	81 e0       	ldi	r24, 0x01	; 1
					ErrorCode     = HOST_ENUMERROR_WaitStage;
    13fe:	d2 c0       	rjmp	.+420    	; 0x15a4 <USB_Host_ProcessNextHostState+0x224>
					break;
    1400:	01 50       	subi	r16, 0x01	; 1
				}

				if (!(--WaitMSRemaining))
    1402:	10 40       	sbci	r17, 0x00	; 0
    1404:	10 93 2a 05 	sts	0x052A, r17
    1408:	00 93 29 05 	sts	0x0529, r16
    140c:	01 15       	cp	r16, r1
    140e:	11 05       	cpc	r17, r1
    1410:	09 f0       	breq	.+2      	; 0x1414 <USB_Host_ProcessNextHostState+0x94>
    1412:	d4 c0       	rjmp	.+424    	; 0x15bc <USB_Host_ProcessNextHostState+0x23c>
    1414:	80 91 2b 05 	lds	r24, 0x052B
				  USB_HostState = PostWaitState;
    1418:	07 c0       	rjmp	.+14     	; 0x1428 <USB_Host_ProcessNextHostState+0xa8>
    141a:	88 ee       	ldi	r24, 0xE8	; 232
			}

			break;
		case HOST_STATE_Powered:
			WaitMSRemaining = HOST_DEVICE_SETTLE_DELAY_MS;
    141c:	93 e0       	ldi	r25, 0x03	; 3
    141e:	90 93 2a 05 	sts	0x052A, r25
    1422:	80 93 29 05 	sts	0x0529, r24
    1426:	83 e0       	ldi	r24, 0x03	; 3

			USB_HostState = HOST_STATE_Powered_WaitForDeviceSettle;
    1428:	80 93 36 05 	sts	0x0536, r24
    142c:	c7 c0       	rjmp	.+398    	; 0x15bc <USB_Host_ProcessNextHostState+0x23c>
			break;
    142e:	80 91 29 05 	lds	r24, 0x0529
		case HOST_STATE_Powered_WaitForDeviceSettle:
			if (WaitMSRemaining--)
    1432:	90 91 2a 05 	lds	r25, 0x052A
    1436:	9c 01       	movw	r18, r24
    1438:	21 50       	subi	r18, 0x01	; 1
    143a:	30 40       	sbci	r19, 0x00	; 0
    143c:	30 93 2a 05 	sts	0x052A, r19
    1440:	20 93 29 05 	sts	0x0529, r18
    1444:	00 97       	sbiw	r24, 0x00	; 0
    1446:	39 f0       	breq	.+14     	; 0x1456 <USB_Host_ProcessNextHostState+0xd6>
    1448:	8f ec       	ldi	r24, 0xCF	; 207
    144a:	97 e0       	ldi	r25, 0x07	; 7
    144c:	01 97       	sbiw	r24, 0x01	; 1
    144e:	f1 f7       	brne	.-4      	; 0x144c <USB_Host_ProcessNextHostState+0xcc>
    1450:	00 c0       	rjmp	.+0      	; 0x1452 <USB_Host_ProcessNextHostState+0xd2>
    1452:	00 00       	nop
    1454:	b3 c0       	rjmp	.+358    	; 0x15bc <USB_Host_ProcessNextHostState+0x23c>
    1456:	77 98       	cbi	0x0e, 7	; 14
			static inline void USB_Host_VBUS_Manual_Off(void)
			{
				#if defined(INVERTED_VBUS_ENABLE_LINE)
				PORTE  |=  (1 << 7);
				#else
				PORTE  &= ~(1 << 7);
    1458:	80 91 d8 00 	lds	r24, 0x00D8

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON |=  (1 << OTGPADE);
    145c:	80 61       	ori	r24, 0x10	; 16
    145e:	80 93 d8 00 	sts	0x00D8, r24
    1462:	80 91 dd 00 	lds	r24, 0x00DD
			}

			static inline void USB_Host_VBUS_Auto_Enable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Enable(void)
			{
				OTGCON &= ~(1 << VBUSHWC);
    1466:	8b 7f       	andi	r24, 0xFB	; 251
    1468:	80 93 dd 00 	sts	0x00DD, r24
    146c:	80 91 d7 00 	lds	r24, 0x00D7
				UHWCON |=  (1 << UVCONE);
    1470:	80 61       	ori	r24, 0x10	; 16
    1472:	80 93 d7 00 	sts	0x00D7, r24
    1476:	80 91 dd 00 	lds	r24, 0x00DD
			}

			static inline void USB_Host_VBUS_Auto_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_On(void)
			{
				OTGCON |=  (1 << VBUSREQ);
    147a:	82 60       	ori	r24, 0x02	; 2
    147c:	80 93 dd 00 	sts	0x00DD, r24
    1480:	84 e0       	ldi	r24, 0x04	; 4
				#if defined(NO_AUTO_VBUS_MANAGEMENT)
				USB_Host_VBUS_Manual_Enable();
				USB_Host_VBUS_Manual_On();
				#endif

				USB_HostState = HOST_STATE_Powered_WaitForConnect;
    1482:	d2 cf       	rjmp	.-92     	; 0x1428 <USB_Host_ProcessNextHostState+0xa8>
    1484:	80 91 9f 00 	lds	r24, 0x009F
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
					case USB_INT_DCONNI:
						return (UHINT  & (1 << DCONNI));
    1488:	80 ff       	sbrs	r24, 0
			}

			break;
		case HOST_STATE_Powered_WaitForConnect:
			if (USB_INT_HasOccurred(USB_INT_DCONNI))
    148a:	98 c0       	rjmp	.+304    	; 0x15bc <USB_Host_ProcessNextHostState+0x23c>
    148c:	80 91 9f 00 	lds	r24, 0x009F
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
    1490:	8e 7f       	andi	r24, 0xFE	; 254
    1492:	80 93 9f 00 	sts	0x009F, r24
    1496:	80 91 9f 00 	lds	r24, 0x009F
						break;
					case USB_INT_DDISCI:
						UHINT  &= ~(1 << DDISCI);
    149a:	8d 7f       	andi	r24, 0xFD	; 253
    149c:	80 93 9f 00 	sts	0x009F, r24
    14a0:	80 91 df 00 	lds	r24, 0x00DF
						break;
					case USB_INT_BCERRI:
						OTGINT &= ~(1 << BCERRI);
						break;
					case USB_INT_VBERRI:
						OTGINT &= ~(1 << VBERRI);
    14a4:	8d 7f       	andi	r24, 0xFD	; 253
    14a6:	80 93 df 00 	sts	0x00DF, r24
    14aa:	80 91 de 00 	lds	r24, 0x00DE
						break;
					case USB_INT_BCERRI:
						OTGIEN |= (1 << BCERRE);
						break;
					case USB_INT_VBERRI:
						OTGIEN |= (1 << VBERRE);
    14ae:	82 60       	ori	r24, 0x02	; 2
    14b0:	80 93 de 00 	sts	0x00DE, r24
    14b4:	80 91 9e 00 	lds	r24, 0x009E
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
    14b8:	81 60       	ori	r24, 0x01	; 1
    14ba:	80 93 9e 00 	sts	0x009E, r24
    14be:	0f d1       	rcall	.+542    	; 0x16de <Pipe_ClearPipes>

				USB_INT_Clear(USB_INT_VBERRI);
				USB_INT_Enable(USB_INT_VBERRI);

				USB_Host_ResumeBus();
				Pipe_ClearPipes();
    14c0:	10 92 36 05 	sts	0x0536, r1

				HOST_TASK_NONBLOCK_WAIT(100, HOST_STATE_Powered_DoReset);
    14c4:	84 e6       	ldi	r24, 0x64	; 100
    14c6:	90 e0       	ldi	r25, 0x00	; 0
    14c8:	90 93 2a 05 	sts	0x052A, r25
    14cc:	80 93 29 05 	sts	0x0529, r24
    14d0:	85 e0       	ldi	r24, 0x05	; 5
    14d2:	59 c0       	rjmp	.+178    	; 0x1586 <USB_Host_ProcessNextHostState+0x206>
    14d4:	aa de       	rcall	.-684    	; 0x122a <USB_Host_ResetDevice>
    14d6:	10 92 36 05 	sts	0x0536, r1
			}

			break;
		case HOST_STATE_Powered_DoReset:
			USB_Host_ResetDevice();
    14da:	88 ec       	ldi	r24, 0xC8	; 200

			HOST_TASK_NONBLOCK_WAIT(200, HOST_STATE_Powered_ConfigPipe);
    14dc:	90 e0       	ldi	r25, 0x00	; 0
    14de:	90 93 2a 05 	sts	0x052A, r25
    14e2:	80 93 29 05 	sts	0x0529, r24
    14e6:	86 e0       	ldi	r24, 0x06	; 6
    14e8:	4e c0       	rjmp	.+156    	; 0x1586 <USB_Host_ProcessNextHostState+0x206>
    14ea:	80 e0       	ldi	r24, 0x00	; 0
    14ec:	60 e0       	ldi	r22, 0x00	; 0
    14ee:	40 e0       	ldi	r20, 0x00	; 0
			break;
		case HOST_STATE_Powered_ConfigPipe:
			if (!(Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL, ENDPOINT_CONTROLEP, PIPE_CONTROLPIPE_DEFAULT_SIZE, 1)))
    14f0:	20 e4       	ldi	r18, 0x40	; 64
    14f2:	30 e0       	ldi	r19, 0x00	; 0
    14f4:	01 e0       	ldi	r16, 0x01	; 1
    14f6:	6d d0       	rcall	.+218    	; 0x15d2 <Pipe_ConfigurePipe>
    14f8:	88 23       	and	r24, r24
    14fa:	09 f4       	brne	.+2      	; 0x14fe <USB_Host_ProcessNextHostState+0x17e>
    14fc:	4f c0       	rjmp	.+158    	; 0x159c <USB_Host_ProcessNextHostState+0x21c>
    14fe:	87 e0       	ldi	r24, 0x07	; 7
    1500:	93 cf       	rjmp	.-218    	; 0x1428 <USB_Host_ProcessNextHostState+0xa8>
    1502:	ae e2       	ldi	r26, 0x2E	; 46
    1504:	b5 e0       	ldi	r27, 0x05	; 5
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
				SubErrorCode = 0;
				break;
			}

			USB_HostState = HOST_STATE_Default;
    1506:	e6 e2       	ldi	r30, 0x26	; 38
    1508:	f1 e0       	ldi	r31, 0x01	; 1
			break;
		case HOST_STATE_Default:
			USB_ControlRequest = (USB_Request_Header_t)
    150a:	88 e0       	ldi	r24, 0x08	; 8
    150c:	01 90       	ld	r0, Z+
    150e:	0d 92       	st	X+, r0
    1510:	81 50       	subi	r24, 0x01	; 1
    1512:	e1 f7       	brne	.-8      	; 0x150c <USB_Host_ProcessNextHostState+0x18c>
    1514:	10 92 a7 00 	sts	0x00A7, r1
    1518:	ce 01       	movw	r24, r28
    151a:	01 96       	adiw	r24, 0x01	; 1
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
    151c:	f3 d2       	rcall	.+1510   	; 0x1b04 <USB_Host_SendControlRequest>
    151e:	68 2f       	mov	r22, r24
				};

			uint8_t DataBuffer[8];

			Pipe_SelectPipe(PIPE_CONTROLPIPE);
			if ((SubErrorCode = USB_Host_SendControlRequest(DataBuffer)) != HOST_SENDCONTROL_Successful)
    1520:	88 23       	and	r24, r24
    1522:	09 f0       	breq	.+2      	; 0x1526 <USB_Host_ProcessNextHostState+0x1a6>
    1524:	3e c0       	rjmp	.+124    	; 0x15a2 <USB_Host_ProcessNextHostState+0x222>
    1526:	88 85       	ldd	r24, Y+8	; 0x08
    1528:	80 93 36 01 	sts	0x0136, r24
    152c:	7e de       	rcall	.-772    	; 0x122a <USB_Host_ResetDevice>
    152e:	10 92 36 05 	sts	0x0536, r1
			{
				ErrorCode = HOST_ENUMERROR_ControlError;
				break;
			}

			USB_Host_ControlPipeSize = DataBuffer[offsetof(USB_Descriptor_Device_t, Endpoint0Size)];
    1532:	88 ec       	ldi	r24, 0xC8	; 200
    1534:	90 e0       	ldi	r25, 0x00	; 0

			USB_Host_ResetDevice();
    1536:	90 93 2a 05 	sts	0x052A, r25

			HOST_TASK_NONBLOCK_WAIT(200, HOST_STATE_Default_PostReset);
    153a:	80 93 29 05 	sts	0x0529, r24
    153e:	88 e0       	ldi	r24, 0x08	; 8
    1540:	22 c0       	rjmp	.+68     	; 0x1586 <USB_Host_ProcessNextHostState+0x206>
    1542:	20 91 36 01 	lds	r18, 0x0136
    1546:	80 e0       	ldi	r24, 0x00	; 0
    1548:	60 e0       	ldi	r22, 0x00	; 0
    154a:	40 e0       	ldi	r20, 0x00	; 0
    154c:	30 e0       	ldi	r19, 0x00	; 0
			break;
		case HOST_STATE_Default_PostReset:
			if (!(Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL, ENDPOINT_CONTROLEP, USB_Host_ControlPipeSize, 1)))
    154e:	01 e0       	ldi	r16, 0x01	; 1
    1550:	40 d0       	rcall	.+128    	; 0x15d2 <Pipe_ConfigurePipe>
    1552:	88 23       	and	r24, r24
    1554:	19 f1       	breq	.+70     	; 0x159c <USB_Host_ProcessNextHostState+0x21c>
    1556:	ae e2       	ldi	r26, 0x2E	; 46
    1558:	b5 e0       	ldi	r27, 0x05	; 5
    155a:	ee e2       	ldi	r30, 0x2E	; 46
    155c:	f1 e0       	ldi	r31, 0x01	; 1
    155e:	88 e0       	ldi	r24, 0x08	; 8
    1560:	01 90       	ld	r0, Z+
    1562:	0d 92       	st	X+, r0
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
				SubErrorCode = 0;
				break;
			}

			USB_ControlRequest = (USB_Request_Header_t)
    1564:	81 50       	subi	r24, 0x01	; 1
    1566:	e1 f7       	brne	.-8      	; 0x1560 <USB_Host_ProcessNextHostState+0x1e0>
    1568:	80 e0       	ldi	r24, 0x00	; 0
    156a:	90 e0       	ldi	r25, 0x00	; 0
    156c:	cb d2       	rcall	.+1430   	; 0x1b04 <USB_Host_SendControlRequest>
    156e:	68 2f       	mov	r22, r24
    1570:	88 23       	and	r24, r24
    1572:	b9 f4       	brne	.+46     	; 0x15a2 <USB_Host_ProcessNextHostState+0x222>
    1574:	10 92 36 05 	sts	0x0536, r1
					.wValue        = USB_HOST_DEVICEADDRESS,
					.wIndex        = 0,
					.wLength       = 0,
				};

			if ((SubErrorCode = USB_Host_SendControlRequest(NULL)) != HOST_SENDCONTROL_Successful)
    1578:	84 e6       	ldi	r24, 0x64	; 100
    157a:	90 e0       	ldi	r25, 0x00	; 0
    157c:	90 93 2a 05 	sts	0x052A, r25
    1580:	80 93 29 05 	sts	0x0529, r24
			{
				ErrorCode = HOST_ENUMERROR_ControlError;
				break;
			}

			HOST_TASK_NONBLOCK_WAIT(100, HOST_STATE_Default_PostAddressSet);
    1584:	89 e0       	ldi	r24, 0x09	; 9
    1586:	80 93 2b 05 	sts	0x052B, r24
    158a:	18 c0       	rjmp	.+48     	; 0x15bc <USB_Host_ProcessNextHostState+0x23c>
    158c:	81 e0       	ldi	r24, 0x01	; 1
    158e:	80 93 a1 00 	sts	0x00A1, r24
    1592:	8a e0       	ldi	r24, 0x0A	; 10
    1594:	80 93 36 05 	sts	0x0536, r24
    1598:	ec d9       	rcall	.-3112   	; 0x972 <EVENT_USB_Host_DeviceEnumerationComplete>
			break;
    159a:	10 c0       	rjmp	.+32     	; 0x15bc <USB_Host_ProcessNextHostState+0x23c>
			}

			static inline void USB_Host_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SetDeviceAddress(const uint8_t Address)
			{
				UHADDR  =  (Address & 0x7F);
    159c:	60 e0       	ldi	r22, 0x00	; 0
    159e:	84 e0       	ldi	r24, 0x04	; 4
    15a0:	01 c0       	rjmp	.+2      	; 0x15a4 <USB_Host_ProcessNextHostState+0x224>
		case HOST_STATE_Default_PostAddressSet:
			USB_Host_SetDeviceAddress(USB_HOST_DEVICEADDRESS);

			USB_HostState = HOST_STATE_Addressed;
    15a2:	83 e0       	ldi	r24, 0x03	; 3
    15a4:	90 91 36 05 	lds	r25, 0x0536

			EVENT_USB_Host_DeviceEnumerationComplete();
    15a8:	91 30       	cpi	r25, 0x01	; 1
    15aa:	41 f0       	breq	.+16     	; 0x15bc <USB_Host_ProcessNextHostState+0x23c>
			break;
    15ac:	57 da       	rcall	.-2898   	; 0xa5c <EVENT_USB_Host_DeviceEnumerationFailed>
			break;
		case HOST_STATE_Default_PostReset:
			if (!(Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL, ENDPOINT_CONTROLEP, USB_Host_ControlPipeSize, 1)))
			{
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
				SubErrorCode = 0;
    15ae:	80 91 dd 00 	lds	r24, 0x00DD
			HOST_TASK_NONBLOCK_WAIT(200, HOST_STATE_Default_PostReset);
			break;
		case HOST_STATE_Default_PostReset:
			if (!(Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL, ENDPOINT_CONTROLEP, USB_Host_ControlPipeSize, 1)))
			{
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
    15b2:	81 60       	ori	r24, 0x01	; 1
					.wLength       = 0,
				};

			if ((SubErrorCode = USB_Host_SendControlRequest(NULL)) != HOST_SENDCONTROL_Successful)
			{
				ErrorCode = HOST_ENUMERROR_ControlError;
    15b4:	80 93 dd 00 	sts	0x00DD, r24

		default:
			break;
	}

	if ((ErrorCode != HOST_ENUMERROR_NoError) && (USB_HostState != HOST_STATE_Unattached))
    15b8:	d6 d9       	rcall	.-3156   	; 0x966 <EVENT_USB_Host_DeviceUnattached>
    15ba:	df d0       	rcall	.+446    	; 0x177a <USB_ResetInterface>
    15bc:	28 96       	adiw	r28, 0x08	; 8
	{
		EVENT_USB_Host_DeviceEnumerationFailed(ErrorCode, SubErrorCode);
    15be:	0f b6       	in	r0, 0x3f	; 63
    15c0:	f8 94       	cli
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
    15c2:	de bf       	out	0x3e, r29	; 62
    15c4:	0f be       	out	0x3f, r0	; 63
    15c6:	cd bf       	out	0x3d, r28	; 61
    15c8:	df 91       	pop	r29
    15ca:	cf 91       	pop	r28

		USB_Host_VBUS_Auto_Off();

		EVENT_USB_Host_DeviceUnattached();
    15cc:	1f 91       	pop	r17
    15ce:	0f 91       	pop	r16

		USB_ResetInterface();
    15d0:	08 95       	ret

000015d2 <Pipe_ConfigurePipe>:
bool Pipe_ConfigurePipe(const uint8_t Address,
                        const uint8_t Type,
                        const uint8_t EndpointAddress,
                        const uint16_t Size,
                        const uint8_t Banks)
{
    15d2:	0f 93       	push	r16
	uint8_t Number = (Address & PIPE_EPNUM_MASK);
    15d4:	58 2f       	mov	r21, r24
    15d6:	5f 70       	andi	r21, 0x0F	; 15
	uint8_t Token  = (Address & PIPE_DIR_IN) ? PIPE_TOKEN_IN : PIPE_TOKEN_OUT;
    15d8:	87 ff       	sbrs	r24, 7
    15da:	02 c0       	rjmp	.+4      	; 0x15e0 <Pipe_ConfigurePipe+0xe>
    15dc:	80 e1       	ldi	r24, 0x10	; 16
    15de:	01 c0       	rjmp	.+2      	; 0x15e2 <Pipe_ConfigurePipe+0x10>
    15e0:	80 e2       	ldi	r24, 0x20	; 32
	
	if (Number >= PIPE_TOTAL_PIPES)
    15e2:	57 30       	cpi	r21, 0x07	; 7
    15e4:	08 f0       	brcs	.+2      	; 0x15e8 <Pipe_ConfigurePipe+0x16>
    15e6:	57 c0       	rjmp	.+174    	; 0x1696 <Pipe_ConfigurePipe+0xc4>
	  return false;

	if (Type == EP_TYPE_CONTROL)
    15e8:	66 23       	and	r22, r22
    15ea:	09 f4       	brne	.+2      	; 0x15ee <Pipe_ConfigurePipe+0x1c>
	  Token = PIPE_TOKEN_SETUP;
    15ec:	80 e0       	ldi	r24, 0x00	; 0

		Pipe_SelectPipe(PNum);

		if (PNum == Number)
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointAddress & PIPE_EPNUM_MASK) << PEPNUM0));
    15ee:	4f 70       	andi	r20, 0x0F	; 15
    15f0:	62 95       	swap	r22
    15f2:	66 0f       	add	r22, r22
    15f4:	66 0f       	add	r22, r22
    15f6:	60 7c       	andi	r22, 0xC0	; 192
    15f8:	64 2b       	or	r22, r20
    15fa:	68 2b       	or	r22, r24
    15fc:	45 2f       	mov	r20, r21
			UPCFG1XTemp = ((1 << ALLOC) | Banks | Pipe_BytesToEPSizeMask(Size));
    15fe:	02 60       	ori	r16, 0x02	; 2
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
    1600:	40 93 a7 00 	sts	0x00A7, r20
		uint8_t UPCFG2XTemp;
		uint8_t UPIENXTemp;

		Pipe_SelectPipe(PNum);

		if (PNum == Number)
    1604:	45 17       	cp	r20, r21
    1606:	a9 f4       	brne	.+42     	; 0x1632 <Pipe_ConfigurePipe+0x60>
    1608:	04 c0       	rjmp	.+8      	; 0x1612 <Pipe_ConfigurePipe+0x40>
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while ((CheckBytes < Bytes) && (CheckBytes < PIPE_MAX_SIZE))
				{
					MaskVal++;
    160a:	7f 5f       	subi	r23, 0xFF	; 255
					CheckBytes <<= 1;
    160c:	88 0f       	add	r24, r24
    160e:	99 1f       	adc	r25, r25
    1610:	03 c0       	rjmp	.+6      	; 0x1618 <Pipe_ConfigurePipe+0x46>
    1612:	88 e0       	ldi	r24, 0x08	; 8
    1614:	90 e0       	ldi	r25, 0x00	; 0
    1616:	70 e0       	ldi	r23, 0x00	; 0
			static inline uint8_t Pipe_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while ((CheckBytes < Bytes) && (CheckBytes < PIPE_MAX_SIZE))
    1618:	82 17       	cp	r24, r18
    161a:	93 07       	cpc	r25, r19
    161c:	10 f4       	brcc	.+4      	; 0x1622 <Pipe_ConfigurePipe+0x50>
    161e:	75 30       	cpi	r23, 0x05	; 5
    1620:	a1 f7       	brne	.-24     	; 0x160a <Pipe_ConfigurePipe+0x38>
				{
					MaskVal++;
					CheckBytes <<= 1;
				}

				return (MaskVal << EPSIZE0);
    1622:	87 2f       	mov	r24, r23
    1624:	82 95       	swap	r24
    1626:	80 7f       	andi	r24, 0xF0	; 240
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointAddress & PIPE_EPNUM_MASK) << PEPNUM0));
			UPCFG1XTemp = ((1 << ALLOC) | Banks | Pipe_BytesToEPSizeMask(Size));
    1628:	80 2b       	or	r24, r16

		Pipe_SelectPipe(PNum);

		if (PNum == Number)
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointAddress & PIPE_EPNUM_MASK) << PEPNUM0));
    162a:	f6 2f       	mov	r31, r22
			UPCFG1XTemp = ((1 << ALLOC) | Banks | Pipe_BytesToEPSizeMask(Size));
			UPCFG2XTemp = 0;
			UPIENXTemp  = 0;
    162c:	70 e0       	ldi	r23, 0x00	; 0

		if (PNum == Number)
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointAddress & PIPE_EPNUM_MASK) << PEPNUM0));
			UPCFG1XTemp = ((1 << ALLOC) | Banks | Pipe_BytesToEPSizeMask(Size));
			UPCFG2XTemp = 0;
    162e:	e0 e0       	ldi	r30, 0x00	; 0
    1630:	08 c0       	rjmp	.+16     	; 0x1642 <Pipe_ConfigurePipe+0x70>
			UPIENXTemp  = 0;
		}
		else
		{
			UPCFG0XTemp = UPCFG0X;
    1632:	f0 91 aa 00 	lds	r31, 0x00AA
			UPCFG1XTemp = UPCFG1X;
    1636:	80 91 ab 00 	lds	r24, 0x00AB
			UPCFG2XTemp = UPCFG2X;
    163a:	e0 91 ad 00 	lds	r30, 0x00AD
			UPIENXTemp  = UPIENX;
    163e:	70 91 ae 00 	lds	r23, 0x00AE
		}

		if (!(UPCFG1XTemp & (1 << ALLOC)))
    1642:	81 ff       	sbrs	r24, 1
    1644:	20 c0       	rjmp	.+64     	; 0x1686 <Pipe_ConfigurePipe+0xb4>
			 *  from an attached device.
			 */
			static inline void Pipe_DisablePipe(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_DisablePipe(void)
			{
				UPCONX &= ~(1 << PEN);
    1646:	90 91 a9 00 	lds	r25, 0x00A9
    164a:	9e 7f       	andi	r25, 0xFE	; 254
    164c:	90 93 a9 00 	sts	0x00A9, r25
		  continue;

		Pipe_DisablePipe();
		UPCFG1X &= ~(1 << ALLOC);
    1650:	90 91 ab 00 	lds	r25, 0x00AB
    1654:	9d 7f       	andi	r25, 0xFD	; 253
    1656:	90 93 ab 00 	sts	0x00AB, r25
			 *  \pre The currently selected pipe must first be configured properly via \ref Pipe_ConfigurePipe().
			 */
			static inline void Pipe_EnablePipe(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_EnablePipe(void)
			{
				UPCONX |= (1 << PEN);
    165a:	90 91 a9 00 	lds	r25, 0x00A9
    165e:	91 60       	ori	r25, 0x01	; 1
    1660:	90 93 a9 00 	sts	0x00A9, r25

		Pipe_EnablePipe();
		UPCFG0X = UPCFG0XTemp;
    1664:	f0 93 aa 00 	sts	0x00AA, r31
		UPCFG1X = UPCFG1XTemp;
    1668:	80 93 ab 00 	sts	0x00AB, r24
		UPCFG2X = UPCFG2XTemp;
    166c:	e0 93 ad 00 	sts	0x00AD, r30
		UPIENX  = UPIENXTemp;
    1670:	70 93 ae 00 	sts	0x00AE, r23

			/** Configures the currently selected pipe to allow for an unlimited number of IN requests. */
			static inline void Pipe_SetInfiniteINRequests(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetInfiniteINRequests(void)
			{
				UPCONX |= (1 << INMODE);
    1674:	80 91 a9 00 	lds	r24, 0x00A9
    1678:	80 62       	ori	r24, 0x20	; 32
    167a:	80 93 a9 00 	sts	0x00A9, r24
			 *  \return Boolean \c true if the selected pipe is configured, \c false otherwise.
			 */
			static inline bool Pipe_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsConfigured(void)
			{
				return ((UPSTAX & (1 << CFGOK)) ? true : false);
    167e:	80 91 ac 00 	lds	r24, 0x00AC

		Pipe_SetInfiniteINRequests();

		if (!(Pipe_IsConfigured()))
    1682:	87 ff       	sbrs	r24, 7
    1684:	08 c0       	rjmp	.+16     	; 0x1696 <Pipe_ConfigurePipe+0xc4>

	Pipe_SetInfiniteINRequests();

	return Pipe_IsConfigured();
#else
	for (uint8_t PNum = Number; PNum < PIPE_TOTAL_PIPES; PNum++)
    1686:	4f 5f       	subi	r20, 0xFF	; 255
    1688:	47 30       	cpi	r20, 0x07	; 7
    168a:	09 f0       	breq	.+2      	; 0x168e <Pipe_ConfigurePipe+0xbc>
    168c:	b9 cf       	rjmp	.-142    	; 0x1600 <Pipe_ConfigurePipe+0x2e>
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
    168e:	50 93 a7 00 	sts	0x00A7, r21
		if (!(Pipe_IsConfigured()))
		  return false;
	}

	Pipe_SelectPipe(Number);
	return true;
    1692:	81 e0       	ldi	r24, 0x01	; 1
    1694:	01 c0       	rjmp	.+2      	; 0x1698 <Pipe_ConfigurePipe+0xc6>
		UPIENX  = UPIENXTemp;

		Pipe_SetInfiniteINRequests();

		if (!(Pipe_IsConfigured()))
		  return false;
    1696:	80 e0       	ldi	r24, 0x00	; 0
	}

	Pipe_SelectPipe(Number);
	return true;
#endif
}
    1698:	0f 91       	pop	r16
    169a:	08 95       	ret

0000169c <Pipe_ConfigurePipeTable>:

uint8_t USB_Host_ControlPipeSize = PIPE_CONTROLPIPE_DEFAULT_SIZE;

bool Pipe_ConfigurePipeTable(const USB_Pipe_Table_t* const Table,
                             const uint8_t Entries)
{
    169c:	ff 92       	push	r15
    169e:	0f 93       	push	r16
    16a0:	1f 93       	push	r17
    16a2:	cf 93       	push	r28
    16a4:	df 93       	push	r29
    16a6:	16 2f       	mov	r17, r22
		{
			return false;
		}
	}
	
	return true;
    16a8:	ec 01       	movw	r28, r24
uint8_t USB_Host_ControlPipeSize = PIPE_CONTROLPIPE_DEFAULT_SIZE;

bool Pipe_ConfigurePipeTable(const USB_Pipe_Table_t* const Table,
                             const uint8_t Entries)
{
	for (uint8_t i = 0; i < Entries; i++)
    16aa:	ff 24       	eor	r15, r15
    16ac:	0d c0       	rjmp	.+26     	; 0x16c8 <Pipe_ConfigurePipeTable+0x2c>
	{
		if (!(Table[i].Address))
    16ae:	88 81       	ld	r24, Y
    16b0:	88 23       	and	r24, r24
    16b2:	41 f0       	breq	.+16     	; 0x16c4 <Pipe_ConfigurePipeTable+0x28>
		  continue;
	
		if (!(Pipe_ConfigurePipe(Table[i].Address, Table[i].Type, Table[i].EndpointAddress, Table[i].Size, Table[i].Banks)))
    16b4:	29 81       	ldd	r18, Y+1	; 0x01
    16b6:	3a 81       	ldd	r19, Y+2	; 0x02
    16b8:	6c 81       	ldd	r22, Y+4	; 0x04
    16ba:	4b 81       	ldd	r20, Y+3	; 0x03
    16bc:	0d 81       	ldd	r16, Y+5	; 0x05
    16be:	89 df       	rcall	.-238    	; 0x15d2 <Pipe_ConfigurePipe>
    16c0:	88 23       	and	r24, r24
    16c2:	31 f0       	breq	.+12     	; 0x16d0 <Pipe_ConfigurePipeTable+0x34>
    16c4:	f3 94       	inc	r15
uint8_t USB_Host_ControlPipeSize = PIPE_CONTROLPIPE_DEFAULT_SIZE;

bool Pipe_ConfigurePipeTable(const USB_Pipe_Table_t* const Table,
                             const uint8_t Entries)
{
	for (uint8_t i = 0; i < Entries; i++)
    16c6:	26 96       	adiw	r28, 0x06	; 6
    16c8:	f1 16       	cp	r15, r17
    16ca:	89 f7       	brne	.-30     	; 0x16ae <Pipe_ConfigurePipeTable+0x12>
    16cc:	81 e0       	ldi	r24, 0x01	; 1
		{
			return false;
		}
	}
	
	return true;
    16ce:	01 c0       	rjmp	.+2      	; 0x16d2 <Pipe_ConfigurePipeTable+0x36>
    16d0:	80 e0       	ldi	r24, 0x00	; 0
		if (!(Table[i].Address))
		  continue;
	
		if (!(Pipe_ConfigurePipe(Table[i].Address, Table[i].Type, Table[i].EndpointAddress, Table[i].Size, Table[i].Banks)))
		{
			return false;
    16d2:	df 91       	pop	r29
		}
	}
	
	return true;
}
    16d4:	cf 91       	pop	r28
    16d6:	1f 91       	pop	r17
    16d8:	0f 91       	pop	r16
    16da:	ff 90       	pop	r15
    16dc:	08 95       	ret

000016de <Pipe_ClearPipes>:
    16de:	10 92 f8 00 	sts	0x00F8, r1

void Pipe_ClearPipes(void)
{
	UPINT = 0;

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
    16e2:	80 e0       	ldi	r24, 0x00	; 0
    16e4:	80 93 a7 00 	sts	0x00A7, r24
	{
		Pipe_SelectPipe(PNum);
		UPIENX  = 0;
    16e8:	10 92 ae 00 	sts	0x00AE, r1
		UPINTX  = 0;
    16ec:	10 92 a6 00 	sts	0x00A6, r1
		UPCFG1X = 0;
    16f0:	10 92 ab 00 	sts	0x00AB, r1
			 *  from an attached device.
			 */
			static inline void Pipe_DisablePipe(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_DisablePipe(void)
			{
				UPCONX &= ~(1 << PEN);
    16f4:	90 91 a9 00 	lds	r25, 0x00A9
    16f8:	9e 7f       	andi	r25, 0xFE	; 254
    16fa:	90 93 a9 00 	sts	0x00A9, r25

void Pipe_ClearPipes(void)
{
	UPINT = 0;

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
    16fe:	8f 5f       	subi	r24, 0xFF	; 255
    1700:	87 30       	cpi	r24, 0x07	; 7
    1702:	81 f7       	brne	.-32     	; 0x16e4 <Pipe_ClearPipes+0x6>
		UPIENX  = 0;
		UPINTX  = 0;
		UPCFG1X = 0;
		Pipe_DisablePipe();
	}
}
    1704:	08 95       	ret

00001706 <Pipe_IsEndpointBound>:
			 *  \return Index of the currently selected pipe.
			 */
			static inline uint8_t Pipe_GetCurrentPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetCurrentPipe(void)
			{
				return ((UPNUM & PIPE_PIPENUM_MASK) | Pipe_GetPipeDirection());
    1706:	40 91 a7 00 	lds	r20, 0x00A7
			 *  \return The currently selected pipe's direction, as a \c PIPE_DIR_* mask.
			 */
			static inline uint8_t Pipe_GetPipeDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetPipeDirection(void)
			{
				return (UPCFG0X & (1 << EPDIR)) ? PIPE_DIR_IN : PIPE_DIR_OUT;
    170a:	90 91 aa 00 	lds	r25, 0x00AA

bool Pipe_IsEndpointBound(const uint8_t EndpointAddress)
{
	uint8_t PrevPipeNumber = Pipe_GetCurrentPipe();

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
    170e:	90 e0       	ldi	r25, 0x00	; 0
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
    1710:	90 93 a7 00 	sts	0x00A7, r25
			 *  \return Boolean \c true if the selected pipe is configured, \c false otherwise.
			 */
			static inline bool Pipe_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsConfigured(void)
			{
				return ((UPSTAX & (1 << CFGOK)) ? true : false);
    1714:	20 91 ac 00 	lds	r18, 0x00AC
	{
		Pipe_SelectPipe(PNum);

		if (!(Pipe_IsConfigured()))
    1718:	27 ff       	sbrs	r18, 7
    171a:	0c c0       	rjmp	.+24     	; 0x1734 <Pipe_IsEndpointBound+0x2e>
			 *  \return Endpoint address the currently selected pipe is bound to.
			 */
			static inline uint8_t Pipe_GetBoundEndpointAddress(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetBoundEndpointAddress(void)
			{
				uint8_t UPCFG0X_Temp = UPCFG0X;
    171c:	30 91 aa 00 	lds	r19, 0x00AA
				
				return (((UPCFG0X_Temp >> PEPNUM0) & PIPE_EPNUM_MASK) | ((UPCFG0X_Temp & PEPNUM1) ? ENDPOINT_DIR_OUT : ENDPOINT_DIR_IN));
    1720:	53 2f       	mov	r21, r19
    1722:	5f 70       	andi	r21, 0x0F	; 15
    1724:	30 ff       	sbrs	r19, 0
    1726:	02 c0       	rjmp	.+4      	; 0x172c <Pipe_IsEndpointBound+0x26>
    1728:	20 e0       	ldi	r18, 0x00	; 0
    172a:	01 c0       	rjmp	.+2      	; 0x172e <Pipe_IsEndpointBound+0x28>
    172c:	20 e8       	ldi	r18, 0x80	; 128
    172e:	25 2b       	or	r18, r21
		  continue;

		if (Pipe_GetBoundEndpointAddress() == EndpointAddress)
    1730:	28 17       	cp	r18, r24
    1732:	49 f0       	breq	.+18     	; 0x1746 <Pipe_IsEndpointBound+0x40>

bool Pipe_IsEndpointBound(const uint8_t EndpointAddress)
{
	uint8_t PrevPipeNumber = Pipe_GetCurrentPipe();

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
    1734:	9f 5f       	subi	r25, 0xFF	; 255
    1736:	97 30       	cpi	r25, 0x07	; 7
    1738:	59 f7       	brne	.-42     	; 0x1710 <Pipe_IsEndpointBound+0xa>
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
    173a:	84 2f       	mov	r24, r20
    173c:	8f 70       	andi	r24, 0x0F	; 15
    173e:	80 93 a7 00 	sts	0x00A7, r24
		if (Pipe_GetBoundEndpointAddress() == EndpointAddress)
		  return true;
	}

	Pipe_SelectPipe(PrevPipeNumber);
	return false;
    1742:	80 e0       	ldi	r24, 0x00	; 0
    1744:	08 95       	ret

		if (!(Pipe_IsConfigured()))
		  continue;

		if (Pipe_GetBoundEndpointAddress() == EndpointAddress)
		  return true;
    1746:	81 e0       	ldi	r24, 0x01	; 1
	}

	Pipe_SelectPipe(PrevPipeNumber);
	return false;
}
    1748:	08 95       	ret

0000174a <USB_Disable>:
	USB_ResetInterface();
}

void USB_Disable(void)
{
	USB_INT_DisableAllInterrupts();
    174a:	75 d0       	rcall	.+234    	; 0x1836 <USB_INT_DisableAllInterrupts>
    174c:	7c d0       	rcall	.+248    	; 0x1846 <USB_INT_ClearAllInterrupts>
	USB_INT_ClearAllInterrupts();
    174e:	e0 ee       	ldi	r30, 0xE0	; 224
    1750:	f0 e0       	ldi	r31, 0x00	; 0
			 *  enumerating the device once attached until \ref USB_Attach() is called.
			 */
			static inline void USB_Detach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Detach(void)
			{
				UDCON  |=  (1 << DETACH);
    1752:	80 81       	ld	r24, Z
    1754:	81 60       	ori	r24, 0x01	; 1
    1756:	80 83       	st	Z, r24
    1758:	e8 ed       	ldi	r30, 0xD8	; 216
    175a:	f0 e0       	ldi	r31, 0x00	; 0
			}

			static inline void USB_Controller_Disable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Disable(void)
			{
				USBCON &= ~(1 << USBE);
    175c:	80 81       	ld	r24, Z
    175e:	8f 77       	andi	r24, 0x7F	; 127
    1760:	80 83       	st	Z, r24
    1762:	19 bc       	out	0x29, r1	; 41
    1764:	a7 ed       	ldi	r26, 0xD7	; 215
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    1766:	b0 e0       	ldi	r27, 0x00	; 0

			static inline void USB_REG_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_Off(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON &= ~(1 << UVREGE);
    1768:	8c 91       	ld	r24, X
    176a:	8e 7f       	andi	r24, 0xFE	; 254
    176c:	8c 93       	st	X, r24
    176e:	80 81       	ld	r24, Z
    1770:	8f 7e       	andi	r24, 0xEF	; 239
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON &= ~(1 << OTGPADE);
    1772:	80 83       	st	Z, r24
    1774:	10 92 2d 05 	sts	0x052D, r1

	#if defined(USB_CAN_BE_BOTH)
	USB_CurrentMode = USB_MODE_None;
	#endif

	USB_IsInitialized = false;
    1778:	08 95       	ret

0000177a <USB_ResetInterface>:
    177a:	5d d0       	rcall	.+186    	; 0x1836 <USB_INT_DisableAllInterrupts>
}
    177c:	64 d0       	rcall	.+200    	; 0x1846 <USB_INT_ClearAllInterrupts>
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
	USB_INT_ClearAllInterrupts();
    177e:	80 91 d8 00 	lds	r24, 0x00D8
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
    1782:	8f 77       	andi	r24, 0x7F	; 127
    1784:	80 93 d8 00 	sts	0x00D8, r24
    1788:	80 91 d8 00 	lds	r24, 0x00D8
				USBCON |=  (1 << USBE);
    178c:	80 68       	ori	r24, 0x80	; 128
    178e:	80 93 d8 00 	sts	0x00D8, r24
    1792:	80 91 d8 00 	lds	r24, 0x00D8
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
    1796:	8f 7d       	andi	r24, 0xDF	; 223
    1798:	80 93 d8 00 	sts	0x00D8, r24
    179c:	80 91 d7 00 	lds	r24, 0x00D7
		#endif
	}
	else if (USB_CurrentMode == USB_MODE_Host)
	{
		#if defined(USB_CAN_BE_HOST)
		UHWCON &= ~(1 << UIMOD);
    17a0:	8f 77       	andi	r24, 0x7F	; 127
    17a2:	80 93 d7 00 	sts	0x00D7, r24
    17a6:	8c e0       	ldi	r24, 0x0C	; 12
    17a8:	89 bd       	out	0x29, r24	; 41

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
    17aa:	8e e0       	ldi	r24, 0x0E	; 14
    17ac:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    17ae:	09 b4       	in	r0, 0x29	; 41
    17b0:	00 fe       	sbrs	r0, 0

		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			#if defined(USB_CAN_BE_HOST)
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
    17b2:	fd cf       	rjmp	.-6      	; 0x17ae <USB_ResetInterface+0x34>
    17b4:	81 e0       	ldi	r24, 0x01	; 1
    17b6:	80 93 36 05 	sts	0x0536, r24
#endif

#if defined(USB_CAN_BE_HOST)
static void USB_Init_Host(void)
{
	USB_HostState                = HOST_STATE_Unattached;
    17ba:	10 92 2c 05 	sts	0x052C, r1
	USB_Host_ConfigurationNumber = 0;
    17be:	80 e4       	ldi	r24, 0x40	; 64
    17c0:	80 93 36 01 	sts	0x0136, r24
	USB_Host_ControlPipeSize     = PIPE_CONTROLPIPE_DEFAULT_SIZE;
    17c4:	80 91 d8 00 	lds	r24, 0x00D8
	#if !defined(__DOXYGEN__)
		/* Macros: */
			static inline void USB_Host_HostMode_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_HostMode_On(void)
			{
				USBCON |=  (1 << HOST);
    17c8:	80 64       	ori	r24, 0x40	; 64
    17ca:	80 93 d8 00 	sts	0x00D8, r24
    17ce:	80 91 dd 00 	lds	r24, 0x00DD
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
    17d2:	81 60       	ori	r24, 0x01	; 1
    17d4:	80 93 dd 00 	sts	0x00DD, r24
    17d8:	80 91 dd 00 	lds	r24, 0x00DD
			}

			static inline void USB_Host_VBUS_Manual_Enable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Manual_Enable(void)
			{
				OTGCON |=  (1 << VBUSHWC);
    17dc:	84 60       	ori	r24, 0x04	; 4
    17de:	80 93 dd 00 	sts	0x00DD, r24
    17e2:	80 91 d7 00 	lds	r24, 0x00D7
				UHWCON &= ~(1 << UVCONE);
    17e6:	8f 7e       	andi	r24, 0xEF	; 239
    17e8:	80 93 d7 00 	sts	0x00D7, r24
    17ec:	6f 9a       	sbi	0x0d, 7	; 13
    17ee:	77 9a       	sbi	0x0e, 7	; 14

				DDRE   |=  (1 << 7);
    17f0:	80 91 de 00 	lds	r24, 0x00DE
						break;
					case USB_INT_VBERRI:
						OTGIEN |= (1 << VBERRE);
						break;
					case USB_INT_SRPI:
						OTGIEN |= (1 << SRPE);
    17f4:	81 60       	ori	r24, 0x01	; 1
    17f6:	80 93 de 00 	sts	0x00DE, r24
    17fa:	80 91 de 00 	lds	r24, 0x00DE
						break;
					case USB_INT_RSTI:
						UHIEN  |= (1 << RSTE);
						break;
					case USB_INT_BCERRI:
						OTGIEN |= (1 << BCERRE);
    17fe:	84 60       	ori	r24, 0x04	; 4
    1800:	80 93 de 00 	sts	0x00DE, r24
    1804:	80 91 e0 00 	lds	r24, 0x00E0
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
    1808:	8e 7f       	andi	r24, 0xFE	; 254
    180a:	80 93 e0 00 	sts	0x00E0, r24
    180e:	80 91 d8 00 	lds	r24, 0x00D8

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON |=  (1 << OTGPADE);
    1812:	80 61       	ori	r24, 0x10	; 16
    1814:	80 93 d8 00 	sts	0x00D8, r24
    1818:	08 95       	ret

0000181a <USB_Init>:
    181a:	e8 ed       	ldi	r30, 0xD8	; 216
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
    181c:	f0 e0       	ldi	r31, 0x00	; 0
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON &= ~(1 << OTGPADE);
    181e:	80 81       	ld	r24, Z
    1820:	8f 7e       	andi	r24, 0xEF	; 239
    1822:	80 83       	st	Z, r24

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON |=  (1 << UVREGE);
    1824:	e7 ed       	ldi	r30, 0xD7	; 215
    1826:	f0 e0       	ldi	r31, 0x00	; 0
    1828:	80 81       	ld	r24, Z
    182a:	81 60       	ori	r24, 0x01	; 1
    182c:	80 83       	st	Z, r24
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
    182e:	81 e0       	ldi	r24, 0x01	; 1
    1830:	80 93 2d 05 	sts	0x052D, r24

	USB_ResetInterface();
    1834:	a2 cf       	rjmp	.-188    	; 0x177a <USB_ResetInterface>

00001836 <USB_INT_DisableAllInterrupts>:
#include "../USBInterrupt.h"

void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
    1836:	e8 ed       	ldi	r30, 0xD8	; 216
    1838:	f0 e0       	ldi	r31, 0x00	; 0
    183a:	80 81       	ld	r24, Z
    183c:	8c 7f       	andi	r24, 0xFC	; 252
    183e:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_BOTH)
	OTGIEN  = 0;
	#endif

	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
    1840:	10 92 a0 00 	sts	0x00A0, r1
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
	#endif
}
    1844:	08 95       	ret

00001846 <USB_INT_ClearAllInterrupts>:

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
    1846:	10 92 da 00 	sts	0x00DA, r1
	#if defined(USB_CAN_BE_BOTH)
	OTGINT = 0;
	#endif

	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
    184a:	10 92 9f 00 	sts	0x009F, r1
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
	#endif
}
    184e:	08 95       	ret

00001850 <__vector_10>:

ISR(USB_GEN_vect, ISR_BLOCK)
{
    1850:	1f 92       	push	r1
    1852:	0f 92       	push	r0
    1854:	0f b6       	in	r0, 0x3f	; 63
    1856:	0f 92       	push	r0
    1858:	0b b6       	in	r0, 0x3b	; 59
    185a:	0f 92       	push	r0
    185c:	11 24       	eor	r1, r1
    185e:	2f 93       	push	r18
    1860:	3f 93       	push	r19
    1862:	4f 93       	push	r20
    1864:	5f 93       	push	r21
    1866:	6f 93       	push	r22
    1868:	7f 93       	push	r23
    186a:	8f 93       	push	r24
    186c:	9f 93       	push	r25
    186e:	af 93       	push	r26
    1870:	bf 93       	push	r27
    1872:	ef 93       	push	r30
    1874:	ff 93       	push	r31
					case USB_INT_RXSTPI:
						return (UEINTX & (1 << RXSTPI));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
    1876:	80 91 9f 00 	lds	r24, 0x009F
	}
	#endif

	#if defined(USB_CAN_BE_HOST)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_HSOFI) && USB_INT_IsEnabled(USB_INT_HSOFI))
    187a:	85 ff       	sbrs	r24, 5
    187c:	0a c0       	rjmp	.+20     	; 0x1892 <__vector_10+0x42>
					case USB_INT_RXSTPI:
						return (UEIENX & (1 << RXSTPE));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
    187e:	80 91 a0 00 	lds	r24, 0x00A0
    1882:	85 ff       	sbrs	r24, 5
    1884:	06 c0       	rjmp	.+12     	; 0x1892 <__vector_10+0x42>
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
    1886:	80 91 9f 00 	lds	r24, 0x009F
    188a:	8f 7d       	andi	r24, 0xDF	; 223
    188c:	80 93 9f 00 	sts	0x009F, r24
	{
		USB_INT_Clear(USB_INT_HSOFI);

		EVENT_USB_Host_StartOfFrame();
    1890:	10 d1       	rcall	.+544    	; 0x1ab2 <USB_Event_Stub>
    1892:	80 91 9f 00 	lds	r24, 0x009F
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
					case USB_INT_DCONNI:
						return (UHINT  & (1 << DCONNI));
					case USB_INT_DDISCI:
						return (UHINT  & (1 << DDISCI));
    1896:	81 ff       	sbrs	r24, 1
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_DDISCI) && USB_INT_IsEnabled(USB_INT_DDISCI))
    1898:	15 c0       	rjmp	.+42     	; 0x18c4 <__vector_10+0x74>
    189a:	80 91 a0 00 	lds	r24, 0x00A0
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
					case USB_INT_DCONNI:
						return (UHIEN  & (1 << DCONNE));
					case USB_INT_DDISCI:
						return (UHIEN  & (1 << DDISCE));
    189e:	81 ff       	sbrs	r24, 1
    18a0:	11 c0       	rjmp	.+34     	; 0x18c4 <__vector_10+0x74>
    18a2:	80 91 9f 00 	lds	r24, 0x009F
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
						break;
					case USB_INT_DDISCI:
						UHINT  &= ~(1 << DDISCI);
    18a6:	8d 7f       	andi	r24, 0xFD	; 253
    18a8:	80 93 9f 00 	sts	0x009F, r24
    18ac:	80 91 9f 00 	lds	r24, 0x009F
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
    18b0:	8e 7f       	andi	r24, 0xFE	; 254
    18b2:	80 93 9f 00 	sts	0x009F, r24
    18b6:	80 91 a0 00 	lds	r24, 0x00A0
						break;
					case USB_INT_DCONNI:
						UHIEN  &= ~(1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  &= ~(1 << DDISCE);
    18ba:	8d 7f       	andi	r24, 0xFD	; 253
    18bc:	80 93 a0 00 	sts	0x00A0, r24
    18c0:	52 d8       	rcall	.-3932   	; 0x966 <EVENT_USB_Host_DeviceUnattached>
	{
		USB_INT_Clear(USB_INT_DDISCI);
		USB_INT_Clear(USB_INT_DCONNI);
		USB_INT_Disable(USB_INT_DDISCI);

		EVENT_USB_Host_DeviceUnattached();
    18c2:	5b df       	rcall	.-330    	; 0x177a <USB_ResetInterface>
    18c4:	80 91 df 00 	lds	r24, 0x00DF

		USB_ResetInterface();
    18c8:	81 ff       	sbrs	r24, 1
					case USB_INT_RSTI:
						return (UHINT  & (1 << RSTI));
					case USB_INT_BCERRI:
						return (OTGINT & (1 << BCERRI));
					case USB_INT_VBERRI:
						return (OTGINT & (1 << VBERRI));
    18ca:	15 c0       	rjmp	.+42     	; 0x18f6 <__vector_10+0xa6>
    18cc:	80 91 de 00 	lds	r24, 0x00DE
	}

	if (USB_INT_HasOccurred(USB_INT_VBERRI) && USB_INT_IsEnabled(USB_INT_VBERRI))
    18d0:	81 ff       	sbrs	r24, 1
					case USB_INT_RSTI:
						return (UHIEN  & (1 << RSTE));
					case USB_INT_BCERRI:
						return (OTGIEN & (1 << BCERRE));
					case USB_INT_VBERRI:
						return (OTGIEN & (1 << VBERRE));
    18d2:	11 c0       	rjmp	.+34     	; 0x18f6 <__vector_10+0xa6>
    18d4:	80 91 df 00 	lds	r24, 0x00DF
    18d8:	8d 7f       	andi	r24, 0xFD	; 253
						break;
					case USB_INT_BCERRI:
						OTGINT &= ~(1 << BCERRI);
						break;
					case USB_INT_VBERRI:
						OTGINT &= ~(1 << VBERRI);
    18da:	80 93 df 00 	sts	0x00DF, r24
    18de:	77 98       	cbi	0x0e, 7	; 14
    18e0:	80 91 dd 00 	lds	r24, 0x00DD
			static inline void USB_Host_VBUS_Manual_Off(void)
			{
				#if defined(INVERTED_VBUS_ENABLE_LINE)
				PORTE  |=  (1 << 7);
				#else
				PORTE  &= ~(1 << 7);
    18e4:	81 60       	ori	r24, 0x01	; 1
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
    18e6:	80 93 dd 00 	sts	0x00DD, r24
    18ea:	80 e0       	ldi	r24, 0x00	; 0
    18ec:	97 d8       	rcall	.-3794   	; 0xa1c <EVENT_USB_Host_HostError>
    18ee:	3b d8       	rcall	.-3978   	; 0x966 <EVENT_USB_Host_DeviceUnattached>
		USB_INT_Clear(USB_INT_VBERRI);

		USB_Host_VBUS_Manual_Off();
		USB_Host_VBUS_Auto_Off();

		EVENT_USB_Host_HostError(HOST_ERROR_VBusVoltageDip);
    18f0:	81 e0       	ldi	r24, 0x01	; 1
    18f2:	80 93 36 05 	sts	0x0536, r24
		EVENT_USB_Host_DeviceUnattached();
    18f6:	80 91 df 00 	lds	r24, 0x00DF

		USB_HostState = HOST_STATE_Unattached;
    18fa:	80 ff       	sbrs	r24, 0
    18fc:	17 c0       	rjmp	.+46     	; 0x192c <__vector_10+0xdc>
    18fe:	80 91 de 00 	lds	r24, 0x00DE
					case USB_INT_BCERRI:
						return (OTGINT & (1 << BCERRI));
					case USB_INT_VBERRI:
						return (OTGINT & (1 << VBERRI));
					case USB_INT_SRPI:
						return (OTGINT & (1 << SRPI));
    1902:	80 ff       	sbrs	r24, 0
	}

	if (USB_INT_HasOccurred(USB_INT_SRPI) && USB_INT_IsEnabled(USB_INT_SRPI))
    1904:	13 c0       	rjmp	.+38     	; 0x192c <__vector_10+0xdc>
    1906:	80 91 df 00 	lds	r24, 0x00DF
					case USB_INT_BCERRI:
						return (OTGIEN & (1 << BCERRE));
					case USB_INT_VBERRI:
						return (OTGIEN & (1 << VBERRE));
					case USB_INT_SRPI:
						return (OTGIEN & (1 << SRPE));
    190a:	8e 7f       	andi	r24, 0xFE	; 254
    190c:	80 93 df 00 	sts	0x00DF, r24
						break;
					case USB_INT_VBERRI:
						OTGINT &= ~(1 << VBERRI);
						break;
					case USB_INT_SRPI:
						OTGINT &= ~(1 << SRPI);
    1910:	80 91 de 00 	lds	r24, 0x00DE
    1914:	8e 7f       	andi	r24, 0xFE	; 254
    1916:	80 93 de 00 	sts	0x00DE, r24
						break;
					case USB_INT_VBERRI:
						OTGIEN &= ~(1 << VBERRE);
						break;
					case USB_INT_SRPI:
						OTGIEN &= ~(1 << SRPE);
    191a:	1f d8       	rcall	.-4034   	; 0x95a <EVENT_USB_Host_DeviceAttached>
    191c:	80 91 a0 00 	lds	r24, 0x00A0
    1920:	82 60       	ori	r24, 0x02	; 2
    1922:	80 93 a0 00 	sts	0x00A0, r24
	{
		USB_INT_Clear(USB_INT_SRPI);
		USB_INT_Disable(USB_INT_SRPI);

		EVENT_USB_Host_DeviceAttached();
    1926:	82 e0       	ldi	r24, 0x02	; 2
						break;
					case USB_INT_DCONNI:
						UHIEN  |= (1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  |= (1 << DDISCE);
    1928:	80 93 36 05 	sts	0x0536, r24
    192c:	80 91 df 00 	lds	r24, 0x00DF
    1930:	82 ff       	sbrs	r24, 2

		USB_INT_Enable(USB_INT_DDISCI);

		USB_HostState = HOST_STATE_Powered;
    1932:	0e c0       	rjmp	.+28     	; 0x1950 <__vector_10+0x100>
    1934:	80 91 de 00 	lds	r24, 0x00DE
					case USB_INT_DDISCI:
						return (UHINT  & (1 << DDISCI));
					case USB_INT_RSTI:
						return (UHINT  & (1 << RSTI));
					case USB_INT_BCERRI:
						return (OTGINT & (1 << BCERRI));
    1938:	82 ff       	sbrs	r24, 2
    193a:	0a c0       	rjmp	.+20     	; 0x1950 <__vector_10+0x100>
	}

	if (USB_INT_HasOccurred(USB_INT_BCERRI) && USB_INT_IsEnabled(USB_INT_BCERRI))
    193c:	80 91 df 00 	lds	r24, 0x00DF
					case USB_INT_DDISCI:
						return (UHIEN  & (1 << DDISCE));
					case USB_INT_RSTI:
						return (UHIEN  & (1 << RSTE));
					case USB_INT_BCERRI:
						return (OTGIEN & (1 << BCERRE));
    1940:	8b 7f       	andi	r24, 0xFB	; 251
    1942:	80 93 df 00 	sts	0x00DF, r24
    1946:	82 e0       	ldi	r24, 0x02	; 2
						break;
					case USB_INT_RSTI:
						UHINT  &= ~(1 << RSTI);
						break;
					case USB_INT_BCERRI:
						OTGINT &= ~(1 << BCERRI);
    1948:	60 e0       	ldi	r22, 0x00	; 0
    194a:	88 d8       	rcall	.-3824   	; 0xa5c <EVENT_USB_Host_DeviceEnumerationFailed>
    194c:	0c d8       	rcall	.-4072   	; 0x966 <EVENT_USB_Host_DeviceUnattached>
    194e:	15 df       	rcall	.-470    	; 0x177a <USB_ResetInterface>
    1950:	ff 91       	pop	r31
	{
		USB_INT_Clear(USB_INT_BCERRI);

		EVENT_USB_Host_DeviceEnumerationFailed(HOST_ENUMERROR_NoDeviceDetected, 0);
    1952:	ef 91       	pop	r30
    1954:	bf 91       	pop	r27
    1956:	af 91       	pop	r26
    1958:	9f 91       	pop	r25
		EVENT_USB_Host_DeviceUnattached();
    195a:	8f 91       	pop	r24
    195c:	7f 91       	pop	r23

		USB_ResetInterface();
    195e:	6f 91       	pop	r22
    1960:	5f 91       	pop	r21
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
    1962:	4f 91       	pop	r20
    1964:	3f 91       	pop	r19
    1966:	2f 91       	pop	r18
    1968:	0f 90       	pop	r0
    196a:	0b be       	out	0x3b, r0	; 59
    196c:	0f 90       	pop	r0
    196e:	0f be       	out	0x3f, r0	; 63
    1970:	0f 90       	pop	r0
    1972:	1f 90       	pop	r1
    1974:	18 95       	reti

00001976 <USB_Host_GetDeviceConfigDescriptor>:
#if defined(USB_CAN_BE_HOST)
uint8_t USB_Host_GetDeviceConfigDescriptor(const uint8_t ConfigNumber,
                                           uint16_t* const ConfigSizePtr,
                                           void* const BufferPtr,
                                           const uint16_t BufferSize)
{
    1976:	cf 92       	push	r12
    1978:	df 92       	push	r13
    197a:	ef 92       	push	r14
    197c:	ff 92       	push	r15
    197e:	0f 93       	push	r16
    1980:	1f 93       	push	r17
    1982:	cf 93       	push	r28
    1984:	df 93       	push	r29
    1986:	cd b7       	in	r28, 0x3d	; 61
    1988:	de b7       	in	r29, 0x3e	; 62
    198a:	29 97       	sbiw	r28, 0x09	; 9
    198c:	0f b6       	in	r0, 0x3f	; 63
    198e:	f8 94       	cli
    1990:	de bf       	out	0x3e, r29	; 62
    1992:	0f be       	out	0x3f, r0	; 63
    1994:	cd bf       	out	0x3d, r28	; 61
    1996:	6b 01       	movw	r12, r22
    1998:	8a 01       	movw	r16, r20
    199a:	79 01       	movw	r14, r18
	uint8_t ErrorCode;
	uint8_t ConfigHeader[sizeof(USB_Descriptor_Configuration_Header_t)];

	USB_ControlRequest = (USB_Request_Header_t)
    199c:	90 e8       	ldi	r25, 0x80	; 128
    199e:	90 93 2e 05 	sts	0x052E, r25
    19a2:	96 e0       	ldi	r25, 0x06	; 6
    19a4:	90 93 2f 05 	sts	0x052F, r25
		{
			.bmRequestType = (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE),
			.bRequest      = REQ_GetDescriptor,
			.wValue        = ((DTYPE_Configuration << 8) | (ConfigNumber - 1)),
    19a8:	90 e0       	ldi	r25, 0x00	; 0
    19aa:	01 97       	sbiw	r24, 0x01	; 1
    19ac:	92 60       	ori	r25, 0x02	; 2
                                           const uint16_t BufferSize)
{
	uint8_t ErrorCode;
	uint8_t ConfigHeader[sizeof(USB_Descriptor_Configuration_Header_t)];

	USB_ControlRequest = (USB_Request_Header_t)
    19ae:	90 93 31 05 	sts	0x0531, r25
    19b2:	80 93 30 05 	sts	0x0530, r24
    19b6:	10 92 33 05 	sts	0x0533, r1
    19ba:	10 92 32 05 	sts	0x0532, r1
    19be:	89 e0       	ldi	r24, 0x09	; 9
    19c0:	90 e0       	ldi	r25, 0x00	; 0
    19c2:	90 93 35 05 	sts	0x0535, r25
    19c6:	80 93 34 05 	sts	0x0534, r24
    19ca:	10 92 a7 00 	sts	0x00A7, r1
			.wLength       = sizeof(USB_Descriptor_Configuration_Header_t),
		};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	if ((ErrorCode = USB_Host_SendControlRequest(ConfigHeader)) != HOST_SENDCONTROL_Successful)
    19ce:	ce 01       	movw	r24, r28
    19d0:	01 96       	adiw	r24, 0x01	; 1
    19d2:	98 d0       	rcall	.+304    	; 0x1b04 <USB_Host_SendControlRequest>
    19d4:	88 23       	and	r24, r24
    19d6:	b9 f4       	brne	.+46     	; 0x1a06 <USB_Host_GetDeviceConfigDescriptor+0x90>
    19d8:	8b 81       	ldd	r24, Y+3	; 0x03
	  return ErrorCode;

	*ConfigSizePtr = le16_to_cpu(DESCRIPTOR_PCAST(ConfigHeader, USB_Descriptor_Configuration_Header_t)->TotalConfigurationSize);
    19da:	9c 81       	ldd	r25, Y+4	; 0x04
    19dc:	f6 01       	movw	r30, r12
    19de:	91 83       	std	Z+1, r25	; 0x01
    19e0:	80 83       	st	Z, r24
    19e2:	e8 16       	cp	r14, r24

	if (*ConfigSizePtr > BufferSize)
    19e4:	f9 06       	cpc	r15, r25
    19e6:	70 f0       	brcs	.+28     	; 0x1a04 <USB_Host_GetDeviceConfigDescriptor+0x8e>
    19e8:	90 93 35 05 	sts	0x0535, r25
	  return HOST_GETCONFIG_BuffOverflow;

	USB_ControlRequest.wLength = *ConfigSizePtr;
    19ec:	80 93 34 05 	sts	0x0534, r24
    19f0:	c8 01       	movw	r24, r16

	if ((ErrorCode = USB_Host_SendControlRequest(BufferPtr)) != HOST_SENDCONTROL_Successful)
    19f2:	88 d0       	rcall	.+272    	; 0x1b04 <USB_Host_SendControlRequest>
    19f4:	88 23       	and	r24, r24
    19f6:	39 f4       	brne	.+14     	; 0x1a06 <USB_Host_GetDeviceConfigDescriptor+0x90>
    19f8:	f8 01       	movw	r30, r16
    19fa:	91 81       	ldd	r25, Z+1	; 0x01
	  return ErrorCode;

	if (DESCRIPTOR_TYPE(BufferPtr) != DTYPE_Configuration)
    19fc:	92 30       	cpi	r25, 0x02	; 2
    19fe:	19 f0       	breq	.+6      	; 0x1a06 <USB_Host_GetDeviceConfigDescriptor+0x90>
    1a00:	86 e0       	ldi	r24, 0x06	; 6
    1a02:	01 c0       	rjmp	.+2      	; 0x1a06 <USB_Host_GetDeviceConfigDescriptor+0x90>
	  return HOST_GETCONFIG_InvalidData;
    1a04:	85 e0       	ldi	r24, 0x05	; 5
    1a06:	29 96       	adiw	r28, 0x09	; 9
	  return ErrorCode;

	*ConfigSizePtr = le16_to_cpu(DESCRIPTOR_PCAST(ConfigHeader, USB_Descriptor_Configuration_Header_t)->TotalConfigurationSize);

	if (*ConfigSizePtr > BufferSize)
	  return HOST_GETCONFIG_BuffOverflow;
    1a08:	0f b6       	in	r0, 0x3f	; 63

	if (DESCRIPTOR_TYPE(BufferPtr) != DTYPE_Configuration)
	  return HOST_GETCONFIG_InvalidData;

	return HOST_GETCONFIG_Successful;
}
    1a0a:	f8 94       	cli
    1a0c:	de bf       	out	0x3e, r29	; 62
    1a0e:	0f be       	out	0x3f, r0	; 63
    1a10:	cd bf       	out	0x3d, r28	; 61
    1a12:	df 91       	pop	r29
    1a14:	cf 91       	pop	r28
    1a16:	1f 91       	pop	r17
    1a18:	0f 91       	pop	r16
    1a1a:	ff 90       	pop	r15
    1a1c:	ef 90       	pop	r14
    1a1e:	df 90       	pop	r13
    1a20:	cf 90       	pop	r12
    1a22:	08 95       	ret

00001a24 <USB_GetNextDescriptorComp>:
    1a24:	af 92       	push	r10
    1a26:	bf 92       	push	r11
}

uint8_t USB_GetNextDescriptorComp(uint16_t* const BytesRem,
                                  void** const CurrConfigLoc,
                                  ConfigComparatorPtr_t const ComparatorRoutine)
{
    1a28:	cf 92       	push	r12
    1a2a:	df 92       	push	r13
    1a2c:	ef 92       	push	r14
    1a2e:	ff 92       	push	r15
    1a30:	0f 93       	push	r16
    1a32:	1f 93       	push	r17
    1a34:	cf 93       	push	r28
    1a36:	df 93       	push	r29
    1a38:	7c 01       	movw	r14, r24
    1a3a:	8b 01       	movw	r16, r22
    1a3c:	5a 01       	movw	r10, r20
	uint8_t ErrorCode;

	while (*BytesRem)
    1a3e:	28 c0       	rjmp	.+80     	; 0x1a90 <USB_GetNextDescriptorComp+0x6c>
	{
		uint8_t* PrevDescLoc  = *CurrConfigLoc;
    1a40:	f8 01       	movw	r30, r16
    1a42:	c0 80       	ld	r12, Z
    1a44:	d1 80       	ldd	r13, Z+1	; 0x01
			static inline void USB_GetNextDescriptor(uint16_t* const BytesRem,
			                                         void** CurrConfigLoc) ATTR_NON_NULL_PTR_ARG(1) ATTR_NON_NULL_PTR_ARG(2);
			static inline void USB_GetNextDescriptor(uint16_t* const BytesRem,
			                                         void** CurrConfigLoc)
			{
				uint16_t CurrDescriptorSize = DESCRIPTOR_CAST(*CurrConfigLoc, USB_Descriptor_Header_t).Size;
    1a46:	f6 01       	movw	r30, r12
    1a48:	80 81       	ld	r24, Z
    1a4a:	90 e0       	ldi	r25, 0x00	; 0
    1a4c:	9e 01       	movw	r18, r28
    1a4e:	8c 17       	cp	r24, r28
    1a50:	9d 07       	cpc	r25, r29
    1a52:	08 f4       	brcc	.+2      	; 0x1a56 <USB_GetNextDescriptorComp+0x32>
    1a54:	9c 01       	movw	r18, r24

				if (*BytesRem < CurrDescriptorSize)
				  CurrDescriptorSize = *BytesRem;

				*CurrConfigLoc  = (void*)((uintptr_t)*CurrConfigLoc + CurrDescriptorSize);
    1a56:	c6 01       	movw	r24, r12
    1a58:	82 0f       	add	r24, r18
    1a5a:	93 1f       	adc	r25, r19
    1a5c:	f8 01       	movw	r30, r16
    1a5e:	91 83       	std	Z+1, r25	; 0x01
    1a60:	80 83       	st	Z, r24
				*BytesRem      -= CurrDescriptorSize;
    1a62:	f7 01       	movw	r30, r14
    1a64:	80 81       	ld	r24, Z
    1a66:	91 81       	ldd	r25, Z+1	; 0x01
    1a68:	82 1b       	sub	r24, r18
    1a6a:	93 0b       	sbc	r25, r19
    1a6c:	91 83       	std	Z+1, r25	; 0x01
    1a6e:	80 83       	st	Z, r24
		uint16_t PrevBytesRem = *BytesRem;

		USB_GetNextDescriptor(BytesRem, CurrConfigLoc);

		if ((ErrorCode = ComparatorRoutine(*CurrConfigLoc)) != DESCRIPTOR_SEARCH_NotFound)
    1a70:	f8 01       	movw	r30, r16
    1a72:	80 81       	ld	r24, Z
    1a74:	91 81       	ldd	r25, Z+1	; 0x01
    1a76:	f5 01       	movw	r30, r10
    1a78:	09 95       	icall
    1a7a:	82 30       	cpi	r24, 0x02	; 2
    1a7c:	49 f0       	breq	.+18     	; 0x1a90 <USB_GetNextDescriptorComp+0x6c>
		{
			if (ErrorCode == DESCRIPTOR_SEARCH_Fail)
    1a7e:	81 30       	cpi	r24, 0x01	; 1
    1a80:	69 f4       	brne	.+26     	; 0x1a9c <USB_GetNextDescriptorComp+0x78>
			{
				*CurrConfigLoc = PrevDescLoc;
    1a82:	f8 01       	movw	r30, r16
    1a84:	d1 82       	std	Z+1, r13	; 0x01
    1a86:	c0 82       	st	Z, r12
				*BytesRem      = PrevBytesRem;
    1a88:	f7 01       	movw	r30, r14
    1a8a:	d1 83       	std	Z+1, r29	; 0x01
    1a8c:	c0 83       	st	Z, r28
    1a8e:	06 c0       	rjmp	.+12     	; 0x1a9c <USB_GetNextDescriptorComp+0x78>
                                  void** const CurrConfigLoc,
                                  ConfigComparatorPtr_t const ComparatorRoutine)
{
	uint8_t ErrorCode;

	while (*BytesRem)
    1a90:	f7 01       	movw	r30, r14
    1a92:	c0 81       	ld	r28, Z
    1a94:	d1 81       	ldd	r29, Z+1	; 0x01
    1a96:	20 97       	sbiw	r28, 0x00	; 0
    1a98:	99 f6       	brne	.-90     	; 0x1a40 <USB_GetNextDescriptorComp+0x1c>

			return ErrorCode;
		}
	}

	return DESCRIPTOR_SEARCH_COMP_EndOfDescriptor;
    1a9a:	82 e0       	ldi	r24, 0x02	; 2
}
    1a9c:	df 91       	pop	r29
    1a9e:	cf 91       	pop	r28
    1aa0:	1f 91       	pop	r17
    1aa2:	0f 91       	pop	r16
    1aa4:	ff 90       	pop	r15
    1aa6:	ef 90       	pop	r14
    1aa8:	df 90       	pop	r13
    1aaa:	cf 90       	pop	r12
    1aac:	bf 90       	pop	r11
    1aae:	af 90       	pop	r10
    1ab0:	08 95       	ret

00001ab2 <USB_Event_Stub>:
#include "Events.h"

void USB_Event_Stub(void)
{

}
    1ab2:	08 95       	ret

00001ab4 <USB_Host_WaitForIOS>:
	
	return ReturnStatus;
}

static uint8_t USB_Host_WaitForIOS(const uint8_t WaitType)
{
    1ab4:	1f 93       	push	r17
    1ab6:	cf 93       	push	r28
    1ab8:	df 93       	push	r29
    1aba:	18 2f       	mov	r17, r24
	uint8_t  TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#else
	uint16_t TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#endif

	while (!(((WaitType == USB_HOST_WAITFOR_SetupSent)  && Pipe_IsSETUPSent())  ||
    1abc:	c9 ee       	ldi	r28, 0xE9	; 233
    1abe:	d3 e0       	ldi	r29, 0x03	; 3
    1ac0:	06 c0       	rjmp	.+12     	; 0x1ace <USB_Host_WaitForIOS+0x1a>
	         ((WaitType == USB_HOST_WAITFOR_InReceived) && Pipe_IsINReceived()) ||
	         ((WaitType == USB_HOST_WAITFOR_OutReady)   && Pipe_IsOUTReady())))
	{
		uint8_t ErrorCode;

		if ((ErrorCode = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
    1ac2:	81 e0       	ldi	r24, 0x01	; 1
    1ac4:	08 dc       	rcall	.-2032   	; 0x12d6 <USB_Host_WaitMS>
    1ac6:	88 23       	and	r24, r24
    1ac8:	c9 f4       	brne	.+50     	; 0x1afc <USB_Host_WaitForIOS+0x48>
    1aca:	21 97       	sbiw	r28, 0x01	; 1
    1acc:	b1 f0       	breq	.+44     	; 0x1afa <USB_Host_WaitForIOS+0x46>
		  return ErrorCode;

		if (!(TimeoutCounter--))
    1ace:	11 23       	and	r17, r17
	uint8_t  TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#else
	uint16_t TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#endif

	while (!(((WaitType == USB_HOST_WAITFOR_SetupSent)  && Pipe_IsSETUPSent())  ||
    1ad0:	29 f4       	brne	.+10     	; 0x1adc <USB_Host_WaitForIOS+0x28>
    1ad2:	80 91 a6 00 	lds	r24, 0x00A6
			 *  \return Boolean \c true if the current pipe is ready for a SETUP packet, \c false otherwise.
			 */
			static inline bool Pipe_IsSETUPSent(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsSETUPSent(void)
			{
				return ((UPINTX & (1 << TXSTPI)) ? true : false);
    1ad6:	83 ff       	sbrs	r24, 3
    1ad8:	f4 cf       	rjmp	.-24     	; 0x1ac2 <USB_Host_WaitForIOS+0xe>
    1ada:	0d c0       	rjmp	.+26     	; 0x1af6 <USB_Host_WaitForIOS+0x42>
    1adc:	11 30       	cpi	r17, 0x01	; 1
    1ade:	29 f4       	brne	.+10     	; 0x1aea <USB_Host_WaitForIOS+0x36>
    1ae0:	80 91 a6 00 	lds	r24, 0x00A6
			 *  \return Boolean \c true if the current pipe has received an IN packet, \c false otherwise.
			 */
			static inline bool Pipe_IsINReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsINReceived(void)
			{
				return ((UPINTX & (1 << RXINI)) ? true : false);
    1ae4:	80 ff       	sbrs	r24, 0
	         ((WaitType == USB_HOST_WAITFOR_InReceived) && Pipe_IsINReceived()) ||
    1ae6:	ed cf       	rjmp	.-38     	; 0x1ac2 <USB_Host_WaitForIOS+0xe>
    1ae8:	06 c0       	rjmp	.+12     	; 0x1af6 <USB_Host_WaitForIOS+0x42>
    1aea:	12 30       	cpi	r17, 0x02	; 2
	uint8_t  TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#else
	uint16_t TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#endif

	while (!(((WaitType == USB_HOST_WAITFOR_SetupSent)  && Pipe_IsSETUPSent())  ||
    1aec:	51 f7       	brne	.-44     	; 0x1ac2 <USB_Host_WaitForIOS+0xe>
    1aee:	80 91 a6 00 	lds	r24, 0x00A6
			 *  \return Boolean \c true if the current pipe is ready for an OUT packet, \c false otherwise.
			 */
			static inline bool Pipe_IsOUTReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsOUTReady(void)
			{
				return ((UPINTX & (1 << TXOUTI)) ? true : false);
    1af2:	82 ff       	sbrs	r24, 2
	         ((WaitType == USB_HOST_WAITFOR_InReceived) && Pipe_IsINReceived()) ||
	         ((WaitType == USB_HOST_WAITFOR_OutReady)   && Pipe_IsOUTReady())))
    1af4:	e6 cf       	rjmp	.-52     	; 0x1ac2 <USB_Host_WaitForIOS+0xe>
    1af6:	80 e0       	ldi	r24, 0x00	; 0

		if (!(TimeoutCounter--))
		  return HOST_SENDCONTROL_SoftwareTimeOut;
	}

	return HOST_SENDCONTROL_Successful;
    1af8:	01 c0       	rjmp	.+2      	; 0x1afc <USB_Host_WaitForIOS+0x48>
    1afa:	84 e0       	ldi	r24, 0x04	; 4

		if ((ErrorCode = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
		  return ErrorCode;

		if (!(TimeoutCounter--))
		  return HOST_SENDCONTROL_SoftwareTimeOut;
    1afc:	df 91       	pop	r29
	}

	return HOST_SENDCONTROL_Successful;
}
    1afe:	cf 91       	pop	r28
    1b00:	1f 91       	pop	r17
    1b02:	08 95       	ret

00001b04 <USB_Host_SendControlRequest>:
    1b04:	ef 92       	push	r14

uint8_t USB_Host_SendControlRequest(void* const BufferPtr)
{
    1b06:	ff 92       	push	r15
    1b08:	0f 93       	push	r16
    1b0a:	1f 93       	push	r17
    1b0c:	cf 93       	push	r28
    1b0e:	df 93       	push	r29
    1b10:	ec 01       	movw	r28, r24
			 *  \return Boolean \c true if the bus is currently suspended, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusSuspended(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusSuspended(void)
			{
				return ((UHCON & (1 << SOFEN)) ? false : true);
    1b12:	e0 90 9e 00 	lds	r14, 0x009E
    1b16:	ff 24       	eor	r15, r15
    1b18:	81 e0       	ldi	r24, 0x01	; 1
    1b1a:	e8 22       	and	r14, r24
    1b1c:	ff 24       	eor	r15, r15

static uint8_t USB_Host_SendControlRequest_PRV(void* const BufferPtr)
{
	uint8_t* DataStream   = (uint8_t*)BufferPtr;
	uint8_t  ReturnStatus = HOST_SENDCONTROL_Successful;
	uint16_t DataLen      = USB_ControlRequest.wLength;
    1b1e:	00 91 34 05 	lds	r16, 0x0534
    1b22:	10 91 35 05 	lds	r17, 0x0535
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
    1b26:	80 91 9e 00 	lds	r24, 0x009E
    1b2a:	81 60       	ori	r24, 0x01	; 1
    1b2c:	80 93 9e 00 	sts	0x009E, r24

	USB_Host_ResumeBus();

	if ((ReturnStatus = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
    1b30:	81 e0       	ldi	r24, 0x01	; 1
    1b32:	d1 db       	rcall	.-2142   	; 0x12d6 <USB_Host_WaitMS>
    1b34:	88 23       	and	r24, r24
    1b36:	09 f0       	breq	.+2      	; 0x1b3a <USB_Host_SendControlRequest+0x36>
    1b38:	ca c0       	rjmp	.+404    	; 0x1cce <USB_Host_SendControlRequest+0x1ca>
    1b3a:	80 91 aa 00 	lds	r24, 0x00AA
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    1b3e:	8f 7c       	andi	r24, 0xCF	; 207
    1b40:	80 93 aa 00 	sts	0x00AA, r24
    1b44:	10 92 f5 00 	sts	0x00F5, r1

			/** Clears the error flags for the currently selected pipe. */
			static inline void Pipe_ClearError(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearError(void)
			{
				UPERRX = 0;
    1b48:	80 91 a6 00 	lds	r24, 0x00A6
				UPINTX &= ~(1 << PERRI);
    1b4c:	8f 7e       	andi	r24, 0xEF	; 239
    1b4e:	80 93 a6 00 	sts	0x00A6, r24
    1b52:	80 91 a9 00 	lds	r24, 0x00A9

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    1b56:	8f 7b       	andi	r24, 0xBF	; 191
    1b58:	80 93 a9 00 	sts	0x00A9, r24
    1b5c:	88 e0       	ldi	r24, 0x08	; 8
    1b5e:	ee e2       	ldi	r30, 0x2E	; 46
	Pipe_Write_8(USB_ControlRequest.bRequest);
	Pipe_Write_16_LE(USB_ControlRequest.wValue);
	Pipe_Write_16_LE(USB_ControlRequest.wIndex);
	Pipe_Write_16_LE(USB_ControlRequest.wLength);
	#else
	uint8_t* HeaderStream = (uint8_t*)&USB_ControlRequest;
    1b60:	f5 e0       	ldi	r31, 0x05	; 5
    1b62:	91 91       	ld	r25, Z+

	for (uint8_t HeaderByte = 0; HeaderByte < sizeof(USB_Request_Header_t); HeaderByte++)
	  Pipe_Write_8(*(HeaderStream++));
    1b64:	90 93 af 00 	sts	0x00AF, r25
			 *  \param[in] Data  Data to write into the the currently selected pipe's FIFO buffer.
			 */
			static inline void Pipe_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Write_8(const uint8_t Data)
			{
				UPDATX = Data;
    1b68:	81 50       	subi	r24, 0x01	; 1
    1b6a:	d9 f7       	brne	.-10     	; 0x1b62 <USB_Host_SendControlRequest+0x5e>
	Pipe_Write_16_LE(USB_ControlRequest.wIndex);
	Pipe_Write_16_LE(USB_ControlRequest.wLength);
	#else
	uint8_t* HeaderStream = (uint8_t*)&USB_ControlRequest;

	for (uint8_t HeaderByte = 0; HeaderByte < sizeof(USB_Request_Header_t); HeaderByte++)
    1b6c:	80 91 a6 00 	lds	r24, 0x00A6
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearSETUP(void)
			{
				UPINTX &= ~((1 << TXSTPI) | (1 << FIFOCON));
    1b70:	87 77       	andi	r24, 0x77	; 119
    1b72:	80 93 a6 00 	sts	0x00A6, r24
    1b76:	80 e0       	ldi	r24, 0x00	; 0
	  Pipe_Write_8(*(HeaderStream++));
	#endif

	Pipe_ClearSETUP();

	if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_SetupSent)) != HOST_SENDCONTROL_Successful)
    1b78:	9d df       	rcall	.-198    	; 0x1ab4 <USB_Host_WaitForIOS>
    1b7a:	88 23       	and	r24, r24
    1b7c:	09 f0       	breq	.+2      	; 0x1b80 <USB_Host_SendControlRequest+0x7c>
    1b7e:	a7 c0       	rjmp	.+334    	; 0x1cce <USB_Host_SendControlRequest+0x1ca>
    1b80:	80 91 a9 00 	lds	r24, 0x00A9

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    1b84:	80 64       	ori	r24, 0x40	; 64
    1b86:	80 93 a9 00 	sts	0x00A9, r24
    1b8a:	81 e0       	ldi	r24, 0x01	; 1
    1b8c:	a4 db       	rcall	.-2232   	; 0x12d6 <USB_Host_WaitMS>
	  return ReturnStatus;

	Pipe_Freeze();

	if ((ReturnStatus = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
    1b8e:	88 23       	and	r24, r24
    1b90:	09 f0       	breq	.+2      	; 0x1b94 <USB_Host_SendControlRequest+0x90>
    1b92:	9d c0       	rjmp	.+314    	; 0x1cce <USB_Host_SendControlRequest+0x1ca>
    1b94:	80 91 2e 05 	lds	r24, 0x052E
    1b98:	87 ff       	sbrs	r24, 7
	  return ReturnStatus;

	if ((USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_DIRECTION) == REQDIR_DEVICETOHOST)
    1b9a:	4f c0       	rjmp	.+158    	; 0x1c3a <USB_Host_SendControlRequest+0x136>
    1b9c:	80 91 aa 00 	lds	r24, 0x00AA
    1ba0:	8f 7c       	andi	r24, 0xCF	; 207
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    1ba2:	80 61       	ori	r24, 0x10	; 16
    1ba4:	80 93 aa 00 	sts	0x00AA, r24
    1ba8:	20 97       	sbiw	r28, 0x00	; 0
    1baa:	61 f5       	brne	.+88     	; 0x1c04 <USB_Host_SendControlRequest+0x100>
    1bac:	2e c0       	rjmp	.+92     	; 0x1c0a <USB_Host_SendControlRequest+0x106>
	{
		Pipe_SetPipeToken(PIPE_TOKEN_IN);

		if (DataStream != NULL)
    1bae:	80 91 a9 00 	lds	r24, 0x00A9
    1bb2:	8f 7b       	andi	r24, 0xBF	; 191

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    1bb4:	80 93 a9 00 	sts	0x00A9, r24
    1bb8:	81 e0       	ldi	r24, 0x01	; 1
    1bba:	7c df       	rcall	.-264    	; 0x1ab4 <USB_Host_WaitForIOS>
    1bbc:	88 23       	and	r24, r24
		{
			while (DataLen)
			{
				Pipe_Unfreeze();

				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_InReceived)) != HOST_SENDCONTROL_Successful)
    1bbe:	09 f0       	breq	.+2      	; 0x1bc2 <USB_Host_SendControlRequest+0xbe>
    1bc0:	86 c0       	rjmp	.+268    	; 0x1cce <USB_Host_SendControlRequest+0x1ca>
    1bc2:	80 91 f6 00 	lds	r24, 0x00F6
    1bc6:	90 91 f7 00 	lds	r25, 0x00F7
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
    1bca:	00 97       	sbiw	r24, 0x00	; 0
    1bcc:	41 f4       	brne	.+16     	; 0x1bde <USB_Host_SendControlRequest+0xda>
    1bce:	00 e0       	ldi	r16, 0x00	; 0
    1bd0:	10 e0       	ldi	r17, 0x00	; 0
				  return ReturnStatus;

				if (!(Pipe_BytesInPipe()))
    1bd2:	05 c0       	rjmp	.+10     	; 0x1bde <USB_Host_SendControlRequest+0xda>
    1bd4:	80 91 af 00 	lds	r24, 0x00AF
				  DataLen = 0;
    1bd8:	89 93       	st	Y+, r24
    1bda:	01 50       	subi	r16, 0x01	; 1
			 *  \return Next byte in the currently selected pipe's FIFO buffer.
			 */
			static inline uint8_t Pipe_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_Read_8(void)
			{
				return UPDATX;
    1bdc:	10 40       	sbci	r17, 0x00	; 0
    1bde:	80 91 f6 00 	lds	r24, 0x00F6

				while (Pipe_BytesInPipe() && DataLen)
				{
					*(DataStream++) = Pipe_Read_8();
					DataLen--;
    1be2:	90 91 f7 00 	lds	r25, 0x00F7
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
    1be6:	00 97       	sbiw	r24, 0x00	; 0
    1be8:	19 f0       	breq	.+6      	; 0x1bf0 <USB_Host_SendControlRequest+0xec>
    1bea:	01 15       	cp	r16, r1
    1bec:	11 05       	cpc	r17, r1
				  return ReturnStatus;

				if (!(Pipe_BytesInPipe()))
				  DataLen = 0;

				while (Pipe_BytesInPipe() && DataLen)
    1bee:	91 f7       	brne	.-28     	; 0x1bd4 <USB_Host_SendControlRequest+0xd0>
    1bf0:	80 91 a9 00 	lds	r24, 0x00A9
    1bf4:	80 64       	ori	r24, 0x40	; 64
    1bf6:	80 93 a9 00 	sts	0x00A9, r24

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    1bfa:	80 91 a6 00 	lds	r24, 0x00A6
    1bfe:	8e 77       	andi	r24, 0x7E	; 126
    1c00:	80 93 a6 00 	sts	0x00A6, r24
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
    1c04:	01 15       	cp	r16, r1
    1c06:	11 05       	cpc	r17, r1
    1c08:	91 f6       	brne	.-92     	; 0x1bae <USB_Host_SendControlRequest+0xaa>
    1c0a:	80 91 aa 00 	lds	r24, 0x00AA
	{
		Pipe_SetPipeToken(PIPE_TOKEN_IN);

		if (DataStream != NULL)
		{
			while (DataLen)
    1c0e:	8f 7c       	andi	r24, 0xCF	; 207
    1c10:	80 62       	ori	r24, 0x20	; 32
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    1c12:	80 93 aa 00 	sts	0x00AA, r24
    1c16:	80 91 a9 00 	lds	r24, 0x00A9
    1c1a:	8f 7b       	andi	r24, 0xBF	; 191
    1c1c:	80 93 a9 00 	sts	0x00A9, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    1c20:	82 e0       	ldi	r24, 0x02	; 2
    1c22:	48 df       	rcall	.-368    	; 0x1ab4 <USB_Host_WaitForIOS>
    1c24:	88 23       	and	r24, r24
    1c26:	09 f0       	breq	.+2      	; 0x1c2a <USB_Host_SendControlRequest+0x126>
		}

		Pipe_SetPipeToken(PIPE_TOKEN_OUT);
		Pipe_Unfreeze();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    1c28:	52 c0       	rjmp	.+164    	; 0x1cce <USB_Host_SendControlRequest+0x1ca>
    1c2a:	80 91 a6 00 	lds	r24, 0x00A6
    1c2e:	8b 77       	andi	r24, 0x7B	; 123
    1c30:	80 93 a6 00 	sts	0x00A6, r24
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearOUT(void)
			{
				UPINTX &= ~((1 << TXOUTI) | (1 << FIFOCON));
    1c34:	82 e0       	ldi	r24, 0x02	; 2
    1c36:	3e df       	rcall	.-388    	; 0x1ab4 <USB_Host_WaitForIOS>
    1c38:	4a c0       	rjmp	.+148    	; 0x1cce <USB_Host_SendControlRequest+0x1ca>
    1c3a:	20 97       	sbiw	r28, 0x00	; 0
    1c3c:	a1 f1       	breq	.+104    	; 0x1ca6 <USB_Host_SendControlRequest+0x1a2>
		  return ReturnStatus;

		Pipe_ClearOUT();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    1c3e:	80 91 aa 00 	lds	r24, 0x00AA
    1c42:	8f 7c       	andi	r24, 0xCF	; 207
    1c44:	80 62       	ori	r24, 0x20	; 32
		  return ReturnStatus;
	}
	else
	{
		if (DataStream != NULL)
    1c46:	80 93 aa 00 	sts	0x00AA, r24
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    1c4a:	80 91 a9 00 	lds	r24, 0x00A9
    1c4e:	8f 7b       	andi	r24, 0xBF	; 191
    1c50:	80 93 a9 00 	sts	0x00A9, r24
    1c54:	1c c0       	rjmp	.+56     	; 0x1c8e <USB_Host_SendControlRequest+0x18a>

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    1c56:	2e df       	rcall	.-420    	; 0x1ab4 <USB_Host_WaitForIOS>
    1c58:	88 23       	and	r24, r24
    1c5a:	c9 f5       	brne	.+114    	; 0x1cce <USB_Host_SendControlRequest+0x1ca>
    1c5c:	fe 01       	movw	r30, r28
    1c5e:	07 c0       	rjmp	.+14     	; 0x1c6e <USB_Host_SendControlRequest+0x16a>
    1c60:	81 91       	ld	r24, Z+
			Pipe_SetPipeToken(PIPE_TOKEN_OUT);
			Pipe_Unfreeze();

			while (DataLen)
			{
				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    1c62:	ef 01       	movw	r28, r30
    1c64:	80 93 af 00 	sts	0x00AF, r24
    1c68:	01 50       	subi	r16, 0x01	; 1
    1c6a:	10 40       	sbci	r17, 0x00	; 0
    1c6c:	59 f0       	breq	.+22     	; 0x1c84 <USB_Host_SendControlRequest+0x180>
				  return ReturnStatus;

				while (DataLen && (Pipe_BytesInPipe() < USB_Host_ControlPipeSize))
				{
					Pipe_Write_8(*(DataStream++));
    1c6e:	ef 01       	movw	r28, r30
    1c70:	20 91 f6 00 	lds	r18, 0x00F6
			 *  \param[in] Data  Data to write into the the currently selected pipe's FIFO buffer.
			 */
			static inline void Pipe_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Write_8(const uint8_t Data)
			{
				UPDATX = Data;
    1c74:	30 91 f7 00 	lds	r19, 0x00F7
					DataLen--;
    1c78:	80 91 36 01 	lds	r24, 0x0136
			while (DataLen)
			{
				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
				  return ReturnStatus;

				while (DataLen && (Pipe_BytesInPipe() < USB_Host_ControlPipeSize))
    1c7c:	90 e0       	ldi	r25, 0x00	; 0
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
    1c7e:	28 17       	cp	r18, r24
    1c80:	39 07       	cpc	r19, r25
    1c82:	70 f3       	brcs	.-36     	; 0x1c60 <USB_Host_SendControlRequest+0x15c>
    1c84:	80 91 a6 00 	lds	r24, 0x00A6
    1c88:	8b 77       	andi	r24, 0x7B	; 123
    1c8a:	80 93 a6 00 	sts	0x00A6, r24
    1c8e:	82 e0       	ldi	r24, 0x02	; 2
    1c90:	01 15       	cp	r16, r1
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearOUT(void)
			{
				UPINTX &= ~((1 << TXOUTI) | (1 << FIFOCON));
    1c92:	11 05       	cpc	r17, r1
    1c94:	01 f7       	brne	.-64     	; 0x1c56 <USB_Host_SendControlRequest+0x152>
    1c96:	0e df       	rcall	.-484    	; 0x1ab4 <USB_Host_WaitForIOS>
    1c98:	88 23       	and	r24, r24
    1c9a:	c9 f4       	brne	.+50     	; 0x1cce <USB_Host_SendControlRequest+0x1ca>
			Pipe_SetPipeToken(PIPE_TOKEN_OUT);
			Pipe_Unfreeze();

			while (DataLen)
			{
				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    1c9c:	80 91 a9 00 	lds	r24, 0x00A9
		if (DataStream != NULL)
		{
			Pipe_SetPipeToken(PIPE_TOKEN_OUT);
			Pipe_Unfreeze();

			while (DataLen)
    1ca0:	80 64       	ori	r24, 0x40	; 64
    1ca2:	80 93 a9 00 	sts	0x00A9, r24
				}

				Pipe_ClearOUT();
			}

			if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    1ca6:	80 91 aa 00 	lds	r24, 0x00AA
    1caa:	8f 7c       	andi	r24, 0xCF	; 207

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    1cac:	80 61       	ori	r24, 0x10	; 16
    1cae:	80 93 aa 00 	sts	0x00AA, r24
    1cb2:	80 91 a9 00 	lds	r24, 0x00A9
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    1cb6:	8f 7b       	andi	r24, 0xBF	; 191
    1cb8:	80 93 a9 00 	sts	0x00A9, r24
    1cbc:	81 e0       	ldi	r24, 0x01	; 1
    1cbe:	fa de       	rcall	.-524    	; 0x1ab4 <USB_Host_WaitForIOS>
    1cc0:	88 23       	and	r24, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    1cc2:	29 f4       	brne	.+10     	; 0x1cce <USB_Host_SendControlRequest+0x1ca>
    1cc4:	90 91 a6 00 	lds	r25, 0x00A6
    1cc8:	9e 77       	andi	r25, 0x7E	; 126
    1cca:	90 93 a6 00 	sts	0x00A6, r25
		}

		Pipe_SetPipeToken(PIPE_TOKEN_IN);
		Pipe_Unfreeze();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_InReceived)) != HOST_SENDCONTROL_Successful)
    1cce:	90 91 a9 00 	lds	r25, 0x00A9
    1cd2:	90 64       	ori	r25, 0x40	; 64
    1cd4:	90 93 a9 00 	sts	0x00A9, r25
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
    1cd8:	e1 14       	cp	r14, r1
    1cda:	f1 04       	cpc	r15, r1
    1cdc:	29 f4       	brne	.+10     	; 0x1ce8 <USB_Host_SendControlRequest+0x1e4>
    1cde:	90 91 9e 00 	lds	r25, 0x009E

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    1ce2:	9e 7f       	andi	r25, 0xFE	; 254
    1ce4:	90 93 9e 00 	sts	0x009E, r25
    1ce8:	91 e0       	ldi	r25, 0x01	; 1
	bool BusSuspended    = USB_Host_IsBusSuspended();
	uint8_t ReturnStatus = USB_Host_SendControlRequest_PRV(BufferPtr);

	Pipe_Freeze();

	if (BusSuspended)
    1cea:	90 93 a8 00 	sts	0x00A8, r25
    1cee:	10 92 a8 00 	sts	0x00A8, r1
			 *             some events (such as device disconnections) will not fire until the bus is resumed.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				UHCON &= ~(1 << SOFEN);
    1cf2:	df 91       	pop	r29
    1cf4:	cf 91       	pop	r28
    1cf6:	1f 91       	pop	r17
    1cf8:	0f 91       	pop	r16
			 *  \param[in] Address  Address of the pipe to reset.
			 */
			static inline void Pipe_ResetPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ResetPipe(const uint8_t Address)
			{
				UPRST = (1 << (Address & PIPE_PIPENUM_MASK));
    1cfa:	ff 90       	pop	r15
    1cfc:	ef 90       	pop	r14
    1cfe:	08 95       	ret

00001d00 <USB_Host_SetDeviceConfiguration>:
				UPRST = 0;
    1d00:	cf 93       	push	r28
    1d02:	c8 2f       	mov	r28, r24
	  USB_Host_SuspendBus();

	Pipe_ResetPipe(PIPE_CONTROLPIPE);

	return ReturnStatus;
}
    1d04:	10 92 2e 05 	sts	0x052E, r1
    1d08:	89 e0       	ldi	r24, 0x09	; 9
    1d0a:	80 93 2f 05 	sts	0x052F, r24
    1d0e:	c0 93 30 05 	sts	0x0530, r28

uint8_t USB_Host_SetDeviceConfiguration(const uint8_t ConfigNumber)
{
	uint8_t ErrorCode;

	USB_ControlRequest = (USB_Request_Header_t)
    1d12:	10 92 31 05 	sts	0x0531, r1
    1d16:	10 92 33 05 	sts	0x0533, r1
    1d1a:	10 92 32 05 	sts	0x0532, r1
    1d1e:	10 92 35 05 	sts	0x0535, r1
    1d22:	10 92 34 05 	sts	0x0534, r1
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
    1d26:	10 92 a7 00 	sts	0x00A7, r1
			.wLength       = 0,
		};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	if ((ErrorCode = USB_Host_SendControlRequest(NULL)) == HOST_SENDCONTROL_Successful)
    1d2a:	80 e0       	ldi	r24, 0x00	; 0
    1d2c:	90 e0       	ldi	r25, 0x00	; 0
    1d2e:	ea de       	rcall	.-556    	; 0x1b04 <USB_Host_SendControlRequest>
    1d30:	88 23       	and	r24, r24
    1d32:	49 f4       	brne	.+18     	; 0x1d46 <USB_Host_SetDeviceConfiguration+0x46>
    1d34:	c0 93 2c 05 	sts	0x052C, r28
	{
		USB_Host_ConfigurationNumber = ConfigNumber;
    1d38:	cc 23       	and	r28, r28
		USB_HostState                = (ConfigNumber) ? HOST_STATE_Configured : HOST_STATE_Addressed;
    1d3a:	11 f0       	breq	.+4      	; 0x1d40 <USB_Host_SetDeviceConfiguration+0x40>
    1d3c:	9b e0       	ldi	r25, 0x0B	; 11
    1d3e:	01 c0       	rjmp	.+2      	; 0x1d42 <USB_Host_SetDeviceConfiguration+0x42>
    1d40:	9a e0       	ldi	r25, 0x0A	; 10
    1d42:	90 93 36 05 	sts	0x0536, r25
    1d46:	cf 91       	pop	r28
	}

	return ErrorCode;
}
    1d48:	08 95       	ret

00001d4a <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
    1d4a:	cf 93       	push	r28
			 *  \return Index of the currently selected pipe.
			 */
			static inline uint8_t Pipe_GetCurrentPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetCurrentPipe(void)
			{
				return ((UPNUM & PIPE_PIPENUM_MASK) | Pipe_GetPipeDirection());
    1d4c:	c0 91 a7 00 	lds	r28, 0x00A7
    1d50:	cf 70       	andi	r28, 0x0F	; 15
			 *  \return The currently selected pipe's direction, as a \c PIPE_DIR_* mask.
			 */
			static inline uint8_t Pipe_GetPipeDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetPipeDirection(void)
			{
				return (UPCFG0X & (1 << EPDIR)) ? PIPE_DIR_IN : PIPE_DIR_OUT;
    1d52:	80 91 aa 00 	lds	r24, 0x00AA
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
    1d56:	10 92 a7 00 	sts	0x00A7, r1
{
	uint8_t PrevPipe = Pipe_GetCurrentPipe();

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	USB_Host_ProcessNextHostState();
    1d5a:	12 db       	rcall	.-2524   	; 0x1380 <USB_Host_ProcessNextHostState>
    1d5c:	c0 93 a7 00 	sts	0x00A7, r28
    1d60:	cf 91       	pop	r28
	#elif defined(USB_CAN_BE_HOST)
		USB_HostTask();
	#elif defined(USB_CAN_BE_DEVICE)
		USB_DeviceTask();
	#endif
}
    1d62:	08 95       	ret

00001d64 <DCOMP_HID_Host_NextHIDInterface>:

	return HID_ENUMERROR_NoError;
}

static uint8_t DCOMP_HID_Host_NextHIDInterface(void* const CurrentDescriptor)
{
    1d64:	fc 01       	movw	r30, r24
	USB_Descriptor_Header_t* Header = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Header_t);

	if (Header->Type == DTYPE_Interface)
    1d66:	81 81       	ldd	r24, Z+1	; 0x01
    1d68:	84 30       	cpi	r24, 0x04	; 4
    1d6a:	19 f4       	brne	.+6      	; 0x1d72 <DCOMP_HID_Host_NextHIDInterface+0xe>
	{
		USB_Descriptor_Interface_t* Interface = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Interface_t);

		if (Interface->Class == HID_CSCP_HIDClass)
    1d6c:	85 81       	ldd	r24, Z+5	; 0x05
    1d6e:	83 30       	cpi	r24, 0x03	; 3
    1d70:	11 f0       	breq	.+4      	; 0x1d76 <DCOMP_HID_Host_NextHIDInterface+0x12>
		  return DESCRIPTOR_SEARCH_Found;
	}

	return DESCRIPTOR_SEARCH_NotFound;
    1d72:	82 e0       	ldi	r24, 0x02	; 2
    1d74:	08 95       	ret
	if (Header->Type == DTYPE_Interface)
	{
		USB_Descriptor_Interface_t* Interface = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Interface_t);

		if (Interface->Class == HID_CSCP_HIDClass)
		  return DESCRIPTOR_SEARCH_Found;
    1d76:	80 e0       	ldi	r24, 0x00	; 0
	}

	return DESCRIPTOR_SEARCH_NotFound;
}
    1d78:	08 95       	ret

00001d7a <DCOMP_HID_Host_NextHIDDescriptor>:

static uint8_t DCOMP_HID_Host_NextHIDDescriptor(void* const CurrentDescriptor)
{
	USB_Descriptor_Header_t* Header = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Header_t);

	if (Header->Type == HID_DTYPE_HID)
    1d7a:	fc 01       	movw	r30, r24
    1d7c:	81 81       	ldd	r24, Z+1	; 0x01
    1d7e:	81 32       	cpi	r24, 0x21	; 33
    1d80:	21 f0       	breq	.+8      	; 0x1d8a <DCOMP_HID_Host_NextHIDDescriptor+0x10>
	  return DESCRIPTOR_SEARCH_Found;
	else if (Header->Type == DTYPE_Interface)
    1d82:	84 30       	cpi	r24, 0x04	; 4
    1d84:	21 f4       	brne	.+8      	; 0x1d8e <DCOMP_HID_Host_NextHIDDescriptor+0x14>
	  return DESCRIPTOR_SEARCH_Fail;
    1d86:	81 e0       	ldi	r24, 0x01	; 1
    1d88:	08 95       	ret
static uint8_t DCOMP_HID_Host_NextHIDDescriptor(void* const CurrentDescriptor)
{
	USB_Descriptor_Header_t* Header = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Header_t);

	if (Header->Type == HID_DTYPE_HID)
	  return DESCRIPTOR_SEARCH_Found;
    1d8a:	80 e0       	ldi	r24, 0x00	; 0
    1d8c:	08 95       	ret
	else if (Header->Type == DTYPE_Interface)
	  return DESCRIPTOR_SEARCH_Fail;
	else
	  return DESCRIPTOR_SEARCH_NotFound;
    1d8e:	82 e0       	ldi	r24, 0x02	; 2
}
    1d90:	08 95       	ret

00001d92 <DCOMP_HID_Host_NextHIDInterfaceEndpoint>:

static uint8_t DCOMP_HID_Host_NextHIDInterfaceEndpoint(void* const CurrentDescriptor)
{
    1d92:	fc 01       	movw	r30, r24
	USB_Descriptor_Header_t* Header = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Header_t);

	if (Header->Type == DTYPE_Endpoint)
    1d94:	81 81       	ldd	r24, Z+1	; 0x01
    1d96:	85 30       	cpi	r24, 0x05	; 5
    1d98:	29 f4       	brne	.+10     	; 0x1da4 <DCOMP_HID_Host_NextHIDInterfaceEndpoint+0x12>
	{
		USB_Descriptor_Endpoint_t* Endpoint = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Endpoint_t);

		if (!(Pipe_IsEndpointBound(Endpoint->EndpointAddress)))
    1d9a:	82 81       	ldd	r24, Z+2	; 0x02
    1d9c:	b4 dc       	rcall	.-1688   	; 0x1706 <Pipe_IsEndpointBound>
    1d9e:	88 23       	and	r24, r24
    1da0:	19 f4       	brne	.+6      	; 0x1da8 <DCOMP_HID_Host_NextHIDInterfaceEndpoint+0x16>
    1da2:	04 c0       	rjmp	.+8      	; 0x1dac <DCOMP_HID_Host_NextHIDInterfaceEndpoint+0x1a>
    1da4:	84 30       	cpi	r24, 0x04	; 4
		  return DESCRIPTOR_SEARCH_Found;
	}
	else if (Header->Type == DTYPE_Interface)
    1da6:	21 f0       	breq	.+8      	; 0x1db0 <DCOMP_HID_Host_NextHIDInterfaceEndpoint+0x1e>
    1da8:	82 e0       	ldi	r24, 0x02	; 2
	{
		return DESCRIPTOR_SEARCH_Fail;
	}

	return DESCRIPTOR_SEARCH_NotFound;
    1daa:	08 95       	ret
    1dac:	80 e0       	ldi	r24, 0x00	; 0
	if (Header->Type == DTYPE_Endpoint)
	{
		USB_Descriptor_Endpoint_t* Endpoint = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Endpoint_t);

		if (!(Pipe_IsEndpointBound(Endpoint->EndpointAddress)))
		  return DESCRIPTOR_SEARCH_Found;
    1dae:	08 95       	ret
    1db0:	81 e0       	ldi	r24, 0x01	; 1
	}
	else if (Header->Type == DTYPE_Interface)
	{
		return DESCRIPTOR_SEARCH_Fail;
    1db2:	08 95       	ret

00001db4 <HID_Host_ConfigurePipes>:
	}

	return DESCRIPTOR_SEARCH_NotFound;
}
    1db4:	8f 92       	push	r8
#include "HIDClassHost.h"

uint8_t HID_Host_ConfigurePipes(USB_ClassInfo_HID_Host_t* const HIDInterfaceInfo,
                                uint16_t ConfigDescriptorSize,
                                void* ConfigDescriptorData)
{
    1db6:	9f 92       	push	r9
    1db8:	af 92       	push	r10
    1dba:	bf 92       	push	r11
    1dbc:	cf 92       	push	r12
    1dbe:	df 92       	push	r13
    1dc0:	ef 92       	push	r14
    1dc2:	ff 92       	push	r15
    1dc4:	0f 93       	push	r16
    1dc6:	1f 93       	push	r17
    1dc8:	cf 93       	push	r28
    1dca:	df 93       	push	r29
    1dcc:	00 d0       	rcall	.+0      	; 0x1dce <HID_Host_ConfigurePipes+0x1a>
    1dce:	00 d0       	rcall	.+0      	; 0x1dd0 <HID_Host_ConfigurePipes+0x1c>
    1dd0:	cd b7       	in	r28, 0x3d	; 61
    1dd2:	de b7       	in	r29, 0x3e	; 62
    1dd4:	8c 01       	movw	r16, r24
    1dd6:	7a 83       	std	Y+2, r23	; 0x02
    1dd8:	69 83       	std	Y+1, r22	; 0x01
    1dda:	5c 83       	std	Y+4, r21	; 0x04
    1ddc:	4b 83       	std	Y+3, r20	; 0x03
	USB_Descriptor_Endpoint_t*  DataINEndpoint  = NULL;
	USB_Descriptor_Endpoint_t*  DataOUTEndpoint = NULL;
	USB_Descriptor_Interface_t* HIDInterface    = NULL;
	USB_HID_Descriptor_HID_t*   HIDDescriptor   = NULL;

	memset(&HIDInterfaceInfo->State, 0x00, sizeof(HIDInterfaceInfo->State));
    1dde:	0f 96       	adiw	r24, 0x0f	; 15
    1de0:	fc 01       	movw	r30, r24
    1de2:	88 e0       	ldi	r24, 0x08	; 8
    1de4:	df 01       	movw	r26, r30
    1de6:	1d 92       	st	X+, r1
    1de8:	8a 95       	dec	r24
    1dea:	e9 f7       	brne	.-6      	; 0x1de6 <HID_Host_ConfigurePipes+0x32>

	if (DESCRIPTOR_TYPE(ConfigDescriptorData) != DTYPE_Configuration)
    1dec:	eb 81       	ldd	r30, Y+3	; 0x03
    1dee:	fc 81       	ldd	r31, Y+4	; 0x04
    1df0:	81 81       	ldd	r24, Z+1	; 0x01
    1df2:	82 30       	cpi	r24, 0x02	; 2
    1df4:	09 f0       	breq	.+2      	; 0x1df8 <HID_Host_ConfigurePipes+0x44>
    1df6:	97 c0       	rjmp	.+302    	; 0x1f26 <HID_Host_ConfigurePipes+0x172>
    1df8:	88 24       	eor	r8, r8
    1dfa:	99 24       	eor	r9, r9
    1dfc:	aa 24       	eor	r10, r10
    1dfe:	bb 24       	eor	r11, r11
    1e00:	ee 24       	eor	r14, r14
    1e02:	ff 24       	eor	r15, r15
    1e04:	cc 24       	eor	r12, r12
    1e06:	dd 24       	eor	r13, r13
	  return HID_ENUMERROR_InvalidConfigDescriptor;

	while (!(DataINEndpoint) || !(DataOUTEndpoint))
	{
		if (!(HIDInterface) ||
    1e08:	a1 14       	cp	r10, r1
    1e0a:	b1 04       	cpc	r11, r1
    1e0c:	51 f0       	breq	.+20     	; 0x1e22 <HID_Host_ConfigurePipes+0x6e>
		    USB_GetNextDescriptorComp(&ConfigDescriptorSize, &ConfigDescriptorData,
    1e0e:	ce 01       	movw	r24, r28
    1e10:	01 96       	adiw	r24, 0x01	; 1
    1e12:	be 01       	movw	r22, r28
    1e14:	6d 5f       	subi	r22, 0xFD	; 253
    1e16:	7f 4f       	sbci	r23, 0xFF	; 255
    1e18:	49 ec       	ldi	r20, 0xC9	; 201
    1e1a:	5e e0       	ldi	r21, 0x0E	; 14
    1e1c:	03 de       	rcall	.-1018   	; 0x1a24 <USB_GetNextDescriptorComp>
    1e1e:	88 23       	and	r24, r24
	if (DESCRIPTOR_TYPE(ConfigDescriptorData) != DTYPE_Configuration)
	  return HID_ENUMERROR_InvalidConfigDescriptor;

	while (!(DataINEndpoint) || !(DataOUTEndpoint))
	{
		if (!(HIDInterface) ||
    1e20:	51 f1       	breq	.+84     	; 0x1e76 <HID_Host_ConfigurePipes+0xc2>
    1e22:	c1 14       	cp	r12, r1
		    USB_GetNextDescriptorComp(&ConfigDescriptorSize, &ConfigDescriptorData,
		                              DCOMP_HID_Host_NextHIDInterfaceEndpoint) != DESCRIPTOR_SEARCH_COMP_Found)
		{
			if (DataINEndpoint)
    1e24:	d1 04       	cpc	r13, r1
    1e26:	b9 f5       	brne	.+110    	; 0x1e96 <HID_Host_ConfigurePipes+0xe2>
    1e28:	ce 01       	movw	r24, r28
			  break;

			do
			{
				if (USB_GetNextDescriptorComp(&ConfigDescriptorSize, &ConfigDescriptorData,
    1e2a:	01 96       	adiw	r24, 0x01	; 1
    1e2c:	be 01       	movw	r22, r28
    1e2e:	6d 5f       	subi	r22, 0xFD	; 253
    1e30:	7f 4f       	sbci	r23, 0xFF	; 255
    1e32:	42 eb       	ldi	r20, 0xB2	; 178
    1e34:	5e e0       	ldi	r21, 0x0E	; 14
    1e36:	f6 dd       	rcall	.-1044   	; 0x1a24 <USB_GetNextDescriptorComp>
    1e38:	88 23       	and	r24, r24
    1e3a:	09 f0       	breq	.+2      	; 0x1e3e <HID_Host_ConfigurePipes+0x8a>
    1e3c:	76 c0       	rjmp	.+236    	; 0x1f2a <HID_Host_ConfigurePipes+0x176>
    1e3e:	ab 80       	ldd	r10, Y+3	; 0x03
    1e40:	bc 80       	ldd	r11, Y+4	; 0x04
				                              DCOMP_HID_Host_NextHIDInterface) != DESCRIPTOR_SEARCH_COMP_Found)
				{
					return HID_ENUMERROR_NoCompatibleInterfaceFound;
				}

				HIDInterface = DESCRIPTOR_PCAST(ConfigDescriptorData, USB_Descriptor_Interface_t);
    1e42:	f8 01       	movw	r30, r16
    1e44:	84 85       	ldd	r24, Z+12	; 0x0c
			} while (HIDInterfaceInfo->Config.HIDInterfaceProtocol &&
    1e46:	88 23       	and	r24, r24
    1e48:	31 f0       	breq	.+12     	; 0x1e56 <HID_Host_ConfigurePipes+0xa2>
					 (HIDInterface->Protocol != HIDInterfaceInfo->Config.HIDInterfaceProtocol));
    1e4a:	d5 01       	movw	r26, r10
    1e4c:	17 96       	adiw	r26, 0x07	; 7
				{
					return HID_ENUMERROR_NoCompatibleInterfaceFound;
				}

				HIDInterface = DESCRIPTOR_PCAST(ConfigDescriptorData, USB_Descriptor_Interface_t);
			} while (HIDInterfaceInfo->Config.HIDInterfaceProtocol &&
    1e4e:	9c 91       	ld	r25, X
    1e50:	17 97       	sbiw	r26, 0x07	; 7
    1e52:	98 17       	cp	r25, r24
    1e54:	49 f7       	brne	.-46     	; 0x1e28 <HID_Host_ConfigurePipes+0x74>
    1e56:	ce 01       	movw	r24, r28
    1e58:	01 96       	adiw	r24, 0x01	; 1
					 (HIDInterface->Protocol != HIDInterfaceInfo->Config.HIDInterfaceProtocol));

			if (USB_GetNextDescriptorComp(&ConfigDescriptorSize, &ConfigDescriptorData,
    1e5a:	be 01       	movw	r22, r28
    1e5c:	6d 5f       	subi	r22, 0xFD	; 253
    1e5e:	7f 4f       	sbci	r23, 0xFF	; 255
    1e60:	4d eb       	ldi	r20, 0xBD	; 189
    1e62:	5e e0       	ldi	r21, 0x0E	; 14
    1e64:	df dd       	rcall	.-1090   	; 0x1a24 <USB_GetNextDescriptorComp>
    1e66:	88 23       	and	r24, r24
    1e68:	09 f0       	breq	.+2      	; 0x1e6c <HID_Host_ConfigurePipes+0xb8>
    1e6a:	5f c0       	rjmp	.+190    	; 0x1f2a <HID_Host_ConfigurePipes+0x176>
    1e6c:	8b 80       	ldd	r8, Y+3	; 0x03
    1e6e:	9c 80       	ldd	r9, Y+4	; 0x04
    1e70:	ee 24       	eor	r14, r14
			                              DCOMP_HID_Host_NextHIDDescriptor) != DESCRIPTOR_SEARCH_COMP_Found)
			{
				return HID_ENUMERROR_NoCompatibleInterfaceFound;
			}

			HIDDescriptor = DESCRIPTOR_PCAST(ConfigDescriptorData, USB_HID_Descriptor_HID_t);
    1e72:	ff 24       	eor	r15, r15
    1e74:	c9 cf       	rjmp	.-110    	; 0x1e08 <HID_Host_ConfigurePipes+0x54>

			DataINEndpoint  = NULL;
			DataOUTEndpoint = NULL;
    1e76:	eb 81       	ldd	r30, Y+3	; 0x03
    1e78:	fc 81       	ldd	r31, Y+4	; 0x04
    1e7a:	82 81       	ldd	r24, Z+2	; 0x02

			continue;
		}

		USB_Descriptor_Endpoint_t* EndpointData = DESCRIPTOR_PCAST(ConfigDescriptorData, USB_Descriptor_Endpoint_t);
    1e7c:	87 ff       	sbrs	r24, 7
    1e7e:	02 c0       	rjmp	.+4      	; 0x1e84 <HID_Host_ConfigurePipes+0xd0>

		if ((EndpointData->EndpointAddress & ENDPOINT_DIR_MASK) == ENDPOINT_DIR_IN)
    1e80:	6f 01       	movw	r12, r30
    1e82:	01 c0       	rjmp	.+2      	; 0x1e86 <HID_Host_ConfigurePipes+0xd2>
    1e84:	7f 01       	movw	r14, r30
		  DataINEndpoint  = EndpointData;
    1e86:	c1 14       	cp	r12, r1
    1e88:	d1 04       	cpc	r13, r1
		else
		  DataOUTEndpoint = EndpointData;
    1e8a:	09 f4       	brne	.+2      	; 0x1e8e <HID_Host_ConfigurePipes+0xda>
	memset(&HIDInterfaceInfo->State, 0x00, sizeof(HIDInterfaceInfo->State));

	if (DESCRIPTOR_TYPE(ConfigDescriptorData) != DTYPE_Configuration)
	  return HID_ENUMERROR_InvalidConfigDescriptor;

	while (!(DataINEndpoint) || !(DataOUTEndpoint))
    1e8c:	bd cf       	rjmp	.-134    	; 0x1e08 <HID_Host_ConfigurePipes+0x54>
    1e8e:	e1 14       	cp	r14, r1
    1e90:	f1 04       	cpc	r15, r1
    1e92:	09 f4       	brne	.+2      	; 0x1e96 <HID_Host_ConfigurePipes+0xe2>
    1e94:	b9 cf       	rjmp	.-142    	; 0x1e08 <HID_Host_ConfigurePipes+0x54>
    1e96:	f6 01       	movw	r30, r12
    1e98:	84 81       	ldd	r24, Z+4	; 0x04
    1e9a:	95 81       	ldd	r25, Z+5	; 0x05
		  DataINEndpoint  = EndpointData;
		else
		  DataOUTEndpoint = EndpointData;
	}

	HIDInterfaceInfo->Config.DataINPipe.Size  = le16_to_cpu(DataINEndpoint->EndpointSize);
    1e9c:	d8 01       	movw	r26, r16
    1e9e:	12 96       	adiw	r26, 0x02	; 2
    1ea0:	9c 93       	st	X, r25
    1ea2:	8e 93       	st	-X, r24
    1ea4:	11 97       	sbiw	r26, 0x01	; 1
    1ea6:	82 81       	ldd	r24, Z+2	; 0x02
    1ea8:	13 96       	adiw	r26, 0x03	; 3
    1eaa:	8c 93       	st	X, r24
	HIDInterfaceInfo->Config.DataINPipe.EndpointAddress = DataINEndpoint->EndpointAddress;
    1eac:	13 97       	sbiw	r26, 0x03	; 3
    1eae:	83 e0       	ldi	r24, 0x03	; 3
    1eb0:	c8 2e       	mov	r12, r24
    1eb2:	14 96       	adiw	r26, 0x04	; 4
	HIDInterfaceInfo->Config.DataINPipe.Type  = EP_TYPE_INTERRUPT;
    1eb4:	cc 92       	st	X, r12
    1eb6:	c8 01       	movw	r24, r16
    1eb8:	61 e0       	ldi	r22, 0x01	; 1
    1eba:	f0 db       	rcall	.-2080   	; 0x169c <Pipe_ConfigurePipeTable>

	if (!(Pipe_ConfigurePipeTable(&HIDInterfaceInfo->Config.DataINPipe, 1)))
    1ebc:	88 23       	and	r24, r24
    1ebe:	b9 f1       	breq	.+110    	; 0x1f2e <HID_Host_ConfigurePipes+0x17a>
    1ec0:	e1 14       	cp	r14, r1
    1ec2:	f1 04       	cpc	r15, r1
    1ec4:	a1 f0       	breq	.+40     	; 0x1eee <HID_Host_ConfigurePipes+0x13a>
    1ec6:	f7 01       	movw	r30, r14
	  return false;

	if (DataOUTEndpoint)
    1ec8:	84 81       	ldd	r24, Z+4	; 0x04
    1eca:	95 81       	ldd	r25, Z+5	; 0x05
    1ecc:	d8 01       	movw	r26, r16
	{
		HIDInterfaceInfo->Config.DataOUTPipe.Size = le16_to_cpu(DataOUTEndpoint->EndpointSize);
    1ece:	18 96       	adiw	r26, 0x08	; 8
    1ed0:	9c 93       	st	X, r25
    1ed2:	8e 93       	st	-X, r24
    1ed4:	17 97       	sbiw	r26, 0x07	; 7
    1ed6:	82 81       	ldd	r24, Z+2	; 0x02
    1ed8:	19 96       	adiw	r26, 0x09	; 9
    1eda:	8c 93       	st	X, r24
    1edc:	19 97       	sbiw	r26, 0x09	; 9
		HIDInterfaceInfo->Config.DataOUTPipe.EndpointAddress = DataOUTEndpoint->EndpointAddress;
    1ede:	1a 96       	adiw	r26, 0x0a	; 10
    1ee0:	cc 92       	st	X, r12
    1ee2:	c8 01       	movw	r24, r16
    1ee4:	06 96       	adiw	r24, 0x06	; 6
		HIDInterfaceInfo->Config.DataOUTPipe.Type = EP_TYPE_INTERRUPT;
    1ee6:	61 e0       	ldi	r22, 0x01	; 1
    1ee8:	d9 db       	rcall	.-2126   	; 0x169c <Pipe_ConfigurePipeTable>

		if (!(Pipe_ConfigurePipeTable(&HIDInterfaceInfo->Config.DataOUTPipe, 1)))
    1eea:	88 23       	and	r24, r24
    1eec:	01 f1       	breq	.+64     	; 0x1f2e <HID_Host_ConfigurePipes+0x17a>
    1eee:	f5 01       	movw	r30, r10
    1ef0:	82 81       	ldd	r24, Z+2	; 0x02
    1ef2:	d8 01       	movw	r26, r16
    1ef4:	50 96       	adiw	r26, 0x10	; 16
    1ef6:	8c 93       	st	X, r24
		  return false;
	}

	HIDInterfaceInfo->State.InterfaceNumber      = HIDInterface->InterfaceNumber;
    1ef8:	50 97       	sbiw	r26, 0x10	; 16
    1efa:	f4 01       	movw	r30, r8
    1efc:	87 81       	ldd	r24, Z+7	; 0x07
    1efe:	90 85       	ldd	r25, Z+8	; 0x08
    1f00:	55 96       	adiw	r26, 0x15	; 21
    1f02:	9c 93       	st	X, r25
	HIDInterfaceInfo->State.HIDReportSize        = LE16_TO_CPU(HIDDescriptor->HIDReportLength);
    1f04:	8e 93       	st	-X, r24
    1f06:	54 97       	sbiw	r26, 0x14	; 20
    1f08:	81 e0       	ldi	r24, 0x01	; 1
    1f0a:	d5 01       	movw	r26, r10
    1f0c:	16 96       	adiw	r26, 0x06	; 6
    1f0e:	9c 91       	ld	r25, X
    1f10:	16 97       	sbiw	r26, 0x06	; 6
	HIDInterfaceInfo->State.SupportsBootProtocol = (HIDInterface->SubClass != HID_CSCP_NonBootProtocol);
    1f12:	99 23       	and	r25, r25
    1f14:	09 f4       	brne	.+2      	; 0x1f18 <HID_Host_ConfigurePipes+0x164>
    1f16:	80 e0       	ldi	r24, 0x00	; 0
    1f18:	f8 01       	movw	r30, r16
    1f1a:	81 8b       	std	Z+17, r24	; 0x11
    1f1c:	88 e0       	ldi	r24, 0x08	; 8
    1f1e:	86 8b       	std	Z+22, r24	; 0x16
    1f20:	81 e0       	ldi	r24, 0x01	; 1
    1f22:	87 87       	std	Z+15, r24	; 0x0f
    1f24:	04 c0       	rjmp	.+8      	; 0x1f2e <HID_Host_ConfigurePipes+0x17a>
	HIDInterfaceInfo->State.LargestReportSize    = 8;
    1f26:	81 e0       	ldi	r24, 0x01	; 1
    1f28:	03 c0       	rjmp	.+6      	; 0x1f30 <HID_Host_ConfigurePipes+0x17c>
	HIDInterfaceInfo->State.IsActive             = true;
    1f2a:	82 e0       	ldi	r24, 0x02	; 2
    1f2c:	01 c0       	rjmp	.+2      	; 0x1f30 <HID_Host_ConfigurePipes+0x17c>
    1f2e:	80 e0       	ldi	r24, 0x00	; 0
	USB_HID_Descriptor_HID_t*   HIDDescriptor   = NULL;

	memset(&HIDInterfaceInfo->State, 0x00, sizeof(HIDInterfaceInfo->State));

	if (DESCRIPTOR_TYPE(ConfigDescriptorData) != DTYPE_Configuration)
	  return HID_ENUMERROR_InvalidConfigDescriptor;
    1f30:	0f 90       	pop	r0
    1f32:	0f 90       	pop	r0
					 (HIDInterface->Protocol != HIDInterfaceInfo->Config.HIDInterfaceProtocol));

			if (USB_GetNextDescriptorComp(&ConfigDescriptorSize, &ConfigDescriptorData,
			                              DCOMP_HID_Host_NextHIDDescriptor) != DESCRIPTOR_SEARCH_COMP_Found)
			{
				return HID_ENUMERROR_NoCompatibleInterfaceFound;
    1f34:	0f 90       	pop	r0
    1f36:	0f 90       	pop	r0
		HIDInterfaceInfo->Config.DataOUTPipe.Size = le16_to_cpu(DataOUTEndpoint->EndpointSize);
		HIDInterfaceInfo->Config.DataOUTPipe.EndpointAddress = DataOUTEndpoint->EndpointAddress;
		HIDInterfaceInfo->Config.DataOUTPipe.Type = EP_TYPE_INTERRUPT;

		if (!(Pipe_ConfigurePipeTable(&HIDInterfaceInfo->Config.DataOUTPipe, 1)))
		  return false;
    1f38:	df 91       	pop	r29
	HIDInterfaceInfo->State.SupportsBootProtocol = (HIDInterface->SubClass != HID_CSCP_NonBootProtocol);
	HIDInterfaceInfo->State.LargestReportSize    = 8;
	HIDInterfaceInfo->State.IsActive             = true;

	return HID_ENUMERROR_NoError;
}
    1f3a:	cf 91       	pop	r28
    1f3c:	1f 91       	pop	r17
    1f3e:	0f 91       	pop	r16
    1f40:	ff 90       	pop	r15
    1f42:	ef 90       	pop	r14
    1f44:	df 90       	pop	r13
    1f46:	cf 90       	pop	r12
    1f48:	bf 90       	pop	r11
    1f4a:	af 90       	pop	r10
    1f4c:	9f 90       	pop	r9
    1f4e:	8f 90       	pop	r8
    1f50:	08 95       	ret

00001f52 <HID_Host_SetReportProtocol>:
    1f52:	af 92       	push	r10
    1f54:	bf 92       	push	r11
    1f56:	cf 92       	push	r12
    1f58:	df 92       	push	r13
    1f5a:	ef 92       	push	r14
	return USB_Host_SendControlRequest(NULL);
}

#if !defined(HID_HOST_BOOT_PROTOCOL_ONLY)
uint8_t HID_Host_SetReportProtocol(USB_ClassInfo_HID_Host_t* const HIDInterfaceInfo)
{
    1f5c:	ff 92       	push	r15
    1f5e:	0f 93       	push	r16
    1f60:	1f 93       	push	r17
    1f62:	cf 93       	push	r28
    1f64:	df 93       	push	r29
    1f66:	cd b7       	in	r28, 0x3d	; 61
    1f68:	de b7       	in	r29, 0x3e	; 62
    1f6a:	8c 01       	movw	r16, r24

	uint16_t LargestReportSizeBits = HIDInterfaceInfo->Config.HIDParserData->LargestReportSizeBits;
	HIDInterfaceInfo->State.LargestReportSize = (LargestReportSizeBits >> 3) + ((LargestReportSizeBits & 0x07) != 0);

	return 0;
}
    1f6c:	ad b6       	in	r10, 0x3d	; 61
    1f6e:	be b6       	in	r11, 0x3e	; 62
#if !defined(HID_HOST_BOOT_PROTOCOL_ONLY)
uint8_t HID_Host_SetReportProtocol(USB_ClassInfo_HID_Host_t* const HIDInterfaceInfo)
{
	uint8_t ErrorCode;

	uint8_t HIDReportData[HIDInterfaceInfo->State.HIDReportSize];
    1f70:	dc 01       	movw	r26, r24
    1f72:	54 96       	adiw	r26, 0x14	; 20
    1f74:	4d 91       	ld	r20, X+
    1f76:	5c 91       	ld	r21, X
    1f78:	55 97       	sbiw	r26, 0x15	; 21
    1f7a:	ed b7       	in	r30, 0x3d	; 61
    1f7c:	fe b7       	in	r31, 0x3e	; 62
    1f7e:	e4 1b       	sub	r30, r20
    1f80:	f5 0b       	sbc	r31, r21
    1f82:	0f b6       	in	r0, 0x3f	; 63
    1f84:	f8 94       	cli
    1f86:	fe bf       	out	0x3e, r31	; 62
    1f88:	0f be       	out	0x3f, r0	; 63
    1f8a:	ed bf       	out	0x3d, r30	; 61
    1f8c:	2d b7       	in	r18, 0x3d	; 61
    1f8e:	3e b7       	in	r19, 0x3e	; 62
    1f90:	2f 5f       	subi	r18, 0xFF	; 255
    1f92:	3f 4f       	sbci	r19, 0xFF	; 255

	USB_ControlRequest = (USB_Request_Header_t)
    1f94:	50 96       	adiw	r26, 0x10	; 16
    1f96:	6c 91       	ld	r22, X
    1f98:	81 e8       	ldi	r24, 0x81	; 129
    1f9a:	80 93 2e 05 	sts	0x052E, r24
    1f9e:	86 e0       	ldi	r24, 0x06	; 6
    1fa0:	80 93 2f 05 	sts	0x052F, r24
    1fa4:	80 e0       	ldi	r24, 0x00	; 0
    1fa6:	92 e2       	ldi	r25, 0x22	; 34
    1fa8:	90 93 31 05 	sts	0x0531, r25
    1fac:	80 93 30 05 	sts	0x0530, r24
    1fb0:	72 e3       	ldi	r23, 0x32	; 50
    1fb2:	e7 2e       	mov	r14, r23
    1fb4:	75 e0       	ldi	r23, 0x05	; 5
    1fb6:	f7 2e       	mov	r15, r23
    1fb8:	60 93 32 05 	sts	0x0532, r22
    1fbc:	d7 01       	movw	r26, r14
    1fbe:	11 96       	adiw	r26, 0x01	; 1
    1fc0:	1c 92       	st	X, r1
    1fc2:	50 93 35 05 	sts	0x0535, r21
    1fc6:	40 93 34 05 	sts	0x0534, r20
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
    1fca:	10 92 a7 00 	sts	0x00A7, r1
			.wLength       = HIDInterfaceInfo->State.HIDReportSize,
		};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	if ((ErrorCode = USB_Host_SendControlRequest(HIDReportData)) != HOST_SENDCONTROL_Successful)
    1fce:	d2 2e       	mov	r13, r18
    1fd0:	c3 2e       	mov	r12, r19
    1fd2:	c9 01       	movw	r24, r18
    1fd4:	97 dd       	rcall	.-1234   	; 0x1b04 <USB_Host_SendControlRequest>
    1fd6:	88 23       	and	r24, r24
    1fd8:	09 f0       	breq	.+2      	; 0x1fdc <HID_Host_SetReportProtocol+0x8a>
    1fda:	50 c0       	rjmp	.+160    	; 0x207c <HID_Host_SetReportProtocol+0x12a>
    1fdc:	f8 01       	movw	r30, r16
	  return ErrorCode;

	if (HIDInterfaceInfo->State.UsingBootProtocol)
    1fde:	83 89       	ldd	r24, Z+19	; 0x13
    1fe0:	88 23       	and	r24, r24
    1fe2:	e9 f0       	breq	.+58     	; 0x201e <HID_Host_SetReportProtocol+0xcc>
    1fe4:	20 89       	ldd	r18, Z+16	; 0x10
	{
		USB_ControlRequest = (USB_Request_Header_t)
    1fe6:	81 e2       	ldi	r24, 0x21	; 33
    1fe8:	80 93 2e 05 	sts	0x052E, r24
    1fec:	8b e0       	ldi	r24, 0x0B	; 11
    1fee:	80 93 2f 05 	sts	0x052F, r24
    1ff2:	81 e0       	ldi	r24, 0x01	; 1
    1ff4:	90 e0       	ldi	r25, 0x00	; 0
    1ff6:	90 93 31 05 	sts	0x0531, r25
    1ffa:	80 93 30 05 	sts	0x0530, r24
    1ffe:	20 93 32 05 	sts	0x0532, r18
    2002:	d7 01       	movw	r26, r14
    2004:	11 96       	adiw	r26, 0x01	; 1
    2006:	1c 92       	st	X, r1
    2008:	10 92 35 05 	sts	0x0535, r1
    200c:	10 92 34 05 	sts	0x0534, r1
    2010:	80 e0       	ldi	r24, 0x00	; 0
				.wValue        = 1,
				.wIndex        = HIDInterfaceInfo->State.InterfaceNumber,
				.wLength       = 0,
			};

		if ((ErrorCode = USB_Host_SendControlRequest(NULL)) != HOST_SENDCONTROL_Successful)
    2012:	90 e0       	ldi	r25, 0x00	; 0
    2014:	77 dd       	rcall	.-1298   	; 0x1b04 <USB_Host_SendControlRequest>
    2016:	88 23       	and	r24, r24
    2018:	89 f5       	brne	.+98     	; 0x207c <HID_Host_SetReportProtocol+0x12a>
    201a:	f8 01       	movw	r30, r16
    201c:	13 8a       	std	Z+19, r1	; 0x13
		  return ErrorCode;

		HIDInterfaceInfo->State.UsingBootProtocol = false;
    201e:	d8 01       	movw	r26, r16
    2020:	1d 96       	adiw	r26, 0x0d	; 13
	}

	if (HIDInterfaceInfo->Config.HIDParserData == NULL)
    2022:	4d 91       	ld	r20, X+
    2024:	5c 91       	ld	r21, X
    2026:	1e 97       	sbiw	r26, 0x0e	; 14
    2028:	41 15       	cp	r20, r1
    202a:	51 05       	cpc	r21, r1
    202c:	31 f1       	breq	.+76     	; 0x207a <HID_Host_SetReportProtocol+0x128>
    202e:	54 96       	adiw	r26, 0x14	; 20
    2030:	6d 91       	ld	r22, X+
	  return HID_ERROR_LOGICAL;

	if ((ErrorCode = USB_ProcessHIDReport(HIDReportData, HIDInterfaceInfo->State.HIDReportSize,
    2032:	7c 91       	ld	r23, X
    2034:	55 97       	sbiw	r26, 0x15	; 21
    2036:	8d 2d       	mov	r24, r13
    2038:	9c 2d       	mov	r25, r12
    203a:	0e 94 59 05 	call	0xab2	; 0xab2 <USB_ProcessHIDReport>
    203e:	88 23       	and	r24, r24
    2040:	11 f0       	breq	.+4      	; 0x2046 <HID_Host_SetReportProtocol+0xf4>
    2042:	80 68       	ori	r24, 0x80	; 128
    2044:	1b c0       	rjmp	.+54     	; 0x207c <HID_Host_SetReportProtocol+0x12a>
	                                      HIDInterfaceInfo->Config.HIDParserData)) != HID_PARSE_Successful)
	{
		return HID_ERROR_LOGICAL | ErrorCode;
    2046:	d8 01       	movw	r26, r16
    2048:	1d 96       	adiw	r26, 0x0d	; 13
	}

	uint16_t LargestReportSizeBits = HIDInterfaceInfo->Config.HIDParserData->LargestReportSizeBits;
    204a:	ed 91       	ld	r30, X+
    204c:	fc 91       	ld	r31, X
    204e:	1e 97       	sbiw	r26, 0x0e	; 14
    2050:	ea 52       	subi	r30, 0x2A	; 42
    2052:	fc 4f       	sbci	r31, 0xFC	; 252
    2054:	20 81       	ld	r18, Z
    2056:	31 81       	ldd	r19, Z+1	; 0x01
    2058:	a9 01       	movw	r20, r18
    205a:	47 70       	andi	r20, 0x07	; 7
	HIDInterfaceInfo->State.LargestReportSize = (LargestReportSizeBits >> 3) + ((LargestReportSizeBits & 0x07) != 0);
    205c:	50 70       	andi	r21, 0x00	; 0
    205e:	91 e0       	ldi	r25, 0x01	; 1
    2060:	41 15       	cp	r20, r1
    2062:	51 05       	cpc	r21, r1
    2064:	09 f4       	brne	.+2      	; 0x2068 <HID_Host_SetReportProtocol+0x116>
    2066:	90 e0       	ldi	r25, 0x00	; 0
    2068:	43 e0       	ldi	r20, 0x03	; 3
    206a:	36 95       	lsr	r19
    206c:	27 95       	ror	r18
    206e:	4a 95       	dec	r20
    2070:	e1 f7       	brne	.-8      	; 0x206a <HID_Host_SetReportProtocol+0x118>
    2072:	29 0f       	add	r18, r25
    2074:	f8 01       	movw	r30, r16
    2076:	26 8b       	std	Z+22, r18	; 0x16
    2078:	01 c0       	rjmp	.+2      	; 0x207c <HID_Host_SetReportProtocol+0x12a>
    207a:	80 e8       	ldi	r24, 0x80	; 128
    207c:	0f b6       	in	r0, 0x3f	; 63

		HIDInterfaceInfo->State.UsingBootProtocol = false;
	}

	if (HIDInterfaceInfo->Config.HIDParserData == NULL)
	  return HID_ERROR_LOGICAL;
    207e:	f8 94       	cli

	uint16_t LargestReportSizeBits = HIDInterfaceInfo->Config.HIDParserData->LargestReportSizeBits;
	HIDInterfaceInfo->State.LargestReportSize = (LargestReportSizeBits >> 3) + ((LargestReportSizeBits & 0x07) != 0);

	return 0;
}
    2080:	be be       	out	0x3e, r11	; 62
    2082:	0f be       	out	0x3f, r0	; 63
    2084:	ad be       	out	0x3d, r10	; 61
    2086:	df 91       	pop	r29
    2088:	cf 91       	pop	r28
    208a:	1f 91       	pop	r17
    208c:	0f 91       	pop	r16
    208e:	ff 90       	pop	r15
    2090:	ef 90       	pop	r14
    2092:	df 90       	pop	r13
    2094:	cf 90       	pop	r12
    2096:	bf 90       	pop	r11
    2098:	af 90       	pop	r10
    209a:	08 95       	ret

0000209c <Serial_putchar>:
			 *  \param[in] DataByte  Byte to transmit through the USART.
			 */
			static inline void Serial_SendByte(const char DataByte) ATTR_ALWAYS_INLINE;
			static inline void Serial_SendByte(const char DataByte)
			{
				while (!(UCSR1A & (1 << UDRE1)));
    209c:	90 91 c8 00 	lds	r25, 0x00C8
    20a0:	95 ff       	sbrs	r25, 5
    20a2:	fc cf       	rjmp	.-8      	; 0x209c <Serial_putchar>
				UDR1 = DataByte;
    20a4:	80 93 ce 00 	sts	0x00CE, r24
{
	(void)Stream;

	Serial_SendByte(DataByte);
	return 0;
}
    20a8:	80 e0       	ldi	r24, 0x00	; 0
    20aa:	90 e0       	ldi	r25, 0x00	; 0
    20ac:	08 95       	ret

000020ae <Serial_getchar>:
			 *  \return Boolean \c true if a character has been received, \c false otherwise.
			 */
			static inline bool Serial_IsCharReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Serial_IsCharReceived(void)
			{
				return ((UCSR1A & (1 << RXC1)) ? true : false);
    20ae:	80 91 c8 00 	lds	r24, 0x00C8

int Serial_getchar(FILE *Stream)
{
	(void)Stream;

	if (!(Serial_IsCharReceived()))
    20b2:	87 ff       	sbrs	r24, 7
    20b4:	08 c0       	rjmp	.+16     	; 0x20c6 <Serial_getchar+0x18>
    20b6:	80 91 c8 00 	lds	r24, 0x00C8
			 *  \return Next byte received from the USART, or a negative value if no byte has been received.
			 */
			static inline int16_t Serial_ReceiveByte(void) ATTR_ALWAYS_INLINE;
			static inline int16_t Serial_ReceiveByte(void)
			{
				if (!(Serial_IsCharReceived()))
    20ba:	87 ff       	sbrs	r24, 7
    20bc:	07 c0       	rjmp	.+14     	; 0x20cc <Serial_getchar+0x1e>
				  return -1;

				return UDR1;
    20be:	80 91 ce 00 	lds	r24, 0x00CE
    20c2:	90 e0       	ldi	r25, 0x00	; 0
    20c4:	08 95       	ret
	  return _FDEV_EOF;
    20c6:	8e ef       	ldi	r24, 0xFE	; 254
    20c8:	9f ef       	ldi	r25, 0xFF	; 255
    20ca:	08 95       	ret
			 */
			static inline int16_t Serial_ReceiveByte(void) ATTR_ALWAYS_INLINE;
			static inline int16_t Serial_ReceiveByte(void)
			{
				if (!(Serial_IsCharReceived()))
				  return -1;
    20cc:	8f ef       	ldi	r24, 0xFF	; 255
    20ce:	9f ef       	ldi	r25, 0xFF	; 255

	return Serial_ReceiveByte();
}
    20d0:	08 95       	ret

000020d2 <Serial_CreateStream>:
	while (Length--)
	  Serial_SendByte(*((uint8_t*)Buffer++));
}

void Serial_CreateStream(FILE* Stream)
{
    20d2:	fc 01       	movw	r30, r24
	if (!(Stream))
    20d4:	00 97       	sbiw	r24, 0x00	; 0
    20d6:	51 f4       	brne	.+20     	; 0x20ec <Serial_CreateStream+0x1a>
	{
		Stream = &USARTSerialStream;
		stdin  = Stream;
    20d8:	e7 e3       	ldi	r30, 0x37	; 55
    20da:	f5 e0       	ldi	r31, 0x05	; 5
    20dc:	f0 93 46 05 	sts	0x0546, r31
    20e0:	e0 93 45 05 	sts	0x0545, r30
		stdout = Stream;
    20e4:	f0 93 48 05 	sts	0x0548, r31
    20e8:	e0 93 47 05 	sts	0x0547, r30
	}

	*Stream = (FILE)FDEV_SETUP_STREAM(Serial_putchar, Serial_getchar, _FDEV_SETUP_RW);
    20ec:	8e e0       	ldi	r24, 0x0E	; 14
    20ee:	df 01       	movw	r26, r30
    20f0:	1d 92       	st	X+, r1
    20f2:	8a 95       	dec	r24
    20f4:	e9 f7       	brne	.-6      	; 0x20f0 <Serial_CreateStream+0x1e>
    20f6:	83 e0       	ldi	r24, 0x03	; 3
    20f8:	83 83       	std	Z+3, r24	; 0x03
    20fa:	8e e4       	ldi	r24, 0x4E	; 78
    20fc:	90 e1       	ldi	r25, 0x10	; 16
    20fe:	91 87       	std	Z+9, r25	; 0x09
    2100:	80 87       	std	Z+8, r24	; 0x08
    2102:	87 e5       	ldi	r24, 0x57	; 87
    2104:	90 e1       	ldi	r25, 0x10	; 16
    2106:	93 87       	std	Z+11, r25	; 0x0b
    2108:	82 87       	std	Z+10, r24	; 0x0a
}
    210a:	08 95       	ret

0000210c <printf_P>:
    210c:	cf 93       	push	r28
    210e:	df 93       	push	r29
    2110:	cd b7       	in	r28, 0x3d	; 61
    2112:	de b7       	in	r29, 0x3e	; 62
    2114:	fe 01       	movw	r30, r28
    2116:	35 96       	adiw	r30, 0x05	; 5
    2118:	61 91       	ld	r22, Z+
    211a:	71 91       	ld	r23, Z+
    211c:	80 91 47 05 	lds	r24, 0x0547
    2120:	90 91 48 05 	lds	r25, 0x0548
    2124:	dc 01       	movw	r26, r24
    2126:	13 96       	adiw	r26, 0x03	; 3
    2128:	2c 91       	ld	r18, X
    212a:	13 97       	sbiw	r26, 0x03	; 3
    212c:	28 60       	ori	r18, 0x08	; 8
    212e:	13 96       	adiw	r26, 0x03	; 3
    2130:	2c 93       	st	X, r18
    2132:	af 01       	movw	r20, r30
    2134:	39 d0       	rcall	.+114    	; 0x21a8 <vfprintf>
    2136:	e0 91 47 05 	lds	r30, 0x0547
    213a:	f0 91 48 05 	lds	r31, 0x0548
    213e:	23 81       	ldd	r18, Z+3	; 0x03
    2140:	27 7f       	andi	r18, 0xF7	; 247
    2142:	23 83       	std	Z+3, r18	; 0x03
    2144:	df 91       	pop	r29
    2146:	cf 91       	pop	r28
    2148:	08 95       	ret

0000214a <puts_P>:
    214a:	0f 93       	push	r16
    214c:	1f 93       	push	r17
    214e:	cf 93       	push	r28
    2150:	df 93       	push	r29
    2152:	8c 01       	movw	r16, r24
    2154:	e0 91 47 05 	lds	r30, 0x0547
    2158:	f0 91 48 05 	lds	r31, 0x0548
    215c:	83 81       	ldd	r24, Z+3	; 0x03
    215e:	81 ff       	sbrs	r24, 1
    2160:	1b c0       	rjmp	.+54     	; 0x2198 <puts_P+0x4e>
    2162:	c0 e0       	ldi	r28, 0x00	; 0
    2164:	d0 e0       	ldi	r29, 0x00	; 0
    2166:	07 c0       	rjmp	.+14     	; 0x2176 <puts_P+0x2c>
    2168:	09 95       	icall
    216a:	00 97       	sbiw	r24, 0x00	; 0
    216c:	11 f0       	breq	.+4      	; 0x2172 <puts_P+0x28>
    216e:	cf ef       	ldi	r28, 0xFF	; 255
    2170:	df ef       	ldi	r29, 0xFF	; 255
    2172:	0f 5f       	subi	r16, 0xFF	; 255
    2174:	1f 4f       	sbci	r17, 0xFF	; 255
    2176:	f8 01       	movw	r30, r16
    2178:	84 91       	lpm	r24, Z
    217a:	60 91 47 05 	lds	r22, 0x0547
    217e:	70 91 48 05 	lds	r23, 0x0548
    2182:	db 01       	movw	r26, r22
    2184:	18 96       	adiw	r26, 0x08	; 8
    2186:	ed 91       	ld	r30, X+
    2188:	fc 91       	ld	r31, X
    218a:	19 97       	sbiw	r26, 0x09	; 9
    218c:	88 23       	and	r24, r24
    218e:	61 f7       	brne	.-40     	; 0x2168 <puts_P+0x1e>
    2190:	8a e0       	ldi	r24, 0x0A	; 10
    2192:	09 95       	icall
    2194:	00 97       	sbiw	r24, 0x00	; 0
    2196:	11 f0       	breq	.+4      	; 0x219c <puts_P+0x52>
    2198:	cf ef       	ldi	r28, 0xFF	; 255
    219a:	df ef       	ldi	r29, 0xFF	; 255
    219c:	ce 01       	movw	r24, r28
    219e:	df 91       	pop	r29
    21a0:	cf 91       	pop	r28
    21a2:	1f 91       	pop	r17
    21a4:	0f 91       	pop	r16
    21a6:	08 95       	ret

000021a8 <vfprintf>:
    21a8:	2f 92       	push	r2
    21aa:	3f 92       	push	r3
    21ac:	4f 92       	push	r4
    21ae:	5f 92       	push	r5
    21b0:	6f 92       	push	r6
    21b2:	7f 92       	push	r7
    21b4:	8f 92       	push	r8
    21b6:	9f 92       	push	r9
    21b8:	af 92       	push	r10
    21ba:	bf 92       	push	r11
    21bc:	cf 92       	push	r12
    21be:	df 92       	push	r13
    21c0:	ef 92       	push	r14
    21c2:	ff 92       	push	r15
    21c4:	0f 93       	push	r16
    21c6:	1f 93       	push	r17
    21c8:	cf 93       	push	r28
    21ca:	df 93       	push	r29
    21cc:	cd b7       	in	r28, 0x3d	; 61
    21ce:	de b7       	in	r29, 0x3e	; 62
    21d0:	2d 97       	sbiw	r28, 0x0d	; 13
    21d2:	0f b6       	in	r0, 0x3f	; 63
    21d4:	f8 94       	cli
    21d6:	de bf       	out	0x3e, r29	; 62
    21d8:	0f be       	out	0x3f, r0	; 63
    21da:	cd bf       	out	0x3d, r28	; 61
    21dc:	3c 01       	movw	r6, r24
    21de:	7d 87       	std	Y+13, r23	; 0x0d
    21e0:	6c 87       	std	Y+12, r22	; 0x0c
    21e2:	5a 01       	movw	r10, r20
    21e4:	fc 01       	movw	r30, r24
    21e6:	17 82       	std	Z+7, r1	; 0x07
    21e8:	16 82       	std	Z+6, r1	; 0x06
    21ea:	83 81       	ldd	r24, Z+3	; 0x03
    21ec:	81 ff       	sbrs	r24, 1
    21ee:	bb c1       	rjmp	.+886    	; 0x2566 <vfprintf+0x3be>
    21f0:	2e 01       	movw	r4, r28
    21f2:	08 94       	sec
    21f4:	41 1c       	adc	r4, r1
    21f6:	51 1c       	adc	r5, r1
    21f8:	f3 01       	movw	r30, r6
    21fa:	93 81       	ldd	r25, Z+3	; 0x03
    21fc:	ec 85       	ldd	r30, Y+12	; 0x0c
    21fe:	fd 85       	ldd	r31, Y+13	; 0x0d
    2200:	93 fd       	sbrc	r25, 3
    2202:	85 91       	lpm	r24, Z+
    2204:	93 ff       	sbrs	r25, 3
    2206:	81 91       	ld	r24, Z+
    2208:	fd 87       	std	Y+13, r31	; 0x0d
    220a:	ec 87       	std	Y+12, r30	; 0x0c
    220c:	88 23       	and	r24, r24
    220e:	09 f4       	brne	.+2      	; 0x2212 <vfprintf+0x6a>
    2210:	a6 c1       	rjmp	.+844    	; 0x255e <vfprintf+0x3b6>
    2212:	85 32       	cpi	r24, 0x25	; 37
    2214:	41 f4       	brne	.+16     	; 0x2226 <vfprintf+0x7e>
    2216:	93 fd       	sbrc	r25, 3
    2218:	85 91       	lpm	r24, Z+
    221a:	93 ff       	sbrs	r25, 3
    221c:	81 91       	ld	r24, Z+
    221e:	fd 87       	std	Y+13, r31	; 0x0d
    2220:	ec 87       	std	Y+12, r30	; 0x0c
    2222:	85 32       	cpi	r24, 0x25	; 37
    2224:	21 f4       	brne	.+8      	; 0x222e <vfprintf+0x86>
    2226:	90 e0       	ldi	r25, 0x00	; 0
    2228:	b3 01       	movw	r22, r6
    222a:	ce d1       	rcall	.+924    	; 0x25c8 <fputc>
    222c:	e5 cf       	rjmp	.-54     	; 0x21f8 <vfprintf+0x50>
    222e:	ff 24       	eor	r15, r15
    2230:	ee 24       	eor	r14, r14
    2232:	10 e0       	ldi	r17, 0x00	; 0
    2234:	10 32       	cpi	r17, 0x20	; 32
    2236:	b0 f4       	brcc	.+44     	; 0x2264 <vfprintf+0xbc>
    2238:	8b 32       	cpi	r24, 0x2B	; 43
    223a:	69 f0       	breq	.+26     	; 0x2256 <vfprintf+0xae>
    223c:	8c 32       	cpi	r24, 0x2C	; 44
    223e:	28 f4       	brcc	.+10     	; 0x224a <vfprintf+0xa2>
    2240:	80 32       	cpi	r24, 0x20	; 32
    2242:	51 f0       	breq	.+20     	; 0x2258 <vfprintf+0xb0>
    2244:	83 32       	cpi	r24, 0x23	; 35
    2246:	71 f4       	brne	.+28     	; 0x2264 <vfprintf+0xbc>
    2248:	0b c0       	rjmp	.+22     	; 0x2260 <vfprintf+0xb8>
    224a:	8d 32       	cpi	r24, 0x2D	; 45
    224c:	39 f0       	breq	.+14     	; 0x225c <vfprintf+0xb4>
    224e:	80 33       	cpi	r24, 0x30	; 48
    2250:	49 f4       	brne	.+18     	; 0x2264 <vfprintf+0xbc>
    2252:	11 60       	ori	r17, 0x01	; 1
    2254:	2c c0       	rjmp	.+88     	; 0x22ae <vfprintf+0x106>
    2256:	12 60       	ori	r17, 0x02	; 2
    2258:	14 60       	ori	r17, 0x04	; 4
    225a:	29 c0       	rjmp	.+82     	; 0x22ae <vfprintf+0x106>
    225c:	18 60       	ori	r17, 0x08	; 8
    225e:	27 c0       	rjmp	.+78     	; 0x22ae <vfprintf+0x106>
    2260:	10 61       	ori	r17, 0x10	; 16
    2262:	25 c0       	rjmp	.+74     	; 0x22ae <vfprintf+0x106>
    2264:	17 fd       	sbrc	r17, 7
    2266:	2e c0       	rjmp	.+92     	; 0x22c4 <vfprintf+0x11c>
    2268:	28 2f       	mov	r18, r24
    226a:	20 53       	subi	r18, 0x30	; 48
    226c:	2a 30       	cpi	r18, 0x0A	; 10
    226e:	98 f4       	brcc	.+38     	; 0x2296 <vfprintf+0xee>
    2270:	16 ff       	sbrs	r17, 6
    2272:	08 c0       	rjmp	.+16     	; 0x2284 <vfprintf+0xdc>
    2274:	8f 2d       	mov	r24, r15
    2276:	88 0f       	add	r24, r24
    2278:	f8 2e       	mov	r15, r24
    227a:	ff 0c       	add	r15, r15
    227c:	ff 0c       	add	r15, r15
    227e:	f8 0e       	add	r15, r24
    2280:	f2 0e       	add	r15, r18
    2282:	15 c0       	rjmp	.+42     	; 0x22ae <vfprintf+0x106>
    2284:	8e 2d       	mov	r24, r14
    2286:	88 0f       	add	r24, r24
    2288:	e8 2e       	mov	r14, r24
    228a:	ee 0c       	add	r14, r14
    228c:	ee 0c       	add	r14, r14
    228e:	e8 0e       	add	r14, r24
    2290:	e2 0e       	add	r14, r18
    2292:	10 62       	ori	r17, 0x20	; 32
    2294:	0c c0       	rjmp	.+24     	; 0x22ae <vfprintf+0x106>
    2296:	8e 32       	cpi	r24, 0x2E	; 46
    2298:	21 f4       	brne	.+8      	; 0x22a2 <vfprintf+0xfa>
    229a:	16 fd       	sbrc	r17, 6
    229c:	60 c1       	rjmp	.+704    	; 0x255e <vfprintf+0x3b6>
    229e:	10 64       	ori	r17, 0x40	; 64
    22a0:	06 c0       	rjmp	.+12     	; 0x22ae <vfprintf+0x106>
    22a2:	8c 36       	cpi	r24, 0x6C	; 108
    22a4:	11 f4       	brne	.+4      	; 0x22aa <vfprintf+0x102>
    22a6:	10 68       	ori	r17, 0x80	; 128
    22a8:	02 c0       	rjmp	.+4      	; 0x22ae <vfprintf+0x106>
    22aa:	88 36       	cpi	r24, 0x68	; 104
    22ac:	59 f4       	brne	.+22     	; 0x22c4 <vfprintf+0x11c>
    22ae:	ec 85       	ldd	r30, Y+12	; 0x0c
    22b0:	fd 85       	ldd	r31, Y+13	; 0x0d
    22b2:	93 fd       	sbrc	r25, 3
    22b4:	85 91       	lpm	r24, Z+
    22b6:	93 ff       	sbrs	r25, 3
    22b8:	81 91       	ld	r24, Z+
    22ba:	fd 87       	std	Y+13, r31	; 0x0d
    22bc:	ec 87       	std	Y+12, r30	; 0x0c
    22be:	88 23       	and	r24, r24
    22c0:	09 f0       	breq	.+2      	; 0x22c4 <vfprintf+0x11c>
    22c2:	b8 cf       	rjmp	.-144    	; 0x2234 <vfprintf+0x8c>
    22c4:	98 2f       	mov	r25, r24
    22c6:	95 54       	subi	r25, 0x45	; 69
    22c8:	93 30       	cpi	r25, 0x03	; 3
    22ca:	18 f0       	brcs	.+6      	; 0x22d2 <vfprintf+0x12a>
    22cc:	90 52       	subi	r25, 0x20	; 32
    22ce:	93 30       	cpi	r25, 0x03	; 3
    22d0:	38 f4       	brcc	.+14     	; 0x22e0 <vfprintf+0x138>
    22d2:	24 e0       	ldi	r18, 0x04	; 4
    22d4:	30 e0       	ldi	r19, 0x00	; 0
    22d6:	a2 0e       	add	r10, r18
    22d8:	b3 1e       	adc	r11, r19
    22da:	3f e3       	ldi	r19, 0x3F	; 63
    22dc:	39 83       	std	Y+1, r19	; 0x01
    22de:	0f c0       	rjmp	.+30     	; 0x22fe <vfprintf+0x156>
    22e0:	83 36       	cpi	r24, 0x63	; 99
    22e2:	31 f0       	breq	.+12     	; 0x22f0 <vfprintf+0x148>
    22e4:	83 37       	cpi	r24, 0x73	; 115
    22e6:	81 f0       	breq	.+32     	; 0x2308 <vfprintf+0x160>
    22e8:	83 35       	cpi	r24, 0x53	; 83
    22ea:	09 f0       	breq	.+2      	; 0x22ee <vfprintf+0x146>
    22ec:	56 c0       	rjmp	.+172    	; 0x239a <vfprintf+0x1f2>
    22ee:	21 c0       	rjmp	.+66     	; 0x2332 <vfprintf+0x18a>
    22f0:	f5 01       	movw	r30, r10
    22f2:	80 81       	ld	r24, Z
    22f4:	89 83       	std	Y+1, r24	; 0x01
    22f6:	22 e0       	ldi	r18, 0x02	; 2
    22f8:	30 e0       	ldi	r19, 0x00	; 0
    22fa:	a2 0e       	add	r10, r18
    22fc:	b3 1e       	adc	r11, r19
    22fe:	21 e0       	ldi	r18, 0x01	; 1
    2300:	c2 2e       	mov	r12, r18
    2302:	d1 2c       	mov	r13, r1
    2304:	42 01       	movw	r8, r4
    2306:	13 c0       	rjmp	.+38     	; 0x232e <vfprintf+0x186>
    2308:	92 e0       	ldi	r25, 0x02	; 2
    230a:	29 2e       	mov	r2, r25
    230c:	31 2c       	mov	r3, r1
    230e:	2a 0c       	add	r2, r10
    2310:	3b 1c       	adc	r3, r11
    2312:	f5 01       	movw	r30, r10
    2314:	80 80       	ld	r8, Z
    2316:	91 80       	ldd	r9, Z+1	; 0x01
    2318:	16 ff       	sbrs	r17, 6
    231a:	03 c0       	rjmp	.+6      	; 0x2322 <vfprintf+0x17a>
    231c:	6f 2d       	mov	r22, r15
    231e:	70 e0       	ldi	r23, 0x00	; 0
    2320:	02 c0       	rjmp	.+4      	; 0x2326 <vfprintf+0x17e>
    2322:	6f ef       	ldi	r22, 0xFF	; 255
    2324:	7f ef       	ldi	r23, 0xFF	; 255
    2326:	c4 01       	movw	r24, r8
    2328:	44 d1       	rcall	.+648    	; 0x25b2 <strnlen>
    232a:	6c 01       	movw	r12, r24
    232c:	51 01       	movw	r10, r2
    232e:	1f 77       	andi	r17, 0x7F	; 127
    2330:	14 c0       	rjmp	.+40     	; 0x235a <vfprintf+0x1b2>
    2332:	82 e0       	ldi	r24, 0x02	; 2
    2334:	28 2e       	mov	r2, r24
    2336:	31 2c       	mov	r3, r1
    2338:	2a 0c       	add	r2, r10
    233a:	3b 1c       	adc	r3, r11
    233c:	f5 01       	movw	r30, r10
    233e:	80 80       	ld	r8, Z
    2340:	91 80       	ldd	r9, Z+1	; 0x01
    2342:	16 ff       	sbrs	r17, 6
    2344:	03 c0       	rjmp	.+6      	; 0x234c <vfprintf+0x1a4>
    2346:	6f 2d       	mov	r22, r15
    2348:	70 e0       	ldi	r23, 0x00	; 0
    234a:	02 c0       	rjmp	.+4      	; 0x2350 <vfprintf+0x1a8>
    234c:	6f ef       	ldi	r22, 0xFF	; 255
    234e:	7f ef       	ldi	r23, 0xFF	; 255
    2350:	c4 01       	movw	r24, r8
    2352:	24 d1       	rcall	.+584    	; 0x259c <strnlen_P>
    2354:	6c 01       	movw	r12, r24
    2356:	10 68       	ori	r17, 0x80	; 128
    2358:	51 01       	movw	r10, r2
    235a:	13 fd       	sbrc	r17, 3
    235c:	1a c0       	rjmp	.+52     	; 0x2392 <vfprintf+0x1ea>
    235e:	05 c0       	rjmp	.+10     	; 0x236a <vfprintf+0x1c2>
    2360:	80 e2       	ldi	r24, 0x20	; 32
    2362:	90 e0       	ldi	r25, 0x00	; 0
    2364:	b3 01       	movw	r22, r6
    2366:	30 d1       	rcall	.+608    	; 0x25c8 <fputc>
    2368:	ea 94       	dec	r14
    236a:	8e 2d       	mov	r24, r14
    236c:	90 e0       	ldi	r25, 0x00	; 0
    236e:	c8 16       	cp	r12, r24
    2370:	d9 06       	cpc	r13, r25
    2372:	b0 f3       	brcs	.-20     	; 0x2360 <vfprintf+0x1b8>
    2374:	0e c0       	rjmp	.+28     	; 0x2392 <vfprintf+0x1ea>
    2376:	f4 01       	movw	r30, r8
    2378:	17 fd       	sbrc	r17, 7
    237a:	85 91       	lpm	r24, Z+
    237c:	17 ff       	sbrs	r17, 7
    237e:	81 91       	ld	r24, Z+
    2380:	4f 01       	movw	r8, r30
    2382:	90 e0       	ldi	r25, 0x00	; 0
    2384:	b3 01       	movw	r22, r6
    2386:	20 d1       	rcall	.+576    	; 0x25c8 <fputc>
    2388:	e1 10       	cpse	r14, r1
    238a:	ea 94       	dec	r14
    238c:	08 94       	sec
    238e:	c1 08       	sbc	r12, r1
    2390:	d1 08       	sbc	r13, r1
    2392:	c1 14       	cp	r12, r1
    2394:	d1 04       	cpc	r13, r1
    2396:	79 f7       	brne	.-34     	; 0x2376 <vfprintf+0x1ce>
    2398:	df c0       	rjmp	.+446    	; 0x2558 <vfprintf+0x3b0>
    239a:	84 36       	cpi	r24, 0x64	; 100
    239c:	11 f0       	breq	.+4      	; 0x23a2 <vfprintf+0x1fa>
    239e:	89 36       	cpi	r24, 0x69	; 105
    23a0:	49 f5       	brne	.+82     	; 0x23f4 <vfprintf+0x24c>
    23a2:	f5 01       	movw	r30, r10
    23a4:	17 ff       	sbrs	r17, 7
    23a6:	07 c0       	rjmp	.+14     	; 0x23b6 <vfprintf+0x20e>
    23a8:	80 81       	ld	r24, Z
    23aa:	91 81       	ldd	r25, Z+1	; 0x01
    23ac:	a2 81       	ldd	r26, Z+2	; 0x02
    23ae:	b3 81       	ldd	r27, Z+3	; 0x03
    23b0:	24 e0       	ldi	r18, 0x04	; 4
    23b2:	30 e0       	ldi	r19, 0x00	; 0
    23b4:	08 c0       	rjmp	.+16     	; 0x23c6 <vfprintf+0x21e>
    23b6:	80 81       	ld	r24, Z
    23b8:	91 81       	ldd	r25, Z+1	; 0x01
    23ba:	aa 27       	eor	r26, r26
    23bc:	97 fd       	sbrc	r25, 7
    23be:	a0 95       	com	r26
    23c0:	ba 2f       	mov	r27, r26
    23c2:	22 e0       	ldi	r18, 0x02	; 2
    23c4:	30 e0       	ldi	r19, 0x00	; 0
    23c6:	a2 0e       	add	r10, r18
    23c8:	b3 1e       	adc	r11, r19
    23ca:	01 2f       	mov	r16, r17
    23cc:	0f 76       	andi	r16, 0x6F	; 111
    23ce:	b7 ff       	sbrs	r27, 7
    23d0:	08 c0       	rjmp	.+16     	; 0x23e2 <vfprintf+0x23a>
    23d2:	b0 95       	com	r27
    23d4:	a0 95       	com	r26
    23d6:	90 95       	com	r25
    23d8:	81 95       	neg	r24
    23da:	9f 4f       	sbci	r25, 0xFF	; 255
    23dc:	af 4f       	sbci	r26, 0xFF	; 255
    23de:	bf 4f       	sbci	r27, 0xFF	; 255
    23e0:	00 68       	ori	r16, 0x80	; 128
    23e2:	bc 01       	movw	r22, r24
    23e4:	cd 01       	movw	r24, r26
    23e6:	a2 01       	movw	r20, r4
    23e8:	2a e0       	ldi	r18, 0x0A	; 10
    23ea:	30 e0       	ldi	r19, 0x00	; 0
    23ec:	19 d1       	rcall	.+562    	; 0x2620 <__ultoa_invert>
    23ee:	d8 2e       	mov	r13, r24
    23f0:	d4 18       	sub	r13, r4
    23f2:	3e c0       	rjmp	.+124    	; 0x2470 <vfprintf+0x2c8>
    23f4:	85 37       	cpi	r24, 0x75	; 117
    23f6:	21 f4       	brne	.+8      	; 0x2400 <vfprintf+0x258>
    23f8:	1f 7e       	andi	r17, 0xEF	; 239
    23fa:	2a e0       	ldi	r18, 0x0A	; 10
    23fc:	30 e0       	ldi	r19, 0x00	; 0
    23fe:	20 c0       	rjmp	.+64     	; 0x2440 <vfprintf+0x298>
    2400:	19 7f       	andi	r17, 0xF9	; 249
    2402:	8f 36       	cpi	r24, 0x6F	; 111
    2404:	a9 f0       	breq	.+42     	; 0x2430 <vfprintf+0x288>
    2406:	80 37       	cpi	r24, 0x70	; 112
    2408:	20 f4       	brcc	.+8      	; 0x2412 <vfprintf+0x26a>
    240a:	88 35       	cpi	r24, 0x58	; 88
    240c:	09 f0       	breq	.+2      	; 0x2410 <vfprintf+0x268>
    240e:	a7 c0       	rjmp	.+334    	; 0x255e <vfprintf+0x3b6>
    2410:	0b c0       	rjmp	.+22     	; 0x2428 <vfprintf+0x280>
    2412:	80 37       	cpi	r24, 0x70	; 112
    2414:	21 f0       	breq	.+8      	; 0x241e <vfprintf+0x276>
    2416:	88 37       	cpi	r24, 0x78	; 120
    2418:	09 f0       	breq	.+2      	; 0x241c <vfprintf+0x274>
    241a:	a1 c0       	rjmp	.+322    	; 0x255e <vfprintf+0x3b6>
    241c:	01 c0       	rjmp	.+2      	; 0x2420 <vfprintf+0x278>
    241e:	10 61       	ori	r17, 0x10	; 16
    2420:	14 ff       	sbrs	r17, 4
    2422:	09 c0       	rjmp	.+18     	; 0x2436 <vfprintf+0x28e>
    2424:	14 60       	ori	r17, 0x04	; 4
    2426:	07 c0       	rjmp	.+14     	; 0x2436 <vfprintf+0x28e>
    2428:	14 ff       	sbrs	r17, 4
    242a:	08 c0       	rjmp	.+16     	; 0x243c <vfprintf+0x294>
    242c:	16 60       	ori	r17, 0x06	; 6
    242e:	06 c0       	rjmp	.+12     	; 0x243c <vfprintf+0x294>
    2430:	28 e0       	ldi	r18, 0x08	; 8
    2432:	30 e0       	ldi	r19, 0x00	; 0
    2434:	05 c0       	rjmp	.+10     	; 0x2440 <vfprintf+0x298>
    2436:	20 e1       	ldi	r18, 0x10	; 16
    2438:	30 e0       	ldi	r19, 0x00	; 0
    243a:	02 c0       	rjmp	.+4      	; 0x2440 <vfprintf+0x298>
    243c:	20 e1       	ldi	r18, 0x10	; 16
    243e:	32 e0       	ldi	r19, 0x02	; 2
    2440:	f5 01       	movw	r30, r10
    2442:	17 ff       	sbrs	r17, 7
    2444:	07 c0       	rjmp	.+14     	; 0x2454 <vfprintf+0x2ac>
    2446:	60 81       	ld	r22, Z
    2448:	71 81       	ldd	r23, Z+1	; 0x01
    244a:	82 81       	ldd	r24, Z+2	; 0x02
    244c:	93 81       	ldd	r25, Z+3	; 0x03
    244e:	44 e0       	ldi	r20, 0x04	; 4
    2450:	50 e0       	ldi	r21, 0x00	; 0
    2452:	06 c0       	rjmp	.+12     	; 0x2460 <vfprintf+0x2b8>
    2454:	60 81       	ld	r22, Z
    2456:	71 81       	ldd	r23, Z+1	; 0x01
    2458:	80 e0       	ldi	r24, 0x00	; 0
    245a:	90 e0       	ldi	r25, 0x00	; 0
    245c:	42 e0       	ldi	r20, 0x02	; 2
    245e:	50 e0       	ldi	r21, 0x00	; 0
    2460:	a4 0e       	add	r10, r20
    2462:	b5 1e       	adc	r11, r21
    2464:	a2 01       	movw	r20, r4
    2466:	dc d0       	rcall	.+440    	; 0x2620 <__ultoa_invert>
    2468:	d8 2e       	mov	r13, r24
    246a:	d4 18       	sub	r13, r4
    246c:	01 2f       	mov	r16, r17
    246e:	0f 77       	andi	r16, 0x7F	; 127
    2470:	06 ff       	sbrs	r16, 6
    2472:	09 c0       	rjmp	.+18     	; 0x2486 <vfprintf+0x2de>
    2474:	0e 7f       	andi	r16, 0xFE	; 254
    2476:	df 14       	cp	r13, r15
    2478:	30 f4       	brcc	.+12     	; 0x2486 <vfprintf+0x2de>
    247a:	04 ff       	sbrs	r16, 4
    247c:	06 c0       	rjmp	.+12     	; 0x248a <vfprintf+0x2e2>
    247e:	02 fd       	sbrc	r16, 2
    2480:	04 c0       	rjmp	.+8      	; 0x248a <vfprintf+0x2e2>
    2482:	0f 7e       	andi	r16, 0xEF	; 239
    2484:	02 c0       	rjmp	.+4      	; 0x248a <vfprintf+0x2e2>
    2486:	1d 2d       	mov	r17, r13
    2488:	01 c0       	rjmp	.+2      	; 0x248c <vfprintf+0x2e4>
    248a:	1f 2d       	mov	r17, r15
    248c:	80 2f       	mov	r24, r16
    248e:	90 e0       	ldi	r25, 0x00	; 0
    2490:	04 ff       	sbrs	r16, 4
    2492:	0c c0       	rjmp	.+24     	; 0x24ac <vfprintf+0x304>
    2494:	fe 01       	movw	r30, r28
    2496:	ed 0d       	add	r30, r13
    2498:	f1 1d       	adc	r31, r1
    249a:	20 81       	ld	r18, Z
    249c:	20 33       	cpi	r18, 0x30	; 48
    249e:	11 f4       	brne	.+4      	; 0x24a4 <vfprintf+0x2fc>
    24a0:	09 7e       	andi	r16, 0xE9	; 233
    24a2:	09 c0       	rjmp	.+18     	; 0x24b6 <vfprintf+0x30e>
    24a4:	02 ff       	sbrs	r16, 2
    24a6:	06 c0       	rjmp	.+12     	; 0x24b4 <vfprintf+0x30c>
    24a8:	1e 5f       	subi	r17, 0xFE	; 254
    24aa:	05 c0       	rjmp	.+10     	; 0x24b6 <vfprintf+0x30e>
    24ac:	86 78       	andi	r24, 0x86	; 134
    24ae:	90 70       	andi	r25, 0x00	; 0
    24b0:	00 97       	sbiw	r24, 0x00	; 0
    24b2:	09 f0       	breq	.+2      	; 0x24b6 <vfprintf+0x30e>
    24b4:	1f 5f       	subi	r17, 0xFF	; 255
    24b6:	80 2e       	mov	r8, r16
    24b8:	99 24       	eor	r9, r9
    24ba:	03 fd       	sbrc	r16, 3
    24bc:	11 c0       	rjmp	.+34     	; 0x24e0 <vfprintf+0x338>
    24be:	00 ff       	sbrs	r16, 0
    24c0:	0c c0       	rjmp	.+24     	; 0x24da <vfprintf+0x332>
    24c2:	fd 2c       	mov	r15, r13
    24c4:	1e 15       	cp	r17, r14
    24c6:	48 f4       	brcc	.+18     	; 0x24da <vfprintf+0x332>
    24c8:	fe 0c       	add	r15, r14
    24ca:	f1 1a       	sub	r15, r17
    24cc:	1e 2d       	mov	r17, r14
    24ce:	05 c0       	rjmp	.+10     	; 0x24da <vfprintf+0x332>
    24d0:	80 e2       	ldi	r24, 0x20	; 32
    24d2:	90 e0       	ldi	r25, 0x00	; 0
    24d4:	b3 01       	movw	r22, r6
    24d6:	78 d0       	rcall	.+240    	; 0x25c8 <fputc>
    24d8:	1f 5f       	subi	r17, 0xFF	; 255
    24da:	1e 15       	cp	r17, r14
    24dc:	c8 f3       	brcs	.-14     	; 0x24d0 <vfprintf+0x328>
    24de:	04 c0       	rjmp	.+8      	; 0x24e8 <vfprintf+0x340>
    24e0:	1e 15       	cp	r17, r14
    24e2:	10 f4       	brcc	.+4      	; 0x24e8 <vfprintf+0x340>
    24e4:	e1 1a       	sub	r14, r17
    24e6:	01 c0       	rjmp	.+2      	; 0x24ea <vfprintf+0x342>
    24e8:	ee 24       	eor	r14, r14
    24ea:	84 fe       	sbrs	r8, 4
    24ec:	0e c0       	rjmp	.+28     	; 0x250a <vfprintf+0x362>
    24ee:	80 e3       	ldi	r24, 0x30	; 48
    24f0:	90 e0       	ldi	r25, 0x00	; 0
    24f2:	b3 01       	movw	r22, r6
    24f4:	69 d0       	rcall	.+210    	; 0x25c8 <fputc>
    24f6:	82 fe       	sbrs	r8, 2
    24f8:	1d c0       	rjmp	.+58     	; 0x2534 <vfprintf+0x38c>
    24fa:	81 fe       	sbrs	r8, 1
    24fc:	03 c0       	rjmp	.+6      	; 0x2504 <vfprintf+0x35c>
    24fe:	88 e5       	ldi	r24, 0x58	; 88
    2500:	90 e0       	ldi	r25, 0x00	; 0
    2502:	10 c0       	rjmp	.+32     	; 0x2524 <vfprintf+0x37c>
    2504:	88 e7       	ldi	r24, 0x78	; 120
    2506:	90 e0       	ldi	r25, 0x00	; 0
    2508:	0d c0       	rjmp	.+26     	; 0x2524 <vfprintf+0x37c>
    250a:	c4 01       	movw	r24, r8
    250c:	86 78       	andi	r24, 0x86	; 134
    250e:	90 70       	andi	r25, 0x00	; 0
    2510:	00 97       	sbiw	r24, 0x00	; 0
    2512:	81 f0       	breq	.+32     	; 0x2534 <vfprintf+0x38c>
    2514:	81 fc       	sbrc	r8, 1
    2516:	02 c0       	rjmp	.+4      	; 0x251c <vfprintf+0x374>
    2518:	80 e2       	ldi	r24, 0x20	; 32
    251a:	01 c0       	rjmp	.+2      	; 0x251e <vfprintf+0x376>
    251c:	8b e2       	ldi	r24, 0x2B	; 43
    251e:	07 fd       	sbrc	r16, 7
    2520:	8d e2       	ldi	r24, 0x2D	; 45
    2522:	90 e0       	ldi	r25, 0x00	; 0
    2524:	b3 01       	movw	r22, r6
    2526:	50 d0       	rcall	.+160    	; 0x25c8 <fputc>
    2528:	05 c0       	rjmp	.+10     	; 0x2534 <vfprintf+0x38c>
    252a:	80 e3       	ldi	r24, 0x30	; 48
    252c:	90 e0       	ldi	r25, 0x00	; 0
    252e:	b3 01       	movw	r22, r6
    2530:	4b d0       	rcall	.+150    	; 0x25c8 <fputc>
    2532:	fa 94       	dec	r15
    2534:	df 14       	cp	r13, r15
    2536:	c8 f3       	brcs	.-14     	; 0x252a <vfprintf+0x382>
    2538:	da 94       	dec	r13
    253a:	f2 01       	movw	r30, r4
    253c:	ed 0d       	add	r30, r13
    253e:	f1 1d       	adc	r31, r1
    2540:	80 81       	ld	r24, Z
    2542:	90 e0       	ldi	r25, 0x00	; 0
    2544:	b3 01       	movw	r22, r6
    2546:	40 d0       	rcall	.+128    	; 0x25c8 <fputc>
    2548:	dd 20       	and	r13, r13
    254a:	b1 f7       	brne	.-20     	; 0x2538 <vfprintf+0x390>
    254c:	05 c0       	rjmp	.+10     	; 0x2558 <vfprintf+0x3b0>
    254e:	80 e2       	ldi	r24, 0x20	; 32
    2550:	90 e0       	ldi	r25, 0x00	; 0
    2552:	b3 01       	movw	r22, r6
    2554:	39 d0       	rcall	.+114    	; 0x25c8 <fputc>
    2556:	ea 94       	dec	r14
    2558:	ee 20       	and	r14, r14
    255a:	c9 f7       	brne	.-14     	; 0x254e <vfprintf+0x3a6>
    255c:	4d ce       	rjmp	.-870    	; 0x21f8 <vfprintf+0x50>
    255e:	f3 01       	movw	r30, r6
    2560:	86 81       	ldd	r24, Z+6	; 0x06
    2562:	97 81       	ldd	r25, Z+7	; 0x07
    2564:	02 c0       	rjmp	.+4      	; 0x256a <vfprintf+0x3c2>
    2566:	8f ef       	ldi	r24, 0xFF	; 255
    2568:	9f ef       	ldi	r25, 0xFF	; 255
    256a:	2d 96       	adiw	r28, 0x0d	; 13
    256c:	0f b6       	in	r0, 0x3f	; 63
    256e:	f8 94       	cli
    2570:	de bf       	out	0x3e, r29	; 62
    2572:	0f be       	out	0x3f, r0	; 63
    2574:	cd bf       	out	0x3d, r28	; 61
    2576:	df 91       	pop	r29
    2578:	cf 91       	pop	r28
    257a:	1f 91       	pop	r17
    257c:	0f 91       	pop	r16
    257e:	ff 90       	pop	r15
    2580:	ef 90       	pop	r14
    2582:	df 90       	pop	r13
    2584:	cf 90       	pop	r12
    2586:	bf 90       	pop	r11
    2588:	af 90       	pop	r10
    258a:	9f 90       	pop	r9
    258c:	8f 90       	pop	r8
    258e:	7f 90       	pop	r7
    2590:	6f 90       	pop	r6
    2592:	5f 90       	pop	r5
    2594:	4f 90       	pop	r4
    2596:	3f 90       	pop	r3
    2598:	2f 90       	pop	r2
    259a:	08 95       	ret

0000259c <strnlen_P>:
    259c:	fc 01       	movw	r30, r24
    259e:	05 90       	lpm	r0, Z+
    25a0:	61 50       	subi	r22, 0x01	; 1
    25a2:	70 40       	sbci	r23, 0x00	; 0
    25a4:	01 10       	cpse	r0, r1
    25a6:	d8 f7       	brcc	.-10     	; 0x259e <strnlen_P+0x2>
    25a8:	80 95       	com	r24
    25aa:	90 95       	com	r25
    25ac:	8e 0f       	add	r24, r30
    25ae:	9f 1f       	adc	r25, r31
    25b0:	08 95       	ret

000025b2 <strnlen>:
    25b2:	fc 01       	movw	r30, r24
    25b4:	61 50       	subi	r22, 0x01	; 1
    25b6:	70 40       	sbci	r23, 0x00	; 0
    25b8:	01 90       	ld	r0, Z+
    25ba:	01 10       	cpse	r0, r1
    25bc:	d8 f7       	brcc	.-10     	; 0x25b4 <strnlen+0x2>
    25be:	80 95       	com	r24
    25c0:	90 95       	com	r25
    25c2:	8e 0f       	add	r24, r30
    25c4:	9f 1f       	adc	r25, r31
    25c6:	08 95       	ret

000025c8 <fputc>:
    25c8:	0f 93       	push	r16
    25ca:	1f 93       	push	r17
    25cc:	cf 93       	push	r28
    25ce:	df 93       	push	r29
    25d0:	8c 01       	movw	r16, r24
    25d2:	eb 01       	movw	r28, r22
    25d4:	8b 81       	ldd	r24, Y+3	; 0x03
    25d6:	81 ff       	sbrs	r24, 1
    25d8:	1b c0       	rjmp	.+54     	; 0x2610 <fputc+0x48>
    25da:	82 ff       	sbrs	r24, 2
    25dc:	0d c0       	rjmp	.+26     	; 0x25f8 <fputc+0x30>
    25de:	2e 81       	ldd	r18, Y+6	; 0x06
    25e0:	3f 81       	ldd	r19, Y+7	; 0x07
    25e2:	8c 81       	ldd	r24, Y+4	; 0x04
    25e4:	9d 81       	ldd	r25, Y+5	; 0x05
    25e6:	28 17       	cp	r18, r24
    25e8:	39 07       	cpc	r19, r25
    25ea:	64 f4       	brge	.+24     	; 0x2604 <fputc+0x3c>
    25ec:	e8 81       	ld	r30, Y
    25ee:	f9 81       	ldd	r31, Y+1	; 0x01
    25f0:	01 93       	st	Z+, r16
    25f2:	f9 83       	std	Y+1, r31	; 0x01
    25f4:	e8 83       	st	Y, r30
    25f6:	06 c0       	rjmp	.+12     	; 0x2604 <fputc+0x3c>
    25f8:	e8 85       	ldd	r30, Y+8	; 0x08
    25fa:	f9 85       	ldd	r31, Y+9	; 0x09
    25fc:	80 2f       	mov	r24, r16
    25fe:	09 95       	icall
    2600:	00 97       	sbiw	r24, 0x00	; 0
    2602:	31 f4       	brne	.+12     	; 0x2610 <fputc+0x48>
    2604:	8e 81       	ldd	r24, Y+6	; 0x06
    2606:	9f 81       	ldd	r25, Y+7	; 0x07
    2608:	01 96       	adiw	r24, 0x01	; 1
    260a:	9f 83       	std	Y+7, r25	; 0x07
    260c:	8e 83       	std	Y+6, r24	; 0x06
    260e:	02 c0       	rjmp	.+4      	; 0x2614 <fputc+0x4c>
    2610:	0f ef       	ldi	r16, 0xFF	; 255
    2612:	1f ef       	ldi	r17, 0xFF	; 255
    2614:	c8 01       	movw	r24, r16
    2616:	df 91       	pop	r29
    2618:	cf 91       	pop	r28
    261a:	1f 91       	pop	r17
    261c:	0f 91       	pop	r16
    261e:	08 95       	ret

00002620 <__ultoa_invert>:
    2620:	fa 01       	movw	r30, r20
    2622:	aa 27       	eor	r26, r26
    2624:	28 30       	cpi	r18, 0x08	; 8
    2626:	51 f1       	breq	.+84     	; 0x267c <__ultoa_invert+0x5c>
    2628:	20 31       	cpi	r18, 0x10	; 16
    262a:	81 f1       	breq	.+96     	; 0x268c <__ultoa_invert+0x6c>
    262c:	e8 94       	clt
    262e:	6f 93       	push	r22
    2630:	6e 7f       	andi	r22, 0xFE	; 254
    2632:	6e 5f       	subi	r22, 0xFE	; 254
    2634:	7f 4f       	sbci	r23, 0xFF	; 255
    2636:	8f 4f       	sbci	r24, 0xFF	; 255
    2638:	9f 4f       	sbci	r25, 0xFF	; 255
    263a:	af 4f       	sbci	r26, 0xFF	; 255
    263c:	b1 e0       	ldi	r27, 0x01	; 1
    263e:	3e d0       	rcall	.+124    	; 0x26bc <__ultoa_invert+0x9c>
    2640:	b4 e0       	ldi	r27, 0x04	; 4
    2642:	3c d0       	rcall	.+120    	; 0x26bc <__ultoa_invert+0x9c>
    2644:	67 0f       	add	r22, r23
    2646:	78 1f       	adc	r23, r24
    2648:	89 1f       	adc	r24, r25
    264a:	9a 1f       	adc	r25, r26
    264c:	a1 1d       	adc	r26, r1
    264e:	68 0f       	add	r22, r24
    2650:	79 1f       	adc	r23, r25
    2652:	8a 1f       	adc	r24, r26
    2654:	91 1d       	adc	r25, r1
    2656:	a1 1d       	adc	r26, r1
    2658:	6a 0f       	add	r22, r26
    265a:	71 1d       	adc	r23, r1
    265c:	81 1d       	adc	r24, r1
    265e:	91 1d       	adc	r25, r1
    2660:	a1 1d       	adc	r26, r1
    2662:	20 d0       	rcall	.+64     	; 0x26a4 <__ultoa_invert+0x84>
    2664:	09 f4       	brne	.+2      	; 0x2668 <__ultoa_invert+0x48>
    2666:	68 94       	set
    2668:	3f 91       	pop	r19
    266a:	2a e0       	ldi	r18, 0x0A	; 10
    266c:	26 9f       	mul	r18, r22
    266e:	11 24       	eor	r1, r1
    2670:	30 19       	sub	r19, r0
    2672:	30 5d       	subi	r19, 0xD0	; 208
    2674:	31 93       	st	Z+, r19
    2676:	de f6       	brtc	.-74     	; 0x262e <__ultoa_invert+0xe>
    2678:	cf 01       	movw	r24, r30
    267a:	08 95       	ret
    267c:	46 2f       	mov	r20, r22
    267e:	47 70       	andi	r20, 0x07	; 7
    2680:	40 5d       	subi	r20, 0xD0	; 208
    2682:	41 93       	st	Z+, r20
    2684:	b3 e0       	ldi	r27, 0x03	; 3
    2686:	0f d0       	rcall	.+30     	; 0x26a6 <__ultoa_invert+0x86>
    2688:	c9 f7       	brne	.-14     	; 0x267c <__ultoa_invert+0x5c>
    268a:	f6 cf       	rjmp	.-20     	; 0x2678 <__ultoa_invert+0x58>
    268c:	46 2f       	mov	r20, r22
    268e:	4f 70       	andi	r20, 0x0F	; 15
    2690:	40 5d       	subi	r20, 0xD0	; 208
    2692:	4a 33       	cpi	r20, 0x3A	; 58
    2694:	18 f0       	brcs	.+6      	; 0x269c <__ultoa_invert+0x7c>
    2696:	49 5d       	subi	r20, 0xD9	; 217
    2698:	31 fd       	sbrc	r19, 1
    269a:	40 52       	subi	r20, 0x20	; 32
    269c:	41 93       	st	Z+, r20
    269e:	02 d0       	rcall	.+4      	; 0x26a4 <__ultoa_invert+0x84>
    26a0:	a9 f7       	brne	.-22     	; 0x268c <__ultoa_invert+0x6c>
    26a2:	ea cf       	rjmp	.-44     	; 0x2678 <__ultoa_invert+0x58>
    26a4:	b4 e0       	ldi	r27, 0x04	; 4
    26a6:	a6 95       	lsr	r26
    26a8:	97 95       	ror	r25
    26aa:	87 95       	ror	r24
    26ac:	77 95       	ror	r23
    26ae:	67 95       	ror	r22
    26b0:	ba 95       	dec	r27
    26b2:	c9 f7       	brne	.-14     	; 0x26a6 <__ultoa_invert+0x86>
    26b4:	00 97       	sbiw	r24, 0x00	; 0
    26b6:	61 05       	cpc	r22, r1
    26b8:	71 05       	cpc	r23, r1
    26ba:	08 95       	ret
    26bc:	9b 01       	movw	r18, r22
    26be:	ac 01       	movw	r20, r24
    26c0:	0a 2e       	mov	r0, r26
    26c2:	06 94       	lsr	r0
    26c4:	57 95       	ror	r21
    26c6:	47 95       	ror	r20
    26c8:	37 95       	ror	r19
    26ca:	27 95       	ror	r18
    26cc:	ba 95       	dec	r27
    26ce:	c9 f7       	brne	.-14     	; 0x26c2 <__ultoa_invert+0xa2>
    26d0:	62 0f       	add	r22, r18
    26d2:	73 1f       	adc	r23, r19
    26d4:	84 1f       	adc	r24, r20
    26d6:	95 1f       	adc	r25, r21
    26d8:	a0 1d       	adc	r26, r0
    26da:	08 95       	ret

000026dc <_exit>:
    26dc:	f8 94       	cli

000026de <__stop_program>:
    26de:	ff cf       	rjmp	.-2      	; 0x26de <__stop_program>
