
RelayBoard.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000010  00800100  00000a52  00000ae6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000a52  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000c  00800110  00800110  00000af6  2**0
                  ALLOC
  3 .stab         00000a98  00000000  00000000  00000af8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000002aa  00000000  00000000  00001590  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000450  00000000  00000000  00001840  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000707e  00000000  00000000  00001c90  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001f16  00000000  00000000  00008d0e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000034fc  00000000  00000000  0000ac24  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000a40  00000000  00000000  0000e120  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00003245  00000000  00000000  0000eb60  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00003827  00000000  00000000  00011da5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000005f8  00000000  00000000  000155cc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	79 c0       	rjmp	.+242    	; 0xf4 <__ctors_end>
   2:	00 00       	nop
   4:	95 c0       	rjmp	.+298    	; 0x130 <__bad_interrupt>
   6:	00 00       	nop
   8:	93 c0       	rjmp	.+294    	; 0x130 <__bad_interrupt>
   a:	00 00       	nop
   c:	91 c0       	rjmp	.+290    	; 0x130 <__bad_interrupt>
   e:	00 00       	nop
  10:	8f c0       	rjmp	.+286    	; 0x130 <__bad_interrupt>
  12:	00 00       	nop
  14:	8d c0       	rjmp	.+282    	; 0x130 <__bad_interrupt>
  16:	00 00       	nop
  18:	8b c0       	rjmp	.+278    	; 0x130 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	89 c0       	rjmp	.+274    	; 0x130 <__bad_interrupt>
  1e:	00 00       	nop
  20:	87 c0       	rjmp	.+270    	; 0x130 <__bad_interrupt>
  22:	00 00       	nop
  24:	85 c0       	rjmp	.+266    	; 0x130 <__bad_interrupt>
  26:	00 00       	nop
  28:	20 c3       	rjmp	.+1600   	; 0x66a <__vector_10>
  2a:	00 00       	nop
  2c:	81 c0       	rjmp	.+258    	; 0x130 <__bad_interrupt>
  2e:	00 00       	nop
  30:	7f c0       	rjmp	.+254    	; 0x130 <__bad_interrupt>
  32:	00 00       	nop
  34:	7d c0       	rjmp	.+250    	; 0x130 <__bad_interrupt>
  36:	00 00       	nop
  38:	7b c0       	rjmp	.+246    	; 0x130 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	79 c0       	rjmp	.+242    	; 0x130 <__bad_interrupt>
  3e:	00 00       	nop
  40:	77 c0       	rjmp	.+238    	; 0x130 <__bad_interrupt>
  42:	00 00       	nop
  44:	75 c0       	rjmp	.+234    	; 0x130 <__bad_interrupt>
  46:	00 00       	nop
  48:	73 c0       	rjmp	.+230    	; 0x130 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	71 c0       	rjmp	.+226    	; 0x130 <__bad_interrupt>
  4e:	00 00       	nop
  50:	6f c0       	rjmp	.+222    	; 0x130 <__bad_interrupt>
  52:	00 00       	nop
  54:	6d c0       	rjmp	.+218    	; 0x130 <__bad_interrupt>
  56:	00 00       	nop
  58:	6b c0       	rjmp	.+214    	; 0x130 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	69 c0       	rjmp	.+210    	; 0x130 <__bad_interrupt>
  5e:	00 00       	nop
  60:	67 c0       	rjmp	.+206    	; 0x130 <__bad_interrupt>
  62:	00 00       	nop
  64:	65 c0       	rjmp	.+202    	; 0x130 <__bad_interrupt>
  66:	00 00       	nop
  68:	63 c0       	rjmp	.+198    	; 0x130 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	61 c0       	rjmp	.+194    	; 0x130 <__bad_interrupt>
  6e:	00 00       	nop
  70:	5f c0       	rjmp	.+190    	; 0x130 <__bad_interrupt>
  72:	00 00       	nop
  74:	5d c0       	rjmp	.+186    	; 0x130 <__bad_interrupt>
  76:	00 00       	nop
  78:	5b c0       	rjmp	.+182    	; 0x130 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	59 c0       	rjmp	.+178    	; 0x130 <__bad_interrupt>
  7e:	00 00       	nop
  80:	57 c0       	rjmp	.+174    	; 0x130 <__bad_interrupt>
  82:	00 00       	nop
  84:	55 c0       	rjmp	.+170    	; 0x130 <__bad_interrupt>
  86:	00 00       	nop
  88:	53 c0       	rjmp	.+166    	; 0x130 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	51 c0       	rjmp	.+162    	; 0x130 <__bad_interrupt>
  8e:	00 00       	nop
  90:	4f c0       	rjmp	.+158    	; 0x130 <__bad_interrupt>
  92:	00 00       	nop
  94:	4d c0       	rjmp	.+154    	; 0x130 <__bad_interrupt>
  96:	00 00       	nop

00000098 <RelayBoard_SerialString>:
  98:	0c 03 30 00 30 00 30 00 30 00 31 00 00 00           ..0.0.0.0.1...

000000a6 <RelayBoard_ProductString>:
  a6:	16 03 52 00 65 00 6c 00 61 00 79 00 42 00 6f 00     ..R.e.l.a.y.B.o.
  b6:	61 00 72 00 64 00 00 00                             a.r.d...

000000be <RelayBoard_ManufacturerString>:
  be:	0c 03 53 00 49 00 53 00 50 00 4d 00 00 00           ..S.I.S.P.M...

000000cc <RelayBoard_LanguageString>:
  cc:	04 03 09 04                                         ....

000000d0 <RelayBoard_ConfigurationDescriptor>:
  d0:	09 02 12 00 01 01 00 80 fa 09 04 00 00 00 ff 00     ................
  e0:	00 00                                               ..

000000e2 <RelayBoard_DeviceDescriptor>:
  e2:	12 01 10 01 ff 00 00 08 b4 04 11 fd 00 02 01 02     ................
  f2:	03 01                                               ..

000000f4 <__ctors_end>:
  f4:	11 24       	eor	r1, r1
  f6:	1f be       	out	0x3f, r1	; 63
  f8:	cf ef       	ldi	r28, 0xFF	; 255
  fa:	d0 e2       	ldi	r29, 0x20	; 32
  fc:	de bf       	out	0x3e, r29	; 62
  fe:	cd bf       	out	0x3d, r28	; 61

00000100 <__do_copy_data>:
 100:	11 e0       	ldi	r17, 0x01	; 1
 102:	a0 e0       	ldi	r26, 0x00	; 0
 104:	b1 e0       	ldi	r27, 0x01	; 1
 106:	e2 e5       	ldi	r30, 0x52	; 82
 108:	fa e0       	ldi	r31, 0x0A	; 10
 10a:	00 e0       	ldi	r16, 0x00	; 0
 10c:	0b bf       	out	0x3b, r16	; 59
 10e:	02 c0       	rjmp	.+4      	; 0x114 <__do_copy_data+0x14>
 110:	07 90       	elpm	r0, Z+
 112:	0d 92       	st	X+, r0
 114:	a0 31       	cpi	r26, 0x10	; 16
 116:	b1 07       	cpc	r27, r17
 118:	d9 f7       	brne	.-10     	; 0x110 <__do_copy_data+0x10>
 11a:	1b be       	out	0x3b, r1	; 59

0000011c <__do_clear_bss>:
 11c:	11 e0       	ldi	r17, 0x01	; 1
 11e:	a0 e1       	ldi	r26, 0x10	; 16
 120:	b1 e0       	ldi	r27, 0x01	; 1
 122:	01 c0       	rjmp	.+2      	; 0x126 <.do_clear_bss_start>

00000124 <.do_clear_bss_loop>:
 124:	1d 92       	st	X+, r1

00000126 <.do_clear_bss_start>:
 126:	ac 31       	cpi	r26, 0x1C	; 28
 128:	b1 07       	cpc	r27, r17
 12a:	e1 f7       	brne	.-8      	; 0x124 <.do_clear_bss_loop>
 12c:	1e d0       	rcall	.+60     	; 0x16a <main>
 12e:	8f c4       	rjmp	.+2334   	; 0xa4e <_exit>

00000130 <__bad_interrupt>:
 130:	67 cf       	rjmp	.-306    	; 0x0 <__vectors>

00000132 <SetupHardware>:

/** Configures the board hardware and chip peripherals for the project's functionality. */
void SetupHardware(void)
{
	/* Disable watchdog if enabled by bootloader/fuses */
	MCUSR &= ~(1 << WDRF);
 132:	84 b7       	in	r24, 0x34	; 52
 134:	87 7f       	andi	r24, 0xF7	; 247
 136:	84 bf       	out	0x34, r24	; 52
	wdt_disable();
 138:	88 e1       	ldi	r24, 0x18	; 24
 13a:	0f b6       	in	r0, 0x3f	; 63
 13c:	f8 94       	cli
 13e:	80 93 60 00 	sts	0x0060, r24
 142:	10 92 60 00 	sts	0x0060, r1
 146:	0f be       	out	0x3f, r0	; 63
The type of x is clock_div_t.
*/
void clock_prescale_set(clock_div_t __x)
{
    uint8_t __tmp = _BV(CLKPCE);
    __asm__ __volatile__ (
 148:	90 e0       	ldi	r25, 0x00	; 0
 14a:	80 e8       	ldi	r24, 0x80	; 128
 14c:	0f b6       	in	r0, 0x3f	; 63
 14e:	f8 94       	cli
 150:	80 93 61 00 	sts	0x0061, r24
 154:	90 93 61 00 	sts	0x0061, r25
 158:	0f be       	out	0x3f, r0	; 63

	/* Disable clock division */
	clock_prescale_set(clock_div_1);

	/* Hardware Initialization */
	USB_Init();
 15a:	6c d2       	rcall	.+1240   	; 0x634 <USB_Init>
 15c:	87 b1       	in	r24, 0x07	; 7

	/* Initialize Relays */
	DDRC  |=  ALL_RELAYS;
 15e:	80 6f       	ori	r24, 0xF0	; 240
 160:	87 b9       	out	0x07, r24	; 7
 162:	88 b1       	in	r24, 0x08	; 8
	PORTC &= ~ALL_RELAYS;
 164:	8f 70       	andi	r24, 0x0F	; 15
 166:	88 b9       	out	0x08, r24	; 8
 168:	08 95       	ret

0000016a <main>:
}
 16a:	e3 df       	rcall	.-58     	; 0x132 <SetupHardware>
/** Main program entry point. This routine contains the overall program flow, including initial
 *  setup of all components and the main program loop.
 */
int main(void)
{
	SetupHardware();
 16c:	78 94       	sei
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				sei();
 16e:	66 d4       	rcall	.+2252   	; 0xa3c <USB_USBTask>

	GlobalInterruptEnable();

	for (;;)
	  USB_USBTask();
 170:	fe cf       	rjmp	.-4      	; 0x16e <main+0x4>

00000172 <EVENT_USB_Device_ControlRequest>:
 172:	cf 93       	push	r28
 174:	df 93       	push	r29
	PORTC &= ~ALL_RELAYS;
}

/** Event handler for the library USB Control Request reception event. */
void EVENT_USB_Device_ControlRequest(void)
{
 176:	cd b7       	in	r28, 0x3d	; 61
 178:	de b7       	in	r29, 0x3e	; 62
 17a:	27 97       	sbiw	r28, 0x07	; 7
 17c:	0f b6       	in	r0, 0x3f	; 63
 17e:	f8 94       	cli
 180:	de bf       	out	0x3e, r29	; 62
 182:	0f be       	out	0x3f, r0	; 63
 184:	cd bf       	out	0x3d, r28	; 61
    const uint8_t SerialNumber[5] = { 0, 0, 0, 0, 1 };
 186:	1b 82       	std	Y+3, r1	; 0x03
 188:	1c 82       	std	Y+4, r1	; 0x04
 18a:	1d 82       	std	Y+5, r1	; 0x05
 18c:	1e 82       	std	Y+6, r1	; 0x06
 18e:	81 e0       	ldi	r24, 0x01	; 1
 190:	8f 83       	std	Y+7, r24	; 0x07
	uint8_t ControlData[2]        = { 0, 0 };
 192:	19 82       	std	Y+1, r1	; 0x01
 194:	1a 82       	std	Y+2, r1	; 0x02

    switch (USB_ControlRequest.bRequest)
 196:	80 91 15 01 	lds	r24, 0x0115
 19a:	81 30       	cpi	r24, 0x01	; 1
 19c:	09 f4       	brne	.+2      	; 0x1a0 <EVENT_USB_Device_ControlRequest+0x2e>
 19e:	51 c0       	rjmp	.+162    	; 0x242 <EVENT_USB_Device_ControlRequest+0xd0>
 1a0:	89 30       	cpi	r24, 0x09	; 9
 1a2:	09 f0       	breq	.+2      	; 0x1a6 <EVENT_USB_Device_ControlRequest+0x34>
 1a4:	9e c0       	rjmp	.+316    	; 0x2e2 <EVENT_USB_Device_ControlRequest+0x170>
	{
		case 0x09:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
 1a6:	80 91 14 01 	lds	r24, 0x0114
 1aa:	81 32       	cpi	r24, 0x21	; 33
 1ac:	09 f0       	breq	.+2      	; 0x1b0 <EVENT_USB_Device_ControlRequest+0x3e>
 1ae:	99 c0       	rjmp	.+306    	; 0x2e2 <EVENT_USB_Device_ControlRequest+0x170>
				PORTD = ((PORTD & ~LEDMask) | ActiveMask);
			}

			static inline void LEDs_ToggleLEDs(const uint8_t LEDMask)
			{
				PIND  = LEDMask;
 1b0:	80 e1       	ldi	r24, 0x10	; 16
 1b2:	89 b9       	out	0x09, r24	; 9
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 1b4:	80 91 e8 00 	lds	r24, 0x00E8
 1b8:	87 7f       	andi	r24, 0xF7	; 247
 1ba:	80 93 e8 00 	sts	0x00E8, r24
			{
				LEDs_ToggleLEDs(LEDS_LED1);

				Endpoint_ClearSETUP();

				Endpoint_Read_Control_Stream_LE(ControlData, sizeof(ControlData));
 1be:	ce 01       	movw	r24, r28
 1c0:	01 96       	adiw	r24, 0x01	; 1
 1c2:	62 e0       	ldi	r22, 0x02	; 2
 1c4:	70 e0       	ldi	r23, 0x00	; 0
 1c6:	20 d1       	rcall	.+576    	; 0x408 <Endpoint_Read_Control_Stream_LE>
 1c8:	80 91 e8 00 	lds	r24, 0x00E8
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
				#else
					UEINTX &= ~(1 << TXINI);
 1cc:	8e 7f       	andi	r24, 0xFE	; 254
 1ce:	80 93 e8 00 	sts	0x00E8, r24
 1d2:	80 91 16 01 	lds	r24, 0x0116
				Endpoint_ClearIN();

				switch (USB_ControlRequest.wValue)
 1d6:	90 91 17 01 	lds	r25, 0x0117
 1da:	23 e0       	ldi	r18, 0x03	; 3
 1dc:	86 30       	cpi	r24, 0x06	; 6
 1de:	92 07       	cpc	r25, r18
 1e0:	d9 f0       	breq	.+54     	; 0x218 <EVENT_USB_Device_ControlRequest+0xa6>
 1e2:	23 e0       	ldi	r18, 0x03	; 3
 1e4:	87 30       	cpi	r24, 0x07	; 7
 1e6:	92 07       	cpc	r25, r18
 1e8:	30 f4       	brcc	.+12     	; 0x1f6 <EVENT_USB_Device_ControlRequest+0x84>
 1ea:	23 e0       	ldi	r18, 0x03	; 3
 1ec:	83 30       	cpi	r24, 0x03	; 3
 1ee:	92 07       	cpc	r25, r18
 1f0:	09 f0       	breq	.+2      	; 0x1f4 <EVENT_USB_Device_ControlRequest+0x82>
 1f2:	77 c0       	rjmp	.+238    	; 0x2e2 <EVENT_USB_Device_ControlRequest+0x170>
 1f4:	0a c0       	rjmp	.+20     	; 0x20a <EVENT_USB_Device_ControlRequest+0x98>
 1f6:	23 e0       	ldi	r18, 0x03	; 3
 1f8:	89 30       	cpi	r24, 0x09	; 9
 1fa:	92 07       	cpc	r25, r18
 1fc:	a1 f0       	breq	.+40     	; 0x226 <EVENT_USB_Device_ControlRequest+0xb4>
 1fe:	23 e0       	ldi	r18, 0x03	; 3
 200:	8c 30       	cpi	r24, 0x0C	; 12
 202:	92 07       	cpc	r25, r18
 204:	09 f0       	breq	.+2      	; 0x208 <EVENT_USB_Device_ControlRequest+0x96>
 206:	6d c0       	rjmp	.+218    	; 0x2e2 <EVENT_USB_Device_ControlRequest+0x170>
 208:	15 c0       	rjmp	.+42     	; 0x234 <EVENT_USB_Device_ControlRequest+0xc2>
 20a:	8a 81       	ldd	r24, Y+2	; 0x02
				{
					case 0x303:
						if (ControlData[1]) PORTC &= ~RELAY1; else PORTC |= RELAY1;
 20c:	88 23       	and	r24, r24
 20e:	11 f0       	breq	.+4      	; 0x214 <EVENT_USB_Device_ControlRequest+0xa2>
 210:	47 98       	cbi	0x08, 7	; 8
 212:	67 c0       	rjmp	.+206    	; 0x2e2 <EVENT_USB_Device_ControlRequest+0x170>
 214:	47 9a       	sbi	0x08, 7	; 8
 216:	65 c0       	rjmp	.+202    	; 0x2e2 <EVENT_USB_Device_ControlRequest+0x170>
 218:	8a 81       	ldd	r24, Y+2	; 0x02
						break;
					case 0x306:
						if (ControlData[1]) PORTC &= ~RELAY2; else PORTC |= RELAY2;
 21a:	88 23       	and	r24, r24
 21c:	11 f0       	breq	.+4      	; 0x222 <EVENT_USB_Device_ControlRequest+0xb0>
 21e:	46 98       	cbi	0x08, 6	; 8
 220:	60 c0       	rjmp	.+192    	; 0x2e2 <EVENT_USB_Device_ControlRequest+0x170>
 222:	46 9a       	sbi	0x08, 6	; 8
 224:	5e c0       	rjmp	.+188    	; 0x2e2 <EVENT_USB_Device_ControlRequest+0x170>
 226:	8a 81       	ldd	r24, Y+2	; 0x02
						break;
					case 0x309:
						if (ControlData[1]) PORTC &= ~RELAY3; else PORTC |= RELAY3;
 228:	88 23       	and	r24, r24
 22a:	11 f0       	breq	.+4      	; 0x230 <EVENT_USB_Device_ControlRequest+0xbe>
 22c:	45 98       	cbi	0x08, 5	; 8
 22e:	59 c0       	rjmp	.+178    	; 0x2e2 <EVENT_USB_Device_ControlRequest+0x170>
 230:	45 9a       	sbi	0x08, 5	; 8
 232:	57 c0       	rjmp	.+174    	; 0x2e2 <EVENT_USB_Device_ControlRequest+0x170>
 234:	8a 81       	ldd	r24, Y+2	; 0x02
						break;
					case 0x30c:
						if (ControlData[1]) PORTC &= ~RELAY4; else PORTC |= RELAY4;
 236:	88 23       	and	r24, r24
 238:	11 f0       	breq	.+4      	; 0x23e <EVENT_USB_Device_ControlRequest+0xcc>
 23a:	44 98       	cbi	0x08, 4	; 8
 23c:	52 c0       	rjmp	.+164    	; 0x2e2 <EVENT_USB_Device_ControlRequest+0x170>
 23e:	44 9a       	sbi	0x08, 4	; 8
 240:	50 c0       	rjmp	.+160    	; 0x2e2 <EVENT_USB_Device_ControlRequest+0x170>
 242:	80 91 14 01 	lds	r24, 0x0114
				}
			}

			break;
		case 0x01:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
 246:	81 3a       	cpi	r24, 0xA1	; 161
 248:	09 f0       	breq	.+2      	; 0x24c <EVENT_USB_Device_ControlRequest+0xda>
 24a:	4b c0       	rjmp	.+150    	; 0x2e2 <EVENT_USB_Device_ControlRequest+0x170>
 24c:	80 e1       	ldi	r24, 0x10	; 16
 24e:	89 b9       	out	0x09, r24	; 9
 250:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 254:	87 7f       	andi	r24, 0xF7	; 247
 256:	80 93 e8 00 	sts	0x00E8, r24
 25a:	80 91 16 01 	lds	r24, 0x0116
			{
				LEDs_ToggleLEDs(LEDS_LED1);

				Endpoint_ClearSETUP();

				switch (USB_ControlRequest.wValue)
 25e:	90 91 17 01 	lds	r25, 0x0117
 262:	23 e0       	ldi	r18, 0x03	; 3
 264:	86 30       	cpi	r24, 0x06	; 6
 266:	92 07       	cpc	r25, r18
 268:	19 f1       	breq	.+70     	; 0x2b0 <EVENT_USB_Device_ControlRequest+0x13e>
 26a:	23 e0       	ldi	r18, 0x03	; 3
 26c:	87 30       	cpi	r24, 0x07	; 7
 26e:	92 07       	cpc	r25, r18
 270:	48 f4       	brcc	.+18     	; 0x284 <EVENT_USB_Device_ControlRequest+0x112>
 272:	23 e0       	ldi	r18, 0x03	; 3
 274:	81 30       	cpi	r24, 0x01	; 1
 276:	92 07       	cpc	r25, r18
 278:	71 f0       	breq	.+28     	; 0x296 <EVENT_USB_Device_ControlRequest+0x124>
 27a:	23 e0       	ldi	r18, 0x03	; 3
 27c:	83 30       	cpi	r24, 0x03	; 3
 27e:	92 07       	cpc	r25, r18
 280:	19 f5       	brne	.+70     	; 0x2c8 <EVENT_USB_Device_ControlRequest+0x156>
 282:	0f c0       	rjmp	.+30     	; 0x2a2 <EVENT_USB_Device_ControlRequest+0x130>
 284:	23 e0       	ldi	r18, 0x03	; 3
 286:	89 30       	cpi	r24, 0x09	; 9
 288:	92 07       	cpc	r25, r18
 28a:	a9 f0       	breq	.+42     	; 0x2b6 <EVENT_USB_Device_ControlRequest+0x144>
 28c:	23 e0       	ldi	r18, 0x03	; 3
 28e:	8c 30       	cpi	r24, 0x0C	; 12
 290:	92 07       	cpc	r25, r18
 292:	d1 f4       	brne	.+52     	; 0x2c8 <EVENT_USB_Device_ControlRequest+0x156>
 294:	13 c0       	rjmp	.+38     	; 0x2bc <EVENT_USB_Device_ControlRequest+0x14a>
 296:	ce 01       	movw	r24, r28
				{
					case 0x301:
						Endpoint_Write_Control_Stream_LE(SerialNumber, sizeof(SerialNumber));
 298:	03 96       	adiw	r24, 0x03	; 3
 29a:	65 e0       	ldi	r22, 0x05	; 5
 29c:	70 e0       	ldi	r23, 0x00	; 0
 29e:	5b d0       	rcall	.+182    	; 0x356 <Endpoint_Write_Control_Stream_LE>
 2a0:	13 c0       	rjmp	.+38     	; 0x2c8 <EVENT_USB_Device_ControlRequest+0x156>
 2a2:	88 b1       	in	r24, 0x08	; 8
						break;
 2a4:	80 95       	com	r24
					case 0x303:
						ControlData[1] = (PORTC & RELAY1) ? 2 : 3;
 2a6:	88 1f       	adc	r24, r24
 2a8:	88 27       	eor	r24, r24
 2aa:	88 1f       	adc	r24, r24
 2ac:	8e 5f       	subi	r24, 0xFE	; 254
 2ae:	0b c0       	rjmp	.+22     	; 0x2c6 <EVENT_USB_Device_ControlRequest+0x154>
 2b0:	46 9b       	sbis	0x08, 6	; 8
 2b2:	08 c0       	rjmp	.+16     	; 0x2c4 <EVENT_USB_Device_ControlRequest+0x152>
						break;
					case 0x306:
						ControlData[1] = (PORTC & RELAY2) ? 2 : 3;
 2b4:	05 c0       	rjmp	.+10     	; 0x2c0 <EVENT_USB_Device_ControlRequest+0x14e>
 2b6:	45 9b       	sbis	0x08, 5	; 8
 2b8:	05 c0       	rjmp	.+10     	; 0x2c4 <EVENT_USB_Device_ControlRequest+0x152>
						break;
					case 0x309:
						ControlData[1] = (PORTC & RELAY3) ? 2 : 3;
 2ba:	02 c0       	rjmp	.+4      	; 0x2c0 <EVENT_USB_Device_ControlRequest+0x14e>
 2bc:	44 9b       	sbis	0x08, 4	; 8
 2be:	02 c0       	rjmp	.+4      	; 0x2c4 <EVENT_USB_Device_ControlRequest+0x152>
						break;
					case 0x30c:
						ControlData[1] = (PORTC & RELAY4) ? 2 : 3;
 2c0:	82 e0       	ldi	r24, 0x02	; 2
 2c2:	01 c0       	rjmp	.+2      	; 0x2c6 <EVENT_USB_Device_ControlRequest+0x154>
 2c4:	83 e0       	ldi	r24, 0x03	; 3
 2c6:	8a 83       	std	Y+2, r24	; 0x02
 2c8:	8a 81       	ldd	r24, Y+2	; 0x02
 2ca:	88 23       	and	r24, r24
						break;
				}

				if (ControlData[1])
 2cc:	29 f0       	breq	.+10     	; 0x2d8 <EVENT_USB_Device_ControlRequest+0x166>
 2ce:	ce 01       	movw	r24, r28
 2d0:	01 96       	adiw	r24, 0x01	; 1
				  Endpoint_Write_Control_Stream_LE(ControlData, sizeof(ControlData));
 2d2:	62 e0       	ldi	r22, 0x02	; 2
 2d4:	70 e0       	ldi	r23, 0x00	; 0
 2d6:	3f d0       	rcall	.+126    	; 0x356 <Endpoint_Write_Control_Stream_LE>
 2d8:	80 91 e8 00 	lds	r24, 0x00E8
 2dc:	8b 7f       	andi	r24, 0xFB	; 251
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
				#else
					UEINTX &= ~(1 << RXOUTI);
 2de:	80 93 e8 00 	sts	0x00E8, r24
 2e2:	27 96       	adiw	r28, 0x07	; 7
 2e4:	0f b6       	in	r0, 0x3f	; 63
 2e6:	f8 94       	cli
				Endpoint_ClearOUT();
			}

			break;
	}
}
 2e8:	de bf       	out	0x3e, r29	; 62
 2ea:	0f be       	out	0x3f, r0	; 63
 2ec:	cd bf       	out	0x3d, r28	; 61
 2ee:	df 91       	pop	r29
 2f0:	cf 91       	pop	r28
 2f2:	08 95       	ret

000002f4 <CALLBACK_USB_GetDescriptor>:
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
 2f4:	92 30       	cpi	r25, 0x02	; 2
 2f6:	29 f0       	breq	.+10     	; 0x302 <CALLBACK_USB_GetDescriptor+0xe>
 2f8:	93 30       	cpi	r25, 0x03	; 3
 2fa:	41 f0       	breq	.+16     	; 0x30c <CALLBACK_USB_GetDescriptor+0x18>
 2fc:	91 30       	cpi	r25, 0x01	; 1
 2fe:	11 f5       	brne	.+68     	; 0x344 <CALLBACK_USB_GetDescriptor+0x50>
 300:	1c c0       	rjmp	.+56     	; 0x33a <CALLBACK_USB_GetDescriptor+0x46>
			Address = &RelayBoard_DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			Address = &RelayBoard_ConfigurationDescriptor;
			Size    = sizeof(USB_Descriptor_Configuration_t);
 302:	82 e1       	ldi	r24, 0x12	; 18
 304:	90 e0       	ldi	r25, 0x00	; 0
		case DTYPE_Device:
			Address = &RelayBoard_DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			Address = &RelayBoard_ConfigurationDescriptor;
 306:	e0 ed       	ldi	r30, 0xD0	; 208
 308:	f0 e0       	ldi	r31, 0x00	; 0
			Size    = sizeof(USB_Descriptor_Configuration_t);
			break;
 30a:	20 c0       	rjmp	.+64     	; 0x34c <CALLBACK_USB_GetDescriptor+0x58>
		case DTYPE_String:
			switch (DescriptorNumber)
 30c:	81 30       	cpi	r24, 0x01	; 1
 30e:	51 f0       	breq	.+20     	; 0x324 <CALLBACK_USB_GetDescriptor+0x30>
 310:	81 30       	cpi	r24, 0x01	; 1
 312:	28 f0       	brcs	.+10     	; 0x31e <CALLBACK_USB_GetDescriptor+0x2a>
 314:	82 30       	cpi	r24, 0x02	; 2
 316:	49 f0       	breq	.+18     	; 0x32a <CALLBACK_USB_GetDescriptor+0x36>
 318:	83 30       	cpi	r24, 0x03	; 3
 31a:	a1 f4       	brne	.+40     	; 0x344 <CALLBACK_USB_GetDescriptor+0x50>
 31c:	09 c0       	rjmp	.+18     	; 0x330 <CALLBACK_USB_GetDescriptor+0x3c>
			{
				case 0x00:
					Address = &RelayBoard_LanguageString;
					Size    = pgm_read_byte(&RelayBoard_LanguageString.Header.Size);
 31e:	ec ec       	ldi	r30, 0xCC	; 204
 320:	f0 e0       	ldi	r31, 0x00	; 0
 322:	08 c0       	rjmp	.+16     	; 0x334 <CALLBACK_USB_GetDescriptor+0x40>
					break;
				case 0x01:
					Address = &RelayBoard_ManufacturerString;
					Size    = pgm_read_byte(&RelayBoard_ManufacturerString.Header.Size);
 324:	ee eb       	ldi	r30, 0xBE	; 190
 326:	f0 e0       	ldi	r31, 0x00	; 0
 328:	05 c0       	rjmp	.+10     	; 0x334 <CALLBACK_USB_GetDescriptor+0x40>
					break;
				case 0x02:
					Address = &RelayBoard_ProductString;
					Size    = pgm_read_byte(&RelayBoard_ProductString.Header.Size);
 32a:	e6 ea       	ldi	r30, 0xA6	; 166
 32c:	f0 e0       	ldi	r31, 0x00	; 0
 32e:	02 c0       	rjmp	.+4      	; 0x334 <CALLBACK_USB_GetDescriptor+0x40>
					break;
				case 0x03:
					Address = &RelayBoard_SerialString;
					Size    = pgm_read_byte(&RelayBoard_SerialString.Header.Size);
 330:	e8 e9       	ldi	r30, 0x98	; 152
 332:	f0 e0       	ldi	r31, 0x00	; 0
 334:	84 91       	lpm	r24, Z
 336:	90 e0       	ldi	r25, 0x00	; 0
					break;
 338:	09 c0       	rjmp	.+18     	; 0x34c <CALLBACK_USB_GetDescriptor+0x58>

	switch (DescriptorType)
	{
		case DTYPE_Device:
			Address = &RelayBoard_DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
 33a:	82 e1       	ldi	r24, 0x12	; 18
 33c:	90 e0       	ldi	r25, 0x00	; 0
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
	{
		case DTYPE_Device:
			Address = &RelayBoard_DeviceDescriptor;
 33e:	e2 ee       	ldi	r30, 0xE2	; 226
 340:	f0 e0       	ldi	r31, 0x00	; 0
 342:	04 c0       	rjmp	.+8      	; 0x34c <CALLBACK_USB_GetDescriptor+0x58>
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;
 344:	80 e0       	ldi	r24, 0x00	; 0
 346:	90 e0       	ldi	r25, 0x00	; 0
                                    const void** const DescriptorAddress)
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
 348:	e0 e0       	ldi	r30, 0x00	; 0
 34a:	f0 e0       	ldi	r31, 0x00	; 0
			}

			break;
	}

	*DescriptorAddress = Address;
 34c:	da 01       	movw	r26, r20
 34e:	11 96       	adiw	r26, 0x01	; 1
 350:	fc 93       	st	X, r31
 352:	ee 93       	st	-X, r30
	return Size;
}
 354:	08 95       	ret

00000356 <Endpoint_Write_Control_Stream_LE>:
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
 356:	20 91 1a 01 	lds	r18, 0x011A
 35a:	30 91 1b 01 	lds	r19, 0x011B
 35e:	26 17       	cp	r18, r22
 360:	37 07       	cpc	r19, r23
 362:	20 f4       	brcc	.+8      	; 0x36c <Endpoint_Write_Control_Stream_LE+0x16>
 364:	b9 01       	movw	r22, r18
 366:	fc 01       	movw	r30, r24
 368:	20 e0       	ldi	r18, 0x00	; 0
 36a:	35 c0       	rjmp	.+106    	; 0x3d6 <Endpoint_Write_Control_Stream_LE+0x80>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
 36c:	61 15       	cp	r22, r1
 36e:	71 05       	cpc	r23, r1
 370:	d1 f7       	brne	.-12     	; 0x366 <Endpoint_Write_Control_Stream_LE+0x10>
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
				#else
					UEINTX &= ~(1 << TXINI);
 372:	20 91 e8 00 	lds	r18, 0x00E8
 376:	2e 7f       	andi	r18, 0xFE	; 254
 378:	20 93 e8 00 	sts	0x00E8, r18
 37c:	f4 cf       	rjmp	.-24     	; 0x366 <Endpoint_Write_Control_Stream_LE+0x10>
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
 37e:	8e b3       	in	r24, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
 380:	88 23       	and	r24, r24
 382:	f1 f1       	breq	.+124    	; 0x400 <Endpoint_Write_Control_Stream_LE+0xaa>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
 384:	85 30       	cpi	r24, 0x05	; 5
 386:	c1 f1       	breq	.+112    	; 0x3f8 <Endpoint_Write_Control_Stream_LE+0xa2>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 388:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
 38c:	83 fd       	sbrc	r24, 3
 38e:	36 c0       	rjmp	.+108    	; 0x3fc <Endpoint_Write_Control_Stream_LE+0xa6>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 390:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
 394:	82 fd       	sbrc	r24, 2
 396:	2a c0       	rjmp	.+84     	; 0x3ec <Endpoint_Write_Control_Stream_LE+0x96>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 398:	80 91 e8 00 	lds	r24, 0x00E8
		  break;

		if (Endpoint_IsINReady())
 39c:	80 ff       	sbrs	r24, 0
 39e:	1b c0       	rjmp	.+54     	; 0x3d6 <Endpoint_Write_Control_Stream_LE+0x80>
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
 3a0:	80 91 f2 00 	lds	r24, 0x00F2
 3a4:	90 91 f3 00 	lds	r25, 0x00F3
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
 3a8:	06 c0       	rjmp	.+12     	; 0x3b6 <Endpoint_Write_Control_Stream_LE+0x60>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
 3aa:	21 91       	ld	r18, Z+
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
 3ac:	20 93 f1 00 	sts	0x00F1, r18
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
 3b0:	61 50       	subi	r22, 0x01	; 1
 3b2:	70 40       	sbci	r23, 0x00	; 0
				BytesInEndpoint++;
 3b4:	01 96       	adiw	r24, 0x01	; 1

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
 3b6:	61 15       	cp	r22, r1
 3b8:	71 05       	cpc	r23, r1
 3ba:	19 f0       	breq	.+6      	; 0x3c2 <Endpoint_Write_Control_Stream_LE+0x6c>
 3bc:	88 30       	cpi	r24, 0x08	; 8
 3be:	91 05       	cpc	r25, r1
 3c0:	a0 f3       	brcs	.-24     	; 0x3aa <Endpoint_Write_Control_Stream_LE+0x54>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
 3c2:	21 e0       	ldi	r18, 0x01	; 1
 3c4:	88 30       	cpi	r24, 0x08	; 8
 3c6:	91 05       	cpc	r25, r1
 3c8:	09 f0       	breq	.+2      	; 0x3cc <Endpoint_Write_Control_Stream_LE+0x76>
 3ca:	20 e0       	ldi	r18, 0x00	; 0
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
				#else
					UEINTX &= ~(1 << TXINI);
 3cc:	80 91 e8 00 	lds	r24, 0x00E8
 3d0:	8e 7f       	andi	r24, 0xFE	; 254
 3d2:	80 93 e8 00 	sts	0x00E8, r24
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
 3d6:	61 15       	cp	r22, r1
 3d8:	71 05       	cpc	r23, r1
 3da:	89 f6       	brne	.-94     	; 0x37e <Endpoint_Write_Control_Stream_LE+0x28>
 3dc:	22 23       	and	r18, r18
 3de:	79 f6       	brne	.-98     	; 0x37e <Endpoint_Write_Control_Stream_LE+0x28>
 3e0:	05 c0       	rjmp	.+10     	; 0x3ec <Endpoint_Write_Control_Stream_LE+0x96>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
 3e2:	8e b3       	in	r24, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
 3e4:	88 23       	and	r24, r24
 3e6:	61 f0       	breq	.+24     	; 0x400 <Endpoint_Write_Control_Stream_LE+0xaa>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
 3e8:	85 30       	cpi	r24, 0x05	; 5
 3ea:	61 f0       	breq	.+24     	; 0x404 <Endpoint_Write_Control_Stream_LE+0xae>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 3ec:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
 3f0:	82 ff       	sbrs	r24, 2
 3f2:	f7 cf       	rjmp	.-18     	; 0x3e2 <Endpoint_Write_Control_Stream_LE+0x8c>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
 3f4:	80 e0       	ldi	r24, 0x00	; 0
 3f6:	08 95       	ret
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
 3f8:	83 e0       	ldi	r24, 0x03	; 3
 3fa:	08 95       	ret
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
 3fc:	81 e0       	ldi	r24, 0x01	; 1
 3fe:	08 95       	ret
	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
 400:	82 e0       	ldi	r24, 0x02	; 2
 402:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
 404:	83 e0       	ldi	r24, 0x03	; 3
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
 406:	08 95       	ret

00000408 <Endpoint_Read_Control_Stream_LE>:
uint8_t TEMPLATE_FUNC_NAME (void* const Buffer,
                            uint16_t Length)
{
	uint8_t* DataStream = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));

	if (!(Length))
 408:	61 15       	cp	r22, r1
 40a:	71 05       	cpc	r23, r1
 40c:	29 f4       	brne	.+10     	; 0x418 <Endpoint_Read_Control_Stream_LE+0x10>
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
				#else
					UEINTX &= ~(1 << RXOUTI);
 40e:	20 91 e8 00 	lds	r18, 0x00E8
 412:	2b 7f       	andi	r18, 0xFB	; 251
 414:	20 93 e8 00 	sts	0x00E8, r18

#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (void* const Buffer,
                            uint16_t Length)
{
 418:	38 2f       	mov	r19, r24
 41a:	29 2f       	mov	r18, r25
 41c:	25 c0       	rjmp	.+74     	; 0x468 <Endpoint_Read_Control_Stream_LE+0x60>
	if (!(Length))
	  Endpoint_ClearOUT();

	while (Length)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
 41e:	8e b3       	in	r24, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
 420:	88 23       	and	r24, r24
 422:	a9 f1       	breq	.+106    	; 0x48e <Endpoint_Read_Control_Stream_LE+0x86>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
 424:	85 30       	cpi	r24, 0x05	; 5
 426:	79 f1       	breq	.+94     	; 0x486 <Endpoint_Read_Control_Stream_LE+0x7e>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 428:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
 42c:	83 fd       	sbrc	r24, 3
 42e:	2d c0       	rjmp	.+90     	; 0x48a <Endpoint_Read_Control_Stream_LE+0x82>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 430:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;

		if (Endpoint_IsOUTReceived())
 434:	82 ff       	sbrs	r24, 2
 436:	f3 cf       	rjmp	.-26     	; 0x41e <Endpoint_Read_Control_Stream_LE+0x16>
 438:	e3 2f       	mov	r30, r19
 43a:	f2 2f       	mov	r31, r18
 43c:	08 c0       	rjmp	.+16     	; 0x44e <Endpoint_Read_Control_Stream_LE+0x46>
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
 43e:	80 91 f1 00 	lds	r24, 0x00F1
		{
			while (Length && Endpoint_BytesInEndpoint())
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
 442:	81 93       	st	Z+, r24
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
 444:	3e 2f       	mov	r19, r30
 446:	2f 2f       	mov	r18, r31
				Length--;
 448:	61 50       	subi	r22, 0x01	; 1
 44a:	70 40       	sbci	r23, 0x00	; 0
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;

		if (Endpoint_IsOUTReceived())
		{
			while (Length && Endpoint_BytesInEndpoint())
 44c:	41 f0       	breq	.+16     	; 0x45e <Endpoint_Read_Control_Stream_LE+0x56>
 44e:	3e 2f       	mov	r19, r30
 450:	2f 2f       	mov	r18, r31
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
 452:	80 91 f2 00 	lds	r24, 0x00F2
 456:	90 91 f3 00 	lds	r25, 0x00F3
 45a:	00 97       	sbiw	r24, 0x00	; 0
 45c:	81 f7       	brne	.-32     	; 0x43e <Endpoint_Read_Control_Stream_LE+0x36>
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
				#else
					UEINTX &= ~(1 << RXOUTI);
 45e:	80 91 e8 00 	lds	r24, 0x00E8
 462:	8b 7f       	andi	r24, 0xFB	; 251
 464:	80 93 e8 00 	sts	0x00E8, r24
	uint8_t* DataStream = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));

	if (!(Length))
	  Endpoint_ClearOUT();

	while (Length)
 468:	61 15       	cp	r22, r1
 46a:	71 05       	cpc	r23, r1
 46c:	c1 f6       	brne	.-80     	; 0x41e <Endpoint_Read_Control_Stream_LE+0x16>
 46e:	05 c0       	rjmp	.+10     	; 0x47a <Endpoint_Read_Control_Stream_LE+0x72>
		}
	}

	while (!(Endpoint_IsINReady()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
 470:	8e b3       	in	r24, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
 472:	88 23       	and	r24, r24
 474:	61 f0       	breq	.+24     	; 0x48e <Endpoint_Read_Control_Stream_LE+0x86>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
 476:	85 30       	cpi	r24, 0x05	; 5
 478:	61 f0       	breq	.+24     	; 0x492 <Endpoint_Read_Control_Stream_LE+0x8a>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 47a:	80 91 e8 00 	lds	r24, 0x00E8

			Endpoint_ClearOUT();
		}
	}

	while (!(Endpoint_IsINReady()))
 47e:	80 ff       	sbrs	r24, 0
 480:	f7 cf       	rjmp	.-18     	; 0x470 <Endpoint_Read_Control_Stream_LE+0x68>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
 482:	80 e0       	ldi	r24, 0x00	; 0
 484:	08 95       	ret
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
 486:	83 e0       	ldi	r24, 0x03	; 3
 488:	08 95       	ret
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
 48a:	81 e0       	ldi	r24, 0x01	; 1
 48c:	08 95       	ret
	while (!(Endpoint_IsINReady()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
 48e:	82 e0       	ldi	r24, 0x02	; 2
 490:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
 492:	83 e0       	ldi	r24, 0x03	; 3
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
 494:	08 95       	ret

00000496 <Endpoint_Write_Control_PStream_LE>:
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
 496:	20 91 1a 01 	lds	r18, 0x011A
 49a:	30 91 1b 01 	lds	r19, 0x011B
 49e:	26 17       	cp	r18, r22
 4a0:	37 07       	cpc	r19, r23
 4a2:	20 f4       	brcc	.+8      	; 0x4ac <Endpoint_Write_Control_PStream_LE+0x16>
 4a4:	b9 01       	movw	r22, r18
 4a6:	fc 01       	movw	r30, r24
 4a8:	20 e0       	ldi	r18, 0x00	; 0
 4aa:	37 c0       	rjmp	.+110    	; 0x51a <Endpoint_Write_Control_PStream_LE+0x84>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
 4ac:	61 15       	cp	r22, r1
 4ae:	71 05       	cpc	r23, r1
 4b0:	d1 f7       	brne	.-12     	; 0x4a6 <Endpoint_Write_Control_PStream_LE+0x10>
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
				#else
					UEINTX &= ~(1 << TXINI);
 4b2:	20 91 e8 00 	lds	r18, 0x00E8
 4b6:	2e 7f       	andi	r18, 0xFE	; 254
 4b8:	20 93 e8 00 	sts	0x00E8, r18
 4bc:	f4 cf       	rjmp	.-24     	; 0x4a6 <Endpoint_Write_Control_PStream_LE+0x10>
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
 4be:	8e b3       	in	r24, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
 4c0:	88 23       	and	r24, r24
 4c2:	09 f4       	brne	.+2      	; 0x4c6 <Endpoint_Write_Control_PStream_LE+0x30>
 4c4:	3f c0       	rjmp	.+126    	; 0x544 <Endpoint_Write_Control_PStream_LE+0xae>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
 4c6:	85 30       	cpi	r24, 0x05	; 5
 4c8:	c9 f1       	breq	.+114    	; 0x53c <Endpoint_Write_Control_PStream_LE+0xa6>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 4ca:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
 4ce:	83 fd       	sbrc	r24, 3
 4d0:	37 c0       	rjmp	.+110    	; 0x540 <Endpoint_Write_Control_PStream_LE+0xaa>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 4d2:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
 4d6:	82 fd       	sbrc	r24, 2
 4d8:	2b c0       	rjmp	.+86     	; 0x530 <Endpoint_Write_Control_PStream_LE+0x9a>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 4da:	80 91 e8 00 	lds	r24, 0x00E8
		  break;

		if (Endpoint_IsINReady())
 4de:	80 ff       	sbrs	r24, 0
 4e0:	1c c0       	rjmp	.+56     	; 0x51a <Endpoint_Write_Control_PStream_LE+0x84>
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
 4e2:	80 91 f2 00 	lds	r24, 0x00F2
 4e6:	90 91 f3 00 	lds	r25, 0x00F3
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
 4ea:	07 c0       	rjmp	.+14     	; 0x4fa <Endpoint_Write_Control_PStream_LE+0x64>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
 4ec:	24 91       	lpm	r18, Z
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
 4ee:	20 93 f1 00 	sts	0x00F1, r18
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
 4f2:	31 96       	adiw	r30, 0x01	; 1
				Length--;
 4f4:	61 50       	subi	r22, 0x01	; 1
 4f6:	70 40       	sbci	r23, 0x00	; 0
				BytesInEndpoint++;
 4f8:	01 96       	adiw	r24, 0x01	; 1

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
 4fa:	61 15       	cp	r22, r1
 4fc:	71 05       	cpc	r23, r1
 4fe:	19 f0       	breq	.+6      	; 0x506 <Endpoint_Write_Control_PStream_LE+0x70>
 500:	88 30       	cpi	r24, 0x08	; 8
 502:	91 05       	cpc	r25, r1
 504:	98 f3       	brcs	.-26     	; 0x4ec <Endpoint_Write_Control_PStream_LE+0x56>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
 506:	21 e0       	ldi	r18, 0x01	; 1
 508:	88 30       	cpi	r24, 0x08	; 8
 50a:	91 05       	cpc	r25, r1
 50c:	09 f0       	breq	.+2      	; 0x510 <Endpoint_Write_Control_PStream_LE+0x7a>
 50e:	20 e0       	ldi	r18, 0x00	; 0
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
				#else
					UEINTX &= ~(1 << TXINI);
 510:	80 91 e8 00 	lds	r24, 0x00E8
 514:	8e 7f       	andi	r24, 0xFE	; 254
 516:	80 93 e8 00 	sts	0x00E8, r24
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
 51a:	61 15       	cp	r22, r1
 51c:	71 05       	cpc	r23, r1
 51e:	79 f6       	brne	.-98     	; 0x4be <Endpoint_Write_Control_PStream_LE+0x28>
 520:	22 23       	and	r18, r18
 522:	69 f6       	brne	.-102    	; 0x4be <Endpoint_Write_Control_PStream_LE+0x28>
 524:	05 c0       	rjmp	.+10     	; 0x530 <Endpoint_Write_Control_PStream_LE+0x9a>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
 526:	8e b3       	in	r24, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
 528:	88 23       	and	r24, r24
 52a:	61 f0       	breq	.+24     	; 0x544 <Endpoint_Write_Control_PStream_LE+0xae>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
 52c:	85 30       	cpi	r24, 0x05	; 5
 52e:	61 f0       	breq	.+24     	; 0x548 <Endpoint_Write_Control_PStream_LE+0xb2>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 530:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
 534:	82 ff       	sbrs	r24, 2
 536:	f7 cf       	rjmp	.-18     	; 0x526 <Endpoint_Write_Control_PStream_LE+0x90>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
 538:	80 e0       	ldi	r24, 0x00	; 0
 53a:	08 95       	ret
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
 53c:	83 e0       	ldi	r24, 0x03	; 3
 53e:	08 95       	ret
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
 540:	81 e0       	ldi	r24, 0x01	; 1
 542:	08 95       	ret
	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
 544:	82 e0       	ldi	r24, 0x02	; 2
 546:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
 548:	83 e0       	ldi	r24, 0x03	; 3
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
 54a:	08 95       	ret

0000054c <Endpoint_ConfigureEndpoint_Prv>:
			 *  \note Endpoints must first be configured properly via \ref Endpoint_ConfigureEndpoint().
			 */
			static inline void Endpoint_EnableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_EnableEndpoint(void)
			{
				UECONX |= (1 << EPEN);
 54c:	eb ee       	ldi	r30, 0xEB	; 235
 54e:	f0 e0       	ldi	r31, 0x00	; 0
 550:	80 81       	ld	r24, Z
 552:	81 60       	ori	r24, 0x01	; 1
 554:	80 83       	st	Z, r24
{
#if defined(CONTROL_ONLY_DEVICE) || defined(ORDERED_EP_CONFIG)
	Endpoint_SelectEndpoint(Number);
	Endpoint_EnableEndpoint();

	UECFG1X = 0;
 556:	ed ee       	ldi	r30, 0xED	; 237
 558:	f0 e0       	ldi	r31, 0x00	; 0
 55a:	10 82       	st	Z, r1
	UECFG0X = UECFG0XData;
 55c:	60 93 ec 00 	sts	0x00EC, r22
	UECFG1X = UECFG1XData;
 560:	40 83       	st	Z, r20
			 *  \return Boolean \c true if the currently selected endpoint has been configured, \c false otherwise.
			 */
			static inline bool Endpoint_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsConfigured(void)
			{
				return ((UESTA0X & (1 << CFGOK)) ? true : false);
 562:	80 91 ee 00 	lds	r24, 0x00EE
	}

	Endpoint_SelectEndpoint(Number);
	return true;
#endif
}
 566:	88 1f       	adc	r24, r24
 568:	88 27       	eor	r24, r24
 56a:	88 1f       	adc	r24, r24
 56c:	08 95       	ret

0000056e <Endpoint_ClearStatusStage>:
	}
}

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
 56e:	80 91 14 01 	lds	r24, 0x0114
 572:	87 ff       	sbrs	r24, 7
 574:	11 c0       	rjmp	.+34     	; 0x598 <Endpoint_ClearStatusStage+0x2a>
 576:	03 c0       	rjmp	.+6      	; 0x57e <Endpoint_ClearStatusStage+0x10>
	{
		while (!(Endpoint_IsOUTReceived()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
 578:	8e b3       	in	r24, 0x1e	; 30
 57a:	88 23       	and	r24, r24
 57c:	b1 f0       	breq	.+44     	; 0x5aa <Endpoint_ClearStatusStage+0x3c>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 57e:	80 91 e8 00 	lds	r24, 0x00E8

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
	{
		while (!(Endpoint_IsOUTReceived()))
 582:	82 ff       	sbrs	r24, 2
 584:	f9 cf       	rjmp	.-14     	; 0x578 <Endpoint_ClearStatusStage+0xa>
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
				#else
					UEINTX &= ~(1 << RXOUTI);
 586:	80 91 e8 00 	lds	r24, 0x00E8
 58a:	8b 7f       	andi	r24, 0xFB	; 251
 58c:	80 93 e8 00 	sts	0x00E8, r24
 590:	08 95       	ret
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
 592:	8e b3       	in	r24, 0x1e	; 30
 594:	88 23       	and	r24, r24
 596:	49 f0       	breq	.+18     	; 0x5aa <Endpoint_ClearStatusStage+0x3c>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 598:	80 91 e8 00 	lds	r24, 0x00E8

		Endpoint_ClearOUT();
	}
	else
	{
		while (!(Endpoint_IsINReady()))
 59c:	80 ff       	sbrs	r24, 0
 59e:	f9 cf       	rjmp	.-14     	; 0x592 <Endpoint_ClearStatusStage+0x24>
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
				#else
					UEINTX &= ~(1 << TXINI);
 5a0:	80 91 e8 00 	lds	r24, 0x00E8
 5a4:	8e 7f       	andi	r24, 0xFE	; 254
 5a6:	80 93 e8 00 	sts	0x00E8, r24
 5aa:	08 95       	ret

000005ac <USB_ResetInterface>:

	USB_IsInitialized = false;
}

void USB_ResetInterface(void)
{
 5ac:	0f 93       	push	r16
 5ae:	1f 93       	push	r17
 5b0:	cf 93       	push	r28
 5b2:	df 93       	push	r29
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
 5b4:	4d d0       	rcall	.+154    	; 0x650 <USB_INT_DisableAllInterrupts>
 5b6:	54 d0       	rcall	.+168    	; 0x660 <USB_INT_ClearAllInterrupts>
	USB_INT_ClearAllInterrupts();
 5b8:	c8 ed       	ldi	r28, 0xD8	; 216
 5ba:	d0 e0       	ldi	r29, 0x00	; 0
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
 5bc:	88 81       	ld	r24, Y
 5be:	8f 77       	andi	r24, 0x7F	; 127
 5c0:	88 83       	st	Y, r24
 5c2:	88 81       	ld	r24, Y
 5c4:	80 68       	ori	r24, 0x80	; 128
				USBCON |=  (1 << USBE);
 5c6:	88 83       	st	Y, r24
 5c8:	88 81       	ld	r24, Y
 5ca:	8f 7d       	andi	r24, 0xDF	; 223
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
 5cc:	88 83       	st	Y, r24
 5ce:	e7 ed       	ldi	r30, 0xD7	; 215
 5d0:	f0 e0       	ldi	r31, 0x00	; 0

	if (USB_CurrentMode == USB_MODE_Device)
	{
		#if defined(USB_CAN_BE_DEVICE)
		#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
		UHWCON |=  (1 << UIMOD);
 5d2:	80 81       	ld	r24, Z
 5d4:	80 68       	ori	r24, 0x80	; 128
 5d6:	80 83       	st	Z, r24
 5d8:	19 bc       	out	0x29, r1	; 41
 5da:	1e ba       	out	0x1e, r1	; 30
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
 5dc:	10 92 10 01 	sts	0x0110, r1

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState                 = DEVICE_STATE_Unattached;
	USB_Device_ConfigurationNumber  = 0;
 5e0:	10 92 12 01 	sts	0x0112, r1

	#if !defined(NO_DEVICE_REMOTE_WAKEUP)
	USB_Device_RemoteWakeupEnabled  = false;
 5e4:	10 92 11 01 	sts	0x0111, r1
	#endif

	#if !defined(NO_DEVICE_SELF_POWER)
	USB_Device_CurrentlySelfPowered = false;
 5e8:	00 ee       	ldi	r16, 0xE0	; 224
 5ea:	10 e0       	ldi	r17, 0x00	; 0
			}

			static inline void USB_Device_SetFullSpeed(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetFullSpeed(void)
			{
				UDCON &= ~(1 << LSM);
 5ec:	f8 01       	movw	r30, r16
 5ee:	80 81       	ld	r24, Z
 5f0:	8b 7f       	andi	r24, 0xFB	; 251
 5f2:	80 83       	st	Z, r24
 5f4:	88 81       	ld	r24, Y
 5f6:	81 60       	ori	r24, 0x01	; 1
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBCON |= (1 << VBUSTE);
 5f8:	88 83       	st	Y, r24
 5fa:	80 e0       	ldi	r24, 0x00	; 0
 5fc:	60 e0       	ldi	r22, 0x00	; 0
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
 5fe:	42 e0       	ldi	r20, 0x02	; 2
 600:	a5 df       	rcall	.-182    	; 0x54c <Endpoint_ConfigureEndpoint_Prv>
 602:	e1 ee       	ldi	r30, 0xE1	; 225
 604:	f0 e0       	ldi	r31, 0x00	; 0
 606:	80 81       	ld	r24, Z
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
 608:	8e 7f       	andi	r24, 0xFE	; 254
 60a:	80 83       	st	Z, r24
 60c:	e2 ee       	ldi	r30, 0xE2	; 226
 60e:	f0 e0       	ldi	r31, 0x00	; 0
 610:	80 81       	ld	r24, Z
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
 612:	81 60       	ori	r24, 0x01	; 1
 614:	80 83       	st	Z, r24
 616:	80 81       	ld	r24, Z
 618:	88 60       	ori	r24, 0x08	; 8
 61a:	80 83       	st	Z, r24
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
 61c:	f8 01       	movw	r30, r16
 61e:	80 81       	ld	r24, Z
 620:	8e 7f       	andi	r24, 0xFE	; 254
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
 622:	80 83       	st	Z, r24
 624:	88 81       	ld	r24, Y
 626:	80 61       	ori	r24, 0x10	; 16
 628:	88 83       	st	Y, r24

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON |=  (1 << OTGPADE);
 62a:	df 91       	pop	r29
 62c:	cf 91       	pop	r28
 62e:	1f 91       	pop	r17
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
 630:	0f 91       	pop	r16
 632:	08 95       	ret

00000634 <USB_Init>:
 634:	e8 ed       	ldi	r30, 0xD8	; 216
 636:	f0 e0       	ldi	r31, 0x00	; 0
 638:	80 81       	ld	r24, Z
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON &= ~(1 << OTGPADE);
 63a:	8f 7e       	andi	r24, 0xEF	; 239
 63c:	80 83       	st	Z, r24

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON |=  (1 << UVREGE);
 63e:	e7 ed       	ldi	r30, 0xD7	; 215
 640:	f0 e0       	ldi	r31, 0x00	; 0
 642:	80 81       	ld	r24, Z
 644:	81 60       	ori	r24, 0x01	; 1
 646:	80 83       	st	Z, r24
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
 648:	81 e0       	ldi	r24, 0x01	; 1
 64a:	80 93 13 01 	sts	0x0113, r24

	USB_ResetInterface();
 64e:	ae cf       	rjmp	.-164    	; 0x5ac <USB_ResetInterface>

00000650 <USB_INT_DisableAllInterrupts>:
#include "../USBInterrupt.h"

void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
 650:	e8 ed       	ldi	r30, 0xD8	; 216
 652:	f0 e0       	ldi	r31, 0x00	; 0
 654:	80 81       	ld	r24, Z
 656:	8c 7f       	andi	r24, 0xFC	; 252
 658:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
 65a:	10 92 e2 00 	sts	0x00E2, r1
	#endif
}
 65e:	08 95       	ret

00000660 <USB_INT_ClearAllInterrupts>:

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
 660:	10 92 da 00 	sts	0x00DA, r1
	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
 664:	10 92 e1 00 	sts	0x00E1, r1
	#endif
}
 668:	08 95       	ret

0000066a <__vector_10>:

ISR(USB_GEN_vect, ISR_BLOCK)
{
 66a:	1f 92       	push	r1
 66c:	0f 92       	push	r0
 66e:	0f b6       	in	r0, 0x3f	; 63
 670:	0f 92       	push	r0
 672:	0b b6       	in	r0, 0x3b	; 59
 674:	0f 92       	push	r0
 676:	11 24       	eor	r1, r1
 678:	2f 93       	push	r18
 67a:	3f 93       	push	r19
 67c:	4f 93       	push	r20
 67e:	5f 93       	push	r21
 680:	6f 93       	push	r22
 682:	7f 93       	push	r23
 684:	8f 93       	push	r24
 686:	9f 93       	push	r25
 688:	af 93       	push	r26
 68a:	bf 93       	push	r27
 68c:	ef 93       	push	r30
 68e:	ff 93       	push	r31
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
					case USB_INT_SOFI:
						return (UDINT  & (1 << SOFI));
 690:	80 91 e1 00 	lds	r24, 0x00E1
	#if defined(USB_CAN_BE_DEVICE)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
 694:	82 ff       	sbrs	r24, 2
 696:	0a c0       	rjmp	.+20     	; 0x6ac <__vector_10+0x42>
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
					case USB_INT_SOFI:
						return (UDIEN  & (1 << SOFE));
 698:	80 91 e2 00 	lds	r24, 0x00E2
 69c:	82 ff       	sbrs	r24, 2
 69e:	06 c0       	rjmp	.+12     	; 0x6ac <__vector_10+0x42>
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
						break;
					case USB_INT_SOFI:
						UDINT  &= ~(1 << SOFI);
 6a0:	80 91 e1 00 	lds	r24, 0x00E1
 6a4:	8b 7f       	andi	r24, 0xFB	; 251
 6a6:	80 93 e1 00 	sts	0x00E1, r24
	{
		USB_INT_Clear(USB_INT_SOFI);

		EVENT_USB_Device_StartOfFrame();
 6aa:	c7 d1       	rcall	.+910    	; 0xa3a <USB_Event_Stub>
 6ac:	80 91 da 00 	lds	r24, 0x00DA
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBINT & (1 << VBUSTI));
 6b0:	80 ff       	sbrs	r24, 0
	}
	#endif

	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	if (USB_INT_HasOccurred(USB_INT_VBUSTI) && USB_INT_IsEnabled(USB_INT_VBUSTI))
 6b2:	1b c0       	rjmp	.+54     	; 0x6ea <__vector_10+0x80>
 6b4:	80 91 d8 00 	lds	r24, 0x00D8
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBCON & (1 << VBUSTE));
 6b8:	80 ff       	sbrs	r24, 0
 6ba:	17 c0       	rjmp	.+46     	; 0x6ea <__vector_10+0x80>
 6bc:	80 91 da 00 	lds	r24, 0x00DA
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBINT &= ~(1 << VBUSTI);
 6c0:	8e 7f       	andi	r24, 0xFE	; 254
 6c2:	80 93 da 00 	sts	0x00DA, r24
 6c6:	80 91 d9 00 	lds	r24, 0x00D9
				 *  \return Boolean \c true if the VBUS line is currently detecting power from a host, \c false otherwise.
				 */
				static inline bool USB_VBUS_GetStatus(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
				static inline bool USB_VBUS_GetStatus(void)
				{
					return ((USBSTA & (1 << VBUS)) ? true : false);
 6ca:	80 ff       	sbrs	r24, 0
	{
		USB_INT_Clear(USB_INT_VBUSTI);

		if (USB_VBUS_GetStatus())
 6cc:	0b c0       	rjmp	.+22     	; 0x6e4 <__vector_10+0x7a>
 6ce:	8c e0       	ldi	r24, 0x0C	; 12

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
 6d0:	89 bd       	out	0x29, r24	; 41
 6d2:	8e e0       	ldi	r24, 0x0E	; 14
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
 6d4:	89 bd       	out	0x29, r24	; 41
 6d6:	09 b4       	in	r0, 0x29	; 41
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			{
				USB_PLL_On();
				while (!(USB_PLL_IsReady()));
 6d8:	00 fe       	sbrs	r0, 0
 6da:	fd cf       	rjmp	.-6      	; 0x6d6 <__vector_10+0x6c>
 6dc:	81 e0       	ldi	r24, 0x01	; 1
			}

			USB_DeviceState = DEVICE_STATE_Powered;
 6de:	8e bb       	out	0x1e, r24	; 30
 6e0:	ac d1       	rcall	.+856    	; 0xa3a <USB_Event_Stub>
			EVENT_USB_Device_Connect();
 6e2:	03 c0       	rjmp	.+6      	; 0x6ea <__vector_10+0x80>
 6e4:	19 bc       	out	0x29, r1	; 41
 6e6:	1e ba       	out	0x1e, r1	; 30
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
 6e8:	a8 d1       	rcall	.+848    	; 0xa3a <USB_Event_Stub>
		else
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			  USB_PLL_Off();

			USB_DeviceState = DEVICE_STATE_Unattached;
 6ea:	80 91 e1 00 	lds	r24, 0x00E1
			EVENT_USB_Device_Disconnect();
 6ee:	80 ff       	sbrs	r24, 0
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
 6f0:	17 c0       	rjmp	.+46     	; 0x720 <__vector_10+0xb6>
 6f2:	80 91 e2 00 	lds	r24, 0x00E2
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
 6f6:	80 ff       	sbrs	r24, 0
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
 6f8:	13 c0       	rjmp	.+38     	; 0x720 <__vector_10+0xb6>
 6fa:	80 91 e2 00 	lds	r24, 0x00E2
 6fe:	8e 7f       	andi	r24, 0xFE	; 254
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
 700:	80 93 e2 00 	sts	0x00E2, r24
 704:	80 91 e2 00 	lds	r24, 0x00E2
 708:	80 61       	ori	r24, 0x10	; 16
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
 70a:	80 93 e2 00 	sts	0x00E2, r24
 70e:	80 91 d8 00 	lds	r24, 0x00D8
 712:	80 62       	ori	r24, 0x20	; 32
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON |=  (1 << FRZCLK);
 714:	80 93 d8 00 	sts	0x00D8, r24
 718:	19 bc       	out	0x29, r1	; 41
 71a:	85 e0       	ldi	r24, 0x05	; 5
 71c:	8e bb       	out	0x1e, r24	; 30
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
 71e:	8d d1       	rcall	.+794    	; 0xa3a <USB_Event_Stub>

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
		EVENT_USB_Device_Disconnect();
		#else
		USB_DeviceState = DEVICE_STATE_Suspended;
 720:	80 91 e1 00 	lds	r24, 0x00E1
		EVENT_USB_Device_Suspend();
 724:	84 ff       	sbrs	r24, 4
 726:	2c c0       	rjmp	.+88     	; 0x780 <__vector_10+0x116>
					case USB_INT_IDTI:
						return (USBINT & (1 << IDTI));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
 728:	80 91 e2 00 	lds	r24, 0x00E2
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
 72c:	84 ff       	sbrs	r24, 4
 72e:	28 c0       	rjmp	.+80     	; 0x780 <__vector_10+0x116>
					case USB_INT_IDTI:
						return (USBCON & (1 << IDTE));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
 730:	8c e0       	ldi	r24, 0x0C	; 12
 732:	89 bd       	out	0x29, r24	; 41
 734:	8e e0       	ldi	r24, 0x0E	; 14
 736:	89 bd       	out	0x29, r24	; 41

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
 738:	09 b4       	in	r0, 0x29	; 41
 73a:	00 fe       	sbrs	r0, 0
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
 73c:	fd cf       	rjmp	.-6      	; 0x738 <__vector_10+0xce>
 73e:	80 91 d8 00 	lds	r24, 0x00D8
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
 742:	8f 7d       	andi	r24, 0xDF	; 223
 744:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
 748:	80 91 e1 00 	lds	r24, 0x00E1
 74c:	8f 7e       	andi	r24, 0xEF	; 239
 74e:	80 93 e1 00 	sts	0x00E1, r24
						USBINT &= ~(1 << IDTI);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
 752:	80 91 e2 00 	lds	r24, 0x00E2
 756:	8f 7e       	andi	r24, 0xEF	; 239
 758:	80 93 e2 00 	sts	0x00E2, r24
						USBCON &= ~(1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
 75c:	80 91 e2 00 	lds	r24, 0x00E2
 760:	81 60       	ori	r24, 0x01	; 1
 762:	80 93 e2 00 	sts	0x00E2, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
 766:	80 91 10 01 	lds	r24, 0x0110
 76a:	88 23       	and	r24, r24
 76c:	21 f4       	brne	.+8      	; 0x776 <__vector_10+0x10c>
		USB_INT_Clear(USB_INT_WAKEUPI);

		USB_INT_Disable(USB_INT_WAKEUPI);
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_Device_ConfigurationNumber)
 76e:	80 91 e3 00 	lds	r24, 0x00E3
 772:	87 ff       	sbrs	r24, 7
 774:	02 c0       	rjmp	.+4      	; 0x77a <__vector_10+0x110>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
 776:	84 e0       	ldi	r24, 0x04	; 4
 778:	01 c0       	rjmp	.+2      	; 0x77c <__vector_10+0x112>
		  USB_DeviceState = DEVICE_STATE_Configured;
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
 77a:	81 e0       	ldi	r24, 0x01	; 1
 77c:	8e bb       	out	0x1e, r24	; 30
 77e:	5d d1       	rcall	.+698    	; 0xa3a <USB_Event_Stub>
 780:	80 91 e1 00 	lds	r24, 0x00E1
 784:	83 ff       	sbrs	r24, 3

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
		#else
		EVENT_USB_Device_WakeUp();
 786:	21 c0       	rjmp	.+66     	; 0x7ca <__vector_10+0x160>
 788:	80 91 e2 00 	lds	r24, 0x00E2
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
 78c:	83 ff       	sbrs	r24, 3
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
 78e:	1d c0       	rjmp	.+58     	; 0x7ca <__vector_10+0x160>
 790:	80 91 e1 00 	lds	r24, 0x00E1
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
 794:	87 7f       	andi	r24, 0xF7	; 247
 796:	80 93 e1 00 	sts	0x00E1, r24
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
 79a:	82 e0       	ldi	r24, 0x02	; 2
 79c:	8e bb       	out	0x1e, r24	; 30
 79e:	10 92 10 01 	sts	0x0110, r1
 7a2:	80 91 e1 00 	lds	r24, 0x00E1
	{
		USB_INT_Clear(USB_INT_EORSTI);

		USB_DeviceState                = DEVICE_STATE_Default;
 7a6:	8e 7f       	andi	r24, 0xFE	; 254
		USB_Device_ConfigurationNumber = 0;
 7a8:	80 93 e1 00 	sts	0x00E1, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
 7ac:	80 91 e2 00 	lds	r24, 0x00E2
 7b0:	8e 7f       	andi	r24, 0xFE	; 254
 7b2:	80 93 e2 00 	sts	0x00E2, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
 7b6:	80 91 e2 00 	lds	r24, 0x00E2
 7ba:	80 61       	ori	r24, 0x10	; 16
 7bc:	80 93 e2 00 	sts	0x00E2, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
 7c0:	80 e0       	ldi	r24, 0x00	; 0
 7c2:	60 e0       	ldi	r22, 0x00	; 0
 7c4:	42 e0       	ldi	r20, 0x02	; 2
 7c6:	c2 de       	rcall	.-636    	; 0x54c <Endpoint_ConfigureEndpoint_Prv>
 7c8:	38 d1       	rcall	.+624    	; 0xa3a <USB_Event_Stub>
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
 7ca:	ff 91       	pop	r31
 7cc:	ef 91       	pop	r30
 7ce:	bf 91       	pop	r27
 7d0:	af 91       	pop	r26
 7d2:	9f 91       	pop	r25

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
 7d4:	8f 91       	pop	r24
 7d6:	7f 91       	pop	r23
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
 7d8:	6f 91       	pop	r22
 7da:	5f 91       	pop	r21
 7dc:	4f 91       	pop	r20
 7de:	3f 91       	pop	r19
 7e0:	2f 91       	pop	r18
 7e2:	0f 90       	pop	r0
 7e4:	0b be       	out	0x3b, r0	; 59
 7e6:	0f 90       	pop	r0
 7e8:	0f be       	out	0x3f, r0	; 63
 7ea:	0f 90       	pop	r0
 7ec:	1f 90       	pop	r1
 7ee:	18 95       	reti

000007f0 <USB_Device_ProcessControlRequest>:
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_Device_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
 7f0:	1f 93       	push	r17
 7f2:	cf 93       	push	r28
 7f4:	df 93       	push	r29
 7f6:	cd b7       	in	r28, 0x3d	; 61
 7f8:	de b7       	in	r29, 0x3e	; 62
 7fa:	ac 97       	sbiw	r28, 0x2c	; 44
 7fc:	0f b6       	in	r0, 0x3f	; 63
 7fe:	f8 94       	cli
 800:	de bf       	out	0x3e, r29	; 62
 802:	0f be       	out	0x3f, r0	; 63
 804:	cd bf       	out	0x3d, r28	; 61
 806:	88 e0       	ldi	r24, 0x08	; 8
	USB_ControlRequest.bRequest      = Endpoint_Read_8();
	USB_ControlRequest.wValue        = Endpoint_Read_16_LE();
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;
 808:	e4 e1       	ldi	r30, 0x14	; 20
 80a:	f1 e0       	ldi	r31, 0x01	; 1
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
 80c:	90 91 f1 00 	lds	r25, 0x00F1

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_8();
 810:	91 93       	st	Z+, r25
 812:	81 50       	subi	r24, 0x01	; 1
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
 814:	d9 f7       	brne	.-10     	; 0x80c <USB_Device_ProcessControlRequest+0x1c>
	  *(RequestHeader++) = Endpoint_Read_8();
	#endif

	EVENT_USB_Device_ControlRequest();
 816:	ad dc       	rcall	.-1702   	; 0x172 <EVENT_USB_Device_ControlRequest>
 818:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 81c:	83 ff       	sbrs	r24, 3

	if (Endpoint_IsSETUPReceived())
 81e:	f5 c0       	rjmp	.+490    	; 0xa0a <USB_Device_ProcessControlRequest+0x21a>
 820:	80 91 14 01 	lds	r24, 0x0114
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
 824:	20 91 15 01 	lds	r18, 0x0115

		switch (USB_ControlRequest.bRequest)
 828:	25 30       	cpi	r18, 0x05	; 5
 82a:	09 f4       	brne	.+2      	; 0x82e <USB_Device_ProcessControlRequest+0x3e>
 82c:	46 c0       	rjmp	.+140    	; 0x8ba <USB_Device_ProcessControlRequest+0xca>
 82e:	26 30       	cpi	r18, 0x06	; 6
 830:	40 f4       	brcc	.+16     	; 0x842 <USB_Device_ProcessControlRequest+0x52>
 832:	21 30       	cpi	r18, 0x01	; 1
 834:	49 f1       	breq	.+82     	; 0x888 <USB_Device_ProcessControlRequest+0x98>
 836:	21 30       	cpi	r18, 0x01	; 1
 838:	70 f0       	brcs	.+28     	; 0x856 <USB_Device_ProcessControlRequest+0x66>
 83a:	23 30       	cpi	r18, 0x03	; 3
 83c:	09 f0       	breq	.+2      	; 0x840 <USB_Device_ProcessControlRequest+0x50>
 83e:	e5 c0       	rjmp	.+458    	; 0xa0a <USB_Device_ProcessControlRequest+0x21a>
 840:	23 c0       	rjmp	.+70     	; 0x888 <USB_Device_ProcessControlRequest+0x98>
 842:	28 30       	cpi	r18, 0x08	; 8
 844:	09 f4       	brne	.+2      	; 0x848 <USB_Device_ProcessControlRequest+0x58>
 846:	b4 c0       	rjmp	.+360    	; 0x9b0 <USB_Device_ProcessControlRequest+0x1c0>
 848:	29 30       	cpi	r18, 0x09	; 9
 84a:	09 f4       	brne	.+2      	; 0x84e <USB_Device_ProcessControlRequest+0x5e>
 84c:	c3 c0       	rjmp	.+390    	; 0x9d4 <USB_Device_ProcessControlRequest+0x1e4>
 84e:	26 30       	cpi	r18, 0x06	; 6
 850:	09 f0       	breq	.+2      	; 0x854 <USB_Device_ProcessControlRequest+0x64>
 852:	db c0       	rjmp	.+438    	; 0xa0a <USB_Device_ProcessControlRequest+0x21a>
 854:	54 c0       	rjmp	.+168    	; 0x8fe <USB_Device_ProcessControlRequest+0x10e>
 856:	80 38       	cpi	r24, 0x80	; 128
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
 858:	21 f0       	breq	.+8      	; 0x862 <USB_Device_ProcessControlRequest+0x72>
 85a:	82 38       	cpi	r24, 0x82	; 130
 85c:	09 f0       	breq	.+2      	; 0x860 <USB_Device_ProcessControlRequest+0x70>
 85e:	d5 c0       	rjmp	.+426    	; 0xa0a <USB_Device_ProcessControlRequest+0x21a>
 860:	08 c0       	rjmp	.+16     	; 0x872 <USB_Device_ProcessControlRequest+0x82>
 862:	80 91 11 01 	lds	r24, 0x0111
	Endpoint_ClearOUT();
}

static void USB_Device_GetStatus(void)
{
	uint8_t CurrentStatus = 0;
 866:	90 91 12 01 	lds	r25, 0x0112
			if (USB_Device_CurrentlySelfPowered)
			  CurrentStatus |= FEATURE_SELFPOWERED_ENABLED;
			#endif

			#if !defined(NO_DEVICE_REMOTE_WAKEUP)
			if (USB_Device_RemoteWakeupEnabled)
 86a:	99 23       	and	r25, r25
 86c:	19 f0       	breq	.+6      	; 0x874 <USB_Device_ProcessControlRequest+0x84>
 86e:	82 60       	ori	r24, 0x02	; 2
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
 870:	01 c0       	rjmp	.+2      	; 0x874 <USB_Device_ProcessControlRequest+0x84>
 872:	80 e0       	ldi	r24, 0x00	; 0
	Endpoint_ClearOUT();
}

static void USB_Device_GetStatus(void)
{
	uint8_t CurrentStatus = 0;
 874:	90 91 e8 00 	lds	r25, 0x00E8
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 878:	97 7f       	andi	r25, 0xF7	; 247
 87a:	90 93 e8 00 	sts	0x00E8, r25
 87e:	80 93 f1 00 	sts	0x00F1, r24
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
 882:	10 92 f1 00 	sts	0x00F1, r1
				UEDATX = (Data >> 8);
 886:	9f c0       	rjmp	.+318    	; 0x9c6 <USB_Device_ProcessControlRequest+0x1d6>
 888:	88 23       	and	r24, r24
				}

				break;
			case REQ_ClearFeature:
			case REQ_SetFeature:
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
 88a:	19 f0       	breq	.+6      	; 0x892 <USB_Device_ProcessControlRequest+0xa2>
 88c:	82 30       	cpi	r24, 0x02	; 2
 88e:	09 f0       	breq	.+2      	; 0x892 <USB_Device_ProcessControlRequest+0xa2>
 890:	bc c0       	rjmp	.+376    	; 0xa0a <USB_Device_ProcessControlRequest+0x21a>
 892:	90 e0       	ldi	r25, 0x00	; 0
	Endpoint_ClearStatusStage();
}

static void USB_Device_ClearSetFeature(void)
{
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
 894:	8f 71       	andi	r24, 0x1F	; 31
 896:	90 70       	andi	r25, 0x00	; 0
 898:	00 97       	sbiw	r24, 0x00	; 0
 89a:	09 f0       	breq	.+2      	; 0x89e <USB_Device_ProcessControlRequest+0xae>
 89c:	b6 c0       	rjmp	.+364    	; 0xa0a <USB_Device_ProcessControlRequest+0x21a>
 89e:	80 91 16 01 	lds	r24, 0x0116
	{
		#if !defined(NO_DEVICE_REMOTE_WAKEUP)
		case REQREC_DEVICE:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
 8a2:	81 30       	cpi	r24, 0x01	; 1
 8a4:	09 f0       	breq	.+2      	; 0x8a8 <USB_Device_ProcessControlRequest+0xb8>
 8a6:	b1 c0       	rjmp	.+354    	; 0xa0a <USB_Device_ProcessControlRequest+0x21a>
 8a8:	23 30       	cpi	r18, 0x03	; 3
			  USB_Device_RemoteWakeupEnabled = (USB_ControlRequest.bRequest == REQ_SetFeature);
 8aa:	09 f0       	breq	.+2      	; 0x8ae <USB_Device_ProcessControlRequest+0xbe>
 8ac:	80 e0       	ldi	r24, 0x00	; 0
 8ae:	80 93 12 01 	sts	0x0112, r24
 8b2:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 8b6:	87 7f       	andi	r24, 0xF7	; 247
 8b8:	89 c0       	rjmp	.+274    	; 0x9cc <USB_Device_ProcessControlRequest+0x1dc>
 8ba:	88 23       	and	r24, r24
					USB_Device_ClearSetFeature();
				}

				break;
			case REQ_SetAddress:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
 8bc:	09 f0       	breq	.+2      	; 0x8c0 <USB_Device_ProcessControlRequest+0xd0>
 8be:	a5 c0       	rjmp	.+330    	; 0xa0a <USB_Device_ProcessControlRequest+0x21a>
 8c0:	10 91 16 01 	lds	r17, 0x0116
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t DeviceAddress = (USB_ControlRequest.wValue & 0x7F);
 8c4:	1f 77       	andi	r17, 0x7F	; 127
 8c6:	80 91 e3 00 	lds	r24, 0x00E3
			#endif

			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				UDADDR = (UDADDR & (1 << ADDEN)) | (Address & 0x7F);
 8ca:	80 78       	andi	r24, 0x80	; 128
 8cc:	81 2b       	or	r24, r17
 8ce:	80 93 e3 00 	sts	0x00E3, r24
 8d2:	80 91 e8 00 	lds	r24, 0x00E8
 8d6:	87 7f       	andi	r24, 0xF7	; 247
 8d8:	80 93 e8 00 	sts	0x00E8, r24
 8dc:	48 de       	rcall	.-880    	; 0x56e <Endpoint_ClearStatusStage>

	USB_Device_SetDeviceAddress(DeviceAddress);

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
 8de:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 8e2:	80 ff       	sbrs	r24, 0
 8e4:	fc cf       	rjmp	.-8      	; 0x8de <USB_Device_ProcessControlRequest+0xee>

	while (!(Endpoint_IsINReady()));
 8e6:	80 91 e3 00 	lds	r24, 0x00E3
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address)
			{
				(void)Address;
				
				UDADDR |= (1 << ADDEN);
 8ea:	80 68       	ori	r24, 0x80	; 128
 8ec:	80 93 e3 00 	sts	0x00E3, r24
 8f0:	11 23       	and	r17, r17
 8f2:	11 f0       	breq	.+4      	; 0x8f8 <USB_Device_ProcessControlRequest+0x108>

	USB_Device_EnableDeviceAddress(DeviceAddress);

	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
 8f4:	83 e0       	ldi	r24, 0x03	; 3
 8f6:	01 c0       	rjmp	.+2      	; 0x8fa <USB_Device_ProcessControlRequest+0x10a>
 8f8:	82 e0       	ldi	r24, 0x02	; 2
 8fa:	8e bb       	out	0x1e, r24	; 30
 8fc:	86 c0       	rjmp	.+268    	; 0xa0a <USB_Device_ProcessControlRequest+0x21a>
 8fe:	80 58       	subi	r24, 0x80	; 128
 900:	82 30       	cpi	r24, 0x02	; 2
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_SetAddress();

				break;
			case REQ_GetDescriptor:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
 902:	08 f0       	brcs	.+2      	; 0x906 <USB_Device_ProcessControlRequest+0x116>
 904:	82 c0       	rjmp	.+260    	; 0xa0a <USB_Device_ProcessControlRequest+0x21a>
 906:	80 91 16 01 	lds	r24, 0x0116
	    !(defined(USE_FLASH_DESCRIPTORS) || defined(USE_EEPROM_DESCRIPTORS) || defined(USE_RAM_DESCRIPTORS))
	uint8_t DescriptorAddressSpace;
	#endif

	#if !defined(NO_INTERNAL_SERIAL) && (USE_INTERNAL_SERIAL != NO_DESCRIPTOR)
	if (USB_ControlRequest.wValue == ((DTYPE_String << 8) | USE_INTERNAL_SERIAL))
 90a:	90 91 17 01 	lds	r25, 0x0117
 90e:	23 e0       	ldi	r18, 0x03	; 3
 910:	8c 3d       	cpi	r24, 0xDC	; 220
 912:	92 07       	cpc	r25, r18
 914:	a9 f5       	brne	.+106    	; 0x980 <USB_Device_ProcessControlRequest+0x190>
 916:	83 e0       	ldi	r24, 0x03	; 3
 918:	8c 83       	std	Y+4, r24	; 0x04
	{
		USB_Descriptor_Header_t Header;
		uint16_t                UnicodeString[INTERNAL_SERIAL_LENGTH_BITS / 4];
	} SignatureDescriptor;

	SignatureDescriptor.Header.Type = DTYPE_String;
 91a:	8a e2       	ldi	r24, 0x2A	; 42
 91c:	8b 83       	std	Y+3, r24	; 0x03
	SignatureDescriptor.Header.Size = USB_STRING_LEN(INTERNAL_SERIAL_LENGTH_BITS / 4);
 91e:	5f b7       	in	r21, 0x3f	; 63
 920:	f8 94       	cli
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
 922:	de 01       	movw	r26, r28
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
 924:	13 96       	adiw	r26, 0x03	; 3
				__builtin_ssrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				cli();
				#endif

				GCC_MEMORY_BARRIER();
 926:	80 e0       	ldi	r24, 0x00	; 0
 928:	90 e0       	ldi	r25, 0x00	; 0
 92a:	4e e0       	ldi	r20, 0x0E	; 14
 92c:	61 e2       	ldi	r22, 0x21	; 33
			static inline void USB_Device_GetSerialString(uint16_t* const UnicodeString)
			{
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;
 92e:	e4 2f       	mov	r30, r20

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
				{
					uint8_t SerialByte = boot_signature_byte_get(SigReadAddress);
 930:	f0 e0       	ldi	r31, 0x00	; 0
 932:	60 93 57 00 	sts	0x0057, r22
 936:	e4 91       	lpm	r30, Z
 938:	80 ff       	sbrs	r24, 0
 93a:	03 c0       	rjmp	.+6      	; 0x942 <USB_Device_ProcessControlRequest+0x152>

					if (SerialCharNum & 0x01)
 93c:	e2 95       	swap	r30
 93e:	ef 70       	andi	r30, 0x0F	; 15
					{
						SerialByte >>= 4;
 940:	4f 5f       	subi	r20, 0xFF	; 255
 942:	ef 70       	andi	r30, 0x0F	; 15
						SigReadAddress++;
 944:	2e 2f       	mov	r18, r30
					}

					SerialByte &= 0x0F;
 946:	30 e0       	ldi	r19, 0x00	; 0
 948:	ea 30       	cpi	r30, 0x0A	; 10
 94a:	18 f0       	brcs	.+6      	; 0x952 <USB_Device_ProcessControlRequest+0x162>

					UnicodeString[SerialCharNum] = cpu_to_le16((SerialByte >= 10) ?
 94c:	29 5c       	subi	r18, 0xC9	; 201
 94e:	3f 4f       	sbci	r19, 0xFF	; 255
 950:	02 c0       	rjmp	.+4      	; 0x956 <USB_Device_ProcessControlRequest+0x166>
 952:	20 5d       	subi	r18, 0xD0	; 208
 954:	3f 4f       	sbci	r19, 0xFF	; 255
 956:	13 96       	adiw	r26, 0x03	; 3
 958:	3c 93       	st	X, r19
 95a:	2e 93       	st	-X, r18
 95c:	12 97       	sbiw	r26, 0x02	; 2
 95e:	01 96       	adiw	r24, 0x01	; 1
 960:	12 96       	adiw	r26, 0x02	; 2
 962:	84 31       	cpi	r24, 0x14	; 20
 964:	91 05       	cpc	r25, r1
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
 966:	19 f7       	brne	.-58     	; 0x92e <USB_Device_ProcessControlRequest+0x13e>
 968:	5f bf       	out	0x3f, r21	; 63
 96a:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 96e:	87 7f       	andi	r24, 0xF7	; 247
 970:	80 93 e8 00 	sts	0x00E8, r24
 974:	ce 01       	movw	r24, r28
 976:	03 96       	adiw	r24, 0x03	; 3

	USB_Device_GetSerialString(SignatureDescriptor.UnicodeString);

	Endpoint_ClearSETUP();

	Endpoint_Write_Control_Stream_LE(&SignatureDescriptor, sizeof(SignatureDescriptor));
 978:	6a e2       	ldi	r22, 0x2A	; 42
 97a:	70 e0       	ldi	r23, 0x00	; 0
 97c:	ec dc       	rcall	.-1576   	; 0x356 <Endpoint_Write_Control_Stream_LE>
 97e:	12 c0       	rjmp	.+36     	; 0x9a4 <USB_Device_ProcessControlRequest+0x1b4>
 980:	60 91 18 01 	lds	r22, 0x0118
 984:	ae 01       	movw	r20, r28
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif

	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
 986:	4f 5f       	subi	r20, 0xFF	; 255
 988:	5f 4f       	sbci	r21, 0xFF	; 255
 98a:	b4 dc       	rcall	.-1688   	; 0x2f4 <CALLBACK_USB_GetDescriptor>
 98c:	bc 01       	movw	r22, r24
 98e:	00 97       	sbiw	r24, 0x00	; 0
 990:	09 f4       	brne	.+2      	; 0x994 <USB_Device_ProcessControlRequest+0x1a4>
 992:	3b c0       	rjmp	.+118    	; 0xa0a <USB_Device_ProcessControlRequest+0x21a>
 994:	80 91 e8 00 	lds	r24, 0x00E8
 998:	87 7f       	andi	r24, 0xF7	; 247
 99a:	80 93 e8 00 	sts	0x00E8, r24
 99e:	89 81       	ldd	r24, Y+1	; 0x01
 9a0:	9a 81       	ldd	r25, Y+2	; 0x02
 9a2:	79 dd       	rcall	.-1294   	; 0x496 <Endpoint_Write_Control_PStream_LE>
 9a4:	80 91 e8 00 	lds	r24, 0x00E8
	#if defined(USE_RAM_DESCRIPTORS) || !defined(ARCH_HAS_MULTI_ADDRESS_SPACE)
	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_EEPROM_DESCRIPTORS)
	Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_FLASH_DESCRIPTORS)
	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
 9a8:	8b 7f       	andi	r24, 0xFB	; 251
 9aa:	80 93 e8 00 	sts	0x00E8, r24
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
				#else
					UEINTX &= ~(1 << RXOUTI);
 9ae:	2d c0       	rjmp	.+90     	; 0xa0a <USB_Device_ProcessControlRequest+0x21a>
 9b0:	80 38       	cpi	r24, 0x80	; 128
 9b2:	59 f5       	brne	.+86     	; 0xa0a <USB_Device_ProcessControlRequest+0x21a>
 9b4:	80 91 e8 00 	lds	r24, 0x00E8
 9b8:	87 7f       	andi	r24, 0xF7	; 247
					USB_Device_GetDescriptor();
				}

				break;
			case REQ_GetConfiguration:
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
 9ba:	80 93 e8 00 	sts	0x00E8, r24
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 9be:	80 91 10 01 	lds	r24, 0x0110
 9c2:	80 93 f1 00 	sts	0x00F1, r24
 9c6:	80 91 e8 00 	lds	r24, 0x00E8

static void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();

	Endpoint_Write_8(USB_Device_ConfigurationNumber);
 9ca:	8e 7f       	andi	r24, 0xFE	; 254
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
 9cc:	80 93 e8 00 	sts	0x00E8, r24
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
				#else
					UEINTX &= ~(1 << TXINI);
 9d0:	ce dd       	rcall	.-1124   	; 0x56e <Endpoint_ClearStatusStage>
 9d2:	1b c0       	rjmp	.+54     	; 0xa0a <USB_Device_ProcessControlRequest+0x21a>
 9d4:	88 23       	and	r24, r24
 9d6:	c9 f4       	brne	.+50     	; 0xa0a <USB_Device_ProcessControlRequest+0x21a>
 9d8:	90 91 16 01 	lds	r25, 0x0116
	Endpoint_ClearIN();

	Endpoint_ClearStatusStage();
 9dc:	92 30       	cpi	r25, 0x02	; 2
 9de:	a8 f4       	brcc	.+42     	; 0xa0a <USB_Device_ProcessControlRequest+0x21a>
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_GetConfiguration();

				break;
			case REQ_SetConfiguration:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
 9e0:	80 91 e8 00 	lds	r24, 0x00E8
}

static void USB_Device_SetConfiguration(void)
{
	#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
 9e4:	87 7f       	andi	r24, 0xF7	; 247
 9e6:	80 93 e8 00 	sts	0x00E8, r24
 9ea:	90 93 10 01 	sts	0x0110, r25
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 9ee:	bf dd       	rcall	.-1154   	; 0x56e <Endpoint_ClearStatusStage>
 9f0:	80 91 10 01 	lds	r24, 0x0110
 9f4:	88 23       	and	r24, r24
	#endif
	#endif

	Endpoint_ClearSETUP();

	USB_Device_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
 9f6:	21 f4       	brne	.+8      	; 0xa00 <USB_Device_ProcessControlRequest+0x210>
 9f8:	80 91 e3 00 	lds	r24, 0x00E3

	Endpoint_ClearStatusStage();
 9fc:	87 ff       	sbrs	r24, 7

	if (USB_Device_ConfigurationNumber)
 9fe:	02 c0       	rjmp	.+4      	; 0xa04 <USB_Device_ProcessControlRequest+0x214>
 a00:	84 e0       	ldi	r24, 0x04	; 4
 a02:	01 c0       	rjmp	.+2      	; 0xa06 <USB_Device_ProcessControlRequest+0x216>
 a04:	81 e0       	ldi	r24, 0x01	; 1
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
 a06:	8e bb       	out	0x1e, r24	; 30
 a08:	18 d0       	rcall	.+48     	; 0xa3a <USB_Event_Stub>
	  USB_DeviceState = DEVICE_STATE_Configured;
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
 a0a:	80 91 e8 00 	lds	r24, 0x00E8
 a0e:	83 ff       	sbrs	r24, 3
 a10:	0a c0       	rjmp	.+20     	; 0xa26 <USB_Device_ProcessControlRequest+0x236>
 a12:	80 91 e8 00 	lds	r24, 0x00E8

	EVENT_USB_Device_ConfigurationChanged();
 a16:	87 7f       	andi	r24, 0xF7	; 247
 a18:	80 93 e8 00 	sts	0x00E8, r24
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 a1c:	80 91 eb 00 	lds	r24, 0x00EB
			default:
				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
 a20:	80 62       	ori	r24, 0x20	; 32
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 a22:	80 93 eb 00 	sts	0x00EB, r24
 a26:	ac 96       	adiw	r28, 0x2c	; 44
 a28:	0f b6       	in	r0, 0x3f	; 63
 a2a:	f8 94       	cli
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
 a2c:	de bf       	out	0x3e, r29	; 62
 a2e:	0f be       	out	0x3f, r0	; 63
 a30:	cd bf       	out	0x3d, r28	; 61
 a32:	df 91       	pop	r29
 a34:	cf 91       	pop	r28
	{
		Endpoint_ClearSETUP();
		Endpoint_StallTransaction();
	}
}
 a36:	1f 91       	pop	r17
 a38:	08 95       	ret

00000a3a <USB_Event_Stub>:
#include "Events.h"

void USB_Event_Stub(void)
{

}
 a3a:	08 95       	ret

00000a3c <USB_USBTask>:
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_DeviceTask(void)
{
	if (USB_DeviceState == DEVICE_STATE_Unattached)
 a3c:	8e b3       	in	r24, 0x1e	; 30
 a3e:	88 23       	and	r24, r24
 a40:	29 f0       	breq	.+10     	; 0xa4c <USB_USBTask+0x10>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 a42:	80 91 e8 00 	lds	r24, 0x00E8

	uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

	if (Endpoint_IsSETUPReceived())
 a46:	83 ff       	sbrs	r24, 3
 a48:	01 c0       	rjmp	.+2      	; 0xa4c <USB_USBTask+0x10>
	  USB_Device_ProcessControlRequest();
 a4a:	d2 ce       	rjmp	.-604    	; 0x7f0 <USB_Device_ProcessControlRequest>
 a4c:	08 95       	ret

00000a4e <_exit>:
 a4e:	f8 94       	cli

00000a50 <__stop_program>:
 a50:	ff cf       	rjmp	.-2      	; 0xa50 <__stop_program>
