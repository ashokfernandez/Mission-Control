
MediaController.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000020  00800100  00001112  000011a6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001112  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000e  00800120  00800120  000011c6  2**0
                  ALLOC
  3 .stab         00000a98  00000000  00000000  000011c8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000002aa  00000000  00000000  00001c60  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000004f0  00000000  00000000  00001f10  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00008486  00000000  00000000  00002400  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000020ae  00000000  00000000  0000a886  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00003c26  00000000  00000000  0000c934  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000d98  00000000  00000000  0001055c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000037c6  00000000  00000000  000112f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000050a9  00000000  00000000  00014aba  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000006b0  00000000  00000000  00019b63  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	a1 c0       	rjmp	.+322    	; 0x144 <__ctors_end>
       2:	00 00       	nop
       4:	bd c0       	rjmp	.+378    	; 0x180 <__bad_interrupt>
       6:	00 00       	nop
       8:	bb c0       	rjmp	.+374    	; 0x180 <__bad_interrupt>
       a:	00 00       	nop
       c:	b9 c0       	rjmp	.+370    	; 0x180 <__bad_interrupt>
       e:	00 00       	nop
      10:	b7 c0       	rjmp	.+366    	; 0x180 <__bad_interrupt>
      12:	00 00       	nop
      14:	b5 c0       	rjmp	.+362    	; 0x180 <__bad_interrupt>
      16:	00 00       	nop
      18:	b3 c0       	rjmp	.+358    	; 0x180 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	b1 c0       	rjmp	.+354    	; 0x180 <__bad_interrupt>
      1e:	00 00       	nop
      20:	af c0       	rjmp	.+350    	; 0x180 <__bad_interrupt>
      22:	00 00       	nop
      24:	ad c0       	rjmp	.+346    	; 0x180 <__bad_interrupt>
      26:	00 00       	nop
      28:	01 c4       	rjmp	.+2050   	; 0x82c <__vector_10>
      2a:	00 00       	nop
      2c:	a9 c0       	rjmp	.+338    	; 0x180 <__bad_interrupt>
      2e:	00 00       	nop
      30:	a7 c0       	rjmp	.+334    	; 0x180 <__bad_interrupt>
      32:	00 00       	nop
      34:	a5 c0       	rjmp	.+330    	; 0x180 <__bad_interrupt>
      36:	00 00       	nop
      38:	a3 c0       	rjmp	.+326    	; 0x180 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	a1 c0       	rjmp	.+322    	; 0x180 <__bad_interrupt>
      3e:	00 00       	nop
      40:	9f c0       	rjmp	.+318    	; 0x180 <__bad_interrupt>
      42:	00 00       	nop
      44:	9d c0       	rjmp	.+314    	; 0x180 <__bad_interrupt>
      46:	00 00       	nop
      48:	9b c0       	rjmp	.+310    	; 0x180 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	99 c0       	rjmp	.+306    	; 0x180 <__bad_interrupt>
      4e:	00 00       	nop
      50:	97 c0       	rjmp	.+302    	; 0x180 <__bad_interrupt>
      52:	00 00       	nop
      54:	95 c0       	rjmp	.+298    	; 0x180 <__bad_interrupt>
      56:	00 00       	nop
      58:	93 c0       	rjmp	.+294    	; 0x180 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	91 c0       	rjmp	.+290    	; 0x180 <__bad_interrupt>
      5e:	00 00       	nop
      60:	8f c0       	rjmp	.+286    	; 0x180 <__bad_interrupt>
      62:	00 00       	nop
      64:	8d c0       	rjmp	.+282    	; 0x180 <__bad_interrupt>
      66:	00 00       	nop
      68:	8b c0       	rjmp	.+278    	; 0x180 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	89 c0       	rjmp	.+274    	; 0x180 <__bad_interrupt>
      6e:	00 00       	nop
      70:	87 c0       	rjmp	.+270    	; 0x180 <__bad_interrupt>
      72:	00 00       	nop
      74:	85 c0       	rjmp	.+266    	; 0x180 <__bad_interrupt>
      76:	00 00       	nop
      78:	83 c0       	rjmp	.+262    	; 0x180 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	81 c0       	rjmp	.+258    	; 0x180 <__bad_interrupt>
      7e:	00 00       	nop
      80:	7f c0       	rjmp	.+254    	; 0x180 <__bad_interrupt>
      82:	00 00       	nop
      84:	7d c0       	rjmp	.+250    	; 0x180 <__bad_interrupt>
      86:	00 00       	nop
      88:	7b c0       	rjmp	.+246    	; 0x180 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	79 c0       	rjmp	.+242    	; 0x180 <__bad_interrupt>
      8e:	00 00       	nop
      90:	77 c0       	rjmp	.+238    	; 0x180 <__bad_interrupt>
      92:	00 00       	nop
      94:	75 c0       	rjmp	.+234    	; 0x180 <__bad_interrupt>
      96:	00 00       	nop

00000098 <ProductString>:
      98:	2c 03 4c 00 55 00 46 00 41 00 20 00 4d 00 65 00     ,.L.U.F.A. .M.e.
      a8:	64 00 69 00 61 00 20 00 43 00 6f 00 6e 00 74 00     d.i.a. .C.o.n.t.
      b8:	72 00 6f 00 6c 00 6c 00 65 00 72 00 00 00           r.o.l.l.e.r...

000000c6 <ManufacturerString>:
      c6:	18 03 44 00 65 00 61 00 6e 00 20 00 43 00 61 00     ..D.e.a.n. .C.a.
      d6:	6d 00 65 00 72 00 61 00 00 00                       m.e.r.a...

000000e0 <LanguageString>:
      e0:	04 03 09 04                                         ....

000000e4 <ConfigurationDescriptor>:
      e4:	09 02 22 00 01 01 00 c0 32 09 04 00 00 01 03 00     ..".....2.......
      f4:	00 00 09 21 11 01 00 01 22 2b 00 07 05 81 03 08     ...!...."+......
     104:	00 05                                               ..

00000106 <DeviceDescriptor>:
     106:	12 01 10 01 00 00 00 08 eb 03 6a 20 01 00 01 02     ..........j ....
     116:	00 01                                               ..

00000118 <MediaControlReport>:
     118:	05 0c 09 01 a1 01 09 b0 09 b1 09 b3 09 b4 09 b5     ................
     128:	09 b6 09 b7 09 cd 09 e2 09 e9 09 ea 75 01 95 0b     ............u...
     138:	15 00 25 01 81 06 95 05 81 01 c0 00                 ..%.........

00000144 <__ctors_end>:
     144:	11 24       	eor	r1, r1
     146:	1f be       	out	0x3f, r1	; 63
     148:	cf ef       	ldi	r28, 0xFF	; 255
     14a:	d0 e2       	ldi	r29, 0x20	; 32
     14c:	de bf       	out	0x3e, r29	; 62
     14e:	cd bf       	out	0x3d, r28	; 61

00000150 <__do_copy_data>:
     150:	11 e0       	ldi	r17, 0x01	; 1
     152:	a0 e0       	ldi	r26, 0x00	; 0
     154:	b1 e0       	ldi	r27, 0x01	; 1
     156:	e2 e1       	ldi	r30, 0x12	; 18
     158:	f1 e1       	ldi	r31, 0x11	; 17
     15a:	00 e0       	ldi	r16, 0x00	; 0
     15c:	0b bf       	out	0x3b, r16	; 59
     15e:	02 c0       	rjmp	.+4      	; 0x164 <__do_copy_data+0x14>
     160:	07 90       	elpm	r0, Z+
     162:	0d 92       	st	X+, r0
     164:	a0 32       	cpi	r26, 0x20	; 32
     166:	b1 07       	cpc	r27, r17
     168:	d9 f7       	brne	.-10     	; 0x160 <__do_copy_data+0x10>
     16a:	1b be       	out	0x3b, r1	; 59

0000016c <__do_clear_bss>:
     16c:	11 e0       	ldi	r17, 0x01	; 1
     16e:	a0 e2       	ldi	r26, 0x20	; 32
     170:	b1 e0       	ldi	r27, 0x01	; 1
     172:	01 c0       	rjmp	.+2      	; 0x176 <.do_clear_bss_start>

00000174 <.do_clear_bss_loop>:
     174:	1d 92       	st	X+, r1

00000176 <.do_clear_bss_start>:
     176:	ae 32       	cpi	r26, 0x2E	; 46
     178:	b1 07       	cpc	r27, r17
     17a:	e1 f7       	brne	.-8      	; 0x174 <.do_clear_bss_loop>
     17c:	30 d0       	rcall	.+96     	; 0x1de <main>
     17e:	c7 c7       	rjmp	.+3982   	; 0x110e <_exit>

00000180 <__bad_interrupt>:
     180:	3f cf       	rjmp	.-386    	; 0x0 <__vectors>

00000182 <LEDs_SetAllLEDs>:
				PORTD &= ~LEDMask;
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
			{
				PORTD = ((PORTD & ~LEDS_ALL_LEDS) | LEDMask);
     182:	9b b1       	in	r25, 0x0b	; 11
     184:	9f 70       	andi	r25, 0x0F	; 15
     186:	98 2b       	or	r25, r24
     188:	9b b9       	out	0x0b, r25	; 11
			}
     18a:	08 95       	ret

0000018c <SetupHardware>:

/** Configures the board hardware and chip peripherals for the demo's functionality. */
void SetupHardware()
{
	/* Disable watchdog if enabled by bootloader/fuses */
	MCUSR &= ~(1 << WDRF);
     18c:	84 b7       	in	r24, 0x34	; 52
     18e:	87 7f       	andi	r24, 0xF7	; 247
     190:	84 bf       	out	0x34, r24	; 52
	wdt_disable();
     192:	88 e1       	ldi	r24, 0x18	; 24
     194:	0f b6       	in	r0, 0x3f	; 63
     196:	f8 94       	cli
     198:	80 93 60 00 	sts	0x0060, r24
     19c:	10 92 60 00 	sts	0x0060, r1
     1a0:	0f be       	out	0x3f, r0	; 63
The type of x is clock_div_t.
*/
void clock_prescale_set(clock_div_t __x)
{
    uint8_t __tmp = _BV(CLKPCE);
    __asm__ __volatile__ (
     1a2:	90 e0       	ldi	r25, 0x00	; 0
     1a4:	80 e8       	ldi	r24, 0x80	; 128
     1a6:	0f b6       	in	r0, 0x3f	; 63
     1a8:	f8 94       	cli
     1aa:	80 93 61 00 	sts	0x0061, r24
     1ae:	90 93 61 00 	sts	0x0061, r25
     1b2:	0f be       	out	0x3f, r0	; 63

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void Joystick_Init(void)
			{
				DDRB  &= ~JOY_BMASK;
     1b4:	84 b1       	in	r24, 0x04	; 4
     1b6:	8f 71       	andi	r24, 0x1F	; 31
     1b8:	84 b9       	out	0x04, r24	; 4
				DDRE  &= ~JOY_EMASK;
     1ba:	8d b1       	in	r24, 0x0d	; 13
     1bc:	8f 7c       	andi	r24, 0xCF	; 207
     1be:	8d b9       	out	0x0d, r24	; 13

				PORTB |=  JOY_BMASK;
     1c0:	85 b1       	in	r24, 0x05	; 5
     1c2:	80 6e       	ori	r24, 0xE0	; 224
     1c4:	85 b9       	out	0x05, r24	; 5
				PORTE |=  JOY_EMASK;
     1c6:	8e b1       	in	r24, 0x0e	; 14
     1c8:	80 63       	ori	r24, 0x30	; 48
     1ca:	8e b9       	out	0x0e, r24	; 14

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void LEDs_Init(void)
			{
				DDRD  |=  LEDS_ALL_LEDS;
     1cc:	8a b1       	in	r24, 0x0a	; 10
     1ce:	80 6f       	ori	r24, 0xF0	; 240
     1d0:	8a b9       	out	0x0a, r24	; 10
				PORTD &= ~LEDS_ALL_LEDS;
     1d2:	8b b1       	in	r24, 0x0b	; 11
     1d4:	8f 70       	andi	r24, 0x0F	; 15
     1d6:	8b b9       	out	0x0b, r24	; 11

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void Buttons_Init(void)
			{
				DDRE  &= ~BUTTONS_BUTTON1;
     1d8:	6a 98       	cbi	0x0d, 2	; 13
				PORTE |=  BUTTONS_BUTTON1;
     1da:	72 9a       	sbi	0x0e, 2	; 14

	/* Hardware Initialization */
	Joystick_Init();
	LEDs_Init();
	Buttons_Init();
	USB_Init();
     1dc:	0c c3       	rjmp	.+1560   	; 0x7f6 <USB_Init>

000001de <main>:
     1de:	d6 df       	rcall	.-84     	; 0x18c <SetupHardware>
}
     1e0:	80 e1       	ldi	r24, 0x10	; 16
 */
int main(void)
{
	SetupHardware();

	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
     1e2:	cf df       	rcall	.-98     	; 0x182 <LEDs_SetAllLEDs>
     1e4:	78 94       	sei
     1e6:	80 e0       	ldi	r24, 0x00	; 0
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				sei();
     1e8:	91 e0       	ldi	r25, 0x01	; 1
	GlobalInterruptEnable();

	for (;;)
	{
		HID_Device_USBTask(&MediaControl_HID_Interface);
     1ea:	af d6       	rcall	.+3422   	; 0xf4a <HID_Device_USBTask>
     1ec:	47 d5       	rcall	.+2702   	; 0xc7c <USB_USBTask>
     1ee:	fb cf       	rjmp	.-10     	; 0x1e6 <main+0x8>

000001f0 <EVENT_USB_Device_Connect>:
     1f0:	80 ea       	ldi	r24, 0xA0	; 160
		USB_USBTask();
     1f2:	c7 cf       	rjmp	.-114    	; 0x182 <LEDs_SetAllLEDs>

000001f4 <EVENT_USB_Device_Disconnect>:
     1f4:	80 e1       	ldi	r24, 0x10	; 16
     1f6:	c5 cf       	rjmp	.-118    	; 0x182 <LEDs_SetAllLEDs>

000001f8 <EVENT_USB_Device_ConfigurationChanged>:
}

/** Event handler for the library USB Disconnection event. */
void EVENT_USB_Device_Disconnect(void)
{
	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
     1f8:	80 e0       	ldi	r24, 0x00	; 0
}
     1fa:	91 e0       	ldi	r25, 0x01	; 1
/** Event handler for the library USB Configuration Changed event. */
void EVENT_USB_Device_ConfigurationChanged(void)
{
	bool ConfigSuccess = true;

	ConfigSuccess &= HID_Device_ConfigureEndpoints(&MediaControl_HID_Interface);
     1fc:	8d d6       	rcall	.+3354   	; 0xf18 <HID_Device_ConfigureEndpoints>
     1fe:	90 91 e2 00 	lds	r25, 0x00E2
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
     202:	94 60       	ori	r25, 0x04	; 4
     204:	90 93 e2 00 	sts	0x00E2, r25
     208:	88 23       	and	r24, r24

	USB_Device_EnableSOFEvents();

	LEDs_SetAllLEDs(ConfigSuccess ? LEDMASK_USB_READY : LEDMASK_USB_ERROR);
     20a:	11 f0       	breq	.+4      	; 0x210 <EVENT_USB_Device_ConfigurationChanged+0x18>
     20c:	80 e6       	ldi	r24, 0x60	; 96
     20e:	01 c0       	rjmp	.+2      	; 0x212 <EVENT_USB_Device_ConfigurationChanged+0x1a>
     210:	80 e9       	ldi	r24, 0x90	; 144
     212:	b7 cf       	rjmp	.-146    	; 0x182 <LEDs_SetAllLEDs>

00000214 <EVENT_USB_Device_ControlRequest>:
     214:	80 e0       	ldi	r24, 0x00	; 0
     216:	91 e0       	ldi	r25, 0x01	; 1
}
     218:	4c c5       	rjmp	.+2712   	; 0xcb2 <HID_Device_ProcessControlRequest>

0000021a <EVENT_USB_Device_StartOfFrame>:

/** Event handler for the library USB Control Request reception event. */
void EVENT_USB_Device_ControlRequest(void)
{
	HID_Device_ProcessControlRequest(&MediaControl_HID_Interface);
     21a:	80 91 0e 01 	lds	r24, 0x010E
			 *  \param[in,out] HIDInterfaceInfo  Pointer to a structure containing a HID Class configuration and state.
			 */
			static inline void HID_Device_MillisecondElapsed(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo) ATTR_ALWAYS_INLINE ATTR_NON_NULL_PTR_ARG(1);
			static inline void HID_Device_MillisecondElapsed(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
			{
				if (HIDInterfaceInfo->State.IdleMSRemaining)
     21e:	90 91 0f 01 	lds	r25, 0x010F
     222:	00 97       	sbiw	r24, 0x00	; 0
     224:	29 f0       	breq	.+10     	; 0x230 <EVENT_USB_Device_StartOfFrame+0x16>
				  HIDInterfaceInfo->State.IdleMSRemaining--;
     226:	01 97       	sbiw	r24, 0x01	; 1
     228:	90 93 0f 01 	sts	0x010F, r25
     22c:	80 93 0e 01 	sts	0x010E, r24
     230:	08 95       	ret

00000232 <CALLBACK_HID_Device_CreateHIDReport>:
 *
 *  \return Boolean true to force the sending of the report, false to let the library determine if it needs to be sent
 */
bool CALLBACK_HID_Device_CreateHIDReport(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo, uint8_t* const ReportID,
                                         const uint8_t ReportType, void* ReportData, uint16_t* const ReportSize)
{
     232:	0f 93       	push	r16
     234:	1f 93       	push	r17
     236:	f9 01       	movw	r30, r18
     238:	d8 01       	movw	r26, r16
			}

			static inline uint8_t Joystick_GetStatus(void) ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t Joystick_GetStatus(void)
			{
				return (((uint8_t)~PINB & JOY_BMASK) | (((uint8_t)~PINE & JOY_EMASK) >> JOY_PORTE_MASK_SHIFT));
     23a:	23 b1       	in	r18, 0x03	; 3
     23c:	8c b1       	in	r24, 0x0c	; 12
     23e:	80 95       	com	r24
     240:	90 e0       	ldi	r25, 0x00	; 0
     242:	80 73       	andi	r24, 0x30	; 48
     244:	90 70       	andi	r25, 0x00	; 0
     246:	95 95       	asr	r25
     248:	87 95       	ror	r24
     24a:	20 95       	com	r18
     24c:	20 7e       	andi	r18, 0xE0	; 224
     24e:	28 2b       	or	r18, r24
			}

			static inline uint8_t Buttons_GetStatus(void) ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t Buttons_GetStatus(void)
			{
				return ((PINE & BUTTONS_BUTTON1) ^ BUTTONS_BUTTON1);
     250:	8c b1       	in	r24, 0x0c	; 12

	uint8_t JoyStatus_LCL    = Joystick_GetStatus();
	uint8_t ButtonStatus_LCL = Buttons_GetStatus();

	/* Update the Media Control report with the user button presses */
	MediaReport->Mute          = ((ButtonStatus_LCL & BUTTONS_BUTTON1) ? true : false);
     252:	91 e0       	ldi	r25, 0x01	; 1
     254:	82 fd       	sbrc	r24, 2
     256:	90 e0       	ldi	r25, 0x00	; 0
     258:	81 81       	ldd	r24, Z+1	; 0x01
     25a:	8e 7f       	andi	r24, 0xFE	; 254
     25c:	89 2b       	or	r24, r25
     25e:	81 83       	std	Z+1, r24	; 0x01
	MediaReport->PlayPause     = ((JoyStatus_LCL & JOY_PRESS) ? true : false);
     260:	92 2f       	mov	r25, r18
     262:	81 e0       	ldi	r24, 0x01	; 1
     264:	25 ff       	sbrs	r18, 5
     266:	80 e0       	ldi	r24, 0x00	; 0
     268:	38 2f       	mov	r19, r24
     26a:	37 95       	ror	r19
     26c:	33 27       	eor	r19, r19
     26e:	37 95       	ror	r19
     270:	80 81       	ld	r24, Z
     272:	8f 77       	andi	r24, 0x7F	; 127
     274:	83 2b       	or	r24, r19
     276:	80 83       	st	Z, r24
	MediaReport->VolumeUp      = ((JoyStatus_LCL & JOY_UP)    ? true : false);
     278:	22 1f       	adc	r18, r18
     27a:	22 27       	eor	r18, r18
     27c:	22 1f       	adc	r18, r18
     27e:	22 0f       	add	r18, r18
     280:	81 81       	ldd	r24, Z+1	; 0x01
     282:	8d 7f       	andi	r24, 0xFD	; 253
     284:	82 2b       	or	r24, r18
     286:	81 83       	std	Z+1, r24	; 0x01
	MediaReport->VolumeDown    = ((JoyStatus_LCL & JOY_DOWN)  ? true : false);
     288:	81 e0       	ldi	r24, 0x01	; 1
     28a:	94 ff       	sbrs	r25, 4
     28c:	80 e0       	ldi	r24, 0x00	; 0
     28e:	28 2f       	mov	r18, r24
     290:	22 0f       	add	r18, r18
     292:	22 0f       	add	r18, r18
     294:	81 81       	ldd	r24, Z+1	; 0x01
     296:	8b 7f       	andi	r24, 0xFB	; 251
     298:	82 2b       	or	r24, r18
     29a:	81 83       	std	Z+1, r24	; 0x01
	MediaReport->PreviousTrack = ((JoyStatus_LCL & JOY_LEFT)  ? true : false);
     29c:	81 e0       	ldi	r24, 0x01	; 1
     29e:	96 ff       	sbrs	r25, 6
     2a0:	80 e0       	ldi	r24, 0x00	; 0
     2a2:	28 2f       	mov	r18, r24
     2a4:	22 95       	swap	r18
     2a6:	22 0f       	add	r18, r18
     2a8:	20 7e       	andi	r18, 0xE0	; 224
     2aa:	80 81       	ld	r24, Z
     2ac:	8f 7d       	andi	r24, 0xDF	; 223
     2ae:	82 2b       	or	r24, r18
     2b0:	80 83       	st	Z, r24
	MediaReport->NextTrack     = ((JoyStatus_LCL & JOY_RIGHT) ? true : false);
     2b2:	81 e0       	ldi	r24, 0x01	; 1
     2b4:	93 ff       	sbrs	r25, 3
     2b6:	80 e0       	ldi	r24, 0x00	; 0
     2b8:	98 2f       	mov	r25, r24
     2ba:	92 95       	swap	r25
     2bc:	90 7f       	andi	r25, 0xF0	; 240
     2be:	80 81       	ld	r24, Z
     2c0:	8f 7e       	andi	r24, 0xEF	; 239
     2c2:	89 2b       	or	r24, r25
     2c4:	80 83       	st	Z, r24

	*ReportSize = sizeof(USB_MediaReport_Data_t);
     2c6:	82 e0       	ldi	r24, 0x02	; 2
     2c8:	90 e0       	ldi	r25, 0x00	; 0
     2ca:	11 96       	adiw	r26, 0x01	; 1
     2cc:	9c 93       	st	X, r25
     2ce:	8e 93       	st	-X, r24
	return false;
}
     2d0:	80 e0       	ldi	r24, 0x00	; 0
     2d2:	1f 91       	pop	r17
     2d4:	0f 91       	pop	r16
     2d6:	08 95       	ret

000002d8 <CALLBACK_HID_Device_ProcessHIDReport>:
                                          const uint8_t ReportType,
                                          const void* ReportData,
                                          const uint16_t ReportSize)
{
	// Unused (but mandatory for the HID class driver) in this demo, since there are no Host->Device reports
}
     2d8:	08 95       	ret

000002da <CALLBACK_USB_GetDescriptor>:
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
     2da:	93 30       	cpi	r25, 0x03	; 3
     2dc:	89 f0       	breq	.+34     	; 0x300 <CALLBACK_USB_GetDescriptor+0x26>
     2de:	94 30       	cpi	r25, 0x04	; 4
     2e0:	28 f4       	brcc	.+10     	; 0x2ec <CALLBACK_USB_GetDescriptor+0x12>
     2e2:	91 30       	cpi	r25, 0x01	; 1
     2e4:	49 f1       	breq	.+82     	; 0x338 <CALLBACK_USB_GetDescriptor+0x5e>
     2e6:	92 30       	cpi	r25, 0x02	; 2
     2e8:	61 f5       	brne	.+88     	; 0x342 <CALLBACK_USB_GetDescriptor+0x68>
     2ea:	05 c0       	rjmp	.+10     	; 0x2f6 <CALLBACK_USB_GetDescriptor+0x1c>
     2ec:	91 32       	cpi	r25, 0x21	; 33
     2ee:	d1 f0       	breq	.+52     	; 0x324 <CALLBACK_USB_GetDescriptor+0x4a>
     2f0:	92 32       	cpi	r25, 0x22	; 34
     2f2:	39 f5       	brne	.+78     	; 0x342 <CALLBACK_USB_GetDescriptor+0x68>
     2f4:	1c c0       	rjmp	.+56     	; 0x32e <CALLBACK_USB_GetDescriptor+0x54>
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
			Size    = sizeof(USB_Descriptor_Configuration_t);
     2f6:	82 e2       	ldi	r24, 0x22	; 34
     2f8:	90 e0       	ldi	r25, 0x00	; 0
		case DTYPE_Device:
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
     2fa:	e4 ee       	ldi	r30, 0xE4	; 228
     2fc:	f0 e0       	ldi	r31, 0x00	; 0
			Size    = sizeof(USB_Descriptor_Configuration_t);
			break;
     2fe:	25 c0       	rjmp	.+74     	; 0x34a <CALLBACK_USB_GetDescriptor+0x70>
		case DTYPE_String:
			switch (DescriptorNumber)
     300:	81 30       	cpi	r24, 0x01	; 1
     302:	41 f0       	breq	.+16     	; 0x314 <CALLBACK_USB_GetDescriptor+0x3a>
     304:	81 30       	cpi	r24, 0x01	; 1
     306:	18 f0       	brcs	.+6      	; 0x30e <CALLBACK_USB_GetDescriptor+0x34>
     308:	82 30       	cpi	r24, 0x02	; 2
     30a:	d9 f4       	brne	.+54     	; 0x342 <CALLBACK_USB_GetDescriptor+0x68>
     30c:	06 c0       	rjmp	.+12     	; 0x31a <CALLBACK_USB_GetDescriptor+0x40>
			{
				case 0x00:
					Address = &LanguageString;
					Size    = pgm_read_byte(&LanguageString.Header.Size);
     30e:	e0 ee       	ldi	r30, 0xE0	; 224
     310:	f0 e0       	ldi	r31, 0x00	; 0
     312:	05 c0       	rjmp	.+10     	; 0x31e <CALLBACK_USB_GetDescriptor+0x44>
					break;
				case 0x01:
					Address = &ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
     314:	e6 ec       	ldi	r30, 0xC6	; 198
     316:	f0 e0       	ldi	r31, 0x00	; 0
     318:	02 c0       	rjmp	.+4      	; 0x31e <CALLBACK_USB_GetDescriptor+0x44>
					break;
				case 0x02:
					Address = &ProductString;
					Size    = pgm_read_byte(&ProductString.Header.Size);
     31a:	e8 e9       	ldi	r30, 0x98	; 152
     31c:	f0 e0       	ldi	r31, 0x00	; 0
     31e:	84 91       	lpm	r24, Z
     320:	90 e0       	ldi	r25, 0x00	; 0
					break;
     322:	13 c0       	rjmp	.+38     	; 0x34a <CALLBACK_USB_GetDescriptor+0x70>
			}

			break;
		case HID_DTYPE_HID:
			Address = &ConfigurationDescriptor.HID_MediaControlHID;
			Size    = sizeof(USB_HID_Descriptor_HID_t);
     324:	89 e0       	ldi	r24, 0x09	; 9
     326:	90 e0       	ldi	r25, 0x00	; 0
					break;
			}

			break;
		case HID_DTYPE_HID:
			Address = &ConfigurationDescriptor.HID_MediaControlHID;
     328:	e6 ef       	ldi	r30, 0xF6	; 246
     32a:	f0 e0       	ldi	r31, 0x00	; 0
			Size    = sizeof(USB_HID_Descriptor_HID_t);
			break;
     32c:	0e c0       	rjmp	.+28     	; 0x34a <CALLBACK_USB_GetDescriptor+0x70>
		case HID_DTYPE_Report:
			Address = &MediaControlReport;
			Size    = sizeof(MediaControlReport);
     32e:	8b e2       	ldi	r24, 0x2B	; 43
     330:	90 e0       	ldi	r25, 0x00	; 0
		case HID_DTYPE_HID:
			Address = &ConfigurationDescriptor.HID_MediaControlHID;
			Size    = sizeof(USB_HID_Descriptor_HID_t);
			break;
		case HID_DTYPE_Report:
			Address = &MediaControlReport;
     332:	e8 e1       	ldi	r30, 0x18	; 24
     334:	f1 e0       	ldi	r31, 0x01	; 1
			Size    = sizeof(MediaControlReport);
			break;
     336:	09 c0       	rjmp	.+18     	; 0x34a <CALLBACK_USB_GetDescriptor+0x70>

	switch (DescriptorType)
	{
		case DTYPE_Device:
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
     338:	82 e1       	ldi	r24, 0x12	; 18
     33a:	90 e0       	ldi	r25, 0x00	; 0
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
	{
		case DTYPE_Device:
			Address = &DeviceDescriptor;
     33c:	e6 e0       	ldi	r30, 0x06	; 6
     33e:	f1 e0       	ldi	r31, 0x01	; 1
     340:	04 c0       	rjmp	.+8      	; 0x34a <CALLBACK_USB_GetDescriptor+0x70>
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;
     342:	80 e0       	ldi	r24, 0x00	; 0
     344:	90 e0       	ldi	r25, 0x00	; 0
                                    const void** const DescriptorAddress)
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
     346:	e0 e0       	ldi	r30, 0x00	; 0
     348:	f0 e0       	ldi	r31, 0x00	; 0
			Address = &MediaControlReport;
			Size    = sizeof(MediaControlReport);
			break;
	}

	*DescriptorAddress = Address;
     34a:	da 01       	movw	r26, r20
     34c:	11 96       	adiw	r26, 0x01	; 1
     34e:	fc 93       	st	X, r31
     350:	ee 93       	st	-X, r30
	return Size;
}
     352:	08 95       	ret

00000354 <Endpoint_Write_Stream_LE>:
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
     354:	af 92       	push	r10
     356:	bf 92       	push	r11
     358:	cf 92       	push	r12
     35a:	df 92       	push	r13
     35c:	ef 92       	push	r14
     35e:	ff 92       	push	r15
     360:	1f 93       	push	r17
     362:	cf 93       	push	r28
     364:	df 93       	push	r29
     366:	ec 01       	movw	r28, r24
     368:	7b 01       	movw	r14, r22
     36a:	6a 01       	movw	r12, r20
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	uint16_t BytesInTransfer = 0;
	uint8_t  ErrorCode;

	if ((ErrorCode = Endpoint_WaitUntilReady()))
     36c:	ce d1       	rcall	.+924    	; 0x70a <Endpoint_WaitUntilReady>
     36e:	18 2f       	mov	r17, r24
     370:	88 23       	and	r24, r24
     372:	a9 f5       	brne	.+106    	; 0x3de <Endpoint_Write_Stream_LE+0x8a>
     374:	c1 14       	cp	r12, r1
	  return ErrorCode;

	if (BytesProcessed != NULL)
     376:	d1 04       	cpc	r13, r1
     378:	39 f0       	breq	.+14     	; 0x388 <Endpoint_Write_Stream_LE+0x34>
     37a:	f6 01       	movw	r30, r12
	{
		Length -= *BytesProcessed;
     37c:	20 81       	ld	r18, Z
     37e:	31 81       	ldd	r19, Z+1	; 0x01
     380:	e2 1a       	sub	r14, r18
     382:	f3 0a       	sbc	r15, r19
     384:	c2 0f       	add	r28, r18
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
     386:	d3 1f       	adc	r29, r19
     388:	aa 24       	eor	r10, r10

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
     38a:	bb 24       	eor	r11, r11
     38c:	23 c0       	rjmp	.+70     	; 0x3d4 <Endpoint_Write_Stream_LE+0x80>
     38e:	80 91 e8 00 	lds	r24, 0x00E8
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
     392:	85 fd       	sbrc	r24, 5
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
	{
		if (!(Endpoint_IsReadWriteAllowed()))
     394:	16 c0       	rjmp	.+44     	; 0x3c2 <Endpoint_Write_Stream_LE+0x6e>
     396:	80 91 e8 00 	lds	r24, 0x00E8
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     39a:	8e 77       	andi	r24, 0x7E	; 126
     39c:	80 93 e8 00 	sts	0x00E8, r24
     3a0:	6d d4       	rcall	.+2266   	; 0xc7c <USB_USBTask>
		{
			TEMPLATE_CLEAR_ENDPOINT();

			#if !defined(INTERRUPT_CONTROL_ENDPOINT)
			USB_USBTask();
     3a2:	c1 14       	cp	r12, r1
     3a4:	d1 04       	cpc	r13, r1
			#endif

			if (BytesProcessed != NULL)
     3a6:	49 f0       	breq	.+18     	; 0x3ba <Endpoint_Write_Stream_LE+0x66>
     3a8:	f6 01       	movw	r30, r12
     3aa:	80 81       	ld	r24, Z
			{
				*BytesProcessed += BytesInTransfer;
     3ac:	91 81       	ldd	r25, Z+1	; 0x01
     3ae:	8a 0d       	add	r24, r10
     3b0:	9b 1d       	adc	r25, r11
     3b2:	91 83       	std	Z+1, r25	; 0x01
     3b4:	80 83       	st	Z, r24
     3b6:	15 e0       	ldi	r17, 0x05	; 5
     3b8:	12 c0       	rjmp	.+36     	; 0x3de <Endpoint_Write_Stream_LE+0x8a>
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
     3ba:	a7 d1       	rcall	.+846    	; 0x70a <Endpoint_WaitUntilReady>
     3bc:	88 23       	and	r24, r24
			}

			if ((ErrorCode = Endpoint_WaitUntilReady()))
     3be:	51 f0       	breq	.+20     	; 0x3d4 <Endpoint_Write_Stream_LE+0x80>
     3c0:	0d c0       	rjmp	.+26     	; 0x3dc <Endpoint_Write_Stream_LE+0x88>
     3c2:	89 91       	ld	r24, Y+
     3c4:	80 93 f1 00 	sts	0x00F1, r24
			  return ErrorCode;
		}
		else
		{
			TEMPLATE_TRANSFER_BYTE(DataStream);
     3c8:	08 94       	sec
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     3ca:	e1 08       	sbc	r14, r1
     3cc:	f1 08       	sbc	r15, r1
			TEMPLATE_BUFFER_MOVE(DataStream, 1);
			Length--;
     3ce:	08 94       	sec
     3d0:	a1 1c       	adc	r10, r1
     3d2:	b1 1c       	adc	r11, r1
			BytesInTransfer++;
     3d4:	e1 14       	cp	r14, r1
     3d6:	f1 04       	cpc	r15, r1
     3d8:	d1 f6       	brne	.-76     	; 0x38e <Endpoint_Write_Stream_LE+0x3a>
	{
		Length -= *BytesProcessed;
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
     3da:	01 c0       	rjmp	.+2      	; 0x3de <Endpoint_Write_Stream_LE+0x8a>
     3dc:	18 2f       	mov	r17, r24
     3de:	81 2f       	mov	r24, r17
     3e0:	df 91       	pop	r29
			{
				*BytesProcessed += BytesInTransfer;
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
			}

			if ((ErrorCode = Endpoint_WaitUntilReady()))
     3e2:	cf 91       	pop	r28
			BytesInTransfer++;
		}
	}

	return ENDPOINT_RWSTREAM_NoError;
}
     3e4:	1f 91       	pop	r17
     3e6:	ff 90       	pop	r15
     3e8:	ef 90       	pop	r14
     3ea:	df 90       	pop	r13
     3ec:	cf 90       	pop	r12
     3ee:	bf 90       	pop	r11
     3f0:	af 90       	pop	r10
     3f2:	08 95       	ret

000003f4 <Endpoint_Write_Control_Stream_LE>:
     3f4:	20 91 2c 01 	lds	r18, 0x012C
     3f8:	30 91 2d 01 	lds	r19, 0x012D
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
     3fc:	26 17       	cp	r18, r22
     3fe:	37 07       	cpc	r19, r23
     400:	20 f4       	brcc	.+8      	; 0x40a <Endpoint_Write_Control_Stream_LE+0x16>
     402:	b9 01       	movw	r22, r18
     404:	fc 01       	movw	r30, r24
     406:	20 e0       	ldi	r18, 0x00	; 0
     408:	35 c0       	rjmp	.+106    	; 0x474 <Endpoint_Write_Control_Stream_LE+0x80>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
     40a:	61 15       	cp	r22, r1
     40c:	71 05       	cpc	r23, r1
     40e:	d1 f7       	brne	.-12     	; 0x404 <Endpoint_Write_Control_Stream_LE+0x10>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     410:	20 91 e8 00 	lds	r18, 0x00E8
     414:	2e 77       	andi	r18, 0x7E	; 126
     416:	20 93 e8 00 	sts	0x00E8, r18
     41a:	f4 cf       	rjmp	.-24     	; 0x404 <Endpoint_Write_Control_Stream_LE+0x10>
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     41c:	8e b3       	in	r24, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     41e:	88 23       	and	r24, r24
     420:	f1 f1       	breq	.+124    	; 0x49e <Endpoint_Write_Control_Stream_LE+0xaa>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     422:	85 30       	cpi	r24, 0x05	; 5
     424:	c1 f1       	breq	.+112    	; 0x496 <Endpoint_Write_Control_Stream_LE+0xa2>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     426:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
     42a:	83 fd       	sbrc	r24, 3
     42c:	36 c0       	rjmp	.+108    	; 0x49a <Endpoint_Write_Control_Stream_LE+0xa6>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     42e:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
     432:	82 fd       	sbrc	r24, 2
     434:	2a c0       	rjmp	.+84     	; 0x48a <Endpoint_Write_Control_Stream_LE+0x96>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     436:	80 91 e8 00 	lds	r24, 0x00E8
		  break;

		if (Endpoint_IsINReady())
     43a:	80 ff       	sbrs	r24, 0
     43c:	1b c0       	rjmp	.+54     	; 0x474 <Endpoint_Write_Control_Stream_LE+0x80>
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
     43e:	80 91 f2 00 	lds	r24, 0x00F2
     442:	90 91 f3 00 	lds	r25, 0x00F3
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
     446:	06 c0       	rjmp	.+12     	; 0x454 <Endpoint_Write_Control_Stream_LE+0x60>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
     448:	21 91       	ld	r18, Z+
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     44a:	20 93 f1 00 	sts	0x00F1, r18
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
     44e:	61 50       	subi	r22, 0x01	; 1
     450:	70 40       	sbci	r23, 0x00	; 0
				BytesInEndpoint++;
     452:	01 96       	adiw	r24, 0x01	; 1

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
     454:	61 15       	cp	r22, r1
     456:	71 05       	cpc	r23, r1
     458:	19 f0       	breq	.+6      	; 0x460 <Endpoint_Write_Control_Stream_LE+0x6c>
     45a:	88 30       	cpi	r24, 0x08	; 8
     45c:	91 05       	cpc	r25, r1
     45e:	a0 f3       	brcs	.-24     	; 0x448 <Endpoint_Write_Control_Stream_LE+0x54>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
     460:	21 e0       	ldi	r18, 0x01	; 1
     462:	88 30       	cpi	r24, 0x08	; 8
     464:	91 05       	cpc	r25, r1
     466:	09 f0       	breq	.+2      	; 0x46a <Endpoint_Write_Control_Stream_LE+0x76>
     468:	20 e0       	ldi	r18, 0x00	; 0
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     46a:	80 91 e8 00 	lds	r24, 0x00E8
     46e:	8e 77       	andi	r24, 0x7E	; 126
     470:	80 93 e8 00 	sts	0x00E8, r24
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
     474:	61 15       	cp	r22, r1
     476:	71 05       	cpc	r23, r1
     478:	89 f6       	brne	.-94     	; 0x41c <Endpoint_Write_Control_Stream_LE+0x28>
     47a:	22 23       	and	r18, r18
     47c:	79 f6       	brne	.-98     	; 0x41c <Endpoint_Write_Control_Stream_LE+0x28>
     47e:	05 c0       	rjmp	.+10     	; 0x48a <Endpoint_Write_Control_Stream_LE+0x96>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     480:	8e b3       	in	r24, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     482:	88 23       	and	r24, r24
     484:	61 f0       	breq	.+24     	; 0x49e <Endpoint_Write_Control_Stream_LE+0xaa>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     486:	85 30       	cpi	r24, 0x05	; 5
     488:	61 f0       	breq	.+24     	; 0x4a2 <Endpoint_Write_Control_Stream_LE+0xae>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     48a:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
     48e:	82 ff       	sbrs	r24, 2
     490:	f7 cf       	rjmp	.-18     	; 0x480 <Endpoint_Write_Control_Stream_LE+0x8c>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
     492:	80 e0       	ldi	r24, 0x00	; 0
     494:	08 95       	ret
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
     496:	83 e0       	ldi	r24, 0x03	; 3
     498:	08 95       	ret
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
     49a:	81 e0       	ldi	r24, 0x01	; 1
     49c:	08 95       	ret
	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
     49e:	82 e0       	ldi	r24, 0x02	; 2
     4a0:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
     4a2:	83 e0       	ldi	r24, 0x03	; 3
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
     4a4:	08 95       	ret

000004a6 <Endpoint_Read_Control_Stream_LE>:
uint8_t TEMPLATE_FUNC_NAME (void* const Buffer,
                            uint16_t Length)
{
	uint8_t* DataStream = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));

	if (!(Length))
     4a6:	61 15       	cp	r22, r1
     4a8:	71 05       	cpc	r23, r1
     4aa:	29 f4       	brne	.+10     	; 0x4b6 <Endpoint_Read_Control_Stream_LE+0x10>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     4ac:	20 91 e8 00 	lds	r18, 0x00E8
     4b0:	2b 77       	andi	r18, 0x7B	; 123
     4b2:	20 93 e8 00 	sts	0x00E8, r18

#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (void* const Buffer,
                            uint16_t Length)
{
     4b6:	38 2f       	mov	r19, r24
     4b8:	29 2f       	mov	r18, r25
     4ba:	25 c0       	rjmp	.+74     	; 0x506 <Endpoint_Read_Control_Stream_LE+0x60>
	if (!(Length))
	  Endpoint_ClearOUT();

	while (Length)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     4bc:	8e b3       	in	r24, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     4be:	88 23       	and	r24, r24
     4c0:	a9 f1       	breq	.+106    	; 0x52c <Endpoint_Read_Control_Stream_LE+0x86>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     4c2:	85 30       	cpi	r24, 0x05	; 5
     4c4:	79 f1       	breq	.+94     	; 0x524 <Endpoint_Read_Control_Stream_LE+0x7e>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     4c6:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
     4ca:	83 fd       	sbrc	r24, 3
     4cc:	2d c0       	rjmp	.+90     	; 0x528 <Endpoint_Read_Control_Stream_LE+0x82>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     4ce:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;

		if (Endpoint_IsOUTReceived())
     4d2:	82 ff       	sbrs	r24, 2
     4d4:	f3 cf       	rjmp	.-26     	; 0x4bc <Endpoint_Read_Control_Stream_LE+0x16>
     4d6:	e3 2f       	mov	r30, r19
     4d8:	f2 2f       	mov	r31, r18
     4da:	08 c0       	rjmp	.+16     	; 0x4ec <Endpoint_Read_Control_Stream_LE+0x46>
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
     4dc:	80 91 f1 00 	lds	r24, 0x00F1
		{
			while (Length && Endpoint_BytesInEndpoint())
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
     4e0:	81 93       	st	Z+, r24
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
     4e2:	3e 2f       	mov	r19, r30
     4e4:	2f 2f       	mov	r18, r31
				Length--;
     4e6:	61 50       	subi	r22, 0x01	; 1
     4e8:	70 40       	sbci	r23, 0x00	; 0
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;

		if (Endpoint_IsOUTReceived())
		{
			while (Length && Endpoint_BytesInEndpoint())
     4ea:	41 f0       	breq	.+16     	; 0x4fc <Endpoint_Read_Control_Stream_LE+0x56>
     4ec:	3e 2f       	mov	r19, r30
     4ee:	2f 2f       	mov	r18, r31
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
     4f0:	80 91 f2 00 	lds	r24, 0x00F2
     4f4:	90 91 f3 00 	lds	r25, 0x00F3
     4f8:	00 97       	sbiw	r24, 0x00	; 0
     4fa:	81 f7       	brne	.-32     	; 0x4dc <Endpoint_Read_Control_Stream_LE+0x36>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     4fc:	80 91 e8 00 	lds	r24, 0x00E8
     500:	8b 77       	andi	r24, 0x7B	; 123
     502:	80 93 e8 00 	sts	0x00E8, r24
	uint8_t* DataStream = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));

	if (!(Length))
	  Endpoint_ClearOUT();

	while (Length)
     506:	61 15       	cp	r22, r1
     508:	71 05       	cpc	r23, r1
     50a:	c1 f6       	brne	.-80     	; 0x4bc <Endpoint_Read_Control_Stream_LE+0x16>
     50c:	05 c0       	rjmp	.+10     	; 0x518 <Endpoint_Read_Control_Stream_LE+0x72>
		}
	}

	while (!(Endpoint_IsINReady()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     50e:	8e b3       	in	r24, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     510:	88 23       	and	r24, r24
     512:	61 f0       	breq	.+24     	; 0x52c <Endpoint_Read_Control_Stream_LE+0x86>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     514:	85 30       	cpi	r24, 0x05	; 5
     516:	61 f0       	breq	.+24     	; 0x530 <Endpoint_Read_Control_Stream_LE+0x8a>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     518:	80 91 e8 00 	lds	r24, 0x00E8

			Endpoint_ClearOUT();
		}
	}

	while (!(Endpoint_IsINReady()))
     51c:	80 ff       	sbrs	r24, 0
     51e:	f7 cf       	rjmp	.-18     	; 0x50e <Endpoint_Read_Control_Stream_LE+0x68>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
     520:	80 e0       	ldi	r24, 0x00	; 0
     522:	08 95       	ret
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
     524:	83 e0       	ldi	r24, 0x03	; 3
     526:	08 95       	ret
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
     528:	81 e0       	ldi	r24, 0x01	; 1
     52a:	08 95       	ret
	while (!(Endpoint_IsINReady()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
     52c:	82 e0       	ldi	r24, 0x02	; 2
     52e:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
     530:	83 e0       	ldi	r24, 0x03	; 3
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
     532:	08 95       	ret

00000534 <Endpoint_Write_Control_PStream_LE>:
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
     534:	20 91 2c 01 	lds	r18, 0x012C
     538:	30 91 2d 01 	lds	r19, 0x012D
     53c:	26 17       	cp	r18, r22
     53e:	37 07       	cpc	r19, r23
     540:	20 f4       	brcc	.+8      	; 0x54a <Endpoint_Write_Control_PStream_LE+0x16>
     542:	b9 01       	movw	r22, r18
     544:	fc 01       	movw	r30, r24
     546:	20 e0       	ldi	r18, 0x00	; 0
     548:	37 c0       	rjmp	.+110    	; 0x5b8 <Endpoint_Write_Control_PStream_LE+0x84>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
     54a:	61 15       	cp	r22, r1
     54c:	71 05       	cpc	r23, r1
     54e:	d1 f7       	brne	.-12     	; 0x544 <Endpoint_Write_Control_PStream_LE+0x10>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     550:	20 91 e8 00 	lds	r18, 0x00E8
     554:	2e 77       	andi	r18, 0x7E	; 126
     556:	20 93 e8 00 	sts	0x00E8, r18
     55a:	f4 cf       	rjmp	.-24     	; 0x544 <Endpoint_Write_Control_PStream_LE+0x10>
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     55c:	8e b3       	in	r24, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     55e:	88 23       	and	r24, r24
     560:	09 f4       	brne	.+2      	; 0x564 <Endpoint_Write_Control_PStream_LE+0x30>
     562:	3f c0       	rjmp	.+126    	; 0x5e2 <Endpoint_Write_Control_PStream_LE+0xae>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     564:	85 30       	cpi	r24, 0x05	; 5
     566:	c9 f1       	breq	.+114    	; 0x5da <Endpoint_Write_Control_PStream_LE+0xa6>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     568:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
     56c:	83 fd       	sbrc	r24, 3
     56e:	37 c0       	rjmp	.+110    	; 0x5de <Endpoint_Write_Control_PStream_LE+0xaa>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     570:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
     574:	82 fd       	sbrc	r24, 2
     576:	2b c0       	rjmp	.+86     	; 0x5ce <Endpoint_Write_Control_PStream_LE+0x9a>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     578:	80 91 e8 00 	lds	r24, 0x00E8
		  break;

		if (Endpoint_IsINReady())
     57c:	80 ff       	sbrs	r24, 0
     57e:	1c c0       	rjmp	.+56     	; 0x5b8 <Endpoint_Write_Control_PStream_LE+0x84>
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
     580:	80 91 f2 00 	lds	r24, 0x00F2
     584:	90 91 f3 00 	lds	r25, 0x00F3
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
     588:	07 c0       	rjmp	.+14     	; 0x598 <Endpoint_Write_Control_PStream_LE+0x64>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
     58a:	24 91       	lpm	r18, Z
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     58c:	20 93 f1 00 	sts	0x00F1, r18
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
     590:	31 96       	adiw	r30, 0x01	; 1
				Length--;
     592:	61 50       	subi	r22, 0x01	; 1
     594:	70 40       	sbci	r23, 0x00	; 0
				BytesInEndpoint++;
     596:	01 96       	adiw	r24, 0x01	; 1

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
     598:	61 15       	cp	r22, r1
     59a:	71 05       	cpc	r23, r1
     59c:	19 f0       	breq	.+6      	; 0x5a4 <Endpoint_Write_Control_PStream_LE+0x70>
     59e:	88 30       	cpi	r24, 0x08	; 8
     5a0:	91 05       	cpc	r25, r1
     5a2:	98 f3       	brcs	.-26     	; 0x58a <Endpoint_Write_Control_PStream_LE+0x56>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
     5a4:	21 e0       	ldi	r18, 0x01	; 1
     5a6:	88 30       	cpi	r24, 0x08	; 8
     5a8:	91 05       	cpc	r25, r1
     5aa:	09 f0       	breq	.+2      	; 0x5ae <Endpoint_Write_Control_PStream_LE+0x7a>
     5ac:	20 e0       	ldi	r18, 0x00	; 0
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     5ae:	80 91 e8 00 	lds	r24, 0x00E8
     5b2:	8e 77       	andi	r24, 0x7E	; 126
     5b4:	80 93 e8 00 	sts	0x00E8, r24
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
     5b8:	61 15       	cp	r22, r1
     5ba:	71 05       	cpc	r23, r1
     5bc:	79 f6       	brne	.-98     	; 0x55c <Endpoint_Write_Control_PStream_LE+0x28>
     5be:	22 23       	and	r18, r18
     5c0:	69 f6       	brne	.-102    	; 0x55c <Endpoint_Write_Control_PStream_LE+0x28>
     5c2:	05 c0       	rjmp	.+10     	; 0x5ce <Endpoint_Write_Control_PStream_LE+0x9a>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     5c4:	8e b3       	in	r24, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     5c6:	88 23       	and	r24, r24
     5c8:	61 f0       	breq	.+24     	; 0x5e2 <Endpoint_Write_Control_PStream_LE+0xae>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     5ca:	85 30       	cpi	r24, 0x05	; 5
     5cc:	61 f0       	breq	.+24     	; 0x5e6 <Endpoint_Write_Control_PStream_LE+0xb2>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     5ce:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
     5d2:	82 ff       	sbrs	r24, 2
     5d4:	f7 cf       	rjmp	.-18     	; 0x5c4 <Endpoint_Write_Control_PStream_LE+0x90>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
     5d6:	80 e0       	ldi	r24, 0x00	; 0
     5d8:	08 95       	ret
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
     5da:	83 e0       	ldi	r24, 0x03	; 3
     5dc:	08 95       	ret
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
     5de:	81 e0       	ldi	r24, 0x01	; 1
     5e0:	08 95       	ret
	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
     5e2:	82 e0       	ldi	r24, 0x02	; 2
     5e4:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
     5e6:	83 e0       	ldi	r24, 0x03	; 3
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
     5e8:	08 95       	ret

000005ea <Endpoint_ConfigureEndpoint_Prv>:
	UECFG0X = UECFG0XData;
	UECFG1X = UECFG1XData;

	return Endpoint_IsConfigured();
#else
	for (uint8_t EPNum = Number; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
     5ea:	98 2f       	mov	r25, r24
     5ec:	2a c0       	rjmp	.+84     	; 0x642 <Endpoint_ConfigureEndpoint_Prv+0x58>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     5ee:	90 93 e9 00 	sts	0x00E9, r25
		uint8_t UECFG1XTemp;
		uint8_t UEIENXTemp;

		Endpoint_SelectEndpoint(EPNum);

		if (EPNum == Number)
     5f2:	98 17       	cp	r25, r24
     5f4:	39 f0       	breq	.+14     	; 0x604 <Endpoint_ConfigureEndpoint_Prv+0x1a>
			UECFG1XTemp = UECFG1XData;
			UEIENXTemp  = 0;
		}
		else
		{
			UECFG0XTemp = UECFG0X;
     5f6:	70 91 ec 00 	lds	r23, 0x00EC
			UECFG1XTemp = UECFG1X;
     5fa:	20 91 ed 00 	lds	r18, 0x00ED
			UEIENXTemp  = UEIENX;
     5fe:	50 91 f0 00 	lds	r21, 0x00F0
     602:	03 c0       	rjmp	.+6      	; 0x60a <Endpoint_ConfigureEndpoint_Prv+0x20>
		Endpoint_SelectEndpoint(EPNum);

		if (EPNum == Number)
		{
			UECFG0XTemp = UECFG0XData;
			UECFG1XTemp = UECFG1XData;
     604:	24 2f       	mov	r18, r20

		Endpoint_SelectEndpoint(EPNum);

		if (EPNum == Number)
		{
			UECFG0XTemp = UECFG0XData;
     606:	76 2f       	mov	r23, r22
			UECFG1XTemp = UECFG1XData;
			UEIENXTemp  = 0;
     608:	50 e0       	ldi	r21, 0x00	; 0
			UECFG0XTemp = UECFG0X;
			UECFG1XTemp = UECFG1X;
			UEIENXTemp  = UEIENX;
		}

		if (!(UECFG1XTemp & (1 << ALLOC)))
     60a:	21 ff       	sbrs	r18, 1
     60c:	19 c0       	rjmp	.+50     	; 0x640 <Endpoint_ConfigureEndpoint_Prv+0x56>
			 *  to and from a host.
			 */
			static inline void Endpoint_DisableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_DisableEndpoint(void)
			{
				UECONX &= ~(1 << EPEN);
     60e:	30 91 eb 00 	lds	r19, 0x00EB
     612:	3e 7f       	andi	r19, 0xFE	; 254
     614:	30 93 eb 00 	sts	0x00EB, r19
		  continue;

		Endpoint_DisableEndpoint();
		UECFG1X &= ~(1 << ALLOC);
     618:	30 91 ed 00 	lds	r19, 0x00ED
     61c:	3d 7f       	andi	r19, 0xFD	; 253
     61e:	30 93 ed 00 	sts	0x00ED, r19
			 *  \note Endpoints must first be configured properly via \ref Endpoint_ConfigureEndpoint().
			 */
			static inline void Endpoint_EnableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_EnableEndpoint(void)
			{
				UECONX |= (1 << EPEN);
     622:	30 91 eb 00 	lds	r19, 0x00EB
     626:	31 60       	ori	r19, 0x01	; 1
     628:	30 93 eb 00 	sts	0x00EB, r19

		Endpoint_EnableEndpoint();
		UECFG0X = UECFG0XTemp;
     62c:	70 93 ec 00 	sts	0x00EC, r23
		UECFG1X = UECFG1XTemp;
     630:	20 93 ed 00 	sts	0x00ED, r18
		UEIENX  = UEIENXTemp;
     634:	50 93 f0 00 	sts	0x00F0, r21
			 *  \return Boolean \c true if the currently selected endpoint has been configured, \c false otherwise.
			 */
			static inline bool Endpoint_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsConfigured(void)
			{
				return ((UESTA0X & (1 << CFGOK)) ? true : false);
     638:	20 91 ee 00 	lds	r18, 0x00EE

		if (!(Endpoint_IsConfigured()))
     63c:	27 ff       	sbrs	r18, 7
     63e:	08 c0       	rjmp	.+16     	; 0x650 <Endpoint_ConfigureEndpoint_Prv+0x66>
	UECFG0X = UECFG0XData;
	UECFG1X = UECFG1XData;

	return Endpoint_IsConfigured();
#else
	for (uint8_t EPNum = Number; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
     640:	9f 5f       	subi	r25, 0xFF	; 255
     642:	97 30       	cpi	r25, 0x07	; 7
     644:	a0 f2       	brcs	.-88     	; 0x5ee <Endpoint_ConfigureEndpoint_Prv+0x4>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     646:	8f 70       	andi	r24, 0x0F	; 15
     648:	80 93 e9 00 	sts	0x00E9, r24
		if (!(Endpoint_IsConfigured()))
		  return false;
	}

	Endpoint_SelectEndpoint(Number);
	return true;
     64c:	81 e0       	ldi	r24, 0x01	; 1
     64e:	08 95       	ret
		UECFG0X = UECFG0XTemp;
		UECFG1X = UECFG1XTemp;
		UEIENX  = UEIENXTemp;

		if (!(Endpoint_IsConfigured()))
		  return false;
     650:	80 e0       	ldi	r24, 0x00	; 0
	}

	Endpoint_SelectEndpoint(Number);
	return true;
#endif
}
     652:	08 95       	ret

00000654 <Endpoint_ConfigureEndpointTable>:
uint8_t USB_Device_ControlEndpointSize = ENDPOINT_CONTROLEP_DEFAULT_SIZE;
#endif

bool Endpoint_ConfigureEndpointTable(const USB_Endpoint_Table_t* const Table,
                                     const uint8_t Entries)
{
     654:	0f 93       	push	r16
     656:	1f 93       	push	r17
     658:	cf 93       	push	r28
     65a:	df 93       	push	r29
     65c:	16 2f       	mov	r17, r22
	{
		if (!(Table[i].Address))
		  continue;
	
		if (!(Endpoint_ConfigureEndpoint(Table[i].Address, Table[i].Type, Table[i].Size, Table[i].Banks)))
		  return false;
     65e:	ec 01       	movw	r28, r24
#endif

bool Endpoint_ConfigureEndpointTable(const USB_Endpoint_Table_t* const Table,
                                     const uint8_t Entries)
{
	for (uint8_t i = 0; i < Entries; i++)
     660:	00 e0       	ldi	r16, 0x00	; 0
     662:	2a c0       	rjmp	.+84     	; 0x6b8 <Endpoint_ConfigureEndpointTable+0x64>
	{
		if (!(Table[i].Address))
     664:	98 81       	ld	r25, Y
     666:	99 23       	and	r25, r25
     668:	29 f1       	breq	.+74     	; 0x6b4 <Endpoint_ConfigureEndpointTable+0x60>
		  continue;
	
		if (!(Endpoint_ConfigureEndpoint(Table[i].Address, Table[i].Type, Table[i].Size, Table[i].Banks)))
     66a:	6b 81       	ldd	r22, Y+3	; 0x03
     66c:	e9 81       	ldd	r30, Y+1	; 0x01
     66e:	fa 81       	ldd	r31, Y+2	; 0x02
     670:	2c 81       	ldd	r18, Y+4	; 0x04
			static inline bool Endpoint_ConfigureEndpoint(const uint8_t Address,
			                                              const uint8_t Type,
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);
     672:	89 2f       	mov	r24, r25
     674:	8f 70       	andi	r24, 0x0F	; 15

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
     676:	87 30       	cpi	r24, 0x07	; 7
     678:	18 f5       	brcc	.+70     	; 0x6c0 <Endpoint_ConfigureEndpointTable+0x6c>
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
				                                      ((Type << EPTYPE0) | ((Address & ENDPOINT_DIR_IN) ? (1 << EPDIR) : 0)),
     67a:	62 95       	swap	r22
     67c:	66 0f       	add	r22, r22
     67e:	66 0f       	add	r22, r22
     680:	60 7c       	andi	r22, 0xC0	; 192
     682:	99 1f       	adc	r25, r25
     684:	99 27       	eor	r25, r25
     686:	99 1f       	adc	r25, r25
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
     688:	69 2b       	or	r22, r25
     68a:	22 30       	cpi	r18, 0x02	; 2
     68c:	10 f0       	brcs	.+4      	; 0x692 <Endpoint_ConfigureEndpointTable+0x3e>
     68e:	96 e0       	ldi	r25, 0x06	; 6
     690:	01 c0       	rjmp	.+2      	; 0x694 <Endpoint_ConfigureEndpointTable+0x40>
     692:	92 e0       	ldi	r25, 0x02	; 2
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes) ATTR_WARN_UNUSED_RESULT ATTR_CONST
			                                                                       ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;
     694:	28 e0       	ldi	r18, 0x08	; 8
     696:	30 e0       	ldi	r19, 0x00	; 0
		/* Inline Functions: */
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes) ATTR_WARN_UNUSED_RESULT ATTR_CONST
			                                                                       ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
     698:	40 e0       	ldi	r20, 0x00	; 0
     69a:	03 c0       	rjmp	.+6      	; 0x6a2 <Endpoint_ConfigureEndpointTable+0x4e>
				uint16_t CheckBytes = 8;

				while (CheckBytes < Bytes)
				{
					MaskVal++;
     69c:	4f 5f       	subi	r20, 0xFF	; 255
					CheckBytes <<= 1;
     69e:	22 0f       	add	r18, r18
     6a0:	33 1f       	adc	r19, r19
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while (CheckBytes < Bytes)
     6a2:	2e 17       	cp	r18, r30
     6a4:	3f 07       	cpc	r19, r31
     6a6:	d0 f3       	brcs	.-12     	; 0x69c <Endpoint_ConfigureEndpointTable+0x48>
				{
					MaskVal++;
					CheckBytes <<= 1;
				}

				return (MaskVal << EPSIZE0);
     6a8:	42 95       	swap	r20
     6aa:	40 7f       	andi	r20, 0xF0	; 240
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
     6ac:	49 2b       	or	r20, r25
     6ae:	9d df       	rcall	.-198    	; 0x5ea <Endpoint_ConfigureEndpoint_Prv>
     6b0:	88 23       	and	r24, r24
     6b2:	31 f0       	breq	.+12     	; 0x6c0 <Endpoint_ConfigureEndpointTable+0x6c>
     6b4:	0f 5f       	subi	r16, 0xFF	; 255
#endif

bool Endpoint_ConfigureEndpointTable(const USB_Endpoint_Table_t* const Table,
                                     const uint8_t Entries)
{
	for (uint8_t i = 0; i < Entries; i++)
     6b6:	25 96       	adiw	r28, 0x05	; 5
     6b8:	01 17       	cp	r16, r17
     6ba:	a1 f6       	brne	.-88     	; 0x664 <Endpoint_ConfigureEndpointTable+0x10>
     6bc:	81 e0       	ldi	r24, 0x01	; 1
	
		if (!(Endpoint_ConfigureEndpoint(Table[i].Address, Table[i].Type, Table[i].Size, Table[i].Banks)))
		  return false;
	}
	
	return true;
     6be:	01 c0       	rjmp	.+2      	; 0x6c2 <Endpoint_ConfigureEndpointTable+0x6e>
     6c0:	80 e0       	ldi	r24, 0x00	; 0
	{
		if (!(Table[i].Address))
		  continue;
	
		if (!(Endpoint_ConfigureEndpoint(Table[i].Address, Table[i].Type, Table[i].Size, Table[i].Banks)))
		  return false;
     6c2:	df 91       	pop	r29
	}
	
	return true;
}
     6c4:	cf 91       	pop	r28
     6c6:	1f 91       	pop	r17
     6c8:	0f 91       	pop	r16
     6ca:	08 95       	ret

000006cc <Endpoint_ClearStatusStage>:
     6cc:	80 91 26 01 	lds	r24, 0x0126
	}
}

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
     6d0:	87 ff       	sbrs	r24, 7
     6d2:	11 c0       	rjmp	.+34     	; 0x6f6 <Endpoint_ClearStatusStage+0x2a>
     6d4:	03 c0       	rjmp	.+6      	; 0x6dc <Endpoint_ClearStatusStage+0x10>
	{
		while (!(Endpoint_IsOUTReceived()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
     6d6:	8e b3       	in	r24, 0x1e	; 30
     6d8:	88 23       	and	r24, r24
     6da:	b1 f0       	breq	.+44     	; 0x708 <Endpoint_ClearStatusStage+0x3c>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     6dc:	80 91 e8 00 	lds	r24, 0x00E8

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
	{
		while (!(Endpoint_IsOUTReceived()))
     6e0:	82 ff       	sbrs	r24, 2
     6e2:	f9 cf       	rjmp	.-14     	; 0x6d6 <Endpoint_ClearStatusStage+0xa>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     6e4:	80 91 e8 00 	lds	r24, 0x00E8
     6e8:	8b 77       	andi	r24, 0x7B	; 123
     6ea:	80 93 e8 00 	sts	0x00E8, r24
     6ee:	08 95       	ret
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
     6f0:	8e b3       	in	r24, 0x1e	; 30
     6f2:	88 23       	and	r24, r24
     6f4:	49 f0       	breq	.+18     	; 0x708 <Endpoint_ClearStatusStage+0x3c>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     6f6:	80 91 e8 00 	lds	r24, 0x00E8

		Endpoint_ClearOUT();
	}
	else
	{
		while (!(Endpoint_IsINReady()))
     6fa:	80 ff       	sbrs	r24, 0
     6fc:	f9 cf       	rjmp	.-14     	; 0x6f0 <Endpoint_ClearStatusStage+0x24>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     6fe:	80 91 e8 00 	lds	r24, 0x00E8
     702:	8e 77       	andi	r24, 0x7E	; 126
     704:	80 93 e8 00 	sts	0x00E8, r24
     708:	08 95       	ret

0000070a <Endpoint_WaitUntilReady>:
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
     70a:	80 91 e4 00 	lds	r24, 0x00E4
     70e:	90 91 e5 00 	lds	r25, 0x00E5
     712:	45 e6       	ldi	r20, 0x65	; 101
     714:	01 c0       	rjmp	.+2      	; 0x718 <Endpoint_WaitUntilReady+0xe>
     716:	c9 01       	movw	r24, r18
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
     718:	20 91 ec 00 	lds	r18, 0x00EC
     71c:	20 ff       	sbrs	r18, 0
     71e:	22 c0       	rjmp	.+68     	; 0x764 <Endpoint_WaitUntilReady+0x5a>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     720:	20 91 e8 00 	lds	r18, 0x00E8

	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
     724:	20 fd       	sbrc	r18, 0
     726:	14 c0       	rjmp	.+40     	; 0x750 <Endpoint_WaitUntilReady+0x46>
		{
			if (Endpoint_IsOUTReceived())
			  return ENDPOINT_READYWAIT_NoError;
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     728:	2e b3       	in	r18, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     72a:	22 23       	and	r18, r18
     72c:	99 f0       	breq	.+38     	; 0x754 <Endpoint_WaitUntilReady+0x4a>
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     72e:	25 30       	cpi	r18, 0x05	; 5
     730:	99 f0       	breq	.+38     	; 0x758 <Endpoint_WaitUntilReady+0x4e>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
     732:	20 91 eb 00 	lds	r18, 0x00EB
		  return ENDPOINT_READYWAIT_BusSuspended;
		else if (Endpoint_IsStalled())
     736:	25 fd       	sbrc	r18, 5
     738:	11 c0       	rjmp	.+34     	; 0x75c <Endpoint_WaitUntilReady+0x52>
     73a:	20 91 e4 00 	lds	r18, 0x00E4
     73e:	30 91 e5 00 	lds	r19, 0x00E5
		  return ENDPOINT_READYWAIT_EndpointStalled;

		uint16_t CurrentFrameNumber = USB_Device_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
     742:	28 17       	cp	r18, r24
     744:	39 07       	cpc	r19, r25
     746:	41 f3       	breq	.-48     	; 0x718 <Endpoint_WaitUntilReady+0xe>
     748:	41 50       	subi	r20, 0x01	; 1
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
     74a:	29 f7       	brne	.-54     	; 0x716 <Endpoint_WaitUntilReady+0xc>
			  return ENDPOINT_READYWAIT_Timeout;
     74c:	84 e0       	ldi	r24, 0x04	; 4
     74e:	08 95       	ret
	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
     750:	80 e0       	ldi	r24, 0x00	; 0
     752:	08 95       	ret
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
     754:	82 e0       	ldi	r24, 0x02	; 2
     756:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_READYWAIT_BusSuspended;
     758:	83 e0       	ldi	r24, 0x03	; 3
     75a:	08 95       	ret
		else if (Endpoint_IsStalled())
		  return ENDPOINT_READYWAIT_EndpointStalled;
     75c:	81 e0       	ldi	r24, 0x01	; 1
     75e:	08 95       	ret
			  return ENDPOINT_READYWAIT_NoError;
		}
		else
		{
			if (Endpoint_IsOUTReceived())
			  return ENDPOINT_READYWAIT_NoError;
     760:	80 e0       	ldi	r24, 0x00	; 0

			if (!(TimeoutMSRem--))
			  return ENDPOINT_READYWAIT_Timeout;
		}
	}
}
     762:	08 95       	ret
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     764:	20 91 e8 00 	lds	r18, 0x00E8
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
		}
		else
		{
			if (Endpoint_IsOUTReceived())
     768:	22 ff       	sbrs	r18, 2
     76a:	de cf       	rjmp	.-68     	; 0x728 <Endpoint_WaitUntilReady+0x1e>
     76c:	f9 cf       	rjmp	.-14     	; 0x760 <Endpoint_WaitUntilReady+0x56>

0000076e <USB_ResetInterface>:

	USB_IsInitialized = false;
}

void USB_ResetInterface(void)
{
     76e:	0f 93       	push	r16
     770:	1f 93       	push	r17
     772:	cf 93       	push	r28
     774:	df 93       	push	r29
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
     776:	4d d0       	rcall	.+154    	; 0x812 <USB_INT_DisableAllInterrupts>
     778:	54 d0       	rcall	.+168    	; 0x822 <USB_INT_ClearAllInterrupts>
	USB_INT_ClearAllInterrupts();
     77a:	c8 ed       	ldi	r28, 0xD8	; 216
     77c:	d0 e0       	ldi	r29, 0x00	; 0
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
     77e:	88 81       	ld	r24, Y
     780:	8f 77       	andi	r24, 0x7F	; 127
     782:	88 83       	st	Y, r24
     784:	88 81       	ld	r24, Y
     786:	80 68       	ori	r24, 0x80	; 128
				USBCON |=  (1 << USBE);
     788:	88 83       	st	Y, r24
     78a:	88 81       	ld	r24, Y
     78c:	8f 7d       	andi	r24, 0xDF	; 223
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
     78e:	88 83       	st	Y, r24
     790:	e7 ed       	ldi	r30, 0xD7	; 215
     792:	f0 e0       	ldi	r31, 0x00	; 0

	if (USB_CurrentMode == USB_MODE_Device)
	{
		#if defined(USB_CAN_BE_DEVICE)
		#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
		UHWCON |=  (1 << UIMOD);
     794:	80 81       	ld	r24, Z
     796:	80 68       	ori	r24, 0x80	; 128
     798:	80 83       	st	Z, r24
     79a:	19 bc       	out	0x29, r1	; 41
     79c:	1e ba       	out	0x1e, r1	; 30
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
     79e:	10 92 22 01 	sts	0x0122, r1

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState                 = DEVICE_STATE_Unattached;
	USB_Device_ConfigurationNumber  = 0;
     7a2:	10 92 24 01 	sts	0x0124, r1

	#if !defined(NO_DEVICE_REMOTE_WAKEUP)
	USB_Device_RemoteWakeupEnabled  = false;
     7a6:	10 92 23 01 	sts	0x0123, r1
	#endif

	#if !defined(NO_DEVICE_SELF_POWER)
	USB_Device_CurrentlySelfPowered = false;
     7aa:	00 ee       	ldi	r16, 0xE0	; 224
     7ac:	10 e0       	ldi	r17, 0x00	; 0
			}

			static inline void USB_Device_SetFullSpeed(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetFullSpeed(void)
			{
				UDCON &= ~(1 << LSM);
     7ae:	f8 01       	movw	r30, r16
     7b0:	80 81       	ld	r24, Z
     7b2:	8b 7f       	andi	r24, 0xFB	; 251
     7b4:	80 83       	st	Z, r24
     7b6:	88 81       	ld	r24, Y
     7b8:	81 60       	ori	r24, 0x01	; 1
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBCON |= (1 << VBUSTE);
     7ba:	88 83       	st	Y, r24
     7bc:	80 e0       	ldi	r24, 0x00	; 0
     7be:	60 e0       	ldi	r22, 0x00	; 0
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
     7c0:	42 e0       	ldi	r20, 0x02	; 2
     7c2:	13 df       	rcall	.-474    	; 0x5ea <Endpoint_ConfigureEndpoint_Prv>
     7c4:	e1 ee       	ldi	r30, 0xE1	; 225
     7c6:	f0 e0       	ldi	r31, 0x00	; 0
     7c8:	80 81       	ld	r24, Z
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
     7ca:	8e 7f       	andi	r24, 0xFE	; 254
     7cc:	80 83       	st	Z, r24
     7ce:	e2 ee       	ldi	r30, 0xE2	; 226
     7d0:	f0 e0       	ldi	r31, 0x00	; 0
     7d2:	80 81       	ld	r24, Z
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
     7d4:	81 60       	ori	r24, 0x01	; 1
     7d6:	80 83       	st	Z, r24
     7d8:	80 81       	ld	r24, Z
     7da:	88 60       	ori	r24, 0x08	; 8
     7dc:	80 83       	st	Z, r24
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
     7de:	f8 01       	movw	r30, r16
     7e0:	80 81       	ld	r24, Z
     7e2:	8e 7f       	andi	r24, 0xFE	; 254
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
     7e4:	80 83       	st	Z, r24
     7e6:	88 81       	ld	r24, Y
     7e8:	80 61       	ori	r24, 0x10	; 16
     7ea:	88 83       	st	Y, r24

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON |=  (1 << OTGPADE);
     7ec:	df 91       	pop	r29
     7ee:	cf 91       	pop	r28
     7f0:	1f 91       	pop	r17
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
     7f2:	0f 91       	pop	r16
     7f4:	08 95       	ret

000007f6 <USB_Init>:
     7f6:	e8 ed       	ldi	r30, 0xD8	; 216
     7f8:	f0 e0       	ldi	r31, 0x00	; 0
     7fa:	80 81       	ld	r24, Z
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON &= ~(1 << OTGPADE);
     7fc:	8f 7e       	andi	r24, 0xEF	; 239
     7fe:	80 83       	st	Z, r24

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON |=  (1 << UVREGE);
     800:	e7 ed       	ldi	r30, 0xD7	; 215
     802:	f0 e0       	ldi	r31, 0x00	; 0
     804:	80 81       	ld	r24, Z
     806:	81 60       	ori	r24, 0x01	; 1
     808:	80 83       	st	Z, r24
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
     80a:	81 e0       	ldi	r24, 0x01	; 1
     80c:	80 93 25 01 	sts	0x0125, r24

	USB_ResetInterface();
     810:	ae cf       	rjmp	.-164    	; 0x76e <USB_ResetInterface>

00000812 <USB_INT_DisableAllInterrupts>:
#include "../USBInterrupt.h"

void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
     812:	e8 ed       	ldi	r30, 0xD8	; 216
     814:	f0 e0       	ldi	r31, 0x00	; 0
     816:	80 81       	ld	r24, Z
     818:	8c 7f       	andi	r24, 0xFC	; 252
     81a:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
     81c:	10 92 e2 00 	sts	0x00E2, r1
	#endif
}
     820:	08 95       	ret

00000822 <USB_INT_ClearAllInterrupts>:

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
     822:	10 92 da 00 	sts	0x00DA, r1
	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
     826:	10 92 e1 00 	sts	0x00E1, r1
	#endif
}
     82a:	08 95       	ret

0000082c <__vector_10>:

ISR(USB_GEN_vect, ISR_BLOCK)
{
     82c:	1f 92       	push	r1
     82e:	0f 92       	push	r0
     830:	0f b6       	in	r0, 0x3f	; 63
     832:	0f 92       	push	r0
     834:	0b b6       	in	r0, 0x3b	; 59
     836:	0f 92       	push	r0
     838:	11 24       	eor	r1, r1
     83a:	2f 93       	push	r18
     83c:	3f 93       	push	r19
     83e:	4f 93       	push	r20
     840:	5f 93       	push	r21
     842:	6f 93       	push	r22
     844:	7f 93       	push	r23
     846:	8f 93       	push	r24
     848:	9f 93       	push	r25
     84a:	af 93       	push	r26
     84c:	bf 93       	push	r27
     84e:	ef 93       	push	r30
     850:	ff 93       	push	r31
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
					case USB_INT_SOFI:
						return (UDINT  & (1 << SOFI));
     852:	80 91 e1 00 	lds	r24, 0x00E1
	#if defined(USB_CAN_BE_DEVICE)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
     856:	82 ff       	sbrs	r24, 2
     858:	0a c0       	rjmp	.+20     	; 0x86e <__vector_10+0x42>
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
					case USB_INT_SOFI:
						return (UDIEN  & (1 << SOFE));
     85a:	80 91 e2 00 	lds	r24, 0x00E2
     85e:	82 ff       	sbrs	r24, 2
     860:	06 c0       	rjmp	.+12     	; 0x86e <__vector_10+0x42>
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
						break;
					case USB_INT_SOFI:
						UDINT  &= ~(1 << SOFI);
     862:	80 91 e1 00 	lds	r24, 0x00E1
     866:	8b 7f       	andi	r24, 0xFB	; 251
     868:	80 93 e1 00 	sts	0x00E1, r24
	{
		USB_INT_Clear(USB_INT_SOFI);

		EVENT_USB_Device_StartOfFrame();
     86c:	d6 dc       	rcall	.-1620   	; 0x21a <EVENT_USB_Device_StartOfFrame>
     86e:	80 91 da 00 	lds	r24, 0x00DA
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBINT & (1 << VBUSTI));
     872:	80 ff       	sbrs	r24, 0
	}
	#endif

	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	if (USB_INT_HasOccurred(USB_INT_VBUSTI) && USB_INT_IsEnabled(USB_INT_VBUSTI))
     874:	1b c0       	rjmp	.+54     	; 0x8ac <__vector_10+0x80>
     876:	80 91 d8 00 	lds	r24, 0x00D8
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBCON & (1 << VBUSTE));
     87a:	80 ff       	sbrs	r24, 0
     87c:	17 c0       	rjmp	.+46     	; 0x8ac <__vector_10+0x80>
     87e:	80 91 da 00 	lds	r24, 0x00DA
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBINT &= ~(1 << VBUSTI);
     882:	8e 7f       	andi	r24, 0xFE	; 254
     884:	80 93 da 00 	sts	0x00DA, r24
     888:	80 91 d9 00 	lds	r24, 0x00D9
				 *  \return Boolean \c true if the VBUS line is currently detecting power from a host, \c false otherwise.
				 */
				static inline bool USB_VBUS_GetStatus(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
				static inline bool USB_VBUS_GetStatus(void)
				{
					return ((USBSTA & (1 << VBUS)) ? true : false);
     88c:	80 ff       	sbrs	r24, 0
	{
		USB_INT_Clear(USB_INT_VBUSTI);

		if (USB_VBUS_GetStatus())
     88e:	0b c0       	rjmp	.+22     	; 0x8a6 <__vector_10+0x7a>
     890:	8c e0       	ldi	r24, 0x0C	; 12

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
     892:	89 bd       	out	0x29, r24	; 41
     894:	8e e0       	ldi	r24, 0x0E	; 14
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
     896:	89 bd       	out	0x29, r24	; 41
     898:	09 b4       	in	r0, 0x29	; 41
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			{
				USB_PLL_On();
				while (!(USB_PLL_IsReady()));
     89a:	00 fe       	sbrs	r0, 0
     89c:	fd cf       	rjmp	.-6      	; 0x898 <__vector_10+0x6c>
     89e:	81 e0       	ldi	r24, 0x01	; 1
			}

			USB_DeviceState = DEVICE_STATE_Powered;
     8a0:	8e bb       	out	0x1e, r24	; 30
     8a2:	a6 dc       	rcall	.-1716   	; 0x1f0 <EVENT_USB_Device_Connect>
			EVENT_USB_Device_Connect();
     8a4:	03 c0       	rjmp	.+6      	; 0x8ac <__vector_10+0x80>
     8a6:	19 bc       	out	0x29, r1	; 41
     8a8:	1e ba       	out	0x1e, r1	; 30
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
     8aa:	a4 dc       	rcall	.-1720   	; 0x1f4 <EVENT_USB_Device_Disconnect>
		else
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			  USB_PLL_Off();

			USB_DeviceState = DEVICE_STATE_Unattached;
     8ac:	80 91 e1 00 	lds	r24, 0x00E1
			EVENT_USB_Device_Disconnect();
     8b0:	80 ff       	sbrs	r24, 0
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
     8b2:	17 c0       	rjmp	.+46     	; 0x8e2 <__vector_10+0xb6>
     8b4:	80 91 e2 00 	lds	r24, 0x00E2
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
     8b8:	80 ff       	sbrs	r24, 0
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
     8ba:	13 c0       	rjmp	.+38     	; 0x8e2 <__vector_10+0xb6>
     8bc:	80 91 e2 00 	lds	r24, 0x00E2
     8c0:	8e 7f       	andi	r24, 0xFE	; 254
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
     8c2:	80 93 e2 00 	sts	0x00E2, r24
     8c6:	80 91 e2 00 	lds	r24, 0x00E2
     8ca:	80 61       	ori	r24, 0x10	; 16
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
     8cc:	80 93 e2 00 	sts	0x00E2, r24
     8d0:	80 91 d8 00 	lds	r24, 0x00D8
     8d4:	80 62       	ori	r24, 0x20	; 32
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON |=  (1 << FRZCLK);
     8d6:	80 93 d8 00 	sts	0x00D8, r24
     8da:	19 bc       	out	0x29, r1	; 41
     8dc:	85 e0       	ldi	r24, 0x05	; 5
     8de:	8e bb       	out	0x1e, r24	; 30
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
     8e0:	cc d1       	rcall	.+920    	; 0xc7a <USB_Event_Stub>

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
		EVENT_USB_Device_Disconnect();
		#else
		USB_DeviceState = DEVICE_STATE_Suspended;
     8e2:	80 91 e1 00 	lds	r24, 0x00E1
		EVENT_USB_Device_Suspend();
     8e6:	84 ff       	sbrs	r24, 4
     8e8:	2c c0       	rjmp	.+88     	; 0x942 <__vector_10+0x116>
					case USB_INT_IDTI:
						return (USBINT & (1 << IDTI));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
     8ea:	80 91 e2 00 	lds	r24, 0x00E2
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
     8ee:	84 ff       	sbrs	r24, 4
     8f0:	28 c0       	rjmp	.+80     	; 0x942 <__vector_10+0x116>
					case USB_INT_IDTI:
						return (USBCON & (1 << IDTE));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
     8f2:	8c e0       	ldi	r24, 0x0C	; 12
     8f4:	89 bd       	out	0x29, r24	; 41
     8f6:	8e e0       	ldi	r24, 0x0E	; 14
     8f8:	89 bd       	out	0x29, r24	; 41

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
     8fa:	09 b4       	in	r0, 0x29	; 41
     8fc:	00 fe       	sbrs	r0, 0
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
     8fe:	fd cf       	rjmp	.-6      	; 0x8fa <__vector_10+0xce>
     900:	80 91 d8 00 	lds	r24, 0x00D8
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
     904:	8f 7d       	andi	r24, 0xDF	; 223
     906:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
     90a:	80 91 e1 00 	lds	r24, 0x00E1
     90e:	8f 7e       	andi	r24, 0xEF	; 239
     910:	80 93 e1 00 	sts	0x00E1, r24
						USBINT &= ~(1 << IDTI);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
     914:	80 91 e2 00 	lds	r24, 0x00E2
     918:	8f 7e       	andi	r24, 0xEF	; 239
     91a:	80 93 e2 00 	sts	0x00E2, r24
						USBCON &= ~(1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
     91e:	80 91 e2 00 	lds	r24, 0x00E2
     922:	81 60       	ori	r24, 0x01	; 1
     924:	80 93 e2 00 	sts	0x00E2, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
     928:	80 91 22 01 	lds	r24, 0x0122
     92c:	88 23       	and	r24, r24
     92e:	21 f4       	brne	.+8      	; 0x938 <__vector_10+0x10c>
		USB_INT_Clear(USB_INT_WAKEUPI);

		USB_INT_Disable(USB_INT_WAKEUPI);
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_Device_ConfigurationNumber)
     930:	80 91 e3 00 	lds	r24, 0x00E3
     934:	87 ff       	sbrs	r24, 7
     936:	02 c0       	rjmp	.+4      	; 0x93c <__vector_10+0x110>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
     938:	84 e0       	ldi	r24, 0x04	; 4
     93a:	01 c0       	rjmp	.+2      	; 0x93e <__vector_10+0x112>
		  USB_DeviceState = DEVICE_STATE_Configured;
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
     93c:	81 e0       	ldi	r24, 0x01	; 1
     93e:	8e bb       	out	0x1e, r24	; 30
     940:	9c d1       	rcall	.+824    	; 0xc7a <USB_Event_Stub>
     942:	80 91 e1 00 	lds	r24, 0x00E1
     946:	83 ff       	sbrs	r24, 3

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
		#else
		EVENT_USB_Device_WakeUp();
     948:	21 c0       	rjmp	.+66     	; 0x98c <__vector_10+0x160>
     94a:	80 91 e2 00 	lds	r24, 0x00E2
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
     94e:	83 ff       	sbrs	r24, 3
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
     950:	1d c0       	rjmp	.+58     	; 0x98c <__vector_10+0x160>
     952:	80 91 e1 00 	lds	r24, 0x00E1
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
     956:	87 7f       	andi	r24, 0xF7	; 247
     958:	80 93 e1 00 	sts	0x00E1, r24
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
     95c:	82 e0       	ldi	r24, 0x02	; 2
     95e:	8e bb       	out	0x1e, r24	; 30
     960:	10 92 22 01 	sts	0x0122, r1
     964:	80 91 e1 00 	lds	r24, 0x00E1
	{
		USB_INT_Clear(USB_INT_EORSTI);

		USB_DeviceState                = DEVICE_STATE_Default;
     968:	8e 7f       	andi	r24, 0xFE	; 254
		USB_Device_ConfigurationNumber = 0;
     96a:	80 93 e1 00 	sts	0x00E1, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
     96e:	80 91 e2 00 	lds	r24, 0x00E2
     972:	8e 7f       	andi	r24, 0xFE	; 254
     974:	80 93 e2 00 	sts	0x00E2, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
     978:	80 91 e2 00 	lds	r24, 0x00E2
     97c:	80 61       	ori	r24, 0x10	; 16
     97e:	80 93 e2 00 	sts	0x00E2, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
     982:	80 e0       	ldi	r24, 0x00	; 0
     984:	60 e0       	ldi	r22, 0x00	; 0
     986:	42 e0       	ldi	r20, 0x02	; 2
     988:	30 de       	rcall	.-928    	; 0x5ea <Endpoint_ConfigureEndpoint_Prv>
     98a:	77 d1       	rcall	.+750    	; 0xc7a <USB_Event_Stub>
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
     98c:	ff 91       	pop	r31
     98e:	ef 91       	pop	r30
     990:	bf 91       	pop	r27
     992:	af 91       	pop	r26
     994:	9f 91       	pop	r25

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
     996:	8f 91       	pop	r24
     998:	7f 91       	pop	r23
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
     99a:	6f 91       	pop	r22
     99c:	5f 91       	pop	r21
     99e:	4f 91       	pop	r20
     9a0:	3f 91       	pop	r19
     9a2:	2f 91       	pop	r18
     9a4:	0f 90       	pop	r0
     9a6:	0b be       	out	0x3b, r0	; 59
     9a8:	0f 90       	pop	r0
     9aa:	0f be       	out	0x3f, r0	; 63
     9ac:	0f 90       	pop	r0
     9ae:	1f 90       	pop	r1
     9b0:	18 95       	reti

000009b2 <USB_Device_ProcessControlRequest>:
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_Device_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
     9b2:	1f 93       	push	r17
     9b4:	cf 93       	push	r28
     9b6:	df 93       	push	r29
     9b8:	cd b7       	in	r28, 0x3d	; 61
     9ba:	de b7       	in	r29, 0x3e	; 62
     9bc:	ac 97       	sbiw	r28, 0x2c	; 44
     9be:	0f b6       	in	r0, 0x3f	; 63
     9c0:	f8 94       	cli
     9c2:	de bf       	out	0x3e, r29	; 62
     9c4:	0f be       	out	0x3f, r0	; 63
     9c6:	cd bf       	out	0x3d, r28	; 61
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
     9c8:	80 e0       	ldi	r24, 0x00	; 0
	USB_ControlRequest.bRequest      = Endpoint_Read_8();
	USB_ControlRequest.wValue        = Endpoint_Read_16_LE();
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;
     9ca:	e6 e2       	ldi	r30, 0x26	; 38
     9cc:	f1 e0       	ldi	r31, 0x01	; 1
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
     9ce:	90 91 f1 00 	lds	r25, 0x00F1

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_8();
     9d2:	91 93       	st	Z+, r25
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
     9d4:	8f 5f       	subi	r24, 0xFF	; 255
     9d6:	88 30       	cpi	r24, 0x08	; 8
     9d8:	d1 f7       	brne	.-12     	; 0x9ce <USB_Device_ProcessControlRequest+0x1c>
	  *(RequestHeader++) = Endpoint_Read_8();
	#endif

	EVENT_USB_Device_ControlRequest();
     9da:	1c dc       	rcall	.-1992   	; 0x214 <EVENT_USB_Device_ControlRequest>
     9dc:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     9e0:	83 ff       	sbrs	r24, 3

	if (Endpoint_IsSETUPReceived())
     9e2:	33 c1       	rjmp	.+614    	; 0xc4a <USB_Device_ProcessControlRequest+0x298>
     9e4:	80 91 26 01 	lds	r24, 0x0126
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
     9e8:	20 91 27 01 	lds	r18, 0x0127

		switch (USB_ControlRequest.bRequest)
     9ec:	25 30       	cpi	r18, 0x05	; 5
     9ee:	09 f4       	brne	.+2      	; 0x9f2 <USB_Device_ProcessControlRequest+0x40>
     9f0:	84 c0       	rjmp	.+264    	; 0xafa <USB_Device_ProcessControlRequest+0x148>
     9f2:	26 30       	cpi	r18, 0x06	; 6
     9f4:	40 f4       	brcc	.+16     	; 0xa06 <USB_Device_ProcessControlRequest+0x54>
     9f6:	21 30       	cpi	r18, 0x01	; 1
     9f8:	a1 f1       	breq	.+104    	; 0xa62 <USB_Device_ProcessControlRequest+0xb0>
     9fa:	21 30       	cpi	r18, 0x01	; 1
     9fc:	70 f0       	brcs	.+28     	; 0xa1a <USB_Device_ProcessControlRequest+0x68>
     9fe:	23 30       	cpi	r18, 0x03	; 3
     a00:	09 f0       	breq	.+2      	; 0xa04 <USB_Device_ProcessControlRequest+0x52>
     a02:	23 c1       	rjmp	.+582    	; 0xc4a <USB_Device_ProcessControlRequest+0x298>
     a04:	2e c0       	rjmp	.+92     	; 0xa62 <USB_Device_ProcessControlRequest+0xb0>
     a06:	28 30       	cpi	r18, 0x08	; 8
     a08:	09 f4       	brne	.+2      	; 0xa0c <USB_Device_ProcessControlRequest+0x5a>
     a0a:	f2 c0       	rjmp	.+484    	; 0xbf0 <USB_Device_ProcessControlRequest+0x23e>
     a0c:	29 30       	cpi	r18, 0x09	; 9
     a0e:	09 f4       	brne	.+2      	; 0xa12 <USB_Device_ProcessControlRequest+0x60>
     a10:	01 c1       	rjmp	.+514    	; 0xc14 <USB_Device_ProcessControlRequest+0x262>
     a12:	26 30       	cpi	r18, 0x06	; 6
     a14:	09 f0       	breq	.+2      	; 0xa18 <USB_Device_ProcessControlRequest+0x66>
     a16:	19 c1       	rjmp	.+562    	; 0xc4a <USB_Device_ProcessControlRequest+0x298>
     a18:	92 c0       	rjmp	.+292    	; 0xb3e <USB_Device_ProcessControlRequest+0x18c>
     a1a:	80 38       	cpi	r24, 0x80	; 128
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
     a1c:	21 f0       	breq	.+8      	; 0xa26 <USB_Device_ProcessControlRequest+0x74>
     a1e:	82 38       	cpi	r24, 0x82	; 130
     a20:	09 f0       	breq	.+2      	; 0xa24 <USB_Device_ProcessControlRequest+0x72>
     a22:	13 c1       	rjmp	.+550    	; 0xc4a <USB_Device_ProcessControlRequest+0x298>
     a24:	08 c0       	rjmp	.+16     	; 0xa36 <USB_Device_ProcessControlRequest+0x84>
     a26:	80 91 23 01 	lds	r24, 0x0123
	Endpoint_ClearOUT();
}

static void USB_Device_GetStatus(void)
{
	uint8_t CurrentStatus = 0;
     a2a:	90 91 24 01 	lds	r25, 0x0124
			if (USB_Device_CurrentlySelfPowered)
			  CurrentStatus |= FEATURE_SELFPOWERED_ENABLED;
			#endif

			#if !defined(NO_DEVICE_REMOTE_WAKEUP)
			if (USB_Device_RemoteWakeupEnabled)
     a2e:	99 23       	and	r25, r25
     a30:	71 f0       	breq	.+28     	; 0xa4e <USB_Device_ProcessControlRequest+0x9c>
     a32:	82 60       	ori	r24, 0x02	; 2
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
     a34:	0c c0       	rjmp	.+24     	; 0xa4e <USB_Device_ProcessControlRequest+0x9c>
     a36:	80 91 2a 01 	lds	r24, 0x012A
			#endif
			break;
		case (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_ENDPOINT):
			#if !defined(CONTROL_ONLY_DEVICE)
			Endpoint_SelectEndpoint((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
     a3a:	8f 70       	andi	r24, 0x0F	; 15
     a3c:	80 93 e9 00 	sts	0x00E9, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     a40:	90 91 eb 00 	lds	r25, 0x00EB
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
     a44:	81 e0       	ldi	r24, 0x01	; 1

			CurrentStatus = Endpoint_IsStalled();
     a46:	95 ff       	sbrs	r25, 5
     a48:	80 e0       	ldi	r24, 0x00	; 0
     a4a:	10 92 e9 00 	sts	0x00E9, r1
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     a4e:	90 91 e8 00 	lds	r25, 0x00E8
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     a52:	97 7f       	andi	r25, 0xF7	; 247
     a54:	90 93 e8 00 	sts	0x00E8, r25
     a58:	80 93 f1 00 	sts	0x00F1, r24
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
     a5c:	10 92 f1 00 	sts	0x00F1, r1
				UEDATX = (Data >> 8);
     a60:	d2 c0       	rjmp	.+420    	; 0xc06 <USB_Device_ProcessControlRequest+0x254>
     a62:	88 23       	and	r24, r24
				}

				break;
			case REQ_ClearFeature:
			case REQ_SetFeature:
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
     a64:	19 f0       	breq	.+6      	; 0xa6c <USB_Device_ProcessControlRequest+0xba>
     a66:	82 30       	cpi	r24, 0x02	; 2
     a68:	09 f0       	breq	.+2      	; 0xa6c <USB_Device_ProcessControlRequest+0xba>
     a6a:	ef c0       	rjmp	.+478    	; 0xc4a <USB_Device_ProcessControlRequest+0x298>
     a6c:	90 e0       	ldi	r25, 0x00	; 0
	Endpoint_ClearStatusStage();
}

static void USB_Device_ClearSetFeature(void)
{
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
     a6e:	8f 71       	andi	r24, 0x1F	; 31
     a70:	90 70       	andi	r25, 0x00	; 0
     a72:	00 97       	sbiw	r24, 0x00	; 0
     a74:	29 f0       	breq	.+10     	; 0xa80 <USB_Device_ProcessControlRequest+0xce>
     a76:	82 30       	cpi	r24, 0x02	; 2
     a78:	91 05       	cpc	r25, r1
     a7a:	09 f0       	breq	.+2      	; 0xa7e <USB_Device_ProcessControlRequest+0xcc>
     a7c:	e6 c0       	rjmp	.+460    	; 0xc4a <USB_Device_ProcessControlRequest+0x298>
     a7e:	0b c0       	rjmp	.+22     	; 0xa96 <USB_Device_ProcessControlRequest+0xe4>
     a80:	80 91 28 01 	lds	r24, 0x0128
	{
		#if !defined(NO_DEVICE_REMOTE_WAKEUP)
		case REQREC_DEVICE:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
     a84:	81 30       	cpi	r24, 0x01	; 1
     a86:	09 f0       	breq	.+2      	; 0xa8a <USB_Device_ProcessControlRequest+0xd8>
     a88:	e0 c0       	rjmp	.+448    	; 0xc4a <USB_Device_ProcessControlRequest+0x298>
     a8a:	23 30       	cpi	r18, 0x03	; 3
			  USB_Device_RemoteWakeupEnabled = (USB_ControlRequest.bRequest == REQ_SetFeature);
     a8c:	09 f0       	breq	.+2      	; 0xa90 <USB_Device_ProcessControlRequest+0xde>
     a8e:	80 e0       	ldi	r24, 0x00	; 0
     a90:	80 93 24 01 	sts	0x0124, r24
     a94:	2c c0       	rjmp	.+88     	; 0xaee <USB_Device_ProcessControlRequest+0x13c>
     a96:	80 91 28 01 	lds	r24, 0x0128

			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
     a9a:	88 23       	and	r24, r24
     a9c:	41 f5       	brne	.+80     	; 0xaee <USB_Device_ProcessControlRequest+0x13c>
     a9e:	20 91 2a 01 	lds	r18, 0x012A
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
     aa2:	2f 70       	andi	r18, 0x0F	; 15
     aa4:	09 f4       	brne	.+2      	; 0xaa8 <USB_Device_ProcessControlRequest+0xf6>

				if (EndpointIndex == ENDPOINT_CONTROLEP)
     aa6:	d1 c0       	rjmp	.+418    	; 0xc4a <USB_Device_ProcessControlRequest+0x298>
     aa8:	20 93 e9 00 	sts	0x00E9, r18
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     aac:	80 91 eb 00 	lds	r24, 0x00EB
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
     ab0:	80 ff       	sbrs	r24, 0
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
     ab2:	1d c0       	rjmp	.+58     	; 0xaee <USB_Device_ProcessControlRequest+0x13c>
     ab4:	80 91 27 01 	lds	r24, 0x0127
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
     ab8:	83 30       	cpi	r24, 0x03	; 3
     aba:	21 f4       	brne	.+8      	; 0xac4 <USB_Device_ProcessControlRequest+0x112>
     abc:	80 91 eb 00 	lds	r24, 0x00EB
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
     ac0:	80 62       	ori	r24, 0x20	; 32
     ac2:	13 c0       	rjmp	.+38     	; 0xaea <USB_Device_ProcessControlRequest+0x138>
     ac4:	80 91 eb 00 	lds	r24, 0x00EB
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
     ac8:	80 61       	ori	r24, 0x10	; 16
     aca:	80 93 eb 00 	sts	0x00EB, r24
     ace:	81 e0       	ldi	r24, 0x01	; 1
			 *  \param[in] Address  Endpoint address whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t Address)
			{
				UERST = (1 << (Address & ENDPOINT_EPNUM_MASK));
     ad0:	90 e0       	ldi	r25, 0x00	; 0
     ad2:	02 c0       	rjmp	.+4      	; 0xad8 <USB_Device_ProcessControlRequest+0x126>
     ad4:	88 0f       	add	r24, r24
     ad6:	99 1f       	adc	r25, r25
     ad8:	2a 95       	dec	r18
     ada:	e2 f7       	brpl	.-8      	; 0xad4 <USB_Device_ProcessControlRequest+0x122>
     adc:	80 93 ea 00 	sts	0x00EA, r24
     ae0:	10 92 ea 00 	sts	0x00EA, r1
				UERST = 0;
     ae4:	80 91 eb 00 	lds	r24, 0x00EB

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
     ae8:	88 60       	ori	r24, 0x08	; 8
     aea:	80 93 eb 00 	sts	0x00EB, r24
     aee:	10 92 e9 00 	sts	0x00E9, r1
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     af2:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     af6:	87 7f       	andi	r24, 0xF7	; 247
     af8:	89 c0       	rjmp	.+274    	; 0xc0c <USB_Device_ProcessControlRequest+0x25a>
     afa:	88 23       	and	r24, r24
					USB_Device_ClearSetFeature();
				}

				break;
			case REQ_SetAddress:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
     afc:	09 f0       	breq	.+2      	; 0xb00 <USB_Device_ProcessControlRequest+0x14e>
     afe:	a5 c0       	rjmp	.+330    	; 0xc4a <USB_Device_ProcessControlRequest+0x298>
     b00:	10 91 28 01 	lds	r17, 0x0128
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t DeviceAddress = (USB_ControlRequest.wValue & 0x7F);
     b04:	1f 77       	andi	r17, 0x7F	; 127
     b06:	80 91 e3 00 	lds	r24, 0x00E3
			#endif

			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				UDADDR = (UDADDR & (1 << ADDEN)) | (Address & 0x7F);
     b0a:	80 78       	andi	r24, 0x80	; 128
     b0c:	81 2b       	or	r24, r17
     b0e:	80 93 e3 00 	sts	0x00E3, r24
     b12:	80 91 e8 00 	lds	r24, 0x00E8
     b16:	87 7f       	andi	r24, 0xF7	; 247
     b18:	80 93 e8 00 	sts	0x00E8, r24
     b1c:	d7 dd       	rcall	.-1106   	; 0x6cc <Endpoint_ClearStatusStage>

	USB_Device_SetDeviceAddress(DeviceAddress);

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
     b1e:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     b22:	80 ff       	sbrs	r24, 0
     b24:	fc cf       	rjmp	.-8      	; 0xb1e <USB_Device_ProcessControlRequest+0x16c>

	while (!(Endpoint_IsINReady()));
     b26:	80 91 e3 00 	lds	r24, 0x00E3
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address)
			{
				(void)Address;
				
				UDADDR |= (1 << ADDEN);
     b2a:	80 68       	ori	r24, 0x80	; 128
     b2c:	80 93 e3 00 	sts	0x00E3, r24
     b30:	11 23       	and	r17, r17
     b32:	11 f0       	breq	.+4      	; 0xb38 <USB_Device_ProcessControlRequest+0x186>

	USB_Device_EnableDeviceAddress(DeviceAddress);

	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
     b34:	83 e0       	ldi	r24, 0x03	; 3
     b36:	01 c0       	rjmp	.+2      	; 0xb3a <USB_Device_ProcessControlRequest+0x188>
     b38:	82 e0       	ldi	r24, 0x02	; 2
     b3a:	8e bb       	out	0x1e, r24	; 30
     b3c:	86 c0       	rjmp	.+268    	; 0xc4a <USB_Device_ProcessControlRequest+0x298>
     b3e:	80 58       	subi	r24, 0x80	; 128
     b40:	82 30       	cpi	r24, 0x02	; 2
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_SetAddress();

				break;
			case REQ_GetDescriptor:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
     b42:	08 f0       	brcs	.+2      	; 0xb46 <USB_Device_ProcessControlRequest+0x194>
     b44:	82 c0       	rjmp	.+260    	; 0xc4a <USB_Device_ProcessControlRequest+0x298>
     b46:	80 91 28 01 	lds	r24, 0x0128
	    !(defined(USE_FLASH_DESCRIPTORS) || defined(USE_EEPROM_DESCRIPTORS) || defined(USE_RAM_DESCRIPTORS))
	uint8_t DescriptorAddressSpace;
	#endif

	#if !defined(NO_INTERNAL_SERIAL) && (USE_INTERNAL_SERIAL != NO_DESCRIPTOR)
	if (USB_ControlRequest.wValue == ((DTYPE_String << 8) | USE_INTERNAL_SERIAL))
     b4a:	90 91 29 01 	lds	r25, 0x0129
     b4e:	23 e0       	ldi	r18, 0x03	; 3
     b50:	8c 3d       	cpi	r24, 0xDC	; 220
     b52:	92 07       	cpc	r25, r18
     b54:	a9 f5       	brne	.+106    	; 0xbc0 <USB_Device_ProcessControlRequest+0x20e>
     b56:	83 e0       	ldi	r24, 0x03	; 3
     b58:	8c 83       	std	Y+4, r24	; 0x04
	{
		USB_Descriptor_Header_t Header;
		uint16_t                UnicodeString[INTERNAL_SERIAL_LENGTH_BITS / 4];
	} SignatureDescriptor;

	SignatureDescriptor.Header.Type = DTYPE_String;
     b5a:	8a e2       	ldi	r24, 0x2A	; 42
     b5c:	8b 83       	std	Y+3, r24	; 0x03
	SignatureDescriptor.Header.Size = USB_STRING_LEN(INTERNAL_SERIAL_LENGTH_BITS / 4);
     b5e:	5f b7       	in	r21, 0x3f	; 63
     b60:	f8 94       	cli
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
     b62:	de 01       	movw	r26, r28
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
     b64:	13 96       	adiw	r26, 0x03	; 3
				__builtin_ssrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				cli();
				#endif

				GCC_MEMORY_BARRIER();
     b66:	80 e0       	ldi	r24, 0x00	; 0
     b68:	90 e0       	ldi	r25, 0x00	; 0
     b6a:	4e e0       	ldi	r20, 0x0E	; 14
     b6c:	61 e2       	ldi	r22, 0x21	; 33
			static inline void USB_Device_GetSerialString(uint16_t* const UnicodeString)
			{
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;
     b6e:	e4 2f       	mov	r30, r20

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
				{
					uint8_t SerialByte = boot_signature_byte_get(SigReadAddress);
     b70:	f0 e0       	ldi	r31, 0x00	; 0
     b72:	60 93 57 00 	sts	0x0057, r22
     b76:	e4 91       	lpm	r30, Z
     b78:	80 ff       	sbrs	r24, 0
     b7a:	03 c0       	rjmp	.+6      	; 0xb82 <USB_Device_ProcessControlRequest+0x1d0>

					if (SerialCharNum & 0x01)
     b7c:	e2 95       	swap	r30
     b7e:	ef 70       	andi	r30, 0x0F	; 15
					{
						SerialByte >>= 4;
     b80:	4f 5f       	subi	r20, 0xFF	; 255
     b82:	ef 70       	andi	r30, 0x0F	; 15
						SigReadAddress++;
     b84:	2e 2f       	mov	r18, r30
					}

					SerialByte &= 0x0F;
     b86:	30 e0       	ldi	r19, 0x00	; 0
     b88:	ea 30       	cpi	r30, 0x0A	; 10
     b8a:	18 f0       	brcs	.+6      	; 0xb92 <USB_Device_ProcessControlRequest+0x1e0>

					UnicodeString[SerialCharNum] = cpu_to_le16((SerialByte >= 10) ?
     b8c:	29 5c       	subi	r18, 0xC9	; 201
     b8e:	3f 4f       	sbci	r19, 0xFF	; 255
     b90:	02 c0       	rjmp	.+4      	; 0xb96 <USB_Device_ProcessControlRequest+0x1e4>
     b92:	20 5d       	subi	r18, 0xD0	; 208
     b94:	3f 4f       	sbci	r19, 0xFF	; 255
     b96:	13 96       	adiw	r26, 0x03	; 3
     b98:	3c 93       	st	X, r19
     b9a:	2e 93       	st	-X, r18
     b9c:	12 97       	sbiw	r26, 0x02	; 2
     b9e:	01 96       	adiw	r24, 0x01	; 1
     ba0:	12 96       	adiw	r26, 0x02	; 2
     ba2:	84 31       	cpi	r24, 0x14	; 20
     ba4:	91 05       	cpc	r25, r1
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
     ba6:	19 f7       	brne	.-58     	; 0xb6e <USB_Device_ProcessControlRequest+0x1bc>
     ba8:	5f bf       	out	0x3f, r21	; 63
     baa:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     bae:	87 7f       	andi	r24, 0xF7	; 247
     bb0:	80 93 e8 00 	sts	0x00E8, r24
     bb4:	ce 01       	movw	r24, r28
     bb6:	03 96       	adiw	r24, 0x03	; 3

	USB_Device_GetSerialString(SignatureDescriptor.UnicodeString);

	Endpoint_ClearSETUP();

	Endpoint_Write_Control_Stream_LE(&SignatureDescriptor, sizeof(SignatureDescriptor));
     bb8:	6a e2       	ldi	r22, 0x2A	; 42
     bba:	70 e0       	ldi	r23, 0x00	; 0
     bbc:	1b dc       	rcall	.-1994   	; 0x3f4 <Endpoint_Write_Control_Stream_LE>
     bbe:	12 c0       	rjmp	.+36     	; 0xbe4 <USB_Device_ProcessControlRequest+0x232>
     bc0:	60 91 2a 01 	lds	r22, 0x012A
     bc4:	ae 01       	movw	r20, r28
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif

	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
     bc6:	4f 5f       	subi	r20, 0xFF	; 255
     bc8:	5f 4f       	sbci	r21, 0xFF	; 255
     bca:	87 db       	rcall	.-2290   	; 0x2da <CALLBACK_USB_GetDescriptor>
     bcc:	bc 01       	movw	r22, r24
     bce:	00 97       	sbiw	r24, 0x00	; 0
     bd0:	09 f4       	brne	.+2      	; 0xbd4 <USB_Device_ProcessControlRequest+0x222>
     bd2:	3b c0       	rjmp	.+118    	; 0xc4a <USB_Device_ProcessControlRequest+0x298>
     bd4:	80 91 e8 00 	lds	r24, 0x00E8
     bd8:	87 7f       	andi	r24, 0xF7	; 247
     bda:	80 93 e8 00 	sts	0x00E8, r24
     bde:	89 81       	ldd	r24, Y+1	; 0x01
     be0:	9a 81       	ldd	r25, Y+2	; 0x02
     be2:	a8 dc       	rcall	.-1712   	; 0x534 <Endpoint_Write_Control_PStream_LE>
     be4:	80 91 e8 00 	lds	r24, 0x00E8
	#if defined(USE_RAM_DESCRIPTORS) || !defined(ARCH_HAS_MULTI_ADDRESS_SPACE)
	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_EEPROM_DESCRIPTORS)
	Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_FLASH_DESCRIPTORS)
	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
     be8:	8b 77       	andi	r24, 0x7B	; 123
     bea:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     bee:	2d c0       	rjmp	.+90     	; 0xc4a <USB_Device_ProcessControlRequest+0x298>
     bf0:	80 38       	cpi	r24, 0x80	; 128
     bf2:	59 f5       	brne	.+86     	; 0xc4a <USB_Device_ProcessControlRequest+0x298>
     bf4:	80 91 e8 00 	lds	r24, 0x00E8
     bf8:	87 7f       	andi	r24, 0xF7	; 247
					USB_Device_GetDescriptor();
				}

				break;
			case REQ_GetConfiguration:
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
     bfa:	80 93 e8 00 	sts	0x00E8, r24
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     bfe:	80 91 22 01 	lds	r24, 0x0122
     c02:	80 93 f1 00 	sts	0x00F1, r24
     c06:	80 91 e8 00 	lds	r24, 0x00E8

static void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();

	Endpoint_Write_8(USB_Device_ConfigurationNumber);
     c0a:	8e 77       	andi	r24, 0x7E	; 126
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     c0c:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     c10:	5d dd       	rcall	.-1350   	; 0x6cc <Endpoint_ClearStatusStage>
     c12:	1b c0       	rjmp	.+54     	; 0xc4a <USB_Device_ProcessControlRequest+0x298>
     c14:	88 23       	and	r24, r24
     c16:	c9 f4       	brne	.+50     	; 0xc4a <USB_Device_ProcessControlRequest+0x298>
     c18:	90 91 28 01 	lds	r25, 0x0128
	Endpoint_ClearIN();

	Endpoint_ClearStatusStage();
     c1c:	92 30       	cpi	r25, 0x02	; 2
     c1e:	a8 f4       	brcc	.+42     	; 0xc4a <USB_Device_ProcessControlRequest+0x298>
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_GetConfiguration();

				break;
			case REQ_SetConfiguration:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
     c20:	80 91 e8 00 	lds	r24, 0x00E8
}

static void USB_Device_SetConfiguration(void)
{
	#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
     c24:	87 7f       	andi	r24, 0xF7	; 247
     c26:	80 93 e8 00 	sts	0x00E8, r24
     c2a:	90 93 22 01 	sts	0x0122, r25
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     c2e:	4e dd       	rcall	.-1380   	; 0x6cc <Endpoint_ClearStatusStage>
     c30:	80 91 22 01 	lds	r24, 0x0122
     c34:	88 23       	and	r24, r24
	#endif
	#endif

	Endpoint_ClearSETUP();

	USB_Device_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
     c36:	21 f4       	brne	.+8      	; 0xc40 <USB_Device_ProcessControlRequest+0x28e>
     c38:	80 91 e3 00 	lds	r24, 0x00E3

	Endpoint_ClearStatusStage();
     c3c:	87 ff       	sbrs	r24, 7

	if (USB_Device_ConfigurationNumber)
     c3e:	02 c0       	rjmp	.+4      	; 0xc44 <USB_Device_ProcessControlRequest+0x292>
     c40:	84 e0       	ldi	r24, 0x04	; 4
     c42:	01 c0       	rjmp	.+2      	; 0xc46 <USB_Device_ProcessControlRequest+0x294>
     c44:	81 e0       	ldi	r24, 0x01	; 1
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
     c46:	8e bb       	out	0x1e, r24	; 30
     c48:	d7 da       	rcall	.-2642   	; 0x1f8 <EVENT_USB_Device_ConfigurationChanged>
	  USB_DeviceState = DEVICE_STATE_Configured;
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
     c4a:	80 91 e8 00 	lds	r24, 0x00E8
     c4e:	83 ff       	sbrs	r24, 3
     c50:	0a c0       	rjmp	.+20     	; 0xc66 <USB_Device_ProcessControlRequest+0x2b4>
     c52:	80 91 e8 00 	lds	r24, 0x00E8

	EVENT_USB_Device_ConfigurationChanged();
     c56:	87 7f       	andi	r24, 0xF7	; 247
     c58:	80 93 e8 00 	sts	0x00E8, r24
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     c5c:	80 91 eb 00 	lds	r24, 0x00EB
			default:
				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
     c60:	80 62       	ori	r24, 0x20	; 32
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     c62:	80 93 eb 00 	sts	0x00EB, r24
     c66:	ac 96       	adiw	r28, 0x2c	; 44
     c68:	0f b6       	in	r0, 0x3f	; 63
     c6a:	f8 94       	cli
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
     c6c:	de bf       	out	0x3e, r29	; 62
     c6e:	0f be       	out	0x3f, r0	; 63
     c70:	cd bf       	out	0x3d, r28	; 61
     c72:	df 91       	pop	r29
     c74:	cf 91       	pop	r28
	{
		Endpoint_ClearSETUP();
		Endpoint_StallTransaction();
	}
}
     c76:	1f 91       	pop	r17
     c78:	08 95       	ret

00000c7a <USB_Event_Stub>:
#include "Events.h"

void USB_Event_Stub(void)
{

}
     c7a:	08 95       	ret

00000c7c <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
     c7c:	cf 93       	push	r28
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_DeviceTask(void)
{
	if (USB_DeviceState == DEVICE_STATE_Unattached)
     c7e:	8e b3       	in	r24, 0x1e	; 30
     c80:	88 23       	and	r24, r24
     c82:	a9 f0       	breq	.+42     	; 0xcae <USB_USBTask+0x32>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
     c84:	80 91 e9 00 	lds	r24, 0x00E9
     c88:	8f 70       	andi	r24, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
     c8a:	90 91 ec 00 	lds	r25, 0x00EC
     c8e:	90 ff       	sbrs	r25, 0
     c90:	02 c0       	rjmp	.+4      	; 0xc96 <USB_USBTask+0x1a>
     c92:	c0 e8       	ldi	r28, 0x80	; 128
     c94:	01 c0       	rjmp	.+2      	; 0xc98 <USB_USBTask+0x1c>
     c96:	c0 e0       	ldi	r28, 0x00	; 0
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
     c98:	c8 2b       	or	r28, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     c9a:	10 92 e9 00 	sts	0x00E9, r1
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     c9e:	80 91 e8 00 	lds	r24, 0x00E8

	uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

	if (Endpoint_IsSETUPReceived())
     ca2:	83 ff       	sbrs	r24, 3
     ca4:	01 c0       	rjmp	.+2      	; 0xca8 <USB_USBTask+0x2c>
	  USB_Device_ProcessControlRequest();
     ca6:	85 de       	rcall	.-758    	; 0x9b2 <USB_Device_ProcessControlRequest>
     ca8:	cf 70       	andi	r28, 0x0F	; 15
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     caa:	c0 93 e9 00 	sts	0x00E9, r28
     cae:	cf 91       	pop	r28
	#elif defined(USB_CAN_BE_HOST)
		USB_HostTask();
	#elif defined(USB_CAN_BE_DEVICE)
		USB_DeviceTask();
	#endif
}
     cb0:	08 95       	ret

00000cb2 <HID_Device_ProcessControlRequest>:
#define  __INCLUDE_FROM_HID_DRIVER
#define  __INCLUDE_FROM_HID_DEVICE_C
#include "HIDClassDevice.h"

void HID_Device_ProcessControlRequest(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
     cb2:	6f 92       	push	r6
     cb4:	7f 92       	push	r7
     cb6:	8f 92       	push	r8
     cb8:	9f 92       	push	r9
     cba:	af 92       	push	r10
     cbc:	bf 92       	push	r11
     cbe:	cf 92       	push	r12
     cc0:	df 92       	push	r13
     cc2:	ef 92       	push	r14
     cc4:	ff 92       	push	r15
     cc6:	0f 93       	push	r16
     cc8:	1f 93       	push	r17
     cca:	cf 93       	push	r28
     ccc:	df 93       	push	r29
     cce:	00 d0       	rcall	.+0      	; 0xcd0 <HID_Device_ProcessControlRequest+0x1e>
     cd0:	0f 92       	push	r0
     cd2:	cd b7       	in	r28, 0x3d	; 61
     cd4:	de b7       	in	r29, 0x3e	; 62
     cd6:	7c 01       	movw	r14, r24
				Endpoint_ClearStatusStage();
			}

			break;
	}
}
     cd8:	6d b6       	in	r6, 0x3d	; 61
     cda:	7e b6       	in	r7, 0x3e	; 62
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     cdc:	80 91 e8 00 	lds	r24, 0x00E8
#define  __INCLUDE_FROM_HID_DEVICE_C
#include "HIDClassDevice.h"

void HID_Device_ProcessControlRequest(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
	if (!(Endpoint_IsSETUPReceived()))
     ce0:	83 ff       	sbrs	r24, 3
     ce2:	03 c1       	rjmp	.+518    	; 0xeea <HID_Device_ProcessControlRequest+0x238>
	  return;

	if (USB_ControlRequest.wIndex != HIDInterfaceInfo->Config.InterfaceNumber)
     ce4:	f7 01       	movw	r30, r14
     ce6:	80 81       	ld	r24, Z
     ce8:	90 e0       	ldi	r25, 0x00	; 0
     cea:	20 91 2a 01 	lds	r18, 0x012A
     cee:	30 91 2b 01 	lds	r19, 0x012B
     cf2:	28 17       	cp	r18, r24
     cf4:	39 07       	cpc	r19, r25
     cf6:	09 f0       	breq	.+2      	; 0xcfa <HID_Device_ProcessControlRequest+0x48>
     cf8:	f8 c0       	rjmp	.+496    	; 0xeea <HID_Device_ProcessControlRequest+0x238>
	  return;

	switch (USB_ControlRequest.bRequest)
     cfa:	80 91 27 01 	lds	r24, 0x0127
     cfe:	83 30       	cpi	r24, 0x03	; 3
     d00:	09 f4       	brne	.+2      	; 0xd04 <HID_Device_ProcessControlRequest+0x52>
     d02:	9a c0       	rjmp	.+308    	; 0xe38 <HID_Device_ProcessControlRequest+0x186>
     d04:	84 30       	cpi	r24, 0x04	; 4
     d06:	30 f4       	brcc	.+12     	; 0xd14 <HID_Device_ProcessControlRequest+0x62>
     d08:	81 30       	cpi	r24, 0x01	; 1
     d0a:	71 f0       	breq	.+28     	; 0xd28 <HID_Device_ProcessControlRequest+0x76>
     d0c:	82 30       	cpi	r24, 0x02	; 2
     d0e:	09 f0       	breq	.+2      	; 0xd12 <HID_Device_ProcessControlRequest+0x60>
     d10:	ec c0       	rjmp	.+472    	; 0xeea <HID_Device_ProcessControlRequest+0x238>
     d12:	cf c0       	rjmp	.+414    	; 0xeb2 <HID_Device_ProcessControlRequest+0x200>
     d14:	8a 30       	cpi	r24, 0x0A	; 10
     d16:	09 f4       	brne	.+2      	; 0xd1a <HID_Device_ProcessControlRequest+0x68>
     d18:	b4 c0       	rjmp	.+360    	; 0xe82 <HID_Device_ProcessControlRequest+0x1d0>
     d1a:	8b 30       	cpi	r24, 0x0B	; 11
     d1c:	09 f4       	brne	.+2      	; 0xd20 <HID_Device_ProcessControlRequest+0x6e>
     d1e:	9d c0       	rjmp	.+314    	; 0xe5a <HID_Device_ProcessControlRequest+0x1a8>
     d20:	89 30       	cpi	r24, 0x09	; 9
     d22:	09 f0       	breq	.+2      	; 0xd26 <HID_Device_ProcessControlRequest+0x74>
     d24:	e2 c0       	rjmp	.+452    	; 0xeea <HID_Device_ProcessControlRequest+0x238>
     d26:	4b c0       	rjmp	.+150    	; 0xdbe <HID_Device_ProcessControlRequest+0x10c>
	{
		case HID_REQ_GetReport:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
     d28:	80 91 26 01 	lds	r24, 0x0126
     d2c:	81 3a       	cpi	r24, 0xA1	; 161
     d2e:	09 f0       	breq	.+2      	; 0xd32 <HID_Device_ProcessControlRequest+0x80>
     d30:	dc c0       	rjmp	.+440    	; 0xeea <HID_Device_ProcessControlRequest+0x238>
     d32:	9d b6       	in	r9, 0x3d	; 61
     d34:	8e b6       	in	r8, 0x3e	; 62
			{
				uint16_t ReportSize = 0;
     d36:	1b 82       	std	Y+3, r1	; 0x03
     d38:	1a 82       	std	Y+2, r1	; 0x02
				uint8_t  ReportID   = (USB_ControlRequest.wValue & 0xFF);
     d3a:	80 91 28 01 	lds	r24, 0x0128
     d3e:	00 91 29 01 	lds	r16, 0x0129
     d42:	89 83       	std	Y+1, r24	; 0x01
				uint8_t  ReportType = (USB_ControlRequest.wValue >> 8) - 1;
				uint8_t  ReportData[HIDInterfaceInfo->Config.PrevReportINBufferSize];
     d44:	f7 01       	movw	r30, r14
     d46:	40 85       	ldd	r20, Z+8	; 0x08
     d48:	8d b7       	in	r24, 0x3d	; 61
     d4a:	9e b7       	in	r25, 0x3e	; 62
     d4c:	84 1b       	sub	r24, r20
     d4e:	91 09       	sbc	r25, r1
     d50:	0f b6       	in	r0, 0x3f	; 63
     d52:	f8 94       	cli
     d54:	9e bf       	out	0x3e, r25	; 62
     d56:	0f be       	out	0x3f, r0	; 63
     d58:	8d bf       	out	0x3d, r24	; 61
     d5a:	cd b6       	in	r12, 0x3d	; 61
     d5c:	de b6       	in	r13, 0x3e	; 62
     d5e:	08 94       	sec
     d60:	c1 1c       	adc	r12, r1
     d62:	d1 1c       	adc	r13, r1

				memset(ReportData, 0, sizeof(ReportData));
     d64:	bc 2c       	mov	r11, r12
     d66:	ad 2c       	mov	r10, r13
     d68:	c6 01       	movw	r24, r12
     d6a:	60 e0       	ldi	r22, 0x00	; 0
     d6c:	70 e0       	ldi	r23, 0x00	; 0
     d6e:	50 e0       	ldi	r21, 0x00	; 0
     d70:	c7 d1       	rcall	.+910    	; 0x1100 <memset>
     d72:	40 2f       	mov	r20, r16
		case HID_REQ_GetReport:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
			{
				uint16_t ReportSize = 0;
				uint8_t  ReportID   = (USB_ControlRequest.wValue & 0xFF);
				uint8_t  ReportType = (USB_ControlRequest.wValue >> 8) - 1;
     d74:	41 50       	subi	r20, 0x01	; 1
     d76:	c7 01       	movw	r24, r14
				uint8_t  ReportData[HIDInterfaceInfo->Config.PrevReportINBufferSize];

				memset(ReportData, 0, sizeof(ReportData));

				CALLBACK_HID_Device_CreateHIDReport(HIDInterfaceInfo, &ReportID, ReportType, ReportData, &ReportSize);
     d78:	be 01       	movw	r22, r28
     d7a:	6f 5f       	subi	r22, 0xFF	; 255
     d7c:	7f 4f       	sbci	r23, 0xFF	; 255
     d7e:	96 01       	movw	r18, r12
     d80:	8e 01       	movw	r16, r28
     d82:	0e 5f       	subi	r16, 0xFE	; 254
     d84:	1f 4f       	sbci	r17, 0xFF	; 255
     d86:	55 da       	rcall	.-2902   	; 0x232 <CALLBACK_HID_Device_CreateHIDReport>
     d88:	f7 01       	movw	r30, r14
     d8a:	86 81       	ldd	r24, Z+6	; 0x06

				if (HIDInterfaceInfo->Config.PrevReportINBuffer != NULL)
     d8c:	97 81       	ldd	r25, Z+7	; 0x07
     d8e:	00 97       	sbiw	r24, 0x00	; 0
     d90:	21 f0       	breq	.+8      	; 0xd9a <HID_Device_ProcessControlRequest+0xe8>
     d92:	40 85       	ldd	r20, Z+8	; 0x08
     d94:	b6 01       	movw	r22, r12
				{
					memcpy(HIDInterfaceInfo->Config.PrevReportINBuffer, ReportData,
     d96:	50 e0       	ldi	r21, 0x00	; 0
     d98:	aa d1       	rcall	.+852    	; 0x10ee <memcpy>
     d9a:	10 92 e9 00 	sts	0x00E9, r1
     d9e:	80 91 e8 00 	lds	r24, 0x00E8
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     da2:	87 7f       	andi	r24, 0xF7	; 247
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     da4:	80 93 e8 00 	sts	0x00E8, r24
     da8:	6a 81       	ldd	r22, Y+2	; 0x02
     daa:	7b 81       	ldd	r23, Y+3	; 0x03
     dac:	8b 2d       	mov	r24, r11
				}

				Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

				Endpoint_ClearSETUP();
				Endpoint_Write_Control_Stream_LE(ReportData, ReportSize);
     dae:	9a 2d       	mov	r25, r10
     db0:	21 db       	rcall	.-2494   	; 0x3f4 <Endpoint_Write_Control_Stream_LE>
     db2:	80 91 e8 00 	lds	r24, 0x00E8
     db6:	8b 77       	andi	r24, 0x7B	; 123
     db8:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     dbc:	3a c0       	rjmp	.+116    	; 0xe32 <HID_Device_ProcessControlRequest+0x180>
     dbe:	80 91 26 01 	lds	r24, 0x0126
     dc2:	81 32       	cpi	r24, 0x21	; 33
     dc4:	09 f0       	breq	.+2      	; 0xdc8 <HID_Device_ProcessControlRequest+0x116>
				Endpoint_ClearOUT();
			}

			break;
		case HID_REQ_SetReport:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
     dc6:	91 c0       	rjmp	.+290    	; 0xeea <HID_Device_ProcessControlRequest+0x238>
     dc8:	9d b6       	in	r9, 0x3d	; 61
     dca:	8e b6       	in	r8, 0x3e	; 62
     dcc:	00 91 2c 01 	lds	r16, 0x012C
     dd0:	10 91 2d 01 	lds	r17, 0x012D
			{
				uint16_t ReportSize = USB_ControlRequest.wLength;
     dd4:	c0 90 28 01 	lds	r12, 0x0128
     dd8:	d0 90 29 01 	lds	r13, 0x0129
				uint8_t  ReportID   = (USB_ControlRequest.wValue & 0xFF);
     ddc:	8d b7       	in	r24, 0x3d	; 61
     dde:	9e b7       	in	r25, 0x3e	; 62
     de0:	80 1b       	sub	r24, r16
     de2:	91 0b       	sbc	r25, r17
				uint8_t  ReportType = (USB_ControlRequest.wValue >> 8) - 1;
				uint8_t  ReportData[ReportSize];
     de4:	0f b6       	in	r0, 0x3f	; 63
     de6:	f8 94       	cli
     de8:	9e bf       	out	0x3e, r25	; 62
     dea:	0f be       	out	0x3f, r0	; 63
     dec:	8d bf       	out	0x3d, r24	; 61
     dee:	ad b6       	in	r10, 0x3d	; 61
     df0:	be b6       	in	r11, 0x3e	; 62
     df2:	08 94       	sec
     df4:	a1 1c       	adc	r10, r1
     df6:	b1 1c       	adc	r11, r1
     df8:	80 91 e8 00 	lds	r24, 0x00E8
     dfc:	87 7f       	andi	r24, 0xF7	; 247
     dfe:	80 93 e8 00 	sts	0x00E8, r24
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     e02:	c5 01       	movw	r24, r10
     e04:	b8 01       	movw	r22, r16
     e06:	4f db       	rcall	.-2402   	; 0x4a6 <Endpoint_Read_Control_Stream_LE>
     e08:	80 91 e8 00 	lds	r24, 0x00E8

				Endpoint_ClearSETUP();
				Endpoint_Read_Control_Stream_LE(ReportData, ReportSize);
     e0c:	8e 77       	andi	r24, 0x7E	; 126
     e0e:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     e12:	81 e0       	ldi	r24, 0x01	; 1
     e14:	90 e0       	ldi	r25, 0x00	; 0
     e16:	cc 20       	and	r12, r12
     e18:	11 f4       	brne	.+4      	; 0xe1e <HID_Device_ProcessControlRequest+0x16c>
     e1a:	80 e0       	ldi	r24, 0x00	; 0
				Endpoint_ClearIN();

				CALLBACK_HID_Device_ProcessHIDReport(HIDInterfaceInfo, ReportID, ReportType,
     e1c:	90 e0       	ldi	r25, 0x00	; 0
     e1e:	4d 2d       	mov	r20, r13
     e20:	41 50       	subi	r20, 0x01	; 1
     e22:	95 01       	movw	r18, r10
     e24:	28 0f       	add	r18, r24
     e26:	39 1f       	adc	r19, r25
		case HID_REQ_SetReport:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
			{
				uint16_t ReportSize = USB_ControlRequest.wLength;
				uint8_t  ReportID   = (USB_ControlRequest.wValue & 0xFF);
				uint8_t  ReportType = (USB_ControlRequest.wValue >> 8) - 1;
     e28:	08 1b       	sub	r16, r24
     e2a:	19 0b       	sbc	r17, r25

				Endpoint_ClearSETUP();
				Endpoint_Read_Control_Stream_LE(ReportData, ReportSize);
				Endpoint_ClearIN();

				CALLBACK_HID_Device_ProcessHIDReport(HIDInterfaceInfo, ReportID, ReportType,
     e2c:	c7 01       	movw	r24, r14
     e2e:	6c 2d       	mov	r22, r12
     e30:	53 da       	rcall	.-2906   	; 0x2d8 <CALLBACK_HID_Device_ProcessHIDReport>
     e32:	9d be       	out	0x3d, r9	; 61
     e34:	8e be       	out	0x3e, r8	; 62
     e36:	59 c0       	rjmp	.+178    	; 0xeea <HID_Device_ProcessControlRequest+0x238>
     e38:	80 91 26 01 	lds	r24, 0x0126
     e3c:	81 3a       	cpi	r24, 0xA1	; 161
     e3e:	09 f0       	breq	.+2      	; 0xe42 <HID_Device_ProcessControlRequest+0x190>
     e40:	54 c0       	rjmp	.+168    	; 0xeea <HID_Device_ProcessControlRequest+0x238>
     e42:	80 91 e8 00 	lds	r24, 0x00E8
				                                     &ReportData[ReportID ? 1 : 0], ReportSize - (ReportID ? 1 : 0));
			}

			break;
		case HID_REQ_GetProtocol:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
     e46:	87 7f       	andi	r24, 0xF7	; 247
     e48:	80 93 e8 00 	sts	0x00E8, r24
     e4c:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     e50:	80 ff       	sbrs	r24, 0
     e52:	fc cf       	rjmp	.-8      	; 0xe4c <HID_Device_ProcessControlRequest+0x19a>
     e54:	f7 01       	movw	r30, r14
     e56:	81 85       	ldd	r24, Z+9	; 0x09
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     e58:	40 c0       	rjmp	.+128    	; 0xeda <HID_Device_ProcessControlRequest+0x228>
     e5a:	80 91 26 01 	lds	r24, 0x0126
			{
				Endpoint_ClearSETUP();
				while (!(Endpoint_IsINReady()));
     e5e:	81 32       	cpi	r24, 0x21	; 33
				Endpoint_Write_8(HIDInterfaceInfo->State.UsingReportProtocol);
     e60:	09 f0       	breq	.+2      	; 0xe64 <HID_Device_ProcessControlRequest+0x1b2>
     e62:	43 c0       	rjmp	.+134    	; 0xeea <HID_Device_ProcessControlRequest+0x238>
     e64:	80 91 e8 00 	lds	r24, 0x00E8
				Endpoint_ClearStatusStage();
			}

			break;
		case HID_REQ_SetProtocol:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
     e68:	87 7f       	andi	r24, 0xF7	; 247
     e6a:	80 93 e8 00 	sts	0x00E8, r24
     e6e:	2e dc       	rcall	.-1956   	; 0x6cc <Endpoint_ClearStatusStage>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     e70:	90 91 28 01 	lds	r25, 0x0128
     e74:	81 e0       	ldi	r24, 0x01	; 1
     e76:	99 23       	and	r25, r25
     e78:	09 f4       	brne	.+2      	; 0xe7c <HID_Device_ProcessControlRequest+0x1ca>
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
     e7a:	80 e0       	ldi	r24, 0x00	; 0
     e7c:	f7 01       	movw	r30, r14

				HIDInterfaceInfo->State.UsingReportProtocol = ((USB_ControlRequest.wValue & 0xFF) != 0x00);
     e7e:	81 87       	std	Z+9, r24	; 0x09
     e80:	34 c0       	rjmp	.+104    	; 0xeea <HID_Device_ProcessControlRequest+0x238>
     e82:	80 91 26 01 	lds	r24, 0x0126
     e86:	81 32       	cpi	r24, 0x21	; 33
     e88:	81 f5       	brne	.+96     	; 0xeea <HID_Device_ProcessControlRequest+0x238>
     e8a:	80 91 e8 00 	lds	r24, 0x00E8
     e8e:	87 7f       	andi	r24, 0xF7	; 247
			}

			break;
		case HID_REQ_SetIdle:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
     e90:	80 93 e8 00 	sts	0x00E8, r24
     e94:	1b dc       	rcall	.-1994   	; 0x6cc <Endpoint_ClearStatusStage>
     e96:	80 91 28 01 	lds	r24, 0x0128
     e9a:	90 91 29 01 	lds	r25, 0x0129
     e9e:	80 70       	andi	r24, 0x00	; 0
     ea0:	36 e0       	ldi	r19, 0x06	; 6
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
     ea2:	96 95       	lsr	r25
     ea4:	87 95       	ror	r24

				HIDInterfaceInfo->State.IdleCount = ((USB_ControlRequest.wValue & 0xFF00) >> 6);
     ea6:	3a 95       	dec	r19
     ea8:	e1 f7       	brne	.-8      	; 0xea2 <HID_Device_ProcessControlRequest+0x1f0>
     eaa:	f7 01       	movw	r30, r14
     eac:	95 87       	std	Z+13, r25	; 0x0d
     eae:	84 87       	std	Z+12, r24	; 0x0c
     eb0:	1c c0       	rjmp	.+56     	; 0xeea <HID_Device_ProcessControlRequest+0x238>
     eb2:	80 91 26 01 	lds	r24, 0x0126
     eb6:	81 3a       	cpi	r24, 0xA1	; 161
     eb8:	c1 f4       	brne	.+48     	; 0xeea <HID_Device_ProcessControlRequest+0x238>
     eba:	80 91 e8 00 	lds	r24, 0x00E8
     ebe:	87 7f       	andi	r24, 0xF7	; 247
     ec0:	80 93 e8 00 	sts	0x00E8, r24
			}

			break;
		case HID_REQ_GetIdle:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
     ec4:	80 91 e8 00 	lds	r24, 0x00E8
     ec8:	80 ff       	sbrs	r24, 0
     eca:	fc cf       	rjmp	.-8      	; 0xec4 <HID_Device_ProcessControlRequest+0x212>
     ecc:	f7 01       	movw	r30, r14
     ece:	84 85       	ldd	r24, Z+12	; 0x0c
     ed0:	95 85       	ldd	r25, Z+13	; 0x0d
     ed2:	96 95       	lsr	r25
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     ed4:	87 95       	ror	r24
     ed6:	96 95       	lsr	r25
			{
				Endpoint_ClearSETUP();
				while (!(Endpoint_IsINReady()));
     ed8:	87 95       	ror	r24
     eda:	80 93 f1 00 	sts	0x00F1, r24
				Endpoint_Write_8(HIDInterfaceInfo->State.IdleCount >> 2);
     ede:	80 91 e8 00 	lds	r24, 0x00E8
     ee2:	8e 77       	andi	r24, 0x7E	; 126
     ee4:	80 93 e8 00 	sts	0x00E8, r24
     ee8:	f1 db       	rcall	.-2078   	; 0x6cc <Endpoint_ClearStatusStage>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     eea:	0f b6       	in	r0, 0x3f	; 63
     eec:	f8 94       	cli
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     eee:	7e be       	out	0x3e, r7	; 62
     ef0:	0f be       	out	0x3f, r0	; 63
     ef2:	6d be       	out	0x3d, r6	; 61
     ef4:	0f 90       	pop	r0
     ef6:	0f 90       	pop	r0
				Endpoint_ClearIN();
				Endpoint_ClearStatusStage();
     ef8:	0f 90       	pop	r0
     efa:	df 91       	pop	r29
			}

			break;
	}
}
     efc:	cf 91       	pop	r28
     efe:	1f 91       	pop	r17
     f00:	0f 91       	pop	r16
     f02:	ff 90       	pop	r15
     f04:	ef 90       	pop	r14
     f06:	df 90       	pop	r13
     f08:	cf 90       	pop	r12
     f0a:	bf 90       	pop	r11
     f0c:	af 90       	pop	r10
     f0e:	9f 90       	pop	r9
     f10:	8f 90       	pop	r8
     f12:	7f 90       	pop	r7
     f14:	6f 90       	pop	r6
     f16:	08 95       	ret

00000f18 <HID_Device_ConfigureEndpoints>:
     f18:	cf 93       	push	r28
     f1a:	df 93       	push	r29
     f1c:	fc 01       	movw	r30, r24
     f1e:	09 96       	adiw	r24, 0x09	; 9
     f20:	dc 01       	movw	r26, r24
     f22:	87 e0       	ldi	r24, 0x07	; 7
     f24:	ed 01       	movw	r28, r26
     f26:	19 92       	st	Y+, r1
     f28:	8a 95       	dec	r24

bool HID_Device_ConfigureEndpoints(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
	memset(&HIDInterfaceInfo->State, 0x00, sizeof(HIDInterfaceInfo->State));
     f2a:	e9 f7       	brne	.-6      	; 0xf26 <HID_Device_ConfigureEndpoints+0xe>
	HIDInterfaceInfo->State.UsingReportProtocol = true;
     f2c:	81 e0       	ldi	r24, 0x01	; 1
     f2e:	81 87       	std	Z+9, r24	; 0x09
	HIDInterfaceInfo->State.IdleCount           = 500;
     f30:	84 ef       	ldi	r24, 0xF4	; 244
     f32:	91 e0       	ldi	r25, 0x01	; 1
     f34:	95 87       	std	Z+13, r25	; 0x0d
     f36:	84 87       	std	Z+12, r24	; 0x0c

	HIDInterfaceInfo->Config.ReportINEndpoint.Type = EP_TYPE_INTERRUPT;
     f38:	83 e0       	ldi	r24, 0x03	; 3
     f3a:	84 83       	std	Z+4, r24	; 0x04

	if (!(Endpoint_ConfigureEndpointTable(&HIDInterfaceInfo->Config.ReportINEndpoint, 1)))
     f3c:	cf 01       	movw	r24, r30
     f3e:	01 96       	adiw	r24, 0x01	; 1
     f40:	61 e0       	ldi	r22, 0x01	; 1
     f42:	88 db       	rcall	.-2288   	; 0x654 <Endpoint_ConfigureEndpointTable>
     f44:	df 91       	pop	r29
	  return false;	
	
	return true;
}
     f46:	cf 91       	pop	r28
     f48:	08 95       	ret

00000f4a <HID_Device_USBTask>:
     f4a:	4f 92       	push	r4

void HID_Device_USBTask(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
     f4c:	5f 92       	push	r5
     f4e:	6f 92       	push	r6
     f50:	7f 92       	push	r7
     f52:	8f 92       	push	r8
     f54:	9f 92       	push	r9
     f56:	af 92       	push	r10
     f58:	bf 92       	push	r11
     f5a:	cf 92       	push	r12
     f5c:	df 92       	push	r13
     f5e:	ef 92       	push	r14
     f60:	ff 92       	push	r15
     f62:	0f 93       	push	r16
     f64:	1f 93       	push	r17
     f66:	cf 93       	push	r28
     f68:	df 93       	push	r29
     f6a:	00 d0       	rcall	.+0      	; 0xf6c <HID_Device_USBTask+0x22>
     f6c:	0f 92       	push	r0
     f6e:	cd b7       	in	r28, 0x3d	; 61
     f70:	de b7       	in	r29, 0x3e	; 62
     f72:	7c 01       	movw	r14, r24
			Endpoint_ClearIN();
		}
		
		HIDInterfaceInfo->State.PrevFrameNum = USB_Device_GetFrameNumber();
	}
}
     f74:	4d b6       	in	r4, 0x3d	; 61
     f76:	5e b6       	in	r5, 0x3e	; 62
	return true;
}

void HID_Device_USBTask(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
	if (USB_DeviceState != DEVICE_STATE_Configured)
     f78:	8e b3       	in	r24, 0x1e	; 30
     f7a:	84 30       	cpi	r24, 0x04	; 4
     f7c:	09 f0       	breq	.+2      	; 0xf80 <HID_Device_USBTask+0x36>
     f7e:	91 c0       	rjmp	.+290    	; 0x10a2 <HID_Device_USBTask+0x158>
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
     f80:	80 91 e4 00 	lds	r24, 0x00E4
     f84:	90 91 e5 00 	lds	r25, 0x00E5
	  return;

	if (HIDInterfaceInfo->State.PrevFrameNum == USB_Device_GetFrameNumber())
     f88:	f7 01       	movw	r30, r14
     f8a:	22 85       	ldd	r18, Z+10	; 0x0a
     f8c:	33 85       	ldd	r19, Z+11	; 0x0b
     f8e:	28 17       	cp	r18, r24
     f90:	39 07       	cpc	r19, r25
     f92:	09 f4       	brne	.+2      	; 0xf96 <HID_Device_USBTask+0x4c>
     f94:	86 c0       	rjmp	.+268    	; 0x10a2 <HID_Device_USBTask+0x158>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     f96:	81 81       	ldd	r24, Z+1	; 0x01
     f98:	8f 70       	andi	r24, 0x0F	; 15
     f9a:	80 93 e9 00 	sts	0x00E9, r24
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
     f9e:	80 91 e8 00 	lds	r24, 0x00E8
	  return;
	  
	Endpoint_SelectEndpoint(HIDInterfaceInfo->Config.ReportINEndpoint.Address);

	if (Endpoint_IsReadWriteAllowed())
     fa2:	85 ff       	sbrs	r24, 5
     fa4:	7e c0       	rjmp	.+252    	; 0x10a2 <HID_Device_USBTask+0x158>
     fa6:	7d b6       	in	r7, 0x3d	; 61
     fa8:	6e b6       	in	r6, 0x3e	; 62
	{
		uint8_t  ReportINData[HIDInterfaceInfo->Config.PrevReportINBufferSize];
     faa:	40 85       	ldd	r20, Z+8	; 0x08
     fac:	8d b7       	in	r24, 0x3d	; 61
     fae:	9e b7       	in	r25, 0x3e	; 62
     fb0:	84 1b       	sub	r24, r20
     fb2:	91 09       	sbc	r25, r1
     fb4:	0f b6       	in	r0, 0x3f	; 63
     fb6:	f8 94       	cli
     fb8:	9e bf       	out	0x3e, r25	; 62
     fba:	0f be       	out	0x3f, r0	; 63
     fbc:	8d bf       	out	0x3d, r24	; 61
     fbe:	0d b7       	in	r16, 0x3d	; 61
     fc0:	1e b7       	in	r17, 0x3e	; 62
     fc2:	0f 5f       	subi	r16, 0xFF	; 255
     fc4:	1f 4f       	sbci	r17, 0xFF	; 255
		uint8_t  ReportID     = 0;
     fc6:	19 82       	std	Y+1, r1	; 0x01
		uint16_t ReportINSize = 0;
     fc8:	1b 82       	std	Y+3, r1	; 0x03
     fca:	1a 82       	std	Y+2, r1	; 0x02

		memset(ReportINData, 0, sizeof(ReportINData));
     fcc:	b0 2e       	mov	r11, r16
     fce:	a1 2e       	mov	r10, r17
     fd0:	c8 01       	movw	r24, r16
     fd2:	60 e0       	ldi	r22, 0x00	; 0
     fd4:	70 e0       	ldi	r23, 0x00	; 0
     fd6:	50 e0       	ldi	r21, 0x00	; 0
     fd8:	93 d0       	rcall	.+294    	; 0x1100 <memset>
     fda:	c7 01       	movw	r24, r14

		bool ForceSend         = CALLBACK_HID_Device_CreateHIDReport(HIDInterfaceInfo, &ReportID, HID_REPORT_ITEM_In,
     fdc:	be 01       	movw	r22, r28
     fde:	6f 5f       	subi	r22, 0xFF	; 255
     fe0:	7f 4f       	sbci	r23, 0xFF	; 255
     fe2:	40 e0       	ldi	r20, 0x00	; 0
     fe4:	98 01       	movw	r18, r16
     fe6:	8e 01       	movw	r16, r28
     fe8:	0e 5f       	subi	r16, 0xFE	; 254
     fea:	1f 4f       	sbci	r17, 0xFF	; 255
     fec:	22 d9       	rcall	.-3516   	; 0x232 <CALLBACK_HID_Device_CreateHIDReport>
     fee:	18 2f       	mov	r17, r24
     ff0:	f7 01       	movw	r30, r14
     ff2:	84 85       	ldd	r24, Z+12	; 0x0c
		                                                             ReportINData, &ReportINSize);
		bool StatesChanged     = false;
		bool IdlePeriodElapsed = (HIDInterfaceInfo->State.IdleCount && !(HIDInterfaceInfo->State.IdleMSRemaining));
     ff4:	95 85       	ldd	r25, Z+13	; 0x0d
     ff6:	00 97       	sbiw	r24, 0x00	; 0
     ff8:	59 f0       	breq	.+22     	; 0x1010 <HID_Device_USBTask+0xc6>
     ffa:	81 e0       	ldi	r24, 0x01	; 1
     ffc:	90 e0       	ldi	r25, 0x00	; 0
	  return false;	
	
	return true;
}

void HID_Device_USBTask(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
     ffe:	26 85       	ldd	r18, Z+14	; 0x0e
    1000:	37 85       	ldd	r19, Z+15	; 0x0f
    1002:	21 15       	cp	r18, r1
    1004:	31 05       	cpc	r19, r1
    1006:	11 f0       	breq	.+4      	; 0x100c <HID_Device_USBTask+0xc2>
    1008:	80 e0       	ldi	r24, 0x00	; 0
    100a:	90 e0       	ldi	r25, 0x00	; 0
    100c:	4c 01       	movw	r8, r24
    100e:	02 c0       	rjmp	.+4      	; 0x1014 <HID_Device_USBTask+0xca>
		memset(ReportINData, 0, sizeof(ReportINData));

		bool ForceSend         = CALLBACK_HID_Device_CreateHIDReport(HIDInterfaceInfo, &ReportID, HID_REPORT_ITEM_In,
		                                                             ReportINData, &ReportINSize);
		bool StatesChanged     = false;
		bool IdlePeriodElapsed = (HIDInterfaceInfo->State.IdleCount && !(HIDInterfaceInfo->State.IdleMSRemaining));
    1010:	88 24       	eor	r8, r8
    1012:	99 24       	eor	r9, r9
    1014:	f7 01       	movw	r30, r14
    1016:	c6 80       	ldd	r12, Z+6	; 0x06

		if (HIDInterfaceInfo->Config.PrevReportINBuffer != NULL)
    1018:	d7 80       	ldd	r13, Z+7	; 0x07
    101a:	c1 14       	cp	r12, r1
    101c:	d1 04       	cpc	r13, r1
    101e:	91 f0       	breq	.+36     	; 0x1044 <HID_Device_USBTask+0xfa>
    1020:	4a 81       	ldd	r20, Y+2	; 0x02
    1022:	5b 81       	ldd	r21, Y+3	; 0x03
		{
			StatesChanged = (memcmp(ReportINData, HIDInterfaceInfo->Config.PrevReportINBuffer, ReportINSize) != 0);
    1024:	8b 2d       	mov	r24, r11
    1026:	9a 2d       	mov	r25, r10
    1028:	b6 01       	movw	r22, r12
    102a:	54 d0       	rcall	.+168    	; 0x10d4 <memcmp>
    102c:	01 e0       	ldi	r16, 0x01	; 1
    102e:	00 97       	sbiw	r24, 0x00	; 0
    1030:	09 f4       	brne	.+2      	; 0x1034 <HID_Device_USBTask+0xea>
    1032:	00 e0       	ldi	r16, 0x00	; 0
    1034:	f7 01       	movw	r30, r14
    1036:	40 85       	ldd	r20, Z+8	; 0x08
    1038:	c6 01       	movw	r24, r12
			memcpy(HIDInterfaceInfo->Config.PrevReportINBuffer, ReportINData, HIDInterfaceInfo->Config.PrevReportINBufferSize);
    103a:	6b 2d       	mov	r22, r11
    103c:	7a 2d       	mov	r23, r10
    103e:	50 e0       	ldi	r21, 0x00	; 0
    1040:	56 d0       	rcall	.+172    	; 0x10ee <memcpy>
    1042:	01 c0       	rjmp	.+2      	; 0x1046 <HID_Device_USBTask+0xfc>
    1044:	00 e0       	ldi	r16, 0x00	; 0
    1046:	8a 81       	ldd	r24, Y+2	; 0x02
    1048:	9b 81       	ldd	r25, Y+3	; 0x03
    104a:	00 97       	sbiw	r24, 0x00	; 0

		memset(ReportINData, 0, sizeof(ReportINData));

		bool ForceSend         = CALLBACK_HID_Device_CreateHIDReport(HIDInterfaceInfo, &ReportID, HID_REPORT_ITEM_In,
		                                                             ReportINData, &ReportINSize);
		bool StatesChanged     = false;
    104c:	09 f1       	breq	.+66     	; 0x1090 <HID_Device_USBTask+0x146>
		{
			StatesChanged = (memcmp(ReportINData, HIDInterfaceInfo->Config.PrevReportINBuffer, ReportINSize) != 0);
			memcpy(HIDInterfaceInfo->Config.PrevReportINBuffer, ReportINData, HIDInterfaceInfo->Config.PrevReportINBufferSize);
		}

		if (ReportINSize && (ForceSend || StatesChanged || IdlePeriodElapsed))
    104e:	11 23       	and	r17, r17
    1050:	29 f4       	brne	.+10     	; 0x105c <HID_Device_USBTask+0x112>
    1052:	00 23       	and	r16, r16
    1054:	19 f4       	brne	.+6      	; 0x105c <HID_Device_USBTask+0x112>
    1056:	81 14       	cp	r8, r1
    1058:	91 04       	cpc	r9, r1
    105a:	d1 f0       	breq	.+52     	; 0x1090 <HID_Device_USBTask+0x146>
    105c:	f7 01       	movw	r30, r14
    105e:	84 85       	ldd	r24, Z+12	; 0x0c
    1060:	95 85       	ldd	r25, Z+13	; 0x0d
    1062:	97 87       	std	Z+15, r25	; 0x0f
		{
			HIDInterfaceInfo->State.IdleMSRemaining = HIDInterfaceInfo->State.IdleCount;
    1064:	86 87       	std	Z+14, r24	; 0x0e
    1066:	81 81       	ldd	r24, Z+1	; 0x01
    1068:	8f 70       	andi	r24, 0x0F	; 15
    106a:	80 93 e9 00 	sts	0x00E9, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    106e:	89 81       	ldd	r24, Y+1	; 0x01
    1070:	88 23       	and	r24, r24
    1072:	11 f0       	breq	.+4      	; 0x1078 <HID_Device_USBTask+0x12e>
    1074:	80 93 f1 00 	sts	0x00F1, r24

			Endpoint_SelectEndpoint(HIDInterfaceInfo->Config.ReportINEndpoint.Address);

			if (ReportID)
    1078:	6a 81       	ldd	r22, Y+2	; 0x02
    107a:	7b 81       	ldd	r23, Y+3	; 0x03
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    107c:	8b 2d       	mov	r24, r11
    107e:	9a 2d       	mov	r25, r10
			  Endpoint_Write_8(ReportID);

			Endpoint_Write_Stream_LE(ReportINData, ReportINSize, NULL);
    1080:	40 e0       	ldi	r20, 0x00	; 0
    1082:	50 e0       	ldi	r21, 0x00	; 0
    1084:	67 d9       	rcall	.-3378   	; 0x354 <Endpoint_Write_Stream_LE>
    1086:	80 91 e8 00 	lds	r24, 0x00E8
    108a:	8e 77       	andi	r24, 0x7E	; 126
    108c:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1090:	80 91 e4 00 	lds	r24, 0x00E4
    1094:	90 91 e5 00 	lds	r25, 0x00E5
    1098:	f7 01       	movw	r30, r14
    109a:	93 87       	std	Z+11, r25	; 0x0b
    109c:	82 87       	std	Z+10, r24	; 0x0a
    109e:	7d be       	out	0x3d, r7	; 61
    10a0:	6e be       	out	0x3e, r6	; 62

			Endpoint_ClearIN();
		}
		
		HIDInterfaceInfo->State.PrevFrameNum = USB_Device_GetFrameNumber();
    10a2:	0f b6       	in	r0, 0x3f	; 63
    10a4:	f8 94       	cli
    10a6:	5e be       	out	0x3e, r5	; 62
    10a8:	0f be       	out	0x3f, r0	; 63
    10aa:	4d be       	out	0x3d, r4	; 61
	}
}
    10ac:	0f 90       	pop	r0
    10ae:	0f 90       	pop	r0
    10b0:	0f 90       	pop	r0
    10b2:	df 91       	pop	r29
    10b4:	cf 91       	pop	r28
    10b6:	1f 91       	pop	r17
    10b8:	0f 91       	pop	r16
    10ba:	ff 90       	pop	r15
    10bc:	ef 90       	pop	r14
    10be:	df 90       	pop	r13
    10c0:	cf 90       	pop	r12
    10c2:	bf 90       	pop	r11
    10c4:	af 90       	pop	r10
    10c6:	9f 90       	pop	r9
    10c8:	8f 90       	pop	r8
    10ca:	7f 90       	pop	r7
    10cc:	6f 90       	pop	r6
    10ce:	5f 90       	pop	r5
    10d0:	4f 90       	pop	r4
    10d2:	08 95       	ret

000010d4 <memcmp>:
    10d4:	fb 01       	movw	r30, r22
    10d6:	dc 01       	movw	r26, r24
    10d8:	04 c0       	rjmp	.+8      	; 0x10e2 <memcmp+0xe>
    10da:	8d 91       	ld	r24, X+
    10dc:	01 90       	ld	r0, Z+
    10de:	80 19       	sub	r24, r0
    10e0:	21 f4       	brne	.+8      	; 0x10ea <memcmp+0x16>
    10e2:	41 50       	subi	r20, 0x01	; 1
    10e4:	50 40       	sbci	r21, 0x00	; 0
    10e6:	c8 f7       	brcc	.-14     	; 0x10da <memcmp+0x6>
    10e8:	88 1b       	sub	r24, r24
    10ea:	99 0b       	sbc	r25, r25
    10ec:	08 95       	ret

000010ee <memcpy>:
    10ee:	fb 01       	movw	r30, r22
    10f0:	dc 01       	movw	r26, r24
    10f2:	02 c0       	rjmp	.+4      	; 0x10f8 <memcpy+0xa>
    10f4:	01 90       	ld	r0, Z+
    10f6:	0d 92       	st	X+, r0
    10f8:	41 50       	subi	r20, 0x01	; 1
    10fa:	50 40       	sbci	r21, 0x00	; 0
    10fc:	d8 f7       	brcc	.-10     	; 0x10f4 <memcpy+0x6>
    10fe:	08 95       	ret

00001100 <memset>:
    1100:	dc 01       	movw	r26, r24
    1102:	01 c0       	rjmp	.+2      	; 0x1106 <memset+0x6>
    1104:	6d 93       	st	X+, r22
    1106:	41 50       	subi	r20, 0x01	; 1
    1108:	50 40       	sbci	r21, 0x00	; 0
    110a:	e0 f7       	brcc	.-8      	; 0x1104 <memset+0x4>
    110c:	08 95       	ret

0000110e <_exit>:
    110e:	f8 94       	cli

00001110 <__stop_program>:
    1110:	ff cf       	rjmp	.-2      	; 0x1110 <__stop_program>
