
AVRISP-MKII.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000a2  00800100  00002740  000027f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002740  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000013  008001a2  008001a2  00002896  2**0
                  ALLOC
  3 .eeprom       00000002  00810000  00810000  00002896  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .stab         00000870  00000000  00000000  00002898  2**2
                  CONTENTS, READONLY, DEBUGGING
  5 .stabstr      0000013a  00000000  00000000  00003108  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_aranges 00000620  00000000  00000000  00003248  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00007c07  00000000  00000000  00003868  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000020fd  00000000  00000000  0000b46f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00003a34  00000000  00000000  0000d56c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00001130  00000000  00000000  00010fa0  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00002f5a  00000000  00000000  000120d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000056d6  00000000  00000000  0001502a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000868  00000000  00000000  0001a700  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	f9 c0       	rjmp	.+498    	; 0x1f4 <__ctors_end>
       2:	00 00       	nop
       4:	13 c1       	rjmp	.+550    	; 0x22c <__bad_interrupt>
       6:	00 00       	nop
       8:	11 c1       	rjmp	.+546    	; 0x22c <__bad_interrupt>
       a:	00 00       	nop
       c:	0f c1       	rjmp	.+542    	; 0x22c <__bad_interrupt>
       e:	00 00       	nop
      10:	0d c1       	rjmp	.+538    	; 0x22c <__bad_interrupt>
      12:	00 00       	nop
      14:	0b c1       	rjmp	.+534    	; 0x22c <__bad_interrupt>
      16:	00 00       	nop
      18:	09 c1       	rjmp	.+530    	; 0x22c <__bad_interrupt>
      1a:	00 00       	nop
      1c:	07 c1       	rjmp	.+526    	; 0x22c <__bad_interrupt>
      1e:	00 00       	nop
      20:	05 c1       	rjmp	.+522    	; 0x22c <__bad_interrupt>
      22:	00 00       	nop
      24:	03 c1       	rjmp	.+518    	; 0x22c <__bad_interrupt>
      26:	00 00       	nop
      28:	01 c1       	rjmp	.+514    	; 0x22c <__bad_interrupt>
      2a:	00 00       	nop
      2c:	0c 94 bc 11 	jmp	0x2378	; 0x2378 <__vector_11>
      30:	fd c0       	rjmp	.+506    	; 0x22c <__bad_interrupt>
      32:	00 00       	nop
      34:	fb c0       	rjmp	.+502    	; 0x22c <__bad_interrupt>
      36:	00 00       	nop
      38:	f9 c0       	rjmp	.+498    	; 0x22c <__bad_interrupt>
      3a:	00 00       	nop
      3c:	2b c7       	rjmp	.+3670   	; 0xe94 <__vector_15>
      3e:	00 00       	nop
      40:	f5 c0       	rjmp	.+490    	; 0x22c <__bad_interrupt>
      42:	00 00       	nop
      44:	f3 c0       	rjmp	.+486    	; 0x22c <__bad_interrupt>
      46:	00 00       	nop
      48:	f1 c0       	rjmp	.+482    	; 0x22c <__bad_interrupt>
      4a:	00 00       	nop
      4c:	84 c1       	rjmp	.+776    	; 0x356 <__vector_19>
      4e:	00 00       	nop
      50:	ed c0       	rjmp	.+474    	; 0x22c <__bad_interrupt>
      52:	00 00       	nop
      54:	eb c0       	rjmp	.+470    	; 0x22c <__bad_interrupt>
      56:	00 00       	nop
      58:	e9 c0       	rjmp	.+466    	; 0x22c <__bad_interrupt>
      5a:	00 00       	nop
      5c:	e7 c0       	rjmp	.+462    	; 0x22c <__bad_interrupt>
      5e:	00 00       	nop
      60:	e5 c0       	rjmp	.+458    	; 0x22c <__bad_interrupt>
      62:	00 00       	nop
      64:	e3 c0       	rjmp	.+454    	; 0x22c <__bad_interrupt>
      66:	00 00       	nop
      68:	e1 c0       	rjmp	.+450    	; 0x22c <__bad_interrupt>
      6a:	00 00       	nop
      6c:	df c0       	rjmp	.+446    	; 0x22c <__bad_interrupt>
      6e:	00 00       	nop
      70:	dd c0       	rjmp	.+442    	; 0x22c <__bad_interrupt>
      72:	00 00       	nop

00000074 <AVRISP_ProductString>:
      74:	18 03 41 00 56 00 52 00 49 00 53 00 50 00 20 00     ..A.V.R.I.S.P. .
      84:	6d 00 6b 00 49 00 49 00 00 00                       m.k.I.I...

0000008e <AVRISP_ManufacturerString>:
      8e:	0c 03 41 00 54 00 4d 00 45 00 4c 00 00 00           ..A.T.M.E.L...

0000009c <AVRISP_LanguageString>:
      9c:	04 03 09 04                                         ....

000000a0 <AVRISP_DeviceDescriptor>:
      a0:	12 01 10 01 ff 00 00 10 eb 03 04 21 00 02 01 02     ...........!....
      b0:	03 01                                               ..

000000b2 <SPIMaskFromSCKDuration>:
      b2:	40 00 41 01 42 43 03                                @.A.BC.

000000b9 <TimerCompareFromSCKDuration>:
      b9:	09 00 0a 00 0a 00 0b 00 0c 00 0d 00 0d 00 0e 00     ................
      c9:	0f 00 10 00 10 00 12 00 13 00 13 00 14 00 16 00     ................
      d9:	16 00 18 00 19 00 1a 00 1c 00 1d 00 1f 00 20 00     .............. .
      e9:	22 00 23 00 25 00 27 00 29 00 2b 00 2e 00 30 00     ".#.%.'.).+...0.
      f9:	32 00 34 00 37 00 3a 00 3d 00 40 00 43 00 46 00     2.4.7.:.=.@.C.F.
     109:	4a 00 4e 00 52 00 55 00 5a 00 5e 00 63 00 68 00     J.N.R.U.Z.^.c.h.
     119:	6d 00 73 00 78 00 7e 00 84 00 8b 00 91 00 99 00     m.s.x.~.........
     129:	a0 00 a9 00 b1 00 b9 00 c3 00 cc 00 d6 00 e1 00     ................
     139:	ec 00 f7 00 04 01 11 01 1e 01 2d 01 3b 01 4b 01     ..........-.;.K.
     149:	5b 01 6c 01 7d 01 91 01 a5 01 ba 01 cf 01 e6 01     [.l.}...........
     159:	fe 01 16 02 31 02 4c 02 6a 02 88 02 a8 02 ca 02     ....1.L.j.......
     169:	ed 02 11 03 38 03 60 03 8b 03 b8 03 e7 03 18 04     ....8.`.........
     179:	4b 04 81 04 b9 04 f5 04 34 05 75 05 b9 05 01 06     K.......4.u.....
     189:	4e 06 9d 06 ef 06 48 07 a3 07 04 08 65 08 d0 08     N.....H.....e...
     199:	40 09 b6 09 2b 0a ab 0a 30 0b c3 0b 51 0c ee 0c     @...+...0...Q...
     1a9:	8f 0d 40 0e f6 0e af 0f 68 10 47 11 14 12 f5 12     ..@.....h.G.....
     1b9:	ed 13 e2 14 f0 15 f9 16 1b 18 5c 19 91 1a e5 1b     ..........\.....
     1c9:	25 1d 83 1e 03 20 ab 21 30 23 32 25 0f 27 f1 28     %.... .!0#2%.'.(
     1d9:	f8 2a 1a 2d 49 2f a1 31 14 34 a1 36 45 39 17 3c     .*.-I/.1.4.6E9.<
     1e9:	1a 3f 34 42 60 45 df 48 70 4c 00                    .?4B`E.HpL.

000001f4 <__ctors_end>:
     1f4:	11 24       	eor	r1, r1
     1f6:	1f be       	out	0x3f, r1	; 63
     1f8:	cf ef       	ldi	r28, 0xFF	; 255
     1fa:	d2 e0       	ldi	r29, 0x02	; 2
     1fc:	de bf       	out	0x3e, r29	; 62
     1fe:	cd bf       	out	0x3d, r28	; 61

00000200 <__do_copy_data>:
     200:	11 e0       	ldi	r17, 0x01	; 1
     202:	a0 e0       	ldi	r26, 0x00	; 0
     204:	b1 e0       	ldi	r27, 0x01	; 1
     206:	e0 e4       	ldi	r30, 0x40	; 64
     208:	f7 e2       	ldi	r31, 0x27	; 39
     20a:	02 c0       	rjmp	.+4      	; 0x210 <__do_copy_data+0x10>
     20c:	05 90       	lpm	r0, Z+
     20e:	0d 92       	st	X+, r0
     210:	a2 3a       	cpi	r26, 0xA2	; 162
     212:	b1 07       	cpc	r27, r17
     214:	d9 f7       	brne	.-10     	; 0x20c <__do_copy_data+0xc>

00000216 <__do_clear_bss>:
     216:	11 e0       	ldi	r17, 0x01	; 1
     218:	a2 ea       	ldi	r26, 0xA2	; 162
     21a:	b1 e0       	ldi	r27, 0x01	; 1
     21c:	01 c0       	rjmp	.+2      	; 0x220 <.do_clear_bss_start>

0000021e <.do_clear_bss_loop>:
     21e:	1d 92       	st	X+, r1

00000220 <.do_clear_bss_start>:
     220:	a5 3b       	cpi	r26, 0xB5	; 181
     222:	b1 07       	cpc	r27, r17
     224:	e1 f7       	brne	.-8      	; 0x21e <.do_clear_bss_loop>
     226:	44 d0       	rcall	.+136    	; 0x2b0 <main>
     228:	0c 94 9e 13 	jmp	0x273c	; 0x273c <_exit>

0000022c <__bad_interrupt>:
     22c:	e9 ce       	rjmp	.-558    	; 0x0 <__vectors>

0000022e <LEDs_SetAllLEDs>:
				PORTB &= ~LedMask;
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LedMask)
			{
				PORTB = ((PORTB & ~LEDS_ALL_LEDS) | LedMask);
     22e:	95 b1       	in	r25, 0x05	; 5
     230:	9f 71       	andi	r25, 0x1F	; 31
     232:	98 2b       	or	r25, r24
     234:	95 b9       	out	0x05, r25	; 5
			}
     236:	08 95       	ret

00000238 <SetupHardware>:

/** Configures the board hardware and chip peripherals for the demo's functionality. */
void SetupHardware(void)
{
	/* Disable watchdog if enabled by bootloader/fuses */
	MCUSR &= ~(1 << WDRF);
     238:	84 b7       	in	r24, 0x34	; 52
     23a:	87 7f       	andi	r24, 0xF7	; 247
     23c:	84 bf       	out	0x34, r24	; 52
	wdt_disable();
     23e:	88 e1       	ldi	r24, 0x18	; 24
     240:	0f b6       	in	r0, 0x3f	; 63
     242:	f8 94       	cli
     244:	80 93 60 00 	sts	0x0060, r24
     248:	10 92 60 00 	sts	0x0060, r1
     24c:	0f be       	out	0x3f, r0	; 63
The type of x is clock_div_t.
*/
void clock_prescale_set(clock_div_t __x)
{
    uint8_t __tmp = _BV(CLKPCE);
    __asm__ __volatile__ (
     24e:	90 e0       	ldi	r25, 0x00	; 0
     250:	80 e8       	ldi	r24, 0x80	; 128
     252:	0f b6       	in	r0, 0x3f	; 63
     254:	f8 94       	cli
     256:	80 93 61 00 	sts	0x0061, r24
     25a:	90 93 61 00 	sts	0x0061, r25
     25e:	0f be       	out	0x3f, r0	; 63

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void LEDs_Init(void)
			{
				DDRB  |=  LEDS_ALL_LEDS;
     260:	84 b1       	in	r24, 0x04	; 4
     262:	80 6e       	ori	r24, 0xE0	; 224
     264:	84 b9       	out	0x04, r24	; 4
				PORTB &= ~LEDS_ALL_LEDS;
     266:	85 b1       	in	r24, 0x05	; 5
     268:	8f 71       	andi	r24, 0x1F	; 31
     26a:	85 b9       	out	0x05, r24	; 5
	#if defined(RESET_TOGGLES_LIBUSB_COMPAT)
	UpdateCurrentCompatibilityMode();
	#endif

	/* USB Stack Initialization */
	USB_Init();
     26c:	0c 94 ad 11 	jmp	0x235a	; 0x235a <USB_Init>

00000270 <EVENT_USB_Device_Connect>:
}
     270:	80 ec       	ldi	r24, 0xC0	; 192

/** Event handler for the library USB Connection event. */
void EVENT_USB_Device_Connect(void)
{
	LEDs_SetAllLEDs(LEDMASK_USB_ENUMERATING);
     272:	dd cf       	rjmp	.-70     	; 0x22e <LEDs_SetAllLEDs>

00000274 <EVENT_USB_Device_Disconnect>:
     274:	80 e4       	ldi	r24, 0x40	; 64
}
     276:	db cf       	rjmp	.-74     	; 0x22e <LEDs_SetAllLEDs>

00000278 <EVENT_USB_Device_ConfigurationChanged>:

/** Event handler for the library USB Disconnection event. */
void EVENT_USB_Device_Disconnect(void)
{
	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
     278:	82 e0       	ldi	r24, 0x02	; 2
}
     27a:	60 e8       	ldi	r22, 0x80	; 128
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
     27c:	42 e3       	ldi	r20, 0x32	; 50
     27e:	0e 94 14 11 	call	0x2228	; 0x2228 <Endpoint_ConfigureEndpoint_Prv>
	/* Setup AVRISP Data IN endpoint if it is using a physically different endpoint */
	if ((AVRISP_DATA_IN_EPADDR & ENDPOINT_EPNUM_MASK) != (AVRISP_DATA_OUT_EPADDR & ENDPOINT_EPNUM_MASK))
	  ConfigSuccess &= Endpoint_ConfigureEndpoint(AVRISP_DATA_IN_EPADDR, EP_TYPE_BULK, AVRISP_DATA_EPSIZE, 1);

	/* Indicate endpoint configuration success or failure */
	LEDs_SetAllLEDs(ConfigSuccess ? LEDMASK_USB_READY : LEDMASK_USB_ERROR);
     282:	88 23       	and	r24, r24
     284:	11 f0       	breq	.+4      	; 0x28a <EVENT_USB_Device_ConfigurationChanged+0x12>
     286:	80 e8       	ldi	r24, 0x80	; 128
     288:	01 c0       	rjmp	.+2      	; 0x28c <EVENT_USB_Device_ConfigurationChanged+0x14>
     28a:	80 e4       	ldi	r24, 0x40	; 64
     28c:	d0 cf       	rjmp	.-96     	; 0x22e <LEDs_SetAllLEDs>

0000028e <AVRISP_Task>:
     28e:	8e b3       	in	r24, 0x1e	; 30
}
     290:	84 30       	cpi	r24, 0x04	; 4

/** Processes incoming V2 Protocol commands from the host, returning a response when required. */
void AVRISP_Task(void)
{
	/* Device must be connected and configured for the task to run */
	if (USB_DeviceState != DEVICE_STATE_Configured)
     292:	69 f4       	brne	.+26     	; 0x2ae <AVRISP_Task+0x20>
	  return;

	V2Params_UpdateParamValues();
     294:	c3 d1       	rcall	.+902    	; 0x61c <V2Params_UpdateParamValues>
     296:	82 e0       	ldi	r24, 0x02	; 2
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     298:	80 93 e9 00 	sts	0x00E9, r24
     29c:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     2a0:	82 ff       	sbrs	r24, 2

	Endpoint_SelectEndpoint(AVRISP_DATA_OUT_EPADDR);

	/* Check to see if a V2 Protocol command has been received */
	if (Endpoint_IsOUTReceived())
     2a2:	05 c0       	rjmp	.+10     	; 0x2ae <AVRISP_Task+0x20>
     2a4:	80 ec       	ldi	r24, 0xC0	; 192
	{
		LEDs_SetAllLEDs(LEDMASK_BUSY);
     2a6:	c3 df       	rcall	.-122    	; 0x22e <LEDs_SetAllLEDs>
     2a8:	73 d0       	rcall	.+230    	; 0x390 <V2Protocol_ProcessCommand>
     2aa:	80 e8       	ldi	r24, 0x80	; 128

		/* Pass off processing of the V2 Protocol command to the V2 Protocol handler */
		V2Protocol_ProcessCommand();
     2ac:	c0 cf       	rjmp	.-128    	; 0x22e <LEDs_SetAllLEDs>
     2ae:	08 95       	ret

000002b0 <main>:

		LEDs_SetAllLEDs(LEDMASK_USB_READY);
     2b0:	c3 df       	rcall	.-122    	; 0x238 <SetupHardware>
     2b2:	66 d0       	rcall	.+204    	; 0x380 <V2Protocol_Init>
     2b4:	80 e4       	ldi	r24, 0x40	; 64
     2b6:	bb df       	rcall	.-138    	; 0x22e <LEDs_SetAllLEDs>
int main(void)
{
	SetupHardware();
	V2Protocol_Init();

	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
     2b8:	78 94       	sei
     2ba:	48 9b       	sbis	0x09, 0	; 9
     2bc:	02 c0       	rjmp	.+4      	; 0x2c2 <main+0x12>
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				sei();
     2be:	90 e0       	ldi	r25, 0x00	; 0
	for (;;)
	{
		#if (BOARD == BOARD_USBTINYMKII)
		/* On the USBTINY-MKII target, there is a secondary LED which indicates the current selected power
		   mode - either VBUS, or sourced from the VTARGET pin of the programming connectors */
		LEDs_ChangeLEDs(LEDMASK_VBUSPOWER, (PIND & (1 << 0)) ? 0 : LEDMASK_VBUSPOWER);
     2c0:	01 c0       	rjmp	.+2      	; 0x2c4 <main+0x14>
     2c2:	90 e2       	ldi	r25, 0x20	; 32
     2c4:	85 b1       	in	r24, 0x05	; 5
     2c6:	8f 7d       	andi	r24, 0xDF	; 223
     2c8:	89 2b       	or	r24, r25
			}

			static inline void LEDs_ChangeLEDs(const uint8_t LedMask,
			                                   const uint8_t ActiveMask)
			{
				PORTB = ((PORTB & ~LedMask) | ActiveMask);
     2ca:	85 b9       	out	0x05, r24	; 5
     2cc:	e0 df       	rcall	.-64     	; 0x28e <AVRISP_Task>
     2ce:	0e 94 69 13 	call	0x26d2	; 0x26d2 <USB_USBTask>
		#endif

		AVRISP_Task();
     2d2:	f3 cf       	rjmp	.-26     	; 0x2ba <main+0xa>

000002d4 <CALLBACK_USB_GetDescriptor>:
     2d4:	01 c0       	rjmp	.+2      	; 0x2d8 <AVRISP_GetDescriptor>
		USB_USBTask();
     2d6:	08 95       	ret

000002d8 <AVRISP_GetDescriptor>:
 */
uint16_t AVRISP_GetDescriptor(const uint16_t wValue,
                              const uint8_t wIndex,
                              const void** const DescriptorAddress,
                              uint8_t* DescriptorMemorySpace)
{
     2d8:	f9 01       	movw	r30, r18
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;

	*DescriptorMemorySpace = MEMSPACE_FLASH;
     2da:	10 82       	st	Z, r1
	
	switch (DescriptorType)
     2dc:	92 30       	cpi	r25, 0x02	; 2
     2de:	29 f0       	breq	.+10     	; 0x2ea <AVRISP_GetDescriptor+0x12>
     2e0:	93 30       	cpi	r25, 0x03	; 3
     2e2:	49 f0       	breq	.+18     	; 0x2f6 <AVRISP_GetDescriptor+0x1e>
     2e4:	91 30       	cpi	r25, 0x01	; 1
     2e6:	71 f5       	brne	.+92     	; 0x344 <__stack+0x45>
     2e8:	28 c0       	rjmp	.+80     	; 0x33a <__stack+0x3b>
		case DTYPE_Device:
			Address = &AVRISP_DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			*DescriptorMemorySpace = MEMSPACE_RAM;
     2ea:	90 83       	st	Z, r25
				/* Update the configuration descriptor with the current endpoint address */
				AVRISP_ConfigurationDescriptor.AVRISP_DataInEndpoint.EndpointAddress = AVRISP_CurrDataINEndpointAddress;
			#endif

			Address = &AVRISP_ConfigurationDescriptor;
			Size    = sizeof(AVRISP_USB_Descriptor_Configuration_t);
     2ec:	80 e2       	ldi	r24, 0x20	; 32
     2ee:	90 e0       	ldi	r25, 0x00	; 0
			#if defined(RESET_TOGGLES_LIBUSB_COMPAT)
				/* Update the configuration descriptor with the current endpoint address */
				AVRISP_ConfigurationDescriptor.AVRISP_DataInEndpoint.EndpointAddress = AVRISP_CurrDataINEndpointAddress;
			#endif

			Address = &AVRISP_ConfigurationDescriptor;
     2f0:	ee e1       	ldi	r30, 0x1E	; 30
     2f2:	f1 e0       	ldi	r31, 0x01	; 1
			Size    = sizeof(AVRISP_USB_Descriptor_Configuration_t);
			break;
     2f4:	2b c0       	rjmp	.+86     	; 0x34c <__stack+0x4d>
		case DTYPE_String:
			switch (DescriptorNumber)
     2f6:	81 30       	cpi	r24, 0x01	; 1
     2f8:	51 f0       	breq	.+20     	; 0x30e <__stack+0xf>
     2fa:	81 30       	cpi	r24, 0x01	; 1
     2fc:	28 f0       	brcs	.+10     	; 0x308 <__stack+0x9>
     2fe:	82 30       	cpi	r24, 0x02	; 2
     300:	49 f0       	breq	.+18     	; 0x314 <__stack+0x15>
     302:	83 30       	cpi	r24, 0x03	; 3
     304:	f9 f4       	brne	.+62     	; 0x344 <__stack+0x45>
     306:	0b c0       	rjmp	.+22     	; 0x31e <__stack+0x1f>
			{
				case 0x00:
					Address = &AVRISP_LanguageString;
					Size    = pgm_read_byte(&AVRISP_LanguageString.Header.Size);
     308:	ec e9       	ldi	r30, 0x9C	; 156
     30a:	f0 e0       	ldi	r31, 0x00	; 0
     30c:	05 c0       	rjmp	.+10     	; 0x318 <__stack+0x19>
					break;
				case 0x01:
					Address = &AVRISP_ManufacturerString;
					Size    = pgm_read_byte(&AVRISP_ManufacturerString.Header.Size);
     30e:	ee e8       	ldi	r30, 0x8E	; 142
     310:	f0 e0       	ldi	r31, 0x00	; 0
     312:	02 c0       	rjmp	.+4      	; 0x318 <__stack+0x19>
					break;
				case 0x02:
					Address = &AVRISP_ProductString;
					Size    = pgm_read_byte(&AVRISP_ProductString.Header.Size);
     314:	e4 e7       	ldi	r30, 0x74	; 116
     316:	f0 e0       	ldi	r31, 0x00	; 0
     318:	84 91       	lpm	r24, Z
     31a:	90 e0       	ldi	r25, 0x00	; 0
					break;
     31c:	17 c0       	rjmp	.+46     	; 0x34c <__stack+0x4d>
				case 0x03:
					Address = &AVRISP_SerialString;
					Size    = AVRISP_SerialString.Header.Size;
     31e:	80 91 00 01 	lds	r24, 0x0100
     322:	90 e0       	ldi	r25, 0x00	; 0
					
					/* Update serial number to have a different serial based on the current endpoint address */
					((uint16_t*)&AVRISP_SerialString.UnicodeString)[6] = cpu_to_le16('0' + (AVRISP_DATA_IN_EPADDR & ENDPOINT_EPNUM_MASK));
     324:	22 e3       	ldi	r18, 0x32	; 50
     326:	30 e0       	ldi	r19, 0x00	; 0
     328:	30 93 0f 01 	sts	0x010F, r19
     32c:	20 93 0e 01 	sts	0x010E, r18
					
					*DescriptorMemorySpace = MEMSPACE_RAM;
     330:	22 e0       	ldi	r18, 0x02	; 2
     332:	20 83       	st	Z, r18
				case 0x02:
					Address = &AVRISP_ProductString;
					Size    = pgm_read_byte(&AVRISP_ProductString.Header.Size);
					break;
				case 0x03:
					Address = &AVRISP_SerialString;
     334:	e0 e0       	ldi	r30, 0x00	; 0
     336:	f1 e0       	ldi	r31, 0x01	; 1
					
					/* Update serial number to have a different serial based on the current endpoint address */
					((uint16_t*)&AVRISP_SerialString.UnicodeString)[6] = cpu_to_le16('0' + (AVRISP_DATA_IN_EPADDR & ENDPOINT_EPNUM_MASK));
					
					*DescriptorMemorySpace = MEMSPACE_RAM;
					break;
     338:	09 c0       	rjmp	.+18     	; 0x34c <__stack+0x4d>
	
	switch (DescriptorType)
	{
		case DTYPE_Device:
			Address = &AVRISP_DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
     33a:	82 e1       	ldi	r24, 0x12	; 18
     33c:	90 e0       	ldi	r25, 0x00	; 0
	*DescriptorMemorySpace = MEMSPACE_FLASH;
	
	switch (DescriptorType)
	{
		case DTYPE_Device:
			Address = &AVRISP_DeviceDescriptor;
     33e:	e0 ea       	ldi	r30, 0xA0	; 160
     340:	f0 e0       	ldi	r31, 0x00	; 0
     342:	04 c0       	rjmp	.+8      	; 0x34c <__stack+0x4d>
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;
     344:	80 e0       	ldi	r24, 0x00	; 0
     346:	90 e0       	ldi	r25, 0x00	; 0
                              uint8_t* DescriptorMemorySpace)
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
     348:	e0 e0       	ldi	r30, 0x00	; 0
     34a:	f0 e0       	ldi	r31, 0x00	; 0
			}

			break;
	}

	*DescriptorAddress = Address;
     34c:	da 01       	movw	r26, r20
     34e:	11 96       	adiw	r26, 0x01	; 1
     350:	fc 93       	st	X, r31
     352:	ee 93       	st	-X, r30
	return Size;
}
     354:	08 95       	ret

00000356 <__vector_19>:
bool MustLoadExtendedAddress;


/** ISR to manage timeouts whilst processing a V2Protocol command */
ISR(TIMER0_COMPA_vect, ISR_NOBLOCK)
{
     356:	78 94       	sei
     358:	1f 92       	push	r1
     35a:	0f 92       	push	r0
     35c:	0f b6       	in	r0, 0x3f	; 63
     35e:	0f 92       	push	r0
     360:	11 24       	eor	r1, r1
     362:	8f 93       	push	r24
	if (TimeoutTicksRemaining)
     364:	8a b5       	in	r24, 0x2a	; 42
     366:	88 23       	and	r24, r24
     368:	21 f0       	breq	.+8      	; 0x372 <__vector_19+0x1c>
	  TimeoutTicksRemaining--;
     36a:	8a b5       	in	r24, 0x2a	; 42
     36c:	81 50       	subi	r24, 0x01	; 1
     36e:	8a bd       	out	0x2a, r24	; 42
     370:	01 c0       	rjmp	.+2      	; 0x374 <__vector_19+0x1e>
	else
	  TCCR0B = 0;
     372:	15 bc       	out	0x25, r1	; 37
}
     374:	8f 91       	pop	r24
     376:	0f 90       	pop	r0
     378:	0f be       	out	0x3f, r0	; 63
     37a:	0f 90       	pop	r0
     37c:	1f 90       	pop	r1
     37e:	18 95       	reti

00000380 <V2Protocol_Init>:
	ADC_SetupChannel(VTARGET_ADC_CHANNEL);
	ADC_StartReading(VTARGET_REF_MASK | ADC_RIGHT_ADJUSTED | VTARGET_ADC_CHANNEL_MASK);
	#endif

	/* Timeout timer initialization (~10ms period) */
	OCR0A  = (((F_CPU / 1024) / 100) - 1);
     380:	8b e9       	ldi	r24, 0x9B	; 155
     382:	87 bd       	out	0x27, r24	; 39
	TCCR0A = (1 << WGM01);
     384:	82 e0       	ldi	r24, 0x02	; 2
     386:	84 bd       	out	0x24, r24	; 36
	TIMSK0 = (1 << OCIE0A);
     388:	80 93 6e 00 	sts	0x006E, r24

	V2Params_LoadNonVolatileParamValues();
     38c:	2c d1       	rcall	.+600    	; 0x5e6 <V2Params_LoadNonVolatileParamValues>
     38e:	b0 c5       	rjmp	.+2912   	; 0xef0 <ISPTarget_ConfigureRescueClock>

00000390 <V2Protocol_ProcessCommand>:

	#if defined(ENABLE_ISP_PROTOCOL)
	ISPTarget_ConfigureRescueClock();
     390:	0f 93       	push	r16
     392:	1f 93       	push	r17
	#endif
}
     394:	cf 93       	push	r28
/** Master V2 Protocol packet handler, for received V2 Protocol packets from a connected host.
 *  This routine decodes the issued command and passes off the handling of the command to the
 *  appropriate function.
 */
void V2Protocol_ProcessCommand(void)
{
     396:	df 93       	push	r29
     398:	0f 92       	push	r0
     39a:	cd b7       	in	r28, 0x3d	; 61
     39c:	de b7       	in	r29, 0x3e	; 62
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
     39e:	10 91 f1 00 	lds	r17, 0x00F1
	uint8_t V2Command = Endpoint_Read_8();

	/* Reset timeout counter duration and start the timer */
	TimeoutTicksRemaining = COMMAND_TIMEOUT_TICKS;
     3a2:	84 e6       	ldi	r24, 0x64	; 100
     3a4:	8a bd       	out	0x2a, r24	; 42
	TCCR0B = ((1 << CS02) | (1 << CS00));	
     3a6:	85 e0       	ldi	r24, 0x05	; 5
     3a8:	85 bd       	out	0x25, r24	; 37

	switch (V2Command)
     3aa:	14 31       	cpi	r17, 0x14	; 20
     3ac:	09 f4       	brne	.+2      	; 0x3b0 <V2Protocol_ProcessCommand+0x20>
     3ae:	ca c0       	rjmp	.+404    	; 0x544 <V2Protocol_ProcessCommand+0x1b4>
     3b0:	15 31       	cpi	r17, 0x15	; 21
     3b2:	10 f5       	brcc	.+68     	; 0x3f8 <V2Protocol_ProcessCommand+0x68>
     3b4:	1a 30       	cpi	r17, 0x0A	; 10
     3b6:	09 f4       	brne	.+2      	; 0x3ba <V2Protocol_ProcessCommand+0x2a>
     3b8:	ac c0       	rjmp	.+344    	; 0x512 <V2Protocol_ProcessCommand+0x182>
     3ba:	1b 30       	cpi	r17, 0x0B	; 11
     3bc:	68 f4       	brcc	.+26     	; 0x3d8 <V2Protocol_ProcessCommand+0x48>
     3be:	14 30       	cpi	r17, 0x04	; 4
     3c0:	38 f4       	brcc	.+14     	; 0x3d0 <V2Protocol_ProcessCommand+0x40>
     3c2:	12 30       	cpi	r17, 0x02	; 2
     3c4:	08 f0       	brcs	.+2      	; 0x3c8 <V2Protocol_ProcessCommand+0x38>
     3c6:	54 c0       	rjmp	.+168    	; 0x470 <V2Protocol_ProcessCommand+0xe0>
     3c8:	11 30       	cpi	r17, 0x01	; 1
     3ca:	09 f0       	breq	.+2      	; 0x3ce <V2Protocol_ProcessCommand+0x3e>
     3cc:	d3 c0       	rjmp	.+422    	; 0x574 <V2Protocol_ProcessCommand+0x1e4>
     3ce:	33 c0       	rjmp	.+102    	; 0x436 <V2Protocol_ProcessCommand+0xa6>
     3d0:	16 30       	cpi	r17, 0x06	; 6
     3d2:	09 f0       	breq	.+2      	; 0x3d6 <V2Protocol_ProcessCommand+0x46>
     3d4:	cf c0       	rjmp	.+414    	; 0x574 <V2Protocol_ProcessCommand+0x1e4>
     3d6:	77 c0       	rjmp	.+238    	; 0x4c6 <V2Protocol_ProcessCommand+0x136>
     3d8:	11 31       	cpi	r17, 0x11	; 17
     3da:	09 f4       	brne	.+2      	; 0x3de <V2Protocol_ProcessCommand+0x4e>
     3dc:	ae c0       	rjmp	.+348    	; 0x53a <V2Protocol_ProcessCommand+0x1aa>
     3de:	12 31       	cpi	r17, 0x12	; 18
     3e0:	20 f4       	brcc	.+8      	; 0x3ea <V2Protocol_ProcessCommand+0x5a>
     3e2:	10 31       	cpi	r17, 0x10	; 16
     3e4:	09 f0       	breq	.+2      	; 0x3e8 <V2Protocol_ProcessCommand+0x58>
     3e6:	c6 c0       	rjmp	.+396    	; 0x574 <V2Protocol_ProcessCommand+0x1e4>
     3e8:	a6 c0       	rjmp	.+332    	; 0x536 <V2Protocol_ProcessCommand+0x1a6>
     3ea:	12 31       	cpi	r17, 0x12	; 18
     3ec:	09 f4       	brne	.+2      	; 0x3f0 <V2Protocol_ProcessCommand+0x60>
     3ee:	ad c0       	rjmp	.+346    	; 0x54a <V2Protocol_ProcessCommand+0x1ba>
     3f0:	13 31       	cpi	r17, 0x13	; 19
     3f2:	09 f0       	breq	.+2      	; 0x3f6 <V2Protocol_ProcessCommand+0x66>
     3f4:	bf c0       	rjmp	.+382    	; 0x574 <V2Protocol_ProcessCommand+0x1e4>
     3f6:	a3 c0       	rjmp	.+326    	; 0x53e <V2Protocol_ProcessCommand+0x1ae>
     3f8:	19 31       	cpi	r17, 0x19	; 25
     3fa:	09 f4       	brne	.+2      	; 0x3fe <V2Protocol_ProcessCommand+0x6e>
     3fc:	ab c0       	rjmp	.+342    	; 0x554 <V2Protocol_ProcessCommand+0x1c4>
     3fe:	1a 31       	cpi	r17, 0x1A	; 26
     400:	68 f4       	brcc	.+26     	; 0x41c <V2Protocol_ProcessCommand+0x8c>
     402:	16 31       	cpi	r17, 0x16	; 22
     404:	09 f4       	brne	.+2      	; 0x408 <V2Protocol_ProcessCommand+0x78>
     406:	9e c0       	rjmp	.+316    	; 0x544 <V2Protocol_ProcessCommand+0x1b4>
     408:	16 31       	cpi	r17, 0x16	; 22
     40a:	08 f4       	brcc	.+2      	; 0x40e <V2Protocol_ProcessCommand+0x7e>
     40c:	98 c0       	rjmp	.+304    	; 0x53e <V2Protocol_ProcessCommand+0x1ae>
     40e:	17 31       	cpi	r17, 0x17	; 23
     410:	09 f4       	brne	.+2      	; 0x414 <V2Protocol_ProcessCommand+0x84>
     412:	a0 c0       	rjmp	.+320    	; 0x554 <V2Protocol_ProcessCommand+0x1c4>
     414:	18 31       	cpi	r17, 0x18	; 24
     416:	09 f0       	breq	.+2      	; 0x41a <V2Protocol_ProcessCommand+0x8a>
     418:	ad c0       	rjmp	.+346    	; 0x574 <V2Protocol_ProcessCommand+0x1e4>
     41a:	99 c0       	rjmp	.+306    	; 0x54e <V2Protocol_ProcessCommand+0x1be>
     41c:	1d 31       	cpi	r17, 0x1D	; 29
     41e:	09 f4       	brne	.+2      	; 0x422 <V2Protocol_ProcessCommand+0x92>
     420:	9c c0       	rjmp	.+312    	; 0x55a <V2Protocol_ProcessCommand+0x1ca>
     422:	1d 31       	cpi	r17, 0x1D	; 29
     424:	08 f4       	brcc	.+2      	; 0x428 <V2Protocol_ProcessCommand+0x98>
     426:	93 c0       	rjmp	.+294    	; 0x54e <V2Protocol_ProcessCommand+0x1be>
     428:	10 35       	cpi	r17, 0x50	; 80
     42a:	09 f4       	brne	.+2      	; 0x42e <V2Protocol_ProcessCommand+0x9e>
     42c:	9a c0       	rjmp	.+308    	; 0x562 <V2Protocol_ProcessCommand+0x1d2>
     42e:	11 35       	cpi	r17, 0x51	; 81
     430:	09 f0       	breq	.+2      	; 0x434 <V2Protocol_ProcessCommand+0xa4>
     432:	a0 c0       	rjmp	.+320    	; 0x574 <V2Protocol_ProcessCommand+0x1e4>
     434:	94 c0       	rjmp	.+296    	; 0x55e <V2Protocol_ProcessCommand+0x1ce>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     436:	80 91 e8 00 	lds	r24, 0x00E8
     43a:	8b 77       	andi	r24, 0x7B	; 123
     43c:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     440:	82 e0       	ldi	r24, 0x02	; 2
     442:	80 93 e9 00 	sts	0x00E9, r24
			 *  \param[in] DirectionMask  New endpoint direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask)
			{
				UECFG0X = ((UECFG0X & ~(1 << EPDIR)) | (DirectionMask ? (1 << EPDIR) : 0));
     446:	80 91 ec 00 	lds	r24, 0x00EC
     44a:	81 60       	ori	r24, 0x01	; 1
     44c:	80 93 ec 00 	sts	0x00EC, r24
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     450:	10 93 f1 00 	sts	0x00F1, r17
     454:	10 92 f1 00 	sts	0x00F1, r1
     458:	8a e0       	ldi	r24, 0x0A	; 10
     45a:	80 93 f1 00 	sts	0x00F1, r24
	Endpoint_SetEndpointDirection(ENDPOINT_DIR_IN);

	Endpoint_Write_8(CMD_SIGN_ON);
	Endpoint_Write_8(STATUS_CMD_OK);
	Endpoint_Write_8(sizeof(PROGRAMMER_ID) - 1);
	Endpoint_Write_Stream_LE(PROGRAMMER_ID, (sizeof(PROGRAMMER_ID) - 1), NULL);
     45e:	8e e3       	ldi	r24, 0x3E	; 62
     460:	91 e0       	ldi	r25, 0x01	; 1
     462:	6a e0       	ldi	r22, 0x0A	; 10
     464:	70 e0       	ldi	r23, 0x00	; 0
     466:	40 e0       	ldi	r20, 0x00	; 0
     468:	50 e0       	ldi	r21, 0x00	; 0
     46a:	0e 94 e9 0e 	call	0x1dd2	; 0x1dd2 <Endpoint_Write_Stream_LE>
     46e:	98 c0       	rjmp	.+304    	; 0x5a0 <V2Protocol_ProcessCommand+0x210>
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
     470:	00 91 f1 00 	lds	r16, 0x00F1
static void V2Protocol_GetSetParam(const uint8_t V2Command)
{
	uint8_t ParamID = Endpoint_Read_8();
	uint8_t ParamValue;

	if (V2Command == CMD_SET_PARAMETER)
     474:	12 30       	cpi	r17, 0x02	; 2
     476:	11 f4       	brne	.+4      	; 0x47c <V2Protocol_ProcessCommand+0xec>
     478:	60 91 f1 00 	lds	r22, 0x00F1
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     47c:	80 91 e8 00 	lds	r24, 0x00E8
     480:	8b 77       	andi	r24, 0x7B	; 123
     482:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     486:	82 e0       	ldi	r24, 0x02	; 2
     488:	80 93 e9 00 	sts	0x00E9, r24
			 *  \param[in] DirectionMask  New endpoint direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask)
			{
				UECFG0X = ((UECFG0X & ~(1 << EPDIR)) | (DirectionMask ? (1 << EPDIR) : 0));
     48c:	80 91 ec 00 	lds	r24, 0x00EC
     490:	81 60       	ori	r24, 0x01	; 1
     492:	80 93 ec 00 	sts	0x00EC, r24
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     496:	10 93 f1 00 	sts	0x00F1, r17
	Endpoint_SelectEndpoint(AVRISP_DATA_IN_EPADDR);
	Endpoint_SetEndpointDirection(ENDPOINT_DIR_IN);

	Endpoint_Write_8(V2Command);

	uint8_t ParamPrivs = V2Params_GetParameterPrivileges(ParamID);
     49a:	80 2f       	mov	r24, r16
     49c:	69 83       	std	Y+1, r22	; 0x01
     49e:	bf d0       	rcall	.+382    	; 0x61e <V2Params_GetParameterPrivileges>
     4a0:	69 81       	ldd	r22, Y+1	; 0x01

	if ((V2Command == CMD_SET_PARAMETER) && (ParamPrivs & PARAM_PRIV_WRITE))
     4a2:	12 30       	cpi	r17, 0x02	; 2
     4a4:	39 f4       	brne	.+14     	; 0x4b4 <V2Protocol_ProcessCommand+0x124>
     4a6:	81 ff       	sbrs	r24, 1
     4a8:	0c c0       	rjmp	.+24     	; 0x4c2 <V2Protocol_ProcessCommand+0x132>
     4aa:	10 92 f1 00 	sts	0x00F1, r1
     4ae:	80 2f       	mov	r24, r16
	{
		Endpoint_Write_8(STATUS_CMD_OK);
		V2Params_SetParameterValue(ParamID, ParamValue);
     4b0:	c6 d0       	rcall	.+396    	; 0x63e <V2Params_SetParameterValue>
     4b2:	76 c0       	rjmp	.+236    	; 0x5a0 <V2Protocol_ProcessCommand+0x210>
     4b4:	80 ff       	sbrs	r24, 0
     4b6:	05 c0       	rjmp	.+10     	; 0x4c2 <V2Protocol_ProcessCommand+0x132>
	}
	else if ((V2Command == CMD_GET_PARAMETER) && (ParamPrivs & PARAM_PRIV_READ))
     4b8:	10 92 f1 00 	sts	0x00F1, r1
     4bc:	80 2f       	mov	r24, r16
     4be:	b7 d0       	rcall	.+366    	; 0x62e <V2Params_GetParameterValue>
	{
		Endpoint_Write_8(STATUS_CMD_OK);
		Endpoint_Write_8(V2Params_GetParameterValue(ParamID));
     4c0:	6d c0       	rjmp	.+218    	; 0x59c <V2Protocol_ProcessCommand+0x20c>
     4c2:	80 ec       	ldi	r24, 0xC0	; 192
     4c4:	6b c0       	rjmp	.+214    	; 0x59c <V2Protocol_ProcessCommand+0x20c>
     4c6:	86 ea       	ldi	r24, 0xA6	; 166
     4c8:	91 e0       	ldi	r25, 0x01	; 1
     4ca:	64 e0       	ldi	r22, 0x04	; 4
 *  global storage variable for later use, and issuing LOAD EXTENDED ADDRESS commands
 *  to the attached device as required.
 */
static void V2Protocol_LoadAddress(void)
{
	Endpoint_Read_Stream_BE(&CurrentAddress, sizeof(CurrentAddress), NULL);
     4cc:	70 e0       	ldi	r23, 0x00	; 0
     4ce:	40 e0       	ldi	r20, 0x00	; 0
     4d0:	50 e0       	ldi	r21, 0x00	; 0
     4d2:	0e 94 89 0f 	call	0x1f12	; 0x1f12 <Endpoint_Read_Stream_BE>
     4d6:	80 91 e8 00 	lds	r24, 0x00E8
     4da:	8b 77       	andi	r24, 0x7B	; 123
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     4dc:	80 93 e8 00 	sts	0x00E8, r24
     4e0:	82 e0       	ldi	r24, 0x02	; 2
     4e2:	80 93 e9 00 	sts	0x00E9, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     4e6:	80 91 ec 00 	lds	r24, 0x00EC
     4ea:	81 60       	ori	r24, 0x01	; 1
			 *  \param[in] DirectionMask  New endpoint direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask)
			{
				UECFG0X = ((UECFG0X & ~(1 << EPDIR)) | (DirectionMask ? (1 << EPDIR) : 0));
     4ec:	80 93 ec 00 	sts	0x00EC, r24
     4f0:	80 91 a6 01 	lds	r24, 0x01A6
     4f4:	90 91 a7 01 	lds	r25, 0x01A7

	Endpoint_ClearOUT();
	Endpoint_SelectEndpoint(AVRISP_DATA_IN_EPADDR);
	Endpoint_SetEndpointDirection(ENDPOINT_DIR_IN);

	if (CurrentAddress & (1UL << 31))
     4f8:	a0 91 a8 01 	lds	r26, 0x01A8
     4fc:	b0 91 a9 01 	lds	r27, 0x01A9
     500:	b7 ff       	sbrs	r27, 7
     502:	03 c0       	rjmp	.+6      	; 0x50a <V2Protocol_ProcessCommand+0x17a>
     504:	81 e0       	ldi	r24, 0x01	; 1
     506:	80 93 a5 01 	sts	0x01A5, r24
	  MustLoadExtendedAddress = true;
     50a:	86 e0       	ldi	r24, 0x06	; 6
     50c:	80 93 f1 00 	sts	0x00F1, r24
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     510:	0f c0       	rjmp	.+30     	; 0x530 <V2Protocol_ProcessCommand+0x1a0>
     512:	80 91 e8 00 	lds	r24, 0x00E8
     516:	8b 77       	andi	r24, 0x7B	; 123
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     518:	80 93 e8 00 	sts	0x00E8, r24
     51c:	82 e0       	ldi	r24, 0x02	; 2
     51e:	80 93 e9 00 	sts	0x00E9, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     522:	80 91 ec 00 	lds	r24, 0x00EC
     526:	81 60       	ori	r24, 0x01	; 1
			 *  \param[in] DirectionMask  New endpoint direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask)
			{
				UECFG0X = ((UECFG0X & ~(1 << EPDIR)) | (DirectionMask ? (1 << EPDIR) : 0));
     528:	80 93 ec 00 	sts	0x00EC, r24
     52c:	10 93 f1 00 	sts	0x00F1, r17
     530:	10 92 f1 00 	sts	0x00F1, r1
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     534:	35 c0       	rjmp	.+106    	; 0x5a0 <V2Protocol_ProcessCommand+0x210>
     536:	33 d4       	rcall	.+2150   	; 0xd9e <ISPProtocol_EnterISPMode>
     538:	38 c0       	rjmp	.+112    	; 0x5aa <V2Protocol_ProcessCommand+0x21a>
     53a:	fd d3       	rcall	.+2042   	; 0xd36 <ISPProtocol_LeaveISPMode>
		case CMD_RESET_PROTECTION:
			V2Protocol_ResetProtection();
			break;
#if defined(ENABLE_ISP_PROTOCOL)
		case CMD_ENTER_PROGMODE_ISP:
			ISPProtocol_EnterISPMode();
     53c:	36 c0       	rjmp	.+108    	; 0x5aa <V2Protocol_ProcessCommand+0x21a>
     53e:	81 2f       	mov	r24, r17
			break;
     540:	bd d0       	rcall	.+378    	; 0x6bc <ISPProtocol_ProgramMemory>
		case CMD_LEAVE_PROGMODE_ISP:
			ISPProtocol_LeaveISPMode();
     542:	33 c0       	rjmp	.+102    	; 0x5aa <V2Protocol_ProcessCommand+0x21a>
     544:	81 2f       	mov	r24, r17
			break;
     546:	e6 d1       	rcall	.+972    	; 0x914 <ISPProtocol_ReadMemory>
		case CMD_PROGRAM_FLASH_ISP:
		case CMD_PROGRAM_EEPROM_ISP:
			ISPProtocol_ProgramMemory(V2Command);
     548:	30 c0       	rjmp	.+96     	; 0x5aa <V2Protocol_ProcessCommand+0x21a>
     54a:	ad d3       	rcall	.+1882   	; 0xca6 <ISPProtocol_ChipErase>
     54c:	2e c0       	rjmp	.+92     	; 0x5aa <V2Protocol_ProcessCommand+0x21a>
			break;
     54e:	81 2f       	mov	r24, r17
		case CMD_READ_FLASH_ISP:
		case CMD_READ_EEPROM_ISP:
			ISPProtocol_ReadMemory(V2Command);
     550:	7e d2       	rcall	.+1276   	; 0xa4e <ISPProtocol_ReadFuseLockSigOSCCAL>
     552:	2b c0       	rjmp	.+86     	; 0x5aa <V2Protocol_ProcessCommand+0x21a>
     554:	81 2f       	mov	r24, r17
			break;
     556:	d4 d2       	rcall	.+1448   	; 0xb00 <ISPProtocol_WriteFuseLock>
		case CMD_CHIP_ERASE_ISP:
			ISPProtocol_ChipErase();
     558:	28 c0       	rjmp	.+80     	; 0x5aa <V2Protocol_ProcessCommand+0x21a>
     55a:	13 d3       	rcall	.+1574   	; 0xb82 <ISPProtocol_SPIMulti>
			break;
     55c:	26 c0       	rjmp	.+76     	; 0x5aa <V2Protocol_ProcessCommand+0x21a>
		case CMD_READ_FUSE_ISP:
		case CMD_READ_LOCK_ISP:
		case CMD_READ_SIGNATURE_ISP:
		case CMD_READ_OSCCAL_ISP:
			ISPProtocol_ReadFuseLockSigOSCCAL(V2Command);
     55e:	ec d6       	rcall	.+3544   	; 0x1338 <XPROGProtocol_SetMode>
     560:	24 c0       	rjmp	.+72     	; 0x5aa <V2Protocol_ProcessCommand+0x21a>
     562:	1a d7       	rcall	.+3636   	; 0x1398 <XPROGProtocol_Command>
			break;
     564:	22 c0       	rjmp	.+68     	; 0x5aa <V2Protocol_ProcessCommand+0x21a>
		case CMD_PROGRAM_FUSE_ISP:
		case CMD_PROGRAM_LOCK_ISP:
			ISPProtocol_WriteFuseLock(V2Command);
     566:	80 91 e8 00 	lds	r24, 0x00E8
     56a:	8b 77       	andi	r24, 0x7B	; 123
			break;
     56c:	80 93 e8 00 	sts	0x00E8, r24
		case CMD_SPI_MULTI:
			ISPProtocol_SPIMulti();
     570:	0e 94 47 11 	call	0x228e	; 0x228e <Endpoint_WaitUntilReady>
			break;
#endif
#if defined(ENABLE_XPROG_PROTOCOL)
		case CMD_XPROG_SETMODE:
			XPROGProtocol_SetMode();
     574:	80 91 f2 00 	lds	r24, 0x00F2
			break;
     578:	80 34       	cpi	r24, 0x40	; 64
		case CMD_XPROG:
			XPROGProtocol_Command();
     57a:	a9 f3       	breq	.-22     	; 0x566 <V2Protocol_ProcessCommand+0x1d6>
     57c:	80 91 e8 00 	lds	r24, 0x00E8
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     580:	8b 77       	andi	r24, 0x7B	; 123
     582:	80 93 e8 00 	sts	0x00E8, r24
     586:	82 e0       	ldi	r24, 0x02	; 2
     588:	80 93 e9 00 	sts	0x00E9, r24
{
	/* Discard all incoming data */
	while (Endpoint_BytesInEndpoint() == AVRISP_DATA_EPSIZE)
	{
		Endpoint_ClearOUT();
		Endpoint_WaitUntilReady();
     58c:	80 91 ec 00 	lds	r24, 0x00EC
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
				#elif defined(USB_SERIES_2_AVR)
					return UEBCLX;
     590:	81 60       	ori	r24, 0x01	; 1
 *  \param[in] V2Command  Issued V2 Protocol command byte from the host
 */
static void V2Protocol_UnknownCommand(const uint8_t V2Command)
{
	/* Discard all incoming data */
	while (Endpoint_BytesInEndpoint() == AVRISP_DATA_EPSIZE)
     592:	80 93 ec 00 	sts	0x00EC, r24
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     596:	10 93 f1 00 	sts	0x00F1, r17
     59a:	89 ec       	ldi	r24, 0xC9	; 201
     59c:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     5a0:	80 91 e8 00 	lds	r24, 0x00E8
     5a4:	8e 77       	andi	r24, 0x7E	; 126
			 *  \param[in] DirectionMask  New endpoint direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask)
			{
				UECFG0X = ((UECFG0X & ~(1 << EPDIR)) | (DirectionMask ? (1 << EPDIR) : 0));
     5a6:	80 93 e8 00 	sts	0x00E8, r24
     5aa:	15 bc       	out	0x25, r1	; 37
     5ac:	0e 94 47 11 	call	0x228e	; 0x228e <Endpoint_WaitUntilReady>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     5b0:	82 e0       	ldi	r24, 0x02	; 2
     5b2:	80 93 e9 00 	sts	0x00E9, r24
     5b6:	80 91 ec 00 	lds	r24, 0x00EC
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     5ba:	8e 7f       	andi	r24, 0xFE	; 254
     5bc:	80 93 ec 00 	sts	0x00EC, r24
     5c0:	0f 90       	pop	r0
     5c2:	df 91       	pop	r29
			V2Protocol_UnknownCommand(V2Command);
			break;
	}

	/* Disable the timeout management timer */
	TCCR0B = 0;
     5c4:	cf 91       	pop	r28

	Endpoint_WaitUntilReady();
     5c6:	1f 91       	pop	r17
     5c8:	0f 91       	pop	r16
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     5ca:	08 95       	ret

000005cc <V2Params_GetParamFromTable>:
 *  \param[in] ParamID  Parameter ID to find in the table
 *
 *  \return Pointer to the associated parameter information from the parameter table if found, NULL otherwise
 */
static ParameterItem_t* const V2Params_GetParamFromTable(const uint8_t ParamID)
{
     5cc:	9a e0       	ldi	r25, 0x0A	; 10
	ParameterItem_t* CurrTableItem = ParameterTable;
     5ce:	e9 e4       	ldi	r30, 0x49	; 73
     5d0:	f1 e0       	ldi	r31, 0x01	; 1

	/* Find the parameter in the parameter table if present */
	for (uint8_t TableIndex = 0; TableIndex < TABLE_PARAM_COUNT; TableIndex++)
	{
		if (ParamID == CurrTableItem->ParamID)
     5d2:	20 81       	ld	r18, Z
     5d4:	82 17       	cp	r24, r18
     5d6:	29 f0       	breq	.+10     	; 0x5e2 <V2Params_GetParamFromTable+0x16>
		  return CurrTableItem;

		CurrTableItem++;
     5d8:	33 96       	adiw	r30, 0x03	; 3
     5da:	91 50       	subi	r25, 0x01	; 1
static ParameterItem_t* const V2Params_GetParamFromTable(const uint8_t ParamID)
{
	ParameterItem_t* CurrTableItem = ParameterTable;

	/* Find the parameter in the parameter table if present */
	for (uint8_t TableIndex = 0; TableIndex < TABLE_PARAM_COUNT; TableIndex++)
     5dc:	d1 f7       	brne	.-12     	; 0x5d2 <V2Params_GetParamFromTable+0x6>
		  return CurrTableItem;

		CurrTableItem++;
	}

	return NULL;
     5de:	e0 e0       	ldi	r30, 0x00	; 0
     5e0:	f0 e0       	ldi	r31, 0x00	; 0
}
     5e2:	cf 01       	movw	r24, r30
     5e4:	08 95       	ret

000005e6 <V2Params_LoadNonVolatileParamValues>:
	};


/** Loads saved non-volatile parameter values from the EEPROM into the parameter table, as needed. */
void V2Params_LoadNonVolatileParamValues(void)
{
     5e6:	cf 93       	push	r28
     5e8:	df 93       	push	r29
	/* Read parameter values that are stored in non-volatile EEPROM */
	uint8_t ResetPolarity = eeprom_read_byte(&EEPROM_Reset_Polarity);
     5ea:	80 e0       	ldi	r24, 0x00	; 0
     5ec:	90 e0       	ldi	r25, 0x00	; 0
     5ee:	0e 94 84 13 	call	0x2708	; 0x2708 <__eerd_byte_usb162>
     5f2:	d8 2f       	mov	r29, r24
	uint8_t SCKDuration   = eeprom_read_byte(&EEPROM_SCK_Duration);
     5f4:	81 e0       	ldi	r24, 0x01	; 1
     5f6:	90 e0       	ldi	r25, 0x00	; 0
     5f8:	0e 94 84 13 	call	0x2708	; 0x2708 <__eerd_byte_usb162>
     5fc:	c8 2f       	mov	r28, r24

	/* Update current parameter table if the EEPROM contents was not blank */
	if (ResetPolarity != 0xFF)
     5fe:	df 3f       	cpi	r29, 0xFF	; 255
     600:	21 f0       	breq	.+8      	; 0x60a <V2Params_LoadNonVolatileParamValues+0x24>
	  V2Params_GetParamFromTable(PARAM_RESET_POLARITY)->ParamValue = ResetPolarity;
     602:	8e e9       	ldi	r24, 0x9E	; 158
     604:	e3 df       	rcall	.-58     	; 0x5cc <V2Params_GetParamFromTable>
     606:	fc 01       	movw	r30, r24
     608:	d2 83       	std	Z+2, r29	; 0x02
     60a:	cf 3f       	cpi	r28, 0xFF	; 255

	/* Update current parameter table if the EEPROM contents was not blank */
	if (SCKDuration != 0xFF)
     60c:	21 f0       	breq	.+8      	; 0x616 <V2Params_LoadNonVolatileParamValues+0x30>
     60e:	88 e9       	ldi	r24, 0x98	; 152
	  V2Params_GetParamFromTable(PARAM_SCK_DURATION)->ParamValue   = SCKDuration;
     610:	dd df       	rcall	.-70     	; 0x5cc <V2Params_GetParamFromTable>
     612:	fc 01       	movw	r30, r24
     614:	c2 83       	std	Z+2, r28	; 0x02
     616:	df 91       	pop	r29
     618:	cf 91       	pop	r28
}
     61a:	08 95       	ret

0000061c <V2Params_UpdateParamValues>:
     61c:	08 95       	ret

0000061e <V2Params_GetParameterPrivileges>:
     61e:	d6 df       	rcall	.-84     	; 0x5cc <V2Params_GetParamFromTable>
 *
 *  \return Privileges for the requested parameter, as a mask of \c PARAM_PRIV_* masks
 */
uint8_t V2Params_GetParameterPrivileges(const uint8_t ParamID)
{
	ParameterItem_t* const ParamInfo = V2Params_GetParamFromTable(ParamID);
     620:	00 97       	sbiw	r24, 0x00	; 0

	if (ParamInfo == NULL)
     622:	19 f0       	breq	.+6      	; 0x62a <V2Params_GetParameterPrivileges+0xc>
     624:	fc 01       	movw	r30, r24
	  return 0;

	return ParamInfo->ParamPrivileges;
     626:	81 81       	ldd	r24, Z+1	; 0x01
     628:	08 95       	ret
     62a:	80 e0       	ldi	r24, 0x00	; 0
uint8_t V2Params_GetParameterPrivileges(const uint8_t ParamID)
{
	ParameterItem_t* const ParamInfo = V2Params_GetParamFromTable(ParamID);

	if (ParamInfo == NULL)
	  return 0;
     62c:	08 95       	ret

0000062e <V2Params_GetParameterValue>:

	return ParamInfo->ParamPrivileges;
}
     62e:	ce df       	rcall	.-100    	; 0x5cc <V2Params_GetParamFromTable>
 *
 *  \return Current value of the parameter in the table, or 0 if not found
 */
uint8_t V2Params_GetParameterValue(const uint8_t ParamID)
{
	ParameterItem_t* const ParamInfo = V2Params_GetParamFromTable(ParamID);
     630:	00 97       	sbiw	r24, 0x00	; 0

	if (ParamInfo == NULL)
     632:	19 f0       	breq	.+6      	; 0x63a <V2Params_GetParameterValue+0xc>
     634:	fc 01       	movw	r30, r24
	  return 0;

	return ParamInfo->ParamValue;
     636:	82 81       	ldd	r24, Z+2	; 0x02
     638:	08 95       	ret
     63a:	80 e0       	ldi	r24, 0x00	; 0
uint8_t V2Params_GetParameterValue(const uint8_t ParamID)
{
	ParameterItem_t* const ParamInfo = V2Params_GetParamFromTable(ParamID);

	if (ParamInfo == NULL)
	  return 0;
     63c:	08 95       	ret

0000063e <V2Params_SetParameterValue>:

	return ParamInfo->ParamValue;
}
     63e:	1f 93       	push	r17
 *
 *  \return Pointer to the associated parameter information from the parameter table if found, NULL otherwise
 */
void V2Params_SetParameterValue(const uint8_t ParamID,
                                const uint8_t Value)
{
     640:	cf 93       	push	r28
     642:	df 93       	push	r29
     644:	0f 92       	push	r0
     646:	cd b7       	in	r28, 0x3d	; 61
     648:	de b7       	in	r29, 0x3e	; 62
     64a:	18 2f       	mov	r17, r24
	ParameterItem_t* const ParamInfo = V2Params_GetParamFromTable(ParamID);
     64c:	69 83       	std	Y+1, r22	; 0x01
     64e:	be df       	rcall	.-132    	; 0x5cc <V2Params_GetParamFromTable>
     650:	fc 01       	movw	r30, r24
     652:	69 81       	ldd	r22, Y+1	; 0x01

	if (ParamInfo == NULL)
     654:	00 97       	sbiw	r24, 0x00	; 0
     656:	61 f0       	breq	.+24     	; 0x670 <V2Params_SetParameterValue+0x32>
     658:	62 83       	std	Z+2, r22	; 0x02
	  return;

	ParamInfo->ParamValue = Value;
     65a:	1e 39       	cpi	r17, 0x9E	; 158

	/* The target RESET line polarity is a non-volatile parameter, save to EEPROM when changed */
	if (ParamID == PARAM_RESET_POLARITY)
     65c:	19 f4       	brne	.+6      	; 0x664 <V2Params_SetParameterValue+0x26>
     65e:	80 e0       	ldi	r24, 0x00	; 0
	  eeprom_update_byte(&EEPROM_Reset_Polarity, Value);
     660:	90 e0       	ldi	r25, 0x00	; 0
     662:	04 c0       	rjmp	.+8      	; 0x66c <V2Params_SetParameterValue+0x2e>
     664:	18 39       	cpi	r17, 0x98	; 152

	/* The target SCK line period is a non-volatile parameter, save to EEPROM when changed */
	if (ParamID == PARAM_SCK_DURATION)
     666:	21 f4       	brne	.+8      	; 0x670 <V2Params_SetParameterValue+0x32>
     668:	81 e0       	ldi	r24, 0x01	; 1
	  eeprom_update_byte(&EEPROM_SCK_Duration, Value);
     66a:	90 e0       	ldi	r25, 0x00	; 0
     66c:	0e 94 8c 13 	call	0x2718	; 0x2718 <__eeupd_byte_usb162>
     670:	0f 90       	pop	r0
}
     672:	df 91       	pop	r29
     674:	cf 91       	pop	r28
     676:	1f 91       	pop	r17
     678:	08 95       	ret

0000067a <ISPTarget_SendByte>:
		 *
		 *  \param[in] Byte  Byte of data to send to the attached target
		 */
		static inline void ISPTarget_SendByte(const uint8_t Byte)
		{
			if (HardwareSPIMode)
     67a:	90 91 67 01 	lds	r25, 0x0167
     67e:	99 23       	and	r25, r25
     680:	29 f0       	breq	.+10     	; 0x68c <ISPTarget_SendByte+0x12>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     682:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     684:	0d b4       	in	r0, 0x2d	; 45
     686:	07 fe       	sbrs	r0, 7
     688:	fd cf       	rjmp	.-6      	; 0x684 <ISPTarget_SendByte+0xa>
     68a:	08 95       	ret
			  SPI_SendByte(Byte);
			else
			  ISPTarget_TransferSoftSPIByte(Byte);
     68c:	99 c4       	rjmp	.+2354   	; 0xfc0 <ISPTarget_TransferSoftSPIByte>

0000068e <ISPTarget_TransferByte>:
     68e:	90 91 67 01 	lds	r25, 0x0167
		 */
		static inline uint8_t ISPTarget_TransferByte(const uint8_t Byte)
		{
			uint8_t ReceivedByte;

			if (HardwareSPIMode)
     692:	99 23       	and	r25, r25
     694:	31 f0       	breq	.+12     	; 0x6a2 <ISPTarget_TransferByte+0x14>
			 *  \return Response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_TransferByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline uint8_t SPI_TransferByte(const uint8_t Byte)
			{
				SPDR = Byte;
     696:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     698:	0d b4       	in	r0, 0x2d	; 45
     69a:	07 fe       	sbrs	r0, 7
     69c:	fd cf       	rjmp	.-6      	; 0x698 <ISPTarget_TransferByte+0xa>
				return SPDR;
     69e:	8e b5       	in	r24, 0x2e	; 46
     6a0:	08 95       	ret
			  ReceivedByte = SPI_TransferByte(Byte);
			else
			  ReceivedByte = ISPTarget_TransferSoftSPIByte(Byte);
     6a2:	8e c4       	rjmp	.+2332   	; 0xfc0 <ISPTarget_TransferSoftSPIByte>

000006a4 <ISPTarget_ReceiveByte>:
     6a4:	80 91 67 01 	lds	r24, 0x0167
		 */
		static inline uint8_t ISPTarget_ReceiveByte(void)
		{
			uint8_t ReceivedByte;

			if (HardwareSPIMode)
     6a8:	88 23       	and	r24, r24
     6aa:	31 f0       	breq	.+12     	; 0x6b8 <ISPTarget_ReceiveByte+0x14>
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     6ac:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     6ae:	0d b4       	in	r0, 0x2d	; 45
     6b0:	07 fe       	sbrs	r0, 7
     6b2:	fd cf       	rjmp	.-6      	; 0x6ae <ISPTarget_ReceiveByte+0xa>
				return SPDR;
     6b4:	8e b5       	in	r24, 0x2e	; 46
     6b6:	08 95       	ret
			  ReceivedByte = SPI_ReceiveByte();
			else
			  ReceivedByte = ISPTarget_TransferSoftSPIByte(0x00);
     6b8:	80 e0       	ldi	r24, 0x00	; 0
     6ba:	82 c4       	rjmp	.+2308   	; 0xfc0 <ISPTarget_TransferSoftSPIByte>

000006bc <ISPProtocol_ProgramMemory>:
     6bc:	4f 92       	push	r4
			#if defined(INVERTED_ISP_MISO)
			return ~ReceivedByte;
			#else
			return  ReceivedByte;
			#endif
		}
     6be:	5f 92       	push	r5
 *  words or pages of data to the attached device.
 *
 *  \param[in] V2Command  Issued V2 Protocol command byte from the host
 */
void ISPProtocol_ProgramMemory(uint8_t V2Command)
{
     6c0:	6f 92       	push	r6
     6c2:	7f 92       	push	r7
     6c4:	8f 92       	push	r8
     6c6:	9f 92       	push	r9
     6c8:	af 92       	push	r10
     6ca:	bf 92       	push	r11
     6cc:	cf 92       	push	r12
     6ce:	df 92       	push	r13
     6d0:	ef 92       	push	r14
     6d2:	ff 92       	push	r15
     6d4:	0f 93       	push	r16
     6d6:	1f 93       	push	r17
     6d8:	cf 93       	push	r28
     6da:	df 93       	push	r29
     6dc:	cd b7       	in	r28, 0x3d	; 61
     6de:	de b7       	in	r29, 0x3e	; 62
     6e0:	c9 50       	subi	r28, 0x09	; 9
     6e2:	d1 40       	sbci	r29, 0x01	; 1
     6e4:	0f b6       	in	r0, 0x3f	; 63
     6e6:	f8 94       	cli
     6e8:	de bf       	out	0x3e, r29	; 62
     6ea:	0f be       	out	0x3f, r0	; 63
     6ec:	cd bf       	out	0x3d, r28	; 61
     6ee:	18 2f       	mov	r17, r24
		uint8_t  PollValue1;
		uint8_t  PollValue2;
		uint8_t  ProgData[256]; // Note, the Jungo driver has a very short ACK timeout period, need to buffer the
	} Write_Memory_Params;      // whole page and ACK the packet as fast as possible to prevent it from aborting

	Endpoint_Read_Stream_LE(&Write_Memory_Params, (sizeof(Write_Memory_Params) -
     6f0:	ce 01       	movw	r24, r28
     6f2:	01 96       	adiw	r24, 0x01	; 1
     6f4:	69 e0       	ldi	r22, 0x09	; 9
     6f6:	70 e0       	ldi	r23, 0x00	; 0
     6f8:	40 e0       	ldi	r20, 0x00	; 0
     6fa:	50 e0       	ldi	r21, 0x00	; 0
     6fc:	0e 94 39 0f 	call	0x1e72	; 0x1e72 <Endpoint_Read_Stream_LE>

				Temp = Data.Bytes[0];
				Data.Bytes[0] = Data.Bytes[1];
				Data.Bytes[1] = Temp;

				return Data.Word;
     700:	6a 81       	ldd	r22, Y+2	; 0x02
     702:	79 81       	ldd	r23, Y+1	; 0x01
	                                               sizeof(Write_Memory_Params.ProgData)), NULL);
	Write_Memory_Params.BytesToWrite = SwapEndian_16(Write_Memory_Params.BytesToWrite);
     704:	7a 83       	std	Y+2, r23	; 0x02
     706:	69 83       	std	Y+1, r22	; 0x01

	if (Write_Memory_Params.BytesToWrite > sizeof(Write_Memory_Params.ProgData))
     708:	81 e0       	ldi	r24, 0x01	; 1
     70a:	61 30       	cpi	r22, 0x01	; 1
     70c:	78 07       	cpc	r23, r24
     70e:	88 f0       	brcs	.+34     	; 0x732 <ISPProtocol_ProgramMemory+0x76>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     710:	80 91 e8 00 	lds	r24, 0x00E8
     714:	8b 77       	andi	r24, 0x7B	; 123
     716:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     71a:	82 e0       	ldi	r24, 0x02	; 2
     71c:	80 93 e9 00 	sts	0x00E9, r24
			 *  \param[in] DirectionMask  New endpoint direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask)
			{
				UECFG0X = ((UECFG0X & ~(1 << EPDIR)) | (DirectionMask ? (1 << EPDIR) : 0));
     720:	80 91 ec 00 	lds	r24, 0x00EC
     724:	81 60       	ori	r24, 0x01	; 1
     726:	80 93 ec 00 	sts	0x00EC, r24
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     72a:	10 93 f1 00 	sts	0x00F1, r17
     72e:	80 ec       	ldi	r24, 0xC0	; 192
     730:	d2 c0       	rjmp	.+420    	; 0x8d6 <ISPProtocol_ProgramMemory+0x21a>
		Endpoint_Write_8(STATUS_CMD_FAILED);
		Endpoint_ClearIN();
		return;
	}

	Endpoint_Read_Stream_LE(&Write_Memory_Params.ProgData, Write_Memory_Params.BytesToWrite, NULL);
     732:	ce 01       	movw	r24, r28
     734:	0a 96       	adiw	r24, 0x0a	; 10
     736:	40 e0       	ldi	r20, 0x00	; 0
     738:	50 e0       	ldi	r21, 0x00	; 0
     73a:	0e 94 39 0f 	call	0x1e72	; 0x1e72 <Endpoint_Read_Stream_LE>

	// The driver will terminate transfers that are a round multiple of the endpoint bank in size with a ZLP, need
	// to catch this and discard it before continuing on with packet processing to prevent communication issues
	if (((sizeof(uint8_t) + sizeof(Write_Memory_Params) - sizeof(Write_Memory_Params.ProgData)) +
     73e:	89 81       	ldd	r24, Y+1	; 0x01
     740:	9a 81       	ldd	r25, Y+2	; 0x02
     742:	0a 96       	adiw	r24, 0x0a	; 10
	    Write_Memory_Params.BytesToWrite) % AVRISP_DATA_EPSIZE == 0)
     744:	8f 73       	andi	r24, 0x3F	; 63
     746:	90 70       	andi	r25, 0x00	; 0

	Endpoint_Read_Stream_LE(&Write_Memory_Params.ProgData, Write_Memory_Params.BytesToWrite, NULL);

	// The driver will terminate transfers that are a round multiple of the endpoint bank in size with a ZLP, need
	// to catch this and discard it before continuing on with packet processing to prevent communication issues
	if (((sizeof(uint8_t) + sizeof(Write_Memory_Params) - sizeof(Write_Memory_Params.ProgData)) +
     748:	00 97       	sbiw	r24, 0x00	; 0
     74a:	39 f4       	brne	.+14     	; 0x75a <ISPProtocol_ProgramMemory+0x9e>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     74c:	80 91 e8 00 	lds	r24, 0x00E8
     750:	8b 77       	andi	r24, 0x7B	; 123
     752:	80 93 e8 00 	sts	0x00E8, r24
	    Write_Memory_Params.BytesToWrite) % AVRISP_DATA_EPSIZE == 0)
	{
		Endpoint_ClearOUT();
		Endpoint_WaitUntilReady();
     756:	0e 94 47 11 	call	0x228e	; 0x228e <Endpoint_WaitUntilReady>
     75a:	80 91 e8 00 	lds	r24, 0x00E8
     75e:	8b 77       	andi	r24, 0x7B	; 123
     760:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     764:	82 e0       	ldi	r24, 0x02	; 2
     766:	80 93 e9 00 	sts	0x00E9, r24
			 *  \param[in] DirectionMask  New endpoint direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask)
			{
				UECFG0X = ((UECFG0X & ~(1 << EPDIR)) | (DirectionMask ? (1 << EPDIR) : 0));
     76a:	80 91 ec 00 	lds	r24, 0x00EC
     76e:	81 60       	ori	r24, 0x01	; 1
     770:	80 93 ec 00 	sts	0x00EC, r24
	Endpoint_ClearOUT();
	Endpoint_SelectEndpoint(AVRISP_DATA_IN_EPADDR);
	Endpoint_SetEndpointDirection(ENDPOINT_DIR_IN);

	uint8_t  ProgrammingStatus = STATUS_CMD_OK;
	uint8_t  PollValue         = (V2Command == CMD_PROGRAM_FLASH_ISP) ? Write_Memory_Params.PollValue1 :
     774:	13 31       	cpi	r17, 0x13	; 19
     776:	11 f4       	brne	.+4      	; 0x77c <ISPProtocol_ProgramMemory+0xc0>
     778:	d8 84       	ldd	r13, Y+8	; 0x08
     77a:	01 c0       	rjmp	.+2      	; 0x77e <ISPProtocol_ProgramMemory+0xc2>
     77c:	d9 84       	ldd	r13, Y+9	; 0x09
	                                                                    Write_Memory_Params.PollValue2;
	uint16_t PollAddress       = 0;
	uint8_t* NextWriteByte     = Write_Memory_Params.ProgData;
	uint16_t PageStartAddress  = (CurrentAddress & 0xFFFF);
     77e:	40 90 a6 01 	lds	r4, 0x01A6
     782:	50 90 a7 01 	lds	r5, 0x01A7

	uint8_t  ProgrammingStatus = STATUS_CMD_OK;
	uint8_t  PollValue         = (V2Command == CMD_PROGRAM_FLASH_ISP) ? Write_Memory_Params.PollValue1 :
	                                                                    Write_Memory_Params.PollValue2;
	uint16_t PollAddress       = 0;
	uint8_t* NextWriteByte     = Write_Memory_Params.ProgData;
     786:	8a e0       	ldi	r24, 0x0A	; 10
     788:	88 2e       	mov	r8, r24
     78a:	91 2c       	mov	r9, r1
     78c:	8c 0e       	add	r8, r28
     78e:	9d 1e       	adc	r9, r29
	uint16_t PageStartAddress  = (CurrentAddress & 0xFFFF);

	for (uint16_t CurrentByte = 0; CurrentByte < Write_Memory_Params.BytesToWrite; CurrentByte++)
     790:	aa 24       	eor	r10, r10
     792:	bb 24       	eor	r11, r11
	Endpoint_SetEndpointDirection(ENDPOINT_DIR_IN);

	uint8_t  ProgrammingStatus = STATUS_CMD_OK;
	uint8_t  PollValue         = (V2Command == CMD_PROGRAM_FLASH_ISP) ? Write_Memory_Params.PollValue1 :
	                                                                    Write_Memory_Params.PollValue2;
	uint16_t PollAddress       = 0;
     794:	ee 24       	eor	r14, r14
     796:	ff 24       	eor	r15, r15
		ISPTarget_SendByte(ByteToWrite);

		/* AVR FLASH addressing requires us to modify the write command based on if we are writing a high
		 * or low byte at the current word address */
		if (V2Command == CMD_PROGRAM_FLASH_ISP)
		  Write_Memory_Params.ProgrammingCommands[0] ^= READ_WRITE_HIGH_BYTE_MASK;
     798:	98 e0       	ldi	r25, 0x08	; 8
     79a:	c9 2e       	mov	r12, r25
		if ((CurrentByte & 0x01) || (V2Command == CMD_PROGRAM_EEPROM_ISP))
		{
			CurrentAddress++;

			if ((V2Command == CMD_PROGRAM_FLASH_ISP) && !(CurrentAddress & 0xFFFF))
			  MustLoadExtendedAddress = true;
     79c:	77 24       	eor	r7, r7
     79e:	73 94       	inc	r7
	                                                                    Write_Memory_Params.PollValue2;
	uint16_t PollAddress       = 0;
	uint8_t* NextWriteByte     = Write_Memory_Params.ProgData;
	uint16_t PageStartAddress  = (CurrentAddress & 0xFFFF);

	for (uint16_t CurrentByte = 0; CurrentByte < Write_Memory_Params.BytesToWrite; CurrentByte++)
     7a0:	63 c0       	rjmp	.+198    	; 0x868 <ISPProtocol_ProgramMemory+0x1ac>
	{
		uint8_t ByteToWrite     = *(NextWriteByte++);
     7a2:	f4 01       	movw	r30, r8
     7a4:	61 90       	ld	r6, Z+
     7a6:	4f 01       	movw	r8, r30
		uint8_t ProgrammingMode = Write_Memory_Params.ProgrammingMode;
     7a8:	0b 81       	ldd	r16, Y+3	; 0x03

		/* Check to see if we need to send a LOAD EXTENDED ADDRESS command to the target */
		if (MustLoadExtendedAddress)
     7aa:	80 91 a5 01 	lds	r24, 0x01A5
     7ae:	88 23       	and	r24, r24
     7b0:	19 f0       	breq	.+6      	; 0x7b8 <ISPProtocol_ProgramMemory+0xfc>
		{
			ISPTarget_LoadExtendedAddress();
     7b2:	59 d4       	rcall	.+2226   	; 0x1066 <ISPTarget_LoadExtendedAddress>
     7b4:	10 92 a5 01 	sts	0x01A5, r1
			MustLoadExtendedAddress = false;
     7b8:	8d 81       	ldd	r24, Y+5	; 0x05
		}

		ISPTarget_SendByte(Write_Memory_Params.ProgrammingCommands[0]);
     7ba:	5f df       	rcall	.-322    	; 0x67a <ISPTarget_SendByte>
     7bc:	80 91 a7 01 	lds	r24, 0x01A7
		ISPTarget_SendByte(CurrentAddress >> 8);
     7c0:	5c df       	rcall	.-328    	; 0x67a <ISPTarget_SendByte>
     7c2:	80 91 a6 01 	lds	r24, 0x01A6
     7c6:	59 df       	rcall	.-334    	; 0x67a <ISPTarget_SendByte>
		ISPTarget_SendByte(CurrentAddress & 0xFF);
     7c8:	86 2d       	mov	r24, r6
     7ca:	57 df       	rcall	.-338    	; 0x67a <ISPTarget_SendByte>
     7cc:	13 31       	cpi	r17, 0x13	; 19
     7ce:	19 f4       	brne	.+6      	; 0x7d6 <ISPProtocol_ProgramMemory+0x11a>
		ISPTarget_SendByte(ByteToWrite);
     7d0:	8d 81       	ldd	r24, Y+5	; 0x05
     7d2:	8c 25       	eor	r24, r12
     7d4:	8d 83       	std	Y+5, r24	; 0x05

		/* AVR FLASH addressing requires us to modify the write command based on if we are writing a high
		 * or low byte at the current word address */
		if (V2Command == CMD_PROGRAM_FLASH_ISP)
     7d6:	e1 14       	cp	r14, r1
     7d8:	f1 04       	cpc	r15, r1
		  Write_Memory_Params.ProgrammingCommands[0] ^= READ_WRITE_HIGH_BYTE_MASK;
     7da:	79 f4       	brne	.+30     	; 0x7fa <ISPProtocol_ProgramMemory+0x13e>
     7dc:	6d 14       	cp	r6, r13
     7de:	69 f0       	breq	.+26     	; 0x7fa <ISPProtocol_ProgramMemory+0x13e>

		/* Check to see if we have a valid polling address */
		if (!(PollAddress) && (ByteToWrite != PollValue))
     7e0:	8f 81       	ldd	r24, Y+7	; 0x07
     7e2:	a0 fe       	sbrs	r10, 0
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <ISPProtocol_ProgramMemory+0x132>
     7e6:	13 31       	cpi	r17, 0x13	; 19
     7e8:	11 f4       	brne	.+4      	; 0x7ee <ISPProtocol_ProgramMemory+0x132>
     7ea:	88 60       	ori	r24, 0x08	; 8
		{
			if ((CurrentByte & 0x01) && (V2Command == CMD_PROGRAM_FLASH_ISP))
     7ec:	01 c0       	rjmp	.+2      	; 0x7f0 <ISPProtocol_ProgramMemory+0x134>
     7ee:	87 7f       	andi	r24, 0xF7	; 247
     7f0:	8f 83       	std	Y+7, r24	; 0x07
     7f2:	e0 90 a6 01 	lds	r14, 0x01A6
			  Write_Memory_Params.ProgrammingCommands[2] |=  READ_WRITE_HIGH_BYTE_MASK;
     7f6:	f0 90 a7 01 	lds	r15, 0x01A7
			else
			  Write_Memory_Params.ProgrammingCommands[2] &= ~READ_WRITE_HIGH_BYTE_MASK;
     7fa:	00 fd       	sbrc	r16, 0

			PollAddress = (CurrentAddress & 0xFFFF);
     7fc:	11 c0       	rjmp	.+34     	; 0x820 <ISPProtocol_ProgramMemory+0x164>
     7fe:	e1 14       	cp	r14, r1
     800:	f1 04       	cpc	r15, r1
     802:	21 f4       	brne	.+8      	; 0x80c <ISPProtocol_ProgramMemory+0x150>
		}

		/* If in word programming mode, commit the byte to the target's memory */
		if (!(ProgrammingMode & PROG_MODE_PAGED_WRITES_MASK))
     804:	03 fd       	sbrc	r16, 3
     806:	02 c0       	rjmp	.+4      	; 0x80c <ISPProtocol_ProgramMemory+0x150>
		{
			/* If the current polling address is invalid, switch to timed delay write completion mode */
			if (!(PollAddress) && !(ProgrammingMode & PROG_MODE_WORD_READYBUSY_MASK))
     808:	09 7f       	andi	r16, 0xF9	; 249
     80a:	02 60       	ori	r16, 0x02	; 2
     80c:	80 2f       	mov	r24, r16
     80e:	b7 01       	movw	r22, r14
     810:	4d 2d       	mov	r20, r13
			  ProgrammingMode = (ProgrammingMode & ~PROG_MODE_WORD_VALUE_MASK) | PROG_MODE_WORD_TIMEDELAY_MASK;
     812:	2c 81       	ldd	r18, Y+4	; 0x04
     814:	0f 81       	ldd	r16, Y+7	; 0x07

			ProgrammingStatus = ISPTarget_WaitForProgComplete(ProgrammingMode, PollAddress, PollValue,
     816:	30 d4       	rcall	.+2144   	; 0x1078 <ISPTarget_WaitForProgComplete>
     818:	88 23       	and	r24, r24
     81a:	69 f5       	brne	.+90     	; 0x876 <ISPProtocol_ProgramMemory+0x1ba>
     81c:	ee 24       	eor	r14, r14
     81e:	ff 24       	eor	r15, r15
     820:	a0 fc       	sbrc	r10, 0
     822:	02 c0       	rjmp	.+4      	; 0x828 <ISPProtocol_ProgramMemory+0x16c>
			                                                  Write_Memory_Params.DelayMS,
			                                                  Write_Memory_Params.ProgrammingCommands[2]);

			/* Abort the programming loop early if the byte/word programming failed */
			if (ProgrammingStatus != STATUS_CMD_OK)
     824:	15 31       	cpi	r17, 0x15	; 21
     826:	e9 f4       	brne	.+58     	; 0x862 <ISPProtocol_ProgramMemory+0x1a6>
			  break;

			/* Must reset the polling address afterwards, so it is not erroneously used for the next byte */
			PollAddress = 0;
     828:	80 91 a6 01 	lds	r24, 0x01A6
		}

		/* EEPROM just increments the address each byte, flash needs to increment on each word and
		 * also check to ensure that a LOAD EXTENDED ADDRESS command is issued each time the extended
		 * address boundary has been crossed during FLASH memory programming */
		if ((CurrentByte & 0x01) || (V2Command == CMD_PROGRAM_EEPROM_ISP))
     82c:	90 91 a7 01 	lds	r25, 0x01A7
     830:	a0 91 a8 01 	lds	r26, 0x01A8
		{
			CurrentAddress++;
     834:	b0 91 a9 01 	lds	r27, 0x01A9
     838:	01 96       	adiw	r24, 0x01	; 1
     83a:	a1 1d       	adc	r26, r1
     83c:	b1 1d       	adc	r27, r1
     83e:	80 93 a6 01 	sts	0x01A6, r24
     842:	90 93 a7 01 	sts	0x01A7, r25
     846:	a0 93 a8 01 	sts	0x01A8, r26
     84a:	b0 93 a9 01 	sts	0x01A9, r27
     84e:	13 31       	cpi	r17, 0x13	; 19
     850:	41 f4       	brne	.+16     	; 0x862 <ISPProtocol_ProgramMemory+0x1a6>
     852:	a0 70       	andi	r26, 0x00	; 0
     854:	b0 70       	andi	r27, 0x00	; 0
     856:	00 97       	sbiw	r24, 0x00	; 0
     858:	a1 05       	cpc	r26, r1

			if ((V2Command == CMD_PROGRAM_FLASH_ISP) && !(CurrentAddress & 0xFFFF))
     85a:	b1 05       	cpc	r27, r1
     85c:	11 f4       	brne	.+4      	; 0x862 <ISPProtocol_ProgramMemory+0x1a6>
     85e:	70 92 a5 01 	sts	0x01A5, r7
     862:	08 94       	sec
     864:	a1 1c       	adc	r10, r1
     866:	b1 1c       	adc	r11, r1
     868:	89 81       	ldd	r24, Y+1	; 0x01
			  MustLoadExtendedAddress = true;
     86a:	9a 81       	ldd	r25, Y+2	; 0x02
     86c:	a8 16       	cp	r10, r24
	                                                                    Write_Memory_Params.PollValue2;
	uint16_t PollAddress       = 0;
	uint8_t* NextWriteByte     = Write_Memory_Params.ProgData;
	uint16_t PageStartAddress  = (CurrentAddress & 0xFFFF);

	for (uint16_t CurrentByte = 0; CurrentByte < Write_Memory_Params.BytesToWrite; CurrentByte++)
     86e:	b9 06       	cpc	r11, r25
     870:	08 f4       	brcc	.+2      	; 0x874 <ISPProtocol_ProgramMemory+0x1b8>
     872:	97 cf       	rjmp	.-210    	; 0x7a2 <ISPProtocol_ProgramMemory+0xe6>
     874:	80 e0       	ldi	r24, 0x00	; 0
     876:	9b 81       	ldd	r25, Y+3	; 0x03
     878:	97 ff       	sbrs	r25, 7
     87a:	2b c0       	rjmp	.+86     	; 0x8d2 <ISPProtocol_ProgramMemory+0x216>
     87c:	8e 81       	ldd	r24, Y+6	; 0x06
     87e:	fd de       	rcall	.-518    	; 0x67a <ISPTarget_SendByte>
     880:	85 2d       	mov	r24, r5
			  MustLoadExtendedAddress = true;
		}
	}

	/* If the current page must be committed, send the PROGRAM PAGE command to the target */
	if (Write_Memory_Params.ProgrammingMode & PROG_MODE_COMMIT_PAGE_MASK)
     882:	fb de       	rcall	.-522    	; 0x67a <ISPTarget_SendByte>
     884:	84 2d       	mov	r24, r4
     886:	f9 de       	rcall	.-526    	; 0x67a <ISPTarget_SendByte>
	{
		ISPTarget_SendByte(Write_Memory_Params.ProgrammingCommands[1]);
     888:	80 e0       	ldi	r24, 0x00	; 0
     88a:	f7 de       	rcall	.-530    	; 0x67a <ISPTarget_SendByte>
     88c:	8b 81       	ldd	r24, Y+3	; 0x03
		ISPTarget_SendByte(PageStartAddress >> 8);
     88e:	85 ff       	sbrs	r24, 5
     890:	06 c0       	rjmp	.+12     	; 0x89e <ISPProtocol_ProgramMemory+0x1e2>
     892:	e1 14       	cp	r14, r1
		ISPTarget_SendByte(PageStartAddress & 0xFF);
     894:	f1 04       	cpc	r15, r1
     896:	19 f4       	brne	.+6      	; 0x89e <ISPProtocol_ProgramMemory+0x1e2>
     898:	8f 7c       	andi	r24, 0xCF	; 207
		ISPTarget_SendByte(0x00);
     89a:	80 61       	ori	r24, 0x10	; 16
     89c:	8b 83       	std	Y+3, r24	; 0x03
     89e:	8b 81       	ldd	r24, Y+3	; 0x03

		/* Check if polling is enabled and possible, if not switch to timed delay mode */
		if ((Write_Memory_Params.ProgrammingMode & PROG_MODE_PAGED_VALUE_MASK) && !(PollAddress))
     8a0:	b7 01       	movw	r22, r14
     8a2:	4d 2d       	mov	r20, r13
     8a4:	2c 81       	ldd	r18, Y+4	; 0x04
     8a6:	0f 81       	ldd	r16, Y+7	; 0x07
     8a8:	e7 d3       	rcall	.+1998   	; 0x1078 <ISPTarget_WaitForProgComplete>
     8aa:	13 31       	cpi	r17, 0x13	; 19
		{
			Write_Memory_Params.ProgrammingMode = (Write_Memory_Params.ProgrammingMode & ~PROG_MODE_PAGED_VALUE_MASK) |
     8ac:	91 f4       	brne	.+36     	; 0x8d2 <ISPProtocol_ProgramMemory+0x216>
     8ae:	40 91 a6 01 	lds	r20, 0x01A6
												   PROG_MODE_PAGED_TIMEDELAY_MASK;
		}

		ProgrammingStatus = ISPTarget_WaitForProgComplete(Write_Memory_Params.ProgrammingMode, PollAddress, PollValue,
     8b2:	50 91 a7 01 	lds	r21, 0x01A7
     8b6:	60 91 a8 01 	lds	r22, 0x01A8
     8ba:	70 91 a9 01 	lds	r23, 0x01A9
     8be:	60 70       	andi	r22, 0x00	; 0
		                                                  Write_Memory_Params.DelayMS,
		                                                  Write_Memory_Params.ProgrammingCommands[2]);

		/* Check to see if the FLASH address has crossed the extended address boundary */
		if ((V2Command == CMD_PROGRAM_FLASH_ISP) && !(CurrentAddress & 0xFFFF))
     8c0:	70 70       	andi	r23, 0x00	; 0
     8c2:	41 15       	cp	r20, r1
     8c4:	51 05       	cpc	r21, r1
     8c6:	61 05       	cpc	r22, r1
     8c8:	71 05       	cpc	r23, r1
     8ca:	19 f4       	brne	.+6      	; 0x8d2 <ISPProtocol_ProgramMemory+0x216>
     8cc:	91 e0       	ldi	r25, 0x01	; 1
     8ce:	90 93 a5 01 	sts	0x01A5, r25
     8d2:	10 93 f1 00 	sts	0x00F1, r17
     8d6:	80 93 f1 00 	sts	0x00F1, r24
     8da:	80 91 e8 00 	lds	r24, 0x00E8
     8de:	8e 77       	andi	r24, 0x7E	; 126
     8e0:	80 93 e8 00 	sts	0x00E8, r24
		  MustLoadExtendedAddress = true;
     8e4:	c7 5f       	subi	r28, 0xF7	; 247
     8e6:	de 4f       	sbci	r29, 0xFE	; 254
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     8e8:	0f b6       	in	r0, 0x3f	; 63
     8ea:	f8 94       	cli
     8ec:	de bf       	out	0x3e, r29	; 62
     8ee:	0f be       	out	0x3f, r0	; 63
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     8f0:	cd bf       	out	0x3d, r28	; 61
     8f2:	df 91       	pop	r29
     8f4:	cf 91       	pop	r28
     8f6:	1f 91       	pop	r17
     8f8:	0f 91       	pop	r16
	}

	Endpoint_Write_8(V2Command);
	Endpoint_Write_8(ProgrammingStatus);
	Endpoint_ClearIN();
}
     8fa:	ff 90       	pop	r15
     8fc:	ef 90       	pop	r14
     8fe:	df 90       	pop	r13
     900:	cf 90       	pop	r12
     902:	bf 90       	pop	r11
     904:	af 90       	pop	r10
     906:	9f 90       	pop	r9
     908:	8f 90       	pop	r8
     90a:	7f 90       	pop	r7
     90c:	6f 90       	pop	r6
     90e:	5f 90       	pop	r5
     910:	4f 90       	pop	r4
     912:	08 95       	ret

00000914 <ISPProtocol_ReadMemory>:
     914:	df 92       	push	r13
     916:	ef 92       	push	r14
     918:	ff 92       	push	r15
     91a:	0f 93       	push	r16
     91c:	1f 93       	push	r17
     91e:	cf 93       	push	r28
     920:	df 93       	push	r29
     922:	00 d0       	rcall	.+0      	; 0x924 <ISPProtocol_ReadMemory+0x10>
     924:	0f 92       	push	r0
     926:	cd b7       	in	r28, 0x3d	; 61
     928:	de b7       	in	r29, 0x3e	; 62
 *  words or pages of data from the attached device.
 *
 *  \param[in] V2Command  Issued V2 Protocol command byte from the host
 */
void ISPProtocol_ReadMemory(uint8_t V2Command)
{
     92a:	f8 2e       	mov	r15, r24
	{
		uint16_t BytesToRead;
		uint8_t  ReadMemoryCommand;
	} Read_Memory_Params;

	Endpoint_Read_Stream_LE(&Read_Memory_Params, sizeof(Read_Memory_Params), NULL);
     92c:	ce 01       	movw	r24, r28
     92e:	01 96       	adiw	r24, 0x01	; 1
     930:	63 e0       	ldi	r22, 0x03	; 3
     932:	70 e0       	ldi	r23, 0x00	; 0
     934:	40 e0       	ldi	r20, 0x00	; 0
     936:	50 e0       	ldi	r21, 0x00	; 0
     938:	0e 94 39 0f 	call	0x1e72	; 0x1e72 <Endpoint_Read_Stream_LE>
				{
					uint16_t Word;
					uint8_t  Bytes[2];
				} Data;

				Data.Word = Word;
     93c:	89 81       	ldd	r24, Y+1	; 0x01
     93e:	9a 81       	ldd	r25, Y+2	; 0x02
	Read_Memory_Params.BytesToRead = SwapEndian_16(Read_Memory_Params.BytesToRead);
     940:	99 83       	std	Y+1, r25	; 0x01
     942:	8a 83       	std	Y+2, r24	; 0x02
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     944:	80 91 e8 00 	lds	r24, 0x00E8
     948:	8b 77       	andi	r24, 0x7B	; 123
     94a:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     94e:	82 e0       	ldi	r24, 0x02	; 2
     950:	80 93 e9 00 	sts	0x00E9, r24
			 *  \param[in] DirectionMask  New endpoint direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask)
			{
				UECFG0X = ((UECFG0X & ~(1 << EPDIR)) | (DirectionMask ? (1 << EPDIR) : 0));
     954:	80 91 ec 00 	lds	r24, 0x00EC
     958:	81 60       	ori	r24, 0x01	; 1
     95a:	80 93 ec 00 	sts	0x00EC, r24
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     95e:	f0 92 f1 00 	sts	0x00F1, r15
     962:	10 92 f1 00 	sts	0x00F1, r1

	Endpoint_Write_8(V2Command);
	Endpoint_Write_8(STATUS_CMD_OK);

	/* Read each byte from the device and write them to the packet for the host */
	for (uint16_t CurrentByte = 0; CurrentByte < Read_Memory_Params.BytesToRead; CurrentByte++)
     966:	00 e0       	ldi	r16, 0x00	; 0
     968:	10 e0       	ldi	r17, 0x00	; 0
		}

		/* AVR FLASH addressing requires us to modify the read command based on if we are reading a high
		 * or low byte at the current word address */
		if (V2Command == CMD_READ_FLASH_ISP)
		  Read_Memory_Params.ReadMemoryCommand ^= READ_WRITE_HIGH_BYTE_MASK;
     96a:	28 e0       	ldi	r18, 0x08	; 8
     96c:	d2 2e       	mov	r13, r18
		if ((CurrentByte & 0x01) || (V2Command == CMD_READ_EEPROM_ISP))
		{
			CurrentAddress++;

			if ((V2Command != CMD_READ_EEPROM_ISP) && !(CurrentAddress & 0xFFFF))
			  MustLoadExtendedAddress = true;
     96e:	ee 24       	eor	r14, r14
     970:	e3 94       	inc	r14

	Endpoint_Write_8(V2Command);
	Endpoint_Write_8(STATUS_CMD_OK);

	/* Read each byte from the device and write them to the packet for the host */
	for (uint16_t CurrentByte = 0; CurrentByte < Read_Memory_Params.BytesToRead; CurrentByte++)
     972:	48 c0       	rjmp	.+144    	; 0xa04 <ISPProtocol_ReadMemory+0xf0>
	{
		/* Check to see if we need to send a LOAD EXTENDED ADDRESS command to the target */
		if (MustLoadExtendedAddress)
     974:	80 91 a5 01 	lds	r24, 0x01A5
     978:	88 23       	and	r24, r24
     97a:	19 f0       	breq	.+6      	; 0x982 <ISPProtocol_ReadMemory+0x6e>
		{
			ISPTarget_LoadExtendedAddress();
     97c:	74 d3       	rcall	.+1768   	; 0x1066 <ISPTarget_LoadExtendedAddress>
     97e:	10 92 a5 01 	sts	0x01A5, r1
			MustLoadExtendedAddress = false;
     982:	8b 81       	ldd	r24, Y+3	; 0x03
		}

		/* Read the next byte from the desired memory space in the device */
		ISPTarget_SendByte(Read_Memory_Params.ReadMemoryCommand);
     984:	7a de       	rcall	.-780    	; 0x67a <ISPTarget_SendByte>
     986:	80 91 a7 01 	lds	r24, 0x01A7
		ISPTarget_SendByte(CurrentAddress >> 8);
     98a:	77 de       	rcall	.-786    	; 0x67a <ISPTarget_SendByte>
     98c:	80 91 a6 01 	lds	r24, 0x01A6
     990:	74 de       	rcall	.-792    	; 0x67a <ISPTarget_SendByte>
		ISPTarget_SendByte(CurrentAddress & 0xFF);
     992:	88 de       	rcall	.-752    	; 0x6a4 <ISPTarget_ReceiveByte>
     994:	80 93 f1 00 	sts	0x00F1, r24
     998:	80 91 e8 00 	lds	r24, 0x00E8
		Endpoint_Write_8(ISPTarget_ReceiveByte());
     99c:	85 fd       	sbrc	r24, 5
     99e:	07 c0       	rjmp	.+14     	; 0x9ae <ISPProtocol_ReadMemory+0x9a>
     9a0:	80 91 e8 00 	lds	r24, 0x00E8
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
     9a4:	8e 77       	andi	r24, 0x7E	; 126

		/* Check if the endpoint bank is currently full, if so send the packet */
		if (!(Endpoint_IsReadWriteAllowed()))
     9a6:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     9aa:	0e 94 47 11 	call	0x228e	; 0x228e <Endpoint_WaitUntilReady>
     9ae:	24 e1       	ldi	r18, 0x14	; 20
     9b0:	f2 16       	cp	r15, r18
     9b2:	19 f4       	brne	.+6      	; 0x9ba <ISPProtocol_ReadMemory+0xa6>
		{
			Endpoint_ClearIN();
			Endpoint_WaitUntilReady();
     9b4:	8b 81       	ldd	r24, Y+3	; 0x03
     9b6:	8d 25       	eor	r24, r13
		}

		/* AVR FLASH addressing requires us to modify the read command based on if we are reading a high
		 * or low byte at the current word address */
		if (V2Command == CMD_READ_FLASH_ISP)
     9b8:	8b 83       	std	Y+3, r24	; 0x03
     9ba:	00 fd       	sbrc	r16, 0
     9bc:	03 c0       	rjmp	.+6      	; 0x9c4 <ISPProtocol_ReadMemory+0xb0>
		  Read_Memory_Params.ReadMemoryCommand ^= READ_WRITE_HIGH_BYTE_MASK;
     9be:	86 e1       	ldi	r24, 0x16	; 22
     9c0:	f8 16       	cp	r15, r24
     9c2:	f1 f4       	brne	.+60     	; 0xa00 <ISPProtocol_ReadMemory+0xec>

		/* EEPROM just increments the address each byte, flash needs to increment on each word and
		 * also check to ensure that a LOAD EXTENDED ADDRESS command is issued each time the extended
		 * address boundary has been crossed */
		if ((CurrentByte & 0x01) || (V2Command == CMD_READ_EEPROM_ISP))
     9c4:	80 91 a6 01 	lds	r24, 0x01A6
     9c8:	90 91 a7 01 	lds	r25, 0x01A7
     9cc:	a0 91 a8 01 	lds	r26, 0x01A8
		{
			CurrentAddress++;
     9d0:	b0 91 a9 01 	lds	r27, 0x01A9
     9d4:	01 96       	adiw	r24, 0x01	; 1
     9d6:	a1 1d       	adc	r26, r1
     9d8:	b1 1d       	adc	r27, r1
     9da:	80 93 a6 01 	sts	0x01A6, r24
     9de:	90 93 a7 01 	sts	0x01A7, r25
     9e2:	a0 93 a8 01 	sts	0x01A8, r26
     9e6:	b0 93 a9 01 	sts	0x01A9, r27
     9ea:	26 e1       	ldi	r18, 0x16	; 22
     9ec:	f2 16       	cp	r15, r18
     9ee:	41 f0       	breq	.+16     	; 0xa00 <ISPProtocol_ReadMemory+0xec>
     9f0:	a0 70       	andi	r26, 0x00	; 0
     9f2:	b0 70       	andi	r27, 0x00	; 0

			if ((V2Command != CMD_READ_EEPROM_ISP) && !(CurrentAddress & 0xFFFF))
     9f4:	00 97       	sbiw	r24, 0x00	; 0
     9f6:	a1 05       	cpc	r26, r1
     9f8:	b1 05       	cpc	r27, r1
     9fa:	11 f4       	brne	.+4      	; 0xa00 <ISPProtocol_ReadMemory+0xec>
     9fc:	e0 92 a5 01 	sts	0x01A5, r14
     a00:	0f 5f       	subi	r16, 0xFF	; 255
     a02:	1f 4f       	sbci	r17, 0xFF	; 255
     a04:	89 81       	ldd	r24, Y+1	; 0x01
			  MustLoadExtendedAddress = true;
     a06:	9a 81       	ldd	r25, Y+2	; 0x02
     a08:	08 17       	cp	r16, r24

	Endpoint_Write_8(V2Command);
	Endpoint_Write_8(STATUS_CMD_OK);

	/* Read each byte from the device and write them to the packet for the host */
	for (uint16_t CurrentByte = 0; CurrentByte < Read_Memory_Params.BytesToRead; CurrentByte++)
     a0a:	19 07       	cpc	r17, r25
     a0c:	08 f4       	brcc	.+2      	; 0xa10 <ISPProtocol_ReadMemory+0xfc>
     a0e:	b2 cf       	rjmp	.-156    	; 0x974 <ISPProtocol_ReadMemory+0x60>
     a10:	10 92 f1 00 	sts	0x00F1, r1
     a14:	90 91 e8 00 	lds	r25, 0x00E8
     a18:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     a1c:	8e 77       	andi	r24, 0x7E	; 126
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
     a1e:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     a22:	95 fd       	sbrc	r25, 5
     a24:	09 c0       	rjmp	.+18     	; 0xa38 <ISPProtocol_ReadMemory+0x124>
     a26:	0e 94 47 11 	call	0x228e	; 0x228e <Endpoint_WaitUntilReady>
     a2a:	80 91 e8 00 	lds	r24, 0x00E8

	bool IsEndpointFull = !(Endpoint_IsReadWriteAllowed());
	Endpoint_ClearIN();

	/* Ensure last packet is a short packet to terminate the transfer */
	if (IsEndpointFull)
     a2e:	8e 77       	andi	r24, 0x7E	; 126
	{
		Endpoint_WaitUntilReady();
     a30:	80 93 e8 00 	sts	0x00E8, r24
     a34:	0e 94 47 11 	call	0x228e	; 0x228e <Endpoint_WaitUntilReady>
     a38:	0f 90       	pop	r0
     a3a:	0f 90       	pop	r0
     a3c:	0f 90       	pop	r0
		Endpoint_ClearIN();
		Endpoint_WaitUntilReady();
     a3e:	df 91       	pop	r29
     a40:	cf 91       	pop	r28
	}
}
     a42:	1f 91       	pop	r17
     a44:	0f 91       	pop	r16
     a46:	ff 90       	pop	r15
     a48:	ef 90       	pop	r14
     a4a:	df 90       	pop	r13
     a4c:	08 95       	ret

00000a4e <ISPProtocol_ReadFuseLockSigOSCCAL>:
     a4e:	cf 92       	push	r12
     a50:	df 92       	push	r13
     a52:	ef 92       	push	r14
     a54:	ff 92       	push	r15
     a56:	0f 93       	push	r16
 *  reading the requested configuration byte from the device.
 *
 *  \param[in] V2Command  Issued V2 Protocol command byte from the host
 */
void ISPProtocol_ReadFuseLockSigOSCCAL(uint8_t V2Command)
{
     a58:	1f 93       	push	r17
     a5a:	cf 93       	push	r28
     a5c:	df 93       	push	r29
     a5e:	cd b7       	in	r28, 0x3d	; 61
     a60:	de b7       	in	r29, 0x3e	; 62
     a62:	29 97       	sbiw	r28, 0x09	; 9
     a64:	0f b6       	in	r0, 0x3f	; 63
     a66:	f8 94       	cli
     a68:	de bf       	out	0x3e, r29	; 62
     a6a:	0f be       	out	0x3f, r0	; 63
     a6c:	cd bf       	out	0x3d, r28	; 61
     a6e:	d8 2e       	mov	r13, r24
	{
		uint8_t RetByte;
		uint8_t ReadCommandBytes[4];
	} Read_FuseLockSigOSCCAL_Params;

	Endpoint_Read_Stream_LE(&Read_FuseLockSigOSCCAL_Params, sizeof(Read_FuseLockSigOSCCAL_Params), NULL);
     a70:	ce 01       	movw	r24, r28
     a72:	05 96       	adiw	r24, 0x05	; 5
     a74:	65 e0       	ldi	r22, 0x05	; 5
     a76:	70 e0       	ldi	r23, 0x00	; 0
     a78:	40 e0       	ldi	r20, 0x00	; 0
     a7a:	50 e0       	ldi	r21, 0x00	; 0
     a7c:	0e 94 39 0f 	call	0x1e72	; 0x1e72 <Endpoint_Read_Stream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     a80:	80 91 e8 00 	lds	r24, 0x00E8
     a84:	8b 77       	andi	r24, 0x7B	; 123
     a86:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     a8a:	82 e0       	ldi	r24, 0x02	; 2
     a8c:	80 93 e9 00 	sts	0x00E9, r24
			 *  \param[in] DirectionMask  New endpoint direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask)
			{
				UECFG0X = ((UECFG0X & ~(1 << EPDIR)) | (DirectionMask ? (1 << EPDIR) : 0));
     a90:	80 91 ec 00 	lds	r24, 0x00EC
     a94:	81 60       	ori	r24, 0x01	; 1
     a96:	80 93 ec 00 	sts	0x00EC, r24
     a9a:	8e 01       	movw	r16, r28
     a9c:	0a 5f       	subi	r16, 0xFA	; 250
     a9e:	1f 4f       	sbci	r17, 0xFF	; 255
     aa0:	7e 01       	movw	r14, r28
     aa2:	08 94       	sec
     aa4:	e1 1c       	adc	r14, r1
     aa6:	f1 1c       	adc	r15, r1
     aa8:	34 e0       	ldi	r19, 0x04	; 4
     aaa:	c3 2e       	mov	r12, r19

	uint8_t ResponseBytes[4];

	/* Send the Fuse or Lock byte read commands as given by the host to the device, store response */
	for (uint8_t RByte = 0; RByte < sizeof(ResponseBytes); RByte++)
	  ResponseBytes[RByte] = ISPTarget_TransferByte(Read_FuseLockSigOSCCAL_Params.ReadCommandBytes[RByte]);
     aac:	f8 01       	movw	r30, r16
     aae:	81 91       	ld	r24, Z+
     ab0:	8f 01       	movw	r16, r30
     ab2:	ed dd       	rcall	.-1062   	; 0x68e <ISPTarget_TransferByte>
     ab4:	f7 01       	movw	r30, r14
     ab6:	81 93       	st	Z+, r24
     ab8:	7f 01       	movw	r14, r30
     aba:	ca 94       	dec	r12
     abc:	b9 f7       	brne	.-18     	; 0xaac <ISPProtocol_ReadFuseLockSigOSCCAL+0x5e>
	Endpoint_SetEndpointDirection(ENDPOINT_DIR_IN);

	uint8_t ResponseBytes[4];

	/* Send the Fuse or Lock byte read commands as given by the host to the device, store response */
	for (uint8_t RByte = 0; RByte < sizeof(ResponseBytes); RByte++)
     abe:	d0 92 f1 00 	sts	0x00F1, r13
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     ac2:	10 92 f1 00 	sts	0x00F1, r1
     ac6:	8d 81       	ldd	r24, Y+5	; 0x05
	  ResponseBytes[RByte] = ISPTarget_TransferByte(Read_FuseLockSigOSCCAL_Params.ReadCommandBytes[RByte]);

	Endpoint_Write_8(V2Command);
	Endpoint_Write_8(STATUS_CMD_OK);
	Endpoint_Write_8(ResponseBytes[Read_FuseLockSigOSCCAL_Params.RetByte - 1]);
     ac8:	fe 01       	movw	r30, r28
     aca:	e8 0f       	add	r30, r24
     acc:	f1 1d       	adc	r31, r1
     ace:	80 81       	ld	r24, Z
     ad0:	80 93 f1 00 	sts	0x00F1, r24
     ad4:	10 92 f1 00 	sts	0x00F1, r1
     ad8:	80 91 e8 00 	lds	r24, 0x00E8
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     adc:	8e 77       	andi	r24, 0x7E	; 126
     ade:	80 93 e8 00 	sts	0x00E8, r24
     ae2:	29 96       	adiw	r28, 0x09	; 9
	Endpoint_Write_8(STATUS_CMD_OK);
	Endpoint_ClearIN();
}
     ae4:	0f b6       	in	r0, 0x3f	; 63
     ae6:	f8 94       	cli
     ae8:	de bf       	out	0x3e, r29	; 62
     aea:	0f be       	out	0x3f, r0	; 63
     aec:	cd bf       	out	0x3d, r28	; 61
     aee:	df 91       	pop	r29
     af0:	cf 91       	pop	r28
     af2:	1f 91       	pop	r17
     af4:	0f 91       	pop	r16
     af6:	ff 90       	pop	r15
     af8:	ef 90       	pop	r14
     afa:	df 90       	pop	r13
     afc:	cf 90       	pop	r12
     afe:	08 95       	ret

00000b00 <ISPProtocol_WriteFuseLock>:
     b00:	ef 92       	push	r14
 *  byte to the device.
 *
 *  \param[in] V2Command  Issued V2 Protocol command byte from the host
 */
void ISPProtocol_WriteFuseLock(uint8_t V2Command)
{
     b02:	ff 92       	push	r15
     b04:	0f 93       	push	r16
     b06:	1f 93       	push	r17
     b08:	cf 93       	push	r28
     b0a:	df 93       	push	r29
     b0c:	00 d0       	rcall	.+0      	; 0xb0e <ISPProtocol_WriteFuseLock+0xe>
     b0e:	00 d0       	rcall	.+0      	; 0xb10 <ISPProtocol_WriteFuseLock+0x10>
     b10:	cd b7       	in	r28, 0x3d	; 61
     b12:	de b7       	in	r29, 0x3e	; 62
     b14:	f8 2e       	mov	r15, r24
	struct
	{
		uint8_t WriteCommandBytes[4];
	} Write_FuseLockSig_Params;

	Endpoint_Read_Stream_LE(&Write_FuseLockSig_Params, sizeof(Write_FuseLockSig_Params), NULL);
     b16:	ce 01       	movw	r24, r28
     b18:	01 96       	adiw	r24, 0x01	; 1
     b1a:	64 e0       	ldi	r22, 0x04	; 4
     b1c:	70 e0       	ldi	r23, 0x00	; 0
     b1e:	40 e0       	ldi	r20, 0x00	; 0
     b20:	50 e0       	ldi	r21, 0x00	; 0
     b22:	0e 94 39 0f 	call	0x1e72	; 0x1e72 <Endpoint_Read_Stream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     b26:	80 91 e8 00 	lds	r24, 0x00E8
     b2a:	8b 77       	andi	r24, 0x7B	; 123
     b2c:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     b30:	82 e0       	ldi	r24, 0x02	; 2
     b32:	80 93 e9 00 	sts	0x00E9, r24
			 *  \param[in] DirectionMask  New endpoint direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask)
			{
				UECFG0X = ((UECFG0X & ~(1 << EPDIR)) | (DirectionMask ? (1 << EPDIR) : 0));
     b36:	80 91 ec 00 	lds	r24, 0x00EC
     b3a:	81 60       	ori	r24, 0x01	; 1
     b3c:	80 93 ec 00 	sts	0x00EC, r24
     b40:	8e 01       	movw	r16, r28
     b42:	0f 5f       	subi	r16, 0xFF	; 255
     b44:	1f 4f       	sbci	r17, 0xFF	; 255
     b46:	e4 e0       	ldi	r30, 0x04	; 4
     b48:	ee 2e       	mov	r14, r30
	Endpoint_SelectEndpoint(AVRISP_DATA_IN_EPADDR);
	Endpoint_SetEndpointDirection(ENDPOINT_DIR_IN);

	/* Send the Fuse or Lock byte program commands as given by the host to the device */
	for (uint8_t SByte = 0; SByte < sizeof(Write_FuseLockSig_Params.WriteCommandBytes); SByte++)
	  ISPTarget_SendByte(Write_FuseLockSig_Params.WriteCommandBytes[SByte]);
     b4a:	f8 01       	movw	r30, r16
     b4c:	81 91       	ld	r24, Z+
     b4e:	8f 01       	movw	r16, r30
     b50:	94 dd       	rcall	.-1240   	; 0x67a <ISPTarget_SendByte>
     b52:	ea 94       	dec	r14
     b54:	d1 f7       	brne	.-12     	; 0xb4a <ISPProtocol_WriteFuseLock+0x4a>
	Endpoint_ClearOUT();
	Endpoint_SelectEndpoint(AVRISP_DATA_IN_EPADDR);
	Endpoint_SetEndpointDirection(ENDPOINT_DIR_IN);

	/* Send the Fuse or Lock byte program commands as given by the host to the device */
	for (uint8_t SByte = 0; SByte < sizeof(Write_FuseLockSig_Params.WriteCommandBytes); SByte++)
     b56:	f0 92 f1 00 	sts	0x00F1, r15
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     b5a:	10 92 f1 00 	sts	0x00F1, r1
     b5e:	10 92 f1 00 	sts	0x00F1, r1
     b62:	80 91 e8 00 	lds	r24, 0x00E8
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     b66:	8e 77       	andi	r24, 0x7E	; 126
     b68:	80 93 e8 00 	sts	0x00E8, r24
     b6c:	0f 90       	pop	r0

	Endpoint_Write_8(V2Command);
	Endpoint_Write_8(STATUS_CMD_OK);
	Endpoint_Write_8(STATUS_CMD_OK);
	Endpoint_ClearIN();
}
     b6e:	0f 90       	pop	r0
     b70:	0f 90       	pop	r0
     b72:	0f 90       	pop	r0
     b74:	df 91       	pop	r29
     b76:	cf 91       	pop	r28
     b78:	1f 91       	pop	r17
     b7a:	0f 91       	pop	r16
     b7c:	ff 90       	pop	r15
     b7e:	ef 90       	pop	r14
     b80:	08 95       	ret

00000b82 <ISPProtocol_SPIMulti>:
     b82:	ff 92       	push	r15

/** Handler for the CMD_SPI_MULTI command, writing and reading arbitrary SPI data to and from the attached device. */
void ISPProtocol_SPIMulti(void)
{
     b84:	0f 93       	push	r16
     b86:	1f 93       	push	r17
     b88:	cf 93       	push	r28
     b8a:	df 93       	push	r29
     b8c:	cd b7       	in	r28, 0x3d	; 61
     b8e:	de b7       	in	r29, 0x3e	; 62
     b90:	c2 50       	subi	r28, 0x02	; 2
     b92:	d1 40       	sbci	r29, 0x01	; 1
     b94:	0f b6       	in	r0, 0x3f	; 63
     b96:	f8 94       	cli
     b98:	de bf       	out	0x3e, r29	; 62
     b9a:	0f be       	out	0x3f, r0	; 63
     b9c:	cd bf       	out	0x3d, r28	; 61
		uint8_t RxBytes;
		uint8_t RxStartAddr;
		uint8_t TxData[255];
	} SPI_Multi_Params;

	Endpoint_Read_Stream_LE(&SPI_Multi_Params, (sizeof(SPI_Multi_Params) - sizeof(SPI_Multi_Params.TxData)), NULL);
     b9e:	ce 01       	movw	r24, r28
     ba0:	01 96       	adiw	r24, 0x01	; 1
     ba2:	63 e0       	ldi	r22, 0x03	; 3
     ba4:	70 e0       	ldi	r23, 0x00	; 0
     ba6:	40 e0       	ldi	r20, 0x00	; 0
     ba8:	50 e0       	ldi	r21, 0x00	; 0
     baa:	0e 94 39 0f 	call	0x1e72	; 0x1e72 <Endpoint_Read_Stream_LE>
	Endpoint_Read_Stream_LE(&SPI_Multi_Params.TxData, SPI_Multi_Params.TxBytes, NULL);
     bae:	8e 01       	movw	r16, r28
     bb0:	0c 5f       	subi	r16, 0xFC	; 252
     bb2:	1f 4f       	sbci	r17, 0xFF	; 255
     bb4:	69 81       	ldd	r22, Y+1	; 0x01
     bb6:	c8 01       	movw	r24, r16
     bb8:	70 e0       	ldi	r23, 0x00	; 0
     bba:	40 e0       	ldi	r20, 0x00	; 0
     bbc:	50 e0       	ldi	r21, 0x00	; 0
     bbe:	0e 94 39 0f 	call	0x1e72	; 0x1e72 <Endpoint_Read_Stream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     bc2:	80 91 e8 00 	lds	r24, 0x00E8
     bc6:	8b 77       	andi	r24, 0x7B	; 123
     bc8:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     bcc:	82 e0       	ldi	r24, 0x02	; 2
     bce:	80 93 e9 00 	sts	0x00E9, r24
			 *  \param[in] DirectionMask  New endpoint direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask)
			{
				UECFG0X = ((UECFG0X & ~(1 << EPDIR)) | (DirectionMask ? (1 << EPDIR) : 0));
     bd2:	80 91 ec 00 	lds	r24, 0x00EC
     bd6:	81 60       	ori	r24, 0x01	; 1
     bd8:	80 93 ec 00 	sts	0x00EC, r24
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     bdc:	8d e1       	ldi	r24, 0x1D	; 29
     bde:	80 93 f1 00 	sts	0x00F1, r24
     be2:	10 92 f1 00 	sts	0x00F1, r1
	Endpoint_SetEndpointDirection(ENDPOINT_DIR_IN);

	Endpoint_Write_8(CMD_SPI_MULTI);
	Endpoint_Write_8(STATUS_CMD_OK);

	uint8_t CurrTxPos = 0;
     be6:	ff 24       	eor	r15, r15
	uint8_t CurrRxPos = 0;

	/* Write out bytes to transmit until the start of the bytes to receive is met */
	while (CurrTxPos < SPI_Multi_Params.RxStartAddr)
     be8:	0b c0       	rjmp	.+22     	; 0xc00 <ISPProtocol_SPIMulti+0x7e>
	{
		if (CurrTxPos < SPI_Multi_Params.TxBytes)
     bea:	89 81       	ldd	r24, Y+1	; 0x01
     bec:	f8 16       	cp	r15, r24
     bee:	28 f4       	brcc	.+10     	; 0xbfa <ISPProtocol_SPIMulti+0x78>
		  ISPTarget_SendByte(SPI_Multi_Params.TxData[CurrTxPos]);
     bf0:	f8 01       	movw	r30, r16
     bf2:	ef 0d       	add	r30, r15
     bf4:	f1 1d       	adc	r31, r1
     bf6:	80 81       	ld	r24, Z
     bf8:	01 c0       	rjmp	.+2      	; 0xbfc <ISPProtocol_SPIMulti+0x7a>
		else
		  ISPTarget_SendByte(0);
     bfa:	80 e0       	ldi	r24, 0x00	; 0
     bfc:	3e dd       	rcall	.-1412   	; 0x67a <ISPTarget_SendByte>
     bfe:	f3 94       	inc	r15

		CurrTxPos++;
     c00:	8b 81       	ldd	r24, Y+3	; 0x03

	uint8_t CurrTxPos = 0;
	uint8_t CurrRxPos = 0;

	/* Write out bytes to transmit until the start of the bytes to receive is met */
	while (CurrTxPos < SPI_Multi_Params.RxStartAddr)
     c02:	f8 16       	cp	r15, r24
     c04:	90 f3       	brcs	.-28     	; 0xbea <ISPProtocol_SPIMulti+0x68>
     c06:	00 e0       	ldi	r16, 0x00	; 0
     c08:	1c c0       	rjmp	.+56     	; 0xc42 <ISPProtocol_SPIMulti+0xc0>
     c0a:	89 81       	ldd	r24, Y+1	; 0x01
	}

	/* Transmit remaining bytes with padding as needed, read in response bytes */
	while (CurrRxPos < SPI_Multi_Params.RxBytes)
	{
		if (CurrTxPos < SPI_Multi_Params.TxBytes)
     c0c:	f8 16       	cp	r15, r24
     c0e:	50 f4       	brcc	.+20     	; 0xc24 <ISPProtocol_SPIMulti+0xa2>
     c10:	e4 e0       	ldi	r30, 0x04	; 4
		  Endpoint_Write_8(ISPTarget_TransferByte(SPI_Multi_Params.TxData[CurrTxPos++]));
     c12:	f0 e0       	ldi	r31, 0x00	; 0
     c14:	ec 0f       	add	r30, r28
     c16:	fd 1f       	adc	r31, r29
     c18:	ef 0d       	add	r30, r15
     c1a:	f1 1d       	adc	r31, r1
     c1c:	f3 94       	inc	r15
     c1e:	80 81       	ld	r24, Z
     c20:	36 dd       	rcall	.-1428   	; 0x68e <ISPTarget_TransferByte>
     c22:	01 c0       	rjmp	.+2      	; 0xc26 <ISPProtocol_SPIMulti+0xa4>
     c24:	3f dd       	rcall	.-1410   	; 0x6a4 <ISPTarget_ReceiveByte>
     c26:	80 93 f1 00 	sts	0x00F1, r24
		else
		  Endpoint_Write_8(ISPTarget_ReceiveByte());
     c2a:	80 91 e8 00 	lds	r24, 0x00E8
     c2e:	85 fd       	sbrc	r24, 5
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
     c30:	07 c0       	rjmp	.+14     	; 0xc40 <ISPProtocol_SPIMulti+0xbe>
     c32:	80 91 e8 00 	lds	r24, 0x00E8

		/* Check to see if we have filled the endpoint bank and need to send the packet */
		if (!(Endpoint_IsReadWriteAllowed()))
     c36:	8e 77       	andi	r24, 0x7E	; 126
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     c38:	80 93 e8 00 	sts	0x00E8, r24
     c3c:	0e 94 47 11 	call	0x228e	; 0x228e <Endpoint_WaitUntilReady>
     c40:	0f 5f       	subi	r16, 0xFF	; 255
		{
			Endpoint_ClearIN();
			Endpoint_WaitUntilReady();
     c42:	8a 81       	ldd	r24, Y+2	; 0x02
     c44:	08 17       	cp	r16, r24
		}

		CurrRxPos++;
     c46:	08 f3       	brcs	.-62     	; 0xc0a <ISPProtocol_SPIMulti+0x88>

		CurrTxPos++;
	}

	/* Transmit remaining bytes with padding as needed, read in response bytes */
	while (CurrRxPos < SPI_Multi_Params.RxBytes)
     c48:	10 92 f1 00 	sts	0x00F1, r1
     c4c:	90 91 e8 00 	lds	r25, 0x00E8
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     c50:	80 91 e8 00 	lds	r24, 0x00E8
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
     c54:	8e 77       	andi	r24, 0x7E	; 126
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     c56:	80 93 e8 00 	sts	0x00E8, r24
     c5a:	95 fd       	sbrc	r25, 5
     c5c:	09 c0       	rjmp	.+18     	; 0xc70 <ISPProtocol_SPIMulti+0xee>
     c5e:	0e 94 47 11 	call	0x228e	; 0x228e <Endpoint_WaitUntilReady>

	bool IsEndpointFull = !(Endpoint_IsReadWriteAllowed());
	Endpoint_ClearIN();

	/* Ensure last packet is a short packet to terminate the transfer */
	if (IsEndpointFull)
     c62:	80 91 e8 00 	lds	r24, 0x00E8
	{
		Endpoint_WaitUntilReady();
     c66:	8e 77       	andi	r24, 0x7E	; 126
     c68:	80 93 e8 00 	sts	0x00E8, r24
     c6c:	0e 94 47 11 	call	0x228e	; 0x228e <Endpoint_WaitUntilReady>
     c70:	ce 5f       	subi	r28, 0xFE	; 254
		Endpoint_ClearIN();
		Endpoint_WaitUntilReady();
     c72:	de 4f       	sbci	r29, 0xFE	; 254
     c74:	0f b6       	in	r0, 0x3f	; 63
	}
}
     c76:	f8 94       	cli
     c78:	de bf       	out	0x3e, r29	; 62
     c7a:	0f be       	out	0x3f, r0	; 63
     c7c:	cd bf       	out	0x3d, r28	; 61
     c7e:	df 91       	pop	r29
     c80:	cf 91       	pop	r28
     c82:	1f 91       	pop	r17
     c84:	0f 91       	pop	r16
     c86:	ff 90       	pop	r15
     c88:	08 95       	ret

00000c8a <ISPProtocol_DelayMS>:
     c8a:	06 c0       	rjmp	.+12     	; 0xc98 <ISPProtocol_DelayMS+0xe>
     c8c:	ef e9       	ldi	r30, 0x9F	; 159
     c8e:	ff e0       	ldi	r31, 0x0F	; 15
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     c90:	31 97       	sbiw	r30, 0x01	; 1
     c92:	f1 f7       	brne	.-4      	; 0xc90 <ISPProtocol_DelayMS+0x6>
     c94:	00 c0       	rjmp	.+0      	; 0xc96 <ISPProtocol_DelayMS+0xc>
     c96:	00 00       	nop
 *
 *  \param[in] DelayMS  Number of milliseconds to delay for
 */
void ISPProtocol_DelayMS(uint8_t DelayMS)
{
	while (DelayMS-- && TimeoutTicksRemaining)
     c98:	88 23       	and	r24, r24
     c9a:	21 f0       	breq	.+8      	; 0xca4 <ISPProtocol_DelayMS+0x1a>
     c9c:	9a b5       	in	r25, 0x2a	; 42
     c9e:	81 50       	subi	r24, 0x01	; 1
     ca0:	99 23       	and	r25, r25
     ca2:	a1 f7       	brne	.-24     	; 0xc8c <ISPProtocol_DelayMS+0x2>
     ca4:	08 95       	ret

00000ca6 <ISPProtocol_ChipErase>:
	}
}

/** Handler for the CMD_CHI_ERASE_ISP command, clearing the target's FLASH memory. */
void ISPProtocol_ChipErase(void)
{
     ca6:	ff 92       	push	r15
     ca8:	0f 93       	push	r16
     caa:	1f 93       	push	r17
     cac:	cf 93       	push	r28
     cae:	df 93       	push	r29
     cb0:	00 d0       	rcall	.+0      	; 0xcb2 <ISPProtocol_ChipErase+0xc>
     cb2:	00 d0       	rcall	.+0      	; 0xcb4 <ISPProtocol_ChipErase+0xe>
     cb4:	00 d0       	rcall	.+0      	; 0xcb6 <ISPProtocol_ChipErase+0x10>
     cb6:	cd b7       	in	r28, 0x3d	; 61
     cb8:	de b7       	in	r29, 0x3e	; 62
		uint8_t EraseDelayMS;
		uint8_t PollMethod;
		uint8_t EraseCommandBytes[4];
	} Erase_Chip_Params;

	Endpoint_Read_Stream_LE(&Erase_Chip_Params, sizeof(Erase_Chip_Params), NULL);
     cba:	ce 01       	movw	r24, r28
     cbc:	01 96       	adiw	r24, 0x01	; 1
     cbe:	66 e0       	ldi	r22, 0x06	; 6
     cc0:	70 e0       	ldi	r23, 0x00	; 0
     cc2:	40 e0       	ldi	r20, 0x00	; 0
     cc4:	50 e0       	ldi	r21, 0x00	; 0
     cc6:	0e 94 39 0f 	call	0x1e72	; 0x1e72 <Endpoint_Read_Stream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     cca:	80 91 e8 00 	lds	r24, 0x00E8
     cce:	8b 77       	andi	r24, 0x7B	; 123
     cd0:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     cd4:	82 e0       	ldi	r24, 0x02	; 2
     cd6:	80 93 e9 00 	sts	0x00E9, r24
			 *  \param[in] DirectionMask  New endpoint direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask)
			{
				UECFG0X = ((UECFG0X & ~(1 << EPDIR)) | (DirectionMask ? (1 << EPDIR) : 0));
     cda:	80 91 ec 00 	lds	r24, 0x00EC
     cde:	81 60       	ori	r24, 0x01	; 1
     ce0:	80 93 ec 00 	sts	0x00EC, r24
     ce4:	8e 01       	movw	r16, r28
     ce6:	0d 5f       	subi	r16, 0xFD	; 253
     ce8:	1f 4f       	sbci	r17, 0xFF	; 255
     cea:	f4 e0       	ldi	r31, 0x04	; 4
     cec:	ff 2e       	mov	r15, r31

	uint8_t ResponseStatus = STATUS_CMD_OK;

	/* Send the chip erase commands as given by the host to the device */
	for (uint8_t SByte = 0; SByte < sizeof(Erase_Chip_Params.EraseCommandBytes); SByte++)
	  ISPTarget_SendByte(Erase_Chip_Params.EraseCommandBytes[SByte]);
     cee:	f8 01       	movw	r30, r16
     cf0:	81 91       	ld	r24, Z+
     cf2:	8f 01       	movw	r16, r30
     cf4:	c2 dc       	rcall	.-1660   	; 0x67a <ISPTarget_SendByte>
     cf6:	fa 94       	dec	r15
     cf8:	d1 f7       	brne	.-12     	; 0xcee <ISPProtocol_ChipErase+0x48>
	Endpoint_SetEndpointDirection(ENDPOINT_DIR_IN);

	uint8_t ResponseStatus = STATUS_CMD_OK;

	/* Send the chip erase commands as given by the host to the device */
	for (uint8_t SByte = 0; SByte < sizeof(Erase_Chip_Params.EraseCommandBytes); SByte++)
     cfa:	8a 81       	ldd	r24, Y+2	; 0x02
	  ISPTarget_SendByte(Erase_Chip_Params.EraseCommandBytes[SByte]);

	/* Use appropriate command completion check as given by the host (delay or busy polling) */
	if (!(Erase_Chip_Params.PollMethod))
     cfc:	88 23       	and	r24, r24
     cfe:	21 f4       	brne	.+8      	; 0xd08 <ISPProtocol_ChipErase+0x62>
     d00:	89 81       	ldd	r24, Y+1	; 0x01
	  ISPProtocol_DelayMS(Erase_Chip_Params.EraseDelayMS);
     d02:	c3 df       	rcall	.-122    	; 0xc8a <ISPProtocol_DelayMS>
     d04:	80 e0       	ldi	r24, 0x00	; 0
     d06:	01 c0       	rjmp	.+2      	; 0xd0a <ISPProtocol_ChipErase+0x64>

	Endpoint_ClearOUT();
	Endpoint_SelectEndpoint(AVRISP_DATA_IN_EPADDR);
	Endpoint_SetEndpointDirection(ENDPOINT_DIR_IN);

	uint8_t ResponseStatus = STATUS_CMD_OK;
     d08:	90 d1       	rcall	.+800    	; 0x102a <ISPTarget_WaitWhileTargetBusy>
     d0a:	92 e1       	ldi	r25, 0x12	; 18

	/* Use appropriate command completion check as given by the host (delay or busy polling) */
	if (!(Erase_Chip_Params.PollMethod))
	  ISPProtocol_DelayMS(Erase_Chip_Params.EraseDelayMS);
	else
	  ResponseStatus = ISPTarget_WaitWhileTargetBusy();
     d0c:	90 93 f1 00 	sts	0x00F1, r25
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     d10:	80 93 f1 00 	sts	0x00F1, r24
     d14:	80 91 e8 00 	lds	r24, 0x00E8
     d18:	8e 77       	andi	r24, 0x7E	; 126
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     d1a:	80 93 e8 00 	sts	0x00E8, r24
     d1e:	26 96       	adiw	r28, 0x06	; 6
     d20:	0f b6       	in	r0, 0x3f	; 63
     d22:	f8 94       	cli

	Endpoint_Write_8(CMD_CHIP_ERASE_ISP);
	Endpoint_Write_8(ResponseStatus);
	Endpoint_ClearIN();
}
     d24:	de bf       	out	0x3e, r29	; 62
     d26:	0f be       	out	0x3f, r0	; 63
     d28:	cd bf       	out	0x3d, r28	; 61
     d2a:	df 91       	pop	r29
     d2c:	cf 91       	pop	r28
     d2e:	1f 91       	pop	r17
     d30:	0f 91       	pop	r16
     d32:	ff 90       	pop	r15
     d34:	08 95       	ret

00000d36 <ISPProtocol_LeaveISPMode>:
     d36:	0f 93       	push	r16
     d38:	1f 93       	push	r17
     d3a:	cf 93       	push	r28
	Endpoint_ClearIN();
}

/** Handler for the CMD_LEAVE_ISP command, which releases the target from programming mode. */
void ISPProtocol_LeaveISPMode(void)
{
     d3c:	df 93       	push	r29
     d3e:	00 d0       	rcall	.+0      	; 0xd40 <ISPProtocol_LeaveISPMode+0xa>
     d40:	cd b7       	in	r28, 0x3d	; 61
     d42:	de b7       	in	r29, 0x3e	; 62
	{
		uint8_t PreDelayMS;
		uint8_t PostDelayMS;
	} Leave_ISP_Params;

	Endpoint_Read_Stream_LE(&Leave_ISP_Params, sizeof(Leave_ISP_Params), NULL);
     d44:	ce 01       	movw	r24, r28
     d46:	01 96       	adiw	r24, 0x01	; 1
     d48:	62 e0       	ldi	r22, 0x02	; 2
     d4a:	70 e0       	ldi	r23, 0x00	; 0
     d4c:	40 e0       	ldi	r20, 0x00	; 0
     d4e:	50 e0       	ldi	r21, 0x00	; 0
     d50:	0e 94 39 0f 	call	0x1e72	; 0x1e72 <Endpoint_Read_Stream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     d54:	08 ee       	ldi	r16, 0xE8	; 232
     d56:	10 e0       	ldi	r17, 0x00	; 0
     d58:	f8 01       	movw	r30, r16
     d5a:	80 81       	ld	r24, Z
     d5c:	8b 77       	andi	r24, 0x7B	; 123
     d5e:	80 83       	st	Z, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     d60:	82 e0       	ldi	r24, 0x02	; 2
     d62:	80 93 e9 00 	sts	0x00E9, r24
			 *  \param[in] DirectionMask  New endpoint direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask)
			{
				UECFG0X = ((UECFG0X & ~(1 << EPDIR)) | (DirectionMask ? (1 << EPDIR) : 0));
     d66:	ec ee       	ldi	r30, 0xEC	; 236
     d68:	f0 e0       	ldi	r31, 0x00	; 0
     d6a:	80 81       	ld	r24, Z
     d6c:	81 60       	ori	r24, 0x01	; 1
     d6e:	80 83       	st	Z, r24
	Endpoint_ClearOUT();
	Endpoint_SelectEndpoint(AVRISP_DATA_IN_EPADDR);
	Endpoint_SetEndpointDirection(ENDPOINT_DIR_IN);

	/* Perform pre-exit delay, release the target /RESET, disable the SPI bus and perform the post-exit delay */
	ISPProtocol_DelayMS(Leave_ISP_Params.PreDelayMS);
     d70:	89 81       	ldd	r24, Y+1	; 0x01
     d72:	8b df       	rcall	.-234    	; 0xc8a <ISPProtocol_DelayMS>
     d74:	80 e0       	ldi	r24, 0x00	; 0
	ISPTarget_ChangeTargetResetLine(false);
     d76:	4d d1       	rcall	.+666    	; 0x1012 <ISPTarget_ChangeTargetResetLine>
     d78:	cf d0       	rcall	.+414    	; 0xf18 <ISPTarget_DisableTargetISP>
     d7a:	8a 81       	ldd	r24, Y+2	; 0x02
	ISPTarget_DisableTargetISP();
     d7c:	86 df       	rcall	.-244    	; 0xc8a <ISPProtocol_DelayMS>
     d7e:	e1 ef       	ldi	r30, 0xF1	; 241
	ISPProtocol_DelayMS(Leave_ISP_Params.PostDelayMS);
     d80:	f0 e0       	ldi	r31, 0x00	; 0
     d82:	81 e1       	ldi	r24, 0x11	; 17
     d84:	80 83       	st	Z, r24
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     d86:	10 82       	st	Z, r1
     d88:	f8 01       	movw	r30, r16
     d8a:	80 81       	ld	r24, Z
     d8c:	8e 77       	andi	r24, 0x7E	; 126
     d8e:	80 83       	st	Z, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     d90:	0f 90       	pop	r0
     d92:	0f 90       	pop	r0
     d94:	df 91       	pop	r29
     d96:	cf 91       	pop	r28

	Endpoint_Write_8(CMD_LEAVE_PROGMODE_ISP);
	Endpoint_Write_8(STATUS_CMD_OK);
	Endpoint_ClearIN();
}
     d98:	1f 91       	pop	r17
     d9a:	0f 91       	pop	r16
     d9c:	08 95       	ret

00000d9e <ISPProtocol_EnterISPMode>:
     d9e:	df 92       	push	r13
     da0:	ef 92       	push	r14
     da2:	ff 92       	push	r15
     da4:	0f 93       	push	r16

/** Handler for the CMD_ENTER_PROGMODE_ISP command, which attempts to enter programming mode on
 *  the attached device, returning success or failure back to the host.
 */
void ISPProtocol_EnterISPMode(void)
{
     da6:	1f 93       	push	r17
     da8:	cf 93       	push	r28
     daa:	df 93       	push	r29
     dac:	cd b7       	in	r28, 0x3d	; 61
     dae:	de b7       	in	r29, 0x3e	; 62
     db0:	2f 97       	sbiw	r28, 0x0f	; 15
     db2:	0f b6       	in	r0, 0x3f	; 63
     db4:	f8 94       	cli
     db6:	de bf       	out	0x3e, r29	; 62
     db8:	0f be       	out	0x3f, r0	; 63
     dba:	cd bf       	out	0x3d, r28	; 61
		uint8_t PollValue;
		uint8_t PollIndex;
		uint8_t EnterProgBytes[4];
	} Enter_ISP_Params;

	Endpoint_Read_Stream_LE(&Enter_ISP_Params, sizeof(Enter_ISP_Params), NULL);
     dbc:	ce 01       	movw	r24, r28
     dbe:	05 96       	adiw	r24, 0x05	; 5
     dc0:	6b e0       	ldi	r22, 0x0B	; 11
     dc2:	70 e0       	ldi	r23, 0x00	; 0
     dc4:	40 e0       	ldi	r20, 0x00	; 0
     dc6:	50 e0       	ldi	r21, 0x00	; 0
     dc8:	0e 94 39 0f 	call	0x1e72	; 0x1e72 <Endpoint_Read_Stream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     dcc:	80 91 e8 00 	lds	r24, 0x00E8
     dd0:	8b 77       	andi	r24, 0x7B	; 123
     dd2:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     dd6:	82 e0       	ldi	r24, 0x02	; 2
     dd8:	80 93 e9 00 	sts	0x00E9, r24
			 *  \param[in] DirectionMask  New endpoint direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask)
			{
				UECFG0X = ((UECFG0X & ~(1 << EPDIR)) | (DirectionMask ? (1 << EPDIR) : 0));
     ddc:	80 91 ec 00 	lds	r24, 0x00EC
     de0:	81 60       	ori	r24, 0x01	; 1
     de2:	80 93 ec 00 	sts	0x00EC, r24
	Endpoint_SelectEndpoint(AVRISP_DATA_IN_EPADDR);
	Endpoint_SetEndpointDirection(ENDPOINT_DIR_IN);

	uint8_t ResponseStatus = STATUS_CMD_FAILED;

	CurrentAddress = 0;
     de6:	10 92 a6 01 	sts	0x01A6, r1
     dea:	10 92 a7 01 	sts	0x01A7, r1
     dee:	10 92 a8 01 	sts	0x01A8, r1
     df2:	10 92 a9 01 	sts	0x01A9, r1

	/* Perform execution delay, initialize SPI bus */
	ISPProtocol_DelayMS(Enter_ISP_Params.ExecutionDelayMS);
     df6:	8f 81       	ldd	r24, Y+7	; 0x07
     df8:	48 df       	rcall	.-368    	; 0xc8a <ISPProtocol_DelayMS>
     dfa:	ba d0       	rcall	.+372    	; 0xf70 <ISPTarget_EnableTargetISP>
	ISPTarget_EnableTargetISP();
     dfc:	19 c0       	rjmp	.+50     	; 0xe30 <ISPProtocol_EnterISPMode+0x92>
     dfe:	89 85       	ldd	r24, Y+9	; 0x09
     e00:	44 df       	rcall	.-376    	; 0xc8a <ISPProtocol_DelayMS>
	{
		uint8_t ResponseBytes[4];

		for (uint8_t RByte = 0; RByte < sizeof(ResponseBytes); RByte++)
		{
			ISPProtocol_DelayMS(Enter_ISP_Params.ByteDelay);
     e02:	f8 01       	movw	r30, r16
     e04:	81 91       	ld	r24, Z+
     e06:	8f 01       	movw	r16, r30
			ResponseBytes[RByte] = ISPTarget_TransferByte(Enter_ISP_Params.EnterProgBytes[RByte]);
     e08:	42 dc       	rcall	.-1916   	; 0x68e <ISPTarget_TransferByte>
     e0a:	f7 01       	movw	r30, r14
     e0c:	81 93       	st	Z+, r24
     e0e:	7f 01       	movw	r14, r30
     e10:	da 94       	dec	r13
     e12:	a9 f7       	brne	.-22     	; 0xdfe <ISPProtocol_EnterISPMode+0x60>
     e14:	8b 85       	ldd	r24, Y+11	; 0x0b
     e16:	88 23       	and	r24, r24
     e18:	11 f1       	breq	.+68     	; 0xe5e <ISPProtocol_EnterISPMode+0xc0>
	 * by the host has exceeded, or the the device sends back the expected response values */
	while (Enter_ISP_Params.SynchLoops-- && TimeoutTicksRemaining)
	{
		uint8_t ResponseBytes[4];

		for (uint8_t RByte = 0; RByte < sizeof(ResponseBytes); RByte++)
     e1a:	fe 01       	movw	r30, r28
			ISPProtocol_DelayMS(Enter_ISP_Params.ByteDelay);
			ResponseBytes[RByte] = ISPTarget_TransferByte(Enter_ISP_Params.EnterProgBytes[RByte]);
		}

		/* Check if polling disabled, or if the polled value matches the expected value */
		if (!(Enter_ISP_Params.PollIndex) || (ResponseBytes[Enter_ISP_Params.PollIndex - 1] == Enter_ISP_Params.PollValue))
     e1c:	e8 0f       	add	r30, r24
     e1e:	f1 1d       	adc	r31, r1
     e20:	90 81       	ld	r25, Z
     e22:	8a 85       	ldd	r24, Y+10	; 0x0a
     e24:	98 17       	cp	r25, r24
     e26:	d9 f0       	breq	.+54     	; 0xe5e <ISPProtocol_EnterISPMode+0xc0>
     e28:	80 e0       	ldi	r24, 0x00	; 0
     e2a:	f3 d0       	rcall	.+486    	; 0x1012 <ISPTarget_ChangeTargetResetLine>
     e2c:	8e 81       	ldd	r24, Y+6	; 0x06
     e2e:	2d df       	rcall	.-422    	; 0xc8a <ISPProtocol_DelayMS>
			ResponseStatus = STATUS_CMD_OK;
			break;
		}
		else
		{
			ISPTarget_ChangeTargetResetLine(false);
     e30:	81 e0       	ldi	r24, 0x01	; 1
     e32:	ef d0       	rcall	.+478    	; 0x1012 <ISPTarget_ChangeTargetResetLine>
     e34:	8e 81       	ldd	r24, Y+6	; 0x06
			ISPProtocol_DelayMS(Enter_ISP_Params.PinStabDelayMS);
     e36:	29 df       	rcall	.-430    	; 0xc8a <ISPProtocol_DelayMS>
     e38:	88 85       	ldd	r24, Y+8	; 0x08
     e3a:	98 2f       	mov	r25, r24
			ISPTarget_ChangeTargetResetLine(true);
     e3c:	91 50       	subi	r25, 0x01	; 1
     e3e:	98 87       	std	Y+8, r25	; 0x08
     e40:	88 23       	and	r24, r24
			ISPProtocol_DelayMS(Enter_ISP_Params.PinStabDelayMS);
     e42:	79 f0       	breq	.+30     	; 0xe62 <ISPProtocol_EnterISPMode+0xc4>
     e44:	8a b5       	in	r24, 0x2a	; 42
     e46:	88 23       	and	r24, r24
	ISPTarget_ChangeTargetResetLine(true);
	ISPProtocol_DelayMS(Enter_ISP_Params.PinStabDelayMS);

	/* Continuously attempt to synchronize with the target until either the number of attempts specified
	 * by the host has exceeded, or the the device sends back the expected response values */
	while (Enter_ISP_Params.SynchLoops-- && TimeoutTicksRemaining)
     e48:	61 f0       	breq	.+24     	; 0xe62 <ISPProtocol_EnterISPMode+0xc4>
     e4a:	8e 01       	movw	r16, r28
     e4c:	04 5f       	subi	r16, 0xF4	; 244
     e4e:	1f 4f       	sbci	r17, 0xFF	; 255
     e50:	7e 01       	movw	r14, r28
     e52:	08 94       	sec
     e54:	e1 1c       	adc	r14, r1
     e56:	f1 1c       	adc	r15, r1
     e58:	a4 e0       	ldi	r26, 0x04	; 4
     e5a:	da 2e       	mov	r13, r26
     e5c:	d0 cf       	rjmp	.-96     	; 0xdfe <ISPProtocol_EnterISPMode+0x60>
     e5e:	80 e0       	ldi	r24, 0x00	; 0
     e60:	01 c0       	rjmp	.+2      	; 0xe64 <ISPProtocol_EnterISPMode+0xc6>
     e62:	80 ec       	ldi	r24, 0xC0	; 192
     e64:	90 e1       	ldi	r25, 0x10	; 16
     e66:	90 93 f1 00 	sts	0x00F1, r25
     e6a:	80 93 f1 00 	sts	0x00F1, r24
		}

		/* Check if polling disabled, or if the polled value matches the expected value */
		if (!(Enter_ISP_Params.PollIndex) || (ResponseBytes[Enter_ISP_Params.PollIndex - 1] == Enter_ISP_Params.PollValue))
		{
			ResponseStatus = STATUS_CMD_OK;
     e6e:	80 91 e8 00 	lds	r24, 0x00E8

	Endpoint_ClearOUT();
	Endpoint_SelectEndpoint(AVRISP_DATA_IN_EPADDR);
	Endpoint_SetEndpointDirection(ENDPOINT_DIR_IN);

	uint8_t ResponseStatus = STATUS_CMD_FAILED;
     e72:	8e 77       	andi	r24, 0x7E	; 126
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     e74:	80 93 e8 00 	sts	0x00E8, r24
     e78:	2f 96       	adiw	r28, 0x0f	; 15
     e7a:	0f b6       	in	r0, 0x3f	; 63
     e7c:	f8 94       	cli
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     e7e:	de bf       	out	0x3e, r29	; 62
     e80:	0f be       	out	0x3f, r0	; 63
     e82:	cd bf       	out	0x3d, r28	; 61
     e84:	df 91       	pop	r29
     e86:	cf 91       	pop	r28
	}

	Endpoint_Write_8(CMD_ENTER_PROGMODE_ISP);
	Endpoint_Write_8(ResponseStatus);
	Endpoint_ClearIN();
}
     e88:	1f 91       	pop	r17
     e8a:	0f 91       	pop	r16
     e8c:	ff 90       	pop	r15
     e8e:	ef 90       	pop	r14
     e90:	df 90       	pop	r13
     e92:	08 95       	ret

00000e94 <__vector_15>:
static volatile uint8_t SoftSPI_BitsRemaining;


/** ISR to handle software SPI transmission and reception */
ISR(TIMER1_COMPA_vect, ISR_BLOCK)
{
     e94:	1f 92       	push	r1
     e96:	0f 92       	push	r0
     e98:	0f b6       	in	r0, 0x3f	; 63
     e9a:	0f 92       	push	r0
     e9c:	11 24       	eor	r1, r1
     e9e:	8f 93       	push	r24
	/* Check if rising edge (output next bit) or falling edge (read in next bit) */
	if (!(PINB & (1 << 1)))
     ea0:	19 99       	sbic	0x03, 1	; 3
     ea2:	08 c0       	rjmp	.+16     	; 0xeb4 <__vector_15+0x20>
	{
		if (SoftSPI_Data & (1 << 7))
     ea4:	80 91 a3 01 	lds	r24, 0x01A3
     ea8:	87 ff       	sbrs	r24, 7
     eaa:	02 c0       	rjmp	.+4      	; 0xeb0 <__vector_15+0x1c>
		  PORTB |=  (1 << 2);
     eac:	2a 9a       	sbi	0x05, 2	; 5
     eae:	19 c0       	rjmp	.+50     	; 0xee2 <__vector_15+0x4e>
		else
		  PORTB &= ~(1 << 2);
     eb0:	2a 98       	cbi	0x05, 2	; 5
     eb2:	17 c0       	rjmp	.+46     	; 0xee2 <__vector_15+0x4e>
	}
	else
	{
		SoftSPI_Data <<= 1;
     eb4:	80 91 a3 01 	lds	r24, 0x01A3
     eb8:	88 0f       	add	r24, r24
     eba:	80 93 a3 01 	sts	0x01A3, r24

		if (!(--SoftSPI_BitsRemaining))
     ebe:	80 91 a2 01 	lds	r24, 0x01A2
     ec2:	81 50       	subi	r24, 0x01	; 1
     ec4:	80 93 a2 01 	sts	0x01A2, r24
     ec8:	88 23       	and	r24, r24
     eca:	21 f4       	brne	.+8      	; 0xed4 <__vector_15+0x40>
		{
			TCCR1B = 0;
     ecc:	10 92 81 00 	sts	0x0081, r1
			TIFR1  = (1 << OCF1A);
     ed0:	82 e0       	ldi	r24, 0x02	; 2
     ed2:	86 bb       	out	0x16, r24	; 22
		}

		if (PINB & (1 << 3))
     ed4:	1b 9b       	sbis	0x03, 3	; 3
     ed6:	05 c0       	rjmp	.+10     	; 0xee2 <__vector_15+0x4e>
		  SoftSPI_Data |= (1 << 0);
     ed8:	80 91 a3 01 	lds	r24, 0x01A3
     edc:	81 60       	ori	r24, 0x01	; 1
     ede:	80 93 a3 01 	sts	0x01A3, r24
	}

	/* Fast toggle of PORTB.1 via the PIN register (see datasheet) */
	PINB |= (1 << 1);
     ee2:	19 9a       	sbi	0x03, 1	; 3
}
     ee4:	8f 91       	pop	r24
     ee6:	0f 90       	pop	r0
     ee8:	0f be       	out	0x3f, r0	; 63
     eea:	0f 90       	pop	r0
     eec:	1f 90       	pop	r1
     eee:	18 95       	reti

00000ef0 <ISPTarget_ConfigureRescueClock>:
		UCSR1B = (1 << TXEN1);
		UCSR1C = (1 << UMSEL10) | (1 << UPM11) | (1 << USBS1) | (1 << UCSZ11) | (1 << UCSZ10) | (1 << UCPOL1);
	#else
		/* Configure OCR1A as an output for the specified AVR model */
		#if defined(USB_SERIES_2_AVR)
		DDRC |= (1 << 6);
     ef0:	3e 9a       	sbi	0x07, 6	; 7
		#else
		DDRB |= (1 << 5);
		#endif

		/* Start Timer 1 to generate a 4MHz clock on the OCR1A pin */
		TIMSK1 = 0;
     ef2:	10 92 6f 00 	sts	0x006F, r1
		TCNT1  = 0;
     ef6:	10 92 85 00 	sts	0x0085, r1
     efa:	10 92 84 00 	sts	0x0084, r1
		OCR1A  = ((F_CPU / 2 / ISP_RESCUE_CLOCK_SPEED) - 1);
     efe:	81 e0       	ldi	r24, 0x01	; 1
     f00:	90 e0       	ldi	r25, 0x00	; 0
     f02:	90 93 89 00 	sts	0x0089, r25
     f06:	80 93 88 00 	sts	0x0088, r24
		TCCR1A = (1 << COM1A0);
     f0a:	80 e4       	ldi	r24, 0x40	; 64
     f0c:	80 93 80 00 	sts	0x0080, r24
		TCCR1B = ((1 << WGM12) | (1 << CS10));
     f10:	89 e0       	ldi	r24, 0x09	; 9
     f12:	80 93 81 00 	sts	0x0081, r24
	#endif
}
     f16:	08 95       	ret

00000f18 <ISPTarget_DisableTargetISP>:
/** Shuts down the current selected SPI driver (hardware or software, depending on the selected ISP speed) so that no
 *  further communications can occur until the driver is re-initialized.
 */
void ISPTarget_DisableTargetISP(void)
{
	if (HardwareSPIMode)
     f18:	80 91 67 01 	lds	r24, 0x0167
     f1c:	88 23       	and	r24, r24
     f1e:	49 f0       	breq	.+18     	; 0xf32 <ISPTarget_DisableTargetISP+0x1a>
			}

			/** Turns off the SPI driver, disabling and returning used hardware to their default configuration. */
			static inline void SPI_Disable(void)
			{
				DDRB  &= ~((1 << 1) | (1 << 2));
     f20:	84 b1       	in	r24, 0x04	; 4
     f22:	89 7f       	andi	r24, 0xF9	; 249
     f24:	84 b9       	out	0x04, r24	; 4
				PORTB &= ~((1 << 0) | (1 << 3));
     f26:	85 b1       	in	r24, 0x05	; 5
     f28:	86 7f       	andi	r24, 0xF6	; 246
     f2a:	85 b9       	out	0x05, r24	; 5

				SPCR   = 0;
     f2c:	1c bc       	out	0x2c, r1	; 44
				SPSR   = 0;
     f2e:	1d bc       	out	0x2d, r1	; 45
     f30:	08 95       	ret
	{
		SPI_Disable();
	}
	else
	{
		DDRB  &= ~((1 << 1) | (1 << 2));
     f32:	84 b1       	in	r24, 0x04	; 4
     f34:	89 7f       	andi	r24, 0xF9	; 249
     f36:	84 b9       	out	0x04, r24	; 4
		PORTB &= ~((1 << 0) | (1 << 3));
     f38:	85 b1       	in	r24, 0x05	; 5
     f3a:	86 7f       	andi	r24, 0xF6	; 246
     f3c:	85 b9       	out	0x05, r24	; 5

		/* Must re-enable rescue clock once software ISP has exited, as the timer for the rescue clock is
		 * re-purposed for software SPI */
		ISPTarget_ConfigureRescueClock();
     f3e:	d8 cf       	rjmp	.-80     	; 0xef0 <ISPTarget_ConfigureRescueClock>

00000f40 <ISPTarget_ConfigureSoftwareSPI>:
     f40:	92 e0       	ldi	r25, 0x02	; 2
     f42:	90 93 6f 00 	sts	0x006F, r25
 */
void ISPTarget_ConfigureSoftwareSPI(const uint8_t SCKDuration)
{
	/* Configure Timer 1 for software SPI using the specified SCK duration */
	TIMSK1 = (1 << OCIE1A);
	TCNT1  = 0;
     f46:	10 92 85 00 	sts	0x0085, r1
     f4a:	10 92 84 00 	sts	0x0084, r1
	OCR1A  = pgm_read_word(&TimerCompareFromSCKDuration[SCKDuration - sizeof(SPIMaskFromSCKDuration)]);
     f4e:	90 e0       	ldi	r25, 0x00	; 0
     f50:	88 0f       	add	r24, r24
     f52:	99 1f       	adc	r25, r25
     f54:	85 55       	subi	r24, 0x55	; 85
     f56:	9f 4f       	sbci	r25, 0xFF	; 255
     f58:	fc 01       	movw	r30, r24
     f5a:	25 91       	lpm	r18, Z+
     f5c:	34 91       	lpm	r19, Z
     f5e:	30 93 89 00 	sts	0x0089, r19
     f62:	20 93 88 00 	sts	0x0088, r18
	TCCR1A = 0;
     f66:	10 92 80 00 	sts	0x0080, r1
	TCCR1B = 0;
     f6a:	10 92 81 00 	sts	0x0081, r1
}
     f6e:	08 95       	ret

00000f70 <ISPTarget_EnableTargetISP>:
/** Initializes the appropriate SPI driver (hardware or software, depending on the selected ISP speed) ready for
 *  communication with the attached target.
 */
void ISPTarget_EnableTargetISP(void)
{
	uint8_t SCKDuration = V2Params_GetParameterValue(PARAM_SCK_DURATION);
     f70:	88 e9       	ldi	r24, 0x98	; 152
     f72:	5d db       	rcall	.-2374   	; 0x62e <V2Params_GetParameterValue>
     f74:	87 30       	cpi	r24, 0x07	; 7

	if (SCKDuration < sizeof(SPIMaskFromSCKDuration))
     f76:	d8 f4       	brcc	.+54     	; 0xfae <ISPTarget_EnableTargetISP+0x3e>
     f78:	91 e0       	ldi	r25, 0x01	; 1
	{
		HardwareSPIMode = true;
     f7a:	90 93 67 01 	sts	0x0167, r25
     f7e:	e8 2f       	mov	r30, r24

		SPI_Init(pgm_read_byte(&SPIMaskFromSCKDuration[SCKDuration]) | SPI_ORDER_MSB_FIRST |
     f80:	f0 e0       	ldi	r31, 0x00	; 0
     f82:	ee 54       	subi	r30, 0x4E	; 78
     f84:	ff 4f       	sbci	r31, 0xFF	; 255
     f86:	e4 91       	lpm	r30, Z
     f88:	e0 61       	ori	r30, 0x10	; 16
     f8a:	20 9a       	sbi	0x04, 0	; 4
			 *                         \c SPI_SCK_*, \c SPI_SAMPLE_*, \c SPI_ORDER_* and \c SPI_MODE_* masks.
			 */
			static inline void SPI_Init(const uint8_t SPIOptions)
			{
				/* Prevent high rise times on PB.0 (/SS) from forcing a change to SPI slave mode */
				DDRB  |= (1 << 0);
     f8c:	28 9a       	sbi	0x05, 0	; 5
				PORTB |= (1 << 0);
     f8e:	84 b1       	in	r24, 0x04	; 4

				DDRB  |=  ((1 << 1) | (1 << 2));
     f90:	86 60       	ori	r24, 0x06	; 6
     f92:	84 b9       	out	0x04, r24	; 4
     f94:	23 98       	cbi	0x04, 3	; 4
				DDRB  &= ~(1 << 3);
     f96:	2b 9a       	sbi	0x05, 3	; 5
				PORTB |=  (1 << 3);
     f98:	8d b5       	in	r24, 0x2d	; 45

				if (SPIOptions & SPI_USE_DOUBLESPEED)
				  SPSR |= (1 << SPI2X);
     f9a:	e6 ff       	sbrs	r30, 6

				DDRB  |=  ((1 << 1) | (1 << 2));
				DDRB  &= ~(1 << 3);
				PORTB |=  (1 << 3);

				if (SPIOptions & SPI_USE_DOUBLESPEED)
     f9c:	02 c0       	rjmp	.+4      	; 0xfa2 <ISPTarget_EnableTargetISP+0x32>
     f9e:	81 60       	ori	r24, 0x01	; 1
				  SPSR |= (1 << SPI2X);
     fa0:	01 c0       	rjmp	.+2      	; 0xfa4 <ISPTarget_EnableTargetISP+0x34>
     fa2:	8e 7f       	andi	r24, 0xFE	; 254
				else
				  SPSR &= ~(1 << SPI2X);
     fa4:	8d bd       	out	0x2d, r24	; 45
     fa6:	20 98       	cbi	0x04, 0	; 4

				/* Switch /SS to input mode after configuration to allow for forced mode changes */
				DDRB &= ~(1 << 0);
     fa8:	e0 64       	ori	r30, 0x40	; 64

				SPCR  = ((1 << SPE) | SPIOptions);
     faa:	ec bd       	out	0x2c, r30	; 44
     fac:	08 95       	ret
     fae:	10 92 67 01 	sts	0x0167, r1
		                       SPI_SCK_LEAD_RISING | SPI_SAMPLE_LEADING | SPI_MODE_MASTER);
	}
	else
	{
		HardwareSPIMode = false;
     fb2:	94 b1       	in	r25, 0x04	; 4

		DDRB  |= ((1 << 1) | (1 << 2));
     fb4:	96 60       	ori	r25, 0x06	; 6
     fb6:	94 b9       	out	0x04, r25	; 4
     fb8:	95 b1       	in	r25, 0x05	; 5
		PORTB |= ((1 << 0) | (1 << 3));
     fba:	99 60       	ori	r25, 0x09	; 9
     fbc:	95 b9       	out	0x05, r25	; 5
     fbe:	c0 cf       	rjmp	.-128    	; 0xf40 <ISPTarget_ConfigureSoftwareSPI>

00000fc0 <ISPTarget_TransferSoftSPIByte>:

		ISPTarget_ConfigureSoftwareSPI(SCKDuration);
     fc0:	80 93 a3 01 	sts	0x01A3, r24
     fc4:	88 e0       	ldi	r24, 0x08	; 8
 *  \return Received byte of data from the attached target
 */
uint8_t ISPTarget_TransferSoftSPIByte(const uint8_t Byte)
{
	SoftSPI_Data          = Byte;
	SoftSPI_BitsRemaining = 8;
     fc6:	80 93 a2 01 	sts	0x01A2, r24

	/* Set initial MOSI pin state according to the byte to be transferred */
	if (SoftSPI_Data & (1 << 7))
     fca:	80 91 a3 01 	lds	r24, 0x01A3
     fce:	87 ff       	sbrs	r24, 7
     fd0:	02 c0       	rjmp	.+4      	; 0xfd6 <ISPTarget_TransferSoftSPIByte+0x16>
	  PORTB |=  (1 << 2);
     fd2:	2a 9a       	sbi	0x05, 2	; 5
     fd4:	01 c0       	rjmp	.+2      	; 0xfd8 <ISPTarget_TransferSoftSPIByte+0x18>
	else
	  PORTB &= ~(1 << 2);
     fd6:	2a 98       	cbi	0x05, 2	; 5

	TCNT1  = 0;
     fd8:	10 92 85 00 	sts	0x0085, r1
     fdc:	10 92 84 00 	sts	0x0084, r1
	TCCR1B = ((1 << WGM12) | (1 << CS11));
     fe0:	8a e0       	ldi	r24, 0x0A	; 10
     fe2:	80 93 81 00 	sts	0x0081, r24
	while (SoftSPI_BitsRemaining && TimeoutTicksRemaining);
     fe6:	80 91 a2 01 	lds	r24, 0x01A2
     fea:	88 23       	and	r24, r24
     fec:	19 f0       	breq	.+6      	; 0xff4 <ISPTarget_TransferSoftSPIByte+0x34>
     fee:	8a b5       	in	r24, 0x2a	; 42
     ff0:	88 23       	and	r24, r24
     ff2:	c9 f7       	brne	.-14     	; 0xfe6 <ISPTarget_TransferSoftSPIByte+0x26>
	TCCR1B = 0;
     ff4:	10 92 81 00 	sts	0x0081, r1

	return SoftSPI_Data;
     ff8:	80 91 a3 01 	lds	r24, 0x01A3
}
     ffc:	08 95       	ret

00000ffe <ISPTarget_SendByte>:
		 *
		 *  \param[in] Byte  Byte of data to send to the attached target
		 */
		static inline void ISPTarget_SendByte(const uint8_t Byte)
		{
			if (HardwareSPIMode)
     ffe:	90 91 67 01 	lds	r25, 0x0167
    1002:	99 23       	and	r25, r25
    1004:	29 f0       	breq	.+10     	; 0x1010 <ISPTarget_SendByte+0x12>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
    1006:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
    1008:	0d b4       	in	r0, 0x2d	; 45
    100a:	07 fe       	sbrs	r0, 7
    100c:	fd cf       	rjmp	.-6      	; 0x1008 <ISPTarget_SendByte+0xa>
    100e:	08 95       	ret
			  SPI_SendByte(Byte);
			else
			  ISPTarget_TransferSoftSPIByte(Byte);
    1010:	d7 cf       	rjmp	.-82     	; 0xfc0 <ISPTarget_TransferSoftSPIByte>

00001012 <ISPTarget_ChangeTargetResetLine>:
    1012:	88 23       	and	r24, r24
    1014:	39 f0       	breq	.+14     	; 0x1024 <ISPTarget_ChangeTargetResetLine+0x12>
 */
void ISPTarget_ChangeTargetResetLine(const bool ResetTarget)
{
	if (ResetTarget)
	{
		AUX_LINE_DDR |= AUX_LINE_MASK;
    1016:	24 9a       	sbi	0x04, 4	; 4

		if (!(V2Params_GetParameterValue(PARAM_RESET_POLARITY)))
    1018:	8e e9       	ldi	r24, 0x9E	; 158
    101a:	09 db       	rcall	.-2542   	; 0x62e <V2Params_GetParameterValue>
    101c:	88 23       	and	r24, r24
    101e:	19 f4       	brne	.+6      	; 0x1026 <ISPTarget_ChangeTargetResetLine+0x14>
    1020:	2c 9a       	sbi	0x05, 4	; 5
		  AUX_LINE_PORT |=  AUX_LINE_MASK;
    1022:	08 95       	ret
    1024:	24 98       	cbi	0x04, 4	; 4
		else
		  AUX_LINE_PORT &= ~AUX_LINE_MASK;
	}
	else
	{
		AUX_LINE_DDR  &= ~AUX_LINE_MASK;
    1026:	2c 98       	cbi	0x05, 4	; 5
		AUX_LINE_PORT &= ~AUX_LINE_MASK;
    1028:	08 95       	ret

0000102a <ISPTarget_WaitWhileTargetBusy>:
    102a:	80 ef       	ldi	r24, 0xF0	; 240
 */
uint8_t ISPTarget_WaitWhileTargetBusy(void)
{
	do
	{
		ISPTarget_SendByte(0xF0);
    102c:	e8 df       	rcall	.-48     	; 0xffe <ISPTarget_SendByte>
    102e:	80 e0       	ldi	r24, 0x00	; 0
		ISPTarget_SendByte(0x00);
    1030:	e6 df       	rcall	.-52     	; 0xffe <ISPTarget_SendByte>
    1032:	80 e0       	ldi	r24, 0x00	; 0
    1034:	e4 df       	rcall	.-56     	; 0xffe <ISPTarget_SendByte>
		ISPTarget_SendByte(0x00);
    1036:	80 91 67 01 	lds	r24, 0x0167
    103a:	88 23       	and	r24, r24
		 */
		static inline uint8_t ISPTarget_ReceiveByte(void)
		{
			uint8_t ReceivedByte;

			if (HardwareSPIMode)
    103c:	31 f0       	breq	.+12     	; 0x104a <ISPTarget_WaitWhileTargetBusy+0x20>
    103e:	1e bc       	out	0x2e, r1	; 46
    1040:	0d b4       	in	r0, 0x2d	; 45
    1042:	07 fe       	sbrs	r0, 7
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
    1044:	fd cf       	rjmp	.-6      	; 0x1040 <ISPTarget_WaitWhileTargetBusy+0x16>
				while (!(SPSR & (1 << SPIF)));
    1046:	8e b5       	in	r24, 0x2e	; 46
    1048:	02 c0       	rjmp	.+4      	; 0x104e <ISPTarget_WaitWhileTargetBusy+0x24>
    104a:	80 e0       	ldi	r24, 0x00	; 0
				return SPDR;
    104c:	b9 df       	rcall	.-142    	; 0xfc0 <ISPTarget_TransferSoftSPIByte>
    104e:	80 ff       	sbrs	r24, 0
			  ReceivedByte = SPI_ReceiveByte();
			else
			  ReceivedByte = ISPTarget_TransferSoftSPIByte(0x00);
    1050:	03 c0       	rjmp	.+6      	; 0x1058 <ISPTarget_WaitWhileTargetBusy+0x2e>
    1052:	8a b5       	in	r24, 0x2a	; 42
    1054:	88 23       	and	r24, r24
	}
	while ((ISPTarget_ReceiveByte() & 0x01) && TimeoutTicksRemaining);
    1056:	49 f7       	brne	.-46     	; 0x102a <ISPTarget_WaitWhileTargetBusy>
    1058:	8a b5       	in	r24, 0x2a	; 42
    105a:	88 23       	and	r24, r24
    105c:	11 f0       	breq	.+4      	; 0x1062 <ISPTarget_WaitWhileTargetBusy+0x38>
    105e:	80 e0       	ldi	r24, 0x00	; 0

	return (TimeoutTicksRemaining > 0) ? STATUS_CMD_OK : STATUS_RDY_BSY_TOUT;
    1060:	08 95       	ret
    1062:	81 e8       	ldi	r24, 0x81	; 129
    1064:	08 95       	ret

00001066 <ISPTarget_LoadExtendedAddress>:
    1066:	8d e4       	ldi	r24, 0x4D	; 77
    1068:	ca df       	rcall	.-108    	; 0xffe <ISPTarget_SendByte>
    106a:	80 e0       	ldi	r24, 0x00	; 0
}
    106c:	c8 df       	rcall	.-112    	; 0xffe <ISPTarget_SendByte>
 *  pointer variable set by the host when a SET ADDRESS command is issued.
 */
void ISPTarget_LoadExtendedAddress(void)
{
	ISPTarget_SendByte(LOAD_EXTENDED_ADDRESS_CMD);
	ISPTarget_SendByte(0x00);
    106e:	80 91 a8 01 	lds	r24, 0x01A8
	ISPTarget_SendByte(CurrentAddress >> 16);
    1072:	c5 df       	rcall	.-118    	; 0xffe <ISPTarget_SendByte>
    1074:	80 e0       	ldi	r24, 0x00	; 0
    1076:	c3 cf       	rjmp	.-122    	; 0xffe <ISPTarget_SendByte>

00001078 <ISPTarget_WaitForProgComplete>:
    1078:	0f 93       	push	r16
	ISPTarget_SendByte(0x00);
    107a:	1f 93       	push	r17
    107c:	cf 93       	push	r28
    107e:	df 93       	push	r29
}
    1080:	eb 01       	movw	r28, r22
uint8_t ISPTarget_WaitForProgComplete(const uint8_t ProgrammingMode,
                                      const uint16_t PollAddress,
                                      const uint8_t PollValue,
                                      const uint8_t DelayMS,
                                      const uint8_t ReadMemCommand)
{
    1082:	14 2f       	mov	r17, r20
	uint8_t ProgrammingStatus = STATUS_CMD_OK;

	/* Determine method of Programming Complete check */
	switch (ProgrammingMode & ~(PROG_MODE_PAGED_WRITES_MASK | PROG_MODE_COMMIT_PAGE_MASK))
    1084:	e8 2f       	mov	r30, r24
    1086:	f0 e0       	ldi	r31, 0x00	; 0
    1088:	ee 77       	andi	r30, 0x7E	; 126
    108a:	e8 30       	cpi	r30, 0x08	; 8
    108c:	f1 05       	cpc	r31, r1
    108e:	89 f1       	breq	.+98     	; 0x10f2 <ISPTarget_WaitForProgComplete+0x7a>
    1090:	e9 30       	cpi	r30, 0x09	; 9
    1092:	f1 05       	cpc	r31, r1
    1094:	3c f4       	brge	.+14     	; 0x10a4 <ISPTarget_WaitForProgComplete+0x2c>
    1096:	e2 30       	cpi	r30, 0x02	; 2
    1098:	f1 05       	cpc	r31, r1
    109a:	69 f0       	breq	.+26     	; 0x10b6 <ISPTarget_WaitForProgComplete+0x3e>
    109c:	e4 30       	cpi	r30, 0x04	; 4
    109e:	f1 05       	cpc	r31, r1
    10a0:	51 f5       	brne	.+84     	; 0x10f6 <ISPTarget_WaitForProgComplete+0x7e>
    10a2:	0c c0       	rjmp	.+24     	; 0x10bc <ISPTarget_WaitForProgComplete+0x44>
    10a4:	e0 32       	cpi	r30, 0x20	; 32
    10a6:	f1 05       	cpc	r31, r1
    10a8:	49 f0       	breq	.+18     	; 0x10bc <ISPTarget_WaitForProgComplete+0x44>
    10aa:	e0 34       	cpi	r30, 0x40	; 64
    10ac:	f1 05       	cpc	r31, r1
    10ae:	09 f1       	breq	.+66     	; 0x10f2 <ISPTarget_WaitForProgComplete+0x7a>
    10b0:	e0 31       	cpi	r30, 0x10	; 16
    10b2:	f1 05       	cpc	r31, r1
    10b4:	01 f5       	brne	.+64     	; 0x10f6 <ISPTarget_WaitForProgComplete+0x7e>
	{
		case PROG_MODE_WORD_TIMEDELAY_MASK:
		case PROG_MODE_PAGED_TIMEDELAY_MASK:
			ISPProtocol_DelayMS(DelayMS);
    10b6:	82 2f       	mov	r24, r18
    10b8:	e8 dd       	rcall	.-1072   	; 0xc8a <ISPProtocol_DelayMS>
    10ba:	1d c0       	rjmp	.+58     	; 0x10f6 <ISPTarget_WaitForProgComplete+0x7e>
    10bc:	80 2f       	mov	r24, r16
			break;
		case PROG_MODE_WORD_VALUE_MASK:
		case PROG_MODE_PAGED_VALUE_MASK:
			do
			{
				ISPTarget_SendByte(ReadMemCommand);
    10be:	9f df       	rcall	.-194    	; 0xffe <ISPTarget_SendByte>
    10c0:	8d 2f       	mov	r24, r29
    10c2:	9d df       	rcall	.-198    	; 0xffe <ISPTarget_SendByte>
				ISPTarget_SendByte(PollAddress >> 8);
    10c4:	8c 2f       	mov	r24, r28
    10c6:	9b df       	rcall	.-202    	; 0xffe <ISPTarget_SendByte>
    10c8:	80 91 67 01 	lds	r24, 0x0167
				ISPTarget_SendByte(PollAddress & 0xFF);
    10cc:	88 23       	and	r24, r24
    10ce:	31 f0       	breq	.+12     	; 0x10dc <ISPTarget_WaitForProgComplete+0x64>
		 */
		static inline uint8_t ISPTarget_TransferByte(const uint8_t Byte)
		{
			uint8_t ReceivedByte;

			if (HardwareSPIMode)
    10d0:	1e bc       	out	0x2e, r1	; 46
    10d2:	0d b4       	in	r0, 0x2d	; 45
    10d4:	07 fe       	sbrs	r0, 7
    10d6:	fd cf       	rjmp	.-6      	; 0x10d2 <ISPTarget_WaitForProgComplete+0x5a>
			 *  \return Response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_TransferByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline uint8_t SPI_TransferByte(const uint8_t Byte)
			{
				SPDR = Byte;
    10d8:	8e b5       	in	r24, 0x2e	; 46
				while (!(SPSR & (1 << SPIF)));
    10da:	02 c0       	rjmp	.+4      	; 0x10e0 <ISPTarget_WaitForProgComplete+0x68>
    10dc:	80 e0       	ldi	r24, 0x00	; 0
    10de:	70 df       	rcall	.-288    	; 0xfc0 <ISPTarget_TransferSoftSPIByte>
				return SPDR;
    10e0:	81 17       	cp	r24, r17
    10e2:	19 f4       	brne	.+6      	; 0x10ea <ISPTarget_WaitForProgComplete+0x72>
			  ReceivedByte = SPI_TransferByte(Byte);
			else
			  ReceivedByte = ISPTarget_TransferSoftSPIByte(Byte);
    10e4:	8a b5       	in	r24, 0x2a	; 42
    10e6:	88 23       	and	r24, r24
    10e8:	49 f7       	brne	.-46     	; 0x10bc <ISPTarget_WaitForProgComplete+0x44>
			}
			while ((ISPTarget_TransferByte(0x00) == PollValue) && TimeoutTicksRemaining);
    10ea:	8a b5       	in	r24, 0x2a	; 42
    10ec:	88 23       	and	r24, r24
    10ee:	29 f0       	breq	.+10     	; 0x10fa <ISPTarget_WaitForProgComplete+0x82>
    10f0:	02 c0       	rjmp	.+4      	; 0x10f6 <ISPTarget_WaitForProgComplete+0x7e>
    10f2:	9b df       	rcall	.-202    	; 0x102a <ISPTarget_WaitWhileTargetBusy>

			if (!(TimeoutTicksRemaining))
    10f4:	03 c0       	rjmp	.+6      	; 0x10fc <ISPTarget_WaitForProgComplete+0x84>
    10f6:	80 e0       	ldi	r24, 0x00	; 0
    10f8:	01 c0       	rjmp	.+2      	; 0x10fc <ISPTarget_WaitForProgComplete+0x84>
    10fa:	80 e8       	ldi	r24, 0x80	; 128
			  ProgrammingStatus = STATUS_CMD_TOUT;

			break;
		case PROG_MODE_WORD_READYBUSY_MASK:
		case PROG_MODE_PAGED_READYBUSY_MASK:
			ProgrammingStatus = ISPTarget_WaitWhileTargetBusy();
    10fc:	94 e6       	ldi	r25, 0x64	; 100
    10fe:	9a bd       	out	0x2a, r25	; 42
			break;
    1100:	df 91       	pop	r29
                                      const uint16_t PollAddress,
                                      const uint8_t PollValue,
                                      const uint8_t DelayMS,
                                      const uint8_t ReadMemCommand)
{
	uint8_t ProgrammingStatus = STATUS_CMD_OK;
    1102:	cf 91       	pop	r28
    1104:	1f 91       	pop	r17
				ISPTarget_SendByte(PollAddress & 0xFF);
			}
			while ((ISPTarget_TransferByte(0x00) == PollValue) && TimeoutTicksRemaining);

			if (!(TimeoutTicksRemaining))
			  ProgrammingStatus = STATUS_CMD_TOUT;
    1106:	0f 91       	pop	r16
			ProgrammingStatus = ISPTarget_WaitWhileTargetBusy();
			break;
	}

	/* Program complete - reset timeout */
	TimeoutTicksRemaining = COMMAND_TIMEOUT_TICKS;
    1108:	08 95       	ret

0000110a <SwapEndian_32>:
			 *
			 *  \return Input data with the individual bytes reversed.
			 */
			static inline uint32_t SwapEndian_32(const uint32_t DWord) ATTR_WARN_UNUSED_RESULT ATTR_CONST;
			static inline uint32_t SwapEndian_32(const uint32_t DWord)
			{
    110a:	9b 01       	movw	r18, r22
				Temp = Data.Bytes[1];
				Data.Bytes[1] = Data.Bytes[2];
				Data.Bytes[2] = Temp;

				return Data.DWord;
			}
    110c:	69 2f       	mov	r22, r25
    110e:	78 2f       	mov	r23, r24
    1110:	83 2f       	mov	r24, r19
    1112:	92 2f       	mov	r25, r18
    1114:	08 95       	ret

00001116 <XPROGProtocol_WriteMemory>:
	Endpoint_ClearIN();
}

/** Handler for the XPROG WRITE_MEMORY command to write to a specific memory space within the attached device. */
static void XPROGProtocol_WriteMemory(void)
{
    1116:	af 92       	push	r10
    1118:	bf 92       	push	r11
    111a:	cf 92       	push	r12
    111c:	df 92       	push	r13
    111e:	ef 92       	push	r14
    1120:	ff 92       	push	r15
    1122:	0f 93       	push	r16
    1124:	1f 93       	push	r17
    1126:	cf 93       	push	r28
    1128:	df 93       	push	r29
    112a:	cd b7       	in	r28, 0x3d	; 61
    112c:	de b7       	in	r29, 0x3e	; 62
    112e:	c8 50       	subi	r28, 0x08	; 8
    1130:	d1 40       	sbci	r29, 0x01	; 1
    1132:	0f b6       	in	r0, 0x3f	; 63
    1134:	f8 94       	cli
    1136:	de bf       	out	0x3e, r29	; 62
    1138:	0f be       	out	0x3f, r0	; 63
    113a:	cd bf       	out	0x3d, r28	; 61
		uint32_t Address;
		uint16_t Length;
		uint8_t  ProgData[256];
	} WriteMemory_XPROG_Params;

	Endpoint_Read_Stream_LE(&WriteMemory_XPROG_Params, (sizeof(WriteMemory_XPROG_Params) -
    113c:	ce 01       	movw	r24, r28
    113e:	01 96       	adiw	r24, 0x01	; 1
    1140:	68 e0       	ldi	r22, 0x08	; 8
    1142:	70 e0       	ldi	r23, 0x00	; 0
    1144:	40 e0       	ldi	r20, 0x00	; 0
    1146:	50 e0       	ldi	r21, 0x00	; 0
    1148:	94 d6       	rcall	.+3368   	; 0x1e72 <Endpoint_Read_Stream_LE>
    114a:	6b 81       	ldd	r22, Y+3	; 0x03
	                                                    sizeof(WriteMemory_XPROG_Params).ProgData), NULL);
	WriteMemory_XPROG_Params.Address = SwapEndian_32(WriteMemory_XPROG_Params.Address);
    114c:	7c 81       	ldd	r23, Y+4	; 0x04
    114e:	8d 81       	ldd	r24, Y+5	; 0x05
    1150:	9e 81       	ldd	r25, Y+6	; 0x06
    1152:	db df       	rcall	.-74     	; 0x110a <SwapEndian_32>
    1154:	dc 01       	movw	r26, r24
    1156:	cb 01       	movw	r24, r22
    1158:	8b 83       	std	Y+3, r24	; 0x03
    115a:	9c 83       	std	Y+4, r25	; 0x04
    115c:	ad 83       	std	Y+5, r26	; 0x05
    115e:	be 83       	std	Y+6, r27	; 0x06
    1160:	7f 81       	ldd	r23, Y+7	; 0x07
    1162:	68 85       	ldd	r22, Y+8	; 0x08
				{
					uint16_t Word;
					uint8_t  Bytes[2];
				} Data;

				Data.Word = Word;
    1164:	6f 83       	std	Y+7, r22	; 0x07
    1166:	78 87       	std	Y+8, r23	; 0x08
	WriteMemory_XPROG_Params.Length  = SwapEndian_16(WriteMemory_XPROG_Params.Length);
    1168:	ce 01       	movw	r24, r28
    116a:	09 96       	adiw	r24, 0x09	; 9
	Endpoint_Read_Stream_LE(&WriteMemory_XPROG_Params.ProgData, WriteMemory_XPROG_Params.Length, NULL);
    116c:	40 e0       	ldi	r20, 0x00	; 0
    116e:	50 e0       	ldi	r21, 0x00	; 0
    1170:	80 d6       	rcall	.+3328   	; 0x1e72 <Endpoint_Read_Stream_LE>
    1172:	8f 81       	ldd	r24, Y+7	; 0x07
    1174:	98 85       	ldd	r25, Y+8	; 0x08
    1176:	09 96       	adiw	r24, 0x09	; 9

	// The driver will terminate transfers that are a round multiple of the endpoint bank in size with a ZLP, need
	// to catch this and discard it before continuing on with packet processing to prevent communication issues
	if (((sizeof(uint8_t) + sizeof(WriteMemory_XPROG_Params) - sizeof(WriteMemory_XPROG_Params.ProgData)) +
    1178:	8f 73       	andi	r24, 0x3F	; 63
    117a:	90 70       	andi	r25, 0x00	; 0
    117c:	00 97       	sbiw	r24, 0x00	; 0
	    WriteMemory_XPROG_Params.Length) % AVRISP_DATA_EPSIZE == 0)
    117e:	39 f4       	brne	.+14     	; 0x118e <XPROGProtocol_WriteMemory+0x78>
    1180:	80 91 e8 00 	lds	r24, 0x00E8
	WriteMemory_XPROG_Params.Length  = SwapEndian_16(WriteMemory_XPROG_Params.Length);
	Endpoint_Read_Stream_LE(&WriteMemory_XPROG_Params.ProgData, WriteMemory_XPROG_Params.Length, NULL);

	// The driver will terminate transfers that are a round multiple of the endpoint bank in size with a ZLP, need
	// to catch this and discard it before continuing on with packet processing to prevent communication issues
	if (((sizeof(uint8_t) + sizeof(WriteMemory_XPROG_Params) - sizeof(WriteMemory_XPROG_Params.ProgData)) +
    1184:	8b 77       	andi	r24, 0x7B	; 123
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    1186:	80 93 e8 00 	sts	0x00E8, r24
    118a:	0e 94 47 11 	call	0x228e	; 0x228e <Endpoint_WaitUntilReady>
    118e:	80 91 e8 00 	lds	r24, 0x00E8
	    WriteMemory_XPROG_Params.Length) % AVRISP_DATA_EPSIZE == 0)
	{
		Endpoint_ClearOUT();
		Endpoint_WaitUntilReady();
    1192:	8b 77       	andi	r24, 0x7B	; 123
    1194:	80 93 e8 00 	sts	0x00E8, r24
    1198:	82 e0       	ldi	r24, 0x02	; 2
    119a:	80 93 e9 00 	sts	0x00E9, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    119e:	80 91 ec 00 	lds	r24, 0x00EC
    11a2:	81 60       	ori	r24, 0x01	; 1
			 *  \param[in] DirectionMask  New endpoint direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask)
			{
				UECFG0X = ((UECFG0X & ~(1 << EPDIR)) | (DirectionMask ? (1 << EPDIR) : 0));
    11a4:	80 93 ec 00 	sts	0x00EC, r24
    11a8:	80 91 a4 01 	lds	r24, 0x01A4
    11ac:	88 23       	and	r24, r24

	Endpoint_ClearOUT();
	Endpoint_SelectEndpoint(AVRISP_DATA_IN_EPADDR);
	Endpoint_SetEndpointDirection(ENDPOINT_DIR_IN);

	if (XPROG_SelectedProtocol == XPRG_PROTOCOL_PDI)
    11ae:	79 f5       	brne	.+94     	; 0x120e <XPROGProtocol_WriteMemory+0xf8>
    11b0:	29 81       	ldd	r18, Y+1	; 0x01
    11b2:	21 50       	subi	r18, 0x01	; 1
    11b4:	eb 80       	ldd	r14, Y+3	; 0x03
    11b6:	fc 80       	ldd	r15, Y+4	; 0x04
    11b8:	0d 81       	ldd	r16, Y+5	; 0x05
    11ba:	1e 81       	ldd	r17, Y+6	; 0x06
    11bc:	26 30       	cpi	r18, 0x06	; 6
    11be:	a0 f4       	brcc	.+40     	; 0x11e8 <XPROGProtocol_WriteMemory+0xd2>
    11c0:	30 e0       	ldi	r19, 0x00	; 0
    11c2:	f9 01       	movw	r30, r18
    11c4:	e8 58       	subi	r30, 0x88	; 136
    11c6:	fe 4f       	sbci	r31, 0xFE	; 254
    11c8:	40 81       	ld	r20, Z
    11ca:	f9 01       	movw	r30, r18
    11cc:	e2 58       	subi	r30, 0x82	; 130
    11ce:	fe 4f       	sbci	r31, 0xFE	; 254
    11d0:	80 81       	ld	r24, Z
    11d2:	f9 01       	movw	r30, r18
    11d4:	ec 57       	subi	r30, 0x7C	; 124
    11d6:	fe 4f       	sbci	r31, 0xFE	; 254
    11d8:	60 81       	ld	r22, Z
    11da:	26 57       	subi	r18, 0x76	; 118
    11dc:	3e 4f       	sbci	r19, 0xFE	; 254
    11de:	f9 01       	movw	r30, r18
				PagedMemory      = false;
				break;
		}

		/* Send the appropriate memory write commands to the device, indicate timeout if occurred */
		if ((PagedMemory && !(XMEGANVM_WritePageMemory(WriteBuffCommand, EraseBuffCommand, WriteCommand,
    11e0:	90 81       	ld	r25, Z
    11e2:	99 23       	and	r25, r25
    11e4:	71 f0       	breq	.+28     	; 0x1202 <XPROGProtocol_WriteMemory+0xec>
    11e6:	03 c0       	rjmp	.+6      	; 0x11ee <XPROGProtocol_WriteMemory+0xd8>
    11e8:	66 e2       	ldi	r22, 0x26	; 38
    11ea:	83 e2       	ldi	r24, 0x23	; 35
    11ec:	4e e2       	ldi	r20, 0x2E	; 46
		uint8_t WriteCommand     = XMEGA_NVM_CMD_WRITEFLASHPAGE;
		uint8_t WriteBuffCommand = XMEGA_NVM_CMD_LOADFLASHPAGEBUFF;
		uint8_t EraseBuffCommand = XMEGA_NVM_CMD_ERASEFLASHPAGEBUFF;
		bool    PagedMemory      = true;

		switch (WriteMemory_XPROG_Params.MemoryType)
    11ee:	af 80       	ldd	r10, Y+7	; 0x07
    11f0:	b8 84       	ldd	r11, Y+8	; 0x08
    11f2:	2a 81       	ldd	r18, Y+2	; 0x02
				PagedMemory      = false;
				break;
		}

		/* Send the appropriate memory write commands to the device, indicate timeout if occurred */
		if ((PagedMemory && !(XMEGANVM_WritePageMemory(WriteBuffCommand, EraseBuffCommand, WriteCommand,
    11f4:	99 e0       	ldi	r25, 0x09	; 9
    11f6:	c9 2e       	mov	r12, r25
    11f8:	d1 2c       	mov	r13, r1
    11fa:	cc 0e       	add	r12, r28
    11fc:	dd 1e       	adc	r13, r29
    11fe:	04 d4       	rcall	.+2056   	; 0x1a08 <XMEGANVM_WritePageMemory>
    1200:	0e c0       	rjmp	.+28     	; 0x121e <XPROGProtocol_WriteMemory+0x108>
    1202:	84 2f       	mov	r24, r20
    1204:	b8 01       	movw	r22, r16
    1206:	a7 01       	movw	r20, r14
    1208:	29 85       	ldd	r18, Y+9	; 0x09
													   WriteMemory_XPROG_Params.PageMode, WriteMemory_XPROG_Params.Address,
													   WriteMemory_XPROG_Params.ProgData, WriteMemory_XPROG_Params.Length))) ||
		   (!PagedMemory && !(XMEGANVM_WriteByteMemory(WriteCommand, WriteMemory_XPROG_Params.Address,
    120a:	da d3       	rcall	.+1972   	; 0x19c0 <XMEGANVM_WriteByteMemory>
    120c:	08 c0       	rjmp	.+16     	; 0x121e <XPROGProtocol_WriteMemory+0x108>
    120e:	4f 81       	ldd	r20, Y+7	; 0x07
    1210:	58 85       	ldd	r21, Y+8	; 0x08
    1212:	8b 81       	ldd	r24, Y+3	; 0x03
    1214:	9c 81       	ldd	r25, Y+4	; 0x04
    1216:	be 01       	movw	r22, r28
		}
	}
	else
	{
		/* Send write command to the TPI device, indicate timeout if occurred */
		if (!(TINYNVM_WriteMemory(WriteMemory_XPROG_Params.Address, WriteMemory_XPROG_Params.ProgData,
    1218:	67 5f       	subi	r22, 0xF7	; 247
    121a:	7f 4f       	sbci	r23, 0xFF	; 255
    121c:	87 d5       	rcall	.+2830   	; 0x1d2c <TINYNVM_WriteMemory>
    121e:	88 23       	and	r24, r24
    1220:	11 f0       	breq	.+4      	; 0x1226 <XPROGProtocol_WriteMemory+0x110>
    1222:	80 e0       	ldi	r24, 0x00	; 0
    1224:	01 c0       	rjmp	.+2      	; 0x1228 <XPROGProtocol_WriteMemory+0x112>
    1226:	83 e0       	ldi	r24, 0x03	; 3
    1228:	90 e5       	ldi	r25, 0x50	; 80
    122a:	90 93 f1 00 	sts	0x00F1, r25
}

/** Handler for the XPROG WRITE_MEMORY command to write to a specific memory space within the attached device. */
static void XPROGProtocol_WriteMemory(void)
{
	uint8_t ReturnStatus = XPRG_ERR_OK;
    122e:	94 e0       	ldi	r25, 0x04	; 4
    1230:	90 93 f1 00 	sts	0x00F1, r25
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    1234:	80 93 f1 00 	sts	0x00F1, r24
    1238:	80 91 e8 00 	lds	r24, 0x00E8
    123c:	8e 77       	andi	r24, 0x7E	; 126
    123e:	80 93 e8 00 	sts	0x00E8, r24
    1242:	c8 5f       	subi	r28, 0xF8	; 248
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1244:	de 4f       	sbci	r29, 0xFE	; 254
    1246:	0f b6       	in	r0, 0x3f	; 63
    1248:	f8 94       	cli
    124a:	de bf       	out	0x3e, r29	; 62
    124c:	0f be       	out	0x3f, r0	; 63

	Endpoint_Write_8(CMD_XPROG);
	Endpoint_Write_8(XPRG_CMD_WRITE_MEM);
	Endpoint_Write_8(ReturnStatus);
	Endpoint_ClearIN();
}
    124e:	cd bf       	out	0x3d, r28	; 61
    1250:	df 91       	pop	r29
    1252:	cf 91       	pop	r28
    1254:	1f 91       	pop	r17
    1256:	0f 91       	pop	r16
    1258:	ff 90       	pop	r15
    125a:	ef 90       	pop	r14
    125c:	df 90       	pop	r13
    125e:	cf 90       	pop	r12
    1260:	bf 90       	pop	r11
    1262:	af 90       	pop	r10
    1264:	08 95       	ret

00001266 <XPROGProtocol_ReadMemory>:
    1266:	cf 93       	push	r28
    1268:	df 93       	push	r29
    126a:	cd b7       	in	r28, 0x3d	; 61
    126c:	de b7       	in	r29, 0x3e	; 62
    126e:	c7 50       	subi	r28, 0x07	; 7
    1270:	d1 40       	sbci	r29, 0x01	; 1

/** Handler for the XPROG READ_MEMORY command to read data from a specific address space within the
 *  attached device.
 */
static void XPROGProtocol_ReadMemory(void)
{
    1272:	0f b6       	in	r0, 0x3f	; 63
    1274:	f8 94       	cli
    1276:	de bf       	out	0x3e, r29	; 62
    1278:	0f be       	out	0x3f, r0	; 63
    127a:	cd bf       	out	0x3d, r28	; 61
		uint8_t  MemoryType;
		uint32_t Address;
		uint16_t Length;
	} ReadMemory_XPROG_Params;

	Endpoint_Read_Stream_LE(&ReadMemory_XPROG_Params, sizeof(ReadMemory_XPROG_Params), NULL);
    127c:	ce 01       	movw	r24, r28
    127e:	01 96       	adiw	r24, 0x01	; 1
    1280:	67 e0       	ldi	r22, 0x07	; 7
    1282:	70 e0       	ldi	r23, 0x00	; 0
    1284:	40 e0       	ldi	r20, 0x00	; 0
    1286:	50 e0       	ldi	r21, 0x00	; 0
    1288:	f4 d5       	rcall	.+3048   	; 0x1e72 <Endpoint_Read_Stream_LE>
    128a:	6a 81       	ldd	r22, Y+2	; 0x02
	ReadMemory_XPROG_Params.Address = SwapEndian_32(ReadMemory_XPROG_Params.Address);
    128c:	7b 81       	ldd	r23, Y+3	; 0x03
    128e:	8c 81       	ldd	r24, Y+4	; 0x04
    1290:	9d 81       	ldd	r25, Y+5	; 0x05
    1292:	3b df       	rcall	.-394    	; 0x110a <SwapEndian_32>
    1294:	dc 01       	movw	r26, r24
    1296:	cb 01       	movw	r24, r22
    1298:	8a 83       	std	Y+2, r24	; 0x02
    129a:	9b 83       	std	Y+3, r25	; 0x03
    129c:	ac 83       	std	Y+4, r26	; 0x04
    129e:	bd 83       	std	Y+5, r27	; 0x05
    12a0:	8e 81       	ldd	r24, Y+6	; 0x06
    12a2:	9f 81       	ldd	r25, Y+7	; 0x07
    12a4:	9e 83       	std	Y+6, r25	; 0x06
    12a6:	8f 83       	std	Y+7, r24	; 0x07
	ReadMemory_XPROG_Params.Length  = SwapEndian_16(ReadMemory_XPROG_Params.Length);
    12a8:	80 91 e8 00 	lds	r24, 0x00E8
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    12ac:	8b 77       	andi	r24, 0x7B	; 123
    12ae:	80 93 e8 00 	sts	0x00E8, r24
    12b2:	82 e0       	ldi	r24, 0x02	; 2
    12b4:	80 93 e9 00 	sts	0x00E9, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    12b8:	80 91 ec 00 	lds	r24, 0x00EC
			 *  \param[in] DirectionMask  New endpoint direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask)
			{
				UECFG0X = ((UECFG0X & ~(1 << EPDIR)) | (DirectionMask ? (1 << EPDIR) : 0));
    12bc:	81 60       	ori	r24, 0x01	; 1
    12be:	80 93 ec 00 	sts	0x00EC, r24
    12c2:	80 91 a4 01 	lds	r24, 0x01A4
	Endpoint_SelectEndpoint(AVRISP_DATA_IN_EPADDR);
	Endpoint_SetEndpointDirection(ENDPOINT_DIR_IN);

	uint8_t ReadBuffer[256];

	if (XPROG_SelectedProtocol == XPRG_PROTOCOL_PDI)
    12c6:	2e 81       	ldd	r18, Y+6	; 0x06
    12c8:	3f 81       	ldd	r19, Y+7	; 0x07
    12ca:	88 23       	and	r24, r24
    12cc:	49 f4       	brne	.+18     	; 0x12e0 <XPROGProtocol_ReadMemory+0x7a>
    12ce:	6a 81       	ldd	r22, Y+2	; 0x02
    12d0:	7b 81       	ldd	r23, Y+3	; 0x03
	{
		/* Read the PDI target's memory, indicate timeout if occurred */
		if (!(XMEGANVM_ReadMemory(ReadMemory_XPROG_Params.Address, ReadBuffer, ReadMemory_XPROG_Params.Length)))
    12d2:	8c 81       	ldd	r24, Y+4	; 0x04
    12d4:	9d 81       	ldd	r25, Y+5	; 0x05
    12d6:	ae 01       	movw	r20, r28
    12d8:	48 5f       	subi	r20, 0xF8	; 248
    12da:	5f 4f       	sbci	r21, 0xFF	; 255
    12dc:	37 d3       	rcall	.+1646   	; 0x194c <XMEGANVM_ReadMemory>
    12de:	07 c0       	rjmp	.+14     	; 0x12ee <XPROGProtocol_ReadMemory+0x88>
    12e0:	8a 81       	ldd	r24, Y+2	; 0x02
    12e2:	9b 81       	ldd	r25, Y+3	; 0x03
    12e4:	be 01       	movw	r22, r28
		  ReturnStatus = XPRG_ERR_TIMEOUT;
	}
	else
	{
		/* Read the TPI target's memory, indicate timeout if occurred */
		if (!(TINYNVM_ReadMemory(ReadMemory_XPROG_Params.Address, ReadBuffer, ReadMemory_XPROG_Params.Length)))
    12e6:	68 5f       	subi	r22, 0xF8	; 248
    12e8:	7f 4f       	sbci	r23, 0xFF	; 255
    12ea:	a9 01       	movw	r20, r18
    12ec:	f3 d4       	rcall	.+2534   	; 0x1cd4 <TINYNVM_ReadMemory>
    12ee:	88 23       	and	r24, r24
    12f0:	11 f0       	breq	.+4      	; 0x12f6 <XPROGProtocol_ReadMemory+0x90>
    12f2:	80 e0       	ldi	r24, 0x00	; 0
    12f4:	01 c0       	rjmp	.+2      	; 0x12f8 <XPROGProtocol_ReadMemory+0x92>
    12f6:	83 e0       	ldi	r24, 0x03	; 3
    12f8:	90 e5       	ldi	r25, 0x50	; 80
/** Handler for the XPROG READ_MEMORY command to read data from a specific address space within the
 *  attached device.
 */
static void XPROGProtocol_ReadMemory(void)
{
	uint8_t ReturnStatus = XPRG_ERR_OK;
    12fa:	90 93 f1 00 	sts	0x00F1, r25
	}
	else
	{
		/* Read the TPI target's memory, indicate timeout if occurred */
		if (!(TINYNVM_ReadMemory(ReadMemory_XPROG_Params.Address, ReadBuffer, ReadMemory_XPROG_Params.Length)))
		  ReturnStatus = XPRG_ERR_TIMEOUT;
    12fe:	95 e0       	ldi	r25, 0x05	; 5
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    1300:	90 93 f1 00 	sts	0x00F1, r25
    1304:	80 93 f1 00 	sts	0x00F1, r24
    1308:	88 23       	and	r24, r24
    130a:	39 f4       	brne	.+14     	; 0x131a <XPROGProtocol_ReadMemory+0xb4>
    130c:	6e 81       	ldd	r22, Y+6	; 0x06
    130e:	7f 81       	ldd	r23, Y+7	; 0x07

	Endpoint_Write_8(CMD_XPROG);
	Endpoint_Write_8(XPRG_CMD_READ_MEM);
	Endpoint_Write_8(ReturnStatus);

	if (ReturnStatus == XPRG_ERR_OK)
    1310:	ce 01       	movw	r24, r28
    1312:	08 96       	adiw	r24, 0x08	; 8
	  Endpoint_Write_Stream_LE(ReadBuffer, ReadMemory_XPROG_Params.Length, NULL);
    1314:	40 e0       	ldi	r20, 0x00	; 0
    1316:	50 e0       	ldi	r21, 0x00	; 0
    1318:	5c d5       	rcall	.+2744   	; 0x1dd2 <Endpoint_Write_Stream_LE>
    131a:	80 91 e8 00 	lds	r24, 0x00E8
    131e:	8e 77       	andi	r24, 0x7E	; 126
    1320:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1324:	c9 5f       	subi	r28, 0xF9	; 249
    1326:	de 4f       	sbci	r29, 0xFE	; 254
    1328:	0f b6       	in	r0, 0x3f	; 63
    132a:	f8 94       	cli
    132c:	de bf       	out	0x3e, r29	; 62

	Endpoint_ClearIN();
}
    132e:	0f be       	out	0x3f, r0	; 63
    1330:	cd bf       	out	0x3d, r28	; 61
    1332:	df 91       	pop	r29
    1334:	cf 91       	pop	r28
    1336:	08 95       	ret

00001338 <XPROGProtocol_SetMode>:
    1338:	cf 93       	push	r28
    133a:	df 93       	push	r29
    133c:	0f 92       	push	r0
    133e:	cd b7       	in	r28, 0x3d	; 61
    1340:	de b7       	in	r29, 0x3e	; 62
	struct
	{
		uint8_t Protocol;
	} SetMode_XPROG_Params;

	Endpoint_Read_Stream_LE(&SetMode_XPROG_Params, sizeof(SetMode_XPROG_Params), NULL);
    1342:	ce 01       	movw	r24, r28
    1344:	01 96       	adiw	r24, 0x01	; 1
    1346:	61 e0       	ldi	r22, 0x01	; 1
    1348:	70 e0       	ldi	r23, 0x00	; 0
    134a:	40 e0       	ldi	r20, 0x00	; 0
    134c:	50 e0       	ldi	r21, 0x00	; 0
    134e:	91 d5       	rcall	.+2850   	; 0x1e72 <Endpoint_Read_Stream_LE>
    1350:	80 91 e8 00 	lds	r24, 0x00E8
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    1354:	8b 77       	andi	r24, 0x7B	; 123
    1356:	80 93 e8 00 	sts	0x00E8, r24
    135a:	82 e0       	ldi	r24, 0x02	; 2
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    135c:	80 93 e9 00 	sts	0x00E9, r24
    1360:	80 91 ec 00 	lds	r24, 0x00EC
			 *  \param[in] DirectionMask  New endpoint direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask)
			{
				UECFG0X = ((UECFG0X & ~(1 << EPDIR)) | (DirectionMask ? (1 << EPDIR) : 0));
    1364:	81 60       	ori	r24, 0x01	; 1
    1366:	80 93 ec 00 	sts	0x00EC, r24
    136a:	89 81       	ldd	r24, Y+1	; 0x01

	Endpoint_ClearOUT();
	Endpoint_SelectEndpoint(AVRISP_DATA_IN_EPADDR);
	Endpoint_SetEndpointDirection(ENDPOINT_DIR_IN);

	XPROG_SelectedProtocol = SetMode_XPROG_Params.Protocol;
    136c:	80 93 a4 01 	sts	0x01A4, r24
    1370:	81 e5       	ldi	r24, 0x51	; 81
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    1372:	80 93 f1 00 	sts	0x00F1, r24
    1376:	89 81       	ldd	r24, Y+1	; 0x01

	Endpoint_Write_8(CMD_XPROG_SETMODE);
	Endpoint_Write_8((SetMode_XPROG_Params.Protocol != XPRG_PROTOCOL_JTAG) ? STATUS_CMD_OK : STATUS_CMD_FAILED);
    1378:	81 30       	cpi	r24, 0x01	; 1
    137a:	11 f0       	breq	.+4      	; 0x1380 <XPROGProtocol_SetMode+0x48>
    137c:	80 e0       	ldi	r24, 0x00	; 0
    137e:	01 c0       	rjmp	.+2      	; 0x1382 <XPROGProtocol_SetMode+0x4a>
    1380:	80 ec       	ldi	r24, 0xC0	; 192
    1382:	80 93 f1 00 	sts	0x00F1, r24
    1386:	80 91 e8 00 	lds	r24, 0x00E8
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    138a:	8e 77       	andi	r24, 0x7E	; 126
    138c:	80 93 e8 00 	sts	0x00E8, r24
    1390:	0f 90       	pop	r0
	Endpoint_ClearIN();
}
    1392:	df 91       	pop	r29
    1394:	cf 91       	pop	r28
    1396:	08 95       	ret

00001398 <XPROGProtocol_Command>:
    1398:	cf 93       	push	r28

/** Handler for the CMD_XPROG command, which wraps up XPROG commands in a V2 wrapper which need to be
 *  removed and processed so that the underlying XPROG command can be handled.
 */
void XPROGProtocol_Command(void)
{
    139a:	df 93       	push	r29
    139c:	cd b7       	in	r28, 0x3d	; 61
    139e:	de b7       	in	r29, 0x3e	; 62
    13a0:	29 97       	sbiw	r28, 0x09	; 9
    13a2:	0f b6       	in	r0, 0x3f	; 63
    13a4:	f8 94       	cli
    13a6:	de bf       	out	0x3e, r29	; 62
    13a8:	0f be       	out	0x3f, r0	; 63
    13aa:	cd bf       	out	0x3d, r28	; 61
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    13ac:	80 91 f1 00 	lds	r24, 0x00F1
	uint8_t XPROGCommand = Endpoint_Read_8();

	switch (XPROGCommand)
    13b0:	84 30       	cpi	r24, 0x04	; 4
    13b2:	09 f4       	brne	.+2      	; 0x13b6 <XPROGProtocol_Command+0x1e>
    13b4:	96 c0       	rjmp	.+300    	; 0x14e2 <XPROGProtocol_Command+0x14a>
    13b6:	85 30       	cpi	r24, 0x05	; 5
    13b8:	48 f4       	brcc	.+18     	; 0x13cc <XPROGProtocol_Command+0x34>
    13ba:	82 30       	cpi	r24, 0x02	; 2
    13bc:	89 f1       	breq	.+98     	; 0x1420 <XPROGProtocol_Command+0x88>
    13be:	83 30       	cpi	r24, 0x03	; 3
    13c0:	08 f0       	brcs	.+2      	; 0x13c4 <XPROGProtocol_Command+0x2c>
    13c2:	4a c0       	rjmp	.+148    	; 0x1458 <XPROGProtocol_Command+0xc0>
    13c4:	81 30       	cpi	r24, 0x01	; 1
    13c6:	09 f0       	breq	.+2      	; 0x13ca <XPROGProtocol_Command+0x32>
    13c8:	29 c1       	rjmp	.+594    	; 0x161c <XPROGProtocol_Command+0x284>
    13ca:	0a c0       	rjmp	.+20     	; 0x13e0 <XPROGProtocol_Command+0x48>
    13cc:	86 30       	cpi	r24, 0x06	; 6
    13ce:	09 f4       	brne	.+2      	; 0x13d2 <XPROGProtocol_Command+0x3a>
    13d0:	8c c0       	rjmp	.+280    	; 0x14ea <XPROGProtocol_Command+0x152>
    13d2:	86 30       	cpi	r24, 0x06	; 6
    13d4:	08 f4       	brcc	.+2      	; 0x13d8 <XPROGProtocol_Command+0x40>
    13d6:	87 c0       	rjmp	.+270    	; 0x14e6 <XPROGProtocol_Command+0x14e>
    13d8:	87 30       	cpi	r24, 0x07	; 7
    13da:	09 f0       	breq	.+2      	; 0x13de <XPROGProtocol_Command+0x46>
    13dc:	1f c1       	rjmp	.+574    	; 0x161c <XPROGProtocol_Command+0x284>
    13de:	c9 c0       	rjmp	.+402    	; 0x1572 <XPROGProtocol_Command+0x1da>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    13e0:	80 91 e8 00 	lds	r24, 0x00E8
    13e4:	8b 77       	andi	r24, 0x7B	; 123
    13e6:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    13ea:	82 e0       	ldi	r24, 0x02	; 2
    13ec:	80 93 e9 00 	sts	0x00E9, r24
			 *  \param[in] DirectionMask  New endpoint direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask)
			{
				UECFG0X = ((UECFG0X & ~(1 << EPDIR)) | (DirectionMask ? (1 << EPDIR) : 0));
    13f0:	80 91 ec 00 	lds	r24, 0x00EC
    13f4:	81 60       	ori	r24, 0x01	; 1
    13f6:	80 93 ec 00 	sts	0x00EC, r24
	Endpoint_SelectEndpoint(AVRISP_DATA_IN_EPADDR);
	Endpoint_SetEndpointDirection(ENDPOINT_DIR_IN);

	bool NVMBusEnabled = false;

	if (XPROG_SelectedProtocol == XPRG_PROTOCOL_PDI)
    13fa:	80 91 a4 01 	lds	r24, 0x01A4
    13fe:	88 23       	and	r24, r24
    1400:	11 f4       	brne	.+4      	; 0x1406 <XPROGProtocol_Command+0x6e>
	  NVMBusEnabled = XMEGANVM_EnablePDI();
    1402:	20 d2       	rcall	.+1088   	; 0x1844 <XMEGANVM_EnablePDI>
    1404:	05 c0       	rjmp	.+10     	; 0x1410 <XPROGProtocol_Command+0x78>
    1406:	82 30       	cpi	r24, 0x02	; 2
	else if (XPROG_SelectedProtocol == XPRG_PROTOCOL_TPI)
    1408:	11 f4       	brne	.+4      	; 0x140e <XPROGProtocol_Command+0x76>
    140a:	1b d4       	rcall	.+2102   	; 0x1c42 <TINYNVM_EnableTPI>
	  NVMBusEnabled = TINYNVM_EnableTPI();
    140c:	01 c0       	rjmp	.+2      	; 0x1410 <XPROGProtocol_Command+0x78>
    140e:	80 e0       	ldi	r24, 0x00	; 0
    1410:	90 e5       	ldi	r25, 0x50	; 80
{
	Endpoint_ClearOUT();
	Endpoint_SelectEndpoint(AVRISP_DATA_IN_EPADDR);
	Endpoint_SetEndpointDirection(ENDPOINT_DIR_IN);

	bool NVMBusEnabled = false;
    1412:	90 93 f1 00 	sts	0x00F1, r25
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    1416:	91 e0       	ldi	r25, 0x01	; 1
    1418:	90 93 f1 00 	sts	0x00F1, r25
    141c:	89 27       	eor	r24, r25
    141e:	f7 c0       	rjmp	.+494    	; 0x160e <XPROGProtocol_Command+0x276>
}

/** Handler for the CMD_XPROG command, which wraps up XPROG commands in a V2 wrapper which need to be
 *  removed and processed so that the underlying XPROG command can be handled.
 */
void XPROGProtocol_Command(void)
    1420:	90 91 e8 00 	lds	r25, 0x00E8
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    1424:	9b 77       	andi	r25, 0x7B	; 123
    1426:	90 93 e8 00 	sts	0x00E8, r25
    142a:	80 93 e9 00 	sts	0x00E9, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    142e:	80 91 ec 00 	lds	r24, 0x00EC
			 *  \param[in] DirectionMask  New endpoint direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask)
			{
				UECFG0X = ((UECFG0X & ~(1 << EPDIR)) | (DirectionMask ? (1 << EPDIR) : 0));
    1432:	81 60       	ori	r24, 0x01	; 1
    1434:	80 93 ec 00 	sts	0x00EC, r24
    1438:	80 91 a4 01 	lds	r24, 0x01A4
{
	Endpoint_ClearOUT();
	Endpoint_SelectEndpoint(AVRISP_DATA_IN_EPADDR);
	Endpoint_SetEndpointDirection(ENDPOINT_DIR_IN);

	if (XPROG_SelectedProtocol == XPRG_PROTOCOL_PDI)
    143c:	88 23       	and	r24, r24
    143e:	11 f4       	brne	.+4      	; 0x1444 <XPROGProtocol_Command+0xac>
    1440:	43 d2       	rcall	.+1158   	; 0x18c8 <XMEGANVM_DisablePDI>
    1442:	01 c0       	rjmp	.+2      	; 0x1446 <XPROGProtocol_Command+0xae>
	  XMEGANVM_DisablePDI();
    1444:	3c d4       	rcall	.+2168   	; 0x1cbe <TINYNVM_DisableTPI>
    1446:	80 e5       	ldi	r24, 0x50	; 80
    1448:	80 93 f1 00 	sts	0x00F1, r24
	else
	  TINYNVM_DisableTPI();
    144c:	82 e0       	ldi	r24, 0x02	; 2
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    144e:	80 93 f1 00 	sts	0x00F1, r24
    1452:	10 92 f1 00 	sts	0x00F1, r1
    1456:	dd c0       	rjmp	.+442    	; 0x1612 <XPROGProtocol_Command+0x27a>
    1458:	ce 01       	movw	r24, r28
    145a:	05 96       	adiw	r24, 0x05	; 5
    145c:	65 e0       	ldi	r22, 0x05	; 5
    145e:	70 e0       	ldi	r23, 0x00	; 0
	{
		uint8_t  MemoryType;
		uint32_t Address;
	} Erase_XPROG_Params;

	Endpoint_Read_Stream_LE(&Erase_XPROG_Params, sizeof(Erase_XPROG_Params), NULL);
    1460:	40 e0       	ldi	r20, 0x00	; 0
    1462:	50 e0       	ldi	r21, 0x00	; 0
    1464:	06 d5       	rcall	.+2572   	; 0x1e72 <Endpoint_Read_Stream_LE>
    1466:	6e 81       	ldd	r22, Y+6	; 0x06
    1468:	7f 81       	ldd	r23, Y+7	; 0x07
    146a:	88 85       	ldd	r24, Y+8	; 0x08
    146c:	99 85       	ldd	r25, Y+9	; 0x09
    146e:	4d de       	rcall	.-870    	; 0x110a <SwapEndian_32>
	Erase_XPROG_Params.Address = SwapEndian_32(Erase_XPROG_Params.Address);
    1470:	dc 01       	movw	r26, r24
    1472:	cb 01       	movw	r24, r22
    1474:	8e 83       	std	Y+6, r24	; 0x06
    1476:	9f 83       	std	Y+7, r25	; 0x07
    1478:	a8 87       	std	Y+8, r26	; 0x08
    147a:	b9 87       	std	Y+9, r27	; 0x09
    147c:	80 91 e8 00 	lds	r24, 0x00E8
    1480:	8b 77       	andi	r24, 0x7B	; 123
    1482:	80 93 e8 00 	sts	0x00E8, r24
    1486:	82 e0       	ldi	r24, 0x02	; 2
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    1488:	80 93 e9 00 	sts	0x00E9, r24
    148c:	80 91 ec 00 	lds	r24, 0x00EC
    1490:	81 60       	ori	r24, 0x01	; 1
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1492:	80 93 ec 00 	sts	0x00EC, r24
    1496:	80 91 a4 01 	lds	r24, 0x01A4
			 *  \param[in] DirectionMask  New endpoint direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask)
			{
				UECFG0X = ((UECFG0X & ~(1 << EPDIR)) | (DirectionMask ? (1 << EPDIR) : 0));
    149a:	ed 81       	ldd	r30, Y+5	; 0x05
    149c:	88 23       	and	r24, r24
    149e:	79 f4       	brne	.+30     	; 0x14be <XPROGProtocol_Command+0x126>
    14a0:	e1 50       	subi	r30, 0x01	; 1
	Endpoint_SelectEndpoint(AVRISP_DATA_IN_EPADDR);
	Endpoint_SetEndpointDirection(ENDPOINT_DIR_IN);

	uint8_t EraseCommand;

	if (XPROG_SelectedProtocol == XPRG_PROTOCOL_PDI)
    14a2:	e8 30       	cpi	r30, 0x08	; 8
    14a4:	28 f4       	brcc	.+10     	; 0x14b0 <XPROGProtocol_Command+0x118>
    14a6:	f0 e0       	ldi	r31, 0x00	; 0
    14a8:	e0 59       	subi	r30, 0x90	; 144
    14aa:	fe 4f       	sbci	r31, 0xFE	; 254
    14ac:	80 81       	ld	r24, Z
    14ae:	01 c0       	rjmp	.+2      	; 0x14b2 <XPROGProtocol_Command+0x11a>
    14b0:	80 e0       	ldi	r24, 0x00	; 0
    14b2:	4e 81       	ldd	r20, Y+6	; 0x06
    14b4:	5f 81       	ldd	r21, Y+7	; 0x07
    14b6:	68 85       	ldd	r22, Y+8	; 0x08
    14b8:	79 85       	ldd	r23, Y+9	; 0x09
    14ba:	17 d3       	rcall	.+1582   	; 0x1aea <XMEGANVM_EraseMemory>
    14bc:	08 c0       	rjmp	.+16     	; 0x14ce <XPROGProtocol_Command+0x136>
				EraseCommand = XMEGA_NVM_CMD_NOOP;
				break;
		}

		/* Erase the target memory, indicate timeout if occurred */
		if (!(XMEGANVM_EraseMemory(EraseCommand, Erase_XPROG_Params.Address)))
    14be:	e1 30       	cpi	r30, 0x01	; 1
    14c0:	11 f4       	brne	.+4      	; 0x14c6 <XPROGProtocol_Command+0x12e>
    14c2:	80 e1       	ldi	r24, 0x10	; 16
    14c4:	01 c0       	rjmp	.+2      	; 0x14c8 <XPROGProtocol_Command+0x130>
    14c6:	84 e1       	ldi	r24, 0x14	; 20
    14c8:	6e 81       	ldd	r22, Y+6	; 0x06
    14ca:	7f 81       	ldd	r23, Y+7	; 0x07
		  ReturnStatus = XPRG_ERR_TIMEOUT;
	}
	else
	{
		if (Erase_XPROG_Params.MemoryType == XPRG_ERASE_CHIP)
    14cc:	67 d4       	rcall	.+2254   	; 0x1d9c <TINYNVM_EraseMemory>
    14ce:	88 23       	and	r24, r24
		  EraseCommand = TINY_NVM_CMD_CHIPERASE;
    14d0:	11 f0       	breq	.+4      	; 0x14d6 <XPROGProtocol_Command+0x13e>
    14d2:	80 e0       	ldi	r24, 0x00	; 0
		else
		  EraseCommand = TINY_NVM_CMD_SECTIONERASE;
    14d4:	01 c0       	rjmp	.+2      	; 0x14d8 <XPROGProtocol_Command+0x140>

		/* Erase the target memory, indicate timeout if occurred */
		if (!(TINYNVM_EraseMemory(EraseCommand, Erase_XPROG_Params.Address)))
    14d6:	83 e0       	ldi	r24, 0x03	; 3
    14d8:	90 e5       	ldi	r25, 0x50	; 80
    14da:	90 93 f1 00 	sts	0x00F1, r25
    14de:	93 e0       	ldi	r25, 0x03	; 3
    14e0:	94 c0       	rjmp	.+296    	; 0x160a <XPROGProtocol_Command+0x272>
}

/** Handler for the XPRG ERASE command to erase a specific memory address space in the attached device. */
static void XPROGProtocol_Erase(void)
{
	uint8_t ReturnStatus = XPRG_ERR_OK;
    14e2:	19 de       	rcall	.-974    	; 0x1116 <XPROGProtocol_WriteMemory>
    14e4:	9b c0       	rjmp	.+310    	; 0x161c <XPROGProtocol_Command+0x284>
		else
		  EraseCommand = TINY_NVM_CMD_SECTIONERASE;

		/* Erase the target memory, indicate timeout if occurred */
		if (!(TINYNVM_EraseMemory(EraseCommand, Erase_XPROG_Params.Address)))
		  ReturnStatus = XPRG_ERR_TIMEOUT;
    14e6:	bf de       	rcall	.-642    	; 0x1266 <XPROGProtocol_ReadMemory>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    14e8:	99 c0       	rjmp	.+306    	; 0x161c <XPROGProtocol_Command+0x284>
    14ea:	ce 01       	movw	r24, r28
    14ec:	05 96       	adiw	r24, 0x05	; 5
    14ee:	61 e0       	ldi	r22, 0x01	; 1
    14f0:	70 e0       	ldi	r23, 0x00	; 0
			break;
		case XPRG_CMD_ERASE:
			XPROGProtocol_Erase();
			break;
		case XPRG_CMD_WRITE_MEM:
			XPROGProtocol_WriteMemory();
    14f2:	40 e0       	ldi	r20, 0x00	; 0
    14f4:	50 e0       	ldi	r21, 0x00	; 0
			break;
    14f6:	bd d4       	rcall	.+2426   	; 0x1e72 <Endpoint_Read_Stream_LE>
		case XPRG_CMD_READ_MEM:
			XPROGProtocol_ReadMemory();
    14f8:	80 91 e8 00 	lds	r24, 0x00E8
			break;
    14fc:	8b 77       	andi	r24, 0x7B	; 123
	struct
	{
		uint8_t CRCType;
	} ReadCRC_XPROG_Params;

	Endpoint_Read_Stream_LE(&ReadCRC_XPROG_Params, sizeof(ReadCRC_XPROG_Params), NULL);
    14fe:	80 93 e8 00 	sts	0x00E8, r24
    1502:	82 e0       	ldi	r24, 0x02	; 2
    1504:	80 93 e9 00 	sts	0x00E9, r24
    1508:	80 91 ec 00 	lds	r24, 0x00EC
    150c:	81 60       	ori	r24, 0x01	; 1
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    150e:	80 93 ec 00 	sts	0x00EC, r24
    1512:	80 91 a4 01 	lds	r24, 0x01A4
    1516:	88 23       	and	r24, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1518:	91 f4       	brne	.+36     	; 0x153e <XPROGProtocol_Command+0x1a6>
    151a:	ed 81       	ldd	r30, Y+5	; 0x05
    151c:	e1 50       	subi	r30, 0x01	; 1
			 *  \param[in] DirectionMask  New endpoint direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask)
			{
				UECFG0X = ((UECFG0X & ~(1 << EPDIR)) | (DirectionMask ? (1 << EPDIR) : 0));
    151e:	e2 30       	cpi	r30, 0x02	; 2
    1520:	28 f4       	brcc	.+10     	; 0x152c <XPROGProtocol_Command+0x194>
    1522:	f0 e0       	ldi	r31, 0x00	; 0
    1524:	e0 57       	subi	r30, 0x70	; 112
    1526:	fe 4f       	sbci	r31, 0xFE	; 254
	Endpoint_SelectEndpoint(AVRISP_DATA_IN_EPADDR);
	Endpoint_SetEndpointDirection(ENDPOINT_DIR_IN);

	uint32_t MemoryCRC;

	if (XPROG_SelectedProtocol == XPRG_PROTOCOL_PDI)
    1528:	80 81       	ld	r24, Z
    152a:	01 c0       	rjmp	.+2      	; 0x152e <XPROGProtocol_Command+0x196>
    152c:	88 e7       	ldi	r24, 0x78	; 120
    152e:	be 01       	movw	r22, r28
    1530:	6f 5f       	subi	r22, 0xFF	; 255
    1532:	7f 4f       	sbci	r23, 0xFF	; 255
    1534:	d4 d1       	rcall	.+936    	; 0x18de <XMEGANVM_GetMemoryCRC>
    1536:	88 23       	and	r24, r24
    1538:	21 f0       	breq	.+8      	; 0x1542 <XPROGProtocol_Command+0x1aa>
    153a:	80 e0       	ldi	r24, 0x00	; 0
    153c:	03 c0       	rjmp	.+6      	; 0x1544 <XPROGProtocol_Command+0x1ac>
    153e:	81 e0       	ldi	r24, 0x01	; 1
    1540:	01 c0       	rjmp	.+2      	; 0x1544 <XPROGProtocol_Command+0x1ac>
    1542:	83 e0       	ldi	r24, 0x03	; 3
				CRCCommand = XMEGA_NVM_CMD_FLASHCRC;
				break;
		}

		/* Perform and retrieve the memory CRC, indicate timeout if occurred */
		if (!(XMEGANVM_GetMemoryCRC(CRCCommand, &MemoryCRC)))
    1544:	90 e5       	ldi	r25, 0x50	; 80
    1546:	90 93 f1 00 	sts	0x00F1, r25
    154a:	96 e0       	ldi	r25, 0x06	; 6
    154c:	90 93 f1 00 	sts	0x00F1, r25
    1550:	80 93 f1 00 	sts	0x00F1, r24
/** Handler for the XPROG CRC command to read a specific memory space's CRC value for comparison between the
 *  attached device's memory and a data set on the host.
 */
static void XPROGProtocol_ReadCRC(void)
{
	uint8_t ReturnStatus = XPRG_ERR_OK;
    1554:	88 23       	and	r24, r24
		  ReturnStatus = XPRG_ERR_TIMEOUT;
	}
	else
	{
		/* TPI does not support memory CRC */
		ReturnStatus = XPRG_ERR_FAILED;
    1556:	09 f0       	breq	.+2      	; 0x155a <XPROGProtocol_Command+0x1c2>
    1558:	5c c0       	rjmp	.+184    	; 0x1612 <XPROGProtocol_Command+0x27a>
				break;
		}

		/* Perform and retrieve the memory CRC, indicate timeout if occurred */
		if (!(XMEGANVM_GetMemoryCRC(CRCCommand, &MemoryCRC)))
		  ReturnStatus = XPRG_ERR_TIMEOUT;
    155a:	89 81       	ldd	r24, Y+1	; 0x01
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    155c:	9a 81       	ldd	r25, Y+2	; 0x02
    155e:	ab 81       	ldd	r26, Y+3	; 0x03
    1560:	bc 81       	ldd	r27, Y+4	; 0x04
    1562:	cd 01       	movw	r24, r26
    1564:	aa 27       	eor	r26, r26
    1566:	bb 27       	eor	r27, r27
    1568:	80 93 f1 00 	sts	0x00F1, r24

	Endpoint_Write_8(CMD_XPROG);
	Endpoint_Write_8(XPRG_CMD_CRC);
	Endpoint_Write_8(ReturnStatus);

	if (ReturnStatus == XPRG_ERR_OK)
    156c:	99 81       	ldd	r25, Y+1	; 0x01
    156e:	8a 81       	ldd	r24, Y+2	; 0x02
    1570:	4c c0       	rjmp	.+152    	; 0x160a <XPROGProtocol_Command+0x272>
	{
		Endpoint_Write_8(MemoryCRC >> 16);
    1572:	80 91 f1 00 	lds	r24, 0x00F1
    1576:	83 30       	cpi	r24, 0x03	; 3
    1578:	31 f1       	breq	.+76     	; 0x15c6 <XPROGProtocol_Command+0x22e>
    157a:	84 30       	cpi	r24, 0x04	; 4
    157c:	28 f4       	brcc	.+10     	; 0x1588 <XPROGProtocol_Command+0x1f0>
    157e:	81 30       	cpi	r24, 0x01	; 1
    1580:	41 f0       	breq	.+16     	; 0x1592 <XPROGProtocol_Command+0x1fa>
    1582:	82 30       	cpi	r24, 0x02	; 2
		Endpoint_Write_16_LE(MemoryCRC & 0xFFFF);
    1584:	81 f5       	brne	.+96     	; 0x15e6 <XPROGProtocol_Command+0x24e>
    1586:	16 c0       	rjmp	.+44     	; 0x15b4 <XPROGProtocol_Command+0x21c>
    1588:	84 30       	cpi	r24, 0x04	; 4
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    158a:	11 f1       	breq	.+68     	; 0x15d0 <XPROGProtocol_Command+0x238>
    158c:	85 30       	cpi	r24, 0x05	; 5
	uint8_t ReturnStatus = XPRG_ERR_OK;

	uint8_t XPROGParam = Endpoint_Read_8();

	/* Determine which parameter is being set, store the new parameter value */
	switch (XPROGParam)
    158e:	59 f5       	brne	.+86     	; 0x15e6 <XPROGProtocol_Command+0x24e>
    1590:	24 c0       	rjmp	.+72     	; 0x15da <XPROGProtocol_Command+0x242>
    1592:	80 91 f1 00 	lds	r24, 0x00F1
    1596:	90 91 f1 00 	lds	r25, 0x00F1
    159a:	20 91 f1 00 	lds	r18, 0x00F1
    159e:	30 91 f1 00 	lds	r19, 0x00F1
    15a2:	30 93 6c 01 	sts	0x016C, r19
    15a6:	20 93 6d 01 	sts	0x016D, r18
				{
					uint32_t Value;
					uint8_t  Bytes[4];
				} Data;

				Data.Bytes[3] = UEDATX;
    15aa:	90 93 6e 01 	sts	0x016E, r25
				Data.Bytes[2] = UEDATX;
    15ae:	80 93 6f 01 	sts	0x016F, r24
				Data.Bytes[1] = UEDATX;
    15b2:	17 c0       	rjmp	.+46     	; 0x15e2 <XPROGProtocol_Command+0x24a>
    15b4:	80 91 f1 00 	lds	r24, 0x00F1
				Data.Bytes[0] = UEDATX;
    15b8:	90 91 f1 00 	lds	r25, 0x00F1
	{
		case XPRG_PARAM_NVMBASE:
			XPROG_Param_NVMBase       = Endpoint_Read_32_BE();
    15bc:	90 93 6a 01 	sts	0x016A, r25
    15c0:	80 93 6b 01 	sts	0x016B, r24
    15c4:	0e c0       	rjmp	.+28     	; 0x15e2 <XPROGProtocol_Command+0x24a>
    15c6:	80 91 f1 00 	lds	r24, 0x00F1
    15ca:	80 93 69 01 	sts	0x0169, r24
				{
					uint16_t Value;
					uint8_t  Bytes[2];
				} Data;

				Data.Bytes[1] = UEDATX;
    15ce:	09 c0       	rjmp	.+18     	; 0x15e2 <XPROGProtocol_Command+0x24a>
				Data.Bytes[0] = UEDATX;
    15d0:	80 91 f1 00 	lds	r24, 0x00F1
			break;
		case XPRG_PARAM_EEPPAGESIZE:
			XPROG_Param_EEPageSize    = Endpoint_Read_16_BE();
    15d4:	80 93 68 01 	sts	0x0168, r24
    15d8:	04 c0       	rjmp	.+8      	; 0x15e2 <XPROGProtocol_Command+0x24a>
    15da:	80 91 f1 00 	lds	r24, 0x00F1
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    15de:	80 91 f1 00 	lds	r24, 0x00F1
			break;
		case XPRG_PARAM_NVMCMD_REG:
			XPROG_Param_NVMCMDRegAddr = Endpoint_Read_8();
    15e2:	80 e0       	ldi	r24, 0x00	; 0
    15e4:	01 c0       	rjmp	.+2      	; 0x15e8 <XPROGProtocol_Command+0x250>
    15e6:	81 e0       	ldi	r24, 0x01	; 1
    15e8:	90 91 e8 00 	lds	r25, 0x00E8
			break;
		case XPRG_PARAM_NVMCSR_REG:
			XPROG_Param_NVMCSRRegAddr = Endpoint_Read_8();
    15ec:	9b 77       	andi	r25, 0x7B	; 123
    15ee:	90 93 e8 00 	sts	0x00E8, r25
			static inline void Endpoint_Discard_16(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Discard_16(void)
			{
				uint8_t Dummy;

				Dummy = UEDATX;
    15f2:	92 e0       	ldi	r25, 0x02	; 2
    15f4:	90 93 e9 00 	sts	0x00E9, r25
				Dummy = UEDATX;
    15f8:	90 91 ec 00 	lds	r25, 0x00EC
/** Handler for the XPROG SET_PARAM command to set a XPROG parameter for use when communicating with the
 *  attached device.
 */
static void XPROGProtocol_SetParam(void)
{
	uint8_t ReturnStatus = XPRG_ERR_OK;
    15fc:	91 60       	ori	r25, 0x01	; 1
			         the communication with AVRStudio 5.1 will fail.
			*/
			Endpoint_Discard_16();
			break;
		default:
			ReturnStatus = XPRG_ERR_FAILED;
    15fe:	90 93 ec 00 	sts	0x00EC, r25
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    1602:	90 e5       	ldi	r25, 0x50	; 80
    1604:	90 93 f1 00 	sts	0x00F1, r25
    1608:	97 e0       	ldi	r25, 0x07	; 7
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    160a:	90 93 f1 00 	sts	0x00F1, r25
    160e:	80 93 f1 00 	sts	0x00F1, r24
			 *  \param[in] DirectionMask  New endpoint direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask)
			{
				UECFG0X = ((UECFG0X & ~(1 << EPDIR)) | (DirectionMask ? (1 << EPDIR) : 0));
    1612:	80 91 e8 00 	lds	r24, 0x00E8
    1616:	8e 77       	andi	r24, 0x7E	; 126
    1618:	80 93 e8 00 	sts	0x00E8, r24
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    161c:	29 96       	adiw	r28, 0x09	; 9
    161e:	0f b6       	in	r0, 0x3f	; 63
    1620:	f8 94       	cli
    1622:	de bf       	out	0x3e, r29	; 62
    1624:	0f be       	out	0x3f, r0	; 63
    1626:	cd bf       	out	0x3d, r28	; 61
    1628:	df 91       	pop	r29
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    162a:	cf 91       	pop	r28
    162c:	08 95       	ret

0000162e <XPROGTarget_SetTxMode>:
}

static void XPROGTarget_SetTxMode(void)
{
	/* Wait for a full cycle of the clock */
	while (PIND & (1 << 5));
    162e:	4d 99       	sbic	0x09, 5	; 9
    1630:	fe cf       	rjmp	.-4      	; 0x162e <XPROGTarget_SetTxMode>
	while (!(PIND & (1 << 5)));
    1632:	4d 9b       	sbis	0x09, 5	; 9
    1634:	fe cf       	rjmp	.-4      	; 0x1632 <XPROGTarget_SetTxMode+0x4>
	while (PIND & (1 << 5));
    1636:	4d 99       	sbic	0x09, 5	; 9
    1638:	fe cf       	rjmp	.-4      	; 0x1636 <XPROGTarget_SetTxMode+0x8>

	PORTD  |=  (1 << 3);
    163a:	5b 9a       	sbi	0x0b, 3	; 11
	DDRD   |=  (1 << 3);
    163c:	53 9a       	sbi	0x0a, 3	; 10

	UCSR1B &= ~(1 << RXEN1);
    163e:	80 91 c9 00 	lds	r24, 0x00C9
    1642:	8f 7e       	andi	r24, 0xEF	; 239
    1644:	80 93 c9 00 	sts	0x00C9, r24
	UCSR1B |=  (1 << TXEN1);
    1648:	80 91 c9 00 	lds	r24, 0x00C9
    164c:	88 60       	ori	r24, 0x08	; 8
    164e:	80 93 c9 00 	sts	0x00C9, r24

	IsSending = true;
    1652:	81 e0       	ldi	r24, 0x01	; 1
    1654:	80 93 aa 01 	sts	0x01AA, r24
}
    1658:	08 95       	ret

0000165a <XPROGTarget_SetRxMode>:

static void XPROGTarget_SetRxMode(void)
{
	while (!(UCSR1A & (1 << TXC1)));
    165a:	80 91 c8 00 	lds	r24, 0x00C8
    165e:	86 ff       	sbrs	r24, 6
    1660:	fc cf       	rjmp	.-8      	; 0x165a <XPROGTarget_SetRxMode>
	UCSR1A |=  (1 << TXC1);
    1662:	80 91 c8 00 	lds	r24, 0x00C8
    1666:	80 64       	ori	r24, 0x40	; 64
    1668:	80 93 c8 00 	sts	0x00C8, r24

	UCSR1B &= ~(1 << TXEN1);
    166c:	80 91 c9 00 	lds	r24, 0x00C9
    1670:	87 7f       	andi	r24, 0xF7	; 247
    1672:	80 93 c9 00 	sts	0x00C9, r24
	UCSR1B |=  (1 << RXEN1);
    1676:	80 91 c9 00 	lds	r24, 0x00C9
    167a:	80 61       	ori	r24, 0x10	; 16
    167c:	80 93 c9 00 	sts	0x00C9, r24

	DDRD   &= ~(1 << 3);
    1680:	53 98       	cbi	0x0a, 3	; 10
	PORTD  &= ~(1 << 3);
    1682:	5b 98       	cbi	0x0b, 3	; 11

	IsSending = false;
    1684:	10 92 aa 01 	sts	0x01AA, r1
}
    1688:	08 95       	ret

0000168a <XPROGTarget_DisableTargetPDI>:

/** Disables the target's PDI interface, exits programming mode and starts the target's application. */
void XPROGTarget_DisableTargetPDI(void)
{
	/* Switch to Rx mode to ensure that all pending transmissions are complete */
	if (IsSending)
    168a:	80 91 aa 01 	lds	r24, 0x01AA
    168e:	88 23       	and	r24, r24
    1690:	09 f0       	breq	.+2      	; 0x1694 <XPROGTarget_DisableTargetPDI+0xa>
	  XPROGTarget_SetRxMode();
    1692:	e3 df       	rcall	.-58     	; 0x165a <XPROGTarget_SetRxMode>
    1694:	80 ec       	ldi	r24, 0xC0	; 192

	/* Turn off receiver and transmitter of the USART, clear settings */
	UCSR1A  = ((1 << TXC1) | (1 << RXC1));
    1696:	80 93 c8 00 	sts	0x00C8, r24
    169a:	10 92 c9 00 	sts	0x00C9, r1
	UCSR1B  = 0;
    169e:	10 92 ca 00 	sts	0x00CA, r1
	UCSR1C  = 0;
    16a2:	8a b1       	in	r24, 0x0a	; 10

	/* Tristate all pins */
	DDRD  &= ~((1 << 5) | (1 << 3));
    16a4:	87 7d       	andi	r24, 0xD7	; 215
    16a6:	8a b9       	out	0x0a, r24	; 10
    16a8:	8b b1       	in	r24, 0x0b	; 11
	PORTD &= ~((1 << 5) | (1 << 3) | (1 << 2));
    16aa:	83 7d       	andi	r24, 0xD3	; 211
    16ac:	8b b9       	out	0x0b, r24	; 11
    16ae:	08 95       	ret

000016b0 <XPROGTarget_DisableTargetTPI>:
}
    16b0:	80 91 aa 01 	lds	r24, 0x01AA

/** Disables the target's TPI interface, exits programming mode and starts the target's application. */
void XPROGTarget_DisableTargetTPI(void)
{
	/* Switch to Rx mode to ensure that all pending transmissions are complete */
	if (IsSending)
    16b4:	88 23       	and	r24, r24
    16b6:	09 f0       	breq	.+2      	; 0x16ba <XPROGTarget_DisableTargetTPI+0xa>
	  XPROGTarget_SetRxMode();
    16b8:	d0 df       	rcall	.-96     	; 0x165a <XPROGTarget_SetRxMode>
    16ba:	80 91 c8 00 	lds	r24, 0x00C8

	/* Turn off receiver and transmitter of the USART, clear settings */
	UCSR1A |= (1 << TXC1) | (1 << RXC1);
    16be:	80 6c       	ori	r24, 0xC0	; 192
    16c0:	80 93 c8 00 	sts	0x00C8, r24
    16c4:	10 92 c9 00 	sts	0x00C9, r1
	UCSR1B  = 0;
    16c8:	10 92 ca 00 	sts	0x00CA, r1
	UCSR1C  = 0;
    16cc:	8a b1       	in	r24, 0x0a	; 10

	/* Set all USART lines as inputs, tristate */
	DDRD  &= ~((1 << 5) | (1 << 3));
    16ce:	87 7d       	andi	r24, 0xD7	; 215
    16d0:	8a b9       	out	0x0a, r24	; 10
    16d2:	8b b1       	in	r24, 0x0b	; 11
	PORTD &= ~((1 << 5) | (1 << 3) | (1 << 2));
    16d4:	83 7d       	andi	r24, 0xD3	; 211
    16d6:	8b b9       	out	0x0b, r24	; 11
    16d8:	24 98       	cbi	0x04, 4	; 4

	/* Tristate target /RESET line */
	AUX_LINE_DDR  &= ~AUX_LINE_MASK;
    16da:	2c 98       	cbi	0x05, 4	; 5
	AUX_LINE_PORT &= ~AUX_LINE_MASK;
    16dc:	08 95       	ret

000016de <XPROGTarget_SendByte>:
}
    16de:	cf 93       	push	r28
/** Sends a byte via the USART.
 *
 *  \param[in] Byte  Byte to send through the USART
 */
void XPROGTarget_SendByte(const uint8_t Byte)
{
    16e0:	df 93       	push	r29
    16e2:	0f 92       	push	r0
    16e4:	cd b7       	in	r28, 0x3d	; 61
    16e6:	de b7       	in	r29, 0x3e	; 62
	/* Switch to Tx mode if currently in Rx mode */
	if (!(IsSending))
    16e8:	90 91 aa 01 	lds	r25, 0x01AA
    16ec:	99 23       	and	r25, r25
    16ee:	19 f4       	brne	.+6      	; 0x16f6 <XPROGTarget_SendByte+0x18>
	  XPROGTarget_SetTxMode();
    16f0:	89 83       	std	Y+1, r24	; 0x01
    16f2:	9d df       	rcall	.-198    	; 0x162e <XPROGTarget_SetTxMode>
    16f4:	89 81       	ldd	r24, Y+1	; 0x01
    16f6:	90 91 c8 00 	lds	r25, 0x00C8

	/* Wait until there is space in the hardware Tx buffer before writing */
	while (!(UCSR1A & (1 << UDRE1)));
    16fa:	95 ff       	sbrs	r25, 5
    16fc:	fc cf       	rjmp	.-8      	; 0x16f6 <XPROGTarget_SendByte+0x18>
    16fe:	90 91 c8 00 	lds	r25, 0x00C8
	UCSR1A |= (1 << TXC1);
    1702:	90 64       	ori	r25, 0x40	; 64
    1704:	90 93 c8 00 	sts	0x00C8, r25
    1708:	80 93 ce 00 	sts	0x00CE, r24
	UDR1    = Byte;
    170c:	0f 90       	pop	r0
}
    170e:	df 91       	pop	r29
    1710:	cf 91       	pop	r28
    1712:	08 95       	ret

00001714 <XPROGTarget_ReceiveByte>:
    1714:	80 91 aa 01 	lds	r24, 0x01AA
 *  \return Received byte from the USART
 */
uint8_t XPROGTarget_ReceiveByte(void)
{
	/* Switch to Rx mode if currently in Tx mode */
	if (IsSending)
    1718:	88 23       	and	r24, r24
    171a:	09 f0       	breq	.+2      	; 0x171e <XPROGTarget_ReceiveByte+0xa>
	  XPROGTarget_SetRxMode();
    171c:	9e df       	rcall	.-196    	; 0x165a <XPROGTarget_SetRxMode>
    171e:	80 91 c8 00 	lds	r24, 0x00C8

	/* Wait until a byte has been received before reading */
	while (!(UCSR1A & (1 << RXC1)) && TimeoutTicksRemaining);
    1722:	87 fd       	sbrc	r24, 7
    1724:	03 c0       	rjmp	.+6      	; 0x172c <XPROGTarget_ReceiveByte+0x18>
    1726:	8a b5       	in	r24, 0x2a	; 42
    1728:	88 23       	and	r24, r24
    172a:	c9 f7       	brne	.-14     	; 0x171e <XPROGTarget_ReceiveByte+0xa>
    172c:	80 91 ce 00 	lds	r24, 0x00CE

	return UDR1;
    1730:	08 95       	ret

00001732 <XPROGTarget_SendIdle>:
}
    1732:	80 91 aa 01 	lds	r24, 0x01AA

/** Sends an IDLE via the USART to the attached target, consisting of a full frame of idle bits. */
void XPROGTarget_SendIdle(void)
{
	/* Switch to Tx mode if currently in Rx mode */
	if (!(IsSending))
    1736:	88 23       	and	r24, r24
    1738:	09 f4       	brne	.+2      	; 0x173c <XPROGTarget_SendIdle+0xa>
	  XPROGTarget_SetTxMode();
    173a:	79 df       	rcall	.-270    	; 0x162e <XPROGTarget_SetTxMode>
    173c:	8c e0       	ldi	r24, 0x0C	; 12
	return UDR1;
}

/** Sends an IDLE via the USART to the attached target, consisting of a full frame of idle bits. */
void XPROGTarget_SendIdle(void)
{
    173e:	4d 99       	sbic	0x09, 5	; 9

	/* Need to do nothing for a full frame to send an IDLE */
	for (uint8_t i = 0; i < BITS_IN_USART_FRAME; i++)
	{
		/* Wait for a full cycle of the clock */
		while (PIND & (1 << 5));
    1740:	fe cf       	rjmp	.-4      	; 0x173e <XPROGTarget_SendIdle+0xc>
    1742:	4d 9b       	sbis	0x09, 5	; 9
		while (!(PIND & (1 << 5)));
    1744:	fe cf       	rjmp	.-4      	; 0x1742 <XPROGTarget_SendIdle+0x10>
    1746:	4d 99       	sbic	0x09, 5	; 9
		while (PIND & (1 << 5));
    1748:	fe cf       	rjmp	.-4      	; 0x1746 <XPROGTarget_SendIdle+0x14>
    174a:	81 50       	subi	r24, 0x01	; 1
    174c:	c1 f7       	brne	.-16     	; 0x173e <XPROGTarget_SendIdle+0xc>
	/* Switch to Tx mode if currently in Rx mode */
	if (!(IsSending))
	  XPROGTarget_SetTxMode();

	/* Need to do nothing for a full frame to send an IDLE */
	for (uint8_t i = 0; i < BITS_IN_USART_FRAME; i++)
    174e:	08 95       	ret

00001750 <XPROGTarget_EnableTargetTPI>:
		/* Wait for a full cycle of the clock */
		while (PIND & (1 << 5));
		while (!(PIND & (1 << 5)));
		while (PIND & (1 << 5));
	}
}
    1750:	10 92 aa 01 	sts	0x01AA, r1
void XPROGTarget_EnableTargetTPI(void)
{
	IsSending = false;

	/* Set /RESET line low for at least 400ns to enable TPI functionality */
	AUX_LINE_DDR  |=  AUX_LINE_MASK;
    1754:	24 9a       	sbi	0x04, 4	; 4
	AUX_LINE_PORT &= ~AUX_LINE_MASK;
    1756:	2c 98       	cbi	0x05, 4	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1758:	85 e0       	ldi	r24, 0x05	; 5
    175a:	8a 95       	dec	r24
    175c:	f1 f7       	brne	.-4      	; 0x175a <XPROGTarget_EnableTargetTPI+0xa>
    175e:	00 00       	nop
	_delay_us(1);

	/* Set Tx and XCK as outputs, Rx as input */
	DDRD |=  (1 << 5) | (1 << 3);
    1760:	8a b1       	in	r24, 0x0a	; 10
    1762:	88 62       	ori	r24, 0x28	; 40
    1764:	8a b9       	out	0x0a, r24	; 10
	DDRD &= ~(1 << 2);
    1766:	52 98       	cbi	0x0a, 2	; 10

	/* Set up the synchronous USART for TPI communications - 8 data bits, even parity, 2 stop bits */
	UBRR1  = ((F_CPU / 2 / XPROG_HARDWARE_SPEED) - 1);
    1768:	8f e1       	ldi	r24, 0x1F	; 31
    176a:	90 e0       	ldi	r25, 0x00	; 0
    176c:	90 93 cd 00 	sts	0x00CD, r25
    1770:	80 93 cc 00 	sts	0x00CC, r24
	UCSR1B = (1 << TXEN1);
    1774:	88 e0       	ldi	r24, 0x08	; 8
    1776:	80 93 c9 00 	sts	0x00C9, r24
	UCSR1C = (1 << UMSEL10) | (1 << UPM11) | (1 << USBS1) | (1 << UCSZ11) | (1 << UCSZ10) | (1 << UCPOL1);
    177a:	8f e6       	ldi	r24, 0x6F	; 111
    177c:	80 93 ca 00 	sts	0x00CA, r24

	/* Send two IDLEs of 12 bits each to enable TPI interface (need at least 16 idle bits) */
	XPROGTarget_SendIdle();
    1780:	d8 df       	rcall	.-80     	; 0x1732 <XPROGTarget_SendIdle>
    1782:	d7 cf       	rjmp	.-82     	; 0x1732 <XPROGTarget_SendIdle>

00001784 <XPROGTarget_EnableTargetPDI>:
	XPROGTarget_SendIdle();
    1784:	10 92 aa 01 	sts	0x01AA, r1
}
    1788:	8a b1       	in	r24, 0x0a	; 10
void XPROGTarget_EnableTargetPDI(void)
{
	IsSending = false;

	/* Set Tx and XCK as outputs, Rx as input */
	DDRD |=  (1 << 5) | (1 << 3);
    178a:	88 62       	ori	r24, 0x28	; 40
    178c:	8a b9       	out	0x0a, r24	; 10
	DDRD &= ~(1 << 2);
    178e:	52 98       	cbi	0x0a, 2	; 10

	/* Set DATA line high for at least 90ns to disable /RESET functionality */
	PORTD |= (1 << 3);
    1790:	5b 9a       	sbi	0x0b, 3	; 11
    1792:	85 e0       	ldi	r24, 0x05	; 5
    1794:	8a 95       	dec	r24
    1796:	f1 f7       	brne	.-4      	; 0x1794 <XPROGTarget_EnableTargetPDI+0x10>
    1798:	00 00       	nop
	_delay_us(1);

	/* Set up the synchronous USART for XMEGA communications - 8 data bits, even parity, 2 stop bits */
	UBRR1  = ((F_CPU / 2 / XPROG_HARDWARE_SPEED) - 1);
    179a:	8f e1       	ldi	r24, 0x1F	; 31
    179c:	90 e0       	ldi	r25, 0x00	; 0
    179e:	90 93 cd 00 	sts	0x00CD, r25
    17a2:	80 93 cc 00 	sts	0x00CC, r24
	UCSR1B = (1 << TXEN1);
    17a6:	88 e0       	ldi	r24, 0x08	; 8
    17a8:	80 93 c9 00 	sts	0x00C9, r24
	UCSR1C = (1 << UMSEL10) | (1 << UPM11) | (1 << USBS1) | (1 << UCSZ11) | (1 << UCSZ10) | (1 << UCPOL1);
    17ac:	8f e6       	ldi	r24, 0x6F	; 111
    17ae:	80 93 ca 00 	sts	0x00CA, r24

	/* Send two IDLEs of 12 bits each to enable PDI interface (need at least 16 idle bits) */
	XPROGTarget_SendIdle();
    17b2:	bf df       	rcall	.-130    	; 0x1732 <XPROGTarget_SendIdle>
    17b4:	be cf       	rjmp	.-132    	; 0x1732 <XPROGTarget_SendIdle>

000017b6 <XMEGANVM_SendAddress>:
/** Sends the given 32-bit absolute address to the target.
 *
 *  \param[in] AbsoluteAddress  Absolute address to send to the target
 */
static void XMEGANVM_SendAddress(const uint32_t AbsoluteAddress)
{
    17b6:	1f 93       	push	r17
    17b8:	cf 93       	push	r28
    17ba:	df 93       	push	r29
    17bc:	00 d0       	rcall	.+0      	; 0x17be <XMEGANVM_SendAddress+0x8>
    17be:	cd b7       	in	r28, 0x3d	; 61
    17c0:	de b7       	in	r29, 0x3e	; 62
    17c2:	18 2f       	mov	r17, r24
	/* Send the given 32-bit address to the target, LSB first */
	XPROGTarget_SendByte(AbsoluteAddress &  0xFF);
    17c4:	86 2f       	mov	r24, r22
    17c6:	79 83       	std	Y+1, r23	; 0x01
    17c8:	9a 83       	std	Y+2, r25	; 0x02
    17ca:	89 df       	rcall	.-238    	; 0x16de <XPROGTarget_SendByte>
    17cc:	79 81       	ldd	r23, Y+1	; 0x01
	XPROGTarget_SendByte(AbsoluteAddress >> 8);
    17ce:	87 2f       	mov	r24, r23
    17d0:	86 df       	rcall	.-244    	; 0x16de <XPROGTarget_SendByte>
    17d2:	81 2f       	mov	r24, r17
    17d4:	84 df       	rcall	.-248    	; 0x16de <XPROGTarget_SendByte>
	XPROGTarget_SendByte(AbsoluteAddress >> 16);
    17d6:	9a 81       	ldd	r25, Y+2	; 0x02
    17d8:	89 2f       	mov	r24, r25
    17da:	81 df       	rcall	.-254    	; 0x16de <XPROGTarget_SendByte>
	XPROGTarget_SendByte(AbsoluteAddress >> 24);
    17dc:	0f 90       	pop	r0
    17de:	0f 90       	pop	r0
    17e0:	df 91       	pop	r29
    17e2:	cf 91       	pop	r28
}
    17e4:	1f 91       	pop	r17
    17e6:	08 95       	ret

000017e8 <XMEGANVM_SendNVMRegAddress>:
    17e8:	90 e0       	ldi	r25, 0x00	; 0
    17ea:	a0 e0       	ldi	r26, 0x00	; 0
    17ec:	b0 e0       	ldi	r27, 0x00	; 0
    17ee:	40 91 6c 01 	lds	r20, 0x016C
 *  \param[in] Register  NVM register whose absolute address is to be sent
 */
static void XMEGANVM_SendNVMRegAddress(const uint8_t Register)
{
	/* Determine the absolute register address from the NVM base memory address and the NVM register address */
	uint32_t Address = XPROG_Param_NVMBase | Register;
    17f2:	50 91 6d 01 	lds	r21, 0x016D
    17f6:	60 91 6e 01 	lds	r22, 0x016E
    17fa:	70 91 6f 01 	lds	r23, 0x016F
    17fe:	84 2b       	or	r24, r20
    1800:	95 2b       	or	r25, r21
    1802:	a6 2b       	or	r26, r22
    1804:	b7 2b       	or	r27, r23

	/* Send the calculated 32-bit address to the target, LSB first */
	XMEGANVM_SendAddress(Address);
    1806:	bc 01       	movw	r22, r24
    1808:	cd 01       	movw	r24, r26
    180a:	d5 cf       	rjmp	.-86     	; 0x17b6 <XMEGANVM_SendAddress>

0000180c <XMEGANVM_WaitWhileNVMBusBusy>:
    180c:	80 e8       	ldi	r24, 0x80	; 128
}
    180e:	67 df       	rcall	.-306    	; 0x16de <XPROGTarget_SendByte>
{
	/* Poll the STATUS register to check to see if NVM access has been enabled */
	for (;;)
	{
		/* Send the LDCS command to read the PDI STATUS register to see the NVM bus is active */
		XPROGTarget_SendByte(PDI_CMD_LDCS | PDI_STATUS_REG);
    1810:	81 df       	rcall	.-254    	; 0x1714 <XPROGTarget_ReceiveByte>

		uint8_t StatusRegister = XPROGTarget_ReceiveByte();
    1812:	9a b5       	in	r25, 0x2a	; 42
    1814:	99 23       	and	r25, r25

		/* We might have timed out waiting for the status register read response, check here */
		if (!(TimeoutTicksRemaining))
    1816:	21 f0       	breq	.+8      	; 0x1820 <XMEGANVM_WaitWhileNVMBusBusy+0x14>
    1818:	81 ff       	sbrs	r24, 1
    181a:	f8 cf       	rjmp	.-16     	; 0x180c <XMEGANVM_WaitWhileNVMBusBusy>
		  return false;

		/* Check the status register read response to see if the NVM bus is enabled */
		if (StatusRegister & PDI_STATUS_NVM)
    181c:	81 e0       	ldi	r24, 0x01	; 1
    181e:	08 95       	ret
		  return true;
    1820:	80 e0       	ldi	r24, 0x00	; 0
    1822:	08 95       	ret

00001824 <XMEGANVM_WaitWhileNVMControllerBusy>:

		uint8_t StatusRegister = XPROGTarget_ReceiveByte();

		/* We might have timed out waiting for the status register read response, check here */
		if (!(TimeoutTicksRemaining))
		  return false;
    1824:	8b e6       	ldi	r24, 0x6B	; 107

		/* Check the status register read response to see if the NVM bus is enabled */
		if (StatusRegister & PDI_STATUS_NVM)
		  return true;
	}
}
    1826:	5b df       	rcall	.-330    	; 0x16de <XPROGTarget_SendByte>
 *  \return Boolean true if the NVM controller became ready within the timeout period, false otherwise
 */
bool XMEGANVM_WaitWhileNVMControllerBusy(void)
{
	/* Preload the pointer register with the NVM STATUS register address to check the BUSY flag */
	XPROGTarget_SendByte(PDI_CMD_ST | (PDI_POINTER_DIRECT << 2) | PDI_DATSIZE_4BYTES);
    1828:	8f e0       	ldi	r24, 0x0F	; 15
	XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_STATUS);
    182a:	de df       	rcall	.-68     	; 0x17e8 <XMEGANVM_SendNVMRegAddress>
    182c:	80 e2       	ldi	r24, 0x20	; 32
    182e:	57 df       	rcall	.-338    	; 0x16de <XPROGTarget_SendByte>

	/* Poll the NVM STATUS register while the NVM controller is busy */
	for (;;)
	{
		/* Fetch the current status value via the pointer register (without auto-increment afterwards) */
		XPROGTarget_SendByte(PDI_CMD_LD | (PDI_POINTER_INDIRECT << 2) | PDI_DATSIZE_1BYTE);
    1830:	71 df       	rcall	.-286    	; 0x1714 <XPROGTarget_ReceiveByte>
    1832:	9a b5       	in	r25, 0x2a	; 42
    1834:	99 23       	and	r25, r25

		uint8_t StatusRegister = XPROGTarget_ReceiveByte();
    1836:	21 f0       	breq	.+8      	; 0x1840 <XMEGANVM_WaitWhileNVMControllerBusy+0x1c>
    1838:	87 fd       	sbrc	r24, 7

		/* We might have timed out waiting for the status register read response, check here */
		if (!(TimeoutTicksRemaining))
    183a:	f8 cf       	rjmp	.-16     	; 0x182c <XMEGANVM_WaitWhileNVMControllerBusy+0x8>
    183c:	81 e0       	ldi	r24, 0x01	; 1
    183e:	08 95       	ret
		  return false;

		/* Check to see if the BUSY flag is still set */
		if (!(StatusRegister & (1 << 7)))
    1840:	80 e0       	ldi	r24, 0x00	; 0
    1842:	08 95       	ret

00001844 <XMEGANVM_EnablePDI>:
		  return true;
    1844:	cf 92       	push	r12
    1846:	df 92       	push	r13

		uint8_t StatusRegister = XPROGTarget_ReceiveByte();

		/* We might have timed out waiting for the status register read response, check here */
		if (!(TimeoutTicksRemaining))
		  return false;
    1848:	ef 92       	push	r14

		/* Check to see if the BUSY flag is still set */
		if (!(StatusRegister & (1 << 7)))
		  return true;
	}
}
    184a:	ff 92       	push	r15
/** Enables the physical PDI interface on the target and enables access to the internal NVM controller.
 *
 *  \return Boolean true if the PDI interface was enabled successfully, false otherwise
 */
bool XMEGANVM_EnablePDI(void)
{
    184c:	0f 93       	push	r16
    184e:	1f 93       	push	r17
    1850:	cf 93       	push	r28
    1852:	df 93       	push	r29
    1854:	cd b7       	in	r28, 0x3d	; 61
    1856:	de b7       	in	r29, 0x3e	; 62
    1858:	28 97       	sbiw	r28, 0x08	; 8
    185a:	0f b6       	in	r0, 0x3f	; 63
    185c:	f8 94       	cli
    185e:	de bf       	out	0x3e, r29	; 62
    1860:	0f be       	out	0x3f, r0	; 63
    1862:	cd bf       	out	0x3d, r28	; 61
	/* Enable PDI programming mode with the attached target */
	XPROGTarget_EnableTargetPDI();
    1864:	8f df       	rcall	.-226    	; 0x1784 <XPROGTarget_EnableTargetPDI>
    1866:	81 ec       	ldi	r24, 0xC1	; 193

	/* Store the RESET key into the RESET PDI register to keep the XMEGA in reset */
	XPROGTarget_SendByte(PDI_CMD_STCS | PDI_RESET_REG);
    1868:	3a df       	rcall	.-396    	; 0x16de <XPROGTarget_SendByte>
    186a:	89 e5       	ldi	r24, 0x59	; 89
    186c:	38 df       	rcall	.-400    	; 0x16de <XPROGTarget_SendByte>
	XPROGTarget_SendByte(PDI_RESET_KEY);
    186e:	82 ec       	ldi	r24, 0xC2	; 194
    1870:	36 df       	rcall	.-404    	; 0x16de <XPROGTarget_SendByte>
    1872:	82 e0       	ldi	r24, 0x02	; 2

	/* Lower direction change guard time to 32 USART bits */
	XPROGTarget_SendByte(PDI_CMD_STCS | PDI_CTRL_REG);
    1874:	34 df       	rcall	.-408    	; 0x16de <XPROGTarget_SendByte>
    1876:	80 ee       	ldi	r24, 0xE0	; 224
    1878:	32 df       	rcall	.-412    	; 0x16de <XPROGTarget_SendByte>
	XPROGTarget_SendByte(0x02);
    187a:	8e 01       	movw	r16, r28
    187c:	07 5f       	subi	r16, 0xF7	; 247
    187e:	1f 4f       	sbci	r17, 0xFF	; 255

	/* Enable access to the XPROG NVM bus by sending the documented NVM access key to the device */
	XPROGTarget_SendByte(PDI_CMD_KEY);
    1880:	7e 01       	movw	r14, r28
    1882:	08 94       	sec
    1884:	e1 1c       	adc	r14, r1
    1886:	f1 1c       	adc	r15, r1
    1888:	67 01       	movw	r12, r14
    188a:	f6 01       	movw	r30, r12

/** Enables the physical PDI interface on the target and enables access to the internal NVM controller.
 *
 *  \return Boolean true if the PDI interface was enabled successfully, false otherwise
 */
bool XMEGANVM_EnablePDI(void)
    188c:	a2 e9       	ldi	r26, 0x92	; 146
    188e:	b1 e0       	ldi	r27, 0x01	; 1
    1890:	88 e0       	ldi	r24, 0x08	; 8
    1892:	0d 90       	ld	r0, X+
	XPROGTarget_SendByte(0x02);

	/* Enable access to the XPROG NVM bus by sending the documented NVM access key to the device */
	XPROGTarget_SendByte(PDI_CMD_KEY);
	for (uint8_t i = sizeof(PDI_NVMENABLE_KEY); i > 0; i--)
	  XPROGTarget_SendByte(PDI_NVMENABLE_KEY[i - 1]);
    1894:	01 92       	st	Z+, r0
    1896:	81 50       	subi	r24, 0x01	; 1
    1898:	e1 f7       	brne	.-8      	; 0x1892 <XMEGANVM_EnablePDI+0x4e>
    189a:	f8 01       	movw	r30, r16
    189c:	82 91       	ld	r24, -Z
    189e:	8f 01       	movw	r16, r30
    18a0:	1e df       	rcall	.-452    	; 0x16de <XPROGTarget_SendByte>
    18a2:	0e 15       	cp	r16, r14
    18a4:	1f 05       	cpc	r17, r15
    18a6:	89 f7       	brne	.-30     	; 0x188a <XMEGANVM_EnablePDI+0x46>
    18a8:	b1 df       	rcall	.-158    	; 0x180c <XMEGANVM_WaitWhileNVMBusBusy>
    18aa:	28 96       	adiw	r28, 0x08	; 8
    18ac:	0f b6       	in	r0, 0x3f	; 63
    18ae:	f8 94       	cli
	XPROGTarget_SendByte(PDI_CMD_STCS | PDI_CTRL_REG);
	XPROGTarget_SendByte(0x02);

	/* Enable access to the XPROG NVM bus by sending the documented NVM access key to the device */
	XPROGTarget_SendByte(PDI_CMD_KEY);
	for (uint8_t i = sizeof(PDI_NVMENABLE_KEY); i > 0; i--)
    18b0:	de bf       	out	0x3e, r29	; 62
    18b2:	0f be       	out	0x3f, r0	; 63
    18b4:	cd bf       	out	0x3d, r28	; 61
	  XPROGTarget_SendByte(PDI_NVMENABLE_KEY[i - 1]);

	/* Wait until the NVM bus becomes active */
	return XMEGANVM_WaitWhileNVMBusBusy();
    18b6:	df 91       	pop	r29
    18b8:	cf 91       	pop	r28
}
    18ba:	1f 91       	pop	r17
    18bc:	0f 91       	pop	r16
    18be:	ff 90       	pop	r15
    18c0:	ef 90       	pop	r14
    18c2:	df 90       	pop	r13
    18c4:	cf 90       	pop	r12
    18c6:	08 95       	ret

000018c8 <XMEGANVM_DisablePDI>:
    18c8:	a1 df       	rcall	.-190    	; 0x180c <XMEGANVM_WaitWhileNVMBusBusy>
    18ca:	81 ec       	ldi	r24, 0xC1	; 193
    18cc:	08 df       	rcall	.-496    	; 0x16de <XPROGTarget_SendByte>
    18ce:	80 e0       	ldi	r24, 0x00	; 0
    18d0:	06 df       	rcall	.-500    	; 0x16de <XPROGTarget_SendByte>
    18d2:	81 e8       	ldi	r24, 0x81	; 129
    18d4:	04 df       	rcall	.-504    	; 0x16de <XPROGTarget_SendByte>
    18d6:	1e df       	rcall	.-452    	; 0x1714 <XPROGTarget_ReceiveByte>
		/* Clear reset register */
		XPROGTarget_SendByte(PDI_CMD_STCS | PDI_RESET_REG);
		XPROGTarget_SendByte(0x00);

		/* Read back the reset register, check to see if it took effect */
		XPROGTarget_SendByte(PDI_CMD_LDCS | PDI_RESET_REG);
    18d8:	88 23       	and	r24, r24
    18da:	b9 f7       	brne	.-18     	; 0x18ca <XMEGANVM_DisablePDI+0x2>
    18dc:	d6 ce       	rjmp	.-596    	; 0x168a <XPROGTarget_DisableTargetPDI>

000018de <XMEGANVM_GetMemoryCRC>:
	} while (XPROGTarget_ReceiveByte() != 0x00);
    18de:	1f 93       	push	r17
    18e0:	cf 93       	push	r28
    18e2:	df 93       	push	r29
    18e4:	18 2f       	mov	r17, r24

	XPROGTarget_DisableTargetPDI();
    18e6:	eb 01       	movw	r28, r22
    18e8:	18 82       	st	Y, r1
}
    18ea:	19 82       	std	Y+1, r1	; 0x01
 *  \return Boolean true if the command sequence complete successfully
 */
bool XMEGANVM_GetMemoryCRC(const uint8_t CRCCommand,
                           uint32_t* const CRCDest)
{
	*CRCDest = 0;
    18ec:	1a 82       	std	Y+2, r1	; 0x02
    18ee:	1b 82       	std	Y+3, r1	; 0x03

	/* Wait until the NVM controller is no longer busy */
	if (!(XMEGANVM_WaitWhileNVMControllerBusy()))
    18f0:	99 df       	rcall	.-206    	; 0x1824 <XMEGANVM_WaitWhileNVMControllerBusy>
    18f2:	88 23       	and	r24, r24
    18f4:	31 f1       	breq	.+76     	; 0x1942 <XMEGANVM_GetMemoryCRC+0x64>
    18f6:	8c e4       	ldi	r24, 0x4C	; 76
	  return false;

	/* Set the NVM command to the correct CRC read command */
	XPROGTarget_SendByte(PDI_CMD_STS | (PDI_DATSIZE_4BYTES << 2));
    18f8:	f2 de       	rcall	.-540    	; 0x16de <XPROGTarget_SendByte>
    18fa:	8a e0       	ldi	r24, 0x0A	; 10
    18fc:	75 df       	rcall	.-278    	; 0x17e8 <XMEGANVM_SendNVMRegAddress>
	XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_CMD);
    18fe:	81 2f       	mov	r24, r17
    1900:	ee de       	rcall	.-548    	; 0x16de <XPROGTarget_SendByte>
    1902:	8c e4       	ldi	r24, 0x4C	; 76
	XPROGTarget_SendByte(CRCCommand);
    1904:	ec de       	rcall	.-552    	; 0x16de <XPROGTarget_SendByte>
    1906:	8b e0       	ldi	r24, 0x0B	; 11
    1908:	6f df       	rcall	.-290    	; 0x17e8 <XMEGANVM_SendNVMRegAddress>

	/* Set CMDEX bit in NVM CTRLA register to start the CRC generation */
	XPROGTarget_SendByte(PDI_CMD_STS | (PDI_DATSIZE_4BYTES << 2));
    190a:	81 e0       	ldi	r24, 0x01	; 1
    190c:	e8 de       	rcall	.-560    	; 0x16de <XPROGTarget_SendByte>
    190e:	7e df       	rcall	.-260    	; 0x180c <XMEGANVM_WaitWhileNVMBusBusy>
	XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_CTRLA);
    1910:	88 23       	and	r24, r24
    1912:	b9 f0       	breq	.+46     	; 0x1942 <XMEGANVM_GetMemoryCRC+0x64>
    1914:	87 df       	rcall	.-242    	; 0x1824 <XMEGANVM_WaitWhileNVMControllerBusy>
	XPROGTarget_SendByte(XMEGA_NVM_BIT_CTRLA_CMDEX);
    1916:	88 23       	and	r24, r24
    1918:	a1 f0       	breq	.+40     	; 0x1942 <XMEGANVM_GetMemoryCRC+0x64>
    191a:	8b e6       	ldi	r24, 0x6B	; 107

	/* Wait until the NVM bus is ready again */
	if (!(XMEGANVM_WaitWhileNVMBusBusy()))
    191c:	e0 de       	rcall	.-576    	; 0x16de <XPROGTarget_SendByte>
    191e:	84 e0       	ldi	r24, 0x04	; 4
    1920:	63 df       	rcall	.-314    	; 0x17e8 <XMEGANVM_SendNVMRegAddress>
    1922:	80 ea       	ldi	r24, 0xA0	; 160
	  return false;

	/* Wait until the NVM controller is no longer busy */
	if (!(XMEGANVM_WaitWhileNVMControllerBusy()))
    1924:	dc de       	rcall	.-584    	; 0x16de <XPROGTarget_SendByte>
    1926:	82 e0       	ldi	r24, 0x02	; 2
    1928:	da de       	rcall	.-588    	; 0x16de <XPROGTarget_SendByte>
    192a:	84 e2       	ldi	r24, 0x24	; 36
	  return false;

	/* Load the PDI pointer register with the DAT0 register start address */
	XPROGTarget_SendByte(PDI_CMD_ST | (PDI_POINTER_DIRECT << 2) | PDI_DATSIZE_4BYTES);
    192c:	d8 de       	rcall	.-592    	; 0x16de <XPROGTarget_SendByte>
    192e:	f2 de       	rcall	.-540    	; 0x1714 <XPROGTarget_ReceiveByte>
    1930:	88 83       	st	Y, r24
	XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_DAT0);
    1932:	f0 de       	rcall	.-544    	; 0x1714 <XPROGTarget_ReceiveByte>
    1934:	89 83       	std	Y+1, r24	; 0x01
    1936:	ee de       	rcall	.-548    	; 0x1714 <XPROGTarget_ReceiveByte>

	/* Send the REPEAT command to grab the CRC bytes */
	XPROGTarget_SendByte(PDI_CMD_REPEAT | PDI_DATSIZE_1BYTE);
    1938:	8a 83       	std	Y+2, r24	; 0x02
    193a:	9a b5       	in	r25, 0x2a	; 42
    193c:	81 e0       	ldi	r24, 0x01	; 1
	XPROGTarget_SendByte(XMEGA_CRC_LENGTH_BYTES - 1);
    193e:	99 23       	and	r25, r25
    1940:	09 f4       	brne	.+2      	; 0x1944 <XMEGANVM_GetMemoryCRC+0x66>
    1942:	80 e0       	ldi	r24, 0x00	; 0

	/* Read in the CRC bytes from the target */
	XPROGTarget_SendByte(PDI_CMD_LD | (PDI_POINTER_INDIRECT_PI << 2) | PDI_DATSIZE_1BYTE);
    1944:	df 91       	pop	r29
    1946:	cf 91       	pop	r28
    1948:	1f 91       	pop	r17
	for (uint8_t i = 0; i < XMEGA_CRC_LENGTH_BYTES; i++)
	  ((uint8_t*)CRCDest)[i] = XPROGTarget_ReceiveByte();
    194a:	08 95       	ret

0000194c <XMEGANVM_ReadMemory>:
    194c:	cf 92       	push	r12
    194e:	df 92       	push	r13
    1950:	ef 92       	push	r14
    1952:	ff 92       	push	r15
    1954:	0f 93       	push	r16
    1956:	1f 93       	push	r17
    1958:	cf 93       	push	r28
    195a:	df 93       	push	r29

	return (TimeoutTicksRemaining > 0);
    195c:	6b 01       	movw	r12, r22
    195e:	7c 01       	movw	r14, r24
    1960:	8a 01       	movw	r16, r20
    1962:	e9 01       	movw	r28, r18
	if (!(XMEGANVM_WaitWhileNVMBusBusy()))
	  return false;

	/* Wait until the NVM controller is no longer busy */
	if (!(XMEGANVM_WaitWhileNVMControllerBusy()))
	  return false;
    1964:	5f df       	rcall	.-322    	; 0x1824 <XMEGANVM_WaitWhileNVMControllerBusy>
	XPROGTarget_SendByte(PDI_CMD_LD | (PDI_POINTER_INDIRECT_PI << 2) | PDI_DATSIZE_1BYTE);
	for (uint8_t i = 0; i < XMEGA_CRC_LENGTH_BYTES; i++)
	  ((uint8_t*)CRCDest)[i] = XPROGTarget_ReceiveByte();

	return (TimeoutTicksRemaining > 0);
}
    1966:	88 23       	and	r24, r24
    1968:	09 f1       	breq	.+66     	; 0x19ac <XMEGANVM_ReadMemory+0x60>
    196a:	8c e4       	ldi	r24, 0x4C	; 76
    196c:	b8 de       	rcall	.-656    	; 0x16de <XPROGTarget_SendByte>
	/* Wait until the NVM controller is no longer busy */
	if (!(XMEGANVM_WaitWhileNVMControllerBusy()))
	  return false;

	/* Send the READNVM command to the NVM controller for reading of an arbitrary location */
	XPROGTarget_SendByte(PDI_CMD_STS | (PDI_DATSIZE_4BYTES << 2));
    196e:	8a e0       	ldi	r24, 0x0A	; 10
    1970:	3b df       	rcall	.-394    	; 0x17e8 <XMEGANVM_SendNVMRegAddress>
	XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_CMD);
    1972:	83 e4       	ldi	r24, 0x43	; 67
    1974:	b4 de       	rcall	.-664    	; 0x16de <XPROGTarget_SendByte>
    1976:	8b e6       	ldi	r24, 0x6B	; 107
	XPROGTarget_SendByte(XMEGA_NVM_CMD_READNVM);
    1978:	b2 de       	rcall	.-668    	; 0x16de <XPROGTarget_SendByte>
    197a:	c7 01       	movw	r24, r14
    197c:	b6 01       	movw	r22, r12

	/* Load the PDI pointer register with the start address we want to read from */
	XPROGTarget_SendByte(PDI_CMD_ST | (PDI_POINTER_DIRECT << 2) | PDI_DATSIZE_4BYTES);
    197e:	1b df       	rcall	.-458    	; 0x17b6 <XMEGANVM_SendAddress>
    1980:	80 ea       	ldi	r24, 0xA0	; 160
    1982:	ad de       	rcall	.-678    	; 0x16de <XPROGTarget_SendByte>
	XMEGANVM_SendAddress(ReadAddress);
    1984:	8c 2f       	mov	r24, r28
    1986:	81 50       	subi	r24, 0x01	; 1
    1988:	aa de       	rcall	.-684    	; 0x16de <XPROGTarget_SendByte>
    198a:	84 e2       	ldi	r24, 0x24	; 36

	/* Send the REPEAT command with the specified number of bytes to read */
	XPROGTarget_SendByte(PDI_CMD_REPEAT | PDI_DATSIZE_1BYTE);
    198c:	a8 de       	rcall	.-688    	; 0x16de <XPROGTarget_SendByte>
    198e:	04 c0       	rjmp	.+8      	; 0x1998 <XMEGANVM_ReadMemory+0x4c>
    1990:	c1 de       	rcall	.-638    	; 0x1714 <XPROGTarget_ReceiveByte>
	XPROGTarget_SendByte(ReadSize - 1);
    1992:	f8 01       	movw	r30, r16
    1994:	81 93       	st	Z+, r24
    1996:	8f 01       	movw	r16, r30
    1998:	20 97       	sbiw	r28, 0x00	; 0

	/* Send a LD command with indirect access and post-increment to read out the bytes */
	XPROGTarget_SendByte(PDI_CMD_LD | (PDI_POINTER_INDIRECT_PI << 2) | PDI_DATSIZE_1BYTE);
    199a:	21 f0       	breq	.+8      	; 0x19a4 <XMEGANVM_ReadMemory+0x58>
    199c:	8a b5       	in	r24, 0x2a	; 42
    199e:	21 97       	sbiw	r28, 0x01	; 1
	while (ReadSize-- && TimeoutTicksRemaining)
    19a0:	88 23       	and	r24, r24
	  *(ReadBuffer++) = XPROGTarget_ReceiveByte();
    19a2:	b1 f7       	brne	.-20     	; 0x1990 <XMEGANVM_ReadMemory+0x44>
    19a4:	9a b5       	in	r25, 0x2a	; 42
    19a6:	81 e0       	ldi	r24, 0x01	; 1
    19a8:	99 23       	and	r25, r25
    19aa:	09 f4       	brne	.+2      	; 0x19ae <XMEGANVM_ReadMemory+0x62>
	XPROGTarget_SendByte(PDI_CMD_REPEAT | PDI_DATSIZE_1BYTE);
	XPROGTarget_SendByte(ReadSize - 1);

	/* Send a LD command with indirect access and post-increment to read out the bytes */
	XPROGTarget_SendByte(PDI_CMD_LD | (PDI_POINTER_INDIRECT_PI << 2) | PDI_DATSIZE_1BYTE);
	while (ReadSize-- && TimeoutTicksRemaining)
    19ac:	80 e0       	ldi	r24, 0x00	; 0
    19ae:	df 91       	pop	r29
    19b0:	cf 91       	pop	r28
    19b2:	1f 91       	pop	r17
    19b4:	0f 91       	pop	r16
    19b6:	ff 90       	pop	r15
	  *(ReadBuffer++) = XPROGTarget_ReceiveByte();

	return (TimeoutTicksRemaining > 0);
    19b8:	ef 90       	pop	r14
    19ba:	df 90       	pop	r13
    19bc:	cf 90       	pop	r12
    19be:	08 95       	ret

000019c0 <XMEGANVM_WriteByteMemory>:
                         uint8_t* ReadBuffer,
                         uint16_t ReadSize)
{
	/* Wait until the NVM controller is no longer busy */
	if (!(XMEGANVM_WaitWhileNVMControllerBusy()))
	  return false;
    19c0:	cf 92       	push	r12
	XPROGTarget_SendByte(PDI_CMD_LD | (PDI_POINTER_INDIRECT_PI << 2) | PDI_DATSIZE_1BYTE);
	while (ReadSize-- && TimeoutTicksRemaining)
	  *(ReadBuffer++) = XPROGTarget_ReceiveByte();

	return (TimeoutTicksRemaining > 0);
}
    19c2:	df 92       	push	r13
    19c4:	ef 92       	push	r14
    19c6:	ff 92       	push	r15
    19c8:	cf 93       	push	r28
    19ca:	df 93       	push	r29
    19cc:	c8 2f       	mov	r28, r24
    19ce:	6a 01       	movw	r12, r20
    19d0:	7b 01       	movw	r14, r22
    19d2:	d2 2f       	mov	r29, r18
bool XMEGANVM_WriteByteMemory(const uint8_t WriteCommand,
                              const uint32_t WriteAddress,
                              const uint8_t Byte)
{
	/* Wait until the NVM controller is no longer busy */
	if (!(XMEGANVM_WaitWhileNVMControllerBusy()))
    19d4:	27 df       	rcall	.-434    	; 0x1824 <XMEGANVM_WaitWhileNVMControllerBusy>
    19d6:	88 23       	and	r24, r24
    19d8:	79 f0       	breq	.+30     	; 0x19f8 <XMEGANVM_WriteByteMemory+0x38>
    19da:	8c e4       	ldi	r24, 0x4C	; 76
	  return false;

	/* Send the memory write command to the target */
	XPROGTarget_SendByte(PDI_CMD_STS | (PDI_DATSIZE_4BYTES << 2));
    19dc:	80 de       	rcall	.-768    	; 0x16de <XPROGTarget_SendByte>
    19de:	8a e0       	ldi	r24, 0x0A	; 10
    19e0:	03 df       	rcall	.-506    	; 0x17e8 <XMEGANVM_SendNVMRegAddress>
	XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_CMD);
    19e2:	8c 2f       	mov	r24, r28
    19e4:	7c de       	rcall	.-776    	; 0x16de <XPROGTarget_SendByte>
    19e6:	8c e4       	ldi	r24, 0x4C	; 76
	XPROGTarget_SendByte(WriteCommand);
    19e8:	7a de       	rcall	.-780    	; 0x16de <XPROGTarget_SendByte>
    19ea:	c7 01       	movw	r24, r14
    19ec:	b6 01       	movw	r22, r12

	/* Send new memory byte to the memory of the target */
	XPROGTarget_SendByte(PDI_CMD_STS | (PDI_DATSIZE_4BYTES << 2));
    19ee:	e3 de       	rcall	.-570    	; 0x17b6 <XMEGANVM_SendAddress>
    19f0:	8d 2f       	mov	r24, r29
    19f2:	75 de       	rcall	.-790    	; 0x16de <XPROGTarget_SendByte>
	XMEGANVM_SendAddress(WriteAddress);
    19f4:	81 e0       	ldi	r24, 0x01	; 1
    19f6:	01 c0       	rjmp	.+2      	; 0x19fa <XMEGANVM_WriteByteMemory+0x3a>
    19f8:	80 e0       	ldi	r24, 0x00	; 0
    19fa:	df 91       	pop	r29
	XPROGTarget_SendByte(Byte);
    19fc:	cf 91       	pop	r28
    19fe:	ff 90       	pop	r15
    1a00:	ef 90       	pop	r14

	return true;
    1a02:	df 90       	pop	r13
    1a04:	cf 90       	pop	r12
                              const uint32_t WriteAddress,
                              const uint8_t Byte)
{
	/* Wait until the NVM controller is no longer busy */
	if (!(XMEGANVM_WaitWhileNVMControllerBusy()))
	  return false;
    1a06:	08 95       	ret

00001a08 <XMEGANVM_WritePageMemory>:
	XPROGTarget_SendByte(PDI_CMD_STS | (PDI_DATSIZE_4BYTES << 2));
	XMEGANVM_SendAddress(WriteAddress);
	XPROGTarget_SendByte(Byte);

	return true;
}
    1a08:	3f 92       	push	r3
    1a0a:	4f 92       	push	r4
    1a0c:	5f 92       	push	r5
    1a0e:	6f 92       	push	r6
    1a10:	7f 92       	push	r7
    1a12:	8f 92       	push	r8
    1a14:	9f 92       	push	r9
                              const uint8_t WritePageCommand,
                              const uint8_t PageMode,
                              const uint32_t WriteAddress,
                              const uint8_t* WriteBuffer,
                              uint16_t WriteSize)
{
    1a16:	af 92       	push	r10
    1a18:	bf 92       	push	r11
    1a1a:	cf 92       	push	r12
    1a1c:	df 92       	push	r13
    1a1e:	ef 92       	push	r14
    1a20:	ff 92       	push	r15
    1a22:	0f 93       	push	r16
    1a24:	1f 93       	push	r17
    1a26:	cf 93       	push	r28
    1a28:	df 93       	push	r29
    1a2a:	88 2e       	mov	r8, r24
    1a2c:	96 2e       	mov	r9, r22
    1a2e:	34 2e       	mov	r3, r20
    1a30:	27 01       	movw	r4, r14
    1a32:	38 01       	movw	r6, r16
    1a34:	e6 01       	movw	r28, r12
	if (PageMode & XPRG_PAGEMODE_ERASE)
    1a36:	12 2f       	mov	r17, r18
    1a38:	20 ff       	sbrs	r18, 0
    1a3a:	10 c0       	rjmp	.+32     	; 0x1a5c <XMEGANVM_WritePageMemory+0x54>
	{
		/* Wait until the NVM controller is no longer busy */
		if (!(XMEGANVM_WaitWhileNVMControllerBusy()))
    1a3c:	f3 de       	rcall	.-538    	; 0x1824 <XMEGANVM_WaitWhileNVMControllerBusy>
    1a3e:	88 23       	and	r24, r24
    1a40:	09 f4       	brne	.+2      	; 0x1a44 <XMEGANVM_WritePageMemory+0x3c>
    1a42:	40 c0       	rjmp	.+128    	; 0x1ac4 <XMEGANVM_WritePageMemory+0xbc>
    1a44:	8c e4       	ldi	r24, 0x4C	; 76
		  return false;

		/* Send the memory buffer erase command to the target */
		XPROGTarget_SendByte(PDI_CMD_STS | (PDI_DATSIZE_4BYTES << 2));
    1a46:	4b de       	rcall	.-874    	; 0x16de <XPROGTarget_SendByte>
    1a48:	8a e0       	ldi	r24, 0x0A	; 10
    1a4a:	ce de       	rcall	.-612    	; 0x17e8 <XMEGANVM_SendNVMRegAddress>
		XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_CMD);
    1a4c:	89 2d       	mov	r24, r9
    1a4e:	47 de       	rcall	.-882    	; 0x16de <XPROGTarget_SendByte>
    1a50:	8c e4       	ldi	r24, 0x4C	; 76
		XPROGTarget_SendByte(EraseBuffCommand);
    1a52:	45 de       	rcall	.-886    	; 0x16de <XPROGTarget_SendByte>
    1a54:	8b e0       	ldi	r24, 0x0B	; 11
    1a56:	c8 de       	rcall	.-624    	; 0x17e8 <XMEGANVM_SendNVMRegAddress>

		/* Set CMDEX bit in NVM CTRLA register to start the buffer erase */
		XPROGTarget_SendByte(PDI_CMD_STS | (PDI_DATSIZE_4BYTES << 2));
    1a58:	81 e0       	ldi	r24, 0x01	; 1
    1a5a:	41 de       	rcall	.-894    	; 0x16de <XPROGTarget_SendByte>
    1a5c:	a1 14       	cp	r10, r1
		XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_CTRLA);
    1a5e:	b1 04       	cpc	r11, r1
    1a60:	e9 f0       	breq	.+58     	; 0x1a9c <XMEGANVM_WritePageMemory+0x94>
    1a62:	e0 de       	rcall	.-576    	; 0x1824 <XMEGANVM_WaitWhileNVMControllerBusy>
		XPROGTarget_SendByte(XMEGA_NVM_BIT_CTRLA_CMDEX);
    1a64:	88 23       	and	r24, r24
    1a66:	71 f1       	breq	.+92     	; 0x1ac4 <XMEGANVM_WritePageMemory+0xbc>
    1a68:	8c e4       	ldi	r24, 0x4C	; 76
	}

	if (WriteSize)
    1a6a:	39 de       	rcall	.-910    	; 0x16de <XPROGTarget_SendByte>
    1a6c:	8a e0       	ldi	r24, 0x0A	; 10
    1a6e:	bc de       	rcall	.-648    	; 0x17e8 <XMEGANVM_SendNVMRegAddress>
	{
		/* Wait until the NVM controller is no longer busy */
		if (!(XMEGANVM_WaitWhileNVMControllerBusy()))
    1a70:	88 2d       	mov	r24, r8
    1a72:	35 de       	rcall	.-918    	; 0x16de <XPROGTarget_SendByte>
    1a74:	8b e6       	ldi	r24, 0x6B	; 107
    1a76:	33 de       	rcall	.-922    	; 0x16de <XPROGTarget_SendByte>
		  return false;

		/* Send the memory buffer write command to the target */
		XPROGTarget_SendByte(PDI_CMD_STS | (PDI_DATSIZE_4BYTES << 2));
    1a78:	c3 01       	movw	r24, r6
    1a7a:	b2 01       	movw	r22, r4
    1a7c:	9c de       	rcall	.-712    	; 0x17b6 <XMEGANVM_SendAddress>
		XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_CMD);
    1a7e:	80 ea       	ldi	r24, 0xA0	; 160
    1a80:	2e de       	rcall	.-932    	; 0x16de <XPROGTarget_SendByte>
    1a82:	8a 2d       	mov	r24, r10
		XPROGTarget_SendByte(WriteBuffCommand);
    1a84:	81 50       	subi	r24, 0x01	; 1
    1a86:	2b de       	rcall	.-938    	; 0x16de <XPROGTarget_SendByte>
    1a88:	84 e6       	ldi	r24, 0x64	; 100

		/* Load the PDI pointer register with the start address we want to write to */
		XPROGTarget_SendByte(PDI_CMD_ST | (PDI_POINTER_DIRECT << 2) | PDI_DATSIZE_4BYTES);
    1a8a:	29 de       	rcall	.-942    	; 0x16de <XPROGTarget_SendByte>
    1a8c:	89 91       	ld	r24, Y+
    1a8e:	27 de       	rcall	.-946    	; 0x16de <XPROGTarget_SendByte>
		XMEGANVM_SendAddress(WriteAddress);
    1a90:	08 94       	sec
    1a92:	a1 08       	sbc	r10, r1
    1a94:	b1 08       	sbc	r11, r1
    1a96:	a1 14       	cp	r10, r1

		/* Send the REPEAT command with the specified number of bytes to write */
		XPROGTarget_SendByte(PDI_CMD_REPEAT | PDI_DATSIZE_1BYTE);
    1a98:	b1 04       	cpc	r11, r1
    1a9a:	c1 f7       	brne	.-16     	; 0x1a8c <XMEGANVM_WritePageMemory+0x84>
    1a9c:	11 ff       	sbrs	r17, 1
		XPROGTarget_SendByte(WriteSize - 1);
    1a9e:	10 c0       	rjmp	.+32     	; 0x1ac0 <XMEGANVM_WritePageMemory+0xb8>
    1aa0:	c1 de       	rcall	.-638    	; 0x1824 <XMEGANVM_WaitWhileNVMControllerBusy>
    1aa2:	88 23       	and	r24, r24
    1aa4:	79 f0       	breq	.+30     	; 0x1ac4 <XMEGANVM_WritePageMemory+0xbc>

		/* Send a ST command with indirect access and post-increment to write the bytes */
		XPROGTarget_SendByte(PDI_CMD_ST | (PDI_POINTER_INDIRECT_PI << 2) | PDI_DATSIZE_1BYTE);
    1aa6:	8c e4       	ldi	r24, 0x4C	; 76
    1aa8:	1a de       	rcall	.-972    	; 0x16de <XPROGTarget_SendByte>
    1aaa:	8a e0       	ldi	r24, 0x0A	; 10
		while (WriteSize--)
		  XPROGTarget_SendByte(*(WriteBuffer++));
    1aac:	9d de       	rcall	.-710    	; 0x17e8 <XMEGANVM_SendNVMRegAddress>
    1aae:	83 2d       	mov	r24, r3
    1ab0:	16 de       	rcall	.-980    	; 0x16de <XPROGTarget_SendByte>
    1ab2:	8c e4       	ldi	r24, 0x4C	; 76
    1ab4:	14 de       	rcall	.-984    	; 0x16de <XPROGTarget_SendByte>
    1ab6:	c3 01       	movw	r24, r6
		XPROGTarget_SendByte(PDI_CMD_REPEAT | PDI_DATSIZE_1BYTE);
		XPROGTarget_SendByte(WriteSize - 1);

		/* Send a ST command with indirect access and post-increment to write the bytes */
		XPROGTarget_SendByte(PDI_CMD_ST | (PDI_POINTER_INDIRECT_PI << 2) | PDI_DATSIZE_1BYTE);
		while (WriteSize--)
    1ab8:	b2 01       	movw	r22, r4
    1aba:	7d de       	rcall	.-774    	; 0x17b6 <XMEGANVM_SendAddress>
    1abc:	80 e0       	ldi	r24, 0x00	; 0
		  XPROGTarget_SendByte(*(WriteBuffer++));
	}

	if (PageMode & XPRG_PAGEMODE_WRITE)
    1abe:	0f de       	rcall	.-994    	; 0x16de <XPROGTarget_SendByte>
    1ac0:	81 e0       	ldi	r24, 0x01	; 1
	{
		/* Wait until the NVM controller is no longer busy */
		if (!(XMEGANVM_WaitWhileNVMControllerBusy()))
    1ac2:	01 c0       	rjmp	.+2      	; 0x1ac6 <XMEGANVM_WritePageMemory+0xbe>
    1ac4:	80 e0       	ldi	r24, 0x00	; 0
    1ac6:	df 91       	pop	r29
    1ac8:	cf 91       	pop	r28
		  return false;

		/* Send the memory write command to the target */
		XPROGTarget_SendByte(PDI_CMD_STS | (PDI_DATSIZE_4BYTES << 2));
    1aca:	1f 91       	pop	r17
    1acc:	0f 91       	pop	r16
    1ace:	ff 90       	pop	r15
		XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_CMD);
    1ad0:	ef 90       	pop	r14
    1ad2:	df 90       	pop	r13
    1ad4:	cf 90       	pop	r12
		XPROGTarget_SendByte(WritePageCommand);
    1ad6:	bf 90       	pop	r11
    1ad8:	af 90       	pop	r10
    1ada:	9f 90       	pop	r9

		/* Send the address of the first page location to write the memory page */
		XPROGTarget_SendByte(PDI_CMD_STS | (PDI_DATSIZE_4BYTES << 2));
    1adc:	8f 90       	pop	r8
    1ade:	7f 90       	pop	r7
    1ae0:	6f 90       	pop	r6
		XMEGANVM_SendAddress(WriteAddress);
    1ae2:	5f 90       	pop	r5
    1ae4:	4f 90       	pop	r4
    1ae6:	3f 90       	pop	r3
    1ae8:	08 95       	ret

00001aea <XMEGANVM_EraseMemory>:
		XPROGTarget_SendByte(0x00);
    1aea:	cf 92       	push	r12
    1aec:	df 92       	push	r13
    1aee:	ef 92       	push	r14
	}

	return true;
    1af0:	ff 92       	push	r15
    1af2:	cf 93       	push	r28

	if (PageMode & XPRG_PAGEMODE_WRITE)
	{
		/* Wait until the NVM controller is no longer busy */
		if (!(XMEGANVM_WaitWhileNVMControllerBusy()))
		  return false;
    1af4:	c8 2f       	mov	r28, r24
		XMEGANVM_SendAddress(WriteAddress);
		XPROGTarget_SendByte(0x00);
	}

	return true;
}
    1af6:	6a 01       	movw	r12, r20
    1af8:	7b 01       	movw	r14, r22
    1afa:	94 de       	rcall	.-728    	; 0x1824 <XMEGANVM_WaitWhileNVMControllerBusy>
    1afc:	88 23       	and	r24, r24
    1afe:	09 f4       	brne	.+2      	; 0x1b02 <XMEGANVM_EraseMemory+0x18>
    1b00:	55 c0       	rjmp	.+170    	; 0x1bac <XMEGANVM_EraseMemory+0xc2>
    1b02:	8c e4       	ldi	r24, 0x4C	; 76
    1b04:	c0 34       	cpi	r28, 0x40	; 64
    1b06:	29 f4       	brne	.+10     	; 0x1b12 <XMEGANVM_EraseMemory+0x28>
    1b08:	ea dd       	rcall	.-1068   	; 0x16de <XPROGTarget_SendByte>
    1b0a:	8a e0       	ldi	r24, 0x0A	; 10
    1b0c:	6d de       	rcall	.-806    	; 0x17e8 <XMEGANVM_SendNVMRegAddress>
    1b0e:	80 e4       	ldi	r24, 0x40	; 64
    1b10:	38 c0       	rjmp	.+112    	; 0x1b82 <XMEGANVM_EraseMemory+0x98>
    1b12:	c0 33       	cpi	r28, 0x30	; 48
    1b14:	09 f0       	breq	.+2      	; 0x1b18 <XMEGANVM_EraseMemory+0x2e>
    1b16:	3c c0       	rjmp	.+120    	; 0x1b90 <XMEGANVM_EraseMemory+0xa6>
    1b18:	e2 dd       	rcall	.-1084   	; 0x16de <XPROGTarget_SendByte>
		/* Set CMDEX bit in NVM CTRLA register to start the erase sequence */
		XPROGTarget_SendByte(PDI_CMD_STS | (PDI_DATSIZE_4BYTES << 2));
		XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_CTRLA);
		XPROGTarget_SendByte(XMEGA_NVM_BIT_CTRLA_CMDEX);
	}
	else if (EraseCommand == XMEGA_NVM_CMD_ERASEEEPROM)
    1b1a:	8a e0       	ldi	r24, 0x0A	; 10
    1b1c:	65 de       	rcall	.-822    	; 0x17e8 <XMEGANVM_SendNVMRegAddress>
	{
		/* Send the EEPROM page buffer erase command to the target */
		XPROGTarget_SendByte(PDI_CMD_STS | (PDI_DATSIZE_4BYTES << 2));
    1b1e:	86 e3       	ldi	r24, 0x36	; 54
    1b20:	de dd       	rcall	.-1092   	; 0x16de <XPROGTarget_SendByte>
		XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_CMD);
    1b22:	8c e4       	ldi	r24, 0x4C	; 76
    1b24:	dc dd       	rcall	.-1096   	; 0x16de <XPROGTarget_SendByte>
    1b26:	8b e0       	ldi	r24, 0x0B	; 11
		XPROGTarget_SendByte(XMEGA_NVM_CMD_ERASEEEPROMPAGEBUFF);
    1b28:	5f de       	rcall	.-834    	; 0x17e8 <XMEGANVM_SendNVMRegAddress>
    1b2a:	81 e0       	ldi	r24, 0x01	; 1
    1b2c:	d8 dd       	rcall	.-1104   	; 0x16de <XPROGTarget_SendByte>

		/* Set CMDEX bit in NVM CTRLA register to start the buffer erase */
		XPROGTarget_SendByte(PDI_CMD_STS | (PDI_DATSIZE_4BYTES << 2));
    1b2e:	7a de       	rcall	.-780    	; 0x1824 <XMEGANVM_WaitWhileNVMControllerBusy>
    1b30:	88 23       	and	r24, r24
    1b32:	09 f4       	brne	.+2      	; 0x1b36 <XMEGANVM_EraseMemory+0x4c>
		XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_CTRLA);
    1b34:	3b c0       	rjmp	.+118    	; 0x1bac <XMEGANVM_EraseMemory+0xc2>
    1b36:	8c e4       	ldi	r24, 0x4C	; 76
    1b38:	d2 dd       	rcall	.-1116   	; 0x16de <XPROGTarget_SendByte>
		XPROGTarget_SendByte(XMEGA_NVM_BIT_CTRLA_CMDEX);
    1b3a:	8a e0       	ldi	r24, 0x0A	; 10
    1b3c:	55 de       	rcall	.-854    	; 0x17e8 <XMEGANVM_SendNVMRegAddress>
    1b3e:	83 e3       	ldi	r24, 0x33	; 51

		/* Wait until the NVM controller is no longer busy */
		if (!(XMEGANVM_WaitWhileNVMControllerBusy()))
    1b40:	ce dd       	rcall	.-1124   	; 0x16de <XPROGTarget_SendByte>
    1b42:	8b e6       	ldi	r24, 0x6B	; 107
    1b44:	cc dd       	rcall	.-1128   	; 0x16de <XPROGTarget_SendByte>
    1b46:	c7 01       	movw	r24, r14
    1b48:	b6 01       	movw	r22, r12
		  return false;

		/* Send the EEPROM memory buffer write command to the target */
		XPROGTarget_SendByte(PDI_CMD_STS | (PDI_DATSIZE_4BYTES << 2));
    1b4a:	35 de       	rcall	.-918    	; 0x17b6 <XMEGANVM_SendAddress>
    1b4c:	80 ea       	ldi	r24, 0xA0	; 160
    1b4e:	c7 dd       	rcall	.-1138   	; 0x16de <XPROGTarget_SendByte>
		XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_CMD);
    1b50:	80 91 6a 01 	lds	r24, 0x016A
    1b54:	81 50       	subi	r24, 0x01	; 1
		XPROGTarget_SendByte(XMEGA_NVM_CMD_LOADEEPROMPAGEBUFF);
    1b56:	c3 dd       	rcall	.-1146   	; 0x16de <XPROGTarget_SendByte>
    1b58:	84 e6       	ldi	r24, 0x64	; 100
    1b5a:	c1 dd       	rcall	.-1150   	; 0x16de <XPROGTarget_SendByte>

		/* Load the PDI pointer register with the EEPROM page start address */
		XPROGTarget_SendByte(PDI_CMD_ST | (PDI_POINTER_DIRECT << 2) | PDI_DATSIZE_4BYTES);
    1b5c:	c0 e0       	ldi	r28, 0x00	; 0
    1b5e:	03 c0       	rjmp	.+6      	; 0x1b66 <XMEGANVM_EraseMemory+0x7c>
    1b60:	80 e0       	ldi	r24, 0x00	; 0
		XMEGANVM_SendAddress(Address);
    1b62:	bd dd       	rcall	.-1158   	; 0x16de <XPROGTarget_SendByte>
    1b64:	cf 5f       	subi	r28, 0xFF	; 255
    1b66:	2c 2f       	mov	r18, r28
    1b68:	30 e0       	ldi	r19, 0x00	; 0

		/* Send the REPEAT command with the specified number of bytes to write */
		XPROGTarget_SendByte(PDI_CMD_REPEAT | PDI_DATSIZE_1BYTE);
    1b6a:	80 91 6a 01 	lds	r24, 0x016A
    1b6e:	90 91 6b 01 	lds	r25, 0x016B
		XPROGTarget_SendByte(XPROG_Param_EEPageSize - 1);
    1b72:	28 17       	cp	r18, r24
    1b74:	39 07       	cpc	r19, r25
    1b76:	a0 f3       	brcs	.-24     	; 0x1b60 <XMEGANVM_EraseMemory+0x76>
    1b78:	8c e4       	ldi	r24, 0x4C	; 76

		/* Send a ST command with indirect access and post-increment to tag each byte in the EEPROM page buffer */
		XPROGTarget_SendByte(PDI_CMD_ST | (PDI_POINTER_INDIRECT_PI << 2) | PDI_DATSIZE_1BYTE);
    1b7a:	b1 dd       	rcall	.-1182   	; 0x16de <XPROGTarget_SendByte>
    1b7c:	8a e0       	ldi	r24, 0x0A	; 10
    1b7e:	34 de       	rcall	.-920    	; 0x17e8 <XMEGANVM_SendNVMRegAddress>
		for (uint8_t PageByte = 0; PageByte < XPROG_Param_EEPageSize; PageByte++)
    1b80:	80 e3       	ldi	r24, 0x30	; 48
    1b82:	ad dd       	rcall	.-1190   	; 0x16de <XPROGTarget_SendByte>
		  XPROGTarget_SendByte(0x00);
    1b84:	8c e4       	ldi	r24, 0x4C	; 76
    1b86:	ab dd       	rcall	.-1194   	; 0x16de <XPROGTarget_SendByte>
    1b88:	8b e0       	ldi	r24, 0x0B	; 11
		XPROGTarget_SendByte(PDI_CMD_REPEAT | PDI_DATSIZE_1BYTE);
		XPROGTarget_SendByte(XPROG_Param_EEPageSize - 1);

		/* Send a ST command with indirect access and post-increment to tag each byte in the EEPROM page buffer */
		XPROGTarget_SendByte(PDI_CMD_ST | (PDI_POINTER_INDIRECT_PI << 2) | PDI_DATSIZE_1BYTE);
		for (uint8_t PageByte = 0; PageByte < XPROG_Param_EEPageSize; PageByte++)
    1b8a:	2e de       	rcall	.-932    	; 0x17e8 <XMEGANVM_SendNVMRegAddress>
    1b8c:	81 e0       	ldi	r24, 0x01	; 1
    1b8e:	0b c0       	rjmp	.+22     	; 0x1ba6 <XMEGANVM_EraseMemory+0xbc>
    1b90:	a6 dd       	rcall	.-1204   	; 0x16de <XPROGTarget_SendByte>
    1b92:	8a e0       	ldi	r24, 0x0A	; 10
    1b94:	29 de       	rcall	.-942    	; 0x17e8 <XMEGANVM_SendNVMRegAddress>
    1b96:	8c 2f       	mov	r24, r28
    1b98:	a2 dd       	rcall	.-1212   	; 0x16de <XPROGTarget_SendByte>
    1b9a:	8c e4       	ldi	r24, 0x4C	; 76
    1b9c:	a0 dd       	rcall	.-1216   	; 0x16de <XPROGTarget_SendByte>
		  XPROGTarget_SendByte(0x00);

		/* Send the memory erase command to the target */
		XPROGTarget_SendByte(PDI_CMD_STS | (PDI_DATSIZE_4BYTES << 2));
    1b9e:	c7 01       	movw	r24, r14
    1ba0:	b6 01       	movw	r22, r12
    1ba2:	09 de       	rcall	.-1006   	; 0x17b6 <XMEGANVM_SendAddress>
		XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_CMD);
    1ba4:	80 e0       	ldi	r24, 0x00	; 0
    1ba6:	9b dd       	rcall	.-1226   	; 0x16de <XPROGTarget_SendByte>
    1ba8:	31 de       	rcall	.-926    	; 0x180c <XMEGANVM_WaitWhileNVMBusBusy>
		XPROGTarget_SendByte(EraseCommand);
    1baa:	01 c0       	rjmp	.+2      	; 0x1bae <XMEGANVM_EraseMemory+0xc4>
    1bac:	80 e0       	ldi	r24, 0x00	; 0
    1bae:	cf 91       	pop	r28

		/* Set CMDEX bit in NVM CTRLA register to start the EEPROM erase sequence */
		XPROGTarget_SendByte(PDI_CMD_STS | (PDI_DATSIZE_4BYTES << 2));
    1bb0:	ff 90       	pop	r15
    1bb2:	ef 90       	pop	r14
    1bb4:	df 90       	pop	r13
		XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_CTRLA);
    1bb6:	cf 90       	pop	r12
    1bb8:	08 95       	ret

00001bba <TINYNVM_SendWriteNVMRegister>:
 */
static void TINYNVM_SendWriteNVMRegister(const uint8_t Address)
{
	/* The TPI command for reading from the I/O space uses strange addressing, where the I/O address's upper
	 * two bits of the 6-bit address are shifted left once */
	XPROGTarget_SendByte(TPI_CMD_SOUT | ((Address & 0x30) << 1) | (Address & 0x0F));
    1bba:	98 2f       	mov	r25, r24
    1bbc:	9f 70       	andi	r25, 0x0F	; 15
    1bbe:	90 69       	ori	r25, 0x90	; 144
    1bc0:	28 2f       	mov	r18, r24
    1bc2:	30 e0       	ldi	r19, 0x00	; 0
    1bc4:	20 73       	andi	r18, 0x30	; 48
    1bc6:	30 70       	andi	r19, 0x00	; 0
    1bc8:	22 0f       	add	r18, r18
    1bca:	33 1f       	adc	r19, r19
    1bcc:	89 2f       	mov	r24, r25
    1bce:	82 2b       	or	r24, r18
    1bd0:	86 cd       	rjmp	.-1268   	; 0x16de <XPROGTarget_SendByte>

00001bd2 <TINYNVM_SendPointerAddress>:
    1bd2:	1f 93       	push	r17
}
    1bd4:	cf 93       	push	r28

#if defined(ENABLE_XPROG_PROTOCOL) || defined(__DOXYGEN__)

/** Sends the given pointer address to the target's TPI pointer register */
static void TINYNVM_SendPointerAddress(const uint16_t AbsoluteAddress)
{
    1bd6:	df 93       	push	r29
    1bd8:	0f 92       	push	r0
    1bda:	cd b7       	in	r28, 0x3d	; 61
    1bdc:	de b7       	in	r29, 0x3e	; 62
    1bde:	18 2f       	mov	r17, r24
	/* Send the given 16-bit address to the target, LSB first */
	XPROGTarget_SendByte(TPI_CMD_SSTPR | 0);
    1be0:	88 e6       	ldi	r24, 0x68	; 104
    1be2:	99 83       	std	Y+1, r25	; 0x01
    1be4:	7c dd       	rcall	.-1288   	; 0x16de <XPROGTarget_SendByte>
    1be6:	81 2f       	mov	r24, r17
	XPROGTarget_SendByte(AbsoluteAddress & 0xFF);
    1be8:	7a dd       	rcall	.-1292   	; 0x16de <XPROGTarget_SendByte>
    1bea:	89 e6       	ldi	r24, 0x69	; 105
    1bec:	78 dd       	rcall	.-1296   	; 0x16de <XPROGTarget_SendByte>
	XPROGTarget_SendByte(TPI_CMD_SSTPR | 1);
    1bee:	99 81       	ldd	r25, Y+1	; 0x01
    1bf0:	89 2f       	mov	r24, r25
    1bf2:	75 dd       	rcall	.-1302   	; 0x16de <XPROGTarget_SendByte>
	XPROGTarget_SendByte(AbsoluteAddress >> 8);
    1bf4:	0f 90       	pop	r0
    1bf6:	df 91       	pop	r29
    1bf8:	cf 91       	pop	r28
    1bfa:	1f 91       	pop	r17
}
    1bfc:	08 95       	ret

00001bfe <TINYNVM_WaitWhileNVMBusBusy>:
    1bfe:	80 e8       	ldi	r24, 0x80	; 128
    1c00:	6e dd       	rcall	.-1316   	; 0x16de <XPROGTarget_SendByte>
    1c02:	88 dd       	rcall	.-1264   	; 0x1714 <XPROGTarget_ReceiveByte>
    1c04:	9a b5       	in	r25, 0x2a	; 42
	for (;;)
	{
		/* Send the SLDCS command to read the TPI STATUS register to see the NVM bus is active */
		XPROGTarget_SendByte(TPI_CMD_SLDCS | TPI_STATUS_REG);

		uint8_t StatusRegister = XPROGTarget_ReceiveByte();
    1c06:	99 23       	and	r25, r25

		/* We might have timed out waiting for the status register read response, check here */
		if (!(TimeoutTicksRemaining))
    1c08:	21 f0       	breq	.+8      	; 0x1c12 <TINYNVM_WaitWhileNVMBusBusy+0x14>
    1c0a:	81 ff       	sbrs	r24, 1
    1c0c:	f8 cf       	rjmp	.-16     	; 0x1bfe <TINYNVM_WaitWhileNVMBusBusy>
		  return false;

		/* Check the status register read response to see if the NVM bus is enabled */
		if (StatusRegister & TPI_STATUS_NVM)
    1c0e:	81 e0       	ldi	r24, 0x01	; 1
    1c10:	08 95       	ret
		  return true;
    1c12:	80 e0       	ldi	r24, 0x00	; 0
    1c14:	08 95       	ret

00001c16 <TINYNVM_WaitWhileNVMControllerBusy>:

		uint8_t StatusRegister = XPROGTarget_ReceiveByte();

		/* We might have timed out waiting for the status register read response, check here */
		if (!(TimeoutTicksRemaining))
		  return false;
    1c16:	20 91 68 01 	lds	r18, 0x0168
 */
static void TINYNVM_SendReadNVMRegister(const uint8_t Address)
{
	/* The TPI command for reading from the I/O space uses strange addressing, where the I/O address's upper
	 * two bits of the 6-bit address are shifted left once */
	XPROGTarget_SendByte(TPI_CMD_SIN | ((Address & 0x30) << 1) | (Address & 0x0F));
    1c1a:	82 2f       	mov	r24, r18
    1c1c:	8f 70       	andi	r24, 0x0F	; 15
    1c1e:	80 61       	ori	r24, 0x10	; 16
    1c20:	30 e0       	ldi	r19, 0x00	; 0
    1c22:	20 73       	andi	r18, 0x30	; 48
    1c24:	30 70       	andi	r19, 0x00	; 0
    1c26:	22 0f       	add	r18, r18
    1c28:	33 1f       	adc	r19, r19
    1c2a:	82 2b       	or	r24, r18
    1c2c:	58 dd       	rcall	.-1360   	; 0x16de <XPROGTarget_SendByte>
    1c2e:	72 dd       	rcall	.-1308   	; 0x1714 <XPROGTarget_ReceiveByte>
	for (;;)
	{
		/* Send the SIN command to read the TPI STATUS register to see the NVM bus is busy */
		TINYNVM_SendReadNVMRegister(XPROG_Param_NVMCSRRegAddr);

		uint8_t StatusRegister = XPROGTarget_ReceiveByte();
    1c30:	9a b5       	in	r25, 0x2a	; 42
    1c32:	99 23       	and	r25, r25

		/* We might have timed out waiting for the status register read response, check here */
		if (!(TimeoutTicksRemaining))
    1c34:	21 f0       	breq	.+8      	; 0x1c3e <TINYNVM_WaitWhileNVMControllerBusy+0x28>
    1c36:	87 fd       	sbrc	r24, 7
    1c38:	ee cf       	rjmp	.-36     	; 0x1c16 <TINYNVM_WaitWhileNVMControllerBusy>
		  return false;

		/* Check to see if the BUSY flag is still set */
		if (!(StatusRegister & (1 << 7)))
    1c3a:	81 e0       	ldi	r24, 0x01	; 1
    1c3c:	08 95       	ret
		  return true;
    1c3e:	80 e0       	ldi	r24, 0x00	; 0
    1c40:	08 95       	ret

00001c42 <TINYNVM_EnableTPI>:

		uint8_t StatusRegister = XPROGTarget_ReceiveByte();

		/* We might have timed out waiting for the status register read response, check here */
		if (!(TimeoutTicksRemaining))
		  return false;
    1c42:	cf 92       	push	r12

		/* Check to see if the BUSY flag is still set */
		if (!(StatusRegister & (1 << 7)))
		  return true;
	}
}
    1c44:	df 92       	push	r13
/** Enables the physical TPI interface on the target and enables access to the internal NVM controller.
 *
 *  \return Boolean true if the TPI interface was enabled successfully, false otherwise
 */
bool TINYNVM_EnableTPI(void)
{
    1c46:	ef 92       	push	r14
    1c48:	ff 92       	push	r15
    1c4a:	0f 93       	push	r16
    1c4c:	1f 93       	push	r17
    1c4e:	cf 93       	push	r28
    1c50:	df 93       	push	r29
    1c52:	cd b7       	in	r28, 0x3d	; 61
    1c54:	de b7       	in	r29, 0x3e	; 62
    1c56:	28 97       	sbiw	r28, 0x08	; 8
    1c58:	0f b6       	in	r0, 0x3f	; 63
    1c5a:	f8 94       	cli
    1c5c:	de bf       	out	0x3e, r29	; 62
    1c5e:	0f be       	out	0x3f, r0	; 63
    1c60:	cd bf       	out	0x3d, r28	; 61
	/* Enable TPI programming mode with the attached target */
	XPROGTarget_EnableTargetTPI();
    1c62:	76 dd       	rcall	.-1300   	; 0x1750 <XPROGTarget_EnableTargetTPI>
    1c64:	82 ec       	ldi	r24, 0xC2	; 194

	/* Lower direction change guard time to 32 USART bits */
	XPROGTarget_SendByte(TPI_CMD_SSTCS | TPI_CTRL_REG);
    1c66:	3b dd       	rcall	.-1418   	; 0x16de <XPROGTarget_SendByte>
    1c68:	82 e0       	ldi	r24, 0x02	; 2
    1c6a:	39 dd       	rcall	.-1422   	; 0x16de <XPROGTarget_SendByte>
	XPROGTarget_SendByte(0x02);
    1c6c:	80 ee       	ldi	r24, 0xE0	; 224
    1c6e:	37 dd       	rcall	.-1426   	; 0x16de <XPROGTarget_SendByte>
    1c70:	8e 01       	movw	r16, r28

	/* Enable access to the XPROG NVM bus by sending the documented NVM access key to the device */
	XPROGTarget_SendByte(TPI_CMD_SKEY);
    1c72:	07 5f       	subi	r16, 0xF7	; 247
    1c74:	1f 4f       	sbci	r17, 0xFF	; 255
    1c76:	7e 01       	movw	r14, r28
    1c78:	08 94       	sec
    1c7a:	e1 1c       	adc	r14, r1
    1c7c:	f1 1c       	adc	r15, r1

/** Enables the physical TPI interface on the target and enables access to the internal NVM controller.
 *
 *  \return Boolean true if the TPI interface was enabled successfully, false otherwise
 */
bool TINYNVM_EnableTPI(void)
    1c7e:	67 01       	movw	r12, r14
    1c80:	f6 01       	movw	r30, r12
    1c82:	aa e9       	ldi	r26, 0x9A	; 154
    1c84:	b1 e0       	ldi	r27, 0x01	; 1
	XPROGTarget_SendByte(0x02);

	/* Enable access to the XPROG NVM bus by sending the documented NVM access key to the device */
	XPROGTarget_SendByte(TPI_CMD_SKEY);
	for (uint8_t i = sizeof(TPI_NVMENABLE_KEY); i > 0; i--)
	  XPROGTarget_SendByte(TPI_NVMENABLE_KEY[i - 1]);
    1c86:	88 e0       	ldi	r24, 0x08	; 8
    1c88:	0d 90       	ld	r0, X+
    1c8a:	01 92       	st	Z+, r0
    1c8c:	81 50       	subi	r24, 0x01	; 1
    1c8e:	e1 f7       	brne	.-8      	; 0x1c88 <TINYNVM_EnableTPI+0x46>
    1c90:	f8 01       	movw	r30, r16
    1c92:	82 91       	ld	r24, -Z
    1c94:	8f 01       	movw	r16, r30
    1c96:	23 dd       	rcall	.-1466   	; 0x16de <XPROGTarget_SendByte>
    1c98:	0e 15       	cp	r16, r14
    1c9a:	1f 05       	cpc	r17, r15
    1c9c:	89 f7       	brne	.-30     	; 0x1c80 <TINYNVM_EnableTPI+0x3e>
    1c9e:	af df       	rcall	.-162    	; 0x1bfe <TINYNVM_WaitWhileNVMBusBusy>
    1ca0:	28 96       	adiw	r28, 0x08	; 8
	XPROGTarget_SendByte(TPI_CMD_SSTCS | TPI_CTRL_REG);
	XPROGTarget_SendByte(0x02);

	/* Enable access to the XPROG NVM bus by sending the documented NVM access key to the device */
	XPROGTarget_SendByte(TPI_CMD_SKEY);
	for (uint8_t i = sizeof(TPI_NVMENABLE_KEY); i > 0; i--)
    1ca2:	0f b6       	in	r0, 0x3f	; 63
    1ca4:	f8 94       	cli
    1ca6:	de bf       	out	0x3e, r29	; 62
	  XPROGTarget_SendByte(TPI_NVMENABLE_KEY[i - 1]);

	/* Wait until the NVM bus becomes active */
	return TINYNVM_WaitWhileNVMBusBusy();
    1ca8:	0f be       	out	0x3f, r0	; 63
    1caa:	cd bf       	out	0x3d, r28	; 61
}
    1cac:	df 91       	pop	r29
    1cae:	cf 91       	pop	r28
    1cb0:	1f 91       	pop	r17
    1cb2:	0f 91       	pop	r16
    1cb4:	ff 90       	pop	r15
    1cb6:	ef 90       	pop	r14
    1cb8:	df 90       	pop	r13
    1cba:	cf 90       	pop	r12
    1cbc:	08 95       	ret

00001cbe <TINYNVM_DisableTPI>:
    1cbe:	9f df       	rcall	.-194    	; 0x1bfe <TINYNVM_WaitWhileNVMBusBusy>
    1cc0:	80 ec       	ldi	r24, 0xC0	; 192
    1cc2:	0d dd       	rcall	.-1510   	; 0x16de <XPROGTarget_SendByte>
    1cc4:	80 e0       	ldi	r24, 0x00	; 0
    1cc6:	0b dd       	rcall	.-1514   	; 0x16de <XPROGTarget_SendByte>
    1cc8:	81 e8       	ldi	r24, 0x81	; 129

	do
	{
		/* Clear the NVMEN bit in the TPI STATUS register to disable TPI mode */
		XPROGTarget_SendByte(TPI_CMD_SSTCS | TPI_STATUS_REG);
		XPROGTarget_SendByte(0x00);
    1cca:	09 dd       	rcall	.-1518   	; 0x16de <XPROGTarget_SendByte>
    1ccc:	23 dd       	rcall	.-1466   	; 0x1714 <XPROGTarget_ReceiveByte>

		/* Read back the STATUS register, check to see if it took effect */
		XPROGTarget_SendByte(TPI_CMD_SLDCS | PDI_RESET_REG);
    1cce:	88 23       	and	r24, r24
    1cd0:	b9 f7       	brne	.-18     	; 0x1cc0 <TINYNVM_DisableTPI+0x2>
    1cd2:	ee cc       	rjmp	.-1572   	; 0x16b0 <XPROGTarget_DisableTargetTPI>

00001cd4 <TINYNVM_ReadMemory>:
	} while (XPROGTarget_ReceiveByte() != 0x00);
    1cd4:	ef 92       	push	r14
    1cd6:	ff 92       	push	r15
    1cd8:	0f 93       	push	r16
    1cda:	1f 93       	push	r17

	XPROGTarget_DisableTargetTPI();
    1cdc:	cf 93       	push	r28
    1cde:	df 93       	push	r29
}
    1ce0:	7c 01       	movw	r14, r24
 *  \return Boolean true if the command sequence complete successfully
 */
bool TINYNVM_ReadMemory(const uint16_t ReadAddress,
                        uint8_t* ReadBuffer,
                        uint16_t ReadSize)
{
    1ce2:	8b 01       	movw	r16, r22
    1ce4:	ea 01       	movw	r28, r20
	/* Wait until the NVM controller is no longer busy */
	if (!(TINYNVM_WaitWhileNVMControllerBusy()))
    1ce6:	97 df       	rcall	.-210    	; 0x1c16 <TINYNVM_WaitWhileNVMControllerBusy>
    1ce8:	88 23       	and	r24, r24
    1cea:	c1 f0       	breq	.+48     	; 0x1d1c <TINYNVM_ReadMemory+0x48>
    1cec:	80 91 69 01 	lds	r24, 0x0169
	  return false;

	/* Set the NVM control register to the NO OP command for memory reading */
	TINYNVM_SendWriteNVMRegister(XPROG_Param_NVMCMDRegAddr);
    1cf0:	64 df       	rcall	.-312    	; 0x1bba <TINYNVM_SendWriteNVMRegister>
    1cf2:	80 e0       	ldi	r24, 0x00	; 0
    1cf4:	f4 dc       	rcall	.-1560   	; 0x16de <XPROGTarget_SendByte>
	XPROGTarget_SendByte(TINY_NVM_CMD_NOOP);
    1cf6:	c7 01       	movw	r24, r14
    1cf8:	6c df       	rcall	.-296    	; 0x1bd2 <TINYNVM_SendPointerAddress>
    1cfa:	06 c0       	rjmp	.+12     	; 0x1d08 <TINYNVM_ReadMemory+0x34>

	/* Send the address of the location to read from */
	TINYNVM_SendPointerAddress(ReadAddress);
    1cfc:	84 e2       	ldi	r24, 0x24	; 36
    1cfe:	ef dc       	rcall	.-1570   	; 0x16de <XPROGTarget_SendByte>
    1d00:	09 dd       	rcall	.-1518   	; 0x1714 <XPROGTarget_ReceiveByte>

	while (ReadSize-- && TimeoutTicksRemaining)
    1d02:	f8 01       	movw	r30, r16
	{
		/* Read the byte of data from the target */
		XPROGTarget_SendByte(TPI_CMD_SLD | TPI_POINTER_INDIRECT_PI);
    1d04:	81 93       	st	Z+, r24
    1d06:	8f 01       	movw	r16, r30
    1d08:	20 97       	sbiw	r28, 0x00	; 0
		*(ReadBuffer++) = XPROGTarget_ReceiveByte();
    1d0a:	21 f0       	breq	.+8      	; 0x1d14 <TINYNVM_ReadMemory+0x40>
    1d0c:	8a b5       	in	r24, 0x2a	; 42
    1d0e:	21 97       	sbiw	r28, 0x01	; 1
    1d10:	88 23       	and	r24, r24
    1d12:	a1 f7       	brne	.-24     	; 0x1cfc <TINYNVM_ReadMemory+0x28>
	XPROGTarget_SendByte(TINY_NVM_CMD_NOOP);

	/* Send the address of the location to read from */
	TINYNVM_SendPointerAddress(ReadAddress);

	while (ReadSize-- && TimeoutTicksRemaining)
    1d14:	9a b5       	in	r25, 0x2a	; 42
    1d16:	81 e0       	ldi	r24, 0x01	; 1
    1d18:	99 23       	and	r25, r25
    1d1a:	09 f4       	brne	.+2      	; 0x1d1e <TINYNVM_ReadMemory+0x4a>
    1d1c:	80 e0       	ldi	r24, 0x00	; 0
    1d1e:	df 91       	pop	r29
		/* Read the byte of data from the target */
		XPROGTarget_SendByte(TPI_CMD_SLD | TPI_POINTER_INDIRECT_PI);
		*(ReadBuffer++) = XPROGTarget_ReceiveByte();
	}

	return (TimeoutTicksRemaining > 0);
    1d20:	cf 91       	pop	r28
    1d22:	1f 91       	pop	r17
    1d24:	0f 91       	pop	r16
    1d26:	ff 90       	pop	r15
                        uint8_t* ReadBuffer,
                        uint16_t ReadSize)
{
	/* Wait until the NVM controller is no longer busy */
	if (!(TINYNVM_WaitWhileNVMControllerBusy()))
	  return false;
    1d28:	ef 90       	pop	r14
		XPROGTarget_SendByte(TPI_CMD_SLD | TPI_POINTER_INDIRECT_PI);
		*(ReadBuffer++) = XPROGTarget_ReceiveByte();
	}

	return (TimeoutTicksRemaining > 0);
}
    1d2a:	08 95       	ret

00001d2c <TINYNVM_WriteMemory>:
    1d2c:	ef 92       	push	r14
    1d2e:	ff 92       	push	r15
    1d30:	0f 93       	push	r16
    1d32:	1f 93       	push	r17
    1d34:	cf 93       	push	r28
    1d36:	df 93       	push	r29
 *  \return Boolean true if the command sequence complete successfully
 */
bool TINYNVM_WriteMemory(const uint16_t WriteAddress,
                         uint8_t* WriteBuffer,
                         uint16_t WriteLength)
{
    1d38:	7c 01       	movw	r14, r24
    1d3a:	8b 01       	movw	r16, r22
    1d3c:	ea 01       	movw	r28, r20
	/* Wait until the NVM controller is no longer busy */
	if (!(TINYNVM_WaitWhileNVMControllerBusy()))
    1d3e:	6b df       	rcall	.-298    	; 0x1c16 <TINYNVM_WaitWhileNVMControllerBusy>
    1d40:	88 23       	and	r24, r24
    1d42:	21 f1       	breq	.+72     	; 0x1d8c <TINYNVM_WriteMemory+0x60>
    1d44:	c0 ff       	sbrs	r28, 0
	  return false;

	/* Must have an integer number of words to write - if extra byte, word-align via a dummy high byte */
	if (WriteLength & 0x01)
    1d46:	06 c0       	rjmp	.+12     	; 0x1d54 <TINYNVM_WriteMemory+0x28>
    1d48:	f8 01       	movw	r30, r16
	  WriteBuffer[WriteLength++] = 0xFF;
    1d4a:	ec 0f       	add	r30, r28
    1d4c:	fd 1f       	adc	r31, r29
    1d4e:	8f ef       	ldi	r24, 0xFF	; 255
    1d50:	80 83       	st	Z, r24
    1d52:	21 96       	adiw	r28, 0x01	; 1
    1d54:	80 91 69 01 	lds	r24, 0x0169

	/* Set the NVM control register to the WORD WRITE command for memory writing */
	TINYNVM_SendWriteNVMRegister(XPROG_Param_NVMCMDRegAddr);
    1d58:	30 df       	rcall	.-416    	; 0x1bba <TINYNVM_SendWriteNVMRegister>
    1d5a:	8d e1       	ldi	r24, 0x1D	; 29
    1d5c:	c0 dc       	rcall	.-1664   	; 0x16de <XPROGTarget_SendByte>
	XPROGTarget_SendByte(TINY_NVM_CMD_WORDWRITE);
    1d5e:	c7 01       	movw	r24, r14
    1d60:	38 df       	rcall	.-400    	; 0x1bd2 <TINYNVM_SendPointerAddress>
    1d62:	10 c0       	rjmp	.+32     	; 0x1d84 <TINYNVM_WriteMemory+0x58>

	/* Send the address of the location to write to */
	TINYNVM_SendPointerAddress(WriteAddress);
    1d64:	58 df       	rcall	.-336    	; 0x1c16 <TINYNVM_WaitWhileNVMControllerBusy>
    1d66:	88 23       	and	r24, r24
    1d68:	89 f0       	breq	.+34     	; 0x1d8c <TINYNVM_WriteMemory+0x60>

	while (WriteLength)
    1d6a:	84 e6       	ldi	r24, 0x64	; 100
	{
		/* Wait until the NVM controller is no longer busy */
		if (!(TINYNVM_WaitWhileNVMControllerBusy()))
    1d6c:	b8 dc       	rcall	.-1680   	; 0x16de <XPROGTarget_SendByte>
    1d6e:	f8 01       	movw	r30, r16
    1d70:	80 81       	ld	r24, Z
    1d72:	b5 dc       	rcall	.-1686   	; 0x16de <XPROGTarget_SendByte>
		  return false;

		/* Write the low byte of data to the target */
		XPROGTarget_SendByte(TPI_CMD_SST | TPI_POINTER_INDIRECT_PI);
    1d74:	84 e6       	ldi	r24, 0x64	; 100
    1d76:	b3 dc       	rcall	.-1690   	; 0x16de <XPROGTarget_SendByte>
    1d78:	f8 01       	movw	r30, r16
		XPROGTarget_SendByte(*(WriteBuffer++));
    1d7a:	81 81       	ldd	r24, Z+1	; 0x01
    1d7c:	0e 5f       	subi	r16, 0xFE	; 254
    1d7e:	1f 4f       	sbci	r17, 0xFF	; 255
    1d80:	ae dc       	rcall	.-1700   	; 0x16de <XPROGTarget_SendByte>

		/* Write the high byte of data to the target */
		XPROGTarget_SendByte(TPI_CMD_SST | TPI_POINTER_INDIRECT_PI);
    1d82:	22 97       	sbiw	r28, 0x02	; 2
    1d84:	20 97       	sbiw	r28, 0x00	; 0
    1d86:	71 f7       	brne	.-36     	; 0x1d64 <TINYNVM_WriteMemory+0x38>
		XPROGTarget_SendByte(*(WriteBuffer++));
    1d88:	81 e0       	ldi	r24, 0x01	; 1
    1d8a:	01 c0       	rjmp	.+2      	; 0x1d8e <TINYNVM_WriteMemory+0x62>
 *  \param[in] WriteBuffer   Buffer to source data from
 *  \param[in] WriteLength   Total number of bytes to write to the device (must be an integer multiple of 2)
 *
 *  \return Boolean true if the command sequence complete successfully
 */
bool TINYNVM_WriteMemory(const uint16_t WriteAddress,
    1d8c:	80 e0       	ldi	r24, 0x00	; 0
    1d8e:	df 91       	pop	r29
		XPROGTarget_SendByte(TPI_CMD_SST | TPI_POINTER_INDIRECT_PI);
		XPROGTarget_SendByte(*(WriteBuffer++));

		/* Write the high byte of data to the target */
		XPROGTarget_SendByte(TPI_CMD_SST | TPI_POINTER_INDIRECT_PI);
		XPROGTarget_SendByte(*(WriteBuffer++));
    1d90:	cf 91       	pop	r28
    1d92:	1f 91       	pop	r17

		/* Need to decrement the write length twice, since we wrote a whole two-byte word */
		WriteLength -= 2;
    1d94:	0f 91       	pop	r16
	XPROGTarget_SendByte(TINY_NVM_CMD_WORDWRITE);

	/* Send the address of the location to write to */
	TINYNVM_SendPointerAddress(WriteAddress);

	while (WriteLength)
    1d96:	ff 90       	pop	r15
    1d98:	ef 90       	pop	r14

		/* Need to decrement the write length twice, since we wrote a whole two-byte word */
		WriteLength -= 2;
	}

	return true;
    1d9a:	08 95       	ret

00001d9c <TINYNVM_EraseMemory>:
    1d9c:	1f 93       	push	r17

	while (WriteLength)
	{
		/* Wait until the NVM controller is no longer busy */
		if (!(TINYNVM_WaitWhileNVMControllerBusy()))
		  return false;
    1d9e:	cf 93       	push	r28
		/* Need to decrement the write length twice, since we wrote a whole two-byte word */
		WriteLength -= 2;
	}

	return true;
}
    1da0:	df 93       	push	r29
    1da2:	18 2f       	mov	r17, r24
    1da4:	eb 01       	movw	r28, r22
    1da6:	37 df       	rcall	.-402    	; 0x1c16 <TINYNVM_WaitWhileNVMControllerBusy>
    1da8:	88 23       	and	r24, r24
    1daa:	71 f0       	breq	.+28     	; 0x1dc8 <TINYNVM_EraseMemory+0x2c>
    1dac:	80 91 69 01 	lds	r24, 0x0169
	/* Wait until the NVM controller is no longer busy */
	if (!(TINYNVM_WaitWhileNVMControllerBusy()))
	  return false;

	/* Set the NVM control register to the target memory erase command */
	TINYNVM_SendWriteNVMRegister(XPROG_Param_NVMCMDRegAddr);
    1db0:	04 df       	rcall	.-504    	; 0x1bba <TINYNVM_SendWriteNVMRegister>
    1db2:	81 2f       	mov	r24, r17
    1db4:	94 dc       	rcall	.-1752   	; 0x16de <XPROGTarget_SendByte>
	XPROGTarget_SendByte(EraseCommand);
    1db6:	ce 01       	movw	r24, r28
    1db8:	81 60       	ori	r24, 0x01	; 1
    1dba:	0b df       	rcall	.-490    	; 0x1bd2 <TINYNVM_SendPointerAddress>

	/* Write to a high byte location within the target address space to start the erase process */
	TINYNVM_SendPointerAddress(Address | 0x0001);
    1dbc:	80 e6       	ldi	r24, 0x60	; 96
    1dbe:	8f dc       	rcall	.-1762   	; 0x16de <XPROGTarget_SendByte>
    1dc0:	80 e0       	ldi	r24, 0x00	; 0
    1dc2:	8d dc       	rcall	.-1766   	; 0x16de <XPROGTarget_SendByte>
	XPROGTarget_SendByte(TPI_CMD_SST | TPI_POINTER_INDIRECT);
    1dc4:	28 df       	rcall	.-432    	; 0x1c16 <TINYNVM_WaitWhileNVMControllerBusy>
    1dc6:	01 c0       	rjmp	.+2      	; 0x1dca <TINYNVM_EraseMemory+0x2e>
    1dc8:	80 e0       	ldi	r24, 0x00	; 0
	XPROGTarget_SendByte(0x00);
    1dca:	df 91       	pop	r29
    1dcc:	cf 91       	pop	r28
    1dce:	1f 91       	pop	r17

	/* Wait until the NVM controller is no longer busy */
	if (!(TINYNVM_WaitWhileNVMControllerBusy()))
    1dd0:	08 95       	ret

00001dd2 <Endpoint_Write_Stream_LE>:
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
    1dd2:	af 92       	push	r10
    1dd4:	bf 92       	push	r11
    1dd6:	cf 92       	push	r12
    1dd8:	df 92       	push	r13
    1dda:	ef 92       	push	r14
    1ddc:	ff 92       	push	r15
    1dde:	1f 93       	push	r17
    1de0:	cf 93       	push	r28
    1de2:	df 93       	push	r29
    1de4:	ec 01       	movw	r28, r24
    1de6:	7b 01       	movw	r14, r22
    1de8:	6a 01       	movw	r12, r20
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	uint16_t BytesInTransfer = 0;
	uint8_t  ErrorCode;

	if ((ErrorCode = Endpoint_WaitUntilReady()))
    1dea:	51 d2       	rcall	.+1186   	; 0x228e <Endpoint_WaitUntilReady>
    1dec:	18 2f       	mov	r17, r24
    1dee:	88 23       	and	r24, r24
    1df0:	a9 f5       	brne	.+106    	; 0x1e5c <Endpoint_Write_Stream_LE+0x8a>
    1df2:	c1 14       	cp	r12, r1
	  return ErrorCode;

	if (BytesProcessed != NULL)
    1df4:	d1 04       	cpc	r13, r1
    1df6:	39 f0       	breq	.+14     	; 0x1e06 <Endpoint_Write_Stream_LE+0x34>
    1df8:	f6 01       	movw	r30, r12
	{
		Length -= *BytesProcessed;
    1dfa:	20 81       	ld	r18, Z
    1dfc:	31 81       	ldd	r19, Z+1	; 0x01
    1dfe:	e2 1a       	sub	r14, r18
    1e00:	f3 0a       	sbc	r15, r19
    1e02:	c2 0f       	add	r28, r18
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
    1e04:	d3 1f       	adc	r29, r19
    1e06:	aa 24       	eor	r10, r10

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
    1e08:	bb 24       	eor	r11, r11
    1e0a:	23 c0       	rjmp	.+70     	; 0x1e52 <Endpoint_Write_Stream_LE+0x80>
    1e0c:	80 91 e8 00 	lds	r24, 0x00E8
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    1e10:	85 fd       	sbrc	r24, 5
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
	{
		if (!(Endpoint_IsReadWriteAllowed()))
    1e12:	16 c0       	rjmp	.+44     	; 0x1e40 <Endpoint_Write_Stream_LE+0x6e>
    1e14:	80 91 e8 00 	lds	r24, 0x00E8
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1e18:	8e 77       	andi	r24, 0x7E	; 126
    1e1a:	80 93 e8 00 	sts	0x00E8, r24
    1e1e:	59 d4       	rcall	.+2226   	; 0x26d2 <USB_USBTask>
		{
			TEMPLATE_CLEAR_ENDPOINT();

			#if !defined(INTERRUPT_CONTROL_ENDPOINT)
			USB_USBTask();
    1e20:	c1 14       	cp	r12, r1
    1e22:	d1 04       	cpc	r13, r1
			#endif

			if (BytesProcessed != NULL)
    1e24:	49 f0       	breq	.+18     	; 0x1e38 <Endpoint_Write_Stream_LE+0x66>
    1e26:	f6 01       	movw	r30, r12
    1e28:	80 81       	ld	r24, Z
			{
				*BytesProcessed += BytesInTransfer;
    1e2a:	91 81       	ldd	r25, Z+1	; 0x01
    1e2c:	8a 0d       	add	r24, r10
    1e2e:	9b 1d       	adc	r25, r11
    1e30:	91 83       	std	Z+1, r25	; 0x01
    1e32:	80 83       	st	Z, r24
    1e34:	15 e0       	ldi	r17, 0x05	; 5
    1e36:	12 c0       	rjmp	.+36     	; 0x1e5c <Endpoint_Write_Stream_LE+0x8a>
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
    1e38:	2a d2       	rcall	.+1108   	; 0x228e <Endpoint_WaitUntilReady>
    1e3a:	88 23       	and	r24, r24
			}

			if ((ErrorCode = Endpoint_WaitUntilReady()))
    1e3c:	51 f0       	breq	.+20     	; 0x1e52 <Endpoint_Write_Stream_LE+0x80>
    1e3e:	0d c0       	rjmp	.+26     	; 0x1e5a <Endpoint_Write_Stream_LE+0x88>
    1e40:	89 91       	ld	r24, Y+
    1e42:	80 93 f1 00 	sts	0x00F1, r24
			  return ErrorCode;
		}
		else
		{
			TEMPLATE_TRANSFER_BYTE(DataStream);
    1e46:	08 94       	sec
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    1e48:	e1 08       	sbc	r14, r1
    1e4a:	f1 08       	sbc	r15, r1
			TEMPLATE_BUFFER_MOVE(DataStream, 1);
			Length--;
    1e4c:	08 94       	sec
    1e4e:	a1 1c       	adc	r10, r1
    1e50:	b1 1c       	adc	r11, r1
			BytesInTransfer++;
    1e52:	e1 14       	cp	r14, r1
    1e54:	f1 04       	cpc	r15, r1
    1e56:	d1 f6       	brne	.-76     	; 0x1e0c <Endpoint_Write_Stream_LE+0x3a>
	{
		Length -= *BytesProcessed;
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
    1e58:	01 c0       	rjmp	.+2      	; 0x1e5c <Endpoint_Write_Stream_LE+0x8a>
    1e5a:	18 2f       	mov	r17, r24
    1e5c:	81 2f       	mov	r24, r17
    1e5e:	df 91       	pop	r29
			{
				*BytesProcessed += BytesInTransfer;
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
			}

			if ((ErrorCode = Endpoint_WaitUntilReady()))
    1e60:	cf 91       	pop	r28
			BytesInTransfer++;
		}
	}

	return ENDPOINT_RWSTREAM_NoError;
}
    1e62:	1f 91       	pop	r17
    1e64:	ff 90       	pop	r15
    1e66:	ef 90       	pop	r14
    1e68:	df 90       	pop	r13
    1e6a:	cf 90       	pop	r12
    1e6c:	bf 90       	pop	r11
    1e6e:	af 90       	pop	r10
    1e70:	08 95       	ret

00001e72 <Endpoint_Read_Stream_LE>:
    1e72:	af 92       	push	r10
    1e74:	bf 92       	push	r11
    1e76:	cf 92       	push	r12
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
    1e78:	df 92       	push	r13
    1e7a:	ef 92       	push	r14
    1e7c:	ff 92       	push	r15
    1e7e:	1f 93       	push	r17
    1e80:	cf 93       	push	r28
    1e82:	df 93       	push	r29
    1e84:	ec 01       	movw	r28, r24
    1e86:	7b 01       	movw	r14, r22
    1e88:	6a 01       	movw	r12, r20
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	uint16_t BytesInTransfer = 0;
	uint8_t  ErrorCode;

	if ((ErrorCode = Endpoint_WaitUntilReady()))
    1e8a:	01 d2       	rcall	.+1026   	; 0x228e <Endpoint_WaitUntilReady>
    1e8c:	18 2f       	mov	r17, r24
    1e8e:	88 23       	and	r24, r24
    1e90:	a9 f5       	brne	.+106    	; 0x1efc <Endpoint_Read_Stream_LE+0x8a>
    1e92:	c1 14       	cp	r12, r1
	  return ErrorCode;

	if (BytesProcessed != NULL)
    1e94:	d1 04       	cpc	r13, r1
    1e96:	39 f0       	breq	.+14     	; 0x1ea6 <Endpoint_Read_Stream_LE+0x34>
    1e98:	f6 01       	movw	r30, r12
	{
		Length -= *BytesProcessed;
    1e9a:	20 81       	ld	r18, Z
    1e9c:	31 81       	ldd	r19, Z+1	; 0x01
    1e9e:	e2 1a       	sub	r14, r18
    1ea0:	f3 0a       	sbc	r15, r19
    1ea2:	c2 0f       	add	r28, r18
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
    1ea4:	d3 1f       	adc	r29, r19
    1ea6:	aa 24       	eor	r10, r10

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
    1ea8:	bb 24       	eor	r11, r11
    1eaa:	23 c0       	rjmp	.+70     	; 0x1ef2 <Endpoint_Read_Stream_LE+0x80>
    1eac:	80 91 e8 00 	lds	r24, 0x00E8
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    1eb0:	85 fd       	sbrc	r24, 5
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
	{
		if (!(Endpoint_IsReadWriteAllowed()))
    1eb2:	16 c0       	rjmp	.+44     	; 0x1ee0 <Endpoint_Read_Stream_LE+0x6e>
    1eb4:	80 91 e8 00 	lds	r24, 0x00E8
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    1eb8:	8b 77       	andi	r24, 0x7B	; 123
    1eba:	80 93 e8 00 	sts	0x00E8, r24
    1ebe:	09 d4       	rcall	.+2066   	; 0x26d2 <USB_USBTask>
		{
			TEMPLATE_CLEAR_ENDPOINT();

			#if !defined(INTERRUPT_CONTROL_ENDPOINT)
			USB_USBTask();
    1ec0:	c1 14       	cp	r12, r1
    1ec2:	d1 04       	cpc	r13, r1
			#endif

			if (BytesProcessed != NULL)
    1ec4:	49 f0       	breq	.+18     	; 0x1ed8 <Endpoint_Read_Stream_LE+0x66>
    1ec6:	f6 01       	movw	r30, r12
    1ec8:	80 81       	ld	r24, Z
			{
				*BytesProcessed += BytesInTransfer;
    1eca:	91 81       	ldd	r25, Z+1	; 0x01
    1ecc:	8a 0d       	add	r24, r10
    1ece:	9b 1d       	adc	r25, r11
    1ed0:	91 83       	std	Z+1, r25	; 0x01
    1ed2:	80 83       	st	Z, r24
    1ed4:	15 e0       	ldi	r17, 0x05	; 5
    1ed6:	12 c0       	rjmp	.+36     	; 0x1efc <Endpoint_Read_Stream_LE+0x8a>
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
    1ed8:	da d1       	rcall	.+948    	; 0x228e <Endpoint_WaitUntilReady>
    1eda:	88 23       	and	r24, r24
			}

			if ((ErrorCode = Endpoint_WaitUntilReady()))
    1edc:	51 f0       	breq	.+20     	; 0x1ef2 <Endpoint_Read_Stream_LE+0x80>
    1ede:	0d c0       	rjmp	.+26     	; 0x1efa <Endpoint_Read_Stream_LE+0x88>
    1ee0:	80 91 f1 00 	lds	r24, 0x00F1
    1ee4:	89 93       	st	Y+, r24
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    1ee6:	08 94       	sec
    1ee8:	e1 08       	sbc	r14, r1
			  return ErrorCode;
		}
		else
		{
			TEMPLATE_TRANSFER_BYTE(DataStream);
    1eea:	f1 08       	sbc	r15, r1
			TEMPLATE_BUFFER_MOVE(DataStream, 1);
			Length--;
    1eec:	08 94       	sec
    1eee:	a1 1c       	adc	r10, r1
    1ef0:	b1 1c       	adc	r11, r1
			BytesInTransfer++;
    1ef2:	e1 14       	cp	r14, r1
    1ef4:	f1 04       	cpc	r15, r1
    1ef6:	d1 f6       	brne	.-76     	; 0x1eac <Endpoint_Read_Stream_LE+0x3a>
	{
		Length -= *BytesProcessed;
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
    1ef8:	01 c0       	rjmp	.+2      	; 0x1efc <Endpoint_Read_Stream_LE+0x8a>
    1efa:	18 2f       	mov	r17, r24
    1efc:	81 2f       	mov	r24, r17
    1efe:	df 91       	pop	r29
			{
				*BytesProcessed += BytesInTransfer;
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
			}

			if ((ErrorCode = Endpoint_WaitUntilReady()))
    1f00:	cf 91       	pop	r28
			BytesInTransfer++;
		}
	}

	return ENDPOINT_RWSTREAM_NoError;
}
    1f02:	1f 91       	pop	r17
    1f04:	ff 90       	pop	r15
    1f06:	ef 90       	pop	r14
    1f08:	df 90       	pop	r13
    1f0a:	cf 90       	pop	r12
    1f0c:	bf 90       	pop	r11
    1f0e:	af 90       	pop	r10
    1f10:	08 95       	ret

00001f12 <Endpoint_Read_Stream_BE>:
    1f12:	af 92       	push	r10
    1f14:	bf 92       	push	r11
    1f16:	df 92       	push	r13
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
    1f18:	ef 92       	push	r14
    1f1a:	ff 92       	push	r15
    1f1c:	0f 93       	push	r16
    1f1e:	1f 93       	push	r17
    1f20:	cf 93       	push	r28
    1f22:	df 93       	push	r29
    1f24:	ec 01       	movw	r28, r24
    1f26:	7b 01       	movw	r14, r22
    1f28:	5a 01       	movw	r10, r20
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	uint16_t BytesInTransfer = 0;
	uint8_t  ErrorCode;

	if ((ErrorCode = Endpoint_WaitUntilReady()))
    1f2a:	b1 d1       	rcall	.+866    	; 0x228e <Endpoint_WaitUntilReady>
    1f2c:	d8 2e       	mov	r13, r24
    1f2e:	88 23       	and	r24, r24
    1f30:	e1 f5       	brne	.+120    	; 0x1faa <Endpoint_Read_Stream_BE+0x98>
    1f32:	87 01       	movw	r16, r14

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
    1f34:	01 50       	subi	r16, 0x01	; 1
    1f36:	10 40       	sbci	r17, 0x00	; 0
    1f38:	0c 0f       	add	r16, r28
    1f3a:	1d 1f       	adc	r17, r29
    1f3c:	a1 14       	cp	r10, r1
	uint8_t  ErrorCode;

	if ((ErrorCode = Endpoint_WaitUntilReady()))
	  return ErrorCode;

	if (BytesProcessed != NULL)
    1f3e:	b1 04       	cpc	r11, r1
    1f40:	39 f0       	breq	.+14     	; 0x1f50 <Endpoint_Read_Stream_BE+0x3e>
    1f42:	f5 01       	movw	r30, r10
	{
		Length -= *BytesProcessed;
    1f44:	80 81       	ld	r24, Z
    1f46:	91 81       	ldd	r25, Z+1	; 0x01
    1f48:	e8 1a       	sub	r14, r24
    1f4a:	f9 0a       	sbc	r15, r25
    1f4c:	08 1b       	sub	r16, r24
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
    1f4e:	19 0b       	sbc	r17, r25
    1f50:	c0 e0       	ldi	r28, 0x00	; 0
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
    1f52:	d0 e0       	ldi	r29, 0x00	; 0
    1f54:	25 c0       	rjmp	.+74     	; 0x1fa0 <Endpoint_Read_Stream_BE+0x8e>
    1f56:	80 91 e8 00 	lds	r24, 0x00E8
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    1f5a:	85 fd       	sbrc	r24, 5
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
	{
		if (!(Endpoint_IsReadWriteAllowed()))
    1f5c:	17 c0       	rjmp	.+46     	; 0x1f8c <Endpoint_Read_Stream_BE+0x7a>
    1f5e:	80 91 e8 00 	lds	r24, 0x00E8
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    1f62:	8b 77       	andi	r24, 0x7B	; 123
    1f64:	80 93 e8 00 	sts	0x00E8, r24
    1f68:	b4 d3       	rcall	.+1896   	; 0x26d2 <USB_USBTask>
		{
			TEMPLATE_CLEAR_ENDPOINT();

			#if !defined(INTERRUPT_CONTROL_ENDPOINT)
			USB_USBTask();
    1f6a:	a1 14       	cp	r10, r1
    1f6c:	b1 04       	cpc	r11, r1
			#endif

			if (BytesProcessed != NULL)
    1f6e:	51 f0       	breq	.+20     	; 0x1f84 <Endpoint_Read_Stream_BE+0x72>
    1f70:	f5 01       	movw	r30, r10
    1f72:	80 81       	ld	r24, Z
			{
				*BytesProcessed += BytesInTransfer;
    1f74:	91 81       	ldd	r25, Z+1	; 0x01
    1f76:	8c 0f       	add	r24, r28
    1f78:	9d 1f       	adc	r25, r29
    1f7a:	91 83       	std	Z+1, r25	; 0x01
    1f7c:	80 83       	st	Z, r24
    1f7e:	55 e0       	ldi	r21, 0x05	; 5
    1f80:	d5 2e       	mov	r13, r21
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
    1f82:	13 c0       	rjmp	.+38     	; 0x1faa <Endpoint_Read_Stream_BE+0x98>
    1f84:	84 d1       	rcall	.+776    	; 0x228e <Endpoint_WaitUntilReady>
    1f86:	88 23       	and	r24, r24
			}

			if ((ErrorCode = Endpoint_WaitUntilReady()))
    1f88:	59 f0       	breq	.+22     	; 0x1fa0 <Endpoint_Read_Stream_BE+0x8e>
    1f8a:	0e c0       	rjmp	.+28     	; 0x1fa8 <Endpoint_Read_Stream_BE+0x96>
    1f8c:	80 91 f1 00 	lds	r24, 0x00F1
    1f90:	f8 01       	movw	r30, r16
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    1f92:	80 83       	st	Z, r24
    1f94:	01 50       	subi	r16, 0x01	; 1
			  return ErrorCode;
		}
		else
		{
			TEMPLATE_TRANSFER_BYTE(DataStream);
    1f96:	10 40       	sbci	r17, 0x00	; 0
    1f98:	08 94       	sec
			TEMPLATE_BUFFER_MOVE(DataStream, 1);
    1f9a:	e1 08       	sbc	r14, r1
    1f9c:	f1 08       	sbc	r15, r1
			Length--;
    1f9e:	21 96       	adiw	r28, 0x01	; 1
    1fa0:	e1 14       	cp	r14, r1
    1fa2:	f1 04       	cpc	r15, r1
			BytesInTransfer++;
    1fa4:	c1 f6       	brne	.-80     	; 0x1f56 <Endpoint_Read_Stream_BE+0x44>
	{
		Length -= *BytesProcessed;
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
    1fa6:	01 c0       	rjmp	.+2      	; 0x1faa <Endpoint_Read_Stream_BE+0x98>
    1fa8:	d8 2e       	mov	r13, r24
    1faa:	8d 2d       	mov	r24, r13
    1fac:	df 91       	pop	r29
			{
				*BytesProcessed += BytesInTransfer;
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
			}

			if ((ErrorCode = Endpoint_WaitUntilReady()))
    1fae:	cf 91       	pop	r28
			BytesInTransfer++;
		}
	}

	return ENDPOINT_RWSTREAM_NoError;
}
    1fb0:	1f 91       	pop	r17
    1fb2:	0f 91       	pop	r16
    1fb4:	ff 90       	pop	r15
    1fb6:	ef 90       	pop	r14
    1fb8:	df 90       	pop	r13
    1fba:	bf 90       	pop	r11
    1fbc:	af 90       	pop	r10
    1fbe:	08 95       	ret

00001fc0 <Endpoint_Write_Control_Stream_LE>:
    1fc0:	20 91 b3 01 	lds	r18, 0x01B3
    1fc4:	30 91 b4 01 	lds	r19, 0x01B4
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
    1fc8:	26 17       	cp	r18, r22
    1fca:	37 07       	cpc	r19, r23
    1fcc:	28 f4       	brcc	.+10     	; 0x1fd8 <Endpoint_Write_Control_Stream_LE+0x18>
    1fce:	b9 01       	movw	r22, r18

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
    1fd0:	58 2f       	mov	r21, r24
    1fd2:	49 2f       	mov	r20, r25
    1fd4:	20 e0       	ldi	r18, 0x00	; 0
    1fd6:	3e c0       	rjmp	.+124    	; 0x2054 <Endpoint_Write_Control_Stream_LE+0x94>
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
    1fd8:	61 15       	cp	r22, r1
    1fda:	71 05       	cpc	r23, r1
    1fdc:	c9 f7       	brne	.-14     	; 0x1fd0 <Endpoint_Write_Control_Stream_LE+0x10>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1fde:	20 91 e8 00 	lds	r18, 0x00E8
    1fe2:	2e 77       	andi	r18, 0x7E	; 126
    1fe4:	20 93 e8 00 	sts	0x00E8, r18
    1fe8:	f3 cf       	rjmp	.-26     	; 0x1fd0 <Endpoint_Write_Control_Stream_LE+0x10>
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    1fea:	8e b3       	in	r24, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    1fec:	88 23       	and	r24, r24
    1fee:	09 f4       	brne	.+2      	; 0x1ff2 <Endpoint_Write_Control_Stream_LE+0x32>
    1ff0:	46 c0       	rjmp	.+140    	; 0x207e <Endpoint_Write_Control_Stream_LE+0xbe>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    1ff2:	85 30       	cpi	r24, 0x05	; 5
    1ff4:	09 f4       	brne	.+2      	; 0x1ff8 <Endpoint_Write_Control_Stream_LE+0x38>
    1ff6:	3f c0       	rjmp	.+126    	; 0x2076 <Endpoint_Write_Control_Stream_LE+0xb6>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    1ff8:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    1ffc:	83 fd       	sbrc	r24, 3
    1ffe:	3d c0       	rjmp	.+122    	; 0x207a <Endpoint_Write_Control_Stream_LE+0xba>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    2000:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
    2004:	82 fd       	sbrc	r24, 2
    2006:	31 c0       	rjmp	.+98     	; 0x206a <Endpoint_Write_Control_Stream_LE+0xaa>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    2008:	80 91 e8 00 	lds	r24, 0x00E8
		  break;

		if (Endpoint_IsINReady())
    200c:	80 ff       	sbrs	r24, 0
    200e:	22 c0       	rjmp	.+68     	; 0x2054 <Endpoint_Write_Control_Stream_LE+0x94>
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
				#elif defined(USB_SERIES_2_AVR)
					return UEBCLX;
    2010:	20 91 f2 00 	lds	r18, 0x00F2
    2014:	30 e0       	ldi	r19, 0x00	; 0
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
    2016:	e5 2f       	mov	r30, r21
    2018:	f4 2f       	mov	r31, r20
  this software.
*/

#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
    201a:	2e 1b       	sub	r18, r30
    201c:	3f 0b       	sbc	r19, r31

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
    201e:	05 c0       	rjmp	.+10     	; 0x202a <Endpoint_Write_Control_Stream_LE+0x6a>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
    2020:	81 91       	ld	r24, Z+
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    2022:	80 93 f1 00 	sts	0x00F1, r24
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
    2026:	61 50       	subi	r22, 0x01	; 1
    2028:	70 40       	sbci	r23, 0x00	; 0
  this software.
*/

#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
    202a:	cf 01       	movw	r24, r30
    202c:	82 0f       	add	r24, r18
    202e:	93 1f       	adc	r25, r19

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
    2030:	61 15       	cp	r22, r1
    2032:	71 05       	cpc	r23, r1
    2034:	19 f0       	breq	.+6      	; 0x203c <Endpoint_Write_Control_Stream_LE+0x7c>
    2036:	80 31       	cpi	r24, 0x10	; 16
    2038:	91 05       	cpc	r25, r1
    203a:	90 f3       	brcs	.-28     	; 0x2020 <Endpoint_Write_Control_Stream_LE+0x60>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
    203c:	21 e0       	ldi	r18, 0x01	; 1
    203e:	80 31       	cpi	r24, 0x10	; 16
    2040:	91 05       	cpc	r25, r1
    2042:	09 f0       	breq	.+2      	; 0x2046 <Endpoint_Write_Control_Stream_LE+0x86>
    2044:	20 e0       	ldi	r18, 0x00	; 0
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    2046:	80 91 e8 00 	lds	r24, 0x00E8
    204a:	8e 77       	andi	r24, 0x7E	; 126
    204c:	80 93 e8 00 	sts	0x00E8, r24
    2050:	5e 2f       	mov	r21, r30
    2052:	4f 2f       	mov	r20, r31
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
    2054:	61 15       	cp	r22, r1
    2056:	71 05       	cpc	r23, r1
    2058:	41 f6       	brne	.-112    	; 0x1fea <Endpoint_Write_Control_Stream_LE+0x2a>
    205a:	22 23       	and	r18, r18
    205c:	31 f6       	brne	.-116    	; 0x1fea <Endpoint_Write_Control_Stream_LE+0x2a>
    205e:	05 c0       	rjmp	.+10     	; 0x206a <Endpoint_Write_Control_Stream_LE+0xaa>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    2060:	8e b3       	in	r24, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    2062:	88 23       	and	r24, r24
    2064:	61 f0       	breq	.+24     	; 0x207e <Endpoint_Write_Control_Stream_LE+0xbe>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    2066:	85 30       	cpi	r24, 0x05	; 5
    2068:	61 f0       	breq	.+24     	; 0x2082 <Endpoint_Write_Control_Stream_LE+0xc2>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    206a:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
    206e:	82 ff       	sbrs	r24, 2
    2070:	f7 cf       	rjmp	.-18     	; 0x2060 <Endpoint_Write_Control_Stream_LE+0xa0>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
    2072:	80 e0       	ldi	r24, 0x00	; 0
    2074:	08 95       	ret
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
    2076:	83 e0       	ldi	r24, 0x03	; 3
    2078:	08 95       	ret
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
    207a:	81 e0       	ldi	r24, 0x01	; 1
    207c:	08 95       	ret
	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
    207e:	82 e0       	ldi	r24, 0x02	; 2
    2080:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
    2082:	83 e0       	ldi	r24, 0x03	; 3
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
    2084:	08 95       	ret

00002086 <Endpoint_Write_Control_PStream_LE>:
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
    2086:	20 91 b3 01 	lds	r18, 0x01B3
    208a:	30 91 b4 01 	lds	r19, 0x01B4
    208e:	26 17       	cp	r18, r22
    2090:	37 07       	cpc	r19, r23
    2092:	28 f4       	brcc	.+10     	; 0x209e <Endpoint_Write_Control_PStream_LE+0x18>
    2094:	b9 01       	movw	r22, r18

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
    2096:	58 2f       	mov	r21, r24
    2098:	49 2f       	mov	r20, r25
    209a:	20 e0       	ldi	r18, 0x00	; 0
    209c:	3f c0       	rjmp	.+126    	; 0x211c <Endpoint_Write_Control_PStream_LE+0x96>
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
    209e:	61 15       	cp	r22, r1
    20a0:	71 05       	cpc	r23, r1
    20a2:	c9 f7       	brne	.-14     	; 0x2096 <Endpoint_Write_Control_PStream_LE+0x10>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    20a4:	20 91 e8 00 	lds	r18, 0x00E8
    20a8:	2e 77       	andi	r18, 0x7E	; 126
    20aa:	20 93 e8 00 	sts	0x00E8, r18
    20ae:	f3 cf       	rjmp	.-26     	; 0x2096 <Endpoint_Write_Control_PStream_LE+0x10>
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    20b0:	8e b3       	in	r24, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    20b2:	88 23       	and	r24, r24
    20b4:	09 f4       	brne	.+2      	; 0x20b8 <Endpoint_Write_Control_PStream_LE+0x32>
    20b6:	47 c0       	rjmp	.+142    	; 0x2146 <Endpoint_Write_Control_PStream_LE+0xc0>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    20b8:	85 30       	cpi	r24, 0x05	; 5
    20ba:	09 f4       	brne	.+2      	; 0x20be <Endpoint_Write_Control_PStream_LE+0x38>
    20bc:	40 c0       	rjmp	.+128    	; 0x213e <Endpoint_Write_Control_PStream_LE+0xb8>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    20be:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    20c2:	83 fd       	sbrc	r24, 3
    20c4:	3e c0       	rjmp	.+124    	; 0x2142 <Endpoint_Write_Control_PStream_LE+0xbc>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    20c6:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
    20ca:	82 fd       	sbrc	r24, 2
    20cc:	32 c0       	rjmp	.+100    	; 0x2132 <Endpoint_Write_Control_PStream_LE+0xac>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    20ce:	80 91 e8 00 	lds	r24, 0x00E8
		  break;

		if (Endpoint_IsINReady())
    20d2:	80 ff       	sbrs	r24, 0
    20d4:	23 c0       	rjmp	.+70     	; 0x211c <Endpoint_Write_Control_PStream_LE+0x96>
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
				#elif defined(USB_SERIES_2_AVR)
					return UEBCLX;
    20d6:	20 91 f2 00 	lds	r18, 0x00F2
    20da:	30 e0       	ldi	r19, 0x00	; 0
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
    20dc:	e5 2f       	mov	r30, r21
    20de:	f4 2f       	mov	r31, r20
  this software.
*/

#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
    20e0:	2e 1b       	sub	r18, r30
    20e2:	3f 0b       	sbc	r19, r31

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
    20e4:	06 c0       	rjmp	.+12     	; 0x20f2 <Endpoint_Write_Control_PStream_LE+0x6c>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
    20e6:	84 91       	lpm	r24, Z
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    20e8:	80 93 f1 00 	sts	0x00F1, r24
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
    20ec:	31 96       	adiw	r30, 0x01	; 1
				Length--;
    20ee:	61 50       	subi	r22, 0x01	; 1
    20f0:	70 40       	sbci	r23, 0x00	; 0
  this software.
*/

#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
    20f2:	c9 01       	movw	r24, r18
    20f4:	8e 0f       	add	r24, r30
    20f6:	9f 1f       	adc	r25, r31

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
    20f8:	61 15       	cp	r22, r1
    20fa:	71 05       	cpc	r23, r1
    20fc:	19 f0       	breq	.+6      	; 0x2104 <Endpoint_Write_Control_PStream_LE+0x7e>
    20fe:	80 31       	cpi	r24, 0x10	; 16
    2100:	91 05       	cpc	r25, r1
    2102:	88 f3       	brcs	.-30     	; 0x20e6 <Endpoint_Write_Control_PStream_LE+0x60>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
    2104:	21 e0       	ldi	r18, 0x01	; 1
    2106:	80 31       	cpi	r24, 0x10	; 16
    2108:	91 05       	cpc	r25, r1
    210a:	09 f0       	breq	.+2      	; 0x210e <Endpoint_Write_Control_PStream_LE+0x88>
    210c:	20 e0       	ldi	r18, 0x00	; 0
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    210e:	80 91 e8 00 	lds	r24, 0x00E8
    2112:	8e 77       	andi	r24, 0x7E	; 126
    2114:	80 93 e8 00 	sts	0x00E8, r24
    2118:	5e 2f       	mov	r21, r30
    211a:	4f 2f       	mov	r20, r31
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
    211c:	61 15       	cp	r22, r1
    211e:	71 05       	cpc	r23, r1
    2120:	39 f6       	brne	.-114    	; 0x20b0 <Endpoint_Write_Control_PStream_LE+0x2a>
    2122:	22 23       	and	r18, r18
    2124:	29 f6       	brne	.-118    	; 0x20b0 <Endpoint_Write_Control_PStream_LE+0x2a>
    2126:	05 c0       	rjmp	.+10     	; 0x2132 <Endpoint_Write_Control_PStream_LE+0xac>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    2128:	8e b3       	in	r24, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    212a:	88 23       	and	r24, r24
    212c:	61 f0       	breq	.+24     	; 0x2146 <Endpoint_Write_Control_PStream_LE+0xc0>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    212e:	85 30       	cpi	r24, 0x05	; 5
    2130:	61 f0       	breq	.+24     	; 0x214a <Endpoint_Write_Control_PStream_LE+0xc4>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    2132:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
    2136:	82 ff       	sbrs	r24, 2
    2138:	f7 cf       	rjmp	.-18     	; 0x2128 <Endpoint_Write_Control_PStream_LE+0xa2>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
    213a:	80 e0       	ldi	r24, 0x00	; 0
    213c:	08 95       	ret
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
    213e:	83 e0       	ldi	r24, 0x03	; 3
    2140:	08 95       	ret
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
    2142:	81 e0       	ldi	r24, 0x01	; 1
    2144:	08 95       	ret
	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
    2146:	82 e0       	ldi	r24, 0x02	; 2
    2148:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
    214a:	83 e0       	ldi	r24, 0x03	; 3
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
    214c:	08 95       	ret

0000214e <Endpoint_Write_Control_EStream_LE>:

#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
                            uint16_t Length)
{
    214e:	ef 92       	push	r14
    2150:	ff 92       	push	r15
    2152:	0f 93       	push	r16
    2154:	1f 93       	push	r17
    2156:	cf 93       	push	r28
    2158:	df 93       	push	r29
    215a:	eb 01       	movw	r28, r22
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
    215c:	20 91 b3 01 	lds	r18, 0x01B3
    2160:	30 91 b4 01 	lds	r19, 0x01B4
    2164:	26 17       	cp	r18, r22
    2166:	37 07       	cpc	r19, r23
    2168:	28 f4       	brcc	.+10     	; 0x2174 <Endpoint_Write_Control_EStream_LE+0x26>
    216a:	e9 01       	movw	r28, r18

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
    216c:	48 2f       	mov	r20, r24
    216e:	39 2f       	mov	r19, r25
    2170:	20 e0       	ldi	r18, 0x00	; 0
    2172:	3e c0       	rjmp	.+124    	; 0x21f0 <Endpoint_Write_Control_EStream_LE+0xa2>
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
    2174:	20 97       	sbiw	r28, 0x00	; 0
    2176:	d1 f7       	brne	.-12     	; 0x216c <Endpoint_Write_Control_EStream_LE+0x1e>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    2178:	20 91 e8 00 	lds	r18, 0x00E8
    217c:	2e 77       	andi	r18, 0x7E	; 126
    217e:	20 93 e8 00 	sts	0x00E8, r18
    2182:	f4 cf       	rjmp	.-24     	; 0x216c <Endpoint_Write_Control_EStream_LE+0x1e>
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    2184:	8e b3       	in	r24, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    2186:	88 23       	and	r24, r24
    2188:	09 f4       	brne	.+2      	; 0x218c <Endpoint_Write_Control_EStream_LE+0x3e>
    218a:	44 c0       	rjmp	.+136    	; 0x2214 <Endpoint_Write_Control_EStream_LE+0xc6>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    218c:	85 30       	cpi	r24, 0x05	; 5
    218e:	09 f4       	brne	.+2      	; 0x2192 <Endpoint_Write_Control_EStream_LE+0x44>
    2190:	43 c0       	rjmp	.+134    	; 0x2218 <Endpoint_Write_Control_EStream_LE+0xca>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    2192:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    2196:	83 fd       	sbrc	r24, 3
    2198:	3b c0       	rjmp	.+118    	; 0x2210 <Endpoint_Write_Control_EStream_LE+0xc2>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    219a:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
    219e:	82 fd       	sbrc	r24, 2
    21a0:	31 c0       	rjmp	.+98     	; 0x2204 <Endpoint_Write_Control_EStream_LE+0xb6>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    21a2:	80 91 e8 00 	lds	r24, 0x00E8
		  break;

		if (Endpoint_IsINReady())
    21a6:	80 ff       	sbrs	r24, 0
    21a8:	23 c0       	rjmp	.+70     	; 0x21f0 <Endpoint_Write_Control_EStream_LE+0xa2>
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
				#elif defined(USB_SERIES_2_AVR)
					return UEBCLX;
    21aa:	e0 90 f2 00 	lds	r14, 0x00F2
    21ae:	ff 24       	eor	r15, r15
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
    21b0:	04 2f       	mov	r16, r20
    21b2:	13 2f       	mov	r17, r19
  this software.
*/

#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
    21b4:	e0 1a       	sub	r14, r16
    21b6:	f1 0a       	sbc	r15, r17

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
    21b8:	07 c0       	rjmp	.+14     	; 0x21c8 <Endpoint_Write_Control_EStream_LE+0x7a>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
    21ba:	c8 01       	movw	r24, r16
    21bc:	a5 d2       	rcall	.+1354   	; 0x2708 <__eerd_byte_usb162>
    21be:	80 93 f1 00 	sts	0x00F1, r24
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    21c2:	0f 5f       	subi	r16, 0xFF	; 255
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
    21c4:	1f 4f       	sbci	r17, 0xFF	; 255
    21c6:	21 97       	sbiw	r28, 0x01	; 1
				Length--;
    21c8:	c8 01       	movw	r24, r16
  this software.
*/

#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
    21ca:	8e 0d       	add	r24, r14
    21cc:	9f 1d       	adc	r25, r15
    21ce:	20 97       	sbiw	r28, 0x00	; 0

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
    21d0:	19 f0       	breq	.+6      	; 0x21d8 <Endpoint_Write_Control_EStream_LE+0x8a>
    21d2:	80 31       	cpi	r24, 0x10	; 16
    21d4:	91 05       	cpc	r25, r1
    21d6:	88 f3       	brcs	.-30     	; 0x21ba <Endpoint_Write_Control_EStream_LE+0x6c>
    21d8:	21 e0       	ldi	r18, 0x01	; 1
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
    21da:	80 31       	cpi	r24, 0x10	; 16
    21dc:	91 05       	cpc	r25, r1
    21de:	09 f0       	breq	.+2      	; 0x21e2 <Endpoint_Write_Control_EStream_LE+0x94>
    21e0:	20 e0       	ldi	r18, 0x00	; 0
    21e2:	80 91 e8 00 	lds	r24, 0x00E8
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    21e6:	8e 77       	andi	r24, 0x7E	; 126
    21e8:	80 93 e8 00 	sts	0x00E8, r24
    21ec:	40 2f       	mov	r20, r16
    21ee:	31 2f       	mov	r19, r17
    21f0:	20 97       	sbiw	r28, 0x00	; 0
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
    21f2:	41 f6       	brne	.-112    	; 0x2184 <Endpoint_Write_Control_EStream_LE+0x36>
    21f4:	22 23       	and	r18, r18
    21f6:	31 f6       	brne	.-116    	; 0x2184 <Endpoint_Write_Control_EStream_LE+0x36>
    21f8:	05 c0       	rjmp	.+10     	; 0x2204 <Endpoint_Write_Control_EStream_LE+0xb6>
    21fa:	8e b3       	in	r24, 0x1e	; 30
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    21fc:	88 23       	and	r24, r24

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    21fe:	51 f0       	breq	.+20     	; 0x2214 <Endpoint_Write_Control_EStream_LE+0xc6>
    2200:	85 30       	cpi	r24, 0x05	; 5
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    2202:	51 f0       	breq	.+20     	; 0x2218 <Endpoint_Write_Control_EStream_LE+0xca>
    2204:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    2208:	82 ff       	sbrs	r24, 2
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
    220a:	f7 cf       	rjmp	.-18     	; 0x21fa <Endpoint_Write_Control_EStream_LE+0xac>
    220c:	80 e0       	ldi	r24, 0x00	; 0
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
    220e:	05 c0       	rjmp	.+10     	; 0x221a <Endpoint_Write_Control_EStream_LE+0xcc>
    2210:	81 e0       	ldi	r24, 0x01	; 1
		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
    2212:	03 c0       	rjmp	.+6      	; 0x221a <Endpoint_Write_Control_EStream_LE+0xcc>
    2214:	82 e0       	ldi	r24, 0x02	; 2
	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
    2216:	01 c0       	rjmp	.+2      	; 0x221a <Endpoint_Write_Control_EStream_LE+0xcc>
    2218:	83 e0       	ldi	r24, 0x03	; 3
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
    221a:	df 91       	pop	r29
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
    221c:	cf 91       	pop	r28
    221e:	1f 91       	pop	r17
    2220:	0f 91       	pop	r16
    2222:	ff 90       	pop	r15
    2224:	ef 90       	pop	r14
    2226:	08 95       	ret

00002228 <Endpoint_ConfigureEndpoint_Prv>:
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    2228:	8f 70       	andi	r24, 0x0F	; 15
    222a:	80 93 e9 00 	sts	0x00E9, r24
			 *  \note Endpoints must first be configured properly via \ref Endpoint_ConfigureEndpoint().
			 */
			static inline void Endpoint_EnableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_EnableEndpoint(void)
			{
				UECONX |= (1 << EPEN);
    222e:	eb ee       	ldi	r30, 0xEB	; 235
    2230:	f0 e0       	ldi	r31, 0x00	; 0
    2232:	80 81       	ld	r24, Z
    2234:	81 60       	ori	r24, 0x01	; 1
    2236:	80 83       	st	Z, r24
{
#if defined(CONTROL_ONLY_DEVICE) || defined(ORDERED_EP_CONFIG)
	Endpoint_SelectEndpoint(Number);
	Endpoint_EnableEndpoint();

	UECFG1X = 0;
    2238:	ed ee       	ldi	r30, 0xED	; 237
    223a:	f0 e0       	ldi	r31, 0x00	; 0
    223c:	10 82       	st	Z, r1
	UECFG0X = UECFG0XData;
    223e:	60 93 ec 00 	sts	0x00EC, r22
	UECFG1X = UECFG1XData;
    2242:	40 83       	st	Z, r20
			 *  \return Boolean \c true if the currently selected endpoint has been configured, \c false otherwise.
			 */
			static inline bool Endpoint_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsConfigured(void)
			{
				return ((UESTA0X & (1 << CFGOK)) ? true : false);
    2244:	80 91 ee 00 	lds	r24, 0x00EE
	}

	Endpoint_SelectEndpoint(Number);
	return true;
#endif
}
    2248:	88 1f       	adc	r24, r24
    224a:	88 27       	eor	r24, r24
    224c:	88 1f       	adc	r24, r24
    224e:	08 95       	ret

00002250 <Endpoint_ClearStatusStage>:
	}
}

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
    2250:	80 91 ad 01 	lds	r24, 0x01AD
    2254:	87 ff       	sbrs	r24, 7
    2256:	11 c0       	rjmp	.+34     	; 0x227a <Endpoint_ClearStatusStage+0x2a>
    2258:	03 c0       	rjmp	.+6      	; 0x2260 <Endpoint_ClearStatusStage+0x10>
	{
		while (!(Endpoint_IsOUTReceived()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
    225a:	8e b3       	in	r24, 0x1e	; 30
    225c:	88 23       	and	r24, r24
    225e:	b1 f0       	breq	.+44     	; 0x228c <Endpoint_ClearStatusStage+0x3c>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    2260:	80 91 e8 00 	lds	r24, 0x00E8

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
	{
		while (!(Endpoint_IsOUTReceived()))
    2264:	82 ff       	sbrs	r24, 2
    2266:	f9 cf       	rjmp	.-14     	; 0x225a <Endpoint_ClearStatusStage+0xa>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    2268:	80 91 e8 00 	lds	r24, 0x00E8
    226c:	8b 77       	andi	r24, 0x7B	; 123
    226e:	80 93 e8 00 	sts	0x00E8, r24
    2272:	08 95       	ret
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
    2274:	8e b3       	in	r24, 0x1e	; 30
    2276:	88 23       	and	r24, r24
    2278:	49 f0       	breq	.+18     	; 0x228c <Endpoint_ClearStatusStage+0x3c>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    227a:	80 91 e8 00 	lds	r24, 0x00E8

		Endpoint_ClearOUT();
	}
	else
	{
		while (!(Endpoint_IsINReady()))
    227e:	80 ff       	sbrs	r24, 0
    2280:	f9 cf       	rjmp	.-14     	; 0x2274 <Endpoint_ClearStatusStage+0x24>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    2282:	80 91 e8 00 	lds	r24, 0x00E8
    2286:	8e 77       	andi	r24, 0x7E	; 126
    2288:	80 93 e8 00 	sts	0x00E8, r24
    228c:	08 95       	ret

0000228e <Endpoint_WaitUntilReady>:
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
    228e:	80 91 e4 00 	lds	r24, 0x00E4
    2292:	90 91 e5 00 	lds	r25, 0x00E5
    2296:	45 e6       	ldi	r20, 0x65	; 101
    2298:	01 c0       	rjmp	.+2      	; 0x229c <Endpoint_WaitUntilReady+0xe>
    229a:	c9 01       	movw	r24, r18
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    229c:	20 91 ec 00 	lds	r18, 0x00EC
    22a0:	20 ff       	sbrs	r18, 0
    22a2:	22 c0       	rjmp	.+68     	; 0x22e8 <Endpoint_WaitUntilReady+0x5a>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    22a4:	20 91 e8 00 	lds	r18, 0x00E8

	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
    22a8:	20 fd       	sbrc	r18, 0
    22aa:	14 c0       	rjmp	.+40     	; 0x22d4 <Endpoint_WaitUntilReady+0x46>
		{
			if (Endpoint_IsOUTReceived())
			  return ENDPOINT_READYWAIT_NoError;
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    22ac:	2e b3       	in	r18, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    22ae:	22 23       	and	r18, r18
    22b0:	99 f0       	breq	.+38     	; 0x22d8 <Endpoint_WaitUntilReady+0x4a>
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    22b2:	25 30       	cpi	r18, 0x05	; 5
    22b4:	99 f0       	breq	.+38     	; 0x22dc <Endpoint_WaitUntilReady+0x4e>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    22b6:	20 91 eb 00 	lds	r18, 0x00EB
		  return ENDPOINT_READYWAIT_BusSuspended;
		else if (Endpoint_IsStalled())
    22ba:	25 fd       	sbrc	r18, 5
    22bc:	11 c0       	rjmp	.+34     	; 0x22e0 <Endpoint_WaitUntilReady+0x52>
    22be:	20 91 e4 00 	lds	r18, 0x00E4
    22c2:	30 91 e5 00 	lds	r19, 0x00E5
		  return ENDPOINT_READYWAIT_EndpointStalled;

		uint16_t CurrentFrameNumber = USB_Device_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
    22c6:	28 17       	cp	r18, r24
    22c8:	39 07       	cpc	r19, r25
    22ca:	41 f3       	breq	.-48     	; 0x229c <Endpoint_WaitUntilReady+0xe>
    22cc:	41 50       	subi	r20, 0x01	; 1
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
    22ce:	29 f7       	brne	.-54     	; 0x229a <Endpoint_WaitUntilReady+0xc>
			  return ENDPOINT_READYWAIT_Timeout;
    22d0:	84 e0       	ldi	r24, 0x04	; 4
    22d2:	08 95       	ret
	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
    22d4:	80 e0       	ldi	r24, 0x00	; 0
    22d6:	08 95       	ret
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
    22d8:	82 e0       	ldi	r24, 0x02	; 2
    22da:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_READYWAIT_BusSuspended;
    22dc:	83 e0       	ldi	r24, 0x03	; 3
    22de:	08 95       	ret
		else if (Endpoint_IsStalled())
		  return ENDPOINT_READYWAIT_EndpointStalled;
    22e0:	81 e0       	ldi	r24, 0x01	; 1
    22e2:	08 95       	ret
			  return ENDPOINT_READYWAIT_NoError;
		}
		else
		{
			if (Endpoint_IsOUTReceived())
			  return ENDPOINT_READYWAIT_NoError;
    22e4:	80 e0       	ldi	r24, 0x00	; 0

			if (!(TimeoutMSRem--))
			  return ENDPOINT_READYWAIT_Timeout;
		}
	}
}
    22e6:	08 95       	ret
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    22e8:	20 91 e8 00 	lds	r18, 0x00E8
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
		}
		else
		{
			if (Endpoint_IsOUTReceived())
    22ec:	22 ff       	sbrs	r18, 2
    22ee:	de cf       	rjmp	.-68     	; 0x22ac <Endpoint_WaitUntilReady+0x1e>
    22f0:	f9 cf       	rjmp	.-14     	; 0x22e4 <Endpoint_WaitUntilReady+0x56>

000022f2 <USB_ResetInterface>:
{
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
    22f2:	3c d0       	rcall	.+120    	; 0x236c <USB_INT_DisableAllInterrupts>
    22f4:	3e d0       	rcall	.+124    	; 0x2372 <USB_INT_ClearAllInterrupts>
	USB_INT_ClearAllInterrupts();
    22f6:	80 91 d8 00 	lds	r24, 0x00D8
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
    22fa:	8f 77       	andi	r24, 0x7F	; 127
    22fc:	80 93 d8 00 	sts	0x00D8, r24
    2300:	80 91 d8 00 	lds	r24, 0x00D8
				USBCON |=  (1 << USBE);
    2304:	80 68       	ori	r24, 0x80	; 128
    2306:	80 93 d8 00 	sts	0x00D8, r24
    230a:	80 91 d8 00 	lds	r24, 0x00D8
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
    230e:	8f 7d       	andi	r24, 0xDF	; 223
    2310:	80 93 d8 00 	sts	0x00D8, r24
    2314:	84 e0       	ldi	r24, 0x04	; 4
    2316:	89 bd       	out	0x29, r24	; 41

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
    2318:	86 e0       	ldi	r24, 0x06	; 6
    231a:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    231c:	09 b4       	in	r0, 0x29	; 41
    231e:	00 fe       	sbrs	r0, 0

		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			#if defined(USB_SERIES_2_AVR)
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
    2320:	fd cf       	rjmp	.-6      	; 0x231c <USB_ResetInterface+0x2a>
    2322:	1e ba       	out	0x1e, r1	; 30
    2324:	10 92 ab 01 	sts	0x01AB, r1

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState                 = DEVICE_STATE_Unattached;
	USB_Device_ConfigurationNumber  = 0;
    2328:	80 e0       	ldi	r24, 0x00	; 0
    232a:	60 e0       	ldi	r22, 0x00	; 0
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
    232c:	42 e1       	ldi	r20, 0x12	; 18
    232e:	7c df       	rcall	.-264    	; 0x2228 <Endpoint_ConfigureEndpoint_Prv>
    2330:	80 91 e1 00 	lds	r24, 0x00E1
    2334:	8e 7f       	andi	r24, 0xFE	; 254
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
    2336:	80 93 e1 00 	sts	0x00E1, r24
    233a:	80 91 e2 00 	lds	r24, 0x00E2
    233e:	81 60       	ori	r24, 0x01	; 1
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
    2340:	80 93 e2 00 	sts	0x00E2, r24
    2344:	80 91 e2 00 	lds	r24, 0x00E2
    2348:	88 60       	ori	r24, 0x08	; 8
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
    234a:	80 93 e2 00 	sts	0x00E2, r24
    234e:	80 91 e0 00 	lds	r24, 0x00E0
    2352:	8e 7f       	andi	r24, 0xFE	; 254
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
    2354:	80 93 e0 00 	sts	0x00E0, r24
    2358:	08 95       	ret

0000235a <USB_Init>:
    235a:	e3 e6       	ldi	r30, 0x63	; 99
    235c:	f0 e0       	ldi	r31, 0x00	; 0
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
    235e:	80 81       	ld	r24, Z
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON |=  (1 << UVREGE);
			#else
				REGCR  &= ~(1 << REGDIS);
    2360:	8e 7f       	andi	r24, 0xFE	; 254
    2362:	80 83       	st	Z, r24
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
    2364:	81 e0       	ldi	r24, 0x01	; 1
    2366:	80 93 ac 01 	sts	0x01AC, r24

	USB_ResetInterface();
    236a:	c3 cf       	rjmp	.-122    	; 0x22f2 <USB_ResetInterface>

0000236c <USB_INT_DisableAllInterrupts>:
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
    236c:	10 92 e2 00 	sts	0x00E2, r1
	#endif
}
    2370:	08 95       	ret

00002372 <USB_INT_ClearAllInterrupts>:
	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
    2372:	10 92 e1 00 	sts	0x00E1, r1
	#endif
}
    2376:	08 95       	ret

00002378 <__vector_11>:

ISR(USB_GEN_vect, ISR_BLOCK)
{
    2378:	1f 92       	push	r1
    237a:	0f 92       	push	r0
    237c:	0f b6       	in	r0, 0x3f	; 63
    237e:	0f 92       	push	r0
    2380:	11 24       	eor	r1, r1
    2382:	2f 93       	push	r18
    2384:	3f 93       	push	r19
    2386:	4f 93       	push	r20
    2388:	5f 93       	push	r21
    238a:	6f 93       	push	r22
    238c:	7f 93       	push	r23
    238e:	8f 93       	push	r24
    2390:	9f 93       	push	r25
    2392:	af 93       	push	r26
    2394:	bf 93       	push	r27
    2396:	ef 93       	push	r30
    2398:	ff 93       	push	r31
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
    239a:	80 91 e1 00 	lds	r24, 0x00E1
			EVENT_USB_Device_Disconnect();
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
    239e:	80 ff       	sbrs	r24, 0
    23a0:	17 c0       	rjmp	.+46     	; 0x23d0 <__vector_11+0x58>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
    23a2:	80 91 e2 00 	lds	r24, 0x00E2
    23a6:	80 ff       	sbrs	r24, 0
    23a8:	13 c0       	rjmp	.+38     	; 0x23d0 <__vector_11+0x58>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
    23aa:	80 91 e2 00 	lds	r24, 0x00E2
    23ae:	8e 7f       	andi	r24, 0xFE	; 254
    23b0:	80 93 e2 00 	sts	0x00E2, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
    23b4:	80 91 e2 00 	lds	r24, 0x00E2
    23b8:	80 61       	ori	r24, 0x10	; 16
    23ba:	80 93 e2 00 	sts	0x00E2, r24
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON |=  (1 << FRZCLK);
    23be:	80 91 d8 00 	lds	r24, 0x00D8
    23c2:	80 62       	ori	r24, 0x20	; 32
    23c4:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    23c8:	19 bc       	out	0x29, r1	; 41

		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		  USB_PLL_Off();

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
    23ca:	1e ba       	out	0x1e, r1	; 30
		EVENT_USB_Device_Disconnect();
    23cc:	0e 94 3a 01 	call	0x274	; 0x274 <EVENT_USB_Device_Disconnect>
					case USB_INT_IDTI:
						return (USBINT & (1 << IDTI));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
    23d0:	80 91 e1 00 	lds	r24, 0x00E1
		USB_DeviceState = DEVICE_STATE_Suspended;
		EVENT_USB_Device_Suspend();
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
    23d4:	84 ff       	sbrs	r24, 4
    23d6:	2d c0       	rjmp	.+90     	; 0x2432 <__vector_11+0xba>
					case USB_INT_IDTI:
						return (USBCON & (1 << IDTE));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
    23d8:	80 91 e2 00 	lds	r24, 0x00E2
    23dc:	84 ff       	sbrs	r24, 4
    23de:	29 c0       	rjmp	.+82     	; 0x2432 <__vector_11+0xba>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
    23e0:	84 e0       	ldi	r24, 0x04	; 4
    23e2:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    23e4:	86 e0       	ldi	r24, 0x06	; 6
    23e6:	89 bd       	out	0x29, r24	; 41
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
    23e8:	09 b4       	in	r0, 0x29	; 41
    23ea:	00 fe       	sbrs	r0, 0
    23ec:	fd cf       	rjmp	.-6      	; 0x23e8 <__vector_11+0x70>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
    23ee:	80 91 d8 00 	lds	r24, 0x00D8
    23f2:	8f 7d       	andi	r24, 0xDF	; 223
    23f4:	80 93 d8 00 	sts	0x00D8, r24
						USBINT &= ~(1 << IDTI);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
    23f8:	80 91 e1 00 	lds	r24, 0x00E1
    23fc:	8f 7e       	andi	r24, 0xEF	; 239
    23fe:	80 93 e1 00 	sts	0x00E1, r24
						USBCON &= ~(1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
    2402:	80 91 e2 00 	lds	r24, 0x00E2
    2406:	8f 7e       	andi	r24, 0xEF	; 239
    2408:	80 93 e2 00 	sts	0x00E2, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
    240c:	80 91 e2 00 	lds	r24, 0x00E2
    2410:	81 60       	ori	r24, 0x01	; 1
    2412:	80 93 e2 00 	sts	0x00E2, r24
		USB_INT_Clear(USB_INT_WAKEUPI);

		USB_INT_Disable(USB_INT_WAKEUPI);
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_Device_ConfigurationNumber)
    2416:	80 91 ab 01 	lds	r24, 0x01AB
    241a:	88 23       	and	r24, r24
    241c:	21 f4       	brne	.+8      	; 0x2426 <__vector_11+0xae>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
    241e:	80 91 e3 00 	lds	r24, 0x00E3
		  USB_DeviceState = DEVICE_STATE_Configured;
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
    2422:	87 ff       	sbrs	r24, 7
    2424:	02 c0       	rjmp	.+4      	; 0x242a <__vector_11+0xb2>
    2426:	84 e0       	ldi	r24, 0x04	; 4
    2428:	01 c0       	rjmp	.+2      	; 0x242c <__vector_11+0xb4>
    242a:	81 e0       	ldi	r24, 0x01	; 1
    242c:	8e bb       	out	0x1e, r24	; 30

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
    242e:	0e 94 38 01 	call	0x270	; 0x270 <EVENT_USB_Device_Connect>
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
    2432:	80 91 e1 00 	lds	r24, 0x00E1
		#else
		EVENT_USB_Device_WakeUp();
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
    2436:	83 ff       	sbrs	r24, 3
    2438:	21 c0       	rjmp	.+66     	; 0x247c <__vector_11+0x104>
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
    243a:	80 91 e2 00 	lds	r24, 0x00E2
    243e:	83 ff       	sbrs	r24, 3
    2440:	1d c0       	rjmp	.+58     	; 0x247c <__vector_11+0x104>
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
    2442:	80 91 e1 00 	lds	r24, 0x00E1
    2446:	87 7f       	andi	r24, 0xF7	; 247
    2448:	80 93 e1 00 	sts	0x00E1, r24
	{
		USB_INT_Clear(USB_INT_EORSTI);

		USB_DeviceState                = DEVICE_STATE_Default;
    244c:	82 e0       	ldi	r24, 0x02	; 2
    244e:	8e bb       	out	0x1e, r24	; 30
		USB_Device_ConfigurationNumber = 0;
    2450:	10 92 ab 01 	sts	0x01AB, r1
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
    2454:	80 91 e1 00 	lds	r24, 0x00E1
    2458:	8e 7f       	andi	r24, 0xFE	; 254
    245a:	80 93 e1 00 	sts	0x00E1, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
    245e:	80 91 e2 00 	lds	r24, 0x00E2
    2462:	8e 7f       	andi	r24, 0xFE	; 254
    2464:	80 93 e2 00 	sts	0x00E2, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
    2468:	80 91 e2 00 	lds	r24, 0x00E2
    246c:	80 61       	ori	r24, 0x10	; 16
    246e:	80 93 e2 00 	sts	0x00E2, r24
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
    2472:	80 e0       	ldi	r24, 0x00	; 0
    2474:	60 e0       	ldi	r22, 0x00	; 0
    2476:	42 e1       	ldi	r20, 0x12	; 18
    2478:	d7 de       	rcall	.-594    	; 0x2228 <Endpoint_ConfigureEndpoint_Prv>
    247a:	2a d1       	rcall	.+596    	; 0x26d0 <USB_Event_Stub>

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
    247c:	ff 91       	pop	r31
    247e:	ef 91       	pop	r30
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
    2480:	bf 91       	pop	r27
    2482:	af 91       	pop	r26
    2484:	9f 91       	pop	r25
    2486:	8f 91       	pop	r24
    2488:	7f 91       	pop	r23
    248a:	6f 91       	pop	r22
    248c:	5f 91       	pop	r21
    248e:	4f 91       	pop	r20
    2490:	3f 91       	pop	r19
    2492:	2f 91       	pop	r18
    2494:	0f 90       	pop	r0
    2496:	0f be       	out	0x3f, r0	; 63
    2498:	0f 90       	pop	r0
    249a:	1f 90       	pop	r1
    249c:	18 95       	reti

0000249e <USB_Device_ProcessControlRequest>:
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_Device_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
    249e:	1f 93       	push	r17
    24a0:	cf 93       	push	r28
    24a2:	df 93       	push	r29
    24a4:	00 d0       	rcall	.+0      	; 0x24a6 <USB_Device_ProcessControlRequest+0x8>
    24a6:	0f 92       	push	r0
    24a8:	cd b7       	in	r28, 0x3d	; 61
    24aa:	de b7       	in	r29, 0x3e	; 62
    24ac:	88 e0       	ldi	r24, 0x08	; 8
	USB_ControlRequest.bRequest      = Endpoint_Read_8();
	USB_ControlRequest.wValue        = Endpoint_Read_16_LE();
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;
    24ae:	ed ea       	ldi	r30, 0xAD	; 173
    24b0:	f1 e0       	ldi	r31, 0x01	; 1
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    24b2:	90 91 f1 00 	lds	r25, 0x00F1

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_8();
    24b6:	91 93       	st	Z+, r25
    24b8:	81 50       	subi	r24, 0x01	; 1
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
    24ba:	d9 f7       	brne	.-10     	; 0x24b2 <USB_Device_ProcessControlRequest+0x14>
	  *(RequestHeader++) = Endpoint_Read_8();
	#endif

	EVENT_USB_Device_ControlRequest();
    24bc:	09 d1       	rcall	.+530    	; 0x26d0 <USB_Event_Stub>
    24be:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    24c2:	83 ff       	sbrs	r24, 3

	if (Endpoint_IsSETUPReceived())
    24c4:	f0 c0       	rjmp	.+480    	; 0x26a6 <USB_Device_ProcessControlRequest+0x208>
    24c6:	80 91 ad 01 	lds	r24, 0x01AD
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
    24ca:	90 91 ae 01 	lds	r25, 0x01AE

		switch (USB_ControlRequest.bRequest)
    24ce:	95 30       	cpi	r25, 0x05	; 5
    24d0:	09 f4       	brne	.+2      	; 0x24d4 <USB_Device_ProcessControlRequest+0x36>
    24d2:	6c c0       	rjmp	.+216    	; 0x25ac <USB_Device_ProcessControlRequest+0x10e>
    24d4:	96 30       	cpi	r25, 0x06	; 6
    24d6:	40 f4       	brcc	.+16     	; 0x24e8 <USB_Device_ProcessControlRequest+0x4a>
    24d8:	91 30       	cpi	r25, 0x01	; 1
    24da:	69 f1       	breq	.+90     	; 0x2536 <USB_Device_ProcessControlRequest+0x98>
    24dc:	91 30       	cpi	r25, 0x01	; 1
    24de:	70 f0       	brcs	.+28     	; 0x24fc <USB_Device_ProcessControlRequest+0x5e>
    24e0:	93 30       	cpi	r25, 0x03	; 3
    24e2:	09 f0       	breq	.+2      	; 0x24e6 <USB_Device_ProcessControlRequest+0x48>
    24e4:	e0 c0       	rjmp	.+448    	; 0x26a6 <USB_Device_ProcessControlRequest+0x208>
    24e6:	27 c0       	rjmp	.+78     	; 0x2536 <USB_Device_ProcessControlRequest+0x98>
    24e8:	98 30       	cpi	r25, 0x08	; 8
    24ea:	09 f4       	brne	.+2      	; 0x24ee <USB_Device_ProcessControlRequest+0x50>
    24ec:	ae c0       	rjmp	.+348    	; 0x264a <USB_Device_ProcessControlRequest+0x1ac>
    24ee:	99 30       	cpi	r25, 0x09	; 9
    24f0:	09 f4       	brne	.+2      	; 0x24f4 <USB_Device_ProcessControlRequest+0x56>
    24f2:	bd c0       	rjmp	.+378    	; 0x266e <USB_Device_ProcessControlRequest+0x1d0>
    24f4:	96 30       	cpi	r25, 0x06	; 6
    24f6:	09 f0       	breq	.+2      	; 0x24fa <USB_Device_ProcessControlRequest+0x5c>
    24f8:	d6 c0       	rjmp	.+428    	; 0x26a6 <USB_Device_ProcessControlRequest+0x208>
    24fa:	7a c0       	rjmp	.+244    	; 0x25f0 <USB_Device_ProcessControlRequest+0x152>
    24fc:	80 38       	cpi	r24, 0x80	; 128
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    24fe:	81 f0       	breq	.+32     	; 0x2520 <USB_Device_ProcessControlRequest+0x82>
    2500:	82 38       	cpi	r24, 0x82	; 130
    2502:	09 f0       	breq	.+2      	; 0x2506 <USB_Device_ProcessControlRequest+0x68>
    2504:	d0 c0       	rjmp	.+416    	; 0x26a6 <USB_Device_ProcessControlRequest+0x208>
    2506:	80 91 b1 01 	lds	r24, 0x01B1
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
			#endif
			break;
		case (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_ENDPOINT):
			#if !defined(CONTROL_ONLY_DEVICE)
			Endpoint_SelectEndpoint((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
    250a:	8f 70       	andi	r24, 0x0F	; 15
    250c:	80 93 e9 00 	sts	0x00E9, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    2510:	90 91 eb 00 	lds	r25, 0x00EB
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    2514:	81 e0       	ldi	r24, 0x01	; 1

			CurrentStatus = Endpoint_IsStalled();
    2516:	95 ff       	sbrs	r25, 5
    2518:	80 e0       	ldi	r24, 0x00	; 0
    251a:	10 92 e9 00 	sts	0x00E9, r1
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    251e:	01 c0       	rjmp	.+2      	; 0x2522 <USB_Device_ProcessControlRequest+0x84>
    2520:	80 e0       	ldi	r24, 0x00	; 0
	Endpoint_ClearOUT();
}

static void USB_Device_GetStatus(void)
{
	uint8_t CurrentStatus = 0;
    2522:	90 91 e8 00 	lds	r25, 0x00E8
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    2526:	97 7f       	andi	r25, 0xF7	; 247
    2528:	90 93 e8 00 	sts	0x00E8, r25
    252c:	80 93 f1 00 	sts	0x00F1, r24
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
    2530:	10 92 f1 00 	sts	0x00F1, r1
				UEDATX = (Data >> 8);
    2534:	95 c0       	rjmp	.+298    	; 0x2660 <USB_Device_ProcessControlRequest+0x1c2>
    2536:	88 23       	and	r24, r24
				}

				break;
			case REQ_ClearFeature:
			case REQ_SetFeature:
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    2538:	19 f0       	breq	.+6      	; 0x2540 <USB_Device_ProcessControlRequest+0xa2>
    253a:	82 30       	cpi	r24, 0x02	; 2
    253c:	09 f0       	breq	.+2      	; 0x2540 <USB_Device_ProcessControlRequest+0xa2>
    253e:	b3 c0       	rjmp	.+358    	; 0x26a6 <USB_Device_ProcessControlRequest+0x208>
    2540:	8f 71       	andi	r24, 0x1F	; 31
	Endpoint_ClearStatusStage();
}

static void USB_Device_ClearSetFeature(void)
{
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
    2542:	82 30       	cpi	r24, 0x02	; 2
    2544:	09 f0       	breq	.+2      	; 0x2548 <USB_Device_ProcessControlRequest+0xaa>
    2546:	af c0       	rjmp	.+350    	; 0x26a6 <USB_Device_ProcessControlRequest+0x208>
    2548:	80 91 af 01 	lds	r24, 0x01AF

			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
    254c:	88 23       	and	r24, r24
    254e:	41 f5       	brne	.+80     	; 0x25a0 <USB_Device_ProcessControlRequest+0x102>
    2550:	20 91 b1 01 	lds	r18, 0x01B1
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
    2554:	2f 70       	andi	r18, 0x0F	; 15
    2556:	09 f4       	brne	.+2      	; 0x255a <USB_Device_ProcessControlRequest+0xbc>

				if (EndpointIndex == ENDPOINT_CONTROLEP)
    2558:	a6 c0       	rjmp	.+332    	; 0x26a6 <USB_Device_ProcessControlRequest+0x208>
    255a:	20 93 e9 00 	sts	0x00E9, r18
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    255e:	80 91 eb 00 	lds	r24, 0x00EB
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
    2562:	80 ff       	sbrs	r24, 0
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
    2564:	1d c0       	rjmp	.+58     	; 0x25a0 <USB_Device_ProcessControlRequest+0x102>
    2566:	80 91 ae 01 	lds	r24, 0x01AE
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
    256a:	83 30       	cpi	r24, 0x03	; 3
    256c:	21 f4       	brne	.+8      	; 0x2576 <USB_Device_ProcessControlRequest+0xd8>
    256e:	80 91 eb 00 	lds	r24, 0x00EB
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    2572:	80 62       	ori	r24, 0x20	; 32
    2574:	13 c0       	rjmp	.+38     	; 0x259c <USB_Device_ProcessControlRequest+0xfe>
    2576:	80 91 eb 00 	lds	r24, 0x00EB
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
    257a:	80 61       	ori	r24, 0x10	; 16
    257c:	80 93 eb 00 	sts	0x00EB, r24
    2580:	81 e0       	ldi	r24, 0x01	; 1
			 *  \param[in] Address  Endpoint address whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t Address)
			{
				UERST = (1 << (Address & ENDPOINT_EPNUM_MASK));
    2582:	90 e0       	ldi	r25, 0x00	; 0
    2584:	02 c0       	rjmp	.+4      	; 0x258a <USB_Device_ProcessControlRequest+0xec>
    2586:	88 0f       	add	r24, r24
    2588:	99 1f       	adc	r25, r25
    258a:	2a 95       	dec	r18
    258c:	e2 f7       	brpl	.-8      	; 0x2586 <USB_Device_ProcessControlRequest+0xe8>
    258e:	80 93 ea 00 	sts	0x00EA, r24
    2592:	10 92 ea 00 	sts	0x00EA, r1
				UERST = 0;
    2596:	80 91 eb 00 	lds	r24, 0x00EB

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
    259a:	88 60       	ori	r24, 0x08	; 8
    259c:	80 93 eb 00 	sts	0x00EB, r24
    25a0:	10 92 e9 00 	sts	0x00E9, r1
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    25a4:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    25a8:	87 7f       	andi	r24, 0xF7	; 247
    25aa:	5d c0       	rjmp	.+186    	; 0x2666 <USB_Device_ProcessControlRequest+0x1c8>
    25ac:	88 23       	and	r24, r24
					USB_Device_ClearSetFeature();
				}

				break;
			case REQ_SetAddress:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    25ae:	09 f0       	breq	.+2      	; 0x25b2 <USB_Device_ProcessControlRequest+0x114>
    25b0:	7a c0       	rjmp	.+244    	; 0x26a6 <USB_Device_ProcessControlRequest+0x208>
    25b2:	10 91 af 01 	lds	r17, 0x01AF
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t DeviceAddress = (USB_ControlRequest.wValue & 0x7F);
    25b6:	1f 77       	andi	r17, 0x7F	; 127
    25b8:	80 91 e3 00 	lds	r24, 0x00E3
			#endif

			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				UDADDR = (UDADDR & (1 << ADDEN)) | (Address & 0x7F);
    25bc:	80 78       	andi	r24, 0x80	; 128
    25be:	81 2b       	or	r24, r17
    25c0:	80 93 e3 00 	sts	0x00E3, r24
    25c4:	80 91 e8 00 	lds	r24, 0x00E8
    25c8:	87 7f       	andi	r24, 0xF7	; 247
    25ca:	80 93 e8 00 	sts	0x00E8, r24
    25ce:	40 de       	rcall	.-896    	; 0x2250 <Endpoint_ClearStatusStage>

	USB_Device_SetDeviceAddress(DeviceAddress);

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
    25d0:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    25d4:	80 ff       	sbrs	r24, 0
    25d6:	fc cf       	rjmp	.-8      	; 0x25d0 <USB_Device_ProcessControlRequest+0x132>

	while (!(Endpoint_IsINReady()));
    25d8:	80 91 e3 00 	lds	r24, 0x00E3
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address)
			{
				(void)Address;
				
				UDADDR |= (1 << ADDEN);
    25dc:	80 68       	ori	r24, 0x80	; 128
    25de:	80 93 e3 00 	sts	0x00E3, r24
    25e2:	11 23       	and	r17, r17
    25e4:	11 f0       	breq	.+4      	; 0x25ea <USB_Device_ProcessControlRequest+0x14c>

	USB_Device_EnableDeviceAddress(DeviceAddress);

	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
    25e6:	83 e0       	ldi	r24, 0x03	; 3
    25e8:	01 c0       	rjmp	.+2      	; 0x25ec <USB_Device_ProcessControlRequest+0x14e>
    25ea:	82 e0       	ldi	r24, 0x02	; 2
    25ec:	8e bb       	out	0x1e, r24	; 30
    25ee:	5b c0       	rjmp	.+182    	; 0x26a6 <USB_Device_ProcessControlRequest+0x208>
    25f0:	80 58       	subi	r24, 0x80	; 128
    25f2:	82 30       	cpi	r24, 0x02	; 2
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_SetAddress();

				break;
			case REQ_GetDescriptor:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    25f4:	08 f0       	brcs	.+2      	; 0x25f8 <USB_Device_ProcessControlRequest+0x15a>
    25f6:	57 c0       	rjmp	.+174    	; 0x26a6 <USB_Device_ProcessControlRequest+0x208>
    25f8:	80 91 af 01 	lds	r24, 0x01AF
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif

	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
    25fc:	90 91 b0 01 	lds	r25, 0x01B0
    2600:	60 91 b1 01 	lds	r22, 0x01B1
    2604:	ae 01       	movw	r20, r28
    2606:	4e 5f       	subi	r20, 0xFE	; 254
    2608:	5f 4f       	sbci	r21, 0xFF	; 255
    260a:	9e 01       	movw	r18, r28
    260c:	2f 5f       	subi	r18, 0xFF	; 255
    260e:	3f 4f       	sbci	r19, 0xFF	; 255
    2610:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <CALLBACK_USB_GetDescriptor>
    2614:	bc 01       	movw	r22, r24
    2616:	00 97       	sbiw	r24, 0x00	; 0
    2618:	09 f4       	brne	.+2      	; 0x261c <USB_Device_ProcessControlRequest+0x17e>
    261a:	45 c0       	rjmp	.+138    	; 0x26a6 <USB_Device_ProcessControlRequest+0x208>
    261c:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    2620:	87 7f       	andi	r24, 0xF7	; 247
    2622:	80 93 e8 00 	sts	0x00E8, r24
    2626:	29 81       	ldd	r18, Y+1	; 0x01
    2628:	8a 81       	ldd	r24, Y+2	; 0x02
	#elif defined(USE_EEPROM_DESCRIPTORS)
	Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_FLASH_DESCRIPTORS)
	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
	#else
	if (DescriptorAddressSpace == MEMSPACE_FLASH)
    262a:	9b 81       	ldd	r25, Y+3	; 0x03
    262c:	22 23       	and	r18, r18
    262e:	11 f4       	brne	.+4      	; 0x2634 <USB_Device_ProcessControlRequest+0x196>
    2630:	2a dd       	rcall	.-1452   	; 0x2086 <Endpoint_Write_Control_PStream_LE>
    2632:	05 c0       	rjmp	.+10     	; 0x263e <USB_Device_ProcessControlRequest+0x1a0>
	  Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
    2634:	21 30       	cpi	r18, 0x01	; 1
    2636:	11 f4       	brne	.+4      	; 0x263c <USB_Device_ProcessControlRequest+0x19e>
    2638:	8a dd       	rcall	.-1260   	; 0x214e <Endpoint_Write_Control_EStream_LE>
	else if (DescriptorAddressSpace == MEMSPACE_EEPROM)
    263a:	01 c0       	rjmp	.+2      	; 0x263e <USB_Device_ProcessControlRequest+0x1a0>
    263c:	c1 dc       	rcall	.-1662   	; 0x1fc0 <Endpoint_Write_Control_Stream_LE>
	  Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
    263e:	80 91 e8 00 	lds	r24, 0x00E8
    2642:	8b 77       	andi	r24, 0x7B	; 123
	else
	  Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
    2644:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    2648:	2e c0       	rjmp	.+92     	; 0x26a6 <USB_Device_ProcessControlRequest+0x208>
    264a:	80 38       	cpi	r24, 0x80	; 128
    264c:	61 f5       	brne	.+88     	; 0x26a6 <USB_Device_ProcessControlRequest+0x208>
    264e:	80 91 e8 00 	lds	r24, 0x00E8
    2652:	87 7f       	andi	r24, 0xF7	; 247
					USB_Device_GetDescriptor();
				}

				break;
			case REQ_GetConfiguration:
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
    2654:	80 93 e8 00 	sts	0x00E8, r24
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    2658:	80 91 ab 01 	lds	r24, 0x01AB
    265c:	80 93 f1 00 	sts	0x00F1, r24
    2660:	80 91 e8 00 	lds	r24, 0x00E8

static void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();

	Endpoint_Write_8(USB_Device_ConfigurationNumber);
    2664:	8e 77       	andi	r24, 0x7E	; 126
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    2666:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    266a:	f2 dd       	rcall	.-1052   	; 0x2250 <Endpoint_ClearStatusStage>
    266c:	1c c0       	rjmp	.+56     	; 0x26a6 <USB_Device_ProcessControlRequest+0x208>
    266e:	88 23       	and	r24, r24
    2670:	d1 f4       	brne	.+52     	; 0x26a6 <USB_Device_ProcessControlRequest+0x208>
    2672:	90 91 af 01 	lds	r25, 0x01AF
	Endpoint_ClearIN();

	Endpoint_ClearStatusStage();
    2676:	92 30       	cpi	r25, 0x02	; 2
    2678:	b0 f4       	brcc	.+44     	; 0x26a6 <USB_Device_ProcessControlRequest+0x208>
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_GetConfiguration();

				break;
			case REQ_SetConfiguration:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    267a:	80 91 e8 00 	lds	r24, 0x00E8
}

static void USB_Device_SetConfiguration(void)
{
	#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
    267e:	87 7f       	andi	r24, 0xF7	; 247
    2680:	80 93 e8 00 	sts	0x00E8, r24
    2684:	90 93 ab 01 	sts	0x01AB, r25
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    2688:	e3 dd       	rcall	.-1082   	; 0x2250 <Endpoint_ClearStatusStage>
    268a:	80 91 ab 01 	lds	r24, 0x01AB
    268e:	88 23       	and	r24, r24
	#endif
	#endif

	Endpoint_ClearSETUP();

	USB_Device_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
    2690:	21 f4       	brne	.+8      	; 0x269a <USB_Device_ProcessControlRequest+0x1fc>
    2692:	80 91 e3 00 	lds	r24, 0x00E3

	Endpoint_ClearStatusStage();
    2696:	87 ff       	sbrs	r24, 7

	if (USB_Device_ConfigurationNumber)
    2698:	02 c0       	rjmp	.+4      	; 0x269e <USB_Device_ProcessControlRequest+0x200>
    269a:	84 e0       	ldi	r24, 0x04	; 4
    269c:	01 c0       	rjmp	.+2      	; 0x26a0 <USB_Device_ProcessControlRequest+0x202>
    269e:	81 e0       	ldi	r24, 0x01	; 1
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
    26a0:	8e bb       	out	0x1e, r24	; 30
    26a2:	0e 94 3c 01 	call	0x278	; 0x278 <EVENT_USB_Device_ConfigurationChanged>
	  USB_DeviceState = DEVICE_STATE_Configured;
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
    26a6:	80 91 e8 00 	lds	r24, 0x00E8
    26aa:	83 ff       	sbrs	r24, 3
    26ac:	0a c0       	rjmp	.+20     	; 0x26c2 <USB_Device_ProcessControlRequest+0x224>
    26ae:	80 91 e8 00 	lds	r24, 0x00E8

	EVENT_USB_Device_ConfigurationChanged();
    26b2:	87 7f       	andi	r24, 0xF7	; 247
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    26b4:	80 93 e8 00 	sts	0x00E8, r24
			default:
				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
    26b8:	80 91 eb 00 	lds	r24, 0x00EB
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    26bc:	80 62       	ori	r24, 0x20	; 32
    26be:	80 93 eb 00 	sts	0x00EB, r24
    26c2:	0f 90       	pop	r0
    26c4:	0f 90       	pop	r0
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    26c6:	0f 90       	pop	r0
    26c8:	df 91       	pop	r29
    26ca:	cf 91       	pop	r28
    26cc:	1f 91       	pop	r17
    26ce:	08 95       	ret

000026d0 <USB_Event_Stub>:
#include "Events.h"

void USB_Event_Stub(void)
{

}
    26d0:	08 95       	ret

000026d2 <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
    26d2:	cf 93       	push	r28
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_DeviceTask(void)
{
	if (USB_DeviceState == DEVICE_STATE_Unattached)
    26d4:	8e b3       	in	r24, 0x1e	; 30
    26d6:	88 23       	and	r24, r24
    26d8:	a9 f0       	breq	.+42     	; 0x2704 <USB_USBTask+0x32>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    26da:	80 91 e9 00 	lds	r24, 0x00E9
    26de:	8f 70       	andi	r24, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    26e0:	90 91 ec 00 	lds	r25, 0x00EC
    26e4:	90 ff       	sbrs	r25, 0
    26e6:	02 c0       	rjmp	.+4      	; 0x26ec <USB_USBTask+0x1a>
    26e8:	c0 e8       	ldi	r28, 0x80	; 128
    26ea:	01 c0       	rjmp	.+2      	; 0x26ee <USB_USBTask+0x1c>
    26ec:	c0 e0       	ldi	r28, 0x00	; 0
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    26ee:	c8 2b       	or	r28, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    26f0:	10 92 e9 00 	sts	0x00E9, r1
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    26f4:	80 91 e8 00 	lds	r24, 0x00E8

	uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

	if (Endpoint_IsSETUPReceived())
    26f8:	83 ff       	sbrs	r24, 3
    26fa:	01 c0       	rjmp	.+2      	; 0x26fe <USB_USBTask+0x2c>
	  USB_Device_ProcessControlRequest();
    26fc:	d0 de       	rcall	.-608    	; 0x249e <USB_Device_ProcessControlRequest>
    26fe:	cf 70       	andi	r28, 0x0F	; 15
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    2700:	c0 93 e9 00 	sts	0x00E9, r28
    2704:	cf 91       	pop	r28
	#elif defined(USB_CAN_BE_HOST)
		USB_HostTask();
	#elif defined(USB_CAN_BE_DEVICE)
		USB_DeviceTask();
	#endif
}
    2706:	08 95       	ret

00002708 <__eerd_byte_usb162>:
    2708:	f9 99       	sbic	0x1f, 1	; 31
    270a:	fe cf       	rjmp	.-4      	; 0x2708 <__eerd_byte_usb162>
    270c:	92 bd       	out	0x22, r25	; 34
    270e:	81 bd       	out	0x21, r24	; 33
    2710:	f8 9a       	sbi	0x1f, 0	; 31
    2712:	99 27       	eor	r25, r25
    2714:	80 b5       	in	r24, 0x20	; 32
    2716:	08 95       	ret

00002718 <__eeupd_byte_usb162>:
    2718:	26 2f       	mov	r18, r22

0000271a <__eeupd_r18_usb162>:
    271a:	f9 99       	sbic	0x1f, 1	; 31
    271c:	fe cf       	rjmp	.-4      	; 0x271a <__eeupd_r18_usb162>
    271e:	92 bd       	out	0x22, r25	; 34
    2720:	81 bd       	out	0x21, r24	; 33
    2722:	f8 9a       	sbi	0x1f, 0	; 31
    2724:	01 97       	sbiw	r24, 0x01	; 1
    2726:	00 b4       	in	r0, 0x20	; 32
    2728:	02 16       	cp	r0, r18
    272a:	39 f0       	breq	.+14     	; 0x273a <__eeupd_r18_usb162+0x20>
    272c:	1f ba       	out	0x1f, r1	; 31
    272e:	20 bd       	out	0x20, r18	; 32
    2730:	0f b6       	in	r0, 0x3f	; 63
    2732:	f8 94       	cli
    2734:	fa 9a       	sbi	0x1f, 2	; 31
    2736:	f9 9a       	sbi	0x1f, 1	; 31
    2738:	0f be       	out	0x3f, r0	; 63
    273a:	08 95       	ret

0000273c <_exit>:
    273c:	f8 94       	cli

0000273e <__stop_program>:
    273e:	ff cf       	rjmp	.-2      	; 0x273e <__stop_program>
