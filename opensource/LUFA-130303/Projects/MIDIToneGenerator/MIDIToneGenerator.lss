
MIDIToneGenerator.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000011c  00800100  00000e10  00000ea4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000e10  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000002a  0080021c  0080021c  00000fc0  2**0
                  ALLOC
  3 .stab         00000a98  00000000  00000000  00000fc0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000002aa  00000000  00000000  00001a58  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000500  00000000  00000000  00001d08  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000863a  00000000  00000000  00002208  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000020b0  00000000  00000000  0000a842  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00003c77  00000000  00000000  0000c8f2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000dd4  00000000  00000000  0001056c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00003b1b  00000000  00000000  00011340  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00005181  00000000  00000000  00014e5b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000006a0  00000000  00000000  00019fdc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	a6 c0       	rjmp	.+332    	; 0x14e <__ctors_end>
   2:	00 00       	nop
   4:	c2 c0       	rjmp	.+388    	; 0x18a <__bad_interrupt>
   6:	00 00       	nop
   8:	c0 c0       	rjmp	.+384    	; 0x18a <__bad_interrupt>
   a:	00 00       	nop
   c:	be c0       	rjmp	.+380    	; 0x18a <__bad_interrupt>
   e:	00 00       	nop
  10:	bc c0       	rjmp	.+376    	; 0x18a <__bad_interrupt>
  12:	00 00       	nop
  14:	ba c0       	rjmp	.+372    	; 0x18a <__bad_interrupt>
  16:	00 00       	nop
  18:	b8 c0       	rjmp	.+368    	; 0x18a <__bad_interrupt>
  1a:	00 00       	nop
  1c:	b6 c0       	rjmp	.+364    	; 0x18a <__bad_interrupt>
  1e:	00 00       	nop
  20:	b4 c0       	rjmp	.+360    	; 0x18a <__bad_interrupt>
  22:	00 00       	nop
  24:	b2 c0       	rjmp	.+356    	; 0x18a <__bad_interrupt>
  26:	00 00       	nop
  28:	32 c4       	rjmp	.+2148   	; 0x88e <__vector_10>
  2a:	00 00       	nop
  2c:	ae c0       	rjmp	.+348    	; 0x18a <__bad_interrupt>
  2e:	00 00       	nop
  30:	ac c0       	rjmp	.+344    	; 0x18a <__bad_interrupt>
  32:	00 00       	nop
  34:	aa c0       	rjmp	.+340    	; 0x18a <__bad_interrupt>
  36:	00 00       	nop
  38:	a8 c0       	rjmp	.+336    	; 0x18a <__bad_interrupt>
  3a:	00 00       	nop
  3c:	a6 c0       	rjmp	.+332    	; 0x18a <__bad_interrupt>
  3e:	00 00       	nop
  40:	a4 c0       	rjmp	.+328    	; 0x18a <__bad_interrupt>
  42:	00 00       	nop
  44:	a2 c0       	rjmp	.+324    	; 0x18a <__bad_interrupt>
  46:	00 00       	nop
  48:	a0 c0       	rjmp	.+320    	; 0x18a <__bad_interrupt>
  4a:	00 00       	nop
  4c:	9e c0       	rjmp	.+316    	; 0x18a <__bad_interrupt>
  4e:	00 00       	nop
  50:	9c c0       	rjmp	.+312    	; 0x18a <__bad_interrupt>
  52:	00 00       	nop
  54:	a0 c0       	rjmp	.+320    	; 0x196 <__vector_21>
  56:	00 00       	nop
  58:	98 c0       	rjmp	.+304    	; 0x18a <__bad_interrupt>
  5a:	00 00       	nop
  5c:	96 c0       	rjmp	.+300    	; 0x18a <__bad_interrupt>
  5e:	00 00       	nop
  60:	94 c0       	rjmp	.+296    	; 0x18a <__bad_interrupt>
  62:	00 00       	nop
  64:	92 c0       	rjmp	.+292    	; 0x18a <__bad_interrupt>
  66:	00 00       	nop
  68:	90 c0       	rjmp	.+288    	; 0x18a <__bad_interrupt>
  6a:	00 00       	nop
  6c:	8e c0       	rjmp	.+284    	; 0x18a <__bad_interrupt>
  6e:	00 00       	nop
  70:	8c c0       	rjmp	.+280    	; 0x18a <__bad_interrupt>
  72:	00 00       	nop
  74:	8a c0       	rjmp	.+276    	; 0x18a <__bad_interrupt>
  76:	00 00       	nop
  78:	88 c0       	rjmp	.+272    	; 0x18a <__bad_interrupt>
  7a:	00 00       	nop
  7c:	86 c0       	rjmp	.+268    	; 0x18a <__bad_interrupt>
  7e:	00 00       	nop
  80:	84 c0       	rjmp	.+264    	; 0x18a <__bad_interrupt>
  82:	00 00       	nop
  84:	82 c0       	rjmp	.+260    	; 0x18a <__bad_interrupt>
  86:	00 00       	nop
  88:	80 c0       	rjmp	.+256    	; 0x18a <__bad_interrupt>
  8a:	00 00       	nop
  8c:	7e c0       	rjmp	.+252    	; 0x18a <__bad_interrupt>
  8e:	00 00       	nop
  90:	7c c0       	rjmp	.+248    	; 0x18a <__bad_interrupt>
  92:	00 00       	nop
  94:	7a c0       	rjmp	.+244    	; 0x18a <__bad_interrupt>
  96:	00 00       	nop

00000098 <ProductString>:
  98:	1e 03 4c 00 55 00 46 00 41 00 20 00 4d 00 49 00     ..L.U.F.A. .M.I.
  a8:	44 00 49 00 20 00 44 00 65 00 6d 00 6f 00 00 00     D.I. .D.e.m.o...

000000b8 <ManufacturerString>:
  b8:	18 03 44 00 65 00 61 00 6e 00 20 00 43 00 61 00     ..D.e.a.n. .C.a.
  c8:	6d 00 65 00 72 00 61 00 00 00                       m.e.r.a...

000000d2 <LanguageString>:
  d2:	04 03 09 04                                         ....

000000d6 <ConfigurationDescriptor>:
  d6:	09 02 65 00 02 01 00 c0 32 09 04 00 00 00 01 01     ..e.....2.......
  e6:	00 00 09 24 01 00 01 09 00 01 01 09 04 01 00 02     ...$............
  f6:	01 03 00 00 07 24 01 00 01 41 00 06 24 02 01 01     .....$...A..$...
 106:	00 06 24 02 02 02 00 09 24 03 01 03 01 02 01 00     ..$.....$.......
 116:	09 24 03 02 04 01 01 01 00 09 05 01 02 40 00 05     .$...........@..
 126:	00 00 05 25 01 01 01 09 05 82 02 40 00 05 00 00     ...%.......@....
 136:	05 25 01 01 03                                      .%...

0000013b <DeviceDescriptor>:
 13b:	12 01 10 01 00 00 00 08 eb 03 48 20 01 00 01 02     ..........H ....
 14b:	00 01 00                                            ...

0000014e <__ctors_end>:
 14e:	11 24       	eor	r1, r1
 150:	1f be       	out	0x3f, r1	; 63
 152:	cf ef       	ldi	r28, 0xFF	; 255
 154:	d0 e2       	ldi	r29, 0x20	; 32
 156:	de bf       	out	0x3e, r29	; 62
 158:	cd bf       	out	0x3d, r28	; 61

0000015a <__do_copy_data>:
 15a:	12 e0       	ldi	r17, 0x02	; 2
 15c:	a0 e0       	ldi	r26, 0x00	; 0
 15e:	b1 e0       	ldi	r27, 0x01	; 1
 160:	e0 e1       	ldi	r30, 0x10	; 16
 162:	fe e0       	ldi	r31, 0x0E	; 14
 164:	00 e0       	ldi	r16, 0x00	; 0
 166:	0b bf       	out	0x3b, r16	; 59
 168:	02 c0       	rjmp	.+4      	; 0x16e <__do_copy_data+0x14>
 16a:	07 90       	elpm	r0, Z+
 16c:	0d 92       	st	X+, r0
 16e:	ac 31       	cpi	r26, 0x1C	; 28
 170:	b1 07       	cpc	r27, r17
 172:	d9 f7       	brne	.-10     	; 0x16a <__do_copy_data+0x10>
 174:	1b be       	out	0x3b, r1	; 59

00000176 <__do_clear_bss>:
 176:	12 e0       	ldi	r17, 0x02	; 2
 178:	ac e1       	ldi	r26, 0x1C	; 28
 17a:	b2 e0       	ldi	r27, 0x02	; 2
 17c:	01 c0       	rjmp	.+2      	; 0x180 <.do_clear_bss_start>

0000017e <.do_clear_bss_loop>:
 17e:	1d 92       	st	X+, r1

00000180 <.do_clear_bss_start>:
 180:	a6 34       	cpi	r26, 0x46	; 70
 182:	b1 07       	cpc	r27, r17
 184:	e1 f7       	brne	.-8      	; 0x17e <.do_clear_bss_loop>
 186:	8a d0       	rcall	.+276    	; 0x29c <main>
 188:	41 c6       	rjmp	.+3202   	; 0xe0c <_exit>

0000018a <__bad_interrupt>:
 18a:	3a cf       	rjmp	.-396    	; 0x0 <__vectors>

0000018c <LEDs_SetAllLEDs>:
				PORTD &= ~LEDMask;
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
			{
				PORTD = ((PORTD & ~LEDS_ALL_LEDS) | LEDMask);
 18c:	9b b1       	in	r25, 0x0b	; 11
 18e:	9f 70       	andi	r25, 0x0F	; 15
 190:	98 2b       	or	r25, r24
 192:	9b b9       	out	0x0b, r25	; 11
			}
 194:	08 95       	ret

00000196 <__vector_21>:
	}
}

/** ISR to handle the reloading of the PWM timer with the next sample. */
ISR(TIMER0_COMPA_vect, ISR_BLOCK)
{
 196:	1f 92       	push	r1
 198:	0f 92       	push	r0
 19a:	0f b6       	in	r0, 0x3f	; 63
 19c:	0f 92       	push	r0
 19e:	0b b6       	in	r0, 0x3b	; 59
 1a0:	0f 92       	push	r0
 1a2:	11 24       	eor	r1, r1
 1a4:	0f 93       	push	r16
 1a6:	1f 93       	push	r17
 1a8:	2f 93       	push	r18
 1aa:	3f 93       	push	r19
 1ac:	4f 93       	push	r20
 1ae:	5f 93       	push	r21
 1b0:	6f 93       	push	r22
 1b2:	7f 93       	push	r23
 1b4:	8f 93       	push	r24
 1b6:	9f 93       	push	r25
 1b8:	af 93       	push	r26
 1ba:	bf 93       	push	r27
 1bc:	cf 93       	push	r28
 1be:	ef 93       	push	r30
 1c0:	ff 93       	push	r31
	uint16_t MixedSample = 0;
 1c2:	ed e1       	ldi	r30, 0x1D	; 29
 1c4:	f2 e0       	ldi	r31, 0x02	; 2
	}
}

/** ISR to handle the reloading of the PWM timer with the next sample. */
ISR(TIMER0_COMPA_vect, ISR_BLOCK)
{
 1c6:	c3 e0       	ldi	r28, 0x03	; 3
	uint16_t MixedSample = 0;
 1c8:	80 e0       	ldi	r24, 0x00	; 0
 1ca:	90 e0       	ldi	r25, 0x00	; 0

	/* Sum together all the active notes to form a single sample */
	for (uint8_t i = 0; i < MAX_SIMULTANEOUS_NOTES; i++)
	{
		/* A non-zero pitch indicates the note is active */
		if (NoteData[i].Pitch)
 1cc:	20 81       	ld	r18, Z
 1ce:	22 23       	and	r18, r18
 1d0:	b9 f0       	breq	.+46     	; 0x200 <__vector_21+0x6a>
		{
			/* Use the top 8 bits of the table position as the sample table index */
			uint8_t TableIndex = (NoteData[i].TablePosition >> 24);
 1d2:	05 81       	ldd	r16, Z+5	; 0x05
 1d4:	16 81       	ldd	r17, Z+6	; 0x06
 1d6:	27 81       	ldd	r18, Z+7	; 0x07
 1d8:	30 85       	ldd	r19, Z+8	; 0x08

			/* Add the new tone sample to the accumulator and increment the table position */
			MixedSample += SineTable[TableIndex];
 1da:	a3 2f       	mov	r26, r19
 1dc:	b0 e0       	ldi	r27, 0x00	; 0
 1de:	a4 5f       	subi	r26, 0xF4	; 244
 1e0:	be 4f       	sbci	r27, 0xFE	; 254
 1e2:	4c 91       	ld	r20, X
 1e4:	84 0f       	add	r24, r20
 1e6:	91 1d       	adc	r25, r1
			NoteData[i].TablePosition += NoteData[i].TableIncrement;
 1e8:	41 81       	ldd	r20, Z+1	; 0x01
 1ea:	52 81       	ldd	r21, Z+2	; 0x02
 1ec:	63 81       	ldd	r22, Z+3	; 0x03
 1ee:	74 81       	ldd	r23, Z+4	; 0x04
 1f0:	40 0f       	add	r20, r16
 1f2:	51 1f       	adc	r21, r17
 1f4:	62 1f       	adc	r22, r18
 1f6:	73 1f       	adc	r23, r19
 1f8:	45 83       	std	Z+5, r20	; 0x05
 1fa:	56 83       	std	Z+6, r21	; 0x06
 1fc:	67 83       	std	Z+7, r22	; 0x07
 1fe:	70 87       	std	Z+8, r23	; 0x08
 200:	c1 50       	subi	r28, 0x01	; 1
 202:	3a 96       	adiw	r30, 0x0a	; 10
ISR(TIMER0_COMPA_vect, ISR_BLOCK)
{
	uint16_t MixedSample = 0;

	/* Sum together all the active notes to form a single sample */
	for (uint8_t i = 0; i < MAX_SIMULTANEOUS_NOTES; i++)
 204:	cc 23       	and	r28, r28
 206:	11 f7       	brne	.-60     	; 0x1cc <__vector_21+0x36>
			NoteData[i].TablePosition += NoteData[i].TableIncrement;
		}
	}

	/* Output clamped mixed sample value to the PWM */
	OCR3A = (MixedSample <= 0xFF) ? MixedSample : 0xFF;
 208:	8f 3f       	cpi	r24, 0xFF	; 255
 20a:	91 05       	cpc	r25, r1
 20c:	19 f0       	breq	.+6      	; 0x214 <__vector_21+0x7e>
 20e:	10 f0       	brcs	.+4      	; 0x214 <__vector_21+0x7e>
 210:	8f ef       	ldi	r24, 0xFF	; 255
 212:	90 e0       	ldi	r25, 0x00	; 0
 214:	90 93 99 00 	sts	0x0099, r25
 218:	80 93 98 00 	sts	0x0098, r24
}
 21c:	ff 91       	pop	r31
 21e:	ef 91       	pop	r30
 220:	cf 91       	pop	r28
 222:	bf 91       	pop	r27
 224:	af 91       	pop	r26
 226:	9f 91       	pop	r25
 228:	8f 91       	pop	r24
 22a:	7f 91       	pop	r23
 22c:	6f 91       	pop	r22
 22e:	5f 91       	pop	r21
 230:	4f 91       	pop	r20
 232:	3f 91       	pop	r19
 234:	2f 91       	pop	r18
 236:	1f 91       	pop	r17
 238:	0f 91       	pop	r16
 23a:	0f 90       	pop	r0
 23c:	0b be       	out	0x3b, r0	; 59
 23e:	0f 90       	pop	r0
 240:	0f be       	out	0x3f, r0	; 63
 242:	0f 90       	pop	r0
 244:	1f 90       	pop	r1
 246:	18 95       	reti

00000248 <SetupHardware>:

/** Configures the board hardware and chip peripherals for the demo's functionality. */
void SetupHardware(void)
{
	/* Disable watchdog if enabled by bootloader/fuses */
	MCUSR &= ~(1 << WDRF);
 248:	84 b7       	in	r24, 0x34	; 52
 24a:	87 7f       	andi	r24, 0xF7	; 247
 24c:	84 bf       	out	0x34, r24	; 52
	wdt_disable();
 24e:	88 e1       	ldi	r24, 0x18	; 24
 250:	0f b6       	in	r0, 0x3f	; 63
 252:	f8 94       	cli
 254:	80 93 60 00 	sts	0x0060, r24
 258:	10 92 60 00 	sts	0x0060, r1
 25c:	0f be       	out	0x3f, r0	; 63
The type of x is clock_div_t.
*/
void clock_prescale_set(clock_div_t __x)
{
    uint8_t __tmp = _BV(CLKPCE);
    __asm__ __volatile__ (
 25e:	90 e0       	ldi	r25, 0x00	; 0
 260:	80 e8       	ldi	r24, 0x80	; 128
 262:	0f b6       	in	r0, 0x3f	; 63
 264:	f8 94       	cli
 266:	80 93 61 00 	sts	0x0061, r24
 26a:	90 93 61 00 	sts	0x0061, r25
 26e:	0f be       	out	0x3f, r0	; 63

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void LEDs_Init(void)
			{
				DDRD  |=  LEDS_ALL_LEDS;
 270:	8a b1       	in	r24, 0x0a	; 10
 272:	80 6f       	ori	r24, 0xF0	; 240
 274:	8a b9       	out	0x0a, r24	; 10
				PORTD &= ~LEDS_ALL_LEDS;
 276:	8b b1       	in	r24, 0x0b	; 11
 278:	8f 70       	andi	r24, 0x0F	; 15
 27a:	8b b9       	out	0x0b, r24	; 11
	/* Disable clock division */
	clock_prescale_set(clock_div_1);

	/* Hardware Initialization */
	LEDs_Init();
	USB_Init();
 27c:	ed d2       	rcall	.+1498   	; 0x858 <USB_Init>
 27e:	82 e0       	ldi	r24, 0x02	; 2

	/* Sample reload timer initialization */
	TIMSK0  = (1 << OCIE0A);
 280:	80 93 6e 00 	sts	0x006E, r24
 284:	90 e4       	ldi	r25, 0x40	; 64
	OCR0A   = (VIRTUAL_SAMPLE_TABLE_SIZE / 8);
 286:	97 bd       	out	0x27, r25	; 39
 288:	84 bd       	out	0x24, r24	; 36
	TCCR0A  = (1 << WGM01);  // CTC mode
 28a:	85 bd       	out	0x25, r24	; 37
	TCCR0B  = (1 << CS01);   // Fcpu/8 speed
 28c:	3e 9a       	sbi	0x07, 6	; 7

	/* Set speaker as output */
	DDRC |= (1 << 6);
 28e:	82 ec       	ldi	r24, 0xC2	; 194

	/* PWM speaker timer initialization */
	TCCR3A  = ((1 << WGM31) | (1 << COM3A1) | (1 << COM3A0)); // Set on match, clear on TOP
 290:	80 93 90 00 	sts	0x0090, r24
 294:	89 e0       	ldi	r24, 0x09	; 9
	TCCR3B  = ((1 << WGM32) | (1 << CS30));  // Fast 8-Bit PWM, Fcpu speed
 296:	80 93 91 00 	sts	0x0091, r24
 29a:	08 95       	ret

0000029c <main>:
}
 29c:	cf 93       	push	r28

/** Main program entry point. This routine contains the overall program flow, including initial
 *  setup of all components and the main program loop.
 */
int main(void)
{
 29e:	df 93       	push	r29
 2a0:	00 d0       	rcall	.+0      	; 0x2a2 <main+0x6>
 2a2:	00 d0       	rcall	.+0      	; 0x2a4 <main+0x8>
 2a4:	cd b7       	in	r28, 0x3d	; 61
 2a6:	de b7       	in	r29, 0x3e	; 62
	SetupHardware();
 2a8:	cf df       	rcall	.-98     	; 0x248 <SetupHardware>
 2aa:	80 e1       	ldi	r24, 0x10	; 16

	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
 2ac:	6f df       	rcall	.-290    	; 0x18c <LEDs_SetAllLEDs>
 2ae:	78 94       	sei
 2b0:	80 e0       	ldi	r24, 0x00	; 0
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				sei();
 2b2:	91 e0       	ldi	r25, 0x01	; 1
	GlobalInterruptEnable();

	for (;;)
	{
		MIDI_EventPacket_t ReceivedMIDIEvent;
		if (MIDI_Device_ReceiveEventPacket(&Keyboard_MIDI_Interface, &ReceivedMIDIEvent))
 2b4:	be 01       	movw	r22, r28
 2b6:	6f 5f       	subi	r22, 0xFF	; 255
 2b8:	7f 4f       	sbci	r23, 0xFF	; 255
 2ba:	68 d5       	rcall	.+2768   	; 0xd8c <MIDI_Device_ReceiveEventPacket>
 2bc:	88 23       	and	r24, r24
 2be:	09 f4       	brne	.+2      	; 0x2c2 <main+0x26>
 2c0:	78 c0       	rjmp	.+240    	; 0x3b2 <main+0x116>
 2c2:	89 81       	ldd	r24, Y+1	; 0x01
 2c4:	89 30       	cpi	r24, 0x09	; 9
 2c6:	09 f0       	breq	.+2      	; 0x2ca <main+0x2e>
		{
			if ((ReceivedMIDIEvent.Event == MIDI_EVENT(0, MIDI_COMMAND_NOTE_ON)) && ((ReceivedMIDIEvent.Data1 & 0x0F) == 0))
 2c8:	59 c0       	rjmp	.+178    	; 0x37c <main+0xe0>
 2ca:	8a 81       	ldd	r24, Y+2	; 0x02
 2cc:	90 e0       	ldi	r25, 0x00	; 0
 2ce:	8f 70       	andi	r24, 0x0F	; 15
 2d0:	90 70       	andi	r25, 0x00	; 0
 2d2:	00 97       	sbiw	r24, 0x00	; 0
 2d4:	09 f0       	breq	.+2      	; 0x2d8 <main+0x3c>
 2d6:	6d c0       	rjmp	.+218    	; 0x3b2 <main+0x116>
 2d8:	ec e1       	ldi	r30, 0x1C	; 28
 2da:	f2 e0       	ldi	r31, 0x02	; 2
 2dc:	20 e0       	ldi	r18, 0x00	; 0
 2de:	30 e0       	ldi	r19, 0x00	; 0
 2e0:	8f 01       	movw	r16, r30
 2e2:	81 81       	ldd	r24, Z+1	; 0x01
 2e4:	88 23       	and	r24, r24
 2e6:	79 f4       	brne	.+30     	; 0x306 <main+0x6a>

				/* Find a free entry in the note table to use for the note being turned on */
				for (uint8_t i = 0; i < MAX_SIMULTANEOUS_NOTES; i++)
				{
					/* Check if the note is unused */
					if (!(NoteData[i].Pitch))
 2e8:	82 2f       	mov	r24, r18
 2ea:	90 e0       	ldi	r25, 0x00	; 0
 2ec:	8c 01       	movw	r16, r24
					{
						/* If a note is unused, it's age is essentially infinite - always prefer unused not entries */
						LRUNoteStruct = &NoteData[i];
 2ee:	00 0f       	add	r16, r16
 2f0:	11 1f       	adc	r17, r17
 2f2:	73 e0       	ldi	r23, 0x03	; 3
 2f4:	88 0f       	add	r24, r24
 2f6:	99 1f       	adc	r25, r25
 2f8:	7a 95       	dec	r23
 2fa:	e1 f7       	brne	.-8      	; 0x2f4 <main+0x58>
 2fc:	08 0f       	add	r16, r24
 2fe:	19 1f       	adc	r17, r25
 300:	04 5e       	subi	r16, 0xE4	; 228
 302:	1d 4f       	sbci	r17, 0xFD	; 253
 304:	1a c0       	rjmp	.+52     	; 0x33a <main+0x9e>
 306:	40 81       	ld	r20, Z
 308:	d8 01       	movw	r26, r16
						break;
 30a:	8c 91       	ld	r24, X
					}
					else if (NoteData[i].LRUAge >= LRUNoteStruct->LRUAge)
 30c:	48 17       	cp	r20, r24
 30e:	68 f0       	brcs	.+26     	; 0x32a <main+0x8e>
 310:	89 01       	movw	r16, r18
 312:	00 0f       	add	r16, r16
 314:	11 1f       	adc	r17, r17
					{
						/* If an older entry that the current entry has been found, prefer overwriting that one */
						LRUNoteStruct = &NoteData[i];
 316:	c9 01       	movw	r24, r18
 318:	53 e0       	ldi	r21, 0x03	; 3
 31a:	88 0f       	add	r24, r24
 31c:	99 1f       	adc	r25, r25
 31e:	5a 95       	dec	r21
 320:	e1 f7       	brne	.-8      	; 0x31a <main+0x7e>
 322:	08 0f       	add	r16, r24
 324:	19 1f       	adc	r17, r25
 326:	04 5e       	subi	r16, 0xE4	; 228
 328:	1d 4f       	sbci	r17, 0xFD	; 253
 32a:	4f 5f       	subi	r20, 0xFF	; 255
 32c:	40 83       	st	Z, r20
 32e:	2f 5f       	subi	r18, 0xFF	; 255
					}

					NoteData[i].LRUAge++;
 330:	3f 4f       	sbci	r19, 0xFF	; 255
 332:	3a 96       	adiw	r30, 0x0a	; 10
 334:	23 30       	cpi	r18, 0x03	; 3
 336:	31 05       	cpc	r19, r1
 338:	a1 f6       	brne	.-88     	; 0x2e2 <main+0x46>
			if ((ReceivedMIDIEvent.Event == MIDI_EVENT(0, MIDI_COMMAND_NOTE_ON)) && ((ReceivedMIDIEvent.Data1 & 0x0F) == 0))
			{
				DDSNoteData* LRUNoteStruct = &NoteData[0];

				/* Find a free entry in the note table to use for the note being turned on */
				for (uint8_t i = 0; i < MAX_SIMULTANEOUS_NOTES; i++)
 33a:	6b 81       	ldd	r22, Y+3	; 0x03
 33c:	f8 01       	movw	r30, r16
 33e:	61 83       	std	Z+1, r22	; 0x01

					NoteData[i].LRUAge++;
				}

				/* Update the oldest note entry with the new note data and reset its age */
				LRUNoteStruct->Pitch          = ReceivedMIDIEvent.Data2;
 340:	70 e0       	ldi	r23, 0x00	; 0
 342:	65 51       	subi	r22, 0x15	; 21
 344:	70 40       	sbci	r23, 0x00	; 0
				LRUNoteStruct->TableIncrement = (uint32_t)(BASE_INCREMENT * SCALE_FACTOR) +
						                         ((uint32_t)(BASE_INCREMENT * NOTE_OCTIVE_RATIO * SCALE_FACTOR) *
						                          (ReceivedMIDIEvent.Data2 - BASE_PITCH_INDEX));
 346:	88 27       	eor	r24, r24
 348:	77 fd       	sbrc	r23, 7
 34a:	80 95       	com	r24
				}

				/* Update the oldest note entry with the new note data and reset its age */
				LRUNoteStruct->Pitch          = ReceivedMIDIEvent.Data2;
				LRUNoteStruct->TableIncrement = (uint32_t)(BASE_INCREMENT * SCALE_FACTOR) +
						                         ((uint32_t)(BASE_INCREMENT * NOTE_OCTIVE_RATIO * SCALE_FACTOR) *
 34c:	98 2f       	mov	r25, r24
 34e:	26 eb       	ldi	r18, 0xB6	; 182
 350:	36 ef       	ldi	r19, 0xF6	; 246
 352:	4c e2       	ldi	r20, 0x2C	; 44
 354:	51 e0       	ldi	r21, 0x01	; 1
 356:	3b d5       	rcall	.+2678   	; 0xdce <__mulsi3>
 358:	dc 01       	movw	r26, r24
 35a:	cb 01       	movw	r24, r22
 35c:	82 56       	subi	r24, 0x62	; 98
 35e:	9d 4e       	sbci	r25, 0xED	; 237
 360:	a3 4e       	sbci	r26, 0xE3	; 227
 362:	be 4f       	sbci	r27, 0xFE	; 254
					NoteData[i].LRUAge++;
				}

				/* Update the oldest note entry with the new note data and reset its age */
				LRUNoteStruct->Pitch          = ReceivedMIDIEvent.Data2;
				LRUNoteStruct->TableIncrement = (uint32_t)(BASE_INCREMENT * SCALE_FACTOR) +
 364:	f8 01       	movw	r30, r16
 366:	82 83       	std	Z+2, r24	; 0x02
 368:	93 83       	std	Z+3, r25	; 0x03
 36a:	a4 83       	std	Z+4, r26	; 0x04
 36c:	b5 83       	std	Z+5, r27	; 0x05
 36e:	16 82       	std	Z+6, r1	; 0x06
 370:	17 82       	std	Z+7, r1	; 0x07
 372:	10 86       	std	Z+8, r1	; 0x08
 374:	11 86       	std	Z+9, r1	; 0x09
						                         ((uint32_t)(BASE_INCREMENT * NOTE_OCTIVE_RATIO * SCALE_FACTOR) *
						                          (ReceivedMIDIEvent.Data2 - BASE_PITCH_INDEX));
				LRUNoteStruct->TablePosition  = 0;
 376:	10 82       	st	Z, r1
 378:	80 e1       	ldi	r24, 0x10	; 16
 37a:	1a c0       	rjmp	.+52     	; 0x3b0 <main+0x114>
 37c:	88 30       	cpi	r24, 0x08	; 8
				LRUNoteStruct->LRUAge         = 0;
 37e:	c9 f4       	brne	.+50     	; 0x3b2 <main+0x116>

				/* Turn on indicator LED to indicate note generation activity */
				LEDs_SetAllLEDs(LEDS_LED1);
 380:	8a 81       	ldd	r24, Y+2	; 0x02
 382:	90 e0       	ldi	r25, 0x00	; 0
			}
			else if ((ReceivedMIDIEvent.Event == MIDI_EVENT(0, MIDI_COMMAND_NOTE_OFF)) && ((ReceivedMIDIEvent.Data1 & 0x0F) == 0))
 384:	8f 70       	andi	r24, 0x0F	; 15
 386:	90 70       	andi	r25, 0x00	; 0
 388:	00 97       	sbiw	r24, 0x00	; 0
 38a:	99 f4       	brne	.+38     	; 0x3b2 <main+0x116>
 38c:	3b 81       	ldd	r19, Y+3	; 0x03
 38e:	ed e1       	ldi	r30, 0x1D	; 29
 390:	f2 e0       	ldi	r31, 0x02	; 2
 392:	83 e0       	ldi	r24, 0x03	; 3
				bool FoundActiveNote = false;

				/* Find the note in the note table to turn off */
				for (uint8_t i = 0; i < MAX_SIMULTANEOUS_NOTES; i++)
				{
					if (NoteData[i].Pitch == ReceivedMIDIEvent.Data2)
 394:	90 e0       	ldi	r25, 0x00	; 0
 396:	20 81       	ld	r18, Z
 398:	23 17       	cp	r18, r19
 39a:	11 f4       	brne	.+4      	; 0x3a0 <main+0x104>
 39c:	10 82       	st	Z, r1
 39e:	02 c0       	rjmp	.+4      	; 0x3a4 <main+0x108>
 3a0:	21 11       	cpse	r18, r1
 3a2:	91 e0       	ldi	r25, 0x01	; 1
					  NoteData[i].Pitch = 0;
 3a4:	81 50       	subi	r24, 0x01	; 1
 3a6:	3a 96       	adiw	r30, 0x0a	; 10
					else if (NoteData[i].Pitch)
 3a8:	88 23       	and	r24, r24
					  FoundActiveNote   = true;
 3aa:	a9 f7       	brne	.-22     	; 0x396 <main+0xfa>
				/* Find the note in the note table to turn off */
				for (uint8_t i = 0; i < MAX_SIMULTANEOUS_NOTES; i++)
				{
					if (NoteData[i].Pitch == ReceivedMIDIEvent.Data2)
					  NoteData[i].Pitch = 0;
					else if (NoteData[i].Pitch)
 3ac:	99 23       	and	r25, r25
 3ae:	09 f4       	brne	.+2      	; 0x3b2 <main+0x116>
			else if ((ReceivedMIDIEvent.Event == MIDI_EVENT(0, MIDI_COMMAND_NOTE_OFF)) && ((ReceivedMIDIEvent.Data1 & 0x0F) == 0))
			{
				bool FoundActiveNote = false;

				/* Find the note in the note table to turn off */
				for (uint8_t i = 0; i < MAX_SIMULTANEOUS_NOTES; i++)
 3b0:	ed de       	rcall	.-550    	; 0x18c <LEDs_SetAllLEDs>
 3b2:	80 e0       	ldi	r24, 0x00	; 0
					else if (NoteData[i].Pitch)
					  FoundActiveNote   = true;
				}

				/* If all notes off, turn off the indicator LED */
				if (!(FoundActiveNote))
 3b4:	91 e0       	ldi	r25, 0x01	; 1
 3b6:	dc d4       	rcall	.+2488   	; 0xd70 <MIDI_Device_USBTask>
				  LEDs_SetAllLEDs(LEDS_NO_LEDS);
 3b8:	92 d4       	rcall	.+2340   	; 0xcde <USB_USBTask>
 3ba:	7a cf       	rjmp	.-268    	; 0x2b0 <main+0x14>

000003bc <EVENT_USB_Device_Connect>:
			}
		}

		MIDI_Device_USBTask(&Keyboard_MIDI_Interface);
 3bc:	80 ea       	ldi	r24, 0xA0	; 160
 3be:	e6 de       	rcall	.-564    	; 0x18c <LEDs_SetAllLEDs>
 3c0:	3e 9a       	sbi	0x07, 6	; 7
 3c2:	08 95       	ret

000003c4 <EVENT_USB_Device_Disconnect>:
		USB_USBTask();
 3c4:	80 e1       	ldi	r24, 0x10	; 16
 3c6:	e2 de       	rcall	.-572    	; 0x18c <LEDs_SetAllLEDs>
	}
 3c8:	10 92 1d 02 	sts	0x021D, r1
{
	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);

	/* Disable any notes currently being played */
	for (uint8_t i = 0; i < MAX_SIMULTANEOUS_NOTES; i++)
	  NoteData[i].Pitch = 0;
 3cc:	10 92 27 02 	sts	0x0227, r1
 3d0:	10 92 31 02 	sts	0x0231, r1
 3d4:	3e 98       	cbi	0x07, 6	; 7

	/* Set speaker as input to reduce current draw */
	DDRC &= ~(1 << 6);
 3d6:	08 95       	ret

000003d8 <EVENT_USB_Device_ConfigurationChanged>:
}
 3d8:	80 e0       	ldi	r24, 0x00	; 0
/** Event handler for the library USB Configuration Changed event. */
void EVENT_USB_Device_ConfigurationChanged(void)
{
	bool ConfigSuccess = true;

	ConfigSuccess &= MIDI_Device_ConfigureEndpoints(&Keyboard_MIDI_Interface);
 3da:	91 e0       	ldi	r25, 0x01	; 1
 3dc:	9b d4       	rcall	.+2358   	; 0xd14 <MIDI_Device_ConfigureEndpoints>
 3de:	88 23       	and	r24, r24

	LEDs_SetAllLEDs(ConfigSuccess ? LEDMASK_USB_READY : LEDMASK_USB_ERROR);
 3e0:	11 f0       	breq	.+4      	; 0x3e6 <EVENT_USB_Device_ConfigurationChanged+0xe>
 3e2:	80 e6       	ldi	r24, 0x60	; 96
 3e4:	01 c0       	rjmp	.+2      	; 0x3e8 <EVENT_USB_Device_ConfigurationChanged+0x10>
 3e6:	80 e9       	ldi	r24, 0x90	; 144
 3e8:	d1 ce       	rjmp	.-606    	; 0x18c <LEDs_SetAllLEDs>

000003ea <EVENT_USB_Device_ControlRequest>:
 3ea:	08 95       	ret

000003ec <CALLBACK_USB_GetDescriptor>:
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
 3ec:	92 30       	cpi	r25, 0x02	; 2
 3ee:	29 f0       	breq	.+10     	; 0x3fa <CALLBACK_USB_GetDescriptor+0xe>
 3f0:	93 30       	cpi	r25, 0x03	; 3
 3f2:	41 f0       	breq	.+16     	; 0x404 <CALLBACK_USB_GetDescriptor+0x18>
 3f4:	91 30       	cpi	r25, 0x01	; 1
 3f6:	e9 f4       	brne	.+58     	; 0x432 <CALLBACK_USB_GetDescriptor+0x46>
 3f8:	17 c0       	rjmp	.+46     	; 0x428 <CALLBACK_USB_GetDescriptor+0x3c>
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
			Size    = sizeof(USB_Descriptor_Configuration_t);
 3fa:	85 e6       	ldi	r24, 0x65	; 101
 3fc:	90 e0       	ldi	r25, 0x00	; 0
		case DTYPE_Device:
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
 3fe:	e6 ed       	ldi	r30, 0xD6	; 214
 400:	f0 e0       	ldi	r31, 0x00	; 0
			Size    = sizeof(USB_Descriptor_Configuration_t);
			break;
 402:	1b c0       	rjmp	.+54     	; 0x43a <CALLBACK_USB_GetDescriptor+0x4e>
		case DTYPE_String:
			switch (DescriptorNumber)
 404:	81 30       	cpi	r24, 0x01	; 1
 406:	41 f0       	breq	.+16     	; 0x418 <CALLBACK_USB_GetDescriptor+0x2c>
 408:	81 30       	cpi	r24, 0x01	; 1
 40a:	18 f0       	brcs	.+6      	; 0x412 <CALLBACK_USB_GetDescriptor+0x26>
 40c:	82 30       	cpi	r24, 0x02	; 2
 40e:	89 f4       	brne	.+34     	; 0x432 <CALLBACK_USB_GetDescriptor+0x46>
 410:	06 c0       	rjmp	.+12     	; 0x41e <CALLBACK_USB_GetDescriptor+0x32>
			{
				case 0x00:
					Address = &LanguageString;
					Size    = pgm_read_byte(&LanguageString.Header.Size);
 412:	e2 ed       	ldi	r30, 0xD2	; 210
 414:	f0 e0       	ldi	r31, 0x00	; 0
 416:	05 c0       	rjmp	.+10     	; 0x422 <CALLBACK_USB_GetDescriptor+0x36>
					break;
				case 0x01:
					Address = &ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
 418:	e8 eb       	ldi	r30, 0xB8	; 184
 41a:	f0 e0       	ldi	r31, 0x00	; 0
 41c:	02 c0       	rjmp	.+4      	; 0x422 <CALLBACK_USB_GetDescriptor+0x36>
					break;
				case 0x02:
					Address = &ProductString;
					Size    = pgm_read_byte(&ProductString.Header.Size);
 41e:	e8 e9       	ldi	r30, 0x98	; 152
 420:	f0 e0       	ldi	r31, 0x00	; 0
 422:	84 91       	lpm	r24, Z
 424:	90 e0       	ldi	r25, 0x00	; 0
					break;
 426:	09 c0       	rjmp	.+18     	; 0x43a <CALLBACK_USB_GetDescriptor+0x4e>

	switch (DescriptorType)
	{
		case DTYPE_Device:
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
 428:	82 e1       	ldi	r24, 0x12	; 18
 42a:	90 e0       	ldi	r25, 0x00	; 0
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
	{
		case DTYPE_Device:
			Address = &DeviceDescriptor;
 42c:	eb e3       	ldi	r30, 0x3B	; 59
 42e:	f1 e0       	ldi	r31, 0x01	; 1
 430:	04 c0       	rjmp	.+8      	; 0x43a <CALLBACK_USB_GetDescriptor+0x4e>
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;
 432:	80 e0       	ldi	r24, 0x00	; 0
 434:	90 e0       	ldi	r25, 0x00	; 0
                                    const void** const DescriptorAddress)
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
 436:	e0 e0       	ldi	r30, 0x00	; 0
 438:	f0 e0       	ldi	r31, 0x00	; 0
			}

			break;
	}

	*DescriptorAddress = Address;
 43a:	da 01       	movw	r26, r20
 43c:	11 96       	adiw	r26, 0x01	; 1
 43e:	fc 93       	st	X, r31
 440:	ee 93       	st	-X, r30
	return Size;
}
 442:	08 95       	ret

00000444 <Endpoint_Read_Stream_LE>:
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
 444:	af 92       	push	r10
 446:	bf 92       	push	r11
 448:	cf 92       	push	r12
 44a:	df 92       	push	r13
 44c:	ef 92       	push	r14
 44e:	ff 92       	push	r15
 450:	1f 93       	push	r17
 452:	cf 93       	push	r28
 454:	df 93       	push	r29
 456:	ec 01       	movw	r28, r24
 458:	7b 01       	movw	r14, r22
 45a:	6a 01       	movw	r12, r20
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	uint16_t BytesInTransfer = 0;
	uint8_t  ErrorCode;

	if ((ErrorCode = Endpoint_WaitUntilReady()))
 45c:	87 d1       	rcall	.+782    	; 0x76c <Endpoint_WaitUntilReady>
 45e:	18 2f       	mov	r17, r24
 460:	88 23       	and	r24, r24
 462:	a9 f5       	brne	.+106    	; 0x4ce <Endpoint_Read_Stream_LE+0x8a>
 464:	c1 14       	cp	r12, r1
	  return ErrorCode;

	if (BytesProcessed != NULL)
 466:	d1 04       	cpc	r13, r1
 468:	39 f0       	breq	.+14     	; 0x478 <Endpoint_Read_Stream_LE+0x34>
 46a:	f6 01       	movw	r30, r12
	{
		Length -= *BytesProcessed;
 46c:	20 81       	ld	r18, Z
 46e:	31 81       	ldd	r19, Z+1	; 0x01
 470:	e2 1a       	sub	r14, r18
 472:	f3 0a       	sbc	r15, r19
 474:	c2 0f       	add	r28, r18
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
 476:	d3 1f       	adc	r29, r19
 478:	aa 24       	eor	r10, r10

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
 47a:	bb 24       	eor	r11, r11
 47c:	23 c0       	rjmp	.+70     	; 0x4c4 <Endpoint_Read_Stream_LE+0x80>
 47e:	80 91 e8 00 	lds	r24, 0x00E8
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
 482:	85 fd       	sbrc	r24, 5
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
	{
		if (!(Endpoint_IsReadWriteAllowed()))
 484:	16 c0       	rjmp	.+44     	; 0x4b2 <Endpoint_Read_Stream_LE+0x6e>
 486:	80 91 e8 00 	lds	r24, 0x00E8
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 48a:	8b 77       	andi	r24, 0x7B	; 123
 48c:	80 93 e8 00 	sts	0x00E8, r24
 490:	26 d4       	rcall	.+2124   	; 0xcde <USB_USBTask>
		{
			TEMPLATE_CLEAR_ENDPOINT();

			#if !defined(INTERRUPT_CONTROL_ENDPOINT)
			USB_USBTask();
 492:	c1 14       	cp	r12, r1
 494:	d1 04       	cpc	r13, r1
			#endif

			if (BytesProcessed != NULL)
 496:	49 f0       	breq	.+18     	; 0x4aa <Endpoint_Read_Stream_LE+0x66>
 498:	f6 01       	movw	r30, r12
 49a:	80 81       	ld	r24, Z
			{
				*BytesProcessed += BytesInTransfer;
 49c:	91 81       	ldd	r25, Z+1	; 0x01
 49e:	8a 0d       	add	r24, r10
 4a0:	9b 1d       	adc	r25, r11
 4a2:	91 83       	std	Z+1, r25	; 0x01
 4a4:	80 83       	st	Z, r24
 4a6:	15 e0       	ldi	r17, 0x05	; 5
 4a8:	12 c0       	rjmp	.+36     	; 0x4ce <Endpoint_Read_Stream_LE+0x8a>
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
 4aa:	60 d1       	rcall	.+704    	; 0x76c <Endpoint_WaitUntilReady>
 4ac:	88 23       	and	r24, r24
			}

			if ((ErrorCode = Endpoint_WaitUntilReady()))
 4ae:	51 f0       	breq	.+20     	; 0x4c4 <Endpoint_Read_Stream_LE+0x80>
 4b0:	0d c0       	rjmp	.+26     	; 0x4cc <Endpoint_Read_Stream_LE+0x88>
 4b2:	80 91 f1 00 	lds	r24, 0x00F1
 4b6:	89 93       	st	Y+, r24
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
 4b8:	08 94       	sec
 4ba:	e1 08       	sbc	r14, r1
			  return ErrorCode;
		}
		else
		{
			TEMPLATE_TRANSFER_BYTE(DataStream);
 4bc:	f1 08       	sbc	r15, r1
			TEMPLATE_BUFFER_MOVE(DataStream, 1);
			Length--;
 4be:	08 94       	sec
 4c0:	a1 1c       	adc	r10, r1
 4c2:	b1 1c       	adc	r11, r1
			BytesInTransfer++;
 4c4:	e1 14       	cp	r14, r1
 4c6:	f1 04       	cpc	r15, r1
 4c8:	d1 f6       	brne	.-76     	; 0x47e <Endpoint_Read_Stream_LE+0x3a>
	{
		Length -= *BytesProcessed;
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
 4ca:	01 c0       	rjmp	.+2      	; 0x4ce <Endpoint_Read_Stream_LE+0x8a>
 4cc:	18 2f       	mov	r17, r24
 4ce:	81 2f       	mov	r24, r17
 4d0:	df 91       	pop	r29
			{
				*BytesProcessed += BytesInTransfer;
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
			}

			if ((ErrorCode = Endpoint_WaitUntilReady()))
 4d2:	cf 91       	pop	r28
			BytesInTransfer++;
		}
	}

	return ENDPOINT_RWSTREAM_NoError;
}
 4d4:	1f 91       	pop	r17
 4d6:	ff 90       	pop	r15
 4d8:	ef 90       	pop	r14
 4da:	df 90       	pop	r13
 4dc:	cf 90       	pop	r12
 4de:	bf 90       	pop	r11
 4e0:	af 90       	pop	r10
 4e2:	08 95       	ret

000004e4 <Endpoint_Write_Control_Stream_LE>:
 4e4:	20 91 44 02 	lds	r18, 0x0244
 4e8:	30 91 45 02 	lds	r19, 0x0245
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
 4ec:	26 17       	cp	r18, r22
 4ee:	37 07       	cpc	r19, r23
 4f0:	20 f4       	brcc	.+8      	; 0x4fa <Endpoint_Write_Control_Stream_LE+0x16>
 4f2:	b9 01       	movw	r22, r18
 4f4:	fc 01       	movw	r30, r24
 4f6:	20 e0       	ldi	r18, 0x00	; 0
 4f8:	35 c0       	rjmp	.+106    	; 0x564 <Endpoint_Write_Control_Stream_LE+0x80>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
 4fa:	61 15       	cp	r22, r1
 4fc:	71 05       	cpc	r23, r1
 4fe:	d1 f7       	brne	.-12     	; 0x4f4 <Endpoint_Write_Control_Stream_LE+0x10>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 500:	20 91 e8 00 	lds	r18, 0x00E8
 504:	2e 77       	andi	r18, 0x7E	; 126
 506:	20 93 e8 00 	sts	0x00E8, r18
 50a:	f4 cf       	rjmp	.-24     	; 0x4f4 <Endpoint_Write_Control_Stream_LE+0x10>
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
 50c:	8e b3       	in	r24, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
 50e:	88 23       	and	r24, r24
 510:	f1 f1       	breq	.+124    	; 0x58e <Endpoint_Write_Control_Stream_LE+0xaa>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
 512:	85 30       	cpi	r24, 0x05	; 5
 514:	c1 f1       	breq	.+112    	; 0x586 <Endpoint_Write_Control_Stream_LE+0xa2>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 516:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
 51a:	83 fd       	sbrc	r24, 3
 51c:	36 c0       	rjmp	.+108    	; 0x58a <Endpoint_Write_Control_Stream_LE+0xa6>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 51e:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
 522:	82 fd       	sbrc	r24, 2
 524:	2a c0       	rjmp	.+84     	; 0x57a <Endpoint_Write_Control_Stream_LE+0x96>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 526:	80 91 e8 00 	lds	r24, 0x00E8
		  break;

		if (Endpoint_IsINReady())
 52a:	80 ff       	sbrs	r24, 0
 52c:	1b c0       	rjmp	.+54     	; 0x564 <Endpoint_Write_Control_Stream_LE+0x80>
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
 52e:	80 91 f2 00 	lds	r24, 0x00F2
 532:	90 91 f3 00 	lds	r25, 0x00F3
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
 536:	06 c0       	rjmp	.+12     	; 0x544 <Endpoint_Write_Control_Stream_LE+0x60>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
 538:	21 91       	ld	r18, Z+
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
 53a:	20 93 f1 00 	sts	0x00F1, r18
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
 53e:	61 50       	subi	r22, 0x01	; 1
 540:	70 40       	sbci	r23, 0x00	; 0
				BytesInEndpoint++;
 542:	01 96       	adiw	r24, 0x01	; 1

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
 544:	61 15       	cp	r22, r1
 546:	71 05       	cpc	r23, r1
 548:	19 f0       	breq	.+6      	; 0x550 <Endpoint_Write_Control_Stream_LE+0x6c>
 54a:	88 30       	cpi	r24, 0x08	; 8
 54c:	91 05       	cpc	r25, r1
 54e:	a0 f3       	brcs	.-24     	; 0x538 <Endpoint_Write_Control_Stream_LE+0x54>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
 550:	21 e0       	ldi	r18, 0x01	; 1
 552:	88 30       	cpi	r24, 0x08	; 8
 554:	91 05       	cpc	r25, r1
 556:	09 f0       	breq	.+2      	; 0x55a <Endpoint_Write_Control_Stream_LE+0x76>
 558:	20 e0       	ldi	r18, 0x00	; 0
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 55a:	80 91 e8 00 	lds	r24, 0x00E8
 55e:	8e 77       	andi	r24, 0x7E	; 126
 560:	80 93 e8 00 	sts	0x00E8, r24
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
 564:	61 15       	cp	r22, r1
 566:	71 05       	cpc	r23, r1
 568:	89 f6       	brne	.-94     	; 0x50c <Endpoint_Write_Control_Stream_LE+0x28>
 56a:	22 23       	and	r18, r18
 56c:	79 f6       	brne	.-98     	; 0x50c <Endpoint_Write_Control_Stream_LE+0x28>
 56e:	05 c0       	rjmp	.+10     	; 0x57a <Endpoint_Write_Control_Stream_LE+0x96>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
 570:	8e b3       	in	r24, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
 572:	88 23       	and	r24, r24
 574:	61 f0       	breq	.+24     	; 0x58e <Endpoint_Write_Control_Stream_LE+0xaa>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
 576:	85 30       	cpi	r24, 0x05	; 5
 578:	61 f0       	breq	.+24     	; 0x592 <Endpoint_Write_Control_Stream_LE+0xae>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 57a:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
 57e:	82 ff       	sbrs	r24, 2
 580:	f7 cf       	rjmp	.-18     	; 0x570 <Endpoint_Write_Control_Stream_LE+0x8c>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
 582:	80 e0       	ldi	r24, 0x00	; 0
 584:	08 95       	ret
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
 586:	83 e0       	ldi	r24, 0x03	; 3
 588:	08 95       	ret
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
 58a:	81 e0       	ldi	r24, 0x01	; 1
 58c:	08 95       	ret
	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
 58e:	82 e0       	ldi	r24, 0x02	; 2
 590:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
 592:	83 e0       	ldi	r24, 0x03	; 3
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
 594:	08 95       	ret

00000596 <Endpoint_Write_Control_PStream_LE>:
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
 596:	20 91 44 02 	lds	r18, 0x0244
 59a:	30 91 45 02 	lds	r19, 0x0245
 59e:	26 17       	cp	r18, r22
 5a0:	37 07       	cpc	r19, r23
 5a2:	20 f4       	brcc	.+8      	; 0x5ac <Endpoint_Write_Control_PStream_LE+0x16>
 5a4:	b9 01       	movw	r22, r18
 5a6:	fc 01       	movw	r30, r24
 5a8:	20 e0       	ldi	r18, 0x00	; 0
 5aa:	37 c0       	rjmp	.+110    	; 0x61a <Endpoint_Write_Control_PStream_LE+0x84>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
 5ac:	61 15       	cp	r22, r1
 5ae:	71 05       	cpc	r23, r1
 5b0:	d1 f7       	brne	.-12     	; 0x5a6 <Endpoint_Write_Control_PStream_LE+0x10>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 5b2:	20 91 e8 00 	lds	r18, 0x00E8
 5b6:	2e 77       	andi	r18, 0x7E	; 126
 5b8:	20 93 e8 00 	sts	0x00E8, r18
 5bc:	f4 cf       	rjmp	.-24     	; 0x5a6 <Endpoint_Write_Control_PStream_LE+0x10>
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
 5be:	8e b3       	in	r24, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
 5c0:	88 23       	and	r24, r24
 5c2:	09 f4       	brne	.+2      	; 0x5c6 <Endpoint_Write_Control_PStream_LE+0x30>
 5c4:	3f c0       	rjmp	.+126    	; 0x644 <Endpoint_Write_Control_PStream_LE+0xae>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
 5c6:	85 30       	cpi	r24, 0x05	; 5
 5c8:	c9 f1       	breq	.+114    	; 0x63c <Endpoint_Write_Control_PStream_LE+0xa6>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 5ca:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
 5ce:	83 fd       	sbrc	r24, 3
 5d0:	37 c0       	rjmp	.+110    	; 0x640 <Endpoint_Write_Control_PStream_LE+0xaa>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 5d2:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
 5d6:	82 fd       	sbrc	r24, 2
 5d8:	2b c0       	rjmp	.+86     	; 0x630 <Endpoint_Write_Control_PStream_LE+0x9a>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 5da:	80 91 e8 00 	lds	r24, 0x00E8
		  break;

		if (Endpoint_IsINReady())
 5de:	80 ff       	sbrs	r24, 0
 5e0:	1c c0       	rjmp	.+56     	; 0x61a <Endpoint_Write_Control_PStream_LE+0x84>
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
 5e2:	80 91 f2 00 	lds	r24, 0x00F2
 5e6:	90 91 f3 00 	lds	r25, 0x00F3
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
 5ea:	07 c0       	rjmp	.+14     	; 0x5fa <Endpoint_Write_Control_PStream_LE+0x64>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
 5ec:	24 91       	lpm	r18, Z
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
 5ee:	20 93 f1 00 	sts	0x00F1, r18
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
 5f2:	31 96       	adiw	r30, 0x01	; 1
				Length--;
 5f4:	61 50       	subi	r22, 0x01	; 1
 5f6:	70 40       	sbci	r23, 0x00	; 0
				BytesInEndpoint++;
 5f8:	01 96       	adiw	r24, 0x01	; 1

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
 5fa:	61 15       	cp	r22, r1
 5fc:	71 05       	cpc	r23, r1
 5fe:	19 f0       	breq	.+6      	; 0x606 <Endpoint_Write_Control_PStream_LE+0x70>
 600:	88 30       	cpi	r24, 0x08	; 8
 602:	91 05       	cpc	r25, r1
 604:	98 f3       	brcs	.-26     	; 0x5ec <Endpoint_Write_Control_PStream_LE+0x56>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
 606:	21 e0       	ldi	r18, 0x01	; 1
 608:	88 30       	cpi	r24, 0x08	; 8
 60a:	91 05       	cpc	r25, r1
 60c:	09 f0       	breq	.+2      	; 0x610 <Endpoint_Write_Control_PStream_LE+0x7a>
 60e:	20 e0       	ldi	r18, 0x00	; 0
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 610:	80 91 e8 00 	lds	r24, 0x00E8
 614:	8e 77       	andi	r24, 0x7E	; 126
 616:	80 93 e8 00 	sts	0x00E8, r24
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
 61a:	61 15       	cp	r22, r1
 61c:	71 05       	cpc	r23, r1
 61e:	79 f6       	brne	.-98     	; 0x5be <Endpoint_Write_Control_PStream_LE+0x28>
 620:	22 23       	and	r18, r18
 622:	69 f6       	brne	.-102    	; 0x5be <Endpoint_Write_Control_PStream_LE+0x28>
 624:	05 c0       	rjmp	.+10     	; 0x630 <Endpoint_Write_Control_PStream_LE+0x9a>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
 626:	8e b3       	in	r24, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
 628:	88 23       	and	r24, r24
 62a:	61 f0       	breq	.+24     	; 0x644 <Endpoint_Write_Control_PStream_LE+0xae>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
 62c:	85 30       	cpi	r24, 0x05	; 5
 62e:	61 f0       	breq	.+24     	; 0x648 <Endpoint_Write_Control_PStream_LE+0xb2>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 630:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
 634:	82 ff       	sbrs	r24, 2
 636:	f7 cf       	rjmp	.-18     	; 0x626 <Endpoint_Write_Control_PStream_LE+0x90>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
 638:	80 e0       	ldi	r24, 0x00	; 0
 63a:	08 95       	ret
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
 63c:	83 e0       	ldi	r24, 0x03	; 3
 63e:	08 95       	ret
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
 640:	81 e0       	ldi	r24, 0x01	; 1
 642:	08 95       	ret
	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
 644:	82 e0       	ldi	r24, 0x02	; 2
 646:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
 648:	83 e0       	ldi	r24, 0x03	; 3
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
 64a:	08 95       	ret

0000064c <Endpoint_ConfigureEndpoint_Prv>:
	UECFG0X = UECFG0XData;
	UECFG1X = UECFG1XData;

	return Endpoint_IsConfigured();
#else
	for (uint8_t EPNum = Number; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
 64c:	98 2f       	mov	r25, r24
 64e:	2a c0       	rjmp	.+84     	; 0x6a4 <Endpoint_ConfigureEndpoint_Prv+0x58>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 650:	90 93 e9 00 	sts	0x00E9, r25
		uint8_t UECFG1XTemp;
		uint8_t UEIENXTemp;

		Endpoint_SelectEndpoint(EPNum);

		if (EPNum == Number)
 654:	98 17       	cp	r25, r24
 656:	39 f0       	breq	.+14     	; 0x666 <Endpoint_ConfigureEndpoint_Prv+0x1a>
			UECFG1XTemp = UECFG1XData;
			UEIENXTemp  = 0;
		}
		else
		{
			UECFG0XTemp = UECFG0X;
 658:	70 91 ec 00 	lds	r23, 0x00EC
			UECFG1XTemp = UECFG1X;
 65c:	20 91 ed 00 	lds	r18, 0x00ED
			UEIENXTemp  = UEIENX;
 660:	50 91 f0 00 	lds	r21, 0x00F0
 664:	03 c0       	rjmp	.+6      	; 0x66c <Endpoint_ConfigureEndpoint_Prv+0x20>
		Endpoint_SelectEndpoint(EPNum);

		if (EPNum == Number)
		{
			UECFG0XTemp = UECFG0XData;
			UECFG1XTemp = UECFG1XData;
 666:	24 2f       	mov	r18, r20

		Endpoint_SelectEndpoint(EPNum);

		if (EPNum == Number)
		{
			UECFG0XTemp = UECFG0XData;
 668:	76 2f       	mov	r23, r22
			UECFG1XTemp = UECFG1XData;
			UEIENXTemp  = 0;
 66a:	50 e0       	ldi	r21, 0x00	; 0
			UECFG0XTemp = UECFG0X;
			UECFG1XTemp = UECFG1X;
			UEIENXTemp  = UEIENX;
		}

		if (!(UECFG1XTemp & (1 << ALLOC)))
 66c:	21 ff       	sbrs	r18, 1
 66e:	19 c0       	rjmp	.+50     	; 0x6a2 <Endpoint_ConfigureEndpoint_Prv+0x56>
			 *  to and from a host.
			 */
			static inline void Endpoint_DisableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_DisableEndpoint(void)
			{
				UECONX &= ~(1 << EPEN);
 670:	30 91 eb 00 	lds	r19, 0x00EB
 674:	3e 7f       	andi	r19, 0xFE	; 254
 676:	30 93 eb 00 	sts	0x00EB, r19
		  continue;

		Endpoint_DisableEndpoint();
		UECFG1X &= ~(1 << ALLOC);
 67a:	30 91 ed 00 	lds	r19, 0x00ED
 67e:	3d 7f       	andi	r19, 0xFD	; 253
 680:	30 93 ed 00 	sts	0x00ED, r19
			 *  \note Endpoints must first be configured properly via \ref Endpoint_ConfigureEndpoint().
			 */
			static inline void Endpoint_EnableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_EnableEndpoint(void)
			{
				UECONX |= (1 << EPEN);
 684:	30 91 eb 00 	lds	r19, 0x00EB
 688:	31 60       	ori	r19, 0x01	; 1
 68a:	30 93 eb 00 	sts	0x00EB, r19

		Endpoint_EnableEndpoint();
		UECFG0X = UECFG0XTemp;
 68e:	70 93 ec 00 	sts	0x00EC, r23
		UECFG1X = UECFG1XTemp;
 692:	20 93 ed 00 	sts	0x00ED, r18
		UEIENX  = UEIENXTemp;
 696:	50 93 f0 00 	sts	0x00F0, r21
			 *  \return Boolean \c true if the currently selected endpoint has been configured, \c false otherwise.
			 */
			static inline bool Endpoint_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsConfigured(void)
			{
				return ((UESTA0X & (1 << CFGOK)) ? true : false);
 69a:	20 91 ee 00 	lds	r18, 0x00EE

		if (!(Endpoint_IsConfigured()))
 69e:	27 ff       	sbrs	r18, 7
 6a0:	08 c0       	rjmp	.+16     	; 0x6b2 <Endpoint_ConfigureEndpoint_Prv+0x66>
	UECFG0X = UECFG0XData;
	UECFG1X = UECFG1XData;

	return Endpoint_IsConfigured();
#else
	for (uint8_t EPNum = Number; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
 6a2:	9f 5f       	subi	r25, 0xFF	; 255
 6a4:	97 30       	cpi	r25, 0x07	; 7
 6a6:	a0 f2       	brcs	.-88     	; 0x650 <Endpoint_ConfigureEndpoint_Prv+0x4>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 6a8:	8f 70       	andi	r24, 0x0F	; 15
 6aa:	80 93 e9 00 	sts	0x00E9, r24
		if (!(Endpoint_IsConfigured()))
		  return false;
	}

	Endpoint_SelectEndpoint(Number);
	return true;
 6ae:	81 e0       	ldi	r24, 0x01	; 1
 6b0:	08 95       	ret
		UECFG0X = UECFG0XTemp;
		UECFG1X = UECFG1XTemp;
		UEIENX  = UEIENXTemp;

		if (!(Endpoint_IsConfigured()))
		  return false;
 6b2:	80 e0       	ldi	r24, 0x00	; 0
	}

	Endpoint_SelectEndpoint(Number);
	return true;
#endif
}
 6b4:	08 95       	ret

000006b6 <Endpoint_ConfigureEndpointTable>:
uint8_t USB_Device_ControlEndpointSize = ENDPOINT_CONTROLEP_DEFAULT_SIZE;
#endif

bool Endpoint_ConfigureEndpointTable(const USB_Endpoint_Table_t* const Table,
                                     const uint8_t Entries)
{
 6b6:	0f 93       	push	r16
 6b8:	1f 93       	push	r17
 6ba:	cf 93       	push	r28
 6bc:	df 93       	push	r29
 6be:	16 2f       	mov	r17, r22
	{
		if (!(Table[i].Address))
		  continue;
	
		if (!(Endpoint_ConfigureEndpoint(Table[i].Address, Table[i].Type, Table[i].Size, Table[i].Banks)))
		  return false;
 6c0:	ec 01       	movw	r28, r24
#endif

bool Endpoint_ConfigureEndpointTable(const USB_Endpoint_Table_t* const Table,
                                     const uint8_t Entries)
{
	for (uint8_t i = 0; i < Entries; i++)
 6c2:	00 e0       	ldi	r16, 0x00	; 0
 6c4:	2a c0       	rjmp	.+84     	; 0x71a <Endpoint_ConfigureEndpointTable+0x64>
	{
		if (!(Table[i].Address))
 6c6:	98 81       	ld	r25, Y
 6c8:	99 23       	and	r25, r25
 6ca:	29 f1       	breq	.+74     	; 0x716 <Endpoint_ConfigureEndpointTable+0x60>
		  continue;
	
		if (!(Endpoint_ConfigureEndpoint(Table[i].Address, Table[i].Type, Table[i].Size, Table[i].Banks)))
 6cc:	6b 81       	ldd	r22, Y+3	; 0x03
 6ce:	e9 81       	ldd	r30, Y+1	; 0x01
 6d0:	fa 81       	ldd	r31, Y+2	; 0x02
 6d2:	2c 81       	ldd	r18, Y+4	; 0x04
			static inline bool Endpoint_ConfigureEndpoint(const uint8_t Address,
			                                              const uint8_t Type,
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);
 6d4:	89 2f       	mov	r24, r25
 6d6:	8f 70       	andi	r24, 0x0F	; 15

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
 6d8:	87 30       	cpi	r24, 0x07	; 7
 6da:	18 f5       	brcc	.+70     	; 0x722 <Endpoint_ConfigureEndpointTable+0x6c>
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
				                                      ((Type << EPTYPE0) | ((Address & ENDPOINT_DIR_IN) ? (1 << EPDIR) : 0)),
 6dc:	62 95       	swap	r22
 6de:	66 0f       	add	r22, r22
 6e0:	66 0f       	add	r22, r22
 6e2:	60 7c       	andi	r22, 0xC0	; 192
 6e4:	99 1f       	adc	r25, r25
 6e6:	99 27       	eor	r25, r25
 6e8:	99 1f       	adc	r25, r25
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
 6ea:	69 2b       	or	r22, r25
 6ec:	22 30       	cpi	r18, 0x02	; 2
 6ee:	10 f0       	brcs	.+4      	; 0x6f4 <Endpoint_ConfigureEndpointTable+0x3e>
 6f0:	96 e0       	ldi	r25, 0x06	; 6
 6f2:	01 c0       	rjmp	.+2      	; 0x6f6 <Endpoint_ConfigureEndpointTable+0x40>
 6f4:	92 e0       	ldi	r25, 0x02	; 2
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes) ATTR_WARN_UNUSED_RESULT ATTR_CONST
			                                                                       ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;
 6f6:	28 e0       	ldi	r18, 0x08	; 8
 6f8:	30 e0       	ldi	r19, 0x00	; 0
		/* Inline Functions: */
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes) ATTR_WARN_UNUSED_RESULT ATTR_CONST
			                                                                       ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
 6fa:	40 e0       	ldi	r20, 0x00	; 0
 6fc:	03 c0       	rjmp	.+6      	; 0x704 <Endpoint_ConfigureEndpointTable+0x4e>
				uint16_t CheckBytes = 8;

				while (CheckBytes < Bytes)
				{
					MaskVal++;
 6fe:	4f 5f       	subi	r20, 0xFF	; 255
					CheckBytes <<= 1;
 700:	22 0f       	add	r18, r18
 702:	33 1f       	adc	r19, r19
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while (CheckBytes < Bytes)
 704:	2e 17       	cp	r18, r30
 706:	3f 07       	cpc	r19, r31
 708:	d0 f3       	brcs	.-12     	; 0x6fe <Endpoint_ConfigureEndpointTable+0x48>
				{
					MaskVal++;
					CheckBytes <<= 1;
				}

				return (MaskVal << EPSIZE0);
 70a:	42 95       	swap	r20
 70c:	40 7f       	andi	r20, 0xF0	; 240
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
 70e:	49 2b       	or	r20, r25
 710:	9d df       	rcall	.-198    	; 0x64c <Endpoint_ConfigureEndpoint_Prv>
 712:	88 23       	and	r24, r24
 714:	31 f0       	breq	.+12     	; 0x722 <Endpoint_ConfigureEndpointTable+0x6c>
 716:	0f 5f       	subi	r16, 0xFF	; 255
#endif

bool Endpoint_ConfigureEndpointTable(const USB_Endpoint_Table_t* const Table,
                                     const uint8_t Entries)
{
	for (uint8_t i = 0; i < Entries; i++)
 718:	25 96       	adiw	r28, 0x05	; 5
 71a:	01 17       	cp	r16, r17
 71c:	a1 f6       	brne	.-88     	; 0x6c6 <Endpoint_ConfigureEndpointTable+0x10>
 71e:	81 e0       	ldi	r24, 0x01	; 1
	
		if (!(Endpoint_ConfigureEndpoint(Table[i].Address, Table[i].Type, Table[i].Size, Table[i].Banks)))
		  return false;
	}
	
	return true;
 720:	01 c0       	rjmp	.+2      	; 0x724 <Endpoint_ConfigureEndpointTable+0x6e>
 722:	80 e0       	ldi	r24, 0x00	; 0
	{
		if (!(Table[i].Address))
		  continue;
	
		if (!(Endpoint_ConfigureEndpoint(Table[i].Address, Table[i].Type, Table[i].Size, Table[i].Banks)))
		  return false;
 724:	df 91       	pop	r29
	}
	
	return true;
}
 726:	cf 91       	pop	r28
 728:	1f 91       	pop	r17
 72a:	0f 91       	pop	r16
 72c:	08 95       	ret

0000072e <Endpoint_ClearStatusStage>:
 72e:	80 91 3e 02 	lds	r24, 0x023E
	}
}

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
 732:	87 ff       	sbrs	r24, 7
 734:	11 c0       	rjmp	.+34     	; 0x758 <Endpoint_ClearStatusStage+0x2a>
 736:	03 c0       	rjmp	.+6      	; 0x73e <Endpoint_ClearStatusStage+0x10>
	{
		while (!(Endpoint_IsOUTReceived()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
 738:	8e b3       	in	r24, 0x1e	; 30
 73a:	88 23       	and	r24, r24
 73c:	b1 f0       	breq	.+44     	; 0x76a <Endpoint_ClearStatusStage+0x3c>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 73e:	80 91 e8 00 	lds	r24, 0x00E8

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
	{
		while (!(Endpoint_IsOUTReceived()))
 742:	82 ff       	sbrs	r24, 2
 744:	f9 cf       	rjmp	.-14     	; 0x738 <Endpoint_ClearStatusStage+0xa>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 746:	80 91 e8 00 	lds	r24, 0x00E8
 74a:	8b 77       	andi	r24, 0x7B	; 123
 74c:	80 93 e8 00 	sts	0x00E8, r24
 750:	08 95       	ret
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
 752:	8e b3       	in	r24, 0x1e	; 30
 754:	88 23       	and	r24, r24
 756:	49 f0       	breq	.+18     	; 0x76a <Endpoint_ClearStatusStage+0x3c>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 758:	80 91 e8 00 	lds	r24, 0x00E8

		Endpoint_ClearOUT();
	}
	else
	{
		while (!(Endpoint_IsINReady()))
 75c:	80 ff       	sbrs	r24, 0
 75e:	f9 cf       	rjmp	.-14     	; 0x752 <Endpoint_ClearStatusStage+0x24>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 760:	80 91 e8 00 	lds	r24, 0x00E8
 764:	8e 77       	andi	r24, 0x7E	; 126
 766:	80 93 e8 00 	sts	0x00E8, r24
 76a:	08 95       	ret

0000076c <Endpoint_WaitUntilReady>:
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
 76c:	80 91 e4 00 	lds	r24, 0x00E4
 770:	90 91 e5 00 	lds	r25, 0x00E5
 774:	45 e6       	ldi	r20, 0x65	; 101
 776:	01 c0       	rjmp	.+2      	; 0x77a <Endpoint_WaitUntilReady+0xe>
 778:	c9 01       	movw	r24, r18
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
 77a:	20 91 ec 00 	lds	r18, 0x00EC
 77e:	20 ff       	sbrs	r18, 0
 780:	22 c0       	rjmp	.+68     	; 0x7c6 <Endpoint_WaitUntilReady+0x5a>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 782:	20 91 e8 00 	lds	r18, 0x00E8

	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
 786:	20 fd       	sbrc	r18, 0
 788:	14 c0       	rjmp	.+40     	; 0x7b2 <Endpoint_WaitUntilReady+0x46>
		{
			if (Endpoint_IsOUTReceived())
			  return ENDPOINT_READYWAIT_NoError;
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;
 78a:	2e b3       	in	r18, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
 78c:	22 23       	and	r18, r18
 78e:	99 f0       	breq	.+38     	; 0x7b6 <Endpoint_WaitUntilReady+0x4a>
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
 790:	25 30       	cpi	r18, 0x05	; 5
 792:	99 f0       	breq	.+38     	; 0x7ba <Endpoint_WaitUntilReady+0x4e>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
 794:	20 91 eb 00 	lds	r18, 0x00EB
		  return ENDPOINT_READYWAIT_BusSuspended;
		else if (Endpoint_IsStalled())
 798:	25 fd       	sbrc	r18, 5
 79a:	11 c0       	rjmp	.+34     	; 0x7be <Endpoint_WaitUntilReady+0x52>
 79c:	20 91 e4 00 	lds	r18, 0x00E4
 7a0:	30 91 e5 00 	lds	r19, 0x00E5
		  return ENDPOINT_READYWAIT_EndpointStalled;

		uint16_t CurrentFrameNumber = USB_Device_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
 7a4:	28 17       	cp	r18, r24
 7a6:	39 07       	cpc	r19, r25
 7a8:	41 f3       	breq	.-48     	; 0x77a <Endpoint_WaitUntilReady+0xe>
 7aa:	41 50       	subi	r20, 0x01	; 1
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
 7ac:	29 f7       	brne	.-54     	; 0x778 <Endpoint_WaitUntilReady+0xc>
			  return ENDPOINT_READYWAIT_Timeout;
 7ae:	84 e0       	ldi	r24, 0x04	; 4
 7b0:	08 95       	ret
	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
 7b2:	80 e0       	ldi	r24, 0x00	; 0
 7b4:	08 95       	ret
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
 7b6:	82 e0       	ldi	r24, 0x02	; 2
 7b8:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_READYWAIT_BusSuspended;
 7ba:	83 e0       	ldi	r24, 0x03	; 3
 7bc:	08 95       	ret
		else if (Endpoint_IsStalled())
		  return ENDPOINT_READYWAIT_EndpointStalled;
 7be:	81 e0       	ldi	r24, 0x01	; 1
 7c0:	08 95       	ret
			  return ENDPOINT_READYWAIT_NoError;
		}
		else
		{
			if (Endpoint_IsOUTReceived())
			  return ENDPOINT_READYWAIT_NoError;
 7c2:	80 e0       	ldi	r24, 0x00	; 0

			if (!(TimeoutMSRem--))
			  return ENDPOINT_READYWAIT_Timeout;
		}
	}
}
 7c4:	08 95       	ret
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 7c6:	20 91 e8 00 	lds	r18, 0x00E8
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
		}
		else
		{
			if (Endpoint_IsOUTReceived())
 7ca:	22 ff       	sbrs	r18, 2
 7cc:	de cf       	rjmp	.-68     	; 0x78a <Endpoint_WaitUntilReady+0x1e>
 7ce:	f9 cf       	rjmp	.-14     	; 0x7c2 <Endpoint_WaitUntilReady+0x56>

000007d0 <USB_ResetInterface>:

	USB_IsInitialized = false;
}

void USB_ResetInterface(void)
{
 7d0:	0f 93       	push	r16
 7d2:	1f 93       	push	r17
 7d4:	cf 93       	push	r28
 7d6:	df 93       	push	r29
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
 7d8:	4d d0       	rcall	.+154    	; 0x874 <USB_INT_DisableAllInterrupts>
 7da:	54 d0       	rcall	.+168    	; 0x884 <USB_INT_ClearAllInterrupts>
	USB_INT_ClearAllInterrupts();
 7dc:	c8 ed       	ldi	r28, 0xD8	; 216
 7de:	d0 e0       	ldi	r29, 0x00	; 0
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
 7e0:	88 81       	ld	r24, Y
 7e2:	8f 77       	andi	r24, 0x7F	; 127
 7e4:	88 83       	st	Y, r24
 7e6:	88 81       	ld	r24, Y
 7e8:	80 68       	ori	r24, 0x80	; 128
				USBCON |=  (1 << USBE);
 7ea:	88 83       	st	Y, r24
 7ec:	88 81       	ld	r24, Y
 7ee:	8f 7d       	andi	r24, 0xDF	; 223
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
 7f0:	88 83       	st	Y, r24
 7f2:	e7 ed       	ldi	r30, 0xD7	; 215
 7f4:	f0 e0       	ldi	r31, 0x00	; 0

	if (USB_CurrentMode == USB_MODE_Device)
	{
		#if defined(USB_CAN_BE_DEVICE)
		#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
		UHWCON |=  (1 << UIMOD);
 7f6:	80 81       	ld	r24, Z
 7f8:	80 68       	ori	r24, 0x80	; 128
 7fa:	80 83       	st	Z, r24
 7fc:	19 bc       	out	0x29, r1	; 41
 7fe:	1e ba       	out	0x1e, r1	; 30
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
 800:	10 92 3a 02 	sts	0x023A, r1

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState                 = DEVICE_STATE_Unattached;
	USB_Device_ConfigurationNumber  = 0;
 804:	10 92 3c 02 	sts	0x023C, r1

	#if !defined(NO_DEVICE_REMOTE_WAKEUP)
	USB_Device_RemoteWakeupEnabled  = false;
 808:	10 92 3b 02 	sts	0x023B, r1
	#endif

	#if !defined(NO_DEVICE_SELF_POWER)
	USB_Device_CurrentlySelfPowered = false;
 80c:	00 ee       	ldi	r16, 0xE0	; 224
 80e:	10 e0       	ldi	r17, 0x00	; 0
			}

			static inline void USB_Device_SetFullSpeed(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetFullSpeed(void)
			{
				UDCON &= ~(1 << LSM);
 810:	f8 01       	movw	r30, r16
 812:	80 81       	ld	r24, Z
 814:	8b 7f       	andi	r24, 0xFB	; 251
 816:	80 83       	st	Z, r24
 818:	88 81       	ld	r24, Y
 81a:	81 60       	ori	r24, 0x01	; 1
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBCON |= (1 << VBUSTE);
 81c:	88 83       	st	Y, r24
 81e:	80 e0       	ldi	r24, 0x00	; 0
 820:	60 e0       	ldi	r22, 0x00	; 0
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
 822:	42 e0       	ldi	r20, 0x02	; 2
 824:	13 df       	rcall	.-474    	; 0x64c <Endpoint_ConfigureEndpoint_Prv>
 826:	e1 ee       	ldi	r30, 0xE1	; 225
 828:	f0 e0       	ldi	r31, 0x00	; 0
 82a:	80 81       	ld	r24, Z
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
 82c:	8e 7f       	andi	r24, 0xFE	; 254
 82e:	80 83       	st	Z, r24
 830:	e2 ee       	ldi	r30, 0xE2	; 226
 832:	f0 e0       	ldi	r31, 0x00	; 0
 834:	80 81       	ld	r24, Z
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
 836:	81 60       	ori	r24, 0x01	; 1
 838:	80 83       	st	Z, r24
 83a:	80 81       	ld	r24, Z
 83c:	88 60       	ori	r24, 0x08	; 8
 83e:	80 83       	st	Z, r24
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
 840:	f8 01       	movw	r30, r16
 842:	80 81       	ld	r24, Z
 844:	8e 7f       	andi	r24, 0xFE	; 254
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
 846:	80 83       	st	Z, r24
 848:	88 81       	ld	r24, Y
 84a:	80 61       	ori	r24, 0x10	; 16
 84c:	88 83       	st	Y, r24

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON |=  (1 << OTGPADE);
 84e:	df 91       	pop	r29
 850:	cf 91       	pop	r28
 852:	1f 91       	pop	r17
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
 854:	0f 91       	pop	r16
 856:	08 95       	ret

00000858 <USB_Init>:
 858:	e8 ed       	ldi	r30, 0xD8	; 216
 85a:	f0 e0       	ldi	r31, 0x00	; 0
 85c:	80 81       	ld	r24, Z
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON &= ~(1 << OTGPADE);
 85e:	8f 7e       	andi	r24, 0xEF	; 239
 860:	80 83       	st	Z, r24

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON |=  (1 << UVREGE);
 862:	e7 ed       	ldi	r30, 0xD7	; 215
 864:	f0 e0       	ldi	r31, 0x00	; 0
 866:	80 81       	ld	r24, Z
 868:	81 60       	ori	r24, 0x01	; 1
 86a:	80 83       	st	Z, r24
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
 86c:	81 e0       	ldi	r24, 0x01	; 1
 86e:	80 93 3d 02 	sts	0x023D, r24

	USB_ResetInterface();
 872:	ae cf       	rjmp	.-164    	; 0x7d0 <USB_ResetInterface>

00000874 <USB_INT_DisableAllInterrupts>:
#include "../USBInterrupt.h"

void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
 874:	e8 ed       	ldi	r30, 0xD8	; 216
 876:	f0 e0       	ldi	r31, 0x00	; 0
 878:	80 81       	ld	r24, Z
 87a:	8c 7f       	andi	r24, 0xFC	; 252
 87c:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
 87e:	10 92 e2 00 	sts	0x00E2, r1
	#endif
}
 882:	08 95       	ret

00000884 <USB_INT_ClearAllInterrupts>:

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
 884:	10 92 da 00 	sts	0x00DA, r1
	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
 888:	10 92 e1 00 	sts	0x00E1, r1
	#endif
}
 88c:	08 95       	ret

0000088e <__vector_10>:

ISR(USB_GEN_vect, ISR_BLOCK)
{
 88e:	1f 92       	push	r1
 890:	0f 92       	push	r0
 892:	0f b6       	in	r0, 0x3f	; 63
 894:	0f 92       	push	r0
 896:	0b b6       	in	r0, 0x3b	; 59
 898:	0f 92       	push	r0
 89a:	11 24       	eor	r1, r1
 89c:	2f 93       	push	r18
 89e:	3f 93       	push	r19
 8a0:	4f 93       	push	r20
 8a2:	5f 93       	push	r21
 8a4:	6f 93       	push	r22
 8a6:	7f 93       	push	r23
 8a8:	8f 93       	push	r24
 8aa:	9f 93       	push	r25
 8ac:	af 93       	push	r26
 8ae:	bf 93       	push	r27
 8b0:	ef 93       	push	r30
 8b2:	ff 93       	push	r31
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
					case USB_INT_SOFI:
						return (UDINT  & (1 << SOFI));
 8b4:	80 91 e1 00 	lds	r24, 0x00E1
	#if defined(USB_CAN_BE_DEVICE)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
 8b8:	82 ff       	sbrs	r24, 2
 8ba:	0a c0       	rjmp	.+20     	; 0x8d0 <__vector_10+0x42>
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
					case USB_INT_SOFI:
						return (UDIEN  & (1 << SOFE));
 8bc:	80 91 e2 00 	lds	r24, 0x00E2
 8c0:	82 ff       	sbrs	r24, 2
 8c2:	06 c0       	rjmp	.+12     	; 0x8d0 <__vector_10+0x42>
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
						break;
					case USB_INT_SOFI:
						UDINT  &= ~(1 << SOFI);
 8c4:	80 91 e1 00 	lds	r24, 0x00E1
 8c8:	8b 7f       	andi	r24, 0xFB	; 251
 8ca:	80 93 e1 00 	sts	0x00E1, r24
	{
		USB_INT_Clear(USB_INT_SOFI);

		EVENT_USB_Device_StartOfFrame();
 8ce:	06 d2       	rcall	.+1036   	; 0xcdc <USB_Event_Stub>
 8d0:	80 91 da 00 	lds	r24, 0x00DA
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBINT & (1 << VBUSTI));
 8d4:	80 ff       	sbrs	r24, 0
	}
	#endif

	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	if (USB_INT_HasOccurred(USB_INT_VBUSTI) && USB_INT_IsEnabled(USB_INT_VBUSTI))
 8d6:	1b c0       	rjmp	.+54     	; 0x90e <__vector_10+0x80>
 8d8:	80 91 d8 00 	lds	r24, 0x00D8
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBCON & (1 << VBUSTE));
 8dc:	80 ff       	sbrs	r24, 0
 8de:	17 c0       	rjmp	.+46     	; 0x90e <__vector_10+0x80>
 8e0:	80 91 da 00 	lds	r24, 0x00DA
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBINT &= ~(1 << VBUSTI);
 8e4:	8e 7f       	andi	r24, 0xFE	; 254
 8e6:	80 93 da 00 	sts	0x00DA, r24
 8ea:	80 91 d9 00 	lds	r24, 0x00D9
				 *  \return Boolean \c true if the VBUS line is currently detecting power from a host, \c false otherwise.
				 */
				static inline bool USB_VBUS_GetStatus(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
				static inline bool USB_VBUS_GetStatus(void)
				{
					return ((USBSTA & (1 << VBUS)) ? true : false);
 8ee:	80 ff       	sbrs	r24, 0
	{
		USB_INT_Clear(USB_INT_VBUSTI);

		if (USB_VBUS_GetStatus())
 8f0:	0b c0       	rjmp	.+22     	; 0x908 <__vector_10+0x7a>
 8f2:	8c e0       	ldi	r24, 0x0C	; 12

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
 8f4:	89 bd       	out	0x29, r24	; 41
 8f6:	8e e0       	ldi	r24, 0x0E	; 14
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
 8f8:	89 bd       	out	0x29, r24	; 41
 8fa:	09 b4       	in	r0, 0x29	; 41
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			{
				USB_PLL_On();
				while (!(USB_PLL_IsReady()));
 8fc:	00 fe       	sbrs	r0, 0
 8fe:	fd cf       	rjmp	.-6      	; 0x8fa <__vector_10+0x6c>
 900:	81 e0       	ldi	r24, 0x01	; 1
			}

			USB_DeviceState = DEVICE_STATE_Powered;
 902:	8e bb       	out	0x1e, r24	; 30
 904:	5b dd       	rcall	.-1354   	; 0x3bc <EVENT_USB_Device_Connect>
			EVENT_USB_Device_Connect();
 906:	03 c0       	rjmp	.+6      	; 0x90e <__vector_10+0x80>
 908:	19 bc       	out	0x29, r1	; 41
 90a:	1e ba       	out	0x1e, r1	; 30
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
 90c:	5b dd       	rcall	.-1354   	; 0x3c4 <EVENT_USB_Device_Disconnect>
		else
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			  USB_PLL_Off();

			USB_DeviceState = DEVICE_STATE_Unattached;
 90e:	80 91 e1 00 	lds	r24, 0x00E1
			EVENT_USB_Device_Disconnect();
 912:	80 ff       	sbrs	r24, 0
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
 914:	17 c0       	rjmp	.+46     	; 0x944 <__vector_10+0xb6>
 916:	80 91 e2 00 	lds	r24, 0x00E2
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
 91a:	80 ff       	sbrs	r24, 0
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
 91c:	13 c0       	rjmp	.+38     	; 0x944 <__vector_10+0xb6>
 91e:	80 91 e2 00 	lds	r24, 0x00E2
 922:	8e 7f       	andi	r24, 0xFE	; 254
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
 924:	80 93 e2 00 	sts	0x00E2, r24
 928:	80 91 e2 00 	lds	r24, 0x00E2
 92c:	80 61       	ori	r24, 0x10	; 16
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
 92e:	80 93 e2 00 	sts	0x00E2, r24
 932:	80 91 d8 00 	lds	r24, 0x00D8
 936:	80 62       	ori	r24, 0x20	; 32
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON |=  (1 << FRZCLK);
 938:	80 93 d8 00 	sts	0x00D8, r24
 93c:	19 bc       	out	0x29, r1	; 41
 93e:	85 e0       	ldi	r24, 0x05	; 5
 940:	8e bb       	out	0x1e, r24	; 30
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
 942:	cc d1       	rcall	.+920    	; 0xcdc <USB_Event_Stub>

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
		EVENT_USB_Device_Disconnect();
		#else
		USB_DeviceState = DEVICE_STATE_Suspended;
 944:	80 91 e1 00 	lds	r24, 0x00E1
		EVENT_USB_Device_Suspend();
 948:	84 ff       	sbrs	r24, 4
 94a:	2c c0       	rjmp	.+88     	; 0x9a4 <__vector_10+0x116>
					case USB_INT_IDTI:
						return (USBINT & (1 << IDTI));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
 94c:	80 91 e2 00 	lds	r24, 0x00E2
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
 950:	84 ff       	sbrs	r24, 4
 952:	28 c0       	rjmp	.+80     	; 0x9a4 <__vector_10+0x116>
					case USB_INT_IDTI:
						return (USBCON & (1 << IDTE));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
 954:	8c e0       	ldi	r24, 0x0C	; 12
 956:	89 bd       	out	0x29, r24	; 41
 958:	8e e0       	ldi	r24, 0x0E	; 14
 95a:	89 bd       	out	0x29, r24	; 41

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
 95c:	09 b4       	in	r0, 0x29	; 41
 95e:	00 fe       	sbrs	r0, 0
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
 960:	fd cf       	rjmp	.-6      	; 0x95c <__vector_10+0xce>
 962:	80 91 d8 00 	lds	r24, 0x00D8
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
 966:	8f 7d       	andi	r24, 0xDF	; 223
 968:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
 96c:	80 91 e1 00 	lds	r24, 0x00E1
 970:	8f 7e       	andi	r24, 0xEF	; 239
 972:	80 93 e1 00 	sts	0x00E1, r24
						USBINT &= ~(1 << IDTI);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
 976:	80 91 e2 00 	lds	r24, 0x00E2
 97a:	8f 7e       	andi	r24, 0xEF	; 239
 97c:	80 93 e2 00 	sts	0x00E2, r24
						USBCON &= ~(1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
 980:	80 91 e2 00 	lds	r24, 0x00E2
 984:	81 60       	ori	r24, 0x01	; 1
 986:	80 93 e2 00 	sts	0x00E2, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
 98a:	80 91 3a 02 	lds	r24, 0x023A
 98e:	88 23       	and	r24, r24
 990:	21 f4       	brne	.+8      	; 0x99a <__vector_10+0x10c>
		USB_INT_Clear(USB_INT_WAKEUPI);

		USB_INT_Disable(USB_INT_WAKEUPI);
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_Device_ConfigurationNumber)
 992:	80 91 e3 00 	lds	r24, 0x00E3
 996:	87 ff       	sbrs	r24, 7
 998:	02 c0       	rjmp	.+4      	; 0x99e <__vector_10+0x110>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
 99a:	84 e0       	ldi	r24, 0x04	; 4
 99c:	01 c0       	rjmp	.+2      	; 0x9a0 <__vector_10+0x112>
		  USB_DeviceState = DEVICE_STATE_Configured;
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
 99e:	81 e0       	ldi	r24, 0x01	; 1
 9a0:	8e bb       	out	0x1e, r24	; 30
 9a2:	9c d1       	rcall	.+824    	; 0xcdc <USB_Event_Stub>
 9a4:	80 91 e1 00 	lds	r24, 0x00E1
 9a8:	83 ff       	sbrs	r24, 3

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
		#else
		EVENT_USB_Device_WakeUp();
 9aa:	21 c0       	rjmp	.+66     	; 0x9ee <__vector_10+0x160>
 9ac:	80 91 e2 00 	lds	r24, 0x00E2
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
 9b0:	83 ff       	sbrs	r24, 3
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
 9b2:	1d c0       	rjmp	.+58     	; 0x9ee <__vector_10+0x160>
 9b4:	80 91 e1 00 	lds	r24, 0x00E1
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
 9b8:	87 7f       	andi	r24, 0xF7	; 247
 9ba:	80 93 e1 00 	sts	0x00E1, r24
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
 9be:	82 e0       	ldi	r24, 0x02	; 2
 9c0:	8e bb       	out	0x1e, r24	; 30
 9c2:	10 92 3a 02 	sts	0x023A, r1
 9c6:	80 91 e1 00 	lds	r24, 0x00E1
	{
		USB_INT_Clear(USB_INT_EORSTI);

		USB_DeviceState                = DEVICE_STATE_Default;
 9ca:	8e 7f       	andi	r24, 0xFE	; 254
		USB_Device_ConfigurationNumber = 0;
 9cc:	80 93 e1 00 	sts	0x00E1, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
 9d0:	80 91 e2 00 	lds	r24, 0x00E2
 9d4:	8e 7f       	andi	r24, 0xFE	; 254
 9d6:	80 93 e2 00 	sts	0x00E2, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
 9da:	80 91 e2 00 	lds	r24, 0x00E2
 9de:	80 61       	ori	r24, 0x10	; 16
 9e0:	80 93 e2 00 	sts	0x00E2, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
 9e4:	80 e0       	ldi	r24, 0x00	; 0
 9e6:	60 e0       	ldi	r22, 0x00	; 0
 9e8:	42 e0       	ldi	r20, 0x02	; 2
 9ea:	30 de       	rcall	.-928    	; 0x64c <Endpoint_ConfigureEndpoint_Prv>
 9ec:	77 d1       	rcall	.+750    	; 0xcdc <USB_Event_Stub>
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
 9ee:	ff 91       	pop	r31
 9f0:	ef 91       	pop	r30
 9f2:	bf 91       	pop	r27
 9f4:	af 91       	pop	r26
 9f6:	9f 91       	pop	r25

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
 9f8:	8f 91       	pop	r24
 9fa:	7f 91       	pop	r23
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
 9fc:	6f 91       	pop	r22
 9fe:	5f 91       	pop	r21
 a00:	4f 91       	pop	r20
 a02:	3f 91       	pop	r19
 a04:	2f 91       	pop	r18
 a06:	0f 90       	pop	r0
 a08:	0b be       	out	0x3b, r0	; 59
 a0a:	0f 90       	pop	r0
 a0c:	0f be       	out	0x3f, r0	; 63
 a0e:	0f 90       	pop	r0
 a10:	1f 90       	pop	r1
 a12:	18 95       	reti

00000a14 <USB_Device_ProcessControlRequest>:
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_Device_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
 a14:	1f 93       	push	r17
 a16:	cf 93       	push	r28
 a18:	df 93       	push	r29
 a1a:	cd b7       	in	r28, 0x3d	; 61
 a1c:	de b7       	in	r29, 0x3e	; 62
 a1e:	ac 97       	sbiw	r28, 0x2c	; 44
 a20:	0f b6       	in	r0, 0x3f	; 63
 a22:	f8 94       	cli
 a24:	de bf       	out	0x3e, r29	; 62
 a26:	0f be       	out	0x3f, r0	; 63
 a28:	cd bf       	out	0x3d, r28	; 61
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
 a2a:	80 e0       	ldi	r24, 0x00	; 0
	USB_ControlRequest.bRequest      = Endpoint_Read_8();
	USB_ControlRequest.wValue        = Endpoint_Read_16_LE();
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;
 a2c:	ee e3       	ldi	r30, 0x3E	; 62
 a2e:	f2 e0       	ldi	r31, 0x02	; 2
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
 a30:	90 91 f1 00 	lds	r25, 0x00F1

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_8();
 a34:	91 93       	st	Z+, r25
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
 a36:	8f 5f       	subi	r24, 0xFF	; 255
 a38:	88 30       	cpi	r24, 0x08	; 8
 a3a:	d1 f7       	brne	.-12     	; 0xa30 <USB_Device_ProcessControlRequest+0x1c>
	  *(RequestHeader++) = Endpoint_Read_8();
	#endif

	EVENT_USB_Device_ControlRequest();
 a3c:	d6 dc       	rcall	.-1620   	; 0x3ea <EVENT_USB_Device_ControlRequest>
 a3e:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 a42:	83 ff       	sbrs	r24, 3

	if (Endpoint_IsSETUPReceived())
 a44:	33 c1       	rjmp	.+614    	; 0xcac <USB_Device_ProcessControlRequest+0x298>
 a46:	80 91 3e 02 	lds	r24, 0x023E
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
 a4a:	20 91 3f 02 	lds	r18, 0x023F

		switch (USB_ControlRequest.bRequest)
 a4e:	25 30       	cpi	r18, 0x05	; 5
 a50:	09 f4       	brne	.+2      	; 0xa54 <USB_Device_ProcessControlRequest+0x40>
 a52:	84 c0       	rjmp	.+264    	; 0xb5c <USB_Device_ProcessControlRequest+0x148>
 a54:	26 30       	cpi	r18, 0x06	; 6
 a56:	40 f4       	brcc	.+16     	; 0xa68 <USB_Device_ProcessControlRequest+0x54>
 a58:	21 30       	cpi	r18, 0x01	; 1
 a5a:	a1 f1       	breq	.+104    	; 0xac4 <USB_Device_ProcessControlRequest+0xb0>
 a5c:	21 30       	cpi	r18, 0x01	; 1
 a5e:	70 f0       	brcs	.+28     	; 0xa7c <USB_Device_ProcessControlRequest+0x68>
 a60:	23 30       	cpi	r18, 0x03	; 3
 a62:	09 f0       	breq	.+2      	; 0xa66 <USB_Device_ProcessControlRequest+0x52>
 a64:	23 c1       	rjmp	.+582    	; 0xcac <USB_Device_ProcessControlRequest+0x298>
 a66:	2e c0       	rjmp	.+92     	; 0xac4 <USB_Device_ProcessControlRequest+0xb0>
 a68:	28 30       	cpi	r18, 0x08	; 8
 a6a:	09 f4       	brne	.+2      	; 0xa6e <USB_Device_ProcessControlRequest+0x5a>
 a6c:	f2 c0       	rjmp	.+484    	; 0xc52 <USB_Device_ProcessControlRequest+0x23e>
 a6e:	29 30       	cpi	r18, 0x09	; 9
 a70:	09 f4       	brne	.+2      	; 0xa74 <USB_Device_ProcessControlRequest+0x60>
 a72:	01 c1       	rjmp	.+514    	; 0xc76 <USB_Device_ProcessControlRequest+0x262>
 a74:	26 30       	cpi	r18, 0x06	; 6
 a76:	09 f0       	breq	.+2      	; 0xa7a <USB_Device_ProcessControlRequest+0x66>
 a78:	19 c1       	rjmp	.+562    	; 0xcac <USB_Device_ProcessControlRequest+0x298>
 a7a:	92 c0       	rjmp	.+292    	; 0xba0 <USB_Device_ProcessControlRequest+0x18c>
 a7c:	80 38       	cpi	r24, 0x80	; 128
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
 a7e:	21 f0       	breq	.+8      	; 0xa88 <USB_Device_ProcessControlRequest+0x74>
 a80:	82 38       	cpi	r24, 0x82	; 130
 a82:	09 f0       	breq	.+2      	; 0xa86 <USB_Device_ProcessControlRequest+0x72>
 a84:	13 c1       	rjmp	.+550    	; 0xcac <USB_Device_ProcessControlRequest+0x298>
 a86:	08 c0       	rjmp	.+16     	; 0xa98 <USB_Device_ProcessControlRequest+0x84>
 a88:	80 91 3b 02 	lds	r24, 0x023B
	Endpoint_ClearOUT();
}

static void USB_Device_GetStatus(void)
{
	uint8_t CurrentStatus = 0;
 a8c:	90 91 3c 02 	lds	r25, 0x023C
			if (USB_Device_CurrentlySelfPowered)
			  CurrentStatus |= FEATURE_SELFPOWERED_ENABLED;
			#endif

			#if !defined(NO_DEVICE_REMOTE_WAKEUP)
			if (USB_Device_RemoteWakeupEnabled)
 a90:	99 23       	and	r25, r25
 a92:	71 f0       	breq	.+28     	; 0xab0 <USB_Device_ProcessControlRequest+0x9c>
 a94:	82 60       	ori	r24, 0x02	; 2
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
 a96:	0c c0       	rjmp	.+24     	; 0xab0 <USB_Device_ProcessControlRequest+0x9c>
 a98:	80 91 42 02 	lds	r24, 0x0242
			#endif
			break;
		case (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_ENDPOINT):
			#if !defined(CONTROL_ONLY_DEVICE)
			Endpoint_SelectEndpoint((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
 a9c:	8f 70       	andi	r24, 0x0F	; 15
 a9e:	80 93 e9 00 	sts	0x00E9, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 aa2:	90 91 eb 00 	lds	r25, 0x00EB
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
 aa6:	81 e0       	ldi	r24, 0x01	; 1

			CurrentStatus = Endpoint_IsStalled();
 aa8:	95 ff       	sbrs	r25, 5
 aaa:	80 e0       	ldi	r24, 0x00	; 0
 aac:	10 92 e9 00 	sts	0x00E9, r1
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 ab0:	90 91 e8 00 	lds	r25, 0x00E8
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 ab4:	97 7f       	andi	r25, 0xF7	; 247
 ab6:	90 93 e8 00 	sts	0x00E8, r25
 aba:	80 93 f1 00 	sts	0x00F1, r24
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
 abe:	10 92 f1 00 	sts	0x00F1, r1
				UEDATX = (Data >> 8);
 ac2:	d2 c0       	rjmp	.+420    	; 0xc68 <USB_Device_ProcessControlRequest+0x254>
 ac4:	88 23       	and	r24, r24
				}

				break;
			case REQ_ClearFeature:
			case REQ_SetFeature:
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
 ac6:	19 f0       	breq	.+6      	; 0xace <USB_Device_ProcessControlRequest+0xba>
 ac8:	82 30       	cpi	r24, 0x02	; 2
 aca:	09 f0       	breq	.+2      	; 0xace <USB_Device_ProcessControlRequest+0xba>
 acc:	ef c0       	rjmp	.+478    	; 0xcac <USB_Device_ProcessControlRequest+0x298>
 ace:	90 e0       	ldi	r25, 0x00	; 0
	Endpoint_ClearStatusStage();
}

static void USB_Device_ClearSetFeature(void)
{
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
 ad0:	8f 71       	andi	r24, 0x1F	; 31
 ad2:	90 70       	andi	r25, 0x00	; 0
 ad4:	00 97       	sbiw	r24, 0x00	; 0
 ad6:	29 f0       	breq	.+10     	; 0xae2 <USB_Device_ProcessControlRequest+0xce>
 ad8:	82 30       	cpi	r24, 0x02	; 2
 ada:	91 05       	cpc	r25, r1
 adc:	09 f0       	breq	.+2      	; 0xae0 <USB_Device_ProcessControlRequest+0xcc>
 ade:	e6 c0       	rjmp	.+460    	; 0xcac <USB_Device_ProcessControlRequest+0x298>
 ae0:	0b c0       	rjmp	.+22     	; 0xaf8 <USB_Device_ProcessControlRequest+0xe4>
 ae2:	80 91 40 02 	lds	r24, 0x0240
	{
		#if !defined(NO_DEVICE_REMOTE_WAKEUP)
		case REQREC_DEVICE:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
 ae6:	81 30       	cpi	r24, 0x01	; 1
 ae8:	09 f0       	breq	.+2      	; 0xaec <USB_Device_ProcessControlRequest+0xd8>
 aea:	e0 c0       	rjmp	.+448    	; 0xcac <USB_Device_ProcessControlRequest+0x298>
 aec:	23 30       	cpi	r18, 0x03	; 3
			  USB_Device_RemoteWakeupEnabled = (USB_ControlRequest.bRequest == REQ_SetFeature);
 aee:	09 f0       	breq	.+2      	; 0xaf2 <USB_Device_ProcessControlRequest+0xde>
 af0:	80 e0       	ldi	r24, 0x00	; 0
 af2:	80 93 3c 02 	sts	0x023C, r24
 af6:	2c c0       	rjmp	.+88     	; 0xb50 <USB_Device_ProcessControlRequest+0x13c>
 af8:	80 91 40 02 	lds	r24, 0x0240

			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
 afc:	88 23       	and	r24, r24
 afe:	41 f5       	brne	.+80     	; 0xb50 <USB_Device_ProcessControlRequest+0x13c>
 b00:	20 91 42 02 	lds	r18, 0x0242
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
 b04:	2f 70       	andi	r18, 0x0F	; 15
 b06:	09 f4       	brne	.+2      	; 0xb0a <USB_Device_ProcessControlRequest+0xf6>

				if (EndpointIndex == ENDPOINT_CONTROLEP)
 b08:	d1 c0       	rjmp	.+418    	; 0xcac <USB_Device_ProcessControlRequest+0x298>
 b0a:	20 93 e9 00 	sts	0x00E9, r18
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 b0e:	80 91 eb 00 	lds	r24, 0x00EB
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
 b12:	80 ff       	sbrs	r24, 0
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
 b14:	1d c0       	rjmp	.+58     	; 0xb50 <USB_Device_ProcessControlRequest+0x13c>
 b16:	80 91 3f 02 	lds	r24, 0x023F
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
 b1a:	83 30       	cpi	r24, 0x03	; 3
 b1c:	21 f4       	brne	.+8      	; 0xb26 <USB_Device_ProcessControlRequest+0x112>
 b1e:	80 91 eb 00 	lds	r24, 0x00EB
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
 b22:	80 62       	ori	r24, 0x20	; 32
 b24:	13 c0       	rjmp	.+38     	; 0xb4c <USB_Device_ProcessControlRequest+0x138>
 b26:	80 91 eb 00 	lds	r24, 0x00EB
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
 b2a:	80 61       	ori	r24, 0x10	; 16
 b2c:	80 93 eb 00 	sts	0x00EB, r24
 b30:	81 e0       	ldi	r24, 0x01	; 1
			 *  \param[in] Address  Endpoint address whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t Address)
			{
				UERST = (1 << (Address & ENDPOINT_EPNUM_MASK));
 b32:	90 e0       	ldi	r25, 0x00	; 0
 b34:	02 c0       	rjmp	.+4      	; 0xb3a <USB_Device_ProcessControlRequest+0x126>
 b36:	88 0f       	add	r24, r24
 b38:	99 1f       	adc	r25, r25
 b3a:	2a 95       	dec	r18
 b3c:	e2 f7       	brpl	.-8      	; 0xb36 <USB_Device_ProcessControlRequest+0x122>
 b3e:	80 93 ea 00 	sts	0x00EA, r24
 b42:	10 92 ea 00 	sts	0x00EA, r1
				UERST = 0;
 b46:	80 91 eb 00 	lds	r24, 0x00EB

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
 b4a:	88 60       	ori	r24, 0x08	; 8
 b4c:	80 93 eb 00 	sts	0x00EB, r24
 b50:	10 92 e9 00 	sts	0x00E9, r1
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 b54:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 b58:	87 7f       	andi	r24, 0xF7	; 247
 b5a:	89 c0       	rjmp	.+274    	; 0xc6e <USB_Device_ProcessControlRequest+0x25a>
 b5c:	88 23       	and	r24, r24
					USB_Device_ClearSetFeature();
				}

				break;
			case REQ_SetAddress:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
 b5e:	09 f0       	breq	.+2      	; 0xb62 <USB_Device_ProcessControlRequest+0x14e>
 b60:	a5 c0       	rjmp	.+330    	; 0xcac <USB_Device_ProcessControlRequest+0x298>
 b62:	10 91 40 02 	lds	r17, 0x0240
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t DeviceAddress = (USB_ControlRequest.wValue & 0x7F);
 b66:	1f 77       	andi	r17, 0x7F	; 127
 b68:	80 91 e3 00 	lds	r24, 0x00E3
			#endif

			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				UDADDR = (UDADDR & (1 << ADDEN)) | (Address & 0x7F);
 b6c:	80 78       	andi	r24, 0x80	; 128
 b6e:	81 2b       	or	r24, r17
 b70:	80 93 e3 00 	sts	0x00E3, r24
 b74:	80 91 e8 00 	lds	r24, 0x00E8
 b78:	87 7f       	andi	r24, 0xF7	; 247
 b7a:	80 93 e8 00 	sts	0x00E8, r24
 b7e:	d7 dd       	rcall	.-1106   	; 0x72e <Endpoint_ClearStatusStage>

	USB_Device_SetDeviceAddress(DeviceAddress);

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
 b80:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 b84:	80 ff       	sbrs	r24, 0
 b86:	fc cf       	rjmp	.-8      	; 0xb80 <USB_Device_ProcessControlRequest+0x16c>

	while (!(Endpoint_IsINReady()));
 b88:	80 91 e3 00 	lds	r24, 0x00E3
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address)
			{
				(void)Address;
				
				UDADDR |= (1 << ADDEN);
 b8c:	80 68       	ori	r24, 0x80	; 128
 b8e:	80 93 e3 00 	sts	0x00E3, r24
 b92:	11 23       	and	r17, r17
 b94:	11 f0       	breq	.+4      	; 0xb9a <USB_Device_ProcessControlRequest+0x186>

	USB_Device_EnableDeviceAddress(DeviceAddress);

	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
 b96:	83 e0       	ldi	r24, 0x03	; 3
 b98:	01 c0       	rjmp	.+2      	; 0xb9c <USB_Device_ProcessControlRequest+0x188>
 b9a:	82 e0       	ldi	r24, 0x02	; 2
 b9c:	8e bb       	out	0x1e, r24	; 30
 b9e:	86 c0       	rjmp	.+268    	; 0xcac <USB_Device_ProcessControlRequest+0x298>
 ba0:	80 58       	subi	r24, 0x80	; 128
 ba2:	82 30       	cpi	r24, 0x02	; 2
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_SetAddress();

				break;
			case REQ_GetDescriptor:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
 ba4:	08 f0       	brcs	.+2      	; 0xba8 <USB_Device_ProcessControlRequest+0x194>
 ba6:	82 c0       	rjmp	.+260    	; 0xcac <USB_Device_ProcessControlRequest+0x298>
 ba8:	80 91 40 02 	lds	r24, 0x0240
	    !(defined(USE_FLASH_DESCRIPTORS) || defined(USE_EEPROM_DESCRIPTORS) || defined(USE_RAM_DESCRIPTORS))
	uint8_t DescriptorAddressSpace;
	#endif

	#if !defined(NO_INTERNAL_SERIAL) && (USE_INTERNAL_SERIAL != NO_DESCRIPTOR)
	if (USB_ControlRequest.wValue == ((DTYPE_String << 8) | USE_INTERNAL_SERIAL))
 bac:	90 91 41 02 	lds	r25, 0x0241
 bb0:	23 e0       	ldi	r18, 0x03	; 3
 bb2:	8c 3d       	cpi	r24, 0xDC	; 220
 bb4:	92 07       	cpc	r25, r18
 bb6:	a9 f5       	brne	.+106    	; 0xc22 <USB_Device_ProcessControlRequest+0x20e>
 bb8:	83 e0       	ldi	r24, 0x03	; 3
 bba:	8c 83       	std	Y+4, r24	; 0x04
	{
		USB_Descriptor_Header_t Header;
		uint16_t                UnicodeString[INTERNAL_SERIAL_LENGTH_BITS / 4];
	} SignatureDescriptor;

	SignatureDescriptor.Header.Type = DTYPE_String;
 bbc:	8a e2       	ldi	r24, 0x2A	; 42
 bbe:	8b 83       	std	Y+3, r24	; 0x03
	SignatureDescriptor.Header.Size = USB_STRING_LEN(INTERNAL_SERIAL_LENGTH_BITS / 4);
 bc0:	5f b7       	in	r21, 0x3f	; 63
 bc2:	f8 94       	cli
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
 bc4:	de 01       	movw	r26, r28
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
 bc6:	13 96       	adiw	r26, 0x03	; 3
				__builtin_ssrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				cli();
				#endif

				GCC_MEMORY_BARRIER();
 bc8:	80 e0       	ldi	r24, 0x00	; 0
 bca:	90 e0       	ldi	r25, 0x00	; 0
 bcc:	4e e0       	ldi	r20, 0x0E	; 14
 bce:	61 e2       	ldi	r22, 0x21	; 33
			static inline void USB_Device_GetSerialString(uint16_t* const UnicodeString)
			{
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;
 bd0:	e4 2f       	mov	r30, r20

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
				{
					uint8_t SerialByte = boot_signature_byte_get(SigReadAddress);
 bd2:	f0 e0       	ldi	r31, 0x00	; 0
 bd4:	60 93 57 00 	sts	0x0057, r22
 bd8:	e4 91       	lpm	r30, Z
 bda:	80 ff       	sbrs	r24, 0
 bdc:	03 c0       	rjmp	.+6      	; 0xbe4 <USB_Device_ProcessControlRequest+0x1d0>

					if (SerialCharNum & 0x01)
 bde:	e2 95       	swap	r30
 be0:	ef 70       	andi	r30, 0x0F	; 15
					{
						SerialByte >>= 4;
 be2:	4f 5f       	subi	r20, 0xFF	; 255
 be4:	ef 70       	andi	r30, 0x0F	; 15
						SigReadAddress++;
 be6:	2e 2f       	mov	r18, r30
					}

					SerialByte &= 0x0F;
 be8:	30 e0       	ldi	r19, 0x00	; 0
 bea:	ea 30       	cpi	r30, 0x0A	; 10
 bec:	18 f0       	brcs	.+6      	; 0xbf4 <USB_Device_ProcessControlRequest+0x1e0>

					UnicodeString[SerialCharNum] = cpu_to_le16((SerialByte >= 10) ?
 bee:	29 5c       	subi	r18, 0xC9	; 201
 bf0:	3f 4f       	sbci	r19, 0xFF	; 255
 bf2:	02 c0       	rjmp	.+4      	; 0xbf8 <USB_Device_ProcessControlRequest+0x1e4>
 bf4:	20 5d       	subi	r18, 0xD0	; 208
 bf6:	3f 4f       	sbci	r19, 0xFF	; 255
 bf8:	13 96       	adiw	r26, 0x03	; 3
 bfa:	3c 93       	st	X, r19
 bfc:	2e 93       	st	-X, r18
 bfe:	12 97       	sbiw	r26, 0x02	; 2
 c00:	01 96       	adiw	r24, 0x01	; 1
 c02:	12 96       	adiw	r26, 0x02	; 2
 c04:	84 31       	cpi	r24, 0x14	; 20
 c06:	91 05       	cpc	r25, r1
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
 c08:	19 f7       	brne	.-58     	; 0xbd0 <USB_Device_ProcessControlRequest+0x1bc>
 c0a:	5f bf       	out	0x3f, r21	; 63
 c0c:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 c10:	87 7f       	andi	r24, 0xF7	; 247
 c12:	80 93 e8 00 	sts	0x00E8, r24
 c16:	ce 01       	movw	r24, r28
 c18:	03 96       	adiw	r24, 0x03	; 3

	USB_Device_GetSerialString(SignatureDescriptor.UnicodeString);

	Endpoint_ClearSETUP();

	Endpoint_Write_Control_Stream_LE(&SignatureDescriptor, sizeof(SignatureDescriptor));
 c1a:	6a e2       	ldi	r22, 0x2A	; 42
 c1c:	70 e0       	ldi	r23, 0x00	; 0
 c1e:	62 dc       	rcall	.-1852   	; 0x4e4 <Endpoint_Write_Control_Stream_LE>
 c20:	12 c0       	rjmp	.+36     	; 0xc46 <USB_Device_ProcessControlRequest+0x232>
 c22:	60 91 42 02 	lds	r22, 0x0242
 c26:	ae 01       	movw	r20, r28
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif

	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
 c28:	4f 5f       	subi	r20, 0xFF	; 255
 c2a:	5f 4f       	sbci	r21, 0xFF	; 255
 c2c:	df db       	rcall	.-2114   	; 0x3ec <CALLBACK_USB_GetDescriptor>
 c2e:	bc 01       	movw	r22, r24
 c30:	00 97       	sbiw	r24, 0x00	; 0
 c32:	09 f4       	brne	.+2      	; 0xc36 <USB_Device_ProcessControlRequest+0x222>
 c34:	3b c0       	rjmp	.+118    	; 0xcac <USB_Device_ProcessControlRequest+0x298>
 c36:	80 91 e8 00 	lds	r24, 0x00E8
 c3a:	87 7f       	andi	r24, 0xF7	; 247
 c3c:	80 93 e8 00 	sts	0x00E8, r24
 c40:	89 81       	ldd	r24, Y+1	; 0x01
 c42:	9a 81       	ldd	r25, Y+2	; 0x02
 c44:	a8 dc       	rcall	.-1712   	; 0x596 <Endpoint_Write_Control_PStream_LE>
 c46:	80 91 e8 00 	lds	r24, 0x00E8
	#if defined(USE_RAM_DESCRIPTORS) || !defined(ARCH_HAS_MULTI_ADDRESS_SPACE)
	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_EEPROM_DESCRIPTORS)
	Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_FLASH_DESCRIPTORS)
	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
 c4a:	8b 77       	andi	r24, 0x7B	; 123
 c4c:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 c50:	2d c0       	rjmp	.+90     	; 0xcac <USB_Device_ProcessControlRequest+0x298>
 c52:	80 38       	cpi	r24, 0x80	; 128
 c54:	59 f5       	brne	.+86     	; 0xcac <USB_Device_ProcessControlRequest+0x298>
 c56:	80 91 e8 00 	lds	r24, 0x00E8
 c5a:	87 7f       	andi	r24, 0xF7	; 247
					USB_Device_GetDescriptor();
				}

				break;
			case REQ_GetConfiguration:
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
 c5c:	80 93 e8 00 	sts	0x00E8, r24
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 c60:	80 91 3a 02 	lds	r24, 0x023A
 c64:	80 93 f1 00 	sts	0x00F1, r24
 c68:	80 91 e8 00 	lds	r24, 0x00E8

static void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();

	Endpoint_Write_8(USB_Device_ConfigurationNumber);
 c6c:	8e 77       	andi	r24, 0x7E	; 126
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
 c6e:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 c72:	5d dd       	rcall	.-1350   	; 0x72e <Endpoint_ClearStatusStage>
 c74:	1b c0       	rjmp	.+54     	; 0xcac <USB_Device_ProcessControlRequest+0x298>
 c76:	88 23       	and	r24, r24
 c78:	c9 f4       	brne	.+50     	; 0xcac <USB_Device_ProcessControlRequest+0x298>
 c7a:	90 91 40 02 	lds	r25, 0x0240
	Endpoint_ClearIN();

	Endpoint_ClearStatusStage();
 c7e:	92 30       	cpi	r25, 0x02	; 2
 c80:	a8 f4       	brcc	.+42     	; 0xcac <USB_Device_ProcessControlRequest+0x298>
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_GetConfiguration();

				break;
			case REQ_SetConfiguration:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
 c82:	80 91 e8 00 	lds	r24, 0x00E8
}

static void USB_Device_SetConfiguration(void)
{
	#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
 c86:	87 7f       	andi	r24, 0xF7	; 247
 c88:	80 93 e8 00 	sts	0x00E8, r24
 c8c:	90 93 3a 02 	sts	0x023A, r25
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 c90:	4e dd       	rcall	.-1380   	; 0x72e <Endpoint_ClearStatusStage>
 c92:	80 91 3a 02 	lds	r24, 0x023A
 c96:	88 23       	and	r24, r24
	#endif
	#endif

	Endpoint_ClearSETUP();

	USB_Device_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
 c98:	21 f4       	brne	.+8      	; 0xca2 <USB_Device_ProcessControlRequest+0x28e>
 c9a:	80 91 e3 00 	lds	r24, 0x00E3

	Endpoint_ClearStatusStage();
 c9e:	87 ff       	sbrs	r24, 7

	if (USB_Device_ConfigurationNumber)
 ca0:	02 c0       	rjmp	.+4      	; 0xca6 <USB_Device_ProcessControlRequest+0x292>
 ca2:	84 e0       	ldi	r24, 0x04	; 4
 ca4:	01 c0       	rjmp	.+2      	; 0xca8 <USB_Device_ProcessControlRequest+0x294>
 ca6:	81 e0       	ldi	r24, 0x01	; 1
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
 ca8:	8e bb       	out	0x1e, r24	; 30
 caa:	96 db       	rcall	.-2260   	; 0x3d8 <EVENT_USB_Device_ConfigurationChanged>
	  USB_DeviceState = DEVICE_STATE_Configured;
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
 cac:	80 91 e8 00 	lds	r24, 0x00E8
 cb0:	83 ff       	sbrs	r24, 3
 cb2:	0a c0       	rjmp	.+20     	; 0xcc8 <USB_Device_ProcessControlRequest+0x2b4>
 cb4:	80 91 e8 00 	lds	r24, 0x00E8

	EVENT_USB_Device_ConfigurationChanged();
 cb8:	87 7f       	andi	r24, 0xF7	; 247
 cba:	80 93 e8 00 	sts	0x00E8, r24
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 cbe:	80 91 eb 00 	lds	r24, 0x00EB
			default:
				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
 cc2:	80 62       	ori	r24, 0x20	; 32
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 cc4:	80 93 eb 00 	sts	0x00EB, r24
 cc8:	ac 96       	adiw	r28, 0x2c	; 44
 cca:	0f b6       	in	r0, 0x3f	; 63
 ccc:	f8 94       	cli
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
 cce:	de bf       	out	0x3e, r29	; 62
 cd0:	0f be       	out	0x3f, r0	; 63
 cd2:	cd bf       	out	0x3d, r28	; 61
 cd4:	df 91       	pop	r29
 cd6:	cf 91       	pop	r28
	{
		Endpoint_ClearSETUP();
		Endpoint_StallTransaction();
	}
}
 cd8:	1f 91       	pop	r17
 cda:	08 95       	ret

00000cdc <USB_Event_Stub>:
#include "Events.h"

void USB_Event_Stub(void)
{

}
 cdc:	08 95       	ret

00000cde <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
 cde:	cf 93       	push	r28
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_DeviceTask(void)
{
	if (USB_DeviceState == DEVICE_STATE_Unattached)
 ce0:	8e b3       	in	r24, 0x1e	; 30
 ce2:	88 23       	and	r24, r24
 ce4:	a9 f0       	breq	.+42     	; 0xd10 <USB_USBTask+0x32>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
 ce6:	80 91 e9 00 	lds	r24, 0x00E9
 cea:	8f 70       	andi	r24, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
 cec:	90 91 ec 00 	lds	r25, 0x00EC
 cf0:	90 ff       	sbrs	r25, 0
 cf2:	02 c0       	rjmp	.+4      	; 0xcf8 <USB_USBTask+0x1a>
 cf4:	c0 e8       	ldi	r28, 0x80	; 128
 cf6:	01 c0       	rjmp	.+2      	; 0xcfa <USB_USBTask+0x1c>
 cf8:	c0 e0       	ldi	r28, 0x00	; 0
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
 cfa:	c8 2b       	or	r28, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 cfc:	10 92 e9 00 	sts	0x00E9, r1
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 d00:	80 91 e8 00 	lds	r24, 0x00E8

	uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

	if (Endpoint_IsSETUPReceived())
 d04:	83 ff       	sbrs	r24, 3
 d06:	01 c0       	rjmp	.+2      	; 0xd0a <USB_USBTask+0x2c>
	  USB_Device_ProcessControlRequest();
 d08:	85 de       	rcall	.-758    	; 0xa14 <USB_Device_ProcessControlRequest>
 d0a:	cf 70       	andi	r28, 0x0F	; 15
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 d0c:	c0 93 e9 00 	sts	0x00E9, r28
 d10:	cf 91       	pop	r28
	#elif defined(USB_CAN_BE_HOST)
		USB_HostTask();
	#elif defined(USB_CAN_BE_DEVICE)
		USB_DeviceTask();
	#endif
}
 d12:	08 95       	ret

00000d14 <MIDI_Device_ConfigureEndpoints>:
#define  __INCLUDE_FROM_MIDI_DRIVER
#define  __INCLUDE_FROM_MIDI_DEVICE_C
#include "MIDIClassDevice.h"

bool MIDI_Device_ConfigureEndpoints(USB_ClassInfo_MIDI_Device_t* const MIDIInterfaceInfo)
{
 d14:	cf 93       	push	r28
 d16:	df 93       	push	r29
 d18:	ec 01       	movw	r28, r24
	memset(&MIDIInterfaceInfo->State, 0x00, sizeof(MIDIInterfaceInfo->State));
 d1a:	1b 86       	std	Y+11, r1	; 0x0b

	MIDIInterfaceInfo->Config.DataINEndpoint.Type  = EP_TYPE_BULK;
 d1c:	82 e0       	ldi	r24, 0x02	; 2
 d1e:	8c 83       	std	Y+4, r24	; 0x04
	MIDIInterfaceInfo->Config.DataOUTEndpoint.Type = EP_TYPE_BULK;
 d20:	89 87       	std	Y+9, r24	; 0x09

	if (!(Endpoint_ConfigureEndpointTable(&MIDIInterfaceInfo->Config.DataINEndpoint, 1)))
 d22:	ce 01       	movw	r24, r28
 d24:	01 96       	adiw	r24, 0x01	; 1
 d26:	61 e0       	ldi	r22, 0x01	; 1
 d28:	c6 dc       	rcall	.-1652   	; 0x6b6 <Endpoint_ConfigureEndpointTable>
 d2a:	88 23       	and	r24, r24
 d2c:	29 f0       	breq	.+10     	; 0xd38 <MIDI_Device_ConfigureEndpoints+0x24>
 d2e:	ce 01       	movw	r24, r28
	  return false;

	if (!(Endpoint_ConfigureEndpointTable(&MIDIInterfaceInfo->Config.DataOUTEndpoint, 1)))
 d30:	06 96       	adiw	r24, 0x06	; 6
 d32:	61 e0       	ldi	r22, 0x01	; 1
 d34:	c0 dc       	rcall	.-1664   	; 0x6b6 <Endpoint_ConfigureEndpointTable>
 d36:	01 c0       	rjmp	.+2      	; 0xd3a <MIDI_Device_ConfigureEndpoints+0x26>
 d38:	80 e0       	ldi	r24, 0x00	; 0
 d3a:	df 91       	pop	r29

	MIDIInterfaceInfo->Config.DataINEndpoint.Type  = EP_TYPE_BULK;
	MIDIInterfaceInfo->Config.DataOUTEndpoint.Type = EP_TYPE_BULK;

	if (!(Endpoint_ConfigureEndpointTable(&MIDIInterfaceInfo->Config.DataINEndpoint, 1)))
	  return false;
 d3c:	cf 91       	pop	r28

	if (!(Endpoint_ConfigureEndpointTable(&MIDIInterfaceInfo->Config.DataOUTEndpoint, 1)))
	  return false;

	return true;
}
 d3e:	08 95       	ret

00000d40 <MIDI_Device_Flush>:
 d40:	2e b3       	in	r18, 0x1e	; 30
 d42:	24 30       	cpi	r18, 0x04	; 4
	return ENDPOINT_RWSTREAM_NoError;
}

uint8_t MIDI_Device_Flush(USB_ClassInfo_MIDI_Device_t* const MIDIInterfaceInfo)
{
	if (USB_DeviceState != DEVICE_STATE_Configured)
 d44:	89 f4       	brne	.+34     	; 0xd68 <MIDI_Device_Flush+0x28>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 d46:	fc 01       	movw	r30, r24
 d48:	81 81       	ldd	r24, Z+1	; 0x01
 d4a:	8f 70       	andi	r24, 0x0F	; 15
 d4c:	80 93 e9 00 	sts	0x00E9, r24
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
 d50:	80 91 f2 00 	lds	r24, 0x00F2
 d54:	90 91 f3 00 	lds	r25, 0x00F3

	uint8_t ErrorCode;

	Endpoint_SelectEndpoint(MIDIInterfaceInfo->Config.DataINEndpoint.Address);

	if (Endpoint_BytesInEndpoint())
 d58:	00 97       	sbiw	r24, 0x00	; 0
 d5a:	41 f0       	breq	.+16     	; 0xd6c <MIDI_Device_Flush+0x2c>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 d5c:	80 91 e8 00 	lds	r24, 0x00E8
 d60:	8e 77       	andi	r24, 0x7E	; 126
 d62:	80 93 e8 00 	sts	0x00E8, r24
	{
		Endpoint_ClearIN();

		if ((ErrorCode = Endpoint_WaitUntilReady()) != ENDPOINT_READYWAIT_NoError)
 d66:	02 cd       	rjmp	.-1532   	; 0x76c <Endpoint_WaitUntilReady>
 d68:	82 e0       	ldi	r24, 0x02	; 2
 d6a:	08 95       	ret
}

uint8_t MIDI_Device_Flush(USB_ClassInfo_MIDI_Device_t* const MIDIInterfaceInfo)
{
	if (USB_DeviceState != DEVICE_STATE_Configured)
	  return ENDPOINT_RWSTREAM_DeviceDisconnected;
 d6c:	80 e0       	ldi	r24, 0x00	; 0
 d6e:	08 95       	ret

00000d70 <MIDI_Device_USBTask>:

		if ((ErrorCode = Endpoint_WaitUntilReady()) != ENDPOINT_READYWAIT_NoError)
		  return ErrorCode;
	}

	return ENDPOINT_READYWAIT_NoError;
 d70:	2e b3       	in	r18, 0x1e	; 30
}
 d72:	24 30       	cpi	r18, 0x04	; 4
	return true;
}

void MIDI_Device_USBTask(USB_ClassInfo_MIDI_Device_t* const MIDIInterfaceInfo)
{
	if (USB_DeviceState != DEVICE_STATE_Configured)
 d74:	51 f4       	brne	.+20     	; 0xd8a <MIDI_Device_USBTask+0x1a>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 d76:	fc 01       	movw	r30, r24
 d78:	21 81       	ldd	r18, Z+1	; 0x01
 d7a:	2f 70       	andi	r18, 0x0F	; 15
 d7c:	20 93 e9 00 	sts	0x00E9, r18
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 d80:	20 91 e8 00 	lds	r18, 0x00E8
	  return;

	#if !defined(NO_CLASS_DRIVER_AUTOFLUSH)
	Endpoint_SelectEndpoint(MIDIInterfaceInfo->Config.DataINEndpoint.Address);
	
	if (Endpoint_IsINReady())
 d84:	20 ff       	sbrs	r18, 0
 d86:	01 c0       	rjmp	.+2      	; 0xd8a <MIDI_Device_USBTask+0x1a>
	  MIDI_Device_Flush(MIDIInterfaceInfo);
 d88:	db cf       	rjmp	.-74     	; 0xd40 <MIDI_Device_Flush>
 d8a:	08 95       	ret

00000d8c <MIDI_Device_ReceiveEventPacket>:
 d8c:	fc 01       	movw	r30, r24
	return ENDPOINT_READYWAIT_NoError;
}

bool MIDI_Device_ReceiveEventPacket(USB_ClassInfo_MIDI_Device_t* const MIDIInterfaceInfo,
                                    MIDI_EventPacket_t* const Event)
{
 d8e:	cb 01       	movw	r24, r22
	if (USB_DeviceState != DEVICE_STATE_Configured)
 d90:	2e b3       	in	r18, 0x1e	; 30
 d92:	24 30       	cpi	r18, 0x04	; 4
 d94:	c1 f4       	brne	.+48     	; 0xdc6 <MIDI_Device_ReceiveEventPacket+0x3a>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 d96:	26 81       	ldd	r18, Z+6	; 0x06
 d98:	2f 70       	andi	r18, 0x0F	; 15
 d9a:	20 93 e9 00 	sts	0x00E9, r18
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
 d9e:	20 91 e8 00 	lds	r18, 0x00E8
	  return false;

	Endpoint_SelectEndpoint(MIDIInterfaceInfo->Config.DataOUTEndpoint.Address);

	if (!(Endpoint_IsReadWriteAllowed()))
 da2:	25 ff       	sbrs	r18, 5
 da4:	10 c0       	rjmp	.+32     	; 0xdc6 <MIDI_Device_ReceiveEventPacket+0x3a>
	  return false;

	Endpoint_Read_Stream_LE(Event, sizeof(MIDI_EventPacket_t), NULL);
 da6:	64 e0       	ldi	r22, 0x04	; 4
 da8:	70 e0       	ldi	r23, 0x00	; 0
 daa:	40 e0       	ldi	r20, 0x00	; 0
 dac:	50 e0       	ldi	r21, 0x00	; 0
 dae:	4a db       	rcall	.-2412   	; 0x444 <Endpoint_Read_Stream_LE>
 db0:	80 91 e8 00 	lds	r24, 0x00E8
 db4:	85 fd       	sbrc	r24, 5

	if (!(Endpoint_IsReadWriteAllowed()))
 db6:	09 c0       	rjmp	.+18     	; 0xdca <MIDI_Device_ReceiveEventPacket+0x3e>
 db8:	80 91 e8 00 	lds	r24, 0x00E8
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 dbc:	8b 77       	andi	r24, 0x7B	; 123
 dbe:	80 93 e8 00 	sts	0x00E8, r24
 dc2:	81 e0       	ldi	r24, 0x01	; 1
	  Endpoint_ClearOUT();

	return true;
 dc4:	08 95       	ret
 dc6:	80 e0       	ldi	r24, 0x00	; 0
	  return false;

	Endpoint_SelectEndpoint(MIDIInterfaceInfo->Config.DataOUTEndpoint.Address);

	if (!(Endpoint_IsReadWriteAllowed()))
	  return false;
 dc8:	08 95       	ret
 dca:	81 e0       	ldi	r24, 0x01	; 1
	Endpoint_Read_Stream_LE(Event, sizeof(MIDI_EventPacket_t), NULL);

	if (!(Endpoint_IsReadWriteAllowed()))
	  Endpoint_ClearOUT();

	return true;
 dcc:	08 95       	ret

00000dce <__mulsi3>:
 dce:	62 9f       	mul	r22, r18
 dd0:	d0 01       	movw	r26, r0
 dd2:	73 9f       	mul	r23, r19
 dd4:	f0 01       	movw	r30, r0
 dd6:	82 9f       	mul	r24, r18
 dd8:	e0 0d       	add	r30, r0
 dda:	f1 1d       	adc	r31, r1
 ddc:	64 9f       	mul	r22, r20
 dde:	e0 0d       	add	r30, r0
 de0:	f1 1d       	adc	r31, r1
 de2:	92 9f       	mul	r25, r18
 de4:	f0 0d       	add	r31, r0
 de6:	83 9f       	mul	r24, r19
 de8:	f0 0d       	add	r31, r0
 dea:	74 9f       	mul	r23, r20
 dec:	f0 0d       	add	r31, r0
 dee:	65 9f       	mul	r22, r21
 df0:	f0 0d       	add	r31, r0
 df2:	99 27       	eor	r25, r25
 df4:	72 9f       	mul	r23, r18
 df6:	b0 0d       	add	r27, r0
 df8:	e1 1d       	adc	r30, r1
 dfa:	f9 1f       	adc	r31, r25
 dfc:	63 9f       	mul	r22, r19
 dfe:	b0 0d       	add	r27, r0
 e00:	e1 1d       	adc	r30, r1
 e02:	f9 1f       	adc	r31, r25
 e04:	bd 01       	movw	r22, r26
 e06:	cf 01       	movw	r24, r30
 e08:	11 24       	eor	r1, r1
 e0a:	08 95       	ret

00000e0c <_exit>:
 e0c:	f8 94       	cli

00000e0e <__stop_program>:
 e0e:	ff cf       	rjmp	.-2      	; 0xe0e <__stop_program>
