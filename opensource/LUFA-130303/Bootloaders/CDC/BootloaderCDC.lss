
BootloaderCDC.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000092  00800100  0001eeec  00000fc0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000eec  0001e000  0001e000  000000d4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .apitable_trampolines 00000026  0001ffa0  0001ffa0  00001052  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .apitable_jumptable 00000018  0001ffe0  0001ffe0  00001078  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  4 .apitable_signatures 00000008  0001fff8  0001fff8  00001090  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  5 .bss          0000000e  00800192  00800192  00001098  2**0
                  ALLOC
  6 .noinit       00000002  008001a0  008001a0  00001098  2**0
                  ALLOC
  7 .stab         00000954  00000000  00000000  00001098  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .stabstr      00000196  00000000  00000000  000019ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 000003a0  00000000  00000000  00001b88  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   00005235  00000000  00000000  00001f28  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00001383  00000000  00000000  0000715d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000281b  00000000  00000000  000084e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00000928  00000000  00000000  0000acfc  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000027cf  00000000  00000000  0000b624  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    0000380a  00000000  00000000  0000ddf3  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000005f0  00000000  00000000  00011600  2**3
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0001e000 <__vectors>:
   1e000:	4b c0       	rjmp	.+150    	; 0x1e098 <__ctors_end>
   1e002:	00 00       	nop
   1e004:	84 c0       	rjmp	.+264    	; 0x1e10e <__bad_interrupt>
   1e006:	00 00       	nop
   1e008:	82 c0       	rjmp	.+260    	; 0x1e10e <__bad_interrupt>
   1e00a:	00 00       	nop
   1e00c:	80 c0       	rjmp	.+256    	; 0x1e10e <__bad_interrupt>
   1e00e:	00 00       	nop
   1e010:	7e c0       	rjmp	.+252    	; 0x1e10e <__bad_interrupt>
   1e012:	00 00       	nop
   1e014:	7c c0       	rjmp	.+248    	; 0x1e10e <__bad_interrupt>
   1e016:	00 00       	nop
   1e018:	7a c0       	rjmp	.+244    	; 0x1e10e <__bad_interrupt>
   1e01a:	00 00       	nop
   1e01c:	78 c0       	rjmp	.+240    	; 0x1e10e <__bad_interrupt>
   1e01e:	00 00       	nop
   1e020:	76 c0       	rjmp	.+236    	; 0x1e10e <__bad_interrupt>
   1e022:	00 00       	nop
   1e024:	74 c0       	rjmp	.+232    	; 0x1e10e <__bad_interrupt>
   1e026:	00 00       	nop
   1e028:	6f c5       	rjmp	.+2782   	; 0x1eb08 <__vector_10>
   1e02a:	00 00       	nop
   1e02c:	70 c0       	rjmp	.+224    	; 0x1e10e <__bad_interrupt>
   1e02e:	00 00       	nop
   1e030:	6e c0       	rjmp	.+220    	; 0x1e10e <__bad_interrupt>
   1e032:	00 00       	nop
   1e034:	6c c0       	rjmp	.+216    	; 0x1e10e <__bad_interrupt>
   1e036:	00 00       	nop
   1e038:	6a c0       	rjmp	.+212    	; 0x1e10e <__bad_interrupt>
   1e03a:	00 00       	nop
   1e03c:	68 c0       	rjmp	.+208    	; 0x1e10e <__bad_interrupt>
   1e03e:	00 00       	nop
   1e040:	66 c0       	rjmp	.+204    	; 0x1e10e <__bad_interrupt>
   1e042:	00 00       	nop
   1e044:	64 c0       	rjmp	.+200    	; 0x1e10e <__bad_interrupt>
   1e046:	00 00       	nop
   1e048:	62 c0       	rjmp	.+196    	; 0x1e10e <__bad_interrupt>
   1e04a:	00 00       	nop
   1e04c:	60 c0       	rjmp	.+192    	; 0x1e10e <__bad_interrupt>
   1e04e:	00 00       	nop
   1e050:	55 c3       	rjmp	.+1706   	; 0x1e6fc <__vector_20>
   1e052:	00 00       	nop
   1e054:	5c c0       	rjmp	.+184    	; 0x1e10e <__bad_interrupt>
   1e056:	00 00       	nop
   1e058:	5a c0       	rjmp	.+180    	; 0x1e10e <__bad_interrupt>
   1e05a:	00 00       	nop
   1e05c:	58 c0       	rjmp	.+176    	; 0x1e10e <__bad_interrupt>
   1e05e:	00 00       	nop
   1e060:	56 c0       	rjmp	.+172    	; 0x1e10e <__bad_interrupt>
   1e062:	00 00       	nop
   1e064:	54 c0       	rjmp	.+168    	; 0x1e10e <__bad_interrupt>
   1e066:	00 00       	nop
   1e068:	52 c0       	rjmp	.+164    	; 0x1e10e <__bad_interrupt>
   1e06a:	00 00       	nop
   1e06c:	50 c0       	rjmp	.+160    	; 0x1e10e <__bad_interrupt>
   1e06e:	00 00       	nop
   1e070:	4e c0       	rjmp	.+156    	; 0x1e10e <__bad_interrupt>
   1e072:	00 00       	nop
   1e074:	4c c0       	rjmp	.+152    	; 0x1e10e <__bad_interrupt>
   1e076:	00 00       	nop
   1e078:	4a c0       	rjmp	.+148    	; 0x1e10e <__bad_interrupt>
   1e07a:	00 00       	nop
   1e07c:	48 c0       	rjmp	.+144    	; 0x1e10e <__bad_interrupt>
   1e07e:	00 00       	nop
   1e080:	46 c0       	rjmp	.+140    	; 0x1e10e <__bad_interrupt>
   1e082:	00 00       	nop
   1e084:	44 c0       	rjmp	.+136    	; 0x1e10e <__bad_interrupt>
   1e086:	00 00       	nop
   1e088:	42 c0       	rjmp	.+132    	; 0x1e10e <__bad_interrupt>
   1e08a:	00 00       	nop
   1e08c:	40 c0       	rjmp	.+128    	; 0x1e10e <__bad_interrupt>
   1e08e:	00 00       	nop
   1e090:	3e c0       	rjmp	.+124    	; 0x1e10e <__bad_interrupt>
   1e092:	00 00       	nop
   1e094:	3c c0       	rjmp	.+120    	; 0x1e10e <__bad_interrupt>
   1e096:	00 00       	nop

0001e098 <__ctors_end>:
   1e098:	11 24       	eor	r1, r1
   1e09a:	1f be       	out	0x3f, r1	; 63
   1e09c:	cf ef       	ldi	r28, 0xFF	; 255
   1e09e:	d0 e2       	ldi	r29, 0x20	; 32
   1e0a0:	de bf       	out	0x3e, r29	; 62
   1e0a2:	cd bf       	out	0x3d, r28	; 61

0001e0a4 <Application_Jump_Check>:
		/* Re-enable JTAG debugging */
		JTAG_ENABLE();
	#endif

	/* If the reset source was the bootloader and the key is correct, clear it and jump to the application */
	if ((MCUSR & (1 << WDRF)) && (MagicBootKey == MAGIC_BOOT_KEY))
   1e0a4:	04 b6       	in	r0, 0x34	; 52
   1e0a6:	03 fe       	sbrs	r0, 3
   1e0a8:	1a c0       	rjmp	.+52     	; 0x1e0de <__do_copy_data>
   1e0aa:	80 91 a0 01 	lds	r24, 0x01A0
   1e0ae:	90 91 a1 01 	lds	r25, 0x01A1
   1e0b2:	2c ed       	ldi	r18, 0xDC	; 220
   1e0b4:	82 34       	cpi	r24, 0x42	; 66
   1e0b6:	92 07       	cpc	r25, r18
   1e0b8:	91 f4       	brne	.+36     	; 0x1e0de <__do_copy_data>

	/* If a request has been made to jump to the user application, honor it */
	if (JumpToApplication)
	{
		/* Turn off the watchdog */
		MCUSR &= ~(1<<WDRF);
   1e0ba:	84 b7       	in	r24, 0x34	; 52
   1e0bc:	87 7f       	andi	r24, 0xF7	; 247
   1e0be:	84 bf       	out	0x34, r24	; 52
		wdt_disable();
   1e0c0:	88 e1       	ldi	r24, 0x18	; 24
   1e0c2:	0f b6       	in	r0, 0x3f	; 63
   1e0c4:	f8 94       	cli
   1e0c6:	80 93 60 00 	sts	0x0060, r24
   1e0ca:	10 92 60 00 	sts	0x0060, r1
   1e0ce:	0f be       	out	0x3f, r0	; 63

		/* Clear the boot key and jump to the user application */
		MagicBootKey = 0;
   1e0d0:	10 92 a1 01 	sts	0x01A1, r1
   1e0d4:	10 92 a0 01 	sts	0x01A0, r1

		// cppcheck-suppress constStatement
		((void (*)(void))0x0000)();
   1e0d8:	e0 e0       	ldi	r30, 0x00	; 0
   1e0da:	f0 e0       	ldi	r31, 0x00	; 0
   1e0dc:	09 95       	icall

0001e0de <__do_copy_data>:
   1e0de:	11 e0       	ldi	r17, 0x01	; 1
   1e0e0:	a0 e0       	ldi	r26, 0x00	; 0
   1e0e2:	b1 e0       	ldi	r27, 0x01	; 1
   1e0e4:	ec ee       	ldi	r30, 0xEC	; 236
   1e0e6:	fe ee       	ldi	r31, 0xEE	; 238
   1e0e8:	01 e0       	ldi	r16, 0x01	; 1
   1e0ea:	0b bf       	out	0x3b, r16	; 59
   1e0ec:	02 c0       	rjmp	.+4      	; 0x1e0f2 <__do_copy_data+0x14>
   1e0ee:	07 90       	elpm	r0, Z+
   1e0f0:	0d 92       	st	X+, r0
   1e0f2:	a2 39       	cpi	r26, 0x92	; 146
   1e0f4:	b1 07       	cpc	r27, r17
   1e0f6:	d9 f7       	brne	.-10     	; 0x1e0ee <__do_copy_data+0x10>
   1e0f8:	1b be       	out	0x3b, r1	; 59

0001e0fa <__do_clear_bss>:
   1e0fa:	11 e0       	ldi	r17, 0x01	; 1
   1e0fc:	a2 e9       	ldi	r26, 0x92	; 146
   1e0fe:	b1 e0       	ldi	r27, 0x01	; 1
   1e100:	01 c0       	rjmp	.+2      	; 0x1e104 <.do_clear_bss_start>

0001e102 <.do_clear_bss_loop>:
   1e102:	1d 92       	st	X+, r1

0001e104 <.do_clear_bss_start>:
   1e104:	a0 3a       	cpi	r26, 0xA0	; 160
   1e106:	b1 07       	cpc	r27, r17
   1e108:	e1 f7       	brne	.-8      	; 0x1e102 <.do_clear_bss_loop>
   1e10a:	33 d0       	rcall	.+102    	; 0x1e172 <main>
   1e10c:	ed c6       	rjmp	.+3546   	; 0x1eee8 <_exit>

0001e10e <__bad_interrupt>:
   1e10e:	78 cf       	rjmp	.-272    	; 0x1e000 <__vectors>

0001e110 <FetchNextCommandByte>:
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
   1e110:	84 e0       	ldi	r24, 0x04	; 4
   1e112:	80 93 e9 00 	sts	0x00E9, r24
   1e116:	0d c0       	rjmp	.+26     	; 0x1e132 <FetchNextCommandByte+0x22>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
   1e118:	80 91 e8 00 	lds	r24, 0x00E8
   1e11c:	8b 77       	andi	r24, 0x7B	; 123
   1e11e:	80 93 e8 00 	sts	0x00E8, r24
   1e122:	03 c0       	rjmp	.+6      	; 0x1e12a <FetchNextCommandByte+0x1a>
	{
		Endpoint_ClearOUT();

		while (!(Endpoint_IsOUTReceived()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
   1e124:	8e b3       	in	r24, 0x1e	; 30
   1e126:	88 23       	and	r24, r24
   1e128:	59 f0       	breq	.+22     	; 0x1e140 <FetchNextCommandByte+0x30>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
   1e12a:	80 91 e8 00 	lds	r24, 0x00E8
	/* If OUT endpoint empty, clear it and wait for the next packet from the host */
	while (!(Endpoint_IsReadWriteAllowed()))
	{
		Endpoint_ClearOUT();

		while (!(Endpoint_IsOUTReceived()))
   1e12e:	82 ff       	sbrs	r24, 2
   1e130:	f9 cf       	rjmp	.-14     	; 0x1e124 <FetchNextCommandByte+0x14>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
   1e132:	80 91 e8 00 	lds	r24, 0x00E8
{
	/* Select the OUT endpoint so that the next data byte can be read */
	Endpoint_SelectEndpoint(CDC_RX_EPADDR);

	/* If OUT endpoint empty, clear it and wait for the next packet from the host */
	while (!(Endpoint_IsReadWriteAllowed()))
   1e136:	85 ff       	sbrs	r24, 5
   1e138:	ef cf       	rjmp	.-34     	; 0x1e118 <FetchNextCommandByte+0x8>
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
   1e13a:	80 91 f1 00 	lds	r24, 0x00F1
			  return 0;
		}
	}

	/* Fetch the next byte from the OUT endpoint */
	return Endpoint_Read_8();
   1e13e:	08 95       	ret
		Endpoint_ClearOUT();

		while (!(Endpoint_IsOUTReceived()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
			  return 0;
   1e140:	80 e0       	ldi	r24, 0x00	; 0
		}
	}

	/* Fetch the next byte from the OUT endpoint */
	return Endpoint_Read_8();
}
   1e142:	08 95       	ret

0001e144 <WriteNextResponseByte>:
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
   1e144:	93 e0       	ldi	r25, 0x03	; 3
   1e146:	90 93 e9 00 	sts	0x00E9, r25
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
   1e14a:	90 91 e8 00 	lds	r25, 0x00E8
{
	/* Select the IN endpoint so that the next data byte can be written */
	Endpoint_SelectEndpoint(CDC_TX_EPADDR);

	/* If IN endpoint full, clear it and wait until ready for the next packet to the host */
	if (!(Endpoint_IsReadWriteAllowed()))
   1e14e:	95 fd       	sbrc	r25, 5
   1e150:	0d c0       	rjmp	.+26     	; 0x1e16c <WriteNextResponseByte+0x28>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
   1e152:	90 91 e8 00 	lds	r25, 0x00E8
   1e156:	9e 77       	andi	r25, 0x7E	; 126
   1e158:	90 93 e8 00 	sts	0x00E8, r25
   1e15c:	03 c0       	rjmp	.+6      	; 0x1e164 <WriteNextResponseByte+0x20>
	{
		Endpoint_ClearIN();

		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
   1e15e:	9e b3       	in	r25, 0x1e	; 30
   1e160:	99 23       	and	r25, r25
   1e162:	31 f0       	breq	.+12     	; 0x1e170 <WriteNextResponseByte+0x2c>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
   1e164:	90 91 e8 00 	lds	r25, 0x00E8
	/* If IN endpoint full, clear it and wait until ready for the next packet to the host */
	if (!(Endpoint_IsReadWriteAllowed()))
	{
		Endpoint_ClearIN();

		while (!(Endpoint_IsINReady()))
   1e168:	90 ff       	sbrs	r25, 0
   1e16a:	f9 cf       	rjmp	.-14     	; 0x1e15e <WriteNextResponseByte+0x1a>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
   1e16c:	80 93 f1 00 	sts	0x00F1, r24
   1e170:	08 95       	ret

0001e172 <main>:
/** Main program entry point. This routine configures the hardware required by the bootloader, then continuously
 *  runs the bootloader processing routine until instructed to soft-exit, or hard-reset via the watchdog to start
 *  the loaded application code.
 */
int main(void)
{
   1e172:	cf 93       	push	r28
   1e174:	df 93       	push	r29
   1e176:	cd b7       	in	r28, 0x3d	; 61
   1e178:	de b7       	in	r29, 0x3e	; 62
   1e17a:	29 97       	sbiw	r28, 0x09	; 9
   1e17c:	0f b6       	in	r0, 0x3f	; 63
   1e17e:	f8 94       	cli
   1e180:	de bf       	out	0x3e, r29	; 62
   1e182:	0f be       	out	0x3f, r0	; 63
   1e184:	cd bf       	out	0x3d, r28	; 61

/** Configures all hardware required for the bootloader. */
static void SetupHardware(void)
{
	/* Disable watchdog if enabled by bootloader/fuses */
	MCUSR &= ~(1 << WDRF);
   1e186:	84 b7       	in	r24, 0x34	; 52
   1e188:	87 7f       	andi	r24, 0xF7	; 247
   1e18a:	84 bf       	out	0x34, r24	; 52
	wdt_disable();
   1e18c:	88 e1       	ldi	r24, 0x18	; 24
   1e18e:	0f b6       	in	r0, 0x3f	; 63
   1e190:	f8 94       	cli
   1e192:	80 93 60 00 	sts	0x0060, r24
   1e196:	10 92 60 00 	sts	0x0060, r1
   1e19a:	0f be       	out	0x3f, r0	; 63
The type of x is clock_div_t.
*/
void clock_prescale_set(clock_div_t __x)
{
    uint8_t __tmp = _BV(CLKPCE);
    __asm__ __volatile__ (
   1e19c:	90 e0       	ldi	r25, 0x00	; 0
   1e19e:	80 e8       	ldi	r24, 0x80	; 128
   1e1a0:	0f b6       	in	r0, 0x3f	; 63
   1e1a2:	f8 94       	cli
   1e1a4:	80 93 61 00 	sts	0x0061, r24
   1e1a8:	90 93 61 00 	sts	0x0061, r25
   1e1ac:	0f be       	out	0x3f, r0	; 63

	/* Disable clock division */
	clock_prescale_set(clock_div_1);

	/* Relocate the interrupt vector table to the bootloader section */
	MCUCR = (1 << IVCE);
   1e1ae:	11 e0       	ldi	r17, 0x01	; 1
   1e1b0:	15 bf       	out	0x35, r17	; 53
	MCUCR = (1 << IVSEL);
   1e1b2:	82 e0       	ldi	r24, 0x02	; 2
   1e1b4:	85 bf       	out	0x35, r24	; 53

	/* Initialize the USB and other board hardware drivers */
	USB_Init();
   1e1b6:	8d d4       	rcall	.+2330   	; 0x1ead2 <USB_Init>
   1e1b8:	8a b1       	in	r24, 0x0a	; 10

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void LEDs_Init(void)
			{
				DDRD  |=  LEDS_ALL_LEDS;
   1e1ba:	80 6f       	ori	r24, 0xF0	; 240
   1e1bc:	8a b9       	out	0x0a, r24	; 10
   1e1be:	8b b1       	in	r24, 0x0b	; 11
				PORTD &= ~LEDS_ALL_LEDS;
   1e1c0:	8f 70       	andi	r24, 0x0F	; 15
   1e1c2:	8b b9       	out	0x0b, r24	; 11
   1e1c4:	10 93 6f 00 	sts	0x006F, r17
	LEDs_Init();

	/* Bootloader active LED toggle timer initialization */
	TIMSK1 = (1 << TOIE1);
   1e1c8:	83 e0       	ldi	r24, 0x03	; 3
	TCCR1B = ((1 << CS11) | (1 << CS10));
   1e1ca:	80 93 81 00 	sts	0x0081, r24
   1e1ce:	8b b1       	in	r24, 0x0b	; 11
				PORTD &= ~LEDMask;
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
			{
				PORTD = ((PORTD & ~LEDS_ALL_LEDS) | LEDMask);
   1e1d0:	8f 70       	andi	r24, 0x0F	; 15
   1e1d2:	80 61       	ori	r24, 0x10	; 16
   1e1d4:	8b b9       	out	0x0b, r24	; 11
   1e1d6:	78 94       	sei
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				sei();
   1e1d8:	74 e0       	ldi	r23, 0x04	; 4
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
   1e1da:	27 2e       	mov	r2, r23
   1e1dc:	e3 e0       	ldi	r30, 0x03	; 3
   1e1de:	8e 2e       	mov	r8, r30
   1e1e0:	01 e0       	ldi	r16, 0x01	; 1
				else
				{
					LowByte = FetchNextCommandByte();
				}

				HighByte = !HighByte;
   1e1e2:	f5 e0       	ldi	r31, 0x05	; 5

		/* If in FLASH programming mode, commit the page after writing */
		if (MemoryType == MEMORY_TYPE_FLASH)
		{
			/* Commit the flash page to memory */
			boot_page_write(PageStartAddress);
   1e1e4:	3f 2e       	mov	r3, r31
   1e1e6:	a9 e0       	ldi	r26, 0x09	; 9
	{
		WriteNextResponseByte(boot_lock_fuse_bits_get(GET_HIGH_FUSE_BITS));
	}
	else if (Command == AVR109_COMMAND_ReadExtendedFuses)
	{
		WriteNextResponseByte(boot_lock_fuse_bits_get(GET_EXTENDED_FUSE_BITS));
   1e1e8:	9a 2e       	mov	r9, r26
   1e1ea:	6c c2       	rjmp	.+1240   	; 0x1e6c4 <main+0x552>
   1e1ec:	20 92 e9 00 	sts	0x00E9, r2
   1e1f0:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
   1e1f4:	82 ff       	sbrs	r24, 2
{
	/* Select the OUT endpoint */
	Endpoint_SelectEndpoint(CDC_RX_EPADDR);

	/* Check if endpoint has a command in it sent from the host */
	if (!(Endpoint_IsOUTReceived()))
   1e1f6:	65 c2       	rjmp	.+1226   	; 0x1e6c2 <main+0x550>
   1e1f8:	8b df       	rcall	.-234    	; 0x1e110 <FetchNextCommandByte>
	  return;

	/* Read in the bootloader command (first byte sent from host) */
	uint8_t Command = FetchNextCommandByte();
   1e1fa:	28 2f       	mov	r18, r24
   1e1fc:	85 34       	cpi	r24, 0x45	; 69
   1e1fe:	19 f4       	brne	.+6      	; 0x1e206 <main+0x94>

	if (Command == AVR109_COMMAND_ExitBootloader)
   1e200:	10 92 08 01 	sts	0x0108, r1
	{
		RunBootloader = false;
   1e204:	06 c0       	rjmp	.+12     	; 0x1e212 <main+0xa0>
   1e206:	88 57       	subi	r24, 0x78	; 120
   1e208:	82 30       	cpi	r24, 0x02	; 2

		/* Send confirmation byte back to the host */
		WriteNextResponseByte('\r');
	}
	else if ((Command == AVR109_COMMAND_SetLED) || (Command == AVR109_COMMAND_ClearLED) ||
   1e20a:	10 f0       	brcs	.+4      	; 0x1e210 <main+0x9e>
   1e20c:	24 35       	cpi	r18, 0x54	; 84
   1e20e:	19 f4       	brne	.+6      	; 0x1e216 <main+0xa4>
   1e210:	7f df       	rcall	.-258    	; 0x1e110 <FetchNextCommandByte>
   1e212:	8d e0       	ldi	r24, 0x0D	; 13
	         (Command == AVR109_COMMAND_SelectDeviceType))
	{
		FetchNextCommandByte();
   1e214:	2e c2       	rjmp	.+1116   	; 0x1e672 <main+0x500>
   1e216:	20 35       	cpi	r18, 0x50	; 80

		/* Send confirmation byte back to the host */
		WriteNextResponseByte('\r');
   1e218:	e1 f3       	breq	.-8      	; 0x1e212 <main+0xa0>
   1e21a:	2c 34       	cpi	r18, 0x4C	; 76
	}
	else if ((Command == AVR109_COMMAND_EnterProgrammingMode) || (Command == AVR109_COMMAND_LeaveProgrammingMode))
   1e21c:	d1 f3       	breq	.-12     	; 0x1e212 <main+0xa0>
   1e21e:	24 37       	cpi	r18, 0x74	; 116
   1e220:	11 f4       	brne	.+4      	; 0x1e226 <main+0xb4>
   1e222:	84 e4       	ldi	r24, 0x44	; 68
	{
		/* Send confirmation byte back to the host */
		WriteNextResponseByte('\r');
	}
	else if (Command == AVR109_COMMAND_ReadPartCode)
   1e224:	93 c0       	rjmp	.+294    	; 0x1e34c <main+0x1da>
   1e226:	21 36       	cpi	r18, 0x61	; 97
	{
		/* Return ATMEGA128 part code - this is only to allow AVRProg to use the bootloader */
		WriteNextResponseByte(0x44);
   1e228:	11 f4       	brne	.+4      	; 0x1e22e <main+0xbc>
   1e22a:	89 e5       	ldi	r24, 0x59	; 89
		WriteNextResponseByte(0x00);
	}
	else if (Command == AVR109_COMMAND_ReadAutoAddressIncrement)
   1e22c:	22 c2       	rjmp	.+1092   	; 0x1e672 <main+0x500>
   1e22e:	21 34       	cpi	r18, 0x41	; 65
	{
		/* Indicate auto-address increment is supported */
		WriteNextResponseByte('Y');
   1e230:	19 f5       	brne	.+70     	; 0x1e278 <main+0x106>
   1e232:	6e df       	rcall	.-292    	; 0x1e110 <FetchNextCommandByte>
	}
	else if (Command == AVR109_COMMAND_SetCurrentAddress)
   1e234:	18 2f       	mov	r17, r24
   1e236:	6c df       	rcall	.-296    	; 0x1e110 <FetchNextCommandByte>
	{
		/* Set the current address to that given by the host (translate 16-bit word address to byte address) */
		CurrAddress   = (FetchNextCommandByte() << 9);
   1e238:	28 2f       	mov	r18, r24
   1e23a:	30 e0       	ldi	r19, 0x00	; 0
   1e23c:	22 0f       	add	r18, r18
		CurrAddress  |= (FetchNextCommandByte() << 1);
   1e23e:	33 1f       	adc	r19, r19
   1e240:	a9 01       	movw	r20, r18
   1e242:	66 27       	eor	r22, r22
   1e244:	57 fd       	sbrc	r21, 7
   1e246:	60 95       	com	r22
   1e248:	76 2f       	mov	r23, r22
   1e24a:	11 0f       	add	r17, r17
   1e24c:	1c 83       	std	Y+4, r17	; 0x04
   1e24e:	1b 82       	std	Y+3, r1	; 0x03
   1e250:	2b 81       	ldd	r18, Y+3	; 0x03
   1e252:	3c 81       	ldd	r19, Y+4	; 0x04
		WriteNextResponseByte('Y');
	}
	else if (Command == AVR109_COMMAND_SetCurrentAddress)
	{
		/* Set the current address to that given by the host (translate 16-bit word address to byte address) */
		CurrAddress   = (FetchNextCommandByte() << 9);
   1e254:	c9 01       	movw	r24, r18
   1e256:	aa 27       	eor	r26, r26
   1e258:	97 fd       	sbrc	r25, 7
   1e25a:	a0 95       	com	r26
   1e25c:	ba 2f       	mov	r27, r26
   1e25e:	48 2b       	or	r20, r24
   1e260:	59 2b       	or	r21, r25
   1e262:	6a 2b       	or	r22, r26
   1e264:	7b 2b       	or	r23, r27
   1e266:	40 93 92 01 	sts	0x0192, r20
		CurrAddress  |= (FetchNextCommandByte() << 1);
   1e26a:	50 93 93 01 	sts	0x0193, r21
   1e26e:	60 93 94 01 	sts	0x0194, r22
   1e272:	70 93 95 01 	sts	0x0195, r23
   1e276:	cd cf       	rjmp	.-102    	; 0x1e212 <main+0xa0>
   1e278:	20 37       	cpi	r18, 0x70	; 112
   1e27a:	11 f4       	brne	.+4      	; 0x1e280 <main+0x10e>
   1e27c:	83 e5       	ldi	r24, 0x53	; 83
   1e27e:	f9 c1       	rjmp	.+1010   	; 0x1e672 <main+0x500>
   1e280:	23 35       	cpi	r18, 0x53	; 83

		/* Send confirmation byte back to the host */
		WriteNextResponseByte('\r');
	}
	else if (Command == AVR109_COMMAND_ReadBootloaderInterface)
   1e282:	59 f4       	brne	.+22     	; 0x1e29a <main+0x128>
   1e284:	80 e0       	ldi	r24, 0x00	; 0
	{
		/* Indicate serial programmer back to the host */
		WriteNextResponseByte('S');
   1e286:	91 e0       	ldi	r25, 0x01	; 1
   1e288:	17 e0       	ldi	r17, 0x07	; 7
	}
	else if (Command == AVR109_COMMAND_ReadBootloaderIdentifier)
   1e28a:	6c 01       	movw	r12, r24
   1e28c:	f6 01       	movw	r30, r12
   1e28e:	81 91       	ld	r24, Z+
   1e290:	6f 01       	movw	r12, r30
   1e292:	58 df       	rcall	.-336    	; 0x1e144 <WriteNextResponseByte>
   1e294:	11 50       	subi	r17, 0x01	; 1
	{
		/* Write the 7-byte software identifier to the endpoint */
		for (uint8_t CurrByte = 0; CurrByte < 7; CurrByte++)
		  WriteNextResponseByte(SOFTWARE_IDENTIFIER[CurrByte]);
   1e296:	d1 f7       	brne	.-12     	; 0x1e28c <main+0x11a>
   1e298:	ed c1       	rjmp	.+986    	; 0x1e674 <main+0x502>
   1e29a:	26 35       	cpi	r18, 0x56	; 86
   1e29c:	21 f4       	brne	.+8      	; 0x1e2a6 <main+0x134>
   1e29e:	81 e3       	ldi	r24, 0x31	; 49
   1e2a0:	51 df       	rcall	.-350    	; 0x1e144 <WriteNextResponseByte>
		WriteNextResponseByte('S');
	}
	else if (Command == AVR109_COMMAND_ReadBootloaderIdentifier)
	{
		/* Write the 7-byte software identifier to the endpoint */
		for (uint8_t CurrByte = 0; CurrByte < 7; CurrByte++)
   1e2a2:	80 e3       	ldi	r24, 0x30	; 48
   1e2a4:	e6 c1       	rjmp	.+972    	; 0x1e672 <main+0x500>
		  WriteNextResponseByte(SOFTWARE_IDENTIFIER[CurrByte]);
	}
	else if (Command == AVR109_COMMAND_ReadBootloaderSWVersion)
   1e2a6:	23 37       	cpi	r18, 0x73	; 115
   1e2a8:	31 f4       	brne	.+12     	; 0x1e2b6 <main+0x144>
	{
		WriteNextResponseByte('0' + BOOTLOADER_VERSION_MAJOR);
   1e2aa:	82 e8       	ldi	r24, 0x82	; 130
   1e2ac:	4b df       	rcall	.-362    	; 0x1e144 <WriteNextResponseByte>
   1e2ae:	87 e9       	ldi	r24, 0x97	; 151
		WriteNextResponseByte('0' + BOOTLOADER_VERSION_MINOR);
   1e2b0:	49 df       	rcall	.-366    	; 0x1e144 <WriteNextResponseByte>
   1e2b2:	8e e1       	ldi	r24, 0x1E	; 30
	}
	else if (Command == AVR109_COMMAND_ReadSignature)
   1e2b4:	de c1       	rjmp	.+956    	; 0x1e672 <main+0x500>
   1e2b6:	25 36       	cpi	r18, 0x65	; 101
	{
		WriteNextResponseByte(AVR_SIGNATURE_3);
   1e2b8:	11 f5       	brne	.+68     	; 0x1e2fe <main+0x18c>
   1e2ba:	80 e0       	ldi	r24, 0x00	; 0
   1e2bc:	90 e0       	ldi	r25, 0x00	; 0
		WriteNextResponseByte(AVR_SIGNATURE_2);
   1e2be:	dc 01       	movw	r26, r24
   1e2c0:	fc 01       	movw	r30, r24
   1e2c2:	a0 93 5b 00 	sts	0x005B, r26
		WriteNextResponseByte(AVR_SIGNATURE_1);
   1e2c6:	80 92 57 00 	sts	0x0057, r8
	}
	else if (Command == AVR109_COMMAND_EraseFLASH)
   1e2ca:	e8 95       	spm
   1e2cc:	07 b6       	in	r0, 0x37	; 55
   1e2ce:	00 fc       	sbrc	r0, 0
   1e2d0:	fd cf       	rjmp	.-6      	; 0x1e2cc <main+0x15a>
	{
		/* Clear the application section of flash */
		for (uint32_t CurrFlashAddress = 0; CurrFlashAddress < (uint32_t)BOOT_START_ADDR; CurrFlashAddress += SPM_PAGESIZE)
		{
			boot_page_erase(CurrFlashAddress);
   1e2d2:	fc 01       	movw	r30, r24
   1e2d4:	a0 93 5b 00 	sts	0x005B, r26
   1e2d8:	30 92 57 00 	sts	0x0057, r3
   1e2dc:	e8 95       	spm
			boot_spm_busy_wait();
   1e2de:	07 b6       	in	r0, 0x37	; 55
   1e2e0:	00 fc       	sbrc	r0, 0
   1e2e2:	fd cf       	rjmp	.-6      	; 0x1e2de <main+0x16c>
			boot_page_write(CurrFlashAddress);
   1e2e4:	80 50       	subi	r24, 0x00	; 0
   1e2e6:	9f 4f       	sbci	r25, 0xFF	; 255
   1e2e8:	af 4f       	sbci	r26, 0xFF	; 255
   1e2ea:	bf 4f       	sbci	r27, 0xFF	; 255
   1e2ec:	80 30       	cpi	r24, 0x00	; 0
   1e2ee:	f0 ee       	ldi	r31, 0xE0	; 224
			boot_spm_busy_wait();
   1e2f0:	9f 07       	cpc	r25, r31
   1e2f2:	f1 e0       	ldi	r31, 0x01	; 1
   1e2f4:	af 07       	cpc	r26, r31
		WriteNextResponseByte(AVR_SIGNATURE_1);
	}
	else if (Command == AVR109_COMMAND_EraseFLASH)
	{
		/* Clear the application section of flash */
		for (uint32_t CurrFlashAddress = 0; CurrFlashAddress < (uint32_t)BOOT_START_ADDR; CurrFlashAddress += SPM_PAGESIZE)
   1e2f6:	f0 e0       	ldi	r31, 0x00	; 0
   1e2f8:	bf 07       	cpc	r27, r31
   1e2fa:	11 f7       	brne	.-60     	; 0x1e2c0 <main+0x14e>
   1e2fc:	8a cf       	rjmp	.-236    	; 0x1e212 <main+0xa0>
   1e2fe:	2c 36       	cpi	r18, 0x6C	; 108
   1e300:	49 f4       	brne	.+18     	; 0x1e314 <main+0x1a2>
   1e302:	06 df       	rcall	.-500    	; 0x1e110 <FetchNextCommandByte>
   1e304:	80 95       	com	r24
   1e306:	e1 e0       	ldi	r30, 0x01	; 1
   1e308:	f0 e0       	ldi	r31, 0x00	; 0
   1e30a:	08 2e       	mov	r0, r24
   1e30c:	90 92 57 00 	sts	0x0057, r9

		/* Send confirmation byte back to the host */
		WriteNextResponseByte('\r');
	}
	#if !defined(NO_LOCK_BYTE_WRITE_SUPPORT)
	else if (Command == AVR109_COMMAND_WriteLockbits)
   1e310:	e8 95       	spm
   1e312:	7f cf       	rjmp	.-258    	; 0x1e212 <main+0xa0>
	{
		/* Set the lock bits to those given by the host */
		boot_lock_bits_set(FetchNextCommandByte());
   1e314:	22 37       	cpi	r18, 0x72	; 114
   1e316:	19 f4       	brne	.+6      	; 0x1e31e <main+0x1ac>
   1e318:	e1 e0       	ldi	r30, 0x01	; 1
   1e31a:	f0 e0       	ldi	r31, 0x00	; 0
   1e31c:	0e c0       	rjmp	.+28     	; 0x1e33a <main+0x1c8>
   1e31e:	26 34       	cpi	r18, 0x46	; 70
   1e320:	19 f4       	brne	.+6      	; 0x1e328 <main+0x1b6>
   1e322:	e0 e0       	ldi	r30, 0x00	; 0
   1e324:	f0 e0       	ldi	r31, 0x00	; 0
   1e326:	09 c0       	rjmp	.+18     	; 0x1e33a <main+0x1c8>

		/* Send confirmation byte back to the host */
		WriteNextResponseByte('\r');
	}
	#endif
	else if (Command == AVR109_COMMAND_ReadLockbits)
   1e328:	2e 34       	cpi	r18, 0x4E	; 78
   1e32a:	19 f4       	brne	.+6      	; 0x1e332 <main+0x1c0>
	{
		WriteNextResponseByte(boot_lock_fuse_bits_get(GET_LOCK_BITS));
   1e32c:	e3 e0       	ldi	r30, 0x03	; 3
   1e32e:	f0 e0       	ldi	r31, 0x00	; 0
   1e330:	04 c0       	rjmp	.+8      	; 0x1e33a <main+0x1c8>
	}
	else if (Command == AVR109_COMMAND_ReadLowFuses)
   1e332:	21 35       	cpi	r18, 0x51	; 81
   1e334:	31 f4       	brne	.+12     	; 0x1e342 <main+0x1d0>
	{
		WriteNextResponseByte(boot_lock_fuse_bits_get(GET_LOW_FUSE_BITS));
   1e336:	e2 e0       	ldi	r30, 0x02	; 2
   1e338:	f0 e0       	ldi	r31, 0x00	; 0
   1e33a:	90 92 57 00 	sts	0x0057, r9
	}
	else if (Command == AVR109_COMMAND_ReadHighFuses)
   1e33e:	84 91       	lpm	r24, Z
	{
		WriteNextResponseByte(boot_lock_fuse_bits_get(GET_HIGH_FUSE_BITS));
   1e340:	98 c1       	rjmp	.+816    	; 0x1e672 <main+0x500>
   1e342:	22 36       	cpi	r18, 0x62	; 98
   1e344:	31 f4       	brne	.+12     	; 0x1e352 <main+0x1e0>
	}
	else if (Command == AVR109_COMMAND_ReadExtendedFuses)
   1e346:	89 e5       	ldi	r24, 0x59	; 89
   1e348:	fd de       	rcall	.-518    	; 0x1e144 <WriteNextResponseByte>
	{
		WriteNextResponseByte(boot_lock_fuse_bits_get(GET_EXTENDED_FUSE_BITS));
   1e34a:	81 e0       	ldi	r24, 0x01	; 1
   1e34c:	fb de       	rcall	.-522    	; 0x1e144 <WriteNextResponseByte>
   1e34e:	80 e0       	ldi	r24, 0x00	; 0
   1e350:	90 c1       	rjmp	.+800    	; 0x1e672 <main+0x500>
   1e352:	22 34       	cpi	r18, 0x42	; 66
   1e354:	19 f0       	breq	.+6      	; 0x1e35c <main+0x1ea>
	}
	#if !defined(NO_BLOCK_SUPPORT)
	else if (Command == AVR109_COMMAND_GetBlockWriteSupport)
   1e356:	27 36       	cpi	r18, 0x67	; 103
   1e358:	09 f0       	breq	.+2      	; 0x1e35c <main+0x1ea>
	{
		WriteNextResponseByte('Y');
   1e35a:	ed c0       	rjmp	.+474    	; 0x1e536 <main+0x3c4>
   1e35c:	28 87       	std	Y+8, r18	; 0x08
   1e35e:	d8 de       	rcall	.-592    	; 0x1e110 <FetchNextCommandByte>

		/* Send block size to the host */
		WriteNextResponseByte(SPM_PAGESIZE >> 8);
   1e360:	18 2f       	mov	r17, r24
   1e362:	d6 de       	rcall	.-596    	; 0x1e110 <FetchNextCommandByte>
   1e364:	a8 2e       	mov	r10, r24
		WriteNextResponseByte(SPM_PAGESIZE & 0xFF);
   1e366:	d4 de       	rcall	.-600    	; 0x1e110 <FetchNextCommandByte>
   1e368:	38 2f       	mov	r19, r24
	}
	else if ((Command == AVR109_COMMAND_BlockWrite) || (Command == AVR109_COMMAND_BlockRead))
   1e36a:	85 54       	subi	r24, 0x45	; 69
   1e36c:	28 85       	ldd	r18, Y+8	; 0x08
   1e36e:	82 30       	cpi	r24, 0x02	; 2
   1e370:	08 f0       	brcs	.+2      	; 0x1e374 <main+0x202>
   1e372:	7e c1       	rjmp	.+764    	; 0x1e670 <main+0x4fe>
	char     MemoryType;

	uint8_t  HighByte = 0;
	uint8_t  LowByte  = 0;

	BlockSize  = (FetchNextCommandByte() << 8);
   1e374:	1a 83       	std	Y+2, r17	; 0x02
   1e376:	19 82       	std	Y+1, r1	; 0x01
   1e378:	bb 24       	eor	r11, r11
   1e37a:	89 81       	ldd	r24, Y+1	; 0x01
	BlockSize |=  FetchNextCommandByte();
   1e37c:	9a 81       	ldd	r25, Y+2	; 0x02
   1e37e:	a8 2a       	or	r10, r24
   1e380:	b9 2a       	or	r11, r25

	MemoryType =  FetchNextCommandByte();
   1e382:	27 36       	cpi	r18, 0x67	; 103
   1e384:	09 f0       	breq	.+2      	; 0x1e388 <main+0x216>
   1e386:	4c c0       	rjmp	.+152    	; 0x1e420 <main+0x2ae>

	if ((MemoryType != MEMORY_TYPE_FLASH) && (MemoryType != MEMORY_TYPE_EEPROM))
   1e388:	91 e1       	ldi	r25, 0x11	; 17
   1e38a:	90 93 57 00 	sts	0x0057, r25
   1e38e:	e8 95       	spm
   1e390:	10 e0       	ldi	r17, 0x00	; 0
	char     MemoryType;

	uint8_t  HighByte = 0;
	uint8_t  LowByte  = 0;

	BlockSize  = (FetchNextCommandByte() << 8);
   1e392:	43 2e       	mov	r4, r19
   1e394:	40 c0       	rjmp	.+128    	; 0x1e416 <main+0x2a4>
	BlockSize |=  FetchNextCommandByte();
   1e396:	c0 90 92 01 	lds	r12, 0x0192
   1e39a:	d0 90 93 01 	lds	r13, 0x0193
   1e39e:	e0 90 94 01 	lds	r14, 0x0194

		return;
	}

	/* Check if command is to read a memory block */
	if (Command == AVR109_COMMAND_BlockRead)
   1e3a2:	f0 90 95 01 	lds	r15, 0x0195
	{
		/* Re-enable RWW section */
		boot_rww_enable();
   1e3a6:	e6 e4       	ldi	r30, 0x46	; 70
   1e3a8:	4e 16       	cp	r4, r30
   1e3aa:	e9 f4       	brne	.+58     	; 0x1e3e6 <main+0x274>
   1e3ac:	81 2f       	mov	r24, r17
static void ReadWriteMemoryBlock(const uint8_t Command)
{
	uint16_t BlockSize;
	char     MemoryType;

	uint8_t  HighByte = 0;
   1e3ae:	90 e0       	ldi	r25, 0x00	; 0
   1e3b0:	a0 e0       	ldi	r26, 0x00	; 0
   1e3b2:	b0 e0       	ldi	r27, 0x00	; 0
   1e3b4:	8c 29       	or	r24, r12
   1e3b6:	9d 29       	or	r25, r13
   1e3b8:	ae 29       	or	r26, r14
   1e3ba:	bf 29       	or	r27, r15
   1e3bc:	ab bf       	out	0x3b, r26	; 59
   1e3be:	fc 01       	movw	r30, r24
   1e3c0:	87 91       	elpm	r24, Z+
   1e3c2:	c0 de       	rcall	.-640    	; 0x1e144 <WriteNextResponseByte>
		/* Re-enable RWW section */
		boot_rww_enable();

		while (BlockSize--)
		{
			if (MemoryType == MEMORY_TYPE_FLASH)
   1e3c4:	11 23       	and	r17, r17
   1e3c6:	69 f0       	breq	.+26     	; 0x1e3e2 <main+0x270>
   1e3c8:	d7 01       	movw	r26, r14
			{
				/* Read the next FLASH byte from the current FLASH page */
				#if (FLASHEND > 0xFFFF)
				WriteNextResponseByte(pgm_read_byte_far(CurrAddress | HighByte));
   1e3ca:	c6 01       	movw	r24, r12
   1e3cc:	02 96       	adiw	r24, 0x02	; 2
   1e3ce:	a1 1d       	adc	r26, r1
   1e3d0:	b1 1d       	adc	r27, r1
   1e3d2:	80 93 92 01 	sts	0x0192, r24
   1e3d6:	90 93 93 01 	sts	0x0193, r25
   1e3da:	a0 93 94 01 	sts	0x0194, r26
   1e3de:	b0 93 95 01 	sts	0x0195, r27
   1e3e2:	10 27       	eor	r17, r16
				#else
				WriteNextResponseByte(pgm_read_byte(CurrAddress | HighByte));
				#endif

				/* If both bytes in current word have been read, increment the address counter */
				if (HighByte)
   1e3e4:	15 c0       	rjmp	.+42     	; 0x1e410 <main+0x29e>
   1e3e6:	d7 01       	movw	r26, r14
				  CurrAddress += 2;
   1e3e8:	c6 01       	movw	r24, r12
   1e3ea:	b6 95       	lsr	r27
   1e3ec:	a7 95       	ror	r26
   1e3ee:	97 95       	ror	r25
   1e3f0:	87 95       	ror	r24
   1e3f2:	64 d5       	rcall	.+2760   	; 0x1eebc <__eerd_byte_usb1287>
   1e3f4:	a7 de       	rcall	.-690    	; 0x1e144 <WriteNextResponseByte>
   1e3f6:	d7 01       	movw	r26, r14
   1e3f8:	c6 01       	movw	r24, r12
   1e3fa:	02 96       	adiw	r24, 0x02	; 2
   1e3fc:	a1 1d       	adc	r26, r1
   1e3fe:	b1 1d       	adc	r27, r1
   1e400:	80 93 92 01 	sts	0x0192, r24

				HighByte = !HighByte;
   1e404:	90 93 93 01 	sts	0x0193, r25
			}
			else
			{
				/* Read the next EEPROM byte into the endpoint */
				WriteNextResponseByte(eeprom_read_byte((uint8_t*)(intptr_t)(CurrAddress >> 1)));
   1e408:	a0 93 94 01 	sts	0x0194, r26
   1e40c:	b0 93 95 01 	sts	0x0195, r27
   1e410:	08 94       	sec
   1e412:	a1 08       	sbc	r10, r1
   1e414:	b1 08       	sbc	r11, r1
   1e416:	a1 14       	cp	r10, r1
   1e418:	b1 04       	cpc	r11, r1

				/* Increment the address counter after use */
				CurrAddress += 2;
   1e41a:	09 f0       	breq	.+2      	; 0x1e41e <main+0x2ac>
   1e41c:	bc cf       	rjmp	.-136    	; 0x1e396 <main+0x224>
   1e41e:	2a c1       	rjmp	.+596    	; 0x1e674 <main+0x502>
   1e420:	40 90 92 01 	lds	r4, 0x0192
   1e424:	50 90 93 01 	lds	r5, 0x0193
   1e428:	60 90 94 01 	lds	r6, 0x0194
   1e42c:	70 90 95 01 	lds	r7, 0x0195
   1e430:	36 34       	cpi	r19, 0x46	; 70
   1e432:	09 f0       	breq	.+2      	; 0x1e436 <main+0x2c4>
   1e434:	6a c0       	rjmp	.+212    	; 0x1e50a <main+0x398>
   1e436:	f2 01       	movw	r30, r4
   1e438:	60 92 5b 00 	sts	0x005B, r6
	if (Command == AVR109_COMMAND_BlockRead)
	{
		/* Re-enable RWW section */
		boot_rww_enable();

		while (BlockSize--)
   1e43c:	80 92 57 00 	sts	0x0057, r8
   1e440:	e8 95       	spm
   1e442:	07 b6       	in	r0, 0x37	; 55
			}
		}
	}
	else
	{
		uint32_t PageStartAddress = CurrAddress;
   1e444:	00 fc       	sbrc	r0, 0
   1e446:	fd cf       	rjmp	.-6      	; 0x1e442 <main+0x2d0>
   1e448:	60 c0       	rjmp	.+192    	; 0x1e50a <main+0x398>
   1e44a:	29 85       	ldd	r18, Y+9	; 0x09
   1e44c:	26 34       	cpi	r18, 0x46	; 70
   1e44e:	b1 f5       	brne	.+108    	; 0x1e4bc <main+0x34a>
   1e450:	3f 81       	ldd	r19, Y+7	; 0x07
   1e452:	33 23       	and	r19, r19

		if (MemoryType == MEMORY_TYPE_FLASH)
   1e454:	69 f1       	breq	.+90     	; 0x1e4b0 <main+0x33e>
   1e456:	c0 90 92 01 	lds	r12, 0x0192
		{
			boot_page_erase(PageStartAddress);
   1e45a:	d0 90 93 01 	lds	r13, 0x0193
   1e45e:	e0 90 94 01 	lds	r14, 0x0194
   1e462:	f0 90 95 01 	lds	r15, 0x0195
			boot_spm_busy_wait();
   1e466:	54 de       	rcall	.-856    	; 0x1e110 <FetchNextCommandByte>
   1e468:	8e 83       	std	Y+6, r24	; 0x06
   1e46a:	1d 82       	std	Y+5, r1	; 0x05
   1e46c:	81 2f       	mov	r24, r17
		}

		while (BlockSize--)
		{
			if (MemoryType == MEMORY_TYPE_FLASH)
   1e46e:	90 e0       	ldi	r25, 0x00	; 0
   1e470:	2d 81       	ldd	r18, Y+5	; 0x05
   1e472:	3e 81       	ldd	r19, Y+6	; 0x06
			{
				/* If both bytes in current word have been written, increment the address counter */
				if (HighByte)
   1e474:	82 2b       	or	r24, r18
   1e476:	93 2b       	or	r25, r19
   1e478:	0c 01       	movw	r0, r24
				{
					/* Write the next FLASH word to the current FLASH page */
					boot_page_fill(CurrAddress, ((FetchNextCommandByte() << 8) | LowByte));
   1e47a:	f6 01       	movw	r30, r12
   1e47c:	e0 92 5b 00 	sts	0x005B, r14
   1e480:	00 93 57 00 	sts	0x0057, r16
   1e484:	e8 95       	spm
   1e486:	11 24       	eor	r1, r1
   1e488:	80 91 92 01 	lds	r24, 0x0192
   1e48c:	90 91 93 01 	lds	r25, 0x0193
   1e490:	a0 91 94 01 	lds	r26, 0x0194
   1e494:	b0 91 95 01 	lds	r27, 0x0195
   1e498:	02 96       	adiw	r24, 0x02	; 2
   1e49a:	a1 1d       	adc	r26, r1
   1e49c:	b1 1d       	adc	r27, r1
   1e49e:	80 93 92 01 	sts	0x0192, r24
   1e4a2:	90 93 93 01 	sts	0x0193, r25
   1e4a6:	a0 93 94 01 	sts	0x0194, r26
   1e4aa:	b0 93 95 01 	sts	0x0195, r27

					/* Increment the address counter after use */
					CurrAddress += 2;
   1e4ae:	02 c0       	rjmp	.+4      	; 0x1e4b4 <main+0x342>
   1e4b0:	2f de       	rcall	.-930    	; 0x1e110 <FetchNextCommandByte>
   1e4b2:	18 2f       	mov	r17, r24
   1e4b4:	3f 81       	ldd	r19, Y+7	; 0x07
   1e4b6:	30 27       	eor	r19, r16
   1e4b8:	3f 83       	std	Y+7, r19	; 0x07
   1e4ba:	23 c0       	rjmp	.+70     	; 0x1e502 <main+0x390>
   1e4bc:	c0 90 92 01 	lds	r12, 0x0192
   1e4c0:	d0 90 93 01 	lds	r13, 0x0193
   1e4c4:	e0 90 94 01 	lds	r14, 0x0194
   1e4c8:	f0 90 95 01 	lds	r15, 0x0195
   1e4cc:	f6 94       	lsr	r15
   1e4ce:	e7 94       	ror	r14
   1e4d0:	d7 94       	ror	r13
   1e4d2:	c7 94       	ror	r12
   1e4d4:	1d de       	rcall	.-966    	; 0x1e110 <FetchNextCommandByte>
				}
				else
				{
					LowByte = FetchNextCommandByte();
   1e4d6:	68 2f       	mov	r22, r24
   1e4d8:	c6 01       	movw	r24, r12
   1e4da:	f8 d4       	rcall	.+2544   	; 0x1eecc <__eewr_byte_usb1287>
				}

				HighByte = !HighByte;
   1e4dc:	80 91 92 01 	lds	r24, 0x0192
   1e4e0:	90 91 93 01 	lds	r25, 0x0193
			}
			else
			{
				/* Write the next EEPROM byte from the endpoint */
				eeprom_write_byte((uint8_t*)((intptr_t)(CurrAddress >> 1)), FetchNextCommandByte());
   1e4e4:	a0 91 94 01 	lds	r26, 0x0194
   1e4e8:	b0 91 95 01 	lds	r27, 0x0195
   1e4ec:	02 96       	adiw	r24, 0x02	; 2
   1e4ee:	a1 1d       	adc	r26, r1
   1e4f0:	b1 1d       	adc	r27, r1
   1e4f2:	80 93 92 01 	sts	0x0192, r24
   1e4f6:	90 93 93 01 	sts	0x0193, r25
   1e4fa:	a0 93 94 01 	sts	0x0194, r26
   1e4fe:	b0 93 95 01 	sts	0x0195, r27
   1e502:	08 94       	sec
   1e504:	a1 08       	sbc	r10, r1
   1e506:	b1 08       	sbc	r11, r1

				/* Increment the address counter after use */
				CurrAddress += 2;
   1e508:	04 c0       	rjmp	.+8      	; 0x1e512 <main+0x3a0>
   1e50a:	10 e0       	ldi	r17, 0x00	; 0
   1e50c:	80 e0       	ldi	r24, 0x00	; 0
   1e50e:	39 87       	std	Y+9, r19	; 0x09
   1e510:	8f 83       	std	Y+7, r24	; 0x07
   1e512:	a1 14       	cp	r10, r1
   1e514:	b1 04       	cpc	r11, r1
   1e516:	09 f0       	breq	.+2      	; 0x1e51a <main+0x3a8>
   1e518:	98 cf       	rjmp	.-208    	; 0x1e44a <main+0x2d8>
   1e51a:	39 85       	ldd	r19, Y+9	; 0x09
   1e51c:	36 34       	cpi	r19, 0x46	; 70
   1e51e:	09 f0       	breq	.+2      	; 0x1e522 <main+0x3b0>
   1e520:	78 ce       	rjmp	.-784    	; 0x1e212 <main+0xa0>
   1e522:	f2 01       	movw	r30, r4
   1e524:	60 92 5b 00 	sts	0x005B, r6
   1e528:	30 92 57 00 	sts	0x0057, r3
   1e52c:	e8 95       	spm
   1e52e:	07 b6       	in	r0, 0x37	; 55
   1e530:	00 fc       	sbrc	r0, 0
   1e532:	fd cf       	rjmp	.-6      	; 0x1e52e <main+0x3bc>
   1e534:	6e ce       	rjmp	.-804    	; 0x1e212 <main+0xa0>
	}
	else
	{
		uint32_t PageStartAddress = CurrAddress;

		if (MemoryType == MEMORY_TYPE_FLASH)
   1e536:	23 34       	cpi	r18, 0x43	; 67
   1e538:	99 f4       	brne	.+38     	; 0x1e560 <main+0x3ee>
   1e53a:	c0 90 92 01 	lds	r12, 0x0192
		{
			boot_page_erase(PageStartAddress);
			boot_spm_busy_wait();
		}

		while (BlockSize--)
   1e53e:	d0 90 93 01 	lds	r13, 0x0193
   1e542:	e0 90 94 01 	lds	r14, 0x0194
   1e546:	f0 90 95 01 	lds	r15, 0x0195
				CurrAddress += 2;
			}
		}

		/* If in FLASH programming mode, commit the page after writing */
		if (MemoryType == MEMORY_TYPE_FLASH)
   1e54a:	e2 dd       	rcall	.-1084   	; 0x1e110 <FetchNextCommandByte>
   1e54c:	90 e0       	ldi	r25, 0x00	; 0
		{
			/* Commit the flash page to memory */
			boot_page_write(PageStartAddress);
   1e54e:	0c 01       	movw	r0, r24
   1e550:	f6 01       	movw	r30, r12
   1e552:	e0 92 5b 00 	sts	0x005B, r14
   1e556:	00 93 57 00 	sts	0x0057, r16

			/* Wait until write operation has completed */
			boot_spm_busy_wait();
   1e55a:	e8 95       	spm
   1e55c:	11 24       	eor	r1, r1
   1e55e:	59 ce       	rjmp	.-846    	; 0x1e212 <main+0xa0>
   1e560:	23 36       	cpi	r18, 0x63	; 99
		/* Delegate the block write/read to a separate function for clarity */
		ReadWriteMemoryBlock(Command);
	}
	#endif
	#if !defined(NO_FLASH_BYTE_SUPPORT)
	else if (Command == AVR109_COMMAND_FillFlashPageWordHigh)
   1e562:	c1 f4       	brne	.+48     	; 0x1e594 <main+0x422>
   1e564:	c0 90 92 01 	lds	r12, 0x0192
	{
		/* Write the high byte to the current flash page */
		boot_page_fill(CurrAddress, FetchNextCommandByte());
   1e568:	d0 90 93 01 	lds	r13, 0x0193
   1e56c:	e0 90 94 01 	lds	r14, 0x0194
   1e570:	f0 90 95 01 	lds	r15, 0x0195
   1e574:	cd dd       	rcall	.-1126   	; 0x1e110 <FetchNextCommandByte>
   1e576:	b7 01       	movw	r22, r14
   1e578:	a6 01       	movw	r20, r12
   1e57a:	41 60       	ori	r20, 0x01	; 1
   1e57c:	90 e0       	ldi	r25, 0x00	; 0
   1e57e:	0c 01       	movw	r0, r24
   1e580:	fa 01       	movw	r30, r20
   1e582:	60 93 5b 00 	sts	0x005B, r22
   1e586:	00 93 57 00 	sts	0x0057, r16
   1e58a:	e8 95       	spm
   1e58c:	11 24       	eor	r1, r1

		/* Send confirmation byte back to the host */
		WriteNextResponseByte('\r');
	}
	else if (Command == AVR109_COMMAND_FillFlashPageWordLow)
   1e58e:	d7 01       	movw	r26, r14
   1e590:	c6 01       	movw	r24, r12
	{
		/* Write the low byte to the current flash page */
		boot_page_fill(CurrAddress | 0x01, FetchNextCommandByte());
   1e592:	40 c0       	rjmp	.+128    	; 0x1e614 <main+0x4a2>
   1e594:	2d 36       	cpi	r18, 0x6D	; 109
   1e596:	91 f4       	brne	.+36     	; 0x1e5bc <main+0x44a>
   1e598:	80 91 92 01 	lds	r24, 0x0192
   1e59c:	90 91 93 01 	lds	r25, 0x0193
   1e5a0:	a0 91 94 01 	lds	r26, 0x0194
   1e5a4:	b0 91 95 01 	lds	r27, 0x0195
   1e5a8:	fc 01       	movw	r30, r24
   1e5aa:	a0 93 5b 00 	sts	0x005B, r26
   1e5ae:	30 92 57 00 	sts	0x0057, r3
   1e5b2:	e8 95       	spm
   1e5b4:	07 b6       	in	r0, 0x37	; 55
   1e5b6:	00 fc       	sbrc	r0, 0
   1e5b8:	fd cf       	rjmp	.-6      	; 0x1e5b4 <main+0x442>
   1e5ba:	2b ce       	rjmp	.-938    	; 0x1e212 <main+0xa0>
   1e5bc:	22 35       	cpi	r18, 0x52	; 82

		/* Increment the address */
		CurrAddress += 2;
   1e5be:	81 f4       	brne	.+32     	; 0x1e5e0 <main+0x46e>
   1e5c0:	80 91 92 01 	lds	r24, 0x0192

		/* Send confirmation byte back to the host */
		WriteNextResponseByte('\r');
	}
	else if (Command == AVR109_COMMAND_WriteFlashPage)
   1e5c4:	90 91 93 01 	lds	r25, 0x0193
	{
		/* Commit the flash page to memory */
		boot_page_write(CurrAddress);
   1e5c8:	a0 91 94 01 	lds	r26, 0x0194
   1e5cc:	b0 91 95 01 	lds	r27, 0x0195
   1e5d0:	ab bf       	out	0x3b, r26	; 59
   1e5d2:	fc 01       	movw	r30, r24
   1e5d4:	c7 90       	elpm	r12, Z+
   1e5d6:	d6 90       	elpm	r13, Z
   1e5d8:	8d 2d       	mov	r24, r13
   1e5da:	b4 dd       	rcall	.-1176   	; 0x1e144 <WriteNextResponseByte>
   1e5dc:	8c 2d       	mov	r24, r12
   1e5de:	49 c0       	rjmp	.+146    	; 0x1e672 <main+0x500>
   1e5e0:	24 34       	cpi	r18, 0x44	; 68
   1e5e2:	21 f5       	brne	.+72     	; 0x1e62c <main+0x4ba>

		/* Wait until write operation has completed */
		boot_spm_busy_wait();
   1e5e4:	c0 90 92 01 	lds	r12, 0x0192
   1e5e8:	d0 90 93 01 	lds	r13, 0x0193

		/* Send confirmation byte back to the host */
		WriteNextResponseByte('\r');
	}
	else if (Command == AVR109_COMMAND_ReadFLASHWord)
   1e5ec:	e0 90 94 01 	lds	r14, 0x0194
	{
		#if (FLASHEND > 0xFFFF)
		uint16_t ProgramWord = pgm_read_word_far(CurrAddress);
   1e5f0:	f0 90 95 01 	lds	r15, 0x0195
   1e5f4:	f6 94       	lsr	r15
   1e5f6:	e7 94       	ror	r14
   1e5f8:	d7 94       	ror	r13
   1e5fa:	c7 94       	ror	r12
   1e5fc:	89 dd       	rcall	.-1262   	; 0x1e110 <FetchNextCommandByte>
   1e5fe:	68 2f       	mov	r22, r24
   1e600:	c6 01       	movw	r24, r12
   1e602:	64 d4       	rcall	.+2248   	; 0x1eecc <__eewr_byte_usb1287>
   1e604:	80 91 92 01 	lds	r24, 0x0192
		#else
		uint16_t ProgramWord = pgm_read_word(CurrAddress);
		#endif

		WriteNextResponseByte(ProgramWord >> 8);
   1e608:	90 91 93 01 	lds	r25, 0x0193
   1e60c:	a0 91 94 01 	lds	r26, 0x0194
		WriteNextResponseByte(ProgramWord & 0xFF);
   1e610:	b0 91 95 01 	lds	r27, 0x0195
	}
	#endif
	#if !defined(NO_EEPROM_BYTE_SUPPORT)
	else if (Command == AVR109_COMMAND_WriteEEPROM)
   1e614:	02 96       	adiw	r24, 0x02	; 2
	{
		/* Read the byte from the endpoint and write it to the EEPROM */
		eeprom_write_byte((uint8_t*)((intptr_t)(CurrAddress >> 1)), FetchNextCommandByte());
   1e616:	a1 1d       	adc	r26, r1
   1e618:	b1 1d       	adc	r27, r1
   1e61a:	80 93 92 01 	sts	0x0192, r24
   1e61e:	90 93 93 01 	sts	0x0193, r25
   1e622:	a0 93 94 01 	sts	0x0194, r26
   1e626:	b0 93 95 01 	sts	0x0195, r27
   1e62a:	f3 cd       	rjmp	.-1050   	; 0x1e212 <main+0xa0>
   1e62c:	24 36       	cpi	r18, 0x64	; 100
   1e62e:	f1 f4       	brne	.+60     	; 0x1e66c <main+0x4fa>
   1e630:	c0 90 92 01 	lds	r12, 0x0192
   1e634:	d0 90 93 01 	lds	r13, 0x0193
   1e638:	e0 90 94 01 	lds	r14, 0x0194

		/* Increment the address after use */
		CurrAddress += 2;
   1e63c:	f0 90 95 01 	lds	r15, 0x0195
   1e640:	d7 01       	movw	r26, r14
   1e642:	c6 01       	movw	r24, r12
   1e644:	b6 95       	lsr	r27
   1e646:	a7 95       	ror	r26
   1e648:	97 95       	ror	r25
   1e64a:	87 95       	ror	r24
   1e64c:	37 d4       	rcall	.+2158   	; 0x1eebc <__eerd_byte_usb1287>
   1e64e:	7a dd       	rcall	.-1292   	; 0x1e144 <WriteNextResponseByte>
   1e650:	d7 01       	movw	r26, r14
   1e652:	c6 01       	movw	r24, r12
   1e654:	02 96       	adiw	r24, 0x02	; 2
   1e656:	a1 1d       	adc	r26, r1
   1e658:	b1 1d       	adc	r27, r1
   1e65a:	80 93 92 01 	sts	0x0192, r24
   1e65e:	90 93 93 01 	sts	0x0193, r25

		/* Send confirmation byte back to the host */
		WriteNextResponseByte('\r');
	}
	else if (Command == AVR109_COMMAND_ReadEEPROM)
   1e662:	a0 93 94 01 	sts	0x0194, r26
	{
		/* Read the EEPROM byte and write it to the endpoint */
		WriteNextResponseByte(eeprom_read_byte((uint8_t*)((intptr_t)(CurrAddress >> 1))));
   1e666:	b0 93 95 01 	sts	0x0195, r27
   1e66a:	04 c0       	rjmp	.+8      	; 0x1e674 <main+0x502>
   1e66c:	2b 31       	cpi	r18, 0x1B	; 27
   1e66e:	11 f0       	breq	.+4      	; 0x1e674 <main+0x502>
   1e670:	8f e3       	ldi	r24, 0x3F	; 63
   1e672:	68 dd       	rcall	.-1328   	; 0x1e144 <WriteNextResponseByte>
   1e674:	80 92 e9 00 	sts	0x00E9, r8
   1e678:	90 91 e8 00 	lds	r25, 0x00E8
   1e67c:	80 91 e8 00 	lds	r24, 0x00E8
   1e680:	8e 77       	andi	r24, 0x7E	; 126
   1e682:	80 93 e8 00 	sts	0x00E8, r24
   1e686:	95 ff       	sbrs	r25, 5
   1e688:	04 c0       	rjmp	.+8      	; 0x1e692 <main+0x520>

		/* Increment the address after use */
		CurrAddress += 2;
   1e68a:	10 c0       	rjmp	.+32     	; 0x1e6ac <main+0x53a>
   1e68c:	8e b3       	in	r24, 0x1e	; 30
   1e68e:	88 23       	and	r24, r24
   1e690:	c1 f0       	breq	.+48     	; 0x1e6c2 <main+0x550>
   1e692:	80 91 e8 00 	lds	r24, 0x00E8
   1e696:	80 ff       	sbrs	r24, 0
   1e698:	f9 cf       	rjmp	.-14     	; 0x1e68c <main+0x51a>
   1e69a:	80 91 e8 00 	lds	r24, 0x00E8
   1e69e:	8e 77       	andi	r24, 0x7E	; 126
   1e6a0:	80 93 e8 00 	sts	0x00E8, r24
   1e6a4:	03 c0       	rjmp	.+6      	; 0x1e6ac <main+0x53a>
	}
	#endif
	else if (Command != AVR109_COMMAND_Sync)
   1e6a6:	8e b3       	in	r24, 0x1e	; 30
   1e6a8:	88 23       	and	r24, r24
	{
		/* Unknown (non-sync) command, return fail code */
		WriteNextResponseByte('?');
   1e6aa:	59 f0       	breq	.+22     	; 0x1e6c2 <main+0x550>
   1e6ac:	80 91 e8 00 	lds	r24, 0x00E8
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
   1e6b0:	80 ff       	sbrs	r24, 0
   1e6b2:	f9 cf       	rjmp	.-14     	; 0x1e6a6 <main+0x534>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
   1e6b4:	20 92 e9 00 	sts	0x00E9, r2
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
   1e6b8:	80 91 e8 00 	lds	r24, 0x00E8
   1e6bc:	8b 77       	andi	r24, 0x7B	; 123
   1e6be:	80 93 e8 00 	sts	0x00E8, r24

	/* Send the endpoint data to the host */
	Endpoint_ClearIN();

	/* If a full endpoint's worth of data was sent, we need to send an empty packet afterwards to signal end of transfer */
	if (IsEndpointFull)
   1e6c2:	e1 d3       	rcall	.+1986   	; 0x1ee86 <USB_USBTask>
   1e6c4:	80 91 08 01 	lds	r24, 0x0108
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
   1e6c8:	88 23       	and	r24, r24
   1e6ca:	09 f0       	breq	.+2      	; 0x1e6ce <main+0x55c>
   1e6cc:	8f cd       	rjmp	.-1250   	; 0x1e1ec <main+0x7a>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
   1e6ce:	80 91 e0 00 	lds	r24, 0x00E0
	Endpoint_ClearIN();

	/* If a full endpoint's worth of data was sent, we need to send an empty packet afterwards to signal end of transfer */
	if (IsEndpointFull)
	{
		while (!(Endpoint_IsINReady()))
   1e6d2:	81 60       	ori	r24, 0x01	; 1
   1e6d4:	80 93 e0 00 	sts	0x00E0, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
   1e6d8:	82 e4       	ldi	r24, 0x42	; 66
   1e6da:	9c ed       	ldi	r25, 0xDC	; 220
   1e6dc:	90 93 a1 01 	sts	0x01A1, r25
   1e6e0:	80 93 a0 01 	sts	0x01A0, r24
	}

	/* Wait until the data has been sent to the host */
	while (!(Endpoint_IsINReady()))
	{
		if (USB_DeviceState == DEVICE_STATE_Unattached)
   1e6e4:	2c e0       	ldi	r18, 0x0C	; 12
   1e6e6:	88 e1       	ldi	r24, 0x18	; 24
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
   1e6e8:	90 e0       	ldi	r25, 0x00	; 0
   1e6ea:	0f b6       	in	r0, 0x3f	; 63

		Endpoint_ClearIN();
	}

	/* Wait until the data has been sent to the host */
	while (!(Endpoint_IsINReady()))
   1e6ec:	f8 94       	cli
   1e6ee:	a8 95       	wdr
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
   1e6f0:	80 93 60 00 	sts	0x0060, r24
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
   1e6f4:	0f be       	out	0x3f, r0	; 63
   1e6f6:	20 93 60 00 	sts	0x0060, r18
   1e6fa:	ff cf       	rjmp	.-2      	; 0x1e6fa <main+0x588>

0001e6fc <__vector_20>:
   1e6fc:	1f 92       	push	r1
	GlobalInterruptEnable();

	while (RunBootloader)
	{
		CDC_Task();
		USB_USBTask();
   1e6fe:	0f 92       	push	r0
   1e700:	0f b6       	in	r0, 0x3f	; 63
	LEDs_SetAllLEDs(LEDS_LED1);

	/* Enable global interrupts so that the USB stack can function */
	GlobalInterruptEnable();

	while (RunBootloader)
   1e702:	0f 92       	push	r0
   1e704:	11 24       	eor	r1, r1
   1e706:	8f 93       	push	r24
   1e708:	80 e3       	ldi	r24, 0x30	; 48
   1e70a:	89 b9       	out	0x09, r24	; 9
			 *  enumerating the device once attached until \ref USB_Attach() is called.
			 */
			static inline void USB_Detach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Detach(void)
			{
				UDCON  |=  (1 << DETACH);
   1e70c:	8f 91       	pop	r24
   1e70e:	0f 90       	pop	r0
   1e710:	0f be       	out	0x3f, r0	; 63
   1e712:	0f 90       	pop	r0
   1e714:	1f 90       	pop	r1

	/* Disconnect from the host - USB interface will be reset later along with the AVR */
	USB_Detach();

	/* Unlock the forced application start mode of the bootloader if it is restarted */
	MagicBootKey = MAGIC_BOOT_KEY;
   1e716:	18 95       	reti

0001e718 <EVENT_USB_Device_ConfigurationChanged>:
   1e718:	82 e0       	ldi	r24, 0x02	; 2
   1e71a:	61 ec       	ldi	r22, 0xC1	; 193
   1e71c:	42 e0       	ldi	r20, 0x02	; 2
   1e71e:	66 d1       	rcall	.+716    	; 0x1e9ec <Endpoint_ConfigureEndpoint_Prv>
   1e720:	83 e0       	ldi	r24, 0x03	; 3

	/* Enable the watchdog and force a timeout to reset the AVR */
	wdt_enable(WDTO_250MS);
   1e722:	61 e8       	ldi	r22, 0x81	; 129
   1e724:	42 e1       	ldi	r20, 0x12	; 18
   1e726:	62 d1       	rcall	.+708    	; 0x1e9ec <Endpoint_ConfigureEndpoint_Prv>
   1e728:	84 e0       	ldi	r24, 0x04	; 4
   1e72a:	60 e8       	ldi	r22, 0x80	; 128
   1e72c:	42 e1       	ldi	r20, 0x12	; 18
   1e72e:	5e c1       	rjmp	.+700    	; 0x1e9ec <Endpoint_ConfigureEndpoint_Prv>

0001e730 <EVENT_USB_Device_ControlRequest>:
   1e730:	80 91 98 01 	lds	r24, 0x0198
   1e734:	98 2f       	mov	r25, r24
   1e736:	9f 77       	andi	r25, 0x7F	; 127
   1e738:	91 32       	cpi	r25, 0x21	; 33
 *  internally.
 */
void EVENT_USB_Device_ControlRequest(void)
{
	/* Ignore any requests that aren't directed to the CDC interface */
	if ((USB_ControlRequest.bmRequestType & (CONTROL_REQTYPE_TYPE | CONTROL_REQTYPE_RECIPIENT)) !=
   1e73a:	59 f5       	brne	.+86     	; 0x1e792 <EVENT_USB_Device_ControlRequest+0x62>
				PORTD = ((PORTD & ~LEDMask) | ActiveMask);
			}

			static inline void LEDs_ToggleLEDs(const uint8_t LEDMask)
			{
				PIND  = LEDMask;
   1e73c:	90 e3       	ldi	r25, 0x30	; 48
   1e73e:	99 b9       	out	0x09, r25	; 9

	/* Activity - toggle indicator LEDs */
	LEDs_ToggleLEDs(LEDS_LED1 | LEDS_LED2);

	/* Process CDC specific control requests */
	switch (USB_ControlRequest.bRequest)
   1e740:	90 91 99 01 	lds	r25, 0x0199
   1e744:	90 32       	cpi	r25, 0x20	; 32
   1e746:	a1 f0       	breq	.+40     	; 0x1e770 <EVENT_USB_Device_ControlRequest+0x40>
   1e748:	91 32       	cpi	r25, 0x21	; 33
   1e74a:	19 f5       	brne	.+70     	; 0x1e792 <EVENT_USB_Device_ControlRequest+0x62>
	{
		case CDC_REQ_GetLineEncoding:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
   1e74c:	81 3a       	cpi	r24, 0xA1	; 161
   1e74e:	09 f5       	brne	.+66     	; 0x1e792 <EVENT_USB_Device_ControlRequest+0x62>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
   1e750:	80 91 e8 00 	lds	r24, 0x00E8
   1e754:	87 7f       	andi	r24, 0xF7	; 247
   1e756:	80 93 e8 00 	sts	0x00E8, r24
			{
				Endpoint_ClearSETUP();

				/* Write the line coding data to the control endpoint */
				Endpoint_Write_Control_Stream_LE(&LineEncoding, sizeof(CDC_LineEncoding_t));
   1e75a:	89 e0       	ldi	r24, 0x09	; 9
   1e75c:	91 e0       	ldi	r25, 0x01	; 1
   1e75e:	67 e0       	ldi	r22, 0x07	; 7
   1e760:	70 e0       	ldi	r23, 0x00	; 0
   1e762:	a4 d0       	rcall	.+328    	; 0x1e8ac <Endpoint_Write_Control_Stream_LE>
   1e764:	80 91 e8 00 	lds	r24, 0x00E8
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
   1e768:	8b 77       	andi	r24, 0x7B	; 123
   1e76a:	80 93 e8 00 	sts	0x00E8, r24
   1e76e:	08 95       	ret
   1e770:	81 32       	cpi	r24, 0x21	; 33
				Endpoint_ClearOUT();
			}

			break;
		case CDC_REQ_SetLineEncoding:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
   1e772:	79 f4       	brne	.+30     	; 0x1e792 <EVENT_USB_Device_ControlRequest+0x62>
   1e774:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
   1e778:	87 7f       	andi	r24, 0xF7	; 247
   1e77a:	80 93 e8 00 	sts	0x00E8, r24
   1e77e:	89 e0       	ldi	r24, 0x09	; 9
			{
				Endpoint_ClearSETUP();

				/* Read the line coding data in from the host into the global struct */
				Endpoint_Read_Control_Stream_LE(&LineEncoding, sizeof(CDC_LineEncoding_t));
   1e780:	91 e0       	ldi	r25, 0x01	; 1
   1e782:	67 e0       	ldi	r22, 0x07	; 7
   1e784:	70 e0       	ldi	r23, 0x00	; 0
   1e786:	eb d0       	rcall	.+470    	; 0x1e95e <Endpoint_Read_Control_Stream_LE>
   1e788:	80 91 e8 00 	lds	r24, 0x00E8
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
   1e78c:	8e 77       	andi	r24, 0x7E	; 126
   1e78e:	80 93 e8 00 	sts	0x00E8, r24
   1e792:	08 95       	ret

0001e794 <CALLBACK_USB_GetDescriptor>:
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
   1e794:	92 30       	cpi	r25, 0x02	; 2
   1e796:	29 f0       	breq	.+10     	; 0x1e7a2 <CALLBACK_USB_GetDescriptor+0xe>
   1e798:	93 30       	cpi	r25, 0x03	; 3
   1e79a:	41 f0       	breq	.+16     	; 0x1e7ac <CALLBACK_USB_GetDescriptor+0x18>
   1e79c:	91 30       	cpi	r25, 0x01	; 1
   1e79e:	61 f4       	brne	.+24     	; 0x1e7b8 <CALLBACK_USB_GetDescriptor+0x24>
   1e7a0:	10 c0       	rjmp	.+32     	; 0x1e7c2 <CALLBACK_USB_GetDescriptor+0x2e>
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
			Size    = sizeof(USB_Descriptor_Configuration_t);
   1e7a2:	8e e3       	ldi	r24, 0x3E	; 62
   1e7a4:	90 e0       	ldi	r25, 0x00	; 0
		case DTYPE_Device:
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
   1e7a6:	22 e4       	ldi	r18, 0x42	; 66
   1e7a8:	31 e0       	ldi	r19, 0x01	; 1
			Size    = sizeof(USB_Descriptor_Configuration_t);
			break;
   1e7aa:	1e c0       	rjmp	.+60     	; 0x1e7e8 <CALLBACK_USB_GetDescriptor+0x54>
		case DTYPE_String:
			if (!(DescriptorNumber))
   1e7ac:	88 23       	and	r24, r24
   1e7ae:	71 f0       	breq	.+28     	; 0x1e7cc <CALLBACK_USB_GetDescriptor+0x38>
			{
				Address = &LanguageString;
				Size    = LanguageString.Header.Size;
			}
			else if (DescriptorNumber == 0x01)
   1e7b0:	81 30       	cpi	r24, 0x01	; 1
   1e7b2:	89 f0       	breq	.+34     	; 0x1e7d6 <CALLBACK_USB_GetDescriptor+0x42>
			{
				Address = &ManufacturerString;
				Size    = ManufacturerString.Header.Size;
			}
			else if (DescriptorNumber == 0x02)
   1e7b4:	82 30       	cpi	r24, 0x02	; 2
   1e7b6:	a1 f0       	breq	.+40     	; 0x1e7e0 <CALLBACK_USB_GetDescriptor+0x4c>
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;
   1e7b8:	80 e0       	ldi	r24, 0x00	; 0
   1e7ba:	90 e0       	ldi	r25, 0x00	; 0
                                    const void** const DescriptorAddress)
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
   1e7bc:	20 e0       	ldi	r18, 0x00	; 0
   1e7be:	30 e0       	ldi	r19, 0x00	; 0
   1e7c0:	13 c0       	rjmp	.+38     	; 0x1e7e8 <CALLBACK_USB_GetDescriptor+0x54>

	switch (DescriptorType)
	{
		case DTYPE_Device:
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
   1e7c2:	82 e1       	ldi	r24, 0x12	; 18
   1e7c4:	90 e0       	ldi	r25, 0x00	; 0
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
	{
		case DTYPE_Device:
			Address = &DeviceDescriptor;
   1e7c6:	20 e8       	ldi	r18, 0x80	; 128
   1e7c8:	31 e0       	ldi	r19, 0x01	; 1
   1e7ca:	0e c0       	rjmp	.+28     	; 0x1e7e8 <CALLBACK_USB_GetDescriptor+0x54>
			break;
		case DTYPE_String:
			if (!(DescriptorNumber))
			{
				Address = &LanguageString;
				Size    = LanguageString.Header.Size;
   1e7cc:	84 e0       	ldi	r24, 0x04	; 4
   1e7ce:	90 e0       	ldi	r25, 0x00	; 0
			Size    = sizeof(USB_Descriptor_Configuration_t);
			break;
		case DTYPE_String:
			if (!(DescriptorNumber))
			{
				Address = &LanguageString;
   1e7d0:	2e e3       	ldi	r18, 0x3E	; 62
   1e7d2:	31 e0       	ldi	r19, 0x01	; 1
   1e7d4:	09 c0       	rjmp	.+18     	; 0x1e7e8 <CALLBACK_USB_GetDescriptor+0x54>
				Size    = LanguageString.Header.Size;
			}
			else if (DescriptorNumber == 0x01)
			{
				Address = &ManufacturerString;
				Size    = ManufacturerString.Header.Size;
   1e7d6:	88 e1       	ldi	r24, 0x18	; 24
   1e7d8:	90 e0       	ldi	r25, 0x00	; 0
				Address = &LanguageString;
				Size    = LanguageString.Header.Size;
			}
			else if (DescriptorNumber == 0x01)
			{
				Address = &ManufacturerString;
   1e7da:	24 e2       	ldi	r18, 0x24	; 36
   1e7dc:	31 e0       	ldi	r19, 0x01	; 1
   1e7de:	04 c0       	rjmp	.+8      	; 0x1e7e8 <CALLBACK_USB_GetDescriptor+0x54>
				Size    = ManufacturerString.Header.Size;
			}
			else if (DescriptorNumber == 0x02)
			{
				Address = &ProductString;
				Size    = ProductString.Header.Size;
   1e7e0:	82 e1       	ldi	r24, 0x12	; 18
   1e7e2:	90 e0       	ldi	r25, 0x00	; 0
				Address = &ManufacturerString;
				Size    = ManufacturerString.Header.Size;
			}
			else if (DescriptorNumber == 0x02)
			{
				Address = &ProductString;
   1e7e4:	20 e1       	ldi	r18, 0x10	; 16
   1e7e6:	31 e0       	ldi	r19, 0x01	; 1
			}

			break;
	}

	*DescriptorAddress = Address;
   1e7e8:	fa 01       	movw	r30, r20
   1e7ea:	31 83       	std	Z+1, r19	; 0x01
   1e7ec:	20 83       	st	Z, r18
	return Size;
}
   1e7ee:	08 95       	ret

0001e7f0 <BootloaderAPI_ErasePage>:
 */

#include "BootloaderAPI.h"

void BootloaderAPI_ErasePage(const uint32_t Address)
{
   1e7f0:	dc 01       	movw	r26, r24
   1e7f2:	cb 01       	movw	r24, r22
	boot_page_erase_safe(Address);
   1e7f4:	07 b6       	in	r0, 0x37	; 55
   1e7f6:	00 fc       	sbrc	r0, 0
   1e7f8:	fd cf       	rjmp	.-6      	; 0x1e7f4 <BootloaderAPI_ErasePage+0x4>
   1e7fa:	f9 99       	sbic	0x1f, 1	; 31
   1e7fc:	fe cf       	rjmp	.-4      	; 0x1e7fa <BootloaderAPI_ErasePage+0xa>
   1e7fe:	23 e0       	ldi	r18, 0x03	; 3
   1e800:	fc 01       	movw	r30, r24
   1e802:	a0 93 5b 00 	sts	0x005B, r26
   1e806:	20 93 57 00 	sts	0x0057, r18
   1e80a:	e8 95       	spm
	boot_spm_busy_wait();
   1e80c:	07 b6       	in	r0, 0x37	; 55
   1e80e:	00 fc       	sbrc	r0, 0
   1e810:	fd cf       	rjmp	.-6      	; 0x1e80c <BootloaderAPI_ErasePage+0x1c>
	boot_rww_enable();
   1e812:	81 e1       	ldi	r24, 0x11	; 17
   1e814:	80 93 57 00 	sts	0x0057, r24
   1e818:	e8 95       	spm
}
   1e81a:	08 95       	ret

0001e81c <BootloaderAPI_WritePage>:

void BootloaderAPI_WritePage(const uint32_t Address)
{
   1e81c:	dc 01       	movw	r26, r24
   1e81e:	cb 01       	movw	r24, r22
	boot_page_write_safe(Address);
   1e820:	07 b6       	in	r0, 0x37	; 55
   1e822:	00 fc       	sbrc	r0, 0
   1e824:	fd cf       	rjmp	.-6      	; 0x1e820 <BootloaderAPI_WritePage+0x4>
   1e826:	f9 99       	sbic	0x1f, 1	; 31
   1e828:	fe cf       	rjmp	.-4      	; 0x1e826 <BootloaderAPI_WritePage+0xa>
   1e82a:	25 e0       	ldi	r18, 0x05	; 5
   1e82c:	fc 01       	movw	r30, r24
   1e82e:	a0 93 5b 00 	sts	0x005B, r26
   1e832:	20 93 57 00 	sts	0x0057, r18
   1e836:	e8 95       	spm
	boot_spm_busy_wait();
   1e838:	07 b6       	in	r0, 0x37	; 55
   1e83a:	00 fc       	sbrc	r0, 0
   1e83c:	fd cf       	rjmp	.-6      	; 0x1e838 <BootloaderAPI_WritePage+0x1c>
	boot_rww_enable();
   1e83e:	81 e1       	ldi	r24, 0x11	; 17
   1e840:	80 93 57 00 	sts	0x0057, r24
   1e844:	e8 95       	spm
}
   1e846:	08 95       	ret

0001e848 <BootloaderAPI_FillWord>:

void BootloaderAPI_FillWord(const uint32_t Address, const uint16_t Word)
{
   1e848:	dc 01       	movw	r26, r24
   1e84a:	cb 01       	movw	r24, r22
	boot_page_fill_safe(Address, Word);
   1e84c:	07 b6       	in	r0, 0x37	; 55
   1e84e:	00 fc       	sbrc	r0, 0
   1e850:	fd cf       	rjmp	.-6      	; 0x1e84c <BootloaderAPI_FillWord+0x4>
   1e852:	f9 99       	sbic	0x1f, 1	; 31
   1e854:	fe cf       	rjmp	.-4      	; 0x1e852 <BootloaderAPI_FillWord+0xa>
   1e856:	21 e0       	ldi	r18, 0x01	; 1
   1e858:	0a 01       	movw	r0, r20
   1e85a:	fc 01       	movw	r30, r24
   1e85c:	a0 93 5b 00 	sts	0x005B, r26
   1e860:	20 93 57 00 	sts	0x0057, r18
   1e864:	e8 95       	spm
   1e866:	11 24       	eor	r1, r1
}
   1e868:	08 95       	ret

0001e86a <BootloaderAPI_ReadSignature>:

uint8_t BootloaderAPI_ReadSignature(const uint16_t Address)
{
	return boot_signature_byte_get(Address);
   1e86a:	21 e2       	ldi	r18, 0x21	; 33
   1e86c:	fc 01       	movw	r30, r24
   1e86e:	20 93 57 00 	sts	0x0057, r18
   1e872:	84 91       	lpm	r24, Z
}
   1e874:	08 95       	ret

0001e876 <BootloaderAPI_ReadFuse>:

uint8_t BootloaderAPI_ReadFuse(const uint16_t Address)
{
	return boot_lock_fuse_bits_get(Address);
   1e876:	29 e0       	ldi	r18, 0x09	; 9
   1e878:	fc 01       	movw	r30, r24
   1e87a:	20 93 57 00 	sts	0x0057, r18
   1e87e:	84 91       	lpm	r24, Z
}
   1e880:	08 95       	ret

0001e882 <BootloaderAPI_ReadLock>:

uint8_t BootloaderAPI_ReadLock(void)
{
	return boot_lock_fuse_bits_get(GET_LOCK_BITS);
   1e882:	e1 e0       	ldi	r30, 0x01	; 1
   1e884:	f0 e0       	ldi	r31, 0x00	; 0
   1e886:	89 e0       	ldi	r24, 0x09	; 9
   1e888:	80 93 57 00 	sts	0x0057, r24
   1e88c:	84 91       	lpm	r24, Z
}
   1e88e:	08 95       	ret

0001e890 <BootloaderAPI_WriteLock>:

void BootloaderAPI_WriteLock(const uint8_t LockBits)
{
	boot_lock_bits_set_safe(LockBits);
   1e890:	07 b6       	in	r0, 0x37	; 55
   1e892:	00 fc       	sbrc	r0, 0
   1e894:	fd cf       	rjmp	.-6      	; 0x1e890 <BootloaderAPI_WriteLock>
   1e896:	f9 99       	sbic	0x1f, 1	; 31
   1e898:	fe cf       	rjmp	.-4      	; 0x1e896 <BootloaderAPI_WriteLock+0x6>
   1e89a:	80 95       	com	r24
   1e89c:	99 e0       	ldi	r25, 0x09	; 9
   1e89e:	e1 e0       	ldi	r30, 0x01	; 1
   1e8a0:	f0 e0       	ldi	r31, 0x00	; 0
   1e8a2:	08 2e       	mov	r0, r24
   1e8a4:	90 93 57 00 	sts	0x0057, r25
   1e8a8:	e8 95       	spm
}
   1e8aa:	08 95       	ret

0001e8ac <Endpoint_Write_Control_Stream_LE>:
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
   1e8ac:	20 91 9e 01 	lds	r18, 0x019E
   1e8b0:	30 91 9f 01 	lds	r19, 0x019F
   1e8b4:	26 17       	cp	r18, r22
   1e8b6:	37 07       	cpc	r19, r23
   1e8b8:	20 f4       	brcc	.+8      	; 0x1e8c2 <Endpoint_Write_Control_Stream_LE+0x16>
   1e8ba:	b9 01       	movw	r22, r18
   1e8bc:	fc 01       	movw	r30, r24
   1e8be:	20 e0       	ldi	r18, 0x00	; 0
   1e8c0:	35 c0       	rjmp	.+106    	; 0x1e92c <Endpoint_Write_Control_Stream_LE+0x80>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
   1e8c2:	61 15       	cp	r22, r1
   1e8c4:	71 05       	cpc	r23, r1
   1e8c6:	d1 f7       	brne	.-12     	; 0x1e8bc <Endpoint_Write_Control_Stream_LE+0x10>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
   1e8c8:	20 91 e8 00 	lds	r18, 0x00E8
   1e8cc:	2e 77       	andi	r18, 0x7E	; 126
   1e8ce:	20 93 e8 00 	sts	0x00E8, r18
   1e8d2:	f4 cf       	rjmp	.-24     	; 0x1e8bc <Endpoint_Write_Control_Stream_LE+0x10>
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
   1e8d4:	8e b3       	in	r24, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
   1e8d6:	88 23       	and	r24, r24
   1e8d8:	f1 f1       	breq	.+124    	; 0x1e956 <Endpoint_Write_Control_Stream_LE+0xaa>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
   1e8da:	85 30       	cpi	r24, 0x05	; 5
   1e8dc:	c1 f1       	breq	.+112    	; 0x1e94e <Endpoint_Write_Control_Stream_LE+0xa2>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
   1e8de:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
   1e8e2:	83 fd       	sbrc	r24, 3
   1e8e4:	36 c0       	rjmp	.+108    	; 0x1e952 <Endpoint_Write_Control_Stream_LE+0xa6>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
   1e8e6:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
   1e8ea:	82 fd       	sbrc	r24, 2
   1e8ec:	2a c0       	rjmp	.+84     	; 0x1e942 <Endpoint_Write_Control_Stream_LE+0x96>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
   1e8ee:	80 91 e8 00 	lds	r24, 0x00E8
		  break;

		if (Endpoint_IsINReady())
   1e8f2:	80 ff       	sbrs	r24, 0
   1e8f4:	1b c0       	rjmp	.+54     	; 0x1e92c <Endpoint_Write_Control_Stream_LE+0x80>
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
   1e8f6:	80 91 f2 00 	lds	r24, 0x00F2
   1e8fa:	90 91 f3 00 	lds	r25, 0x00F3
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
   1e8fe:	06 c0       	rjmp	.+12     	; 0x1e90c <Endpoint_Write_Control_Stream_LE+0x60>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
   1e900:	21 91       	ld	r18, Z+
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
   1e902:	20 93 f1 00 	sts	0x00F1, r18
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
   1e906:	61 50       	subi	r22, 0x01	; 1
   1e908:	70 40       	sbci	r23, 0x00	; 0
				BytesInEndpoint++;
   1e90a:	01 96       	adiw	r24, 0x01	; 1

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
   1e90c:	61 15       	cp	r22, r1
   1e90e:	71 05       	cpc	r23, r1
   1e910:	19 f0       	breq	.+6      	; 0x1e918 <Endpoint_Write_Control_Stream_LE+0x6c>
   1e912:	88 30       	cpi	r24, 0x08	; 8
   1e914:	91 05       	cpc	r25, r1
   1e916:	a0 f3       	brcs	.-24     	; 0x1e900 <Endpoint_Write_Control_Stream_LE+0x54>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
   1e918:	21 e0       	ldi	r18, 0x01	; 1
   1e91a:	88 30       	cpi	r24, 0x08	; 8
   1e91c:	91 05       	cpc	r25, r1
   1e91e:	09 f0       	breq	.+2      	; 0x1e922 <Endpoint_Write_Control_Stream_LE+0x76>
   1e920:	20 e0       	ldi	r18, 0x00	; 0
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
   1e922:	80 91 e8 00 	lds	r24, 0x00E8
   1e926:	8e 77       	andi	r24, 0x7E	; 126
   1e928:	80 93 e8 00 	sts	0x00E8, r24
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
   1e92c:	61 15       	cp	r22, r1
   1e92e:	71 05       	cpc	r23, r1
   1e930:	89 f6       	brne	.-94     	; 0x1e8d4 <Endpoint_Write_Control_Stream_LE+0x28>
   1e932:	22 23       	and	r18, r18
   1e934:	79 f6       	brne	.-98     	; 0x1e8d4 <Endpoint_Write_Control_Stream_LE+0x28>
   1e936:	05 c0       	rjmp	.+10     	; 0x1e942 <Endpoint_Write_Control_Stream_LE+0x96>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
   1e938:	8e b3       	in	r24, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
   1e93a:	88 23       	and	r24, r24
   1e93c:	61 f0       	breq	.+24     	; 0x1e956 <Endpoint_Write_Control_Stream_LE+0xaa>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
   1e93e:	85 30       	cpi	r24, 0x05	; 5
   1e940:	61 f0       	breq	.+24     	; 0x1e95a <Endpoint_Write_Control_Stream_LE+0xae>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
   1e942:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
   1e946:	82 ff       	sbrs	r24, 2
   1e948:	f7 cf       	rjmp	.-18     	; 0x1e938 <Endpoint_Write_Control_Stream_LE+0x8c>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
   1e94a:	80 e0       	ldi	r24, 0x00	; 0
   1e94c:	08 95       	ret
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
   1e94e:	83 e0       	ldi	r24, 0x03	; 3
   1e950:	08 95       	ret
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
   1e952:	81 e0       	ldi	r24, 0x01	; 1
   1e954:	08 95       	ret
	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
   1e956:	82 e0       	ldi	r24, 0x02	; 2
   1e958:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
   1e95a:	83 e0       	ldi	r24, 0x03	; 3
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
   1e95c:	08 95       	ret

0001e95e <Endpoint_Read_Control_Stream_LE>:
uint8_t TEMPLATE_FUNC_NAME (void* const Buffer,
                            uint16_t Length)
{
	uint8_t* DataStream = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));

	if (!(Length))
   1e95e:	61 15       	cp	r22, r1
   1e960:	71 05       	cpc	r23, r1
   1e962:	29 f4       	brne	.+10     	; 0x1e96e <Endpoint_Read_Control_Stream_LE+0x10>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
   1e964:	20 91 e8 00 	lds	r18, 0x00E8
   1e968:	2b 77       	andi	r18, 0x7B	; 123
   1e96a:	20 93 e8 00 	sts	0x00E8, r18

#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (void* const Buffer,
                            uint16_t Length)
{
   1e96e:	38 2f       	mov	r19, r24
   1e970:	29 2f       	mov	r18, r25
   1e972:	25 c0       	rjmp	.+74     	; 0x1e9be <Endpoint_Read_Control_Stream_LE+0x60>
	if (!(Length))
	  Endpoint_ClearOUT();

	while (Length)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
   1e974:	8e b3       	in	r24, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
   1e976:	88 23       	and	r24, r24
   1e978:	a9 f1       	breq	.+106    	; 0x1e9e4 <Endpoint_Read_Control_Stream_LE+0x86>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
   1e97a:	85 30       	cpi	r24, 0x05	; 5
   1e97c:	79 f1       	breq	.+94     	; 0x1e9dc <Endpoint_Read_Control_Stream_LE+0x7e>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
   1e97e:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
   1e982:	83 fd       	sbrc	r24, 3
   1e984:	2d c0       	rjmp	.+90     	; 0x1e9e0 <Endpoint_Read_Control_Stream_LE+0x82>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
   1e986:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;

		if (Endpoint_IsOUTReceived())
   1e98a:	82 ff       	sbrs	r24, 2
   1e98c:	f3 cf       	rjmp	.-26     	; 0x1e974 <Endpoint_Read_Control_Stream_LE+0x16>
   1e98e:	e3 2f       	mov	r30, r19
   1e990:	f2 2f       	mov	r31, r18
   1e992:	08 c0       	rjmp	.+16     	; 0x1e9a4 <Endpoint_Read_Control_Stream_LE+0x46>
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
   1e994:	80 91 f1 00 	lds	r24, 0x00F1
		{
			while (Length && Endpoint_BytesInEndpoint())
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
   1e998:	81 93       	st	Z+, r24
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
   1e99a:	3e 2f       	mov	r19, r30
   1e99c:	2f 2f       	mov	r18, r31
				Length--;
   1e99e:	61 50       	subi	r22, 0x01	; 1
   1e9a0:	70 40       	sbci	r23, 0x00	; 0
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;

		if (Endpoint_IsOUTReceived())
		{
			while (Length && Endpoint_BytesInEndpoint())
   1e9a2:	41 f0       	breq	.+16     	; 0x1e9b4 <Endpoint_Read_Control_Stream_LE+0x56>
   1e9a4:	3e 2f       	mov	r19, r30
   1e9a6:	2f 2f       	mov	r18, r31
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
   1e9a8:	80 91 f2 00 	lds	r24, 0x00F2
   1e9ac:	90 91 f3 00 	lds	r25, 0x00F3
   1e9b0:	00 97       	sbiw	r24, 0x00	; 0
   1e9b2:	81 f7       	brne	.-32     	; 0x1e994 <Endpoint_Read_Control_Stream_LE+0x36>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
   1e9b4:	80 91 e8 00 	lds	r24, 0x00E8
   1e9b8:	8b 77       	andi	r24, 0x7B	; 123
   1e9ba:	80 93 e8 00 	sts	0x00E8, r24
	uint8_t* DataStream = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));

	if (!(Length))
	  Endpoint_ClearOUT();

	while (Length)
   1e9be:	61 15       	cp	r22, r1
   1e9c0:	71 05       	cpc	r23, r1
   1e9c2:	c1 f6       	brne	.-80     	; 0x1e974 <Endpoint_Read_Control_Stream_LE+0x16>
   1e9c4:	05 c0       	rjmp	.+10     	; 0x1e9d0 <Endpoint_Read_Control_Stream_LE+0x72>
		}
	}

	while (!(Endpoint_IsINReady()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
   1e9c6:	8e b3       	in	r24, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
   1e9c8:	88 23       	and	r24, r24
   1e9ca:	61 f0       	breq	.+24     	; 0x1e9e4 <Endpoint_Read_Control_Stream_LE+0x86>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
   1e9cc:	85 30       	cpi	r24, 0x05	; 5
   1e9ce:	61 f0       	breq	.+24     	; 0x1e9e8 <Endpoint_Read_Control_Stream_LE+0x8a>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
   1e9d0:	80 91 e8 00 	lds	r24, 0x00E8

			Endpoint_ClearOUT();
		}
	}

	while (!(Endpoint_IsINReady()))
   1e9d4:	80 ff       	sbrs	r24, 0
   1e9d6:	f7 cf       	rjmp	.-18     	; 0x1e9c6 <Endpoint_Read_Control_Stream_LE+0x68>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
   1e9d8:	80 e0       	ldi	r24, 0x00	; 0
   1e9da:	08 95       	ret
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
   1e9dc:	83 e0       	ldi	r24, 0x03	; 3
   1e9de:	08 95       	ret
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
   1e9e0:	81 e0       	ldi	r24, 0x01	; 1
   1e9e2:	08 95       	ret
	while (!(Endpoint_IsINReady()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
   1e9e4:	82 e0       	ldi	r24, 0x02	; 2
   1e9e6:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
   1e9e8:	83 e0       	ldi	r24, 0x03	; 3
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
   1e9ea:	08 95       	ret

0001e9ec <Endpoint_ConfigureEndpoint_Prv>:
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
   1e9ec:	8f 70       	andi	r24, 0x0F	; 15
   1e9ee:	80 93 e9 00 	sts	0x00E9, r24
			 *  \note Endpoints must first be configured properly via \ref Endpoint_ConfigureEndpoint().
			 */
			static inline void Endpoint_EnableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_EnableEndpoint(void)
			{
				UECONX |= (1 << EPEN);
   1e9f2:	eb ee       	ldi	r30, 0xEB	; 235
   1e9f4:	f0 e0       	ldi	r31, 0x00	; 0
   1e9f6:	80 81       	ld	r24, Z
   1e9f8:	81 60       	ori	r24, 0x01	; 1
   1e9fa:	80 83       	st	Z, r24
{
#if defined(CONTROL_ONLY_DEVICE) || defined(ORDERED_EP_CONFIG)
	Endpoint_SelectEndpoint(Number);
	Endpoint_EnableEndpoint();

	UECFG1X = 0;
   1e9fc:	ed ee       	ldi	r30, 0xED	; 237
   1e9fe:	f0 e0       	ldi	r31, 0x00	; 0
   1ea00:	10 82       	st	Z, r1
	UECFG0X = UECFG0XData;
   1ea02:	60 93 ec 00 	sts	0x00EC, r22
	UECFG1X = UECFG1XData;
   1ea06:	40 83       	st	Z, r20
			 *  \return Boolean \c true if the currently selected endpoint has been configured, \c false otherwise.
			 */
			static inline bool Endpoint_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsConfigured(void)
			{
				return ((UESTA0X & (1 << CFGOK)) ? true : false);
   1ea08:	80 91 ee 00 	lds	r24, 0x00EE
	}

	Endpoint_SelectEndpoint(Number);
	return true;
#endif
}
   1ea0c:	88 1f       	adc	r24, r24
   1ea0e:	88 27       	eor	r24, r24
   1ea10:	88 1f       	adc	r24, r24
   1ea12:	08 95       	ret

0001ea14 <Endpoint_ClearStatusStage>:
	}
}

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
   1ea14:	80 91 98 01 	lds	r24, 0x0198
   1ea18:	87 ff       	sbrs	r24, 7
   1ea1a:	11 c0       	rjmp	.+34     	; 0x1ea3e <Endpoint_ClearStatusStage+0x2a>
   1ea1c:	03 c0       	rjmp	.+6      	; 0x1ea24 <Endpoint_ClearStatusStage+0x10>
	{
		while (!(Endpoint_IsOUTReceived()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
   1ea1e:	8e b3       	in	r24, 0x1e	; 30
   1ea20:	88 23       	and	r24, r24
   1ea22:	b1 f0       	breq	.+44     	; 0x1ea50 <Endpoint_ClearStatusStage+0x3c>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
   1ea24:	80 91 e8 00 	lds	r24, 0x00E8

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
	{
		while (!(Endpoint_IsOUTReceived()))
   1ea28:	82 ff       	sbrs	r24, 2
   1ea2a:	f9 cf       	rjmp	.-14     	; 0x1ea1e <Endpoint_ClearStatusStage+0xa>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
   1ea2c:	80 91 e8 00 	lds	r24, 0x00E8
   1ea30:	8b 77       	andi	r24, 0x7B	; 123
   1ea32:	80 93 e8 00 	sts	0x00E8, r24
   1ea36:	08 95       	ret
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
   1ea38:	8e b3       	in	r24, 0x1e	; 30
   1ea3a:	88 23       	and	r24, r24
   1ea3c:	49 f0       	breq	.+18     	; 0x1ea50 <Endpoint_ClearStatusStage+0x3c>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
   1ea3e:	80 91 e8 00 	lds	r24, 0x00E8

		Endpoint_ClearOUT();
	}
	else
	{
		while (!(Endpoint_IsINReady()))
   1ea42:	80 ff       	sbrs	r24, 0
   1ea44:	f9 cf       	rjmp	.-14     	; 0x1ea38 <Endpoint_ClearStatusStage+0x24>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
   1ea46:	80 91 e8 00 	lds	r24, 0x00E8
   1ea4a:	8e 77       	andi	r24, 0x7E	; 126
   1ea4c:	80 93 e8 00 	sts	0x00E8, r24
   1ea50:	08 95       	ret

0001ea52 <USB_ResetInterface>:

	USB_IsInitialized = false;
}

void USB_ResetInterface(void)
{
   1ea52:	0f 93       	push	r16
   1ea54:	1f 93       	push	r17
   1ea56:	cf 93       	push	r28
   1ea58:	df 93       	push	r29
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
   1ea5a:	49 d0       	rcall	.+146    	; 0x1eaee <USB_INT_DisableAllInterrupts>
   1ea5c:	50 d0       	rcall	.+160    	; 0x1eafe <USB_INT_ClearAllInterrupts>
	USB_INT_ClearAllInterrupts();
   1ea5e:	c8 ed       	ldi	r28, 0xD8	; 216
   1ea60:	d0 e0       	ldi	r29, 0x00	; 0
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
   1ea62:	88 81       	ld	r24, Y
   1ea64:	8f 77       	andi	r24, 0x7F	; 127
   1ea66:	88 83       	st	Y, r24
   1ea68:	88 81       	ld	r24, Y
   1ea6a:	80 68       	ori	r24, 0x80	; 128
				USBCON |=  (1 << USBE);
   1ea6c:	88 83       	st	Y, r24
   1ea6e:	88 81       	ld	r24, Y
   1ea70:	8f 7d       	andi	r24, 0xDF	; 223
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
   1ea72:	88 83       	st	Y, r24
   1ea74:	e7 ed       	ldi	r30, 0xD7	; 215
   1ea76:	f0 e0       	ldi	r31, 0x00	; 0

	if (USB_CurrentMode == USB_MODE_Device)
	{
		#if defined(USB_CAN_BE_DEVICE)
		#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
		UHWCON |=  (1 << UIMOD);
   1ea78:	80 81       	ld	r24, Z
   1ea7a:	80 68       	ori	r24, 0x80	; 128
   1ea7c:	80 83       	st	Z, r24
   1ea7e:	19 bc       	out	0x29, r1	; 41
   1ea80:	1e ba       	out	0x1e, r1	; 30
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
   1ea82:	10 92 96 01 	sts	0x0196, r1

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState                 = DEVICE_STATE_Unattached;
	USB_Device_ConfigurationNumber  = 0;
   1ea86:	00 ee       	ldi	r16, 0xE0	; 224
   1ea88:	10 e0       	ldi	r17, 0x00	; 0
			}

			static inline void USB_Device_SetFullSpeed(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetFullSpeed(void)
			{
				UDCON &= ~(1 << LSM);
   1ea8a:	f8 01       	movw	r30, r16
   1ea8c:	80 81       	ld	r24, Z
   1ea8e:	8b 7f       	andi	r24, 0xFB	; 251
   1ea90:	80 83       	st	Z, r24
   1ea92:	88 81       	ld	r24, Y
   1ea94:	81 60       	ori	r24, 0x01	; 1
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBCON |= (1 << VBUSTE);
   1ea96:	88 83       	st	Y, r24
   1ea98:	80 e0       	ldi	r24, 0x00	; 0
   1ea9a:	60 e0       	ldi	r22, 0x00	; 0
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
   1ea9c:	42 e0       	ldi	r20, 0x02	; 2
   1ea9e:	a6 df       	rcall	.-180    	; 0x1e9ec <Endpoint_ConfigureEndpoint_Prv>
   1eaa0:	e1 ee       	ldi	r30, 0xE1	; 225
   1eaa2:	f0 e0       	ldi	r31, 0x00	; 0
   1eaa4:	80 81       	ld	r24, Z
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
   1eaa6:	8e 7f       	andi	r24, 0xFE	; 254
   1eaa8:	80 83       	st	Z, r24
   1eaaa:	e2 ee       	ldi	r30, 0xE2	; 226
   1eaac:	f0 e0       	ldi	r31, 0x00	; 0
   1eaae:	80 81       	ld	r24, Z
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
   1eab0:	81 60       	ori	r24, 0x01	; 1
   1eab2:	80 83       	st	Z, r24
   1eab4:	80 81       	ld	r24, Z
   1eab6:	88 60       	ori	r24, 0x08	; 8
   1eab8:	80 83       	st	Z, r24
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
   1eaba:	f8 01       	movw	r30, r16
   1eabc:	80 81       	ld	r24, Z
   1eabe:	8e 7f       	andi	r24, 0xFE	; 254
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
   1eac0:	80 83       	st	Z, r24
   1eac2:	88 81       	ld	r24, Y
   1eac4:	80 61       	ori	r24, 0x10	; 16
   1eac6:	88 83       	st	Y, r24

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON |=  (1 << OTGPADE);
   1eac8:	df 91       	pop	r29
   1eaca:	cf 91       	pop	r28
   1eacc:	1f 91       	pop	r17
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
   1eace:	0f 91       	pop	r16
   1ead0:	08 95       	ret

0001ead2 <USB_Init>:
   1ead2:	e8 ed       	ldi	r30, 0xD8	; 216
   1ead4:	f0 e0       	ldi	r31, 0x00	; 0
   1ead6:	80 81       	ld	r24, Z
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON &= ~(1 << OTGPADE);
   1ead8:	8f 7e       	andi	r24, 0xEF	; 239
   1eada:	80 83       	st	Z, r24

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON |=  (1 << UVREGE);
   1eadc:	e7 ed       	ldi	r30, 0xD7	; 215
   1eade:	f0 e0       	ldi	r31, 0x00	; 0
   1eae0:	80 81       	ld	r24, Z
   1eae2:	81 60       	ori	r24, 0x01	; 1
   1eae4:	80 83       	st	Z, r24
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
   1eae6:	81 e0       	ldi	r24, 0x01	; 1
   1eae8:	80 93 97 01 	sts	0x0197, r24

	USB_ResetInterface();
   1eaec:	b2 cf       	rjmp	.-156    	; 0x1ea52 <USB_ResetInterface>

0001eaee <USB_INT_DisableAllInterrupts>:
#include "../USBInterrupt.h"

void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
   1eaee:	e8 ed       	ldi	r30, 0xD8	; 216
   1eaf0:	f0 e0       	ldi	r31, 0x00	; 0
   1eaf2:	80 81       	ld	r24, Z
   1eaf4:	8c 7f       	andi	r24, 0xFC	; 252
   1eaf6:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
   1eaf8:	10 92 e2 00 	sts	0x00E2, r1
	#endif
}
   1eafc:	08 95       	ret

0001eafe <USB_INT_ClearAllInterrupts>:

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
   1eafe:	10 92 da 00 	sts	0x00DA, r1
	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
   1eb02:	10 92 e1 00 	sts	0x00E1, r1
	#endif
}
   1eb06:	08 95       	ret

0001eb08 <__vector_10>:

ISR(USB_GEN_vect, ISR_BLOCK)
{
   1eb08:	1f 92       	push	r1
   1eb0a:	0f 92       	push	r0
   1eb0c:	0f b6       	in	r0, 0x3f	; 63
   1eb0e:	0f 92       	push	r0
   1eb10:	0b b6       	in	r0, 0x3b	; 59
   1eb12:	0f 92       	push	r0
   1eb14:	11 24       	eor	r1, r1
   1eb16:	2f 93       	push	r18
   1eb18:	3f 93       	push	r19
   1eb1a:	4f 93       	push	r20
   1eb1c:	5f 93       	push	r21
   1eb1e:	6f 93       	push	r22
   1eb20:	7f 93       	push	r23
   1eb22:	8f 93       	push	r24
   1eb24:	9f 93       	push	r25
   1eb26:	af 93       	push	r26
   1eb28:	bf 93       	push	r27
   1eb2a:	ef 93       	push	r30
   1eb2c:	ff 93       	push	r31
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBINT & (1 << VBUSTI));
   1eb2e:	80 91 da 00 	lds	r24, 0x00DA
		EVENT_USB_Device_StartOfFrame();
	}
	#endif

	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	if (USB_INT_HasOccurred(USB_INT_VBUSTI) && USB_INT_IsEnabled(USB_INT_VBUSTI))
   1eb32:	80 ff       	sbrs	r24, 0
   1eb34:	1b c0       	rjmp	.+54     	; 0x1eb6c <__vector_10+0x64>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBCON & (1 << VBUSTE));
   1eb36:	80 91 d8 00 	lds	r24, 0x00D8
   1eb3a:	80 ff       	sbrs	r24, 0
   1eb3c:	17 c0       	rjmp	.+46     	; 0x1eb6c <__vector_10+0x64>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBINT &= ~(1 << VBUSTI);
   1eb3e:	80 91 da 00 	lds	r24, 0x00DA
   1eb42:	8e 7f       	andi	r24, 0xFE	; 254
   1eb44:	80 93 da 00 	sts	0x00DA, r24
				 *  \return Boolean \c true if the VBUS line is currently detecting power from a host, \c false otherwise.
				 */
				static inline bool USB_VBUS_GetStatus(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
				static inline bool USB_VBUS_GetStatus(void)
				{
					return ((USBSTA & (1 << VBUS)) ? true : false);
   1eb48:	80 91 d9 00 	lds	r24, 0x00D9
	{
		USB_INT_Clear(USB_INT_VBUSTI);

		if (USB_VBUS_GetStatus())
   1eb4c:	80 ff       	sbrs	r24, 0
   1eb4e:	0b c0       	rjmp	.+22     	; 0x1eb66 <__vector_10+0x5e>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
   1eb50:	8c e0       	ldi	r24, 0x0C	; 12
   1eb52:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
   1eb54:	8e e0       	ldi	r24, 0x0E	; 14
   1eb56:	89 bd       	out	0x29, r24	; 41
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			{
				USB_PLL_On();
				while (!(USB_PLL_IsReady()));
   1eb58:	09 b4       	in	r0, 0x29	; 41
   1eb5a:	00 fe       	sbrs	r0, 0
   1eb5c:	fd cf       	rjmp	.-6      	; 0x1eb58 <__vector_10+0x50>
			}

			USB_DeviceState = DEVICE_STATE_Powered;
   1eb5e:	81 e0       	ldi	r24, 0x01	; 1
   1eb60:	8e bb       	out	0x1e, r24	; 30
			EVENT_USB_Device_Connect();
   1eb62:	90 d1       	rcall	.+800    	; 0x1ee84 <USB_Event_Stub>
   1eb64:	03 c0       	rjmp	.+6      	; 0x1eb6c <__vector_10+0x64>
   1eb66:	19 bc       	out	0x29, r1	; 41
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
   1eb68:	1e ba       	out	0x1e, r1	; 30
		else
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			  USB_PLL_Off();

			USB_DeviceState = DEVICE_STATE_Unattached;
   1eb6a:	8c d1       	rcall	.+792    	; 0x1ee84 <USB_Event_Stub>
			EVENT_USB_Device_Disconnect();
   1eb6c:	80 91 e1 00 	lds	r24, 0x00E1
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
   1eb70:	80 ff       	sbrs	r24, 0
   1eb72:	17 c0       	rjmp	.+46     	; 0x1eba2 <__vector_10+0x9a>
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
   1eb74:	80 91 e2 00 	lds	r24, 0x00E2
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
   1eb78:	80 ff       	sbrs	r24, 0
   1eb7a:	13 c0       	rjmp	.+38     	; 0x1eba2 <__vector_10+0x9a>
   1eb7c:	80 91 e2 00 	lds	r24, 0x00E2
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
   1eb80:	8e 7f       	andi	r24, 0xFE	; 254
   1eb82:	80 93 e2 00 	sts	0x00E2, r24
   1eb86:	80 91 e2 00 	lds	r24, 0x00E2
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
   1eb8a:	80 61       	ori	r24, 0x10	; 16
   1eb8c:	80 93 e2 00 	sts	0x00E2, r24
   1eb90:	80 91 d8 00 	lds	r24, 0x00D8
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON |=  (1 << FRZCLK);
   1eb94:	80 62       	ori	r24, 0x20	; 32
   1eb96:	80 93 d8 00 	sts	0x00D8, r24
   1eb9a:	19 bc       	out	0x29, r1	; 41
   1eb9c:	85 e0       	ldi	r24, 0x05	; 5
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
   1eb9e:	8e bb       	out	0x1e, r24	; 30

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
		EVENT_USB_Device_Disconnect();
		#else
		USB_DeviceState = DEVICE_STATE_Suspended;
   1eba0:	71 d1       	rcall	.+738    	; 0x1ee84 <USB_Event_Stub>
   1eba2:	80 91 e1 00 	lds	r24, 0x00E1
		EVENT_USB_Device_Suspend();
   1eba6:	84 ff       	sbrs	r24, 4
					case USB_INT_IDTI:
						return (USBINT & (1 << IDTI));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
   1eba8:	2c c0       	rjmp	.+88     	; 0x1ec02 <__vector_10+0xfa>
   1ebaa:	80 91 e2 00 	lds	r24, 0x00E2
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
   1ebae:	84 ff       	sbrs	r24, 4
					case USB_INT_IDTI:
						return (USBCON & (1 << IDTE));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
   1ebb0:	28 c0       	rjmp	.+80     	; 0x1ec02 <__vector_10+0xfa>
   1ebb2:	8c e0       	ldi	r24, 0x0C	; 12
   1ebb4:	89 bd       	out	0x29, r24	; 41
   1ebb6:	8e e0       	ldi	r24, 0x0E	; 14

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
   1ebb8:	89 bd       	out	0x29, r24	; 41
   1ebba:	09 b4       	in	r0, 0x29	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
   1ebbc:	00 fe       	sbrs	r0, 0
   1ebbe:	fd cf       	rjmp	.-6      	; 0x1ebba <__vector_10+0xb2>
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
   1ebc0:	80 91 d8 00 	lds	r24, 0x00D8
   1ebc4:	8f 7d       	andi	r24, 0xDF	; 223
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
   1ebc6:	80 93 d8 00 	sts	0x00D8, r24
   1ebca:	80 91 e1 00 	lds	r24, 0x00E1
   1ebce:	8f 7e       	andi	r24, 0xEF	; 239
						USBINT &= ~(1 << IDTI);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
   1ebd0:	80 93 e1 00 	sts	0x00E1, r24
   1ebd4:	80 91 e2 00 	lds	r24, 0x00E2
   1ebd8:	8f 7e       	andi	r24, 0xEF	; 239
						USBCON &= ~(1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
   1ebda:	80 93 e2 00 	sts	0x00E2, r24
   1ebde:	80 91 e2 00 	lds	r24, 0x00E2
   1ebe2:	81 60       	ori	r24, 0x01	; 1
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
   1ebe4:	80 93 e2 00 	sts	0x00E2, r24
   1ebe8:	80 91 96 01 	lds	r24, 0x0196
   1ebec:	88 23       	and	r24, r24
		USB_INT_Clear(USB_INT_WAKEUPI);

		USB_INT_Disable(USB_INT_WAKEUPI);
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_Device_ConfigurationNumber)
   1ebee:	21 f4       	brne	.+8      	; 0x1ebf8 <__vector_10+0xf0>
   1ebf0:	80 91 e3 00 	lds	r24, 0x00E3
   1ebf4:	87 ff       	sbrs	r24, 7
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
   1ebf6:	02 c0       	rjmp	.+4      	; 0x1ebfc <__vector_10+0xf4>
   1ebf8:	84 e0       	ldi	r24, 0x04	; 4
		  USB_DeviceState = DEVICE_STATE_Configured;
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
   1ebfa:	01 c0       	rjmp	.+2      	; 0x1ebfe <__vector_10+0xf6>
   1ebfc:	81 e0       	ldi	r24, 0x01	; 1
   1ebfe:	8e bb       	out	0x1e, r24	; 30
   1ec00:	41 d1       	rcall	.+642    	; 0x1ee84 <USB_Event_Stub>
   1ec02:	80 91 e1 00 	lds	r24, 0x00E1

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
		#else
		EVENT_USB_Device_WakeUp();
   1ec06:	83 ff       	sbrs	r24, 3
   1ec08:	21 c0       	rjmp	.+66     	; 0x1ec4c <__vector_10+0x144>
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
   1ec0a:	80 91 e2 00 	lds	r24, 0x00E2
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
   1ec0e:	83 ff       	sbrs	r24, 3
   1ec10:	1d c0       	rjmp	.+58     	; 0x1ec4c <__vector_10+0x144>
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
   1ec12:	80 91 e1 00 	lds	r24, 0x00E1
   1ec16:	87 7f       	andi	r24, 0xF7	; 247
   1ec18:	80 93 e1 00 	sts	0x00E1, r24
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
   1ec1c:	82 e0       	ldi	r24, 0x02	; 2
   1ec1e:	8e bb       	out	0x1e, r24	; 30
   1ec20:	10 92 96 01 	sts	0x0196, r1
	{
		USB_INT_Clear(USB_INT_EORSTI);

		USB_DeviceState                = DEVICE_STATE_Default;
   1ec24:	80 91 e1 00 	lds	r24, 0x00E1
		USB_Device_ConfigurationNumber = 0;
   1ec28:	8e 7f       	andi	r24, 0xFE	; 254
   1ec2a:	80 93 e1 00 	sts	0x00E1, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
   1ec2e:	80 91 e2 00 	lds	r24, 0x00E2
   1ec32:	8e 7f       	andi	r24, 0xFE	; 254
   1ec34:	80 93 e2 00 	sts	0x00E2, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
   1ec38:	80 91 e2 00 	lds	r24, 0x00E2
   1ec3c:	80 61       	ori	r24, 0x10	; 16
   1ec3e:	80 93 e2 00 	sts	0x00E2, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
   1ec42:	80 e0       	ldi	r24, 0x00	; 0
   1ec44:	60 e0       	ldi	r22, 0x00	; 0
   1ec46:	42 e0       	ldi	r20, 0x02	; 2
   1ec48:	d1 de       	rcall	.-606    	; 0x1e9ec <Endpoint_ConfigureEndpoint_Prv>
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
   1ec4a:	1c d1       	rcall	.+568    	; 0x1ee84 <USB_Event_Stub>
   1ec4c:	ff 91       	pop	r31
   1ec4e:	ef 91       	pop	r30
   1ec50:	bf 91       	pop	r27
   1ec52:	af 91       	pop	r26

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
   1ec54:	9f 91       	pop	r25
   1ec56:	8f 91       	pop	r24
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
   1ec58:	7f 91       	pop	r23
   1ec5a:	6f 91       	pop	r22
   1ec5c:	5f 91       	pop	r21
   1ec5e:	4f 91       	pop	r20
   1ec60:	3f 91       	pop	r19
   1ec62:	2f 91       	pop	r18
   1ec64:	0f 90       	pop	r0
   1ec66:	0b be       	out	0x3b, r0	; 59
   1ec68:	0f 90       	pop	r0
   1ec6a:	0f be       	out	0x3f, r0	; 63
   1ec6c:	0f 90       	pop	r0
   1ec6e:	1f 90       	pop	r1
   1ec70:	18 95       	reti

0001ec72 <USB_Device_ProcessControlRequest>:
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_Device_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
   1ec72:	1f 93       	push	r17
   1ec74:	cf 93       	push	r28
   1ec76:	df 93       	push	r29
   1ec78:	00 d0       	rcall	.+0      	; 0x1ec7a <USB_Device_ProcessControlRequest+0x8>
   1ec7a:	cd b7       	in	r28, 0x3d	; 61
   1ec7c:	de b7       	in	r29, 0x3e	; 62
   1ec7e:	88 e0       	ldi	r24, 0x08	; 8
	USB_ControlRequest.bRequest      = Endpoint_Read_8();
	USB_ControlRequest.wValue        = Endpoint_Read_16_LE();
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;
   1ec80:	e8 e9       	ldi	r30, 0x98	; 152
   1ec82:	f1 e0       	ldi	r31, 0x01	; 1
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
   1ec84:	90 91 f1 00 	lds	r25, 0x00F1

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_8();
   1ec88:	91 93       	st	Z+, r25
   1ec8a:	81 50       	subi	r24, 0x01	; 1
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
   1ec8c:	d9 f7       	brne	.-10     	; 0x1ec84 <USB_Device_ProcessControlRequest+0x12>
	  *(RequestHeader++) = Endpoint_Read_8();
	#endif

	EVENT_USB_Device_ControlRequest();
   1ec8e:	50 dd       	rcall	.-1376   	; 0x1e730 <EVENT_USB_Device_ControlRequest>
   1ec90:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
   1ec94:	83 ff       	sbrs	r24, 3

	if (Endpoint_IsSETUPReceived())
   1ec96:	e2 c0       	rjmp	.+452    	; 0x1ee5c <USB_Device_ProcessControlRequest+0x1ea>
   1ec98:	80 91 98 01 	lds	r24, 0x0198
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
   1ec9c:	90 91 99 01 	lds	r25, 0x0199

		switch (USB_ControlRequest.bRequest)
   1eca0:	95 30       	cpi	r25, 0x05	; 5
   1eca2:	09 f4       	brne	.+2      	; 0x1eca6 <USB_Device_ProcessControlRequest+0x34>
   1eca4:	6c c0       	rjmp	.+216    	; 0x1ed7e <USB_Device_ProcessControlRequest+0x10c>
   1eca6:	96 30       	cpi	r25, 0x06	; 6
   1eca8:	40 f4       	brcc	.+16     	; 0x1ecba <USB_Device_ProcessControlRequest+0x48>
   1ecaa:	91 30       	cpi	r25, 0x01	; 1
   1ecac:	69 f1       	breq	.+90     	; 0x1ed08 <USB_Device_ProcessControlRequest+0x96>
   1ecae:	91 30       	cpi	r25, 0x01	; 1
   1ecb0:	70 f0       	brcs	.+28     	; 0x1ecce <USB_Device_ProcessControlRequest+0x5c>
   1ecb2:	93 30       	cpi	r25, 0x03	; 3
   1ecb4:	09 f0       	breq	.+2      	; 0x1ecb8 <USB_Device_ProcessControlRequest+0x46>
   1ecb6:	d2 c0       	rjmp	.+420    	; 0x1ee5c <USB_Device_ProcessControlRequest+0x1ea>
   1ecb8:	27 c0       	rjmp	.+78     	; 0x1ed08 <USB_Device_ProcessControlRequest+0x96>
   1ecba:	98 30       	cpi	r25, 0x08	; 8
   1ecbc:	09 f4       	brne	.+2      	; 0x1ecc0 <USB_Device_ProcessControlRequest+0x4e>
   1ecbe:	a1 c0       	rjmp	.+322    	; 0x1ee02 <USB_Device_ProcessControlRequest+0x190>
   1ecc0:	99 30       	cpi	r25, 0x09	; 9
   1ecc2:	09 f4       	brne	.+2      	; 0x1ecc6 <USB_Device_ProcessControlRequest+0x54>
   1ecc4:	b0 c0       	rjmp	.+352    	; 0x1ee26 <USB_Device_ProcessControlRequest+0x1b4>
   1ecc6:	96 30       	cpi	r25, 0x06	; 6
   1ecc8:	09 f0       	breq	.+2      	; 0x1eccc <USB_Device_ProcessControlRequest+0x5a>
   1ecca:	c8 c0       	rjmp	.+400    	; 0x1ee5c <USB_Device_ProcessControlRequest+0x1ea>
   1eccc:	7a c0       	rjmp	.+244    	; 0x1edc2 <USB_Device_ProcessControlRequest+0x150>
   1ecce:	80 38       	cpi	r24, 0x80	; 128
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
   1ecd0:	81 f0       	breq	.+32     	; 0x1ecf2 <USB_Device_ProcessControlRequest+0x80>
   1ecd2:	82 38       	cpi	r24, 0x82	; 130
   1ecd4:	09 f0       	breq	.+2      	; 0x1ecd8 <USB_Device_ProcessControlRequest+0x66>
   1ecd6:	c2 c0       	rjmp	.+388    	; 0x1ee5c <USB_Device_ProcessControlRequest+0x1ea>
   1ecd8:	80 91 9c 01 	lds	r24, 0x019C
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
			#endif
			break;
		case (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_ENDPOINT):
			#if !defined(CONTROL_ONLY_DEVICE)
			Endpoint_SelectEndpoint((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
   1ecdc:	8f 70       	andi	r24, 0x0F	; 15
   1ecde:	80 93 e9 00 	sts	0x00E9, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
   1ece2:	90 91 eb 00 	lds	r25, 0x00EB
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
   1ece6:	81 e0       	ldi	r24, 0x01	; 1

			CurrentStatus = Endpoint_IsStalled();
   1ece8:	95 ff       	sbrs	r25, 5
   1ecea:	80 e0       	ldi	r24, 0x00	; 0
   1ecec:	10 92 e9 00 	sts	0x00E9, r1
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
   1ecf0:	01 c0       	rjmp	.+2      	; 0x1ecf4 <USB_Device_ProcessControlRequest+0x82>
   1ecf2:	80 e0       	ldi	r24, 0x00	; 0
	Endpoint_ClearOUT();
}

static void USB_Device_GetStatus(void)
{
	uint8_t CurrentStatus = 0;
   1ecf4:	90 91 e8 00 	lds	r25, 0x00E8
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
   1ecf8:	97 7f       	andi	r25, 0xF7	; 247
   1ecfa:	90 93 e8 00 	sts	0x00E8, r25
   1ecfe:	80 93 f1 00 	sts	0x00F1, r24
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
   1ed02:	10 92 f1 00 	sts	0x00F1, r1
				UEDATX = (Data >> 8);
   1ed06:	88 c0       	rjmp	.+272    	; 0x1ee18 <USB_Device_ProcessControlRequest+0x1a6>
   1ed08:	88 23       	and	r24, r24
				}

				break;
			case REQ_ClearFeature:
			case REQ_SetFeature:
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
   1ed0a:	19 f0       	breq	.+6      	; 0x1ed12 <USB_Device_ProcessControlRequest+0xa0>
   1ed0c:	82 30       	cpi	r24, 0x02	; 2
   1ed0e:	09 f0       	breq	.+2      	; 0x1ed12 <USB_Device_ProcessControlRequest+0xa0>
   1ed10:	a5 c0       	rjmp	.+330    	; 0x1ee5c <USB_Device_ProcessControlRequest+0x1ea>
   1ed12:	8f 71       	andi	r24, 0x1F	; 31
	Endpoint_ClearStatusStage();
}

static void USB_Device_ClearSetFeature(void)
{
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
   1ed14:	82 30       	cpi	r24, 0x02	; 2
   1ed16:	09 f0       	breq	.+2      	; 0x1ed1a <USB_Device_ProcessControlRequest+0xa8>
   1ed18:	a1 c0       	rjmp	.+322    	; 0x1ee5c <USB_Device_ProcessControlRequest+0x1ea>
   1ed1a:	80 91 9a 01 	lds	r24, 0x019A

			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
   1ed1e:	88 23       	and	r24, r24
   1ed20:	41 f5       	brne	.+80     	; 0x1ed72 <USB_Device_ProcessControlRequest+0x100>
   1ed22:	20 91 9c 01 	lds	r18, 0x019C
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
   1ed26:	2f 70       	andi	r18, 0x0F	; 15
   1ed28:	09 f4       	brne	.+2      	; 0x1ed2c <USB_Device_ProcessControlRequest+0xba>

				if (EndpointIndex == ENDPOINT_CONTROLEP)
   1ed2a:	98 c0       	rjmp	.+304    	; 0x1ee5c <USB_Device_ProcessControlRequest+0x1ea>
   1ed2c:	20 93 e9 00 	sts	0x00E9, r18
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
   1ed30:	80 91 eb 00 	lds	r24, 0x00EB
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
   1ed34:	80 ff       	sbrs	r24, 0
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
   1ed36:	1d c0       	rjmp	.+58     	; 0x1ed72 <USB_Device_ProcessControlRequest+0x100>
   1ed38:	80 91 99 01 	lds	r24, 0x0199
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
   1ed3c:	83 30       	cpi	r24, 0x03	; 3
   1ed3e:	21 f4       	brne	.+8      	; 0x1ed48 <USB_Device_ProcessControlRequest+0xd6>
   1ed40:	80 91 eb 00 	lds	r24, 0x00EB
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
   1ed44:	80 62       	ori	r24, 0x20	; 32
   1ed46:	13 c0       	rjmp	.+38     	; 0x1ed6e <USB_Device_ProcessControlRequest+0xfc>
   1ed48:	80 91 eb 00 	lds	r24, 0x00EB
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
   1ed4c:	80 61       	ori	r24, 0x10	; 16
   1ed4e:	80 93 eb 00 	sts	0x00EB, r24
   1ed52:	81 e0       	ldi	r24, 0x01	; 1
			 *  \param[in] Address  Endpoint address whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t Address)
			{
				UERST = (1 << (Address & ENDPOINT_EPNUM_MASK));
   1ed54:	90 e0       	ldi	r25, 0x00	; 0
   1ed56:	02 c0       	rjmp	.+4      	; 0x1ed5c <USB_Device_ProcessControlRequest+0xea>
   1ed58:	88 0f       	add	r24, r24
   1ed5a:	99 1f       	adc	r25, r25
   1ed5c:	2a 95       	dec	r18
   1ed5e:	e2 f7       	brpl	.-8      	; 0x1ed58 <USB_Device_ProcessControlRequest+0xe6>
   1ed60:	80 93 ea 00 	sts	0x00EA, r24
   1ed64:	10 92 ea 00 	sts	0x00EA, r1
				UERST = 0;
   1ed68:	80 91 eb 00 	lds	r24, 0x00EB

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
   1ed6c:	88 60       	ori	r24, 0x08	; 8
   1ed6e:	80 93 eb 00 	sts	0x00EB, r24
   1ed72:	10 92 e9 00 	sts	0x00E9, r1
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
   1ed76:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
   1ed7a:	87 7f       	andi	r24, 0xF7	; 247
   1ed7c:	50 c0       	rjmp	.+160    	; 0x1ee1e <USB_Device_ProcessControlRequest+0x1ac>
   1ed7e:	88 23       	and	r24, r24
					USB_Device_ClearSetFeature();
				}

				break;
			case REQ_SetAddress:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
   1ed80:	09 f0       	breq	.+2      	; 0x1ed84 <USB_Device_ProcessControlRequest+0x112>
   1ed82:	6c c0       	rjmp	.+216    	; 0x1ee5c <USB_Device_ProcessControlRequest+0x1ea>
   1ed84:	10 91 9a 01 	lds	r17, 0x019A
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t DeviceAddress = (USB_ControlRequest.wValue & 0x7F);
   1ed88:	1f 77       	andi	r17, 0x7F	; 127
   1ed8a:	80 91 e3 00 	lds	r24, 0x00E3
			#endif

			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				UDADDR = (UDADDR & (1 << ADDEN)) | (Address & 0x7F);
   1ed8e:	80 78       	andi	r24, 0x80	; 128
   1ed90:	81 2b       	or	r24, r17
   1ed92:	80 93 e3 00 	sts	0x00E3, r24
   1ed96:	80 91 e8 00 	lds	r24, 0x00E8
   1ed9a:	87 7f       	andi	r24, 0xF7	; 247
   1ed9c:	80 93 e8 00 	sts	0x00E8, r24
   1eda0:	39 de       	rcall	.-910    	; 0x1ea14 <Endpoint_ClearStatusStage>

	USB_Device_SetDeviceAddress(DeviceAddress);

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
   1eda2:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
   1eda6:	80 ff       	sbrs	r24, 0
   1eda8:	fc cf       	rjmp	.-8      	; 0x1eda2 <USB_Device_ProcessControlRequest+0x130>

	while (!(Endpoint_IsINReady()));
   1edaa:	80 91 e3 00 	lds	r24, 0x00E3
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address)
			{
				(void)Address;
				
				UDADDR |= (1 << ADDEN);
   1edae:	80 68       	ori	r24, 0x80	; 128
   1edb0:	80 93 e3 00 	sts	0x00E3, r24
   1edb4:	11 23       	and	r17, r17
   1edb6:	11 f0       	breq	.+4      	; 0x1edbc <USB_Device_ProcessControlRequest+0x14a>

	USB_Device_EnableDeviceAddress(DeviceAddress);

	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
   1edb8:	83 e0       	ldi	r24, 0x03	; 3
   1edba:	01 c0       	rjmp	.+2      	; 0x1edbe <USB_Device_ProcessControlRequest+0x14c>
   1edbc:	82 e0       	ldi	r24, 0x02	; 2
   1edbe:	8e bb       	out	0x1e, r24	; 30
   1edc0:	4d c0       	rjmp	.+154    	; 0x1ee5c <USB_Device_ProcessControlRequest+0x1ea>
   1edc2:	80 58       	subi	r24, 0x80	; 128
   1edc4:	82 30       	cpi	r24, 0x02	; 2
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_SetAddress();

				break;
			case REQ_GetDescriptor:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
   1edc6:	08 f0       	brcs	.+2      	; 0x1edca <USB_Device_ProcessControlRequest+0x158>
   1edc8:	49 c0       	rjmp	.+146    	; 0x1ee5c <USB_Device_ProcessControlRequest+0x1ea>
   1edca:	80 91 9a 01 	lds	r24, 0x019A
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif

	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
   1edce:	90 91 9b 01 	lds	r25, 0x019B
   1edd2:	60 91 9c 01 	lds	r22, 0x019C
   1edd6:	ae 01       	movw	r20, r28
   1edd8:	4f 5f       	subi	r20, 0xFF	; 255
   1edda:	5f 4f       	sbci	r21, 0xFF	; 255
   1eddc:	db dc       	rcall	.-1610   	; 0x1e794 <CALLBACK_USB_GetDescriptor>
   1edde:	bc 01       	movw	r22, r24
   1ede0:	00 97       	sbiw	r24, 0x00	; 0
   1ede2:	09 f4       	brne	.+2      	; 0x1ede6 <USB_Device_ProcessControlRequest+0x174>
   1ede4:	3b c0       	rjmp	.+118    	; 0x1ee5c <USB_Device_ProcessControlRequest+0x1ea>
   1ede6:	80 91 e8 00 	lds	r24, 0x00E8
   1edea:	87 7f       	andi	r24, 0xF7	; 247
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
   1edec:	80 93 e8 00 	sts	0x00E8, r24
   1edf0:	89 81       	ldd	r24, Y+1	; 0x01
   1edf2:	9a 81       	ldd	r25, Y+2	; 0x02
   1edf4:	5b dd       	rcall	.-1354   	; 0x1e8ac <Endpoint_Write_Control_Stream_LE>
	}

	Endpoint_ClearSETUP();

	#if defined(USE_RAM_DESCRIPTORS) || !defined(ARCH_HAS_MULTI_ADDRESS_SPACE)
	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
   1edf6:	80 91 e8 00 	lds	r24, 0x00E8
   1edfa:	8b 77       	andi	r24, 0x7B	; 123
   1edfc:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
   1ee00:	2d c0       	rjmp	.+90     	; 0x1ee5c <USB_Device_ProcessControlRequest+0x1ea>
   1ee02:	80 38       	cpi	r24, 0x80	; 128
   1ee04:	59 f5       	brne	.+86     	; 0x1ee5c <USB_Device_ProcessControlRequest+0x1ea>
   1ee06:	80 91 e8 00 	lds	r24, 0x00E8
					USB_Device_GetDescriptor();
				}

				break;
			case REQ_GetConfiguration:
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
   1ee0a:	87 7f       	andi	r24, 0xF7	; 247
   1ee0c:	80 93 e8 00 	sts	0x00E8, r24
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
   1ee10:	80 91 96 01 	lds	r24, 0x0196
   1ee14:	80 93 f1 00 	sts	0x00F1, r24

static void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();

	Endpoint_Write_8(USB_Device_ConfigurationNumber);
   1ee18:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
   1ee1c:	8e 77       	andi	r24, 0x7E	; 126
   1ee1e:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
   1ee22:	f8 dd       	rcall	.-1040   	; 0x1ea14 <Endpoint_ClearStatusStage>
   1ee24:	1b c0       	rjmp	.+54     	; 0x1ee5c <USB_Device_ProcessControlRequest+0x1ea>
   1ee26:	88 23       	and	r24, r24
   1ee28:	c9 f4       	brne	.+50     	; 0x1ee5c <USB_Device_ProcessControlRequest+0x1ea>
	Endpoint_ClearIN();

	Endpoint_ClearStatusStage();
   1ee2a:	90 91 9a 01 	lds	r25, 0x019A
   1ee2e:	92 30       	cpi	r25, 0x02	; 2
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_GetConfiguration();

				break;
			case REQ_SetConfiguration:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
   1ee30:	a8 f4       	brcc	.+42     	; 0x1ee5c <USB_Device_ProcessControlRequest+0x1ea>
   1ee32:	80 91 e8 00 	lds	r24, 0x00E8
}

static void USB_Device_SetConfiguration(void)
{
	#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
   1ee36:	87 7f       	andi	r24, 0xF7	; 247
   1ee38:	80 93 e8 00 	sts	0x00E8, r24
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
   1ee3c:	90 93 96 01 	sts	0x0196, r25
   1ee40:	e9 dd       	rcall	.-1070   	; 0x1ea14 <Endpoint_ClearStatusStage>
   1ee42:	80 91 96 01 	lds	r24, 0x0196
	#endif
	#endif

	Endpoint_ClearSETUP();

	USB_Device_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
   1ee46:	88 23       	and	r24, r24
   1ee48:	21 f4       	brne	.+8      	; 0x1ee52 <USB_Device_ProcessControlRequest+0x1e0>

	Endpoint_ClearStatusStage();
   1ee4a:	80 91 e3 00 	lds	r24, 0x00E3

	if (USB_Device_ConfigurationNumber)
   1ee4e:	87 ff       	sbrs	r24, 7
   1ee50:	02 c0       	rjmp	.+4      	; 0x1ee56 <USB_Device_ProcessControlRequest+0x1e4>
   1ee52:	84 e0       	ldi	r24, 0x04	; 4
   1ee54:	01 c0       	rjmp	.+2      	; 0x1ee58 <USB_Device_ProcessControlRequest+0x1e6>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
   1ee56:	81 e0       	ldi	r24, 0x01	; 1
   1ee58:	8e bb       	out	0x1e, r24	; 30
	  USB_DeviceState = DEVICE_STATE_Configured;
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
   1ee5a:	5e dc       	rcall	.-1860   	; 0x1e718 <EVENT_USB_Device_ConfigurationChanged>
   1ee5c:	80 91 e8 00 	lds	r24, 0x00E8
   1ee60:	83 ff       	sbrs	r24, 3
   1ee62:	0a c0       	rjmp	.+20     	; 0x1ee78 <USB_Device_ProcessControlRequest+0x206>
   1ee64:	80 91 e8 00 	lds	r24, 0x00E8

	EVENT_USB_Device_ConfigurationChanged();
   1ee68:	87 7f       	andi	r24, 0xF7	; 247
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
   1ee6a:	80 93 e8 00 	sts	0x00E8, r24
			default:
				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
   1ee6e:	80 91 eb 00 	lds	r24, 0x00EB
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
   1ee72:	80 62       	ori	r24, 0x20	; 32
   1ee74:	80 93 eb 00 	sts	0x00EB, r24
   1ee78:	0f 90       	pop	r0
   1ee7a:	0f 90       	pop	r0
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
   1ee7c:	df 91       	pop	r29
   1ee7e:	cf 91       	pop	r28
   1ee80:	1f 91       	pop	r17
   1ee82:	08 95       	ret

0001ee84 <USB_Event_Stub>:
#include "Events.h"

void USB_Event_Stub(void)
{

}
   1ee84:	08 95       	ret

0001ee86 <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
   1ee86:	cf 93       	push	r28
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_DeviceTask(void)
{
	if (USB_DeviceState == DEVICE_STATE_Unattached)
   1ee88:	8e b3       	in	r24, 0x1e	; 30
   1ee8a:	88 23       	and	r24, r24
   1ee8c:	a9 f0       	breq	.+42     	; 0x1eeb8 <USB_USBTask+0x32>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
   1ee8e:	80 91 e9 00 	lds	r24, 0x00E9
   1ee92:	8f 70       	andi	r24, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
   1ee94:	90 91 ec 00 	lds	r25, 0x00EC
   1ee98:	90 ff       	sbrs	r25, 0
   1ee9a:	02 c0       	rjmp	.+4      	; 0x1eea0 <USB_USBTask+0x1a>
   1ee9c:	c0 e8       	ldi	r28, 0x80	; 128
   1ee9e:	01 c0       	rjmp	.+2      	; 0x1eea2 <USB_USBTask+0x1c>
   1eea0:	c0 e0       	ldi	r28, 0x00	; 0
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
   1eea2:	c8 2b       	or	r28, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
   1eea4:	10 92 e9 00 	sts	0x00E9, r1
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
   1eea8:	80 91 e8 00 	lds	r24, 0x00E8

	uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

	if (Endpoint_IsSETUPReceived())
   1eeac:	83 ff       	sbrs	r24, 3
   1eeae:	01 c0       	rjmp	.+2      	; 0x1eeb2 <USB_USBTask+0x2c>
	  USB_Device_ProcessControlRequest();
   1eeb0:	e0 de       	rcall	.-576    	; 0x1ec72 <USB_Device_ProcessControlRequest>
   1eeb2:	cf 70       	andi	r28, 0x0F	; 15
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
   1eeb4:	c0 93 e9 00 	sts	0x00E9, r28
   1eeb8:	cf 91       	pop	r28
	#elif defined(USB_CAN_BE_HOST)
		USB_HostTask();
	#elif defined(USB_CAN_BE_DEVICE)
		USB_DeviceTask();
	#endif
}
   1eeba:	08 95       	ret

0001eebc <__eerd_byte_usb1287>:
   1eebc:	f9 99       	sbic	0x1f, 1	; 31
   1eebe:	fe cf       	rjmp	.-4      	; 0x1eebc <__eerd_byte_usb1287>
   1eec0:	92 bd       	out	0x22, r25	; 34
   1eec2:	81 bd       	out	0x21, r24	; 33
   1eec4:	f8 9a       	sbi	0x1f, 0	; 31
   1eec6:	99 27       	eor	r25, r25
   1eec8:	80 b5       	in	r24, 0x20	; 32
   1eeca:	08 95       	ret

0001eecc <__eewr_byte_usb1287>:
   1eecc:	26 2f       	mov	r18, r22

0001eece <__eewr_r18_usb1287>:
   1eece:	f9 99       	sbic	0x1f, 1	; 31
   1eed0:	fe cf       	rjmp	.-4      	; 0x1eece <__eewr_r18_usb1287>
   1eed2:	1f ba       	out	0x1f, r1	; 31
   1eed4:	92 bd       	out	0x22, r25	; 34
   1eed6:	81 bd       	out	0x21, r24	; 33
   1eed8:	20 bd       	out	0x20, r18	; 32
   1eeda:	0f b6       	in	r0, 0x3f	; 63
   1eedc:	f8 94       	cli
   1eede:	fa 9a       	sbi	0x1f, 2	; 31
   1eee0:	f9 9a       	sbi	0x1f, 1	; 31
   1eee2:	0f be       	out	0x3f, r0	; 63
   1eee4:	01 96       	adiw	r24, 0x01	; 1
   1eee6:	08 95       	ret

0001eee8 <_exit>:
   1eee8:	f8 94       	cli

0001eeea <__stop_program>:
   1eeea:	ff cf       	rjmp	.-2      	; 0x1eeea <__stop_program>

Disassembly of section .apitable_trampolines:

0001ffa0 <BootloaderAPI_Trampolines>:
.section .apitable_trampolines, "ax"
.global BootloaderAPI_Trampolines
BootloaderAPI_Trampolines:

	BootloaderAPI_ErasePage_Trampoline:
		jmp BootloaderAPI_ErasePage
   1ffa0:	0c 94 f8 f3 	jmp	0x1e7f0	; 0x1e7f0 <BootloaderAPI_ErasePage>

0001ffa4 <BootloaderAPI_WritePage_Trampoline>:
	BootloaderAPI_WritePage_Trampoline:
		jmp BootloaderAPI_WritePage
   1ffa4:	0c 94 0e f4 	jmp	0x1e81c	; 0x1e81c <BootloaderAPI_WritePage>

0001ffa8 <BootloaderAPI_FillWord_Trampoline>:
	BootloaderAPI_FillWord_Trampoline:
		jmp BootloaderAPI_FillWord
   1ffa8:	0c 94 24 f4 	jmp	0x1e848	; 0x1e848 <BootloaderAPI_FillWord>

0001ffac <BootloaderAPI_ReadSignature_Trampoline>:
	BootloaderAPI_ReadSignature_Trampoline:
		jmp BootloaderAPI_ReadSignature
   1ffac:	0c 94 35 f4 	jmp	0x1e86a	; 0x1e86a <BootloaderAPI_ReadSignature>

0001ffb0 <BootloaderAPI_ReadFuse_Trampoline>:
	BootloaderAPI_ReadFuse_Trampoline:
		jmp BootloaderAPI_ReadFuse
   1ffb0:	0c 94 3b f4 	jmp	0x1e876	; 0x1e876 <BootloaderAPI_ReadFuse>

0001ffb4 <BootloaderAPI_ReadLock_Trampoline>:
	BootloaderAPI_ReadLock_Trampoline:
		jmp BootloaderAPI_ReadLock
   1ffb4:	0c 94 41 f4 	jmp	0x1e882	; 0x1e882 <BootloaderAPI_ReadLock>

0001ffb8 <BootloaderAPI_WriteLock_Trampoline>:
	BootloaderAPI_WriteLock_Trampoline:
		jmp BootloaderAPI_WriteLock
   1ffb8:	0c 94 48 f4 	jmp	0x1e890	; 0x1e890 <BootloaderAPI_WriteLock>

0001ffbc <BootloaderAPU_UNUSED1>:
	BootloaderAPU_UNUSED1:
		ret
   1ffbc:	08 95       	ret

0001ffbe <BootloaderAPU_UNUSED2>:
	BootloaderAPU_UNUSED2:
		ret
   1ffbe:	08 95       	ret

0001ffc0 <BootloaderAPU_UNUSED3>:
	BootloaderAPU_UNUSED3:
		ret
   1ffc0:	08 95       	ret

0001ffc2 <BootloaderAPU_UNUSED4>:
	BootloaderAPU_UNUSED4:
		ret
   1ffc2:	08 95       	ret

0001ffc4 <BootloaderAPU_UNUSED5>:
	BootloaderAPU_UNUSED5:
		ret
   1ffc4:	08 95       	ret

Disassembly of section .apitable_jumptable:

0001ffe0 <BootloaderAPI_JumpTable>:
; API function jump table
.section .apitable_jumptable, "ax"
.global BootloaderAPI_JumpTable
BootloaderAPI_JumpTable:

	rjmp BootloaderAPI_ErasePage_Trampoline
   1ffe0:	df cf       	rjmp	.-66     	; 0x1ffa0 <BootloaderAPI_Trampolines>
	rjmp BootloaderAPI_WritePage_Trampoline
   1ffe2:	e0 cf       	rjmp	.-64     	; 0x1ffa4 <BootloaderAPI_WritePage_Trampoline>
	rjmp BootloaderAPI_FillWord_Trampoline
   1ffe4:	e1 cf       	rjmp	.-62     	; 0x1ffa8 <BootloaderAPI_FillWord_Trampoline>
	rjmp BootloaderAPI_ReadSignature_Trampoline
   1ffe6:	e2 cf       	rjmp	.-60     	; 0x1ffac <BootloaderAPI_ReadSignature_Trampoline>
	rjmp BootloaderAPI_ReadFuse_Trampoline
   1ffe8:	e3 cf       	rjmp	.-58     	; 0x1ffb0 <BootloaderAPI_ReadFuse_Trampoline>
	rjmp BootloaderAPI_ReadLock_Trampoline
   1ffea:	e4 cf       	rjmp	.-56     	; 0x1ffb4 <BootloaderAPI_ReadLock_Trampoline>
	rjmp BootloaderAPI_WriteLock_Trampoline
   1ffec:	e5 cf       	rjmp	.-54     	; 0x1ffb8 <BootloaderAPI_WriteLock_Trampoline>
	rjmp BootloaderAPU_UNUSED1 ; UNUSED ENTRY 1
   1ffee:	e6 cf       	rjmp	.-52     	; 0x1ffbc <BootloaderAPU_UNUSED1>
	rjmp BootloaderAPU_UNUSED2 ; UNUSED ENTRY 2
   1fff0:	e6 cf       	rjmp	.-52     	; 0x1ffbe <BootloaderAPU_UNUSED2>
	rjmp BootloaderAPU_UNUSED3 ; UNUSED ENTRY 3
   1fff2:	e6 cf       	rjmp	.-52     	; 0x1ffc0 <BootloaderAPU_UNUSED3>
	rjmp BootloaderAPU_UNUSED4 ; UNUSED ENTRY 4
   1fff4:	e6 cf       	rjmp	.-52     	; 0x1ffc2 <BootloaderAPU_UNUSED4>
	rjmp BootloaderAPU_UNUSED5 ; UNUSED ENTRY 5
   1fff6:	e6 cf       	rjmp	.-52     	; 0x1ffc4 <BootloaderAPU_UNUSED5>

Disassembly of section .apitable_signatures:

0001fff8 <BootloaderAPI_Signatures>:
   1fff8:	00 e0       	ldi	r16, 0x00	; 0
   1fffa:	01 00       	.word	0x0001	; ????
   1fffc:	00 df       	rcall	.-512    	; 0x1fdfe <__data_load_end+0xe80>
   1fffe:	fb dc       	rcall	.-1546   	; 0x1f9f6 <__data_load_end+0xa78>
