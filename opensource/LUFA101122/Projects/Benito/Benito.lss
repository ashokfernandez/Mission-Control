
Benito.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000018  00800100  00000fa8  0000103c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000fa8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000097  00800118  00800118  00001054  2**0
                  ALLOC
  3 .stab         00000a80  00000000  00000000  00001054  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000002b1  00000000  00000000  00001ad4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000428  00000000  00000000  00001d85  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000be0  00000000  00000000  000021ad  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00007247  00000000  00000000  00002d8d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001e58  00000000  00000000  00009fd4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00005890  00000000  00000000  0000be2c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000630  00000000  00000000  000116bc  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00002d6f  00000000  00000000  00011cec  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00002cba  00000000  00000000  00014a5b  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000510  00000000  00000000  00017715  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:

	return Endpoint_IsConfigured();
}

void Endpoint_ClearEndpoints(void)
{
   0:	9d c0       	rjmp	.+314    	; 0x13c <__ctors_end>
	#if defined(USB_CAN_BE_BOTH)
	USB_CurrentMode = USB_MODE_None;
	#endif

	USB_IsInitialized = false;
}
   2:	00 00       	nop
uint8_t TEMPLATE_FUNC_NAME (const void* Buffer,
                            uint16_t Length)
{
   4:	b6 c0       	rjmp	.+364    	; 0x172 <__bad_interrupt>

	return ENDPOINT_READYWAIT_NoError;
}

uint16_t CDC_Device_BytesReceived(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
   6:	00 00       	nop
   8:	b4 c0       	rjmp	.+360    	; 0x172 <__bad_interrupt>
   a:	00 00       	nop
   c:	b2 c0       	rjmp	.+356    	; 0x172 <__bad_interrupt>
   e:	00 00       	nop
  10:	b0 c0       	rjmp	.+352    	; 0x172 <__bad_interrupt>
  12:	00 00       	nop
  14:	ae c0       	rjmp	.+348    	; 0x172 <__bad_interrupt>
  16:	00 00       	nop
  18:	ac c0       	rjmp	.+344    	; 0x172 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	aa c0       	rjmp	.+340    	; 0x172 <__bad_interrupt>
  1e:	00 00       	nop
  20:	a8 c0       	rjmp	.+336    	; 0x172 <__bad_interrupt>
  22:	00 00       	nop
  24:	a6 c0       	rjmp	.+332    	; 0x172 <__bad_interrupt>
  26:	00 00       	nop
  28:	a4 c0       	rjmp	.+328    	; 0x172 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	2c c3       	rjmp	.+1624   	; 0x686 <__vector_11>
  2e:	00 00       	nop
  30:	f0 c2       	rjmp	.+1504   	; 0x612 <__vector_12>
  32:	00 00       	nop
  34:	9e c0       	rjmp	.+316    	; 0x172 <__bad_interrupt>
  36:	00 00       	nop
  38:	9c c0       	rjmp	.+312    	; 0x172 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	9a c0       	rjmp	.+308    	; 0x172 <__bad_interrupt>
  3e:	00 00       	nop
  40:	98 c0       	rjmp	.+304    	; 0x172 <__bad_interrupt>
  42:	00 00       	nop
  44:	96 c0       	rjmp	.+300    	; 0x172 <__bad_interrupt>
  46:	00 00       	nop
  48:	94 c0       	rjmp	.+296    	; 0x172 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	92 c0       	rjmp	.+292    	; 0x172 <__bad_interrupt>
  4e:	00 00       	nop
  50:	90 c0       	rjmp	.+288    	; 0x172 <__bad_interrupt>
  52:	00 00       	nop
  54:	8e c0       	rjmp	.+284    	; 0x172 <__bad_interrupt>
  56:	00 00       	nop
  58:	8c c0       	rjmp	.+280    	; 0x172 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	db c0       	rjmp	.+438    	; 0x214 <__vector_23>
  5e:	00 00       	nop
  60:	88 c0       	rjmp	.+272    	; 0x172 <__bad_interrupt>
  62:	00 00       	nop
  64:	86 c0       	rjmp	.+268    	; 0x172 <__bad_interrupt>
  66:	00 00       	nop
  68:	84 c0       	rjmp	.+264    	; 0x172 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	82 c0       	rjmp	.+260    	; 0x172 <__bad_interrupt>
  6e:	00 00       	nop
  70:	80 c0       	rjmp	.+256    	; 0x172 <__bad_interrupt>
  72:	00 00       	nop
  74:	7e c0       	rjmp	.+252    	; 0x172 <__bad_interrupt>
  76:	00 00       	nop
  78:	7c c0       	rjmp	.+248    	; 0x172 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	7a c0       	rjmp	.+244    	; 0x172 <__bad_interrupt>
  7e:	00 00       	nop
  80:	78 c0       	rjmp	.+240    	; 0x172 <__bad_interrupt>
  82:	00 00       	nop
  84:	76 c0       	rjmp	.+236    	; 0x172 <__bad_interrupt>
  86:	00 00       	nop
  88:	74 c0       	rjmp	.+232    	; 0x172 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	72 c0       	rjmp	.+228    	; 0x172 <__bad_interrupt>
  8e:	00 00       	nop
  90:	70 c0       	rjmp	.+224    	; 0x172 <__bad_interrupt>
  92:	00 00       	nop
  94:	6e c0       	rjmp	.+220    	; 0x172 <__bad_interrupt>
  96:	00 00       	nop

00000098 <DeviceDescriptor>:
  98:	12 01 10 01 02 00 00 08 eb 03 60 20 01 00 01 02     ..........` ....
  a8:	dc 01                                               ..

000000aa <ConfigurationDescriptor>:
  aa:	09 02 3e 00 02 01 00 c0 32 09 04 00 00 01 02 02     ..>.....2.......
  ba:	01 00 05 24 00 10 01 04 24 02 06 05 24 06 00 01     ...$....$...$...
  ca:	07 05 82 03 08 00 ff 09 04 01 00 02 0a 00 00 00     ................
  da:	07 05 04 02 10 00 01 07 05 83 02 10 00 01           ..............

000000e8 <LanguageString>:
  e8:	04 03 09 04                                         ....

000000ec <ManufacturerString>:
  ec:	18 03 44 00 65 00 61 00 6e 00 20 00 43 00 61 00     ..D.e.a.n. .C.a.
  fc:	6d 00 65 00 72 00 61 00 00 00                       m.e.r.a...

00000106 <ProductString>:
 106:	34 03 42 00 65 00 6e 00 69 00 74 00 6f 00 20 00     4.B.e.n.i.t.o. .
 116:	41 00 72 00 64 00 75 00 69 00 6e 00 6f 00 20 00     A.r.d.u.i.n.o. .
 126:	50 00 72 00 6f 00 67 00 72 00 61 00 6d 00 6d 00     P.r.o.g.r.a.m.m.
 136:	65 00 72 00 00 00                                   e.r...

0000013c <__ctors_end>:
 13c:	11 24       	eor	r1, r1
 13e:	1f be       	out	0x3f, r1	; 63
 140:	cf ef       	ldi	r28, 0xFF	; 255
 142:	d4 e0       	ldi	r29, 0x04	; 4
 144:	de bf       	out	0x3e, r29	; 62
 146:	cd bf       	out	0x3d, r28	; 61

00000148 <__do_copy_data>:
 148:	11 e0       	ldi	r17, 0x01	; 1
 14a:	a0 e0       	ldi	r26, 0x00	; 0
 14c:	b1 e0       	ldi	r27, 0x01	; 1
 14e:	e8 ea       	ldi	r30, 0xA8	; 168
 150:	ff e0       	ldi	r31, 0x0F	; 15
 152:	02 c0       	rjmp	.+4      	; 0x158 <.do_copy_data_start>

00000154 <.do_copy_data_loop>:
 154:	05 90       	lpm	r0, Z+
 156:	0d 92       	st	X+, r0

00000158 <.do_copy_data_start>:
 158:	a8 31       	cpi	r26, 0x18	; 24
 15a:	b1 07       	cpc	r27, r17
 15c:	d9 f7       	brne	.-10     	; 0x154 <.do_copy_data_loop>

0000015e <__do_clear_bss>:
 15e:	11 e0       	ldi	r17, 0x01	; 1
 160:	a8 e1       	ldi	r26, 0x18	; 24
 162:	b1 e0       	ldi	r27, 0x01	; 1
 164:	01 c0       	rjmp	.+2      	; 0x168 <.do_clear_bss_start>

00000166 <.do_clear_bss_loop>:
 166:	1d 92       	st	X+, r1

00000168 <.do_clear_bss_start>:
 168:	af 3a       	cpi	r26, 0xAF	; 175
 16a:	b1 07       	cpc	r27, r17
 16c:	e1 f7       	brne	.-8      	; 0x166 <.do_clear_bss_loop>
 16e:	cf d0       	rcall	.+414    	; 0x30e <main>
 170:	19 c7       	rjmp	.+3634   	; 0xfa4 <_exit>

00000172 <__bad_interrupt>:
 172:	46 cf       	rjmp	.-372    	; 0x0 <__vectors>

00000174 <EVENT_USB_Device_Connect>:
}

/** Event handler for the library USB Connection event. */
void EVENT_USB_Device_Connect(void)
{
	PulseMSRemaining.PingPongLEDPulse = PING_PONG_LED_PULSE_MS;
 174:	84 e6       	ldi	r24, 0x64	; 100
 176:	80 93 1c 01 	sts	0x011C, r24
				PORTC |= LEDMask;
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
			{
				PORTC = ((PORTC | LEDS_ALL_LEDS) & ~LEDMask);
 17a:	88 b1       	in	r24, 0x08	; 8
 17c:	80 6c       	ori	r24, 0xC0	; 192
 17e:	8f 77       	andi	r24, 0x7F	; 127
 180:	88 b9       	out	0x08, r24	; 8
	LEDs_SetAllLEDs(LEDMASK_TX);
}
 182:	08 95       	ret

00000184 <EVENT_USB_Device_Disconnect>:

/** Event handler for the library USB Disconnection event. */
void EVENT_USB_Device_Disconnect(void)
{
	PulseMSRemaining.PingPongLEDPulse = 0;
 184:	10 92 1c 01 	sts	0x011C, r1
 188:	88 b1       	in	r24, 0x08	; 8
 18a:	80 6c       	ori	r24, 0xC0	; 192
 18c:	88 b9       	out	0x08, r24	; 8
	LEDs_SetAllLEDs(LEDS_NO_LEDS);
}
 18e:	08 95       	ret

00000190 <EVENT_CDC_Device_LineEncodingChanged>:
/** Event handler for the CDC Class driver Line Encoding Changed event.
 *
 *  \param[in] CDCInterfaceInfo  Pointer to the CDC class interface configuration structure being referenced
 */
void EVENT_CDC_Device_LineEncodingChanged(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
 190:	1f 93       	push	r17
 192:	fc 01       	movw	r30, r24
	uint8_t ConfigMask = 0;

	switch (CDCInterfaceInfo->State.LineEncoding.ParityType)
 194:	84 89       	ldd	r24, Z+20	; 0x14
 196:	81 30       	cpi	r24, 0x01	; 1
 198:	19 f0       	breq	.+6      	; 0x1a0 <EVENT_CDC_Device_LineEncodingChanged+0x10>
 19a:	82 30       	cpi	r24, 0x02	; 2
 19c:	19 f4       	brne	.+6      	; 0x1a4 <EVENT_CDC_Device_LineEncodingChanged+0x14>
 19e:	04 c0       	rjmp	.+8      	; 0x1a8 <EVENT_CDC_Device_LineEncodingChanged+0x18>
 1a0:	10 e3       	ldi	r17, 0x30	; 48
 1a2:	03 c0       	rjmp	.+6      	; 0x1aa <EVENT_CDC_Device_LineEncodingChanged+0x1a>
 1a4:	10 e0       	ldi	r17, 0x00	; 0
 1a6:	01 c0       	rjmp	.+2      	; 0x1aa <EVENT_CDC_Device_LineEncodingChanged+0x1a>
 1a8:	10 e2       	ldi	r17, 0x20	; 32
		case CDC_PARITY_Even:
			ConfigMask = (1 << UPM11);
			break;
	}

	if (CDCInterfaceInfo->State.LineEncoding.CharFormat == CDC_LINEENCODING_TwoStopBits)
 1aa:	83 89       	ldd	r24, Z+19	; 0x13
 1ac:	82 30       	cpi	r24, 0x02	; 2
 1ae:	09 f4       	brne	.+2      	; 0x1b2 <EVENT_CDC_Device_LineEncodingChanged+0x22>
	  ConfigMask |= (1 << USBS1);
 1b0:	18 60       	ori	r17, 0x08	; 8

	switch (CDCInterfaceInfo->State.LineEncoding.DataBits)
 1b2:	85 89       	ldd	r24, Z+21	; 0x15
 1b4:	87 30       	cpi	r24, 0x07	; 7
 1b6:	31 f0       	breq	.+12     	; 0x1c4 <EVENT_CDC_Device_LineEncodingChanged+0x34>
 1b8:	88 30       	cpi	r24, 0x08	; 8
 1ba:	31 f0       	breq	.+12     	; 0x1c8 <EVENT_CDC_Device_LineEncodingChanged+0x38>
 1bc:	86 30       	cpi	r24, 0x06	; 6
 1be:	29 f4       	brne	.+10     	; 0x1ca <EVENT_CDC_Device_LineEncodingChanged+0x3a>
	{
		case 6:
			ConfigMask |= (1 << UCSZ10);
 1c0:	12 60       	ori	r17, 0x02	; 2
 1c2:	03 c0       	rjmp	.+6      	; 0x1ca <EVENT_CDC_Device_LineEncodingChanged+0x3a>
			break;
		case 7:
			ConfigMask |= (1 << UCSZ11);
 1c4:	14 60       	ori	r17, 0x04	; 4
 1c6:	01 c0       	rjmp	.+2      	; 0x1ca <EVENT_CDC_Device_LineEncodingChanged+0x3a>
			break;
		case 8:
			ConfigMask |= ((1 << UCSZ11) | (1 << UCSZ10));
 1c8:	16 60       	ori	r17, 0x06	; 6
			break;
	}

	/* Must turn off USART before reconfiguring it, otherwise incorrect operation may occur */
	UCSR1B = 0;
 1ca:	10 92 c9 00 	sts	0x00C9, r1
	UCSR1A = 0;
 1ce:	10 92 c8 00 	sts	0x00C8, r1
	UCSR1C = 0;
 1d2:	10 92 ca 00 	sts	0x00CA, r1

	/* Set the new baud rate before configuring the USART */
	UBRR1  = SERIAL_2X_UBBRVAL(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS);
 1d6:	27 85       	ldd	r18, Z+15	; 0x0f
 1d8:	30 89       	ldd	r19, Z+16	; 0x10
 1da:	41 89       	ldd	r20, Z+17	; 0x11
 1dc:	52 89       	ldd	r21, Z+18	; 0x12
 1de:	ca 01       	movw	r24, r20
 1e0:	b9 01       	movw	r22, r18
 1e2:	96 95       	lsr	r25
 1e4:	87 95       	ror	r24
 1e6:	77 95       	ror	r23
 1e8:	67 95       	ror	r22
 1ea:	60 5c       	subi	r22, 0xC0	; 192
 1ec:	7d 4b       	sbci	r23, 0xBD	; 189
 1ee:	80 4f       	sbci	r24, 0xF0	; 240
 1f0:	9f 4f       	sbci	r25, 0xFF	; 255
 1f2:	b6 d6       	rcall	.+3436   	; 0xf60 <__udivmodsi4>
 1f4:	21 50       	subi	r18, 0x01	; 1
 1f6:	30 40       	sbci	r19, 0x00	; 0
 1f8:	30 93 cd 00 	sts	0x00CD, r19
 1fc:	20 93 cc 00 	sts	0x00CC, r18

	/* Reconfigure the USART in double speed mode for a wider baud rate range at the expense of accuracy */
	UCSR1C = ConfigMask;
 200:	10 93 ca 00 	sts	0x00CA, r17
	UCSR1A = (1 << U2X1);
 204:	82 e0       	ldi	r24, 0x02	; 2
 206:	80 93 c8 00 	sts	0x00C8, r24
	UCSR1B = ((1 << RXCIE1) | (1 << TXEN1) | (1 << RXEN1));
 20a:	88 e9       	ldi	r24, 0x98	; 152
 20c:	80 93 c9 00 	sts	0x00C9, r24
}
 210:	1f 91       	pop	r17
 212:	08 95       	ret

00000214 <__vector_23>:

/** ISR to manage the reception of data from the serial port, placing received bytes into a circular buffer
 *  for later transmission to the host.
 */
ISR(USART1_RX_vect, ISR_BLOCK)
{
 214:	1f 92       	push	r1
 216:	0f 92       	push	r0
 218:	0f b6       	in	r0, 0x3f	; 63
 21a:	0f 92       	push	r0
 21c:	11 24       	eor	r1, r1
 21e:	2f 93       	push	r18
 220:	8f 93       	push	r24
 222:	9f 93       	push	r25
 224:	ef 93       	push	r30
 226:	ff 93       	push	r31
	uint8_t ReceivedByte = UDR1;
 228:	90 91 ce 00 	lds	r25, 0x00CE

	if (USB_DeviceState == DEVICE_STATE_Configured)
 22c:	80 91 a6 01 	lds	r24, 0x01A6
 230:	84 30       	cpi	r24, 0x04	; 4
 232:	f1 f4       	brne	.+60     	; 0x270 <__vector_23+0x5c>
		 *  \param[in]     Data    Data element to insert into the buffer
		 */
		static inline void RingBuffer_Insert(RingBuff_t* const Buffer,
		                                     const RingBuff_Data_t Data)
		{
			*Buffer->In = Data;
 234:	e0 91 9d 01 	lds	r30, 0x019D
 238:	f0 91 9e 01 	lds	r31, 0x019E
 23c:	90 83       	st	Z, r25

			if (++Buffer->In == &Buffer->Buffer[BUFFER_SIZE])
 23e:	e0 91 9d 01 	lds	r30, 0x019D
 242:	f0 91 9e 01 	lds	r31, 0x019E
 246:	cf 01       	movw	r24, r30
 248:	01 96       	adiw	r24, 0x01	; 1
 24a:	90 93 9e 01 	sts	0x019E, r25
 24e:	80 93 9d 01 	sts	0x019D, r24
 252:	8d 59       	subi	r24, 0x9D	; 157
 254:	91 40       	sbci	r25, 0x01	; 1
 256:	21 f4       	brne	.+8      	; 0x260 <__vector_23+0x4c>
			  Buffer->In = Buffer->Buffer;
 258:	8d e1       	ldi	r24, 0x1D	; 29
 25a:	91 e0       	ldi	r25, 0x01	; 1
 25c:	92 83       	std	Z+2, r25	; 0x02
 25e:	81 83       	std	Z+1, r24	; 0x01

			ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
 260:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
 262:	f8 94       	cli
			{
				Buffer->Count++;
 264:	80 91 a1 01 	lds	r24, 0x01A1
 268:	8f 5f       	subi	r24, 0xFF	; 255
 26a:	80 93 a1 01 	sts	0x01A1, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
 26e:	9f bf       	out	0x3f, r25	; 63
	  RingBuffer_Insert(&Tx_Buffer, ReceivedByte);
}
 270:	ff 91       	pop	r31
 272:	ef 91       	pop	r30
 274:	9f 91       	pop	r25
 276:	8f 91       	pop	r24
 278:	2f 91       	pop	r18
 27a:	0f 90       	pop	r0
 27c:	0f be       	out	0x3f, r0	; 63
 27e:	0f 90       	pop	r0
 280:	1f 90       	pop	r1
 282:	18 95       	reti

00000284 <EVENT_CDC_Device_ControLineStateChanged>:
 *
 *  \param[in] CDCInterfaceInfo  Pointer to the CDC class interface configuration structure being referenced
 */
void EVENT_CDC_Device_ControLineStateChanged(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
	bool CurrentDTRState = (CDCInterfaceInfo->State.ControlLineStates.HostToDevice & CDC_CONTROL_LINE_OUT_DTR);
 284:	fc 01       	movw	r30, r24
 286:	85 85       	ldd	r24, Z+13	; 0x0d
 288:	28 2f       	mov	r18, r24
 28a:	30 e0       	ldi	r19, 0x00	; 0
 28c:	21 70       	andi	r18, 0x01	; 1
 28e:	30 70       	andi	r19, 0x00	; 0
 290:	92 2f       	mov	r25, r18

	/* Check if the DTR line has been asserted - if so, start the target AVR's reset pulse */
	if (!(PreviousDTRState) && CurrentDTRState)
 292:	80 91 18 01 	lds	r24, 0x0118
 296:	88 23       	and	r24, r24
 298:	49 f4       	brne	.+18     	; 0x2ac <EVENT_CDC_Device_ControLineStateChanged+0x28>
 29a:	22 23       	and	r18, r18
 29c:	39 f0       	breq	.+14     	; 0x2ac <EVENT_CDC_Device_ControLineStateChanged+0x28>
 29e:	88 b1       	in	r24, 0x08	; 8
 2a0:	8f 73       	andi	r24, 0x3F	; 63
 2a2:	88 b9       	out	0x08, r24	; 8
	{
		LEDs_SetAllLEDs(LEDMASK_BUSY);

		AVR_RESET_LINE_DDR |= AVR_RESET_LINE_MASK;
 2a4:	54 9a       	sbi	0x0a, 4	; 10
		PulseMSRemaining.ResetPulse = AVR_RESET_PULSE_MS;
 2a6:	8a e0       	ldi	r24, 0x0A	; 10
 2a8:	80 93 19 01 	sts	0x0119, r24
	}

	PreviousDTRState = CurrentDTRState;
 2ac:	90 93 18 01 	sts	0x0118, r25
}
 2b0:	08 95       	ret

000002b2 <EVENT_USB_Device_ControlRequest>:
 *  the device from the USB host before passing along unhandled control requests to the library for processing
 *  internally.
 */
void EVENT_USB_Device_ControlRequest(void)
{
	CDC_Device_ProcessControlRequest(&VirtualSerial_CDC_Interface);
 2b2:	81 e0       	ldi	r24, 0x01	; 1
 2b4:	91 e0       	ldi	r25, 0x01	; 1
}
 2b6:	e7 c5       	rjmp	.+3022   	; 0xe86 <CDC_Device_ProcessControlRequest>

000002b8 <EVENT_USB_Device_ConfigurationChanged>:
/** Event handler for the library USB Configuration Changed event. */
void EVENT_USB_Device_ConfigurationChanged(void)
{
	bool ConfigSuccess = true;

	ConfigSuccess &= CDC_Device_ConfigureEndpoints(&VirtualSerial_CDC_Interface);
 2b8:	81 e0       	ldi	r24, 0x01	; 1
 2ba:	91 e0       	ldi	r25, 0x01	; 1
 2bc:	9b d5       	rcall	.+2870   	; 0xdf4 <CDC_Device_ConfigureEndpoints>

	PulseMSRemaining.PingPongLEDPulse = 0;
 2be:	10 92 1c 01 	sts	0x011C, r1

	LEDs_SetAllLEDs(ConfigSuccess ? LEDS_NO_LEDS : LEDMASK_ERROR);
 2c2:	80 fd       	sbrc	r24, 0
 2c4:	02 c0       	rjmp	.+4      	; 0x2ca <EVENT_USB_Device_ConfigurationChanged+0x12>
 2c6:	90 ec       	ldi	r25, 0xC0	; 192
 2c8:	01 c0       	rjmp	.+2      	; 0x2cc <EVENT_USB_Device_ConfigurationChanged+0x14>
 2ca:	90 e0       	ldi	r25, 0x00	; 0
 2cc:	88 b1       	in	r24, 0x08	; 8
 2ce:	90 95       	com	r25
 2d0:	80 6c       	ori	r24, 0xC0	; 192
 2d2:	98 23       	and	r25, r24
 2d4:	98 b9       	out	0x08, r25	; 8
}
 2d6:	08 95       	ret

000002d8 <SetupHardware>:

/** Configures the board hardware and chip peripherals for the demo's functionality. */
void SetupHardware(void)
{
	/* Disable watchdog if enabled by bootloader/fuses */
	MCUSR &= ~(1 << WDRF);
 2d8:	84 b7       	in	r24, 0x34	; 52
 2da:	87 7f       	andi	r24, 0xF7	; 247
 2dc:	84 bf       	out	0x34, r24	; 52
	wdt_disable();
 2de:	88 e1       	ldi	r24, 0x18	; 24
 2e0:	0f b6       	in	r0, 0x3f	; 63
 2e2:	f8 94       	cli
 2e4:	80 93 60 00 	sts	0x0060, r24
 2e8:	10 92 60 00 	sts	0x0060, r1
 2ec:	0f be       	out	0x3f, r0	; 63

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void LEDs_Init(void)
			{
				DDRC  |= LEDS_ALL_LEDS;
 2ee:	87 b1       	in	r24, 0x07	; 7
 2f0:	80 6c       	ori	r24, 0xC0	; 192
 2f2:	87 b9       	out	0x07, r24	; 7
				PORTC |= LEDS_ALL_LEDS;
 2f4:	88 b1       	in	r24, 0x08	; 8
 2f6:	80 6c       	ori	r24, 0xC0	; 192
 2f8:	88 b9       	out	0x08, r24	; 8

	/* Hardware Initialization */
	LEDs_Init();
	USB_Init();
 2fa:	7c d1       	rcall	.+760    	; 0x5f4 <USB_Init>

	/* Millisecond Timer Interrupt */
	OCR0A  = (F_CPU / 64 / 1000);
 2fc:	8d e7       	ldi	r24, 0x7D	; 125
 2fe:	87 bd       	out	0x27, r24	; 39
	TCCR0A = (1 << WGM01);
 300:	82 e0       	ldi	r24, 0x02	; 2
 302:	84 bd       	out	0x24, r24	; 36
	TCCR0B = ((1 << CS01) | (1 << CS00));
 304:	83 e0       	ldi	r24, 0x03	; 3
 306:	85 bd       	out	0x25, r24	; 37

	/* Tristate target /RESET Line */
	AVR_RESET_LINE_PORT &= ~AVR_RESET_LINE_MASK;
 308:	5c 98       	cbi	0x0b, 4	; 11
	AVR_RESET_LINE_DDR  &= ~AVR_RESET_LINE_MASK;
 30a:	54 98       	cbi	0x0a, 4	; 10
}
 30c:	08 95       	ret

0000030e <main>:

/** Main program entry point. This routine contains the overall program flow, including initial
 *  setup of all components and the main program loop.
 */
int main(void)
{
 30e:	df 92       	push	r13
 310:	ef 92       	push	r14
 312:	ff 92       	push	r15
 314:	0f 93       	push	r16
 316:	1f 93       	push	r17
 318:	cf 93       	push	r28
 31a:	df 93       	push	r29
	SetupHardware();
 31c:	dd df       	rcall	.-70     	; 0x2d8 <SetupHardware>
		 *
		 *  \param[out] Buffer  Pointer to a ring buffer structure to initialize
		 */
		static inline void RingBuffer_InitBuffer(RingBuff_t* const Buffer)
		{
			ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
 31e:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
 320:	f8 94       	cli
			{
				Buffer->In  = Buffer->Buffer;
 322:	8d e1       	ldi	r24, 0x1D	; 29
 324:	91 e0       	ldi	r25, 0x01	; 1
 326:	90 93 9e 01 	sts	0x019E, r25
 32a:	80 93 9d 01 	sts	0x019D, r24
				Buffer->Out = Buffer->Buffer;
 32e:	90 93 a0 01 	sts	0x01A0, r25
 332:	80 93 9f 01 	sts	0x019F, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
 336:	2f bf       	out	0x3f, r18	; 63

	RingBuffer_InitBuffer(&Tx_Buffer);

	sei();
 338:	78 94       	sei
		if (!(ReceivedByte < 0) && (UCSR1A & (1 << UDRE1)))
		{
			UDR1 = ReceivedByte;

			LEDs_TurnOnLEDs(LEDMASK_TX);
			PulseMSRemaining.TxLEDPulse = TX_RX_LED_PULSE_MS;
 33a:	0e e1       	ldi	r16, 0x1E	; 30
		static inline RingBuff_Data_t RingBuffer_Remove(RingBuff_t* const Buffer)
		{
			RingBuff_Data_t Data = *Buffer->Out;

			if (++Buffer->Out == &Buffer->Buffer[BUFFER_SIZE])
			  Buffer->Out = Buffer->Buffer;
 33c:	cd e1       	ldi	r28, 0x1D	; 29
 33e:	d1 e0       	ldi	r29, 0x01	; 1

					LEDs_TurnOnLEDs(LEDMASK_RX);
					PulseMSRemaining.RxLEDPulse = TX_RX_LED_PULSE_MS;
				}

				FlushPeriodRemaining = RECEIVE_BUFFER_FLUSH_MS;
 340:	b4 e1       	ldi	r27, 0x14	; 20
 342:	db 2e       	mov	r13, r27
				PORTC = ((PORTC | LEDMask) & ~ActiveMask);
			}

			static inline void LEDs_ToggleLEDs(const uint8_t LEDMask)
			{
				PORTC ^= LEDMask;
 344:	a0 ec       	ldi	r26, 0xC0	; 192
 346:	ea 2e       	mov	r14, r26

			/* Check if the LEDs should be ping-ponging (during enumeration) */
			if (PulseMSRemaining.PingPongLEDPulse && !(--PulseMSRemaining.PingPongLEDPulse))
			{
				LEDs_ToggleLEDs(LEDMASK_TX | LEDMASK_RX);
				PulseMSRemaining.PingPongLEDPulse = PING_PONG_LED_PULSE_MS;
 348:	f4 e6       	ldi	r31, 0x64	; 100
 34a:	ff 2e       	mov	r15, r31
	sei();

	for (;;)
	{
		/* Echo bytes from the host to the target via the hardware USART */
		int16_t ReceivedByte = CDC_Device_ReceiveByte(&VirtualSerial_CDC_Interface);
 34c:	81 e0       	ldi	r24, 0x01	; 1
 34e:	91 e0       	ldi	r25, 0x01	; 1
 350:	c3 d4       	rcall	.+2438   	; 0xcd8 <CDC_Device_ReceiveByte>
 352:	9c 01       	movw	r18, r24
		if (!(ReceivedByte < 0) && (UCSR1A & (1 << UDRE1)))
 354:	97 fd       	sbrc	r25, 7
 356:	09 c0       	rjmp	.+18     	; 0x36a <main+0x5c>
 358:	80 91 c8 00 	lds	r24, 0x00C8
 35c:	85 ff       	sbrs	r24, 5
 35e:	05 c0       	rjmp	.+10     	; 0x36a <main+0x5c>
		{
			UDR1 = ReceivedByte;
 360:	20 93 ce 00 	sts	0x00CE, r18
				PORTC |= LEDS_ALL_LEDS;
			}

			static inline void LEDs_TurnOnLEDs(const uint8_t LEDMask)
			{
				PORTC &= ~LEDMask;
 364:	47 98       	cbi	0x08, 7	; 8

			LEDs_TurnOnLEDs(LEDMASK_TX);
			PulseMSRemaining.TxLEDPulse = TX_RX_LED_PULSE_MS;
 366:	00 93 1a 01 	sts	0x011A, r16
		}

		/* Check if the millisecond timer has elapsed */
		if (TIFR0 & (1 << OCF0A))
 36a:	a9 9b       	sbis	0x15, 1	; 21
 36c:	72 c0       	rjmp	.+228    	; 0x452 <main+0x144>
		{
			/* Check if the reset pulse period has elapsed, if so tristate the target reset line */
			if (PulseMSRemaining.ResetPulse && !(--PulseMSRemaining.ResetPulse))
 36e:	80 91 19 01 	lds	r24, 0x0119
 372:	88 23       	and	r24, r24
 374:	69 f0       	breq	.+26     	; 0x390 <main+0x82>
 376:	80 91 19 01 	lds	r24, 0x0119
 37a:	81 50       	subi	r24, 0x01	; 1
 37c:	80 93 19 01 	sts	0x0119, r24
 380:	80 91 19 01 	lds	r24, 0x0119
 384:	88 23       	and	r24, r24
 386:	21 f4       	brne	.+8      	; 0x390 <main+0x82>
			}

			static inline void LEDs_TurnOffLEDs(const uint8_t LEDMask)
			{
				PORTC |= LEDMask;
 388:	88 b1       	in	r24, 0x08	; 8
 38a:	80 6c       	ori	r24, 0xC0	; 192
 38c:	88 b9       	out	0x08, r24	; 8
			{
				LEDs_TurnOffLEDs(LEDMASK_BUSY);
				AVR_RESET_LINE_DDR &= ~AVR_RESET_LINE_MASK;
 38e:	54 98       	cbi	0x0a, 4	; 10
			}

			/* Check if the LEDs should be ping-ponging (during enumeration) */
			if (PulseMSRemaining.PingPongLEDPulse && !(--PulseMSRemaining.PingPongLEDPulse))
 390:	80 91 1c 01 	lds	r24, 0x011C
 394:	88 23       	and	r24, r24
 396:	71 f0       	breq	.+28     	; 0x3b4 <main+0xa6>
 398:	80 91 1c 01 	lds	r24, 0x011C
 39c:	81 50       	subi	r24, 0x01	; 1
 39e:	80 93 1c 01 	sts	0x011C, r24
 3a2:	80 91 1c 01 	lds	r24, 0x011C
 3a6:	88 23       	and	r24, r24
 3a8:	29 f4       	brne	.+10     	; 0x3b4 <main+0xa6>
				PORTC = ((PORTC | LEDMask) & ~ActiveMask);
			}

			static inline void LEDs_ToggleLEDs(const uint8_t LEDMask)
			{
				PORTC ^= LEDMask;
 3aa:	88 b1       	in	r24, 0x08	; 8
 3ac:	8e 25       	eor	r24, r14
 3ae:	88 b9       	out	0x08, r24	; 8
			{
				LEDs_ToggleLEDs(LEDMASK_TX | LEDMASK_RX);
				PulseMSRemaining.PingPongLEDPulse = PING_PONG_LED_PULSE_MS;
 3b0:	f0 92 1c 01 	sts	0x011C, r15
			}

			/* Turn off TX LED(s) once the TX pulse period has elapsed */
			if (PulseMSRemaining.TxLEDPulse && !(--PulseMSRemaining.TxLEDPulse))
 3b4:	80 91 1a 01 	lds	r24, 0x011A
 3b8:	88 23       	and	r24, r24
 3ba:	51 f0       	breq	.+20     	; 0x3d0 <main+0xc2>
 3bc:	80 91 1a 01 	lds	r24, 0x011A
 3c0:	81 50       	subi	r24, 0x01	; 1
 3c2:	80 93 1a 01 	sts	0x011A, r24
 3c6:	80 91 1a 01 	lds	r24, 0x011A
 3ca:	88 23       	and	r24, r24
 3cc:	09 f4       	brne	.+2      	; 0x3d0 <main+0xc2>
				PORTC &= ~LEDMask;
			}

			static inline void LEDs_TurnOffLEDs(const uint8_t LEDMask)
			{
				PORTC |= LEDMask;
 3ce:	47 9a       	sbi	0x08, 7	; 8
			  LEDs_TurnOffLEDs(LEDMASK_TX);

			/* Turn off RX LED(s) once the RX pulse period has elapsed */
			if (PulseMSRemaining.RxLEDPulse && !(--PulseMSRemaining.RxLEDPulse))
 3d0:	80 91 1b 01 	lds	r24, 0x011B
 3d4:	88 23       	and	r24, r24
 3d6:	51 f0       	breq	.+20     	; 0x3ec <main+0xde>
 3d8:	80 91 1b 01 	lds	r24, 0x011B
 3dc:	81 50       	subi	r24, 0x01	; 1
 3de:	80 93 1b 01 	sts	0x011B, r24
 3e2:	80 91 1b 01 	lds	r24, 0x011B
 3e6:	88 23       	and	r24, r24
 3e8:	09 f4       	brne	.+2      	; 0x3ec <main+0xde>
 3ea:	46 9a       	sbi	0x08, 6	; 8
		 */
		static inline RingBuff_Count_t RingBuffer_GetCount(RingBuff_t* const Buffer)
		{
			RingBuff_Count_t Count;

			ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
 3ec:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
 3ee:	f8 94       	cli
			{
				Count = Buffer->Count;
 3f0:	10 91 a1 01 	lds	r17, 0x01A1
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
 3f4:	8f bf       	out	0x3f, r24	; 63
			  LEDs_TurnOffLEDs(LEDMASK_RX);

			/* Check if the receive buffer flush period has expired */
			RingBuff_Count_t BufferCount = RingBuffer_GetCount(&Tx_Buffer);
			if (!(--FlushPeriodRemaining) || (BufferCount > 200))
 3f6:	80 91 00 01 	lds	r24, 0x0100
 3fa:	81 50       	subi	r24, 0x01	; 1
 3fc:	80 93 00 01 	sts	0x0100, r24
 400:	88 23       	and	r24, r24
 402:	11 f0       	breq	.+4      	; 0x408 <main+0xfa>
 404:	19 3c       	cpi	r17, 0xC9	; 201
 406:	20 f1       	brcs	.+72     	; 0x450 <main+0x142>
			{
				/* Echo bytes from the target to the host via the virtual serial port */
				if (BufferCount)
 408:	11 23       	and	r17, r17
 40a:	01 f1       	breq	.+64     	; 0x44c <main+0x13e>
		 *
		 *  \return Next data element stored in the buffer
		 */
		static inline RingBuff_Data_t RingBuffer_Remove(RingBuff_t* const Buffer)
		{
			RingBuff_Data_t Data = *Buffer->Out;
 40c:	e0 91 9f 01 	lds	r30, 0x019F
 410:	f0 91 a0 01 	lds	r31, 0x01A0
 414:	61 91       	ld	r22, Z+

			if (++Buffer->Out == &Buffer->Buffer[BUFFER_SIZE])
 416:	f0 93 a0 01 	sts	0x01A0, r31
 41a:	e0 93 9f 01 	sts	0x019F, r30
 41e:	ed 59       	subi	r30, 0x9D	; 157
 420:	f1 40       	sbci	r31, 0x01	; 1
 422:	21 f4       	brne	.+8      	; 0x42c <main+0x11e>
			  Buffer->Out = Buffer->Buffer;
 424:	d0 93 a0 01 	sts	0x01A0, r29
 428:	c0 93 9f 01 	sts	0x019F, r28

			ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
 42c:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
 42e:	f8 94       	cli
			{
				Buffer->Count--;
 430:	80 91 a1 01 	lds	r24, 0x01A1
 434:	81 50       	subi	r24, 0x01	; 1
 436:	80 93 a1 01 	sts	0x01A1, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
 43a:	9f bf       	out	0x3f, r25	; 63
				{
					while (BufferCount--)
					  CDC_Device_SendByte(&VirtualSerial_CDC_Interface, RingBuffer_Remove(&Tx_Buffer));
 43c:	81 e0       	ldi	r24, 0x01	; 1
 43e:	91 e0       	ldi	r25, 0x01	; 1
 440:	b4 d4       	rcall	.+2408   	; 0xdaa <CDC_Device_SendByte>
 442:	11 50       	subi	r17, 0x01	; 1
			if (!(--FlushPeriodRemaining) || (BufferCount > 200))
			{
				/* Echo bytes from the target to the host via the virtual serial port */
				if (BufferCount)
				{
					while (BufferCount--)
 444:	19 f7       	brne	.-58     	; 0x40c <main+0xfe>
				PORTC |= LEDS_ALL_LEDS;
			}

			static inline void LEDs_TurnOnLEDs(const uint8_t LEDMask)
			{
				PORTC &= ~LEDMask;
 446:	46 98       	cbi	0x08, 6	; 8
					  CDC_Device_SendByte(&VirtualSerial_CDC_Interface, RingBuffer_Remove(&Tx_Buffer));

					LEDs_TurnOnLEDs(LEDMASK_RX);
					PulseMSRemaining.RxLEDPulse = TX_RX_LED_PULSE_MS;
 448:	00 93 1b 01 	sts	0x011B, r16
				}

				FlushPeriodRemaining = RECEIVE_BUFFER_FLUSH_MS;
 44c:	d0 92 00 01 	sts	0x0100, r13
			}

			/* Clear the millisecond timer CTC flag (cleared by writing logic one to the register) */
			TIFR0 |= (1 << OCF0A);
 450:	a9 9a       	sbi	0x15, 1	; 21
		}

		CDC_Device_USBTask(&VirtualSerial_CDC_Interface);
 452:	81 e0       	ldi	r24, 0x01	; 1
 454:	91 e0       	ldi	r25, 0x01	; 1
 456:	99 d4       	rcall	.+2354   	; 0xd8a <CDC_Device_USBTask>
		USB_USBTask();
 458:	2b d4       	rcall	.+2134   	; 0xcb0 <USB_USBTask>
 45a:	78 cf       	rjmp	.-272    	; 0x34c <main+0x3e>

0000045c <CALLBACK_USB_GetDescriptor>:
 *  USB host.
 */
uint16_t CALLBACK_USB_GetDescriptor(const uint16_t wValue,
                                    const uint8_t wIndex,
                                    const void** const DescriptorAddress)
{
 45c:	da 01       	movw	r26, r20
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
 45e:	92 30       	cpi	r25, 0x02	; 2
 460:	49 f0       	breq	.+18     	; 0x474 <CALLBACK_USB_GetDescriptor+0x18>
 462:	93 30       	cpi	r25, 0x03	; 3
 464:	61 f0       	breq	.+24     	; 0x47e <CALLBACK_USB_GetDescriptor+0x22>
 466:	91 30       	cpi	r25, 0x01	; 1
 468:	f9 f4       	brne	.+62     	; 0x4a8 <CALLBACK_USB_GetDescriptor+0x4c>
 46a:	e8 e9       	ldi	r30, 0x98	; 152
 46c:	f0 e0       	ldi	r31, 0x00	; 0
 46e:	22 e1       	ldi	r18, 0x12	; 18
 470:	30 e0       	ldi	r19, 0x00	; 0
 472:	1e c0       	rjmp	.+60     	; 0x4b0 <CALLBACK_USB_GetDescriptor+0x54>
 474:	ea ea       	ldi	r30, 0xAA	; 170
 476:	f0 e0       	ldi	r31, 0x00	; 0
 478:	2e e3       	ldi	r18, 0x3E	; 62
 47a:	30 e0       	ldi	r19, 0x00	; 0
 47c:	19 c0       	rjmp	.+50     	; 0x4b0 <CALLBACK_USB_GetDescriptor+0x54>
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
			Size    = sizeof(USB_Descriptor_Configuration_t);
			break;
		case DTYPE_String:
			switch (DescriptorNumber)
 47e:	81 30       	cpi	r24, 0x01	; 1
 480:	49 f0       	breq	.+18     	; 0x494 <CALLBACK_USB_GetDescriptor+0x38>
 482:	81 30       	cpi	r24, 0x01	; 1
 484:	18 f0       	brcs	.+6      	; 0x48c <CALLBACK_USB_GetDescriptor+0x30>
 486:	82 30       	cpi	r24, 0x02	; 2
 488:	79 f4       	brne	.+30     	; 0x4a8 <CALLBACK_USB_GetDescriptor+0x4c>
 48a:	08 c0       	rjmp	.+16     	; 0x49c <CALLBACK_USB_GetDescriptor+0x40>
			{
				case 0x00:
					Address = &LanguageString;
					Size    = pgm_read_byte(&LanguageString.Header.Size);
 48c:	e8 ee       	ldi	r30, 0xE8	; 232
 48e:	f0 e0       	ldi	r31, 0x00	; 0
 490:	84 91       	lpm	r24, Z+
 492:	07 c0       	rjmp	.+14     	; 0x4a2 <CALLBACK_USB_GetDescriptor+0x46>
					break;
				case 0x01:
					Address = &ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
 494:	ec ee       	ldi	r30, 0xEC	; 236
 496:	f0 e0       	ldi	r31, 0x00	; 0
 498:	84 91       	lpm	r24, Z+
 49a:	03 c0       	rjmp	.+6      	; 0x4a2 <CALLBACK_USB_GetDescriptor+0x46>
					break;
				case 0x02:
					Address = &ProductString;
					Size    = pgm_read_byte(&ProductString.Header.Size);
 49c:	e6 e0       	ldi	r30, 0x06	; 6
 49e:	f1 e0       	ldi	r31, 0x01	; 1
 4a0:	84 91       	lpm	r24, Z+
 4a2:	28 2f       	mov	r18, r24
 4a4:	30 e0       	ldi	r19, 0x00	; 0
 4a6:	04 c0       	rjmp	.+8      	; 0x4b0 <CALLBACK_USB_GetDescriptor+0x54>
 4a8:	e0 e0       	ldi	r30, 0x00	; 0
 4aa:	f0 e0       	ldi	r31, 0x00	; 0
 4ac:	20 e0       	ldi	r18, 0x00	; 0
 4ae:	30 e0       	ldi	r19, 0x00	; 0
			}

			break;
	}

	*DescriptorAddress = Address;
 4b0:	ed 93       	st	X+, r30
 4b2:	fc 93       	st	X, r31
	return Size;
}
 4b4:	c9 01       	movw	r24, r18
 4b6:	08 95       	ret

000004b8 <Endpoint_ConfigureEndpoint_Prv>:
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 4b8:	80 93 e9 00 	sts	0x00E9, r24
			 *  \note Endpoints must first be configured properly via \ref Endpoint_ConfigureEndpoint().
			 */
			static inline void Endpoint_EnableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_EnableEndpoint(void)
			{
				UECONX |= (1 << EPEN);
 4bc:	80 91 eb 00 	lds	r24, 0x00EB
 4c0:	81 60       	ori	r24, 0x01	; 1
 4c2:	80 93 eb 00 	sts	0x00EB, r24
                                    const uint8_t UECFG1XData)
{
	Endpoint_SelectEndpoint(Number);
	Endpoint_EnableEndpoint();

	UECFG1X = 0;
 4c6:	10 92 ed 00 	sts	0x00ED, r1
	UECFG0X = UECFG0XData;
 4ca:	60 93 ec 00 	sts	0x00EC, r22
	UECFG1X = UECFG1XData;
 4ce:	40 93 ed 00 	sts	0x00ED, r20
			 *  \return Boolean true if the currently selected endpoint has been configured, false otherwise.
			 */
			static inline bool Endpoint_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsConfigured(void)
			{
				return ((UESTA0X & (1 << CFGOK)) ? true : false);
 4d2:	80 91 ee 00 	lds	r24, 0x00EE

	return Endpoint_IsConfigured();
}
 4d6:	88 1f       	adc	r24, r24
 4d8:	88 27       	eor	r24, r24
 4da:	88 1f       	adc	r24, r24
 4dc:	08 95       	ret

000004de <Endpoint_ClearStatusStage>:
	}
}

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
 4de:	80 91 a7 01 	lds	r24, 0x01A7
 4e2:	88 23       	and	r24, r24
 4e4:	9c f4       	brge	.+38     	; 0x50c <__stack+0xd>
 4e6:	04 c0       	rjmp	.+8      	; 0x4f0 <Endpoint_ClearStatusStage+0x12>
	{
		while (!(Endpoint_IsOUTReceived()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
 4e8:	80 91 a6 01 	lds	r24, 0x01A6
 4ec:	88 23       	and	r24, r24
 4ee:	b9 f0       	breq	.+46     	; 0x51e <__stack+0x1f>
			 *  \return Boolean true if current endpoint is has received an OUT packet, false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 4f0:	80 91 e8 00 	lds	r24, 0x00E8

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
	{
		while (!(Endpoint_IsOUTReceived()))
 4f4:	82 ff       	sbrs	r24, 2
 4f6:	f8 cf       	rjmp	.-16     	; 0x4e8 <Endpoint_ClearStatusStage+0xa>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 4f8:	80 91 e8 00 	lds	r24, 0x00E8
 4fc:	8b 77       	andi	r24, 0x7B	; 123
 4fe:	80 93 e8 00 	sts	0x00E8, r24
 502:	08 95       	ret
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
 504:	80 91 a6 01 	lds	r24, 0x01A6
 508:	88 23       	and	r24, r24
 50a:	49 f0       	breq	.+18     	; 0x51e <__stack+0x1f>
			 *  \return Boolean true if the current endpoint is ready for an IN packet, false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 50c:	80 91 e8 00 	lds	r24, 0x00E8

		Endpoint_ClearOUT();
	}
	else
	{
		while (!(Endpoint_IsINReady()))
 510:	80 ff       	sbrs	r24, 0
 512:	f8 cf       	rjmp	.-16     	; 0x504 <__stack+0x5>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 514:	80 91 e8 00 	lds	r24, 0x00E8
 518:	8e 77       	andi	r24, 0x7E	; 126
 51a:	80 93 e8 00 	sts	0x00E8, r24
 51e:	08 95       	ret

00000520 <Endpoint_WaitUntilReady>:
			/** Returns the current USB frame number, when in device mode. Every millisecond the USB bus is active (i.e. enumerated to a host)
			 *  the frame number is incremented by one.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
 520:	40 91 e4 00 	lds	r20, 0x00E4
 524:	50 91 e5 00 	lds	r21, 0x00E5
 528:	24 e6       	ldi	r18, 0x64	; 100
			 *  \return The currently selected endpoint's direction, as a ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & ENDPOINT_DIR_IN);
 52a:	80 91 ec 00 	lds	r24, 0x00EC

	uint16_t PreviousFrameNumber = USB_Device_GetFrameNumber();

	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
 52e:	80 ff       	sbrs	r24, 0
 530:	05 c0       	rjmp	.+10     	; 0x53c <Endpoint_WaitUntilReady+0x1c>
			 *  \return Boolean true if the current endpoint is ready for an IN packet, false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 532:	80 91 e8 00 	lds	r24, 0x00E8
		{
			if (Endpoint_IsINReady())
 536:	80 ff       	sbrs	r24, 0
 538:	05 c0       	rjmp	.+10     	; 0x544 <Endpoint_WaitUntilReady+0x24>
 53a:	22 c0       	rjmp	.+68     	; 0x580 <Endpoint_WaitUntilReady+0x60>
			 *  \return Boolean true if current endpoint is has received an OUT packet, false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 53c:	80 91 e8 00 	lds	r24, 0x00E8
			  return ENDPOINT_READYWAIT_NoError;
		}
		else
		{
			if (Endpoint_IsOUTReceived())
 540:	82 fd       	sbrc	r24, 2
 542:	1e c0       	rjmp	.+60     	; 0x580 <Endpoint_WaitUntilReady+0x60>
			  return ENDPOINT_READYWAIT_NoError;
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;
 544:	80 91 a6 01 	lds	r24, 0x01A6

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
 548:	88 23       	and	r24, r24
 54a:	11 f4       	brne	.+4      	; 0x550 <Endpoint_WaitUntilReady+0x30>
 54c:	82 e0       	ldi	r24, 0x02	; 2
 54e:	08 95       	ret
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
 550:	85 30       	cpi	r24, 0x05	; 5
 552:	11 f4       	brne	.+4      	; 0x558 <Endpoint_WaitUntilReady+0x38>
 554:	83 e0       	ldi	r24, 0x03	; 3
 556:	08 95       	ret
			 *  \return Boolean true if the currently selected endpoint is stalled, false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
 558:	80 91 eb 00 	lds	r24, 0x00EB
		  return ENDPOINT_READYWAIT_BusSuspended;
		else if (Endpoint_IsStalled())
 55c:	85 ff       	sbrs	r24, 5
 55e:	02 c0       	rjmp	.+4      	; 0x564 <Endpoint_WaitUntilReady+0x44>
 560:	81 e0       	ldi	r24, 0x01	; 1
 562:	08 95       	ret
 564:	80 91 e4 00 	lds	r24, 0x00E4
 568:	90 91 e5 00 	lds	r25, 0x00E5
		  return ENDPOINT_READYWAIT_EndpointStalled;

		uint16_t CurrentFrameNumber = USB_Device_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
 56c:	84 17       	cp	r24, r20
 56e:	95 07       	cpc	r25, r21
 570:	e1 f2       	breq	.-72     	; 0x52a <Endpoint_WaitUntilReady+0xa>
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
 572:	22 23       	and	r18, r18
 574:	11 f4       	brne	.+4      	; 0x57a <Endpoint_WaitUntilReady+0x5a>
 576:	84 e0       	ldi	r24, 0x04	; 4
 578:	08 95       	ret
 57a:	21 50       	subi	r18, 0x01	; 1
 57c:	ac 01       	movw	r20, r24
 57e:	d5 cf       	rjmp	.-86     	; 0x52a <Endpoint_WaitUntilReady+0xa>
 580:	80 e0       	ldi	r24, 0x00	; 0
			  return ENDPOINT_READYWAIT_Timeout;
		}
	}
}
 582:	08 95       	ret

00000584 <USB_ResetInterface>:
{
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
 584:	40 d0       	rcall	.+128    	; 0x606 <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
 586:	42 d0       	rcall	.+132    	; 0x60c <USB_INT_ClearAllInterrupts>
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				const uint8_t Temp = USBCON;
 588:	80 91 d8 00 	lds	r24, 0x00D8

				USBCON = (Temp & ~(1 << USBE));
 58c:	98 2f       	mov	r25, r24
 58e:	9f 77       	andi	r25, 0x7F	; 127
 590:	90 93 d8 00 	sts	0x00D8, r25
				USBCON = (Temp |  (1 << USBE));
 594:	80 68       	ori	r24, 0x80	; 128
 596:	80 93 d8 00 	sts	0x00D8, r24

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR  = USB_PLL_PSC;
 59a:	19 bc       	out	0x29, r1	; 41
				PLLCSR |= (1 << PLLE);
 59c:	89 b5       	in	r24, 0x29	; 41
 59e:	82 60       	ori	r24, 0x02	; 2
 5a0:	89 bd       	out	0x29, r24	; 41
		#if defined(USB_SERIES_4_AVR)
		PLLFRQ = ((1 << PLLUSB) | (1 << PDIV3) | (1 << PDIV1));
		#endif

		USB_PLL_On();
		while (!(USB_PLL_IsReady()));
 5a2:	09 b4       	in	r0, 0x29	; 41
 5a4:	00 fe       	sbrs	r0, 0
 5a6:	fd cf       	rjmp	.-6      	; 0x5a2 <USB_ResetInterface+0x1e>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON  &= ~(1 << FRZCLK);
 5a8:	80 91 d8 00 	lds	r24, 0x00D8
 5ac:	8f 7d       	andi	r24, 0xDF	; 223
 5ae:	80 93 d8 00 	sts	0x00D8, r24
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState          = DEVICE_STATE_Unattached;
 5b2:	10 92 a6 01 	sts	0x01A6, r1
	USB_ConfigurationNumber  = 0;
 5b6:	10 92 a4 01 	sts	0x01A4, r1

	#if !defined(NO_DEVICE_REMOTE_WAKEUP)
	USB_RemoteWakeupEnabled  = false;
 5ba:	10 92 a3 01 	sts	0x01A3, r1
	#endif

	#if !defined(NO_DEVICE_SELF_POWER)
	USB_CurrentlySelfPowered = false;
 5be:	10 92 a2 01 	sts	0x01A2, r1
			                                              const uint8_t Type,
			                                              const uint8_t Direction,
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				return Endpoint_ConfigureEndpoint_Prv(Number, (((Type) << EPTYPE0) | (Direction)),
 5c2:	80 e0       	ldi	r24, 0x00	; 0
 5c4:	60 e0       	ldi	r22, 0x00	; 0
 5c6:	42 e0       	ldi	r20, 0x02	; 2
 5c8:	77 df       	rcall	.-274    	; 0x4b8 <Endpoint_ConfigureEndpoint_Prv>

	Endpoint_ConfigureEndpoint(ENDPOINT_CONTROLEP, EP_TYPE_CONTROL,
							   ENDPOINT_DIR_OUT, USB_ControlEndpointSize,
							   ENDPOINT_BANK_SINGLE);

	USB_INT_Clear(USB_INT_SUSPI);
 5ca:	80 91 e1 00 	lds	r24, 0x00E1
 5ce:	8e 7f       	andi	r24, 0xFE	; 254
 5d0:	80 93 e1 00 	sts	0x00E1, r24
	USB_INT_Enable(USB_INT_SUSPI);
 5d4:	80 91 e2 00 	lds	r24, 0x00E2
 5d8:	81 60       	ori	r24, 0x01	; 1
 5da:	80 93 e2 00 	sts	0x00E2, r24
	USB_INT_Enable(USB_INT_EORSTI);
 5de:	80 91 e2 00 	lds	r24, 0x00E2
 5e2:	88 60       	ori	r24, 0x08	; 8
 5e4:	80 93 e2 00 	sts	0x00E2, r24
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
 5e8:	80 91 e0 00 	lds	r24, 0x00E0
 5ec:	8e 7f       	andi	r24, 0xFE	; 254
 5ee:	80 93 e0 00 	sts	0x00E0, r24
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
 5f2:	08 95       	ret

000005f4 <USB_Init>:
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON  |=  (1 << UVREGE);
			#else
				REGCR   &= ~(1 << REGDIS);
 5f4:	e3 e6       	ldi	r30, 0x63	; 99
 5f6:	f0 e0       	ldi	r31, 0x00	; 0
 5f8:	80 81       	ld	r24, Z
 5fa:	8e 7f       	andi	r24, 0xFE	; 254
 5fc:	80 83       	st	Z, r24
	{
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
 5fe:	81 e0       	ldi	r24, 0x01	; 1
 600:	80 93 a5 01 	sts	0x01A5, r24

	USB_ResetInterface();
}
 604:	bf cf       	rjmp	.-130    	; 0x584 <USB_ResetInterface>

00000606 <USB_INT_DisableAllInterrupts>:
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
 606:	10 92 e2 00 	sts	0x00E2, r1
	#endif
}
 60a:	08 95       	ret

0000060c <USB_INT_ClearAllInterrupts>:
	#if defined(USB_CAN_BE_HOST)
	UHINT   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT   = 0;
 60c:	10 92 e1 00 	sts	0x00E1, r1
	#endif
}
 610:	08 95       	ret

00000612 <__vector_12>:
	#endif
}

#if defined(INTERRUPT_CONTROL_ENDPOINT) && defined(USB_CAN_BE_DEVICE)
ISR(USB_COM_vect, ISR_BLOCK)
{
 612:	1f 92       	push	r1
 614:	0f 92       	push	r0
 616:	0f b6       	in	r0, 0x3f	; 63
 618:	0f 92       	push	r0
 61a:	11 24       	eor	r1, r1
 61c:	1f 93       	push	r17
 61e:	2f 93       	push	r18
 620:	3f 93       	push	r19
 622:	4f 93       	push	r20
 624:	5f 93       	push	r21
 626:	6f 93       	push	r22
 628:	7f 93       	push	r23
 62a:	8f 93       	push	r24
 62c:	9f 93       	push	r25
 62e:	af 93       	push	r26
 630:	bf 93       	push	r27
 632:	ef 93       	push	r30
 634:	ff 93       	push	r31
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return (UENUM & ENDPOINT_EPNUM_MASK);
 636:	e9 ee       	ldi	r30, 0xE9	; 233
 638:	f0 e0       	ldi	r31, 0x00	; 0
 63a:	10 81       	ld	r17, Z
 63c:	17 70       	andi	r17, 0x07	; 7
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 63e:	10 82       	st	Z, r1
	uint8_t PrevSelectedEndpoint = Endpoint_GetCurrentEndpoint();

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Disable(USB_INT_RXSTPI);
 640:	e0 ef       	ldi	r30, 0xF0	; 240
 642:	f0 e0       	ldi	r31, 0x00	; 0
 644:	80 81       	ld	r24, Z
 646:	87 7f       	andi	r24, 0xF7	; 247
 648:	80 83       	st	Z, r24

#if !defined(__DOXYGEN__)
/* Internal helper functions. */
static __inline__ uint8_t __iSeiRetVal(void)
{
    sei();
 64a:	78 94       	sei

	NONATOMIC_BLOCK(NONATOMIC_FORCEOFF)
	{
		USB_Device_ProcessControlRequest();
 64c:	c8 d0       	rcall	.+400    	; 0x7de <USB_Device_ProcessControlRequest>
    (void)__s;
}

static __inline__ void __iCliParam(const uint8_t *__s)
{
    cli();
 64e:	f8 94       	cli
 650:	a9 ee       	ldi	r26, 0xE9	; 233
 652:	b0 e0       	ldi	r27, 0x00	; 0
 654:	1c 92       	st	X, r1
	}

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Enable(USB_INT_RXSTPI);
 656:	e0 ef       	ldi	r30, 0xF0	; 240
 658:	f0 e0       	ldi	r31, 0x00	; 0
 65a:	80 81       	ld	r24, Z
 65c:	88 60       	ori	r24, 0x08	; 8
 65e:	80 83       	st	Z, r24
 660:	1c 93       	st	X, r17
	Endpoint_SelectEndpoint(PrevSelectedEndpoint);
}
 662:	ff 91       	pop	r31
 664:	ef 91       	pop	r30
 666:	bf 91       	pop	r27
 668:	af 91       	pop	r26
 66a:	9f 91       	pop	r25
 66c:	8f 91       	pop	r24
 66e:	7f 91       	pop	r23
 670:	6f 91       	pop	r22
 672:	5f 91       	pop	r21
 674:	4f 91       	pop	r20
 676:	3f 91       	pop	r19
 678:	2f 91       	pop	r18
 67a:	1f 91       	pop	r17
 67c:	0f 90       	pop	r0
 67e:	0f be       	out	0x3f, r0	; 63
 680:	0f 90       	pop	r0
 682:	1f 90       	pop	r1
 684:	18 95       	reti

00000686 <__vector_11>:
	UDINT   = 0;
	#endif
}

ISR(USB_GEN_vect, ISR_BLOCK)
{
 686:	1f 92       	push	r1
 688:	0f 92       	push	r0
 68a:	0f b6       	in	r0, 0x3f	; 63
 68c:	0f 92       	push	r0
 68e:	11 24       	eor	r1, r1
 690:	2f 93       	push	r18
 692:	3f 93       	push	r19
 694:	4f 93       	push	r20
 696:	5f 93       	push	r21
 698:	6f 93       	push	r22
 69a:	7f 93       	push	r23
 69c:	8f 93       	push	r24
 69e:	9f 93       	push	r25
 6a0:	af 93       	push	r26
 6a2:	bf 93       	push	r27
 6a4:	ef 93       	push	r30
 6a6:	ff 93       	push	r31
			EVENT_USB_Device_Disconnect();
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
 6a8:	80 91 e1 00 	lds	r24, 0x00E1
 6ac:	80 ff       	sbrs	r24, 0
 6ae:	1c c0       	rjmp	.+56     	; 0x6e8 <__vector_11+0x62>
 6b0:	80 91 e2 00 	lds	r24, 0x00E2
 6b4:	80 ff       	sbrs	r24, 0
 6b6:	18 c0       	rjmp	.+48     	; 0x6e8 <__vector_11+0x62>
	{
		USB_INT_Clear(USB_INT_SUSPI);
 6b8:	80 91 e1 00 	lds	r24, 0x00E1
 6bc:	8e 7f       	andi	r24, 0xFE	; 254
 6be:	80 93 e1 00 	sts	0x00E1, r24

		USB_INT_Disable(USB_INT_SUSPI);
 6c2:	80 91 e2 00 	lds	r24, 0x00E2
 6c6:	8e 7f       	andi	r24, 0xFE	; 254
 6c8:	80 93 e2 00 	sts	0x00E2, r24
		USB_INT_Enable(USB_INT_WAKEUPI);
 6cc:	80 91 e2 00 	lds	r24, 0x00E2
 6d0:	80 61       	ori	r24, 0x10	; 16
 6d2:	80 93 e2 00 	sts	0x00E2, r24
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON  |=  (1 << FRZCLK);
 6d6:	80 91 d8 00 	lds	r24, 0x00D8
 6da:	80 62       	ori	r24, 0x20	; 32
 6dc:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR  = 0;
 6e0:	19 bc       	out	0x29, r1	; 41

		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		  USB_PLL_Off();

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
 6e2:	10 92 a6 01 	sts	0x01A6, r1
		EVENT_USB_Device_Disconnect();
 6e6:	4e dd       	rcall	.-1380   	; 0x184 <EVENT_USB_Device_Disconnect>
		USB_DeviceState = DEVICE_STATE_Suspended;
		EVENT_USB_Device_Suspend();
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
 6e8:	80 91 e1 00 	lds	r24, 0x00E1
 6ec:	84 ff       	sbrs	r24, 4
 6ee:	2d c0       	rjmp	.+90     	; 0x74a <__vector_11+0xc4>
 6f0:	80 91 e2 00 	lds	r24, 0x00E2
 6f4:	84 ff       	sbrs	r24, 4
 6f6:	29 c0       	rjmp	.+82     	; 0x74a <__vector_11+0xc4>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR  = USB_PLL_PSC;
 6f8:	19 bc       	out	0x29, r1	; 41
				PLLCSR |= (1 << PLLE);
 6fa:	89 b5       	in	r24, 0x29	; 41
 6fc:	82 60       	ori	r24, 0x02	; 2
 6fe:	89 bd       	out	0x29, r24	; 41
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
 700:	09 b4       	in	r0, 0x29	; 41
 702:	00 fe       	sbrs	r0, 0
 704:	fd cf       	rjmp	.-6      	; 0x700 <__vector_11+0x7a>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON  &= ~(1 << FRZCLK);
 706:	80 91 d8 00 	lds	r24, 0x00D8
 70a:	8f 7d       	andi	r24, 0xDF	; 223
 70c:	80 93 d8 00 	sts	0x00D8, r24
		}

		USB_CLK_Unfreeze();

		USB_INT_Clear(USB_INT_WAKEUPI);
 710:	80 91 e1 00 	lds	r24, 0x00E1
 714:	8f 7e       	andi	r24, 0xEF	; 239
 716:	80 93 e1 00 	sts	0x00E1, r24

		USB_INT_Disable(USB_INT_WAKEUPI);
 71a:	80 91 e2 00 	lds	r24, 0x00E2
 71e:	8f 7e       	andi	r24, 0xEF	; 239
 720:	80 93 e2 00 	sts	0x00E2, r24
		USB_INT_Enable(USB_INT_SUSPI);
 724:	80 91 e2 00 	lds	r24, 0x00E2
 728:	81 60       	ori	r24, 0x01	; 1
 72a:	80 93 e2 00 	sts	0x00E2, r24

		if (USB_ConfigurationNumber)
 72e:	80 91 a4 01 	lds	r24, 0x01A4
 732:	88 23       	and	r24, r24
 734:	31 f4       	brne	.+12     	; 0x742 <__vector_11+0xbc>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
 736:	80 91 e3 00 	lds	r24, 0x00E3
		  USB_DeviceState = DEVICE_STATE_Configured;
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
 73a:	87 fd       	sbrc	r24, 7
 73c:	02 c0       	rjmp	.+4      	; 0x742 <__vector_11+0xbc>
 73e:	81 e0       	ldi	r24, 0x01	; 1
 740:	01 c0       	rjmp	.+2      	; 0x744 <__vector_11+0xbe>
 742:	84 e0       	ldi	r24, 0x04	; 4
 744:	80 93 a6 01 	sts	0x01A6, r24

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
 748:	15 dd       	rcall	.-1494   	; 0x174 <EVENT_USB_Device_Connect>
		#else
		EVENT_USB_Device_WakeUp();
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
 74a:	80 91 e1 00 	lds	r24, 0x00E1
 74e:	83 ff       	sbrs	r24, 3
 750:	27 c0       	rjmp	.+78     	; 0x7a0 <__vector_11+0x11a>
 752:	80 91 e2 00 	lds	r24, 0x00E2
 756:	83 ff       	sbrs	r24, 3
 758:	23 c0       	rjmp	.+70     	; 0x7a0 <__vector_11+0x11a>
	{
		USB_INT_Clear(USB_INT_EORSTI);
 75a:	80 91 e1 00 	lds	r24, 0x00E1
 75e:	87 7f       	andi	r24, 0xF7	; 247
 760:	80 93 e1 00 	sts	0x00E1, r24

		USB_DeviceState         = DEVICE_STATE_Default;
 764:	82 e0       	ldi	r24, 0x02	; 2
 766:	80 93 a6 01 	sts	0x01A6, r24
		USB_ConfigurationNumber = 0;
 76a:	10 92 a4 01 	sts	0x01A4, r1

		USB_INT_Clear(USB_INT_SUSPI);
 76e:	80 91 e1 00 	lds	r24, 0x00E1
 772:	8e 7f       	andi	r24, 0xFE	; 254
 774:	80 93 e1 00 	sts	0x00E1, r24
		USB_INT_Disable(USB_INT_SUSPI);
 778:	80 91 e2 00 	lds	r24, 0x00E2
 77c:	8e 7f       	andi	r24, 0xFE	; 254
 77e:	80 93 e2 00 	sts	0x00E2, r24
		USB_INT_Enable(USB_INT_WAKEUPI);
 782:	80 91 e2 00 	lds	r24, 0x00E2
 786:	80 61       	ori	r24, 0x10	; 16
 788:	80 93 e2 00 	sts	0x00E2, r24
			                                              const uint8_t Type,
			                                              const uint8_t Direction,
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				return Endpoint_ConfigureEndpoint_Prv(Number, (((Type) << EPTYPE0) | (Direction)),
 78c:	80 e0       	ldi	r24, 0x00	; 0
 78e:	60 e0       	ldi	r22, 0x00	; 0
 790:	42 e0       	ldi	r20, 0x02	; 2
 792:	92 de       	rcall	.-732    	; 0x4b8 <Endpoint_ConfigureEndpoint_Prv>
		Endpoint_ConfigureEndpoint(ENDPOINT_CONTROLEP, EP_TYPE_CONTROL,
		                           ENDPOINT_DIR_OUT, USB_ControlEndpointSize,
		                           ENDPOINT_BANK_SINGLE);

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
 794:	80 91 f0 00 	lds	r24, 0x00F0
 798:	88 60       	ori	r24, 0x08	; 8
 79a:	80 93 f0 00 	sts	0x00F0, r24
		#endif

		EVENT_USB_Device_Reset();
 79e:	8b d1       	rcall	.+790    	; 0xab6 <USB_Event_Stub>
	}

	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
 7a0:	80 91 e1 00 	lds	r24, 0x00E1
 7a4:	82 ff       	sbrs	r24, 2
 7a6:	0a c0       	rjmp	.+20     	; 0x7bc <__vector_11+0x136>
 7a8:	80 91 e2 00 	lds	r24, 0x00E2
 7ac:	82 ff       	sbrs	r24, 2
 7ae:	06 c0       	rjmp	.+12     	; 0x7bc <__vector_11+0x136>
	{
		USB_INT_Clear(USB_INT_SOFI);
 7b0:	80 91 e1 00 	lds	r24, 0x00E1
 7b4:	8b 7f       	andi	r24, 0xFB	; 251
 7b6:	80 93 e1 00 	sts	0x00E1, r24

		EVENT_USB_Device_StartOfFrame();
 7ba:	7d d1       	rcall	.+762    	; 0xab6 <USB_Event_Stub>
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
 7bc:	ff 91       	pop	r31
 7be:	ef 91       	pop	r30
 7c0:	bf 91       	pop	r27
 7c2:	af 91       	pop	r26
 7c4:	9f 91       	pop	r25
 7c6:	8f 91       	pop	r24
 7c8:	7f 91       	pop	r23
 7ca:	6f 91       	pop	r22
 7cc:	5f 91       	pop	r21
 7ce:	4f 91       	pop	r20
 7d0:	3f 91       	pop	r19
 7d2:	2f 91       	pop	r18
 7d4:	0f 90       	pop	r0
 7d6:	0f be       	out	0x3f, r0	; 63
 7d8:	0f 90       	pop	r0
 7da:	1f 90       	pop	r1
 7dc:	18 95       	reti

000007de <USB_Device_ProcessControlRequest>:
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
 7de:	0f 93       	push	r16
 7e0:	1f 93       	push	r17
 7e2:	df 93       	push	r29
 7e4:	cf 93       	push	r28
 7e6:	cd b7       	in	r28, 0x3d	; 61
 7e8:	de b7       	in	r29, 0x3e	; 62
 7ea:	ac 97       	sbiw	r28, 0x2c	; 44
 7ec:	0f b6       	in	r0, 0x3f	; 63
 7ee:	f8 94       	cli
 7f0:	de bf       	out	0x3e, r29	; 62
 7f2:	0f be       	out	0x3f, r0	; 63
 7f4:	cd bf       	out	0x3d, r28	; 61
 7f6:	e7 ea       	ldi	r30, 0xA7	; 167
 7f8:	f1 e0       	ldi	r31, 0x01	; 1
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_Byte(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_Byte(void)
			{
				return UEDATX;
 7fa:	80 91 f1 00 	lds	r24, 0x00F1
	uint8_t* RequestHeader  = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_Byte();
 7fe:	81 93       	st	Z+, r24

void USB_Device_ProcessControlRequest(void)
{
	uint8_t* RequestHeader  = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
 800:	21 e0       	ldi	r18, 0x01	; 1
 802:	ef 3a       	cpi	r30, 0xAF	; 175
 804:	f2 07       	cpc	r31, r18
 806:	c9 f7       	brne	.-14     	; 0x7fa <USB_Device_ProcessControlRequest+0x1c>
	  *(RequestHeader++) = Endpoint_Read_Byte();

	EVENT_USB_Device_ControlRequest();
 808:	54 dd       	rcall	.-1368   	; 0x2b2 <EVENT_USB_Device_ControlRequest>
			 *  \return Boolean true if the selected endpoint has received a SETUP packet, false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 80a:	80 91 e8 00 	lds	r24, 0x00E8

	if (Endpoint_IsSETUPReceived())
 80e:	83 ff       	sbrs	r24, 3
 810:	39 c1       	rjmp	.+626    	; 0xa84 <USB_Device_ProcessControlRequest+0x2a6>
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
 812:	80 91 a7 01 	lds	r24, 0x01A7

		switch (USB_ControlRequest.bRequest)
 816:	30 91 a8 01 	lds	r19, 0x01A8
 81a:	35 30       	cpi	r19, 0x05	; 5
 81c:	09 f4       	brne	.+2      	; 0x820 <USB_Device_ProcessControlRequest+0x42>
 81e:	87 c0       	rjmp	.+270    	; 0x92e <USB_Device_ProcessControlRequest+0x150>
 820:	36 30       	cpi	r19, 0x06	; 6
 822:	40 f4       	brcc	.+16     	; 0x834 <USB_Device_ProcessControlRequest+0x56>
 824:	31 30       	cpi	r19, 0x01	; 1
 826:	c9 f1       	breq	.+114    	; 0x89a <USB_Device_ProcessControlRequest+0xbc>
 828:	31 30       	cpi	r19, 0x01	; 1
 82a:	70 f0       	brcs	.+28     	; 0x848 <USB_Device_ProcessControlRequest+0x6a>
 82c:	33 30       	cpi	r19, 0x03	; 3
 82e:	09 f0       	breq	.+2      	; 0x832 <USB_Device_ProcessControlRequest+0x54>
 830:	29 c1       	rjmp	.+594    	; 0xa84 <USB_Device_ProcessControlRequest+0x2a6>
 832:	33 c0       	rjmp	.+102    	; 0x89a <USB_Device_ProcessControlRequest+0xbc>
 834:	38 30       	cpi	r19, 0x08	; 8
 836:	09 f4       	brne	.+2      	; 0x83a <USB_Device_ProcessControlRequest+0x5c>
 838:	f7 c0       	rjmp	.+494    	; 0xa28 <USB_Device_ProcessControlRequest+0x24a>
 83a:	39 30       	cpi	r19, 0x09	; 9
 83c:	09 f4       	brne	.+2      	; 0x840 <USB_Device_ProcessControlRequest+0x62>
 83e:	06 c1       	rjmp	.+524    	; 0xa4c <USB_Device_ProcessControlRequest+0x26e>
 840:	36 30       	cpi	r19, 0x06	; 6
 842:	09 f0       	breq	.+2      	; 0x846 <USB_Device_ProcessControlRequest+0x68>
 844:	1f c1       	rjmp	.+574    	; 0xa84 <USB_Device_ProcessControlRequest+0x2a6>
 846:	99 c0       	rjmp	.+306    	; 0x97a <USB_Device_ProcessControlRequest+0x19c>
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
 848:	80 38       	cpi	r24, 0x80	; 128
 84a:	21 f0       	breq	.+8      	; 0x854 <USB_Device_ProcessControlRequest+0x76>
 84c:	82 38       	cpi	r24, 0x82	; 130
 84e:	09 f0       	breq	.+2      	; 0x852 <USB_Device_ProcessControlRequest+0x74>
 850:	19 c1       	rjmp	.+562    	; 0xa84 <USB_Device_ProcessControlRequest+0x2a6>
 852:	08 c0       	rjmp	.+16     	; 0x864 <USB_Device_ProcessControlRequest+0x86>
 854:	90 91 a2 01 	lds	r25, 0x01A2
			if (USB_CurrentlySelfPowered)
			  CurrentStatus |= FEATURE_SELFPOWERED_ENABLED;
			#endif

			#if !defined(NO_DEVICE_REMOTE_WAKEUP)
			if (USB_RemoteWakeupEnabled)
 858:	80 91 a3 01 	lds	r24, 0x01A3
 85c:	88 23       	and	r24, r24
 85e:	99 f0       	breq	.+38     	; 0x886 <USB_Device_ProcessControlRequest+0xa8>
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
 860:	92 60       	ori	r25, 0x02	; 2
 862:	11 c0       	rjmp	.+34     	; 0x886 <USB_Device_ProcessControlRequest+0xa8>
			#endif
			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_ENDPOINT):
			Endpoint_SelectEndpoint((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
 864:	80 91 ab 01 	lds	r24, 0x01AB
 868:	87 70       	andi	r24, 0x07	; 7
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 86a:	80 93 e9 00 	sts	0x00E9, r24
			 *  \return Boolean true if the currently selected endpoint is stalled, false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
 86e:	80 91 eb 00 	lds	r24, 0x00EB

			CurrentStatus = Endpoint_IsStalled();
 872:	90 e0       	ldi	r25, 0x00	; 0
 874:	25 e0       	ldi	r18, 0x05	; 5
 876:	96 95       	lsr	r25
 878:	87 95       	ror	r24
 87a:	2a 95       	dec	r18
 87c:	e1 f7       	brne	.-8      	; 0x876 <USB_Device_ProcessControlRequest+0x98>
 87e:	98 2f       	mov	r25, r24
 880:	91 70       	andi	r25, 0x01	; 1
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 882:	10 92 e9 00 	sts	0x00E9, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 886:	80 91 e8 00 	lds	r24, 0x00E8
 88a:	87 7f       	andi	r24, 0xF7	; 247
 88c:	80 93 e8 00 	sts	0x00E8, r24
			 *  \param[in] Word  Next word to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_Word_LE(const uint16_t Word) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_Word_LE(const uint16_t Word)
			{
				UEDATX = (Word & 0xFF);
 890:	90 93 f1 00 	sts	0x00F1, r25
				UEDATX = (Word >> 8);
 894:	10 92 f1 00 	sts	0x00F1, r1
 898:	d2 c0       	rjmp	.+420    	; 0xa3e <USB_Device_ProcessControlRequest+0x260>
				}

				break;
			case REQ_ClearFeature:
			case REQ_SetFeature:
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
 89a:	88 23       	and	r24, r24
 89c:	19 f0       	breq	.+6      	; 0x8a4 <USB_Device_ProcessControlRequest+0xc6>
 89e:	82 30       	cpi	r24, 0x02	; 2
 8a0:	09 f0       	breq	.+2      	; 0x8a4 <USB_Device_ProcessControlRequest+0xc6>
 8a2:	f0 c0       	rjmp	.+480    	; 0xa84 <USB_Device_ProcessControlRequest+0x2a6>
	Endpoint_ClearStatusStage();
}

static void USB_Device_ClearSetFeature(void)
{
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
 8a4:	90 e0       	ldi	r25, 0x00	; 0
 8a6:	8f 71       	andi	r24, 0x1F	; 31
 8a8:	90 70       	andi	r25, 0x00	; 0
 8aa:	00 97       	sbiw	r24, 0x00	; 0
 8ac:	21 f0       	breq	.+8      	; 0x8b6 <USB_Device_ProcessControlRequest+0xd8>
 8ae:	02 97       	sbiw	r24, 0x02	; 2
 8b0:	09 f0       	breq	.+2      	; 0x8b4 <USB_Device_ProcessControlRequest+0xd6>
 8b2:	e8 c0       	rjmp	.+464    	; 0xa84 <USB_Device_ProcessControlRequest+0x2a6>
 8b4:	0c c0       	rjmp	.+24     	; 0x8ce <USB_Device_ProcessControlRequest+0xf0>
	{
		#if !defined(NO_DEVICE_REMOTE_WAKEUP)
		case REQREC_DEVICE:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
 8b6:	80 91 a9 01 	lds	r24, 0x01A9
 8ba:	81 30       	cpi	r24, 0x01	; 1
 8bc:	09 f0       	breq	.+2      	; 0x8c0 <USB_Device_ProcessControlRequest+0xe2>
 8be:	e2 c0       	rjmp	.+452    	; 0xa84 <USB_Device_ProcessControlRequest+0x2a6>
			  USB_RemoteWakeupEnabled = (USB_ControlRequest.bRequest == REQ_SetFeature);
 8c0:	10 92 a3 01 	sts	0x01A3, r1
 8c4:	33 30       	cpi	r19, 0x03	; 3
 8c6:	69 f5       	brne	.+90     	; 0x922 <USB_Device_ProcessControlRequest+0x144>
 8c8:	80 93 a3 01 	sts	0x01A3, r24
 8cc:	2a c0       	rjmp	.+84     	; 0x922 <USB_Device_ProcessControlRequest+0x144>

			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
 8ce:	80 91 a9 01 	lds	r24, 0x01A9
 8d2:	88 23       	and	r24, r24
 8d4:	31 f5       	brne	.+76     	; 0x922 <USB_Device_ProcessControlRequest+0x144>
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
 8d6:	20 91 ab 01 	lds	r18, 0x01AB
 8da:	27 70       	andi	r18, 0x07	; 7

				if (EndpointIndex == ENDPOINT_CONTROLEP)
 8dc:	09 f4       	brne	.+2      	; 0x8e0 <USB_Device_ProcessControlRequest+0x102>
 8de:	d2 c0       	rjmp	.+420    	; 0xa84 <USB_Device_ProcessControlRequest+0x2a6>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 8e0:	20 93 e9 00 	sts	0x00E9, r18
			 * \return Boolean True if the currently selected endpoint is enabled, false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
 8e4:	80 91 eb 00 	lds	r24, 0x00EB
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
 8e8:	80 ff       	sbrs	r24, 0
 8ea:	1b c0       	rjmp	.+54     	; 0x922 <USB_Device_ProcessControlRequest+0x144>
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
 8ec:	33 30       	cpi	r19, 0x03	; 3
 8ee:	21 f4       	brne	.+8      	; 0x8f8 <USB_Device_ProcessControlRequest+0x11a>
			 *  \ingroup Group_EndpointPacketManagement
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
 8f0:	80 91 eb 00 	lds	r24, 0x00EB
 8f4:	80 62       	ori	r24, 0x20	; 32
 8f6:	13 c0       	rjmp	.+38     	; 0x91e <USB_Device_ProcessControlRequest+0x140>
			 *  \ingroup Group_EndpointPacketManagement
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
 8f8:	80 91 eb 00 	lds	r24, 0x00EB
 8fc:	80 61       	ori	r24, 0x10	; 16
 8fe:	80 93 eb 00 	sts	0x00EB, r24
			 *  \param[in] EndpointNumber Endpoint number whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetFIFO(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetFIFO(const uint8_t EndpointNumber)
			{
				UERST = (1 << EndpointNumber);
 902:	81 e0       	ldi	r24, 0x01	; 1
 904:	90 e0       	ldi	r25, 0x00	; 0
 906:	02 c0       	rjmp	.+4      	; 0x90c <USB_Device_ProcessControlRequest+0x12e>
 908:	88 0f       	add	r24, r24
 90a:	99 1f       	adc	r25, r25
 90c:	2a 95       	dec	r18
 90e:	e2 f7       	brpl	.-8      	; 0x908 <USB_Device_ProcessControlRequest+0x12a>
 910:	80 93 ea 00 	sts	0x00EA, r24
				UERST = 0;
 914:	10 92 ea 00 	sts	0x00EA, r1

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
 918:	80 91 eb 00 	lds	r24, 0x00EB
 91c:	88 60       	ori	r24, 0x08	; 8
 91e:	80 93 eb 00 	sts	0x00EB, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 922:	10 92 e9 00 	sts	0x00E9, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 926:	80 91 e8 00 	lds	r24, 0x00E8
 92a:	87 7f       	andi	r24, 0xF7	; 247
 92c:	8b c0       	rjmp	.+278    	; 0xa44 <USB_Device_ProcessControlRequest+0x266>
					USB_Device_ClearSetFeature();
				}

				break;
			case REQ_SetAddress:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
 92e:	88 23       	and	r24, r24
 930:	09 f0       	breq	.+2      	; 0x934 <USB_Device_ProcessControlRequest+0x156>
 932:	a8 c0       	rjmp	.+336    	; 0xa84 <USB_Device_ProcessControlRequest+0x2a6>
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t DeviceAddress = (USB_ControlRequest.wValue & 0x7F);
 934:	10 91 a9 01 	lds	r17, 0x01A9
 938:	1f 77       	andi	r17, 0x7F	; 127

	ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
 93a:	0f b7       	in	r16, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
 93c:	f8 94       	cli
 93e:	80 91 e8 00 	lds	r24, 0x00E8
 942:	87 7f       	andi	r24, 0xF7	; 247
 944:	80 93 e8 00 	sts	0x00E8, r24
	{
		Endpoint_ClearSETUP();

		Endpoint_ClearStatusStage();
 948:	ca dd       	rcall	.-1132   	; 0x4de <Endpoint_ClearStatusStage>
			 *  \return Boolean true if the current endpoint is ready for an IN packet, false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 94a:	80 91 e8 00 	lds	r24, 0x00E8

		while (!(Endpoint_IsINReady()));
 94e:	80 ff       	sbrs	r24, 0
 950:	fc cf       	rjmp	.-8      	; 0x94a <USB_Device_ProcessControlRequest+0x16c>

		USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
 952:	11 23       	and	r17, r17
 954:	11 f4       	brne	.+4      	; 0x95a <USB_Device_ProcessControlRequest+0x17c>
 956:	82 e0       	ldi	r24, 0x02	; 2
 958:	01 c0       	rjmp	.+2      	; 0x95c <USB_Device_ProcessControlRequest+0x17e>
 95a:	83 e0       	ldi	r24, 0x03	; 3
 95c:	80 93 a6 01 	sts	0x01A6, r24
			#endif

			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				UDADDR  = ((UDADDR & (1 << ADDEN)) | (Address & 0x7F));
 960:	80 91 e3 00 	lds	r24, 0x00E3
 964:	80 78       	andi	r24, 0x80	; 128
 966:	18 2b       	or	r17, r24
 968:	10 93 e3 00 	sts	0x00E3, r17
				UDADDR |= (1 << ADDEN);
 96c:	80 91 e3 00 	lds	r24, 0x00E3
 970:	80 68       	ori	r24, 0x80	; 128
 972:	80 93 e3 00 	sts	0x00E3, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
 976:	0f bf       	out	0x3f, r16	; 63
    __asm__ volatile ("" ::: "memory");
 978:	85 c0       	rjmp	.+266    	; 0xa84 <USB_Device_ProcessControlRequest+0x2a6>
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_SetAddress();

				break;
			case REQ_GetDescriptor:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
 97a:	80 58       	subi	r24, 0x80	; 128
 97c:	82 30       	cpi	r24, 0x02	; 2
 97e:	08 f0       	brcs	.+2      	; 0x982 <USB_Device_ProcessControlRequest+0x1a4>
 980:	81 c0       	rjmp	.+258    	; 0xa84 <USB_Device_ProcessControlRequest+0x2a6>
	#if !defined(USE_FLASH_DESCRIPTORS) && !defined(USE_EEPROM_DESCRIPTORS) && !defined(USE_RAM_DESCRIPTORS)
	uint8_t DescriptorAddressSpace;
	#endif

	#if !defined(NO_INTERNAL_SERIAL) && (USE_INTERNAL_SERIAL != NO_DESCRIPTOR)
	if (USB_ControlRequest.wValue == ((DTYPE_String << 8) | USE_INTERNAL_SERIAL))
 982:	80 91 a9 01 	lds	r24, 0x01A9
 986:	90 91 aa 01 	lds	r25, 0x01AA
 98a:	23 e0       	ldi	r18, 0x03	; 3
 98c:	8c 3d       	cpi	r24, 0xDC	; 220
 98e:	92 07       	cpc	r25, r18
 990:	99 f5       	brne	.+102    	; 0x9f8 <USB_Device_ProcessControlRequest+0x21a>
	} SignatureDescriptor;

	SignatureDescriptor.Header.Type = DTYPE_String;
	SignatureDescriptor.Header.Size = sizeof(SignatureDescriptor);

	ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
 992:	7f b7       	in	r23, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
 994:	f8 94       	cli
 996:	de 01       	movw	r26, r28
 998:	15 96       	adiw	r26, 0x05	; 5
 99a:	6e e0       	ldi	r22, 0x0E	; 14
 99c:	40 e0       	ldi	r20, 0x00	; 0
 99e:	50 e0       	ldi	r21, 0x00	; 0
	{
		uint8_t SigReadAddress = 0x0E;

		for (uint8_t SerialCharNum = 0; SerialCharNum < 20; SerialCharNum++)
		{
			uint8_t SerialByte = boot_signature_byte_get(SigReadAddress);
 9a0:	11 e2       	ldi	r17, 0x21	; 33
 9a2:	e6 2f       	mov	r30, r22
 9a4:	f0 e0       	ldi	r31, 0x00	; 0
 9a6:	10 93 57 00 	sts	0x0057, r17
 9aa:	84 91       	lpm	r24, Z+

			if (SerialCharNum & 0x01)
 9ac:	40 ff       	sbrs	r20, 0
 9ae:	03 c0       	rjmp	.+6      	; 0x9b6 <USB_Device_ProcessControlRequest+0x1d8>
			{
				SerialByte >>= 4;
 9b0:	82 95       	swap	r24
 9b2:	8f 70       	andi	r24, 0x0F	; 15
				SigReadAddress++;
 9b4:	6f 5f       	subi	r22, 0xFF	; 255
			}

			SerialByte &= 0x0F;
 9b6:	8f 70       	andi	r24, 0x0F	; 15
 9b8:	28 2f       	mov	r18, r24
 9ba:	30 e0       	ldi	r19, 0x00	; 0

			SignatureDescriptor.UnicodeString[SerialCharNum] = (SerialByte >= 10) ?
 9bc:	8a 30       	cpi	r24, 0x0A	; 10
 9be:	18 f0       	brcs	.+6      	; 0x9c6 <USB_Device_ProcessControlRequest+0x1e8>
 9c0:	c9 01       	movw	r24, r18
 9c2:	c7 96       	adiw	r24, 0x37	; 55
 9c4:	02 c0       	rjmp	.+4      	; 0x9ca <USB_Device_ProcessControlRequest+0x1ec>
 9c6:	c9 01       	movw	r24, r18
 9c8:	c0 96       	adiw	r24, 0x30	; 48
 9ca:	8d 93       	st	X+, r24
 9cc:	9d 93       	st	X+, r25
 9ce:	4f 5f       	subi	r20, 0xFF	; 255
 9d0:	5f 4f       	sbci	r21, 0xFF	; 255

	ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
	{
		uint8_t SigReadAddress = 0x0E;

		for (uint8_t SerialCharNum = 0; SerialCharNum < 20; SerialCharNum++)
 9d2:	44 31       	cpi	r20, 0x14	; 20
 9d4:	51 05       	cpc	r21, r1
 9d6:	29 f7       	brne	.-54     	; 0x9a2 <USB_Device_ProcessControlRequest+0x1c4>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
 9d8:	7f bf       	out	0x3f, r23	; 63
		USB_Descriptor_Header_t Header;
		wchar_t                 UnicodeString[20];
	} SignatureDescriptor;

	SignatureDescriptor.Header.Type = DTYPE_String;
	SignatureDescriptor.Header.Size = sizeof(SignatureDescriptor);
 9da:	8a e2       	ldi	r24, 0x2A	; 42
 9dc:	8b 83       	std	Y+3, r24	; 0x03
	{
		USB_Descriptor_Header_t Header;
		wchar_t                 UnicodeString[20];
	} SignatureDescriptor;

	SignatureDescriptor.Header.Type = DTYPE_String;
 9de:	83 e0       	ldi	r24, 0x03	; 3
 9e0:	8c 83       	std	Y+4, r24	; 0x04
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 9e2:	80 91 e8 00 	lds	r24, 0x00E8
 9e6:	87 7f       	andi	r24, 0xF7	; 247
 9e8:	80 93 e8 00 	sts	0x00E8, r24
		}
	}

	Endpoint_ClearSETUP();

	Endpoint_Write_Control_Stream_LE(&SignatureDescriptor, sizeof(SignatureDescriptor));
 9ec:	ce 01       	movw	r24, r28
 9ee:	03 96       	adiw	r24, 0x03	; 3
 9f0:	6a e2       	ldi	r22, 0x2A	; 42
 9f2:	70 e0       	ldi	r23, 0x00	; 0
 9f4:	61 d0       	rcall	.+194    	; 0xab8 <Endpoint_Write_Control_Stream_LE>
 9f6:	12 c0       	rjmp	.+36     	; 0xa1c <USB_Device_ProcessControlRequest+0x23e>
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif

	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
 9f8:	60 91 ab 01 	lds	r22, 0x01AB
 9fc:	ae 01       	movw	r20, r28
 9fe:	4f 5f       	subi	r20, 0xFF	; 255
 a00:	5f 4f       	sbci	r21, 0xFF	; 255
 a02:	2c dd       	rcall	.-1448   	; 0x45c <CALLBACK_USB_GetDescriptor>
 a04:	bc 01       	movw	r22, r24
 a06:	00 97       	sbiw	r24, 0x00	; 0
 a08:	09 f4       	brne	.+2      	; 0xa0c <USB_Device_ProcessControlRequest+0x22e>
 a0a:	3c c0       	rjmp	.+120    	; 0xa84 <USB_Device_ProcessControlRequest+0x2a6>
 a0c:	80 91 e8 00 	lds	r24, 0x00E8
 a10:	87 7f       	andi	r24, 0xF7	; 247
 a12:	80 93 e8 00 	sts	0x00E8, r24
	#if defined(USE_RAM_DESCRIPTORS)
	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_EEPROM_DESCRIPTORS)
	Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_FLASH_DESCRIPTORS)
	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
 a16:	89 81       	ldd	r24, Y+1	; 0x01
 a18:	9a 81       	ldd	r25, Y+2	; 0x02
 a1a:	ac d0       	rcall	.+344    	; 0xb74 <Endpoint_Write_Control_PStream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 a1c:	80 91 e8 00 	lds	r24, 0x00E8
 a20:	8b 77       	andi	r24, 0x7B	; 123
 a22:	80 93 e8 00 	sts	0x00E8, r24
 a26:	2e c0       	rjmp	.+92     	; 0xa84 <USB_Device_ProcessControlRequest+0x2a6>
					USB_Device_GetDescriptor();
				}

				break;
			case REQ_GetConfiguration:
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
 a28:	80 38       	cpi	r24, 0x80	; 128
 a2a:	61 f5       	brne	.+88     	; 0xa84 <USB_Device_ProcessControlRequest+0x2a6>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 a2c:	80 91 e8 00 	lds	r24, 0x00E8
 a30:	87 7f       	andi	r24, 0xF7	; 247
 a32:	80 93 e8 00 	sts	0x00E8, r24

static void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();

	Endpoint_Write_Byte(USB_ConfigurationNumber);
 a36:	80 91 a4 01 	lds	r24, 0x01A4
			 *  \param[in] Byte  Next byte to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_Byte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_Byte(const uint8_t Byte)
			{
				UEDATX = Byte;
 a3a:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 a3e:	80 91 e8 00 	lds	r24, 0x00E8
 a42:	8e 77       	andi	r24, 0x7E	; 126
 a44:	80 93 e8 00 	sts	0x00E8, r24
	Endpoint_ClearIN();

	Endpoint_ClearStatusStage();
 a48:	4a dd       	rcall	.-1388   	; 0x4de <Endpoint_ClearStatusStage>
 a4a:	1c c0       	rjmp	.+56     	; 0xa84 <USB_Device_ProcessControlRequest+0x2a6>
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_GetConfiguration();

				break;
			case REQ_SetConfiguration:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
 a4c:	88 23       	and	r24, r24
 a4e:	d1 f4       	brne	.+52     	; 0xa84 <USB_Device_ProcessControlRequest+0x2a6>
}

static void USB_Device_SetConfiguration(void)
{
	#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
 a50:	90 91 a9 01 	lds	r25, 0x01A9
 a54:	92 30       	cpi	r25, 0x02	; 2
 a56:	b0 f4       	brcc	.+44     	; 0xa84 <USB_Device_ProcessControlRequest+0x2a6>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 a58:	80 91 e8 00 	lds	r24, 0x00E8
 a5c:	87 7f       	andi	r24, 0xF7	; 247
 a5e:	80 93 e8 00 	sts	0x00E8, r24
	}
	#endif

	Endpoint_ClearSETUP();

	USB_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
 a62:	90 93 a4 01 	sts	0x01A4, r25

	Endpoint_ClearStatusStage();
 a66:	3b dd       	rcall	.-1418   	; 0x4de <Endpoint_ClearStatusStage>

	if (USB_ConfigurationNumber)
 a68:	80 91 a4 01 	lds	r24, 0x01A4
 a6c:	88 23       	and	r24, r24
 a6e:	31 f4       	brne	.+12     	; 0xa7c <USB_Device_ProcessControlRequest+0x29e>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
 a70:	80 91 e3 00 	lds	r24, 0x00E3
	  USB_DeviceState = DEVICE_STATE_Configured;
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
 a74:	87 fd       	sbrc	r24, 7
 a76:	02 c0       	rjmp	.+4      	; 0xa7c <USB_Device_ProcessControlRequest+0x29e>
 a78:	81 e0       	ldi	r24, 0x01	; 1
 a7a:	01 c0       	rjmp	.+2      	; 0xa7e <USB_Device_ProcessControlRequest+0x2a0>
 a7c:	84 e0       	ldi	r24, 0x04	; 4
 a7e:	80 93 a6 01 	sts	0x01A6, r24

	EVENT_USB_Device_ConfigurationChanged();
 a82:	1a dc       	rcall	.-1996   	; 0x2b8 <EVENT_USB_Device_ConfigurationChanged>
			 *  \return Boolean true if the selected endpoint has received a SETUP packet, false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 a84:	80 91 e8 00 	lds	r24, 0x00E8

				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
 a88:	83 ff       	sbrs	r24, 3
 a8a:	0a c0       	rjmp	.+20     	; 0xaa0 <USB_Device_ProcessControlRequest+0x2c2>
			 *  \ingroup Group_EndpointPacketManagement
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
 a8c:	80 91 eb 00 	lds	r24, 0x00EB
 a90:	80 62       	ori	r24, 0x20	; 32
 a92:	80 93 eb 00 	sts	0x00EB, r24
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 a96:	80 91 e8 00 	lds	r24, 0x00E8
 a9a:	87 7f       	andi	r24, 0xF7	; 247
 a9c:	80 93 e8 00 	sts	0x00E8, r24
	{
		Endpoint_StallTransaction();
		Endpoint_ClearSETUP();
	}
}
 aa0:	ac 96       	adiw	r28, 0x2c	; 44
 aa2:	0f b6       	in	r0, 0x3f	; 63
 aa4:	f8 94       	cli
 aa6:	de bf       	out	0x3e, r29	; 62
 aa8:	0f be       	out	0x3f, r0	; 63
 aaa:	cd bf       	out	0x3d, r28	; 61
 aac:	cf 91       	pop	r28
 aae:	df 91       	pop	r29
 ab0:	1f 91       	pop	r17
 ab2:	0f 91       	pop	r16
 ab4:	08 95       	ret

00000ab6 <USB_Event_Stub>:
#include "Events.h"

void USB_Event_Stub(void)
{

}
 ab6:	08 95       	ret

00000ab8 <Endpoint_Write_Control_Stream_LE>:
 ab8:	9c 01       	movw	r18, r24
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
 aba:	40 91 ad 01 	lds	r20, 0x01AD
 abe:	50 91 ae 01 	lds	r21, 0x01AE
 ac2:	46 17       	cp	r20, r22
 ac4:	57 07       	cpc	r21, r23
 ac6:	18 f4       	brcc	.+6      	; 0xace <Endpoint_Write_Control_Stream_LE+0x16>
uint8_t TEMPLATE_FUNC_NAME (const void* Buffer,
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
 ac8:	f9 01       	movw	r30, r18
 aca:	90 e0       	ldi	r25, 0x00	; 0
 acc:	3d c0       	rjmp	.+122    	; 0xb48 <Endpoint_Write_Control_Stream_LE+0x90>
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
 ace:	61 15       	cp	r22, r1
 ad0:	71 05       	cpc	r23, r1
 ad2:	11 f0       	breq	.+4      	; 0xad8 <Endpoint_Write_Control_Stream_LE+0x20>
 ad4:	ab 01       	movw	r20, r22
 ad6:	f8 cf       	rjmp	.-16     	; 0xac8 <Endpoint_Write_Control_Stream_LE+0x10>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 ad8:	80 91 e8 00 	lds	r24, 0x00E8
 adc:	8e 77       	andi	r24, 0x7E	; 126
 ade:	80 93 e8 00 	sts	0x00E8, r24
 ae2:	40 e0       	ldi	r20, 0x00	; 0
 ae4:	50 e0       	ldi	r21, 0x00	; 0
 ae6:	f0 cf       	rjmp	.-32     	; 0xac8 <Endpoint_Write_Control_Stream_LE+0x10>
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
 ae8:	80 91 a6 01 	lds	r24, 0x01A6

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
 aec:	88 23       	and	r24, r24
 aee:	f1 f1       	breq	.+124    	; 0xb6c <Endpoint_Write_Control_Stream_LE+0xb4>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
 af0:	85 30       	cpi	r24, 0x05	; 5
 af2:	f1 f1       	breq	.+124    	; 0xb70 <Endpoint_Write_Control_Stream_LE+0xb8>
			 *  \return Boolean true if the selected endpoint has received a SETUP packet, false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 af4:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
 af8:	83 ff       	sbrs	r24, 3
 afa:	02 c0       	rjmp	.+4      	; 0xb00 <Endpoint_Write_Control_Stream_LE+0x48>
 afc:	81 e0       	ldi	r24, 0x01	; 1
 afe:	08 95       	ret
			 *  \return Boolean true if current endpoint is has received an OUT packet, false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 b00:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
 b04:	82 fd       	sbrc	r24, 2
 b06:	2c c0       	rjmp	.+88     	; 0xb60 <Endpoint_Write_Control_Stream_LE+0xa8>
			 *  \return Boolean true if the current endpoint is ready for an IN packet, false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 b08:	80 91 e8 00 	lds	r24, 0x00E8
		  break;

		if (Endpoint_IsINReady())
 b0c:	80 ff       	sbrs	r24, 0
 b0e:	1c c0       	rjmp	.+56     	; 0xb48 <Endpoint_Write_Control_Stream_LE+0x90>
				#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
				#elif defined(USB_SERIES_2_AVR)
					return UEBCLX;
 b10:	80 91 f2 00 	lds	r24, 0x00F2
 b14:	28 2f       	mov	r18, r24
 b16:	30 e0       	ldi	r19, 0x00	; 0
 b18:	07 c0       	rjmp	.+14     	; 0xb28 <Endpoint_Write_Control_Stream_LE+0x70>
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_ControlEndpointSize))
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
 b1a:	81 91       	ld	r24, Z+
			 *  \param[in] Byte  Next byte to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_Byte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_Byte(const uint8_t Byte)
			{
				UEDATX = Byte;
 b1c:	80 93 f1 00 	sts	0x00F1, r24
				Length--;
 b20:	41 50       	subi	r20, 0x01	; 1
 b22:	50 40       	sbci	r21, 0x00	; 0
				BytesInEndpoint++;
 b24:	2f 5f       	subi	r18, 0xFF	; 255
 b26:	3f 4f       	sbci	r19, 0xFF	; 255

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_ControlEndpointSize))
 b28:	41 15       	cp	r20, r1
 b2a:	51 05       	cpc	r21, r1
 b2c:	19 f0       	breq	.+6      	; 0xb34 <Endpoint_Write_Control_Stream_LE+0x7c>
 b2e:	28 30       	cpi	r18, 0x08	; 8
 b30:	31 05       	cpc	r19, r1
 b32:	98 f3       	brcs	.-26     	; 0xb1a <Endpoint_Write_Control_Stream_LE+0x62>
				TEMPLATE_TRANSFER_BYTE(DataStream);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_ControlEndpointSize);
 b34:	90 e0       	ldi	r25, 0x00	; 0
 b36:	28 30       	cpi	r18, 0x08	; 8
 b38:	31 05       	cpc	r19, r1
 b3a:	09 f4       	brne	.+2      	; 0xb3e <Endpoint_Write_Control_Stream_LE+0x86>
 b3c:	91 e0       	ldi	r25, 0x01	; 1
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 b3e:	80 91 e8 00 	lds	r24, 0x00E8
 b42:	8e 77       	andi	r24, 0x7E	; 126
 b44:	80 93 e8 00 	sts	0x00E8, r24
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
 b48:	41 15       	cp	r20, r1
 b4a:	51 05       	cpc	r21, r1
 b4c:	69 f6       	brne	.-102    	; 0xae8 <Endpoint_Write_Control_Stream_LE+0x30>
 b4e:	99 23       	and	r25, r25
 b50:	59 f6       	brne	.-106    	; 0xae8 <Endpoint_Write_Control_Stream_LE+0x30>
 b52:	06 c0       	rjmp	.+12     	; 0xb60 <Endpoint_Write_Control_Stream_LE+0xa8>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
 b54:	80 91 a6 01 	lds	r24, 0x01A6

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
 b58:	88 23       	and	r24, r24
 b5a:	41 f0       	breq	.+16     	; 0xb6c <Endpoint_Write_Control_Stream_LE+0xb4>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
 b5c:	85 30       	cpi	r24, 0x05	; 5
 b5e:	41 f0       	breq	.+16     	; 0xb70 <Endpoint_Write_Control_Stream_LE+0xb8>
			 *  \return Boolean true if current endpoint is has received an OUT packet, false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 b60:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
 b64:	82 ff       	sbrs	r24, 2
 b66:	f6 cf       	rjmp	.-20     	; 0xb54 <Endpoint_Write_Control_Stream_LE+0x9c>
 b68:	80 e0       	ldi	r24, 0x00	; 0
 b6a:	08 95       	ret
 b6c:	82 e0       	ldi	r24, 0x02	; 2
 b6e:	08 95       	ret
 b70:	83 e0       	ldi	r24, 0x03	; 3
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
 b72:	08 95       	ret

00000b74 <Endpoint_Write_Control_PStream_LE>:
uint8_t TEMPLATE_FUNC_NAME (const void* Buffer,
                            uint16_t Length)
{
 b74:	9c 01       	movw	r18, r24
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
 b76:	40 91 ad 01 	lds	r20, 0x01AD
 b7a:	50 91 ae 01 	lds	r21, 0x01AE
 b7e:	46 17       	cp	r20, r22
 b80:	57 07       	cpc	r21, r23
 b82:	10 f4       	brcc	.+4      	; 0xb88 <Endpoint_Write_Control_PStream_LE+0x14>
uint8_t TEMPLATE_FUNC_NAME (const void* Buffer,
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
 b84:	60 e0       	ldi	r22, 0x00	; 0
 b86:	3f c0       	rjmp	.+126    	; 0xc06 <Endpoint_Write_Control_PStream_LE+0x92>
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
 b88:	61 15       	cp	r22, r1
 b8a:	71 05       	cpc	r23, r1
 b8c:	11 f0       	breq	.+4      	; 0xb92 <Endpoint_Write_Control_PStream_LE+0x1e>
 b8e:	ab 01       	movw	r20, r22
 b90:	f9 cf       	rjmp	.-14     	; 0xb84 <Endpoint_Write_Control_PStream_LE+0x10>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 b92:	80 91 e8 00 	lds	r24, 0x00E8
 b96:	8e 77       	andi	r24, 0x7E	; 126
 b98:	80 93 e8 00 	sts	0x00E8, r24
 b9c:	40 e0       	ldi	r20, 0x00	; 0
 b9e:	50 e0       	ldi	r21, 0x00	; 0
 ba0:	f1 cf       	rjmp	.-30     	; 0xb84 <Endpoint_Write_Control_PStream_LE+0x10>
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
 ba2:	80 91 a6 01 	lds	r24, 0x01A6

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
 ba6:	88 23       	and	r24, r24
 ba8:	09 f4       	brne	.+2      	; 0xbac <Endpoint_Write_Control_PStream_LE+0x38>
 baa:	3f c0       	rjmp	.+126    	; 0xc2a <Endpoint_Write_Control_PStream_LE+0xb6>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
 bac:	85 30       	cpi	r24, 0x05	; 5
 bae:	09 f4       	brne	.+2      	; 0xbb2 <Endpoint_Write_Control_PStream_LE+0x3e>
 bb0:	3e c0       	rjmp	.+124    	; 0xc2e <Endpoint_Write_Control_PStream_LE+0xba>
			 *  \return Boolean true if the selected endpoint has received a SETUP packet, false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 bb2:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
 bb6:	83 ff       	sbrs	r24, 3
 bb8:	02 c0       	rjmp	.+4      	; 0xbbe <Endpoint_Write_Control_PStream_LE+0x4a>
 bba:	81 e0       	ldi	r24, 0x01	; 1
 bbc:	08 95       	ret
			 *  \return Boolean true if current endpoint is has received an OUT packet, false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 bbe:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
 bc2:	82 fd       	sbrc	r24, 2
 bc4:	2c c0       	rjmp	.+88     	; 0xc1e <Endpoint_Write_Control_PStream_LE+0xaa>
			 *  \return Boolean true if the current endpoint is ready for an IN packet, false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 bc6:	80 91 e8 00 	lds	r24, 0x00E8
		  break;

		if (Endpoint_IsINReady())
 bca:	80 ff       	sbrs	r24, 0
 bcc:	1c c0       	rjmp	.+56     	; 0xc06 <Endpoint_Write_Control_PStream_LE+0x92>
				#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
				#elif defined(USB_SERIES_2_AVR)
					return UEBCLX;
 bce:	80 91 f2 00 	lds	r24, 0x00F2
 bd2:	90 e0       	ldi	r25, 0x00	; 0
 bd4:	09 c0       	rjmp	.+18     	; 0xbe8 <Endpoint_Write_Control_PStream_LE+0x74>
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_ControlEndpointSize))
 bd6:	f9 01       	movw	r30, r18
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
 bd8:	2f 5f       	subi	r18, 0xFF	; 255
 bda:	3f 4f       	sbci	r19, 0xFF	; 255
 bdc:	e4 91       	lpm	r30, Z+
			 *  \param[in] Byte  Next byte to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_Byte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_Byte(const uint8_t Byte)
			{
				UEDATX = Byte;
 bde:	e0 93 f1 00 	sts	0x00F1, r30
				Length--;
 be2:	41 50       	subi	r20, 0x01	; 1
 be4:	50 40       	sbci	r21, 0x00	; 0
				BytesInEndpoint++;
 be6:	01 96       	adiw	r24, 0x01	; 1

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_ControlEndpointSize))
 be8:	41 15       	cp	r20, r1
 bea:	51 05       	cpc	r21, r1
 bec:	19 f0       	breq	.+6      	; 0xbf4 <Endpoint_Write_Control_PStream_LE+0x80>
 bee:	88 30       	cpi	r24, 0x08	; 8
 bf0:	91 05       	cpc	r25, r1
 bf2:	88 f3       	brcs	.-30     	; 0xbd6 <Endpoint_Write_Control_PStream_LE+0x62>
				TEMPLATE_TRANSFER_BYTE(DataStream);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_ControlEndpointSize);
 bf4:	60 e0       	ldi	r22, 0x00	; 0
 bf6:	08 97       	sbiw	r24, 0x08	; 8
 bf8:	09 f4       	brne	.+2      	; 0xbfc <Endpoint_Write_Control_PStream_LE+0x88>
 bfa:	61 e0       	ldi	r22, 0x01	; 1
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 bfc:	80 91 e8 00 	lds	r24, 0x00E8
 c00:	8e 77       	andi	r24, 0x7E	; 126
 c02:	80 93 e8 00 	sts	0x00E8, r24
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
 c06:	41 15       	cp	r20, r1
 c08:	51 05       	cpc	r21, r1
 c0a:	59 f6       	brne	.-106    	; 0xba2 <Endpoint_Write_Control_PStream_LE+0x2e>
 c0c:	66 23       	and	r22, r22
 c0e:	49 f6       	brne	.-110    	; 0xba2 <Endpoint_Write_Control_PStream_LE+0x2e>
 c10:	06 c0       	rjmp	.+12     	; 0xc1e <Endpoint_Write_Control_PStream_LE+0xaa>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
 c12:	80 91 a6 01 	lds	r24, 0x01A6

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
 c16:	88 23       	and	r24, r24
 c18:	41 f0       	breq	.+16     	; 0xc2a <Endpoint_Write_Control_PStream_LE+0xb6>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
 c1a:	85 30       	cpi	r24, 0x05	; 5
 c1c:	41 f0       	breq	.+16     	; 0xc2e <Endpoint_Write_Control_PStream_LE+0xba>
			 *  \return Boolean true if current endpoint is has received an OUT packet, false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 c1e:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
 c22:	82 ff       	sbrs	r24, 2
 c24:	f6 cf       	rjmp	.-20     	; 0xc12 <Endpoint_Write_Control_PStream_LE+0x9e>
 c26:	80 e0       	ldi	r24, 0x00	; 0
 c28:	08 95       	ret
 c2a:	82 e0       	ldi	r24, 0x02	; 2
 c2c:	08 95       	ret
 c2e:	83 e0       	ldi	r24, 0x03	; 3
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
 c30:	08 95       	ret

00000c32 <Endpoint_Read_Control_Stream_LE>:
uint8_t TEMPLATE_FUNC_NAME (void* Buffer,
                            uint16_t Length)
{
 c32:	9c 01       	movw	r18, r24
	uint8_t* DataStream = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));

	if (!(Length))
 c34:	61 15       	cp	r22, r1
 c36:	71 05       	cpc	r23, r1
 c38:	29 f4       	brne	.+10     	; 0xc44 <Endpoint_Read_Control_Stream_LE+0x12>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 c3a:	80 91 e8 00 	lds	r24, 0x00E8
 c3e:	8b 77       	andi	r24, 0x7B	; 123
 c40:	80 93 e8 00 	sts	0x00E8, r24
uint8_t TEMPLATE_FUNC_NAME (void* Buffer,
                            uint16_t Length)
{
	uint8_t* DataStream = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
 c44:	f9 01       	movw	r30, r18
 c46:	20 c0       	rjmp	.+64     	; 0xc88 <Endpoint_Read_Control_Stream_LE+0x56>
	if (!(Length))
	  Endpoint_ClearOUT();

	while (Length)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
 c48:	80 91 a6 01 	lds	r24, 0x01A6

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
 c4c:	88 23       	and	r24, r24
 c4e:	61 f1       	breq	.+88     	; 0xca8 <Endpoint_Read_Control_Stream_LE+0x76>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
 c50:	85 30       	cpi	r24, 0x05	; 5
 c52:	61 f1       	breq	.+88     	; 0xcac <Endpoint_Read_Control_Stream_LE+0x7a>
			 *  \return Boolean true if the selected endpoint has received a SETUP packet, false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 c54:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
 c58:	83 ff       	sbrs	r24, 3
 c5a:	02 c0       	rjmp	.+4      	; 0xc60 <Endpoint_Read_Control_Stream_LE+0x2e>
 c5c:	81 e0       	ldi	r24, 0x01	; 1
 c5e:	08 95       	ret
			 *  \return Boolean true if current endpoint is has received an OUT packet, false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 c60:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;

		if (Endpoint_IsOUTReceived())
 c64:	82 ff       	sbrs	r24, 2
 c66:	f0 cf       	rjmp	.-32     	; 0xc48 <Endpoint_Read_Control_Stream_LE+0x16>
 c68:	06 c0       	rjmp	.+12     	; 0xc76 <Endpoint_Read_Control_Stream_LE+0x44>
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_Byte(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_Byte(void)
			{
				return UEDATX;
 c6a:	80 91 f1 00 	lds	r24, 0x00F1
		{
			while (Length && Endpoint_BytesInEndpoint())
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
 c6e:	81 93       	st	Z+, r24
				Length--;
 c70:	61 50       	subi	r22, 0x01	; 1
 c72:	70 40       	sbci	r23, 0x00	; 0
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;

		if (Endpoint_IsOUTReceived())
		{
			while (Length && Endpoint_BytesInEndpoint())
 c74:	21 f0       	breq	.+8      	; 0xc7e <Endpoint_Read_Control_Stream_LE+0x4c>
				#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
				#elif defined(USB_SERIES_2_AVR)
					return UEBCLX;
 c76:	80 91 f2 00 	lds	r24, 0x00F2
 c7a:	88 23       	and	r24, r24
 c7c:	b1 f7       	brne	.-20     	; 0xc6a <Endpoint_Read_Control_Stream_LE+0x38>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 c7e:	80 91 e8 00 	lds	r24, 0x00E8
 c82:	8b 77       	andi	r24, 0x7B	; 123
 c84:	80 93 e8 00 	sts	0x00E8, r24
	uint8_t* DataStream = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));

	if (!(Length))
	  Endpoint_ClearOUT();

	while (Length)
 c88:	61 15       	cp	r22, r1
 c8a:	71 05       	cpc	r23, r1
 c8c:	e9 f6       	brne	.-70     	; 0xc48 <Endpoint_Read_Control_Stream_LE+0x16>
 c8e:	06 c0       	rjmp	.+12     	; 0xc9c <Endpoint_Read_Control_Stream_LE+0x6a>
		}
	}

	while (!(Endpoint_IsINReady()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
 c90:	80 91 a6 01 	lds	r24, 0x01A6

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
 c94:	88 23       	and	r24, r24
 c96:	41 f0       	breq	.+16     	; 0xca8 <Endpoint_Read_Control_Stream_LE+0x76>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
 c98:	85 30       	cpi	r24, 0x05	; 5
 c9a:	41 f0       	breq	.+16     	; 0xcac <Endpoint_Read_Control_Stream_LE+0x7a>
			 *  \return Boolean true if the current endpoint is ready for an IN packet, false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 c9c:	80 91 e8 00 	lds	r24, 0x00E8

			Endpoint_ClearOUT();
		}
	}

	while (!(Endpoint_IsINReady()))
 ca0:	80 ff       	sbrs	r24, 0
 ca2:	f6 cf       	rjmp	.-20     	; 0xc90 <Endpoint_Read_Control_Stream_LE+0x5e>
 ca4:	80 e0       	ldi	r24, 0x00	; 0
 ca6:	08 95       	ret
 ca8:	82 e0       	ldi	r24, 0x02	; 2
 caa:	08 95       	ret
 cac:	83 e0       	ldi	r24, 0x03	; 3
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
 cae:	08 95       	ret

00000cb0 <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
 cb0:	1f 93       	push	r17
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_DeviceTask(void)
{
	if (USB_DeviceState != DEVICE_STATE_Unattached)
 cb2:	80 91 a6 01 	lds	r24, 0x01A6
 cb6:	88 23       	and	r24, r24
 cb8:	61 f0       	breq	.+24     	; 0xcd2 <USB_USBTask+0x22>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return (UENUM & ENDPOINT_EPNUM_MASK);
 cba:	10 91 e9 00 	lds	r17, 0x00E9
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 cbe:	10 92 e9 00 	sts	0x00E9, r1
			 *  \return Boolean true if the selected endpoint has received a SETUP packet, false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 cc2:	80 91 e8 00 	lds	r24, 0x00E8
	{
		uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();

		Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

		if (Endpoint_IsSETUPReceived())
 cc6:	83 ff       	sbrs	r24, 3
 cc8:	01 c0       	rjmp	.+2      	; 0xccc <USB_USBTask+0x1c>
		  USB_Device_ProcessControlRequest();
 cca:	89 dd       	rcall	.-1262   	; 0x7de <USB_Device_ProcessControlRequest>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return (UENUM & ENDPOINT_EPNUM_MASK);
 ccc:	17 70       	andi	r17, 0x07	; 7
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 cce:	10 93 e9 00 	sts	0x00E9, r17
		if (USB_CurrentMode == USB_MODE_Device)
		  USB_DeviceTask();
		else if (USB_CurrentMode == USB_MODE_Host)
		  USB_HostTask();
	#endif
}
 cd2:	1f 91       	pop	r17
 cd4:	08 95       	ret

00000cd6 <CDC_Device_Event_Stub>:
#include "CDC.h"

void CDC_Device_Event_Stub(void)
{

}
 cd6:	08 95       	ret

00000cd8 <CDC_Device_ReceiveByte>:
		return 0;
	}
}

int16_t CDC_Device_ReceiveByte(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
 cd8:	fc 01       	movw	r30, r24
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
 cda:	80 91 a6 01 	lds	r24, 0x01A6
 cde:	84 30       	cpi	r24, 0x04	; 4
 ce0:	21 f5       	brne	.+72     	; 0xd2a <CDC_Device_ReceiveByte+0x52>
 ce2:	87 85       	ldd	r24, Z+15	; 0x0f
 ce4:	90 89       	ldd	r25, Z+16	; 0x10
 ce6:	a1 89       	ldd	r26, Z+17	; 0x11
 ce8:	b2 89       	ldd	r27, Z+18	; 0x12
 cea:	00 97       	sbiw	r24, 0x00	; 0
 cec:	a1 05       	cpc	r26, r1
 cee:	b1 05       	cpc	r27, r1
 cf0:	e1 f0       	breq	.+56     	; 0xd2a <CDC_Device_ReceiveByte+0x52>
	  return -1;

	int16_t ReceivedByte = -1;

	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataOUTEndpointNumber);
 cf2:	85 81       	ldd	r24, Z+5	; 0x05
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 cf4:	80 93 e9 00 	sts	0x00E9, r24
			 *  \return Boolean true if current endpoint is has received an OUT packet, false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 cf8:	80 91 e8 00 	lds	r24, 0x00E8

	if (Endpoint_IsOUTReceived())
 cfc:	82 ff       	sbrs	r24, 2
 cfe:	15 c0       	rjmp	.+42     	; 0xd2a <CDC_Device_ReceiveByte+0x52>
				#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
				#elif defined(USB_SERIES_2_AVR)
					return UEBCLX;
 d00:	80 91 f2 00 	lds	r24, 0x00F2
	{
		if (Endpoint_BytesInEndpoint())
 d04:	88 23       	and	r24, r24
 d06:	19 f4       	brne	.+6      	; 0xd0e <CDC_Device_ReceiveByte+0x36>
 d08:	2f ef       	ldi	r18, 0xFF	; 255
 d0a:	3f ef       	ldi	r19, 0xFF	; 255
 d0c:	04 c0       	rjmp	.+8      	; 0xd16 <CDC_Device_ReceiveByte+0x3e>
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_Byte(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_Byte(void)
			{
				return UEDATX;
 d0e:	80 91 f1 00 	lds	r24, 0x00F1
		  ReceivedByte = Endpoint_Read_Byte();
 d12:	28 2f       	mov	r18, r24
 d14:	30 e0       	ldi	r19, 0x00	; 0
				#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
				#elif defined(USB_SERIES_2_AVR)
					return UEBCLX;
 d16:	80 91 f2 00 	lds	r24, 0x00F2

		if (!(Endpoint_BytesInEndpoint()))
 d1a:	88 23       	and	r24, r24
 d1c:	41 f4       	brne	.+16     	; 0xd2e <CDC_Device_ReceiveByte+0x56>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 d1e:	80 91 e8 00 	lds	r24, 0x00E8
 d22:	8b 77       	andi	r24, 0x7B	; 123
 d24:	80 93 e8 00 	sts	0x00E8, r24
 d28:	02 c0       	rjmp	.+4      	; 0xd2e <CDC_Device_ReceiveByte+0x56>
 d2a:	2f ef       	ldi	r18, 0xFF	; 255
 d2c:	3f ef       	ldi	r19, 0xFF	; 255
		  Endpoint_ClearOUT();
	}

	return ReceivedByte;
}
 d2e:	c9 01       	movw	r24, r18
 d30:	08 95       	ret

00000d32 <CDC_Device_Flush>:
	Endpoint_Write_Byte(Data);
	return ENDPOINT_READYWAIT_NoError;
}

uint8_t CDC_Device_Flush(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
 d32:	fc 01       	movw	r30, r24
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
 d34:	80 91 a6 01 	lds	r24, 0x01A6
 d38:	84 30       	cpi	r24, 0x04	; 4
 d3a:	11 f5       	brne	.+68     	; 0xd80 <CDC_Device_Flush+0x4e>
 d3c:	87 85       	ldd	r24, Z+15	; 0x0f
 d3e:	90 89       	ldd	r25, Z+16	; 0x10
 d40:	a1 89       	ldd	r26, Z+17	; 0x11
 d42:	b2 89       	ldd	r27, Z+18	; 0x12
 d44:	00 97       	sbiw	r24, 0x00	; 0
 d46:	a1 05       	cpc	r26, r1
 d48:	b1 05       	cpc	r27, r1
 d4a:	d1 f0       	breq	.+52     	; 0xd80 <CDC_Device_Flush+0x4e>
	  return ENDPOINT_RWSTREAM_DeviceDisconnected;

	uint8_t ErrorCode;

	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataINEndpointNumber);
 d4c:	81 81       	ldd	r24, Z+1	; 0x01
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 d4e:	80 93 e9 00 	sts	0x00E9, r24
				#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
				#elif defined(USB_SERIES_2_AVR)
					return UEBCLX;
 d52:	80 91 f2 00 	lds	r24, 0x00F2

	if (!(Endpoint_BytesInEndpoint()))
 d56:	88 23       	and	r24, r24
 d58:	a9 f0       	breq	.+42     	; 0xd84 <CDC_Device_Flush+0x52>
			 *  \return Boolean true if the currently selected endpoint may be read from or written to, depending on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
 d5a:	90 91 e8 00 	lds	r25, 0x00E8
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 d5e:	80 91 e8 00 	lds	r24, 0x00E8
 d62:	8e 77       	andi	r24, 0x7E	; 126
 d64:	80 93 e8 00 	sts	0x00E8, r24

	bool BankFull = !(Endpoint_IsReadWriteAllowed());

	Endpoint_ClearIN();

	if (BankFull)
 d68:	95 fd       	sbrc	r25, 5
 d6a:	0c c0       	rjmp	.+24     	; 0xd84 <CDC_Device_Flush+0x52>
	{
		if ((ErrorCode = Endpoint_WaitUntilReady()) != ENDPOINT_READYWAIT_NoError)
 d6c:	d9 db       	rcall	.-2126   	; 0x520 <Endpoint_WaitUntilReady>
 d6e:	98 2f       	mov	r25, r24
 d70:	88 23       	and	r24, r24
 d72:	49 f4       	brne	.+18     	; 0xd86 <CDC_Device_Flush+0x54>
 d74:	80 91 e8 00 	lds	r24, 0x00E8
 d78:	8e 77       	andi	r24, 0x7E	; 126
 d7a:	80 93 e8 00 	sts	0x00E8, r24
 d7e:	03 c0       	rjmp	.+6      	; 0xd86 <CDC_Device_Flush+0x54>
 d80:	92 e0       	ldi	r25, 0x02	; 2
 d82:	01 c0       	rjmp	.+2      	; 0xd86 <CDC_Device_Flush+0x54>
 d84:	90 e0       	ldi	r25, 0x00	; 0

		Endpoint_ClearIN();
	}

	return ENDPOINT_READYWAIT_NoError;
}
 d86:	89 2f       	mov	r24, r25
 d88:	08 95       	ret

00000d8a <CDC_Device_USBTask>:

	return true;
}

void CDC_Device_USBTask(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
 d8a:	fc 01       	movw	r30, r24
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
 d8c:	80 91 a6 01 	lds	r24, 0x01A6
 d90:	84 30       	cpi	r24, 0x04	; 4
 d92:	51 f4       	brne	.+20     	; 0xda8 <CDC_Device_USBTask+0x1e>
 d94:	87 85       	ldd	r24, Z+15	; 0x0f
 d96:	90 89       	ldd	r25, Z+16	; 0x10
 d98:	a1 89       	ldd	r26, Z+17	; 0x11
 d9a:	b2 89       	ldd	r27, Z+18	; 0x12
 d9c:	00 97       	sbiw	r24, 0x00	; 0
 d9e:	a1 05       	cpc	r26, r1
 da0:	b1 05       	cpc	r27, r1
 da2:	11 f0       	breq	.+4      	; 0xda8 <CDC_Device_USBTask+0x1e>
	  return;

	#if !defined(NO_CLASS_DRIVER_AUTOFLUSH)
	CDC_Device_Flush(CDCInterfaceInfo);
 da4:	cf 01       	movw	r24, r30
 da6:	c5 cf       	rjmp	.-118    	; 0xd32 <CDC_Device_Flush>
 da8:	08 95       	ret

00000daa <CDC_Device_SendByte>:
	return Endpoint_Write_Stream_LE(Data, Length, NO_STREAM_CALLBACK);
}

uint8_t CDC_Device_SendByte(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo,
                            const uint8_t Data)
{
 daa:	1f 93       	push	r17
 dac:	fc 01       	movw	r30, r24
 dae:	16 2f       	mov	r17, r22
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
 db0:	80 91 a6 01 	lds	r24, 0x01A6
 db4:	84 30       	cpi	r24, 0x04	; 4
 db6:	d9 f4       	brne	.+54     	; 0xdee <CDC_Device_SendByte+0x44>
 db8:	87 85       	ldd	r24, Z+15	; 0x0f
 dba:	90 89       	ldd	r25, Z+16	; 0x10
 dbc:	a1 89       	ldd	r26, Z+17	; 0x11
 dbe:	b2 89       	ldd	r27, Z+18	; 0x12
 dc0:	00 97       	sbiw	r24, 0x00	; 0
 dc2:	a1 05       	cpc	r26, r1
 dc4:	b1 05       	cpc	r27, r1
 dc6:	99 f0       	breq	.+38     	; 0xdee <CDC_Device_SendByte+0x44>
	  return ENDPOINT_RWSTREAM_DeviceDisconnected;

	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataINEndpointNumber);
 dc8:	81 81       	ldd	r24, Z+1	; 0x01
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 dca:	80 93 e9 00 	sts	0x00E9, r24
			 *  \return Boolean true if the currently selected endpoint may be read from or written to, depending on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
 dce:	80 91 e8 00 	lds	r24, 0x00E8

	if (!(Endpoint_IsReadWriteAllowed()))
 dd2:	85 fd       	sbrc	r24, 5
 dd4:	08 c0       	rjmp	.+16     	; 0xde6 <CDC_Device_SendByte+0x3c>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 dd6:	80 91 e8 00 	lds	r24, 0x00E8
 dda:	8e 77       	andi	r24, 0x7E	; 126
 ddc:	80 93 e8 00 	sts	0x00E8, r24
	{
		Endpoint_ClearIN();

		uint8_t ErrorCode;

		if ((ErrorCode = Endpoint_WaitUntilReady()) != ENDPOINT_READYWAIT_NoError)
 de0:	9f db       	rcall	.-2242   	; 0x520 <Endpoint_WaitUntilReady>
 de2:	88 23       	and	r24, r24
 de4:	29 f4       	brne	.+10     	; 0xdf0 <CDC_Device_SendByte+0x46>
			 *  \param[in] Byte  Next byte to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_Byte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_Byte(const uint8_t Byte)
			{
				UEDATX = Byte;
 de6:	10 93 f1 00 	sts	0x00F1, r17
 dea:	80 e0       	ldi	r24, 0x00	; 0
 dec:	01 c0       	rjmp	.+2      	; 0xdf0 <CDC_Device_SendByte+0x46>
		  return ErrorCode;
	}

	Endpoint_Write_Byte(Data);
	return ENDPOINT_READYWAIT_NoError;
 dee:	82 e0       	ldi	r24, 0x02	; 2
}
 df0:	1f 91       	pop	r17
 df2:	08 95       	ret

00000df4 <CDC_Device_ConfigureEndpoints>:
			break;
	}
}

bool CDC_Device_ConfigureEndpoints(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
 df4:	1f 93       	push	r17
 df6:	cf 93       	push	r28
 df8:	df 93       	push	r29
 dfa:	ec 01       	movw	r28, r24
	memset(&CDCInterfaceInfo->State, 0x00, sizeof(CDCInterfaceInfo->State));
 dfc:	0d 96       	adiw	r24, 0x0d	; 13
 dfe:	fc 01       	movw	r30, r24
 e00:	89 e0       	ldi	r24, 0x09	; 9
 e02:	df 01       	movw	r26, r30
 e04:	1d 92       	st	X+, r1
 e06:	8a 95       	dec	r24
 e08:	e9 f7       	brne	.-6      	; 0xe04 <CDC_Device_ConfigureEndpoints+0x10>
 e0a:	11 e0       	ldi	r17, 0x01	; 1
		uint16_t Size;
		uint8_t  Type;
		uint8_t  Direction;
		bool     DoubleBanked;

		if (EndpointNum == CDCInterfaceInfo->Config.DataINEndpointNumber)
 e0c:	89 81       	ldd	r24, Y+1	; 0x01
 e0e:	18 17       	cp	r17, r24
 e10:	29 f4       	brne	.+10     	; 0xe1c <CDC_Device_ConfigureEndpoints+0x28>
		{
			Size         = CDCInterfaceInfo->Config.DataINEndpointSize;
 e12:	ea 81       	ldd	r30, Y+2	; 0x02
 e14:	fb 81       	ldd	r31, Y+3	; 0x03
			Direction    = ENDPOINT_DIR_IN;
			Type         = EP_TYPE_BULK;
			DoubleBanked = CDCInterfaceInfo->Config.DataINEndpointDoubleBank;
 e16:	8c 81       	ldd	r24, Y+4	; 0x04
 e18:	62 e0       	ldi	r22, 0x02	; 2
 e1a:	10 c0       	rjmp	.+32     	; 0xe3c <CDC_Device_ConfigureEndpoints+0x48>
		}
		else if (EndpointNum == CDCInterfaceInfo->Config.DataOUTEndpointNumber)
 e1c:	8d 81       	ldd	r24, Y+5	; 0x05
 e1e:	18 17       	cp	r17, r24
 e20:	31 f4       	brne	.+12     	; 0xe2e <CDC_Device_ConfigureEndpoints+0x3a>
		{
			Size         = CDCInterfaceInfo->Config.DataOUTEndpointSize;
 e22:	ee 81       	ldd	r30, Y+6	; 0x06
 e24:	ff 81       	ldd	r31, Y+7	; 0x07
			Direction    = ENDPOINT_DIR_OUT;
			Type         = EP_TYPE_BULK;
			DoubleBanked = CDCInterfaceInfo->Config.DataOUTEndpointDoubleBank;
 e26:	88 85       	ldd	r24, Y+8	; 0x08
 e28:	62 e0       	ldi	r22, 0x02	; 2
 e2a:	30 e0       	ldi	r19, 0x00	; 0
 e2c:	08 c0       	rjmp	.+16     	; 0xe3e <CDC_Device_ConfigureEndpoints+0x4a>
		}
		else if (EndpointNum == CDCInterfaceInfo->Config.NotificationEndpointNumber)
 e2e:	89 85       	ldd	r24, Y+9	; 0x09
 e30:	18 17       	cp	r17, r24
 e32:	09 f5       	brne	.+66     	; 0xe76 <CDC_Device_ConfigureEndpoints+0x82>
		{
			Size         = CDCInterfaceInfo->Config.NotificationEndpointSize;
 e34:	ea 85       	ldd	r30, Y+10	; 0x0a
 e36:	fb 85       	ldd	r31, Y+11	; 0x0b
			Direction    = ENDPOINT_DIR_IN;
			Type         = EP_TYPE_INTERRUPT;
			DoubleBanked = CDCInterfaceInfo->Config.NotificationEndpointDoubleBank;
 e38:	8c 85       	ldd	r24, Y+12	; 0x0c
 e3a:	63 e0       	ldi	r22, 0x03	; 3
 e3c:	31 e0       	ldi	r19, 0x01	; 1
		else
		{
			continue;
		}

		if (!(Endpoint_ConfigureEndpoint(EndpointNum, Type, Direction, Size,
 e3e:	88 23       	and	r24, r24
 e40:	11 f4       	brne	.+4      	; 0xe46 <CDC_Device_ConfigureEndpoints+0x52>
 e42:	40 e0       	ldi	r20, 0x00	; 0
 e44:	01 c0       	rjmp	.+2      	; 0xe48 <CDC_Device_ConfigureEndpoints+0x54>
 e46:	44 e0       	ldi	r20, 0x04	; 4
 e48:	20 e0       	ldi	r18, 0x00	; 0
 e4a:	88 e0       	ldi	r24, 0x08	; 8
 e4c:	90 e0       	ldi	r25, 0x00	; 0
 e4e:	03 c0       	rjmp	.+6      	; 0xe56 <CDC_Device_ConfigureEndpoints+0x62>
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while (CheckBytes < Bytes)
				{
					MaskVal++;
 e50:	2f 5f       	subi	r18, 0xFF	; 255
					CheckBytes <<= 1;
 e52:	88 0f       	add	r24, r24
 e54:	99 1f       	adc	r25, r25
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while (CheckBytes < Bytes)
 e56:	8e 17       	cp	r24, r30
 e58:	9f 07       	cpc	r25, r31
 e5a:	d0 f3       	brcs	.-12     	; 0xe50 <CDC_Device_ConfigureEndpoints+0x5c>
			                                              const uint8_t Type,
			                                              const uint8_t Direction,
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				return Endpoint_ConfigureEndpoint_Prv(Number, (((Type) << EPTYPE0) | (Direction)),
 e5c:	62 95       	swap	r22
 e5e:	66 0f       	add	r22, r22
 e60:	66 0f       	add	r22, r22
 e62:	60 7c       	andi	r22, 0xC0	; 192
 e64:	63 2b       	or	r22, r19
 e66:	42 60       	ori	r20, 0x02	; 2
 e68:	22 95       	swap	r18
 e6a:	20 7f       	andi	r18, 0xF0	; 240
 e6c:	42 2b       	or	r20, r18
 e6e:	81 2f       	mov	r24, r17
 e70:	23 db       	rcall	.-2490   	; 0x4b8 <Endpoint_ConfigureEndpoint_Prv>
 e72:	88 23       	and	r24, r24
 e74:	21 f0       	breq	.+8      	; 0xe7e <CDC_Device_ConfigureEndpoints+0x8a>

bool CDC_Device_ConfigureEndpoints(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
	memset(&CDCInterfaceInfo->State, 0x00, sizeof(CDCInterfaceInfo->State));

	for (uint8_t EndpointNum = 1; EndpointNum < ENDPOINT_TOTAL_ENDPOINTS; EndpointNum++)
 e76:	1f 5f       	subi	r17, 0xFF	; 255
 e78:	15 30       	cpi	r17, 0x05	; 5
 e7a:	41 f6       	brne	.-112    	; 0xe0c <CDC_Device_ConfigureEndpoints+0x18>
 e7c:	81 e0       	ldi	r24, 0x01	; 1
			return false;
		}
	}

	return true;
}
 e7e:	df 91       	pop	r29
 e80:	cf 91       	pop	r28
 e82:	1f 91       	pop	r17
 e84:	08 95       	ret

00000e86 <CDC_Device_ProcessControlRequest>:
{

}

void CDC_Device_ProcessControlRequest(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
 e86:	cf 93       	push	r28
 e88:	df 93       	push	r29
 e8a:	ec 01       	movw	r28, r24
			 *  \return Boolean true if the selected endpoint has received a SETUP packet, false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 e8c:	80 91 e8 00 	lds	r24, 0x00E8
	if (!(Endpoint_IsSETUPReceived()))
 e90:	83 ff       	sbrs	r24, 3
 e92:	63 c0       	rjmp	.+198    	; 0xf5a <CDC_Device_ProcessControlRequest+0xd4>
	  return;

	if (USB_ControlRequest.wIndex != CDCInterfaceInfo->Config.ControlInterfaceNumber)
 e94:	88 81       	ld	r24, Y
 e96:	90 e0       	ldi	r25, 0x00	; 0
 e98:	20 91 ab 01 	lds	r18, 0x01AB
 e9c:	30 91 ac 01 	lds	r19, 0x01AC
 ea0:	28 17       	cp	r18, r24
 ea2:	39 07       	cpc	r19, r25
 ea4:	09 f0       	breq	.+2      	; 0xea8 <CDC_Device_ProcessControlRequest+0x22>
 ea6:	59 c0       	rjmp	.+178    	; 0xf5a <CDC_Device_ProcessControlRequest+0xd4>
	  return;

	switch (USB_ControlRequest.bRequest)
 ea8:	80 91 a8 01 	lds	r24, 0x01A8
 eac:	81 32       	cpi	r24, 0x21	; 33
 eae:	61 f0       	breq	.+24     	; 0xec8 <CDC_Device_ProcessControlRequest+0x42>
 eb0:	82 32       	cpi	r24, 0x22	; 34
 eb2:	20 f4       	brcc	.+8      	; 0xebc <CDC_Device_ProcessControlRequest+0x36>
 eb4:	80 32       	cpi	r24, 0x20	; 32
 eb6:	09 f0       	breq	.+2      	; 0xeba <CDC_Device_ProcessControlRequest+0x34>
 eb8:	50 c0       	rjmp	.+160    	; 0xf5a <CDC_Device_ProcessControlRequest+0xd4>
 eba:	1b c0       	rjmp	.+54     	; 0xef2 <CDC_Device_ProcessControlRequest+0x6c>
 ebc:	82 32       	cpi	r24, 0x22	; 34
 ebe:	79 f1       	breq	.+94     	; 0xf1e <CDC_Device_ProcessControlRequest+0x98>
 ec0:	83 32       	cpi	r24, 0x23	; 35
 ec2:	09 f0       	breq	.+2      	; 0xec6 <CDC_Device_ProcessControlRequest+0x40>
 ec4:	4a c0       	rjmp	.+148    	; 0xf5a <CDC_Device_ProcessControlRequest+0xd4>
 ec6:	3b c0       	rjmp	.+118    	; 0xf3e <CDC_Device_ProcessControlRequest+0xb8>
	{
		case CDC_REQ_GetLineEncoding:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
 ec8:	80 91 a7 01 	lds	r24, 0x01A7
 ecc:	81 3a       	cpi	r24, 0xA1	; 161
 ece:	09 f0       	breq	.+2      	; 0xed2 <CDC_Device_ProcessControlRequest+0x4c>
 ed0:	44 c0       	rjmp	.+136    	; 0xf5a <CDC_Device_ProcessControlRequest+0xd4>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 ed2:	80 91 e8 00 	lds	r24, 0x00E8
 ed6:	87 7f       	andi	r24, 0xF7	; 247
 ed8:	80 93 e8 00 	sts	0x00E8, r24
			{
				Endpoint_ClearSETUP();
				Endpoint_Write_Control_Stream_LE(&CDCInterfaceInfo->State.LineEncoding, sizeof(CDCInterfaceInfo->State.LineEncoding));
 edc:	ce 01       	movw	r24, r28
 ede:	0f 96       	adiw	r24, 0x0f	; 15
 ee0:	67 e0       	ldi	r22, 0x07	; 7
 ee2:	70 e0       	ldi	r23, 0x00	; 0
 ee4:	e9 dd       	rcall	.-1070   	; 0xab8 <Endpoint_Write_Control_Stream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 ee6:	80 91 e8 00 	lds	r24, 0x00E8
 eea:	8b 77       	andi	r24, 0x7B	; 123
 eec:	80 93 e8 00 	sts	0x00E8, r24
 ef0:	34 c0       	rjmp	.+104    	; 0xf5a <CDC_Device_ProcessControlRequest+0xd4>
				Endpoint_ClearOUT();
			}

			break;
		case CDC_REQ_SetLineEncoding:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
 ef2:	80 91 a7 01 	lds	r24, 0x01A7
 ef6:	81 32       	cpi	r24, 0x21	; 33
 ef8:	81 f5       	brne	.+96     	; 0xf5a <CDC_Device_ProcessControlRequest+0xd4>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 efa:	80 91 e8 00 	lds	r24, 0x00E8
 efe:	87 7f       	andi	r24, 0xF7	; 247
 f00:	80 93 e8 00 	sts	0x00E8, r24
			{
				Endpoint_ClearSETUP();
				Endpoint_Read_Control_Stream_LE(&CDCInterfaceInfo->State.LineEncoding, sizeof(CDCInterfaceInfo->State.LineEncoding));
 f04:	ce 01       	movw	r24, r28
 f06:	0f 96       	adiw	r24, 0x0f	; 15
 f08:	67 e0       	ldi	r22, 0x07	; 7
 f0a:	70 e0       	ldi	r23, 0x00	; 0
 f0c:	92 de       	rcall	.-732    	; 0xc32 <Endpoint_Read_Control_Stream_LE>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 f0e:	80 91 e8 00 	lds	r24, 0x00E8
 f12:	8e 77       	andi	r24, 0x7E	; 126
 f14:	80 93 e8 00 	sts	0x00E8, r24
				Endpoint_ClearIN();

				EVENT_CDC_Device_LineEncodingChanged(CDCInterfaceInfo);
 f18:	ce 01       	movw	r24, r28
 f1a:	3a d9       	rcall	.-3468   	; 0x190 <EVENT_CDC_Device_LineEncodingChanged>
 f1c:	1e c0       	rjmp	.+60     	; 0xf5a <CDC_Device_ProcessControlRequest+0xd4>
			}

			break;
		case CDC_REQ_SetControlLineState:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
 f1e:	80 91 a7 01 	lds	r24, 0x01A7
 f22:	81 32       	cpi	r24, 0x21	; 33
 f24:	d1 f4       	brne	.+52     	; 0xf5a <CDC_Device_ProcessControlRequest+0xd4>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 f26:	80 91 e8 00 	lds	r24, 0x00E8
 f2a:	87 7f       	andi	r24, 0xF7	; 247
 f2c:	80 93 e8 00 	sts	0x00E8, r24
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
 f30:	d6 da       	rcall	.-2644   	; 0x4de <Endpoint_ClearStatusStage>

				CDCInterfaceInfo->State.ControlLineStates.HostToDevice = USB_ControlRequest.wValue;
 f32:	80 91 a9 01 	lds	r24, 0x01A9
 f36:	8d 87       	std	Y+13, r24	; 0x0d

				EVENT_CDC_Device_ControLineStateChanged(CDCInterfaceInfo);
 f38:	ce 01       	movw	r24, r28
 f3a:	a4 d9       	rcall	.-3256   	; 0x284 <EVENT_CDC_Device_ControLineStateChanged>
 f3c:	0e c0       	rjmp	.+28     	; 0xf5a <CDC_Device_ProcessControlRequest+0xd4>
			}

			break;
		case CDC_REQ_SendBreak:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
 f3e:	80 91 a7 01 	lds	r24, 0x01A7
 f42:	81 32       	cpi	r24, 0x21	; 33
 f44:	51 f4       	brne	.+20     	; 0xf5a <CDC_Device_ProcessControlRequest+0xd4>
 f46:	80 91 e8 00 	lds	r24, 0x00E8
 f4a:	87 7f       	andi	r24, 0xF7	; 247
 f4c:	80 93 e8 00 	sts	0x00E8, r24
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
 f50:	c6 da       	rcall	.-2676   	; 0x4de <Endpoint_ClearStatusStage>

				EVENT_CDC_Device_BreakSent(CDCInterfaceInfo, (uint8_t)USB_ControlRequest.wValue);
 f52:	ce 01       	movw	r24, r28
 f54:	60 91 a9 01 	lds	r22, 0x01A9
 f58:	be de       	rcall	.-644    	; 0xcd6 <CDC_Device_Event_Stub>
			}

			break;
	}
}
 f5a:	df 91       	pop	r29
 f5c:	cf 91       	pop	r28
 f5e:	08 95       	ret

00000f60 <__udivmodsi4>:
 f60:	a1 e2       	ldi	r26, 0x21	; 33
 f62:	1a 2e       	mov	r1, r26
 f64:	aa 1b       	sub	r26, r26
 f66:	bb 1b       	sub	r27, r27
 f68:	fd 01       	movw	r30, r26
 f6a:	0d c0       	rjmp	.+26     	; 0xf86 <__udivmodsi4_ep>

00000f6c <__udivmodsi4_loop>:
 f6c:	aa 1f       	adc	r26, r26
 f6e:	bb 1f       	adc	r27, r27
 f70:	ee 1f       	adc	r30, r30
 f72:	ff 1f       	adc	r31, r31
 f74:	a2 17       	cp	r26, r18
 f76:	b3 07       	cpc	r27, r19
 f78:	e4 07       	cpc	r30, r20
 f7a:	f5 07       	cpc	r31, r21
 f7c:	20 f0       	brcs	.+8      	; 0xf86 <__udivmodsi4_ep>
 f7e:	a2 1b       	sub	r26, r18
 f80:	b3 0b       	sbc	r27, r19
 f82:	e4 0b       	sbc	r30, r20
 f84:	f5 0b       	sbc	r31, r21

00000f86 <__udivmodsi4_ep>:
 f86:	66 1f       	adc	r22, r22
 f88:	77 1f       	adc	r23, r23
 f8a:	88 1f       	adc	r24, r24
 f8c:	99 1f       	adc	r25, r25
 f8e:	1a 94       	dec	r1
 f90:	69 f7       	brne	.-38     	; 0xf6c <__udivmodsi4_loop>
 f92:	60 95       	com	r22
 f94:	70 95       	com	r23
 f96:	80 95       	com	r24
 f98:	90 95       	com	r25
 f9a:	9b 01       	movw	r18, r22
 f9c:	ac 01       	movw	r20, r24
 f9e:	bd 01       	movw	r22, r26
 fa0:	cf 01       	movw	r24, r30
 fa2:	08 95       	ret

00000fa4 <_exit>:
 fa4:	f8 94       	cli

00000fa6 <__stop_program>:
 fa6:	ff cf       	rjmp	.-2      	; 0xfa6 <__stop_program>
