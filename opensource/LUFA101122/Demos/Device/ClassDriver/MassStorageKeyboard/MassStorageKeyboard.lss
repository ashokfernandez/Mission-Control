
MassStorageKeyboard.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000007a  00800100  00001ee2  00001f76  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001ee2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000017  0080017a  0080017a  00001ff0  2**0
                  ALLOC
  3 .stab         00000b1c  00000000  00000000  00001ff0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000002b1  00000000  00000000  00002b0c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000004d0  00000000  00000000  00002dbd  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000d4f  00000000  00000000  0000328d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00009412  00000000  00000000  00003fdc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00002306  00000000  00000000  0000d3ee  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00007052  00000000  00000000  0000f6f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000740  00000000  00000000  00016748  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00003323  00000000  00000000  00016e88  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000033d0  00000000  00000000  0001a1ab  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000620  00000000  00000000  0001d57b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
 *  \param[in] BufferPtr     Pointer to the data source RAM buffer
 */
void DataflashManager_WriteBlocks_RAM(const uint32_t BlockAddress,
                                      uint16_t TotalBlocks,
                                      uint8_t* BufferPtr)
{
       0:	c4 c0       	rjmp	.+392    	; 0x18a <__ctors_end>

	return Endpoint_IsConfigured();
}

void Endpoint_ClearEndpoints(void)
{
       2:	00 00       	nop
	#if defined(USB_CAN_BE_BOTH)
	USB_CurrentMode = USB_MODE_None;
	#endif

	USB_IsInitialized = false;
}
       4:	e0 c0       	rjmp	.+448    	; 0x1c6 <__bad_interrupt>
uint8_t TEMPLATE_FUNC_NAME (const void* Buffer,
                            uint16_t Length)
{
       6:	00 00       	nop
       8:	de c0       	rjmp	.+444    	; 0x1c6 <__bad_interrupt>
       a:	00 00       	nop
       c:	dc c0       	rjmp	.+440    	; 0x1c6 <__bad_interrupt>
       e:	00 00       	nop
      10:	da c0       	rjmp	.+436    	; 0x1c6 <__bad_interrupt>
      12:	00 00       	nop
      14:	d8 c0       	rjmp	.+432    	; 0x1c6 <__bad_interrupt>
      16:	00 00       	nop
      18:	d6 c0       	rjmp	.+428    	; 0x1c6 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	d4 c0       	rjmp	.+424    	; 0x1c6 <__bad_interrupt>
      1e:	00 00       	nop
      20:	d2 c0       	rjmp	.+420    	; 0x1c6 <__bad_interrupt>
      22:	00 00       	nop
      24:	d0 c0       	rjmp	.+416    	; 0x1c6 <__bad_interrupt>
      26:	00 00       	nop
      28:	b7 c7       	rjmp	.+3950   	; 0xf98 <__vector_10>
      2a:	00 00       	nop
      2c:	77 c7       	rjmp	.+3822   	; 0xf1c <__vector_11>
      2e:	00 00       	nop
      30:	ca c0       	rjmp	.+404    	; 0x1c6 <__bad_interrupt>
      32:	00 00       	nop
      34:	c8 c0       	rjmp	.+400    	; 0x1c6 <__bad_interrupt>
      36:	00 00       	nop
      38:	c6 c0       	rjmp	.+396    	; 0x1c6 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	c4 c0       	rjmp	.+392    	; 0x1c6 <__bad_interrupt>
      3e:	00 00       	nop
      40:	c2 c0       	rjmp	.+388    	; 0x1c6 <__bad_interrupt>
      42:	00 00       	nop
      44:	c0 c0       	rjmp	.+384    	; 0x1c6 <__bad_interrupt>
      46:	00 00       	nop
      48:	be c0       	rjmp	.+380    	; 0x1c6 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	bc c0       	rjmp	.+376    	; 0x1c6 <__bad_interrupt>
      4e:	00 00       	nop
      50:	ba c0       	rjmp	.+372    	; 0x1c6 <__bad_interrupt>
      52:	00 00       	nop
      54:	b8 c0       	rjmp	.+368    	; 0x1c6 <__bad_interrupt>
      56:	00 00       	nop
      58:	b6 c0       	rjmp	.+364    	; 0x1c6 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	b4 c0       	rjmp	.+360    	; 0x1c6 <__bad_interrupt>
      5e:	00 00       	nop
      60:	b2 c0       	rjmp	.+356    	; 0x1c6 <__bad_interrupt>
      62:	00 00       	nop
      64:	b0 c0       	rjmp	.+352    	; 0x1c6 <__bad_interrupt>
      66:	00 00       	nop
      68:	ae c0       	rjmp	.+348    	; 0x1c6 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	ac c0       	rjmp	.+344    	; 0x1c6 <__bad_interrupt>
      6e:	00 00       	nop
      70:	aa c0       	rjmp	.+340    	; 0x1c6 <__bad_interrupt>
      72:	00 00       	nop
      74:	a8 c0       	rjmp	.+336    	; 0x1c6 <__bad_interrupt>
      76:	00 00       	nop
      78:	a6 c0       	rjmp	.+332    	; 0x1c6 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	a4 c0       	rjmp	.+328    	; 0x1c6 <__bad_interrupt>
      7e:	00 00       	nop
      80:	a2 c0       	rjmp	.+324    	; 0x1c6 <__bad_interrupt>
      82:	00 00       	nop
      84:	a0 c0       	rjmp	.+320    	; 0x1c6 <__bad_interrupt>
      86:	00 00       	nop
      88:	9e c0       	rjmp	.+316    	; 0x1c6 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	9c c0       	rjmp	.+312    	; 0x1c6 <__bad_interrupt>
      8e:	00 00       	nop
      90:	9a c0       	rjmp	.+308    	; 0x1c6 <__bad_interrupt>
      92:	00 00       	nop
      94:	98 c0       	rjmp	.+304    	; 0x1c6 <__bad_interrupt>
      96:	00 00       	nop

00000098 <KeyboardReport>:
      98:	05 01 09 06 a1 01 75 01 95 08 05 07 19 e0 29 e7     ......u.......).
      a8:	15 00 25 01 81 02 95 01 75 08 81 03 95 05 75 01     ..%.....u.....u.
      b8:	05 08 19 01 29 05 91 02 95 01 75 03 91 03 95 06     ....).....u.....
      c8:	75 08 15 00 25 65 05 07 19 00 29 65 81 00 c0        u...%e....)e...

000000d7 <DeviceDescriptor>:
      d7:	12 01 10 01 00 00 00 08 eb 03 61 20 01 00 01 02     ..........a ....
      e7:	dc 01                                               ..

000000e9 <ConfigurationDescriptor>:
      e9:	09 02 39 00 02 01 00 80 32 09 04 00 00 02 08 06     ..9.....2.......
      f9:	50 00 07 05 83 02 40 00 01 07 05 04 02 40 00 01     P.....@......@..
     109:	09 04 01 00 01 03 01 01 00 09 21 11 01 00 01 22     ..........!...."
     119:	3f 00 07 05 81 03 08 00 01                          ?........

00000122 <LanguageString>:
     122:	04 03 09 04                                         ....

00000126 <ManufacturerString>:
     126:	18 03 44 00 65 00 61 00 6e 00 20 00 43 00 61 00     ..D.e.a.n. .C.a.
     136:	6d 00 65 00 72 00 61 00 00 00                       m.e.r.a...

00000140 <ProductString>:
     140:	48 03 4c 00 55 00 46 00 41 00 20 00 4d 00 61 00     H.L.U.F.A. .M.a.
     150:	73 00 73 00 20 00 53 00 74 00 6f 00 72 00 61 00     s.s. .S.t.o.r.a.
     160:	67 00 65 00 20 00 61 00 6e 00 64 00 20 00 4b 00     g.e. .a.n.d. .K.
     170:	65 00 79 00 62 00 6f 00 61 00 72 00 64 00 20 00     e.y.b.o.a.r.d. .
     180:	44 00 65 00 6d 00 6f 00 00 00                       D.e.m.o...

0000018a <__ctors_end>:
     18a:	11 24       	eor	r1, r1
     18c:	1f be       	out	0x3f, r1	; 63
     18e:	cf ef       	ldi	r28, 0xFF	; 255
     190:	d0 e2       	ldi	r29, 0x20	; 32
     192:	de bf       	out	0x3e, r29	; 62
     194:	cd bf       	out	0x3d, r28	; 61

00000196 <__do_copy_data>:
     196:	11 e0       	ldi	r17, 0x01	; 1
     198:	a0 e0       	ldi	r26, 0x00	; 0
     19a:	b1 e0       	ldi	r27, 0x01	; 1
     19c:	e2 ee       	ldi	r30, 0xE2	; 226
     19e:	fe e1       	ldi	r31, 0x1E	; 30
     1a0:	00 e0       	ldi	r16, 0x00	; 0
     1a2:	0b bf       	out	0x3b, r16	; 59
     1a4:	02 c0       	rjmp	.+4      	; 0x1aa <__do_copy_data+0x14>
     1a6:	07 90       	elpm	r0, Z+
     1a8:	0d 92       	st	X+, r0
     1aa:	aa 37       	cpi	r26, 0x7A	; 122
     1ac:	b1 07       	cpc	r27, r17
     1ae:	d9 f7       	brne	.-10     	; 0x1a6 <__do_copy_data+0x10>

000001b0 <__do_clear_bss>:
     1b0:	11 e0       	ldi	r17, 0x01	; 1
     1b2:	aa e7       	ldi	r26, 0x7A	; 122
     1b4:	b1 e0       	ldi	r27, 0x01	; 1
     1b6:	01 c0       	rjmp	.+2      	; 0x1ba <.do_clear_bss_start>

000001b8 <.do_clear_bss_loop>:
     1b8:	1d 92       	st	X+, r1

000001ba <.do_clear_bss_start>:
     1ba:	a1 39       	cpi	r26, 0x91	; 145
     1bc:	b1 07       	cpc	r27, r17
     1be:	e1 f7       	brne	.-8      	; 0x1b8 <.do_clear_bss_loop>
     1c0:	cb d0       	rcall	.+406    	; 0x358 <main>
     1c2:	0c 94 6f 0f 	jmp	0x1ede	; 0x1ede <_exit>

000001c6 <__bad_interrupt>:
     1c6:	1c cf       	rjmp	.-456    	; 0x0 <__vectors>

000001c8 <EVENT_USB_Device_Connect>:
				PORTD &= ~LEDMask;
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
			{
				PORTD = ((PORTD & ~LEDS_ALL_LEDS) | LEDMask);
     1c8:	8b b1       	in	r24, 0x0b	; 11
     1ca:	8f 70       	andi	r24, 0x0F	; 15
     1cc:	80 6a       	ori	r24, 0xA0	; 160
     1ce:	8b b9       	out	0x0b, r24	; 11

/** Event handler for the library USB Connection event. */
void EVENT_USB_Device_Connect(void)
{
	LEDs_SetAllLEDs(LEDMASK_USB_ENUMERATING);
}
     1d0:	08 95       	ret

000001d2 <EVENT_USB_Device_Disconnect>:
     1d2:	8b b1       	in	r24, 0x0b	; 11
     1d4:	8f 70       	andi	r24, 0x0F	; 15
     1d6:	80 61       	ori	r24, 0x10	; 16
     1d8:	8b b9       	out	0x0b, r24	; 11

/** Event handler for the library USB Disconnection event. */
void EVENT_USB_Device_Disconnect(void)
{
	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
}
     1da:	08 95       	ret

000001dc <EVENT_USB_Device_StartOfFrame>:
			 *  \param[in,out] HIDInterfaceInfo  Pointer to a structure containing a HID Class configuration and state.
			 */
			static inline void HID_Device_MillisecondElapsed(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo) ATTR_ALWAYS_INLINE ATTR_NON_NULL_PTR_ARG(1);
			static inline void HID_Device_MillisecondElapsed(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
			{
				if (HIDInterfaceInfo->State.IdleMSRemaining)
     1dc:	80 91 42 01 	lds	r24, 0x0142
     1e0:	90 91 43 01 	lds	r25, 0x0143
     1e4:	00 97       	sbiw	r24, 0x00	; 0
     1e6:	29 f0       	breq	.+10     	; 0x1f2 <EVENT_USB_Device_StartOfFrame+0x16>
				  HIDInterfaceInfo->State.IdleMSRemaining--;
     1e8:	01 97       	sbiw	r24, 0x01	; 1
     1ea:	90 93 43 01 	sts	0x0143, r25
     1ee:	80 93 42 01 	sts	0x0142, r24
     1f2:	08 95       	ret

000001f4 <CALLBACK_HID_Device_CreateHIDReport>:
bool CALLBACK_HID_Device_CreateHIDReport(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo,
                                         uint8_t* const ReportID,
                                         const uint8_t ReportType,
                                         void* ReportData,
                                         uint16_t* const ReportSize)
{
     1f4:	0f 93       	push	r16
     1f6:	1f 93       	push	r17
     1f8:	d8 01       	movw	r26, r16
	USB_KeyboardReport_Data_t* KeyboardReport = (USB_KeyboardReport_Data_t*)ReportData;
     1fa:	f9 01       	movw	r30, r18
			}

			static inline uint8_t Joystick_GetStatus(void) ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t Joystick_GetStatus(void)
			{
				return (((uint8_t)~PINB & JOY_BMASK) | (((uint8_t)~PINE & JOY_EMASK) >> 1));
     1fc:	23 b1       	in	r18, 0x03	; 3
     1fe:	8c b1       	in	r24, 0x0c	; 12
     200:	80 95       	com	r24
     202:	90 e0       	ldi	r25, 0x00	; 0
     204:	80 73       	andi	r24, 0x30	; 48
     206:	90 70       	andi	r25, 0x00	; 0
     208:	95 95       	asr	r25
     20a:	87 95       	ror	r24
     20c:	20 95       	com	r18
     20e:	20 7e       	andi	r18, 0xE0	; 224
     210:	28 2b       	or	r18, r24
			}

			static inline uint8_t Buttons_GetStatus(void) ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t Buttons_GetStatus(void)
			{
				return ((PINE & BUTTONS_BUTTON1) ^ BUTTONS_BUTTON1);
     212:	3c b1       	in	r19, 0x0c	; 12

	uint8_t JoyStatus_LCL    = Joystick_GetStatus();
	uint8_t ButtonStatus_LCL = Buttons_GetStatus();

	KeyboardReport->Modifier = HID_KEYBOARD_MODIFER_LEFTSHIFT;
     214:	82 e0       	ldi	r24, 0x02	; 2
     216:	80 83       	st	Z, r24

	if (JoyStatus_LCL & JOY_UP)
     218:	27 ff       	sbrs	r18, 7
     21a:	02 c0       	rjmp	.+4      	; 0x220 <CALLBACK_HID_Device_CreateHIDReport+0x2c>
	  KeyboardReport->KeyCode[0] = HID_KEYBOARD_SC_A;
     21c:	84 e0       	ldi	r24, 0x04	; 4
     21e:	03 c0       	rjmp	.+6      	; 0x226 <CALLBACK_HID_Device_CreateHIDReport+0x32>
	else if (JoyStatus_LCL & JOY_DOWN)
     220:	24 ff       	sbrs	r18, 4
     222:	02 c0       	rjmp	.+4      	; 0x228 <CALLBACK_HID_Device_CreateHIDReport+0x34>
	  KeyboardReport->KeyCode[0] = HID_KEYBOARD_SC_B;
     224:	85 e0       	ldi	r24, 0x05	; 5
     226:	82 83       	std	Z+2, r24	; 0x02

	if (JoyStatus_LCL & JOY_LEFT)
     228:	92 2f       	mov	r25, r18
     22a:	26 ff       	sbrs	r18, 6
     22c:	02 c0       	rjmp	.+4      	; 0x232 <CALLBACK_HID_Device_CreateHIDReport+0x3e>
	  KeyboardReport->KeyCode[0] = HID_KEYBOARD_SC_C;
     22e:	86 e0       	ldi	r24, 0x06	; 6
     230:	03 c0       	rjmp	.+6      	; 0x238 <CALLBACK_HID_Device_CreateHIDReport+0x44>
	else if (JoyStatus_LCL & JOY_RIGHT)
     232:	23 ff       	sbrs	r18, 3
     234:	02 c0       	rjmp	.+4      	; 0x23a <CALLBACK_HID_Device_CreateHIDReport+0x46>
	  KeyboardReport->KeyCode[0] = HID_KEYBOARD_SC_D;
     236:	84 e0       	ldi	r24, 0x04	; 4
     238:	82 83       	std	Z+2, r24	; 0x02

	if (JoyStatus_LCL & JOY_PRESS)
     23a:	95 ff       	sbrs	r25, 5
     23c:	02 c0       	rjmp	.+4      	; 0x242 <CALLBACK_HID_Device_CreateHIDReport+0x4e>
	  KeyboardReport->KeyCode[0] = HID_KEYBOARD_SC_E;
     23e:	88 e0       	ldi	r24, 0x08	; 8
     240:	82 83       	std	Z+2, r24	; 0x02

	if (ButtonStatus_LCL & BUTTONS_BUTTON1)
     242:	32 fd       	sbrc	r19, 2
     244:	02 c0       	rjmp	.+4      	; 0x24a <CALLBACK_HID_Device_CreateHIDReport+0x56>
	  KeyboardReport->KeyCode[0] = HID_KEYBOARD_SC_F;
     246:	89 e0       	ldi	r24, 0x09	; 9
     248:	82 83       	std	Z+2, r24	; 0x02

	*ReportSize = sizeof(USB_KeyboardReport_Data_t);
     24a:	88 e0       	ldi	r24, 0x08	; 8
     24c:	90 e0       	ldi	r25, 0x00	; 0
     24e:	8d 93       	st	X+, r24
     250:	9c 93       	st	X, r25
	return false;
}
     252:	80 e0       	ldi	r24, 0x00	; 0
     254:	1f 91       	pop	r17
     256:	0f 91       	pop	r16
     258:	08 95       	ret

0000025a <CALLBACK_HID_Device_ProcessHIDReport>:
void CALLBACK_HID_Device_ProcessHIDReport(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo,
                                          const uint8_t ReportID,
                                          const uint8_t ReportType,
                                          const void* ReportData,
                                          const uint16_t ReportSize)
{
     25a:	f9 01       	movw	r30, r18
	uint8_t  LEDMask   = LEDS_NO_LEDS;
	uint8_t* LEDReport = (uint8_t*)ReportData;

	if (*LEDReport & HID_KEYBOARD_LED_NUMLOCK)
     25c:	80 81       	ld	r24, Z
     25e:	90 e0       	ldi	r25, 0x00	; 0
     260:	80 fd       	sbrc	r24, 0
     262:	90 e1       	ldi	r25, 0x10	; 16
	  LEDMask |= LEDS_LED1;

	if (*LEDReport & HID_KEYBOARD_LED_CAPSLOCK)
     264:	81 fd       	sbrc	r24, 1
	  LEDMask |= LEDS_LED3;
     266:	90 68       	ori	r25, 0x80	; 128

	if (*LEDReport & HID_KEYBOARD_LED_SCROLLLOCK)
     268:	82 fd       	sbrc	r24, 2
	  LEDMask |= LEDS_LED4;
     26a:	90 64       	ori	r25, 0x40	; 64
     26c:	8b b1       	in	r24, 0x0b	; 11
     26e:	8f 70       	andi	r24, 0x0F	; 15
     270:	98 2b       	or	r25, r24
     272:	9b b9       	out	0x0b, r25	; 11

	LEDs_SetAllLEDs(LEDMask);
}
     274:	08 95       	ret

00000276 <CALLBACK_MS_Device_SCSICommandReceived>:
     276:	2b b1       	in	r18, 0x0b	; 11
     278:	2f 70       	andi	r18, 0x0F	; 15
     27a:	20 62       	ori	r18, 0x20	; 32
     27c:	2b b9       	out	0x0b, r18	; 11
bool CALLBACK_MS_Device_SCSICommandReceived(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
	bool CommandSuccess;

	LEDs_SetAllLEDs(LEDMASK_USB_BUSY);
	CommandSuccess = SCSI_DecodeSCSICommand(MSInterfaceInfo);
     27e:	d3 d4       	rcall	.+2470   	; 0xc26 <SCSI_DecodeSCSICommand>
     280:	9b b1       	in	r25, 0x0b	; 11
     282:	9f 70       	andi	r25, 0x0F	; 15
     284:	90 66       	ori	r25, 0x60	; 96
     286:	9b b9       	out	0x0b, r25	; 11
	LEDs_SetAllLEDs(LEDMASK_USB_READY);

	return CommandSuccess;
}
     288:	08 95       	ret

0000028a <EVENT_USB_Device_ControlRequest>:
}

/** Event handler for the library USB Control Request reception event. */
void EVENT_USB_Device_ControlRequest(void)
{
	MS_Device_ProcessControlRequest(&Disk_MS_Interface);
     28a:	80 e0       	ldi	r24, 0x00	; 0
     28c:	91 e0       	ldi	r25, 0x01	; 1
     28e:	0e 94 17 0f 	call	0x1e2e	; 0x1e2e <MS_Device_ProcessControlRequest>
	HID_Device_ProcessControlRequest(&Keyboard_HID_Interface);
     292:	87 e3       	ldi	r24, 0x37	; 55
     294:	91 e0       	ldi	r25, 0x01	; 1
     296:	0c 94 bb 0c 	jmp	0x1976	; 0x1976 <HID_Device_ProcessControlRequest>

0000029a <EVENT_USB_Device_ConfigurationChanged>:
	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
}

/** Event handler for the library USB Configuration Changed event. */
void EVENT_USB_Device_ConfigurationChanged(void)
{
     29a:	0f 93       	push	r16
     29c:	1f 93       	push	r17
	bool ConfigSuccess = true;

	ConfigSuccess &= MS_Device_ConfigureEndpoints(&Disk_MS_Interface);
     29e:	80 e0       	ldi	r24, 0x00	; 0
     2a0:	91 e0       	ldi	r25, 0x01	; 1
     2a2:	0e 94 db 0e 	call	0x1db6	; 0x1db6 <MS_Device_ConfigureEndpoints>
     2a6:	08 2f       	mov	r16, r24
	ConfigSuccess &= HID_Device_ConfigureEndpoints(&Keyboard_HID_Interface);
     2a8:	87 e3       	ldi	r24, 0x37	; 55
     2aa:	91 e0       	ldi	r25, 0x01	; 1
     2ac:	0e 94 83 0c 	call	0x1906	; 0x1906 <HID_Device_ConfigureEndpoints>
				 *  \note Not available when the NO_SOF_EVENTS compile time token is defined.
				 */
				static inline void USB_Device_EnableSOFEvents(void) ATTR_ALWAYS_INLINE;
				static inline void USB_Device_EnableSOFEvents(void)
				{
					USB_INT_Enable(USB_INT_SOFI);
     2b0:	90 91 e2 00 	lds	r25, 0x00E2
     2b4:	94 60       	ori	r25, 0x04	; 4
     2b6:	90 93 e2 00 	sts	0x00E2, r25

	USB_Device_EnableSOFEvents();

	LEDs_SetAllLEDs(ConfigSuccess ? LEDMASK_USB_READY : LEDMASK_USB_ERROR);
     2ba:	10 e0       	ldi	r17, 0x00	; 0
     2bc:	90 e0       	ldi	r25, 0x00	; 0
     2be:	08 23       	and	r16, r24
     2c0:	19 23       	and	r17, r25
     2c2:	00 ff       	sbrs	r16, 0
     2c4:	02 c0       	rjmp	.+4      	; 0x2ca <EVENT_USB_Device_ConfigurationChanged+0x30>
     2c6:	90 e6       	ldi	r25, 0x60	; 96
     2c8:	01 c0       	rjmp	.+2      	; 0x2cc <EVENT_USB_Device_ConfigurationChanged+0x32>
     2ca:	90 e9       	ldi	r25, 0x90	; 144
     2cc:	8b b1       	in	r24, 0x0b	; 11
     2ce:	8f 70       	andi	r24, 0x0F	; 15
     2d0:	98 2b       	or	r25, r24
     2d2:	9b b9       	out	0x0b, r25	; 11
}
     2d4:	1f 91       	pop	r17
     2d6:	0f 91       	pop	r16
     2d8:	08 95       	ret

000002da <SetupHardware>:

/** Configures the board hardware and chip peripherals for the demo's functionality. */
void SetupHardware(void)
{
	/* Disable watchdog if enabled by bootloader/fuses */
	MCUSR &= ~(1 << WDRF);
     2da:	84 b7       	in	r24, 0x34	; 52
     2dc:	87 7f       	andi	r24, 0xF7	; 247
     2de:	84 bf       	out	0x34, r24	; 52
	wdt_disable();
     2e0:	88 e1       	ldi	r24, 0x18	; 24
     2e2:	0f b6       	in	r0, 0x3f	; 63
     2e4:	f8 94       	cli
     2e6:	80 93 60 00 	sts	0x0060, r24
     2ea:	10 92 60 00 	sts	0x0060, r1
     2ee:	0f be       	out	0x3f, r0	; 63

	/* Disable clock division */
	clock_prescale_set(clock_div_1);
     2f0:	80 e0       	ldi	r24, 0x00	; 0
     2f2:	90 e0       	ldi	r25, 0x00	; 0
     2f4:	20 e8       	ldi	r18, 0x80	; 128
     2f6:	0f b6       	in	r0, 0x3f	; 63
     2f8:	f8 94       	cli
     2fa:	20 93 61 00 	sts	0x0061, r18
     2fe:	80 93 61 00 	sts	0x0061, r24
     302:	0f be       	out	0x3f, r0	; 63

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void LEDs_Init(void)
			{
				DDRD  |=  LEDS_ALL_LEDS;
     304:	8a b1       	in	r24, 0x0a	; 10
     306:	80 6f       	ori	r24, 0xF0	; 240
     308:	8a b9       	out	0x0a, r24	; 10
				PORTD &= ~LEDS_ALL_LEDS;
     30a:	8b b1       	in	r24, 0x0b	; 11
     30c:	8f 70       	andi	r24, 0x0F	; 15
     30e:	8b b9       	out	0x0b, r24	; 11

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void Joystick_Init(void)
			{
				DDRB  &= ~(JOY_BMASK);
     310:	84 b1       	in	r24, 0x04	; 4
     312:	8f 71       	andi	r24, 0x1F	; 31
     314:	84 b9       	out	0x04, r24	; 4
				DDRE  &= ~(JOY_EMASK);
     316:	8d b1       	in	r24, 0x0d	; 13
     318:	8f 7c       	andi	r24, 0xCF	; 207
     31a:	8d b9       	out	0x0d, r24	; 13

				PORTB |= JOY_BMASK;
     31c:	85 b1       	in	r24, 0x05	; 5
     31e:	80 6e       	ori	r24, 0xE0	; 224
     320:	85 b9       	out	0x05, r24	; 5
				PORTE |= JOY_EMASK;
     322:	8e b1       	in	r24, 0x0e	; 14
     324:	80 63       	ori	r24, 0x30	; 48
     326:	8e b9       	out	0x0e, r24	; 14

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void Buttons_Init(void)
			{
				DDRE  &= ~BUTTONS_BUTTON1;
     328:	6a 98       	cbi	0x0d, 2	; 13
				PORTE |=  BUTTONS_BUTTON1;
     32a:	72 9a       	sbi	0x0e, 2	; 14
			 *  \param[in] SPIOptions  SPI Options, a mask consisting of one of each of the SPI_SPEED_*,
			 *                         SPI_SCK_*, SPI_SAMPLE_*, SPI_ORDER_* and SPI_MODE_* masks.
			 */
			static inline void SPI_Init(const uint8_t SPIOptions)
			{
				DDRB  |=  ((1 << 1) | (1 << 2));
     32c:	84 b1       	in	r24, 0x04	; 4
     32e:	86 60       	ori	r24, 0x06	; 6
     330:	84 b9       	out	0x04, r24	; 4
				DDRB  &= ~((1 << 0) | (1 << 3));
     332:	84 b1       	in	r24, 0x04	; 4
     334:	86 7f       	andi	r24, 0xF6	; 246
     336:	84 b9       	out	0x04, r24	; 4
				PORTB |=  ((1 << 0) | (1 << 3));
     338:	85 b1       	in	r24, 0x05	; 5
     33a:	89 60       	ori	r24, 0x09	; 9
     33c:	85 b9       	out	0x05, r24	; 5

				SPCR   = ((1 << SPE) | SPIOptions);
     33e:	8c e5       	ldi	r24, 0x5C	; 92
     340:	8c bd       	out	0x2c, r24	; 44

				if (SPIOptions & SPI_USE_DOUBLESPEED)
				  SPSR |= (1 << SPI2X);
     342:	8d b5       	in	r24, 0x2d	; 45
     344:	81 60       	ori	r24, 0x01	; 1
     346:	8d bd       	out	0x2d, r24	; 45
			/** Initialises the dataflash driver so that commands and data may be sent to an attached dataflash IC.
			 *  The AVR's SPI driver MUST be initialized before any of the dataflash commands are used.
			 */
			static inline void Dataflash_Init(void)
			{
				DATAFLASH_CHIPCS_DDR  |= DATAFLASH_CHIPCS_MASK;
     348:	8d b1       	in	r24, 0x0d	; 13
     34a:	83 60       	ori	r24, 0x03	; 3
     34c:	8d b9       	out	0x0d, r24	; 13
				DATAFLASH_CHIPCS_PORT |= DATAFLASH_CHIPCS_MASK;
     34e:	8e b1       	in	r24, 0x0e	; 14
     350:	83 60       	ori	r24, 0x03	; 3
     352:	8e b9       	out	0x0e, r24	; 14
	LEDs_Init();
	Joystick_Init();
	Buttons_Init();
	SPI_Init(SPI_SPEED_FCPU_DIV_2 | SPI_ORDER_MSB_FIRST | SPI_SCK_LEAD_FALLING | SPI_SAMPLE_TRAILING | SPI_MODE_MASTER);
	Dataflash_Init();
	USB_Init();
     354:	cd d5       	rcall	.+2970   	; 0xef0 <USB_Init>

	/* Clear Dataflash sector protections, if enabled */
	DataflashManager_ResetDataflashProtections();
}
     356:	97 c0       	rjmp	.+302    	; 0x486 <DataflashManager_ResetDataflashProtections>

00000358 <main>:
/** Main program entry point. This routine contains the overall program flow, including initial
 *  setup of all components and the main program loop.
 */
int main(void)
{
	SetupHardware();
     358:	c0 df       	rcall	.-128    	; 0x2da <SetupHardware>
				PORTD &= ~LEDMask;
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
			{
				PORTD = ((PORTD & ~LEDS_ALL_LEDS) | LEDMask);
     35a:	8b b1       	in	r24, 0x0b	; 11
     35c:	8f 70       	andi	r24, 0x0F	; 15
     35e:	80 61       	ori	r24, 0x10	; 16
     360:	8b b9       	out	0x0b, r24	; 11

	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
	sei();
     362:	78 94       	sei

	for (;;)
	{
		MS_Device_USBTask(&Disk_MS_Interface);
     364:	80 e0       	ldi	r24, 0x00	; 0
     366:	91 e0       	ldi	r25, 0x01	; 1
     368:	0e 94 eb 0d 	call	0x1bd6	; 0x1bd6 <MS_Device_USBTask>
		HID_Device_USBTask(&Keyboard_HID_Interface);
     36c:	87 e3       	ldi	r24, 0x37	; 55
     36e:	91 e0       	ldi	r25, 0x01	; 1
     370:	0e 94 c8 0b 	call	0x1790	; 0x1790 <HID_Device_USBTask>
		USB_USBTask();
     374:	0e 94 b5 0b 	call	0x176a	; 0x176a <USB_USBTask>
     378:	f5 cf       	rjmp	.-22     	; 0x364 <main+0xc>

0000037a <CALLBACK_USB_GetDescriptor>:
 *  USB host.
 */
uint16_t CALLBACK_USB_GetDescriptor(const uint16_t wValue,
                                    const uint8_t wIndex,
                                    const void** const DescriptorAddress)
{
     37a:	da 01       	movw	r26, r20
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
     37c:	93 30       	cpi	r25, 0x03	; 3
     37e:	b1 f0       	breq	.+44     	; 0x3ac <CALLBACK_USB_GetDescriptor+0x32>
     380:	94 30       	cpi	r25, 0x04	; 4
     382:	28 f4       	brcc	.+10     	; 0x38e <CALLBACK_USB_GetDescriptor+0x14>
     384:	91 30       	cpi	r25, 0x01	; 1
     386:	41 f0       	breq	.+16     	; 0x398 <CALLBACK_USB_GetDescriptor+0x1e>
     388:	92 30       	cpi	r25, 0x02	; 2
     38a:	79 f5       	brne	.+94     	; 0x3ea <CALLBACK_USB_GetDescriptor+0x70>
     38c:	0a c0       	rjmp	.+20     	; 0x3a2 <CALLBACK_USB_GetDescriptor+0x28>
     38e:	91 32       	cpi	r25, 0x21	; 33
     390:	11 f1       	breq	.+68     	; 0x3d6 <CALLBACK_USB_GetDescriptor+0x5c>
     392:	92 32       	cpi	r25, 0x22	; 34
     394:	51 f5       	brne	.+84     	; 0x3ea <CALLBACK_USB_GetDescriptor+0x70>
     396:	24 c0       	rjmp	.+72     	; 0x3e0 <CALLBACK_USB_GetDescriptor+0x66>
     398:	e7 ed       	ldi	r30, 0xD7	; 215
     39a:	f0 e0       	ldi	r31, 0x00	; 0
     39c:	22 e1       	ldi	r18, 0x12	; 18
     39e:	30 e0       	ldi	r19, 0x00	; 0
     3a0:	28 c0       	rjmp	.+80     	; 0x3f2 <CALLBACK_USB_GetDescriptor+0x78>
     3a2:	e9 ee       	ldi	r30, 0xE9	; 233
     3a4:	f0 e0       	ldi	r31, 0x00	; 0
     3a6:	29 e3       	ldi	r18, 0x39	; 57
     3a8:	30 e0       	ldi	r19, 0x00	; 0
     3aa:	23 c0       	rjmp	.+70     	; 0x3f2 <CALLBACK_USB_GetDescriptor+0x78>
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
			Size    = sizeof(USB_Descriptor_Configuration_t);
			break;
		case DTYPE_String:
			switch (DescriptorNumber)
     3ac:	81 30       	cpi	r24, 0x01	; 1
     3ae:	49 f0       	breq	.+18     	; 0x3c2 <CALLBACK_USB_GetDescriptor+0x48>
     3b0:	81 30       	cpi	r24, 0x01	; 1
     3b2:	18 f0       	brcs	.+6      	; 0x3ba <CALLBACK_USB_GetDescriptor+0x40>
     3b4:	82 30       	cpi	r24, 0x02	; 2
     3b6:	c9 f4       	brne	.+50     	; 0x3ea <CALLBACK_USB_GetDescriptor+0x70>
     3b8:	0a c0       	rjmp	.+20     	; 0x3ce <CALLBACK_USB_GetDescriptor+0x54>
			{
				case 0x00:
					Address = &LanguageString;
					Size    = pgm_read_byte(&LanguageString.Header.Size);
     3ba:	e2 e2       	ldi	r30, 0x22	; 34
     3bc:	f1 e0       	ldi	r31, 0x01	; 1
     3be:	84 91       	lpm	r24, Z+
     3c0:	03 c0       	rjmp	.+6      	; 0x3c8 <CALLBACK_USB_GetDescriptor+0x4e>
					break;
				case 0x01:
					Address = &ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
     3c2:	e6 e2       	ldi	r30, 0x26	; 38
     3c4:	f1 e0       	ldi	r31, 0x01	; 1
     3c6:	84 91       	lpm	r24, Z+
     3c8:	28 2f       	mov	r18, r24
     3ca:	30 e0       	ldi	r19, 0x00	; 0
     3cc:	12 c0       	rjmp	.+36     	; 0x3f2 <CALLBACK_USB_GetDescriptor+0x78>
					break;
				case 0x02:
					Address = &ProductString;
					Size    = pgm_read_byte(&ProductString.Header.Size);
     3ce:	e0 e4       	ldi	r30, 0x40	; 64
     3d0:	f1 e0       	ldi	r31, 0x01	; 1
     3d2:	84 91       	lpm	r24, Z+
     3d4:	f9 cf       	rjmp	.-14     	; 0x3c8 <CALLBACK_USB_GetDescriptor+0x4e>
     3d6:	e2 e1       	ldi	r30, 0x12	; 18
     3d8:	f1 e0       	ldi	r31, 0x01	; 1
     3da:	29 e0       	ldi	r18, 0x09	; 9
     3dc:	30 e0       	ldi	r19, 0x00	; 0
     3de:	09 c0       	rjmp	.+18     	; 0x3f2 <CALLBACK_USB_GetDescriptor+0x78>

			break;
		case HID_DTYPE_HID:
			Address = &ConfigurationDescriptor.HID_KeyboardHID;
			Size    = sizeof(USB_HID_Descriptor_HID_t);
			break;
     3e0:	e8 e9       	ldi	r30, 0x98	; 152
     3e2:	f0 e0       	ldi	r31, 0x00	; 0
     3e4:	2f e3       	ldi	r18, 0x3F	; 63
     3e6:	30 e0       	ldi	r19, 0x00	; 0
     3e8:	04 c0       	rjmp	.+8      	; 0x3f2 <CALLBACK_USB_GetDescriptor+0x78>
     3ea:	e0 e0       	ldi	r30, 0x00	; 0
     3ec:	f0 e0       	ldi	r31, 0x00	; 0
     3ee:	20 e0       	ldi	r18, 0x00	; 0
     3f0:	30 e0       	ldi	r19, 0x00	; 0
			Address = &KeyboardReport;
			Size    = sizeof(KeyboardReport);
			break;
	}

	*DescriptorAddress = Address;
     3f2:	ed 93       	st	X+, r30
     3f4:	fc 93       	st	X, r31
	return Size;
}
     3f6:	c9 01       	movw	r24, r18
     3f8:	08 95       	ret

000003fa <Dataflash_SelectChipFromPage>:
			 *
			 *  \param[in] PageAddress  Address of the page to manipulate, ranging from
			 *                          ((DATAFLASH_PAGES * DATAFLASH_TOTALCHIPS) - 1).
			 */
			static inline void Dataflash_SelectChipFromPage(const uint16_t PageAddress)
			{
     3fa:	9c 01       	movw	r18, r24
			 *              the chip number).
			 */
			static inline void Dataflash_SelectChip(const uint8_t ChipMask) ATTR_ALWAYS_INLINE;
			static inline void Dataflash_SelectChip(const uint8_t ChipMask)
			{
				DATAFLASH_CHIPCS_PORT = ((DATAFLASH_CHIPCS_PORT & ~DATAFLASH_CHIPCS_MASK) | ChipMask);
     3fc:	8e b1       	in	r24, 0x0e	; 14
     3fe:	83 60       	ori	r24, 0x03	; 3
     400:	8e b9       	out	0x0e, r24	; 14
			 */
			static inline void Dataflash_SelectChipFromPage(const uint16_t PageAddress)
			{
				Dataflash_DeselectChip();

				if (PageAddress >= (DATAFLASH_PAGES * DATAFLASH_TOTALCHIPS))
     402:	80 e4       	ldi	r24, 0x40	; 64
     404:	20 30       	cpi	r18, 0x00	; 0
     406:	38 07       	cpc	r19, r24
     408:	58 f4       	brcc	.+22     	; 0x420 <Dataflash_SelectChipFromPage+0x26>
				  return;

				if (PageAddress & 0x01)
     40a:	20 ff       	sbrs	r18, 0
     40c:	05 c0       	rjmp	.+10     	; 0x418 <Dataflash_SelectChipFromPage+0x1e>
			 *              the chip number).
			 */
			static inline void Dataflash_SelectChip(const uint8_t ChipMask) ATTR_ALWAYS_INLINE;
			static inline void Dataflash_SelectChip(const uint8_t ChipMask)
			{
				DATAFLASH_CHIPCS_PORT = ((DATAFLASH_CHIPCS_PORT & ~DATAFLASH_CHIPCS_MASK) | ChipMask);
     40e:	8e b1       	in	r24, 0x0e	; 14
     410:	8c 7f       	andi	r24, 0xFC	; 252
     412:	81 60       	ori	r24, 0x01	; 1
     414:	8e b9       	out	0x0e, r24	; 14
     416:	08 95       	ret
     418:	8e b1       	in	r24, 0x0e	; 14
     41a:	8c 7f       	andi	r24, 0xFC	; 252
     41c:	82 60       	ori	r24, 0x02	; 2
     41e:	8e b9       	out	0x0e, r24	; 14
     420:	08 95       	ret

00000422 <Dataflash_ToggleSelectedChipCS>:
			 *  or a DATAFLASH_CHIPn mask (where n is the chip number).
			 */
			static inline uint8_t Dataflash_GetSelectedChip(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t Dataflash_GetSelectedChip(void)
			{
				return (DATAFLASH_CHIPCS_PORT & DATAFLASH_CHIPCS_MASK);
     422:	8e b1       	in	r24, 0x0e	; 14
			 *              the chip number).
			 */
			static inline void Dataflash_SelectChip(const uint8_t ChipMask) ATTR_ALWAYS_INLINE;
			static inline void Dataflash_SelectChip(const uint8_t ChipMask)
			{
				DATAFLASH_CHIPCS_PORT = ((DATAFLASH_CHIPCS_PORT & ~DATAFLASH_CHIPCS_MASK) | ChipMask);
     424:	9e b1       	in	r25, 0x0e	; 14
     426:	93 60       	ori	r25, 0x03	; 3
     428:	9e b9       	out	0x0e, r25	; 14
			{
				uint8_t SelectedChipMask = Dataflash_GetSelectedChip();

				Dataflash_DeselectChip();
				Dataflash_SelectChip(SelectedChipMask);
			}
     42a:	9e b1       	in	r25, 0x0e	; 14
     42c:	83 70       	andi	r24, 0x03	; 3
     42e:	9c 7f       	andi	r25, 0xFC	; 252
     430:	89 2b       	or	r24, r25
     432:	8e b9       	out	0x0e, r24	; 14
     434:	08 95       	ret

00000436 <Dataflash_WaitWhileBusy>:
			/** Spin-loops while the currently selected dataflash is busy executing a command, such as a main
			 *  memory page program or main memory to buffer transfer.
			 */
			static inline void Dataflash_WaitWhileBusy(void)
			{
				Dataflash_ToggleSelectedChipCS();
     436:	f5 df       	rcall	.-22     	; 0x422 <Dataflash_ToggleSelectedChipCS>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     438:	87 ed       	ldi	r24, 0xD7	; 215
     43a:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     43c:	0d b4       	in	r0, 0x2d	; 45
     43e:	07 fe       	sbrs	r0, 7
     440:	fd cf       	rjmp	.-6      	; 0x43c <Dataflash_WaitWhileBusy+0x6>
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     442:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     444:	0d b4       	in	r0, 0x2d	; 45
     446:	07 fe       	sbrs	r0, 7
     448:	fd cf       	rjmp	.-6      	; 0x444 <Dataflash_WaitWhileBusy+0xe>
				Dataflash_SendByte(DF_CMD_GETSTATUS);
				while (!(Dataflash_ReceiveByte() & DF_STATUS_READY));
     44a:	0e b4       	in	r0, 0x2e	; 46
     44c:	07 fe       	sbrs	r0, 7
     44e:	f9 cf       	rjmp	.-14     	; 0x442 <Dataflash_WaitWhileBusy+0xc>
				Dataflash_ToggleSelectedChipCS();
			}
     450:	e8 cf       	rjmp	.-48     	; 0x422 <Dataflash_ToggleSelectedChipCS>

00000452 <Dataflash_SendAddressBytes>:
			 *  \param[in] BufferByte   Address within the dataflash's buffer
			 */
			static inline void Dataflash_SendAddressBytes(uint16_t PageAddress,
			                                              const uint16_t BufferByte)
			{
				PageAddress >>= 1;
     452:	9c 01       	movw	r18, r24
     454:	36 95       	lsr	r19
     456:	27 95       	ror	r18

				Dataflash_SendByte(PageAddress >> 5);
     458:	36 e0       	ldi	r19, 0x06	; 6
     45a:	96 95       	lsr	r25
     45c:	87 95       	ror	r24
     45e:	3a 95       	dec	r19
     460:	e1 f7       	brne	.-8      	; 0x45a <Dataflash_SendAddressBytes+0x8>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     462:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     464:	0d b4       	in	r0, 0x2d	; 45
     466:	07 fe       	sbrs	r0, 7
     468:	fd cf       	rjmp	.-6      	; 0x464 <Dataflash_SendAddressBytes+0x12>
				Dataflash_SendByte((PageAddress << 3) | (BufferByte >> 8));
     46a:	82 2f       	mov	r24, r18
     46c:	88 0f       	add	r24, r24
     46e:	88 0f       	add	r24, r24
     470:	88 0f       	add	r24, r24
     472:	87 2b       	or	r24, r23
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     474:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     476:	0d b4       	in	r0, 0x2d	; 45
     478:	07 fe       	sbrs	r0, 7
     47a:	fd cf       	rjmp	.-6      	; 0x476 <Dataflash_SendAddressBytes+0x24>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     47c:	6e bd       	out	0x2e, r22	; 46
				while (!(SPSR & (1 << SPIF)));
     47e:	0d b4       	in	r0, 0x2d	; 45
     480:	07 fe       	sbrs	r0, 7
     482:	fd cf       	rjmp	.-6      	; 0x47e <Dataflash_SendAddressBytes+0x2c>
				Dataflash_SendByte(BufferByte);
			}
     484:	08 95       	ret

00000486 <DataflashManager_ResetDataflashProtections>:
			 *              the chip number).
			 */
			static inline void Dataflash_SelectChip(const uint8_t ChipMask) ATTR_ALWAYS_INLINE;
			static inline void Dataflash_SelectChip(const uint8_t ChipMask)
			{
				DATAFLASH_CHIPCS_PORT = ((DATAFLASH_CHIPCS_PORT & ~DATAFLASH_CHIPCS_MASK) | ChipMask);
     486:	8e b1       	in	r24, 0x0e	; 14
     488:	8c 7f       	andi	r24, 0xFC	; 252
     48a:	82 60       	ori	r24, 0x02	; 2
     48c:	8e b9       	out	0x0e, r24	; 14
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     48e:	87 ed       	ldi	r24, 0xD7	; 215
     490:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     492:	0d b4       	in	r0, 0x2d	; 45
     494:	07 fe       	sbrs	r0, 7
     496:	fd cf       	rjmp	.-6      	; 0x492 <DataflashManager_ResetDataflashProtections+0xc>
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     498:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     49a:	0d b4       	in	r0, 0x2d	; 45
     49c:	07 fe       	sbrs	r0, 7
     49e:	fd cf       	rjmp	.-6      	; 0x49a <DataflashManager_ResetDataflashProtections+0x14>
	/* Select first Dataflash chip, send the read status register command */
	Dataflash_SelectChip(DATAFLASH_CHIP1);
	Dataflash_SendByte(DF_CMD_GETSTATUS);

	/* Check if sector protection is enabled */
	if (Dataflash_ReceiveByte() & DF_STATUS_SECTORPROTECTION_ON)
     4a0:	0e b4       	in	r0, 0x2e	; 46
     4a2:	01 fe       	sbrs	r0, 1
     4a4:	15 c0       	rjmp	.+42     	; 0x4d0 <DataflashManager_ResetDataflashProtections+0x4a>
	{
		Dataflash_ToggleSelectedChipCS();
     4a6:	bd df       	rcall	.-134    	; 0x422 <Dataflash_ToggleSelectedChipCS>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     4a8:	8d e3       	ldi	r24, 0x3D	; 61
     4aa:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     4ac:	0d b4       	in	r0, 0x2d	; 45
     4ae:	07 fe       	sbrs	r0, 7
     4b0:	fd cf       	rjmp	.-6      	; 0x4ac <DataflashManager_ResetDataflashProtections+0x26>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     4b2:	8a e2       	ldi	r24, 0x2A	; 42
     4b4:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     4b6:	0d b4       	in	r0, 0x2d	; 45
     4b8:	07 fe       	sbrs	r0, 7
     4ba:	fd cf       	rjmp	.-6      	; 0x4b6 <DataflashManager_ResetDataflashProtections+0x30>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     4bc:	8f e7       	ldi	r24, 0x7F	; 127
     4be:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     4c0:	0d b4       	in	r0, 0x2d	; 45
     4c2:	07 fe       	sbrs	r0, 7
     4c4:	fd cf       	rjmp	.-6      	; 0x4c0 <DataflashManager_ResetDataflashProtections+0x3a>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     4c6:	8a e9       	ldi	r24, 0x9A	; 154
     4c8:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     4ca:	0d b4       	in	r0, 0x2d	; 45
     4cc:	07 fe       	sbrs	r0, 7
     4ce:	fd cf       	rjmp	.-6      	; 0x4ca <DataflashManager_ResetDataflashProtections+0x44>
     4d0:	8e b1       	in	r24, 0x0e	; 14
     4d2:	8c 7f       	andi	r24, 0xFC	; 252
     4d4:	81 60       	ori	r24, 0x01	; 1
     4d6:	8e b9       	out	0x0e, r24	; 14
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     4d8:	87 ed       	ldi	r24, 0xD7	; 215
     4da:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     4dc:	0d b4       	in	r0, 0x2d	; 45
     4de:	07 fe       	sbrs	r0, 7
     4e0:	fd cf       	rjmp	.-6      	; 0x4dc <DataflashManager_ResetDataflashProtections+0x56>
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     4e2:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     4e4:	0d b4       	in	r0, 0x2d	; 45
     4e6:	07 fe       	sbrs	r0, 7
     4e8:	fd cf       	rjmp	.-6      	; 0x4e4 <DataflashManager_ResetDataflashProtections+0x5e>
	#if (DATAFLASH_TOTALCHIPS == 2)
	Dataflash_SelectChip(DATAFLASH_CHIP2);
	Dataflash_SendByte(DF_CMD_GETSTATUS);

	/* Check if sector protection is enabled */
	if (Dataflash_ReceiveByte() & DF_STATUS_SECTORPROTECTION_ON)
     4ea:	0e b4       	in	r0, 0x2e	; 46
     4ec:	01 fe       	sbrs	r0, 1
     4ee:	15 c0       	rjmp	.+42     	; 0x51a <DataflashManager_ResetDataflashProtections+0x94>
	{
		Dataflash_ToggleSelectedChipCS();
     4f0:	98 df       	rcall	.-208    	; 0x422 <Dataflash_ToggleSelectedChipCS>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     4f2:	8d e3       	ldi	r24, 0x3D	; 61
     4f4:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     4f6:	0d b4       	in	r0, 0x2d	; 45
     4f8:	07 fe       	sbrs	r0, 7
     4fa:	fd cf       	rjmp	.-6      	; 0x4f6 <DataflashManager_ResetDataflashProtections+0x70>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     4fc:	8a e2       	ldi	r24, 0x2A	; 42
     4fe:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     500:	0d b4       	in	r0, 0x2d	; 45
     502:	07 fe       	sbrs	r0, 7
     504:	fd cf       	rjmp	.-6      	; 0x500 <DataflashManager_ResetDataflashProtections+0x7a>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     506:	8f e7       	ldi	r24, 0x7F	; 127
     508:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     50a:	0d b4       	in	r0, 0x2d	; 45
     50c:	07 fe       	sbrs	r0, 7
     50e:	fd cf       	rjmp	.-6      	; 0x50a <DataflashManager_ResetDataflashProtections+0x84>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     510:	8a e9       	ldi	r24, 0x9A	; 154
     512:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     514:	0d b4       	in	r0, 0x2d	; 45
     516:	07 fe       	sbrs	r0, 7
     518:	fd cf       	rjmp	.-6      	; 0x514 <DataflashManager_ResetDataflashProtections+0x8e>
     51a:	8e b1       	in	r24, 0x0e	; 14
     51c:	83 60       	ori	r24, 0x03	; 3
     51e:	8e b9       	out	0x0e, r24	; 14
	}
	#endif

	/* Deselect current Dataflash chip */
	Dataflash_DeselectChip();
}
     520:	08 95       	ret

00000522 <DataflashManager_CheckDataflashOperation>:
     522:	8e b1       	in	r24, 0x0e	; 14
     524:	8c 7f       	andi	r24, 0xFC	; 252
     526:	82 60       	ori	r24, 0x02	; 2
     528:	8e b9       	out	0x0e, r24	; 14
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     52a:	8f e9       	ldi	r24, 0x9F	; 159
     52c:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     52e:	0d b4       	in	r0, 0x2d	; 45
     530:	07 fe       	sbrs	r0, 7
     532:	fd cf       	rjmp	.-6      	; 0x52e <DataflashManager_CheckDataflashOperation+0xc>
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     534:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     536:	0d b4       	in	r0, 0x2d	; 45
     538:	07 fe       	sbrs	r0, 7
     53a:	fd cf       	rjmp	.-6      	; 0x536 <DataflashManager_CheckDataflashOperation+0x14>
				return SPDR;
     53c:	9e b5       	in	r25, 0x2e	; 46
     53e:	8e b1       	in	r24, 0x0e	; 14
     540:	83 60       	ori	r24, 0x03	; 3
     542:	8e b9       	out	0x0e, r24	; 14
	Dataflash_SendByte(DF_CMD_READMANUFACTURERDEVICEINFO);
	ReturnByte = Dataflash_ReceiveByte();
	Dataflash_DeselectChip();

	/* If returned data is invalid, fail the command */
	if (ReturnByte != DF_MANUFACTURER_ATMEL)
     544:	9f 31       	cpi	r25, 0x1F	; 31
     546:	11 f0       	breq	.+4      	; 0x54c <DataflashManager_CheckDataflashOperation+0x2a>
     548:	80 e0       	ldi	r24, 0x00	; 0
     54a:	08 95       	ret
     54c:	8e b1       	in	r24, 0x0e	; 14
     54e:	8c 7f       	andi	r24, 0xFC	; 252
     550:	81 60       	ori	r24, 0x01	; 1
     552:	8e b9       	out	0x0e, r24	; 14
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     554:	8f e9       	ldi	r24, 0x9F	; 159
     556:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     558:	0d b4       	in	r0, 0x2d	; 45
     55a:	07 fe       	sbrs	r0, 7
     55c:	fd cf       	rjmp	.-6      	; 0x558 <DataflashManager_CheckDataflashOperation+0x36>
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     55e:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     560:	0d b4       	in	r0, 0x2d	; 45
     562:	07 fe       	sbrs	r0, 7
     564:	fd cf       	rjmp	.-6      	; 0x560 <DataflashManager_CheckDataflashOperation+0x3e>
				return SPDR;
     566:	9e b5       	in	r25, 0x2e	; 46
     568:	8e b1       	in	r24, 0x0e	; 14
     56a:	83 60       	ori	r24, 0x03	; 3
     56c:	8e b9       	out	0x0e, r24	; 14
     56e:	80 e0       	ldi	r24, 0x00	; 0
     570:	9f 31       	cpi	r25, 0x1F	; 31
     572:	09 f4       	brne	.+2      	; 0x576 <DataflashManager_CheckDataflashOperation+0x54>
     574:	81 e0       	ldi	r24, 0x01	; 1
	if (ReturnByte != DF_MANUFACTURER_ATMEL)
	  return false;
	#endif

	return true;
}
     576:	08 95       	ret

00000578 <DataflashManager_ReadBlocks>:
 *  \param[in] TotalBlocks   Number of blocks of data to read
 */
void DataflashManager_ReadBlocks(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo,
                                 const uint32_t BlockAddress,
                                 uint16_t TotalBlocks)
{
     578:	af 92       	push	r10
     57a:	bf 92       	push	r11
     57c:	cf 92       	push	r12
     57e:	df 92       	push	r13
     580:	ef 92       	push	r14
     582:	ff 92       	push	r15
     584:	0f 93       	push	r16
     586:	1f 93       	push	r17
     588:	df 93       	push	r29
     58a:	cf 93       	push	r28
     58c:	0f 92       	push	r0
     58e:	cd b7       	in	r28, 0x3d	; 61
     590:	de b7       	in	r29, 0x3e	; 62
     592:	5c 01       	movw	r10, r24
     594:	79 01       	movw	r14, r18
	uint16_t CurrDFPage          = ((BlockAddress * VIRTUAL_MEMORY_BLOCK_SIZE) / DATAFLASH_PAGE_SIZE);
     596:	e9 e0       	ldi	r30, 0x09	; 9
     598:	44 0f       	add	r20, r20
     59a:	55 1f       	adc	r21, r21
     59c:	66 1f       	adc	r22, r22
     59e:	77 1f       	adc	r23, r23
     5a0:	ea 95       	dec	r30
     5a2:	d1 f7       	brne	.-12     	; 0x598 <DataflashManager_ReadBlocks+0x20>
     5a4:	db 01       	movw	r26, r22
     5a6:	ca 01       	movw	r24, r20
     5a8:	3a e0       	ldi	r19, 0x0A	; 10
     5aa:	b6 95       	lsr	r27
     5ac:	a7 95       	ror	r26
     5ae:	97 95       	ror	r25
     5b0:	87 95       	ror	r24
     5b2:	3a 95       	dec	r19
     5b4:	d1 f7       	brne	.-12     	; 0x5aa <DataflashManager_ReadBlocks+0x32>
     5b6:	8c 01       	movw	r16, r24
	uint16_t CurrDFPageByte      = ((BlockAddress * VIRTUAL_MEMORY_BLOCK_SIZE) % DATAFLASH_PAGE_SIZE);
     5b8:	2f ef       	ldi	r18, 0xFF	; 255
     5ba:	c2 2e       	mov	r12, r18
     5bc:	23 e0       	ldi	r18, 0x03	; 3
     5be:	d2 2e       	mov	r13, r18
     5c0:	c4 22       	and	r12, r20
     5c2:	d5 22       	and	r13, r21
	uint8_t  CurrDFPageByteDiv16 = (CurrDFPageByte >> 4);

	/* Select the correct starting Dataflash IC for the block requested */
	Dataflash_SelectChipFromPage(CurrDFPage);
     5c4:	1a df       	rcall	.-460    	; 0x3fa <Dataflash_SelectChipFromPage>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     5c6:	82 ed       	ldi	r24, 0xD2	; 210
     5c8:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     5ca:	0d b4       	in	r0, 0x2d	; 45
     5cc:	07 fe       	sbrs	r0, 7
     5ce:	fd cf       	rjmp	.-6      	; 0x5ca <DataflashManager_ReadBlocks+0x52>

	/* Send the Dataflash main memory page read command */
	Dataflash_SendByte(DF_CMD_MAINMEMPAGEREAD);
	Dataflash_SendAddressBytes(CurrDFPage, CurrDFPageByte);
     5d0:	c8 01       	movw	r24, r16
     5d2:	b6 01       	movw	r22, r12
     5d4:	3e df       	rcall	.-388    	; 0x452 <Dataflash_SendAddressBytes>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     5d6:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     5d8:	0d b4       	in	r0, 0x2d	; 45
     5da:	07 fe       	sbrs	r0, 7
     5dc:	fd cf       	rjmp	.-6      	; 0x5d8 <DataflashManager_ReadBlocks+0x60>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     5de:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     5e0:	0d b4       	in	r0, 0x2d	; 45
     5e2:	07 fe       	sbrs	r0, 7
     5e4:	fd cf       	rjmp	.-6      	; 0x5e0 <DataflashManager_ReadBlocks+0x68>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     5e6:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     5e8:	0d b4       	in	r0, 0x2d	; 45
     5ea:	07 fe       	sbrs	r0, 7
     5ec:	fd cf       	rjmp	.-6      	; 0x5e8 <DataflashManager_ReadBlocks+0x70>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     5ee:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     5f0:	0d b4       	in	r0, 0x2d	; 45
     5f2:	07 fe       	sbrs	r0, 7
     5f4:	fd cf       	rjmp	.-6      	; 0x5f0 <DataflashManager_ReadBlocks+0x78>
	Dataflash_SendByte(0x00);
	Dataflash_SendByte(0x00);
	Dataflash_SendByte(0x00);

	/* Wait until endpoint is ready before continuing */
	if (Endpoint_WaitUntilReady())
     5f6:	fd d3       	rcall	.+2042   	; 0xdf2 <Endpoint_WaitUntilReady>
     5f8:	88 23       	and	r24, r24
     5fa:	09 f0       	breq	.+2      	; 0x5fe <DataflashManager_ReadBlocks+0x86>
     5fc:	c5 c0       	rjmp	.+394    	; 0x788 <DataflashManager_ReadBlocks+0x210>
                                 const uint32_t BlockAddress,
                                 uint16_t TotalBlocks)
{
	uint16_t CurrDFPage          = ((BlockAddress * VIRTUAL_MEMORY_BLOCK_SIZE) / DATAFLASH_PAGE_SIZE);
	uint16_t CurrDFPageByte      = ((BlockAddress * VIRTUAL_MEMORY_BLOCK_SIZE) % DATAFLASH_PAGE_SIZE);
	uint8_t  CurrDFPageByteDiv16 = (CurrDFPageByte >> 4);
     5fe:	94 e0       	ldi	r25, 0x04	; 4
     600:	d6 94       	lsr	r13
     602:	c7 94       	ror	r12
     604:	9a 95       	dec	r25
     606:	e1 f7       	brne	.-8      	; 0x600 <DataflashManager_ReadBlocks+0x88>
     608:	9c 2d       	mov	r25, r12
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     60a:	82 ed       	ldi	r24, 0xD2	; 210
     60c:	c8 2e       	mov	r12, r24
     60e:	ac c0       	rjmp	.+344    	; 0x768 <DataflashManager_ReadBlocks+0x1f0>
     610:	dd 24       	eor	r13, r13
			 *  \return Boolean true if the currently selected endpoint may be read from or written to, depending on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
     612:	80 91 e8 00 	lds	r24, 0x00E8

		/* Write an endpoint packet sized data block to the Dataflash */
		while (BytesInBlockDiv16 < (VIRTUAL_MEMORY_BLOCK_SIZE >> 4))
		{
			/* Check if the endpoint is currently full */
			if (!(Endpoint_IsReadWriteAllowed()))
     616:	85 fd       	sbrc	r24, 5
     618:	0b c0       	rjmp	.+22     	; 0x630 <DataflashManager_ReadBlocks+0xb8>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     61a:	80 91 e8 00 	lds	r24, 0x00E8
     61e:	8e 77       	andi	r24, 0x7E	; 126
     620:	80 93 e8 00 	sts	0x00E8, r24
			{
				/* Clear the endpoint bank to send its contents to the host */
				Endpoint_ClearIN();

				/* Wait until the endpoint is ready for more data */
				if (Endpoint_WaitUntilReady())
     624:	99 83       	std	Y+1, r25	; 0x01
     626:	e5 d3       	rcall	.+1994   	; 0xdf2 <Endpoint_WaitUntilReady>
     628:	99 81       	ldd	r25, Y+1	; 0x01
     62a:	88 23       	and	r24, r24
     62c:	09 f0       	breq	.+2      	; 0x630 <DataflashManager_ReadBlocks+0xb8>
     62e:	ac c0       	rjmp	.+344    	; 0x788 <DataflashManager_ReadBlocks+0x210>
				  return;
			}

			/* Check if end of Dataflash page reached */
			if (CurrDFPageByteDiv16 == (DATAFLASH_PAGE_SIZE >> 4))
     630:	90 34       	cpi	r25, 0x40	; 64
     632:	e9 f4       	brne	.+58     	; 0x66e <DataflashManager_ReadBlocks+0xf6>
			{
				/* Reset the Dataflash buffer counter, increment the page counter */
				CurrDFPageByteDiv16 = 0;
				CurrDFPage++;
     634:	0f 5f       	subi	r16, 0xFF	; 255
     636:	1f 4f       	sbci	r17, 0xFF	; 255

				/* Select the next Dataflash chip based on the new Dataflash page index */
				Dataflash_SelectChipFromPage(CurrDFPage);
     638:	c8 01       	movw	r24, r16
     63a:	df de       	rcall	.-578    	; 0x3fa <Dataflash_SelectChipFromPage>
     63c:	ce bc       	out	0x2e, r12	; 46
				while (!(SPSR & (1 << SPIF)));
     63e:	0d b4       	in	r0, 0x2d	; 45
     640:	07 fe       	sbrs	r0, 7
     642:	fd cf       	rjmp	.-6      	; 0x63e <DataflashManager_ReadBlocks+0xc6>

				/* Send the Dataflash main memory page read command */
				Dataflash_SendByte(DF_CMD_MAINMEMPAGEREAD);
				Dataflash_SendAddressBytes(CurrDFPage, 0);
     644:	c8 01       	movw	r24, r16
     646:	60 e0       	ldi	r22, 0x00	; 0
     648:	70 e0       	ldi	r23, 0x00	; 0
     64a:	03 df       	rcall	.-506    	; 0x452 <Dataflash_SendAddressBytes>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     64c:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     64e:	0d b4       	in	r0, 0x2d	; 45
     650:	07 fe       	sbrs	r0, 7
     652:	fd cf       	rjmp	.-6      	; 0x64e <DataflashManager_ReadBlocks+0xd6>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     654:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     656:	0d b4       	in	r0, 0x2d	; 45
     658:	07 fe       	sbrs	r0, 7
     65a:	fd cf       	rjmp	.-6      	; 0x656 <DataflashManager_ReadBlocks+0xde>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     65c:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     65e:	0d b4       	in	r0, 0x2d	; 45
     660:	07 fe       	sbrs	r0, 7
     662:	fd cf       	rjmp	.-6      	; 0x65e <DataflashManager_ReadBlocks+0xe6>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     664:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     666:	0d b4       	in	r0, 0x2d	; 45
     668:	07 fe       	sbrs	r0, 7
     66a:	fd cf       	rjmp	.-6      	; 0x666 <DataflashManager_ReadBlocks+0xee>
     66c:	90 e0       	ldi	r25, 0x00	; 0
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     66e:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     670:	0d b4       	in	r0, 0x2d	; 45
     672:	07 fe       	sbrs	r0, 7
     674:	fd cf       	rjmp	.-6      	; 0x670 <DataflashManager_ReadBlocks+0xf8>
				return SPDR;
     676:	8e b5       	in	r24, 0x2e	; 46
			 *  \param[in] Byte  Next byte to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_Byte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_Byte(const uint8_t Byte)
			{
				UEDATX = Byte;
     678:	80 93 f1 00 	sts	0x00F1, r24
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     67c:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     67e:	0d b4       	in	r0, 0x2d	; 45
     680:	07 fe       	sbrs	r0, 7
     682:	fd cf       	rjmp	.-6      	; 0x67e <DataflashManager_ReadBlocks+0x106>
				return SPDR;
     684:	8e b5       	in	r24, 0x2e	; 46
     686:	80 93 f1 00 	sts	0x00F1, r24
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     68a:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     68c:	0d b4       	in	r0, 0x2d	; 45
     68e:	07 fe       	sbrs	r0, 7
     690:	fd cf       	rjmp	.-6      	; 0x68c <DataflashManager_ReadBlocks+0x114>
				return SPDR;
     692:	8e b5       	in	r24, 0x2e	; 46
     694:	80 93 f1 00 	sts	0x00F1, r24
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     698:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     69a:	0d b4       	in	r0, 0x2d	; 45
     69c:	07 fe       	sbrs	r0, 7
     69e:	fd cf       	rjmp	.-6      	; 0x69a <DataflashManager_ReadBlocks+0x122>
				return SPDR;
     6a0:	8e b5       	in	r24, 0x2e	; 46
     6a2:	80 93 f1 00 	sts	0x00F1, r24
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     6a6:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     6a8:	0d b4       	in	r0, 0x2d	; 45
     6aa:	07 fe       	sbrs	r0, 7
     6ac:	fd cf       	rjmp	.-6      	; 0x6a8 <DataflashManager_ReadBlocks+0x130>
				return SPDR;
     6ae:	8e b5       	in	r24, 0x2e	; 46
     6b0:	80 93 f1 00 	sts	0x00F1, r24
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     6b4:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     6b6:	0d b4       	in	r0, 0x2d	; 45
     6b8:	07 fe       	sbrs	r0, 7
     6ba:	fd cf       	rjmp	.-6      	; 0x6b6 <DataflashManager_ReadBlocks+0x13e>
				return SPDR;
     6bc:	8e b5       	in	r24, 0x2e	; 46
     6be:	80 93 f1 00 	sts	0x00F1, r24
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     6c2:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     6c4:	0d b4       	in	r0, 0x2d	; 45
     6c6:	07 fe       	sbrs	r0, 7
     6c8:	fd cf       	rjmp	.-6      	; 0x6c4 <DataflashManager_ReadBlocks+0x14c>
				return SPDR;
     6ca:	8e b5       	in	r24, 0x2e	; 46
     6cc:	80 93 f1 00 	sts	0x00F1, r24
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     6d0:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     6d2:	0d b4       	in	r0, 0x2d	; 45
     6d4:	07 fe       	sbrs	r0, 7
     6d6:	fd cf       	rjmp	.-6      	; 0x6d2 <DataflashManager_ReadBlocks+0x15a>
				return SPDR;
     6d8:	8e b5       	in	r24, 0x2e	; 46
     6da:	80 93 f1 00 	sts	0x00F1, r24
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     6de:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     6e0:	0d b4       	in	r0, 0x2d	; 45
     6e2:	07 fe       	sbrs	r0, 7
     6e4:	fd cf       	rjmp	.-6      	; 0x6e0 <DataflashManager_ReadBlocks+0x168>
				return SPDR;
     6e6:	8e b5       	in	r24, 0x2e	; 46
     6e8:	80 93 f1 00 	sts	0x00F1, r24
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     6ec:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     6ee:	0d b4       	in	r0, 0x2d	; 45
     6f0:	07 fe       	sbrs	r0, 7
     6f2:	fd cf       	rjmp	.-6      	; 0x6ee <DataflashManager_ReadBlocks+0x176>
				return SPDR;
     6f4:	8e b5       	in	r24, 0x2e	; 46
     6f6:	80 93 f1 00 	sts	0x00F1, r24
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     6fa:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     6fc:	0d b4       	in	r0, 0x2d	; 45
     6fe:	07 fe       	sbrs	r0, 7
     700:	fd cf       	rjmp	.-6      	; 0x6fc <DataflashManager_ReadBlocks+0x184>
				return SPDR;
     702:	8e b5       	in	r24, 0x2e	; 46
     704:	80 93 f1 00 	sts	0x00F1, r24
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     708:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     70a:	0d b4       	in	r0, 0x2d	; 45
     70c:	07 fe       	sbrs	r0, 7
     70e:	fd cf       	rjmp	.-6      	; 0x70a <DataflashManager_ReadBlocks+0x192>
				return SPDR;
     710:	8e b5       	in	r24, 0x2e	; 46
     712:	80 93 f1 00 	sts	0x00F1, r24
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     716:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     718:	0d b4       	in	r0, 0x2d	; 45
     71a:	07 fe       	sbrs	r0, 7
     71c:	fd cf       	rjmp	.-6      	; 0x718 <DataflashManager_ReadBlocks+0x1a0>
				return SPDR;
     71e:	8e b5       	in	r24, 0x2e	; 46
     720:	80 93 f1 00 	sts	0x00F1, r24
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     724:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     726:	0d b4       	in	r0, 0x2d	; 45
     728:	07 fe       	sbrs	r0, 7
     72a:	fd cf       	rjmp	.-6      	; 0x726 <DataflashManager_ReadBlocks+0x1ae>
				return SPDR;
     72c:	8e b5       	in	r24, 0x2e	; 46
     72e:	80 93 f1 00 	sts	0x00F1, r24
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     732:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     734:	0d b4       	in	r0, 0x2d	; 45
     736:	07 fe       	sbrs	r0, 7
     738:	fd cf       	rjmp	.-6      	; 0x734 <DataflashManager_ReadBlocks+0x1bc>
				return SPDR;
     73a:	8e b5       	in	r24, 0x2e	; 46
     73c:	80 93 f1 00 	sts	0x00F1, r24
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     740:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     742:	0d b4       	in	r0, 0x2d	; 45
     744:	07 fe       	sbrs	r0, 7
     746:	fd cf       	rjmp	.-6      	; 0x742 <DataflashManager_ReadBlocks+0x1ca>
				return SPDR;
     748:	8e b5       	in	r24, 0x2e	; 46
     74a:	80 93 f1 00 	sts	0x00F1, r24

			/* Increment the block 16 byte block counter */
			BytesInBlockDiv16++;

			/* Check if the current command is being aborted by the host */
			if (MSInterfaceInfo->State.IsMassStoreReset)
     74e:	f5 01       	movw	r30, r10
     750:	86 a9       	ldd	r24, Z+54	; 0x36
     752:	88 23       	and	r24, r24
     754:	c9 f4       	brne	.+50     	; 0x788 <DataflashManager_ReadBlocks+0x210>
			Endpoint_Write_Byte(Dataflash_ReceiveByte());
			Endpoint_Write_Byte(Dataflash_ReceiveByte());
			Endpoint_Write_Byte(Dataflash_ReceiveByte());

			/* Increment the Dataflash page 16 byte block counter */
			CurrDFPageByteDiv16++;
     756:	9f 5f       	subi	r25, 0xFF	; 255

			/* Increment the block 16 byte block counter */
			BytesInBlockDiv16++;
     758:	d3 94       	inc	r13
	while (TotalBlocks)
	{
		uint8_t BytesInBlockDiv16 = 0;

		/* Write an endpoint packet sized data block to the Dataflash */
		while (BytesInBlockDiv16 < (VIRTUAL_MEMORY_BLOCK_SIZE >> 4))
     75a:	f0 e2       	ldi	r31, 0x20	; 32
     75c:	df 16       	cp	r13, r31
     75e:	09 f0       	breq	.+2      	; 0x762 <DataflashManager_ReadBlocks+0x1ea>
     760:	58 cf       	rjmp	.-336    	; 0x612 <DataflashManager_ReadBlocks+0x9a>
			if (MSInterfaceInfo->State.IsMassStoreReset)
			  return;
		}

		/* Decrement the blocks remaining counter */
		TotalBlocks--;
     762:	08 94       	sec
     764:	e1 08       	sbc	r14, r1
     766:	f1 08       	sbc	r15, r1

	/* Wait until endpoint is ready before continuing */
	if (Endpoint_WaitUntilReady())
	  return;

	while (TotalBlocks)
     768:	e1 14       	cp	r14, r1
     76a:	f1 04       	cpc	r15, r1
     76c:	09 f0       	breq	.+2      	; 0x770 <DataflashManager_ReadBlocks+0x1f8>
     76e:	50 cf       	rjmp	.-352    	; 0x610 <DataflashManager_ReadBlocks+0x98>
			 *  \return Boolean true if the currently selected endpoint may be read from or written to, depending on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
     770:	80 91 e8 00 	lds	r24, 0x00E8
		/* Decrement the blocks remaining counter */
		TotalBlocks--;
	}

	/* If the endpoint is full, send its contents to the host */
	if (!(Endpoint_IsReadWriteAllowed()))
     774:	85 fd       	sbrc	r24, 5
     776:	05 c0       	rjmp	.+10     	; 0x782 <DataflashManager_ReadBlocks+0x20a>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     778:	80 91 e8 00 	lds	r24, 0x00E8
     77c:	8e 77       	andi	r24, 0x7E	; 126
     77e:	80 93 e8 00 	sts	0x00E8, r24
     782:	8e b1       	in	r24, 0x0e	; 14
     784:	83 60       	ori	r24, 0x03	; 3
     786:	8e b9       	out	0x0e, r24	; 14
	  Endpoint_ClearIN();

	/* Deselect all Dataflash chips */
	Dataflash_DeselectChip();
}
     788:	0f 90       	pop	r0
     78a:	cf 91       	pop	r28
     78c:	df 91       	pop	r29
     78e:	1f 91       	pop	r17
     790:	0f 91       	pop	r16
     792:	ff 90       	pop	r15
     794:	ef 90       	pop	r14
     796:	df 90       	pop	r13
     798:	cf 90       	pop	r12
     79a:	bf 90       	pop	r11
     79c:	af 90       	pop	r10
     79e:	08 95       	ret

000007a0 <DataflashManager_WriteBlocks>:
 *  \param[in] TotalBlocks   Number of blocks of data to write
 */
void DataflashManager_WriteBlocks(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo,
                                  const uint32_t BlockAddress,
                                  uint16_t TotalBlocks)
{
     7a0:	8f 92       	push	r8
     7a2:	9f 92       	push	r9
     7a4:	af 92       	push	r10
     7a6:	bf 92       	push	r11
     7a8:	cf 92       	push	r12
     7aa:	df 92       	push	r13
     7ac:	ef 92       	push	r14
     7ae:	ff 92       	push	r15
     7b0:	0f 93       	push	r16
     7b2:	1f 93       	push	r17
     7b4:	df 93       	push	r29
     7b6:	cf 93       	push	r28
     7b8:	0f 92       	push	r0
     7ba:	cd b7       	in	r28, 0x3d	; 61
     7bc:	de b7       	in	r29, 0x3e	; 62
     7be:	5c 01       	movw	r10, r24
     7c0:	79 01       	movw	r14, r18
	uint16_t CurrDFPage          = ((BlockAddress * VIRTUAL_MEMORY_BLOCK_SIZE) / DATAFLASH_PAGE_SIZE);
     7c2:	09 e0       	ldi	r16, 0x09	; 9
     7c4:	44 0f       	add	r20, r20
     7c6:	55 1f       	adc	r21, r21
     7c8:	66 1f       	adc	r22, r22
     7ca:	77 1f       	adc	r23, r23
     7cc:	0a 95       	dec	r16
     7ce:	d1 f7       	brne	.-12     	; 0x7c4 <DataflashManager_WriteBlocks+0x24>
     7d0:	db 01       	movw	r26, r22
     7d2:	ca 01       	movw	r24, r20
     7d4:	1a e0       	ldi	r17, 0x0A	; 10
     7d6:	b6 95       	lsr	r27
     7d8:	a7 95       	ror	r26
     7da:	97 95       	ror	r25
     7dc:	87 95       	ror	r24
     7de:	1a 95       	dec	r17
     7e0:	d1 f7       	brne	.-12     	; 0x7d6 <DataflashManager_WriteBlocks+0x36>
     7e2:	8c 01       	movw	r16, r24
	uint16_t CurrDFPageByte      = ((BlockAddress * VIRTUAL_MEMORY_BLOCK_SIZE) % DATAFLASH_PAGE_SIZE);
     7e4:	bf ef       	ldi	r27, 0xFF	; 255
     7e6:	cb 2e       	mov	r12, r27
     7e8:	b3 e0       	ldi	r27, 0x03	; 3
     7ea:	db 2e       	mov	r13, r27
     7ec:	c4 22       	and	r12, r20
     7ee:	d5 22       	and	r13, r21
	uint8_t  CurrDFPageByteDiv16 = (CurrDFPageByte >> 4);
	bool     UsingSecondBuffer   = false;

	/* Select the correct starting Dataflash IC for the block requested */
	Dataflash_SelectChipFromPage(CurrDFPage);
     7f0:	04 de       	rcall	.-1016   	; 0x3fa <Dataflash_SelectChipFromPage>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     7f2:	83 e5       	ldi	r24, 0x53	; 83
     7f4:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     7f6:	0d b4       	in	r0, 0x2d	; 45
     7f8:	07 fe       	sbrs	r0, 7
     7fa:	fd cf       	rjmp	.-6      	; 0x7f6 <DataflashManager_WriteBlocks+0x56>

#if (DATAFLASH_PAGE_SIZE > VIRTUAL_MEMORY_BLOCK_SIZE)
	/* Copy selected dataflash's current page contents to the Dataflash buffer */
	Dataflash_SendByte(DF_CMD_MAINMEMTOBUFF1);
	Dataflash_SendAddressBytes(CurrDFPage, 0);
     7fc:	c8 01       	movw	r24, r16
     7fe:	60 e0       	ldi	r22, 0x00	; 0
     800:	70 e0       	ldi	r23, 0x00	; 0
     802:	27 de       	rcall	.-946    	; 0x452 <Dataflash_SendAddressBytes>
	Dataflash_WaitWhileBusy();
     804:	18 de       	rcall	.-976    	; 0x436 <Dataflash_WaitWhileBusy>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     806:	84 e8       	ldi	r24, 0x84	; 132
     808:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     80a:	0d b4       	in	r0, 0x2d	; 45
     80c:	07 fe       	sbrs	r0, 7
     80e:	fd cf       	rjmp	.-6      	; 0x80a <DataflashManager_WriteBlocks+0x6a>
#endif

	/* Send the Dataflash buffer write command */
	Dataflash_SendByte(DF_CMD_BUFF1WRITE);
	Dataflash_SendAddressBytes(0, CurrDFPageByte);
     810:	80 e0       	ldi	r24, 0x00	; 0
     812:	90 e0       	ldi	r25, 0x00	; 0
     814:	b6 01       	movw	r22, r12
     816:	1d de       	rcall	.-966    	; 0x452 <Dataflash_SendAddressBytes>

	/* Wait until endpoint is ready before continuing */
	if (Endpoint_WaitUntilReady())
     818:	ec d2       	rcall	.+1496   	; 0xdf2 <Endpoint_WaitUntilReady>
     81a:	88 23       	and	r24, r24
     81c:	09 f0       	breq	.+2      	; 0x820 <DataflashManager_WriteBlocks+0x80>
     81e:	ea c0       	rjmp	.+468    	; 0x9f4 <DataflashManager_WriteBlocks+0x254>
                                  const uint32_t BlockAddress,
                                  uint16_t TotalBlocks)
{
	uint16_t CurrDFPage          = ((BlockAddress * VIRTUAL_MEMORY_BLOCK_SIZE) / DATAFLASH_PAGE_SIZE);
	uint16_t CurrDFPageByte      = ((BlockAddress * VIRTUAL_MEMORY_BLOCK_SIZE) % DATAFLASH_PAGE_SIZE);
	uint8_t  CurrDFPageByteDiv16 = (CurrDFPageByte >> 4);
     820:	a4 e0       	ldi	r26, 0x04	; 4
     822:	d6 94       	lsr	r13
     824:	c7 94       	ror	r12
     826:	aa 95       	dec	r26
     828:	e1 f7       	brne	.-8      	; 0x822 <DataflashManager_WriteBlocks+0x82>
     82a:	9c 2d       	mov	r25, r12
     82c:	47 01       	movw	r8, r14
     82e:	f5 e0       	ldi	r31, 0x05	; 5
     830:	88 0c       	add	r8, r8
     832:	99 1c       	adc	r9, r9
     834:	fa 95       	dec	r31
     836:	e1 f7       	brne	.-8      	; 0x830 <DataflashManager_WriteBlocks+0x90>
     838:	dd 24       	eor	r13, r13
     83a:	bd c0       	rjmp	.+378    	; 0x9b6 <DataflashManager_WriteBlocks+0x216>
     83c:	cc 24       	eor	r12, r12
			 *  \return Boolean true if the currently selected endpoint may be read from or written to, depending on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
     83e:	80 91 e8 00 	lds	r24, 0x00E8

		/* Write an endpoint packet sized data block to the Dataflash */
		while (BytesInBlockDiv16 < (VIRTUAL_MEMORY_BLOCK_SIZE >> 4))
		{
			/* Check if the endpoint is currently empty */
			if (!(Endpoint_IsReadWriteAllowed()))
     842:	85 fd       	sbrc	r24, 5
     844:	0b c0       	rjmp	.+22     	; 0x85c <DataflashManager_WriteBlocks+0xbc>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     846:	80 91 e8 00 	lds	r24, 0x00E8
     84a:	8b 77       	andi	r24, 0x7B	; 123
     84c:	80 93 e8 00 	sts	0x00E8, r24
			{
				/* Clear the current endpoint bank */
				Endpoint_ClearOUT();

				/* Wait until the host has sent another packet */
				if (Endpoint_WaitUntilReady())
     850:	99 83       	std	Y+1, r25	; 0x01
     852:	cf d2       	rcall	.+1438   	; 0xdf2 <Endpoint_WaitUntilReady>
     854:	99 81       	ldd	r25, Y+1	; 0x01
     856:	88 23       	and	r24, r24
     858:	09 f0       	breq	.+2      	; 0x85c <DataflashManager_WriteBlocks+0xbc>
     85a:	cc c0       	rjmp	.+408    	; 0x9f4 <DataflashManager_WriteBlocks+0x254>
				  return;
			}

			/* Check if end of Dataflash page reached */
			if (CurrDFPageByteDiv16 == (DATAFLASH_PAGE_SIZE >> 4))
     85c:	90 34       	cpi	r25, 0x40	; 64
     85e:	09 f0       	breq	.+2      	; 0x862 <DataflashManager_WriteBlocks+0xc2>
     860:	39 c0       	rjmp	.+114    	; 0x8d4 <DataflashManager_WriteBlocks+0x134>
			{
				/* Write the Dataflash buffer contents back to the Dataflash page */
				Dataflash_WaitWhileBusy();
     862:	e9 dd       	rcall	.-1070   	; 0x436 <Dataflash_WaitWhileBusy>
				Dataflash_SendByte(UsingSecondBuffer ? DF_CMD_BUFF2TOMAINMEMWITHERASE : DF_CMD_BUFF1TOMAINMEMWITHERASE);
     864:	dd 20       	and	r13, r13
     866:	11 f4       	brne	.+4      	; 0x86c <DataflashManager_WriteBlocks+0xcc>
     868:	83 e8       	ldi	r24, 0x83	; 131
     86a:	01 c0       	rjmp	.+2      	; 0x86e <DataflashManager_WriteBlocks+0xce>
     86c:	86 e8       	ldi	r24, 0x86	; 134
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     86e:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     870:	0d b4       	in	r0, 0x2d	; 45
     872:	07 fe       	sbrs	r0, 7
     874:	fd cf       	rjmp	.-6      	; 0x870 <DataflashManager_WriteBlocks+0xd0>
				Dataflash_SendAddressBytes(CurrDFPage, 0);
     876:	c8 01       	movw	r24, r16
     878:	60 e0       	ldi	r22, 0x00	; 0
     87a:	70 e0       	ldi	r23, 0x00	; 0
     87c:	ea dd       	rcall	.-1068   	; 0x452 <Dataflash_SendAddressBytes>

				/* Reset the Dataflash buffer counter, increment the page counter */
				CurrDFPageByteDiv16 = 0;
				CurrDFPage++;
     87e:	0f 5f       	subi	r16, 0xFF	; 255
     880:	1f 4f       	sbci	r17, 0xFF	; 255
			 *  or a DATAFLASH_CHIPn mask (where n is the chip number).
			 */
			static inline uint8_t Dataflash_GetSelectedChip(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t Dataflash_GetSelectedChip(void)
			{
				return (DATAFLASH_CHIPCS_PORT & DATAFLASH_CHIPCS_MASK);
     882:	8e b1       	in	r24, 0x0e	; 14

				/* Once all the Dataflash ICs have had their first buffers filled, switch buffers to maintain throughput */
				if (Dataflash_GetSelectedChip() == DATAFLASH_CHIP_MASK(DATAFLASH_TOTALCHIPS))
     884:	83 70       	andi	r24, 0x03	; 3
     886:	81 30       	cpi	r24, 0x01	; 1
     888:	09 f4       	brne	.+2      	; 0x88c <DataflashManager_WriteBlocks+0xec>
				  UsingSecondBuffer = !(UsingSecondBuffer);
     88a:	d8 26       	eor	r13, r24

				/* Select the next Dataflash chip based on the new Dataflash page index */
				Dataflash_SelectChipFromPage(CurrDFPage);
     88c:	c8 01       	movw	r24, r16
     88e:	b5 dd       	rcall	.-1174   	; 0x3fa <Dataflash_SelectChipFromPage>

#if (DATAFLASH_PAGE_SIZE > VIRTUAL_MEMORY_BLOCK_SIZE)
				/* If less than one Dataflash page remaining, copy over the existing page to preserve trailing data */
				if ((TotalBlocks * (VIRTUAL_MEMORY_BLOCK_SIZE >> 4)) < (DATAFLASH_PAGE_SIZE >> 4))
     890:	20 e4       	ldi	r18, 0x40	; 64
     892:	82 16       	cp	r8, r18
     894:	91 04       	cpc	r9, r1
     896:	78 f4       	brcc	.+30     	; 0x8b6 <DataflashManager_WriteBlocks+0x116>
				{
					/* Copy selected dataflash's current page contents to the Dataflash buffer */
					Dataflash_WaitWhileBusy();
     898:	ce dd       	rcall	.-1124   	; 0x436 <Dataflash_WaitWhileBusy>
					Dataflash_SendByte(UsingSecondBuffer ? DF_CMD_MAINMEMTOBUFF2 : DF_CMD_MAINMEMTOBUFF1);
     89a:	dd 20       	and	r13, r13
     89c:	11 f4       	brne	.+4      	; 0x8a2 <DataflashManager_WriteBlocks+0x102>
     89e:	83 e5       	ldi	r24, 0x53	; 83
     8a0:	01 c0       	rjmp	.+2      	; 0x8a4 <DataflashManager_WriteBlocks+0x104>
     8a2:	85 e5       	ldi	r24, 0x55	; 85
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     8a4:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     8a6:	0d b4       	in	r0, 0x2d	; 45
     8a8:	07 fe       	sbrs	r0, 7
     8aa:	fd cf       	rjmp	.-6      	; 0x8a6 <DataflashManager_WriteBlocks+0x106>
					Dataflash_SendAddressBytes(CurrDFPage, 0);
     8ac:	c8 01       	movw	r24, r16
     8ae:	60 e0       	ldi	r22, 0x00	; 0
     8b0:	70 e0       	ldi	r23, 0x00	; 0
     8b2:	cf dd       	rcall	.-1122   	; 0x452 <Dataflash_SendAddressBytes>
					Dataflash_WaitWhileBusy();
     8b4:	c0 dd       	rcall	.-1152   	; 0x436 <Dataflash_WaitWhileBusy>
				}
#endif

				/* Send the Dataflash buffer write command */
				Dataflash_SendByte(UsingSecondBuffer ? DF_CMD_BUFF2WRITE : DF_CMD_BUFF1WRITE);
     8b6:	dd 20       	and	r13, r13
     8b8:	11 f4       	brne	.+4      	; 0x8be <DataflashManager_WriteBlocks+0x11e>
     8ba:	84 e8       	ldi	r24, 0x84	; 132
     8bc:	01 c0       	rjmp	.+2      	; 0x8c0 <DataflashManager_WriteBlocks+0x120>
     8be:	87 e8       	ldi	r24, 0x87	; 135
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     8c0:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     8c2:	0d b4       	in	r0, 0x2d	; 45
     8c4:	07 fe       	sbrs	r0, 7
     8c6:	fd cf       	rjmp	.-6      	; 0x8c2 <DataflashManager_WriteBlocks+0x122>
				Dataflash_SendAddressBytes(0, 0);
     8c8:	80 e0       	ldi	r24, 0x00	; 0
     8ca:	90 e0       	ldi	r25, 0x00	; 0
     8cc:	60 e0       	ldi	r22, 0x00	; 0
     8ce:	70 e0       	ldi	r23, 0x00	; 0
     8d0:	c0 dd       	rcall	.-1152   	; 0x452 <Dataflash_SendAddressBytes>
     8d2:	90 e0       	ldi	r25, 0x00	; 0
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_Byte(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_Byte(void)
			{
				return UEDATX;
     8d4:	80 91 f1 00 	lds	r24, 0x00F1
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     8d8:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     8da:	0d b4       	in	r0, 0x2d	; 45
     8dc:	07 fe       	sbrs	r0, 7
     8de:	fd cf       	rjmp	.-6      	; 0x8da <DataflashManager_WriteBlocks+0x13a>
     8e0:	80 91 f1 00 	lds	r24, 0x00F1
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     8e4:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     8e6:	0d b4       	in	r0, 0x2d	; 45
     8e8:	07 fe       	sbrs	r0, 7
     8ea:	fd cf       	rjmp	.-6      	; 0x8e6 <DataflashManager_WriteBlocks+0x146>
     8ec:	80 91 f1 00 	lds	r24, 0x00F1
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     8f0:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     8f2:	0d b4       	in	r0, 0x2d	; 45
     8f4:	07 fe       	sbrs	r0, 7
     8f6:	fd cf       	rjmp	.-6      	; 0x8f2 <DataflashManager_WriteBlocks+0x152>
     8f8:	80 91 f1 00 	lds	r24, 0x00F1
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     8fc:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     8fe:	0d b4       	in	r0, 0x2d	; 45
     900:	07 fe       	sbrs	r0, 7
     902:	fd cf       	rjmp	.-6      	; 0x8fe <DataflashManager_WriteBlocks+0x15e>
     904:	80 91 f1 00 	lds	r24, 0x00F1
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     908:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     90a:	0d b4       	in	r0, 0x2d	; 45
     90c:	07 fe       	sbrs	r0, 7
     90e:	fd cf       	rjmp	.-6      	; 0x90a <DataflashManager_WriteBlocks+0x16a>
     910:	80 91 f1 00 	lds	r24, 0x00F1
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     914:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     916:	0d b4       	in	r0, 0x2d	; 45
     918:	07 fe       	sbrs	r0, 7
     91a:	fd cf       	rjmp	.-6      	; 0x916 <DataflashManager_WriteBlocks+0x176>
     91c:	80 91 f1 00 	lds	r24, 0x00F1
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     920:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     922:	0d b4       	in	r0, 0x2d	; 45
     924:	07 fe       	sbrs	r0, 7
     926:	fd cf       	rjmp	.-6      	; 0x922 <DataflashManager_WriteBlocks+0x182>
     928:	80 91 f1 00 	lds	r24, 0x00F1
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     92c:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     92e:	0d b4       	in	r0, 0x2d	; 45
     930:	07 fe       	sbrs	r0, 7
     932:	fd cf       	rjmp	.-6      	; 0x92e <DataflashManager_WriteBlocks+0x18e>
     934:	80 91 f1 00 	lds	r24, 0x00F1
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     938:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     93a:	0d b4       	in	r0, 0x2d	; 45
     93c:	07 fe       	sbrs	r0, 7
     93e:	fd cf       	rjmp	.-6      	; 0x93a <DataflashManager_WriteBlocks+0x19a>
     940:	80 91 f1 00 	lds	r24, 0x00F1
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     944:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     946:	0d b4       	in	r0, 0x2d	; 45
     948:	07 fe       	sbrs	r0, 7
     94a:	fd cf       	rjmp	.-6      	; 0x946 <DataflashManager_WriteBlocks+0x1a6>
     94c:	80 91 f1 00 	lds	r24, 0x00F1
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     950:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     952:	0d b4       	in	r0, 0x2d	; 45
     954:	07 fe       	sbrs	r0, 7
     956:	fd cf       	rjmp	.-6      	; 0x952 <DataflashManager_WriteBlocks+0x1b2>
     958:	80 91 f1 00 	lds	r24, 0x00F1
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     95c:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     95e:	0d b4       	in	r0, 0x2d	; 45
     960:	07 fe       	sbrs	r0, 7
     962:	fd cf       	rjmp	.-6      	; 0x95e <DataflashManager_WriteBlocks+0x1be>
     964:	80 91 f1 00 	lds	r24, 0x00F1
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     968:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     96a:	0d b4       	in	r0, 0x2d	; 45
     96c:	07 fe       	sbrs	r0, 7
     96e:	fd cf       	rjmp	.-6      	; 0x96a <DataflashManager_WriteBlocks+0x1ca>
     970:	80 91 f1 00 	lds	r24, 0x00F1
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     974:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     976:	0d b4       	in	r0, 0x2d	; 45
     978:	07 fe       	sbrs	r0, 7
     97a:	fd cf       	rjmp	.-6      	; 0x976 <DataflashManager_WriteBlocks+0x1d6>
     97c:	80 91 f1 00 	lds	r24, 0x00F1
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     980:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     982:	0d b4       	in	r0, 0x2d	; 45
     984:	07 fe       	sbrs	r0, 7
     986:	fd cf       	rjmp	.-6      	; 0x982 <DataflashManager_WriteBlocks+0x1e2>
     988:	80 91 f1 00 	lds	r24, 0x00F1
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     98c:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     98e:	0d b4       	in	r0, 0x2d	; 45
     990:	07 fe       	sbrs	r0, 7
     992:	fd cf       	rjmp	.-6      	; 0x98e <DataflashManager_WriteBlocks+0x1ee>

			/* Increment the block 16 byte block counter */
			BytesInBlockDiv16++;

			/* Check if the current command is being aborted by the host */
			if (MSInterfaceInfo->State.IsMassStoreReset)
     994:	f5 01       	movw	r30, r10
     996:	86 a9       	ldd	r24, Z+54	; 0x36
     998:	88 23       	and	r24, r24
     99a:	61 f5       	brne	.+88     	; 0x9f4 <DataflashManager_WriteBlocks+0x254>
			Dataflash_SendByte(Endpoint_Read_Byte());
			Dataflash_SendByte(Endpoint_Read_Byte());
			Dataflash_SendByte(Endpoint_Read_Byte());

			/* Increment the Dataflash page 16 byte block counter */
			CurrDFPageByteDiv16++;
     99c:	9f 5f       	subi	r25, 0xFF	; 255

			/* Increment the block 16 byte block counter */
			BytesInBlockDiv16++;
     99e:	c3 94       	inc	r12
	while (TotalBlocks)
	{
		uint8_t BytesInBlockDiv16 = 0;

		/* Write an endpoint packet sized data block to the Dataflash */
		while (BytesInBlockDiv16 < (VIRTUAL_MEMORY_BLOCK_SIZE >> 4))
     9a0:	f0 e2       	ldi	r31, 0x20	; 32
     9a2:	cf 16       	cp	r12, r31
     9a4:	09 f0       	breq	.+2      	; 0x9a8 <DataflashManager_WriteBlocks+0x208>
     9a6:	4b cf       	rjmp	.-362    	; 0x83e <DataflashManager_WriteBlocks+0x9e>
			if (MSInterfaceInfo->State.IsMassStoreReset)
			  return;
		}

		/* Decrement the blocks remaining counter and reset the sub block counter */
		TotalBlocks--;
     9a8:	08 94       	sec
     9aa:	e1 08       	sbc	r14, r1
     9ac:	f1 08       	sbc	r15, r1
     9ae:	20 ee       	ldi	r18, 0xE0	; 224
     9b0:	3f ef       	ldi	r19, 0xFF	; 255
     9b2:	82 0e       	add	r8, r18
     9b4:	93 1e       	adc	r9, r19

	/* Wait until endpoint is ready before continuing */
	if (Endpoint_WaitUntilReady())
	  return;

	while (TotalBlocks)
     9b6:	e1 14       	cp	r14, r1
     9b8:	f1 04       	cpc	r15, r1
     9ba:	09 f0       	breq	.+2      	; 0x9be <DataflashManager_WriteBlocks+0x21e>
     9bc:	3f cf       	rjmp	.-386    	; 0x83c <DataflashManager_WriteBlocks+0x9c>
		/* Decrement the blocks remaining counter and reset the sub block counter */
		TotalBlocks--;
	}

	/* Write the Dataflash buffer contents back to the Dataflash page */
	Dataflash_WaitWhileBusy();
     9be:	3b dd       	rcall	.-1418   	; 0x436 <Dataflash_WaitWhileBusy>
	Dataflash_SendByte(UsingSecondBuffer ? DF_CMD_BUFF2TOMAINMEMWITHERASE : DF_CMD_BUFF1TOMAINMEMWITHERASE);
     9c0:	dd 20       	and	r13, r13
     9c2:	11 f4       	brne	.+4      	; 0x9c8 <DataflashManager_WriteBlocks+0x228>
     9c4:	83 e8       	ldi	r24, 0x83	; 131
     9c6:	01 c0       	rjmp	.+2      	; 0x9ca <DataflashManager_WriteBlocks+0x22a>
     9c8:	86 e8       	ldi	r24, 0x86	; 134
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     9ca:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     9cc:	0d b4       	in	r0, 0x2d	; 45
     9ce:	07 fe       	sbrs	r0, 7
     9d0:	fd cf       	rjmp	.-6      	; 0x9cc <DataflashManager_WriteBlocks+0x22c>
	Dataflash_SendAddressBytes(CurrDFPage, 0x00);
     9d2:	c8 01       	movw	r24, r16
     9d4:	60 e0       	ldi	r22, 0x00	; 0
     9d6:	70 e0       	ldi	r23, 0x00	; 0
     9d8:	3c dd       	rcall	.-1416   	; 0x452 <Dataflash_SendAddressBytes>
	Dataflash_WaitWhileBusy();
     9da:	2d dd       	rcall	.-1446   	; 0x436 <Dataflash_WaitWhileBusy>
			 *  \return Boolean true if the currently selected endpoint may be read from or written to, depending on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
     9dc:	80 91 e8 00 	lds	r24, 0x00E8

	/* If the endpoint is empty, clear it ready for the next packet from the host */
	if (!(Endpoint_IsReadWriteAllowed()))
     9e0:	85 fd       	sbrc	r24, 5
     9e2:	05 c0       	rjmp	.+10     	; 0x9ee <DataflashManager_WriteBlocks+0x24e>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     9e4:	80 91 e8 00 	lds	r24, 0x00E8
     9e8:	8b 77       	andi	r24, 0x7B	; 123
     9ea:	80 93 e8 00 	sts	0x00E8, r24
			 *              the chip number).
			 */
			static inline void Dataflash_SelectChip(const uint8_t ChipMask) ATTR_ALWAYS_INLINE;
			static inline void Dataflash_SelectChip(const uint8_t ChipMask)
			{
				DATAFLASH_CHIPCS_PORT = ((DATAFLASH_CHIPCS_PORT & ~DATAFLASH_CHIPCS_MASK) | ChipMask);
     9ee:	8e b1       	in	r24, 0x0e	; 14
     9f0:	83 60       	ori	r24, 0x03	; 3
     9f2:	8e b9       	out	0x0e, r24	; 14
	  Endpoint_ClearOUT();

	/* Deselect all Dataflash chips */
	Dataflash_DeselectChip();
}
     9f4:	0f 90       	pop	r0
     9f6:	cf 91       	pop	r28
     9f8:	df 91       	pop	r29
     9fa:	1f 91       	pop	r17
     9fc:	0f 91       	pop	r16
     9fe:	ff 90       	pop	r15
     a00:	ef 90       	pop	r14
     a02:	df 90       	pop	r13
     a04:	cf 90       	pop	r12
     a06:	bf 90       	pop	r11
     a08:	af 90       	pop	r10
     a0a:	9f 90       	pop	r9
     a0c:	8f 90       	pop	r8
     a0e:	08 95       	ret

00000a10 <SCSI_Command_Inquiry>:
 *  \param[in] MSInterfaceInfo  Pointer to the Mass Storage class interface structure that the command is associated with
 *
 *  \return Boolean true if the command completed successfully, false otherwise.
 */
static bool SCSI_Command_Inquiry(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
     a10:	af 92       	push	r10
     a12:	bf 92       	push	r11
     a14:	cf 92       	push	r12
     a16:	df 92       	push	r13
     a18:	ef 92       	push	r14
     a1a:	ff 92       	push	r15
     a1c:	0f 93       	push	r16
     a1e:	1f 93       	push	r17
     a20:	df 93       	push	r29
     a22:	cf 93       	push	r28
     a24:	cd b7       	in	r28, 0x3d	; 61
     a26:	de b7       	in	r29, 0x3e	; 62
     a28:	6c 01       	movw	r12, r24

	/* Succeed the command and update the bytes transferred counter */
	MSInterfaceInfo->State.CommandBlock.DataTransferLength -= BytesTransferred;

	return true;
}
     a2a:	ad b6       	in	r10, 0x3d	; 61
     a2c:	be b6       	in	r11, 0x3e	; 62

				Temp = Data.Bytes[0];
				Data.Bytes[0] = Data.Bytes[1];
				Data.Bytes[1] = Temp;

				return Data.Word;
     a2e:	fc 01       	movw	r30, r24
     a30:	05 8d       	ldd	r16, Z+29	; 0x1d
     a32:	14 8d       	ldd	r17, Z+28	; 0x1c
	uint16_t AllocationLength  = SwapEndian_16(*(uint16_t*)&MSInterfaceInfo->State.CommandBlock.SCSICommandData[3]);
	uint16_t BytesTransferred  = (AllocationLength < sizeof(InquiryData))? AllocationLength :
	                                                                       sizeof(InquiryData);

	/* Only the standard INQUIRY data is supported, check if any optional INQUIRY bits set */
	if ((MSInterfaceInfo->State.CommandBlock.SCSICommandData[1] & ((1 << 0) | (1 << 1))) ||
     a34:	82 8d       	ldd	r24, Z+26	; 0x1a
     a36:	90 e0       	ldi	r25, 0x00	; 0
     a38:	83 70       	andi	r24, 0x03	; 3
     a3a:	90 70       	andi	r25, 0x00	; 0
     a3c:	89 2b       	or	r24, r25
     a3e:	19 f4       	brne	.+6      	; 0xa46 <SCSI_Command_Inquiry+0x36>
     a40:	83 8d       	ldd	r24, Z+27	; 0x1b
     a42:	88 23       	and	r24, r24
     a44:	69 f0       	breq	.+26     	; 0xa60 <SCSI_Command_Inquiry+0x50>
	     MSInterfaceInfo->State.CommandBlock.SCSICommandData[2])
	{
		/* Optional but unsupported bits set - update the SENSE key and fail the request */
		SCSI_SET_SENSE(SCSI_SENSE_KEY_ILLEGAL_REQUEST,
     a46:	80 91 6a 01 	lds	r24, 0x016A
     a4a:	80 7f       	andi	r24, 0xF0	; 240
     a4c:	85 60       	ori	r24, 0x05	; 5
     a4e:	80 93 6a 01 	sts	0x016A, r24
     a52:	84 e2       	ldi	r24, 0x24	; 36
     a54:	80 93 74 01 	sts	0x0174, r24
     a58:	10 92 75 01 	sts	0x0175, r1
     a5c:	80 e0       	ldi	r24, 0x00	; 0
     a5e:	33 c0       	rjmp	.+102    	; 0xac6 <SCSI_Command_Inquiry+0xb6>
 */
static bool SCSI_Command_Inquiry(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
	uint16_t AllocationLength  = SwapEndian_16(*(uint16_t*)&MSInterfaceInfo->State.CommandBlock.SCSICommandData[3]);
	uint16_t BytesTransferred  = (AllocationLength < sizeof(InquiryData))? AllocationLength :
	                                                                       sizeof(InquiryData);
     a60:	78 01       	movw	r14, r16
     a62:	05 32       	cpi	r16, 0x25	; 37
     a64:	11 05       	cpc	r17, r1
     a66:	18 f0       	brcs	.+6      	; 0xa6e <SCSI_Command_Inquiry+0x5e>
     a68:	84 e2       	ldi	r24, 0x24	; 36
     a6a:	e8 2e       	mov	r14, r24
     a6c:	f1 2c       	mov	r15, r1
		               SCSI_ASENSEQ_NO_QUALIFIER);

		return false;
	}

	Endpoint_Write_Stream_LE(&InquiryData, BytesTransferred, NO_STREAM_CALLBACK);
     a6e:	84 e4       	ldi	r24, 0x44	; 68
     a70:	91 e0       	ldi	r25, 0x01	; 1
     a72:	b7 01       	movw	r22, r14
     a74:	40 e0       	ldi	r20, 0x00	; 0
     a76:	50 e0       	ldi	r21, 0x00	; 0
     a78:	3d d6       	rcall	.+3194   	; 0x16f4 <Endpoint_Write_Stream_LE>

	uint8_t PadBytes[AllocationLength - BytesTransferred];
     a7a:	b8 01       	movw	r22, r16
     a7c:	6e 19       	sub	r22, r14
     a7e:	7f 09       	sbc	r23, r15
     a80:	8d b7       	in	r24, 0x3d	; 61
     a82:	9e b7       	in	r25, 0x3e	; 62
     a84:	86 1b       	sub	r24, r22
     a86:	97 0b       	sbc	r25, r23
     a88:	0f b6       	in	r0, 0x3f	; 63
     a8a:	f8 94       	cli
     a8c:	9e bf       	out	0x3e, r25	; 62
     a8e:	0f be       	out	0x3f, r0	; 63
     a90:	8d bf       	out	0x3d, r24	; 61

	/* Pad out remaining bytes with 0x00 */
	Endpoint_Write_Stream_LE(&PadBytes, sizeof(PadBytes), NO_STREAM_CALLBACK);
     a92:	01 96       	adiw	r24, 0x01	; 1
     a94:	40 e0       	ldi	r20, 0x00	; 0
     a96:	50 e0       	ldi	r21, 0x00	; 0
     a98:	2d d6       	rcall	.+3162   	; 0x16f4 <Endpoint_Write_Stream_LE>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     a9a:	80 91 e8 00 	lds	r24, 0x00E8
     a9e:	8e 77       	andi	r24, 0x7E	; 126
     aa0:	80 93 e8 00 	sts	0x00E8, r24

	/* Finalize the stream transfer to send the last packet */
	Endpoint_ClearIN();

	/* Succeed the command and update the bytes transferred counter */
	MSInterfaceInfo->State.CommandBlock.DataTransferLength -= BytesTransferred;
     aa4:	97 01       	movw	r18, r14
     aa6:	40 e0       	ldi	r20, 0x00	; 0
     aa8:	50 e0       	ldi	r21, 0x00	; 0
     aaa:	f6 01       	movw	r30, r12
     aac:	82 89       	ldd	r24, Z+18	; 0x12
     aae:	93 89       	ldd	r25, Z+19	; 0x13
     ab0:	a4 89       	ldd	r26, Z+20	; 0x14
     ab2:	b5 89       	ldd	r27, Z+21	; 0x15
     ab4:	82 1b       	sub	r24, r18
     ab6:	93 0b       	sbc	r25, r19
     ab8:	a4 0b       	sbc	r26, r20
     aba:	b5 0b       	sbc	r27, r21
     abc:	82 8b       	std	Z+18, r24	; 0x12
     abe:	93 8b       	std	Z+19, r25	; 0x13
     ac0:	a4 8b       	std	Z+20, r26	; 0x14
     ac2:	b5 8b       	std	Z+21, r27	; 0x15
     ac4:	81 e0       	ldi	r24, 0x01	; 1

	return true;
}
     ac6:	0f b6       	in	r0, 0x3f	; 63
     ac8:	f8 94       	cli
     aca:	be be       	out	0x3e, r11	; 62
     acc:	0f be       	out	0x3f, r0	; 63
     ace:	ad be       	out	0x3d, r10	; 61
     ad0:	cf 91       	pop	r28
     ad2:	df 91       	pop	r29
     ad4:	1f 91       	pop	r17
     ad6:	0f 91       	pop	r16
     ad8:	ff 90       	pop	r15
     ada:	ef 90       	pop	r14
     adc:	df 90       	pop	r13
     ade:	cf 90       	pop	r12
     ae0:	bf 90       	pop	r11
     ae2:	af 90       	pop	r10
     ae4:	08 95       	ret

00000ae6 <SCSI_Command_Request_Sense>:
 *  \param[in] MSInterfaceInfo  Pointer to the Mass Storage class interface structure that the command is associated with
 *
 *  \return Boolean true if the command completed successfully, false otherwise.
 */
static bool SCSI_Command_Request_Sense(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
     ae6:	8f 92       	push	r8
     ae8:	9f 92       	push	r9
     aea:	bf 92       	push	r11
     aec:	cf 92       	push	r12
     aee:	df 92       	push	r13
     af0:	ef 92       	push	r14
     af2:	ff 92       	push	r15
     af4:	0f 93       	push	r16
     af6:	1f 93       	push	r17
     af8:	df 93       	push	r29
     afa:	cf 93       	push	r28
     afc:	cd b7       	in	r28, 0x3d	; 61
     afe:	de b7       	in	r29, 0x3e	; 62
     b00:	6c 01       	movw	r12, r24

	/* Succeed the command and update the bytes transferred counter */
	MSInterfaceInfo->State.CommandBlock.DataTransferLength -= BytesTransferred;

	return true;
}
     b02:	8d b6       	in	r8, 0x3d	; 61
     b04:	9e b6       	in	r9, 0x3e	; 62
 *
 *  \return Boolean true if the command completed successfully, false otherwise.
 */
static bool SCSI_Command_Request_Sense(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
	uint8_t  AllocationLength = MSInterfaceInfo->State.CommandBlock.SCSICommandData[4];
     b06:	fc 01       	movw	r30, r24
     b08:	05 8d       	ldd	r16, Z+29	; 0x1d
	uint8_t  BytesTransferred = (AllocationLength < sizeof(SenseData))? AllocationLength : sizeof(SenseData);
     b0a:	b0 2e       	mov	r11, r16
     b0c:	03 31       	cpi	r16, 0x13	; 19
     b0e:	10 f0       	brcs	.+4      	; 0xb14 <SCSI_Command_Request_Sense+0x2e>
     b10:	92 e1       	ldi	r25, 0x12	; 18
     b12:	b9 2e       	mov	r11, r25

	uint8_t PadBytes[AllocationLength - BytesTransferred];
     b14:	10 e0       	ldi	r17, 0x00	; 0
     b16:	0b 19       	sub	r16, r11
     b18:	11 09       	sbc	r17, r1
     b1a:	8d b7       	in	r24, 0x3d	; 61
     b1c:	9e b7       	in	r25, 0x3e	; 62
     b1e:	80 1b       	sub	r24, r16
     b20:	91 0b       	sbc	r25, r17
     b22:	0f b6       	in	r0, 0x3f	; 63
     b24:	f8 94       	cli
     b26:	9e bf       	out	0x3e, r25	; 62
     b28:	0f be       	out	0x3f, r0	; 63
     b2a:	8d bf       	out	0x3d, r24	; 61
     b2c:	ed b6       	in	r14, 0x3d	; 61
     b2e:	fe b6       	in	r15, 0x3e	; 62
     b30:	08 94       	sec
     b32:	e1 1c       	adc	r14, r1
     b34:	f1 1c       	adc	r15, r1

	Endpoint_Write_Stream_LE(&SenseData, BytesTransferred, NO_STREAM_CALLBACK);
     b36:	88 e6       	ldi	r24, 0x68	; 104
     b38:	91 e0       	ldi	r25, 0x01	; 1
     b3a:	6b 2d       	mov	r22, r11
     b3c:	70 e0       	ldi	r23, 0x00	; 0
     b3e:	40 e0       	ldi	r20, 0x00	; 0
     b40:	50 e0       	ldi	r21, 0x00	; 0
     b42:	d8 d5       	rcall	.+2992   	; 0x16f4 <Endpoint_Write_Stream_LE>
	Endpoint_Write_Stream_LE(&PadBytes, sizeof(PadBytes), NO_STREAM_CALLBACK);
     b44:	c7 01       	movw	r24, r14
     b46:	b8 01       	movw	r22, r16
     b48:	40 e0       	ldi	r20, 0x00	; 0
     b4a:	50 e0       	ldi	r21, 0x00	; 0
     b4c:	d3 d5       	rcall	.+2982   	; 0x16f4 <Endpoint_Write_Stream_LE>
     b4e:	80 91 e8 00 	lds	r24, 0x00E8
     b52:	8e 77       	andi	r24, 0x7E	; 126
     b54:	80 93 e8 00 	sts	0x00E8, r24
	Endpoint_ClearIN();

	/* Succeed the command and update the bytes transferred counter */
	MSInterfaceInfo->State.CommandBlock.DataTransferLength -= BytesTransferred;
     b58:	f6 01       	movw	r30, r12
     b5a:	82 89       	ldd	r24, Z+18	; 0x12
     b5c:	93 89       	ldd	r25, Z+19	; 0x13
     b5e:	a4 89       	ldd	r26, Z+20	; 0x14
     b60:	b5 89       	ldd	r27, Z+21	; 0x15
     b62:	8b 19       	sub	r24, r11
     b64:	91 09       	sbc	r25, r1
     b66:	a1 09       	sbc	r26, r1
     b68:	b1 09       	sbc	r27, r1
     b6a:	82 8b       	std	Z+18, r24	; 0x12
     b6c:	93 8b       	std	Z+19, r25	; 0x13
     b6e:	a4 8b       	std	Z+20, r26	; 0x14
     b70:	b5 8b       	std	Z+21, r27	; 0x15

	return true;
}
     b72:	81 e0       	ldi	r24, 0x01	; 1
     b74:	0f b6       	in	r0, 0x3f	; 63
     b76:	f8 94       	cli
     b78:	9e be       	out	0x3e, r9	; 62
     b7a:	0f be       	out	0x3f, r0	; 63
     b7c:	8d be       	out	0x3d, r8	; 61
     b7e:	cf 91       	pop	r28
     b80:	df 91       	pop	r29
     b82:	1f 91       	pop	r17
     b84:	0f 91       	pop	r16
     b86:	ff 90       	pop	r15
     b88:	ef 90       	pop	r14
     b8a:	df 90       	pop	r13
     b8c:	cf 90       	pop	r12
     b8e:	bf 90       	pop	r11
     b90:	9f 90       	pop	r9
     b92:	8f 90       	pop	r8
     b94:	08 95       	ret

00000b96 <SCSI_Command_ReadWrite_10>:
 *
 *  \return Boolean true if the command completed successfully, false otherwise.
 */
static bool SCSI_Command_ReadWrite_10(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo,
                                      const bool IsDataRead)
{
     b96:	0f 93       	push	r16
     b98:	1f 93       	push	r17
     b9a:	cf 93       	push	r28
     b9c:	df 93       	push	r29
     b9e:	8c 01       	movw	r16, r24
     ba0:	86 2f       	mov	r24, r22

				Temp = Data.Bytes[1];
				Data.Bytes[1] = Data.Bytes[2];
				Data.Bytes[2] = Temp;

				return Data.DWord;
     ba2:	f8 01       	movw	r30, r16
     ba4:	46 8d       	ldd	r20, Z+30	; 0x1e
     ba6:	55 8d       	ldd	r21, Z+29	; 0x1d
     ba8:	64 8d       	ldd	r22, Z+28	; 0x1c
     baa:	73 8d       	ldd	r23, Z+27	; 0x1b

				Temp = Data.Bytes[0];
				Data.Bytes[0] = Data.Bytes[1];
				Data.Bytes[1] = Temp;

				return Data.Word;
     bac:	c1 a1       	ldd	r28, Z+33	; 0x21
     bae:	d0 a1       	ldd	r29, Z+32	; 0x20

	/* Load in the 16-bit total blocks (SCSI uses big-endian, so have to reverse the byte order) */
	TotalBlocks  = SwapEndian_16(*(uint16_t*)&MSInterfaceInfo->State.CommandBlock.SCSICommandData[7]);

	/* Check if the block address is outside the maximum allowable value for the LUN */
	if (BlockAddress >= LUN_MEDIA_BLOCKS)
     bb0:	40 30       	cpi	r20, 0x00	; 0
     bb2:	f0 e8       	ldi	r31, 0x80	; 128
     bb4:	5f 07       	cpc	r21, r31
     bb6:	f0 e0       	ldi	r31, 0x00	; 0
     bb8:	6f 07       	cpc	r22, r31
     bba:	f0 e0       	ldi	r31, 0x00	; 0
     bbc:	7f 07       	cpc	r23, r31
     bbe:	68 f0       	brcs	.+26     	; 0xbda <SCSI_Command_ReadWrite_10+0x44>
	{
		/* Block address is invalid, update SENSE key and return command fail */
		SCSI_SET_SENSE(SCSI_SENSE_KEY_ILLEGAL_REQUEST,
     bc0:	80 91 6a 01 	lds	r24, 0x016A
     bc4:	80 7f       	andi	r24, 0xF0	; 240
     bc6:	85 60       	ori	r24, 0x05	; 5
     bc8:	80 93 6a 01 	sts	0x016A, r24
     bcc:	81 e2       	ldi	r24, 0x21	; 33
     bce:	80 93 74 01 	sts	0x0174, r24
     bd2:	10 92 75 01 	sts	0x0175, r1
     bd6:	80 e0       	ldi	r24, 0x00	; 0
     bd8:	21 c0       	rjmp	.+66     	; 0xc1c <SCSI_Command_ReadWrite_10+0x86>
	/* Adjust the given block address to the real media address based on the selected LUN */
	BlockAddress += ((uint32_t)MSInterfaceInfo->State.CommandBlock.LUN * LUN_MEDIA_BLOCKS);
	#endif

	/* Determine if the packet is a READ (10) or WRITE (10) command, call appropriate function */
	if (IsDataRead == DATA_READ)
     bda:	88 23       	and	r24, r24
     bdc:	21 f0       	breq	.+8      	; 0xbe6 <SCSI_Command_ReadWrite_10+0x50>
	  DataflashManager_ReadBlocks(MSInterfaceInfo, BlockAddress, TotalBlocks);
     bde:	c8 01       	movw	r24, r16
     be0:	9e 01       	movw	r18, r28
     be2:	ca dc       	rcall	.-1644   	; 0x578 <DataflashManager_ReadBlocks>
     be4:	03 c0       	rjmp	.+6      	; 0xbec <SCSI_Command_ReadWrite_10+0x56>
	else
	  DataflashManager_WriteBlocks(MSInterfaceInfo, BlockAddress, TotalBlocks);
     be6:	c8 01       	movw	r24, r16
     be8:	9e 01       	movw	r18, r28
     bea:	da dd       	rcall	.-1100   	; 0x7a0 <DataflashManager_WriteBlocks>

	/* Update the bytes transferred counter and succeed the command */
	MSInterfaceInfo->State.CommandBlock.DataTransferLength -= ((uint32_t)TotalBlocks * VIRTUAL_MEMORY_BLOCK_SIZE);
     bec:	9e 01       	movw	r18, r28
     bee:	40 e0       	ldi	r20, 0x00	; 0
     bf0:	50 e0       	ldi	r21, 0x00	; 0
     bf2:	69 e0       	ldi	r22, 0x09	; 9
     bf4:	22 0f       	add	r18, r18
     bf6:	33 1f       	adc	r19, r19
     bf8:	44 1f       	adc	r20, r20
     bfa:	55 1f       	adc	r21, r21
     bfc:	6a 95       	dec	r22
     bfe:	d1 f7       	brne	.-12     	; 0xbf4 <SCSI_Command_ReadWrite_10+0x5e>
     c00:	f8 01       	movw	r30, r16
     c02:	82 89       	ldd	r24, Z+18	; 0x12
     c04:	93 89       	ldd	r25, Z+19	; 0x13
     c06:	a4 89       	ldd	r26, Z+20	; 0x14
     c08:	b5 89       	ldd	r27, Z+21	; 0x15
     c0a:	82 1b       	sub	r24, r18
     c0c:	93 0b       	sbc	r25, r19
     c0e:	a4 0b       	sbc	r26, r20
     c10:	b5 0b       	sbc	r27, r21
     c12:	82 8b       	std	Z+18, r24	; 0x12
     c14:	93 8b       	std	Z+19, r25	; 0x13
     c16:	a4 8b       	std	Z+20, r26	; 0x14
     c18:	b5 8b       	std	Z+21, r27	; 0x15
     c1a:	81 e0       	ldi	r24, 0x01	; 1

	return true;
}
     c1c:	df 91       	pop	r29
     c1e:	cf 91       	pop	r28
     c20:	1f 91       	pop	r17
     c22:	0f 91       	pop	r16
     c24:	08 95       	ret

00000c26 <SCSI_DecodeSCSICommand>:
 *  \param[in] MSInterfaceInfo  Pointer to the Mass Storage class interface structure that the command is associated with
 *
 *  \return Boolean true if the command completed successfully, false otherwise
 */
bool SCSI_DecodeSCSICommand(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
     c26:	0f 93       	push	r16
     c28:	1f 93       	push	r17
     c2a:	df 93       	push	r29
     c2c:	cf 93       	push	r28
     c2e:	cd b7       	in	r28, 0x3d	; 61
     c30:	de b7       	in	r29, 0x3e	; 62
     c32:	28 97       	sbiw	r28, 0x08	; 8
     c34:	0f b6       	in	r0, 0x3f	; 63
     c36:	f8 94       	cli
     c38:	de bf       	out	0x3e, r29	; 62
     c3a:	0f be       	out	0x3f, r0	; 63
     c3c:	cd bf       	out	0x3d, r28	; 61
     c3e:	8c 01       	movw	r16, r24
	bool CommandSuccess = false;

	/* Run the appropriate SCSI command hander function based on the passed command */
	switch (MSInterfaceInfo->State.CommandBlock.SCSICommandData[0])
     c40:	fc 01       	movw	r30, r24
     c42:	81 8d       	ldd	r24, Z+25	; 0x19
     c44:	8e 31       	cpi	r24, 0x1E	; 30
     c46:	09 f4       	brne	.+2      	; 0xc4a <SCSI_DecodeSCSICommand+0x24>
     c48:	77 c0       	rjmp	.+238    	; 0xd38 <SCSI_DecodeSCSICommand+0x112>
     c4a:	8f 31       	cpi	r24, 0x1F	; 31
     c4c:	70 f4       	brcc	.+28     	; 0xc6a <SCSI_DecodeSCSICommand+0x44>
     c4e:	83 30       	cpi	r24, 0x03	; 3
     c50:	f9 f0       	breq	.+62     	; 0xc90 <SCSI_DecodeSCSICommand+0x6a>
     c52:	84 30       	cpi	r24, 0x04	; 4
     c54:	20 f4       	brcc	.+8      	; 0xc5e <SCSI_DecodeSCSICommand+0x38>
     c56:	88 23       	and	r24, r24
     c58:	09 f4       	brne	.+2      	; 0xc5c <SCSI_DecodeSCSICommand+0x36>
     c5a:	6e c0       	rjmp	.+220    	; 0xd38 <SCSI_DecodeSCSICommand+0x112>
     c5c:	73 c0       	rjmp	.+230    	; 0xd44 <SCSI_DecodeSCSICommand+0x11e>
     c5e:	82 31       	cpi	r24, 0x12	; 18
     c60:	a1 f0       	breq	.+40     	; 0xc8a <SCSI_DecodeSCSICommand+0x64>
     c62:	8d 31       	cpi	r24, 0x1D	; 29
     c64:	09 f0       	breq	.+2      	; 0xc68 <SCSI_DecodeSCSICommand+0x42>
     c66:	6e c0       	rjmp	.+220    	; 0xd44 <SCSI_DecodeSCSICommand+0x11e>
     c68:	46 c0       	rjmp	.+140    	; 0xcf6 <SCSI_DecodeSCSICommand+0xd0>
     c6a:	88 32       	cpi	r24, 0x28	; 40
     c6c:	09 f4       	brne	.+2      	; 0xc70 <SCSI_DecodeSCSICommand+0x4a>
     c6e:	60 c0       	rjmp	.+192    	; 0xd30 <SCSI_DecodeSCSICommand+0x10a>
     c70:	89 32       	cpi	r24, 0x29	; 41
     c72:	20 f4       	brcc	.+8      	; 0xc7c <SCSI_DecodeSCSICommand+0x56>
     c74:	85 32       	cpi	r24, 0x25	; 37
     c76:	09 f0       	breq	.+2      	; 0xc7a <SCSI_DecodeSCSICommand+0x54>
     c78:	65 c0       	rjmp	.+202    	; 0xd44 <SCSI_DecodeSCSICommand+0x11e>
     c7a:	0d c0       	rjmp	.+26     	; 0xc96 <SCSI_DecodeSCSICommand+0x70>
     c7c:	8a 32       	cpi	r24, 0x2A	; 42
     c7e:	09 f4       	brne	.+2      	; 0xc82 <SCSI_DecodeSCSICommand+0x5c>
     c80:	54 c0       	rjmp	.+168    	; 0xd2a <SCSI_DecodeSCSICommand+0x104>
     c82:	8f 32       	cpi	r24, 0x2F	; 47
     c84:	09 f0       	breq	.+2      	; 0xc88 <SCSI_DecodeSCSICommand+0x62>
     c86:	5e c0       	rjmp	.+188    	; 0xd44 <SCSI_DecodeSCSICommand+0x11e>
     c88:	57 c0       	rjmp	.+174    	; 0xd38 <SCSI_DecodeSCSICommand+0x112>
	{
		case SCSI_CMD_INQUIRY:
			CommandSuccess = SCSI_Command_Inquiry(MSInterfaceInfo);
     c8a:	c8 01       	movw	r24, r16
     c8c:	c1 de       	rcall	.-638    	; 0xa10 <SCSI_Command_Inquiry>
     c8e:	64 c0       	rjmp	.+200    	; 0xd58 <SCSI_DecodeSCSICommand+0x132>
			break;
		case SCSI_CMD_REQUEST_SENSE:
			CommandSuccess = SCSI_Command_Request_Sense(MSInterfaceInfo);
     c90:	c8 01       	movw	r24, r16
     c92:	29 df       	rcall	.-430    	; 0xae6 <SCSI_Command_Request_Sense>
     c94:	61 c0       	rjmp	.+194    	; 0xd58 <SCSI_DecodeSCSICommand+0x132>
 *
 *  \return Boolean true if the command completed successfully, false otherwise.
 */
static bool SCSI_Command_Read_Capacity_10(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
	uint32_t LastBlockAddressInLUN = (LUN_MEDIA_BLOCKS - 1);
     c96:	8f ef       	ldi	r24, 0xFF	; 255
     c98:	9f e7       	ldi	r25, 0x7F	; 127
     c9a:	a0 e0       	ldi	r26, 0x00	; 0
     c9c:	b0 e0       	ldi	r27, 0x00	; 0
     c9e:	89 83       	std	Y+1, r24	; 0x01
     ca0:	9a 83       	std	Y+2, r25	; 0x02
     ca2:	ab 83       	std	Y+3, r26	; 0x03
     ca4:	bc 83       	std	Y+4, r27	; 0x04
	uint32_t MediaBlockSize        = VIRTUAL_MEMORY_BLOCK_SIZE;
     ca6:	80 e0       	ldi	r24, 0x00	; 0
     ca8:	92 e0       	ldi	r25, 0x02	; 2
     caa:	a0 e0       	ldi	r26, 0x00	; 0
     cac:	b0 e0       	ldi	r27, 0x00	; 0
     cae:	8d 83       	std	Y+5, r24	; 0x05
     cb0:	9e 83       	std	Y+6, r25	; 0x06
     cb2:	af 83       	std	Y+7, r26	; 0x07
     cb4:	b8 87       	std	Y+8, r27	; 0x08

	Endpoint_Write_Stream_BE(&LastBlockAddressInLUN, sizeof(LastBlockAddressInLUN), NO_STREAM_CALLBACK);
     cb6:	ce 01       	movw	r24, r28
     cb8:	01 96       	adiw	r24, 0x01	; 1
     cba:	64 e0       	ldi	r22, 0x04	; 4
     cbc:	70 e0       	ldi	r23, 0x00	; 0
     cbe:	40 e0       	ldi	r20, 0x00	; 0
     cc0:	50 e0       	ldi	r21, 0x00	; 0
     cc2:	dd d4       	rcall	.+2490   	; 0x167e <Endpoint_Write_Stream_BE>
	Endpoint_Write_Stream_BE(&MediaBlockSize, sizeof(MediaBlockSize), NO_STREAM_CALLBACK);
     cc4:	ce 01       	movw	r24, r28
     cc6:	05 96       	adiw	r24, 0x05	; 5
     cc8:	64 e0       	ldi	r22, 0x04	; 4
     cca:	70 e0       	ldi	r23, 0x00	; 0
     ccc:	40 e0       	ldi	r20, 0x00	; 0
     cce:	50 e0       	ldi	r21, 0x00	; 0
     cd0:	d6 d4       	rcall	.+2476   	; 0x167e <Endpoint_Write_Stream_BE>
     cd2:	80 91 e8 00 	lds	r24, 0x00E8
     cd6:	8e 77       	andi	r24, 0x7E	; 126
     cd8:	80 93 e8 00 	sts	0x00E8, r24
	Endpoint_ClearIN();

	/* Succeed the command and update the bytes transferred counter */
	MSInterfaceInfo->State.CommandBlock.DataTransferLength -= 8;
     cdc:	f8 01       	movw	r30, r16
     cde:	82 89       	ldd	r24, Z+18	; 0x12
     ce0:	93 89       	ldd	r25, Z+19	; 0x13
     ce2:	a4 89       	ldd	r26, Z+20	; 0x14
     ce4:	b5 89       	ldd	r27, Z+21	; 0x15
     ce6:	08 97       	sbiw	r24, 0x08	; 8
     ce8:	a1 09       	sbc	r26, r1
     cea:	b1 09       	sbc	r27, r1
     cec:	82 8b       	std	Z+18, r24	; 0x12
     cee:	93 8b       	std	Z+19, r25	; 0x13
     cf0:	a4 8b       	std	Z+20, r26	; 0x14
     cf2:	b5 8b       	std	Z+21, r27	; 0x15
     cf4:	35 c0       	rjmp	.+106    	; 0xd60 <SCSI_DecodeSCSICommand+0x13a>
 *  \return Boolean true if the command completed successfully, false otherwise.
 */
static bool SCSI_Command_Send_Diagnostic(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
	/* Check to see if the SELF TEST bit is not set */
	if (!(MSInterfaceInfo->State.CommandBlock.SCSICommandData[1] & (1 << 2)))
     cf6:	f8 01       	movw	r30, r16
     cf8:	82 8d       	ldd	r24, Z+26	; 0x1a
     cfa:	82 fd       	sbrc	r24, 2
     cfc:	08 c0       	rjmp	.+16     	; 0xd0e <SCSI_DecodeSCSICommand+0xe8>
	{
		/* Only self-test supported - update SENSE key and fail the command */
		SCSI_SET_SENSE(SCSI_SENSE_KEY_ILLEGAL_REQUEST,
     cfe:	80 91 6a 01 	lds	r24, 0x016A
     d02:	80 7f       	andi	r24, 0xF0	; 240
     d04:	85 60       	ori	r24, 0x05	; 5
     d06:	80 93 6a 01 	sts	0x016A, r24
     d0a:	84 e2       	ldi	r24, 0x24	; 36
     d0c:	22 c0       	rjmp	.+68     	; 0xd52 <SCSI_DecodeSCSICommand+0x12c>

		return false;
	}

	/* Check to see if all attached Dataflash ICs are functional */
	if (!(DataflashManager_CheckDataflashOperation()))
     d0e:	09 dc       	rcall	.-2030   	; 0x522 <DataflashManager_CheckDataflashOperation>
     d10:	88 23       	and	r24, r24
     d12:	91 f4       	brne	.+36     	; 0xd38 <SCSI_DecodeSCSICommand+0x112>
	{
		/* Update SENSE key with a hardware error condition and return command fail */
		SCSI_SET_SENSE(SCSI_SENSE_KEY_HARDWARE_ERROR,
     d14:	80 91 6a 01 	lds	r24, 0x016A
     d18:	80 7f       	andi	r24, 0xF0	; 240
     d1a:	84 60       	ori	r24, 0x04	; 4
     d1c:	80 93 6a 01 	sts	0x016A, r24
     d20:	10 92 74 01 	sts	0x0174, r1
     d24:	10 92 75 01 	sts	0x0175, r1
     d28:	19 c0       	rjmp	.+50     	; 0xd5c <SCSI_DecodeSCSICommand+0x136>
			break;
		case SCSI_CMD_SEND_DIAGNOSTIC:
			CommandSuccess = SCSI_Command_Send_Diagnostic(MSInterfaceInfo);
			break;
		case SCSI_CMD_WRITE_10:
			CommandSuccess = SCSI_Command_ReadWrite_10(MSInterfaceInfo, DATA_WRITE);
     d2a:	c8 01       	movw	r24, r16
     d2c:	60 e0       	ldi	r22, 0x00	; 0
     d2e:	02 c0       	rjmp	.+4      	; 0xd34 <SCSI_DecodeSCSICommand+0x10e>
			break;
		case SCSI_CMD_READ_10:
			CommandSuccess = SCSI_Command_ReadWrite_10(MSInterfaceInfo, DATA_READ);
     d30:	c8 01       	movw	r24, r16
     d32:	61 e0       	ldi	r22, 0x01	; 1
     d34:	30 df       	rcall	.-416    	; 0xb96 <SCSI_Command_ReadWrite_10>
     d36:	10 c0       	rjmp	.+32     	; 0xd58 <SCSI_DecodeSCSICommand+0x132>
		case SCSI_CMD_TEST_UNIT_READY:
		case SCSI_CMD_PREVENT_ALLOW_MEDIUM_REMOVAL:
		case SCSI_CMD_VERIFY_10:
			/* These commands should just succeed, no handling required */
			CommandSuccess = true;
			MSInterfaceInfo->State.CommandBlock.DataTransferLength = 0;
     d38:	f8 01       	movw	r30, r16
     d3a:	12 8a       	std	Z+18, r1	; 0x12
     d3c:	13 8a       	std	Z+19, r1	; 0x13
     d3e:	14 8a       	std	Z+20, r1	; 0x14
     d40:	15 8a       	std	Z+21, r1	; 0x15
     d42:	0e c0       	rjmp	.+28     	; 0xd60 <SCSI_DecodeSCSICommand+0x13a>
			break;
		default:
			/* Update the SENSE key to reflect the invalid command */
			SCSI_SET_SENSE(SCSI_SENSE_KEY_ILLEGAL_REQUEST,
     d44:	80 91 6a 01 	lds	r24, 0x016A
     d48:	80 7f       	andi	r24, 0xF0	; 240
     d4a:	85 60       	ori	r24, 0x05	; 5
     d4c:	80 93 6a 01 	sts	0x016A, r24
     d50:	80 e2       	ldi	r24, 0x20	; 32
     d52:	80 93 74 01 	sts	0x0174, r24
     d56:	e6 cf       	rjmp	.-52     	; 0xd24 <SCSI_DecodeSCSICommand+0xfe>
		                   SCSI_ASENSEQ_NO_QUALIFIER);
			break;
	}

	/* Check if command was successfully processed */
	if (CommandSuccess)
     d58:	88 23       	and	r24, r24
     d5a:	11 f4       	brne	.+4      	; 0xd60 <SCSI_DecodeSCSICommand+0x13a>
     d5c:	80 e0       	ldi	r24, 0x00	; 0
     d5e:	0a c0       	rjmp	.+20     	; 0xd74 <SCSI_DecodeSCSICommand+0x14e>
	{
		SCSI_SET_SENSE(SCSI_SENSE_KEY_GOOD,
     d60:	80 91 6a 01 	lds	r24, 0x016A
     d64:	80 7f       	andi	r24, 0xF0	; 240
     d66:	80 93 6a 01 	sts	0x016A, r24
     d6a:	10 92 74 01 	sts	0x0174, r1
     d6e:	10 92 75 01 	sts	0x0175, r1
     d72:	81 e0       	ldi	r24, 0x01	; 1

		return true;
	}

	return false;
}
     d74:	28 96       	adiw	r28, 0x08	; 8
     d76:	0f b6       	in	r0, 0x3f	; 63
     d78:	f8 94       	cli
     d7a:	de bf       	out	0x3e, r29	; 62
     d7c:	0f be       	out	0x3f, r0	; 63
     d7e:	cd bf       	out	0x3d, r28	; 61
     d80:	cf 91       	pop	r28
     d82:	df 91       	pop	r29
     d84:	1f 91       	pop	r17
     d86:	0f 91       	pop	r16
     d88:	08 95       	ret

00000d8a <Endpoint_ConfigureEndpoint_Prv>:
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
     d8a:	80 93 e9 00 	sts	0x00E9, r24
			 *  \note Endpoints must first be configured properly via \ref Endpoint_ConfigureEndpoint().
			 */
			static inline void Endpoint_EnableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_EnableEndpoint(void)
			{
				UECONX |= (1 << EPEN);
     d8e:	80 91 eb 00 	lds	r24, 0x00EB
     d92:	81 60       	ori	r24, 0x01	; 1
     d94:	80 93 eb 00 	sts	0x00EB, r24
                                    const uint8_t UECFG1XData)
{
	Endpoint_SelectEndpoint(Number);
	Endpoint_EnableEndpoint();

	UECFG1X = 0;
     d98:	10 92 ed 00 	sts	0x00ED, r1
	UECFG0X = UECFG0XData;
     d9c:	60 93 ec 00 	sts	0x00EC, r22
	UECFG1X = UECFG1XData;
     da0:	40 93 ed 00 	sts	0x00ED, r20
			 *  \return Boolean true if the currently selected endpoint has been configured, false otherwise.
			 */
			static inline bool Endpoint_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsConfigured(void)
			{
				return ((UESTA0X & (1 << CFGOK)) ? true : false);
     da4:	80 91 ee 00 	lds	r24, 0x00EE

	return Endpoint_IsConfigured();
}
     da8:	88 1f       	adc	r24, r24
     daa:	88 27       	eor	r24, r24
     dac:	88 1f       	adc	r24, r24
     dae:	08 95       	ret

00000db0 <Endpoint_ClearStatusStage>:
	}
}

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
     db0:	80 91 89 01 	lds	r24, 0x0189
     db4:	88 23       	and	r24, r24
     db6:	9c f4       	brge	.+38     	; 0xdde <Endpoint_ClearStatusStage+0x2e>
     db8:	04 c0       	rjmp	.+8      	; 0xdc2 <Endpoint_ClearStatusStage+0x12>
	{
		while (!(Endpoint_IsOUTReceived()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
     dba:	80 91 88 01 	lds	r24, 0x0188
     dbe:	88 23       	and	r24, r24
     dc0:	b9 f0       	breq	.+46     	; 0xdf0 <Endpoint_ClearStatusStage+0x40>
			 *  \return Boolean true if current endpoint is has received an OUT packet, false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     dc2:	80 91 e8 00 	lds	r24, 0x00E8

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
	{
		while (!(Endpoint_IsOUTReceived()))
     dc6:	82 ff       	sbrs	r24, 2
     dc8:	f8 cf       	rjmp	.-16     	; 0xdba <Endpoint_ClearStatusStage+0xa>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     dca:	80 91 e8 00 	lds	r24, 0x00E8
     dce:	8b 77       	andi	r24, 0x7B	; 123
     dd0:	80 93 e8 00 	sts	0x00E8, r24
     dd4:	08 95       	ret
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
     dd6:	80 91 88 01 	lds	r24, 0x0188
     dda:	88 23       	and	r24, r24
     ddc:	49 f0       	breq	.+18     	; 0xdf0 <Endpoint_ClearStatusStage+0x40>
			 *  \return Boolean true if the current endpoint is ready for an IN packet, false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     dde:	80 91 e8 00 	lds	r24, 0x00E8

		Endpoint_ClearOUT();
	}
	else
	{
		while (!(Endpoint_IsINReady()))
     de2:	80 ff       	sbrs	r24, 0
     de4:	f8 cf       	rjmp	.-16     	; 0xdd6 <Endpoint_ClearStatusStage+0x26>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     de6:	80 91 e8 00 	lds	r24, 0x00E8
     dea:	8e 77       	andi	r24, 0x7E	; 126
     dec:	80 93 e8 00 	sts	0x00E8, r24
     df0:	08 95       	ret

00000df2 <Endpoint_WaitUntilReady>:
			/** Returns the current USB frame number, when in device mode. Every millisecond the USB bus is active (i.e. enumerated to a host)
			 *  the frame number is incremented by one.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
     df2:	40 91 e4 00 	lds	r20, 0x00E4
     df6:	50 91 e5 00 	lds	r21, 0x00E5
     dfa:	24 e6       	ldi	r18, 0x64	; 100
			 *  \return The currently selected endpoint's direction, as a ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & ENDPOINT_DIR_IN);
     dfc:	80 91 ec 00 	lds	r24, 0x00EC

	uint16_t PreviousFrameNumber = USB_Device_GetFrameNumber();

	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
     e00:	80 ff       	sbrs	r24, 0
     e02:	05 c0       	rjmp	.+10     	; 0xe0e <Endpoint_WaitUntilReady+0x1c>
			 *  \return Boolean true if the current endpoint is ready for an IN packet, false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     e04:	80 91 e8 00 	lds	r24, 0x00E8
		{
			if (Endpoint_IsINReady())
     e08:	80 ff       	sbrs	r24, 0
     e0a:	05 c0       	rjmp	.+10     	; 0xe16 <Endpoint_WaitUntilReady+0x24>
     e0c:	22 c0       	rjmp	.+68     	; 0xe52 <Endpoint_WaitUntilReady+0x60>
			 *  \return Boolean true if current endpoint is has received an OUT packet, false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     e0e:	80 91 e8 00 	lds	r24, 0x00E8
			  return ENDPOINT_READYWAIT_NoError;
		}
		else
		{
			if (Endpoint_IsOUTReceived())
     e12:	82 fd       	sbrc	r24, 2
     e14:	1e c0       	rjmp	.+60     	; 0xe52 <Endpoint_WaitUntilReady+0x60>
			  return ENDPOINT_READYWAIT_NoError;
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     e16:	80 91 88 01 	lds	r24, 0x0188

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     e1a:	88 23       	and	r24, r24
     e1c:	11 f4       	brne	.+4      	; 0xe22 <Endpoint_WaitUntilReady+0x30>
     e1e:	82 e0       	ldi	r24, 0x02	; 2
     e20:	08 95       	ret
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     e22:	85 30       	cpi	r24, 0x05	; 5
     e24:	11 f4       	brne	.+4      	; 0xe2a <Endpoint_WaitUntilReady+0x38>
     e26:	83 e0       	ldi	r24, 0x03	; 3
     e28:	08 95       	ret
			 *  \return Boolean true if the currently selected endpoint is stalled, false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
     e2a:	80 91 eb 00 	lds	r24, 0x00EB
		  return ENDPOINT_READYWAIT_BusSuspended;
		else if (Endpoint_IsStalled())
     e2e:	85 ff       	sbrs	r24, 5
     e30:	02 c0       	rjmp	.+4      	; 0xe36 <Endpoint_WaitUntilReady+0x44>
     e32:	81 e0       	ldi	r24, 0x01	; 1
     e34:	08 95       	ret
     e36:	80 91 e4 00 	lds	r24, 0x00E4
     e3a:	90 91 e5 00 	lds	r25, 0x00E5
		  return ENDPOINT_READYWAIT_EndpointStalled;

		uint16_t CurrentFrameNumber = USB_Device_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
     e3e:	84 17       	cp	r24, r20
     e40:	95 07       	cpc	r25, r21
     e42:	e1 f2       	breq	.-72     	; 0xdfc <Endpoint_WaitUntilReady+0xa>
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
     e44:	22 23       	and	r18, r18
     e46:	11 f4       	brne	.+4      	; 0xe4c <Endpoint_WaitUntilReady+0x5a>
     e48:	84 e0       	ldi	r24, 0x04	; 4
     e4a:	08 95       	ret
     e4c:	21 50       	subi	r18, 0x01	; 1
     e4e:	ac 01       	movw	r20, r24
     e50:	d5 cf       	rjmp	.-86     	; 0xdfc <Endpoint_WaitUntilReady+0xa>
     e52:	80 e0       	ldi	r24, 0x00	; 0
			  return ENDPOINT_READYWAIT_Timeout;
		}
	}
}
     e54:	08 95       	ret

00000e56 <USB_ResetInterface>:
{
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
     e56:	55 d0       	rcall	.+170    	; 0xf02 <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
     e58:	5c d0       	rcall	.+184    	; 0xf12 <USB_INT_ClearAllInterrupts>
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				const uint8_t Temp = USBCON;
     e5a:	80 91 d8 00 	lds	r24, 0x00D8

				USBCON = (Temp & ~(1 << USBE));
     e5e:	98 2f       	mov	r25, r24
     e60:	9f 77       	andi	r25, 0x7F	; 127
     e62:	90 93 d8 00 	sts	0x00D8, r25
				USBCON = (Temp |  (1 << USBE));
     e66:	80 68       	ori	r24, 0x80	; 128
     e68:	80 93 d8 00 	sts	0x00D8, r24

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR  = USB_PLL_PSC;
     e6c:	8c e0       	ldi	r24, 0x0C	; 12
     e6e:	89 bd       	out	0x29, r24	; 41
				PLLCSR |= (1 << PLLE);
     e70:	89 b5       	in	r24, 0x29	; 41
     e72:	82 60       	ori	r24, 0x02	; 2
     e74:	89 bd       	out	0x29, r24	; 41
		#if defined(USB_SERIES_4_AVR)
		PLLFRQ = ((1 << PLLUSB) | (1 << PDIV3) | (1 << PDIV1));
		#endif

		USB_PLL_On();
		while (!(USB_PLL_IsReady()));
     e76:	09 b4       	in	r0, 0x29	; 41
     e78:	00 fe       	sbrs	r0, 0
     e7a:	fd cf       	rjmp	.-6      	; 0xe76 <USB_ResetInterface+0x20>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON  &= ~(1 << FRZCLK);
     e7c:	80 91 d8 00 	lds	r24, 0x00D8
     e80:	8f 7d       	andi	r24, 0xDF	; 223
     e82:	80 93 d8 00 	sts	0x00D8, r24

	if (USB_CurrentMode == USB_MODE_Device)
	{
		#if defined(USB_CAN_BE_DEVICE)
		#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
		UHWCON |=  (1 << UIMOD);
     e86:	80 91 d7 00 	lds	r24, 0x00D7
     e8a:	80 68       	ori	r24, 0x80	; 128
     e8c:	80 93 d7 00 	sts	0x00D7, r24
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState          = DEVICE_STATE_Unattached;
     e90:	10 92 88 01 	sts	0x0188, r1
	USB_ConfigurationNumber  = 0;
     e94:	10 92 86 01 	sts	0x0186, r1

	#if !defined(NO_DEVICE_REMOTE_WAKEUP)
	USB_RemoteWakeupEnabled  = false;
     e98:	10 92 85 01 	sts	0x0185, r1
	#endif

	#if !defined(NO_DEVICE_SELF_POWER)
	USB_CurrentlySelfPowered = false;
     e9c:	10 92 84 01 	sts	0x0184, r1
			}

			static inline void USB_Device_SetFullSpeed(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetFullSpeed(void)
			{
				UDCON &= ~(1 << LSM);
     ea0:	80 91 e0 00 	lds	r24, 0x00E0
     ea4:	8b 7f       	andi	r24, 0xFB	; 251
     ea6:	80 93 e0 00 	sts	0x00E0, r24
	if (USB_Options & USB_DEVICE_OPT_LOWSPEED)
	  USB_Device_SetLowSpeed();
	else
	  USB_Device_SetFullSpeed();

	USB_INT_Enable(USB_INT_VBUS);
     eaa:	80 91 d8 00 	lds	r24, 0x00D8
     eae:	81 60       	ori	r24, 0x01	; 1
     eb0:	80 93 d8 00 	sts	0x00D8, r24
			                                              const uint8_t Type,
			                                              const uint8_t Direction,
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				return Endpoint_ConfigureEndpoint_Prv(Number, (((Type) << EPTYPE0) | (Direction)),
     eb4:	80 e0       	ldi	r24, 0x00	; 0
     eb6:	60 e0       	ldi	r22, 0x00	; 0
     eb8:	42 e0       	ldi	r20, 0x02	; 2
     eba:	67 df       	rcall	.-306    	; 0xd8a <Endpoint_ConfigureEndpoint_Prv>

	Endpoint_ConfigureEndpoint(ENDPOINT_CONTROLEP, EP_TYPE_CONTROL,
							   ENDPOINT_DIR_OUT, USB_ControlEndpointSize,
							   ENDPOINT_BANK_SINGLE);

	USB_INT_Clear(USB_INT_SUSPI);
     ebc:	80 91 e1 00 	lds	r24, 0x00E1
     ec0:	8e 7f       	andi	r24, 0xFE	; 254
     ec2:	80 93 e1 00 	sts	0x00E1, r24
	USB_INT_Enable(USB_INT_SUSPI);
     ec6:	80 91 e2 00 	lds	r24, 0x00E2
     eca:	81 60       	ori	r24, 0x01	; 1
     ecc:	80 93 e2 00 	sts	0x00E2, r24
	USB_INT_Enable(USB_INT_EORSTI);
     ed0:	80 91 e2 00 	lds	r24, 0x00E2
     ed4:	88 60       	ori	r24, 0x08	; 8
     ed6:	80 93 e2 00 	sts	0x00E2, r24
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
     eda:	80 91 e0 00 	lds	r24, 0x00E0
     ede:	8e 7f       	andi	r24, 0xFE	; 254
     ee0:	80 93 e0 00 	sts	0x00E0, r24

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON  |=  (1 << OTGPADE);
     ee4:	80 91 d8 00 	lds	r24, 0x00D8
     ee8:	80 61       	ori	r24, 0x10	; 16
     eea:	80 93 d8 00 	sts	0x00D8, r24
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
     eee:	08 95       	ret

00000ef0 <USB_Init>:

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON  |=  (1 << UVREGE);
     ef0:	e7 ed       	ldi	r30, 0xD7	; 215
     ef2:	f0 e0       	ldi	r31, 0x00	; 0
     ef4:	80 81       	ld	r24, Z
     ef6:	81 60       	ori	r24, 0x01	; 1
     ef8:	80 83       	st	Z, r24
	{
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
     efa:	81 e0       	ldi	r24, 0x01	; 1
     efc:	80 93 87 01 	sts	0x0187, r24

	USB_ResetInterface();
}
     f00:	aa cf       	rjmp	.-172    	; 0xe56 <USB_ResetInterface>

00000f02 <USB_INT_DisableAllInterrupts>:
#include "USBInterrupt.h"

void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
     f02:	e8 ed       	ldi	r30, 0xD8	; 216
     f04:	f0 e0       	ldi	r31, 0x00	; 0
     f06:	80 81       	ld	r24, Z
     f08:	8c 7f       	andi	r24, 0xFC	; 252
     f0a:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
     f0c:	10 92 e2 00 	sts	0x00E2, r1
	#endif
}
     f10:	08 95       	ret

00000f12 <USB_INT_ClearAllInterrupts>:

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT  = 0;
     f12:	10 92 da 00 	sts	0x00DA, r1
	#if defined(USB_CAN_BE_HOST)
	UHINT   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT   = 0;
     f16:	10 92 e1 00 	sts	0x00E1, r1
	#endif
}
     f1a:	08 95       	ret

00000f1c <__vector_11>:
	#endif
}

#if defined(INTERRUPT_CONTROL_ENDPOINT) && defined(USB_CAN_BE_DEVICE)
ISR(USB_COM_vect, ISR_BLOCK)
{
     f1c:	1f 92       	push	r1
     f1e:	0f 92       	push	r0
     f20:	0f b6       	in	r0, 0x3f	; 63
     f22:	0f 92       	push	r0
     f24:	0b b6       	in	r0, 0x3b	; 59
     f26:	0f 92       	push	r0
     f28:	11 24       	eor	r1, r1
     f2a:	1f 93       	push	r17
     f2c:	2f 93       	push	r18
     f2e:	3f 93       	push	r19
     f30:	4f 93       	push	r20
     f32:	5f 93       	push	r21
     f34:	6f 93       	push	r22
     f36:	7f 93       	push	r23
     f38:	8f 93       	push	r24
     f3a:	9f 93       	push	r25
     f3c:	af 93       	push	r26
     f3e:	bf 93       	push	r27
     f40:	ef 93       	push	r30
     f42:	ff 93       	push	r31
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return (UENUM & ENDPOINT_EPNUM_MASK);
     f44:	e9 ee       	ldi	r30, 0xE9	; 233
     f46:	f0 e0       	ldi	r31, 0x00	; 0
     f48:	10 81       	ld	r17, Z
     f4a:	17 70       	andi	r17, 0x07	; 7
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
     f4c:	10 82       	st	Z, r1
	uint8_t PrevSelectedEndpoint = Endpoint_GetCurrentEndpoint();

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Disable(USB_INT_RXSTPI);
     f4e:	e0 ef       	ldi	r30, 0xF0	; 240
     f50:	f0 e0       	ldi	r31, 0x00	; 0
     f52:	80 81       	ld	r24, Z
     f54:	87 7f       	andi	r24, 0xF7	; 247
     f56:	80 83       	st	Z, r24

#if !defined(__DOXYGEN__)
/* Internal helper functions. */
static __inline__ uint8_t __iSeiRetVal(void)
{
    sei();
     f58:	78 94       	sei

	NONATOMIC_BLOCK(NONATOMIC_FORCEOFF)
	{
		USB_Device_ProcessControlRequest();
     f5a:	e9 d0       	rcall	.+466    	; 0x112e <USB_Device_ProcessControlRequest>
    (void)__s;
}

static __inline__ void __iCliParam(const uint8_t *__s)
{
    cli();
     f5c:	f8 94       	cli
     f5e:	a9 ee       	ldi	r26, 0xE9	; 233
     f60:	b0 e0       	ldi	r27, 0x00	; 0
     f62:	1c 92       	st	X, r1
	}

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Enable(USB_INT_RXSTPI);
     f64:	e0 ef       	ldi	r30, 0xF0	; 240
     f66:	f0 e0       	ldi	r31, 0x00	; 0
     f68:	80 81       	ld	r24, Z
     f6a:	88 60       	ori	r24, 0x08	; 8
     f6c:	80 83       	st	Z, r24
     f6e:	1c 93       	st	X, r17
	Endpoint_SelectEndpoint(PrevSelectedEndpoint);
}
     f70:	ff 91       	pop	r31
     f72:	ef 91       	pop	r30
     f74:	bf 91       	pop	r27
     f76:	af 91       	pop	r26
     f78:	9f 91       	pop	r25
     f7a:	8f 91       	pop	r24
     f7c:	7f 91       	pop	r23
     f7e:	6f 91       	pop	r22
     f80:	5f 91       	pop	r21
     f82:	4f 91       	pop	r20
     f84:	3f 91       	pop	r19
     f86:	2f 91       	pop	r18
     f88:	1f 91       	pop	r17
     f8a:	0f 90       	pop	r0
     f8c:	0b be       	out	0x3b, r0	; 59
     f8e:	0f 90       	pop	r0
     f90:	0f be       	out	0x3f, r0	; 63
     f92:	0f 90       	pop	r0
     f94:	1f 90       	pop	r1
     f96:	18 95       	reti

00000f98 <__vector_10>:
	UDINT   = 0;
	#endif
}

ISR(USB_GEN_vect, ISR_BLOCK)
{
     f98:	1f 92       	push	r1
     f9a:	0f 92       	push	r0
     f9c:	0f b6       	in	r0, 0x3f	; 63
     f9e:	0f 92       	push	r0
     fa0:	0b b6       	in	r0, 0x3b	; 59
     fa2:	0f 92       	push	r0
     fa4:	11 24       	eor	r1, r1
     fa6:	2f 93       	push	r18
     fa8:	3f 93       	push	r19
     faa:	4f 93       	push	r20
     fac:	5f 93       	push	r21
     fae:	6f 93       	push	r22
     fb0:	7f 93       	push	r23
     fb2:	8f 93       	push	r24
     fb4:	9f 93       	push	r25
     fb6:	af 93       	push	r26
     fb8:	bf 93       	push	r27
     fba:	ef 93       	push	r30
     fbc:	ff 93       	push	r31
	#if defined(USB_CAN_BE_DEVICE)
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	if (USB_INT_HasOccurred(USB_INT_VBUS) && USB_INT_IsEnabled(USB_INT_VBUS))
     fbe:	80 91 da 00 	lds	r24, 0x00DA
     fc2:	80 ff       	sbrs	r24, 0
     fc4:	15 c0       	rjmp	.+42     	; 0xff0 <__vector_10+0x58>
     fc6:	80 91 d8 00 	lds	r24, 0x00D8
     fca:	80 ff       	sbrs	r24, 0
     fcc:	11 c0       	rjmp	.+34     	; 0xff0 <__vector_10+0x58>
	{
		USB_INT_Clear(USB_INT_VBUS);
     fce:	80 91 da 00 	lds	r24, 0x00DA
     fd2:	8e 7f       	andi	r24, 0xFE	; 254
     fd4:	80 93 da 00 	sts	0x00DA, r24
				 *  \note This function is not available on some AVR models which do not support hardware VBUS monitoring.
				 */
				static inline bool USB_VBUS_GetStatus(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
				static inline bool USB_VBUS_GetStatus(void)
				{
					return ((USBSTA & (1 << VBUS)) ? true : false);
     fd8:	80 91 d9 00 	lds	r24, 0x00D9

		if (USB_VBUS_GetStatus())
     fdc:	80 ff       	sbrs	r24, 0
     fde:	05 c0       	rjmp	.+10     	; 0xfea <__vector_10+0x52>
		{
			USB_DeviceState = DEVICE_STATE_Powered;
     fe0:	81 e0       	ldi	r24, 0x01	; 1
     fe2:	80 93 88 01 	sts	0x0188, r24
			EVENT_USB_Device_Connect();
     fe6:	f0 d8       	rcall	.-3616   	; 0x1c8 <EVENT_USB_Device_Connect>
     fe8:	03 c0       	rjmp	.+6      	; 0xff0 <__vector_10+0x58>
		}
		else
		{
			USB_DeviceState = DEVICE_STATE_Unattached;
     fea:	10 92 88 01 	sts	0x0188, r1
			EVENT_USB_Device_Disconnect();
     fee:	f1 d8       	rcall	.-3614   	; 0x1d2 <EVENT_USB_Device_Disconnect>
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
     ff0:	80 91 e1 00 	lds	r24, 0x00E1
     ff4:	80 ff       	sbrs	r24, 0
     ff6:	1d c0       	rjmp	.+58     	; 0x1032 <__vector_10+0x9a>
     ff8:	80 91 e2 00 	lds	r24, 0x00E2
     ffc:	80 ff       	sbrs	r24, 0
     ffe:	19 c0       	rjmp	.+50     	; 0x1032 <__vector_10+0x9a>
	{
		USB_INT_Clear(USB_INT_SUSPI);
    1000:	80 91 e1 00 	lds	r24, 0x00E1
    1004:	8e 7f       	andi	r24, 0xFE	; 254
    1006:	80 93 e1 00 	sts	0x00E1, r24

		USB_INT_Disable(USB_INT_SUSPI);
    100a:	80 91 e2 00 	lds	r24, 0x00E2
    100e:	8e 7f       	andi	r24, 0xFE	; 254
    1010:	80 93 e2 00 	sts	0x00E2, r24
		USB_INT_Enable(USB_INT_WAKEUPI);
    1014:	80 91 e2 00 	lds	r24, 0x00E2
    1018:	80 61       	ori	r24, 0x10	; 16
    101a:	80 93 e2 00 	sts	0x00E2, r24
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON  |=  (1 << FRZCLK);
    101e:	80 91 d8 00 	lds	r24, 0x00D8
    1022:	80 62       	ori	r24, 0x20	; 32
    1024:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR  = 0;
    1028:	19 bc       	out	0x29, r1	; 41

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
		EVENT_USB_Device_Disconnect();
		#else
		USB_DeviceState = DEVICE_STATE_Suspended;
    102a:	85 e0       	ldi	r24, 0x05	; 5
    102c:	80 93 88 01 	sts	0x0188, r24
		EVENT_USB_Device_Suspend();
    1030:	eb d1       	rcall	.+982    	; 0x1408 <USB_Event_Stub>
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
    1032:	80 91 e1 00 	lds	r24, 0x00E1
    1036:	84 ff       	sbrs	r24, 4
    1038:	2e c0       	rjmp	.+92     	; 0x1096 <__vector_10+0xfe>
    103a:	80 91 e2 00 	lds	r24, 0x00E2
    103e:	84 ff       	sbrs	r24, 4
    1040:	2a c0       	rjmp	.+84     	; 0x1096 <__vector_10+0xfe>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR  = USB_PLL_PSC;
    1042:	8c e0       	ldi	r24, 0x0C	; 12
    1044:	89 bd       	out	0x29, r24	; 41
				PLLCSR |= (1 << PLLE);
    1046:	89 b5       	in	r24, 0x29	; 41
    1048:	82 60       	ori	r24, 0x02	; 2
    104a:	89 bd       	out	0x29, r24	; 41
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
    104c:	09 b4       	in	r0, 0x29	; 41
    104e:	00 fe       	sbrs	r0, 0
    1050:	fd cf       	rjmp	.-6      	; 0x104c <__vector_10+0xb4>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON  &= ~(1 << FRZCLK);
    1052:	80 91 d8 00 	lds	r24, 0x00D8
    1056:	8f 7d       	andi	r24, 0xDF	; 223
    1058:	80 93 d8 00 	sts	0x00D8, r24
		}

		USB_CLK_Unfreeze();

		USB_INT_Clear(USB_INT_WAKEUPI);
    105c:	80 91 e1 00 	lds	r24, 0x00E1
    1060:	8f 7e       	andi	r24, 0xEF	; 239
    1062:	80 93 e1 00 	sts	0x00E1, r24

		USB_INT_Disable(USB_INT_WAKEUPI);
    1066:	80 91 e2 00 	lds	r24, 0x00E2
    106a:	8f 7e       	andi	r24, 0xEF	; 239
    106c:	80 93 e2 00 	sts	0x00E2, r24
		USB_INT_Enable(USB_INT_SUSPI);
    1070:	80 91 e2 00 	lds	r24, 0x00E2
    1074:	81 60       	ori	r24, 0x01	; 1
    1076:	80 93 e2 00 	sts	0x00E2, r24

		if (USB_ConfigurationNumber)
    107a:	80 91 86 01 	lds	r24, 0x0186
    107e:	88 23       	and	r24, r24
    1080:	31 f4       	brne	.+12     	; 0x108e <__vector_10+0xf6>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
    1082:	80 91 e3 00 	lds	r24, 0x00E3
		  USB_DeviceState = DEVICE_STATE_Configured;
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
    1086:	87 fd       	sbrc	r24, 7
    1088:	02 c0       	rjmp	.+4      	; 0x108e <__vector_10+0xf6>
    108a:	81 e0       	ldi	r24, 0x01	; 1
    108c:	01 c0       	rjmp	.+2      	; 0x1090 <__vector_10+0xf8>
    108e:	84 e0       	ldi	r24, 0x04	; 4
    1090:	80 93 88 01 	sts	0x0188, r24

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
		#else
		EVENT_USB_Device_WakeUp();
    1094:	b9 d1       	rcall	.+882    	; 0x1408 <USB_Event_Stub>
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
    1096:	80 91 e1 00 	lds	r24, 0x00E1
    109a:	83 ff       	sbrs	r24, 3
    109c:	27 c0       	rjmp	.+78     	; 0x10ec <__vector_10+0x154>
    109e:	80 91 e2 00 	lds	r24, 0x00E2
    10a2:	83 ff       	sbrs	r24, 3
    10a4:	23 c0       	rjmp	.+70     	; 0x10ec <__vector_10+0x154>
	{
		USB_INT_Clear(USB_INT_EORSTI);
    10a6:	80 91 e1 00 	lds	r24, 0x00E1
    10aa:	87 7f       	andi	r24, 0xF7	; 247
    10ac:	80 93 e1 00 	sts	0x00E1, r24

		USB_DeviceState         = DEVICE_STATE_Default;
    10b0:	82 e0       	ldi	r24, 0x02	; 2
    10b2:	80 93 88 01 	sts	0x0188, r24
		USB_ConfigurationNumber = 0;
    10b6:	10 92 86 01 	sts	0x0186, r1

		USB_INT_Clear(USB_INT_SUSPI);
    10ba:	80 91 e1 00 	lds	r24, 0x00E1
    10be:	8e 7f       	andi	r24, 0xFE	; 254
    10c0:	80 93 e1 00 	sts	0x00E1, r24
		USB_INT_Disable(USB_INT_SUSPI);
    10c4:	80 91 e2 00 	lds	r24, 0x00E2
    10c8:	8e 7f       	andi	r24, 0xFE	; 254
    10ca:	80 93 e2 00 	sts	0x00E2, r24
		USB_INT_Enable(USB_INT_WAKEUPI);
    10ce:	80 91 e2 00 	lds	r24, 0x00E2
    10d2:	80 61       	ori	r24, 0x10	; 16
    10d4:	80 93 e2 00 	sts	0x00E2, r24
			                                              const uint8_t Type,
			                                              const uint8_t Direction,
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				return Endpoint_ConfigureEndpoint_Prv(Number, (((Type) << EPTYPE0) | (Direction)),
    10d8:	80 e0       	ldi	r24, 0x00	; 0
    10da:	60 e0       	ldi	r22, 0x00	; 0
    10dc:	42 e0       	ldi	r20, 0x02	; 2
    10de:	55 de       	rcall	.-854    	; 0xd8a <Endpoint_ConfigureEndpoint_Prv>
		Endpoint_ConfigureEndpoint(ENDPOINT_CONTROLEP, EP_TYPE_CONTROL,
		                           ENDPOINT_DIR_OUT, USB_ControlEndpointSize,
		                           ENDPOINT_BANK_SINGLE);

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
    10e0:	80 91 f0 00 	lds	r24, 0x00F0
    10e4:	88 60       	ori	r24, 0x08	; 8
    10e6:	80 93 f0 00 	sts	0x00F0, r24
		#endif

		EVENT_USB_Device_Reset();
    10ea:	8e d1       	rcall	.+796    	; 0x1408 <USB_Event_Stub>
	}

	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
    10ec:	80 91 e1 00 	lds	r24, 0x00E1
    10f0:	82 ff       	sbrs	r24, 2
    10f2:	0a c0       	rjmp	.+20     	; 0x1108 <__vector_10+0x170>
    10f4:	80 91 e2 00 	lds	r24, 0x00E2
    10f8:	82 ff       	sbrs	r24, 2
    10fa:	06 c0       	rjmp	.+12     	; 0x1108 <__vector_10+0x170>
	{
		USB_INT_Clear(USB_INT_SOFI);
    10fc:	80 91 e1 00 	lds	r24, 0x00E1
    1100:	8b 7f       	andi	r24, 0xFB	; 251
    1102:	80 93 e1 00 	sts	0x00E1, r24

		EVENT_USB_Device_StartOfFrame();
    1106:	6a d8       	rcall	.-3884   	; 0x1dc <EVENT_USB_Device_StartOfFrame>
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
    1108:	ff 91       	pop	r31
    110a:	ef 91       	pop	r30
    110c:	bf 91       	pop	r27
    110e:	af 91       	pop	r26
    1110:	9f 91       	pop	r25
    1112:	8f 91       	pop	r24
    1114:	7f 91       	pop	r23
    1116:	6f 91       	pop	r22
    1118:	5f 91       	pop	r21
    111a:	4f 91       	pop	r20
    111c:	3f 91       	pop	r19
    111e:	2f 91       	pop	r18
    1120:	0f 90       	pop	r0
    1122:	0b be       	out	0x3b, r0	; 59
    1124:	0f 90       	pop	r0
    1126:	0f be       	out	0x3f, r0	; 63
    1128:	0f 90       	pop	r0
    112a:	1f 90       	pop	r1
    112c:	18 95       	reti

0000112e <USB_Device_ProcessControlRequest>:
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
    112e:	0f 93       	push	r16
    1130:	1f 93       	push	r17
    1132:	df 93       	push	r29
    1134:	cf 93       	push	r28
    1136:	cd b7       	in	r28, 0x3d	; 61
    1138:	de b7       	in	r29, 0x3e	; 62
    113a:	ac 97       	sbiw	r28, 0x2c	; 44
    113c:	0f b6       	in	r0, 0x3f	; 63
    113e:	f8 94       	cli
    1140:	de bf       	out	0x3e, r29	; 62
    1142:	0f be       	out	0x3f, r0	; 63
    1144:	cd bf       	out	0x3d, r28	; 61
    1146:	e9 e8       	ldi	r30, 0x89	; 137
    1148:	f1 e0       	ldi	r31, 0x01	; 1
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_Byte(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_Byte(void)
			{
				return UEDATX;
    114a:	80 91 f1 00 	lds	r24, 0x00F1
	uint8_t* RequestHeader  = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_Byte();
    114e:	81 93       	st	Z+, r24

void USB_Device_ProcessControlRequest(void)
{
	uint8_t* RequestHeader  = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
    1150:	21 e0       	ldi	r18, 0x01	; 1
    1152:	e1 39       	cpi	r30, 0x91	; 145
    1154:	f2 07       	cpc	r31, r18
    1156:	c9 f7       	brne	.-14     	; 0x114a <USB_Device_ProcessControlRequest+0x1c>
	  *(RequestHeader++) = Endpoint_Read_Byte();

	EVENT_USB_Device_ControlRequest();
    1158:	98 d8       	rcall	.-3792   	; 0x28a <EVENT_USB_Device_ControlRequest>
			 *  \return Boolean true if the selected endpoint has received a SETUP packet, false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    115a:	80 91 e8 00 	lds	r24, 0x00E8

	if (Endpoint_IsSETUPReceived())
    115e:	83 ff       	sbrs	r24, 3
    1160:	3a c1       	rjmp	.+628    	; 0x13d6 <USB_Device_ProcessControlRequest+0x2a8>
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
    1162:	80 91 89 01 	lds	r24, 0x0189

		switch (USB_ControlRequest.bRequest)
    1166:	30 91 8a 01 	lds	r19, 0x018A
    116a:	35 30       	cpi	r19, 0x05	; 5
    116c:	09 f4       	brne	.+2      	; 0x1170 <USB_Device_ProcessControlRequest+0x42>
    116e:	87 c0       	rjmp	.+270    	; 0x127e <USB_Device_ProcessControlRequest+0x150>
    1170:	36 30       	cpi	r19, 0x06	; 6
    1172:	40 f4       	brcc	.+16     	; 0x1184 <USB_Device_ProcessControlRequest+0x56>
    1174:	31 30       	cpi	r19, 0x01	; 1
    1176:	c9 f1       	breq	.+114    	; 0x11ea <USB_Device_ProcessControlRequest+0xbc>
    1178:	31 30       	cpi	r19, 0x01	; 1
    117a:	70 f0       	brcs	.+28     	; 0x1198 <USB_Device_ProcessControlRequest+0x6a>
    117c:	33 30       	cpi	r19, 0x03	; 3
    117e:	09 f0       	breq	.+2      	; 0x1182 <USB_Device_ProcessControlRequest+0x54>
    1180:	2a c1       	rjmp	.+596    	; 0x13d6 <USB_Device_ProcessControlRequest+0x2a8>
    1182:	33 c0       	rjmp	.+102    	; 0x11ea <USB_Device_ProcessControlRequest+0xbc>
    1184:	38 30       	cpi	r19, 0x08	; 8
    1186:	09 f4       	brne	.+2      	; 0x118a <USB_Device_ProcessControlRequest+0x5c>
    1188:	f7 c0       	rjmp	.+494    	; 0x1378 <USB_Device_ProcessControlRequest+0x24a>
    118a:	39 30       	cpi	r19, 0x09	; 9
    118c:	09 f4       	brne	.+2      	; 0x1190 <USB_Device_ProcessControlRequest+0x62>
    118e:	06 c1       	rjmp	.+524    	; 0x139c <USB_Device_ProcessControlRequest+0x26e>
    1190:	36 30       	cpi	r19, 0x06	; 6
    1192:	09 f0       	breq	.+2      	; 0x1196 <USB_Device_ProcessControlRequest+0x68>
    1194:	20 c1       	rjmp	.+576    	; 0x13d6 <USB_Device_ProcessControlRequest+0x2a8>
    1196:	99 c0       	rjmp	.+306    	; 0x12ca <USB_Device_ProcessControlRequest+0x19c>
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    1198:	80 38       	cpi	r24, 0x80	; 128
    119a:	21 f0       	breq	.+8      	; 0x11a4 <USB_Device_ProcessControlRequest+0x76>
    119c:	82 38       	cpi	r24, 0x82	; 130
    119e:	09 f0       	breq	.+2      	; 0x11a2 <USB_Device_ProcessControlRequest+0x74>
    11a0:	1a c1       	rjmp	.+564    	; 0x13d6 <USB_Device_ProcessControlRequest+0x2a8>
    11a2:	08 c0       	rjmp	.+16     	; 0x11b4 <USB_Device_ProcessControlRequest+0x86>
    11a4:	90 91 84 01 	lds	r25, 0x0184
			if (USB_CurrentlySelfPowered)
			  CurrentStatus |= FEATURE_SELFPOWERED_ENABLED;
			#endif

			#if !defined(NO_DEVICE_REMOTE_WAKEUP)
			if (USB_RemoteWakeupEnabled)
    11a8:	80 91 85 01 	lds	r24, 0x0185
    11ac:	88 23       	and	r24, r24
    11ae:	99 f0       	breq	.+38     	; 0x11d6 <USB_Device_ProcessControlRequest+0xa8>
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
    11b0:	92 60       	ori	r25, 0x02	; 2
    11b2:	11 c0       	rjmp	.+34     	; 0x11d6 <USB_Device_ProcessControlRequest+0xa8>
			#endif
			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_ENDPOINT):
			Endpoint_SelectEndpoint((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
    11b4:	80 91 8d 01 	lds	r24, 0x018D
    11b8:	87 70       	andi	r24, 0x07	; 7
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    11ba:	80 93 e9 00 	sts	0x00E9, r24
			 *  \return Boolean true if the currently selected endpoint is stalled, false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    11be:	80 91 eb 00 	lds	r24, 0x00EB

			CurrentStatus = Endpoint_IsStalled();
    11c2:	90 e0       	ldi	r25, 0x00	; 0
    11c4:	25 e0       	ldi	r18, 0x05	; 5
    11c6:	96 95       	lsr	r25
    11c8:	87 95       	ror	r24
    11ca:	2a 95       	dec	r18
    11cc:	e1 f7       	brne	.-8      	; 0x11c6 <USB_Device_ProcessControlRequest+0x98>
    11ce:	98 2f       	mov	r25, r24
    11d0:	91 70       	andi	r25, 0x01	; 1
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    11d2:	10 92 e9 00 	sts	0x00E9, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    11d6:	80 91 e8 00 	lds	r24, 0x00E8
    11da:	87 7f       	andi	r24, 0xF7	; 247
    11dc:	80 93 e8 00 	sts	0x00E8, r24
			 *  \param[in] Word  Next word to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_Word_LE(const uint16_t Word) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_Word_LE(const uint16_t Word)
			{
				UEDATX = (Word & 0xFF);
    11e0:	90 93 f1 00 	sts	0x00F1, r25
				UEDATX = (Word >> 8);
    11e4:	10 92 f1 00 	sts	0x00F1, r1
    11e8:	d2 c0       	rjmp	.+420    	; 0x138e <USB_Device_ProcessControlRequest+0x260>
				}

				break;
			case REQ_ClearFeature:
			case REQ_SetFeature:
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    11ea:	88 23       	and	r24, r24
    11ec:	19 f0       	breq	.+6      	; 0x11f4 <USB_Device_ProcessControlRequest+0xc6>
    11ee:	82 30       	cpi	r24, 0x02	; 2
    11f0:	09 f0       	breq	.+2      	; 0x11f4 <USB_Device_ProcessControlRequest+0xc6>
    11f2:	f1 c0       	rjmp	.+482    	; 0x13d6 <USB_Device_ProcessControlRequest+0x2a8>
	Endpoint_ClearStatusStage();
}

static void USB_Device_ClearSetFeature(void)
{
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
    11f4:	90 e0       	ldi	r25, 0x00	; 0
    11f6:	8f 71       	andi	r24, 0x1F	; 31
    11f8:	90 70       	andi	r25, 0x00	; 0
    11fa:	00 97       	sbiw	r24, 0x00	; 0
    11fc:	21 f0       	breq	.+8      	; 0x1206 <USB_Device_ProcessControlRequest+0xd8>
    11fe:	02 97       	sbiw	r24, 0x02	; 2
    1200:	09 f0       	breq	.+2      	; 0x1204 <USB_Device_ProcessControlRequest+0xd6>
    1202:	e9 c0       	rjmp	.+466    	; 0x13d6 <USB_Device_ProcessControlRequest+0x2a8>
    1204:	0c c0       	rjmp	.+24     	; 0x121e <USB_Device_ProcessControlRequest+0xf0>
	{
		#if !defined(NO_DEVICE_REMOTE_WAKEUP)
		case REQREC_DEVICE:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
    1206:	80 91 8b 01 	lds	r24, 0x018B
    120a:	81 30       	cpi	r24, 0x01	; 1
    120c:	09 f0       	breq	.+2      	; 0x1210 <USB_Device_ProcessControlRequest+0xe2>
    120e:	e3 c0       	rjmp	.+454    	; 0x13d6 <USB_Device_ProcessControlRequest+0x2a8>
			  USB_RemoteWakeupEnabled = (USB_ControlRequest.bRequest == REQ_SetFeature);
    1210:	10 92 85 01 	sts	0x0185, r1
    1214:	33 30       	cpi	r19, 0x03	; 3
    1216:	69 f5       	brne	.+90     	; 0x1272 <USB_Device_ProcessControlRequest+0x144>
    1218:	80 93 85 01 	sts	0x0185, r24
    121c:	2a c0       	rjmp	.+84     	; 0x1272 <USB_Device_ProcessControlRequest+0x144>

			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
    121e:	80 91 8b 01 	lds	r24, 0x018B
    1222:	88 23       	and	r24, r24
    1224:	31 f5       	brne	.+76     	; 0x1272 <USB_Device_ProcessControlRequest+0x144>
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
    1226:	20 91 8d 01 	lds	r18, 0x018D
    122a:	27 70       	andi	r18, 0x07	; 7

				if (EndpointIndex == ENDPOINT_CONTROLEP)
    122c:	09 f4       	brne	.+2      	; 0x1230 <USB_Device_ProcessControlRequest+0x102>
    122e:	d3 c0       	rjmp	.+422    	; 0x13d6 <USB_Device_ProcessControlRequest+0x2a8>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    1230:	20 93 e9 00 	sts	0x00E9, r18
			 * \return Boolean True if the currently selected endpoint is enabled, false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
    1234:	80 91 eb 00 	lds	r24, 0x00EB
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
    1238:	80 ff       	sbrs	r24, 0
    123a:	1b c0       	rjmp	.+54     	; 0x1272 <USB_Device_ProcessControlRequest+0x144>
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
    123c:	33 30       	cpi	r19, 0x03	; 3
    123e:	21 f4       	brne	.+8      	; 0x1248 <USB_Device_ProcessControlRequest+0x11a>
			 *  \ingroup Group_EndpointPacketManagement
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    1240:	80 91 eb 00 	lds	r24, 0x00EB
    1244:	80 62       	ori	r24, 0x20	; 32
    1246:	13 c0       	rjmp	.+38     	; 0x126e <USB_Device_ProcessControlRequest+0x140>
			 *  \ingroup Group_EndpointPacketManagement
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
    1248:	80 91 eb 00 	lds	r24, 0x00EB
    124c:	80 61       	ori	r24, 0x10	; 16
    124e:	80 93 eb 00 	sts	0x00EB, r24
			 *  \param[in] EndpointNumber Endpoint number whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetFIFO(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetFIFO(const uint8_t EndpointNumber)
			{
				UERST = (1 << EndpointNumber);
    1252:	81 e0       	ldi	r24, 0x01	; 1
    1254:	90 e0       	ldi	r25, 0x00	; 0
    1256:	02 c0       	rjmp	.+4      	; 0x125c <USB_Device_ProcessControlRequest+0x12e>
    1258:	88 0f       	add	r24, r24
    125a:	99 1f       	adc	r25, r25
    125c:	2a 95       	dec	r18
    125e:	e2 f7       	brpl	.-8      	; 0x1258 <USB_Device_ProcessControlRequest+0x12a>
    1260:	80 93 ea 00 	sts	0x00EA, r24
				UERST = 0;
    1264:	10 92 ea 00 	sts	0x00EA, r1

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
    1268:	80 91 eb 00 	lds	r24, 0x00EB
    126c:	88 60       	ori	r24, 0x08	; 8
    126e:	80 93 eb 00 	sts	0x00EB, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    1272:	10 92 e9 00 	sts	0x00E9, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1276:	80 91 e8 00 	lds	r24, 0x00E8
    127a:	87 7f       	andi	r24, 0xF7	; 247
    127c:	8b c0       	rjmp	.+278    	; 0x1394 <USB_Device_ProcessControlRequest+0x266>
					USB_Device_ClearSetFeature();
				}

				break;
			case REQ_SetAddress:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    127e:	88 23       	and	r24, r24
    1280:	09 f0       	breq	.+2      	; 0x1284 <USB_Device_ProcessControlRequest+0x156>
    1282:	a9 c0       	rjmp	.+338    	; 0x13d6 <USB_Device_ProcessControlRequest+0x2a8>
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t DeviceAddress = (USB_ControlRequest.wValue & 0x7F);
    1284:	10 91 8b 01 	lds	r17, 0x018B
    1288:	1f 77       	andi	r17, 0x7F	; 127

	ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
    128a:	0f b7       	in	r16, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    128c:	f8 94       	cli
    128e:	80 91 e8 00 	lds	r24, 0x00E8
    1292:	87 7f       	andi	r24, 0xF7	; 247
    1294:	80 93 e8 00 	sts	0x00E8, r24
	{
		Endpoint_ClearSETUP();

		Endpoint_ClearStatusStage();
    1298:	8b dd       	rcall	.-1258   	; 0xdb0 <Endpoint_ClearStatusStage>
			 *  \return Boolean true if the current endpoint is ready for an IN packet, false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    129a:	80 91 e8 00 	lds	r24, 0x00E8

		while (!(Endpoint_IsINReady()));
    129e:	80 ff       	sbrs	r24, 0
    12a0:	fc cf       	rjmp	.-8      	; 0x129a <USB_Device_ProcessControlRequest+0x16c>

		USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
    12a2:	11 23       	and	r17, r17
    12a4:	11 f4       	brne	.+4      	; 0x12aa <USB_Device_ProcessControlRequest+0x17c>
    12a6:	82 e0       	ldi	r24, 0x02	; 2
    12a8:	01 c0       	rjmp	.+2      	; 0x12ac <USB_Device_ProcessControlRequest+0x17e>
    12aa:	83 e0       	ldi	r24, 0x03	; 3
    12ac:	80 93 88 01 	sts	0x0188, r24
			#endif

			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				UDADDR  = ((UDADDR & (1 << ADDEN)) | (Address & 0x7F));
    12b0:	80 91 e3 00 	lds	r24, 0x00E3
    12b4:	80 78       	andi	r24, 0x80	; 128
    12b6:	18 2b       	or	r17, r24
    12b8:	10 93 e3 00 	sts	0x00E3, r17
				UDADDR |= (1 << ADDEN);
    12bc:	80 91 e3 00 	lds	r24, 0x00E3
    12c0:	80 68       	ori	r24, 0x80	; 128
    12c2:	80 93 e3 00 	sts	0x00E3, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    12c6:	0f bf       	out	0x3f, r16	; 63
    __asm__ volatile ("" ::: "memory");
    12c8:	86 c0       	rjmp	.+268    	; 0x13d6 <USB_Device_ProcessControlRequest+0x2a8>
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_SetAddress();

				break;
			case REQ_GetDescriptor:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    12ca:	80 58       	subi	r24, 0x80	; 128
    12cc:	82 30       	cpi	r24, 0x02	; 2
    12ce:	08 f0       	brcs	.+2      	; 0x12d2 <USB_Device_ProcessControlRequest+0x1a4>
    12d0:	82 c0       	rjmp	.+260    	; 0x13d6 <USB_Device_ProcessControlRequest+0x2a8>
	#if !defined(USE_FLASH_DESCRIPTORS) && !defined(USE_EEPROM_DESCRIPTORS) && !defined(USE_RAM_DESCRIPTORS)
	uint8_t DescriptorAddressSpace;
	#endif

	#if !defined(NO_INTERNAL_SERIAL) && (USE_INTERNAL_SERIAL != NO_DESCRIPTOR)
	if (USB_ControlRequest.wValue == ((DTYPE_String << 8) | USE_INTERNAL_SERIAL))
    12d2:	80 91 8b 01 	lds	r24, 0x018B
    12d6:	90 91 8c 01 	lds	r25, 0x018C
    12da:	23 e0       	ldi	r18, 0x03	; 3
    12dc:	8c 3d       	cpi	r24, 0xDC	; 220
    12de:	92 07       	cpc	r25, r18
    12e0:	99 f5       	brne	.+102    	; 0x1348 <USB_Device_ProcessControlRequest+0x21a>
	} SignatureDescriptor;

	SignatureDescriptor.Header.Type = DTYPE_String;
	SignatureDescriptor.Header.Size = sizeof(SignatureDescriptor);

	ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
    12e2:	7f b7       	in	r23, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    12e4:	f8 94       	cli
    12e6:	de 01       	movw	r26, r28
    12e8:	15 96       	adiw	r26, 0x05	; 5
    12ea:	6e e0       	ldi	r22, 0x0E	; 14
    12ec:	40 e0       	ldi	r20, 0x00	; 0
    12ee:	50 e0       	ldi	r21, 0x00	; 0
	{
		uint8_t SigReadAddress = 0x0E;

		for (uint8_t SerialCharNum = 0; SerialCharNum < 20; SerialCharNum++)
		{
			uint8_t SerialByte = boot_signature_byte_get(SigReadAddress);
    12f0:	11 e2       	ldi	r17, 0x21	; 33
    12f2:	e6 2f       	mov	r30, r22
    12f4:	f0 e0       	ldi	r31, 0x00	; 0
    12f6:	10 93 57 00 	sts	0x0057, r17
    12fa:	84 91       	lpm	r24, Z+

			if (SerialCharNum & 0x01)
    12fc:	40 ff       	sbrs	r20, 0
    12fe:	03 c0       	rjmp	.+6      	; 0x1306 <USB_Device_ProcessControlRequest+0x1d8>
			{
				SerialByte >>= 4;
    1300:	82 95       	swap	r24
    1302:	8f 70       	andi	r24, 0x0F	; 15
				SigReadAddress++;
    1304:	6f 5f       	subi	r22, 0xFF	; 255
			}

			SerialByte &= 0x0F;
    1306:	8f 70       	andi	r24, 0x0F	; 15
    1308:	28 2f       	mov	r18, r24
    130a:	30 e0       	ldi	r19, 0x00	; 0

			SignatureDescriptor.UnicodeString[SerialCharNum] = (SerialByte >= 10) ?
    130c:	8a 30       	cpi	r24, 0x0A	; 10
    130e:	18 f0       	brcs	.+6      	; 0x1316 <USB_Device_ProcessControlRequest+0x1e8>
    1310:	c9 01       	movw	r24, r18
    1312:	c7 96       	adiw	r24, 0x37	; 55
    1314:	02 c0       	rjmp	.+4      	; 0x131a <USB_Device_ProcessControlRequest+0x1ec>
    1316:	c9 01       	movw	r24, r18
    1318:	c0 96       	adiw	r24, 0x30	; 48
    131a:	8d 93       	st	X+, r24
    131c:	9d 93       	st	X+, r25
    131e:	4f 5f       	subi	r20, 0xFF	; 255
    1320:	5f 4f       	sbci	r21, 0xFF	; 255

	ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
	{
		uint8_t SigReadAddress = 0x0E;

		for (uint8_t SerialCharNum = 0; SerialCharNum < 20; SerialCharNum++)
    1322:	44 31       	cpi	r20, 0x14	; 20
    1324:	51 05       	cpc	r21, r1
    1326:	29 f7       	brne	.-54     	; 0x12f2 <USB_Device_ProcessControlRequest+0x1c4>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    1328:	7f bf       	out	0x3f, r23	; 63
		USB_Descriptor_Header_t Header;
		wchar_t                 UnicodeString[20];
	} SignatureDescriptor;

	SignatureDescriptor.Header.Type = DTYPE_String;
	SignatureDescriptor.Header.Size = sizeof(SignatureDescriptor);
    132a:	8a e2       	ldi	r24, 0x2A	; 42
    132c:	8b 83       	std	Y+3, r24	; 0x03
	{
		USB_Descriptor_Header_t Header;
		wchar_t                 UnicodeString[20];
	} SignatureDescriptor;

	SignatureDescriptor.Header.Type = DTYPE_String;
    132e:	83 e0       	ldi	r24, 0x03	; 3
    1330:	8c 83       	std	Y+4, r24	; 0x04
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1332:	80 91 e8 00 	lds	r24, 0x00E8
    1336:	87 7f       	andi	r24, 0xF7	; 247
    1338:	80 93 e8 00 	sts	0x00E8, r24
		}
	}

	Endpoint_ClearSETUP();

	Endpoint_Write_Control_Stream_LE(&SignatureDescriptor, sizeof(SignatureDescriptor));
    133c:	ce 01       	movw	r24, r28
    133e:	03 96       	adiw	r24, 0x03	; 3
    1340:	6a e2       	ldi	r22, 0x2A	; 42
    1342:	70 e0       	ldi	r23, 0x00	; 0
    1344:	62 d0       	rcall	.+196    	; 0x140a <Endpoint_Write_Control_Stream_LE>
    1346:	12 c0       	rjmp	.+36     	; 0x136c <USB_Device_ProcessControlRequest+0x23e>
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif

	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
    1348:	60 91 8d 01 	lds	r22, 0x018D
    134c:	ae 01       	movw	r20, r28
    134e:	4f 5f       	subi	r20, 0xFF	; 255
    1350:	5f 4f       	sbci	r21, 0xFF	; 255
    1352:	13 d8       	rcall	.-4058   	; 0x37a <CALLBACK_USB_GetDescriptor>
    1354:	bc 01       	movw	r22, r24
    1356:	00 97       	sbiw	r24, 0x00	; 0
    1358:	09 f4       	brne	.+2      	; 0x135c <USB_Device_ProcessControlRequest+0x22e>
    135a:	3d c0       	rjmp	.+122    	; 0x13d6 <USB_Device_ProcessControlRequest+0x2a8>
    135c:	80 91 e8 00 	lds	r24, 0x00E8
    1360:	87 7f       	andi	r24, 0xF7	; 247
    1362:	80 93 e8 00 	sts	0x00E8, r24
	#if defined(USE_RAM_DESCRIPTORS)
	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_EEPROM_DESCRIPTORS)
	Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_FLASH_DESCRIPTORS)
	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
    1366:	89 81       	ldd	r24, Y+1	; 0x01
    1368:	9a 81       	ldd	r25, Y+2	; 0x02
    136a:	ad d0       	rcall	.+346    	; 0x14c6 <Endpoint_Write_Control_PStream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    136c:	80 91 e8 00 	lds	r24, 0x00E8
    1370:	8b 77       	andi	r24, 0x7B	; 123
    1372:	80 93 e8 00 	sts	0x00E8, r24
    1376:	2f c0       	rjmp	.+94     	; 0x13d6 <USB_Device_ProcessControlRequest+0x2a8>
					USB_Device_GetDescriptor();
				}

				break;
			case REQ_GetConfiguration:
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
    1378:	80 38       	cpi	r24, 0x80	; 128
    137a:	69 f5       	brne	.+90     	; 0x13d6 <USB_Device_ProcessControlRequest+0x2a8>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    137c:	80 91 e8 00 	lds	r24, 0x00E8
    1380:	87 7f       	andi	r24, 0xF7	; 247
    1382:	80 93 e8 00 	sts	0x00E8, r24

static void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();

	Endpoint_Write_Byte(USB_ConfigurationNumber);
    1386:	80 91 86 01 	lds	r24, 0x0186
			 *  \param[in] Byte  Next byte to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_Byte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_Byte(const uint8_t Byte)
			{
				UEDATX = Byte;
    138a:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    138e:	80 91 e8 00 	lds	r24, 0x00E8
    1392:	8e 77       	andi	r24, 0x7E	; 126
    1394:	80 93 e8 00 	sts	0x00E8, r24
	Endpoint_ClearIN();

	Endpoint_ClearStatusStage();
    1398:	0b dd       	rcall	.-1514   	; 0xdb0 <Endpoint_ClearStatusStage>
    139a:	1d c0       	rjmp	.+58     	; 0x13d6 <USB_Device_ProcessControlRequest+0x2a8>
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_GetConfiguration();

				break;
			case REQ_SetConfiguration:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    139c:	88 23       	and	r24, r24
    139e:	d9 f4       	brne	.+54     	; 0x13d6 <USB_Device_ProcessControlRequest+0x2a8>
}

static void USB_Device_SetConfiguration(void)
{
	#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
    13a0:	90 91 8b 01 	lds	r25, 0x018B
    13a4:	92 30       	cpi	r25, 0x02	; 2
    13a6:	b8 f4       	brcc	.+46     	; 0x13d6 <USB_Device_ProcessControlRequest+0x2a8>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    13a8:	80 91 e8 00 	lds	r24, 0x00E8
    13ac:	87 7f       	andi	r24, 0xF7	; 247
    13ae:	80 93 e8 00 	sts	0x00E8, r24
	}
	#endif

	Endpoint_ClearSETUP();

	USB_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
    13b2:	90 93 86 01 	sts	0x0186, r25

	Endpoint_ClearStatusStage();
    13b6:	fc dc       	rcall	.-1544   	; 0xdb0 <Endpoint_ClearStatusStage>

	if (USB_ConfigurationNumber)
    13b8:	80 91 86 01 	lds	r24, 0x0186
    13bc:	88 23       	and	r24, r24
    13be:	31 f4       	brne	.+12     	; 0x13cc <USB_Device_ProcessControlRequest+0x29e>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
    13c0:	80 91 e3 00 	lds	r24, 0x00E3
	  USB_DeviceState = DEVICE_STATE_Configured;
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
    13c4:	87 fd       	sbrc	r24, 7
    13c6:	02 c0       	rjmp	.+4      	; 0x13cc <USB_Device_ProcessControlRequest+0x29e>
    13c8:	81 e0       	ldi	r24, 0x01	; 1
    13ca:	01 c0       	rjmp	.+2      	; 0x13ce <USB_Device_ProcessControlRequest+0x2a0>
    13cc:	84 e0       	ldi	r24, 0x04	; 4
    13ce:	80 93 88 01 	sts	0x0188, r24

	EVENT_USB_Device_ConfigurationChanged();
    13d2:	0e 94 4d 01 	call	0x29a	; 0x29a <EVENT_USB_Device_ConfigurationChanged>
			 *  \return Boolean true if the selected endpoint has received a SETUP packet, false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    13d6:	80 91 e8 00 	lds	r24, 0x00E8

				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
    13da:	83 ff       	sbrs	r24, 3
    13dc:	0a c0       	rjmp	.+20     	; 0x13f2 <USB_Device_ProcessControlRequest+0x2c4>
			 *  \ingroup Group_EndpointPacketManagement
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    13de:	80 91 eb 00 	lds	r24, 0x00EB
    13e2:	80 62       	ori	r24, 0x20	; 32
    13e4:	80 93 eb 00 	sts	0x00EB, r24
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    13e8:	80 91 e8 00 	lds	r24, 0x00E8
    13ec:	87 7f       	andi	r24, 0xF7	; 247
    13ee:	80 93 e8 00 	sts	0x00E8, r24
	{
		Endpoint_StallTransaction();
		Endpoint_ClearSETUP();
	}
}
    13f2:	ac 96       	adiw	r28, 0x2c	; 44
    13f4:	0f b6       	in	r0, 0x3f	; 63
    13f6:	f8 94       	cli
    13f8:	de bf       	out	0x3e, r29	; 62
    13fa:	0f be       	out	0x3f, r0	; 63
    13fc:	cd bf       	out	0x3d, r28	; 61
    13fe:	cf 91       	pop	r28
    1400:	df 91       	pop	r29
    1402:	1f 91       	pop	r17
    1404:	0f 91       	pop	r16
    1406:	08 95       	ret

00001408 <USB_Event_Stub>:
#include "Events.h"

void USB_Event_Stub(void)
{

}
    1408:	08 95       	ret

0000140a <Endpoint_Write_Control_Stream_LE>:
    140a:	9c 01       	movw	r18, r24
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
    140c:	40 91 8f 01 	lds	r20, 0x018F
    1410:	50 91 90 01 	lds	r21, 0x0190
    1414:	46 17       	cp	r20, r22
    1416:	57 07       	cpc	r21, r23
    1418:	18 f4       	brcc	.+6      	; 0x1420 <Endpoint_Write_Control_Stream_LE+0x16>
uint8_t TEMPLATE_FUNC_NAME (const void* Buffer,
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
    141a:	f9 01       	movw	r30, r18
    141c:	90 e0       	ldi	r25, 0x00	; 0
    141e:	3d c0       	rjmp	.+122    	; 0x149a <Endpoint_Write_Control_Stream_LE+0x90>
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
    1420:	61 15       	cp	r22, r1
    1422:	71 05       	cpc	r23, r1
    1424:	11 f0       	breq	.+4      	; 0x142a <Endpoint_Write_Control_Stream_LE+0x20>
    1426:	ab 01       	movw	r20, r22
    1428:	f8 cf       	rjmp	.-16     	; 0x141a <Endpoint_Write_Control_Stream_LE+0x10>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    142a:	80 91 e8 00 	lds	r24, 0x00E8
    142e:	8e 77       	andi	r24, 0x7E	; 126
    1430:	80 93 e8 00 	sts	0x00E8, r24
    1434:	40 e0       	ldi	r20, 0x00	; 0
    1436:	50 e0       	ldi	r21, 0x00	; 0
    1438:	f0 cf       	rjmp	.-32     	; 0x141a <Endpoint_Write_Control_Stream_LE+0x10>
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    143a:	80 91 88 01 	lds	r24, 0x0188

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    143e:	88 23       	and	r24, r24
    1440:	f1 f1       	breq	.+124    	; 0x14be <Endpoint_Write_Control_Stream_LE+0xb4>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    1442:	85 30       	cpi	r24, 0x05	; 5
    1444:	f1 f1       	breq	.+124    	; 0x14c2 <Endpoint_Write_Control_Stream_LE+0xb8>
			 *  \return Boolean true if the selected endpoint has received a SETUP packet, false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    1446:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    144a:	83 ff       	sbrs	r24, 3
    144c:	02 c0       	rjmp	.+4      	; 0x1452 <Endpoint_Write_Control_Stream_LE+0x48>
    144e:	81 e0       	ldi	r24, 0x01	; 1
    1450:	08 95       	ret
			 *  \return Boolean true if current endpoint is has received an OUT packet, false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    1452:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
    1456:	82 fd       	sbrc	r24, 2
    1458:	2c c0       	rjmp	.+88     	; 0x14b2 <Endpoint_Write_Control_Stream_LE+0xa8>
			 *  \return Boolean true if the current endpoint is ready for an IN packet, false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    145a:	80 91 e8 00 	lds	r24, 0x00E8
		  break;

		if (Endpoint_IsINReady())
    145e:	80 ff       	sbrs	r24, 0
    1460:	1c c0       	rjmp	.+56     	; 0x149a <Endpoint_Write_Control_Stream_LE+0x90>
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
					return UEBCX;
    1462:	20 91 f2 00 	lds	r18, 0x00F2
    1466:	30 91 f3 00 	lds	r19, 0x00F3
    146a:	07 c0       	rjmp	.+14     	; 0x147a <Endpoint_Write_Control_Stream_LE+0x70>
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_ControlEndpointSize))
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
    146c:	81 91       	ld	r24, Z+
			 *  \param[in] Byte  Next byte to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_Byte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_Byte(const uint8_t Byte)
			{
				UEDATX = Byte;
    146e:	80 93 f1 00 	sts	0x00F1, r24
				Length--;
    1472:	41 50       	subi	r20, 0x01	; 1
    1474:	50 40       	sbci	r21, 0x00	; 0
				BytesInEndpoint++;
    1476:	2f 5f       	subi	r18, 0xFF	; 255
    1478:	3f 4f       	sbci	r19, 0xFF	; 255

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_ControlEndpointSize))
    147a:	41 15       	cp	r20, r1
    147c:	51 05       	cpc	r21, r1
    147e:	19 f0       	breq	.+6      	; 0x1486 <Endpoint_Write_Control_Stream_LE+0x7c>
    1480:	28 30       	cpi	r18, 0x08	; 8
    1482:	31 05       	cpc	r19, r1
    1484:	98 f3       	brcs	.-26     	; 0x146c <Endpoint_Write_Control_Stream_LE+0x62>
				TEMPLATE_TRANSFER_BYTE(DataStream);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_ControlEndpointSize);
    1486:	90 e0       	ldi	r25, 0x00	; 0
    1488:	28 30       	cpi	r18, 0x08	; 8
    148a:	31 05       	cpc	r19, r1
    148c:	09 f4       	brne	.+2      	; 0x1490 <Endpoint_Write_Control_Stream_LE+0x86>
    148e:	91 e0       	ldi	r25, 0x01	; 1
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1490:	80 91 e8 00 	lds	r24, 0x00E8
    1494:	8e 77       	andi	r24, 0x7E	; 126
    1496:	80 93 e8 00 	sts	0x00E8, r24
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
    149a:	41 15       	cp	r20, r1
    149c:	51 05       	cpc	r21, r1
    149e:	69 f6       	brne	.-102    	; 0x143a <Endpoint_Write_Control_Stream_LE+0x30>
    14a0:	99 23       	and	r25, r25
    14a2:	59 f6       	brne	.-106    	; 0x143a <Endpoint_Write_Control_Stream_LE+0x30>
    14a4:	06 c0       	rjmp	.+12     	; 0x14b2 <Endpoint_Write_Control_Stream_LE+0xa8>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    14a6:	80 91 88 01 	lds	r24, 0x0188

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    14aa:	88 23       	and	r24, r24
    14ac:	41 f0       	breq	.+16     	; 0x14be <Endpoint_Write_Control_Stream_LE+0xb4>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    14ae:	85 30       	cpi	r24, 0x05	; 5
    14b0:	41 f0       	breq	.+16     	; 0x14c2 <Endpoint_Write_Control_Stream_LE+0xb8>
			 *  \return Boolean true if current endpoint is has received an OUT packet, false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    14b2:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
    14b6:	82 ff       	sbrs	r24, 2
    14b8:	f6 cf       	rjmp	.-20     	; 0x14a6 <Endpoint_Write_Control_Stream_LE+0x9c>
    14ba:	80 e0       	ldi	r24, 0x00	; 0
    14bc:	08 95       	ret
    14be:	82 e0       	ldi	r24, 0x02	; 2
    14c0:	08 95       	ret
    14c2:	83 e0       	ldi	r24, 0x03	; 3
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
    14c4:	08 95       	ret

000014c6 <Endpoint_Write_Control_PStream_LE>:
uint8_t TEMPLATE_FUNC_NAME (const void* Buffer,
                            uint16_t Length)
{
    14c6:	9c 01       	movw	r18, r24
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
    14c8:	40 91 8f 01 	lds	r20, 0x018F
    14cc:	50 91 90 01 	lds	r21, 0x0190
    14d0:	46 17       	cp	r20, r22
    14d2:	57 07       	cpc	r21, r23
    14d4:	10 f4       	brcc	.+4      	; 0x14da <Endpoint_Write_Control_PStream_LE+0x14>
uint8_t TEMPLATE_FUNC_NAME (const void* Buffer,
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
    14d6:	60 e0       	ldi	r22, 0x00	; 0
    14d8:	40 c0       	rjmp	.+128    	; 0x155a <Endpoint_Write_Control_PStream_LE+0x94>
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
    14da:	61 15       	cp	r22, r1
    14dc:	71 05       	cpc	r23, r1
    14de:	11 f0       	breq	.+4      	; 0x14e4 <Endpoint_Write_Control_PStream_LE+0x1e>
    14e0:	ab 01       	movw	r20, r22
    14e2:	f9 cf       	rjmp	.-14     	; 0x14d6 <Endpoint_Write_Control_PStream_LE+0x10>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    14e4:	80 91 e8 00 	lds	r24, 0x00E8
    14e8:	8e 77       	andi	r24, 0x7E	; 126
    14ea:	80 93 e8 00 	sts	0x00E8, r24
    14ee:	40 e0       	ldi	r20, 0x00	; 0
    14f0:	50 e0       	ldi	r21, 0x00	; 0
    14f2:	f1 cf       	rjmp	.-30     	; 0x14d6 <Endpoint_Write_Control_PStream_LE+0x10>
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    14f4:	80 91 88 01 	lds	r24, 0x0188

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    14f8:	88 23       	and	r24, r24
    14fa:	09 f4       	brne	.+2      	; 0x14fe <Endpoint_Write_Control_PStream_LE+0x38>
    14fc:	40 c0       	rjmp	.+128    	; 0x157e <Endpoint_Write_Control_PStream_LE+0xb8>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    14fe:	85 30       	cpi	r24, 0x05	; 5
    1500:	09 f4       	brne	.+2      	; 0x1504 <Endpoint_Write_Control_PStream_LE+0x3e>
    1502:	3f c0       	rjmp	.+126    	; 0x1582 <Endpoint_Write_Control_PStream_LE+0xbc>
			 *  \return Boolean true if the selected endpoint has received a SETUP packet, false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    1504:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    1508:	83 ff       	sbrs	r24, 3
    150a:	02 c0       	rjmp	.+4      	; 0x1510 <Endpoint_Write_Control_PStream_LE+0x4a>
    150c:	81 e0       	ldi	r24, 0x01	; 1
    150e:	08 95       	ret
			 *  \return Boolean true if current endpoint is has received an OUT packet, false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    1510:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
    1514:	82 fd       	sbrc	r24, 2
    1516:	2d c0       	rjmp	.+90     	; 0x1572 <Endpoint_Write_Control_PStream_LE+0xac>
			 *  \return Boolean true if the current endpoint is ready for an IN packet, false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1518:	80 91 e8 00 	lds	r24, 0x00E8
		  break;

		if (Endpoint_IsINReady())
    151c:	80 ff       	sbrs	r24, 0
    151e:	1d c0       	rjmp	.+58     	; 0x155a <Endpoint_Write_Control_PStream_LE+0x94>
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
					return UEBCX;
    1520:	80 91 f2 00 	lds	r24, 0x00F2
    1524:	90 91 f3 00 	lds	r25, 0x00F3
    1528:	09 c0       	rjmp	.+18     	; 0x153c <Endpoint_Write_Control_PStream_LE+0x76>
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_ControlEndpointSize))
    152a:	f9 01       	movw	r30, r18
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
    152c:	2f 5f       	subi	r18, 0xFF	; 255
    152e:	3f 4f       	sbci	r19, 0xFF	; 255
    1530:	e4 91       	lpm	r30, Z+
			 *  \param[in] Byte  Next byte to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_Byte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_Byte(const uint8_t Byte)
			{
				UEDATX = Byte;
    1532:	e0 93 f1 00 	sts	0x00F1, r30
				Length--;
    1536:	41 50       	subi	r20, 0x01	; 1
    1538:	50 40       	sbci	r21, 0x00	; 0
				BytesInEndpoint++;
    153a:	01 96       	adiw	r24, 0x01	; 1

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_ControlEndpointSize))
    153c:	41 15       	cp	r20, r1
    153e:	51 05       	cpc	r21, r1
    1540:	19 f0       	breq	.+6      	; 0x1548 <Endpoint_Write_Control_PStream_LE+0x82>
    1542:	88 30       	cpi	r24, 0x08	; 8
    1544:	91 05       	cpc	r25, r1
    1546:	88 f3       	brcs	.-30     	; 0x152a <Endpoint_Write_Control_PStream_LE+0x64>
				TEMPLATE_TRANSFER_BYTE(DataStream);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_ControlEndpointSize);
    1548:	60 e0       	ldi	r22, 0x00	; 0
    154a:	08 97       	sbiw	r24, 0x08	; 8
    154c:	09 f4       	brne	.+2      	; 0x1550 <Endpoint_Write_Control_PStream_LE+0x8a>
    154e:	61 e0       	ldi	r22, 0x01	; 1
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1550:	80 91 e8 00 	lds	r24, 0x00E8
    1554:	8e 77       	andi	r24, 0x7E	; 126
    1556:	80 93 e8 00 	sts	0x00E8, r24
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
    155a:	41 15       	cp	r20, r1
    155c:	51 05       	cpc	r21, r1
    155e:	51 f6       	brne	.-108    	; 0x14f4 <Endpoint_Write_Control_PStream_LE+0x2e>
    1560:	66 23       	and	r22, r22
    1562:	41 f6       	brne	.-112    	; 0x14f4 <Endpoint_Write_Control_PStream_LE+0x2e>
    1564:	06 c0       	rjmp	.+12     	; 0x1572 <Endpoint_Write_Control_PStream_LE+0xac>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    1566:	80 91 88 01 	lds	r24, 0x0188

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    156a:	88 23       	and	r24, r24
    156c:	41 f0       	breq	.+16     	; 0x157e <Endpoint_Write_Control_PStream_LE+0xb8>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    156e:	85 30       	cpi	r24, 0x05	; 5
    1570:	41 f0       	breq	.+16     	; 0x1582 <Endpoint_Write_Control_PStream_LE+0xbc>
			 *  \return Boolean true if current endpoint is has received an OUT packet, false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    1572:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
    1576:	82 ff       	sbrs	r24, 2
    1578:	f6 cf       	rjmp	.-20     	; 0x1566 <Endpoint_Write_Control_PStream_LE+0xa0>
    157a:	80 e0       	ldi	r24, 0x00	; 0
    157c:	08 95       	ret
    157e:	82 e0       	ldi	r24, 0x02	; 2
    1580:	08 95       	ret
    1582:	83 e0       	ldi	r24, 0x03	; 3
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
    1584:	08 95       	ret

00001586 <Endpoint_Read_Control_Stream_LE>:
uint8_t TEMPLATE_FUNC_NAME (void* Buffer,
                            uint16_t Length)
{
    1586:	9c 01       	movw	r18, r24
	uint8_t* DataStream = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));

	if (!(Length))
    1588:	61 15       	cp	r22, r1
    158a:	71 05       	cpc	r23, r1
    158c:	29 f4       	brne	.+10     	; 0x1598 <Endpoint_Read_Control_Stream_LE+0x12>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    158e:	80 91 e8 00 	lds	r24, 0x00E8
    1592:	8b 77       	andi	r24, 0x7B	; 123
    1594:	80 93 e8 00 	sts	0x00E8, r24
uint8_t TEMPLATE_FUNC_NAME (void* Buffer,
                            uint16_t Length)
{
	uint8_t* DataStream = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
    1598:	f9 01       	movw	r30, r18
    159a:	22 c0       	rjmp	.+68     	; 0x15e0 <Endpoint_Read_Control_Stream_LE+0x5a>
	if (!(Length))
	  Endpoint_ClearOUT();

	while (Length)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    159c:	80 91 88 01 	lds	r24, 0x0188

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    15a0:	88 23       	and	r24, r24
    15a2:	71 f1       	breq	.+92     	; 0x1600 <Endpoint_Read_Control_Stream_LE+0x7a>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    15a4:	85 30       	cpi	r24, 0x05	; 5
    15a6:	71 f1       	breq	.+92     	; 0x1604 <Endpoint_Read_Control_Stream_LE+0x7e>
			 *  \return Boolean true if the selected endpoint has received a SETUP packet, false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    15a8:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    15ac:	83 ff       	sbrs	r24, 3
    15ae:	02 c0       	rjmp	.+4      	; 0x15b4 <Endpoint_Read_Control_Stream_LE+0x2e>
    15b0:	81 e0       	ldi	r24, 0x01	; 1
    15b2:	08 95       	ret
			 *  \return Boolean true if current endpoint is has received an OUT packet, false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    15b4:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;

		if (Endpoint_IsOUTReceived())
    15b8:	82 ff       	sbrs	r24, 2
    15ba:	f0 cf       	rjmp	.-32     	; 0x159c <Endpoint_Read_Control_Stream_LE+0x16>
    15bc:	06 c0       	rjmp	.+12     	; 0x15ca <Endpoint_Read_Control_Stream_LE+0x44>
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_Byte(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_Byte(void)
			{
				return UEDATX;
    15be:	80 91 f1 00 	lds	r24, 0x00F1
		{
			while (Length && Endpoint_BytesInEndpoint())
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
    15c2:	81 93       	st	Z+, r24
				Length--;
    15c4:	61 50       	subi	r22, 0x01	; 1
    15c6:	70 40       	sbci	r23, 0x00	; 0
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;

		if (Endpoint_IsOUTReceived())
		{
			while (Length && Endpoint_BytesInEndpoint())
    15c8:	31 f0       	breq	.+12     	; 0x15d6 <Endpoint_Read_Control_Stream_LE+0x50>
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
					return UEBCX;
    15ca:	80 91 f2 00 	lds	r24, 0x00F2
    15ce:	90 91 f3 00 	lds	r25, 0x00F3
    15d2:	89 2b       	or	r24, r25
    15d4:	a1 f7       	brne	.-24     	; 0x15be <Endpoint_Read_Control_Stream_LE+0x38>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    15d6:	80 91 e8 00 	lds	r24, 0x00E8
    15da:	8b 77       	andi	r24, 0x7B	; 123
    15dc:	80 93 e8 00 	sts	0x00E8, r24
	uint8_t* DataStream = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));

	if (!(Length))
	  Endpoint_ClearOUT();

	while (Length)
    15e0:	61 15       	cp	r22, r1
    15e2:	71 05       	cpc	r23, r1
    15e4:	d9 f6       	brne	.-74     	; 0x159c <Endpoint_Read_Control_Stream_LE+0x16>
    15e6:	06 c0       	rjmp	.+12     	; 0x15f4 <Endpoint_Read_Control_Stream_LE+0x6e>
		}
	}

	while (!(Endpoint_IsINReady()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    15e8:	80 91 88 01 	lds	r24, 0x0188

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    15ec:	88 23       	and	r24, r24
    15ee:	41 f0       	breq	.+16     	; 0x1600 <Endpoint_Read_Control_Stream_LE+0x7a>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    15f0:	85 30       	cpi	r24, 0x05	; 5
    15f2:	41 f0       	breq	.+16     	; 0x1604 <Endpoint_Read_Control_Stream_LE+0x7e>
			 *  \return Boolean true if the current endpoint is ready for an IN packet, false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    15f4:	80 91 e8 00 	lds	r24, 0x00E8

			Endpoint_ClearOUT();
		}
	}

	while (!(Endpoint_IsINReady()))
    15f8:	80 ff       	sbrs	r24, 0
    15fa:	f6 cf       	rjmp	.-20     	; 0x15e8 <Endpoint_Read_Control_Stream_LE+0x62>
    15fc:	80 e0       	ldi	r24, 0x00	; 0
    15fe:	08 95       	ret
    1600:	82 e0       	ldi	r24, 0x02	; 2
    1602:	08 95       	ret
    1604:	83 e0       	ldi	r24, 0x03	; 3
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
    1606:	08 95       	ret

00001608 <Endpoint_Read_Stream_LE>:
uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE Buffer,
                            uint16_t Length
                            __CALLBACK_PARAM)
{
    1608:	df 92       	push	r13
    160a:	ef 92       	push	r14
    160c:	ff 92       	push	r15
    160e:	0f 93       	push	r16
    1610:	1f 93       	push	r17
    1612:	cf 93       	push	r28
    1614:	df 93       	push	r29
    1616:	18 2f       	mov	r17, r24
    1618:	09 2f       	mov	r16, r25
    161a:	eb 01       	movw	r28, r22
    161c:	7a 01       	movw	r14, r20
	uint8_t* DataStream = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	uint8_t  ErrorCode;

	if ((ErrorCode = Endpoint_WaitUntilReady()))
    161e:	e9 db       	rcall	.-2094   	; 0xdf2 <Endpoint_WaitUntilReady>
    1620:	d8 2e       	mov	r13, r24
    1622:	88 23       	and	r24, r24
    1624:	19 f5       	brne	.+70     	; 0x166c <Endpoint_Read_Stream_LE+0x64>
uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE Buffer,
                            uint16_t Length
                            __CALLBACK_PARAM)
{
	uint8_t* DataStream = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
    1626:	81 2f       	mov	r24, r17
    1628:	90 2f       	mov	r25, r16
    162a:	9c 01       	movw	r18, r24
    162c:	89 01       	movw	r16, r18
    162e:	1c c0       	rjmp	.+56     	; 0x1668 <Endpoint_Read_Stream_LE+0x60>
			 *  \return Boolean true if the currently selected endpoint may be read from or written to, depending on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    1630:	80 91 e8 00 	lds	r24, 0x00E8
	}
	#endif

	while (Length)
	{
		if (!(Endpoint_IsReadWriteAllowed()))
    1634:	85 fd       	sbrc	r24, 5
    1636:	12 c0       	rjmp	.+36     	; 0x165c <Endpoint_Read_Stream_LE+0x54>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    1638:	80 91 e8 00 	lds	r24, 0x00E8
    163c:	8b 77       	andi	r24, 0x7B	; 123
    163e:	80 93 e8 00 	sts	0x00E8, r24
		{
			TEMPLATE_CLEAR_ENDPOINT();

			#if !defined(NO_STREAM_CALLBACKS)
			if ((Callback != NULL) && (Callback() == STREAMCALLBACK_Abort))
    1642:	e1 14       	cp	r14, r1
    1644:	f1 04       	cpc	r15, r1
    1646:	31 f0       	breq	.+12     	; 0x1654 <Endpoint_Read_Stream_LE+0x4c>
    1648:	f7 01       	movw	r30, r14
    164a:	09 95       	icall
    164c:	81 30       	cpi	r24, 0x01	; 1
    164e:	11 f4       	brne	.+4      	; 0x1654 <Endpoint_Read_Stream_LE+0x4c>
    1650:	85 e0       	ldi	r24, 0x05	; 5
    1652:	0d c0       	rjmp	.+26     	; 0x166e <Endpoint_Read_Stream_LE+0x66>
			  return ENDPOINT_RWSTREAM_CallbackAborted;
			#endif

			if ((ErrorCode = Endpoint_WaitUntilReady()))
    1654:	ce db       	rcall	.-2148   	; 0xdf2 <Endpoint_WaitUntilReady>
    1656:	88 23       	and	r24, r24
    1658:	39 f0       	breq	.+14     	; 0x1668 <Endpoint_Read_Stream_LE+0x60>
    165a:	09 c0       	rjmp	.+18     	; 0x166e <Endpoint_Read_Stream_LE+0x66>
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_Byte(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_Byte(void)
			{
				return UEDATX;
    165c:	80 91 f1 00 	lds	r24, 0x00F1
			  return ErrorCode;
		}
		else
		{
			TEMPLATE_TRANSFER_BYTE(DataStream);
    1660:	f8 01       	movw	r30, r16
    1662:	81 93       	st	Z+, r24
    1664:	8f 01       	movw	r16, r30
			Length--;
    1666:	21 97       	sbiw	r28, 0x01	; 1
				} while (Length >= 8);
		}
	}
	#endif

	while (Length)
    1668:	20 97       	sbiw	r28, 0x00	; 0
    166a:	11 f7       	brne	.-60     	; 0x1630 <Endpoint_Read_Stream_LE+0x28>
    166c:	8d 2d       	mov	r24, r13
			Length--;
		}
	}

	return ENDPOINT_RWSTREAM_NoError;
}
    166e:	df 91       	pop	r29
    1670:	cf 91       	pop	r28
    1672:	1f 91       	pop	r17
    1674:	0f 91       	pop	r16
    1676:	ff 90       	pop	r15
    1678:	ef 90       	pop	r14
    167a:	df 90       	pop	r13
    167c:	08 95       	ret

0000167e <Endpoint_Write_Stream_BE>:
uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE Buffer,
                            uint16_t Length
                            __CALLBACK_PARAM)
{
    167e:	df 92       	push	r13
    1680:	ef 92       	push	r14
    1682:	ff 92       	push	r15
    1684:	0f 93       	push	r16
    1686:	1f 93       	push	r17
    1688:	cf 93       	push	r28
    168a:	df 93       	push	r29
    168c:	8c 01       	movw	r16, r24
    168e:	eb 01       	movw	r28, r22
    1690:	7a 01       	movw	r14, r20
	uint8_t* DataStream = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	uint8_t  ErrorCode;

	if ((ErrorCode = Endpoint_WaitUntilReady()))
    1692:	af db       	rcall	.-2210   	; 0xdf2 <Endpoint_WaitUntilReady>
    1694:	d8 2e       	mov	r13, r24
    1696:	88 23       	and	r24, r24
    1698:	21 f5       	brne	.+72     	; 0x16e2 <Endpoint_Write_Stream_BE+0x64>
uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE Buffer,
                            uint16_t Length
                            __CALLBACK_PARAM)
{
	uint8_t* DataStream = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
    169a:	21 97       	sbiw	r28, 0x01	; 1
    169c:	0c 0f       	add	r16, r28
    169e:	1d 1f       	adc	r17, r29
    16a0:	21 96       	adiw	r28, 0x01	; 1
    16a2:	1d c0       	rjmp	.+58     	; 0x16de <Endpoint_Write_Stream_BE+0x60>
			 *  \return Boolean true if the currently selected endpoint may be read from or written to, depending on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    16a4:	80 91 e8 00 	lds	r24, 0x00E8
	}
	#endif

	while (Length)
	{
		if (!(Endpoint_IsReadWriteAllowed()))
    16a8:	85 fd       	sbrc	r24, 5
    16aa:	12 c0       	rjmp	.+36     	; 0x16d0 <Endpoint_Write_Stream_BE+0x52>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    16ac:	80 91 e8 00 	lds	r24, 0x00E8
    16b0:	8e 77       	andi	r24, 0x7E	; 126
    16b2:	80 93 e8 00 	sts	0x00E8, r24
		{
			TEMPLATE_CLEAR_ENDPOINT();

			#if !defined(NO_STREAM_CALLBACKS)
			if ((Callback != NULL) && (Callback() == STREAMCALLBACK_Abort))
    16b6:	e1 14       	cp	r14, r1
    16b8:	f1 04       	cpc	r15, r1
    16ba:	31 f0       	breq	.+12     	; 0x16c8 <Endpoint_Write_Stream_BE+0x4a>
    16bc:	f7 01       	movw	r30, r14
    16be:	09 95       	icall
    16c0:	81 30       	cpi	r24, 0x01	; 1
    16c2:	11 f4       	brne	.+4      	; 0x16c8 <Endpoint_Write_Stream_BE+0x4a>
    16c4:	85 e0       	ldi	r24, 0x05	; 5
    16c6:	0e c0       	rjmp	.+28     	; 0x16e4 <Endpoint_Write_Stream_BE+0x66>
			  return ENDPOINT_RWSTREAM_CallbackAborted;
			#endif

			if ((ErrorCode = Endpoint_WaitUntilReady()))
    16c8:	94 db       	rcall	.-2264   	; 0xdf2 <Endpoint_WaitUntilReady>
    16ca:	88 23       	and	r24, r24
    16cc:	41 f0       	breq	.+16     	; 0x16de <Endpoint_Write_Stream_BE+0x60>
    16ce:	0a c0       	rjmp	.+20     	; 0x16e4 <Endpoint_Write_Stream_BE+0x66>
			  return ErrorCode;
		}
		else
		{
			TEMPLATE_TRANSFER_BYTE(DataStream);
    16d0:	f8 01       	movw	r30, r16
    16d2:	80 81       	ld	r24, Z
    16d4:	01 50       	subi	r16, 0x01	; 1
    16d6:	10 40       	sbci	r17, 0x00	; 0
			 *  \param[in] Byte  Next byte to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_Byte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_Byte(const uint8_t Byte)
			{
				UEDATX = Byte;
    16d8:	80 93 f1 00 	sts	0x00F1, r24
			Length--;
    16dc:	21 97       	sbiw	r28, 0x01	; 1
				} while (Length >= 8);
		}
	}
	#endif

	while (Length)
    16de:	20 97       	sbiw	r28, 0x00	; 0
    16e0:	09 f7       	brne	.-62     	; 0x16a4 <Endpoint_Write_Stream_BE+0x26>
    16e2:	8d 2d       	mov	r24, r13
			Length--;
		}
	}

	return ENDPOINT_RWSTREAM_NoError;
}
    16e4:	df 91       	pop	r29
    16e6:	cf 91       	pop	r28
    16e8:	1f 91       	pop	r17
    16ea:	0f 91       	pop	r16
    16ec:	ff 90       	pop	r15
    16ee:	ef 90       	pop	r14
    16f0:	df 90       	pop	r13
    16f2:	08 95       	ret

000016f4 <Endpoint_Write_Stream_LE>:
uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE Buffer,
                            uint16_t Length
                            __CALLBACK_PARAM)
{
    16f4:	df 92       	push	r13
    16f6:	ef 92       	push	r14
    16f8:	ff 92       	push	r15
    16fa:	0f 93       	push	r16
    16fc:	1f 93       	push	r17
    16fe:	cf 93       	push	r28
    1700:	df 93       	push	r29
    1702:	18 2f       	mov	r17, r24
    1704:	09 2f       	mov	r16, r25
    1706:	eb 01       	movw	r28, r22
    1708:	7a 01       	movw	r14, r20
	uint8_t* DataStream = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	uint8_t  ErrorCode;

	if ((ErrorCode = Endpoint_WaitUntilReady()))
    170a:	73 db       	rcall	.-2330   	; 0xdf2 <Endpoint_WaitUntilReady>
    170c:	d8 2e       	mov	r13, r24
    170e:	88 23       	and	r24, r24
    1710:	19 f5       	brne	.+70     	; 0x1758 <Endpoint_Write_Stream_LE+0x64>
uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE Buffer,
                            uint16_t Length
                            __CALLBACK_PARAM)
{
	uint8_t* DataStream = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
    1712:	81 2f       	mov	r24, r17
    1714:	90 2f       	mov	r25, r16
    1716:	9c 01       	movw	r18, r24
    1718:	89 01       	movw	r16, r18
    171a:	1c c0       	rjmp	.+56     	; 0x1754 <Endpoint_Write_Stream_LE+0x60>
			 *  \return Boolean true if the currently selected endpoint may be read from or written to, depending on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    171c:	80 91 e8 00 	lds	r24, 0x00E8
	}
	#endif

	while (Length)
	{
		if (!(Endpoint_IsReadWriteAllowed()))
    1720:	85 fd       	sbrc	r24, 5
    1722:	12 c0       	rjmp	.+36     	; 0x1748 <Endpoint_Write_Stream_LE+0x54>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1724:	80 91 e8 00 	lds	r24, 0x00E8
    1728:	8e 77       	andi	r24, 0x7E	; 126
    172a:	80 93 e8 00 	sts	0x00E8, r24
		{
			TEMPLATE_CLEAR_ENDPOINT();

			#if !defined(NO_STREAM_CALLBACKS)
			if ((Callback != NULL) && (Callback() == STREAMCALLBACK_Abort))
    172e:	e1 14       	cp	r14, r1
    1730:	f1 04       	cpc	r15, r1
    1732:	31 f0       	breq	.+12     	; 0x1740 <Endpoint_Write_Stream_LE+0x4c>
    1734:	f7 01       	movw	r30, r14
    1736:	09 95       	icall
    1738:	81 30       	cpi	r24, 0x01	; 1
    173a:	11 f4       	brne	.+4      	; 0x1740 <Endpoint_Write_Stream_LE+0x4c>
    173c:	85 e0       	ldi	r24, 0x05	; 5
    173e:	0d c0       	rjmp	.+26     	; 0x175a <Endpoint_Write_Stream_LE+0x66>
			  return ENDPOINT_RWSTREAM_CallbackAborted;
			#endif

			if ((ErrorCode = Endpoint_WaitUntilReady()))
    1740:	58 db       	rcall	.-2384   	; 0xdf2 <Endpoint_WaitUntilReady>
    1742:	88 23       	and	r24, r24
    1744:	39 f0       	breq	.+14     	; 0x1754 <Endpoint_Write_Stream_LE+0x60>
    1746:	09 c0       	rjmp	.+18     	; 0x175a <Endpoint_Write_Stream_LE+0x66>
			  return ErrorCode;
		}
		else
		{
			TEMPLATE_TRANSFER_BYTE(DataStream);
    1748:	f8 01       	movw	r30, r16
    174a:	81 91       	ld	r24, Z+
    174c:	8f 01       	movw	r16, r30
			 *  \param[in] Byte  Next byte to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_Byte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_Byte(const uint8_t Byte)
			{
				UEDATX = Byte;
    174e:	80 93 f1 00 	sts	0x00F1, r24
			Length--;
    1752:	21 97       	sbiw	r28, 0x01	; 1
				} while (Length >= 8);
		}
	}
	#endif

	while (Length)
    1754:	20 97       	sbiw	r28, 0x00	; 0
    1756:	11 f7       	brne	.-60     	; 0x171c <Endpoint_Write_Stream_LE+0x28>
    1758:	8d 2d       	mov	r24, r13
			Length--;
		}
	}

	return ENDPOINT_RWSTREAM_NoError;
}
    175a:	df 91       	pop	r29
    175c:	cf 91       	pop	r28
    175e:	1f 91       	pop	r17
    1760:	0f 91       	pop	r16
    1762:	ff 90       	pop	r15
    1764:	ef 90       	pop	r14
    1766:	df 90       	pop	r13
    1768:	08 95       	ret

0000176a <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
    176a:	1f 93       	push	r17
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_DeviceTask(void)
{
	if (USB_DeviceState != DEVICE_STATE_Unattached)
    176c:	80 91 88 01 	lds	r24, 0x0188
    1770:	88 23       	and	r24, r24
    1772:	61 f0       	breq	.+24     	; 0x178c <USB_USBTask+0x22>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return (UENUM & ENDPOINT_EPNUM_MASK);
    1774:	10 91 e9 00 	lds	r17, 0x00E9
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    1778:	10 92 e9 00 	sts	0x00E9, r1
			 *  \return Boolean true if the selected endpoint has received a SETUP packet, false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    177c:	80 91 e8 00 	lds	r24, 0x00E8
	{
		uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();

		Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

		if (Endpoint_IsSETUPReceived())
    1780:	83 ff       	sbrs	r24, 3
    1782:	01 c0       	rjmp	.+2      	; 0x1786 <USB_USBTask+0x1c>
		  USB_Device_ProcessControlRequest();
    1784:	d4 dc       	rcall	.-1624   	; 0x112e <USB_Device_ProcessControlRequest>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return (UENUM & ENDPOINT_EPNUM_MASK);
    1786:	17 70       	andi	r17, 0x07	; 7
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    1788:	10 93 e9 00 	sts	0x00E9, r17
		if (USB_CurrentMode == USB_MODE_Device)
		  USB_DeviceTask();
		else if (USB_CurrentMode == USB_MODE_Host)
		  USB_HostTask();
	#endif
}
    178c:	1f 91       	pop	r17
    178e:	08 95       	ret

00001790 <HID_Device_USBTask>:

	return true;
}

void HID_Device_USBTask(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
    1790:	4f 92       	push	r4
    1792:	5f 92       	push	r5
    1794:	6f 92       	push	r6
    1796:	7f 92       	push	r7
    1798:	8f 92       	push	r8
    179a:	9f 92       	push	r9
    179c:	af 92       	push	r10
    179e:	bf 92       	push	r11
    17a0:	cf 92       	push	r12
    17a2:	df 92       	push	r13
    17a4:	ef 92       	push	r14
    17a6:	ff 92       	push	r15
    17a8:	0f 93       	push	r16
    17aa:	1f 93       	push	r17
    17ac:	df 93       	push	r29
    17ae:	cf 93       	push	r28
    17b0:	00 d0       	rcall	.+0      	; 0x17b2 <HID_Device_USBTask+0x22>
    17b2:	0f 92       	push	r0
    17b4:	cd b7       	in	r28, 0x3d	; 61
    17b6:	de b7       	in	r29, 0x3e	; 62
    17b8:	7c 01       	movw	r14, r24
			Endpoint_Write_Stream_LE(ReportINData, ReportINSize, NO_STREAM_CALLBACK);

			Endpoint_ClearIN();
		}
	}
}
    17ba:	6d b6       	in	r6, 0x3d	; 61
    17bc:	7e b6       	in	r7, 0x3e	; 62
	return true;
}

void HID_Device_USBTask(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
	if (USB_DeviceState != DEVICE_STATE_Configured)
    17be:	80 91 88 01 	lds	r24, 0x0188
    17c2:	84 30       	cpi	r24, 0x04	; 4
    17c4:	09 f0       	breq	.+2      	; 0x17c8 <HID_Device_USBTask+0x38>
    17c6:	86 c0       	rjmp	.+268    	; 0x18d4 <HID_Device_USBTask+0x144>
	  return;

	Endpoint_SelectEndpoint(HIDInterfaceInfo->Config.ReportINEndpointNumber);
    17c8:	f7 01       	movw	r30, r14
    17ca:	81 81       	ldd	r24, Z+1	; 0x01
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    17cc:	80 93 e9 00 	sts	0x00E9, r24
			 *  \return Boolean true if the currently selected endpoint may be read from or written to, depending on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    17d0:	80 91 e8 00 	lds	r24, 0x00E8

	if (Endpoint_IsReadWriteAllowed())
    17d4:	85 ff       	sbrs	r24, 5
    17d6:	7e c0       	rjmp	.+252    	; 0x18d4 <HID_Device_USBTask+0x144>
    17d8:	5d b6       	in	r5, 0x3d	; 61
    17da:	4e b6       	in	r4, 0x3e	; 62
	{
		uint8_t  ReportINData[HIDInterfaceInfo->Config.PrevReportINBufferSize];
    17dc:	47 81       	ldd	r20, Z+7	; 0x07
    17de:	8d b7       	in	r24, 0x3d	; 61
    17e0:	9e b7       	in	r25, 0x3e	; 62
    17e2:	84 1b       	sub	r24, r20
    17e4:	91 09       	sbc	r25, r1
    17e6:	0f b6       	in	r0, 0x3f	; 63
    17e8:	f8 94       	cli
    17ea:	9e bf       	out	0x3e, r25	; 62
    17ec:	0f be       	out	0x3f, r0	; 63
    17ee:	8d bf       	out	0x3d, r24	; 61
    17f0:	0d b7       	in	r16, 0x3d	; 61
    17f2:	1e b7       	in	r17, 0x3e	; 62
    17f4:	0f 5f       	subi	r16, 0xFF	; 255
    17f6:	1f 4f       	sbci	r17, 0xFF	; 255
		uint8_t  ReportID     = 0;
    17f8:	19 82       	std	Y+1, r1	; 0x01
		uint16_t ReportINSize = 0;
    17fa:	1b 82       	std	Y+3, r1	; 0x03
    17fc:	1a 82       	std	Y+2, r1	; 0x02

		memset(ReportINData, 0, sizeof(ReportINData));
    17fe:	c0 2e       	mov	r12, r16
    1800:	91 2e       	mov	r9, r17
    1802:	c8 01       	movw	r24, r16
    1804:	60 e0       	ldi	r22, 0x00	; 0
    1806:	70 e0       	ldi	r23, 0x00	; 0
    1808:	50 e0       	ldi	r21, 0x00	; 0
    180a:	62 d3       	rcall	.+1732   	; 0x1ed0 <memset>

		bool ForceSend         = CALLBACK_HID_Device_CreateHIDReport(HIDInterfaceInfo, &ReportID, HID_REPORT_ITEM_In,
		                                                             ReportINData, &ReportINSize);
    180c:	c7 01       	movw	r24, r14
    180e:	be 01       	movw	r22, r28
    1810:	6f 5f       	subi	r22, 0xFF	; 255
    1812:	7f 4f       	sbci	r23, 0xFF	; 255
    1814:	40 e0       	ldi	r20, 0x00	; 0
    1816:	98 01       	movw	r18, r16
    1818:	8e 01       	movw	r16, r28
    181a:	0e 5f       	subi	r16, 0xFE	; 254
    181c:	1f 4f       	sbci	r17, 0xFF	; 255
    181e:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <CALLBACK_HID_Device_CreateHIDReport>
    1822:	88 2e       	mov	r8, r24
		bool StatesChanged     = false;
		bool IdlePeriodElapsed = (HIDInterfaceInfo->State.IdleCount && !(HIDInterfaceInfo->State.IdleMSRemaining));
    1824:	f7 01       	movw	r30, r14
    1826:	81 85       	ldd	r24, Z+9	; 0x09
    1828:	92 85       	ldd	r25, Z+10	; 0x0a
    182a:	89 2b       	or	r24, r25
    182c:	19 f4       	brne	.+6      	; 0x1834 <HID_Device_USBTask+0xa4>
    182e:	aa 24       	eor	r10, r10
    1830:	bb 24       	eor	r11, r11
    1832:	0b c0       	rjmp	.+22     	; 0x184a <HID_Device_USBTask+0xba>
    1834:	20 e0       	ldi	r18, 0x00	; 0
    1836:	f7 01       	movw	r30, r14
    1838:	83 85       	ldd	r24, Z+11	; 0x0b
    183a:	94 85       	ldd	r25, Z+12	; 0x0c
    183c:	89 2b       	or	r24, r25
    183e:	09 f0       	breq	.+2      	; 0x1842 <HID_Device_USBTask+0xb2>
    1840:	21 e0       	ldi	r18, 0x01	; 1
    1842:	81 e0       	ldi	r24, 0x01	; 1
    1844:	28 27       	eor	r18, r24
    1846:	a2 2e       	mov	r10, r18
    1848:	bb 24       	eor	r11, r11

		if (HIDInterfaceInfo->Config.PrevReportINBuffer != NULL)
    184a:	f7 01       	movw	r30, r14
    184c:	05 81       	ldd	r16, Z+5	; 0x05
    184e:	16 81       	ldd	r17, Z+6	; 0x06
    1850:	01 15       	cp	r16, r1
    1852:	11 05       	cpc	r17, r1
    1854:	11 f4       	brne	.+4      	; 0x185a <HID_Device_USBTask+0xca>
    1856:	dd 24       	eor	r13, r13
    1858:	12 c0       	rjmp	.+36     	; 0x187e <HID_Device_USBTask+0xee>
		{
			StatesChanged = (memcmp(ReportINData, HIDInterfaceInfo->Config.PrevReportINBuffer, ReportINSize) != 0);
    185a:	4a 81       	ldd	r20, Y+2	; 0x02
    185c:	5b 81       	ldd	r21, Y+3	; 0x03
    185e:	8c 2d       	mov	r24, r12
    1860:	99 2d       	mov	r25, r9
    1862:	b8 01       	movw	r22, r16
    1864:	1f d3       	rcall	.+1598   	; 0x1ea4 <memcmp>
    1866:	dd 24       	eor	r13, r13
    1868:	00 97       	sbiw	r24, 0x00	; 0
    186a:	11 f0       	breq	.+4      	; 0x1870 <HID_Device_USBTask+0xe0>
    186c:	dd 24       	eor	r13, r13
    186e:	d3 94       	inc	r13
			memcpy(HIDInterfaceInfo->Config.PrevReportINBuffer, ReportINData, HIDInterfaceInfo->Config.PrevReportINBufferSize);
    1870:	f7 01       	movw	r30, r14
    1872:	47 81       	ldd	r20, Z+7	; 0x07
    1874:	c8 01       	movw	r24, r16
    1876:	6c 2d       	mov	r22, r12
    1878:	79 2d       	mov	r23, r9
    187a:	50 e0       	ldi	r21, 0x00	; 0
    187c:	20 d3       	rcall	.+1600   	; 0x1ebe <memcpy>
		}

		if (ReportINSize && (ForceSend || StatesChanged || IdlePeriodElapsed))
    187e:	8a 81       	ldd	r24, Y+2	; 0x02
    1880:	9b 81       	ldd	r25, Y+3	; 0x03
    1882:	89 2b       	or	r24, r25
    1884:	f9 f0       	breq	.+62     	; 0x18c4 <HID_Device_USBTask+0x134>
    1886:	88 20       	and	r8, r8
    1888:	21 f4       	brne	.+8      	; 0x1892 <HID_Device_USBTask+0x102>
    188a:	dd 20       	and	r13, r13
    188c:	11 f4       	brne	.+4      	; 0x1892 <HID_Device_USBTask+0x102>
    188e:	ab 28       	or	r10, r11
    1890:	c9 f0       	breq	.+50     	; 0x18c4 <HID_Device_USBTask+0x134>
		{
			HIDInterfaceInfo->State.IdleMSRemaining = HIDInterfaceInfo->State.IdleCount;
    1892:	f7 01       	movw	r30, r14
    1894:	81 85       	ldd	r24, Z+9	; 0x09
    1896:	92 85       	ldd	r25, Z+10	; 0x0a
    1898:	94 87       	std	Z+12, r25	; 0x0c
    189a:	83 87       	std	Z+11, r24	; 0x0b

			Endpoint_SelectEndpoint(HIDInterfaceInfo->Config.ReportINEndpointNumber);
    189c:	81 81       	ldd	r24, Z+1	; 0x01
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    189e:	80 93 e9 00 	sts	0x00E9, r24

			if (ReportID)
    18a2:	89 81       	ldd	r24, Y+1	; 0x01
    18a4:	88 23       	and	r24, r24
    18a6:	11 f0       	breq	.+4      	; 0x18ac <HID_Device_USBTask+0x11c>
			 *  \param[in] Byte  Next byte to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_Byte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_Byte(const uint8_t Byte)
			{
				UEDATX = Byte;
    18a8:	80 93 f1 00 	sts	0x00F1, r24
			  Endpoint_Write_Byte(ReportID);

			Endpoint_Write_Stream_LE(ReportINData, ReportINSize, NO_STREAM_CALLBACK);
    18ac:	6a 81       	ldd	r22, Y+2	; 0x02
    18ae:	7b 81       	ldd	r23, Y+3	; 0x03
    18b0:	8c 2d       	mov	r24, r12
    18b2:	99 2d       	mov	r25, r9
    18b4:	40 e0       	ldi	r20, 0x00	; 0
    18b6:	50 e0       	ldi	r21, 0x00	; 0
    18b8:	1d df       	rcall	.-454    	; 0x16f4 <Endpoint_Write_Stream_LE>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    18ba:	80 91 e8 00 	lds	r24, 0x00E8
    18be:	8e 77       	andi	r24, 0x7E	; 126
    18c0:	80 93 e8 00 	sts	0x00E8, r24
    18c4:	85 2d       	mov	r24, r5
    18c6:	94 2d       	mov	r25, r4
    18c8:	9c 01       	movw	r18, r24
    18ca:	0f b6       	in	r0, 0x3f	; 63
    18cc:	f8 94       	cli
    18ce:	3e bf       	out	0x3e, r19	; 62
    18d0:	0f be       	out	0x3f, r0	; 63
    18d2:	2d bf       	out	0x3d, r18	; 61

			Endpoint_ClearIN();
		}
	}
}
    18d4:	0f b6       	in	r0, 0x3f	; 63
    18d6:	f8 94       	cli
    18d8:	7e be       	out	0x3e, r7	; 62
    18da:	0f be       	out	0x3f, r0	; 63
    18dc:	6d be       	out	0x3d, r6	; 61
    18de:	0f 90       	pop	r0
    18e0:	0f 90       	pop	r0
    18e2:	0f 90       	pop	r0
    18e4:	cf 91       	pop	r28
    18e6:	df 91       	pop	r29
    18e8:	1f 91       	pop	r17
    18ea:	0f 91       	pop	r16
    18ec:	ff 90       	pop	r15
    18ee:	ef 90       	pop	r14
    18f0:	df 90       	pop	r13
    18f2:	cf 90       	pop	r12
    18f4:	bf 90       	pop	r11
    18f6:	af 90       	pop	r10
    18f8:	9f 90       	pop	r9
    18fa:	8f 90       	pop	r8
    18fc:	7f 90       	pop	r7
    18fe:	6f 90       	pop	r6
    1900:	5f 90       	pop	r5
    1902:	4f 90       	pop	r4
    1904:	08 95       	ret

00001906 <HID_Device_ConfigureEndpoints>:
			break;
	}
}

bool HID_Device_ConfigureEndpoints(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
    1906:	cf 93       	push	r28
    1908:	df 93       	push	r29
    190a:	dc 01       	movw	r26, r24
	memset(&HIDInterfaceInfo->State, 0x00, sizeof(HIDInterfaceInfo->State));
    190c:	08 96       	adiw	r24, 0x08	; 8
    190e:	fc 01       	movw	r30, r24
    1910:	85 e0       	ldi	r24, 0x05	; 5
    1912:	ef 01       	movw	r28, r30
    1914:	19 92       	st	Y+, r1
    1916:	8a 95       	dec	r24
    1918:	e9 f7       	brne	.-6      	; 0x1914 <HID_Device_ConfigureEndpoints+0xe>
	HIDInterfaceInfo->State.UsingReportProtocol = true;
    191a:	81 e0       	ldi	r24, 0x01	; 1
    191c:	18 96       	adiw	r26, 0x08	; 8
    191e:	8c 93       	st	X, r24
    1920:	18 97       	sbiw	r26, 0x08	; 8
	HIDInterfaceInfo->State.IdleCount = 500;
    1922:	84 ef       	ldi	r24, 0xF4	; 244
    1924:	91 e0       	ldi	r25, 0x01	; 1
    1926:	1a 96       	adiw	r26, 0x0a	; 10
    1928:	9c 93       	st	X, r25
    192a:	8e 93       	st	-X, r24
    192c:	19 97       	sbiw	r26, 0x09	; 9

	if (!(Endpoint_ConfigureEndpoint(HIDInterfaceInfo->Config.ReportINEndpointNumber, EP_TYPE_INTERRUPT,
    192e:	11 96       	adiw	r26, 0x01	; 1
    1930:	3c 91       	ld	r19, X
    1932:	11 97       	sbiw	r26, 0x01	; 1
    1934:	12 96       	adiw	r26, 0x02	; 2
    1936:	6d 91       	ld	r22, X+
    1938:	7c 91       	ld	r23, X
    193a:	13 97       	sbiw	r26, 0x03	; 3
    193c:	14 96       	adiw	r26, 0x04	; 4
    193e:	8c 91       	ld	r24, X
    1940:	88 23       	and	r24, r24
    1942:	11 f4       	brne	.+4      	; 0x1948 <HID_Device_ConfigureEndpoints+0x42>
    1944:	40 e0       	ldi	r20, 0x00	; 0
    1946:	01 c0       	rjmp	.+2      	; 0x194a <HID_Device_ConfigureEndpoints+0x44>
    1948:	44 e0       	ldi	r20, 0x04	; 4
    194a:	20 e0       	ldi	r18, 0x00	; 0
    194c:	88 e0       	ldi	r24, 0x08	; 8
    194e:	90 e0       	ldi	r25, 0x00	; 0
    1950:	03 c0       	rjmp	.+6      	; 0x1958 <HID_Device_ConfigureEndpoints+0x52>
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while (CheckBytes < Bytes)
				{
					MaskVal++;
    1952:	2f 5f       	subi	r18, 0xFF	; 255
					CheckBytes <<= 1;
    1954:	88 0f       	add	r24, r24
    1956:	99 1f       	adc	r25, r25
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while (CheckBytes < Bytes)
    1958:	86 17       	cp	r24, r22
    195a:	97 07       	cpc	r25, r23
    195c:	d0 f3       	brcs	.-12     	; 0x1952 <HID_Device_ConfigureEndpoints+0x4c>
			                                              const uint8_t Type,
			                                              const uint8_t Direction,
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				return Endpoint_ConfigureEndpoint_Prv(Number, (((Type) << EPTYPE0) | (Direction)),
    195e:	42 60       	ori	r20, 0x02	; 2
    1960:	22 95       	swap	r18
    1962:	20 7f       	andi	r18, 0xF0	; 240
    1964:	42 2b       	or	r20, r18
    1966:	83 2f       	mov	r24, r19
    1968:	61 ec       	ldi	r22, 0xC1	; 193
    196a:	0f da       	rcall	.-3042   	; 0xd8a <Endpoint_ConfigureEndpoint_Prv>
    196c:	81 11       	cpse	r24, r1
    196e:	81 e0       	ldi	r24, 0x01	; 1
	{
		return false;
	}

	return true;
}
    1970:	df 91       	pop	r29
    1972:	cf 91       	pop	r28
    1974:	08 95       	ret

00001976 <HID_Device_ProcessControlRequest>:
#define  __INCLUDE_FROM_HID_DRIVER
#define  __INCLUDE_FROM_HID_DEVICE_C
#include "HID.h"

void HID_Device_ProcessControlRequest(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
    1976:	6f 92       	push	r6
    1978:	7f 92       	push	r7
    197a:	8f 92       	push	r8
    197c:	9f 92       	push	r9
    197e:	af 92       	push	r10
    1980:	bf 92       	push	r11
    1982:	cf 92       	push	r12
    1984:	df 92       	push	r13
    1986:	ef 92       	push	r14
    1988:	ff 92       	push	r15
    198a:	0f 93       	push	r16
    198c:	1f 93       	push	r17
    198e:	df 93       	push	r29
    1990:	cf 93       	push	r28
    1992:	00 d0       	rcall	.+0      	; 0x1994 <HID_Device_ProcessControlRequest+0x1e>
    1994:	0f 92       	push	r0
    1996:	cd b7       	in	r28, 0x3d	; 61
    1998:	de b7       	in	r29, 0x3e	; 62
    199a:	4c 01       	movw	r8, r24
				Endpoint_ClearStatusStage();
			}

			break;
	}
}
    199c:	6d b6       	in	r6, 0x3d	; 61
    199e:	7e b6       	in	r7, 0x3e	; 62
			 *  \return Boolean true if the selected endpoint has received a SETUP packet, false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    19a0:	80 91 e8 00 	lds	r24, 0x00E8
#define  __INCLUDE_FROM_HID_DEVICE_C
#include "HID.h"

void HID_Device_ProcessControlRequest(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
	if (!(Endpoint_IsSETUPReceived()))
    19a4:	83 ff       	sbrs	r24, 3
    19a6:	fa c0       	rjmp	.+500    	; 0x1b9c <HID_Device_ProcessControlRequest+0x226>
	  return;

	if (USB_ControlRequest.wIndex != HIDInterfaceInfo->Config.InterfaceNumber)
    19a8:	f4 01       	movw	r30, r8
    19aa:	80 81       	ld	r24, Z
    19ac:	90 e0       	ldi	r25, 0x00	; 0
    19ae:	20 91 8d 01 	lds	r18, 0x018D
    19b2:	30 91 8e 01 	lds	r19, 0x018E
    19b6:	28 17       	cp	r18, r24
    19b8:	39 07       	cpc	r19, r25
    19ba:	09 f0       	breq	.+2      	; 0x19be <HID_Device_ProcessControlRequest+0x48>
    19bc:	ef c0       	rjmp	.+478    	; 0x1b9c <HID_Device_ProcessControlRequest+0x226>
	  return;

	switch (USB_ControlRequest.bRequest)
    19be:	80 91 8a 01 	lds	r24, 0x018A
    19c2:	83 30       	cpi	r24, 0x03	; 3
    19c4:	09 f4       	brne	.+2      	; 0x19c8 <HID_Device_ProcessControlRequest+0x52>
    19c6:	9a c0       	rjmp	.+308    	; 0x1afc <HID_Device_ProcessControlRequest+0x186>
    19c8:	84 30       	cpi	r24, 0x04	; 4
    19ca:	30 f4       	brcc	.+12     	; 0x19d8 <HID_Device_ProcessControlRequest+0x62>
    19cc:	81 30       	cpi	r24, 0x01	; 1
    19ce:	71 f0       	breq	.+28     	; 0x19ec <HID_Device_ProcessControlRequest+0x76>
    19d0:	82 30       	cpi	r24, 0x02	; 2
    19d2:	09 f0       	breq	.+2      	; 0x19d6 <HID_Device_ProcessControlRequest+0x60>
    19d4:	e3 c0       	rjmp	.+454    	; 0x1b9c <HID_Device_ProcessControlRequest+0x226>
    19d6:	ca c0       	rjmp	.+404    	; 0x1b6c <HID_Device_ProcessControlRequest+0x1f6>
    19d8:	8a 30       	cpi	r24, 0x0A	; 10
    19da:	09 f4       	brne	.+2      	; 0x19de <HID_Device_ProcessControlRequest+0x68>
    19dc:	af c0       	rjmp	.+350    	; 0x1b3c <HID_Device_ProcessControlRequest+0x1c6>
    19de:	8b 30       	cpi	r24, 0x0B	; 11
    19e0:	09 f4       	brne	.+2      	; 0x19e4 <HID_Device_ProcessControlRequest+0x6e>
    19e2:	99 c0       	rjmp	.+306    	; 0x1b16 <HID_Device_ProcessControlRequest+0x1a0>
    19e4:	89 30       	cpi	r24, 0x09	; 9
    19e6:	09 f0       	breq	.+2      	; 0x19ea <HID_Device_ProcessControlRequest+0x74>
    19e8:	d9 c0       	rjmp	.+434    	; 0x1b9c <HID_Device_ProcessControlRequest+0x226>
    19ea:	50 c0       	rjmp	.+160    	; 0x1a8c <HID_Device_ProcessControlRequest+0x116>
	{
		case HID_REQ_GetReport:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    19ec:	80 91 89 01 	lds	r24, 0x0189
    19f0:	81 3a       	cpi	r24, 0xA1	; 161
    19f2:	09 f0       	breq	.+2      	; 0x19f6 <HID_Device_ProcessControlRequest+0x80>
    19f4:	d3 c0       	rjmp	.+422    	; 0x1b9c <HID_Device_ProcessControlRequest+0x226>
    19f6:	ad b6       	in	r10, 0x3d	; 61
    19f8:	fe b6       	in	r15, 0x3e	; 62
			{
				uint16_t ReportSize = 0;
    19fa:	1b 82       	std	Y+3, r1	; 0x03
    19fc:	1a 82       	std	Y+2, r1	; 0x02
				uint8_t  ReportID   = (USB_ControlRequest.wValue & 0xFF);
    19fe:	80 91 8b 01 	lds	r24, 0x018B
    1a02:	10 91 8c 01 	lds	r17, 0x018C
    1a06:	89 83       	std	Y+1, r24	; 0x01
				uint8_t  ReportType = (USB_ControlRequest.wValue >> 8) - 1;
				uint8_t  ReportData[HIDInterfaceInfo->Config.PrevReportINBufferSize];
    1a08:	f4 01       	movw	r30, r8
    1a0a:	47 81       	ldd	r20, Z+7	; 0x07
    1a0c:	8d b7       	in	r24, 0x3d	; 61
    1a0e:	9e b7       	in	r25, 0x3e	; 62
    1a10:	84 1b       	sub	r24, r20
    1a12:	91 09       	sbc	r25, r1
    1a14:	0f b6       	in	r0, 0x3f	; 63
    1a16:	f8 94       	cli
    1a18:	9e bf       	out	0x3e, r25	; 62
    1a1a:	0f be       	out	0x3f, r0	; 63
    1a1c:	8d bf       	out	0x3d, r24	; 61
    1a1e:	cd b6       	in	r12, 0x3d	; 61
    1a20:	de b6       	in	r13, 0x3e	; 62
    1a22:	08 94       	sec
    1a24:	c1 1c       	adc	r12, r1
    1a26:	d1 1c       	adc	r13, r1

				memset(ReportData, 0, sizeof(ReportData));
    1a28:	ec 2c       	mov	r14, r12
    1a2a:	bd 2c       	mov	r11, r13
    1a2c:	c6 01       	movw	r24, r12
    1a2e:	60 e0       	ldi	r22, 0x00	; 0
    1a30:	70 e0       	ldi	r23, 0x00	; 0
    1a32:	50 e0       	ldi	r21, 0x00	; 0
    1a34:	4d d2       	rcall	.+1178   	; 0x1ed0 <memset>

				CALLBACK_HID_Device_CreateHIDReport(HIDInterfaceInfo, &ReportID, ReportType, ReportData, &ReportSize);
    1a36:	11 50       	subi	r17, 0x01	; 1
    1a38:	c4 01       	movw	r24, r8
    1a3a:	be 01       	movw	r22, r28
    1a3c:	6f 5f       	subi	r22, 0xFF	; 255
    1a3e:	7f 4f       	sbci	r23, 0xFF	; 255
    1a40:	41 2f       	mov	r20, r17
    1a42:	96 01       	movw	r18, r12
    1a44:	8e 01       	movw	r16, r28
    1a46:	0e 5f       	subi	r16, 0xFE	; 254
    1a48:	1f 4f       	sbci	r17, 0xFF	; 255
    1a4a:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <CALLBACK_HID_Device_CreateHIDReport>

				if (HIDInterfaceInfo->Config.PrevReportINBuffer != NULL)
    1a4e:	f4 01       	movw	r30, r8
    1a50:	25 81       	ldd	r18, Z+5	; 0x05
    1a52:	36 81       	ldd	r19, Z+6	; 0x06
    1a54:	21 15       	cp	r18, r1
    1a56:	31 05       	cpc	r19, r1
    1a58:	29 f0       	breq	.+10     	; 0x1a64 <HID_Device_ProcessControlRequest+0xee>
				  memcpy(HIDInterfaceInfo->Config.PrevReportINBuffer, ReportData, HIDInterfaceInfo->Config.PrevReportINBufferSize);
    1a5a:	47 81       	ldd	r20, Z+7	; 0x07
    1a5c:	c9 01       	movw	r24, r18
    1a5e:	b6 01       	movw	r22, r12
    1a60:	50 e0       	ldi	r21, 0x00	; 0
    1a62:	2d d2       	rcall	.+1114   	; 0x1ebe <memcpy>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    1a64:	10 92 e9 00 	sts	0x00E9, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1a68:	80 91 e8 00 	lds	r24, 0x00E8
    1a6c:	87 7f       	andi	r24, 0xF7	; 247
    1a6e:	80 93 e8 00 	sts	0x00E8, r24

				Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

				Endpoint_ClearSETUP();
				Endpoint_Write_Control_Stream_LE(ReportData, ReportSize);
    1a72:	6a 81       	ldd	r22, Y+2	; 0x02
    1a74:	7b 81       	ldd	r23, Y+3	; 0x03
    1a76:	8e 2d       	mov	r24, r14
    1a78:	9b 2d       	mov	r25, r11
    1a7a:	c7 dc       	rcall	.-1650   	; 0x140a <Endpoint_Write_Control_Stream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    1a7c:	80 91 e8 00 	lds	r24, 0x00E8
    1a80:	8b 77       	andi	r24, 0x7B	; 123
    1a82:	80 93 e8 00 	sts	0x00E8, r24
    1a86:	2a 2d       	mov	r18, r10
    1a88:	3f 2d       	mov	r19, r15
    1a8a:	32 c0       	rjmp	.+100    	; 0x1af0 <HID_Device_ProcessControlRequest+0x17a>
				Endpoint_ClearOUT();
			}

			break;
		case HID_REQ_SetReport:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    1a8c:	80 91 89 01 	lds	r24, 0x0189
    1a90:	81 32       	cpi	r24, 0x21	; 33
    1a92:	09 f0       	breq	.+2      	; 0x1a96 <HID_Device_ProcessControlRequest+0x120>
    1a94:	83 c0       	rjmp	.+262    	; 0x1b9c <HID_Device_ProcessControlRequest+0x226>
    1a96:	ae b6       	in	r10, 0x3e	; 62
			{
				uint16_t ReportSize = USB_ControlRequest.wLength;
    1a98:	00 91 8f 01 	lds	r16, 0x018F
    1a9c:	10 91 90 01 	lds	r17, 0x0190
				uint8_t  ReportID   = (USB_ControlRequest.wValue & 0xFF);
    1aa0:	c0 90 8b 01 	lds	r12, 0x018B
    1aa4:	d0 90 8c 01 	lds	r13, 0x018C
				uint8_t  ReportType = (USB_ControlRequest.wValue >> 8) - 1;
				uint8_t  ReportData[ReportSize];
    1aa8:	8d b7       	in	r24, 0x3d	; 61
    1aaa:	9e b7       	in	r25, 0x3e	; 62
    1aac:	80 1b       	sub	r24, r16
    1aae:	91 0b       	sbc	r25, r17
    1ab0:	0f b6       	in	r0, 0x3f	; 63
    1ab2:	f8 94       	cli
    1ab4:	9e bf       	out	0x3e, r25	; 62
    1ab6:	0f be       	out	0x3f, r0	; 63
    1ab8:	8d bf       	out	0x3d, r24	; 61
    1aba:	ed b6       	in	r14, 0x3d	; 61
    1abc:	fe b6       	in	r15, 0x3e	; 62
    1abe:	08 94       	sec
    1ac0:	e1 1c       	adc	r14, r1
    1ac2:	f1 1c       	adc	r15, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1ac4:	80 91 e8 00 	lds	r24, 0x00E8
    1ac8:	87 7f       	andi	r24, 0xF7	; 247
    1aca:	80 93 e8 00 	sts	0x00E8, r24

				Endpoint_ClearSETUP();
				Endpoint_Read_Control_Stream_LE(ReportData, ReportSize);
    1ace:	c7 01       	movw	r24, r14
    1ad0:	b8 01       	movw	r22, r16
    1ad2:	59 dd       	rcall	.-1358   	; 0x1586 <Endpoint_Read_Control_Stream_LE>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1ad4:	80 91 e8 00 	lds	r24, 0x00E8
    1ad8:	8e 77       	andi	r24, 0x7E	; 126
    1ada:	80 93 e8 00 	sts	0x00E8, r24
				Endpoint_ClearIN();

				CALLBACK_HID_Device_ProcessHIDReport(HIDInterfaceInfo, ReportID, ReportType, ReportData, ReportSize);
    1ade:	da 94       	dec	r13
    1ae0:	c4 01       	movw	r24, r8
    1ae2:	6c 2d       	mov	r22, r12
    1ae4:	4d 2d       	mov	r20, r13
    1ae6:	97 01       	movw	r18, r14
    1ae8:	0e 94 2d 01 	call	0x25a	; 0x25a <CALLBACK_HID_Device_ProcessHIDReport>
    1aec:	26 2d       	mov	r18, r6
    1aee:	3a 2d       	mov	r19, r10
    1af0:	0f b6       	in	r0, 0x3f	; 63
    1af2:	f8 94       	cli
    1af4:	3e bf       	out	0x3e, r19	; 62
    1af6:	0f be       	out	0x3f, r0	; 63
    1af8:	2d bf       	out	0x3d, r18	; 61
    1afa:	50 c0       	rjmp	.+160    	; 0x1b9c <HID_Device_ProcessControlRequest+0x226>
			}

			break;
		case HID_REQ_GetProtocol:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    1afc:	80 91 89 01 	lds	r24, 0x0189
    1b00:	81 3a       	cpi	r24, 0xA1	; 161
    1b02:	09 f0       	breq	.+2      	; 0x1b06 <HID_Device_ProcessControlRequest+0x190>
    1b04:	4b c0       	rjmp	.+150    	; 0x1b9c <HID_Device_ProcessControlRequest+0x226>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1b06:	80 91 e8 00 	lds	r24, 0x00E8
    1b0a:	87 7f       	andi	r24, 0xF7	; 247
    1b0c:	80 93 e8 00 	sts	0x00E8, r24
			{
				Endpoint_ClearSETUP();
				Endpoint_Write_Byte(HIDInterfaceInfo->State.UsingReportProtocol);
    1b10:	f4 01       	movw	r30, r8
    1b12:	80 85       	ldd	r24, Z+8	; 0x08
    1b14:	3b c0       	rjmp	.+118    	; 0x1b8c <HID_Device_ProcessControlRequest+0x216>
				Endpoint_ClearStatusStage();
			}

			break;
		case HID_REQ_SetProtocol:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    1b16:	80 91 89 01 	lds	r24, 0x0189
    1b1a:	81 32       	cpi	r24, 0x21	; 33
    1b1c:	09 f0       	breq	.+2      	; 0x1b20 <HID_Device_ProcessControlRequest+0x1aa>
    1b1e:	3e c0       	rjmp	.+124    	; 0x1b9c <HID_Device_ProcessControlRequest+0x226>
    1b20:	80 91 e8 00 	lds	r24, 0x00E8
    1b24:	87 7f       	andi	r24, 0xF7	; 247
    1b26:	80 93 e8 00 	sts	0x00E8, r24
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
    1b2a:	42 d9       	rcall	.-3452   	; 0xdb0 <Endpoint_ClearStatusStage>

				HIDInterfaceInfo->State.UsingReportProtocol = ((USB_ControlRequest.wValue & 0xFF) != 0x00);
    1b2c:	90 e0       	ldi	r25, 0x00	; 0
    1b2e:	80 91 8b 01 	lds	r24, 0x018B
    1b32:	81 11       	cpse	r24, r1
    1b34:	91 e0       	ldi	r25, 0x01	; 1
    1b36:	f4 01       	movw	r30, r8
    1b38:	90 87       	std	Z+8, r25	; 0x08
    1b3a:	30 c0       	rjmp	.+96     	; 0x1b9c <HID_Device_ProcessControlRequest+0x226>
			}

			break;
		case HID_REQ_SetIdle:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    1b3c:	80 91 89 01 	lds	r24, 0x0189
    1b40:	81 32       	cpi	r24, 0x21	; 33
    1b42:	61 f5       	brne	.+88     	; 0x1b9c <HID_Device_ProcessControlRequest+0x226>
    1b44:	80 91 e8 00 	lds	r24, 0x00E8
    1b48:	87 7f       	andi	r24, 0xF7	; 247
    1b4a:	80 93 e8 00 	sts	0x00E8, r24
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
    1b4e:	30 d9       	rcall	.-3488   	; 0xdb0 <Endpoint_ClearStatusStage>

				HIDInterfaceInfo->State.IdleCount = ((USB_ControlRequest.wValue & 0xFF00) >> 6);
    1b50:	80 91 8b 01 	lds	r24, 0x018B
    1b54:	90 91 8c 01 	lds	r25, 0x018C
    1b58:	80 70       	andi	r24, 0x00	; 0
    1b5a:	76 e0       	ldi	r23, 0x06	; 6
    1b5c:	96 95       	lsr	r25
    1b5e:	87 95       	ror	r24
    1b60:	7a 95       	dec	r23
    1b62:	e1 f7       	brne	.-8      	; 0x1b5c <HID_Device_ProcessControlRequest+0x1e6>
    1b64:	f4 01       	movw	r30, r8
    1b66:	92 87       	std	Z+10, r25	; 0x0a
    1b68:	81 87       	std	Z+9, r24	; 0x09
    1b6a:	18 c0       	rjmp	.+48     	; 0x1b9c <HID_Device_ProcessControlRequest+0x226>
			}

			break;
		case HID_REQ_GetIdle:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    1b6c:	80 91 89 01 	lds	r24, 0x0189
    1b70:	81 3a       	cpi	r24, 0xA1	; 161
    1b72:	a1 f4       	brne	.+40     	; 0x1b9c <HID_Device_ProcessControlRequest+0x226>
    1b74:	80 91 e8 00 	lds	r24, 0x00E8
    1b78:	87 7f       	andi	r24, 0xF7	; 247
    1b7a:	80 93 e8 00 	sts	0x00E8, r24
			{
				Endpoint_ClearSETUP();
				Endpoint_Write_Byte(HIDInterfaceInfo->State.IdleCount >> 2);
    1b7e:	f4 01       	movw	r30, r8
    1b80:	81 85       	ldd	r24, Z+9	; 0x09
    1b82:	92 85       	ldd	r25, Z+10	; 0x0a
    1b84:	96 95       	lsr	r25
    1b86:	87 95       	ror	r24
    1b88:	96 95       	lsr	r25
    1b8a:	87 95       	ror	r24
			 *  \param[in] Byte  Next byte to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_Byte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_Byte(const uint8_t Byte)
			{
				UEDATX = Byte;
    1b8c:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1b90:	80 91 e8 00 	lds	r24, 0x00E8
    1b94:	8e 77       	andi	r24, 0x7E	; 126
    1b96:	80 93 e8 00 	sts	0x00E8, r24
				Endpoint_ClearIN();
				Endpoint_ClearStatusStage();
    1b9a:	0a d9       	rcall	.-3564   	; 0xdb0 <Endpoint_ClearStatusStage>
			}

			break;
	}
}
    1b9c:	0f b6       	in	r0, 0x3f	; 63
    1b9e:	f8 94       	cli
    1ba0:	7e be       	out	0x3e, r7	; 62
    1ba2:	0f be       	out	0x3f, r0	; 63
    1ba4:	6d be       	out	0x3d, r6	; 61
    1ba6:	0f 90       	pop	r0
    1ba8:	0f 90       	pop	r0
    1baa:	0f 90       	pop	r0
    1bac:	cf 91       	pop	r28
    1bae:	df 91       	pop	r29
    1bb0:	1f 91       	pop	r17
    1bb2:	0f 91       	pop	r16
    1bb4:	ff 90       	pop	r15
    1bb6:	ef 90       	pop	r14
    1bb8:	df 90       	pop	r13
    1bba:	cf 90       	pop	r12
    1bbc:	bf 90       	pop	r11
    1bbe:	af 90       	pop	r10
    1bc0:	9f 90       	pop	r9
    1bc2:	8f 90       	pop	r8
    1bc4:	7f 90       	pop	r7
    1bc6:	6f 90       	pop	r6
    1bc8:	08 95       	ret

00001bca <StreamCallback_MS_Device_AbortOnMassStoreReset>:
{
	#if !defined(INTERRUPT_CONTROL_ENDPOINT)
	USB_USBTask();
	#endif

	if (*CallbackIsResetSource)
    1bca:	e0 91 7a 01 	lds	r30, 0x017A
    1bce:	f0 91 7b 01 	lds	r31, 0x017B
    1bd2:	80 81       	ld	r24, Z
	  return STREAMCALLBACK_Abort;
	else
	  return STREAMCALLBACK_Continue;
}
    1bd4:	08 95       	ret

00001bd6 <MS_Device_USBTask>:

	return true;
}

void MS_Device_USBTask(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
    1bd6:	0f 93       	push	r16
    1bd8:	1f 93       	push	r17
    1bda:	cf 93       	push	r28
    1bdc:	df 93       	push	r29
    1bde:	ec 01       	movw	r28, r24
	if (USB_DeviceState != DEVICE_STATE_Configured)
    1be0:	80 91 88 01 	lds	r24, 0x0188
    1be4:	84 30       	cpi	r24, 0x04	; 4
    1be6:	09 f0       	breq	.+2      	; 0x1bea <MS_Device_USBTask+0x14>
    1be8:	e1 c0       	rjmp	.+450    	; 0x1dac <MS_Device_USBTask+0x1d6>
	  return;

	Endpoint_SelectEndpoint(MSInterfaceInfo->Config.DataOUTEndpointNumber);
    1bea:	9d 81       	ldd	r25, Y+5	; 0x05
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    1bec:	90 93 e9 00 	sts	0x00E9, r25
			 *  \return Boolean true if the currently selected endpoint may be read from or written to, depending on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    1bf0:	80 91 e8 00 	lds	r24, 0x00E8

	if (Endpoint_IsReadWriteAllowed())
    1bf4:	85 ff       	sbrs	r24, 5
    1bf6:	a5 c0       	rjmp	.+330    	; 0x1d42 <MS_Device_USBTask+0x16c>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    1bf8:	90 93 e9 00 	sts	0x00E9, r25

static bool MS_Device_ReadInCommandBlock(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
	Endpoint_SelectEndpoint(MSInterfaceInfo->Config.DataOUTEndpointNumber);

	CallbackIsResetSource = &MSInterfaceInfo->State.IsMassStoreReset;
    1bfc:	8e 01       	movw	r16, r28
    1bfe:	0a 5c       	subi	r16, 0xCA	; 202
    1c00:	1f 4f       	sbci	r17, 0xFF	; 255
    1c02:	10 93 7b 01 	sts	0x017B, r17
    1c06:	00 93 7a 01 	sts	0x017A, r16
	if (Endpoint_Read_Stream_LE(&MSInterfaceInfo->State.CommandBlock,
    1c0a:	ce 01       	movw	r24, r28
    1c0c:	0a 96       	adiw	r24, 0x0a	; 10
    1c0e:	6f e0       	ldi	r22, 0x0F	; 15
    1c10:	70 e0       	ldi	r23, 0x00	; 0
    1c12:	45 ee       	ldi	r20, 0xE5	; 229
    1c14:	5d e0       	ldi	r21, 0x0D	; 13
    1c16:	f8 dc       	rcall	.-1552   	; 0x1608 <Endpoint_Read_Stream_LE>
    1c18:	88 23       	and	r24, r24
    1c1a:	09 f0       	breq	.+2      	; 0x1c1e <MS_Device_USBTask+0x48>
    1c1c:	92 c0       	rjmp	.+292    	; 0x1d42 <MS_Device_USBTask+0x16c>
	                            StreamCallback_MS_Device_AbortOnMassStoreReset))
	{
		return false;
	}

	if ((MSInterfaceInfo->State.CommandBlock.Signature         != MS_CBW_SIGNATURE)                  ||
    1c1e:	8a 85       	ldd	r24, Y+10	; 0x0a
    1c20:	9b 85       	ldd	r25, Y+11	; 0x0b
    1c22:	ac 85       	ldd	r26, Y+12	; 0x0c
    1c24:	bd 85       	ldd	r27, Y+13	; 0x0d
    1c26:	85 55       	subi	r24, 0x55	; 85
    1c28:	93 45       	sbci	r25, 0x53	; 83
    1c2a:	a2 44       	sbci	r26, 0x42	; 66
    1c2c:	b3 44       	sbci	r27, 0x43	; 67
    1c2e:	79 f4       	brne	.+30     	; 0x1c4e <MS_Device_USBTask+0x78>
    1c30:	9f 89       	ldd	r25, Y+23	; 0x17
    1c32:	89 85       	ldd	r24, Y+9	; 0x09
    1c34:	98 17       	cp	r25, r24
    1c36:	58 f4       	brcc	.+22     	; 0x1c4e <MS_Device_USBTask+0x78>
    1c38:	8e 89       	ldd	r24, Y+22	; 0x16
    1c3a:	90 e0       	ldi	r25, 0x00	; 0
    1c3c:	8f 71       	andi	r24, 0x1F	; 31
    1c3e:	90 70       	andi	r25, 0x00	; 0
    1c40:	89 2b       	or	r24, r25
    1c42:	29 f4       	brne	.+10     	; 0x1c4e <MS_Device_USBTask+0x78>
    1c44:	68 8d       	ldd	r22, Y+24	; 0x18
    1c46:	66 23       	and	r22, r22
    1c48:	11 f0       	breq	.+4      	; 0x1c4e <MS_Device_USBTask+0x78>
    1c4a:	61 31       	cpi	r22, 0x11	; 17
    1c4c:	70 f0       	brcs	.+28     	; 0x1c6a <MS_Device_USBTask+0x94>
			 *  \ingroup Group_EndpointPacketManagement
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    1c4e:	80 91 eb 00 	lds	r24, 0x00EB
    1c52:	80 62       	ori	r24, 0x20	; 32
    1c54:	80 93 eb 00 	sts	0x00EB, r24
		(MSInterfaceInfo->State.CommandBlock.Flags              & 0x1F)                              ||
		(MSInterfaceInfo->State.CommandBlock.SCSICommandLength == 0)                                 ||
		(MSInterfaceInfo->State.CommandBlock.SCSICommandLength >  16))
	{
		Endpoint_StallTransaction();
		Endpoint_SelectEndpoint(MSInterfaceInfo->Config.DataINEndpointNumber);
    1c58:	89 81       	ldd	r24, Y+1	; 0x01
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    1c5a:	80 93 e9 00 	sts	0x00E9, r24
			 *  \ingroup Group_EndpointPacketManagement
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    1c5e:	80 91 eb 00 	lds	r24, 0x00EB
    1c62:	80 62       	ori	r24, 0x20	; 32
    1c64:	80 93 eb 00 	sts	0x00EB, r24
    1c68:	6c c0       	rjmp	.+216    	; 0x1d42 <MS_Device_USBTask+0x16c>
		Endpoint_StallTransaction();

		return false;
	}

	CallbackIsResetSource = &MSInterfaceInfo->State.IsMassStoreReset;
    1c6a:	10 93 7b 01 	sts	0x017B, r17
    1c6e:	00 93 7a 01 	sts	0x017A, r16
	if (Endpoint_Read_Stream_LE(&MSInterfaceInfo->State.CommandBlock.SCSICommandData,
    1c72:	ce 01       	movw	r24, r28
    1c74:	49 96       	adiw	r24, 0x19	; 25
    1c76:	70 e0       	ldi	r23, 0x00	; 0
    1c78:	45 ee       	ldi	r20, 0xE5	; 229
    1c7a:	5d e0       	ldi	r21, 0x0D	; 13
    1c7c:	c5 dc       	rcall	.-1654   	; 0x1608 <Endpoint_Read_Stream_LE>
    1c7e:	88 23       	and	r24, r24
    1c80:	09 f0       	breq	.+2      	; 0x1c84 <MS_Device_USBTask+0xae>
    1c82:	5f c0       	rjmp	.+190    	; 0x1d42 <MS_Device_USBTask+0x16c>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    1c84:	80 91 e8 00 	lds	r24, 0x00E8
    1c88:	8b 77       	andi	r24, 0x7B	; 123
    1c8a:	80 93 e8 00 	sts	0x00E8, r24

	if (Endpoint_IsReadWriteAllowed())
	{
		if (MS_Device_ReadInCommandBlock(MSInterfaceInfo))
		{
			if (MSInterfaceInfo->State.CommandBlock.Flags & MS_COMMAND_DIR_DATA_IN)
    1c8e:	8e 89       	ldd	r24, Y+22	; 0x16
    1c90:	87 ff       	sbrs	r24, 7
    1c92:	03 c0       	rjmp	.+6      	; 0x1c9a <MS_Device_USBTask+0xc4>
			  Endpoint_SelectEndpoint(MSInterfaceInfo->Config.DataINEndpointNumber);
    1c94:	89 81       	ldd	r24, Y+1	; 0x01
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    1c96:	80 93 e9 00 	sts	0x00E9, r24

			MSInterfaceInfo->State.CommandStatus.Status = CALLBACK_MS_Device_SCSICommandReceived(MSInterfaceInfo) ?
    1c9a:	ce 01       	movw	r24, r28
    1c9c:	0e 94 3b 01 	call	0x276	; 0x276 <CALLBACK_MS_Device_SCSICommandReceived>
    1ca0:	91 e0       	ldi	r25, 0x01	; 1
    1ca2:	98 27       	eor	r25, r24
    1ca4:	9d ab       	std	Y+53, r25	; 0x35
			                                               MS_SCSI_COMMAND_Pass : MS_SCSI_COMMAND_Fail;
			MSInterfaceInfo->State.CommandStatus.Signature           = MS_CSW_SIGNATURE;
    1ca6:	25 e5       	ldi	r18, 0x55	; 85
    1ca8:	33 e5       	ldi	r19, 0x53	; 83
    1caa:	42 e4       	ldi	r20, 0x42	; 66
    1cac:	53 e5       	ldi	r21, 0x53	; 83
    1cae:	29 a7       	std	Y+41, r18	; 0x29
    1cb0:	3a a7       	std	Y+42, r19	; 0x2a
    1cb2:	4b a7       	std	Y+43, r20	; 0x2b
    1cb4:	5c a7       	std	Y+44, r21	; 0x2c
			MSInterfaceInfo->State.CommandStatus.Tag                 = MSInterfaceInfo->State.CommandBlock.Tag;
    1cb6:	2e 85       	ldd	r18, Y+14	; 0x0e
    1cb8:	3f 85       	ldd	r19, Y+15	; 0x0f
    1cba:	48 89       	ldd	r20, Y+16	; 0x10
    1cbc:	59 89       	ldd	r21, Y+17	; 0x11
    1cbe:	2d a7       	std	Y+45, r18	; 0x2d
    1cc0:	3e a7       	std	Y+46, r19	; 0x2e
    1cc2:	4f a7       	std	Y+47, r20	; 0x2f
    1cc4:	58 ab       	std	Y+48, r21	; 0x30
			MSInterfaceInfo->State.CommandStatus.DataTransferResidue = MSInterfaceInfo->State.CommandBlock.DataTransferLength;
    1cc6:	2a 89       	ldd	r18, Y+18	; 0x12
    1cc8:	3b 89       	ldd	r19, Y+19	; 0x13
    1cca:	4c 89       	ldd	r20, Y+20	; 0x14
    1ccc:	5d 89       	ldd	r21, Y+21	; 0x15
    1cce:	29 ab       	std	Y+49, r18	; 0x31
    1cd0:	3a ab       	std	Y+50, r19	; 0x32
    1cd2:	4b ab       	std	Y+51, r20	; 0x33
    1cd4:	5c ab       	std	Y+52, r21	; 0x34

			if ((MSInterfaceInfo->State.CommandStatus.Status == MS_SCSI_COMMAND_Fail) &&
    1cd6:	91 30       	cpi	r25, 0x01	; 1
    1cd8:	51 f4       	brne	.+20     	; 0x1cee <MS_Device_USBTask+0x118>
    1cda:	21 15       	cp	r18, r1
    1cdc:	31 05       	cpc	r19, r1
    1cde:	41 05       	cpc	r20, r1
    1ce0:	51 05       	cpc	r21, r1
    1ce2:	29 f0       	breq	.+10     	; 0x1cee <MS_Device_USBTask+0x118>
			 *  \ingroup Group_EndpointPacketManagement
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    1ce4:	80 91 eb 00 	lds	r24, 0x00EB
    1ce8:	80 62       	ori	r24, 0x20	; 32
    1cea:	80 93 eb 00 	sts	0x00EB, r24
	return true;
}

static void MS_Device_ReturnCommandStatus(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
	Endpoint_SelectEndpoint(MSInterfaceInfo->Config.DataOUTEndpointNumber);
    1cee:	8d 81       	ldd	r24, Y+5	; 0x05
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    1cf0:	80 93 e9 00 	sts	0x00E9, r24
    1cf4:	03 c0       	rjmp	.+6      	; 0x1cfc <MS_Device_USBTask+0x126>
	{
		#if !defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_USBTask();
		#endif

		if (MSInterfaceInfo->State.IsMassStoreReset)
    1cf6:	8e a9       	ldd	r24, Y+54	; 0x36
    1cf8:	88 23       	and	r24, r24
    1cfa:	19 f5       	brne	.+70     	; 0x1d42 <MS_Device_USBTask+0x16c>
			 *  \return Boolean true if the currently selected endpoint is stalled, false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    1cfc:	80 91 eb 00 	lds	r24, 0x00EB

static void MS_Device_ReturnCommandStatus(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
	Endpoint_SelectEndpoint(MSInterfaceInfo->Config.DataOUTEndpointNumber);

	while (Endpoint_IsStalled())
    1d00:	85 fd       	sbrc	r24, 5
    1d02:	f9 cf       	rjmp	.-14     	; 0x1cf6 <MS_Device_USBTask+0x120>

		if (MSInterfaceInfo->State.IsMassStoreReset)
		  return;
	}

	Endpoint_SelectEndpoint(MSInterfaceInfo->Config.DataINEndpointNumber);
    1d04:	89 81       	ldd	r24, Y+1	; 0x01
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    1d06:	80 93 e9 00 	sts	0x00E9, r24
    1d0a:	03 c0       	rjmp	.+6      	; 0x1d12 <MS_Device_USBTask+0x13c>
	{
		#if !defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_USBTask();
		#endif

		if (MSInterfaceInfo->State.IsMassStoreReset)
    1d0c:	8e a9       	ldd	r24, Y+54	; 0x36
    1d0e:	88 23       	and	r24, r24
    1d10:	c1 f4       	brne	.+48     	; 0x1d42 <MS_Device_USBTask+0x16c>
			 *  \return Boolean true if the currently selected endpoint is stalled, false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    1d12:	80 91 eb 00 	lds	r24, 0x00EB
		  return;
	}

	Endpoint_SelectEndpoint(MSInterfaceInfo->Config.DataINEndpointNumber);

	while (Endpoint_IsStalled())
    1d16:	85 fd       	sbrc	r24, 5
    1d18:	f9 cf       	rjmp	.-14     	; 0x1d0c <MS_Device_USBTask+0x136>

		if (MSInterfaceInfo->State.IsMassStoreReset)
		  return;
	}

	CallbackIsResetSource = &MSInterfaceInfo->State.IsMassStoreReset;
    1d1a:	e6 96       	adiw	r28, 0x36	; 54
    1d1c:	d0 93 7b 01 	sts	0x017B, r29
    1d20:	c0 93 7a 01 	sts	0x017A, r28
    1d24:	e6 97       	sbiw	r28, 0x36	; 54
	if (Endpoint_Write_Stream_LE(&MSInterfaceInfo->State.CommandStatus, sizeof(MS_CommandStatusWrapper_t),
    1d26:	ce 01       	movw	r24, r28
    1d28:	89 96       	adiw	r24, 0x29	; 41
    1d2a:	6d e0       	ldi	r22, 0x0D	; 13
    1d2c:	70 e0       	ldi	r23, 0x00	; 0
    1d2e:	45 ee       	ldi	r20, 0xE5	; 229
    1d30:	5d e0       	ldi	r21, 0x0D	; 13
    1d32:	e0 dc       	rcall	.-1600   	; 0x16f4 <Endpoint_Write_Stream_LE>
    1d34:	88 23       	and	r24, r24
    1d36:	29 f4       	brne	.+10     	; 0x1d42 <MS_Device_USBTask+0x16c>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1d38:	80 91 e8 00 	lds	r24, 0x00E8
    1d3c:	8e 77       	andi	r24, 0x7E	; 126
    1d3e:	80 93 e8 00 	sts	0x00E8, r24

			MS_Device_ReturnCommandStatus(MSInterfaceInfo);
		}
	}

	if (MSInterfaceInfo->State.IsMassStoreReset)
    1d42:	8e a9       	ldd	r24, Y+54	; 0x36
    1d44:	88 23       	and	r24, r24
    1d46:	91 f1       	breq	.+100    	; 0x1dac <MS_Device_USBTask+0x1d6>
	{
		Endpoint_ResetFIFO(MSInterfaceInfo->Config.DataOUTEndpointNumber);
    1d48:	4d 81       	ldd	r20, Y+5	; 0x05
			 *  \param[in] EndpointNumber Endpoint number whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetFIFO(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetFIFO(const uint8_t EndpointNumber)
			{
				UERST = (1 << EndpointNumber);
    1d4a:	21 e0       	ldi	r18, 0x01	; 1
    1d4c:	30 e0       	ldi	r19, 0x00	; 0
    1d4e:	c9 01       	movw	r24, r18
    1d50:	04 2e       	mov	r0, r20
    1d52:	02 c0       	rjmp	.+4      	; 0x1d58 <MS_Device_USBTask+0x182>
    1d54:	88 0f       	add	r24, r24
    1d56:	99 1f       	adc	r25, r25
    1d58:	0a 94       	dec	r0
    1d5a:	e2 f7       	brpl	.-8      	; 0x1d54 <MS_Device_USBTask+0x17e>
    1d5c:	80 93 ea 00 	sts	0x00EA, r24
				UERST = 0;
    1d60:	10 92 ea 00 	sts	0x00EA, r1
		Endpoint_ResetFIFO(MSInterfaceInfo->Config.DataINEndpointNumber);
    1d64:	99 81       	ldd	r25, Y+1	; 0x01
			 *  \param[in] EndpointNumber Endpoint number whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetFIFO(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetFIFO(const uint8_t EndpointNumber)
			{
				UERST = (1 << EndpointNumber);
    1d66:	09 2e       	mov	r0, r25
    1d68:	02 c0       	rjmp	.+4      	; 0x1d6e <MS_Device_USBTask+0x198>
    1d6a:	22 0f       	add	r18, r18
    1d6c:	33 1f       	adc	r19, r19
    1d6e:	0a 94       	dec	r0
    1d70:	e2 f7       	brpl	.-8      	; 0x1d6a <MS_Device_USBTask+0x194>
    1d72:	20 93 ea 00 	sts	0x00EA, r18
				UERST = 0;
    1d76:	10 92 ea 00 	sts	0x00EA, r1
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    1d7a:	40 93 e9 00 	sts	0x00E9, r20
			 *  \ingroup Group_EndpointPacketManagement
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
    1d7e:	80 91 eb 00 	lds	r24, 0x00EB
    1d82:	80 61       	ori	r24, 0x10	; 16
    1d84:	80 93 eb 00 	sts	0x00EB, r24

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
    1d88:	80 91 eb 00 	lds	r24, 0x00EB
    1d8c:	88 60       	ori	r24, 0x08	; 8
    1d8e:	80 93 eb 00 	sts	0x00EB, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    1d92:	90 93 e9 00 	sts	0x00E9, r25
			 *  \ingroup Group_EndpointPacketManagement
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
    1d96:	80 91 eb 00 	lds	r24, 0x00EB
    1d9a:	80 61       	ori	r24, 0x10	; 16
    1d9c:	80 93 eb 00 	sts	0x00EB, r24

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
    1da0:	80 91 eb 00 	lds	r24, 0x00EB
    1da4:	88 60       	ori	r24, 0x08	; 8
    1da6:	80 93 eb 00 	sts	0x00EB, r24
		Endpoint_ResetDataToggle();
		Endpoint_SelectEndpoint(MSInterfaceInfo->Config.DataINEndpointNumber);
		Endpoint_ClearStall();
		Endpoint_ResetDataToggle();

		MSInterfaceInfo->State.IsMassStoreReset = false;
    1daa:	1e aa       	std	Y+54, r1	; 0x36
	}
}
    1dac:	df 91       	pop	r29
    1dae:	cf 91       	pop	r28
    1db0:	1f 91       	pop	r17
    1db2:	0f 91       	pop	r16
    1db4:	08 95       	ret

00001db6 <MS_Device_ConfigureEndpoints>:
			break;
	}
}

bool MS_Device_ConfigureEndpoints(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
    1db6:	1f 93       	push	r17
    1db8:	cf 93       	push	r28
    1dba:	df 93       	push	r29
    1dbc:	ec 01       	movw	r28, r24
	memset(&MSInterfaceInfo->State, 0x00, sizeof(MSInterfaceInfo->State));
    1dbe:	0a 96       	adiw	r24, 0x0a	; 10
    1dc0:	fc 01       	movw	r30, r24
    1dc2:	8d e2       	ldi	r24, 0x2D	; 45
    1dc4:	df 01       	movw	r26, r30
    1dc6:	1d 92       	st	X+, r1
    1dc8:	8a 95       	dec	r24
    1dca:	e9 f7       	brne	.-6      	; 0x1dc6 <MS_Device_ConfigureEndpoints+0x10>
    1dcc:	11 e0       	ldi	r17, 0x01	; 1
		uint16_t Size;
		uint8_t  Type;
		uint8_t  Direction;
		bool     DoubleBanked;

		if (EndpointNum == MSInterfaceInfo->Config.DataINEndpointNumber)
    1dce:	89 81       	ldd	r24, Y+1	; 0x01
    1dd0:	18 17       	cp	r17, r24
    1dd2:	29 f4       	brne	.+10     	; 0x1dde <MS_Device_ConfigureEndpoints+0x28>
		{
			Size         = MSInterfaceInfo->Config.DataINEndpointSize;
    1dd4:	ea 81       	ldd	r30, Y+2	; 0x02
    1dd6:	fb 81       	ldd	r31, Y+3	; 0x03
			Direction    = ENDPOINT_DIR_IN;
			Type         = EP_TYPE_BULK;
			DoubleBanked = MSInterfaceInfo->Config.DataINEndpointDoubleBank;
    1dd8:	8c 81       	ldd	r24, Y+4	; 0x04
    1dda:	61 e0       	ldi	r22, 0x01	; 1
    1ddc:	07 c0       	rjmp	.+14     	; 0x1dec <MS_Device_ConfigureEndpoints+0x36>
		}
		else if (EndpointNum == MSInterfaceInfo->Config.DataOUTEndpointNumber)
    1dde:	8d 81       	ldd	r24, Y+5	; 0x05
    1de0:	18 17       	cp	r17, r24
    1de2:	e9 f4       	brne	.+58     	; 0x1e1e <MS_Device_ConfigureEndpoints+0x68>
		{
			Size         = MSInterfaceInfo->Config.DataOUTEndpointSize;
    1de4:	ee 81       	ldd	r30, Y+6	; 0x06
    1de6:	ff 81       	ldd	r31, Y+7	; 0x07
			Direction    = ENDPOINT_DIR_OUT;
			Type         = EP_TYPE_BULK;
			DoubleBanked = MSInterfaceInfo->Config.DataOUTEndpointDoubleBank;
    1de8:	88 85       	ldd	r24, Y+8	; 0x08
    1dea:	60 e0       	ldi	r22, 0x00	; 0
		else
		{
			continue;
		}

		if (!(Endpoint_ConfigureEndpoint(EndpointNum, Type, Direction, Size,
    1dec:	88 23       	and	r24, r24
    1dee:	11 f4       	brne	.+4      	; 0x1df4 <MS_Device_ConfigureEndpoints+0x3e>
    1df0:	40 e0       	ldi	r20, 0x00	; 0
    1df2:	01 c0       	rjmp	.+2      	; 0x1df6 <MS_Device_ConfigureEndpoints+0x40>
    1df4:	44 e0       	ldi	r20, 0x04	; 4
    1df6:	20 e0       	ldi	r18, 0x00	; 0
    1df8:	88 e0       	ldi	r24, 0x08	; 8
    1dfa:	90 e0       	ldi	r25, 0x00	; 0
    1dfc:	03 c0       	rjmp	.+6      	; 0x1e04 <MS_Device_ConfigureEndpoints+0x4e>
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while (CheckBytes < Bytes)
				{
					MaskVal++;
    1dfe:	2f 5f       	subi	r18, 0xFF	; 255
					CheckBytes <<= 1;
    1e00:	88 0f       	add	r24, r24
    1e02:	99 1f       	adc	r25, r25
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while (CheckBytes < Bytes)
    1e04:	8e 17       	cp	r24, r30
    1e06:	9f 07       	cpc	r25, r31
    1e08:	d0 f3       	brcs	.-12     	; 0x1dfe <MS_Device_ConfigureEndpoints+0x48>
			                                              const uint8_t Type,
			                                              const uint8_t Direction,
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				return Endpoint_ConfigureEndpoint_Prv(Number, (((Type) << EPTYPE0) | (Direction)),
    1e0a:	60 68       	ori	r22, 0x80	; 128
    1e0c:	42 60       	ori	r20, 0x02	; 2
    1e0e:	22 95       	swap	r18
    1e10:	20 7f       	andi	r18, 0xF0	; 240
    1e12:	42 2b       	or	r20, r18
    1e14:	81 2f       	mov	r24, r17
    1e16:	0e 94 c5 06 	call	0xd8a	; 0xd8a <Endpoint_ConfigureEndpoint_Prv>
    1e1a:	88 23       	and	r24, r24
    1e1c:	21 f0       	breq	.+8      	; 0x1e26 <MS_Device_ConfigureEndpoints+0x70>

bool MS_Device_ConfigureEndpoints(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
	memset(&MSInterfaceInfo->State, 0x00, sizeof(MSInterfaceInfo->State));

	for (uint8_t EndpointNum = 1; EndpointNum < ENDPOINT_TOTAL_ENDPOINTS; EndpointNum++)
    1e1e:	1f 5f       	subi	r17, 0xFF	; 255
    1e20:	17 30       	cpi	r17, 0x07	; 7
    1e22:	a9 f6       	brne	.-86     	; 0x1dce <MS_Device_ConfigureEndpoints+0x18>
    1e24:	81 e0       	ldi	r24, 0x01	; 1
			return false;
		}
	}

	return true;
}
    1e26:	df 91       	pop	r29
    1e28:	cf 91       	pop	r28
    1e2a:	1f 91       	pop	r17
    1e2c:	08 95       	ret

00001e2e <MS_Device_ProcessControlRequest>:
#include "MassStorage.h"

static volatile bool* CallbackIsResetSource;

void MS_Device_ProcessControlRequest(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
    1e2e:	cf 93       	push	r28
    1e30:	df 93       	push	r29
    1e32:	ec 01       	movw	r28, r24
			 *  \return Boolean true if the selected endpoint has received a SETUP packet, false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    1e34:	80 91 e8 00 	lds	r24, 0x00E8
	if (!(Endpoint_IsSETUPReceived()))
    1e38:	83 ff       	sbrs	r24, 3
    1e3a:	31 c0       	rjmp	.+98     	; 0x1e9e <MS_Device_ProcessControlRequest+0x70>
	  return;

	if (USB_ControlRequest.wIndex != MSInterfaceInfo->Config.InterfaceNumber)
    1e3c:	88 81       	ld	r24, Y
    1e3e:	90 e0       	ldi	r25, 0x00	; 0
    1e40:	20 91 8d 01 	lds	r18, 0x018D
    1e44:	30 91 8e 01 	lds	r19, 0x018E
    1e48:	28 17       	cp	r18, r24
    1e4a:	39 07       	cpc	r19, r25
    1e4c:	41 f5       	brne	.+80     	; 0x1e9e <MS_Device_ProcessControlRequest+0x70>
	  return;

	switch (USB_ControlRequest.bRequest)
    1e4e:	80 91 8a 01 	lds	r24, 0x018A
    1e52:	8e 3f       	cpi	r24, 0xFE	; 254
    1e54:	81 f0       	breq	.+32     	; 0x1e76 <MS_Device_ProcessControlRequest+0x48>
    1e56:	8f 3f       	cpi	r24, 0xFF	; 255
    1e58:	11 f5       	brne	.+68     	; 0x1e9e <MS_Device_ProcessControlRequest+0x70>
	{
		case MS_REQ_MassStorageReset:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    1e5a:	80 91 89 01 	lds	r24, 0x0189
    1e5e:	81 32       	cpi	r24, 0x21	; 33
    1e60:	f1 f4       	brne	.+60     	; 0x1e9e <MS_Device_ProcessControlRequest+0x70>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1e62:	80 91 e8 00 	lds	r24, 0x00E8
    1e66:	87 7f       	andi	r24, 0xF7	; 247
    1e68:	80 93 e8 00 	sts	0x00E8, r24
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
    1e6c:	0e 94 d8 06 	call	0xdb0	; 0xdb0 <Endpoint_ClearStatusStage>

				MSInterfaceInfo->State.IsMassStoreReset = true;
    1e70:	81 e0       	ldi	r24, 0x01	; 1
    1e72:	8e ab       	std	Y+54, r24	; 0x36
    1e74:	14 c0       	rjmp	.+40     	; 0x1e9e <MS_Device_ProcessControlRequest+0x70>
			}

			break;
		case MS_REQ_GetMaxLUN:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    1e76:	80 91 89 01 	lds	r24, 0x0189
    1e7a:	81 3a       	cpi	r24, 0xA1	; 161
    1e7c:	81 f4       	brne	.+32     	; 0x1e9e <MS_Device_ProcessControlRequest+0x70>
    1e7e:	80 91 e8 00 	lds	r24, 0x00E8
    1e82:	87 7f       	andi	r24, 0xF7	; 247
    1e84:	80 93 e8 00 	sts	0x00E8, r24
			{
				Endpoint_ClearSETUP();
				Endpoint_Write_Byte(MSInterfaceInfo->Config.TotalLUNs - 1);
    1e88:	89 85       	ldd	r24, Y+9	; 0x09
    1e8a:	81 50       	subi	r24, 0x01	; 1
			 *  \param[in] Byte  Next byte to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_Byte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_Byte(const uint8_t Byte)
			{
				UEDATX = Byte;
    1e8c:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1e90:	80 91 e8 00 	lds	r24, 0x00E8
    1e94:	8e 77       	andi	r24, 0x7E	; 126
    1e96:	80 93 e8 00 	sts	0x00E8, r24
				Endpoint_ClearIN();
				Endpoint_ClearStatusStage();
    1e9a:	0e 94 d8 06 	call	0xdb0	; 0xdb0 <Endpoint_ClearStatusStage>
			}

			break;
	}
}
    1e9e:	df 91       	pop	r29
    1ea0:	cf 91       	pop	r28
    1ea2:	08 95       	ret

00001ea4 <memcmp>:
    1ea4:	fb 01       	movw	r30, r22
    1ea6:	dc 01       	movw	r26, r24
    1ea8:	04 c0       	rjmp	.+8      	; 0x1eb2 <memcmp+0xe>
    1eaa:	8d 91       	ld	r24, X+
    1eac:	01 90       	ld	r0, Z+
    1eae:	80 19       	sub	r24, r0
    1eb0:	21 f4       	brne	.+8      	; 0x1eba <memcmp+0x16>
    1eb2:	41 50       	subi	r20, 0x01	; 1
    1eb4:	50 40       	sbci	r21, 0x00	; 0
    1eb6:	c8 f7       	brcc	.-14     	; 0x1eaa <memcmp+0x6>
    1eb8:	88 1b       	sub	r24, r24
    1eba:	99 0b       	sbc	r25, r25
    1ebc:	08 95       	ret

00001ebe <memcpy>:
    1ebe:	fb 01       	movw	r30, r22
    1ec0:	dc 01       	movw	r26, r24
    1ec2:	02 c0       	rjmp	.+4      	; 0x1ec8 <memcpy+0xa>
    1ec4:	01 90       	ld	r0, Z+
    1ec6:	0d 92       	st	X+, r0
    1ec8:	41 50       	subi	r20, 0x01	; 1
    1eca:	50 40       	sbci	r21, 0x00	; 0
    1ecc:	d8 f7       	brcc	.-10     	; 0x1ec4 <memcpy+0x6>
    1ece:	08 95       	ret

00001ed0 <memset>:
    1ed0:	dc 01       	movw	r26, r24
    1ed2:	01 c0       	rjmp	.+2      	; 0x1ed6 <memset+0x6>
    1ed4:	6d 93       	st	X+, r22
    1ed6:	41 50       	subi	r20, 0x01	; 1
    1ed8:	50 40       	sbci	r21, 0x00	; 0
    1eda:	e0 f7       	brcc	.-8      	; 0x1ed4 <memset+0x4>
    1edc:	08 95       	ret

00001ede <_exit>:
    1ede:	f8 94       	cli

00001ee0 <__stop_program>:
    1ee0:	ff cf       	rjmp	.-2      	; 0x1ee0 <__stop_program>
