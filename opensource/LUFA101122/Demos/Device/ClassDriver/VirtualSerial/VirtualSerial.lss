
VirtualSerial.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000068  00800100  00000e32  00000ec6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000e32  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000001c  00800168  00800168  00000f2e  2**0
                  ALLOC
  3 .stab         00000b1c  00000000  00000000  00000f30  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000002b1  00000000  00000000  00001a4c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000430  00000000  00000000  00001cfd  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000b50  00000000  00000000  0000212d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00006f12  00000000  00000000  00002c7d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001e30  00000000  00000000  00009b8f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000057de  00000000  00000000  0000b9bf  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000620  00000000  00000000  000111a0  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00002d03  00000000  00000000  000117c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00002cce  00000000  00000000  000144c3  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000004b0  00000000  00000000  00017191  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:

	return Endpoint_IsConfigured();
}

void Endpoint_ClearEndpoints(void)
{
   0:	91 c0       	rjmp	.+290    	; 0x124 <__ctors_end>
	#if defined(USB_CAN_BE_BOTH)
	USB_CurrentMode = USB_MODE_None;
	#endif

	USB_IsInitialized = false;
}
   2:	00 00       	nop
uint8_t TEMPLATE_FUNC_NAME (const void* Buffer,
                            uint16_t Length)
{
   4:	ac c0       	rjmp	.+344    	; 0x15e <__bad_interrupt>

	return ENDPOINT_READYWAIT_NoError;
}

uint16_t CDC_Device_BytesReceived(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
   6:	00 00       	nop
   8:	aa c0       	rjmp	.+340    	; 0x15e <__bad_interrupt>
   a:	00 00       	nop
   c:	a8 c0       	rjmp	.+336    	; 0x15e <__bad_interrupt>
   e:	00 00       	nop
  10:	a6 c0       	rjmp	.+332    	; 0x15e <__bad_interrupt>
  12:	00 00       	nop
  14:	a4 c0       	rjmp	.+328    	; 0x15e <__bad_interrupt>
  16:	00 00       	nop
  18:	a2 c0       	rjmp	.+324    	; 0x15e <__bad_interrupt>
  1a:	00 00       	nop
  1c:	a0 c0       	rjmp	.+320    	; 0x15e <__bad_interrupt>
  1e:	00 00       	nop
  20:	9e c0       	rjmp	.+316    	; 0x15e <__bad_interrupt>
  22:	00 00       	nop
  24:	9c c0       	rjmp	.+312    	; 0x15e <__bad_interrupt>
  26:	00 00       	nop
  28:	1a c2       	rjmp	.+1076   	; 0x45e <__vector_10>
  2a:	00 00       	nop
  2c:	98 c0       	rjmp	.+304    	; 0x15e <__bad_interrupt>
  2e:	00 00       	nop
  30:	96 c0       	rjmp	.+300    	; 0x15e <__bad_interrupt>
  32:	00 00       	nop
  34:	94 c0       	rjmp	.+296    	; 0x15e <__bad_interrupt>
  36:	00 00       	nop
  38:	92 c0       	rjmp	.+292    	; 0x15e <__bad_interrupt>
  3a:	00 00       	nop
  3c:	90 c0       	rjmp	.+288    	; 0x15e <__bad_interrupt>
  3e:	00 00       	nop
  40:	8e c0       	rjmp	.+284    	; 0x15e <__bad_interrupt>
  42:	00 00       	nop
  44:	8c c0       	rjmp	.+280    	; 0x15e <__bad_interrupt>
  46:	00 00       	nop
  48:	8a c0       	rjmp	.+276    	; 0x15e <__bad_interrupt>
  4a:	00 00       	nop
  4c:	88 c0       	rjmp	.+272    	; 0x15e <__bad_interrupt>
  4e:	00 00       	nop
  50:	86 c0       	rjmp	.+268    	; 0x15e <__bad_interrupt>
  52:	00 00       	nop
  54:	84 c0       	rjmp	.+264    	; 0x15e <__bad_interrupt>
  56:	00 00       	nop
  58:	82 c0       	rjmp	.+260    	; 0x15e <__bad_interrupt>
  5a:	00 00       	nop
  5c:	80 c0       	rjmp	.+256    	; 0x15e <__bad_interrupt>
  5e:	00 00       	nop
  60:	7e c0       	rjmp	.+252    	; 0x15e <__bad_interrupt>
  62:	00 00       	nop
  64:	7c c0       	rjmp	.+248    	; 0x15e <__bad_interrupt>
  66:	00 00       	nop
  68:	7a c0       	rjmp	.+244    	; 0x15e <__bad_interrupt>
  6a:	00 00       	nop
  6c:	78 c0       	rjmp	.+240    	; 0x15e <__bad_interrupt>
  6e:	00 00       	nop
  70:	76 c0       	rjmp	.+236    	; 0x15e <__bad_interrupt>
  72:	00 00       	nop
  74:	74 c0       	rjmp	.+232    	; 0x15e <__bad_interrupt>
  76:	00 00       	nop
  78:	72 c0       	rjmp	.+228    	; 0x15e <__bad_interrupt>
  7a:	00 00       	nop
  7c:	70 c0       	rjmp	.+224    	; 0x15e <__bad_interrupt>
  7e:	00 00       	nop
  80:	6e c0       	rjmp	.+220    	; 0x15e <__bad_interrupt>
  82:	00 00       	nop
  84:	6c c0       	rjmp	.+216    	; 0x15e <__bad_interrupt>
  86:	00 00       	nop
  88:	6a c0       	rjmp	.+212    	; 0x15e <__bad_interrupt>
  8a:	00 00       	nop
  8c:	68 c0       	rjmp	.+208    	; 0x15e <__bad_interrupt>
  8e:	00 00       	nop
  90:	66 c0       	rjmp	.+204    	; 0x15e <__bad_interrupt>
  92:	00 00       	nop
  94:	64 c0       	rjmp	.+200    	; 0x15e <__bad_interrupt>
  96:	00 00       	nop

00000098 <DeviceDescriptor>:
  98:	12 01 10 01 02 00 00 08 eb 03 44 20 01 00 01 02     ..........D ....
  a8:	dc 01                                               ..

000000aa <ConfigurationDescriptor>:
  aa:	09 02 3e 00 02 01 00 c0 32 09 04 00 00 01 02 02     ..>.....2.......
  ba:	01 00 05 24 00 10 01 04 24 02 06 05 24 06 00 01     ...$....$...$...
  ca:	07 05 82 03 08 00 ff 09 04 01 00 02 0a 00 00 00     ................
  da:	07 05 04 02 10 00 01 07 05 83 02 10 00 01           ..............

000000e8 <LanguageString>:
  e8:	04 03 09 04                                         ....

000000ec <ManufacturerString>:
  ec:	18 03 44 00 65 00 61 00 6e 00 20 00 43 00 61 00     ..D.e.a.n. .C.a.
  fc:	6d 00 65 00 72 00 61 00 00 00                       m.e.r.a...

00000106 <ProductString>:
 106:	1c 03 4c 00 55 00 46 00 41 00 20 00 43 00 44 00     ..L.U.F.A. .C.D.
 116:	43 00 20 00 44 00 65 00 6d 00 6f 00 00 00           C. .D.e.m.o...

00000124 <__ctors_end>:
 124:	11 24       	eor	r1, r1
 126:	1f be       	out	0x3f, r1	; 63
 128:	cf ef       	ldi	r28, 0xFF	; 255
 12a:	d0 e2       	ldi	r29, 0x20	; 32
 12c:	de bf       	out	0x3e, r29	; 62
 12e:	cd bf       	out	0x3d, r28	; 61

00000130 <__do_copy_data>:
 130:	11 e0       	ldi	r17, 0x01	; 1
 132:	a0 e0       	ldi	r26, 0x00	; 0
 134:	b1 e0       	ldi	r27, 0x01	; 1
 136:	e2 e3       	ldi	r30, 0x32	; 50
 138:	fe e0       	ldi	r31, 0x0E	; 14
 13a:	00 e0       	ldi	r16, 0x00	; 0
 13c:	0b bf       	out	0x3b, r16	; 59
 13e:	02 c0       	rjmp	.+4      	; 0x144 <__do_copy_data+0x14>
 140:	07 90       	elpm	r0, Z+
 142:	0d 92       	st	X+, r0
 144:	a8 36       	cpi	r26, 0x68	; 104
 146:	b1 07       	cpc	r27, r17
 148:	d9 f7       	brne	.-10     	; 0x140 <__do_copy_data+0x10>

0000014a <__do_clear_bss>:
 14a:	11 e0       	ldi	r17, 0x01	; 1
 14c:	a8 e6       	ldi	r26, 0x68	; 104
 14e:	b1 e0       	ldi	r27, 0x01	; 1
 150:	01 c0       	rjmp	.+2      	; 0x154 <.do_clear_bss_start>

00000152 <.do_clear_bss_loop>:
 152:	1d 92       	st	X+, r1

00000154 <.do_clear_bss_start>:
 154:	a4 38       	cpi	r26, 0x84	; 132
 156:	b1 07       	cpc	r27, r17
 158:	e1 f7       	brne	.-8      	; 0x152 <.do_clear_bss_loop>
 15a:	76 d0       	rcall	.+236    	; 0x248 <main>
 15c:	68 c6       	rjmp	.+3280   	; 0xe2e <_exit>

0000015e <__bad_interrupt>:
 15e:	50 cf       	rjmp	.-352    	; 0x0 <__vectors>

00000160 <EVENT_USB_Device_Connect>:
				PORTD &= ~LEDMask;
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
			{
				PORTD = ((PORTD & ~LEDS_ALL_LEDS) | LEDMask);
 160:	8b b1       	in	r24, 0x0b	; 11
 162:	8f 70       	andi	r24, 0x0F	; 15
 164:	80 6a       	ori	r24, 0xA0	; 160
 166:	8b b9       	out	0x0b, r24	; 11

/** Event handler for the library USB Connection event. */
void EVENT_USB_Device_Connect(void)
{
	LEDs_SetAllLEDs(LEDMASK_USB_ENUMERATING);
}
 168:	08 95       	ret

0000016a <EVENT_USB_Device_Disconnect>:
 16a:	8b b1       	in	r24, 0x0b	; 11
 16c:	8f 70       	andi	r24, 0x0F	; 15
 16e:	80 61       	ori	r24, 0x10	; 16
 170:	8b b9       	out	0x0b, r24	; 11

/** Event handler for the library USB Disconnection event. */
void EVENT_USB_Device_Disconnect(void)
{
	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
}
 172:	08 95       	ret

00000174 <EVENT_USB_Device_ControlRequest>:
}

/** Event handler for the library USB Control Request reception event. */
void EVENT_USB_Device_ControlRequest(void)
{
	CDC_Device_ProcessControlRequest(&VirtualSerial_CDC_Interface);
 174:	82 e5       	ldi	r24, 0x52	; 82
 176:	91 e0       	ldi	r25, 0x01	; 1
}
 178:	c2 c5       	rjmp	.+2948   	; 0xcfe <CDC_Device_ProcessControlRequest>

0000017a <EVENT_USB_Device_ConfigurationChanged>:
/** Event handler for the library USB Configuration Changed event. */
void EVENT_USB_Device_ConfigurationChanged(void)
{
	bool ConfigSuccess = true;

	ConfigSuccess &= CDC_Device_ConfigureEndpoints(&VirtualSerial_CDC_Interface);
 17a:	82 e5       	ldi	r24, 0x52	; 82
 17c:	91 e0       	ldi	r25, 0x01	; 1
 17e:	76 d5       	rcall	.+2796   	; 0xc6c <CDC_Device_ConfigureEndpoints>

	LEDs_SetAllLEDs(ConfigSuccess ? LEDMASK_USB_READY : LEDMASK_USB_ERROR);
 180:	80 fd       	sbrc	r24, 0
 182:	02 c0       	rjmp	.+4      	; 0x188 <EVENT_USB_Device_ConfigurationChanged+0xe>
 184:	90 e9       	ldi	r25, 0x90	; 144
 186:	01 c0       	rjmp	.+2      	; 0x18a <EVENT_USB_Device_ConfigurationChanged+0x10>
 188:	90 e6       	ldi	r25, 0x60	; 96
 18a:	8b b1       	in	r24, 0x0b	; 11
 18c:	8f 70       	andi	r24, 0x0F	; 15
 18e:	98 2b       	or	r25, r24
 190:	9b b9       	out	0x0b, r25	; 11
}
 192:	08 95       	ret

00000194 <CheckJoystickMovement>:
			}

			static inline uint8_t Joystick_GetStatus(void) ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t Joystick_GetStatus(void)
			{
				return (((uint8_t)~PINB & JOY_BMASK) | (((uint8_t)~PINE & JOY_EMASK) >> 1));
 194:	23 b1       	in	r18, 0x03	; 3
 196:	8c b1       	in	r24, 0x0c	; 12
 198:	80 95       	com	r24
 19a:	90 e0       	ldi	r25, 0x00	; 0
 19c:	80 73       	andi	r24, 0x30	; 48
 19e:	90 70       	andi	r25, 0x00	; 0
 1a0:	95 95       	asr	r25
 1a2:	87 95       	ror	r24
 1a4:	20 95       	com	r18
 1a6:	20 7e       	andi	r18, 0xE0	; 224
 1a8:	28 2b       	or	r18, r24
{
	uint8_t     JoyStatus_LCL = Joystick_GetStatus();
	char*       ReportString  = NULL;
	static bool ActionSent    = false;

	if (JoyStatus_LCL & JOY_UP)
 1aa:	27 fd       	sbrc	r18, 7
 1ac:	17 c0       	rjmp	.+46     	; 0x1dc <CheckJoystickMovement+0x48>
	  ReportString = "Joystick Up\r\n";
	else if (JoyStatus_LCL & JOY_DOWN)
 1ae:	24 ff       	sbrs	r18, 4
 1b0:	03 c0       	rjmp	.+6      	; 0x1b8 <CheckJoystickMovement+0x24>
 1b2:	20 e0       	ldi	r18, 0x00	; 0
 1b4:	31 e0       	ldi	r19, 0x01	; 1
 1b6:	14 c0       	rjmp	.+40     	; 0x1e0 <CheckJoystickMovement+0x4c>
	  ReportString = "Joystick Down\r\n";
	else if (JoyStatus_LCL & JOY_LEFT)
 1b8:	26 ff       	sbrs	r18, 6
 1ba:	03 c0       	rjmp	.+6      	; 0x1c2 <CheckJoystickMovement+0x2e>
 1bc:	20 e1       	ldi	r18, 0x10	; 16
 1be:	31 e0       	ldi	r19, 0x01	; 1
 1c0:	0f c0       	rjmp	.+30     	; 0x1e0 <CheckJoystickMovement+0x4c>
	  ReportString = "Joystick Left\r\n";
	else if (JoyStatus_LCL & JOY_RIGHT)
 1c2:	23 ff       	sbrs	r18, 3
 1c4:	03 c0       	rjmp	.+6      	; 0x1cc <CheckJoystickMovement+0x38>
 1c6:	20 e2       	ldi	r18, 0x20	; 32
 1c8:	31 e0       	ldi	r19, 0x01	; 1
 1ca:	0a c0       	rjmp	.+20     	; 0x1e0 <CheckJoystickMovement+0x4c>
	  ReportString = "Joystick Right\r\n";
	else if (JoyStatus_LCL & JOY_PRESS)
 1cc:	25 ff       	sbrs	r18, 5
 1ce:	03 c0       	rjmp	.+6      	; 0x1d6 <CheckJoystickMovement+0x42>
 1d0:	21 e3       	ldi	r18, 0x31	; 49
 1d2:	31 e0       	ldi	r19, 0x01	; 1
 1d4:	05 c0       	rjmp	.+10     	; 0x1e0 <CheckJoystickMovement+0x4c>
	  ReportString = "Joystick Pressed\r\n";
	else
	  ActionSent = false;
 1d6:	10 92 68 01 	sts	0x0168, r1
 1da:	08 95       	ret
 1dc:	24 e4       	ldi	r18, 0x44	; 68
 1de:	31 e0       	ldi	r19, 0x01	; 1

	if ((ReportString != NULL) && (ActionSent == false))
 1e0:	80 91 68 01 	lds	r24, 0x0168
 1e4:	88 23       	and	r24, r24
 1e6:	39 f4       	brne	.+14     	; 0x1f6 <CheckJoystickMovement+0x62>
	{
		ActionSent = true;
 1e8:	81 e0       	ldi	r24, 0x01	; 1
 1ea:	80 93 68 01 	sts	0x0168, r24

		/* Write the string to the virtual COM port via the created character stream */
		fputs(ReportString, &USBSerialStream);
 1ee:	c9 01       	movw	r24, r18
 1f0:	69 e6       	ldi	r22, 0x69	; 105
 1f2:	71 e0       	ldi	r23, 0x01	; 1
 1f4:	f1 c5       	rjmp	.+3042   	; 0xdd8 <fputs>
 1f6:	08 95       	ret

000001f8 <SetupHardware>:

/** Configures the board hardware and chip peripherals for the demo's functionality. */
void SetupHardware(void)
{
	/* Disable watchdog if enabled by bootloader/fuses */
	MCUSR &= ~(1 << WDRF);
 1f8:	84 b7       	in	r24, 0x34	; 52
 1fa:	87 7f       	andi	r24, 0xF7	; 247
 1fc:	84 bf       	out	0x34, r24	; 52
	wdt_disable();
 1fe:	88 e1       	ldi	r24, 0x18	; 24
 200:	0f b6       	in	r0, 0x3f	; 63
 202:	f8 94       	cli
 204:	80 93 60 00 	sts	0x0060, r24
 208:	10 92 60 00 	sts	0x0060, r1
 20c:	0f be       	out	0x3f, r0	; 63

	/* Disable clock division */
	clock_prescale_set(clock_div_1);
 20e:	80 e0       	ldi	r24, 0x00	; 0
 210:	90 e0       	ldi	r25, 0x00	; 0
 212:	20 e8       	ldi	r18, 0x80	; 128
 214:	0f b6       	in	r0, 0x3f	; 63
 216:	f8 94       	cli
 218:	20 93 61 00 	sts	0x0061, r18
 21c:	80 93 61 00 	sts	0x0061, r24
 220:	0f be       	out	0x3f, r0	; 63

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void Joystick_Init(void)
			{
				DDRB  &= ~(JOY_BMASK);
 222:	84 b1       	in	r24, 0x04	; 4
 224:	8f 71       	andi	r24, 0x1F	; 31
 226:	84 b9       	out	0x04, r24	; 4
				DDRE  &= ~(JOY_EMASK);
 228:	8d b1       	in	r24, 0x0d	; 13
 22a:	8f 7c       	andi	r24, 0xCF	; 207
 22c:	8d b9       	out	0x0d, r24	; 13

				PORTB |= JOY_BMASK;
 22e:	85 b1       	in	r24, 0x05	; 5
 230:	80 6e       	ori	r24, 0xE0	; 224
 232:	85 b9       	out	0x05, r24	; 5
				PORTE |= JOY_EMASK;
 234:	8e b1       	in	r24, 0x0e	; 14
 236:	80 63       	ori	r24, 0x30	; 48
 238:	8e b9       	out	0x0e, r24	; 14

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void LEDs_Init(void)
			{
				DDRD  |=  LEDS_ALL_LEDS;
 23a:	8a b1       	in	r24, 0x0a	; 10
 23c:	80 6f       	ori	r24, 0xF0	; 240
 23e:	8a b9       	out	0x0a, r24	; 10
				PORTD &= ~LEDS_ALL_LEDS;
 240:	8b b1       	in	r24, 0x0b	; 11
 242:	8f 70       	andi	r24, 0x0F	; 15
 244:	8b b9       	out	0x0b, r24	; 11

	/* Hardware Initialization */
	Joystick_Init();
	LEDs_Init();
	USB_Init();
}
 246:	f5 c0       	rjmp	.+490    	; 0x432 <USB_Init>

00000248 <main>:
/** Main program entry point. This routine contains the overall program flow, including initial
 *  setup of all components and the main program loop.
 */
int main(void)
{
	SetupHardware();
 248:	d7 df       	rcall	.-82     	; 0x1f8 <SetupHardware>

	/* Create a regular character stream for the interface so that it can be used with the stdio.h functions */
	CDC_Device_CreateStream(&VirtualSerial_CDC_Interface, &USBSerialStream);
 24a:	82 e5       	ldi	r24, 0x52	; 82
 24c:	91 e0       	ldi	r25, 0x01	; 1
 24e:	69 e6       	ldi	r22, 0x69	; 105
 250:	71 e0       	ldi	r23, 0x01	; 1
 252:	7c d4       	rcall	.+2296   	; 0xb4c <CDC_Device_CreateStream>
				PORTD &= ~LEDMask;
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
			{
				PORTD = ((PORTD & ~LEDS_ALL_LEDS) | LEDMask);
 254:	8b b1       	in	r24, 0x0b	; 11
 256:	8f 70       	andi	r24, 0x0F	; 15
 258:	80 61       	ori	r24, 0x10	; 16
 25a:	8b b9       	out	0x0b, r24	; 11

	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
	sei();
 25c:	78 94       	sei

	for (;;)
	{
		CheckJoystickMovement();
 25e:	9a df       	rcall	.-204    	; 0x194 <CheckJoystickMovement>

		/* Must throw away unused bytes from the host, or it will lock up while waiting for the device */
		CDC_Device_ReceiveByte(&VirtualSerial_CDC_Interface);
 260:	82 e5       	ldi	r24, 0x52	; 82
 262:	91 e0       	ldi	r25, 0x01	; 1
 264:	42 d4       	rcall	.+2180   	; 0xaea <CDC_Device_ReceiveByte>

		CDC_Device_USBTask(&VirtualSerial_CDC_Interface);
 266:	82 e5       	ldi	r24, 0x52	; 82
 268:	91 e0       	ldi	r25, 0x01	; 1
 26a:	bc d4       	rcall	.+2424   	; 0xbe4 <CDC_Device_USBTask>
		USB_USBTask();
 26c:	2a d4       	rcall	.+2132   	; 0xac2 <USB_USBTask>
 26e:	f7 cf       	rjmp	.-18     	; 0x25e <main+0x16>

00000270 <CALLBACK_USB_GetDescriptor>:
 *  USB host.
 */
uint16_t CALLBACK_USB_GetDescriptor(const uint16_t wValue,
                                    const uint8_t wIndex,
                                    const void** const DescriptorAddress)
{
 270:	da 01       	movw	r26, r20
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
 272:	92 30       	cpi	r25, 0x02	; 2
 274:	49 f0       	breq	.+18     	; 0x288 <CALLBACK_USB_GetDescriptor+0x18>
 276:	93 30       	cpi	r25, 0x03	; 3
 278:	61 f0       	breq	.+24     	; 0x292 <CALLBACK_USB_GetDescriptor+0x22>
 27a:	91 30       	cpi	r25, 0x01	; 1
 27c:	f9 f4       	brne	.+62     	; 0x2bc <CALLBACK_USB_GetDescriptor+0x4c>
 27e:	e8 e9       	ldi	r30, 0x98	; 152
 280:	f0 e0       	ldi	r31, 0x00	; 0
 282:	22 e1       	ldi	r18, 0x12	; 18
 284:	30 e0       	ldi	r19, 0x00	; 0
 286:	1e c0       	rjmp	.+60     	; 0x2c4 <CALLBACK_USB_GetDescriptor+0x54>
 288:	ea ea       	ldi	r30, 0xAA	; 170
 28a:	f0 e0       	ldi	r31, 0x00	; 0
 28c:	2e e3       	ldi	r18, 0x3E	; 62
 28e:	30 e0       	ldi	r19, 0x00	; 0
 290:	19 c0       	rjmp	.+50     	; 0x2c4 <CALLBACK_USB_GetDescriptor+0x54>
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
			Size    = sizeof(USB_Descriptor_Configuration_t);
			break;
		case DTYPE_String:
			switch (DescriptorNumber)
 292:	81 30       	cpi	r24, 0x01	; 1
 294:	49 f0       	breq	.+18     	; 0x2a8 <CALLBACK_USB_GetDescriptor+0x38>
 296:	81 30       	cpi	r24, 0x01	; 1
 298:	18 f0       	brcs	.+6      	; 0x2a0 <CALLBACK_USB_GetDescriptor+0x30>
 29a:	82 30       	cpi	r24, 0x02	; 2
 29c:	79 f4       	brne	.+30     	; 0x2bc <CALLBACK_USB_GetDescriptor+0x4c>
 29e:	08 c0       	rjmp	.+16     	; 0x2b0 <CALLBACK_USB_GetDescriptor+0x40>
			{
				case 0x00:
					Address = &LanguageString;
					Size    = pgm_read_byte(&LanguageString.Header.Size);
 2a0:	e8 ee       	ldi	r30, 0xE8	; 232
 2a2:	f0 e0       	ldi	r31, 0x00	; 0
 2a4:	84 91       	lpm	r24, Z+
 2a6:	07 c0       	rjmp	.+14     	; 0x2b6 <CALLBACK_USB_GetDescriptor+0x46>
					break;
				case 0x01:
					Address = &ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
 2a8:	ec ee       	ldi	r30, 0xEC	; 236
 2aa:	f0 e0       	ldi	r31, 0x00	; 0
 2ac:	84 91       	lpm	r24, Z+
 2ae:	03 c0       	rjmp	.+6      	; 0x2b6 <CALLBACK_USB_GetDescriptor+0x46>
					break;
				case 0x02:
					Address = &ProductString;
					Size    = pgm_read_byte(&ProductString.Header.Size);
 2b0:	e6 e0       	ldi	r30, 0x06	; 6
 2b2:	f1 e0       	ldi	r31, 0x01	; 1
 2b4:	84 91       	lpm	r24, Z+
 2b6:	28 2f       	mov	r18, r24
 2b8:	30 e0       	ldi	r19, 0x00	; 0
 2ba:	04 c0       	rjmp	.+8      	; 0x2c4 <CALLBACK_USB_GetDescriptor+0x54>
 2bc:	e0 e0       	ldi	r30, 0x00	; 0
 2be:	f0 e0       	ldi	r31, 0x00	; 0
 2c0:	20 e0       	ldi	r18, 0x00	; 0
 2c2:	30 e0       	ldi	r19, 0x00	; 0
			}

			break;
	}

	*DescriptorAddress = Address;
 2c4:	ed 93       	st	X+, r30
 2c6:	fc 93       	st	X, r31
	return Size;
}
 2c8:	c9 01       	movw	r24, r18
 2ca:	08 95       	ret

000002cc <Endpoint_ConfigureEndpoint_Prv>:
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 2cc:	80 93 e9 00 	sts	0x00E9, r24
			 *  \note Endpoints must first be configured properly via \ref Endpoint_ConfigureEndpoint().
			 */
			static inline void Endpoint_EnableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_EnableEndpoint(void)
			{
				UECONX |= (1 << EPEN);
 2d0:	80 91 eb 00 	lds	r24, 0x00EB
 2d4:	81 60       	ori	r24, 0x01	; 1
 2d6:	80 93 eb 00 	sts	0x00EB, r24
                                    const uint8_t UECFG1XData)
{
	Endpoint_SelectEndpoint(Number);
	Endpoint_EnableEndpoint();

	UECFG1X = 0;
 2da:	10 92 ed 00 	sts	0x00ED, r1
	UECFG0X = UECFG0XData;
 2de:	60 93 ec 00 	sts	0x00EC, r22
	UECFG1X = UECFG1XData;
 2e2:	40 93 ed 00 	sts	0x00ED, r20
			 *  \return Boolean true if the currently selected endpoint has been configured, false otherwise.
			 */
			static inline bool Endpoint_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsConfigured(void)
			{
				return ((UESTA0X & (1 << CFGOK)) ? true : false);
 2e6:	80 91 ee 00 	lds	r24, 0x00EE

	return Endpoint_IsConfigured();
}
 2ea:	88 1f       	adc	r24, r24
 2ec:	88 27       	eor	r24, r24
 2ee:	88 1f       	adc	r24, r24
 2f0:	08 95       	ret

000002f2 <Endpoint_ClearStatusStage>:
	}
}

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
 2f2:	80 91 7c 01 	lds	r24, 0x017C
 2f6:	88 23       	and	r24, r24
 2f8:	9c f4       	brge	.+38     	; 0x320 <Endpoint_ClearStatusStage+0x2e>
 2fa:	04 c0       	rjmp	.+8      	; 0x304 <Endpoint_ClearStatusStage+0x12>
	{
		while (!(Endpoint_IsOUTReceived()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
 2fc:	80 91 7b 01 	lds	r24, 0x017B
 300:	88 23       	and	r24, r24
 302:	b9 f0       	breq	.+46     	; 0x332 <Endpoint_ClearStatusStage+0x40>
			 *  \return Boolean true if current endpoint is has received an OUT packet, false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 304:	80 91 e8 00 	lds	r24, 0x00E8

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
	{
		while (!(Endpoint_IsOUTReceived()))
 308:	82 ff       	sbrs	r24, 2
 30a:	f8 cf       	rjmp	.-16     	; 0x2fc <Endpoint_ClearStatusStage+0xa>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 30c:	80 91 e8 00 	lds	r24, 0x00E8
 310:	8b 77       	andi	r24, 0x7B	; 123
 312:	80 93 e8 00 	sts	0x00E8, r24
 316:	08 95       	ret
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
 318:	80 91 7b 01 	lds	r24, 0x017B
 31c:	88 23       	and	r24, r24
 31e:	49 f0       	breq	.+18     	; 0x332 <Endpoint_ClearStatusStage+0x40>
			 *  \return Boolean true if the current endpoint is ready for an IN packet, false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 320:	80 91 e8 00 	lds	r24, 0x00E8

		Endpoint_ClearOUT();
	}
	else
	{
		while (!(Endpoint_IsINReady()))
 324:	80 ff       	sbrs	r24, 0
 326:	f8 cf       	rjmp	.-16     	; 0x318 <Endpoint_ClearStatusStage+0x26>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 328:	80 91 e8 00 	lds	r24, 0x00E8
 32c:	8e 77       	andi	r24, 0x7E	; 126
 32e:	80 93 e8 00 	sts	0x00E8, r24
 332:	08 95       	ret

00000334 <Endpoint_WaitUntilReady>:
			/** Returns the current USB frame number, when in device mode. Every millisecond the USB bus is active (i.e. enumerated to a host)
			 *  the frame number is incremented by one.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
 334:	40 91 e4 00 	lds	r20, 0x00E4
 338:	50 91 e5 00 	lds	r21, 0x00E5
 33c:	24 e6       	ldi	r18, 0x64	; 100
			 *  \return The currently selected endpoint's direction, as a ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & ENDPOINT_DIR_IN);
 33e:	80 91 ec 00 	lds	r24, 0x00EC

	uint16_t PreviousFrameNumber = USB_Device_GetFrameNumber();

	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
 342:	80 ff       	sbrs	r24, 0
 344:	05 c0       	rjmp	.+10     	; 0x350 <Endpoint_WaitUntilReady+0x1c>
			 *  \return Boolean true if the current endpoint is ready for an IN packet, false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 346:	80 91 e8 00 	lds	r24, 0x00E8
		{
			if (Endpoint_IsINReady())
 34a:	80 ff       	sbrs	r24, 0
 34c:	05 c0       	rjmp	.+10     	; 0x358 <Endpoint_WaitUntilReady+0x24>
 34e:	22 c0       	rjmp	.+68     	; 0x394 <Endpoint_WaitUntilReady+0x60>
			 *  \return Boolean true if current endpoint is has received an OUT packet, false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 350:	80 91 e8 00 	lds	r24, 0x00E8
			  return ENDPOINT_READYWAIT_NoError;
		}
		else
		{
			if (Endpoint_IsOUTReceived())
 354:	82 fd       	sbrc	r24, 2
 356:	1e c0       	rjmp	.+60     	; 0x394 <Endpoint_WaitUntilReady+0x60>
			  return ENDPOINT_READYWAIT_NoError;
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;
 358:	80 91 7b 01 	lds	r24, 0x017B

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
 35c:	88 23       	and	r24, r24
 35e:	11 f4       	brne	.+4      	; 0x364 <Endpoint_WaitUntilReady+0x30>
 360:	82 e0       	ldi	r24, 0x02	; 2
 362:	08 95       	ret
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
 364:	85 30       	cpi	r24, 0x05	; 5
 366:	11 f4       	brne	.+4      	; 0x36c <Endpoint_WaitUntilReady+0x38>
 368:	83 e0       	ldi	r24, 0x03	; 3
 36a:	08 95       	ret
			 *  \return Boolean true if the currently selected endpoint is stalled, false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
 36c:	80 91 eb 00 	lds	r24, 0x00EB
		  return ENDPOINT_READYWAIT_BusSuspended;
		else if (Endpoint_IsStalled())
 370:	85 ff       	sbrs	r24, 5
 372:	02 c0       	rjmp	.+4      	; 0x378 <Endpoint_WaitUntilReady+0x44>
 374:	81 e0       	ldi	r24, 0x01	; 1
 376:	08 95       	ret
 378:	80 91 e4 00 	lds	r24, 0x00E4
 37c:	90 91 e5 00 	lds	r25, 0x00E5
		  return ENDPOINT_READYWAIT_EndpointStalled;

		uint16_t CurrentFrameNumber = USB_Device_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
 380:	84 17       	cp	r24, r20
 382:	95 07       	cpc	r25, r21
 384:	e1 f2       	breq	.-72     	; 0x33e <Endpoint_WaitUntilReady+0xa>
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
 386:	22 23       	and	r18, r18
 388:	11 f4       	brne	.+4      	; 0x38e <Endpoint_WaitUntilReady+0x5a>
 38a:	84 e0       	ldi	r24, 0x04	; 4
 38c:	08 95       	ret
 38e:	21 50       	subi	r18, 0x01	; 1
 390:	ac 01       	movw	r20, r24
 392:	d5 cf       	rjmp	.-86     	; 0x33e <Endpoint_WaitUntilReady+0xa>
 394:	80 e0       	ldi	r24, 0x00	; 0
			  return ENDPOINT_READYWAIT_Timeout;
		}
	}
}
 396:	08 95       	ret

00000398 <USB_ResetInterface>:
{
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
 398:	55 d0       	rcall	.+170    	; 0x444 <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
 39a:	5c d0       	rcall	.+184    	; 0x454 <USB_INT_ClearAllInterrupts>
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				const uint8_t Temp = USBCON;
 39c:	80 91 d8 00 	lds	r24, 0x00D8

				USBCON = (Temp & ~(1 << USBE));
 3a0:	98 2f       	mov	r25, r24
 3a2:	9f 77       	andi	r25, 0x7F	; 127
 3a4:	90 93 d8 00 	sts	0x00D8, r25
				USBCON = (Temp |  (1 << USBE));
 3a8:	80 68       	ori	r24, 0x80	; 128
 3aa:	80 93 d8 00 	sts	0x00D8, r24

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR  = USB_PLL_PSC;
 3ae:	8c e0       	ldi	r24, 0x0C	; 12
 3b0:	89 bd       	out	0x29, r24	; 41
				PLLCSR |= (1 << PLLE);
 3b2:	89 b5       	in	r24, 0x29	; 41
 3b4:	82 60       	ori	r24, 0x02	; 2
 3b6:	89 bd       	out	0x29, r24	; 41
		#if defined(USB_SERIES_4_AVR)
		PLLFRQ = ((1 << PLLUSB) | (1 << PDIV3) | (1 << PDIV1));
		#endif

		USB_PLL_On();
		while (!(USB_PLL_IsReady()));
 3b8:	09 b4       	in	r0, 0x29	; 41
 3ba:	00 fe       	sbrs	r0, 0
 3bc:	fd cf       	rjmp	.-6      	; 0x3b8 <USB_ResetInterface+0x20>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON  &= ~(1 << FRZCLK);
 3be:	80 91 d8 00 	lds	r24, 0x00D8
 3c2:	8f 7d       	andi	r24, 0xDF	; 223
 3c4:	80 93 d8 00 	sts	0x00D8, r24

	if (USB_CurrentMode == USB_MODE_Device)
	{
		#if defined(USB_CAN_BE_DEVICE)
		#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
		UHWCON |=  (1 << UIMOD);
 3c8:	80 91 d7 00 	lds	r24, 0x00D7
 3cc:	80 68       	ori	r24, 0x80	; 128
 3ce:	80 93 d7 00 	sts	0x00D7, r24
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState          = DEVICE_STATE_Unattached;
 3d2:	10 92 7b 01 	sts	0x017B, r1
	USB_ConfigurationNumber  = 0;
 3d6:	10 92 79 01 	sts	0x0179, r1

	#if !defined(NO_DEVICE_REMOTE_WAKEUP)
	USB_RemoteWakeupEnabled  = false;
 3da:	10 92 78 01 	sts	0x0178, r1
	#endif

	#if !defined(NO_DEVICE_SELF_POWER)
	USB_CurrentlySelfPowered = false;
 3de:	10 92 77 01 	sts	0x0177, r1
			}

			static inline void USB_Device_SetFullSpeed(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetFullSpeed(void)
			{
				UDCON &= ~(1 << LSM);
 3e2:	80 91 e0 00 	lds	r24, 0x00E0
 3e6:	8b 7f       	andi	r24, 0xFB	; 251
 3e8:	80 93 e0 00 	sts	0x00E0, r24
	if (USB_Options & USB_DEVICE_OPT_LOWSPEED)
	  USB_Device_SetLowSpeed();
	else
	  USB_Device_SetFullSpeed();

	USB_INT_Enable(USB_INT_VBUS);
 3ec:	80 91 d8 00 	lds	r24, 0x00D8
 3f0:	81 60       	ori	r24, 0x01	; 1
 3f2:	80 93 d8 00 	sts	0x00D8, r24
			                                              const uint8_t Type,
			                                              const uint8_t Direction,
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				return Endpoint_ConfigureEndpoint_Prv(Number, (((Type) << EPTYPE0) | (Direction)),
 3f6:	80 e0       	ldi	r24, 0x00	; 0
 3f8:	60 e0       	ldi	r22, 0x00	; 0
 3fa:	42 e0       	ldi	r20, 0x02	; 2
 3fc:	67 df       	rcall	.-306    	; 0x2cc <Endpoint_ConfigureEndpoint_Prv>

	Endpoint_ConfigureEndpoint(ENDPOINT_CONTROLEP, EP_TYPE_CONTROL,
							   ENDPOINT_DIR_OUT, USB_ControlEndpointSize,
							   ENDPOINT_BANK_SINGLE);

	USB_INT_Clear(USB_INT_SUSPI);
 3fe:	80 91 e1 00 	lds	r24, 0x00E1
 402:	8e 7f       	andi	r24, 0xFE	; 254
 404:	80 93 e1 00 	sts	0x00E1, r24
	USB_INT_Enable(USB_INT_SUSPI);
 408:	80 91 e2 00 	lds	r24, 0x00E2
 40c:	81 60       	ori	r24, 0x01	; 1
 40e:	80 93 e2 00 	sts	0x00E2, r24
	USB_INT_Enable(USB_INT_EORSTI);
 412:	80 91 e2 00 	lds	r24, 0x00E2
 416:	88 60       	ori	r24, 0x08	; 8
 418:	80 93 e2 00 	sts	0x00E2, r24
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
 41c:	80 91 e0 00 	lds	r24, 0x00E0
 420:	8e 7f       	andi	r24, 0xFE	; 254
 422:	80 93 e0 00 	sts	0x00E0, r24

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON  |=  (1 << OTGPADE);
 426:	80 91 d8 00 	lds	r24, 0x00D8
 42a:	80 61       	ori	r24, 0x10	; 16
 42c:	80 93 d8 00 	sts	0x00D8, r24
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
 430:	08 95       	ret

00000432 <USB_Init>:

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON  |=  (1 << UVREGE);
 432:	e7 ed       	ldi	r30, 0xD7	; 215
 434:	f0 e0       	ldi	r31, 0x00	; 0
 436:	80 81       	ld	r24, Z
 438:	81 60       	ori	r24, 0x01	; 1
 43a:	80 83       	st	Z, r24
	{
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
 43c:	81 e0       	ldi	r24, 0x01	; 1
 43e:	80 93 7a 01 	sts	0x017A, r24

	USB_ResetInterface();
}
 442:	aa cf       	rjmp	.-172    	; 0x398 <USB_ResetInterface>

00000444 <USB_INT_DisableAllInterrupts>:
#include "USBInterrupt.h"

void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
 444:	e8 ed       	ldi	r30, 0xD8	; 216
 446:	f0 e0       	ldi	r31, 0x00	; 0
 448:	80 81       	ld	r24, Z
 44a:	8c 7f       	andi	r24, 0xFC	; 252
 44c:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
 44e:	10 92 e2 00 	sts	0x00E2, r1
	#endif
}
 452:	08 95       	ret

00000454 <USB_INT_ClearAllInterrupts>:

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT  = 0;
 454:	10 92 da 00 	sts	0x00DA, r1
	#if defined(USB_CAN_BE_HOST)
	UHINT   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT   = 0;
 458:	10 92 e1 00 	sts	0x00E1, r1
	#endif
}
 45c:	08 95       	ret

0000045e <__vector_10>:

ISR(USB_GEN_vect, ISR_BLOCK)
{
 45e:	1f 92       	push	r1
 460:	0f 92       	push	r0
 462:	0f b6       	in	r0, 0x3f	; 63
 464:	0f 92       	push	r0
 466:	0b b6       	in	r0, 0x3b	; 59
 468:	0f 92       	push	r0
 46a:	11 24       	eor	r1, r1
 46c:	2f 93       	push	r18
 46e:	3f 93       	push	r19
 470:	4f 93       	push	r20
 472:	5f 93       	push	r21
 474:	6f 93       	push	r22
 476:	7f 93       	push	r23
 478:	8f 93       	push	r24
 47a:	9f 93       	push	r25
 47c:	af 93       	push	r26
 47e:	bf 93       	push	r27
 480:	ef 93       	push	r30
 482:	ff 93       	push	r31
	#if defined(USB_CAN_BE_DEVICE)
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	if (USB_INT_HasOccurred(USB_INT_VBUS) && USB_INT_IsEnabled(USB_INT_VBUS))
 484:	80 91 da 00 	lds	r24, 0x00DA
 488:	80 ff       	sbrs	r24, 0
 48a:	15 c0       	rjmp	.+42     	; 0x4b6 <__vector_10+0x58>
 48c:	80 91 d8 00 	lds	r24, 0x00D8
 490:	80 ff       	sbrs	r24, 0
 492:	11 c0       	rjmp	.+34     	; 0x4b6 <__vector_10+0x58>
	{
		USB_INT_Clear(USB_INT_VBUS);
 494:	80 91 da 00 	lds	r24, 0x00DA
 498:	8e 7f       	andi	r24, 0xFE	; 254
 49a:	80 93 da 00 	sts	0x00DA, r24
				 *  \note This function is not available on some AVR models which do not support hardware VBUS monitoring.
				 */
				static inline bool USB_VBUS_GetStatus(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
				static inline bool USB_VBUS_GetStatus(void)
				{
					return ((USBSTA & (1 << VBUS)) ? true : false);
 49e:	80 91 d9 00 	lds	r24, 0x00D9

		if (USB_VBUS_GetStatus())
 4a2:	80 ff       	sbrs	r24, 0
 4a4:	05 c0       	rjmp	.+10     	; 0x4b0 <__vector_10+0x52>
		{
			USB_DeviceState = DEVICE_STATE_Powered;
 4a6:	81 e0       	ldi	r24, 0x01	; 1
 4a8:	80 93 7b 01 	sts	0x017B, r24
			EVENT_USB_Device_Connect();
 4ac:	59 de       	rcall	.-846    	; 0x160 <EVENT_USB_Device_Connect>
 4ae:	03 c0       	rjmp	.+6      	; 0x4b6 <__vector_10+0x58>
		}
		else
		{
			USB_DeviceState = DEVICE_STATE_Unattached;
 4b0:	10 92 7b 01 	sts	0x017B, r1
			EVENT_USB_Device_Disconnect();
 4b4:	5a de       	rcall	.-844    	; 0x16a <EVENT_USB_Device_Disconnect>
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
 4b6:	80 91 e1 00 	lds	r24, 0x00E1
 4ba:	80 ff       	sbrs	r24, 0
 4bc:	1d c0       	rjmp	.+58     	; 0x4f8 <__vector_10+0x9a>
 4be:	80 91 e2 00 	lds	r24, 0x00E2
 4c2:	80 ff       	sbrs	r24, 0
 4c4:	19 c0       	rjmp	.+50     	; 0x4f8 <__vector_10+0x9a>
	{
		USB_INT_Clear(USB_INT_SUSPI);
 4c6:	80 91 e1 00 	lds	r24, 0x00E1
 4ca:	8e 7f       	andi	r24, 0xFE	; 254
 4cc:	80 93 e1 00 	sts	0x00E1, r24

		USB_INT_Disable(USB_INT_SUSPI);
 4d0:	80 91 e2 00 	lds	r24, 0x00E2
 4d4:	8e 7f       	andi	r24, 0xFE	; 254
 4d6:	80 93 e2 00 	sts	0x00E2, r24
		USB_INT_Enable(USB_INT_WAKEUPI);
 4da:	80 91 e2 00 	lds	r24, 0x00E2
 4de:	80 61       	ori	r24, 0x10	; 16
 4e0:	80 93 e2 00 	sts	0x00E2, r24
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON  |=  (1 << FRZCLK);
 4e4:	80 91 d8 00 	lds	r24, 0x00D8
 4e8:	80 62       	ori	r24, 0x20	; 32
 4ea:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR  = 0;
 4ee:	19 bc       	out	0x29, r1	; 41

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
		EVENT_USB_Device_Disconnect();
		#else
		USB_DeviceState = DEVICE_STATE_Suspended;
 4f0:	85 e0       	ldi	r24, 0x05	; 5
 4f2:	80 93 7b 01 	sts	0x017B, r24
		EVENT_USB_Device_Suspend();
 4f6:	e5 d1       	rcall	.+970    	; 0x8c2 <USB_Event_Stub>
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
 4f8:	80 91 e1 00 	lds	r24, 0x00E1
 4fc:	84 ff       	sbrs	r24, 4
 4fe:	2e c0       	rjmp	.+92     	; 0x55c <__vector_10+0xfe>
 500:	80 91 e2 00 	lds	r24, 0x00E2
 504:	84 ff       	sbrs	r24, 4
 506:	2a c0       	rjmp	.+84     	; 0x55c <__vector_10+0xfe>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR  = USB_PLL_PSC;
 508:	8c e0       	ldi	r24, 0x0C	; 12
 50a:	89 bd       	out	0x29, r24	; 41
				PLLCSR |= (1 << PLLE);
 50c:	89 b5       	in	r24, 0x29	; 41
 50e:	82 60       	ori	r24, 0x02	; 2
 510:	89 bd       	out	0x29, r24	; 41
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
 512:	09 b4       	in	r0, 0x29	; 41
 514:	00 fe       	sbrs	r0, 0
 516:	fd cf       	rjmp	.-6      	; 0x512 <__vector_10+0xb4>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON  &= ~(1 << FRZCLK);
 518:	80 91 d8 00 	lds	r24, 0x00D8
 51c:	8f 7d       	andi	r24, 0xDF	; 223
 51e:	80 93 d8 00 	sts	0x00D8, r24
		}

		USB_CLK_Unfreeze();

		USB_INT_Clear(USB_INT_WAKEUPI);
 522:	80 91 e1 00 	lds	r24, 0x00E1
 526:	8f 7e       	andi	r24, 0xEF	; 239
 528:	80 93 e1 00 	sts	0x00E1, r24

		USB_INT_Disable(USB_INT_WAKEUPI);
 52c:	80 91 e2 00 	lds	r24, 0x00E2
 530:	8f 7e       	andi	r24, 0xEF	; 239
 532:	80 93 e2 00 	sts	0x00E2, r24
		USB_INT_Enable(USB_INT_SUSPI);
 536:	80 91 e2 00 	lds	r24, 0x00E2
 53a:	81 60       	ori	r24, 0x01	; 1
 53c:	80 93 e2 00 	sts	0x00E2, r24

		if (USB_ConfigurationNumber)
 540:	80 91 79 01 	lds	r24, 0x0179
 544:	88 23       	and	r24, r24
 546:	31 f4       	brne	.+12     	; 0x554 <__vector_10+0xf6>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
 548:	80 91 e3 00 	lds	r24, 0x00E3
		  USB_DeviceState = DEVICE_STATE_Configured;
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
 54c:	87 fd       	sbrc	r24, 7
 54e:	02 c0       	rjmp	.+4      	; 0x554 <__vector_10+0xf6>
 550:	81 e0       	ldi	r24, 0x01	; 1
 552:	01 c0       	rjmp	.+2      	; 0x556 <__vector_10+0xf8>
 554:	84 e0       	ldi	r24, 0x04	; 4
 556:	80 93 7b 01 	sts	0x017B, r24

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
		#else
		EVENT_USB_Device_WakeUp();
 55a:	b3 d1       	rcall	.+870    	; 0x8c2 <USB_Event_Stub>
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
 55c:	80 91 e1 00 	lds	r24, 0x00E1
 560:	83 ff       	sbrs	r24, 3
 562:	22 c0       	rjmp	.+68     	; 0x5a8 <__vector_10+0x14a>
 564:	80 91 e2 00 	lds	r24, 0x00E2
 568:	83 ff       	sbrs	r24, 3
 56a:	1e c0       	rjmp	.+60     	; 0x5a8 <__vector_10+0x14a>
	{
		USB_INT_Clear(USB_INT_EORSTI);
 56c:	80 91 e1 00 	lds	r24, 0x00E1
 570:	87 7f       	andi	r24, 0xF7	; 247
 572:	80 93 e1 00 	sts	0x00E1, r24

		USB_DeviceState         = DEVICE_STATE_Default;
 576:	82 e0       	ldi	r24, 0x02	; 2
 578:	80 93 7b 01 	sts	0x017B, r24
		USB_ConfigurationNumber = 0;
 57c:	10 92 79 01 	sts	0x0179, r1

		USB_INT_Clear(USB_INT_SUSPI);
 580:	80 91 e1 00 	lds	r24, 0x00E1
 584:	8e 7f       	andi	r24, 0xFE	; 254
 586:	80 93 e1 00 	sts	0x00E1, r24
		USB_INT_Disable(USB_INT_SUSPI);
 58a:	80 91 e2 00 	lds	r24, 0x00E2
 58e:	8e 7f       	andi	r24, 0xFE	; 254
 590:	80 93 e2 00 	sts	0x00E2, r24
		USB_INT_Enable(USB_INT_WAKEUPI);
 594:	80 91 e2 00 	lds	r24, 0x00E2
 598:	80 61       	ori	r24, 0x10	; 16
 59a:	80 93 e2 00 	sts	0x00E2, r24
 59e:	80 e0       	ldi	r24, 0x00	; 0
 5a0:	60 e0       	ldi	r22, 0x00	; 0
 5a2:	42 e0       	ldi	r20, 0x02	; 2
 5a4:	93 de       	rcall	.-730    	; 0x2cc <Endpoint_ConfigureEndpoint_Prv>

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
 5a6:	8d d1       	rcall	.+794    	; 0x8c2 <USB_Event_Stub>
	}

	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
 5a8:	80 91 e1 00 	lds	r24, 0x00E1
 5ac:	82 ff       	sbrs	r24, 2
 5ae:	0a c0       	rjmp	.+20     	; 0x5c4 <__vector_10+0x166>
 5b0:	80 91 e2 00 	lds	r24, 0x00E2
 5b4:	82 ff       	sbrs	r24, 2
 5b6:	06 c0       	rjmp	.+12     	; 0x5c4 <__vector_10+0x166>
	{
		USB_INT_Clear(USB_INT_SOFI);
 5b8:	80 91 e1 00 	lds	r24, 0x00E1
 5bc:	8b 7f       	andi	r24, 0xFB	; 251
 5be:	80 93 e1 00 	sts	0x00E1, r24

		EVENT_USB_Device_StartOfFrame();
 5c2:	7f d1       	rcall	.+766    	; 0x8c2 <USB_Event_Stub>
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
 5c4:	ff 91       	pop	r31
 5c6:	ef 91       	pop	r30
 5c8:	bf 91       	pop	r27
 5ca:	af 91       	pop	r26
 5cc:	9f 91       	pop	r25
 5ce:	8f 91       	pop	r24
 5d0:	7f 91       	pop	r23
 5d2:	6f 91       	pop	r22
 5d4:	5f 91       	pop	r21
 5d6:	4f 91       	pop	r20
 5d8:	3f 91       	pop	r19
 5da:	2f 91       	pop	r18
 5dc:	0f 90       	pop	r0
 5de:	0b be       	out	0x3b, r0	; 59
 5e0:	0f 90       	pop	r0
 5e2:	0f be       	out	0x3f, r0	; 63
 5e4:	0f 90       	pop	r0
 5e6:	1f 90       	pop	r1
 5e8:	18 95       	reti

000005ea <USB_Device_ProcessControlRequest>:
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
 5ea:	0f 93       	push	r16
 5ec:	1f 93       	push	r17
 5ee:	df 93       	push	r29
 5f0:	cf 93       	push	r28
 5f2:	cd b7       	in	r28, 0x3d	; 61
 5f4:	de b7       	in	r29, 0x3e	; 62
 5f6:	ac 97       	sbiw	r28, 0x2c	; 44
 5f8:	0f b6       	in	r0, 0x3f	; 63
 5fa:	f8 94       	cli
 5fc:	de bf       	out	0x3e, r29	; 62
 5fe:	0f be       	out	0x3f, r0	; 63
 600:	cd bf       	out	0x3d, r28	; 61
 602:	ec e7       	ldi	r30, 0x7C	; 124
 604:	f1 e0       	ldi	r31, 0x01	; 1
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_Byte(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_Byte(void)
			{
				return UEDATX;
 606:	80 91 f1 00 	lds	r24, 0x00F1
	uint8_t* RequestHeader  = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_Byte();
 60a:	81 93       	st	Z+, r24

void USB_Device_ProcessControlRequest(void)
{
	uint8_t* RequestHeader  = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
 60c:	21 e0       	ldi	r18, 0x01	; 1
 60e:	e4 38       	cpi	r30, 0x84	; 132
 610:	f2 07       	cpc	r31, r18
 612:	c9 f7       	brne	.-14     	; 0x606 <USB_Device_ProcessControlRequest+0x1c>
	  *(RequestHeader++) = Endpoint_Read_Byte();

	EVENT_USB_Device_ControlRequest();
 614:	af dd       	rcall	.-1186   	; 0x174 <EVENT_USB_Device_ControlRequest>
			 *  \return Boolean true if the selected endpoint has received a SETUP packet, false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 616:	80 91 e8 00 	lds	r24, 0x00E8

	if (Endpoint_IsSETUPReceived())
 61a:	83 ff       	sbrs	r24, 3
 61c:	39 c1       	rjmp	.+626    	; 0x890 <USB_Device_ProcessControlRequest+0x2a6>
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
 61e:	80 91 7c 01 	lds	r24, 0x017C

		switch (USB_ControlRequest.bRequest)
 622:	30 91 7d 01 	lds	r19, 0x017D
 626:	35 30       	cpi	r19, 0x05	; 5
 628:	09 f4       	brne	.+2      	; 0x62c <USB_Device_ProcessControlRequest+0x42>
 62a:	87 c0       	rjmp	.+270    	; 0x73a <USB_Device_ProcessControlRequest+0x150>
 62c:	36 30       	cpi	r19, 0x06	; 6
 62e:	40 f4       	brcc	.+16     	; 0x640 <USB_Device_ProcessControlRequest+0x56>
 630:	31 30       	cpi	r19, 0x01	; 1
 632:	c9 f1       	breq	.+114    	; 0x6a6 <USB_Device_ProcessControlRequest+0xbc>
 634:	31 30       	cpi	r19, 0x01	; 1
 636:	70 f0       	brcs	.+28     	; 0x654 <USB_Device_ProcessControlRequest+0x6a>
 638:	33 30       	cpi	r19, 0x03	; 3
 63a:	09 f0       	breq	.+2      	; 0x63e <USB_Device_ProcessControlRequest+0x54>
 63c:	29 c1       	rjmp	.+594    	; 0x890 <USB_Device_ProcessControlRequest+0x2a6>
 63e:	33 c0       	rjmp	.+102    	; 0x6a6 <USB_Device_ProcessControlRequest+0xbc>
 640:	38 30       	cpi	r19, 0x08	; 8
 642:	09 f4       	brne	.+2      	; 0x646 <USB_Device_ProcessControlRequest+0x5c>
 644:	f7 c0       	rjmp	.+494    	; 0x834 <USB_Device_ProcessControlRequest+0x24a>
 646:	39 30       	cpi	r19, 0x09	; 9
 648:	09 f4       	brne	.+2      	; 0x64c <USB_Device_ProcessControlRequest+0x62>
 64a:	06 c1       	rjmp	.+524    	; 0x858 <USB_Device_ProcessControlRequest+0x26e>
 64c:	36 30       	cpi	r19, 0x06	; 6
 64e:	09 f0       	breq	.+2      	; 0x652 <USB_Device_ProcessControlRequest+0x68>
 650:	1f c1       	rjmp	.+574    	; 0x890 <USB_Device_ProcessControlRequest+0x2a6>
 652:	99 c0       	rjmp	.+306    	; 0x786 <USB_Device_ProcessControlRequest+0x19c>
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
 654:	80 38       	cpi	r24, 0x80	; 128
 656:	21 f0       	breq	.+8      	; 0x660 <USB_Device_ProcessControlRequest+0x76>
 658:	82 38       	cpi	r24, 0x82	; 130
 65a:	09 f0       	breq	.+2      	; 0x65e <USB_Device_ProcessControlRequest+0x74>
 65c:	19 c1       	rjmp	.+562    	; 0x890 <USB_Device_ProcessControlRequest+0x2a6>
 65e:	08 c0       	rjmp	.+16     	; 0x670 <USB_Device_ProcessControlRequest+0x86>
 660:	90 91 77 01 	lds	r25, 0x0177
			if (USB_CurrentlySelfPowered)
			  CurrentStatus |= FEATURE_SELFPOWERED_ENABLED;
			#endif

			#if !defined(NO_DEVICE_REMOTE_WAKEUP)
			if (USB_RemoteWakeupEnabled)
 664:	80 91 78 01 	lds	r24, 0x0178
 668:	88 23       	and	r24, r24
 66a:	99 f0       	breq	.+38     	; 0x692 <USB_Device_ProcessControlRequest+0xa8>
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
 66c:	92 60       	ori	r25, 0x02	; 2
 66e:	11 c0       	rjmp	.+34     	; 0x692 <USB_Device_ProcessControlRequest+0xa8>
			#endif
			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_ENDPOINT):
			Endpoint_SelectEndpoint((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
 670:	80 91 80 01 	lds	r24, 0x0180
 674:	87 70       	andi	r24, 0x07	; 7
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 676:	80 93 e9 00 	sts	0x00E9, r24
			 *  \return Boolean true if the currently selected endpoint is stalled, false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
 67a:	80 91 eb 00 	lds	r24, 0x00EB

			CurrentStatus = Endpoint_IsStalled();
 67e:	90 e0       	ldi	r25, 0x00	; 0
 680:	25 e0       	ldi	r18, 0x05	; 5
 682:	96 95       	lsr	r25
 684:	87 95       	ror	r24
 686:	2a 95       	dec	r18
 688:	e1 f7       	brne	.-8      	; 0x682 <USB_Device_ProcessControlRequest+0x98>
 68a:	98 2f       	mov	r25, r24
 68c:	91 70       	andi	r25, 0x01	; 1
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 68e:	10 92 e9 00 	sts	0x00E9, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 692:	80 91 e8 00 	lds	r24, 0x00E8
 696:	87 7f       	andi	r24, 0xF7	; 247
 698:	80 93 e8 00 	sts	0x00E8, r24
			 *  \param[in] Word  Next word to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_Word_LE(const uint16_t Word) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_Word_LE(const uint16_t Word)
			{
				UEDATX = (Word & 0xFF);
 69c:	90 93 f1 00 	sts	0x00F1, r25
				UEDATX = (Word >> 8);
 6a0:	10 92 f1 00 	sts	0x00F1, r1
 6a4:	d2 c0       	rjmp	.+420    	; 0x84a <USB_Device_ProcessControlRequest+0x260>
				}

				break;
			case REQ_ClearFeature:
			case REQ_SetFeature:
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
 6a6:	88 23       	and	r24, r24
 6a8:	19 f0       	breq	.+6      	; 0x6b0 <USB_Device_ProcessControlRequest+0xc6>
 6aa:	82 30       	cpi	r24, 0x02	; 2
 6ac:	09 f0       	breq	.+2      	; 0x6b0 <USB_Device_ProcessControlRequest+0xc6>
 6ae:	f0 c0       	rjmp	.+480    	; 0x890 <USB_Device_ProcessControlRequest+0x2a6>
	Endpoint_ClearStatusStage();
}

static void USB_Device_ClearSetFeature(void)
{
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
 6b0:	90 e0       	ldi	r25, 0x00	; 0
 6b2:	8f 71       	andi	r24, 0x1F	; 31
 6b4:	90 70       	andi	r25, 0x00	; 0
 6b6:	00 97       	sbiw	r24, 0x00	; 0
 6b8:	21 f0       	breq	.+8      	; 0x6c2 <USB_Device_ProcessControlRequest+0xd8>
 6ba:	02 97       	sbiw	r24, 0x02	; 2
 6bc:	09 f0       	breq	.+2      	; 0x6c0 <USB_Device_ProcessControlRequest+0xd6>
 6be:	e8 c0       	rjmp	.+464    	; 0x890 <USB_Device_ProcessControlRequest+0x2a6>
 6c0:	0c c0       	rjmp	.+24     	; 0x6da <USB_Device_ProcessControlRequest+0xf0>
	{
		#if !defined(NO_DEVICE_REMOTE_WAKEUP)
		case REQREC_DEVICE:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
 6c2:	80 91 7e 01 	lds	r24, 0x017E
 6c6:	81 30       	cpi	r24, 0x01	; 1
 6c8:	09 f0       	breq	.+2      	; 0x6cc <USB_Device_ProcessControlRequest+0xe2>
 6ca:	e2 c0       	rjmp	.+452    	; 0x890 <USB_Device_ProcessControlRequest+0x2a6>
			  USB_RemoteWakeupEnabled = (USB_ControlRequest.bRequest == REQ_SetFeature);
 6cc:	10 92 78 01 	sts	0x0178, r1
 6d0:	33 30       	cpi	r19, 0x03	; 3
 6d2:	69 f5       	brne	.+90     	; 0x72e <USB_Device_ProcessControlRequest+0x144>
 6d4:	80 93 78 01 	sts	0x0178, r24
 6d8:	2a c0       	rjmp	.+84     	; 0x72e <USB_Device_ProcessControlRequest+0x144>

			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
 6da:	80 91 7e 01 	lds	r24, 0x017E
 6de:	88 23       	and	r24, r24
 6e0:	31 f5       	brne	.+76     	; 0x72e <USB_Device_ProcessControlRequest+0x144>
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
 6e2:	20 91 80 01 	lds	r18, 0x0180
 6e6:	27 70       	andi	r18, 0x07	; 7

				if (EndpointIndex == ENDPOINT_CONTROLEP)
 6e8:	09 f4       	brne	.+2      	; 0x6ec <USB_Device_ProcessControlRequest+0x102>
 6ea:	d2 c0       	rjmp	.+420    	; 0x890 <USB_Device_ProcessControlRequest+0x2a6>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 6ec:	20 93 e9 00 	sts	0x00E9, r18
			 * \return Boolean True if the currently selected endpoint is enabled, false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
 6f0:	80 91 eb 00 	lds	r24, 0x00EB
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
 6f4:	80 ff       	sbrs	r24, 0
 6f6:	1b c0       	rjmp	.+54     	; 0x72e <USB_Device_ProcessControlRequest+0x144>
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
 6f8:	33 30       	cpi	r19, 0x03	; 3
 6fa:	21 f4       	brne	.+8      	; 0x704 <USB_Device_ProcessControlRequest+0x11a>
			 *  \ingroup Group_EndpointPacketManagement
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
 6fc:	80 91 eb 00 	lds	r24, 0x00EB
 700:	80 62       	ori	r24, 0x20	; 32
 702:	13 c0       	rjmp	.+38     	; 0x72a <USB_Device_ProcessControlRequest+0x140>
			 *  \ingroup Group_EndpointPacketManagement
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
 704:	80 91 eb 00 	lds	r24, 0x00EB
 708:	80 61       	ori	r24, 0x10	; 16
 70a:	80 93 eb 00 	sts	0x00EB, r24
			 *  \param[in] EndpointNumber Endpoint number whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetFIFO(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetFIFO(const uint8_t EndpointNumber)
			{
				UERST = (1 << EndpointNumber);
 70e:	81 e0       	ldi	r24, 0x01	; 1
 710:	90 e0       	ldi	r25, 0x00	; 0
 712:	02 c0       	rjmp	.+4      	; 0x718 <USB_Device_ProcessControlRequest+0x12e>
 714:	88 0f       	add	r24, r24
 716:	99 1f       	adc	r25, r25
 718:	2a 95       	dec	r18
 71a:	e2 f7       	brpl	.-8      	; 0x714 <USB_Device_ProcessControlRequest+0x12a>
 71c:	80 93 ea 00 	sts	0x00EA, r24
				UERST = 0;
 720:	10 92 ea 00 	sts	0x00EA, r1

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
 724:	80 91 eb 00 	lds	r24, 0x00EB
 728:	88 60       	ori	r24, 0x08	; 8
 72a:	80 93 eb 00 	sts	0x00EB, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 72e:	10 92 e9 00 	sts	0x00E9, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 732:	80 91 e8 00 	lds	r24, 0x00E8
 736:	87 7f       	andi	r24, 0xF7	; 247
 738:	8b c0       	rjmp	.+278    	; 0x850 <USB_Device_ProcessControlRequest+0x266>
					USB_Device_ClearSetFeature();
				}

				break;
			case REQ_SetAddress:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
 73a:	88 23       	and	r24, r24
 73c:	09 f0       	breq	.+2      	; 0x740 <USB_Device_ProcessControlRequest+0x156>
 73e:	a8 c0       	rjmp	.+336    	; 0x890 <USB_Device_ProcessControlRequest+0x2a6>
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t DeviceAddress = (USB_ControlRequest.wValue & 0x7F);
 740:	10 91 7e 01 	lds	r17, 0x017E
 744:	1f 77       	andi	r17, 0x7F	; 127

	ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
 746:	0f b7       	in	r16, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
 748:	f8 94       	cli
 74a:	80 91 e8 00 	lds	r24, 0x00E8
 74e:	87 7f       	andi	r24, 0xF7	; 247
 750:	80 93 e8 00 	sts	0x00E8, r24
	{
		Endpoint_ClearSETUP();

		Endpoint_ClearStatusStage();
 754:	ce dd       	rcall	.-1124   	; 0x2f2 <Endpoint_ClearStatusStage>
			 *  \return Boolean true if the current endpoint is ready for an IN packet, false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 756:	80 91 e8 00 	lds	r24, 0x00E8

		while (!(Endpoint_IsINReady()));
 75a:	80 ff       	sbrs	r24, 0
 75c:	fc cf       	rjmp	.-8      	; 0x756 <USB_Device_ProcessControlRequest+0x16c>

		USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
 75e:	11 23       	and	r17, r17
 760:	11 f4       	brne	.+4      	; 0x766 <USB_Device_ProcessControlRequest+0x17c>
 762:	82 e0       	ldi	r24, 0x02	; 2
 764:	01 c0       	rjmp	.+2      	; 0x768 <USB_Device_ProcessControlRequest+0x17e>
 766:	83 e0       	ldi	r24, 0x03	; 3
 768:	80 93 7b 01 	sts	0x017B, r24
			#endif

			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				UDADDR  = ((UDADDR & (1 << ADDEN)) | (Address & 0x7F));
 76c:	80 91 e3 00 	lds	r24, 0x00E3
 770:	80 78       	andi	r24, 0x80	; 128
 772:	18 2b       	or	r17, r24
 774:	10 93 e3 00 	sts	0x00E3, r17
				UDADDR |= (1 << ADDEN);
 778:	80 91 e3 00 	lds	r24, 0x00E3
 77c:	80 68       	ori	r24, 0x80	; 128
 77e:	80 93 e3 00 	sts	0x00E3, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
 782:	0f bf       	out	0x3f, r16	; 63
    __asm__ volatile ("" ::: "memory");
 784:	85 c0       	rjmp	.+266    	; 0x890 <USB_Device_ProcessControlRequest+0x2a6>
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_SetAddress();

				break;
			case REQ_GetDescriptor:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
 786:	80 58       	subi	r24, 0x80	; 128
 788:	82 30       	cpi	r24, 0x02	; 2
 78a:	08 f0       	brcs	.+2      	; 0x78e <USB_Device_ProcessControlRequest+0x1a4>
 78c:	81 c0       	rjmp	.+258    	; 0x890 <USB_Device_ProcessControlRequest+0x2a6>
	#if !defined(USE_FLASH_DESCRIPTORS) && !defined(USE_EEPROM_DESCRIPTORS) && !defined(USE_RAM_DESCRIPTORS)
	uint8_t DescriptorAddressSpace;
	#endif

	#if !defined(NO_INTERNAL_SERIAL) && (USE_INTERNAL_SERIAL != NO_DESCRIPTOR)
	if (USB_ControlRequest.wValue == ((DTYPE_String << 8) | USE_INTERNAL_SERIAL))
 78e:	80 91 7e 01 	lds	r24, 0x017E
 792:	90 91 7f 01 	lds	r25, 0x017F
 796:	23 e0       	ldi	r18, 0x03	; 3
 798:	8c 3d       	cpi	r24, 0xDC	; 220
 79a:	92 07       	cpc	r25, r18
 79c:	99 f5       	brne	.+102    	; 0x804 <USB_Device_ProcessControlRequest+0x21a>
	} SignatureDescriptor;

	SignatureDescriptor.Header.Type = DTYPE_String;
	SignatureDescriptor.Header.Size = sizeof(SignatureDescriptor);

	ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
 79e:	7f b7       	in	r23, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
 7a0:	f8 94       	cli
 7a2:	de 01       	movw	r26, r28
 7a4:	15 96       	adiw	r26, 0x05	; 5
 7a6:	6e e0       	ldi	r22, 0x0E	; 14
 7a8:	40 e0       	ldi	r20, 0x00	; 0
 7aa:	50 e0       	ldi	r21, 0x00	; 0
	{
		uint8_t SigReadAddress = 0x0E;

		for (uint8_t SerialCharNum = 0; SerialCharNum < 20; SerialCharNum++)
		{
			uint8_t SerialByte = boot_signature_byte_get(SigReadAddress);
 7ac:	11 e2       	ldi	r17, 0x21	; 33
 7ae:	e6 2f       	mov	r30, r22
 7b0:	f0 e0       	ldi	r31, 0x00	; 0
 7b2:	10 93 57 00 	sts	0x0057, r17
 7b6:	84 91       	lpm	r24, Z+

			if (SerialCharNum & 0x01)
 7b8:	40 ff       	sbrs	r20, 0
 7ba:	03 c0       	rjmp	.+6      	; 0x7c2 <USB_Device_ProcessControlRequest+0x1d8>
			{
				SerialByte >>= 4;
 7bc:	82 95       	swap	r24
 7be:	8f 70       	andi	r24, 0x0F	; 15
				SigReadAddress++;
 7c0:	6f 5f       	subi	r22, 0xFF	; 255
			}

			SerialByte &= 0x0F;
 7c2:	8f 70       	andi	r24, 0x0F	; 15
 7c4:	28 2f       	mov	r18, r24
 7c6:	30 e0       	ldi	r19, 0x00	; 0

			SignatureDescriptor.UnicodeString[SerialCharNum] = (SerialByte >= 10) ?
 7c8:	8a 30       	cpi	r24, 0x0A	; 10
 7ca:	18 f0       	brcs	.+6      	; 0x7d2 <USB_Device_ProcessControlRequest+0x1e8>
 7cc:	c9 01       	movw	r24, r18
 7ce:	c7 96       	adiw	r24, 0x37	; 55
 7d0:	02 c0       	rjmp	.+4      	; 0x7d6 <USB_Device_ProcessControlRequest+0x1ec>
 7d2:	c9 01       	movw	r24, r18
 7d4:	c0 96       	adiw	r24, 0x30	; 48
 7d6:	8d 93       	st	X+, r24
 7d8:	9d 93       	st	X+, r25
 7da:	4f 5f       	subi	r20, 0xFF	; 255
 7dc:	5f 4f       	sbci	r21, 0xFF	; 255

	ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
	{
		uint8_t SigReadAddress = 0x0E;

		for (uint8_t SerialCharNum = 0; SerialCharNum < 20; SerialCharNum++)
 7de:	44 31       	cpi	r20, 0x14	; 20
 7e0:	51 05       	cpc	r21, r1
 7e2:	29 f7       	brne	.-54     	; 0x7ae <USB_Device_ProcessControlRequest+0x1c4>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
 7e4:	7f bf       	out	0x3f, r23	; 63
		USB_Descriptor_Header_t Header;
		wchar_t                 UnicodeString[20];
	} SignatureDescriptor;

	SignatureDescriptor.Header.Type = DTYPE_String;
	SignatureDescriptor.Header.Size = sizeof(SignatureDescriptor);
 7e6:	8a e2       	ldi	r24, 0x2A	; 42
 7e8:	8b 83       	std	Y+3, r24	; 0x03
	{
		USB_Descriptor_Header_t Header;
		wchar_t                 UnicodeString[20];
	} SignatureDescriptor;

	SignatureDescriptor.Header.Type = DTYPE_String;
 7ea:	83 e0       	ldi	r24, 0x03	; 3
 7ec:	8c 83       	std	Y+4, r24	; 0x04
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 7ee:	80 91 e8 00 	lds	r24, 0x00E8
 7f2:	87 7f       	andi	r24, 0xF7	; 247
 7f4:	80 93 e8 00 	sts	0x00E8, r24
		}
	}

	Endpoint_ClearSETUP();

	Endpoint_Write_Control_Stream_LE(&SignatureDescriptor, sizeof(SignatureDescriptor));
 7f8:	ce 01       	movw	r24, r28
 7fa:	03 96       	adiw	r24, 0x03	; 3
 7fc:	6a e2       	ldi	r22, 0x2A	; 42
 7fe:	70 e0       	ldi	r23, 0x00	; 0
 800:	61 d0       	rcall	.+194    	; 0x8c4 <Endpoint_Write_Control_Stream_LE>
 802:	12 c0       	rjmp	.+36     	; 0x828 <USB_Device_ProcessControlRequest+0x23e>
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif

	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
 804:	60 91 80 01 	lds	r22, 0x0180
 808:	ae 01       	movw	r20, r28
 80a:	4f 5f       	subi	r20, 0xFF	; 255
 80c:	5f 4f       	sbci	r21, 0xFF	; 255
 80e:	30 dd       	rcall	.-1440   	; 0x270 <CALLBACK_USB_GetDescriptor>
 810:	bc 01       	movw	r22, r24
 812:	00 97       	sbiw	r24, 0x00	; 0
 814:	09 f4       	brne	.+2      	; 0x818 <USB_Device_ProcessControlRequest+0x22e>
 816:	3c c0       	rjmp	.+120    	; 0x890 <USB_Device_ProcessControlRequest+0x2a6>
 818:	80 91 e8 00 	lds	r24, 0x00E8
 81c:	87 7f       	andi	r24, 0xF7	; 247
 81e:	80 93 e8 00 	sts	0x00E8, r24
	#if defined(USE_RAM_DESCRIPTORS)
	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_EEPROM_DESCRIPTORS)
	Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_FLASH_DESCRIPTORS)
	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
 822:	89 81       	ldd	r24, Y+1	; 0x01
 824:	9a 81       	ldd	r25, Y+2	; 0x02
 826:	ac d0       	rcall	.+344    	; 0x980 <Endpoint_Write_Control_PStream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 828:	80 91 e8 00 	lds	r24, 0x00E8
 82c:	8b 77       	andi	r24, 0x7B	; 123
 82e:	80 93 e8 00 	sts	0x00E8, r24
 832:	2e c0       	rjmp	.+92     	; 0x890 <USB_Device_ProcessControlRequest+0x2a6>
					USB_Device_GetDescriptor();
				}

				break;
			case REQ_GetConfiguration:
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
 834:	80 38       	cpi	r24, 0x80	; 128
 836:	61 f5       	brne	.+88     	; 0x890 <USB_Device_ProcessControlRequest+0x2a6>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 838:	80 91 e8 00 	lds	r24, 0x00E8
 83c:	87 7f       	andi	r24, 0xF7	; 247
 83e:	80 93 e8 00 	sts	0x00E8, r24

static void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();

	Endpoint_Write_Byte(USB_ConfigurationNumber);
 842:	80 91 79 01 	lds	r24, 0x0179
			 *  \param[in] Byte  Next byte to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_Byte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_Byte(const uint8_t Byte)
			{
				UEDATX = Byte;
 846:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 84a:	80 91 e8 00 	lds	r24, 0x00E8
 84e:	8e 77       	andi	r24, 0x7E	; 126
 850:	80 93 e8 00 	sts	0x00E8, r24
	Endpoint_ClearIN();

	Endpoint_ClearStatusStage();
 854:	4e dd       	rcall	.-1380   	; 0x2f2 <Endpoint_ClearStatusStage>
 856:	1c c0       	rjmp	.+56     	; 0x890 <USB_Device_ProcessControlRequest+0x2a6>
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_GetConfiguration();

				break;
			case REQ_SetConfiguration:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
 858:	88 23       	and	r24, r24
 85a:	d1 f4       	brne	.+52     	; 0x890 <USB_Device_ProcessControlRequest+0x2a6>
}

static void USB_Device_SetConfiguration(void)
{
	#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
 85c:	90 91 7e 01 	lds	r25, 0x017E
 860:	92 30       	cpi	r25, 0x02	; 2
 862:	b0 f4       	brcc	.+44     	; 0x890 <USB_Device_ProcessControlRequest+0x2a6>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 864:	80 91 e8 00 	lds	r24, 0x00E8
 868:	87 7f       	andi	r24, 0xF7	; 247
 86a:	80 93 e8 00 	sts	0x00E8, r24
	}
	#endif

	Endpoint_ClearSETUP();

	USB_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
 86e:	90 93 79 01 	sts	0x0179, r25

	Endpoint_ClearStatusStage();
 872:	3f dd       	rcall	.-1410   	; 0x2f2 <Endpoint_ClearStatusStage>

	if (USB_ConfigurationNumber)
 874:	80 91 79 01 	lds	r24, 0x0179
 878:	88 23       	and	r24, r24
 87a:	31 f4       	brne	.+12     	; 0x888 <USB_Device_ProcessControlRequest+0x29e>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
 87c:	80 91 e3 00 	lds	r24, 0x00E3
	  USB_DeviceState = DEVICE_STATE_Configured;
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
 880:	87 fd       	sbrc	r24, 7
 882:	02 c0       	rjmp	.+4      	; 0x888 <USB_Device_ProcessControlRequest+0x29e>
 884:	81 e0       	ldi	r24, 0x01	; 1
 886:	01 c0       	rjmp	.+2      	; 0x88a <USB_Device_ProcessControlRequest+0x2a0>
 888:	84 e0       	ldi	r24, 0x04	; 4
 88a:	80 93 7b 01 	sts	0x017B, r24

	EVENT_USB_Device_ConfigurationChanged();
 88e:	75 dc       	rcall	.-1814   	; 0x17a <EVENT_USB_Device_ConfigurationChanged>
			 *  \return Boolean true if the selected endpoint has received a SETUP packet, false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 890:	80 91 e8 00 	lds	r24, 0x00E8

				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
 894:	83 ff       	sbrs	r24, 3
 896:	0a c0       	rjmp	.+20     	; 0x8ac <USB_Device_ProcessControlRequest+0x2c2>
			 *  \ingroup Group_EndpointPacketManagement
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
 898:	80 91 eb 00 	lds	r24, 0x00EB
 89c:	80 62       	ori	r24, 0x20	; 32
 89e:	80 93 eb 00 	sts	0x00EB, r24
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 8a2:	80 91 e8 00 	lds	r24, 0x00E8
 8a6:	87 7f       	andi	r24, 0xF7	; 247
 8a8:	80 93 e8 00 	sts	0x00E8, r24
	{
		Endpoint_StallTransaction();
		Endpoint_ClearSETUP();
	}
}
 8ac:	ac 96       	adiw	r28, 0x2c	; 44
 8ae:	0f b6       	in	r0, 0x3f	; 63
 8b0:	f8 94       	cli
 8b2:	de bf       	out	0x3e, r29	; 62
 8b4:	0f be       	out	0x3f, r0	; 63
 8b6:	cd bf       	out	0x3d, r28	; 61
 8b8:	cf 91       	pop	r28
 8ba:	df 91       	pop	r29
 8bc:	1f 91       	pop	r17
 8be:	0f 91       	pop	r16
 8c0:	08 95       	ret

000008c2 <USB_Event_Stub>:
#include "Events.h"

void USB_Event_Stub(void)
{

}
 8c2:	08 95       	ret

000008c4 <Endpoint_Write_Control_Stream_LE>:
 8c4:	9c 01       	movw	r18, r24
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
 8c6:	40 91 82 01 	lds	r20, 0x0182
 8ca:	50 91 83 01 	lds	r21, 0x0183
 8ce:	46 17       	cp	r20, r22
 8d0:	57 07       	cpc	r21, r23
 8d2:	18 f4       	brcc	.+6      	; 0x8da <Endpoint_Write_Control_Stream_LE+0x16>
uint8_t TEMPLATE_FUNC_NAME (const void* Buffer,
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
 8d4:	f9 01       	movw	r30, r18
 8d6:	90 e0       	ldi	r25, 0x00	; 0
 8d8:	3d c0       	rjmp	.+122    	; 0x954 <Endpoint_Write_Control_Stream_LE+0x90>
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
 8da:	61 15       	cp	r22, r1
 8dc:	71 05       	cpc	r23, r1
 8de:	11 f0       	breq	.+4      	; 0x8e4 <Endpoint_Write_Control_Stream_LE+0x20>
 8e0:	ab 01       	movw	r20, r22
 8e2:	f8 cf       	rjmp	.-16     	; 0x8d4 <Endpoint_Write_Control_Stream_LE+0x10>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 8e4:	80 91 e8 00 	lds	r24, 0x00E8
 8e8:	8e 77       	andi	r24, 0x7E	; 126
 8ea:	80 93 e8 00 	sts	0x00E8, r24
 8ee:	40 e0       	ldi	r20, 0x00	; 0
 8f0:	50 e0       	ldi	r21, 0x00	; 0
 8f2:	f0 cf       	rjmp	.-32     	; 0x8d4 <Endpoint_Write_Control_Stream_LE+0x10>
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
 8f4:	80 91 7b 01 	lds	r24, 0x017B

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
 8f8:	88 23       	and	r24, r24
 8fa:	f1 f1       	breq	.+124    	; 0x978 <Endpoint_Write_Control_Stream_LE+0xb4>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
 8fc:	85 30       	cpi	r24, 0x05	; 5
 8fe:	f1 f1       	breq	.+124    	; 0x97c <Endpoint_Write_Control_Stream_LE+0xb8>
			 *  \return Boolean true if the selected endpoint has received a SETUP packet, false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 900:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
 904:	83 ff       	sbrs	r24, 3
 906:	02 c0       	rjmp	.+4      	; 0x90c <Endpoint_Write_Control_Stream_LE+0x48>
 908:	81 e0       	ldi	r24, 0x01	; 1
 90a:	08 95       	ret
			 *  \return Boolean true if current endpoint is has received an OUT packet, false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 90c:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
 910:	82 fd       	sbrc	r24, 2
 912:	2c c0       	rjmp	.+88     	; 0x96c <Endpoint_Write_Control_Stream_LE+0xa8>
			 *  \return Boolean true if the current endpoint is ready for an IN packet, false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 914:	80 91 e8 00 	lds	r24, 0x00E8
		  break;

		if (Endpoint_IsINReady())
 918:	80 ff       	sbrs	r24, 0
 91a:	1c c0       	rjmp	.+56     	; 0x954 <Endpoint_Write_Control_Stream_LE+0x90>
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
					return UEBCX;
 91c:	20 91 f2 00 	lds	r18, 0x00F2
 920:	30 91 f3 00 	lds	r19, 0x00F3
 924:	07 c0       	rjmp	.+14     	; 0x934 <Endpoint_Write_Control_Stream_LE+0x70>
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_ControlEndpointSize))
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
 926:	81 91       	ld	r24, Z+
			 *  \param[in] Byte  Next byte to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_Byte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_Byte(const uint8_t Byte)
			{
				UEDATX = Byte;
 928:	80 93 f1 00 	sts	0x00F1, r24
				Length--;
 92c:	41 50       	subi	r20, 0x01	; 1
 92e:	50 40       	sbci	r21, 0x00	; 0
				BytesInEndpoint++;
 930:	2f 5f       	subi	r18, 0xFF	; 255
 932:	3f 4f       	sbci	r19, 0xFF	; 255

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_ControlEndpointSize))
 934:	41 15       	cp	r20, r1
 936:	51 05       	cpc	r21, r1
 938:	19 f0       	breq	.+6      	; 0x940 <Endpoint_Write_Control_Stream_LE+0x7c>
 93a:	28 30       	cpi	r18, 0x08	; 8
 93c:	31 05       	cpc	r19, r1
 93e:	98 f3       	brcs	.-26     	; 0x926 <Endpoint_Write_Control_Stream_LE+0x62>
				TEMPLATE_TRANSFER_BYTE(DataStream);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_ControlEndpointSize);
 940:	90 e0       	ldi	r25, 0x00	; 0
 942:	28 30       	cpi	r18, 0x08	; 8
 944:	31 05       	cpc	r19, r1
 946:	09 f4       	brne	.+2      	; 0x94a <Endpoint_Write_Control_Stream_LE+0x86>
 948:	91 e0       	ldi	r25, 0x01	; 1
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 94a:	80 91 e8 00 	lds	r24, 0x00E8
 94e:	8e 77       	andi	r24, 0x7E	; 126
 950:	80 93 e8 00 	sts	0x00E8, r24
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
 954:	41 15       	cp	r20, r1
 956:	51 05       	cpc	r21, r1
 958:	69 f6       	brne	.-102    	; 0x8f4 <Endpoint_Write_Control_Stream_LE+0x30>
 95a:	99 23       	and	r25, r25
 95c:	59 f6       	brne	.-106    	; 0x8f4 <Endpoint_Write_Control_Stream_LE+0x30>
 95e:	06 c0       	rjmp	.+12     	; 0x96c <Endpoint_Write_Control_Stream_LE+0xa8>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
 960:	80 91 7b 01 	lds	r24, 0x017B

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
 964:	88 23       	and	r24, r24
 966:	41 f0       	breq	.+16     	; 0x978 <Endpoint_Write_Control_Stream_LE+0xb4>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
 968:	85 30       	cpi	r24, 0x05	; 5
 96a:	41 f0       	breq	.+16     	; 0x97c <Endpoint_Write_Control_Stream_LE+0xb8>
			 *  \return Boolean true if current endpoint is has received an OUT packet, false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 96c:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
 970:	82 ff       	sbrs	r24, 2
 972:	f6 cf       	rjmp	.-20     	; 0x960 <Endpoint_Write_Control_Stream_LE+0x9c>
 974:	80 e0       	ldi	r24, 0x00	; 0
 976:	08 95       	ret
 978:	82 e0       	ldi	r24, 0x02	; 2
 97a:	08 95       	ret
 97c:	83 e0       	ldi	r24, 0x03	; 3
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
 97e:	08 95       	ret

00000980 <Endpoint_Write_Control_PStream_LE>:
uint8_t TEMPLATE_FUNC_NAME (const void* Buffer,
                            uint16_t Length)
{
 980:	9c 01       	movw	r18, r24
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
 982:	40 91 82 01 	lds	r20, 0x0182
 986:	50 91 83 01 	lds	r21, 0x0183
 98a:	46 17       	cp	r20, r22
 98c:	57 07       	cpc	r21, r23
 98e:	10 f4       	brcc	.+4      	; 0x994 <Endpoint_Write_Control_PStream_LE+0x14>
uint8_t TEMPLATE_FUNC_NAME (const void* Buffer,
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
 990:	60 e0       	ldi	r22, 0x00	; 0
 992:	40 c0       	rjmp	.+128    	; 0xa14 <Endpoint_Write_Control_PStream_LE+0x94>
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
 994:	61 15       	cp	r22, r1
 996:	71 05       	cpc	r23, r1
 998:	11 f0       	breq	.+4      	; 0x99e <Endpoint_Write_Control_PStream_LE+0x1e>
 99a:	ab 01       	movw	r20, r22
 99c:	f9 cf       	rjmp	.-14     	; 0x990 <Endpoint_Write_Control_PStream_LE+0x10>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 99e:	80 91 e8 00 	lds	r24, 0x00E8
 9a2:	8e 77       	andi	r24, 0x7E	; 126
 9a4:	80 93 e8 00 	sts	0x00E8, r24
 9a8:	40 e0       	ldi	r20, 0x00	; 0
 9aa:	50 e0       	ldi	r21, 0x00	; 0
 9ac:	f1 cf       	rjmp	.-30     	; 0x990 <Endpoint_Write_Control_PStream_LE+0x10>
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
 9ae:	80 91 7b 01 	lds	r24, 0x017B

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
 9b2:	88 23       	and	r24, r24
 9b4:	09 f4       	brne	.+2      	; 0x9b8 <Endpoint_Write_Control_PStream_LE+0x38>
 9b6:	40 c0       	rjmp	.+128    	; 0xa38 <Endpoint_Write_Control_PStream_LE+0xb8>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
 9b8:	85 30       	cpi	r24, 0x05	; 5
 9ba:	09 f4       	brne	.+2      	; 0x9be <Endpoint_Write_Control_PStream_LE+0x3e>
 9bc:	3f c0       	rjmp	.+126    	; 0xa3c <Endpoint_Write_Control_PStream_LE+0xbc>
			 *  \return Boolean true if the selected endpoint has received a SETUP packet, false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 9be:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
 9c2:	83 ff       	sbrs	r24, 3
 9c4:	02 c0       	rjmp	.+4      	; 0x9ca <Endpoint_Write_Control_PStream_LE+0x4a>
 9c6:	81 e0       	ldi	r24, 0x01	; 1
 9c8:	08 95       	ret
			 *  \return Boolean true if current endpoint is has received an OUT packet, false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 9ca:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
 9ce:	82 fd       	sbrc	r24, 2
 9d0:	2d c0       	rjmp	.+90     	; 0xa2c <Endpoint_Write_Control_PStream_LE+0xac>
			 *  \return Boolean true if the current endpoint is ready for an IN packet, false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 9d2:	80 91 e8 00 	lds	r24, 0x00E8
		  break;

		if (Endpoint_IsINReady())
 9d6:	80 ff       	sbrs	r24, 0
 9d8:	1d c0       	rjmp	.+58     	; 0xa14 <Endpoint_Write_Control_PStream_LE+0x94>
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
					return UEBCX;
 9da:	80 91 f2 00 	lds	r24, 0x00F2
 9de:	90 91 f3 00 	lds	r25, 0x00F3
 9e2:	09 c0       	rjmp	.+18     	; 0x9f6 <Endpoint_Write_Control_PStream_LE+0x76>
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_ControlEndpointSize))
 9e4:	f9 01       	movw	r30, r18
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
 9e6:	2f 5f       	subi	r18, 0xFF	; 255
 9e8:	3f 4f       	sbci	r19, 0xFF	; 255
 9ea:	e4 91       	lpm	r30, Z+
			 *  \param[in] Byte  Next byte to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_Byte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_Byte(const uint8_t Byte)
			{
				UEDATX = Byte;
 9ec:	e0 93 f1 00 	sts	0x00F1, r30
				Length--;
 9f0:	41 50       	subi	r20, 0x01	; 1
 9f2:	50 40       	sbci	r21, 0x00	; 0
				BytesInEndpoint++;
 9f4:	01 96       	adiw	r24, 0x01	; 1

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_ControlEndpointSize))
 9f6:	41 15       	cp	r20, r1
 9f8:	51 05       	cpc	r21, r1
 9fa:	19 f0       	breq	.+6      	; 0xa02 <Endpoint_Write_Control_PStream_LE+0x82>
 9fc:	88 30       	cpi	r24, 0x08	; 8
 9fe:	91 05       	cpc	r25, r1
 a00:	88 f3       	brcs	.-30     	; 0x9e4 <Endpoint_Write_Control_PStream_LE+0x64>
				TEMPLATE_TRANSFER_BYTE(DataStream);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_ControlEndpointSize);
 a02:	60 e0       	ldi	r22, 0x00	; 0
 a04:	08 97       	sbiw	r24, 0x08	; 8
 a06:	09 f4       	brne	.+2      	; 0xa0a <Endpoint_Write_Control_PStream_LE+0x8a>
 a08:	61 e0       	ldi	r22, 0x01	; 1
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 a0a:	80 91 e8 00 	lds	r24, 0x00E8
 a0e:	8e 77       	andi	r24, 0x7E	; 126
 a10:	80 93 e8 00 	sts	0x00E8, r24
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
 a14:	41 15       	cp	r20, r1
 a16:	51 05       	cpc	r21, r1
 a18:	51 f6       	brne	.-108    	; 0x9ae <Endpoint_Write_Control_PStream_LE+0x2e>
 a1a:	66 23       	and	r22, r22
 a1c:	41 f6       	brne	.-112    	; 0x9ae <Endpoint_Write_Control_PStream_LE+0x2e>
 a1e:	06 c0       	rjmp	.+12     	; 0xa2c <Endpoint_Write_Control_PStream_LE+0xac>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
 a20:	80 91 7b 01 	lds	r24, 0x017B

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
 a24:	88 23       	and	r24, r24
 a26:	41 f0       	breq	.+16     	; 0xa38 <Endpoint_Write_Control_PStream_LE+0xb8>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
 a28:	85 30       	cpi	r24, 0x05	; 5
 a2a:	41 f0       	breq	.+16     	; 0xa3c <Endpoint_Write_Control_PStream_LE+0xbc>
			 *  \return Boolean true if current endpoint is has received an OUT packet, false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 a2c:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
 a30:	82 ff       	sbrs	r24, 2
 a32:	f6 cf       	rjmp	.-20     	; 0xa20 <Endpoint_Write_Control_PStream_LE+0xa0>
 a34:	80 e0       	ldi	r24, 0x00	; 0
 a36:	08 95       	ret
 a38:	82 e0       	ldi	r24, 0x02	; 2
 a3a:	08 95       	ret
 a3c:	83 e0       	ldi	r24, 0x03	; 3
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
 a3e:	08 95       	ret

00000a40 <Endpoint_Read_Control_Stream_LE>:
uint8_t TEMPLATE_FUNC_NAME (void* Buffer,
                            uint16_t Length)
{
 a40:	9c 01       	movw	r18, r24
	uint8_t* DataStream = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));

	if (!(Length))
 a42:	61 15       	cp	r22, r1
 a44:	71 05       	cpc	r23, r1
 a46:	29 f4       	brne	.+10     	; 0xa52 <Endpoint_Read_Control_Stream_LE+0x12>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 a48:	80 91 e8 00 	lds	r24, 0x00E8
 a4c:	8b 77       	andi	r24, 0x7B	; 123
 a4e:	80 93 e8 00 	sts	0x00E8, r24
uint8_t TEMPLATE_FUNC_NAME (void* Buffer,
                            uint16_t Length)
{
	uint8_t* DataStream = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
 a52:	f9 01       	movw	r30, r18
 a54:	22 c0       	rjmp	.+68     	; 0xa9a <Endpoint_Read_Control_Stream_LE+0x5a>
	if (!(Length))
	  Endpoint_ClearOUT();

	while (Length)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
 a56:	80 91 7b 01 	lds	r24, 0x017B

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
 a5a:	88 23       	and	r24, r24
 a5c:	71 f1       	breq	.+92     	; 0xaba <Endpoint_Read_Control_Stream_LE+0x7a>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
 a5e:	85 30       	cpi	r24, 0x05	; 5
 a60:	71 f1       	breq	.+92     	; 0xabe <Endpoint_Read_Control_Stream_LE+0x7e>
			 *  \return Boolean true if the selected endpoint has received a SETUP packet, false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 a62:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
 a66:	83 ff       	sbrs	r24, 3
 a68:	02 c0       	rjmp	.+4      	; 0xa6e <Endpoint_Read_Control_Stream_LE+0x2e>
 a6a:	81 e0       	ldi	r24, 0x01	; 1
 a6c:	08 95       	ret
			 *  \return Boolean true if current endpoint is has received an OUT packet, false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 a6e:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;

		if (Endpoint_IsOUTReceived())
 a72:	82 ff       	sbrs	r24, 2
 a74:	f0 cf       	rjmp	.-32     	; 0xa56 <Endpoint_Read_Control_Stream_LE+0x16>
 a76:	06 c0       	rjmp	.+12     	; 0xa84 <Endpoint_Read_Control_Stream_LE+0x44>
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_Byte(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_Byte(void)
			{
				return UEDATX;
 a78:	80 91 f1 00 	lds	r24, 0x00F1
		{
			while (Length && Endpoint_BytesInEndpoint())
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
 a7c:	81 93       	st	Z+, r24
				Length--;
 a7e:	61 50       	subi	r22, 0x01	; 1
 a80:	70 40       	sbci	r23, 0x00	; 0
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;

		if (Endpoint_IsOUTReceived())
		{
			while (Length && Endpoint_BytesInEndpoint())
 a82:	31 f0       	breq	.+12     	; 0xa90 <Endpoint_Read_Control_Stream_LE+0x50>
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
					return UEBCX;
 a84:	80 91 f2 00 	lds	r24, 0x00F2
 a88:	90 91 f3 00 	lds	r25, 0x00F3
 a8c:	89 2b       	or	r24, r25
 a8e:	a1 f7       	brne	.-24     	; 0xa78 <Endpoint_Read_Control_Stream_LE+0x38>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 a90:	80 91 e8 00 	lds	r24, 0x00E8
 a94:	8b 77       	andi	r24, 0x7B	; 123
 a96:	80 93 e8 00 	sts	0x00E8, r24
	uint8_t* DataStream = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));

	if (!(Length))
	  Endpoint_ClearOUT();

	while (Length)
 a9a:	61 15       	cp	r22, r1
 a9c:	71 05       	cpc	r23, r1
 a9e:	d9 f6       	brne	.-74     	; 0xa56 <Endpoint_Read_Control_Stream_LE+0x16>
 aa0:	06 c0       	rjmp	.+12     	; 0xaae <Endpoint_Read_Control_Stream_LE+0x6e>
		}
	}

	while (!(Endpoint_IsINReady()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
 aa2:	80 91 7b 01 	lds	r24, 0x017B

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
 aa6:	88 23       	and	r24, r24
 aa8:	41 f0       	breq	.+16     	; 0xaba <Endpoint_Read_Control_Stream_LE+0x7a>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
 aaa:	85 30       	cpi	r24, 0x05	; 5
 aac:	41 f0       	breq	.+16     	; 0xabe <Endpoint_Read_Control_Stream_LE+0x7e>
			 *  \return Boolean true if the current endpoint is ready for an IN packet, false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 aae:	80 91 e8 00 	lds	r24, 0x00E8

			Endpoint_ClearOUT();
		}
	}

	while (!(Endpoint_IsINReady()))
 ab2:	80 ff       	sbrs	r24, 0
 ab4:	f6 cf       	rjmp	.-20     	; 0xaa2 <Endpoint_Read_Control_Stream_LE+0x62>
 ab6:	80 e0       	ldi	r24, 0x00	; 0
 ab8:	08 95       	ret
 aba:	82 e0       	ldi	r24, 0x02	; 2
 abc:	08 95       	ret
 abe:	83 e0       	ldi	r24, 0x03	; 3
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
 ac0:	08 95       	ret

00000ac2 <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
 ac2:	1f 93       	push	r17
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_DeviceTask(void)
{
	if (USB_DeviceState != DEVICE_STATE_Unattached)
 ac4:	80 91 7b 01 	lds	r24, 0x017B
 ac8:	88 23       	and	r24, r24
 aca:	61 f0       	breq	.+24     	; 0xae4 <USB_USBTask+0x22>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return (UENUM & ENDPOINT_EPNUM_MASK);
 acc:	10 91 e9 00 	lds	r17, 0x00E9
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 ad0:	10 92 e9 00 	sts	0x00E9, r1
			 *  \return Boolean true if the selected endpoint has received a SETUP packet, false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 ad4:	80 91 e8 00 	lds	r24, 0x00E8
	{
		uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();

		Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

		if (Endpoint_IsSETUPReceived())
 ad8:	83 ff       	sbrs	r24, 3
 ada:	01 c0       	rjmp	.+2      	; 0xade <USB_USBTask+0x1c>
		  USB_Device_ProcessControlRequest();
 adc:	86 dd       	rcall	.-1268   	; 0x5ea <USB_Device_ProcessControlRequest>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return (UENUM & ENDPOINT_EPNUM_MASK);
 ade:	17 70       	andi	r17, 0x07	; 7
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 ae0:	10 93 e9 00 	sts	0x00E9, r17
		if (USB_CurrentMode == USB_MODE_Device)
		  USB_DeviceTask();
		else if (USB_CurrentMode == USB_MODE_Host)
		  USB_HostTask();
	#endif
}
 ae4:	1f 91       	pop	r17
 ae6:	08 95       	ret

00000ae8 <CDC_Device_Event_Stub>:
#include "CDC.h"

void CDC_Device_Event_Stub(void)
{

}
 ae8:	08 95       	ret

00000aea <CDC_Device_ReceiveByte>:
		return 0;
	}
}

int16_t CDC_Device_ReceiveByte(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
 aea:	fc 01       	movw	r30, r24
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
 aec:	80 91 7b 01 	lds	r24, 0x017B
 af0:	84 30       	cpi	r24, 0x04	; 4
 af2:	41 f5       	brne	.+80     	; 0xb44 <CDC_Device_ReceiveByte+0x5a>
 af4:	87 85       	ldd	r24, Z+15	; 0x0f
 af6:	90 89       	ldd	r25, Z+16	; 0x10
 af8:	a1 89       	ldd	r26, Z+17	; 0x11
 afa:	b2 89       	ldd	r27, Z+18	; 0x12
 afc:	00 97       	sbiw	r24, 0x00	; 0
 afe:	a1 05       	cpc	r26, r1
 b00:	b1 05       	cpc	r27, r1
 b02:	01 f1       	breq	.+64     	; 0xb44 <CDC_Device_ReceiveByte+0x5a>
	  return -1;

	int16_t ReceivedByte = -1;

	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataOUTEndpointNumber);
 b04:	85 81       	ldd	r24, Z+5	; 0x05
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 b06:	80 93 e9 00 	sts	0x00E9, r24
			 *  \return Boolean true if current endpoint is has received an OUT packet, false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 b0a:	80 91 e8 00 	lds	r24, 0x00E8

	if (Endpoint_IsOUTReceived())
 b0e:	82 ff       	sbrs	r24, 2
 b10:	19 c0       	rjmp	.+50     	; 0xb44 <CDC_Device_ReceiveByte+0x5a>
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
					return UEBCX;
 b12:	80 91 f2 00 	lds	r24, 0x00F2
 b16:	90 91 f3 00 	lds	r25, 0x00F3
	{
		if (Endpoint_BytesInEndpoint())
 b1a:	89 2b       	or	r24, r25
 b1c:	19 f4       	brne	.+6      	; 0xb24 <CDC_Device_ReceiveByte+0x3a>
 b1e:	2f ef       	ldi	r18, 0xFF	; 255
 b20:	3f ef       	ldi	r19, 0xFF	; 255
 b22:	04 c0       	rjmp	.+8      	; 0xb2c <CDC_Device_ReceiveByte+0x42>
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_Byte(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_Byte(void)
			{
				return UEDATX;
 b24:	80 91 f1 00 	lds	r24, 0x00F1
		  ReceivedByte = Endpoint_Read_Byte();
 b28:	28 2f       	mov	r18, r24
 b2a:	30 e0       	ldi	r19, 0x00	; 0
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
					return UEBCX;
 b2c:	80 91 f2 00 	lds	r24, 0x00F2
 b30:	90 91 f3 00 	lds	r25, 0x00F3

		if (!(Endpoint_BytesInEndpoint()))
 b34:	89 2b       	or	r24, r25
 b36:	41 f4       	brne	.+16     	; 0xb48 <CDC_Device_ReceiveByte+0x5e>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 b38:	80 91 e8 00 	lds	r24, 0x00E8
 b3c:	8b 77       	andi	r24, 0x7B	; 123
 b3e:	80 93 e8 00 	sts	0x00E8, r24
 b42:	02 c0       	rjmp	.+4      	; 0xb48 <CDC_Device_ReceiveByte+0x5e>
 b44:	2f ef       	ldi	r18, 0xFF	; 255
 b46:	3f ef       	ldi	r19, 0xFF	; 255
		  Endpoint_ClearOUT();
	}

	return ReceivedByte;
}
 b48:	c9 01       	movw	r24, r18
 b4a:	08 95       	ret

00000b4c <CDC_Device_CreateStream>:
	Endpoint_ClearIN();
}

void CDC_Device_CreateStream(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo,
                             FILE* const Stream)
{
 b4c:	fb 01       	movw	r30, r22
	*Stream = (FILE)FDEV_SETUP_STREAM(CDC_Device_putchar, CDC_Device_getchar, _FDEV_SETUP_RW);
 b4e:	2e e0       	ldi	r18, 0x0E	; 14
 b50:	db 01       	movw	r26, r22
 b52:	1d 92       	st	X+, r1
 b54:	2a 95       	dec	r18
 b56:	e9 f7       	brne	.-6      	; 0xb52 <CDC_Device_CreateStream+0x6>
 b58:	23 e0       	ldi	r18, 0x03	; 3
 b5a:	23 83       	std	Z+3, r18	; 0x03
 b5c:	27 e2       	ldi	r18, 0x27	; 39
 b5e:	36 e0       	ldi	r19, 0x06	; 6
 b60:	31 87       	std	Z+9, r19	; 0x09
 b62:	20 87       	std	Z+8, r18	; 0x08
 b64:	29 eb       	ldi	r18, 0xB9	; 185
 b66:	35 e0       	ldi	r19, 0x05	; 5
 b68:	33 87       	std	Z+11, r19	; 0x0b
 b6a:	22 87       	std	Z+10, r18	; 0x0a
	fdev_set_udata(Stream, CDCInterfaceInfo);
 b6c:	95 87       	std	Z+13, r25	; 0x0d
 b6e:	84 87       	std	Z+12, r24	; 0x0c
}
 b70:	08 95       	ret

00000b72 <CDC_Device_getchar>:
	return CDC_Device_SendByte((USB_ClassInfo_CDC_Device_t*)fdev_get_udata(Stream), c) ? _FDEV_ERR : 0;
}

static int CDC_Device_getchar(FILE* Stream)
{
	int16_t ReceivedByte = CDC_Device_ReceiveByte((USB_ClassInfo_CDC_Device_t*)fdev_get_udata(Stream));
 b72:	fc 01       	movw	r30, r24
 b74:	84 85       	ldd	r24, Z+12	; 0x0c
 b76:	95 85       	ldd	r25, Z+13	; 0x0d
 b78:	b8 df       	rcall	.-144    	; 0xaea <CDC_Device_ReceiveByte>
 b7a:	9c 01       	movw	r18, r24

	if (ReceivedByte < 0)
 b7c:	97 ff       	sbrs	r25, 7
 b7e:	02 c0       	rjmp	.+4      	; 0xb84 <CDC_Device_getchar+0x12>
 b80:	2e ef       	ldi	r18, 0xFE	; 254
 b82:	3f ef       	ldi	r19, 0xFF	; 255
	  return _FDEV_EOF;

	return ReceivedByte;
}
 b84:	c9 01       	movw	r24, r18
 b86:	08 95       	ret

00000b88 <CDC_Device_Flush>:
	Endpoint_Write_Byte(Data);
	return ENDPOINT_READYWAIT_NoError;
}

uint8_t CDC_Device_Flush(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
 b88:	fc 01       	movw	r30, r24
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
 b8a:	80 91 7b 01 	lds	r24, 0x017B
 b8e:	84 30       	cpi	r24, 0x04	; 4
 b90:	21 f5       	brne	.+72     	; 0xbda <CDC_Device_Flush+0x52>
 b92:	87 85       	ldd	r24, Z+15	; 0x0f
 b94:	90 89       	ldd	r25, Z+16	; 0x10
 b96:	a1 89       	ldd	r26, Z+17	; 0x11
 b98:	b2 89       	ldd	r27, Z+18	; 0x12
 b9a:	00 97       	sbiw	r24, 0x00	; 0
 b9c:	a1 05       	cpc	r26, r1
 b9e:	b1 05       	cpc	r27, r1
 ba0:	e1 f0       	breq	.+56     	; 0xbda <CDC_Device_Flush+0x52>
	  return ENDPOINT_RWSTREAM_DeviceDisconnected;

	uint8_t ErrorCode;

	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataINEndpointNumber);
 ba2:	81 81       	ldd	r24, Z+1	; 0x01
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 ba4:	80 93 e9 00 	sts	0x00E9, r24
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
					return UEBCX;
 ba8:	80 91 f2 00 	lds	r24, 0x00F2
 bac:	90 91 f3 00 	lds	r25, 0x00F3

	if (!(Endpoint_BytesInEndpoint()))
 bb0:	89 2b       	or	r24, r25
 bb2:	a9 f0       	breq	.+42     	; 0xbde <CDC_Device_Flush+0x56>
			 *  \return Boolean true if the currently selected endpoint may be read from or written to, depending on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
 bb4:	90 91 e8 00 	lds	r25, 0x00E8
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 bb8:	80 91 e8 00 	lds	r24, 0x00E8
 bbc:	8e 77       	andi	r24, 0x7E	; 126
 bbe:	80 93 e8 00 	sts	0x00E8, r24

	bool BankFull = !(Endpoint_IsReadWriteAllowed());

	Endpoint_ClearIN();

	if (BankFull)
 bc2:	95 fd       	sbrc	r25, 5
 bc4:	0c c0       	rjmp	.+24     	; 0xbde <CDC_Device_Flush+0x56>
	{
		if ((ErrorCode = Endpoint_WaitUntilReady()) != ENDPOINT_READYWAIT_NoError)
 bc6:	b6 db       	rcall	.-2196   	; 0x334 <Endpoint_WaitUntilReady>
 bc8:	98 2f       	mov	r25, r24
 bca:	88 23       	and	r24, r24
 bcc:	49 f4       	brne	.+18     	; 0xbe0 <CDC_Device_Flush+0x58>
 bce:	80 91 e8 00 	lds	r24, 0x00E8
 bd2:	8e 77       	andi	r24, 0x7E	; 126
 bd4:	80 93 e8 00 	sts	0x00E8, r24
 bd8:	03 c0       	rjmp	.+6      	; 0xbe0 <CDC_Device_Flush+0x58>
 bda:	92 e0       	ldi	r25, 0x02	; 2
 bdc:	01 c0       	rjmp	.+2      	; 0xbe0 <CDC_Device_Flush+0x58>
 bde:	90 e0       	ldi	r25, 0x00	; 0

		Endpoint_ClearIN();
	}

	return ENDPOINT_READYWAIT_NoError;
}
 be0:	89 2f       	mov	r24, r25
 be2:	08 95       	ret

00000be4 <CDC_Device_USBTask>:

	return true;
}

void CDC_Device_USBTask(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
 be4:	fc 01       	movw	r30, r24
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
 be6:	80 91 7b 01 	lds	r24, 0x017B
 bea:	84 30       	cpi	r24, 0x04	; 4
 bec:	51 f4       	brne	.+20     	; 0xc02 <CDC_Device_USBTask+0x1e>
 bee:	87 85       	ldd	r24, Z+15	; 0x0f
 bf0:	90 89       	ldd	r25, Z+16	; 0x10
 bf2:	a1 89       	ldd	r26, Z+17	; 0x11
 bf4:	b2 89       	ldd	r27, Z+18	; 0x12
 bf6:	00 97       	sbiw	r24, 0x00	; 0
 bf8:	a1 05       	cpc	r26, r1
 bfa:	b1 05       	cpc	r27, r1
 bfc:	11 f0       	breq	.+4      	; 0xc02 <CDC_Device_USBTask+0x1e>
	  return;

	#if !defined(NO_CLASS_DRIVER_AUTOFLUSH)
	CDC_Device_Flush(CDCInterfaceInfo);
 bfe:	cf 01       	movw	r24, r30
 c00:	c3 cf       	rjmp	.-122    	; 0xb88 <CDC_Device_Flush>
 c02:	08 95       	ret

00000c04 <CDC_Device_SendByte>:
	return Endpoint_Write_Stream_LE(Data, Length, NO_STREAM_CALLBACK);
}

uint8_t CDC_Device_SendByte(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo,
                            const uint8_t Data)
{
 c04:	1f 93       	push	r17
 c06:	fc 01       	movw	r30, r24
 c08:	16 2f       	mov	r17, r22
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
 c0a:	80 91 7b 01 	lds	r24, 0x017B
 c0e:	84 30       	cpi	r24, 0x04	; 4
 c10:	d9 f4       	brne	.+54     	; 0xc48 <CDC_Device_SendByte+0x44>
 c12:	87 85       	ldd	r24, Z+15	; 0x0f
 c14:	90 89       	ldd	r25, Z+16	; 0x10
 c16:	a1 89       	ldd	r26, Z+17	; 0x11
 c18:	b2 89       	ldd	r27, Z+18	; 0x12
 c1a:	00 97       	sbiw	r24, 0x00	; 0
 c1c:	a1 05       	cpc	r26, r1
 c1e:	b1 05       	cpc	r27, r1
 c20:	99 f0       	breq	.+38     	; 0xc48 <CDC_Device_SendByte+0x44>
	  return ENDPOINT_RWSTREAM_DeviceDisconnected;

	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataINEndpointNumber);
 c22:	81 81       	ldd	r24, Z+1	; 0x01
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 c24:	80 93 e9 00 	sts	0x00E9, r24
			 *  \return Boolean true if the currently selected endpoint may be read from or written to, depending on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
 c28:	80 91 e8 00 	lds	r24, 0x00E8

	if (!(Endpoint_IsReadWriteAllowed()))
 c2c:	85 fd       	sbrc	r24, 5
 c2e:	08 c0       	rjmp	.+16     	; 0xc40 <CDC_Device_SendByte+0x3c>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 c30:	80 91 e8 00 	lds	r24, 0x00E8
 c34:	8e 77       	andi	r24, 0x7E	; 126
 c36:	80 93 e8 00 	sts	0x00E8, r24
	{
		Endpoint_ClearIN();

		uint8_t ErrorCode;

		if ((ErrorCode = Endpoint_WaitUntilReady()) != ENDPOINT_READYWAIT_NoError)
 c3a:	7c db       	rcall	.-2312   	; 0x334 <Endpoint_WaitUntilReady>
 c3c:	88 23       	and	r24, r24
 c3e:	29 f4       	brne	.+10     	; 0xc4a <CDC_Device_SendByte+0x46>
			 *  \param[in] Byte  Next byte to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_Byte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_Byte(const uint8_t Byte)
			{
				UEDATX = Byte;
 c40:	10 93 f1 00 	sts	0x00F1, r17
 c44:	80 e0       	ldi	r24, 0x00	; 0
 c46:	01 c0       	rjmp	.+2      	; 0xc4a <CDC_Device_SendByte+0x46>
		  return ErrorCode;
	}

	Endpoint_Write_Byte(Data);
	return ENDPOINT_READYWAIT_NoError;
 c48:	82 e0       	ldi	r24, 0x02	; 2
}
 c4a:	1f 91       	pop	r17
 c4c:	08 95       	ret

00000c4e <CDC_Device_putchar>:
	fdev_set_udata(Stream, CDCInterfaceInfo);
}

static int CDC_Device_putchar(char c,
                              FILE* Stream)
{
 c4e:	28 2f       	mov	r18, r24
 c50:	fb 01       	movw	r30, r22
	return CDC_Device_SendByte((USB_ClassInfo_CDC_Device_t*)fdev_get_udata(Stream), c) ? _FDEV_ERR : 0;
 c52:	84 85       	ldd	r24, Z+12	; 0x0c
 c54:	95 85       	ldd	r25, Z+13	; 0x0d
 c56:	62 2f       	mov	r22, r18
 c58:	d5 df       	rcall	.-86     	; 0xc04 <CDC_Device_SendByte>
 c5a:	88 23       	and	r24, r24
 c5c:	19 f4       	brne	.+6      	; 0xc64 <CDC_Device_putchar+0x16>
 c5e:	20 e0       	ldi	r18, 0x00	; 0
 c60:	30 e0       	ldi	r19, 0x00	; 0
 c62:	02 c0       	rjmp	.+4      	; 0xc68 <CDC_Device_putchar+0x1a>
 c64:	2f ef       	ldi	r18, 0xFF	; 255
 c66:	3f ef       	ldi	r19, 0xFF	; 255
}
 c68:	c9 01       	movw	r24, r18
 c6a:	08 95       	ret

00000c6c <CDC_Device_ConfigureEndpoints>:
			break;
	}
}

bool CDC_Device_ConfigureEndpoints(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
 c6c:	1f 93       	push	r17
 c6e:	cf 93       	push	r28
 c70:	df 93       	push	r29
 c72:	ec 01       	movw	r28, r24
	memset(&CDCInterfaceInfo->State, 0x00, sizeof(CDCInterfaceInfo->State));
 c74:	0d 96       	adiw	r24, 0x0d	; 13
 c76:	fc 01       	movw	r30, r24
 c78:	89 e0       	ldi	r24, 0x09	; 9
 c7a:	df 01       	movw	r26, r30
 c7c:	1d 92       	st	X+, r1
 c7e:	8a 95       	dec	r24
 c80:	e9 f7       	brne	.-6      	; 0xc7c <CDC_Device_ConfigureEndpoints+0x10>
 c82:	11 e0       	ldi	r17, 0x01	; 1
		uint16_t Size;
		uint8_t  Type;
		uint8_t  Direction;
		bool     DoubleBanked;

		if (EndpointNum == CDCInterfaceInfo->Config.DataINEndpointNumber)
 c84:	89 81       	ldd	r24, Y+1	; 0x01
 c86:	18 17       	cp	r17, r24
 c88:	29 f4       	brne	.+10     	; 0xc94 <CDC_Device_ConfigureEndpoints+0x28>
		{
			Size         = CDCInterfaceInfo->Config.DataINEndpointSize;
 c8a:	ea 81       	ldd	r30, Y+2	; 0x02
 c8c:	fb 81       	ldd	r31, Y+3	; 0x03
			Direction    = ENDPOINT_DIR_IN;
			Type         = EP_TYPE_BULK;
			DoubleBanked = CDCInterfaceInfo->Config.DataINEndpointDoubleBank;
 c8e:	8c 81       	ldd	r24, Y+4	; 0x04
 c90:	62 e0       	ldi	r22, 0x02	; 2
 c92:	10 c0       	rjmp	.+32     	; 0xcb4 <CDC_Device_ConfigureEndpoints+0x48>
		}
		else if (EndpointNum == CDCInterfaceInfo->Config.DataOUTEndpointNumber)
 c94:	8d 81       	ldd	r24, Y+5	; 0x05
 c96:	18 17       	cp	r17, r24
 c98:	31 f4       	brne	.+12     	; 0xca6 <CDC_Device_ConfigureEndpoints+0x3a>
		{
			Size         = CDCInterfaceInfo->Config.DataOUTEndpointSize;
 c9a:	ee 81       	ldd	r30, Y+6	; 0x06
 c9c:	ff 81       	ldd	r31, Y+7	; 0x07
			Direction    = ENDPOINT_DIR_OUT;
			Type         = EP_TYPE_BULK;
			DoubleBanked = CDCInterfaceInfo->Config.DataOUTEndpointDoubleBank;
 c9e:	88 85       	ldd	r24, Y+8	; 0x08
 ca0:	62 e0       	ldi	r22, 0x02	; 2
 ca2:	30 e0       	ldi	r19, 0x00	; 0
 ca4:	08 c0       	rjmp	.+16     	; 0xcb6 <CDC_Device_ConfigureEndpoints+0x4a>
		}
		else if (EndpointNum == CDCInterfaceInfo->Config.NotificationEndpointNumber)
 ca6:	89 85       	ldd	r24, Y+9	; 0x09
 ca8:	18 17       	cp	r17, r24
 caa:	09 f5       	brne	.+66     	; 0xcee <CDC_Device_ConfigureEndpoints+0x82>
		{
			Size         = CDCInterfaceInfo->Config.NotificationEndpointSize;
 cac:	ea 85       	ldd	r30, Y+10	; 0x0a
 cae:	fb 85       	ldd	r31, Y+11	; 0x0b
			Direction    = ENDPOINT_DIR_IN;
			Type         = EP_TYPE_INTERRUPT;
			DoubleBanked = CDCInterfaceInfo->Config.NotificationEndpointDoubleBank;
 cb0:	8c 85       	ldd	r24, Y+12	; 0x0c
 cb2:	63 e0       	ldi	r22, 0x03	; 3
 cb4:	31 e0       	ldi	r19, 0x01	; 1
		else
		{
			continue;
		}

		if (!(Endpoint_ConfigureEndpoint(EndpointNum, Type, Direction, Size,
 cb6:	88 23       	and	r24, r24
 cb8:	11 f4       	brne	.+4      	; 0xcbe <CDC_Device_ConfigureEndpoints+0x52>
 cba:	40 e0       	ldi	r20, 0x00	; 0
 cbc:	01 c0       	rjmp	.+2      	; 0xcc0 <CDC_Device_ConfigureEndpoints+0x54>
 cbe:	44 e0       	ldi	r20, 0x04	; 4
 cc0:	20 e0       	ldi	r18, 0x00	; 0
 cc2:	88 e0       	ldi	r24, 0x08	; 8
 cc4:	90 e0       	ldi	r25, 0x00	; 0
 cc6:	03 c0       	rjmp	.+6      	; 0xcce <CDC_Device_ConfigureEndpoints+0x62>
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while (CheckBytes < Bytes)
				{
					MaskVal++;
 cc8:	2f 5f       	subi	r18, 0xFF	; 255
					CheckBytes <<= 1;
 cca:	88 0f       	add	r24, r24
 ccc:	99 1f       	adc	r25, r25
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while (CheckBytes < Bytes)
 cce:	8e 17       	cp	r24, r30
 cd0:	9f 07       	cpc	r25, r31
 cd2:	d0 f3       	brcs	.-12     	; 0xcc8 <CDC_Device_ConfigureEndpoints+0x5c>
			                                              const uint8_t Type,
			                                              const uint8_t Direction,
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				return Endpoint_ConfigureEndpoint_Prv(Number, (((Type) << EPTYPE0) | (Direction)),
 cd4:	62 95       	swap	r22
 cd6:	66 0f       	add	r22, r22
 cd8:	66 0f       	add	r22, r22
 cda:	60 7c       	andi	r22, 0xC0	; 192
 cdc:	63 2b       	or	r22, r19
 cde:	42 60       	ori	r20, 0x02	; 2
 ce0:	22 95       	swap	r18
 ce2:	20 7f       	andi	r18, 0xF0	; 240
 ce4:	42 2b       	or	r20, r18
 ce6:	81 2f       	mov	r24, r17
 ce8:	f1 da       	rcall	.-2590   	; 0x2cc <Endpoint_ConfigureEndpoint_Prv>
 cea:	88 23       	and	r24, r24
 cec:	21 f0       	breq	.+8      	; 0xcf6 <CDC_Device_ConfigureEndpoints+0x8a>

bool CDC_Device_ConfigureEndpoints(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
	memset(&CDCInterfaceInfo->State, 0x00, sizeof(CDCInterfaceInfo->State));

	for (uint8_t EndpointNum = 1; EndpointNum < ENDPOINT_TOTAL_ENDPOINTS; EndpointNum++)
 cee:	1f 5f       	subi	r17, 0xFF	; 255
 cf0:	17 30       	cpi	r17, 0x07	; 7
 cf2:	41 f6       	brne	.-112    	; 0xc84 <CDC_Device_ConfigureEndpoints+0x18>
 cf4:	81 e0       	ldi	r24, 0x01	; 1
			return false;
		}
	}

	return true;
}
 cf6:	df 91       	pop	r29
 cf8:	cf 91       	pop	r28
 cfa:	1f 91       	pop	r17
 cfc:	08 95       	ret

00000cfe <CDC_Device_ProcessControlRequest>:
{

}

void CDC_Device_ProcessControlRequest(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
 cfe:	cf 93       	push	r28
 d00:	df 93       	push	r29
 d02:	ec 01       	movw	r28, r24
			 *  \return Boolean true if the selected endpoint has received a SETUP packet, false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 d04:	80 91 e8 00 	lds	r24, 0x00E8
	if (!(Endpoint_IsSETUPReceived()))
 d08:	83 ff       	sbrs	r24, 3
 d0a:	63 c0       	rjmp	.+198    	; 0xdd2 <CDC_Device_ProcessControlRequest+0xd4>
	  return;

	if (USB_ControlRequest.wIndex != CDCInterfaceInfo->Config.ControlInterfaceNumber)
 d0c:	88 81       	ld	r24, Y
 d0e:	90 e0       	ldi	r25, 0x00	; 0
 d10:	20 91 80 01 	lds	r18, 0x0180
 d14:	30 91 81 01 	lds	r19, 0x0181
 d18:	28 17       	cp	r18, r24
 d1a:	39 07       	cpc	r19, r25
 d1c:	09 f0       	breq	.+2      	; 0xd20 <CDC_Device_ProcessControlRequest+0x22>
 d1e:	59 c0       	rjmp	.+178    	; 0xdd2 <CDC_Device_ProcessControlRequest+0xd4>
	  return;

	switch (USB_ControlRequest.bRequest)
 d20:	80 91 7d 01 	lds	r24, 0x017D
 d24:	81 32       	cpi	r24, 0x21	; 33
 d26:	61 f0       	breq	.+24     	; 0xd40 <CDC_Device_ProcessControlRequest+0x42>
 d28:	82 32       	cpi	r24, 0x22	; 34
 d2a:	20 f4       	brcc	.+8      	; 0xd34 <CDC_Device_ProcessControlRequest+0x36>
 d2c:	80 32       	cpi	r24, 0x20	; 32
 d2e:	09 f0       	breq	.+2      	; 0xd32 <CDC_Device_ProcessControlRequest+0x34>
 d30:	50 c0       	rjmp	.+160    	; 0xdd2 <CDC_Device_ProcessControlRequest+0xd4>
 d32:	1b c0       	rjmp	.+54     	; 0xd6a <CDC_Device_ProcessControlRequest+0x6c>
 d34:	82 32       	cpi	r24, 0x22	; 34
 d36:	79 f1       	breq	.+94     	; 0xd96 <CDC_Device_ProcessControlRequest+0x98>
 d38:	83 32       	cpi	r24, 0x23	; 35
 d3a:	09 f0       	breq	.+2      	; 0xd3e <CDC_Device_ProcessControlRequest+0x40>
 d3c:	4a c0       	rjmp	.+148    	; 0xdd2 <CDC_Device_ProcessControlRequest+0xd4>
 d3e:	3b c0       	rjmp	.+118    	; 0xdb6 <CDC_Device_ProcessControlRequest+0xb8>
	{
		case CDC_REQ_GetLineEncoding:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
 d40:	80 91 7c 01 	lds	r24, 0x017C
 d44:	81 3a       	cpi	r24, 0xA1	; 161
 d46:	09 f0       	breq	.+2      	; 0xd4a <CDC_Device_ProcessControlRequest+0x4c>
 d48:	44 c0       	rjmp	.+136    	; 0xdd2 <CDC_Device_ProcessControlRequest+0xd4>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 d4a:	80 91 e8 00 	lds	r24, 0x00E8
 d4e:	87 7f       	andi	r24, 0xF7	; 247
 d50:	80 93 e8 00 	sts	0x00E8, r24
			{
				Endpoint_ClearSETUP();
				Endpoint_Write_Control_Stream_LE(&CDCInterfaceInfo->State.LineEncoding, sizeof(CDCInterfaceInfo->State.LineEncoding));
 d54:	ce 01       	movw	r24, r28
 d56:	0f 96       	adiw	r24, 0x0f	; 15
 d58:	67 e0       	ldi	r22, 0x07	; 7
 d5a:	70 e0       	ldi	r23, 0x00	; 0
 d5c:	b3 dd       	rcall	.-1178   	; 0x8c4 <Endpoint_Write_Control_Stream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 d5e:	80 91 e8 00 	lds	r24, 0x00E8
 d62:	8b 77       	andi	r24, 0x7B	; 123
 d64:	80 93 e8 00 	sts	0x00E8, r24
 d68:	34 c0       	rjmp	.+104    	; 0xdd2 <CDC_Device_ProcessControlRequest+0xd4>
				Endpoint_ClearOUT();
			}

			break;
		case CDC_REQ_SetLineEncoding:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
 d6a:	80 91 7c 01 	lds	r24, 0x017C
 d6e:	81 32       	cpi	r24, 0x21	; 33
 d70:	81 f5       	brne	.+96     	; 0xdd2 <CDC_Device_ProcessControlRequest+0xd4>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 d72:	80 91 e8 00 	lds	r24, 0x00E8
 d76:	87 7f       	andi	r24, 0xF7	; 247
 d78:	80 93 e8 00 	sts	0x00E8, r24
			{
				Endpoint_ClearSETUP();
				Endpoint_Read_Control_Stream_LE(&CDCInterfaceInfo->State.LineEncoding, sizeof(CDCInterfaceInfo->State.LineEncoding));
 d7c:	ce 01       	movw	r24, r28
 d7e:	0f 96       	adiw	r24, 0x0f	; 15
 d80:	67 e0       	ldi	r22, 0x07	; 7
 d82:	70 e0       	ldi	r23, 0x00	; 0
 d84:	5d de       	rcall	.-838    	; 0xa40 <Endpoint_Read_Control_Stream_LE>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 d86:	80 91 e8 00 	lds	r24, 0x00E8
 d8a:	8e 77       	andi	r24, 0x7E	; 126
 d8c:	80 93 e8 00 	sts	0x00E8, r24
				Endpoint_ClearIN();

				EVENT_CDC_Device_LineEncodingChanged(CDCInterfaceInfo);
 d90:	ce 01       	movw	r24, r28
 d92:	aa de       	rcall	.-684    	; 0xae8 <CDC_Device_Event_Stub>
 d94:	1e c0       	rjmp	.+60     	; 0xdd2 <CDC_Device_ProcessControlRequest+0xd4>
			}

			break;
		case CDC_REQ_SetControlLineState:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
 d96:	80 91 7c 01 	lds	r24, 0x017C
 d9a:	81 32       	cpi	r24, 0x21	; 33
 d9c:	d1 f4       	brne	.+52     	; 0xdd2 <CDC_Device_ProcessControlRequest+0xd4>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 d9e:	80 91 e8 00 	lds	r24, 0x00E8
 da2:	87 7f       	andi	r24, 0xF7	; 247
 da4:	80 93 e8 00 	sts	0x00E8, r24
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
 da8:	a4 da       	rcall	.-2744   	; 0x2f2 <Endpoint_ClearStatusStage>

				CDCInterfaceInfo->State.ControlLineStates.HostToDevice = USB_ControlRequest.wValue;
 daa:	80 91 7e 01 	lds	r24, 0x017E
 dae:	8d 87       	std	Y+13, r24	; 0x0d

				EVENT_CDC_Device_ControLineStateChanged(CDCInterfaceInfo);
 db0:	ce 01       	movw	r24, r28
 db2:	9a de       	rcall	.-716    	; 0xae8 <CDC_Device_Event_Stub>
 db4:	0e c0       	rjmp	.+28     	; 0xdd2 <CDC_Device_ProcessControlRequest+0xd4>
			}

			break;
		case CDC_REQ_SendBreak:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
 db6:	80 91 7c 01 	lds	r24, 0x017C
 dba:	81 32       	cpi	r24, 0x21	; 33
 dbc:	51 f4       	brne	.+20     	; 0xdd2 <CDC_Device_ProcessControlRequest+0xd4>
 dbe:	80 91 e8 00 	lds	r24, 0x00E8
 dc2:	87 7f       	andi	r24, 0xF7	; 247
 dc4:	80 93 e8 00 	sts	0x00E8, r24
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
 dc8:	94 da       	rcall	.-2776   	; 0x2f2 <Endpoint_ClearStatusStage>

				EVENT_CDC_Device_BreakSent(CDCInterfaceInfo, (uint8_t)USB_ControlRequest.wValue);
 dca:	ce 01       	movw	r24, r28
 dcc:	60 91 7e 01 	lds	r22, 0x017E
 dd0:	8b de       	rcall	.-746    	; 0xae8 <CDC_Device_Event_Stub>
			}

			break;
	}
}
 dd2:	df 91       	pop	r29
 dd4:	cf 91       	pop	r28
 dd6:	08 95       	ret

00000dd8 <fputs>:
 dd8:	ef 92       	push	r14
 dda:	ff 92       	push	r15
 ddc:	0f 93       	push	r16
 dde:	1f 93       	push	r17
 de0:	cf 93       	push	r28
 de2:	df 93       	push	r29
 de4:	7c 01       	movw	r14, r24
 de6:	8b 01       	movw	r16, r22
 de8:	db 01       	movw	r26, r22
 dea:	13 96       	adiw	r26, 0x03	; 3
 dec:	8c 91       	ld	r24, X
 dee:	81 fd       	sbrc	r24, 1
 df0:	03 c0       	rjmp	.+6      	; 0xdf8 <fputs+0x20>
 df2:	cf ef       	ldi	r28, 0xFF	; 255
 df4:	df ef       	ldi	r29, 0xFF	; 255
 df6:	13 c0       	rjmp	.+38     	; 0xe1e <fputs+0x46>
 df8:	c0 e0       	ldi	r28, 0x00	; 0
 dfa:	d0 e0       	ldi	r29, 0x00	; 0
 dfc:	0b c0       	rjmp	.+22     	; 0xe14 <fputs+0x3c>
 dfe:	d8 01       	movw	r26, r16
 e00:	18 96       	adiw	r26, 0x08	; 8
 e02:	ed 91       	ld	r30, X+
 e04:	fc 91       	ld	r31, X
 e06:	19 97       	sbiw	r26, 0x09	; 9
 e08:	b8 01       	movw	r22, r16
 e0a:	09 95       	icall
 e0c:	89 2b       	or	r24, r25
 e0e:	11 f0       	breq	.+4      	; 0xe14 <fputs+0x3c>
 e10:	cf ef       	ldi	r28, 0xFF	; 255
 e12:	df ef       	ldi	r29, 0xFF	; 255
 e14:	f7 01       	movw	r30, r14
 e16:	81 91       	ld	r24, Z+
 e18:	7f 01       	movw	r14, r30
 e1a:	88 23       	and	r24, r24
 e1c:	81 f7       	brne	.-32     	; 0xdfe <fputs+0x26>
 e1e:	ce 01       	movw	r24, r28
 e20:	df 91       	pop	r29
 e22:	cf 91       	pop	r28
 e24:	1f 91       	pop	r17
 e26:	0f 91       	pop	r16
 e28:	ff 90       	pop	r15
 e2a:	ef 90       	pop	r14
 e2c:	08 95       	ret

00000e2e <_exit>:
 e2e:	f8 94       	cli

00000e30 <__stop_program>:
 e30:	ff cf       	rjmp	.-2      	; 0xe30 <__stop_program>
