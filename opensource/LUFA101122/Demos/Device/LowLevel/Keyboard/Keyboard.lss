
Keyboard.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800100  00000df2  00000e86  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000df2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000017  00800104  00800104  00000e8a  2**0
                  ALLOC
  3 .stab         000009a8  00000000  00000000  00000e8c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000199  00000000  00000000  00001834  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000002a8  00000000  00000000  000019cd  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000804  00000000  00000000  00001c75  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00003ca7  00000000  00000000  00002479  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000106b  00000000  00000000  00006120  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000036a7  00000000  00000000  0000718b  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000003f0  00000000  00000000  0000a834  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00001b42  00000000  00000000  0000ac24  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00001c79  00000000  00000000  0000c766  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000318  00000000  00000000  0000e3df  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:

	return Endpoint_IsConfigured();
}

void Endpoint_ClearEndpoints(void)
{
   0:	ab c0       	rjmp	.+342    	; 0x158 <__ctors_end>
	#if defined(USB_CAN_BE_BOTH)
	USB_CurrentMode = USB_MODE_None;
	#endif

	USB_IsInitialized = false;
}
   2:	00 00       	nop
uint8_t TEMPLATE_FUNC_NAME (const void* Buffer,
                            uint16_t Length)
{
   4:	c6 c0       	rjmp	.+396    	; 0x192 <__bad_interrupt>
   6:	00 00       	nop
   8:	c4 c0       	rjmp	.+392    	; 0x192 <__bad_interrupt>
   a:	00 00       	nop
   c:	c2 c0       	rjmp	.+388    	; 0x192 <__bad_interrupt>
   e:	00 00       	nop
  10:	c0 c0       	rjmp	.+384    	; 0x192 <__bad_interrupt>
  12:	00 00       	nop
  14:	be c0       	rjmp	.+380    	; 0x192 <__bad_interrupt>
  16:	00 00       	nop
  18:	bc c0       	rjmp	.+376    	; 0x192 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	ba c0       	rjmp	.+372    	; 0x192 <__bad_interrupt>
  1e:	00 00       	nop
  20:	b8 c0       	rjmp	.+368    	; 0x192 <__bad_interrupt>
  22:	00 00       	nop
  24:	b6 c0       	rjmp	.+364    	; 0x192 <__bad_interrupt>
  26:	00 00       	nop
  28:	a4 c3       	rjmp	.+1864   	; 0x772 <__vector_10>
  2a:	00 00       	nop
  2c:	b2 c0       	rjmp	.+356    	; 0x192 <__bad_interrupt>
  2e:	00 00       	nop
  30:	b0 c0       	rjmp	.+352    	; 0x192 <__bad_interrupt>
  32:	00 00       	nop
  34:	ae c0       	rjmp	.+348    	; 0x192 <__bad_interrupt>
  36:	00 00       	nop
  38:	ac c0       	rjmp	.+344    	; 0x192 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	aa c0       	rjmp	.+340    	; 0x192 <__bad_interrupt>
  3e:	00 00       	nop
  40:	a8 c0       	rjmp	.+336    	; 0x192 <__bad_interrupt>
  42:	00 00       	nop
  44:	a6 c0       	rjmp	.+332    	; 0x192 <__bad_interrupt>
  46:	00 00       	nop
  48:	a4 c0       	rjmp	.+328    	; 0x192 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	a2 c0       	rjmp	.+324    	; 0x192 <__bad_interrupt>
  4e:	00 00       	nop
  50:	a0 c0       	rjmp	.+320    	; 0x192 <__bad_interrupt>
  52:	00 00       	nop
  54:	9e c0       	rjmp	.+316    	; 0x192 <__bad_interrupt>
  56:	00 00       	nop
  58:	9c c0       	rjmp	.+312    	; 0x192 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	9a c0       	rjmp	.+308    	; 0x192 <__bad_interrupt>
  5e:	00 00       	nop
  60:	98 c0       	rjmp	.+304    	; 0x192 <__bad_interrupt>
  62:	00 00       	nop
  64:	96 c0       	rjmp	.+300    	; 0x192 <__bad_interrupt>
  66:	00 00       	nop
  68:	94 c0       	rjmp	.+296    	; 0x192 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	92 c0       	rjmp	.+292    	; 0x192 <__bad_interrupt>
  6e:	00 00       	nop
  70:	90 c0       	rjmp	.+288    	; 0x192 <__bad_interrupt>
  72:	00 00       	nop
  74:	8e c0       	rjmp	.+284    	; 0x192 <__bad_interrupt>
  76:	00 00       	nop
  78:	8c c0       	rjmp	.+280    	; 0x192 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	8a c0       	rjmp	.+276    	; 0x192 <__bad_interrupt>
  7e:	00 00       	nop
  80:	88 c0       	rjmp	.+272    	; 0x192 <__bad_interrupt>
  82:	00 00       	nop
  84:	86 c0       	rjmp	.+268    	; 0x192 <__bad_interrupt>
  86:	00 00       	nop
  88:	84 c0       	rjmp	.+264    	; 0x192 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	82 c0       	rjmp	.+260    	; 0x192 <__bad_interrupt>
  8e:	00 00       	nop
  90:	80 c0       	rjmp	.+256    	; 0x192 <__bad_interrupt>
  92:	00 00       	nop
  94:	7e c0       	rjmp	.+252    	; 0x192 <__bad_interrupt>
  96:	00 00       	nop

00000098 <KeyboardReport>:
  98:	05 01 09 06 a1 01 75 01 95 08 05 07 19 e0 29 e7     ......u.......).
  a8:	15 00 25 01 81 02 95 01 75 08 81 03 95 05 75 01     ..%.....u.....u.
  b8:	05 08 19 01 29 05 91 02 95 01 75 03 91 03 95 06     ....).....u.....
  c8:	75 08 15 00 25 65 05 07 19 00 29 65 81 00 c0        u...%e....)e...

000000d7 <DeviceDescriptor>:
  d7:	12 01 10 01 00 00 00 08 eb 03 42 20 01 00 01 02     ..........B ....
  e7:	00 01                                               ..

000000e9 <ConfigurationDescriptor>:
  e9:	09 02 29 00 01 01 00 c0 32 09 04 00 00 02 03 01     ..).....2.......
  f9:	01 00 09 21 11 01 00 01 22 3f 00 07 05 81 03 08     ...!...."?......
 109:	00 01 07 05 02 03 08 00 01                          .........

00000112 <LanguageString>:
 112:	04 03 09 04                                         ....

00000116 <ManufacturerString>:
 116:	18 03 44 00 65 00 61 00 6e 00 20 00 43 00 61 00     ..D.e.a.n. .C.a.
 126:	6d 00 65 00 72 00 61 00 00 00                       m.e.r.a...

00000130 <ProductString>:
 130:	26 03 4c 00 55 00 46 00 41 00 20 00 4b 00 65 00     &.L.U.F.A. .K.e.
 140:	79 00 62 00 6f 00 61 00 72 00 64 00 20 00 44 00     y.b.o.a.r.d. .D.
 150:	65 00 6d 00 6f 00 00 00                             e.m.o...

00000158 <__ctors_end>:
 158:	11 24       	eor	r1, r1
 15a:	1f be       	out	0x3f, r1	; 63
 15c:	cf ef       	ldi	r28, 0xFF	; 255
 15e:	d0 e2       	ldi	r29, 0x20	; 32
 160:	de bf       	out	0x3e, r29	; 62
 162:	cd bf       	out	0x3d, r28	; 61

00000164 <__do_copy_data>:
 164:	11 e0       	ldi	r17, 0x01	; 1
 166:	a0 e0       	ldi	r26, 0x00	; 0
 168:	b1 e0       	ldi	r27, 0x01	; 1
 16a:	e2 ef       	ldi	r30, 0xF2	; 242
 16c:	fd e0       	ldi	r31, 0x0D	; 13
 16e:	00 e0       	ldi	r16, 0x00	; 0
 170:	0b bf       	out	0x3b, r16	; 59
 172:	02 c0       	rjmp	.+4      	; 0x178 <__do_copy_data+0x14>
 174:	07 90       	elpm	r0, Z+
 176:	0d 92       	st	X+, r0
 178:	a4 30       	cpi	r26, 0x04	; 4
 17a:	b1 07       	cpc	r27, r17
 17c:	d9 f7       	brne	.-10     	; 0x174 <__do_copy_data+0x10>

0000017e <__do_clear_bss>:
 17e:	11 e0       	ldi	r17, 0x01	; 1
 180:	a4 e0       	ldi	r26, 0x04	; 4
 182:	b1 e0       	ldi	r27, 0x01	; 1
 184:	01 c0       	rjmp	.+2      	; 0x188 <.do_clear_bss_start>

00000186 <.do_clear_bss_loop>:
 186:	1d 92       	st	X+, r1

00000188 <.do_clear_bss_start>:
 188:	ab 31       	cpi	r26, 0x1B	; 27
 18a:	b1 07       	cpc	r27, r17
 18c:	e1 f7       	brne	.-8      	; 0x186 <.do_clear_bss_loop>
 18e:	df d1       	rcall	.+958    	; 0x54e <main>
 190:	2e c6       	rjmp	.+3164   	; 0xdee <_exit>

00000192 <__bad_interrupt>:
 192:	36 cf       	rjmp	.-404    	; 0x0 <__vectors>

00000194 <EVENT_USB_Device_Connect>:
				PORTD &= ~LEDMask;
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
			{
				PORTD = ((PORTD & ~LEDS_ALL_LEDS) | LEDMask);
 194:	8b b1       	in	r24, 0x0b	; 11
 196:	8f 70       	andi	r24, 0x0F	; 15
 198:	80 6a       	ori	r24, 0xA0	; 160
 19a:	8b b9       	out	0x0b, r24	; 11
{
	/* Indicate USB enumerating */
	LEDs_SetAllLEDs(LEDMASK_USB_ENUMERATING);

	/* Default to report protocol on connect */
	UsingReportProtocol = true;
 19c:	81 e0       	ldi	r24, 0x01	; 1
 19e:	80 93 00 01 	sts	0x0100, r24
}
 1a2:	08 95       	ret

000001a4 <EVENT_USB_Device_Disconnect>:
 1a4:	8b b1       	in	r24, 0x0b	; 11
 1a6:	8f 70       	andi	r24, 0x0F	; 15
 1a8:	80 61       	ori	r24, 0x10	; 16
 1aa:	8b b9       	out	0x0b, r24	; 11
 */
void EVENT_USB_Device_Disconnect(void)
{
	/* Indicate USB not ready */
	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
}
 1ac:	08 95       	ret

000001ae <EVENT_USB_Device_StartOfFrame>:

/** Event handler for the USB device Start Of Frame event. */
void EVENT_USB_Device_StartOfFrame(void)
{
	/* One millisecond has elapsed, decrement the idle time remaining counter if it has not already elapsed */
	if (IdleMSRemaining)
 1ae:	80 91 04 01 	lds	r24, 0x0104
 1b2:	90 91 05 01 	lds	r25, 0x0105
 1b6:	00 97       	sbiw	r24, 0x00	; 0
 1b8:	29 f0       	breq	.+10     	; 0x1c4 <EVENT_USB_Device_StartOfFrame+0x16>
	  IdleMSRemaining--;
 1ba:	01 97       	sbiw	r24, 0x01	; 1
 1bc:	90 93 05 01 	sts	0x0105, r25
 1c0:	80 93 04 01 	sts	0x0104, r24
 1c4:	08 95       	ret

000001c6 <ProcessLEDReport>:
 */
void ProcessLEDReport(const uint8_t LEDReport)
{
	uint8_t LEDMask = LEDS_LED2;

	if (LEDReport & HID_KEYBOARD_LED_NUMLOCK)
 1c6:	80 fd       	sbrc	r24, 0
 1c8:	02 c0       	rjmp	.+4      	; 0x1ce <ProcessLEDReport+0x8>
 1ca:	20 e2       	ldi	r18, 0x20	; 32
 1cc:	01 c0       	rjmp	.+2      	; 0x1d0 <ProcessLEDReport+0xa>
 1ce:	20 e3       	ldi	r18, 0x30	; 48
	  LEDMask |= LEDS_LED1;

	if (LEDReport & HID_KEYBOARD_LED_CAPSLOCK)
 1d0:	81 fd       	sbrc	r24, 1
	  LEDMask |= LEDS_LED3;
 1d2:	20 68       	ori	r18, 0x80	; 128

	if (LEDReport & HID_KEYBOARD_LED_SCROLLLOCK)
 1d4:	82 fd       	sbrc	r24, 2
	  LEDMask |= LEDS_LED4;
 1d6:	20 64       	ori	r18, 0x40	; 64
 1d8:	8b b1       	in	r24, 0x0b	; 11
 1da:	8f 70       	andi	r24, 0x0F	; 15
 1dc:	28 2b       	or	r18, r24
 1de:	2b b9       	out	0x0b, r18	; 11

	/* Set the status LEDs to the current Keyboard LED status */
	LEDs_SetAllLEDs(LEDMask);
}
 1e0:	08 95       	ret

000001e2 <ReceiveNextReport>:
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 1e2:	82 e0       	ldi	r24, 0x02	; 2
 1e4:	80 93 e9 00 	sts	0x00E9, r24
			 *  \return Boolean true if current endpoint is has received an OUT packet, false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 1e8:	80 91 e8 00 	lds	r24, 0x00E8
{
	/* Select the Keyboard LED Report Endpoint */
	Endpoint_SelectEndpoint(KEYBOARD_OUT_EPNUM);

	/* Check if Keyboard LED Endpoint contains a packet */
	if (Endpoint_IsOUTReceived())
 1ec:	82 ff       	sbrs	r24, 2
 1ee:	0c c0       	rjmp	.+24     	; 0x208 <ReceiveNextReport+0x26>
			 *  \return Boolean true if the currently selected endpoint may be read from or written to, depending on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
 1f0:	80 91 e8 00 	lds	r24, 0x00E8
	{
		/* Check to see if the packet contains data */
		if (Endpoint_IsReadWriteAllowed())
 1f4:	85 ff       	sbrs	r24, 5
 1f6:	03 c0       	rjmp	.+6      	; 0x1fe <ReceiveNextReport+0x1c>
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_Byte(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_Byte(void)
			{
				return UEDATX;
 1f8:	80 91 f1 00 	lds	r24, 0x00F1
		{
			/* Read in the LED report from the host */
			uint8_t LEDReport = Endpoint_Read_Byte();

			/* Process the read LED report from the host */
			ProcessLEDReport(LEDReport);
 1fc:	e4 df       	rcall	.-56     	; 0x1c6 <ProcessLEDReport>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 1fe:	80 91 e8 00 	lds	r24, 0x00E8
 202:	8b 77       	andi	r24, 0x7B	; 123
 204:	80 93 e8 00 	sts	0x00E8, r24
 208:	08 95       	ret

0000020a <CreateKeyboardReport>:
/** Fills the given HID report data structure with the next HID report to send to the host.
 *
 *  \param[out] ReportData  Pointer to a HID report data structure to be filled
 */
void CreateKeyboardReport(USB_KeyboardReport_Data_t* const ReportData)
{
 20a:	dc 01       	movw	r26, r24
			}

			static inline uint8_t Joystick_GetStatus(void) ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t Joystick_GetStatus(void)
			{
				return (((uint8_t)~PINB & JOY_BMASK) | (((uint8_t)~PINE & JOY_EMASK) >> 1));
 20c:	23 b1       	in	r18, 0x03	; 3
 20e:	8c b1       	in	r24, 0x0c	; 12
 210:	80 95       	com	r24
 212:	90 e0       	ldi	r25, 0x00	; 0
 214:	80 73       	andi	r24, 0x30	; 48
 216:	90 70       	andi	r25, 0x00	; 0
 218:	95 95       	asr	r25
 21a:	87 95       	ror	r24
 21c:	20 95       	com	r18
 21e:	20 7e       	andi	r18, 0xE0	; 224
 220:	28 2b       	or	r18, r24
			}

			static inline uint8_t Buttons_GetStatus(void) ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t Buttons_GetStatus(void)
			{
				return ((PINE & BUTTONS_BUTTON1) ^ BUTTONS_BUTTON1);
 222:	3c b1       	in	r19, 0x0c	; 12
	uint8_t ButtonStatus_LCL  = Buttons_GetStatus();

	uint8_t UsedKeyCodes      = 0;

	/* Clear the report contents */
	memset(ReportData, 0, sizeof(USB_KeyboardReport_Data_t));
 224:	88 e0       	ldi	r24, 0x08	; 8
 226:	fd 01       	movw	r30, r26
 228:	11 92       	st	Z+, r1
 22a:	8a 95       	dec	r24
 22c:	e9 f7       	brne	.-6      	; 0x228 <CreateKeyboardReport+0x1e>

	/* Make sent key uppercase by indicating that the left shift key is pressed */
	ReportData->Modifier = HID_KEYBOARD_MODIFER_LEFTSHIFT;
 22e:	82 e0       	ldi	r24, 0x02	; 2
 230:	8c 93       	st	X, r24

	if (JoyStatus_LCL & JOY_UP)
 232:	27 ff       	sbrs	r18, 7
 234:	02 c0       	rjmp	.+4      	; 0x23a <CreateKeyboardReport+0x30>
	  ReportData->KeyCode[UsedKeyCodes++] = HID_KEYBOARD_SC_A;
 236:	84 e0       	ldi	r24, 0x04	; 4
 238:	05 c0       	rjmp	.+10     	; 0x244 <CreateKeyboardReport+0x3a>
	else if (JoyStatus_LCL & JOY_DOWN)
 23a:	24 fd       	sbrc	r18, 4
 23c:	02 c0       	rjmp	.+4      	; 0x242 <CreateKeyboardReport+0x38>
 23e:	90 e0       	ldi	r25, 0x00	; 0
 240:	05 c0       	rjmp	.+10     	; 0x24c <CreateKeyboardReport+0x42>
	  ReportData->KeyCode[UsedKeyCodes++] = HID_KEYBOARD_SC_B;
 242:	85 e0       	ldi	r24, 0x05	; 5
 244:	12 96       	adiw	r26, 0x02	; 2
 246:	8c 93       	st	X, r24
 248:	12 97       	sbiw	r26, 0x02	; 2
 24a:	91 e0       	ldi	r25, 0x01	; 1

	if (JoyStatus_LCL & JOY_LEFT)
 24c:	26 ff       	sbrs	r18, 6
 24e:	05 c0       	rjmp	.+10     	; 0x25a <CreateKeyboardReport+0x50>
	  ReportData->KeyCode[UsedKeyCodes++] = HID_KEYBOARD_SC_C;
 250:	fd 01       	movw	r30, r26
 252:	e9 0f       	add	r30, r25
 254:	f1 1d       	adc	r31, r1
 256:	86 e0       	ldi	r24, 0x06	; 6
 258:	06 c0       	rjmp	.+12     	; 0x266 <CreateKeyboardReport+0x5c>
	else if (JoyStatus_LCL & JOY_RIGHT)
 25a:	23 ff       	sbrs	r18, 3
 25c:	06 c0       	rjmp	.+12     	; 0x26a <CreateKeyboardReport+0x60>
	  ReportData->KeyCode[UsedKeyCodes++] = HID_KEYBOARD_SC_D;
 25e:	fd 01       	movw	r30, r26
 260:	e9 0f       	add	r30, r25
 262:	f1 1d       	adc	r31, r1
 264:	84 e0       	ldi	r24, 0x04	; 4
 266:	82 83       	std	Z+2, r24	; 0x02
 268:	9f 5f       	subi	r25, 0xFF	; 255

	if (JoyStatus_LCL & JOY_PRESS)
 26a:	25 ff       	sbrs	r18, 5
 26c:	06 c0       	rjmp	.+12     	; 0x27a <CreateKeyboardReport+0x70>
	  ReportData->KeyCode[UsedKeyCodes++] = HID_KEYBOARD_SC_E;
 26e:	fd 01       	movw	r30, r26
 270:	e9 0f       	add	r30, r25
 272:	f1 1d       	adc	r31, r1
 274:	88 e0       	ldi	r24, 0x08	; 8
 276:	82 83       	std	Z+2, r24	; 0x02
 278:	9f 5f       	subi	r25, 0xFF	; 255

	if (ButtonStatus_LCL & BUTTONS_BUTTON1)
 27a:	32 fd       	sbrc	r19, 2
 27c:	05 c0       	rjmp	.+10     	; 0x288 <CreateKeyboardReport+0x7e>
	  ReportData->KeyCode[UsedKeyCodes++] = HID_KEYBOARD_SC_F;
 27e:	a9 0f       	add	r26, r25
 280:	b1 1d       	adc	r27, r1
 282:	89 e0       	ldi	r24, 0x09	; 9
 284:	12 96       	adiw	r26, 0x02	; 2
 286:	8c 93       	st	X, r24
 288:	08 95       	ret

0000028a <SendNextReport>:
	LEDs_SetAllLEDs(LEDMask);
}

/** Sends the next HID report to the host, via the keyboard data endpoint. */
void SendNextReport(void)
{
 28a:	0f 93       	push	r16
 28c:	1f 93       	push	r17
 28e:	df 93       	push	r29
 290:	cf 93       	push	r28
 292:	cd b7       	in	r28, 0x3d	; 61
 294:	de b7       	in	r29, 0x3e	; 62
 296:	28 97       	sbiw	r28, 0x08	; 8
 298:	0f b6       	in	r0, 0x3f	; 63
 29a:	f8 94       	cli
 29c:	de bf       	out	0x3e, r29	; 62
 29e:	0f be       	out	0x3f, r0	; 63
 2a0:	cd bf       	out	0x3d, r28	; 61
	static USB_KeyboardReport_Data_t PrevKeyboardReportData;
	USB_KeyboardReport_Data_t        KeyboardReportData;
	bool                             SendReport = true;

	/* Create the next keyboard report for transmission to the host */
	CreateKeyboardReport(&KeyboardReportData);
 2a2:	8e 01       	movw	r16, r28
 2a4:	0f 5f       	subi	r16, 0xFF	; 255
 2a6:	1f 4f       	sbci	r17, 0xFF	; 255
 2a8:	c8 01       	movw	r24, r16
 2aa:	af df       	rcall	.-162    	; 0x20a <CreateKeyboardReport>

	/* Check to see if the report data has changed - if so a report MUST be sent */
	SendReport = (memcmp(&PrevKeyboardReportData, &KeyboardReportData, sizeof(USB_KeyboardReport_Data_t)) != 0);
 2ac:	86 e0       	ldi	r24, 0x06	; 6
 2ae:	91 e0       	ldi	r25, 0x01	; 1
 2b0:	b8 01       	movw	r22, r16
 2b2:	48 e0       	ldi	r20, 0x08	; 8
 2b4:	50 e0       	ldi	r21, 0x00	; 0
 2b6:	8e d5       	rcall	.+2844   	; 0xdd4 <memcmp>
 2b8:	40 e0       	ldi	r20, 0x00	; 0
 2ba:	00 97       	sbiw	r24, 0x00	; 0
 2bc:	09 f0       	breq	.+2      	; 0x2c0 <SendNextReport+0x36>
 2be:	41 e0       	ldi	r20, 0x01	; 1

	/* Check if the idle period is set and has elapsed */
	if (IdleCount && (!(IdleMSRemaining)))
 2c0:	20 91 01 01 	lds	r18, 0x0101
 2c4:	30 91 02 01 	lds	r19, 0x0102
 2c8:	21 15       	cp	r18, r1
 2ca:	31 05       	cpc	r19, r1
 2cc:	59 f0       	breq	.+22     	; 0x2e4 <SendNextReport+0x5a>
 2ce:	80 91 04 01 	lds	r24, 0x0104
 2d2:	90 91 05 01 	lds	r25, 0x0105
 2d6:	89 2b       	or	r24, r25
 2d8:	29 f4       	brne	.+10     	; 0x2e4 <SendNextReport+0x5a>
	{
		/* Reset the idle time remaining counter */
		IdleMSRemaining = IdleCount;
 2da:	30 93 05 01 	sts	0x0105, r19
 2de:	20 93 04 01 	sts	0x0104, r18
 2e2:	41 e0       	ldi	r20, 0x01	; 1
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 2e4:	81 e0       	ldi	r24, 0x01	; 1
 2e6:	80 93 e9 00 	sts	0x00E9, r24
			 *  \return Boolean true if the currently selected endpoint may be read from or written to, depending on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
 2ea:	80 91 e8 00 	lds	r24, 0x00E8

	/* Select the Keyboard Report Endpoint */
	Endpoint_SelectEndpoint(KEYBOARD_IN_EPNUM);

	/* Check if Keyboard Endpoint Ready for Read/Write and if we should send a new report */
	if (Endpoint_IsReadWriteAllowed() && SendReport)
 2ee:	85 ff       	sbrs	r24, 5
 2f0:	15 c0       	rjmp	.+42     	; 0x31c <SendNextReport+0x92>
 2f2:	44 23       	and	r20, r20
 2f4:	99 f0       	breq	.+38     	; 0x31c <SendNextReport+0x92>
	{
		/* Save the current report data for later comparison to check for changes */
		PrevKeyboardReportData = KeyboardReportData;
 2f6:	a6 e0       	ldi	r26, 0x06	; 6
 2f8:	b1 e0       	ldi	r27, 0x01	; 1
 2fa:	fe 01       	movw	r30, r28
 2fc:	31 96       	adiw	r30, 0x01	; 1
 2fe:	88 e0       	ldi	r24, 0x08	; 8
 300:	01 90       	ld	r0, Z+
 302:	0d 92       	st	X+, r0
 304:	81 50       	subi	r24, 0x01	; 1
 306:	e1 f7       	brne	.-8      	; 0x300 <SendNextReport+0x76>

		/* Write Keyboard Report Data */
		Endpoint_Write_Stream_LE(&KeyboardReportData, sizeof(KeyboardReportData));
 308:	ce 01       	movw	r24, r28
 30a:	01 96       	adiw	r24, 0x01	; 1
 30c:	68 e0       	ldi	r22, 0x08	; 8
 30e:	70 e0       	ldi	r23, 0x00	; 0
 310:	21 d5       	rcall	.+2626   	; 0xd54 <Endpoint_Write_Stream_LE>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 312:	80 91 e8 00 	lds	r24, 0x00E8
 316:	8e 77       	andi	r24, 0x7E	; 126
 318:	80 93 e8 00 	sts	0x00E8, r24

		/* Finalize the stream transfer to send the last packet */
		Endpoint_ClearIN();
	}
}
 31c:	28 96       	adiw	r28, 0x08	; 8
 31e:	0f b6       	in	r0, 0x3f	; 63
 320:	f8 94       	cli
 322:	de bf       	out	0x3e, r29	; 62
 324:	0f be       	out	0x3f, r0	; 63
 326:	cd bf       	out	0x3d, r28	; 61
 328:	cf 91       	pop	r28
 32a:	df 91       	pop	r29
 32c:	1f 91       	pop	r17
 32e:	0f 91       	pop	r16
 330:	08 95       	ret

00000332 <HID_Task>:

/** Function to manage HID report generation and transmission to the host, when in report mode. */
void HID_Task(void)
{
	/* Device must be connected and configured for the task to run */
	if (USB_DeviceState != DEVICE_STATE_Configured)
 332:	80 91 12 01 	lds	r24, 0x0112
 336:	84 30       	cpi	r24, 0x04	; 4
 338:	11 f4       	brne	.+4      	; 0x33e <HID_Task+0xc>
	  return;

	/* Send the next keypress report to the host */
	SendNextReport();
 33a:	a7 df       	rcall	.-178    	; 0x28a <SendNextReport>

	/* Process the LED report sent from the host */
	ReceiveNextReport();
 33c:	52 cf       	rjmp	.-348    	; 0x1e2 <ReceiveNextReport>
 33e:	08 95       	ret

00000340 <EVENT_USB_Device_ControlRequest>:
/** Event handler for the USB_ControlRequest event. This is used to catch and process control requests sent to
 *  the device from the USB host before passing along unhandled control requests to the library for processing
 *  internally.
 */
void EVENT_USB_Device_ControlRequest(void)
{
 340:	0f 93       	push	r16
 342:	1f 93       	push	r17
 344:	df 93       	push	r29
 346:	cf 93       	push	r28
 348:	cd b7       	in	r28, 0x3d	; 61
 34a:	de b7       	in	r29, 0x3e	; 62
 34c:	28 97       	sbiw	r28, 0x08	; 8
 34e:	0f b6       	in	r0, 0x3f	; 63
 350:	f8 94       	cli
 352:	de bf       	out	0x3e, r29	; 62
 354:	0f be       	out	0x3f, r0	; 63
 356:	cd bf       	out	0x3d, r28	; 61
	/* Handle HID Class specific requests */
	switch (USB_ControlRequest.bRequest)
 358:	80 91 14 01 	lds	r24, 0x0114
 35c:	83 30       	cpi	r24, 0x03	; 3
 35e:	09 f4       	brne	.+2      	; 0x362 <EVENT_USB_Device_ControlRequest+0x22>
 360:	4a c0       	rjmp	.+148    	; 0x3f6 <EVENT_USB_Device_ControlRequest+0xb6>
 362:	84 30       	cpi	r24, 0x04	; 4
 364:	30 f4       	brcc	.+12     	; 0x372 <EVENT_USB_Device_ControlRequest+0x32>
 366:	81 30       	cpi	r24, 0x01	; 1
 368:	71 f0       	breq	.+28     	; 0x386 <EVENT_USB_Device_ControlRequest+0x46>
 36a:	82 30       	cpi	r24, 0x02	; 2
 36c:	09 f0       	breq	.+2      	; 0x370 <EVENT_USB_Device_ControlRequest+0x30>
 36e:	99 c0       	rjmp	.+306    	; 0x4a2 <EVENT_USB_Device_ControlRequest+0x162>
 370:	7f c0       	rjmp	.+254    	; 0x470 <EVENT_USB_Device_ControlRequest+0x130>
 372:	8a 30       	cpi	r24, 0x0A	; 10
 374:	09 f4       	brne	.+2      	; 0x378 <EVENT_USB_Device_ControlRequest+0x38>
 376:	63 c0       	rjmp	.+198    	; 0x43e <EVENT_USB_Device_ControlRequest+0xfe>
 378:	8b 30       	cpi	r24, 0x0B	; 11
 37a:	09 f4       	brne	.+2      	; 0x37e <EVENT_USB_Device_ControlRequest+0x3e>
 37c:	49 c0       	rjmp	.+146    	; 0x410 <EVENT_USB_Device_ControlRequest+0xd0>
 37e:	89 30       	cpi	r24, 0x09	; 9
 380:	09 f0       	breq	.+2      	; 0x384 <EVENT_USB_Device_ControlRequest+0x44>
 382:	8f c0       	rjmp	.+286    	; 0x4a2 <EVENT_USB_Device_ControlRequest+0x162>
 384:	19 c0       	rjmp	.+50     	; 0x3b8 <EVENT_USB_Device_ControlRequest+0x78>
	{
		case HID_REQ_GetReport:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
 386:	80 91 13 01 	lds	r24, 0x0113
 38a:	81 3a       	cpi	r24, 0xA1	; 161
 38c:	09 f0       	breq	.+2      	; 0x390 <EVENT_USB_Device_ControlRequest+0x50>
 38e:	89 c0       	rjmp	.+274    	; 0x4a2 <EVENT_USB_Device_ControlRequest+0x162>
			{
				USB_KeyboardReport_Data_t KeyboardReportData;

				/* Create the next keyboard report for transmission to the host */
				CreateKeyboardReport(&KeyboardReportData);
 390:	8e 01       	movw	r16, r28
 392:	0f 5f       	subi	r16, 0xFF	; 255
 394:	1f 4f       	sbci	r17, 0xFF	; 255
 396:	c8 01       	movw	r24, r16
 398:	38 df       	rcall	.-400    	; 0x20a <CreateKeyboardReport>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 39a:	80 91 e8 00 	lds	r24, 0x00E8
 39e:	87 7f       	andi	r24, 0xF7	; 247
 3a0:	80 93 e8 00 	sts	0x00E8, r24

				Endpoint_ClearSETUP();

				/* Write the report data to the control endpoint */
				Endpoint_Write_Control_Stream_LE(&KeyboardReportData, sizeof(KeyboardReportData));
 3a4:	c8 01       	movw	r24, r16
 3a6:	68 e0       	ldi	r22, 0x08	; 8
 3a8:	70 e0       	ldi	r23, 0x00	; 0
 3aa:	16 d4       	rcall	.+2092   	; 0xbd8 <Endpoint_Write_Control_Stream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 3ac:	80 91 e8 00 	lds	r24, 0x00E8
 3b0:	8b 77       	andi	r24, 0x7B	; 123
 3b2:	80 93 e8 00 	sts	0x00E8, r24
 3b6:	75 c0       	rjmp	.+234    	; 0x4a2 <EVENT_USB_Device_ControlRequest+0x162>
				Endpoint_ClearOUT();
			}

			break;
		case HID_REQ_SetReport:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
 3b8:	80 91 13 01 	lds	r24, 0x0113
 3bc:	81 32       	cpi	r24, 0x21	; 33
 3be:	09 f0       	breq	.+2      	; 0x3c2 <EVENT_USB_Device_ControlRequest+0x82>
 3c0:	70 c0       	rjmp	.+224    	; 0x4a2 <EVENT_USB_Device_ControlRequest+0x162>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 3c2:	80 91 e8 00 	lds	r24, 0x00E8
 3c6:	87 7f       	andi	r24, 0xF7	; 247
 3c8:	80 93 e8 00 	sts	0x00E8, r24
 3cc:	05 c0       	rjmp	.+10     	; 0x3d8 <EVENT_USB_Device_ControlRequest+0x98>
				Endpoint_ClearSETUP();

				/* Wait until the LED report has been sent by the host */
				while (!(Endpoint_IsOUTReceived()))
				{
					if (USB_DeviceState == DEVICE_STATE_Unattached)
 3ce:	80 91 12 01 	lds	r24, 0x0112
 3d2:	88 23       	and	r24, r24
 3d4:	09 f4       	brne	.+2      	; 0x3d8 <EVENT_USB_Device_ControlRequest+0x98>
 3d6:	65 c0       	rjmp	.+202    	; 0x4a2 <EVENT_USB_Device_ControlRequest+0x162>
			 *  \return Boolean true if current endpoint is has received an OUT packet, false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 3d8:	80 91 e8 00 	lds	r24, 0x00E8
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
			{
				Endpoint_ClearSETUP();

				/* Wait until the LED report has been sent by the host */
				while (!(Endpoint_IsOUTReceived()))
 3dc:	82 ff       	sbrs	r24, 2
 3de:	f7 cf       	rjmp	.-18     	; 0x3ce <EVENT_USB_Device_ControlRequest+0x8e>
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_Byte(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_Byte(void)
			{
				return UEDATX;
 3e0:	10 91 f1 00 	lds	r17, 0x00F1
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 3e4:	80 91 e8 00 	lds	r24, 0x00E8
 3e8:	8b 77       	andi	r24, 0x7B	; 123
 3ea:	80 93 e8 00 	sts	0x00E8, r24

				/* Read in the LED report from the host */
				uint8_t LEDStatus = Endpoint_Read_Byte();

				Endpoint_ClearOUT();
				Endpoint_ClearStatusStage();
 3ee:	0b d1       	rcall	.+534    	; 0x606 <Endpoint_ClearStatusStage>

				/* Process the incoming LED report */
				ProcessLEDReport(LEDStatus);
 3f0:	81 2f       	mov	r24, r17
 3f2:	e9 de       	rcall	.-558    	; 0x1c6 <ProcessLEDReport>
 3f4:	56 c0       	rjmp	.+172    	; 0x4a2 <EVENT_USB_Device_ControlRequest+0x162>
			}

			break;
		case HID_REQ_GetProtocol:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
 3f6:	80 91 13 01 	lds	r24, 0x0113
 3fa:	81 3a       	cpi	r24, 0xA1	; 161
 3fc:	09 f0       	breq	.+2      	; 0x400 <EVENT_USB_Device_ControlRequest+0xc0>
 3fe:	51 c0       	rjmp	.+162    	; 0x4a2 <EVENT_USB_Device_ControlRequest+0x162>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 400:	80 91 e8 00 	lds	r24, 0x00E8
 404:	87 7f       	andi	r24, 0xF7	; 247
 406:	80 93 e8 00 	sts	0x00E8, r24
			{
				Endpoint_ClearSETUP();

				/* Write the current protocol flag to the host */
				Endpoint_Write_Byte(UsingReportProtocol);
 40a:	80 91 00 01 	lds	r24, 0x0100
 40e:	41 c0       	rjmp	.+130    	; 0x492 <EVENT_USB_Device_ControlRequest+0x152>
				Endpoint_ClearStatusStage();
			}

			break;
		case HID_REQ_SetProtocol:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
 410:	80 91 13 01 	lds	r24, 0x0113
 414:	81 32       	cpi	r24, 0x21	; 33
 416:	09 f0       	breq	.+2      	; 0x41a <EVENT_USB_Device_ControlRequest+0xda>
 418:	44 c0       	rjmp	.+136    	; 0x4a2 <EVENT_USB_Device_ControlRequest+0x162>
 41a:	80 91 e8 00 	lds	r24, 0x00E8
 41e:	87 7f       	andi	r24, 0xF7	; 247
 420:	80 93 e8 00 	sts	0x00E8, r24
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
 424:	f0 d0       	rcall	.+480    	; 0x606 <Endpoint_ClearStatusStage>

				/* Set or clear the flag depending on what the host indicates that the current Protocol should be */
				UsingReportProtocol = (USB_ControlRequest.wValue != 0);
 426:	10 92 00 01 	sts	0x0100, r1
 42a:	80 91 15 01 	lds	r24, 0x0115
 42e:	90 91 16 01 	lds	r25, 0x0116
 432:	89 2b       	or	r24, r25
 434:	b1 f1       	breq	.+108    	; 0x4a2 <EVENT_USB_Device_ControlRequest+0x162>
 436:	81 e0       	ldi	r24, 0x01	; 1
 438:	80 93 00 01 	sts	0x0100, r24
 43c:	32 c0       	rjmp	.+100    	; 0x4a2 <EVENT_USB_Device_ControlRequest+0x162>
			}

			break;
		case HID_REQ_SetIdle:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
 43e:	80 91 13 01 	lds	r24, 0x0113
 442:	81 32       	cpi	r24, 0x21	; 33
 444:	71 f5       	brne	.+92     	; 0x4a2 <EVENT_USB_Device_ControlRequest+0x162>
 446:	80 91 e8 00 	lds	r24, 0x00E8
 44a:	87 7f       	andi	r24, 0xF7	; 247
 44c:	80 93 e8 00 	sts	0x00E8, r24
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
 450:	da d0       	rcall	.+436    	; 0x606 <Endpoint_ClearStatusStage>

				/* Get idle period in MSB, IdleCount must be multiplied by 4 to get number of milliseconds */
				IdleCount = ((USB_ControlRequest.wValue & 0xFF00) >> 6);
 452:	80 91 15 01 	lds	r24, 0x0115
 456:	90 91 16 01 	lds	r25, 0x0116
 45a:	80 70       	andi	r24, 0x00	; 0
 45c:	56 e0       	ldi	r21, 0x06	; 6
 45e:	96 95       	lsr	r25
 460:	87 95       	ror	r24
 462:	5a 95       	dec	r21
 464:	e1 f7       	brne	.-8      	; 0x45e <EVENT_USB_Device_ControlRequest+0x11e>
 466:	90 93 02 01 	sts	0x0102, r25
 46a:	80 93 01 01 	sts	0x0101, r24
 46e:	19 c0       	rjmp	.+50     	; 0x4a2 <EVENT_USB_Device_ControlRequest+0x162>
			}

			break;
		case HID_REQ_GetIdle:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
 470:	80 91 13 01 	lds	r24, 0x0113
 474:	81 3a       	cpi	r24, 0xA1	; 161
 476:	a9 f4       	brne	.+42     	; 0x4a2 <EVENT_USB_Device_ControlRequest+0x162>
 478:	80 91 e8 00 	lds	r24, 0x00E8
 47c:	87 7f       	andi	r24, 0xF7	; 247
 47e:	80 93 e8 00 	sts	0x00E8, r24
			{
				Endpoint_ClearSETUP();

				/* Write the current idle duration to the host, must be divided by 4 before sent to host */
				Endpoint_Write_Byte(IdleCount >> 2);
 482:	80 91 01 01 	lds	r24, 0x0101
 486:	90 91 02 01 	lds	r25, 0x0102
 48a:	96 95       	lsr	r25
 48c:	87 95       	ror	r24
 48e:	96 95       	lsr	r25
 490:	87 95       	ror	r24
			 *  \param[in] Byte  Next byte to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_Byte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_Byte(const uint8_t Byte)
			{
				UEDATX = Byte;
 492:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 496:	80 91 e8 00 	lds	r24, 0x00E8
 49a:	8e 77       	andi	r24, 0x7E	; 126
 49c:	80 93 e8 00 	sts	0x00E8, r24

				Endpoint_ClearIN();
				Endpoint_ClearStatusStage();
 4a0:	b2 d0       	rcall	.+356    	; 0x606 <Endpoint_ClearStatusStage>
			}

			break;
	}
}
 4a2:	28 96       	adiw	r28, 0x08	; 8
 4a4:	0f b6       	in	r0, 0x3f	; 63
 4a6:	f8 94       	cli
 4a8:	de bf       	out	0x3e, r29	; 62
 4aa:	0f be       	out	0x3f, r0	; 63
 4ac:	cd bf       	out	0x3d, r28	; 61
 4ae:	cf 91       	pop	r28
 4b0:	df 91       	pop	r29
 4b2:	1f 91       	pop	r17
 4b4:	0f 91       	pop	r16
 4b6:	08 95       	ret

000004b8 <EVENT_USB_Device_ConfigurationChanged>:

/** Event handler for the USB_ConfigurationChanged event. This is fired when the host sets the current configuration
 *  of the USB device after enumeration, and configures the keyboard device endpoints.
 */
void EVENT_USB_Device_ConfigurationChanged(void)
{
 4b8:	0f 93       	push	r16
 4ba:	1f 93       	push	r17
			                                              const uint8_t Type,
			                                              const uint8_t Direction,
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				return Endpoint_ConfigureEndpoint_Prv(Number, (((Type) << EPTYPE0) | (Direction)),
 4bc:	81 e0       	ldi	r24, 0x01	; 1
 4be:	61 ec       	ldi	r22, 0xC1	; 193
 4c0:	42 e0       	ldi	r20, 0x02	; 2
 4c2:	8e d0       	rcall	.+284    	; 0x5e0 <Endpoint_ConfigureEndpoint_Prv>
 4c4:	08 2f       	mov	r16, r24
				 *  \note Not available when the NO_SOF_EVENTS compile time token is defined.
				 */
				static inline void USB_Device_EnableSOFEvents(void) ATTR_ALWAYS_INLINE;
				static inline void USB_Device_EnableSOFEvents(void)
				{
					USB_INT_Enable(USB_INT_SOFI);
 4c6:	82 e0       	ldi	r24, 0x02	; 2
 4c8:	60 ec       	ldi	r22, 0xC0	; 192
 4ca:	42 e0       	ldi	r20, 0x02	; 2
 4cc:	89 d0       	rcall	.+274    	; 0x5e0 <Endpoint_ConfigureEndpoint_Prv>
 4ce:	90 91 e2 00 	lds	r25, 0x00E2
 4d2:	94 60       	ori	r25, 0x04	; 4
 4d4:	90 93 e2 00 	sts	0x00E2, r25

	/* Turn on Start-of-Frame events for tracking HID report period exiry */
	USB_Device_EnableSOFEvents();

	/* Indicate endpoint configuration success or failure */
	LEDs_SetAllLEDs(ConfigSuccess ? LEDMASK_USB_READY : LEDMASK_USB_ERROR);
 4d8:	10 e0       	ldi	r17, 0x00	; 0
 4da:	90 e0       	ldi	r25, 0x00	; 0
 4dc:	08 23       	and	r16, r24
 4de:	19 23       	and	r17, r25
 4e0:	00 ff       	sbrs	r16, 0
 4e2:	02 c0       	rjmp	.+4      	; 0x4e8 <EVENT_USB_Device_ConfigurationChanged+0x30>
 4e4:	90 e6       	ldi	r25, 0x60	; 96
 4e6:	01 c0       	rjmp	.+2      	; 0x4ea <EVENT_USB_Device_ConfigurationChanged+0x32>
 4e8:	90 e9       	ldi	r25, 0x90	; 144
 4ea:	8b b1       	in	r24, 0x0b	; 11
 4ec:	8f 70       	andi	r24, 0x0F	; 15
 4ee:	98 2b       	or	r25, r24
 4f0:	9b b9       	out	0x0b, r25	; 11
}
 4f2:	1f 91       	pop	r17
 4f4:	0f 91       	pop	r16
 4f6:	08 95       	ret

000004f8 <SetupHardware>:

/** Configures the board hardware and chip peripherals for the demo's functionality. */
void SetupHardware(void)
{
	/* Disable watchdog if enabled by bootloader/fuses */
	MCUSR &= ~(1 << WDRF);
 4f8:	84 b7       	in	r24, 0x34	; 52
 4fa:	87 7f       	andi	r24, 0xF7	; 247
 4fc:	84 bf       	out	0x34, r24	; 52
	wdt_disable();
 4fe:	88 e1       	ldi	r24, 0x18	; 24
 500:	0f b6       	in	r0, 0x3f	; 63
 502:	f8 94       	cli
 504:	80 93 60 00 	sts	0x0060, r24
 508:	10 92 60 00 	sts	0x0060, r1
 50c:	0f be       	out	0x3f, r0	; 63

	/* Disable clock division */
	clock_prescale_set(clock_div_1);
 50e:	80 e0       	ldi	r24, 0x00	; 0
 510:	90 e0       	ldi	r25, 0x00	; 0
 512:	20 e8       	ldi	r18, 0x80	; 128
 514:	0f b6       	in	r0, 0x3f	; 63
 516:	f8 94       	cli
 518:	20 93 61 00 	sts	0x0061, r18
 51c:	80 93 61 00 	sts	0x0061, r24
 520:	0f be       	out	0x3f, r0	; 63

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void Joystick_Init(void)
			{
				DDRB  &= ~(JOY_BMASK);
 522:	84 b1       	in	r24, 0x04	; 4
 524:	8f 71       	andi	r24, 0x1F	; 31
 526:	84 b9       	out	0x04, r24	; 4
				DDRE  &= ~(JOY_EMASK);
 528:	8d b1       	in	r24, 0x0d	; 13
 52a:	8f 7c       	andi	r24, 0xCF	; 207
 52c:	8d b9       	out	0x0d, r24	; 13

				PORTB |= JOY_BMASK;
 52e:	85 b1       	in	r24, 0x05	; 5
 530:	80 6e       	ori	r24, 0xE0	; 224
 532:	85 b9       	out	0x05, r24	; 5
				PORTE |= JOY_EMASK;
 534:	8e b1       	in	r24, 0x0e	; 14
 536:	80 63       	ori	r24, 0x30	; 48
 538:	8e b9       	out	0x0e, r24	; 14

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void LEDs_Init(void)
			{
				DDRD  |=  LEDS_ALL_LEDS;
 53a:	8a b1       	in	r24, 0x0a	; 10
 53c:	80 6f       	ori	r24, 0xF0	; 240
 53e:	8a b9       	out	0x0a, r24	; 10
				PORTD &= ~LEDS_ALL_LEDS;
 540:	8b b1       	in	r24, 0x0b	; 11
 542:	8f 70       	andi	r24, 0x0F	; 15
 544:	8b b9       	out	0x0b, r24	; 11

	/* Hardware Initialization */
	Joystick_Init();
	LEDs_Init();
	USB_Init();
 546:	ff d0       	rcall	.+510    	; 0x746 <USB_Init>

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void Buttons_Init(void)
			{
				DDRE  &= ~BUTTONS_BUTTON1;
 548:	6a 98       	cbi	0x0d, 2	; 13
				PORTE |=  BUTTONS_BUTTON1;
 54a:	72 9a       	sbi	0x0e, 2	; 14
	Buttons_Init();
}
 54c:	08 95       	ret

0000054e <main>:
/** Main program entry point. This routine configures the hardware required by the application, then
 *  enters a loop to run the application tasks in sequence.
 */
int main(void)
{
	SetupHardware();
 54e:	d4 df       	rcall	.-88     	; 0x4f8 <SetupHardware>
				PORTD &= ~LEDMask;
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
			{
				PORTD = ((PORTD & ~LEDS_ALL_LEDS) | LEDMask);
 550:	8b b1       	in	r24, 0x0b	; 11
 552:	8f 70       	andi	r24, 0x0F	; 15
 554:	80 61       	ori	r24, 0x10	; 16
 556:	8b b9       	out	0x0b, r24	; 11

	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
	sei();
 558:	78 94       	sei

	for (;;)
	{
		HID_Task();
 55a:	eb de       	rcall	.-554    	; 0x332 <HID_Task>
		USB_USBTask();
 55c:	28 d4       	rcall	.+2128   	; 0xdae <USB_USBTask>
 55e:	fd cf       	rjmp	.-6      	; 0x55a <main+0xc>

00000560 <CALLBACK_USB_GetDescriptor>:
 *  USB host.
 */
uint16_t CALLBACK_USB_GetDescriptor(const uint16_t wValue,
                                    const uint8_t wIndex,
                                    const void** const DescriptorAddress)
{
 560:	da 01       	movw	r26, r20
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
 562:	93 30       	cpi	r25, 0x03	; 3
 564:	b1 f0       	breq	.+44     	; 0x592 <CALLBACK_USB_GetDescriptor+0x32>
 566:	94 30       	cpi	r25, 0x04	; 4
 568:	28 f4       	brcc	.+10     	; 0x574 <CALLBACK_USB_GetDescriptor+0x14>
 56a:	91 30       	cpi	r25, 0x01	; 1
 56c:	41 f0       	breq	.+16     	; 0x57e <CALLBACK_USB_GetDescriptor+0x1e>
 56e:	92 30       	cpi	r25, 0x02	; 2
 570:	79 f5       	brne	.+94     	; 0x5d0 <CALLBACK_USB_GetDescriptor+0x70>
 572:	0a c0       	rjmp	.+20     	; 0x588 <CALLBACK_USB_GetDescriptor+0x28>
 574:	91 32       	cpi	r25, 0x21	; 33
 576:	11 f1       	breq	.+68     	; 0x5bc <CALLBACK_USB_GetDescriptor+0x5c>
 578:	92 32       	cpi	r25, 0x22	; 34
 57a:	51 f5       	brne	.+84     	; 0x5d0 <CALLBACK_USB_GetDescriptor+0x70>
 57c:	24 c0       	rjmp	.+72     	; 0x5c6 <CALLBACK_USB_GetDescriptor+0x66>
 57e:	e7 ed       	ldi	r30, 0xD7	; 215
 580:	f0 e0       	ldi	r31, 0x00	; 0
 582:	22 e1       	ldi	r18, 0x12	; 18
 584:	30 e0       	ldi	r19, 0x00	; 0
 586:	28 c0       	rjmp	.+80     	; 0x5d8 <CALLBACK_USB_GetDescriptor+0x78>
 588:	e9 ee       	ldi	r30, 0xE9	; 233
 58a:	f0 e0       	ldi	r31, 0x00	; 0
 58c:	29 e2       	ldi	r18, 0x29	; 41
 58e:	30 e0       	ldi	r19, 0x00	; 0
 590:	23 c0       	rjmp	.+70     	; 0x5d8 <CALLBACK_USB_GetDescriptor+0x78>
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
			Size    = sizeof(USB_Descriptor_Configuration_t);
			break;
		case DTYPE_String:
			switch (DescriptorNumber)
 592:	81 30       	cpi	r24, 0x01	; 1
 594:	49 f0       	breq	.+18     	; 0x5a8 <CALLBACK_USB_GetDescriptor+0x48>
 596:	81 30       	cpi	r24, 0x01	; 1
 598:	18 f0       	brcs	.+6      	; 0x5a0 <CALLBACK_USB_GetDescriptor+0x40>
 59a:	82 30       	cpi	r24, 0x02	; 2
 59c:	c9 f4       	brne	.+50     	; 0x5d0 <CALLBACK_USB_GetDescriptor+0x70>
 59e:	0a c0       	rjmp	.+20     	; 0x5b4 <CALLBACK_USB_GetDescriptor+0x54>
			{
				case 0x00:
					Address = &LanguageString;
					Size    = pgm_read_byte(&LanguageString.Header.Size);
 5a0:	e2 e1       	ldi	r30, 0x12	; 18
 5a2:	f1 e0       	ldi	r31, 0x01	; 1
 5a4:	84 91       	lpm	r24, Z+
 5a6:	03 c0       	rjmp	.+6      	; 0x5ae <CALLBACK_USB_GetDescriptor+0x4e>
					break;
				case 0x01:
					Address = &ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
 5a8:	e6 e1       	ldi	r30, 0x16	; 22
 5aa:	f1 e0       	ldi	r31, 0x01	; 1
 5ac:	84 91       	lpm	r24, Z+
 5ae:	28 2f       	mov	r18, r24
 5b0:	30 e0       	ldi	r19, 0x00	; 0
 5b2:	12 c0       	rjmp	.+36     	; 0x5d8 <CALLBACK_USB_GetDescriptor+0x78>
					break;
				case 0x02:
					Address = &ProductString;
					Size    = pgm_read_byte(&ProductString.Header.Size);
 5b4:	e0 e3       	ldi	r30, 0x30	; 48
 5b6:	f1 e0       	ldi	r31, 0x01	; 1
 5b8:	84 91       	lpm	r24, Z+
 5ba:	f9 cf       	rjmp	.-14     	; 0x5ae <CALLBACK_USB_GetDescriptor+0x4e>
 5bc:	eb ef       	ldi	r30, 0xFB	; 251
 5be:	f0 e0       	ldi	r31, 0x00	; 0
 5c0:	29 e0       	ldi	r18, 0x09	; 9
 5c2:	30 e0       	ldi	r19, 0x00	; 0
 5c4:	09 c0       	rjmp	.+18     	; 0x5d8 <CALLBACK_USB_GetDescriptor+0x78>

			break;
		case HID_DTYPE_HID:
			Address = &ConfigurationDescriptor.HID_KeyboardHID;
			Size    = sizeof(USB_HID_Descriptor_HID_t);
			break;
 5c6:	e8 e9       	ldi	r30, 0x98	; 152
 5c8:	f0 e0       	ldi	r31, 0x00	; 0
 5ca:	2f e3       	ldi	r18, 0x3F	; 63
 5cc:	30 e0       	ldi	r19, 0x00	; 0
 5ce:	04 c0       	rjmp	.+8      	; 0x5d8 <CALLBACK_USB_GetDescriptor+0x78>
 5d0:	e0 e0       	ldi	r30, 0x00	; 0
 5d2:	f0 e0       	ldi	r31, 0x00	; 0
 5d4:	20 e0       	ldi	r18, 0x00	; 0
 5d6:	30 e0       	ldi	r19, 0x00	; 0
			Address = &KeyboardReport;
			Size    = sizeof(KeyboardReport);
			break;
	}

	*DescriptorAddress = Address;
 5d8:	ed 93       	st	X+, r30
 5da:	fc 93       	st	X, r31
	return Size;
}
 5dc:	c9 01       	movw	r24, r18
 5de:	08 95       	ret

000005e0 <Endpoint_ConfigureEndpoint_Prv>:
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 5e0:	80 93 e9 00 	sts	0x00E9, r24
			 *  \note Endpoints must first be configured properly via \ref Endpoint_ConfigureEndpoint().
			 */
			static inline void Endpoint_EnableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_EnableEndpoint(void)
			{
				UECONX |= (1 << EPEN);
 5e4:	80 91 eb 00 	lds	r24, 0x00EB
 5e8:	81 60       	ori	r24, 0x01	; 1
 5ea:	80 93 eb 00 	sts	0x00EB, r24
                                    const uint8_t UECFG1XData)
{
	Endpoint_SelectEndpoint(Number);
	Endpoint_EnableEndpoint();

	UECFG1X = 0;
 5ee:	10 92 ed 00 	sts	0x00ED, r1
	UECFG0X = UECFG0XData;
 5f2:	60 93 ec 00 	sts	0x00EC, r22
	UECFG1X = UECFG1XData;
 5f6:	40 93 ed 00 	sts	0x00ED, r20
			 *  \return Boolean true if the currently selected endpoint has been configured, false otherwise.
			 */
			static inline bool Endpoint_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsConfigured(void)
			{
				return ((UESTA0X & (1 << CFGOK)) ? true : false);
 5fa:	80 91 ee 00 	lds	r24, 0x00EE

	return Endpoint_IsConfigured();
}
 5fe:	88 1f       	adc	r24, r24
 600:	88 27       	eor	r24, r24
 602:	88 1f       	adc	r24, r24
 604:	08 95       	ret

00000606 <Endpoint_ClearStatusStage>:
	}
}

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
 606:	80 91 13 01 	lds	r24, 0x0113
 60a:	88 23       	and	r24, r24
 60c:	9c f4       	brge	.+38     	; 0x634 <Endpoint_ClearStatusStage+0x2e>
 60e:	04 c0       	rjmp	.+8      	; 0x618 <Endpoint_ClearStatusStage+0x12>
	{
		while (!(Endpoint_IsOUTReceived()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
 610:	80 91 12 01 	lds	r24, 0x0112
 614:	88 23       	and	r24, r24
 616:	b9 f0       	breq	.+46     	; 0x646 <Endpoint_ClearStatusStage+0x40>
			 *  \return Boolean true if current endpoint is has received an OUT packet, false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 618:	80 91 e8 00 	lds	r24, 0x00E8

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
	{
		while (!(Endpoint_IsOUTReceived()))
 61c:	82 ff       	sbrs	r24, 2
 61e:	f8 cf       	rjmp	.-16     	; 0x610 <Endpoint_ClearStatusStage+0xa>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 620:	80 91 e8 00 	lds	r24, 0x00E8
 624:	8b 77       	andi	r24, 0x7B	; 123
 626:	80 93 e8 00 	sts	0x00E8, r24
 62a:	08 95       	ret
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
 62c:	80 91 12 01 	lds	r24, 0x0112
 630:	88 23       	and	r24, r24
 632:	49 f0       	breq	.+18     	; 0x646 <Endpoint_ClearStatusStage+0x40>
			 *  \return Boolean true if the current endpoint is ready for an IN packet, false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 634:	80 91 e8 00 	lds	r24, 0x00E8

		Endpoint_ClearOUT();
	}
	else
	{
		while (!(Endpoint_IsINReady()))
 638:	80 ff       	sbrs	r24, 0
 63a:	f8 cf       	rjmp	.-16     	; 0x62c <Endpoint_ClearStatusStage+0x26>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 63c:	80 91 e8 00 	lds	r24, 0x00E8
 640:	8e 77       	andi	r24, 0x7E	; 126
 642:	80 93 e8 00 	sts	0x00E8, r24
 646:	08 95       	ret

00000648 <Endpoint_WaitUntilReady>:
			/** Returns the current USB frame number, when in device mode. Every millisecond the USB bus is active (i.e. enumerated to a host)
			 *  the frame number is incremented by one.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
 648:	40 91 e4 00 	lds	r20, 0x00E4
 64c:	50 91 e5 00 	lds	r21, 0x00E5
 650:	24 e6       	ldi	r18, 0x64	; 100
			 *  \return The currently selected endpoint's direction, as a ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & ENDPOINT_DIR_IN);
 652:	80 91 ec 00 	lds	r24, 0x00EC

	uint16_t PreviousFrameNumber = USB_Device_GetFrameNumber();

	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
 656:	80 ff       	sbrs	r24, 0
 658:	05 c0       	rjmp	.+10     	; 0x664 <Endpoint_WaitUntilReady+0x1c>
			 *  \return Boolean true if the current endpoint is ready for an IN packet, false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 65a:	80 91 e8 00 	lds	r24, 0x00E8
		{
			if (Endpoint_IsINReady())
 65e:	80 ff       	sbrs	r24, 0
 660:	05 c0       	rjmp	.+10     	; 0x66c <Endpoint_WaitUntilReady+0x24>
 662:	22 c0       	rjmp	.+68     	; 0x6a8 <Endpoint_WaitUntilReady+0x60>
			 *  \return Boolean true if current endpoint is has received an OUT packet, false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 664:	80 91 e8 00 	lds	r24, 0x00E8
			  return ENDPOINT_READYWAIT_NoError;
		}
		else
		{
			if (Endpoint_IsOUTReceived())
 668:	82 fd       	sbrc	r24, 2
 66a:	1e c0       	rjmp	.+60     	; 0x6a8 <Endpoint_WaitUntilReady+0x60>
			  return ENDPOINT_READYWAIT_NoError;
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;
 66c:	80 91 12 01 	lds	r24, 0x0112

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
 670:	88 23       	and	r24, r24
 672:	11 f4       	brne	.+4      	; 0x678 <Endpoint_WaitUntilReady+0x30>
 674:	82 e0       	ldi	r24, 0x02	; 2
 676:	08 95       	ret
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
 678:	85 30       	cpi	r24, 0x05	; 5
 67a:	11 f4       	brne	.+4      	; 0x680 <Endpoint_WaitUntilReady+0x38>
 67c:	83 e0       	ldi	r24, 0x03	; 3
 67e:	08 95       	ret
			 *  \return Boolean true if the currently selected endpoint is stalled, false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
 680:	80 91 eb 00 	lds	r24, 0x00EB
		  return ENDPOINT_READYWAIT_BusSuspended;
		else if (Endpoint_IsStalled())
 684:	85 ff       	sbrs	r24, 5
 686:	02 c0       	rjmp	.+4      	; 0x68c <Endpoint_WaitUntilReady+0x44>
 688:	81 e0       	ldi	r24, 0x01	; 1
 68a:	08 95       	ret
 68c:	80 91 e4 00 	lds	r24, 0x00E4
 690:	90 91 e5 00 	lds	r25, 0x00E5
		  return ENDPOINT_READYWAIT_EndpointStalled;

		uint16_t CurrentFrameNumber = USB_Device_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
 694:	84 17       	cp	r24, r20
 696:	95 07       	cpc	r25, r21
 698:	e1 f2       	breq	.-72     	; 0x652 <Endpoint_WaitUntilReady+0xa>
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
 69a:	22 23       	and	r18, r18
 69c:	11 f4       	brne	.+4      	; 0x6a2 <Endpoint_WaitUntilReady+0x5a>
 69e:	84 e0       	ldi	r24, 0x04	; 4
 6a0:	08 95       	ret
 6a2:	21 50       	subi	r18, 0x01	; 1
 6a4:	ac 01       	movw	r20, r24
 6a6:	d5 cf       	rjmp	.-86     	; 0x652 <Endpoint_WaitUntilReady+0xa>
 6a8:	80 e0       	ldi	r24, 0x00	; 0
			  return ENDPOINT_READYWAIT_Timeout;
		}
	}
}
 6aa:	08 95       	ret

000006ac <USB_ResetInterface>:
{
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
 6ac:	55 d0       	rcall	.+170    	; 0x758 <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
 6ae:	5c d0       	rcall	.+184    	; 0x768 <USB_INT_ClearAllInterrupts>
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				const uint8_t Temp = USBCON;
 6b0:	80 91 d8 00 	lds	r24, 0x00D8

				USBCON = (Temp & ~(1 << USBE));
 6b4:	98 2f       	mov	r25, r24
 6b6:	9f 77       	andi	r25, 0x7F	; 127
 6b8:	90 93 d8 00 	sts	0x00D8, r25
				USBCON = (Temp |  (1 << USBE));
 6bc:	80 68       	ori	r24, 0x80	; 128
 6be:	80 93 d8 00 	sts	0x00D8, r24

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR  = USB_PLL_PSC;
 6c2:	8c e0       	ldi	r24, 0x0C	; 12
 6c4:	89 bd       	out	0x29, r24	; 41
				PLLCSR |= (1 << PLLE);
 6c6:	89 b5       	in	r24, 0x29	; 41
 6c8:	82 60       	ori	r24, 0x02	; 2
 6ca:	89 bd       	out	0x29, r24	; 41
		#if defined(USB_SERIES_4_AVR)
		PLLFRQ = ((1 << PLLUSB) | (1 << PDIV3) | (1 << PDIV1));
		#endif

		USB_PLL_On();
		while (!(USB_PLL_IsReady()));
 6cc:	09 b4       	in	r0, 0x29	; 41
 6ce:	00 fe       	sbrs	r0, 0
 6d0:	fd cf       	rjmp	.-6      	; 0x6cc <USB_ResetInterface+0x20>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON  &= ~(1 << FRZCLK);
 6d2:	80 91 d8 00 	lds	r24, 0x00D8
 6d6:	8f 7d       	andi	r24, 0xDF	; 223
 6d8:	80 93 d8 00 	sts	0x00D8, r24

	if (USB_CurrentMode == USB_MODE_Device)
	{
		#if defined(USB_CAN_BE_DEVICE)
		#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
		UHWCON |=  (1 << UIMOD);
 6dc:	80 91 d7 00 	lds	r24, 0x00D7
 6e0:	80 68       	ori	r24, 0x80	; 128
 6e2:	80 93 d7 00 	sts	0x00D7, r24
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState          = DEVICE_STATE_Unattached;
 6e6:	10 92 12 01 	sts	0x0112, r1
	USB_ConfigurationNumber  = 0;
 6ea:	10 92 10 01 	sts	0x0110, r1

	#if !defined(NO_DEVICE_REMOTE_WAKEUP)
	USB_RemoteWakeupEnabled  = false;
 6ee:	10 92 0f 01 	sts	0x010F, r1
	#endif

	#if !defined(NO_DEVICE_SELF_POWER)
	USB_CurrentlySelfPowered = false;
 6f2:	10 92 0e 01 	sts	0x010E, r1
			}

			static inline void USB_Device_SetFullSpeed(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetFullSpeed(void)
			{
				UDCON &= ~(1 << LSM);
 6f6:	80 91 e0 00 	lds	r24, 0x00E0
 6fa:	8b 7f       	andi	r24, 0xFB	; 251
 6fc:	80 93 e0 00 	sts	0x00E0, r24
	if (USB_Options & USB_DEVICE_OPT_LOWSPEED)
	  USB_Device_SetLowSpeed();
	else
	  USB_Device_SetFullSpeed();

	USB_INT_Enable(USB_INT_VBUS);
 700:	80 91 d8 00 	lds	r24, 0x00D8
 704:	81 60       	ori	r24, 0x01	; 1
 706:	80 93 d8 00 	sts	0x00D8, r24
			                                              const uint8_t Type,
			                                              const uint8_t Direction,
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				return Endpoint_ConfigureEndpoint_Prv(Number, (((Type) << EPTYPE0) | (Direction)),
 70a:	80 e0       	ldi	r24, 0x00	; 0
 70c:	60 e0       	ldi	r22, 0x00	; 0
 70e:	42 e0       	ldi	r20, 0x02	; 2
 710:	67 df       	rcall	.-306    	; 0x5e0 <Endpoint_ConfigureEndpoint_Prv>

	Endpoint_ConfigureEndpoint(ENDPOINT_CONTROLEP, EP_TYPE_CONTROL,
							   ENDPOINT_DIR_OUT, USB_ControlEndpointSize,
							   ENDPOINT_BANK_SINGLE);

	USB_INT_Clear(USB_INT_SUSPI);
 712:	80 91 e1 00 	lds	r24, 0x00E1
 716:	8e 7f       	andi	r24, 0xFE	; 254
 718:	80 93 e1 00 	sts	0x00E1, r24
	USB_INT_Enable(USB_INT_SUSPI);
 71c:	80 91 e2 00 	lds	r24, 0x00E2
 720:	81 60       	ori	r24, 0x01	; 1
 722:	80 93 e2 00 	sts	0x00E2, r24
	USB_INT_Enable(USB_INT_EORSTI);
 726:	80 91 e2 00 	lds	r24, 0x00E2
 72a:	88 60       	ori	r24, 0x08	; 8
 72c:	80 93 e2 00 	sts	0x00E2, r24
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
 730:	80 91 e0 00 	lds	r24, 0x00E0
 734:	8e 7f       	andi	r24, 0xFE	; 254
 736:	80 93 e0 00 	sts	0x00E0, r24

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON  |=  (1 << OTGPADE);
 73a:	80 91 d8 00 	lds	r24, 0x00D8
 73e:	80 61       	ori	r24, 0x10	; 16
 740:	80 93 d8 00 	sts	0x00D8, r24
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
 744:	08 95       	ret

00000746 <USB_Init>:

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON  |=  (1 << UVREGE);
 746:	e7 ed       	ldi	r30, 0xD7	; 215
 748:	f0 e0       	ldi	r31, 0x00	; 0
 74a:	80 81       	ld	r24, Z
 74c:	81 60       	ori	r24, 0x01	; 1
 74e:	80 83       	st	Z, r24
	{
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
 750:	81 e0       	ldi	r24, 0x01	; 1
 752:	80 93 11 01 	sts	0x0111, r24

	USB_ResetInterface();
}
 756:	aa cf       	rjmp	.-172    	; 0x6ac <USB_ResetInterface>

00000758 <USB_INT_DisableAllInterrupts>:
#include "USBInterrupt.h"

void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
 758:	e8 ed       	ldi	r30, 0xD8	; 216
 75a:	f0 e0       	ldi	r31, 0x00	; 0
 75c:	80 81       	ld	r24, Z
 75e:	8c 7f       	andi	r24, 0xFC	; 252
 760:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
 762:	10 92 e2 00 	sts	0x00E2, r1
	#endif
}
 766:	08 95       	ret

00000768 <USB_INT_ClearAllInterrupts>:

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT  = 0;
 768:	10 92 da 00 	sts	0x00DA, r1
	#if defined(USB_CAN_BE_HOST)
	UHINT   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT   = 0;
 76c:	10 92 e1 00 	sts	0x00E1, r1
	#endif
}
 770:	08 95       	ret

00000772 <__vector_10>:

ISR(USB_GEN_vect, ISR_BLOCK)
{
 772:	1f 92       	push	r1
 774:	0f 92       	push	r0
 776:	0f b6       	in	r0, 0x3f	; 63
 778:	0f 92       	push	r0
 77a:	0b b6       	in	r0, 0x3b	; 59
 77c:	0f 92       	push	r0
 77e:	11 24       	eor	r1, r1
 780:	2f 93       	push	r18
 782:	3f 93       	push	r19
 784:	4f 93       	push	r20
 786:	5f 93       	push	r21
 788:	6f 93       	push	r22
 78a:	7f 93       	push	r23
 78c:	8f 93       	push	r24
 78e:	9f 93       	push	r25
 790:	af 93       	push	r26
 792:	bf 93       	push	r27
 794:	ef 93       	push	r30
 796:	ff 93       	push	r31
	#if defined(USB_CAN_BE_DEVICE)
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	if (USB_INT_HasOccurred(USB_INT_VBUS) && USB_INT_IsEnabled(USB_INT_VBUS))
 798:	80 91 da 00 	lds	r24, 0x00DA
 79c:	80 ff       	sbrs	r24, 0
 79e:	15 c0       	rjmp	.+42     	; 0x7ca <__vector_10+0x58>
 7a0:	80 91 d8 00 	lds	r24, 0x00D8
 7a4:	80 ff       	sbrs	r24, 0
 7a6:	11 c0       	rjmp	.+34     	; 0x7ca <__vector_10+0x58>
	{
		USB_INT_Clear(USB_INT_VBUS);
 7a8:	80 91 da 00 	lds	r24, 0x00DA
 7ac:	8e 7f       	andi	r24, 0xFE	; 254
 7ae:	80 93 da 00 	sts	0x00DA, r24
				 *  \note This function is not available on some AVR models which do not support hardware VBUS monitoring.
				 */
				static inline bool USB_VBUS_GetStatus(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
				static inline bool USB_VBUS_GetStatus(void)
				{
					return ((USBSTA & (1 << VBUS)) ? true : false);
 7b2:	80 91 d9 00 	lds	r24, 0x00D9

		if (USB_VBUS_GetStatus())
 7b6:	80 ff       	sbrs	r24, 0
 7b8:	05 c0       	rjmp	.+10     	; 0x7c4 <__vector_10+0x52>
		{
			USB_DeviceState = DEVICE_STATE_Powered;
 7ba:	81 e0       	ldi	r24, 0x01	; 1
 7bc:	80 93 12 01 	sts	0x0112, r24
			EVENT_USB_Device_Connect();
 7c0:	e9 dc       	rcall	.-1582   	; 0x194 <EVENT_USB_Device_Connect>
 7c2:	03 c0       	rjmp	.+6      	; 0x7ca <__vector_10+0x58>
		}
		else
		{
			USB_DeviceState = DEVICE_STATE_Unattached;
 7c4:	10 92 12 01 	sts	0x0112, r1
			EVENT_USB_Device_Disconnect();
 7c8:	ed dc       	rcall	.-1574   	; 0x1a4 <EVENT_USB_Device_Disconnect>
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
 7ca:	80 91 e1 00 	lds	r24, 0x00E1
 7ce:	80 ff       	sbrs	r24, 0
 7d0:	1d c0       	rjmp	.+58     	; 0x80c <__vector_10+0x9a>
 7d2:	80 91 e2 00 	lds	r24, 0x00E2
 7d6:	80 ff       	sbrs	r24, 0
 7d8:	19 c0       	rjmp	.+50     	; 0x80c <__vector_10+0x9a>
	{
		USB_INT_Clear(USB_INT_SUSPI);
 7da:	80 91 e1 00 	lds	r24, 0x00E1
 7de:	8e 7f       	andi	r24, 0xFE	; 254
 7e0:	80 93 e1 00 	sts	0x00E1, r24

		USB_INT_Disable(USB_INT_SUSPI);
 7e4:	80 91 e2 00 	lds	r24, 0x00E2
 7e8:	8e 7f       	andi	r24, 0xFE	; 254
 7ea:	80 93 e2 00 	sts	0x00E2, r24
		USB_INT_Enable(USB_INT_WAKEUPI);
 7ee:	80 91 e2 00 	lds	r24, 0x00E2
 7f2:	80 61       	ori	r24, 0x10	; 16
 7f4:	80 93 e2 00 	sts	0x00E2, r24
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON  |=  (1 << FRZCLK);
 7f8:	80 91 d8 00 	lds	r24, 0x00D8
 7fc:	80 62       	ori	r24, 0x20	; 32
 7fe:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR  = 0;
 802:	19 bc       	out	0x29, r1	; 41

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
		EVENT_USB_Device_Disconnect();
		#else
		USB_DeviceState = DEVICE_STATE_Suspended;
 804:	85 e0       	ldi	r24, 0x05	; 5
 806:	80 93 12 01 	sts	0x0112, r24
		EVENT_USB_Device_Suspend();
 80a:	e5 d1       	rcall	.+970    	; 0xbd6 <USB_Event_Stub>
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
 80c:	80 91 e1 00 	lds	r24, 0x00E1
 810:	84 ff       	sbrs	r24, 4
 812:	2e c0       	rjmp	.+92     	; 0x870 <__vector_10+0xfe>
 814:	80 91 e2 00 	lds	r24, 0x00E2
 818:	84 ff       	sbrs	r24, 4
 81a:	2a c0       	rjmp	.+84     	; 0x870 <__vector_10+0xfe>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR  = USB_PLL_PSC;
 81c:	8c e0       	ldi	r24, 0x0C	; 12
 81e:	89 bd       	out	0x29, r24	; 41
				PLLCSR |= (1 << PLLE);
 820:	89 b5       	in	r24, 0x29	; 41
 822:	82 60       	ori	r24, 0x02	; 2
 824:	89 bd       	out	0x29, r24	; 41
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
 826:	09 b4       	in	r0, 0x29	; 41
 828:	00 fe       	sbrs	r0, 0
 82a:	fd cf       	rjmp	.-6      	; 0x826 <__vector_10+0xb4>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON  &= ~(1 << FRZCLK);
 82c:	80 91 d8 00 	lds	r24, 0x00D8
 830:	8f 7d       	andi	r24, 0xDF	; 223
 832:	80 93 d8 00 	sts	0x00D8, r24
		}

		USB_CLK_Unfreeze();

		USB_INT_Clear(USB_INT_WAKEUPI);
 836:	80 91 e1 00 	lds	r24, 0x00E1
 83a:	8f 7e       	andi	r24, 0xEF	; 239
 83c:	80 93 e1 00 	sts	0x00E1, r24

		USB_INT_Disable(USB_INT_WAKEUPI);
 840:	80 91 e2 00 	lds	r24, 0x00E2
 844:	8f 7e       	andi	r24, 0xEF	; 239
 846:	80 93 e2 00 	sts	0x00E2, r24
		USB_INT_Enable(USB_INT_SUSPI);
 84a:	80 91 e2 00 	lds	r24, 0x00E2
 84e:	81 60       	ori	r24, 0x01	; 1
 850:	80 93 e2 00 	sts	0x00E2, r24

		if (USB_ConfigurationNumber)
 854:	80 91 10 01 	lds	r24, 0x0110
 858:	88 23       	and	r24, r24
 85a:	31 f4       	brne	.+12     	; 0x868 <__vector_10+0xf6>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
 85c:	80 91 e3 00 	lds	r24, 0x00E3
		  USB_DeviceState = DEVICE_STATE_Configured;
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
 860:	87 fd       	sbrc	r24, 7
 862:	02 c0       	rjmp	.+4      	; 0x868 <__vector_10+0xf6>
 864:	81 e0       	ldi	r24, 0x01	; 1
 866:	01 c0       	rjmp	.+2      	; 0x86a <__vector_10+0xf8>
 868:	84 e0       	ldi	r24, 0x04	; 4
 86a:	80 93 12 01 	sts	0x0112, r24

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
		#else
		EVENT_USB_Device_WakeUp();
 86e:	b3 d1       	rcall	.+870    	; 0xbd6 <USB_Event_Stub>
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
 870:	80 91 e1 00 	lds	r24, 0x00E1
 874:	83 ff       	sbrs	r24, 3
 876:	22 c0       	rjmp	.+68     	; 0x8bc <__vector_10+0x14a>
 878:	80 91 e2 00 	lds	r24, 0x00E2
 87c:	83 ff       	sbrs	r24, 3
 87e:	1e c0       	rjmp	.+60     	; 0x8bc <__vector_10+0x14a>
	{
		USB_INT_Clear(USB_INT_EORSTI);
 880:	80 91 e1 00 	lds	r24, 0x00E1
 884:	87 7f       	andi	r24, 0xF7	; 247
 886:	80 93 e1 00 	sts	0x00E1, r24

		USB_DeviceState         = DEVICE_STATE_Default;
 88a:	82 e0       	ldi	r24, 0x02	; 2
 88c:	80 93 12 01 	sts	0x0112, r24
		USB_ConfigurationNumber = 0;
 890:	10 92 10 01 	sts	0x0110, r1

		USB_INT_Clear(USB_INT_SUSPI);
 894:	80 91 e1 00 	lds	r24, 0x00E1
 898:	8e 7f       	andi	r24, 0xFE	; 254
 89a:	80 93 e1 00 	sts	0x00E1, r24
		USB_INT_Disable(USB_INT_SUSPI);
 89e:	80 91 e2 00 	lds	r24, 0x00E2
 8a2:	8e 7f       	andi	r24, 0xFE	; 254
 8a4:	80 93 e2 00 	sts	0x00E2, r24
		USB_INT_Enable(USB_INT_WAKEUPI);
 8a8:	80 91 e2 00 	lds	r24, 0x00E2
 8ac:	80 61       	ori	r24, 0x10	; 16
 8ae:	80 93 e2 00 	sts	0x00E2, r24
 8b2:	80 e0       	ldi	r24, 0x00	; 0
 8b4:	60 e0       	ldi	r22, 0x00	; 0
 8b6:	42 e0       	ldi	r20, 0x02	; 2
 8b8:	93 de       	rcall	.-730    	; 0x5e0 <Endpoint_ConfigureEndpoint_Prv>

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
 8ba:	8d d1       	rcall	.+794    	; 0xbd6 <USB_Event_Stub>
	}

	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
 8bc:	80 91 e1 00 	lds	r24, 0x00E1
 8c0:	82 ff       	sbrs	r24, 2
 8c2:	0a c0       	rjmp	.+20     	; 0x8d8 <__vector_10+0x166>
 8c4:	80 91 e2 00 	lds	r24, 0x00E2
 8c8:	82 ff       	sbrs	r24, 2
 8ca:	06 c0       	rjmp	.+12     	; 0x8d8 <__vector_10+0x166>
	{
		USB_INT_Clear(USB_INT_SOFI);
 8cc:	80 91 e1 00 	lds	r24, 0x00E1
 8d0:	8b 7f       	andi	r24, 0xFB	; 251
 8d2:	80 93 e1 00 	sts	0x00E1, r24

		EVENT_USB_Device_StartOfFrame();
 8d6:	6b dc       	rcall	.-1834   	; 0x1ae <EVENT_USB_Device_StartOfFrame>
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
 8d8:	ff 91       	pop	r31
 8da:	ef 91       	pop	r30
 8dc:	bf 91       	pop	r27
 8de:	af 91       	pop	r26
 8e0:	9f 91       	pop	r25
 8e2:	8f 91       	pop	r24
 8e4:	7f 91       	pop	r23
 8e6:	6f 91       	pop	r22
 8e8:	5f 91       	pop	r21
 8ea:	4f 91       	pop	r20
 8ec:	3f 91       	pop	r19
 8ee:	2f 91       	pop	r18
 8f0:	0f 90       	pop	r0
 8f2:	0b be       	out	0x3b, r0	; 59
 8f4:	0f 90       	pop	r0
 8f6:	0f be       	out	0x3f, r0	; 63
 8f8:	0f 90       	pop	r0
 8fa:	1f 90       	pop	r1
 8fc:	18 95       	reti

000008fe <USB_Device_ProcessControlRequest>:
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
 8fe:	0f 93       	push	r16
 900:	1f 93       	push	r17
 902:	df 93       	push	r29
 904:	cf 93       	push	r28
 906:	cd b7       	in	r28, 0x3d	; 61
 908:	de b7       	in	r29, 0x3e	; 62
 90a:	ac 97       	sbiw	r28, 0x2c	; 44
 90c:	0f b6       	in	r0, 0x3f	; 63
 90e:	f8 94       	cli
 910:	de bf       	out	0x3e, r29	; 62
 912:	0f be       	out	0x3f, r0	; 63
 914:	cd bf       	out	0x3d, r28	; 61
 916:	e3 e1       	ldi	r30, 0x13	; 19
 918:	f1 e0       	ldi	r31, 0x01	; 1
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_Byte(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_Byte(void)
			{
				return UEDATX;
 91a:	80 91 f1 00 	lds	r24, 0x00F1
	uint8_t* RequestHeader  = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_Byte();
 91e:	81 93       	st	Z+, r24

void USB_Device_ProcessControlRequest(void)
{
	uint8_t* RequestHeader  = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
 920:	21 e0       	ldi	r18, 0x01	; 1
 922:	eb 31       	cpi	r30, 0x1B	; 27
 924:	f2 07       	cpc	r31, r18
 926:	c9 f7       	brne	.-14     	; 0x91a <USB_Device_ProcessControlRequest+0x1c>
	  *(RequestHeader++) = Endpoint_Read_Byte();

	EVENT_USB_Device_ControlRequest();
 928:	0b dd       	rcall	.-1514   	; 0x340 <EVENT_USB_Device_ControlRequest>
			 *  \return Boolean true if the selected endpoint has received a SETUP packet, false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 92a:	80 91 e8 00 	lds	r24, 0x00E8

	if (Endpoint_IsSETUPReceived())
 92e:	83 ff       	sbrs	r24, 3
 930:	39 c1       	rjmp	.+626    	; 0xba4 <USB_Device_ProcessControlRequest+0x2a6>
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
 932:	80 91 13 01 	lds	r24, 0x0113

		switch (USB_ControlRequest.bRequest)
 936:	30 91 14 01 	lds	r19, 0x0114
 93a:	35 30       	cpi	r19, 0x05	; 5
 93c:	09 f4       	brne	.+2      	; 0x940 <USB_Device_ProcessControlRequest+0x42>
 93e:	87 c0       	rjmp	.+270    	; 0xa4e <USB_Device_ProcessControlRequest+0x150>
 940:	36 30       	cpi	r19, 0x06	; 6
 942:	40 f4       	brcc	.+16     	; 0x954 <USB_Device_ProcessControlRequest+0x56>
 944:	31 30       	cpi	r19, 0x01	; 1
 946:	c9 f1       	breq	.+114    	; 0x9ba <USB_Device_ProcessControlRequest+0xbc>
 948:	31 30       	cpi	r19, 0x01	; 1
 94a:	70 f0       	brcs	.+28     	; 0x968 <USB_Device_ProcessControlRequest+0x6a>
 94c:	33 30       	cpi	r19, 0x03	; 3
 94e:	09 f0       	breq	.+2      	; 0x952 <USB_Device_ProcessControlRequest+0x54>
 950:	29 c1       	rjmp	.+594    	; 0xba4 <USB_Device_ProcessControlRequest+0x2a6>
 952:	33 c0       	rjmp	.+102    	; 0x9ba <USB_Device_ProcessControlRequest+0xbc>
 954:	38 30       	cpi	r19, 0x08	; 8
 956:	09 f4       	brne	.+2      	; 0x95a <USB_Device_ProcessControlRequest+0x5c>
 958:	f7 c0       	rjmp	.+494    	; 0xb48 <USB_Device_ProcessControlRequest+0x24a>
 95a:	39 30       	cpi	r19, 0x09	; 9
 95c:	09 f4       	brne	.+2      	; 0x960 <USB_Device_ProcessControlRequest+0x62>
 95e:	06 c1       	rjmp	.+524    	; 0xb6c <USB_Device_ProcessControlRequest+0x26e>
 960:	36 30       	cpi	r19, 0x06	; 6
 962:	09 f0       	breq	.+2      	; 0x966 <USB_Device_ProcessControlRequest+0x68>
 964:	1f c1       	rjmp	.+574    	; 0xba4 <USB_Device_ProcessControlRequest+0x2a6>
 966:	99 c0       	rjmp	.+306    	; 0xa9a <USB_Device_ProcessControlRequest+0x19c>
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
 968:	80 38       	cpi	r24, 0x80	; 128
 96a:	21 f0       	breq	.+8      	; 0x974 <USB_Device_ProcessControlRequest+0x76>
 96c:	82 38       	cpi	r24, 0x82	; 130
 96e:	09 f0       	breq	.+2      	; 0x972 <USB_Device_ProcessControlRequest+0x74>
 970:	19 c1       	rjmp	.+562    	; 0xba4 <USB_Device_ProcessControlRequest+0x2a6>
 972:	08 c0       	rjmp	.+16     	; 0x984 <USB_Device_ProcessControlRequest+0x86>
 974:	90 91 0e 01 	lds	r25, 0x010E
			if (USB_CurrentlySelfPowered)
			  CurrentStatus |= FEATURE_SELFPOWERED_ENABLED;
			#endif

			#if !defined(NO_DEVICE_REMOTE_WAKEUP)
			if (USB_RemoteWakeupEnabled)
 978:	80 91 0f 01 	lds	r24, 0x010F
 97c:	88 23       	and	r24, r24
 97e:	99 f0       	breq	.+38     	; 0x9a6 <USB_Device_ProcessControlRequest+0xa8>
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
 980:	92 60       	ori	r25, 0x02	; 2
 982:	11 c0       	rjmp	.+34     	; 0x9a6 <USB_Device_ProcessControlRequest+0xa8>
			#endif
			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_ENDPOINT):
			Endpoint_SelectEndpoint((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
 984:	80 91 17 01 	lds	r24, 0x0117
 988:	87 70       	andi	r24, 0x07	; 7
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 98a:	80 93 e9 00 	sts	0x00E9, r24
			 *  \return Boolean true if the currently selected endpoint is stalled, false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
 98e:	80 91 eb 00 	lds	r24, 0x00EB

			CurrentStatus = Endpoint_IsStalled();
 992:	90 e0       	ldi	r25, 0x00	; 0
 994:	25 e0       	ldi	r18, 0x05	; 5
 996:	96 95       	lsr	r25
 998:	87 95       	ror	r24
 99a:	2a 95       	dec	r18
 99c:	e1 f7       	brne	.-8      	; 0x996 <USB_Device_ProcessControlRequest+0x98>
 99e:	98 2f       	mov	r25, r24
 9a0:	91 70       	andi	r25, 0x01	; 1
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 9a2:	10 92 e9 00 	sts	0x00E9, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 9a6:	80 91 e8 00 	lds	r24, 0x00E8
 9aa:	87 7f       	andi	r24, 0xF7	; 247
 9ac:	80 93 e8 00 	sts	0x00E8, r24
			 *  \param[in] Word  Next word to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_Word_LE(const uint16_t Word) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_Word_LE(const uint16_t Word)
			{
				UEDATX = (Word & 0xFF);
 9b0:	90 93 f1 00 	sts	0x00F1, r25
				UEDATX = (Word >> 8);
 9b4:	10 92 f1 00 	sts	0x00F1, r1
 9b8:	d2 c0       	rjmp	.+420    	; 0xb5e <USB_Device_ProcessControlRequest+0x260>
				}

				break;
			case REQ_ClearFeature:
			case REQ_SetFeature:
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
 9ba:	88 23       	and	r24, r24
 9bc:	19 f0       	breq	.+6      	; 0x9c4 <USB_Device_ProcessControlRequest+0xc6>
 9be:	82 30       	cpi	r24, 0x02	; 2
 9c0:	09 f0       	breq	.+2      	; 0x9c4 <USB_Device_ProcessControlRequest+0xc6>
 9c2:	f0 c0       	rjmp	.+480    	; 0xba4 <USB_Device_ProcessControlRequest+0x2a6>
	Endpoint_ClearStatusStage();
}

static void USB_Device_ClearSetFeature(void)
{
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
 9c4:	90 e0       	ldi	r25, 0x00	; 0
 9c6:	8f 71       	andi	r24, 0x1F	; 31
 9c8:	90 70       	andi	r25, 0x00	; 0
 9ca:	00 97       	sbiw	r24, 0x00	; 0
 9cc:	21 f0       	breq	.+8      	; 0x9d6 <USB_Device_ProcessControlRequest+0xd8>
 9ce:	02 97       	sbiw	r24, 0x02	; 2
 9d0:	09 f0       	breq	.+2      	; 0x9d4 <USB_Device_ProcessControlRequest+0xd6>
 9d2:	e8 c0       	rjmp	.+464    	; 0xba4 <USB_Device_ProcessControlRequest+0x2a6>
 9d4:	0c c0       	rjmp	.+24     	; 0x9ee <USB_Device_ProcessControlRequest+0xf0>
	{
		#if !defined(NO_DEVICE_REMOTE_WAKEUP)
		case REQREC_DEVICE:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
 9d6:	80 91 15 01 	lds	r24, 0x0115
 9da:	81 30       	cpi	r24, 0x01	; 1
 9dc:	09 f0       	breq	.+2      	; 0x9e0 <USB_Device_ProcessControlRequest+0xe2>
 9de:	e2 c0       	rjmp	.+452    	; 0xba4 <USB_Device_ProcessControlRequest+0x2a6>
			  USB_RemoteWakeupEnabled = (USB_ControlRequest.bRequest == REQ_SetFeature);
 9e0:	10 92 0f 01 	sts	0x010F, r1
 9e4:	33 30       	cpi	r19, 0x03	; 3
 9e6:	69 f5       	brne	.+90     	; 0xa42 <USB_Device_ProcessControlRequest+0x144>
 9e8:	80 93 0f 01 	sts	0x010F, r24
 9ec:	2a c0       	rjmp	.+84     	; 0xa42 <USB_Device_ProcessControlRequest+0x144>

			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
 9ee:	80 91 15 01 	lds	r24, 0x0115
 9f2:	88 23       	and	r24, r24
 9f4:	31 f5       	brne	.+76     	; 0xa42 <USB_Device_ProcessControlRequest+0x144>
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
 9f6:	20 91 17 01 	lds	r18, 0x0117
 9fa:	27 70       	andi	r18, 0x07	; 7

				if (EndpointIndex == ENDPOINT_CONTROLEP)
 9fc:	09 f4       	brne	.+2      	; 0xa00 <USB_Device_ProcessControlRequest+0x102>
 9fe:	d2 c0       	rjmp	.+420    	; 0xba4 <USB_Device_ProcessControlRequest+0x2a6>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 a00:	20 93 e9 00 	sts	0x00E9, r18
			 * \return Boolean True if the currently selected endpoint is enabled, false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
 a04:	80 91 eb 00 	lds	r24, 0x00EB
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
 a08:	80 ff       	sbrs	r24, 0
 a0a:	1b c0       	rjmp	.+54     	; 0xa42 <USB_Device_ProcessControlRequest+0x144>
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
 a0c:	33 30       	cpi	r19, 0x03	; 3
 a0e:	21 f4       	brne	.+8      	; 0xa18 <USB_Device_ProcessControlRequest+0x11a>
			 *  \ingroup Group_EndpointPacketManagement
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
 a10:	80 91 eb 00 	lds	r24, 0x00EB
 a14:	80 62       	ori	r24, 0x20	; 32
 a16:	13 c0       	rjmp	.+38     	; 0xa3e <USB_Device_ProcessControlRequest+0x140>
			 *  \ingroup Group_EndpointPacketManagement
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
 a18:	80 91 eb 00 	lds	r24, 0x00EB
 a1c:	80 61       	ori	r24, 0x10	; 16
 a1e:	80 93 eb 00 	sts	0x00EB, r24
			 *  \param[in] EndpointNumber Endpoint number whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetFIFO(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetFIFO(const uint8_t EndpointNumber)
			{
				UERST = (1 << EndpointNumber);
 a22:	81 e0       	ldi	r24, 0x01	; 1
 a24:	90 e0       	ldi	r25, 0x00	; 0
 a26:	02 c0       	rjmp	.+4      	; 0xa2c <USB_Device_ProcessControlRequest+0x12e>
 a28:	88 0f       	add	r24, r24
 a2a:	99 1f       	adc	r25, r25
 a2c:	2a 95       	dec	r18
 a2e:	e2 f7       	brpl	.-8      	; 0xa28 <USB_Device_ProcessControlRequest+0x12a>
 a30:	80 93 ea 00 	sts	0x00EA, r24
				UERST = 0;
 a34:	10 92 ea 00 	sts	0x00EA, r1

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
 a38:	80 91 eb 00 	lds	r24, 0x00EB
 a3c:	88 60       	ori	r24, 0x08	; 8
 a3e:	80 93 eb 00 	sts	0x00EB, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 a42:	10 92 e9 00 	sts	0x00E9, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 a46:	80 91 e8 00 	lds	r24, 0x00E8
 a4a:	87 7f       	andi	r24, 0xF7	; 247
 a4c:	8b c0       	rjmp	.+278    	; 0xb64 <USB_Device_ProcessControlRequest+0x266>
					USB_Device_ClearSetFeature();
				}

				break;
			case REQ_SetAddress:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
 a4e:	88 23       	and	r24, r24
 a50:	09 f0       	breq	.+2      	; 0xa54 <USB_Device_ProcessControlRequest+0x156>
 a52:	a8 c0       	rjmp	.+336    	; 0xba4 <USB_Device_ProcessControlRequest+0x2a6>
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t DeviceAddress = (USB_ControlRequest.wValue & 0x7F);
 a54:	10 91 15 01 	lds	r17, 0x0115
 a58:	1f 77       	andi	r17, 0x7F	; 127

	ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
 a5a:	0f b7       	in	r16, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
 a5c:	f8 94       	cli
 a5e:	80 91 e8 00 	lds	r24, 0x00E8
 a62:	87 7f       	andi	r24, 0xF7	; 247
 a64:	80 93 e8 00 	sts	0x00E8, r24
	{
		Endpoint_ClearSETUP();

		Endpoint_ClearStatusStage();
 a68:	ce dd       	rcall	.-1124   	; 0x606 <Endpoint_ClearStatusStage>
			 *  \return Boolean true if the current endpoint is ready for an IN packet, false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 a6a:	80 91 e8 00 	lds	r24, 0x00E8

		while (!(Endpoint_IsINReady()));
 a6e:	80 ff       	sbrs	r24, 0
 a70:	fc cf       	rjmp	.-8      	; 0xa6a <USB_Device_ProcessControlRequest+0x16c>

		USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
 a72:	11 23       	and	r17, r17
 a74:	11 f4       	brne	.+4      	; 0xa7a <USB_Device_ProcessControlRequest+0x17c>
 a76:	82 e0       	ldi	r24, 0x02	; 2
 a78:	01 c0       	rjmp	.+2      	; 0xa7c <USB_Device_ProcessControlRequest+0x17e>
 a7a:	83 e0       	ldi	r24, 0x03	; 3
 a7c:	80 93 12 01 	sts	0x0112, r24
			#endif

			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				UDADDR  = ((UDADDR & (1 << ADDEN)) | (Address & 0x7F));
 a80:	80 91 e3 00 	lds	r24, 0x00E3
 a84:	80 78       	andi	r24, 0x80	; 128
 a86:	18 2b       	or	r17, r24
 a88:	10 93 e3 00 	sts	0x00E3, r17
				UDADDR |= (1 << ADDEN);
 a8c:	80 91 e3 00 	lds	r24, 0x00E3
 a90:	80 68       	ori	r24, 0x80	; 128
 a92:	80 93 e3 00 	sts	0x00E3, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
 a96:	0f bf       	out	0x3f, r16	; 63
    __asm__ volatile ("" ::: "memory");
 a98:	85 c0       	rjmp	.+266    	; 0xba4 <USB_Device_ProcessControlRequest+0x2a6>
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_SetAddress();

				break;
			case REQ_GetDescriptor:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
 a9a:	80 58       	subi	r24, 0x80	; 128
 a9c:	82 30       	cpi	r24, 0x02	; 2
 a9e:	08 f0       	brcs	.+2      	; 0xaa2 <USB_Device_ProcessControlRequest+0x1a4>
 aa0:	81 c0       	rjmp	.+258    	; 0xba4 <USB_Device_ProcessControlRequest+0x2a6>
	#if !defined(USE_FLASH_DESCRIPTORS) && !defined(USE_EEPROM_DESCRIPTORS) && !defined(USE_RAM_DESCRIPTORS)
	uint8_t DescriptorAddressSpace;
	#endif

	#if !defined(NO_INTERNAL_SERIAL) && (USE_INTERNAL_SERIAL != NO_DESCRIPTOR)
	if (USB_ControlRequest.wValue == ((DTYPE_String << 8) | USE_INTERNAL_SERIAL))
 aa2:	80 91 15 01 	lds	r24, 0x0115
 aa6:	90 91 16 01 	lds	r25, 0x0116
 aaa:	23 e0       	ldi	r18, 0x03	; 3
 aac:	8c 3d       	cpi	r24, 0xDC	; 220
 aae:	92 07       	cpc	r25, r18
 ab0:	99 f5       	brne	.+102    	; 0xb18 <USB_Device_ProcessControlRequest+0x21a>
	} SignatureDescriptor;

	SignatureDescriptor.Header.Type = DTYPE_String;
	SignatureDescriptor.Header.Size = sizeof(SignatureDescriptor);

	ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
 ab2:	7f b7       	in	r23, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
 ab4:	f8 94       	cli
 ab6:	de 01       	movw	r26, r28
 ab8:	15 96       	adiw	r26, 0x05	; 5
 aba:	6e e0       	ldi	r22, 0x0E	; 14
 abc:	40 e0       	ldi	r20, 0x00	; 0
 abe:	50 e0       	ldi	r21, 0x00	; 0
	{
		uint8_t SigReadAddress = 0x0E;

		for (uint8_t SerialCharNum = 0; SerialCharNum < 20; SerialCharNum++)
		{
			uint8_t SerialByte = boot_signature_byte_get(SigReadAddress);
 ac0:	11 e2       	ldi	r17, 0x21	; 33
 ac2:	e6 2f       	mov	r30, r22
 ac4:	f0 e0       	ldi	r31, 0x00	; 0
 ac6:	10 93 57 00 	sts	0x0057, r17
 aca:	84 91       	lpm	r24, Z+

			if (SerialCharNum & 0x01)
 acc:	40 ff       	sbrs	r20, 0
 ace:	03 c0       	rjmp	.+6      	; 0xad6 <USB_Device_ProcessControlRequest+0x1d8>
			{
				SerialByte >>= 4;
 ad0:	82 95       	swap	r24
 ad2:	8f 70       	andi	r24, 0x0F	; 15
				SigReadAddress++;
 ad4:	6f 5f       	subi	r22, 0xFF	; 255
			}

			SerialByte &= 0x0F;
 ad6:	8f 70       	andi	r24, 0x0F	; 15
 ad8:	28 2f       	mov	r18, r24
 ada:	30 e0       	ldi	r19, 0x00	; 0

			SignatureDescriptor.UnicodeString[SerialCharNum] = (SerialByte >= 10) ?
 adc:	8a 30       	cpi	r24, 0x0A	; 10
 ade:	18 f0       	brcs	.+6      	; 0xae6 <USB_Device_ProcessControlRequest+0x1e8>
 ae0:	c9 01       	movw	r24, r18
 ae2:	c7 96       	adiw	r24, 0x37	; 55
 ae4:	02 c0       	rjmp	.+4      	; 0xaea <USB_Device_ProcessControlRequest+0x1ec>
 ae6:	c9 01       	movw	r24, r18
 ae8:	c0 96       	adiw	r24, 0x30	; 48
 aea:	8d 93       	st	X+, r24
 aec:	9d 93       	st	X+, r25
 aee:	4f 5f       	subi	r20, 0xFF	; 255
 af0:	5f 4f       	sbci	r21, 0xFF	; 255

	ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
	{
		uint8_t SigReadAddress = 0x0E;

		for (uint8_t SerialCharNum = 0; SerialCharNum < 20; SerialCharNum++)
 af2:	44 31       	cpi	r20, 0x14	; 20
 af4:	51 05       	cpc	r21, r1
 af6:	29 f7       	brne	.-54     	; 0xac2 <USB_Device_ProcessControlRequest+0x1c4>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
 af8:	7f bf       	out	0x3f, r23	; 63
		USB_Descriptor_Header_t Header;
		wchar_t                 UnicodeString[20];
	} SignatureDescriptor;

	SignatureDescriptor.Header.Type = DTYPE_String;
	SignatureDescriptor.Header.Size = sizeof(SignatureDescriptor);
 afa:	8a e2       	ldi	r24, 0x2A	; 42
 afc:	8b 83       	std	Y+3, r24	; 0x03
	{
		USB_Descriptor_Header_t Header;
		wchar_t                 UnicodeString[20];
	} SignatureDescriptor;

	SignatureDescriptor.Header.Type = DTYPE_String;
 afe:	83 e0       	ldi	r24, 0x03	; 3
 b00:	8c 83       	std	Y+4, r24	; 0x04
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 b02:	80 91 e8 00 	lds	r24, 0x00E8
 b06:	87 7f       	andi	r24, 0xF7	; 247
 b08:	80 93 e8 00 	sts	0x00E8, r24
		}
	}

	Endpoint_ClearSETUP();

	Endpoint_Write_Control_Stream_LE(&SignatureDescriptor, sizeof(SignatureDescriptor));
 b0c:	ce 01       	movw	r24, r28
 b0e:	03 96       	adiw	r24, 0x03	; 3
 b10:	6a e2       	ldi	r22, 0x2A	; 42
 b12:	70 e0       	ldi	r23, 0x00	; 0
 b14:	61 d0       	rcall	.+194    	; 0xbd8 <Endpoint_Write_Control_Stream_LE>
 b16:	12 c0       	rjmp	.+36     	; 0xb3c <USB_Device_ProcessControlRequest+0x23e>
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif

	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
 b18:	60 91 17 01 	lds	r22, 0x0117
 b1c:	ae 01       	movw	r20, r28
 b1e:	4f 5f       	subi	r20, 0xFF	; 255
 b20:	5f 4f       	sbci	r21, 0xFF	; 255
 b22:	1e dd       	rcall	.-1476   	; 0x560 <CALLBACK_USB_GetDescriptor>
 b24:	bc 01       	movw	r22, r24
 b26:	00 97       	sbiw	r24, 0x00	; 0
 b28:	09 f4       	brne	.+2      	; 0xb2c <USB_Device_ProcessControlRequest+0x22e>
 b2a:	3c c0       	rjmp	.+120    	; 0xba4 <USB_Device_ProcessControlRequest+0x2a6>
 b2c:	80 91 e8 00 	lds	r24, 0x00E8
 b30:	87 7f       	andi	r24, 0xF7	; 247
 b32:	80 93 e8 00 	sts	0x00E8, r24
	#if defined(USE_RAM_DESCRIPTORS)
	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_EEPROM_DESCRIPTORS)
	Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_FLASH_DESCRIPTORS)
	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
 b36:	89 81       	ldd	r24, Y+1	; 0x01
 b38:	9a 81       	ldd	r25, Y+2	; 0x02
 b3a:	ac d0       	rcall	.+344    	; 0xc94 <Endpoint_Write_Control_PStream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 b3c:	80 91 e8 00 	lds	r24, 0x00E8
 b40:	8b 77       	andi	r24, 0x7B	; 123
 b42:	80 93 e8 00 	sts	0x00E8, r24
 b46:	2e c0       	rjmp	.+92     	; 0xba4 <USB_Device_ProcessControlRequest+0x2a6>
					USB_Device_GetDescriptor();
				}

				break;
			case REQ_GetConfiguration:
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
 b48:	80 38       	cpi	r24, 0x80	; 128
 b4a:	61 f5       	brne	.+88     	; 0xba4 <USB_Device_ProcessControlRequest+0x2a6>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 b4c:	80 91 e8 00 	lds	r24, 0x00E8
 b50:	87 7f       	andi	r24, 0xF7	; 247
 b52:	80 93 e8 00 	sts	0x00E8, r24

static void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();

	Endpoint_Write_Byte(USB_ConfigurationNumber);
 b56:	80 91 10 01 	lds	r24, 0x0110
			 *  \param[in] Byte  Next byte to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_Byte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_Byte(const uint8_t Byte)
			{
				UEDATX = Byte;
 b5a:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 b5e:	80 91 e8 00 	lds	r24, 0x00E8
 b62:	8e 77       	andi	r24, 0x7E	; 126
 b64:	80 93 e8 00 	sts	0x00E8, r24
	Endpoint_ClearIN();

	Endpoint_ClearStatusStage();
 b68:	4e dd       	rcall	.-1380   	; 0x606 <Endpoint_ClearStatusStage>
 b6a:	1c c0       	rjmp	.+56     	; 0xba4 <USB_Device_ProcessControlRequest+0x2a6>
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_GetConfiguration();

				break;
			case REQ_SetConfiguration:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
 b6c:	88 23       	and	r24, r24
 b6e:	d1 f4       	brne	.+52     	; 0xba4 <USB_Device_ProcessControlRequest+0x2a6>
}

static void USB_Device_SetConfiguration(void)
{
	#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
 b70:	90 91 15 01 	lds	r25, 0x0115
 b74:	92 30       	cpi	r25, 0x02	; 2
 b76:	b0 f4       	brcc	.+44     	; 0xba4 <USB_Device_ProcessControlRequest+0x2a6>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 b78:	80 91 e8 00 	lds	r24, 0x00E8
 b7c:	87 7f       	andi	r24, 0xF7	; 247
 b7e:	80 93 e8 00 	sts	0x00E8, r24
	}
	#endif

	Endpoint_ClearSETUP();

	USB_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
 b82:	90 93 10 01 	sts	0x0110, r25

	Endpoint_ClearStatusStage();
 b86:	3f dd       	rcall	.-1410   	; 0x606 <Endpoint_ClearStatusStage>

	if (USB_ConfigurationNumber)
 b88:	80 91 10 01 	lds	r24, 0x0110
 b8c:	88 23       	and	r24, r24
 b8e:	31 f4       	brne	.+12     	; 0xb9c <USB_Device_ProcessControlRequest+0x29e>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
 b90:	80 91 e3 00 	lds	r24, 0x00E3
	  USB_DeviceState = DEVICE_STATE_Configured;
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
 b94:	87 fd       	sbrc	r24, 7
 b96:	02 c0       	rjmp	.+4      	; 0xb9c <USB_Device_ProcessControlRequest+0x29e>
 b98:	81 e0       	ldi	r24, 0x01	; 1
 b9a:	01 c0       	rjmp	.+2      	; 0xb9e <USB_Device_ProcessControlRequest+0x2a0>
 b9c:	84 e0       	ldi	r24, 0x04	; 4
 b9e:	80 93 12 01 	sts	0x0112, r24

	EVENT_USB_Device_ConfigurationChanged();
 ba2:	8a dc       	rcall	.-1772   	; 0x4b8 <EVENT_USB_Device_ConfigurationChanged>
			 *  \return Boolean true if the selected endpoint has received a SETUP packet, false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 ba4:	80 91 e8 00 	lds	r24, 0x00E8

				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
 ba8:	83 ff       	sbrs	r24, 3
 baa:	0a c0       	rjmp	.+20     	; 0xbc0 <USB_Device_ProcessControlRequest+0x2c2>
			 *  \ingroup Group_EndpointPacketManagement
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
 bac:	80 91 eb 00 	lds	r24, 0x00EB
 bb0:	80 62       	ori	r24, 0x20	; 32
 bb2:	80 93 eb 00 	sts	0x00EB, r24
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 bb6:	80 91 e8 00 	lds	r24, 0x00E8
 bba:	87 7f       	andi	r24, 0xF7	; 247
 bbc:	80 93 e8 00 	sts	0x00E8, r24
	{
		Endpoint_StallTransaction();
		Endpoint_ClearSETUP();
	}
}
 bc0:	ac 96       	adiw	r28, 0x2c	; 44
 bc2:	0f b6       	in	r0, 0x3f	; 63
 bc4:	f8 94       	cli
 bc6:	de bf       	out	0x3e, r29	; 62
 bc8:	0f be       	out	0x3f, r0	; 63
 bca:	cd bf       	out	0x3d, r28	; 61
 bcc:	cf 91       	pop	r28
 bce:	df 91       	pop	r29
 bd0:	1f 91       	pop	r17
 bd2:	0f 91       	pop	r16
 bd4:	08 95       	ret

00000bd6 <USB_Event_Stub>:
#include "Events.h"

void USB_Event_Stub(void)
{

}
 bd6:	08 95       	ret

00000bd8 <Endpoint_Write_Control_Stream_LE>:
 bd8:	9c 01       	movw	r18, r24
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
 bda:	40 91 19 01 	lds	r20, 0x0119
 bde:	50 91 1a 01 	lds	r21, 0x011A
 be2:	46 17       	cp	r20, r22
 be4:	57 07       	cpc	r21, r23
 be6:	18 f4       	brcc	.+6      	; 0xbee <Endpoint_Write_Control_Stream_LE+0x16>
uint8_t TEMPLATE_FUNC_NAME (const void* Buffer,
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
 be8:	f9 01       	movw	r30, r18
 bea:	90 e0       	ldi	r25, 0x00	; 0
 bec:	3d c0       	rjmp	.+122    	; 0xc68 <Endpoint_Write_Control_Stream_LE+0x90>
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
 bee:	61 15       	cp	r22, r1
 bf0:	71 05       	cpc	r23, r1
 bf2:	11 f0       	breq	.+4      	; 0xbf8 <Endpoint_Write_Control_Stream_LE+0x20>
 bf4:	ab 01       	movw	r20, r22
 bf6:	f8 cf       	rjmp	.-16     	; 0xbe8 <Endpoint_Write_Control_Stream_LE+0x10>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 bf8:	80 91 e8 00 	lds	r24, 0x00E8
 bfc:	8e 77       	andi	r24, 0x7E	; 126
 bfe:	80 93 e8 00 	sts	0x00E8, r24
 c02:	40 e0       	ldi	r20, 0x00	; 0
 c04:	50 e0       	ldi	r21, 0x00	; 0
 c06:	f0 cf       	rjmp	.-32     	; 0xbe8 <Endpoint_Write_Control_Stream_LE+0x10>
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
 c08:	80 91 12 01 	lds	r24, 0x0112

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
 c0c:	88 23       	and	r24, r24
 c0e:	f1 f1       	breq	.+124    	; 0xc8c <Endpoint_Write_Control_Stream_LE+0xb4>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
 c10:	85 30       	cpi	r24, 0x05	; 5
 c12:	f1 f1       	breq	.+124    	; 0xc90 <Endpoint_Write_Control_Stream_LE+0xb8>
			 *  \return Boolean true if the selected endpoint has received a SETUP packet, false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 c14:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
 c18:	83 ff       	sbrs	r24, 3
 c1a:	02 c0       	rjmp	.+4      	; 0xc20 <Endpoint_Write_Control_Stream_LE+0x48>
 c1c:	81 e0       	ldi	r24, 0x01	; 1
 c1e:	08 95       	ret
			 *  \return Boolean true if current endpoint is has received an OUT packet, false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 c20:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
 c24:	82 fd       	sbrc	r24, 2
 c26:	2c c0       	rjmp	.+88     	; 0xc80 <Endpoint_Write_Control_Stream_LE+0xa8>
			 *  \return Boolean true if the current endpoint is ready for an IN packet, false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 c28:	80 91 e8 00 	lds	r24, 0x00E8
		  break;

		if (Endpoint_IsINReady())
 c2c:	80 ff       	sbrs	r24, 0
 c2e:	1c c0       	rjmp	.+56     	; 0xc68 <Endpoint_Write_Control_Stream_LE+0x90>
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
					return UEBCX;
 c30:	20 91 f2 00 	lds	r18, 0x00F2
 c34:	30 91 f3 00 	lds	r19, 0x00F3
 c38:	07 c0       	rjmp	.+14     	; 0xc48 <Endpoint_Write_Control_Stream_LE+0x70>
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_ControlEndpointSize))
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
 c3a:	81 91       	ld	r24, Z+
			 *  \param[in] Byte  Next byte to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_Byte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_Byte(const uint8_t Byte)
			{
				UEDATX = Byte;
 c3c:	80 93 f1 00 	sts	0x00F1, r24
				Length--;
 c40:	41 50       	subi	r20, 0x01	; 1
 c42:	50 40       	sbci	r21, 0x00	; 0
				BytesInEndpoint++;
 c44:	2f 5f       	subi	r18, 0xFF	; 255
 c46:	3f 4f       	sbci	r19, 0xFF	; 255

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_ControlEndpointSize))
 c48:	41 15       	cp	r20, r1
 c4a:	51 05       	cpc	r21, r1
 c4c:	19 f0       	breq	.+6      	; 0xc54 <Endpoint_Write_Control_Stream_LE+0x7c>
 c4e:	28 30       	cpi	r18, 0x08	; 8
 c50:	31 05       	cpc	r19, r1
 c52:	98 f3       	brcs	.-26     	; 0xc3a <Endpoint_Write_Control_Stream_LE+0x62>
				TEMPLATE_TRANSFER_BYTE(DataStream);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_ControlEndpointSize);
 c54:	90 e0       	ldi	r25, 0x00	; 0
 c56:	28 30       	cpi	r18, 0x08	; 8
 c58:	31 05       	cpc	r19, r1
 c5a:	09 f4       	brne	.+2      	; 0xc5e <Endpoint_Write_Control_Stream_LE+0x86>
 c5c:	91 e0       	ldi	r25, 0x01	; 1
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 c5e:	80 91 e8 00 	lds	r24, 0x00E8
 c62:	8e 77       	andi	r24, 0x7E	; 126
 c64:	80 93 e8 00 	sts	0x00E8, r24
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
 c68:	41 15       	cp	r20, r1
 c6a:	51 05       	cpc	r21, r1
 c6c:	69 f6       	brne	.-102    	; 0xc08 <Endpoint_Write_Control_Stream_LE+0x30>
 c6e:	99 23       	and	r25, r25
 c70:	59 f6       	brne	.-106    	; 0xc08 <Endpoint_Write_Control_Stream_LE+0x30>
 c72:	06 c0       	rjmp	.+12     	; 0xc80 <Endpoint_Write_Control_Stream_LE+0xa8>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
 c74:	80 91 12 01 	lds	r24, 0x0112

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
 c78:	88 23       	and	r24, r24
 c7a:	41 f0       	breq	.+16     	; 0xc8c <Endpoint_Write_Control_Stream_LE+0xb4>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
 c7c:	85 30       	cpi	r24, 0x05	; 5
 c7e:	41 f0       	breq	.+16     	; 0xc90 <Endpoint_Write_Control_Stream_LE+0xb8>
			 *  \return Boolean true if current endpoint is has received an OUT packet, false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 c80:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
 c84:	82 ff       	sbrs	r24, 2
 c86:	f6 cf       	rjmp	.-20     	; 0xc74 <Endpoint_Write_Control_Stream_LE+0x9c>
 c88:	80 e0       	ldi	r24, 0x00	; 0
 c8a:	08 95       	ret
 c8c:	82 e0       	ldi	r24, 0x02	; 2
 c8e:	08 95       	ret
 c90:	83 e0       	ldi	r24, 0x03	; 3
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
 c92:	08 95       	ret

00000c94 <Endpoint_Write_Control_PStream_LE>:
uint8_t TEMPLATE_FUNC_NAME (const void* Buffer,
                            uint16_t Length)
{
 c94:	9c 01       	movw	r18, r24
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
 c96:	40 91 19 01 	lds	r20, 0x0119
 c9a:	50 91 1a 01 	lds	r21, 0x011A
 c9e:	46 17       	cp	r20, r22
 ca0:	57 07       	cpc	r21, r23
 ca2:	10 f4       	brcc	.+4      	; 0xca8 <Endpoint_Write_Control_PStream_LE+0x14>
uint8_t TEMPLATE_FUNC_NAME (const void* Buffer,
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
 ca4:	60 e0       	ldi	r22, 0x00	; 0
 ca6:	40 c0       	rjmp	.+128    	; 0xd28 <Endpoint_Write_Control_PStream_LE+0x94>
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
 ca8:	61 15       	cp	r22, r1
 caa:	71 05       	cpc	r23, r1
 cac:	11 f0       	breq	.+4      	; 0xcb2 <Endpoint_Write_Control_PStream_LE+0x1e>
 cae:	ab 01       	movw	r20, r22
 cb0:	f9 cf       	rjmp	.-14     	; 0xca4 <Endpoint_Write_Control_PStream_LE+0x10>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 cb2:	80 91 e8 00 	lds	r24, 0x00E8
 cb6:	8e 77       	andi	r24, 0x7E	; 126
 cb8:	80 93 e8 00 	sts	0x00E8, r24
 cbc:	40 e0       	ldi	r20, 0x00	; 0
 cbe:	50 e0       	ldi	r21, 0x00	; 0
 cc0:	f1 cf       	rjmp	.-30     	; 0xca4 <Endpoint_Write_Control_PStream_LE+0x10>
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
 cc2:	80 91 12 01 	lds	r24, 0x0112

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
 cc6:	88 23       	and	r24, r24
 cc8:	09 f4       	brne	.+2      	; 0xccc <Endpoint_Write_Control_PStream_LE+0x38>
 cca:	40 c0       	rjmp	.+128    	; 0xd4c <Endpoint_Write_Control_PStream_LE+0xb8>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
 ccc:	85 30       	cpi	r24, 0x05	; 5
 cce:	09 f4       	brne	.+2      	; 0xcd2 <Endpoint_Write_Control_PStream_LE+0x3e>
 cd0:	3f c0       	rjmp	.+126    	; 0xd50 <Endpoint_Write_Control_PStream_LE+0xbc>
			 *  \return Boolean true if the selected endpoint has received a SETUP packet, false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 cd2:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
 cd6:	83 ff       	sbrs	r24, 3
 cd8:	02 c0       	rjmp	.+4      	; 0xcde <Endpoint_Write_Control_PStream_LE+0x4a>
 cda:	81 e0       	ldi	r24, 0x01	; 1
 cdc:	08 95       	ret
			 *  \return Boolean true if current endpoint is has received an OUT packet, false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 cde:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
 ce2:	82 fd       	sbrc	r24, 2
 ce4:	2d c0       	rjmp	.+90     	; 0xd40 <Endpoint_Write_Control_PStream_LE+0xac>
			 *  \return Boolean true if the current endpoint is ready for an IN packet, false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 ce6:	80 91 e8 00 	lds	r24, 0x00E8
		  break;

		if (Endpoint_IsINReady())
 cea:	80 ff       	sbrs	r24, 0
 cec:	1d c0       	rjmp	.+58     	; 0xd28 <Endpoint_Write_Control_PStream_LE+0x94>
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
					return UEBCX;
 cee:	80 91 f2 00 	lds	r24, 0x00F2
 cf2:	90 91 f3 00 	lds	r25, 0x00F3
 cf6:	09 c0       	rjmp	.+18     	; 0xd0a <Endpoint_Write_Control_PStream_LE+0x76>
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_ControlEndpointSize))
 cf8:	f9 01       	movw	r30, r18
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
 cfa:	2f 5f       	subi	r18, 0xFF	; 255
 cfc:	3f 4f       	sbci	r19, 0xFF	; 255
 cfe:	e4 91       	lpm	r30, Z+
			 *  \param[in] Byte  Next byte to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_Byte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_Byte(const uint8_t Byte)
			{
				UEDATX = Byte;
 d00:	e0 93 f1 00 	sts	0x00F1, r30
				Length--;
 d04:	41 50       	subi	r20, 0x01	; 1
 d06:	50 40       	sbci	r21, 0x00	; 0
				BytesInEndpoint++;
 d08:	01 96       	adiw	r24, 0x01	; 1

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_ControlEndpointSize))
 d0a:	41 15       	cp	r20, r1
 d0c:	51 05       	cpc	r21, r1
 d0e:	19 f0       	breq	.+6      	; 0xd16 <Endpoint_Write_Control_PStream_LE+0x82>
 d10:	88 30       	cpi	r24, 0x08	; 8
 d12:	91 05       	cpc	r25, r1
 d14:	88 f3       	brcs	.-30     	; 0xcf8 <Endpoint_Write_Control_PStream_LE+0x64>
				TEMPLATE_TRANSFER_BYTE(DataStream);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_ControlEndpointSize);
 d16:	60 e0       	ldi	r22, 0x00	; 0
 d18:	08 97       	sbiw	r24, 0x08	; 8
 d1a:	09 f4       	brne	.+2      	; 0xd1e <Endpoint_Write_Control_PStream_LE+0x8a>
 d1c:	61 e0       	ldi	r22, 0x01	; 1
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 d1e:	80 91 e8 00 	lds	r24, 0x00E8
 d22:	8e 77       	andi	r24, 0x7E	; 126
 d24:	80 93 e8 00 	sts	0x00E8, r24
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
 d28:	41 15       	cp	r20, r1
 d2a:	51 05       	cpc	r21, r1
 d2c:	51 f6       	brne	.-108    	; 0xcc2 <Endpoint_Write_Control_PStream_LE+0x2e>
 d2e:	66 23       	and	r22, r22
 d30:	41 f6       	brne	.-112    	; 0xcc2 <Endpoint_Write_Control_PStream_LE+0x2e>
 d32:	06 c0       	rjmp	.+12     	; 0xd40 <Endpoint_Write_Control_PStream_LE+0xac>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
 d34:	80 91 12 01 	lds	r24, 0x0112

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
 d38:	88 23       	and	r24, r24
 d3a:	41 f0       	breq	.+16     	; 0xd4c <Endpoint_Write_Control_PStream_LE+0xb8>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
 d3c:	85 30       	cpi	r24, 0x05	; 5
 d3e:	41 f0       	breq	.+16     	; 0xd50 <Endpoint_Write_Control_PStream_LE+0xbc>
			 *  \return Boolean true if current endpoint is has received an OUT packet, false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 d40:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
 d44:	82 ff       	sbrs	r24, 2
 d46:	f6 cf       	rjmp	.-20     	; 0xd34 <Endpoint_Write_Control_PStream_LE+0xa0>
 d48:	80 e0       	ldi	r24, 0x00	; 0
 d4a:	08 95       	ret
 d4c:	82 e0       	ldi	r24, 0x02	; 2
 d4e:	08 95       	ret
 d50:	83 e0       	ldi	r24, 0x03	; 3
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
 d52:	08 95       	ret

00000d54 <Endpoint_Write_Stream_LE>:
uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE Buffer,
                            uint16_t Length
                            __CALLBACK_PARAM)
{
 d54:	ff 92       	push	r15
 d56:	0f 93       	push	r16
 d58:	1f 93       	push	r17
 d5a:	cf 93       	push	r28
 d5c:	df 93       	push	r29
 d5e:	18 2f       	mov	r17, r24
 d60:	09 2f       	mov	r16, r25
 d62:	eb 01       	movw	r28, r22
	uint8_t* DataStream = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	uint8_t  ErrorCode;

	if ((ErrorCode = Endpoint_WaitUntilReady()))
 d64:	71 dc       	rcall	.-1822   	; 0x648 <Endpoint_WaitUntilReady>
 d66:	f8 2e       	mov	r15, r24
 d68:	88 23       	and	r24, r24
 d6a:	d1 f4       	brne	.+52     	; 0xda0 <Endpoint_Write_Stream_LE+0x4c>
uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE Buffer,
                            uint16_t Length
                            __CALLBACK_PARAM)
{
	uint8_t* DataStream = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
 d6c:	81 2f       	mov	r24, r17
 d6e:	90 2f       	mov	r25, r16
 d70:	9c 01       	movw	r18, r24
 d72:	89 01       	movw	r16, r18
 d74:	13 c0       	rjmp	.+38     	; 0xd9c <Endpoint_Write_Stream_LE+0x48>
			 *  \return Boolean true if the currently selected endpoint may be read from or written to, depending on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
 d76:	80 91 e8 00 	lds	r24, 0x00E8
	}
	#endif

	while (Length)
	{
		if (!(Endpoint_IsReadWriteAllowed()))
 d7a:	85 fd       	sbrc	r24, 5
 d7c:	09 c0       	rjmp	.+18     	; 0xd90 <Endpoint_Write_Stream_LE+0x3c>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 d7e:	80 91 e8 00 	lds	r24, 0x00E8
 d82:	8e 77       	andi	r24, 0x7E	; 126
 d84:	80 93 e8 00 	sts	0x00E8, r24
			#if !defined(NO_STREAM_CALLBACKS)
			if ((Callback != NULL) && (Callback() == STREAMCALLBACK_Abort))
			  return ENDPOINT_RWSTREAM_CallbackAborted;
			#endif

			if ((ErrorCode = Endpoint_WaitUntilReady()))
 d88:	5f dc       	rcall	.-1858   	; 0x648 <Endpoint_WaitUntilReady>
 d8a:	88 23       	and	r24, r24
 d8c:	39 f0       	breq	.+14     	; 0xd9c <Endpoint_Write_Stream_LE+0x48>
 d8e:	09 c0       	rjmp	.+18     	; 0xda2 <Endpoint_Write_Stream_LE+0x4e>
			  return ErrorCode;
		}
		else
		{
			TEMPLATE_TRANSFER_BYTE(DataStream);
 d90:	f8 01       	movw	r30, r16
 d92:	81 91       	ld	r24, Z+
 d94:	8f 01       	movw	r16, r30
			 *  \param[in] Byte  Next byte to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_Byte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_Byte(const uint8_t Byte)
			{
				UEDATX = Byte;
 d96:	80 93 f1 00 	sts	0x00F1, r24
			Length--;
 d9a:	21 97       	sbiw	r28, 0x01	; 1
				} while (Length >= 8);
		}
	}
	#endif

	while (Length)
 d9c:	20 97       	sbiw	r28, 0x00	; 0
 d9e:	59 f7       	brne	.-42     	; 0xd76 <Endpoint_Write_Stream_LE+0x22>
 da0:	8f 2d       	mov	r24, r15
			Length--;
		}
	}

	return ENDPOINT_RWSTREAM_NoError;
}
 da2:	df 91       	pop	r29
 da4:	cf 91       	pop	r28
 da6:	1f 91       	pop	r17
 da8:	0f 91       	pop	r16
 daa:	ff 90       	pop	r15
 dac:	08 95       	ret

00000dae <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
 dae:	1f 93       	push	r17
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_DeviceTask(void)
{
	if (USB_DeviceState != DEVICE_STATE_Unattached)
 db0:	80 91 12 01 	lds	r24, 0x0112
 db4:	88 23       	and	r24, r24
 db6:	61 f0       	breq	.+24     	; 0xdd0 <USB_USBTask+0x22>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return (UENUM & ENDPOINT_EPNUM_MASK);
 db8:	10 91 e9 00 	lds	r17, 0x00E9
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 dbc:	10 92 e9 00 	sts	0x00E9, r1
			 *  \return Boolean true if the selected endpoint has received a SETUP packet, false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 dc0:	80 91 e8 00 	lds	r24, 0x00E8
	{
		uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();

		Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

		if (Endpoint_IsSETUPReceived())
 dc4:	83 ff       	sbrs	r24, 3
 dc6:	01 c0       	rjmp	.+2      	; 0xdca <USB_USBTask+0x1c>
		  USB_Device_ProcessControlRequest();
 dc8:	9a dd       	rcall	.-1228   	; 0x8fe <USB_Device_ProcessControlRequest>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return (UENUM & ENDPOINT_EPNUM_MASK);
 dca:	17 70       	andi	r17, 0x07	; 7
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 dcc:	10 93 e9 00 	sts	0x00E9, r17
		if (USB_CurrentMode == USB_MODE_Device)
		  USB_DeviceTask();
		else if (USB_CurrentMode == USB_MODE_Host)
		  USB_HostTask();
	#endif
}
 dd0:	1f 91       	pop	r17
 dd2:	08 95       	ret

00000dd4 <memcmp>:
 dd4:	fb 01       	movw	r30, r22
 dd6:	dc 01       	movw	r26, r24
 dd8:	04 c0       	rjmp	.+8      	; 0xde2 <memcmp+0xe>
 dda:	8d 91       	ld	r24, X+
 ddc:	01 90       	ld	r0, Z+
 dde:	80 19       	sub	r24, r0
 de0:	21 f4       	brne	.+8      	; 0xdea <memcmp+0x16>
 de2:	41 50       	subi	r20, 0x01	; 1
 de4:	50 40       	sbci	r21, 0x00	; 0
 de6:	c8 f7       	brcc	.-14     	; 0xdda <memcmp+0x6>
 de8:	88 1b       	sub	r24, r24
 dea:	99 0b       	sbc	r25, r25
 dec:	08 95       	ret

00000dee <_exit>:
 dee:	f8 94       	cli

00000df0 <__stop_program>:
 df0:	ff cf       	rjmp	.-2      	; 0xdf0 <__stop_program>
