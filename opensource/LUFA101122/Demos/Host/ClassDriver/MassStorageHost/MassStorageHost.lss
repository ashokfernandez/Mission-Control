
MassStorageHost.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000036  00800100  0000244e  000024e2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000244e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000013  00800136  00800136  00002518  2**0
                  ALLOC
  3 .stab         00001110  00000000  00000000  00002518  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000003cc  00000000  00000000  00003628  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000006d0  00000000  00000000  000039f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000e82  00000000  00000000  000040c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000b161  00000000  00000000  00004f46  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00002b88  00000000  00000000  000100a7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000763e  00000000  00000000  00012c2f  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000aa0  00000000  00000000  0001a270  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00004267  00000000  00000000  0001ad10  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00005017  00000000  00000000  0001ef77  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000007c8  00000000  00000000  00023f8e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
}

uint8_t USB_Host_GetDeviceStringDescriptor(const uint8_t Index,
                                           void* const Buffer,
                                           const uint8_t BufferLength)
{
       0:	06 c2       	rjmp	.+1036   	; 0x40e <__ctors_end>
{
	USB_GetNextDescriptorOfType(BytesRem, CurrConfigLoc, AfterType);

	if (*BytesRem)
	  USB_GetNextDescriptorOfType(BytesRem, CurrConfigLoc, Type);
}
       2:	00 00       	nop
			Length--;
		}
	}

	return PIPE_RWSTREAM_NoError;
}
       4:	22 c2       	rjmp	.+1092   	; 0x44a <__bad_interrupt>
                                  const uint8_t LUNIndex,
                                  const uint32_t BlockAddress,
                                  const uint8_t Blocks,
                                  const uint16_t BlockSize,
                                  const void* BlockBuffer)
{
       6:	00 00       	nop
       8:	20 c2       	rjmp	.+1088   	; 0x44a <__bad_interrupt>
       a:	00 00       	nop
       c:	1e c2       	rjmp	.+1084   	; 0x44a <__bad_interrupt>
       e:	00 00       	nop
      10:	1c c2       	rjmp	.+1080   	; 0x44a <__bad_interrupt>
      12:	00 00       	nop
      14:	1a c2       	rjmp	.+1076   	; 0x44a <__bad_interrupt>
      16:	00 00       	nop
      18:	18 c2       	rjmp	.+1072   	; 0x44a <__bad_interrupt>
      1a:	00 00       	nop
      1c:	16 c2       	rjmp	.+1068   	; 0x44a <__bad_interrupt>
      1e:	00 00       	nop
      20:	14 c2       	rjmp	.+1064   	; 0x44a <__bad_interrupt>
      22:	00 00       	nop
      24:	12 c2       	rjmp	.+1060   	; 0x44a <__bad_interrupt>
      26:	00 00       	nop
      28:	a7 c7       	rjmp	.+3918   	; 0xf78 <__vector_10>
      2a:	00 00       	nop
      2c:	0e c2       	rjmp	.+1052   	; 0x44a <__bad_interrupt>
      2e:	00 00       	nop
      30:	0c c2       	rjmp	.+1048   	; 0x44a <__bad_interrupt>
      32:	00 00       	nop
      34:	0a c2       	rjmp	.+1044   	; 0x44a <__bad_interrupt>
      36:	00 00       	nop
      38:	08 c2       	rjmp	.+1040   	; 0x44a <__bad_interrupt>
      3a:	00 00       	nop
      3c:	06 c2       	rjmp	.+1036   	; 0x44a <__bad_interrupt>
      3e:	00 00       	nop
      40:	04 c2       	rjmp	.+1032   	; 0x44a <__bad_interrupt>
      42:	00 00       	nop
      44:	02 c2       	rjmp	.+1028   	; 0x44a <__bad_interrupt>
      46:	00 00       	nop
      48:	00 c2       	rjmp	.+1024   	; 0x44a <__bad_interrupt>
      4a:	00 00       	nop
      4c:	fe c1       	rjmp	.+1020   	; 0x44a <__bad_interrupt>
      4e:	00 00       	nop
      50:	fc c1       	rjmp	.+1016   	; 0x44a <__bad_interrupt>
      52:	00 00       	nop
      54:	fa c1       	rjmp	.+1012   	; 0x44a <__bad_interrupt>
      56:	00 00       	nop
      58:	f8 c1       	rjmp	.+1008   	; 0x44a <__bad_interrupt>
      5a:	00 00       	nop
      5c:	f6 c1       	rjmp	.+1004   	; 0x44a <__bad_interrupt>
      5e:	00 00       	nop
      60:	f4 c1       	rjmp	.+1000   	; 0x44a <__bad_interrupt>
      62:	00 00       	nop
      64:	f2 c1       	rjmp	.+996    	; 0x44a <__bad_interrupt>
      66:	00 00       	nop
      68:	f0 c1       	rjmp	.+992    	; 0x44a <__bad_interrupt>
      6a:	00 00       	nop
      6c:	ee c1       	rjmp	.+988    	; 0x44a <__bad_interrupt>
      6e:	00 00       	nop
      70:	ec c1       	rjmp	.+984    	; 0x44a <__bad_interrupt>
      72:	00 00       	nop
      74:	ea c1       	rjmp	.+980    	; 0x44a <__bad_interrupt>
      76:	00 00       	nop
      78:	e8 c1       	rjmp	.+976    	; 0x44a <__bad_interrupt>
      7a:	00 00       	nop
      7c:	e6 c1       	rjmp	.+972    	; 0x44a <__bad_interrupt>
      7e:	00 00       	nop
      80:	e4 c1       	rjmp	.+968    	; 0x44a <__bad_interrupt>
      82:	00 00       	nop
      84:	e2 c1       	rjmp	.+964    	; 0x44a <__bad_interrupt>
      86:	00 00       	nop
      88:	e0 c1       	rjmp	.+960    	; 0x44a <__bad_interrupt>
      8a:	00 00       	nop
      8c:	de c1       	rjmp	.+956    	; 0x44a <__bad_interrupt>
      8e:	00 00       	nop
      90:	dc c1       	rjmp	.+952    	; 0x44a <__bad_interrupt>
      92:	00 00       	nop
      94:	da c1       	rjmp	.+948    	; 0x44a <__bad_interrupt>
      96:	00 00       	nop

00000098 <__c.4274>:
      98:	1b 5b 33 31 6d 44 65 76 20 45 6e 75 6d 20 45 72     .[31mDev Enum Er
      a8:	72 6f 72 0d 0a 20 2d 2d 20 45 72 72 6f 72 20 43     ror.. -- Error C
      b8:	6f 64 65 20 25 64 0d 0a 20 2d 2d 20 53 75 62 20     ode %d.. -- Sub 
      c8:	45 72 72 6f 72 20 43 6f 64 65 20 25 64 0d 0a 20     Error Code %d.. 
      d8:	2d 2d 20 49 6e 20 53 74 61 74 65 20 25 64 0d 0a     -- In State %d..
      e8:	1b 5b 33 37 6d 00                                   .[37m.

000000ee <__c.4266>:
      ee:	1b 5b 33 31 6d 48 6f 73 74 20 4d 6f 64 65 20 45     .[31mHost Mode E
      fe:	72 72 6f 72 0d 0a 20 2d 2d 20 45 72 72 6f 72 20     rror.. -- Error 
     10e:	43 6f 64 65 20 25 64 0d 0a 1b 5b 33 37 6d 00        Code %d...[37m.

0000011d <__c.4258>:
     11d:	0d 0a 44 65 76 69 63 65 20 55 6e 61 74 74 61 63     ..Device Unattac
     12d:	68 65 64 2e 0d 0a 00                                hed....

00000134 <__c.4253>:
     134:	44 65 76 69 63 65 20 41 74 74 61 63 68 65 64 2e     Device Attached.
     144:	0d 0a 00                                            ...

00000147 <__c.4192>:
     147:	0d 0a 00                                            ...

0000014a <__c.4185>:
     14a:	20 20 20 20 00                                          .

0000014f <__c.4180>:
     14f:	25 2e 32 58 20 00                                   %.2X .

00000155 <__c.4174>:
     155:	0d 0a 43 6f 6e 74 65 6e 74 73 20 6f 66 20 66 69     ..Contents of fi
     165:	72 73 74 20 62 6c 6f 63 6b 3a 0d 0a 00              rst block:...

00000172 <__c.4172>:
     172:	45 72 72 6f 72 20 72 65 61 64 69 6e 67 20 64 65     Error reading de
     182:	76 69 63 65 20 62 6c 6f 63 6b 2e 0d 0a 00           vice block....

00000190 <__c.4169>:
     190:	25 6c 75 20 62 6c 6f 63 6b 73 20 6f 66 20 25 6c     %lu blocks of %l
     1a0:	75 20 62 79 74 65 73 2e 0d 0a 00                    u bytes....

000001ab <__c.4167>:
     1ab:	45 72 72 6f 72 20 72 65 74 72 69 65 76 69 6e 67     Error retrieving
     1bb:	20 64 65 76 69 63 65 20 63 61 70 61 63 69 74 79      device capacity
     1cb:	2e 0d 0a 00                                         ....

000001cf <__c.4164>:
     1cf:	52 65 74 72 69 65 76 69 6e 67 20 43 61 70 61 63     Retrieving Capac
     1df:	69 74 79 2e 2e 2e 0d 0a 00                          ity......

000001e8 <__c.4161>:
     1e8:	45 72 72 6f 72 20 77 61 69 74 69 6e 67 20 66 6f     Error waiting fo
     1f8:	72 20 64 65 76 69 63 65 20 74 6f 20 62 65 20 72     r device to be r
     208:	65 61 64 79 2e 0d 0a 00                             eady....

00000210 <__c.4157>:
     210:	57 61 69 74 69 6e 67 20 75 6e 74 69 6c 20 72 65     Waiting until re
     220:	61 64 79 2e 2e 2e 0d 0a 00                          ady......

00000229 <__c.4155>:
     229:	56 65 6e 64 6f 72 20 22 25 2e 38 73 22 2c 20 50     Vendor "%.8s", P
     239:	72 6f 64 75 63 74 20 22 25 2e 31 36 73 22 0d 0a     roduct "%.16s"..
     249:	00                                                  .

0000024a <__c.4153>:
     24a:	45 72 72 6f 72 20 72 65 74 72 69 65 76 69 6e 67     Error retrieving
     25a:	20 64 65 76 69 63 65 20 49 6e 71 75 69 72 79 20      device Inquiry 
     26a:	64 61 74 61 2e 0d 0a 00                             data....

00000272 <__c.4150>:
     272:	45 72 72 6f 72 20 73 65 74 74 69 6e 67 20 50 72     Error setting Pr
     282:	65 76 65 6e 74 20 44 65 76 69 63 65 20 52 65 6d     event Device Rem
     292:	6f 76 61 6c 20 62 69 74 2e 0d 0a 00                 oval bit....

0000029e <__c.4148>:
     29e:	45 72 72 6f 72 20 72 65 74 72 69 65 76 69 6e 67     Error retrieving
     2ae:	20 64 65 76 69 63 65 20 73 65 6e 73 65 2e 0d 0a      device sense...
     2be:	00                                                  .

000002bf <__c.4145>:
     2bf:	45 72 72 6f 72 20 72 65 73 65 74 74 69 6e 67 20     Error resetting 
     2cf:	4d 61 73 73 20 53 74 6f 72 61 67 65 20 69 6e 74     Mass Storage int
     2df:	65 72 66 61 63 65 2e 0d 0a 00                       erface....

000002e9 <__c.4143>:
     2e9:	54 6f 74 61 6c 20 4c 55 4e 73 3a 20 25 64 20 2d     Total LUNs: %d -
     2f9:	20 55 73 69 6e 67 20 66 69 72 73 74 20 4c 55 4e      Using first LUN
     309:	20 69 6e 20 64 65 76 69 63 65 2e 0d 0a 00            in device....

00000317 <__c.4141>:
     317:	45 72 72 6f 72 20 72 65 74 72 69 65 76 69 6e 67     Error retrieving
     327:	20 6d 61 78 20 4c 55 4e 20 69 6e 64 65 78 2e 0d      max LUN index..
     337:	0a 00                                               ..

00000339 <__c.4137>:
     339:	4d 61 73 73 20 53 74 6f 72 61 67 65 20 44 65 76     Mass Storage Dev
     349:	69 63 65 20 45 6e 75 6d 65 72 61 74 65 64 2e 0d     ice Enumerated..
     359:	0a 00                                               ..

0000035b <__c.4135>:
     35b:	45 72 72 6f 72 20 53 65 74 74 69 6e 67 20 44 65     Error Setting De
     36b:	76 69 63 65 20 43 6f 6e 66 69 67 75 72 61 74 69     vice Configurati
     37b:	6f 6e 2e 0d 0a 00                                   on....

00000381 <__c.4133>:
     381:	41 74 74 61 63 68 65 64 20 44 65 76 69 63 65 20     Attached Device 
     391:	4e 6f 74 20 61 20 56 61 6c 69 64 20 4d 61 73 73     Not a Valid Mass
     3a1:	20 53 74 6f 72 61 67 65 20 44 65 76 69 63 65 2e      Storage Device.
     3b1:	0d 0a 00                                            ...

000003b4 <__c.4130>:
     3b4:	45 72 72 6f 72 20 52 65 74 72 69 65 76 69 6e 67     Error Retrieving
     3c4:	20 43 6f 6e 66 69 67 75 72 61 74 69 6f 6e 20 44      Configuration D
     3d4:	65 73 63 72 69 70 74 6f 72 2e 0d 0a 00              escriptor....

000003e1 <__c.4125>:
     3e1:	1b 5b 33 36 6d 4d 61 73 73 20 53 74 6f 72 61 67     .[36mMass Storag
     3f1:	65 20 48 6f 73 74 20 44 65 6d 6f 20 72 75 6e 6e     e Host Demo runn
     401:	69 6e 67 2e 0d 0a 1b 5b 33 37 6d 00 00              ing....[37m..

0000040e <__ctors_end>:
     40e:	11 24       	eor	r1, r1
     410:	1f be       	out	0x3f, r1	; 63
     412:	cf ef       	ldi	r28, 0xFF	; 255
     414:	d0 e2       	ldi	r29, 0x20	; 32
     416:	de bf       	out	0x3e, r29	; 62
     418:	cd bf       	out	0x3d, r28	; 61

0000041a <__do_copy_data>:
     41a:	11 e0       	ldi	r17, 0x01	; 1
     41c:	a0 e0       	ldi	r26, 0x00	; 0
     41e:	b1 e0       	ldi	r27, 0x01	; 1
     420:	ee e4       	ldi	r30, 0x4E	; 78
     422:	f4 e2       	ldi	r31, 0x24	; 36
     424:	00 e0       	ldi	r16, 0x00	; 0
     426:	0b bf       	out	0x3b, r16	; 59
     428:	02 c0       	rjmp	.+4      	; 0x42e <__do_copy_data+0x14>
     42a:	07 90       	elpm	r0, Z+
     42c:	0d 92       	st	X+, r0
     42e:	a6 33       	cpi	r26, 0x36	; 54
     430:	b1 07       	cpc	r27, r17
     432:	d9 f7       	brne	.-10     	; 0x42a <__do_copy_data+0x10>

00000434 <__do_clear_bss>:
     434:	11 e0       	ldi	r17, 0x01	; 1
     436:	a6 e3       	ldi	r26, 0x36	; 54
     438:	b1 e0       	ldi	r27, 0x01	; 1
     43a:	01 c0       	rjmp	.+2      	; 0x43e <.do_clear_bss_start>

0000043c <.do_clear_bss_loop>:
     43c:	1d 92       	st	X+, r1

0000043e <.do_clear_bss_start>:
     43e:	a9 34       	cpi	r26, 0x49	; 73
     440:	b1 07       	cpc	r27, r17
     442:	e1 f7       	brne	.-8      	; 0x43c <.do_clear_bss_loop>
     444:	98 d0       	rcall	.+304    	; 0x576 <main>
     446:	0c 94 25 12 	jmp	0x244a	; 0x244a <_exit>

0000044a <__bad_interrupt>:
     44a:	da cd       	rjmp	.-1100   	; 0x0 <__vectors>

0000044c <EVENT_USB_Host_DeviceEnumerationComplete>:
				PORTD &= ~LEDMask;
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
			{
				PORTD = ((PORTD & ~LEDS_ALL_LEDS) | LEDMask);
     44c:	8b b1       	in	r24, 0x0b	; 11
     44e:	8f 70       	andi	r24, 0x0F	; 15
     450:	80 66       	ori	r24, 0x60	; 96
     452:	8b b9       	out	0x0b, r24	; 11
 *  enumerated by the host and is now ready to be used by the application.
 */
void EVENT_USB_Host_DeviceEnumerationComplete(void)
{
	LEDs_SetAllLEDs(LEDMASK_USB_READY);
}
     454:	08 95       	ret

00000456 <EVENT_USB_Host_DeviceEnumerationFailed>:
 *  enumerating an attached USB device.
 */
void EVENT_USB_Host_DeviceEnumerationFailed(const uint8_t ErrorCode,
                                            const uint8_t SubErrorCode)
{
	printf_P(PSTR(ESC_FG_RED "Dev Enum Error\r\n"
     456:	90 91 42 01 	lds	r25, 0x0142
     45a:	2d b7       	in	r18, 0x3d	; 61
     45c:	3e b7       	in	r19, 0x3e	; 62
     45e:	28 50       	subi	r18, 0x08	; 8
     460:	30 40       	sbci	r19, 0x00	; 0
     462:	0f b6       	in	r0, 0x3f	; 63
     464:	f8 94       	cli
     466:	3e bf       	out	0x3e, r19	; 62
     468:	0f be       	out	0x3f, r0	; 63
     46a:	2d bf       	out	0x3d, r18	; 61
     46c:	ed b7       	in	r30, 0x3d	; 61
     46e:	fe b7       	in	r31, 0x3e	; 62
     470:	31 96       	adiw	r30, 0x01	; 1
     472:	28 e9       	ldi	r18, 0x98	; 152
     474:	30 e0       	ldi	r19, 0x00	; 0
     476:	ad b7       	in	r26, 0x3d	; 61
     478:	be b7       	in	r27, 0x3e	; 62
     47a:	12 96       	adiw	r26, 0x02	; 2
     47c:	3c 93       	st	X, r19
     47e:	2e 93       	st	-X, r18
     480:	11 97       	sbiw	r26, 0x01	; 1
     482:	82 83       	std	Z+2, r24	; 0x02
     484:	13 82       	std	Z+3, r1	; 0x03
     486:	64 83       	std	Z+4, r22	; 0x04
     488:	15 82       	std	Z+5, r1	; 0x05
     48a:	96 83       	std	Z+6, r25	; 0x06
     48c:	17 82       	std	Z+7, r1	; 0x07
     48e:	0e 94 5e 0f 	call	0x1ebc	; 0x1ebc <printf_P>
     492:	8b b1       	in	r24, 0x0b	; 11
     494:	8f 70       	andi	r24, 0x0F	; 15
     496:	80 69       	ori	r24, 0x90	; 144
     498:	8b b9       	out	0x0b, r24	; 11
     49a:	2d b7       	in	r18, 0x3d	; 61
     49c:	3e b7       	in	r19, 0x3e	; 62
     49e:	28 5f       	subi	r18, 0xF8	; 248
     4a0:	3f 4f       	sbci	r19, 0xFF	; 255
     4a2:	0f b6       	in	r0, 0x3f	; 63
     4a4:	f8 94       	cli
     4a6:	3e bf       	out	0x3e, r19	; 62
     4a8:	0f be       	out	0x3f, r0	; 63
     4aa:	2d bf       	out	0x3d, r18	; 61
	                         " -- Error Code %d\r\n"
	                         " -- Sub Error Code %d\r\n"
	                         " -- In State %d\r\n" ESC_FG_WHITE), ErrorCode, SubErrorCode, USB_HostState);

	LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
}
     4ac:	08 95       	ret

000004ae <EVENT_USB_Host_HostError>:
	LEDs_SetAllLEDs(LEDMASK_USB_READY);
}

/** Event handler for the USB_HostError event. This indicates that a hardware error occurred while in host mode. */
void EVENT_USB_Host_HostError(const uint8_t ErrorCode)
{
     4ae:	1f 93       	push	r17
     4b0:	18 2f       	mov	r17, r24
	USB_ShutDown();
     4b2:	3d d5       	rcall	.+2682   	; 0xf2e <USB_ShutDown>

	printf_P(PSTR(ESC_FG_RED "Host Mode Error\r\n"
     4b4:	00 d0       	rcall	.+0      	; 0x4b6 <EVENT_USB_Host_HostError+0x8>
     4b6:	00 d0       	rcall	.+0      	; 0x4b8 <EVENT_USB_Host_HostError+0xa>
     4b8:	ed b7       	in	r30, 0x3d	; 61
     4ba:	fe b7       	in	r31, 0x3e	; 62
     4bc:	31 96       	adiw	r30, 0x01	; 1
     4be:	8e ee       	ldi	r24, 0xEE	; 238
     4c0:	90 e0       	ldi	r25, 0x00	; 0
     4c2:	ad b7       	in	r26, 0x3d	; 61
     4c4:	be b7       	in	r27, 0x3e	; 62
     4c6:	12 96       	adiw	r26, 0x02	; 2
     4c8:	9c 93       	st	X, r25
     4ca:	8e 93       	st	-X, r24
     4cc:	11 97       	sbiw	r26, 0x01	; 1
     4ce:	12 83       	std	Z+2, r17	; 0x02
     4d0:	13 82       	std	Z+3, r1	; 0x03
     4d2:	0e 94 5e 0f 	call	0x1ebc	; 0x1ebc <printf_P>
     4d6:	8b b1       	in	r24, 0x0b	; 11
     4d8:	8f 70       	andi	r24, 0x0F	; 15
     4da:	80 69       	ori	r24, 0x90	; 144
     4dc:	8b b9       	out	0x0b, r24	; 11
     4de:	0f 90       	pop	r0
     4e0:	0f 90       	pop	r0
     4e2:	0f 90       	pop	r0
     4e4:	0f 90       	pop	r0
     4e6:	ff cf       	rjmp	.-2      	; 0x4e6 <EVENT_USB_Host_HostError+0x38>

000004e8 <EVENT_USB_Host_DeviceUnattached>:
/** Event handler for the USB_DeviceUnattached event. This indicates that a device has been removed from the host, and
 *  stops the library USB task management process.
 */
void EVENT_USB_Host_DeviceUnattached(void)
{
	puts_P(PSTR("\r\nDevice Unattached.\r\n"));
     4e8:	8d e1       	ldi	r24, 0x1D	; 29
     4ea:	91 e0       	ldi	r25, 0x01	; 1
     4ec:	0e 94 80 0f 	call	0x1f00	; 0x1f00 <puts_P>
     4f0:	8b b1       	in	r24, 0x0b	; 11
     4f2:	8f 70       	andi	r24, 0x0F	; 15
     4f4:	80 61       	ori	r24, 0x10	; 16
     4f6:	8b b9       	out	0x0b, r24	; 11
	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
}
     4f8:	08 95       	ret

000004fa <EVENT_USB_Host_DeviceAttached>:
/** Event handler for the USB_DeviceAttached event. This indicates that a device has been attached to the host, and
 *  starts the library USB task to begin the enumeration and USB management process.
 */
void EVENT_USB_Host_DeviceAttached(void)
{
	puts_P(PSTR("Device Attached.\r\n"));
     4fa:	84 e3       	ldi	r24, 0x34	; 52
     4fc:	91 e0       	ldi	r25, 0x01	; 1
     4fe:	0e 94 80 0f 	call	0x1f00	; 0x1f00 <puts_P>
     502:	8b b1       	in	r24, 0x0b	; 11
     504:	8f 70       	andi	r24, 0x0F	; 15
     506:	80 6a       	ori	r24, 0xA0	; 160
     508:	8b b9       	out	0x0b, r24	; 11
	LEDs_SetAllLEDs(LEDMASK_USB_ENUMERATING);
}
     50a:	08 95       	ret

0000050c <SetupHardware>:

/** Configures the board hardware and chip peripherals for the demo's functionality. */
void SetupHardware(void)
{
	/* Disable watchdog if enabled by bootloader/fuses */
	MCUSR &= ~(1 << WDRF);
     50c:	84 b7       	in	r24, 0x34	; 52
     50e:	87 7f       	andi	r24, 0xF7	; 247
     510:	84 bf       	out	0x34, r24	; 52
	wdt_disable();
     512:	38 e1       	ldi	r19, 0x18	; 24
     514:	0f b6       	in	r0, 0x3f	; 63
     516:	f8 94       	cli
     518:	30 93 60 00 	sts	0x0060, r19
     51c:	10 92 60 00 	sts	0x0060, r1
     520:	0f be       	out	0x3f, r0	; 63

	/* Disable clock division */
	clock_prescale_set(clock_div_1);
     522:	80 e0       	ldi	r24, 0x00	; 0
     524:	90 e0       	ldi	r25, 0x00	; 0
     526:	20 e8       	ldi	r18, 0x80	; 128
     528:	0f b6       	in	r0, 0x3f	; 63
     52a:	f8 94       	cli
     52c:	20 93 61 00 	sts	0x0061, r18
     530:	80 93 61 00 	sts	0x0061, r24
     534:	0f be       	out	0x3f, r0	; 63
			 *  \param[in] DoubleSpeed  Enables double speed mode when set, halving the sample time to double the baud rate.
			 */
			static inline void Serial_Init(const uint32_t BaudRate,
			                               const bool DoubleSpeed)
			{
				UBRR1  = (DoubleSpeed ? SERIAL_2X_UBBRVAL(BaudRate) : SERIAL_UBBRVAL(BaudRate));
     536:	83 e3       	ldi	r24, 0x33	; 51
     538:	90 e0       	ldi	r25, 0x00	; 0
     53a:	90 93 cd 00 	sts	0x00CD, r25
     53e:	80 93 cc 00 	sts	0x00CC, r24

				UCSR1C = ((1 << UCSZ11) | (1 << UCSZ10));
     542:	86 e0       	ldi	r24, 0x06	; 6
     544:	80 93 ca 00 	sts	0x00CA, r24
				UCSR1A = (DoubleSpeed ? (1 << U2X1) : 0);
     548:	10 92 c8 00 	sts	0x00C8, r1
				UCSR1B = ((1 << TXEN1)  | (1 << RXEN1));
     54c:	30 93 c9 00 	sts	0x00C9, r19

				DDRD  |= (1 << 3);
     550:	53 9a       	sbi	0x0a, 3	; 10
				PORTD |= (1 << 2);
     552:	5a 9a       	sbi	0x0b, 2	; 11
			static inline void SerialStream_Init(const uint32_t BaudRate,
			                                     const bool DoubleSpeed)
			{
				Serial_Init(BaudRate, DoubleSpeed);

				stdout = &USARTStream;
     554:	87 e2       	ldi	r24, 0x27	; 39
     556:	91 e0       	ldi	r25, 0x01	; 1
     558:	90 93 46 01 	sts	0x0146, r25
     55c:	80 93 45 01 	sts	0x0145, r24
				stdin  = &USARTStream;
     560:	90 93 44 01 	sts	0x0144, r25
     564:	80 93 43 01 	sts	0x0143, r24

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void LEDs_Init(void)
			{
				DDRD  |=  LEDS_ALL_LEDS;
     568:	8a b1       	in	r24, 0x0a	; 10
     56a:	80 6f       	ori	r24, 0xF0	; 240
     56c:	8a b9       	out	0x0a, r24	; 10
				PORTD &= ~LEDS_ALL_LEDS;
     56e:	8b b1       	in	r24, 0x0b	; 11
     570:	8f 70       	andi	r24, 0x0F	; 15
     572:	8b b9       	out	0x0b, r24	; 11

	/* Hardware Initialization */
	SerialStream_Init(9600, false);
	LEDs_Init();
	USB_Init();
}
     574:	d3 c4       	rjmp	.+2470   	; 0xf1c <USB_Init>

00000576 <main>:

/** Main program entry point. This routine configures the hardware required by the application, then
 *  enters a loop to run the application tasks in sequence.
 */
int main(void)
{
     576:	2f 92       	push	r2
     578:	3f 92       	push	r3
     57a:	4f 92       	push	r4
     57c:	5f 92       	push	r5
     57e:	6f 92       	push	r6
     580:	7f 92       	push	r7
     582:	8f 92       	push	r8
     584:	9f 92       	push	r9
     586:	af 92       	push	r10
     588:	bf 92       	push	r11
     58a:	cf 92       	push	r12
     58c:	df 92       	push	r13
     58e:	ef 92       	push	r14
     590:	ff 92       	push	r15
     592:	0f 93       	push	r16
     594:	1f 93       	push	r17
     596:	df 93       	push	r29
     598:	cf 93       	push	r28
     59a:	cd b7       	in	r28, 0x3d	; 61
     59c:	de b7       	in	r29, 0x3e	; 62
     59e:	c1 54       	subi	r28, 0x41	; 65
     5a0:	d2 40       	sbci	r29, 0x02	; 2
     5a2:	0f b6       	in	r0, 0x3f	; 63
     5a4:	f8 94       	cli
     5a6:	de bf       	out	0x3e, r29	; 62
     5a8:	0f be       	out	0x3f, r0	; 63
     5aa:	cd bf       	out	0x3d, r28	; 61
	SetupHardware();
     5ac:	af df       	rcall	.-162    	; 0x50c <SetupHardware>

	puts_P(PSTR(ESC_FG_CYAN "Mass Storage Host Demo running.\r\n" ESC_FG_WHITE));
     5ae:	81 ee       	ldi	r24, 0xE1	; 225
     5b0:	93 e0       	ldi	r25, 0x03	; 3
     5b2:	0e 94 80 0f 	call	0x1f00	; 0x1f00 <puts_P>
				PORTD &= ~LEDMask;
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
			{
				PORTD = ((PORTD & ~LEDS_ALL_LEDS) | LEDMask);
     5b6:	8b b1       	in	r24, 0x0b	; 11
     5b8:	8f 70       	andi	r24, 0x0F	; 15
     5ba:	80 61       	ori	r24, 0x10	; 16
     5bc:	8b b9       	out	0x0b, r24	; 11

	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
	sei();
     5be:	78 94       	sei
				LEDs_SetAllLEDs(LEDMASK_USB_ENUMERATING);

				uint16_t ConfigDescriptorSize;
				uint8_t  ConfigDescriptorData[512];

				if (USB_Host_GetDeviceConfigDescriptor(1, &ConfigDescriptorSize, ConfigDescriptorData,
     5c0:	f2 e4       	ldi	r31, 0x42	; 66
     5c2:	4f 2e       	mov	r4, r31
     5c4:	51 2c       	mov	r5, r1
     5c6:	4c 0e       	add	r4, r28
     5c8:	5d 1e       	adc	r5, r29

					/* Print out the 16 bytes of the chunk in HEX format */
					for (uint8_t ByteOffset = 0; ByteOffset < (1 << 4); ByteOffset++)
					{
						char CurrByte = *(ChunkPtr + ByteOffset);
						printf_P(PSTR("%.2X "), CurrByte);
     5ca:	ef e4       	ldi	r30, 0x4F	; 79
     5cc:	2e 2e       	mov	r2, r30
     5ce:	e1 e0       	ldi	r30, 0x01	; 1
     5d0:	3e 2e       	mov	r3, r30
	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
	sei();

	for (;;)
	{
		switch (USB_HostState)
     5d2:	80 91 42 01 	lds	r24, 0x0142
     5d6:	8b 30       	cpi	r24, 0x0B	; 11
     5d8:	21 f0       	breq	.+8      	; 0x5e2 <main+0x6c>
     5da:	8c 30       	cpi	r24, 0x0C	; 12
     5dc:	09 f0       	breq	.+2      	; 0x5e0 <main+0x6a>
     5de:	b2 c1       	rjmp	.+868    	; 0x944 <main+0x3ce>
     5e0:	38 c0       	rjmp	.+112    	; 0x652 <main+0xdc>
     5e2:	8b b1       	in	r24, 0x0b	; 11
     5e4:	8f 70       	andi	r24, 0x0F	; 15
     5e6:	80 6a       	ori	r24, 0xA0	; 160
     5e8:	8b b9       	out	0x0b, r24	; 11
				LEDs_SetAllLEDs(LEDMASK_USB_ENUMERATING);

				uint16_t ConfigDescriptorSize;
				uint8_t  ConfigDescriptorData[512];

				if (USB_Host_GetDeviceConfigDescriptor(1, &ConfigDescriptorSize, ConfigDescriptorData,
     5ea:	81 e0       	ldi	r24, 0x01	; 1
     5ec:	be 01       	movw	r22, r28
     5ee:	6e 5f       	subi	r22, 0xFE	; 254
     5f0:	7f 4f       	sbci	r23, 0xFF	; 255
     5f2:	a2 01       	movw	r20, r4
     5f4:	20 e0       	ldi	r18, 0x00	; 0
     5f6:	32 e0       	ldi	r19, 0x02	; 2
     5f8:	93 d5       	rcall	.+2854   	; 0x1120 <USB_Host_GetDeviceConfigDescriptor>
     5fa:	88 23       	and	r24, r24
     5fc:	19 f0       	breq	.+6      	; 0x604 <main+0x8e>
				                                       sizeof(ConfigDescriptorData)) != HOST_GETCONFIG_Successful)
				{
					puts_P(PSTR("Error Retrieving Configuration Descriptor.\r\n"));
     5fe:	84 eb       	ldi	r24, 0xB4	; 180
     600:	93 e0       	ldi	r25, 0x03	; 3
     602:	0b c0       	rjmp	.+22     	; 0x61a <main+0xa4>
					LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
					USB_HostState = HOST_STATE_WaitForDeviceRemoval;
					break;
				}

				if (MS_Host_ConfigurePipes(&FlashDisk_MS_Interface,
     604:	6a 81       	ldd	r22, Y+2	; 0x02
     606:	7b 81       	ldd	r23, Y+3	; 0x03
     608:	80 e0       	ldi	r24, 0x00	; 0
     60a:	91 e0       	ldi	r25, 0x01	; 1
     60c:	a2 01       	movw	r20, r4
     60e:	0e 94 1d 0e 	call	0x1c3a	; 0x1c3a <MS_Host_ConfigurePipes>
     612:	88 23       	and	r24, r24
     614:	59 f0       	breq	.+22     	; 0x62c <main+0xb6>
				                           ConfigDescriptorSize, ConfigDescriptorData) != MS_ENUMERROR_NoError)
				{
					puts_P(PSTR("Attached Device Not a Valid Mass Storage Device.\r\n"));
     616:	81 e8       	ldi	r24, 0x81	; 129
     618:	93 e0       	ldi	r25, 0x03	; 3
     61a:	0e 94 80 0f 	call	0x1f00	; 0x1f00 <puts_P>
     61e:	8b b1       	in	r24, 0x0b	; 11
     620:	8f 70       	andi	r24, 0x0F	; 15
     622:	80 69       	ori	r24, 0x90	; 144
     624:	8b b9       	out	0x0b, r24	; 11
					LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
					USB_HostState = HOST_STATE_WaitForDeviceRemoval;
     626:	10 92 42 01 	sts	0x0142, r1
     62a:	8c c1       	rjmp	.+792    	; 0x944 <main+0x3ce>
					break;
				}

				if (USB_Host_SetDeviceConfiguration(1) != HOST_SENDCONTROL_Successful)
     62c:	81 e0       	ldi	r24, 0x01	; 1
     62e:	3c d2       	rcall	.+1144   	; 0xaa8 <USB_Host_SetDeviceConfiguration>
     630:	88 23       	and	r24, r24
     632:	19 f0       	breq	.+6      	; 0x63a <main+0xc4>
				{
					puts_P(PSTR("Error Setting Device Configuration.\r\n"));
     634:	8b e5       	ldi	r24, 0x5B	; 91
     636:	93 e0       	ldi	r25, 0x03	; 3
     638:	f0 cf       	rjmp	.-32     	; 0x61a <main+0xa4>
					LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
					USB_HostState = HOST_STATE_WaitForDeviceRemoval;
					break;
				}

				puts_P(PSTR("Mass Storage Device Enumerated.\r\n"));
     63a:	89 e3       	ldi	r24, 0x39	; 57
     63c:	93 e0       	ldi	r25, 0x03	; 3
     63e:	0e 94 80 0f 	call	0x1f00	; 0x1f00 <puts_P>
     642:	8b b1       	in	r24, 0x0b	; 11
     644:	8f 70       	andi	r24, 0x0F	; 15
     646:	80 66       	ori	r24, 0x60	; 96
     648:	8b b9       	out	0x0b, r24	; 11
				LEDs_SetAllLEDs(LEDMASK_USB_READY);
				USB_HostState = HOST_STATE_Configured;
     64a:	8c e0       	ldi	r24, 0x0C	; 12
     64c:	80 93 42 01 	sts	0x0142, r24
     650:	79 c1       	rjmp	.+754    	; 0x944 <main+0x3ce>
     652:	8b b1       	in	r24, 0x0b	; 11
     654:	8f 70       	andi	r24, 0x0F	; 15
     656:	80 62       	ori	r24, 0x20	; 32
     658:	8b b9       	out	0x0b, r24	; 11
				break;
			case HOST_STATE_Configured:
				LEDs_SetAllLEDs(LEDMASK_USB_BUSY);

				uint8_t MaxLUNIndex;
				if (MS_Host_GetMaxLUN(&FlashDisk_MS_Interface, &MaxLUNIndex))
     65a:	80 e0       	ldi	r24, 0x00	; 0
     65c:	91 e0       	ldi	r25, 0x01	; 1
     65e:	be 01       	movw	r22, r28
     660:	6f 5f       	subi	r22, 0xFF	; 255
     662:	7f 4f       	sbci	r23, 0xFF	; 255
     664:	0e 94 e1 0d 	call	0x1bc2	; 0x1bc2 <MS_Host_GetMaxLUN>
     668:	88 23       	and	r24, r24
     66a:	19 f0       	breq	.+6      	; 0x672 <main+0xfc>
				{
					puts_P(PSTR("Error retrieving max LUN index.\r\n"));
     66c:	87 e1       	ldi	r24, 0x17	; 23
     66e:	93 e0       	ldi	r25, 0x03	; 3
     670:	d4 cf       	rjmp	.-88     	; 0x61a <main+0xa4>
					LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
					USB_HostState = HOST_STATE_WaitForDeviceRemoval;
					break;
				}

				printf_P(PSTR("Total LUNs: %d - Using first LUN in device.\r\n"), (MaxLUNIndex + 1));
     672:	00 d0       	rcall	.+0      	; 0x674 <main+0xfe>
     674:	00 d0       	rcall	.+0      	; 0x676 <main+0x100>
     676:	e9 ee       	ldi	r30, 0xE9	; 233
     678:	f2 e0       	ldi	r31, 0x02	; 2
     67a:	ad b7       	in	r26, 0x3d	; 61
     67c:	be b7       	in	r27, 0x3e	; 62
     67e:	12 96       	adiw	r26, 0x02	; 2
     680:	fc 93       	st	X, r31
     682:	ee 93       	st	-X, r30
     684:	11 97       	sbiw	r26, 0x01	; 1
     686:	89 81       	ldd	r24, Y+1	; 0x01
     688:	90 e0       	ldi	r25, 0x00	; 0
     68a:	01 96       	adiw	r24, 0x01	; 1
     68c:	14 96       	adiw	r26, 0x04	; 4
     68e:	9c 93       	st	X, r25
     690:	8e 93       	st	-X, r24
     692:	13 97       	sbiw	r26, 0x03	; 3
     694:	0e 94 5e 0f 	call	0x1ebc	; 0x1ebc <printf_P>

				if (MS_Host_ResetMSInterface(&FlashDisk_MS_Interface))
     698:	0f 90       	pop	r0
     69a:	0f 90       	pop	r0
     69c:	0f 90       	pop	r0
     69e:	0f 90       	pop	r0
     6a0:	80 e0       	ldi	r24, 0x00	; 0
     6a2:	91 e0       	ldi	r25, 0x01	; 1
     6a4:	0e 94 04 0e 	call	0x1c08	; 0x1c08 <MS_Host_ResetMSInterface>
     6a8:	88 23       	and	r24, r24
     6aa:	19 f0       	breq	.+6      	; 0x6b2 <main+0x13c>
				{
					puts_P(PSTR("Error resetting Mass Storage interface.\r\n"));
     6ac:	8f eb       	ldi	r24, 0xBF	; 191
     6ae:	92 e0       	ldi	r25, 0x02	; 2
     6b0:	b4 cf       	rjmp	.-152    	; 0x61a <main+0xa4>
					USB_HostState = HOST_STATE_WaitForDeviceRemoval;
					break;
				}

				SCSI_Request_Sense_Response_t SenseData;
				if (MS_Host_RequestSense(&FlashDisk_MS_Interface, 0, &SenseData) != 0)
     6b2:	80 e0       	ldi	r24, 0x00	; 0
     6b4:	91 e0       	ldi	r25, 0x01	; 1
     6b6:	60 e0       	ldi	r22, 0x00	; 0
     6b8:	ae 01       	movw	r20, r28
     6ba:	44 5f       	subi	r20, 0xF4	; 244
     6bc:	5f 4f       	sbci	r21, 0xFF	; 255
     6be:	0e 94 ac 0c 	call	0x1958	; 0x1958 <MS_Host_RequestSense>
     6c2:	88 23       	and	r24, r24
     6c4:	19 f0       	breq	.+6      	; 0x6cc <main+0x156>
				{
					puts_P(PSTR("Error retrieving device sense.\r\n"));
     6c6:	8e e9       	ldi	r24, 0x9E	; 158
     6c8:	92 e0       	ldi	r25, 0x02	; 2
     6ca:	a7 cf       	rjmp	.-178    	; 0x61a <main+0xa4>
					LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
					USB_HostState = HOST_STATE_WaitForDeviceRemoval;
					break;
				}

				if (MS_Host_PreventAllowMediumRemoval(&FlashDisk_MS_Interface, 0, true))
     6cc:	80 e0       	ldi	r24, 0x00	; 0
     6ce:	91 e0       	ldi	r25, 0x01	; 1
     6d0:	60 e0       	ldi	r22, 0x00	; 0
     6d2:	41 e0       	ldi	r20, 0x01	; 1
     6d4:	0e 94 70 0c 	call	0x18e0	; 0x18e0 <MS_Host_PreventAllowMediumRemoval>
     6d8:	88 23       	and	r24, r24
     6da:	19 f0       	breq	.+6      	; 0x6e2 <main+0x16c>
				{
					puts_P(PSTR("Error setting Prevent Device Removal bit.\r\n"));
     6dc:	82 e7       	ldi	r24, 0x72	; 114
     6de:	92 e0       	ldi	r25, 0x02	; 2
     6e0:	9c cf       	rjmp	.-200    	; 0x61a <main+0xa4>
					USB_HostState = HOST_STATE_WaitForDeviceRemoval;
					break;
				}

				SCSI_Inquiry_Response_t InquiryData;
				if (MS_Host_GetInquiryData(&FlashDisk_MS_Interface, 0, &InquiryData))
     6e2:	80 e0       	ldi	r24, 0x00	; 0
     6e4:	91 e0       	ldi	r25, 0x01	; 1
     6e6:	60 e0       	ldi	r22, 0x00	; 0
     6e8:	ae 01       	movw	r20, r28
     6ea:	42 5e       	subi	r20, 0xE2	; 226
     6ec:	5f 4f       	sbci	r21, 0xFF	; 255
     6ee:	0e 94 9c 0d 	call	0x1b38	; 0x1b38 <MS_Host_GetInquiryData>
     6f2:	88 23       	and	r24, r24
     6f4:	19 f0       	breq	.+6      	; 0x6fc <main+0x186>
				{
					puts_P(PSTR("Error retrieving device Inquiry data.\r\n"));
     6f6:	8a e4       	ldi	r24, 0x4A	; 74
     6f8:	92 e0       	ldi	r25, 0x02	; 2
     6fa:	8f cf       	rjmp	.-226    	; 0x61a <main+0xa4>
					LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
					USB_HostState = HOST_STATE_WaitForDeviceRemoval;
					break;
				}

				printf_P(PSTR("Vendor \"%.8s\", Product \"%.16s\"\r\n"), InquiryData.VendorID, InquiryData.ProductID);
     6fc:	00 d0       	rcall	.+0      	; 0x6fe <main+0x188>
     6fe:	00 d0       	rcall	.+0      	; 0x700 <main+0x18a>
     700:	00 d0       	rcall	.+0      	; 0x702 <main+0x18c>
     702:	ed b7       	in	r30, 0x3d	; 61
     704:	fe b7       	in	r31, 0x3e	; 62
     706:	31 96       	adiw	r30, 0x01	; 1
     708:	89 e2       	ldi	r24, 0x29	; 41
     70a:	92 e0       	ldi	r25, 0x02	; 2
     70c:	ad b7       	in	r26, 0x3d	; 61
     70e:	be b7       	in	r27, 0x3e	; 62
     710:	12 96       	adiw	r26, 0x02	; 2
     712:	9c 93       	st	X, r25
     714:	8e 93       	st	-X, r24
     716:	11 97       	sbiw	r26, 0x01	; 1
     718:	a6 e2       	ldi	r26, 0x26	; 38
     71a:	b0 e0       	ldi	r27, 0x00	; 0
     71c:	ac 0f       	add	r26, r28
     71e:	bd 1f       	adc	r27, r29
     720:	b3 83       	std	Z+3, r27	; 0x03
     722:	a2 83       	std	Z+2, r26	; 0x02
     724:	8e e2       	ldi	r24, 0x2E	; 46
     726:	90 e0       	ldi	r25, 0x00	; 0
     728:	8c 0f       	add	r24, r28
     72a:	9d 1f       	adc	r25, r29
     72c:	95 83       	std	Z+5, r25	; 0x05
     72e:	84 83       	std	Z+4, r24	; 0x04
     730:	0e 94 5e 0f 	call	0x1ebc	; 0x1ebc <printf_P>

				puts_P(PSTR("Waiting until ready...\r\n"));
     734:	ad b7       	in	r26, 0x3d	; 61
     736:	be b7       	in	r27, 0x3e	; 62
     738:	16 96       	adiw	r26, 0x06	; 6
     73a:	0f b6       	in	r0, 0x3f	; 63
     73c:	f8 94       	cli
     73e:	be bf       	out	0x3e, r27	; 62
     740:	0f be       	out	0x3f, r0	; 63
     742:	ad bf       	out	0x3d, r26	; 61
     744:	80 e1       	ldi	r24, 0x10	; 16
     746:	92 e0       	ldi	r25, 0x02	; 2
     748:	0e 94 80 0f 	call	0x1f00	; 0x1f00 <puts_P>

				for (;;)
				{
					uint8_t ErrorCode = MS_Host_TestUnitReady(&FlashDisk_MS_Interface, 0);
     74c:	80 e0       	ldi	r24, 0x00	; 0
     74e:	91 e0       	ldi	r25, 0x01	; 1
     750:	60 e0       	ldi	r22, 0x00	; 0
     752:	0e 94 61 0d 	call	0x1ac2	; 0x1ac2 <MS_Host_TestUnitReady>

					if (!(ErrorCode))
     756:	88 23       	and	r24, r24
     758:	61 f0       	breq	.+24     	; 0x772 <main+0x1fc>
					  break;

					/* Check if an error other than a logical command error (device busy) received */
					if (ErrorCode != MS_ERROR_LOGICAL_CMD_FAILED)
     75a:	80 38       	cpi	r24, 0x80	; 128
     75c:	b9 f3       	breq	.-18     	; 0x74c <main+0x1d6>
					{
						puts_P(PSTR("Error waiting for device to be ready.\r\n"));
     75e:	88 ee       	ldi	r24, 0xE8	; 232
     760:	91 e0       	ldi	r25, 0x01	; 1
     762:	0e 94 80 0f 	call	0x1f00	; 0x1f00 <puts_P>
     766:	8b b1       	in	r24, 0x0b	; 11
     768:	8f 70       	andi	r24, 0x0F	; 15
     76a:	80 69       	ori	r24, 0x90	; 144
     76c:	8b b9       	out	0x0b, r24	; 11
						LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
						USB_HostState = HOST_STATE_WaitForDeviceRemoval;
     76e:	10 92 42 01 	sts	0x0142, r1
						break;
					}
				}

				puts_P(PSTR("Retrieving Capacity...\r\n"));
     772:	8f ec       	ldi	r24, 0xCF	; 207
     774:	91 e0       	ldi	r25, 0x01	; 1
     776:	0e 94 80 0f 	call	0x1f00	; 0x1f00 <puts_P>

				SCSI_Capacity_t DiskCapacity;
				if (MS_Host_ReadDeviceCapacity(&FlashDisk_MS_Interface, 0, &DiskCapacity))
     77a:	80 e0       	ldi	r24, 0x00	; 0
     77c:	91 e0       	ldi	r25, 0x01	; 1
     77e:	60 e0       	ldi	r22, 0x00	; 0
     780:	ae 01       	movw	r20, r28
     782:	4c 5f       	subi	r20, 0xFC	; 252
     784:	5f 4f       	sbci	r21, 0xFF	; 255
     786:	0e 94 f1 0c 	call	0x19e2	; 0x19e2 <MS_Host_ReadDeviceCapacity>
     78a:	88 23       	and	r24, r24
     78c:	19 f0       	breq	.+6      	; 0x794 <main+0x21e>
				{
					puts_P(PSTR("Error retrieving device capacity.\r\n"));
     78e:	8b ea       	ldi	r24, 0xAB	; 171
     790:	91 e0       	ldi	r25, 0x01	; 1
     792:	43 cf       	rjmp	.-378    	; 0x61a <main+0xa4>
					LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
					USB_HostState = HOST_STATE_WaitForDeviceRemoval;
					break;
				}

				printf_P(PSTR("%lu blocks of %lu bytes.\r\n"), DiskCapacity.Blocks, DiskCapacity.BlockSize);
     794:	ed b7       	in	r30, 0x3d	; 61
     796:	fe b7       	in	r31, 0x3e	; 62
     798:	3a 97       	sbiw	r30, 0x0a	; 10
     79a:	0f b6       	in	r0, 0x3f	; 63
     79c:	f8 94       	cli
     79e:	fe bf       	out	0x3e, r31	; 62
     7a0:	0f be       	out	0x3f, r0	; 63
     7a2:	ed bf       	out	0x3d, r30	; 61
     7a4:	31 96       	adiw	r30, 0x01	; 1
     7a6:	80 e9       	ldi	r24, 0x90	; 144
     7a8:	91 e0       	ldi	r25, 0x01	; 1
     7aa:	ad b7       	in	r26, 0x3d	; 61
     7ac:	be b7       	in	r27, 0x3e	; 62
     7ae:	12 96       	adiw	r26, 0x02	; 2
     7b0:	9c 93       	st	X, r25
     7b2:	8e 93       	st	-X, r24
     7b4:	11 97       	sbiw	r26, 0x01	; 1
     7b6:	8c 81       	ldd	r24, Y+4	; 0x04
     7b8:	9d 81       	ldd	r25, Y+5	; 0x05
     7ba:	ae 81       	ldd	r26, Y+6	; 0x06
     7bc:	bf 81       	ldd	r27, Y+7	; 0x07
     7be:	82 83       	std	Z+2, r24	; 0x02
     7c0:	93 83       	std	Z+3, r25	; 0x03
     7c2:	a4 83       	std	Z+4, r26	; 0x04
     7c4:	b5 83       	std	Z+5, r27	; 0x05
     7c6:	88 85       	ldd	r24, Y+8	; 0x08
     7c8:	99 85       	ldd	r25, Y+9	; 0x09
     7ca:	aa 85       	ldd	r26, Y+10	; 0x0a
     7cc:	bb 85       	ldd	r27, Y+11	; 0x0b
     7ce:	86 83       	std	Z+6, r24	; 0x06
     7d0:	97 83       	std	Z+7, r25	; 0x07
     7d2:	a0 87       	std	Z+8, r26	; 0x08
     7d4:	b1 87       	std	Z+9, r27	; 0x09
     7d6:	0e 94 5e 0f 	call	0x1ebc	; 0x1ebc <printf_P>
     7da:	ad b7       	in	r26, 0x3d	; 61
     7dc:	be b7       	in	r27, 0x3e	; 62
     7de:	1a 96       	adiw	r26, 0x0a	; 10
     7e0:	0f b6       	in	r0, 0x3f	; 63
     7e2:	f8 94       	cli
     7e4:	be bf       	out	0x3e, r27	; 62
     7e6:	0f be       	out	0x3f, r0	; 63
     7e8:	ad bf       	out	0x3d, r26	; 61
     7ea:	7d b6       	in	r7, 0x3d	; 61
     7ec:	6e b6       	in	r6, 0x3e	; 62

				uint8_t BlockBuffer[DiskCapacity.BlockSize];
     7ee:	e8 84       	ldd	r14, Y+8	; 0x08
     7f0:	f9 84       	ldd	r15, Y+9	; 0x09
     7f2:	ed b7       	in	r30, 0x3d	; 61
     7f4:	fe b7       	in	r31, 0x3e	; 62
     7f6:	ee 19       	sub	r30, r14
     7f8:	ff 09       	sbc	r31, r15
     7fa:	0f b6       	in	r0, 0x3f	; 63
     7fc:	f8 94       	cli
     7fe:	fe bf       	out	0x3e, r31	; 62
     800:	0f be       	out	0x3f, r0	; 63
     802:	ed bf       	out	0x3d, r30	; 61
     804:	8d b6       	in	r8, 0x3d	; 61
     806:	9e b6       	in	r9, 0x3e	; 62
     808:	08 94       	sec
     80a:	81 1c       	adc	r8, r1
     80c:	91 1c       	adc	r9, r1

				if (MS_Host_ReadDeviceBlocks(&FlashDisk_MS_Interface, 0, 0x00000000, 1, DiskCapacity.BlockSize, BlockBuffer))
     80e:	80 e0       	ldi	r24, 0x00	; 0
     810:	91 e0       	ldi	r25, 0x01	; 1
     812:	60 e0       	ldi	r22, 0x00	; 0
     814:	20 e0       	ldi	r18, 0x00	; 0
     816:	30 e0       	ldi	r19, 0x00	; 0
     818:	40 e0       	ldi	r20, 0x00	; 0
     81a:	50 e0       	ldi	r21, 0x00	; 0
     81c:	01 e0       	ldi	r16, 0x01	; 1
     81e:	64 01       	movw	r12, r8
     820:	eb d7       	rcall	.+4054   	; 0x17f8 <MS_Host_ReadDeviceBlocks>
     822:	88 23       	and	r24, r24
     824:	41 f0       	breq	.+16     	; 0x836 <main+0x2c0>
				{
					puts_P(PSTR("Error reading device block.\r\n"));
     826:	82 e7       	ldi	r24, 0x72	; 114
     828:	91 e0       	ldi	r25, 0x01	; 1
     82a:	0e 94 80 0f 	call	0x1f00	; 0x1f00 <puts_P>
     82e:	8b b1       	in	r24, 0x0b	; 11
     830:	8f 70       	andi	r24, 0x0F	; 15
     832:	80 69       	ori	r24, 0x90	; 144
     834:	7c c0       	rjmp	.+248    	; 0x92e <main+0x3b8>
					LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
					USB_HostState = HOST_STATE_WaitForDeviceRemoval;
					break;
				}

				puts_P(PSTR("\r\nContents of first block:\r\n"));
     836:	85 e5       	ldi	r24, 0x55	; 85
     838:	91 e0       	ldi	r25, 0x01	; 1
     83a:	0e 94 80 0f 	call	0x1f00	; 0x1f00 <puts_P>
     83e:	aa 24       	eor	r10, r10
     840:	bb 24       	eor	r11, r11
     842:	5e c0       	rjmp	.+188    	; 0x900 <main+0x38a>

				for (uint16_t Chunk = 0; Chunk < (DiskCapacity.BlockSize >> 4); Chunk++)
				{
					uint8_t* ChunkPtr = &BlockBuffer[Chunk << 4];
     844:	65 01       	movw	r12, r10
     846:	74 e0       	ldi	r23, 0x04	; 4
     848:	cc 0c       	add	r12, r12
     84a:	dd 1c       	adc	r13, r13
     84c:	7a 95       	dec	r23
     84e:	e1 f7       	brne	.-8      	; 0x848 <main+0x2d2>
     850:	c8 0c       	add	r12, r8
     852:	d9 1c       	adc	r13, r9
     854:	00 e0       	ldi	r16, 0x00	; 0
     856:	10 e0       	ldi	r17, 0x00	; 0

					/* Print out the 16 bytes of the chunk in HEX format */
					for (uint8_t ByteOffset = 0; ByteOffset < (1 << 4); ByteOffset++)
					{
						char CurrByte = *(ChunkPtr + ByteOffset);
						printf_P(PSTR("%.2X "), CurrByte);
     858:	00 d0       	rcall	.+0      	; 0x85a <main+0x2e4>
     85a:	00 d0       	rcall	.+0      	; 0x85c <main+0x2e6>
     85c:	ed b7       	in	r30, 0x3d	; 61
     85e:	fe b7       	in	r31, 0x3e	; 62
     860:	31 96       	adiw	r30, 0x01	; 1
     862:	ad b7       	in	r26, 0x3d	; 61
     864:	be b7       	in	r27, 0x3e	; 62
     866:	12 96       	adiw	r26, 0x02	; 2
     868:	3c 92       	st	X, r3
     86a:	2e 92       	st	-X, r2
     86c:	11 97       	sbiw	r26, 0x01	; 1
     86e:	d6 01       	movw	r26, r12
     870:	a0 0f       	add	r26, r16
     872:	b1 1f       	adc	r27, r17
     874:	8c 91       	ld	r24, X
     876:	82 83       	std	Z+2, r24	; 0x02
     878:	13 82       	std	Z+3, r1	; 0x03
     87a:	0e 94 5e 0f 	call	0x1ebc	; 0x1ebc <printf_P>
     87e:	0f 5f       	subi	r16, 0xFF	; 255
     880:	1f 4f       	sbci	r17, 0xFF	; 255
				for (uint16_t Chunk = 0; Chunk < (DiskCapacity.BlockSize >> 4); Chunk++)
				{
					uint8_t* ChunkPtr = &BlockBuffer[Chunk << 4];

					/* Print out the 16 bytes of the chunk in HEX format */
					for (uint8_t ByteOffset = 0; ByteOffset < (1 << 4); ByteOffset++)
     882:	0f 90       	pop	r0
     884:	0f 90       	pop	r0
     886:	0f 90       	pop	r0
     888:	0f 90       	pop	r0
     88a:	00 31       	cpi	r16, 0x10	; 16
     88c:	11 05       	cpc	r17, r1
     88e:	21 f7       	brne	.-56     	; 0x858 <main+0x2e2>
					{
						char CurrByte = *(ChunkPtr + ByteOffset);
						printf_P(PSTR("%.2X "), CurrByte);
					}

					printf_P(PSTR("    "));
     890:	00 d0       	rcall	.+0      	; 0x892 <main+0x31c>
     892:	8a e4       	ldi	r24, 0x4A	; 74
     894:	91 e0       	ldi	r25, 0x01	; 1
     896:	ed b7       	in	r30, 0x3d	; 61
     898:	fe b7       	in	r31, 0x3e	; 62
     89a:	92 83       	std	Z+2, r25	; 0x02
     89c:	81 83       	std	Z+1, r24	; 0x01
     89e:	0e 94 5e 0f 	call	0x1ebc	; 0x1ebc <printf_P>
     8a2:	ee 24       	eor	r14, r14
     8a4:	ff 24       	eor	r15, r15
     8a6:	0f 90       	pop	r0
     8a8:	0f 90       	pop	r0

					/* Print out the 16 bytes of the chunk in ASCII format */
					for (uint8_t ByteOffset = 0; ByteOffset < (1 << 4); ByteOffset++)
					{
						char CurrByte = *(ChunkPtr + ByteOffset);
						putchar(isprint(CurrByte) ? CurrByte : '.');
     8aa:	f6 01       	movw	r30, r12
     8ac:	ee 0d       	add	r30, r14
     8ae:	ff 1d       	adc	r31, r15
     8b0:	80 81       	ld	r24, Z
     8b2:	08 2f       	mov	r16, r24
     8b4:	10 e0       	ldi	r17, 0x00	; 0
     8b6:	c8 01       	movw	r24, r16
     8b8:	0e 94 2c 0f 	call	0x1e58	; 0x1e58 <isprint>
     8bc:	89 2b       	or	r24, r25
     8be:	11 f4       	brne	.+4      	; 0x8c4 <main+0x34e>
     8c0:	0e e2       	ldi	r16, 0x2E	; 46
     8c2:	10 e0       	ldi	r17, 0x00	; 0
     8c4:	60 91 45 01 	lds	r22, 0x0145
     8c8:	70 91 46 01 	lds	r23, 0x0146
     8cc:	c8 01       	movw	r24, r16
     8ce:	0e 94 32 0f 	call	0x1e64	; 0x1e64 <fputc>
     8d2:	08 94       	sec
     8d4:	e1 1c       	adc	r14, r1
     8d6:	f1 1c       	adc	r15, r1
					}

					printf_P(PSTR("    "));

					/* Print out the 16 bytes of the chunk in ASCII format */
					for (uint8_t ByteOffset = 0; ByteOffset < (1 << 4); ByteOffset++)
     8d8:	90 e1       	ldi	r25, 0x10	; 16
     8da:	e9 16       	cp	r14, r25
     8dc:	f1 04       	cpc	r15, r1
     8de:	29 f7       	brne	.-54     	; 0x8aa <main+0x334>
					{
						char CurrByte = *(ChunkPtr + ByteOffset);
						putchar(isprint(CurrByte) ? CurrByte : '.');
					}

					printf_P(PSTR("\r\n"));
     8e0:	00 d0       	rcall	.+0      	; 0x8e2 <main+0x36c>
     8e2:	e7 e4       	ldi	r30, 0x47	; 71
     8e4:	f1 e0       	ldi	r31, 0x01	; 1
     8e6:	ad b7       	in	r26, 0x3d	; 61
     8e8:	be b7       	in	r27, 0x3e	; 62
     8ea:	12 96       	adiw	r26, 0x02	; 2
     8ec:	fc 93       	st	X, r31
     8ee:	ee 93       	st	-X, r30
     8f0:	11 97       	sbiw	r26, 0x01	; 1
     8f2:	0e 94 5e 0f 	call	0x1ebc	; 0x1ebc <printf_P>
					break;
				}

				puts_P(PSTR("\r\nContents of first block:\r\n"));

				for (uint16_t Chunk = 0; Chunk < (DiskCapacity.BlockSize >> 4); Chunk++)
     8f6:	08 94       	sec
     8f8:	a1 1c       	adc	r10, r1
     8fa:	b1 1c       	adc	r11, r1
     8fc:	0f 90       	pop	r0
     8fe:	0f 90       	pop	r0
     900:	95 01       	movw	r18, r10
     902:	40 e0       	ldi	r20, 0x00	; 0
     904:	50 e0       	ldi	r21, 0x00	; 0
     906:	88 85       	ldd	r24, Y+8	; 0x08
     908:	99 85       	ldd	r25, Y+9	; 0x09
     90a:	aa 85       	ldd	r26, Y+10	; 0x0a
     90c:	bb 85       	ldd	r27, Y+11	; 0x0b
     90e:	64 e0       	ldi	r22, 0x04	; 4
     910:	b6 95       	lsr	r27
     912:	a7 95       	ror	r26
     914:	97 95       	ror	r25
     916:	87 95       	ror	r24
     918:	6a 95       	dec	r22
     91a:	d1 f7       	brne	.-12     	; 0x910 <main+0x39a>
     91c:	28 17       	cp	r18, r24
     91e:	39 07       	cpc	r19, r25
     920:	4a 07       	cpc	r20, r26
     922:	5b 07       	cpc	r21, r27
     924:	08 f4       	brcc	.+2      	; 0x928 <main+0x3b2>
     926:	8e cf       	rjmp	.-228    	; 0x844 <main+0x2ce>
     928:	8b b1       	in	r24, 0x0b	; 11
     92a:	8f 70       	andi	r24, 0x0F	; 15
     92c:	80 66       	ori	r24, 0x60	; 96
     92e:	8b b9       	out	0x0b, r24	; 11

					printf_P(PSTR("\r\n"));
				}

				LEDs_SetAllLEDs(LEDMASK_USB_READY);
				USB_HostState = HOST_STATE_WaitForDeviceRemoval;
     930:	10 92 42 01 	sts	0x0142, r1
     934:	87 2d       	mov	r24, r7
     936:	96 2d       	mov	r25, r6
     938:	9c 01       	movw	r18, r24
     93a:	0f b6       	in	r0, 0x3f	; 63
     93c:	f8 94       	cli
     93e:	3e bf       	out	0x3e, r19	; 62
     940:	0f be       	out	0x3f, r0	; 63
     942:	2d bf       	out	0x3d, r18	; 61
				break;
		}

		MS_Host_USBTask(&FlashDisk_MS_Interface);
		USB_USBTask();
     944:	f5 d5       	rcall	.+3050   	; 0x1530 <USB_USBTask>
     946:	45 ce       	rjmp	.-886    	; 0x5d2 <main+0x5c>

00000948 <USB_Host_WaitMS>:
		USB_ResetInterface();
	}
}

uint8_t USB_Host_WaitMS(uint8_t MS)
{
     948:	98 2f       	mov	r25, r24
			 *  \return Boolean true if the bus is currently suspended, false otherwise.
			 */
			static inline bool USB_Host_IsBusSuspended(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusSuspended(void)
			{
				return ((UHCON & (1 << SOFEN)) ? false : true);
     94a:	20 91 9e 00 	lds	r18, 0x009E
	bool    BusSuspended = USB_Host_IsBusSuspended();
	uint8_t ErrorCode    = HOST_WAITERROR_Successful;
	bool    HSOFIEnabled = USB_INT_IsEnabled(USB_INT_HSOFI);
     94e:	30 91 a0 00 	lds	r19, 0x00A0

	USB_INT_Disable(USB_INT_HSOFI);
     952:	80 91 a0 00 	lds	r24, 0x00A0
     956:	8f 7d       	andi	r24, 0xDF	; 223
     958:	80 93 a0 00 	sts	0x00A0, r24
	USB_INT_Clear(USB_INT_HSOFI);
     95c:	80 91 9f 00 	lds	r24, 0x009F
     960:	8f 7d       	andi	r24, 0xDF	; 223
     962:	80 93 9f 00 	sts	0x009F, r24
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
     966:	80 91 9e 00 	lds	r24, 0x009E
     96a:	81 60       	ori	r24, 0x01	; 1
     96c:	80 93 9e 00 	sts	0x009E, r24
     970:	26 c0       	rjmp	.+76     	; 0x9be <USB_Host_WaitMS+0x76>

	USB_Host_ResumeBus();

	while (MS)
	{
		if (USB_INT_HasOccurred(USB_INT_HSOFI))
     972:	80 91 9f 00 	lds	r24, 0x009F
     976:	85 ff       	sbrs	r24, 5
     978:	06 c0       	rjmp	.+12     	; 0x986 <USB_Host_WaitMS+0x3e>
		{
			USB_INT_Clear(USB_INT_HSOFI);
     97a:	80 91 9f 00 	lds	r24, 0x009F
     97e:	8f 7d       	andi	r24, 0xDF	; 223
     980:	80 93 9f 00 	sts	0x009F, r24
			MS--;
     984:	91 50       	subi	r25, 0x01	; 1
		}

		if ((USB_HostState == HOST_STATE_Unattached) || (USB_CurrentMode != USB_MODE_Host))
     986:	80 91 42 01 	lds	r24, 0x0142
     98a:	82 30       	cpi	r24, 0x02	; 2
     98c:	11 f4       	brne	.+4      	; 0x992 <USB_Host_WaitMS+0x4a>
     98e:	91 e0       	ldi	r25, 0x01	; 1
     990:	18 c0       	rjmp	.+48     	; 0x9c2 <USB_Host_WaitMS+0x7a>
			 *  \return Boolean true if an error has occurred on the selected pipe, false otherwise.
			 */
			static inline bool Pipe_IsError(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsError(void)
			{
				return ((UPINTX & (1 << PERRI)) ? true : false);
     992:	80 91 a6 00 	lds	r24, 0x00A6
			ErrorCode = HOST_WAITERROR_DeviceDisconnect;

			break;
		}

		if (Pipe_IsError() == true)
     996:	84 ff       	sbrs	r24, 4
     998:	07 c0       	rjmp	.+14     	; 0x9a8 <USB_Host_WaitMS+0x60>

			/** Clears the master pipe error flag. */
			static inline void Pipe_ClearError(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearError(void)
			{
				UPINTX &= ~(1 << PERRI);
     99a:	80 91 a6 00 	lds	r24, 0x00A6
     99e:	8f 7e       	andi	r24, 0xEF	; 239
     9a0:	80 93 a6 00 	sts	0x00A6, r24
     9a4:	92 e0       	ldi	r25, 0x02	; 2
     9a6:	0d c0       	rjmp	.+26     	; 0x9c2 <USB_Host_WaitMS+0x7a>
			 *  \return Boolean true if the current pipe has been stalled by the attached device, false otherwise.
			 */
			static inline bool Pipe_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsStalled(void)
			{
				return ((UPINTX & (1 << RXSTALLI)) ? true : false);
     9a8:	80 91 a6 00 	lds	r24, 0x00A6
			ErrorCode = HOST_WAITERROR_PipeError;

			break;
		}

		if (Pipe_IsStalled() == true)
     9ac:	81 ff       	sbrs	r24, 1
     9ae:	07 c0       	rjmp	.+14     	; 0x9be <USB_Host_WaitMS+0x76>
			 *  \ingroup Group_PipePacketManagement
			 */
			static inline void Pipe_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearStall(void)
			{
				UPINTX &= ~(1 << RXSTALLI);
     9b0:	80 91 a6 00 	lds	r24, 0x00A6
     9b4:	8d 7f       	andi	r24, 0xFD	; 253
     9b6:	80 93 a6 00 	sts	0x00A6, r24
     9ba:	93 e0       	ldi	r25, 0x03	; 3
     9bc:	02 c0       	rjmp	.+4      	; 0x9c2 <USB_Host_WaitMS+0x7a>
	USB_INT_Disable(USB_INT_HSOFI);
	USB_INT_Clear(USB_INT_HSOFI);

	USB_Host_ResumeBus();

	while (MS)
     9be:	99 23       	and	r25, r25
     9c0:	c1 f6       	brne	.-80     	; 0x972 <USB_Host_WaitMS+0x2a>

			break;
		}
	}

	if (BusSuspended)
     9c2:	20 fd       	sbrc	r18, 0
     9c4:	05 c0       	rjmp	.+10     	; 0x9d0 <USB_Host_WaitMS+0x88>
			 *  messages to the device.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				UHCON &= ~(1 << SOFEN);
     9c6:	80 91 9e 00 	lds	r24, 0x009E
     9ca:	8e 7f       	andi	r24, 0xFE	; 254
     9cc:	80 93 9e 00 	sts	0x009E, r24
	  USB_Host_SuspendBus();

	if (HSOFIEnabled)
     9d0:	35 ff       	sbrs	r19, 5
     9d2:	05 c0       	rjmp	.+10     	; 0x9de <USB_Host_WaitMS+0x96>
	  USB_INT_Enable(USB_INT_HSOFI);
     9d4:	80 91 a0 00 	lds	r24, 0x00A0
     9d8:	80 62       	ori	r24, 0x20	; 32
     9da:	80 93 a0 00 	sts	0x00A0, r24

	return ErrorCode;
}
     9de:	89 2f       	mov	r24, r25
     9e0:	08 95       	ret

000009e2 <USB_Host_ResetDevice>:
			 *  \return Boolean true if the bus is currently suspended, false otherwise.
			 */
			static inline bool USB_Host_IsBusSuspended(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusSuspended(void)
			{
				return ((UHCON & (1 << SOFEN)) ? false : true);
     9e2:	60 91 9e 00 	lds	r22, 0x009E

static void USB_Host_ResetDevice(void)
{
	bool BusSuspended = USB_Host_IsBusSuspended();

	USB_INT_Disable(USB_INT_DDISCI);
     9e6:	80 91 a0 00 	lds	r24, 0x00A0
     9ea:	8d 7f       	andi	r24, 0xFD	; 253
     9ec:	80 93 a0 00 	sts	0x00A0, r24
			 *  woken up automatically and the bus resumed after the reset has been correctly issued.
			 */
			static inline void USB_Host_ResetBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResetBus(void)
			{
				UHCON |=  (1 << RESET);
     9f0:	80 91 9e 00 	lds	r24, 0x009E
     9f4:	82 60       	ori	r24, 0x02	; 2
     9f6:	80 93 9e 00 	sts	0x009E, r24
			 *  \return Boolean true if no bus reset is currently being sent, false otherwise.
			 */
			static inline bool USB_Host_IsBusResetComplete(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusResetComplete(void)
			{
				return ((UHCON & (1 << RESET)) ? false : true);
     9fa:	80 91 9e 00 	lds	r24, 0x009E

	USB_Host_ResetBus();
	while (!(USB_Host_IsBusResetComplete()));
     9fe:	81 fd       	sbrc	r24, 1
     a00:	fc cf       	rjmp	.-8      	; 0x9fa <USB_Host_ResetDevice+0x18>
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
     a02:	80 91 9e 00 	lds	r24, 0x009E
     a06:	81 60       	ori	r24, 0x01	; 1
     a08:	80 93 9e 00 	sts	0x009E, r24
	USB_Host_ResumeBus();

	bool HSOFIEnabled = USB_INT_IsEnabled(USB_INT_HSOFI);
     a0c:	30 91 a0 00 	lds	r19, 0x00A0

	USB_INT_Disable(USB_INT_HSOFI);
     a10:	80 91 a0 00 	lds	r24, 0x00A0
     a14:	8f 7d       	andi	r24, 0xDF	; 223
     a16:	80 93 a0 00 	sts	0x00A0, r24
	USB_INT_Clear(USB_INT_HSOFI);
     a1a:	80 91 9f 00 	lds	r24, 0x009F
     a1e:	8f 7d       	andi	r24, 0xDF	; 223
     a20:	80 93 9f 00 	sts	0x009F, r24
     a24:	2a e0       	ldi	r18, 0x0A	; 10
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     a26:	40 ed       	ldi	r20, 0xD0	; 208
     a28:	57 e0       	ldi	r21, 0x07	; 7
		/* Workaround for powerless-pull-up devices. After a USB bus reset,
		   all disconnection interrupts are suppressed while a USB frame is
		   looked for - if it is found within 10ms, the device is still
		   present.                                                        */

		if (USB_INT_HasOccurred(USB_INT_HSOFI))
     a2a:	80 91 9f 00 	lds	r24, 0x009F
     a2e:	85 ff       	sbrs	r24, 5
     a30:	0b c0       	rjmp	.+22     	; 0xa48 <USB_Host_ResetDevice+0x66>
		{
			USB_INT_Clear(USB_INT_HSOFI);
     a32:	80 91 9f 00 	lds	r24, 0x009F
     a36:	8f 7d       	andi	r24, 0xDF	; 223
     a38:	80 93 9f 00 	sts	0x009F, r24
			USB_INT_Clear(USB_INT_DDISCI);
     a3c:	80 91 9f 00 	lds	r24, 0x009F
     a40:	8d 7f       	andi	r24, 0xFD	; 253
     a42:	80 93 9f 00 	sts	0x009F, r24
     a46:	05 c0       	rjmp	.+10     	; 0xa52 <USB_Host_ResetDevice+0x70>
     a48:	ca 01       	movw	r24, r20
     a4a:	01 97       	sbiw	r24, 0x01	; 1
     a4c:	f1 f7       	brne	.-4      	; 0xa4a <USB_Host_ResetDevice+0x68>
	bool HSOFIEnabled = USB_INT_IsEnabled(USB_INT_HSOFI);

	USB_INT_Disable(USB_INT_HSOFI);
	USB_INT_Clear(USB_INT_HSOFI);

	for (uint8_t MSRem = 10; MSRem != 0; MSRem--)
     a4e:	21 50       	subi	r18, 0x01	; 1
     a50:	61 f7       	brne	.-40     	; 0xa2a <USB_Host_ResetDevice+0x48>
		}

		_delay_ms(1);
	}

	if (HSOFIEnabled)
     a52:	35 ff       	sbrs	r19, 5
     a54:	05 c0       	rjmp	.+10     	; 0xa60 <USB_Host_ResetDevice+0x7e>
	  USB_INT_Enable(USB_INT_HSOFI);
     a56:	80 91 a0 00 	lds	r24, 0x00A0
     a5a:	80 62       	ori	r24, 0x20	; 32
     a5c:	80 93 a0 00 	sts	0x00A0, r24

	if (BusSuspended)
     a60:	60 fd       	sbrc	r22, 0
     a62:	05 c0       	rjmp	.+10     	; 0xa6e <USB_Host_ResetDevice+0x8c>
			 *  messages to the device.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				UHCON &= ~(1 << SOFEN);
     a64:	80 91 9e 00 	lds	r24, 0x009E
     a68:	8e 7f       	andi	r24, 0xFE	; 254
     a6a:	80 93 9e 00 	sts	0x009E, r24
	  USB_Host_SuspendBus();

	USB_INT_Enable(USB_INT_DDISCI);
     a6e:	80 91 a0 00 	lds	r24, 0x00A0
     a72:	82 60       	ori	r24, 0x02	; 2
     a74:	80 93 a0 00 	sts	0x00A0, r24
}
     a78:	08 95       	ret

00000a7a <USB_Host_ClearPipeStall>:
	return USB_Host_SendControlRequest(Buffer);
}

uint8_t USB_Host_ClearPipeStall(const uint8_t EndpointNum)
{
	USB_ControlRequest = (USB_Request_Header_t)
     a7a:	92 e0       	ldi	r25, 0x02	; 2
     a7c:	90 93 3a 01 	sts	0x013A, r25
     a80:	91 e0       	ldi	r25, 0x01	; 1
     a82:	90 93 3b 01 	sts	0x013B, r25
     a86:	10 92 3d 01 	sts	0x013D, r1
     a8a:	10 92 3c 01 	sts	0x013C, r1
     a8e:	80 93 3e 01 	sts	0x013E, r24
     a92:	10 92 3f 01 	sts	0x013F, r1
     a96:	10 92 41 01 	sts	0x0141, r1
     a9a:	10 92 40 01 	sts	0x0140, r1
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
     a9e:	10 92 a7 00 	sts	0x00A7, r1
			.wLength       = 0,
		};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	return USB_Host_SendControlRequest(NULL);
     aa2:	80 e0       	ldi	r24, 0x00	; 0
     aa4:	90 e0       	ldi	r25, 0x00	; 0
}
     aa6:	c0 c3       	rjmp	.+1920   	; 0x1228 <USB_Host_SendControlRequest>

00000aa8 <USB_Host_SetDeviceConfiguration>:
	USB_INT_Enable(USB_INT_DDISCI);
}

uint8_t USB_Host_SetDeviceConfiguration(const uint8_t ConfigNumber)
{
	USB_ControlRequest = (USB_Request_Header_t)
     aa8:	10 92 3a 01 	sts	0x013A, r1
     aac:	99 e0       	ldi	r25, 0x09	; 9
     aae:	90 93 3b 01 	sts	0x013B, r25
     ab2:	80 93 3c 01 	sts	0x013C, r24
     ab6:	10 92 3d 01 	sts	0x013D, r1
     aba:	10 92 3f 01 	sts	0x013F, r1
     abe:	10 92 3e 01 	sts	0x013E, r1
     ac2:	10 92 41 01 	sts	0x0141, r1
     ac6:	10 92 40 01 	sts	0x0140, r1
     aca:	10 92 a7 00 	sts	0x00A7, r1
			.wLength       = 0,
		};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	return USB_Host_SendControlRequest(NULL);
     ace:	80 e0       	ldi	r24, 0x00	; 0
     ad0:	90 e0       	ldi	r25, 0x00	; 0
}
     ad2:	aa c3       	rjmp	.+1876   	; 0x1228 <USB_Host_SendControlRequest>

00000ad4 <USB_Host_ProcessNextHostState>:

#define  __INCLUDE_FROM_HOST_C
#include "Host.h"

void USB_Host_ProcessNextHostState(void)
{
     ad4:	ef 92       	push	r14
     ad6:	0f 93       	push	r16
     ad8:	1f 93       	push	r17
     ada:	df 93       	push	r29
     adc:	cf 93       	push	r28
     ade:	cd b7       	in	r28, 0x3d	; 61
     ae0:	de b7       	in	r29, 0x3e	; 62
     ae2:	28 97       	sbiw	r28, 0x08	; 8
     ae4:	0f b6       	in	r0, 0x3f	; 63
     ae6:	f8 94       	cli
     ae8:	de bf       	out	0x3e, r29	; 62
     aea:	0f be       	out	0x3f, r0	; 63
     aec:	cd bf       	out	0x3d, r28	; 61
	uint8_t SubErrorCode = HOST_ENUMERROR_NoError;

	static uint16_t WaitMSRemaining;
	static uint8_t  PostWaitState;

	switch (USB_HostState)
     aee:	80 91 42 01 	lds	r24, 0x0142
     af2:	86 30       	cpi	r24, 0x06	; 6
     af4:	09 f4       	brne	.+2      	; 0xaf8 <USB_Host_ProcessNextHostState+0x24>
     af6:	94 c0       	rjmp	.+296    	; 0xc20 <USB_Host_ProcessNextHostState+0x14c>
     af8:	87 30       	cpi	r24, 0x07	; 7
     afa:	70 f4       	brcc	.+28     	; 0xb18 <USB_Host_ProcessNextHostState+0x44>
     afc:	83 30       	cpi	r24, 0x03	; 3
     afe:	c1 f1       	breq	.+112    	; 0xb70 <USB_Host_ProcessNextHostState+0x9c>
     b00:	84 30       	cpi	r24, 0x04	; 4
     b02:	20 f4       	brcc	.+8      	; 0xb0c <USB_Host_ProcessNextHostState+0x38>
     b04:	81 30       	cpi	r24, 0x01	; 1
     b06:	09 f0       	breq	.+2      	; 0xb0a <USB_Host_ProcessNextHostState+0x36>
     b08:	07 c1       	rjmp	.+526    	; 0xd18 <USB_Host_ProcessNextHostState+0x244>
     b0a:	13 c0       	rjmp	.+38     	; 0xb32 <USB_Host_ProcessNextHostState+0x5e>
     b0c:	84 30       	cpi	r24, 0x04	; 4
     b0e:	c1 f1       	breq	.+112    	; 0xb80 <USB_Host_ProcessNextHostState+0xac>
     b10:	85 30       	cpi	r24, 0x05	; 5
     b12:	09 f0       	breq	.+2      	; 0xb16 <USB_Host_ProcessNextHostState+0x42>
     b14:	01 c1       	rjmp	.+514    	; 0xd18 <USB_Host_ProcessNextHostState+0x244>
     b16:	5b c0       	rjmp	.+182    	; 0xbce <USB_Host_ProcessNextHostState+0xfa>
     b18:	88 30       	cpi	r24, 0x08	; 8
     b1a:	09 f4       	brne	.+2      	; 0xb1e <USB_Host_ProcessNextHostState+0x4a>
     b1c:	9b c0       	rjmp	.+310    	; 0xc54 <USB_Host_ProcessNextHostState+0x180>
     b1e:	88 30       	cpi	r24, 0x08	; 8
     b20:	08 f4       	brcc	.+2      	; 0xb24 <USB_Host_ProcessNextHostState+0x50>
     b22:	8a c0       	rjmp	.+276    	; 0xc38 <USB_Host_ProcessNextHostState+0x164>
     b24:	89 30       	cpi	r24, 0x09	; 9
     b26:	09 f4       	brne	.+2      	; 0xb2a <USB_Host_ProcessNextHostState+0x56>
     b28:	b4 c0       	rjmp	.+360    	; 0xc92 <USB_Host_ProcessNextHostState+0x1be>
     b2a:	8a 30       	cpi	r24, 0x0A	; 10
     b2c:	09 f0       	breq	.+2      	; 0xb30 <USB_Host_ProcessNextHostState+0x5c>
     b2e:	f4 c0       	rjmp	.+488    	; 0xd18 <USB_Host_ProcessNextHostState+0x244>
     b30:	d9 c0       	rjmp	.+434    	; 0xce4 <USB_Host_ProcessNextHostState+0x210>
	{
		case HOST_STATE_WaitForDevice:
			if (WaitMSRemaining)
     b32:	00 91 37 01 	lds	r16, 0x0137
     b36:	10 91 38 01 	lds	r17, 0x0138
     b3a:	01 15       	cp	r16, r1
     b3c:	11 05       	cpc	r17, r1
     b3e:	09 f4       	brne	.+2      	; 0xb42 <USB_Host_ProcessNextHostState+0x6e>
     b40:	eb c0       	rjmp	.+470    	; 0xd18 <USB_Host_ProcessNextHostState+0x244>
			{
				if ((SubErrorCode = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
     b42:	81 e0       	ldi	r24, 0x01	; 1
     b44:	01 df       	rcall	.-510    	; 0x948 <USB_Host_WaitMS>
     b46:	68 2f       	mov	r22, r24
     b48:	88 23       	and	r24, r24
     b4a:	31 f0       	breq	.+12     	; 0xb58 <USB_Host_ProcessNextHostState+0x84>
				{
					USB_HostState = PostWaitState;
     b4c:	80 91 36 01 	lds	r24, 0x0136
     b50:	80 93 42 01 	sts	0x0142, r24
     b54:	91 e0       	ldi	r25, 0x01	; 1
     b56:	dc c0       	rjmp	.+440    	; 0xd10 <USB_Host_ProcessNextHostState+0x23c>
					ErrorCode     = HOST_ENUMERROR_WaitStage;
					break;
				}

				if (!(--WaitMSRemaining))
     b58:	c8 01       	movw	r24, r16
     b5a:	01 97       	sbiw	r24, 0x01	; 1
     b5c:	90 93 38 01 	sts	0x0138, r25
     b60:	80 93 37 01 	sts	0x0137, r24
     b64:	89 2b       	or	r24, r25
     b66:	09 f0       	breq	.+2      	; 0xb6a <USB_Host_ProcessNextHostState+0x96>
     b68:	d7 c0       	rjmp	.+430    	; 0xd18 <USB_Host_ProcessNextHostState+0x244>
				  USB_HostState = PostWaitState;
     b6a:	80 91 36 01 	lds	r24, 0x0136
     b6e:	bf c0       	rjmp	.+382    	; 0xcee <USB_Host_ProcessNextHostState+0x21a>
			}

			break;
		case HOST_STATE_Powered:
			WaitMSRemaining = HOST_DEVICE_SETTLE_DELAY_MS;
     b70:	88 ee       	ldi	r24, 0xE8	; 232
     b72:	93 e0       	ldi	r25, 0x03	; 3
     b74:	90 93 38 01 	sts	0x0138, r25
     b78:	80 93 37 01 	sts	0x0137, r24

			USB_HostState = HOST_STATE_Powered_WaitForDeviceSettle;
     b7c:	84 e0       	ldi	r24, 0x04	; 4
     b7e:	b7 c0       	rjmp	.+366    	; 0xcee <USB_Host_ProcessNextHostState+0x21a>
			break;
		case HOST_STATE_Powered_WaitForDeviceSettle:
			if (WaitMSRemaining--)
     b80:	80 91 37 01 	lds	r24, 0x0137
     b84:	90 91 38 01 	lds	r25, 0x0138
     b88:	01 97       	sbiw	r24, 0x01	; 1
     b8a:	90 93 38 01 	sts	0x0138, r25
     b8e:	80 93 37 01 	sts	0x0137, r24
     b92:	01 96       	adiw	r24, 0x01	; 1
     b94:	29 f0       	breq	.+10     	; 0xba0 <USB_Host_ProcessNextHostState+0xcc>
     b96:	80 ed       	ldi	r24, 0xD0	; 208
     b98:	97 e0       	ldi	r25, 0x07	; 7
     b9a:	01 97       	sbiw	r24, 0x01	; 1
     b9c:	f1 f7       	brne	.-4      	; 0xb9a <USB_Host_ProcessNextHostState+0xc6>
     b9e:	bc c0       	rjmp	.+376    	; 0xd18 <USB_Host_ProcessNextHostState+0x244>
			}

			static inline void USB_Host_VBUS_Manual_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Manual_Off(void)
			{
				PORTE  &= ~(1 << 7);
     ba0:	77 98       	cbi	0x0e, 7	; 14

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON  |=  (1 << OTGPADE);
     ba2:	80 91 d8 00 	lds	r24, 0x00D8
     ba6:	80 61       	ori	r24, 0x10	; 16
     ba8:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_Host_VBUS_Auto_Enable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Enable(void)
			{
				OTGCON &= ~(1 << VBUSHWC);
     bac:	80 91 dd 00 	lds	r24, 0x00DD
     bb0:	8b 7f       	andi	r24, 0xFB	; 251
     bb2:	80 93 dd 00 	sts	0x00DD, r24
				UHWCON |=  (1 << UVCONE);
     bb6:	80 91 d7 00 	lds	r24, 0x00D7
     bba:	80 61       	ori	r24, 0x10	; 16
     bbc:	80 93 d7 00 	sts	0x00D7, r24
			}

			static inline void USB_Host_VBUS_Auto_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_On(void)
			{
				OTGCON |=  (1 << VBUSREQ);
     bc0:	80 91 dd 00 	lds	r24, 0x00DD
     bc4:	82 60       	ori	r24, 0x02	; 2
     bc6:	80 93 dd 00 	sts	0x00DD, r24

				USB_OTGPAD_On();
				USB_Host_VBUS_Auto_Enable();
				USB_Host_VBUS_Auto_On();

				USB_HostState = HOST_STATE_Powered_WaitForConnect;
     bca:	85 e0       	ldi	r24, 0x05	; 5
     bcc:	90 c0       	rjmp	.+288    	; 0xcee <USB_Host_ProcessNextHostState+0x21a>
			}

			break;
		case HOST_STATE_Powered_WaitForConnect:
			if (USB_INT_HasOccurred(USB_INT_DCONNI))
     bce:	80 91 9f 00 	lds	r24, 0x009F
     bd2:	80 ff       	sbrs	r24, 0
     bd4:	a1 c0       	rjmp	.+322    	; 0xd18 <USB_Host_ProcessNextHostState+0x244>
			{
				USB_INT_Clear(USB_INT_DCONNI);
     bd6:	80 91 9f 00 	lds	r24, 0x009F
     bda:	8e 7f       	andi	r24, 0xFE	; 254
     bdc:	80 93 9f 00 	sts	0x009F, r24
				USB_INT_Clear(USB_INT_DDISCI);
     be0:	80 91 9f 00 	lds	r24, 0x009F
     be4:	8d 7f       	andi	r24, 0xFD	; 253
     be6:	80 93 9f 00 	sts	0x009F, r24

				USB_INT_Clear(USB_INT_VBERRI);
     bea:	80 91 df 00 	lds	r24, 0x00DF
     bee:	8d 7f       	andi	r24, 0xFD	; 253
     bf0:	80 93 df 00 	sts	0x00DF, r24
				USB_INT_Enable(USB_INT_VBERRI);
     bf4:	80 91 de 00 	lds	r24, 0x00DE
     bf8:	82 60       	ori	r24, 0x02	; 2
     bfa:	80 93 de 00 	sts	0x00DE, r24
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
     bfe:	80 91 9e 00 	lds	r24, 0x009E
     c02:	81 60       	ori	r24, 0x01	; 1
     c04:	80 93 9e 00 	sts	0x009E, r24

				USB_Host_ResumeBus();
				Pipe_ClearPipes();
     c08:	c9 d0       	rcall	.+402    	; 0xd9c <Pipe_ClearPipes>

				HOST_TASK_NONBLOCK_WAIT(100, HOST_STATE_Powered_DoReset);
     c0a:	81 e0       	ldi	r24, 0x01	; 1
     c0c:	80 93 42 01 	sts	0x0142, r24
     c10:	84 e6       	ldi	r24, 0x64	; 100
     c12:	90 e0       	ldi	r25, 0x00	; 0
     c14:	90 93 38 01 	sts	0x0138, r25
     c18:	80 93 37 01 	sts	0x0137, r24
     c1c:	86 e0       	ldi	r24, 0x06	; 6
     c1e:	5f c0       	rjmp	.+190    	; 0xcde <USB_Host_ProcessNextHostState+0x20a>
			}

			break;
		case HOST_STATE_Powered_DoReset:
			USB_Host_ResetDevice();
     c20:	e0 de       	rcall	.-576    	; 0x9e2 <USB_Host_ResetDevice>

			HOST_TASK_NONBLOCK_WAIT(200, HOST_STATE_Powered_ConfigPipe);
     c22:	81 e0       	ldi	r24, 0x01	; 1
     c24:	80 93 42 01 	sts	0x0142, r24
     c28:	88 ec       	ldi	r24, 0xC8	; 200
     c2a:	90 e0       	ldi	r25, 0x00	; 0
     c2c:	90 93 38 01 	sts	0x0138, r25
     c30:	80 93 37 01 	sts	0x0137, r24
     c34:	87 e0       	ldi	r24, 0x07	; 7
     c36:	53 c0       	rjmp	.+166    	; 0xcde <USB_Host_ProcessNextHostState+0x20a>
			break;
		case HOST_STATE_Powered_ConfigPipe:
			Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL,
     c38:	80 e0       	ldi	r24, 0x00	; 0
     c3a:	60 e0       	ldi	r22, 0x00	; 0
     c3c:	40 e0       	ldi	r20, 0x00	; 0
     c3e:	20 e0       	ldi	r18, 0x00	; 0
     c40:	00 e4       	ldi	r16, 0x40	; 64
     c42:	10 e0       	ldi	r17, 0x00	; 0
     c44:	ee 24       	eor	r14, r14
     c46:	74 d0       	rcall	.+232    	; 0xd30 <Pipe_ConfigurePipe>
			 *  \return Boolean true if the selected pipe is configured, false otherwise.
			 */
			static inline bool Pipe_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsConfigured(void)
			{
				return ((UPSTAX & (1 << CFGOK)) ? true : false);
     c48:	80 91 ac 00 	lds	r24, 0x00AC
							   PIPE_TOKEN_SETUP, ENDPOINT_CONTROLEP,
							   PIPE_CONTROLPIPE_DEFAULT_SIZE, PIPE_BANK_SINGLE);

			if (!(Pipe_IsConfigured()))
     c4c:	87 ff       	sbrs	r24, 7
     c4e:	5e c0       	rjmp	.+188    	; 0xd0c <USB_Host_ProcessNextHostState+0x238>
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
				SubErrorCode = 0;
				break;
			}

			USB_HostState = HOST_STATE_Default;
     c50:	88 e0       	ldi	r24, 0x08	; 8
     c52:	4d c0       	rjmp	.+154    	; 0xcee <USB_Host_ProcessNextHostState+0x21a>
			break;
		case HOST_STATE_Default:
			USB_ControlRequest = (USB_Request_Header_t)
     c54:	aa e3       	ldi	r26, 0x3A	; 58
     c56:	b1 e0       	ldi	r27, 0x01	; 1
     c58:	ee e1       	ldi	r30, 0x1E	; 30
     c5a:	f1 e0       	ldi	r31, 0x01	; 1
     c5c:	88 e0       	ldi	r24, 0x08	; 8
     c5e:	01 90       	ld	r0, Z+
     c60:	0d 92       	st	X+, r0
     c62:	81 50       	subi	r24, 0x01	; 1
     c64:	e1 f7       	brne	.-8      	; 0xc5e <USB_Host_ProcessNextHostState+0x18a>
					.wLength       = 8,
				};

			uint8_t DataBuffer[8];

			if ((SubErrorCode = USB_Host_SendControlRequest(DataBuffer)) != HOST_SENDCONTROL_Successful)
     c66:	ce 01       	movw	r24, r28
     c68:	01 96       	adiw	r24, 0x01	; 1
     c6a:	de d2       	rcall	.+1468   	; 0x1228 <USB_Host_SendControlRequest>
     c6c:	68 2f       	mov	r22, r24
     c6e:	88 23       	and	r24, r24
     c70:	09 f0       	breq	.+2      	; 0xc74 <USB_Host_ProcessNextHostState+0x1a0>
     c72:	4a c0       	rjmp	.+148    	; 0xd08 <USB_Host_ProcessNextHostState+0x234>
			{
				ErrorCode = HOST_ENUMERROR_ControlError;
				break;
			}

			USB_ControlPipeSize = DataBuffer[offsetof(USB_Descriptor_Device_t, Endpoint0Size)];
     c74:	88 85       	ldd	r24, Y+8	; 0x08
     c76:	80 93 26 01 	sts	0x0126, r24

			USB_Host_ResetDevice();
     c7a:	b3 de       	rcall	.-666    	; 0x9e2 <USB_Host_ResetDevice>

			HOST_TASK_NONBLOCK_WAIT(200, HOST_STATE_Default_PostReset);
     c7c:	81 e0       	ldi	r24, 0x01	; 1
     c7e:	80 93 42 01 	sts	0x0142, r24
     c82:	88 ec       	ldi	r24, 0xC8	; 200
     c84:	90 e0       	ldi	r25, 0x00	; 0
     c86:	90 93 38 01 	sts	0x0138, r25
     c8a:	80 93 37 01 	sts	0x0137, r24
     c8e:	89 e0       	ldi	r24, 0x09	; 9
     c90:	26 c0       	rjmp	.+76     	; 0xcde <USB_Host_ProcessNextHostState+0x20a>
			break;
		case HOST_STATE_Default_PostReset:
			Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL,
     c92:	00 91 26 01 	lds	r16, 0x0126
     c96:	80 e0       	ldi	r24, 0x00	; 0
     c98:	60 e0       	ldi	r22, 0x00	; 0
     c9a:	40 e0       	ldi	r20, 0x00	; 0
     c9c:	20 e0       	ldi	r18, 0x00	; 0
     c9e:	10 e0       	ldi	r17, 0x00	; 0
     ca0:	ee 24       	eor	r14, r14
     ca2:	46 d0       	rcall	.+140    	; 0xd30 <Pipe_ConfigurePipe>
     ca4:	80 91 ac 00 	lds	r24, 0x00AC
			                   PIPE_TOKEN_SETUP, ENDPOINT_CONTROLEP,
			                   USB_ControlPipeSize, PIPE_BANK_SINGLE);

			if (!(Pipe_IsConfigured()))
     ca8:	87 ff       	sbrs	r24, 7
     caa:	30 c0       	rjmp	.+96     	; 0xd0c <USB_Host_ProcessNextHostState+0x238>
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
				SubErrorCode = 0;
				break;
			}

			USB_ControlRequest = (USB_Request_Header_t)
     cac:	aa e3       	ldi	r26, 0x3A	; 58
     cae:	b1 e0       	ldi	r27, 0x01	; 1
     cb0:	e6 e1       	ldi	r30, 0x16	; 22
     cb2:	f1 e0       	ldi	r31, 0x01	; 1
     cb4:	88 e0       	ldi	r24, 0x08	; 8
     cb6:	01 90       	ld	r0, Z+
     cb8:	0d 92       	st	X+, r0
     cba:	81 50       	subi	r24, 0x01	; 1
     cbc:	e1 f7       	brne	.-8      	; 0xcb6 <USB_Host_ProcessNextHostState+0x1e2>
					.wValue        = USB_HOST_DEVICEADDRESS,
					.wIndex        = 0,
					.wLength       = 0,
				};

			if ((SubErrorCode = USB_Host_SendControlRequest(NULL)) != HOST_SENDCONTROL_Successful)
     cbe:	80 e0       	ldi	r24, 0x00	; 0
     cc0:	90 e0       	ldi	r25, 0x00	; 0
     cc2:	b2 d2       	rcall	.+1380   	; 0x1228 <USB_Host_SendControlRequest>
     cc4:	68 2f       	mov	r22, r24
     cc6:	88 23       	and	r24, r24
     cc8:	f9 f4       	brne	.+62     	; 0xd08 <USB_Host_ProcessNextHostState+0x234>
			{
				ErrorCode = HOST_ENUMERROR_ControlError;
				break;
			}

			HOST_TASK_NONBLOCK_WAIT(100, HOST_STATE_Default_PostAddressSet);
     cca:	81 e0       	ldi	r24, 0x01	; 1
     ccc:	80 93 42 01 	sts	0x0142, r24
     cd0:	84 e6       	ldi	r24, 0x64	; 100
     cd2:	90 e0       	ldi	r25, 0x00	; 0
     cd4:	90 93 38 01 	sts	0x0138, r25
     cd8:	80 93 37 01 	sts	0x0137, r24
     cdc:	8a e0       	ldi	r24, 0x0A	; 10
     cde:	80 93 36 01 	sts	0x0136, r24
     ce2:	1a c0       	rjmp	.+52     	; 0xd18 <USB_Host_ProcessNextHostState+0x244>
			}

			static inline void USB_Host_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SetDeviceAddress(const uint8_t Address)
			{
				UHADDR  =  (Address & 0x7F);
     ce4:	81 e0       	ldi	r24, 0x01	; 1
     ce6:	80 93 a1 00 	sts	0x00A1, r24
			break;
		case HOST_STATE_Default_PostAddressSet:
			USB_Host_SetDeviceAddress(USB_HOST_DEVICEADDRESS);

			EVENT_USB_Host_DeviceEnumerationComplete();
     cea:	b0 db       	rcall	.-2208   	; 0x44c <EVENT_USB_Host_DeviceEnumerationComplete>
			USB_HostState = HOST_STATE_Addressed;
     cec:	8b e0       	ldi	r24, 0x0B	; 11
     cee:	80 93 42 01 	sts	0x0142, r24
     cf2:	12 c0       	rjmp	.+36     	; 0xd18 <USB_Host_ProcessNextHostState+0x244>
			break;
	}

	if ((ErrorCode != HOST_ENUMERROR_NoError) && (USB_HostState != HOST_STATE_Unattached))
	{
		EVENT_USB_Host_DeviceEnumerationFailed(ErrorCode, SubErrorCode);
     cf4:	89 2f       	mov	r24, r25
     cf6:	af db       	rcall	.-2210   	; 0x456 <EVENT_USB_Host_DeviceEnumerationFailed>
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
     cf8:	80 91 dd 00 	lds	r24, 0x00DD
     cfc:	81 60       	ori	r24, 0x01	; 1
     cfe:	80 93 dd 00 	sts	0x00DD, r24

		USB_Host_VBUS_Auto_Off();

		EVENT_USB_Host_DeviceUnattached();
     d02:	f2 db       	rcall	.-2076   	; 0x4e8 <EVENT_USB_Host_DeviceUnattached>

		USB_ResetInterface();
     d04:	bd d0       	rcall	.+378    	; 0xe80 <USB_ResetInterface>
     d06:	08 c0       	rjmp	.+16     	; 0xd18 <USB_Host_ProcessNextHostState+0x244>
	}
}
     d08:	93 e0       	ldi	r25, 0x03	; 3
     d0a:	02 c0       	rjmp	.+4      	; 0xd10 <USB_Host_ProcessNextHostState+0x23c>
     d0c:	94 e0       	ldi	r25, 0x04	; 4
     d0e:	60 e0       	ldi	r22, 0x00	; 0
			EVENT_USB_Host_DeviceEnumerationComplete();
			USB_HostState = HOST_STATE_Addressed;
			break;
	}

	if ((ErrorCode != HOST_ENUMERROR_NoError) && (USB_HostState != HOST_STATE_Unattached))
     d10:	80 91 42 01 	lds	r24, 0x0142
     d14:	82 30       	cpi	r24, 0x02	; 2
     d16:	71 f7       	brne	.-36     	; 0xcf4 <USB_Host_ProcessNextHostState+0x220>

		EVENT_USB_Host_DeviceUnattached();

		USB_ResetInterface();
	}
}
     d18:	28 96       	adiw	r28, 0x08	; 8
     d1a:	0f b6       	in	r0, 0x3f	; 63
     d1c:	f8 94       	cli
     d1e:	de bf       	out	0x3e, r29	; 62
     d20:	0f be       	out	0x3f, r0	; 63
     d22:	cd bf       	out	0x3d, r28	; 61
     d24:	cf 91       	pop	r28
     d26:	df 91       	pop	r29
     d28:	1f 91       	pop	r17
     d2a:	0f 91       	pop	r16
     d2c:	ef 90       	pop	r14
     d2e:	08 95       	ret

00000d30 <Pipe_ConfigurePipe>:
                        const uint8_t Type,
                        const uint8_t Token,
                        const uint8_t EndpointNumber,
                        const uint16_t Size,
                        const uint8_t Banks)
{
     d30:	ef 92       	push	r14
     d32:	0f 93       	push	r16
     d34:	1f 93       	push	r17
     d36:	9e 2d       	mov	r25, r14
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
     d38:	80 93 a7 00 	sts	0x00A7, r24
			 *  \pre The currently selected pipe must first be configured properly via \ref Pipe_ConfigurePipe().
			 */
			static inline void Pipe_EnablePipe(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_EnablePipe(void)
			{
				UPCONX |= (1 << PEN);
     d3c:	80 91 a9 00 	lds	r24, 0x00A9
     d40:	81 60       	ori	r24, 0x01	; 1
     d42:	80 93 a9 00 	sts	0x00A9, r24
	Pipe_SelectPipe(Number);
	Pipe_EnablePipe();

	UPCFG1X = 0;
     d46:	10 92 ab 00 	sts	0x00AB, r1

	UPCFG0X = ((Type << EPTYPE0) | Token | ((EndpointNumber & PIPE_EPNUM_MASK) << PEPNUM0));
     d4a:	62 95       	swap	r22
     d4c:	66 0f       	add	r22, r22
     d4e:	66 0f       	add	r22, r22
     d50:	60 7c       	andi	r22, 0xC0	; 192
     d52:	64 2b       	or	r22, r20
     d54:	2f 70       	andi	r18, 0x0F	; 15
     d56:	62 2b       	or	r22, r18
     d58:	60 93 aa 00 	sts	0x00AA, r22
     d5c:	28 e0       	ldi	r18, 0x08	; 8
     d5e:	30 e0       	ldi	r19, 0x00	; 0
     d60:	80 e0       	ldi	r24, 0x00	; 0
     d62:	03 c0       	rjmp	.+6      	; 0xd6a <Pipe_ConfigurePipe+0x3a>
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while ((CheckBytes < Bytes) && (CheckBytes < PIPE_MAX_SIZE))
				{
					MaskVal++;
     d64:	8f 5f       	subi	r24, 0xFF	; 255
					CheckBytes <<= 1;
     d66:	22 0f       	add	r18, r18
     d68:	33 1f       	adc	r19, r19
			static inline uint8_t Pipe_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while ((CheckBytes < Bytes) && (CheckBytes < PIPE_MAX_SIZE))
     d6a:	20 17       	cp	r18, r16
     d6c:	31 07       	cpc	r19, r17
     d6e:	10 f4       	brcc	.+4      	; 0xd74 <Pipe_ConfigurePipe+0x44>
     d70:	85 30       	cpi	r24, 0x05	; 5
     d72:	c1 f7       	brne	.-16     	; 0xd64 <Pipe_ConfigurePipe+0x34>
	UPCFG1X = ((1 << ALLOC) | Banks | Pipe_BytesToEPSizeMask(Size));
     d74:	92 60       	ori	r25, 0x02	; 2
     d76:	82 95       	swap	r24
     d78:	80 7f       	andi	r24, 0xF0	; 240
     d7a:	89 2b       	or	r24, r25
     d7c:	80 93 ab 00 	sts	0x00AB, r24

			/** Configures the currently selected pipe to allow for an unlimited number of IN requests. */
			static inline void Pipe_SetInfiniteINRequests(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetInfiniteINRequests(void)
			{
				UPCONX |= (1 << INMODE);
     d80:	80 91 a9 00 	lds	r24, 0x00A9
     d84:	80 62       	ori	r24, 0x20	; 32
     d86:	80 93 a9 00 	sts	0x00A9, r24
			 *  \return Boolean true if the selected pipe is configured, false otherwise.
			 */
			static inline bool Pipe_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsConfigured(void)
			{
				return ((UPSTAX & (1 << CFGOK)) ? true : false);
     d8a:	80 91 ac 00 	lds	r24, 0x00AC

	Pipe_SetInfiniteINRequests();

	return Pipe_IsConfigured();
}
     d8e:	88 1f       	adc	r24, r24
     d90:	88 27       	eor	r24, r24
     d92:	88 1f       	adc	r24, r24
     d94:	1f 91       	pop	r17
     d96:	0f 91       	pop	r16
     d98:	ef 90       	pop	r14
     d9a:	08 95       	ret

00000d9c <Pipe_ClearPipes>:

void Pipe_ClearPipes(void)
{
	UPINT = 0;
     d9c:	10 92 f8 00 	sts	0x00F8, r1
     da0:	90 e0       	ldi	r25, 0x00	; 0
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
     da2:	90 93 a7 00 	sts	0x00A7, r25

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
	{
		Pipe_SelectPipe(PNum);
		UPIENX  = 0;
     da6:	10 92 ae 00 	sts	0x00AE, r1
		UPINTX  = 0;
     daa:	10 92 a6 00 	sts	0x00A6, r1
		UPCFG1X = 0;
     dae:	10 92 ab 00 	sts	0x00AB, r1
			 *  from an attached device.
			 */
			static inline void Pipe_DisablePipe(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_DisablePipe(void)
			{
				UPCONX &= ~(1 << PEN);
     db2:	80 91 a9 00 	lds	r24, 0x00A9
     db6:	8e 7f       	andi	r24, 0xFE	; 254
     db8:	80 93 a9 00 	sts	0x00A9, r24

void Pipe_ClearPipes(void)
{
	UPINT = 0;

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
     dbc:	9f 5f       	subi	r25, 0xFF	; 255
     dbe:	97 30       	cpi	r25, 0x07	; 7
     dc0:	81 f7       	brne	.-32     	; 0xda2 <Pipe_ClearPipes+0x6>
		UPIENX  = 0;
		UPINTX  = 0;
		UPCFG1X = 0;
		Pipe_DisablePipe();
	}
}
     dc2:	08 95       	ret

00000dc4 <Pipe_IsEndpointBound>:

bool Pipe_IsEndpointBound(const uint8_t EndpointAddress)
{
     dc4:	e8 2f       	mov	r30, r24
			 *  \return Index of the currently selected pipe.
			 */
			static inline uint8_t Pipe_GetCurrentPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetCurrentPipe(void)
			{
				return (UPNUM & PIPE_PIPENUM_MASK);
     dc6:	70 91 a7 00 	lds	r23, 0x00A7
     dca:	60 e0       	ldi	r22, 0x00	; 0
		bool    PipeTokenCorrect = true;

		if (PipeToken != PIPE_TOKEN_SETUP)
		  PipeTokenCorrect = (PipeToken == ((EndpointAddress & PIPE_EPDIR_MASK) ? PIPE_TOKEN_IN : PIPE_TOKEN_OUT));

		if (PipeTokenCorrect && (Pipe_BoundEndpointNumber() == (EndpointAddress & PIPE_EPNUM_MASK)))
     dcc:	48 2f       	mov	r20, r24
     dce:	50 e0       	ldi	r21, 0x00	; 0
     dd0:	4f 70       	andi	r20, 0x0F	; 15
     dd2:	50 70       	andi	r21, 0x00	; 0
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
     dd4:	60 93 a7 00 	sts	0x00A7, r22
			 *  \return Boolean true if the selected pipe is configured, false otherwise.
			 */
			static inline bool Pipe_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsConfigured(void)
			{
				return ((UPSTAX & (1 << CFGOK)) ? true : false);
     dd8:	80 91 ac 00 	lds	r24, 0x00AC

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
	{
		Pipe_SelectPipe(PNum);

		if (!(Pipe_IsConfigured()))
     ddc:	87 ff       	sbrs	r24, 7
     dde:	18 c0       	rjmp	.+48     	; 0xe10 <Pipe_IsEndpointBound+0x4c>
			 *  \return The current pipe token, as a PIPE_TOKEN_* mask.
			 */
			static inline uint8_t Pipe_GetPipeToken(void) ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetPipeToken(void)
			{
				return (UPCFG0X & (0x03 << PTOKEN0));
     de0:	80 91 aa 00 	lds	r24, 0x00AA
     de4:	80 73       	andi	r24, 0x30	; 48
		  continue;

		uint8_t PipeToken        = Pipe_GetPipeToken();
		bool    PipeTokenCorrect = true;

		if (PipeToken != PIPE_TOKEN_SETUP)
     de6:	59 f0       	breq	.+22     	; 0xdfe <Pipe_IsEndpointBound+0x3a>
		  PipeTokenCorrect = (PipeToken == ((EndpointAddress & PIPE_EPDIR_MASK) ? PIPE_TOKEN_IN : PIPE_TOKEN_OUT));
     de8:	e7 fd       	sbrc	r30, 7
     dea:	03 c0       	rjmp	.+6      	; 0xdf2 <Pipe_IsEndpointBound+0x2e>
     dec:	20 e2       	ldi	r18, 0x20	; 32
     dee:	30 e0       	ldi	r19, 0x00	; 0
     df0:	02 c0       	rjmp	.+4      	; 0xdf6 <Pipe_IsEndpointBound+0x32>
     df2:	20 e1       	ldi	r18, 0x10	; 16
     df4:	30 e0       	ldi	r19, 0x00	; 0

		if (PipeTokenCorrect && (Pipe_BoundEndpointNumber() == (EndpointAddress & PIPE_EPNUM_MASK)))
     df6:	90 e0       	ldi	r25, 0x00	; 0
     df8:	82 17       	cp	r24, r18
     dfa:	93 07       	cpc	r25, r19
     dfc:	49 f4       	brne	.+18     	; 0xe10 <Pipe_IsEndpointBound+0x4c>
			 *  \return Endpoint number the currently selected pipe is bound to.
			 */
			static inline uint8_t Pipe_BoundEndpointNumber(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_BoundEndpointNumber(void)
			{
				return ((UPCFG0X >> PEPNUM0) & PIPE_EPNUM_MASK);
     dfe:	80 91 aa 00 	lds	r24, 0x00AA
     e02:	8f 70       	andi	r24, 0x0F	; 15
     e04:	90 e0       	ldi	r25, 0x00	; 0
     e06:	84 17       	cp	r24, r20
     e08:	95 07       	cpc	r25, r21
     e0a:	11 f4       	brne	.+4      	; 0xe10 <Pipe_IsEndpointBound+0x4c>
     e0c:	81 e0       	ldi	r24, 0x01	; 1
     e0e:	08 95       	ret

bool Pipe_IsEndpointBound(const uint8_t EndpointAddress)
{
	uint8_t PrevPipeNumber = Pipe_GetCurrentPipe();

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
     e10:	6f 5f       	subi	r22, 0xFF	; 255
     e12:	67 30       	cpi	r22, 0x07	; 7
     e14:	f9 f6       	brne	.-66     	; 0xdd4 <Pipe_IsEndpointBound+0x10>
			 *  \return Index of the currently selected pipe.
			 */
			static inline uint8_t Pipe_GetCurrentPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetCurrentPipe(void)
			{
				return (UPNUM & PIPE_PIPENUM_MASK);
     e16:	77 70       	andi	r23, 0x07	; 7
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
     e18:	70 93 a7 00 	sts	0x00A7, r23
     e1c:	80 e0       	ldi	r24, 0x00	; 0
		  return true;
	}

	Pipe_SelectPipe(PrevPipeNumber);
	return false;
}
     e1e:	08 95       	ret

00000e20 <Pipe_WaitUntilReady>:
			/** Returns the current USB frame number, when in host mode. Every millisecond the USB bus is active (i.e. not suspended)
			 *  the frame number is incremented by one.
			 */
			static inline uint16_t USB_Host_GetFrameNumber(void)
			{
				return UHFNUM;
     e20:	40 91 a2 00 	lds	r20, 0x00A2
     e24:	50 91 a3 00 	lds	r21, 0x00A3
     e28:	28 e8       	ldi	r18, 0x88	; 136
     e2a:	33 e1       	ldi	r19, 0x13	; 19
			 *  \return The current pipe token, as a PIPE_TOKEN_* mask.
			 */
			static inline uint8_t Pipe_GetPipeToken(void) ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetPipeToken(void)
			{
				return (UPCFG0X & (0x03 << PTOKEN0));
     e2c:	80 91 aa 00 	lds	r24, 0x00AA

	uint16_t PreviousFrameNumber = USB_Host_GetFrameNumber();

	for (;;)
	{
		if (Pipe_GetPipeToken() == PIPE_TOKEN_IN)
     e30:	80 73       	andi	r24, 0x30	; 48
     e32:	80 31       	cpi	r24, 0x10	; 16
     e34:	29 f4       	brne	.+10     	; 0xe40 <Pipe_WaitUntilReady+0x20>
			 *  \return Boolean true if the current pipe has received an IN packet, false otherwise.
			 */
			static inline bool Pipe_IsINReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsINReceived(void)
			{
				return ((UPINTX & (1 << RXINI)) ? true : false);
     e36:	80 91 a6 00 	lds	r24, 0x00A6
		{
			if (Pipe_IsINReceived())
     e3a:	80 ff       	sbrs	r24, 0
     e3c:	05 c0       	rjmp	.+10     	; 0xe48 <Pipe_WaitUntilReady+0x28>
     e3e:	1e c0       	rjmp	.+60     	; 0xe7c <Pipe_WaitUntilReady+0x5c>
			 *  \return Boolean true if the current pipe is ready for an OUT packet, false otherwise.
			 */
			static inline bool Pipe_IsOUTReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsOUTReady(void)
			{
				return ((UPINTX & (1 << TXOUTI)) ? true : false);
     e40:	80 91 a6 00 	lds	r24, 0x00A6
			  return PIPE_READYWAIT_NoError;
		}
		else
		{
			if (Pipe_IsOUTReady())
     e44:	82 fd       	sbrc	r24, 2
     e46:	1a c0       	rjmp	.+52     	; 0xe7c <Pipe_WaitUntilReady+0x5c>
			 *  \return Boolean true if the current pipe has been stalled by the attached device, false otherwise.
			 */
			static inline bool Pipe_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsStalled(void)
			{
				return ((UPINTX & (1 << RXSTALLI)) ? true : false);
     e48:	80 91 a6 00 	lds	r24, 0x00A6
			  return PIPE_READYWAIT_NoError;
		}

		if (Pipe_IsStalled())
     e4c:	81 ff       	sbrs	r24, 1
     e4e:	02 c0       	rjmp	.+4      	; 0xe54 <Pipe_WaitUntilReady+0x34>
     e50:	81 e0       	ldi	r24, 0x01	; 1
     e52:	08 95       	ret
		  return PIPE_READYWAIT_PipeStalled;
		else if (USB_HostState == HOST_STATE_Unattached)
     e54:	80 91 42 01 	lds	r24, 0x0142
     e58:	82 30       	cpi	r24, 0x02	; 2
     e5a:	89 f0       	breq	.+34     	; 0xe7e <Pipe_WaitUntilReady+0x5e>
     e5c:	80 91 a2 00 	lds	r24, 0x00A2
     e60:	90 91 a3 00 	lds	r25, 0x00A3
		  return PIPE_READYWAIT_DeviceDisconnected;

		uint16_t CurrentFrameNumber = USB_Host_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
     e64:	84 17       	cp	r24, r20
     e66:	95 07       	cpc	r25, r21
     e68:	09 f3       	breq	.-62     	; 0xe2c <Pipe_WaitUntilReady+0xc>
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
     e6a:	21 15       	cp	r18, r1
     e6c:	31 05       	cpc	r19, r1
     e6e:	11 f4       	brne	.+4      	; 0xe74 <Pipe_WaitUntilReady+0x54>
     e70:	83 e0       	ldi	r24, 0x03	; 3
     e72:	08 95       	ret
     e74:	21 50       	subi	r18, 0x01	; 1
     e76:	30 40       	sbci	r19, 0x00	; 0
     e78:	ac 01       	movw	r20, r24
     e7a:	d8 cf       	rjmp	.-80     	; 0xe2c <Pipe_WaitUntilReady+0xc>
     e7c:	80 e0       	ldi	r24, 0x00	; 0
			  return PIPE_READYWAIT_Timeout;
		}
	}
}
     e7e:	08 95       	ret

00000e80 <USB_ResetInterface>:
{
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
     e80:	6e d0       	rcall	.+220    	; 0xf5e <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
     e82:	75 d0       	rcall	.+234    	; 0xf6e <USB_INT_ClearAllInterrupts>
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				const uint8_t Temp = USBCON;
     e84:	80 91 d8 00 	lds	r24, 0x00D8

				USBCON = (Temp & ~(1 << USBE));
     e88:	98 2f       	mov	r25, r24
     e8a:	9f 77       	andi	r25, 0x7F	; 127
     e8c:	90 93 d8 00 	sts	0x00D8, r25
				USBCON = (Temp |  (1 << USBE));
     e90:	80 68       	ori	r24, 0x80	; 128
     e92:	80 93 d8 00 	sts	0x00D8, r24

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR  = USB_PLL_PSC;
     e96:	8c e0       	ldi	r24, 0x0C	; 12
     e98:	89 bd       	out	0x29, r24	; 41
				PLLCSR |= (1 << PLLE);
     e9a:	89 b5       	in	r24, 0x29	; 41
     e9c:	82 60       	ori	r24, 0x02	; 2
     e9e:	89 bd       	out	0x29, r24	; 41
		#if defined(USB_SERIES_4_AVR)
		PLLFRQ = ((1 << PLLUSB) | (1 << PDIV3) | (1 << PDIV1));
		#endif

		USB_PLL_On();
		while (!(USB_PLL_IsReady()));
     ea0:	09 b4       	in	r0, 0x29	; 41
     ea2:	00 fe       	sbrs	r0, 0
     ea4:	fd cf       	rjmp	.-6      	; 0xea0 <USB_ResetInterface+0x20>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON  &= ~(1 << FRZCLK);
     ea6:	80 91 d8 00 	lds	r24, 0x00D8
     eaa:	8f 7d       	andi	r24, 0xDF	; 223
     eac:	80 93 d8 00 	sts	0x00D8, r24
		#endif
	}
	else if (USB_CurrentMode == USB_MODE_Host)
	{
		#if defined(USB_CAN_BE_HOST)
		UHWCON &= ~(1 << UIMOD);
     eb0:	80 91 d7 00 	lds	r24, 0x00D7
     eb4:	8f 77       	andi	r24, 0x7F	; 127
     eb6:	80 93 d7 00 	sts	0x00D7, r24
#endif

#if defined(USB_CAN_BE_HOST)
static void USB_Init_Host(void)
{
	USB_HostState       = HOST_STATE_Unattached;
     eba:	82 e0       	ldi	r24, 0x02	; 2
     ebc:	80 93 42 01 	sts	0x0142, r24
	USB_ControlPipeSize = PIPE_CONTROLPIPE_DEFAULT_SIZE;
     ec0:	80 e4       	ldi	r24, 0x40	; 64
     ec2:	80 93 26 01 	sts	0x0126, r24
	#if !defined(__DOXYGEN__)
		/* Macros: */
			static inline void USB_Host_HostMode_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_HostMode_On(void)
			{
				USBCON |=  (1 << HOST);
     ec6:	80 91 d8 00 	lds	r24, 0x00D8
     eca:	80 64       	ori	r24, 0x40	; 64
     ecc:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
     ed0:	80 91 dd 00 	lds	r24, 0x00DD
     ed4:	81 60       	ori	r24, 0x01	; 1
     ed6:	80 93 dd 00 	sts	0x00DD, r24
			}

			static inline void USB_Host_VBUS_Manual_Enable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Manual_Enable(void)
			{
				OTGCON |=  (1 << VBUSHWC);
     eda:	80 91 dd 00 	lds	r24, 0x00DD
     ede:	84 60       	ori	r24, 0x04	; 4
     ee0:	80 93 dd 00 	sts	0x00DD, r24
				UHWCON &= ~(1 << UVCONE);
     ee4:	80 91 d7 00 	lds	r24, 0x00D7
     ee8:	8f 7e       	andi	r24, 0xEF	; 239
     eea:	80 93 d7 00 	sts	0x00D7, r24

				DDRE   |=  (1 << 7);
     eee:	6f 9a       	sbi	0x0d, 7	; 13
			}

			static inline void USB_Host_VBUS_Manual_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Manual_On(void)
			{
				PORTE  |=  (1 << 7);
     ef0:	77 9a       	sbi	0x0e, 7	; 14

	USB_Host_VBUS_Auto_Off();
	USB_Host_VBUS_Manual_Enable();
	USB_Host_VBUS_Manual_On();

	USB_INT_Enable(USB_INT_SRPI);
     ef2:	80 91 de 00 	lds	r24, 0x00DE
     ef6:	81 60       	ori	r24, 0x01	; 1
     ef8:	80 93 de 00 	sts	0x00DE, r24
	USB_INT_Enable(USB_INT_BCERRI);
     efc:	80 91 de 00 	lds	r24, 0x00DE
     f00:	84 60       	ori	r24, 0x04	; 4
     f02:	80 93 de 00 	sts	0x00DE, r24
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
     f06:	80 91 e0 00 	lds	r24, 0x00E0
     f0a:	8e 7f       	andi	r24, 0xFE	; 254
     f0c:	80 93 e0 00 	sts	0x00E0, r24

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON  |=  (1 << OTGPADE);
     f10:	80 91 d8 00 	lds	r24, 0x00D8
     f14:	80 61       	ori	r24, 0x10	; 16
     f16:	80 93 d8 00 	sts	0x00D8, r24
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
     f1a:	08 95       	ret

00000f1c <USB_Init>:

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON  |=  (1 << UVREGE);
     f1c:	e7 ed       	ldi	r30, 0xD7	; 215
     f1e:	f0 e0       	ldi	r31, 0x00	; 0
     f20:	80 81       	ld	r24, Z
     f22:	81 60       	ori	r24, 0x01	; 1
     f24:	80 83       	st	Z, r24
	{
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
     f26:	81 e0       	ldi	r24, 0x01	; 1
     f28:	80 93 39 01 	sts	0x0139, r24

	USB_ResetInterface();
}
     f2c:	a9 cf       	rjmp	.-174    	; 0xe80 <USB_ResetInterface>

00000f2e <USB_ShutDown>:

void USB_ShutDown(void)
{
	USB_INT_DisableAllInterrupts();
     f2e:	17 d0       	rcall	.+46     	; 0xf5e <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
     f30:	1e d0       	rcall	.+60     	; 0xf6e <USB_INT_ClearAllInterrupts>
			 *  enumerating the device once attached until \ref USB_Attach() is called.
			 */
			static inline void USB_Detach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Detach(void)
			{
				UDCON  |=  (1 << DETACH);
     f32:	e0 ee       	ldi	r30, 0xE0	; 224
     f34:	f0 e0       	ldi	r31, 0x00	; 0
     f36:	80 81       	ld	r24, Z
     f38:	81 60       	ori	r24, 0x01	; 1
     f3a:	80 83       	st	Z, r24
			}

			static inline void USB_Controller_Disable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Disable(void)
			{
				USBCON  &= ~(1 << USBE);
     f3c:	a8 ed       	ldi	r26, 0xD8	; 216
     f3e:	b0 e0       	ldi	r27, 0x00	; 0
     f40:	8c 91       	ld	r24, X
     f42:	8f 77       	andi	r24, 0x7F	; 127
     f44:	8c 93       	st	X, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR  = 0;
     f46:	19 bc       	out	0x29, r1	; 41

			static inline void USB_REG_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_Off(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON  &= ~(1 << UVREGE);
     f48:	e7 ed       	ldi	r30, 0xD7	; 215
     f4a:	f0 e0       	ldi	r31, 0x00	; 0
     f4c:	80 81       	ld	r24, Z
     f4e:	8e 7f       	andi	r24, 0xFE	; 254
     f50:	80 83       	st	Z, r24
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON  &= ~(1 << OTGPADE);
     f52:	8c 91       	ld	r24, X
     f54:	8f 7e       	andi	r24, 0xEF	; 239
     f56:	8c 93       	st	X, r24

	#if defined(USB_CAN_BE_BOTH)
	USB_CurrentMode = USB_MODE_None;
	#endif

	USB_IsInitialized = false;
     f58:	10 92 39 01 	sts	0x0139, r1
}
     f5c:	08 95       	ret

00000f5e <USB_INT_DisableAllInterrupts>:
#include "USBInterrupt.h"

void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
     f5e:	e8 ed       	ldi	r30, 0xD8	; 216
     f60:	f0 e0       	ldi	r31, 0x00	; 0
     f62:	80 81       	ld	r24, Z
     f64:	8c 7f       	andi	r24, 0xFC	; 252
     f66:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_BOTH)
	OTGIEN  = 0;
	#endif

	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
     f68:	10 92 a0 00 	sts	0x00A0, r1
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
	#endif
}
     f6c:	08 95       	ret

00000f6e <USB_INT_ClearAllInterrupts>:

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT  = 0;
     f6e:	10 92 da 00 	sts	0x00DA, r1
	#if defined(USB_CAN_BE_BOTH)
	OTGINT  = 0;
	#endif

	#if defined(USB_CAN_BE_HOST)
	UHINT   = 0;
     f72:	10 92 9f 00 	sts	0x009F, r1
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT   = 0;
	#endif
}
     f76:	08 95       	ret

00000f78 <__vector_10>:

ISR(USB_GEN_vect, ISR_BLOCK)
{
     f78:	1f 92       	push	r1
     f7a:	0f 92       	push	r0
     f7c:	0f b6       	in	r0, 0x3f	; 63
     f7e:	0f 92       	push	r0
     f80:	0b b6       	in	r0, 0x3b	; 59
     f82:	0f 92       	push	r0
     f84:	11 24       	eor	r1, r1
     f86:	2f 93       	push	r18
     f88:	3f 93       	push	r19
     f8a:	4f 93       	push	r20
     f8c:	5f 93       	push	r21
     f8e:	6f 93       	push	r22
     f90:	7f 93       	push	r23
     f92:	8f 93       	push	r24
     f94:	9f 93       	push	r25
     f96:	af 93       	push	r26
     f98:	bf 93       	push	r27
     f9a:	ef 93       	push	r30
     f9c:	ff 93       	push	r31
	}
	#endif
	#endif

	#if defined(USB_CAN_BE_HOST)
	if (USB_INT_HasOccurred(USB_INT_DDISCI) && USB_INT_IsEnabled(USB_INT_DDISCI))
     f9e:	80 91 9f 00 	lds	r24, 0x009F
     fa2:	81 ff       	sbrs	r24, 1
     fa4:	15 c0       	rjmp	.+42     	; 0xfd0 <__vector_10+0x58>
     fa6:	80 91 a0 00 	lds	r24, 0x00A0
     faa:	81 ff       	sbrs	r24, 1
     fac:	11 c0       	rjmp	.+34     	; 0xfd0 <__vector_10+0x58>
	{
		USB_INT_Clear(USB_INT_DDISCI);
     fae:	80 91 9f 00 	lds	r24, 0x009F
     fb2:	8d 7f       	andi	r24, 0xFD	; 253
     fb4:	80 93 9f 00 	sts	0x009F, r24
		USB_INT_Clear(USB_INT_DCONNI);
     fb8:	80 91 9f 00 	lds	r24, 0x009F
     fbc:	8e 7f       	andi	r24, 0xFE	; 254
     fbe:	80 93 9f 00 	sts	0x009F, r24
		USB_INT_Disable(USB_INT_DDISCI);
     fc2:	80 91 a0 00 	lds	r24, 0x00A0
     fc6:	8d 7f       	andi	r24, 0xFD	; 253
     fc8:	80 93 a0 00 	sts	0x00A0, r24

		EVENT_USB_Host_DeviceUnattached();
     fcc:	8d da       	rcall	.-2790   	; 0x4e8 <EVENT_USB_Host_DeviceUnattached>

		USB_ResetInterface();
     fce:	58 df       	rcall	.-336    	; 0xe80 <USB_ResetInterface>
	}

	if (USB_INT_HasOccurred(USB_INT_VBERRI) && USB_INT_IsEnabled(USB_INT_VBERRI))
     fd0:	80 91 df 00 	lds	r24, 0x00DF
     fd4:	81 ff       	sbrs	r24, 1
     fd6:	15 c0       	rjmp	.+42     	; 0x1002 <__vector_10+0x8a>
     fd8:	80 91 de 00 	lds	r24, 0x00DE
     fdc:	81 ff       	sbrs	r24, 1
     fde:	11 c0       	rjmp	.+34     	; 0x1002 <__vector_10+0x8a>
	{
		USB_INT_Clear(USB_INT_VBERRI);
     fe0:	80 91 df 00 	lds	r24, 0x00DF
     fe4:	8d 7f       	andi	r24, 0xFD	; 253
     fe6:	80 93 df 00 	sts	0x00DF, r24
			}

			static inline void USB_Host_VBUS_Manual_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Manual_Off(void)
			{
				PORTE  &= ~(1 << 7);
     fea:	77 98       	cbi	0x0e, 7	; 14
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
     fec:	80 91 dd 00 	lds	r24, 0x00DD
     ff0:	81 60       	ori	r24, 0x01	; 1
     ff2:	80 93 dd 00 	sts	0x00DD, r24

		USB_Host_VBUS_Manual_Off();
		USB_Host_VBUS_Auto_Off();

		EVENT_USB_Host_HostError(HOST_ERROR_VBusVoltageDip);
     ff6:	80 e0       	ldi	r24, 0x00	; 0
     ff8:	5a da       	rcall	.-2892   	; 0x4ae <EVENT_USB_Host_HostError>
		EVENT_USB_Host_DeviceUnattached();
     ffa:	76 da       	rcall	.-2836   	; 0x4e8 <EVENT_USB_Host_DeviceUnattached>

		USB_HostState = HOST_STATE_Unattached;
     ffc:	82 e0       	ldi	r24, 0x02	; 2
     ffe:	80 93 42 01 	sts	0x0142, r24
	}

	if (USB_INT_HasOccurred(USB_INT_SRPI) && USB_INT_IsEnabled(USB_INT_SRPI))
    1002:	80 91 df 00 	lds	r24, 0x00DF
    1006:	80 ff       	sbrs	r24, 0
    1008:	17 c0       	rjmp	.+46     	; 0x1038 <__vector_10+0xc0>
    100a:	80 91 de 00 	lds	r24, 0x00DE
    100e:	80 ff       	sbrs	r24, 0
    1010:	13 c0       	rjmp	.+38     	; 0x1038 <__vector_10+0xc0>
	{
		USB_INT_Clear(USB_INT_SRPI);
    1012:	80 91 df 00 	lds	r24, 0x00DF
    1016:	8e 7f       	andi	r24, 0xFE	; 254
    1018:	80 93 df 00 	sts	0x00DF, r24
		USB_INT_Disable(USB_INT_SRPI);
    101c:	80 91 de 00 	lds	r24, 0x00DE
    1020:	8e 7f       	andi	r24, 0xFE	; 254
    1022:	80 93 de 00 	sts	0x00DE, r24

		EVENT_USB_Host_DeviceAttached();
    1026:	69 da       	rcall	.-2862   	; 0x4fa <EVENT_USB_Host_DeviceAttached>

		USB_INT_Enable(USB_INT_DDISCI);
    1028:	80 91 a0 00 	lds	r24, 0x00A0
    102c:	82 60       	ori	r24, 0x02	; 2
    102e:	80 93 a0 00 	sts	0x00A0, r24

		USB_HostState = HOST_STATE_Powered;
    1032:	83 e0       	ldi	r24, 0x03	; 3
    1034:	80 93 42 01 	sts	0x0142, r24
	}

	if (USB_INT_HasOccurred(USB_INT_BCERRI) && USB_INT_IsEnabled(USB_INT_BCERRI))
    1038:	80 91 df 00 	lds	r24, 0x00DF
    103c:	82 ff       	sbrs	r24, 2
    103e:	0e c0       	rjmp	.+28     	; 0x105c <__vector_10+0xe4>
    1040:	80 91 de 00 	lds	r24, 0x00DE
    1044:	82 ff       	sbrs	r24, 2
    1046:	0a c0       	rjmp	.+20     	; 0x105c <__vector_10+0xe4>
	{
		USB_INT_Clear(USB_INT_BCERRI);
    1048:	80 91 df 00 	lds	r24, 0x00DF
    104c:	8b 7f       	andi	r24, 0xFB	; 251
    104e:	80 93 df 00 	sts	0x00DF, r24

		EVENT_USB_Host_DeviceEnumerationFailed(HOST_ENUMERROR_NoDeviceDetected, 0);
    1052:	82 e0       	ldi	r24, 0x02	; 2
    1054:	60 e0       	ldi	r22, 0x00	; 0
    1056:	ff d9       	rcall	.-3074   	; 0x456 <EVENT_USB_Host_DeviceEnumerationFailed>
		EVENT_USB_Host_DeviceUnattached();
    1058:	47 da       	rcall	.-2930   	; 0x4e8 <EVENT_USB_Host_DeviceUnattached>

		USB_ResetInterface();
    105a:	12 df       	rcall	.-476    	; 0xe80 <USB_ResetInterface>
	}

	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_HSOFI) && USB_INT_IsEnabled(USB_INT_HSOFI))
    105c:	80 91 9f 00 	lds	r24, 0x009F
    1060:	85 ff       	sbrs	r24, 5
    1062:	0a c0       	rjmp	.+20     	; 0x1078 <__vector_10+0x100>
    1064:	80 91 a0 00 	lds	r24, 0x00A0
    1068:	85 ff       	sbrs	r24, 5
    106a:	06 c0       	rjmp	.+12     	; 0x1078 <__vector_10+0x100>
	{
		USB_INT_Clear(USB_INT_HSOFI);
    106c:	80 91 9f 00 	lds	r24, 0x009F
    1070:	8f 7d       	andi	r24, 0xDF	; 223
    1072:	80 93 9f 00 	sts	0x009F, r24

		EVENT_USB_Host_StartOfFrame();
    1076:	ae d0       	rcall	.+348    	; 0x11d4 <USB_Event_Stub>
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
    1078:	ff 91       	pop	r31
    107a:	ef 91       	pop	r30
    107c:	bf 91       	pop	r27
    107e:	af 91       	pop	r26
    1080:	9f 91       	pop	r25
    1082:	8f 91       	pop	r24
    1084:	7f 91       	pop	r23
    1086:	6f 91       	pop	r22
    1088:	5f 91       	pop	r21
    108a:	4f 91       	pop	r20
    108c:	3f 91       	pop	r19
    108e:	2f 91       	pop	r18
    1090:	0f 90       	pop	r0
    1092:	0b be       	out	0x3b, r0	; 59
    1094:	0f 90       	pop	r0
    1096:	0f be       	out	0x3f, r0	; 63
    1098:	0f 90       	pop	r0
    109a:	1f 90       	pop	r1
    109c:	18 95       	reti

0000109e <USB_GetNextDescriptorComp>:

uint8_t USB_GetNextDescriptorComp(uint16_t* const BytesRem, void** const CurrConfigLoc, ConfigComparatorPtr_t const ComparatorRoutine)
{
    109e:	af 92       	push	r10
    10a0:	bf 92       	push	r11
    10a2:	cf 92       	push	r12
    10a4:	df 92       	push	r13
    10a6:	ef 92       	push	r14
    10a8:	ff 92       	push	r15
    10aa:	0f 93       	push	r16
    10ac:	1f 93       	push	r17
    10ae:	cf 93       	push	r28
    10b0:	df 93       	push	r29
    10b2:	7c 01       	movw	r14, r24
    10b4:	8b 01       	movw	r16, r22
    10b6:	5a 01       	movw	r10, r20
    10b8:	21 c0       	rjmp	.+66     	; 0x10fc <USB_GetNextDescriptorComp+0x5e>
	uint8_t ErrorCode;

	while (*BytesRem)
	{
		uint8_t* PrevDescLoc  = *CurrConfigLoc;
    10ba:	f8 01       	movw	r30, r16
    10bc:	c0 81       	ld	r28, Z
    10be:	d1 81       	ldd	r29, Z+1	; 0x01
			static inline void USB_GetNextDescriptor(uint16_t* const BytesRem,
			                                         void** CurrConfigLoc) ATTR_NON_NULL_PTR_ARG(1) ATTR_NON_NULL_PTR_ARG(2);
			static inline void USB_GetNextDescriptor(uint16_t* const BytesRem,
			                                         void** CurrConfigLoc)
			{
				uint16_t CurrDescriptorSize = DESCRIPTOR_CAST(*CurrConfigLoc, USB_Descriptor_Header_t).Size;
    10c0:	88 81       	ld	r24, Y
    10c2:	90 e0       	ldi	r25, 0x00	; 0

				*CurrConfigLoc  = ((uint8_t*)*CurrConfigLoc) + CurrDescriptorSize;
    10c4:	9e 01       	movw	r18, r28
    10c6:	28 0f       	add	r18, r24
    10c8:	39 1f       	adc	r19, r25
    10ca:	31 83       	std	Z+1, r19	; 0x01
    10cc:	20 83       	st	Z, r18
				*BytesRem      -= CurrDescriptorSize;
    10ce:	f7 01       	movw	r30, r14
    10d0:	20 81       	ld	r18, Z
    10d2:	31 81       	ldd	r19, Z+1	; 0x01
    10d4:	28 1b       	sub	r18, r24
    10d6:	39 0b       	sbc	r19, r25
    10d8:	31 83       	std	Z+1, r19	; 0x01
    10da:	20 83       	st	Z, r18
		uint16_t PrevBytesRem = *BytesRem;

		USB_GetNextDescriptor(BytesRem, CurrConfigLoc);

		if ((ErrorCode = ComparatorRoutine(*CurrConfigLoc)) != DESCRIPTOR_SEARCH_NotFound)
    10dc:	f8 01       	movw	r30, r16
    10de:	80 81       	ld	r24, Z
    10e0:	91 81       	ldd	r25, Z+1	; 0x01
    10e2:	f5 01       	movw	r30, r10
    10e4:	09 95       	icall
    10e6:	82 30       	cpi	r24, 0x02	; 2
    10e8:	49 f0       	breq	.+18     	; 0x10fc <USB_GetNextDescriptorComp+0x5e>
		{
			if (ErrorCode == DESCRIPTOR_SEARCH_Fail)
    10ea:	81 30       	cpi	r24, 0x01	; 1
    10ec:	71 f4       	brne	.+28     	; 0x110a <USB_GetNextDescriptorComp+0x6c>
			{
				*CurrConfigLoc = PrevDescLoc;
    10ee:	f8 01       	movw	r30, r16
    10f0:	c0 83       	st	Z, r28
    10f2:	d1 83       	std	Z+1, r29	; 0x01
				*BytesRem      = PrevBytesRem;
    10f4:	f7 01       	movw	r30, r14
    10f6:	d1 82       	std	Z+1, r13	; 0x01
    10f8:	c0 82       	st	Z, r12
    10fa:	07 c0       	rjmp	.+14     	; 0x110a <USB_GetNextDescriptorComp+0x6c>

uint8_t USB_GetNextDescriptorComp(uint16_t* const BytesRem, void** const CurrConfigLoc, ConfigComparatorPtr_t const ComparatorRoutine)
{
	uint8_t ErrorCode;

	while (*BytesRem)
    10fc:	f7 01       	movw	r30, r14
    10fe:	c0 80       	ld	r12, Z
    1100:	d1 80       	ldd	r13, Z+1	; 0x01
    1102:	c1 14       	cp	r12, r1
    1104:	d1 04       	cpc	r13, r1
    1106:	c9 f6       	brne	.-78     	; 0x10ba <USB_GetNextDescriptorComp+0x1c>
    1108:	82 e0       	ldi	r24, 0x02	; 2
			return ErrorCode;
		}
	}

	return DESCRIPTOR_SEARCH_COMP_EndOfDescriptor;
}
    110a:	df 91       	pop	r29
    110c:	cf 91       	pop	r28
    110e:	1f 91       	pop	r17
    1110:	0f 91       	pop	r16
    1112:	ff 90       	pop	r15
    1114:	ef 90       	pop	r14
    1116:	df 90       	pop	r13
    1118:	cf 90       	pop	r12
    111a:	bf 90       	pop	r11
    111c:	af 90       	pop	r10
    111e:	08 95       	ret

00001120 <USB_Host_GetDeviceConfigDescriptor>:
#include "ConfigDescriptor.h"

#if defined(USB_CAN_BE_HOST)
uint8_t USB_Host_GetDeviceConfigDescriptor(uint8_t ConfigNumber, uint16_t* const ConfigSizePtr,
                                           void* BufferPtr, uint16_t BufferSize)
{
    1120:	cf 92       	push	r12
    1122:	df 92       	push	r13
    1124:	ef 92       	push	r14
    1126:	ff 92       	push	r15
    1128:	0f 93       	push	r16
    112a:	1f 93       	push	r17
    112c:	df 93       	push	r29
    112e:	cf 93       	push	r28
    1130:	cd b7       	in	r28, 0x3d	; 61
    1132:	de b7       	in	r29, 0x3e	; 62
    1134:	29 97       	sbiw	r28, 0x09	; 9
    1136:	0f b6       	in	r0, 0x3f	; 63
    1138:	f8 94       	cli
    113a:	de bf       	out	0x3e, r29	; 62
    113c:	0f be       	out	0x3f, r0	; 63
    113e:	cd bf       	out	0x3d, r28	; 61
    1140:	6b 01       	movw	r12, r22
    1142:	8a 01       	movw	r16, r20
    1144:	79 01       	movw	r14, r18
	uint8_t ErrorCode;
	uint8_t ConfigHeader[sizeof(USB_Descriptor_Configuration_Header_t)];

	USB_ControlRequest = (USB_Request_Header_t)
    1146:	90 e8       	ldi	r25, 0x80	; 128
    1148:	90 93 3a 01 	sts	0x013A, r25
    114c:	96 e0       	ldi	r25, 0x06	; 6
    114e:	90 93 3b 01 	sts	0x013B, r25
    1152:	90 e0       	ldi	r25, 0x00	; 0
    1154:	01 97       	sbiw	r24, 0x01	; 1
    1156:	92 60       	ori	r25, 0x02	; 2
    1158:	90 93 3d 01 	sts	0x013D, r25
    115c:	80 93 3c 01 	sts	0x013C, r24
    1160:	10 92 3f 01 	sts	0x013F, r1
    1164:	10 92 3e 01 	sts	0x013E, r1
    1168:	89 e0       	ldi	r24, 0x09	; 9
    116a:	90 e0       	ldi	r25, 0x00	; 0
    116c:	90 93 41 01 	sts	0x0141, r25
    1170:	80 93 40 01 	sts	0x0140, r24
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
    1174:	10 92 a7 00 	sts	0x00A7, r1
			.wLength       = sizeof(USB_Descriptor_Configuration_Header_t),
		};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	if ((ErrorCode = USB_Host_SendControlRequest(ConfigHeader)) != HOST_SENDCONTROL_Successful)
    1178:	ce 01       	movw	r24, r28
    117a:	01 96       	adiw	r24, 0x01	; 1
    117c:	55 d0       	rcall	.+170    	; 0x1228 <USB_Host_SendControlRequest>
    117e:	28 2f       	mov	r18, r24
    1180:	88 23       	and	r24, r24
    1182:	c1 f4       	brne	.+48     	; 0x11b4 <USB_Host_GetDeviceConfigDescriptor+0x94>
	  return ErrorCode;

	*ConfigSizePtr = DESCRIPTOR_PCAST(ConfigHeader, USB_Descriptor_Configuration_Header_t)->TotalConfigurationSize;
    1184:	8b 81       	ldd	r24, Y+3	; 0x03
    1186:	9c 81       	ldd	r25, Y+4	; 0x04
    1188:	f6 01       	movw	r30, r12
    118a:	91 83       	std	Z+1, r25	; 0x01
    118c:	80 83       	st	Z, r24

	if (*ConfigSizePtr > BufferSize)
    118e:	e8 16       	cp	r14, r24
    1190:	f9 06       	cpc	r15, r25
    1192:	10 f4       	brcc	.+4      	; 0x1198 <USB_Host_GetDeviceConfigDescriptor+0x78>
    1194:	25 e0       	ldi	r18, 0x05	; 5
    1196:	0e c0       	rjmp	.+28     	; 0x11b4 <USB_Host_GetDeviceConfigDescriptor+0x94>
	  return HOST_GETCONFIG_BuffOverflow;

	USB_ControlRequest.wLength = *ConfigSizePtr;
    1198:	90 93 41 01 	sts	0x0141, r25
    119c:	80 93 40 01 	sts	0x0140, r24

	if ((ErrorCode = USB_Host_SendControlRequest(BufferPtr)) != HOST_SENDCONTROL_Successful)
    11a0:	c8 01       	movw	r24, r16
    11a2:	42 d0       	rcall	.+132    	; 0x1228 <USB_Host_SendControlRequest>
    11a4:	28 2f       	mov	r18, r24
    11a6:	88 23       	and	r24, r24
    11a8:	29 f4       	brne	.+10     	; 0x11b4 <USB_Host_GetDeviceConfigDescriptor+0x94>
	  return ErrorCode;

	if (DESCRIPTOR_TYPE(BufferPtr) != DTYPE_Configuration)
    11aa:	f8 01       	movw	r30, r16
    11ac:	81 81       	ldd	r24, Z+1	; 0x01
    11ae:	82 30       	cpi	r24, 0x02	; 2
    11b0:	09 f0       	breq	.+2      	; 0x11b4 <USB_Host_GetDeviceConfigDescriptor+0x94>
    11b2:	26 e0       	ldi	r18, 0x06	; 6
	  return HOST_GETCONFIG_InvalidData;

	return HOST_GETCONFIG_Successful;
}
    11b4:	82 2f       	mov	r24, r18
    11b6:	29 96       	adiw	r28, 0x09	; 9
    11b8:	0f b6       	in	r0, 0x3f	; 63
    11ba:	f8 94       	cli
    11bc:	de bf       	out	0x3e, r29	; 62
    11be:	0f be       	out	0x3f, r0	; 63
    11c0:	cd bf       	out	0x3d, r28	; 61
    11c2:	cf 91       	pop	r28
    11c4:	df 91       	pop	r29
    11c6:	1f 91       	pop	r17
    11c8:	0f 91       	pop	r16
    11ca:	ff 90       	pop	r15
    11cc:	ef 90       	pop	r14
    11ce:	df 90       	pop	r13
    11d0:	cf 90       	pop	r12
    11d2:	08 95       	ret

000011d4 <USB_Event_Stub>:
#include "Events.h"

void USB_Event_Stub(void)
{

}
    11d4:	08 95       	ret

000011d6 <USB_Host_WaitForIOS>:

	return ReturnStatus;
}

static uint8_t USB_Host_WaitForIOS(const uint8_t WaitType)
{
    11d6:	1f 93       	push	r17
    11d8:	cf 93       	push	r28
    11da:	df 93       	push	r29
    11dc:	18 2f       	mov	r17, r24
    11de:	c8 ee       	ldi	r28, 0xE8	; 232
    11e0:	d3 e0       	ldi	r29, 0x03	; 3
    11e2:	09 c0       	rjmp	.+18     	; 0x11f6 <USB_Host_WaitForIOS+0x20>
	         ((WaitType == USB_HOST_WAITFOR_InReceived) && Pipe_IsINReceived()) ||
	         ((WaitType == USB_HOST_WAITFOR_OutReady)   && Pipe_IsOUTReady())))
	{
		uint8_t ErrorCode;

		if ((ErrorCode = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
    11e4:	81 e0       	ldi	r24, 0x01	; 1
    11e6:	b0 db       	rcall	.-2208   	; 0x948 <USB_Host_WaitMS>
    11e8:	88 23       	and	r24, r24
    11ea:	d1 f4       	brne	.+52     	; 0x1220 <USB_Host_WaitForIOS+0x4a>
		  return ErrorCode;

		if (!(TimeoutCounter--))
    11ec:	20 97       	sbiw	r28, 0x00	; 0
    11ee:	11 f4       	brne	.+4      	; 0x11f4 <USB_Host_WaitForIOS+0x1e>
    11f0:	84 e0       	ldi	r24, 0x04	; 4
    11f2:	16 c0       	rjmp	.+44     	; 0x1220 <USB_Host_WaitForIOS+0x4a>
    11f4:	21 97       	sbiw	r28, 0x01	; 1
	uint8_t  TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#else
	uint16_t TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#endif

	while (!(((WaitType == USB_HOST_WAITFOR_SetupSent)  && Pipe_IsSETUPSent())  ||
    11f6:	11 23       	and	r17, r17
    11f8:	29 f4       	brne	.+10     	; 0x1204 <USB_Host_WaitForIOS+0x2e>
			 *  \return Boolean true if the current pipe is ready for a SETUP packet, false otherwise.
			 */
			static inline bool Pipe_IsSETUPSent(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsSETUPSent(void)
			{
				return ((UPINTX & (1 << TXSTPI)) ? true : false);
    11fa:	80 91 a6 00 	lds	r24, 0x00A6
    11fe:	83 ff       	sbrs	r24, 3
    1200:	f1 cf       	rjmp	.-30     	; 0x11e4 <USB_Host_WaitForIOS+0xe>
    1202:	0d c0       	rjmp	.+26     	; 0x121e <USB_Host_WaitForIOS+0x48>
    1204:	11 30       	cpi	r17, 0x01	; 1
    1206:	29 f4       	brne	.+10     	; 0x1212 <USB_Host_WaitForIOS+0x3c>
			 *  \return Boolean true if the current pipe has received an IN packet, false otherwise.
			 */
			static inline bool Pipe_IsINReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsINReceived(void)
			{
				return ((UPINTX & (1 << RXINI)) ? true : false);
    1208:	80 91 a6 00 	lds	r24, 0x00A6
    120c:	80 ff       	sbrs	r24, 0
    120e:	ea cf       	rjmp	.-44     	; 0x11e4 <USB_Host_WaitForIOS+0xe>
    1210:	06 c0       	rjmp	.+12     	; 0x121e <USB_Host_WaitForIOS+0x48>
    1212:	12 30       	cpi	r17, 0x02	; 2
    1214:	39 f7       	brne	.-50     	; 0x11e4 <USB_Host_WaitForIOS+0xe>
			 *  \return Boolean true if the current pipe is ready for an OUT packet, false otherwise.
			 */
			static inline bool Pipe_IsOUTReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsOUTReady(void)
			{
				return ((UPINTX & (1 << TXOUTI)) ? true : false);
    1216:	80 91 a6 00 	lds	r24, 0x00A6
    121a:	82 ff       	sbrs	r24, 2
    121c:	e3 cf       	rjmp	.-58     	; 0x11e4 <USB_Host_WaitForIOS+0xe>
    121e:	80 e0       	ldi	r24, 0x00	; 0
		if (!(TimeoutCounter--))
		  return HOST_SENDCONTROL_SoftwareTimeOut;
	}

	return HOST_SENDCONTROL_Successful;
}
    1220:	df 91       	pop	r29
    1222:	cf 91       	pop	r28
    1224:	1f 91       	pop	r17
    1226:	08 95       	ret

00001228 <USB_Host_SendControlRequest>:

#define  __INCLUDE_FROM_HOSTSTDREQ_C
#include "HostStandardReq.h"

uint8_t USB_Host_SendControlRequest(void* const BufferPtr)
{
    1228:	ff 92       	push	r15
    122a:	0f 93       	push	r16
    122c:	1f 93       	push	r17
    122e:	cf 93       	push	r28
    1230:	df 93       	push	r29
    1232:	18 2f       	mov	r17, r24
    1234:	09 2f       	mov	r16, r25
			 *  \return Boolean true if the bus is currently suspended, false otherwise.
			 */
			static inline bool USB_Host_IsBusSuspended(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusSuspended(void)
			{
				return ((UHCON & (1 << SOFEN)) ? false : true);
    1236:	f0 90 9e 00 	lds	r15, 0x009E
	uint8_t* HeaderStream   = (uint8_t*)&USB_ControlRequest;
	uint8_t* DataStream     = (uint8_t*)BufferPtr;
	bool     BusSuspended   = USB_Host_IsBusSuspended();
	uint8_t  ReturnStatus   = HOST_SENDCONTROL_Successful;
	uint16_t DataLen        = USB_ControlRequest.wLength;
    123a:	c0 91 40 01 	lds	r28, 0x0140
    123e:	d0 91 41 01 	lds	r29, 0x0141
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
    1242:	80 91 9e 00 	lds	r24, 0x009E
    1246:	81 60       	ori	r24, 0x01	; 1
    1248:	80 93 9e 00 	sts	0x009E, r24

	USB_Host_ResumeBus();

	if ((ReturnStatus = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
    124c:	81 e0       	ldi	r24, 0x01	; 1
    124e:	7c db       	rcall	.-2312   	; 0x948 <USB_Host_WaitMS>
    1250:	98 2f       	mov	r25, r24
    1252:	88 23       	and	r24, r24
    1254:	09 f0       	breq	.+2      	; 0x1258 <USB_Host_SendControlRequest+0x30>
    1256:	d2 c0       	rjmp	.+420    	; 0x13fc <USB_Host_SendControlRequest+0x1d4>
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    1258:	80 91 aa 00 	lds	r24, 0x00AA
    125c:	8f 7c       	andi	r24, 0xCF	; 207
    125e:	80 93 aa 00 	sts	0x00AA, r24
			 *  flag for the pipe.
			 */
			static inline void Pipe_ClearErrorFlags(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearErrorFlags(void)
			{
				UPERRX = 0;
    1262:	10 92 f5 00 	sts	0x00F5, r1

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    1266:	80 91 a9 00 	lds	r24, 0x00A9
    126a:	8f 7b       	andi	r24, 0xBF	; 191
    126c:	80 93 a9 00 	sts	0x00A9, r24
    1270:	ea e3       	ldi	r30, 0x3A	; 58
    1272:	f1 e0       	ldi	r31, 0x01	; 1
	Pipe_ClearErrorFlags();

	Pipe_Unfreeze();

	for (uint8_t HeaderByte = 0; HeaderByte < sizeof(USB_Request_Header_t); HeaderByte++)
	  Pipe_Write_Byte(*(HeaderStream++));
    1274:	81 91       	ld	r24, Z+
			 *  \param[in] Byte  Next byte to write into the the currently selected pipe's FIFO buffer.
			 */
			static inline void Pipe_Write_Byte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Write_Byte(const uint8_t Byte)
			{
				UPDATX = Byte;
    1276:	80 93 af 00 	sts	0x00AF, r24
	Pipe_SetPipeToken(PIPE_TOKEN_SETUP);
	Pipe_ClearErrorFlags();

	Pipe_Unfreeze();

	for (uint8_t HeaderByte = 0; HeaderByte < sizeof(USB_Request_Header_t); HeaderByte++)
    127a:	81 e0       	ldi	r24, 0x01	; 1
    127c:	e2 34       	cpi	r30, 0x42	; 66
    127e:	f8 07       	cpc	r31, r24
    1280:	c9 f7       	brne	.-14     	; 0x1274 <USB_Host_SendControlRequest+0x4c>
			 *  \ingroup Group_PipePacketManagement
			 */
			static inline void Pipe_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearSETUP(void)
			{
				UPINTX &= ~((1 << TXSTPI) | (1 << FIFOCON));
    1282:	80 91 a6 00 	lds	r24, 0x00A6
    1286:	87 77       	andi	r24, 0x77	; 119
    1288:	80 93 a6 00 	sts	0x00A6, r24
	  Pipe_Write_Byte(*(HeaderStream++));

	Pipe_ClearSETUP();

	if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_SetupSent)) != HOST_SENDCONTROL_Successful)
    128c:	80 e0       	ldi	r24, 0x00	; 0
    128e:	a3 df       	rcall	.-186    	; 0x11d6 <USB_Host_WaitForIOS>
    1290:	98 2f       	mov	r25, r24
    1292:	88 23       	and	r24, r24
    1294:	09 f0       	breq	.+2      	; 0x1298 <USB_Host_SendControlRequest+0x70>
    1296:	b2 c0       	rjmp	.+356    	; 0x13fc <USB_Host_SendControlRequest+0x1d4>

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    1298:	80 91 a9 00 	lds	r24, 0x00A9
    129c:	80 64       	ori	r24, 0x40	; 64
    129e:	80 93 a9 00 	sts	0x00A9, r24
	  goto End_Of_Control_Send;

	Pipe_Freeze();

	if ((ReturnStatus = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
    12a2:	81 e0       	ldi	r24, 0x01	; 1
    12a4:	51 db       	rcall	.-2398   	; 0x948 <USB_Host_WaitMS>
    12a6:	98 2f       	mov	r25, r24
    12a8:	88 23       	and	r24, r24
    12aa:	09 f0       	breq	.+2      	; 0x12ae <USB_Host_SendControlRequest+0x86>
    12ac:	a7 c0       	rjmp	.+334    	; 0x13fc <USB_Host_SendControlRequest+0x1d4>
#include "HostStandardReq.h"

uint8_t USB_Host_SendControlRequest(void* const BufferPtr)
{
	uint8_t* HeaderStream   = (uint8_t*)&USB_ControlRequest;
	uint8_t* DataStream     = (uint8_t*)BufferPtr;
    12ae:	21 2f       	mov	r18, r17
    12b0:	30 2f       	mov	r19, r16
    12b2:	c9 01       	movw	r24, r18
    12b4:	8c 01       	movw	r16, r24
	Pipe_Freeze();

	if ((ReturnStatus = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
	  goto End_Of_Control_Send;

	if ((USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_DIRECTION) == REQDIR_DEVICETOHOST)
    12b6:	80 91 3a 01 	lds	r24, 0x013A
    12ba:	87 ff       	sbrs	r24, 7
    12bc:	52 c0       	rjmp	.+164    	; 0x1362 <USB_Host_SendControlRequest+0x13a>
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    12be:	80 91 aa 00 	lds	r24, 0x00AA
    12c2:	8f 7c       	andi	r24, 0xCF	; 207
    12c4:	80 61       	ori	r24, 0x10	; 16
    12c6:	80 93 aa 00 	sts	0x00AA, r24
	{
		Pipe_SetPipeToken(PIPE_TOKEN_IN);

		if (DataStream != NULL)
    12ca:	01 15       	cp	r16, r1
    12cc:	11 05       	cpc	r17, r1
    12ce:	69 f5       	brne	.+90     	; 0x132a <USB_Host_SendControlRequest+0x102>
    12d0:	2e c0       	rjmp	.+92     	; 0x132e <USB_Host_SendControlRequest+0x106>

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    12d2:	80 91 a9 00 	lds	r24, 0x00A9
    12d6:	8f 7b       	andi	r24, 0xBF	; 191
    12d8:	80 93 a9 00 	sts	0x00A9, r24
		{
			while (DataLen)
			{
				Pipe_Unfreeze();

				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_InReceived)) != HOST_SENDCONTROL_Successful)
    12dc:	81 e0       	ldi	r24, 0x01	; 1
    12de:	7b df       	rcall	.-266    	; 0x11d6 <USB_Host_WaitForIOS>
    12e0:	98 2f       	mov	r25, r24
    12e2:	88 23       	and	r24, r24
    12e4:	09 f0       	breq	.+2      	; 0x12e8 <USB_Host_SendControlRequest+0xc0>
    12e6:	8a c0       	rjmp	.+276    	; 0x13fc <USB_Host_SendControlRequest+0x1d4>
			 *  \return Total number of bytes in the currently selected Pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
    12e8:	80 91 f6 00 	lds	r24, 0x00F6
    12ec:	90 91 f7 00 	lds	r25, 0x00F7
				  goto End_Of_Control_Send;

				if (!(Pipe_BytesInPipe()))
    12f0:	89 2b       	or	r24, r25
    12f2:	49 f4       	brne	.+18     	; 0x1306 <USB_Host_SendControlRequest+0xde>
    12f4:	c0 e0       	ldi	r28, 0x00	; 0
    12f6:	d0 e0       	ldi	r29, 0x00	; 0
    12f8:	06 c0       	rjmp	.+12     	; 0x1306 <USB_Host_SendControlRequest+0xde>
			 *  \return Next byte in the currently selected pipe's FIFO buffer.
			 */
			static inline uint8_t Pipe_Read_Byte(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_Read_Byte(void)
			{
				return UPDATX;
    12fa:	80 91 af 00 	lds	r24, 0x00AF
				  DataLen = 0;

				while (Pipe_BytesInPipe() && DataLen)
				{
					*(DataStream++) = Pipe_Read_Byte();
    12fe:	f8 01       	movw	r30, r16
    1300:	81 93       	st	Z+, r24
    1302:	8f 01       	movw	r16, r30
					DataLen--;
    1304:	21 97       	sbiw	r28, 0x01	; 1
			 *  \return Total number of bytes in the currently selected Pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
    1306:	80 91 f6 00 	lds	r24, 0x00F6
    130a:	90 91 f7 00 	lds	r25, 0x00F7
				  goto End_Of_Control_Send;

				if (!(Pipe_BytesInPipe()))
				  DataLen = 0;

				while (Pipe_BytesInPipe() && DataLen)
    130e:	89 2b       	or	r24, r25
    1310:	11 f0       	breq	.+4      	; 0x1316 <USB_Host_SendControlRequest+0xee>
    1312:	20 97       	sbiw	r28, 0x00	; 0
    1314:	91 f7       	brne	.-28     	; 0x12fa <USB_Host_SendControlRequest+0xd2>

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    1316:	80 91 a9 00 	lds	r24, 0x00A9
    131a:	80 64       	ori	r24, 0x40	; 64
    131c:	80 93 a9 00 	sts	0x00A9, r24
			 *  \ingroup Group_PipePacketManagement
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
    1320:	80 91 a6 00 	lds	r24, 0x00A6
    1324:	8e 77       	andi	r24, 0x7E	; 126
    1326:	80 93 a6 00 	sts	0x00A6, r24
	{
		Pipe_SetPipeToken(PIPE_TOKEN_IN);

		if (DataStream != NULL)
		{
			while (DataLen)
    132a:	20 97       	sbiw	r28, 0x00	; 0
    132c:	91 f6       	brne	.-92     	; 0x12d2 <USB_Host_SendControlRequest+0xaa>
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    132e:	80 91 aa 00 	lds	r24, 0x00AA
    1332:	8f 7c       	andi	r24, 0xCF	; 207
    1334:	80 62       	ori	r24, 0x20	; 32
    1336:	80 93 aa 00 	sts	0x00AA, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    133a:	80 91 a9 00 	lds	r24, 0x00A9
    133e:	8f 7b       	andi	r24, 0xBF	; 191
    1340:	80 93 a9 00 	sts	0x00A9, r24
		}

		Pipe_SetPipeToken(PIPE_TOKEN_OUT);
		Pipe_Unfreeze();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    1344:	82 e0       	ldi	r24, 0x02	; 2
    1346:	47 df       	rcall	.-370    	; 0x11d6 <USB_Host_WaitForIOS>
    1348:	98 2f       	mov	r25, r24
    134a:	88 23       	and	r24, r24
    134c:	09 f0       	breq	.+2      	; 0x1350 <USB_Host_SendControlRequest+0x128>
    134e:	56 c0       	rjmp	.+172    	; 0x13fc <USB_Host_SendControlRequest+0x1d4>
			 *  \ingroup Group_PipePacketManagement
			 */
			static inline void Pipe_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearOUT(void)
			{
				UPINTX &= ~((1 << TXOUTI) | (1 << FIFOCON));
    1350:	80 91 a6 00 	lds	r24, 0x00A6
    1354:	8b 77       	andi	r24, 0x7B	; 123
    1356:	80 93 a6 00 	sts	0x00A6, r24
		  goto End_Of_Control_Send;

		Pipe_ClearOUT();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    135a:	82 e0       	ldi	r24, 0x02	; 2
    135c:	3c df       	rcall	.-392    	; 0x11d6 <USB_Host_WaitForIOS>
    135e:	98 2f       	mov	r25, r24
    1360:	4d c0       	rjmp	.+154    	; 0x13fc <USB_Host_SendControlRequest+0x1d4>
		  goto End_Of_Control_Send;
	}
	else
	{
		if (DataStream != NULL)
    1362:	01 15       	cp	r16, r1
    1364:	11 05       	cpc	r17, r1
    1366:	a9 f1       	breq	.+106    	; 0x13d2 <USB_Host_SendControlRequest+0x1aa>
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    1368:	80 91 aa 00 	lds	r24, 0x00AA
    136c:	8f 7c       	andi	r24, 0xCF	; 207
    136e:	80 62       	ori	r24, 0x20	; 32
    1370:	80 93 aa 00 	sts	0x00AA, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    1374:	80 91 a9 00 	lds	r24, 0x00A9
    1378:	8f 7b       	andi	r24, 0xBF	; 191
    137a:	80 93 a9 00 	sts	0x00A9, r24
    137e:	1d c0       	rjmp	.+58     	; 0x13ba <USB_Host_SendControlRequest+0x192>
			Pipe_SetPipeToken(PIPE_TOKEN_OUT);
			Pipe_Unfreeze();

			while (DataLen)
			{
				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    1380:	82 e0       	ldi	r24, 0x02	; 2
    1382:	29 df       	rcall	.-430    	; 0x11d6 <USB_Host_WaitForIOS>
    1384:	98 2f       	mov	r25, r24
    1386:	88 23       	and	r24, r24
    1388:	c9 f5       	brne	.+114    	; 0x13fc <USB_Host_SendControlRequest+0x1d4>
				  goto End_Of_Control_Send;

				while (DataLen && (Pipe_BytesInPipe() < USB_ControlPipeSize))
    138a:	80 91 26 01 	lds	r24, 0x0126
    138e:	28 2f       	mov	r18, r24
    1390:	30 e0       	ldi	r19, 0x00	; 0
    1392:	07 c0       	rjmp	.+14     	; 0x13a2 <USB_Host_SendControlRequest+0x17a>
				{
					Pipe_Write_Byte(*(DataStream++));
    1394:	f8 01       	movw	r30, r16
    1396:	81 91       	ld	r24, Z+
    1398:	8f 01       	movw	r16, r30
			 *  \param[in] Byte  Next byte to write into the the currently selected pipe's FIFO buffer.
			 */
			static inline void Pipe_Write_Byte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Write_Byte(const uint8_t Byte)
			{
				UPDATX = Byte;
    139a:	80 93 af 00 	sts	0x00AF, r24
					DataLen--;
    139e:	21 97       	sbiw	r28, 0x01	; 1
			while (DataLen)
			{
				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
				  goto End_Of_Control_Send;

				while (DataLen && (Pipe_BytesInPipe() < USB_ControlPipeSize))
    13a0:	39 f0       	breq	.+14     	; 0x13b0 <USB_Host_SendControlRequest+0x188>
			 *  \return Total number of bytes in the currently selected Pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
    13a2:	80 91 f6 00 	lds	r24, 0x00F6
    13a6:	90 91 f7 00 	lds	r25, 0x00F7
    13aa:	82 17       	cp	r24, r18
    13ac:	93 07       	cpc	r25, r19
    13ae:	90 f3       	brcs	.-28     	; 0x1394 <USB_Host_SendControlRequest+0x16c>
			 *  \ingroup Group_PipePacketManagement
			 */
			static inline void Pipe_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearOUT(void)
			{
				UPINTX &= ~((1 << TXOUTI) | (1 << FIFOCON));
    13b0:	80 91 a6 00 	lds	r24, 0x00A6
    13b4:	8b 77       	andi	r24, 0x7B	; 123
    13b6:	80 93 a6 00 	sts	0x00A6, r24
		if (DataStream != NULL)
		{
			Pipe_SetPipeToken(PIPE_TOKEN_OUT);
			Pipe_Unfreeze();

			while (DataLen)
    13ba:	20 97       	sbiw	r28, 0x00	; 0
    13bc:	09 f7       	brne	.-62     	; 0x1380 <USB_Host_SendControlRequest+0x158>
				}

				Pipe_ClearOUT();
			}

			if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    13be:	82 e0       	ldi	r24, 0x02	; 2
    13c0:	0a df       	rcall	.-492    	; 0x11d6 <USB_Host_WaitForIOS>
    13c2:	98 2f       	mov	r25, r24
    13c4:	88 23       	and	r24, r24
    13c6:	d1 f4       	brne	.+52     	; 0x13fc <USB_Host_SendControlRequest+0x1d4>

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    13c8:	80 91 a9 00 	lds	r24, 0x00A9
    13cc:	80 64       	ori	r24, 0x40	; 64
    13ce:	80 93 a9 00 	sts	0x00A9, r24
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    13d2:	80 91 aa 00 	lds	r24, 0x00AA
    13d6:	8f 7c       	andi	r24, 0xCF	; 207
    13d8:	80 61       	ori	r24, 0x10	; 16
    13da:	80 93 aa 00 	sts	0x00AA, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    13de:	80 91 a9 00 	lds	r24, 0x00A9
    13e2:	8f 7b       	andi	r24, 0xBF	; 191
    13e4:	80 93 a9 00 	sts	0x00A9, r24
		}

		Pipe_SetPipeToken(PIPE_TOKEN_IN);
		Pipe_Unfreeze();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_InReceived)) != HOST_SENDCONTROL_Successful)
    13e8:	81 e0       	ldi	r24, 0x01	; 1
    13ea:	f5 de       	rcall	.-534    	; 0x11d6 <USB_Host_WaitForIOS>
    13ec:	98 2f       	mov	r25, r24
    13ee:	88 23       	and	r24, r24
    13f0:	29 f4       	brne	.+10     	; 0x13fc <USB_Host_SendControlRequest+0x1d4>
			 *  \ingroup Group_PipePacketManagement
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
    13f2:	80 91 a6 00 	lds	r24, 0x00A6
    13f6:	8e 77       	andi	r24, 0x7E	; 126
    13f8:	80 93 a6 00 	sts	0x00A6, r24

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    13fc:	80 91 a9 00 	lds	r24, 0x00A9
    1400:	80 64       	ori	r24, 0x40	; 64
    1402:	80 93 a9 00 	sts	0x00A9, r24
	}

End_Of_Control_Send:
	Pipe_Freeze();

	if (BusSuspended)
    1406:	f0 fc       	sbrc	r15, 0
    1408:	05 c0       	rjmp	.+10     	; 0x1414 <USB_Host_SendControlRequest+0x1ec>
			 *  messages to the device.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				UHCON &= ~(1 << SOFEN);
    140a:	80 91 9e 00 	lds	r24, 0x009E
    140e:	8e 7f       	andi	r24, 0xFE	; 254
    1410:	80 93 9e 00 	sts	0x009E, r24
			 *  \param[in] PipeNumber  Index of the pipe to reset.
			 */
			static inline void Pipe_ResetPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ResetPipe(const uint8_t PipeNumber)
			{
				UPRST = (1 << PipeNumber);
    1414:	81 e0       	ldi	r24, 0x01	; 1
    1416:	80 93 a8 00 	sts	0x00A8, r24
				UPRST = 0;
    141a:	10 92 a8 00 	sts	0x00A8, r1
	  USB_Host_SuspendBus();

	Pipe_ResetPipe(PIPE_CONTROLPIPE);

	return ReturnStatus;
}
    141e:	89 2f       	mov	r24, r25
    1420:	df 91       	pop	r29
    1422:	cf 91       	pop	r28
    1424:	1f 91       	pop	r17
    1426:	0f 91       	pop	r16
    1428:	ff 90       	pop	r15
    142a:	08 95       	ret

0000142c <Pipe_Read_Stream_LE>:
uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE Buffer,
                            uint16_t Length
                            __CALLBACK_PARAM)
{
    142c:	df 92       	push	r13
    142e:	ef 92       	push	r14
    1430:	ff 92       	push	r15
    1432:	0f 93       	push	r16
    1434:	1f 93       	push	r17
    1436:	cf 93       	push	r28
    1438:	df 93       	push	r29
    143a:	18 2f       	mov	r17, r24
    143c:	09 2f       	mov	r16, r25
    143e:	eb 01       	movw	r28, r22
    1440:	7a 01       	movw	r14, r20
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    1442:	80 91 aa 00 	lds	r24, 0x00AA
    1446:	8f 7c       	andi	r24, 0xCF	; 207
    1448:	80 61       	ori	r24, 0x10	; 16
    144a:	80 93 aa 00 	sts	0x00AA, r24
	uint8_t* DataStream = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	uint8_t  ErrorCode;

	Pipe_SetPipeToken(TEMPLATE_TOKEN);

	if ((ErrorCode = Pipe_WaitUntilReady()))
    144e:	e8 dc       	rcall	.-1584   	; 0xe20 <Pipe_WaitUntilReady>
    1450:	d8 2e       	mov	r13, r24
    1452:	88 23       	and	r24, r24
    1454:	19 f5       	brne	.+70     	; 0x149c <Pipe_Read_Stream_LE+0x70>
uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE Buffer,
                            uint16_t Length
                            __CALLBACK_PARAM)
{
	uint8_t* DataStream = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
    1456:	81 2f       	mov	r24, r17
    1458:	90 2f       	mov	r25, r16
    145a:	9c 01       	movw	r18, r24
    145c:	89 01       	movw	r16, r18
    145e:	1c c0       	rjmp	.+56     	; 0x1498 <Pipe_Read_Stream_LE+0x6c>
			 *  \return Boolean true if the currently selected pipe may be read from or written to, depending on its direction.
			 */
			static inline bool Pipe_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsReadWriteAllowed(void)
			{
				return ((UPINTX & (1 << RWAL)) ? true : false);
    1460:	80 91 a6 00 	lds	r24, 0x00A6
	}
	#endif

	while (Length)
	{
		if (!(Pipe_IsReadWriteAllowed()))
    1464:	85 fd       	sbrc	r24, 5
    1466:	12 c0       	rjmp	.+36     	; 0x148c <Pipe_Read_Stream_LE+0x60>
			 *  \ingroup Group_PipePacketManagement
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
    1468:	80 91 a6 00 	lds	r24, 0x00A6
    146c:	8e 77       	andi	r24, 0x7E	; 126
    146e:	80 93 a6 00 	sts	0x00A6, r24
		{
			TEMPLATE_CLEAR_PIPE();

			#if !defined(NO_STREAM_CALLBACKS)
			if ((Callback != NULL) && (Callback() == STREAMCALLBACK_Abort))
    1472:	e1 14       	cp	r14, r1
    1474:	f1 04       	cpc	r15, r1
    1476:	31 f0       	breq	.+12     	; 0x1484 <Pipe_Read_Stream_LE+0x58>
    1478:	f7 01       	movw	r30, r14
    147a:	09 95       	icall
    147c:	81 30       	cpi	r24, 0x01	; 1
    147e:	11 f4       	brne	.+4      	; 0x1484 <Pipe_Read_Stream_LE+0x58>
    1480:	84 e0       	ldi	r24, 0x04	; 4
    1482:	0d c0       	rjmp	.+26     	; 0x149e <Pipe_Read_Stream_LE+0x72>
			  return PIPE_RWSTREAM_CallbackAborted;
			#endif

			if ((ErrorCode = Pipe_WaitUntilReady()))
    1484:	cd dc       	rcall	.-1638   	; 0xe20 <Pipe_WaitUntilReady>
    1486:	88 23       	and	r24, r24
    1488:	39 f0       	breq	.+14     	; 0x1498 <Pipe_Read_Stream_LE+0x6c>
    148a:	09 c0       	rjmp	.+18     	; 0x149e <Pipe_Read_Stream_LE+0x72>
			 *  \return Next byte in the currently selected pipe's FIFO buffer.
			 */
			static inline uint8_t Pipe_Read_Byte(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_Read_Byte(void)
			{
				return UPDATX;
    148c:	80 91 af 00 	lds	r24, 0x00AF
			  return ErrorCode;
		}
		else
		{
			TEMPLATE_TRANSFER_BYTE(DataStream);
    1490:	f8 01       	movw	r30, r16
    1492:	81 93       	st	Z+, r24
    1494:	8f 01       	movw	r16, r30
			Length--;
    1496:	21 97       	sbiw	r28, 0x01	; 1
				} while (Length >= 8);
		}
	}
	#endif

	while (Length)
    1498:	20 97       	sbiw	r28, 0x00	; 0
    149a:	11 f7       	brne	.-60     	; 0x1460 <Pipe_Read_Stream_LE+0x34>
    149c:	8d 2d       	mov	r24, r13
			Length--;
		}
	}

	return PIPE_RWSTREAM_NoError;
}
    149e:	df 91       	pop	r29
    14a0:	cf 91       	pop	r28
    14a2:	1f 91       	pop	r17
    14a4:	0f 91       	pop	r16
    14a6:	ff 90       	pop	r15
    14a8:	ef 90       	pop	r14
    14aa:	df 90       	pop	r13
    14ac:	08 95       	ret

000014ae <Pipe_Write_Stream_LE>:
uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE Buffer,
                            uint16_t Length
                            __CALLBACK_PARAM)
{
    14ae:	df 92       	push	r13
    14b0:	ef 92       	push	r14
    14b2:	ff 92       	push	r15
    14b4:	0f 93       	push	r16
    14b6:	1f 93       	push	r17
    14b8:	cf 93       	push	r28
    14ba:	df 93       	push	r29
    14bc:	18 2f       	mov	r17, r24
    14be:	09 2f       	mov	r16, r25
    14c0:	eb 01       	movw	r28, r22
    14c2:	7a 01       	movw	r14, r20
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    14c4:	80 91 aa 00 	lds	r24, 0x00AA
    14c8:	8f 7c       	andi	r24, 0xCF	; 207
    14ca:	80 62       	ori	r24, 0x20	; 32
    14cc:	80 93 aa 00 	sts	0x00AA, r24
	uint8_t* DataStream = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	uint8_t  ErrorCode;

	Pipe_SetPipeToken(TEMPLATE_TOKEN);

	if ((ErrorCode = Pipe_WaitUntilReady()))
    14d0:	a7 dc       	rcall	.-1714   	; 0xe20 <Pipe_WaitUntilReady>
    14d2:	d8 2e       	mov	r13, r24
    14d4:	88 23       	and	r24, r24
    14d6:	19 f5       	brne	.+70     	; 0x151e <Pipe_Write_Stream_LE+0x70>
uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE Buffer,
                            uint16_t Length
                            __CALLBACK_PARAM)
{
	uint8_t* DataStream = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
    14d8:	81 2f       	mov	r24, r17
    14da:	90 2f       	mov	r25, r16
    14dc:	9c 01       	movw	r18, r24
    14de:	89 01       	movw	r16, r18
    14e0:	1c c0       	rjmp	.+56     	; 0x151a <Pipe_Write_Stream_LE+0x6c>
			 *  \return Boolean true if the currently selected pipe may be read from or written to, depending on its direction.
			 */
			static inline bool Pipe_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsReadWriteAllowed(void)
			{
				return ((UPINTX & (1 << RWAL)) ? true : false);
    14e2:	80 91 a6 00 	lds	r24, 0x00A6
	}
	#endif

	while (Length)
	{
		if (!(Pipe_IsReadWriteAllowed()))
    14e6:	85 fd       	sbrc	r24, 5
    14e8:	12 c0       	rjmp	.+36     	; 0x150e <Pipe_Write_Stream_LE+0x60>
			 *  \ingroup Group_PipePacketManagement
			 */
			static inline void Pipe_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearOUT(void)
			{
				UPINTX &= ~((1 << TXOUTI) | (1 << FIFOCON));
    14ea:	80 91 a6 00 	lds	r24, 0x00A6
    14ee:	8b 77       	andi	r24, 0x7B	; 123
    14f0:	80 93 a6 00 	sts	0x00A6, r24
		{
			TEMPLATE_CLEAR_PIPE();

			#if !defined(NO_STREAM_CALLBACKS)
			if ((Callback != NULL) && (Callback() == STREAMCALLBACK_Abort))
    14f4:	e1 14       	cp	r14, r1
    14f6:	f1 04       	cpc	r15, r1
    14f8:	31 f0       	breq	.+12     	; 0x1506 <Pipe_Write_Stream_LE+0x58>
    14fa:	f7 01       	movw	r30, r14
    14fc:	09 95       	icall
    14fe:	81 30       	cpi	r24, 0x01	; 1
    1500:	11 f4       	brne	.+4      	; 0x1506 <Pipe_Write_Stream_LE+0x58>
    1502:	84 e0       	ldi	r24, 0x04	; 4
    1504:	0d c0       	rjmp	.+26     	; 0x1520 <Pipe_Write_Stream_LE+0x72>
			  return PIPE_RWSTREAM_CallbackAborted;
			#endif

			if ((ErrorCode = Pipe_WaitUntilReady()))
    1506:	8c dc       	rcall	.-1768   	; 0xe20 <Pipe_WaitUntilReady>
    1508:	88 23       	and	r24, r24
    150a:	39 f0       	breq	.+14     	; 0x151a <Pipe_Write_Stream_LE+0x6c>
    150c:	09 c0       	rjmp	.+18     	; 0x1520 <Pipe_Write_Stream_LE+0x72>
			  return ErrorCode;
		}
		else
		{
			TEMPLATE_TRANSFER_BYTE(DataStream);
    150e:	f8 01       	movw	r30, r16
    1510:	81 91       	ld	r24, Z+
    1512:	8f 01       	movw	r16, r30
			 *  \param[in] Byte  Next byte to write into the the currently selected pipe's FIFO buffer.
			 */
			static inline void Pipe_Write_Byte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Write_Byte(const uint8_t Byte)
			{
				UPDATX = Byte;
    1514:	80 93 af 00 	sts	0x00AF, r24
			Length--;
    1518:	21 97       	sbiw	r28, 0x01	; 1
				} while (Length >= 8);
		}
	}
	#endif

	while (Length)
    151a:	20 97       	sbiw	r28, 0x00	; 0
    151c:	11 f7       	brne	.-60     	; 0x14e2 <Pipe_Write_Stream_LE+0x34>
    151e:	8d 2d       	mov	r24, r13
			Length--;
		}
	}

	return PIPE_RWSTREAM_NoError;
}
    1520:	df 91       	pop	r29
    1522:	cf 91       	pop	r28
    1524:	1f 91       	pop	r17
    1526:	0f 91       	pop	r16
    1528:	ff 90       	pop	r15
    152a:	ef 90       	pop	r14
    152c:	df 90       	pop	r13
    152e:	08 95       	ret

00001530 <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
    1530:	ff 92       	push	r15
    1532:	0f 93       	push	r16
    1534:	1f 93       	push	r17
			 *  \return Index of the currently selected pipe.
			 */
			static inline uint8_t Pipe_GetCurrentPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetCurrentPipe(void)
			{
				return (UPNUM & PIPE_PIPENUM_MASK);
    1536:	07 ea       	ldi	r16, 0xA7	; 167
    1538:	10 e0       	ldi	r17, 0x00	; 0
    153a:	f8 01       	movw	r30, r16
    153c:	f0 80       	ld	r15, Z
    153e:	f7 e0       	ldi	r31, 0x07	; 7
    1540:	ff 22       	and	r15, r31
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
    1542:	f8 01       	movw	r30, r16
    1544:	10 82       	st	Z, r1
{
	uint8_t PrevPipe = Pipe_GetCurrentPipe();

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	USB_Host_ProcessNextHostState();
    1546:	c6 da       	rcall	.-2676   	; 0xad4 <USB_Host_ProcessNextHostState>
    1548:	f8 01       	movw	r30, r16
    154a:	f0 82       	st	Z, r15
		if (USB_CurrentMode == USB_MODE_Device)
		  USB_DeviceTask();
		else if (USB_CurrentMode == USB_MODE_Host)
		  USB_HostTask();
	#endif
}
    154c:	1f 91       	pop	r17
    154e:	0f 91       	pop	r16
    1550:	ff 90       	pop	r15
    1552:	08 95       	ret

00001554 <DCOMP_MS_Host_NextMSInterface>:

	return MS_ENUMERROR_NoError;
}

static uint8_t DCOMP_MS_Host_NextMSInterface(void* const CurrentDescriptor)
{
    1554:	fc 01       	movw	r30, r24
	USB_Descriptor_Header_t* Header = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Header_t);

	if (Header->Type == DTYPE_Interface)
    1556:	81 81       	ldd	r24, Z+1	; 0x01
    1558:	84 30       	cpi	r24, 0x04	; 4
    155a:	59 f4       	brne	.+22     	; 0x1572 <DCOMP_MS_Host_NextMSInterface+0x1e>
	{
		USB_Descriptor_Interface_t* Interface = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Interface_t);

		if ((Interface->Class    == MS_CSCP_MassStorageClass)        &&
    155c:	85 81       	ldd	r24, Z+5	; 0x05
    155e:	88 30       	cpi	r24, 0x08	; 8
    1560:	41 f4       	brne	.+16     	; 0x1572 <DCOMP_MS_Host_NextMSInterface+0x1e>
    1562:	86 81       	ldd	r24, Z+6	; 0x06
    1564:	86 30       	cpi	r24, 0x06	; 6
    1566:	29 f4       	brne	.+10     	; 0x1572 <DCOMP_MS_Host_NextMSInterface+0x1e>
    1568:	87 81       	ldd	r24, Z+7	; 0x07
    156a:	80 35       	cpi	r24, 0x50	; 80
    156c:	11 f4       	brne	.+4      	; 0x1572 <DCOMP_MS_Host_NextMSInterface+0x1e>
    156e:	80 e0       	ldi	r24, 0x00	; 0
    1570:	08 95       	ret
    1572:	82 e0       	ldi	r24, 0x02	; 2
			return DESCRIPTOR_SEARCH_Found;
		}
	}

	return DESCRIPTOR_SEARCH_NotFound;
}
    1574:	08 95       	ret

00001576 <MS_Host_WaitForDataReceived>:

	return ErrorCode;
}

static uint8_t MS_Host_WaitForDataReceived(USB_ClassInfo_MS_Host_t* const MSInterfaceInfo)
{
    1576:	fc 01       	movw	r30, r24
			/** Returns the current USB frame number, when in host mode. Every millisecond the USB bus is active (i.e. not suspended)
			 *  the frame number is incremented by one.
			 */
			static inline uint16_t USB_Host_GetFrameNumber(void)
			{
				return UHFNUM;
    1578:	60 91 a2 00 	lds	r22, 0x00A2
    157c:	70 91 a3 00 	lds	r23, 0x00A3
	uint16_t TimeoutMSRem        = MS_COMMAND_DATA_TIMEOUT_MS;
	uint16_t PreviousFrameNumber = USB_Host_GetFrameNumber();

	Pipe_SelectPipe(MSInterfaceInfo->Config.DataINPipeNumber);
    1580:	40 81       	ld	r20, Z
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
    1582:	40 93 a7 00 	sts	0x00A7, r20

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    1586:	80 91 a9 00 	lds	r24, 0x00A9
    158a:	8f 7b       	andi	r24, 0xBF	; 191
    158c:	80 93 a9 00 	sts	0x00A9, r24
    1590:	20 e1       	ldi	r18, 0x10	; 16
    1592:	37 e2       	ldi	r19, 0x27	; 39
    1594:	3a c0       	rjmp	.+116    	; 0x160a <MS_Host_WaitForDataReceived+0x94>
    1596:	80 91 a2 00 	lds	r24, 0x00A2
    159a:	90 91 a3 00 	lds	r25, 0x00A3

	while (!(Pipe_IsINReceived()))
	{
		uint16_t CurrentFrameNumber = USB_Host_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
    159e:	86 17       	cp	r24, r22
    15a0:	97 07       	cpc	r25, r23
    15a2:	41 f0       	breq	.+16     	; 0x15b4 <MS_Host_WaitForDataReceived+0x3e>
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
    15a4:	21 15       	cp	r18, r1
    15a6:	31 05       	cpc	r19, r1
    15a8:	11 f4       	brne	.+4      	; 0x15ae <MS_Host_WaitForDataReceived+0x38>
    15aa:	83 e0       	ldi	r24, 0x03	; 3
    15ac:	08 95       	ret
    15ae:	21 50       	subi	r18, 0x01	; 1
    15b0:	30 40       	sbci	r19, 0x00	; 0
    15b2:	bc 01       	movw	r22, r24

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    15b4:	80 91 a9 00 	lds	r24, 0x00A9
    15b8:	80 64       	ori	r24, 0x40	; 64
    15ba:	80 93 a9 00 	sts	0x00A9, r24
			  return PIPE_RWSTREAM_Timeout;
		}

		Pipe_Freeze();
		Pipe_SelectPipe(MSInterfaceInfo->Config.DataOUTPipeNumber);
    15be:	92 81       	ldd	r25, Z+2	; 0x02
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
    15c0:	90 93 a7 00 	sts	0x00A7, r25

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    15c4:	80 91 a9 00 	lds	r24, 0x00A9
    15c8:	8f 7b       	andi	r24, 0xBF	; 191
    15ca:	80 93 a9 00 	sts	0x00A9, r24
			 *  \return Boolean true if the current pipe has been stalled by the attached device, false otherwise.
			 */
			static inline bool Pipe_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsStalled(void)
			{
				return ((UPINTX & (1 << RXSTALLI)) ? true : false);
    15ce:	80 91 a6 00 	lds	r24, 0x00A6
		Pipe_Unfreeze();

		if (Pipe_IsStalled())
    15d2:	81 ff       	sbrs	r24, 1
    15d4:	02 c0       	rjmp	.+4      	; 0x15da <MS_Host_WaitForDataReceived+0x64>
		{
			USB_Host_ClearPipeStall(MSInterfaceInfo->Config.DataOUTPipeNumber);
    15d6:	89 2f       	mov	r24, r25
    15d8:	11 c0       	rjmp	.+34     	; 0x15fc <MS_Host_WaitForDataReceived+0x86>

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    15da:	80 91 a9 00 	lds	r24, 0x00A9
    15de:	80 64       	ori	r24, 0x40	; 64
    15e0:	80 93 a9 00 	sts	0x00A9, r24
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
    15e4:	40 93 a7 00 	sts	0x00A7, r20

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    15e8:	80 91 a9 00 	lds	r24, 0x00A9
    15ec:	8f 7b       	andi	r24, 0xBF	; 191
    15ee:	80 93 a9 00 	sts	0x00A9, r24
			 *  \return Boolean true if the current pipe has been stalled by the attached device, false otherwise.
			 */
			static inline bool Pipe_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsStalled(void)
			{
				return ((UPINTX & (1 << RXSTALLI)) ? true : false);
    15f2:	80 91 a6 00 	lds	r24, 0x00A6

		Pipe_Freeze();
		Pipe_SelectPipe(MSInterfaceInfo->Config.DataINPipeNumber);
		Pipe_Unfreeze();

		if (Pipe_IsStalled())
    15f6:	81 ff       	sbrs	r24, 1
    15f8:	04 c0       	rjmp	.+8      	; 0x1602 <MS_Host_WaitForDataReceived+0x8c>
		{
			USB_Host_ClearPipeStall(MSInterfaceInfo->Config.DataINPipeNumber);
    15fa:	84 2f       	mov	r24, r20
    15fc:	3e da       	rcall	.-2948   	; 0xa7a <USB_Host_ClearPipeStall>
    15fe:	81 e0       	ldi	r24, 0x01	; 1
    1600:	08 95       	ret

			return PIPE_RWSTREAM_PipeStalled;
		}

		if (USB_HostState == HOST_STATE_Unattached)
    1602:	80 91 42 01 	lds	r24, 0x0142
    1606:	82 30       	cpi	r24, 0x02	; 2
    1608:	a1 f0       	breq	.+40     	; 0x1632 <MS_Host_WaitForDataReceived+0xbc>
			 *  \return Boolean true if the current pipe has received an IN packet, false otherwise.
			 */
			static inline bool Pipe_IsINReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsINReceived(void)
			{
				return ((UPINTX & (1 << RXINI)) ? true : false);
    160a:	80 91 a6 00 	lds	r24, 0x00A6
	uint16_t PreviousFrameNumber = USB_Host_GetFrameNumber();

	Pipe_SelectPipe(MSInterfaceInfo->Config.DataINPipeNumber);
	Pipe_Unfreeze();

	while (!(Pipe_IsINReceived()))
    160e:	80 ff       	sbrs	r24, 0
    1610:	c2 cf       	rjmp	.-124    	; 0x1596 <MS_Host_WaitForDataReceived+0x20>
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
    1612:	40 93 a7 00 	sts	0x00A7, r20

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    1616:	80 91 a9 00 	lds	r24, 0x00A9
    161a:	80 64       	ori	r24, 0x40	; 64
    161c:	80 93 a9 00 	sts	0x00A9, r24
	};

	Pipe_SelectPipe(MSInterfaceInfo->Config.DataINPipeNumber);
	Pipe_Freeze();

	Pipe_SelectPipe(MSInterfaceInfo->Config.DataOUTPipeNumber);
    1620:	82 81       	ldd	r24, Z+2	; 0x02
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
    1622:	80 93 a7 00 	sts	0x00A7, r24

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    1626:	80 91 a9 00 	lds	r24, 0x00A9
    162a:	80 64       	ori	r24, 0x40	; 64
    162c:	80 93 a9 00 	sts	0x00A9, r24
    1630:	80 e0       	ldi	r24, 0x00	; 0
	Pipe_Freeze();

	return PIPE_RWSTREAM_NoError;
}
    1632:	08 95       	ret

00001634 <MS_Host_SendCommand>:
}

static uint8_t MS_Host_SendCommand(USB_ClassInfo_MS_Host_t* const MSInterfaceInfo,
                                   MS_CommandBlockWrapper_t* const SCSICommandBlock,
                                   const void* const BufferPtr)
{
    1634:	bf 92       	push	r11
    1636:	cf 92       	push	r12
    1638:	df 92       	push	r13
    163a:	ef 92       	push	r14
    163c:	ff 92       	push	r15
    163e:	0f 93       	push	r16
    1640:	1f 93       	push	r17
    1642:	cf 93       	push	r28
    1644:	df 93       	push	r29
    1646:	ec 01       	movw	r28, r24
    1648:	8b 01       	movw	r16, r22
    164a:	7a 01       	movw	r14, r20
	uint8_t ErrorCode = PIPE_RWSTREAM_NoError;

	SCSICommandBlock->Signature = MS_CBW_SIGNATURE;
    164c:	85 e5       	ldi	r24, 0x55	; 85
    164e:	93 e5       	ldi	r25, 0x53	; 83
    1650:	a2 e4       	ldi	r26, 0x42	; 66
    1652:	b3 e4       	ldi	r27, 0x43	; 67
    1654:	fb 01       	movw	r30, r22
    1656:	80 83       	st	Z, r24
    1658:	91 83       	std	Z+1, r25	; 0x01
    165a:	a2 83       	std	Z+2, r26	; 0x02
    165c:	b3 83       	std	Z+3, r27	; 0x03
	SCSICommandBlock->Tag       = ++MSInterfaceInfo->State.TransactionTag;
    165e:	8a 85       	ldd	r24, Y+10	; 0x0a
    1660:	9b 85       	ldd	r25, Y+11	; 0x0b
    1662:	ac 85       	ldd	r26, Y+12	; 0x0c
    1664:	bd 85       	ldd	r27, Y+13	; 0x0d
    1666:	01 96       	adiw	r24, 0x01	; 1
    1668:	a1 1d       	adc	r26, r1
    166a:	b1 1d       	adc	r27, r1
    166c:	8a 87       	std	Y+10, r24	; 0x0a
    166e:	9b 87       	std	Y+11, r25	; 0x0b
    1670:	ac 87       	std	Y+12, r26	; 0x0c
    1672:	bd 87       	std	Y+13, r27	; 0x0d
    1674:	84 83       	std	Z+4, r24	; 0x04
    1676:	95 83       	std	Z+5, r25	; 0x05
    1678:	a6 83       	std	Z+6, r26	; 0x06
    167a:	b7 83       	std	Z+7, r27	; 0x07

	if (MSInterfaceInfo->State.TransactionTag == 0xFFFFFFFF)
    167c:	8a 85       	ldd	r24, Y+10	; 0x0a
    167e:	9b 85       	ldd	r25, Y+11	; 0x0b
    1680:	ac 85       	ldd	r26, Y+12	; 0x0c
    1682:	bd 85       	ldd	r27, Y+13	; 0x0d
    1684:	8f 5f       	subi	r24, 0xFF	; 255
    1686:	9f 4f       	sbci	r25, 0xFF	; 255
    1688:	af 4f       	sbci	r26, 0xFF	; 255
    168a:	bf 4f       	sbci	r27, 0xFF	; 255
    168c:	41 f4       	brne	.+16     	; 0x169e <MS_Host_SendCommand+0x6a>
	  MSInterfaceInfo->State.TransactionTag = 1;
    168e:	81 e0       	ldi	r24, 0x01	; 1
    1690:	90 e0       	ldi	r25, 0x00	; 0
    1692:	a0 e0       	ldi	r26, 0x00	; 0
    1694:	b0 e0       	ldi	r27, 0x00	; 0
    1696:	8a 87       	std	Y+10, r24	; 0x0a
    1698:	9b 87       	std	Y+11, r25	; 0x0b
    169a:	ac 87       	std	Y+12, r26	; 0x0c
    169c:	bd 87       	std	Y+13, r27	; 0x0d

	Pipe_SelectPipe(MSInterfaceInfo->Config.DataOUTPipeNumber);
    169e:	8a 81       	ldd	r24, Y+2	; 0x02
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
    16a0:	80 93 a7 00 	sts	0x00A7, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    16a4:	80 91 a9 00 	lds	r24, 0x00A9
    16a8:	8f 7b       	andi	r24, 0xBF	; 191
    16aa:	80 93 a9 00 	sts	0x00A9, r24
	Pipe_Unfreeze();

	if ((ErrorCode = Pipe_Write_Stream_LE(SCSICommandBlock, sizeof(MS_CommandBlockWrapper_t),
    16ae:	c8 01       	movw	r24, r16
    16b0:	6f e1       	ldi	r22, 0x1F	; 31
    16b2:	70 e0       	ldi	r23, 0x00	; 0
    16b4:	40 e0       	ldi	r20, 0x00	; 0
    16b6:	50 e0       	ldi	r21, 0x00	; 0
    16b8:	fa de       	rcall	.-524    	; 0x14ae <Pipe_Write_Stream_LE>
    16ba:	b8 2e       	mov	r11, r24
    16bc:	88 23       	and	r24, r24
    16be:	09 f0       	breq	.+2      	; 0x16c2 <MS_Host_SendCommand+0x8e>
    16c0:	61 c0       	rjmp	.+194    	; 0x1784 <MS_Host_SendCommand+0x150>
			 *  \ingroup Group_PipePacketManagement
			 */
			static inline void Pipe_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearOUT(void)
			{
				UPINTX &= ~((1 << TXOUTI) | (1 << FIFOCON));
    16c2:	80 91 a6 00 	lds	r24, 0x00A6
    16c6:	8b 77       	andi	r24, 0x7B	; 123
    16c8:	80 93 a6 00 	sts	0x00A6, r24
	                                      NO_STREAM_CALLBACK)) != PIPE_RWSTREAM_NoError)
	  return ErrorCode;

	Pipe_ClearOUT();
	Pipe_WaitUntilReady();
    16cc:	a9 db       	rcall	.-2222   	; 0xe20 <Pipe_WaitUntilReady>

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    16ce:	80 91 a9 00 	lds	r24, 0x00A9
    16d2:	80 64       	ori	r24, 0x40	; 64
    16d4:	80 93 a9 00 	sts	0x00A9, r24

	Pipe_Freeze();

	if ((BufferPtr != NULL) &&
    16d8:	e1 14       	cp	r14, r1
    16da:	f1 04       	cpc	r15, r1
    16dc:	09 f4       	brne	.+2      	; 0x16e0 <MS_Host_SendCommand+0xac>
    16de:	52 c0       	rjmp	.+164    	; 0x1784 <MS_Host_SendCommand+0x150>
static uint8_t MS_Host_SendReceiveData(USB_ClassInfo_MS_Host_t* const MSInterfaceInfo,
                                       MS_CommandBlockWrapper_t* const SCSICommandBlock,
                                       void* BufferPtr)
{
	uint8_t  ErrorCode = PIPE_RWSTREAM_NoError;
	uint16_t BytesRem  = SCSICommandBlock->DataTransferLength;
    16e0:	f8 01       	movw	r30, r16
    16e2:	c0 84       	ldd	r12, Z+8	; 0x08
    16e4:	d1 84       	ldd	r13, Z+9	; 0x09

	if (SCSICommandBlock->Flags & MS_COMMAND_DIR_DATA_IN)
    16e6:	84 85       	ldd	r24, Z+12	; 0x0c
    16e8:	87 ff       	sbrs	r24, 7
    16ea:	21 c0       	rjmp	.+66     	; 0x172e <MS_Host_SendCommand+0xfa>
	{
		if ((ErrorCode = MS_Host_WaitForDataReceived(MSInterfaceInfo)) != PIPE_RWSTREAM_NoError)
    16ec:	ce 01       	movw	r24, r28
    16ee:	43 df       	rcall	.-378    	; 0x1576 <MS_Host_WaitForDataReceived>
    16f0:	98 2f       	mov	r25, r24
    16f2:	88 23       	and	r24, r24
    16f4:	31 f0       	breq	.+12     	; 0x1702 <MS_Host_SendCommand+0xce>
    16f6:	80 91 a9 00 	lds	r24, 0x00A9
    16fa:	80 64       	ori	r24, 0x40	; 64
    16fc:	80 93 a9 00 	sts	0x00A9, r24
    1700:	3b c0       	rjmp	.+118    	; 0x1778 <MS_Host_SendCommand+0x144>
		{
			Pipe_Freeze();
			return ErrorCode;
		}

		Pipe_SelectPipe(MSInterfaceInfo->Config.DataINPipeNumber);
    1702:	88 81       	ld	r24, Y
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
    1704:	80 93 a7 00 	sts	0x00A7, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    1708:	80 91 a9 00 	lds	r24, 0x00A9
    170c:	8f 7b       	andi	r24, 0xBF	; 191
    170e:	80 93 a9 00 	sts	0x00A9, r24
		Pipe_Unfreeze();

		if ((ErrorCode = Pipe_Read_Stream_LE(BufferPtr, BytesRem, NO_STREAM_CALLBACK)) != PIPE_RWSTREAM_NoError)
    1712:	c7 01       	movw	r24, r14
    1714:	b6 01       	movw	r22, r12
    1716:	40 e0       	ldi	r20, 0x00	; 0
    1718:	50 e0       	ldi	r21, 0x00	; 0
    171a:	88 de       	rcall	.-752    	; 0x142c <Pipe_Read_Stream_LE>
    171c:	98 2f       	mov	r25, r24
    171e:	88 23       	and	r24, r24
    1720:	59 f5       	brne	.+86     	; 0x1778 <MS_Host_SendCommand+0x144>
			 *  \ingroup Group_PipePacketManagement
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
    1722:	80 91 a6 00 	lds	r24, 0x00A6
    1726:	8e 77       	andi	r24, 0x7E	; 126
    1728:	80 93 a6 00 	sts	0x00A6, r24
    172c:	1e c0       	rjmp	.+60     	; 0x176a <MS_Host_SendCommand+0x136>

		Pipe_ClearIN();
	}
	else
	{
		Pipe_SelectPipe(MSInterfaceInfo->Config.DataOUTPipeNumber);
    172e:	8a 81       	ldd	r24, Y+2	; 0x02
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
    1730:	80 93 a7 00 	sts	0x00A7, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    1734:	80 91 a9 00 	lds	r24, 0x00A9
    1738:	8f 7b       	andi	r24, 0xBF	; 191
    173a:	80 93 a9 00 	sts	0x00A9, r24
		Pipe_Unfreeze();

		if ((ErrorCode = Pipe_Write_Stream_LE(BufferPtr, BytesRem, NO_STREAM_CALLBACK)) != PIPE_RWSTREAM_NoError)
    173e:	c7 01       	movw	r24, r14
    1740:	b6 01       	movw	r22, r12
    1742:	40 e0       	ldi	r20, 0x00	; 0
    1744:	50 e0       	ldi	r21, 0x00	; 0
    1746:	b3 de       	rcall	.-666    	; 0x14ae <Pipe_Write_Stream_LE>
    1748:	98 2f       	mov	r25, r24
    174a:	88 23       	and	r24, r24
    174c:	a9 f4       	brne	.+42     	; 0x1778 <MS_Host_SendCommand+0x144>
			 *  \ingroup Group_PipePacketManagement
			 */
			static inline void Pipe_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearOUT(void)
			{
				UPINTX &= ~((1 << TXOUTI) | (1 << FIFOCON));
    174e:	80 91 a6 00 	lds	r24, 0x00A6
    1752:	8b 77       	andi	r24, 0x7B	; 123
    1754:	80 93 a6 00 	sts	0x00A6, r24
    1758:	04 c0       	rjmp	.+8      	; 0x1762 <MS_Host_SendCommand+0x12e>

		Pipe_ClearOUT();

		while (!(Pipe_IsOUTReady()))
		{
			if (USB_HostState == HOST_STATE_Unattached)
    175a:	80 91 42 01 	lds	r24, 0x0142
    175e:	82 30       	cpi	r24, 0x02	; 2
    1760:	51 f0       	breq	.+20     	; 0x1776 <MS_Host_SendCommand+0x142>
			 *  \return Boolean true if the current pipe is ready for an OUT packet, false otherwise.
			 */
			static inline bool Pipe_IsOUTReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsOUTReady(void)
			{
				return ((UPINTX & (1 << TXOUTI)) ? true : false);
    1762:	80 91 a6 00 	lds	r24, 0x00A6
		if ((ErrorCode = Pipe_Write_Stream_LE(BufferPtr, BytesRem, NO_STREAM_CALLBACK)) != PIPE_RWSTREAM_NoError)
		  return ErrorCode;

		Pipe_ClearOUT();

		while (!(Pipe_IsOUTReady()))
    1766:	82 ff       	sbrs	r24, 2
    1768:	f8 cf       	rjmp	.-16     	; 0x175a <MS_Host_SendCommand+0x126>

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    176a:	80 91 a9 00 	lds	r24, 0x00A9
    176e:	80 64       	ori	r24, 0x40	; 64
    1770:	80 93 a9 00 	sts	0x00A9, r24
    1774:	07 c0       	rjmp	.+14     	; 0x1784 <MS_Host_SendCommand+0x150>
    1776:	92 e0       	ldi	r25, 0x02	; 2
		Pipe_Freeze();
		return ErrorCode;
	}

	return ErrorCode;
}
    1778:	80 91 a9 00 	lds	r24, 0x00A9
    177c:	80 64       	ori	r24, 0x40	; 64
    177e:	80 93 a9 00 	sts	0x00A9, r24
    1782:	b9 2e       	mov	r11, r25
    1784:	8b 2d       	mov	r24, r11
    1786:	df 91       	pop	r29
    1788:	cf 91       	pop	r28
    178a:	1f 91       	pop	r17
    178c:	0f 91       	pop	r16
    178e:	ff 90       	pop	r15
    1790:	ef 90       	pop	r14
    1792:	df 90       	pop	r13
    1794:	cf 90       	pop	r12
    1796:	bf 90       	pop	r11
    1798:	08 95       	ret

0000179a <MS_Host_GetReturnedStatus>:
	return ErrorCode;
}

static uint8_t MS_Host_GetReturnedStatus(USB_ClassInfo_MS_Host_t* const MSInterfaceInfo,
                                         MS_CommandStatusWrapper_t* const SCSICommandStatus)
{
    179a:	0f 93       	push	r16
    179c:	1f 93       	push	r17
    179e:	cf 93       	push	r28
    17a0:	df 93       	push	r29
    17a2:	ec 01       	movw	r28, r24
    17a4:	8b 01       	movw	r16, r22
	uint8_t ErrorCode = PIPE_RWSTREAM_NoError;

	if ((ErrorCode = MS_Host_WaitForDataReceived(MSInterfaceInfo)) != PIPE_RWSTREAM_NoError)
    17a6:	e7 de       	rcall	.-562    	; 0x1576 <MS_Host_WaitForDataReceived>
    17a8:	98 2f       	mov	r25, r24
    17aa:	88 23       	and	r24, r24
    17ac:	f9 f4       	brne	.+62     	; 0x17ec <MS_Host_GetReturnedStatus+0x52>
	  return ErrorCode;

	Pipe_SelectPipe(MSInterfaceInfo->Config.DataINPipeNumber);
    17ae:	88 81       	ld	r24, Y
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
    17b0:	80 93 a7 00 	sts	0x00A7, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    17b4:	80 91 a9 00 	lds	r24, 0x00A9
    17b8:	8f 7b       	andi	r24, 0xBF	; 191
    17ba:	80 93 a9 00 	sts	0x00A9, r24
	Pipe_Unfreeze();

	if ((ErrorCode = Pipe_Read_Stream_LE(SCSICommandStatus, sizeof(MS_CommandStatusWrapper_t),
    17be:	c8 01       	movw	r24, r16
    17c0:	6d e0       	ldi	r22, 0x0D	; 13
    17c2:	70 e0       	ldi	r23, 0x00	; 0
    17c4:	40 e0       	ldi	r20, 0x00	; 0
    17c6:	50 e0       	ldi	r21, 0x00	; 0
    17c8:	31 de       	rcall	.-926    	; 0x142c <Pipe_Read_Stream_LE>
    17ca:	98 2f       	mov	r25, r24
    17cc:	88 23       	and	r24, r24
    17ce:	71 f4       	brne	.+28     	; 0x17ec <MS_Host_GetReturnedStatus+0x52>
			 *  \ingroup Group_PipePacketManagement
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
    17d0:	80 91 a6 00 	lds	r24, 0x00A6
    17d4:	8e 77       	andi	r24, 0x7E	; 126
    17d6:	80 93 a6 00 	sts	0x00A6, r24

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    17da:	80 91 a9 00 	lds	r24, 0x00A9
    17de:	80 64       	ori	r24, 0x40	; 64
    17e0:	80 93 a9 00 	sts	0x00A9, r24
	}

	Pipe_ClearIN();
	Pipe_Freeze();

	if (SCSICommandStatus->Status != MS_SCSI_COMMAND_Pass)
    17e4:	f8 01       	movw	r30, r16
    17e6:	84 85       	ldd	r24, Z+12	; 0x0c
    17e8:	81 11       	cpse	r24, r1
    17ea:	90 e8       	ldi	r25, 0x80	; 128
	  ErrorCode = MS_ERROR_LOGICAL_CMD_FAILED;

	return ErrorCode;
}
    17ec:	89 2f       	mov	r24, r25
    17ee:	df 91       	pop	r29
    17f0:	cf 91       	pop	r28
    17f2:	1f 91       	pop	r17
    17f4:	0f 91       	pop	r16
    17f6:	08 95       	ret

000017f8 <MS_Host_ReadDeviceBlocks>:
                                 const uint8_t LUNIndex,
                                 const uint32_t BlockAddress,
                                 const uint8_t Blocks,
                                 const uint16_t BlockSize,
                                 void* BlockBuffer)
{
    17f8:	4f 92       	push	r4
    17fa:	5f 92       	push	r5
    17fc:	6f 92       	push	r6
    17fe:	7f 92       	push	r7
    1800:	8f 92       	push	r8
    1802:	9f 92       	push	r9
    1804:	af 92       	push	r10
    1806:	bf 92       	push	r11
    1808:	cf 92       	push	r12
    180a:	df 92       	push	r13
    180c:	ef 92       	push	r14
    180e:	ff 92       	push	r15
    1810:	0f 93       	push	r16
    1812:	1f 93       	push	r17
    1814:	df 93       	push	r29
    1816:	cf 93       	push	r28
    1818:	cd b7       	in	r28, 0x3d	; 61
    181a:	de b7       	in	r29, 0x3e	; 62
    181c:	ac 97       	sbiw	r28, 0x2c	; 44
    181e:	0f b6       	in	r0, 0x3f	; 63
    1820:	f8 94       	cli
    1822:	de bf       	out	0x3e, r29	; 62
    1824:	0f be       	out	0x3f, r0	; 63
    1826:	cd bf       	out	0x3d, r28	; 61
    1828:	3c 01       	movw	r6, r24
    182a:	46 2e       	mov	r4, r22
    182c:	49 01       	movw	r8, r18
    182e:	5a 01       	movw	r10, r20
    1830:	50 2e       	mov	r5, r16
	if ((USB_HostState != HOST_STATE_Configured) || !(MSInterfaceInfo->State.IsActive))
    1832:	80 91 42 01 	lds	r24, 0x0142
    1836:	8c 30       	cpi	r24, 0x0C	; 12
    1838:	d9 f5       	brne	.+118    	; 0x18b0 <MS_Host_ReadDeviceBlocks+0xb8>
    183a:	f3 01       	movw	r30, r6
    183c:	84 81       	ldd	r24, Z+4	; 0x04
    183e:	88 23       	and	r24, r24
    1840:	b9 f1       	breq	.+110    	; 0x18b0 <MS_Host_ReadDeviceBlocks+0xb8>
					0x00,                   // Reserved
					0x00,                   // MSB of Total Blocks to Read
					Blocks,                 // LSB of Total Blocks to Read
					0x00                    // Unused (control)
				}
		};
    1842:	8e 01       	movw	r16, r28
    1844:	02 5f       	subi	r16, 0xF2	; 242
    1846:	1f 4f       	sbci	r17, 0xFF	; 255
    1848:	8f e1       	ldi	r24, 0x1F	; 31
    184a:	f8 01       	movw	r30, r16
    184c:	11 92       	st	Z+, r1
    184e:	8a 95       	dec	r24
    1850:	e9 f7       	brne	.-6      	; 0x184c <MS_Host_ReadDeviceBlocks+0x54>
    1852:	b7 01       	movw	r22, r14
    1854:	80 e0       	ldi	r24, 0x00	; 0
    1856:	90 e0       	ldi	r25, 0x00	; 0
    1858:	25 2d       	mov	r18, r5
    185a:	30 e0       	ldi	r19, 0x00	; 0
    185c:	40 e0       	ldi	r20, 0x00	; 0
    185e:	50 e0       	ldi	r21, 0x00	; 0
    1860:	da d2       	rcall	.+1460   	; 0x1e16 <__mulsi3>
    1862:	6e 8b       	std	Y+22, r22	; 0x16
    1864:	7f 8b       	std	Y+23, r23	; 0x17
    1866:	88 8f       	std	Y+24, r24	; 0x18
    1868:	99 8f       	std	Y+25, r25	; 0x19
    186a:	80 e8       	ldi	r24, 0x80	; 128
    186c:	8a 8f       	std	Y+26, r24	; 0x1a
    186e:	4b 8e       	std	Y+27, r4	; 0x1b
    1870:	8a e0       	ldi	r24, 0x0A	; 10
    1872:	8c 8f       	std	Y+28, r24	; 0x1c
    1874:	88 e2       	ldi	r24, 0x28	; 40
    1876:	8d 8f       	std	Y+29, r24	; 0x1d
    1878:	8b 2d       	mov	r24, r11
    187a:	99 27       	eor	r25, r25
    187c:	aa 27       	eor	r26, r26
    187e:	bb 27       	eor	r27, r27
    1880:	8f 8f       	std	Y+31, r24	; 0x1f
    1882:	c5 01       	movw	r24, r10
    1884:	aa 27       	eor	r26, r26
    1886:	bb 27       	eor	r27, r27
    1888:	88 a3       	std	Y+32, r24	; 0x20
    188a:	bb 27       	eor	r27, r27
    188c:	ab 2d       	mov	r26, r11
    188e:	9a 2d       	mov	r25, r10
    1890:	89 2d       	mov	r24, r9
    1892:	89 a3       	std	Y+33, r24	; 0x21
    1894:	8a a2       	std	Y+34, r8	; 0x22
    1896:	5d a2       	std	Y+37, r5	; 0x25

	MS_CommandStatusWrapper_t SCSICommandStatus;

	if ((ErrorCode = MS_Host_SendCommand(MSInterfaceInfo, &SCSICommandBlock, BlockBuffer)) != PIPE_RWSTREAM_NoError)
    1898:	c3 01       	movw	r24, r6
    189a:	b8 01       	movw	r22, r16
    189c:	a6 01       	movw	r20, r12
    189e:	ca de       	rcall	.-620    	; 0x1634 <MS_Host_SendCommand>
    18a0:	88 23       	and	r24, r24
    18a2:	39 f4       	brne	.+14     	; 0x18b2 <MS_Host_ReadDeviceBlocks+0xba>
	  return ErrorCode;

	if ((ErrorCode = MS_Host_GetReturnedStatus(MSInterfaceInfo, &SCSICommandStatus)) != PIPE_RWSTREAM_NoError)
    18a4:	c3 01       	movw	r24, r6
    18a6:	be 01       	movw	r22, r28
    18a8:	6f 5f       	subi	r22, 0xFF	; 255
    18aa:	7f 4f       	sbci	r23, 0xFF	; 255
    18ac:	76 df       	rcall	.-276    	; 0x179a <MS_Host_GetReturnedStatus>
    18ae:	01 c0       	rjmp	.+2      	; 0x18b2 <MS_Host_ReadDeviceBlocks+0xba>
    18b0:	81 e0       	ldi	r24, 0x01	; 1
	  return ErrorCode;

	return PIPE_RWSTREAM_NoError;
}
    18b2:	ac 96       	adiw	r28, 0x2c	; 44
    18b4:	0f b6       	in	r0, 0x3f	; 63
    18b6:	f8 94       	cli
    18b8:	de bf       	out	0x3e, r29	; 62
    18ba:	0f be       	out	0x3f, r0	; 63
    18bc:	cd bf       	out	0x3d, r28	; 61
    18be:	cf 91       	pop	r28
    18c0:	df 91       	pop	r29
    18c2:	1f 91       	pop	r17
    18c4:	0f 91       	pop	r16
    18c6:	ff 90       	pop	r15
    18c8:	ef 90       	pop	r14
    18ca:	df 90       	pop	r13
    18cc:	cf 90       	pop	r12
    18ce:	bf 90       	pop	r11
    18d0:	af 90       	pop	r10
    18d2:	9f 90       	pop	r9
    18d4:	8f 90       	pop	r8
    18d6:	7f 90       	pop	r7
    18d8:	6f 90       	pop	r6
    18da:	5f 90       	pop	r5
    18dc:	4f 90       	pop	r4
    18de:	08 95       	ret

000018e0 <MS_Host_PreventAllowMediumRemoval>:
}

uint8_t MS_Host_PreventAllowMediumRemoval(USB_ClassInfo_MS_Host_t* const MSInterfaceInfo,
                                          const uint8_t LUNIndex,
                                          const bool PreventRemoval)
{
    18e0:	0f 93       	push	r16
    18e2:	1f 93       	push	r17
    18e4:	df 93       	push	r29
    18e6:	cf 93       	push	r28
    18e8:	cd b7       	in	r28, 0x3d	; 61
    18ea:	de b7       	in	r29, 0x3e	; 62
    18ec:	ac 97       	sbiw	r28, 0x2c	; 44
    18ee:	0f b6       	in	r0, 0x3f	; 63
    18f0:	f8 94       	cli
    18f2:	de bf       	out	0x3e, r29	; 62
    18f4:	0f be       	out	0x3f, r0	; 63
    18f6:	cd bf       	out	0x3d, r28	; 61
    18f8:	8c 01       	movw	r16, r24
	if ((USB_HostState != HOST_STATE_Configured) || !(MSInterfaceInfo->State.IsActive))
    18fa:	80 91 42 01 	lds	r24, 0x0142
    18fe:	8c 30       	cpi	r24, 0x0C	; 12
    1900:	f9 f4       	brne	.+62     	; 0x1940 <MS_Host_PreventAllowMediumRemoval+0x60>
    1902:	d8 01       	movw	r26, r16
    1904:	14 96       	adiw	r26, 0x04	; 4
    1906:	8c 91       	ld	r24, X
    1908:	88 23       	and	r24, r24
    190a:	d1 f0       	breq	.+52     	; 0x1940 <MS_Host_PreventAllowMediumRemoval+0x60>
					0x00,                   // Reserved
					PreventRemoval,         // Prevent flag
					0x00,                   // Reserved
					0x00                    // Unused (control)
				}
		};
    190c:	fe 01       	movw	r30, r28
    190e:	3e 96       	adiw	r30, 0x0e	; 14
    1910:	8f e1       	ldi	r24, 0x1F	; 31
    1912:	df 01       	movw	r26, r30
    1914:	1d 92       	st	X+, r1
    1916:	8a 95       	dec	r24
    1918:	e9 f7       	brne	.-6      	; 0x1914 <MS_Host_PreventAllowMediumRemoval+0x34>
    191a:	6b 8f       	std	Y+27, r22	; 0x1b
    191c:	86 e0       	ldi	r24, 0x06	; 6
    191e:	8c 8f       	std	Y+28, r24	; 0x1c
    1920:	8e e1       	ldi	r24, 0x1E	; 30
    1922:	8d 8f       	std	Y+29, r24	; 0x1d
    1924:	48 a3       	std	Y+32, r20	; 0x20

	MS_CommandStatusWrapper_t SCSICommandStatus;

	if ((ErrorCode = MS_Host_SendCommand(MSInterfaceInfo, &SCSICommandBlock, NULL)) != PIPE_RWSTREAM_NoError)
    1926:	c8 01       	movw	r24, r16
    1928:	bf 01       	movw	r22, r30
    192a:	40 e0       	ldi	r20, 0x00	; 0
    192c:	50 e0       	ldi	r21, 0x00	; 0
    192e:	82 de       	rcall	.-764    	; 0x1634 <MS_Host_SendCommand>
    1930:	88 23       	and	r24, r24
    1932:	39 f4       	brne	.+14     	; 0x1942 <MS_Host_PreventAllowMediumRemoval+0x62>
	  return ErrorCode;

	if ((ErrorCode = MS_Host_GetReturnedStatus(MSInterfaceInfo, &SCSICommandStatus)) != PIPE_RWSTREAM_NoError)
    1934:	c8 01       	movw	r24, r16
    1936:	be 01       	movw	r22, r28
    1938:	6f 5f       	subi	r22, 0xFF	; 255
    193a:	7f 4f       	sbci	r23, 0xFF	; 255
    193c:	2e df       	rcall	.-420    	; 0x179a <MS_Host_GetReturnedStatus>
    193e:	01 c0       	rjmp	.+2      	; 0x1942 <MS_Host_PreventAllowMediumRemoval+0x62>
    1940:	81 e0       	ldi	r24, 0x01	; 1
	  return ErrorCode;

	return PIPE_RWSTREAM_NoError;
}
    1942:	ac 96       	adiw	r28, 0x2c	; 44
    1944:	0f b6       	in	r0, 0x3f	; 63
    1946:	f8 94       	cli
    1948:	de bf       	out	0x3e, r29	; 62
    194a:	0f be       	out	0x3f, r0	; 63
    194c:	cd bf       	out	0x3d, r28	; 61
    194e:	cf 91       	pop	r28
    1950:	df 91       	pop	r29
    1952:	1f 91       	pop	r17
    1954:	0f 91       	pop	r16
    1956:	08 95       	ret

00001958 <MS_Host_RequestSense>:
}

uint8_t MS_Host_RequestSense(USB_ClassInfo_MS_Host_t* const MSInterfaceInfo,
                             const uint8_t LUNIndex,
                             SCSI_Request_Sense_Response_t* const SenseData)
{
    1958:	0f 93       	push	r16
    195a:	1f 93       	push	r17
    195c:	df 93       	push	r29
    195e:	cf 93       	push	r28
    1960:	cd b7       	in	r28, 0x3d	; 61
    1962:	de b7       	in	r29, 0x3e	; 62
    1964:	ac 97       	sbiw	r28, 0x2c	; 44
    1966:	0f b6       	in	r0, 0x3f	; 63
    1968:	f8 94       	cli
    196a:	de bf       	out	0x3e, r29	; 62
    196c:	0f be       	out	0x3f, r0	; 63
    196e:	cd bf       	out	0x3d, r28	; 61
    1970:	8c 01       	movw	r16, r24
	if ((USB_HostState != HOST_STATE_Configured) || !(MSInterfaceInfo->State.IsActive))
    1972:	80 91 42 01 	lds	r24, 0x0142
    1976:	8c 30       	cpi	r24, 0x0C	; 12
    1978:	41 f5       	brne	.+80     	; 0x19ca <MS_Host_RequestSense+0x72>
    197a:	d8 01       	movw	r26, r16
    197c:	14 96       	adiw	r26, 0x04	; 4
    197e:	8c 91       	ld	r24, X
    1980:	88 23       	and	r24, r24
    1982:	19 f1       	breq	.+70     	; 0x19ca <MS_Host_RequestSense+0x72>
					0x00,                                  // Reserved
					0x00,                                  // Reserved
					sizeof(SCSI_Request_Sense_Response_t), // Allocation Length
					0x00                                   // Unused (control)
				}
		};
    1984:	fe 01       	movw	r30, r28
    1986:	3e 96       	adiw	r30, 0x0e	; 14
    1988:	8f e1       	ldi	r24, 0x1F	; 31
    198a:	df 01       	movw	r26, r30
    198c:	1d 92       	st	X+, r1
    198e:	8a 95       	dec	r24
    1990:	e9 f7       	brne	.-6      	; 0x198c <MS_Host_RequestSense+0x34>
    1992:	82 e1       	ldi	r24, 0x12	; 18
    1994:	90 e0       	ldi	r25, 0x00	; 0
    1996:	a0 e0       	ldi	r26, 0x00	; 0
    1998:	b0 e0       	ldi	r27, 0x00	; 0
    199a:	8e 8b       	std	Y+22, r24	; 0x16
    199c:	9f 8b       	std	Y+23, r25	; 0x17
    199e:	a8 8f       	std	Y+24, r26	; 0x18
    19a0:	b9 8f       	std	Y+25, r27	; 0x19
    19a2:	80 e8       	ldi	r24, 0x80	; 128
    19a4:	8a 8f       	std	Y+26, r24	; 0x1a
    19a6:	6b 8f       	std	Y+27, r22	; 0x1b
    19a8:	86 e0       	ldi	r24, 0x06	; 6
    19aa:	8c 8f       	std	Y+28, r24	; 0x1c
    19ac:	83 e0       	ldi	r24, 0x03	; 3
    19ae:	8d 8f       	std	Y+29, r24	; 0x1d
    19b0:	82 e1       	ldi	r24, 0x12	; 18
    19b2:	89 a3       	std	Y+33, r24	; 0x21

	MS_CommandStatusWrapper_t SCSICommandStatus;

	if ((ErrorCode = MS_Host_SendCommand(MSInterfaceInfo, &SCSICommandBlock, SenseData)) != PIPE_RWSTREAM_NoError)
    19b4:	c8 01       	movw	r24, r16
    19b6:	bf 01       	movw	r22, r30
    19b8:	3d de       	rcall	.-902    	; 0x1634 <MS_Host_SendCommand>
    19ba:	88 23       	and	r24, r24
    19bc:	39 f4       	brne	.+14     	; 0x19cc <MS_Host_RequestSense+0x74>
	  return ErrorCode;

	if ((ErrorCode = MS_Host_GetReturnedStatus(MSInterfaceInfo, &SCSICommandStatus)) != PIPE_RWSTREAM_NoError)
    19be:	c8 01       	movw	r24, r16
    19c0:	be 01       	movw	r22, r28
    19c2:	6f 5f       	subi	r22, 0xFF	; 255
    19c4:	7f 4f       	sbci	r23, 0xFF	; 255
    19c6:	e9 de       	rcall	.-558    	; 0x179a <MS_Host_GetReturnedStatus>
    19c8:	01 c0       	rjmp	.+2      	; 0x19cc <MS_Host_RequestSense+0x74>
    19ca:	81 e0       	ldi	r24, 0x01	; 1
	  return ErrorCode;

	return PIPE_RWSTREAM_NoError;
}
    19cc:	ac 96       	adiw	r28, 0x2c	; 44
    19ce:	0f b6       	in	r0, 0x3f	; 63
    19d0:	f8 94       	cli
    19d2:	de bf       	out	0x3e, r29	; 62
    19d4:	0f be       	out	0x3f, r0	; 63
    19d6:	cd bf       	out	0x3d, r28	; 61
    19d8:	cf 91       	pop	r28
    19da:	df 91       	pop	r29
    19dc:	1f 91       	pop	r17
    19de:	0f 91       	pop	r16
    19e0:	08 95       	ret

000019e2 <MS_Host_ReadDeviceCapacity>:
}

uint8_t MS_Host_ReadDeviceCapacity(USB_ClassInfo_MS_Host_t* const MSInterfaceInfo,
                                   const uint8_t LUNIndex,
                                   SCSI_Capacity_t* const DeviceCapacity)
{
    19e2:	ef 92       	push	r14
    19e4:	ff 92       	push	r15
    19e6:	0f 93       	push	r16
    19e8:	1f 93       	push	r17
    19ea:	df 93       	push	r29
    19ec:	cf 93       	push	r28
    19ee:	cd b7       	in	r28, 0x3d	; 61
    19f0:	de b7       	in	r29, 0x3e	; 62
    19f2:	ac 97       	sbiw	r28, 0x2c	; 44
    19f4:	0f b6       	in	r0, 0x3f	; 63
    19f6:	f8 94       	cli
    19f8:	de bf       	out	0x3e, r29	; 62
    19fa:	0f be       	out	0x3f, r0	; 63
    19fc:	cd bf       	out	0x3d, r28	; 61
    19fe:	7c 01       	movw	r14, r24
    1a00:	8a 01       	movw	r16, r20
	if ((USB_HostState != HOST_STATE_Configured) || !(MSInterfaceInfo->State.IsActive))
    1a02:	80 91 42 01 	lds	r24, 0x0142
    1a06:	8c 30       	cpi	r24, 0x0C	; 12
    1a08:	09 f0       	breq	.+2      	; 0x1a0c <MS_Host_ReadDeviceCapacity+0x2a>
    1a0a:	4d c0       	rjmp	.+154    	; 0x1aa6 <MS_Host_ReadDeviceCapacity+0xc4>
    1a0c:	d7 01       	movw	r26, r14
    1a0e:	14 96       	adiw	r26, 0x04	; 4
    1a10:	8c 91       	ld	r24, X
    1a12:	88 23       	and	r24, r24
    1a14:	09 f4       	brne	.+2      	; 0x1a18 <MS_Host_ReadDeviceCapacity+0x36>
    1a16:	47 c0       	rjmp	.+142    	; 0x1aa6 <MS_Host_ReadDeviceCapacity+0xc4>
					0x00,                   // Reserved
					0x00,                   // Reserved
					0x00,                   // Partial Medium Indicator
					0x00                    // Unused (control)
				}
		};
    1a18:	fe 01       	movw	r30, r28
    1a1a:	3e 96       	adiw	r30, 0x0e	; 14
    1a1c:	8f e1       	ldi	r24, 0x1F	; 31
    1a1e:	df 01       	movw	r26, r30
    1a20:	1d 92       	st	X+, r1
    1a22:	8a 95       	dec	r24
    1a24:	e9 f7       	brne	.-6      	; 0x1a20 <MS_Host_ReadDeviceCapacity+0x3e>
    1a26:	88 e0       	ldi	r24, 0x08	; 8
    1a28:	90 e0       	ldi	r25, 0x00	; 0
    1a2a:	a0 e0       	ldi	r26, 0x00	; 0
    1a2c:	b0 e0       	ldi	r27, 0x00	; 0
    1a2e:	8e 8b       	std	Y+22, r24	; 0x16
    1a30:	9f 8b       	std	Y+23, r25	; 0x17
    1a32:	a8 8f       	std	Y+24, r26	; 0x18
    1a34:	b9 8f       	std	Y+25, r27	; 0x19
    1a36:	80 e8       	ldi	r24, 0x80	; 128
    1a38:	8a 8f       	std	Y+26, r24	; 0x1a
    1a3a:	6b 8f       	std	Y+27, r22	; 0x1b
    1a3c:	8a e0       	ldi	r24, 0x0A	; 10
    1a3e:	8c 8f       	std	Y+28, r24	; 0x1c
    1a40:	85 e2       	ldi	r24, 0x25	; 37
    1a42:	8d 8f       	std	Y+29, r24	; 0x1d

	MS_CommandStatusWrapper_t SCSICommandStatus;

	if ((ErrorCode = MS_Host_SendCommand(MSInterfaceInfo, &SCSICommandBlock, DeviceCapacity)) != PIPE_RWSTREAM_NoError)
    1a44:	c7 01       	movw	r24, r14
    1a46:	bf 01       	movw	r22, r30
    1a48:	f5 dd       	rcall	.-1046   	; 0x1634 <MS_Host_SendCommand>
    1a4a:	88 23       	and	r24, r24
    1a4c:	69 f5       	brne	.+90     	; 0x1aa8 <MS_Host_ReadDeviceCapacity+0xc6>
			{
				uint8_t* CurrDataPos = (uint8_t*)Data;

				while (Bytes > 1)
				{
					uint8_t Temp = *CurrDataPos;
    1a4e:	f8 01       	movw	r30, r16
    1a50:	90 81       	ld	r25, Z
					*CurrDataPos = *(CurrDataPos + Bytes - 1);
    1a52:	83 81       	ldd	r24, Z+3	; 0x03
    1a54:	80 83       	st	Z, r24
					*(CurrDataPos + Bytes - 1) = Temp;
    1a56:	93 83       	std	Z+3, r25	; 0x03

					CurrDataPos++;
    1a58:	31 96       	adiw	r30, 0x01	; 1
			{
				uint8_t* CurrDataPos = (uint8_t*)Data;

				while (Bytes > 1)
				{
					uint8_t Temp = *CurrDataPos;
    1a5a:	d8 01       	movw	r26, r16
    1a5c:	11 96       	adiw	r26, 0x01	; 1
    1a5e:	9c 91       	ld	r25, X
    1a60:	11 97       	sbiw	r26, 0x01	; 1
					*CurrDataPos = *(CurrDataPos + Bytes - 1);
    1a62:	81 81       	ldd	r24, Z+1	; 0x01
    1a64:	11 96       	adiw	r26, 0x01	; 1
    1a66:	8c 93       	st	X, r24
    1a68:	11 97       	sbiw	r26, 0x01	; 1
					*(CurrDataPos + Bytes - 1) = Temp;
    1a6a:	91 83       	std	Z+1, r25	; 0x01
			{
				uint8_t* CurrDataPos = (uint8_t*)Data;

				while (Bytes > 1)
				{
					uint8_t Temp = *CurrDataPos;
    1a6c:	14 96       	adiw	r26, 0x04	; 4
    1a6e:	9c 91       	ld	r25, X
    1a70:	14 97       	sbiw	r26, 0x04	; 4
					*CurrDataPos = *(CurrDataPos + Bytes - 1);
    1a72:	17 96       	adiw	r26, 0x07	; 7
    1a74:	8c 91       	ld	r24, X
    1a76:	17 97       	sbiw	r26, 0x07	; 7
    1a78:	14 96       	adiw	r26, 0x04	; 4
    1a7a:	8c 93       	st	X, r24
    1a7c:	14 97       	sbiw	r26, 0x04	; 4
					*(CurrDataPos + Bytes - 1) = Temp;
    1a7e:	17 96       	adiw	r26, 0x07	; 7
    1a80:	9c 93       	st	X, r25
    1a82:	17 97       	sbiw	r26, 0x07	; 7
			{
				uint8_t* CurrDataPos = (uint8_t*)Data;

				while (Bytes > 1)
				{
					uint8_t Temp = *CurrDataPos;
    1a84:	15 96       	adiw	r26, 0x05	; 5
    1a86:	9c 91       	ld	r25, X
    1a88:	15 97       	sbiw	r26, 0x05	; 5
					*CurrDataPos = *(CurrDataPos + Bytes - 1);
    1a8a:	16 96       	adiw	r26, 0x06	; 6
    1a8c:	8c 91       	ld	r24, X
    1a8e:	16 97       	sbiw	r26, 0x06	; 6
    1a90:	15 96       	adiw	r26, 0x05	; 5
    1a92:	8c 93       	st	X, r24
    1a94:	15 97       	sbiw	r26, 0x05	; 5
					*(CurrDataPos + Bytes - 1) = Temp;
    1a96:	16 96       	adiw	r26, 0x06	; 6
    1a98:	9c 93       	st	X, r25
	  return ErrorCode;

	SwapEndian_n(&DeviceCapacity->Blocks,    sizeof(DeviceCapacity->Blocks));
	SwapEndian_n(&DeviceCapacity->BlockSize, sizeof(DeviceCapacity->BlockSize));

	if ((ErrorCode = MS_Host_GetReturnedStatus(MSInterfaceInfo, &SCSICommandStatus)) != PIPE_RWSTREAM_NoError)
    1a9a:	c7 01       	movw	r24, r14
    1a9c:	be 01       	movw	r22, r28
    1a9e:	6f 5f       	subi	r22, 0xFF	; 255
    1aa0:	7f 4f       	sbci	r23, 0xFF	; 255
    1aa2:	7b de       	rcall	.-778    	; 0x179a <MS_Host_GetReturnedStatus>
    1aa4:	01 c0       	rjmp	.+2      	; 0x1aa8 <MS_Host_ReadDeviceCapacity+0xc6>
    1aa6:	81 e0       	ldi	r24, 0x01	; 1
	  return ErrorCode;

	return PIPE_RWSTREAM_NoError;
}
    1aa8:	ac 96       	adiw	r28, 0x2c	; 44
    1aaa:	0f b6       	in	r0, 0x3f	; 63
    1aac:	f8 94       	cli
    1aae:	de bf       	out	0x3e, r29	; 62
    1ab0:	0f be       	out	0x3f, r0	; 63
    1ab2:	cd bf       	out	0x3d, r28	; 61
    1ab4:	cf 91       	pop	r28
    1ab6:	df 91       	pop	r29
    1ab8:	1f 91       	pop	r17
    1aba:	0f 91       	pop	r16
    1abc:	ff 90       	pop	r15
    1abe:	ef 90       	pop	r14
    1ac0:	08 95       	ret

00001ac2 <MS_Host_TestUnitReady>:
	return PIPE_RWSTREAM_NoError;
}

uint8_t MS_Host_TestUnitReady(USB_ClassInfo_MS_Host_t* const MSInterfaceInfo,
                              const uint8_t LUNIndex)
{
    1ac2:	0f 93       	push	r16
    1ac4:	1f 93       	push	r17
    1ac6:	df 93       	push	r29
    1ac8:	cf 93       	push	r28
    1aca:	cd b7       	in	r28, 0x3d	; 61
    1acc:	de b7       	in	r29, 0x3e	; 62
    1ace:	ac 97       	sbiw	r28, 0x2c	; 44
    1ad0:	0f b6       	in	r0, 0x3f	; 63
    1ad2:	f8 94       	cli
    1ad4:	de bf       	out	0x3e, r29	; 62
    1ad6:	0f be       	out	0x3f, r0	; 63
    1ad8:	cd bf       	out	0x3d, r28	; 61
    1ada:	8c 01       	movw	r16, r24
	if ((USB_HostState != HOST_STATE_Configured) || !(MSInterfaceInfo->State.IsActive))
    1adc:	80 91 42 01 	lds	r24, 0x0142
    1ae0:	8c 30       	cpi	r24, 0x0C	; 12
    1ae2:	f1 f4       	brne	.+60     	; 0x1b20 <MS_Host_TestUnitReady+0x5e>
    1ae4:	d8 01       	movw	r26, r16
    1ae6:	14 96       	adiw	r26, 0x04	; 4
    1ae8:	8c 91       	ld	r24, X
    1aea:	88 23       	and	r24, r24
    1aec:	c9 f0       	breq	.+50     	; 0x1b20 <MS_Host_TestUnitReady+0x5e>
					0x00,                   // Reserved
					0x00,                   // Reserved
					0x00,                   // Reserved
					0x00                    // Unused (control)
				}
		};
    1aee:	fe 01       	movw	r30, r28
    1af0:	3e 96       	adiw	r30, 0x0e	; 14
    1af2:	8f e1       	ldi	r24, 0x1F	; 31
    1af4:	df 01       	movw	r26, r30
    1af6:	1d 92       	st	X+, r1
    1af8:	8a 95       	dec	r24
    1afa:	e9 f7       	brne	.-6      	; 0x1af6 <MS_Host_TestUnitReady+0x34>
    1afc:	80 e8       	ldi	r24, 0x80	; 128
    1afe:	8a 8f       	std	Y+26, r24	; 0x1a
    1b00:	6b 8f       	std	Y+27, r22	; 0x1b
    1b02:	86 e0       	ldi	r24, 0x06	; 6
    1b04:	8c 8f       	std	Y+28, r24	; 0x1c

	MS_CommandStatusWrapper_t SCSICommandStatus;

	if ((ErrorCode = MS_Host_SendCommand(MSInterfaceInfo, &SCSICommandBlock, NULL)) != PIPE_RWSTREAM_NoError)
    1b06:	c8 01       	movw	r24, r16
    1b08:	bf 01       	movw	r22, r30
    1b0a:	40 e0       	ldi	r20, 0x00	; 0
    1b0c:	50 e0       	ldi	r21, 0x00	; 0
    1b0e:	92 dd       	rcall	.-1244   	; 0x1634 <MS_Host_SendCommand>
    1b10:	88 23       	and	r24, r24
    1b12:	39 f4       	brne	.+14     	; 0x1b22 <MS_Host_TestUnitReady+0x60>
	  return ErrorCode;

	if ((ErrorCode = MS_Host_GetReturnedStatus(MSInterfaceInfo, &SCSICommandStatus)) != PIPE_RWSTREAM_NoError)
    1b14:	c8 01       	movw	r24, r16
    1b16:	be 01       	movw	r22, r28
    1b18:	6f 5f       	subi	r22, 0xFF	; 255
    1b1a:	7f 4f       	sbci	r23, 0xFF	; 255
    1b1c:	3e de       	rcall	.-900    	; 0x179a <MS_Host_GetReturnedStatus>
    1b1e:	01 c0       	rjmp	.+2      	; 0x1b22 <MS_Host_TestUnitReady+0x60>
    1b20:	81 e0       	ldi	r24, 0x01	; 1
	  return ErrorCode;

	return PIPE_RWSTREAM_NoError;
}
    1b22:	ac 96       	adiw	r28, 0x2c	; 44
    1b24:	0f b6       	in	r0, 0x3f	; 63
    1b26:	f8 94       	cli
    1b28:	de bf       	out	0x3e, r29	; 62
    1b2a:	0f be       	out	0x3f, r0	; 63
    1b2c:	cd bf       	out	0x3d, r28	; 61
    1b2e:	cf 91       	pop	r28
    1b30:	df 91       	pop	r29
    1b32:	1f 91       	pop	r17
    1b34:	0f 91       	pop	r16
    1b36:	08 95       	ret

00001b38 <MS_Host_GetInquiryData>:
}

uint8_t MS_Host_GetInquiryData(USB_ClassInfo_MS_Host_t* const MSInterfaceInfo,
                               const uint8_t LUNIndex,
                               SCSI_Inquiry_Response_t* const InquiryData)
{
    1b38:	0f 93       	push	r16
    1b3a:	1f 93       	push	r17
    1b3c:	df 93       	push	r29
    1b3e:	cf 93       	push	r28
    1b40:	cd b7       	in	r28, 0x3d	; 61
    1b42:	de b7       	in	r29, 0x3e	; 62
    1b44:	ac 97       	sbiw	r28, 0x2c	; 44
    1b46:	0f b6       	in	r0, 0x3f	; 63
    1b48:	f8 94       	cli
    1b4a:	de bf       	out	0x3e, r29	; 62
    1b4c:	0f be       	out	0x3f, r0	; 63
    1b4e:	cd bf       	out	0x3d, r28	; 61
    1b50:	8c 01       	movw	r16, r24
	if ((USB_HostState != HOST_STATE_Configured) || !(MSInterfaceInfo->State.IsActive))
    1b52:	80 91 42 01 	lds	r24, 0x0142
    1b56:	8c 30       	cpi	r24, 0x0C	; 12
    1b58:	41 f5       	brne	.+80     	; 0x1baa <MS_Host_GetInquiryData+0x72>
    1b5a:	d8 01       	movw	r26, r16
    1b5c:	14 96       	adiw	r26, 0x04	; 4
    1b5e:	8c 91       	ld	r24, X
    1b60:	88 23       	and	r24, r24
    1b62:	19 f1       	breq	.+70     	; 0x1baa <MS_Host_GetInquiryData+0x72>
					0x00,                            // Reserved
					0x00,                            // Reserved
					sizeof(SCSI_Inquiry_Response_t), // Allocation Length
					0x00                             // Unused (control)
				}
		};
    1b64:	fe 01       	movw	r30, r28
    1b66:	3e 96       	adiw	r30, 0x0e	; 14
    1b68:	8f e1       	ldi	r24, 0x1F	; 31
    1b6a:	df 01       	movw	r26, r30
    1b6c:	1d 92       	st	X+, r1
    1b6e:	8a 95       	dec	r24
    1b70:	e9 f7       	brne	.-6      	; 0x1b6c <MS_Host_GetInquiryData+0x34>
    1b72:	84 e2       	ldi	r24, 0x24	; 36
    1b74:	90 e0       	ldi	r25, 0x00	; 0
    1b76:	a0 e0       	ldi	r26, 0x00	; 0
    1b78:	b0 e0       	ldi	r27, 0x00	; 0
    1b7a:	8e 8b       	std	Y+22, r24	; 0x16
    1b7c:	9f 8b       	std	Y+23, r25	; 0x17
    1b7e:	a8 8f       	std	Y+24, r26	; 0x18
    1b80:	b9 8f       	std	Y+25, r27	; 0x19
    1b82:	80 e8       	ldi	r24, 0x80	; 128
    1b84:	8a 8f       	std	Y+26, r24	; 0x1a
    1b86:	6b 8f       	std	Y+27, r22	; 0x1b
    1b88:	86 e0       	ldi	r24, 0x06	; 6
    1b8a:	8c 8f       	std	Y+28, r24	; 0x1c
    1b8c:	82 e1       	ldi	r24, 0x12	; 18
    1b8e:	8d 8f       	std	Y+29, r24	; 0x1d
    1b90:	84 e2       	ldi	r24, 0x24	; 36
    1b92:	89 a3       	std	Y+33, r24	; 0x21

	MS_CommandStatusWrapper_t SCSICommandStatus;

	if ((ErrorCode = MS_Host_SendCommand(MSInterfaceInfo, &SCSICommandBlock, InquiryData)) != PIPE_RWSTREAM_NoError)
    1b94:	c8 01       	movw	r24, r16
    1b96:	bf 01       	movw	r22, r30
    1b98:	4d dd       	rcall	.-1382   	; 0x1634 <MS_Host_SendCommand>
    1b9a:	88 23       	and	r24, r24
    1b9c:	39 f4       	brne	.+14     	; 0x1bac <MS_Host_GetInquiryData+0x74>
	  return ErrorCode;

	if ((ErrorCode = MS_Host_GetReturnedStatus(MSInterfaceInfo, &SCSICommandStatus)) != PIPE_RWSTREAM_NoError)
    1b9e:	c8 01       	movw	r24, r16
    1ba0:	be 01       	movw	r22, r28
    1ba2:	6f 5f       	subi	r22, 0xFF	; 255
    1ba4:	7f 4f       	sbci	r23, 0xFF	; 255
    1ba6:	f9 dd       	rcall	.-1038   	; 0x179a <MS_Host_GetReturnedStatus>
    1ba8:	01 c0       	rjmp	.+2      	; 0x1bac <MS_Host_GetInquiryData+0x74>
    1baa:	81 e0       	ldi	r24, 0x01	; 1
	  return ErrorCode;

	return PIPE_RWSTREAM_NoError;
}
    1bac:	ac 96       	adiw	r28, 0x2c	; 44
    1bae:	0f b6       	in	r0, 0x3f	; 63
    1bb0:	f8 94       	cli
    1bb2:	de bf       	out	0x3e, r29	; 62
    1bb4:	0f be       	out	0x3f, r0	; 63
    1bb6:	cd bf       	out	0x3d, r28	; 61
    1bb8:	cf 91       	pop	r28
    1bba:	df 91       	pop	r29
    1bbc:	1f 91       	pop	r17
    1bbe:	0f 91       	pop	r16
    1bc0:	08 95       	ret

00001bc2 <MS_Host_GetMaxLUN>:
	return USB_Host_SendControlRequest(NULL);
}

uint8_t MS_Host_GetMaxLUN(USB_ClassInfo_MS_Host_t* const MSInterfaceInfo,
                          uint8_t* const MaxLUNIndex)
{
    1bc2:	cf 93       	push	r28
    1bc4:	df 93       	push	r29
    1bc6:	eb 01       	movw	r28, r22
	uint8_t ErrorCode = HOST_SENDCONTROL_Successful;

	USB_ControlRequest = (USB_Request_Header_t)
    1bc8:	fc 01       	movw	r30, r24
    1bca:	95 81       	ldd	r25, Z+5	; 0x05
    1bcc:	81 ea       	ldi	r24, 0xA1	; 161
    1bce:	80 93 3a 01 	sts	0x013A, r24
    1bd2:	8e ef       	ldi	r24, 0xFE	; 254
    1bd4:	80 93 3b 01 	sts	0x013B, r24
    1bd8:	10 92 3d 01 	sts	0x013D, r1
    1bdc:	10 92 3c 01 	sts	0x013C, r1
    1be0:	90 93 3e 01 	sts	0x013E, r25
    1be4:	10 92 3f 01 	sts	0x013F, r1
    1be8:	81 e0       	ldi	r24, 0x01	; 1
    1bea:	90 e0       	ldi	r25, 0x00	; 0
    1bec:	90 93 41 01 	sts	0x0141, r25
    1bf0:	80 93 40 01 	sts	0x0140, r24
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
    1bf4:	10 92 a7 00 	sts	0x00A7, r1
			.wLength       = 1,
		};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	if ((ErrorCode = USB_Host_SendControlRequest(MaxLUNIndex)) != HOST_SENDCONTROL_Successful)
    1bf8:	cb 01       	movw	r24, r22
    1bfa:	16 db       	rcall	.-2516   	; 0x1228 <USB_Host_SendControlRequest>
    1bfc:	81 11       	cpse	r24, r1
	{
		*MaxLUNIndex = 0;
    1bfe:	18 82       	st	Y, r1
		ErrorCode = HOST_SENDCONTROL_Successful;
	}

	return ErrorCode;
}
    1c00:	80 e0       	ldi	r24, 0x00	; 0
    1c02:	df 91       	pop	r29
    1c04:	cf 91       	pop	r28
    1c06:	08 95       	ret

00001c08 <MS_Host_ResetMSInterface>:
	return ErrorCode;
}

uint8_t MS_Host_ResetMSInterface(USB_ClassInfo_MS_Host_t* const MSInterfaceInfo)
{
	USB_ControlRequest = (USB_Request_Header_t)
    1c08:	fc 01       	movw	r30, r24
    1c0a:	85 81       	ldd	r24, Z+5	; 0x05
    1c0c:	91 e2       	ldi	r25, 0x21	; 33
    1c0e:	90 93 3a 01 	sts	0x013A, r25
    1c12:	9f ef       	ldi	r25, 0xFF	; 255
    1c14:	90 93 3b 01 	sts	0x013B, r25
    1c18:	10 92 3d 01 	sts	0x013D, r1
    1c1c:	10 92 3c 01 	sts	0x013C, r1
    1c20:	80 93 3e 01 	sts	0x013E, r24
    1c24:	10 92 3f 01 	sts	0x013F, r1
    1c28:	10 92 41 01 	sts	0x0141, r1
    1c2c:	10 92 40 01 	sts	0x0140, r1
    1c30:	10 92 a7 00 	sts	0x00A7, r1
			.wLength       = 0,
		};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	return USB_Host_SendControlRequest(NULL);
    1c34:	80 e0       	ldi	r24, 0x00	; 0
    1c36:	90 e0       	ldi	r25, 0x00	; 0
}
    1c38:	f7 ca       	rjmp	.-2578   	; 0x1228 <USB_Host_SendControlRequest>

00001c3a <MS_Host_ConfigurePipes>:
#include "MassStorage.h"

uint8_t MS_Host_ConfigurePipes(USB_ClassInfo_MS_Host_t* const MSInterfaceInfo,
                               uint16_t ConfigDescriptorSize,
							   void* ConfigDescriptorData)
{
    1c3a:	6f 92       	push	r6
    1c3c:	7f 92       	push	r7
    1c3e:	8f 92       	push	r8
    1c40:	9f 92       	push	r9
    1c42:	af 92       	push	r10
    1c44:	bf 92       	push	r11
    1c46:	cf 92       	push	r12
    1c48:	df 92       	push	r13
    1c4a:	ef 92       	push	r14
    1c4c:	ff 92       	push	r15
    1c4e:	0f 93       	push	r16
    1c50:	1f 93       	push	r17
    1c52:	df 93       	push	r29
    1c54:	cf 93       	push	r28
    1c56:	00 d0       	rcall	.+0      	; 0x1c58 <MS_Host_ConfigurePipes+0x1e>
    1c58:	00 d0       	rcall	.+0      	; 0x1c5a <MS_Host_ConfigurePipes+0x20>
    1c5a:	cd b7       	in	r28, 0x3d	; 61
    1c5c:	de b7       	in	r29, 0x3e	; 62
    1c5e:	6c 01       	movw	r12, r24
    1c60:	7a 83       	std	Y+2, r23	; 0x02
    1c62:	69 83       	std	Y+1, r22	; 0x01
    1c64:	5c 83       	std	Y+4, r21	; 0x04
    1c66:	4b 83       	std	Y+3, r20	; 0x03
	USB_Descriptor_Endpoint_t*  DataINEndpoint       = NULL;
	USB_Descriptor_Endpoint_t*  DataOUTEndpoint      = NULL;
	USB_Descriptor_Interface_t* MassStorageInterface = NULL;

	memset(&MSInterfaceInfo->State, 0x00, sizeof(MSInterfaceInfo->State));
    1c68:	04 96       	adiw	r24, 0x04	; 4
    1c6a:	fc 01       	movw	r30, r24
    1c6c:	8a e0       	ldi	r24, 0x0A	; 10
    1c6e:	df 01       	movw	r26, r30
    1c70:	1d 92       	st	X+, r1
    1c72:	8a 95       	dec	r24
    1c74:	e9 f7       	brne	.-6      	; 0x1c70 <MS_Host_ConfigurePipes+0x36>

	if (DESCRIPTOR_TYPE(ConfigDescriptorData) != DTYPE_Configuration)
    1c76:	eb 81       	ldd	r30, Y+3	; 0x03
    1c78:	fc 81       	ldd	r31, Y+4	; 0x04
    1c7a:	81 81       	ldd	r24, Z+1	; 0x01
    1c7c:	82 30       	cpi	r24, 0x02	; 2
    1c7e:	11 f0       	breq	.+4      	; 0x1c84 <MS_Host_ConfigurePipes+0x4a>
    1c80:	81 e0       	ldi	r24, 0x01	; 1
    1c82:	87 c0       	rjmp	.+270    	; 0x1d92 <MS_Host_ConfigurePipes+0x158>
    1c84:	88 24       	eor	r8, r8
    1c86:	99 24       	eor	r9, r9
    1c88:	aa 24       	eor	r10, r10
    1c8a:	bb 24       	eor	r11, r11
    1c8c:	66 24       	eor	r6, r6
    1c8e:	77 24       	eor	r7, r7
	  return MS_ENUMERROR_InvalidConfigDescriptor;

	while (!(DataINEndpoint) || !(DataOUTEndpoint))
	{
		if (!(MassStorageInterface) ||
    1c90:	63 e0       	ldi	r22, 0x03	; 3
    1c92:	e6 2e       	mov	r14, r22
    1c94:	f1 2c       	mov	r15, r1
    1c96:	ec 0e       	add	r14, r28
    1c98:	fd 1e       	adc	r15, r29
    1c9a:	8e 01       	movw	r16, r28
    1c9c:	0f 5f       	subi	r16, 0xFF	; 255
    1c9e:	1f 4f       	sbci	r17, 0xFF	; 255
    1ca0:	61 14       	cp	r6, r1
    1ca2:	71 04       	cpc	r7, r1
    1ca4:	39 f0       	breq	.+14     	; 0x1cb4 <MS_Host_ConfigurePipes+0x7a>
    1ca6:	c8 01       	movw	r24, r16
    1ca8:	b7 01       	movw	r22, r14
    1caa:	4c ed       	ldi	r20, 0xDC	; 220
    1cac:	5e e0       	ldi	r21, 0x0E	; 14
    1cae:	f7 d9       	rcall	.-3090   	; 0x109e <USB_GetNextDescriptorComp>
    1cb0:	88 23       	and	r24, r24
    1cb2:	81 f0       	breq	.+32     	; 0x1cd4 <MS_Host_ConfigurePipes+0x9a>
		    USB_GetNextDescriptorComp(&ConfigDescriptorSize, &ConfigDescriptorData,
		                              DCOMP_MS_Host_NextMSInterfaceEndpoint) != DESCRIPTOR_SEARCH_COMP_Found)
		{
			if (USB_GetNextDescriptorComp(&ConfigDescriptorSize, &ConfigDescriptorData,
    1cb4:	c8 01       	movw	r24, r16
    1cb6:	b7 01       	movw	r22, r14
    1cb8:	4a ea       	ldi	r20, 0xAA	; 170
    1cba:	5a e0       	ldi	r21, 0x0A	; 10
    1cbc:	f0 d9       	rcall	.-3104   	; 0x109e <USB_GetNextDescriptorComp>
    1cbe:	88 23       	and	r24, r24
    1cc0:	11 f0       	breq	.+4      	; 0x1cc6 <MS_Host_ConfigurePipes+0x8c>
    1cc2:	82 e0       	ldi	r24, 0x02	; 2
    1cc4:	66 c0       	rjmp	.+204    	; 0x1d92 <MS_Host_ConfigurePipes+0x158>
			                              DCOMP_MS_Host_NextMSInterface) != DESCRIPTOR_SEARCH_COMP_Found)
			{
				return MS_ENUMERROR_NoCompatibleInterfaceFound;
			}

			MassStorageInterface = DESCRIPTOR_PCAST(ConfigDescriptorData, USB_Descriptor_Interface_t);
    1cc6:	6b 80       	ldd	r6, Y+3	; 0x03
    1cc8:	7c 80       	ldd	r7, Y+4	; 0x04
    1cca:	aa 24       	eor	r10, r10
    1ccc:	bb 24       	eor	r11, r11
    1cce:	88 24       	eor	r8, r8
    1cd0:	99 24       	eor	r9, r9
    1cd2:	e6 cf       	rjmp	.-52     	; 0x1ca0 <MS_Host_ConfigurePipes+0x66>
			DataOUTEndpoint = NULL;

			continue;
		}

		USB_Descriptor_Endpoint_t* EndpointData = DESCRIPTOR_PCAST(ConfigDescriptorData, USB_Descriptor_Endpoint_t);
    1cd4:	eb 81       	ldd	r30, Y+3	; 0x03
    1cd6:	fc 81       	ldd	r31, Y+4	; 0x04

		if (EndpointData->EndpointAddress & ENDPOINT_DESCRIPTOR_DIR_IN)
    1cd8:	82 81       	ldd	r24, Z+2	; 0x02
    1cda:	87 fd       	sbrc	r24, 7
    1cdc:	02 c0       	rjmp	.+4      	; 0x1ce2 <MS_Host_ConfigurePipes+0xa8>
    1cde:	5f 01       	movw	r10, r30
    1ce0:	01 c0       	rjmp	.+2      	; 0x1ce4 <MS_Host_ConfigurePipes+0xaa>
    1ce2:	4f 01       	movw	r8, r30
	memset(&MSInterfaceInfo->State, 0x00, sizeof(MSInterfaceInfo->State));

	if (DESCRIPTOR_TYPE(ConfigDescriptorData) != DTYPE_Configuration)
	  return MS_ENUMERROR_InvalidConfigDescriptor;

	while (!(DataINEndpoint) || !(DataOUTEndpoint))
    1ce4:	81 14       	cp	r8, r1
    1ce6:	91 04       	cpc	r9, r1
    1ce8:	d9 f2       	breq	.-74     	; 0x1ca0 <MS_Host_ConfigurePipes+0x66>
    1cea:	a1 14       	cp	r10, r1
    1cec:	b1 04       	cpc	r11, r1
    1cee:	c1 f2       	breq	.-80     	; 0x1ca0 <MS_Host_ConfigurePipes+0x66>
    1cf0:	ff 24       	eor	r15, r15
    1cf2:	f3 94       	inc	r15
		  DataOUTEndpoint = EndpointData;
	}

	for (uint8_t PipeNum = 1; PipeNum < PIPE_TOTAL_PIPES; PipeNum++)
	{
		if (PipeNum == MSInterfaceInfo->Config.DataINPipeNumber)
    1cf4:	f6 01       	movw	r30, r12
    1cf6:	80 81       	ld	r24, Z
    1cf8:	f8 16       	cp	r15, r24
    1cfa:	e1 f4       	brne	.+56     	; 0x1d34 <MS_Host_ConfigurePipes+0xfa>
		{
			Pipe_ConfigurePipe(PipeNum, EP_TYPE_BULK, PIPE_TOKEN_IN,
    1cfc:	d4 01       	movw	r26, r8
    1cfe:	12 96       	adiw	r26, 0x02	; 2
    1d00:	2c 91       	ld	r18, X
    1d02:	12 97       	sbiw	r26, 0x02	; 2
    1d04:	14 96       	adiw	r26, 0x04	; 4
    1d06:	0d 91       	ld	r16, X+
    1d08:	1c 91       	ld	r17, X
    1d0a:	15 97       	sbiw	r26, 0x05	; 5
    1d0c:	81 81       	ldd	r24, Z+1	; 0x01
    1d0e:	88 23       	and	r24, r24
    1d10:	11 f4       	brne	.+4      	; 0x1d16 <MS_Host_ConfigurePipes+0xdc>
    1d12:	90 e0       	ldi	r25, 0x00	; 0
    1d14:	01 c0       	rjmp	.+2      	; 0x1d18 <MS_Host_ConfigurePipes+0xde>
    1d16:	94 e0       	ldi	r25, 0x04	; 4
    1d18:	8f 2d       	mov	r24, r15
    1d1a:	62 e0       	ldi	r22, 0x02	; 2
    1d1c:	40 e1       	ldi	r20, 0x10	; 16
    1d1e:	e9 2e       	mov	r14, r25
    1d20:	07 d8       	rcall	.-4082   	; 0xd30 <Pipe_ConfigurePipe>
			                   DataINEndpoint->EndpointAddress, DataINEndpoint->EndpointSize,
			                   MSInterfaceInfo->Config.DataINPipeDoubleBank ? PIPE_BANK_DOUBLE : PIPE_BANK_SINGLE);

			MSInterfaceInfo->State.DataINPipeSize = DataINEndpoint->EndpointSize;
    1d22:	f4 01       	movw	r30, r8
    1d24:	84 81       	ldd	r24, Z+4	; 0x04
    1d26:	95 81       	ldd	r25, Z+5	; 0x05
    1d28:	d6 01       	movw	r26, r12
    1d2a:	17 96       	adiw	r26, 0x07	; 7
    1d2c:	9c 93       	st	X, r25
    1d2e:	8e 93       	st	-X, r24
    1d30:	16 97       	sbiw	r26, 0x06	; 6
    1d32:	20 c0       	rjmp	.+64     	; 0x1d74 <MS_Host_ConfigurePipes+0x13a>
		}
		else if (PipeNum == MSInterfaceInfo->Config.DataOUTPipeNumber)
    1d34:	f6 01       	movw	r30, r12
    1d36:	82 81       	ldd	r24, Z+2	; 0x02
    1d38:	f8 16       	cp	r15, r24
    1d3a:	e1 f4       	brne	.+56     	; 0x1d74 <MS_Host_ConfigurePipes+0x13a>
		{
			Pipe_ConfigurePipe(PipeNum, EP_TYPE_BULK, PIPE_TOKEN_OUT,
    1d3c:	d5 01       	movw	r26, r10
    1d3e:	12 96       	adiw	r26, 0x02	; 2
    1d40:	2c 91       	ld	r18, X
    1d42:	12 97       	sbiw	r26, 0x02	; 2
    1d44:	14 96       	adiw	r26, 0x04	; 4
    1d46:	0d 91       	ld	r16, X+
    1d48:	1c 91       	ld	r17, X
    1d4a:	15 97       	sbiw	r26, 0x05	; 5
    1d4c:	83 81       	ldd	r24, Z+3	; 0x03
    1d4e:	88 23       	and	r24, r24
    1d50:	11 f4       	brne	.+4      	; 0x1d56 <MS_Host_ConfigurePipes+0x11c>
    1d52:	90 e0       	ldi	r25, 0x00	; 0
    1d54:	01 c0       	rjmp	.+2      	; 0x1d58 <MS_Host_ConfigurePipes+0x11e>
    1d56:	94 e0       	ldi	r25, 0x04	; 4
    1d58:	8f 2d       	mov	r24, r15
    1d5a:	62 e0       	ldi	r22, 0x02	; 2
    1d5c:	40 e2       	ldi	r20, 0x20	; 32
    1d5e:	e9 2e       	mov	r14, r25
    1d60:	0e 94 98 06 	call	0xd30	; 0xd30 <Pipe_ConfigurePipe>
			                   DataOUTEndpoint->EndpointAddress, DataOUTEndpoint->EndpointSize,
			                   MSInterfaceInfo->Config.DataOUTPipeDoubleBank ? PIPE_BANK_DOUBLE : PIPE_BANK_SINGLE);

			MSInterfaceInfo->State.DataOUTPipeSize = DataOUTEndpoint->EndpointSize;
    1d64:	f5 01       	movw	r30, r10
    1d66:	84 81       	ldd	r24, Z+4	; 0x04
    1d68:	95 81       	ldd	r25, Z+5	; 0x05
    1d6a:	d6 01       	movw	r26, r12
    1d6c:	19 96       	adiw	r26, 0x09	; 9
    1d6e:	9c 93       	st	X, r25
    1d70:	8e 93       	st	-X, r24
    1d72:	18 97       	sbiw	r26, 0x08	; 8
		  DataINEndpoint  = EndpointData;
		else
		  DataOUTEndpoint = EndpointData;
	}

	for (uint8_t PipeNum = 1; PipeNum < PIPE_TOTAL_PIPES; PipeNum++)
    1d74:	f3 94       	inc	r15
    1d76:	b7 e0       	ldi	r27, 0x07	; 7
    1d78:	fb 16       	cp	r15, r27
    1d7a:	09 f0       	breq	.+2      	; 0x1d7e <MS_Host_ConfigurePipes+0x144>
    1d7c:	bb cf       	rjmp	.-138    	; 0x1cf4 <MS_Host_ConfigurePipes+0xba>

			MSInterfaceInfo->State.DataOUTPipeSize = DataOUTEndpoint->EndpointSize;
		}
	}

	MSInterfaceInfo->State.InterfaceNumber = MassStorageInterface->InterfaceNumber;
    1d7e:	f3 01       	movw	r30, r6
    1d80:	82 81       	ldd	r24, Z+2	; 0x02
    1d82:	d6 01       	movw	r26, r12
    1d84:	15 96       	adiw	r26, 0x05	; 5
    1d86:	8c 93       	st	X, r24
    1d88:	15 97       	sbiw	r26, 0x05	; 5
	MSInterfaceInfo->State.IsActive = true;
    1d8a:	81 e0       	ldi	r24, 0x01	; 1
    1d8c:	14 96       	adiw	r26, 0x04	; 4
    1d8e:	8c 93       	st	X, r24
    1d90:	80 e0       	ldi	r24, 0x00	; 0

	return MS_ENUMERROR_NoError;
}
    1d92:	0f 90       	pop	r0
    1d94:	0f 90       	pop	r0
    1d96:	0f 90       	pop	r0
    1d98:	0f 90       	pop	r0
    1d9a:	cf 91       	pop	r28
    1d9c:	df 91       	pop	r29
    1d9e:	1f 91       	pop	r17
    1da0:	0f 91       	pop	r16
    1da2:	ff 90       	pop	r15
    1da4:	ef 90       	pop	r14
    1da6:	df 90       	pop	r13
    1da8:	cf 90       	pop	r12
    1daa:	bf 90       	pop	r11
    1dac:	af 90       	pop	r10
    1dae:	9f 90       	pop	r9
    1db0:	8f 90       	pop	r8
    1db2:	7f 90       	pop	r7
    1db4:	6f 90       	pop	r6
    1db6:	08 95       	ret

00001db8 <DCOMP_MS_Host_NextMSInterfaceEndpoint>:

	return DESCRIPTOR_SEARCH_NotFound;
}

static uint8_t DCOMP_MS_Host_NextMSInterfaceEndpoint(void* const CurrentDescriptor)
{
    1db8:	fc 01       	movw	r30, r24
	USB_Descriptor_Header_t* Header = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Header_t);

	if (Header->Type == DTYPE_Endpoint)
    1dba:	81 81       	ldd	r24, Z+1	; 0x01
    1dbc:	85 30       	cpi	r24, 0x05	; 5
    1dbe:	51 f4       	brne	.+20     	; 0x1dd4 <DCOMP_MS_Host_NextMSInterfaceEndpoint+0x1c>
	{
		USB_Descriptor_Endpoint_t* Endpoint = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Endpoint_t);

		uint8_t EndpointType = (Endpoint->Attributes & EP_TYPE_MASK);

		if ((EndpointType == EP_TYPE_BULK) && (!(Pipe_IsEndpointBound(Endpoint->EndpointAddress))))
    1dc0:	83 81       	ldd	r24, Z+3	; 0x03
    1dc2:	83 70       	andi	r24, 0x03	; 3
    1dc4:	82 30       	cpi	r24, 0x02	; 2
    1dc6:	51 f4       	brne	.+20     	; 0x1ddc <DCOMP_MS_Host_NextMSInterfaceEndpoint+0x24>
    1dc8:	82 81       	ldd	r24, Z+2	; 0x02
    1dca:	0e 94 e2 06 	call	0xdc4	; 0xdc4 <Pipe_IsEndpointBound>
    1dce:	88 23       	and	r24, r24
    1dd0:	29 f4       	brne	.+10     	; 0x1ddc <DCOMP_MS_Host_NextMSInterfaceEndpoint+0x24>
    1dd2:	08 95       	ret
		{
			return DESCRIPTOR_SEARCH_Found;
		}
	}
	else if (Header->Type == DTYPE_Interface)
    1dd4:	84 30       	cpi	r24, 0x04	; 4
    1dd6:	11 f4       	brne	.+4      	; 0x1ddc <DCOMP_MS_Host_NextMSInterfaceEndpoint+0x24>
    1dd8:	81 e0       	ldi	r24, 0x01	; 1
    1dda:	08 95       	ret
    1ddc:	82 e0       	ldi	r24, 0x02	; 2
	{
		return DESCRIPTOR_SEARCH_Fail;
	}

	return DESCRIPTOR_SEARCH_NotFound;
}
    1dde:	08 95       	ret

00001de0 <SerialStream_TxByte>:

FILE USARTStream = FDEV_SETUP_STREAM(SerialStream_TxByte, SerialStream_RxByte, _FDEV_SETUP_RW);

static int SerialStream_TxByte(char DataByte,
                               FILE *Stream)
{
    1de0:	98 2f       	mov	r25, r24
			 *  \param[in] DataByte  Byte to transmit through the USART.
			 */
			static inline void Serial_TxByte(const char DataByte) ATTR_ALWAYS_INLINE;
			static inline void Serial_TxByte(const char DataByte)
			{
				while (!(UCSR1A & (1 << UDRE1)));
    1de2:	80 91 c8 00 	lds	r24, 0x00C8
    1de6:	85 ff       	sbrs	r24, 5
    1de8:	fc cf       	rjmp	.-8      	; 0x1de2 <SerialStream_TxByte+0x2>
				UDR1 = DataByte;
    1dea:	90 93 ce 00 	sts	0x00CE, r25
	(void)Stream;

	Serial_TxByte(DataByte);
	return 0;
}
    1dee:	80 e0       	ldi	r24, 0x00	; 0
    1df0:	90 e0       	ldi	r25, 0x00	; 0
    1df2:	08 95       	ret

00001df4 <SerialStream_RxByte>:
			 *  \return Boolean true if a character has been received, false otherwise.
			 */
			static inline bool Serial_IsCharReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Serial_IsCharReceived(void)
			{
				return ((UCSR1A & (1 << RXC1)) ? true : false);
    1df4:	80 91 c8 00 	lds	r24, 0x00C8

static int SerialStream_RxByte(FILE *Stream)
{
	(void)Stream;

	if (!(Serial_IsCharReceived()))
    1df8:	87 fd       	sbrc	r24, 7
    1dfa:	03 c0       	rjmp	.+6      	; 0x1e02 <SerialStream_RxByte+0xe>
    1dfc:	2e ef       	ldi	r18, 0xFE	; 254
    1dfe:	3f ef       	ldi	r19, 0xFF	; 255
    1e00:	08 c0       	rjmp	.+16     	; 0x1e12 <SerialStream_RxByte+0x1e>
			 *  \return Byte received from the USART.
			 */
			static inline char Serial_RxByte(void) ATTR_ALWAYS_INLINE;
			static inline char Serial_RxByte(void)
			{
				while (!(UCSR1A & (1 << RXC1)));
    1e02:	80 91 c8 00 	lds	r24, 0x00C8
    1e06:	87 ff       	sbrs	r24, 7
    1e08:	fc cf       	rjmp	.-8      	; 0x1e02 <SerialStream_RxByte+0xe>
				return UDR1;
    1e0a:	80 91 ce 00 	lds	r24, 0x00CE
	  return _FDEV_EOF;

	return Serial_RxByte();
    1e0e:	28 2f       	mov	r18, r24
    1e10:	30 e0       	ldi	r19, 0x00	; 0
}
    1e12:	c9 01       	movw	r24, r18
    1e14:	08 95       	ret

00001e16 <__mulsi3>:
    1e16:	62 9f       	mul	r22, r18
    1e18:	d0 01       	movw	r26, r0
    1e1a:	73 9f       	mul	r23, r19
    1e1c:	f0 01       	movw	r30, r0
    1e1e:	82 9f       	mul	r24, r18
    1e20:	e0 0d       	add	r30, r0
    1e22:	f1 1d       	adc	r31, r1
    1e24:	64 9f       	mul	r22, r20
    1e26:	e0 0d       	add	r30, r0
    1e28:	f1 1d       	adc	r31, r1
    1e2a:	92 9f       	mul	r25, r18
    1e2c:	f0 0d       	add	r31, r0
    1e2e:	83 9f       	mul	r24, r19
    1e30:	f0 0d       	add	r31, r0
    1e32:	74 9f       	mul	r23, r20
    1e34:	f0 0d       	add	r31, r0
    1e36:	65 9f       	mul	r22, r21
    1e38:	f0 0d       	add	r31, r0
    1e3a:	99 27       	eor	r25, r25
    1e3c:	72 9f       	mul	r23, r18
    1e3e:	b0 0d       	add	r27, r0
    1e40:	e1 1d       	adc	r30, r1
    1e42:	f9 1f       	adc	r31, r25
    1e44:	63 9f       	mul	r22, r19
    1e46:	b0 0d       	add	r27, r0
    1e48:	e1 1d       	adc	r30, r1
    1e4a:	f9 1f       	adc	r31, r25
    1e4c:	bd 01       	movw	r22, r26
    1e4e:	cf 01       	movw	r24, r30
    1e50:	11 24       	eor	r1, r1
    1e52:	08 95       	ret

00001e54 <isgraph>:
    1e54:	80 32       	cpi	r24, 0x20	; 32
    1e56:	09 f0       	breq	.+2      	; 0x1e5a <isprint+0x2>

00001e58 <isprint>:
    1e58:	91 11       	cpse	r25, r1
    1e5a:	80 c2       	rjmp	.+1280   	; 0x235c <__ctype_isfalse>
    1e5c:	80 52       	subi	r24, 0x20	; 32
    1e5e:	8f 55       	subi	r24, 0x5F	; 95
    1e60:	e0 f7       	brcc	.-8      	; 0x1e5a <isprint+0x2>
    1e62:	08 95       	ret

00001e64 <fputc>:
    1e64:	0f 93       	push	r16
    1e66:	1f 93       	push	r17
    1e68:	cf 93       	push	r28
    1e6a:	df 93       	push	r29
    1e6c:	8c 01       	movw	r16, r24
    1e6e:	eb 01       	movw	r28, r22
    1e70:	8b 81       	ldd	r24, Y+3	; 0x03
    1e72:	81 ff       	sbrs	r24, 1
    1e74:	1b c0       	rjmp	.+54     	; 0x1eac <fputc+0x48>
    1e76:	82 ff       	sbrs	r24, 2
    1e78:	0d c0       	rjmp	.+26     	; 0x1e94 <fputc+0x30>
    1e7a:	2e 81       	ldd	r18, Y+6	; 0x06
    1e7c:	3f 81       	ldd	r19, Y+7	; 0x07
    1e7e:	8c 81       	ldd	r24, Y+4	; 0x04
    1e80:	9d 81       	ldd	r25, Y+5	; 0x05
    1e82:	28 17       	cp	r18, r24
    1e84:	39 07       	cpc	r19, r25
    1e86:	64 f4       	brge	.+24     	; 0x1ea0 <fputc+0x3c>
    1e88:	e8 81       	ld	r30, Y
    1e8a:	f9 81       	ldd	r31, Y+1	; 0x01
    1e8c:	01 93       	st	Z+, r16
    1e8e:	f9 83       	std	Y+1, r31	; 0x01
    1e90:	e8 83       	st	Y, r30
    1e92:	06 c0       	rjmp	.+12     	; 0x1ea0 <fputc+0x3c>
    1e94:	e8 85       	ldd	r30, Y+8	; 0x08
    1e96:	f9 85       	ldd	r31, Y+9	; 0x09
    1e98:	80 2f       	mov	r24, r16
    1e9a:	09 95       	icall
    1e9c:	89 2b       	or	r24, r25
    1e9e:	31 f4       	brne	.+12     	; 0x1eac <fputc+0x48>
    1ea0:	8e 81       	ldd	r24, Y+6	; 0x06
    1ea2:	9f 81       	ldd	r25, Y+7	; 0x07
    1ea4:	01 96       	adiw	r24, 0x01	; 1
    1ea6:	9f 83       	std	Y+7, r25	; 0x07
    1ea8:	8e 83       	std	Y+6, r24	; 0x06
    1eaa:	02 c0       	rjmp	.+4      	; 0x1eb0 <fputc+0x4c>
    1eac:	0f ef       	ldi	r16, 0xFF	; 255
    1eae:	1f ef       	ldi	r17, 0xFF	; 255
    1eb0:	c8 01       	movw	r24, r16
    1eb2:	df 91       	pop	r29
    1eb4:	cf 91       	pop	r28
    1eb6:	1f 91       	pop	r17
    1eb8:	0f 91       	pop	r16
    1eba:	08 95       	ret

00001ebc <printf_P>:
    1ebc:	df 93       	push	r29
    1ebe:	cf 93       	push	r28
    1ec0:	cd b7       	in	r28, 0x3d	; 61
    1ec2:	de b7       	in	r29, 0x3e	; 62
    1ec4:	fe 01       	movw	r30, r28
    1ec6:	35 96       	adiw	r30, 0x05	; 5
    1ec8:	61 91       	ld	r22, Z+
    1eca:	71 91       	ld	r23, Z+
    1ecc:	a0 91 45 01 	lds	r26, 0x0145
    1ed0:	b0 91 46 01 	lds	r27, 0x0146
    1ed4:	13 96       	adiw	r26, 0x03	; 3
    1ed6:	8c 91       	ld	r24, X
    1ed8:	13 97       	sbiw	r26, 0x03	; 3
    1eda:	88 60       	ori	r24, 0x08	; 8
    1edc:	13 96       	adiw	r26, 0x03	; 3
    1ede:	8c 93       	st	X, r24
    1ee0:	80 91 45 01 	lds	r24, 0x0145
    1ee4:	90 91 46 01 	lds	r25, 0x0146
    1ee8:	af 01       	movw	r20, r30
    1eea:	3f d0       	rcall	.+126    	; 0x1f6a <vfprintf>
    1eec:	e0 91 45 01 	lds	r30, 0x0145
    1ef0:	f0 91 46 01 	lds	r31, 0x0146
    1ef4:	23 81       	ldd	r18, Z+3	; 0x03
    1ef6:	27 7f       	andi	r18, 0xF7	; 247
    1ef8:	23 83       	std	Z+3, r18	; 0x03
    1efa:	cf 91       	pop	r28
    1efc:	df 91       	pop	r29
    1efe:	08 95       	ret

00001f00 <puts_P>:
    1f00:	0f 93       	push	r16
    1f02:	1f 93       	push	r17
    1f04:	cf 93       	push	r28
    1f06:	df 93       	push	r29
    1f08:	ec 01       	movw	r28, r24
    1f0a:	e0 91 45 01 	lds	r30, 0x0145
    1f0e:	f0 91 46 01 	lds	r31, 0x0146
    1f12:	83 81       	ldd	r24, Z+3	; 0x03
    1f14:	81 ff       	sbrs	r24, 1
    1f16:	21 c0       	rjmp	.+66     	; 0x1f5a <puts_P+0x5a>
    1f18:	00 e0       	ldi	r16, 0x00	; 0
    1f1a:	10 e0       	ldi	r17, 0x00	; 0
    1f1c:	0e c0       	rjmp	.+28     	; 0x1f3a <puts_P+0x3a>
    1f1e:	e0 91 45 01 	lds	r30, 0x0145
    1f22:	f0 91 46 01 	lds	r31, 0x0146
    1f26:	20 85       	ldd	r18, Z+8	; 0x08
    1f28:	31 85       	ldd	r19, Z+9	; 0x09
    1f2a:	bf 01       	movw	r22, r30
    1f2c:	f9 01       	movw	r30, r18
    1f2e:	09 95       	icall
    1f30:	89 2b       	or	r24, r25
    1f32:	11 f0       	breq	.+4      	; 0x1f38 <puts_P+0x38>
    1f34:	0f ef       	ldi	r16, 0xFF	; 255
    1f36:	1f ef       	ldi	r17, 0xFF	; 255
    1f38:	21 96       	adiw	r28, 0x01	; 1
    1f3a:	fe 01       	movw	r30, r28
    1f3c:	84 91       	lpm	r24, Z+
    1f3e:	88 23       	and	r24, r24
    1f40:	71 f7       	brne	.-36     	; 0x1f1e <puts_P+0x1e>
    1f42:	e0 91 45 01 	lds	r30, 0x0145
    1f46:	f0 91 46 01 	lds	r31, 0x0146
    1f4a:	20 85       	ldd	r18, Z+8	; 0x08
    1f4c:	31 85       	ldd	r19, Z+9	; 0x09
    1f4e:	8a e0       	ldi	r24, 0x0A	; 10
    1f50:	bf 01       	movw	r22, r30
    1f52:	f9 01       	movw	r30, r18
    1f54:	09 95       	icall
    1f56:	89 2b       	or	r24, r25
    1f58:	11 f0       	breq	.+4      	; 0x1f5e <puts_P+0x5e>
    1f5a:	0f ef       	ldi	r16, 0xFF	; 255
    1f5c:	1f ef       	ldi	r17, 0xFF	; 255
    1f5e:	c8 01       	movw	r24, r16
    1f60:	df 91       	pop	r29
    1f62:	cf 91       	pop	r28
    1f64:	1f 91       	pop	r17
    1f66:	0f 91       	pop	r16
    1f68:	08 95       	ret

00001f6a <vfprintf>:
    1f6a:	2f 92       	push	r2
    1f6c:	3f 92       	push	r3
    1f6e:	4f 92       	push	r4
    1f70:	5f 92       	push	r5
    1f72:	6f 92       	push	r6
    1f74:	7f 92       	push	r7
    1f76:	8f 92       	push	r8
    1f78:	9f 92       	push	r9
    1f7a:	af 92       	push	r10
    1f7c:	bf 92       	push	r11
    1f7e:	cf 92       	push	r12
    1f80:	df 92       	push	r13
    1f82:	ef 92       	push	r14
    1f84:	ff 92       	push	r15
    1f86:	0f 93       	push	r16
    1f88:	1f 93       	push	r17
    1f8a:	df 93       	push	r29
    1f8c:	cf 93       	push	r28
    1f8e:	cd b7       	in	r28, 0x3d	; 61
    1f90:	de b7       	in	r29, 0x3e	; 62
    1f92:	2b 97       	sbiw	r28, 0x0b	; 11
    1f94:	0f b6       	in	r0, 0x3f	; 63
    1f96:	f8 94       	cli
    1f98:	de bf       	out	0x3e, r29	; 62
    1f9a:	0f be       	out	0x3f, r0	; 63
    1f9c:	cd bf       	out	0x3d, r28	; 61
    1f9e:	3c 01       	movw	r6, r24
    1fa0:	2b 01       	movw	r4, r22
    1fa2:	5a 01       	movw	r10, r20
    1fa4:	fc 01       	movw	r30, r24
    1fa6:	17 82       	std	Z+7, r1	; 0x07
    1fa8:	16 82       	std	Z+6, r1	; 0x06
    1faa:	83 81       	ldd	r24, Z+3	; 0x03
    1fac:	81 fd       	sbrc	r24, 1
    1fae:	03 c0       	rjmp	.+6      	; 0x1fb6 <vfprintf+0x4c>
    1fb0:	6f ef       	ldi	r22, 0xFF	; 255
    1fb2:	7f ef       	ldi	r23, 0xFF	; 255
    1fb4:	b9 c1       	rjmp	.+882    	; 0x2328 <__stack+0x229>
    1fb6:	9a e0       	ldi	r25, 0x0A	; 10
    1fb8:	89 2e       	mov	r8, r25
    1fba:	1e 01       	movw	r2, r28
    1fbc:	08 94       	sec
    1fbe:	21 1c       	adc	r2, r1
    1fc0:	31 1c       	adc	r3, r1
    1fc2:	f3 01       	movw	r30, r6
    1fc4:	23 81       	ldd	r18, Z+3	; 0x03
    1fc6:	f2 01       	movw	r30, r4
    1fc8:	23 fd       	sbrc	r18, 3
    1fca:	85 91       	lpm	r24, Z+
    1fcc:	23 ff       	sbrs	r18, 3
    1fce:	81 91       	ld	r24, Z+
    1fd0:	2f 01       	movw	r4, r30
    1fd2:	88 23       	and	r24, r24
    1fd4:	09 f4       	brne	.+2      	; 0x1fd8 <vfprintf+0x6e>
    1fd6:	a5 c1       	rjmp	.+842    	; 0x2322 <__stack+0x223>
    1fd8:	85 32       	cpi	r24, 0x25	; 37
    1fda:	39 f4       	brne	.+14     	; 0x1fea <vfprintf+0x80>
    1fdc:	23 fd       	sbrc	r18, 3
    1fde:	85 91       	lpm	r24, Z+
    1fe0:	23 ff       	sbrs	r18, 3
    1fe2:	81 91       	ld	r24, Z+
    1fe4:	2f 01       	movw	r4, r30
    1fe6:	85 32       	cpi	r24, 0x25	; 37
    1fe8:	21 f4       	brne	.+8      	; 0x1ff2 <vfprintf+0x88>
    1fea:	90 e0       	ldi	r25, 0x00	; 0
    1fec:	b3 01       	movw	r22, r6
    1fee:	3a df       	rcall	.-396    	; 0x1e64 <fputc>
    1ff0:	e8 cf       	rjmp	.-48     	; 0x1fc2 <vfprintf+0x58>
    1ff2:	98 2f       	mov	r25, r24
    1ff4:	ff 24       	eor	r15, r15
    1ff6:	ee 24       	eor	r14, r14
    1ff8:	99 24       	eor	r9, r9
    1ffa:	ff e1       	ldi	r31, 0x1F	; 31
    1ffc:	ff 15       	cp	r31, r15
    1ffe:	d0 f0       	brcs	.+52     	; 0x2034 <vfprintf+0xca>
    2000:	9b 32       	cpi	r25, 0x2B	; 43
    2002:	69 f0       	breq	.+26     	; 0x201e <vfprintf+0xb4>
    2004:	9c 32       	cpi	r25, 0x2C	; 44
    2006:	28 f4       	brcc	.+10     	; 0x2012 <vfprintf+0xa8>
    2008:	90 32       	cpi	r25, 0x20	; 32
    200a:	59 f0       	breq	.+22     	; 0x2022 <vfprintf+0xb8>
    200c:	93 32       	cpi	r25, 0x23	; 35
    200e:	91 f4       	brne	.+36     	; 0x2034 <vfprintf+0xca>
    2010:	0e c0       	rjmp	.+28     	; 0x202e <vfprintf+0xc4>
    2012:	9d 32       	cpi	r25, 0x2D	; 45
    2014:	49 f0       	breq	.+18     	; 0x2028 <vfprintf+0xbe>
    2016:	90 33       	cpi	r25, 0x30	; 48
    2018:	69 f4       	brne	.+26     	; 0x2034 <vfprintf+0xca>
    201a:	41 e0       	ldi	r20, 0x01	; 1
    201c:	24 c0       	rjmp	.+72     	; 0x2066 <vfprintf+0xfc>
    201e:	52 e0       	ldi	r21, 0x02	; 2
    2020:	f5 2a       	or	r15, r21
    2022:	84 e0       	ldi	r24, 0x04	; 4
    2024:	f8 2a       	or	r15, r24
    2026:	28 c0       	rjmp	.+80     	; 0x2078 <vfprintf+0x10e>
    2028:	98 e0       	ldi	r25, 0x08	; 8
    202a:	f9 2a       	or	r15, r25
    202c:	25 c0       	rjmp	.+74     	; 0x2078 <vfprintf+0x10e>
    202e:	e0 e1       	ldi	r30, 0x10	; 16
    2030:	fe 2a       	or	r15, r30
    2032:	22 c0       	rjmp	.+68     	; 0x2078 <vfprintf+0x10e>
    2034:	f7 fc       	sbrc	r15, 7
    2036:	29 c0       	rjmp	.+82     	; 0x208a <vfprintf+0x120>
    2038:	89 2f       	mov	r24, r25
    203a:	80 53       	subi	r24, 0x30	; 48
    203c:	8a 30       	cpi	r24, 0x0A	; 10
    203e:	70 f4       	brcc	.+28     	; 0x205c <vfprintf+0xf2>
    2040:	f6 fe       	sbrs	r15, 6
    2042:	05 c0       	rjmp	.+10     	; 0x204e <vfprintf+0xe4>
    2044:	98 9c       	mul	r9, r8
    2046:	90 2c       	mov	r9, r0
    2048:	11 24       	eor	r1, r1
    204a:	98 0e       	add	r9, r24
    204c:	15 c0       	rjmp	.+42     	; 0x2078 <vfprintf+0x10e>
    204e:	e8 9c       	mul	r14, r8
    2050:	e0 2c       	mov	r14, r0
    2052:	11 24       	eor	r1, r1
    2054:	e8 0e       	add	r14, r24
    2056:	f0 e2       	ldi	r31, 0x20	; 32
    2058:	ff 2a       	or	r15, r31
    205a:	0e c0       	rjmp	.+28     	; 0x2078 <vfprintf+0x10e>
    205c:	9e 32       	cpi	r25, 0x2E	; 46
    205e:	29 f4       	brne	.+10     	; 0x206a <vfprintf+0x100>
    2060:	f6 fc       	sbrc	r15, 6
    2062:	5f c1       	rjmp	.+702    	; 0x2322 <__stack+0x223>
    2064:	40 e4       	ldi	r20, 0x40	; 64
    2066:	f4 2a       	or	r15, r20
    2068:	07 c0       	rjmp	.+14     	; 0x2078 <vfprintf+0x10e>
    206a:	9c 36       	cpi	r25, 0x6C	; 108
    206c:	19 f4       	brne	.+6      	; 0x2074 <vfprintf+0x10a>
    206e:	50 e8       	ldi	r21, 0x80	; 128
    2070:	f5 2a       	or	r15, r21
    2072:	02 c0       	rjmp	.+4      	; 0x2078 <vfprintf+0x10e>
    2074:	98 36       	cpi	r25, 0x68	; 104
    2076:	49 f4       	brne	.+18     	; 0x208a <vfprintf+0x120>
    2078:	f2 01       	movw	r30, r4
    207a:	23 fd       	sbrc	r18, 3
    207c:	95 91       	lpm	r25, Z+
    207e:	23 ff       	sbrs	r18, 3
    2080:	91 91       	ld	r25, Z+
    2082:	2f 01       	movw	r4, r30
    2084:	99 23       	and	r25, r25
    2086:	09 f0       	breq	.+2      	; 0x208a <vfprintf+0x120>
    2088:	b8 cf       	rjmp	.-144    	; 0x1ffa <vfprintf+0x90>
    208a:	89 2f       	mov	r24, r25
    208c:	85 54       	subi	r24, 0x45	; 69
    208e:	83 30       	cpi	r24, 0x03	; 3
    2090:	18 f0       	brcs	.+6      	; 0x2098 <vfprintf+0x12e>
    2092:	80 52       	subi	r24, 0x20	; 32
    2094:	83 30       	cpi	r24, 0x03	; 3
    2096:	38 f4       	brcc	.+14     	; 0x20a6 <vfprintf+0x13c>
    2098:	44 e0       	ldi	r20, 0x04	; 4
    209a:	50 e0       	ldi	r21, 0x00	; 0
    209c:	a4 0e       	add	r10, r20
    209e:	b5 1e       	adc	r11, r21
    20a0:	5f e3       	ldi	r21, 0x3F	; 63
    20a2:	59 83       	std	Y+1, r21	; 0x01
    20a4:	0f c0       	rjmp	.+30     	; 0x20c4 <vfprintf+0x15a>
    20a6:	93 36       	cpi	r25, 0x63	; 99
    20a8:	31 f0       	breq	.+12     	; 0x20b6 <vfprintf+0x14c>
    20aa:	93 37       	cpi	r25, 0x73	; 115
    20ac:	79 f0       	breq	.+30     	; 0x20cc <vfprintf+0x162>
    20ae:	93 35       	cpi	r25, 0x53	; 83
    20b0:	09 f0       	breq	.+2      	; 0x20b4 <vfprintf+0x14a>
    20b2:	52 c0       	rjmp	.+164    	; 0x2158 <__stack+0x59>
    20b4:	1f c0       	rjmp	.+62     	; 0x20f4 <vfprintf+0x18a>
    20b6:	f5 01       	movw	r30, r10
    20b8:	80 81       	ld	r24, Z
    20ba:	89 83       	std	Y+1, r24	; 0x01
    20bc:	42 e0       	ldi	r20, 0x02	; 2
    20be:	50 e0       	ldi	r21, 0x00	; 0
    20c0:	a4 0e       	add	r10, r20
    20c2:	b5 1e       	adc	r11, r21
    20c4:	61 01       	movw	r12, r2
    20c6:	01 e0       	ldi	r16, 0x01	; 1
    20c8:	10 e0       	ldi	r17, 0x00	; 0
    20ca:	11 c0       	rjmp	.+34     	; 0x20ee <vfprintf+0x184>
    20cc:	f5 01       	movw	r30, r10
    20ce:	c0 80       	ld	r12, Z
    20d0:	d1 80       	ldd	r13, Z+1	; 0x01
    20d2:	f6 fc       	sbrc	r15, 6
    20d4:	03 c0       	rjmp	.+6      	; 0x20dc <vfprintf+0x172>
    20d6:	6f ef       	ldi	r22, 0xFF	; 255
    20d8:	7f ef       	ldi	r23, 0xFF	; 255
    20da:	02 c0       	rjmp	.+4      	; 0x20e0 <vfprintf+0x176>
    20dc:	69 2d       	mov	r22, r9
    20de:	70 e0       	ldi	r23, 0x00	; 0
    20e0:	42 e0       	ldi	r20, 0x02	; 2
    20e2:	50 e0       	ldi	r21, 0x00	; 0
    20e4:	a4 0e       	add	r10, r20
    20e6:	b5 1e       	adc	r11, r21
    20e8:	c6 01       	movw	r24, r12
    20ea:	46 d1       	rcall	.+652    	; 0x2378 <strnlen>
    20ec:	8c 01       	movw	r16, r24
    20ee:	5f e7       	ldi	r21, 0x7F	; 127
    20f0:	f5 22       	and	r15, r21
    20f2:	13 c0       	rjmp	.+38     	; 0x211a <__stack+0x1b>
    20f4:	f5 01       	movw	r30, r10
    20f6:	c0 80       	ld	r12, Z
    20f8:	d1 80       	ldd	r13, Z+1	; 0x01
    20fa:	f6 fc       	sbrc	r15, 6
    20fc:	03 c0       	rjmp	.+6      	; 0x2104 <__stack+0x5>
    20fe:	6f ef       	ldi	r22, 0xFF	; 255
    2100:	7f ef       	ldi	r23, 0xFF	; 255
    2102:	02 c0       	rjmp	.+4      	; 0x2108 <__stack+0x9>
    2104:	69 2d       	mov	r22, r9
    2106:	70 e0       	ldi	r23, 0x00	; 0
    2108:	42 e0       	ldi	r20, 0x02	; 2
    210a:	50 e0       	ldi	r21, 0x00	; 0
    210c:	a4 0e       	add	r10, r20
    210e:	b5 1e       	adc	r11, r21
    2110:	c6 01       	movw	r24, r12
    2112:	27 d1       	rcall	.+590    	; 0x2362 <strnlen_P>
    2114:	8c 01       	movw	r16, r24
    2116:	50 e8       	ldi	r21, 0x80	; 128
    2118:	f5 2a       	or	r15, r21
    211a:	f3 fe       	sbrs	r15, 3
    211c:	06 c0       	rjmp	.+12     	; 0x212a <__stack+0x2b>
    211e:	18 c0       	rjmp	.+48     	; 0x2150 <__stack+0x51>
    2120:	80 e2       	ldi	r24, 0x20	; 32
    2122:	90 e0       	ldi	r25, 0x00	; 0
    2124:	b3 01       	movw	r22, r6
    2126:	9e de       	rcall	.-708    	; 0x1e64 <fputc>
    2128:	ea 94       	dec	r14
    212a:	8e 2d       	mov	r24, r14
    212c:	90 e0       	ldi	r25, 0x00	; 0
    212e:	08 17       	cp	r16, r24
    2130:	19 07       	cpc	r17, r25
    2132:	b0 f3       	brcs	.-20     	; 0x2120 <__stack+0x21>
    2134:	0d c0       	rjmp	.+26     	; 0x2150 <__stack+0x51>
    2136:	f6 01       	movw	r30, r12
    2138:	f7 fc       	sbrc	r15, 7
    213a:	85 91       	lpm	r24, Z+
    213c:	f7 fe       	sbrs	r15, 7
    213e:	81 91       	ld	r24, Z+
    2140:	6f 01       	movw	r12, r30
    2142:	90 e0       	ldi	r25, 0x00	; 0
    2144:	b3 01       	movw	r22, r6
    2146:	8e de       	rcall	.-740    	; 0x1e64 <fputc>
    2148:	e1 10       	cpse	r14, r1
    214a:	ea 94       	dec	r14
    214c:	01 50       	subi	r16, 0x01	; 1
    214e:	10 40       	sbci	r17, 0x00	; 0
    2150:	01 15       	cp	r16, r1
    2152:	11 05       	cpc	r17, r1
    2154:	81 f7       	brne	.-32     	; 0x2136 <__stack+0x37>
    2156:	e2 c0       	rjmp	.+452    	; 0x231c <__stack+0x21d>
    2158:	94 36       	cpi	r25, 0x64	; 100
    215a:	11 f0       	breq	.+4      	; 0x2160 <__stack+0x61>
    215c:	99 36       	cpi	r25, 0x69	; 105
    215e:	61 f5       	brne	.+88     	; 0x21b8 <__stack+0xb9>
    2160:	f7 fe       	sbrs	r15, 7
    2162:	08 c0       	rjmp	.+16     	; 0x2174 <__stack+0x75>
    2164:	f5 01       	movw	r30, r10
    2166:	20 81       	ld	r18, Z
    2168:	31 81       	ldd	r19, Z+1	; 0x01
    216a:	42 81       	ldd	r20, Z+2	; 0x02
    216c:	53 81       	ldd	r21, Z+3	; 0x03
    216e:	84 e0       	ldi	r24, 0x04	; 4
    2170:	90 e0       	ldi	r25, 0x00	; 0
    2172:	0a c0       	rjmp	.+20     	; 0x2188 <__stack+0x89>
    2174:	f5 01       	movw	r30, r10
    2176:	80 81       	ld	r24, Z
    2178:	91 81       	ldd	r25, Z+1	; 0x01
    217a:	9c 01       	movw	r18, r24
    217c:	44 27       	eor	r20, r20
    217e:	37 fd       	sbrc	r19, 7
    2180:	40 95       	com	r20
    2182:	54 2f       	mov	r21, r20
    2184:	82 e0       	ldi	r24, 0x02	; 2
    2186:	90 e0       	ldi	r25, 0x00	; 0
    2188:	a8 0e       	add	r10, r24
    218a:	b9 1e       	adc	r11, r25
    218c:	9f e6       	ldi	r25, 0x6F	; 111
    218e:	f9 22       	and	r15, r25
    2190:	57 ff       	sbrs	r21, 7
    2192:	09 c0       	rjmp	.+18     	; 0x21a6 <__stack+0xa7>
    2194:	50 95       	com	r21
    2196:	40 95       	com	r20
    2198:	30 95       	com	r19
    219a:	21 95       	neg	r18
    219c:	3f 4f       	sbci	r19, 0xFF	; 255
    219e:	4f 4f       	sbci	r20, 0xFF	; 255
    21a0:	5f 4f       	sbci	r21, 0xFF	; 255
    21a2:	e0 e8       	ldi	r30, 0x80	; 128
    21a4:	fe 2a       	or	r15, r30
    21a6:	ca 01       	movw	r24, r20
    21a8:	b9 01       	movw	r22, r18
    21aa:	a1 01       	movw	r20, r2
    21ac:	2a e0       	ldi	r18, 0x0A	; 10
    21ae:	30 e0       	ldi	r19, 0x00	; 0
    21b0:	ee d0       	rcall	.+476    	; 0x238e <__ultoa_invert>
    21b2:	d8 2e       	mov	r13, r24
    21b4:	d2 18       	sub	r13, r2
    21b6:	3f c0       	rjmp	.+126    	; 0x2236 <__stack+0x137>
    21b8:	95 37       	cpi	r25, 0x75	; 117
    21ba:	29 f4       	brne	.+10     	; 0x21c6 <__stack+0xc7>
    21bc:	1f 2d       	mov	r17, r15
    21be:	1f 7e       	andi	r17, 0xEF	; 239
    21c0:	2a e0       	ldi	r18, 0x0A	; 10
    21c2:	30 e0       	ldi	r19, 0x00	; 0
    21c4:	1d c0       	rjmp	.+58     	; 0x2200 <__stack+0x101>
    21c6:	1f 2d       	mov	r17, r15
    21c8:	19 7f       	andi	r17, 0xF9	; 249
    21ca:	9f 36       	cpi	r25, 0x6F	; 111
    21cc:	61 f0       	breq	.+24     	; 0x21e6 <__stack+0xe7>
    21ce:	90 37       	cpi	r25, 0x70	; 112
    21d0:	20 f4       	brcc	.+8      	; 0x21da <__stack+0xdb>
    21d2:	98 35       	cpi	r25, 0x58	; 88
    21d4:	09 f0       	breq	.+2      	; 0x21d8 <__stack+0xd9>
    21d6:	a5 c0       	rjmp	.+330    	; 0x2322 <__stack+0x223>
    21d8:	0f c0       	rjmp	.+30     	; 0x21f8 <__stack+0xf9>
    21da:	90 37       	cpi	r25, 0x70	; 112
    21dc:	39 f0       	breq	.+14     	; 0x21ec <__stack+0xed>
    21de:	98 37       	cpi	r25, 0x78	; 120
    21e0:	09 f0       	breq	.+2      	; 0x21e4 <__stack+0xe5>
    21e2:	9f c0       	rjmp	.+318    	; 0x2322 <__stack+0x223>
    21e4:	04 c0       	rjmp	.+8      	; 0x21ee <__stack+0xef>
    21e6:	28 e0       	ldi	r18, 0x08	; 8
    21e8:	30 e0       	ldi	r19, 0x00	; 0
    21ea:	0a c0       	rjmp	.+20     	; 0x2200 <__stack+0x101>
    21ec:	10 61       	ori	r17, 0x10	; 16
    21ee:	14 fd       	sbrc	r17, 4
    21f0:	14 60       	ori	r17, 0x04	; 4
    21f2:	20 e1       	ldi	r18, 0x10	; 16
    21f4:	30 e0       	ldi	r19, 0x00	; 0
    21f6:	04 c0       	rjmp	.+8      	; 0x2200 <__stack+0x101>
    21f8:	14 fd       	sbrc	r17, 4
    21fa:	16 60       	ori	r17, 0x06	; 6
    21fc:	20 e1       	ldi	r18, 0x10	; 16
    21fe:	32 e0       	ldi	r19, 0x02	; 2
    2200:	17 ff       	sbrs	r17, 7
    2202:	08 c0       	rjmp	.+16     	; 0x2214 <__stack+0x115>
    2204:	f5 01       	movw	r30, r10
    2206:	60 81       	ld	r22, Z
    2208:	71 81       	ldd	r23, Z+1	; 0x01
    220a:	82 81       	ldd	r24, Z+2	; 0x02
    220c:	93 81       	ldd	r25, Z+3	; 0x03
    220e:	44 e0       	ldi	r20, 0x04	; 4
    2210:	50 e0       	ldi	r21, 0x00	; 0
    2212:	08 c0       	rjmp	.+16     	; 0x2224 <__stack+0x125>
    2214:	f5 01       	movw	r30, r10
    2216:	80 81       	ld	r24, Z
    2218:	91 81       	ldd	r25, Z+1	; 0x01
    221a:	bc 01       	movw	r22, r24
    221c:	80 e0       	ldi	r24, 0x00	; 0
    221e:	90 e0       	ldi	r25, 0x00	; 0
    2220:	42 e0       	ldi	r20, 0x02	; 2
    2222:	50 e0       	ldi	r21, 0x00	; 0
    2224:	a4 0e       	add	r10, r20
    2226:	b5 1e       	adc	r11, r21
    2228:	a1 01       	movw	r20, r2
    222a:	b1 d0       	rcall	.+354    	; 0x238e <__ultoa_invert>
    222c:	d8 2e       	mov	r13, r24
    222e:	d2 18       	sub	r13, r2
    2230:	8f e7       	ldi	r24, 0x7F	; 127
    2232:	f8 2e       	mov	r15, r24
    2234:	f1 22       	and	r15, r17
    2236:	f6 fe       	sbrs	r15, 6
    2238:	0b c0       	rjmp	.+22     	; 0x2250 <__stack+0x151>
    223a:	5e ef       	ldi	r21, 0xFE	; 254
    223c:	f5 22       	and	r15, r21
    223e:	d9 14       	cp	r13, r9
    2240:	38 f4       	brcc	.+14     	; 0x2250 <__stack+0x151>
    2242:	f4 fe       	sbrs	r15, 4
    2244:	07 c0       	rjmp	.+14     	; 0x2254 <__stack+0x155>
    2246:	f2 fc       	sbrc	r15, 2
    2248:	05 c0       	rjmp	.+10     	; 0x2254 <__stack+0x155>
    224a:	8f ee       	ldi	r24, 0xEF	; 239
    224c:	f8 22       	and	r15, r24
    224e:	02 c0       	rjmp	.+4      	; 0x2254 <__stack+0x155>
    2250:	1d 2d       	mov	r17, r13
    2252:	01 c0       	rjmp	.+2      	; 0x2256 <__stack+0x157>
    2254:	19 2d       	mov	r17, r9
    2256:	f4 fe       	sbrs	r15, 4
    2258:	0d c0       	rjmp	.+26     	; 0x2274 <__stack+0x175>
    225a:	fe 01       	movw	r30, r28
    225c:	ed 0d       	add	r30, r13
    225e:	f1 1d       	adc	r31, r1
    2260:	80 81       	ld	r24, Z
    2262:	80 33       	cpi	r24, 0x30	; 48
    2264:	19 f4       	brne	.+6      	; 0x226c <__stack+0x16d>
    2266:	99 ee       	ldi	r25, 0xE9	; 233
    2268:	f9 22       	and	r15, r25
    226a:	08 c0       	rjmp	.+16     	; 0x227c <__stack+0x17d>
    226c:	1f 5f       	subi	r17, 0xFF	; 255
    226e:	f2 fe       	sbrs	r15, 2
    2270:	05 c0       	rjmp	.+10     	; 0x227c <__stack+0x17d>
    2272:	03 c0       	rjmp	.+6      	; 0x227a <__stack+0x17b>
    2274:	8f 2d       	mov	r24, r15
    2276:	86 78       	andi	r24, 0x86	; 134
    2278:	09 f0       	breq	.+2      	; 0x227c <__stack+0x17d>
    227a:	1f 5f       	subi	r17, 0xFF	; 255
    227c:	0f 2d       	mov	r16, r15
    227e:	f3 fc       	sbrc	r15, 3
    2280:	13 c0       	rjmp	.+38     	; 0x22a8 <__stack+0x1a9>
    2282:	f0 fe       	sbrs	r15, 0
    2284:	0e c0       	rjmp	.+28     	; 0x22a2 <__stack+0x1a3>
    2286:	1e 15       	cp	r17, r14
    2288:	10 f0       	brcs	.+4      	; 0x228e <__stack+0x18f>
    228a:	9d 2c       	mov	r9, r13
    228c:	0a c0       	rjmp	.+20     	; 0x22a2 <__stack+0x1a3>
    228e:	9d 2c       	mov	r9, r13
    2290:	9e 0c       	add	r9, r14
    2292:	91 1a       	sub	r9, r17
    2294:	1e 2d       	mov	r17, r14
    2296:	05 c0       	rjmp	.+10     	; 0x22a2 <__stack+0x1a3>
    2298:	80 e2       	ldi	r24, 0x20	; 32
    229a:	90 e0       	ldi	r25, 0x00	; 0
    229c:	b3 01       	movw	r22, r6
    229e:	e2 dd       	rcall	.-1084   	; 0x1e64 <fputc>
    22a0:	1f 5f       	subi	r17, 0xFF	; 255
    22a2:	1e 15       	cp	r17, r14
    22a4:	c8 f3       	brcs	.-14     	; 0x2298 <__stack+0x199>
    22a6:	04 c0       	rjmp	.+8      	; 0x22b0 <__stack+0x1b1>
    22a8:	1e 15       	cp	r17, r14
    22aa:	10 f4       	brcc	.+4      	; 0x22b0 <__stack+0x1b1>
    22ac:	e1 1a       	sub	r14, r17
    22ae:	01 c0       	rjmp	.+2      	; 0x22b2 <__stack+0x1b3>
    22b0:	ee 24       	eor	r14, r14
    22b2:	04 ff       	sbrs	r16, 4
    22b4:	0e c0       	rjmp	.+28     	; 0x22d2 <__stack+0x1d3>
    22b6:	80 e3       	ldi	r24, 0x30	; 48
    22b8:	90 e0       	ldi	r25, 0x00	; 0
    22ba:	b3 01       	movw	r22, r6
    22bc:	d3 dd       	rcall	.-1114   	; 0x1e64 <fputc>
    22be:	02 ff       	sbrs	r16, 2
    22c0:	1b c0       	rjmp	.+54     	; 0x22f8 <__stack+0x1f9>
    22c2:	01 fd       	sbrc	r16, 1
    22c4:	03 c0       	rjmp	.+6      	; 0x22cc <__stack+0x1cd>
    22c6:	88 e7       	ldi	r24, 0x78	; 120
    22c8:	90 e0       	ldi	r25, 0x00	; 0
    22ca:	0e c0       	rjmp	.+28     	; 0x22e8 <__stack+0x1e9>
    22cc:	88 e5       	ldi	r24, 0x58	; 88
    22ce:	90 e0       	ldi	r25, 0x00	; 0
    22d0:	0b c0       	rjmp	.+22     	; 0x22e8 <__stack+0x1e9>
    22d2:	80 2f       	mov	r24, r16
    22d4:	86 78       	andi	r24, 0x86	; 134
    22d6:	81 f0       	breq	.+32     	; 0x22f8 <__stack+0x1f9>
    22d8:	01 ff       	sbrs	r16, 1
    22da:	02 c0       	rjmp	.+4      	; 0x22e0 <__stack+0x1e1>
    22dc:	8b e2       	ldi	r24, 0x2B	; 43
    22de:	01 c0       	rjmp	.+2      	; 0x22e2 <__stack+0x1e3>
    22e0:	80 e2       	ldi	r24, 0x20	; 32
    22e2:	f7 fc       	sbrc	r15, 7
    22e4:	8d e2       	ldi	r24, 0x2D	; 45
    22e6:	90 e0       	ldi	r25, 0x00	; 0
    22e8:	b3 01       	movw	r22, r6
    22ea:	bc dd       	rcall	.-1160   	; 0x1e64 <fputc>
    22ec:	05 c0       	rjmp	.+10     	; 0x22f8 <__stack+0x1f9>
    22ee:	80 e3       	ldi	r24, 0x30	; 48
    22f0:	90 e0       	ldi	r25, 0x00	; 0
    22f2:	b3 01       	movw	r22, r6
    22f4:	b7 dd       	rcall	.-1170   	; 0x1e64 <fputc>
    22f6:	9a 94       	dec	r9
    22f8:	d9 14       	cp	r13, r9
    22fa:	c8 f3       	brcs	.-14     	; 0x22ee <__stack+0x1ef>
    22fc:	da 94       	dec	r13
    22fe:	f1 01       	movw	r30, r2
    2300:	ed 0d       	add	r30, r13
    2302:	f1 1d       	adc	r31, r1
    2304:	80 81       	ld	r24, Z
    2306:	90 e0       	ldi	r25, 0x00	; 0
    2308:	b3 01       	movw	r22, r6
    230a:	ac dd       	rcall	.-1192   	; 0x1e64 <fputc>
    230c:	dd 20       	and	r13, r13
    230e:	b1 f7       	brne	.-20     	; 0x22fc <__stack+0x1fd>
    2310:	05 c0       	rjmp	.+10     	; 0x231c <__stack+0x21d>
    2312:	80 e2       	ldi	r24, 0x20	; 32
    2314:	90 e0       	ldi	r25, 0x00	; 0
    2316:	b3 01       	movw	r22, r6
    2318:	a5 dd       	rcall	.-1206   	; 0x1e64 <fputc>
    231a:	ea 94       	dec	r14
    231c:	ee 20       	and	r14, r14
    231e:	c9 f7       	brne	.-14     	; 0x2312 <__stack+0x213>
    2320:	50 ce       	rjmp	.-864    	; 0x1fc2 <vfprintf+0x58>
    2322:	f3 01       	movw	r30, r6
    2324:	66 81       	ldd	r22, Z+6	; 0x06
    2326:	77 81       	ldd	r23, Z+7	; 0x07
    2328:	cb 01       	movw	r24, r22
    232a:	2b 96       	adiw	r28, 0x0b	; 11
    232c:	0f b6       	in	r0, 0x3f	; 63
    232e:	f8 94       	cli
    2330:	de bf       	out	0x3e, r29	; 62
    2332:	0f be       	out	0x3f, r0	; 63
    2334:	cd bf       	out	0x3d, r28	; 61
    2336:	cf 91       	pop	r28
    2338:	df 91       	pop	r29
    233a:	1f 91       	pop	r17
    233c:	0f 91       	pop	r16
    233e:	ff 90       	pop	r15
    2340:	ef 90       	pop	r14
    2342:	df 90       	pop	r13
    2344:	cf 90       	pop	r12
    2346:	bf 90       	pop	r11
    2348:	af 90       	pop	r10
    234a:	9f 90       	pop	r9
    234c:	8f 90       	pop	r8
    234e:	7f 90       	pop	r7
    2350:	6f 90       	pop	r6
    2352:	5f 90       	pop	r5
    2354:	4f 90       	pop	r4
    2356:	3f 90       	pop	r3
    2358:	2f 90       	pop	r2
    235a:	08 95       	ret

0000235c <__ctype_isfalse>:
    235c:	99 27       	eor	r25, r25
    235e:	88 27       	eor	r24, r24

00002360 <__ctype_istrue>:
    2360:	08 95       	ret

00002362 <strnlen_P>:
    2362:	fc 01       	movw	r30, r24
    2364:	05 90       	lpm	r0, Z+
    2366:	61 50       	subi	r22, 0x01	; 1
    2368:	70 40       	sbci	r23, 0x00	; 0
    236a:	01 10       	cpse	r0, r1
    236c:	d8 f7       	brcc	.-10     	; 0x2364 <strnlen_P+0x2>
    236e:	80 95       	com	r24
    2370:	90 95       	com	r25
    2372:	8e 0f       	add	r24, r30
    2374:	9f 1f       	adc	r25, r31
    2376:	08 95       	ret

00002378 <strnlen>:
    2378:	fc 01       	movw	r30, r24
    237a:	61 50       	subi	r22, 0x01	; 1
    237c:	70 40       	sbci	r23, 0x00	; 0
    237e:	01 90       	ld	r0, Z+
    2380:	01 10       	cpse	r0, r1
    2382:	d8 f7       	brcc	.-10     	; 0x237a <strnlen+0x2>
    2384:	80 95       	com	r24
    2386:	90 95       	com	r25
    2388:	8e 0f       	add	r24, r30
    238a:	9f 1f       	adc	r25, r31
    238c:	08 95       	ret

0000238e <__ultoa_invert>:
    238e:	fa 01       	movw	r30, r20
    2390:	aa 27       	eor	r26, r26
    2392:	28 30       	cpi	r18, 0x08	; 8
    2394:	51 f1       	breq	.+84     	; 0x23ea <__ultoa_invert+0x5c>
    2396:	20 31       	cpi	r18, 0x10	; 16
    2398:	81 f1       	breq	.+96     	; 0x23fa <__ultoa_invert+0x6c>
    239a:	e8 94       	clt
    239c:	6f 93       	push	r22
    239e:	6e 7f       	andi	r22, 0xFE	; 254
    23a0:	6e 5f       	subi	r22, 0xFE	; 254
    23a2:	7f 4f       	sbci	r23, 0xFF	; 255
    23a4:	8f 4f       	sbci	r24, 0xFF	; 255
    23a6:	9f 4f       	sbci	r25, 0xFF	; 255
    23a8:	af 4f       	sbci	r26, 0xFF	; 255
    23aa:	b1 e0       	ldi	r27, 0x01	; 1
    23ac:	3e d0       	rcall	.+124    	; 0x242a <__ultoa_invert+0x9c>
    23ae:	b4 e0       	ldi	r27, 0x04	; 4
    23b0:	3c d0       	rcall	.+120    	; 0x242a <__ultoa_invert+0x9c>
    23b2:	67 0f       	add	r22, r23
    23b4:	78 1f       	adc	r23, r24
    23b6:	89 1f       	adc	r24, r25
    23b8:	9a 1f       	adc	r25, r26
    23ba:	a1 1d       	adc	r26, r1
    23bc:	68 0f       	add	r22, r24
    23be:	79 1f       	adc	r23, r25
    23c0:	8a 1f       	adc	r24, r26
    23c2:	91 1d       	adc	r25, r1
    23c4:	a1 1d       	adc	r26, r1
    23c6:	6a 0f       	add	r22, r26
    23c8:	71 1d       	adc	r23, r1
    23ca:	81 1d       	adc	r24, r1
    23cc:	91 1d       	adc	r25, r1
    23ce:	a1 1d       	adc	r26, r1
    23d0:	20 d0       	rcall	.+64     	; 0x2412 <__ultoa_invert+0x84>
    23d2:	09 f4       	brne	.+2      	; 0x23d6 <__ultoa_invert+0x48>
    23d4:	68 94       	set
    23d6:	3f 91       	pop	r19
    23d8:	2a e0       	ldi	r18, 0x0A	; 10
    23da:	26 9f       	mul	r18, r22
    23dc:	11 24       	eor	r1, r1
    23de:	30 19       	sub	r19, r0
    23e0:	30 5d       	subi	r19, 0xD0	; 208
    23e2:	31 93       	st	Z+, r19
    23e4:	de f6       	brtc	.-74     	; 0x239c <__ultoa_invert+0xe>
    23e6:	cf 01       	movw	r24, r30
    23e8:	08 95       	ret
    23ea:	46 2f       	mov	r20, r22
    23ec:	47 70       	andi	r20, 0x07	; 7
    23ee:	40 5d       	subi	r20, 0xD0	; 208
    23f0:	41 93       	st	Z+, r20
    23f2:	b3 e0       	ldi	r27, 0x03	; 3
    23f4:	0f d0       	rcall	.+30     	; 0x2414 <__ultoa_invert+0x86>
    23f6:	c9 f7       	brne	.-14     	; 0x23ea <__ultoa_invert+0x5c>
    23f8:	f6 cf       	rjmp	.-20     	; 0x23e6 <__ultoa_invert+0x58>
    23fa:	46 2f       	mov	r20, r22
    23fc:	4f 70       	andi	r20, 0x0F	; 15
    23fe:	40 5d       	subi	r20, 0xD0	; 208
    2400:	4a 33       	cpi	r20, 0x3A	; 58
    2402:	18 f0       	brcs	.+6      	; 0x240a <__ultoa_invert+0x7c>
    2404:	49 5d       	subi	r20, 0xD9	; 217
    2406:	31 fd       	sbrc	r19, 1
    2408:	40 52       	subi	r20, 0x20	; 32
    240a:	41 93       	st	Z+, r20
    240c:	02 d0       	rcall	.+4      	; 0x2412 <__ultoa_invert+0x84>
    240e:	a9 f7       	brne	.-22     	; 0x23fa <__ultoa_invert+0x6c>
    2410:	ea cf       	rjmp	.-44     	; 0x23e6 <__ultoa_invert+0x58>
    2412:	b4 e0       	ldi	r27, 0x04	; 4
    2414:	a6 95       	lsr	r26
    2416:	97 95       	ror	r25
    2418:	87 95       	ror	r24
    241a:	77 95       	ror	r23
    241c:	67 95       	ror	r22
    241e:	ba 95       	dec	r27
    2420:	c9 f7       	brne	.-14     	; 0x2414 <__ultoa_invert+0x86>
    2422:	00 97       	sbiw	r24, 0x00	; 0
    2424:	61 05       	cpc	r22, r1
    2426:	71 05       	cpc	r23, r1
    2428:	08 95       	ret
    242a:	9b 01       	movw	r18, r22
    242c:	ac 01       	movw	r20, r24
    242e:	0a 2e       	mov	r0, r26
    2430:	06 94       	lsr	r0
    2432:	57 95       	ror	r21
    2434:	47 95       	ror	r20
    2436:	37 95       	ror	r19
    2438:	27 95       	ror	r18
    243a:	ba 95       	dec	r27
    243c:	c9 f7       	brne	.-14     	; 0x2430 <__ultoa_invert+0xa2>
    243e:	62 0f       	add	r22, r18
    2440:	73 1f       	adc	r23, r19
    2442:	84 1f       	adc	r24, r20
    2444:	95 1f       	adc	r25, r21
    2446:	a0 1d       	adc	r26, r0
    2448:	08 95       	ret

0000244a <_exit>:
    244a:	f8 94       	cli

0000244c <__stop_program>:
    244c:	ff cf       	rjmp	.-2      	; 0x244c <__stop_program>
