
StillImageHost.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000003a  00800100  00001df4  00001e88  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001df4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000013  0080013a  0080013a  00001ec2  2**0
                  ALLOC
  3 .stab         00001014  00000000  00000000  00001ec4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000315  00000000  00000000  00002ed8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000006d0  00000000  00000000  000031ed  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000e86  00000000  00000000  000038bd  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000ac1e  00000000  00000000  00004743  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00002acb  00000000  00000000  0000f361  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00007515  00000000  00000000  00011e2c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000aa0  00000000  00000000  00019344  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00004242  00000000  00000000  00019de4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00004f12  00000000  00000000  0001e026  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000768  00000000  00000000  00022f38  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
}

uint8_t USB_Host_GetDeviceStringDescriptor(const uint8_t Index,
                                           void* const Buffer,
                                           const uint8_t BufferLength)
{
       0:	64 c1       	rjmp	.+712    	; 0x2ca <__ctors_end>
{
	USB_GetNextDescriptorOfType(BytesRem, CurrConfigLoc, AfterType);

	if (*BytesRem)
	  USB_GetNextDescriptorOfType(BytesRem, CurrConfigLoc, Type);
}
       2:	00 00       	nop
			Length--;
		}
	}

	return PIPE_RWSTREAM_NoError;
}
       4:	80 c1       	rjmp	.+768    	; 0x306 <__bad_interrupt>

	return ErrorCode;
}

bool SI_Host_IsEventReceived(USB_ClassInfo_SI_Host_t* const SIInterfaceInfo)
{
       6:	00 00       	nop
       8:	7e c1       	rjmp	.+764    	; 0x306 <__bad_interrupt>
       a:	00 00       	nop
       c:	7c c1       	rjmp	.+760    	; 0x306 <__bad_interrupt>
       e:	00 00       	nop
      10:	7a c1       	rjmp	.+756    	; 0x306 <__bad_interrupt>
      12:	00 00       	nop
      14:	78 c1       	rjmp	.+752    	; 0x306 <__bad_interrupt>
      16:	00 00       	nop
      18:	76 c1       	rjmp	.+748    	; 0x306 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	74 c1       	rjmp	.+744    	; 0x306 <__bad_interrupt>
      1e:	00 00       	nop
      20:	72 c1       	rjmp	.+740    	; 0x306 <__bad_interrupt>
      22:	00 00       	nop
      24:	70 c1       	rjmp	.+736    	; 0x306 <__bad_interrupt>
      26:	00 00       	nop
      28:	b0 c5       	rjmp	.+2912   	; 0xb8a <__vector_10>
      2a:	00 00       	nop
      2c:	6c c1       	rjmp	.+728    	; 0x306 <__bad_interrupt>
      2e:	00 00       	nop
      30:	6a c1       	rjmp	.+724    	; 0x306 <__bad_interrupt>
      32:	00 00       	nop
      34:	68 c1       	rjmp	.+720    	; 0x306 <__bad_interrupt>
      36:	00 00       	nop
      38:	66 c1       	rjmp	.+716    	; 0x306 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	64 c1       	rjmp	.+712    	; 0x306 <__bad_interrupt>
      3e:	00 00       	nop
      40:	62 c1       	rjmp	.+708    	; 0x306 <__bad_interrupt>
      42:	00 00       	nop
      44:	60 c1       	rjmp	.+704    	; 0x306 <__bad_interrupt>
      46:	00 00       	nop
      48:	5e c1       	rjmp	.+700    	; 0x306 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	5c c1       	rjmp	.+696    	; 0x306 <__bad_interrupt>
      4e:	00 00       	nop
      50:	5a c1       	rjmp	.+692    	; 0x306 <__bad_interrupt>
      52:	00 00       	nop
      54:	58 c1       	rjmp	.+688    	; 0x306 <__bad_interrupt>
      56:	00 00       	nop
      58:	56 c1       	rjmp	.+684    	; 0x306 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	54 c1       	rjmp	.+680    	; 0x306 <__bad_interrupt>
      5e:	00 00       	nop
      60:	52 c1       	rjmp	.+676    	; 0x306 <__bad_interrupt>
      62:	00 00       	nop
      64:	50 c1       	rjmp	.+672    	; 0x306 <__bad_interrupt>
      66:	00 00       	nop
      68:	4e c1       	rjmp	.+668    	; 0x306 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	4c c1       	rjmp	.+664    	; 0x306 <__bad_interrupt>
      6e:	00 00       	nop
      70:	4a c1       	rjmp	.+660    	; 0x306 <__bad_interrupt>
      72:	00 00       	nop
      74:	48 c1       	rjmp	.+656    	; 0x306 <__bad_interrupt>
      76:	00 00       	nop
      78:	46 c1       	rjmp	.+652    	; 0x306 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	44 c1       	rjmp	.+648    	; 0x306 <__bad_interrupt>
      7e:	00 00       	nop
      80:	42 c1       	rjmp	.+644    	; 0x306 <__bad_interrupt>
      82:	00 00       	nop
      84:	40 c1       	rjmp	.+640    	; 0x306 <__bad_interrupt>
      86:	00 00       	nop
      88:	3e c1       	rjmp	.+636    	; 0x306 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	3c c1       	rjmp	.+632    	; 0x306 <__bad_interrupt>
      8e:	00 00       	nop
      90:	3a c1       	rjmp	.+628    	; 0x306 <__bad_interrupt>
      92:	00 00       	nop
      94:	38 c1       	rjmp	.+624    	; 0x306 <__bad_interrupt>
      96:	00 00       	nop

00000098 <__c.4165>:
      98:	1b 5b 33 31 6d 44 65 76 20 45 6e 75 6d 20 45 72     .[31mDev Enum Er
      a8:	72 6f 72 0d 0a 20 2d 2d 20 45 72 72 6f 72 20 43     ror.. -- Error C
      b8:	6f 64 65 20 25 64 0d 0a 20 2d 2d 20 53 75 62 20     ode %d.. -- Sub 
      c8:	45 72 72 6f 72 20 43 6f 64 65 20 25 64 0d 0a 20     Error Code %d.. 
      d8:	2d 2d 20 49 6e 20 53 74 61 74 65 20 25 64 0d 0a     -- In State %d..
      e8:	1b 5b 33 37 6d 00                                   .[37m.

000000ee <__c.4157>:
      ee:	1b 5b 33 31 6d 48 6f 73 74 20 4d 6f 64 65 20 45     .[31mHost Mode E
      fe:	72 72 6f 72 0d 0a 20 2d 2d 20 45 72 72 6f 72 20     rror.. -- Error 
     10e:	43 6f 64 65 20 25 64 0d 0a 1b 5b 33 37 6d 00        Code %d...[37m.

0000011d <__c.4149>:
     11d:	0d 0a 44 65 76 69 63 65 20 55 6e 61 74 74 61 63     ..Device Unattac
     12d:	68 65 64 2e 0d 0a 00                                hed....

00000134 <__c.4144>:
     134:	44 65 76 69 63 65 20 41 74 74 61 63 68 65 64 2e     Device Attached.
     144:	0d 0a 00                                            ...

00000147 <__c.4120>:
     147:	43 6f 75 6c 64 20 6e 6f 74 20 63 6c 6f 73 65 20     Could not close 
     157:	50 49 4d 41 20 73 65 73 73 69 6f 6e 2e 0d 0a 00     PIMA session....

00000167 <__c.4118>:
     167:	43 6c 6f 73 69 6e 67 20 53 65 73 73 69 6f 6e 2e     Closing Session.
     177:	2e 2e 0d 0a 00                                      .....

0000017c <__c.4116>:
     17c:	44 65 76 69 63 65 20 4f 66 66 2e 0d 0a 00           Device Off....

0000018a <__c.4114>:
     18a:	43 6f 75 6c 64 20 6e 6f 74 20 74 75 72 6e 20 6f     Could not turn o
     19a:	66 66 20 64 65 76 69 63 65 2e 0d 0a 00              ff device....

000001a7 <__c.4112>:
     1a7:	54 75 72 6e 69 6e 67 20 6f 66 66 20 44 65 76 69     Turning off Devi
     1b7:	63 65 2e 2e 2e 0d 0a 00                             ce......

000001bf <__c.4110>:
     1bf:	43 6f 75 6c 64 20 6e 6f 74 20 6f 70 65 6e 20 50     Could not open P
     1cf:	49 4d 41 20 73 65 73 73 69 6f 6e 2e 0d 0a 00        IMA session....

000001de <__c.4108>:
     1de:	4f 70 65 6e 69 6e 67 20 53 65 73 73 69 6f 6e 2e     Opening Session.
     1ee:	2e 2e 0d 0a 00                                      .....

000001f3 <__c.4105>:
     1f3:	53 74 69 6c 6c 20 49 6d 61 67 65 20 44 65 76 69     Still Image Devi
     203:	63 65 20 45 6e 75 6d 65 72 61 74 65 64 2e 0d 0a     ce Enumerated...
     213:	00                                                  .

00000214 <__c.4103>:
     214:	45 72 72 6f 72 20 53 65 74 74 69 6e 67 20 44 65     Error Setting De
     224:	76 69 63 65 20 43 6f 6e 66 69 67 75 72 61 74 69     vice Configurati
     234:	6f 6e 2e 0d 0a 00                                   on....

0000023a <__c.4101>:
     23a:	41 74 74 61 63 68 65 64 20 44 65 76 69 63 65 20     Attached Device 
     24a:	4e 6f 74 20 61 20 56 61 6c 69 64 20 53 74 69 6c     Not a Valid Stil
     25a:	6c 20 49 6d 61 67 65 20 43 6c 61 73 73 20 44 65     l Image Class De
     26a:	76 69 63 65 2e 0d 0a 00                             vice....

00000272 <__c.4098>:
     272:	45 72 72 6f 72 20 52 65 74 72 69 65 76 69 6e 67     Error Retrieving
     282:	20 43 6f 6e 66 69 67 75 72 61 74 69 6f 6e 20 44      Configuration D
     292:	65 73 63 72 69 70 74 6f 72 2e 0d 0a 00              escriptor....

0000029f <__c.4093>:
     29f:	1b 5b 33 36 6d 53 74 69 6c 6c 20 49 6d 61 67 65     .[36mStill Image
     2af:	20 48 6f 73 74 20 44 65 6d 6f 20 72 75 6e 6e 69      Host Demo runni
     2bf:	6e 67 2e 0d 0a 1b 5b 33 37 6d 00                    ng....[37m.

000002ca <__ctors_end>:
     2ca:	11 24       	eor	r1, r1
     2cc:	1f be       	out	0x3f, r1	; 63
     2ce:	cf ef       	ldi	r28, 0xFF	; 255
     2d0:	d0 e2       	ldi	r29, 0x20	; 32
     2d2:	de bf       	out	0x3e, r29	; 62
     2d4:	cd bf       	out	0x3d, r28	; 61

000002d6 <__do_copy_data>:
     2d6:	11 e0       	ldi	r17, 0x01	; 1
     2d8:	a0 e0       	ldi	r26, 0x00	; 0
     2da:	b1 e0       	ldi	r27, 0x01	; 1
     2dc:	e4 ef       	ldi	r30, 0xF4	; 244
     2de:	fd e1       	ldi	r31, 0x1D	; 29
     2e0:	00 e0       	ldi	r16, 0x00	; 0
     2e2:	0b bf       	out	0x3b, r16	; 59
     2e4:	02 c0       	rjmp	.+4      	; 0x2ea <__do_copy_data+0x14>
     2e6:	07 90       	elpm	r0, Z+
     2e8:	0d 92       	st	X+, r0
     2ea:	aa 33       	cpi	r26, 0x3A	; 58
     2ec:	b1 07       	cpc	r27, r17
     2ee:	d9 f7       	brne	.-10     	; 0x2e6 <__do_copy_data+0x10>

000002f0 <__do_clear_bss>:
     2f0:	11 e0       	ldi	r17, 0x01	; 1
     2f2:	aa e3       	ldi	r26, 0x3A	; 58
     2f4:	b1 e0       	ldi	r27, 0x01	; 1
     2f6:	01 c0       	rjmp	.+2      	; 0x2fa <.do_clear_bss_start>

000002f8 <.do_clear_bss_loop>:
     2f8:	1d 92       	st	X+, r1

000002fa <.do_clear_bss_start>:
     2fa:	ad 34       	cpi	r26, 0x4D	; 77
     2fc:	b1 07       	cpc	r27, r17
     2fe:	e1 f7       	brne	.-8      	; 0x2f8 <.do_clear_bss_loop>
     300:	98 d0       	rcall	.+304    	; 0x432 <main>
     302:	0c 94 f8 0e 	jmp	0x1df0	; 0x1df0 <_exit>

00000306 <__bad_interrupt>:
     306:	7c ce       	rjmp	.-776    	; 0x0 <__vectors>

00000308 <EVENT_USB_Host_DeviceEnumerationComplete>:
				PORTD &= ~LEDMask;
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
			{
				PORTD = ((PORTD & ~LEDS_ALL_LEDS) | LEDMask);
     308:	8b b1       	in	r24, 0x0b	; 11
     30a:	8f 70       	andi	r24, 0x0F	; 15
     30c:	80 66       	ori	r24, 0x60	; 96
     30e:	8b b9       	out	0x0b, r24	; 11
 *  enumerated by the host and is now ready to be used by the application.
 */
void EVENT_USB_Host_DeviceEnumerationComplete(void)
{
	LEDs_SetAllLEDs(LEDMASK_USB_READY);
}
     310:	08 95       	ret

00000312 <EVENT_USB_Host_DeviceEnumerationFailed>:
 *  enumerating an attached USB device.
 */
void EVENT_USB_Host_DeviceEnumerationFailed(const uint8_t ErrorCode,
                                            const uint8_t SubErrorCode)
{
	printf_P(PSTR(ESC_FG_RED "Dev Enum Error\r\n"
     312:	90 91 46 01 	lds	r25, 0x0146
     316:	2d b7       	in	r18, 0x3d	; 61
     318:	3e b7       	in	r19, 0x3e	; 62
     31a:	28 50       	subi	r18, 0x08	; 8
     31c:	30 40       	sbci	r19, 0x00	; 0
     31e:	0f b6       	in	r0, 0x3f	; 63
     320:	f8 94       	cli
     322:	3e bf       	out	0x3e, r19	; 62
     324:	0f be       	out	0x3f, r0	; 63
     326:	2d bf       	out	0x3d, r18	; 61
     328:	ed b7       	in	r30, 0x3d	; 61
     32a:	fe b7       	in	r31, 0x3e	; 62
     32c:	31 96       	adiw	r30, 0x01	; 1
     32e:	28 e9       	ldi	r18, 0x98	; 152
     330:	30 e0       	ldi	r19, 0x00	; 0
     332:	ad b7       	in	r26, 0x3d	; 61
     334:	be b7       	in	r27, 0x3e	; 62
     336:	12 96       	adiw	r26, 0x02	; 2
     338:	3c 93       	st	X, r19
     33a:	2e 93       	st	-X, r18
     33c:	11 97       	sbiw	r26, 0x01	; 1
     33e:	82 83       	std	Z+2, r24	; 0x02
     340:	13 82       	std	Z+3, r1	; 0x03
     342:	64 83       	std	Z+4, r22	; 0x04
     344:	15 82       	std	Z+5, r1	; 0x05
     346:	96 83       	std	Z+6, r25	; 0x06
     348:	17 82       	std	Z+7, r1	; 0x07
     34a:	0e 94 08 0c 	call	0x1810	; 0x1810 <printf_P>
     34e:	8b b1       	in	r24, 0x0b	; 11
     350:	8f 70       	andi	r24, 0x0F	; 15
     352:	80 69       	ori	r24, 0x90	; 144
     354:	8b b9       	out	0x0b, r24	; 11
     356:	2d b7       	in	r18, 0x3d	; 61
     358:	3e b7       	in	r19, 0x3e	; 62
     35a:	28 5f       	subi	r18, 0xF8	; 248
     35c:	3f 4f       	sbci	r19, 0xFF	; 255
     35e:	0f b6       	in	r0, 0x3f	; 63
     360:	f8 94       	cli
     362:	3e bf       	out	0x3e, r19	; 62
     364:	0f be       	out	0x3f, r0	; 63
     366:	2d bf       	out	0x3d, r18	; 61
	                         " -- Error Code %d\r\n"
	                         " -- Sub Error Code %d\r\n"
	                         " -- In State %d\r\n" ESC_FG_WHITE), ErrorCode, SubErrorCode, USB_HostState);

	LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
}
     368:	08 95       	ret

0000036a <EVENT_USB_Host_HostError>:
	LEDs_SetAllLEDs(LEDMASK_USB_READY);
}

/** Event handler for the USB_HostError event. This indicates that a hardware error occurred while in host mode. */
void EVENT_USB_Host_HostError(const uint8_t ErrorCode)
{
     36a:	1f 93       	push	r17
     36c:	18 2f       	mov	r17, r24
	USB_ShutDown();
     36e:	e8 d3       	rcall	.+2000   	; 0xb40 <USB_ShutDown>

	printf_P(PSTR(ESC_FG_RED "Host Mode Error\r\n"
     370:	00 d0       	rcall	.+0      	; 0x372 <EVENT_USB_Host_HostError+0x8>
     372:	00 d0       	rcall	.+0      	; 0x374 <EVENT_USB_Host_HostError+0xa>
     374:	ed b7       	in	r30, 0x3d	; 61
     376:	fe b7       	in	r31, 0x3e	; 62
     378:	31 96       	adiw	r30, 0x01	; 1
     37a:	8e ee       	ldi	r24, 0xEE	; 238
     37c:	90 e0       	ldi	r25, 0x00	; 0
     37e:	ad b7       	in	r26, 0x3d	; 61
     380:	be b7       	in	r27, 0x3e	; 62
     382:	12 96       	adiw	r26, 0x02	; 2
     384:	9c 93       	st	X, r25
     386:	8e 93       	st	-X, r24
     388:	11 97       	sbiw	r26, 0x01	; 1
     38a:	12 83       	std	Z+2, r17	; 0x02
     38c:	13 82       	std	Z+3, r1	; 0x03
     38e:	0e 94 08 0c 	call	0x1810	; 0x1810 <printf_P>
     392:	8b b1       	in	r24, 0x0b	; 11
     394:	8f 70       	andi	r24, 0x0F	; 15
     396:	80 69       	ori	r24, 0x90	; 144
     398:	8b b9       	out	0x0b, r24	; 11
     39a:	0f 90       	pop	r0
     39c:	0f 90       	pop	r0
     39e:	0f 90       	pop	r0
     3a0:	0f 90       	pop	r0
     3a2:	ff cf       	rjmp	.-2      	; 0x3a2 <EVENT_USB_Host_HostError+0x38>

000003a4 <EVENT_USB_Host_DeviceUnattached>:
/** Event handler for the USB_DeviceUnattached event. This indicates that a device has been removed from the host, and
 *  stops the library USB task management process.
 */
void EVENT_USB_Host_DeviceUnattached(void)
{
	puts_P(PSTR("\r\nDevice Unattached.\r\n"));
     3a4:	8d e1       	ldi	r24, 0x1D	; 29
     3a6:	91 e0       	ldi	r25, 0x01	; 1
     3a8:	0e 94 2a 0c 	call	0x1854	; 0x1854 <puts_P>
     3ac:	8b b1       	in	r24, 0x0b	; 11
     3ae:	8f 70       	andi	r24, 0x0F	; 15
     3b0:	80 61       	ori	r24, 0x10	; 16
     3b2:	8b b9       	out	0x0b, r24	; 11
	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
}
     3b4:	08 95       	ret

000003b6 <EVENT_USB_Host_DeviceAttached>:
/** Event handler for the USB_DeviceAttached event. This indicates that a device has been attached to the host, and
 *  starts the library USB task to begin the enumeration and USB management process.
 */
void EVENT_USB_Host_DeviceAttached(void)
{
	puts_P(PSTR("Device Attached.\r\n"));
     3b6:	84 e3       	ldi	r24, 0x34	; 52
     3b8:	91 e0       	ldi	r25, 0x01	; 1
     3ba:	0e 94 2a 0c 	call	0x1854	; 0x1854 <puts_P>
     3be:	8b b1       	in	r24, 0x0b	; 11
     3c0:	8f 70       	andi	r24, 0x0F	; 15
     3c2:	80 6a       	ori	r24, 0xA0	; 160
     3c4:	8b b9       	out	0x0b, r24	; 11
	LEDs_SetAllLEDs(LEDMASK_USB_ENUMERATING);
}
     3c6:	08 95       	ret

000003c8 <SetupHardware>:

/** Configures the board hardware and chip peripherals for the demo's functionality. */
void SetupHardware(void)
{
	/* Disable watchdog if enabled by bootloader/fuses */
	MCUSR &= ~(1 << WDRF);
     3c8:	84 b7       	in	r24, 0x34	; 52
     3ca:	87 7f       	andi	r24, 0xF7	; 247
     3cc:	84 bf       	out	0x34, r24	; 52
	wdt_disable();
     3ce:	38 e1       	ldi	r19, 0x18	; 24
     3d0:	0f b6       	in	r0, 0x3f	; 63
     3d2:	f8 94       	cli
     3d4:	30 93 60 00 	sts	0x0060, r19
     3d8:	10 92 60 00 	sts	0x0060, r1
     3dc:	0f be       	out	0x3f, r0	; 63

	/* Disable clock division */
	clock_prescale_set(clock_div_1);
     3de:	80 e0       	ldi	r24, 0x00	; 0
     3e0:	90 e0       	ldi	r25, 0x00	; 0
     3e2:	20 e8       	ldi	r18, 0x80	; 128
     3e4:	0f b6       	in	r0, 0x3f	; 63
     3e6:	f8 94       	cli
     3e8:	20 93 61 00 	sts	0x0061, r18
     3ec:	80 93 61 00 	sts	0x0061, r24
     3f0:	0f be       	out	0x3f, r0	; 63
			 *  \param[in] DoubleSpeed  Enables double speed mode when set, halving the sample time to double the baud rate.
			 */
			static inline void Serial_Init(const uint32_t BaudRate,
			                               const bool DoubleSpeed)
			{
				UBRR1  = (DoubleSpeed ? SERIAL_2X_UBBRVAL(BaudRate) : SERIAL_UBBRVAL(BaudRate));
     3f2:	83 e3       	ldi	r24, 0x33	; 51
     3f4:	90 e0       	ldi	r25, 0x00	; 0
     3f6:	90 93 cd 00 	sts	0x00CD, r25
     3fa:	80 93 cc 00 	sts	0x00CC, r24

				UCSR1C = ((1 << UCSZ11) | (1 << UCSZ10));
     3fe:	86 e0       	ldi	r24, 0x06	; 6
     400:	80 93 ca 00 	sts	0x00CA, r24
				UCSR1A = (DoubleSpeed ? (1 << U2X1) : 0);
     404:	10 92 c8 00 	sts	0x00C8, r1
				UCSR1B = ((1 << TXEN1)  | (1 << RXEN1));
     408:	30 93 c9 00 	sts	0x00C9, r19

				DDRD  |= (1 << 3);
     40c:	53 9a       	sbi	0x0a, 3	; 10
				PORTD |= (1 << 2);
     40e:	5a 9a       	sbi	0x0b, 2	; 11
			static inline void SerialStream_Init(const uint32_t BaudRate,
			                                     const bool DoubleSpeed)
			{
				Serial_Init(BaudRate, DoubleSpeed);

				stdout = &USARTStream;
     410:	8c e2       	ldi	r24, 0x2C	; 44
     412:	91 e0       	ldi	r25, 0x01	; 1
     414:	90 93 4a 01 	sts	0x014A, r25
     418:	80 93 49 01 	sts	0x0149, r24
				stdin  = &USARTStream;
     41c:	90 93 48 01 	sts	0x0148, r25
     420:	80 93 47 01 	sts	0x0147, r24

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void LEDs_Init(void)
			{
				DDRD  |=  LEDS_ALL_LEDS;
     424:	8a b1       	in	r24, 0x0a	; 10
     426:	80 6f       	ori	r24, 0xF0	; 240
     428:	8a b9       	out	0x0a, r24	; 10
				PORTD &= ~LEDS_ALL_LEDS;
     42a:	8b b1       	in	r24, 0x0b	; 11
     42c:	8f 70       	andi	r24, 0x0F	; 15
     42e:	8b b9       	out	0x0b, r24	; 11

	/* Hardware Initialization */
	SerialStream_Init(9600, false);
	LEDs_Init();
	USB_Init();
}
     430:	7e c3       	rjmp	.+1788   	; 0xb2e <USB_Init>

00000432 <main>:

/** Main program entry point. This routine configures the hardware required by the application, then
 *  enters a loop to run the application tasks in sequence.
 */
int main(void)
{
     432:	df 92       	push	r13
     434:	ef 92       	push	r14
     436:	ff 92       	push	r15
     438:	0f 93       	push	r16
     43a:	1f 93       	push	r17
     43c:	df 93       	push	r29
     43e:	cf 93       	push	r28
     440:	cd b7       	in	r28, 0x3d	; 61
     442:	de b7       	in	r29, 0x3e	; 62
     444:	c2 50       	subi	r28, 0x02	; 2
     446:	d2 40       	sbci	r29, 0x02	; 2
     448:	0f b6       	in	r0, 0x3f	; 63
     44a:	f8 94       	cli
     44c:	de bf       	out	0x3e, r29	; 62
     44e:	0f be       	out	0x3f, r0	; 63
     450:	cd bf       	out	0x3d, r28	; 61
	SetupHardware();
     452:	ba df       	rcall	.-140    	; 0x3c8 <SetupHardware>

	puts_P(PSTR(ESC_FG_CYAN "Still Image Host Demo running.\r\n" ESC_FG_WHITE));
     454:	8f e9       	ldi	r24, 0x9F	; 159
     456:	92 e0       	ldi	r25, 0x02	; 2
     458:	0e 94 2a 0c 	call	0x1854	; 0x1854 <puts_P>
				PORTD &= ~LEDMask;
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
			{
				PORTD = ((PORTD & ~LEDS_ALL_LEDS) | LEDMask);
     45c:	8b b1       	in	r24, 0x0b	; 11
     45e:	8f 70       	andi	r24, 0x0F	; 15
     460:	80 61       	ori	r24, 0x10	; 16
     462:	8b b9       	out	0x0b, r24	; 11

	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
	sei();
     464:	78 94       	sei
				LEDs_SetAllLEDs(LEDMASK_USB_ENUMERATING);

				uint16_t ConfigDescriptorSize;
				uint8_t  ConfigDescriptorData[512];

				if (USB_Host_GetDeviceConfigDescriptor(1, &ConfigDescriptorSize, ConfigDescriptorData,
     466:	8e 01       	movw	r16, r28
     468:	0d 5f       	subi	r16, 0xFD	; 253
     46a:	1f 4f       	sbci	r17, 0xFF	; 255
     46c:	7e 01       	movw	r14, r28
     46e:	08 94       	sec
     470:	e1 1c       	adc	r14, r1
     472:	f1 1c       	adc	r15, r1
					break;
				}

				puts_P(PSTR("Still Image Device Enumerated.\r\n"));
				LEDs_SetAllLEDs(LEDMASK_USB_READY);
				USB_HostState = HOST_STATE_Configured;
     474:	8c e0       	ldi	r24, 0x0C	; 12
     476:	d8 2e       	mov	r13, r24
	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
	sei();

	for (;;)
	{
		switch (USB_HostState)
     478:	80 91 46 01 	lds	r24, 0x0146
     47c:	8b 30       	cpi	r24, 0x0B	; 11
     47e:	21 f0       	breq	.+8      	; 0x488 <main+0x56>
     480:	8c 30       	cpi	r24, 0x0C	; 12
     482:	09 f0       	breq	.+2      	; 0x486 <main+0x54>
     484:	6b c0       	rjmp	.+214    	; 0x55c <main+0x12a>
     486:	32 c0       	rjmp	.+100    	; 0x4ec <main+0xba>
     488:	8b b1       	in	r24, 0x0b	; 11
     48a:	8f 70       	andi	r24, 0x0F	; 15
     48c:	80 6a       	ori	r24, 0xA0	; 160
     48e:	8b b9       	out	0x0b, r24	; 11
				LEDs_SetAllLEDs(LEDMASK_USB_ENUMERATING);

				uint16_t ConfigDescriptorSize;
				uint8_t  ConfigDescriptorData[512];

				if (USB_Host_GetDeviceConfigDescriptor(1, &ConfigDescriptorSize, ConfigDescriptorData,
     490:	81 e0       	ldi	r24, 0x01	; 1
     492:	b7 01       	movw	r22, r14
     494:	a8 01       	movw	r20, r16
     496:	20 e0       	ldi	r18, 0x00	; 0
     498:	32 e0       	ldi	r19, 0x02	; 2
     49a:	4b d4       	rcall	.+2198   	; 0xd32 <USB_Host_GetDeviceConfigDescriptor>
     49c:	88 23       	and	r24, r24
     49e:	19 f0       	breq	.+6      	; 0x4a6 <main+0x74>
				                                       sizeof(ConfigDescriptorData)) != HOST_GETCONFIG_Successful)
				{
					puts_P(PSTR("Error Retrieving Configuration Descriptor.\r\n"));
     4a0:	82 e7       	ldi	r24, 0x72	; 114
     4a2:	92 e0       	ldi	r25, 0x02	; 2
     4a4:	12 c0       	rjmp	.+36     	; 0x4ca <main+0x98>
					LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
					USB_HostState = HOST_STATE_WaitForDeviceRemoval;
					break;
				}

				if (SI_Host_ConfigurePipes(&DigitalCamera_SI_Interface,
     4a6:	69 81       	ldd	r22, Y+1	; 0x01
     4a8:	7a 81       	ldd	r23, Y+2	; 0x02
     4aa:	80 e0       	ldi	r24, 0x00	; 0
     4ac:	91 e0       	ldi	r25, 0x01	; 1
     4ae:	a8 01       	movw	r20, r16
     4b0:	0e 94 e1 0a 	call	0x15c2	; 0x15c2 <SI_Host_ConfigurePipes>
     4b4:	88 23       	and	r24, r24
     4b6:	19 f0       	breq	.+6      	; 0x4be <main+0x8c>
				                           ConfigDescriptorSize, ConfigDescriptorData) != SI_ENUMERROR_NoError)
				{
					puts_P(PSTR("Attached Device Not a Valid Still Image Class Device.\r\n"));
     4b8:	8a e3       	ldi	r24, 0x3A	; 58
     4ba:	92 e0       	ldi	r25, 0x02	; 2
     4bc:	06 c0       	rjmp	.+12     	; 0x4ca <main+0x98>
					LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
					USB_HostState = HOST_STATE_WaitForDeviceRemoval;
					break;
				}

				if (USB_Host_SetDeviceConfiguration(1) != HOST_SENDCONTROL_Successful)
     4be:	81 e0       	ldi	r24, 0x01	; 1
     4c0:	ff d0       	rcall	.+510    	; 0x6c0 <USB_Host_SetDeviceConfiguration>
     4c2:	88 23       	and	r24, r24
     4c4:	41 f0       	breq	.+16     	; 0x4d6 <main+0xa4>
				{
					puts_P(PSTR("Error Setting Device Configuration.\r\n"));
     4c6:	84 e1       	ldi	r24, 0x14	; 20
     4c8:	92 e0       	ldi	r25, 0x02	; 2
     4ca:	0e 94 2a 0c 	call	0x1854	; 0x1854 <puts_P>
     4ce:	8b b1       	in	r24, 0x0b	; 11
     4d0:	8f 70       	andi	r24, 0x0F	; 15
     4d2:	80 69       	ori	r24, 0x90	; 144
     4d4:	40 c0       	rjmp	.+128    	; 0x556 <main+0x124>
					LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
					USB_HostState = HOST_STATE_WaitForDeviceRemoval;
					break;
				}

				puts_P(PSTR("Still Image Device Enumerated.\r\n"));
     4d6:	83 ef       	ldi	r24, 0xF3	; 243
     4d8:	91 e0       	ldi	r25, 0x01	; 1
     4da:	0e 94 2a 0c 	call	0x1854	; 0x1854 <puts_P>
     4de:	8b b1       	in	r24, 0x0b	; 11
     4e0:	8f 70       	andi	r24, 0x0F	; 15
     4e2:	80 66       	ori	r24, 0x60	; 96
     4e4:	8b b9       	out	0x0b, r24	; 11
				LEDs_SetAllLEDs(LEDMASK_USB_READY);
				USB_HostState = HOST_STATE_Configured;
     4e6:	d0 92 46 01 	sts	0x0146, r13
     4ea:	38 c0       	rjmp	.+112    	; 0x55c <main+0x12a>
				break;
			case HOST_STATE_Configured:
				puts_P(PSTR("Opening Session...\r\n"));
     4ec:	8e ed       	ldi	r24, 0xDE	; 222
     4ee:	91 e0       	ldi	r25, 0x01	; 1
     4f0:	0e 94 2a 0c 	call	0x1854	; 0x1854 <puts_P>

				if (SI_Host_OpenSession(&DigitalCamera_SI_Interface) != PIPE_RWSTREAM_NoError)
     4f4:	80 e0       	ldi	r24, 0x00	; 0
     4f6:	91 e0       	ldi	r25, 0x01	; 1
     4f8:	fb d7       	rcall	.+4086   	; 0x14f0 <SI_Host_OpenSession>
     4fa:	88 23       	and	r24, r24
     4fc:	19 f0       	breq	.+6      	; 0x504 <main+0xd2>
				{
					puts_P(PSTR("Could not open PIMA session.\r\n"));
     4fe:	8f eb       	ldi	r24, 0xBF	; 191
     500:	91 e0       	ldi	r25, 0x01	; 1
     502:	23 c0       	rjmp	.+70     	; 0x54a <main+0x118>
					USB_HostState = HOST_STATE_WaitForDeviceRemoval;
					break;
				}

				puts_P(PSTR("Turning off Device...\r\n"));
     504:	87 ea       	ldi	r24, 0xA7	; 167
     506:	91 e0       	ldi	r25, 0x01	; 1
     508:	0e 94 2a 0c 	call	0x1854	; 0x1854 <puts_P>

				SI_Host_SendCommand(&DigitalCamera_SI_Interface, 0x1013, 0, NULL);
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	91 e0       	ldi	r25, 0x01	; 1
     510:	63 e1       	ldi	r22, 0x13	; 19
     512:	70 e1       	ldi	r23, 0x10	; 16
     514:	40 e0       	ldi	r20, 0x00	; 0
     516:	20 e0       	ldi	r18, 0x00	; 0
     518:	30 e0       	ldi	r19, 0x00	; 0
     51a:	84 d6       	rcall	.+3336   	; 0x1224 <SI_Host_SendCommand>
				if (SI_Host_ReceiveResponse(&DigitalCamera_SI_Interface))
     51c:	80 e0       	ldi	r24, 0x00	; 0
     51e:	91 e0       	ldi	r25, 0x01	; 1
     520:	54 d7       	rcall	.+3752   	; 0x13ca <SI_Host_ReceiveResponse>
     522:	88 23       	and	r24, r24
     524:	19 f0       	breq	.+6      	; 0x52c <main+0xfa>
				{
					puts_P(PSTR("Could not turn off device.\r\n"));
     526:	8a e8       	ldi	r24, 0x8A	; 138
     528:	91 e0       	ldi	r25, 0x01	; 1
     52a:	0f c0       	rjmp	.+30     	; 0x54a <main+0x118>
					USB_HostState = HOST_STATE_WaitForDeviceRemoval;
					break;
				}

				puts_P(PSTR("Device Off.\r\n"));
     52c:	8c e7       	ldi	r24, 0x7C	; 124
     52e:	91 e0       	ldi	r25, 0x01	; 1
     530:	0e 94 2a 0c 	call	0x1854	; 0x1854 <puts_P>

				puts_P(PSTR("Closing Session...\r\n"));
     534:	87 e6       	ldi	r24, 0x67	; 103
     536:	91 e0       	ldi	r25, 0x01	; 1
     538:	0e 94 2a 0c 	call	0x1854	; 0x1854 <puts_P>

				if (SI_Host_CloseSession(&DigitalCamera_SI_Interface) != PIPE_RWSTREAM_NoError)
     53c:	80 e0       	ldi	r24, 0x00	; 0
     53e:	91 e0       	ldi	r25, 0x01	; 1
     540:	75 d7       	rcall	.+3818   	; 0x142c <SI_Host_CloseSession>
     542:	88 23       	and	r24, r24
     544:	29 f0       	breq	.+10     	; 0x550 <main+0x11e>
				{
					puts_P(PSTR("Could not close PIMA session.\r\n"));
     546:	87 e4       	ldi	r24, 0x47	; 71
     548:	91 e0       	ldi	r25, 0x01	; 1
     54a:	0e 94 2a 0c 	call	0x1854	; 0x1854 <puts_P>
     54e:	04 c0       	rjmp	.+8      	; 0x558 <main+0x126>
     550:	8b b1       	in	r24, 0x0b	; 11
     552:	8f 70       	andi	r24, 0x0F	; 15
     554:	80 66       	ori	r24, 0x60	; 96
     556:	8b b9       	out	0x0b, r24	; 11
					USB_HostState = HOST_STATE_WaitForDeviceRemoval;
					break;
				}

				LEDs_SetAllLEDs(LEDMASK_USB_READY);
				USB_HostState = HOST_STATE_WaitForDeviceRemoval;
     558:	10 92 46 01 	sts	0x0146, r1
				break;
		}

		SI_Host_USBTask(&DigitalCamera_SI_Interface);
		USB_USBTask();
     55c:	f2 d5       	rcall	.+3044   	; 0x1142 <USB_USBTask>
     55e:	8c cf       	rjmp	.-232    	; 0x478 <main+0x46>

00000560 <USB_Host_WaitMS>:
		USB_ResetInterface();
	}
}

uint8_t USB_Host_WaitMS(uint8_t MS)
{
     560:	98 2f       	mov	r25, r24
			 *  \return Boolean true if the bus is currently suspended, false otherwise.
			 */
			static inline bool USB_Host_IsBusSuspended(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusSuspended(void)
			{
				return ((UHCON & (1 << SOFEN)) ? false : true);
     562:	20 91 9e 00 	lds	r18, 0x009E
	bool    BusSuspended = USB_Host_IsBusSuspended();
	uint8_t ErrorCode    = HOST_WAITERROR_Successful;
	bool    HSOFIEnabled = USB_INT_IsEnabled(USB_INT_HSOFI);
     566:	30 91 a0 00 	lds	r19, 0x00A0

	USB_INT_Disable(USB_INT_HSOFI);
     56a:	80 91 a0 00 	lds	r24, 0x00A0
     56e:	8f 7d       	andi	r24, 0xDF	; 223
     570:	80 93 a0 00 	sts	0x00A0, r24
	USB_INT_Clear(USB_INT_HSOFI);
     574:	80 91 9f 00 	lds	r24, 0x009F
     578:	8f 7d       	andi	r24, 0xDF	; 223
     57a:	80 93 9f 00 	sts	0x009F, r24
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
     57e:	80 91 9e 00 	lds	r24, 0x009E
     582:	81 60       	ori	r24, 0x01	; 1
     584:	80 93 9e 00 	sts	0x009E, r24
     588:	26 c0       	rjmp	.+76     	; 0x5d6 <USB_Host_WaitMS+0x76>

	USB_Host_ResumeBus();

	while (MS)
	{
		if (USB_INT_HasOccurred(USB_INT_HSOFI))
     58a:	80 91 9f 00 	lds	r24, 0x009F
     58e:	85 ff       	sbrs	r24, 5
     590:	06 c0       	rjmp	.+12     	; 0x59e <USB_Host_WaitMS+0x3e>
		{
			USB_INT_Clear(USB_INT_HSOFI);
     592:	80 91 9f 00 	lds	r24, 0x009F
     596:	8f 7d       	andi	r24, 0xDF	; 223
     598:	80 93 9f 00 	sts	0x009F, r24
			MS--;
     59c:	91 50       	subi	r25, 0x01	; 1
		}

		if ((USB_HostState == HOST_STATE_Unattached) || (USB_CurrentMode != USB_MODE_Host))
     59e:	80 91 46 01 	lds	r24, 0x0146
     5a2:	82 30       	cpi	r24, 0x02	; 2
     5a4:	11 f4       	brne	.+4      	; 0x5aa <USB_Host_WaitMS+0x4a>
     5a6:	91 e0       	ldi	r25, 0x01	; 1
     5a8:	18 c0       	rjmp	.+48     	; 0x5da <USB_Host_WaitMS+0x7a>
			 *  \return Boolean true if an error has occurred on the selected pipe, false otherwise.
			 */
			static inline bool Pipe_IsError(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsError(void)
			{
				return ((UPINTX & (1 << PERRI)) ? true : false);
     5aa:	80 91 a6 00 	lds	r24, 0x00A6
			ErrorCode = HOST_WAITERROR_DeviceDisconnect;

			break;
		}

		if (Pipe_IsError() == true)
     5ae:	84 ff       	sbrs	r24, 4
     5b0:	07 c0       	rjmp	.+14     	; 0x5c0 <USB_Host_WaitMS+0x60>

			/** Clears the master pipe error flag. */
			static inline void Pipe_ClearError(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearError(void)
			{
				UPINTX &= ~(1 << PERRI);
     5b2:	80 91 a6 00 	lds	r24, 0x00A6
     5b6:	8f 7e       	andi	r24, 0xEF	; 239
     5b8:	80 93 a6 00 	sts	0x00A6, r24
     5bc:	92 e0       	ldi	r25, 0x02	; 2
     5be:	0d c0       	rjmp	.+26     	; 0x5da <USB_Host_WaitMS+0x7a>
			 *  \return Boolean true if the current pipe has been stalled by the attached device, false otherwise.
			 */
			static inline bool Pipe_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsStalled(void)
			{
				return ((UPINTX & (1 << RXSTALLI)) ? true : false);
     5c0:	80 91 a6 00 	lds	r24, 0x00A6
			ErrorCode = HOST_WAITERROR_PipeError;

			break;
		}

		if (Pipe_IsStalled() == true)
     5c4:	81 ff       	sbrs	r24, 1
     5c6:	07 c0       	rjmp	.+14     	; 0x5d6 <USB_Host_WaitMS+0x76>
			 *  \ingroup Group_PipePacketManagement
			 */
			static inline void Pipe_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearStall(void)
			{
				UPINTX &= ~(1 << RXSTALLI);
     5c8:	80 91 a6 00 	lds	r24, 0x00A6
     5cc:	8d 7f       	andi	r24, 0xFD	; 253
     5ce:	80 93 a6 00 	sts	0x00A6, r24
     5d2:	93 e0       	ldi	r25, 0x03	; 3
     5d4:	02 c0       	rjmp	.+4      	; 0x5da <USB_Host_WaitMS+0x7a>
	USB_INT_Disable(USB_INT_HSOFI);
	USB_INT_Clear(USB_INT_HSOFI);

	USB_Host_ResumeBus();

	while (MS)
     5d6:	99 23       	and	r25, r25
     5d8:	c1 f6       	brne	.-80     	; 0x58a <USB_Host_WaitMS+0x2a>

			break;
		}
	}

	if (BusSuspended)
     5da:	20 fd       	sbrc	r18, 0
     5dc:	05 c0       	rjmp	.+10     	; 0x5e8 <USB_Host_WaitMS+0x88>
			 *  messages to the device.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				UHCON &= ~(1 << SOFEN);
     5de:	80 91 9e 00 	lds	r24, 0x009E
     5e2:	8e 7f       	andi	r24, 0xFE	; 254
     5e4:	80 93 9e 00 	sts	0x009E, r24
	  USB_Host_SuspendBus();

	if (HSOFIEnabled)
     5e8:	35 ff       	sbrs	r19, 5
     5ea:	05 c0       	rjmp	.+10     	; 0x5f6 <USB_Host_WaitMS+0x96>
	  USB_INT_Enable(USB_INT_HSOFI);
     5ec:	80 91 a0 00 	lds	r24, 0x00A0
     5f0:	80 62       	ori	r24, 0x20	; 32
     5f2:	80 93 a0 00 	sts	0x00A0, r24

	return ErrorCode;
}
     5f6:	89 2f       	mov	r24, r25
     5f8:	08 95       	ret

000005fa <USB_Host_ResetDevice>:
			 *  \return Boolean true if the bus is currently suspended, false otherwise.
			 */
			static inline bool USB_Host_IsBusSuspended(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusSuspended(void)
			{
				return ((UHCON & (1 << SOFEN)) ? false : true);
     5fa:	60 91 9e 00 	lds	r22, 0x009E

static void USB_Host_ResetDevice(void)
{
	bool BusSuspended = USB_Host_IsBusSuspended();

	USB_INT_Disable(USB_INT_DDISCI);
     5fe:	80 91 a0 00 	lds	r24, 0x00A0
     602:	8d 7f       	andi	r24, 0xFD	; 253
     604:	80 93 a0 00 	sts	0x00A0, r24
			 *  woken up automatically and the bus resumed after the reset has been correctly issued.
			 */
			static inline void USB_Host_ResetBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResetBus(void)
			{
				UHCON |=  (1 << RESET);
     608:	80 91 9e 00 	lds	r24, 0x009E
     60c:	82 60       	ori	r24, 0x02	; 2
     60e:	80 93 9e 00 	sts	0x009E, r24
			 *  \return Boolean true if no bus reset is currently being sent, false otherwise.
			 */
			static inline bool USB_Host_IsBusResetComplete(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusResetComplete(void)
			{
				return ((UHCON & (1 << RESET)) ? false : true);
     612:	80 91 9e 00 	lds	r24, 0x009E

	USB_Host_ResetBus();
	while (!(USB_Host_IsBusResetComplete()));
     616:	81 fd       	sbrc	r24, 1
     618:	fc cf       	rjmp	.-8      	; 0x612 <USB_Host_ResetDevice+0x18>
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
     61a:	80 91 9e 00 	lds	r24, 0x009E
     61e:	81 60       	ori	r24, 0x01	; 1
     620:	80 93 9e 00 	sts	0x009E, r24
	USB_Host_ResumeBus();

	bool HSOFIEnabled = USB_INT_IsEnabled(USB_INT_HSOFI);
     624:	30 91 a0 00 	lds	r19, 0x00A0

	USB_INT_Disable(USB_INT_HSOFI);
     628:	80 91 a0 00 	lds	r24, 0x00A0
     62c:	8f 7d       	andi	r24, 0xDF	; 223
     62e:	80 93 a0 00 	sts	0x00A0, r24
	USB_INT_Clear(USB_INT_HSOFI);
     632:	80 91 9f 00 	lds	r24, 0x009F
     636:	8f 7d       	andi	r24, 0xDF	; 223
     638:	80 93 9f 00 	sts	0x009F, r24
     63c:	2a e0       	ldi	r18, 0x0A	; 10
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     63e:	40 ed       	ldi	r20, 0xD0	; 208
     640:	57 e0       	ldi	r21, 0x07	; 7
		/* Workaround for powerless-pull-up devices. After a USB bus reset,
		   all disconnection interrupts are suppressed while a USB frame is
		   looked for - if it is found within 10ms, the device is still
		   present.                                                        */

		if (USB_INT_HasOccurred(USB_INT_HSOFI))
     642:	80 91 9f 00 	lds	r24, 0x009F
     646:	85 ff       	sbrs	r24, 5
     648:	0b c0       	rjmp	.+22     	; 0x660 <USB_Host_ResetDevice+0x66>
		{
			USB_INT_Clear(USB_INT_HSOFI);
     64a:	80 91 9f 00 	lds	r24, 0x009F
     64e:	8f 7d       	andi	r24, 0xDF	; 223
     650:	80 93 9f 00 	sts	0x009F, r24
			USB_INT_Clear(USB_INT_DDISCI);
     654:	80 91 9f 00 	lds	r24, 0x009F
     658:	8d 7f       	andi	r24, 0xFD	; 253
     65a:	80 93 9f 00 	sts	0x009F, r24
     65e:	05 c0       	rjmp	.+10     	; 0x66a <USB_Host_ResetDevice+0x70>
     660:	ca 01       	movw	r24, r20
     662:	01 97       	sbiw	r24, 0x01	; 1
     664:	f1 f7       	brne	.-4      	; 0x662 <USB_Host_ResetDevice+0x68>
	bool HSOFIEnabled = USB_INT_IsEnabled(USB_INT_HSOFI);

	USB_INT_Disable(USB_INT_HSOFI);
	USB_INT_Clear(USB_INT_HSOFI);

	for (uint8_t MSRem = 10; MSRem != 0; MSRem--)
     666:	21 50       	subi	r18, 0x01	; 1
     668:	61 f7       	brne	.-40     	; 0x642 <USB_Host_ResetDevice+0x48>
		}

		_delay_ms(1);
	}

	if (HSOFIEnabled)
     66a:	35 ff       	sbrs	r19, 5
     66c:	05 c0       	rjmp	.+10     	; 0x678 <USB_Host_ResetDevice+0x7e>
	  USB_INT_Enable(USB_INT_HSOFI);
     66e:	80 91 a0 00 	lds	r24, 0x00A0
     672:	80 62       	ori	r24, 0x20	; 32
     674:	80 93 a0 00 	sts	0x00A0, r24

	if (BusSuspended)
     678:	60 fd       	sbrc	r22, 0
     67a:	05 c0       	rjmp	.+10     	; 0x686 <USB_Host_ResetDevice+0x8c>
			 *  messages to the device.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				UHCON &= ~(1 << SOFEN);
     67c:	80 91 9e 00 	lds	r24, 0x009E
     680:	8e 7f       	andi	r24, 0xFE	; 254
     682:	80 93 9e 00 	sts	0x009E, r24
	  USB_Host_SuspendBus();

	USB_INT_Enable(USB_INT_DDISCI);
     686:	80 91 a0 00 	lds	r24, 0x00A0
     68a:	82 60       	ori	r24, 0x02	; 2
     68c:	80 93 a0 00 	sts	0x00A0, r24
}
     690:	08 95       	ret

00000692 <USB_Host_ClearPipeStall>:
	return USB_Host_SendControlRequest(Buffer);
}

uint8_t USB_Host_ClearPipeStall(const uint8_t EndpointNum)
{
	USB_ControlRequest = (USB_Request_Header_t)
     692:	92 e0       	ldi	r25, 0x02	; 2
     694:	90 93 3e 01 	sts	0x013E, r25
     698:	91 e0       	ldi	r25, 0x01	; 1
     69a:	90 93 3f 01 	sts	0x013F, r25
     69e:	10 92 41 01 	sts	0x0141, r1
     6a2:	10 92 40 01 	sts	0x0140, r1
     6a6:	80 93 42 01 	sts	0x0142, r24
     6aa:	10 92 43 01 	sts	0x0143, r1
     6ae:	10 92 45 01 	sts	0x0145, r1
     6b2:	10 92 44 01 	sts	0x0144, r1
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
     6b6:	10 92 a7 00 	sts	0x00A7, r1
			.wLength       = 0,
		};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	return USB_Host_SendControlRequest(NULL);
     6ba:	80 e0       	ldi	r24, 0x00	; 0
     6bc:	90 e0       	ldi	r25, 0x00	; 0
}
     6be:	bd c3       	rjmp	.+1914   	; 0xe3a <USB_Host_SendControlRequest>

000006c0 <USB_Host_SetDeviceConfiguration>:
	USB_INT_Enable(USB_INT_DDISCI);
}

uint8_t USB_Host_SetDeviceConfiguration(const uint8_t ConfigNumber)
{
	USB_ControlRequest = (USB_Request_Header_t)
     6c0:	10 92 3e 01 	sts	0x013E, r1
     6c4:	99 e0       	ldi	r25, 0x09	; 9
     6c6:	90 93 3f 01 	sts	0x013F, r25
     6ca:	80 93 40 01 	sts	0x0140, r24
     6ce:	10 92 41 01 	sts	0x0141, r1
     6d2:	10 92 43 01 	sts	0x0143, r1
     6d6:	10 92 42 01 	sts	0x0142, r1
     6da:	10 92 45 01 	sts	0x0145, r1
     6de:	10 92 44 01 	sts	0x0144, r1
     6e2:	10 92 a7 00 	sts	0x00A7, r1
			.wLength       = 0,
		};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	return USB_Host_SendControlRequest(NULL);
     6e6:	80 e0       	ldi	r24, 0x00	; 0
     6e8:	90 e0       	ldi	r25, 0x00	; 0
}
     6ea:	a7 c3       	rjmp	.+1870   	; 0xe3a <USB_Host_SendControlRequest>

000006ec <USB_Host_ProcessNextHostState>:

#define  __INCLUDE_FROM_HOST_C
#include "Host.h"

void USB_Host_ProcessNextHostState(void)
{
     6ec:	ef 92       	push	r14
     6ee:	0f 93       	push	r16
     6f0:	1f 93       	push	r17
     6f2:	df 93       	push	r29
     6f4:	cf 93       	push	r28
     6f6:	cd b7       	in	r28, 0x3d	; 61
     6f8:	de b7       	in	r29, 0x3e	; 62
     6fa:	28 97       	sbiw	r28, 0x08	; 8
     6fc:	0f b6       	in	r0, 0x3f	; 63
     6fe:	f8 94       	cli
     700:	de bf       	out	0x3e, r29	; 62
     702:	0f be       	out	0x3f, r0	; 63
     704:	cd bf       	out	0x3d, r28	; 61
	uint8_t SubErrorCode = HOST_ENUMERROR_NoError;

	static uint16_t WaitMSRemaining;
	static uint8_t  PostWaitState;

	switch (USB_HostState)
     706:	80 91 46 01 	lds	r24, 0x0146
     70a:	86 30       	cpi	r24, 0x06	; 6
     70c:	09 f4       	brne	.+2      	; 0x710 <USB_Host_ProcessNextHostState+0x24>
     70e:	94 c0       	rjmp	.+296    	; 0x838 <USB_Host_ProcessNextHostState+0x14c>
     710:	87 30       	cpi	r24, 0x07	; 7
     712:	70 f4       	brcc	.+28     	; 0x730 <USB_Host_ProcessNextHostState+0x44>
     714:	83 30       	cpi	r24, 0x03	; 3
     716:	c1 f1       	breq	.+112    	; 0x788 <USB_Host_ProcessNextHostState+0x9c>
     718:	84 30       	cpi	r24, 0x04	; 4
     71a:	20 f4       	brcc	.+8      	; 0x724 <USB_Host_ProcessNextHostState+0x38>
     71c:	81 30       	cpi	r24, 0x01	; 1
     71e:	09 f0       	breq	.+2      	; 0x722 <USB_Host_ProcessNextHostState+0x36>
     720:	07 c1       	rjmp	.+526    	; 0x930 <USB_Host_ProcessNextHostState+0x244>
     722:	13 c0       	rjmp	.+38     	; 0x74a <USB_Host_ProcessNextHostState+0x5e>
     724:	84 30       	cpi	r24, 0x04	; 4
     726:	c1 f1       	breq	.+112    	; 0x798 <USB_Host_ProcessNextHostState+0xac>
     728:	85 30       	cpi	r24, 0x05	; 5
     72a:	09 f0       	breq	.+2      	; 0x72e <USB_Host_ProcessNextHostState+0x42>
     72c:	01 c1       	rjmp	.+514    	; 0x930 <USB_Host_ProcessNextHostState+0x244>
     72e:	5b c0       	rjmp	.+182    	; 0x7e6 <USB_Host_ProcessNextHostState+0xfa>
     730:	88 30       	cpi	r24, 0x08	; 8
     732:	09 f4       	brne	.+2      	; 0x736 <USB_Host_ProcessNextHostState+0x4a>
     734:	9b c0       	rjmp	.+310    	; 0x86c <USB_Host_ProcessNextHostState+0x180>
     736:	88 30       	cpi	r24, 0x08	; 8
     738:	08 f4       	brcc	.+2      	; 0x73c <USB_Host_ProcessNextHostState+0x50>
     73a:	8a c0       	rjmp	.+276    	; 0x850 <USB_Host_ProcessNextHostState+0x164>
     73c:	89 30       	cpi	r24, 0x09	; 9
     73e:	09 f4       	brne	.+2      	; 0x742 <USB_Host_ProcessNextHostState+0x56>
     740:	b4 c0       	rjmp	.+360    	; 0x8aa <USB_Host_ProcessNextHostState+0x1be>
     742:	8a 30       	cpi	r24, 0x0A	; 10
     744:	09 f0       	breq	.+2      	; 0x748 <USB_Host_ProcessNextHostState+0x5c>
     746:	f4 c0       	rjmp	.+488    	; 0x930 <USB_Host_ProcessNextHostState+0x244>
     748:	d9 c0       	rjmp	.+434    	; 0x8fc <USB_Host_ProcessNextHostState+0x210>
	{
		case HOST_STATE_WaitForDevice:
			if (WaitMSRemaining)
     74a:	00 91 3b 01 	lds	r16, 0x013B
     74e:	10 91 3c 01 	lds	r17, 0x013C
     752:	01 15       	cp	r16, r1
     754:	11 05       	cpc	r17, r1
     756:	09 f4       	brne	.+2      	; 0x75a <USB_Host_ProcessNextHostState+0x6e>
     758:	eb c0       	rjmp	.+470    	; 0x930 <USB_Host_ProcessNextHostState+0x244>
			{
				if ((SubErrorCode = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
     75a:	81 e0       	ldi	r24, 0x01	; 1
     75c:	01 df       	rcall	.-510    	; 0x560 <USB_Host_WaitMS>
     75e:	68 2f       	mov	r22, r24
     760:	88 23       	and	r24, r24
     762:	31 f0       	breq	.+12     	; 0x770 <USB_Host_ProcessNextHostState+0x84>
				{
					USB_HostState = PostWaitState;
     764:	80 91 3a 01 	lds	r24, 0x013A
     768:	80 93 46 01 	sts	0x0146, r24
     76c:	91 e0       	ldi	r25, 0x01	; 1
     76e:	dc c0       	rjmp	.+440    	; 0x928 <USB_Host_ProcessNextHostState+0x23c>
					ErrorCode     = HOST_ENUMERROR_WaitStage;
					break;
				}

				if (!(--WaitMSRemaining))
     770:	c8 01       	movw	r24, r16
     772:	01 97       	sbiw	r24, 0x01	; 1
     774:	90 93 3c 01 	sts	0x013C, r25
     778:	80 93 3b 01 	sts	0x013B, r24
     77c:	89 2b       	or	r24, r25
     77e:	09 f0       	breq	.+2      	; 0x782 <USB_Host_ProcessNextHostState+0x96>
     780:	d7 c0       	rjmp	.+430    	; 0x930 <USB_Host_ProcessNextHostState+0x244>
				  USB_HostState = PostWaitState;
     782:	80 91 3a 01 	lds	r24, 0x013A
     786:	bf c0       	rjmp	.+382    	; 0x906 <USB_Host_ProcessNextHostState+0x21a>
			}

			break;
		case HOST_STATE_Powered:
			WaitMSRemaining = HOST_DEVICE_SETTLE_DELAY_MS;
     788:	88 ee       	ldi	r24, 0xE8	; 232
     78a:	93 e0       	ldi	r25, 0x03	; 3
     78c:	90 93 3c 01 	sts	0x013C, r25
     790:	80 93 3b 01 	sts	0x013B, r24

			USB_HostState = HOST_STATE_Powered_WaitForDeviceSettle;
     794:	84 e0       	ldi	r24, 0x04	; 4
     796:	b7 c0       	rjmp	.+366    	; 0x906 <USB_Host_ProcessNextHostState+0x21a>
			break;
		case HOST_STATE_Powered_WaitForDeviceSettle:
			if (WaitMSRemaining--)
     798:	80 91 3b 01 	lds	r24, 0x013B
     79c:	90 91 3c 01 	lds	r25, 0x013C
     7a0:	01 97       	sbiw	r24, 0x01	; 1
     7a2:	90 93 3c 01 	sts	0x013C, r25
     7a6:	80 93 3b 01 	sts	0x013B, r24
     7aa:	01 96       	adiw	r24, 0x01	; 1
     7ac:	29 f0       	breq	.+10     	; 0x7b8 <USB_Host_ProcessNextHostState+0xcc>
     7ae:	80 ed       	ldi	r24, 0xD0	; 208
     7b0:	97 e0       	ldi	r25, 0x07	; 7
     7b2:	01 97       	sbiw	r24, 0x01	; 1
     7b4:	f1 f7       	brne	.-4      	; 0x7b2 <USB_Host_ProcessNextHostState+0xc6>
     7b6:	bc c0       	rjmp	.+376    	; 0x930 <USB_Host_ProcessNextHostState+0x244>
			}

			static inline void USB_Host_VBUS_Manual_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Manual_Off(void)
			{
				PORTE  &= ~(1 << 7);
     7b8:	77 98       	cbi	0x0e, 7	; 14

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON  |=  (1 << OTGPADE);
     7ba:	80 91 d8 00 	lds	r24, 0x00D8
     7be:	80 61       	ori	r24, 0x10	; 16
     7c0:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_Host_VBUS_Auto_Enable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Enable(void)
			{
				OTGCON &= ~(1 << VBUSHWC);
     7c4:	80 91 dd 00 	lds	r24, 0x00DD
     7c8:	8b 7f       	andi	r24, 0xFB	; 251
     7ca:	80 93 dd 00 	sts	0x00DD, r24
				UHWCON |=  (1 << UVCONE);
     7ce:	80 91 d7 00 	lds	r24, 0x00D7
     7d2:	80 61       	ori	r24, 0x10	; 16
     7d4:	80 93 d7 00 	sts	0x00D7, r24
			}

			static inline void USB_Host_VBUS_Auto_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_On(void)
			{
				OTGCON |=  (1 << VBUSREQ);
     7d8:	80 91 dd 00 	lds	r24, 0x00DD
     7dc:	82 60       	ori	r24, 0x02	; 2
     7de:	80 93 dd 00 	sts	0x00DD, r24

				USB_OTGPAD_On();
				USB_Host_VBUS_Auto_Enable();
				USB_Host_VBUS_Auto_On();

				USB_HostState = HOST_STATE_Powered_WaitForConnect;
     7e2:	85 e0       	ldi	r24, 0x05	; 5
     7e4:	90 c0       	rjmp	.+288    	; 0x906 <USB_Host_ProcessNextHostState+0x21a>
			}

			break;
		case HOST_STATE_Powered_WaitForConnect:
			if (USB_INT_HasOccurred(USB_INT_DCONNI))
     7e6:	80 91 9f 00 	lds	r24, 0x009F
     7ea:	80 ff       	sbrs	r24, 0
     7ec:	a1 c0       	rjmp	.+322    	; 0x930 <USB_Host_ProcessNextHostState+0x244>
			{
				USB_INT_Clear(USB_INT_DCONNI);
     7ee:	80 91 9f 00 	lds	r24, 0x009F
     7f2:	8e 7f       	andi	r24, 0xFE	; 254
     7f4:	80 93 9f 00 	sts	0x009F, r24
				USB_INT_Clear(USB_INT_DDISCI);
     7f8:	80 91 9f 00 	lds	r24, 0x009F
     7fc:	8d 7f       	andi	r24, 0xFD	; 253
     7fe:	80 93 9f 00 	sts	0x009F, r24

				USB_INT_Clear(USB_INT_VBERRI);
     802:	80 91 df 00 	lds	r24, 0x00DF
     806:	8d 7f       	andi	r24, 0xFD	; 253
     808:	80 93 df 00 	sts	0x00DF, r24
				USB_INT_Enable(USB_INT_VBERRI);
     80c:	80 91 de 00 	lds	r24, 0x00DE
     810:	82 60       	ori	r24, 0x02	; 2
     812:	80 93 de 00 	sts	0x00DE, r24
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
     816:	80 91 9e 00 	lds	r24, 0x009E
     81a:	81 60       	ori	r24, 0x01	; 1
     81c:	80 93 9e 00 	sts	0x009E, r24

				USB_Host_ResumeBus();
				Pipe_ClearPipes();
     820:	c9 d0       	rcall	.+402    	; 0x9b4 <Pipe_ClearPipes>

				HOST_TASK_NONBLOCK_WAIT(100, HOST_STATE_Powered_DoReset);
     822:	81 e0       	ldi	r24, 0x01	; 1
     824:	80 93 46 01 	sts	0x0146, r24
     828:	84 e6       	ldi	r24, 0x64	; 100
     82a:	90 e0       	ldi	r25, 0x00	; 0
     82c:	90 93 3c 01 	sts	0x013C, r25
     830:	80 93 3b 01 	sts	0x013B, r24
     834:	86 e0       	ldi	r24, 0x06	; 6
     836:	5f c0       	rjmp	.+190    	; 0x8f6 <USB_Host_ProcessNextHostState+0x20a>
			}

			break;
		case HOST_STATE_Powered_DoReset:
			USB_Host_ResetDevice();
     838:	e0 de       	rcall	.-576    	; 0x5fa <USB_Host_ResetDevice>

			HOST_TASK_NONBLOCK_WAIT(200, HOST_STATE_Powered_ConfigPipe);
     83a:	81 e0       	ldi	r24, 0x01	; 1
     83c:	80 93 46 01 	sts	0x0146, r24
     840:	88 ec       	ldi	r24, 0xC8	; 200
     842:	90 e0       	ldi	r25, 0x00	; 0
     844:	90 93 3c 01 	sts	0x013C, r25
     848:	80 93 3b 01 	sts	0x013B, r24
     84c:	87 e0       	ldi	r24, 0x07	; 7
     84e:	53 c0       	rjmp	.+166    	; 0x8f6 <USB_Host_ProcessNextHostState+0x20a>
			break;
		case HOST_STATE_Powered_ConfigPipe:
			Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL,
     850:	80 e0       	ldi	r24, 0x00	; 0
     852:	60 e0       	ldi	r22, 0x00	; 0
     854:	40 e0       	ldi	r20, 0x00	; 0
     856:	20 e0       	ldi	r18, 0x00	; 0
     858:	00 e4       	ldi	r16, 0x40	; 64
     85a:	10 e0       	ldi	r17, 0x00	; 0
     85c:	ee 24       	eor	r14, r14
     85e:	74 d0       	rcall	.+232    	; 0x948 <Pipe_ConfigurePipe>
			 *  \return Boolean true if the selected pipe is configured, false otherwise.
			 */
			static inline bool Pipe_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsConfigured(void)
			{
				return ((UPSTAX & (1 << CFGOK)) ? true : false);
     860:	80 91 ac 00 	lds	r24, 0x00AC
							   PIPE_TOKEN_SETUP, ENDPOINT_CONTROLEP,
							   PIPE_CONTROLPIPE_DEFAULT_SIZE, PIPE_BANK_SINGLE);

			if (!(Pipe_IsConfigured()))
     864:	87 ff       	sbrs	r24, 7
     866:	5e c0       	rjmp	.+188    	; 0x924 <USB_Host_ProcessNextHostState+0x238>
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
				SubErrorCode = 0;
				break;
			}

			USB_HostState = HOST_STATE_Default;
     868:	88 e0       	ldi	r24, 0x08	; 8
     86a:	4d c0       	rjmp	.+154    	; 0x906 <USB_Host_ProcessNextHostState+0x21a>
			break;
		case HOST_STATE_Default:
			USB_ControlRequest = (USB_Request_Header_t)
     86c:	ae e3       	ldi	r26, 0x3E	; 62
     86e:	b1 e0       	ldi	r27, 0x01	; 1
     870:	e3 e2       	ldi	r30, 0x23	; 35
     872:	f1 e0       	ldi	r31, 0x01	; 1
     874:	88 e0       	ldi	r24, 0x08	; 8
     876:	01 90       	ld	r0, Z+
     878:	0d 92       	st	X+, r0
     87a:	81 50       	subi	r24, 0x01	; 1
     87c:	e1 f7       	brne	.-8      	; 0x876 <USB_Host_ProcessNextHostState+0x18a>
					.wLength       = 8,
				};

			uint8_t DataBuffer[8];

			if ((SubErrorCode = USB_Host_SendControlRequest(DataBuffer)) != HOST_SENDCONTROL_Successful)
     87e:	ce 01       	movw	r24, r28
     880:	01 96       	adiw	r24, 0x01	; 1
     882:	db d2       	rcall	.+1462   	; 0xe3a <USB_Host_SendControlRequest>
     884:	68 2f       	mov	r22, r24
     886:	88 23       	and	r24, r24
     888:	09 f0       	breq	.+2      	; 0x88c <USB_Host_ProcessNextHostState+0x1a0>
     88a:	4a c0       	rjmp	.+148    	; 0x920 <USB_Host_ProcessNextHostState+0x234>
			{
				ErrorCode = HOST_ENUMERROR_ControlError;
				break;
			}

			USB_ControlPipeSize = DataBuffer[offsetof(USB_Descriptor_Device_t, Endpoint0Size)];
     88c:	88 85       	ldd	r24, Y+8	; 0x08
     88e:	80 93 2b 01 	sts	0x012B, r24

			USB_Host_ResetDevice();
     892:	b3 de       	rcall	.-666    	; 0x5fa <USB_Host_ResetDevice>

			HOST_TASK_NONBLOCK_WAIT(200, HOST_STATE_Default_PostReset);
     894:	81 e0       	ldi	r24, 0x01	; 1
     896:	80 93 46 01 	sts	0x0146, r24
     89a:	88 ec       	ldi	r24, 0xC8	; 200
     89c:	90 e0       	ldi	r25, 0x00	; 0
     89e:	90 93 3c 01 	sts	0x013C, r25
     8a2:	80 93 3b 01 	sts	0x013B, r24
     8a6:	89 e0       	ldi	r24, 0x09	; 9
     8a8:	26 c0       	rjmp	.+76     	; 0x8f6 <USB_Host_ProcessNextHostState+0x20a>
			break;
		case HOST_STATE_Default_PostReset:
			Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL,
     8aa:	00 91 2b 01 	lds	r16, 0x012B
     8ae:	80 e0       	ldi	r24, 0x00	; 0
     8b0:	60 e0       	ldi	r22, 0x00	; 0
     8b2:	40 e0       	ldi	r20, 0x00	; 0
     8b4:	20 e0       	ldi	r18, 0x00	; 0
     8b6:	10 e0       	ldi	r17, 0x00	; 0
     8b8:	ee 24       	eor	r14, r14
     8ba:	46 d0       	rcall	.+140    	; 0x948 <Pipe_ConfigurePipe>
     8bc:	80 91 ac 00 	lds	r24, 0x00AC
			                   PIPE_TOKEN_SETUP, ENDPOINT_CONTROLEP,
			                   USB_ControlPipeSize, PIPE_BANK_SINGLE);

			if (!(Pipe_IsConfigured()))
     8c0:	87 ff       	sbrs	r24, 7
     8c2:	30 c0       	rjmp	.+96     	; 0x924 <USB_Host_ProcessNextHostState+0x238>
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
				SubErrorCode = 0;
				break;
			}

			USB_ControlRequest = (USB_Request_Header_t)
     8c4:	ae e3       	ldi	r26, 0x3E	; 62
     8c6:	b1 e0       	ldi	r27, 0x01	; 1
     8c8:	eb e1       	ldi	r30, 0x1B	; 27
     8ca:	f1 e0       	ldi	r31, 0x01	; 1
     8cc:	88 e0       	ldi	r24, 0x08	; 8
     8ce:	01 90       	ld	r0, Z+
     8d0:	0d 92       	st	X+, r0
     8d2:	81 50       	subi	r24, 0x01	; 1
     8d4:	e1 f7       	brne	.-8      	; 0x8ce <USB_Host_ProcessNextHostState+0x1e2>
					.wValue        = USB_HOST_DEVICEADDRESS,
					.wIndex        = 0,
					.wLength       = 0,
				};

			if ((SubErrorCode = USB_Host_SendControlRequest(NULL)) != HOST_SENDCONTROL_Successful)
     8d6:	80 e0       	ldi	r24, 0x00	; 0
     8d8:	90 e0       	ldi	r25, 0x00	; 0
     8da:	af d2       	rcall	.+1374   	; 0xe3a <USB_Host_SendControlRequest>
     8dc:	68 2f       	mov	r22, r24
     8de:	88 23       	and	r24, r24
     8e0:	f9 f4       	brne	.+62     	; 0x920 <USB_Host_ProcessNextHostState+0x234>
			{
				ErrorCode = HOST_ENUMERROR_ControlError;
				break;
			}

			HOST_TASK_NONBLOCK_WAIT(100, HOST_STATE_Default_PostAddressSet);
     8e2:	81 e0       	ldi	r24, 0x01	; 1
     8e4:	80 93 46 01 	sts	0x0146, r24
     8e8:	84 e6       	ldi	r24, 0x64	; 100
     8ea:	90 e0       	ldi	r25, 0x00	; 0
     8ec:	90 93 3c 01 	sts	0x013C, r25
     8f0:	80 93 3b 01 	sts	0x013B, r24
     8f4:	8a e0       	ldi	r24, 0x0A	; 10
     8f6:	80 93 3a 01 	sts	0x013A, r24
     8fa:	1a c0       	rjmp	.+52     	; 0x930 <USB_Host_ProcessNextHostState+0x244>
			}

			static inline void USB_Host_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SetDeviceAddress(const uint8_t Address)
			{
				UHADDR  =  (Address & 0x7F);
     8fc:	81 e0       	ldi	r24, 0x01	; 1
     8fe:	80 93 a1 00 	sts	0x00A1, r24
			break;
		case HOST_STATE_Default_PostAddressSet:
			USB_Host_SetDeviceAddress(USB_HOST_DEVICEADDRESS);

			EVENT_USB_Host_DeviceEnumerationComplete();
     902:	02 dd       	rcall	.-1532   	; 0x308 <EVENT_USB_Host_DeviceEnumerationComplete>
			USB_HostState = HOST_STATE_Addressed;
     904:	8b e0       	ldi	r24, 0x0B	; 11
     906:	80 93 46 01 	sts	0x0146, r24
     90a:	12 c0       	rjmp	.+36     	; 0x930 <USB_Host_ProcessNextHostState+0x244>
			break;
	}

	if ((ErrorCode != HOST_ENUMERROR_NoError) && (USB_HostState != HOST_STATE_Unattached))
	{
		EVENT_USB_Host_DeviceEnumerationFailed(ErrorCode, SubErrorCode);
     90c:	89 2f       	mov	r24, r25
     90e:	01 dd       	rcall	.-1534   	; 0x312 <EVENT_USB_Host_DeviceEnumerationFailed>
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
     910:	80 91 dd 00 	lds	r24, 0x00DD
     914:	81 60       	ori	r24, 0x01	; 1
     916:	80 93 dd 00 	sts	0x00DD, r24

		USB_Host_VBUS_Auto_Off();

		EVENT_USB_Host_DeviceUnattached();
     91a:	44 dd       	rcall	.-1400   	; 0x3a4 <EVENT_USB_Host_DeviceUnattached>

		USB_ResetInterface();
     91c:	ba d0       	rcall	.+372    	; 0xa92 <USB_ResetInterface>
     91e:	08 c0       	rjmp	.+16     	; 0x930 <USB_Host_ProcessNextHostState+0x244>
	}
}
     920:	93 e0       	ldi	r25, 0x03	; 3
     922:	02 c0       	rjmp	.+4      	; 0x928 <USB_Host_ProcessNextHostState+0x23c>
     924:	94 e0       	ldi	r25, 0x04	; 4
     926:	60 e0       	ldi	r22, 0x00	; 0
			EVENT_USB_Host_DeviceEnumerationComplete();
			USB_HostState = HOST_STATE_Addressed;
			break;
	}

	if ((ErrorCode != HOST_ENUMERROR_NoError) && (USB_HostState != HOST_STATE_Unattached))
     928:	80 91 46 01 	lds	r24, 0x0146
     92c:	82 30       	cpi	r24, 0x02	; 2
     92e:	71 f7       	brne	.-36     	; 0x90c <USB_Host_ProcessNextHostState+0x220>

		EVENT_USB_Host_DeviceUnattached();

		USB_ResetInterface();
	}
}
     930:	28 96       	adiw	r28, 0x08	; 8
     932:	0f b6       	in	r0, 0x3f	; 63
     934:	f8 94       	cli
     936:	de bf       	out	0x3e, r29	; 62
     938:	0f be       	out	0x3f, r0	; 63
     93a:	cd bf       	out	0x3d, r28	; 61
     93c:	cf 91       	pop	r28
     93e:	df 91       	pop	r29
     940:	1f 91       	pop	r17
     942:	0f 91       	pop	r16
     944:	ef 90       	pop	r14
     946:	08 95       	ret

00000948 <Pipe_ConfigurePipe>:
                        const uint8_t Type,
                        const uint8_t Token,
                        const uint8_t EndpointNumber,
                        const uint16_t Size,
                        const uint8_t Banks)
{
     948:	ef 92       	push	r14
     94a:	0f 93       	push	r16
     94c:	1f 93       	push	r17
     94e:	9e 2d       	mov	r25, r14
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
     950:	80 93 a7 00 	sts	0x00A7, r24
			 *  \pre The currently selected pipe must first be configured properly via \ref Pipe_ConfigurePipe().
			 */
			static inline void Pipe_EnablePipe(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_EnablePipe(void)
			{
				UPCONX |= (1 << PEN);
     954:	80 91 a9 00 	lds	r24, 0x00A9
     958:	81 60       	ori	r24, 0x01	; 1
     95a:	80 93 a9 00 	sts	0x00A9, r24
	Pipe_SelectPipe(Number);
	Pipe_EnablePipe();

	UPCFG1X = 0;
     95e:	10 92 ab 00 	sts	0x00AB, r1

	UPCFG0X = ((Type << EPTYPE0) | Token | ((EndpointNumber & PIPE_EPNUM_MASK) << PEPNUM0));
     962:	62 95       	swap	r22
     964:	66 0f       	add	r22, r22
     966:	66 0f       	add	r22, r22
     968:	60 7c       	andi	r22, 0xC0	; 192
     96a:	64 2b       	or	r22, r20
     96c:	2f 70       	andi	r18, 0x0F	; 15
     96e:	62 2b       	or	r22, r18
     970:	60 93 aa 00 	sts	0x00AA, r22
     974:	28 e0       	ldi	r18, 0x08	; 8
     976:	30 e0       	ldi	r19, 0x00	; 0
     978:	80 e0       	ldi	r24, 0x00	; 0
     97a:	03 c0       	rjmp	.+6      	; 0x982 <Pipe_ConfigurePipe+0x3a>
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while ((CheckBytes < Bytes) && (CheckBytes < PIPE_MAX_SIZE))
				{
					MaskVal++;
     97c:	8f 5f       	subi	r24, 0xFF	; 255
					CheckBytes <<= 1;
     97e:	22 0f       	add	r18, r18
     980:	33 1f       	adc	r19, r19
			static inline uint8_t Pipe_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while ((CheckBytes < Bytes) && (CheckBytes < PIPE_MAX_SIZE))
     982:	20 17       	cp	r18, r16
     984:	31 07       	cpc	r19, r17
     986:	10 f4       	brcc	.+4      	; 0x98c <Pipe_ConfigurePipe+0x44>
     988:	85 30       	cpi	r24, 0x05	; 5
     98a:	c1 f7       	brne	.-16     	; 0x97c <Pipe_ConfigurePipe+0x34>
	UPCFG1X = ((1 << ALLOC) | Banks | Pipe_BytesToEPSizeMask(Size));
     98c:	92 60       	ori	r25, 0x02	; 2
     98e:	82 95       	swap	r24
     990:	80 7f       	andi	r24, 0xF0	; 240
     992:	89 2b       	or	r24, r25
     994:	80 93 ab 00 	sts	0x00AB, r24

			/** Configures the currently selected pipe to allow for an unlimited number of IN requests. */
			static inline void Pipe_SetInfiniteINRequests(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetInfiniteINRequests(void)
			{
				UPCONX |= (1 << INMODE);
     998:	80 91 a9 00 	lds	r24, 0x00A9
     99c:	80 62       	ori	r24, 0x20	; 32
     99e:	80 93 a9 00 	sts	0x00A9, r24
			 *  \return Boolean true if the selected pipe is configured, false otherwise.
			 */
			static inline bool Pipe_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsConfigured(void)
			{
				return ((UPSTAX & (1 << CFGOK)) ? true : false);
     9a2:	80 91 ac 00 	lds	r24, 0x00AC

	Pipe_SetInfiniteINRequests();

	return Pipe_IsConfigured();
}
     9a6:	88 1f       	adc	r24, r24
     9a8:	88 27       	eor	r24, r24
     9aa:	88 1f       	adc	r24, r24
     9ac:	1f 91       	pop	r17
     9ae:	0f 91       	pop	r16
     9b0:	ef 90       	pop	r14
     9b2:	08 95       	ret

000009b4 <Pipe_ClearPipes>:

void Pipe_ClearPipes(void)
{
	UPINT = 0;
     9b4:	10 92 f8 00 	sts	0x00F8, r1
     9b8:	90 e0       	ldi	r25, 0x00	; 0
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
     9ba:	90 93 a7 00 	sts	0x00A7, r25

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
	{
		Pipe_SelectPipe(PNum);
		UPIENX  = 0;
     9be:	10 92 ae 00 	sts	0x00AE, r1
		UPINTX  = 0;
     9c2:	10 92 a6 00 	sts	0x00A6, r1
		UPCFG1X = 0;
     9c6:	10 92 ab 00 	sts	0x00AB, r1
			 *  from an attached device.
			 */
			static inline void Pipe_DisablePipe(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_DisablePipe(void)
			{
				UPCONX &= ~(1 << PEN);
     9ca:	80 91 a9 00 	lds	r24, 0x00A9
     9ce:	8e 7f       	andi	r24, 0xFE	; 254
     9d0:	80 93 a9 00 	sts	0x00A9, r24

void Pipe_ClearPipes(void)
{
	UPINT = 0;

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
     9d4:	9f 5f       	subi	r25, 0xFF	; 255
     9d6:	97 30       	cpi	r25, 0x07	; 7
     9d8:	81 f7       	brne	.-32     	; 0x9ba <Pipe_ClearPipes+0x6>
		UPIENX  = 0;
		UPINTX  = 0;
		UPCFG1X = 0;
		Pipe_DisablePipe();
	}
}
     9da:	08 95       	ret

000009dc <Pipe_IsEndpointBound>:

bool Pipe_IsEndpointBound(const uint8_t EndpointAddress)
{
     9dc:	e8 2f       	mov	r30, r24
			 *  \return Index of the currently selected pipe.
			 */
			static inline uint8_t Pipe_GetCurrentPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetCurrentPipe(void)
			{
				return (UPNUM & PIPE_PIPENUM_MASK);
     9de:	70 91 a7 00 	lds	r23, 0x00A7
     9e2:	60 e0       	ldi	r22, 0x00	; 0
		bool    PipeTokenCorrect = true;

		if (PipeToken != PIPE_TOKEN_SETUP)
		  PipeTokenCorrect = (PipeToken == ((EndpointAddress & PIPE_EPDIR_MASK) ? PIPE_TOKEN_IN : PIPE_TOKEN_OUT));

		if (PipeTokenCorrect && (Pipe_BoundEndpointNumber() == (EndpointAddress & PIPE_EPNUM_MASK)))
     9e4:	48 2f       	mov	r20, r24
     9e6:	50 e0       	ldi	r21, 0x00	; 0
     9e8:	4f 70       	andi	r20, 0x0F	; 15
     9ea:	50 70       	andi	r21, 0x00	; 0
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
     9ec:	60 93 a7 00 	sts	0x00A7, r22
			 *  \return Boolean true if the selected pipe is configured, false otherwise.
			 */
			static inline bool Pipe_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsConfigured(void)
			{
				return ((UPSTAX & (1 << CFGOK)) ? true : false);
     9f0:	80 91 ac 00 	lds	r24, 0x00AC

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
	{
		Pipe_SelectPipe(PNum);

		if (!(Pipe_IsConfigured()))
     9f4:	87 ff       	sbrs	r24, 7
     9f6:	18 c0       	rjmp	.+48     	; 0xa28 <Pipe_IsEndpointBound+0x4c>
			 *  \return The current pipe token, as a PIPE_TOKEN_* mask.
			 */
			static inline uint8_t Pipe_GetPipeToken(void) ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetPipeToken(void)
			{
				return (UPCFG0X & (0x03 << PTOKEN0));
     9f8:	80 91 aa 00 	lds	r24, 0x00AA
     9fc:	80 73       	andi	r24, 0x30	; 48
		  continue;

		uint8_t PipeToken        = Pipe_GetPipeToken();
		bool    PipeTokenCorrect = true;

		if (PipeToken != PIPE_TOKEN_SETUP)
     9fe:	59 f0       	breq	.+22     	; 0xa16 <Pipe_IsEndpointBound+0x3a>
		  PipeTokenCorrect = (PipeToken == ((EndpointAddress & PIPE_EPDIR_MASK) ? PIPE_TOKEN_IN : PIPE_TOKEN_OUT));
     a00:	e7 fd       	sbrc	r30, 7
     a02:	03 c0       	rjmp	.+6      	; 0xa0a <Pipe_IsEndpointBound+0x2e>
     a04:	20 e2       	ldi	r18, 0x20	; 32
     a06:	30 e0       	ldi	r19, 0x00	; 0
     a08:	02 c0       	rjmp	.+4      	; 0xa0e <Pipe_IsEndpointBound+0x32>
     a0a:	20 e1       	ldi	r18, 0x10	; 16
     a0c:	30 e0       	ldi	r19, 0x00	; 0

		if (PipeTokenCorrect && (Pipe_BoundEndpointNumber() == (EndpointAddress & PIPE_EPNUM_MASK)))
     a0e:	90 e0       	ldi	r25, 0x00	; 0
     a10:	82 17       	cp	r24, r18
     a12:	93 07       	cpc	r25, r19
     a14:	49 f4       	brne	.+18     	; 0xa28 <Pipe_IsEndpointBound+0x4c>
			 *  \return Endpoint number the currently selected pipe is bound to.
			 */
			static inline uint8_t Pipe_BoundEndpointNumber(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_BoundEndpointNumber(void)
			{
				return ((UPCFG0X >> PEPNUM0) & PIPE_EPNUM_MASK);
     a16:	80 91 aa 00 	lds	r24, 0x00AA
     a1a:	8f 70       	andi	r24, 0x0F	; 15
     a1c:	90 e0       	ldi	r25, 0x00	; 0
     a1e:	84 17       	cp	r24, r20
     a20:	95 07       	cpc	r25, r21
     a22:	11 f4       	brne	.+4      	; 0xa28 <Pipe_IsEndpointBound+0x4c>
     a24:	81 e0       	ldi	r24, 0x01	; 1
     a26:	08 95       	ret

bool Pipe_IsEndpointBound(const uint8_t EndpointAddress)
{
	uint8_t PrevPipeNumber = Pipe_GetCurrentPipe();

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
     a28:	6f 5f       	subi	r22, 0xFF	; 255
     a2a:	67 30       	cpi	r22, 0x07	; 7
     a2c:	f9 f6       	brne	.-66     	; 0x9ec <Pipe_IsEndpointBound+0x10>
			 *  \return Index of the currently selected pipe.
			 */
			static inline uint8_t Pipe_GetCurrentPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetCurrentPipe(void)
			{
				return (UPNUM & PIPE_PIPENUM_MASK);
     a2e:	77 70       	andi	r23, 0x07	; 7
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
     a30:	70 93 a7 00 	sts	0x00A7, r23
     a34:	80 e0       	ldi	r24, 0x00	; 0
		  return true;
	}

	Pipe_SelectPipe(PrevPipeNumber);
	return false;
}
     a36:	08 95       	ret

00000a38 <Pipe_WaitUntilReady>:
			/** Returns the current USB frame number, when in host mode. Every millisecond the USB bus is active (i.e. not suspended)
			 *  the frame number is incremented by one.
			 */
			static inline uint16_t USB_Host_GetFrameNumber(void)
			{
				return UHFNUM;
     a38:	40 91 a2 00 	lds	r20, 0x00A2
     a3c:	50 91 a3 00 	lds	r21, 0x00A3
     a40:	24 e6       	ldi	r18, 0x64	; 100
			 *  \return The current pipe token, as a PIPE_TOKEN_* mask.
			 */
			static inline uint8_t Pipe_GetPipeToken(void) ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetPipeToken(void)
			{
				return (UPCFG0X & (0x03 << PTOKEN0));
     a42:	80 91 aa 00 	lds	r24, 0x00AA

	uint16_t PreviousFrameNumber = USB_Host_GetFrameNumber();

	for (;;)
	{
		if (Pipe_GetPipeToken() == PIPE_TOKEN_IN)
     a46:	80 73       	andi	r24, 0x30	; 48
     a48:	80 31       	cpi	r24, 0x10	; 16
     a4a:	29 f4       	brne	.+10     	; 0xa56 <Pipe_WaitUntilReady+0x1e>
			 *  \return Boolean true if the current pipe has received an IN packet, false otherwise.
			 */
			static inline bool Pipe_IsINReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsINReceived(void)
			{
				return ((UPINTX & (1 << RXINI)) ? true : false);
     a4c:	80 91 a6 00 	lds	r24, 0x00A6
		{
			if (Pipe_IsINReceived())
     a50:	80 ff       	sbrs	r24, 0
     a52:	05 c0       	rjmp	.+10     	; 0xa5e <Pipe_WaitUntilReady+0x26>
     a54:	1c c0       	rjmp	.+56     	; 0xa8e <Pipe_WaitUntilReady+0x56>
			 *  \return Boolean true if the current pipe is ready for an OUT packet, false otherwise.
			 */
			static inline bool Pipe_IsOUTReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsOUTReady(void)
			{
				return ((UPINTX & (1 << TXOUTI)) ? true : false);
     a56:	80 91 a6 00 	lds	r24, 0x00A6
			  return PIPE_READYWAIT_NoError;
		}
		else
		{
			if (Pipe_IsOUTReady())
     a5a:	82 fd       	sbrc	r24, 2
     a5c:	18 c0       	rjmp	.+48     	; 0xa8e <Pipe_WaitUntilReady+0x56>
			 *  \return Boolean true if the current pipe has been stalled by the attached device, false otherwise.
			 */
			static inline bool Pipe_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsStalled(void)
			{
				return ((UPINTX & (1 << RXSTALLI)) ? true : false);
     a5e:	80 91 a6 00 	lds	r24, 0x00A6
			  return PIPE_READYWAIT_NoError;
		}

		if (Pipe_IsStalled())
     a62:	81 ff       	sbrs	r24, 1
     a64:	02 c0       	rjmp	.+4      	; 0xa6a <Pipe_WaitUntilReady+0x32>
     a66:	81 e0       	ldi	r24, 0x01	; 1
     a68:	08 95       	ret
		  return PIPE_READYWAIT_PipeStalled;
		else if (USB_HostState == HOST_STATE_Unattached)
     a6a:	80 91 46 01 	lds	r24, 0x0146
     a6e:	82 30       	cpi	r24, 0x02	; 2
     a70:	79 f0       	breq	.+30     	; 0xa90 <Pipe_WaitUntilReady+0x58>
     a72:	80 91 a2 00 	lds	r24, 0x00A2
     a76:	90 91 a3 00 	lds	r25, 0x00A3
		  return PIPE_READYWAIT_DeviceDisconnected;

		uint16_t CurrentFrameNumber = USB_Host_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
     a7a:	84 17       	cp	r24, r20
     a7c:	95 07       	cpc	r25, r21
     a7e:	09 f3       	breq	.-62     	; 0xa42 <Pipe_WaitUntilReady+0xa>
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
     a80:	22 23       	and	r18, r18
     a82:	11 f4       	brne	.+4      	; 0xa88 <Pipe_WaitUntilReady+0x50>
     a84:	83 e0       	ldi	r24, 0x03	; 3
     a86:	08 95       	ret
     a88:	21 50       	subi	r18, 0x01	; 1
     a8a:	ac 01       	movw	r20, r24
     a8c:	da cf       	rjmp	.-76     	; 0xa42 <Pipe_WaitUntilReady+0xa>
     a8e:	80 e0       	ldi	r24, 0x00	; 0
			  return PIPE_READYWAIT_Timeout;
		}
	}
}
     a90:	08 95       	ret

00000a92 <USB_ResetInterface>:
{
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
     a92:	6e d0       	rcall	.+220    	; 0xb70 <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
     a94:	75 d0       	rcall	.+234    	; 0xb80 <USB_INT_ClearAllInterrupts>
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				const uint8_t Temp = USBCON;
     a96:	80 91 d8 00 	lds	r24, 0x00D8

				USBCON = (Temp & ~(1 << USBE));
     a9a:	98 2f       	mov	r25, r24
     a9c:	9f 77       	andi	r25, 0x7F	; 127
     a9e:	90 93 d8 00 	sts	0x00D8, r25
				USBCON = (Temp |  (1 << USBE));
     aa2:	80 68       	ori	r24, 0x80	; 128
     aa4:	80 93 d8 00 	sts	0x00D8, r24

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR  = USB_PLL_PSC;
     aa8:	8c e0       	ldi	r24, 0x0C	; 12
     aaa:	89 bd       	out	0x29, r24	; 41
				PLLCSR |= (1 << PLLE);
     aac:	89 b5       	in	r24, 0x29	; 41
     aae:	82 60       	ori	r24, 0x02	; 2
     ab0:	89 bd       	out	0x29, r24	; 41
		#if defined(USB_SERIES_4_AVR)
		PLLFRQ = ((1 << PLLUSB) | (1 << PDIV3) | (1 << PDIV1));
		#endif

		USB_PLL_On();
		while (!(USB_PLL_IsReady()));
     ab2:	09 b4       	in	r0, 0x29	; 41
     ab4:	00 fe       	sbrs	r0, 0
     ab6:	fd cf       	rjmp	.-6      	; 0xab2 <USB_ResetInterface+0x20>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON  &= ~(1 << FRZCLK);
     ab8:	80 91 d8 00 	lds	r24, 0x00D8
     abc:	8f 7d       	andi	r24, 0xDF	; 223
     abe:	80 93 d8 00 	sts	0x00D8, r24
		#endif
	}
	else if (USB_CurrentMode == USB_MODE_Host)
	{
		#if defined(USB_CAN_BE_HOST)
		UHWCON &= ~(1 << UIMOD);
     ac2:	80 91 d7 00 	lds	r24, 0x00D7
     ac6:	8f 77       	andi	r24, 0x7F	; 127
     ac8:	80 93 d7 00 	sts	0x00D7, r24
#endif

#if defined(USB_CAN_BE_HOST)
static void USB_Init_Host(void)
{
	USB_HostState       = HOST_STATE_Unattached;
     acc:	82 e0       	ldi	r24, 0x02	; 2
     ace:	80 93 46 01 	sts	0x0146, r24
	USB_ControlPipeSize = PIPE_CONTROLPIPE_DEFAULT_SIZE;
     ad2:	80 e4       	ldi	r24, 0x40	; 64
     ad4:	80 93 2b 01 	sts	0x012B, r24
	#if !defined(__DOXYGEN__)
		/* Macros: */
			static inline void USB_Host_HostMode_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_HostMode_On(void)
			{
				USBCON |=  (1 << HOST);
     ad8:	80 91 d8 00 	lds	r24, 0x00D8
     adc:	80 64       	ori	r24, 0x40	; 64
     ade:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
     ae2:	80 91 dd 00 	lds	r24, 0x00DD
     ae6:	81 60       	ori	r24, 0x01	; 1
     ae8:	80 93 dd 00 	sts	0x00DD, r24
			}

			static inline void USB_Host_VBUS_Manual_Enable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Manual_Enable(void)
			{
				OTGCON |=  (1 << VBUSHWC);
     aec:	80 91 dd 00 	lds	r24, 0x00DD
     af0:	84 60       	ori	r24, 0x04	; 4
     af2:	80 93 dd 00 	sts	0x00DD, r24
				UHWCON &= ~(1 << UVCONE);
     af6:	80 91 d7 00 	lds	r24, 0x00D7
     afa:	8f 7e       	andi	r24, 0xEF	; 239
     afc:	80 93 d7 00 	sts	0x00D7, r24

				DDRE   |=  (1 << 7);
     b00:	6f 9a       	sbi	0x0d, 7	; 13
			}

			static inline void USB_Host_VBUS_Manual_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Manual_On(void)
			{
				PORTE  |=  (1 << 7);
     b02:	77 9a       	sbi	0x0e, 7	; 14

	USB_Host_VBUS_Auto_Off();
	USB_Host_VBUS_Manual_Enable();
	USB_Host_VBUS_Manual_On();

	USB_INT_Enable(USB_INT_SRPI);
     b04:	80 91 de 00 	lds	r24, 0x00DE
     b08:	81 60       	ori	r24, 0x01	; 1
     b0a:	80 93 de 00 	sts	0x00DE, r24
	USB_INT_Enable(USB_INT_BCERRI);
     b0e:	80 91 de 00 	lds	r24, 0x00DE
     b12:	84 60       	ori	r24, 0x04	; 4
     b14:	80 93 de 00 	sts	0x00DE, r24
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
     b18:	80 91 e0 00 	lds	r24, 0x00E0
     b1c:	8e 7f       	andi	r24, 0xFE	; 254
     b1e:	80 93 e0 00 	sts	0x00E0, r24

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON  |=  (1 << OTGPADE);
     b22:	80 91 d8 00 	lds	r24, 0x00D8
     b26:	80 61       	ori	r24, 0x10	; 16
     b28:	80 93 d8 00 	sts	0x00D8, r24
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
     b2c:	08 95       	ret

00000b2e <USB_Init>:

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON  |=  (1 << UVREGE);
     b2e:	e7 ed       	ldi	r30, 0xD7	; 215
     b30:	f0 e0       	ldi	r31, 0x00	; 0
     b32:	80 81       	ld	r24, Z
     b34:	81 60       	ori	r24, 0x01	; 1
     b36:	80 83       	st	Z, r24
	{
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
     b38:	81 e0       	ldi	r24, 0x01	; 1
     b3a:	80 93 3d 01 	sts	0x013D, r24

	USB_ResetInterface();
}
     b3e:	a9 cf       	rjmp	.-174    	; 0xa92 <USB_ResetInterface>

00000b40 <USB_ShutDown>:

void USB_ShutDown(void)
{
	USB_INT_DisableAllInterrupts();
     b40:	17 d0       	rcall	.+46     	; 0xb70 <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
     b42:	1e d0       	rcall	.+60     	; 0xb80 <USB_INT_ClearAllInterrupts>
			 *  enumerating the device once attached until \ref USB_Attach() is called.
			 */
			static inline void USB_Detach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Detach(void)
			{
				UDCON  |=  (1 << DETACH);
     b44:	e0 ee       	ldi	r30, 0xE0	; 224
     b46:	f0 e0       	ldi	r31, 0x00	; 0
     b48:	80 81       	ld	r24, Z
     b4a:	81 60       	ori	r24, 0x01	; 1
     b4c:	80 83       	st	Z, r24
			}

			static inline void USB_Controller_Disable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Disable(void)
			{
				USBCON  &= ~(1 << USBE);
     b4e:	a8 ed       	ldi	r26, 0xD8	; 216
     b50:	b0 e0       	ldi	r27, 0x00	; 0
     b52:	8c 91       	ld	r24, X
     b54:	8f 77       	andi	r24, 0x7F	; 127
     b56:	8c 93       	st	X, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR  = 0;
     b58:	19 bc       	out	0x29, r1	; 41

			static inline void USB_REG_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_Off(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON  &= ~(1 << UVREGE);
     b5a:	e7 ed       	ldi	r30, 0xD7	; 215
     b5c:	f0 e0       	ldi	r31, 0x00	; 0
     b5e:	80 81       	ld	r24, Z
     b60:	8e 7f       	andi	r24, 0xFE	; 254
     b62:	80 83       	st	Z, r24
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON  &= ~(1 << OTGPADE);
     b64:	8c 91       	ld	r24, X
     b66:	8f 7e       	andi	r24, 0xEF	; 239
     b68:	8c 93       	st	X, r24

	#if defined(USB_CAN_BE_BOTH)
	USB_CurrentMode = USB_MODE_None;
	#endif

	USB_IsInitialized = false;
     b6a:	10 92 3d 01 	sts	0x013D, r1
}
     b6e:	08 95       	ret

00000b70 <USB_INT_DisableAllInterrupts>:
#include "USBInterrupt.h"

void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
     b70:	e8 ed       	ldi	r30, 0xD8	; 216
     b72:	f0 e0       	ldi	r31, 0x00	; 0
     b74:	80 81       	ld	r24, Z
     b76:	8c 7f       	andi	r24, 0xFC	; 252
     b78:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_BOTH)
	OTGIEN  = 0;
	#endif

	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
     b7a:	10 92 a0 00 	sts	0x00A0, r1
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
	#endif
}
     b7e:	08 95       	ret

00000b80 <USB_INT_ClearAllInterrupts>:

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT  = 0;
     b80:	10 92 da 00 	sts	0x00DA, r1
	#if defined(USB_CAN_BE_BOTH)
	OTGINT  = 0;
	#endif

	#if defined(USB_CAN_BE_HOST)
	UHINT   = 0;
     b84:	10 92 9f 00 	sts	0x009F, r1
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT   = 0;
	#endif
}
     b88:	08 95       	ret

00000b8a <__vector_10>:

ISR(USB_GEN_vect, ISR_BLOCK)
{
     b8a:	1f 92       	push	r1
     b8c:	0f 92       	push	r0
     b8e:	0f b6       	in	r0, 0x3f	; 63
     b90:	0f 92       	push	r0
     b92:	0b b6       	in	r0, 0x3b	; 59
     b94:	0f 92       	push	r0
     b96:	11 24       	eor	r1, r1
     b98:	2f 93       	push	r18
     b9a:	3f 93       	push	r19
     b9c:	4f 93       	push	r20
     b9e:	5f 93       	push	r21
     ba0:	6f 93       	push	r22
     ba2:	7f 93       	push	r23
     ba4:	8f 93       	push	r24
     ba6:	9f 93       	push	r25
     ba8:	af 93       	push	r26
     baa:	bf 93       	push	r27
     bac:	ef 93       	push	r30
     bae:	ff 93       	push	r31
	}
	#endif
	#endif

	#if defined(USB_CAN_BE_HOST)
	if (USB_INT_HasOccurred(USB_INT_DDISCI) && USB_INT_IsEnabled(USB_INT_DDISCI))
     bb0:	80 91 9f 00 	lds	r24, 0x009F
     bb4:	81 ff       	sbrs	r24, 1
     bb6:	15 c0       	rjmp	.+42     	; 0xbe2 <__vector_10+0x58>
     bb8:	80 91 a0 00 	lds	r24, 0x00A0
     bbc:	81 ff       	sbrs	r24, 1
     bbe:	11 c0       	rjmp	.+34     	; 0xbe2 <__vector_10+0x58>
	{
		USB_INT_Clear(USB_INT_DDISCI);
     bc0:	80 91 9f 00 	lds	r24, 0x009F
     bc4:	8d 7f       	andi	r24, 0xFD	; 253
     bc6:	80 93 9f 00 	sts	0x009F, r24
		USB_INT_Clear(USB_INT_DCONNI);
     bca:	80 91 9f 00 	lds	r24, 0x009F
     bce:	8e 7f       	andi	r24, 0xFE	; 254
     bd0:	80 93 9f 00 	sts	0x009F, r24
		USB_INT_Disable(USB_INT_DDISCI);
     bd4:	80 91 a0 00 	lds	r24, 0x00A0
     bd8:	8d 7f       	andi	r24, 0xFD	; 253
     bda:	80 93 a0 00 	sts	0x00A0, r24

		EVENT_USB_Host_DeviceUnattached();
     bde:	e2 db       	rcall	.-2108   	; 0x3a4 <EVENT_USB_Host_DeviceUnattached>

		USB_ResetInterface();
     be0:	58 df       	rcall	.-336    	; 0xa92 <USB_ResetInterface>
	}

	if (USB_INT_HasOccurred(USB_INT_VBERRI) && USB_INT_IsEnabled(USB_INT_VBERRI))
     be2:	80 91 df 00 	lds	r24, 0x00DF
     be6:	81 ff       	sbrs	r24, 1
     be8:	15 c0       	rjmp	.+42     	; 0xc14 <__vector_10+0x8a>
     bea:	80 91 de 00 	lds	r24, 0x00DE
     bee:	81 ff       	sbrs	r24, 1
     bf0:	11 c0       	rjmp	.+34     	; 0xc14 <__vector_10+0x8a>
	{
		USB_INT_Clear(USB_INT_VBERRI);
     bf2:	80 91 df 00 	lds	r24, 0x00DF
     bf6:	8d 7f       	andi	r24, 0xFD	; 253
     bf8:	80 93 df 00 	sts	0x00DF, r24
			}

			static inline void USB_Host_VBUS_Manual_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Manual_Off(void)
			{
				PORTE  &= ~(1 << 7);
     bfc:	77 98       	cbi	0x0e, 7	; 14
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
     bfe:	80 91 dd 00 	lds	r24, 0x00DD
     c02:	81 60       	ori	r24, 0x01	; 1
     c04:	80 93 dd 00 	sts	0x00DD, r24

		USB_Host_VBUS_Manual_Off();
		USB_Host_VBUS_Auto_Off();

		EVENT_USB_Host_HostError(HOST_ERROR_VBusVoltageDip);
     c08:	80 e0       	ldi	r24, 0x00	; 0
     c0a:	af db       	rcall	.-2210   	; 0x36a <EVENT_USB_Host_HostError>
		EVENT_USB_Host_DeviceUnattached();
     c0c:	cb db       	rcall	.-2154   	; 0x3a4 <EVENT_USB_Host_DeviceUnattached>

		USB_HostState = HOST_STATE_Unattached;
     c0e:	82 e0       	ldi	r24, 0x02	; 2
     c10:	80 93 46 01 	sts	0x0146, r24
	}

	if (USB_INT_HasOccurred(USB_INT_SRPI) && USB_INT_IsEnabled(USB_INT_SRPI))
     c14:	80 91 df 00 	lds	r24, 0x00DF
     c18:	80 ff       	sbrs	r24, 0
     c1a:	17 c0       	rjmp	.+46     	; 0xc4a <__vector_10+0xc0>
     c1c:	80 91 de 00 	lds	r24, 0x00DE
     c20:	80 ff       	sbrs	r24, 0
     c22:	13 c0       	rjmp	.+38     	; 0xc4a <__vector_10+0xc0>
	{
		USB_INT_Clear(USB_INT_SRPI);
     c24:	80 91 df 00 	lds	r24, 0x00DF
     c28:	8e 7f       	andi	r24, 0xFE	; 254
     c2a:	80 93 df 00 	sts	0x00DF, r24
		USB_INT_Disable(USB_INT_SRPI);
     c2e:	80 91 de 00 	lds	r24, 0x00DE
     c32:	8e 7f       	andi	r24, 0xFE	; 254
     c34:	80 93 de 00 	sts	0x00DE, r24

		EVENT_USB_Host_DeviceAttached();
     c38:	be db       	rcall	.-2180   	; 0x3b6 <EVENT_USB_Host_DeviceAttached>

		USB_INT_Enable(USB_INT_DDISCI);
     c3a:	80 91 a0 00 	lds	r24, 0x00A0
     c3e:	82 60       	ori	r24, 0x02	; 2
     c40:	80 93 a0 00 	sts	0x00A0, r24

		USB_HostState = HOST_STATE_Powered;
     c44:	83 e0       	ldi	r24, 0x03	; 3
     c46:	80 93 46 01 	sts	0x0146, r24
	}

	if (USB_INT_HasOccurred(USB_INT_BCERRI) && USB_INT_IsEnabled(USB_INT_BCERRI))
     c4a:	80 91 df 00 	lds	r24, 0x00DF
     c4e:	82 ff       	sbrs	r24, 2
     c50:	0e c0       	rjmp	.+28     	; 0xc6e <__vector_10+0xe4>
     c52:	80 91 de 00 	lds	r24, 0x00DE
     c56:	82 ff       	sbrs	r24, 2
     c58:	0a c0       	rjmp	.+20     	; 0xc6e <__vector_10+0xe4>
	{
		USB_INT_Clear(USB_INT_BCERRI);
     c5a:	80 91 df 00 	lds	r24, 0x00DF
     c5e:	8b 7f       	andi	r24, 0xFB	; 251
     c60:	80 93 df 00 	sts	0x00DF, r24

		EVENT_USB_Host_DeviceEnumerationFailed(HOST_ENUMERROR_NoDeviceDetected, 0);
     c64:	82 e0       	ldi	r24, 0x02	; 2
     c66:	60 e0       	ldi	r22, 0x00	; 0
     c68:	54 db       	rcall	.-2392   	; 0x312 <EVENT_USB_Host_DeviceEnumerationFailed>
		EVENT_USB_Host_DeviceUnattached();
     c6a:	9c db       	rcall	.-2248   	; 0x3a4 <EVENT_USB_Host_DeviceUnattached>

		USB_ResetInterface();
     c6c:	12 df       	rcall	.-476    	; 0xa92 <USB_ResetInterface>
	}

	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_HSOFI) && USB_INT_IsEnabled(USB_INT_HSOFI))
     c6e:	80 91 9f 00 	lds	r24, 0x009F
     c72:	85 ff       	sbrs	r24, 5
     c74:	0a c0       	rjmp	.+20     	; 0xc8a <__vector_10+0x100>
     c76:	80 91 a0 00 	lds	r24, 0x00A0
     c7a:	85 ff       	sbrs	r24, 5
     c7c:	06 c0       	rjmp	.+12     	; 0xc8a <__vector_10+0x100>
	{
		USB_INT_Clear(USB_INT_HSOFI);
     c7e:	80 91 9f 00 	lds	r24, 0x009F
     c82:	8f 7d       	andi	r24, 0xDF	; 223
     c84:	80 93 9f 00 	sts	0x009F, r24

		EVENT_USB_Host_StartOfFrame();
     c88:	ae d0       	rcall	.+348    	; 0xde6 <USB_Event_Stub>
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
     c8a:	ff 91       	pop	r31
     c8c:	ef 91       	pop	r30
     c8e:	bf 91       	pop	r27
     c90:	af 91       	pop	r26
     c92:	9f 91       	pop	r25
     c94:	8f 91       	pop	r24
     c96:	7f 91       	pop	r23
     c98:	6f 91       	pop	r22
     c9a:	5f 91       	pop	r21
     c9c:	4f 91       	pop	r20
     c9e:	3f 91       	pop	r19
     ca0:	2f 91       	pop	r18
     ca2:	0f 90       	pop	r0
     ca4:	0b be       	out	0x3b, r0	; 59
     ca6:	0f 90       	pop	r0
     ca8:	0f be       	out	0x3f, r0	; 63
     caa:	0f 90       	pop	r0
     cac:	1f 90       	pop	r1
     cae:	18 95       	reti

00000cb0 <USB_GetNextDescriptorComp>:

uint8_t USB_GetNextDescriptorComp(uint16_t* const BytesRem, void** const CurrConfigLoc, ConfigComparatorPtr_t const ComparatorRoutine)
{
     cb0:	af 92       	push	r10
     cb2:	bf 92       	push	r11
     cb4:	cf 92       	push	r12
     cb6:	df 92       	push	r13
     cb8:	ef 92       	push	r14
     cba:	ff 92       	push	r15
     cbc:	0f 93       	push	r16
     cbe:	1f 93       	push	r17
     cc0:	cf 93       	push	r28
     cc2:	df 93       	push	r29
     cc4:	7c 01       	movw	r14, r24
     cc6:	8b 01       	movw	r16, r22
     cc8:	5a 01       	movw	r10, r20
     cca:	21 c0       	rjmp	.+66     	; 0xd0e <USB_GetNextDescriptorComp+0x5e>
	uint8_t ErrorCode;

	while (*BytesRem)
	{
		uint8_t* PrevDescLoc  = *CurrConfigLoc;
     ccc:	f8 01       	movw	r30, r16
     cce:	c0 81       	ld	r28, Z
     cd0:	d1 81       	ldd	r29, Z+1	; 0x01
			static inline void USB_GetNextDescriptor(uint16_t* const BytesRem,
			                                         void** CurrConfigLoc) ATTR_NON_NULL_PTR_ARG(1) ATTR_NON_NULL_PTR_ARG(2);
			static inline void USB_GetNextDescriptor(uint16_t* const BytesRem,
			                                         void** CurrConfigLoc)
			{
				uint16_t CurrDescriptorSize = DESCRIPTOR_CAST(*CurrConfigLoc, USB_Descriptor_Header_t).Size;
     cd2:	88 81       	ld	r24, Y
     cd4:	90 e0       	ldi	r25, 0x00	; 0

				*CurrConfigLoc  = ((uint8_t*)*CurrConfigLoc) + CurrDescriptorSize;
     cd6:	9e 01       	movw	r18, r28
     cd8:	28 0f       	add	r18, r24
     cda:	39 1f       	adc	r19, r25
     cdc:	31 83       	std	Z+1, r19	; 0x01
     cde:	20 83       	st	Z, r18
				*BytesRem      -= CurrDescriptorSize;
     ce0:	f7 01       	movw	r30, r14
     ce2:	20 81       	ld	r18, Z
     ce4:	31 81       	ldd	r19, Z+1	; 0x01
     ce6:	28 1b       	sub	r18, r24
     ce8:	39 0b       	sbc	r19, r25
     cea:	31 83       	std	Z+1, r19	; 0x01
     cec:	20 83       	st	Z, r18
		uint16_t PrevBytesRem = *BytesRem;

		USB_GetNextDescriptor(BytesRem, CurrConfigLoc);

		if ((ErrorCode = ComparatorRoutine(*CurrConfigLoc)) != DESCRIPTOR_SEARCH_NotFound)
     cee:	f8 01       	movw	r30, r16
     cf0:	80 81       	ld	r24, Z
     cf2:	91 81       	ldd	r25, Z+1	; 0x01
     cf4:	f5 01       	movw	r30, r10
     cf6:	09 95       	icall
     cf8:	82 30       	cpi	r24, 0x02	; 2
     cfa:	49 f0       	breq	.+18     	; 0xd0e <USB_GetNextDescriptorComp+0x5e>
		{
			if (ErrorCode == DESCRIPTOR_SEARCH_Fail)
     cfc:	81 30       	cpi	r24, 0x01	; 1
     cfe:	71 f4       	brne	.+28     	; 0xd1c <USB_GetNextDescriptorComp+0x6c>
			{
				*CurrConfigLoc = PrevDescLoc;
     d00:	f8 01       	movw	r30, r16
     d02:	c0 83       	st	Z, r28
     d04:	d1 83       	std	Z+1, r29	; 0x01
				*BytesRem      = PrevBytesRem;
     d06:	f7 01       	movw	r30, r14
     d08:	d1 82       	std	Z+1, r13	; 0x01
     d0a:	c0 82       	st	Z, r12
     d0c:	07 c0       	rjmp	.+14     	; 0xd1c <USB_GetNextDescriptorComp+0x6c>

uint8_t USB_GetNextDescriptorComp(uint16_t* const BytesRem, void** const CurrConfigLoc, ConfigComparatorPtr_t const ComparatorRoutine)
{
	uint8_t ErrorCode;

	while (*BytesRem)
     d0e:	f7 01       	movw	r30, r14
     d10:	c0 80       	ld	r12, Z
     d12:	d1 80       	ldd	r13, Z+1	; 0x01
     d14:	c1 14       	cp	r12, r1
     d16:	d1 04       	cpc	r13, r1
     d18:	c9 f6       	brne	.-78     	; 0xccc <USB_GetNextDescriptorComp+0x1c>
     d1a:	82 e0       	ldi	r24, 0x02	; 2
			return ErrorCode;
		}
	}

	return DESCRIPTOR_SEARCH_COMP_EndOfDescriptor;
}
     d1c:	df 91       	pop	r29
     d1e:	cf 91       	pop	r28
     d20:	1f 91       	pop	r17
     d22:	0f 91       	pop	r16
     d24:	ff 90       	pop	r15
     d26:	ef 90       	pop	r14
     d28:	df 90       	pop	r13
     d2a:	cf 90       	pop	r12
     d2c:	bf 90       	pop	r11
     d2e:	af 90       	pop	r10
     d30:	08 95       	ret

00000d32 <USB_Host_GetDeviceConfigDescriptor>:
#include "ConfigDescriptor.h"

#if defined(USB_CAN_BE_HOST)
uint8_t USB_Host_GetDeviceConfigDescriptor(uint8_t ConfigNumber, uint16_t* const ConfigSizePtr,
                                           void* BufferPtr, uint16_t BufferSize)
{
     d32:	cf 92       	push	r12
     d34:	df 92       	push	r13
     d36:	ef 92       	push	r14
     d38:	ff 92       	push	r15
     d3a:	0f 93       	push	r16
     d3c:	1f 93       	push	r17
     d3e:	df 93       	push	r29
     d40:	cf 93       	push	r28
     d42:	cd b7       	in	r28, 0x3d	; 61
     d44:	de b7       	in	r29, 0x3e	; 62
     d46:	29 97       	sbiw	r28, 0x09	; 9
     d48:	0f b6       	in	r0, 0x3f	; 63
     d4a:	f8 94       	cli
     d4c:	de bf       	out	0x3e, r29	; 62
     d4e:	0f be       	out	0x3f, r0	; 63
     d50:	cd bf       	out	0x3d, r28	; 61
     d52:	6b 01       	movw	r12, r22
     d54:	8a 01       	movw	r16, r20
     d56:	79 01       	movw	r14, r18
	uint8_t ErrorCode;
	uint8_t ConfigHeader[sizeof(USB_Descriptor_Configuration_Header_t)];

	USB_ControlRequest = (USB_Request_Header_t)
     d58:	90 e8       	ldi	r25, 0x80	; 128
     d5a:	90 93 3e 01 	sts	0x013E, r25
     d5e:	96 e0       	ldi	r25, 0x06	; 6
     d60:	90 93 3f 01 	sts	0x013F, r25
     d64:	90 e0       	ldi	r25, 0x00	; 0
     d66:	01 97       	sbiw	r24, 0x01	; 1
     d68:	92 60       	ori	r25, 0x02	; 2
     d6a:	90 93 41 01 	sts	0x0141, r25
     d6e:	80 93 40 01 	sts	0x0140, r24
     d72:	10 92 43 01 	sts	0x0143, r1
     d76:	10 92 42 01 	sts	0x0142, r1
     d7a:	89 e0       	ldi	r24, 0x09	; 9
     d7c:	90 e0       	ldi	r25, 0x00	; 0
     d7e:	90 93 45 01 	sts	0x0145, r25
     d82:	80 93 44 01 	sts	0x0144, r24
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
     d86:	10 92 a7 00 	sts	0x00A7, r1
			.wLength       = sizeof(USB_Descriptor_Configuration_Header_t),
		};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	if ((ErrorCode = USB_Host_SendControlRequest(ConfigHeader)) != HOST_SENDCONTROL_Successful)
     d8a:	ce 01       	movw	r24, r28
     d8c:	01 96       	adiw	r24, 0x01	; 1
     d8e:	55 d0       	rcall	.+170    	; 0xe3a <USB_Host_SendControlRequest>
     d90:	28 2f       	mov	r18, r24
     d92:	88 23       	and	r24, r24
     d94:	c1 f4       	brne	.+48     	; 0xdc6 <USB_Host_GetDeviceConfigDescriptor+0x94>
	  return ErrorCode;

	*ConfigSizePtr = DESCRIPTOR_PCAST(ConfigHeader, USB_Descriptor_Configuration_Header_t)->TotalConfigurationSize;
     d96:	8b 81       	ldd	r24, Y+3	; 0x03
     d98:	9c 81       	ldd	r25, Y+4	; 0x04
     d9a:	f6 01       	movw	r30, r12
     d9c:	91 83       	std	Z+1, r25	; 0x01
     d9e:	80 83       	st	Z, r24

	if (*ConfigSizePtr > BufferSize)
     da0:	e8 16       	cp	r14, r24
     da2:	f9 06       	cpc	r15, r25
     da4:	10 f4       	brcc	.+4      	; 0xdaa <USB_Host_GetDeviceConfigDescriptor+0x78>
     da6:	25 e0       	ldi	r18, 0x05	; 5
     da8:	0e c0       	rjmp	.+28     	; 0xdc6 <USB_Host_GetDeviceConfigDescriptor+0x94>
	  return HOST_GETCONFIG_BuffOverflow;

	USB_ControlRequest.wLength = *ConfigSizePtr;
     daa:	90 93 45 01 	sts	0x0145, r25
     dae:	80 93 44 01 	sts	0x0144, r24

	if ((ErrorCode = USB_Host_SendControlRequest(BufferPtr)) != HOST_SENDCONTROL_Successful)
     db2:	c8 01       	movw	r24, r16
     db4:	42 d0       	rcall	.+132    	; 0xe3a <USB_Host_SendControlRequest>
     db6:	28 2f       	mov	r18, r24
     db8:	88 23       	and	r24, r24
     dba:	29 f4       	brne	.+10     	; 0xdc6 <USB_Host_GetDeviceConfigDescriptor+0x94>
	  return ErrorCode;

	if (DESCRIPTOR_TYPE(BufferPtr) != DTYPE_Configuration)
     dbc:	f8 01       	movw	r30, r16
     dbe:	81 81       	ldd	r24, Z+1	; 0x01
     dc0:	82 30       	cpi	r24, 0x02	; 2
     dc2:	09 f0       	breq	.+2      	; 0xdc6 <USB_Host_GetDeviceConfigDescriptor+0x94>
     dc4:	26 e0       	ldi	r18, 0x06	; 6
	  return HOST_GETCONFIG_InvalidData;

	return HOST_GETCONFIG_Successful;
}
     dc6:	82 2f       	mov	r24, r18
     dc8:	29 96       	adiw	r28, 0x09	; 9
     dca:	0f b6       	in	r0, 0x3f	; 63
     dcc:	f8 94       	cli
     dce:	de bf       	out	0x3e, r29	; 62
     dd0:	0f be       	out	0x3f, r0	; 63
     dd2:	cd bf       	out	0x3d, r28	; 61
     dd4:	cf 91       	pop	r28
     dd6:	df 91       	pop	r29
     dd8:	1f 91       	pop	r17
     dda:	0f 91       	pop	r16
     ddc:	ff 90       	pop	r15
     dde:	ef 90       	pop	r14
     de0:	df 90       	pop	r13
     de2:	cf 90       	pop	r12
     de4:	08 95       	ret

00000de6 <USB_Event_Stub>:
#include "Events.h"

void USB_Event_Stub(void)
{

}
     de6:	08 95       	ret

00000de8 <USB_Host_WaitForIOS>:

	return ReturnStatus;
}

static uint8_t USB_Host_WaitForIOS(const uint8_t WaitType)
{
     de8:	1f 93       	push	r17
     dea:	cf 93       	push	r28
     dec:	df 93       	push	r29
     dee:	18 2f       	mov	r17, r24
     df0:	c8 ee       	ldi	r28, 0xE8	; 232
     df2:	d3 e0       	ldi	r29, 0x03	; 3
     df4:	09 c0       	rjmp	.+18     	; 0xe08 <USB_Host_WaitForIOS+0x20>
	         ((WaitType == USB_HOST_WAITFOR_InReceived) && Pipe_IsINReceived()) ||
	         ((WaitType == USB_HOST_WAITFOR_OutReady)   && Pipe_IsOUTReady())))
	{
		uint8_t ErrorCode;

		if ((ErrorCode = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
     df6:	81 e0       	ldi	r24, 0x01	; 1
     df8:	b3 db       	rcall	.-2202   	; 0x560 <USB_Host_WaitMS>
     dfa:	88 23       	and	r24, r24
     dfc:	d1 f4       	brne	.+52     	; 0xe32 <USB_Host_WaitForIOS+0x4a>
		  return ErrorCode;

		if (!(TimeoutCounter--))
     dfe:	20 97       	sbiw	r28, 0x00	; 0
     e00:	11 f4       	brne	.+4      	; 0xe06 <USB_Host_WaitForIOS+0x1e>
     e02:	84 e0       	ldi	r24, 0x04	; 4
     e04:	16 c0       	rjmp	.+44     	; 0xe32 <USB_Host_WaitForIOS+0x4a>
     e06:	21 97       	sbiw	r28, 0x01	; 1
	uint8_t  TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#else
	uint16_t TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#endif

	while (!(((WaitType == USB_HOST_WAITFOR_SetupSent)  && Pipe_IsSETUPSent())  ||
     e08:	11 23       	and	r17, r17
     e0a:	29 f4       	brne	.+10     	; 0xe16 <USB_Host_WaitForIOS+0x2e>
			 *  \return Boolean true if the current pipe is ready for a SETUP packet, false otherwise.
			 */
			static inline bool Pipe_IsSETUPSent(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsSETUPSent(void)
			{
				return ((UPINTX & (1 << TXSTPI)) ? true : false);
     e0c:	80 91 a6 00 	lds	r24, 0x00A6
     e10:	83 ff       	sbrs	r24, 3
     e12:	f1 cf       	rjmp	.-30     	; 0xdf6 <USB_Host_WaitForIOS+0xe>
     e14:	0d c0       	rjmp	.+26     	; 0xe30 <USB_Host_WaitForIOS+0x48>
     e16:	11 30       	cpi	r17, 0x01	; 1
     e18:	29 f4       	brne	.+10     	; 0xe24 <USB_Host_WaitForIOS+0x3c>
			 *  \return Boolean true if the current pipe has received an IN packet, false otherwise.
			 */
			static inline bool Pipe_IsINReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsINReceived(void)
			{
				return ((UPINTX & (1 << RXINI)) ? true : false);
     e1a:	80 91 a6 00 	lds	r24, 0x00A6
     e1e:	80 ff       	sbrs	r24, 0
     e20:	ea cf       	rjmp	.-44     	; 0xdf6 <USB_Host_WaitForIOS+0xe>
     e22:	06 c0       	rjmp	.+12     	; 0xe30 <USB_Host_WaitForIOS+0x48>
     e24:	12 30       	cpi	r17, 0x02	; 2
     e26:	39 f7       	brne	.-50     	; 0xdf6 <USB_Host_WaitForIOS+0xe>
			 *  \return Boolean true if the current pipe is ready for an OUT packet, false otherwise.
			 */
			static inline bool Pipe_IsOUTReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsOUTReady(void)
			{
				return ((UPINTX & (1 << TXOUTI)) ? true : false);
     e28:	80 91 a6 00 	lds	r24, 0x00A6
     e2c:	82 ff       	sbrs	r24, 2
     e2e:	e3 cf       	rjmp	.-58     	; 0xdf6 <USB_Host_WaitForIOS+0xe>
     e30:	80 e0       	ldi	r24, 0x00	; 0
		if (!(TimeoutCounter--))
		  return HOST_SENDCONTROL_SoftwareTimeOut;
	}

	return HOST_SENDCONTROL_Successful;
}
     e32:	df 91       	pop	r29
     e34:	cf 91       	pop	r28
     e36:	1f 91       	pop	r17
     e38:	08 95       	ret

00000e3a <USB_Host_SendControlRequest>:

#define  __INCLUDE_FROM_HOSTSTDREQ_C
#include "HostStandardReq.h"

uint8_t USB_Host_SendControlRequest(void* const BufferPtr)
{
     e3a:	ff 92       	push	r15
     e3c:	0f 93       	push	r16
     e3e:	1f 93       	push	r17
     e40:	cf 93       	push	r28
     e42:	df 93       	push	r29
     e44:	18 2f       	mov	r17, r24
     e46:	09 2f       	mov	r16, r25
			 *  \return Boolean true if the bus is currently suspended, false otherwise.
			 */
			static inline bool USB_Host_IsBusSuspended(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusSuspended(void)
			{
				return ((UHCON & (1 << SOFEN)) ? false : true);
     e48:	f0 90 9e 00 	lds	r15, 0x009E
	uint8_t* HeaderStream   = (uint8_t*)&USB_ControlRequest;
	uint8_t* DataStream     = (uint8_t*)BufferPtr;
	bool     BusSuspended   = USB_Host_IsBusSuspended();
	uint8_t  ReturnStatus   = HOST_SENDCONTROL_Successful;
	uint16_t DataLen        = USB_ControlRequest.wLength;
     e4c:	c0 91 44 01 	lds	r28, 0x0144
     e50:	d0 91 45 01 	lds	r29, 0x0145
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
     e54:	80 91 9e 00 	lds	r24, 0x009E
     e58:	81 60       	ori	r24, 0x01	; 1
     e5a:	80 93 9e 00 	sts	0x009E, r24

	USB_Host_ResumeBus();

	if ((ReturnStatus = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
     e5e:	81 e0       	ldi	r24, 0x01	; 1
     e60:	7f db       	rcall	.-2306   	; 0x560 <USB_Host_WaitMS>
     e62:	98 2f       	mov	r25, r24
     e64:	88 23       	and	r24, r24
     e66:	09 f0       	breq	.+2      	; 0xe6a <USB_Host_SendControlRequest+0x30>
     e68:	d2 c0       	rjmp	.+420    	; 0x100e <USB_Host_SendControlRequest+0x1d4>
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
     e6a:	80 91 aa 00 	lds	r24, 0x00AA
     e6e:	8f 7c       	andi	r24, 0xCF	; 207
     e70:	80 93 aa 00 	sts	0x00AA, r24
			 *  flag for the pipe.
			 */
			static inline void Pipe_ClearErrorFlags(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearErrorFlags(void)
			{
				UPERRX = 0;
     e74:	10 92 f5 00 	sts	0x00F5, r1

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
     e78:	80 91 a9 00 	lds	r24, 0x00A9
     e7c:	8f 7b       	andi	r24, 0xBF	; 191
     e7e:	80 93 a9 00 	sts	0x00A9, r24
     e82:	ee e3       	ldi	r30, 0x3E	; 62
     e84:	f1 e0       	ldi	r31, 0x01	; 1
	Pipe_ClearErrorFlags();

	Pipe_Unfreeze();

	for (uint8_t HeaderByte = 0; HeaderByte < sizeof(USB_Request_Header_t); HeaderByte++)
	  Pipe_Write_Byte(*(HeaderStream++));
     e86:	81 91       	ld	r24, Z+
			 *  \param[in] Byte  Next byte to write into the the currently selected pipe's FIFO buffer.
			 */
			static inline void Pipe_Write_Byte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Write_Byte(const uint8_t Byte)
			{
				UPDATX = Byte;
     e88:	80 93 af 00 	sts	0x00AF, r24
	Pipe_SetPipeToken(PIPE_TOKEN_SETUP);
	Pipe_ClearErrorFlags();

	Pipe_Unfreeze();

	for (uint8_t HeaderByte = 0; HeaderByte < sizeof(USB_Request_Header_t); HeaderByte++)
     e8c:	81 e0       	ldi	r24, 0x01	; 1
     e8e:	e6 34       	cpi	r30, 0x46	; 70
     e90:	f8 07       	cpc	r31, r24
     e92:	c9 f7       	brne	.-14     	; 0xe86 <USB_Host_SendControlRequest+0x4c>
			 *  \ingroup Group_PipePacketManagement
			 */
			static inline void Pipe_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearSETUP(void)
			{
				UPINTX &= ~((1 << TXSTPI) | (1 << FIFOCON));
     e94:	80 91 a6 00 	lds	r24, 0x00A6
     e98:	87 77       	andi	r24, 0x77	; 119
     e9a:	80 93 a6 00 	sts	0x00A6, r24
	  Pipe_Write_Byte(*(HeaderStream++));

	Pipe_ClearSETUP();

	if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_SetupSent)) != HOST_SENDCONTROL_Successful)
     e9e:	80 e0       	ldi	r24, 0x00	; 0
     ea0:	a3 df       	rcall	.-186    	; 0xde8 <USB_Host_WaitForIOS>
     ea2:	98 2f       	mov	r25, r24
     ea4:	88 23       	and	r24, r24
     ea6:	09 f0       	breq	.+2      	; 0xeaa <USB_Host_SendControlRequest+0x70>
     ea8:	b2 c0       	rjmp	.+356    	; 0x100e <USB_Host_SendControlRequest+0x1d4>

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
     eaa:	80 91 a9 00 	lds	r24, 0x00A9
     eae:	80 64       	ori	r24, 0x40	; 64
     eb0:	80 93 a9 00 	sts	0x00A9, r24
	  goto End_Of_Control_Send;

	Pipe_Freeze();

	if ((ReturnStatus = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
     eb4:	81 e0       	ldi	r24, 0x01	; 1
     eb6:	54 db       	rcall	.-2392   	; 0x560 <USB_Host_WaitMS>
     eb8:	98 2f       	mov	r25, r24
     eba:	88 23       	and	r24, r24
     ebc:	09 f0       	breq	.+2      	; 0xec0 <USB_Host_SendControlRequest+0x86>
     ebe:	a7 c0       	rjmp	.+334    	; 0x100e <USB_Host_SendControlRequest+0x1d4>
#include "HostStandardReq.h"

uint8_t USB_Host_SendControlRequest(void* const BufferPtr)
{
	uint8_t* HeaderStream   = (uint8_t*)&USB_ControlRequest;
	uint8_t* DataStream     = (uint8_t*)BufferPtr;
     ec0:	21 2f       	mov	r18, r17
     ec2:	30 2f       	mov	r19, r16
     ec4:	c9 01       	movw	r24, r18
     ec6:	8c 01       	movw	r16, r24
	Pipe_Freeze();

	if ((ReturnStatus = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
	  goto End_Of_Control_Send;

	if ((USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_DIRECTION) == REQDIR_DEVICETOHOST)
     ec8:	80 91 3e 01 	lds	r24, 0x013E
     ecc:	87 ff       	sbrs	r24, 7
     ece:	52 c0       	rjmp	.+164    	; 0xf74 <USB_Host_SendControlRequest+0x13a>
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
     ed0:	80 91 aa 00 	lds	r24, 0x00AA
     ed4:	8f 7c       	andi	r24, 0xCF	; 207
     ed6:	80 61       	ori	r24, 0x10	; 16
     ed8:	80 93 aa 00 	sts	0x00AA, r24
	{
		Pipe_SetPipeToken(PIPE_TOKEN_IN);

		if (DataStream != NULL)
     edc:	01 15       	cp	r16, r1
     ede:	11 05       	cpc	r17, r1
     ee0:	69 f5       	brne	.+90     	; 0xf3c <USB_Host_SendControlRequest+0x102>
     ee2:	2e c0       	rjmp	.+92     	; 0xf40 <USB_Host_SendControlRequest+0x106>

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
     ee4:	80 91 a9 00 	lds	r24, 0x00A9
     ee8:	8f 7b       	andi	r24, 0xBF	; 191
     eea:	80 93 a9 00 	sts	0x00A9, r24
		{
			while (DataLen)
			{
				Pipe_Unfreeze();

				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_InReceived)) != HOST_SENDCONTROL_Successful)
     eee:	81 e0       	ldi	r24, 0x01	; 1
     ef0:	7b df       	rcall	.-266    	; 0xde8 <USB_Host_WaitForIOS>
     ef2:	98 2f       	mov	r25, r24
     ef4:	88 23       	and	r24, r24
     ef6:	09 f0       	breq	.+2      	; 0xefa <USB_Host_SendControlRequest+0xc0>
     ef8:	8a c0       	rjmp	.+276    	; 0x100e <USB_Host_SendControlRequest+0x1d4>
			 *  \return Total number of bytes in the currently selected Pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
     efa:	80 91 f6 00 	lds	r24, 0x00F6
     efe:	90 91 f7 00 	lds	r25, 0x00F7
				  goto End_Of_Control_Send;

				if (!(Pipe_BytesInPipe()))
     f02:	89 2b       	or	r24, r25
     f04:	49 f4       	brne	.+18     	; 0xf18 <USB_Host_SendControlRequest+0xde>
     f06:	c0 e0       	ldi	r28, 0x00	; 0
     f08:	d0 e0       	ldi	r29, 0x00	; 0
     f0a:	06 c0       	rjmp	.+12     	; 0xf18 <USB_Host_SendControlRequest+0xde>
			 *  \return Next byte in the currently selected pipe's FIFO buffer.
			 */
			static inline uint8_t Pipe_Read_Byte(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_Read_Byte(void)
			{
				return UPDATX;
     f0c:	80 91 af 00 	lds	r24, 0x00AF
				  DataLen = 0;

				while (Pipe_BytesInPipe() && DataLen)
				{
					*(DataStream++) = Pipe_Read_Byte();
     f10:	f8 01       	movw	r30, r16
     f12:	81 93       	st	Z+, r24
     f14:	8f 01       	movw	r16, r30
					DataLen--;
     f16:	21 97       	sbiw	r28, 0x01	; 1
			 *  \return Total number of bytes in the currently selected Pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
     f18:	80 91 f6 00 	lds	r24, 0x00F6
     f1c:	90 91 f7 00 	lds	r25, 0x00F7
				  goto End_Of_Control_Send;

				if (!(Pipe_BytesInPipe()))
				  DataLen = 0;

				while (Pipe_BytesInPipe() && DataLen)
     f20:	89 2b       	or	r24, r25
     f22:	11 f0       	breq	.+4      	; 0xf28 <USB_Host_SendControlRequest+0xee>
     f24:	20 97       	sbiw	r28, 0x00	; 0
     f26:	91 f7       	brne	.-28     	; 0xf0c <USB_Host_SendControlRequest+0xd2>

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
     f28:	80 91 a9 00 	lds	r24, 0x00A9
     f2c:	80 64       	ori	r24, 0x40	; 64
     f2e:	80 93 a9 00 	sts	0x00A9, r24
			 *  \ingroup Group_PipePacketManagement
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
     f32:	80 91 a6 00 	lds	r24, 0x00A6
     f36:	8e 77       	andi	r24, 0x7E	; 126
     f38:	80 93 a6 00 	sts	0x00A6, r24
	{
		Pipe_SetPipeToken(PIPE_TOKEN_IN);

		if (DataStream != NULL)
		{
			while (DataLen)
     f3c:	20 97       	sbiw	r28, 0x00	; 0
     f3e:	91 f6       	brne	.-92     	; 0xee4 <USB_Host_SendControlRequest+0xaa>
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
     f40:	80 91 aa 00 	lds	r24, 0x00AA
     f44:	8f 7c       	andi	r24, 0xCF	; 207
     f46:	80 62       	ori	r24, 0x20	; 32
     f48:	80 93 aa 00 	sts	0x00AA, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
     f4c:	80 91 a9 00 	lds	r24, 0x00A9
     f50:	8f 7b       	andi	r24, 0xBF	; 191
     f52:	80 93 a9 00 	sts	0x00A9, r24
		}

		Pipe_SetPipeToken(PIPE_TOKEN_OUT);
		Pipe_Unfreeze();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
     f56:	82 e0       	ldi	r24, 0x02	; 2
     f58:	47 df       	rcall	.-370    	; 0xde8 <USB_Host_WaitForIOS>
     f5a:	98 2f       	mov	r25, r24
     f5c:	88 23       	and	r24, r24
     f5e:	09 f0       	breq	.+2      	; 0xf62 <USB_Host_SendControlRequest+0x128>
     f60:	56 c0       	rjmp	.+172    	; 0x100e <USB_Host_SendControlRequest+0x1d4>
			 *  \ingroup Group_PipePacketManagement
			 */
			static inline void Pipe_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearOUT(void)
			{
				UPINTX &= ~((1 << TXOUTI) | (1 << FIFOCON));
     f62:	80 91 a6 00 	lds	r24, 0x00A6
     f66:	8b 77       	andi	r24, 0x7B	; 123
     f68:	80 93 a6 00 	sts	0x00A6, r24
		  goto End_Of_Control_Send;

		Pipe_ClearOUT();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
     f6c:	82 e0       	ldi	r24, 0x02	; 2
     f6e:	3c df       	rcall	.-392    	; 0xde8 <USB_Host_WaitForIOS>
     f70:	98 2f       	mov	r25, r24
     f72:	4d c0       	rjmp	.+154    	; 0x100e <USB_Host_SendControlRequest+0x1d4>
		  goto End_Of_Control_Send;
	}
	else
	{
		if (DataStream != NULL)
     f74:	01 15       	cp	r16, r1
     f76:	11 05       	cpc	r17, r1
     f78:	a9 f1       	breq	.+106    	; 0xfe4 <USB_Host_SendControlRequest+0x1aa>
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
     f7a:	80 91 aa 00 	lds	r24, 0x00AA
     f7e:	8f 7c       	andi	r24, 0xCF	; 207
     f80:	80 62       	ori	r24, 0x20	; 32
     f82:	80 93 aa 00 	sts	0x00AA, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
     f86:	80 91 a9 00 	lds	r24, 0x00A9
     f8a:	8f 7b       	andi	r24, 0xBF	; 191
     f8c:	80 93 a9 00 	sts	0x00A9, r24
     f90:	1d c0       	rjmp	.+58     	; 0xfcc <USB_Host_SendControlRequest+0x192>
			Pipe_SetPipeToken(PIPE_TOKEN_OUT);
			Pipe_Unfreeze();

			while (DataLen)
			{
				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
     f92:	82 e0       	ldi	r24, 0x02	; 2
     f94:	29 df       	rcall	.-430    	; 0xde8 <USB_Host_WaitForIOS>
     f96:	98 2f       	mov	r25, r24
     f98:	88 23       	and	r24, r24
     f9a:	c9 f5       	brne	.+114    	; 0x100e <USB_Host_SendControlRequest+0x1d4>
				  goto End_Of_Control_Send;

				while (DataLen && (Pipe_BytesInPipe() < USB_ControlPipeSize))
     f9c:	80 91 2b 01 	lds	r24, 0x012B
     fa0:	28 2f       	mov	r18, r24
     fa2:	30 e0       	ldi	r19, 0x00	; 0
     fa4:	07 c0       	rjmp	.+14     	; 0xfb4 <USB_Host_SendControlRequest+0x17a>
				{
					Pipe_Write_Byte(*(DataStream++));
     fa6:	f8 01       	movw	r30, r16
     fa8:	81 91       	ld	r24, Z+
     faa:	8f 01       	movw	r16, r30
			 *  \param[in] Byte  Next byte to write into the the currently selected pipe's FIFO buffer.
			 */
			static inline void Pipe_Write_Byte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Write_Byte(const uint8_t Byte)
			{
				UPDATX = Byte;
     fac:	80 93 af 00 	sts	0x00AF, r24
					DataLen--;
     fb0:	21 97       	sbiw	r28, 0x01	; 1
			while (DataLen)
			{
				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
				  goto End_Of_Control_Send;

				while (DataLen && (Pipe_BytesInPipe() < USB_ControlPipeSize))
     fb2:	39 f0       	breq	.+14     	; 0xfc2 <USB_Host_SendControlRequest+0x188>
			 *  \return Total number of bytes in the currently selected Pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
     fb4:	80 91 f6 00 	lds	r24, 0x00F6
     fb8:	90 91 f7 00 	lds	r25, 0x00F7
     fbc:	82 17       	cp	r24, r18
     fbe:	93 07       	cpc	r25, r19
     fc0:	90 f3       	brcs	.-28     	; 0xfa6 <USB_Host_SendControlRequest+0x16c>
			 *  \ingroup Group_PipePacketManagement
			 */
			static inline void Pipe_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearOUT(void)
			{
				UPINTX &= ~((1 << TXOUTI) | (1 << FIFOCON));
     fc2:	80 91 a6 00 	lds	r24, 0x00A6
     fc6:	8b 77       	andi	r24, 0x7B	; 123
     fc8:	80 93 a6 00 	sts	0x00A6, r24
		if (DataStream != NULL)
		{
			Pipe_SetPipeToken(PIPE_TOKEN_OUT);
			Pipe_Unfreeze();

			while (DataLen)
     fcc:	20 97       	sbiw	r28, 0x00	; 0
     fce:	09 f7       	brne	.-62     	; 0xf92 <USB_Host_SendControlRequest+0x158>
				}

				Pipe_ClearOUT();
			}

			if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
     fd0:	82 e0       	ldi	r24, 0x02	; 2
     fd2:	0a df       	rcall	.-492    	; 0xde8 <USB_Host_WaitForIOS>
     fd4:	98 2f       	mov	r25, r24
     fd6:	88 23       	and	r24, r24
     fd8:	d1 f4       	brne	.+52     	; 0x100e <USB_Host_SendControlRequest+0x1d4>

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
     fda:	80 91 a9 00 	lds	r24, 0x00A9
     fde:	80 64       	ori	r24, 0x40	; 64
     fe0:	80 93 a9 00 	sts	0x00A9, r24
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
     fe4:	80 91 aa 00 	lds	r24, 0x00AA
     fe8:	8f 7c       	andi	r24, 0xCF	; 207
     fea:	80 61       	ori	r24, 0x10	; 16
     fec:	80 93 aa 00 	sts	0x00AA, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
     ff0:	80 91 a9 00 	lds	r24, 0x00A9
     ff4:	8f 7b       	andi	r24, 0xBF	; 191
     ff6:	80 93 a9 00 	sts	0x00A9, r24
		}

		Pipe_SetPipeToken(PIPE_TOKEN_IN);
		Pipe_Unfreeze();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_InReceived)) != HOST_SENDCONTROL_Successful)
     ffa:	81 e0       	ldi	r24, 0x01	; 1
     ffc:	f5 de       	rcall	.-534    	; 0xde8 <USB_Host_WaitForIOS>
     ffe:	98 2f       	mov	r25, r24
    1000:	88 23       	and	r24, r24
    1002:	29 f4       	brne	.+10     	; 0x100e <USB_Host_SendControlRequest+0x1d4>
			 *  \ingroup Group_PipePacketManagement
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
    1004:	80 91 a6 00 	lds	r24, 0x00A6
    1008:	8e 77       	andi	r24, 0x7E	; 126
    100a:	80 93 a6 00 	sts	0x00A6, r24

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    100e:	80 91 a9 00 	lds	r24, 0x00A9
    1012:	80 64       	ori	r24, 0x40	; 64
    1014:	80 93 a9 00 	sts	0x00A9, r24
	}

End_Of_Control_Send:
	Pipe_Freeze();

	if (BusSuspended)
    1018:	f0 fc       	sbrc	r15, 0
    101a:	05 c0       	rjmp	.+10     	; 0x1026 <USB_Host_SendControlRequest+0x1ec>
			 *  messages to the device.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				UHCON &= ~(1 << SOFEN);
    101c:	80 91 9e 00 	lds	r24, 0x009E
    1020:	8e 7f       	andi	r24, 0xFE	; 254
    1022:	80 93 9e 00 	sts	0x009E, r24
			 *  \param[in] PipeNumber  Index of the pipe to reset.
			 */
			static inline void Pipe_ResetPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ResetPipe(const uint8_t PipeNumber)
			{
				UPRST = (1 << PipeNumber);
    1026:	81 e0       	ldi	r24, 0x01	; 1
    1028:	80 93 a8 00 	sts	0x00A8, r24
				UPRST = 0;
    102c:	10 92 a8 00 	sts	0x00A8, r1
	  USB_Host_SuspendBus();

	Pipe_ResetPipe(PIPE_CONTROLPIPE);

	return ReturnStatus;
}
    1030:	89 2f       	mov	r24, r25
    1032:	df 91       	pop	r29
    1034:	cf 91       	pop	r28
    1036:	1f 91       	pop	r17
    1038:	0f 91       	pop	r16
    103a:	ff 90       	pop	r15
    103c:	08 95       	ret

0000103e <Pipe_Read_Stream_LE>:
uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE Buffer,
                            uint16_t Length
                            __CALLBACK_PARAM)
{
    103e:	df 92       	push	r13
    1040:	ef 92       	push	r14
    1042:	ff 92       	push	r15
    1044:	0f 93       	push	r16
    1046:	1f 93       	push	r17
    1048:	cf 93       	push	r28
    104a:	df 93       	push	r29
    104c:	18 2f       	mov	r17, r24
    104e:	09 2f       	mov	r16, r25
    1050:	eb 01       	movw	r28, r22
    1052:	7a 01       	movw	r14, r20
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    1054:	80 91 aa 00 	lds	r24, 0x00AA
    1058:	8f 7c       	andi	r24, 0xCF	; 207
    105a:	80 61       	ori	r24, 0x10	; 16
    105c:	80 93 aa 00 	sts	0x00AA, r24
	uint8_t* DataStream = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	uint8_t  ErrorCode;

	Pipe_SetPipeToken(TEMPLATE_TOKEN);

	if ((ErrorCode = Pipe_WaitUntilReady()))
    1060:	eb dc       	rcall	.-1578   	; 0xa38 <Pipe_WaitUntilReady>
    1062:	d8 2e       	mov	r13, r24
    1064:	88 23       	and	r24, r24
    1066:	19 f5       	brne	.+70     	; 0x10ae <Pipe_Read_Stream_LE+0x70>
uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE Buffer,
                            uint16_t Length
                            __CALLBACK_PARAM)
{
	uint8_t* DataStream = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
    1068:	81 2f       	mov	r24, r17
    106a:	90 2f       	mov	r25, r16
    106c:	9c 01       	movw	r18, r24
    106e:	89 01       	movw	r16, r18
    1070:	1c c0       	rjmp	.+56     	; 0x10aa <Pipe_Read_Stream_LE+0x6c>
			 *  \return Boolean true if the currently selected pipe may be read from or written to, depending on its direction.
			 */
			static inline bool Pipe_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsReadWriteAllowed(void)
			{
				return ((UPINTX & (1 << RWAL)) ? true : false);
    1072:	80 91 a6 00 	lds	r24, 0x00A6
	}
	#endif

	while (Length)
	{
		if (!(Pipe_IsReadWriteAllowed()))
    1076:	85 fd       	sbrc	r24, 5
    1078:	12 c0       	rjmp	.+36     	; 0x109e <Pipe_Read_Stream_LE+0x60>
			 *  \ingroup Group_PipePacketManagement
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
    107a:	80 91 a6 00 	lds	r24, 0x00A6
    107e:	8e 77       	andi	r24, 0x7E	; 126
    1080:	80 93 a6 00 	sts	0x00A6, r24
		{
			TEMPLATE_CLEAR_PIPE();

			#if !defined(NO_STREAM_CALLBACKS)
			if ((Callback != NULL) && (Callback() == STREAMCALLBACK_Abort))
    1084:	e1 14       	cp	r14, r1
    1086:	f1 04       	cpc	r15, r1
    1088:	31 f0       	breq	.+12     	; 0x1096 <Pipe_Read_Stream_LE+0x58>
    108a:	f7 01       	movw	r30, r14
    108c:	09 95       	icall
    108e:	81 30       	cpi	r24, 0x01	; 1
    1090:	11 f4       	brne	.+4      	; 0x1096 <Pipe_Read_Stream_LE+0x58>
    1092:	84 e0       	ldi	r24, 0x04	; 4
    1094:	0d c0       	rjmp	.+26     	; 0x10b0 <Pipe_Read_Stream_LE+0x72>
			  return PIPE_RWSTREAM_CallbackAborted;
			#endif

			if ((ErrorCode = Pipe_WaitUntilReady()))
    1096:	d0 dc       	rcall	.-1632   	; 0xa38 <Pipe_WaitUntilReady>
    1098:	88 23       	and	r24, r24
    109a:	39 f0       	breq	.+14     	; 0x10aa <Pipe_Read_Stream_LE+0x6c>
    109c:	09 c0       	rjmp	.+18     	; 0x10b0 <Pipe_Read_Stream_LE+0x72>
			 *  \return Next byte in the currently selected pipe's FIFO buffer.
			 */
			static inline uint8_t Pipe_Read_Byte(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_Read_Byte(void)
			{
				return UPDATX;
    109e:	80 91 af 00 	lds	r24, 0x00AF
			  return ErrorCode;
		}
		else
		{
			TEMPLATE_TRANSFER_BYTE(DataStream);
    10a2:	f8 01       	movw	r30, r16
    10a4:	81 93       	st	Z+, r24
    10a6:	8f 01       	movw	r16, r30
			Length--;
    10a8:	21 97       	sbiw	r28, 0x01	; 1
				} while (Length >= 8);
		}
	}
	#endif

	while (Length)
    10aa:	20 97       	sbiw	r28, 0x00	; 0
    10ac:	11 f7       	brne	.-60     	; 0x1072 <Pipe_Read_Stream_LE+0x34>
    10ae:	8d 2d       	mov	r24, r13
			Length--;
		}
	}

	return PIPE_RWSTREAM_NoError;
}
    10b0:	df 91       	pop	r29
    10b2:	cf 91       	pop	r28
    10b4:	1f 91       	pop	r17
    10b6:	0f 91       	pop	r16
    10b8:	ff 90       	pop	r15
    10ba:	ef 90       	pop	r14
    10bc:	df 90       	pop	r13
    10be:	08 95       	ret

000010c0 <Pipe_Write_Stream_LE>:
uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE Buffer,
                            uint16_t Length
                            __CALLBACK_PARAM)
{
    10c0:	df 92       	push	r13
    10c2:	ef 92       	push	r14
    10c4:	ff 92       	push	r15
    10c6:	0f 93       	push	r16
    10c8:	1f 93       	push	r17
    10ca:	cf 93       	push	r28
    10cc:	df 93       	push	r29
    10ce:	18 2f       	mov	r17, r24
    10d0:	09 2f       	mov	r16, r25
    10d2:	eb 01       	movw	r28, r22
    10d4:	7a 01       	movw	r14, r20
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    10d6:	80 91 aa 00 	lds	r24, 0x00AA
    10da:	8f 7c       	andi	r24, 0xCF	; 207
    10dc:	80 62       	ori	r24, 0x20	; 32
    10de:	80 93 aa 00 	sts	0x00AA, r24
	uint8_t* DataStream = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	uint8_t  ErrorCode;

	Pipe_SetPipeToken(TEMPLATE_TOKEN);

	if ((ErrorCode = Pipe_WaitUntilReady()))
    10e2:	aa dc       	rcall	.-1708   	; 0xa38 <Pipe_WaitUntilReady>
    10e4:	d8 2e       	mov	r13, r24
    10e6:	88 23       	and	r24, r24
    10e8:	19 f5       	brne	.+70     	; 0x1130 <Pipe_Write_Stream_LE+0x70>
uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE Buffer,
                            uint16_t Length
                            __CALLBACK_PARAM)
{
	uint8_t* DataStream = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
    10ea:	81 2f       	mov	r24, r17
    10ec:	90 2f       	mov	r25, r16
    10ee:	9c 01       	movw	r18, r24
    10f0:	89 01       	movw	r16, r18
    10f2:	1c c0       	rjmp	.+56     	; 0x112c <Pipe_Write_Stream_LE+0x6c>
			 *  \return Boolean true if the currently selected pipe may be read from or written to, depending on its direction.
			 */
			static inline bool Pipe_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsReadWriteAllowed(void)
			{
				return ((UPINTX & (1 << RWAL)) ? true : false);
    10f4:	80 91 a6 00 	lds	r24, 0x00A6
	}
	#endif

	while (Length)
	{
		if (!(Pipe_IsReadWriteAllowed()))
    10f8:	85 fd       	sbrc	r24, 5
    10fa:	12 c0       	rjmp	.+36     	; 0x1120 <Pipe_Write_Stream_LE+0x60>
			 *  \ingroup Group_PipePacketManagement
			 */
			static inline void Pipe_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearOUT(void)
			{
				UPINTX &= ~((1 << TXOUTI) | (1 << FIFOCON));
    10fc:	80 91 a6 00 	lds	r24, 0x00A6
    1100:	8b 77       	andi	r24, 0x7B	; 123
    1102:	80 93 a6 00 	sts	0x00A6, r24
		{
			TEMPLATE_CLEAR_PIPE();

			#if !defined(NO_STREAM_CALLBACKS)
			if ((Callback != NULL) && (Callback() == STREAMCALLBACK_Abort))
    1106:	e1 14       	cp	r14, r1
    1108:	f1 04       	cpc	r15, r1
    110a:	31 f0       	breq	.+12     	; 0x1118 <Pipe_Write_Stream_LE+0x58>
    110c:	f7 01       	movw	r30, r14
    110e:	09 95       	icall
    1110:	81 30       	cpi	r24, 0x01	; 1
    1112:	11 f4       	brne	.+4      	; 0x1118 <Pipe_Write_Stream_LE+0x58>
    1114:	84 e0       	ldi	r24, 0x04	; 4
    1116:	0d c0       	rjmp	.+26     	; 0x1132 <Pipe_Write_Stream_LE+0x72>
			  return PIPE_RWSTREAM_CallbackAborted;
			#endif

			if ((ErrorCode = Pipe_WaitUntilReady()))
    1118:	8f dc       	rcall	.-1762   	; 0xa38 <Pipe_WaitUntilReady>
    111a:	88 23       	and	r24, r24
    111c:	39 f0       	breq	.+14     	; 0x112c <Pipe_Write_Stream_LE+0x6c>
    111e:	09 c0       	rjmp	.+18     	; 0x1132 <Pipe_Write_Stream_LE+0x72>
			  return ErrorCode;
		}
		else
		{
			TEMPLATE_TRANSFER_BYTE(DataStream);
    1120:	f8 01       	movw	r30, r16
    1122:	81 91       	ld	r24, Z+
    1124:	8f 01       	movw	r16, r30
			 *  \param[in] Byte  Next byte to write into the the currently selected pipe's FIFO buffer.
			 */
			static inline void Pipe_Write_Byte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Write_Byte(const uint8_t Byte)
			{
				UPDATX = Byte;
    1126:	80 93 af 00 	sts	0x00AF, r24
			Length--;
    112a:	21 97       	sbiw	r28, 0x01	; 1
				} while (Length >= 8);
		}
	}
	#endif

	while (Length)
    112c:	20 97       	sbiw	r28, 0x00	; 0
    112e:	11 f7       	brne	.-60     	; 0x10f4 <Pipe_Write_Stream_LE+0x34>
    1130:	8d 2d       	mov	r24, r13
			Length--;
		}
	}

	return PIPE_RWSTREAM_NoError;
}
    1132:	df 91       	pop	r29
    1134:	cf 91       	pop	r28
    1136:	1f 91       	pop	r17
    1138:	0f 91       	pop	r16
    113a:	ff 90       	pop	r15
    113c:	ef 90       	pop	r14
    113e:	df 90       	pop	r13
    1140:	08 95       	ret

00001142 <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
    1142:	ff 92       	push	r15
    1144:	0f 93       	push	r16
    1146:	1f 93       	push	r17
			 *  \return Index of the currently selected pipe.
			 */
			static inline uint8_t Pipe_GetCurrentPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetCurrentPipe(void)
			{
				return (UPNUM & PIPE_PIPENUM_MASK);
    1148:	07 ea       	ldi	r16, 0xA7	; 167
    114a:	10 e0       	ldi	r17, 0x00	; 0
    114c:	f8 01       	movw	r30, r16
    114e:	f0 80       	ld	r15, Z
    1150:	f7 e0       	ldi	r31, 0x07	; 7
    1152:	ff 22       	and	r15, r31
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
    1154:	f8 01       	movw	r30, r16
    1156:	10 82       	st	Z, r1
{
	uint8_t PrevPipe = Pipe_GetCurrentPipe();

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	USB_Host_ProcessNextHostState();
    1158:	c9 da       	rcall	.-2670   	; 0x6ec <USB_Host_ProcessNextHostState>
    115a:	f8 01       	movw	r30, r16
    115c:	f0 82       	st	Z, r15
		if (USB_CurrentMode == USB_MODE_Device)
		  USB_DeviceTask();
		else if (USB_CurrentMode == USB_MODE_Host)
		  USB_HostTask();
	#endif
}
    115e:	1f 91       	pop	r17
    1160:	0f 91       	pop	r16
    1162:	ff 90       	pop	r15
    1164:	08 95       	ret

00001166 <DCOMP_SI_Host_NextSIInterface>:

	return SI_ENUMERROR_NoError;
}

uint8_t DCOMP_SI_Host_NextSIInterface(void* const CurrentDescriptor)
{
    1166:	fc 01       	movw	r30, r24
	USB_Descriptor_Header_t* Header = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Header_t);

	if (Header->Type == DTYPE_Interface)
    1168:	81 81       	ldd	r24, Z+1	; 0x01
    116a:	84 30       	cpi	r24, 0x04	; 4
    116c:	59 f4       	brne	.+22     	; 0x1184 <DCOMP_SI_Host_NextSIInterface+0x1e>
	{
		USB_Descriptor_Interface_t* Interface = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Interface_t);

		if ((Interface->Class    == SI_CSCP_StillImageClass)    &&
    116e:	85 81       	ldd	r24, Z+5	; 0x05
    1170:	86 30       	cpi	r24, 0x06	; 6
    1172:	41 f4       	brne	.+16     	; 0x1184 <DCOMP_SI_Host_NextSIInterface+0x1e>
    1174:	86 81       	ldd	r24, Z+6	; 0x06
    1176:	81 30       	cpi	r24, 0x01	; 1
    1178:	29 f4       	brne	.+10     	; 0x1184 <DCOMP_SI_Host_NextSIInterface+0x1e>
    117a:	87 81       	ldd	r24, Z+7	; 0x07
    117c:	81 30       	cpi	r24, 0x01	; 1
    117e:	11 f4       	brne	.+4      	; 0x1184 <DCOMP_SI_Host_NextSIInterface+0x1e>
    1180:	80 e0       	ldi	r24, 0x00	; 0
    1182:	08 95       	ret
    1184:	82 e0       	ldi	r24, 0x02	; 2
			return DESCRIPTOR_SEARCH_Found;
		}
	}

	return DESCRIPTOR_SEARCH_NotFound;
}
    1186:	08 95       	ret

00001188 <SI_Host_SendBlockHeader>:
	return DESCRIPTOR_SEARCH_NotFound;
}

uint8_t SI_Host_SendBlockHeader(USB_ClassInfo_SI_Host_t* const SIInterfaceInfo,
                                PIMA_Container_t* const PIMAHeader)
{
    1188:	1f 93       	push	r17
    118a:	cf 93       	push	r28
    118c:	df 93       	push	r29
    118e:	fc 01       	movw	r30, r24
    1190:	eb 01       	movw	r28, r22
	uint8_t ErrorCode;

	if ((USB_HostState != HOST_STATE_Configured) || !(SIInterfaceInfo->State.IsActive))
    1192:	80 91 46 01 	lds	r24, 0x0146
    1196:	8c 30       	cpi	r24, 0x0C	; 12
    1198:	09 f0       	breq	.+2      	; 0x119c <SI_Host_SendBlockHeader+0x14>
    119a:	3e c0       	rjmp	.+124    	; 0x1218 <SI_Host_SendBlockHeader+0x90>
    119c:	86 81       	ldd	r24, Z+6	; 0x06
    119e:	88 23       	and	r24, r24
    11a0:	d9 f1       	breq	.+118    	; 0x1218 <SI_Host_SendBlockHeader+0x90>
	  return PIPE_RWSTREAM_DeviceDisconnected;

	if (SIInterfaceInfo->State.IsSessionOpen)
    11a2:	86 85       	ldd	r24, Z+14	; 0x0e
    11a4:	88 23       	and	r24, r24
    11a6:	79 f0       	breq	.+30     	; 0x11c6 <SI_Host_SendBlockHeader+0x3e>
	  PIMAHeader->TransactionID = SIInterfaceInfo->State.TransactionID++;
    11a8:	87 85       	ldd	r24, Z+15	; 0x0f
    11aa:	90 89       	ldd	r25, Z+16	; 0x10
    11ac:	a1 89       	ldd	r26, Z+17	; 0x11
    11ae:	b2 89       	ldd	r27, Z+18	; 0x12
    11b0:	88 87       	std	Y+8, r24	; 0x08
    11b2:	99 87       	std	Y+9, r25	; 0x09
    11b4:	aa 87       	std	Y+10, r26	; 0x0a
    11b6:	bb 87       	std	Y+11, r27	; 0x0b
    11b8:	01 96       	adiw	r24, 0x01	; 1
    11ba:	a1 1d       	adc	r26, r1
    11bc:	b1 1d       	adc	r27, r1
    11be:	87 87       	std	Z+15, r24	; 0x0f
    11c0:	90 8b       	std	Z+16, r25	; 0x10
    11c2:	a1 8b       	std	Z+17, r26	; 0x11
    11c4:	b2 8b       	std	Z+18, r27	; 0x12

	Pipe_SelectPipe(SIInterfaceInfo->Config.DataOUTPipeNumber);
    11c6:	82 81       	ldd	r24, Z+2	; 0x02
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
    11c8:	80 93 a7 00 	sts	0x00A7, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    11cc:	80 91 a9 00 	lds	r24, 0x00A9
    11d0:	8f 7b       	andi	r24, 0xBF	; 191
    11d2:	80 93 a9 00 	sts	0x00A9, r24
	Pipe_Unfreeze();

	if ((ErrorCode = Pipe_Write_Stream_LE(PIMAHeader, PIMA_COMMAND_SIZE(0), NO_STREAM_CALLBACK)) != PIPE_RWSTREAM_NoError)
    11d6:	ce 01       	movw	r24, r28
    11d8:	6c e0       	ldi	r22, 0x0C	; 12
    11da:	70 e0       	ldi	r23, 0x00	; 0
    11dc:	40 e0       	ldi	r20, 0x00	; 0
    11de:	50 e0       	ldi	r21, 0x00	; 0
    11e0:	6f df       	rcall	.-290    	; 0x10c0 <Pipe_Write_Stream_LE>
    11e2:	18 2f       	mov	r17, r24
    11e4:	88 23       	and	r24, r24
    11e6:	c9 f4       	brne	.+50     	; 0x121a <SI_Host_SendBlockHeader+0x92>
	  return ErrorCode;

	uint8_t ParamBytes = (PIMAHeader->DataLength - PIMA_COMMAND_SIZE(0));
    11e8:	68 81       	ld	r22, Y
    11ea:	6c 50       	subi	r22, 0x0C	; 12

	if (ParamBytes)
    11ec:	51 f0       	breq	.+20     	; 0x1202 <SI_Host_SendBlockHeader+0x7a>
	{
		if ((ErrorCode = Pipe_Write_Stream_LE(&PIMAHeader->Params, ParamBytes, NO_STREAM_CALLBACK)) != PIPE_RWSTREAM_NoError)
    11ee:	ce 01       	movw	r24, r28
    11f0:	0c 96       	adiw	r24, 0x0c	; 12
    11f2:	70 e0       	ldi	r23, 0x00	; 0
    11f4:	40 e0       	ldi	r20, 0x00	; 0
    11f6:	50 e0       	ldi	r21, 0x00	; 0
    11f8:	63 df       	rcall	.-314    	; 0x10c0 <Pipe_Write_Stream_LE>
    11fa:	88 23       	and	r24, r24
    11fc:	11 f0       	breq	.+4      	; 0x1202 <SI_Host_SendBlockHeader+0x7a>
    11fe:	18 2f       	mov	r17, r24
    1200:	0c c0       	rjmp	.+24     	; 0x121a <SI_Host_SendBlockHeader+0x92>
			 *  \ingroup Group_PipePacketManagement
			 */
			static inline void Pipe_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearOUT(void)
			{
				UPINTX &= ~((1 << TXOUTI) | (1 << FIFOCON));
    1202:	80 91 a6 00 	lds	r24, 0x00A6
    1206:	8b 77       	andi	r24, 0x7B	; 123
    1208:	80 93 a6 00 	sts	0x00A6, r24

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    120c:	80 91 a9 00 	lds	r24, 0x00A9
    1210:	80 64       	ori	r24, 0x40	; 64
    1212:	80 93 a9 00 	sts	0x00A9, r24
    1216:	01 c0       	rjmp	.+2      	; 0x121a <SI_Host_SendBlockHeader+0x92>
	}

	Pipe_ClearOUT();
	Pipe_Freeze();

	return PIPE_RWSTREAM_NoError;
    1218:	12 e0       	ldi	r17, 0x02	; 2
}
    121a:	81 2f       	mov	r24, r17
    121c:	df 91       	pop	r29
    121e:	cf 91       	pop	r28
    1220:	1f 91       	pop	r17
    1222:	08 95       	ret

00001224 <SI_Host_SendCommand>:

uint8_t SI_Host_SendCommand(USB_ClassInfo_SI_Host_t* const SIInterfaceInfo,
                            const uint16_t Operation,
                            const uint8_t TotalParams,
                            uint32_t* const Params)
{
    1224:	df 92       	push	r13
    1226:	ef 92       	push	r14
    1228:	ff 92       	push	r15
    122a:	0f 93       	push	r16
    122c:	1f 93       	push	r17
    122e:	df 93       	push	r29
    1230:	cf 93       	push	r28
    1232:	cd b7       	in	r28, 0x3d	; 61
    1234:	de b7       	in	r29, 0x3e	; 62
    1236:	68 97       	sbiw	r28, 0x18	; 24
    1238:	0f b6       	in	r0, 0x3f	; 63
    123a:	f8 94       	cli
    123c:	de bf       	out	0x3e, r29	; 62
    123e:	0f be       	out	0x3f, r0	; 63
    1240:	cd bf       	out	0x3d, r28	; 61
    1242:	7c 01       	movw	r14, r24
    1244:	52 2f       	mov	r21, r18
    1246:	d3 2e       	mov	r13, r19
	if ((USB_HostState != HOST_STATE_Configured) || !(SIInterfaceInfo->State.IsActive))
    1248:	80 91 46 01 	lds	r24, 0x0146
    124c:	8c 30       	cpi	r24, 0x0C	; 12
    124e:	89 f5       	brne	.+98     	; 0x12b2 <SI_Host_SendCommand+0x8e>
    1250:	d7 01       	movw	r26, r14
    1252:	16 96       	adiw	r26, 0x06	; 6
    1254:	8c 91       	ld	r24, X
    1256:	88 23       	and	r24, r24
    1258:	61 f1       	breq	.+88     	; 0x12b2 <SI_Host_SendCommand+0x8e>
	PIMA_Container_t PIMABlock = (PIMA_Container_t)
		{
			.DataLength    = PIMA_COMMAND_SIZE(TotalParams),
			.Type          = PIMA_CONTAINER_CommandBlock,
			.Code          = Operation,
		};
    125a:	e4 2f       	mov	r30, r20
    125c:	f0 e0       	ldi	r31, 0x00	; 0
    125e:	8e 01       	movw	r16, r28
    1260:	0f 5f       	subi	r16, 0xFF	; 255
    1262:	1f 4f       	sbci	r17, 0xFF	; 255
    1264:	88 e1       	ldi	r24, 0x18	; 24
    1266:	d8 01       	movw	r26, r16
    1268:	1d 92       	st	X+, r1
    126a:	8a 95       	dec	r24
    126c:	e9 f7       	brne	.-6      	; 0x1268 <SI_Host_SendCommand+0x44>
    126e:	cf 01       	movw	r24, r30
    1270:	03 96       	adiw	r24, 0x03	; 3
    1272:	88 0f       	add	r24, r24
    1274:	99 1f       	adc	r25, r25
    1276:	88 0f       	add	r24, r24
    1278:	99 1f       	adc	r25, r25
    127a:	a0 e0       	ldi	r26, 0x00	; 0
    127c:	b0 e0       	ldi	r27, 0x00	; 0
    127e:	89 83       	std	Y+1, r24	; 0x01
    1280:	9a 83       	std	Y+2, r25	; 0x02
    1282:	ab 83       	std	Y+3, r26	; 0x03
    1284:	bc 83       	std	Y+4, r27	; 0x04
    1286:	81 e0       	ldi	r24, 0x01	; 1
    1288:	90 e0       	ldi	r25, 0x00	; 0
    128a:	9e 83       	std	Y+6, r25	; 0x06
    128c:	8d 83       	std	Y+5, r24	; 0x05
    128e:	78 87       	std	Y+8, r23	; 0x08
    1290:	6f 83       	std	Y+7, r22	; 0x07

	memcpy(&PIMABlock.Params, Params, sizeof(uint32_t) * TotalParams);
    1292:	9e 01       	movw	r18, r28
    1294:	23 5f       	subi	r18, 0xF3	; 243
    1296:	3f 4f       	sbci	r19, 0xFF	; 255
    1298:	ee 0f       	add	r30, r30
    129a:	ff 1f       	adc	r31, r31
    129c:	ee 0f       	add	r30, r30
    129e:	ff 1f       	adc	r31, r31
    12a0:	c9 01       	movw	r24, r18
    12a2:	65 2f       	mov	r22, r21
    12a4:	7d 2d       	mov	r23, r13
    12a6:	af 01       	movw	r20, r30
    12a8:	aa d2       	rcall	.+1364   	; 0x17fe <memcpy>

	if ((ErrorCode = SI_Host_SendBlockHeader(SIInterfaceInfo, &PIMABlock)) != PIPE_RWSTREAM_NoError)
    12aa:	c7 01       	movw	r24, r14
    12ac:	b8 01       	movw	r22, r16
    12ae:	6c df       	rcall	.-296    	; 0x1188 <SI_Host_SendBlockHeader>
    12b0:	01 c0       	rjmp	.+2      	; 0x12b4 <SI_Host_SendCommand+0x90>
    12b2:	81 e0       	ldi	r24, 0x01	; 1
	  return ErrorCode;

	return PIPE_RWSTREAM_NoError;
}
    12b4:	68 96       	adiw	r28, 0x18	; 24
    12b6:	0f b6       	in	r0, 0x3f	; 63
    12b8:	f8 94       	cli
    12ba:	de bf       	out	0x3e, r29	; 62
    12bc:	0f be       	out	0x3f, r0	; 63
    12be:	cd bf       	out	0x3d, r28	; 61
    12c0:	cf 91       	pop	r28
    12c2:	df 91       	pop	r29
    12c4:	1f 91       	pop	r17
    12c6:	0f 91       	pop	r16
    12c8:	ff 90       	pop	r15
    12ca:	ef 90       	pop	r14
    12cc:	df 90       	pop	r13
    12ce:	08 95       	ret

000012d0 <SI_Host_ReceiveBlockHeader>:
	return PIPE_RWSTREAM_NoError;
}

uint8_t SI_Host_ReceiveBlockHeader(USB_ClassInfo_SI_Host_t* const SIInterfaceInfo,
                                   PIMA_Container_t* const PIMAHeader)
{
    12d0:	cf 93       	push	r28
    12d2:	df 93       	push	r29
    12d4:	fc 01       	movw	r30, r24
    12d6:	eb 01       	movw	r28, r22
			/** Returns the current USB frame number, when in host mode. Every millisecond the USB bus is active (i.e. not suspended)
			 *  the frame number is incremented by one.
			 */
			static inline uint16_t USB_Host_GetFrameNumber(void)
			{
				return UHFNUM;
    12d8:	60 91 a2 00 	lds	r22, 0x00A2
    12dc:	70 91 a3 00 	lds	r23, 0x00A3
	uint16_t TimeoutMSRem        = SI_COMMAND_DATA_TIMEOUT_MS;
	uint16_t PreviousFrameNumber = USB_Host_GetFrameNumber();

	if ((USB_HostState != HOST_STATE_Configured) || !(SIInterfaceInfo->State.IsActive))
    12e0:	80 91 46 01 	lds	r24, 0x0146
    12e4:	8c 30       	cpi	r24, 0x0C	; 12
    12e6:	09 f0       	breq	.+2      	; 0x12ea <SI_Host_ReceiveBlockHeader+0x1a>
    12e8:	6c c0       	rjmp	.+216    	; 0x13c2 <SI_Host_ReceiveBlockHeader+0xf2>
    12ea:	86 81       	ldd	r24, Z+6	; 0x06
    12ec:	88 23       	and	r24, r24
    12ee:	09 f4       	brne	.+2      	; 0x12f2 <SI_Host_ReceiveBlockHeader+0x22>
    12f0:	68 c0       	rjmp	.+208    	; 0x13c2 <SI_Host_ReceiveBlockHeader+0xf2>
	  return PIPE_RWSTREAM_DeviceDisconnected;

	Pipe_SelectPipe(SIInterfaceInfo->Config.DataINPipeNumber);
    12f2:	40 81       	ld	r20, Z
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
    12f4:	40 93 a7 00 	sts	0x00A7, r20

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    12f8:	80 91 a9 00 	lds	r24, 0x00A9
    12fc:	8f 7b       	andi	r24, 0xBF	; 191
    12fe:	80 93 a9 00 	sts	0x00A9, r24
    1302:	20 e1       	ldi	r18, 0x10	; 16
    1304:	37 e2       	ldi	r19, 0x27	; 39
    1306:	3a c0       	rjmp	.+116    	; 0x137c <SI_Host_ReceiveBlockHeader+0xac>
    1308:	80 91 a2 00 	lds	r24, 0x00A2
    130c:	90 91 a3 00 	lds	r25, 0x00A3

	while (!(Pipe_IsINReceived()))
	{
		uint16_t CurrentFrameNumber = USB_Host_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
    1310:	86 17       	cp	r24, r22
    1312:	97 07       	cpc	r25, r23
    1314:	41 f0       	breq	.+16     	; 0x1326 <SI_Host_ReceiveBlockHeader+0x56>
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
    1316:	21 15       	cp	r18, r1
    1318:	31 05       	cpc	r19, r1
    131a:	11 f4       	brne	.+4      	; 0x1320 <SI_Host_ReceiveBlockHeader+0x50>
    131c:	83 e0       	ldi	r24, 0x03	; 3
    131e:	52 c0       	rjmp	.+164    	; 0x13c4 <SI_Host_ReceiveBlockHeader+0xf4>
    1320:	21 50       	subi	r18, 0x01	; 1
    1322:	30 40       	sbci	r19, 0x00	; 0
    1324:	bc 01       	movw	r22, r24

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    1326:	80 91 a9 00 	lds	r24, 0x00A9
    132a:	80 64       	ori	r24, 0x40	; 64
    132c:	80 93 a9 00 	sts	0x00A9, r24
			  return PIPE_RWSTREAM_Timeout;
		}

		Pipe_Freeze();
		Pipe_SelectPipe(SIInterfaceInfo->Config.DataOUTPipeNumber);
    1330:	92 81       	ldd	r25, Z+2	; 0x02
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
    1332:	90 93 a7 00 	sts	0x00A7, r25

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    1336:	80 91 a9 00 	lds	r24, 0x00A9
    133a:	8f 7b       	andi	r24, 0xBF	; 191
    133c:	80 93 a9 00 	sts	0x00A9, r24
			 *  \return Boolean true if the current pipe has been stalled by the attached device, false otherwise.
			 */
			static inline bool Pipe_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsStalled(void)
			{
				return ((UPINTX & (1 << RXSTALLI)) ? true : false);
    1340:	80 91 a6 00 	lds	r24, 0x00A6
		Pipe_Unfreeze();

		if (Pipe_IsStalled())
    1344:	81 ff       	sbrs	r24, 1
    1346:	02 c0       	rjmp	.+4      	; 0x134c <SI_Host_ReceiveBlockHeader+0x7c>
		{
			USB_Host_ClearPipeStall(SIInterfaceInfo->Config.DataOUTPipeNumber);
    1348:	89 2f       	mov	r24, r25
    134a:	11 c0       	rjmp	.+34     	; 0x136e <SI_Host_ReceiveBlockHeader+0x9e>

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    134c:	80 91 a9 00 	lds	r24, 0x00A9
    1350:	80 64       	ori	r24, 0x40	; 64
    1352:	80 93 a9 00 	sts	0x00A9, r24
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
    1356:	40 93 a7 00 	sts	0x00A7, r20

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    135a:	80 91 a9 00 	lds	r24, 0x00A9
    135e:	8f 7b       	andi	r24, 0xBF	; 191
    1360:	80 93 a9 00 	sts	0x00A9, r24
			 *  \return Boolean true if the current pipe has been stalled by the attached device, false otherwise.
			 */
			static inline bool Pipe_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsStalled(void)
			{
				return ((UPINTX & (1 << RXSTALLI)) ? true : false);
    1364:	80 91 a6 00 	lds	r24, 0x00A6

		Pipe_Freeze();
		Pipe_SelectPipe(SIInterfaceInfo->Config.DataINPipeNumber);
		Pipe_Unfreeze();

		if (Pipe_IsStalled())
    1368:	81 ff       	sbrs	r24, 1
    136a:	04 c0       	rjmp	.+8      	; 0x1374 <SI_Host_ReceiveBlockHeader+0xa4>
		{
			USB_Host_ClearPipeStall(SIInterfaceInfo->Config.DataINPipeNumber);
    136c:	84 2f       	mov	r24, r20
    136e:	91 d9       	rcall	.-3294   	; 0x692 <USB_Host_ClearPipeStall>
    1370:	81 e0       	ldi	r24, 0x01	; 1
    1372:	28 c0       	rjmp	.+80     	; 0x13c4 <SI_Host_ReceiveBlockHeader+0xf4>
			return PIPE_RWSTREAM_PipeStalled;
		}

		if (USB_HostState == HOST_STATE_Unattached)
    1374:	80 91 46 01 	lds	r24, 0x0146
    1378:	82 30       	cpi	r24, 0x02	; 2
    137a:	19 f1       	breq	.+70     	; 0x13c2 <SI_Host_ReceiveBlockHeader+0xf2>
			 *  \return Boolean true if the current pipe has received an IN packet, false otherwise.
			 */
			static inline bool Pipe_IsINReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsINReceived(void)
			{
				return ((UPINTX & (1 << RXINI)) ? true : false);
    137c:	80 91 a6 00 	lds	r24, 0x00A6
	  return PIPE_RWSTREAM_DeviceDisconnected;

	Pipe_SelectPipe(SIInterfaceInfo->Config.DataINPipeNumber);
	Pipe_Unfreeze();

	while (!(Pipe_IsINReceived()))
    1380:	80 ff       	sbrs	r24, 0
    1382:	c2 cf       	rjmp	.-124    	; 0x1308 <SI_Host_ReceiveBlockHeader+0x38>

		if (USB_HostState == HOST_STATE_Unattached)
		  return PIPE_RWSTREAM_DeviceDisconnected;
	}

	Pipe_Read_Stream_LE(PIMAHeader, PIMA_COMMAND_SIZE(0), NO_STREAM_CALLBACK);
    1384:	ce 01       	movw	r24, r28
    1386:	6c e0       	ldi	r22, 0x0C	; 12
    1388:	70 e0       	ldi	r23, 0x00	; 0
    138a:	40 e0       	ldi	r20, 0x00	; 0
    138c:	50 e0       	ldi	r21, 0x00	; 0
    138e:	57 de       	rcall	.-850    	; 0x103e <Pipe_Read_Stream_LE>

	if (PIMAHeader->Type == PIMA_CONTAINER_ResponseBlock)
    1390:	8c 81       	ldd	r24, Y+4	; 0x04
    1392:	9d 81       	ldd	r25, Y+5	; 0x05
    1394:	03 97       	sbiw	r24, 0x03	; 3
    1396:	71 f4       	brne	.+28     	; 0x13b4 <SI_Host_ReceiveBlockHeader+0xe4>
	{
		uint8_t ParamBytes = (PIMAHeader->DataLength - PIMA_COMMAND_SIZE(0));
    1398:	68 81       	ld	r22, Y
    139a:	6c 50       	subi	r22, 0x0C	; 12

		if (ParamBytes)
    139c:	31 f0       	breq	.+12     	; 0x13aa <SI_Host_ReceiveBlockHeader+0xda>
		  Pipe_Read_Stream_LE(&PIMAHeader->Params, ParamBytes, NO_STREAM_CALLBACK);
    139e:	ce 01       	movw	r24, r28
    13a0:	0c 96       	adiw	r24, 0x0c	; 12
    13a2:	70 e0       	ldi	r23, 0x00	; 0
    13a4:	40 e0       	ldi	r20, 0x00	; 0
    13a6:	50 e0       	ldi	r21, 0x00	; 0
    13a8:	4a de       	rcall	.-876    	; 0x103e <Pipe_Read_Stream_LE>
			 *  \ingroup Group_PipePacketManagement
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
    13aa:	80 91 a6 00 	lds	r24, 0x00A6
    13ae:	8e 77       	andi	r24, 0x7E	; 126
    13b0:	80 93 a6 00 	sts	0x00A6, r24

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    13b4:	80 91 a9 00 	lds	r24, 0x00A9
    13b8:	80 64       	ori	r24, 0x40	; 64
    13ba:	80 93 a9 00 	sts	0x00A9, r24
    13be:	80 e0       	ldi	r24, 0x00	; 0
    13c0:	01 c0       	rjmp	.+2      	; 0x13c4 <SI_Host_ReceiveBlockHeader+0xf4>
		Pipe_ClearIN();
	}

	Pipe_Freeze();

	return PIPE_RWSTREAM_NoError;
    13c2:	82 e0       	ldi	r24, 0x02	; 2
}
    13c4:	df 91       	pop	r29
    13c6:	cf 91       	pop	r28
    13c8:	08 95       	ret

000013ca <SI_Host_ReceiveResponse>:

	return PIPE_RWSTREAM_NoError;
}

uint8_t SI_Host_ReceiveResponse(USB_ClassInfo_SI_Host_t* const SIInterfaceInfo)
{
    13ca:	df 93       	push	r29
    13cc:	cf 93       	push	r28
    13ce:	cd b7       	in	r28, 0x3d	; 61
    13d0:	de b7       	in	r29, 0x3e	; 62
    13d2:	68 97       	sbiw	r28, 0x18	; 24
    13d4:	0f b6       	in	r0, 0x3f	; 63
    13d6:	f8 94       	cli
    13d8:	de bf       	out	0x3e, r29	; 62
    13da:	0f be       	out	0x3f, r0	; 63
    13dc:	cd bf       	out	0x3d, r28	; 61
    13de:	fc 01       	movw	r30, r24
	uint8_t ErrorCode;
	PIMA_Container_t PIMABlock;

	if ((USB_HostState != HOST_STATE_Configured) || !(SIInterfaceInfo->State.IsActive))
    13e0:	80 91 46 01 	lds	r24, 0x0146
    13e4:	8c 30       	cpi	r24, 0x0C	; 12
    13e6:	a9 f4       	brne	.+42     	; 0x1412 <SI_Host_ReceiveResponse+0x48>
    13e8:	86 81       	ldd	r24, Z+6	; 0x06
    13ea:	88 23       	and	r24, r24
    13ec:	91 f0       	breq	.+36     	; 0x1412 <SI_Host_ReceiveResponse+0x48>
	  return HOST_SENDCONTROL_DeviceDisconnected;

	if ((ErrorCode = SI_Host_ReceiveBlockHeader(SIInterfaceInfo, &PIMABlock)) != PIPE_RWSTREAM_NoError)
    13ee:	cf 01       	movw	r24, r30
    13f0:	be 01       	movw	r22, r28
    13f2:	6f 5f       	subi	r22, 0xFF	; 255
    13f4:	7f 4f       	sbci	r23, 0xFF	; 255
    13f6:	6c df       	rcall	.-296    	; 0x12d0 <SI_Host_ReceiveBlockHeader>
    13f8:	28 2f       	mov	r18, r24
    13fa:	88 23       	and	r24, r24
    13fc:	69 f4       	brne	.+26     	; 0x1418 <SI_Host_ReceiveResponse+0x4e>
	  return ErrorCode;

	if ((PIMABlock.Type != PIMA_CONTAINER_ResponseBlock) || (PIMABlock.Code != 0x2001))
    13fe:	8d 81       	ldd	r24, Y+5	; 0x05
    1400:	9e 81       	ldd	r25, Y+6	; 0x06
    1402:	03 97       	sbiw	r24, 0x03	; 3
    1404:	41 f4       	brne	.+16     	; 0x1416 <SI_Host_ReceiveResponse+0x4c>
    1406:	8f 81       	ldd	r24, Y+7	; 0x07
    1408:	98 85       	ldd	r25, Y+8	; 0x08
    140a:	81 50       	subi	r24, 0x01	; 1
    140c:	90 42       	sbci	r25, 0x20	; 32
    140e:	19 f4       	brne	.+6      	; 0x1416 <SI_Host_ReceiveResponse+0x4c>
    1410:	03 c0       	rjmp	.+6      	; 0x1418 <SI_Host_ReceiveResponse+0x4e>
    1412:	21 e0       	ldi	r18, 0x01	; 1
    1414:	01 c0       	rjmp	.+2      	; 0x1418 <SI_Host_ReceiveResponse+0x4e>
    1416:	20 e8       	ldi	r18, 0x80	; 128
	  return SI_ERROR_LOGICAL_CMD_FAILED;

	return PIPE_RWSTREAM_NoError;
}
    1418:	82 2f       	mov	r24, r18
    141a:	68 96       	adiw	r28, 0x18	; 24
    141c:	0f b6       	in	r0, 0x3f	; 63
    141e:	f8 94       	cli
    1420:	de bf       	out	0x3e, r29	; 62
    1422:	0f be       	out	0x3f, r0	; 63
    1424:	cd bf       	out	0x3d, r28	; 61
    1426:	cf 91       	pop	r28
    1428:	df 91       	pop	r29
    142a:	08 95       	ret

0000142c <SI_Host_CloseSession>:

	return PIPE_RWSTREAM_NoError;
}

uint8_t SI_Host_CloseSession(USB_ClassInfo_SI_Host_t* const SIInterfaceInfo)
{
    142c:	ef 92       	push	r14
    142e:	ff 92       	push	r15
    1430:	0f 93       	push	r16
    1432:	1f 93       	push	r17
    1434:	df 93       	push	r29
    1436:	cf 93       	push	r28
    1438:	cd b7       	in	r28, 0x3d	; 61
    143a:	de b7       	in	r29, 0x3e	; 62
    143c:	68 97       	sbiw	r28, 0x18	; 24
    143e:	0f b6       	in	r0, 0x3f	; 63
    1440:	f8 94       	cli
    1442:	de bf       	out	0x3e, r29	; 62
    1444:	0f be       	out	0x3f, r0	; 63
    1446:	cd bf       	out	0x3d, r28	; 61
    1448:	8c 01       	movw	r16, r24
	if ((USB_HostState != HOST_STATE_Configured) || !(SIInterfaceInfo->State.IsActive))
    144a:	80 91 46 01 	lds	r24, 0x0146
    144e:	8c 30       	cpi	r24, 0x0C	; 12
    1450:	09 f0       	breq	.+2      	; 0x1454 <SI_Host_CloseSession+0x28>
    1452:	3d c0       	rjmp	.+122    	; 0x14ce <SI_Host_CloseSession+0xa2>
    1454:	f8 01       	movw	r30, r16
    1456:	86 81       	ldd	r24, Z+6	; 0x06
    1458:	88 23       	and	r24, r24
    145a:	c9 f1       	breq	.+114    	; 0x14ce <SI_Host_CloseSession+0xa2>
		{
			.DataLength    = PIMA_COMMAND_SIZE(1),
			.Type          = PIMA_CONTAINER_CommandBlock,
			.Code          = 0x1003,
			.Params        = {1},
		};
    145c:	7e 01       	movw	r14, r28
    145e:	08 94       	sec
    1460:	e1 1c       	adc	r14, r1
    1462:	f1 1c       	adc	r15, r1
    1464:	88 e1       	ldi	r24, 0x18	; 24
    1466:	f7 01       	movw	r30, r14
    1468:	11 92       	st	Z+, r1
    146a:	8a 95       	dec	r24
    146c:	e9 f7       	brne	.-6      	; 0x1468 <SI_Host_CloseSession+0x3c>
    146e:	80 e1       	ldi	r24, 0x10	; 16
    1470:	90 e0       	ldi	r25, 0x00	; 0
    1472:	a0 e0       	ldi	r26, 0x00	; 0
    1474:	b0 e0       	ldi	r27, 0x00	; 0
    1476:	89 83       	std	Y+1, r24	; 0x01
    1478:	9a 83       	std	Y+2, r25	; 0x02
    147a:	ab 83       	std	Y+3, r26	; 0x03
    147c:	bc 83       	std	Y+4, r27	; 0x04
    147e:	81 e0       	ldi	r24, 0x01	; 1
    1480:	90 e0       	ldi	r25, 0x00	; 0
    1482:	9e 83       	std	Y+6, r25	; 0x06
    1484:	8d 83       	std	Y+5, r24	; 0x05
    1486:	83 e0       	ldi	r24, 0x03	; 3
    1488:	90 e1       	ldi	r25, 0x10	; 16
    148a:	98 87       	std	Y+8, r25	; 0x08
    148c:	8f 83       	std	Y+7, r24	; 0x07
    148e:	81 e0       	ldi	r24, 0x01	; 1
    1490:	90 e0       	ldi	r25, 0x00	; 0
    1492:	a0 e0       	ldi	r26, 0x00	; 0
    1494:	b0 e0       	ldi	r27, 0x00	; 0
    1496:	8d 87       	std	Y+13, r24	; 0x0d
    1498:	9e 87       	std	Y+14, r25	; 0x0e
    149a:	af 87       	std	Y+15, r26	; 0x0f
    149c:	b8 8b       	std	Y+16, r27	; 0x10

	if ((ErrorCode = SI_Host_SendBlockHeader(SIInterfaceInfo, &PIMABlock)) != PIPE_RWSTREAM_NoError)
    149e:	c8 01       	movw	r24, r16
    14a0:	b7 01       	movw	r22, r14
    14a2:	72 de       	rcall	.-796    	; 0x1188 <SI_Host_SendBlockHeader>
    14a4:	28 2f       	mov	r18, r24
    14a6:	88 23       	and	r24, r24
    14a8:	a9 f4       	brne	.+42     	; 0x14d4 <SI_Host_CloseSession+0xa8>
	  return ErrorCode;

	if ((ErrorCode = SI_Host_ReceiveBlockHeader(SIInterfaceInfo, &PIMABlock)) != PIPE_RWSTREAM_NoError)
    14aa:	c8 01       	movw	r24, r16
    14ac:	b7 01       	movw	r22, r14
    14ae:	10 df       	rcall	.-480    	; 0x12d0 <SI_Host_ReceiveBlockHeader>
    14b0:	28 2f       	mov	r18, r24
    14b2:	88 23       	and	r24, r24
    14b4:	79 f4       	brne	.+30     	; 0x14d4 <SI_Host_CloseSession+0xa8>
	  return ErrorCode;

	SIInterfaceInfo->State.IsSessionOpen = false;
    14b6:	f8 01       	movw	r30, r16
    14b8:	16 86       	std	Z+14, r1	; 0x0e

	if ((PIMABlock.Type != PIMA_CONTAINER_ResponseBlock) || (PIMABlock.Code != 0x2001))
    14ba:	8d 81       	ldd	r24, Y+5	; 0x05
    14bc:	9e 81       	ldd	r25, Y+6	; 0x06
    14be:	03 97       	sbiw	r24, 0x03	; 3
    14c0:	41 f4       	brne	.+16     	; 0x14d2 <SI_Host_CloseSession+0xa6>
    14c2:	8f 81       	ldd	r24, Y+7	; 0x07
    14c4:	98 85       	ldd	r25, Y+8	; 0x08
    14c6:	81 50       	subi	r24, 0x01	; 1
    14c8:	90 42       	sbci	r25, 0x20	; 32
    14ca:	19 f4       	brne	.+6      	; 0x14d2 <SI_Host_CloseSession+0xa6>
    14cc:	03 c0       	rjmp	.+6      	; 0x14d4 <SI_Host_CloseSession+0xa8>
    14ce:	21 e0       	ldi	r18, 0x01	; 1
    14d0:	01 c0       	rjmp	.+2      	; 0x14d4 <SI_Host_CloseSession+0xa8>
    14d2:	20 e8       	ldi	r18, 0x80	; 128
	  return SI_ERROR_LOGICAL_CMD_FAILED;

	return PIPE_RWSTREAM_NoError;
}
    14d4:	82 2f       	mov	r24, r18
    14d6:	68 96       	adiw	r28, 0x18	; 24
    14d8:	0f b6       	in	r0, 0x3f	; 63
    14da:	f8 94       	cli
    14dc:	de bf       	out	0x3e, r29	; 62
    14de:	0f be       	out	0x3f, r0	; 63
    14e0:	cd bf       	out	0x3d, r28	; 61
    14e2:	cf 91       	pop	r28
    14e4:	df 91       	pop	r29
    14e6:	1f 91       	pop	r17
    14e8:	0f 91       	pop	r16
    14ea:	ff 90       	pop	r15
    14ec:	ef 90       	pop	r14
    14ee:	08 95       	ret

000014f0 <SI_Host_OpenSession>:

	return ErrorCode;
}

uint8_t SI_Host_OpenSession(USB_ClassInfo_SI_Host_t* const SIInterfaceInfo)
{
    14f0:	ef 92       	push	r14
    14f2:	ff 92       	push	r15
    14f4:	0f 93       	push	r16
    14f6:	1f 93       	push	r17
    14f8:	df 93       	push	r29
    14fa:	cf 93       	push	r28
    14fc:	cd b7       	in	r28, 0x3d	; 61
    14fe:	de b7       	in	r29, 0x3e	; 62
    1500:	68 97       	sbiw	r28, 0x18	; 24
    1502:	0f b6       	in	r0, 0x3f	; 63
    1504:	f8 94       	cli
    1506:	de bf       	out	0x3e, r29	; 62
    1508:	0f be       	out	0x3f, r0	; 63
    150a:	cd bf       	out	0x3d, r28	; 61
    150c:	8c 01       	movw	r16, r24
	if ((USB_HostState != HOST_STATE_Configured) || !(SIInterfaceInfo->State.IsActive))
    150e:	80 91 46 01 	lds	r24, 0x0146
    1512:	8c 30       	cpi	r24, 0x0C	; 12
    1514:	09 f0       	breq	.+2      	; 0x1518 <SI_Host_OpenSession+0x28>
    1516:	44 c0       	rjmp	.+136    	; 0x15a0 <SI_Host_OpenSession+0xb0>
    1518:	f8 01       	movw	r30, r16
    151a:	86 81       	ldd	r24, Z+6	; 0x06
    151c:	88 23       	and	r24, r24
    151e:	09 f4       	brne	.+2      	; 0x1522 <SI_Host_OpenSession+0x32>
    1520:	3f c0       	rjmp	.+126    	; 0x15a0 <SI_Host_OpenSession+0xb0>
	  return HOST_SENDCONTROL_DeviceDisconnected;

	uint8_t ErrorCode;

	SIInterfaceInfo->State.TransactionID = 0;
    1522:	17 86       	std	Z+15, r1	; 0x0f
    1524:	10 8a       	std	Z+16, r1	; 0x10
    1526:	11 8a       	std	Z+17, r1	; 0x11
    1528:	12 8a       	std	Z+18, r1	; 0x12
	SIInterfaceInfo->State.IsSessionOpen = false;
    152a:	16 86       	std	Z+14, r1	; 0x0e
		{
			.DataLength    = PIMA_COMMAND_SIZE(1),
			.Type          = PIMA_CONTAINER_CommandBlock,
			.Code          = 0x1002,
			.Params        = {1},
		};
    152c:	7e 01       	movw	r14, r28
    152e:	08 94       	sec
    1530:	e1 1c       	adc	r14, r1
    1532:	f1 1c       	adc	r15, r1
    1534:	88 e1       	ldi	r24, 0x18	; 24
    1536:	f7 01       	movw	r30, r14
    1538:	11 92       	st	Z+, r1
    153a:	8a 95       	dec	r24
    153c:	e9 f7       	brne	.-6      	; 0x1538 <SI_Host_OpenSession+0x48>
    153e:	80 e1       	ldi	r24, 0x10	; 16
    1540:	90 e0       	ldi	r25, 0x00	; 0
    1542:	a0 e0       	ldi	r26, 0x00	; 0
    1544:	b0 e0       	ldi	r27, 0x00	; 0
    1546:	89 83       	std	Y+1, r24	; 0x01
    1548:	9a 83       	std	Y+2, r25	; 0x02
    154a:	ab 83       	std	Y+3, r26	; 0x03
    154c:	bc 83       	std	Y+4, r27	; 0x04
    154e:	81 e0       	ldi	r24, 0x01	; 1
    1550:	90 e0       	ldi	r25, 0x00	; 0
    1552:	9e 83       	std	Y+6, r25	; 0x06
    1554:	8d 83       	std	Y+5, r24	; 0x05
    1556:	82 e0       	ldi	r24, 0x02	; 2
    1558:	90 e1       	ldi	r25, 0x10	; 16
    155a:	98 87       	std	Y+8, r25	; 0x08
    155c:	8f 83       	std	Y+7, r24	; 0x07
    155e:	81 e0       	ldi	r24, 0x01	; 1
    1560:	90 e0       	ldi	r25, 0x00	; 0
    1562:	a0 e0       	ldi	r26, 0x00	; 0
    1564:	b0 e0       	ldi	r27, 0x00	; 0
    1566:	8d 87       	std	Y+13, r24	; 0x0d
    1568:	9e 87       	std	Y+14, r25	; 0x0e
    156a:	af 87       	std	Y+15, r26	; 0x0f
    156c:	b8 8b       	std	Y+16, r27	; 0x10

	if ((ErrorCode = SI_Host_SendBlockHeader(SIInterfaceInfo, &PIMABlock)) != PIPE_RWSTREAM_NoError)
    156e:	c8 01       	movw	r24, r16
    1570:	b7 01       	movw	r22, r14
    1572:	0a de       	rcall	.-1004   	; 0x1188 <SI_Host_SendBlockHeader>
    1574:	28 2f       	mov	r18, r24
    1576:	88 23       	and	r24, r24
    1578:	b1 f4       	brne	.+44     	; 0x15a6 <SI_Host_OpenSession+0xb6>
	  return ErrorCode;

	if ((ErrorCode = SI_Host_ReceiveBlockHeader(SIInterfaceInfo, &PIMABlock)) != PIPE_RWSTREAM_NoError)
    157a:	c8 01       	movw	r24, r16
    157c:	b7 01       	movw	r22, r14
    157e:	a8 de       	rcall	.-688    	; 0x12d0 <SI_Host_ReceiveBlockHeader>
    1580:	28 2f       	mov	r18, r24
    1582:	88 23       	and	r24, r24
    1584:	81 f4       	brne	.+32     	; 0x15a6 <SI_Host_OpenSession+0xb6>
	  return ErrorCode;

	if ((PIMABlock.Type != PIMA_CONTAINER_ResponseBlock) || (PIMABlock.Code != 0x2001))
    1586:	8d 81       	ldd	r24, Y+5	; 0x05
    1588:	9e 81       	ldd	r25, Y+6	; 0x06
    158a:	03 97       	sbiw	r24, 0x03	; 3
    158c:	59 f4       	brne	.+22     	; 0x15a4 <SI_Host_OpenSession+0xb4>
    158e:	8f 81       	ldd	r24, Y+7	; 0x07
    1590:	98 85       	ldd	r25, Y+8	; 0x08
    1592:	81 50       	subi	r24, 0x01	; 1
    1594:	90 42       	sbci	r25, 0x20	; 32
    1596:	31 f4       	brne	.+12     	; 0x15a4 <SI_Host_OpenSession+0xb4>
	  return SI_ERROR_LOGICAL_CMD_FAILED;

	SIInterfaceInfo->State.IsSessionOpen = true;
    1598:	81 e0       	ldi	r24, 0x01	; 1
    159a:	f8 01       	movw	r30, r16
    159c:	86 87       	std	Z+14, r24	; 0x0e
    159e:	03 c0       	rjmp	.+6      	; 0x15a6 <SI_Host_OpenSession+0xb6>

	return PIPE_RWSTREAM_NoError;
    15a0:	21 e0       	ldi	r18, 0x01	; 1
    15a2:	01 c0       	rjmp	.+2      	; 0x15a6 <SI_Host_OpenSession+0xb6>
    15a4:	20 e8       	ldi	r18, 0x80	; 128
}
    15a6:	82 2f       	mov	r24, r18
    15a8:	68 96       	adiw	r28, 0x18	; 24
    15aa:	0f b6       	in	r0, 0x3f	; 63
    15ac:	f8 94       	cli
    15ae:	de bf       	out	0x3e, r29	; 62
    15b0:	0f be       	out	0x3f, r0	; 63
    15b2:	cd bf       	out	0x3d, r28	; 61
    15b4:	cf 91       	pop	r28
    15b6:	df 91       	pop	r29
    15b8:	1f 91       	pop	r17
    15ba:	0f 91       	pop	r16
    15bc:	ff 90       	pop	r15
    15be:	ef 90       	pop	r14
    15c0:	08 95       	ret

000015c2 <SI_Host_ConfigurePipes>:
#include "StillImage.h"

uint8_t SI_Host_ConfigurePipes(USB_ClassInfo_SI_Host_t* const SIInterfaceInfo,
                               uint16_t ConfigDescriptorSize,
                               void* ConfigDescriptorData)
{
    15c2:	4f 92       	push	r4
    15c4:	5f 92       	push	r5
    15c6:	6f 92       	push	r6
    15c8:	7f 92       	push	r7
    15ca:	8f 92       	push	r8
    15cc:	9f 92       	push	r9
    15ce:	af 92       	push	r10
    15d0:	bf 92       	push	r11
    15d2:	cf 92       	push	r12
    15d4:	df 92       	push	r13
    15d6:	ef 92       	push	r14
    15d8:	ff 92       	push	r15
    15da:	0f 93       	push	r16
    15dc:	1f 93       	push	r17
    15de:	df 93       	push	r29
    15e0:	cf 93       	push	r28
    15e2:	00 d0       	rcall	.+0      	; 0x15e4 <SI_Host_ConfigurePipes+0x22>
    15e4:	00 d0       	rcall	.+0      	; 0x15e6 <SI_Host_ConfigurePipes+0x24>
    15e6:	cd b7       	in	r28, 0x3d	; 61
    15e8:	de b7       	in	r29, 0x3e	; 62
    15ea:	6c 01       	movw	r12, r24
    15ec:	7a 83       	std	Y+2, r23	; 0x02
    15ee:	69 83       	std	Y+1, r22	; 0x01
    15f0:	5c 83       	std	Y+4, r21	; 0x04
    15f2:	4b 83       	std	Y+3, r20	; 0x03
	USB_Descriptor_Endpoint_t*  DataINEndpoint      = NULL;
	USB_Descriptor_Endpoint_t*  DataOUTEndpoint     = NULL;
	USB_Descriptor_Endpoint_t*  EventsEndpoint      = NULL;
	USB_Descriptor_Interface_t* StillImageInterface = NULL;

	memset(&SIInterfaceInfo->State, 0x00, sizeof(SIInterfaceInfo->State));
    15f4:	06 96       	adiw	r24, 0x06	; 6
    15f6:	fc 01       	movw	r30, r24
    15f8:	8d e0       	ldi	r24, 0x0D	; 13
    15fa:	df 01       	movw	r26, r30
    15fc:	1d 92       	st	X+, r1
    15fe:	8a 95       	dec	r24
    1600:	e9 f7       	brne	.-6      	; 0x15fc <SI_Host_ConfigurePipes+0x3a>

	if (DESCRIPTOR_TYPE(ConfigDescriptorData) != DTYPE_Configuration)
    1602:	eb 81       	ldd	r30, Y+3	; 0x03
    1604:	fc 81       	ldd	r31, Y+4	; 0x04
    1606:	81 81       	ldd	r24, Z+1	; 0x01
    1608:	82 30       	cpi	r24, 0x02	; 2
    160a:	11 f0       	breq	.+4      	; 0x1610 <SI_Host_ConfigurePipes+0x4e>
    160c:	81 e0       	ldi	r24, 0x01	; 1
    160e:	b3 c0       	rjmp	.+358    	; 0x1776 <SI_Host_ConfigurePipes+0x1b4>
    1610:	66 24       	eor	r6, r6
    1612:	77 24       	eor	r7, r7
    1614:	88 24       	eor	r8, r8
    1616:	99 24       	eor	r9, r9
    1618:	aa 24       	eor	r10, r10
    161a:	bb 24       	eor	r11, r11
    161c:	44 24       	eor	r4, r4
    161e:	55 24       	eor	r5, r5
	  return SI_ENUMERROR_InvalidConfigDescriptor;

	while (!(DataINEndpoint) || !(DataOUTEndpoint))
	{
		if (!(StillImageInterface) ||
    1620:	33 e0       	ldi	r19, 0x03	; 3
    1622:	e3 2e       	mov	r14, r19
    1624:	f1 2c       	mov	r15, r1
    1626:	ec 0e       	add	r14, r28
    1628:	fd 1e       	adc	r15, r29
    162a:	8e 01       	movw	r16, r28
    162c:	0f 5f       	subi	r16, 0xFF	; 255
    162e:	1f 4f       	sbci	r17, 0xFF	; 255
    1630:	41 14       	cp	r4, r1
    1632:	51 04       	cpc	r5, r1
    1634:	39 f0       	breq	.+14     	; 0x1644 <SI_Host_ConfigurePipes+0x82>
    1636:	c8 01       	movw	r24, r16
    1638:	b7 01       	movw	r22, r14
    163a:	40 ed       	ldi	r20, 0xD0	; 208
    163c:	5b e0       	ldi	r21, 0x0B	; 11
    163e:	38 db       	rcall	.-2448   	; 0xcb0 <USB_GetNextDescriptorComp>
    1640:	88 23       	and	r24, r24
    1642:	91 f0       	breq	.+36     	; 0x1668 <SI_Host_ConfigurePipes+0xa6>
		    USB_GetNextDescriptorComp(&ConfigDescriptorSize, &ConfigDescriptorData,
		                              DCOMP_SI_Host_NextSIInterfaceEndpoint) != DESCRIPTOR_SEARCH_COMP_Found)
		{
			if (USB_GetNextDescriptorComp(&ConfigDescriptorSize, &ConfigDescriptorData,
    1644:	c8 01       	movw	r24, r16
    1646:	b7 01       	movw	r22, r14
    1648:	43 eb       	ldi	r20, 0xB3	; 179
    164a:	58 e0       	ldi	r21, 0x08	; 8
    164c:	31 db       	rcall	.-2462   	; 0xcb0 <USB_GetNextDescriptorComp>
    164e:	88 23       	and	r24, r24
    1650:	11 f0       	breq	.+4      	; 0x1656 <SI_Host_ConfigurePipes+0x94>
    1652:	82 e0       	ldi	r24, 0x02	; 2
    1654:	90 c0       	rjmp	.+288    	; 0x1776 <SI_Host_ConfigurePipes+0x1b4>
			                              DCOMP_SI_Host_NextSIInterface) != DESCRIPTOR_SEARCH_COMP_Found)
			{
				return SI_ENUMERROR_NoCompatibleInterfaceFound;
			}

			StillImageInterface = DESCRIPTOR_PCAST(ConfigDescriptorData, USB_Descriptor_Interface_t);
    1656:	4b 80       	ldd	r4, Y+3	; 0x03
    1658:	5c 80       	ldd	r5, Y+4	; 0x04
    165a:	aa 24       	eor	r10, r10
    165c:	bb 24       	eor	r11, r11
    165e:	88 24       	eor	r8, r8
    1660:	99 24       	eor	r9, r9
    1662:	66 24       	eor	r6, r6
    1664:	77 24       	eor	r7, r7
    1666:	e4 cf       	rjmp	.-56     	; 0x1630 <SI_Host_ConfigurePipes+0x6e>
			EventsEndpoint  = NULL;

			continue;
		}

		USB_Descriptor_Endpoint_t* EndpointData = DESCRIPTOR_PCAST(ConfigDescriptorData, USB_Descriptor_Endpoint_t);
    1668:	eb 81       	ldd	r30, Y+3	; 0x03
    166a:	fc 81       	ldd	r31, Y+4	; 0x04

		if (EndpointData->EndpointAddress & ENDPOINT_DESCRIPTOR_DIR_IN)
    166c:	82 81       	ldd	r24, Z+2	; 0x02
    166e:	87 fd       	sbrc	r24, 7
    1670:	02 c0       	rjmp	.+4      	; 0x1676 <SI_Host_ConfigurePipes+0xb4>
    1672:	4f 01       	movw	r8, r30
    1674:	07 c0       	rjmp	.+14     	; 0x1684 <SI_Host_ConfigurePipes+0xc2>
		{
			if ((EndpointData->Attributes & EP_TYPE_MASK) == EP_TYPE_INTERRUPT)
    1676:	83 81       	ldd	r24, Z+3	; 0x03
    1678:	83 70       	andi	r24, 0x03	; 3
    167a:	83 30       	cpi	r24, 0x03	; 3
    167c:	11 f0       	breq	.+4      	; 0x1682 <SI_Host_ConfigurePipes+0xc0>
    167e:	3f 01       	movw	r6, r30
    1680:	01 c0       	rjmp	.+2      	; 0x1684 <SI_Host_ConfigurePipes+0xc2>
    1682:	5f 01       	movw	r10, r30
	memset(&SIInterfaceInfo->State, 0x00, sizeof(SIInterfaceInfo->State));

	if (DESCRIPTOR_TYPE(ConfigDescriptorData) != DTYPE_Configuration)
	  return SI_ENUMERROR_InvalidConfigDescriptor;

	while (!(DataINEndpoint) || !(DataOUTEndpoint))
    1684:	61 14       	cp	r6, r1
    1686:	71 04       	cpc	r7, r1
    1688:	99 f2       	breq	.-90     	; 0x1630 <SI_Host_ConfigurePipes+0x6e>
    168a:	81 14       	cp	r8, r1
    168c:	91 04       	cpc	r9, r1
    168e:	81 f2       	breq	.-96     	; 0x1630 <SI_Host_ConfigurePipes+0x6e>
    1690:	ff 24       	eor	r15, r15
    1692:	f3 94       	inc	r15
		}
	}

	for (uint8_t PipeNum = 1; PipeNum < PIPE_TOTAL_PIPES; PipeNum++)
	{
		if (PipeNum == SIInterfaceInfo->Config.DataINPipeNumber)
    1694:	f6 01       	movw	r30, r12
    1696:	80 81       	ld	r24, Z
    1698:	f8 16       	cp	r15, r24
    169a:	e1 f4       	brne	.+56     	; 0x16d4 <SI_Host_ConfigurePipes+0x112>
		{
			Pipe_ConfigurePipe(PipeNum, EP_TYPE_BULK, PIPE_TOKEN_IN,
    169c:	d3 01       	movw	r26, r6
    169e:	12 96       	adiw	r26, 0x02	; 2
    16a0:	2c 91       	ld	r18, X
    16a2:	12 97       	sbiw	r26, 0x02	; 2
    16a4:	14 96       	adiw	r26, 0x04	; 4
    16a6:	0d 91       	ld	r16, X+
    16a8:	1c 91       	ld	r17, X
    16aa:	15 97       	sbiw	r26, 0x05	; 5
    16ac:	81 81       	ldd	r24, Z+1	; 0x01
    16ae:	88 23       	and	r24, r24
    16b0:	11 f4       	brne	.+4      	; 0x16b6 <SI_Host_ConfigurePipes+0xf4>
    16b2:	90 e0       	ldi	r25, 0x00	; 0
    16b4:	01 c0       	rjmp	.+2      	; 0x16b8 <SI_Host_ConfigurePipes+0xf6>
    16b6:	94 e0       	ldi	r25, 0x04	; 4
    16b8:	8f 2d       	mov	r24, r15
    16ba:	62 e0       	ldi	r22, 0x02	; 2
    16bc:	40 e1       	ldi	r20, 0x10	; 16
    16be:	e9 2e       	mov	r14, r25
    16c0:	43 d9       	rcall	.-3450   	; 0x948 <Pipe_ConfigurePipe>
			                   DataINEndpoint->EndpointAddress, DataINEndpoint->EndpointSize,
			                   SIInterfaceInfo->Config.DataINPipeDoubleBank ? PIPE_BANK_DOUBLE : PIPE_BANK_SINGLE);

			SIInterfaceInfo->State.DataINPipeSize = DataINEndpoint->EndpointSize;
    16c2:	f3 01       	movw	r30, r6
    16c4:	84 81       	ldd	r24, Z+4	; 0x04
    16c6:	95 81       	ldd	r25, Z+5	; 0x05
    16c8:	d6 01       	movw	r26, r12
    16ca:	19 96       	adiw	r26, 0x09	; 9
    16cc:	9c 93       	st	X, r25
    16ce:	8e 93       	st	-X, r24
    16d0:	18 97       	sbiw	r26, 0x08	; 8
    16d2:	42 c0       	rjmp	.+132    	; 0x1758 <SI_Host_ConfigurePipes+0x196>
		}
		else if (PipeNum == SIInterfaceInfo->Config.DataOUTPipeNumber)
    16d4:	f6 01       	movw	r30, r12
    16d6:	82 81       	ldd	r24, Z+2	; 0x02
    16d8:	f8 16       	cp	r15, r24
    16da:	e1 f4       	brne	.+56     	; 0x1714 <SI_Host_ConfigurePipes+0x152>
		{
			Pipe_ConfigurePipe(PipeNum, EP_TYPE_BULK, PIPE_TOKEN_OUT,
    16dc:	d4 01       	movw	r26, r8
    16de:	12 96       	adiw	r26, 0x02	; 2
    16e0:	2c 91       	ld	r18, X
    16e2:	12 97       	sbiw	r26, 0x02	; 2
    16e4:	14 96       	adiw	r26, 0x04	; 4
    16e6:	0d 91       	ld	r16, X+
    16e8:	1c 91       	ld	r17, X
    16ea:	15 97       	sbiw	r26, 0x05	; 5
    16ec:	83 81       	ldd	r24, Z+3	; 0x03
    16ee:	88 23       	and	r24, r24
    16f0:	11 f4       	brne	.+4      	; 0x16f6 <SI_Host_ConfigurePipes+0x134>
    16f2:	90 e0       	ldi	r25, 0x00	; 0
    16f4:	01 c0       	rjmp	.+2      	; 0x16f8 <SI_Host_ConfigurePipes+0x136>
    16f6:	94 e0       	ldi	r25, 0x04	; 4
    16f8:	8f 2d       	mov	r24, r15
    16fa:	62 e0       	ldi	r22, 0x02	; 2
    16fc:	40 e2       	ldi	r20, 0x20	; 32
    16fe:	e9 2e       	mov	r14, r25
    1700:	23 d9       	rcall	.-3514   	; 0x948 <Pipe_ConfigurePipe>
			                   DataOUTEndpoint->EndpointAddress, DataOUTEndpoint->EndpointSize,
			                   SIInterfaceInfo->Config.DataOUTPipeDoubleBank ? PIPE_BANK_DOUBLE : PIPE_BANK_SINGLE);

			SIInterfaceInfo->State.DataOUTPipeSize = DataOUTEndpoint->EndpointSize;
    1702:	f4 01       	movw	r30, r8
    1704:	84 81       	ldd	r24, Z+4	; 0x04
    1706:	95 81       	ldd	r25, Z+5	; 0x05
    1708:	d6 01       	movw	r26, r12
    170a:	1b 96       	adiw	r26, 0x0b	; 11
    170c:	9c 93       	st	X, r25
    170e:	8e 93       	st	-X, r24
    1710:	1a 97       	sbiw	r26, 0x0a	; 10
    1712:	22 c0       	rjmp	.+68     	; 0x1758 <SI_Host_ConfigurePipes+0x196>
		}
		else if (PipeNum == SIInterfaceInfo->Config.EventsPipeNumber)
    1714:	f6 01       	movw	r30, r12
    1716:	84 81       	ldd	r24, Z+4	; 0x04
    1718:	f8 16       	cp	r15, r24
    171a:	f1 f4       	brne	.+60     	; 0x1758 <SI_Host_ConfigurePipes+0x196>
		{
			Pipe_ConfigurePipe(PipeNum, EP_TYPE_INTERRUPT, PIPE_TOKEN_IN,
    171c:	d5 01       	movw	r26, r10
    171e:	12 96       	adiw	r26, 0x02	; 2
    1720:	2c 91       	ld	r18, X
    1722:	12 97       	sbiw	r26, 0x02	; 2
    1724:	14 96       	adiw	r26, 0x04	; 4
    1726:	0d 91       	ld	r16, X+
    1728:	1c 91       	ld	r17, X
    172a:	15 97       	sbiw	r26, 0x05	; 5
    172c:	85 81       	ldd	r24, Z+5	; 0x05
    172e:	88 23       	and	r24, r24
    1730:	11 f4       	brne	.+4      	; 0x1736 <SI_Host_ConfigurePipes+0x174>
    1732:	90 e0       	ldi	r25, 0x00	; 0
    1734:	01 c0       	rjmp	.+2      	; 0x1738 <SI_Host_ConfigurePipes+0x176>
    1736:	94 e0       	ldi	r25, 0x04	; 4
    1738:	8f 2d       	mov	r24, r15
    173a:	63 e0       	ldi	r22, 0x03	; 3
    173c:	40 e1       	ldi	r20, 0x10	; 16
    173e:	e9 2e       	mov	r14, r25
    1740:	03 d9       	rcall	.-3578   	; 0x948 <Pipe_ConfigurePipe>
			                   EventsEndpoint->EndpointAddress, EventsEndpoint->EndpointSize,
			                   SIInterfaceInfo->Config.EventsPipeDoubleBank ? PIPE_BANK_DOUBLE : PIPE_BANK_SINGLE);
			Pipe_SetInterruptPeriod(EventsEndpoint->PollingIntervalMS);
    1742:	f5 01       	movw	r30, r10
    1744:	86 81       	ldd	r24, Z+6	; 0x06
			 *  \param[in] Milliseconds  Number of milliseconds between each pipe poll.
			 */
			static inline void Pipe_SetInterruptPeriod(const uint8_t Milliseconds) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetInterruptPeriod(const uint8_t Milliseconds)
			{
				UPCFG2X = Milliseconds;
    1746:	80 93 ad 00 	sts	0x00AD, r24

			SIInterfaceInfo->State.EventsPipeSize = EventsEndpoint->EndpointSize;
    174a:	84 81       	ldd	r24, Z+4	; 0x04
    174c:	95 81       	ldd	r25, Z+5	; 0x05
    174e:	d6 01       	movw	r26, r12
    1750:	1d 96       	adiw	r26, 0x0d	; 13
    1752:	9c 93       	st	X, r25
    1754:	8e 93       	st	-X, r24
    1756:	1c 97       	sbiw	r26, 0x0c	; 12
		{
			DataOUTEndpoint = EndpointData;
		}
	}

	for (uint8_t PipeNum = 1; PipeNum < PIPE_TOTAL_PIPES; PipeNum++)
    1758:	f3 94       	inc	r15
    175a:	b7 e0       	ldi	r27, 0x07	; 7
    175c:	fb 16       	cp	r15, r27
    175e:	09 f0       	breq	.+2      	; 0x1762 <SI_Host_ConfigurePipes+0x1a0>
    1760:	99 cf       	rjmp	.-206    	; 0x1694 <SI_Host_ConfigurePipes+0xd2>

			SIInterfaceInfo->State.EventsPipeSize = EventsEndpoint->EndpointSize;
		}
	}

	SIInterfaceInfo->State.InterfaceNumber = StillImageInterface->InterfaceNumber;
    1762:	f2 01       	movw	r30, r4
    1764:	82 81       	ldd	r24, Z+2	; 0x02
    1766:	d6 01       	movw	r26, r12
    1768:	17 96       	adiw	r26, 0x07	; 7
    176a:	8c 93       	st	X, r24
    176c:	17 97       	sbiw	r26, 0x07	; 7
	SIInterfaceInfo->State.IsActive = true;
    176e:	81 e0       	ldi	r24, 0x01	; 1
    1770:	16 96       	adiw	r26, 0x06	; 6
    1772:	8c 93       	st	X, r24
    1774:	80 e0       	ldi	r24, 0x00	; 0

	return SI_ENUMERROR_NoError;
}
    1776:	0f 90       	pop	r0
    1778:	0f 90       	pop	r0
    177a:	0f 90       	pop	r0
    177c:	0f 90       	pop	r0
    177e:	cf 91       	pop	r28
    1780:	df 91       	pop	r29
    1782:	1f 91       	pop	r17
    1784:	0f 91       	pop	r16
    1786:	ff 90       	pop	r15
    1788:	ef 90       	pop	r14
    178a:	df 90       	pop	r13
    178c:	cf 90       	pop	r12
    178e:	bf 90       	pop	r11
    1790:	af 90       	pop	r10
    1792:	9f 90       	pop	r9
    1794:	8f 90       	pop	r8
    1796:	7f 90       	pop	r7
    1798:	6f 90       	pop	r6
    179a:	5f 90       	pop	r5
    179c:	4f 90       	pop	r4
    179e:	08 95       	ret

000017a0 <DCOMP_SI_Host_NextSIInterfaceEndpoint>:

	return DESCRIPTOR_SEARCH_NotFound;
}

uint8_t DCOMP_SI_Host_NextSIInterfaceEndpoint(void* const CurrentDescriptor)
{
    17a0:	fc 01       	movw	r30, r24
	USB_Descriptor_Header_t* Header = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Header_t);

	if (Header->Type == DTYPE_Endpoint)
    17a2:	81 81       	ldd	r24, Z+1	; 0x01
    17a4:	85 30       	cpi	r24, 0x05	; 5
    17a6:	51 f4       	brne	.+20     	; 0x17bc <DCOMP_SI_Host_NextSIInterfaceEndpoint+0x1c>
	{
		USB_Descriptor_Endpoint_t* Endpoint = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Endpoint_t);

		uint8_t EndpointType = (Endpoint->Attributes & EP_TYPE_MASK);

		if (((EndpointType == EP_TYPE_BULK) || (EndpointType == EP_TYPE_INTERRUPT)) &&
    17a8:	83 81       	ldd	r24, Z+3	; 0x03
    17aa:	83 70       	andi	r24, 0x03	; 3
    17ac:	82 50       	subi	r24, 0x02	; 2
    17ae:	82 30       	cpi	r24, 0x02	; 2
    17b0:	48 f4       	brcc	.+18     	; 0x17c4 <DCOMP_SI_Host_NextSIInterfaceEndpoint+0x24>
    17b2:	82 81       	ldd	r24, Z+2	; 0x02
    17b4:	13 d9       	rcall	.-3546   	; 0x9dc <Pipe_IsEndpointBound>
    17b6:	88 23       	and	r24, r24
    17b8:	29 f4       	brne	.+10     	; 0x17c4 <DCOMP_SI_Host_NextSIInterfaceEndpoint+0x24>
    17ba:	08 95       	ret
		    (!(Pipe_IsEndpointBound(Endpoint->EndpointAddress))))
		{
			return DESCRIPTOR_SEARCH_Found;
		}
	}
	else if (Header->Type == DTYPE_Interface)
    17bc:	84 30       	cpi	r24, 0x04	; 4
    17be:	11 f4       	brne	.+4      	; 0x17c4 <DCOMP_SI_Host_NextSIInterfaceEndpoint+0x24>
    17c0:	81 e0       	ldi	r24, 0x01	; 1
    17c2:	08 95       	ret
    17c4:	82 e0       	ldi	r24, 0x02	; 2
	{
		return DESCRIPTOR_SEARCH_Fail;
	}

	return DESCRIPTOR_SEARCH_NotFound;
}
    17c6:	08 95       	ret

000017c8 <SerialStream_TxByte>:

FILE USARTStream = FDEV_SETUP_STREAM(SerialStream_TxByte, SerialStream_RxByte, _FDEV_SETUP_RW);

static int SerialStream_TxByte(char DataByte,
                               FILE *Stream)
{
    17c8:	98 2f       	mov	r25, r24
			 *  \param[in] DataByte  Byte to transmit through the USART.
			 */
			static inline void Serial_TxByte(const char DataByte) ATTR_ALWAYS_INLINE;
			static inline void Serial_TxByte(const char DataByte)
			{
				while (!(UCSR1A & (1 << UDRE1)));
    17ca:	80 91 c8 00 	lds	r24, 0x00C8
    17ce:	85 ff       	sbrs	r24, 5
    17d0:	fc cf       	rjmp	.-8      	; 0x17ca <SerialStream_TxByte+0x2>
				UDR1 = DataByte;
    17d2:	90 93 ce 00 	sts	0x00CE, r25
	(void)Stream;

	Serial_TxByte(DataByte);
	return 0;
}
    17d6:	80 e0       	ldi	r24, 0x00	; 0
    17d8:	90 e0       	ldi	r25, 0x00	; 0
    17da:	08 95       	ret

000017dc <SerialStream_RxByte>:
			 *  \return Boolean true if a character has been received, false otherwise.
			 */
			static inline bool Serial_IsCharReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Serial_IsCharReceived(void)
			{
				return ((UCSR1A & (1 << RXC1)) ? true : false);
    17dc:	80 91 c8 00 	lds	r24, 0x00C8

static int SerialStream_RxByte(FILE *Stream)
{
	(void)Stream;

	if (!(Serial_IsCharReceived()))
    17e0:	87 fd       	sbrc	r24, 7
    17e2:	03 c0       	rjmp	.+6      	; 0x17ea <SerialStream_RxByte+0xe>
    17e4:	2e ef       	ldi	r18, 0xFE	; 254
    17e6:	3f ef       	ldi	r19, 0xFF	; 255
    17e8:	08 c0       	rjmp	.+16     	; 0x17fa <SerialStream_RxByte+0x1e>
			 *  \return Byte received from the USART.
			 */
			static inline char Serial_RxByte(void) ATTR_ALWAYS_INLINE;
			static inline char Serial_RxByte(void)
			{
				while (!(UCSR1A & (1 << RXC1)));
    17ea:	80 91 c8 00 	lds	r24, 0x00C8
    17ee:	87 ff       	sbrs	r24, 7
    17f0:	fc cf       	rjmp	.-8      	; 0x17ea <SerialStream_RxByte+0xe>
				return UDR1;
    17f2:	80 91 ce 00 	lds	r24, 0x00CE
	  return _FDEV_EOF;

	return Serial_RxByte();
    17f6:	28 2f       	mov	r18, r24
    17f8:	30 e0       	ldi	r19, 0x00	; 0
}
    17fa:	c9 01       	movw	r24, r18
    17fc:	08 95       	ret

000017fe <memcpy>:
    17fe:	fb 01       	movw	r30, r22
    1800:	dc 01       	movw	r26, r24
    1802:	02 c0       	rjmp	.+4      	; 0x1808 <memcpy+0xa>
    1804:	01 90       	ld	r0, Z+
    1806:	0d 92       	st	X+, r0
    1808:	41 50       	subi	r20, 0x01	; 1
    180a:	50 40       	sbci	r21, 0x00	; 0
    180c:	d8 f7       	brcc	.-10     	; 0x1804 <memcpy+0x6>
    180e:	08 95       	ret

00001810 <printf_P>:
    1810:	df 93       	push	r29
    1812:	cf 93       	push	r28
    1814:	cd b7       	in	r28, 0x3d	; 61
    1816:	de b7       	in	r29, 0x3e	; 62
    1818:	fe 01       	movw	r30, r28
    181a:	35 96       	adiw	r30, 0x05	; 5
    181c:	61 91       	ld	r22, Z+
    181e:	71 91       	ld	r23, Z+
    1820:	a0 91 49 01 	lds	r26, 0x0149
    1824:	b0 91 4a 01 	lds	r27, 0x014A
    1828:	13 96       	adiw	r26, 0x03	; 3
    182a:	8c 91       	ld	r24, X
    182c:	13 97       	sbiw	r26, 0x03	; 3
    182e:	88 60       	ori	r24, 0x08	; 8
    1830:	13 96       	adiw	r26, 0x03	; 3
    1832:	8c 93       	st	X, r24
    1834:	80 91 49 01 	lds	r24, 0x0149
    1838:	90 91 4a 01 	lds	r25, 0x014A
    183c:	af 01       	movw	r20, r30
    183e:	3f d0       	rcall	.+126    	; 0x18be <vfprintf>
    1840:	e0 91 49 01 	lds	r30, 0x0149
    1844:	f0 91 4a 01 	lds	r31, 0x014A
    1848:	23 81       	ldd	r18, Z+3	; 0x03
    184a:	27 7f       	andi	r18, 0xF7	; 247
    184c:	23 83       	std	Z+3, r18	; 0x03
    184e:	cf 91       	pop	r28
    1850:	df 91       	pop	r29
    1852:	08 95       	ret

00001854 <puts_P>:
    1854:	0f 93       	push	r16
    1856:	1f 93       	push	r17
    1858:	cf 93       	push	r28
    185a:	df 93       	push	r29
    185c:	ec 01       	movw	r28, r24
    185e:	e0 91 49 01 	lds	r30, 0x0149
    1862:	f0 91 4a 01 	lds	r31, 0x014A
    1866:	83 81       	ldd	r24, Z+3	; 0x03
    1868:	81 ff       	sbrs	r24, 1
    186a:	21 c0       	rjmp	.+66     	; 0x18ae <puts_P+0x5a>
    186c:	00 e0       	ldi	r16, 0x00	; 0
    186e:	10 e0       	ldi	r17, 0x00	; 0
    1870:	0e c0       	rjmp	.+28     	; 0x188e <puts_P+0x3a>
    1872:	e0 91 49 01 	lds	r30, 0x0149
    1876:	f0 91 4a 01 	lds	r31, 0x014A
    187a:	20 85       	ldd	r18, Z+8	; 0x08
    187c:	31 85       	ldd	r19, Z+9	; 0x09
    187e:	bf 01       	movw	r22, r30
    1880:	f9 01       	movw	r30, r18
    1882:	09 95       	icall
    1884:	89 2b       	or	r24, r25
    1886:	11 f0       	breq	.+4      	; 0x188c <puts_P+0x38>
    1888:	0f ef       	ldi	r16, 0xFF	; 255
    188a:	1f ef       	ldi	r17, 0xFF	; 255
    188c:	21 96       	adiw	r28, 0x01	; 1
    188e:	fe 01       	movw	r30, r28
    1890:	84 91       	lpm	r24, Z+
    1892:	88 23       	and	r24, r24
    1894:	71 f7       	brne	.-36     	; 0x1872 <puts_P+0x1e>
    1896:	e0 91 49 01 	lds	r30, 0x0149
    189a:	f0 91 4a 01 	lds	r31, 0x014A
    189e:	20 85       	ldd	r18, Z+8	; 0x08
    18a0:	31 85       	ldd	r19, Z+9	; 0x09
    18a2:	8a e0       	ldi	r24, 0x0A	; 10
    18a4:	bf 01       	movw	r22, r30
    18a6:	f9 01       	movw	r30, r18
    18a8:	09 95       	icall
    18aa:	89 2b       	or	r24, r25
    18ac:	11 f0       	breq	.+4      	; 0x18b2 <puts_P+0x5e>
    18ae:	0f ef       	ldi	r16, 0xFF	; 255
    18b0:	1f ef       	ldi	r17, 0xFF	; 255
    18b2:	c8 01       	movw	r24, r16
    18b4:	df 91       	pop	r29
    18b6:	cf 91       	pop	r28
    18b8:	1f 91       	pop	r17
    18ba:	0f 91       	pop	r16
    18bc:	08 95       	ret

000018be <vfprintf>:
    18be:	2f 92       	push	r2
    18c0:	3f 92       	push	r3
    18c2:	4f 92       	push	r4
    18c4:	5f 92       	push	r5
    18c6:	6f 92       	push	r6
    18c8:	7f 92       	push	r7
    18ca:	8f 92       	push	r8
    18cc:	9f 92       	push	r9
    18ce:	af 92       	push	r10
    18d0:	bf 92       	push	r11
    18d2:	cf 92       	push	r12
    18d4:	df 92       	push	r13
    18d6:	ef 92       	push	r14
    18d8:	ff 92       	push	r15
    18da:	0f 93       	push	r16
    18dc:	1f 93       	push	r17
    18de:	df 93       	push	r29
    18e0:	cf 93       	push	r28
    18e2:	cd b7       	in	r28, 0x3d	; 61
    18e4:	de b7       	in	r29, 0x3e	; 62
    18e6:	2b 97       	sbiw	r28, 0x0b	; 11
    18e8:	0f b6       	in	r0, 0x3f	; 63
    18ea:	f8 94       	cli
    18ec:	de bf       	out	0x3e, r29	; 62
    18ee:	0f be       	out	0x3f, r0	; 63
    18f0:	cd bf       	out	0x3d, r28	; 61
    18f2:	3c 01       	movw	r6, r24
    18f4:	2b 01       	movw	r4, r22
    18f6:	5a 01       	movw	r10, r20
    18f8:	fc 01       	movw	r30, r24
    18fa:	17 82       	std	Z+7, r1	; 0x07
    18fc:	16 82       	std	Z+6, r1	; 0x06
    18fe:	83 81       	ldd	r24, Z+3	; 0x03
    1900:	81 fd       	sbrc	r24, 1
    1902:	03 c0       	rjmp	.+6      	; 0x190a <vfprintf+0x4c>
    1904:	6f ef       	ldi	r22, 0xFF	; 255
    1906:	7f ef       	ldi	r23, 0xFF	; 255
    1908:	b9 c1       	rjmp	.+882    	; 0x1c7c <vfprintf+0x3be>
    190a:	9a e0       	ldi	r25, 0x0A	; 10
    190c:	89 2e       	mov	r8, r25
    190e:	1e 01       	movw	r2, r28
    1910:	08 94       	sec
    1912:	21 1c       	adc	r2, r1
    1914:	31 1c       	adc	r3, r1
    1916:	f3 01       	movw	r30, r6
    1918:	23 81       	ldd	r18, Z+3	; 0x03
    191a:	f2 01       	movw	r30, r4
    191c:	23 fd       	sbrc	r18, 3
    191e:	85 91       	lpm	r24, Z+
    1920:	23 ff       	sbrs	r18, 3
    1922:	81 91       	ld	r24, Z+
    1924:	2f 01       	movw	r4, r30
    1926:	88 23       	and	r24, r24
    1928:	09 f4       	brne	.+2      	; 0x192c <vfprintf+0x6e>
    192a:	a5 c1       	rjmp	.+842    	; 0x1c76 <vfprintf+0x3b8>
    192c:	85 32       	cpi	r24, 0x25	; 37
    192e:	39 f4       	brne	.+14     	; 0x193e <vfprintf+0x80>
    1930:	23 fd       	sbrc	r18, 3
    1932:	85 91       	lpm	r24, Z+
    1934:	23 ff       	sbrs	r18, 3
    1936:	81 91       	ld	r24, Z+
    1938:	2f 01       	movw	r4, r30
    193a:	85 32       	cpi	r24, 0x25	; 37
    193c:	21 f4       	brne	.+8      	; 0x1946 <vfprintf+0x88>
    193e:	90 e0       	ldi	r25, 0x00	; 0
    1940:	b3 01       	movw	r22, r6
    1942:	cc d1       	rcall	.+920    	; 0x1cdc <fputc>
    1944:	e8 cf       	rjmp	.-48     	; 0x1916 <vfprintf+0x58>
    1946:	98 2f       	mov	r25, r24
    1948:	ff 24       	eor	r15, r15
    194a:	ee 24       	eor	r14, r14
    194c:	99 24       	eor	r9, r9
    194e:	ff e1       	ldi	r31, 0x1F	; 31
    1950:	ff 15       	cp	r31, r15
    1952:	d0 f0       	brcs	.+52     	; 0x1988 <vfprintf+0xca>
    1954:	9b 32       	cpi	r25, 0x2B	; 43
    1956:	69 f0       	breq	.+26     	; 0x1972 <vfprintf+0xb4>
    1958:	9c 32       	cpi	r25, 0x2C	; 44
    195a:	28 f4       	brcc	.+10     	; 0x1966 <vfprintf+0xa8>
    195c:	90 32       	cpi	r25, 0x20	; 32
    195e:	59 f0       	breq	.+22     	; 0x1976 <vfprintf+0xb8>
    1960:	93 32       	cpi	r25, 0x23	; 35
    1962:	91 f4       	brne	.+36     	; 0x1988 <vfprintf+0xca>
    1964:	0e c0       	rjmp	.+28     	; 0x1982 <vfprintf+0xc4>
    1966:	9d 32       	cpi	r25, 0x2D	; 45
    1968:	49 f0       	breq	.+18     	; 0x197c <vfprintf+0xbe>
    196a:	90 33       	cpi	r25, 0x30	; 48
    196c:	69 f4       	brne	.+26     	; 0x1988 <vfprintf+0xca>
    196e:	41 e0       	ldi	r20, 0x01	; 1
    1970:	24 c0       	rjmp	.+72     	; 0x19ba <vfprintf+0xfc>
    1972:	52 e0       	ldi	r21, 0x02	; 2
    1974:	f5 2a       	or	r15, r21
    1976:	84 e0       	ldi	r24, 0x04	; 4
    1978:	f8 2a       	or	r15, r24
    197a:	28 c0       	rjmp	.+80     	; 0x19cc <vfprintf+0x10e>
    197c:	98 e0       	ldi	r25, 0x08	; 8
    197e:	f9 2a       	or	r15, r25
    1980:	25 c0       	rjmp	.+74     	; 0x19cc <vfprintf+0x10e>
    1982:	e0 e1       	ldi	r30, 0x10	; 16
    1984:	fe 2a       	or	r15, r30
    1986:	22 c0       	rjmp	.+68     	; 0x19cc <vfprintf+0x10e>
    1988:	f7 fc       	sbrc	r15, 7
    198a:	29 c0       	rjmp	.+82     	; 0x19de <vfprintf+0x120>
    198c:	89 2f       	mov	r24, r25
    198e:	80 53       	subi	r24, 0x30	; 48
    1990:	8a 30       	cpi	r24, 0x0A	; 10
    1992:	70 f4       	brcc	.+28     	; 0x19b0 <vfprintf+0xf2>
    1994:	f6 fe       	sbrs	r15, 6
    1996:	05 c0       	rjmp	.+10     	; 0x19a2 <vfprintf+0xe4>
    1998:	98 9c       	mul	r9, r8
    199a:	90 2c       	mov	r9, r0
    199c:	11 24       	eor	r1, r1
    199e:	98 0e       	add	r9, r24
    19a0:	15 c0       	rjmp	.+42     	; 0x19cc <vfprintf+0x10e>
    19a2:	e8 9c       	mul	r14, r8
    19a4:	e0 2c       	mov	r14, r0
    19a6:	11 24       	eor	r1, r1
    19a8:	e8 0e       	add	r14, r24
    19aa:	f0 e2       	ldi	r31, 0x20	; 32
    19ac:	ff 2a       	or	r15, r31
    19ae:	0e c0       	rjmp	.+28     	; 0x19cc <vfprintf+0x10e>
    19b0:	9e 32       	cpi	r25, 0x2E	; 46
    19b2:	29 f4       	brne	.+10     	; 0x19be <vfprintf+0x100>
    19b4:	f6 fc       	sbrc	r15, 6
    19b6:	5f c1       	rjmp	.+702    	; 0x1c76 <vfprintf+0x3b8>
    19b8:	40 e4       	ldi	r20, 0x40	; 64
    19ba:	f4 2a       	or	r15, r20
    19bc:	07 c0       	rjmp	.+14     	; 0x19cc <vfprintf+0x10e>
    19be:	9c 36       	cpi	r25, 0x6C	; 108
    19c0:	19 f4       	brne	.+6      	; 0x19c8 <vfprintf+0x10a>
    19c2:	50 e8       	ldi	r21, 0x80	; 128
    19c4:	f5 2a       	or	r15, r21
    19c6:	02 c0       	rjmp	.+4      	; 0x19cc <vfprintf+0x10e>
    19c8:	98 36       	cpi	r25, 0x68	; 104
    19ca:	49 f4       	brne	.+18     	; 0x19de <vfprintf+0x120>
    19cc:	f2 01       	movw	r30, r4
    19ce:	23 fd       	sbrc	r18, 3
    19d0:	95 91       	lpm	r25, Z+
    19d2:	23 ff       	sbrs	r18, 3
    19d4:	91 91       	ld	r25, Z+
    19d6:	2f 01       	movw	r4, r30
    19d8:	99 23       	and	r25, r25
    19da:	09 f0       	breq	.+2      	; 0x19de <vfprintf+0x120>
    19dc:	b8 cf       	rjmp	.-144    	; 0x194e <vfprintf+0x90>
    19de:	89 2f       	mov	r24, r25
    19e0:	85 54       	subi	r24, 0x45	; 69
    19e2:	83 30       	cpi	r24, 0x03	; 3
    19e4:	18 f0       	brcs	.+6      	; 0x19ec <vfprintf+0x12e>
    19e6:	80 52       	subi	r24, 0x20	; 32
    19e8:	83 30       	cpi	r24, 0x03	; 3
    19ea:	38 f4       	brcc	.+14     	; 0x19fa <vfprintf+0x13c>
    19ec:	44 e0       	ldi	r20, 0x04	; 4
    19ee:	50 e0       	ldi	r21, 0x00	; 0
    19f0:	a4 0e       	add	r10, r20
    19f2:	b5 1e       	adc	r11, r21
    19f4:	5f e3       	ldi	r21, 0x3F	; 63
    19f6:	59 83       	std	Y+1, r21	; 0x01
    19f8:	0f c0       	rjmp	.+30     	; 0x1a18 <vfprintf+0x15a>
    19fa:	93 36       	cpi	r25, 0x63	; 99
    19fc:	31 f0       	breq	.+12     	; 0x1a0a <vfprintf+0x14c>
    19fe:	93 37       	cpi	r25, 0x73	; 115
    1a00:	79 f0       	breq	.+30     	; 0x1a20 <vfprintf+0x162>
    1a02:	93 35       	cpi	r25, 0x53	; 83
    1a04:	09 f0       	breq	.+2      	; 0x1a08 <vfprintf+0x14a>
    1a06:	52 c0       	rjmp	.+164    	; 0x1aac <vfprintf+0x1ee>
    1a08:	1f c0       	rjmp	.+62     	; 0x1a48 <vfprintf+0x18a>
    1a0a:	f5 01       	movw	r30, r10
    1a0c:	80 81       	ld	r24, Z
    1a0e:	89 83       	std	Y+1, r24	; 0x01
    1a10:	42 e0       	ldi	r20, 0x02	; 2
    1a12:	50 e0       	ldi	r21, 0x00	; 0
    1a14:	a4 0e       	add	r10, r20
    1a16:	b5 1e       	adc	r11, r21
    1a18:	61 01       	movw	r12, r2
    1a1a:	01 e0       	ldi	r16, 0x01	; 1
    1a1c:	10 e0       	ldi	r17, 0x00	; 0
    1a1e:	11 c0       	rjmp	.+34     	; 0x1a42 <vfprintf+0x184>
    1a20:	f5 01       	movw	r30, r10
    1a22:	c0 80       	ld	r12, Z
    1a24:	d1 80       	ldd	r13, Z+1	; 0x01
    1a26:	f6 fc       	sbrc	r15, 6
    1a28:	03 c0       	rjmp	.+6      	; 0x1a30 <vfprintf+0x172>
    1a2a:	6f ef       	ldi	r22, 0xFF	; 255
    1a2c:	7f ef       	ldi	r23, 0xFF	; 255
    1a2e:	02 c0       	rjmp	.+4      	; 0x1a34 <vfprintf+0x176>
    1a30:	69 2d       	mov	r22, r9
    1a32:	70 e0       	ldi	r23, 0x00	; 0
    1a34:	42 e0       	ldi	r20, 0x02	; 2
    1a36:	50 e0       	ldi	r21, 0x00	; 0
    1a38:	a4 0e       	add	r10, r20
    1a3a:	b5 1e       	adc	r11, r21
    1a3c:	c6 01       	movw	r24, r12
    1a3e:	43 d1       	rcall	.+646    	; 0x1cc6 <strnlen>
    1a40:	8c 01       	movw	r16, r24
    1a42:	5f e7       	ldi	r21, 0x7F	; 127
    1a44:	f5 22       	and	r15, r21
    1a46:	13 c0       	rjmp	.+38     	; 0x1a6e <vfprintf+0x1b0>
    1a48:	f5 01       	movw	r30, r10
    1a4a:	c0 80       	ld	r12, Z
    1a4c:	d1 80       	ldd	r13, Z+1	; 0x01
    1a4e:	f6 fc       	sbrc	r15, 6
    1a50:	03 c0       	rjmp	.+6      	; 0x1a58 <vfprintf+0x19a>
    1a52:	6f ef       	ldi	r22, 0xFF	; 255
    1a54:	7f ef       	ldi	r23, 0xFF	; 255
    1a56:	02 c0       	rjmp	.+4      	; 0x1a5c <vfprintf+0x19e>
    1a58:	69 2d       	mov	r22, r9
    1a5a:	70 e0       	ldi	r23, 0x00	; 0
    1a5c:	42 e0       	ldi	r20, 0x02	; 2
    1a5e:	50 e0       	ldi	r21, 0x00	; 0
    1a60:	a4 0e       	add	r10, r20
    1a62:	b5 1e       	adc	r11, r21
    1a64:	c6 01       	movw	r24, r12
    1a66:	24 d1       	rcall	.+584    	; 0x1cb0 <strnlen_P>
    1a68:	8c 01       	movw	r16, r24
    1a6a:	50 e8       	ldi	r21, 0x80	; 128
    1a6c:	f5 2a       	or	r15, r21
    1a6e:	f3 fe       	sbrs	r15, 3
    1a70:	06 c0       	rjmp	.+12     	; 0x1a7e <vfprintf+0x1c0>
    1a72:	18 c0       	rjmp	.+48     	; 0x1aa4 <vfprintf+0x1e6>
    1a74:	80 e2       	ldi	r24, 0x20	; 32
    1a76:	90 e0       	ldi	r25, 0x00	; 0
    1a78:	b3 01       	movw	r22, r6
    1a7a:	30 d1       	rcall	.+608    	; 0x1cdc <fputc>
    1a7c:	ea 94       	dec	r14
    1a7e:	8e 2d       	mov	r24, r14
    1a80:	90 e0       	ldi	r25, 0x00	; 0
    1a82:	08 17       	cp	r16, r24
    1a84:	19 07       	cpc	r17, r25
    1a86:	b0 f3       	brcs	.-20     	; 0x1a74 <vfprintf+0x1b6>
    1a88:	0d c0       	rjmp	.+26     	; 0x1aa4 <vfprintf+0x1e6>
    1a8a:	f6 01       	movw	r30, r12
    1a8c:	f7 fc       	sbrc	r15, 7
    1a8e:	85 91       	lpm	r24, Z+
    1a90:	f7 fe       	sbrs	r15, 7
    1a92:	81 91       	ld	r24, Z+
    1a94:	6f 01       	movw	r12, r30
    1a96:	90 e0       	ldi	r25, 0x00	; 0
    1a98:	b3 01       	movw	r22, r6
    1a9a:	20 d1       	rcall	.+576    	; 0x1cdc <fputc>
    1a9c:	e1 10       	cpse	r14, r1
    1a9e:	ea 94       	dec	r14
    1aa0:	01 50       	subi	r16, 0x01	; 1
    1aa2:	10 40       	sbci	r17, 0x00	; 0
    1aa4:	01 15       	cp	r16, r1
    1aa6:	11 05       	cpc	r17, r1
    1aa8:	81 f7       	brne	.-32     	; 0x1a8a <vfprintf+0x1cc>
    1aaa:	e2 c0       	rjmp	.+452    	; 0x1c70 <vfprintf+0x3b2>
    1aac:	94 36       	cpi	r25, 0x64	; 100
    1aae:	11 f0       	breq	.+4      	; 0x1ab4 <vfprintf+0x1f6>
    1ab0:	99 36       	cpi	r25, 0x69	; 105
    1ab2:	61 f5       	brne	.+88     	; 0x1b0c <vfprintf+0x24e>
    1ab4:	f7 fe       	sbrs	r15, 7
    1ab6:	08 c0       	rjmp	.+16     	; 0x1ac8 <vfprintf+0x20a>
    1ab8:	f5 01       	movw	r30, r10
    1aba:	20 81       	ld	r18, Z
    1abc:	31 81       	ldd	r19, Z+1	; 0x01
    1abe:	42 81       	ldd	r20, Z+2	; 0x02
    1ac0:	53 81       	ldd	r21, Z+3	; 0x03
    1ac2:	84 e0       	ldi	r24, 0x04	; 4
    1ac4:	90 e0       	ldi	r25, 0x00	; 0
    1ac6:	0a c0       	rjmp	.+20     	; 0x1adc <vfprintf+0x21e>
    1ac8:	f5 01       	movw	r30, r10
    1aca:	80 81       	ld	r24, Z
    1acc:	91 81       	ldd	r25, Z+1	; 0x01
    1ace:	9c 01       	movw	r18, r24
    1ad0:	44 27       	eor	r20, r20
    1ad2:	37 fd       	sbrc	r19, 7
    1ad4:	40 95       	com	r20
    1ad6:	54 2f       	mov	r21, r20
    1ad8:	82 e0       	ldi	r24, 0x02	; 2
    1ada:	90 e0       	ldi	r25, 0x00	; 0
    1adc:	a8 0e       	add	r10, r24
    1ade:	b9 1e       	adc	r11, r25
    1ae0:	9f e6       	ldi	r25, 0x6F	; 111
    1ae2:	f9 22       	and	r15, r25
    1ae4:	57 ff       	sbrs	r21, 7
    1ae6:	09 c0       	rjmp	.+18     	; 0x1afa <vfprintf+0x23c>
    1ae8:	50 95       	com	r21
    1aea:	40 95       	com	r20
    1aec:	30 95       	com	r19
    1aee:	21 95       	neg	r18
    1af0:	3f 4f       	sbci	r19, 0xFF	; 255
    1af2:	4f 4f       	sbci	r20, 0xFF	; 255
    1af4:	5f 4f       	sbci	r21, 0xFF	; 255
    1af6:	e0 e8       	ldi	r30, 0x80	; 128
    1af8:	fe 2a       	or	r15, r30
    1afa:	ca 01       	movw	r24, r20
    1afc:	b9 01       	movw	r22, r18
    1afe:	a1 01       	movw	r20, r2
    1b00:	2a e0       	ldi	r18, 0x0A	; 10
    1b02:	30 e0       	ldi	r19, 0x00	; 0
    1b04:	17 d1       	rcall	.+558    	; 0x1d34 <__ultoa_invert>
    1b06:	d8 2e       	mov	r13, r24
    1b08:	d2 18       	sub	r13, r2
    1b0a:	3f c0       	rjmp	.+126    	; 0x1b8a <vfprintf+0x2cc>
    1b0c:	95 37       	cpi	r25, 0x75	; 117
    1b0e:	29 f4       	brne	.+10     	; 0x1b1a <vfprintf+0x25c>
    1b10:	1f 2d       	mov	r17, r15
    1b12:	1f 7e       	andi	r17, 0xEF	; 239
    1b14:	2a e0       	ldi	r18, 0x0A	; 10
    1b16:	30 e0       	ldi	r19, 0x00	; 0
    1b18:	1d c0       	rjmp	.+58     	; 0x1b54 <vfprintf+0x296>
    1b1a:	1f 2d       	mov	r17, r15
    1b1c:	19 7f       	andi	r17, 0xF9	; 249
    1b1e:	9f 36       	cpi	r25, 0x6F	; 111
    1b20:	61 f0       	breq	.+24     	; 0x1b3a <vfprintf+0x27c>
    1b22:	90 37       	cpi	r25, 0x70	; 112
    1b24:	20 f4       	brcc	.+8      	; 0x1b2e <vfprintf+0x270>
    1b26:	98 35       	cpi	r25, 0x58	; 88
    1b28:	09 f0       	breq	.+2      	; 0x1b2c <vfprintf+0x26e>
    1b2a:	a5 c0       	rjmp	.+330    	; 0x1c76 <vfprintf+0x3b8>
    1b2c:	0f c0       	rjmp	.+30     	; 0x1b4c <vfprintf+0x28e>
    1b2e:	90 37       	cpi	r25, 0x70	; 112
    1b30:	39 f0       	breq	.+14     	; 0x1b40 <vfprintf+0x282>
    1b32:	98 37       	cpi	r25, 0x78	; 120
    1b34:	09 f0       	breq	.+2      	; 0x1b38 <vfprintf+0x27a>
    1b36:	9f c0       	rjmp	.+318    	; 0x1c76 <vfprintf+0x3b8>
    1b38:	04 c0       	rjmp	.+8      	; 0x1b42 <vfprintf+0x284>
    1b3a:	28 e0       	ldi	r18, 0x08	; 8
    1b3c:	30 e0       	ldi	r19, 0x00	; 0
    1b3e:	0a c0       	rjmp	.+20     	; 0x1b54 <vfprintf+0x296>
    1b40:	10 61       	ori	r17, 0x10	; 16
    1b42:	14 fd       	sbrc	r17, 4
    1b44:	14 60       	ori	r17, 0x04	; 4
    1b46:	20 e1       	ldi	r18, 0x10	; 16
    1b48:	30 e0       	ldi	r19, 0x00	; 0
    1b4a:	04 c0       	rjmp	.+8      	; 0x1b54 <vfprintf+0x296>
    1b4c:	14 fd       	sbrc	r17, 4
    1b4e:	16 60       	ori	r17, 0x06	; 6
    1b50:	20 e1       	ldi	r18, 0x10	; 16
    1b52:	32 e0       	ldi	r19, 0x02	; 2
    1b54:	17 ff       	sbrs	r17, 7
    1b56:	08 c0       	rjmp	.+16     	; 0x1b68 <vfprintf+0x2aa>
    1b58:	f5 01       	movw	r30, r10
    1b5a:	60 81       	ld	r22, Z
    1b5c:	71 81       	ldd	r23, Z+1	; 0x01
    1b5e:	82 81       	ldd	r24, Z+2	; 0x02
    1b60:	93 81       	ldd	r25, Z+3	; 0x03
    1b62:	44 e0       	ldi	r20, 0x04	; 4
    1b64:	50 e0       	ldi	r21, 0x00	; 0
    1b66:	08 c0       	rjmp	.+16     	; 0x1b78 <vfprintf+0x2ba>
    1b68:	f5 01       	movw	r30, r10
    1b6a:	80 81       	ld	r24, Z
    1b6c:	91 81       	ldd	r25, Z+1	; 0x01
    1b6e:	bc 01       	movw	r22, r24
    1b70:	80 e0       	ldi	r24, 0x00	; 0
    1b72:	90 e0       	ldi	r25, 0x00	; 0
    1b74:	42 e0       	ldi	r20, 0x02	; 2
    1b76:	50 e0       	ldi	r21, 0x00	; 0
    1b78:	a4 0e       	add	r10, r20
    1b7a:	b5 1e       	adc	r11, r21
    1b7c:	a1 01       	movw	r20, r2
    1b7e:	da d0       	rcall	.+436    	; 0x1d34 <__ultoa_invert>
    1b80:	d8 2e       	mov	r13, r24
    1b82:	d2 18       	sub	r13, r2
    1b84:	8f e7       	ldi	r24, 0x7F	; 127
    1b86:	f8 2e       	mov	r15, r24
    1b88:	f1 22       	and	r15, r17
    1b8a:	f6 fe       	sbrs	r15, 6
    1b8c:	0b c0       	rjmp	.+22     	; 0x1ba4 <vfprintf+0x2e6>
    1b8e:	5e ef       	ldi	r21, 0xFE	; 254
    1b90:	f5 22       	and	r15, r21
    1b92:	d9 14       	cp	r13, r9
    1b94:	38 f4       	brcc	.+14     	; 0x1ba4 <vfprintf+0x2e6>
    1b96:	f4 fe       	sbrs	r15, 4
    1b98:	07 c0       	rjmp	.+14     	; 0x1ba8 <vfprintf+0x2ea>
    1b9a:	f2 fc       	sbrc	r15, 2
    1b9c:	05 c0       	rjmp	.+10     	; 0x1ba8 <vfprintf+0x2ea>
    1b9e:	8f ee       	ldi	r24, 0xEF	; 239
    1ba0:	f8 22       	and	r15, r24
    1ba2:	02 c0       	rjmp	.+4      	; 0x1ba8 <vfprintf+0x2ea>
    1ba4:	1d 2d       	mov	r17, r13
    1ba6:	01 c0       	rjmp	.+2      	; 0x1baa <vfprintf+0x2ec>
    1ba8:	19 2d       	mov	r17, r9
    1baa:	f4 fe       	sbrs	r15, 4
    1bac:	0d c0       	rjmp	.+26     	; 0x1bc8 <vfprintf+0x30a>
    1bae:	fe 01       	movw	r30, r28
    1bb0:	ed 0d       	add	r30, r13
    1bb2:	f1 1d       	adc	r31, r1
    1bb4:	80 81       	ld	r24, Z
    1bb6:	80 33       	cpi	r24, 0x30	; 48
    1bb8:	19 f4       	brne	.+6      	; 0x1bc0 <vfprintf+0x302>
    1bba:	99 ee       	ldi	r25, 0xE9	; 233
    1bbc:	f9 22       	and	r15, r25
    1bbe:	08 c0       	rjmp	.+16     	; 0x1bd0 <vfprintf+0x312>
    1bc0:	1f 5f       	subi	r17, 0xFF	; 255
    1bc2:	f2 fe       	sbrs	r15, 2
    1bc4:	05 c0       	rjmp	.+10     	; 0x1bd0 <vfprintf+0x312>
    1bc6:	03 c0       	rjmp	.+6      	; 0x1bce <vfprintf+0x310>
    1bc8:	8f 2d       	mov	r24, r15
    1bca:	86 78       	andi	r24, 0x86	; 134
    1bcc:	09 f0       	breq	.+2      	; 0x1bd0 <vfprintf+0x312>
    1bce:	1f 5f       	subi	r17, 0xFF	; 255
    1bd0:	0f 2d       	mov	r16, r15
    1bd2:	f3 fc       	sbrc	r15, 3
    1bd4:	13 c0       	rjmp	.+38     	; 0x1bfc <vfprintf+0x33e>
    1bd6:	f0 fe       	sbrs	r15, 0
    1bd8:	0e c0       	rjmp	.+28     	; 0x1bf6 <vfprintf+0x338>
    1bda:	1e 15       	cp	r17, r14
    1bdc:	10 f0       	brcs	.+4      	; 0x1be2 <vfprintf+0x324>
    1bde:	9d 2c       	mov	r9, r13
    1be0:	0a c0       	rjmp	.+20     	; 0x1bf6 <vfprintf+0x338>
    1be2:	9d 2c       	mov	r9, r13
    1be4:	9e 0c       	add	r9, r14
    1be6:	91 1a       	sub	r9, r17
    1be8:	1e 2d       	mov	r17, r14
    1bea:	05 c0       	rjmp	.+10     	; 0x1bf6 <vfprintf+0x338>
    1bec:	80 e2       	ldi	r24, 0x20	; 32
    1bee:	90 e0       	ldi	r25, 0x00	; 0
    1bf0:	b3 01       	movw	r22, r6
    1bf2:	74 d0       	rcall	.+232    	; 0x1cdc <fputc>
    1bf4:	1f 5f       	subi	r17, 0xFF	; 255
    1bf6:	1e 15       	cp	r17, r14
    1bf8:	c8 f3       	brcs	.-14     	; 0x1bec <vfprintf+0x32e>
    1bfa:	04 c0       	rjmp	.+8      	; 0x1c04 <vfprintf+0x346>
    1bfc:	1e 15       	cp	r17, r14
    1bfe:	10 f4       	brcc	.+4      	; 0x1c04 <vfprintf+0x346>
    1c00:	e1 1a       	sub	r14, r17
    1c02:	01 c0       	rjmp	.+2      	; 0x1c06 <vfprintf+0x348>
    1c04:	ee 24       	eor	r14, r14
    1c06:	04 ff       	sbrs	r16, 4
    1c08:	0e c0       	rjmp	.+28     	; 0x1c26 <vfprintf+0x368>
    1c0a:	80 e3       	ldi	r24, 0x30	; 48
    1c0c:	90 e0       	ldi	r25, 0x00	; 0
    1c0e:	b3 01       	movw	r22, r6
    1c10:	65 d0       	rcall	.+202    	; 0x1cdc <fputc>
    1c12:	02 ff       	sbrs	r16, 2
    1c14:	1b c0       	rjmp	.+54     	; 0x1c4c <vfprintf+0x38e>
    1c16:	01 fd       	sbrc	r16, 1
    1c18:	03 c0       	rjmp	.+6      	; 0x1c20 <vfprintf+0x362>
    1c1a:	88 e7       	ldi	r24, 0x78	; 120
    1c1c:	90 e0       	ldi	r25, 0x00	; 0
    1c1e:	0e c0       	rjmp	.+28     	; 0x1c3c <vfprintf+0x37e>
    1c20:	88 e5       	ldi	r24, 0x58	; 88
    1c22:	90 e0       	ldi	r25, 0x00	; 0
    1c24:	0b c0       	rjmp	.+22     	; 0x1c3c <vfprintf+0x37e>
    1c26:	80 2f       	mov	r24, r16
    1c28:	86 78       	andi	r24, 0x86	; 134
    1c2a:	81 f0       	breq	.+32     	; 0x1c4c <vfprintf+0x38e>
    1c2c:	01 ff       	sbrs	r16, 1
    1c2e:	02 c0       	rjmp	.+4      	; 0x1c34 <vfprintf+0x376>
    1c30:	8b e2       	ldi	r24, 0x2B	; 43
    1c32:	01 c0       	rjmp	.+2      	; 0x1c36 <vfprintf+0x378>
    1c34:	80 e2       	ldi	r24, 0x20	; 32
    1c36:	f7 fc       	sbrc	r15, 7
    1c38:	8d e2       	ldi	r24, 0x2D	; 45
    1c3a:	90 e0       	ldi	r25, 0x00	; 0
    1c3c:	b3 01       	movw	r22, r6
    1c3e:	4e d0       	rcall	.+156    	; 0x1cdc <fputc>
    1c40:	05 c0       	rjmp	.+10     	; 0x1c4c <vfprintf+0x38e>
    1c42:	80 e3       	ldi	r24, 0x30	; 48
    1c44:	90 e0       	ldi	r25, 0x00	; 0
    1c46:	b3 01       	movw	r22, r6
    1c48:	49 d0       	rcall	.+146    	; 0x1cdc <fputc>
    1c4a:	9a 94       	dec	r9
    1c4c:	d9 14       	cp	r13, r9
    1c4e:	c8 f3       	brcs	.-14     	; 0x1c42 <vfprintf+0x384>
    1c50:	da 94       	dec	r13
    1c52:	f1 01       	movw	r30, r2
    1c54:	ed 0d       	add	r30, r13
    1c56:	f1 1d       	adc	r31, r1
    1c58:	80 81       	ld	r24, Z
    1c5a:	90 e0       	ldi	r25, 0x00	; 0
    1c5c:	b3 01       	movw	r22, r6
    1c5e:	3e d0       	rcall	.+124    	; 0x1cdc <fputc>
    1c60:	dd 20       	and	r13, r13
    1c62:	b1 f7       	brne	.-20     	; 0x1c50 <vfprintf+0x392>
    1c64:	05 c0       	rjmp	.+10     	; 0x1c70 <vfprintf+0x3b2>
    1c66:	80 e2       	ldi	r24, 0x20	; 32
    1c68:	90 e0       	ldi	r25, 0x00	; 0
    1c6a:	b3 01       	movw	r22, r6
    1c6c:	37 d0       	rcall	.+110    	; 0x1cdc <fputc>
    1c6e:	ea 94       	dec	r14
    1c70:	ee 20       	and	r14, r14
    1c72:	c9 f7       	brne	.-14     	; 0x1c66 <vfprintf+0x3a8>
    1c74:	50 ce       	rjmp	.-864    	; 0x1916 <vfprintf+0x58>
    1c76:	f3 01       	movw	r30, r6
    1c78:	66 81       	ldd	r22, Z+6	; 0x06
    1c7a:	77 81       	ldd	r23, Z+7	; 0x07
    1c7c:	cb 01       	movw	r24, r22
    1c7e:	2b 96       	adiw	r28, 0x0b	; 11
    1c80:	0f b6       	in	r0, 0x3f	; 63
    1c82:	f8 94       	cli
    1c84:	de bf       	out	0x3e, r29	; 62
    1c86:	0f be       	out	0x3f, r0	; 63
    1c88:	cd bf       	out	0x3d, r28	; 61
    1c8a:	cf 91       	pop	r28
    1c8c:	df 91       	pop	r29
    1c8e:	1f 91       	pop	r17
    1c90:	0f 91       	pop	r16
    1c92:	ff 90       	pop	r15
    1c94:	ef 90       	pop	r14
    1c96:	df 90       	pop	r13
    1c98:	cf 90       	pop	r12
    1c9a:	bf 90       	pop	r11
    1c9c:	af 90       	pop	r10
    1c9e:	9f 90       	pop	r9
    1ca0:	8f 90       	pop	r8
    1ca2:	7f 90       	pop	r7
    1ca4:	6f 90       	pop	r6
    1ca6:	5f 90       	pop	r5
    1ca8:	4f 90       	pop	r4
    1caa:	3f 90       	pop	r3
    1cac:	2f 90       	pop	r2
    1cae:	08 95       	ret

00001cb0 <strnlen_P>:
    1cb0:	fc 01       	movw	r30, r24
    1cb2:	05 90       	lpm	r0, Z+
    1cb4:	61 50       	subi	r22, 0x01	; 1
    1cb6:	70 40       	sbci	r23, 0x00	; 0
    1cb8:	01 10       	cpse	r0, r1
    1cba:	d8 f7       	brcc	.-10     	; 0x1cb2 <strnlen_P+0x2>
    1cbc:	80 95       	com	r24
    1cbe:	90 95       	com	r25
    1cc0:	8e 0f       	add	r24, r30
    1cc2:	9f 1f       	adc	r25, r31
    1cc4:	08 95       	ret

00001cc6 <strnlen>:
    1cc6:	fc 01       	movw	r30, r24
    1cc8:	61 50       	subi	r22, 0x01	; 1
    1cca:	70 40       	sbci	r23, 0x00	; 0
    1ccc:	01 90       	ld	r0, Z+
    1cce:	01 10       	cpse	r0, r1
    1cd0:	d8 f7       	brcc	.-10     	; 0x1cc8 <strnlen+0x2>
    1cd2:	80 95       	com	r24
    1cd4:	90 95       	com	r25
    1cd6:	8e 0f       	add	r24, r30
    1cd8:	9f 1f       	adc	r25, r31
    1cda:	08 95       	ret

00001cdc <fputc>:
    1cdc:	0f 93       	push	r16
    1cde:	1f 93       	push	r17
    1ce0:	cf 93       	push	r28
    1ce2:	df 93       	push	r29
    1ce4:	8c 01       	movw	r16, r24
    1ce6:	eb 01       	movw	r28, r22
    1ce8:	8b 81       	ldd	r24, Y+3	; 0x03
    1cea:	81 ff       	sbrs	r24, 1
    1cec:	1b c0       	rjmp	.+54     	; 0x1d24 <fputc+0x48>
    1cee:	82 ff       	sbrs	r24, 2
    1cf0:	0d c0       	rjmp	.+26     	; 0x1d0c <fputc+0x30>
    1cf2:	2e 81       	ldd	r18, Y+6	; 0x06
    1cf4:	3f 81       	ldd	r19, Y+7	; 0x07
    1cf6:	8c 81       	ldd	r24, Y+4	; 0x04
    1cf8:	9d 81       	ldd	r25, Y+5	; 0x05
    1cfa:	28 17       	cp	r18, r24
    1cfc:	39 07       	cpc	r19, r25
    1cfe:	64 f4       	brge	.+24     	; 0x1d18 <fputc+0x3c>
    1d00:	e8 81       	ld	r30, Y
    1d02:	f9 81       	ldd	r31, Y+1	; 0x01
    1d04:	01 93       	st	Z+, r16
    1d06:	f9 83       	std	Y+1, r31	; 0x01
    1d08:	e8 83       	st	Y, r30
    1d0a:	06 c0       	rjmp	.+12     	; 0x1d18 <fputc+0x3c>
    1d0c:	e8 85       	ldd	r30, Y+8	; 0x08
    1d0e:	f9 85       	ldd	r31, Y+9	; 0x09
    1d10:	80 2f       	mov	r24, r16
    1d12:	09 95       	icall
    1d14:	89 2b       	or	r24, r25
    1d16:	31 f4       	brne	.+12     	; 0x1d24 <fputc+0x48>
    1d18:	8e 81       	ldd	r24, Y+6	; 0x06
    1d1a:	9f 81       	ldd	r25, Y+7	; 0x07
    1d1c:	01 96       	adiw	r24, 0x01	; 1
    1d1e:	9f 83       	std	Y+7, r25	; 0x07
    1d20:	8e 83       	std	Y+6, r24	; 0x06
    1d22:	02 c0       	rjmp	.+4      	; 0x1d28 <fputc+0x4c>
    1d24:	0f ef       	ldi	r16, 0xFF	; 255
    1d26:	1f ef       	ldi	r17, 0xFF	; 255
    1d28:	c8 01       	movw	r24, r16
    1d2a:	df 91       	pop	r29
    1d2c:	cf 91       	pop	r28
    1d2e:	1f 91       	pop	r17
    1d30:	0f 91       	pop	r16
    1d32:	08 95       	ret

00001d34 <__ultoa_invert>:
    1d34:	fa 01       	movw	r30, r20
    1d36:	aa 27       	eor	r26, r26
    1d38:	28 30       	cpi	r18, 0x08	; 8
    1d3a:	51 f1       	breq	.+84     	; 0x1d90 <__ultoa_invert+0x5c>
    1d3c:	20 31       	cpi	r18, 0x10	; 16
    1d3e:	81 f1       	breq	.+96     	; 0x1da0 <__ultoa_invert+0x6c>
    1d40:	e8 94       	clt
    1d42:	6f 93       	push	r22
    1d44:	6e 7f       	andi	r22, 0xFE	; 254
    1d46:	6e 5f       	subi	r22, 0xFE	; 254
    1d48:	7f 4f       	sbci	r23, 0xFF	; 255
    1d4a:	8f 4f       	sbci	r24, 0xFF	; 255
    1d4c:	9f 4f       	sbci	r25, 0xFF	; 255
    1d4e:	af 4f       	sbci	r26, 0xFF	; 255
    1d50:	b1 e0       	ldi	r27, 0x01	; 1
    1d52:	3e d0       	rcall	.+124    	; 0x1dd0 <__ultoa_invert+0x9c>
    1d54:	b4 e0       	ldi	r27, 0x04	; 4
    1d56:	3c d0       	rcall	.+120    	; 0x1dd0 <__ultoa_invert+0x9c>
    1d58:	67 0f       	add	r22, r23
    1d5a:	78 1f       	adc	r23, r24
    1d5c:	89 1f       	adc	r24, r25
    1d5e:	9a 1f       	adc	r25, r26
    1d60:	a1 1d       	adc	r26, r1
    1d62:	68 0f       	add	r22, r24
    1d64:	79 1f       	adc	r23, r25
    1d66:	8a 1f       	adc	r24, r26
    1d68:	91 1d       	adc	r25, r1
    1d6a:	a1 1d       	adc	r26, r1
    1d6c:	6a 0f       	add	r22, r26
    1d6e:	71 1d       	adc	r23, r1
    1d70:	81 1d       	adc	r24, r1
    1d72:	91 1d       	adc	r25, r1
    1d74:	a1 1d       	adc	r26, r1
    1d76:	20 d0       	rcall	.+64     	; 0x1db8 <__ultoa_invert+0x84>
    1d78:	09 f4       	brne	.+2      	; 0x1d7c <__ultoa_invert+0x48>
    1d7a:	68 94       	set
    1d7c:	3f 91       	pop	r19
    1d7e:	2a e0       	ldi	r18, 0x0A	; 10
    1d80:	26 9f       	mul	r18, r22
    1d82:	11 24       	eor	r1, r1
    1d84:	30 19       	sub	r19, r0
    1d86:	30 5d       	subi	r19, 0xD0	; 208
    1d88:	31 93       	st	Z+, r19
    1d8a:	de f6       	brtc	.-74     	; 0x1d42 <__ultoa_invert+0xe>
    1d8c:	cf 01       	movw	r24, r30
    1d8e:	08 95       	ret
    1d90:	46 2f       	mov	r20, r22
    1d92:	47 70       	andi	r20, 0x07	; 7
    1d94:	40 5d       	subi	r20, 0xD0	; 208
    1d96:	41 93       	st	Z+, r20
    1d98:	b3 e0       	ldi	r27, 0x03	; 3
    1d9a:	0f d0       	rcall	.+30     	; 0x1dba <__ultoa_invert+0x86>
    1d9c:	c9 f7       	brne	.-14     	; 0x1d90 <__ultoa_invert+0x5c>
    1d9e:	f6 cf       	rjmp	.-20     	; 0x1d8c <__ultoa_invert+0x58>
    1da0:	46 2f       	mov	r20, r22
    1da2:	4f 70       	andi	r20, 0x0F	; 15
    1da4:	40 5d       	subi	r20, 0xD0	; 208
    1da6:	4a 33       	cpi	r20, 0x3A	; 58
    1da8:	18 f0       	brcs	.+6      	; 0x1db0 <__ultoa_invert+0x7c>
    1daa:	49 5d       	subi	r20, 0xD9	; 217
    1dac:	31 fd       	sbrc	r19, 1
    1dae:	40 52       	subi	r20, 0x20	; 32
    1db0:	41 93       	st	Z+, r20
    1db2:	02 d0       	rcall	.+4      	; 0x1db8 <__ultoa_invert+0x84>
    1db4:	a9 f7       	brne	.-22     	; 0x1da0 <__ultoa_invert+0x6c>
    1db6:	ea cf       	rjmp	.-44     	; 0x1d8c <__ultoa_invert+0x58>
    1db8:	b4 e0       	ldi	r27, 0x04	; 4
    1dba:	a6 95       	lsr	r26
    1dbc:	97 95       	ror	r25
    1dbe:	87 95       	ror	r24
    1dc0:	77 95       	ror	r23
    1dc2:	67 95       	ror	r22
    1dc4:	ba 95       	dec	r27
    1dc6:	c9 f7       	brne	.-14     	; 0x1dba <__ultoa_invert+0x86>
    1dc8:	00 97       	sbiw	r24, 0x00	; 0
    1dca:	61 05       	cpc	r22, r1
    1dcc:	71 05       	cpc	r23, r1
    1dce:	08 95       	ret
    1dd0:	9b 01       	movw	r18, r22
    1dd2:	ac 01       	movw	r20, r24
    1dd4:	0a 2e       	mov	r0, r26
    1dd6:	06 94       	lsr	r0
    1dd8:	57 95       	ror	r21
    1dda:	47 95       	ror	r20
    1ddc:	37 95       	ror	r19
    1dde:	27 95       	ror	r18
    1de0:	ba 95       	dec	r27
    1de2:	c9 f7       	brne	.-14     	; 0x1dd6 <__ultoa_invert+0xa2>
    1de4:	62 0f       	add	r22, r18
    1de6:	73 1f       	adc	r23, r19
    1de8:	84 1f       	adc	r24, r20
    1dea:	95 1f       	adc	r25, r21
    1dec:	a0 1d       	adc	r26, r0
    1dee:	08 95       	ret

00001df0 <_exit>:
    1df0:	f8 94       	cli

00001df2 <__stop_program>:
    1df2:	ff cf       	rjmp	.-2      	; 0x1df2 <__stop_program>
