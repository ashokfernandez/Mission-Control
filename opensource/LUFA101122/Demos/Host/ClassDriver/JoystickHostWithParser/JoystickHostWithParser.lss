
JoystickHostWithParser.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000003a  00800100  000024a0  00002534  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000024a0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000003ec  0080013a  0080013a  0000256e  2**0
                  ALLOC
  3 .stab         00001014  00000000  00000000  00002570  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000315  00000000  00000000  00003584  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000006d8  00000000  00000000  00003899  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000ebf  00000000  00000000  00003f71  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000aed5  00000000  00000000  00004e30  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00002b36  00000000  00000000  0000fd05  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000075c3  00000000  00000000  0001283b  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000ab0  00000000  00000000  00019e00  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000042c0  00000000  00000000  0001a8b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00004f62  00000000  00000000  0001eb70  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000007d0  00000000  00000000  00023ad2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:

	return USB_Host_SendControlRequest(Buffer);
}

uint8_t USB_Host_ClearPipeStall(const uint8_t EndpointNum)
{
       0:	1f c1       	rjmp	.+574    	; 0x240 <__ctors_end>
{
	USB_GetNextDescriptorOfType(BytesRem, CurrConfigLoc, AfterType);

	if (*BytesRem)
	  USB_GetNextDescriptorOfType(BytesRem, CurrConfigLoc, Type);
}
       2:	00 00       	nop
			Length--;
		}
	}

	return PIPE_RWSTREAM_NoError;
}
       4:	3b c1       	rjmp	.+630    	; 0x27c <__bad_interrupt>
	return true;
}

void USB_SetHIDReportItemInfo(uint8_t* ReportData,
                              HID_ReportItem_t* const ReportItem)
{
       6:	00 00       	nop

	return ReportReceived;
}

uint8_t HID_Host_SetBootProtocol(USB_ClassInfo_HID_Host_t* const HIDInterfaceInfo)
{
       8:	39 c1       	rjmp	.+626    	; 0x27c <__bad_interrupt>
       a:	00 00       	nop
       c:	37 c1       	rjmp	.+622    	; 0x27c <__bad_interrupt>
       e:	00 00       	nop
      10:	35 c1       	rjmp	.+618    	; 0x27c <__bad_interrupt>
      12:	00 00       	nop
      14:	33 c1       	rjmp	.+614    	; 0x27c <__bad_interrupt>
      16:	00 00       	nop
      18:	31 c1       	rjmp	.+610    	; 0x27c <__bad_interrupt>
      1a:	00 00       	nop
      1c:	2f c1       	rjmp	.+606    	; 0x27c <__bad_interrupt>
      1e:	00 00       	nop
      20:	2d c1       	rjmp	.+602    	; 0x27c <__bad_interrupt>
      22:	00 00       	nop
      24:	2b c1       	rjmp	.+598    	; 0x27c <__bad_interrupt>
      26:	00 00       	nop
      28:	e0 c5       	rjmp	.+3008   	; 0xbea <__vector_10>
      2a:	00 00       	nop
      2c:	27 c1       	rjmp	.+590    	; 0x27c <__bad_interrupt>
      2e:	00 00       	nop
      30:	25 c1       	rjmp	.+586    	; 0x27c <__bad_interrupt>
      32:	00 00       	nop
      34:	23 c1       	rjmp	.+582    	; 0x27c <__bad_interrupt>
      36:	00 00       	nop
      38:	21 c1       	rjmp	.+578    	; 0x27c <__bad_interrupt>
      3a:	00 00       	nop
      3c:	1f c1       	rjmp	.+574    	; 0x27c <__bad_interrupt>
      3e:	00 00       	nop
      40:	1d c1       	rjmp	.+570    	; 0x27c <__bad_interrupt>
      42:	00 00       	nop
      44:	1b c1       	rjmp	.+566    	; 0x27c <__bad_interrupt>
      46:	00 00       	nop
      48:	19 c1       	rjmp	.+562    	; 0x27c <__bad_interrupt>
      4a:	00 00       	nop
      4c:	17 c1       	rjmp	.+558    	; 0x27c <__bad_interrupt>
      4e:	00 00       	nop
      50:	15 c1       	rjmp	.+554    	; 0x27c <__bad_interrupt>
      52:	00 00       	nop
      54:	13 c1       	rjmp	.+550    	; 0x27c <__bad_interrupt>
      56:	00 00       	nop
      58:	11 c1       	rjmp	.+546    	; 0x27c <__bad_interrupt>
      5a:	00 00       	nop
      5c:	0f c1       	rjmp	.+542    	; 0x27c <__bad_interrupt>
      5e:	00 00       	nop
      60:	0d c1       	rjmp	.+538    	; 0x27c <__bad_interrupt>
      62:	00 00       	nop
      64:	0b c1       	rjmp	.+534    	; 0x27c <__bad_interrupt>
      66:	00 00       	nop
      68:	09 c1       	rjmp	.+530    	; 0x27c <__bad_interrupt>
      6a:	00 00       	nop
      6c:	07 c1       	rjmp	.+526    	; 0x27c <__bad_interrupt>
      6e:	00 00       	nop
      70:	05 c1       	rjmp	.+522    	; 0x27c <__bad_interrupt>
      72:	00 00       	nop
      74:	03 c1       	rjmp	.+518    	; 0x27c <__bad_interrupt>
      76:	00 00       	nop
      78:	01 c1       	rjmp	.+514    	; 0x27c <__bad_interrupt>
      7a:	00 00       	nop
      7c:	ff c0       	rjmp	.+510    	; 0x27c <__bad_interrupt>
      7e:	00 00       	nop
      80:	fd c0       	rjmp	.+506    	; 0x27c <__bad_interrupt>
      82:	00 00       	nop
      84:	fb c0       	rjmp	.+502    	; 0x27c <__bad_interrupt>
      86:	00 00       	nop
      88:	f9 c0       	rjmp	.+498    	; 0x27c <__bad_interrupt>
      8a:	00 00       	nop
      8c:	f7 c0       	rjmp	.+494    	; 0x27c <__bad_interrupt>
      8e:	00 00       	nop
      90:	f5 c0       	rjmp	.+490    	; 0x27c <__bad_interrupt>
      92:	00 00       	nop
      94:	f3 c0       	rjmp	.+486    	; 0x27c <__bad_interrupt>
      96:	00 00       	nop

00000098 <__c.4197>:
      98:	1b 5b 33 31 6d 44 65 76 20 45 6e 75 6d 20 45 72     .[31mDev Enum Er
      a8:	72 6f 72 0d 0a 20 2d 2d 20 45 72 72 6f 72 20 43     ror.. -- Error C
      b8:	6f 64 65 20 25 64 0d 0a 20 2d 2d 20 53 75 62 20     ode %d.. -- Sub 
      c8:	45 72 72 6f 72 20 43 6f 64 65 20 25 64 0d 0a 20     Error Code %d.. 
      d8:	2d 2d 20 49 6e 20 53 74 61 74 65 20 25 64 0d 0a     -- In State %d..
      e8:	1b 5b 33 37 6d 00                                   .[37m.

000000ee <__c.4189>:
      ee:	1b 5b 33 31 6d 48 6f 73 74 20 4d 6f 64 65 20 45     .[31mHost Mode E
      fe:	72 72 6f 72 0d 0a 20 2d 2d 20 45 72 72 6f 72 20     rror.. -- Error 
     10e:	43 6f 64 65 20 25 64 0d 0a 1b 5b 33 37 6d 00        Code %d...[37m.

0000011d <__c.4181>:
     11d:	0d 0a 44 65 76 69 63 65 20 55 6e 61 74 74 61 63     ..Device Unattac
     12d:	68 65 64 2e 0d 0a 00                                hed....

00000134 <__c.4176>:
     134:	44 65 76 69 63 65 20 41 74 74 61 63 68 65 64 2e     Device Attached.
     144:	0d 0a 00                                            ...

00000147 <__c.4110>:
     147:	4a 6f 79 73 74 69 63 6b 20 45 6e 75 6d 65 72 61     Joystick Enumera
     157:	74 65 64 2e 0d 0a 00                                ted....

0000015e <__c.4108>:
     15e:	45 72 72 6f 72 20 53 65 74 74 69 6e 67 20 52 65     Error Setting Re
     16e:	70 6f 72 74 20 50 72 6f 74 6f 63 6f 6c 20 4d 6f     port Protocol Mo
     17e:	64 65 20 6f 72 20 4e 6f 74 20 61 20 56 61 6c 69     de or Not a Vali
     18e:	64 20 4a 6f 79 73 74 69 63 6b 2e 0d 0a 00           d Joystick....

0000019c <__c.4106>:
     19c:	45 72 72 6f 72 20 53 65 74 74 69 6e 67 20 44 65     Error Setting De
     1ac:	76 69 63 65 20 43 6f 6e 66 69 67 75 72 61 74 69     vice Configurati
     1bc:	6f 6e 2e 0d 0a 00                                   on....

000001c2 <__c.4104>:
     1c2:	41 74 74 61 63 68 65 64 20 44 65 76 69 63 65 20     Attached Device 
     1d2:	4e 6f 74 20 61 20 56 61 6c 69 64 20 4a 6f 79 73     Not a Valid Joys
     1e2:	74 69 63 6b 2e 0d 0a 00                             tick....

000001ea <__c.4101>:
     1ea:	45 72 72 6f 72 20 52 65 74 72 69 65 76 69 6e 67     Error Retrieving
     1fa:	20 43 6f 6e 66 69 67 75 72 61 74 69 6f 6e 20 44      Configuration D
     20a:	65 73 63 72 69 70 74 6f 72 2e 0d 0a 00              escriptor....

00000217 <__c.4096>:
     217:	1b 5b 33 36 6d 4a 6f 79 73 74 69 63 6b 20 48 6f     .[36mJoystick Ho
     227:	73 74 20 44 65 6d 6f 20 72 75 6e 6e 69 6e 67 2e     st Demo running.
     237:	0d 0a 1b 5b 33 37 6d 00 00                          ...[37m..

00000240 <__ctors_end>:
     240:	11 24       	eor	r1, r1
     242:	1f be       	out	0x3f, r1	; 63
     244:	cf ef       	ldi	r28, 0xFF	; 255
     246:	d0 e2       	ldi	r29, 0x20	; 32
     248:	de bf       	out	0x3e, r29	; 62
     24a:	cd bf       	out	0x3d, r28	; 61

0000024c <__do_copy_data>:
     24c:	11 e0       	ldi	r17, 0x01	; 1
     24e:	a0 e0       	ldi	r26, 0x00	; 0
     250:	b1 e0       	ldi	r27, 0x01	; 1
     252:	e0 ea       	ldi	r30, 0xA0	; 160
     254:	f4 e2       	ldi	r31, 0x24	; 36
     256:	00 e0       	ldi	r16, 0x00	; 0
     258:	0b bf       	out	0x3b, r16	; 59
     25a:	02 c0       	rjmp	.+4      	; 0x260 <__do_copy_data+0x14>
     25c:	07 90       	elpm	r0, Z+
     25e:	0d 92       	st	X+, r0
     260:	aa 33       	cpi	r26, 0x3A	; 58
     262:	b1 07       	cpc	r27, r17
     264:	d9 f7       	brne	.-10     	; 0x25c <__do_copy_data+0x10>

00000266 <__do_clear_bss>:
     266:	15 e0       	ldi	r17, 0x05	; 5
     268:	aa e3       	ldi	r26, 0x3A	; 58
     26a:	b1 e0       	ldi	r27, 0x01	; 1
     26c:	01 c0       	rjmp	.+2      	; 0x270 <.do_clear_bss_start>

0000026e <.do_clear_bss_loop>:
     26e:	1d 92       	st	X+, r1

00000270 <.do_clear_bss_start>:
     270:	a6 32       	cpi	r26, 0x26	; 38
     272:	b1 07       	cpc	r27, r17
     274:	e1 f7       	brne	.-8      	; 0x26e <.do_clear_bss_loop>
     276:	bc d0       	rcall	.+376    	; 0x3f0 <main>
     278:	0c 94 4e 12 	jmp	0x249c	; 0x249c <_exit>

0000027c <__bad_interrupt>:
     27c:	c1 ce       	rjmp	.-638    	; 0x0 <__vectors>

0000027e <EVENT_USB_Host_DeviceEnumerationComplete>:
				PORTD &= ~LEDMask;
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
			{
				PORTD = ((PORTD & ~LEDS_ALL_LEDS) | LEDMask);
     27e:	8b b1       	in	r24, 0x0b	; 11
     280:	8f 70       	andi	r24, 0x0F	; 15
     282:	80 66       	ori	r24, 0x60	; 96
     284:	8b b9       	out	0x0b, r24	; 11
 *  enumerated by the host and is now ready to be used by the application.
 */
void EVENT_USB_Host_DeviceEnumerationComplete(void)
{
	LEDs_SetAllLEDs(LEDMASK_USB_READY);
}
     286:	08 95       	ret

00000288 <CALLBACK_HIDParser_FilterHIDReportItem>:
 *  \param[in] CurrentItem  Pointer to the item the HID report parser is currently working with
 *
 *  \return Boolean true if the item should be stored into the HID report structure, false if it should be discarded
 */
bool CALLBACK_HIDParser_FilterHIDReportItem(HID_ReportItem_t* const CurrentItem)
{
     288:	dc 01       	movw	r26, r24

	/* Iterate through the item's collection path, until either the root collection node or a collection with the
	 * Joystick Usage is found - this prevents Mice, which use identical descriptors except for the Joystick usage
	 * parent node, from being erroneously treated as a joystick by the demo
	 */
	for (HID_CollectionPath_t* CurrPath = CurrentItem->CollectionPath; CurrPath != NULL; CurrPath = CurrPath->Parent)
     28a:	16 96       	adiw	r26, 0x06	; 6
     28c:	ed 91       	ld	r30, X+
     28e:	fc 91       	ld	r31, X
     290:	17 97       	sbiw	r26, 0x07	; 7
     292:	0b c0       	rjmp	.+22     	; 0x2aa <CALLBACK_HIDParser_FilterHIDReportItem+0x22>
	{
		if ((CurrPath->Usage.Page  == USAGE_PAGE_GENERIC_DCTRL) &&
     294:	81 81       	ldd	r24, Z+1	; 0x01
     296:	92 81       	ldd	r25, Z+2	; 0x02
     298:	01 97       	sbiw	r24, 0x01	; 1
     29a:	21 f4       	brne	.+8      	; 0x2a4 <CALLBACK_HIDParser_FilterHIDReportItem+0x1c>
     29c:	83 81       	ldd	r24, Z+3	; 0x03
     29e:	94 81       	ldd	r25, Z+4	; 0x04
     2a0:	04 97       	sbiw	r24, 0x04	; 4
     2a2:	39 f0       	breq	.+14     	; 0x2b2 <CALLBACK_HIDParser_FilterHIDReportItem+0x2a>

	/* Iterate through the item's collection path, until either the root collection node or a collection with the
	 * Joystick Usage is found - this prevents Mice, which use identical descriptors except for the Joystick usage
	 * parent node, from being erroneously treated as a joystick by the demo
	 */
	for (HID_CollectionPath_t* CurrPath = CurrentItem->CollectionPath; CurrPath != NULL; CurrPath = CurrPath->Parent)
     2a4:	05 80       	ldd	r0, Z+5	; 0x05
     2a6:	f6 81       	ldd	r31, Z+6	; 0x06
     2a8:	e0 2d       	mov	r30, r0
     2aa:	30 97       	sbiw	r30, 0x00	; 0
     2ac:	99 f7       	brne	.-26     	; 0x294 <CALLBACK_HIDParser_FilterHIDReportItem+0xc>
     2ae:	80 e0       	ldi	r24, 0x00	; 0
     2b0:	08 95       	ret

	/* Check the attributes of the current item - see if we are interested in it or not;
	 * only store BUTTON and GENERIC_DESKTOP_CONTROL items into the Processed HID Report
	 * structure to save RAM and ignore the rest
	 */
	return ((CurrentItem->Attributes.Usage.Page == USAGE_PAGE_BUTTON) ||
     2b2:	19 96       	adiw	r26, 0x09	; 9
     2b4:	8d 91       	ld	r24, X+
     2b6:	9c 91       	ld	r25, X
     2b8:	1a 97       	sbiw	r26, 0x0a	; 10
     2ba:	89 30       	cpi	r24, 0x09	; 9
     2bc:	91 05       	cpc	r25, r1
     2be:	21 f0       	breq	.+8      	; 0x2c8 <CALLBACK_HIDParser_FilterHIDReportItem+0x40>
     2c0:	20 e0       	ldi	r18, 0x00	; 0
     2c2:	30 e0       	ldi	r19, 0x00	; 0
     2c4:	01 97       	sbiw	r24, 0x01	; 1
     2c6:	11 f4       	brne	.+4      	; 0x2cc <CALLBACK_HIDParser_FilterHIDReportItem+0x44>
     2c8:	21 e0       	ldi	r18, 0x01	; 1
     2ca:	30 e0       	ldi	r19, 0x00	; 0
     2cc:	82 2f       	mov	r24, r18
	        (CurrentItem->Attributes.Usage.Page == USAGE_PAGE_GENERIC_DCTRL));
}
     2ce:	08 95       	ret

000002d0 <EVENT_USB_Host_DeviceEnumerationFailed>:
 *  enumerating an attached USB device.
 */
void EVENT_USB_Host_DeviceEnumerationFailed(const uint8_t ErrorCode,
                                            const uint8_t SubErrorCode)
{
	printf_P(PSTR(ESC_FG_RED "Dev Enum Error\r\n"
     2d0:	90 91 1f 05 	lds	r25, 0x051F
     2d4:	2d b7       	in	r18, 0x3d	; 61
     2d6:	3e b7       	in	r19, 0x3e	; 62
     2d8:	28 50       	subi	r18, 0x08	; 8
     2da:	30 40       	sbci	r19, 0x00	; 0
     2dc:	0f b6       	in	r0, 0x3f	; 63
     2de:	f8 94       	cli
     2e0:	3e bf       	out	0x3e, r19	; 62
     2e2:	0f be       	out	0x3f, r0	; 63
     2e4:	2d bf       	out	0x3d, r18	; 61
     2e6:	ed b7       	in	r30, 0x3d	; 61
     2e8:	fe b7       	in	r31, 0x3e	; 62
     2ea:	31 96       	adiw	r30, 0x01	; 1
     2ec:	28 e9       	ldi	r18, 0x98	; 152
     2ee:	30 e0       	ldi	r19, 0x00	; 0
     2f0:	ad b7       	in	r26, 0x3d	; 61
     2f2:	be b7       	in	r27, 0x3e	; 62
     2f4:	12 96       	adiw	r26, 0x02	; 2
     2f6:	3c 93       	st	X, r19
     2f8:	2e 93       	st	-X, r18
     2fa:	11 97       	sbiw	r26, 0x01	; 1
     2fc:	82 83       	std	Z+2, r24	; 0x02
     2fe:	13 82       	std	Z+3, r1	; 0x03
     300:	64 83       	std	Z+4, r22	; 0x04
     302:	15 82       	std	Z+5, r1	; 0x05
     304:	96 83       	std	Z+6, r25	; 0x06
     306:	17 82       	std	Z+7, r1	; 0x07
     308:	0e 94 5e 0f 	call	0x1ebc	; 0x1ebc <printf_P>
     30c:	8b b1       	in	r24, 0x0b	; 11
     30e:	8f 70       	andi	r24, 0x0F	; 15
     310:	80 69       	ori	r24, 0x90	; 144
     312:	8b b9       	out	0x0b, r24	; 11
     314:	2d b7       	in	r18, 0x3d	; 61
     316:	3e b7       	in	r19, 0x3e	; 62
     318:	28 5f       	subi	r18, 0xF8	; 248
     31a:	3f 4f       	sbci	r19, 0xFF	; 255
     31c:	0f b6       	in	r0, 0x3f	; 63
     31e:	f8 94       	cli
     320:	3e bf       	out	0x3e, r19	; 62
     322:	0f be       	out	0x3f, r0	; 63
     324:	2d bf       	out	0x3d, r18	; 61
	                         " -- Error Code %d\r\n"
	                         " -- Sub Error Code %d\r\n"
	                         " -- In State %d\r\n" ESC_FG_WHITE), ErrorCode, SubErrorCode, USB_HostState);

	LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
}
     326:	08 95       	ret

00000328 <EVENT_USB_Host_HostError>:
	LEDs_SetAllLEDs(LEDMASK_USB_READY);
}

/** Event handler for the USB_HostError event. This indicates that a hardware error occurred while in host mode. */
void EVENT_USB_Host_HostError(const uint8_t ErrorCode)
{
     328:	1f 93       	push	r17
     32a:	18 2f       	mov	r17, r24
	USB_ShutDown();
     32c:	39 d4       	rcall	.+2162   	; 0xba0 <USB_ShutDown>

	printf_P(PSTR(ESC_FG_RED "Host Mode Error\r\n"
     32e:	00 d0       	rcall	.+0      	; 0x330 <EVENT_USB_Host_HostError+0x8>
     330:	00 d0       	rcall	.+0      	; 0x332 <EVENT_USB_Host_HostError+0xa>
     332:	ed b7       	in	r30, 0x3d	; 61
     334:	fe b7       	in	r31, 0x3e	; 62
     336:	31 96       	adiw	r30, 0x01	; 1
     338:	8e ee       	ldi	r24, 0xEE	; 238
     33a:	90 e0       	ldi	r25, 0x00	; 0
     33c:	ad b7       	in	r26, 0x3d	; 61
     33e:	be b7       	in	r27, 0x3e	; 62
     340:	12 96       	adiw	r26, 0x02	; 2
     342:	9c 93       	st	X, r25
     344:	8e 93       	st	-X, r24
     346:	11 97       	sbiw	r26, 0x01	; 1
     348:	12 83       	std	Z+2, r17	; 0x02
     34a:	13 82       	std	Z+3, r1	; 0x03
     34c:	0e 94 5e 0f 	call	0x1ebc	; 0x1ebc <printf_P>
     350:	8b b1       	in	r24, 0x0b	; 11
     352:	8f 70       	andi	r24, 0x0F	; 15
     354:	80 69       	ori	r24, 0x90	; 144
     356:	8b b9       	out	0x0b, r24	; 11
     358:	0f 90       	pop	r0
     35a:	0f 90       	pop	r0
     35c:	0f 90       	pop	r0
     35e:	0f 90       	pop	r0
     360:	ff cf       	rjmp	.-2      	; 0x360 <EVENT_USB_Host_HostError+0x38>

00000362 <EVENT_USB_Host_DeviceUnattached>:
/** Event handler for the USB_DeviceUnattached event. This indicates that a device has been removed from the host, and
 *  stops the library USB task management process.
 */
void EVENT_USB_Host_DeviceUnattached(void)
{
	puts_P(PSTR("\r\nDevice Unattached.\r\n"));
     362:	8d e1       	ldi	r24, 0x1D	; 29
     364:	91 e0       	ldi	r25, 0x01	; 1
     366:	0e 94 80 0f 	call	0x1f00	; 0x1f00 <puts_P>
     36a:	8b b1       	in	r24, 0x0b	; 11
     36c:	8f 70       	andi	r24, 0x0F	; 15
     36e:	80 61       	ori	r24, 0x10	; 16
     370:	8b b9       	out	0x0b, r24	; 11
	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
}
     372:	08 95       	ret

00000374 <EVENT_USB_Host_DeviceAttached>:
/** Event handler for the USB_DeviceAttached event. This indicates that a device has been attached to the host, and
 *  starts the library USB task to begin the enumeration and USB management process.
 */
void EVENT_USB_Host_DeviceAttached(void)
{
	puts_P(PSTR("Device Attached.\r\n"));
     374:	84 e3       	ldi	r24, 0x34	; 52
     376:	91 e0       	ldi	r25, 0x01	; 1
     378:	0e 94 80 0f 	call	0x1f00	; 0x1f00 <puts_P>
     37c:	8b b1       	in	r24, 0x0b	; 11
     37e:	8f 70       	andi	r24, 0x0F	; 15
     380:	80 6a       	ori	r24, 0xA0	; 160
     382:	8b b9       	out	0x0b, r24	; 11
	LEDs_SetAllLEDs(LEDMASK_USB_ENUMERATING);
}
     384:	08 95       	ret

00000386 <SetupHardware>:

/** Configures the board hardware and chip peripherals for the demo's functionality. */
void SetupHardware(void)
{
	/* Disable watchdog if enabled by bootloader/fuses */
	MCUSR &= ~(1 << WDRF);
     386:	84 b7       	in	r24, 0x34	; 52
     388:	87 7f       	andi	r24, 0xF7	; 247
     38a:	84 bf       	out	0x34, r24	; 52
	wdt_disable();
     38c:	38 e1       	ldi	r19, 0x18	; 24
     38e:	0f b6       	in	r0, 0x3f	; 63
     390:	f8 94       	cli
     392:	30 93 60 00 	sts	0x0060, r19
     396:	10 92 60 00 	sts	0x0060, r1
     39a:	0f be       	out	0x3f, r0	; 63

	/* Disable clock division */
	clock_prescale_set(clock_div_1);
     39c:	80 e0       	ldi	r24, 0x00	; 0
     39e:	90 e0       	ldi	r25, 0x00	; 0
     3a0:	20 e8       	ldi	r18, 0x80	; 128
     3a2:	0f b6       	in	r0, 0x3f	; 63
     3a4:	f8 94       	cli
     3a6:	20 93 61 00 	sts	0x0061, r18
     3aa:	80 93 61 00 	sts	0x0061, r24
     3ae:	0f be       	out	0x3f, r0	; 63
			 *  \param[in] DoubleSpeed  Enables double speed mode when set, halving the sample time to double the baud rate.
			 */
			static inline void Serial_Init(const uint32_t BaudRate,
			                               const bool DoubleSpeed)
			{
				UBRR1  = (DoubleSpeed ? SERIAL_2X_UBBRVAL(BaudRate) : SERIAL_UBBRVAL(BaudRate));
     3b0:	83 e3       	ldi	r24, 0x33	; 51
     3b2:	90 e0       	ldi	r25, 0x00	; 0
     3b4:	90 93 cd 00 	sts	0x00CD, r25
     3b8:	80 93 cc 00 	sts	0x00CC, r24

				UCSR1C = ((1 << UCSZ11) | (1 << UCSZ10));
     3bc:	86 e0       	ldi	r24, 0x06	; 6
     3be:	80 93 ca 00 	sts	0x00CA, r24
				UCSR1A = (DoubleSpeed ? (1 << U2X1) : 0);
     3c2:	10 92 c8 00 	sts	0x00C8, r1
				UCSR1B = ((1 << TXEN1)  | (1 << RXEN1));
     3c6:	30 93 c9 00 	sts	0x00C9, r19

				DDRD  |= (1 << 3);
     3ca:	53 9a       	sbi	0x0a, 3	; 10
				PORTD |= (1 << 2);
     3cc:	5a 9a       	sbi	0x0b, 2	; 11
			static inline void SerialStream_Init(const uint32_t BaudRate,
			                                     const bool DoubleSpeed)
			{
				Serial_Init(BaudRate, DoubleSpeed);

				stdout = &USARTStream;
     3ce:	8c e2       	ldi	r24, 0x2C	; 44
     3d0:	91 e0       	ldi	r25, 0x01	; 1
     3d2:	90 93 23 05 	sts	0x0523, r25
     3d6:	80 93 22 05 	sts	0x0522, r24
				stdin  = &USARTStream;
     3da:	90 93 21 05 	sts	0x0521, r25
     3de:	80 93 20 05 	sts	0x0520, r24

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void LEDs_Init(void)
			{
				DDRD  |=  LEDS_ALL_LEDS;
     3e2:	8a b1       	in	r24, 0x0a	; 10
     3e4:	80 6f       	ori	r24, 0xF0	; 240
     3e6:	8a b9       	out	0x0a, r24	; 10
				PORTD &= ~LEDS_ALL_LEDS;
     3e8:	8b b1       	in	r24, 0x0b	; 11
     3ea:	8f 70       	andi	r24, 0x0F	; 15
     3ec:	8b b9       	out	0x0b, r24	; 11

	/* Hardware Initialization */
	SerialStream_Init(9600, false);
	LEDs_Init();
	USB_Init();
}
     3ee:	cf c3       	rjmp	.+1950   	; 0xb8e <USB_Init>

000003f0 <main>:

/** Main program entry point. This routine configures the hardware required by the application, then
 *  enters a loop to run the application tasks in sequence.
 */
int main(void)
{
     3f0:	2f 92       	push	r2
     3f2:	3f 92       	push	r3
     3f4:	4f 92       	push	r4
     3f6:	5f 92       	push	r5
     3f8:	6f 92       	push	r6
     3fa:	7f 92       	push	r7
     3fc:	8f 92       	push	r8
     3fe:	9f 92       	push	r9
     400:	af 92       	push	r10
     402:	bf 92       	push	r11
     404:	cf 92       	push	r12
     406:	df 92       	push	r13
     408:	ef 92       	push	r14
     40a:	ff 92       	push	r15
     40c:	0f 93       	push	r16
     40e:	1f 93       	push	r17
     410:	df 93       	push	r29
     412:	cf 93       	push	r28
     414:	cd b7       	in	r28, 0x3d	; 61
     416:	de b7       	in	r29, 0x3e	; 62
     418:	c2 50       	subi	r28, 0x02	; 2
     41a:	d2 40       	sbci	r29, 0x02	; 2
     41c:	0f b6       	in	r0, 0x3f	; 63
     41e:	f8 94       	cli
     420:	de bf       	out	0x3e, r29	; 62
     422:	0f be       	out	0x3f, r0	; 63
     424:	cd bf       	out	0x3d, r28	; 61
	SetupHardware();
     426:	af df       	rcall	.-162    	; 0x386 <SetupHardware>

	puts_P(PSTR(ESC_FG_CYAN "Joystick Host Demo running.\r\n" ESC_FG_WHITE));
     428:	87 e1       	ldi	r24, 0x17	; 23
     42a:	92 e0       	ldi	r25, 0x02	; 2
     42c:	0e 94 80 0f 	call	0x1f00	; 0x1f00 <puts_P>
				PORTD &= ~LEDMask;
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
			{
				PORTD = ((PORTD & ~LEDS_ALL_LEDS) | LEDMask);
     430:	8b b1       	in	r24, 0x0b	; 11
     432:	8f 70       	andi	r24, 0x0F	; 15
     434:	80 61       	ori	r24, 0x10	; 16
     436:	8b b9       	out	0x0b, r24	; 11

	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
	sei();
     438:	78 94       	sei
				LEDs_SetAllLEDs(LEDMASK_USB_ENUMERATING);

				uint16_t ConfigDescriptorSize;
				uint8_t  ConfigDescriptorData[512];

				if (USB_Host_GetDeviceConfigDescriptor(1, &ConfigDescriptorSize, ConfigDescriptorData,
     43a:	43 e0       	ldi	r20, 0x03	; 3
     43c:	84 2e       	mov	r8, r20
     43e:	91 2c       	mov	r9, r1
     440:	8c 0e       	add	r8, r28
     442:	9d 1e       	adc	r9, r29
     444:	2e 01       	movw	r4, r28
     446:	08 94       	sec
     448:	41 1c       	adc	r4, r1
     44a:	51 1c       	adc	r5, r1
					break;
				}

				puts_P(PSTR("Joystick Enumerated.\r\n"));
				LEDs_SetAllLEDs(LEDMASK_USB_READY);
				USB_HostState = HOST_STATE_Configured;
     44c:	3c e0       	ldi	r19, 0x0C	; 12
     44e:	23 2e       	mov	r2, r19

					uint8_t LEDMask = LEDS_NO_LEDS;

					for (uint8_t ReportNumber = 0; ReportNumber < HIDReportInfo.TotalReportItems; ReportNumber++)
					{
						HID_ReportItem_t* ReportItem = &HIDReportInfo.ReportItems[ReportNumber];
     450:	2a e2       	ldi	r18, 0x2A	; 42
     452:	32 2e       	mov	r3, r18
						else if ((ReportItem->Attributes.Usage.Page   == USAGE_PAGE_GENERIC_DCTRL) &&
								 ((ReportItem->Attributes.Usage.Usage == USAGE_X)                  ||
								  (ReportItem->Attributes.Usage.Usage == USAGE_Y))                 &&
								 (ReportItem->ItemType                == HID_REPORT_ITEM_In))
						{
							int16_t DeltaMovement = HID_ALIGN_DATA(ReportItem, int16_t);
     454:	90 e1       	ldi	r25, 0x10	; 16
     456:	69 2e       	mov	r6, r25
     458:	71 2c       	mov	r7, r1
	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
	sei();

	for (;;)
	{
		switch (USB_HostState)
     45a:	80 91 1f 05 	lds	r24, 0x051F
     45e:	8b 30       	cpi	r24, 0x0B	; 11
     460:	21 f0       	breq	.+8      	; 0x46a <main+0x7a>
     462:	8c 30       	cpi	r24, 0x0C	; 12
     464:	09 f0       	breq	.+2      	; 0x468 <main+0x78>
     466:	c1 c0       	rjmp	.+386    	; 0x5ea <main+0x1fa>
     468:	3e c0       	rjmp	.+124    	; 0x4e6 <main+0xf6>
     46a:	8b b1       	in	r24, 0x0b	; 11
     46c:	8f 70       	andi	r24, 0x0F	; 15
     46e:	80 6a       	ori	r24, 0xA0	; 160
     470:	8b b9       	out	0x0b, r24	; 11
				LEDs_SetAllLEDs(LEDMASK_USB_ENUMERATING);

				uint16_t ConfigDescriptorSize;
				uint8_t  ConfigDescriptorData[512];

				if (USB_Host_GetDeviceConfigDescriptor(1, &ConfigDescriptorSize, ConfigDescriptorData,
     472:	81 e0       	ldi	r24, 0x01	; 1
     474:	b2 01       	movw	r22, r4
     476:	a4 01       	movw	r20, r8
     478:	20 e0       	ldi	r18, 0x00	; 0
     47a:	32 e0       	ldi	r19, 0x02	; 2
     47c:	8a d4       	rcall	.+2324   	; 0xd92 <USB_Host_GetDeviceConfigDescriptor>
     47e:	88 23       	and	r24, r24
     480:	19 f0       	breq	.+6      	; 0x488 <main+0x98>
				                                       sizeof(ConfigDescriptorData)) != HOST_GETCONFIG_Successful)
				{
					puts_P(PSTR("Error Retrieving Configuration Descriptor.\r\n"));
     482:	8a ee       	ldi	r24, 0xEA	; 234
     484:	91 e0       	ldi	r25, 0x01	; 1
     486:	0b c0       	rjmp	.+22     	; 0x49e <main+0xae>
					LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
					USB_HostState = HOST_STATE_WaitForDeviceRemoval;
					break;
				}

				if (HID_Host_ConfigurePipes(&Joystick_HID_Interface,
     488:	69 81       	ldd	r22, Y+1	; 0x01
     48a:	7a 81       	ldd	r23, Y+2	; 0x02
     48c:	80 e0       	ldi	r24, 0x00	; 0
     48e:	91 e0       	ldi	r25, 0x01	; 1
     490:	a4 01       	movw	r20, r8
     492:	0e 94 3a 0e 	call	0x1c74	; 0x1c74 <HID_Host_ConfigurePipes>
     496:	88 23       	and	r24, r24
     498:	59 f0       	breq	.+22     	; 0x4b0 <main+0xc0>
				                            ConfigDescriptorSize, ConfigDescriptorData) != HID_ENUMERROR_NoError)
				{
					puts_P(PSTR("Attached Device Not a Valid Joystick.\r\n"));
     49a:	82 ec       	ldi	r24, 0xC2	; 194
     49c:	91 e0       	ldi	r25, 0x01	; 1
     49e:	0e 94 80 0f 	call	0x1f00	; 0x1f00 <puts_P>
     4a2:	8b b1       	in	r24, 0x0b	; 11
     4a4:	8f 70       	andi	r24, 0x0F	; 15
     4a6:	80 69       	ori	r24, 0x90	; 144
     4a8:	8b b9       	out	0x0b, r24	; 11
					LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
					USB_HostState = HOST_STATE_WaitForDeviceRemoval;
     4aa:	10 92 1f 05 	sts	0x051F, r1
     4ae:	9d c0       	rjmp	.+314    	; 0x5ea <main+0x1fa>
					break;
				}

				if (USB_Host_SetDeviceConfiguration(1) != HOST_SENDCONTROL_Successful)
     4b0:	81 e0       	ldi	r24, 0x01	; 1
     4b2:	36 d1       	rcall	.+620    	; 0x720 <USB_Host_SetDeviceConfiguration>
     4b4:	88 23       	and	r24, r24
     4b6:	19 f0       	breq	.+6      	; 0x4be <main+0xce>
				{
					puts_P(PSTR("Error Setting Device Configuration.\r\n"));
     4b8:	8c e9       	ldi	r24, 0x9C	; 156
     4ba:	91 e0       	ldi	r25, 0x01	; 1
     4bc:	f0 cf       	rjmp	.-32     	; 0x49e <main+0xae>
					LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
					USB_HostState = HOST_STATE_WaitForDeviceRemoval;
					break;
				}

				if (HID_Host_SetReportProtocol(&Joystick_HID_Interface) != 0)
     4be:	80 e0       	ldi	r24, 0x00	; 0
     4c0:	91 e0       	ldi	r25, 0x01	; 1
     4c2:	0e 94 51 0d 	call	0x1aa2	; 0x1aa2 <HID_Host_SetReportProtocol>
     4c6:	88 23       	and	r24, r24
     4c8:	19 f0       	breq	.+6      	; 0x4d0 <main+0xe0>
				{
					puts_P(PSTR("Error Setting Report Protocol Mode or Not a Valid Joystick.\r\n"));
     4ca:	8e e5       	ldi	r24, 0x5E	; 94
     4cc:	91 e0       	ldi	r25, 0x01	; 1
     4ce:	e7 cf       	rjmp	.-50     	; 0x49e <main+0xae>
					LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
					USB_HostState = HOST_STATE_WaitForDeviceRemoval;
					break;
				}

				puts_P(PSTR("Joystick Enumerated.\r\n"));
     4d0:	87 e4       	ldi	r24, 0x47	; 71
     4d2:	91 e0       	ldi	r25, 0x01	; 1
     4d4:	0e 94 80 0f 	call	0x1f00	; 0x1f00 <puts_P>
     4d8:	8b b1       	in	r24, 0x0b	; 11
     4da:	8f 70       	andi	r24, 0x0F	; 15
     4dc:	80 66       	ori	r24, 0x60	; 96
     4de:	8b b9       	out	0x0b, r24	; 11
				LEDs_SetAllLEDs(LEDMASK_USB_READY);
				USB_HostState = HOST_STATE_Configured;
     4e0:	20 92 1f 05 	sts	0x051F, r2
     4e4:	82 c0       	rjmp	.+260    	; 0x5ea <main+0x1fa>
				break;
			case HOST_STATE_Configured:
				if (HID_Host_IsReportReceived(&Joystick_HID_Interface))
     4e6:	80 e0       	ldi	r24, 0x00	; 0
     4e8:	91 e0       	ldi	r25, 0x01	; 1
     4ea:	0e 94 35 0d 	call	0x1a6a	; 0x1a6a <HID_Host_IsReportReceived>
     4ee:	88 23       	and	r24, r24
     4f0:	09 f4       	brne	.+2      	; 0x4f4 <main+0x104>
     4f2:	7b c0       	rjmp	.+246    	; 0x5ea <main+0x1fa>
     4f4:	bd b6       	in	r11, 0x3d	; 61
     4f6:	ae b6       	in	r10, 0x3e	; 62
				{
					uint8_t JoystickReport[Joystick_HID_Interface.State.LargestReportSize];
     4f8:	80 91 12 01 	lds	r24, 0x0112
     4fc:	2d b7       	in	r18, 0x3d	; 61
     4fe:	3e b7       	in	r19, 0x3e	; 62
     500:	28 1b       	sub	r18, r24
     502:	31 09       	sbc	r19, r1
     504:	0f b6       	in	r0, 0x3f	; 63
     506:	f8 94       	cli
     508:	3e bf       	out	0x3e, r19	; 62
     50a:	0f be       	out	0x3f, r0	; 63
     50c:	2d bf       	out	0x3d, r18	; 61
     50e:	0d b7       	in	r16, 0x3d	; 61
     510:	1e b7       	in	r17, 0x3e	; 62
     512:	0f 5f       	subi	r16, 0xFF	; 255
     514:	1f 4f       	sbci	r17, 0xFF	; 255
					HID_Host_ReceiveReport(&Joystick_HID_Interface, &JoystickReport);
     516:	80 e0       	ldi	r24, 0x00	; 0
     518:	91 e0       	ldi	r25, 0x01	; 1
     51a:	b8 01       	movw	r22, r16
     51c:	0e 94 ee 0d 	call	0x1bdc	; 0x1bdc <HID_Host_ReceiveReport>
					for (uint8_t ReportNumber = 0; ReportNumber < HIDReportInfo.TotalReportItems; ReportNumber++)
					{
						HID_ReportItem_t* ReportItem = &HIDReportInfo.ReportItems[ReportNumber];

						/* Update the report item value if it is contained within the current report */
						if (!(USB_GetHIDReportItemInfo(JoystickReport, ReportItem)))
     520:	68 01       	movw	r12, r16
     522:	ff 24       	eor	r15, r15
     524:	ee 24       	eor	r14, r14
     526:	50 c0       	rjmp	.+160    	; 0x5c8 <main+0x1d8>

					uint8_t LEDMask = LEDS_NO_LEDS;

					for (uint8_t ReportNumber = 0; ReportNumber < HIDReportInfo.TotalReportItems; ReportNumber++)
					{
						HID_ReportItem_t* ReportItem = &HIDReportInfo.ReportItems[ReportNumber];
     528:	e3 9c       	mul	r14, r3
     52a:	80 01       	movw	r16, r0
     52c:	11 24       	eor	r1, r1
     52e:	02 5c       	subi	r16, 0xC2	; 194
     530:	1e 4f       	sbci	r17, 0xFE	; 254

						/* Update the report item value if it is contained within the current report */
						if (!(USB_GetHIDReportItemInfo(JoystickReport, ReportItem)))
     532:	c6 01       	movw	r24, r12
     534:	b8 01       	movw	r22, r16
     536:	06 d6       	rcall	.+3084   	; 0x1144 <USB_GetHIDReportItemInfo>
     538:	88 23       	and	r24, r24
     53a:	09 f4       	brne	.+2      	; 0x53e <main+0x14e>
     53c:	44 c0       	rjmp	.+136    	; 0x5c6 <main+0x1d6>
						  continue;

						/* Determine what report item is being tested, process updated value as needed */
						if ((ReportItem->Attributes.Usage.Page        == USAGE_PAGE_BUTTON) &&
     53e:	f8 01       	movw	r30, r16
     540:	81 85       	ldd	r24, Z+9	; 0x09
     542:	92 85       	ldd	r25, Z+10	; 0x0a
     544:	89 30       	cpi	r24, 0x09	; 9
     546:	91 05       	cpc	r25, r1
     548:	71 f4       	brne	.+28     	; 0x566 <main+0x176>
     54a:	82 81       	ldd	r24, Z+2	; 0x02
     54c:	88 23       	and	r24, r24
     54e:	d9 f5       	brne	.+118    	; 0x5c6 <main+0x1d6>
							(ReportItem->ItemType                     == HID_REPORT_ITEM_In))
						{
							if (ReportItem->Value)
     550:	82 a1       	ldd	r24, Z+34	; 0x22
     552:	93 a1       	ldd	r25, Z+35	; 0x23
     554:	a4 a1       	ldd	r26, Z+36	; 0x24
     556:	b5 a1       	ldd	r27, Z+37	; 0x25
     558:	00 97       	sbiw	r24, 0x00	; 0
     55a:	a1 05       	cpc	r26, r1
     55c:	b1 05       	cpc	r27, r1
     55e:	99 f1       	breq	.+102    	; 0x5c6 <main+0x1d6>
     560:	80 ef       	ldi	r24, 0xF0	; 240
     562:	f8 2e       	mov	r15, r24
     564:	30 c0       	rjmp	.+96     	; 0x5c6 <main+0x1d6>
							  LEDMask = LEDS_ALL_LEDS;
						}
						else if ((ReportItem->Attributes.Usage.Page   == USAGE_PAGE_GENERIC_DCTRL) &&
     566:	01 97       	sbiw	r24, 0x01	; 1
     568:	71 f5       	brne	.+92     	; 0x5c6 <main+0x1d6>
     56a:	f8 01       	movw	r30, r16
     56c:	63 85       	ldd	r22, Z+11	; 0x0b
     56e:	74 85       	ldd	r23, Z+12	; 0x0c
     570:	cb 01       	movw	r24, r22
     572:	c0 97       	sbiw	r24, 0x30	; 48
     574:	02 97       	sbiw	r24, 0x02	; 2
     576:	38 f5       	brcc	.+78     	; 0x5c6 <main+0x1d6>
     578:	82 81       	ldd	r24, Z+2	; 0x02
     57a:	88 23       	and	r24, r24
     57c:	21 f5       	brne	.+72     	; 0x5c6 <main+0x1d6>
								 ((ReportItem->Attributes.Usage.Usage == USAGE_X)                  ||
								  (ReportItem->Attributes.Usage.Usage == USAGE_Y))                 &&
								 (ReportItem->ItemType                == HID_REPORT_ITEM_In))
						{
							int16_t DeltaMovement = HID_ALIGN_DATA(ReportItem, int16_t);
     57e:	80 85       	ldd	r24, Z+8	; 0x08
     580:	93 01       	movw	r18, r6
     582:	28 1b       	sub	r18, r24
     584:	31 09       	sbc	r19, r1
     586:	c9 01       	movw	r24, r18
     588:	22 a1       	ldd	r18, Z+34	; 0x22
     58a:	33 a1       	ldd	r19, Z+35	; 0x23
     58c:	44 a1       	ldd	r20, Z+36	; 0x24
     58e:	55 a1       	ldd	r21, Z+37	; 0x25
     590:	04 c0       	rjmp	.+8      	; 0x59a <main+0x1aa>
     592:	22 0f       	add	r18, r18
     594:	33 1f       	adc	r19, r19
     596:	44 1f       	adc	r20, r20
     598:	55 1f       	adc	r21, r21
     59a:	8a 95       	dec	r24
     59c:	d2 f7       	brpl	.-12     	; 0x592 <main+0x1a2>

							if (DeltaMovement)
     59e:	21 15       	cp	r18, r1
     5a0:	31 05       	cpc	r19, r1
     5a2:	89 f0       	breq	.+34     	; 0x5c6 <main+0x1d6>
							{
								if (ReportItem->Attributes.Usage.Usage == USAGE_X)
     5a4:	60 33       	cpi	r22, 0x30	; 48
     5a6:	71 05       	cpc	r23, r1
     5a8:	39 f4       	brne	.+14     	; 0x5b8 <main+0x1c8>
								  LEDMask |= ((DeltaMovement > 0) ? LEDS_LED1 : LEDS_LED2);
     5aa:	12 16       	cp	r1, r18
     5ac:	13 06       	cpc	r1, r19
     5ae:	14 f0       	brlt	.+4      	; 0x5b4 <main+0x1c4>
     5b0:	80 e2       	ldi	r24, 0x20	; 32
     5b2:	08 c0       	rjmp	.+16     	; 0x5c4 <main+0x1d4>
     5b4:	80 e1       	ldi	r24, 0x10	; 16
     5b6:	06 c0       	rjmp	.+12     	; 0x5c4 <main+0x1d4>
								else
								  LEDMask |= ((DeltaMovement > 0) ? LEDS_LED3 : LEDS_LED4);
     5b8:	12 16       	cp	r1, r18
     5ba:	13 06       	cpc	r1, r19
     5bc:	14 f0       	brlt	.+4      	; 0x5c2 <main+0x1d2>
     5be:	80 e4       	ldi	r24, 0x40	; 64
     5c0:	01 c0       	rjmp	.+2      	; 0x5c4 <main+0x1d4>
     5c2:	80 e8       	ldi	r24, 0x80	; 128
     5c4:	f8 2a       	or	r15, r24
					uint8_t JoystickReport[Joystick_HID_Interface.State.LargestReportSize];
					HID_Host_ReceiveReport(&Joystick_HID_Interface, &JoystickReport);

					uint8_t LEDMask = LEDS_NO_LEDS;

					for (uint8_t ReportNumber = 0; ReportNumber < HIDReportInfo.TotalReportItems; ReportNumber++)
     5c6:	e3 94       	inc	r14
     5c8:	80 91 3d 01 	lds	r24, 0x013D
     5cc:	e8 16       	cp	r14, r24
     5ce:	08 f4       	brcc	.+2      	; 0x5d2 <main+0x1e2>
     5d0:	ab cf       	rjmp	.-170    	; 0x528 <main+0x138>
     5d2:	8b b1       	in	r24, 0x0b	; 11
     5d4:	8f 70       	andi	r24, 0x0F	; 15
     5d6:	f8 2a       	or	r15, r24
     5d8:	fb b8       	out	0x0b, r15	; 11
     5da:	2b 2d       	mov	r18, r11
     5dc:	3a 2d       	mov	r19, r10
     5de:	c9 01       	movw	r24, r18
     5e0:	0f b6       	in	r0, 0x3f	; 63
     5e2:	f8 94       	cli
     5e4:	9e bf       	out	0x3e, r25	; 62
     5e6:	0f be       	out	0x3f, r0	; 63
     5e8:	8d bf       	out	0x3d, r24	; 61

				break;
		}

		HID_Host_USBTask(&Joystick_HID_Interface);
		USB_USBTask();
     5ea:	9a d5       	rcall	.+2868   	; 0x1120 <USB_USBTask>
     5ec:	36 cf       	rjmp	.-404    	; 0x45a <main+0x6a>

000005ee <USB_Host_WaitMS>:
		USB_ResetInterface();
	}
}

uint8_t USB_Host_WaitMS(uint8_t MS)
{
     5ee:	98 2f       	mov	r25, r24
			 *  \return Boolean true if the bus is currently suspended, false otherwise.
			 */
			static inline bool USB_Host_IsBusSuspended(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusSuspended(void)
			{
				return ((UHCON & (1 << SOFEN)) ? false : true);
     5f0:	20 91 9e 00 	lds	r18, 0x009E
	bool    BusSuspended = USB_Host_IsBusSuspended();
	uint8_t ErrorCode    = HOST_WAITERROR_Successful;
	bool    HSOFIEnabled = USB_INT_IsEnabled(USB_INT_HSOFI);
     5f4:	30 91 a0 00 	lds	r19, 0x00A0

	USB_INT_Disable(USB_INT_HSOFI);
     5f8:	80 91 a0 00 	lds	r24, 0x00A0
     5fc:	8f 7d       	andi	r24, 0xDF	; 223
     5fe:	80 93 a0 00 	sts	0x00A0, r24
	USB_INT_Clear(USB_INT_HSOFI);
     602:	80 91 9f 00 	lds	r24, 0x009F
     606:	8f 7d       	andi	r24, 0xDF	; 223
     608:	80 93 9f 00 	sts	0x009F, r24
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
     60c:	80 91 9e 00 	lds	r24, 0x009E
     610:	81 60       	ori	r24, 0x01	; 1
     612:	80 93 9e 00 	sts	0x009E, r24
     616:	26 c0       	rjmp	.+76     	; 0x664 <USB_Host_WaitMS+0x76>

	USB_Host_ResumeBus();

	while (MS)
	{
		if (USB_INT_HasOccurred(USB_INT_HSOFI))
     618:	80 91 9f 00 	lds	r24, 0x009F
     61c:	85 ff       	sbrs	r24, 5
     61e:	06 c0       	rjmp	.+12     	; 0x62c <USB_Host_WaitMS+0x3e>
		{
			USB_INT_Clear(USB_INT_HSOFI);
     620:	80 91 9f 00 	lds	r24, 0x009F
     624:	8f 7d       	andi	r24, 0xDF	; 223
     626:	80 93 9f 00 	sts	0x009F, r24
			MS--;
     62a:	91 50       	subi	r25, 0x01	; 1
		}

		if ((USB_HostState == HOST_STATE_Unattached) || (USB_CurrentMode != USB_MODE_Host))
     62c:	80 91 1f 05 	lds	r24, 0x051F
     630:	82 30       	cpi	r24, 0x02	; 2
     632:	11 f4       	brne	.+4      	; 0x638 <USB_Host_WaitMS+0x4a>
     634:	91 e0       	ldi	r25, 0x01	; 1
     636:	18 c0       	rjmp	.+48     	; 0x668 <USB_Host_WaitMS+0x7a>
			 *  \return Boolean true if an error has occurred on the selected pipe, false otherwise.
			 */
			static inline bool Pipe_IsError(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsError(void)
			{
				return ((UPINTX & (1 << PERRI)) ? true : false);
     638:	80 91 a6 00 	lds	r24, 0x00A6
			ErrorCode = HOST_WAITERROR_DeviceDisconnect;

			break;
		}

		if (Pipe_IsError() == true)
     63c:	84 ff       	sbrs	r24, 4
     63e:	07 c0       	rjmp	.+14     	; 0x64e <USB_Host_WaitMS+0x60>

			/** Clears the master pipe error flag. */
			static inline void Pipe_ClearError(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearError(void)
			{
				UPINTX &= ~(1 << PERRI);
     640:	80 91 a6 00 	lds	r24, 0x00A6
     644:	8f 7e       	andi	r24, 0xEF	; 239
     646:	80 93 a6 00 	sts	0x00A6, r24
     64a:	92 e0       	ldi	r25, 0x02	; 2
     64c:	0d c0       	rjmp	.+26     	; 0x668 <USB_Host_WaitMS+0x7a>
			 *  \return Boolean true if the current pipe has been stalled by the attached device, false otherwise.
			 */
			static inline bool Pipe_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsStalled(void)
			{
				return ((UPINTX & (1 << RXSTALLI)) ? true : false);
     64e:	80 91 a6 00 	lds	r24, 0x00A6
			ErrorCode = HOST_WAITERROR_PipeError;

			break;
		}

		if (Pipe_IsStalled() == true)
     652:	81 ff       	sbrs	r24, 1
     654:	07 c0       	rjmp	.+14     	; 0x664 <USB_Host_WaitMS+0x76>
			 *  \ingroup Group_PipePacketManagement
			 */
			static inline void Pipe_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearStall(void)
			{
				UPINTX &= ~(1 << RXSTALLI);
     656:	80 91 a6 00 	lds	r24, 0x00A6
     65a:	8d 7f       	andi	r24, 0xFD	; 253
     65c:	80 93 a6 00 	sts	0x00A6, r24
     660:	93 e0       	ldi	r25, 0x03	; 3
     662:	02 c0       	rjmp	.+4      	; 0x668 <USB_Host_WaitMS+0x7a>
	USB_INT_Disable(USB_INT_HSOFI);
	USB_INT_Clear(USB_INT_HSOFI);

	USB_Host_ResumeBus();

	while (MS)
     664:	99 23       	and	r25, r25
     666:	c1 f6       	brne	.-80     	; 0x618 <USB_Host_WaitMS+0x2a>

			break;
		}
	}

	if (BusSuspended)
     668:	20 fd       	sbrc	r18, 0
     66a:	05 c0       	rjmp	.+10     	; 0x676 <USB_Host_WaitMS+0x88>
			 *  messages to the device.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				UHCON &= ~(1 << SOFEN);
     66c:	80 91 9e 00 	lds	r24, 0x009E
     670:	8e 7f       	andi	r24, 0xFE	; 254
     672:	80 93 9e 00 	sts	0x009E, r24
	  USB_Host_SuspendBus();

	if (HSOFIEnabled)
     676:	35 ff       	sbrs	r19, 5
     678:	05 c0       	rjmp	.+10     	; 0x684 <USB_Host_WaitMS+0x96>
	  USB_INT_Enable(USB_INT_HSOFI);
     67a:	80 91 a0 00 	lds	r24, 0x00A0
     67e:	80 62       	ori	r24, 0x20	; 32
     680:	80 93 a0 00 	sts	0x00A0, r24

	return ErrorCode;
}
     684:	89 2f       	mov	r24, r25
     686:	08 95       	ret

00000688 <USB_Host_ResetDevice>:
			 *  \return Boolean true if the bus is currently suspended, false otherwise.
			 */
			static inline bool USB_Host_IsBusSuspended(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusSuspended(void)
			{
				return ((UHCON & (1 << SOFEN)) ? false : true);
     688:	60 91 9e 00 	lds	r22, 0x009E

static void USB_Host_ResetDevice(void)
{
	bool BusSuspended = USB_Host_IsBusSuspended();

	USB_INT_Disable(USB_INT_DDISCI);
     68c:	80 91 a0 00 	lds	r24, 0x00A0
     690:	8d 7f       	andi	r24, 0xFD	; 253
     692:	80 93 a0 00 	sts	0x00A0, r24
			 *  woken up automatically and the bus resumed after the reset has been correctly issued.
			 */
			static inline void USB_Host_ResetBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResetBus(void)
			{
				UHCON |=  (1 << RESET);
     696:	80 91 9e 00 	lds	r24, 0x009E
     69a:	82 60       	ori	r24, 0x02	; 2
     69c:	80 93 9e 00 	sts	0x009E, r24
			 *  \return Boolean true if no bus reset is currently being sent, false otherwise.
			 */
			static inline bool USB_Host_IsBusResetComplete(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusResetComplete(void)
			{
				return ((UHCON & (1 << RESET)) ? false : true);
     6a0:	80 91 9e 00 	lds	r24, 0x009E

	USB_Host_ResetBus();
	while (!(USB_Host_IsBusResetComplete()));
     6a4:	81 fd       	sbrc	r24, 1
     6a6:	fc cf       	rjmp	.-8      	; 0x6a0 <USB_Host_ResetDevice+0x18>
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
     6a8:	80 91 9e 00 	lds	r24, 0x009E
     6ac:	81 60       	ori	r24, 0x01	; 1
     6ae:	80 93 9e 00 	sts	0x009E, r24
	USB_Host_ResumeBus();

	bool HSOFIEnabled = USB_INT_IsEnabled(USB_INT_HSOFI);
     6b2:	30 91 a0 00 	lds	r19, 0x00A0

	USB_INT_Disable(USB_INT_HSOFI);
     6b6:	80 91 a0 00 	lds	r24, 0x00A0
     6ba:	8f 7d       	andi	r24, 0xDF	; 223
     6bc:	80 93 a0 00 	sts	0x00A0, r24
	USB_INT_Clear(USB_INT_HSOFI);
     6c0:	80 91 9f 00 	lds	r24, 0x009F
     6c4:	8f 7d       	andi	r24, 0xDF	; 223
     6c6:	80 93 9f 00 	sts	0x009F, r24
     6ca:	2a e0       	ldi	r18, 0x0A	; 10
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     6cc:	40 ed       	ldi	r20, 0xD0	; 208
     6ce:	57 e0       	ldi	r21, 0x07	; 7
		/* Workaround for powerless-pull-up devices. After a USB bus reset,
		   all disconnection interrupts are suppressed while a USB frame is
		   looked for - if it is found within 10ms, the device is still
		   present.                                                        */

		if (USB_INT_HasOccurred(USB_INT_HSOFI))
     6d0:	80 91 9f 00 	lds	r24, 0x009F
     6d4:	85 ff       	sbrs	r24, 5
     6d6:	0b c0       	rjmp	.+22     	; 0x6ee <USB_Host_ResetDevice+0x66>
		{
			USB_INT_Clear(USB_INT_HSOFI);
     6d8:	80 91 9f 00 	lds	r24, 0x009F
     6dc:	8f 7d       	andi	r24, 0xDF	; 223
     6de:	80 93 9f 00 	sts	0x009F, r24
			USB_INT_Clear(USB_INT_DDISCI);
     6e2:	80 91 9f 00 	lds	r24, 0x009F
     6e6:	8d 7f       	andi	r24, 0xFD	; 253
     6e8:	80 93 9f 00 	sts	0x009F, r24
     6ec:	05 c0       	rjmp	.+10     	; 0x6f8 <USB_Host_ResetDevice+0x70>
     6ee:	ca 01       	movw	r24, r20
     6f0:	01 97       	sbiw	r24, 0x01	; 1
     6f2:	f1 f7       	brne	.-4      	; 0x6f0 <USB_Host_ResetDevice+0x68>
	bool HSOFIEnabled = USB_INT_IsEnabled(USB_INT_HSOFI);

	USB_INT_Disable(USB_INT_HSOFI);
	USB_INT_Clear(USB_INT_HSOFI);

	for (uint8_t MSRem = 10; MSRem != 0; MSRem--)
     6f4:	21 50       	subi	r18, 0x01	; 1
     6f6:	61 f7       	brne	.-40     	; 0x6d0 <USB_Host_ResetDevice+0x48>
		}

		_delay_ms(1);
	}

	if (HSOFIEnabled)
     6f8:	35 ff       	sbrs	r19, 5
     6fa:	05 c0       	rjmp	.+10     	; 0x706 <USB_Host_ResetDevice+0x7e>
	  USB_INT_Enable(USB_INT_HSOFI);
     6fc:	80 91 a0 00 	lds	r24, 0x00A0
     700:	80 62       	ori	r24, 0x20	; 32
     702:	80 93 a0 00 	sts	0x00A0, r24

	if (BusSuspended)
     706:	60 fd       	sbrc	r22, 0
     708:	05 c0       	rjmp	.+10     	; 0x714 <USB_Host_ResetDevice+0x8c>
			 *  messages to the device.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				UHCON &= ~(1 << SOFEN);
     70a:	80 91 9e 00 	lds	r24, 0x009E
     70e:	8e 7f       	andi	r24, 0xFE	; 254
     710:	80 93 9e 00 	sts	0x009E, r24
	  USB_Host_SuspendBus();

	USB_INT_Enable(USB_INT_DDISCI);
     714:	80 91 a0 00 	lds	r24, 0x00A0
     718:	82 60       	ori	r24, 0x02	; 2
     71a:	80 93 a0 00 	sts	0x00A0, r24
}
     71e:	08 95       	ret

00000720 <USB_Host_SetDeviceConfiguration>:

uint8_t USB_Host_SetDeviceConfiguration(const uint8_t ConfigNumber)
{
	USB_ControlRequest = (USB_Request_Header_t)
     720:	10 92 17 05 	sts	0x0517, r1
     724:	99 e0       	ldi	r25, 0x09	; 9
     726:	90 93 18 05 	sts	0x0518, r25
     72a:	80 93 19 05 	sts	0x0519, r24
     72e:	10 92 1a 05 	sts	0x051A, r1
     732:	10 92 1c 05 	sts	0x051C, r1
     736:	10 92 1b 05 	sts	0x051B, r1
     73a:	10 92 1e 05 	sts	0x051E, r1
     73e:	10 92 1d 05 	sts	0x051D, r1
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
     742:	10 92 a7 00 	sts	0x00A7, r1
			.wLength       = 0,
		};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	return USB_Host_SendControlRequest(NULL);
     746:	80 e0       	ldi	r24, 0x00	; 0
     748:	90 e0       	ldi	r25, 0x00	; 0
}
     74a:	a7 c3       	rjmp	.+1870   	; 0xe9a <USB_Host_SendControlRequest>

0000074c <USB_Host_ProcessNextHostState>:

#define  __INCLUDE_FROM_HOST_C
#include "Host.h"

void USB_Host_ProcessNextHostState(void)
{
     74c:	ef 92       	push	r14
     74e:	0f 93       	push	r16
     750:	1f 93       	push	r17
     752:	df 93       	push	r29
     754:	cf 93       	push	r28
     756:	cd b7       	in	r28, 0x3d	; 61
     758:	de b7       	in	r29, 0x3e	; 62
     75a:	28 97       	sbiw	r28, 0x08	; 8
     75c:	0f b6       	in	r0, 0x3f	; 63
     75e:	f8 94       	cli
     760:	de bf       	out	0x3e, r29	; 62
     762:	0f be       	out	0x3f, r0	; 63
     764:	cd bf       	out	0x3d, r28	; 61
	uint8_t SubErrorCode = HOST_ENUMERROR_NoError;

	static uint16_t WaitMSRemaining;
	static uint8_t  PostWaitState;

	switch (USB_HostState)
     766:	80 91 1f 05 	lds	r24, 0x051F
     76a:	86 30       	cpi	r24, 0x06	; 6
     76c:	09 f4       	brne	.+2      	; 0x770 <USB_Host_ProcessNextHostState+0x24>
     76e:	94 c0       	rjmp	.+296    	; 0x898 <USB_Host_ProcessNextHostState+0x14c>
     770:	87 30       	cpi	r24, 0x07	; 7
     772:	70 f4       	brcc	.+28     	; 0x790 <USB_Host_ProcessNextHostState+0x44>
     774:	83 30       	cpi	r24, 0x03	; 3
     776:	c1 f1       	breq	.+112    	; 0x7e8 <USB_Host_ProcessNextHostState+0x9c>
     778:	84 30       	cpi	r24, 0x04	; 4
     77a:	20 f4       	brcc	.+8      	; 0x784 <USB_Host_ProcessNextHostState+0x38>
     77c:	81 30       	cpi	r24, 0x01	; 1
     77e:	09 f0       	breq	.+2      	; 0x782 <USB_Host_ProcessNextHostState+0x36>
     780:	07 c1       	rjmp	.+526    	; 0x990 <USB_Host_ProcessNextHostState+0x244>
     782:	13 c0       	rjmp	.+38     	; 0x7aa <USB_Host_ProcessNextHostState+0x5e>
     784:	84 30       	cpi	r24, 0x04	; 4
     786:	c1 f1       	breq	.+112    	; 0x7f8 <USB_Host_ProcessNextHostState+0xac>
     788:	85 30       	cpi	r24, 0x05	; 5
     78a:	09 f0       	breq	.+2      	; 0x78e <USB_Host_ProcessNextHostState+0x42>
     78c:	01 c1       	rjmp	.+514    	; 0x990 <USB_Host_ProcessNextHostState+0x244>
     78e:	5b c0       	rjmp	.+182    	; 0x846 <USB_Host_ProcessNextHostState+0xfa>
     790:	88 30       	cpi	r24, 0x08	; 8
     792:	09 f4       	brne	.+2      	; 0x796 <USB_Host_ProcessNextHostState+0x4a>
     794:	9b c0       	rjmp	.+310    	; 0x8cc <USB_Host_ProcessNextHostState+0x180>
     796:	88 30       	cpi	r24, 0x08	; 8
     798:	08 f4       	brcc	.+2      	; 0x79c <USB_Host_ProcessNextHostState+0x50>
     79a:	8a c0       	rjmp	.+276    	; 0x8b0 <USB_Host_ProcessNextHostState+0x164>
     79c:	89 30       	cpi	r24, 0x09	; 9
     79e:	09 f4       	brne	.+2      	; 0x7a2 <USB_Host_ProcessNextHostState+0x56>
     7a0:	b4 c0       	rjmp	.+360    	; 0x90a <USB_Host_ProcessNextHostState+0x1be>
     7a2:	8a 30       	cpi	r24, 0x0A	; 10
     7a4:	09 f0       	breq	.+2      	; 0x7a8 <USB_Host_ProcessNextHostState+0x5c>
     7a6:	f4 c0       	rjmp	.+488    	; 0x990 <USB_Host_ProcessNextHostState+0x244>
     7a8:	d9 c0       	rjmp	.+434    	; 0x95c <USB_Host_ProcessNextHostState+0x210>
	{
		case HOST_STATE_WaitForDevice:
			if (WaitMSRemaining)
     7aa:	00 91 3b 01 	lds	r16, 0x013B
     7ae:	10 91 3c 01 	lds	r17, 0x013C
     7b2:	01 15       	cp	r16, r1
     7b4:	11 05       	cpc	r17, r1
     7b6:	09 f4       	brne	.+2      	; 0x7ba <USB_Host_ProcessNextHostState+0x6e>
     7b8:	eb c0       	rjmp	.+470    	; 0x990 <USB_Host_ProcessNextHostState+0x244>
			{
				if ((SubErrorCode = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
     7ba:	81 e0       	ldi	r24, 0x01	; 1
     7bc:	18 df       	rcall	.-464    	; 0x5ee <USB_Host_WaitMS>
     7be:	68 2f       	mov	r22, r24
     7c0:	88 23       	and	r24, r24
     7c2:	31 f0       	breq	.+12     	; 0x7d0 <USB_Host_ProcessNextHostState+0x84>
				{
					USB_HostState = PostWaitState;
     7c4:	80 91 3a 01 	lds	r24, 0x013A
     7c8:	80 93 1f 05 	sts	0x051F, r24
     7cc:	91 e0       	ldi	r25, 0x01	; 1
     7ce:	dc c0       	rjmp	.+440    	; 0x988 <USB_Host_ProcessNextHostState+0x23c>
					ErrorCode     = HOST_ENUMERROR_WaitStage;
					break;
				}

				if (!(--WaitMSRemaining))
     7d0:	c8 01       	movw	r24, r16
     7d2:	01 97       	sbiw	r24, 0x01	; 1
     7d4:	90 93 3c 01 	sts	0x013C, r25
     7d8:	80 93 3b 01 	sts	0x013B, r24
     7dc:	89 2b       	or	r24, r25
     7de:	09 f0       	breq	.+2      	; 0x7e2 <USB_Host_ProcessNextHostState+0x96>
     7e0:	d7 c0       	rjmp	.+430    	; 0x990 <USB_Host_ProcessNextHostState+0x244>
				  USB_HostState = PostWaitState;
     7e2:	80 91 3a 01 	lds	r24, 0x013A
     7e6:	bf c0       	rjmp	.+382    	; 0x966 <USB_Host_ProcessNextHostState+0x21a>
			}

			break;
		case HOST_STATE_Powered:
			WaitMSRemaining = HOST_DEVICE_SETTLE_DELAY_MS;
     7e8:	88 ee       	ldi	r24, 0xE8	; 232
     7ea:	93 e0       	ldi	r25, 0x03	; 3
     7ec:	90 93 3c 01 	sts	0x013C, r25
     7f0:	80 93 3b 01 	sts	0x013B, r24

			USB_HostState = HOST_STATE_Powered_WaitForDeviceSettle;
     7f4:	84 e0       	ldi	r24, 0x04	; 4
     7f6:	b7 c0       	rjmp	.+366    	; 0x966 <USB_Host_ProcessNextHostState+0x21a>
			break;
		case HOST_STATE_Powered_WaitForDeviceSettle:
			if (WaitMSRemaining--)
     7f8:	80 91 3b 01 	lds	r24, 0x013B
     7fc:	90 91 3c 01 	lds	r25, 0x013C
     800:	01 97       	sbiw	r24, 0x01	; 1
     802:	90 93 3c 01 	sts	0x013C, r25
     806:	80 93 3b 01 	sts	0x013B, r24
     80a:	01 96       	adiw	r24, 0x01	; 1
     80c:	29 f0       	breq	.+10     	; 0x818 <USB_Host_ProcessNextHostState+0xcc>
     80e:	80 ed       	ldi	r24, 0xD0	; 208
     810:	97 e0       	ldi	r25, 0x07	; 7
     812:	01 97       	sbiw	r24, 0x01	; 1
     814:	f1 f7       	brne	.-4      	; 0x812 <USB_Host_ProcessNextHostState+0xc6>
     816:	bc c0       	rjmp	.+376    	; 0x990 <USB_Host_ProcessNextHostState+0x244>
			}

			static inline void USB_Host_VBUS_Manual_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Manual_Off(void)
			{
				PORTE  &= ~(1 << 7);
     818:	77 98       	cbi	0x0e, 7	; 14

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON  |=  (1 << OTGPADE);
     81a:	80 91 d8 00 	lds	r24, 0x00D8
     81e:	80 61       	ori	r24, 0x10	; 16
     820:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_Host_VBUS_Auto_Enable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Enable(void)
			{
				OTGCON &= ~(1 << VBUSHWC);
     824:	80 91 dd 00 	lds	r24, 0x00DD
     828:	8b 7f       	andi	r24, 0xFB	; 251
     82a:	80 93 dd 00 	sts	0x00DD, r24
				UHWCON |=  (1 << UVCONE);
     82e:	80 91 d7 00 	lds	r24, 0x00D7
     832:	80 61       	ori	r24, 0x10	; 16
     834:	80 93 d7 00 	sts	0x00D7, r24
			}

			static inline void USB_Host_VBUS_Auto_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_On(void)
			{
				OTGCON |=  (1 << VBUSREQ);
     838:	80 91 dd 00 	lds	r24, 0x00DD
     83c:	82 60       	ori	r24, 0x02	; 2
     83e:	80 93 dd 00 	sts	0x00DD, r24

				USB_OTGPAD_On();
				USB_Host_VBUS_Auto_Enable();
				USB_Host_VBUS_Auto_On();

				USB_HostState = HOST_STATE_Powered_WaitForConnect;
     842:	85 e0       	ldi	r24, 0x05	; 5
     844:	90 c0       	rjmp	.+288    	; 0x966 <USB_Host_ProcessNextHostState+0x21a>
			}

			break;
		case HOST_STATE_Powered_WaitForConnect:
			if (USB_INT_HasOccurred(USB_INT_DCONNI))
     846:	80 91 9f 00 	lds	r24, 0x009F
     84a:	80 ff       	sbrs	r24, 0
     84c:	a1 c0       	rjmp	.+322    	; 0x990 <USB_Host_ProcessNextHostState+0x244>
			{
				USB_INT_Clear(USB_INT_DCONNI);
     84e:	80 91 9f 00 	lds	r24, 0x009F
     852:	8e 7f       	andi	r24, 0xFE	; 254
     854:	80 93 9f 00 	sts	0x009F, r24
				USB_INT_Clear(USB_INT_DDISCI);
     858:	80 91 9f 00 	lds	r24, 0x009F
     85c:	8d 7f       	andi	r24, 0xFD	; 253
     85e:	80 93 9f 00 	sts	0x009F, r24

				USB_INT_Clear(USB_INT_VBERRI);
     862:	80 91 df 00 	lds	r24, 0x00DF
     866:	8d 7f       	andi	r24, 0xFD	; 253
     868:	80 93 df 00 	sts	0x00DF, r24
				USB_INT_Enable(USB_INT_VBERRI);
     86c:	80 91 de 00 	lds	r24, 0x00DE
     870:	82 60       	ori	r24, 0x02	; 2
     872:	80 93 de 00 	sts	0x00DE, r24
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
     876:	80 91 9e 00 	lds	r24, 0x009E
     87a:	81 60       	ori	r24, 0x01	; 1
     87c:	80 93 9e 00 	sts	0x009E, r24

				USB_Host_ResumeBus();
				Pipe_ClearPipes();
     880:	c9 d0       	rcall	.+402    	; 0xa14 <Pipe_ClearPipes>

				HOST_TASK_NONBLOCK_WAIT(100, HOST_STATE_Powered_DoReset);
     882:	81 e0       	ldi	r24, 0x01	; 1
     884:	80 93 1f 05 	sts	0x051F, r24
     888:	84 e6       	ldi	r24, 0x64	; 100
     88a:	90 e0       	ldi	r25, 0x00	; 0
     88c:	90 93 3c 01 	sts	0x013C, r25
     890:	80 93 3b 01 	sts	0x013B, r24
     894:	86 e0       	ldi	r24, 0x06	; 6
     896:	5f c0       	rjmp	.+190    	; 0x956 <USB_Host_ProcessNextHostState+0x20a>
			}

			break;
		case HOST_STATE_Powered_DoReset:
			USB_Host_ResetDevice();
     898:	f7 de       	rcall	.-530    	; 0x688 <USB_Host_ResetDevice>

			HOST_TASK_NONBLOCK_WAIT(200, HOST_STATE_Powered_ConfigPipe);
     89a:	81 e0       	ldi	r24, 0x01	; 1
     89c:	80 93 1f 05 	sts	0x051F, r24
     8a0:	88 ec       	ldi	r24, 0xC8	; 200
     8a2:	90 e0       	ldi	r25, 0x00	; 0
     8a4:	90 93 3c 01 	sts	0x013C, r25
     8a8:	80 93 3b 01 	sts	0x013B, r24
     8ac:	87 e0       	ldi	r24, 0x07	; 7
     8ae:	53 c0       	rjmp	.+166    	; 0x956 <USB_Host_ProcessNextHostState+0x20a>
			break;
		case HOST_STATE_Powered_ConfigPipe:
			Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL,
     8b0:	80 e0       	ldi	r24, 0x00	; 0
     8b2:	60 e0       	ldi	r22, 0x00	; 0
     8b4:	40 e0       	ldi	r20, 0x00	; 0
     8b6:	20 e0       	ldi	r18, 0x00	; 0
     8b8:	00 e4       	ldi	r16, 0x40	; 64
     8ba:	10 e0       	ldi	r17, 0x00	; 0
     8bc:	ee 24       	eor	r14, r14
     8be:	74 d0       	rcall	.+232    	; 0x9a8 <Pipe_ConfigurePipe>
			 *  \return Boolean true if the selected pipe is configured, false otherwise.
			 */
			static inline bool Pipe_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsConfigured(void)
			{
				return ((UPSTAX & (1 << CFGOK)) ? true : false);
     8c0:	80 91 ac 00 	lds	r24, 0x00AC
							   PIPE_TOKEN_SETUP, ENDPOINT_CONTROLEP,
							   PIPE_CONTROLPIPE_DEFAULT_SIZE, PIPE_BANK_SINGLE);

			if (!(Pipe_IsConfigured()))
     8c4:	87 ff       	sbrs	r24, 7
     8c6:	5e c0       	rjmp	.+188    	; 0x984 <USB_Host_ProcessNextHostState+0x238>
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
				SubErrorCode = 0;
				break;
			}

			USB_HostState = HOST_STATE_Default;
     8c8:	88 e0       	ldi	r24, 0x08	; 8
     8ca:	4d c0       	rjmp	.+154    	; 0x966 <USB_Host_ProcessNextHostState+0x21a>
			break;
		case HOST_STATE_Default:
			USB_ControlRequest = (USB_Request_Header_t)
     8cc:	a7 e1       	ldi	r26, 0x17	; 23
     8ce:	b5 e0       	ldi	r27, 0x05	; 5
     8d0:	e3 e2       	ldi	r30, 0x23	; 35
     8d2:	f1 e0       	ldi	r31, 0x01	; 1
     8d4:	88 e0       	ldi	r24, 0x08	; 8
     8d6:	01 90       	ld	r0, Z+
     8d8:	0d 92       	st	X+, r0
     8da:	81 50       	subi	r24, 0x01	; 1
     8dc:	e1 f7       	brne	.-8      	; 0x8d6 <USB_Host_ProcessNextHostState+0x18a>
					.wLength       = 8,
				};

			uint8_t DataBuffer[8];

			if ((SubErrorCode = USB_Host_SendControlRequest(DataBuffer)) != HOST_SENDCONTROL_Successful)
     8de:	ce 01       	movw	r24, r28
     8e0:	01 96       	adiw	r24, 0x01	; 1
     8e2:	db d2       	rcall	.+1462   	; 0xe9a <USB_Host_SendControlRequest>
     8e4:	68 2f       	mov	r22, r24
     8e6:	88 23       	and	r24, r24
     8e8:	09 f0       	breq	.+2      	; 0x8ec <USB_Host_ProcessNextHostState+0x1a0>
     8ea:	4a c0       	rjmp	.+148    	; 0x980 <USB_Host_ProcessNextHostState+0x234>
			{
				ErrorCode = HOST_ENUMERROR_ControlError;
				break;
			}

			USB_ControlPipeSize = DataBuffer[offsetof(USB_Descriptor_Device_t, Endpoint0Size)];
     8ec:	88 85       	ldd	r24, Y+8	; 0x08
     8ee:	80 93 2b 01 	sts	0x012B, r24

			USB_Host_ResetDevice();
     8f2:	ca de       	rcall	.-620    	; 0x688 <USB_Host_ResetDevice>

			HOST_TASK_NONBLOCK_WAIT(200, HOST_STATE_Default_PostReset);
     8f4:	81 e0       	ldi	r24, 0x01	; 1
     8f6:	80 93 1f 05 	sts	0x051F, r24
     8fa:	88 ec       	ldi	r24, 0xC8	; 200
     8fc:	90 e0       	ldi	r25, 0x00	; 0
     8fe:	90 93 3c 01 	sts	0x013C, r25
     902:	80 93 3b 01 	sts	0x013B, r24
     906:	89 e0       	ldi	r24, 0x09	; 9
     908:	26 c0       	rjmp	.+76     	; 0x956 <USB_Host_ProcessNextHostState+0x20a>
			break;
		case HOST_STATE_Default_PostReset:
			Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL,
     90a:	00 91 2b 01 	lds	r16, 0x012B
     90e:	80 e0       	ldi	r24, 0x00	; 0
     910:	60 e0       	ldi	r22, 0x00	; 0
     912:	40 e0       	ldi	r20, 0x00	; 0
     914:	20 e0       	ldi	r18, 0x00	; 0
     916:	10 e0       	ldi	r17, 0x00	; 0
     918:	ee 24       	eor	r14, r14
     91a:	46 d0       	rcall	.+140    	; 0x9a8 <Pipe_ConfigurePipe>
     91c:	80 91 ac 00 	lds	r24, 0x00AC
			                   PIPE_TOKEN_SETUP, ENDPOINT_CONTROLEP,
			                   USB_ControlPipeSize, PIPE_BANK_SINGLE);

			if (!(Pipe_IsConfigured()))
     920:	87 ff       	sbrs	r24, 7
     922:	30 c0       	rjmp	.+96     	; 0x984 <USB_Host_ProcessNextHostState+0x238>
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
				SubErrorCode = 0;
				break;
			}

			USB_ControlRequest = (USB_Request_Header_t)
     924:	a7 e1       	ldi	r26, 0x17	; 23
     926:	b5 e0       	ldi	r27, 0x05	; 5
     928:	eb e1       	ldi	r30, 0x1B	; 27
     92a:	f1 e0       	ldi	r31, 0x01	; 1
     92c:	88 e0       	ldi	r24, 0x08	; 8
     92e:	01 90       	ld	r0, Z+
     930:	0d 92       	st	X+, r0
     932:	81 50       	subi	r24, 0x01	; 1
     934:	e1 f7       	brne	.-8      	; 0x92e <USB_Host_ProcessNextHostState+0x1e2>
					.wValue        = USB_HOST_DEVICEADDRESS,
					.wIndex        = 0,
					.wLength       = 0,
				};

			if ((SubErrorCode = USB_Host_SendControlRequest(NULL)) != HOST_SENDCONTROL_Successful)
     936:	80 e0       	ldi	r24, 0x00	; 0
     938:	90 e0       	ldi	r25, 0x00	; 0
     93a:	af d2       	rcall	.+1374   	; 0xe9a <USB_Host_SendControlRequest>
     93c:	68 2f       	mov	r22, r24
     93e:	88 23       	and	r24, r24
     940:	f9 f4       	brne	.+62     	; 0x980 <USB_Host_ProcessNextHostState+0x234>
			{
				ErrorCode = HOST_ENUMERROR_ControlError;
				break;
			}

			HOST_TASK_NONBLOCK_WAIT(100, HOST_STATE_Default_PostAddressSet);
     942:	81 e0       	ldi	r24, 0x01	; 1
     944:	80 93 1f 05 	sts	0x051F, r24
     948:	84 e6       	ldi	r24, 0x64	; 100
     94a:	90 e0       	ldi	r25, 0x00	; 0
     94c:	90 93 3c 01 	sts	0x013C, r25
     950:	80 93 3b 01 	sts	0x013B, r24
     954:	8a e0       	ldi	r24, 0x0A	; 10
     956:	80 93 3a 01 	sts	0x013A, r24
     95a:	1a c0       	rjmp	.+52     	; 0x990 <USB_Host_ProcessNextHostState+0x244>
			}

			static inline void USB_Host_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SetDeviceAddress(const uint8_t Address)
			{
				UHADDR  =  (Address & 0x7F);
     95c:	81 e0       	ldi	r24, 0x01	; 1
     95e:	80 93 a1 00 	sts	0x00A1, r24
			break;
		case HOST_STATE_Default_PostAddressSet:
			USB_Host_SetDeviceAddress(USB_HOST_DEVICEADDRESS);

			EVENT_USB_Host_DeviceEnumerationComplete();
     962:	8d dc       	rcall	.-1766   	; 0x27e <EVENT_USB_Host_DeviceEnumerationComplete>
			USB_HostState = HOST_STATE_Addressed;
     964:	8b e0       	ldi	r24, 0x0B	; 11
     966:	80 93 1f 05 	sts	0x051F, r24
     96a:	12 c0       	rjmp	.+36     	; 0x990 <USB_Host_ProcessNextHostState+0x244>
			break;
	}

	if ((ErrorCode != HOST_ENUMERROR_NoError) && (USB_HostState != HOST_STATE_Unattached))
	{
		EVENT_USB_Host_DeviceEnumerationFailed(ErrorCode, SubErrorCode);
     96c:	89 2f       	mov	r24, r25
     96e:	b0 dc       	rcall	.-1696   	; 0x2d0 <EVENT_USB_Host_DeviceEnumerationFailed>
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
     970:	80 91 dd 00 	lds	r24, 0x00DD
     974:	81 60       	ori	r24, 0x01	; 1
     976:	80 93 dd 00 	sts	0x00DD, r24

		USB_Host_VBUS_Auto_Off();

		EVENT_USB_Host_DeviceUnattached();
     97a:	f3 dc       	rcall	.-1562   	; 0x362 <EVENT_USB_Host_DeviceUnattached>

		USB_ResetInterface();
     97c:	ba d0       	rcall	.+372    	; 0xaf2 <USB_ResetInterface>
     97e:	08 c0       	rjmp	.+16     	; 0x990 <USB_Host_ProcessNextHostState+0x244>
	}
}
     980:	93 e0       	ldi	r25, 0x03	; 3
     982:	02 c0       	rjmp	.+4      	; 0x988 <USB_Host_ProcessNextHostState+0x23c>
     984:	94 e0       	ldi	r25, 0x04	; 4
     986:	60 e0       	ldi	r22, 0x00	; 0
			EVENT_USB_Host_DeviceEnumerationComplete();
			USB_HostState = HOST_STATE_Addressed;
			break;
	}

	if ((ErrorCode != HOST_ENUMERROR_NoError) && (USB_HostState != HOST_STATE_Unattached))
     988:	80 91 1f 05 	lds	r24, 0x051F
     98c:	82 30       	cpi	r24, 0x02	; 2
     98e:	71 f7       	brne	.-36     	; 0x96c <USB_Host_ProcessNextHostState+0x220>

		EVENT_USB_Host_DeviceUnattached();

		USB_ResetInterface();
	}
}
     990:	28 96       	adiw	r28, 0x08	; 8
     992:	0f b6       	in	r0, 0x3f	; 63
     994:	f8 94       	cli
     996:	de bf       	out	0x3e, r29	; 62
     998:	0f be       	out	0x3f, r0	; 63
     99a:	cd bf       	out	0x3d, r28	; 61
     99c:	cf 91       	pop	r28
     99e:	df 91       	pop	r29
     9a0:	1f 91       	pop	r17
     9a2:	0f 91       	pop	r16
     9a4:	ef 90       	pop	r14
     9a6:	08 95       	ret

000009a8 <Pipe_ConfigurePipe>:
                        const uint8_t Type,
                        const uint8_t Token,
                        const uint8_t EndpointNumber,
                        const uint16_t Size,
                        const uint8_t Banks)
{
     9a8:	ef 92       	push	r14
     9aa:	0f 93       	push	r16
     9ac:	1f 93       	push	r17
     9ae:	9e 2d       	mov	r25, r14
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
     9b0:	80 93 a7 00 	sts	0x00A7, r24
			 *  \pre The currently selected pipe must first be configured properly via \ref Pipe_ConfigurePipe().
			 */
			static inline void Pipe_EnablePipe(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_EnablePipe(void)
			{
				UPCONX |= (1 << PEN);
     9b4:	80 91 a9 00 	lds	r24, 0x00A9
     9b8:	81 60       	ori	r24, 0x01	; 1
     9ba:	80 93 a9 00 	sts	0x00A9, r24
	Pipe_SelectPipe(Number);
	Pipe_EnablePipe();

	UPCFG1X = 0;
     9be:	10 92 ab 00 	sts	0x00AB, r1

	UPCFG0X = ((Type << EPTYPE0) | Token | ((EndpointNumber & PIPE_EPNUM_MASK) << PEPNUM0));
     9c2:	62 95       	swap	r22
     9c4:	66 0f       	add	r22, r22
     9c6:	66 0f       	add	r22, r22
     9c8:	60 7c       	andi	r22, 0xC0	; 192
     9ca:	64 2b       	or	r22, r20
     9cc:	2f 70       	andi	r18, 0x0F	; 15
     9ce:	62 2b       	or	r22, r18
     9d0:	60 93 aa 00 	sts	0x00AA, r22
     9d4:	28 e0       	ldi	r18, 0x08	; 8
     9d6:	30 e0       	ldi	r19, 0x00	; 0
     9d8:	80 e0       	ldi	r24, 0x00	; 0
     9da:	03 c0       	rjmp	.+6      	; 0x9e2 <Pipe_ConfigurePipe+0x3a>
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while ((CheckBytes < Bytes) && (CheckBytes < PIPE_MAX_SIZE))
				{
					MaskVal++;
     9dc:	8f 5f       	subi	r24, 0xFF	; 255
					CheckBytes <<= 1;
     9de:	22 0f       	add	r18, r18
     9e0:	33 1f       	adc	r19, r19
			static inline uint8_t Pipe_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while ((CheckBytes < Bytes) && (CheckBytes < PIPE_MAX_SIZE))
     9e2:	20 17       	cp	r18, r16
     9e4:	31 07       	cpc	r19, r17
     9e6:	10 f4       	brcc	.+4      	; 0x9ec <Pipe_ConfigurePipe+0x44>
     9e8:	85 30       	cpi	r24, 0x05	; 5
     9ea:	c1 f7       	brne	.-16     	; 0x9dc <Pipe_ConfigurePipe+0x34>
	UPCFG1X = ((1 << ALLOC) | Banks | Pipe_BytesToEPSizeMask(Size));
     9ec:	92 60       	ori	r25, 0x02	; 2
     9ee:	82 95       	swap	r24
     9f0:	80 7f       	andi	r24, 0xF0	; 240
     9f2:	89 2b       	or	r24, r25
     9f4:	80 93 ab 00 	sts	0x00AB, r24

			/** Configures the currently selected pipe to allow for an unlimited number of IN requests. */
			static inline void Pipe_SetInfiniteINRequests(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetInfiniteINRequests(void)
			{
				UPCONX |= (1 << INMODE);
     9f8:	80 91 a9 00 	lds	r24, 0x00A9
     9fc:	80 62       	ori	r24, 0x20	; 32
     9fe:	80 93 a9 00 	sts	0x00A9, r24
			 *  \return Boolean true if the selected pipe is configured, false otherwise.
			 */
			static inline bool Pipe_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsConfigured(void)
			{
				return ((UPSTAX & (1 << CFGOK)) ? true : false);
     a02:	80 91 ac 00 	lds	r24, 0x00AC

	Pipe_SetInfiniteINRequests();

	return Pipe_IsConfigured();
}
     a06:	88 1f       	adc	r24, r24
     a08:	88 27       	eor	r24, r24
     a0a:	88 1f       	adc	r24, r24
     a0c:	1f 91       	pop	r17
     a0e:	0f 91       	pop	r16
     a10:	ef 90       	pop	r14
     a12:	08 95       	ret

00000a14 <Pipe_ClearPipes>:

void Pipe_ClearPipes(void)
{
	UPINT = 0;
     a14:	10 92 f8 00 	sts	0x00F8, r1
     a18:	90 e0       	ldi	r25, 0x00	; 0
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
     a1a:	90 93 a7 00 	sts	0x00A7, r25

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
	{
		Pipe_SelectPipe(PNum);
		UPIENX  = 0;
     a1e:	10 92 ae 00 	sts	0x00AE, r1
		UPINTX  = 0;
     a22:	10 92 a6 00 	sts	0x00A6, r1
		UPCFG1X = 0;
     a26:	10 92 ab 00 	sts	0x00AB, r1
			 *  from an attached device.
			 */
			static inline void Pipe_DisablePipe(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_DisablePipe(void)
			{
				UPCONX &= ~(1 << PEN);
     a2a:	80 91 a9 00 	lds	r24, 0x00A9
     a2e:	8e 7f       	andi	r24, 0xFE	; 254
     a30:	80 93 a9 00 	sts	0x00A9, r24

void Pipe_ClearPipes(void)
{
	UPINT = 0;

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
     a34:	9f 5f       	subi	r25, 0xFF	; 255
     a36:	97 30       	cpi	r25, 0x07	; 7
     a38:	81 f7       	brne	.-32     	; 0xa1a <Pipe_ClearPipes+0x6>
		UPIENX  = 0;
		UPINTX  = 0;
		UPCFG1X = 0;
		Pipe_DisablePipe();
	}
}
     a3a:	08 95       	ret

00000a3c <Pipe_IsEndpointBound>:

bool Pipe_IsEndpointBound(const uint8_t EndpointAddress)
{
     a3c:	e8 2f       	mov	r30, r24
			 *  \return Index of the currently selected pipe.
			 */
			static inline uint8_t Pipe_GetCurrentPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetCurrentPipe(void)
			{
				return (UPNUM & PIPE_PIPENUM_MASK);
     a3e:	70 91 a7 00 	lds	r23, 0x00A7
     a42:	60 e0       	ldi	r22, 0x00	; 0
		bool    PipeTokenCorrect = true;

		if (PipeToken != PIPE_TOKEN_SETUP)
		  PipeTokenCorrect = (PipeToken == ((EndpointAddress & PIPE_EPDIR_MASK) ? PIPE_TOKEN_IN : PIPE_TOKEN_OUT));

		if (PipeTokenCorrect && (Pipe_BoundEndpointNumber() == (EndpointAddress & PIPE_EPNUM_MASK)))
     a44:	48 2f       	mov	r20, r24
     a46:	50 e0       	ldi	r21, 0x00	; 0
     a48:	4f 70       	andi	r20, 0x0F	; 15
     a4a:	50 70       	andi	r21, 0x00	; 0
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
     a4c:	60 93 a7 00 	sts	0x00A7, r22
			 *  \return Boolean true if the selected pipe is configured, false otherwise.
			 */
			static inline bool Pipe_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsConfigured(void)
			{
				return ((UPSTAX & (1 << CFGOK)) ? true : false);
     a50:	80 91 ac 00 	lds	r24, 0x00AC

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
	{
		Pipe_SelectPipe(PNum);

		if (!(Pipe_IsConfigured()))
     a54:	87 ff       	sbrs	r24, 7
     a56:	18 c0       	rjmp	.+48     	; 0xa88 <Pipe_IsEndpointBound+0x4c>
			 *  \return The current pipe token, as a PIPE_TOKEN_* mask.
			 */
			static inline uint8_t Pipe_GetPipeToken(void) ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetPipeToken(void)
			{
				return (UPCFG0X & (0x03 << PTOKEN0));
     a58:	80 91 aa 00 	lds	r24, 0x00AA
     a5c:	80 73       	andi	r24, 0x30	; 48
		  continue;

		uint8_t PipeToken        = Pipe_GetPipeToken();
		bool    PipeTokenCorrect = true;

		if (PipeToken != PIPE_TOKEN_SETUP)
     a5e:	59 f0       	breq	.+22     	; 0xa76 <Pipe_IsEndpointBound+0x3a>
		  PipeTokenCorrect = (PipeToken == ((EndpointAddress & PIPE_EPDIR_MASK) ? PIPE_TOKEN_IN : PIPE_TOKEN_OUT));
     a60:	e7 fd       	sbrc	r30, 7
     a62:	03 c0       	rjmp	.+6      	; 0xa6a <Pipe_IsEndpointBound+0x2e>
     a64:	20 e2       	ldi	r18, 0x20	; 32
     a66:	30 e0       	ldi	r19, 0x00	; 0
     a68:	02 c0       	rjmp	.+4      	; 0xa6e <Pipe_IsEndpointBound+0x32>
     a6a:	20 e1       	ldi	r18, 0x10	; 16
     a6c:	30 e0       	ldi	r19, 0x00	; 0

		if (PipeTokenCorrect && (Pipe_BoundEndpointNumber() == (EndpointAddress & PIPE_EPNUM_MASK)))
     a6e:	90 e0       	ldi	r25, 0x00	; 0
     a70:	82 17       	cp	r24, r18
     a72:	93 07       	cpc	r25, r19
     a74:	49 f4       	brne	.+18     	; 0xa88 <Pipe_IsEndpointBound+0x4c>
			 *  \return Endpoint number the currently selected pipe is bound to.
			 */
			static inline uint8_t Pipe_BoundEndpointNumber(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_BoundEndpointNumber(void)
			{
				return ((UPCFG0X >> PEPNUM0) & PIPE_EPNUM_MASK);
     a76:	80 91 aa 00 	lds	r24, 0x00AA
     a7a:	8f 70       	andi	r24, 0x0F	; 15
     a7c:	90 e0       	ldi	r25, 0x00	; 0
     a7e:	84 17       	cp	r24, r20
     a80:	95 07       	cpc	r25, r21
     a82:	11 f4       	brne	.+4      	; 0xa88 <Pipe_IsEndpointBound+0x4c>
     a84:	81 e0       	ldi	r24, 0x01	; 1
     a86:	08 95       	ret

bool Pipe_IsEndpointBound(const uint8_t EndpointAddress)
{
	uint8_t PrevPipeNumber = Pipe_GetCurrentPipe();

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
     a88:	6f 5f       	subi	r22, 0xFF	; 255
     a8a:	67 30       	cpi	r22, 0x07	; 7
     a8c:	f9 f6       	brne	.-66     	; 0xa4c <Pipe_IsEndpointBound+0x10>
			 *  \return Index of the currently selected pipe.
			 */
			static inline uint8_t Pipe_GetCurrentPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetCurrentPipe(void)
			{
				return (UPNUM & PIPE_PIPENUM_MASK);
     a8e:	77 70       	andi	r23, 0x07	; 7
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
     a90:	70 93 a7 00 	sts	0x00A7, r23
     a94:	80 e0       	ldi	r24, 0x00	; 0
		  return true;
	}

	Pipe_SelectPipe(PrevPipeNumber);
	return false;
}
     a96:	08 95       	ret

00000a98 <Pipe_WaitUntilReady>:
			/** Returns the current USB frame number, when in host mode. Every millisecond the USB bus is active (i.e. not suspended)
			 *  the frame number is incremented by one.
			 */
			static inline uint16_t USB_Host_GetFrameNumber(void)
			{
				return UHFNUM;
     a98:	40 91 a2 00 	lds	r20, 0x00A2
     a9c:	50 91 a3 00 	lds	r21, 0x00A3
     aa0:	24 e6       	ldi	r18, 0x64	; 100
			 *  \return The current pipe token, as a PIPE_TOKEN_* mask.
			 */
			static inline uint8_t Pipe_GetPipeToken(void) ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetPipeToken(void)
			{
				return (UPCFG0X & (0x03 << PTOKEN0));
     aa2:	80 91 aa 00 	lds	r24, 0x00AA

	uint16_t PreviousFrameNumber = USB_Host_GetFrameNumber();

	for (;;)
	{
		if (Pipe_GetPipeToken() == PIPE_TOKEN_IN)
     aa6:	80 73       	andi	r24, 0x30	; 48
     aa8:	80 31       	cpi	r24, 0x10	; 16
     aaa:	29 f4       	brne	.+10     	; 0xab6 <Pipe_WaitUntilReady+0x1e>
			 *  \return Boolean true if the current pipe has received an IN packet, false otherwise.
			 */
			static inline bool Pipe_IsINReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsINReceived(void)
			{
				return ((UPINTX & (1 << RXINI)) ? true : false);
     aac:	80 91 a6 00 	lds	r24, 0x00A6
		{
			if (Pipe_IsINReceived())
     ab0:	80 ff       	sbrs	r24, 0
     ab2:	05 c0       	rjmp	.+10     	; 0xabe <Pipe_WaitUntilReady+0x26>
     ab4:	1c c0       	rjmp	.+56     	; 0xaee <Pipe_WaitUntilReady+0x56>
			 *  \return Boolean true if the current pipe is ready for an OUT packet, false otherwise.
			 */
			static inline bool Pipe_IsOUTReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsOUTReady(void)
			{
				return ((UPINTX & (1 << TXOUTI)) ? true : false);
     ab6:	80 91 a6 00 	lds	r24, 0x00A6
			  return PIPE_READYWAIT_NoError;
		}
		else
		{
			if (Pipe_IsOUTReady())
     aba:	82 fd       	sbrc	r24, 2
     abc:	18 c0       	rjmp	.+48     	; 0xaee <Pipe_WaitUntilReady+0x56>
			 *  \return Boolean true if the current pipe has been stalled by the attached device, false otherwise.
			 */
			static inline bool Pipe_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsStalled(void)
			{
				return ((UPINTX & (1 << RXSTALLI)) ? true : false);
     abe:	80 91 a6 00 	lds	r24, 0x00A6
			  return PIPE_READYWAIT_NoError;
		}

		if (Pipe_IsStalled())
     ac2:	81 ff       	sbrs	r24, 1
     ac4:	02 c0       	rjmp	.+4      	; 0xaca <Pipe_WaitUntilReady+0x32>
     ac6:	81 e0       	ldi	r24, 0x01	; 1
     ac8:	08 95       	ret
		  return PIPE_READYWAIT_PipeStalled;
		else if (USB_HostState == HOST_STATE_Unattached)
     aca:	80 91 1f 05 	lds	r24, 0x051F
     ace:	82 30       	cpi	r24, 0x02	; 2
     ad0:	79 f0       	breq	.+30     	; 0xaf0 <Pipe_WaitUntilReady+0x58>
     ad2:	80 91 a2 00 	lds	r24, 0x00A2
     ad6:	90 91 a3 00 	lds	r25, 0x00A3
		  return PIPE_READYWAIT_DeviceDisconnected;

		uint16_t CurrentFrameNumber = USB_Host_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
     ada:	84 17       	cp	r24, r20
     adc:	95 07       	cpc	r25, r21
     ade:	09 f3       	breq	.-62     	; 0xaa2 <Pipe_WaitUntilReady+0xa>
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
     ae0:	22 23       	and	r18, r18
     ae2:	11 f4       	brne	.+4      	; 0xae8 <Pipe_WaitUntilReady+0x50>
     ae4:	83 e0       	ldi	r24, 0x03	; 3
     ae6:	08 95       	ret
     ae8:	21 50       	subi	r18, 0x01	; 1
     aea:	ac 01       	movw	r20, r24
     aec:	da cf       	rjmp	.-76     	; 0xaa2 <Pipe_WaitUntilReady+0xa>
     aee:	80 e0       	ldi	r24, 0x00	; 0
			  return PIPE_READYWAIT_Timeout;
		}
	}
}
     af0:	08 95       	ret

00000af2 <USB_ResetInterface>:
{
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
     af2:	6e d0       	rcall	.+220    	; 0xbd0 <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
     af4:	75 d0       	rcall	.+234    	; 0xbe0 <USB_INT_ClearAllInterrupts>
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				const uint8_t Temp = USBCON;
     af6:	80 91 d8 00 	lds	r24, 0x00D8

				USBCON = (Temp & ~(1 << USBE));
     afa:	98 2f       	mov	r25, r24
     afc:	9f 77       	andi	r25, 0x7F	; 127
     afe:	90 93 d8 00 	sts	0x00D8, r25
				USBCON = (Temp |  (1 << USBE));
     b02:	80 68       	ori	r24, 0x80	; 128
     b04:	80 93 d8 00 	sts	0x00D8, r24

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR  = USB_PLL_PSC;
     b08:	8c e0       	ldi	r24, 0x0C	; 12
     b0a:	89 bd       	out	0x29, r24	; 41
				PLLCSR |= (1 << PLLE);
     b0c:	89 b5       	in	r24, 0x29	; 41
     b0e:	82 60       	ori	r24, 0x02	; 2
     b10:	89 bd       	out	0x29, r24	; 41
		#if defined(USB_SERIES_4_AVR)
		PLLFRQ = ((1 << PLLUSB) | (1 << PDIV3) | (1 << PDIV1));
		#endif

		USB_PLL_On();
		while (!(USB_PLL_IsReady()));
     b12:	09 b4       	in	r0, 0x29	; 41
     b14:	00 fe       	sbrs	r0, 0
     b16:	fd cf       	rjmp	.-6      	; 0xb12 <USB_ResetInterface+0x20>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON  &= ~(1 << FRZCLK);
     b18:	80 91 d8 00 	lds	r24, 0x00D8
     b1c:	8f 7d       	andi	r24, 0xDF	; 223
     b1e:	80 93 d8 00 	sts	0x00D8, r24
		#endif
	}
	else if (USB_CurrentMode == USB_MODE_Host)
	{
		#if defined(USB_CAN_BE_HOST)
		UHWCON &= ~(1 << UIMOD);
     b22:	80 91 d7 00 	lds	r24, 0x00D7
     b26:	8f 77       	andi	r24, 0x7F	; 127
     b28:	80 93 d7 00 	sts	0x00D7, r24
#endif

#if defined(USB_CAN_BE_HOST)
static void USB_Init_Host(void)
{
	USB_HostState       = HOST_STATE_Unattached;
     b2c:	82 e0       	ldi	r24, 0x02	; 2
     b2e:	80 93 1f 05 	sts	0x051F, r24
	USB_ControlPipeSize = PIPE_CONTROLPIPE_DEFAULT_SIZE;
     b32:	80 e4       	ldi	r24, 0x40	; 64
     b34:	80 93 2b 01 	sts	0x012B, r24
	#if !defined(__DOXYGEN__)
		/* Macros: */
			static inline void USB_Host_HostMode_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_HostMode_On(void)
			{
				USBCON |=  (1 << HOST);
     b38:	80 91 d8 00 	lds	r24, 0x00D8
     b3c:	80 64       	ori	r24, 0x40	; 64
     b3e:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
     b42:	80 91 dd 00 	lds	r24, 0x00DD
     b46:	81 60       	ori	r24, 0x01	; 1
     b48:	80 93 dd 00 	sts	0x00DD, r24
			}

			static inline void USB_Host_VBUS_Manual_Enable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Manual_Enable(void)
			{
				OTGCON |=  (1 << VBUSHWC);
     b4c:	80 91 dd 00 	lds	r24, 0x00DD
     b50:	84 60       	ori	r24, 0x04	; 4
     b52:	80 93 dd 00 	sts	0x00DD, r24
				UHWCON &= ~(1 << UVCONE);
     b56:	80 91 d7 00 	lds	r24, 0x00D7
     b5a:	8f 7e       	andi	r24, 0xEF	; 239
     b5c:	80 93 d7 00 	sts	0x00D7, r24

				DDRE   |=  (1 << 7);
     b60:	6f 9a       	sbi	0x0d, 7	; 13
			}

			static inline void USB_Host_VBUS_Manual_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Manual_On(void)
			{
				PORTE  |=  (1 << 7);
     b62:	77 9a       	sbi	0x0e, 7	; 14

	USB_Host_VBUS_Auto_Off();
	USB_Host_VBUS_Manual_Enable();
	USB_Host_VBUS_Manual_On();

	USB_INT_Enable(USB_INT_SRPI);
     b64:	80 91 de 00 	lds	r24, 0x00DE
     b68:	81 60       	ori	r24, 0x01	; 1
     b6a:	80 93 de 00 	sts	0x00DE, r24
	USB_INT_Enable(USB_INT_BCERRI);
     b6e:	80 91 de 00 	lds	r24, 0x00DE
     b72:	84 60       	ori	r24, 0x04	; 4
     b74:	80 93 de 00 	sts	0x00DE, r24
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
     b78:	80 91 e0 00 	lds	r24, 0x00E0
     b7c:	8e 7f       	andi	r24, 0xFE	; 254
     b7e:	80 93 e0 00 	sts	0x00E0, r24

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON  |=  (1 << OTGPADE);
     b82:	80 91 d8 00 	lds	r24, 0x00D8
     b86:	80 61       	ori	r24, 0x10	; 16
     b88:	80 93 d8 00 	sts	0x00D8, r24
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
     b8c:	08 95       	ret

00000b8e <USB_Init>:

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON  |=  (1 << UVREGE);
     b8e:	e7 ed       	ldi	r30, 0xD7	; 215
     b90:	f0 e0       	ldi	r31, 0x00	; 0
     b92:	80 81       	ld	r24, Z
     b94:	81 60       	ori	r24, 0x01	; 1
     b96:	80 83       	st	Z, r24
	{
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
     b98:	81 e0       	ldi	r24, 0x01	; 1
     b9a:	80 93 16 05 	sts	0x0516, r24

	USB_ResetInterface();
}
     b9e:	a9 cf       	rjmp	.-174    	; 0xaf2 <USB_ResetInterface>

00000ba0 <USB_ShutDown>:

void USB_ShutDown(void)
{
	USB_INT_DisableAllInterrupts();
     ba0:	17 d0       	rcall	.+46     	; 0xbd0 <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
     ba2:	1e d0       	rcall	.+60     	; 0xbe0 <USB_INT_ClearAllInterrupts>
			 *  enumerating the device once attached until \ref USB_Attach() is called.
			 */
			static inline void USB_Detach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Detach(void)
			{
				UDCON  |=  (1 << DETACH);
     ba4:	e0 ee       	ldi	r30, 0xE0	; 224
     ba6:	f0 e0       	ldi	r31, 0x00	; 0
     ba8:	80 81       	ld	r24, Z
     baa:	81 60       	ori	r24, 0x01	; 1
     bac:	80 83       	st	Z, r24
			}

			static inline void USB_Controller_Disable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Disable(void)
			{
				USBCON  &= ~(1 << USBE);
     bae:	a8 ed       	ldi	r26, 0xD8	; 216
     bb0:	b0 e0       	ldi	r27, 0x00	; 0
     bb2:	8c 91       	ld	r24, X
     bb4:	8f 77       	andi	r24, 0x7F	; 127
     bb6:	8c 93       	st	X, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR  = 0;
     bb8:	19 bc       	out	0x29, r1	; 41

			static inline void USB_REG_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_Off(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON  &= ~(1 << UVREGE);
     bba:	e7 ed       	ldi	r30, 0xD7	; 215
     bbc:	f0 e0       	ldi	r31, 0x00	; 0
     bbe:	80 81       	ld	r24, Z
     bc0:	8e 7f       	andi	r24, 0xFE	; 254
     bc2:	80 83       	st	Z, r24
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON  &= ~(1 << OTGPADE);
     bc4:	8c 91       	ld	r24, X
     bc6:	8f 7e       	andi	r24, 0xEF	; 239
     bc8:	8c 93       	st	X, r24

	#if defined(USB_CAN_BE_BOTH)
	USB_CurrentMode = USB_MODE_None;
	#endif

	USB_IsInitialized = false;
     bca:	10 92 16 05 	sts	0x0516, r1
}
     bce:	08 95       	ret

00000bd0 <USB_INT_DisableAllInterrupts>:
#include "USBInterrupt.h"

void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
     bd0:	e8 ed       	ldi	r30, 0xD8	; 216
     bd2:	f0 e0       	ldi	r31, 0x00	; 0
     bd4:	80 81       	ld	r24, Z
     bd6:	8c 7f       	andi	r24, 0xFC	; 252
     bd8:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_BOTH)
	OTGIEN  = 0;
	#endif

	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
     bda:	10 92 a0 00 	sts	0x00A0, r1
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
	#endif
}
     bde:	08 95       	ret

00000be0 <USB_INT_ClearAllInterrupts>:

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT  = 0;
     be0:	10 92 da 00 	sts	0x00DA, r1
	#if defined(USB_CAN_BE_BOTH)
	OTGINT  = 0;
	#endif

	#if defined(USB_CAN_BE_HOST)
	UHINT   = 0;
     be4:	10 92 9f 00 	sts	0x009F, r1
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT   = 0;
	#endif
}
     be8:	08 95       	ret

00000bea <__vector_10>:

ISR(USB_GEN_vect, ISR_BLOCK)
{
     bea:	1f 92       	push	r1
     bec:	0f 92       	push	r0
     bee:	0f b6       	in	r0, 0x3f	; 63
     bf0:	0f 92       	push	r0
     bf2:	0b b6       	in	r0, 0x3b	; 59
     bf4:	0f 92       	push	r0
     bf6:	11 24       	eor	r1, r1
     bf8:	2f 93       	push	r18
     bfa:	3f 93       	push	r19
     bfc:	4f 93       	push	r20
     bfe:	5f 93       	push	r21
     c00:	6f 93       	push	r22
     c02:	7f 93       	push	r23
     c04:	8f 93       	push	r24
     c06:	9f 93       	push	r25
     c08:	af 93       	push	r26
     c0a:	bf 93       	push	r27
     c0c:	ef 93       	push	r30
     c0e:	ff 93       	push	r31
	}
	#endif
	#endif

	#if defined(USB_CAN_BE_HOST)
	if (USB_INT_HasOccurred(USB_INT_DDISCI) && USB_INT_IsEnabled(USB_INT_DDISCI))
     c10:	80 91 9f 00 	lds	r24, 0x009F
     c14:	81 ff       	sbrs	r24, 1
     c16:	15 c0       	rjmp	.+42     	; 0xc42 <__vector_10+0x58>
     c18:	80 91 a0 00 	lds	r24, 0x00A0
     c1c:	81 ff       	sbrs	r24, 1
     c1e:	11 c0       	rjmp	.+34     	; 0xc42 <__vector_10+0x58>
	{
		USB_INT_Clear(USB_INT_DDISCI);
     c20:	80 91 9f 00 	lds	r24, 0x009F
     c24:	8d 7f       	andi	r24, 0xFD	; 253
     c26:	80 93 9f 00 	sts	0x009F, r24
		USB_INT_Clear(USB_INT_DCONNI);
     c2a:	80 91 9f 00 	lds	r24, 0x009F
     c2e:	8e 7f       	andi	r24, 0xFE	; 254
     c30:	80 93 9f 00 	sts	0x009F, r24
		USB_INT_Disable(USB_INT_DDISCI);
     c34:	80 91 a0 00 	lds	r24, 0x00A0
     c38:	8d 7f       	andi	r24, 0xFD	; 253
     c3a:	80 93 a0 00 	sts	0x00A0, r24

		EVENT_USB_Host_DeviceUnattached();
     c3e:	91 db       	rcall	.-2270   	; 0x362 <EVENT_USB_Host_DeviceUnattached>

		USB_ResetInterface();
     c40:	58 df       	rcall	.-336    	; 0xaf2 <USB_ResetInterface>
	}

	if (USB_INT_HasOccurred(USB_INT_VBERRI) && USB_INT_IsEnabled(USB_INT_VBERRI))
     c42:	80 91 df 00 	lds	r24, 0x00DF
     c46:	81 ff       	sbrs	r24, 1
     c48:	15 c0       	rjmp	.+42     	; 0xc74 <__vector_10+0x8a>
     c4a:	80 91 de 00 	lds	r24, 0x00DE
     c4e:	81 ff       	sbrs	r24, 1
     c50:	11 c0       	rjmp	.+34     	; 0xc74 <__vector_10+0x8a>
	{
		USB_INT_Clear(USB_INT_VBERRI);
     c52:	80 91 df 00 	lds	r24, 0x00DF
     c56:	8d 7f       	andi	r24, 0xFD	; 253
     c58:	80 93 df 00 	sts	0x00DF, r24
			}

			static inline void USB_Host_VBUS_Manual_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Manual_Off(void)
			{
				PORTE  &= ~(1 << 7);
     c5c:	77 98       	cbi	0x0e, 7	; 14
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
     c5e:	80 91 dd 00 	lds	r24, 0x00DD
     c62:	81 60       	ori	r24, 0x01	; 1
     c64:	80 93 dd 00 	sts	0x00DD, r24

		USB_Host_VBUS_Manual_Off();
		USB_Host_VBUS_Auto_Off();

		EVENT_USB_Host_HostError(HOST_ERROR_VBusVoltageDip);
     c68:	80 e0       	ldi	r24, 0x00	; 0
     c6a:	5e db       	rcall	.-2372   	; 0x328 <EVENT_USB_Host_HostError>
		EVENT_USB_Host_DeviceUnattached();
     c6c:	7a db       	rcall	.-2316   	; 0x362 <EVENT_USB_Host_DeviceUnattached>

		USB_HostState = HOST_STATE_Unattached;
     c6e:	82 e0       	ldi	r24, 0x02	; 2
     c70:	80 93 1f 05 	sts	0x051F, r24
	}

	if (USB_INT_HasOccurred(USB_INT_SRPI) && USB_INT_IsEnabled(USB_INT_SRPI))
     c74:	80 91 df 00 	lds	r24, 0x00DF
     c78:	80 ff       	sbrs	r24, 0
     c7a:	17 c0       	rjmp	.+46     	; 0xcaa <__vector_10+0xc0>
     c7c:	80 91 de 00 	lds	r24, 0x00DE
     c80:	80 ff       	sbrs	r24, 0
     c82:	13 c0       	rjmp	.+38     	; 0xcaa <__vector_10+0xc0>
	{
		USB_INT_Clear(USB_INT_SRPI);
     c84:	80 91 df 00 	lds	r24, 0x00DF
     c88:	8e 7f       	andi	r24, 0xFE	; 254
     c8a:	80 93 df 00 	sts	0x00DF, r24
		USB_INT_Disable(USB_INT_SRPI);
     c8e:	80 91 de 00 	lds	r24, 0x00DE
     c92:	8e 7f       	andi	r24, 0xFE	; 254
     c94:	80 93 de 00 	sts	0x00DE, r24

		EVENT_USB_Host_DeviceAttached();
     c98:	6d db       	rcall	.-2342   	; 0x374 <EVENT_USB_Host_DeviceAttached>

		USB_INT_Enable(USB_INT_DDISCI);
     c9a:	80 91 a0 00 	lds	r24, 0x00A0
     c9e:	82 60       	ori	r24, 0x02	; 2
     ca0:	80 93 a0 00 	sts	0x00A0, r24

		USB_HostState = HOST_STATE_Powered;
     ca4:	83 e0       	ldi	r24, 0x03	; 3
     ca6:	80 93 1f 05 	sts	0x051F, r24
	}

	if (USB_INT_HasOccurred(USB_INT_BCERRI) && USB_INT_IsEnabled(USB_INT_BCERRI))
     caa:	80 91 df 00 	lds	r24, 0x00DF
     cae:	82 ff       	sbrs	r24, 2
     cb0:	0e c0       	rjmp	.+28     	; 0xcce <__vector_10+0xe4>
     cb2:	80 91 de 00 	lds	r24, 0x00DE
     cb6:	82 ff       	sbrs	r24, 2
     cb8:	0a c0       	rjmp	.+20     	; 0xcce <__vector_10+0xe4>
	{
		USB_INT_Clear(USB_INT_BCERRI);
     cba:	80 91 df 00 	lds	r24, 0x00DF
     cbe:	8b 7f       	andi	r24, 0xFB	; 251
     cc0:	80 93 df 00 	sts	0x00DF, r24

		EVENT_USB_Host_DeviceEnumerationFailed(HOST_ENUMERROR_NoDeviceDetected, 0);
     cc4:	82 e0       	ldi	r24, 0x02	; 2
     cc6:	60 e0       	ldi	r22, 0x00	; 0
     cc8:	03 db       	rcall	.-2554   	; 0x2d0 <EVENT_USB_Host_DeviceEnumerationFailed>
		EVENT_USB_Host_DeviceUnattached();
     cca:	4b db       	rcall	.-2410   	; 0x362 <EVENT_USB_Host_DeviceUnattached>

		USB_ResetInterface();
     ccc:	12 df       	rcall	.-476    	; 0xaf2 <USB_ResetInterface>
	}

	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_HSOFI) && USB_INT_IsEnabled(USB_INT_HSOFI))
     cce:	80 91 9f 00 	lds	r24, 0x009F
     cd2:	85 ff       	sbrs	r24, 5
     cd4:	0a c0       	rjmp	.+20     	; 0xcea <__vector_10+0x100>
     cd6:	80 91 a0 00 	lds	r24, 0x00A0
     cda:	85 ff       	sbrs	r24, 5
     cdc:	06 c0       	rjmp	.+12     	; 0xcea <__vector_10+0x100>
	{
		USB_INT_Clear(USB_INT_HSOFI);
     cde:	80 91 9f 00 	lds	r24, 0x009F
     ce2:	8f 7d       	andi	r24, 0xDF	; 223
     ce4:	80 93 9f 00 	sts	0x009F, r24

		EVENT_USB_Host_StartOfFrame();
     ce8:	ae d0       	rcall	.+348    	; 0xe46 <USB_Event_Stub>
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
     cea:	ff 91       	pop	r31
     cec:	ef 91       	pop	r30
     cee:	bf 91       	pop	r27
     cf0:	af 91       	pop	r26
     cf2:	9f 91       	pop	r25
     cf4:	8f 91       	pop	r24
     cf6:	7f 91       	pop	r23
     cf8:	6f 91       	pop	r22
     cfa:	5f 91       	pop	r21
     cfc:	4f 91       	pop	r20
     cfe:	3f 91       	pop	r19
     d00:	2f 91       	pop	r18
     d02:	0f 90       	pop	r0
     d04:	0b be       	out	0x3b, r0	; 59
     d06:	0f 90       	pop	r0
     d08:	0f be       	out	0x3f, r0	; 63
     d0a:	0f 90       	pop	r0
     d0c:	1f 90       	pop	r1
     d0e:	18 95       	reti

00000d10 <USB_GetNextDescriptorComp>:

uint8_t USB_GetNextDescriptorComp(uint16_t* const BytesRem, void** const CurrConfigLoc, ConfigComparatorPtr_t const ComparatorRoutine)
{
     d10:	af 92       	push	r10
     d12:	bf 92       	push	r11
     d14:	cf 92       	push	r12
     d16:	df 92       	push	r13
     d18:	ef 92       	push	r14
     d1a:	ff 92       	push	r15
     d1c:	0f 93       	push	r16
     d1e:	1f 93       	push	r17
     d20:	cf 93       	push	r28
     d22:	df 93       	push	r29
     d24:	7c 01       	movw	r14, r24
     d26:	8b 01       	movw	r16, r22
     d28:	5a 01       	movw	r10, r20
     d2a:	21 c0       	rjmp	.+66     	; 0xd6e <USB_GetNextDescriptorComp+0x5e>
	uint8_t ErrorCode;

	while (*BytesRem)
	{
		uint8_t* PrevDescLoc  = *CurrConfigLoc;
     d2c:	f8 01       	movw	r30, r16
     d2e:	c0 81       	ld	r28, Z
     d30:	d1 81       	ldd	r29, Z+1	; 0x01
			static inline void USB_GetNextDescriptor(uint16_t* const BytesRem,
			                                         void** CurrConfigLoc) ATTR_NON_NULL_PTR_ARG(1) ATTR_NON_NULL_PTR_ARG(2);
			static inline void USB_GetNextDescriptor(uint16_t* const BytesRem,
			                                         void** CurrConfigLoc)
			{
				uint16_t CurrDescriptorSize = DESCRIPTOR_CAST(*CurrConfigLoc, USB_Descriptor_Header_t).Size;
     d32:	88 81       	ld	r24, Y
     d34:	90 e0       	ldi	r25, 0x00	; 0

				*CurrConfigLoc  = ((uint8_t*)*CurrConfigLoc) + CurrDescriptorSize;
     d36:	9e 01       	movw	r18, r28
     d38:	28 0f       	add	r18, r24
     d3a:	39 1f       	adc	r19, r25
     d3c:	31 83       	std	Z+1, r19	; 0x01
     d3e:	20 83       	st	Z, r18
				*BytesRem      -= CurrDescriptorSize;
     d40:	f7 01       	movw	r30, r14
     d42:	20 81       	ld	r18, Z
     d44:	31 81       	ldd	r19, Z+1	; 0x01
     d46:	28 1b       	sub	r18, r24
     d48:	39 0b       	sbc	r19, r25
     d4a:	31 83       	std	Z+1, r19	; 0x01
     d4c:	20 83       	st	Z, r18
		uint16_t PrevBytesRem = *BytesRem;

		USB_GetNextDescriptor(BytesRem, CurrConfigLoc);

		if ((ErrorCode = ComparatorRoutine(*CurrConfigLoc)) != DESCRIPTOR_SEARCH_NotFound)
     d4e:	f8 01       	movw	r30, r16
     d50:	80 81       	ld	r24, Z
     d52:	91 81       	ldd	r25, Z+1	; 0x01
     d54:	f5 01       	movw	r30, r10
     d56:	09 95       	icall
     d58:	82 30       	cpi	r24, 0x02	; 2
     d5a:	49 f0       	breq	.+18     	; 0xd6e <USB_GetNextDescriptorComp+0x5e>
		{
			if (ErrorCode == DESCRIPTOR_SEARCH_Fail)
     d5c:	81 30       	cpi	r24, 0x01	; 1
     d5e:	71 f4       	brne	.+28     	; 0xd7c <USB_GetNextDescriptorComp+0x6c>
			{
				*CurrConfigLoc = PrevDescLoc;
     d60:	f8 01       	movw	r30, r16
     d62:	c0 83       	st	Z, r28
     d64:	d1 83       	std	Z+1, r29	; 0x01
				*BytesRem      = PrevBytesRem;
     d66:	f7 01       	movw	r30, r14
     d68:	d1 82       	std	Z+1, r13	; 0x01
     d6a:	c0 82       	st	Z, r12
     d6c:	07 c0       	rjmp	.+14     	; 0xd7c <USB_GetNextDescriptorComp+0x6c>

uint8_t USB_GetNextDescriptorComp(uint16_t* const BytesRem, void** const CurrConfigLoc, ConfigComparatorPtr_t const ComparatorRoutine)
{
	uint8_t ErrorCode;

	while (*BytesRem)
     d6e:	f7 01       	movw	r30, r14
     d70:	c0 80       	ld	r12, Z
     d72:	d1 80       	ldd	r13, Z+1	; 0x01
     d74:	c1 14       	cp	r12, r1
     d76:	d1 04       	cpc	r13, r1
     d78:	c9 f6       	brne	.-78     	; 0xd2c <USB_GetNextDescriptorComp+0x1c>
     d7a:	82 e0       	ldi	r24, 0x02	; 2
			return ErrorCode;
		}
	}

	return DESCRIPTOR_SEARCH_COMP_EndOfDescriptor;
}
     d7c:	df 91       	pop	r29
     d7e:	cf 91       	pop	r28
     d80:	1f 91       	pop	r17
     d82:	0f 91       	pop	r16
     d84:	ff 90       	pop	r15
     d86:	ef 90       	pop	r14
     d88:	df 90       	pop	r13
     d8a:	cf 90       	pop	r12
     d8c:	bf 90       	pop	r11
     d8e:	af 90       	pop	r10
     d90:	08 95       	ret

00000d92 <USB_Host_GetDeviceConfigDescriptor>:
#include "ConfigDescriptor.h"

#if defined(USB_CAN_BE_HOST)
uint8_t USB_Host_GetDeviceConfigDescriptor(uint8_t ConfigNumber, uint16_t* const ConfigSizePtr,
                                           void* BufferPtr, uint16_t BufferSize)
{
     d92:	cf 92       	push	r12
     d94:	df 92       	push	r13
     d96:	ef 92       	push	r14
     d98:	ff 92       	push	r15
     d9a:	0f 93       	push	r16
     d9c:	1f 93       	push	r17
     d9e:	df 93       	push	r29
     da0:	cf 93       	push	r28
     da2:	cd b7       	in	r28, 0x3d	; 61
     da4:	de b7       	in	r29, 0x3e	; 62
     da6:	29 97       	sbiw	r28, 0x09	; 9
     da8:	0f b6       	in	r0, 0x3f	; 63
     daa:	f8 94       	cli
     dac:	de bf       	out	0x3e, r29	; 62
     dae:	0f be       	out	0x3f, r0	; 63
     db0:	cd bf       	out	0x3d, r28	; 61
     db2:	6b 01       	movw	r12, r22
     db4:	8a 01       	movw	r16, r20
     db6:	79 01       	movw	r14, r18
	uint8_t ErrorCode;
	uint8_t ConfigHeader[sizeof(USB_Descriptor_Configuration_Header_t)];

	USB_ControlRequest = (USB_Request_Header_t)
     db8:	90 e8       	ldi	r25, 0x80	; 128
     dba:	90 93 17 05 	sts	0x0517, r25
     dbe:	96 e0       	ldi	r25, 0x06	; 6
     dc0:	90 93 18 05 	sts	0x0518, r25
     dc4:	90 e0       	ldi	r25, 0x00	; 0
     dc6:	01 97       	sbiw	r24, 0x01	; 1
     dc8:	92 60       	ori	r25, 0x02	; 2
     dca:	90 93 1a 05 	sts	0x051A, r25
     dce:	80 93 19 05 	sts	0x0519, r24
     dd2:	10 92 1c 05 	sts	0x051C, r1
     dd6:	10 92 1b 05 	sts	0x051B, r1
     dda:	89 e0       	ldi	r24, 0x09	; 9
     ddc:	90 e0       	ldi	r25, 0x00	; 0
     dde:	90 93 1e 05 	sts	0x051E, r25
     de2:	80 93 1d 05 	sts	0x051D, r24
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
     de6:	10 92 a7 00 	sts	0x00A7, r1
			.wLength       = sizeof(USB_Descriptor_Configuration_Header_t),
		};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	if ((ErrorCode = USB_Host_SendControlRequest(ConfigHeader)) != HOST_SENDCONTROL_Successful)
     dea:	ce 01       	movw	r24, r28
     dec:	01 96       	adiw	r24, 0x01	; 1
     dee:	55 d0       	rcall	.+170    	; 0xe9a <USB_Host_SendControlRequest>
     df0:	28 2f       	mov	r18, r24
     df2:	88 23       	and	r24, r24
     df4:	c1 f4       	brne	.+48     	; 0xe26 <USB_Host_GetDeviceConfigDescriptor+0x94>
	  return ErrorCode;

	*ConfigSizePtr = DESCRIPTOR_PCAST(ConfigHeader, USB_Descriptor_Configuration_Header_t)->TotalConfigurationSize;
     df6:	8b 81       	ldd	r24, Y+3	; 0x03
     df8:	9c 81       	ldd	r25, Y+4	; 0x04
     dfa:	f6 01       	movw	r30, r12
     dfc:	91 83       	std	Z+1, r25	; 0x01
     dfe:	80 83       	st	Z, r24

	if (*ConfigSizePtr > BufferSize)
     e00:	e8 16       	cp	r14, r24
     e02:	f9 06       	cpc	r15, r25
     e04:	10 f4       	brcc	.+4      	; 0xe0a <USB_Host_GetDeviceConfigDescriptor+0x78>
     e06:	25 e0       	ldi	r18, 0x05	; 5
     e08:	0e c0       	rjmp	.+28     	; 0xe26 <USB_Host_GetDeviceConfigDescriptor+0x94>
	  return HOST_GETCONFIG_BuffOverflow;

	USB_ControlRequest.wLength = *ConfigSizePtr;
     e0a:	90 93 1e 05 	sts	0x051E, r25
     e0e:	80 93 1d 05 	sts	0x051D, r24

	if ((ErrorCode = USB_Host_SendControlRequest(BufferPtr)) != HOST_SENDCONTROL_Successful)
     e12:	c8 01       	movw	r24, r16
     e14:	42 d0       	rcall	.+132    	; 0xe9a <USB_Host_SendControlRequest>
     e16:	28 2f       	mov	r18, r24
     e18:	88 23       	and	r24, r24
     e1a:	29 f4       	brne	.+10     	; 0xe26 <USB_Host_GetDeviceConfigDescriptor+0x94>
	  return ErrorCode;

	if (DESCRIPTOR_TYPE(BufferPtr) != DTYPE_Configuration)
     e1c:	f8 01       	movw	r30, r16
     e1e:	81 81       	ldd	r24, Z+1	; 0x01
     e20:	82 30       	cpi	r24, 0x02	; 2
     e22:	09 f0       	breq	.+2      	; 0xe26 <USB_Host_GetDeviceConfigDescriptor+0x94>
     e24:	26 e0       	ldi	r18, 0x06	; 6
	  return HOST_GETCONFIG_InvalidData;

	return HOST_GETCONFIG_Successful;
}
     e26:	82 2f       	mov	r24, r18
     e28:	29 96       	adiw	r28, 0x09	; 9
     e2a:	0f b6       	in	r0, 0x3f	; 63
     e2c:	f8 94       	cli
     e2e:	de bf       	out	0x3e, r29	; 62
     e30:	0f be       	out	0x3f, r0	; 63
     e32:	cd bf       	out	0x3d, r28	; 61
     e34:	cf 91       	pop	r28
     e36:	df 91       	pop	r29
     e38:	1f 91       	pop	r17
     e3a:	0f 91       	pop	r16
     e3c:	ff 90       	pop	r15
     e3e:	ef 90       	pop	r14
     e40:	df 90       	pop	r13
     e42:	cf 90       	pop	r12
     e44:	08 95       	ret

00000e46 <USB_Event_Stub>:
#include "Events.h"

void USB_Event_Stub(void)
{

}
     e46:	08 95       	ret

00000e48 <USB_Host_WaitForIOS>:

	return ReturnStatus;
}

static uint8_t USB_Host_WaitForIOS(const uint8_t WaitType)
{
     e48:	1f 93       	push	r17
     e4a:	cf 93       	push	r28
     e4c:	df 93       	push	r29
     e4e:	18 2f       	mov	r17, r24
     e50:	c8 ee       	ldi	r28, 0xE8	; 232
     e52:	d3 e0       	ldi	r29, 0x03	; 3
     e54:	09 c0       	rjmp	.+18     	; 0xe68 <USB_Host_WaitForIOS+0x20>
	         ((WaitType == USB_HOST_WAITFOR_InReceived) && Pipe_IsINReceived()) ||
	         ((WaitType == USB_HOST_WAITFOR_OutReady)   && Pipe_IsOUTReady())))
	{
		uint8_t ErrorCode;

		if ((ErrorCode = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
     e56:	81 e0       	ldi	r24, 0x01	; 1
     e58:	ca db       	rcall	.-2156   	; 0x5ee <USB_Host_WaitMS>
     e5a:	88 23       	and	r24, r24
     e5c:	d1 f4       	brne	.+52     	; 0xe92 <USB_Host_WaitForIOS+0x4a>
		  return ErrorCode;

		if (!(TimeoutCounter--))
     e5e:	20 97       	sbiw	r28, 0x00	; 0
     e60:	11 f4       	brne	.+4      	; 0xe66 <USB_Host_WaitForIOS+0x1e>
     e62:	84 e0       	ldi	r24, 0x04	; 4
     e64:	16 c0       	rjmp	.+44     	; 0xe92 <USB_Host_WaitForIOS+0x4a>
     e66:	21 97       	sbiw	r28, 0x01	; 1
	uint8_t  TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#else
	uint16_t TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#endif

	while (!(((WaitType == USB_HOST_WAITFOR_SetupSent)  && Pipe_IsSETUPSent())  ||
     e68:	11 23       	and	r17, r17
     e6a:	29 f4       	brne	.+10     	; 0xe76 <USB_Host_WaitForIOS+0x2e>
			 *  \return Boolean true if the current pipe is ready for a SETUP packet, false otherwise.
			 */
			static inline bool Pipe_IsSETUPSent(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsSETUPSent(void)
			{
				return ((UPINTX & (1 << TXSTPI)) ? true : false);
     e6c:	80 91 a6 00 	lds	r24, 0x00A6
     e70:	83 ff       	sbrs	r24, 3
     e72:	f1 cf       	rjmp	.-30     	; 0xe56 <USB_Host_WaitForIOS+0xe>
     e74:	0d c0       	rjmp	.+26     	; 0xe90 <USB_Host_WaitForIOS+0x48>
     e76:	11 30       	cpi	r17, 0x01	; 1
     e78:	29 f4       	brne	.+10     	; 0xe84 <USB_Host_WaitForIOS+0x3c>
			 *  \return Boolean true if the current pipe has received an IN packet, false otherwise.
			 */
			static inline bool Pipe_IsINReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsINReceived(void)
			{
				return ((UPINTX & (1 << RXINI)) ? true : false);
     e7a:	80 91 a6 00 	lds	r24, 0x00A6
     e7e:	80 ff       	sbrs	r24, 0
     e80:	ea cf       	rjmp	.-44     	; 0xe56 <USB_Host_WaitForIOS+0xe>
     e82:	06 c0       	rjmp	.+12     	; 0xe90 <USB_Host_WaitForIOS+0x48>
     e84:	12 30       	cpi	r17, 0x02	; 2
     e86:	39 f7       	brne	.-50     	; 0xe56 <USB_Host_WaitForIOS+0xe>
			 *  \return Boolean true if the current pipe is ready for an OUT packet, false otherwise.
			 */
			static inline bool Pipe_IsOUTReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsOUTReady(void)
			{
				return ((UPINTX & (1 << TXOUTI)) ? true : false);
     e88:	80 91 a6 00 	lds	r24, 0x00A6
     e8c:	82 ff       	sbrs	r24, 2
     e8e:	e3 cf       	rjmp	.-58     	; 0xe56 <USB_Host_WaitForIOS+0xe>
     e90:	80 e0       	ldi	r24, 0x00	; 0
		if (!(TimeoutCounter--))
		  return HOST_SENDCONTROL_SoftwareTimeOut;
	}

	return HOST_SENDCONTROL_Successful;
}
     e92:	df 91       	pop	r29
     e94:	cf 91       	pop	r28
     e96:	1f 91       	pop	r17
     e98:	08 95       	ret

00000e9a <USB_Host_SendControlRequest>:

#define  __INCLUDE_FROM_HOSTSTDREQ_C
#include "HostStandardReq.h"

uint8_t USB_Host_SendControlRequest(void* const BufferPtr)
{
     e9a:	ff 92       	push	r15
     e9c:	0f 93       	push	r16
     e9e:	1f 93       	push	r17
     ea0:	cf 93       	push	r28
     ea2:	df 93       	push	r29
     ea4:	18 2f       	mov	r17, r24
     ea6:	09 2f       	mov	r16, r25
			 *  \return Boolean true if the bus is currently suspended, false otherwise.
			 */
			static inline bool USB_Host_IsBusSuspended(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusSuspended(void)
			{
				return ((UHCON & (1 << SOFEN)) ? false : true);
     ea8:	f0 90 9e 00 	lds	r15, 0x009E
	uint8_t* HeaderStream   = (uint8_t*)&USB_ControlRequest;
	uint8_t* DataStream     = (uint8_t*)BufferPtr;
	bool     BusSuspended   = USB_Host_IsBusSuspended();
	uint8_t  ReturnStatus   = HOST_SENDCONTROL_Successful;
	uint16_t DataLen        = USB_ControlRequest.wLength;
     eac:	c0 91 1d 05 	lds	r28, 0x051D
     eb0:	d0 91 1e 05 	lds	r29, 0x051E
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
     eb4:	80 91 9e 00 	lds	r24, 0x009E
     eb8:	81 60       	ori	r24, 0x01	; 1
     eba:	80 93 9e 00 	sts	0x009E, r24

	USB_Host_ResumeBus();

	if ((ReturnStatus = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
     ebe:	81 e0       	ldi	r24, 0x01	; 1
     ec0:	96 db       	rcall	.-2260   	; 0x5ee <USB_Host_WaitMS>
     ec2:	98 2f       	mov	r25, r24
     ec4:	88 23       	and	r24, r24
     ec6:	09 f0       	breq	.+2      	; 0xeca <USB_Host_SendControlRequest+0x30>
     ec8:	d2 c0       	rjmp	.+420    	; 0x106e <USB_Host_SendControlRequest+0x1d4>
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
     eca:	80 91 aa 00 	lds	r24, 0x00AA
     ece:	8f 7c       	andi	r24, 0xCF	; 207
     ed0:	80 93 aa 00 	sts	0x00AA, r24
			 *  flag for the pipe.
			 */
			static inline void Pipe_ClearErrorFlags(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearErrorFlags(void)
			{
				UPERRX = 0;
     ed4:	10 92 f5 00 	sts	0x00F5, r1

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
     ed8:	80 91 a9 00 	lds	r24, 0x00A9
     edc:	8f 7b       	andi	r24, 0xBF	; 191
     ede:	80 93 a9 00 	sts	0x00A9, r24
     ee2:	e7 e1       	ldi	r30, 0x17	; 23
     ee4:	f5 e0       	ldi	r31, 0x05	; 5
	Pipe_ClearErrorFlags();

	Pipe_Unfreeze();

	for (uint8_t HeaderByte = 0; HeaderByte < sizeof(USB_Request_Header_t); HeaderByte++)
	  Pipe_Write_Byte(*(HeaderStream++));
     ee6:	81 91       	ld	r24, Z+
			 *  \param[in] Byte  Next byte to write into the the currently selected pipe's FIFO buffer.
			 */
			static inline void Pipe_Write_Byte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Write_Byte(const uint8_t Byte)
			{
				UPDATX = Byte;
     ee8:	80 93 af 00 	sts	0x00AF, r24
	Pipe_SetPipeToken(PIPE_TOKEN_SETUP);
	Pipe_ClearErrorFlags();

	Pipe_Unfreeze();

	for (uint8_t HeaderByte = 0; HeaderByte < sizeof(USB_Request_Header_t); HeaderByte++)
     eec:	85 e0       	ldi	r24, 0x05	; 5
     eee:	ef 31       	cpi	r30, 0x1F	; 31
     ef0:	f8 07       	cpc	r31, r24
     ef2:	c9 f7       	brne	.-14     	; 0xee6 <USB_Host_SendControlRequest+0x4c>
			 *  \ingroup Group_PipePacketManagement
			 */
			static inline void Pipe_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearSETUP(void)
			{
				UPINTX &= ~((1 << TXSTPI) | (1 << FIFOCON));
     ef4:	80 91 a6 00 	lds	r24, 0x00A6
     ef8:	87 77       	andi	r24, 0x77	; 119
     efa:	80 93 a6 00 	sts	0x00A6, r24
	  Pipe_Write_Byte(*(HeaderStream++));

	Pipe_ClearSETUP();

	if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_SetupSent)) != HOST_SENDCONTROL_Successful)
     efe:	80 e0       	ldi	r24, 0x00	; 0
     f00:	a3 df       	rcall	.-186    	; 0xe48 <USB_Host_WaitForIOS>
     f02:	98 2f       	mov	r25, r24
     f04:	88 23       	and	r24, r24
     f06:	09 f0       	breq	.+2      	; 0xf0a <USB_Host_SendControlRequest+0x70>
     f08:	b2 c0       	rjmp	.+356    	; 0x106e <USB_Host_SendControlRequest+0x1d4>

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
     f0a:	80 91 a9 00 	lds	r24, 0x00A9
     f0e:	80 64       	ori	r24, 0x40	; 64
     f10:	80 93 a9 00 	sts	0x00A9, r24
	  goto End_Of_Control_Send;

	Pipe_Freeze();

	if ((ReturnStatus = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
     f14:	81 e0       	ldi	r24, 0x01	; 1
     f16:	6b db       	rcall	.-2346   	; 0x5ee <USB_Host_WaitMS>
     f18:	98 2f       	mov	r25, r24
     f1a:	88 23       	and	r24, r24
     f1c:	09 f0       	breq	.+2      	; 0xf20 <USB_Host_SendControlRequest+0x86>
     f1e:	a7 c0       	rjmp	.+334    	; 0x106e <USB_Host_SendControlRequest+0x1d4>
#include "HostStandardReq.h"

uint8_t USB_Host_SendControlRequest(void* const BufferPtr)
{
	uint8_t* HeaderStream   = (uint8_t*)&USB_ControlRequest;
	uint8_t* DataStream     = (uint8_t*)BufferPtr;
     f20:	21 2f       	mov	r18, r17
     f22:	30 2f       	mov	r19, r16
     f24:	c9 01       	movw	r24, r18
     f26:	8c 01       	movw	r16, r24
	Pipe_Freeze();

	if ((ReturnStatus = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
	  goto End_Of_Control_Send;

	if ((USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_DIRECTION) == REQDIR_DEVICETOHOST)
     f28:	80 91 17 05 	lds	r24, 0x0517
     f2c:	87 ff       	sbrs	r24, 7
     f2e:	52 c0       	rjmp	.+164    	; 0xfd4 <USB_Host_SendControlRequest+0x13a>
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
     f30:	80 91 aa 00 	lds	r24, 0x00AA
     f34:	8f 7c       	andi	r24, 0xCF	; 207
     f36:	80 61       	ori	r24, 0x10	; 16
     f38:	80 93 aa 00 	sts	0x00AA, r24
	{
		Pipe_SetPipeToken(PIPE_TOKEN_IN);

		if (DataStream != NULL)
     f3c:	01 15       	cp	r16, r1
     f3e:	11 05       	cpc	r17, r1
     f40:	69 f5       	brne	.+90     	; 0xf9c <USB_Host_SendControlRequest+0x102>
     f42:	2e c0       	rjmp	.+92     	; 0xfa0 <USB_Host_SendControlRequest+0x106>

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
     f44:	80 91 a9 00 	lds	r24, 0x00A9
     f48:	8f 7b       	andi	r24, 0xBF	; 191
     f4a:	80 93 a9 00 	sts	0x00A9, r24
		{
			while (DataLen)
			{
				Pipe_Unfreeze();

				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_InReceived)) != HOST_SENDCONTROL_Successful)
     f4e:	81 e0       	ldi	r24, 0x01	; 1
     f50:	7b df       	rcall	.-266    	; 0xe48 <USB_Host_WaitForIOS>
     f52:	98 2f       	mov	r25, r24
     f54:	88 23       	and	r24, r24
     f56:	09 f0       	breq	.+2      	; 0xf5a <USB_Host_SendControlRequest+0xc0>
     f58:	8a c0       	rjmp	.+276    	; 0x106e <USB_Host_SendControlRequest+0x1d4>
			 *  \return Total number of bytes in the currently selected Pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
     f5a:	80 91 f6 00 	lds	r24, 0x00F6
     f5e:	90 91 f7 00 	lds	r25, 0x00F7
				  goto End_Of_Control_Send;

				if (!(Pipe_BytesInPipe()))
     f62:	89 2b       	or	r24, r25
     f64:	49 f4       	brne	.+18     	; 0xf78 <USB_Host_SendControlRequest+0xde>
     f66:	c0 e0       	ldi	r28, 0x00	; 0
     f68:	d0 e0       	ldi	r29, 0x00	; 0
     f6a:	06 c0       	rjmp	.+12     	; 0xf78 <USB_Host_SendControlRequest+0xde>
			 *  \return Next byte in the currently selected pipe's FIFO buffer.
			 */
			static inline uint8_t Pipe_Read_Byte(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_Read_Byte(void)
			{
				return UPDATX;
     f6c:	80 91 af 00 	lds	r24, 0x00AF
				  DataLen = 0;

				while (Pipe_BytesInPipe() && DataLen)
				{
					*(DataStream++) = Pipe_Read_Byte();
     f70:	f8 01       	movw	r30, r16
     f72:	81 93       	st	Z+, r24
     f74:	8f 01       	movw	r16, r30
					DataLen--;
     f76:	21 97       	sbiw	r28, 0x01	; 1
			 *  \return Total number of bytes in the currently selected Pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
     f78:	80 91 f6 00 	lds	r24, 0x00F6
     f7c:	90 91 f7 00 	lds	r25, 0x00F7
				  goto End_Of_Control_Send;

				if (!(Pipe_BytesInPipe()))
				  DataLen = 0;

				while (Pipe_BytesInPipe() && DataLen)
     f80:	89 2b       	or	r24, r25
     f82:	11 f0       	breq	.+4      	; 0xf88 <USB_Host_SendControlRequest+0xee>
     f84:	20 97       	sbiw	r28, 0x00	; 0
     f86:	91 f7       	brne	.-28     	; 0xf6c <USB_Host_SendControlRequest+0xd2>

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
     f88:	80 91 a9 00 	lds	r24, 0x00A9
     f8c:	80 64       	ori	r24, 0x40	; 64
     f8e:	80 93 a9 00 	sts	0x00A9, r24
			 *  \ingroup Group_PipePacketManagement
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
     f92:	80 91 a6 00 	lds	r24, 0x00A6
     f96:	8e 77       	andi	r24, 0x7E	; 126
     f98:	80 93 a6 00 	sts	0x00A6, r24
	{
		Pipe_SetPipeToken(PIPE_TOKEN_IN);

		if (DataStream != NULL)
		{
			while (DataLen)
     f9c:	20 97       	sbiw	r28, 0x00	; 0
     f9e:	91 f6       	brne	.-92     	; 0xf44 <USB_Host_SendControlRequest+0xaa>
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
     fa0:	80 91 aa 00 	lds	r24, 0x00AA
     fa4:	8f 7c       	andi	r24, 0xCF	; 207
     fa6:	80 62       	ori	r24, 0x20	; 32
     fa8:	80 93 aa 00 	sts	0x00AA, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
     fac:	80 91 a9 00 	lds	r24, 0x00A9
     fb0:	8f 7b       	andi	r24, 0xBF	; 191
     fb2:	80 93 a9 00 	sts	0x00A9, r24
		}

		Pipe_SetPipeToken(PIPE_TOKEN_OUT);
		Pipe_Unfreeze();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
     fb6:	82 e0       	ldi	r24, 0x02	; 2
     fb8:	47 df       	rcall	.-370    	; 0xe48 <USB_Host_WaitForIOS>
     fba:	98 2f       	mov	r25, r24
     fbc:	88 23       	and	r24, r24
     fbe:	09 f0       	breq	.+2      	; 0xfc2 <USB_Host_SendControlRequest+0x128>
     fc0:	56 c0       	rjmp	.+172    	; 0x106e <USB_Host_SendControlRequest+0x1d4>
			 *  \ingroup Group_PipePacketManagement
			 */
			static inline void Pipe_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearOUT(void)
			{
				UPINTX &= ~((1 << TXOUTI) | (1 << FIFOCON));
     fc2:	80 91 a6 00 	lds	r24, 0x00A6
     fc6:	8b 77       	andi	r24, 0x7B	; 123
     fc8:	80 93 a6 00 	sts	0x00A6, r24
		  goto End_Of_Control_Send;

		Pipe_ClearOUT();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
     fcc:	82 e0       	ldi	r24, 0x02	; 2
     fce:	3c df       	rcall	.-392    	; 0xe48 <USB_Host_WaitForIOS>
     fd0:	98 2f       	mov	r25, r24
     fd2:	4d c0       	rjmp	.+154    	; 0x106e <USB_Host_SendControlRequest+0x1d4>
		  goto End_Of_Control_Send;
	}
	else
	{
		if (DataStream != NULL)
     fd4:	01 15       	cp	r16, r1
     fd6:	11 05       	cpc	r17, r1
     fd8:	a9 f1       	breq	.+106    	; 0x1044 <USB_Host_SendControlRequest+0x1aa>
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
     fda:	80 91 aa 00 	lds	r24, 0x00AA
     fde:	8f 7c       	andi	r24, 0xCF	; 207
     fe0:	80 62       	ori	r24, 0x20	; 32
     fe2:	80 93 aa 00 	sts	0x00AA, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
     fe6:	80 91 a9 00 	lds	r24, 0x00A9
     fea:	8f 7b       	andi	r24, 0xBF	; 191
     fec:	80 93 a9 00 	sts	0x00A9, r24
     ff0:	1d c0       	rjmp	.+58     	; 0x102c <USB_Host_SendControlRequest+0x192>
			Pipe_SetPipeToken(PIPE_TOKEN_OUT);
			Pipe_Unfreeze();

			while (DataLen)
			{
				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
     ff2:	82 e0       	ldi	r24, 0x02	; 2
     ff4:	29 df       	rcall	.-430    	; 0xe48 <USB_Host_WaitForIOS>
     ff6:	98 2f       	mov	r25, r24
     ff8:	88 23       	and	r24, r24
     ffa:	c9 f5       	brne	.+114    	; 0x106e <USB_Host_SendControlRequest+0x1d4>
				  goto End_Of_Control_Send;

				while (DataLen && (Pipe_BytesInPipe() < USB_ControlPipeSize))
     ffc:	80 91 2b 01 	lds	r24, 0x012B
    1000:	28 2f       	mov	r18, r24
    1002:	30 e0       	ldi	r19, 0x00	; 0
    1004:	07 c0       	rjmp	.+14     	; 0x1014 <USB_Host_SendControlRequest+0x17a>
				{
					Pipe_Write_Byte(*(DataStream++));
    1006:	f8 01       	movw	r30, r16
    1008:	81 91       	ld	r24, Z+
    100a:	8f 01       	movw	r16, r30
			 *  \param[in] Byte  Next byte to write into the the currently selected pipe's FIFO buffer.
			 */
			static inline void Pipe_Write_Byte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Write_Byte(const uint8_t Byte)
			{
				UPDATX = Byte;
    100c:	80 93 af 00 	sts	0x00AF, r24
					DataLen--;
    1010:	21 97       	sbiw	r28, 0x01	; 1
			while (DataLen)
			{
				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
				  goto End_Of_Control_Send;

				while (DataLen && (Pipe_BytesInPipe() < USB_ControlPipeSize))
    1012:	39 f0       	breq	.+14     	; 0x1022 <USB_Host_SendControlRequest+0x188>
			 *  \return Total number of bytes in the currently selected Pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
    1014:	80 91 f6 00 	lds	r24, 0x00F6
    1018:	90 91 f7 00 	lds	r25, 0x00F7
    101c:	82 17       	cp	r24, r18
    101e:	93 07       	cpc	r25, r19
    1020:	90 f3       	brcs	.-28     	; 0x1006 <USB_Host_SendControlRequest+0x16c>
			 *  \ingroup Group_PipePacketManagement
			 */
			static inline void Pipe_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearOUT(void)
			{
				UPINTX &= ~((1 << TXOUTI) | (1 << FIFOCON));
    1022:	80 91 a6 00 	lds	r24, 0x00A6
    1026:	8b 77       	andi	r24, 0x7B	; 123
    1028:	80 93 a6 00 	sts	0x00A6, r24
		if (DataStream != NULL)
		{
			Pipe_SetPipeToken(PIPE_TOKEN_OUT);
			Pipe_Unfreeze();

			while (DataLen)
    102c:	20 97       	sbiw	r28, 0x00	; 0
    102e:	09 f7       	brne	.-62     	; 0xff2 <USB_Host_SendControlRequest+0x158>
				}

				Pipe_ClearOUT();
			}

			if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    1030:	82 e0       	ldi	r24, 0x02	; 2
    1032:	0a df       	rcall	.-492    	; 0xe48 <USB_Host_WaitForIOS>
    1034:	98 2f       	mov	r25, r24
    1036:	88 23       	and	r24, r24
    1038:	d1 f4       	brne	.+52     	; 0x106e <USB_Host_SendControlRequest+0x1d4>

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    103a:	80 91 a9 00 	lds	r24, 0x00A9
    103e:	80 64       	ori	r24, 0x40	; 64
    1040:	80 93 a9 00 	sts	0x00A9, r24
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    1044:	80 91 aa 00 	lds	r24, 0x00AA
    1048:	8f 7c       	andi	r24, 0xCF	; 207
    104a:	80 61       	ori	r24, 0x10	; 16
    104c:	80 93 aa 00 	sts	0x00AA, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    1050:	80 91 a9 00 	lds	r24, 0x00A9
    1054:	8f 7b       	andi	r24, 0xBF	; 191
    1056:	80 93 a9 00 	sts	0x00A9, r24
		}

		Pipe_SetPipeToken(PIPE_TOKEN_IN);
		Pipe_Unfreeze();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_InReceived)) != HOST_SENDCONTROL_Successful)
    105a:	81 e0       	ldi	r24, 0x01	; 1
    105c:	f5 de       	rcall	.-534    	; 0xe48 <USB_Host_WaitForIOS>
    105e:	98 2f       	mov	r25, r24
    1060:	88 23       	and	r24, r24
    1062:	29 f4       	brne	.+10     	; 0x106e <USB_Host_SendControlRequest+0x1d4>
			 *  \ingroup Group_PipePacketManagement
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
    1064:	80 91 a6 00 	lds	r24, 0x00A6
    1068:	8e 77       	andi	r24, 0x7E	; 126
    106a:	80 93 a6 00 	sts	0x00A6, r24

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    106e:	80 91 a9 00 	lds	r24, 0x00A9
    1072:	80 64       	ori	r24, 0x40	; 64
    1074:	80 93 a9 00 	sts	0x00A9, r24
	}

End_Of_Control_Send:
	Pipe_Freeze();

	if (BusSuspended)
    1078:	f0 fc       	sbrc	r15, 0
    107a:	05 c0       	rjmp	.+10     	; 0x1086 <USB_Host_SendControlRequest+0x1ec>
			 *  messages to the device.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				UHCON &= ~(1 << SOFEN);
    107c:	80 91 9e 00 	lds	r24, 0x009E
    1080:	8e 7f       	andi	r24, 0xFE	; 254
    1082:	80 93 9e 00 	sts	0x009E, r24
			 *  \param[in] PipeNumber  Index of the pipe to reset.
			 */
			static inline void Pipe_ResetPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ResetPipe(const uint8_t PipeNumber)
			{
				UPRST = (1 << PipeNumber);
    1086:	81 e0       	ldi	r24, 0x01	; 1
    1088:	80 93 a8 00 	sts	0x00A8, r24
				UPRST = 0;
    108c:	10 92 a8 00 	sts	0x00A8, r1
	  USB_Host_SuspendBus();

	Pipe_ResetPipe(PIPE_CONTROLPIPE);

	return ReturnStatus;
}
    1090:	89 2f       	mov	r24, r25
    1092:	df 91       	pop	r29
    1094:	cf 91       	pop	r28
    1096:	1f 91       	pop	r17
    1098:	0f 91       	pop	r16
    109a:	ff 90       	pop	r15
    109c:	08 95       	ret

0000109e <Pipe_Read_Stream_LE>:
uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE Buffer,
                            uint16_t Length
                            __CALLBACK_PARAM)
{
    109e:	df 92       	push	r13
    10a0:	ef 92       	push	r14
    10a2:	ff 92       	push	r15
    10a4:	0f 93       	push	r16
    10a6:	1f 93       	push	r17
    10a8:	cf 93       	push	r28
    10aa:	df 93       	push	r29
    10ac:	18 2f       	mov	r17, r24
    10ae:	09 2f       	mov	r16, r25
    10b0:	eb 01       	movw	r28, r22
    10b2:	7a 01       	movw	r14, r20
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    10b4:	80 91 aa 00 	lds	r24, 0x00AA
    10b8:	8f 7c       	andi	r24, 0xCF	; 207
    10ba:	80 61       	ori	r24, 0x10	; 16
    10bc:	80 93 aa 00 	sts	0x00AA, r24
	uint8_t* DataStream = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	uint8_t  ErrorCode;

	Pipe_SetPipeToken(TEMPLATE_TOKEN);

	if ((ErrorCode = Pipe_WaitUntilReady()))
    10c0:	eb dc       	rcall	.-1578   	; 0xa98 <Pipe_WaitUntilReady>
    10c2:	d8 2e       	mov	r13, r24
    10c4:	88 23       	and	r24, r24
    10c6:	19 f5       	brne	.+70     	; 0x110e <Pipe_Read_Stream_LE+0x70>
uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE Buffer,
                            uint16_t Length
                            __CALLBACK_PARAM)
{
	uint8_t* DataStream = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
    10c8:	81 2f       	mov	r24, r17
    10ca:	90 2f       	mov	r25, r16
    10cc:	9c 01       	movw	r18, r24
    10ce:	89 01       	movw	r16, r18
    10d0:	1c c0       	rjmp	.+56     	; 0x110a <Pipe_Read_Stream_LE+0x6c>
			 *  \return Boolean true if the currently selected pipe may be read from or written to, depending on its direction.
			 */
			static inline bool Pipe_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsReadWriteAllowed(void)
			{
				return ((UPINTX & (1 << RWAL)) ? true : false);
    10d2:	80 91 a6 00 	lds	r24, 0x00A6
	}
	#endif

	while (Length)
	{
		if (!(Pipe_IsReadWriteAllowed()))
    10d6:	85 fd       	sbrc	r24, 5
    10d8:	12 c0       	rjmp	.+36     	; 0x10fe <Pipe_Read_Stream_LE+0x60>
			 *  \ingroup Group_PipePacketManagement
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
    10da:	80 91 a6 00 	lds	r24, 0x00A6
    10de:	8e 77       	andi	r24, 0x7E	; 126
    10e0:	80 93 a6 00 	sts	0x00A6, r24
		{
			TEMPLATE_CLEAR_PIPE();

			#if !defined(NO_STREAM_CALLBACKS)
			if ((Callback != NULL) && (Callback() == STREAMCALLBACK_Abort))
    10e4:	e1 14       	cp	r14, r1
    10e6:	f1 04       	cpc	r15, r1
    10e8:	31 f0       	breq	.+12     	; 0x10f6 <Pipe_Read_Stream_LE+0x58>
    10ea:	f7 01       	movw	r30, r14
    10ec:	09 95       	icall
    10ee:	81 30       	cpi	r24, 0x01	; 1
    10f0:	11 f4       	brne	.+4      	; 0x10f6 <Pipe_Read_Stream_LE+0x58>
    10f2:	84 e0       	ldi	r24, 0x04	; 4
    10f4:	0d c0       	rjmp	.+26     	; 0x1110 <Pipe_Read_Stream_LE+0x72>
			  return PIPE_RWSTREAM_CallbackAborted;
			#endif

			if ((ErrorCode = Pipe_WaitUntilReady()))
    10f6:	d0 dc       	rcall	.-1632   	; 0xa98 <Pipe_WaitUntilReady>
    10f8:	88 23       	and	r24, r24
    10fa:	39 f0       	breq	.+14     	; 0x110a <Pipe_Read_Stream_LE+0x6c>
    10fc:	09 c0       	rjmp	.+18     	; 0x1110 <Pipe_Read_Stream_LE+0x72>
			 *  \return Next byte in the currently selected pipe's FIFO buffer.
			 */
			static inline uint8_t Pipe_Read_Byte(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_Read_Byte(void)
			{
				return UPDATX;
    10fe:	80 91 af 00 	lds	r24, 0x00AF
			  return ErrorCode;
		}
		else
		{
			TEMPLATE_TRANSFER_BYTE(DataStream);
    1102:	f8 01       	movw	r30, r16
    1104:	81 93       	st	Z+, r24
    1106:	8f 01       	movw	r16, r30
			Length--;
    1108:	21 97       	sbiw	r28, 0x01	; 1
				} while (Length >= 8);
		}
	}
	#endif

	while (Length)
    110a:	20 97       	sbiw	r28, 0x00	; 0
    110c:	11 f7       	brne	.-60     	; 0x10d2 <Pipe_Read_Stream_LE+0x34>
    110e:	8d 2d       	mov	r24, r13
			Length--;
		}
	}

	return PIPE_RWSTREAM_NoError;
}
    1110:	df 91       	pop	r29
    1112:	cf 91       	pop	r28
    1114:	1f 91       	pop	r17
    1116:	0f 91       	pop	r16
    1118:	ff 90       	pop	r15
    111a:	ef 90       	pop	r14
    111c:	df 90       	pop	r13
    111e:	08 95       	ret

00001120 <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
    1120:	ff 92       	push	r15
    1122:	0f 93       	push	r16
    1124:	1f 93       	push	r17
			 *  \return Index of the currently selected pipe.
			 */
			static inline uint8_t Pipe_GetCurrentPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetCurrentPipe(void)
			{
				return (UPNUM & PIPE_PIPENUM_MASK);
    1126:	07 ea       	ldi	r16, 0xA7	; 167
    1128:	10 e0       	ldi	r17, 0x00	; 0
    112a:	f8 01       	movw	r30, r16
    112c:	f0 80       	ld	r15, Z
    112e:	f7 e0       	ldi	r31, 0x07	; 7
    1130:	ff 22       	and	r15, r31
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
    1132:	f8 01       	movw	r30, r16
    1134:	10 82       	st	Z, r1
{
	uint8_t PrevPipe = Pipe_GetCurrentPipe();

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	USB_Host_ProcessNextHostState();
    1136:	0a db       	rcall	.-2540   	; 0x74c <USB_Host_ProcessNextHostState>
    1138:	f8 01       	movw	r30, r16
    113a:	f0 82       	st	Z, r15
		if (USB_CurrentMode == USB_MODE_Device)
		  USB_DeviceTask();
		else if (USB_CurrentMode == USB_MODE_Host)
		  USB_HostTask();
	#endif
}
    113c:	1f 91       	pop	r17
    113e:	0f 91       	pop	r16
    1140:	ff 90       	pop	r15
    1142:	08 95       	ret

00001144 <USB_GetHIDReportItemInfo>:
	return HID_PARSE_Successful;
}

bool USB_GetHIDReportItemInfo(const uint8_t* ReportData,
                              HID_ReportItem_t* const ReportItem)
{
    1144:	cf 92       	push	r12
    1146:	df 92       	push	r13
    1148:	ef 92       	push	r14
    114a:	ff 92       	push	r15
    114c:	0f 93       	push	r16
    114e:	1f 93       	push	r17
    1150:	cf 93       	push	r28
    1152:	df 93       	push	r29
    1154:	6c 01       	movw	r12, r24
    1156:	eb 01       	movw	r28, r22
	uint16_t DataBitsRem  = ReportItem->Attributes.BitSize;
    1158:	28 85       	ldd	r18, Y+8	; 0x08
	uint16_t CurrentBit   = ReportItem->BitOffset;
    115a:	e8 80       	ld	r14, Y
    115c:	f9 80       	ldd	r15, Y+1	; 0x01
	uint32_t BitMask      = (1 << 0);

	if (ReportItem->ReportID)
    115e:	9d 81       	ldd	r25, Y+5	; 0x05
    1160:	99 23       	and	r25, r25
    1162:	49 f0       	breq	.+18     	; 0x1176 <USB_GetHIDReportItemInfo+0x32>
	{
		if (ReportItem->ReportID != ReportData[0])
    1164:	f6 01       	movw	r30, r12
    1166:	80 81       	ld	r24, Z
    1168:	98 17       	cp	r25, r24
    116a:	11 f0       	breq	.+4      	; 0x1170 <USB_GetHIDReportItemInfo+0x2c>
    116c:	80 e0       	ldi	r24, 0x00	; 0
    116e:	43 c0       	rjmp	.+134    	; 0x11f6 <USB_GetHIDReportItemInfo+0xb2>
		  return false;

		ReportData++;
    1170:	08 94       	sec
    1172:	c1 1c       	adc	r12, r1
    1174:	d1 1c       	adc	r13, r1
}

bool USB_GetHIDReportItemInfo(const uint8_t* ReportData,
                              HID_ReportItem_t* const ReportItem)
{
	uint16_t DataBitsRem  = ReportItem->Attributes.BitSize;
    1176:	02 2f       	mov	r16, r18
    1178:	10 e0       	ldi	r17, 0x00	; 0
		  return false;

		ReportData++;
	}

	ReportItem->PreviousValue = ReportItem->Value;
    117a:	8a a1       	ldd	r24, Y+34	; 0x22
    117c:	9b a1       	ldd	r25, Y+35	; 0x23
    117e:	ac a1       	ldd	r26, Y+36	; 0x24
    1180:	bd a1       	ldd	r27, Y+37	; 0x25
    1182:	8e a3       	std	Y+38, r24	; 0x26
    1184:	9f a3       	std	Y+39, r25	; 0x27
    1186:	a8 a7       	std	Y+40, r26	; 0x28
    1188:	b9 a7       	std	Y+41, r27	; 0x29
	ReportItem->Value = 0;
    118a:	1a a2       	std	Y+34, r1	; 0x22
    118c:	1b a2       	std	Y+35, r1	; 0x23
    118e:	1c a2       	std	Y+36, r1	; 0x24
    1190:	1d a2       	std	Y+37, r1	; 0x25
    1192:	41 e0       	ldi	r20, 0x01	; 1
    1194:	50 e0       	ldi	r21, 0x00	; 0
    1196:	60 e0       	ldi	r22, 0x00	; 0
    1198:	70 e0       	ldi	r23, 0x00	; 0
    119a:	29 c0       	rjmp	.+82     	; 0x11ee <USB_GetHIDReportItemInfo+0xaa>

	while (DataBitsRem--)
	{
		if (ReportData[CurrentBit / 8] & (1 << (CurrentBit % 8)))
    119c:	f7 01       	movw	r30, r14
    119e:	93 e0       	ldi	r25, 0x03	; 3
    11a0:	f6 95       	lsr	r31
    11a2:	e7 95       	ror	r30
    11a4:	9a 95       	dec	r25
    11a6:	e1 f7       	brne	.-8      	; 0x11a0 <USB_GetHIDReportItemInfo+0x5c>
    11a8:	ec 0d       	add	r30, r12
    11aa:	fd 1d       	adc	r31, r13
    11ac:	80 81       	ld	r24, Z
    11ae:	90 e0       	ldi	r25, 0x00	; 0
    11b0:	97 01       	movw	r18, r14
    11b2:	27 70       	andi	r18, 0x07	; 7
    11b4:	30 70       	andi	r19, 0x00	; 0
    11b6:	02 c0       	rjmp	.+4      	; 0x11bc <USB_GetHIDReportItemInfo+0x78>
    11b8:	95 95       	asr	r25
    11ba:	87 95       	ror	r24
    11bc:	2a 95       	dec	r18
    11be:	e2 f7       	brpl	.-8      	; 0x11b8 <USB_GetHIDReportItemInfo+0x74>
    11c0:	80 ff       	sbrs	r24, 0
    11c2:	0c c0       	rjmp	.+24     	; 0x11dc <USB_GetHIDReportItemInfo+0x98>
		  ReportItem->Value |= BitMask;
    11c4:	8a a1       	ldd	r24, Y+34	; 0x22
    11c6:	9b a1       	ldd	r25, Y+35	; 0x23
    11c8:	ac a1       	ldd	r26, Y+36	; 0x24
    11ca:	bd a1       	ldd	r27, Y+37	; 0x25
    11cc:	84 2b       	or	r24, r20
    11ce:	95 2b       	or	r25, r21
    11d0:	a6 2b       	or	r26, r22
    11d2:	b7 2b       	or	r27, r23
    11d4:	8a a3       	std	Y+34, r24	; 0x22
    11d6:	9b a3       	std	Y+35, r25	; 0x23
    11d8:	ac a3       	std	Y+36, r26	; 0x24
    11da:	bd a3       	std	Y+37, r27	; 0x25

		CurrentBit++;
    11dc:	08 94       	sec
    11de:	e1 1c       	adc	r14, r1
    11e0:	f1 1c       	adc	r15, r1
		BitMask <<= 1;
    11e2:	44 0f       	add	r20, r20
    11e4:	55 1f       	adc	r21, r21
    11e6:	66 1f       	adc	r22, r22
    11e8:	77 1f       	adc	r23, r23
    11ea:	01 50       	subi	r16, 0x01	; 1
    11ec:	10 40       	sbci	r17, 0x00	; 0
	}

	ReportItem->PreviousValue = ReportItem->Value;
	ReportItem->Value = 0;

	while (DataBitsRem--)
    11ee:	01 15       	cp	r16, r1
    11f0:	11 05       	cpc	r17, r1
    11f2:	a1 f6       	brne	.-88     	; 0x119c <USB_GetHIDReportItemInfo+0x58>
    11f4:	81 e0       	ldi	r24, 0x01	; 1
		CurrentBit++;
		BitMask <<= 1;
	}

	return true;
}
    11f6:	df 91       	pop	r29
    11f8:	cf 91       	pop	r28
    11fa:	1f 91       	pop	r17
    11fc:	0f 91       	pop	r16
    11fe:	ff 90       	pop	r15
    1200:	ef 90       	pop	r14
    1202:	df 90       	pop	r13
    1204:	cf 90       	pop	r12
    1206:	08 95       	ret

00001208 <USB_GetHIDReportSize>:
}

uint16_t USB_GetHIDReportSize(HID_ReportInfo_t* const ParserData,
                              const uint8_t ReportID,
                              const uint8_t ReportType)
{
    1208:	e4 2f       	mov	r30, r20
    120a:	f0 e0       	ldi	r31, 0x00	; 0
    120c:	ee 0f       	add	r30, r30
    120e:	ff 1f       	adc	r31, r31
    1210:	ef 56       	subi	r30, 0x6F	; 111
    1212:	fc 4f       	sbci	r31, 0xFC	; 252
    1214:	e8 0f       	add	r30, r24
    1216:	f9 1f       	adc	r31, r25
    1218:	dc 01       	movw	r26, r24
    121a:	a0 57       	subi	r26, 0x70	; 112
    121c:	bc 4f       	sbci	r27, 0xFC	; 252
    121e:	90 e0       	ldi	r25, 0x00	; 0
	for (uint8_t i = 0; i < HID_MAX_REPORT_IDS; i++)
	{
		uint16_t ReportSizeBits = ParserData->ReportIDSizes[i].ReportSizeBits[ReportType];
    1220:	20 81       	ld	r18, Z
    1222:	31 81       	ldd	r19, Z+1	; 0x01

		if (ParserData->ReportIDSizes[i].ReportID == ReportID)
    1224:	8c 91       	ld	r24, X
    1226:	86 17       	cp	r24, r22
    1228:	89 f4       	brne	.+34     	; 0x124c <USB_GetHIDReportSize+0x44>
		  return ((ReportSizeBits >> 3) + ((ReportSizeBits & 0x07) ? 1 : 0));
    122a:	40 e0       	ldi	r20, 0x00	; 0
    122c:	50 e0       	ldi	r21, 0x00	; 0
    122e:	c9 01       	movw	r24, r18
    1230:	87 70       	andi	r24, 0x07	; 7
    1232:	90 70       	andi	r25, 0x00	; 0
    1234:	89 2b       	or	r24, r25
    1236:	11 f0       	breq	.+4      	; 0x123c <USB_GetHIDReportSize+0x34>
    1238:	41 e0       	ldi	r20, 0x01	; 1
    123a:	50 e0       	ldi	r21, 0x00	; 0
    123c:	63 e0       	ldi	r22, 0x03	; 3
    123e:	36 95       	lsr	r19
    1240:	27 95       	ror	r18
    1242:	6a 95       	dec	r22
    1244:	e1 f7       	brne	.-8      	; 0x123e <USB_GetHIDReportSize+0x36>
    1246:	24 0f       	add	r18, r20
    1248:	35 1f       	adc	r19, r21
    124a:	07 c0       	rjmp	.+14     	; 0x125a <USB_GetHIDReportSize+0x52>

uint16_t USB_GetHIDReportSize(HID_ReportInfo_t* const ParserData,
                              const uint8_t ReportID,
                              const uint8_t ReportType)
{
	for (uint8_t i = 0; i < HID_MAX_REPORT_IDS; i++)
    124c:	9f 5f       	subi	r25, 0xFF	; 255
    124e:	37 96       	adiw	r30, 0x07	; 7
    1250:	17 96       	adiw	r26, 0x07	; 7
    1252:	9a 30       	cpi	r25, 0x0A	; 10
    1254:	29 f7       	brne	.-54     	; 0x1220 <USB_GetHIDReportSize+0x18>
    1256:	20 e0       	ldi	r18, 0x00	; 0
    1258:	30 e0       	ldi	r19, 0x00	; 0
		if (ParserData->ReportIDSizes[i].ReportID == ReportID)
		  return ((ReportSizeBits >> 3) + ((ReportSizeBits & 0x07) ? 1 : 0));
	}

	return 0;
}
    125a:	c9 01       	movw	r24, r18
    125c:	08 95       	ret

0000125e <USB_ProcessHIDReport>:
#include "HIDParser.h"

uint8_t USB_ProcessHIDReport(const uint8_t* ReportData,
                             uint16_t ReportSize,
                             HID_ReportInfo_t* const ParserData)
{
    125e:	2f 92       	push	r2
    1260:	3f 92       	push	r3
    1262:	4f 92       	push	r4
    1264:	5f 92       	push	r5
    1266:	6f 92       	push	r6
    1268:	7f 92       	push	r7
    126a:	8f 92       	push	r8
    126c:	9f 92       	push	r9
    126e:	af 92       	push	r10
    1270:	bf 92       	push	r11
    1272:	cf 92       	push	r12
    1274:	df 92       	push	r13
    1276:	ef 92       	push	r14
    1278:	ff 92       	push	r15
    127a:	0f 93       	push	r16
    127c:	1f 93       	push	r17
    127e:	df 93       	push	r29
    1280:	cf 93       	push	r28
    1282:	cd b7       	in	r28, 0x3d	; 61
    1284:	de b7       	in	r29, 0x3e	; 62
    1286:	c5 59       	subi	r28, 0x95	; 149
    1288:	d0 40       	sbci	r29, 0x00	; 0
    128a:	0f b6       	in	r0, 0x3f	; 63
    128c:	f8 94       	cli
    128e:	de bf       	out	0x3e, r29	; 62
    1290:	0f be       	out	0x3f, r0	; 63
    1292:	cd bf       	out	0x3d, r28	; 61
    1294:	cf 57       	subi	r28, 0x7F	; 127
    1296:	df 4f       	sbci	r29, 0xFF	; 255
    1298:	99 83       	std	Y+1, r25	; 0x01
    129a:	88 83       	st	Y, r24
    129c:	c1 58       	subi	r28, 0x81	; 129
    129e:	d0 40       	sbci	r29, 0x00	; 0
    12a0:	cd 57       	subi	r28, 0x7D	; 125
    12a2:	df 4f       	sbci	r29, 0xFF	; 255
    12a4:	79 83       	std	Y+1, r23	; 0x01
    12a6:	68 83       	st	Y, r22
    12a8:	c3 58       	subi	r28, 0x83	; 131
    12aa:	d0 40       	sbci	r29, 0x00	; 0
    12ac:	1a 01       	movw	r2, r20
	HID_StateTable_t      StateTable[HID_STATETABLE_STACK_DEPTH];
	HID_StateTable_t*     CurrStateTable          = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath      = NULL;
	HID_ReportSizeInfo_t* CurrReportIDInfo        = &ParserData->ReportIDSizes[0];
    12ae:	80 e9       	ldi	r24, 0x90	; 144
    12b0:	48 2e       	mov	r4, r24
    12b2:	83 e0       	ldi	r24, 0x03	; 3
    12b4:	58 2e       	mov	r5, r24
    12b6:	44 0e       	add	r4, r20
    12b8:	55 1e       	adc	r5, r21
	uint16_t              UsageList[HID_USAGE_STACK_DEPTH];
	uint8_t               UsageListSize           = 0;
	HID_MinMax_t          UsageMinMax             = {0, 0};

	memset(ParserData,       0x00, sizeof(HID_ReportInfo_t));
    12ba:	89 ed       	ldi	r24, 0xD9	; 217
    12bc:	93 e0       	ldi	r25, 0x03	; 3
    12be:	da 01       	movw	r26, r20
    12c0:	fc 01       	movw	r30, r24
    12c2:	1d 92       	st	X+, r1
    12c4:	31 97       	sbiw	r30, 0x01	; 1
    12c6:	e9 f7       	brne	.-6      	; 0x12c2 <USB_ProcessHIDReport+0x64>
	memset(CurrStateTable,   0x00, sizeof(HID_StateTable_t));
    12c8:	fe 01       	movw	r30, r28
    12ca:	fb 96       	adiw	r30, 0x3b	; 59
    12cc:	8c e1       	ldi	r24, 0x1C	; 28
    12ce:	df 01       	movw	r26, r30
    12d0:	1d 92       	st	X+, r1
    12d2:	8a 95       	dec	r24
    12d4:	e9 f7       	brne	.-6      	; 0x12d0 <USB_ProcessHIDReport+0x72>
	memset(CurrReportIDInfo, 0x00, sizeof(HID_ReportSizeInfo_t));
    12d6:	87 e0       	ldi	r24, 0x07	; 7
    12d8:	d2 01       	movw	r26, r4
    12da:	1d 92       	st	X+, r1
    12dc:	8a 95       	dec	r24
    12de:	e9 f7       	brne	.-6      	; 0x12da <USB_ProcessHIDReport+0x7c>

	ParserData->TotalDeviceReports = 1;
    12e0:	da 01       	movw	r26, r20
    12e2:	a1 57       	subi	r26, 0x71	; 113
    12e4:	bc 4f       	sbci	r27, 0xFC	; 252
    12e6:	81 e0       	ldi	r24, 0x01	; 1
    12e8:	8c 93       	st	X, r24
				UsageMinMax.Maximum = ReportItemData;
				break;
			case (TYPE_MAIN | TAG_MAIN_COLLECTION):
				if (CurrCollectionPath == NULL)
				{
					CurrCollectionPath = &ParserData->CollectionPaths[0];
    12ea:	9a 01       	movw	r18, r20
    12ec:	27 5b       	subi	r18, 0xB7	; 183
    12ee:	3c 4f       	sbci	r19, 0xFC	; 252
    12f0:	e7 96       	adiw	r28, 0x37	; 55
    12f2:	3f af       	std	Y+63, r19	; 0x3f
    12f4:	2e af       	std	Y+62, r18	; 0x3e
    12f6:	e7 97       	sbiw	r28, 0x37	; 55
				}
				else
				{
					HID_CollectionPath_t* ParentCollectionPath = CurrCollectionPath;

					CurrCollectionPath = &ParserData->CollectionPaths[1];
    12f8:	40 5b       	subi	r20, 0xB0	; 176
    12fa:	5c 4f       	sbci	r21, 0xFC	; 252
    12fc:	e5 96       	adiw	r28, 0x35	; 53
    12fe:	5f af       	std	Y+63, r21	; 0x3f
    1300:	4e af       	std	Y+62, r20	; 0x3e
    1302:	e5 97       	sbiw	r28, 0x35	; 53

					while (CurrCollectionPath->Parent != NULL)
					{
						if (CurrCollectionPath == &ParserData->CollectionPaths[HID_MAX_COLLECTIONS - 1])
    1304:	c1 01       	movw	r24, r2
    1306:	88 57       	subi	r24, 0x78	; 120
    1308:	9c 4f       	sbci	r25, 0xFC	; 252
    130a:	ef 96       	adiw	r28, 0x3f	; 63
    130c:	9f af       	std	Y+63, r25	; 0x3f
    130e:	8e af       	std	Y+62, r24	; 0x3e
    1310:	ef 97       	sbiw	r28, 0x3f	; 63
    1312:	6f 01       	movw	r12, r30
    1314:	aa 24       	eor	r10, r10
    1316:	bb 24       	eor	r11, r11
    1318:	ed 96       	adiw	r28, 0x3d	; 61
    131a:	1f ae       	std	Y+63, r1	; 0x3f
    131c:	ed 97       	sbiw	r28, 0x3d	; 61
    131e:	eb 96       	adiw	r28, 0x3b	; 59
    1320:	1c ae       	std	Y+60, r1	; 0x3c
    1322:	1d ae       	std	Y+61, r1	; 0x3d
    1324:	1e ae       	std	Y+62, r1	; 0x3e
    1326:	1f ae       	std	Y+63, r1	; 0x3f
    1328:	eb 97       	sbiw	r28, 0x3b	; 59
    132a:	66 24       	eor	r6, r6
    132c:	77 24       	eor	r7, r7
    132e:	43 01       	movw	r8, r6

					NewReportItem.BitOffset = CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType];

					CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType] += CurrStateTable->Attributes.BitSize;

					if (ParserData->LargestReportSizeBits < NewReportItem.BitOffset)
    1330:	f1 01       	movw	r30, r2
    1332:	ea 52       	subi	r30, 0x2A	; 42
    1334:	fc 4f       	sbci	r31, 0xFC	; 252
    1336:	c6 57       	subi	r28, 0x76	; 118
    1338:	df 4f       	sbci	r29, 0xFF	; 255
    133a:	f9 83       	std	Y+1, r31	; 0x01
    133c:	e8 83       	st	Y, r30
    133e:	ca 58       	subi	r28, 0x8A	; 138
    1340:	d0 40       	sbci	r29, 0x00	; 0
				       sizeof(HID_ReportItem_t));

				CurrStateTable++;
				break;
			case (TYPE_GLOBAL | TAG_GLOBAL_POP):
				if (CurrStateTable == &StateTable[0])
    1342:	cc 56       	subi	r28, 0x6C	; 108
    1344:	df 4f       	sbci	r29, 0xFF	; 255
    1346:	d9 82       	std	Y+1, r13	; 0x01
    1348:	c8 82       	st	Y, r12
    134a:	c4 59       	subi	r28, 0x94	; 148
    134c:	d0 40       	sbci	r29, 0x00	; 0
		}

		switch (HIDReportItem & (TYPE_MASK | TAG_MASK))
		{
			case (TYPE_GLOBAL | TAG_GLOBAL_PUSH):
				if (CurrStateTable == &StateTable[HID_STATETABLE_STACK_DEPTH - 1])
    134e:	96 01       	movw	r18, r12
    1350:	24 5e       	subi	r18, 0xE4	; 228
    1352:	3f 4f       	sbci	r19, 0xFF	; 255
    1354:	c4 57       	subi	r28, 0x74	; 116
    1356:	df 4f       	sbci	r29, 0xFF	; 255
    1358:	39 83       	std	Y+1, r19	; 0x01
    135a:	28 83       	st	Y, r18
    135c:	cc 58       	subi	r28, 0x8C	; 140
    135e:	d0 40       	sbci	r29, 0x00	; 0
				CurrStateTable->ReportCount                 = ReportItemData;
				break;
			case (TYPE_GLOBAL | TAG_GLOBAL_REPORTID):
				CurrStateTable->ReportID                    = ReportItemData;

				if (ParserData->UsingReportIDs)
    1360:	a1 01       	movw	r20, r2
    1362:	48 52       	subi	r20, 0x28	; 40
    1364:	5c 4f       	sbci	r21, 0xFC	; 252
    1366:	c2 57       	subi	r28, 0x72	; 114
    1368:	df 4f       	sbci	r29, 0xFF	; 255
    136a:	59 83       	std	Y+1, r21	; 0x01
    136c:	48 83       	st	Y, r20
    136e:	ce 58       	subi	r28, 0x8E	; 142
    1370:	d0 40       	sbci	r29, 0x00	; 0
				{
					CurrReportIDInfo = NULL;

					for (uint8_t i = 0; i < ParserData->TotalDeviceReports; i++)
    1372:	c0 57       	subi	r28, 0x70	; 112
    1374:	df 4f       	sbci	r29, 0xFF	; 255
    1376:	b9 83       	std	Y+1, r27	; 0x01
    1378:	a8 83       	st	Y, r26
    137a:	c0 59       	subi	r28, 0x90	; 144
    137c:	d0 40       	sbci	r29, 0x00	; 0
    137e:	c2 01       	movw	r24, r4
    1380:	ce 56       	subi	r28, 0x6E	; 110
    1382:	df 4f       	sbci	r29, 0xFF	; 255
    1384:	48 82       	st	Y, r4
    1386:	c2 59       	subi	r28, 0x92	; 146
    1388:	d0 40       	sbci	r29, 0x00	; 0
    138a:	cd 56       	subi	r28, 0x6D	; 109
    138c:	df 4f       	sbci	r29, 0xFF	; 255
    138e:	98 83       	st	Y, r25
    1390:	c3 59       	subi	r28, 0x93	; 147
    1392:	d0 40       	sbci	r29, 0x00	; 0
    1394:	29 c3       	rjmp	.+1618   	; 0x19e8 <USB_ProcessHIDReport+0x78a>

	ParserData->TotalDeviceReports = 1;

	while (ReportSize)
	{
		uint8_t  HIDReportItem  = *ReportData;
    1396:	cf 57       	subi	r28, 0x7F	; 127
    1398:	df 4f       	sbci	r29, 0xFF	; 255
    139a:	a8 81       	ld	r26, Y
    139c:	b9 81       	ldd	r27, Y+1	; 0x01
    139e:	c1 58       	subi	r28, 0x81	; 129
    13a0:	d0 40       	sbci	r29, 0x00	; 0
    13a2:	2d 91       	ld	r18, X+
    13a4:	cf 57       	subi	r28, 0x7F	; 127
    13a6:	df 4f       	sbci	r29, 0xFF	; 255
    13a8:	b9 83       	std	Y+1, r27	; 0x01
    13aa:	a8 83       	st	Y, r26
    13ac:	c1 58       	subi	r28, 0x81	; 129
    13ae:	d0 40       	sbci	r29, 0x00	; 0
		uint32_t ReportItemData = 0;

		ReportData++;
		ReportSize--;
    13b0:	cd 57       	subi	r28, 0x7D	; 125
    13b2:	df 4f       	sbci	r29, 0xFF	; 255
    13b4:	e8 81       	ld	r30, Y
    13b6:	f9 81       	ldd	r31, Y+1	; 0x01
    13b8:	c3 58       	subi	r28, 0x83	; 131
    13ba:	d0 40       	sbci	r29, 0x00	; 0
    13bc:	31 97       	sbiw	r30, 0x01	; 1
    13be:	cd 57       	subi	r28, 0x7D	; 125
    13c0:	df 4f       	sbci	r29, 0xFF	; 255
    13c2:	f9 83       	std	Y+1, r31	; 0x01
    13c4:	e8 83       	st	Y, r30
    13c6:	c3 58       	subi	r28, 0x83	; 131
    13c8:	d0 40       	sbci	r29, 0x00	; 0

		switch (HIDReportItem & DATA_SIZE_MASK)
    13ca:	42 2f       	mov	r20, r18
    13cc:	50 e0       	ldi	r21, 0x00	; 0
    13ce:	c1 58       	subi	r28, 0x81	; 129
    13d0:	df 4f       	sbci	r29, 0xFF	; 255
    13d2:	59 83       	std	Y+1, r21	; 0x01
    13d4:	48 83       	st	Y, r20
    13d6:	cf 57       	subi	r28, 0x7F	; 127
    13d8:	d0 40       	sbci	r29, 0x00	; 0
    13da:	ca 01       	movw	r24, r20
    13dc:	83 70       	andi	r24, 0x03	; 3
    13de:	90 70       	andi	r25, 0x00	; 0
    13e0:	82 30       	cpi	r24, 0x02	; 2
    13e2:	91 05       	cpc	r25, r1
    13e4:	09 f1       	breq	.+66     	; 0x1428 <USB_ProcessHIDReport+0x1ca>
    13e6:	83 30       	cpi	r24, 0x03	; 3
    13e8:	91 05       	cpc	r25, r1
    13ea:	31 f0       	breq	.+12     	; 0x13f8 <USB_ProcessHIDReport+0x19a>
    13ec:	01 97       	sbiw	r24, 0x01	; 1
    13ee:	a9 f1       	breq	.+106    	; 0x145a <USB_ProcessHIDReport+0x1fc>
    13f0:	ee 24       	eor	r14, r14
    13f2:	ff 24       	eor	r15, r15
    13f4:	87 01       	movw	r16, r14
    13f6:	4f c0       	rjmp	.+158    	; 0x1496 <USB_ProcessHIDReport+0x238>
		{
			case DATA_SIZE_4:
				ReportItemData  = *((uint32_t*)ReportData);
    13f8:	cf 57       	subi	r28, 0x7F	; 127
    13fa:	df 4f       	sbci	r29, 0xFF	; 255
    13fc:	a8 81       	ld	r26, Y
    13fe:	b9 81       	ldd	r27, Y+1	; 0x01
    1400:	c1 58       	subi	r28, 0x81	; 129
    1402:	d0 40       	sbci	r29, 0x00	; 0
    1404:	ed 90       	ld	r14, X+
    1406:	fd 90       	ld	r15, X+
    1408:	0d 91       	ld	r16, X+
    140a:	1d 91       	ld	r17, X+
    140c:	cf 57       	subi	r28, 0x7F	; 127
    140e:	df 4f       	sbci	r29, 0xFF	; 255
    1410:	b9 83       	std	Y+1, r27	; 0x01
    1412:	a8 83       	st	Y, r26
    1414:	c1 58       	subi	r28, 0x81	; 129
    1416:	d0 40       	sbci	r29, 0x00	; 0
				ReportSize     -= 4;
    1418:	cd 57       	subi	r28, 0x7D	; 125
    141a:	df 4f       	sbci	r29, 0xFF	; 255
    141c:	e8 81       	ld	r30, Y
    141e:	f9 81       	ldd	r31, Y+1	; 0x01
    1420:	c3 58       	subi	r28, 0x83	; 131
    1422:	d0 40       	sbci	r29, 0x00	; 0
    1424:	34 97       	sbiw	r30, 0x04	; 4
    1426:	31 c0       	rjmp	.+98     	; 0x148a <USB_ProcessHIDReport+0x22c>
				ReportData     += 4;
				break;
			case DATA_SIZE_2:
				ReportItemData  = *((uint16_t*)ReportData);
    1428:	cf 57       	subi	r28, 0x7F	; 127
    142a:	df 4f       	sbci	r29, 0xFF	; 255
    142c:	a8 81       	ld	r26, Y
    142e:	b9 81       	ldd	r27, Y+1	; 0x01
    1430:	c1 58       	subi	r28, 0x81	; 129
    1432:	d0 40       	sbci	r29, 0x00	; 0
    1434:	8d 91       	ld	r24, X+
    1436:	9d 91       	ld	r25, X+
    1438:	cf 57       	subi	r28, 0x7F	; 127
    143a:	df 4f       	sbci	r29, 0xFF	; 255
    143c:	b9 83       	std	Y+1, r27	; 0x01
    143e:	a8 83       	st	Y, r26
    1440:	c1 58       	subi	r28, 0x81	; 129
    1442:	d0 40       	sbci	r29, 0x00	; 0
    1444:	7c 01       	movw	r14, r24
    1446:	00 e0       	ldi	r16, 0x00	; 0
    1448:	10 e0       	ldi	r17, 0x00	; 0
				ReportSize     -= 2;
    144a:	cd 57       	subi	r28, 0x7D	; 125
    144c:	df 4f       	sbci	r29, 0xFF	; 255
    144e:	e8 81       	ld	r30, Y
    1450:	f9 81       	ldd	r31, Y+1	; 0x01
    1452:	c3 58       	subi	r28, 0x83	; 131
    1454:	d0 40       	sbci	r29, 0x00	; 0
    1456:	32 97       	sbiw	r30, 0x02	; 2
    1458:	18 c0       	rjmp	.+48     	; 0x148a <USB_ProcessHIDReport+0x22c>
				ReportData     += 2;
				break;
			case DATA_SIZE_1:
				ReportItemData  = *((uint8_t*)ReportData);
    145a:	cf 57       	subi	r28, 0x7F	; 127
    145c:	df 4f       	sbci	r29, 0xFF	; 255
    145e:	a8 81       	ld	r26, Y
    1460:	b9 81       	ldd	r27, Y+1	; 0x01
    1462:	c1 58       	subi	r28, 0x81	; 129
    1464:	d0 40       	sbci	r29, 0x00	; 0
    1466:	8d 91       	ld	r24, X+
    1468:	cf 57       	subi	r28, 0x7F	; 127
    146a:	df 4f       	sbci	r29, 0xFF	; 255
    146c:	b9 83       	std	Y+1, r27	; 0x01
    146e:	a8 83       	st	Y, r26
    1470:	c1 58       	subi	r28, 0x81	; 129
    1472:	d0 40       	sbci	r29, 0x00	; 0
    1474:	e8 2e       	mov	r14, r24
    1476:	ff 24       	eor	r15, r15
    1478:	00 e0       	ldi	r16, 0x00	; 0
    147a:	10 e0       	ldi	r17, 0x00	; 0
				ReportSize     -= 1;
    147c:	cd 57       	subi	r28, 0x7D	; 125
    147e:	df 4f       	sbci	r29, 0xFF	; 255
    1480:	e8 81       	ld	r30, Y
    1482:	f9 81       	ldd	r31, Y+1	; 0x01
    1484:	c3 58       	subi	r28, 0x83	; 131
    1486:	d0 40       	sbci	r29, 0x00	; 0
    1488:	31 97       	sbiw	r30, 0x01	; 1
    148a:	cd 57       	subi	r28, 0x7D	; 125
    148c:	df 4f       	sbci	r29, 0xFF	; 255
    148e:	f9 83       	std	Y+1, r31	; 0x01
    1490:	e8 83       	st	Y, r30
    1492:	c3 58       	subi	r28, 0x83	; 131
    1494:	d0 40       	sbci	r29, 0x00	; 0
				ReportData     += 1;
				break;
		}

		switch (HIDReportItem & (TYPE_MASK | TAG_MASK))
    1496:	c1 58       	subi	r28, 0x81	; 129
    1498:	df 4f       	sbci	r29, 0xFF	; 255
    149a:	88 81       	ld	r24, Y
    149c:	99 81       	ldd	r25, Y+1	; 0x01
    149e:	cf 57       	subi	r28, 0x7F	; 127
    14a0:	d0 40       	sbci	r29, 0x00	; 0
    14a2:	8c 7f       	andi	r24, 0xFC	; 252
    14a4:	90 70       	andi	r25, 0x00	; 0
    14a6:	84 36       	cpi	r24, 0x64	; 100
    14a8:	91 05       	cpc	r25, r1
    14aa:	09 f4       	brne	.+2      	; 0x14ae <USB_ProcessHIDReport+0x250>
    14ac:	d2 c0       	rjmp	.+420    	; 0x1652 <USB_ProcessHIDReport+0x3f4>
    14ae:	85 36       	cpi	r24, 0x65	; 101
    14b0:	91 05       	cpc	r25, r1
    14b2:	74 f5       	brge	.+92     	; 0x1510 <USB_ProcessHIDReport+0x2b2>
    14b4:	84 32       	cpi	r24, 0x24	; 36
    14b6:	91 05       	cpc	r25, r1
    14b8:	09 f4       	brne	.+2      	; 0x14bc <USB_ProcessHIDReport+0x25e>
    14ba:	b2 c0       	rjmp	.+356    	; 0x1620 <USB_ProcessHIDReport+0x3c2>
    14bc:	85 32       	cpi	r24, 0x25	; 37
    14be:	91 05       	cpc	r25, r1
    14c0:	9c f4       	brge	.+38     	; 0x14e8 <USB_ProcessHIDReport+0x28a>
    14c2:	88 30       	cpi	r24, 0x08	; 8
    14c4:	91 05       	cpc	r25, r1
    14c6:	09 f4       	brne	.+2      	; 0x14ca <USB_ProcessHIDReport+0x26c>
    14c8:	2e c1       	rjmp	.+604    	; 0x1726 <USB_ProcessHIDReport+0x4c8>
    14ca:	89 30       	cpi	r24, 0x09	; 9
    14cc:	91 05       	cpc	r25, r1
    14ce:	24 f4       	brge	.+8      	; 0x14d8 <USB_ProcessHIDReport+0x27a>
    14d0:	04 97       	sbiw	r24, 0x04	; 4
    14d2:	09 f0       	breq	.+2      	; 0x14d6 <USB_ProcessHIDReport+0x278>
    14d4:	71 c2       	rjmp	.+1250   	; 0x19b8 <USB_ProcessHIDReport+0x75a>
    14d6:	98 c0       	rjmp	.+304    	; 0x1608 <USB_ProcessHIDReport+0x3aa>
    14d8:	84 31       	cpi	r24, 0x14	; 20
    14da:	91 05       	cpc	r25, r1
    14dc:	09 f4       	brne	.+2      	; 0x14e0 <USB_ProcessHIDReport+0x282>
    14de:	9a c0       	rjmp	.+308    	; 0x1614 <USB_ProcessHIDReport+0x3b6>
    14e0:	48 97       	sbiw	r24, 0x18	; 24
    14e2:	09 f0       	breq	.+2      	; 0x14e6 <USB_ProcessHIDReport+0x288>
    14e4:	69 c2       	rjmp	.+1234   	; 0x19b8 <USB_ProcessHIDReport+0x75a>
    14e6:	47 c0       	rjmp	.+142    	; 0x1576 <USB_ProcessHIDReport+0x318>
    14e8:	84 33       	cpi	r24, 0x34	; 52
    14ea:	91 05       	cpc	r25, r1
    14ec:	09 f4       	brne	.+2      	; 0x14f0 <USB_ProcessHIDReport+0x292>
    14ee:	a0 c0       	rjmp	.+320    	; 0x1630 <USB_ProcessHIDReport+0x3d2>
    14f0:	85 33       	cpi	r24, 0x35	; 53
    14f2:	91 05       	cpc	r25, r1
    14f4:	24 f4       	brge	.+8      	; 0x14fe <USB_ProcessHIDReport+0x2a0>
    14f6:	88 97       	sbiw	r24, 0x28	; 40
    14f8:	09 f0       	breq	.+2      	; 0x14fc <USB_ProcessHIDReport+0x29e>
    14fa:	5e c2       	rjmp	.+1212   	; 0x19b8 <USB_ProcessHIDReport+0x75a>
    14fc:	2f c1       	rjmp	.+606    	; 0x175c <USB_ProcessHIDReport+0x4fe>
    14fe:	84 34       	cpi	r24, 0x44	; 68
    1500:	91 05       	cpc	r25, r1
    1502:	09 f4       	brne	.+2      	; 0x1506 <USB_ProcessHIDReport+0x2a8>
    1504:	9b c0       	rjmp	.+310    	; 0x163c <USB_ProcessHIDReport+0x3de>
    1506:	84 35       	cpi	r24, 0x54	; 84
    1508:	91 05       	cpc	r25, r1
    150a:	09 f0       	breq	.+2      	; 0x150e <USB_ProcessHIDReport+0x2b0>
    150c:	55 c2       	rjmp	.+1194   	; 0x19b8 <USB_ProcessHIDReport+0x75a>
    150e:	9e c0       	rjmp	.+316    	; 0x164c <USB_ProcessHIDReport+0x3ee>
    1510:	84 39       	cpi	r24, 0x94	; 148
    1512:	91 05       	cpc	r25, r1
    1514:	09 f4       	brne	.+2      	; 0x1518 <USB_ProcessHIDReport+0x2ba>
    1516:	a8 c0       	rjmp	.+336    	; 0x1668 <USB_ProcessHIDReport+0x40a>
    1518:	85 39       	cpi	r24, 0x95	; 149
    151a:	91 05       	cpc	r25, r1
    151c:	a4 f4       	brge	.+40     	; 0x1546 <USB_ProcessHIDReport+0x2e8>
    151e:	80 38       	cpi	r24, 0x80	; 128
    1520:	91 05       	cpc	r25, r1
    1522:	69 f1       	breq	.+90     	; 0x157e <USB_ProcessHIDReport+0x320>
    1524:	81 38       	cpi	r24, 0x81	; 129
    1526:	91 05       	cpc	r25, r1
    1528:	2c f4       	brge	.+10     	; 0x1534 <USB_ProcessHIDReport+0x2d6>
    152a:	84 37       	cpi	r24, 0x74	; 116
    152c:	91 05       	cpc	r25, r1
    152e:	09 f0       	breq	.+2      	; 0x1532 <USB_ProcessHIDReport+0x2d4>
    1530:	43 c2       	rjmp	.+1158   	; 0x19b8 <USB_ProcessHIDReport+0x75a>
    1532:	97 c0       	rjmp	.+302    	; 0x1662 <USB_ProcessHIDReport+0x404>
    1534:	84 38       	cpi	r24, 0x84	; 132
    1536:	91 05       	cpc	r25, r1
    1538:	09 f4       	brne	.+2      	; 0x153c <USB_ProcessHIDReport+0x2de>
    153a:	9a c0       	rjmp	.+308    	; 0x1670 <USB_ProcessHIDReport+0x412>
    153c:	80 39       	cpi	r24, 0x90	; 144
    153e:	91 05       	cpc	r25, r1
    1540:	09 f0       	breq	.+2      	; 0x1544 <USB_ProcessHIDReport+0x2e6>
    1542:	3a c2       	rjmp	.+1140   	; 0x19b8 <USB_ProcessHIDReport+0x75a>
    1544:	1c c0       	rjmp	.+56     	; 0x157e <USB_ProcessHIDReport+0x320>
    1546:	80 3b       	cpi	r24, 0xB0	; 176
    1548:	91 05       	cpc	r25, r1
    154a:	c9 f0       	breq	.+50     	; 0x157e <USB_ProcessHIDReport+0x320>
    154c:	81 3b       	cpi	r24, 0xB1	; 177
    154e:	91 05       	cpc	r25, r1
    1550:	4c f4       	brge	.+18     	; 0x1564 <USB_ProcessHIDReport+0x306>
    1552:	80 3a       	cpi	r24, 0xA0	; 160
    1554:	91 05       	cpc	r25, r1
    1556:	09 f4       	brne	.+2      	; 0x155a <USB_ProcessHIDReport+0x2fc>
    1558:	09 c1       	rjmp	.+530    	; 0x176c <USB_ProcessHIDReport+0x50e>
    155a:	84 3a       	cpi	r24, 0xA4	; 164
    155c:	91 05       	cpc	r25, r1
    155e:	09 f0       	breq	.+2      	; 0x1562 <USB_ProcessHIDReport+0x304>
    1560:	2b c2       	rjmp	.+1110   	; 0x19b8 <USB_ProcessHIDReport+0x75a>
    1562:	2a c0       	rjmp	.+84     	; 0x15b8 <USB_ProcessHIDReport+0x35a>
    1564:	84 3b       	cpi	r24, 0xB4	; 180
    1566:	91 05       	cpc	r25, r1
    1568:	09 f4       	brne	.+2      	; 0x156c <USB_ProcessHIDReport+0x30e>
    156a:	3e c0       	rjmp	.+124    	; 0x15e8 <USB_ProcessHIDReport+0x38a>
    156c:	80 3c       	cpi	r24, 0xC0	; 192
    156e:	91 05       	cpc	r25, r1
    1570:	09 f0       	breq	.+2      	; 0x1574 <USB_ProcessHIDReport+0x316>
    1572:	22 c2       	rjmp	.+1092   	; 0x19b8 <USB_ProcessHIDReport+0x75a>
    1574:	5a c1       	rjmp	.+692    	; 0x182a <USB_ProcessHIDReport+0x5cc>
    1576:	f5 01       	movw	r30, r10
    1578:	37 01       	movw	r6, r14
    157a:	48 01       	movw	r8, r16
    157c:	1e c2       	rjmp	.+1084   	; 0x19ba <USB_ProcessHIDReport+0x75c>
			case (TYPE_MAIN | TAG_MAIN_FEATURE):
				for (uint8_t ReportItemNum = 0; ReportItemNum < CurrStateTable->ReportCount; ReportItemNum++)
				{
					HID_ReportItem_t NewReportItem;

					memcpy(&NewReportItem.Attributes,
    157e:	cb 57       	subi	r28, 0x7B	; 123
    1580:	df 4f       	sbci	r29, 0xFF	; 255
    1582:	c8 82       	st	Y, r12
    1584:	c5 58       	subi	r28, 0x85	; 133
    1586:	d0 40       	sbci	r29, 0x00	; 0
    1588:	ca 57       	subi	r28, 0x7A	; 122
    158a:	df 4f       	sbci	r29, 0xFF	; 255
    158c:	d8 82       	st	Y, r13
    158e:	c6 58       	subi	r28, 0x86	; 134
    1590:	d0 40       	sbci	r29, 0x00	; 0
    1592:	ec 96       	adiw	r28, 0x3c	; 60
    1594:	1f ae       	std	Y+63, r1	; 0x3f
    1596:	ec 97       	sbiw	r28, 0x3c	; 60
					else if (UsageMinMax.Minimum <= UsageMinMax.Maximum)
					{
						NewReportItem.Attributes.Usage.Usage = UsageMinMax.Minimum++;
					}

					uint8_t ItemTag = (HIDReportItem & TAG_MASK);
    1598:	20 7f       	andi	r18, 0xF0	; 240
    159a:	c9 57       	subi	r28, 0x79	; 121
    159c:	df 4f       	sbci	r29, 0xFF	; 255
    159e:	28 83       	st	Y, r18
    15a0:	c7 58       	subi	r28, 0x87	; 135
    15a2:	d0 40       	sbci	r29, 0x00	; 0
					CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType] += CurrStateTable->Attributes.BitSize;

					if (ParserData->LargestReportSizeBits < NewReportItem.BitOffset)
					  ParserData->LargestReportSizeBits = NewReportItem.BitOffset;

					if (!(ReportItemData & IOF_CONSTANT) && CALLBACK_HIDParser_FilterHIDReportItem(&NewReportItem))
    15a4:	97 01       	movw	r18, r14
    15a6:	21 70       	andi	r18, 0x01	; 1
    15a8:	30 70       	andi	r19, 0x00	; 0
    15aa:	c8 57       	subi	r28, 0x78	; 120
    15ac:	df 4f       	sbci	r29, 0xFF	; 255
    15ae:	39 83       	std	Y+1, r19	; 0x01
    15b0:	28 83       	st	Y, r18
    15b2:	c8 58       	subi	r28, 0x88	; 136
    15b4:	d0 40       	sbci	r29, 0x00	; 0
    15b6:	f7 c1       	rjmp	.+1006   	; 0x19a6 <USB_ProcessHIDReport+0x748>
		}

		switch (HIDReportItem & (TYPE_MASK | TAG_MASK))
		{
			case (TYPE_GLOBAL | TAG_GLOBAL_PUSH):
				if (CurrStateTable == &StateTable[HID_STATETABLE_STACK_DEPTH - 1])
    15b8:	c4 57       	subi	r28, 0x74	; 116
    15ba:	df 4f       	sbci	r29, 0xFF	; 255
    15bc:	48 81       	ld	r20, Y
    15be:	59 81       	ldd	r21, Y+1	; 0x01
    15c0:	cc 58       	subi	r28, 0x8C	; 140
    15c2:	d0 40       	sbci	r29, 0x00	; 0
    15c4:	c4 16       	cp	r12, r20
    15c6:	d5 06       	cpc	r13, r21
    15c8:	11 f4       	brne	.+4      	; 0x15ce <USB_ProcessHIDReport+0x370>
    15ca:	81 e0       	ldi	r24, 0x01	; 1
    15cc:	1d c2       	rjmp	.+1082   	; 0x1a08 <USB_ProcessHIDReport+0x7aa>
				  return HID_PARSE_HIDStackOverflow;

				memcpy((CurrStateTable + 1),
    15ce:	d6 01       	movw	r26, r12
    15d0:	5c 96       	adiw	r26, 0x1c	; 28
    15d2:	f6 01       	movw	r30, r12
    15d4:	8a e2       	ldi	r24, 0x2A	; 42
    15d6:	01 90       	ld	r0, Z+
    15d8:	0d 92       	st	X+, r0
    15da:	81 50       	subi	r24, 0x01	; 1
    15dc:	e1 f7       	brne	.-8      	; 0x15d6 <USB_ProcessHIDReport+0x378>
				       CurrStateTable,
				       sizeof(HID_ReportItem_t));

				CurrStateTable++;
    15de:	8c e1       	ldi	r24, 0x1C	; 28
    15e0:	90 e0       	ldi	r25, 0x00	; 0
    15e2:	c8 0e       	add	r12, r24
    15e4:	d9 1e       	adc	r13, r25
    15e6:	e8 c1       	rjmp	.+976    	; 0x19b8 <USB_ProcessHIDReport+0x75a>
				break;
			case (TYPE_GLOBAL | TAG_GLOBAL_POP):
				if (CurrStateTable == &StateTable[0])
    15e8:	cc 56       	subi	r28, 0x6C	; 108
    15ea:	df 4f       	sbci	r29, 0xFF	; 255
    15ec:	a8 81       	ld	r26, Y
    15ee:	b9 81       	ldd	r27, Y+1	; 0x01
    15f0:	c4 59       	subi	r28, 0x94	; 148
    15f2:	d0 40       	sbci	r29, 0x00	; 0
    15f4:	ca 16       	cp	r12, r26
    15f6:	db 06       	cpc	r13, r27
    15f8:	11 f4       	brne	.+4      	; 0x15fe <USB_ProcessHIDReport+0x3a0>
    15fa:	82 e0       	ldi	r24, 0x02	; 2
    15fc:	05 c2       	rjmp	.+1034   	; 0x1a08 <USB_ProcessHIDReport+0x7aa>
				  return HID_PARSE_HIDStackUnderflow;

				CurrStateTable--;
    15fe:	e4 ee       	ldi	r30, 0xE4	; 228
    1600:	ff ef       	ldi	r31, 0xFF	; 255
    1602:	ce 0e       	add	r12, r30
    1604:	df 1e       	adc	r13, r31
    1606:	d8 c1       	rjmp	.+944    	; 0x19b8 <USB_ProcessHIDReport+0x75a>
				break;
			case (TYPE_GLOBAL | TAG_GLOBAL_USAGEPAGE):
				CurrStateTable->Attributes.Usage.Page       = ReportItemData;
    1608:	d6 01       	movw	r26, r12
    160a:	12 96       	adiw	r26, 0x02	; 2
    160c:	fc 92       	st	X, r15
    160e:	ee 92       	st	-X, r14
    1610:	11 97       	sbiw	r26, 0x01	; 1
    1612:	d2 c1       	rjmp	.+932    	; 0x19b8 <USB_ProcessHIDReport+0x75a>
				break;
			case (TYPE_GLOBAL | TAG_GLOBAL_LOGICALMIN):
				CurrStateTable->Attributes.Logical.Minimum  = ReportItemData;
    1614:	f6 01       	movw	r30, r12
    1616:	e2 86       	std	Z+10, r14	; 0x0a
    1618:	f3 86       	std	Z+11, r15	; 0x0b
    161a:	04 87       	std	Z+12, r16	; 0x0c
    161c:	15 87       	std	Z+13, r17	; 0x0d
    161e:	cc c1       	rjmp	.+920    	; 0x19b8 <USB_ProcessHIDReport+0x75a>
				break;
			case (TYPE_GLOBAL | TAG_GLOBAL_LOGICALMAX):
				CurrStateTable->Attributes.Logical.Maximum  = ReportItemData;
    1620:	d6 01       	movw	r26, r12
    1622:	1e 96       	adiw	r26, 0x0e	; 14
    1624:	ed 92       	st	X+, r14
    1626:	fd 92       	st	X+, r15
    1628:	0d 93       	st	X+, r16
    162a:	1c 93       	st	X, r17
    162c:	51 97       	sbiw	r26, 0x11	; 17
    162e:	c4 c1       	rjmp	.+904    	; 0x19b8 <USB_ProcessHIDReport+0x75a>
				break;
			case (TYPE_GLOBAL | TAG_GLOBAL_PHYSMIN):
				CurrStateTable->Attributes.Physical.Minimum = ReportItemData;
    1630:	f6 01       	movw	r30, r12
    1632:	e2 8a       	std	Z+18, r14	; 0x12
    1634:	f3 8a       	std	Z+19, r15	; 0x13
    1636:	04 8b       	std	Z+20, r16	; 0x14
    1638:	15 8b       	std	Z+21, r17	; 0x15
    163a:	be c1       	rjmp	.+892    	; 0x19b8 <USB_ProcessHIDReport+0x75a>
				break;
			case (TYPE_GLOBAL | TAG_GLOBAL_PHYSMAX):
				CurrStateTable->Attributes.Physical.Maximum = ReportItemData;
    163c:	d6 01       	movw	r26, r12
    163e:	56 96       	adiw	r26, 0x16	; 22
    1640:	ed 92       	st	X+, r14
    1642:	fd 92       	st	X+, r15
    1644:	0d 93       	st	X+, r16
    1646:	1c 93       	st	X, r17
    1648:	59 97       	sbiw	r26, 0x19	; 25
    164a:	b6 c1       	rjmp	.+876    	; 0x19b8 <USB_ProcessHIDReport+0x75a>
				break;
			case (TYPE_GLOBAL | TAG_GLOBAL_UNITEXP):
				CurrStateTable->Attributes.Unit.Exponent    = ReportItemData;
    164c:	f6 01       	movw	r30, r12
    164e:	e1 86       	std	Z+9, r14	; 0x09
    1650:	b3 c1       	rjmp	.+870    	; 0x19b8 <USB_ProcessHIDReport+0x75a>
				break;
			case (TYPE_GLOBAL | TAG_GLOBAL_UNIT):
				CurrStateTable->Attributes.Unit.Type        = ReportItemData;
    1652:	d6 01       	movw	r26, r12
    1654:	15 96       	adiw	r26, 0x05	; 5
    1656:	ed 92       	st	X+, r14
    1658:	fd 92       	st	X+, r15
    165a:	0d 93       	st	X+, r16
    165c:	1c 93       	st	X, r17
    165e:	18 97       	sbiw	r26, 0x08	; 8
    1660:	ab c1       	rjmp	.+854    	; 0x19b8 <USB_ProcessHIDReport+0x75a>
				break;
			case (TYPE_GLOBAL | TAG_GLOBAL_REPORTSIZE):
				CurrStateTable->Attributes.BitSize          = ReportItemData;
    1662:	f6 01       	movw	r30, r12
    1664:	e0 82       	st	Z, r14
    1666:	a8 c1       	rjmp	.+848    	; 0x19b8 <USB_ProcessHIDReport+0x75a>
				break;
			case (TYPE_GLOBAL | TAG_GLOBAL_REPORTCOUNT):
				CurrStateTable->ReportCount                 = ReportItemData;
    1668:	d6 01       	movw	r26, r12
    166a:	5a 96       	adiw	r26, 0x1a	; 26
    166c:	ec 92       	st	X, r14
    166e:	a4 c1       	rjmp	.+840    	; 0x19b8 <USB_ProcessHIDReport+0x75a>
				break;
			case (TYPE_GLOBAL | TAG_GLOBAL_REPORTID):
				CurrStateTable->ReportID                    = ReportItemData;
    1670:	3e 2d       	mov	r19, r14
    1672:	f6 01       	movw	r30, r12
    1674:	e3 8e       	std	Z+27, r14	; 0x1b

				if (ParserData->UsingReportIDs)
    1676:	c2 57       	subi	r28, 0x72	; 114
    1678:	df 4f       	sbci	r29, 0xFF	; 255
    167a:	a8 81       	ld	r26, Y
    167c:	b9 81       	ldd	r27, Y+1	; 0x01
    167e:	ce 58       	subi	r28, 0x8E	; 142
    1680:	d0 40       	sbci	r29, 0x00	; 0
    1682:	8c 91       	ld	r24, X
    1684:	88 23       	and	r24, r24
    1686:	09 f4       	brne	.+2      	; 0x168a <USB_ProcessHIDReport+0x42c>
    1688:	40 c0       	rjmp	.+128    	; 0x170a <USB_ProcessHIDReport+0x4ac>
				{
					CurrReportIDInfo = NULL;

					for (uint8_t i = 0; i < ParserData->TotalDeviceReports; i++)
    168a:	c0 57       	subi	r28, 0x70	; 112
    168c:	df 4f       	sbci	r29, 0xFF	; 255
    168e:	e8 81       	ld	r30, Y
    1690:	f9 81       	ldd	r31, Y+1	; 0x01
    1692:	c0 59       	subi	r28, 0x90	; 144
    1694:	d0 40       	sbci	r29, 0x00	; 0
    1696:	20 81       	ld	r18, Z
    1698:	ce 56       	subi	r28, 0x6E	; 110
    169a:	df 4f       	sbci	r29, 0xFF	; 255
    169c:	88 81       	ld	r24, Y
    169e:	c2 59       	subi	r28, 0x92	; 146
    16a0:	d0 40       	sbci	r29, 0x00	; 0
    16a2:	cd 56       	subi	r28, 0x6D	; 109
    16a4:	df 4f       	sbci	r29, 0xFF	; 255
    16a6:	98 81       	ld	r25, Y
    16a8:	c3 59       	subi	r28, 0x93	; 147
    16aa:	d0 40       	sbci	r29, 0x00	; 0
    16ac:	dc 01       	movw	r26, r24
    16ae:	e0 e0       	ldi	r30, 0x00	; 0
    16b0:	10 c0       	rjmp	.+32     	; 0x16d2 <USB_ProcessHIDReport+0x474>
					{
						if (ParserData->ReportIDSizes[i].ReportID == CurrStateTable->ReportID)
    16b2:	8c 91       	ld	r24, X
    16b4:	17 96       	adiw	r26, 0x07	; 7
    16b6:	83 17       	cp	r24, r19
    16b8:	59 f4       	brne	.+22     	; 0x16d0 <USB_ProcessHIDReport+0x472>
						{
							CurrReportIDInfo = &ParserData->ReportIDSizes[i];
    16ba:	87 e0       	ldi	r24, 0x07	; 7
    16bc:	e8 9f       	mul	r30, r24
    16be:	20 01       	movw	r4, r0
    16c0:	11 24       	eor	r1, r1
    16c2:	20 e9       	ldi	r18, 0x90	; 144
    16c4:	33 e0       	ldi	r19, 0x03	; 3
    16c6:	42 0e       	add	r4, r18
    16c8:	53 1e       	adc	r5, r19
    16ca:	42 0c       	add	r4, r2
    16cc:	53 1c       	adc	r5, r3
    16ce:	1d c0       	rjmp	.+58     	; 0x170a <USB_ProcessHIDReport+0x4ac>

				if (ParserData->UsingReportIDs)
				{
					CurrReportIDInfo = NULL;

					for (uint8_t i = 0; i < ParserData->TotalDeviceReports; i++)
    16d0:	ef 5f       	subi	r30, 0xFF	; 255
    16d2:	e2 17       	cp	r30, r18
    16d4:	70 f3       	brcs	.-36     	; 0x16b2 <USB_ProcessHIDReport+0x454>
						}
					}

					if (CurrReportIDInfo == NULL)
					{
						if (ParserData->TotalDeviceReports == HID_MAX_REPORT_IDS)
    16d6:	2a 30       	cpi	r18, 0x0A	; 10
    16d8:	11 f4       	brne	.+4      	; 0x16de <USB_ProcessHIDReport+0x480>
    16da:	87 e0       	ldi	r24, 0x07	; 7
    16dc:	95 c1       	rjmp	.+810    	; 0x1a08 <USB_ProcessHIDReport+0x7aa>
						  return HID_PARSE_InsufficientReportIDItems;

						CurrReportIDInfo = &ParserData->ReportIDSizes[ParserData->TotalDeviceReports++];
    16de:	87 e0       	ldi	r24, 0x07	; 7
    16e0:	28 9f       	mul	r18, r24
    16e2:	20 01       	movw	r4, r0
    16e4:	11 24       	eor	r1, r1
    16e6:	40 e9       	ldi	r20, 0x90	; 144
    16e8:	53 e0       	ldi	r21, 0x03	; 3
    16ea:	44 0e       	add	r4, r20
    16ec:	55 1e       	adc	r5, r21
    16ee:	42 0c       	add	r4, r2
    16f0:	53 1c       	adc	r5, r3
    16f2:	2f 5f       	subi	r18, 0xFF	; 255
    16f4:	c0 57       	subi	r28, 0x70	; 112
    16f6:	df 4f       	sbci	r29, 0xFF	; 255
    16f8:	a8 81       	ld	r26, Y
    16fa:	b9 81       	ldd	r27, Y+1	; 0x01
    16fc:	c0 59       	subi	r28, 0x90	; 144
    16fe:	d0 40       	sbci	r29, 0x00	; 0
    1700:	2c 93       	st	X, r18
						memset(CurrReportIDInfo, 0x00, sizeof(HID_ReportSizeInfo_t));
    1702:	f2 01       	movw	r30, r4
    1704:	11 92       	st	Z+, r1
    1706:	8a 95       	dec	r24
    1708:	e9 f7       	brne	.-6      	; 0x1704 <USB_ProcessHIDReport+0x4a6>
					}
				}

				ParserData->UsingReportIDs = true;
    170a:	e1 e0       	ldi	r30, 0x01	; 1
    170c:	c2 57       	subi	r28, 0x72	; 114
    170e:	df 4f       	sbci	r29, 0xFF	; 255
    1710:	a8 81       	ld	r26, Y
    1712:	b9 81       	ldd	r27, Y+1	; 0x01
    1714:	ce 58       	subi	r28, 0x8E	; 142
    1716:	d0 40       	sbci	r29, 0x00	; 0
    1718:	ec 93       	st	X, r30

				CurrReportIDInfo->ReportID = CurrStateTable->ReportID;
    171a:	d6 01       	movw	r26, r12
    171c:	5b 96       	adiw	r26, 0x1b	; 27
    171e:	8c 91       	ld	r24, X
    1720:	f2 01       	movw	r30, r4
    1722:	80 83       	st	Z, r24
    1724:	49 c1       	rjmp	.+658    	; 0x19b8 <USB_ProcessHIDReport+0x75a>
				break;
			case (TYPE_LOCAL | TAG_LOCAL_USAGE):
				if (UsageListSize == HID_USAGE_STACK_DEPTH)
    1726:	ed 96       	adiw	r28, 0x3d	; 61
    1728:	ff ad       	ldd	r31, Y+63	; 0x3f
    172a:	ed 97       	sbiw	r28, 0x3d	; 61
    172c:	f8 30       	cpi	r31, 0x08	; 8
    172e:	11 f4       	brne	.+4      	; 0x1734 <USB_ProcessHIDReport+0x4d6>
    1730:	86 e0       	ldi	r24, 0x06	; 6
    1732:	6a c1       	rjmp	.+724    	; 0x1a08 <USB_ProcessHIDReport+0x7aa>
				  return HID_PARSE_UsageListOverflow;

				UsageList[UsageListSize++] = ReportItemData;
    1734:	ed 96       	adiw	r28, 0x3d	; 61
    1736:	2f ad       	ldd	r18, Y+63	; 0x3f
    1738:	ed 97       	sbiw	r28, 0x3d	; 61
    173a:	e2 2f       	mov	r30, r18
    173c:	f0 e0       	ldi	r31, 0x00	; 0
    173e:	ee 0f       	add	r30, r30
    1740:	ff 1f       	adc	r31, r31
    1742:	41 e0       	ldi	r20, 0x01	; 1
    1744:	50 e0       	ldi	r21, 0x00	; 0
    1746:	4c 0f       	add	r20, r28
    1748:	5d 1f       	adc	r21, r29
    174a:	e4 0f       	add	r30, r20
    174c:	f5 1f       	adc	r31, r21
    174e:	f1 82       	std	Z+1, r15	; 0x01
    1750:	e0 82       	st	Z, r14
    1752:	2f 5f       	subi	r18, 0xFF	; 255
    1754:	ed 96       	adiw	r28, 0x3d	; 61
    1756:	2f af       	std	Y+63, r18	; 0x3f
    1758:	ed 97       	sbiw	r28, 0x3d	; 61
    175a:	2e c1       	rjmp	.+604    	; 0x19b8 <USB_ProcessHIDReport+0x75a>
				break;
    175c:	f5 01       	movw	r30, r10
    175e:	eb 96       	adiw	r28, 0x3b	; 59
    1760:	ec ae       	std	Y+60, r14	; 0x3c
    1762:	fd ae       	std	Y+61, r15	; 0x3d
    1764:	0e af       	std	Y+62, r16	; 0x3e
    1766:	1f af       	std	Y+63, r17	; 0x3f
    1768:	eb 97       	sbiw	r28, 0x3b	; 59
    176a:	27 c1       	rjmp	.+590    	; 0x19ba <USB_ProcessHIDReport+0x75c>
				break;
			case (TYPE_LOCAL | TAG_LOCAL_USAGEMAX):
				UsageMinMax.Maximum = ReportItemData;
				break;
			case (TYPE_MAIN | TAG_MAIN_COLLECTION):
				if (CurrCollectionPath == NULL)
    176c:	a1 14       	cp	r10, r1
    176e:	b1 04       	cpc	r11, r1
    1770:	29 f4       	brne	.+10     	; 0x177c <USB_ProcessHIDReport+0x51e>
    1772:	e7 96       	adiw	r28, 0x37	; 55
    1774:	ee ad       	ldd	r30, Y+62	; 0x3e
    1776:	ff ad       	ldd	r31, Y+63	; 0x3f
    1778:	e7 97       	sbiw	r28, 0x37	; 55
    177a:	15 c0       	rjmp	.+42     	; 0x17a6 <USB_ProcessHIDReport+0x548>
    177c:	e5 96       	adiw	r28, 0x35	; 53
    177e:	ee ad       	ldd	r30, Y+62	; 0x3e
    1780:	ff ad       	ldd	r31, Y+63	; 0x3f
    1782:	e5 97       	sbiw	r28, 0x35	; 53
    1784:	0a c0       	rjmp	.+20     	; 0x179a <USB_ProcessHIDReport+0x53c>

					CurrCollectionPath = &ParserData->CollectionPaths[1];

					while (CurrCollectionPath->Parent != NULL)
					{
						if (CurrCollectionPath == &ParserData->CollectionPaths[HID_MAX_COLLECTIONS - 1])
    1786:	ef 96       	adiw	r28, 0x3f	; 63
    1788:	8e ad       	ldd	r24, Y+62	; 0x3e
    178a:	9f ad       	ldd	r25, Y+63	; 0x3f
    178c:	ef 97       	sbiw	r28, 0x3f	; 63
    178e:	e8 17       	cp	r30, r24
    1790:	f9 07       	cpc	r31, r25
    1792:	11 f4       	brne	.+4      	; 0x1798 <USB_ProcessHIDReport+0x53a>
    1794:	85 e0       	ldi	r24, 0x05	; 5
    1796:	38 c1       	rjmp	.+624    	; 0x1a08 <USB_ProcessHIDReport+0x7aa>
						  return HID_PARSE_InsufficientCollectionPaths;

						CurrCollectionPath++;
    1798:	37 96       	adiw	r30, 0x07	; 7
				{
					HID_CollectionPath_t* ParentCollectionPath = CurrCollectionPath;

					CurrCollectionPath = &ParserData->CollectionPaths[1];

					while (CurrCollectionPath->Parent != NULL)
    179a:	85 81       	ldd	r24, Z+5	; 0x05
    179c:	96 81       	ldd	r25, Z+6	; 0x06
    179e:	89 2b       	or	r24, r25
    17a0:	91 f7       	brne	.-28     	; 0x1786 <USB_ProcessHIDReport+0x528>
						  return HID_PARSE_InsufficientCollectionPaths;

						CurrCollectionPath++;
					}

					CurrCollectionPath->Parent = ParentCollectionPath;
    17a2:	b6 82       	std	Z+6, r11	; 0x06
    17a4:	a5 82       	std	Z+5, r10	; 0x05
				}

				CurrCollectionPath->Type = ReportItemData;
    17a6:	e0 82       	st	Z, r14
				CurrCollectionPath->Usage.Page = CurrStateTable->Attributes.Usage.Page;
    17a8:	d6 01       	movw	r26, r12
    17aa:	11 96       	adiw	r26, 0x01	; 1
    17ac:	8d 91       	ld	r24, X+
    17ae:	9c 91       	ld	r25, X
    17b0:	12 97       	sbiw	r26, 0x02	; 2
    17b2:	92 83       	std	Z+2, r25	; 0x02
    17b4:	81 83       	std	Z+1, r24	; 0x01

				if (UsageListSize)
    17b6:	ed 96       	adiw	r28, 0x3d	; 61
    17b8:	bf ad       	ldd	r27, Y+63	; 0x3f
    17ba:	ed 97       	sbiw	r28, 0x3d	; 61
    17bc:	bb 23       	and	r27, r27
    17be:	09 f1       	breq	.+66     	; 0x1802 <USB_ProcessHIDReport+0x5a4>
				{
					CurrCollectionPath->Usage.Usage = UsageList[0];
    17c0:	89 81       	ldd	r24, Y+1	; 0x01
    17c2:	9a 81       	ldd	r25, Y+2	; 0x02
    17c4:	94 83       	std	Z+4, r25	; 0x04
    17c6:	83 83       	std	Z+3, r24	; 0x03
    17c8:	de 01       	movw	r26, r28
    17ca:	11 96       	adiw	r26, 0x01	; 1

					for (uint8_t i = 0; i < UsageListSize; i++)
    17cc:	ed 96       	adiw	r28, 0x3d	; 61
    17ce:	4f ad       	ldd	r20, Y+63	; 0x3f
    17d0:	ed 97       	sbiw	r28, 0x3d	; 61
    17d2:	24 2f       	mov	r18, r20
    17d4:	30 e0       	ldi	r19, 0x00	; 0
    17d6:	22 0f       	add	r18, r18
    17d8:	33 1f       	adc	r19, r19
    17da:	2a 0f       	add	r18, r26
    17dc:	3b 1f       	adc	r19, r27
    17de:	06 c0       	rjmp	.+12     	; 0x17ec <USB_ProcessHIDReport+0x58e>
					  UsageList[i] = UsageList[i + 1];
    17e0:	12 96       	adiw	r26, 0x02	; 2
    17e2:	8d 91       	ld	r24, X+
    17e4:	9c 91       	ld	r25, X
    17e6:	13 97       	sbiw	r26, 0x03	; 3
    17e8:	8d 93       	st	X+, r24
    17ea:	9d 93       	st	X+, r25

				if (UsageListSize)
				{
					CurrCollectionPath->Usage.Usage = UsageList[0];

					for (uint8_t i = 0; i < UsageListSize; i++)
    17ec:	a2 17       	cp	r26, r18
    17ee:	b3 07       	cpc	r27, r19
    17f0:	b9 f7       	brne	.-18     	; 0x17e0 <USB_ProcessHIDReport+0x582>
					  UsageList[i] = UsageList[i + 1];

					UsageListSize--;
    17f2:	ed 96       	adiw	r28, 0x3d	; 61
    17f4:	9f ad       	ldd	r25, Y+63	; 0x3f
    17f6:	ed 97       	sbiw	r28, 0x3d	; 61
    17f8:	91 50       	subi	r25, 0x01	; 1
    17fa:	ed 96       	adiw	r28, 0x3d	; 61
    17fc:	9f af       	std	Y+63, r25	; 0x3f
    17fe:	ed 97       	sbiw	r28, 0x3d	; 61
    1800:	dc c0       	rjmp	.+440    	; 0x19ba <USB_ProcessHIDReport+0x75c>
				}
				else if (UsageMinMax.Minimum <= UsageMinMax.Maximum)
    1802:	eb 96       	adiw	r28, 0x3b	; 59
    1804:	2c ad       	ldd	r18, Y+60	; 0x3c
    1806:	3d ad       	ldd	r19, Y+61	; 0x3d
    1808:	4e ad       	ldd	r20, Y+62	; 0x3e
    180a:	5f ad       	ldd	r21, Y+63	; 0x3f
    180c:	eb 97       	sbiw	r28, 0x3b	; 59
    180e:	26 15       	cp	r18, r6
    1810:	37 05       	cpc	r19, r7
    1812:	48 05       	cpc	r20, r8
    1814:	59 05       	cpc	r21, r9
    1816:	08 f4       	brcc	.+2      	; 0x181a <USB_ProcessHIDReport+0x5bc>
    1818:	d0 c0       	rjmp	.+416    	; 0x19ba <USB_ProcessHIDReport+0x75c>
				{
					CurrCollectionPath->Usage.Usage = UsageMinMax.Minimum++;
    181a:	74 82       	std	Z+4, r7	; 0x04
    181c:	63 82       	std	Z+3, r6	; 0x03
    181e:	08 94       	sec
    1820:	61 1c       	adc	r6, r1
    1822:	71 1c       	adc	r7, r1
    1824:	81 1c       	adc	r8, r1
    1826:	91 1c       	adc	r9, r1
    1828:	c8 c0       	rjmp	.+400    	; 0x19ba <USB_ProcessHIDReport+0x75c>
				}

				break;
			case (TYPE_MAIN | TAG_MAIN_ENDCOLLECTION):
				if (CurrCollectionPath == NULL)
    182a:	a1 14       	cp	r10, r1
    182c:	b1 04       	cpc	r11, r1
    182e:	11 f4       	brne	.+4      	; 0x1834 <USB_ProcessHIDReport+0x5d6>
    1830:	84 e0       	ldi	r24, 0x04	; 4
    1832:	ea c0       	rjmp	.+468    	; 0x1a08 <USB_ProcessHIDReport+0x7aa>
				  return HID_PARSE_UnexpectedEndCollection;

				CurrCollectionPath = CurrCollectionPath->Parent;
    1834:	d5 01       	movw	r26, r10
    1836:	15 96       	adiw	r26, 0x05	; 5
    1838:	ed 91       	ld	r30, X+
    183a:	fc 91       	ld	r31, X
    183c:	16 97       	sbiw	r26, 0x06	; 6
    183e:	bd c0       	rjmp	.+378    	; 0x19ba <USB_ProcessHIDReport+0x75c>
			case (TYPE_MAIN | TAG_MAIN_FEATURE):
				for (uint8_t ReportItemNum = 0; ReportItemNum < CurrStateTable->ReportCount; ReportItemNum++)
				{
					HID_ReportItem_t NewReportItem;

					memcpy(&NewReportItem.Attributes,
    1840:	de 01       	movw	r26, r28
    1842:	59 96       	adiw	r26, 0x19	; 25
    1844:	cb 57       	subi	r28, 0x7B	; 123
    1846:	df 4f       	sbci	r29, 0xFF	; 255
    1848:	88 81       	ld	r24, Y
    184a:	c5 58       	subi	r28, 0x85	; 133
    184c:	d0 40       	sbci	r29, 0x00	; 0
    184e:	ca 57       	subi	r28, 0x7A	; 122
    1850:	df 4f       	sbci	r29, 0xFF	; 255
    1852:	98 81       	ld	r25, Y
    1854:	c6 58       	subi	r28, 0x86	; 134
    1856:	d0 40       	sbci	r29, 0x00	; 0
    1858:	9c 01       	movw	r18, r24
    185a:	f9 01       	movw	r30, r18
    185c:	8a e1       	ldi	r24, 0x1A	; 26
    185e:	01 90       	ld	r0, Z+
    1860:	0d 92       	st	X+, r0
    1862:	81 50       	subi	r24, 0x01	; 1
    1864:	e1 f7       	brne	.-8      	; 0x185e <USB_ProcessHIDReport+0x600>
					       &CurrStateTable->Attributes,
					       sizeof(HID_ReportItem_Attributes_t));

					NewReportItem.ItemFlags      = ReportItemData;
    1866:	fd 8a       	std	Y+21, r15	; 0x15
    1868:	ec 8a       	std	Y+20, r14	; 0x14
					NewReportItem.CollectionPath = CurrCollectionPath;
    186a:	b8 8e       	std	Y+24, r11	; 0x18
    186c:	af 8a       	std	Y+23, r10	; 0x17
					NewReportItem.ReportID       = CurrStateTable->ReportID;
    186e:	f6 01       	movw	r30, r12
    1870:	83 8d       	ldd	r24, Z+27	; 0x1b
    1872:	8e 8b       	std	Y+22, r24	; 0x16

					if (UsageListSize)
    1874:	ed 96       	adiw	r28, 0x3d	; 61
    1876:	ff ad       	ldd	r31, Y+63	; 0x3f
    1878:	ed 97       	sbiw	r28, 0x3d	; 61
    187a:	ff 23       	and	r31, r31
    187c:	f9 f0       	breq	.+62     	; 0x18bc <USB_ProcessHIDReport+0x65e>
					{
						NewReportItem.Attributes.Usage.Usage = UsageList[0];
    187e:	49 81       	ldd	r20, Y+1	; 0x01
    1880:	5a 81       	ldd	r21, Y+2	; 0x02
    1882:	fe 01       	movw	r30, r28
    1884:	31 96       	adiw	r30, 0x01	; 1

						for (uint8_t i = 0; i < UsageListSize; i++)
    1886:	ed 96       	adiw	r28, 0x3d	; 61
    1888:	8f ad       	ldd	r24, Y+63	; 0x3f
    188a:	ed 97       	sbiw	r28, 0x3d	; 61
    188c:	28 2f       	mov	r18, r24
    188e:	30 e0       	ldi	r19, 0x00	; 0
    1890:	22 0f       	add	r18, r18
    1892:	33 1f       	adc	r19, r19
    1894:	2e 0f       	add	r18, r30
    1896:	3f 1f       	adc	r19, r31
    1898:	04 c0       	rjmp	.+8      	; 0x18a2 <USB_ProcessHIDReport+0x644>
						  UsageList[i] = UsageList[i + 1];
    189a:	82 81       	ldd	r24, Z+2	; 0x02
    189c:	93 81       	ldd	r25, Z+3	; 0x03
    189e:	81 93       	st	Z+, r24
    18a0:	91 93       	st	Z+, r25

					if (UsageListSize)
					{
						NewReportItem.Attributes.Usage.Usage = UsageList[0];

						for (uint8_t i = 0; i < UsageListSize; i++)
    18a2:	e2 17       	cp	r30, r18
    18a4:	f3 07       	cpc	r31, r19
    18a6:	c9 f7       	brne	.-14     	; 0x189a <USB_ProcessHIDReport+0x63c>
					NewReportItem.CollectionPath = CurrCollectionPath;
					NewReportItem.ReportID       = CurrStateTable->ReportID;

					if (UsageListSize)
					{
						NewReportItem.Attributes.Usage.Usage = UsageList[0];
    18a8:	5d 8f       	std	Y+29, r21	; 0x1d
    18aa:	4c 8f       	std	Y+28, r20	; 0x1c

						for (uint8_t i = 0; i < UsageListSize; i++)
						  UsageList[i] = UsageList[i + 1];

						UsageListSize--;
    18ac:	ed 96       	adiw	r28, 0x3d	; 61
    18ae:	bf ad       	ldd	r27, Y+63	; 0x3f
    18b0:	ed 97       	sbiw	r28, 0x3d	; 61
    18b2:	b1 50       	subi	r27, 0x01	; 1
    18b4:	ed 96       	adiw	r28, 0x3d	; 61
    18b6:	bf af       	std	Y+63, r27	; 0x3f
    18b8:	ed 97       	sbiw	r28, 0x3d	; 61
    18ba:	12 c0       	rjmp	.+36     	; 0x18e0 <USB_ProcessHIDReport+0x682>
					}
					else if (UsageMinMax.Minimum <= UsageMinMax.Maximum)
    18bc:	eb 96       	adiw	r28, 0x3b	; 59
    18be:	2c ad       	ldd	r18, Y+60	; 0x3c
    18c0:	3d ad       	ldd	r19, Y+61	; 0x3d
    18c2:	4e ad       	ldd	r20, Y+62	; 0x3e
    18c4:	5f ad       	ldd	r21, Y+63	; 0x3f
    18c6:	eb 97       	sbiw	r28, 0x3b	; 59
    18c8:	26 15       	cp	r18, r6
    18ca:	37 05       	cpc	r19, r7
    18cc:	48 05       	cpc	r20, r8
    18ce:	59 05       	cpc	r21, r9
    18d0:	38 f0       	brcs	.+14     	; 0x18e0 <USB_ProcessHIDReport+0x682>
					{
						NewReportItem.Attributes.Usage.Usage = UsageMinMax.Minimum++;
    18d2:	7d 8e       	std	Y+29, r7	; 0x1d
    18d4:	6c 8e       	std	Y+28, r6	; 0x1c
    18d6:	08 94       	sec
    18d8:	61 1c       	adc	r6, r1
    18da:	71 1c       	adc	r7, r1
    18dc:	81 1c       	adc	r8, r1
    18de:	91 1c       	adc	r9, r1
					}

					uint8_t ItemTag = (HIDReportItem & TAG_MASK);

					if (ItemTag == TAG_MAIN_INPUT)
    18e0:	c9 57       	subi	r28, 0x79	; 121
    18e2:	df 4f       	sbci	r29, 0xFF	; 255
    18e4:	38 81       	ld	r19, Y
    18e6:	c7 58       	subi	r28, 0x87	; 135
    18e8:	d0 40       	sbci	r29, 0x00	; 0
    18ea:	30 38       	cpi	r19, 0x80	; 128
    18ec:	11 f4       	brne	.+4      	; 0x18f2 <USB_ProcessHIDReport+0x694>
					  NewReportItem.ItemType = HID_REPORT_ITEM_In;
    18ee:	1b 8a       	std	Y+19, r1	; 0x13
    18f0:	0c c0       	rjmp	.+24     	; 0x190a <USB_ProcessHIDReport+0x6ac>
					else if (ItemTag == TAG_MAIN_OUTPUT)
    18f2:	c9 57       	subi	r28, 0x79	; 121
    18f4:	df 4f       	sbci	r29, 0xFF	; 255
    18f6:	48 81       	ld	r20, Y
    18f8:	c7 58       	subi	r28, 0x87	; 135
    18fa:	d0 40       	sbci	r29, 0x00	; 0
    18fc:	40 39       	cpi	r20, 0x90	; 144
    18fe:	19 f4       	brne	.+6      	; 0x1906 <USB_ProcessHIDReport+0x6a8>
					  NewReportItem.ItemType = HID_REPORT_ITEM_Out;
    1900:	51 e0       	ldi	r21, 0x01	; 1
    1902:	5b 8b       	std	Y+19, r21	; 0x13
    1904:	02 c0       	rjmp	.+4      	; 0x190a <USB_ProcessHIDReport+0x6ac>
					else
					  NewReportItem.ItemType = HID_REPORT_ITEM_Feature;
    1906:	82 e0       	ldi	r24, 0x02	; 2
    1908:	8b 8b       	std	Y+19, r24	; 0x13

					NewReportItem.BitOffset = CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType];
    190a:	eb 89       	ldd	r30, Y+19	; 0x13
    190c:	f0 e0       	ldi	r31, 0x00	; 0
    190e:	ee 0f       	add	r30, r30
    1910:	ff 1f       	adc	r31, r31
    1912:	e4 0d       	add	r30, r4
    1914:	f5 1d       	adc	r31, r5
    1916:	81 81       	ldd	r24, Z+1	; 0x01
    1918:	92 81       	ldd	r25, Z+2	; 0x02
    191a:	9a 8b       	std	Y+18, r25	; 0x12
    191c:	89 8b       	std	Y+17, r24	; 0x11

					CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType] += CurrStateTable->Attributes.BitSize;
    191e:	d6 01       	movw	r26, r12
    1920:	2c 91       	ld	r18, X
    1922:	81 81       	ldd	r24, Z+1	; 0x01
    1924:	92 81       	ldd	r25, Z+2	; 0x02
    1926:	82 0f       	add	r24, r18
    1928:	91 1d       	adc	r25, r1
    192a:	92 83       	std	Z+2, r25	; 0x02
    192c:	81 83       	std	Z+1, r24	; 0x01

					if (ParserData->LargestReportSizeBits < NewReportItem.BitOffset)
    192e:	29 89       	ldd	r18, Y+17	; 0x11
    1930:	3a 89       	ldd	r19, Y+18	; 0x12
    1932:	c6 57       	subi	r28, 0x76	; 118
    1934:	df 4f       	sbci	r29, 0xFF	; 255
    1936:	e8 81       	ld	r30, Y
    1938:	f9 81       	ldd	r31, Y+1	; 0x01
    193a:	ca 58       	subi	r28, 0x8A	; 138
    193c:	d0 40       	sbci	r29, 0x00	; 0
    193e:	80 81       	ld	r24, Z
    1940:	91 81       	ldd	r25, Z+1	; 0x01
    1942:	82 17       	cp	r24, r18
    1944:	93 07       	cpc	r25, r19
    1946:	10 f4       	brcc	.+4      	; 0x194c <USB_ProcessHIDReport+0x6ee>
					  ParserData->LargestReportSizeBits = NewReportItem.BitOffset;
    1948:	31 83       	std	Z+1, r19	; 0x01
    194a:	20 83       	st	Z, r18

					if (!(ReportItemData & IOF_CONSTANT) && CALLBACK_HIDParser_FilterHIDReportItem(&NewReportItem))
    194c:	c8 57       	subi	r28, 0x78	; 120
    194e:	df 4f       	sbci	r29, 0xFF	; 255
    1950:	28 81       	ld	r18, Y
    1952:	39 81       	ldd	r19, Y+1	; 0x01
    1954:	c8 58       	subi	r28, 0x88	; 136
    1956:	d0 40       	sbci	r29, 0x00	; 0
    1958:	23 2b       	or	r18, r19
    195a:	f1 f4       	brne	.+60     	; 0x1998 <USB_ProcessHIDReport+0x73a>
    195c:	ce 01       	movw	r24, r28
    195e:	41 96       	adiw	r24, 0x11	; 17
    1960:	0e 94 44 01 	call	0x288	; 0x288 <CALLBACK_HIDParser_FilterHIDReportItem>
    1964:	88 23       	and	r24, r24
    1966:	c1 f0       	breq	.+48     	; 0x1998 <USB_ProcessHIDReport+0x73a>
					{
						if (ParserData->TotalReportItems == HID_MAX_REPORTITEMS)
    1968:	d1 01       	movw	r26, r2
    196a:	8c 91       	ld	r24, X
    196c:	84 31       	cpi	r24, 0x14	; 20
    196e:	11 f4       	brne	.+4      	; 0x1974 <USB_ProcessHIDReport+0x716>
    1970:	83 e0       	ldi	r24, 0x03	; 3
    1972:	4a c0       	rjmp	.+148    	; 0x1a08 <USB_ProcessHIDReport+0x7aa>
						  return HID_PARSE_InsufficientReportItems;

						memcpy(&ParserData->ReportItems[ParserData->TotalReportItems],
    1974:	ba e2       	ldi	r27, 0x2A	; 42
    1976:	8b 9f       	mul	r24, r27
    1978:	f0 01       	movw	r30, r0
    197a:	11 24       	eor	r1, r1
    197c:	31 96       	adiw	r30, 0x01	; 1
    197e:	e2 0d       	add	r30, r2
    1980:	f3 1d       	adc	r31, r3
    1982:	de 01       	movw	r26, r28
    1984:	51 96       	adiw	r26, 0x11	; 17
    1986:	8a e2       	ldi	r24, 0x2A	; 42
    1988:	0d 90       	ld	r0, X+
    198a:	01 92       	st	Z+, r0
    198c:	81 50       	subi	r24, 0x01	; 1
    198e:	e1 f7       	brne	.-8      	; 0x1988 <USB_ProcessHIDReport+0x72a>
						       &NewReportItem, sizeof(HID_ReportItem_t));

						ParserData->TotalReportItems++;
    1990:	f1 01       	movw	r30, r2
    1992:	80 81       	ld	r24, Z
    1994:	8f 5f       	subi	r24, 0xFF	; 255
    1996:	80 83       	st	Z, r24
				CurrCollectionPath = CurrCollectionPath->Parent;
				break;
			case (TYPE_MAIN | TAG_MAIN_INPUT):
			case (TYPE_MAIN | TAG_MAIN_OUTPUT):
			case (TYPE_MAIN | TAG_MAIN_FEATURE):
				for (uint8_t ReportItemNum = 0; ReportItemNum < CurrStateTable->ReportCount; ReportItemNum++)
    1998:	ec 96       	adiw	r28, 0x3c	; 60
    199a:	ff ad       	ldd	r31, Y+63	; 0x3f
    199c:	ec 97       	sbiw	r28, 0x3c	; 60
    199e:	ff 5f       	subi	r31, 0xFF	; 255
    19a0:	ec 96       	adiw	r28, 0x3c	; 60
    19a2:	ff af       	std	Y+63, r31	; 0x3f
    19a4:	ec 97       	sbiw	r28, 0x3c	; 60
    19a6:	d6 01       	movw	r26, r12
    19a8:	5a 96       	adiw	r26, 0x1a	; 26
    19aa:	8c 91       	ld	r24, X
    19ac:	ec 96       	adiw	r28, 0x3c	; 60
    19ae:	bf ad       	ldd	r27, Y+63	; 0x3f
    19b0:	ec 97       	sbiw	r28, 0x3c	; 60
    19b2:	b8 17       	cp	r27, r24
    19b4:	08 f4       	brcc	.+2      	; 0x19b8 <USB_ProcessHIDReport+0x75a>
    19b6:	44 cf       	rjmp	.-376    	; 0x1840 <USB_ProcessHIDReport+0x5e2>
    19b8:	f5 01       	movw	r30, r10
				}

				break;
		}

		if ((HIDReportItem & TYPE_MASK) == TYPE_MAIN)
    19ba:	c1 58       	subi	r28, 0x81	; 129
    19bc:	df 4f       	sbci	r29, 0xFF	; 255
    19be:	28 81       	ld	r18, Y
    19c0:	39 81       	ldd	r19, Y+1	; 0x01
    19c2:	cf 57       	subi	r28, 0x7F	; 127
    19c4:	d0 40       	sbci	r29, 0x00	; 0
    19c6:	2c 70       	andi	r18, 0x0C	; 12
    19c8:	30 70       	andi	r19, 0x00	; 0
    19ca:	23 2b       	or	r18, r19
    19cc:	61 f4       	brne	.+24     	; 0x19e6 <USB_ProcessHIDReport+0x788>
    19ce:	ed 96       	adiw	r28, 0x3d	; 61
    19d0:	1f ae       	std	Y+63, r1	; 0x3f
    19d2:	ed 97       	sbiw	r28, 0x3d	; 61
    19d4:	eb 96       	adiw	r28, 0x3b	; 59
    19d6:	1c ae       	std	Y+60, r1	; 0x3c
    19d8:	1d ae       	std	Y+61, r1	; 0x3d
    19da:	1e ae       	std	Y+62, r1	; 0x3e
    19dc:	1f ae       	std	Y+63, r1	; 0x3f
    19de:	eb 97       	sbiw	r28, 0x3b	; 59
    19e0:	66 24       	eor	r6, r6
    19e2:	77 24       	eor	r7, r7
    19e4:	43 01       	movw	r8, r6
    19e6:	5f 01       	movw	r10, r30
	memset(CurrStateTable,   0x00, sizeof(HID_StateTable_t));
	memset(CurrReportIDInfo, 0x00, sizeof(HID_ReportSizeInfo_t));

	ParserData->TotalDeviceReports = 1;

	while (ReportSize)
    19e8:	cd 57       	subi	r28, 0x7D	; 125
    19ea:	df 4f       	sbci	r29, 0xFF	; 255
    19ec:	48 81       	ld	r20, Y
    19ee:	59 81       	ldd	r21, Y+1	; 0x01
    19f0:	c3 58       	subi	r28, 0x83	; 131
    19f2:	d0 40       	sbci	r29, 0x00	; 0
    19f4:	45 2b       	or	r20, r21
    19f6:	09 f0       	breq	.+2      	; 0x19fa <USB_ProcessHIDReport+0x79c>
    19f8:	ce cc       	rjmp	.-1636   	; 0x1396 <USB_ProcessHIDReport+0x138>
			UsageMinMax.Maximum = 0;
			UsageListSize       = 0;
		}
	}

	if (!(ParserData->TotalReportItems))
    19fa:	d1 01       	movw	r26, r2
    19fc:	8c 91       	ld	r24, X
    19fe:	88 23       	and	r24, r24
    1a00:	11 f0       	breq	.+4      	; 0x1a06 <USB_ProcessHIDReport+0x7a8>
    1a02:	80 e0       	ldi	r24, 0x00	; 0
    1a04:	01 c0       	rjmp	.+2      	; 0x1a08 <USB_ProcessHIDReport+0x7aa>
    1a06:	88 e0       	ldi	r24, 0x08	; 8
	  return HID_PARSE_NoUnfilteredReportItems;

	return HID_PARSE_Successful;
}
    1a08:	cb 56       	subi	r28, 0x6B	; 107
    1a0a:	df 4f       	sbci	r29, 0xFF	; 255
    1a0c:	0f b6       	in	r0, 0x3f	; 63
    1a0e:	f8 94       	cli
    1a10:	de bf       	out	0x3e, r29	; 62
    1a12:	0f be       	out	0x3f, r0	; 63
    1a14:	cd bf       	out	0x3d, r28	; 61
    1a16:	cf 91       	pop	r28
    1a18:	df 91       	pop	r29
    1a1a:	1f 91       	pop	r17
    1a1c:	0f 91       	pop	r16
    1a1e:	ff 90       	pop	r15
    1a20:	ef 90       	pop	r14
    1a22:	df 90       	pop	r13
    1a24:	cf 90       	pop	r12
    1a26:	bf 90       	pop	r11
    1a28:	af 90       	pop	r10
    1a2a:	9f 90       	pop	r9
    1a2c:	8f 90       	pop	r8
    1a2e:	7f 90       	pop	r7
    1a30:	6f 90       	pop	r6
    1a32:	5f 90       	pop	r5
    1a34:	4f 90       	pop	r4
    1a36:	3f 90       	pop	r3
    1a38:	2f 90       	pop	r2
    1a3a:	08 95       	ret

00001a3c <DCOMP_HID_Host_NextHIDInterface>:

	return HID_ENUMERROR_NoError;
}

static uint8_t DCOMP_HID_Host_NextHIDInterface(void* const CurrentDescriptor)
{
    1a3c:	fc 01       	movw	r30, r24
	USB_Descriptor_Header_t* Header = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Header_t);

	if (Header->Type == DTYPE_Interface)
    1a3e:	81 81       	ldd	r24, Z+1	; 0x01
    1a40:	84 30       	cpi	r24, 0x04	; 4
    1a42:	29 f4       	brne	.+10     	; 0x1a4e <DCOMP_HID_Host_NextHIDInterface+0x12>
	{
		USB_Descriptor_Interface_t* Interface = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Interface_t);

		if (Interface->Class == HID_CSCP_HIDClass)
    1a44:	85 81       	ldd	r24, Z+5	; 0x05
    1a46:	83 30       	cpi	r24, 0x03	; 3
    1a48:	11 f4       	brne	.+4      	; 0x1a4e <DCOMP_HID_Host_NextHIDInterface+0x12>
    1a4a:	80 e0       	ldi	r24, 0x00	; 0
    1a4c:	08 95       	ret
    1a4e:	82 e0       	ldi	r24, 0x02	; 2
		  return DESCRIPTOR_SEARCH_Found;
	}

	return DESCRIPTOR_SEARCH_NotFound;
}
    1a50:	08 95       	ret

00001a52 <DCOMP_HID_Host_NextHID>:

static uint8_t DCOMP_HID_Host_NextHID(void* const CurrentDescriptor)
{
	USB_Descriptor_Header_t* Header = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Header_t);

	if (Header->Type == HID_DTYPE_HID)
    1a52:	fc 01       	movw	r30, r24
    1a54:	81 81       	ldd	r24, Z+1	; 0x01
    1a56:	81 32       	cpi	r24, 0x21	; 33
    1a58:	11 f4       	brne	.+4      	; 0x1a5e <DCOMP_HID_Host_NextHID+0xc>
    1a5a:	80 e0       	ldi	r24, 0x00	; 0
    1a5c:	08 95       	ret
	  return DESCRIPTOR_SEARCH_Found;
	else if (Header->Type == DTYPE_Interface)
    1a5e:	84 30       	cpi	r24, 0x04	; 4
    1a60:	11 f0       	breq	.+4      	; 0x1a66 <DCOMP_HID_Host_NextHID+0x14>
    1a62:	82 e0       	ldi	r24, 0x02	; 2
    1a64:	08 95       	ret
    1a66:	81 e0       	ldi	r24, 0x01	; 1
	  return DESCRIPTOR_SEARCH_Fail;
	else
	  return DESCRIPTOR_SEARCH_NotFound;
}
    1a68:	08 95       	ret

00001a6a <HID_Host_IsReportReceived>:
		return USB_Host_SendControlRequest(Buffer);
	}
}

bool HID_Host_IsReportReceived(USB_ClassInfo_HID_Host_t* const HIDInterfaceInfo)
{
    1a6a:	fc 01       	movw	r30, r24
	if ((USB_HostState != HOST_STATE_Configured) || !(HIDInterfaceInfo->State.IsActive))
    1a6c:	80 91 1f 05 	lds	r24, 0x051F
    1a70:	8c 30       	cpi	r24, 0x0C	; 12
    1a72:	a1 f4       	brne	.+40     	; 0x1a9c <HID_Host_IsReportReceived+0x32>
    1a74:	87 81       	ldd	r24, Z+7	; 0x07
    1a76:	88 23       	and	r24, r24
    1a78:	89 f0       	breq	.+34     	; 0x1a9c <HID_Host_IsReportReceived+0x32>
	  return false;

	bool ReportReceived;

	Pipe_SelectPipe(HIDInterfaceInfo->Config.DataINPipeNumber);
    1a7a:	80 81       	ld	r24, Z
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
    1a7c:	80 93 a7 00 	sts	0x00A7, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    1a80:	80 91 a9 00 	lds	r24, 0x00A9
    1a84:	8f 7b       	andi	r24, 0xBF	; 191
    1a86:	80 93 a9 00 	sts	0x00A9, r24
			 *  \return Boolean true if the current pipe has received an IN packet, false otherwise.
			 */
			static inline bool Pipe_IsINReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsINReceived(void)
			{
				return ((UPINTX & (1 << RXINI)) ? true : false);
    1a8a:	90 91 a6 00 	lds	r25, 0x00A6
    1a8e:	91 70       	andi	r25, 0x01	; 1

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    1a90:	80 91 a9 00 	lds	r24, 0x00A9
    1a94:	80 64       	ori	r24, 0x40	; 64
    1a96:	80 93 a9 00 	sts	0x00A9, r24
    1a9a:	01 c0       	rjmp	.+2      	; 0x1a9e <HID_Host_IsReportReceived+0x34>

	ReportReceived = Pipe_IsINReceived();

	Pipe_Freeze();

	return ReportReceived;
    1a9c:	90 e0       	ldi	r25, 0x00	; 0
}
    1a9e:	89 2f       	mov	r24, r25
    1aa0:	08 95       	ret

00001aa2 <HID_Host_SetReportProtocol>:
	return HOST_SENDCONTROL_Successful;
}

#if !defined(HID_HOST_BOOT_PROTOCOL_ONLY)
uint8_t HID_Host_SetReportProtocol(USB_ClassInfo_HID_Host_t* const HIDInterfaceInfo)
{
    1aa2:	cf 92       	push	r12
    1aa4:	df 92       	push	r13
    1aa6:	ef 92       	push	r14
    1aa8:	ff 92       	push	r15
    1aaa:	0f 93       	push	r16
    1aac:	1f 93       	push	r17
    1aae:	df 93       	push	r29
    1ab0:	cf 93       	push	r28
    1ab2:	cd b7       	in	r28, 0x3d	; 61
    1ab4:	de b7       	in	r29, 0x3e	; 62
    1ab6:	8c 01       	movw	r16, r24

	uint8_t LargestReportSizeBits = HIDInterfaceInfo->Config.HIDParserData->LargestReportSizeBits;
	HIDInterfaceInfo->State.LargestReportSize = (LargestReportSizeBits >> 3) + ((LargestReportSizeBits & 0x07) != 0);

	return 0;
}
    1ab8:	cd b6       	in	r12, 0x3d	; 61
    1aba:	de b6       	in	r13, 0x3e	; 62
#if !defined(HID_HOST_BOOT_PROTOCOL_ONLY)
uint8_t HID_Host_SetReportProtocol(USB_ClassInfo_HID_Host_t* const HIDInterfaceInfo)
{
	uint8_t ErrorCode;

	uint8_t HIDReportData[HIDInterfaceInfo->State.HIDReportSize];
    1abc:	dc 01       	movw	r26, r24
    1abe:	50 96       	adiw	r26, 0x10	; 16
    1ac0:	4d 91       	ld	r20, X+
    1ac2:	5c 91       	ld	r21, X
    1ac4:	51 97       	sbiw	r26, 0x11	; 17
    1ac6:	ed b7       	in	r30, 0x3d	; 61
    1ac8:	fe b7       	in	r31, 0x3e	; 62
    1aca:	e4 1b       	sub	r30, r20
    1acc:	f5 0b       	sbc	r31, r21
    1ace:	0f b6       	in	r0, 0x3f	; 63
    1ad0:	f8 94       	cli
    1ad2:	fe bf       	out	0x3e, r31	; 62
    1ad4:	0f be       	out	0x3f, r0	; 63
    1ad6:	ed bf       	out	0x3d, r30	; 61
    1ad8:	2d b7       	in	r18, 0x3d	; 61
    1ada:	3e b7       	in	r19, 0x3e	; 62
    1adc:	2f 5f       	subi	r18, 0xFF	; 255
    1ade:	3f 4f       	sbci	r19, 0xFF	; 255

	USB_ControlRequest = (USB_Request_Header_t)
    1ae0:	18 96       	adiw	r26, 0x08	; 8
    1ae2:	6c 91       	ld	r22, X
    1ae4:	81 e8       	ldi	r24, 0x81	; 129
    1ae6:	80 93 17 05 	sts	0x0517, r24
    1aea:	86 e0       	ldi	r24, 0x06	; 6
    1aec:	80 93 18 05 	sts	0x0518, r24
    1af0:	80 e0       	ldi	r24, 0x00	; 0
    1af2:	92 e2       	ldi	r25, 0x22	; 34
    1af4:	90 93 1a 05 	sts	0x051A, r25
    1af8:	80 93 19 05 	sts	0x0519, r24
    1afc:	60 93 1b 05 	sts	0x051B, r22
    1b00:	10 92 1c 05 	sts	0x051C, r1
    1b04:	50 93 1e 05 	sts	0x051E, r21
    1b08:	40 93 1d 05 	sts	0x051D, r20
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
    1b0c:	10 92 a7 00 	sts	0x00A7, r1
			.wLength       = HIDInterfaceInfo->State.HIDReportSize,
		};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	if ((ErrorCode = USB_Host_SendControlRequest(HIDReportData)) != HOST_SENDCONTROL_Successful)
    1b10:	f2 2e       	mov	r15, r18
    1b12:	e3 2e       	mov	r14, r19
    1b14:	c9 01       	movw	r24, r18
    1b16:	c1 d9       	rcall	.-3198   	; 0xe9a <USB_Host_SendControlRequest>
    1b18:	28 2f       	mov	r18, r24
    1b1a:	88 23       	and	r24, r24
    1b1c:	09 f0       	breq	.+2      	; 0x1b20 <HID_Host_SetReportProtocol+0x7e>
    1b1e:	4f c0       	rjmp	.+158    	; 0x1bbe <HID_Host_SetReportProtocol+0x11c>
	  return ErrorCode;

	if (HIDInterfaceInfo->State.UsingBootProtocol)
    1b20:	d8 01       	movw	r26, r16
    1b22:	1f 96       	adiw	r26, 0x0f	; 15
    1b24:	8c 91       	ld	r24, X
    1b26:	1f 97       	sbiw	r26, 0x0f	; 15
    1b28:	88 23       	and	r24, r24
    1b2a:	f1 f0       	breq	.+60     	; 0x1b68 <HID_Host_SetReportProtocol+0xc6>
	{
		USB_ControlRequest = (USB_Request_Header_t)
    1b2c:	18 96       	adiw	r26, 0x08	; 8
    1b2e:	2c 91       	ld	r18, X
    1b30:	81 e2       	ldi	r24, 0x21	; 33
    1b32:	80 93 17 05 	sts	0x0517, r24
    1b36:	8b e0       	ldi	r24, 0x0B	; 11
    1b38:	80 93 18 05 	sts	0x0518, r24
    1b3c:	81 e0       	ldi	r24, 0x01	; 1
    1b3e:	90 e0       	ldi	r25, 0x00	; 0
    1b40:	90 93 1a 05 	sts	0x051A, r25
    1b44:	80 93 19 05 	sts	0x0519, r24
    1b48:	20 93 1b 05 	sts	0x051B, r18
    1b4c:	10 92 1c 05 	sts	0x051C, r1
    1b50:	10 92 1e 05 	sts	0x051E, r1
    1b54:	10 92 1d 05 	sts	0x051D, r1
				.wValue        = 1,
				.wIndex        = HIDInterfaceInfo->State.InterfaceNumber,
				.wLength       = 0,
			};

		if ((ErrorCode = USB_Host_SendControlRequest(NULL)) != HOST_SENDCONTROL_Successful)
    1b58:	80 e0       	ldi	r24, 0x00	; 0
    1b5a:	90 e0       	ldi	r25, 0x00	; 0
    1b5c:	9e d9       	rcall	.-3268   	; 0xe9a <USB_Host_SendControlRequest>
    1b5e:	28 2f       	mov	r18, r24
    1b60:	88 23       	and	r24, r24
    1b62:	69 f5       	brne	.+90     	; 0x1bbe <HID_Host_SetReportProtocol+0x11c>
		  return ErrorCode;

		HIDInterfaceInfo->State.UsingBootProtocol = false;
    1b64:	f8 01       	movw	r30, r16
    1b66:	17 86       	std	Z+15, r1	; 0x0f
	}

	if (HIDInterfaceInfo->Config.HIDParserData == NULL)
    1b68:	d8 01       	movw	r26, r16
    1b6a:	15 96       	adiw	r26, 0x05	; 5
    1b6c:	4d 91       	ld	r20, X+
    1b6e:	5c 91       	ld	r21, X
    1b70:	16 97       	sbiw	r26, 0x06	; 6
    1b72:	41 15       	cp	r20, r1
    1b74:	51 05       	cpc	r21, r1
    1b76:	11 f4       	brne	.+4      	; 0x1b7c <HID_Host_SetReportProtocol+0xda>
    1b78:	20 e8       	ldi	r18, 0x80	; 128
    1b7a:	21 c0       	rjmp	.+66     	; 0x1bbe <HID_Host_SetReportProtocol+0x11c>
	  return HID_ERROR_LOGICAL;

	if ((ErrorCode = USB_ProcessHIDReport(HIDReportData, HIDInterfaceInfo->State.HIDReportSize,
    1b7c:	f8 01       	movw	r30, r16
    1b7e:	60 89       	ldd	r22, Z+16	; 0x10
    1b80:	71 89       	ldd	r23, Z+17	; 0x11
    1b82:	8f 2d       	mov	r24, r15
    1b84:	9e 2d       	mov	r25, r14
    1b86:	6b db       	rcall	.-2346   	; 0x125e <USB_ProcessHIDReport>
    1b88:	28 2f       	mov	r18, r24
    1b8a:	88 23       	and	r24, r24
    1b8c:	11 f0       	breq	.+4      	; 0x1b92 <HID_Host_SetReportProtocol+0xf0>
	                                      HIDInterfaceInfo->Config.HIDParserData)) != HID_PARSE_Successful)
	{
		return HID_ERROR_LOGICAL | ErrorCode;
    1b8e:	20 68       	ori	r18, 0x80	; 128
    1b90:	16 c0       	rjmp	.+44     	; 0x1bbe <HID_Host_SetReportProtocol+0x11c>
	}

	uint8_t LargestReportSizeBits = HIDInterfaceInfo->Config.HIDParserData->LargestReportSizeBits;
    1b92:	d8 01       	movw	r26, r16
    1b94:	15 96       	adiw	r26, 0x05	; 5
    1b96:	ed 91       	ld	r30, X+
    1b98:	fc 91       	ld	r31, X
    1b9a:	16 97       	sbiw	r26, 0x06	; 6
    1b9c:	ea 52       	subi	r30, 0x2A	; 42
    1b9e:	fc 4f       	sbci	r31, 0xFC	; 252
    1ba0:	e0 81       	ld	r30, Z
	HIDInterfaceInfo->State.LargestReportSize = (LargestReportSizeBits >> 3) + ((LargestReportSizeBits & 0x07) != 0);
    1ba2:	30 e0       	ldi	r19, 0x00	; 0
    1ba4:	8e 2f       	mov	r24, r30
    1ba6:	90 e0       	ldi	r25, 0x00	; 0
    1ba8:	87 70       	andi	r24, 0x07	; 7
    1baa:	90 70       	andi	r25, 0x00	; 0
    1bac:	89 2b       	or	r24, r25
    1bae:	09 f0       	breq	.+2      	; 0x1bb2 <HID_Host_SetReportProtocol+0x110>
    1bb0:	31 e0       	ldi	r19, 0x01	; 1
    1bb2:	e6 95       	lsr	r30
    1bb4:	e6 95       	lsr	r30
    1bb6:	e6 95       	lsr	r30
    1bb8:	3e 0f       	add	r19, r30
    1bba:	f8 01       	movw	r30, r16
    1bbc:	32 8b       	std	Z+18, r19	; 0x12

	return 0;
}
    1bbe:	82 2f       	mov	r24, r18
    1bc0:	0f b6       	in	r0, 0x3f	; 63
    1bc2:	f8 94       	cli
    1bc4:	de be       	out	0x3e, r13	; 62
    1bc6:	0f be       	out	0x3f, r0	; 63
    1bc8:	cd be       	out	0x3d, r12	; 61
    1bca:	cf 91       	pop	r28
    1bcc:	df 91       	pop	r29
    1bce:	1f 91       	pop	r17
    1bd0:	0f 91       	pop	r16
    1bd2:	ff 90       	pop	r15
    1bd4:	ef 90       	pop	r14
    1bd6:	df 90       	pop	r13
    1bd8:	cf 90       	pop	r12
    1bda:	08 95       	ret

00001bdc <HID_Host_ReceiveReport>:
}
#endif

uint8_t HID_Host_ReceiveReport(USB_ClassInfo_HID_Host_t* const HIDInterfaceInfo,
                               void* Buffer)
{
    1bdc:	cf 93       	push	r28
    1bde:	df 93       	push	r29
    1be0:	dc 01       	movw	r26, r24
	if ((USB_HostState != HOST_STATE_Configured) || !(HIDInterfaceInfo->State.IsActive))
    1be2:	80 91 1f 05 	lds	r24, 0x051F
    1be6:	8c 30       	cpi	r24, 0x0C	; 12
    1be8:	09 f0       	breq	.+2      	; 0x1bec <HID_Host_ReceiveReport+0x10>
    1bea:	3f c0       	rjmp	.+126    	; 0x1c6a <HID_Host_ReceiveReport+0x8e>
    1bec:	17 96       	adiw	r26, 0x07	; 7
    1bee:	8c 91       	ld	r24, X
    1bf0:	17 97       	sbiw	r26, 0x07	; 7
    1bf2:	88 23       	and	r24, r24
    1bf4:	d1 f1       	breq	.+116    	; 0x1c6a <HID_Host_ReceiveReport+0x8e>
	  return PIPE_READYWAIT_DeviceDisconnected;

	uint8_t ErrorCode;

	Pipe_SelectPipe(HIDInterfaceInfo->Config.DataINPipeNumber);
    1bf6:	8c 91       	ld	r24, X
    1bf8:	80 93 a7 00 	sts	0x00A7, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    1bfc:	80 91 a9 00 	lds	r24, 0x00A9
    1c00:	8f 7b       	andi	r24, 0xBF	; 191
    1c02:	80 93 a9 00 	sts	0x00A9, r24
	Pipe_Unfreeze();

	uint16_t ReportSize;
	uint8_t* BufferPos = Buffer;
    1c06:	eb 01       	movw	r28, r22

#if !defined(HID_HOST_BOOT_PROTOCOL_ONLY)
	if (!(HIDInterfaceInfo->State.UsingBootProtocol))
    1c08:	1f 96       	adiw	r26, 0x0f	; 15
    1c0a:	8c 91       	ld	r24, X
    1c0c:	1f 97       	sbiw	r26, 0x0f	; 15
    1c0e:	88 23       	and	r24, r24
    1c10:	b1 f4       	brne	.+44     	; 0x1c3e <HID_Host_ReceiveReport+0x62>
	{
		uint8_t ReportID = 0;

		if (HIDInterfaceInfo->Config.HIDParserData->UsingReportIDs)
    1c12:	15 96       	adiw	r26, 0x05	; 5
    1c14:	ed 91       	ld	r30, X+
    1c16:	fc 91       	ld	r31, X
    1c18:	16 97       	sbiw	r26, 0x06	; 6
    1c1a:	e8 52       	subi	r30, 0x28	; 40
    1c1c:	fc 4f       	sbci	r31, 0xFC	; 252
    1c1e:	80 81       	ld	r24, Z
    1c20:	88 23       	and	r24, r24
    1c22:	11 f4       	brne	.+4      	; 0x1c28 <HID_Host_ReceiveReport+0x4c>
    1c24:	60 e0       	ldi	r22, 0x00	; 0
    1c26:	03 c0       	rjmp	.+6      	; 0x1c2e <HID_Host_ReceiveReport+0x52>
			 *  \return Next byte in the currently selected pipe's FIFO buffer.
			 */
			static inline uint8_t Pipe_Read_Byte(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_Read_Byte(void)
			{
				return UPDATX;
    1c28:	60 91 af 00 	lds	r22, 0x00AF
		{
			ReportID = Pipe_Read_Byte();
			*(BufferPos++) = ReportID;
    1c2c:	69 93       	st	Y+, r22
		}

		ReportSize = USB_GetHIDReportSize(HIDInterfaceInfo->Config.HIDParserData, ReportID, HID_REPORT_ITEM_In);
    1c2e:	15 96       	adiw	r26, 0x05	; 5
    1c30:	8d 91       	ld	r24, X+
    1c32:	9c 91       	ld	r25, X
    1c34:	16 97       	sbiw	r26, 0x06	; 6
    1c36:	40 e0       	ldi	r20, 0x00	; 0
    1c38:	e7 da       	rcall	.-2610   	; 0x1208 <USB_GetHIDReportSize>
    1c3a:	bc 01       	movw	r22, r24
    1c3c:	04 c0       	rjmp	.+8      	; 0x1c46 <HID_Host_ReceiveReport+0x6a>
			 *  \return Total number of bytes in the currently selected Pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
    1c3e:	60 91 f6 00 	lds	r22, 0x00F6
    1c42:	70 91 f7 00 	lds	r23, 0x00F7
#endif
	{
		ReportSize = Pipe_BytesInPipe();
	}

	if ((ErrorCode = Pipe_Read_Stream_LE(BufferPos, ReportSize, NO_STREAM_CALLBACK)) != PIPE_RWSTREAM_NoError)
    1c46:	ce 01       	movw	r24, r28
    1c48:	40 e0       	ldi	r20, 0x00	; 0
    1c4a:	50 e0       	ldi	r21, 0x00	; 0
    1c4c:	28 da       	rcall	.-2992   	; 0x109e <Pipe_Read_Stream_LE>
    1c4e:	98 2f       	mov	r25, r24
    1c50:	88 23       	and	r24, r24
    1c52:	61 f4       	brne	.+24     	; 0x1c6c <HID_Host_ReceiveReport+0x90>
			 *  \ingroup Group_PipePacketManagement
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
    1c54:	80 91 a6 00 	lds	r24, 0x00A6
    1c58:	8e 77       	andi	r24, 0x7E	; 126
    1c5a:	80 93 a6 00 	sts	0x00A6, r24

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    1c5e:	80 91 a9 00 	lds	r24, 0x00A9
    1c62:	80 64       	ori	r24, 0x40	; 64
    1c64:	80 93 a9 00 	sts	0x00A9, r24
    1c68:	01 c0       	rjmp	.+2      	; 0x1c6c <HID_Host_ReceiveReport+0x90>
	  return ErrorCode;

	Pipe_ClearIN();
	Pipe_Freeze();

	return PIPE_RWSTREAM_NoError;
    1c6a:	92 e0       	ldi	r25, 0x02	; 2
}
    1c6c:	89 2f       	mov	r24, r25
    1c6e:	df 91       	pop	r29
    1c70:	cf 91       	pop	r28
    1c72:	08 95       	ret

00001c74 <HID_Host_ConfigurePipes>:
#include "HID.h"

uint8_t HID_Host_ConfigurePipes(USB_ClassInfo_HID_Host_t* const HIDInterfaceInfo,
                                uint16_t ConfigDescriptorSize,
                                void* ConfigDescriptorData)
{
    1c74:	3f 92       	push	r3
    1c76:	4f 92       	push	r4
    1c78:	5f 92       	push	r5
    1c7a:	6f 92       	push	r6
    1c7c:	7f 92       	push	r7
    1c7e:	8f 92       	push	r8
    1c80:	9f 92       	push	r9
    1c82:	af 92       	push	r10
    1c84:	bf 92       	push	r11
    1c86:	cf 92       	push	r12
    1c88:	df 92       	push	r13
    1c8a:	ef 92       	push	r14
    1c8c:	ff 92       	push	r15
    1c8e:	0f 93       	push	r16
    1c90:	1f 93       	push	r17
    1c92:	df 93       	push	r29
    1c94:	cf 93       	push	r28
    1c96:	00 d0       	rcall	.+0      	; 0x1c98 <HID_Host_ConfigurePipes+0x24>
    1c98:	00 d0       	rcall	.+0      	; 0x1c9a <HID_Host_ConfigurePipes+0x26>
    1c9a:	cd b7       	in	r28, 0x3d	; 61
    1c9c:	de b7       	in	r29, 0x3e	; 62
    1c9e:	6c 01       	movw	r12, r24
    1ca0:	7a 83       	std	Y+2, r23	; 0x02
    1ca2:	69 83       	std	Y+1, r22	; 0x01
    1ca4:	5c 83       	std	Y+4, r21	; 0x04
    1ca6:	4b 83       	std	Y+3, r20	; 0x03
	USB_Descriptor_Endpoint_t*  DataINEndpoint  = NULL;
	USB_Descriptor_Endpoint_t*  DataOUTEndpoint = NULL;
	USB_Descriptor_Interface_t* HIDInterface    = NULL;
	USB_HID_Descriptor_HID_t*   HIDDescriptor   = NULL;

	memset(&HIDInterfaceInfo->State, 0x00, sizeof(HIDInterfaceInfo->State));
    1ca8:	07 96       	adiw	r24, 0x07	; 7
    1caa:	fc 01       	movw	r30, r24
    1cac:	8c e0       	ldi	r24, 0x0C	; 12
    1cae:	df 01       	movw	r26, r30
    1cb0:	1d 92       	st	X+, r1
    1cb2:	8a 95       	dec	r24
    1cb4:	e9 f7       	brne	.-6      	; 0x1cb0 <HID_Host_ConfigurePipes+0x3c>

	if (DESCRIPTOR_TYPE(ConfigDescriptorData) != DTYPE_Configuration)
    1cb6:	eb 81       	ldd	r30, Y+3	; 0x03
    1cb8:	fc 81       	ldd	r31, Y+4	; 0x04
    1cba:	81 81       	ldd	r24, Z+1	; 0x01
    1cbc:	82 30       	cpi	r24, 0x02	; 2
    1cbe:	11 f0       	breq	.+4      	; 0x1cc4 <HID_Host_ConfigurePipes+0x50>
    1cc0:	81 e0       	ldi	r24, 0x01	; 1
    1cc2:	bb c0       	rjmp	.+374    	; 0x1e3a <HID_Host_ConfigurePipes+0x1c6>
    1cc4:	88 24       	eor	r8, r8
    1cc6:	99 24       	eor	r9, r9
    1cc8:	aa 24       	eor	r10, r10
    1cca:	bb 24       	eor	r11, r11
    1ccc:	66 24       	eor	r6, r6
    1cce:	77 24       	eor	r7, r7
    1cd0:	44 24       	eor	r4, r4
    1cd2:	55 24       	eor	r5, r5
	  return HID_ENUMERROR_InvalidConfigDescriptor;

	while (!(DataINEndpoint) || !(DataOUTEndpoint))
	{
		if (!(HIDInterface) ||
    1cd4:	93 e0       	ldi	r25, 0x03	; 3
    1cd6:	e9 2e       	mov	r14, r25
    1cd8:	f1 2c       	mov	r15, r1
    1cda:	ec 0e       	add	r14, r28
    1cdc:	fd 1e       	adc	r15, r29
    1cde:	8e 01       	movw	r16, r28
    1ce0:	0f 5f       	subi	r16, 0xFF	; 255
    1ce2:	1f 4f       	sbci	r17, 0xFF	; 255
    1ce4:	61 14       	cp	r6, r1
    1ce6:	71 04       	cpc	r7, r1
    1ce8:	39 f0       	breq	.+14     	; 0x1cf8 <HID_Host_ConfigurePipes+0x84>
    1cea:	c8 01       	movw	r24, r16
    1cec:	b7 01       	movw	r22, r14
    1cee:	43 e3       	ldi	r20, 0x33	; 51
    1cf0:	5f e0       	ldi	r21, 0x0F	; 15
    1cf2:	0e d8       	rcall	.-4068   	; 0xd10 <USB_GetNextDescriptorComp>
    1cf4:	88 23       	and	r24, r24
    1cf6:	29 f1       	breq	.+74     	; 0x1d42 <HID_Host_ConfigurePipes+0xce>
		    USB_GetNextDescriptorComp(&ConfigDescriptorSize, &ConfigDescriptorData,
		                              DCOMP_HID_Host_NextHIDInterfaceEndpoint) != DESCRIPTOR_SEARCH_COMP_Found)
		{
			if (DataINEndpoint || DataOUTEndpoint)
    1cf8:	81 14       	cp	r8, r1
    1cfa:	91 04       	cpc	r9, r1
    1cfc:	81 f5       	brne	.+96     	; 0x1d5e <HID_Host_ConfigurePipes+0xea>
    1cfe:	a1 14       	cp	r10, r1
    1d00:	b1 04       	cpc	r11, r1
    1d02:	69 f5       	brne	.+90     	; 0x1d5e <HID_Host_ConfigurePipes+0xea>
			  break;

			do
			{
				if (USB_GetNextDescriptorComp(&ConfigDescriptorSize, &ConfigDescriptorData,
    1d04:	c8 01       	movw	r24, r16
    1d06:	b7 01       	movw	r22, r14
    1d08:	4e e1       	ldi	r20, 0x1E	; 30
    1d0a:	5d e0       	ldi	r21, 0x0D	; 13
    1d0c:	01 d8       	rcall	.-4094   	; 0xd10 <USB_GetNextDescriptorComp>
    1d0e:	88 23       	and	r24, r24
    1d10:	09 f0       	breq	.+2      	; 0x1d14 <HID_Host_ConfigurePipes+0xa0>
    1d12:	92 c0       	rjmp	.+292    	; 0x1e38 <HID_Host_ConfigurePipes+0x1c4>
				                              DCOMP_HID_Host_NextHIDInterface) != DESCRIPTOR_SEARCH_COMP_Found)
				{
					return HID_ENUMERROR_NoCompatibleInterfaceFound;
				}

				HIDInterface = DESCRIPTOR_PCAST(ConfigDescriptorData, USB_Descriptor_Interface_t);
    1d14:	6b 80       	ldd	r6, Y+3	; 0x03
    1d16:	7c 80       	ldd	r7, Y+4	; 0x04
			} while (HIDInterfaceInfo->Config.HIDInterfaceProtocol &&
					 (HIDInterface->Protocol != HIDInterfaceInfo->Config.HIDInterfaceProtocol));
    1d18:	f6 01       	movw	r30, r12
    1d1a:	94 81       	ldd	r25, Z+4	; 0x04
    1d1c:	99 23       	and	r25, r25
    1d1e:	29 f0       	breq	.+10     	; 0x1d2a <HID_Host_ConfigurePipes+0xb6>
    1d20:	d3 01       	movw	r26, r6
    1d22:	17 96       	adiw	r26, 0x07	; 7
    1d24:	8c 91       	ld	r24, X
    1d26:	89 17       	cp	r24, r25
    1d28:	69 f7       	brne	.-38     	; 0x1d04 <HID_Host_ConfigurePipes+0x90>

			if (USB_GetNextDescriptorComp(&ConfigDescriptorSize, &ConfigDescriptorData,
    1d2a:	c8 01       	movw	r24, r16
    1d2c:	b7 01       	movw	r22, r14
    1d2e:	49 e2       	ldi	r20, 0x29	; 41
    1d30:	5d e0       	ldi	r21, 0x0D	; 13
    1d32:	0e 94 88 06 	call	0xd10	; 0xd10 <USB_GetNextDescriptorComp>
    1d36:	88 23       	and	r24, r24
    1d38:	09 f0       	breq	.+2      	; 0x1d3c <HID_Host_ConfigurePipes+0xc8>
    1d3a:	7e c0       	rjmp	.+252    	; 0x1e38 <HID_Host_ConfigurePipes+0x1c4>
			                              DCOMP_HID_Host_NextHID) != DESCRIPTOR_SEARCH_COMP_Found)
			{
				return HID_ENUMERROR_NoCompatibleInterfaceFound;
			}

			HIDDescriptor = DESCRIPTOR_PCAST(ConfigDescriptorData, USB_HID_Descriptor_HID_t);
    1d3c:	4b 80       	ldd	r4, Y+3	; 0x03
    1d3e:	5c 80       	ldd	r5, Y+4	; 0x04
    1d40:	d1 cf       	rjmp	.-94     	; 0x1ce4 <HID_Host_ConfigurePipes+0x70>
			DataOUTEndpoint = NULL;

			continue;
		}

		USB_Descriptor_Endpoint_t* EndpointData = DESCRIPTOR_PCAST(ConfigDescriptorData, USB_Descriptor_Endpoint_t);
    1d42:	eb 81       	ldd	r30, Y+3	; 0x03
    1d44:	fc 81       	ldd	r31, Y+4	; 0x04

		if (EndpointData->EndpointAddress & ENDPOINT_DESCRIPTOR_DIR_IN)
    1d46:	82 81       	ldd	r24, Z+2	; 0x02
    1d48:	87 fd       	sbrc	r24, 7
    1d4a:	02 c0       	rjmp	.+4      	; 0x1d50 <HID_Host_ConfigurePipes+0xdc>
    1d4c:	5f 01       	movw	r10, r30
    1d4e:	01 c0       	rjmp	.+2      	; 0x1d52 <HID_Host_ConfigurePipes+0xde>
    1d50:	4f 01       	movw	r8, r30
	memset(&HIDInterfaceInfo->State, 0x00, sizeof(HIDInterfaceInfo->State));

	if (DESCRIPTOR_TYPE(ConfigDescriptorData) != DTYPE_Configuration)
	  return HID_ENUMERROR_InvalidConfigDescriptor;

	while (!(DataINEndpoint) || !(DataOUTEndpoint))
    1d52:	81 14       	cp	r8, r1
    1d54:	91 04       	cpc	r9, r1
    1d56:	31 f2       	breq	.-116    	; 0x1ce4 <HID_Host_ConfigurePipes+0x70>
    1d58:	a1 14       	cp	r10, r1
    1d5a:	b1 04       	cpc	r11, r1
    1d5c:	19 f2       	breq	.-122    	; 0x1ce4 <HID_Host_ConfigurePipes+0x70>
    1d5e:	ff 24       	eor	r15, r15
    1d60:	f3 94       	inc	r15
			                   DataOUTEndpoint->EndpointAddress, DataOUTEndpoint->EndpointSize,
			                   HIDInterfaceInfo->Config.DataOUTPipeDoubleBank ? PIPE_BANK_DOUBLE : PIPE_BANK_SINGLE);
			Pipe_SetInterruptPeriod(DataOUTEndpoint->PollingIntervalMS);

			HIDInterfaceInfo->State.DataOUTPipeSize = DataOUTEndpoint->EndpointSize;
			HIDInterfaceInfo->State.DeviceUsesOUTPipe = true;
    1d62:	33 24       	eor	r3, r3
    1d64:	33 94       	inc	r3
		  DataOUTEndpoint = EndpointData;
	}

	for (uint8_t PipeNum = 1; PipeNum < PIPE_TOTAL_PIPES; PipeNum++)
	{
		if (PipeNum == HIDInterfaceInfo->Config.DataINPipeNumber)
    1d66:	f6 01       	movw	r30, r12
    1d68:	80 81       	ld	r24, Z
    1d6a:	f8 16       	cp	r15, r24
    1d6c:	01 f5       	brne	.+64     	; 0x1dae <HID_Host_ConfigurePipes+0x13a>
		{
			Pipe_ConfigurePipe(PipeNum, EP_TYPE_INTERRUPT, PIPE_TOKEN_IN,
    1d6e:	d4 01       	movw	r26, r8
    1d70:	12 96       	adiw	r26, 0x02	; 2
    1d72:	2c 91       	ld	r18, X
    1d74:	12 97       	sbiw	r26, 0x02	; 2
    1d76:	14 96       	adiw	r26, 0x04	; 4
    1d78:	0d 91       	ld	r16, X+
    1d7a:	1c 91       	ld	r17, X
    1d7c:	15 97       	sbiw	r26, 0x05	; 5
    1d7e:	81 81       	ldd	r24, Z+1	; 0x01
    1d80:	88 23       	and	r24, r24
    1d82:	11 f4       	brne	.+4      	; 0x1d88 <HID_Host_ConfigurePipes+0x114>
    1d84:	90 e0       	ldi	r25, 0x00	; 0
    1d86:	01 c0       	rjmp	.+2      	; 0x1d8a <HID_Host_ConfigurePipes+0x116>
    1d88:	94 e0       	ldi	r25, 0x04	; 4
    1d8a:	8f 2d       	mov	r24, r15
    1d8c:	63 e0       	ldi	r22, 0x03	; 3
    1d8e:	40 e1       	ldi	r20, 0x10	; 16
    1d90:	e9 2e       	mov	r14, r25
    1d92:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <Pipe_ConfigurePipe>
			                   DataINEndpoint->EndpointAddress, DataINEndpoint->EndpointSize,
			                   HIDInterfaceInfo->Config.DataINPipeDoubleBank ? PIPE_BANK_DOUBLE : PIPE_BANK_SINGLE);
			Pipe_SetInterruptPeriod(DataINEndpoint->PollingIntervalMS);
    1d96:	f4 01       	movw	r30, r8
    1d98:	86 81       	ldd	r24, Z+6	; 0x06
			 *  \param[in] Milliseconds  Number of milliseconds between each pipe poll.
			 */
			static inline void Pipe_SetInterruptPeriod(const uint8_t Milliseconds) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetInterruptPeriod(const uint8_t Milliseconds)
			{
				UPCFG2X = Milliseconds;
    1d9a:	80 93 ad 00 	sts	0x00AD, r24

			HIDInterfaceInfo->State.DataINPipeSize = DataINEndpoint->EndpointSize;
    1d9e:	84 81       	ldd	r24, Z+4	; 0x04
    1da0:	95 81       	ldd	r25, Z+5	; 0x05
    1da2:	d6 01       	movw	r26, r12
    1da4:	1a 96       	adiw	r26, 0x0a	; 10
    1da6:	9c 93       	st	X, r25
    1da8:	8e 93       	st	-X, r24
    1daa:	19 97       	sbiw	r26, 0x09	; 9
    1dac:	25 c0       	rjmp	.+74     	; 0x1df8 <HID_Host_ConfigurePipes+0x184>
		}
		else if (PipeNum == HIDInterfaceInfo->Config.DataOUTPipeNumber)
    1dae:	f6 01       	movw	r30, r12
    1db0:	82 81       	ldd	r24, Z+2	; 0x02
    1db2:	f8 16       	cp	r15, r24
    1db4:	09 f5       	brne	.+66     	; 0x1df8 <HID_Host_ConfigurePipes+0x184>
		{
			Pipe_ConfigurePipe(PipeNum, EP_TYPE_INTERRUPT, PIPE_TOKEN_OUT,
    1db6:	d5 01       	movw	r26, r10
    1db8:	12 96       	adiw	r26, 0x02	; 2
    1dba:	2c 91       	ld	r18, X
    1dbc:	12 97       	sbiw	r26, 0x02	; 2
    1dbe:	14 96       	adiw	r26, 0x04	; 4
    1dc0:	0d 91       	ld	r16, X+
    1dc2:	1c 91       	ld	r17, X
    1dc4:	15 97       	sbiw	r26, 0x05	; 5
    1dc6:	83 81       	ldd	r24, Z+3	; 0x03
    1dc8:	88 23       	and	r24, r24
    1dca:	11 f4       	brne	.+4      	; 0x1dd0 <HID_Host_ConfigurePipes+0x15c>
    1dcc:	90 e0       	ldi	r25, 0x00	; 0
    1dce:	01 c0       	rjmp	.+2      	; 0x1dd2 <HID_Host_ConfigurePipes+0x15e>
    1dd0:	94 e0       	ldi	r25, 0x04	; 4
    1dd2:	8f 2d       	mov	r24, r15
    1dd4:	63 e0       	ldi	r22, 0x03	; 3
    1dd6:	40 e2       	ldi	r20, 0x20	; 32
    1dd8:	e9 2e       	mov	r14, r25
    1dda:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <Pipe_ConfigurePipe>
			                   DataOUTEndpoint->EndpointAddress, DataOUTEndpoint->EndpointSize,
			                   HIDInterfaceInfo->Config.DataOUTPipeDoubleBank ? PIPE_BANK_DOUBLE : PIPE_BANK_SINGLE);
			Pipe_SetInterruptPeriod(DataOUTEndpoint->PollingIntervalMS);
    1dde:	f5 01       	movw	r30, r10
    1de0:	86 81       	ldd	r24, Z+6	; 0x06
    1de2:	80 93 ad 00 	sts	0x00AD, r24

			HIDInterfaceInfo->State.DataOUTPipeSize = DataOUTEndpoint->EndpointSize;
    1de6:	84 81       	ldd	r24, Z+4	; 0x04
    1de8:	95 81       	ldd	r25, Z+5	; 0x05
    1dea:	d6 01       	movw	r26, r12
    1dec:	1c 96       	adiw	r26, 0x0c	; 12
    1dee:	9c 93       	st	X, r25
    1df0:	8e 93       	st	-X, r24
    1df2:	1b 97       	sbiw	r26, 0x0b	; 11
			HIDInterfaceInfo->State.DeviceUsesOUTPipe = true;
    1df4:	1e 96       	adiw	r26, 0x0e	; 14
    1df6:	3c 92       	st	X, r3
		  DataINEndpoint = EndpointData;
		else
		  DataOUTEndpoint = EndpointData;
	}

	for (uint8_t PipeNum = 1; PipeNum < PIPE_TOTAL_PIPES; PipeNum++)
    1df8:	f3 94       	inc	r15
    1dfa:	b7 e0       	ldi	r27, 0x07	; 7
    1dfc:	fb 16       	cp	r15, r27
    1dfe:	09 f0       	breq	.+2      	; 0x1e02 <HID_Host_ConfigurePipes+0x18e>
    1e00:	b2 cf       	rjmp	.-156    	; 0x1d66 <HID_Host_ConfigurePipes+0xf2>
			HIDInterfaceInfo->State.DataOUTPipeSize = DataOUTEndpoint->EndpointSize;
			HIDInterfaceInfo->State.DeviceUsesOUTPipe = true;
		}
	}

	HIDInterfaceInfo->State.InterfaceNumber      = HIDInterface->InterfaceNumber;
    1e02:	f3 01       	movw	r30, r6
    1e04:	82 81       	ldd	r24, Z+2	; 0x02
    1e06:	d6 01       	movw	r26, r12
    1e08:	18 96       	adiw	r26, 0x08	; 8
    1e0a:	8c 93       	st	X, r24
    1e0c:	18 97       	sbiw	r26, 0x08	; 8
	HIDInterfaceInfo->State.HIDReportSize        = HIDDescriptor->HIDReportLength;
    1e0e:	f2 01       	movw	r30, r4
    1e10:	87 81       	ldd	r24, Z+7	; 0x07
    1e12:	90 85       	ldd	r25, Z+8	; 0x08
    1e14:	51 96       	adiw	r26, 0x11	; 17
    1e16:	9c 93       	st	X, r25
    1e18:	8e 93       	st	-X, r24
    1e1a:	50 97       	sbiw	r26, 0x10	; 16
	HIDInterfaceInfo->State.SupportsBootProtocol = (HIDInterface->SubClass != HID_CSCP_NonBootProtocol);
    1e1c:	90 e0       	ldi	r25, 0x00	; 0
    1e1e:	d3 01       	movw	r26, r6
    1e20:	16 96       	adiw	r26, 0x06	; 6
    1e22:	8c 91       	ld	r24, X
    1e24:	81 11       	cpse	r24, r1
    1e26:	91 e0       	ldi	r25, 0x01	; 1
    1e28:	f6 01       	movw	r30, r12
    1e2a:	95 87       	std	Z+13, r25	; 0x0d
	HIDInterfaceInfo->State.LargestReportSize    = 8;
    1e2c:	88 e0       	ldi	r24, 0x08	; 8
    1e2e:	82 8b       	std	Z+18, r24	; 0x12
	HIDInterfaceInfo->State.IsActive = true;
    1e30:	81 e0       	ldi	r24, 0x01	; 1
    1e32:	87 83       	std	Z+7, r24	; 0x07
    1e34:	80 e0       	ldi	r24, 0x00	; 0
    1e36:	01 c0       	rjmp	.+2      	; 0x1e3a <HID_Host_ConfigurePipes+0x1c6>

	return HID_ENUMERROR_NoError;
    1e38:	82 e0       	ldi	r24, 0x02	; 2
}
    1e3a:	0f 90       	pop	r0
    1e3c:	0f 90       	pop	r0
    1e3e:	0f 90       	pop	r0
    1e40:	0f 90       	pop	r0
    1e42:	cf 91       	pop	r28
    1e44:	df 91       	pop	r29
    1e46:	1f 91       	pop	r17
    1e48:	0f 91       	pop	r16
    1e4a:	ff 90       	pop	r15
    1e4c:	ef 90       	pop	r14
    1e4e:	df 90       	pop	r13
    1e50:	cf 90       	pop	r12
    1e52:	bf 90       	pop	r11
    1e54:	af 90       	pop	r10
    1e56:	9f 90       	pop	r9
    1e58:	8f 90       	pop	r8
    1e5a:	7f 90       	pop	r7
    1e5c:	6f 90       	pop	r6
    1e5e:	5f 90       	pop	r5
    1e60:	4f 90       	pop	r4
    1e62:	3f 90       	pop	r3
    1e64:	08 95       	ret

00001e66 <DCOMP_HID_Host_NextHIDInterfaceEndpoint>:
	else
	  return DESCRIPTOR_SEARCH_NotFound;
}

static uint8_t DCOMP_HID_Host_NextHIDInterfaceEndpoint(void* const CurrentDescriptor)
{
    1e66:	fc 01       	movw	r30, r24
	USB_Descriptor_Header_t* Header = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Header_t);

	if (Header->Type == DTYPE_Endpoint)
    1e68:	81 81       	ldd	r24, Z+1	; 0x01
    1e6a:	85 30       	cpi	r24, 0x05	; 5
    1e6c:	31 f4       	brne	.+12     	; 0x1e7a <DCOMP_HID_Host_NextHIDInterfaceEndpoint+0x14>
	{
		USB_Descriptor_Endpoint_t* Endpoint = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Endpoint_t);

		if (!(Pipe_IsEndpointBound(Endpoint->EndpointAddress)))
    1e6e:	82 81       	ldd	r24, Z+2	; 0x02
    1e70:	0e 94 1e 05 	call	0xa3c	; 0xa3c <Pipe_IsEndpointBound>
    1e74:	88 23       	and	r24, r24
    1e76:	29 f4       	brne	.+10     	; 0x1e82 <DCOMP_HID_Host_NextHIDInterfaceEndpoint+0x1c>
    1e78:	08 95       	ret
		  return DESCRIPTOR_SEARCH_Found;
	}
	else if (Header->Type == DTYPE_Interface)
    1e7a:	84 30       	cpi	r24, 0x04	; 4
    1e7c:	11 f4       	brne	.+4      	; 0x1e82 <DCOMP_HID_Host_NextHIDInterfaceEndpoint+0x1c>
    1e7e:	81 e0       	ldi	r24, 0x01	; 1
    1e80:	08 95       	ret
    1e82:	82 e0       	ldi	r24, 0x02	; 2
	{
		return DESCRIPTOR_SEARCH_Fail;
	}

	return DESCRIPTOR_SEARCH_NotFound;
}
    1e84:	08 95       	ret

00001e86 <SerialStream_TxByte>:

FILE USARTStream = FDEV_SETUP_STREAM(SerialStream_TxByte, SerialStream_RxByte, _FDEV_SETUP_RW);

static int SerialStream_TxByte(char DataByte,
                               FILE *Stream)
{
    1e86:	98 2f       	mov	r25, r24
			 *  \param[in] DataByte  Byte to transmit through the USART.
			 */
			static inline void Serial_TxByte(const char DataByte) ATTR_ALWAYS_INLINE;
			static inline void Serial_TxByte(const char DataByte)
			{
				while (!(UCSR1A & (1 << UDRE1)));
    1e88:	80 91 c8 00 	lds	r24, 0x00C8
    1e8c:	85 ff       	sbrs	r24, 5
    1e8e:	fc cf       	rjmp	.-8      	; 0x1e88 <SerialStream_TxByte+0x2>
				UDR1 = DataByte;
    1e90:	90 93 ce 00 	sts	0x00CE, r25
	(void)Stream;

	Serial_TxByte(DataByte);
	return 0;
}
    1e94:	80 e0       	ldi	r24, 0x00	; 0
    1e96:	90 e0       	ldi	r25, 0x00	; 0
    1e98:	08 95       	ret

00001e9a <SerialStream_RxByte>:
			 *  \return Boolean true if a character has been received, false otherwise.
			 */
			static inline bool Serial_IsCharReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Serial_IsCharReceived(void)
			{
				return ((UCSR1A & (1 << RXC1)) ? true : false);
    1e9a:	80 91 c8 00 	lds	r24, 0x00C8

static int SerialStream_RxByte(FILE *Stream)
{
	(void)Stream;

	if (!(Serial_IsCharReceived()))
    1e9e:	87 fd       	sbrc	r24, 7
    1ea0:	03 c0       	rjmp	.+6      	; 0x1ea8 <SerialStream_RxByte+0xe>
    1ea2:	2e ef       	ldi	r18, 0xFE	; 254
    1ea4:	3f ef       	ldi	r19, 0xFF	; 255
    1ea6:	08 c0       	rjmp	.+16     	; 0x1eb8 <SerialStream_RxByte+0x1e>
			 *  \return Byte received from the USART.
			 */
			static inline char Serial_RxByte(void) ATTR_ALWAYS_INLINE;
			static inline char Serial_RxByte(void)
			{
				while (!(UCSR1A & (1 << RXC1)));
    1ea8:	80 91 c8 00 	lds	r24, 0x00C8
    1eac:	87 ff       	sbrs	r24, 7
    1eae:	fc cf       	rjmp	.-8      	; 0x1ea8 <SerialStream_RxByte+0xe>
				return UDR1;
    1eb0:	80 91 ce 00 	lds	r24, 0x00CE
	  return _FDEV_EOF;

	return Serial_RxByte();
    1eb4:	28 2f       	mov	r18, r24
    1eb6:	30 e0       	ldi	r19, 0x00	; 0
}
    1eb8:	c9 01       	movw	r24, r18
    1eba:	08 95       	ret

00001ebc <printf_P>:
    1ebc:	df 93       	push	r29
    1ebe:	cf 93       	push	r28
    1ec0:	cd b7       	in	r28, 0x3d	; 61
    1ec2:	de b7       	in	r29, 0x3e	; 62
    1ec4:	fe 01       	movw	r30, r28
    1ec6:	35 96       	adiw	r30, 0x05	; 5
    1ec8:	61 91       	ld	r22, Z+
    1eca:	71 91       	ld	r23, Z+
    1ecc:	a0 91 22 05 	lds	r26, 0x0522
    1ed0:	b0 91 23 05 	lds	r27, 0x0523
    1ed4:	13 96       	adiw	r26, 0x03	; 3
    1ed6:	8c 91       	ld	r24, X
    1ed8:	13 97       	sbiw	r26, 0x03	; 3
    1eda:	88 60       	ori	r24, 0x08	; 8
    1edc:	13 96       	adiw	r26, 0x03	; 3
    1ede:	8c 93       	st	X, r24
    1ee0:	80 91 22 05 	lds	r24, 0x0522
    1ee4:	90 91 23 05 	lds	r25, 0x0523
    1ee8:	af 01       	movw	r20, r30
    1eea:	3f d0       	rcall	.+126    	; 0x1f6a <vfprintf>
    1eec:	e0 91 22 05 	lds	r30, 0x0522
    1ef0:	f0 91 23 05 	lds	r31, 0x0523
    1ef4:	23 81       	ldd	r18, Z+3	; 0x03
    1ef6:	27 7f       	andi	r18, 0xF7	; 247
    1ef8:	23 83       	std	Z+3, r18	; 0x03
    1efa:	cf 91       	pop	r28
    1efc:	df 91       	pop	r29
    1efe:	08 95       	ret

00001f00 <puts_P>:
    1f00:	0f 93       	push	r16
    1f02:	1f 93       	push	r17
    1f04:	cf 93       	push	r28
    1f06:	df 93       	push	r29
    1f08:	ec 01       	movw	r28, r24
    1f0a:	e0 91 22 05 	lds	r30, 0x0522
    1f0e:	f0 91 23 05 	lds	r31, 0x0523
    1f12:	83 81       	ldd	r24, Z+3	; 0x03
    1f14:	81 ff       	sbrs	r24, 1
    1f16:	21 c0       	rjmp	.+66     	; 0x1f5a <puts_P+0x5a>
    1f18:	00 e0       	ldi	r16, 0x00	; 0
    1f1a:	10 e0       	ldi	r17, 0x00	; 0
    1f1c:	0e c0       	rjmp	.+28     	; 0x1f3a <puts_P+0x3a>
    1f1e:	e0 91 22 05 	lds	r30, 0x0522
    1f22:	f0 91 23 05 	lds	r31, 0x0523
    1f26:	20 85       	ldd	r18, Z+8	; 0x08
    1f28:	31 85       	ldd	r19, Z+9	; 0x09
    1f2a:	bf 01       	movw	r22, r30
    1f2c:	f9 01       	movw	r30, r18
    1f2e:	09 95       	icall
    1f30:	89 2b       	or	r24, r25
    1f32:	11 f0       	breq	.+4      	; 0x1f38 <puts_P+0x38>
    1f34:	0f ef       	ldi	r16, 0xFF	; 255
    1f36:	1f ef       	ldi	r17, 0xFF	; 255
    1f38:	21 96       	adiw	r28, 0x01	; 1
    1f3a:	fe 01       	movw	r30, r28
    1f3c:	84 91       	lpm	r24, Z+
    1f3e:	88 23       	and	r24, r24
    1f40:	71 f7       	brne	.-36     	; 0x1f1e <puts_P+0x1e>
    1f42:	e0 91 22 05 	lds	r30, 0x0522
    1f46:	f0 91 23 05 	lds	r31, 0x0523
    1f4a:	20 85       	ldd	r18, Z+8	; 0x08
    1f4c:	31 85       	ldd	r19, Z+9	; 0x09
    1f4e:	8a e0       	ldi	r24, 0x0A	; 10
    1f50:	bf 01       	movw	r22, r30
    1f52:	f9 01       	movw	r30, r18
    1f54:	09 95       	icall
    1f56:	89 2b       	or	r24, r25
    1f58:	11 f0       	breq	.+4      	; 0x1f5e <puts_P+0x5e>
    1f5a:	0f ef       	ldi	r16, 0xFF	; 255
    1f5c:	1f ef       	ldi	r17, 0xFF	; 255
    1f5e:	c8 01       	movw	r24, r16
    1f60:	df 91       	pop	r29
    1f62:	cf 91       	pop	r28
    1f64:	1f 91       	pop	r17
    1f66:	0f 91       	pop	r16
    1f68:	08 95       	ret

00001f6a <vfprintf>:
    1f6a:	2f 92       	push	r2
    1f6c:	3f 92       	push	r3
    1f6e:	4f 92       	push	r4
    1f70:	5f 92       	push	r5
    1f72:	6f 92       	push	r6
    1f74:	7f 92       	push	r7
    1f76:	8f 92       	push	r8
    1f78:	9f 92       	push	r9
    1f7a:	af 92       	push	r10
    1f7c:	bf 92       	push	r11
    1f7e:	cf 92       	push	r12
    1f80:	df 92       	push	r13
    1f82:	ef 92       	push	r14
    1f84:	ff 92       	push	r15
    1f86:	0f 93       	push	r16
    1f88:	1f 93       	push	r17
    1f8a:	df 93       	push	r29
    1f8c:	cf 93       	push	r28
    1f8e:	cd b7       	in	r28, 0x3d	; 61
    1f90:	de b7       	in	r29, 0x3e	; 62
    1f92:	2b 97       	sbiw	r28, 0x0b	; 11
    1f94:	0f b6       	in	r0, 0x3f	; 63
    1f96:	f8 94       	cli
    1f98:	de bf       	out	0x3e, r29	; 62
    1f9a:	0f be       	out	0x3f, r0	; 63
    1f9c:	cd bf       	out	0x3d, r28	; 61
    1f9e:	3c 01       	movw	r6, r24
    1fa0:	2b 01       	movw	r4, r22
    1fa2:	5a 01       	movw	r10, r20
    1fa4:	fc 01       	movw	r30, r24
    1fa6:	17 82       	std	Z+7, r1	; 0x07
    1fa8:	16 82       	std	Z+6, r1	; 0x06
    1faa:	83 81       	ldd	r24, Z+3	; 0x03
    1fac:	81 fd       	sbrc	r24, 1
    1fae:	03 c0       	rjmp	.+6      	; 0x1fb6 <vfprintf+0x4c>
    1fb0:	6f ef       	ldi	r22, 0xFF	; 255
    1fb2:	7f ef       	ldi	r23, 0xFF	; 255
    1fb4:	b9 c1       	rjmp	.+882    	; 0x2328 <__stack+0x229>
    1fb6:	9a e0       	ldi	r25, 0x0A	; 10
    1fb8:	89 2e       	mov	r8, r25
    1fba:	1e 01       	movw	r2, r28
    1fbc:	08 94       	sec
    1fbe:	21 1c       	adc	r2, r1
    1fc0:	31 1c       	adc	r3, r1
    1fc2:	f3 01       	movw	r30, r6
    1fc4:	23 81       	ldd	r18, Z+3	; 0x03
    1fc6:	f2 01       	movw	r30, r4
    1fc8:	23 fd       	sbrc	r18, 3
    1fca:	85 91       	lpm	r24, Z+
    1fcc:	23 ff       	sbrs	r18, 3
    1fce:	81 91       	ld	r24, Z+
    1fd0:	2f 01       	movw	r4, r30
    1fd2:	88 23       	and	r24, r24
    1fd4:	09 f4       	brne	.+2      	; 0x1fd8 <vfprintf+0x6e>
    1fd6:	a5 c1       	rjmp	.+842    	; 0x2322 <__stack+0x223>
    1fd8:	85 32       	cpi	r24, 0x25	; 37
    1fda:	39 f4       	brne	.+14     	; 0x1fea <vfprintf+0x80>
    1fdc:	23 fd       	sbrc	r18, 3
    1fde:	85 91       	lpm	r24, Z+
    1fe0:	23 ff       	sbrs	r18, 3
    1fe2:	81 91       	ld	r24, Z+
    1fe4:	2f 01       	movw	r4, r30
    1fe6:	85 32       	cpi	r24, 0x25	; 37
    1fe8:	21 f4       	brne	.+8      	; 0x1ff2 <vfprintf+0x88>
    1fea:	90 e0       	ldi	r25, 0x00	; 0
    1fec:	b3 01       	movw	r22, r6
    1fee:	cc d1       	rcall	.+920    	; 0x2388 <fputc>
    1ff0:	e8 cf       	rjmp	.-48     	; 0x1fc2 <vfprintf+0x58>
    1ff2:	98 2f       	mov	r25, r24
    1ff4:	ff 24       	eor	r15, r15
    1ff6:	ee 24       	eor	r14, r14
    1ff8:	99 24       	eor	r9, r9
    1ffa:	ff e1       	ldi	r31, 0x1F	; 31
    1ffc:	ff 15       	cp	r31, r15
    1ffe:	d0 f0       	brcs	.+52     	; 0x2034 <vfprintf+0xca>
    2000:	9b 32       	cpi	r25, 0x2B	; 43
    2002:	69 f0       	breq	.+26     	; 0x201e <vfprintf+0xb4>
    2004:	9c 32       	cpi	r25, 0x2C	; 44
    2006:	28 f4       	brcc	.+10     	; 0x2012 <vfprintf+0xa8>
    2008:	90 32       	cpi	r25, 0x20	; 32
    200a:	59 f0       	breq	.+22     	; 0x2022 <vfprintf+0xb8>
    200c:	93 32       	cpi	r25, 0x23	; 35
    200e:	91 f4       	brne	.+36     	; 0x2034 <vfprintf+0xca>
    2010:	0e c0       	rjmp	.+28     	; 0x202e <vfprintf+0xc4>
    2012:	9d 32       	cpi	r25, 0x2D	; 45
    2014:	49 f0       	breq	.+18     	; 0x2028 <vfprintf+0xbe>
    2016:	90 33       	cpi	r25, 0x30	; 48
    2018:	69 f4       	brne	.+26     	; 0x2034 <vfprintf+0xca>
    201a:	41 e0       	ldi	r20, 0x01	; 1
    201c:	24 c0       	rjmp	.+72     	; 0x2066 <vfprintf+0xfc>
    201e:	52 e0       	ldi	r21, 0x02	; 2
    2020:	f5 2a       	or	r15, r21
    2022:	84 e0       	ldi	r24, 0x04	; 4
    2024:	f8 2a       	or	r15, r24
    2026:	28 c0       	rjmp	.+80     	; 0x2078 <vfprintf+0x10e>
    2028:	98 e0       	ldi	r25, 0x08	; 8
    202a:	f9 2a       	or	r15, r25
    202c:	25 c0       	rjmp	.+74     	; 0x2078 <vfprintf+0x10e>
    202e:	e0 e1       	ldi	r30, 0x10	; 16
    2030:	fe 2a       	or	r15, r30
    2032:	22 c0       	rjmp	.+68     	; 0x2078 <vfprintf+0x10e>
    2034:	f7 fc       	sbrc	r15, 7
    2036:	29 c0       	rjmp	.+82     	; 0x208a <vfprintf+0x120>
    2038:	89 2f       	mov	r24, r25
    203a:	80 53       	subi	r24, 0x30	; 48
    203c:	8a 30       	cpi	r24, 0x0A	; 10
    203e:	70 f4       	brcc	.+28     	; 0x205c <vfprintf+0xf2>
    2040:	f6 fe       	sbrs	r15, 6
    2042:	05 c0       	rjmp	.+10     	; 0x204e <vfprintf+0xe4>
    2044:	98 9c       	mul	r9, r8
    2046:	90 2c       	mov	r9, r0
    2048:	11 24       	eor	r1, r1
    204a:	98 0e       	add	r9, r24
    204c:	15 c0       	rjmp	.+42     	; 0x2078 <vfprintf+0x10e>
    204e:	e8 9c       	mul	r14, r8
    2050:	e0 2c       	mov	r14, r0
    2052:	11 24       	eor	r1, r1
    2054:	e8 0e       	add	r14, r24
    2056:	f0 e2       	ldi	r31, 0x20	; 32
    2058:	ff 2a       	or	r15, r31
    205a:	0e c0       	rjmp	.+28     	; 0x2078 <vfprintf+0x10e>
    205c:	9e 32       	cpi	r25, 0x2E	; 46
    205e:	29 f4       	brne	.+10     	; 0x206a <vfprintf+0x100>
    2060:	f6 fc       	sbrc	r15, 6
    2062:	5f c1       	rjmp	.+702    	; 0x2322 <__stack+0x223>
    2064:	40 e4       	ldi	r20, 0x40	; 64
    2066:	f4 2a       	or	r15, r20
    2068:	07 c0       	rjmp	.+14     	; 0x2078 <vfprintf+0x10e>
    206a:	9c 36       	cpi	r25, 0x6C	; 108
    206c:	19 f4       	brne	.+6      	; 0x2074 <vfprintf+0x10a>
    206e:	50 e8       	ldi	r21, 0x80	; 128
    2070:	f5 2a       	or	r15, r21
    2072:	02 c0       	rjmp	.+4      	; 0x2078 <vfprintf+0x10e>
    2074:	98 36       	cpi	r25, 0x68	; 104
    2076:	49 f4       	brne	.+18     	; 0x208a <vfprintf+0x120>
    2078:	f2 01       	movw	r30, r4
    207a:	23 fd       	sbrc	r18, 3
    207c:	95 91       	lpm	r25, Z+
    207e:	23 ff       	sbrs	r18, 3
    2080:	91 91       	ld	r25, Z+
    2082:	2f 01       	movw	r4, r30
    2084:	99 23       	and	r25, r25
    2086:	09 f0       	breq	.+2      	; 0x208a <vfprintf+0x120>
    2088:	b8 cf       	rjmp	.-144    	; 0x1ffa <vfprintf+0x90>
    208a:	89 2f       	mov	r24, r25
    208c:	85 54       	subi	r24, 0x45	; 69
    208e:	83 30       	cpi	r24, 0x03	; 3
    2090:	18 f0       	brcs	.+6      	; 0x2098 <vfprintf+0x12e>
    2092:	80 52       	subi	r24, 0x20	; 32
    2094:	83 30       	cpi	r24, 0x03	; 3
    2096:	38 f4       	brcc	.+14     	; 0x20a6 <vfprintf+0x13c>
    2098:	44 e0       	ldi	r20, 0x04	; 4
    209a:	50 e0       	ldi	r21, 0x00	; 0
    209c:	a4 0e       	add	r10, r20
    209e:	b5 1e       	adc	r11, r21
    20a0:	5f e3       	ldi	r21, 0x3F	; 63
    20a2:	59 83       	std	Y+1, r21	; 0x01
    20a4:	0f c0       	rjmp	.+30     	; 0x20c4 <vfprintf+0x15a>
    20a6:	93 36       	cpi	r25, 0x63	; 99
    20a8:	31 f0       	breq	.+12     	; 0x20b6 <vfprintf+0x14c>
    20aa:	93 37       	cpi	r25, 0x73	; 115
    20ac:	79 f0       	breq	.+30     	; 0x20cc <vfprintf+0x162>
    20ae:	93 35       	cpi	r25, 0x53	; 83
    20b0:	09 f0       	breq	.+2      	; 0x20b4 <vfprintf+0x14a>
    20b2:	52 c0       	rjmp	.+164    	; 0x2158 <__stack+0x59>
    20b4:	1f c0       	rjmp	.+62     	; 0x20f4 <vfprintf+0x18a>
    20b6:	f5 01       	movw	r30, r10
    20b8:	80 81       	ld	r24, Z
    20ba:	89 83       	std	Y+1, r24	; 0x01
    20bc:	42 e0       	ldi	r20, 0x02	; 2
    20be:	50 e0       	ldi	r21, 0x00	; 0
    20c0:	a4 0e       	add	r10, r20
    20c2:	b5 1e       	adc	r11, r21
    20c4:	61 01       	movw	r12, r2
    20c6:	01 e0       	ldi	r16, 0x01	; 1
    20c8:	10 e0       	ldi	r17, 0x00	; 0
    20ca:	11 c0       	rjmp	.+34     	; 0x20ee <vfprintf+0x184>
    20cc:	f5 01       	movw	r30, r10
    20ce:	c0 80       	ld	r12, Z
    20d0:	d1 80       	ldd	r13, Z+1	; 0x01
    20d2:	f6 fc       	sbrc	r15, 6
    20d4:	03 c0       	rjmp	.+6      	; 0x20dc <vfprintf+0x172>
    20d6:	6f ef       	ldi	r22, 0xFF	; 255
    20d8:	7f ef       	ldi	r23, 0xFF	; 255
    20da:	02 c0       	rjmp	.+4      	; 0x20e0 <vfprintf+0x176>
    20dc:	69 2d       	mov	r22, r9
    20de:	70 e0       	ldi	r23, 0x00	; 0
    20e0:	42 e0       	ldi	r20, 0x02	; 2
    20e2:	50 e0       	ldi	r21, 0x00	; 0
    20e4:	a4 0e       	add	r10, r20
    20e6:	b5 1e       	adc	r11, r21
    20e8:	c6 01       	movw	r24, r12
    20ea:	43 d1       	rcall	.+646    	; 0x2372 <strnlen>
    20ec:	8c 01       	movw	r16, r24
    20ee:	5f e7       	ldi	r21, 0x7F	; 127
    20f0:	f5 22       	and	r15, r21
    20f2:	13 c0       	rjmp	.+38     	; 0x211a <__stack+0x1b>
    20f4:	f5 01       	movw	r30, r10
    20f6:	c0 80       	ld	r12, Z
    20f8:	d1 80       	ldd	r13, Z+1	; 0x01
    20fa:	f6 fc       	sbrc	r15, 6
    20fc:	03 c0       	rjmp	.+6      	; 0x2104 <__stack+0x5>
    20fe:	6f ef       	ldi	r22, 0xFF	; 255
    2100:	7f ef       	ldi	r23, 0xFF	; 255
    2102:	02 c0       	rjmp	.+4      	; 0x2108 <__stack+0x9>
    2104:	69 2d       	mov	r22, r9
    2106:	70 e0       	ldi	r23, 0x00	; 0
    2108:	42 e0       	ldi	r20, 0x02	; 2
    210a:	50 e0       	ldi	r21, 0x00	; 0
    210c:	a4 0e       	add	r10, r20
    210e:	b5 1e       	adc	r11, r21
    2110:	c6 01       	movw	r24, r12
    2112:	24 d1       	rcall	.+584    	; 0x235c <strnlen_P>
    2114:	8c 01       	movw	r16, r24
    2116:	50 e8       	ldi	r21, 0x80	; 128
    2118:	f5 2a       	or	r15, r21
    211a:	f3 fe       	sbrs	r15, 3
    211c:	06 c0       	rjmp	.+12     	; 0x212a <__stack+0x2b>
    211e:	18 c0       	rjmp	.+48     	; 0x2150 <__stack+0x51>
    2120:	80 e2       	ldi	r24, 0x20	; 32
    2122:	90 e0       	ldi	r25, 0x00	; 0
    2124:	b3 01       	movw	r22, r6
    2126:	30 d1       	rcall	.+608    	; 0x2388 <fputc>
    2128:	ea 94       	dec	r14
    212a:	8e 2d       	mov	r24, r14
    212c:	90 e0       	ldi	r25, 0x00	; 0
    212e:	08 17       	cp	r16, r24
    2130:	19 07       	cpc	r17, r25
    2132:	b0 f3       	brcs	.-20     	; 0x2120 <__stack+0x21>
    2134:	0d c0       	rjmp	.+26     	; 0x2150 <__stack+0x51>
    2136:	f6 01       	movw	r30, r12
    2138:	f7 fc       	sbrc	r15, 7
    213a:	85 91       	lpm	r24, Z+
    213c:	f7 fe       	sbrs	r15, 7
    213e:	81 91       	ld	r24, Z+
    2140:	6f 01       	movw	r12, r30
    2142:	90 e0       	ldi	r25, 0x00	; 0
    2144:	b3 01       	movw	r22, r6
    2146:	20 d1       	rcall	.+576    	; 0x2388 <fputc>
    2148:	e1 10       	cpse	r14, r1
    214a:	ea 94       	dec	r14
    214c:	01 50       	subi	r16, 0x01	; 1
    214e:	10 40       	sbci	r17, 0x00	; 0
    2150:	01 15       	cp	r16, r1
    2152:	11 05       	cpc	r17, r1
    2154:	81 f7       	brne	.-32     	; 0x2136 <__stack+0x37>
    2156:	e2 c0       	rjmp	.+452    	; 0x231c <__stack+0x21d>
    2158:	94 36       	cpi	r25, 0x64	; 100
    215a:	11 f0       	breq	.+4      	; 0x2160 <__stack+0x61>
    215c:	99 36       	cpi	r25, 0x69	; 105
    215e:	61 f5       	brne	.+88     	; 0x21b8 <__stack+0xb9>
    2160:	f7 fe       	sbrs	r15, 7
    2162:	08 c0       	rjmp	.+16     	; 0x2174 <__stack+0x75>
    2164:	f5 01       	movw	r30, r10
    2166:	20 81       	ld	r18, Z
    2168:	31 81       	ldd	r19, Z+1	; 0x01
    216a:	42 81       	ldd	r20, Z+2	; 0x02
    216c:	53 81       	ldd	r21, Z+3	; 0x03
    216e:	84 e0       	ldi	r24, 0x04	; 4
    2170:	90 e0       	ldi	r25, 0x00	; 0
    2172:	0a c0       	rjmp	.+20     	; 0x2188 <__stack+0x89>
    2174:	f5 01       	movw	r30, r10
    2176:	80 81       	ld	r24, Z
    2178:	91 81       	ldd	r25, Z+1	; 0x01
    217a:	9c 01       	movw	r18, r24
    217c:	44 27       	eor	r20, r20
    217e:	37 fd       	sbrc	r19, 7
    2180:	40 95       	com	r20
    2182:	54 2f       	mov	r21, r20
    2184:	82 e0       	ldi	r24, 0x02	; 2
    2186:	90 e0       	ldi	r25, 0x00	; 0
    2188:	a8 0e       	add	r10, r24
    218a:	b9 1e       	adc	r11, r25
    218c:	9f e6       	ldi	r25, 0x6F	; 111
    218e:	f9 22       	and	r15, r25
    2190:	57 ff       	sbrs	r21, 7
    2192:	09 c0       	rjmp	.+18     	; 0x21a6 <__stack+0xa7>
    2194:	50 95       	com	r21
    2196:	40 95       	com	r20
    2198:	30 95       	com	r19
    219a:	21 95       	neg	r18
    219c:	3f 4f       	sbci	r19, 0xFF	; 255
    219e:	4f 4f       	sbci	r20, 0xFF	; 255
    21a0:	5f 4f       	sbci	r21, 0xFF	; 255
    21a2:	e0 e8       	ldi	r30, 0x80	; 128
    21a4:	fe 2a       	or	r15, r30
    21a6:	ca 01       	movw	r24, r20
    21a8:	b9 01       	movw	r22, r18
    21aa:	a1 01       	movw	r20, r2
    21ac:	2a e0       	ldi	r18, 0x0A	; 10
    21ae:	30 e0       	ldi	r19, 0x00	; 0
    21b0:	17 d1       	rcall	.+558    	; 0x23e0 <__ultoa_invert>
    21b2:	d8 2e       	mov	r13, r24
    21b4:	d2 18       	sub	r13, r2
    21b6:	3f c0       	rjmp	.+126    	; 0x2236 <__stack+0x137>
    21b8:	95 37       	cpi	r25, 0x75	; 117
    21ba:	29 f4       	brne	.+10     	; 0x21c6 <__stack+0xc7>
    21bc:	1f 2d       	mov	r17, r15
    21be:	1f 7e       	andi	r17, 0xEF	; 239
    21c0:	2a e0       	ldi	r18, 0x0A	; 10
    21c2:	30 e0       	ldi	r19, 0x00	; 0
    21c4:	1d c0       	rjmp	.+58     	; 0x2200 <__stack+0x101>
    21c6:	1f 2d       	mov	r17, r15
    21c8:	19 7f       	andi	r17, 0xF9	; 249
    21ca:	9f 36       	cpi	r25, 0x6F	; 111
    21cc:	61 f0       	breq	.+24     	; 0x21e6 <__stack+0xe7>
    21ce:	90 37       	cpi	r25, 0x70	; 112
    21d0:	20 f4       	brcc	.+8      	; 0x21da <__stack+0xdb>
    21d2:	98 35       	cpi	r25, 0x58	; 88
    21d4:	09 f0       	breq	.+2      	; 0x21d8 <__stack+0xd9>
    21d6:	a5 c0       	rjmp	.+330    	; 0x2322 <__stack+0x223>
    21d8:	0f c0       	rjmp	.+30     	; 0x21f8 <__stack+0xf9>
    21da:	90 37       	cpi	r25, 0x70	; 112
    21dc:	39 f0       	breq	.+14     	; 0x21ec <__stack+0xed>
    21de:	98 37       	cpi	r25, 0x78	; 120
    21e0:	09 f0       	breq	.+2      	; 0x21e4 <__stack+0xe5>
    21e2:	9f c0       	rjmp	.+318    	; 0x2322 <__stack+0x223>
    21e4:	04 c0       	rjmp	.+8      	; 0x21ee <__stack+0xef>
    21e6:	28 e0       	ldi	r18, 0x08	; 8
    21e8:	30 e0       	ldi	r19, 0x00	; 0
    21ea:	0a c0       	rjmp	.+20     	; 0x2200 <__stack+0x101>
    21ec:	10 61       	ori	r17, 0x10	; 16
    21ee:	14 fd       	sbrc	r17, 4
    21f0:	14 60       	ori	r17, 0x04	; 4
    21f2:	20 e1       	ldi	r18, 0x10	; 16
    21f4:	30 e0       	ldi	r19, 0x00	; 0
    21f6:	04 c0       	rjmp	.+8      	; 0x2200 <__stack+0x101>
    21f8:	14 fd       	sbrc	r17, 4
    21fa:	16 60       	ori	r17, 0x06	; 6
    21fc:	20 e1       	ldi	r18, 0x10	; 16
    21fe:	32 e0       	ldi	r19, 0x02	; 2
    2200:	17 ff       	sbrs	r17, 7
    2202:	08 c0       	rjmp	.+16     	; 0x2214 <__stack+0x115>
    2204:	f5 01       	movw	r30, r10
    2206:	60 81       	ld	r22, Z
    2208:	71 81       	ldd	r23, Z+1	; 0x01
    220a:	82 81       	ldd	r24, Z+2	; 0x02
    220c:	93 81       	ldd	r25, Z+3	; 0x03
    220e:	44 e0       	ldi	r20, 0x04	; 4
    2210:	50 e0       	ldi	r21, 0x00	; 0
    2212:	08 c0       	rjmp	.+16     	; 0x2224 <__stack+0x125>
    2214:	f5 01       	movw	r30, r10
    2216:	80 81       	ld	r24, Z
    2218:	91 81       	ldd	r25, Z+1	; 0x01
    221a:	bc 01       	movw	r22, r24
    221c:	80 e0       	ldi	r24, 0x00	; 0
    221e:	90 e0       	ldi	r25, 0x00	; 0
    2220:	42 e0       	ldi	r20, 0x02	; 2
    2222:	50 e0       	ldi	r21, 0x00	; 0
    2224:	a4 0e       	add	r10, r20
    2226:	b5 1e       	adc	r11, r21
    2228:	a1 01       	movw	r20, r2
    222a:	da d0       	rcall	.+436    	; 0x23e0 <__ultoa_invert>
    222c:	d8 2e       	mov	r13, r24
    222e:	d2 18       	sub	r13, r2
    2230:	8f e7       	ldi	r24, 0x7F	; 127
    2232:	f8 2e       	mov	r15, r24
    2234:	f1 22       	and	r15, r17
    2236:	f6 fe       	sbrs	r15, 6
    2238:	0b c0       	rjmp	.+22     	; 0x2250 <__stack+0x151>
    223a:	5e ef       	ldi	r21, 0xFE	; 254
    223c:	f5 22       	and	r15, r21
    223e:	d9 14       	cp	r13, r9
    2240:	38 f4       	brcc	.+14     	; 0x2250 <__stack+0x151>
    2242:	f4 fe       	sbrs	r15, 4
    2244:	07 c0       	rjmp	.+14     	; 0x2254 <__stack+0x155>
    2246:	f2 fc       	sbrc	r15, 2
    2248:	05 c0       	rjmp	.+10     	; 0x2254 <__stack+0x155>
    224a:	8f ee       	ldi	r24, 0xEF	; 239
    224c:	f8 22       	and	r15, r24
    224e:	02 c0       	rjmp	.+4      	; 0x2254 <__stack+0x155>
    2250:	1d 2d       	mov	r17, r13
    2252:	01 c0       	rjmp	.+2      	; 0x2256 <__stack+0x157>
    2254:	19 2d       	mov	r17, r9
    2256:	f4 fe       	sbrs	r15, 4
    2258:	0d c0       	rjmp	.+26     	; 0x2274 <__stack+0x175>
    225a:	fe 01       	movw	r30, r28
    225c:	ed 0d       	add	r30, r13
    225e:	f1 1d       	adc	r31, r1
    2260:	80 81       	ld	r24, Z
    2262:	80 33       	cpi	r24, 0x30	; 48
    2264:	19 f4       	brne	.+6      	; 0x226c <__stack+0x16d>
    2266:	99 ee       	ldi	r25, 0xE9	; 233
    2268:	f9 22       	and	r15, r25
    226a:	08 c0       	rjmp	.+16     	; 0x227c <__stack+0x17d>
    226c:	1f 5f       	subi	r17, 0xFF	; 255
    226e:	f2 fe       	sbrs	r15, 2
    2270:	05 c0       	rjmp	.+10     	; 0x227c <__stack+0x17d>
    2272:	03 c0       	rjmp	.+6      	; 0x227a <__stack+0x17b>
    2274:	8f 2d       	mov	r24, r15
    2276:	86 78       	andi	r24, 0x86	; 134
    2278:	09 f0       	breq	.+2      	; 0x227c <__stack+0x17d>
    227a:	1f 5f       	subi	r17, 0xFF	; 255
    227c:	0f 2d       	mov	r16, r15
    227e:	f3 fc       	sbrc	r15, 3
    2280:	13 c0       	rjmp	.+38     	; 0x22a8 <__stack+0x1a9>
    2282:	f0 fe       	sbrs	r15, 0
    2284:	0e c0       	rjmp	.+28     	; 0x22a2 <__stack+0x1a3>
    2286:	1e 15       	cp	r17, r14
    2288:	10 f0       	brcs	.+4      	; 0x228e <__stack+0x18f>
    228a:	9d 2c       	mov	r9, r13
    228c:	0a c0       	rjmp	.+20     	; 0x22a2 <__stack+0x1a3>
    228e:	9d 2c       	mov	r9, r13
    2290:	9e 0c       	add	r9, r14
    2292:	91 1a       	sub	r9, r17
    2294:	1e 2d       	mov	r17, r14
    2296:	05 c0       	rjmp	.+10     	; 0x22a2 <__stack+0x1a3>
    2298:	80 e2       	ldi	r24, 0x20	; 32
    229a:	90 e0       	ldi	r25, 0x00	; 0
    229c:	b3 01       	movw	r22, r6
    229e:	74 d0       	rcall	.+232    	; 0x2388 <fputc>
    22a0:	1f 5f       	subi	r17, 0xFF	; 255
    22a2:	1e 15       	cp	r17, r14
    22a4:	c8 f3       	brcs	.-14     	; 0x2298 <__stack+0x199>
    22a6:	04 c0       	rjmp	.+8      	; 0x22b0 <__stack+0x1b1>
    22a8:	1e 15       	cp	r17, r14
    22aa:	10 f4       	brcc	.+4      	; 0x22b0 <__stack+0x1b1>
    22ac:	e1 1a       	sub	r14, r17
    22ae:	01 c0       	rjmp	.+2      	; 0x22b2 <__stack+0x1b3>
    22b0:	ee 24       	eor	r14, r14
    22b2:	04 ff       	sbrs	r16, 4
    22b4:	0e c0       	rjmp	.+28     	; 0x22d2 <__stack+0x1d3>
    22b6:	80 e3       	ldi	r24, 0x30	; 48
    22b8:	90 e0       	ldi	r25, 0x00	; 0
    22ba:	b3 01       	movw	r22, r6
    22bc:	65 d0       	rcall	.+202    	; 0x2388 <fputc>
    22be:	02 ff       	sbrs	r16, 2
    22c0:	1b c0       	rjmp	.+54     	; 0x22f8 <__stack+0x1f9>
    22c2:	01 fd       	sbrc	r16, 1
    22c4:	03 c0       	rjmp	.+6      	; 0x22cc <__stack+0x1cd>
    22c6:	88 e7       	ldi	r24, 0x78	; 120
    22c8:	90 e0       	ldi	r25, 0x00	; 0
    22ca:	0e c0       	rjmp	.+28     	; 0x22e8 <__stack+0x1e9>
    22cc:	88 e5       	ldi	r24, 0x58	; 88
    22ce:	90 e0       	ldi	r25, 0x00	; 0
    22d0:	0b c0       	rjmp	.+22     	; 0x22e8 <__stack+0x1e9>
    22d2:	80 2f       	mov	r24, r16
    22d4:	86 78       	andi	r24, 0x86	; 134
    22d6:	81 f0       	breq	.+32     	; 0x22f8 <__stack+0x1f9>
    22d8:	01 ff       	sbrs	r16, 1
    22da:	02 c0       	rjmp	.+4      	; 0x22e0 <__stack+0x1e1>
    22dc:	8b e2       	ldi	r24, 0x2B	; 43
    22de:	01 c0       	rjmp	.+2      	; 0x22e2 <__stack+0x1e3>
    22e0:	80 e2       	ldi	r24, 0x20	; 32
    22e2:	f7 fc       	sbrc	r15, 7
    22e4:	8d e2       	ldi	r24, 0x2D	; 45
    22e6:	90 e0       	ldi	r25, 0x00	; 0
    22e8:	b3 01       	movw	r22, r6
    22ea:	4e d0       	rcall	.+156    	; 0x2388 <fputc>
    22ec:	05 c0       	rjmp	.+10     	; 0x22f8 <__stack+0x1f9>
    22ee:	80 e3       	ldi	r24, 0x30	; 48
    22f0:	90 e0       	ldi	r25, 0x00	; 0
    22f2:	b3 01       	movw	r22, r6
    22f4:	49 d0       	rcall	.+146    	; 0x2388 <fputc>
    22f6:	9a 94       	dec	r9
    22f8:	d9 14       	cp	r13, r9
    22fa:	c8 f3       	brcs	.-14     	; 0x22ee <__stack+0x1ef>
    22fc:	da 94       	dec	r13
    22fe:	f1 01       	movw	r30, r2
    2300:	ed 0d       	add	r30, r13
    2302:	f1 1d       	adc	r31, r1
    2304:	80 81       	ld	r24, Z
    2306:	90 e0       	ldi	r25, 0x00	; 0
    2308:	b3 01       	movw	r22, r6
    230a:	3e d0       	rcall	.+124    	; 0x2388 <fputc>
    230c:	dd 20       	and	r13, r13
    230e:	b1 f7       	brne	.-20     	; 0x22fc <__stack+0x1fd>
    2310:	05 c0       	rjmp	.+10     	; 0x231c <__stack+0x21d>
    2312:	80 e2       	ldi	r24, 0x20	; 32
    2314:	90 e0       	ldi	r25, 0x00	; 0
    2316:	b3 01       	movw	r22, r6
    2318:	37 d0       	rcall	.+110    	; 0x2388 <fputc>
    231a:	ea 94       	dec	r14
    231c:	ee 20       	and	r14, r14
    231e:	c9 f7       	brne	.-14     	; 0x2312 <__stack+0x213>
    2320:	50 ce       	rjmp	.-864    	; 0x1fc2 <vfprintf+0x58>
    2322:	f3 01       	movw	r30, r6
    2324:	66 81       	ldd	r22, Z+6	; 0x06
    2326:	77 81       	ldd	r23, Z+7	; 0x07
    2328:	cb 01       	movw	r24, r22
    232a:	2b 96       	adiw	r28, 0x0b	; 11
    232c:	0f b6       	in	r0, 0x3f	; 63
    232e:	f8 94       	cli
    2330:	de bf       	out	0x3e, r29	; 62
    2332:	0f be       	out	0x3f, r0	; 63
    2334:	cd bf       	out	0x3d, r28	; 61
    2336:	cf 91       	pop	r28
    2338:	df 91       	pop	r29
    233a:	1f 91       	pop	r17
    233c:	0f 91       	pop	r16
    233e:	ff 90       	pop	r15
    2340:	ef 90       	pop	r14
    2342:	df 90       	pop	r13
    2344:	cf 90       	pop	r12
    2346:	bf 90       	pop	r11
    2348:	af 90       	pop	r10
    234a:	9f 90       	pop	r9
    234c:	8f 90       	pop	r8
    234e:	7f 90       	pop	r7
    2350:	6f 90       	pop	r6
    2352:	5f 90       	pop	r5
    2354:	4f 90       	pop	r4
    2356:	3f 90       	pop	r3
    2358:	2f 90       	pop	r2
    235a:	08 95       	ret

0000235c <strnlen_P>:
    235c:	fc 01       	movw	r30, r24
    235e:	05 90       	lpm	r0, Z+
    2360:	61 50       	subi	r22, 0x01	; 1
    2362:	70 40       	sbci	r23, 0x00	; 0
    2364:	01 10       	cpse	r0, r1
    2366:	d8 f7       	brcc	.-10     	; 0x235e <strnlen_P+0x2>
    2368:	80 95       	com	r24
    236a:	90 95       	com	r25
    236c:	8e 0f       	add	r24, r30
    236e:	9f 1f       	adc	r25, r31
    2370:	08 95       	ret

00002372 <strnlen>:
    2372:	fc 01       	movw	r30, r24
    2374:	61 50       	subi	r22, 0x01	; 1
    2376:	70 40       	sbci	r23, 0x00	; 0
    2378:	01 90       	ld	r0, Z+
    237a:	01 10       	cpse	r0, r1
    237c:	d8 f7       	brcc	.-10     	; 0x2374 <strnlen+0x2>
    237e:	80 95       	com	r24
    2380:	90 95       	com	r25
    2382:	8e 0f       	add	r24, r30
    2384:	9f 1f       	adc	r25, r31
    2386:	08 95       	ret

00002388 <fputc>:
    2388:	0f 93       	push	r16
    238a:	1f 93       	push	r17
    238c:	cf 93       	push	r28
    238e:	df 93       	push	r29
    2390:	8c 01       	movw	r16, r24
    2392:	eb 01       	movw	r28, r22
    2394:	8b 81       	ldd	r24, Y+3	; 0x03
    2396:	81 ff       	sbrs	r24, 1
    2398:	1b c0       	rjmp	.+54     	; 0x23d0 <fputc+0x48>
    239a:	82 ff       	sbrs	r24, 2
    239c:	0d c0       	rjmp	.+26     	; 0x23b8 <fputc+0x30>
    239e:	2e 81       	ldd	r18, Y+6	; 0x06
    23a0:	3f 81       	ldd	r19, Y+7	; 0x07
    23a2:	8c 81       	ldd	r24, Y+4	; 0x04
    23a4:	9d 81       	ldd	r25, Y+5	; 0x05
    23a6:	28 17       	cp	r18, r24
    23a8:	39 07       	cpc	r19, r25
    23aa:	64 f4       	brge	.+24     	; 0x23c4 <fputc+0x3c>
    23ac:	e8 81       	ld	r30, Y
    23ae:	f9 81       	ldd	r31, Y+1	; 0x01
    23b0:	01 93       	st	Z+, r16
    23b2:	f9 83       	std	Y+1, r31	; 0x01
    23b4:	e8 83       	st	Y, r30
    23b6:	06 c0       	rjmp	.+12     	; 0x23c4 <fputc+0x3c>
    23b8:	e8 85       	ldd	r30, Y+8	; 0x08
    23ba:	f9 85       	ldd	r31, Y+9	; 0x09
    23bc:	80 2f       	mov	r24, r16
    23be:	09 95       	icall
    23c0:	89 2b       	or	r24, r25
    23c2:	31 f4       	brne	.+12     	; 0x23d0 <fputc+0x48>
    23c4:	8e 81       	ldd	r24, Y+6	; 0x06
    23c6:	9f 81       	ldd	r25, Y+7	; 0x07
    23c8:	01 96       	adiw	r24, 0x01	; 1
    23ca:	9f 83       	std	Y+7, r25	; 0x07
    23cc:	8e 83       	std	Y+6, r24	; 0x06
    23ce:	02 c0       	rjmp	.+4      	; 0x23d4 <fputc+0x4c>
    23d0:	0f ef       	ldi	r16, 0xFF	; 255
    23d2:	1f ef       	ldi	r17, 0xFF	; 255
    23d4:	c8 01       	movw	r24, r16
    23d6:	df 91       	pop	r29
    23d8:	cf 91       	pop	r28
    23da:	1f 91       	pop	r17
    23dc:	0f 91       	pop	r16
    23de:	08 95       	ret

000023e0 <__ultoa_invert>:
    23e0:	fa 01       	movw	r30, r20
    23e2:	aa 27       	eor	r26, r26
    23e4:	28 30       	cpi	r18, 0x08	; 8
    23e6:	51 f1       	breq	.+84     	; 0x243c <__ultoa_invert+0x5c>
    23e8:	20 31       	cpi	r18, 0x10	; 16
    23ea:	81 f1       	breq	.+96     	; 0x244c <__ultoa_invert+0x6c>
    23ec:	e8 94       	clt
    23ee:	6f 93       	push	r22
    23f0:	6e 7f       	andi	r22, 0xFE	; 254
    23f2:	6e 5f       	subi	r22, 0xFE	; 254
    23f4:	7f 4f       	sbci	r23, 0xFF	; 255
    23f6:	8f 4f       	sbci	r24, 0xFF	; 255
    23f8:	9f 4f       	sbci	r25, 0xFF	; 255
    23fa:	af 4f       	sbci	r26, 0xFF	; 255
    23fc:	b1 e0       	ldi	r27, 0x01	; 1
    23fe:	3e d0       	rcall	.+124    	; 0x247c <__ultoa_invert+0x9c>
    2400:	b4 e0       	ldi	r27, 0x04	; 4
    2402:	3c d0       	rcall	.+120    	; 0x247c <__ultoa_invert+0x9c>
    2404:	67 0f       	add	r22, r23
    2406:	78 1f       	adc	r23, r24
    2408:	89 1f       	adc	r24, r25
    240a:	9a 1f       	adc	r25, r26
    240c:	a1 1d       	adc	r26, r1
    240e:	68 0f       	add	r22, r24
    2410:	79 1f       	adc	r23, r25
    2412:	8a 1f       	adc	r24, r26
    2414:	91 1d       	adc	r25, r1
    2416:	a1 1d       	adc	r26, r1
    2418:	6a 0f       	add	r22, r26
    241a:	71 1d       	adc	r23, r1
    241c:	81 1d       	adc	r24, r1
    241e:	91 1d       	adc	r25, r1
    2420:	a1 1d       	adc	r26, r1
    2422:	20 d0       	rcall	.+64     	; 0x2464 <__ultoa_invert+0x84>
    2424:	09 f4       	brne	.+2      	; 0x2428 <__ultoa_invert+0x48>
    2426:	68 94       	set
    2428:	3f 91       	pop	r19
    242a:	2a e0       	ldi	r18, 0x0A	; 10
    242c:	26 9f       	mul	r18, r22
    242e:	11 24       	eor	r1, r1
    2430:	30 19       	sub	r19, r0
    2432:	30 5d       	subi	r19, 0xD0	; 208
    2434:	31 93       	st	Z+, r19
    2436:	de f6       	brtc	.-74     	; 0x23ee <__ultoa_invert+0xe>
    2438:	cf 01       	movw	r24, r30
    243a:	08 95       	ret
    243c:	46 2f       	mov	r20, r22
    243e:	47 70       	andi	r20, 0x07	; 7
    2440:	40 5d       	subi	r20, 0xD0	; 208
    2442:	41 93       	st	Z+, r20
    2444:	b3 e0       	ldi	r27, 0x03	; 3
    2446:	0f d0       	rcall	.+30     	; 0x2466 <__ultoa_invert+0x86>
    2448:	c9 f7       	brne	.-14     	; 0x243c <__ultoa_invert+0x5c>
    244a:	f6 cf       	rjmp	.-20     	; 0x2438 <__ultoa_invert+0x58>
    244c:	46 2f       	mov	r20, r22
    244e:	4f 70       	andi	r20, 0x0F	; 15
    2450:	40 5d       	subi	r20, 0xD0	; 208
    2452:	4a 33       	cpi	r20, 0x3A	; 58
    2454:	18 f0       	brcs	.+6      	; 0x245c <__ultoa_invert+0x7c>
    2456:	49 5d       	subi	r20, 0xD9	; 217
    2458:	31 fd       	sbrc	r19, 1
    245a:	40 52       	subi	r20, 0x20	; 32
    245c:	41 93       	st	Z+, r20
    245e:	02 d0       	rcall	.+4      	; 0x2464 <__ultoa_invert+0x84>
    2460:	a9 f7       	brne	.-22     	; 0x244c <__ultoa_invert+0x6c>
    2462:	ea cf       	rjmp	.-44     	; 0x2438 <__ultoa_invert+0x58>
    2464:	b4 e0       	ldi	r27, 0x04	; 4
    2466:	a6 95       	lsr	r26
    2468:	97 95       	ror	r25
    246a:	87 95       	ror	r24
    246c:	77 95       	ror	r23
    246e:	67 95       	ror	r22
    2470:	ba 95       	dec	r27
    2472:	c9 f7       	brne	.-14     	; 0x2466 <__ultoa_invert+0x86>
    2474:	00 97       	sbiw	r24, 0x00	; 0
    2476:	61 05       	cpc	r22, r1
    2478:	71 05       	cpc	r23, r1
    247a:	08 95       	ret
    247c:	9b 01       	movw	r18, r22
    247e:	ac 01       	movw	r20, r24
    2480:	0a 2e       	mov	r0, r26
    2482:	06 94       	lsr	r0
    2484:	57 95       	ror	r21
    2486:	47 95       	ror	r20
    2488:	37 95       	ror	r19
    248a:	27 95       	ror	r18
    248c:	ba 95       	dec	r27
    248e:	c9 f7       	brne	.-14     	; 0x2482 <__ultoa_invert+0xa2>
    2490:	62 0f       	add	r22, r18
    2492:	73 1f       	adc	r23, r19
    2494:	84 1f       	adc	r24, r20
    2496:	95 1f       	adc	r25, r21
    2498:	a0 1d       	adc	r26, r0
    249a:	08 95       	ret

0000249c <_exit>:
    249c:	f8 94       	cli

0000249e <__stop_program>:
    249e:	ff cf       	rjmp	.-2      	; 0x249e <__stop_program>
