
KeyboardHost.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000003a  00800100  00001a04  00001a98  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001a04  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000013  0080013a  0080013a  00001ad2  2**0
                  ALLOC
  3 .stab         00001014  00000000  00000000  00001ad4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000315  00000000  00000000  00002ae8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000006d0  00000000  00000000  00002dfd  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000e82  00000000  00000000  000034cd  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000aeb1  00000000  00000000  0000434f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00002b0e  00000000  00000000  0000f200  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00007581  00000000  00000000  00011d0e  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000aa0  00000000  00000000  00019290  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000042ab  00000000  00000000  00019d30  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00004f85  00000000  00000000  0001dfdb  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000007b0  00000000  00000000  00022f60  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:

	return USB_Host_SendControlRequest(Buffer);
}

uint8_t USB_Host_ClearPipeStall(const uint8_t EndpointNum)
{
       0:	12 c1       	rjmp	.+548    	; 0x226 <__ctors_end>
{
	USB_GetNextDescriptorOfType(BytesRem, CurrConfigLoc, AfterType);

	if (*BytesRem)
	  USB_GetNextDescriptorOfType(BytesRem, CurrConfigLoc, Type);
}
       2:	00 00       	nop
			Length--;
		}
	}

	return PIPE_RWSTREAM_NoError;
}
       4:	2e c1       	rjmp	.+604    	; 0x262 <__bad_interrupt>
		  ReportData[CurrentBit / 8] |= BitMask;

		CurrentBit++;
		BitMask <<= 1;
	}
}
       6:	00 00       	nop
	return HOST_SENDCONTROL_Successful;
}

#if !defined(HID_HOST_BOOT_PROTOCOL_ONLY)
uint8_t HID_Host_SetReportProtocol(USB_ClassInfo_HID_Host_t* const HIDInterfaceInfo)
{
       8:	2c c1       	rjmp	.+600    	; 0x262 <__bad_interrupt>
       a:	00 00       	nop
       c:	2a c1       	rjmp	.+596    	; 0x262 <__bad_interrupt>
       e:	00 00       	nop
      10:	28 c1       	rjmp	.+592    	; 0x262 <__bad_interrupt>
      12:	00 00       	nop
      14:	26 c1       	rjmp	.+588    	; 0x262 <__bad_interrupt>
      16:	00 00       	nop
      18:	24 c1       	rjmp	.+584    	; 0x262 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	22 c1       	rjmp	.+580    	; 0x262 <__bad_interrupt>
      1e:	00 00       	nop
      20:	20 c1       	rjmp	.+576    	; 0x262 <__bad_interrupt>
      22:	00 00       	nop
      24:	1e c1       	rjmp	.+572    	; 0x262 <__bad_interrupt>
      26:	00 00       	nop
      28:	59 c5       	rjmp	.+2738   	; 0xadc <__vector_10>
      2a:	00 00       	nop
      2c:	1a c1       	rjmp	.+564    	; 0x262 <__bad_interrupt>
      2e:	00 00       	nop
      30:	18 c1       	rjmp	.+560    	; 0x262 <__bad_interrupt>
      32:	00 00       	nop
      34:	16 c1       	rjmp	.+556    	; 0x262 <__bad_interrupt>
      36:	00 00       	nop
      38:	14 c1       	rjmp	.+552    	; 0x262 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	12 c1       	rjmp	.+548    	; 0x262 <__bad_interrupt>
      3e:	00 00       	nop
      40:	10 c1       	rjmp	.+544    	; 0x262 <__bad_interrupt>
      42:	00 00       	nop
      44:	0e c1       	rjmp	.+540    	; 0x262 <__bad_interrupt>
      46:	00 00       	nop
      48:	0c c1       	rjmp	.+536    	; 0x262 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	0a c1       	rjmp	.+532    	; 0x262 <__bad_interrupt>
      4e:	00 00       	nop
      50:	08 c1       	rjmp	.+528    	; 0x262 <__bad_interrupt>
      52:	00 00       	nop
      54:	06 c1       	rjmp	.+524    	; 0x262 <__bad_interrupt>
      56:	00 00       	nop
      58:	04 c1       	rjmp	.+520    	; 0x262 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	02 c1       	rjmp	.+516    	; 0x262 <__bad_interrupt>
      5e:	00 00       	nop
      60:	00 c1       	rjmp	.+512    	; 0x262 <__bad_interrupt>
      62:	00 00       	nop
      64:	fe c0       	rjmp	.+508    	; 0x262 <__bad_interrupt>
      66:	00 00       	nop
      68:	fc c0       	rjmp	.+504    	; 0x262 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	fa c0       	rjmp	.+500    	; 0x262 <__bad_interrupt>
      6e:	00 00       	nop
      70:	f8 c0       	rjmp	.+496    	; 0x262 <__bad_interrupt>
      72:	00 00       	nop
      74:	f6 c0       	rjmp	.+492    	; 0x262 <__bad_interrupt>
      76:	00 00       	nop
      78:	f4 c0       	rjmp	.+488    	; 0x262 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	f2 c0       	rjmp	.+484    	; 0x262 <__bad_interrupt>
      7e:	00 00       	nop
      80:	f0 c0       	rjmp	.+480    	; 0x262 <__bad_interrupt>
      82:	00 00       	nop
      84:	ee c0       	rjmp	.+476    	; 0x262 <__bad_interrupt>
      86:	00 00       	nop
      88:	ec c0       	rjmp	.+472    	; 0x262 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	ea c0       	rjmp	.+468    	; 0x262 <__bad_interrupt>
      8e:	00 00       	nop
      90:	e8 c0       	rjmp	.+464    	; 0x262 <__bad_interrupt>
      92:	00 00       	nop
      94:	e6 c0       	rjmp	.+460    	; 0x262 <__bad_interrupt>
      96:	00 00       	nop

00000098 <__c.4161>:
      98:	1b 5b 33 31 6d 44 65 76 20 45 6e 75 6d 20 45 72     .[31mDev Enum Er
      a8:	72 6f 72 0d 0a 20 2d 2d 20 45 72 72 6f 72 20 43     ror.. -- Error C
      b8:	6f 64 65 20 25 64 0d 0a 20 2d 2d 20 53 75 62 20     ode %d.. -- Sub 
      c8:	45 72 72 6f 72 20 43 6f 64 65 20 25 64 0d 0a 20     Error Code %d.. 
      d8:	2d 2d 20 49 6e 20 53 74 61 74 65 20 25 64 0d 0a     -- In State %d..
      e8:	1b 5b 33 37 6d 00                                   .[37m.

000000ee <__c.4153>:
      ee:	1b 5b 33 31 6d 48 6f 73 74 20 4d 6f 64 65 20 45     .[31mHost Mode E
      fe:	72 72 6f 72 0d 0a 20 2d 2d 20 45 72 72 6f 72 20     rror.. -- Error 
     10e:	43 6f 64 65 20 25 64 0d 0a 1b 5b 33 37 6d 00        Code %d...[37m.

0000011d <__c.4145>:
     11d:	0d 0a 44 65 76 69 63 65 20 55 6e 61 74 74 61 63     ..Device Unattac
     12d:	68 65 64 2e 0d 0a 00                                hed....

00000134 <__c.4140>:
     134:	44 65 76 69 63 65 20 41 74 74 61 63 68 65 64 2e     Device Attached.
     144:	0d 0a 00                                            ...

00000147 <__c.4107>:
     147:	4b 65 79 62 6f 61 72 64 20 45 6e 75 6d 65 72 61     Keyboard Enumera
     157:	74 65 64 2e 0d 0a 00                                ted....

0000015e <__c.4105>:
     15e:	43 6f 75 6c 64 20 6e 6f 74 20 53 65 74 20 42 6f     Could not Set Bo
     16e:	6f 74 20 50 72 6f 74 6f 63 6f 6c 20 4d 6f 64 65     ot Protocol Mode
     17e:	2e 0d 0a 00                                         ....

00000182 <__c.4103>:
     182:	45 72 72 6f 72 20 53 65 74 74 69 6e 67 20 44 65     Error Setting De
     192:	76 69 63 65 20 43 6f 6e 66 69 67 75 72 61 74 69     vice Configurati
     1a2:	6f 6e 2e 0d 0a 00                                   on....

000001a8 <__c.4101>:
     1a8:	41 74 74 61 63 68 65 64 20 44 65 76 69 63 65 20     Attached Device 
     1b8:	4e 6f 74 20 61 20 56 61 6c 69 64 20 4b 65 79 62     Not a Valid Keyb
     1c8:	6f 61 72 64 2e 0d 0a 00                             oard....

000001d0 <__c.4098>:
     1d0:	45 72 72 6f 72 20 52 65 74 72 69 65 76 69 6e 67     Error Retrieving
     1e0:	20 43 6f 6e 66 69 67 75 72 61 74 69 6f 6e 20 44      Configuration D
     1f0:	65 73 63 72 69 70 74 6f 72 2e 0d 0a 00              escriptor....

000001fd <__c.4093>:
     1fd:	1b 5b 33 36 6d 4b 65 79 62 6f 61 72 64 20 48 6f     .[36mKeyboard Ho
     20d:	73 74 20 44 65 6d 6f 20 72 75 6e 6e 69 6e 67 2e     st Demo running.
     21d:	0d 0a 1b 5b 33 37 6d 00 00                          ...[37m..

00000226 <__ctors_end>:
     226:	11 24       	eor	r1, r1
     228:	1f be       	out	0x3f, r1	; 63
     22a:	cf ef       	ldi	r28, 0xFF	; 255
     22c:	d0 e2       	ldi	r29, 0x20	; 32
     22e:	de bf       	out	0x3e, r29	; 62
     230:	cd bf       	out	0x3d, r28	; 61

00000232 <__do_copy_data>:
     232:	11 e0       	ldi	r17, 0x01	; 1
     234:	a0 e0       	ldi	r26, 0x00	; 0
     236:	b1 e0       	ldi	r27, 0x01	; 1
     238:	e4 e0       	ldi	r30, 0x04	; 4
     23a:	fa e1       	ldi	r31, 0x1A	; 26
     23c:	00 e0       	ldi	r16, 0x00	; 0
     23e:	0b bf       	out	0x3b, r16	; 59
     240:	02 c0       	rjmp	.+4      	; 0x246 <__do_copy_data+0x14>
     242:	07 90       	elpm	r0, Z+
     244:	0d 92       	st	X+, r0
     246:	aa 33       	cpi	r26, 0x3A	; 58
     248:	b1 07       	cpc	r27, r17
     24a:	d9 f7       	brne	.-10     	; 0x242 <__do_copy_data+0x10>

0000024c <__do_clear_bss>:
     24c:	11 e0       	ldi	r17, 0x01	; 1
     24e:	aa e3       	ldi	r26, 0x3A	; 58
     250:	b1 e0       	ldi	r27, 0x01	; 1
     252:	01 c0       	rjmp	.+2      	; 0x256 <.do_clear_bss_start>

00000254 <.do_clear_bss_loop>:
     254:	1d 92       	st	X+, r1

00000256 <.do_clear_bss_start>:
     256:	ad 34       	cpi	r26, 0x4D	; 77
     258:	b1 07       	cpc	r27, r17
     25a:	e1 f7       	brne	.-8      	; 0x254 <.do_clear_bss_loop>
     25c:	98 d0       	rcall	.+304    	; 0x38e <main>
     25e:	0c 94 00 0d 	jmp	0x1a00	; 0x1a00 <_exit>

00000262 <__bad_interrupt>:
     262:	ce ce       	rjmp	.-612    	; 0x0 <__vectors>

00000264 <EVENT_USB_Host_DeviceEnumerationComplete>:
				PORTD &= ~LEDMask;
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
			{
				PORTD = ((PORTD & ~LEDS_ALL_LEDS) | LEDMask);
     264:	8b b1       	in	r24, 0x0b	; 11
     266:	8f 70       	andi	r24, 0x0F	; 15
     268:	80 66       	ori	r24, 0x60	; 96
     26a:	8b b9       	out	0x0b, r24	; 11
 *  enumerated by the host and is now ready to be used by the application.
 */
void EVENT_USB_Host_DeviceEnumerationComplete(void)
{
	LEDs_SetAllLEDs(LEDMASK_USB_READY);
}
     26c:	08 95       	ret

0000026e <EVENT_USB_Host_DeviceEnumerationFailed>:
 *  enumerating an attached USB device.
 */
void EVENT_USB_Host_DeviceEnumerationFailed(const uint8_t ErrorCode,
                                            const uint8_t SubErrorCode)
{
	printf_P(PSTR(ESC_FG_RED "Dev Enum Error\r\n"
     26e:	90 91 46 01 	lds	r25, 0x0146
     272:	2d b7       	in	r18, 0x3d	; 61
     274:	3e b7       	in	r19, 0x3e	; 62
     276:	28 50       	subi	r18, 0x08	; 8
     278:	30 40       	sbci	r19, 0x00	; 0
     27a:	0f b6       	in	r0, 0x3f	; 63
     27c:	f8 94       	cli
     27e:	3e bf       	out	0x3e, r19	; 62
     280:	0f be       	out	0x3f, r0	; 63
     282:	2d bf       	out	0x3d, r18	; 61
     284:	ed b7       	in	r30, 0x3d	; 61
     286:	fe b7       	in	r31, 0x3e	; 62
     288:	31 96       	adiw	r30, 0x01	; 1
     28a:	28 e9       	ldi	r18, 0x98	; 152
     28c:	30 e0       	ldi	r19, 0x00	; 0
     28e:	ad b7       	in	r26, 0x3d	; 61
     290:	be b7       	in	r27, 0x3e	; 62
     292:	12 96       	adiw	r26, 0x02	; 2
     294:	3c 93       	st	X, r19
     296:	2e 93       	st	-X, r18
     298:	11 97       	sbiw	r26, 0x01	; 1
     29a:	82 83       	std	Z+2, r24	; 0x02
     29c:	13 82       	std	Z+3, r1	; 0x03
     29e:	64 83       	std	Z+4, r22	; 0x04
     2a0:	15 82       	std	Z+5, r1	; 0x05
     2a2:	96 83       	std	Z+6, r25	; 0x06
     2a4:	17 82       	std	Z+7, r1	; 0x07
     2a6:	0e 94 3c 0a 	call	0x1478	; 0x1478 <printf_P>
     2aa:	8b b1       	in	r24, 0x0b	; 11
     2ac:	8f 70       	andi	r24, 0x0F	; 15
     2ae:	80 69       	ori	r24, 0x90	; 144
     2b0:	8b b9       	out	0x0b, r24	; 11
     2b2:	2d b7       	in	r18, 0x3d	; 61
     2b4:	3e b7       	in	r19, 0x3e	; 62
     2b6:	28 5f       	subi	r18, 0xF8	; 248
     2b8:	3f 4f       	sbci	r19, 0xFF	; 255
     2ba:	0f b6       	in	r0, 0x3f	; 63
     2bc:	f8 94       	cli
     2be:	3e bf       	out	0x3e, r19	; 62
     2c0:	0f be       	out	0x3f, r0	; 63
     2c2:	2d bf       	out	0x3d, r18	; 61
	                         " -- Error Code %d\r\n"
	                         " -- Sub Error Code %d\r\n"
	                         " -- In State %d\r\n" ESC_FG_WHITE), ErrorCode, SubErrorCode, USB_HostState);

	LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
}
     2c4:	08 95       	ret

000002c6 <EVENT_USB_Host_HostError>:
	LEDs_SetAllLEDs(LEDMASK_USB_READY);
}

/** Event handler for the USB_HostError event. This indicates that a hardware error occurred while in host mode. */
void EVENT_USB_Host_HostError(const uint8_t ErrorCode)
{
     2c6:	1f 93       	push	r17
     2c8:	18 2f       	mov	r17, r24
	USB_ShutDown();
     2ca:	e3 d3       	rcall	.+1990   	; 0xa92 <USB_ShutDown>

	printf_P(PSTR(ESC_FG_RED "Host Mode Error\r\n"
     2cc:	00 d0       	rcall	.+0      	; 0x2ce <EVENT_USB_Host_HostError+0x8>
     2ce:	00 d0       	rcall	.+0      	; 0x2d0 <EVENT_USB_Host_HostError+0xa>
     2d0:	ed b7       	in	r30, 0x3d	; 61
     2d2:	fe b7       	in	r31, 0x3e	; 62
     2d4:	31 96       	adiw	r30, 0x01	; 1
     2d6:	8e ee       	ldi	r24, 0xEE	; 238
     2d8:	90 e0       	ldi	r25, 0x00	; 0
     2da:	ad b7       	in	r26, 0x3d	; 61
     2dc:	be b7       	in	r27, 0x3e	; 62
     2de:	12 96       	adiw	r26, 0x02	; 2
     2e0:	9c 93       	st	X, r25
     2e2:	8e 93       	st	-X, r24
     2e4:	11 97       	sbiw	r26, 0x01	; 1
     2e6:	12 83       	std	Z+2, r17	; 0x02
     2e8:	13 82       	std	Z+3, r1	; 0x03
     2ea:	0e 94 3c 0a 	call	0x1478	; 0x1478 <printf_P>
     2ee:	8b b1       	in	r24, 0x0b	; 11
     2f0:	8f 70       	andi	r24, 0x0F	; 15
     2f2:	80 69       	ori	r24, 0x90	; 144
     2f4:	8b b9       	out	0x0b, r24	; 11
     2f6:	0f 90       	pop	r0
     2f8:	0f 90       	pop	r0
     2fa:	0f 90       	pop	r0
     2fc:	0f 90       	pop	r0
     2fe:	ff cf       	rjmp	.-2      	; 0x2fe <EVENT_USB_Host_HostError+0x38>

00000300 <EVENT_USB_Host_DeviceUnattached>:
/** Event handler for the USB_DeviceUnattached event. This indicates that a device has been removed from the host, and
 *  stops the library USB task management process.
 */
void EVENT_USB_Host_DeviceUnattached(void)
{
	puts_P(PSTR("\r\nDevice Unattached.\r\n"));
     300:	8d e1       	ldi	r24, 0x1D	; 29
     302:	91 e0       	ldi	r25, 0x01	; 1
     304:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <puts_P>
     308:	8b b1       	in	r24, 0x0b	; 11
     30a:	8f 70       	andi	r24, 0x0F	; 15
     30c:	80 61       	ori	r24, 0x10	; 16
     30e:	8b b9       	out	0x0b, r24	; 11
	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
}
     310:	08 95       	ret

00000312 <EVENT_USB_Host_DeviceAttached>:
/** Event handler for the USB_DeviceAttached event. This indicates that a device has been attached to the host, and
 *  starts the library USB task to begin the enumeration and USB management process.
 */
void EVENT_USB_Host_DeviceAttached(void)
{
	puts_P(PSTR("Device Attached.\r\n"));
     312:	84 e3       	ldi	r24, 0x34	; 52
     314:	91 e0       	ldi	r25, 0x01	; 1
     316:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <puts_P>
     31a:	8b b1       	in	r24, 0x0b	; 11
     31c:	8f 70       	andi	r24, 0x0F	; 15
     31e:	80 6a       	ori	r24, 0xA0	; 160
     320:	8b b9       	out	0x0b, r24	; 11
	LEDs_SetAllLEDs(LEDMASK_USB_ENUMERATING);
}
     322:	08 95       	ret

00000324 <SetupHardware>:

/** Configures the board hardware and chip peripherals for the demo's functionality. */
void SetupHardware(void)
{
	/* Disable watchdog if enabled by bootloader/fuses */
	MCUSR &= ~(1 << WDRF);
     324:	84 b7       	in	r24, 0x34	; 52
     326:	87 7f       	andi	r24, 0xF7	; 247
     328:	84 bf       	out	0x34, r24	; 52
	wdt_disable();
     32a:	38 e1       	ldi	r19, 0x18	; 24
     32c:	0f b6       	in	r0, 0x3f	; 63
     32e:	f8 94       	cli
     330:	30 93 60 00 	sts	0x0060, r19
     334:	10 92 60 00 	sts	0x0060, r1
     338:	0f be       	out	0x3f, r0	; 63

	/* Disable clock division */
	clock_prescale_set(clock_div_1);
     33a:	80 e0       	ldi	r24, 0x00	; 0
     33c:	90 e0       	ldi	r25, 0x00	; 0
     33e:	20 e8       	ldi	r18, 0x80	; 128
     340:	0f b6       	in	r0, 0x3f	; 63
     342:	f8 94       	cli
     344:	20 93 61 00 	sts	0x0061, r18
     348:	80 93 61 00 	sts	0x0061, r24
     34c:	0f be       	out	0x3f, r0	; 63
			 *  \param[in] DoubleSpeed  Enables double speed mode when set, halving the sample time to double the baud rate.
			 */
			static inline void Serial_Init(const uint32_t BaudRate,
			                               const bool DoubleSpeed)
			{
				UBRR1  = (DoubleSpeed ? SERIAL_2X_UBBRVAL(BaudRate) : SERIAL_UBBRVAL(BaudRate));
     34e:	83 e3       	ldi	r24, 0x33	; 51
     350:	90 e0       	ldi	r25, 0x00	; 0
     352:	90 93 cd 00 	sts	0x00CD, r25
     356:	80 93 cc 00 	sts	0x00CC, r24

				UCSR1C = ((1 << UCSZ11) | (1 << UCSZ10));
     35a:	86 e0       	ldi	r24, 0x06	; 6
     35c:	80 93 ca 00 	sts	0x00CA, r24
				UCSR1A = (DoubleSpeed ? (1 << U2X1) : 0);
     360:	10 92 c8 00 	sts	0x00C8, r1
				UCSR1B = ((1 << TXEN1)  | (1 << RXEN1));
     364:	30 93 c9 00 	sts	0x00C9, r19

				DDRD  |= (1 << 3);
     368:	53 9a       	sbi	0x0a, 3	; 10
				PORTD |= (1 << 2);
     36a:	5a 9a       	sbi	0x0b, 2	; 11
			static inline void SerialStream_Init(const uint32_t BaudRate,
			                                     const bool DoubleSpeed)
			{
				Serial_Init(BaudRate, DoubleSpeed);

				stdout = &USARTStream;
     36c:	8c e2       	ldi	r24, 0x2C	; 44
     36e:	91 e0       	ldi	r25, 0x01	; 1
     370:	90 93 4a 01 	sts	0x014A, r25
     374:	80 93 49 01 	sts	0x0149, r24
				stdin  = &USARTStream;
     378:	90 93 48 01 	sts	0x0148, r25
     37c:	80 93 47 01 	sts	0x0147, r24

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void LEDs_Init(void)
			{
				DDRD  |=  LEDS_ALL_LEDS;
     380:	8a b1       	in	r24, 0x0a	; 10
     382:	80 6f       	ori	r24, 0xF0	; 240
     384:	8a b9       	out	0x0a, r24	; 10
				PORTD &= ~LEDS_ALL_LEDS;
     386:	8b b1       	in	r24, 0x0b	; 11
     388:	8f 70       	andi	r24, 0x0F	; 15
     38a:	8b b9       	out	0x0b, r24	; 11

	/* Hardware Initialization */
	SerialStream_Init(9600, false);
	LEDs_Init();
	USB_Init();
}
     38c:	79 c3       	rjmp	.+1778   	; 0xa80 <USB_Init>

0000038e <main>:

/** Main program entry point. This routine configures the hardware required by the application, then
 *  enters a loop to run the application tasks in sequence.
 */
int main(void)
{
     38e:	af 92       	push	r10
     390:	bf 92       	push	r11
     392:	cf 92       	push	r12
     394:	df 92       	push	r13
     396:	ef 92       	push	r14
     398:	ff 92       	push	r15
     39a:	0f 93       	push	r16
     39c:	1f 93       	push	r17
     39e:	df 93       	push	r29
     3a0:	cf 93       	push	r28
     3a2:	cd b7       	in	r28, 0x3d	; 61
     3a4:	de b7       	in	r29, 0x3e	; 62
     3a6:	ca 50       	subi	r28, 0x0A	; 10
     3a8:	d2 40       	sbci	r29, 0x02	; 2
     3aa:	0f b6       	in	r0, 0x3f	; 63
     3ac:	f8 94       	cli
     3ae:	de bf       	out	0x3e, r29	; 62
     3b0:	0f be       	out	0x3f, r0	; 63
     3b2:	cd bf       	out	0x3d, r28	; 61
	SetupHardware();
     3b4:	b7 df       	rcall	.-146    	; 0x324 <SetupHardware>

	puts_P(PSTR(ESC_FG_CYAN "Keyboard Host Demo running.\r\n" ESC_FG_WHITE));
     3b6:	8d ef       	ldi	r24, 0xFD	; 253
     3b8:	91 e0       	ldi	r25, 0x01	; 1
     3ba:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <puts_P>
				PORTD &= ~LEDMask;
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
			{
				PORTD = ((PORTD & ~LEDS_ALL_LEDS) | LEDMask);
     3be:	8b b1       	in	r24, 0x0b	; 11
     3c0:	8f 70       	andi	r24, 0x0F	; 15
     3c2:	80 61       	ori	r24, 0x10	; 16
     3c4:	8b b9       	out	0x0b, r24	; 11

	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
	sei();
     3c6:	78 94       	sei
				LEDs_SetAllLEDs(LEDMASK_USB_ENUMERATING);

				uint16_t ConfigDescriptorSize;
				uint8_t  ConfigDescriptorData[512];

				if (USB_Host_GetDeviceConfigDescriptor(1, &ConfigDescriptorSize, ConfigDescriptorData,
     3c8:	8e 01       	movw	r16, r28
     3ca:	05 5f       	subi	r16, 0xF5	; 245
     3cc:	1f 4f       	sbci	r17, 0xFF	; 255
     3ce:	6e 01       	movw	r12, r28
     3d0:	08 94       	sec
     3d2:	c1 1c       	adc	r12, r1
     3d4:	d1 1c       	adc	r13, r1
					break;
				}

				puts_P(PSTR("Keyboard Enumerated.\r\n"));
				LEDs_SetAllLEDs(LEDMASK_USB_READY);
				USB_HostState = HOST_STATE_Configured;
     3d6:	2c e0       	ldi	r18, 0x0C	; 12
     3d8:	a2 2e       	mov	r10, r18
				break;
			case HOST_STATE_Configured:
				if (HID_Host_IsReportReceived(&Keyboard_HID_Interface))
				{
					USB_KeyboardReport_Data_t KeyboardReport;
					HID_Host_ReceiveReport(&Keyboard_HID_Interface, &KeyboardReport);
     3da:	93 e0       	ldi	r25, 0x03	; 3
     3dc:	e9 2e       	mov	r14, r25
     3de:	f1 2c       	mov	r15, r1
     3e0:	ec 0e       	add	r14, r28
     3e2:	fd 1e       	adc	r15, r29
				PORTD = ((PORTD & ~LEDMask) | ActiveMask);
			}

			static inline void LEDs_ToggleLEDs(const uint8_t LEDMask)
			{
				PORTD ^= LEDMask;
     3e4:	80 e2       	ldi	r24, 0x20	; 32
     3e6:	b8 2e       	mov	r11, r24
	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
	sei();

	for (;;)
	{
		switch (USB_HostState)
     3e8:	80 91 46 01 	lds	r24, 0x0146
     3ec:	8b 30       	cpi	r24, 0x0B	; 11
     3ee:	21 f0       	breq	.+8      	; 0x3f8 <main+0x6a>
     3f0:	8c 30       	cpi	r24, 0x0C	; 12
     3f2:	09 f0       	breq	.+2      	; 0x3f6 <main+0x68>
     3f4:	71 c0       	rjmp	.+226    	; 0x4d8 <main+0x14a>
     3f6:	3c c0       	rjmp	.+120    	; 0x470 <main+0xe2>
				PORTD &= ~LEDMask;
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
			{
				PORTD = ((PORTD & ~LEDS_ALL_LEDS) | LEDMask);
     3f8:	8b b1       	in	r24, 0x0b	; 11
     3fa:	8f 70       	andi	r24, 0x0F	; 15
     3fc:	80 6a       	ori	r24, 0xA0	; 160
     3fe:	8b b9       	out	0x0b, r24	; 11
				LEDs_SetAllLEDs(LEDMASK_USB_ENUMERATING);

				uint16_t ConfigDescriptorSize;
				uint8_t  ConfigDescriptorData[512];

				if (USB_Host_GetDeviceConfigDescriptor(1, &ConfigDescriptorSize, ConfigDescriptorData,
     400:	81 e0       	ldi	r24, 0x01	; 1
     402:	b6 01       	movw	r22, r12
     404:	a8 01       	movw	r20, r16
     406:	20 e0       	ldi	r18, 0x00	; 0
     408:	32 e0       	ldi	r19, 0x02	; 2
     40a:	3c d4       	rcall	.+2168   	; 0xc84 <USB_Host_GetDeviceConfigDescriptor>
     40c:	88 23       	and	r24, r24
     40e:	19 f0       	breq	.+6      	; 0x416 <main+0x88>
				                                       sizeof(ConfigDescriptorData)) != HOST_GETCONFIG_Successful)
				{
					puts_P(PSTR("Error Retrieving Configuration Descriptor.\r\n"));
     410:	80 ed       	ldi	r24, 0xD0	; 208
     412:	91 e0       	ldi	r25, 0x01	; 1
     414:	0a c0       	rjmp	.+20     	; 0x42a <main+0x9c>
					LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
					USB_HostState = HOST_STATE_WaitForDeviceRemoval;
					break;
				}

				if (HID_Host_ConfigurePipes(&Keyboard_HID_Interface,
     416:	69 81       	ldd	r22, Y+1	; 0x01
     418:	7a 81       	ldd	r23, Y+2	; 0x02
     41a:	80 e0       	ldi	r24, 0x00	; 0
     41c:	91 e0       	ldi	r25, 0x01	; 1
     41e:	a8 01       	movw	r20, r16
     420:	df d6       	rcall	.+3518   	; 0x11e0 <HID_Host_ConfigurePipes>
     422:	88 23       	and	r24, r24
     424:	59 f0       	breq	.+22     	; 0x43c <main+0xae>
				                            ConfigDescriptorSize, ConfigDescriptorData) != HID_ENUMERROR_NoError)
				{
					puts_P(PSTR("Attached Device Not a Valid Keyboard.\r\n"));
     426:	88 ea       	ldi	r24, 0xA8	; 168
     428:	91 e0       	ldi	r25, 0x01	; 1
     42a:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <puts_P>
     42e:	8b b1       	in	r24, 0x0b	; 11
     430:	8f 70       	andi	r24, 0x0F	; 15
     432:	80 69       	ori	r24, 0x90	; 144
     434:	8b b9       	out	0x0b, r24	; 11
					LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
					USB_HostState = HOST_STATE_WaitForDeviceRemoval;
     436:	10 92 46 01 	sts	0x0146, r1
     43a:	4e c0       	rjmp	.+156    	; 0x4d8 <main+0x14a>
					break;
				}

				if (USB_Host_SetDeviceConfiguration(1) != HOST_SENDCONTROL_Successful)
     43c:	81 e0       	ldi	r24, 0x01	; 1
     43e:	e9 d0       	rcall	.+466    	; 0x612 <USB_Host_SetDeviceConfiguration>
     440:	88 23       	and	r24, r24
     442:	19 f0       	breq	.+6      	; 0x44a <main+0xbc>
				{
					puts_P(PSTR("Error Setting Device Configuration.\r\n"));
     444:	82 e8       	ldi	r24, 0x82	; 130
     446:	91 e0       	ldi	r25, 0x01	; 1
     448:	f0 cf       	rjmp	.-32     	; 0x42a <main+0x9c>
					LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
					USB_HostState = HOST_STATE_WaitForDeviceRemoval;
					break;
				}

				if (HID_Host_SetBootProtocol(&Keyboard_HID_Interface) != 0)
     44a:	80 e0       	ldi	r24, 0x00	; 0
     44c:	91 e0       	ldi	r25, 0x01	; 1
     44e:	51 d6       	rcall	.+3234   	; 0x10f2 <HID_Host_SetBootProtocol>
     450:	88 23       	and	r24, r24
     452:	19 f0       	breq	.+6      	; 0x45a <main+0xcc>
				{
					puts_P(PSTR("Could not Set Boot Protocol Mode.\r\n"));
     454:	8e e5       	ldi	r24, 0x5E	; 94
     456:	91 e0       	ldi	r25, 0x01	; 1
     458:	e8 cf       	rjmp	.-48     	; 0x42a <main+0x9c>
					LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
					USB_HostState = HOST_STATE_WaitForDeviceRemoval;
					break;
				}

				puts_P(PSTR("Keyboard Enumerated.\r\n"));
     45a:	87 e4       	ldi	r24, 0x47	; 71
     45c:	91 e0       	ldi	r25, 0x01	; 1
     45e:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <puts_P>
     462:	8b b1       	in	r24, 0x0b	; 11
     464:	8f 70       	andi	r24, 0x0F	; 15
     466:	80 66       	ori	r24, 0x60	; 96
     468:	8b b9       	out	0x0b, r24	; 11
				LEDs_SetAllLEDs(LEDMASK_USB_READY);
				USB_HostState = HOST_STATE_Configured;
     46a:	a0 92 46 01 	sts	0x0146, r10
     46e:	34 c0       	rjmp	.+104    	; 0x4d8 <main+0x14a>
				break;
			case HOST_STATE_Configured:
				if (HID_Host_IsReportReceived(&Keyboard_HID_Interface))
     470:	80 e0       	ldi	r24, 0x00	; 0
     472:	91 e0       	ldi	r25, 0x01	; 1
     474:	22 d6       	rcall	.+3140   	; 0x10ba <HID_Host_IsReportReceived>
     476:	88 23       	and	r24, r24
     478:	79 f1       	breq	.+94     	; 0x4d8 <main+0x14a>
				{
					USB_KeyboardReport_Data_t KeyboardReport;
					HID_Host_ReceiveReport(&Keyboard_HID_Interface, &KeyboardReport);
     47a:	80 e0       	ldi	r24, 0x00	; 0
     47c:	91 e0       	ldi	r25, 0x01	; 1
     47e:	b7 01       	movw	r22, r14
     480:	63 d6       	rcall	.+3270   	; 0x1148 <HID_Host_ReceiveReport>

					LEDs_ChangeLEDs(LEDS_LED1, (KeyboardReport.Modifier) ? LEDS_LED1 : 0);
     482:	8b 81       	ldd	r24, Y+3	; 0x03
     484:	88 23       	and	r24, r24
     486:	11 f4       	brne	.+4      	; 0x48c <main+0xfe>
     488:	90 e0       	ldi	r25, 0x00	; 0
     48a:	01 c0       	rjmp	.+2      	; 0x48e <main+0x100>
     48c:	90 e1       	ldi	r25, 0x10	; 16
			}

			static inline void LEDs_ChangeLEDs(const uint8_t LEDMask,
			                                   const uint8_t ActiveMask)
			{
				PORTD = ((PORTD & ~LEDMask) | ActiveMask);
     48e:	8b b1       	in	r24, 0x0b	; 11
     490:	8f 7e       	andi	r24, 0xEF	; 239
     492:	98 2b       	or	r25, r24
     494:	9b b9       	out	0x0b, r25	; 11

					uint8_t KeyCode = KeyboardReport.KeyCode[0];
     496:	9d 81       	ldd	r25, Y+5	; 0x05

					if (KeyCode)
     498:	99 23       	and	r25, r25
     49a:	f1 f0       	breq	.+60     	; 0x4d8 <main+0x14a>
			}

			static inline void LEDs_ToggleLEDs(const uint8_t LEDMask)
			{
				PORTD ^= LEDMask;
     49c:	8b b1       	in	r24, 0x0b	; 11
     49e:	8b 25       	eor	r24, r11
     4a0:	8b b9       	out	0x0b, r24	; 11
						char PressedKey = 0;

						LEDs_ToggleLEDs(LEDS_LED2);

						/* Retrieve pressed key character if alphanumeric */
						if ((KeyCode >= HID_KEYBOARD_SC_A) && (KeyCode <= HID_KEYBOARD_SC_Z))
     4a2:	89 2f       	mov	r24, r25
     4a4:	84 50       	subi	r24, 0x04	; 4
     4a6:	8a 31       	cpi	r24, 0x1A	; 26
     4a8:	10 f4       	brcc	.+4      	; 0x4ae <main+0x120>
						{
							PressedKey = (KeyCode - HID_KEYBOARD_SC_A) + 'A';
     4aa:	8f 5b       	subi	r24, 0xBF	; 191
     4ac:	0d c0       	rjmp	.+26     	; 0x4c8 <main+0x13a>
						}
						else if ((KeyCode >= HID_KEYBOARD_SC_1_AND_EXCLAMATION) &
     4ae:	89 2f       	mov	r24, r25
     4b0:	8e 51       	subi	r24, 0x1E	; 30
     4b2:	8a 30       	cpi	r24, 0x0A	; 10
     4b4:	10 f4       	brcc	.+4      	; 0x4ba <main+0x12c>
						         (KeyCode <= HID_KEYBOARD_SC_0_AND_CLOSING_PARENTHESIS))
						{
							PressedKey = (KeyCode - HID_KEYBOARD_SC_1_AND_EXCLAMATION) + '0';
     4b6:	80 5d       	subi	r24, 0xD0	; 208
     4b8:	07 c0       	rjmp	.+14     	; 0x4c8 <main+0x13a>
						}
						else if (KeyCode == HID_KEYBOARD_SC_SPACE)
     4ba:	9c 32       	cpi	r25, 0x2C	; 44
     4bc:	11 f4       	brne	.+4      	; 0x4c2 <main+0x134>
     4be:	80 e2       	ldi	r24, 0x20	; 32
     4c0:	05 c0       	rjmp	.+10     	; 0x4cc <main+0x13e>
						{
							PressedKey = ' ';
						}
						else if (KeyCode == HID_KEYBOARD_SC_ENTER)
     4c2:	98 32       	cpi	r25, 0x28	; 40
     4c4:	49 f4       	brne	.+18     	; 0x4d8 <main+0x14a>
     4c6:	0a c0       	rjmp	.+20     	; 0x4dc <main+0x14e>
						{
							PressedKey = '\n';
						}
						
						if (PressedKey)
     4c8:	88 23       	and	r24, r24
     4ca:	31 f0       	breq	.+12     	; 0x4d8 <main+0x14a>
						  putchar(PressedKey);
     4cc:	60 91 49 01 	lds	r22, 0x0149
     4d0:	70 91 4a 01 	lds	r23, 0x014A
     4d4:	90 e0       	ldi	r25, 0x00	; 0
     4d6:	a4 d7       	rcall	.+3912   	; 0x1420 <fputc>

				break;
		}

		HID_Host_USBTask(&Keyboard_HID_Interface);
		USB_USBTask();
     4d8:	9c d5       	rcall	.+2872   	; 0x1012 <USB_USBTask>
     4da:	86 cf       	rjmp	.-244    	; 0x3e8 <main+0x5a>
	}
     4dc:	8a e0       	ldi	r24, 0x0A	; 10
     4de:	f6 cf       	rjmp	.-20     	; 0x4cc <main+0x13e>

000004e0 <USB_Host_WaitMS>:
		USB_ResetInterface();
	}
}

uint8_t USB_Host_WaitMS(uint8_t MS)
{
     4e0:	98 2f       	mov	r25, r24
			 *  \return Boolean true if the bus is currently suspended, false otherwise.
			 */
			static inline bool USB_Host_IsBusSuspended(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusSuspended(void)
			{
				return ((UHCON & (1 << SOFEN)) ? false : true);
     4e2:	20 91 9e 00 	lds	r18, 0x009E
	bool    BusSuspended = USB_Host_IsBusSuspended();
	uint8_t ErrorCode    = HOST_WAITERROR_Successful;
	bool    HSOFIEnabled = USB_INT_IsEnabled(USB_INT_HSOFI);
     4e6:	30 91 a0 00 	lds	r19, 0x00A0

	USB_INT_Disable(USB_INT_HSOFI);
     4ea:	80 91 a0 00 	lds	r24, 0x00A0
     4ee:	8f 7d       	andi	r24, 0xDF	; 223
     4f0:	80 93 a0 00 	sts	0x00A0, r24
	USB_INT_Clear(USB_INT_HSOFI);
     4f4:	80 91 9f 00 	lds	r24, 0x009F
     4f8:	8f 7d       	andi	r24, 0xDF	; 223
     4fa:	80 93 9f 00 	sts	0x009F, r24
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
     4fe:	80 91 9e 00 	lds	r24, 0x009E
     502:	81 60       	ori	r24, 0x01	; 1
     504:	80 93 9e 00 	sts	0x009E, r24
     508:	26 c0       	rjmp	.+76     	; 0x556 <USB_Host_WaitMS+0x76>

	USB_Host_ResumeBus();

	while (MS)
	{
		if (USB_INT_HasOccurred(USB_INT_HSOFI))
     50a:	80 91 9f 00 	lds	r24, 0x009F
     50e:	85 ff       	sbrs	r24, 5
     510:	06 c0       	rjmp	.+12     	; 0x51e <USB_Host_WaitMS+0x3e>
		{
			USB_INT_Clear(USB_INT_HSOFI);
     512:	80 91 9f 00 	lds	r24, 0x009F
     516:	8f 7d       	andi	r24, 0xDF	; 223
     518:	80 93 9f 00 	sts	0x009F, r24
			MS--;
     51c:	91 50       	subi	r25, 0x01	; 1
		}

		if ((USB_HostState == HOST_STATE_Unattached) || (USB_CurrentMode != USB_MODE_Host))
     51e:	80 91 46 01 	lds	r24, 0x0146
     522:	82 30       	cpi	r24, 0x02	; 2
     524:	11 f4       	brne	.+4      	; 0x52a <USB_Host_WaitMS+0x4a>
     526:	91 e0       	ldi	r25, 0x01	; 1
     528:	18 c0       	rjmp	.+48     	; 0x55a <USB_Host_WaitMS+0x7a>
			 *  \return Boolean true if an error has occurred on the selected pipe, false otherwise.
			 */
			static inline bool Pipe_IsError(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsError(void)
			{
				return ((UPINTX & (1 << PERRI)) ? true : false);
     52a:	80 91 a6 00 	lds	r24, 0x00A6
			ErrorCode = HOST_WAITERROR_DeviceDisconnect;

			break;
		}

		if (Pipe_IsError() == true)
     52e:	84 ff       	sbrs	r24, 4
     530:	07 c0       	rjmp	.+14     	; 0x540 <USB_Host_WaitMS+0x60>

			/** Clears the master pipe error flag. */
			static inline void Pipe_ClearError(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearError(void)
			{
				UPINTX &= ~(1 << PERRI);
     532:	80 91 a6 00 	lds	r24, 0x00A6
     536:	8f 7e       	andi	r24, 0xEF	; 239
     538:	80 93 a6 00 	sts	0x00A6, r24
     53c:	92 e0       	ldi	r25, 0x02	; 2
     53e:	0d c0       	rjmp	.+26     	; 0x55a <USB_Host_WaitMS+0x7a>
			 *  \return Boolean true if the current pipe has been stalled by the attached device, false otherwise.
			 */
			static inline bool Pipe_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsStalled(void)
			{
				return ((UPINTX & (1 << RXSTALLI)) ? true : false);
     540:	80 91 a6 00 	lds	r24, 0x00A6
			ErrorCode = HOST_WAITERROR_PipeError;

			break;
		}

		if (Pipe_IsStalled() == true)
     544:	81 ff       	sbrs	r24, 1
     546:	07 c0       	rjmp	.+14     	; 0x556 <USB_Host_WaitMS+0x76>
			 *  \ingroup Group_PipePacketManagement
			 */
			static inline void Pipe_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearStall(void)
			{
				UPINTX &= ~(1 << RXSTALLI);
     548:	80 91 a6 00 	lds	r24, 0x00A6
     54c:	8d 7f       	andi	r24, 0xFD	; 253
     54e:	80 93 a6 00 	sts	0x00A6, r24
     552:	93 e0       	ldi	r25, 0x03	; 3
     554:	02 c0       	rjmp	.+4      	; 0x55a <USB_Host_WaitMS+0x7a>
	USB_INT_Disable(USB_INT_HSOFI);
	USB_INT_Clear(USB_INT_HSOFI);

	USB_Host_ResumeBus();

	while (MS)
     556:	99 23       	and	r25, r25
     558:	c1 f6       	brne	.-80     	; 0x50a <USB_Host_WaitMS+0x2a>

			break;
		}
	}

	if (BusSuspended)
     55a:	20 fd       	sbrc	r18, 0
     55c:	05 c0       	rjmp	.+10     	; 0x568 <USB_Host_WaitMS+0x88>
			 *  messages to the device.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				UHCON &= ~(1 << SOFEN);
     55e:	80 91 9e 00 	lds	r24, 0x009E
     562:	8e 7f       	andi	r24, 0xFE	; 254
     564:	80 93 9e 00 	sts	0x009E, r24
	  USB_Host_SuspendBus();

	if (HSOFIEnabled)
     568:	35 ff       	sbrs	r19, 5
     56a:	05 c0       	rjmp	.+10     	; 0x576 <USB_Host_WaitMS+0x96>
	  USB_INT_Enable(USB_INT_HSOFI);
     56c:	80 91 a0 00 	lds	r24, 0x00A0
     570:	80 62       	ori	r24, 0x20	; 32
     572:	80 93 a0 00 	sts	0x00A0, r24

	return ErrorCode;
}
     576:	89 2f       	mov	r24, r25
     578:	08 95       	ret

0000057a <USB_Host_ResetDevice>:
			 *  \return Boolean true if the bus is currently suspended, false otherwise.
			 */
			static inline bool USB_Host_IsBusSuspended(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusSuspended(void)
			{
				return ((UHCON & (1 << SOFEN)) ? false : true);
     57a:	60 91 9e 00 	lds	r22, 0x009E

static void USB_Host_ResetDevice(void)
{
	bool BusSuspended = USB_Host_IsBusSuspended();

	USB_INT_Disable(USB_INT_DDISCI);
     57e:	80 91 a0 00 	lds	r24, 0x00A0
     582:	8d 7f       	andi	r24, 0xFD	; 253
     584:	80 93 a0 00 	sts	0x00A0, r24
			 *  woken up automatically and the bus resumed after the reset has been correctly issued.
			 */
			static inline void USB_Host_ResetBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResetBus(void)
			{
				UHCON |=  (1 << RESET);
     588:	80 91 9e 00 	lds	r24, 0x009E
     58c:	82 60       	ori	r24, 0x02	; 2
     58e:	80 93 9e 00 	sts	0x009E, r24
			 *  \return Boolean true if no bus reset is currently being sent, false otherwise.
			 */
			static inline bool USB_Host_IsBusResetComplete(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusResetComplete(void)
			{
				return ((UHCON & (1 << RESET)) ? false : true);
     592:	80 91 9e 00 	lds	r24, 0x009E

	USB_Host_ResetBus();
	while (!(USB_Host_IsBusResetComplete()));
     596:	81 fd       	sbrc	r24, 1
     598:	fc cf       	rjmp	.-8      	; 0x592 <USB_Host_ResetDevice+0x18>
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
     59a:	80 91 9e 00 	lds	r24, 0x009E
     59e:	81 60       	ori	r24, 0x01	; 1
     5a0:	80 93 9e 00 	sts	0x009E, r24
	USB_Host_ResumeBus();

	bool HSOFIEnabled = USB_INT_IsEnabled(USB_INT_HSOFI);
     5a4:	30 91 a0 00 	lds	r19, 0x00A0

	USB_INT_Disable(USB_INT_HSOFI);
     5a8:	80 91 a0 00 	lds	r24, 0x00A0
     5ac:	8f 7d       	andi	r24, 0xDF	; 223
     5ae:	80 93 a0 00 	sts	0x00A0, r24
	USB_INT_Clear(USB_INT_HSOFI);
     5b2:	80 91 9f 00 	lds	r24, 0x009F
     5b6:	8f 7d       	andi	r24, 0xDF	; 223
     5b8:	80 93 9f 00 	sts	0x009F, r24
     5bc:	2a e0       	ldi	r18, 0x0A	; 10
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     5be:	40 ed       	ldi	r20, 0xD0	; 208
     5c0:	57 e0       	ldi	r21, 0x07	; 7
		/* Workaround for powerless-pull-up devices. After a USB bus reset,
		   all disconnection interrupts are suppressed while a USB frame is
		   looked for - if it is found within 10ms, the device is still
		   present.                                                        */

		if (USB_INT_HasOccurred(USB_INT_HSOFI))
     5c2:	80 91 9f 00 	lds	r24, 0x009F
     5c6:	85 ff       	sbrs	r24, 5
     5c8:	0b c0       	rjmp	.+22     	; 0x5e0 <USB_Host_ResetDevice+0x66>
		{
			USB_INT_Clear(USB_INT_HSOFI);
     5ca:	80 91 9f 00 	lds	r24, 0x009F
     5ce:	8f 7d       	andi	r24, 0xDF	; 223
     5d0:	80 93 9f 00 	sts	0x009F, r24
			USB_INT_Clear(USB_INT_DDISCI);
     5d4:	80 91 9f 00 	lds	r24, 0x009F
     5d8:	8d 7f       	andi	r24, 0xFD	; 253
     5da:	80 93 9f 00 	sts	0x009F, r24
     5de:	05 c0       	rjmp	.+10     	; 0x5ea <USB_Host_ResetDevice+0x70>
     5e0:	ca 01       	movw	r24, r20
     5e2:	01 97       	sbiw	r24, 0x01	; 1
     5e4:	f1 f7       	brne	.-4      	; 0x5e2 <USB_Host_ResetDevice+0x68>
	bool HSOFIEnabled = USB_INT_IsEnabled(USB_INT_HSOFI);

	USB_INT_Disable(USB_INT_HSOFI);
	USB_INT_Clear(USB_INT_HSOFI);

	for (uint8_t MSRem = 10; MSRem != 0; MSRem--)
     5e6:	21 50       	subi	r18, 0x01	; 1
     5e8:	61 f7       	brne	.-40     	; 0x5c2 <USB_Host_ResetDevice+0x48>
		}

		_delay_ms(1);
	}

	if (HSOFIEnabled)
     5ea:	35 ff       	sbrs	r19, 5
     5ec:	05 c0       	rjmp	.+10     	; 0x5f8 <USB_Host_ResetDevice+0x7e>
	  USB_INT_Enable(USB_INT_HSOFI);
     5ee:	80 91 a0 00 	lds	r24, 0x00A0
     5f2:	80 62       	ori	r24, 0x20	; 32
     5f4:	80 93 a0 00 	sts	0x00A0, r24

	if (BusSuspended)
     5f8:	60 fd       	sbrc	r22, 0
     5fa:	05 c0       	rjmp	.+10     	; 0x606 <USB_Host_ResetDevice+0x8c>
			 *  messages to the device.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				UHCON &= ~(1 << SOFEN);
     5fc:	80 91 9e 00 	lds	r24, 0x009E
     600:	8e 7f       	andi	r24, 0xFE	; 254
     602:	80 93 9e 00 	sts	0x009E, r24
	  USB_Host_SuspendBus();

	USB_INT_Enable(USB_INT_DDISCI);
     606:	80 91 a0 00 	lds	r24, 0x00A0
     60a:	82 60       	ori	r24, 0x02	; 2
     60c:	80 93 a0 00 	sts	0x00A0, r24
}
     610:	08 95       	ret

00000612 <USB_Host_SetDeviceConfiguration>:

uint8_t USB_Host_SetDeviceConfiguration(const uint8_t ConfigNumber)
{
	USB_ControlRequest = (USB_Request_Header_t)
     612:	10 92 3e 01 	sts	0x013E, r1
     616:	99 e0       	ldi	r25, 0x09	; 9
     618:	90 93 3f 01 	sts	0x013F, r25
     61c:	80 93 40 01 	sts	0x0140, r24
     620:	10 92 41 01 	sts	0x0141, r1
     624:	10 92 43 01 	sts	0x0143, r1
     628:	10 92 42 01 	sts	0x0142, r1
     62c:	10 92 45 01 	sts	0x0145, r1
     630:	10 92 44 01 	sts	0x0144, r1
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
     634:	10 92 a7 00 	sts	0x00A7, r1
			.wLength       = 0,
		};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	return USB_Host_SendControlRequest(NULL);
     638:	80 e0       	ldi	r24, 0x00	; 0
     63a:	90 e0       	ldi	r25, 0x00	; 0
}
     63c:	a7 c3       	rjmp	.+1870   	; 0xd8c <USB_Host_SendControlRequest>

0000063e <USB_Host_ProcessNextHostState>:

#define  __INCLUDE_FROM_HOST_C
#include "Host.h"

void USB_Host_ProcessNextHostState(void)
{
     63e:	ef 92       	push	r14
     640:	0f 93       	push	r16
     642:	1f 93       	push	r17
     644:	df 93       	push	r29
     646:	cf 93       	push	r28
     648:	cd b7       	in	r28, 0x3d	; 61
     64a:	de b7       	in	r29, 0x3e	; 62
     64c:	28 97       	sbiw	r28, 0x08	; 8
     64e:	0f b6       	in	r0, 0x3f	; 63
     650:	f8 94       	cli
     652:	de bf       	out	0x3e, r29	; 62
     654:	0f be       	out	0x3f, r0	; 63
     656:	cd bf       	out	0x3d, r28	; 61
	uint8_t SubErrorCode = HOST_ENUMERROR_NoError;

	static uint16_t WaitMSRemaining;
	static uint8_t  PostWaitState;

	switch (USB_HostState)
     658:	80 91 46 01 	lds	r24, 0x0146
     65c:	86 30       	cpi	r24, 0x06	; 6
     65e:	09 f4       	brne	.+2      	; 0x662 <USB_Host_ProcessNextHostState+0x24>
     660:	94 c0       	rjmp	.+296    	; 0x78a <USB_Host_ProcessNextHostState+0x14c>
     662:	87 30       	cpi	r24, 0x07	; 7
     664:	70 f4       	brcc	.+28     	; 0x682 <USB_Host_ProcessNextHostState+0x44>
     666:	83 30       	cpi	r24, 0x03	; 3
     668:	c1 f1       	breq	.+112    	; 0x6da <USB_Host_ProcessNextHostState+0x9c>
     66a:	84 30       	cpi	r24, 0x04	; 4
     66c:	20 f4       	brcc	.+8      	; 0x676 <USB_Host_ProcessNextHostState+0x38>
     66e:	81 30       	cpi	r24, 0x01	; 1
     670:	09 f0       	breq	.+2      	; 0x674 <USB_Host_ProcessNextHostState+0x36>
     672:	07 c1       	rjmp	.+526    	; 0x882 <USB_Host_ProcessNextHostState+0x244>
     674:	13 c0       	rjmp	.+38     	; 0x69c <USB_Host_ProcessNextHostState+0x5e>
     676:	84 30       	cpi	r24, 0x04	; 4
     678:	c1 f1       	breq	.+112    	; 0x6ea <USB_Host_ProcessNextHostState+0xac>
     67a:	85 30       	cpi	r24, 0x05	; 5
     67c:	09 f0       	breq	.+2      	; 0x680 <USB_Host_ProcessNextHostState+0x42>
     67e:	01 c1       	rjmp	.+514    	; 0x882 <USB_Host_ProcessNextHostState+0x244>
     680:	5b c0       	rjmp	.+182    	; 0x738 <USB_Host_ProcessNextHostState+0xfa>
     682:	88 30       	cpi	r24, 0x08	; 8
     684:	09 f4       	brne	.+2      	; 0x688 <USB_Host_ProcessNextHostState+0x4a>
     686:	9b c0       	rjmp	.+310    	; 0x7be <USB_Host_ProcessNextHostState+0x180>
     688:	88 30       	cpi	r24, 0x08	; 8
     68a:	08 f4       	brcc	.+2      	; 0x68e <USB_Host_ProcessNextHostState+0x50>
     68c:	8a c0       	rjmp	.+276    	; 0x7a2 <USB_Host_ProcessNextHostState+0x164>
     68e:	89 30       	cpi	r24, 0x09	; 9
     690:	09 f4       	brne	.+2      	; 0x694 <USB_Host_ProcessNextHostState+0x56>
     692:	b4 c0       	rjmp	.+360    	; 0x7fc <USB_Host_ProcessNextHostState+0x1be>
     694:	8a 30       	cpi	r24, 0x0A	; 10
     696:	09 f0       	breq	.+2      	; 0x69a <USB_Host_ProcessNextHostState+0x5c>
     698:	f4 c0       	rjmp	.+488    	; 0x882 <USB_Host_ProcessNextHostState+0x244>
     69a:	d9 c0       	rjmp	.+434    	; 0x84e <USB_Host_ProcessNextHostState+0x210>
	{
		case HOST_STATE_WaitForDevice:
			if (WaitMSRemaining)
     69c:	00 91 3b 01 	lds	r16, 0x013B
     6a0:	10 91 3c 01 	lds	r17, 0x013C
     6a4:	01 15       	cp	r16, r1
     6a6:	11 05       	cpc	r17, r1
     6a8:	09 f4       	brne	.+2      	; 0x6ac <USB_Host_ProcessNextHostState+0x6e>
     6aa:	eb c0       	rjmp	.+470    	; 0x882 <USB_Host_ProcessNextHostState+0x244>
			{
				if ((SubErrorCode = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
     6ac:	81 e0       	ldi	r24, 0x01	; 1
     6ae:	18 df       	rcall	.-464    	; 0x4e0 <USB_Host_WaitMS>
     6b0:	68 2f       	mov	r22, r24
     6b2:	88 23       	and	r24, r24
     6b4:	31 f0       	breq	.+12     	; 0x6c2 <USB_Host_ProcessNextHostState+0x84>
				{
					USB_HostState = PostWaitState;
     6b6:	80 91 3a 01 	lds	r24, 0x013A
     6ba:	80 93 46 01 	sts	0x0146, r24
     6be:	91 e0       	ldi	r25, 0x01	; 1
     6c0:	dc c0       	rjmp	.+440    	; 0x87a <USB_Host_ProcessNextHostState+0x23c>
					ErrorCode     = HOST_ENUMERROR_WaitStage;
					break;
				}

				if (!(--WaitMSRemaining))
     6c2:	c8 01       	movw	r24, r16
     6c4:	01 97       	sbiw	r24, 0x01	; 1
     6c6:	90 93 3c 01 	sts	0x013C, r25
     6ca:	80 93 3b 01 	sts	0x013B, r24
     6ce:	89 2b       	or	r24, r25
     6d0:	09 f0       	breq	.+2      	; 0x6d4 <USB_Host_ProcessNextHostState+0x96>
     6d2:	d7 c0       	rjmp	.+430    	; 0x882 <USB_Host_ProcessNextHostState+0x244>
				  USB_HostState = PostWaitState;
     6d4:	80 91 3a 01 	lds	r24, 0x013A
     6d8:	bf c0       	rjmp	.+382    	; 0x858 <USB_Host_ProcessNextHostState+0x21a>
			}

			break;
		case HOST_STATE_Powered:
			WaitMSRemaining = HOST_DEVICE_SETTLE_DELAY_MS;
     6da:	88 ee       	ldi	r24, 0xE8	; 232
     6dc:	93 e0       	ldi	r25, 0x03	; 3
     6de:	90 93 3c 01 	sts	0x013C, r25
     6e2:	80 93 3b 01 	sts	0x013B, r24

			USB_HostState = HOST_STATE_Powered_WaitForDeviceSettle;
     6e6:	84 e0       	ldi	r24, 0x04	; 4
     6e8:	b7 c0       	rjmp	.+366    	; 0x858 <USB_Host_ProcessNextHostState+0x21a>
			break;
		case HOST_STATE_Powered_WaitForDeviceSettle:
			if (WaitMSRemaining--)
     6ea:	80 91 3b 01 	lds	r24, 0x013B
     6ee:	90 91 3c 01 	lds	r25, 0x013C
     6f2:	01 97       	sbiw	r24, 0x01	; 1
     6f4:	90 93 3c 01 	sts	0x013C, r25
     6f8:	80 93 3b 01 	sts	0x013B, r24
     6fc:	01 96       	adiw	r24, 0x01	; 1
     6fe:	29 f0       	breq	.+10     	; 0x70a <USB_Host_ProcessNextHostState+0xcc>
     700:	80 ed       	ldi	r24, 0xD0	; 208
     702:	97 e0       	ldi	r25, 0x07	; 7
     704:	01 97       	sbiw	r24, 0x01	; 1
     706:	f1 f7       	brne	.-4      	; 0x704 <USB_Host_ProcessNextHostState+0xc6>
     708:	bc c0       	rjmp	.+376    	; 0x882 <USB_Host_ProcessNextHostState+0x244>
			}

			static inline void USB_Host_VBUS_Manual_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Manual_Off(void)
			{
				PORTE  &= ~(1 << 7);
     70a:	77 98       	cbi	0x0e, 7	; 14

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON  |=  (1 << OTGPADE);
     70c:	80 91 d8 00 	lds	r24, 0x00D8
     710:	80 61       	ori	r24, 0x10	; 16
     712:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_Host_VBUS_Auto_Enable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Enable(void)
			{
				OTGCON &= ~(1 << VBUSHWC);
     716:	80 91 dd 00 	lds	r24, 0x00DD
     71a:	8b 7f       	andi	r24, 0xFB	; 251
     71c:	80 93 dd 00 	sts	0x00DD, r24
				UHWCON |=  (1 << UVCONE);
     720:	80 91 d7 00 	lds	r24, 0x00D7
     724:	80 61       	ori	r24, 0x10	; 16
     726:	80 93 d7 00 	sts	0x00D7, r24
			}

			static inline void USB_Host_VBUS_Auto_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_On(void)
			{
				OTGCON |=  (1 << VBUSREQ);
     72a:	80 91 dd 00 	lds	r24, 0x00DD
     72e:	82 60       	ori	r24, 0x02	; 2
     730:	80 93 dd 00 	sts	0x00DD, r24

				USB_OTGPAD_On();
				USB_Host_VBUS_Auto_Enable();
				USB_Host_VBUS_Auto_On();

				USB_HostState = HOST_STATE_Powered_WaitForConnect;
     734:	85 e0       	ldi	r24, 0x05	; 5
     736:	90 c0       	rjmp	.+288    	; 0x858 <USB_Host_ProcessNextHostState+0x21a>
			}

			break;
		case HOST_STATE_Powered_WaitForConnect:
			if (USB_INT_HasOccurred(USB_INT_DCONNI))
     738:	80 91 9f 00 	lds	r24, 0x009F
     73c:	80 ff       	sbrs	r24, 0
     73e:	a1 c0       	rjmp	.+322    	; 0x882 <USB_Host_ProcessNextHostState+0x244>
			{
				USB_INT_Clear(USB_INT_DCONNI);
     740:	80 91 9f 00 	lds	r24, 0x009F
     744:	8e 7f       	andi	r24, 0xFE	; 254
     746:	80 93 9f 00 	sts	0x009F, r24
				USB_INT_Clear(USB_INT_DDISCI);
     74a:	80 91 9f 00 	lds	r24, 0x009F
     74e:	8d 7f       	andi	r24, 0xFD	; 253
     750:	80 93 9f 00 	sts	0x009F, r24

				USB_INT_Clear(USB_INT_VBERRI);
     754:	80 91 df 00 	lds	r24, 0x00DF
     758:	8d 7f       	andi	r24, 0xFD	; 253
     75a:	80 93 df 00 	sts	0x00DF, r24
				USB_INT_Enable(USB_INT_VBERRI);
     75e:	80 91 de 00 	lds	r24, 0x00DE
     762:	82 60       	ori	r24, 0x02	; 2
     764:	80 93 de 00 	sts	0x00DE, r24
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
     768:	80 91 9e 00 	lds	r24, 0x009E
     76c:	81 60       	ori	r24, 0x01	; 1
     76e:	80 93 9e 00 	sts	0x009E, r24

				USB_Host_ResumeBus();
				Pipe_ClearPipes();
     772:	c9 d0       	rcall	.+402    	; 0x906 <Pipe_ClearPipes>

				HOST_TASK_NONBLOCK_WAIT(100, HOST_STATE_Powered_DoReset);
     774:	81 e0       	ldi	r24, 0x01	; 1
     776:	80 93 46 01 	sts	0x0146, r24
     77a:	84 e6       	ldi	r24, 0x64	; 100
     77c:	90 e0       	ldi	r25, 0x00	; 0
     77e:	90 93 3c 01 	sts	0x013C, r25
     782:	80 93 3b 01 	sts	0x013B, r24
     786:	86 e0       	ldi	r24, 0x06	; 6
     788:	5f c0       	rjmp	.+190    	; 0x848 <USB_Host_ProcessNextHostState+0x20a>
			}

			break;
		case HOST_STATE_Powered_DoReset:
			USB_Host_ResetDevice();
     78a:	f7 de       	rcall	.-530    	; 0x57a <USB_Host_ResetDevice>

			HOST_TASK_NONBLOCK_WAIT(200, HOST_STATE_Powered_ConfigPipe);
     78c:	81 e0       	ldi	r24, 0x01	; 1
     78e:	80 93 46 01 	sts	0x0146, r24
     792:	88 ec       	ldi	r24, 0xC8	; 200
     794:	90 e0       	ldi	r25, 0x00	; 0
     796:	90 93 3c 01 	sts	0x013C, r25
     79a:	80 93 3b 01 	sts	0x013B, r24
     79e:	87 e0       	ldi	r24, 0x07	; 7
     7a0:	53 c0       	rjmp	.+166    	; 0x848 <USB_Host_ProcessNextHostState+0x20a>
			break;
		case HOST_STATE_Powered_ConfigPipe:
			Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL,
     7a2:	80 e0       	ldi	r24, 0x00	; 0
     7a4:	60 e0       	ldi	r22, 0x00	; 0
     7a6:	40 e0       	ldi	r20, 0x00	; 0
     7a8:	20 e0       	ldi	r18, 0x00	; 0
     7aa:	00 e4       	ldi	r16, 0x40	; 64
     7ac:	10 e0       	ldi	r17, 0x00	; 0
     7ae:	ee 24       	eor	r14, r14
     7b0:	74 d0       	rcall	.+232    	; 0x89a <Pipe_ConfigurePipe>
			 *  \return Boolean true if the selected pipe is configured, false otherwise.
			 */
			static inline bool Pipe_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsConfigured(void)
			{
				return ((UPSTAX & (1 << CFGOK)) ? true : false);
     7b2:	80 91 ac 00 	lds	r24, 0x00AC
							   PIPE_TOKEN_SETUP, ENDPOINT_CONTROLEP,
							   PIPE_CONTROLPIPE_DEFAULT_SIZE, PIPE_BANK_SINGLE);

			if (!(Pipe_IsConfigured()))
     7b6:	87 ff       	sbrs	r24, 7
     7b8:	5e c0       	rjmp	.+188    	; 0x876 <USB_Host_ProcessNextHostState+0x238>
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
				SubErrorCode = 0;
				break;
			}

			USB_HostState = HOST_STATE_Default;
     7ba:	88 e0       	ldi	r24, 0x08	; 8
     7bc:	4d c0       	rjmp	.+154    	; 0x858 <USB_Host_ProcessNextHostState+0x21a>
			break;
		case HOST_STATE_Default:
			USB_ControlRequest = (USB_Request_Header_t)
     7be:	ae e3       	ldi	r26, 0x3E	; 62
     7c0:	b1 e0       	ldi	r27, 0x01	; 1
     7c2:	e3 e2       	ldi	r30, 0x23	; 35
     7c4:	f1 e0       	ldi	r31, 0x01	; 1
     7c6:	88 e0       	ldi	r24, 0x08	; 8
     7c8:	01 90       	ld	r0, Z+
     7ca:	0d 92       	st	X+, r0
     7cc:	81 50       	subi	r24, 0x01	; 1
     7ce:	e1 f7       	brne	.-8      	; 0x7c8 <USB_Host_ProcessNextHostState+0x18a>
					.wLength       = 8,
				};

			uint8_t DataBuffer[8];

			if ((SubErrorCode = USB_Host_SendControlRequest(DataBuffer)) != HOST_SENDCONTROL_Successful)
     7d0:	ce 01       	movw	r24, r28
     7d2:	01 96       	adiw	r24, 0x01	; 1
     7d4:	db d2       	rcall	.+1462   	; 0xd8c <USB_Host_SendControlRequest>
     7d6:	68 2f       	mov	r22, r24
     7d8:	88 23       	and	r24, r24
     7da:	09 f0       	breq	.+2      	; 0x7de <USB_Host_ProcessNextHostState+0x1a0>
     7dc:	4a c0       	rjmp	.+148    	; 0x872 <USB_Host_ProcessNextHostState+0x234>
			{
				ErrorCode = HOST_ENUMERROR_ControlError;
				break;
			}

			USB_ControlPipeSize = DataBuffer[offsetof(USB_Descriptor_Device_t, Endpoint0Size)];
     7de:	88 85       	ldd	r24, Y+8	; 0x08
     7e0:	80 93 2b 01 	sts	0x012B, r24

			USB_Host_ResetDevice();
     7e4:	ca de       	rcall	.-620    	; 0x57a <USB_Host_ResetDevice>

			HOST_TASK_NONBLOCK_WAIT(200, HOST_STATE_Default_PostReset);
     7e6:	81 e0       	ldi	r24, 0x01	; 1
     7e8:	80 93 46 01 	sts	0x0146, r24
     7ec:	88 ec       	ldi	r24, 0xC8	; 200
     7ee:	90 e0       	ldi	r25, 0x00	; 0
     7f0:	90 93 3c 01 	sts	0x013C, r25
     7f4:	80 93 3b 01 	sts	0x013B, r24
     7f8:	89 e0       	ldi	r24, 0x09	; 9
     7fa:	26 c0       	rjmp	.+76     	; 0x848 <USB_Host_ProcessNextHostState+0x20a>
			break;
		case HOST_STATE_Default_PostReset:
			Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL,
     7fc:	00 91 2b 01 	lds	r16, 0x012B
     800:	80 e0       	ldi	r24, 0x00	; 0
     802:	60 e0       	ldi	r22, 0x00	; 0
     804:	40 e0       	ldi	r20, 0x00	; 0
     806:	20 e0       	ldi	r18, 0x00	; 0
     808:	10 e0       	ldi	r17, 0x00	; 0
     80a:	ee 24       	eor	r14, r14
     80c:	46 d0       	rcall	.+140    	; 0x89a <Pipe_ConfigurePipe>
     80e:	80 91 ac 00 	lds	r24, 0x00AC
			                   PIPE_TOKEN_SETUP, ENDPOINT_CONTROLEP,
			                   USB_ControlPipeSize, PIPE_BANK_SINGLE);

			if (!(Pipe_IsConfigured()))
     812:	87 ff       	sbrs	r24, 7
     814:	30 c0       	rjmp	.+96     	; 0x876 <USB_Host_ProcessNextHostState+0x238>
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
				SubErrorCode = 0;
				break;
			}

			USB_ControlRequest = (USB_Request_Header_t)
     816:	ae e3       	ldi	r26, 0x3E	; 62
     818:	b1 e0       	ldi	r27, 0x01	; 1
     81a:	eb e1       	ldi	r30, 0x1B	; 27
     81c:	f1 e0       	ldi	r31, 0x01	; 1
     81e:	88 e0       	ldi	r24, 0x08	; 8
     820:	01 90       	ld	r0, Z+
     822:	0d 92       	st	X+, r0
     824:	81 50       	subi	r24, 0x01	; 1
     826:	e1 f7       	brne	.-8      	; 0x820 <USB_Host_ProcessNextHostState+0x1e2>
					.wValue        = USB_HOST_DEVICEADDRESS,
					.wIndex        = 0,
					.wLength       = 0,
				};

			if ((SubErrorCode = USB_Host_SendControlRequest(NULL)) != HOST_SENDCONTROL_Successful)
     828:	80 e0       	ldi	r24, 0x00	; 0
     82a:	90 e0       	ldi	r25, 0x00	; 0
     82c:	af d2       	rcall	.+1374   	; 0xd8c <USB_Host_SendControlRequest>
     82e:	68 2f       	mov	r22, r24
     830:	88 23       	and	r24, r24
     832:	f9 f4       	brne	.+62     	; 0x872 <USB_Host_ProcessNextHostState+0x234>
			{
				ErrorCode = HOST_ENUMERROR_ControlError;
				break;
			}

			HOST_TASK_NONBLOCK_WAIT(100, HOST_STATE_Default_PostAddressSet);
     834:	81 e0       	ldi	r24, 0x01	; 1
     836:	80 93 46 01 	sts	0x0146, r24
     83a:	84 e6       	ldi	r24, 0x64	; 100
     83c:	90 e0       	ldi	r25, 0x00	; 0
     83e:	90 93 3c 01 	sts	0x013C, r25
     842:	80 93 3b 01 	sts	0x013B, r24
     846:	8a e0       	ldi	r24, 0x0A	; 10
     848:	80 93 3a 01 	sts	0x013A, r24
     84c:	1a c0       	rjmp	.+52     	; 0x882 <USB_Host_ProcessNextHostState+0x244>
			}

			static inline void USB_Host_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SetDeviceAddress(const uint8_t Address)
			{
				UHADDR  =  (Address & 0x7F);
     84e:	81 e0       	ldi	r24, 0x01	; 1
     850:	80 93 a1 00 	sts	0x00A1, r24
			break;
		case HOST_STATE_Default_PostAddressSet:
			USB_Host_SetDeviceAddress(USB_HOST_DEVICEADDRESS);

			EVENT_USB_Host_DeviceEnumerationComplete();
     854:	07 dd       	rcall	.-1522   	; 0x264 <EVENT_USB_Host_DeviceEnumerationComplete>
			USB_HostState = HOST_STATE_Addressed;
     856:	8b e0       	ldi	r24, 0x0B	; 11
     858:	80 93 46 01 	sts	0x0146, r24
     85c:	12 c0       	rjmp	.+36     	; 0x882 <USB_Host_ProcessNextHostState+0x244>
			break;
	}

	if ((ErrorCode != HOST_ENUMERROR_NoError) && (USB_HostState != HOST_STATE_Unattached))
	{
		EVENT_USB_Host_DeviceEnumerationFailed(ErrorCode, SubErrorCode);
     85e:	89 2f       	mov	r24, r25
     860:	06 dd       	rcall	.-1524   	; 0x26e <EVENT_USB_Host_DeviceEnumerationFailed>
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
     862:	80 91 dd 00 	lds	r24, 0x00DD
     866:	81 60       	ori	r24, 0x01	; 1
     868:	80 93 dd 00 	sts	0x00DD, r24

		USB_Host_VBUS_Auto_Off();

		EVENT_USB_Host_DeviceUnattached();
     86c:	49 dd       	rcall	.-1390   	; 0x300 <EVENT_USB_Host_DeviceUnattached>

		USB_ResetInterface();
     86e:	ba d0       	rcall	.+372    	; 0x9e4 <USB_ResetInterface>
     870:	08 c0       	rjmp	.+16     	; 0x882 <USB_Host_ProcessNextHostState+0x244>
	}
}
     872:	93 e0       	ldi	r25, 0x03	; 3
     874:	02 c0       	rjmp	.+4      	; 0x87a <USB_Host_ProcessNextHostState+0x23c>
     876:	94 e0       	ldi	r25, 0x04	; 4
     878:	60 e0       	ldi	r22, 0x00	; 0
			EVENT_USB_Host_DeviceEnumerationComplete();
			USB_HostState = HOST_STATE_Addressed;
			break;
	}

	if ((ErrorCode != HOST_ENUMERROR_NoError) && (USB_HostState != HOST_STATE_Unattached))
     87a:	80 91 46 01 	lds	r24, 0x0146
     87e:	82 30       	cpi	r24, 0x02	; 2
     880:	71 f7       	brne	.-36     	; 0x85e <USB_Host_ProcessNextHostState+0x220>

		EVENT_USB_Host_DeviceUnattached();

		USB_ResetInterface();
	}
}
     882:	28 96       	adiw	r28, 0x08	; 8
     884:	0f b6       	in	r0, 0x3f	; 63
     886:	f8 94       	cli
     888:	de bf       	out	0x3e, r29	; 62
     88a:	0f be       	out	0x3f, r0	; 63
     88c:	cd bf       	out	0x3d, r28	; 61
     88e:	cf 91       	pop	r28
     890:	df 91       	pop	r29
     892:	1f 91       	pop	r17
     894:	0f 91       	pop	r16
     896:	ef 90       	pop	r14
     898:	08 95       	ret

0000089a <Pipe_ConfigurePipe>:
                        const uint8_t Type,
                        const uint8_t Token,
                        const uint8_t EndpointNumber,
                        const uint16_t Size,
                        const uint8_t Banks)
{
     89a:	ef 92       	push	r14
     89c:	0f 93       	push	r16
     89e:	1f 93       	push	r17
     8a0:	9e 2d       	mov	r25, r14
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
     8a2:	80 93 a7 00 	sts	0x00A7, r24
			 *  \pre The currently selected pipe must first be configured properly via \ref Pipe_ConfigurePipe().
			 */
			static inline void Pipe_EnablePipe(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_EnablePipe(void)
			{
				UPCONX |= (1 << PEN);
     8a6:	80 91 a9 00 	lds	r24, 0x00A9
     8aa:	81 60       	ori	r24, 0x01	; 1
     8ac:	80 93 a9 00 	sts	0x00A9, r24
	Pipe_SelectPipe(Number);
	Pipe_EnablePipe();

	UPCFG1X = 0;
     8b0:	10 92 ab 00 	sts	0x00AB, r1

	UPCFG0X = ((Type << EPTYPE0) | Token | ((EndpointNumber & PIPE_EPNUM_MASK) << PEPNUM0));
     8b4:	62 95       	swap	r22
     8b6:	66 0f       	add	r22, r22
     8b8:	66 0f       	add	r22, r22
     8ba:	60 7c       	andi	r22, 0xC0	; 192
     8bc:	64 2b       	or	r22, r20
     8be:	2f 70       	andi	r18, 0x0F	; 15
     8c0:	62 2b       	or	r22, r18
     8c2:	60 93 aa 00 	sts	0x00AA, r22
     8c6:	28 e0       	ldi	r18, 0x08	; 8
     8c8:	30 e0       	ldi	r19, 0x00	; 0
     8ca:	80 e0       	ldi	r24, 0x00	; 0
     8cc:	03 c0       	rjmp	.+6      	; 0x8d4 <Pipe_ConfigurePipe+0x3a>
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while ((CheckBytes < Bytes) && (CheckBytes < PIPE_MAX_SIZE))
				{
					MaskVal++;
     8ce:	8f 5f       	subi	r24, 0xFF	; 255
					CheckBytes <<= 1;
     8d0:	22 0f       	add	r18, r18
     8d2:	33 1f       	adc	r19, r19
			static inline uint8_t Pipe_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while ((CheckBytes < Bytes) && (CheckBytes < PIPE_MAX_SIZE))
     8d4:	20 17       	cp	r18, r16
     8d6:	31 07       	cpc	r19, r17
     8d8:	10 f4       	brcc	.+4      	; 0x8de <Pipe_ConfigurePipe+0x44>
     8da:	85 30       	cpi	r24, 0x05	; 5
     8dc:	c1 f7       	brne	.-16     	; 0x8ce <Pipe_ConfigurePipe+0x34>
	UPCFG1X = ((1 << ALLOC) | Banks | Pipe_BytesToEPSizeMask(Size));
     8de:	92 60       	ori	r25, 0x02	; 2
     8e0:	82 95       	swap	r24
     8e2:	80 7f       	andi	r24, 0xF0	; 240
     8e4:	89 2b       	or	r24, r25
     8e6:	80 93 ab 00 	sts	0x00AB, r24

			/** Configures the currently selected pipe to allow for an unlimited number of IN requests. */
			static inline void Pipe_SetInfiniteINRequests(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetInfiniteINRequests(void)
			{
				UPCONX |= (1 << INMODE);
     8ea:	80 91 a9 00 	lds	r24, 0x00A9
     8ee:	80 62       	ori	r24, 0x20	; 32
     8f0:	80 93 a9 00 	sts	0x00A9, r24
			 *  \return Boolean true if the selected pipe is configured, false otherwise.
			 */
			static inline bool Pipe_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsConfigured(void)
			{
				return ((UPSTAX & (1 << CFGOK)) ? true : false);
     8f4:	80 91 ac 00 	lds	r24, 0x00AC

	Pipe_SetInfiniteINRequests();

	return Pipe_IsConfigured();
}
     8f8:	88 1f       	adc	r24, r24
     8fa:	88 27       	eor	r24, r24
     8fc:	88 1f       	adc	r24, r24
     8fe:	1f 91       	pop	r17
     900:	0f 91       	pop	r16
     902:	ef 90       	pop	r14
     904:	08 95       	ret

00000906 <Pipe_ClearPipes>:

void Pipe_ClearPipes(void)
{
	UPINT = 0;
     906:	10 92 f8 00 	sts	0x00F8, r1
     90a:	90 e0       	ldi	r25, 0x00	; 0
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
     90c:	90 93 a7 00 	sts	0x00A7, r25

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
	{
		Pipe_SelectPipe(PNum);
		UPIENX  = 0;
     910:	10 92 ae 00 	sts	0x00AE, r1
		UPINTX  = 0;
     914:	10 92 a6 00 	sts	0x00A6, r1
		UPCFG1X = 0;
     918:	10 92 ab 00 	sts	0x00AB, r1
			 *  from an attached device.
			 */
			static inline void Pipe_DisablePipe(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_DisablePipe(void)
			{
				UPCONX &= ~(1 << PEN);
     91c:	80 91 a9 00 	lds	r24, 0x00A9
     920:	8e 7f       	andi	r24, 0xFE	; 254
     922:	80 93 a9 00 	sts	0x00A9, r24

void Pipe_ClearPipes(void)
{
	UPINT = 0;

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
     926:	9f 5f       	subi	r25, 0xFF	; 255
     928:	97 30       	cpi	r25, 0x07	; 7
     92a:	81 f7       	brne	.-32     	; 0x90c <Pipe_ClearPipes+0x6>
		UPIENX  = 0;
		UPINTX  = 0;
		UPCFG1X = 0;
		Pipe_DisablePipe();
	}
}
     92c:	08 95       	ret

0000092e <Pipe_IsEndpointBound>:

bool Pipe_IsEndpointBound(const uint8_t EndpointAddress)
{
     92e:	e8 2f       	mov	r30, r24
			 *  \return Index of the currently selected pipe.
			 */
			static inline uint8_t Pipe_GetCurrentPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetCurrentPipe(void)
			{
				return (UPNUM & PIPE_PIPENUM_MASK);
     930:	70 91 a7 00 	lds	r23, 0x00A7
     934:	60 e0       	ldi	r22, 0x00	; 0
		bool    PipeTokenCorrect = true;

		if (PipeToken != PIPE_TOKEN_SETUP)
		  PipeTokenCorrect = (PipeToken == ((EndpointAddress & PIPE_EPDIR_MASK) ? PIPE_TOKEN_IN : PIPE_TOKEN_OUT));

		if (PipeTokenCorrect && (Pipe_BoundEndpointNumber() == (EndpointAddress & PIPE_EPNUM_MASK)))
     936:	48 2f       	mov	r20, r24
     938:	50 e0       	ldi	r21, 0x00	; 0
     93a:	4f 70       	andi	r20, 0x0F	; 15
     93c:	50 70       	andi	r21, 0x00	; 0
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
     93e:	60 93 a7 00 	sts	0x00A7, r22
			 *  \return Boolean true if the selected pipe is configured, false otherwise.
			 */
			static inline bool Pipe_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsConfigured(void)
			{
				return ((UPSTAX & (1 << CFGOK)) ? true : false);
     942:	80 91 ac 00 	lds	r24, 0x00AC

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
	{
		Pipe_SelectPipe(PNum);

		if (!(Pipe_IsConfigured()))
     946:	87 ff       	sbrs	r24, 7
     948:	18 c0       	rjmp	.+48     	; 0x97a <Pipe_IsEndpointBound+0x4c>
			 *  \return The current pipe token, as a PIPE_TOKEN_* mask.
			 */
			static inline uint8_t Pipe_GetPipeToken(void) ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetPipeToken(void)
			{
				return (UPCFG0X & (0x03 << PTOKEN0));
     94a:	80 91 aa 00 	lds	r24, 0x00AA
     94e:	80 73       	andi	r24, 0x30	; 48
		  continue;

		uint8_t PipeToken        = Pipe_GetPipeToken();
		bool    PipeTokenCorrect = true;

		if (PipeToken != PIPE_TOKEN_SETUP)
     950:	59 f0       	breq	.+22     	; 0x968 <Pipe_IsEndpointBound+0x3a>
		  PipeTokenCorrect = (PipeToken == ((EndpointAddress & PIPE_EPDIR_MASK) ? PIPE_TOKEN_IN : PIPE_TOKEN_OUT));
     952:	e7 fd       	sbrc	r30, 7
     954:	03 c0       	rjmp	.+6      	; 0x95c <Pipe_IsEndpointBound+0x2e>
     956:	20 e2       	ldi	r18, 0x20	; 32
     958:	30 e0       	ldi	r19, 0x00	; 0
     95a:	02 c0       	rjmp	.+4      	; 0x960 <Pipe_IsEndpointBound+0x32>
     95c:	20 e1       	ldi	r18, 0x10	; 16
     95e:	30 e0       	ldi	r19, 0x00	; 0

		if (PipeTokenCorrect && (Pipe_BoundEndpointNumber() == (EndpointAddress & PIPE_EPNUM_MASK)))
     960:	90 e0       	ldi	r25, 0x00	; 0
     962:	82 17       	cp	r24, r18
     964:	93 07       	cpc	r25, r19
     966:	49 f4       	brne	.+18     	; 0x97a <Pipe_IsEndpointBound+0x4c>
			 *  \return Endpoint number the currently selected pipe is bound to.
			 */
			static inline uint8_t Pipe_BoundEndpointNumber(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_BoundEndpointNumber(void)
			{
				return ((UPCFG0X >> PEPNUM0) & PIPE_EPNUM_MASK);
     968:	80 91 aa 00 	lds	r24, 0x00AA
     96c:	8f 70       	andi	r24, 0x0F	; 15
     96e:	90 e0       	ldi	r25, 0x00	; 0
     970:	84 17       	cp	r24, r20
     972:	95 07       	cpc	r25, r21
     974:	11 f4       	brne	.+4      	; 0x97a <Pipe_IsEndpointBound+0x4c>
     976:	81 e0       	ldi	r24, 0x01	; 1
     978:	08 95       	ret

bool Pipe_IsEndpointBound(const uint8_t EndpointAddress)
{
	uint8_t PrevPipeNumber = Pipe_GetCurrentPipe();

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
     97a:	6f 5f       	subi	r22, 0xFF	; 255
     97c:	67 30       	cpi	r22, 0x07	; 7
     97e:	f9 f6       	brne	.-66     	; 0x93e <Pipe_IsEndpointBound+0x10>
			 *  \return Index of the currently selected pipe.
			 */
			static inline uint8_t Pipe_GetCurrentPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetCurrentPipe(void)
			{
				return (UPNUM & PIPE_PIPENUM_MASK);
     980:	77 70       	andi	r23, 0x07	; 7
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
     982:	70 93 a7 00 	sts	0x00A7, r23
     986:	80 e0       	ldi	r24, 0x00	; 0
		  return true;
	}

	Pipe_SelectPipe(PrevPipeNumber);
	return false;
}
     988:	08 95       	ret

0000098a <Pipe_WaitUntilReady>:
			/** Returns the current USB frame number, when in host mode. Every millisecond the USB bus is active (i.e. not suspended)
			 *  the frame number is incremented by one.
			 */
			static inline uint16_t USB_Host_GetFrameNumber(void)
			{
				return UHFNUM;
     98a:	40 91 a2 00 	lds	r20, 0x00A2
     98e:	50 91 a3 00 	lds	r21, 0x00A3
     992:	24 e6       	ldi	r18, 0x64	; 100
			 *  \return The current pipe token, as a PIPE_TOKEN_* mask.
			 */
			static inline uint8_t Pipe_GetPipeToken(void) ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetPipeToken(void)
			{
				return (UPCFG0X & (0x03 << PTOKEN0));
     994:	80 91 aa 00 	lds	r24, 0x00AA

	uint16_t PreviousFrameNumber = USB_Host_GetFrameNumber();

	for (;;)
	{
		if (Pipe_GetPipeToken() == PIPE_TOKEN_IN)
     998:	80 73       	andi	r24, 0x30	; 48
     99a:	80 31       	cpi	r24, 0x10	; 16
     99c:	29 f4       	brne	.+10     	; 0x9a8 <Pipe_WaitUntilReady+0x1e>
			 *  \return Boolean true if the current pipe has received an IN packet, false otherwise.
			 */
			static inline bool Pipe_IsINReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsINReceived(void)
			{
				return ((UPINTX & (1 << RXINI)) ? true : false);
     99e:	80 91 a6 00 	lds	r24, 0x00A6
		{
			if (Pipe_IsINReceived())
     9a2:	80 ff       	sbrs	r24, 0
     9a4:	05 c0       	rjmp	.+10     	; 0x9b0 <Pipe_WaitUntilReady+0x26>
     9a6:	1c c0       	rjmp	.+56     	; 0x9e0 <Pipe_WaitUntilReady+0x56>
			 *  \return Boolean true if the current pipe is ready for an OUT packet, false otherwise.
			 */
			static inline bool Pipe_IsOUTReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsOUTReady(void)
			{
				return ((UPINTX & (1 << TXOUTI)) ? true : false);
     9a8:	80 91 a6 00 	lds	r24, 0x00A6
			  return PIPE_READYWAIT_NoError;
		}
		else
		{
			if (Pipe_IsOUTReady())
     9ac:	82 fd       	sbrc	r24, 2
     9ae:	18 c0       	rjmp	.+48     	; 0x9e0 <Pipe_WaitUntilReady+0x56>
			 *  \return Boolean true if the current pipe has been stalled by the attached device, false otherwise.
			 */
			static inline bool Pipe_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsStalled(void)
			{
				return ((UPINTX & (1 << RXSTALLI)) ? true : false);
     9b0:	80 91 a6 00 	lds	r24, 0x00A6
			  return PIPE_READYWAIT_NoError;
		}

		if (Pipe_IsStalled())
     9b4:	81 ff       	sbrs	r24, 1
     9b6:	02 c0       	rjmp	.+4      	; 0x9bc <Pipe_WaitUntilReady+0x32>
     9b8:	81 e0       	ldi	r24, 0x01	; 1
     9ba:	08 95       	ret
		  return PIPE_READYWAIT_PipeStalled;
		else if (USB_HostState == HOST_STATE_Unattached)
     9bc:	80 91 46 01 	lds	r24, 0x0146
     9c0:	82 30       	cpi	r24, 0x02	; 2
     9c2:	79 f0       	breq	.+30     	; 0x9e2 <Pipe_WaitUntilReady+0x58>
     9c4:	80 91 a2 00 	lds	r24, 0x00A2
     9c8:	90 91 a3 00 	lds	r25, 0x00A3
		  return PIPE_READYWAIT_DeviceDisconnected;

		uint16_t CurrentFrameNumber = USB_Host_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
     9cc:	84 17       	cp	r24, r20
     9ce:	95 07       	cpc	r25, r21
     9d0:	09 f3       	breq	.-62     	; 0x994 <Pipe_WaitUntilReady+0xa>
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
     9d2:	22 23       	and	r18, r18
     9d4:	11 f4       	brne	.+4      	; 0x9da <Pipe_WaitUntilReady+0x50>
     9d6:	83 e0       	ldi	r24, 0x03	; 3
     9d8:	08 95       	ret
     9da:	21 50       	subi	r18, 0x01	; 1
     9dc:	ac 01       	movw	r20, r24
     9de:	da cf       	rjmp	.-76     	; 0x994 <Pipe_WaitUntilReady+0xa>
     9e0:	80 e0       	ldi	r24, 0x00	; 0
			  return PIPE_READYWAIT_Timeout;
		}
	}
}
     9e2:	08 95       	ret

000009e4 <USB_ResetInterface>:
{
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
     9e4:	6e d0       	rcall	.+220    	; 0xac2 <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
     9e6:	75 d0       	rcall	.+234    	; 0xad2 <USB_INT_ClearAllInterrupts>
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				const uint8_t Temp = USBCON;
     9e8:	80 91 d8 00 	lds	r24, 0x00D8

				USBCON = (Temp & ~(1 << USBE));
     9ec:	98 2f       	mov	r25, r24
     9ee:	9f 77       	andi	r25, 0x7F	; 127
     9f0:	90 93 d8 00 	sts	0x00D8, r25
				USBCON = (Temp |  (1 << USBE));
     9f4:	80 68       	ori	r24, 0x80	; 128
     9f6:	80 93 d8 00 	sts	0x00D8, r24

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR  = USB_PLL_PSC;
     9fa:	8c e0       	ldi	r24, 0x0C	; 12
     9fc:	89 bd       	out	0x29, r24	; 41
				PLLCSR |= (1 << PLLE);
     9fe:	89 b5       	in	r24, 0x29	; 41
     a00:	82 60       	ori	r24, 0x02	; 2
     a02:	89 bd       	out	0x29, r24	; 41
		#if defined(USB_SERIES_4_AVR)
		PLLFRQ = ((1 << PLLUSB) | (1 << PDIV3) | (1 << PDIV1));
		#endif

		USB_PLL_On();
		while (!(USB_PLL_IsReady()));
     a04:	09 b4       	in	r0, 0x29	; 41
     a06:	00 fe       	sbrs	r0, 0
     a08:	fd cf       	rjmp	.-6      	; 0xa04 <USB_ResetInterface+0x20>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON  &= ~(1 << FRZCLK);
     a0a:	80 91 d8 00 	lds	r24, 0x00D8
     a0e:	8f 7d       	andi	r24, 0xDF	; 223
     a10:	80 93 d8 00 	sts	0x00D8, r24
		#endif
	}
	else if (USB_CurrentMode == USB_MODE_Host)
	{
		#if defined(USB_CAN_BE_HOST)
		UHWCON &= ~(1 << UIMOD);
     a14:	80 91 d7 00 	lds	r24, 0x00D7
     a18:	8f 77       	andi	r24, 0x7F	; 127
     a1a:	80 93 d7 00 	sts	0x00D7, r24
#endif

#if defined(USB_CAN_BE_HOST)
static void USB_Init_Host(void)
{
	USB_HostState       = HOST_STATE_Unattached;
     a1e:	82 e0       	ldi	r24, 0x02	; 2
     a20:	80 93 46 01 	sts	0x0146, r24
	USB_ControlPipeSize = PIPE_CONTROLPIPE_DEFAULT_SIZE;
     a24:	80 e4       	ldi	r24, 0x40	; 64
     a26:	80 93 2b 01 	sts	0x012B, r24
	#if !defined(__DOXYGEN__)
		/* Macros: */
			static inline void USB_Host_HostMode_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_HostMode_On(void)
			{
				USBCON |=  (1 << HOST);
     a2a:	80 91 d8 00 	lds	r24, 0x00D8
     a2e:	80 64       	ori	r24, 0x40	; 64
     a30:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
     a34:	80 91 dd 00 	lds	r24, 0x00DD
     a38:	81 60       	ori	r24, 0x01	; 1
     a3a:	80 93 dd 00 	sts	0x00DD, r24
			}

			static inline void USB_Host_VBUS_Manual_Enable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Manual_Enable(void)
			{
				OTGCON |=  (1 << VBUSHWC);
     a3e:	80 91 dd 00 	lds	r24, 0x00DD
     a42:	84 60       	ori	r24, 0x04	; 4
     a44:	80 93 dd 00 	sts	0x00DD, r24
				UHWCON &= ~(1 << UVCONE);
     a48:	80 91 d7 00 	lds	r24, 0x00D7
     a4c:	8f 7e       	andi	r24, 0xEF	; 239
     a4e:	80 93 d7 00 	sts	0x00D7, r24

				DDRE   |=  (1 << 7);
     a52:	6f 9a       	sbi	0x0d, 7	; 13
			}

			static inline void USB_Host_VBUS_Manual_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Manual_On(void)
			{
				PORTE  |=  (1 << 7);
     a54:	77 9a       	sbi	0x0e, 7	; 14

	USB_Host_VBUS_Auto_Off();
	USB_Host_VBUS_Manual_Enable();
	USB_Host_VBUS_Manual_On();

	USB_INT_Enable(USB_INT_SRPI);
     a56:	80 91 de 00 	lds	r24, 0x00DE
     a5a:	81 60       	ori	r24, 0x01	; 1
     a5c:	80 93 de 00 	sts	0x00DE, r24
	USB_INT_Enable(USB_INT_BCERRI);
     a60:	80 91 de 00 	lds	r24, 0x00DE
     a64:	84 60       	ori	r24, 0x04	; 4
     a66:	80 93 de 00 	sts	0x00DE, r24
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
     a6a:	80 91 e0 00 	lds	r24, 0x00E0
     a6e:	8e 7f       	andi	r24, 0xFE	; 254
     a70:	80 93 e0 00 	sts	0x00E0, r24

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON  |=  (1 << OTGPADE);
     a74:	80 91 d8 00 	lds	r24, 0x00D8
     a78:	80 61       	ori	r24, 0x10	; 16
     a7a:	80 93 d8 00 	sts	0x00D8, r24
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
     a7e:	08 95       	ret

00000a80 <USB_Init>:

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON  |=  (1 << UVREGE);
     a80:	e7 ed       	ldi	r30, 0xD7	; 215
     a82:	f0 e0       	ldi	r31, 0x00	; 0
     a84:	80 81       	ld	r24, Z
     a86:	81 60       	ori	r24, 0x01	; 1
     a88:	80 83       	st	Z, r24
	{
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
     a8a:	81 e0       	ldi	r24, 0x01	; 1
     a8c:	80 93 3d 01 	sts	0x013D, r24

	USB_ResetInterface();
}
     a90:	a9 cf       	rjmp	.-174    	; 0x9e4 <USB_ResetInterface>

00000a92 <USB_ShutDown>:

void USB_ShutDown(void)
{
	USB_INT_DisableAllInterrupts();
     a92:	17 d0       	rcall	.+46     	; 0xac2 <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
     a94:	1e d0       	rcall	.+60     	; 0xad2 <USB_INT_ClearAllInterrupts>
			 *  enumerating the device once attached until \ref USB_Attach() is called.
			 */
			static inline void USB_Detach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Detach(void)
			{
				UDCON  |=  (1 << DETACH);
     a96:	e0 ee       	ldi	r30, 0xE0	; 224
     a98:	f0 e0       	ldi	r31, 0x00	; 0
     a9a:	80 81       	ld	r24, Z
     a9c:	81 60       	ori	r24, 0x01	; 1
     a9e:	80 83       	st	Z, r24
			}

			static inline void USB_Controller_Disable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Disable(void)
			{
				USBCON  &= ~(1 << USBE);
     aa0:	a8 ed       	ldi	r26, 0xD8	; 216
     aa2:	b0 e0       	ldi	r27, 0x00	; 0
     aa4:	8c 91       	ld	r24, X
     aa6:	8f 77       	andi	r24, 0x7F	; 127
     aa8:	8c 93       	st	X, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR  = 0;
     aaa:	19 bc       	out	0x29, r1	; 41

			static inline void USB_REG_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_Off(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON  &= ~(1 << UVREGE);
     aac:	e7 ed       	ldi	r30, 0xD7	; 215
     aae:	f0 e0       	ldi	r31, 0x00	; 0
     ab0:	80 81       	ld	r24, Z
     ab2:	8e 7f       	andi	r24, 0xFE	; 254
     ab4:	80 83       	st	Z, r24
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON  &= ~(1 << OTGPADE);
     ab6:	8c 91       	ld	r24, X
     ab8:	8f 7e       	andi	r24, 0xEF	; 239
     aba:	8c 93       	st	X, r24

	#if defined(USB_CAN_BE_BOTH)
	USB_CurrentMode = USB_MODE_None;
	#endif

	USB_IsInitialized = false;
     abc:	10 92 3d 01 	sts	0x013D, r1
}
     ac0:	08 95       	ret

00000ac2 <USB_INT_DisableAllInterrupts>:
#include "USBInterrupt.h"

void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
     ac2:	e8 ed       	ldi	r30, 0xD8	; 216
     ac4:	f0 e0       	ldi	r31, 0x00	; 0
     ac6:	80 81       	ld	r24, Z
     ac8:	8c 7f       	andi	r24, 0xFC	; 252
     aca:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_BOTH)
	OTGIEN  = 0;
	#endif

	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
     acc:	10 92 a0 00 	sts	0x00A0, r1
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
	#endif
}
     ad0:	08 95       	ret

00000ad2 <USB_INT_ClearAllInterrupts>:

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT  = 0;
     ad2:	10 92 da 00 	sts	0x00DA, r1
	#if defined(USB_CAN_BE_BOTH)
	OTGINT  = 0;
	#endif

	#if defined(USB_CAN_BE_HOST)
	UHINT   = 0;
     ad6:	10 92 9f 00 	sts	0x009F, r1
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT   = 0;
	#endif
}
     ada:	08 95       	ret

00000adc <__vector_10>:

ISR(USB_GEN_vect, ISR_BLOCK)
{
     adc:	1f 92       	push	r1
     ade:	0f 92       	push	r0
     ae0:	0f b6       	in	r0, 0x3f	; 63
     ae2:	0f 92       	push	r0
     ae4:	0b b6       	in	r0, 0x3b	; 59
     ae6:	0f 92       	push	r0
     ae8:	11 24       	eor	r1, r1
     aea:	2f 93       	push	r18
     aec:	3f 93       	push	r19
     aee:	4f 93       	push	r20
     af0:	5f 93       	push	r21
     af2:	6f 93       	push	r22
     af4:	7f 93       	push	r23
     af6:	8f 93       	push	r24
     af8:	9f 93       	push	r25
     afa:	af 93       	push	r26
     afc:	bf 93       	push	r27
     afe:	ef 93       	push	r30
     b00:	ff 93       	push	r31
	}
	#endif
	#endif

	#if defined(USB_CAN_BE_HOST)
	if (USB_INT_HasOccurred(USB_INT_DDISCI) && USB_INT_IsEnabled(USB_INT_DDISCI))
     b02:	80 91 9f 00 	lds	r24, 0x009F
     b06:	81 ff       	sbrs	r24, 1
     b08:	15 c0       	rjmp	.+42     	; 0xb34 <__vector_10+0x58>
     b0a:	80 91 a0 00 	lds	r24, 0x00A0
     b0e:	81 ff       	sbrs	r24, 1
     b10:	11 c0       	rjmp	.+34     	; 0xb34 <__vector_10+0x58>
	{
		USB_INT_Clear(USB_INT_DDISCI);
     b12:	80 91 9f 00 	lds	r24, 0x009F
     b16:	8d 7f       	andi	r24, 0xFD	; 253
     b18:	80 93 9f 00 	sts	0x009F, r24
		USB_INT_Clear(USB_INT_DCONNI);
     b1c:	80 91 9f 00 	lds	r24, 0x009F
     b20:	8e 7f       	andi	r24, 0xFE	; 254
     b22:	80 93 9f 00 	sts	0x009F, r24
		USB_INT_Disable(USB_INT_DDISCI);
     b26:	80 91 a0 00 	lds	r24, 0x00A0
     b2a:	8d 7f       	andi	r24, 0xFD	; 253
     b2c:	80 93 a0 00 	sts	0x00A0, r24

		EVENT_USB_Host_DeviceUnattached();
     b30:	e7 db       	rcall	.-2098   	; 0x300 <EVENT_USB_Host_DeviceUnattached>

		USB_ResetInterface();
     b32:	58 df       	rcall	.-336    	; 0x9e4 <USB_ResetInterface>
	}

	if (USB_INT_HasOccurred(USB_INT_VBERRI) && USB_INT_IsEnabled(USB_INT_VBERRI))
     b34:	80 91 df 00 	lds	r24, 0x00DF
     b38:	81 ff       	sbrs	r24, 1
     b3a:	15 c0       	rjmp	.+42     	; 0xb66 <__vector_10+0x8a>
     b3c:	80 91 de 00 	lds	r24, 0x00DE
     b40:	81 ff       	sbrs	r24, 1
     b42:	11 c0       	rjmp	.+34     	; 0xb66 <__vector_10+0x8a>
	{
		USB_INT_Clear(USB_INT_VBERRI);
     b44:	80 91 df 00 	lds	r24, 0x00DF
     b48:	8d 7f       	andi	r24, 0xFD	; 253
     b4a:	80 93 df 00 	sts	0x00DF, r24
			}

			static inline void USB_Host_VBUS_Manual_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Manual_Off(void)
			{
				PORTE  &= ~(1 << 7);
     b4e:	77 98       	cbi	0x0e, 7	; 14
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
     b50:	80 91 dd 00 	lds	r24, 0x00DD
     b54:	81 60       	ori	r24, 0x01	; 1
     b56:	80 93 dd 00 	sts	0x00DD, r24

		USB_Host_VBUS_Manual_Off();
		USB_Host_VBUS_Auto_Off();

		EVENT_USB_Host_HostError(HOST_ERROR_VBusVoltageDip);
     b5a:	80 e0       	ldi	r24, 0x00	; 0
     b5c:	b4 db       	rcall	.-2200   	; 0x2c6 <EVENT_USB_Host_HostError>
		EVENT_USB_Host_DeviceUnattached();
     b5e:	d0 db       	rcall	.-2144   	; 0x300 <EVENT_USB_Host_DeviceUnattached>

		USB_HostState = HOST_STATE_Unattached;
     b60:	82 e0       	ldi	r24, 0x02	; 2
     b62:	80 93 46 01 	sts	0x0146, r24
	}

	if (USB_INT_HasOccurred(USB_INT_SRPI) && USB_INT_IsEnabled(USB_INT_SRPI))
     b66:	80 91 df 00 	lds	r24, 0x00DF
     b6a:	80 ff       	sbrs	r24, 0
     b6c:	17 c0       	rjmp	.+46     	; 0xb9c <__vector_10+0xc0>
     b6e:	80 91 de 00 	lds	r24, 0x00DE
     b72:	80 ff       	sbrs	r24, 0
     b74:	13 c0       	rjmp	.+38     	; 0xb9c <__vector_10+0xc0>
	{
		USB_INT_Clear(USB_INT_SRPI);
     b76:	80 91 df 00 	lds	r24, 0x00DF
     b7a:	8e 7f       	andi	r24, 0xFE	; 254
     b7c:	80 93 df 00 	sts	0x00DF, r24
		USB_INT_Disable(USB_INT_SRPI);
     b80:	80 91 de 00 	lds	r24, 0x00DE
     b84:	8e 7f       	andi	r24, 0xFE	; 254
     b86:	80 93 de 00 	sts	0x00DE, r24

		EVENT_USB_Host_DeviceAttached();
     b8a:	c3 db       	rcall	.-2170   	; 0x312 <EVENT_USB_Host_DeviceAttached>

		USB_INT_Enable(USB_INT_DDISCI);
     b8c:	80 91 a0 00 	lds	r24, 0x00A0
     b90:	82 60       	ori	r24, 0x02	; 2
     b92:	80 93 a0 00 	sts	0x00A0, r24

		USB_HostState = HOST_STATE_Powered;
     b96:	83 e0       	ldi	r24, 0x03	; 3
     b98:	80 93 46 01 	sts	0x0146, r24
	}

	if (USB_INT_HasOccurred(USB_INT_BCERRI) && USB_INT_IsEnabled(USB_INT_BCERRI))
     b9c:	80 91 df 00 	lds	r24, 0x00DF
     ba0:	82 ff       	sbrs	r24, 2
     ba2:	0e c0       	rjmp	.+28     	; 0xbc0 <__vector_10+0xe4>
     ba4:	80 91 de 00 	lds	r24, 0x00DE
     ba8:	82 ff       	sbrs	r24, 2
     baa:	0a c0       	rjmp	.+20     	; 0xbc0 <__vector_10+0xe4>
	{
		USB_INT_Clear(USB_INT_BCERRI);
     bac:	80 91 df 00 	lds	r24, 0x00DF
     bb0:	8b 7f       	andi	r24, 0xFB	; 251
     bb2:	80 93 df 00 	sts	0x00DF, r24

		EVENT_USB_Host_DeviceEnumerationFailed(HOST_ENUMERROR_NoDeviceDetected, 0);
     bb6:	82 e0       	ldi	r24, 0x02	; 2
     bb8:	60 e0       	ldi	r22, 0x00	; 0
     bba:	59 db       	rcall	.-2382   	; 0x26e <EVENT_USB_Host_DeviceEnumerationFailed>
		EVENT_USB_Host_DeviceUnattached();
     bbc:	a1 db       	rcall	.-2238   	; 0x300 <EVENT_USB_Host_DeviceUnattached>

		USB_ResetInterface();
     bbe:	12 df       	rcall	.-476    	; 0x9e4 <USB_ResetInterface>
	}

	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_HSOFI) && USB_INT_IsEnabled(USB_INT_HSOFI))
     bc0:	80 91 9f 00 	lds	r24, 0x009F
     bc4:	85 ff       	sbrs	r24, 5
     bc6:	0a c0       	rjmp	.+20     	; 0xbdc <__vector_10+0x100>
     bc8:	80 91 a0 00 	lds	r24, 0x00A0
     bcc:	85 ff       	sbrs	r24, 5
     bce:	06 c0       	rjmp	.+12     	; 0xbdc <__vector_10+0x100>
	{
		USB_INT_Clear(USB_INT_HSOFI);
     bd0:	80 91 9f 00 	lds	r24, 0x009F
     bd4:	8f 7d       	andi	r24, 0xDF	; 223
     bd6:	80 93 9f 00 	sts	0x009F, r24

		EVENT_USB_Host_StartOfFrame();
     bda:	ae d0       	rcall	.+348    	; 0xd38 <USB_Event_Stub>
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
     bdc:	ff 91       	pop	r31
     bde:	ef 91       	pop	r30
     be0:	bf 91       	pop	r27
     be2:	af 91       	pop	r26
     be4:	9f 91       	pop	r25
     be6:	8f 91       	pop	r24
     be8:	7f 91       	pop	r23
     bea:	6f 91       	pop	r22
     bec:	5f 91       	pop	r21
     bee:	4f 91       	pop	r20
     bf0:	3f 91       	pop	r19
     bf2:	2f 91       	pop	r18
     bf4:	0f 90       	pop	r0
     bf6:	0b be       	out	0x3b, r0	; 59
     bf8:	0f 90       	pop	r0
     bfa:	0f be       	out	0x3f, r0	; 63
     bfc:	0f 90       	pop	r0
     bfe:	1f 90       	pop	r1
     c00:	18 95       	reti

00000c02 <USB_GetNextDescriptorComp>:

uint8_t USB_GetNextDescriptorComp(uint16_t* const BytesRem, void** const CurrConfigLoc, ConfigComparatorPtr_t const ComparatorRoutine)
{
     c02:	af 92       	push	r10
     c04:	bf 92       	push	r11
     c06:	cf 92       	push	r12
     c08:	df 92       	push	r13
     c0a:	ef 92       	push	r14
     c0c:	ff 92       	push	r15
     c0e:	0f 93       	push	r16
     c10:	1f 93       	push	r17
     c12:	cf 93       	push	r28
     c14:	df 93       	push	r29
     c16:	7c 01       	movw	r14, r24
     c18:	8b 01       	movw	r16, r22
     c1a:	5a 01       	movw	r10, r20
     c1c:	21 c0       	rjmp	.+66     	; 0xc60 <USB_GetNextDescriptorComp+0x5e>
	uint8_t ErrorCode;

	while (*BytesRem)
	{
		uint8_t* PrevDescLoc  = *CurrConfigLoc;
     c1e:	f8 01       	movw	r30, r16
     c20:	c0 81       	ld	r28, Z
     c22:	d1 81       	ldd	r29, Z+1	; 0x01
			static inline void USB_GetNextDescriptor(uint16_t* const BytesRem,
			                                         void** CurrConfigLoc) ATTR_NON_NULL_PTR_ARG(1) ATTR_NON_NULL_PTR_ARG(2);
			static inline void USB_GetNextDescriptor(uint16_t* const BytesRem,
			                                         void** CurrConfigLoc)
			{
				uint16_t CurrDescriptorSize = DESCRIPTOR_CAST(*CurrConfigLoc, USB_Descriptor_Header_t).Size;
     c24:	88 81       	ld	r24, Y
     c26:	90 e0       	ldi	r25, 0x00	; 0

				*CurrConfigLoc  = ((uint8_t*)*CurrConfigLoc) + CurrDescriptorSize;
     c28:	9e 01       	movw	r18, r28
     c2a:	28 0f       	add	r18, r24
     c2c:	39 1f       	adc	r19, r25
     c2e:	31 83       	std	Z+1, r19	; 0x01
     c30:	20 83       	st	Z, r18
				*BytesRem      -= CurrDescriptorSize;
     c32:	f7 01       	movw	r30, r14
     c34:	20 81       	ld	r18, Z
     c36:	31 81       	ldd	r19, Z+1	; 0x01
     c38:	28 1b       	sub	r18, r24
     c3a:	39 0b       	sbc	r19, r25
     c3c:	31 83       	std	Z+1, r19	; 0x01
     c3e:	20 83       	st	Z, r18
		uint16_t PrevBytesRem = *BytesRem;

		USB_GetNextDescriptor(BytesRem, CurrConfigLoc);

		if ((ErrorCode = ComparatorRoutine(*CurrConfigLoc)) != DESCRIPTOR_SEARCH_NotFound)
     c40:	f8 01       	movw	r30, r16
     c42:	80 81       	ld	r24, Z
     c44:	91 81       	ldd	r25, Z+1	; 0x01
     c46:	f5 01       	movw	r30, r10
     c48:	09 95       	icall
     c4a:	82 30       	cpi	r24, 0x02	; 2
     c4c:	49 f0       	breq	.+18     	; 0xc60 <USB_GetNextDescriptorComp+0x5e>
		{
			if (ErrorCode == DESCRIPTOR_SEARCH_Fail)
     c4e:	81 30       	cpi	r24, 0x01	; 1
     c50:	71 f4       	brne	.+28     	; 0xc6e <USB_GetNextDescriptorComp+0x6c>
			{
				*CurrConfigLoc = PrevDescLoc;
     c52:	f8 01       	movw	r30, r16
     c54:	c0 83       	st	Z, r28
     c56:	d1 83       	std	Z+1, r29	; 0x01
				*BytesRem      = PrevBytesRem;
     c58:	f7 01       	movw	r30, r14
     c5a:	d1 82       	std	Z+1, r13	; 0x01
     c5c:	c0 82       	st	Z, r12
     c5e:	07 c0       	rjmp	.+14     	; 0xc6e <USB_GetNextDescriptorComp+0x6c>

uint8_t USB_GetNextDescriptorComp(uint16_t* const BytesRem, void** const CurrConfigLoc, ConfigComparatorPtr_t const ComparatorRoutine)
{
	uint8_t ErrorCode;

	while (*BytesRem)
     c60:	f7 01       	movw	r30, r14
     c62:	c0 80       	ld	r12, Z
     c64:	d1 80       	ldd	r13, Z+1	; 0x01
     c66:	c1 14       	cp	r12, r1
     c68:	d1 04       	cpc	r13, r1
     c6a:	c9 f6       	brne	.-78     	; 0xc1e <USB_GetNextDescriptorComp+0x1c>
     c6c:	82 e0       	ldi	r24, 0x02	; 2
			return ErrorCode;
		}
	}

	return DESCRIPTOR_SEARCH_COMP_EndOfDescriptor;
}
     c6e:	df 91       	pop	r29
     c70:	cf 91       	pop	r28
     c72:	1f 91       	pop	r17
     c74:	0f 91       	pop	r16
     c76:	ff 90       	pop	r15
     c78:	ef 90       	pop	r14
     c7a:	df 90       	pop	r13
     c7c:	cf 90       	pop	r12
     c7e:	bf 90       	pop	r11
     c80:	af 90       	pop	r10
     c82:	08 95       	ret

00000c84 <USB_Host_GetDeviceConfigDescriptor>:
#include "ConfigDescriptor.h"

#if defined(USB_CAN_BE_HOST)
uint8_t USB_Host_GetDeviceConfigDescriptor(uint8_t ConfigNumber, uint16_t* const ConfigSizePtr,
                                           void* BufferPtr, uint16_t BufferSize)
{
     c84:	cf 92       	push	r12
     c86:	df 92       	push	r13
     c88:	ef 92       	push	r14
     c8a:	ff 92       	push	r15
     c8c:	0f 93       	push	r16
     c8e:	1f 93       	push	r17
     c90:	df 93       	push	r29
     c92:	cf 93       	push	r28
     c94:	cd b7       	in	r28, 0x3d	; 61
     c96:	de b7       	in	r29, 0x3e	; 62
     c98:	29 97       	sbiw	r28, 0x09	; 9
     c9a:	0f b6       	in	r0, 0x3f	; 63
     c9c:	f8 94       	cli
     c9e:	de bf       	out	0x3e, r29	; 62
     ca0:	0f be       	out	0x3f, r0	; 63
     ca2:	cd bf       	out	0x3d, r28	; 61
     ca4:	6b 01       	movw	r12, r22
     ca6:	8a 01       	movw	r16, r20
     ca8:	79 01       	movw	r14, r18
	uint8_t ErrorCode;
	uint8_t ConfigHeader[sizeof(USB_Descriptor_Configuration_Header_t)];

	USB_ControlRequest = (USB_Request_Header_t)
     caa:	90 e8       	ldi	r25, 0x80	; 128
     cac:	90 93 3e 01 	sts	0x013E, r25
     cb0:	96 e0       	ldi	r25, 0x06	; 6
     cb2:	90 93 3f 01 	sts	0x013F, r25
     cb6:	90 e0       	ldi	r25, 0x00	; 0
     cb8:	01 97       	sbiw	r24, 0x01	; 1
     cba:	92 60       	ori	r25, 0x02	; 2
     cbc:	90 93 41 01 	sts	0x0141, r25
     cc0:	80 93 40 01 	sts	0x0140, r24
     cc4:	10 92 43 01 	sts	0x0143, r1
     cc8:	10 92 42 01 	sts	0x0142, r1
     ccc:	89 e0       	ldi	r24, 0x09	; 9
     cce:	90 e0       	ldi	r25, 0x00	; 0
     cd0:	90 93 45 01 	sts	0x0145, r25
     cd4:	80 93 44 01 	sts	0x0144, r24
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
     cd8:	10 92 a7 00 	sts	0x00A7, r1
			.wLength       = sizeof(USB_Descriptor_Configuration_Header_t),
		};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	if ((ErrorCode = USB_Host_SendControlRequest(ConfigHeader)) != HOST_SENDCONTROL_Successful)
     cdc:	ce 01       	movw	r24, r28
     cde:	01 96       	adiw	r24, 0x01	; 1
     ce0:	55 d0       	rcall	.+170    	; 0xd8c <USB_Host_SendControlRequest>
     ce2:	28 2f       	mov	r18, r24
     ce4:	88 23       	and	r24, r24
     ce6:	c1 f4       	brne	.+48     	; 0xd18 <USB_Host_GetDeviceConfigDescriptor+0x94>
	  return ErrorCode;

	*ConfigSizePtr = DESCRIPTOR_PCAST(ConfigHeader, USB_Descriptor_Configuration_Header_t)->TotalConfigurationSize;
     ce8:	8b 81       	ldd	r24, Y+3	; 0x03
     cea:	9c 81       	ldd	r25, Y+4	; 0x04
     cec:	f6 01       	movw	r30, r12
     cee:	91 83       	std	Z+1, r25	; 0x01
     cf0:	80 83       	st	Z, r24

	if (*ConfigSizePtr > BufferSize)
     cf2:	e8 16       	cp	r14, r24
     cf4:	f9 06       	cpc	r15, r25
     cf6:	10 f4       	brcc	.+4      	; 0xcfc <USB_Host_GetDeviceConfigDescriptor+0x78>
     cf8:	25 e0       	ldi	r18, 0x05	; 5
     cfa:	0e c0       	rjmp	.+28     	; 0xd18 <USB_Host_GetDeviceConfigDescriptor+0x94>
	  return HOST_GETCONFIG_BuffOverflow;

	USB_ControlRequest.wLength = *ConfigSizePtr;
     cfc:	90 93 45 01 	sts	0x0145, r25
     d00:	80 93 44 01 	sts	0x0144, r24

	if ((ErrorCode = USB_Host_SendControlRequest(BufferPtr)) != HOST_SENDCONTROL_Successful)
     d04:	c8 01       	movw	r24, r16
     d06:	42 d0       	rcall	.+132    	; 0xd8c <USB_Host_SendControlRequest>
     d08:	28 2f       	mov	r18, r24
     d0a:	88 23       	and	r24, r24
     d0c:	29 f4       	brne	.+10     	; 0xd18 <USB_Host_GetDeviceConfigDescriptor+0x94>
	  return ErrorCode;

	if (DESCRIPTOR_TYPE(BufferPtr) != DTYPE_Configuration)
     d0e:	f8 01       	movw	r30, r16
     d10:	81 81       	ldd	r24, Z+1	; 0x01
     d12:	82 30       	cpi	r24, 0x02	; 2
     d14:	09 f0       	breq	.+2      	; 0xd18 <USB_Host_GetDeviceConfigDescriptor+0x94>
     d16:	26 e0       	ldi	r18, 0x06	; 6
	  return HOST_GETCONFIG_InvalidData;

	return HOST_GETCONFIG_Successful;
}
     d18:	82 2f       	mov	r24, r18
     d1a:	29 96       	adiw	r28, 0x09	; 9
     d1c:	0f b6       	in	r0, 0x3f	; 63
     d1e:	f8 94       	cli
     d20:	de bf       	out	0x3e, r29	; 62
     d22:	0f be       	out	0x3f, r0	; 63
     d24:	cd bf       	out	0x3d, r28	; 61
     d26:	cf 91       	pop	r28
     d28:	df 91       	pop	r29
     d2a:	1f 91       	pop	r17
     d2c:	0f 91       	pop	r16
     d2e:	ff 90       	pop	r15
     d30:	ef 90       	pop	r14
     d32:	df 90       	pop	r13
     d34:	cf 90       	pop	r12
     d36:	08 95       	ret

00000d38 <USB_Event_Stub>:
#include "Events.h"

void USB_Event_Stub(void)
{

}
     d38:	08 95       	ret

00000d3a <USB_Host_WaitForIOS>:

	return ReturnStatus;
}

static uint8_t USB_Host_WaitForIOS(const uint8_t WaitType)
{
     d3a:	1f 93       	push	r17
     d3c:	cf 93       	push	r28
     d3e:	df 93       	push	r29
     d40:	18 2f       	mov	r17, r24
     d42:	c8 ee       	ldi	r28, 0xE8	; 232
     d44:	d3 e0       	ldi	r29, 0x03	; 3
     d46:	09 c0       	rjmp	.+18     	; 0xd5a <USB_Host_WaitForIOS+0x20>
	         ((WaitType == USB_HOST_WAITFOR_InReceived) && Pipe_IsINReceived()) ||
	         ((WaitType == USB_HOST_WAITFOR_OutReady)   && Pipe_IsOUTReady())))
	{
		uint8_t ErrorCode;

		if ((ErrorCode = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
     d48:	81 e0       	ldi	r24, 0x01	; 1
     d4a:	ca db       	rcall	.-2156   	; 0x4e0 <USB_Host_WaitMS>
     d4c:	88 23       	and	r24, r24
     d4e:	d1 f4       	brne	.+52     	; 0xd84 <USB_Host_WaitForIOS+0x4a>
		  return ErrorCode;

		if (!(TimeoutCounter--))
     d50:	20 97       	sbiw	r28, 0x00	; 0
     d52:	11 f4       	brne	.+4      	; 0xd58 <USB_Host_WaitForIOS+0x1e>
     d54:	84 e0       	ldi	r24, 0x04	; 4
     d56:	16 c0       	rjmp	.+44     	; 0xd84 <USB_Host_WaitForIOS+0x4a>
     d58:	21 97       	sbiw	r28, 0x01	; 1
	uint8_t  TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#else
	uint16_t TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#endif

	while (!(((WaitType == USB_HOST_WAITFOR_SetupSent)  && Pipe_IsSETUPSent())  ||
     d5a:	11 23       	and	r17, r17
     d5c:	29 f4       	brne	.+10     	; 0xd68 <USB_Host_WaitForIOS+0x2e>
			 *  \return Boolean true if the current pipe is ready for a SETUP packet, false otherwise.
			 */
			static inline bool Pipe_IsSETUPSent(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsSETUPSent(void)
			{
				return ((UPINTX & (1 << TXSTPI)) ? true : false);
     d5e:	80 91 a6 00 	lds	r24, 0x00A6
     d62:	83 ff       	sbrs	r24, 3
     d64:	f1 cf       	rjmp	.-30     	; 0xd48 <USB_Host_WaitForIOS+0xe>
     d66:	0d c0       	rjmp	.+26     	; 0xd82 <USB_Host_WaitForIOS+0x48>
     d68:	11 30       	cpi	r17, 0x01	; 1
     d6a:	29 f4       	brne	.+10     	; 0xd76 <USB_Host_WaitForIOS+0x3c>
			 *  \return Boolean true if the current pipe has received an IN packet, false otherwise.
			 */
			static inline bool Pipe_IsINReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsINReceived(void)
			{
				return ((UPINTX & (1 << RXINI)) ? true : false);
     d6c:	80 91 a6 00 	lds	r24, 0x00A6
     d70:	80 ff       	sbrs	r24, 0
     d72:	ea cf       	rjmp	.-44     	; 0xd48 <USB_Host_WaitForIOS+0xe>
     d74:	06 c0       	rjmp	.+12     	; 0xd82 <USB_Host_WaitForIOS+0x48>
     d76:	12 30       	cpi	r17, 0x02	; 2
     d78:	39 f7       	brne	.-50     	; 0xd48 <USB_Host_WaitForIOS+0xe>
			 *  \return Boolean true if the current pipe is ready for an OUT packet, false otherwise.
			 */
			static inline bool Pipe_IsOUTReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsOUTReady(void)
			{
				return ((UPINTX & (1 << TXOUTI)) ? true : false);
     d7a:	80 91 a6 00 	lds	r24, 0x00A6
     d7e:	82 ff       	sbrs	r24, 2
     d80:	e3 cf       	rjmp	.-58     	; 0xd48 <USB_Host_WaitForIOS+0xe>
     d82:	80 e0       	ldi	r24, 0x00	; 0
		if (!(TimeoutCounter--))
		  return HOST_SENDCONTROL_SoftwareTimeOut;
	}

	return HOST_SENDCONTROL_Successful;
}
     d84:	df 91       	pop	r29
     d86:	cf 91       	pop	r28
     d88:	1f 91       	pop	r17
     d8a:	08 95       	ret

00000d8c <USB_Host_SendControlRequest>:

#define  __INCLUDE_FROM_HOSTSTDREQ_C
#include "HostStandardReq.h"

uint8_t USB_Host_SendControlRequest(void* const BufferPtr)
{
     d8c:	ff 92       	push	r15
     d8e:	0f 93       	push	r16
     d90:	1f 93       	push	r17
     d92:	cf 93       	push	r28
     d94:	df 93       	push	r29
     d96:	18 2f       	mov	r17, r24
     d98:	09 2f       	mov	r16, r25
			 *  \return Boolean true if the bus is currently suspended, false otherwise.
			 */
			static inline bool USB_Host_IsBusSuspended(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusSuspended(void)
			{
				return ((UHCON & (1 << SOFEN)) ? false : true);
     d9a:	f0 90 9e 00 	lds	r15, 0x009E
	uint8_t* HeaderStream   = (uint8_t*)&USB_ControlRequest;
	uint8_t* DataStream     = (uint8_t*)BufferPtr;
	bool     BusSuspended   = USB_Host_IsBusSuspended();
	uint8_t  ReturnStatus   = HOST_SENDCONTROL_Successful;
	uint16_t DataLen        = USB_ControlRequest.wLength;
     d9e:	c0 91 44 01 	lds	r28, 0x0144
     da2:	d0 91 45 01 	lds	r29, 0x0145
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
     da6:	80 91 9e 00 	lds	r24, 0x009E
     daa:	81 60       	ori	r24, 0x01	; 1
     dac:	80 93 9e 00 	sts	0x009E, r24

	USB_Host_ResumeBus();

	if ((ReturnStatus = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
     db0:	81 e0       	ldi	r24, 0x01	; 1
     db2:	96 db       	rcall	.-2260   	; 0x4e0 <USB_Host_WaitMS>
     db4:	98 2f       	mov	r25, r24
     db6:	88 23       	and	r24, r24
     db8:	09 f0       	breq	.+2      	; 0xdbc <USB_Host_SendControlRequest+0x30>
     dba:	d2 c0       	rjmp	.+420    	; 0xf60 <USB_Host_SendControlRequest+0x1d4>
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
     dbc:	80 91 aa 00 	lds	r24, 0x00AA
     dc0:	8f 7c       	andi	r24, 0xCF	; 207
     dc2:	80 93 aa 00 	sts	0x00AA, r24
			 *  flag for the pipe.
			 */
			static inline void Pipe_ClearErrorFlags(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearErrorFlags(void)
			{
				UPERRX = 0;
     dc6:	10 92 f5 00 	sts	0x00F5, r1

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
     dca:	80 91 a9 00 	lds	r24, 0x00A9
     dce:	8f 7b       	andi	r24, 0xBF	; 191
     dd0:	80 93 a9 00 	sts	0x00A9, r24
     dd4:	ee e3       	ldi	r30, 0x3E	; 62
     dd6:	f1 e0       	ldi	r31, 0x01	; 1
	Pipe_ClearErrorFlags();

	Pipe_Unfreeze();

	for (uint8_t HeaderByte = 0; HeaderByte < sizeof(USB_Request_Header_t); HeaderByte++)
	  Pipe_Write_Byte(*(HeaderStream++));
     dd8:	81 91       	ld	r24, Z+
			 *  \param[in] Byte  Next byte to write into the the currently selected pipe's FIFO buffer.
			 */
			static inline void Pipe_Write_Byte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Write_Byte(const uint8_t Byte)
			{
				UPDATX = Byte;
     dda:	80 93 af 00 	sts	0x00AF, r24
	Pipe_SetPipeToken(PIPE_TOKEN_SETUP);
	Pipe_ClearErrorFlags();

	Pipe_Unfreeze();

	for (uint8_t HeaderByte = 0; HeaderByte < sizeof(USB_Request_Header_t); HeaderByte++)
     dde:	81 e0       	ldi	r24, 0x01	; 1
     de0:	e6 34       	cpi	r30, 0x46	; 70
     de2:	f8 07       	cpc	r31, r24
     de4:	c9 f7       	brne	.-14     	; 0xdd8 <USB_Host_SendControlRequest+0x4c>
			 *  \ingroup Group_PipePacketManagement
			 */
			static inline void Pipe_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearSETUP(void)
			{
				UPINTX &= ~((1 << TXSTPI) | (1 << FIFOCON));
     de6:	80 91 a6 00 	lds	r24, 0x00A6
     dea:	87 77       	andi	r24, 0x77	; 119
     dec:	80 93 a6 00 	sts	0x00A6, r24
	  Pipe_Write_Byte(*(HeaderStream++));

	Pipe_ClearSETUP();

	if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_SetupSent)) != HOST_SENDCONTROL_Successful)
     df0:	80 e0       	ldi	r24, 0x00	; 0
     df2:	a3 df       	rcall	.-186    	; 0xd3a <USB_Host_WaitForIOS>
     df4:	98 2f       	mov	r25, r24
     df6:	88 23       	and	r24, r24
     df8:	09 f0       	breq	.+2      	; 0xdfc <USB_Host_SendControlRequest+0x70>
     dfa:	b2 c0       	rjmp	.+356    	; 0xf60 <USB_Host_SendControlRequest+0x1d4>

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
     dfc:	80 91 a9 00 	lds	r24, 0x00A9
     e00:	80 64       	ori	r24, 0x40	; 64
     e02:	80 93 a9 00 	sts	0x00A9, r24
	  goto End_Of_Control_Send;

	Pipe_Freeze();

	if ((ReturnStatus = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
     e06:	81 e0       	ldi	r24, 0x01	; 1
     e08:	6b db       	rcall	.-2346   	; 0x4e0 <USB_Host_WaitMS>
     e0a:	98 2f       	mov	r25, r24
     e0c:	88 23       	and	r24, r24
     e0e:	09 f0       	breq	.+2      	; 0xe12 <USB_Host_SendControlRequest+0x86>
     e10:	a7 c0       	rjmp	.+334    	; 0xf60 <USB_Host_SendControlRequest+0x1d4>
#include "HostStandardReq.h"

uint8_t USB_Host_SendControlRequest(void* const BufferPtr)
{
	uint8_t* HeaderStream   = (uint8_t*)&USB_ControlRequest;
	uint8_t* DataStream     = (uint8_t*)BufferPtr;
     e12:	21 2f       	mov	r18, r17
     e14:	30 2f       	mov	r19, r16
     e16:	c9 01       	movw	r24, r18
     e18:	8c 01       	movw	r16, r24
	Pipe_Freeze();

	if ((ReturnStatus = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
	  goto End_Of_Control_Send;

	if ((USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_DIRECTION) == REQDIR_DEVICETOHOST)
     e1a:	80 91 3e 01 	lds	r24, 0x013E
     e1e:	87 ff       	sbrs	r24, 7
     e20:	52 c0       	rjmp	.+164    	; 0xec6 <USB_Host_SendControlRequest+0x13a>
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
     e22:	80 91 aa 00 	lds	r24, 0x00AA
     e26:	8f 7c       	andi	r24, 0xCF	; 207
     e28:	80 61       	ori	r24, 0x10	; 16
     e2a:	80 93 aa 00 	sts	0x00AA, r24
	{
		Pipe_SetPipeToken(PIPE_TOKEN_IN);

		if (DataStream != NULL)
     e2e:	01 15       	cp	r16, r1
     e30:	11 05       	cpc	r17, r1
     e32:	69 f5       	brne	.+90     	; 0xe8e <USB_Host_SendControlRequest+0x102>
     e34:	2e c0       	rjmp	.+92     	; 0xe92 <USB_Host_SendControlRequest+0x106>

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
     e36:	80 91 a9 00 	lds	r24, 0x00A9
     e3a:	8f 7b       	andi	r24, 0xBF	; 191
     e3c:	80 93 a9 00 	sts	0x00A9, r24
		{
			while (DataLen)
			{
				Pipe_Unfreeze();

				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_InReceived)) != HOST_SENDCONTROL_Successful)
     e40:	81 e0       	ldi	r24, 0x01	; 1
     e42:	7b df       	rcall	.-266    	; 0xd3a <USB_Host_WaitForIOS>
     e44:	98 2f       	mov	r25, r24
     e46:	88 23       	and	r24, r24
     e48:	09 f0       	breq	.+2      	; 0xe4c <USB_Host_SendControlRequest+0xc0>
     e4a:	8a c0       	rjmp	.+276    	; 0xf60 <USB_Host_SendControlRequest+0x1d4>
			 *  \return Total number of bytes in the currently selected Pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
     e4c:	80 91 f6 00 	lds	r24, 0x00F6
     e50:	90 91 f7 00 	lds	r25, 0x00F7
				  goto End_Of_Control_Send;

				if (!(Pipe_BytesInPipe()))
     e54:	89 2b       	or	r24, r25
     e56:	49 f4       	brne	.+18     	; 0xe6a <USB_Host_SendControlRequest+0xde>
     e58:	c0 e0       	ldi	r28, 0x00	; 0
     e5a:	d0 e0       	ldi	r29, 0x00	; 0
     e5c:	06 c0       	rjmp	.+12     	; 0xe6a <USB_Host_SendControlRequest+0xde>
			 *  \return Next byte in the currently selected pipe's FIFO buffer.
			 */
			static inline uint8_t Pipe_Read_Byte(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_Read_Byte(void)
			{
				return UPDATX;
     e5e:	80 91 af 00 	lds	r24, 0x00AF
				  DataLen = 0;

				while (Pipe_BytesInPipe() && DataLen)
				{
					*(DataStream++) = Pipe_Read_Byte();
     e62:	f8 01       	movw	r30, r16
     e64:	81 93       	st	Z+, r24
     e66:	8f 01       	movw	r16, r30
					DataLen--;
     e68:	21 97       	sbiw	r28, 0x01	; 1
			 *  \return Total number of bytes in the currently selected Pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
     e6a:	80 91 f6 00 	lds	r24, 0x00F6
     e6e:	90 91 f7 00 	lds	r25, 0x00F7
				  goto End_Of_Control_Send;

				if (!(Pipe_BytesInPipe()))
				  DataLen = 0;

				while (Pipe_BytesInPipe() && DataLen)
     e72:	89 2b       	or	r24, r25
     e74:	11 f0       	breq	.+4      	; 0xe7a <USB_Host_SendControlRequest+0xee>
     e76:	20 97       	sbiw	r28, 0x00	; 0
     e78:	91 f7       	brne	.-28     	; 0xe5e <USB_Host_SendControlRequest+0xd2>

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
     e7a:	80 91 a9 00 	lds	r24, 0x00A9
     e7e:	80 64       	ori	r24, 0x40	; 64
     e80:	80 93 a9 00 	sts	0x00A9, r24
			 *  \ingroup Group_PipePacketManagement
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
     e84:	80 91 a6 00 	lds	r24, 0x00A6
     e88:	8e 77       	andi	r24, 0x7E	; 126
     e8a:	80 93 a6 00 	sts	0x00A6, r24
	{
		Pipe_SetPipeToken(PIPE_TOKEN_IN);

		if (DataStream != NULL)
		{
			while (DataLen)
     e8e:	20 97       	sbiw	r28, 0x00	; 0
     e90:	91 f6       	brne	.-92     	; 0xe36 <USB_Host_SendControlRequest+0xaa>
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
     e92:	80 91 aa 00 	lds	r24, 0x00AA
     e96:	8f 7c       	andi	r24, 0xCF	; 207
     e98:	80 62       	ori	r24, 0x20	; 32
     e9a:	80 93 aa 00 	sts	0x00AA, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
     e9e:	80 91 a9 00 	lds	r24, 0x00A9
     ea2:	8f 7b       	andi	r24, 0xBF	; 191
     ea4:	80 93 a9 00 	sts	0x00A9, r24
		}

		Pipe_SetPipeToken(PIPE_TOKEN_OUT);
		Pipe_Unfreeze();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
     ea8:	82 e0       	ldi	r24, 0x02	; 2
     eaa:	47 df       	rcall	.-370    	; 0xd3a <USB_Host_WaitForIOS>
     eac:	98 2f       	mov	r25, r24
     eae:	88 23       	and	r24, r24
     eb0:	09 f0       	breq	.+2      	; 0xeb4 <USB_Host_SendControlRequest+0x128>
     eb2:	56 c0       	rjmp	.+172    	; 0xf60 <USB_Host_SendControlRequest+0x1d4>
			 *  \ingroup Group_PipePacketManagement
			 */
			static inline void Pipe_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearOUT(void)
			{
				UPINTX &= ~((1 << TXOUTI) | (1 << FIFOCON));
     eb4:	80 91 a6 00 	lds	r24, 0x00A6
     eb8:	8b 77       	andi	r24, 0x7B	; 123
     eba:	80 93 a6 00 	sts	0x00A6, r24
		  goto End_Of_Control_Send;

		Pipe_ClearOUT();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
     ebe:	82 e0       	ldi	r24, 0x02	; 2
     ec0:	3c df       	rcall	.-392    	; 0xd3a <USB_Host_WaitForIOS>
     ec2:	98 2f       	mov	r25, r24
     ec4:	4d c0       	rjmp	.+154    	; 0xf60 <USB_Host_SendControlRequest+0x1d4>
		  goto End_Of_Control_Send;
	}
	else
	{
		if (DataStream != NULL)
     ec6:	01 15       	cp	r16, r1
     ec8:	11 05       	cpc	r17, r1
     eca:	a9 f1       	breq	.+106    	; 0xf36 <USB_Host_SendControlRequest+0x1aa>
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
     ecc:	80 91 aa 00 	lds	r24, 0x00AA
     ed0:	8f 7c       	andi	r24, 0xCF	; 207
     ed2:	80 62       	ori	r24, 0x20	; 32
     ed4:	80 93 aa 00 	sts	0x00AA, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
     ed8:	80 91 a9 00 	lds	r24, 0x00A9
     edc:	8f 7b       	andi	r24, 0xBF	; 191
     ede:	80 93 a9 00 	sts	0x00A9, r24
     ee2:	1d c0       	rjmp	.+58     	; 0xf1e <USB_Host_SendControlRequest+0x192>
			Pipe_SetPipeToken(PIPE_TOKEN_OUT);
			Pipe_Unfreeze();

			while (DataLen)
			{
				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
     ee4:	82 e0       	ldi	r24, 0x02	; 2
     ee6:	29 df       	rcall	.-430    	; 0xd3a <USB_Host_WaitForIOS>
     ee8:	98 2f       	mov	r25, r24
     eea:	88 23       	and	r24, r24
     eec:	c9 f5       	brne	.+114    	; 0xf60 <USB_Host_SendControlRequest+0x1d4>
				  goto End_Of_Control_Send;

				while (DataLen && (Pipe_BytesInPipe() < USB_ControlPipeSize))
     eee:	80 91 2b 01 	lds	r24, 0x012B
     ef2:	28 2f       	mov	r18, r24
     ef4:	30 e0       	ldi	r19, 0x00	; 0
     ef6:	07 c0       	rjmp	.+14     	; 0xf06 <USB_Host_SendControlRequest+0x17a>
				{
					Pipe_Write_Byte(*(DataStream++));
     ef8:	f8 01       	movw	r30, r16
     efa:	81 91       	ld	r24, Z+
     efc:	8f 01       	movw	r16, r30
			 *  \param[in] Byte  Next byte to write into the the currently selected pipe's FIFO buffer.
			 */
			static inline void Pipe_Write_Byte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Write_Byte(const uint8_t Byte)
			{
				UPDATX = Byte;
     efe:	80 93 af 00 	sts	0x00AF, r24
					DataLen--;
     f02:	21 97       	sbiw	r28, 0x01	; 1
			while (DataLen)
			{
				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
				  goto End_Of_Control_Send;

				while (DataLen && (Pipe_BytesInPipe() < USB_ControlPipeSize))
     f04:	39 f0       	breq	.+14     	; 0xf14 <USB_Host_SendControlRequest+0x188>
			 *  \return Total number of bytes in the currently selected Pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
     f06:	80 91 f6 00 	lds	r24, 0x00F6
     f0a:	90 91 f7 00 	lds	r25, 0x00F7
     f0e:	82 17       	cp	r24, r18
     f10:	93 07       	cpc	r25, r19
     f12:	90 f3       	brcs	.-28     	; 0xef8 <USB_Host_SendControlRequest+0x16c>
			 *  \ingroup Group_PipePacketManagement
			 */
			static inline void Pipe_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearOUT(void)
			{
				UPINTX &= ~((1 << TXOUTI) | (1 << FIFOCON));
     f14:	80 91 a6 00 	lds	r24, 0x00A6
     f18:	8b 77       	andi	r24, 0x7B	; 123
     f1a:	80 93 a6 00 	sts	0x00A6, r24
		if (DataStream != NULL)
		{
			Pipe_SetPipeToken(PIPE_TOKEN_OUT);
			Pipe_Unfreeze();

			while (DataLen)
     f1e:	20 97       	sbiw	r28, 0x00	; 0
     f20:	09 f7       	brne	.-62     	; 0xee4 <USB_Host_SendControlRequest+0x158>
				}

				Pipe_ClearOUT();
			}

			if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
     f22:	82 e0       	ldi	r24, 0x02	; 2
     f24:	0a df       	rcall	.-492    	; 0xd3a <USB_Host_WaitForIOS>
     f26:	98 2f       	mov	r25, r24
     f28:	88 23       	and	r24, r24
     f2a:	d1 f4       	brne	.+52     	; 0xf60 <USB_Host_SendControlRequest+0x1d4>

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
     f2c:	80 91 a9 00 	lds	r24, 0x00A9
     f30:	80 64       	ori	r24, 0x40	; 64
     f32:	80 93 a9 00 	sts	0x00A9, r24
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
     f36:	80 91 aa 00 	lds	r24, 0x00AA
     f3a:	8f 7c       	andi	r24, 0xCF	; 207
     f3c:	80 61       	ori	r24, 0x10	; 16
     f3e:	80 93 aa 00 	sts	0x00AA, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
     f42:	80 91 a9 00 	lds	r24, 0x00A9
     f46:	8f 7b       	andi	r24, 0xBF	; 191
     f48:	80 93 a9 00 	sts	0x00A9, r24
		}

		Pipe_SetPipeToken(PIPE_TOKEN_IN);
		Pipe_Unfreeze();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_InReceived)) != HOST_SENDCONTROL_Successful)
     f4c:	81 e0       	ldi	r24, 0x01	; 1
     f4e:	f5 de       	rcall	.-534    	; 0xd3a <USB_Host_WaitForIOS>
     f50:	98 2f       	mov	r25, r24
     f52:	88 23       	and	r24, r24
     f54:	29 f4       	brne	.+10     	; 0xf60 <USB_Host_SendControlRequest+0x1d4>
			 *  \ingroup Group_PipePacketManagement
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
     f56:	80 91 a6 00 	lds	r24, 0x00A6
     f5a:	8e 77       	andi	r24, 0x7E	; 126
     f5c:	80 93 a6 00 	sts	0x00A6, r24

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
     f60:	80 91 a9 00 	lds	r24, 0x00A9
     f64:	80 64       	ori	r24, 0x40	; 64
     f66:	80 93 a9 00 	sts	0x00A9, r24
	}

End_Of_Control_Send:
	Pipe_Freeze();

	if (BusSuspended)
     f6a:	f0 fc       	sbrc	r15, 0
     f6c:	05 c0       	rjmp	.+10     	; 0xf78 <USB_Host_SendControlRequest+0x1ec>
			 *  messages to the device.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				UHCON &= ~(1 << SOFEN);
     f6e:	80 91 9e 00 	lds	r24, 0x009E
     f72:	8e 7f       	andi	r24, 0xFE	; 254
     f74:	80 93 9e 00 	sts	0x009E, r24
			 *  \param[in] PipeNumber  Index of the pipe to reset.
			 */
			static inline void Pipe_ResetPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ResetPipe(const uint8_t PipeNumber)
			{
				UPRST = (1 << PipeNumber);
     f78:	81 e0       	ldi	r24, 0x01	; 1
     f7a:	80 93 a8 00 	sts	0x00A8, r24
				UPRST = 0;
     f7e:	10 92 a8 00 	sts	0x00A8, r1
	  USB_Host_SuspendBus();

	Pipe_ResetPipe(PIPE_CONTROLPIPE);

	return ReturnStatus;
}
     f82:	89 2f       	mov	r24, r25
     f84:	df 91       	pop	r29
     f86:	cf 91       	pop	r28
     f88:	1f 91       	pop	r17
     f8a:	0f 91       	pop	r16
     f8c:	ff 90       	pop	r15
     f8e:	08 95       	ret

00000f90 <Pipe_Read_Stream_LE>:
uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE Buffer,
                            uint16_t Length
                            __CALLBACK_PARAM)
{
     f90:	df 92       	push	r13
     f92:	ef 92       	push	r14
     f94:	ff 92       	push	r15
     f96:	0f 93       	push	r16
     f98:	1f 93       	push	r17
     f9a:	cf 93       	push	r28
     f9c:	df 93       	push	r29
     f9e:	18 2f       	mov	r17, r24
     fa0:	09 2f       	mov	r16, r25
     fa2:	eb 01       	movw	r28, r22
     fa4:	7a 01       	movw	r14, r20
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
     fa6:	80 91 aa 00 	lds	r24, 0x00AA
     faa:	8f 7c       	andi	r24, 0xCF	; 207
     fac:	80 61       	ori	r24, 0x10	; 16
     fae:	80 93 aa 00 	sts	0x00AA, r24
	uint8_t* DataStream = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	uint8_t  ErrorCode;

	Pipe_SetPipeToken(TEMPLATE_TOKEN);

	if ((ErrorCode = Pipe_WaitUntilReady()))
     fb2:	eb dc       	rcall	.-1578   	; 0x98a <Pipe_WaitUntilReady>
     fb4:	d8 2e       	mov	r13, r24
     fb6:	88 23       	and	r24, r24
     fb8:	19 f5       	brne	.+70     	; 0x1000 <Pipe_Read_Stream_LE+0x70>
uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE Buffer,
                            uint16_t Length
                            __CALLBACK_PARAM)
{
	uint8_t* DataStream = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
     fba:	81 2f       	mov	r24, r17
     fbc:	90 2f       	mov	r25, r16
     fbe:	9c 01       	movw	r18, r24
     fc0:	89 01       	movw	r16, r18
     fc2:	1c c0       	rjmp	.+56     	; 0xffc <Pipe_Read_Stream_LE+0x6c>
			 *  \return Boolean true if the currently selected pipe may be read from or written to, depending on its direction.
			 */
			static inline bool Pipe_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsReadWriteAllowed(void)
			{
				return ((UPINTX & (1 << RWAL)) ? true : false);
     fc4:	80 91 a6 00 	lds	r24, 0x00A6
	}
	#endif

	while (Length)
	{
		if (!(Pipe_IsReadWriteAllowed()))
     fc8:	85 fd       	sbrc	r24, 5
     fca:	12 c0       	rjmp	.+36     	; 0xff0 <Pipe_Read_Stream_LE+0x60>
			 *  \ingroup Group_PipePacketManagement
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
     fcc:	80 91 a6 00 	lds	r24, 0x00A6
     fd0:	8e 77       	andi	r24, 0x7E	; 126
     fd2:	80 93 a6 00 	sts	0x00A6, r24
		{
			TEMPLATE_CLEAR_PIPE();

			#if !defined(NO_STREAM_CALLBACKS)
			if ((Callback != NULL) && (Callback() == STREAMCALLBACK_Abort))
     fd6:	e1 14       	cp	r14, r1
     fd8:	f1 04       	cpc	r15, r1
     fda:	31 f0       	breq	.+12     	; 0xfe8 <Pipe_Read_Stream_LE+0x58>
     fdc:	f7 01       	movw	r30, r14
     fde:	09 95       	icall
     fe0:	81 30       	cpi	r24, 0x01	; 1
     fe2:	11 f4       	brne	.+4      	; 0xfe8 <Pipe_Read_Stream_LE+0x58>
     fe4:	84 e0       	ldi	r24, 0x04	; 4
     fe6:	0d c0       	rjmp	.+26     	; 0x1002 <Pipe_Read_Stream_LE+0x72>
			  return PIPE_RWSTREAM_CallbackAborted;
			#endif

			if ((ErrorCode = Pipe_WaitUntilReady()))
     fe8:	d0 dc       	rcall	.-1632   	; 0x98a <Pipe_WaitUntilReady>
     fea:	88 23       	and	r24, r24
     fec:	39 f0       	breq	.+14     	; 0xffc <Pipe_Read_Stream_LE+0x6c>
     fee:	09 c0       	rjmp	.+18     	; 0x1002 <Pipe_Read_Stream_LE+0x72>
			 *  \return Next byte in the currently selected pipe's FIFO buffer.
			 */
			static inline uint8_t Pipe_Read_Byte(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_Read_Byte(void)
			{
				return UPDATX;
     ff0:	80 91 af 00 	lds	r24, 0x00AF
			  return ErrorCode;
		}
		else
		{
			TEMPLATE_TRANSFER_BYTE(DataStream);
     ff4:	f8 01       	movw	r30, r16
     ff6:	81 93       	st	Z+, r24
     ff8:	8f 01       	movw	r16, r30
			Length--;
     ffa:	21 97       	sbiw	r28, 0x01	; 1
				} while (Length >= 8);
		}
	}
	#endif

	while (Length)
     ffc:	20 97       	sbiw	r28, 0x00	; 0
     ffe:	11 f7       	brne	.-60     	; 0xfc4 <Pipe_Read_Stream_LE+0x34>
    1000:	8d 2d       	mov	r24, r13
			Length--;
		}
	}

	return PIPE_RWSTREAM_NoError;
}
    1002:	df 91       	pop	r29
    1004:	cf 91       	pop	r28
    1006:	1f 91       	pop	r17
    1008:	0f 91       	pop	r16
    100a:	ff 90       	pop	r15
    100c:	ef 90       	pop	r14
    100e:	df 90       	pop	r13
    1010:	08 95       	ret

00001012 <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
    1012:	ff 92       	push	r15
    1014:	0f 93       	push	r16
    1016:	1f 93       	push	r17
			 *  \return Index of the currently selected pipe.
			 */
			static inline uint8_t Pipe_GetCurrentPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetCurrentPipe(void)
			{
				return (UPNUM & PIPE_PIPENUM_MASK);
    1018:	07 ea       	ldi	r16, 0xA7	; 167
    101a:	10 e0       	ldi	r17, 0x00	; 0
    101c:	f8 01       	movw	r30, r16
    101e:	f0 80       	ld	r15, Z
    1020:	f7 e0       	ldi	r31, 0x07	; 7
    1022:	ff 22       	and	r15, r31
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
    1024:	f8 01       	movw	r30, r16
    1026:	10 82       	st	Z, r1
{
	uint8_t PrevPipe = Pipe_GetCurrentPipe();

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	USB_Host_ProcessNextHostState();
    1028:	0a db       	rcall	.-2540   	; 0x63e <USB_Host_ProcessNextHostState>
    102a:	f8 01       	movw	r30, r16
    102c:	f0 82       	st	Z, r15
		if (USB_CurrentMode == USB_MODE_Device)
		  USB_DeviceTask();
		else if (USB_CurrentMode == USB_MODE_Host)
		  USB_HostTask();
	#endif
}
    102e:	1f 91       	pop	r17
    1030:	0f 91       	pop	r16
    1032:	ff 90       	pop	r15
    1034:	08 95       	ret

00001036 <USB_GetHIDReportSize>:

uint16_t USB_GetHIDReportSize(HID_ReportInfo_t* const ParserData,
                              const uint8_t ReportID,
                              const uint8_t ReportType)
{
    1036:	e4 2f       	mov	r30, r20
    1038:	f0 e0       	ldi	r31, 0x00	; 0
    103a:	ee 0f       	add	r30, r30
    103c:	ff 1f       	adc	r31, r31
    103e:	ef 56       	subi	r30, 0x6F	; 111
    1040:	fc 4f       	sbci	r31, 0xFC	; 252
    1042:	e8 0f       	add	r30, r24
    1044:	f9 1f       	adc	r31, r25
    1046:	dc 01       	movw	r26, r24
    1048:	a0 57       	subi	r26, 0x70	; 112
    104a:	bc 4f       	sbci	r27, 0xFC	; 252
    104c:	90 e0       	ldi	r25, 0x00	; 0
	for (uint8_t i = 0; i < HID_MAX_REPORT_IDS; i++)
	{
		uint16_t ReportSizeBits = ParserData->ReportIDSizes[i].ReportSizeBits[ReportType];
    104e:	20 81       	ld	r18, Z
    1050:	31 81       	ldd	r19, Z+1	; 0x01

		if (ParserData->ReportIDSizes[i].ReportID == ReportID)
    1052:	8c 91       	ld	r24, X
    1054:	86 17       	cp	r24, r22
    1056:	89 f4       	brne	.+34     	; 0x107a <USB_GetHIDReportSize+0x44>
		  return ((ReportSizeBits >> 3) + ((ReportSizeBits & 0x07) ? 1 : 0));
    1058:	40 e0       	ldi	r20, 0x00	; 0
    105a:	50 e0       	ldi	r21, 0x00	; 0
    105c:	c9 01       	movw	r24, r18
    105e:	87 70       	andi	r24, 0x07	; 7
    1060:	90 70       	andi	r25, 0x00	; 0
    1062:	89 2b       	or	r24, r25
    1064:	11 f0       	breq	.+4      	; 0x106a <USB_GetHIDReportSize+0x34>
    1066:	41 e0       	ldi	r20, 0x01	; 1
    1068:	50 e0       	ldi	r21, 0x00	; 0
    106a:	63 e0       	ldi	r22, 0x03	; 3
    106c:	36 95       	lsr	r19
    106e:	27 95       	ror	r18
    1070:	6a 95       	dec	r22
    1072:	e1 f7       	brne	.-8      	; 0x106c <USB_GetHIDReportSize+0x36>
    1074:	24 0f       	add	r18, r20
    1076:	35 1f       	adc	r19, r21
    1078:	07 c0       	rjmp	.+14     	; 0x1088 <USB_GetHIDReportSize+0x52>

uint16_t USB_GetHIDReportSize(HID_ReportInfo_t* const ParserData,
                              const uint8_t ReportID,
                              const uint8_t ReportType)
{
	for (uint8_t i = 0; i < HID_MAX_REPORT_IDS; i++)
    107a:	9f 5f       	subi	r25, 0xFF	; 255
    107c:	37 96       	adiw	r30, 0x07	; 7
    107e:	17 96       	adiw	r26, 0x07	; 7
    1080:	9a 30       	cpi	r25, 0x0A	; 10
    1082:	29 f7       	brne	.-54     	; 0x104e <USB_GetHIDReportSize+0x18>
    1084:	20 e0       	ldi	r18, 0x00	; 0
    1086:	30 e0       	ldi	r19, 0x00	; 0
		if (ParserData->ReportIDSizes[i].ReportID == ReportID)
		  return ((ReportSizeBits >> 3) + ((ReportSizeBits & 0x07) ? 1 : 0));
	}

	return 0;
}
    1088:	c9 01       	movw	r24, r18
    108a:	08 95       	ret

0000108c <DCOMP_HID_Host_NextHIDInterface>:

	return HID_ENUMERROR_NoError;
}

static uint8_t DCOMP_HID_Host_NextHIDInterface(void* const CurrentDescriptor)
{
    108c:	fc 01       	movw	r30, r24
	USB_Descriptor_Header_t* Header = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Header_t);

	if (Header->Type == DTYPE_Interface)
    108e:	81 81       	ldd	r24, Z+1	; 0x01
    1090:	84 30       	cpi	r24, 0x04	; 4
    1092:	29 f4       	brne	.+10     	; 0x109e <DCOMP_HID_Host_NextHIDInterface+0x12>
	{
		USB_Descriptor_Interface_t* Interface = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Interface_t);

		if (Interface->Class == HID_CSCP_HIDClass)
    1094:	85 81       	ldd	r24, Z+5	; 0x05
    1096:	83 30       	cpi	r24, 0x03	; 3
    1098:	11 f4       	brne	.+4      	; 0x109e <DCOMP_HID_Host_NextHIDInterface+0x12>
    109a:	80 e0       	ldi	r24, 0x00	; 0
    109c:	08 95       	ret
    109e:	82 e0       	ldi	r24, 0x02	; 2
		  return DESCRIPTOR_SEARCH_Found;
	}

	return DESCRIPTOR_SEARCH_NotFound;
}
    10a0:	08 95       	ret

000010a2 <DCOMP_HID_Host_NextHID>:

static uint8_t DCOMP_HID_Host_NextHID(void* const CurrentDescriptor)
{
	USB_Descriptor_Header_t* Header = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Header_t);

	if (Header->Type == HID_DTYPE_HID)
    10a2:	fc 01       	movw	r30, r24
    10a4:	81 81       	ldd	r24, Z+1	; 0x01
    10a6:	81 32       	cpi	r24, 0x21	; 33
    10a8:	11 f4       	brne	.+4      	; 0x10ae <DCOMP_HID_Host_NextHID+0xc>
    10aa:	80 e0       	ldi	r24, 0x00	; 0
    10ac:	08 95       	ret
	  return DESCRIPTOR_SEARCH_Found;
	else if (Header->Type == DTYPE_Interface)
    10ae:	84 30       	cpi	r24, 0x04	; 4
    10b0:	11 f0       	breq	.+4      	; 0x10b6 <DCOMP_HID_Host_NextHID+0x14>
    10b2:	82 e0       	ldi	r24, 0x02	; 2
    10b4:	08 95       	ret
    10b6:	81 e0       	ldi	r24, 0x01	; 1
	  return DESCRIPTOR_SEARCH_Fail;
	else
	  return DESCRIPTOR_SEARCH_NotFound;
}
    10b8:	08 95       	ret

000010ba <HID_Host_IsReportReceived>:
		return USB_Host_SendControlRequest(Buffer);
	}
}

bool HID_Host_IsReportReceived(USB_ClassInfo_HID_Host_t* const HIDInterfaceInfo)
{
    10ba:	fc 01       	movw	r30, r24
	if ((USB_HostState != HOST_STATE_Configured) || !(HIDInterfaceInfo->State.IsActive))
    10bc:	80 91 46 01 	lds	r24, 0x0146
    10c0:	8c 30       	cpi	r24, 0x0C	; 12
    10c2:	a1 f4       	brne	.+40     	; 0x10ec <HID_Host_IsReportReceived+0x32>
    10c4:	87 81       	ldd	r24, Z+7	; 0x07
    10c6:	88 23       	and	r24, r24
    10c8:	89 f0       	breq	.+34     	; 0x10ec <HID_Host_IsReportReceived+0x32>
	  return false;

	bool ReportReceived;

	Pipe_SelectPipe(HIDInterfaceInfo->Config.DataINPipeNumber);
    10ca:	80 81       	ld	r24, Z
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
    10cc:	80 93 a7 00 	sts	0x00A7, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    10d0:	80 91 a9 00 	lds	r24, 0x00A9
    10d4:	8f 7b       	andi	r24, 0xBF	; 191
    10d6:	80 93 a9 00 	sts	0x00A9, r24
			 *  \return Boolean true if the current pipe has received an IN packet, false otherwise.
			 */
			static inline bool Pipe_IsINReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsINReceived(void)
			{
				return ((UPINTX & (1 << RXINI)) ? true : false);
    10da:	90 91 a6 00 	lds	r25, 0x00A6
    10de:	91 70       	andi	r25, 0x01	; 1

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    10e0:	80 91 a9 00 	lds	r24, 0x00A9
    10e4:	80 64       	ori	r24, 0x40	; 64
    10e6:	80 93 a9 00 	sts	0x00A9, r24
    10ea:	01 c0       	rjmp	.+2      	; 0x10ee <HID_Host_IsReportReceived+0x34>

	ReportReceived = Pipe_IsINReceived();

	Pipe_Freeze();

	return ReportReceived;
    10ec:	90 e0       	ldi	r25, 0x00	; 0
}
    10ee:	89 2f       	mov	r24, r25
    10f0:	08 95       	ret

000010f2 <HID_Host_SetBootProtocol>:

uint8_t HID_Host_SetBootProtocol(USB_ClassInfo_HID_Host_t* const HIDInterfaceInfo)
{
    10f2:	cf 93       	push	r28
    10f4:	df 93       	push	r29
    10f6:	ec 01       	movw	r28, r24
	uint8_t ErrorCode;

	USB_ControlRequest = (USB_Request_Header_t)
    10f8:	98 85       	ldd	r25, Y+8	; 0x08
    10fa:	81 e2       	ldi	r24, 0x21	; 33
    10fc:	80 93 3e 01 	sts	0x013E, r24
    1100:	8b e0       	ldi	r24, 0x0B	; 11
    1102:	80 93 3f 01 	sts	0x013F, r24
    1106:	10 92 41 01 	sts	0x0141, r1
    110a:	10 92 40 01 	sts	0x0140, r1
    110e:	90 93 42 01 	sts	0x0142, r25
    1112:	10 92 43 01 	sts	0x0143, r1
    1116:	10 92 45 01 	sts	0x0145, r1
    111a:	10 92 44 01 	sts	0x0144, r1
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
    111e:	10 92 a7 00 	sts	0x00A7, r1
			.wLength       = 0,
		};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	if (!(HIDInterfaceInfo->State.SupportsBootProtocol))
    1122:	8d 85       	ldd	r24, Y+13	; 0x0d
    1124:	88 23       	and	r24, r24
    1126:	11 f4       	brne	.+4      	; 0x112c <HID_Host_SetBootProtocol+0x3a>
    1128:	90 e8       	ldi	r25, 0x80	; 128
    112a:	0a c0       	rjmp	.+20     	; 0x1140 <HID_Host_SetBootProtocol+0x4e>
	  return HID_ERROR_LOGICAL;

	if ((ErrorCode = USB_Host_SendControlRequest(NULL)) != HOST_SENDCONTROL_Successful)
    112c:	80 e0       	ldi	r24, 0x00	; 0
    112e:	90 e0       	ldi	r25, 0x00	; 0
    1130:	2d de       	rcall	.-934    	; 0xd8c <USB_Host_SendControlRequest>
    1132:	98 2f       	mov	r25, r24
    1134:	88 23       	and	r24, r24
    1136:	21 f4       	brne	.+8      	; 0x1140 <HID_Host_SetBootProtocol+0x4e>
	  return ErrorCode;

	HIDInterfaceInfo->State.LargestReportSize = 8;
    1138:	88 e0       	ldi	r24, 0x08	; 8
    113a:	8a 8b       	std	Y+18, r24	; 0x12
	HIDInterfaceInfo->State.UsingBootProtocol = true;
    113c:	81 e0       	ldi	r24, 0x01	; 1
    113e:	8f 87       	std	Y+15, r24	; 0x0f

	return HOST_SENDCONTROL_Successful;
}
    1140:	89 2f       	mov	r24, r25
    1142:	df 91       	pop	r29
    1144:	cf 91       	pop	r28
    1146:	08 95       	ret

00001148 <HID_Host_ReceiveReport>:
}
#endif

uint8_t HID_Host_ReceiveReport(USB_ClassInfo_HID_Host_t* const HIDInterfaceInfo,
                               void* Buffer)
{
    1148:	cf 93       	push	r28
    114a:	df 93       	push	r29
    114c:	dc 01       	movw	r26, r24
	if ((USB_HostState != HOST_STATE_Configured) || !(HIDInterfaceInfo->State.IsActive))
    114e:	80 91 46 01 	lds	r24, 0x0146
    1152:	8c 30       	cpi	r24, 0x0C	; 12
    1154:	09 f0       	breq	.+2      	; 0x1158 <HID_Host_ReceiveReport+0x10>
    1156:	3f c0       	rjmp	.+126    	; 0x11d6 <HID_Host_ReceiveReport+0x8e>
    1158:	17 96       	adiw	r26, 0x07	; 7
    115a:	8c 91       	ld	r24, X
    115c:	17 97       	sbiw	r26, 0x07	; 7
    115e:	88 23       	and	r24, r24
    1160:	d1 f1       	breq	.+116    	; 0x11d6 <HID_Host_ReceiveReport+0x8e>
	  return PIPE_READYWAIT_DeviceDisconnected;

	uint8_t ErrorCode;

	Pipe_SelectPipe(HIDInterfaceInfo->Config.DataINPipeNumber);
    1162:	8c 91       	ld	r24, X
    1164:	80 93 a7 00 	sts	0x00A7, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    1168:	80 91 a9 00 	lds	r24, 0x00A9
    116c:	8f 7b       	andi	r24, 0xBF	; 191
    116e:	80 93 a9 00 	sts	0x00A9, r24
	Pipe_Unfreeze();

	uint16_t ReportSize;
	uint8_t* BufferPos = Buffer;
    1172:	eb 01       	movw	r28, r22

#if !defined(HID_HOST_BOOT_PROTOCOL_ONLY)
	if (!(HIDInterfaceInfo->State.UsingBootProtocol))
    1174:	1f 96       	adiw	r26, 0x0f	; 15
    1176:	8c 91       	ld	r24, X
    1178:	1f 97       	sbiw	r26, 0x0f	; 15
    117a:	88 23       	and	r24, r24
    117c:	b1 f4       	brne	.+44     	; 0x11aa <HID_Host_ReceiveReport+0x62>
	{
		uint8_t ReportID = 0;

		if (HIDInterfaceInfo->Config.HIDParserData->UsingReportIDs)
    117e:	15 96       	adiw	r26, 0x05	; 5
    1180:	ed 91       	ld	r30, X+
    1182:	fc 91       	ld	r31, X
    1184:	16 97       	sbiw	r26, 0x06	; 6
    1186:	e8 52       	subi	r30, 0x28	; 40
    1188:	fc 4f       	sbci	r31, 0xFC	; 252
    118a:	80 81       	ld	r24, Z
    118c:	88 23       	and	r24, r24
    118e:	11 f4       	brne	.+4      	; 0x1194 <HID_Host_ReceiveReport+0x4c>
    1190:	60 e0       	ldi	r22, 0x00	; 0
    1192:	03 c0       	rjmp	.+6      	; 0x119a <HID_Host_ReceiveReport+0x52>
			 *  \return Next byte in the currently selected pipe's FIFO buffer.
			 */
			static inline uint8_t Pipe_Read_Byte(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_Read_Byte(void)
			{
				return UPDATX;
    1194:	60 91 af 00 	lds	r22, 0x00AF
		{
			ReportID = Pipe_Read_Byte();
			*(BufferPos++) = ReportID;
    1198:	69 93       	st	Y+, r22
		}

		ReportSize = USB_GetHIDReportSize(HIDInterfaceInfo->Config.HIDParserData, ReportID, HID_REPORT_ITEM_In);
    119a:	15 96       	adiw	r26, 0x05	; 5
    119c:	8d 91       	ld	r24, X+
    119e:	9c 91       	ld	r25, X
    11a0:	16 97       	sbiw	r26, 0x06	; 6
    11a2:	40 e0       	ldi	r20, 0x00	; 0
    11a4:	48 df       	rcall	.-368    	; 0x1036 <USB_GetHIDReportSize>
    11a6:	bc 01       	movw	r22, r24
    11a8:	04 c0       	rjmp	.+8      	; 0x11b2 <HID_Host_ReceiveReport+0x6a>
			 *  \return Total number of bytes in the currently selected Pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
    11aa:	60 91 f6 00 	lds	r22, 0x00F6
    11ae:	70 91 f7 00 	lds	r23, 0x00F7
#endif
	{
		ReportSize = Pipe_BytesInPipe();
	}

	if ((ErrorCode = Pipe_Read_Stream_LE(BufferPos, ReportSize, NO_STREAM_CALLBACK)) != PIPE_RWSTREAM_NoError)
    11b2:	ce 01       	movw	r24, r28
    11b4:	40 e0       	ldi	r20, 0x00	; 0
    11b6:	50 e0       	ldi	r21, 0x00	; 0
    11b8:	eb de       	rcall	.-554    	; 0xf90 <Pipe_Read_Stream_LE>
    11ba:	98 2f       	mov	r25, r24
    11bc:	88 23       	and	r24, r24
    11be:	61 f4       	brne	.+24     	; 0x11d8 <HID_Host_ReceiveReport+0x90>
			 *  \ingroup Group_PipePacketManagement
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
    11c0:	80 91 a6 00 	lds	r24, 0x00A6
    11c4:	8e 77       	andi	r24, 0x7E	; 126
    11c6:	80 93 a6 00 	sts	0x00A6, r24

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    11ca:	80 91 a9 00 	lds	r24, 0x00A9
    11ce:	80 64       	ori	r24, 0x40	; 64
    11d0:	80 93 a9 00 	sts	0x00A9, r24
    11d4:	01 c0       	rjmp	.+2      	; 0x11d8 <HID_Host_ReceiveReport+0x90>
	  return ErrorCode;

	Pipe_ClearIN();
	Pipe_Freeze();

	return PIPE_RWSTREAM_NoError;
    11d6:	92 e0       	ldi	r25, 0x02	; 2
}
    11d8:	89 2f       	mov	r24, r25
    11da:	df 91       	pop	r29
    11dc:	cf 91       	pop	r28
    11de:	08 95       	ret

000011e0 <HID_Host_ConfigurePipes>:
#include "HID.h"

uint8_t HID_Host_ConfigurePipes(USB_ClassInfo_HID_Host_t* const HIDInterfaceInfo,
                                uint16_t ConfigDescriptorSize,
                                void* ConfigDescriptorData)
{
    11e0:	3f 92       	push	r3
    11e2:	4f 92       	push	r4
    11e4:	5f 92       	push	r5
    11e6:	6f 92       	push	r6
    11e8:	7f 92       	push	r7
    11ea:	8f 92       	push	r8
    11ec:	9f 92       	push	r9
    11ee:	af 92       	push	r10
    11f0:	bf 92       	push	r11
    11f2:	cf 92       	push	r12
    11f4:	df 92       	push	r13
    11f6:	ef 92       	push	r14
    11f8:	ff 92       	push	r15
    11fa:	0f 93       	push	r16
    11fc:	1f 93       	push	r17
    11fe:	df 93       	push	r29
    1200:	cf 93       	push	r28
    1202:	00 d0       	rcall	.+0      	; 0x1204 <HID_Host_ConfigurePipes+0x24>
    1204:	00 d0       	rcall	.+0      	; 0x1206 <HID_Host_ConfigurePipes+0x26>
    1206:	cd b7       	in	r28, 0x3d	; 61
    1208:	de b7       	in	r29, 0x3e	; 62
    120a:	6c 01       	movw	r12, r24
    120c:	7a 83       	std	Y+2, r23	; 0x02
    120e:	69 83       	std	Y+1, r22	; 0x01
    1210:	5c 83       	std	Y+4, r21	; 0x04
    1212:	4b 83       	std	Y+3, r20	; 0x03
	USB_Descriptor_Endpoint_t*  DataINEndpoint  = NULL;
	USB_Descriptor_Endpoint_t*  DataOUTEndpoint = NULL;
	USB_Descriptor_Interface_t* HIDInterface    = NULL;
	USB_HID_Descriptor_HID_t*   HIDDescriptor   = NULL;

	memset(&HIDInterfaceInfo->State, 0x00, sizeof(HIDInterfaceInfo->State));
    1214:	07 96       	adiw	r24, 0x07	; 7
    1216:	fc 01       	movw	r30, r24
    1218:	8c e0       	ldi	r24, 0x0C	; 12
    121a:	df 01       	movw	r26, r30
    121c:	1d 92       	st	X+, r1
    121e:	8a 95       	dec	r24
    1220:	e9 f7       	brne	.-6      	; 0x121c <HID_Host_ConfigurePipes+0x3c>

	if (DESCRIPTOR_TYPE(ConfigDescriptorData) != DTYPE_Configuration)
    1222:	eb 81       	ldd	r30, Y+3	; 0x03
    1224:	fc 81       	ldd	r31, Y+4	; 0x04
    1226:	81 81       	ldd	r24, Z+1	; 0x01
    1228:	82 30       	cpi	r24, 0x02	; 2
    122a:	11 f0       	breq	.+4      	; 0x1230 <HID_Host_ConfigurePipes+0x50>
    122c:	81 e0       	ldi	r24, 0x01	; 1
    122e:	b8 c0       	rjmp	.+368    	; 0x13a0 <HID_Host_ConfigurePipes+0x1c0>
    1230:	88 24       	eor	r8, r8
    1232:	99 24       	eor	r9, r9
    1234:	aa 24       	eor	r10, r10
    1236:	bb 24       	eor	r11, r11
    1238:	66 24       	eor	r6, r6
    123a:	77 24       	eor	r7, r7
    123c:	44 24       	eor	r4, r4
    123e:	55 24       	eor	r5, r5
	  return HID_ENUMERROR_InvalidConfigDescriptor;

	while (!(DataINEndpoint) || !(DataOUTEndpoint))
	{
		if (!(HIDInterface) ||
    1240:	93 e0       	ldi	r25, 0x03	; 3
    1242:	e9 2e       	mov	r14, r25
    1244:	f1 2c       	mov	r15, r1
    1246:	ec 0e       	add	r14, r28
    1248:	fd 1e       	adc	r15, r29
    124a:	8e 01       	movw	r16, r28
    124c:	0f 5f       	subi	r16, 0xFF	; 255
    124e:	1f 4f       	sbci	r17, 0xFF	; 255
    1250:	61 14       	cp	r6, r1
    1252:	71 04       	cpc	r7, r1
    1254:	39 f0       	breq	.+14     	; 0x1264 <HID_Host_ConfigurePipes+0x84>
    1256:	c8 01       	movw	r24, r16
    1258:	b7 01       	movw	r22, r14
    125a:	46 ee       	ldi	r20, 0xE6	; 230
    125c:	59 e0       	ldi	r21, 0x09	; 9
    125e:	d1 dc       	rcall	.-1630   	; 0xc02 <USB_GetNextDescriptorComp>
    1260:	88 23       	and	r24, r24
    1262:	21 f1       	breq	.+72     	; 0x12ac <HID_Host_ConfigurePipes+0xcc>
		    USB_GetNextDescriptorComp(&ConfigDescriptorSize, &ConfigDescriptorData,
		                              DCOMP_HID_Host_NextHIDInterfaceEndpoint) != DESCRIPTOR_SEARCH_COMP_Found)
		{
			if (DataINEndpoint || DataOUTEndpoint)
    1264:	81 14       	cp	r8, r1
    1266:	91 04       	cpc	r9, r1
    1268:	79 f5       	brne	.+94     	; 0x12c8 <HID_Host_ConfigurePipes+0xe8>
    126a:	a1 14       	cp	r10, r1
    126c:	b1 04       	cpc	r11, r1
    126e:	61 f5       	brne	.+88     	; 0x12c8 <HID_Host_ConfigurePipes+0xe8>
			  break;

			do
			{
				if (USB_GetNextDescriptorComp(&ConfigDescriptorSize, &ConfigDescriptorData,
    1270:	c8 01       	movw	r24, r16
    1272:	b7 01       	movw	r22, r14
    1274:	46 e4       	ldi	r20, 0x46	; 70
    1276:	58 e0       	ldi	r21, 0x08	; 8
    1278:	c4 dc       	rcall	.-1656   	; 0xc02 <USB_GetNextDescriptorComp>
    127a:	88 23       	and	r24, r24
    127c:	09 f0       	breq	.+2      	; 0x1280 <HID_Host_ConfigurePipes+0xa0>
    127e:	8f c0       	rjmp	.+286    	; 0x139e <HID_Host_ConfigurePipes+0x1be>
				                              DCOMP_HID_Host_NextHIDInterface) != DESCRIPTOR_SEARCH_COMP_Found)
				{
					return HID_ENUMERROR_NoCompatibleInterfaceFound;
				}

				HIDInterface = DESCRIPTOR_PCAST(ConfigDescriptorData, USB_Descriptor_Interface_t);
    1280:	6b 80       	ldd	r6, Y+3	; 0x03
    1282:	7c 80       	ldd	r7, Y+4	; 0x04
			} while (HIDInterfaceInfo->Config.HIDInterfaceProtocol &&
					 (HIDInterface->Protocol != HIDInterfaceInfo->Config.HIDInterfaceProtocol));
    1284:	f6 01       	movw	r30, r12
    1286:	94 81       	ldd	r25, Z+4	; 0x04
    1288:	99 23       	and	r25, r25
    128a:	29 f0       	breq	.+10     	; 0x1296 <HID_Host_ConfigurePipes+0xb6>
    128c:	d3 01       	movw	r26, r6
    128e:	17 96       	adiw	r26, 0x07	; 7
    1290:	8c 91       	ld	r24, X
    1292:	89 17       	cp	r24, r25
    1294:	69 f7       	brne	.-38     	; 0x1270 <HID_Host_ConfigurePipes+0x90>

			if (USB_GetNextDescriptorComp(&ConfigDescriptorSize, &ConfigDescriptorData,
    1296:	c8 01       	movw	r24, r16
    1298:	b7 01       	movw	r22, r14
    129a:	41 e5       	ldi	r20, 0x51	; 81
    129c:	58 e0       	ldi	r21, 0x08	; 8
    129e:	b1 dc       	rcall	.-1694   	; 0xc02 <USB_GetNextDescriptorComp>
    12a0:	88 23       	and	r24, r24
    12a2:	09 f0       	breq	.+2      	; 0x12a6 <HID_Host_ConfigurePipes+0xc6>
    12a4:	7c c0       	rjmp	.+248    	; 0x139e <HID_Host_ConfigurePipes+0x1be>
			                              DCOMP_HID_Host_NextHID) != DESCRIPTOR_SEARCH_COMP_Found)
			{
				return HID_ENUMERROR_NoCompatibleInterfaceFound;
			}

			HIDDescriptor = DESCRIPTOR_PCAST(ConfigDescriptorData, USB_HID_Descriptor_HID_t);
    12a6:	4b 80       	ldd	r4, Y+3	; 0x03
    12a8:	5c 80       	ldd	r5, Y+4	; 0x04
    12aa:	d2 cf       	rjmp	.-92     	; 0x1250 <HID_Host_ConfigurePipes+0x70>
			DataOUTEndpoint = NULL;

			continue;
		}

		USB_Descriptor_Endpoint_t* EndpointData = DESCRIPTOR_PCAST(ConfigDescriptorData, USB_Descriptor_Endpoint_t);
    12ac:	eb 81       	ldd	r30, Y+3	; 0x03
    12ae:	fc 81       	ldd	r31, Y+4	; 0x04

		if (EndpointData->EndpointAddress & ENDPOINT_DESCRIPTOR_DIR_IN)
    12b0:	82 81       	ldd	r24, Z+2	; 0x02
    12b2:	87 fd       	sbrc	r24, 7
    12b4:	02 c0       	rjmp	.+4      	; 0x12ba <HID_Host_ConfigurePipes+0xda>
    12b6:	5f 01       	movw	r10, r30
    12b8:	01 c0       	rjmp	.+2      	; 0x12bc <HID_Host_ConfigurePipes+0xdc>
    12ba:	4f 01       	movw	r8, r30
	memset(&HIDInterfaceInfo->State, 0x00, sizeof(HIDInterfaceInfo->State));

	if (DESCRIPTOR_TYPE(ConfigDescriptorData) != DTYPE_Configuration)
	  return HID_ENUMERROR_InvalidConfigDescriptor;

	while (!(DataINEndpoint) || !(DataOUTEndpoint))
    12bc:	81 14       	cp	r8, r1
    12be:	91 04       	cpc	r9, r1
    12c0:	39 f2       	breq	.-114    	; 0x1250 <HID_Host_ConfigurePipes+0x70>
    12c2:	a1 14       	cp	r10, r1
    12c4:	b1 04       	cpc	r11, r1
    12c6:	21 f2       	breq	.-120    	; 0x1250 <HID_Host_ConfigurePipes+0x70>
    12c8:	ff 24       	eor	r15, r15
    12ca:	f3 94       	inc	r15
			                   DataOUTEndpoint->EndpointAddress, DataOUTEndpoint->EndpointSize,
			                   HIDInterfaceInfo->Config.DataOUTPipeDoubleBank ? PIPE_BANK_DOUBLE : PIPE_BANK_SINGLE);
			Pipe_SetInterruptPeriod(DataOUTEndpoint->PollingIntervalMS);

			HIDInterfaceInfo->State.DataOUTPipeSize = DataOUTEndpoint->EndpointSize;
			HIDInterfaceInfo->State.DeviceUsesOUTPipe = true;
    12cc:	33 24       	eor	r3, r3
    12ce:	33 94       	inc	r3
		  DataOUTEndpoint = EndpointData;
	}

	for (uint8_t PipeNum = 1; PipeNum < PIPE_TOTAL_PIPES; PipeNum++)
	{
		if (PipeNum == HIDInterfaceInfo->Config.DataINPipeNumber)
    12d0:	f6 01       	movw	r30, r12
    12d2:	80 81       	ld	r24, Z
    12d4:	f8 16       	cp	r15, r24
    12d6:	f9 f4       	brne	.+62     	; 0x1316 <HID_Host_ConfigurePipes+0x136>
		{
			Pipe_ConfigurePipe(PipeNum, EP_TYPE_INTERRUPT, PIPE_TOKEN_IN,
    12d8:	d4 01       	movw	r26, r8
    12da:	12 96       	adiw	r26, 0x02	; 2
    12dc:	2c 91       	ld	r18, X
    12de:	12 97       	sbiw	r26, 0x02	; 2
    12e0:	14 96       	adiw	r26, 0x04	; 4
    12e2:	0d 91       	ld	r16, X+
    12e4:	1c 91       	ld	r17, X
    12e6:	15 97       	sbiw	r26, 0x05	; 5
    12e8:	81 81       	ldd	r24, Z+1	; 0x01
    12ea:	88 23       	and	r24, r24
    12ec:	11 f4       	brne	.+4      	; 0x12f2 <HID_Host_ConfigurePipes+0x112>
    12ee:	90 e0       	ldi	r25, 0x00	; 0
    12f0:	01 c0       	rjmp	.+2      	; 0x12f4 <HID_Host_ConfigurePipes+0x114>
    12f2:	94 e0       	ldi	r25, 0x04	; 4
    12f4:	8f 2d       	mov	r24, r15
    12f6:	63 e0       	ldi	r22, 0x03	; 3
    12f8:	40 e1       	ldi	r20, 0x10	; 16
    12fa:	e9 2e       	mov	r14, r25
    12fc:	ce da       	rcall	.-2660   	; 0x89a <Pipe_ConfigurePipe>
			                   DataINEndpoint->EndpointAddress, DataINEndpoint->EndpointSize,
			                   HIDInterfaceInfo->Config.DataINPipeDoubleBank ? PIPE_BANK_DOUBLE : PIPE_BANK_SINGLE);
			Pipe_SetInterruptPeriod(DataINEndpoint->PollingIntervalMS);
    12fe:	f4 01       	movw	r30, r8
    1300:	86 81       	ldd	r24, Z+6	; 0x06
			 *  \param[in] Milliseconds  Number of milliseconds between each pipe poll.
			 */
			static inline void Pipe_SetInterruptPeriod(const uint8_t Milliseconds) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetInterruptPeriod(const uint8_t Milliseconds)
			{
				UPCFG2X = Milliseconds;
    1302:	80 93 ad 00 	sts	0x00AD, r24

			HIDInterfaceInfo->State.DataINPipeSize = DataINEndpoint->EndpointSize;
    1306:	84 81       	ldd	r24, Z+4	; 0x04
    1308:	95 81       	ldd	r25, Z+5	; 0x05
    130a:	d6 01       	movw	r26, r12
    130c:	1a 96       	adiw	r26, 0x0a	; 10
    130e:	9c 93       	st	X, r25
    1310:	8e 93       	st	-X, r24
    1312:	19 97       	sbiw	r26, 0x09	; 9
    1314:	24 c0       	rjmp	.+72     	; 0x135e <HID_Host_ConfigurePipes+0x17e>
		}
		else if (PipeNum == HIDInterfaceInfo->Config.DataOUTPipeNumber)
    1316:	f6 01       	movw	r30, r12
    1318:	82 81       	ldd	r24, Z+2	; 0x02
    131a:	f8 16       	cp	r15, r24
    131c:	01 f5       	brne	.+64     	; 0x135e <HID_Host_ConfigurePipes+0x17e>
		{
			Pipe_ConfigurePipe(PipeNum, EP_TYPE_INTERRUPT, PIPE_TOKEN_OUT,
    131e:	d5 01       	movw	r26, r10
    1320:	12 96       	adiw	r26, 0x02	; 2
    1322:	2c 91       	ld	r18, X
    1324:	12 97       	sbiw	r26, 0x02	; 2
    1326:	14 96       	adiw	r26, 0x04	; 4
    1328:	0d 91       	ld	r16, X+
    132a:	1c 91       	ld	r17, X
    132c:	15 97       	sbiw	r26, 0x05	; 5
    132e:	83 81       	ldd	r24, Z+3	; 0x03
    1330:	88 23       	and	r24, r24
    1332:	11 f4       	brne	.+4      	; 0x1338 <HID_Host_ConfigurePipes+0x158>
    1334:	90 e0       	ldi	r25, 0x00	; 0
    1336:	01 c0       	rjmp	.+2      	; 0x133a <HID_Host_ConfigurePipes+0x15a>
    1338:	94 e0       	ldi	r25, 0x04	; 4
    133a:	8f 2d       	mov	r24, r15
    133c:	63 e0       	ldi	r22, 0x03	; 3
    133e:	40 e2       	ldi	r20, 0x20	; 32
    1340:	e9 2e       	mov	r14, r25
    1342:	ab da       	rcall	.-2730   	; 0x89a <Pipe_ConfigurePipe>
			                   DataOUTEndpoint->EndpointAddress, DataOUTEndpoint->EndpointSize,
			                   HIDInterfaceInfo->Config.DataOUTPipeDoubleBank ? PIPE_BANK_DOUBLE : PIPE_BANK_SINGLE);
			Pipe_SetInterruptPeriod(DataOUTEndpoint->PollingIntervalMS);
    1344:	f5 01       	movw	r30, r10
    1346:	86 81       	ldd	r24, Z+6	; 0x06
    1348:	80 93 ad 00 	sts	0x00AD, r24

			HIDInterfaceInfo->State.DataOUTPipeSize = DataOUTEndpoint->EndpointSize;
    134c:	84 81       	ldd	r24, Z+4	; 0x04
    134e:	95 81       	ldd	r25, Z+5	; 0x05
    1350:	d6 01       	movw	r26, r12
    1352:	1c 96       	adiw	r26, 0x0c	; 12
    1354:	9c 93       	st	X, r25
    1356:	8e 93       	st	-X, r24
    1358:	1b 97       	sbiw	r26, 0x0b	; 11
			HIDInterfaceInfo->State.DeviceUsesOUTPipe = true;
    135a:	1e 96       	adiw	r26, 0x0e	; 14
    135c:	3c 92       	st	X, r3
		  DataINEndpoint = EndpointData;
		else
		  DataOUTEndpoint = EndpointData;
	}

	for (uint8_t PipeNum = 1; PipeNum < PIPE_TOTAL_PIPES; PipeNum++)
    135e:	f3 94       	inc	r15
    1360:	b7 e0       	ldi	r27, 0x07	; 7
    1362:	fb 16       	cp	r15, r27
    1364:	09 f0       	breq	.+2      	; 0x1368 <HID_Host_ConfigurePipes+0x188>
    1366:	b4 cf       	rjmp	.-152    	; 0x12d0 <HID_Host_ConfigurePipes+0xf0>
			HIDInterfaceInfo->State.DataOUTPipeSize = DataOUTEndpoint->EndpointSize;
			HIDInterfaceInfo->State.DeviceUsesOUTPipe = true;
		}
	}

	HIDInterfaceInfo->State.InterfaceNumber      = HIDInterface->InterfaceNumber;
    1368:	f3 01       	movw	r30, r6
    136a:	82 81       	ldd	r24, Z+2	; 0x02
    136c:	d6 01       	movw	r26, r12
    136e:	18 96       	adiw	r26, 0x08	; 8
    1370:	8c 93       	st	X, r24
    1372:	18 97       	sbiw	r26, 0x08	; 8
	HIDInterfaceInfo->State.HIDReportSize        = HIDDescriptor->HIDReportLength;
    1374:	f2 01       	movw	r30, r4
    1376:	87 81       	ldd	r24, Z+7	; 0x07
    1378:	90 85       	ldd	r25, Z+8	; 0x08
    137a:	51 96       	adiw	r26, 0x11	; 17
    137c:	9c 93       	st	X, r25
    137e:	8e 93       	st	-X, r24
    1380:	50 97       	sbiw	r26, 0x10	; 16
	HIDInterfaceInfo->State.SupportsBootProtocol = (HIDInterface->SubClass != HID_CSCP_NonBootProtocol);
    1382:	90 e0       	ldi	r25, 0x00	; 0
    1384:	d3 01       	movw	r26, r6
    1386:	16 96       	adiw	r26, 0x06	; 6
    1388:	8c 91       	ld	r24, X
    138a:	81 11       	cpse	r24, r1
    138c:	91 e0       	ldi	r25, 0x01	; 1
    138e:	f6 01       	movw	r30, r12
    1390:	95 87       	std	Z+13, r25	; 0x0d
	HIDInterfaceInfo->State.LargestReportSize    = 8;
    1392:	88 e0       	ldi	r24, 0x08	; 8
    1394:	82 8b       	std	Z+18, r24	; 0x12
	HIDInterfaceInfo->State.IsActive = true;
    1396:	81 e0       	ldi	r24, 0x01	; 1
    1398:	87 83       	std	Z+7, r24	; 0x07
    139a:	80 e0       	ldi	r24, 0x00	; 0
    139c:	01 c0       	rjmp	.+2      	; 0x13a0 <HID_Host_ConfigurePipes+0x1c0>

	return HID_ENUMERROR_NoError;
    139e:	82 e0       	ldi	r24, 0x02	; 2
}
    13a0:	0f 90       	pop	r0
    13a2:	0f 90       	pop	r0
    13a4:	0f 90       	pop	r0
    13a6:	0f 90       	pop	r0
    13a8:	cf 91       	pop	r28
    13aa:	df 91       	pop	r29
    13ac:	1f 91       	pop	r17
    13ae:	0f 91       	pop	r16
    13b0:	ff 90       	pop	r15
    13b2:	ef 90       	pop	r14
    13b4:	df 90       	pop	r13
    13b6:	cf 90       	pop	r12
    13b8:	bf 90       	pop	r11
    13ba:	af 90       	pop	r10
    13bc:	9f 90       	pop	r9
    13be:	8f 90       	pop	r8
    13c0:	7f 90       	pop	r7
    13c2:	6f 90       	pop	r6
    13c4:	5f 90       	pop	r5
    13c6:	4f 90       	pop	r4
    13c8:	3f 90       	pop	r3
    13ca:	08 95       	ret

000013cc <DCOMP_HID_Host_NextHIDInterfaceEndpoint>:
	else
	  return DESCRIPTOR_SEARCH_NotFound;
}

static uint8_t DCOMP_HID_Host_NextHIDInterfaceEndpoint(void* const CurrentDescriptor)
{
    13cc:	fc 01       	movw	r30, r24
	USB_Descriptor_Header_t* Header = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Header_t);

	if (Header->Type == DTYPE_Endpoint)
    13ce:	81 81       	ldd	r24, Z+1	; 0x01
    13d0:	85 30       	cpi	r24, 0x05	; 5
    13d2:	29 f4       	brne	.+10     	; 0x13de <DCOMP_HID_Host_NextHIDInterfaceEndpoint+0x12>
	{
		USB_Descriptor_Endpoint_t* Endpoint = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Endpoint_t);

		if (!(Pipe_IsEndpointBound(Endpoint->EndpointAddress)))
    13d4:	82 81       	ldd	r24, Z+2	; 0x02
    13d6:	ab da       	rcall	.-2730   	; 0x92e <Pipe_IsEndpointBound>
    13d8:	88 23       	and	r24, r24
    13da:	29 f4       	brne	.+10     	; 0x13e6 <DCOMP_HID_Host_NextHIDInterfaceEndpoint+0x1a>
    13dc:	08 95       	ret
		  return DESCRIPTOR_SEARCH_Found;
	}
	else if (Header->Type == DTYPE_Interface)
    13de:	84 30       	cpi	r24, 0x04	; 4
    13e0:	11 f4       	brne	.+4      	; 0x13e6 <DCOMP_HID_Host_NextHIDInterfaceEndpoint+0x1a>
    13e2:	81 e0       	ldi	r24, 0x01	; 1
    13e4:	08 95       	ret
    13e6:	82 e0       	ldi	r24, 0x02	; 2
	{
		return DESCRIPTOR_SEARCH_Fail;
	}

	return DESCRIPTOR_SEARCH_NotFound;
}
    13e8:	08 95       	ret

000013ea <SerialStream_TxByte>:

FILE USARTStream = FDEV_SETUP_STREAM(SerialStream_TxByte, SerialStream_RxByte, _FDEV_SETUP_RW);

static int SerialStream_TxByte(char DataByte,
                               FILE *Stream)
{
    13ea:	98 2f       	mov	r25, r24
			 *  \param[in] DataByte  Byte to transmit through the USART.
			 */
			static inline void Serial_TxByte(const char DataByte) ATTR_ALWAYS_INLINE;
			static inline void Serial_TxByte(const char DataByte)
			{
				while (!(UCSR1A & (1 << UDRE1)));
    13ec:	80 91 c8 00 	lds	r24, 0x00C8
    13f0:	85 ff       	sbrs	r24, 5
    13f2:	fc cf       	rjmp	.-8      	; 0x13ec <SerialStream_TxByte+0x2>
				UDR1 = DataByte;
    13f4:	90 93 ce 00 	sts	0x00CE, r25
	(void)Stream;

	Serial_TxByte(DataByte);
	return 0;
}
    13f8:	80 e0       	ldi	r24, 0x00	; 0
    13fa:	90 e0       	ldi	r25, 0x00	; 0
    13fc:	08 95       	ret

000013fe <SerialStream_RxByte>:
			 *  \return Boolean true if a character has been received, false otherwise.
			 */
			static inline bool Serial_IsCharReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Serial_IsCharReceived(void)
			{
				return ((UCSR1A & (1 << RXC1)) ? true : false);
    13fe:	80 91 c8 00 	lds	r24, 0x00C8

static int SerialStream_RxByte(FILE *Stream)
{
	(void)Stream;

	if (!(Serial_IsCharReceived()))
    1402:	87 fd       	sbrc	r24, 7
    1404:	03 c0       	rjmp	.+6      	; 0x140c <SerialStream_RxByte+0xe>
    1406:	2e ef       	ldi	r18, 0xFE	; 254
    1408:	3f ef       	ldi	r19, 0xFF	; 255
    140a:	08 c0       	rjmp	.+16     	; 0x141c <SerialStream_RxByte+0x1e>
			 *  \return Byte received from the USART.
			 */
			static inline char Serial_RxByte(void) ATTR_ALWAYS_INLINE;
			static inline char Serial_RxByte(void)
			{
				while (!(UCSR1A & (1 << RXC1)));
    140c:	80 91 c8 00 	lds	r24, 0x00C8
    1410:	87 ff       	sbrs	r24, 7
    1412:	fc cf       	rjmp	.-8      	; 0x140c <SerialStream_RxByte+0xe>
				return UDR1;
    1414:	80 91 ce 00 	lds	r24, 0x00CE
	  return _FDEV_EOF;

	return Serial_RxByte();
    1418:	28 2f       	mov	r18, r24
    141a:	30 e0       	ldi	r19, 0x00	; 0
}
    141c:	c9 01       	movw	r24, r18
    141e:	08 95       	ret

00001420 <fputc>:
    1420:	0f 93       	push	r16
    1422:	1f 93       	push	r17
    1424:	cf 93       	push	r28
    1426:	df 93       	push	r29
    1428:	8c 01       	movw	r16, r24
    142a:	eb 01       	movw	r28, r22
    142c:	8b 81       	ldd	r24, Y+3	; 0x03
    142e:	81 ff       	sbrs	r24, 1
    1430:	1b c0       	rjmp	.+54     	; 0x1468 <fputc+0x48>
    1432:	82 ff       	sbrs	r24, 2
    1434:	0d c0       	rjmp	.+26     	; 0x1450 <fputc+0x30>
    1436:	2e 81       	ldd	r18, Y+6	; 0x06
    1438:	3f 81       	ldd	r19, Y+7	; 0x07
    143a:	8c 81       	ldd	r24, Y+4	; 0x04
    143c:	9d 81       	ldd	r25, Y+5	; 0x05
    143e:	28 17       	cp	r18, r24
    1440:	39 07       	cpc	r19, r25
    1442:	64 f4       	brge	.+24     	; 0x145c <fputc+0x3c>
    1444:	e8 81       	ld	r30, Y
    1446:	f9 81       	ldd	r31, Y+1	; 0x01
    1448:	01 93       	st	Z+, r16
    144a:	f9 83       	std	Y+1, r31	; 0x01
    144c:	e8 83       	st	Y, r30
    144e:	06 c0       	rjmp	.+12     	; 0x145c <fputc+0x3c>
    1450:	e8 85       	ldd	r30, Y+8	; 0x08
    1452:	f9 85       	ldd	r31, Y+9	; 0x09
    1454:	80 2f       	mov	r24, r16
    1456:	09 95       	icall
    1458:	89 2b       	or	r24, r25
    145a:	31 f4       	brne	.+12     	; 0x1468 <fputc+0x48>
    145c:	8e 81       	ldd	r24, Y+6	; 0x06
    145e:	9f 81       	ldd	r25, Y+7	; 0x07
    1460:	01 96       	adiw	r24, 0x01	; 1
    1462:	9f 83       	std	Y+7, r25	; 0x07
    1464:	8e 83       	std	Y+6, r24	; 0x06
    1466:	02 c0       	rjmp	.+4      	; 0x146c <fputc+0x4c>
    1468:	0f ef       	ldi	r16, 0xFF	; 255
    146a:	1f ef       	ldi	r17, 0xFF	; 255
    146c:	c8 01       	movw	r24, r16
    146e:	df 91       	pop	r29
    1470:	cf 91       	pop	r28
    1472:	1f 91       	pop	r17
    1474:	0f 91       	pop	r16
    1476:	08 95       	ret

00001478 <printf_P>:
    1478:	df 93       	push	r29
    147a:	cf 93       	push	r28
    147c:	cd b7       	in	r28, 0x3d	; 61
    147e:	de b7       	in	r29, 0x3e	; 62
    1480:	fe 01       	movw	r30, r28
    1482:	35 96       	adiw	r30, 0x05	; 5
    1484:	61 91       	ld	r22, Z+
    1486:	71 91       	ld	r23, Z+
    1488:	a0 91 49 01 	lds	r26, 0x0149
    148c:	b0 91 4a 01 	lds	r27, 0x014A
    1490:	13 96       	adiw	r26, 0x03	; 3
    1492:	8c 91       	ld	r24, X
    1494:	13 97       	sbiw	r26, 0x03	; 3
    1496:	88 60       	ori	r24, 0x08	; 8
    1498:	13 96       	adiw	r26, 0x03	; 3
    149a:	8c 93       	st	X, r24
    149c:	80 91 49 01 	lds	r24, 0x0149
    14a0:	90 91 4a 01 	lds	r25, 0x014A
    14a4:	af 01       	movw	r20, r30
    14a6:	3f d0       	rcall	.+126    	; 0x1526 <vfprintf>
    14a8:	e0 91 49 01 	lds	r30, 0x0149
    14ac:	f0 91 4a 01 	lds	r31, 0x014A
    14b0:	23 81       	ldd	r18, Z+3	; 0x03
    14b2:	27 7f       	andi	r18, 0xF7	; 247
    14b4:	23 83       	std	Z+3, r18	; 0x03
    14b6:	cf 91       	pop	r28
    14b8:	df 91       	pop	r29
    14ba:	08 95       	ret

000014bc <puts_P>:
    14bc:	0f 93       	push	r16
    14be:	1f 93       	push	r17
    14c0:	cf 93       	push	r28
    14c2:	df 93       	push	r29
    14c4:	ec 01       	movw	r28, r24
    14c6:	e0 91 49 01 	lds	r30, 0x0149
    14ca:	f0 91 4a 01 	lds	r31, 0x014A
    14ce:	83 81       	ldd	r24, Z+3	; 0x03
    14d0:	81 ff       	sbrs	r24, 1
    14d2:	21 c0       	rjmp	.+66     	; 0x1516 <puts_P+0x5a>
    14d4:	00 e0       	ldi	r16, 0x00	; 0
    14d6:	10 e0       	ldi	r17, 0x00	; 0
    14d8:	0e c0       	rjmp	.+28     	; 0x14f6 <puts_P+0x3a>
    14da:	e0 91 49 01 	lds	r30, 0x0149
    14de:	f0 91 4a 01 	lds	r31, 0x014A
    14e2:	20 85       	ldd	r18, Z+8	; 0x08
    14e4:	31 85       	ldd	r19, Z+9	; 0x09
    14e6:	bf 01       	movw	r22, r30
    14e8:	f9 01       	movw	r30, r18
    14ea:	09 95       	icall
    14ec:	89 2b       	or	r24, r25
    14ee:	11 f0       	breq	.+4      	; 0x14f4 <puts_P+0x38>
    14f0:	0f ef       	ldi	r16, 0xFF	; 255
    14f2:	1f ef       	ldi	r17, 0xFF	; 255
    14f4:	21 96       	adiw	r28, 0x01	; 1
    14f6:	fe 01       	movw	r30, r28
    14f8:	84 91       	lpm	r24, Z+
    14fa:	88 23       	and	r24, r24
    14fc:	71 f7       	brne	.-36     	; 0x14da <puts_P+0x1e>
    14fe:	e0 91 49 01 	lds	r30, 0x0149
    1502:	f0 91 4a 01 	lds	r31, 0x014A
    1506:	20 85       	ldd	r18, Z+8	; 0x08
    1508:	31 85       	ldd	r19, Z+9	; 0x09
    150a:	8a e0       	ldi	r24, 0x0A	; 10
    150c:	bf 01       	movw	r22, r30
    150e:	f9 01       	movw	r30, r18
    1510:	09 95       	icall
    1512:	89 2b       	or	r24, r25
    1514:	11 f0       	breq	.+4      	; 0x151a <puts_P+0x5e>
    1516:	0f ef       	ldi	r16, 0xFF	; 255
    1518:	1f ef       	ldi	r17, 0xFF	; 255
    151a:	c8 01       	movw	r24, r16
    151c:	df 91       	pop	r29
    151e:	cf 91       	pop	r28
    1520:	1f 91       	pop	r17
    1522:	0f 91       	pop	r16
    1524:	08 95       	ret

00001526 <vfprintf>:
    1526:	2f 92       	push	r2
    1528:	3f 92       	push	r3
    152a:	4f 92       	push	r4
    152c:	5f 92       	push	r5
    152e:	6f 92       	push	r6
    1530:	7f 92       	push	r7
    1532:	8f 92       	push	r8
    1534:	9f 92       	push	r9
    1536:	af 92       	push	r10
    1538:	bf 92       	push	r11
    153a:	cf 92       	push	r12
    153c:	df 92       	push	r13
    153e:	ef 92       	push	r14
    1540:	ff 92       	push	r15
    1542:	0f 93       	push	r16
    1544:	1f 93       	push	r17
    1546:	df 93       	push	r29
    1548:	cf 93       	push	r28
    154a:	cd b7       	in	r28, 0x3d	; 61
    154c:	de b7       	in	r29, 0x3e	; 62
    154e:	2b 97       	sbiw	r28, 0x0b	; 11
    1550:	0f b6       	in	r0, 0x3f	; 63
    1552:	f8 94       	cli
    1554:	de bf       	out	0x3e, r29	; 62
    1556:	0f be       	out	0x3f, r0	; 63
    1558:	cd bf       	out	0x3d, r28	; 61
    155a:	3c 01       	movw	r6, r24
    155c:	2b 01       	movw	r4, r22
    155e:	5a 01       	movw	r10, r20
    1560:	fc 01       	movw	r30, r24
    1562:	17 82       	std	Z+7, r1	; 0x07
    1564:	16 82       	std	Z+6, r1	; 0x06
    1566:	83 81       	ldd	r24, Z+3	; 0x03
    1568:	81 fd       	sbrc	r24, 1
    156a:	03 c0       	rjmp	.+6      	; 0x1572 <vfprintf+0x4c>
    156c:	6f ef       	ldi	r22, 0xFF	; 255
    156e:	7f ef       	ldi	r23, 0xFF	; 255
    1570:	b9 c1       	rjmp	.+882    	; 0x18e4 <vfprintf+0x3be>
    1572:	9a e0       	ldi	r25, 0x0A	; 10
    1574:	89 2e       	mov	r8, r25
    1576:	1e 01       	movw	r2, r28
    1578:	08 94       	sec
    157a:	21 1c       	adc	r2, r1
    157c:	31 1c       	adc	r3, r1
    157e:	f3 01       	movw	r30, r6
    1580:	23 81       	ldd	r18, Z+3	; 0x03
    1582:	f2 01       	movw	r30, r4
    1584:	23 fd       	sbrc	r18, 3
    1586:	85 91       	lpm	r24, Z+
    1588:	23 ff       	sbrs	r18, 3
    158a:	81 91       	ld	r24, Z+
    158c:	2f 01       	movw	r4, r30
    158e:	88 23       	and	r24, r24
    1590:	09 f4       	brne	.+2      	; 0x1594 <vfprintf+0x6e>
    1592:	a5 c1       	rjmp	.+842    	; 0x18de <vfprintf+0x3b8>
    1594:	85 32       	cpi	r24, 0x25	; 37
    1596:	39 f4       	brne	.+14     	; 0x15a6 <vfprintf+0x80>
    1598:	23 fd       	sbrc	r18, 3
    159a:	85 91       	lpm	r24, Z+
    159c:	23 ff       	sbrs	r18, 3
    159e:	81 91       	ld	r24, Z+
    15a0:	2f 01       	movw	r4, r30
    15a2:	85 32       	cpi	r24, 0x25	; 37
    15a4:	21 f4       	brne	.+8      	; 0x15ae <vfprintf+0x88>
    15a6:	90 e0       	ldi	r25, 0x00	; 0
    15a8:	b3 01       	movw	r22, r6
    15aa:	3a df       	rcall	.-396    	; 0x1420 <fputc>
    15ac:	e8 cf       	rjmp	.-48     	; 0x157e <vfprintf+0x58>
    15ae:	98 2f       	mov	r25, r24
    15b0:	ff 24       	eor	r15, r15
    15b2:	ee 24       	eor	r14, r14
    15b4:	99 24       	eor	r9, r9
    15b6:	ff e1       	ldi	r31, 0x1F	; 31
    15b8:	ff 15       	cp	r31, r15
    15ba:	d0 f0       	brcs	.+52     	; 0x15f0 <vfprintf+0xca>
    15bc:	9b 32       	cpi	r25, 0x2B	; 43
    15be:	69 f0       	breq	.+26     	; 0x15da <vfprintf+0xb4>
    15c0:	9c 32       	cpi	r25, 0x2C	; 44
    15c2:	28 f4       	brcc	.+10     	; 0x15ce <vfprintf+0xa8>
    15c4:	90 32       	cpi	r25, 0x20	; 32
    15c6:	59 f0       	breq	.+22     	; 0x15de <vfprintf+0xb8>
    15c8:	93 32       	cpi	r25, 0x23	; 35
    15ca:	91 f4       	brne	.+36     	; 0x15f0 <vfprintf+0xca>
    15cc:	0e c0       	rjmp	.+28     	; 0x15ea <vfprintf+0xc4>
    15ce:	9d 32       	cpi	r25, 0x2D	; 45
    15d0:	49 f0       	breq	.+18     	; 0x15e4 <vfprintf+0xbe>
    15d2:	90 33       	cpi	r25, 0x30	; 48
    15d4:	69 f4       	brne	.+26     	; 0x15f0 <vfprintf+0xca>
    15d6:	41 e0       	ldi	r20, 0x01	; 1
    15d8:	24 c0       	rjmp	.+72     	; 0x1622 <vfprintf+0xfc>
    15da:	52 e0       	ldi	r21, 0x02	; 2
    15dc:	f5 2a       	or	r15, r21
    15de:	84 e0       	ldi	r24, 0x04	; 4
    15e0:	f8 2a       	or	r15, r24
    15e2:	28 c0       	rjmp	.+80     	; 0x1634 <vfprintf+0x10e>
    15e4:	98 e0       	ldi	r25, 0x08	; 8
    15e6:	f9 2a       	or	r15, r25
    15e8:	25 c0       	rjmp	.+74     	; 0x1634 <vfprintf+0x10e>
    15ea:	e0 e1       	ldi	r30, 0x10	; 16
    15ec:	fe 2a       	or	r15, r30
    15ee:	22 c0       	rjmp	.+68     	; 0x1634 <vfprintf+0x10e>
    15f0:	f7 fc       	sbrc	r15, 7
    15f2:	29 c0       	rjmp	.+82     	; 0x1646 <vfprintf+0x120>
    15f4:	89 2f       	mov	r24, r25
    15f6:	80 53       	subi	r24, 0x30	; 48
    15f8:	8a 30       	cpi	r24, 0x0A	; 10
    15fa:	70 f4       	brcc	.+28     	; 0x1618 <vfprintf+0xf2>
    15fc:	f6 fe       	sbrs	r15, 6
    15fe:	05 c0       	rjmp	.+10     	; 0x160a <vfprintf+0xe4>
    1600:	98 9c       	mul	r9, r8
    1602:	90 2c       	mov	r9, r0
    1604:	11 24       	eor	r1, r1
    1606:	98 0e       	add	r9, r24
    1608:	15 c0       	rjmp	.+42     	; 0x1634 <vfprintf+0x10e>
    160a:	e8 9c       	mul	r14, r8
    160c:	e0 2c       	mov	r14, r0
    160e:	11 24       	eor	r1, r1
    1610:	e8 0e       	add	r14, r24
    1612:	f0 e2       	ldi	r31, 0x20	; 32
    1614:	ff 2a       	or	r15, r31
    1616:	0e c0       	rjmp	.+28     	; 0x1634 <vfprintf+0x10e>
    1618:	9e 32       	cpi	r25, 0x2E	; 46
    161a:	29 f4       	brne	.+10     	; 0x1626 <vfprintf+0x100>
    161c:	f6 fc       	sbrc	r15, 6
    161e:	5f c1       	rjmp	.+702    	; 0x18de <vfprintf+0x3b8>
    1620:	40 e4       	ldi	r20, 0x40	; 64
    1622:	f4 2a       	or	r15, r20
    1624:	07 c0       	rjmp	.+14     	; 0x1634 <vfprintf+0x10e>
    1626:	9c 36       	cpi	r25, 0x6C	; 108
    1628:	19 f4       	brne	.+6      	; 0x1630 <vfprintf+0x10a>
    162a:	50 e8       	ldi	r21, 0x80	; 128
    162c:	f5 2a       	or	r15, r21
    162e:	02 c0       	rjmp	.+4      	; 0x1634 <vfprintf+0x10e>
    1630:	98 36       	cpi	r25, 0x68	; 104
    1632:	49 f4       	brne	.+18     	; 0x1646 <vfprintf+0x120>
    1634:	f2 01       	movw	r30, r4
    1636:	23 fd       	sbrc	r18, 3
    1638:	95 91       	lpm	r25, Z+
    163a:	23 ff       	sbrs	r18, 3
    163c:	91 91       	ld	r25, Z+
    163e:	2f 01       	movw	r4, r30
    1640:	99 23       	and	r25, r25
    1642:	09 f0       	breq	.+2      	; 0x1646 <vfprintf+0x120>
    1644:	b8 cf       	rjmp	.-144    	; 0x15b6 <vfprintf+0x90>
    1646:	89 2f       	mov	r24, r25
    1648:	85 54       	subi	r24, 0x45	; 69
    164a:	83 30       	cpi	r24, 0x03	; 3
    164c:	18 f0       	brcs	.+6      	; 0x1654 <vfprintf+0x12e>
    164e:	80 52       	subi	r24, 0x20	; 32
    1650:	83 30       	cpi	r24, 0x03	; 3
    1652:	38 f4       	brcc	.+14     	; 0x1662 <vfprintf+0x13c>
    1654:	44 e0       	ldi	r20, 0x04	; 4
    1656:	50 e0       	ldi	r21, 0x00	; 0
    1658:	a4 0e       	add	r10, r20
    165a:	b5 1e       	adc	r11, r21
    165c:	5f e3       	ldi	r21, 0x3F	; 63
    165e:	59 83       	std	Y+1, r21	; 0x01
    1660:	0f c0       	rjmp	.+30     	; 0x1680 <vfprintf+0x15a>
    1662:	93 36       	cpi	r25, 0x63	; 99
    1664:	31 f0       	breq	.+12     	; 0x1672 <vfprintf+0x14c>
    1666:	93 37       	cpi	r25, 0x73	; 115
    1668:	79 f0       	breq	.+30     	; 0x1688 <vfprintf+0x162>
    166a:	93 35       	cpi	r25, 0x53	; 83
    166c:	09 f0       	breq	.+2      	; 0x1670 <vfprintf+0x14a>
    166e:	52 c0       	rjmp	.+164    	; 0x1714 <vfprintf+0x1ee>
    1670:	1f c0       	rjmp	.+62     	; 0x16b0 <vfprintf+0x18a>
    1672:	f5 01       	movw	r30, r10
    1674:	80 81       	ld	r24, Z
    1676:	89 83       	std	Y+1, r24	; 0x01
    1678:	42 e0       	ldi	r20, 0x02	; 2
    167a:	50 e0       	ldi	r21, 0x00	; 0
    167c:	a4 0e       	add	r10, r20
    167e:	b5 1e       	adc	r11, r21
    1680:	61 01       	movw	r12, r2
    1682:	01 e0       	ldi	r16, 0x01	; 1
    1684:	10 e0       	ldi	r17, 0x00	; 0
    1686:	11 c0       	rjmp	.+34     	; 0x16aa <vfprintf+0x184>
    1688:	f5 01       	movw	r30, r10
    168a:	c0 80       	ld	r12, Z
    168c:	d1 80       	ldd	r13, Z+1	; 0x01
    168e:	f6 fc       	sbrc	r15, 6
    1690:	03 c0       	rjmp	.+6      	; 0x1698 <vfprintf+0x172>
    1692:	6f ef       	ldi	r22, 0xFF	; 255
    1694:	7f ef       	ldi	r23, 0xFF	; 255
    1696:	02 c0       	rjmp	.+4      	; 0x169c <vfprintf+0x176>
    1698:	69 2d       	mov	r22, r9
    169a:	70 e0       	ldi	r23, 0x00	; 0
    169c:	42 e0       	ldi	r20, 0x02	; 2
    169e:	50 e0       	ldi	r21, 0x00	; 0
    16a0:	a4 0e       	add	r10, r20
    16a2:	b5 1e       	adc	r11, r21
    16a4:	c6 01       	movw	r24, r12
    16a6:	43 d1       	rcall	.+646    	; 0x192e <strnlen>
    16a8:	8c 01       	movw	r16, r24
    16aa:	5f e7       	ldi	r21, 0x7F	; 127
    16ac:	f5 22       	and	r15, r21
    16ae:	13 c0       	rjmp	.+38     	; 0x16d6 <vfprintf+0x1b0>
    16b0:	f5 01       	movw	r30, r10
    16b2:	c0 80       	ld	r12, Z
    16b4:	d1 80       	ldd	r13, Z+1	; 0x01
    16b6:	f6 fc       	sbrc	r15, 6
    16b8:	03 c0       	rjmp	.+6      	; 0x16c0 <vfprintf+0x19a>
    16ba:	6f ef       	ldi	r22, 0xFF	; 255
    16bc:	7f ef       	ldi	r23, 0xFF	; 255
    16be:	02 c0       	rjmp	.+4      	; 0x16c4 <vfprintf+0x19e>
    16c0:	69 2d       	mov	r22, r9
    16c2:	70 e0       	ldi	r23, 0x00	; 0
    16c4:	42 e0       	ldi	r20, 0x02	; 2
    16c6:	50 e0       	ldi	r21, 0x00	; 0
    16c8:	a4 0e       	add	r10, r20
    16ca:	b5 1e       	adc	r11, r21
    16cc:	c6 01       	movw	r24, r12
    16ce:	24 d1       	rcall	.+584    	; 0x1918 <strnlen_P>
    16d0:	8c 01       	movw	r16, r24
    16d2:	50 e8       	ldi	r21, 0x80	; 128
    16d4:	f5 2a       	or	r15, r21
    16d6:	f3 fe       	sbrs	r15, 3
    16d8:	06 c0       	rjmp	.+12     	; 0x16e6 <vfprintf+0x1c0>
    16da:	18 c0       	rjmp	.+48     	; 0x170c <vfprintf+0x1e6>
    16dc:	80 e2       	ldi	r24, 0x20	; 32
    16de:	90 e0       	ldi	r25, 0x00	; 0
    16e0:	b3 01       	movw	r22, r6
    16e2:	9e de       	rcall	.-708    	; 0x1420 <fputc>
    16e4:	ea 94       	dec	r14
    16e6:	8e 2d       	mov	r24, r14
    16e8:	90 e0       	ldi	r25, 0x00	; 0
    16ea:	08 17       	cp	r16, r24
    16ec:	19 07       	cpc	r17, r25
    16ee:	b0 f3       	brcs	.-20     	; 0x16dc <vfprintf+0x1b6>
    16f0:	0d c0       	rjmp	.+26     	; 0x170c <vfprintf+0x1e6>
    16f2:	f6 01       	movw	r30, r12
    16f4:	f7 fc       	sbrc	r15, 7
    16f6:	85 91       	lpm	r24, Z+
    16f8:	f7 fe       	sbrs	r15, 7
    16fa:	81 91       	ld	r24, Z+
    16fc:	6f 01       	movw	r12, r30
    16fe:	90 e0       	ldi	r25, 0x00	; 0
    1700:	b3 01       	movw	r22, r6
    1702:	8e de       	rcall	.-740    	; 0x1420 <fputc>
    1704:	e1 10       	cpse	r14, r1
    1706:	ea 94       	dec	r14
    1708:	01 50       	subi	r16, 0x01	; 1
    170a:	10 40       	sbci	r17, 0x00	; 0
    170c:	01 15       	cp	r16, r1
    170e:	11 05       	cpc	r17, r1
    1710:	81 f7       	brne	.-32     	; 0x16f2 <vfprintf+0x1cc>
    1712:	e2 c0       	rjmp	.+452    	; 0x18d8 <vfprintf+0x3b2>
    1714:	94 36       	cpi	r25, 0x64	; 100
    1716:	11 f0       	breq	.+4      	; 0x171c <vfprintf+0x1f6>
    1718:	99 36       	cpi	r25, 0x69	; 105
    171a:	61 f5       	brne	.+88     	; 0x1774 <vfprintf+0x24e>
    171c:	f7 fe       	sbrs	r15, 7
    171e:	08 c0       	rjmp	.+16     	; 0x1730 <vfprintf+0x20a>
    1720:	f5 01       	movw	r30, r10
    1722:	20 81       	ld	r18, Z
    1724:	31 81       	ldd	r19, Z+1	; 0x01
    1726:	42 81       	ldd	r20, Z+2	; 0x02
    1728:	53 81       	ldd	r21, Z+3	; 0x03
    172a:	84 e0       	ldi	r24, 0x04	; 4
    172c:	90 e0       	ldi	r25, 0x00	; 0
    172e:	0a c0       	rjmp	.+20     	; 0x1744 <vfprintf+0x21e>
    1730:	f5 01       	movw	r30, r10
    1732:	80 81       	ld	r24, Z
    1734:	91 81       	ldd	r25, Z+1	; 0x01
    1736:	9c 01       	movw	r18, r24
    1738:	44 27       	eor	r20, r20
    173a:	37 fd       	sbrc	r19, 7
    173c:	40 95       	com	r20
    173e:	54 2f       	mov	r21, r20
    1740:	82 e0       	ldi	r24, 0x02	; 2
    1742:	90 e0       	ldi	r25, 0x00	; 0
    1744:	a8 0e       	add	r10, r24
    1746:	b9 1e       	adc	r11, r25
    1748:	9f e6       	ldi	r25, 0x6F	; 111
    174a:	f9 22       	and	r15, r25
    174c:	57 ff       	sbrs	r21, 7
    174e:	09 c0       	rjmp	.+18     	; 0x1762 <vfprintf+0x23c>
    1750:	50 95       	com	r21
    1752:	40 95       	com	r20
    1754:	30 95       	com	r19
    1756:	21 95       	neg	r18
    1758:	3f 4f       	sbci	r19, 0xFF	; 255
    175a:	4f 4f       	sbci	r20, 0xFF	; 255
    175c:	5f 4f       	sbci	r21, 0xFF	; 255
    175e:	e0 e8       	ldi	r30, 0x80	; 128
    1760:	fe 2a       	or	r15, r30
    1762:	ca 01       	movw	r24, r20
    1764:	b9 01       	movw	r22, r18
    1766:	a1 01       	movw	r20, r2
    1768:	2a e0       	ldi	r18, 0x0A	; 10
    176a:	30 e0       	ldi	r19, 0x00	; 0
    176c:	eb d0       	rcall	.+470    	; 0x1944 <__ultoa_invert>
    176e:	d8 2e       	mov	r13, r24
    1770:	d2 18       	sub	r13, r2
    1772:	3f c0       	rjmp	.+126    	; 0x17f2 <vfprintf+0x2cc>
    1774:	95 37       	cpi	r25, 0x75	; 117
    1776:	29 f4       	brne	.+10     	; 0x1782 <vfprintf+0x25c>
    1778:	1f 2d       	mov	r17, r15
    177a:	1f 7e       	andi	r17, 0xEF	; 239
    177c:	2a e0       	ldi	r18, 0x0A	; 10
    177e:	30 e0       	ldi	r19, 0x00	; 0
    1780:	1d c0       	rjmp	.+58     	; 0x17bc <vfprintf+0x296>
    1782:	1f 2d       	mov	r17, r15
    1784:	19 7f       	andi	r17, 0xF9	; 249
    1786:	9f 36       	cpi	r25, 0x6F	; 111
    1788:	61 f0       	breq	.+24     	; 0x17a2 <vfprintf+0x27c>
    178a:	90 37       	cpi	r25, 0x70	; 112
    178c:	20 f4       	brcc	.+8      	; 0x1796 <vfprintf+0x270>
    178e:	98 35       	cpi	r25, 0x58	; 88
    1790:	09 f0       	breq	.+2      	; 0x1794 <vfprintf+0x26e>
    1792:	a5 c0       	rjmp	.+330    	; 0x18de <vfprintf+0x3b8>
    1794:	0f c0       	rjmp	.+30     	; 0x17b4 <vfprintf+0x28e>
    1796:	90 37       	cpi	r25, 0x70	; 112
    1798:	39 f0       	breq	.+14     	; 0x17a8 <vfprintf+0x282>
    179a:	98 37       	cpi	r25, 0x78	; 120
    179c:	09 f0       	breq	.+2      	; 0x17a0 <vfprintf+0x27a>
    179e:	9f c0       	rjmp	.+318    	; 0x18de <vfprintf+0x3b8>
    17a0:	04 c0       	rjmp	.+8      	; 0x17aa <vfprintf+0x284>
    17a2:	28 e0       	ldi	r18, 0x08	; 8
    17a4:	30 e0       	ldi	r19, 0x00	; 0
    17a6:	0a c0       	rjmp	.+20     	; 0x17bc <vfprintf+0x296>
    17a8:	10 61       	ori	r17, 0x10	; 16
    17aa:	14 fd       	sbrc	r17, 4
    17ac:	14 60       	ori	r17, 0x04	; 4
    17ae:	20 e1       	ldi	r18, 0x10	; 16
    17b0:	30 e0       	ldi	r19, 0x00	; 0
    17b2:	04 c0       	rjmp	.+8      	; 0x17bc <vfprintf+0x296>
    17b4:	14 fd       	sbrc	r17, 4
    17b6:	16 60       	ori	r17, 0x06	; 6
    17b8:	20 e1       	ldi	r18, 0x10	; 16
    17ba:	32 e0       	ldi	r19, 0x02	; 2
    17bc:	17 ff       	sbrs	r17, 7
    17be:	08 c0       	rjmp	.+16     	; 0x17d0 <vfprintf+0x2aa>
    17c0:	f5 01       	movw	r30, r10
    17c2:	60 81       	ld	r22, Z
    17c4:	71 81       	ldd	r23, Z+1	; 0x01
    17c6:	82 81       	ldd	r24, Z+2	; 0x02
    17c8:	93 81       	ldd	r25, Z+3	; 0x03
    17ca:	44 e0       	ldi	r20, 0x04	; 4
    17cc:	50 e0       	ldi	r21, 0x00	; 0
    17ce:	08 c0       	rjmp	.+16     	; 0x17e0 <vfprintf+0x2ba>
    17d0:	f5 01       	movw	r30, r10
    17d2:	80 81       	ld	r24, Z
    17d4:	91 81       	ldd	r25, Z+1	; 0x01
    17d6:	bc 01       	movw	r22, r24
    17d8:	80 e0       	ldi	r24, 0x00	; 0
    17da:	90 e0       	ldi	r25, 0x00	; 0
    17dc:	42 e0       	ldi	r20, 0x02	; 2
    17de:	50 e0       	ldi	r21, 0x00	; 0
    17e0:	a4 0e       	add	r10, r20
    17e2:	b5 1e       	adc	r11, r21
    17e4:	a1 01       	movw	r20, r2
    17e6:	ae d0       	rcall	.+348    	; 0x1944 <__ultoa_invert>
    17e8:	d8 2e       	mov	r13, r24
    17ea:	d2 18       	sub	r13, r2
    17ec:	8f e7       	ldi	r24, 0x7F	; 127
    17ee:	f8 2e       	mov	r15, r24
    17f0:	f1 22       	and	r15, r17
    17f2:	f6 fe       	sbrs	r15, 6
    17f4:	0b c0       	rjmp	.+22     	; 0x180c <vfprintf+0x2e6>
    17f6:	5e ef       	ldi	r21, 0xFE	; 254
    17f8:	f5 22       	and	r15, r21
    17fa:	d9 14       	cp	r13, r9
    17fc:	38 f4       	brcc	.+14     	; 0x180c <vfprintf+0x2e6>
    17fe:	f4 fe       	sbrs	r15, 4
    1800:	07 c0       	rjmp	.+14     	; 0x1810 <vfprintf+0x2ea>
    1802:	f2 fc       	sbrc	r15, 2
    1804:	05 c0       	rjmp	.+10     	; 0x1810 <vfprintf+0x2ea>
    1806:	8f ee       	ldi	r24, 0xEF	; 239
    1808:	f8 22       	and	r15, r24
    180a:	02 c0       	rjmp	.+4      	; 0x1810 <vfprintf+0x2ea>
    180c:	1d 2d       	mov	r17, r13
    180e:	01 c0       	rjmp	.+2      	; 0x1812 <vfprintf+0x2ec>
    1810:	19 2d       	mov	r17, r9
    1812:	f4 fe       	sbrs	r15, 4
    1814:	0d c0       	rjmp	.+26     	; 0x1830 <vfprintf+0x30a>
    1816:	fe 01       	movw	r30, r28
    1818:	ed 0d       	add	r30, r13
    181a:	f1 1d       	adc	r31, r1
    181c:	80 81       	ld	r24, Z
    181e:	80 33       	cpi	r24, 0x30	; 48
    1820:	19 f4       	brne	.+6      	; 0x1828 <vfprintf+0x302>
    1822:	99 ee       	ldi	r25, 0xE9	; 233
    1824:	f9 22       	and	r15, r25
    1826:	08 c0       	rjmp	.+16     	; 0x1838 <vfprintf+0x312>
    1828:	1f 5f       	subi	r17, 0xFF	; 255
    182a:	f2 fe       	sbrs	r15, 2
    182c:	05 c0       	rjmp	.+10     	; 0x1838 <vfprintf+0x312>
    182e:	03 c0       	rjmp	.+6      	; 0x1836 <vfprintf+0x310>
    1830:	8f 2d       	mov	r24, r15
    1832:	86 78       	andi	r24, 0x86	; 134
    1834:	09 f0       	breq	.+2      	; 0x1838 <vfprintf+0x312>
    1836:	1f 5f       	subi	r17, 0xFF	; 255
    1838:	0f 2d       	mov	r16, r15
    183a:	f3 fc       	sbrc	r15, 3
    183c:	13 c0       	rjmp	.+38     	; 0x1864 <vfprintf+0x33e>
    183e:	f0 fe       	sbrs	r15, 0
    1840:	0e c0       	rjmp	.+28     	; 0x185e <vfprintf+0x338>
    1842:	1e 15       	cp	r17, r14
    1844:	10 f0       	brcs	.+4      	; 0x184a <vfprintf+0x324>
    1846:	9d 2c       	mov	r9, r13
    1848:	0a c0       	rjmp	.+20     	; 0x185e <vfprintf+0x338>
    184a:	9d 2c       	mov	r9, r13
    184c:	9e 0c       	add	r9, r14
    184e:	91 1a       	sub	r9, r17
    1850:	1e 2d       	mov	r17, r14
    1852:	05 c0       	rjmp	.+10     	; 0x185e <vfprintf+0x338>
    1854:	80 e2       	ldi	r24, 0x20	; 32
    1856:	90 e0       	ldi	r25, 0x00	; 0
    1858:	b3 01       	movw	r22, r6
    185a:	e2 dd       	rcall	.-1084   	; 0x1420 <fputc>
    185c:	1f 5f       	subi	r17, 0xFF	; 255
    185e:	1e 15       	cp	r17, r14
    1860:	c8 f3       	brcs	.-14     	; 0x1854 <vfprintf+0x32e>
    1862:	04 c0       	rjmp	.+8      	; 0x186c <vfprintf+0x346>
    1864:	1e 15       	cp	r17, r14
    1866:	10 f4       	brcc	.+4      	; 0x186c <vfprintf+0x346>
    1868:	e1 1a       	sub	r14, r17
    186a:	01 c0       	rjmp	.+2      	; 0x186e <vfprintf+0x348>
    186c:	ee 24       	eor	r14, r14
    186e:	04 ff       	sbrs	r16, 4
    1870:	0e c0       	rjmp	.+28     	; 0x188e <vfprintf+0x368>
    1872:	80 e3       	ldi	r24, 0x30	; 48
    1874:	90 e0       	ldi	r25, 0x00	; 0
    1876:	b3 01       	movw	r22, r6
    1878:	d3 dd       	rcall	.-1114   	; 0x1420 <fputc>
    187a:	02 ff       	sbrs	r16, 2
    187c:	1b c0       	rjmp	.+54     	; 0x18b4 <vfprintf+0x38e>
    187e:	01 fd       	sbrc	r16, 1
    1880:	03 c0       	rjmp	.+6      	; 0x1888 <vfprintf+0x362>
    1882:	88 e7       	ldi	r24, 0x78	; 120
    1884:	90 e0       	ldi	r25, 0x00	; 0
    1886:	0e c0       	rjmp	.+28     	; 0x18a4 <vfprintf+0x37e>
    1888:	88 e5       	ldi	r24, 0x58	; 88
    188a:	90 e0       	ldi	r25, 0x00	; 0
    188c:	0b c0       	rjmp	.+22     	; 0x18a4 <vfprintf+0x37e>
    188e:	80 2f       	mov	r24, r16
    1890:	86 78       	andi	r24, 0x86	; 134
    1892:	81 f0       	breq	.+32     	; 0x18b4 <vfprintf+0x38e>
    1894:	01 ff       	sbrs	r16, 1
    1896:	02 c0       	rjmp	.+4      	; 0x189c <vfprintf+0x376>
    1898:	8b e2       	ldi	r24, 0x2B	; 43
    189a:	01 c0       	rjmp	.+2      	; 0x189e <vfprintf+0x378>
    189c:	80 e2       	ldi	r24, 0x20	; 32
    189e:	f7 fc       	sbrc	r15, 7
    18a0:	8d e2       	ldi	r24, 0x2D	; 45
    18a2:	90 e0       	ldi	r25, 0x00	; 0
    18a4:	b3 01       	movw	r22, r6
    18a6:	bc dd       	rcall	.-1160   	; 0x1420 <fputc>
    18a8:	05 c0       	rjmp	.+10     	; 0x18b4 <vfprintf+0x38e>
    18aa:	80 e3       	ldi	r24, 0x30	; 48
    18ac:	90 e0       	ldi	r25, 0x00	; 0
    18ae:	b3 01       	movw	r22, r6
    18b0:	b7 dd       	rcall	.-1170   	; 0x1420 <fputc>
    18b2:	9a 94       	dec	r9
    18b4:	d9 14       	cp	r13, r9
    18b6:	c8 f3       	brcs	.-14     	; 0x18aa <vfprintf+0x384>
    18b8:	da 94       	dec	r13
    18ba:	f1 01       	movw	r30, r2
    18bc:	ed 0d       	add	r30, r13
    18be:	f1 1d       	adc	r31, r1
    18c0:	80 81       	ld	r24, Z
    18c2:	90 e0       	ldi	r25, 0x00	; 0
    18c4:	b3 01       	movw	r22, r6
    18c6:	ac dd       	rcall	.-1192   	; 0x1420 <fputc>
    18c8:	dd 20       	and	r13, r13
    18ca:	b1 f7       	brne	.-20     	; 0x18b8 <vfprintf+0x392>
    18cc:	05 c0       	rjmp	.+10     	; 0x18d8 <vfprintf+0x3b2>
    18ce:	80 e2       	ldi	r24, 0x20	; 32
    18d0:	90 e0       	ldi	r25, 0x00	; 0
    18d2:	b3 01       	movw	r22, r6
    18d4:	a5 dd       	rcall	.-1206   	; 0x1420 <fputc>
    18d6:	ea 94       	dec	r14
    18d8:	ee 20       	and	r14, r14
    18da:	c9 f7       	brne	.-14     	; 0x18ce <vfprintf+0x3a8>
    18dc:	50 ce       	rjmp	.-864    	; 0x157e <vfprintf+0x58>
    18de:	f3 01       	movw	r30, r6
    18e0:	66 81       	ldd	r22, Z+6	; 0x06
    18e2:	77 81       	ldd	r23, Z+7	; 0x07
    18e4:	cb 01       	movw	r24, r22
    18e6:	2b 96       	adiw	r28, 0x0b	; 11
    18e8:	0f b6       	in	r0, 0x3f	; 63
    18ea:	f8 94       	cli
    18ec:	de bf       	out	0x3e, r29	; 62
    18ee:	0f be       	out	0x3f, r0	; 63
    18f0:	cd bf       	out	0x3d, r28	; 61
    18f2:	cf 91       	pop	r28
    18f4:	df 91       	pop	r29
    18f6:	1f 91       	pop	r17
    18f8:	0f 91       	pop	r16
    18fa:	ff 90       	pop	r15
    18fc:	ef 90       	pop	r14
    18fe:	df 90       	pop	r13
    1900:	cf 90       	pop	r12
    1902:	bf 90       	pop	r11
    1904:	af 90       	pop	r10
    1906:	9f 90       	pop	r9
    1908:	8f 90       	pop	r8
    190a:	7f 90       	pop	r7
    190c:	6f 90       	pop	r6
    190e:	5f 90       	pop	r5
    1910:	4f 90       	pop	r4
    1912:	3f 90       	pop	r3
    1914:	2f 90       	pop	r2
    1916:	08 95       	ret

00001918 <strnlen_P>:
    1918:	fc 01       	movw	r30, r24
    191a:	05 90       	lpm	r0, Z+
    191c:	61 50       	subi	r22, 0x01	; 1
    191e:	70 40       	sbci	r23, 0x00	; 0
    1920:	01 10       	cpse	r0, r1
    1922:	d8 f7       	brcc	.-10     	; 0x191a <strnlen_P+0x2>
    1924:	80 95       	com	r24
    1926:	90 95       	com	r25
    1928:	8e 0f       	add	r24, r30
    192a:	9f 1f       	adc	r25, r31
    192c:	08 95       	ret

0000192e <strnlen>:
    192e:	fc 01       	movw	r30, r24
    1930:	61 50       	subi	r22, 0x01	; 1
    1932:	70 40       	sbci	r23, 0x00	; 0
    1934:	01 90       	ld	r0, Z+
    1936:	01 10       	cpse	r0, r1
    1938:	d8 f7       	brcc	.-10     	; 0x1930 <strnlen+0x2>
    193a:	80 95       	com	r24
    193c:	90 95       	com	r25
    193e:	8e 0f       	add	r24, r30
    1940:	9f 1f       	adc	r25, r31
    1942:	08 95       	ret

00001944 <__ultoa_invert>:
    1944:	fa 01       	movw	r30, r20
    1946:	aa 27       	eor	r26, r26
    1948:	28 30       	cpi	r18, 0x08	; 8
    194a:	51 f1       	breq	.+84     	; 0x19a0 <__ultoa_invert+0x5c>
    194c:	20 31       	cpi	r18, 0x10	; 16
    194e:	81 f1       	breq	.+96     	; 0x19b0 <__ultoa_invert+0x6c>
    1950:	e8 94       	clt
    1952:	6f 93       	push	r22
    1954:	6e 7f       	andi	r22, 0xFE	; 254
    1956:	6e 5f       	subi	r22, 0xFE	; 254
    1958:	7f 4f       	sbci	r23, 0xFF	; 255
    195a:	8f 4f       	sbci	r24, 0xFF	; 255
    195c:	9f 4f       	sbci	r25, 0xFF	; 255
    195e:	af 4f       	sbci	r26, 0xFF	; 255
    1960:	b1 e0       	ldi	r27, 0x01	; 1
    1962:	3e d0       	rcall	.+124    	; 0x19e0 <__ultoa_invert+0x9c>
    1964:	b4 e0       	ldi	r27, 0x04	; 4
    1966:	3c d0       	rcall	.+120    	; 0x19e0 <__ultoa_invert+0x9c>
    1968:	67 0f       	add	r22, r23
    196a:	78 1f       	adc	r23, r24
    196c:	89 1f       	adc	r24, r25
    196e:	9a 1f       	adc	r25, r26
    1970:	a1 1d       	adc	r26, r1
    1972:	68 0f       	add	r22, r24
    1974:	79 1f       	adc	r23, r25
    1976:	8a 1f       	adc	r24, r26
    1978:	91 1d       	adc	r25, r1
    197a:	a1 1d       	adc	r26, r1
    197c:	6a 0f       	add	r22, r26
    197e:	71 1d       	adc	r23, r1
    1980:	81 1d       	adc	r24, r1
    1982:	91 1d       	adc	r25, r1
    1984:	a1 1d       	adc	r26, r1
    1986:	20 d0       	rcall	.+64     	; 0x19c8 <__ultoa_invert+0x84>
    1988:	09 f4       	brne	.+2      	; 0x198c <__ultoa_invert+0x48>
    198a:	68 94       	set
    198c:	3f 91       	pop	r19
    198e:	2a e0       	ldi	r18, 0x0A	; 10
    1990:	26 9f       	mul	r18, r22
    1992:	11 24       	eor	r1, r1
    1994:	30 19       	sub	r19, r0
    1996:	30 5d       	subi	r19, 0xD0	; 208
    1998:	31 93       	st	Z+, r19
    199a:	de f6       	brtc	.-74     	; 0x1952 <__ultoa_invert+0xe>
    199c:	cf 01       	movw	r24, r30
    199e:	08 95       	ret
    19a0:	46 2f       	mov	r20, r22
    19a2:	47 70       	andi	r20, 0x07	; 7
    19a4:	40 5d       	subi	r20, 0xD0	; 208
    19a6:	41 93       	st	Z+, r20
    19a8:	b3 e0       	ldi	r27, 0x03	; 3
    19aa:	0f d0       	rcall	.+30     	; 0x19ca <__ultoa_invert+0x86>
    19ac:	c9 f7       	brne	.-14     	; 0x19a0 <__ultoa_invert+0x5c>
    19ae:	f6 cf       	rjmp	.-20     	; 0x199c <__ultoa_invert+0x58>
    19b0:	46 2f       	mov	r20, r22
    19b2:	4f 70       	andi	r20, 0x0F	; 15
    19b4:	40 5d       	subi	r20, 0xD0	; 208
    19b6:	4a 33       	cpi	r20, 0x3A	; 58
    19b8:	18 f0       	brcs	.+6      	; 0x19c0 <__ultoa_invert+0x7c>
    19ba:	49 5d       	subi	r20, 0xD9	; 217
    19bc:	31 fd       	sbrc	r19, 1
    19be:	40 52       	subi	r20, 0x20	; 32
    19c0:	41 93       	st	Z+, r20
    19c2:	02 d0       	rcall	.+4      	; 0x19c8 <__ultoa_invert+0x84>
    19c4:	a9 f7       	brne	.-22     	; 0x19b0 <__ultoa_invert+0x6c>
    19c6:	ea cf       	rjmp	.-44     	; 0x199c <__ultoa_invert+0x58>
    19c8:	b4 e0       	ldi	r27, 0x04	; 4
    19ca:	a6 95       	lsr	r26
    19cc:	97 95       	ror	r25
    19ce:	87 95       	ror	r24
    19d0:	77 95       	ror	r23
    19d2:	67 95       	ror	r22
    19d4:	ba 95       	dec	r27
    19d6:	c9 f7       	brne	.-14     	; 0x19ca <__ultoa_invert+0x86>
    19d8:	00 97       	sbiw	r24, 0x00	; 0
    19da:	61 05       	cpc	r22, r1
    19dc:	71 05       	cpc	r23, r1
    19de:	08 95       	ret
    19e0:	9b 01       	movw	r18, r22
    19e2:	ac 01       	movw	r20, r24
    19e4:	0a 2e       	mov	r0, r26
    19e6:	06 94       	lsr	r0
    19e8:	57 95       	ror	r21
    19ea:	47 95       	ror	r20
    19ec:	37 95       	ror	r19
    19ee:	27 95       	ror	r18
    19f0:	ba 95       	dec	r27
    19f2:	c9 f7       	brne	.-14     	; 0x19e6 <__ultoa_invert+0xa2>
    19f4:	62 0f       	add	r22, r18
    19f6:	73 1f       	adc	r23, r19
    19f8:	84 1f       	adc	r24, r20
    19fa:	95 1f       	adc	r25, r21
    19fc:	a0 1d       	adc	r26, r0
    19fe:	08 95       	ret

00001a00 <_exit>:
    1a00:	f8 94       	cli

00001a02 <__stop_program>:
    1a02:	ff cf       	rjmp	.-2      	; 0x1a02 <__stop_program>
