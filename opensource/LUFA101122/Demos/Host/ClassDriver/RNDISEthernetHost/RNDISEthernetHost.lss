
RNDISEthernetHost.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000004a  00800100  0000204a  000020de  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000204a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000413  0080014a  0080014a  00002128  2**0
                  ALLOC
  3 .stab         00001014  00000000  00000000  00002128  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000315  00000000  00000000  0000313c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000006f8  00000000  00000000  00003451  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000ecb  00000000  00000000  00003b49  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000ae4a  00000000  00000000  00004a14  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00002bf8  00000000  00000000  0000f85e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00007669  00000000  00000000  00012456  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000ad0  00000000  00000000  00019ac0  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00004295  00000000  00000000  0001a590  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00004f76  00000000  00000000  0001e825  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000788  00000000  00000000  0002379b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:

	return USB_Host_SendControlRequest(Buffer);
}

uint8_t USB_Host_ClearPipeStall(const uint8_t EndpointNum)
{
       0:	65 c1       	rjmp	.+714    	; 0x2cc <__ctors_end>
{
	USB_GetNextDescriptorOfType(BytesRem, CurrConfigLoc, AfterType);

	if (*BytesRem)
	  USB_GetNextDescriptorOfType(BytesRem, CurrConfigLoc, Type);
}
       2:	00 00       	nop
			Length--;
		}
	}

	return PIPE_RWSTREAM_NoError;
}
       4:	81 c1       	rjmp	.+770    	; 0x308 <__bad_interrupt>
}

uint8_t RNDIS_Host_SendPacket(USB_ClassInfo_RNDIS_Host_t* const RNDISInterfaceInfo,
                              void* Buffer,
                              const uint16_t PacketLength)
{
       6:	00 00       	nop
       8:	7f c1       	rjmp	.+766    	; 0x308 <__bad_interrupt>
       a:	00 00       	nop
       c:	7d c1       	rjmp	.+762    	; 0x308 <__bad_interrupt>
       e:	00 00       	nop
      10:	7b c1       	rjmp	.+758    	; 0x308 <__bad_interrupt>
      12:	00 00       	nop
      14:	79 c1       	rjmp	.+754    	; 0x308 <__bad_interrupt>
      16:	00 00       	nop
      18:	77 c1       	rjmp	.+750    	; 0x308 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	75 c1       	rjmp	.+746    	; 0x308 <__bad_interrupt>
      1e:	00 00       	nop
      20:	73 c1       	rjmp	.+742    	; 0x308 <__bad_interrupt>
      22:	00 00       	nop
      24:	71 c1       	rjmp	.+738    	; 0x308 <__bad_interrupt>
      26:	00 00       	nop
      28:	56 c6       	rjmp	.+3244   	; 0xcd6 <__vector_10>
      2a:	00 00       	nop
      2c:	6d c1       	rjmp	.+730    	; 0x308 <__bad_interrupt>
      2e:	00 00       	nop
      30:	6b c1       	rjmp	.+726    	; 0x308 <__bad_interrupt>
      32:	00 00       	nop
      34:	69 c1       	rjmp	.+722    	; 0x308 <__bad_interrupt>
      36:	00 00       	nop
      38:	67 c1       	rjmp	.+718    	; 0x308 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	65 c1       	rjmp	.+714    	; 0x308 <__bad_interrupt>
      3e:	00 00       	nop
      40:	63 c1       	rjmp	.+710    	; 0x308 <__bad_interrupt>
      42:	00 00       	nop
      44:	61 c1       	rjmp	.+706    	; 0x308 <__bad_interrupt>
      46:	00 00       	nop
      48:	5f c1       	rjmp	.+702    	; 0x308 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	5d c1       	rjmp	.+698    	; 0x308 <__bad_interrupt>
      4e:	00 00       	nop
      50:	5b c1       	rjmp	.+694    	; 0x308 <__bad_interrupt>
      52:	00 00       	nop
      54:	59 c1       	rjmp	.+690    	; 0x308 <__bad_interrupt>
      56:	00 00       	nop
      58:	57 c1       	rjmp	.+686    	; 0x308 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	55 c1       	rjmp	.+682    	; 0x308 <__bad_interrupt>
      5e:	00 00       	nop
      60:	53 c1       	rjmp	.+678    	; 0x308 <__bad_interrupt>
      62:	00 00       	nop
      64:	51 c1       	rjmp	.+674    	; 0x308 <__bad_interrupt>
      66:	00 00       	nop
      68:	4f c1       	rjmp	.+670    	; 0x308 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	4d c1       	rjmp	.+666    	; 0x308 <__bad_interrupt>
      6e:	00 00       	nop
      70:	4b c1       	rjmp	.+662    	; 0x308 <__bad_interrupt>
      72:	00 00       	nop
      74:	49 c1       	rjmp	.+658    	; 0x308 <__bad_interrupt>
      76:	00 00       	nop
      78:	47 c1       	rjmp	.+654    	; 0x308 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	45 c1       	rjmp	.+650    	; 0x308 <__bad_interrupt>
      7e:	00 00       	nop
      80:	43 c1       	rjmp	.+646    	; 0x308 <__bad_interrupt>
      82:	00 00       	nop
      84:	41 c1       	rjmp	.+642    	; 0x308 <__bad_interrupt>
      86:	00 00       	nop
      88:	3f c1       	rjmp	.+638    	; 0x308 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	3d c1       	rjmp	.+634    	; 0x308 <__bad_interrupt>
      8e:	00 00       	nop
      90:	3b c1       	rjmp	.+630    	; 0x308 <__bad_interrupt>
      92:	00 00       	nop
      94:	39 c1       	rjmp	.+626    	; 0x308 <__bad_interrupt>
      96:	00 00       	nop

00000098 <__c.4185>:
      98:	1b 5b 33 31 6d 44 65 76 20 45 6e 75 6d 20 45 72     .[31mDev Enum Er
      a8:	72 6f 72 0d 0a 20 2d 2d 20 45 72 72 6f 72 20 43     ror.. -- Error C
      b8:	6f 64 65 20 25 64 0d 0a 20 2d 2d 20 53 75 62 20     ode %d.. -- Sub 
      c8:	45 72 72 6f 72 20 43 6f 64 65 20 25 64 0d 0a 20     Error Code %d.. 
      d8:	2d 2d 20 49 6e 20 53 74 61 74 65 20 25 64 0d 0a     -- In State %d..
      e8:	1b 5b 33 37 6d 00                                   .[37m.

000000ee <__c.4177>:
      ee:	1b 5b 33 31 6d 48 6f 73 74 20 4d 6f 64 65 20 45     .[31mHost Mode E
      fe:	72 72 6f 72 0d 0a 20 2d 2d 20 45 72 72 6f 72 20     rror.. -- Error 
     10e:	43 6f 64 65 20 25 64 0d 0a 1b 5b 33 37 6d 00        Code %d...[37m.

0000011d <__c.4169>:
     11d:	0d 0a 44 65 76 69 63 65 20 55 6e 61 74 74 61 63     ..Device Unattac
     12d:	68 65 64 2e 0d 0a 00                                hed....

00000134 <__c.4164>:
     134:	44 65 76 69 63 65 20 41 74 74 61 63 68 65 64 2e     Device Attached.
     144:	0d 0a 00                                            ...

00000147 <__c.4147>:
     147:	0d 0a 0d 0a 00                                      .....

0000014c <__c.4141>:
     14c:	2a 2a 2a 50 41 43 4b 45 54 20 28 53 69 7a 65 20     ***PACKET (Size 
     15c:	25 64 29 2a 2a 2a 0d 0a 00                          %d)***...

00000165 <__c.4120>:
     165:	52 4e 44 49 53 20 44 65 76 69 63 65 20 45 6e 75     RNDIS Device Enu
     175:	6d 65 72 61 74 65 64 2e 0d 0a 00                    merated....

00000180 <__c.4118>:
     180:	44 65 76 69 63 65 20 56 65 6e 64 6f 72 20 49 44     Device Vendor ID
     190:	3a 20 30 78 25 30 38 6c 58 0d 0a 00                 : 0x%08lX...

0000019c <__c.4116>:
     19c:	45 72 72 6f 72 20 47 65 74 74 69 6e 67 20 56 65     Error Getting Ve
     1ac:	6e 64 6f 72 20 49 44 2e 0d 0a 00                    ndor ID....

000001b7 <__c.4113>:
     1b7:	45 72 72 6f 72 20 53 65 74 74 69 6e 67 20 44 65     Error Setting De
     1c7:	76 69 63 65 20 50 61 63 6b 65 74 20 46 69 6c 74     vice Packet Filt
     1d7:	65 72 2e 0d 0a 00                                   er....

000001dd <__c.4110>:
     1dd:	44 65 76 69 63 65 20 4d 61 78 20 54 72 61 6e 73     Device Max Trans
     1ed:	66 65 72 20 53 69 7a 65 3a 20 25 6c 75 20 62 79     fer Size: %lu by
     1fd:	74 65 73 2e 0d 0a 00                                tes....

00000204 <__c.4108>:
     204:	45 72 72 6f 72 20 49 6e 69 74 69 61 6c 69 7a 69     Error Initializi
     214:	6e 67 20 44 65 76 69 63 65 2e 0d 0a 00              ng Device....

00000221 <__c.4106>:
     221:	45 72 72 6f 72 20 53 65 74 74 69 6e 67 20 44 65     Error Setting De
     231:	76 69 63 65 20 43 6f 6e 66 69 67 75 72 61 74 69     vice Configurati
     241:	6f 6e 2e 0d 0a 00                                   on....

00000247 <__c.4104>:
     247:	41 74 74 61 63 68 65 64 20 44 65 76 69 63 65 20     Attached Device 
     257:	4e 6f 74 20 61 20 56 61 6c 69 64 20 52 4e 44 49     Not a Valid RNDI
     267:	53 20 43 6c 61 73 73 20 44 65 76 69 63 65 2e 0d     S Class Device..
     277:	0a 00                                               ..

00000279 <__c.4101>:
     279:	45 72 72 6f 72 20 52 65 74 72 69 65 76 69 6e 67     Error Retrieving
     289:	20 43 6f 6e 66 69 67 75 72 61 74 69 6f 6e 20 44      Configuration D
     299:	65 73 63 72 69 70 74 6f 72 2e 0d 0a 00              escriptor....

000002a6 <__c.4096>:
     2a6:	1b 5b 33 36 6d 52 4e 44 49 53 20 48 6f 73 74 20     .[36mRNDIS Host 
     2b6:	44 65 6d 6f 20 72 75 6e 6e 69 6e 67 2e 0d 0a 1b     Demo running....
     2c6:	5b 33 37 6d 00 00                                   [37m..

000002cc <__ctors_end>:
     2cc:	11 24       	eor	r1, r1
     2ce:	1f be       	out	0x3f, r1	; 63
     2d0:	cf ef       	ldi	r28, 0xFF	; 255
     2d2:	d0 e2       	ldi	r29, 0x20	; 32
     2d4:	de bf       	out	0x3e, r29	; 62
     2d6:	cd bf       	out	0x3d, r28	; 61

000002d8 <__do_copy_data>:
     2d8:	11 e0       	ldi	r17, 0x01	; 1
     2da:	a0 e0       	ldi	r26, 0x00	; 0
     2dc:	b1 e0       	ldi	r27, 0x01	; 1
     2de:	ea e4       	ldi	r30, 0x4A	; 74
     2e0:	f0 e2       	ldi	r31, 0x20	; 32
     2e2:	00 e0       	ldi	r16, 0x00	; 0
     2e4:	0b bf       	out	0x3b, r16	; 59
     2e6:	02 c0       	rjmp	.+4      	; 0x2ec <__do_copy_data+0x14>
     2e8:	07 90       	elpm	r0, Z+
     2ea:	0d 92       	st	X+, r0
     2ec:	aa 34       	cpi	r26, 0x4A	; 74
     2ee:	b1 07       	cpc	r27, r17
     2f0:	d9 f7       	brne	.-10     	; 0x2e8 <__do_copy_data+0x10>

000002f2 <__do_clear_bss>:
     2f2:	15 e0       	ldi	r17, 0x05	; 5
     2f4:	aa e4       	ldi	r26, 0x4A	; 74
     2f6:	b1 e0       	ldi	r27, 0x01	; 1
     2f8:	01 c0       	rjmp	.+2      	; 0x2fc <.do_clear_bss_start>

000002fa <.do_clear_bss_loop>:
     2fa:	1d 92       	st	X+, r1

000002fc <.do_clear_bss_start>:
     2fc:	ad 35       	cpi	r26, 0x5D	; 93
     2fe:	b1 07       	cpc	r27, r17
     300:	e1 f7       	brne	.-8      	; 0x2fa <.do_clear_bss_loop>
     302:	06 d1       	rcall	.+524    	; 0x510 <main>
     304:	0c 94 23 10 	jmp	0x2046	; 0x2046 <_exit>

00000308 <__bad_interrupt>:
     308:	7b ce       	rjmp	.-778    	; 0x0 <__vectors>

0000030a <EVENT_USB_Host_DeviceEnumerationComplete>:
				PORTD &= ~LEDMask;
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
			{
				PORTD = ((PORTD & ~LEDS_ALL_LEDS) | LEDMask);
     30a:	8b b1       	in	r24, 0x0b	; 11
     30c:	8f 70       	andi	r24, 0x0F	; 15
     30e:	80 66       	ori	r24, 0x60	; 96
     310:	8b b9       	out	0x0b, r24	; 11
 *  enumerated by the host and is now ready to be used by the application.
 */
void EVENT_USB_Host_DeviceEnumerationComplete(void)
{
	LEDs_SetAllLEDs(LEDMASK_USB_READY);
}
     312:	08 95       	ret

00000314 <EVENT_USB_Host_DeviceEnumerationFailed>:
 *  enumerating an attached USB device.
 */
void EVENT_USB_Host_DeviceEnumerationFailed(const uint8_t ErrorCode,
                                            const uint8_t SubErrorCode)
{
	printf_P(PSTR(ESC_FG_RED "Dev Enum Error\r\n"
     314:	90 91 56 05 	lds	r25, 0x0556
     318:	2d b7       	in	r18, 0x3d	; 61
     31a:	3e b7       	in	r19, 0x3e	; 62
     31c:	28 50       	subi	r18, 0x08	; 8
     31e:	30 40       	sbci	r19, 0x00	; 0
     320:	0f b6       	in	r0, 0x3f	; 63
     322:	f8 94       	cli
     324:	3e bf       	out	0x3e, r19	; 62
     326:	0f be       	out	0x3f, r0	; 63
     328:	2d bf       	out	0x3d, r18	; 61
     32a:	ed b7       	in	r30, 0x3d	; 61
     32c:	fe b7       	in	r31, 0x3e	; 62
     32e:	31 96       	adiw	r30, 0x01	; 1
     330:	28 e9       	ldi	r18, 0x98	; 152
     332:	30 e0       	ldi	r19, 0x00	; 0
     334:	ad b7       	in	r26, 0x3d	; 61
     336:	be b7       	in	r27, 0x3e	; 62
     338:	12 96       	adiw	r26, 0x02	; 2
     33a:	3c 93       	st	X, r19
     33c:	2e 93       	st	-X, r18
     33e:	11 97       	sbiw	r26, 0x01	; 1
     340:	82 83       	std	Z+2, r24	; 0x02
     342:	13 82       	std	Z+3, r1	; 0x03
     344:	64 83       	std	Z+4, r22	; 0x04
     346:	15 82       	std	Z+5, r1	; 0x05
     348:	96 83       	std	Z+6, r25	; 0x06
     34a:	17 82       	std	Z+7, r1	; 0x07
     34c:	0e 94 33 0d 	call	0x1a66	; 0x1a66 <printf_P>
     350:	8b b1       	in	r24, 0x0b	; 11
     352:	8f 70       	andi	r24, 0x0F	; 15
     354:	80 69       	ori	r24, 0x90	; 144
     356:	8b b9       	out	0x0b, r24	; 11
     358:	2d b7       	in	r18, 0x3d	; 61
     35a:	3e b7       	in	r19, 0x3e	; 62
     35c:	28 5f       	subi	r18, 0xF8	; 248
     35e:	3f 4f       	sbci	r19, 0xFF	; 255
     360:	0f b6       	in	r0, 0x3f	; 63
     362:	f8 94       	cli
     364:	3e bf       	out	0x3e, r19	; 62
     366:	0f be       	out	0x3f, r0	; 63
     368:	2d bf       	out	0x3d, r18	; 61
	                         " -- Error Code %d\r\n"
	                         " -- Sub Error Code %d\r\n"
	                         " -- In State %d\r\n" ESC_FG_WHITE), ErrorCode, SubErrorCode, USB_HostState);

	LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
}
     36a:	08 95       	ret

0000036c <EVENT_USB_Host_HostError>:
	LEDs_SetAllLEDs(LEDMASK_USB_READY);
}

/** Event handler for the USB_HostError event. This indicates that a hardware error occurred while in host mode. */
void EVENT_USB_Host_HostError(const uint8_t ErrorCode)
{
     36c:	1f 93       	push	r17
     36e:	18 2f       	mov	r17, r24
	USB_ShutDown();
     370:	8d d4       	rcall	.+2330   	; 0xc8c <USB_ShutDown>

	printf_P(PSTR(ESC_FG_RED "Host Mode Error\r\n"
     372:	00 d0       	rcall	.+0      	; 0x374 <EVENT_USB_Host_HostError+0x8>
     374:	00 d0       	rcall	.+0      	; 0x376 <EVENT_USB_Host_HostError+0xa>
     376:	ed b7       	in	r30, 0x3d	; 61
     378:	fe b7       	in	r31, 0x3e	; 62
     37a:	31 96       	adiw	r30, 0x01	; 1
     37c:	8e ee       	ldi	r24, 0xEE	; 238
     37e:	90 e0       	ldi	r25, 0x00	; 0
     380:	ad b7       	in	r26, 0x3d	; 61
     382:	be b7       	in	r27, 0x3e	; 62
     384:	12 96       	adiw	r26, 0x02	; 2
     386:	9c 93       	st	X, r25
     388:	8e 93       	st	-X, r24
     38a:	11 97       	sbiw	r26, 0x01	; 1
     38c:	12 83       	std	Z+2, r17	; 0x02
     38e:	13 82       	std	Z+3, r1	; 0x03
     390:	0e 94 33 0d 	call	0x1a66	; 0x1a66 <printf_P>
     394:	8b b1       	in	r24, 0x0b	; 11
     396:	8f 70       	andi	r24, 0x0F	; 15
     398:	80 69       	ori	r24, 0x90	; 144
     39a:	8b b9       	out	0x0b, r24	; 11
     39c:	0f 90       	pop	r0
     39e:	0f 90       	pop	r0
     3a0:	0f 90       	pop	r0
     3a2:	0f 90       	pop	r0
     3a4:	ff cf       	rjmp	.-2      	; 0x3a4 <EVENT_USB_Host_HostError+0x38>

000003a6 <EVENT_USB_Host_DeviceUnattached>:
/** Event handler for the USB_DeviceUnattached event. This indicates that a device has been removed from the host, and
 *  stops the library USB task management process.
 */
void EVENT_USB_Host_DeviceUnattached(void)
{
	puts_P(PSTR("\r\nDevice Unattached.\r\n"));
     3a6:	8d e1       	ldi	r24, 0x1D	; 29
     3a8:	91 e0       	ldi	r25, 0x01	; 1
     3aa:	0e 94 55 0d 	call	0x1aaa	; 0x1aaa <puts_P>
     3ae:	8b b1       	in	r24, 0x0b	; 11
     3b0:	8f 70       	andi	r24, 0x0F	; 15
     3b2:	80 61       	ori	r24, 0x10	; 16
     3b4:	8b b9       	out	0x0b, r24	; 11
	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
}
     3b6:	08 95       	ret

000003b8 <EVENT_USB_Host_DeviceAttached>:
/** Event handler for the USB_DeviceAttached event. This indicates that a device has been attached to the host, and
 *  starts the library USB task to begin the enumeration and USB management process.
 */
void EVENT_USB_Host_DeviceAttached(void)
{
	puts_P(PSTR("Device Attached.\r\n"));
     3b8:	84 e3       	ldi	r24, 0x34	; 52
     3ba:	91 e0       	ldi	r25, 0x01	; 1
     3bc:	0e 94 55 0d 	call	0x1aaa	; 0x1aaa <puts_P>
     3c0:	8b b1       	in	r24, 0x0b	; 11
     3c2:	8f 70       	andi	r24, 0x0F	; 15
     3c4:	80 6a       	ori	r24, 0xA0	; 160
     3c6:	8b b9       	out	0x0b, r24	; 11
	LEDs_SetAllLEDs(LEDMASK_USB_ENUMERATING);
}
     3c8:	08 95       	ret

000003ca <SetupHardware>:

/** Configures the board hardware and chip peripherals for the demo's functionality. */
void SetupHardware(void)
{
	/* Disable watchdog if enabled by bootloader/fuses */
	MCUSR &= ~(1 << WDRF);
     3ca:	84 b7       	in	r24, 0x34	; 52
     3cc:	87 7f       	andi	r24, 0xF7	; 247
     3ce:	84 bf       	out	0x34, r24	; 52
	wdt_disable();
     3d0:	38 e1       	ldi	r19, 0x18	; 24
     3d2:	0f b6       	in	r0, 0x3f	; 63
     3d4:	f8 94       	cli
     3d6:	30 93 60 00 	sts	0x0060, r19
     3da:	10 92 60 00 	sts	0x0060, r1
     3de:	0f be       	out	0x3f, r0	; 63

	/* Disable clock division */
	clock_prescale_set(clock_div_1);
     3e0:	80 e0       	ldi	r24, 0x00	; 0
     3e2:	90 e0       	ldi	r25, 0x00	; 0
     3e4:	20 e8       	ldi	r18, 0x80	; 128
     3e6:	0f b6       	in	r0, 0x3f	; 63
     3e8:	f8 94       	cli
     3ea:	20 93 61 00 	sts	0x0061, r18
     3ee:	80 93 61 00 	sts	0x0061, r24
     3f2:	0f be       	out	0x3f, r0	; 63
			 *  \param[in] DoubleSpeed  Enables double speed mode when set, halving the sample time to double the baud rate.
			 */
			static inline void Serial_Init(const uint32_t BaudRate,
			                               const bool DoubleSpeed)
			{
				UBRR1  = (DoubleSpeed ? SERIAL_2X_UBBRVAL(BaudRate) : SERIAL_UBBRVAL(BaudRate));
     3f4:	83 e3       	ldi	r24, 0x33	; 51
     3f6:	90 e0       	ldi	r25, 0x00	; 0
     3f8:	90 93 cd 00 	sts	0x00CD, r25
     3fc:	80 93 cc 00 	sts	0x00CC, r24

				UCSR1C = ((1 << UCSZ11) | (1 << UCSZ10));
     400:	86 e0       	ldi	r24, 0x06	; 6
     402:	80 93 ca 00 	sts	0x00CA, r24
				UCSR1A = (DoubleSpeed ? (1 << U2X1) : 0);
     406:	10 92 c8 00 	sts	0x00C8, r1
				UCSR1B = ((1 << TXEN1)  | (1 << RXEN1));
     40a:	30 93 c9 00 	sts	0x00C9, r19

				DDRD  |= (1 << 3);
     40e:	53 9a       	sbi	0x0a, 3	; 10
				PORTD |= (1 << 2);
     410:	5a 9a       	sbi	0x0b, 2	; 11
			static inline void SerialStream_Init(const uint32_t BaudRate,
			                                     const bool DoubleSpeed)
			{
				Serial_Init(BaudRate, DoubleSpeed);

				stdout = &USARTStream;
     412:	8b e3       	ldi	r24, 0x3B	; 59
     414:	91 e0       	ldi	r25, 0x01	; 1
     416:	90 93 5a 05 	sts	0x055A, r25
     41a:	80 93 59 05 	sts	0x0559, r24
				stdin  = &USARTStream;
     41e:	90 93 58 05 	sts	0x0558, r25
     422:	80 93 57 05 	sts	0x0557, r24

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void LEDs_Init(void)
			{
				DDRD  |=  LEDS_ALL_LEDS;
     426:	8a b1       	in	r24, 0x0a	; 10
     428:	80 6f       	ori	r24, 0xF0	; 240
     42a:	8a b9       	out	0x0a, r24	; 10
				PORTD &= ~LEDS_ALL_LEDS;
     42c:	8b b1       	in	r24, 0x0b	; 11
     42e:	8f 70       	andi	r24, 0x0F	; 15
     430:	8b b9       	out	0x0b, r24	; 11

	/* Hardware Initialization */
	SerialStream_Init(9600, false);
	LEDs_Init();
	USB_Init();
}
     432:	23 c4       	rjmp	.+2118   	; 0xc7a <USB_Init>

00000434 <PrintIncomingPackets>:
	}
}

/** Prints incoming packets from the attached RNDIS device to the serial port. */
void PrintIncomingPackets(void)
{
     434:	ef 92       	push	r14
     436:	ff 92       	push	r15
     438:	0f 93       	push	r16
     43a:	1f 93       	push	r17
     43c:	df 93       	push	r29
     43e:	cf 93       	push	r28
     440:	00 d0       	rcall	.+0      	; 0x442 <PrintIncomingPackets+0xe>
     442:	cd b7       	in	r28, 0x3d	; 61
     444:	de b7       	in	r29, 0x3e	; 62
	if (RNDIS_Host_IsPacketReceived(&Ethernet_RNDIS_Interface))
     446:	88 e0       	ldi	r24, 0x08	; 8
     448:	91 e0       	ldi	r25, 0x01	; 1
     44a:	45 d7       	rcall	.+3722   	; 0x12d6 <RNDIS_Host_IsPacketReceived>
     44c:	88 23       	and	r24, r24
     44e:	09 f4       	brne	.+2      	; 0x452 <PrintIncomingPackets+0x1e>
     450:	56 c0       	rjmp	.+172    	; 0x4fe <PrintIncomingPackets+0xca>
				PORTD &= ~LEDMask;
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
			{
				PORTD = ((PORTD & ~LEDS_ALL_LEDS) | LEDMask);
     452:	8b b1       	in	r24, 0x0b	; 11
     454:	8f 70       	andi	r24, 0x0F	; 15
     456:	80 62       	ori	r24, 0x20	; 32
     458:	8b b9       	out	0x0b, r24	; 11
	{
		LEDs_SetAllLEDs(LEDMASK_USB_BUSY);

		uint16_t PacketLength;
		RNDIS_Host_ReadPacket(&Ethernet_RNDIS_Interface, &PacketBuffer, &PacketLength);
     45a:	88 e0       	ldi	r24, 0x08	; 8
     45c:	91 e0       	ldi	r25, 0x01	; 1
     45e:	6d e4       	ldi	r22, 0x4D	; 77
     460:	71 e0       	ldi	r23, 0x01	; 1
     462:	ae 01       	movw	r20, r28
     464:	4f 5f       	subi	r20, 0xFF	; 255
     466:	5f 4f       	sbci	r21, 0xFF	; 255
     468:	52 d7       	rcall	.+3748   	; 0x130e <RNDIS_Host_ReadPacket>

		printf_P(PSTR("***PACKET (Size %d)***\r\n"), PacketLength);
     46a:	00 d0       	rcall	.+0      	; 0x46c <PrintIncomingPackets+0x38>
     46c:	00 d0       	rcall	.+0      	; 0x46e <PrintIncomingPackets+0x3a>
     46e:	8c e4       	ldi	r24, 0x4C	; 76
     470:	91 e0       	ldi	r25, 0x01	; 1
     472:	ad b7       	in	r26, 0x3d	; 61
     474:	be b7       	in	r27, 0x3e	; 62
     476:	12 96       	adiw	r26, 0x02	; 2
     478:	9c 93       	st	X, r25
     47a:	8e 93       	st	-X, r24
     47c:	11 97       	sbiw	r26, 0x01	; 1
     47e:	89 81       	ldd	r24, Y+1	; 0x01
     480:	9a 81       	ldd	r25, Y+2	; 0x02
     482:	14 96       	adiw	r26, 0x04	; 4
     484:	9c 93       	st	X, r25
     486:	8e 93       	st	-X, r24
     488:	13 97       	sbiw	r26, 0x03	; 3
     48a:	0e 94 33 0d 	call	0x1a66	; 0x1a66 <printf_P>
     48e:	00 e0       	ldi	r16, 0x00	; 0
     490:	10 e0       	ldi	r17, 0x00	; 0
     492:	0f 90       	pop	r0
     494:	0f 90       	pop	r0
     496:	0f 90       	pop	r0
     498:	0f 90       	pop	r0

		for (uint16_t i = 0; i < PacketLength; i++)
		  printf("0x%02x ", PacketBuffer[i]);
     49a:	80 e0       	ldi	r24, 0x00	; 0
     49c:	e8 2e       	mov	r14, r24
     49e:	81 e0       	ldi	r24, 0x01	; 1
     4a0:	f8 2e       	mov	r15, r24
     4a2:	19 c0       	rjmp	.+50     	; 0x4d6 <PrintIncomingPackets+0xa2>
     4a4:	00 d0       	rcall	.+0      	; 0x4a6 <PrintIncomingPackets+0x72>
     4a6:	00 d0       	rcall	.+0      	; 0x4a8 <PrintIncomingPackets+0x74>
     4a8:	ed b7       	in	r30, 0x3d	; 61
     4aa:	fe b7       	in	r31, 0x3e	; 62
     4ac:	31 96       	adiw	r30, 0x01	; 1
     4ae:	ad b7       	in	r26, 0x3d	; 61
     4b0:	be b7       	in	r27, 0x3e	; 62
     4b2:	12 96       	adiw	r26, 0x02	; 2
     4b4:	fc 92       	st	X, r15
     4b6:	ee 92       	st	-X, r14
     4b8:	11 97       	sbiw	r26, 0x01	; 1
     4ba:	d8 01       	movw	r26, r16
     4bc:	a3 5b       	subi	r26, 0xB3	; 179
     4be:	be 4f       	sbci	r27, 0xFE	; 254
     4c0:	8c 91       	ld	r24, X
     4c2:	82 83       	std	Z+2, r24	; 0x02
     4c4:	13 82       	std	Z+3, r1	; 0x03
     4c6:	0e 94 22 0d 	call	0x1a44	; 0x1a44 <printf>
		uint16_t PacketLength;
		RNDIS_Host_ReadPacket(&Ethernet_RNDIS_Interface, &PacketBuffer, &PacketLength);

		printf_P(PSTR("***PACKET (Size %d)***\r\n"), PacketLength);

		for (uint16_t i = 0; i < PacketLength; i++)
     4ca:	0f 5f       	subi	r16, 0xFF	; 255
     4cc:	1f 4f       	sbci	r17, 0xFF	; 255
     4ce:	0f 90       	pop	r0
     4d0:	0f 90       	pop	r0
     4d2:	0f 90       	pop	r0
     4d4:	0f 90       	pop	r0
     4d6:	89 81       	ldd	r24, Y+1	; 0x01
     4d8:	9a 81       	ldd	r25, Y+2	; 0x02
     4da:	08 17       	cp	r16, r24
     4dc:	19 07       	cpc	r17, r25
     4de:	10 f3       	brcs	.-60     	; 0x4a4 <PrintIncomingPackets+0x70>
		  printf("0x%02x ", PacketBuffer[i]);

		printf_P(PSTR("\r\n\r\n"));
     4e0:	00 d0       	rcall	.+0      	; 0x4e2 <PrintIncomingPackets+0xae>
     4e2:	87 e4       	ldi	r24, 0x47	; 71
     4e4:	91 e0       	ldi	r25, 0x01	; 1
     4e6:	ed b7       	in	r30, 0x3d	; 61
     4e8:	fe b7       	in	r31, 0x3e	; 62
     4ea:	92 83       	std	Z+2, r25	; 0x02
     4ec:	81 83       	std	Z+1, r24	; 0x01
     4ee:	0e 94 33 0d 	call	0x1a66	; 0x1a66 <printf_P>
     4f2:	8b b1       	in	r24, 0x0b	; 11
     4f4:	8f 70       	andi	r24, 0x0F	; 15
     4f6:	80 66       	ori	r24, 0x60	; 96
     4f8:	8b b9       	out	0x0b, r24	; 11
     4fa:	0f 90       	pop	r0
     4fc:	0f 90       	pop	r0

		LEDs_SetAllLEDs(LEDMASK_USB_READY);
	}
}
     4fe:	0f 90       	pop	r0
     500:	0f 90       	pop	r0
     502:	cf 91       	pop	r28
     504:	df 91       	pop	r29
     506:	1f 91       	pop	r17
     508:	0f 91       	pop	r16
     50a:	ff 90       	pop	r15
     50c:	ef 90       	pop	r14
     50e:	08 95       	ret

00000510 <main>:

/** Main program entry point. This routine configures the hardware required by the application, then
 *  enters a loop to run the application tasks in sequence.
 */
int main(void)
{
     510:	2f 92       	push	r2
     512:	3f 92       	push	r3
     514:	4f 92       	push	r4
     516:	5f 92       	push	r5
     518:	6f 92       	push	r6
     51a:	7f 92       	push	r7
     51c:	8f 92       	push	r8
     51e:	9f 92       	push	r9
     520:	af 92       	push	r10
     522:	bf 92       	push	r11
     524:	cf 92       	push	r12
     526:	df 92       	push	r13
     528:	ef 92       	push	r14
     52a:	ff 92       	push	r15
     52c:	0f 93       	push	r16
     52e:	1f 93       	push	r17
     530:	df 93       	push	r29
     532:	cf 93       	push	r28
     534:	cd b7       	in	r28, 0x3d	; 61
     536:	de b7       	in	r29, 0x3e	; 62
     538:	ca 50       	subi	r28, 0x0A	; 10
     53a:	d2 40       	sbci	r29, 0x02	; 2
     53c:	0f b6       	in	r0, 0x3f	; 63
     53e:	f8 94       	cli
     540:	de bf       	out	0x3e, r29	; 62
     542:	0f be       	out	0x3f, r0	; 63
     544:	cd bf       	out	0x3d, r28	; 61
	SetupHardware();
     546:	41 df       	rcall	.-382    	; 0x3ca <SetupHardware>

	puts_P(PSTR(ESC_FG_CYAN "RNDIS Host Demo running.\r\n" ESC_FG_WHITE));
     548:	86 ea       	ldi	r24, 0xA6	; 166
     54a:	92 e0       	ldi	r25, 0x02	; 2
     54c:	0e 94 55 0d 	call	0x1aaa	; 0x1aaa <puts_P>
     550:	8b b1       	in	r24, 0x0b	; 11
     552:	8f 70       	andi	r24, 0x0F	; 15
     554:	80 61       	ori	r24, 0x10	; 16
     556:	8b b9       	out	0x0b, r24	; 11

	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
	sei();
     558:	78 94       	sei
				LEDs_SetAllLEDs(LEDMASK_USB_ENUMERATING);

				uint16_t ConfigDescriptorSize;
				uint8_t  ConfigDescriptorData[512];

				if (USB_Host_GetDeviceConfigDescriptor(1, &ConfigDescriptorSize, ConfigDescriptorData,
     55a:	6b e0       	ldi	r22, 0x0B	; 11
     55c:	a6 2e       	mov	r10, r22
     55e:	b1 2c       	mov	r11, r1
     560:	ac 0e       	add	r10, r28
     562:	bd 1e       	adc	r11, r29
					LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
					USB_HostState = HOST_STATE_WaitForDeviceRemoval;
					break;
				}

				printf_P(PSTR("Device Max Transfer Size: %lu bytes.\r\n"), Ethernet_RNDIS_Interface.State.DeviceMaxPacketSize);
     564:	5d ed       	ldi	r21, 0xDD	; 221
     566:	25 2e       	mov	r2, r21
     568:	51 e0       	ldi	r21, 0x01	; 1
     56a:	35 2e       	mov	r3, r21

				uint32_t PacketFilter = (REMOTE_NDIS_PACKET_DIRECTED | REMOTE_NDIS_PACKET_BROADCAST | REMOTE_NDIS_PACKET_ALL_MULTICAST);
     56c:	4d e0       	ldi	r20, 0x0D	; 13
     56e:	c4 2e       	mov	r12, r20
     570:	d1 2c       	mov	r13, r1
     572:	e1 2c       	mov	r14, r1
     574:	f1 2c       	mov	r15, r1
				if (RNDIS_Host_SetRNDISProperty(&Ethernet_RNDIS_Interface, OID_GEN_CURRENT_PACKET_FILTER,
     576:	33 e0       	ldi	r19, 0x03	; 3
     578:	43 2e       	mov	r4, r19
     57a:	51 2c       	mov	r5, r1
     57c:	4c 0e       	add	r4, r28
     57e:	5d 1e       	adc	r5, r29
					USB_HostState = HOST_STATE_WaitForDeviceRemoval;
					break;
				}

				uint32_t VendorID;
				if (RNDIS_Host_QueryRNDISProperty(&Ethernet_RNDIS_Interface, OID_GEN_VENDOR_ID,
     580:	27 e0       	ldi	r18, 0x07	; 7
     582:	62 2e       	mov	r6, r18
     584:	71 2c       	mov	r7, r1
     586:	6c 0e       	add	r6, r28
     588:	7d 1e       	adc	r7, r29
					LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
					USB_HostState = HOST_STATE_WaitForDeviceRemoval;
					break;
				}

				printf_P(PSTR("Device Vendor ID: 0x%08lX\r\n"), VendorID);
     58a:	90 e8       	ldi	r25, 0x80	; 128
     58c:	89 2e       	mov	r8, r25
     58e:	91 e0       	ldi	r25, 0x01	; 1
     590:	99 2e       	mov	r9, r25
	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
	sei();

	for (;;)
	{
		switch (USB_HostState)
     592:	80 91 56 05 	lds	r24, 0x0556
     596:	8b 30       	cpi	r24, 0x0B	; 11
     598:	21 f0       	breq	.+8      	; 0x5a2 <main+0x92>
     59a:	8c 30       	cpi	r24, 0x0C	; 12
     59c:	09 f0       	breq	.+2      	; 0x5a0 <main+0x90>
     59e:	9b c0       	rjmp	.+310    	; 0x6d6 <main+0x1c6>
     5a0:	99 c0       	rjmp	.+306    	; 0x6d4 <main+0x1c4>
     5a2:	8b b1       	in	r24, 0x0b	; 11
     5a4:	8f 70       	andi	r24, 0x0F	; 15
     5a6:	80 6a       	ori	r24, 0xA0	; 160
     5a8:	8b b9       	out	0x0b, r24	; 11
				LEDs_SetAllLEDs(LEDMASK_USB_ENUMERATING);

				uint16_t ConfigDescriptorSize;
				uint8_t  ConfigDescriptorData[512];

				if (USB_Host_GetDeviceConfigDescriptor(1, &ConfigDescriptorSize, ConfigDescriptorData,
     5aa:	81 e0       	ldi	r24, 0x01	; 1
     5ac:	be 01       	movw	r22, r28
     5ae:	6f 5f       	subi	r22, 0xFF	; 255
     5b0:	7f 4f       	sbci	r23, 0xFF	; 255
     5b2:	a5 01       	movw	r20, r10
     5b4:	20 e0       	ldi	r18, 0x00	; 0
     5b6:	32 e0       	ldi	r19, 0x02	; 2
     5b8:	62 d4       	rcall	.+2244   	; 0xe7e <USB_Host_GetDeviceConfigDescriptor>
     5ba:	88 23       	and	r24, r24
     5bc:	19 f0       	breq	.+6      	; 0x5c4 <main+0xb4>
				                                       sizeof(ConfigDescriptorData)) != HOST_GETCONFIG_Successful)
				{
					puts_P(PSTR("Error Retrieving Configuration Descriptor.\r\n"));
     5be:	89 e7       	ldi	r24, 0x79	; 121
     5c0:	92 e0       	ldi	r25, 0x02	; 2
     5c2:	0b c0       	rjmp	.+22     	; 0x5da <main+0xca>
					LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
					USB_HostState = HOST_STATE_WaitForDeviceRemoval;
					break;
				}

				if (RNDIS_Host_ConfigurePipes(&Ethernet_RNDIS_Interface,
     5c4:	69 81       	ldd	r22, Y+1	; 0x01
     5c6:	7a 81       	ldd	r23, Y+2	; 0x02
     5c8:	88 e0       	ldi	r24, 0x08	; 8
     5ca:	91 e0       	ldi	r25, 0x01	; 1
     5cc:	a5 01       	movw	r20, r10
     5ce:	0e 94 ee 0b 	call	0x17dc	; 0x17dc <RNDIS_Host_ConfigurePipes>
     5d2:	88 23       	and	r24, r24
     5d4:	59 f0       	breq	.+22     	; 0x5ec <main+0xdc>
				                              ConfigDescriptorSize, ConfigDescriptorData) != RNDIS_ENUMERROR_NoError)
				{
					puts_P(PSTR("Attached Device Not a Valid RNDIS Class Device.\r\n"));
     5d6:	87 e4       	ldi	r24, 0x47	; 71
     5d8:	92 e0       	ldi	r25, 0x02	; 2
     5da:	0e 94 55 0d 	call	0x1aaa	; 0x1aaa <puts_P>
     5de:	8b b1       	in	r24, 0x0b	; 11
     5e0:	8f 70       	andi	r24, 0x0F	; 15
     5e2:	80 69       	ori	r24, 0x90	; 144
     5e4:	8b b9       	out	0x0b, r24	; 11
					LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
					USB_HostState = HOST_STATE_WaitForDeviceRemoval;
     5e6:	10 92 56 05 	sts	0x0556, r1
     5ea:	75 c0       	rjmp	.+234    	; 0x6d6 <main+0x1c6>
					break;
				}

				if (USB_Host_SetDeviceConfiguration(1) != HOST_SENDCONTROL_Successful)
     5ec:	81 e0       	ldi	r24, 0x01	; 1
     5ee:	0e d1       	rcall	.+540    	; 0x80c <USB_Host_SetDeviceConfiguration>
     5f0:	88 23       	and	r24, r24
     5f2:	19 f0       	breq	.+6      	; 0x5fa <main+0xea>
				{
					puts_P(PSTR("Error Setting Device Configuration.\r\n"));
     5f4:	81 e2       	ldi	r24, 0x21	; 33
     5f6:	92 e0       	ldi	r25, 0x02	; 2
     5f8:	f0 cf       	rjmp	.-32     	; 0x5da <main+0xca>
					LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
					USB_HostState = HOST_STATE_WaitForDeviceRemoval;
					break;
				}

				if (RNDIS_Host_InitializeDevice(&Ethernet_RNDIS_Interface) != HOST_SENDCONTROL_Successful)
     5fa:	88 e0       	ldi	r24, 0x08	; 8
     5fc:	91 e0       	ldi	r25, 0x01	; 1
     5fe:	0e 94 76 0b 	call	0x16ec	; 0x16ec <RNDIS_Host_InitializeDevice>
     602:	88 23       	and	r24, r24
     604:	19 f0       	breq	.+6      	; 0x60c <main+0xfc>
				{
					puts_P(PSTR("Error Initializing Device.\r\n"));
     606:	84 e0       	ldi	r24, 0x04	; 4
     608:	92 e0       	ldi	r25, 0x02	; 2
     60a:	e7 cf       	rjmp	.-50     	; 0x5da <main+0xca>
					LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
					USB_HostState = HOST_STATE_WaitForDeviceRemoval;
					break;
				}

				printf_P(PSTR("Device Max Transfer Size: %lu bytes.\r\n"), Ethernet_RNDIS_Interface.State.DeviceMaxPacketSize);
     60c:	00 d0       	rcall	.+0      	; 0x60e <main+0xfe>
     60e:	00 d0       	rcall	.+0      	; 0x610 <main+0x100>
     610:	00 d0       	rcall	.+0      	; 0x612 <main+0x102>
     612:	ed b7       	in	r30, 0x3d	; 61
     614:	fe b7       	in	r31, 0x3e	; 62
     616:	32 82       	std	Z+2, r3	; 0x02
     618:	21 82       	std	Z+1, r2	; 0x01
     61a:	80 91 1a 01 	lds	r24, 0x011A
     61e:	90 91 1b 01 	lds	r25, 0x011B
     622:	a0 91 1c 01 	lds	r26, 0x011C
     626:	b0 91 1d 01 	lds	r27, 0x011D
     62a:	83 83       	std	Z+3, r24	; 0x03
     62c:	94 83       	std	Z+4, r25	; 0x04
     62e:	a5 83       	std	Z+5, r26	; 0x05
     630:	b6 83       	std	Z+6, r27	; 0x06
     632:	0e 94 33 0d 	call	0x1a66	; 0x1a66 <printf_P>

				uint32_t PacketFilter = (REMOTE_NDIS_PACKET_DIRECTED | REMOTE_NDIS_PACKET_BROADCAST | REMOTE_NDIS_PACKET_ALL_MULTICAST);
     636:	cb 82       	std	Y+3, r12	; 0x03
     638:	dc 82       	std	Y+4, r13	; 0x04
     63a:	ed 82       	std	Y+5, r14	; 0x05
     63c:	fe 82       	std	Y+6, r15	; 0x06
				if (RNDIS_Host_SetRNDISProperty(&Ethernet_RNDIS_Interface, OID_GEN_CURRENT_PACKET_FILTER,
     63e:	8d b7       	in	r24, 0x3d	; 61
     640:	9e b7       	in	r25, 0x3e	; 62
     642:	06 96       	adiw	r24, 0x06	; 6
     644:	0f b6       	in	r0, 0x3f	; 63
     646:	f8 94       	cli
     648:	9e bf       	out	0x3e, r25	; 62
     64a:	0f be       	out	0x3f, r0	; 63
     64c:	8d bf       	out	0x3d, r24	; 61
     64e:	88 e0       	ldi	r24, 0x08	; 8
     650:	91 e0       	ldi	r25, 0x01	; 1
     652:	4e e0       	ldi	r20, 0x0E	; 14
     654:	51 e0       	ldi	r21, 0x01	; 1
     656:	61 e0       	ldi	r22, 0x01	; 1
     658:	70 e0       	ldi	r23, 0x00	; 0
     65a:	92 01       	movw	r18, r4
     65c:	04 e0       	ldi	r16, 0x04	; 4
     65e:	10 e0       	ldi	r17, 0x00	; 0
     660:	9f d7       	rcall	.+3902   	; 0x15a0 <RNDIS_Host_SetRNDISProperty>
     662:	88 23       	and	r24, r24
     664:	19 f0       	breq	.+6      	; 0x66c <main+0x15c>
				                                &PacketFilter, sizeof(PacketFilter)) != HOST_SENDCONTROL_Successful)
				{
					puts_P(PSTR("Error Setting Device Packet Filter.\r\n"));
     666:	87 eb       	ldi	r24, 0xB7	; 183
     668:	91 e0       	ldi	r25, 0x01	; 1
     66a:	b7 cf       	rjmp	.-146    	; 0x5da <main+0xca>
					USB_HostState = HOST_STATE_WaitForDeviceRemoval;
					break;
				}

				uint32_t VendorID;
				if (RNDIS_Host_QueryRNDISProperty(&Ethernet_RNDIS_Interface, OID_GEN_VENDOR_ID,
     66c:	88 e0       	ldi	r24, 0x08	; 8
     66e:	91 e0       	ldi	r25, 0x01	; 1
     670:	4c e0       	ldi	r20, 0x0C	; 12
     672:	51 e0       	ldi	r21, 0x01	; 1
     674:	61 e0       	ldi	r22, 0x01	; 1
     676:	70 e0       	ldi	r23, 0x00	; 0
     678:	93 01       	movw	r18, r6
     67a:	04 e0       	ldi	r16, 0x04	; 4
     67c:	10 e0       	ldi	r17, 0x00	; 0
     67e:	ee d6       	rcall	.+3548   	; 0x145c <RNDIS_Host_QueryRNDISProperty>
     680:	88 23       	and	r24, r24
     682:	19 f0       	breq	.+6      	; 0x68a <main+0x17a>
				                                  &VendorID, sizeof(VendorID)) != HOST_SENDCONTROL_Successful)
				{
					puts_P(PSTR("Error Getting Vendor ID.\r\n"));
     684:	8c e9       	ldi	r24, 0x9C	; 156
     686:	91 e0       	ldi	r25, 0x01	; 1
     688:	a8 cf       	rjmp	.-176    	; 0x5da <main+0xca>
					LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
					USB_HostState = HOST_STATE_WaitForDeviceRemoval;
					break;
				}

				printf_P(PSTR("Device Vendor ID: 0x%08lX\r\n"), VendorID);
     68a:	00 d0       	rcall	.+0      	; 0x68c <main+0x17c>
     68c:	00 d0       	rcall	.+0      	; 0x68e <main+0x17e>
     68e:	00 d0       	rcall	.+0      	; 0x690 <main+0x180>
     690:	ed b7       	in	r30, 0x3d	; 61
     692:	fe b7       	in	r31, 0x3e	; 62
     694:	92 82       	std	Z+2, r9	; 0x02
     696:	81 82       	std	Z+1, r8	; 0x01
     698:	8f 81       	ldd	r24, Y+7	; 0x07
     69a:	98 85       	ldd	r25, Y+8	; 0x08
     69c:	a9 85       	ldd	r26, Y+9	; 0x09
     69e:	ba 85       	ldd	r27, Y+10	; 0x0a
     6a0:	83 83       	std	Z+3, r24	; 0x03
     6a2:	94 83       	std	Z+4, r25	; 0x04
     6a4:	a5 83       	std	Z+5, r26	; 0x05
     6a6:	b6 83       	std	Z+6, r27	; 0x06
     6a8:	0e 94 33 0d 	call	0x1a66	; 0x1a66 <printf_P>

				puts_P(PSTR("RNDIS Device Enumerated.\r\n"));
     6ac:	8d b7       	in	r24, 0x3d	; 61
     6ae:	9e b7       	in	r25, 0x3e	; 62
     6b0:	06 96       	adiw	r24, 0x06	; 6
     6b2:	0f b6       	in	r0, 0x3f	; 63
     6b4:	f8 94       	cli
     6b6:	9e bf       	out	0x3e, r25	; 62
     6b8:	0f be       	out	0x3f, r0	; 63
     6ba:	8d bf       	out	0x3d, r24	; 61
     6bc:	85 e6       	ldi	r24, 0x65	; 101
     6be:	91 e0       	ldi	r25, 0x01	; 1
     6c0:	0e 94 55 0d 	call	0x1aaa	; 0x1aaa <puts_P>
     6c4:	8b b1       	in	r24, 0x0b	; 11
     6c6:	8f 70       	andi	r24, 0x0F	; 15
     6c8:	80 66       	ori	r24, 0x60	; 96
     6ca:	8b b9       	out	0x0b, r24	; 11
				LEDs_SetAllLEDs(LEDMASK_USB_READY);
				USB_HostState = HOST_STATE_Configured;
     6cc:	9c e0       	ldi	r25, 0x0C	; 12
     6ce:	90 93 56 05 	sts	0x0556, r25
     6d2:	01 c0       	rjmp	.+2      	; 0x6d6 <main+0x1c6>
				break;
			case HOST_STATE_Configured:
				PrintIncomingPackets();
     6d4:	af de       	rcall	.-674    	; 0x434 <PrintIncomingPackets>

				break;
		}

		RNDIS_Host_USBTask(&Ethernet_RNDIS_Interface);
		USB_USBTask();
     6d6:	ce d5       	rcall	.+2972   	; 0x1274 <USB_USBTask>
     6d8:	5c cf       	rjmp	.-328    	; 0x592 <main+0x82>

000006da <USB_Host_WaitMS>:
		USB_ResetInterface();
	}
}

uint8_t USB_Host_WaitMS(uint8_t MS)
{
     6da:	98 2f       	mov	r25, r24
			 *  \return Boolean true if the bus is currently suspended, false otherwise.
			 */
			static inline bool USB_Host_IsBusSuspended(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusSuspended(void)
			{
				return ((UHCON & (1 << SOFEN)) ? false : true);
     6dc:	20 91 9e 00 	lds	r18, 0x009E
	bool    BusSuspended = USB_Host_IsBusSuspended();
	uint8_t ErrorCode    = HOST_WAITERROR_Successful;
	bool    HSOFIEnabled = USB_INT_IsEnabled(USB_INT_HSOFI);
     6e0:	30 91 a0 00 	lds	r19, 0x00A0

	USB_INT_Disable(USB_INT_HSOFI);
     6e4:	80 91 a0 00 	lds	r24, 0x00A0
     6e8:	8f 7d       	andi	r24, 0xDF	; 223
     6ea:	80 93 a0 00 	sts	0x00A0, r24
	USB_INT_Clear(USB_INT_HSOFI);
     6ee:	80 91 9f 00 	lds	r24, 0x009F
     6f2:	8f 7d       	andi	r24, 0xDF	; 223
     6f4:	80 93 9f 00 	sts	0x009F, r24
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
     6f8:	80 91 9e 00 	lds	r24, 0x009E
     6fc:	81 60       	ori	r24, 0x01	; 1
     6fe:	80 93 9e 00 	sts	0x009E, r24
     702:	26 c0       	rjmp	.+76     	; 0x750 <USB_Host_WaitMS+0x76>

	USB_Host_ResumeBus();

	while (MS)
	{
		if (USB_INT_HasOccurred(USB_INT_HSOFI))
     704:	80 91 9f 00 	lds	r24, 0x009F
     708:	85 ff       	sbrs	r24, 5
     70a:	06 c0       	rjmp	.+12     	; 0x718 <USB_Host_WaitMS+0x3e>
		{
			USB_INT_Clear(USB_INT_HSOFI);
     70c:	80 91 9f 00 	lds	r24, 0x009F
     710:	8f 7d       	andi	r24, 0xDF	; 223
     712:	80 93 9f 00 	sts	0x009F, r24
			MS--;
     716:	91 50       	subi	r25, 0x01	; 1
		}

		if ((USB_HostState == HOST_STATE_Unattached) || (USB_CurrentMode != USB_MODE_Host))
     718:	80 91 56 05 	lds	r24, 0x0556
     71c:	82 30       	cpi	r24, 0x02	; 2
     71e:	11 f4       	brne	.+4      	; 0x724 <USB_Host_WaitMS+0x4a>
     720:	91 e0       	ldi	r25, 0x01	; 1
     722:	18 c0       	rjmp	.+48     	; 0x754 <USB_Host_WaitMS+0x7a>
			 *  \return Boolean true if an error has occurred on the selected pipe, false otherwise.
			 */
			static inline bool Pipe_IsError(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsError(void)
			{
				return ((UPINTX & (1 << PERRI)) ? true : false);
     724:	80 91 a6 00 	lds	r24, 0x00A6
			ErrorCode = HOST_WAITERROR_DeviceDisconnect;

			break;
		}

		if (Pipe_IsError() == true)
     728:	84 ff       	sbrs	r24, 4
     72a:	07 c0       	rjmp	.+14     	; 0x73a <USB_Host_WaitMS+0x60>

			/** Clears the master pipe error flag. */
			static inline void Pipe_ClearError(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearError(void)
			{
				UPINTX &= ~(1 << PERRI);
     72c:	80 91 a6 00 	lds	r24, 0x00A6
     730:	8f 7e       	andi	r24, 0xEF	; 239
     732:	80 93 a6 00 	sts	0x00A6, r24
     736:	92 e0       	ldi	r25, 0x02	; 2
     738:	0d c0       	rjmp	.+26     	; 0x754 <USB_Host_WaitMS+0x7a>
			 *  \return Boolean true if the current pipe has been stalled by the attached device, false otherwise.
			 */
			static inline bool Pipe_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsStalled(void)
			{
				return ((UPINTX & (1 << RXSTALLI)) ? true : false);
     73a:	80 91 a6 00 	lds	r24, 0x00A6
			ErrorCode = HOST_WAITERROR_PipeError;

			break;
		}

		if (Pipe_IsStalled() == true)
     73e:	81 ff       	sbrs	r24, 1
     740:	07 c0       	rjmp	.+14     	; 0x750 <USB_Host_WaitMS+0x76>
			 *  \ingroup Group_PipePacketManagement
			 */
			static inline void Pipe_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearStall(void)
			{
				UPINTX &= ~(1 << RXSTALLI);
     742:	80 91 a6 00 	lds	r24, 0x00A6
     746:	8d 7f       	andi	r24, 0xFD	; 253
     748:	80 93 a6 00 	sts	0x00A6, r24
     74c:	93 e0       	ldi	r25, 0x03	; 3
     74e:	02 c0       	rjmp	.+4      	; 0x754 <USB_Host_WaitMS+0x7a>
	USB_INT_Disable(USB_INT_HSOFI);
	USB_INT_Clear(USB_INT_HSOFI);

	USB_Host_ResumeBus();

	while (MS)
     750:	99 23       	and	r25, r25
     752:	c1 f6       	brne	.-80     	; 0x704 <USB_Host_WaitMS+0x2a>

			break;
		}
	}

	if (BusSuspended)
     754:	20 fd       	sbrc	r18, 0
     756:	05 c0       	rjmp	.+10     	; 0x762 <USB_Host_WaitMS+0x88>
			 *  messages to the device.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				UHCON &= ~(1 << SOFEN);
     758:	80 91 9e 00 	lds	r24, 0x009E
     75c:	8e 7f       	andi	r24, 0xFE	; 254
     75e:	80 93 9e 00 	sts	0x009E, r24
	  USB_Host_SuspendBus();

	if (HSOFIEnabled)
     762:	35 ff       	sbrs	r19, 5
     764:	05 c0       	rjmp	.+10     	; 0x770 <USB_Host_WaitMS+0x96>
	  USB_INT_Enable(USB_INT_HSOFI);
     766:	80 91 a0 00 	lds	r24, 0x00A0
     76a:	80 62       	ori	r24, 0x20	; 32
     76c:	80 93 a0 00 	sts	0x00A0, r24

	return ErrorCode;
}
     770:	89 2f       	mov	r24, r25
     772:	08 95       	ret

00000774 <USB_Host_ResetDevice>:
			 *  \return Boolean true if the bus is currently suspended, false otherwise.
			 */
			static inline bool USB_Host_IsBusSuspended(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusSuspended(void)
			{
				return ((UHCON & (1 << SOFEN)) ? false : true);
     774:	60 91 9e 00 	lds	r22, 0x009E

static void USB_Host_ResetDevice(void)
{
	bool BusSuspended = USB_Host_IsBusSuspended();

	USB_INT_Disable(USB_INT_DDISCI);
     778:	80 91 a0 00 	lds	r24, 0x00A0
     77c:	8d 7f       	andi	r24, 0xFD	; 253
     77e:	80 93 a0 00 	sts	0x00A0, r24
			 *  woken up automatically and the bus resumed after the reset has been correctly issued.
			 */
			static inline void USB_Host_ResetBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResetBus(void)
			{
				UHCON |=  (1 << RESET);
     782:	80 91 9e 00 	lds	r24, 0x009E
     786:	82 60       	ori	r24, 0x02	; 2
     788:	80 93 9e 00 	sts	0x009E, r24
			 *  \return Boolean true if no bus reset is currently being sent, false otherwise.
			 */
			static inline bool USB_Host_IsBusResetComplete(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusResetComplete(void)
			{
				return ((UHCON & (1 << RESET)) ? false : true);
     78c:	80 91 9e 00 	lds	r24, 0x009E

	USB_Host_ResetBus();
	while (!(USB_Host_IsBusResetComplete()));
     790:	81 fd       	sbrc	r24, 1
     792:	fc cf       	rjmp	.-8      	; 0x78c <USB_Host_ResetDevice+0x18>
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
     794:	80 91 9e 00 	lds	r24, 0x009E
     798:	81 60       	ori	r24, 0x01	; 1
     79a:	80 93 9e 00 	sts	0x009E, r24
	USB_Host_ResumeBus();

	bool HSOFIEnabled = USB_INT_IsEnabled(USB_INT_HSOFI);
     79e:	30 91 a0 00 	lds	r19, 0x00A0

	USB_INT_Disable(USB_INT_HSOFI);
     7a2:	80 91 a0 00 	lds	r24, 0x00A0
     7a6:	8f 7d       	andi	r24, 0xDF	; 223
     7a8:	80 93 a0 00 	sts	0x00A0, r24
	USB_INT_Clear(USB_INT_HSOFI);
     7ac:	80 91 9f 00 	lds	r24, 0x009F
     7b0:	8f 7d       	andi	r24, 0xDF	; 223
     7b2:	80 93 9f 00 	sts	0x009F, r24
     7b6:	2a e0       	ldi	r18, 0x0A	; 10
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     7b8:	40 ed       	ldi	r20, 0xD0	; 208
     7ba:	57 e0       	ldi	r21, 0x07	; 7
		/* Workaround for powerless-pull-up devices. After a USB bus reset,
		   all disconnection interrupts are suppressed while a USB frame is
		   looked for - if it is found within 10ms, the device is still
		   present.                                                        */

		if (USB_INT_HasOccurred(USB_INT_HSOFI))
     7bc:	80 91 9f 00 	lds	r24, 0x009F
     7c0:	85 ff       	sbrs	r24, 5
     7c2:	0b c0       	rjmp	.+22     	; 0x7da <USB_Host_ResetDevice+0x66>
		{
			USB_INT_Clear(USB_INT_HSOFI);
     7c4:	80 91 9f 00 	lds	r24, 0x009F
     7c8:	8f 7d       	andi	r24, 0xDF	; 223
     7ca:	80 93 9f 00 	sts	0x009F, r24
			USB_INT_Clear(USB_INT_DDISCI);
     7ce:	80 91 9f 00 	lds	r24, 0x009F
     7d2:	8d 7f       	andi	r24, 0xFD	; 253
     7d4:	80 93 9f 00 	sts	0x009F, r24
     7d8:	05 c0       	rjmp	.+10     	; 0x7e4 <USB_Host_ResetDevice+0x70>
     7da:	ca 01       	movw	r24, r20
     7dc:	01 97       	sbiw	r24, 0x01	; 1
     7de:	f1 f7       	brne	.-4      	; 0x7dc <USB_Host_ResetDevice+0x68>
	bool HSOFIEnabled = USB_INT_IsEnabled(USB_INT_HSOFI);

	USB_INT_Disable(USB_INT_HSOFI);
	USB_INT_Clear(USB_INT_HSOFI);

	for (uint8_t MSRem = 10; MSRem != 0; MSRem--)
     7e0:	21 50       	subi	r18, 0x01	; 1
     7e2:	61 f7       	brne	.-40     	; 0x7bc <USB_Host_ResetDevice+0x48>
		}

		_delay_ms(1);
	}

	if (HSOFIEnabled)
     7e4:	35 ff       	sbrs	r19, 5
     7e6:	05 c0       	rjmp	.+10     	; 0x7f2 <USB_Host_ResetDevice+0x7e>
	  USB_INT_Enable(USB_INT_HSOFI);
     7e8:	80 91 a0 00 	lds	r24, 0x00A0
     7ec:	80 62       	ori	r24, 0x20	; 32
     7ee:	80 93 a0 00 	sts	0x00A0, r24

	if (BusSuspended)
     7f2:	60 fd       	sbrc	r22, 0
     7f4:	05 c0       	rjmp	.+10     	; 0x800 <USB_Host_ResetDevice+0x8c>
			 *  messages to the device.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				UHCON &= ~(1 << SOFEN);
     7f6:	80 91 9e 00 	lds	r24, 0x009E
     7fa:	8e 7f       	andi	r24, 0xFE	; 254
     7fc:	80 93 9e 00 	sts	0x009E, r24
	  USB_Host_SuspendBus();

	USB_INT_Enable(USB_INT_DDISCI);
     800:	80 91 a0 00 	lds	r24, 0x00A0
     804:	82 60       	ori	r24, 0x02	; 2
     806:	80 93 a0 00 	sts	0x00A0, r24
}
     80a:	08 95       	ret

0000080c <USB_Host_SetDeviceConfiguration>:

uint8_t USB_Host_SetDeviceConfiguration(const uint8_t ConfigNumber)
{
	USB_ControlRequest = (USB_Request_Header_t)
     80c:	10 92 4e 05 	sts	0x054E, r1
     810:	99 e0       	ldi	r25, 0x09	; 9
     812:	90 93 4f 05 	sts	0x054F, r25
     816:	80 93 50 05 	sts	0x0550, r24
     81a:	10 92 51 05 	sts	0x0551, r1
     81e:	10 92 53 05 	sts	0x0553, r1
     822:	10 92 52 05 	sts	0x0552, r1
     826:	10 92 55 05 	sts	0x0555, r1
     82a:	10 92 54 05 	sts	0x0554, r1
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
     82e:	10 92 a7 00 	sts	0x00A7, r1
			.wLength       = 0,
		};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	return USB_Host_SendControlRequest(NULL);
     832:	80 e0       	ldi	r24, 0x00	; 0
     834:	90 e0       	ldi	r25, 0x00	; 0
}
     836:	a7 c3       	rjmp	.+1870   	; 0xf86 <USB_Host_SendControlRequest>

00000838 <USB_Host_ProcessNextHostState>:

#define  __INCLUDE_FROM_HOST_C
#include "Host.h"

void USB_Host_ProcessNextHostState(void)
{
     838:	ef 92       	push	r14
     83a:	0f 93       	push	r16
     83c:	1f 93       	push	r17
     83e:	df 93       	push	r29
     840:	cf 93       	push	r28
     842:	cd b7       	in	r28, 0x3d	; 61
     844:	de b7       	in	r29, 0x3e	; 62
     846:	28 97       	sbiw	r28, 0x08	; 8
     848:	0f b6       	in	r0, 0x3f	; 63
     84a:	f8 94       	cli
     84c:	de bf       	out	0x3e, r29	; 62
     84e:	0f be       	out	0x3f, r0	; 63
     850:	cd bf       	out	0x3d, r28	; 61
	uint8_t SubErrorCode = HOST_ENUMERROR_NoError;

	static uint16_t WaitMSRemaining;
	static uint8_t  PostWaitState;

	switch (USB_HostState)
     852:	80 91 56 05 	lds	r24, 0x0556
     856:	86 30       	cpi	r24, 0x06	; 6
     858:	09 f4       	brne	.+2      	; 0x85c <USB_Host_ProcessNextHostState+0x24>
     85a:	94 c0       	rjmp	.+296    	; 0x984 <USB_Host_ProcessNextHostState+0x14c>
     85c:	87 30       	cpi	r24, 0x07	; 7
     85e:	70 f4       	brcc	.+28     	; 0x87c <USB_Host_ProcessNextHostState+0x44>
     860:	83 30       	cpi	r24, 0x03	; 3
     862:	c1 f1       	breq	.+112    	; 0x8d4 <USB_Host_ProcessNextHostState+0x9c>
     864:	84 30       	cpi	r24, 0x04	; 4
     866:	20 f4       	brcc	.+8      	; 0x870 <USB_Host_ProcessNextHostState+0x38>
     868:	81 30       	cpi	r24, 0x01	; 1
     86a:	09 f0       	breq	.+2      	; 0x86e <USB_Host_ProcessNextHostState+0x36>
     86c:	07 c1       	rjmp	.+526    	; 0xa7c <USB_Host_ProcessNextHostState+0x244>
     86e:	13 c0       	rjmp	.+38     	; 0x896 <USB_Host_ProcessNextHostState+0x5e>
     870:	84 30       	cpi	r24, 0x04	; 4
     872:	c1 f1       	breq	.+112    	; 0x8e4 <USB_Host_ProcessNextHostState+0xac>
     874:	85 30       	cpi	r24, 0x05	; 5
     876:	09 f0       	breq	.+2      	; 0x87a <USB_Host_ProcessNextHostState+0x42>
     878:	01 c1       	rjmp	.+514    	; 0xa7c <USB_Host_ProcessNextHostState+0x244>
     87a:	5b c0       	rjmp	.+182    	; 0x932 <USB_Host_ProcessNextHostState+0xfa>
     87c:	88 30       	cpi	r24, 0x08	; 8
     87e:	09 f4       	brne	.+2      	; 0x882 <USB_Host_ProcessNextHostState+0x4a>
     880:	9b c0       	rjmp	.+310    	; 0x9b8 <USB_Host_ProcessNextHostState+0x180>
     882:	88 30       	cpi	r24, 0x08	; 8
     884:	08 f4       	brcc	.+2      	; 0x888 <USB_Host_ProcessNextHostState+0x50>
     886:	8a c0       	rjmp	.+276    	; 0x99c <USB_Host_ProcessNextHostState+0x164>
     888:	89 30       	cpi	r24, 0x09	; 9
     88a:	09 f4       	brne	.+2      	; 0x88e <USB_Host_ProcessNextHostState+0x56>
     88c:	b4 c0       	rjmp	.+360    	; 0x9f6 <USB_Host_ProcessNextHostState+0x1be>
     88e:	8a 30       	cpi	r24, 0x0A	; 10
     890:	09 f0       	breq	.+2      	; 0x894 <USB_Host_ProcessNextHostState+0x5c>
     892:	f4 c0       	rjmp	.+488    	; 0xa7c <USB_Host_ProcessNextHostState+0x244>
     894:	d9 c0       	rjmp	.+434    	; 0xa48 <USB_Host_ProcessNextHostState+0x210>
	{
		case HOST_STATE_WaitForDevice:
			if (WaitMSRemaining)
     896:	00 91 4b 01 	lds	r16, 0x014B
     89a:	10 91 4c 01 	lds	r17, 0x014C
     89e:	01 15       	cp	r16, r1
     8a0:	11 05       	cpc	r17, r1
     8a2:	09 f4       	brne	.+2      	; 0x8a6 <USB_Host_ProcessNextHostState+0x6e>
     8a4:	eb c0       	rjmp	.+470    	; 0xa7c <USB_Host_ProcessNextHostState+0x244>
			{
				if ((SubErrorCode = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
     8a6:	81 e0       	ldi	r24, 0x01	; 1
     8a8:	18 df       	rcall	.-464    	; 0x6da <USB_Host_WaitMS>
     8aa:	68 2f       	mov	r22, r24
     8ac:	88 23       	and	r24, r24
     8ae:	31 f0       	breq	.+12     	; 0x8bc <USB_Host_ProcessNextHostState+0x84>
				{
					USB_HostState = PostWaitState;
     8b0:	80 91 4a 01 	lds	r24, 0x014A
     8b4:	80 93 56 05 	sts	0x0556, r24
     8b8:	91 e0       	ldi	r25, 0x01	; 1
     8ba:	dc c0       	rjmp	.+440    	; 0xa74 <USB_Host_ProcessNextHostState+0x23c>
					ErrorCode     = HOST_ENUMERROR_WaitStage;
					break;
				}

				if (!(--WaitMSRemaining))
     8bc:	c8 01       	movw	r24, r16
     8be:	01 97       	sbiw	r24, 0x01	; 1
     8c0:	90 93 4c 01 	sts	0x014C, r25
     8c4:	80 93 4b 01 	sts	0x014B, r24
     8c8:	89 2b       	or	r24, r25
     8ca:	09 f0       	breq	.+2      	; 0x8ce <USB_Host_ProcessNextHostState+0x96>
     8cc:	d7 c0       	rjmp	.+430    	; 0xa7c <USB_Host_ProcessNextHostState+0x244>
				  USB_HostState = PostWaitState;
     8ce:	80 91 4a 01 	lds	r24, 0x014A
     8d2:	bf c0       	rjmp	.+382    	; 0xa52 <USB_Host_ProcessNextHostState+0x21a>
			}

			break;
		case HOST_STATE_Powered:
			WaitMSRemaining = HOST_DEVICE_SETTLE_DELAY_MS;
     8d4:	88 ee       	ldi	r24, 0xE8	; 232
     8d6:	93 e0       	ldi	r25, 0x03	; 3
     8d8:	90 93 4c 01 	sts	0x014C, r25
     8dc:	80 93 4b 01 	sts	0x014B, r24

			USB_HostState = HOST_STATE_Powered_WaitForDeviceSettle;
     8e0:	84 e0       	ldi	r24, 0x04	; 4
     8e2:	b7 c0       	rjmp	.+366    	; 0xa52 <USB_Host_ProcessNextHostState+0x21a>
			break;
		case HOST_STATE_Powered_WaitForDeviceSettle:
			if (WaitMSRemaining--)
     8e4:	80 91 4b 01 	lds	r24, 0x014B
     8e8:	90 91 4c 01 	lds	r25, 0x014C
     8ec:	01 97       	sbiw	r24, 0x01	; 1
     8ee:	90 93 4c 01 	sts	0x014C, r25
     8f2:	80 93 4b 01 	sts	0x014B, r24
     8f6:	01 96       	adiw	r24, 0x01	; 1
     8f8:	29 f0       	breq	.+10     	; 0x904 <USB_Host_ProcessNextHostState+0xcc>
     8fa:	80 ed       	ldi	r24, 0xD0	; 208
     8fc:	97 e0       	ldi	r25, 0x07	; 7
     8fe:	01 97       	sbiw	r24, 0x01	; 1
     900:	f1 f7       	brne	.-4      	; 0x8fe <USB_Host_ProcessNextHostState+0xc6>
     902:	bc c0       	rjmp	.+376    	; 0xa7c <USB_Host_ProcessNextHostState+0x244>
			}

			static inline void USB_Host_VBUS_Manual_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Manual_Off(void)
			{
				PORTE  &= ~(1 << 7);
     904:	77 98       	cbi	0x0e, 7	; 14

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON  |=  (1 << OTGPADE);
     906:	80 91 d8 00 	lds	r24, 0x00D8
     90a:	80 61       	ori	r24, 0x10	; 16
     90c:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_Host_VBUS_Auto_Enable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Enable(void)
			{
				OTGCON &= ~(1 << VBUSHWC);
     910:	80 91 dd 00 	lds	r24, 0x00DD
     914:	8b 7f       	andi	r24, 0xFB	; 251
     916:	80 93 dd 00 	sts	0x00DD, r24
				UHWCON |=  (1 << UVCONE);
     91a:	80 91 d7 00 	lds	r24, 0x00D7
     91e:	80 61       	ori	r24, 0x10	; 16
     920:	80 93 d7 00 	sts	0x00D7, r24
			}

			static inline void USB_Host_VBUS_Auto_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_On(void)
			{
				OTGCON |=  (1 << VBUSREQ);
     924:	80 91 dd 00 	lds	r24, 0x00DD
     928:	82 60       	ori	r24, 0x02	; 2
     92a:	80 93 dd 00 	sts	0x00DD, r24

				USB_OTGPAD_On();
				USB_Host_VBUS_Auto_Enable();
				USB_Host_VBUS_Auto_On();

				USB_HostState = HOST_STATE_Powered_WaitForConnect;
     92e:	85 e0       	ldi	r24, 0x05	; 5
     930:	90 c0       	rjmp	.+288    	; 0xa52 <USB_Host_ProcessNextHostState+0x21a>
			}

			break;
		case HOST_STATE_Powered_WaitForConnect:
			if (USB_INT_HasOccurred(USB_INT_DCONNI))
     932:	80 91 9f 00 	lds	r24, 0x009F
     936:	80 ff       	sbrs	r24, 0
     938:	a1 c0       	rjmp	.+322    	; 0xa7c <USB_Host_ProcessNextHostState+0x244>
			{
				USB_INT_Clear(USB_INT_DCONNI);
     93a:	80 91 9f 00 	lds	r24, 0x009F
     93e:	8e 7f       	andi	r24, 0xFE	; 254
     940:	80 93 9f 00 	sts	0x009F, r24
				USB_INT_Clear(USB_INT_DDISCI);
     944:	80 91 9f 00 	lds	r24, 0x009F
     948:	8d 7f       	andi	r24, 0xFD	; 253
     94a:	80 93 9f 00 	sts	0x009F, r24

				USB_INT_Clear(USB_INT_VBERRI);
     94e:	80 91 df 00 	lds	r24, 0x00DF
     952:	8d 7f       	andi	r24, 0xFD	; 253
     954:	80 93 df 00 	sts	0x00DF, r24
				USB_INT_Enable(USB_INT_VBERRI);
     958:	80 91 de 00 	lds	r24, 0x00DE
     95c:	82 60       	ori	r24, 0x02	; 2
     95e:	80 93 de 00 	sts	0x00DE, r24
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
     962:	80 91 9e 00 	lds	r24, 0x009E
     966:	81 60       	ori	r24, 0x01	; 1
     968:	80 93 9e 00 	sts	0x009E, r24

				USB_Host_ResumeBus();
				Pipe_ClearPipes();
     96c:	c9 d0       	rcall	.+402    	; 0xb00 <Pipe_ClearPipes>

				HOST_TASK_NONBLOCK_WAIT(100, HOST_STATE_Powered_DoReset);
     96e:	81 e0       	ldi	r24, 0x01	; 1
     970:	80 93 56 05 	sts	0x0556, r24
     974:	84 e6       	ldi	r24, 0x64	; 100
     976:	90 e0       	ldi	r25, 0x00	; 0
     978:	90 93 4c 01 	sts	0x014C, r25
     97c:	80 93 4b 01 	sts	0x014B, r24
     980:	86 e0       	ldi	r24, 0x06	; 6
     982:	5f c0       	rjmp	.+190    	; 0xa42 <USB_Host_ProcessNextHostState+0x20a>
			}

			break;
		case HOST_STATE_Powered_DoReset:
			USB_Host_ResetDevice();
     984:	f7 de       	rcall	.-530    	; 0x774 <USB_Host_ResetDevice>

			HOST_TASK_NONBLOCK_WAIT(200, HOST_STATE_Powered_ConfigPipe);
     986:	81 e0       	ldi	r24, 0x01	; 1
     988:	80 93 56 05 	sts	0x0556, r24
     98c:	88 ec       	ldi	r24, 0xC8	; 200
     98e:	90 e0       	ldi	r25, 0x00	; 0
     990:	90 93 4c 01 	sts	0x014C, r25
     994:	80 93 4b 01 	sts	0x014B, r24
     998:	87 e0       	ldi	r24, 0x07	; 7
     99a:	53 c0       	rjmp	.+166    	; 0xa42 <USB_Host_ProcessNextHostState+0x20a>
			break;
		case HOST_STATE_Powered_ConfigPipe:
			Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL,
     99c:	80 e0       	ldi	r24, 0x00	; 0
     99e:	60 e0       	ldi	r22, 0x00	; 0
     9a0:	40 e0       	ldi	r20, 0x00	; 0
     9a2:	20 e0       	ldi	r18, 0x00	; 0
     9a4:	00 e4       	ldi	r16, 0x40	; 64
     9a6:	10 e0       	ldi	r17, 0x00	; 0
     9a8:	ee 24       	eor	r14, r14
     9aa:	74 d0       	rcall	.+232    	; 0xa94 <Pipe_ConfigurePipe>
			 *  \return Boolean true if the selected pipe is configured, false otherwise.
			 */
			static inline bool Pipe_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsConfigured(void)
			{
				return ((UPSTAX & (1 << CFGOK)) ? true : false);
     9ac:	80 91 ac 00 	lds	r24, 0x00AC
							   PIPE_TOKEN_SETUP, ENDPOINT_CONTROLEP,
							   PIPE_CONTROLPIPE_DEFAULT_SIZE, PIPE_BANK_SINGLE);

			if (!(Pipe_IsConfigured()))
     9b0:	87 ff       	sbrs	r24, 7
     9b2:	5e c0       	rjmp	.+188    	; 0xa70 <USB_Host_ProcessNextHostState+0x238>
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
				SubErrorCode = 0;
				break;
			}

			USB_HostState = HOST_STATE_Default;
     9b4:	88 e0       	ldi	r24, 0x08	; 8
     9b6:	4d c0       	rjmp	.+154    	; 0xa52 <USB_Host_ProcessNextHostState+0x21a>
			break;
		case HOST_STATE_Default:
			USB_ControlRequest = (USB_Request_Header_t)
     9b8:	ae e4       	ldi	r26, 0x4E	; 78
     9ba:	b5 e0       	ldi	r27, 0x05	; 5
     9bc:	e2 e3       	ldi	r30, 0x32	; 50
     9be:	f1 e0       	ldi	r31, 0x01	; 1
     9c0:	88 e0       	ldi	r24, 0x08	; 8
     9c2:	01 90       	ld	r0, Z+
     9c4:	0d 92       	st	X+, r0
     9c6:	81 50       	subi	r24, 0x01	; 1
     9c8:	e1 f7       	brne	.-8      	; 0x9c2 <USB_Host_ProcessNextHostState+0x18a>
					.wLength       = 8,
				};

			uint8_t DataBuffer[8];

			if ((SubErrorCode = USB_Host_SendControlRequest(DataBuffer)) != HOST_SENDCONTROL_Successful)
     9ca:	ce 01       	movw	r24, r28
     9cc:	01 96       	adiw	r24, 0x01	; 1
     9ce:	db d2       	rcall	.+1462   	; 0xf86 <USB_Host_SendControlRequest>
     9d0:	68 2f       	mov	r22, r24
     9d2:	88 23       	and	r24, r24
     9d4:	09 f0       	breq	.+2      	; 0x9d8 <USB_Host_ProcessNextHostState+0x1a0>
     9d6:	4a c0       	rjmp	.+148    	; 0xa6c <USB_Host_ProcessNextHostState+0x234>
			{
				ErrorCode = HOST_ENUMERROR_ControlError;
				break;
			}

			USB_ControlPipeSize = DataBuffer[offsetof(USB_Descriptor_Device_t, Endpoint0Size)];
     9d8:	88 85       	ldd	r24, Y+8	; 0x08
     9da:	80 93 3a 01 	sts	0x013A, r24

			USB_Host_ResetDevice();
     9de:	ca de       	rcall	.-620    	; 0x774 <USB_Host_ResetDevice>

			HOST_TASK_NONBLOCK_WAIT(200, HOST_STATE_Default_PostReset);
     9e0:	81 e0       	ldi	r24, 0x01	; 1
     9e2:	80 93 56 05 	sts	0x0556, r24
     9e6:	88 ec       	ldi	r24, 0xC8	; 200
     9e8:	90 e0       	ldi	r25, 0x00	; 0
     9ea:	90 93 4c 01 	sts	0x014C, r25
     9ee:	80 93 4b 01 	sts	0x014B, r24
     9f2:	89 e0       	ldi	r24, 0x09	; 9
     9f4:	26 c0       	rjmp	.+76     	; 0xa42 <USB_Host_ProcessNextHostState+0x20a>
			break;
		case HOST_STATE_Default_PostReset:
			Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL,
     9f6:	00 91 3a 01 	lds	r16, 0x013A
     9fa:	80 e0       	ldi	r24, 0x00	; 0
     9fc:	60 e0       	ldi	r22, 0x00	; 0
     9fe:	40 e0       	ldi	r20, 0x00	; 0
     a00:	20 e0       	ldi	r18, 0x00	; 0
     a02:	10 e0       	ldi	r17, 0x00	; 0
     a04:	ee 24       	eor	r14, r14
     a06:	46 d0       	rcall	.+140    	; 0xa94 <Pipe_ConfigurePipe>
     a08:	80 91 ac 00 	lds	r24, 0x00AC
			                   PIPE_TOKEN_SETUP, ENDPOINT_CONTROLEP,
			                   USB_ControlPipeSize, PIPE_BANK_SINGLE);

			if (!(Pipe_IsConfigured()))
     a0c:	87 ff       	sbrs	r24, 7
     a0e:	30 c0       	rjmp	.+96     	; 0xa70 <USB_Host_ProcessNextHostState+0x238>
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
				SubErrorCode = 0;
				break;
			}

			USB_ControlRequest = (USB_Request_Header_t)
     a10:	ae e4       	ldi	r26, 0x4E	; 78
     a12:	b5 e0       	ldi	r27, 0x05	; 5
     a14:	ea e2       	ldi	r30, 0x2A	; 42
     a16:	f1 e0       	ldi	r31, 0x01	; 1
     a18:	88 e0       	ldi	r24, 0x08	; 8
     a1a:	01 90       	ld	r0, Z+
     a1c:	0d 92       	st	X+, r0
     a1e:	81 50       	subi	r24, 0x01	; 1
     a20:	e1 f7       	brne	.-8      	; 0xa1a <USB_Host_ProcessNextHostState+0x1e2>
					.wValue        = USB_HOST_DEVICEADDRESS,
					.wIndex        = 0,
					.wLength       = 0,
				};

			if ((SubErrorCode = USB_Host_SendControlRequest(NULL)) != HOST_SENDCONTROL_Successful)
     a22:	80 e0       	ldi	r24, 0x00	; 0
     a24:	90 e0       	ldi	r25, 0x00	; 0
     a26:	af d2       	rcall	.+1374   	; 0xf86 <USB_Host_SendControlRequest>
     a28:	68 2f       	mov	r22, r24
     a2a:	88 23       	and	r24, r24
     a2c:	f9 f4       	brne	.+62     	; 0xa6c <USB_Host_ProcessNextHostState+0x234>
			{
				ErrorCode = HOST_ENUMERROR_ControlError;
				break;
			}

			HOST_TASK_NONBLOCK_WAIT(100, HOST_STATE_Default_PostAddressSet);
     a2e:	81 e0       	ldi	r24, 0x01	; 1
     a30:	80 93 56 05 	sts	0x0556, r24
     a34:	84 e6       	ldi	r24, 0x64	; 100
     a36:	90 e0       	ldi	r25, 0x00	; 0
     a38:	90 93 4c 01 	sts	0x014C, r25
     a3c:	80 93 4b 01 	sts	0x014B, r24
     a40:	8a e0       	ldi	r24, 0x0A	; 10
     a42:	80 93 4a 01 	sts	0x014A, r24
     a46:	1a c0       	rjmp	.+52     	; 0xa7c <USB_Host_ProcessNextHostState+0x244>
			}

			static inline void USB_Host_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SetDeviceAddress(const uint8_t Address)
			{
				UHADDR  =  (Address & 0x7F);
     a48:	81 e0       	ldi	r24, 0x01	; 1
     a4a:	80 93 a1 00 	sts	0x00A1, r24
			break;
		case HOST_STATE_Default_PostAddressSet:
			USB_Host_SetDeviceAddress(USB_HOST_DEVICEADDRESS);

			EVENT_USB_Host_DeviceEnumerationComplete();
     a4e:	5d dc       	rcall	.-1862   	; 0x30a <EVENT_USB_Host_DeviceEnumerationComplete>
			USB_HostState = HOST_STATE_Addressed;
     a50:	8b e0       	ldi	r24, 0x0B	; 11
     a52:	80 93 56 05 	sts	0x0556, r24
     a56:	12 c0       	rjmp	.+36     	; 0xa7c <USB_Host_ProcessNextHostState+0x244>
			break;
	}

	if ((ErrorCode != HOST_ENUMERROR_NoError) && (USB_HostState != HOST_STATE_Unattached))
	{
		EVENT_USB_Host_DeviceEnumerationFailed(ErrorCode, SubErrorCode);
     a58:	89 2f       	mov	r24, r25
     a5a:	5c dc       	rcall	.-1864   	; 0x314 <EVENT_USB_Host_DeviceEnumerationFailed>
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
     a5c:	80 91 dd 00 	lds	r24, 0x00DD
     a60:	81 60       	ori	r24, 0x01	; 1
     a62:	80 93 dd 00 	sts	0x00DD, r24

		USB_Host_VBUS_Auto_Off();

		EVENT_USB_Host_DeviceUnattached();
     a66:	9f dc       	rcall	.-1730   	; 0x3a6 <EVENT_USB_Host_DeviceUnattached>

		USB_ResetInterface();
     a68:	ba d0       	rcall	.+372    	; 0xbde <USB_ResetInterface>
     a6a:	08 c0       	rjmp	.+16     	; 0xa7c <USB_Host_ProcessNextHostState+0x244>
	}
}
     a6c:	93 e0       	ldi	r25, 0x03	; 3
     a6e:	02 c0       	rjmp	.+4      	; 0xa74 <USB_Host_ProcessNextHostState+0x23c>
     a70:	94 e0       	ldi	r25, 0x04	; 4
     a72:	60 e0       	ldi	r22, 0x00	; 0
			EVENT_USB_Host_DeviceEnumerationComplete();
			USB_HostState = HOST_STATE_Addressed;
			break;
	}

	if ((ErrorCode != HOST_ENUMERROR_NoError) && (USB_HostState != HOST_STATE_Unattached))
     a74:	80 91 56 05 	lds	r24, 0x0556
     a78:	82 30       	cpi	r24, 0x02	; 2
     a7a:	71 f7       	brne	.-36     	; 0xa58 <USB_Host_ProcessNextHostState+0x220>

		EVENT_USB_Host_DeviceUnattached();

		USB_ResetInterface();
	}
}
     a7c:	28 96       	adiw	r28, 0x08	; 8
     a7e:	0f b6       	in	r0, 0x3f	; 63
     a80:	f8 94       	cli
     a82:	de bf       	out	0x3e, r29	; 62
     a84:	0f be       	out	0x3f, r0	; 63
     a86:	cd bf       	out	0x3d, r28	; 61
     a88:	cf 91       	pop	r28
     a8a:	df 91       	pop	r29
     a8c:	1f 91       	pop	r17
     a8e:	0f 91       	pop	r16
     a90:	ef 90       	pop	r14
     a92:	08 95       	ret

00000a94 <Pipe_ConfigurePipe>:
                        const uint8_t Type,
                        const uint8_t Token,
                        const uint8_t EndpointNumber,
                        const uint16_t Size,
                        const uint8_t Banks)
{
     a94:	ef 92       	push	r14
     a96:	0f 93       	push	r16
     a98:	1f 93       	push	r17
     a9a:	9e 2d       	mov	r25, r14
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
     a9c:	80 93 a7 00 	sts	0x00A7, r24
			 *  \pre The currently selected pipe must first be configured properly via \ref Pipe_ConfigurePipe().
			 */
			static inline void Pipe_EnablePipe(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_EnablePipe(void)
			{
				UPCONX |= (1 << PEN);
     aa0:	80 91 a9 00 	lds	r24, 0x00A9
     aa4:	81 60       	ori	r24, 0x01	; 1
     aa6:	80 93 a9 00 	sts	0x00A9, r24
	Pipe_SelectPipe(Number);
	Pipe_EnablePipe();

	UPCFG1X = 0;
     aaa:	10 92 ab 00 	sts	0x00AB, r1

	UPCFG0X = ((Type << EPTYPE0) | Token | ((EndpointNumber & PIPE_EPNUM_MASK) << PEPNUM0));
     aae:	62 95       	swap	r22
     ab0:	66 0f       	add	r22, r22
     ab2:	66 0f       	add	r22, r22
     ab4:	60 7c       	andi	r22, 0xC0	; 192
     ab6:	64 2b       	or	r22, r20
     ab8:	2f 70       	andi	r18, 0x0F	; 15
     aba:	62 2b       	or	r22, r18
     abc:	60 93 aa 00 	sts	0x00AA, r22
     ac0:	28 e0       	ldi	r18, 0x08	; 8
     ac2:	30 e0       	ldi	r19, 0x00	; 0
     ac4:	80 e0       	ldi	r24, 0x00	; 0
     ac6:	03 c0       	rjmp	.+6      	; 0xace <Pipe_ConfigurePipe+0x3a>
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while ((CheckBytes < Bytes) && (CheckBytes < PIPE_MAX_SIZE))
				{
					MaskVal++;
     ac8:	8f 5f       	subi	r24, 0xFF	; 255
					CheckBytes <<= 1;
     aca:	22 0f       	add	r18, r18
     acc:	33 1f       	adc	r19, r19
			static inline uint8_t Pipe_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while ((CheckBytes < Bytes) && (CheckBytes < PIPE_MAX_SIZE))
     ace:	20 17       	cp	r18, r16
     ad0:	31 07       	cpc	r19, r17
     ad2:	10 f4       	brcc	.+4      	; 0xad8 <Pipe_ConfigurePipe+0x44>
     ad4:	85 30       	cpi	r24, 0x05	; 5
     ad6:	c1 f7       	brne	.-16     	; 0xac8 <Pipe_ConfigurePipe+0x34>
	UPCFG1X = ((1 << ALLOC) | Banks | Pipe_BytesToEPSizeMask(Size));
     ad8:	92 60       	ori	r25, 0x02	; 2
     ada:	82 95       	swap	r24
     adc:	80 7f       	andi	r24, 0xF0	; 240
     ade:	89 2b       	or	r24, r25
     ae0:	80 93 ab 00 	sts	0x00AB, r24

			/** Configures the currently selected pipe to allow for an unlimited number of IN requests. */
			static inline void Pipe_SetInfiniteINRequests(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetInfiniteINRequests(void)
			{
				UPCONX |= (1 << INMODE);
     ae4:	80 91 a9 00 	lds	r24, 0x00A9
     ae8:	80 62       	ori	r24, 0x20	; 32
     aea:	80 93 a9 00 	sts	0x00A9, r24
			 *  \return Boolean true if the selected pipe is configured, false otherwise.
			 */
			static inline bool Pipe_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsConfigured(void)
			{
				return ((UPSTAX & (1 << CFGOK)) ? true : false);
     aee:	80 91 ac 00 	lds	r24, 0x00AC

	Pipe_SetInfiniteINRequests();

	return Pipe_IsConfigured();
}
     af2:	88 1f       	adc	r24, r24
     af4:	88 27       	eor	r24, r24
     af6:	88 1f       	adc	r24, r24
     af8:	1f 91       	pop	r17
     afa:	0f 91       	pop	r16
     afc:	ef 90       	pop	r14
     afe:	08 95       	ret

00000b00 <Pipe_ClearPipes>:

void Pipe_ClearPipes(void)
{
	UPINT = 0;
     b00:	10 92 f8 00 	sts	0x00F8, r1
     b04:	90 e0       	ldi	r25, 0x00	; 0
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
     b06:	90 93 a7 00 	sts	0x00A7, r25

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
	{
		Pipe_SelectPipe(PNum);
		UPIENX  = 0;
     b0a:	10 92 ae 00 	sts	0x00AE, r1
		UPINTX  = 0;
     b0e:	10 92 a6 00 	sts	0x00A6, r1
		UPCFG1X = 0;
     b12:	10 92 ab 00 	sts	0x00AB, r1
			 *  from an attached device.
			 */
			static inline void Pipe_DisablePipe(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_DisablePipe(void)
			{
				UPCONX &= ~(1 << PEN);
     b16:	80 91 a9 00 	lds	r24, 0x00A9
     b1a:	8e 7f       	andi	r24, 0xFE	; 254
     b1c:	80 93 a9 00 	sts	0x00A9, r24

void Pipe_ClearPipes(void)
{
	UPINT = 0;

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
     b20:	9f 5f       	subi	r25, 0xFF	; 255
     b22:	97 30       	cpi	r25, 0x07	; 7
     b24:	81 f7       	brne	.-32     	; 0xb06 <Pipe_ClearPipes+0x6>
		UPIENX  = 0;
		UPINTX  = 0;
		UPCFG1X = 0;
		Pipe_DisablePipe();
	}
}
     b26:	08 95       	ret

00000b28 <Pipe_IsEndpointBound>:

bool Pipe_IsEndpointBound(const uint8_t EndpointAddress)
{
     b28:	e8 2f       	mov	r30, r24
			 *  \return Index of the currently selected pipe.
			 */
			static inline uint8_t Pipe_GetCurrentPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetCurrentPipe(void)
			{
				return (UPNUM & PIPE_PIPENUM_MASK);
     b2a:	70 91 a7 00 	lds	r23, 0x00A7
     b2e:	60 e0       	ldi	r22, 0x00	; 0
		bool    PipeTokenCorrect = true;

		if (PipeToken != PIPE_TOKEN_SETUP)
		  PipeTokenCorrect = (PipeToken == ((EndpointAddress & PIPE_EPDIR_MASK) ? PIPE_TOKEN_IN : PIPE_TOKEN_OUT));

		if (PipeTokenCorrect && (Pipe_BoundEndpointNumber() == (EndpointAddress & PIPE_EPNUM_MASK)))
     b30:	48 2f       	mov	r20, r24
     b32:	50 e0       	ldi	r21, 0x00	; 0
     b34:	4f 70       	andi	r20, 0x0F	; 15
     b36:	50 70       	andi	r21, 0x00	; 0
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
     b38:	60 93 a7 00 	sts	0x00A7, r22
			 *  \return Boolean true if the selected pipe is configured, false otherwise.
			 */
			static inline bool Pipe_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsConfigured(void)
			{
				return ((UPSTAX & (1 << CFGOK)) ? true : false);
     b3c:	80 91 ac 00 	lds	r24, 0x00AC

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
	{
		Pipe_SelectPipe(PNum);

		if (!(Pipe_IsConfigured()))
     b40:	87 ff       	sbrs	r24, 7
     b42:	18 c0       	rjmp	.+48     	; 0xb74 <Pipe_IsEndpointBound+0x4c>
			 *  \return The current pipe token, as a PIPE_TOKEN_* mask.
			 */
			static inline uint8_t Pipe_GetPipeToken(void) ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetPipeToken(void)
			{
				return (UPCFG0X & (0x03 << PTOKEN0));
     b44:	80 91 aa 00 	lds	r24, 0x00AA
     b48:	80 73       	andi	r24, 0x30	; 48
		  continue;

		uint8_t PipeToken        = Pipe_GetPipeToken();
		bool    PipeTokenCorrect = true;

		if (PipeToken != PIPE_TOKEN_SETUP)
     b4a:	59 f0       	breq	.+22     	; 0xb62 <Pipe_IsEndpointBound+0x3a>
		  PipeTokenCorrect = (PipeToken == ((EndpointAddress & PIPE_EPDIR_MASK) ? PIPE_TOKEN_IN : PIPE_TOKEN_OUT));
     b4c:	e7 fd       	sbrc	r30, 7
     b4e:	03 c0       	rjmp	.+6      	; 0xb56 <Pipe_IsEndpointBound+0x2e>
     b50:	20 e2       	ldi	r18, 0x20	; 32
     b52:	30 e0       	ldi	r19, 0x00	; 0
     b54:	02 c0       	rjmp	.+4      	; 0xb5a <Pipe_IsEndpointBound+0x32>
     b56:	20 e1       	ldi	r18, 0x10	; 16
     b58:	30 e0       	ldi	r19, 0x00	; 0

		if (PipeTokenCorrect && (Pipe_BoundEndpointNumber() == (EndpointAddress & PIPE_EPNUM_MASK)))
     b5a:	90 e0       	ldi	r25, 0x00	; 0
     b5c:	82 17       	cp	r24, r18
     b5e:	93 07       	cpc	r25, r19
     b60:	49 f4       	brne	.+18     	; 0xb74 <Pipe_IsEndpointBound+0x4c>
			 *  \return Endpoint number the currently selected pipe is bound to.
			 */
			static inline uint8_t Pipe_BoundEndpointNumber(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_BoundEndpointNumber(void)
			{
				return ((UPCFG0X >> PEPNUM0) & PIPE_EPNUM_MASK);
     b62:	80 91 aa 00 	lds	r24, 0x00AA
     b66:	8f 70       	andi	r24, 0x0F	; 15
     b68:	90 e0       	ldi	r25, 0x00	; 0
     b6a:	84 17       	cp	r24, r20
     b6c:	95 07       	cpc	r25, r21
     b6e:	11 f4       	brne	.+4      	; 0xb74 <Pipe_IsEndpointBound+0x4c>
     b70:	81 e0       	ldi	r24, 0x01	; 1
     b72:	08 95       	ret

bool Pipe_IsEndpointBound(const uint8_t EndpointAddress)
{
	uint8_t PrevPipeNumber = Pipe_GetCurrentPipe();

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
     b74:	6f 5f       	subi	r22, 0xFF	; 255
     b76:	67 30       	cpi	r22, 0x07	; 7
     b78:	f9 f6       	brne	.-66     	; 0xb38 <Pipe_IsEndpointBound+0x10>
			 *  \return Index of the currently selected pipe.
			 */
			static inline uint8_t Pipe_GetCurrentPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetCurrentPipe(void)
			{
				return (UPNUM & PIPE_PIPENUM_MASK);
     b7a:	77 70       	andi	r23, 0x07	; 7
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
     b7c:	70 93 a7 00 	sts	0x00A7, r23
     b80:	80 e0       	ldi	r24, 0x00	; 0
		  return true;
	}

	Pipe_SelectPipe(PrevPipeNumber);
	return false;
}
     b82:	08 95       	ret

00000b84 <Pipe_WaitUntilReady>:
			/** Returns the current USB frame number, when in host mode. Every millisecond the USB bus is active (i.e. not suspended)
			 *  the frame number is incremented by one.
			 */
			static inline uint16_t USB_Host_GetFrameNumber(void)
			{
				return UHFNUM;
     b84:	40 91 a2 00 	lds	r20, 0x00A2
     b88:	50 91 a3 00 	lds	r21, 0x00A3
     b8c:	24 e6       	ldi	r18, 0x64	; 100
			 *  \return The current pipe token, as a PIPE_TOKEN_* mask.
			 */
			static inline uint8_t Pipe_GetPipeToken(void) ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetPipeToken(void)
			{
				return (UPCFG0X & (0x03 << PTOKEN0));
     b8e:	80 91 aa 00 	lds	r24, 0x00AA

	uint16_t PreviousFrameNumber = USB_Host_GetFrameNumber();

	for (;;)
	{
		if (Pipe_GetPipeToken() == PIPE_TOKEN_IN)
     b92:	80 73       	andi	r24, 0x30	; 48
     b94:	80 31       	cpi	r24, 0x10	; 16
     b96:	29 f4       	brne	.+10     	; 0xba2 <Pipe_WaitUntilReady+0x1e>
			 *  \return Boolean true if the current pipe has received an IN packet, false otherwise.
			 */
			static inline bool Pipe_IsINReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsINReceived(void)
			{
				return ((UPINTX & (1 << RXINI)) ? true : false);
     b98:	80 91 a6 00 	lds	r24, 0x00A6
		{
			if (Pipe_IsINReceived())
     b9c:	80 ff       	sbrs	r24, 0
     b9e:	05 c0       	rjmp	.+10     	; 0xbaa <Pipe_WaitUntilReady+0x26>
     ba0:	1c c0       	rjmp	.+56     	; 0xbda <Pipe_WaitUntilReady+0x56>
			 *  \return Boolean true if the current pipe is ready for an OUT packet, false otherwise.
			 */
			static inline bool Pipe_IsOUTReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsOUTReady(void)
			{
				return ((UPINTX & (1 << TXOUTI)) ? true : false);
     ba2:	80 91 a6 00 	lds	r24, 0x00A6
			  return PIPE_READYWAIT_NoError;
		}
		else
		{
			if (Pipe_IsOUTReady())
     ba6:	82 fd       	sbrc	r24, 2
     ba8:	18 c0       	rjmp	.+48     	; 0xbda <Pipe_WaitUntilReady+0x56>
			 *  \return Boolean true if the current pipe has been stalled by the attached device, false otherwise.
			 */
			static inline bool Pipe_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsStalled(void)
			{
				return ((UPINTX & (1 << RXSTALLI)) ? true : false);
     baa:	80 91 a6 00 	lds	r24, 0x00A6
			  return PIPE_READYWAIT_NoError;
		}

		if (Pipe_IsStalled())
     bae:	81 ff       	sbrs	r24, 1
     bb0:	02 c0       	rjmp	.+4      	; 0xbb6 <Pipe_WaitUntilReady+0x32>
     bb2:	81 e0       	ldi	r24, 0x01	; 1
     bb4:	08 95       	ret
		  return PIPE_READYWAIT_PipeStalled;
		else if (USB_HostState == HOST_STATE_Unattached)
     bb6:	80 91 56 05 	lds	r24, 0x0556
     bba:	82 30       	cpi	r24, 0x02	; 2
     bbc:	79 f0       	breq	.+30     	; 0xbdc <Pipe_WaitUntilReady+0x58>
     bbe:	80 91 a2 00 	lds	r24, 0x00A2
     bc2:	90 91 a3 00 	lds	r25, 0x00A3
		  return PIPE_READYWAIT_DeviceDisconnected;

		uint16_t CurrentFrameNumber = USB_Host_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
     bc6:	84 17       	cp	r24, r20
     bc8:	95 07       	cpc	r25, r21
     bca:	09 f3       	breq	.-62     	; 0xb8e <Pipe_WaitUntilReady+0xa>
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
     bcc:	22 23       	and	r18, r18
     bce:	11 f4       	brne	.+4      	; 0xbd4 <Pipe_WaitUntilReady+0x50>
     bd0:	83 e0       	ldi	r24, 0x03	; 3
     bd2:	08 95       	ret
     bd4:	21 50       	subi	r18, 0x01	; 1
     bd6:	ac 01       	movw	r20, r24
     bd8:	da cf       	rjmp	.-76     	; 0xb8e <Pipe_WaitUntilReady+0xa>
     bda:	80 e0       	ldi	r24, 0x00	; 0
			  return PIPE_READYWAIT_Timeout;
		}
	}
}
     bdc:	08 95       	ret

00000bde <USB_ResetInterface>:
{
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
     bde:	6e d0       	rcall	.+220    	; 0xcbc <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
     be0:	75 d0       	rcall	.+234    	; 0xccc <USB_INT_ClearAllInterrupts>
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				const uint8_t Temp = USBCON;
     be2:	80 91 d8 00 	lds	r24, 0x00D8

				USBCON = (Temp & ~(1 << USBE));
     be6:	98 2f       	mov	r25, r24
     be8:	9f 77       	andi	r25, 0x7F	; 127
     bea:	90 93 d8 00 	sts	0x00D8, r25
				USBCON = (Temp |  (1 << USBE));
     bee:	80 68       	ori	r24, 0x80	; 128
     bf0:	80 93 d8 00 	sts	0x00D8, r24

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR  = USB_PLL_PSC;
     bf4:	8c e0       	ldi	r24, 0x0C	; 12
     bf6:	89 bd       	out	0x29, r24	; 41
				PLLCSR |= (1 << PLLE);
     bf8:	89 b5       	in	r24, 0x29	; 41
     bfa:	82 60       	ori	r24, 0x02	; 2
     bfc:	89 bd       	out	0x29, r24	; 41
		#if defined(USB_SERIES_4_AVR)
		PLLFRQ = ((1 << PLLUSB) | (1 << PDIV3) | (1 << PDIV1));
		#endif

		USB_PLL_On();
		while (!(USB_PLL_IsReady()));
     bfe:	09 b4       	in	r0, 0x29	; 41
     c00:	00 fe       	sbrs	r0, 0
     c02:	fd cf       	rjmp	.-6      	; 0xbfe <USB_ResetInterface+0x20>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON  &= ~(1 << FRZCLK);
     c04:	80 91 d8 00 	lds	r24, 0x00D8
     c08:	8f 7d       	andi	r24, 0xDF	; 223
     c0a:	80 93 d8 00 	sts	0x00D8, r24
		#endif
	}
	else if (USB_CurrentMode == USB_MODE_Host)
	{
		#if defined(USB_CAN_BE_HOST)
		UHWCON &= ~(1 << UIMOD);
     c0e:	80 91 d7 00 	lds	r24, 0x00D7
     c12:	8f 77       	andi	r24, 0x7F	; 127
     c14:	80 93 d7 00 	sts	0x00D7, r24
#endif

#if defined(USB_CAN_BE_HOST)
static void USB_Init_Host(void)
{
	USB_HostState       = HOST_STATE_Unattached;
     c18:	82 e0       	ldi	r24, 0x02	; 2
     c1a:	80 93 56 05 	sts	0x0556, r24
	USB_ControlPipeSize = PIPE_CONTROLPIPE_DEFAULT_SIZE;
     c1e:	80 e4       	ldi	r24, 0x40	; 64
     c20:	80 93 3a 01 	sts	0x013A, r24
	#if !defined(__DOXYGEN__)
		/* Macros: */
			static inline void USB_Host_HostMode_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_HostMode_On(void)
			{
				USBCON |=  (1 << HOST);
     c24:	80 91 d8 00 	lds	r24, 0x00D8
     c28:	80 64       	ori	r24, 0x40	; 64
     c2a:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
     c2e:	80 91 dd 00 	lds	r24, 0x00DD
     c32:	81 60       	ori	r24, 0x01	; 1
     c34:	80 93 dd 00 	sts	0x00DD, r24
			}

			static inline void USB_Host_VBUS_Manual_Enable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Manual_Enable(void)
			{
				OTGCON |=  (1 << VBUSHWC);
     c38:	80 91 dd 00 	lds	r24, 0x00DD
     c3c:	84 60       	ori	r24, 0x04	; 4
     c3e:	80 93 dd 00 	sts	0x00DD, r24
				UHWCON &= ~(1 << UVCONE);
     c42:	80 91 d7 00 	lds	r24, 0x00D7
     c46:	8f 7e       	andi	r24, 0xEF	; 239
     c48:	80 93 d7 00 	sts	0x00D7, r24

				DDRE   |=  (1 << 7);
     c4c:	6f 9a       	sbi	0x0d, 7	; 13
			}

			static inline void USB_Host_VBUS_Manual_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Manual_On(void)
			{
				PORTE  |=  (1 << 7);
     c4e:	77 9a       	sbi	0x0e, 7	; 14

	USB_Host_VBUS_Auto_Off();
	USB_Host_VBUS_Manual_Enable();
	USB_Host_VBUS_Manual_On();

	USB_INT_Enable(USB_INT_SRPI);
     c50:	80 91 de 00 	lds	r24, 0x00DE
     c54:	81 60       	ori	r24, 0x01	; 1
     c56:	80 93 de 00 	sts	0x00DE, r24
	USB_INT_Enable(USB_INT_BCERRI);
     c5a:	80 91 de 00 	lds	r24, 0x00DE
     c5e:	84 60       	ori	r24, 0x04	; 4
     c60:	80 93 de 00 	sts	0x00DE, r24
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
     c64:	80 91 e0 00 	lds	r24, 0x00E0
     c68:	8e 7f       	andi	r24, 0xFE	; 254
     c6a:	80 93 e0 00 	sts	0x00E0, r24

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON  |=  (1 << OTGPADE);
     c6e:	80 91 d8 00 	lds	r24, 0x00D8
     c72:	80 61       	ori	r24, 0x10	; 16
     c74:	80 93 d8 00 	sts	0x00D8, r24
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
     c78:	08 95       	ret

00000c7a <USB_Init>:

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON  |=  (1 << UVREGE);
     c7a:	e7 ed       	ldi	r30, 0xD7	; 215
     c7c:	f0 e0       	ldi	r31, 0x00	; 0
     c7e:	80 81       	ld	r24, Z
     c80:	81 60       	ori	r24, 0x01	; 1
     c82:	80 83       	st	Z, r24
	{
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
     c84:	81 e0       	ldi	r24, 0x01	; 1
     c86:	80 93 4d 05 	sts	0x054D, r24

	USB_ResetInterface();
}
     c8a:	a9 cf       	rjmp	.-174    	; 0xbde <USB_ResetInterface>

00000c8c <USB_ShutDown>:

void USB_ShutDown(void)
{
	USB_INT_DisableAllInterrupts();
     c8c:	17 d0       	rcall	.+46     	; 0xcbc <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
     c8e:	1e d0       	rcall	.+60     	; 0xccc <USB_INT_ClearAllInterrupts>
			 *  enumerating the device once attached until \ref USB_Attach() is called.
			 */
			static inline void USB_Detach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Detach(void)
			{
				UDCON  |=  (1 << DETACH);
     c90:	e0 ee       	ldi	r30, 0xE0	; 224
     c92:	f0 e0       	ldi	r31, 0x00	; 0
     c94:	80 81       	ld	r24, Z
     c96:	81 60       	ori	r24, 0x01	; 1
     c98:	80 83       	st	Z, r24
			}

			static inline void USB_Controller_Disable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Disable(void)
			{
				USBCON  &= ~(1 << USBE);
     c9a:	a8 ed       	ldi	r26, 0xD8	; 216
     c9c:	b0 e0       	ldi	r27, 0x00	; 0
     c9e:	8c 91       	ld	r24, X
     ca0:	8f 77       	andi	r24, 0x7F	; 127
     ca2:	8c 93       	st	X, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR  = 0;
     ca4:	19 bc       	out	0x29, r1	; 41

			static inline void USB_REG_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_Off(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON  &= ~(1 << UVREGE);
     ca6:	e7 ed       	ldi	r30, 0xD7	; 215
     ca8:	f0 e0       	ldi	r31, 0x00	; 0
     caa:	80 81       	ld	r24, Z
     cac:	8e 7f       	andi	r24, 0xFE	; 254
     cae:	80 83       	st	Z, r24
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON  &= ~(1 << OTGPADE);
     cb0:	8c 91       	ld	r24, X
     cb2:	8f 7e       	andi	r24, 0xEF	; 239
     cb4:	8c 93       	st	X, r24

	#if defined(USB_CAN_BE_BOTH)
	USB_CurrentMode = USB_MODE_None;
	#endif

	USB_IsInitialized = false;
     cb6:	10 92 4d 05 	sts	0x054D, r1
}
     cba:	08 95       	ret

00000cbc <USB_INT_DisableAllInterrupts>:
#include "USBInterrupt.h"

void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
     cbc:	e8 ed       	ldi	r30, 0xD8	; 216
     cbe:	f0 e0       	ldi	r31, 0x00	; 0
     cc0:	80 81       	ld	r24, Z
     cc2:	8c 7f       	andi	r24, 0xFC	; 252
     cc4:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_BOTH)
	OTGIEN  = 0;
	#endif

	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
     cc6:	10 92 a0 00 	sts	0x00A0, r1
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
	#endif
}
     cca:	08 95       	ret

00000ccc <USB_INT_ClearAllInterrupts>:

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT  = 0;
     ccc:	10 92 da 00 	sts	0x00DA, r1
	#if defined(USB_CAN_BE_BOTH)
	OTGINT  = 0;
	#endif

	#if defined(USB_CAN_BE_HOST)
	UHINT   = 0;
     cd0:	10 92 9f 00 	sts	0x009F, r1
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT   = 0;
	#endif
}
     cd4:	08 95       	ret

00000cd6 <__vector_10>:

ISR(USB_GEN_vect, ISR_BLOCK)
{
     cd6:	1f 92       	push	r1
     cd8:	0f 92       	push	r0
     cda:	0f b6       	in	r0, 0x3f	; 63
     cdc:	0f 92       	push	r0
     cde:	0b b6       	in	r0, 0x3b	; 59
     ce0:	0f 92       	push	r0
     ce2:	11 24       	eor	r1, r1
     ce4:	2f 93       	push	r18
     ce6:	3f 93       	push	r19
     ce8:	4f 93       	push	r20
     cea:	5f 93       	push	r21
     cec:	6f 93       	push	r22
     cee:	7f 93       	push	r23
     cf0:	8f 93       	push	r24
     cf2:	9f 93       	push	r25
     cf4:	af 93       	push	r26
     cf6:	bf 93       	push	r27
     cf8:	ef 93       	push	r30
     cfa:	ff 93       	push	r31
	}
	#endif
	#endif

	#if defined(USB_CAN_BE_HOST)
	if (USB_INT_HasOccurred(USB_INT_DDISCI) && USB_INT_IsEnabled(USB_INT_DDISCI))
     cfc:	80 91 9f 00 	lds	r24, 0x009F
     d00:	81 ff       	sbrs	r24, 1
     d02:	15 c0       	rjmp	.+42     	; 0xd2e <__vector_10+0x58>
     d04:	80 91 a0 00 	lds	r24, 0x00A0
     d08:	81 ff       	sbrs	r24, 1
     d0a:	11 c0       	rjmp	.+34     	; 0xd2e <__vector_10+0x58>
	{
		USB_INT_Clear(USB_INT_DDISCI);
     d0c:	80 91 9f 00 	lds	r24, 0x009F
     d10:	8d 7f       	andi	r24, 0xFD	; 253
     d12:	80 93 9f 00 	sts	0x009F, r24
		USB_INT_Clear(USB_INT_DCONNI);
     d16:	80 91 9f 00 	lds	r24, 0x009F
     d1a:	8e 7f       	andi	r24, 0xFE	; 254
     d1c:	80 93 9f 00 	sts	0x009F, r24
		USB_INT_Disable(USB_INT_DDISCI);
     d20:	80 91 a0 00 	lds	r24, 0x00A0
     d24:	8d 7f       	andi	r24, 0xFD	; 253
     d26:	80 93 a0 00 	sts	0x00A0, r24

		EVENT_USB_Host_DeviceUnattached();
     d2a:	3d db       	rcall	.-2438   	; 0x3a6 <EVENT_USB_Host_DeviceUnattached>

		USB_ResetInterface();
     d2c:	58 df       	rcall	.-336    	; 0xbde <USB_ResetInterface>
	}

	if (USB_INT_HasOccurred(USB_INT_VBERRI) && USB_INT_IsEnabled(USB_INT_VBERRI))
     d2e:	80 91 df 00 	lds	r24, 0x00DF
     d32:	81 ff       	sbrs	r24, 1
     d34:	15 c0       	rjmp	.+42     	; 0xd60 <__vector_10+0x8a>
     d36:	80 91 de 00 	lds	r24, 0x00DE
     d3a:	81 ff       	sbrs	r24, 1
     d3c:	11 c0       	rjmp	.+34     	; 0xd60 <__vector_10+0x8a>
	{
		USB_INT_Clear(USB_INT_VBERRI);
     d3e:	80 91 df 00 	lds	r24, 0x00DF
     d42:	8d 7f       	andi	r24, 0xFD	; 253
     d44:	80 93 df 00 	sts	0x00DF, r24
			}

			static inline void USB_Host_VBUS_Manual_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Manual_Off(void)
			{
				PORTE  &= ~(1 << 7);
     d48:	77 98       	cbi	0x0e, 7	; 14
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
     d4a:	80 91 dd 00 	lds	r24, 0x00DD
     d4e:	81 60       	ori	r24, 0x01	; 1
     d50:	80 93 dd 00 	sts	0x00DD, r24

		USB_Host_VBUS_Manual_Off();
		USB_Host_VBUS_Auto_Off();

		EVENT_USB_Host_HostError(HOST_ERROR_VBusVoltageDip);
     d54:	80 e0       	ldi	r24, 0x00	; 0
     d56:	0a db       	rcall	.-2540   	; 0x36c <EVENT_USB_Host_HostError>
		EVENT_USB_Host_DeviceUnattached();
     d58:	26 db       	rcall	.-2484   	; 0x3a6 <EVENT_USB_Host_DeviceUnattached>

		USB_HostState = HOST_STATE_Unattached;
     d5a:	82 e0       	ldi	r24, 0x02	; 2
     d5c:	80 93 56 05 	sts	0x0556, r24
	}

	if (USB_INT_HasOccurred(USB_INT_SRPI) && USB_INT_IsEnabled(USB_INT_SRPI))
     d60:	80 91 df 00 	lds	r24, 0x00DF
     d64:	80 ff       	sbrs	r24, 0
     d66:	17 c0       	rjmp	.+46     	; 0xd96 <__vector_10+0xc0>
     d68:	80 91 de 00 	lds	r24, 0x00DE
     d6c:	80 ff       	sbrs	r24, 0
     d6e:	13 c0       	rjmp	.+38     	; 0xd96 <__vector_10+0xc0>
	{
		USB_INT_Clear(USB_INT_SRPI);
     d70:	80 91 df 00 	lds	r24, 0x00DF
     d74:	8e 7f       	andi	r24, 0xFE	; 254
     d76:	80 93 df 00 	sts	0x00DF, r24
		USB_INT_Disable(USB_INT_SRPI);
     d7a:	80 91 de 00 	lds	r24, 0x00DE
     d7e:	8e 7f       	andi	r24, 0xFE	; 254
     d80:	80 93 de 00 	sts	0x00DE, r24

		EVENT_USB_Host_DeviceAttached();
     d84:	19 db       	rcall	.-2510   	; 0x3b8 <EVENT_USB_Host_DeviceAttached>

		USB_INT_Enable(USB_INT_DDISCI);
     d86:	80 91 a0 00 	lds	r24, 0x00A0
     d8a:	82 60       	ori	r24, 0x02	; 2
     d8c:	80 93 a0 00 	sts	0x00A0, r24

		USB_HostState = HOST_STATE_Powered;
     d90:	83 e0       	ldi	r24, 0x03	; 3
     d92:	80 93 56 05 	sts	0x0556, r24
	}

	if (USB_INT_HasOccurred(USB_INT_BCERRI) && USB_INT_IsEnabled(USB_INT_BCERRI))
     d96:	80 91 df 00 	lds	r24, 0x00DF
     d9a:	82 ff       	sbrs	r24, 2
     d9c:	0e c0       	rjmp	.+28     	; 0xdba <__vector_10+0xe4>
     d9e:	80 91 de 00 	lds	r24, 0x00DE
     da2:	82 ff       	sbrs	r24, 2
     da4:	0a c0       	rjmp	.+20     	; 0xdba <__vector_10+0xe4>
	{
		USB_INT_Clear(USB_INT_BCERRI);
     da6:	80 91 df 00 	lds	r24, 0x00DF
     daa:	8b 7f       	andi	r24, 0xFB	; 251
     dac:	80 93 df 00 	sts	0x00DF, r24

		EVENT_USB_Host_DeviceEnumerationFailed(HOST_ENUMERROR_NoDeviceDetected, 0);
     db0:	82 e0       	ldi	r24, 0x02	; 2
     db2:	60 e0       	ldi	r22, 0x00	; 0
     db4:	af da       	rcall	.-2722   	; 0x314 <EVENT_USB_Host_DeviceEnumerationFailed>
		EVENT_USB_Host_DeviceUnattached();
     db6:	f7 da       	rcall	.-2578   	; 0x3a6 <EVENT_USB_Host_DeviceUnattached>

		USB_ResetInterface();
     db8:	12 df       	rcall	.-476    	; 0xbde <USB_ResetInterface>
	}

	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_HSOFI) && USB_INT_IsEnabled(USB_INT_HSOFI))
     dba:	80 91 9f 00 	lds	r24, 0x009F
     dbe:	85 ff       	sbrs	r24, 5
     dc0:	0a c0       	rjmp	.+20     	; 0xdd6 <__vector_10+0x100>
     dc2:	80 91 a0 00 	lds	r24, 0x00A0
     dc6:	85 ff       	sbrs	r24, 5
     dc8:	06 c0       	rjmp	.+12     	; 0xdd6 <__vector_10+0x100>
	{
		USB_INT_Clear(USB_INT_HSOFI);
     dca:	80 91 9f 00 	lds	r24, 0x009F
     dce:	8f 7d       	andi	r24, 0xDF	; 223
     dd0:	80 93 9f 00 	sts	0x009F, r24

		EVENT_USB_Host_StartOfFrame();
     dd4:	ae d0       	rcall	.+348    	; 0xf32 <USB_Event_Stub>
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
     dd6:	ff 91       	pop	r31
     dd8:	ef 91       	pop	r30
     dda:	bf 91       	pop	r27
     ddc:	af 91       	pop	r26
     dde:	9f 91       	pop	r25
     de0:	8f 91       	pop	r24
     de2:	7f 91       	pop	r23
     de4:	6f 91       	pop	r22
     de6:	5f 91       	pop	r21
     de8:	4f 91       	pop	r20
     dea:	3f 91       	pop	r19
     dec:	2f 91       	pop	r18
     dee:	0f 90       	pop	r0
     df0:	0b be       	out	0x3b, r0	; 59
     df2:	0f 90       	pop	r0
     df4:	0f be       	out	0x3f, r0	; 63
     df6:	0f 90       	pop	r0
     df8:	1f 90       	pop	r1
     dfa:	18 95       	reti

00000dfc <USB_GetNextDescriptorComp>:

uint8_t USB_GetNextDescriptorComp(uint16_t* const BytesRem, void** const CurrConfigLoc, ConfigComparatorPtr_t const ComparatorRoutine)
{
     dfc:	af 92       	push	r10
     dfe:	bf 92       	push	r11
     e00:	cf 92       	push	r12
     e02:	df 92       	push	r13
     e04:	ef 92       	push	r14
     e06:	ff 92       	push	r15
     e08:	0f 93       	push	r16
     e0a:	1f 93       	push	r17
     e0c:	cf 93       	push	r28
     e0e:	df 93       	push	r29
     e10:	7c 01       	movw	r14, r24
     e12:	8b 01       	movw	r16, r22
     e14:	5a 01       	movw	r10, r20
     e16:	21 c0       	rjmp	.+66     	; 0xe5a <USB_GetNextDescriptorComp+0x5e>
	uint8_t ErrorCode;

	while (*BytesRem)
	{
		uint8_t* PrevDescLoc  = *CurrConfigLoc;
     e18:	f8 01       	movw	r30, r16
     e1a:	c0 81       	ld	r28, Z
     e1c:	d1 81       	ldd	r29, Z+1	; 0x01
			static inline void USB_GetNextDescriptor(uint16_t* const BytesRem,
			                                         void** CurrConfigLoc) ATTR_NON_NULL_PTR_ARG(1) ATTR_NON_NULL_PTR_ARG(2);
			static inline void USB_GetNextDescriptor(uint16_t* const BytesRem,
			                                         void** CurrConfigLoc)
			{
				uint16_t CurrDescriptorSize = DESCRIPTOR_CAST(*CurrConfigLoc, USB_Descriptor_Header_t).Size;
     e1e:	88 81       	ld	r24, Y
     e20:	90 e0       	ldi	r25, 0x00	; 0

				*CurrConfigLoc  = ((uint8_t*)*CurrConfigLoc) + CurrDescriptorSize;
     e22:	9e 01       	movw	r18, r28
     e24:	28 0f       	add	r18, r24
     e26:	39 1f       	adc	r19, r25
     e28:	31 83       	std	Z+1, r19	; 0x01
     e2a:	20 83       	st	Z, r18
				*BytesRem      -= CurrDescriptorSize;
     e2c:	f7 01       	movw	r30, r14
     e2e:	20 81       	ld	r18, Z
     e30:	31 81       	ldd	r19, Z+1	; 0x01
     e32:	28 1b       	sub	r18, r24
     e34:	39 0b       	sbc	r19, r25
     e36:	31 83       	std	Z+1, r19	; 0x01
     e38:	20 83       	st	Z, r18
		uint16_t PrevBytesRem = *BytesRem;

		USB_GetNextDescriptor(BytesRem, CurrConfigLoc);

		if ((ErrorCode = ComparatorRoutine(*CurrConfigLoc)) != DESCRIPTOR_SEARCH_NotFound)
     e3a:	f8 01       	movw	r30, r16
     e3c:	80 81       	ld	r24, Z
     e3e:	91 81       	ldd	r25, Z+1	; 0x01
     e40:	f5 01       	movw	r30, r10
     e42:	09 95       	icall
     e44:	82 30       	cpi	r24, 0x02	; 2
     e46:	49 f0       	breq	.+18     	; 0xe5a <USB_GetNextDescriptorComp+0x5e>
		{
			if (ErrorCode == DESCRIPTOR_SEARCH_Fail)
     e48:	81 30       	cpi	r24, 0x01	; 1
     e4a:	71 f4       	brne	.+28     	; 0xe68 <USB_GetNextDescriptorComp+0x6c>
			{
				*CurrConfigLoc = PrevDescLoc;
     e4c:	f8 01       	movw	r30, r16
     e4e:	c0 83       	st	Z, r28
     e50:	d1 83       	std	Z+1, r29	; 0x01
				*BytesRem      = PrevBytesRem;
     e52:	f7 01       	movw	r30, r14
     e54:	d1 82       	std	Z+1, r13	; 0x01
     e56:	c0 82       	st	Z, r12
     e58:	07 c0       	rjmp	.+14     	; 0xe68 <USB_GetNextDescriptorComp+0x6c>

uint8_t USB_GetNextDescriptorComp(uint16_t* const BytesRem, void** const CurrConfigLoc, ConfigComparatorPtr_t const ComparatorRoutine)
{
	uint8_t ErrorCode;

	while (*BytesRem)
     e5a:	f7 01       	movw	r30, r14
     e5c:	c0 80       	ld	r12, Z
     e5e:	d1 80       	ldd	r13, Z+1	; 0x01
     e60:	c1 14       	cp	r12, r1
     e62:	d1 04       	cpc	r13, r1
     e64:	c9 f6       	brne	.-78     	; 0xe18 <USB_GetNextDescriptorComp+0x1c>
     e66:	82 e0       	ldi	r24, 0x02	; 2
			return ErrorCode;
		}
	}

	return DESCRIPTOR_SEARCH_COMP_EndOfDescriptor;
}
     e68:	df 91       	pop	r29
     e6a:	cf 91       	pop	r28
     e6c:	1f 91       	pop	r17
     e6e:	0f 91       	pop	r16
     e70:	ff 90       	pop	r15
     e72:	ef 90       	pop	r14
     e74:	df 90       	pop	r13
     e76:	cf 90       	pop	r12
     e78:	bf 90       	pop	r11
     e7a:	af 90       	pop	r10
     e7c:	08 95       	ret

00000e7e <USB_Host_GetDeviceConfigDescriptor>:
#include "ConfigDescriptor.h"

#if defined(USB_CAN_BE_HOST)
uint8_t USB_Host_GetDeviceConfigDescriptor(uint8_t ConfigNumber, uint16_t* const ConfigSizePtr,
                                           void* BufferPtr, uint16_t BufferSize)
{
     e7e:	cf 92       	push	r12
     e80:	df 92       	push	r13
     e82:	ef 92       	push	r14
     e84:	ff 92       	push	r15
     e86:	0f 93       	push	r16
     e88:	1f 93       	push	r17
     e8a:	df 93       	push	r29
     e8c:	cf 93       	push	r28
     e8e:	cd b7       	in	r28, 0x3d	; 61
     e90:	de b7       	in	r29, 0x3e	; 62
     e92:	29 97       	sbiw	r28, 0x09	; 9
     e94:	0f b6       	in	r0, 0x3f	; 63
     e96:	f8 94       	cli
     e98:	de bf       	out	0x3e, r29	; 62
     e9a:	0f be       	out	0x3f, r0	; 63
     e9c:	cd bf       	out	0x3d, r28	; 61
     e9e:	6b 01       	movw	r12, r22
     ea0:	8a 01       	movw	r16, r20
     ea2:	79 01       	movw	r14, r18
	uint8_t ErrorCode;
	uint8_t ConfigHeader[sizeof(USB_Descriptor_Configuration_Header_t)];

	USB_ControlRequest = (USB_Request_Header_t)
     ea4:	90 e8       	ldi	r25, 0x80	; 128
     ea6:	90 93 4e 05 	sts	0x054E, r25
     eaa:	96 e0       	ldi	r25, 0x06	; 6
     eac:	90 93 4f 05 	sts	0x054F, r25
     eb0:	90 e0       	ldi	r25, 0x00	; 0
     eb2:	01 97       	sbiw	r24, 0x01	; 1
     eb4:	92 60       	ori	r25, 0x02	; 2
     eb6:	90 93 51 05 	sts	0x0551, r25
     eba:	80 93 50 05 	sts	0x0550, r24
     ebe:	10 92 53 05 	sts	0x0553, r1
     ec2:	10 92 52 05 	sts	0x0552, r1
     ec6:	89 e0       	ldi	r24, 0x09	; 9
     ec8:	90 e0       	ldi	r25, 0x00	; 0
     eca:	90 93 55 05 	sts	0x0555, r25
     ece:	80 93 54 05 	sts	0x0554, r24
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
     ed2:	10 92 a7 00 	sts	0x00A7, r1
			.wLength       = sizeof(USB_Descriptor_Configuration_Header_t),
		};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	if ((ErrorCode = USB_Host_SendControlRequest(ConfigHeader)) != HOST_SENDCONTROL_Successful)
     ed6:	ce 01       	movw	r24, r28
     ed8:	01 96       	adiw	r24, 0x01	; 1
     eda:	55 d0       	rcall	.+170    	; 0xf86 <USB_Host_SendControlRequest>
     edc:	28 2f       	mov	r18, r24
     ede:	88 23       	and	r24, r24
     ee0:	c1 f4       	brne	.+48     	; 0xf12 <USB_Host_GetDeviceConfigDescriptor+0x94>
	  return ErrorCode;

	*ConfigSizePtr = DESCRIPTOR_PCAST(ConfigHeader, USB_Descriptor_Configuration_Header_t)->TotalConfigurationSize;
     ee2:	8b 81       	ldd	r24, Y+3	; 0x03
     ee4:	9c 81       	ldd	r25, Y+4	; 0x04
     ee6:	f6 01       	movw	r30, r12
     ee8:	91 83       	std	Z+1, r25	; 0x01
     eea:	80 83       	st	Z, r24

	if (*ConfigSizePtr > BufferSize)
     eec:	e8 16       	cp	r14, r24
     eee:	f9 06       	cpc	r15, r25
     ef0:	10 f4       	brcc	.+4      	; 0xef6 <USB_Host_GetDeviceConfigDescriptor+0x78>
     ef2:	25 e0       	ldi	r18, 0x05	; 5
     ef4:	0e c0       	rjmp	.+28     	; 0xf12 <USB_Host_GetDeviceConfigDescriptor+0x94>
	  return HOST_GETCONFIG_BuffOverflow;

	USB_ControlRequest.wLength = *ConfigSizePtr;
     ef6:	90 93 55 05 	sts	0x0555, r25
     efa:	80 93 54 05 	sts	0x0554, r24

	if ((ErrorCode = USB_Host_SendControlRequest(BufferPtr)) != HOST_SENDCONTROL_Successful)
     efe:	c8 01       	movw	r24, r16
     f00:	42 d0       	rcall	.+132    	; 0xf86 <USB_Host_SendControlRequest>
     f02:	28 2f       	mov	r18, r24
     f04:	88 23       	and	r24, r24
     f06:	29 f4       	brne	.+10     	; 0xf12 <USB_Host_GetDeviceConfigDescriptor+0x94>
	  return ErrorCode;

	if (DESCRIPTOR_TYPE(BufferPtr) != DTYPE_Configuration)
     f08:	f8 01       	movw	r30, r16
     f0a:	81 81       	ldd	r24, Z+1	; 0x01
     f0c:	82 30       	cpi	r24, 0x02	; 2
     f0e:	09 f0       	breq	.+2      	; 0xf12 <USB_Host_GetDeviceConfigDescriptor+0x94>
     f10:	26 e0       	ldi	r18, 0x06	; 6
	  return HOST_GETCONFIG_InvalidData;

	return HOST_GETCONFIG_Successful;
}
     f12:	82 2f       	mov	r24, r18
     f14:	29 96       	adiw	r28, 0x09	; 9
     f16:	0f b6       	in	r0, 0x3f	; 63
     f18:	f8 94       	cli
     f1a:	de bf       	out	0x3e, r29	; 62
     f1c:	0f be       	out	0x3f, r0	; 63
     f1e:	cd bf       	out	0x3d, r28	; 61
     f20:	cf 91       	pop	r28
     f22:	df 91       	pop	r29
     f24:	1f 91       	pop	r17
     f26:	0f 91       	pop	r16
     f28:	ff 90       	pop	r15
     f2a:	ef 90       	pop	r14
     f2c:	df 90       	pop	r13
     f2e:	cf 90       	pop	r12
     f30:	08 95       	ret

00000f32 <USB_Event_Stub>:
#include "Events.h"

void USB_Event_Stub(void)
{

}
     f32:	08 95       	ret

00000f34 <USB_Host_WaitForIOS>:

	return ReturnStatus;
}

static uint8_t USB_Host_WaitForIOS(const uint8_t WaitType)
{
     f34:	1f 93       	push	r17
     f36:	cf 93       	push	r28
     f38:	df 93       	push	r29
     f3a:	18 2f       	mov	r17, r24
     f3c:	c8 ee       	ldi	r28, 0xE8	; 232
     f3e:	d3 e0       	ldi	r29, 0x03	; 3
     f40:	09 c0       	rjmp	.+18     	; 0xf54 <USB_Host_WaitForIOS+0x20>
	         ((WaitType == USB_HOST_WAITFOR_InReceived) && Pipe_IsINReceived()) ||
	         ((WaitType == USB_HOST_WAITFOR_OutReady)   && Pipe_IsOUTReady())))
	{
		uint8_t ErrorCode;

		if ((ErrorCode = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
     f42:	81 e0       	ldi	r24, 0x01	; 1
     f44:	ca db       	rcall	.-2156   	; 0x6da <USB_Host_WaitMS>
     f46:	88 23       	and	r24, r24
     f48:	d1 f4       	brne	.+52     	; 0xf7e <USB_Host_WaitForIOS+0x4a>
		  return ErrorCode;

		if (!(TimeoutCounter--))
     f4a:	20 97       	sbiw	r28, 0x00	; 0
     f4c:	11 f4       	brne	.+4      	; 0xf52 <USB_Host_WaitForIOS+0x1e>
     f4e:	84 e0       	ldi	r24, 0x04	; 4
     f50:	16 c0       	rjmp	.+44     	; 0xf7e <USB_Host_WaitForIOS+0x4a>
     f52:	21 97       	sbiw	r28, 0x01	; 1
	uint8_t  TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#else
	uint16_t TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#endif

	while (!(((WaitType == USB_HOST_WAITFOR_SetupSent)  && Pipe_IsSETUPSent())  ||
     f54:	11 23       	and	r17, r17
     f56:	29 f4       	brne	.+10     	; 0xf62 <USB_Host_WaitForIOS+0x2e>
			 *  \return Boolean true if the current pipe is ready for a SETUP packet, false otherwise.
			 */
			static inline bool Pipe_IsSETUPSent(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsSETUPSent(void)
			{
				return ((UPINTX & (1 << TXSTPI)) ? true : false);
     f58:	80 91 a6 00 	lds	r24, 0x00A6
     f5c:	83 ff       	sbrs	r24, 3
     f5e:	f1 cf       	rjmp	.-30     	; 0xf42 <USB_Host_WaitForIOS+0xe>
     f60:	0d c0       	rjmp	.+26     	; 0xf7c <USB_Host_WaitForIOS+0x48>
     f62:	11 30       	cpi	r17, 0x01	; 1
     f64:	29 f4       	brne	.+10     	; 0xf70 <USB_Host_WaitForIOS+0x3c>
			 *  \return Boolean true if the current pipe has received an IN packet, false otherwise.
			 */
			static inline bool Pipe_IsINReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsINReceived(void)
			{
				return ((UPINTX & (1 << RXINI)) ? true : false);
     f66:	80 91 a6 00 	lds	r24, 0x00A6
     f6a:	80 ff       	sbrs	r24, 0
     f6c:	ea cf       	rjmp	.-44     	; 0xf42 <USB_Host_WaitForIOS+0xe>
     f6e:	06 c0       	rjmp	.+12     	; 0xf7c <USB_Host_WaitForIOS+0x48>
     f70:	12 30       	cpi	r17, 0x02	; 2
     f72:	39 f7       	brne	.-50     	; 0xf42 <USB_Host_WaitForIOS+0xe>
			 *  \return Boolean true if the current pipe is ready for an OUT packet, false otherwise.
			 */
			static inline bool Pipe_IsOUTReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsOUTReady(void)
			{
				return ((UPINTX & (1 << TXOUTI)) ? true : false);
     f74:	80 91 a6 00 	lds	r24, 0x00A6
     f78:	82 ff       	sbrs	r24, 2
     f7a:	e3 cf       	rjmp	.-58     	; 0xf42 <USB_Host_WaitForIOS+0xe>
     f7c:	80 e0       	ldi	r24, 0x00	; 0
		if (!(TimeoutCounter--))
		  return HOST_SENDCONTROL_SoftwareTimeOut;
	}

	return HOST_SENDCONTROL_Successful;
}
     f7e:	df 91       	pop	r29
     f80:	cf 91       	pop	r28
     f82:	1f 91       	pop	r17
     f84:	08 95       	ret

00000f86 <USB_Host_SendControlRequest>:

#define  __INCLUDE_FROM_HOSTSTDREQ_C
#include "HostStandardReq.h"

uint8_t USB_Host_SendControlRequest(void* const BufferPtr)
{
     f86:	ff 92       	push	r15
     f88:	0f 93       	push	r16
     f8a:	1f 93       	push	r17
     f8c:	cf 93       	push	r28
     f8e:	df 93       	push	r29
     f90:	18 2f       	mov	r17, r24
     f92:	09 2f       	mov	r16, r25
			 *  \return Boolean true if the bus is currently suspended, false otherwise.
			 */
			static inline bool USB_Host_IsBusSuspended(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusSuspended(void)
			{
				return ((UHCON & (1 << SOFEN)) ? false : true);
     f94:	f0 90 9e 00 	lds	r15, 0x009E
	uint8_t* HeaderStream   = (uint8_t*)&USB_ControlRequest;
	uint8_t* DataStream     = (uint8_t*)BufferPtr;
	bool     BusSuspended   = USB_Host_IsBusSuspended();
	uint8_t  ReturnStatus   = HOST_SENDCONTROL_Successful;
	uint16_t DataLen        = USB_ControlRequest.wLength;
     f98:	c0 91 54 05 	lds	r28, 0x0554
     f9c:	d0 91 55 05 	lds	r29, 0x0555
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
     fa0:	80 91 9e 00 	lds	r24, 0x009E
     fa4:	81 60       	ori	r24, 0x01	; 1
     fa6:	80 93 9e 00 	sts	0x009E, r24

	USB_Host_ResumeBus();

	if ((ReturnStatus = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
     faa:	81 e0       	ldi	r24, 0x01	; 1
     fac:	96 db       	rcall	.-2260   	; 0x6da <USB_Host_WaitMS>
     fae:	98 2f       	mov	r25, r24
     fb0:	88 23       	and	r24, r24
     fb2:	09 f0       	breq	.+2      	; 0xfb6 <USB_Host_SendControlRequest+0x30>
     fb4:	d2 c0       	rjmp	.+420    	; 0x115a <USB_Host_SendControlRequest+0x1d4>
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
     fb6:	80 91 aa 00 	lds	r24, 0x00AA
     fba:	8f 7c       	andi	r24, 0xCF	; 207
     fbc:	80 93 aa 00 	sts	0x00AA, r24
			 *  flag for the pipe.
			 */
			static inline void Pipe_ClearErrorFlags(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearErrorFlags(void)
			{
				UPERRX = 0;
     fc0:	10 92 f5 00 	sts	0x00F5, r1

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
     fc4:	80 91 a9 00 	lds	r24, 0x00A9
     fc8:	8f 7b       	andi	r24, 0xBF	; 191
     fca:	80 93 a9 00 	sts	0x00A9, r24
     fce:	ee e4       	ldi	r30, 0x4E	; 78
     fd0:	f5 e0       	ldi	r31, 0x05	; 5
	Pipe_ClearErrorFlags();

	Pipe_Unfreeze();

	for (uint8_t HeaderByte = 0; HeaderByte < sizeof(USB_Request_Header_t); HeaderByte++)
	  Pipe_Write_Byte(*(HeaderStream++));
     fd2:	81 91       	ld	r24, Z+
			 *  \param[in] Byte  Next byte to write into the the currently selected pipe's FIFO buffer.
			 */
			static inline void Pipe_Write_Byte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Write_Byte(const uint8_t Byte)
			{
				UPDATX = Byte;
     fd4:	80 93 af 00 	sts	0x00AF, r24
	Pipe_SetPipeToken(PIPE_TOKEN_SETUP);
	Pipe_ClearErrorFlags();

	Pipe_Unfreeze();

	for (uint8_t HeaderByte = 0; HeaderByte < sizeof(USB_Request_Header_t); HeaderByte++)
     fd8:	85 e0       	ldi	r24, 0x05	; 5
     fda:	e6 35       	cpi	r30, 0x56	; 86
     fdc:	f8 07       	cpc	r31, r24
     fde:	c9 f7       	brne	.-14     	; 0xfd2 <USB_Host_SendControlRequest+0x4c>
			 *  \ingroup Group_PipePacketManagement
			 */
			static inline void Pipe_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearSETUP(void)
			{
				UPINTX &= ~((1 << TXSTPI) | (1 << FIFOCON));
     fe0:	80 91 a6 00 	lds	r24, 0x00A6
     fe4:	87 77       	andi	r24, 0x77	; 119
     fe6:	80 93 a6 00 	sts	0x00A6, r24
	  Pipe_Write_Byte(*(HeaderStream++));

	Pipe_ClearSETUP();

	if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_SetupSent)) != HOST_SENDCONTROL_Successful)
     fea:	80 e0       	ldi	r24, 0x00	; 0
     fec:	a3 df       	rcall	.-186    	; 0xf34 <USB_Host_WaitForIOS>
     fee:	98 2f       	mov	r25, r24
     ff0:	88 23       	and	r24, r24
     ff2:	09 f0       	breq	.+2      	; 0xff6 <USB_Host_SendControlRequest+0x70>
     ff4:	b2 c0       	rjmp	.+356    	; 0x115a <USB_Host_SendControlRequest+0x1d4>

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
     ff6:	80 91 a9 00 	lds	r24, 0x00A9
     ffa:	80 64       	ori	r24, 0x40	; 64
     ffc:	80 93 a9 00 	sts	0x00A9, r24
	  goto End_Of_Control_Send;

	Pipe_Freeze();

	if ((ReturnStatus = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
    1000:	81 e0       	ldi	r24, 0x01	; 1
    1002:	6b db       	rcall	.-2346   	; 0x6da <USB_Host_WaitMS>
    1004:	98 2f       	mov	r25, r24
    1006:	88 23       	and	r24, r24
    1008:	09 f0       	breq	.+2      	; 0x100c <USB_Host_SendControlRequest+0x86>
    100a:	a7 c0       	rjmp	.+334    	; 0x115a <USB_Host_SendControlRequest+0x1d4>
#include "HostStandardReq.h"

uint8_t USB_Host_SendControlRequest(void* const BufferPtr)
{
	uint8_t* HeaderStream   = (uint8_t*)&USB_ControlRequest;
	uint8_t* DataStream     = (uint8_t*)BufferPtr;
    100c:	21 2f       	mov	r18, r17
    100e:	30 2f       	mov	r19, r16
    1010:	c9 01       	movw	r24, r18
    1012:	8c 01       	movw	r16, r24
	Pipe_Freeze();

	if ((ReturnStatus = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
	  goto End_Of_Control_Send;

	if ((USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_DIRECTION) == REQDIR_DEVICETOHOST)
    1014:	80 91 4e 05 	lds	r24, 0x054E
    1018:	87 ff       	sbrs	r24, 7
    101a:	52 c0       	rjmp	.+164    	; 0x10c0 <USB_Host_SendControlRequest+0x13a>
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    101c:	80 91 aa 00 	lds	r24, 0x00AA
    1020:	8f 7c       	andi	r24, 0xCF	; 207
    1022:	80 61       	ori	r24, 0x10	; 16
    1024:	80 93 aa 00 	sts	0x00AA, r24
	{
		Pipe_SetPipeToken(PIPE_TOKEN_IN);

		if (DataStream != NULL)
    1028:	01 15       	cp	r16, r1
    102a:	11 05       	cpc	r17, r1
    102c:	69 f5       	brne	.+90     	; 0x1088 <USB_Host_SendControlRequest+0x102>
    102e:	2e c0       	rjmp	.+92     	; 0x108c <USB_Host_SendControlRequest+0x106>

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    1030:	80 91 a9 00 	lds	r24, 0x00A9
    1034:	8f 7b       	andi	r24, 0xBF	; 191
    1036:	80 93 a9 00 	sts	0x00A9, r24
		{
			while (DataLen)
			{
				Pipe_Unfreeze();

				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_InReceived)) != HOST_SENDCONTROL_Successful)
    103a:	81 e0       	ldi	r24, 0x01	; 1
    103c:	7b df       	rcall	.-266    	; 0xf34 <USB_Host_WaitForIOS>
    103e:	98 2f       	mov	r25, r24
    1040:	88 23       	and	r24, r24
    1042:	09 f0       	breq	.+2      	; 0x1046 <USB_Host_SendControlRequest+0xc0>
    1044:	8a c0       	rjmp	.+276    	; 0x115a <USB_Host_SendControlRequest+0x1d4>
			 *  \return Total number of bytes in the currently selected Pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
    1046:	80 91 f6 00 	lds	r24, 0x00F6
    104a:	90 91 f7 00 	lds	r25, 0x00F7
				  goto End_Of_Control_Send;

				if (!(Pipe_BytesInPipe()))
    104e:	89 2b       	or	r24, r25
    1050:	49 f4       	brne	.+18     	; 0x1064 <USB_Host_SendControlRequest+0xde>
    1052:	c0 e0       	ldi	r28, 0x00	; 0
    1054:	d0 e0       	ldi	r29, 0x00	; 0
    1056:	06 c0       	rjmp	.+12     	; 0x1064 <USB_Host_SendControlRequest+0xde>
			 *  \return Next byte in the currently selected pipe's FIFO buffer.
			 */
			static inline uint8_t Pipe_Read_Byte(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_Read_Byte(void)
			{
				return UPDATX;
    1058:	80 91 af 00 	lds	r24, 0x00AF
				  DataLen = 0;

				while (Pipe_BytesInPipe() && DataLen)
				{
					*(DataStream++) = Pipe_Read_Byte();
    105c:	f8 01       	movw	r30, r16
    105e:	81 93       	st	Z+, r24
    1060:	8f 01       	movw	r16, r30
					DataLen--;
    1062:	21 97       	sbiw	r28, 0x01	; 1
			 *  \return Total number of bytes in the currently selected Pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
    1064:	80 91 f6 00 	lds	r24, 0x00F6
    1068:	90 91 f7 00 	lds	r25, 0x00F7
				  goto End_Of_Control_Send;

				if (!(Pipe_BytesInPipe()))
				  DataLen = 0;

				while (Pipe_BytesInPipe() && DataLen)
    106c:	89 2b       	or	r24, r25
    106e:	11 f0       	breq	.+4      	; 0x1074 <USB_Host_SendControlRequest+0xee>
    1070:	20 97       	sbiw	r28, 0x00	; 0
    1072:	91 f7       	brne	.-28     	; 0x1058 <USB_Host_SendControlRequest+0xd2>

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    1074:	80 91 a9 00 	lds	r24, 0x00A9
    1078:	80 64       	ori	r24, 0x40	; 64
    107a:	80 93 a9 00 	sts	0x00A9, r24
			 *  \ingroup Group_PipePacketManagement
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
    107e:	80 91 a6 00 	lds	r24, 0x00A6
    1082:	8e 77       	andi	r24, 0x7E	; 126
    1084:	80 93 a6 00 	sts	0x00A6, r24
	{
		Pipe_SetPipeToken(PIPE_TOKEN_IN);

		if (DataStream != NULL)
		{
			while (DataLen)
    1088:	20 97       	sbiw	r28, 0x00	; 0
    108a:	91 f6       	brne	.-92     	; 0x1030 <USB_Host_SendControlRequest+0xaa>
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    108c:	80 91 aa 00 	lds	r24, 0x00AA
    1090:	8f 7c       	andi	r24, 0xCF	; 207
    1092:	80 62       	ori	r24, 0x20	; 32
    1094:	80 93 aa 00 	sts	0x00AA, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    1098:	80 91 a9 00 	lds	r24, 0x00A9
    109c:	8f 7b       	andi	r24, 0xBF	; 191
    109e:	80 93 a9 00 	sts	0x00A9, r24
		}

		Pipe_SetPipeToken(PIPE_TOKEN_OUT);
		Pipe_Unfreeze();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    10a2:	82 e0       	ldi	r24, 0x02	; 2
    10a4:	47 df       	rcall	.-370    	; 0xf34 <USB_Host_WaitForIOS>
    10a6:	98 2f       	mov	r25, r24
    10a8:	88 23       	and	r24, r24
    10aa:	09 f0       	breq	.+2      	; 0x10ae <USB_Host_SendControlRequest+0x128>
    10ac:	56 c0       	rjmp	.+172    	; 0x115a <USB_Host_SendControlRequest+0x1d4>
			 *  \ingroup Group_PipePacketManagement
			 */
			static inline void Pipe_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearOUT(void)
			{
				UPINTX &= ~((1 << TXOUTI) | (1 << FIFOCON));
    10ae:	80 91 a6 00 	lds	r24, 0x00A6
    10b2:	8b 77       	andi	r24, 0x7B	; 123
    10b4:	80 93 a6 00 	sts	0x00A6, r24
		  goto End_Of_Control_Send;

		Pipe_ClearOUT();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    10b8:	82 e0       	ldi	r24, 0x02	; 2
    10ba:	3c df       	rcall	.-392    	; 0xf34 <USB_Host_WaitForIOS>
    10bc:	98 2f       	mov	r25, r24
    10be:	4d c0       	rjmp	.+154    	; 0x115a <USB_Host_SendControlRequest+0x1d4>
		  goto End_Of_Control_Send;
	}
	else
	{
		if (DataStream != NULL)
    10c0:	01 15       	cp	r16, r1
    10c2:	11 05       	cpc	r17, r1
    10c4:	a9 f1       	breq	.+106    	; 0x1130 <USB_Host_SendControlRequest+0x1aa>
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    10c6:	80 91 aa 00 	lds	r24, 0x00AA
    10ca:	8f 7c       	andi	r24, 0xCF	; 207
    10cc:	80 62       	ori	r24, 0x20	; 32
    10ce:	80 93 aa 00 	sts	0x00AA, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    10d2:	80 91 a9 00 	lds	r24, 0x00A9
    10d6:	8f 7b       	andi	r24, 0xBF	; 191
    10d8:	80 93 a9 00 	sts	0x00A9, r24
    10dc:	1d c0       	rjmp	.+58     	; 0x1118 <USB_Host_SendControlRequest+0x192>
			Pipe_SetPipeToken(PIPE_TOKEN_OUT);
			Pipe_Unfreeze();

			while (DataLen)
			{
				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    10de:	82 e0       	ldi	r24, 0x02	; 2
    10e0:	29 df       	rcall	.-430    	; 0xf34 <USB_Host_WaitForIOS>
    10e2:	98 2f       	mov	r25, r24
    10e4:	88 23       	and	r24, r24
    10e6:	c9 f5       	brne	.+114    	; 0x115a <USB_Host_SendControlRequest+0x1d4>
				  goto End_Of_Control_Send;

				while (DataLen && (Pipe_BytesInPipe() < USB_ControlPipeSize))
    10e8:	80 91 3a 01 	lds	r24, 0x013A
    10ec:	28 2f       	mov	r18, r24
    10ee:	30 e0       	ldi	r19, 0x00	; 0
    10f0:	07 c0       	rjmp	.+14     	; 0x1100 <USB_Host_SendControlRequest+0x17a>
				{
					Pipe_Write_Byte(*(DataStream++));
    10f2:	f8 01       	movw	r30, r16
    10f4:	81 91       	ld	r24, Z+
    10f6:	8f 01       	movw	r16, r30
			 *  \param[in] Byte  Next byte to write into the the currently selected pipe's FIFO buffer.
			 */
			static inline void Pipe_Write_Byte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Write_Byte(const uint8_t Byte)
			{
				UPDATX = Byte;
    10f8:	80 93 af 00 	sts	0x00AF, r24
					DataLen--;
    10fc:	21 97       	sbiw	r28, 0x01	; 1
			while (DataLen)
			{
				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
				  goto End_Of_Control_Send;

				while (DataLen && (Pipe_BytesInPipe() < USB_ControlPipeSize))
    10fe:	39 f0       	breq	.+14     	; 0x110e <USB_Host_SendControlRequest+0x188>
			 *  \return Total number of bytes in the currently selected Pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
    1100:	80 91 f6 00 	lds	r24, 0x00F6
    1104:	90 91 f7 00 	lds	r25, 0x00F7
    1108:	82 17       	cp	r24, r18
    110a:	93 07       	cpc	r25, r19
    110c:	90 f3       	brcs	.-28     	; 0x10f2 <USB_Host_SendControlRequest+0x16c>
			 *  \ingroup Group_PipePacketManagement
			 */
			static inline void Pipe_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearOUT(void)
			{
				UPINTX &= ~((1 << TXOUTI) | (1 << FIFOCON));
    110e:	80 91 a6 00 	lds	r24, 0x00A6
    1112:	8b 77       	andi	r24, 0x7B	; 123
    1114:	80 93 a6 00 	sts	0x00A6, r24
		if (DataStream != NULL)
		{
			Pipe_SetPipeToken(PIPE_TOKEN_OUT);
			Pipe_Unfreeze();

			while (DataLen)
    1118:	20 97       	sbiw	r28, 0x00	; 0
    111a:	09 f7       	brne	.-62     	; 0x10de <USB_Host_SendControlRequest+0x158>
				}

				Pipe_ClearOUT();
			}

			if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    111c:	82 e0       	ldi	r24, 0x02	; 2
    111e:	0a df       	rcall	.-492    	; 0xf34 <USB_Host_WaitForIOS>
    1120:	98 2f       	mov	r25, r24
    1122:	88 23       	and	r24, r24
    1124:	d1 f4       	brne	.+52     	; 0x115a <USB_Host_SendControlRequest+0x1d4>

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    1126:	80 91 a9 00 	lds	r24, 0x00A9
    112a:	80 64       	ori	r24, 0x40	; 64
    112c:	80 93 a9 00 	sts	0x00A9, r24
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    1130:	80 91 aa 00 	lds	r24, 0x00AA
    1134:	8f 7c       	andi	r24, 0xCF	; 207
    1136:	80 61       	ori	r24, 0x10	; 16
    1138:	80 93 aa 00 	sts	0x00AA, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    113c:	80 91 a9 00 	lds	r24, 0x00A9
    1140:	8f 7b       	andi	r24, 0xBF	; 191
    1142:	80 93 a9 00 	sts	0x00A9, r24
		}

		Pipe_SetPipeToken(PIPE_TOKEN_IN);
		Pipe_Unfreeze();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_InReceived)) != HOST_SENDCONTROL_Successful)
    1146:	81 e0       	ldi	r24, 0x01	; 1
    1148:	f5 de       	rcall	.-534    	; 0xf34 <USB_Host_WaitForIOS>
    114a:	98 2f       	mov	r25, r24
    114c:	88 23       	and	r24, r24
    114e:	29 f4       	brne	.+10     	; 0x115a <USB_Host_SendControlRequest+0x1d4>
			 *  \ingroup Group_PipePacketManagement
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
    1150:	80 91 a6 00 	lds	r24, 0x00A6
    1154:	8e 77       	andi	r24, 0x7E	; 126
    1156:	80 93 a6 00 	sts	0x00A6, r24

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    115a:	80 91 a9 00 	lds	r24, 0x00A9
    115e:	80 64       	ori	r24, 0x40	; 64
    1160:	80 93 a9 00 	sts	0x00A9, r24
	}

End_Of_Control_Send:
	Pipe_Freeze();

	if (BusSuspended)
    1164:	f0 fc       	sbrc	r15, 0
    1166:	05 c0       	rjmp	.+10     	; 0x1172 <USB_Host_SendControlRequest+0x1ec>
			 *  messages to the device.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				UHCON &= ~(1 << SOFEN);
    1168:	80 91 9e 00 	lds	r24, 0x009E
    116c:	8e 7f       	andi	r24, 0xFE	; 254
    116e:	80 93 9e 00 	sts	0x009E, r24
			 *  \param[in] PipeNumber  Index of the pipe to reset.
			 */
			static inline void Pipe_ResetPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ResetPipe(const uint8_t PipeNumber)
			{
				UPRST = (1 << PipeNumber);
    1172:	81 e0       	ldi	r24, 0x01	; 1
    1174:	80 93 a8 00 	sts	0x00A8, r24
				UPRST = 0;
    1178:	10 92 a8 00 	sts	0x00A8, r1
	  USB_Host_SuspendBus();

	Pipe_ResetPipe(PIPE_CONTROLPIPE);

	return ReturnStatus;
}
    117c:	89 2f       	mov	r24, r25
    117e:	df 91       	pop	r29
    1180:	cf 91       	pop	r28
    1182:	1f 91       	pop	r17
    1184:	0f 91       	pop	r16
    1186:	ff 90       	pop	r15
    1188:	08 95       	ret

0000118a <Pipe_Read_Stream_LE>:
uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE Buffer,
                            uint16_t Length
                            __CALLBACK_PARAM)
{
    118a:	df 92       	push	r13
    118c:	ef 92       	push	r14
    118e:	ff 92       	push	r15
    1190:	0f 93       	push	r16
    1192:	1f 93       	push	r17
    1194:	cf 93       	push	r28
    1196:	df 93       	push	r29
    1198:	18 2f       	mov	r17, r24
    119a:	09 2f       	mov	r16, r25
    119c:	eb 01       	movw	r28, r22
    119e:	7a 01       	movw	r14, r20
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    11a0:	80 91 aa 00 	lds	r24, 0x00AA
    11a4:	8f 7c       	andi	r24, 0xCF	; 207
    11a6:	80 61       	ori	r24, 0x10	; 16
    11a8:	80 93 aa 00 	sts	0x00AA, r24
	uint8_t* DataStream = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	uint8_t  ErrorCode;

	Pipe_SetPipeToken(TEMPLATE_TOKEN);

	if ((ErrorCode = Pipe_WaitUntilReady()))
    11ac:	eb dc       	rcall	.-1578   	; 0xb84 <Pipe_WaitUntilReady>
    11ae:	d8 2e       	mov	r13, r24
    11b0:	88 23       	and	r24, r24
    11b2:	19 f5       	brne	.+70     	; 0x11fa <Pipe_Read_Stream_LE+0x70>
uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE Buffer,
                            uint16_t Length
                            __CALLBACK_PARAM)
{
	uint8_t* DataStream = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
    11b4:	81 2f       	mov	r24, r17
    11b6:	90 2f       	mov	r25, r16
    11b8:	9c 01       	movw	r18, r24
    11ba:	89 01       	movw	r16, r18
    11bc:	1c c0       	rjmp	.+56     	; 0x11f6 <Pipe_Read_Stream_LE+0x6c>
			 *  \return Boolean true if the currently selected pipe may be read from or written to, depending on its direction.
			 */
			static inline bool Pipe_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsReadWriteAllowed(void)
			{
				return ((UPINTX & (1 << RWAL)) ? true : false);
    11be:	80 91 a6 00 	lds	r24, 0x00A6
	}
	#endif

	while (Length)
	{
		if (!(Pipe_IsReadWriteAllowed()))
    11c2:	85 fd       	sbrc	r24, 5
    11c4:	12 c0       	rjmp	.+36     	; 0x11ea <Pipe_Read_Stream_LE+0x60>
			 *  \ingroup Group_PipePacketManagement
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
    11c6:	80 91 a6 00 	lds	r24, 0x00A6
    11ca:	8e 77       	andi	r24, 0x7E	; 126
    11cc:	80 93 a6 00 	sts	0x00A6, r24
		{
			TEMPLATE_CLEAR_PIPE();

			#if !defined(NO_STREAM_CALLBACKS)
			if ((Callback != NULL) && (Callback() == STREAMCALLBACK_Abort))
    11d0:	e1 14       	cp	r14, r1
    11d2:	f1 04       	cpc	r15, r1
    11d4:	31 f0       	breq	.+12     	; 0x11e2 <Pipe_Read_Stream_LE+0x58>
    11d6:	f7 01       	movw	r30, r14
    11d8:	09 95       	icall
    11da:	81 30       	cpi	r24, 0x01	; 1
    11dc:	11 f4       	brne	.+4      	; 0x11e2 <Pipe_Read_Stream_LE+0x58>
    11de:	84 e0       	ldi	r24, 0x04	; 4
    11e0:	0d c0       	rjmp	.+26     	; 0x11fc <Pipe_Read_Stream_LE+0x72>
			  return PIPE_RWSTREAM_CallbackAborted;
			#endif

			if ((ErrorCode = Pipe_WaitUntilReady()))
    11e2:	d0 dc       	rcall	.-1632   	; 0xb84 <Pipe_WaitUntilReady>
    11e4:	88 23       	and	r24, r24
    11e6:	39 f0       	breq	.+14     	; 0x11f6 <Pipe_Read_Stream_LE+0x6c>
    11e8:	09 c0       	rjmp	.+18     	; 0x11fc <Pipe_Read_Stream_LE+0x72>
			 *  \return Next byte in the currently selected pipe's FIFO buffer.
			 */
			static inline uint8_t Pipe_Read_Byte(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_Read_Byte(void)
			{
				return UPDATX;
    11ea:	80 91 af 00 	lds	r24, 0x00AF
			  return ErrorCode;
		}
		else
		{
			TEMPLATE_TRANSFER_BYTE(DataStream);
    11ee:	f8 01       	movw	r30, r16
    11f0:	81 93       	st	Z+, r24
    11f2:	8f 01       	movw	r16, r30
			Length--;
    11f4:	21 97       	sbiw	r28, 0x01	; 1
				} while (Length >= 8);
		}
	}
	#endif

	while (Length)
    11f6:	20 97       	sbiw	r28, 0x00	; 0
    11f8:	11 f7       	brne	.-60     	; 0x11be <Pipe_Read_Stream_LE+0x34>
    11fa:	8d 2d       	mov	r24, r13
			Length--;
		}
	}

	return PIPE_RWSTREAM_NoError;
}
    11fc:	df 91       	pop	r29
    11fe:	cf 91       	pop	r28
    1200:	1f 91       	pop	r17
    1202:	0f 91       	pop	r16
    1204:	ff 90       	pop	r15
    1206:	ef 90       	pop	r14
    1208:	df 90       	pop	r13
    120a:	08 95       	ret

0000120c <Pipe_Discard_Stream>:

#include "PipeStream.h"

uint8_t Pipe_Discard_Stream(uint16_t Length
                            __CALLBACK_PARAM)
{
    120c:	ff 92       	push	r15
    120e:	0f 93       	push	r16
    1210:	1f 93       	push	r17
    1212:	cf 93       	push	r28
    1214:	df 93       	push	r29
    1216:	ec 01       	movw	r28, r24
    1218:	8b 01       	movw	r16, r22
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    121a:	80 91 aa 00 	lds	r24, 0x00AA
    121e:	8f 7c       	andi	r24, 0xCF	; 207
    1220:	80 61       	ori	r24, 0x10	; 16
    1222:	80 93 aa 00 	sts	0x00AA, r24
	uint8_t  ErrorCode;
	
	Pipe_SetPipeToken(PIPE_TOKEN_IN);

	if ((ErrorCode = Pipe_WaitUntilReady()))
    1226:	ae dc       	rcall	.-1700   	; 0xb84 <Pipe_WaitUntilReady>
    1228:	f8 2e       	mov	r15, r24
    122a:	88 23       	and	r24, r24
    122c:	d1 f0       	breq	.+52     	; 0x1262 <Pipe_Discard_Stream+0x56>
    122e:	1b c0       	rjmp	.+54     	; 0x1266 <Pipe_Discard_Stream+0x5a>
			 *  \return Boolean true if the currently selected pipe may be read from or written to, depending on its direction.
			 */
			static inline bool Pipe_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsReadWriteAllowed(void)
			{
				return ((UPINTX & (1 << RWAL)) ? true : false);
    1230:	80 91 a6 00 	lds	r24, 0x00A6
	}
	#endif

	while (Length)
	{
		if (!(Pipe_IsReadWriteAllowed()))
    1234:	85 fd       	sbrc	r24, 5
    1236:	12 c0       	rjmp	.+36     	; 0x125c <Pipe_Discard_Stream+0x50>
			 *  \ingroup Group_PipePacketManagement
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
    1238:	80 91 a6 00 	lds	r24, 0x00A6
    123c:	8e 77       	andi	r24, 0x7E	; 126
    123e:	80 93 a6 00 	sts	0x00A6, r24
		{
			Pipe_ClearIN();
				
			#if !defined(NO_STREAM_CALLBACKS)
			if ((Callback != NULL) && (Callback() == STREAMCALLBACK_Abort))
    1242:	01 15       	cp	r16, r1
    1244:	11 05       	cpc	r17, r1
    1246:	31 f0       	breq	.+12     	; 0x1254 <Pipe_Discard_Stream+0x48>
    1248:	f8 01       	movw	r30, r16
    124a:	09 95       	icall
    124c:	81 30       	cpi	r24, 0x01	; 1
    124e:	11 f4       	brne	.+4      	; 0x1254 <Pipe_Discard_Stream+0x48>
    1250:	84 e0       	ldi	r24, 0x04	; 4
    1252:	0a c0       	rjmp	.+20     	; 0x1268 <Pipe_Discard_Stream+0x5c>
			  return PIPE_RWSTREAM_CallbackAborted;
			#endif

			if ((ErrorCode = Pipe_WaitUntilReady()))
    1254:	97 dc       	rcall	.-1746   	; 0xb84 <Pipe_WaitUntilReady>
    1256:	88 23       	and	r24, r24
    1258:	21 f0       	breq	.+8      	; 0x1262 <Pipe_Discard_Stream+0x56>
    125a:	06 c0       	rjmp	.+12     	; 0x1268 <Pipe_Discard_Stream+0x5c>
			static inline void Pipe_Discard_Byte(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Discard_Byte(void)
			{
				uint8_t Dummy;

				Dummy = UPDATX;
    125c:	80 91 af 00 	lds	r24, 0x00AF
			  return ErrorCode;
		}
		else
		{
			Pipe_Discard_Byte();
			Length--;
    1260:	21 97       	sbiw	r28, 0x01	; 1
				} while (Length >= 8);	
		}
	}
	#endif

	while (Length)
    1262:	20 97       	sbiw	r28, 0x00	; 0
    1264:	29 f7       	brne	.-54     	; 0x1230 <Pipe_Discard_Stream+0x24>
    1266:	8f 2d       	mov	r24, r15
			Length--;
		}
	}

	return PIPE_RWSTREAM_NoError;
}
    1268:	df 91       	pop	r29
    126a:	cf 91       	pop	r28
    126c:	1f 91       	pop	r17
    126e:	0f 91       	pop	r16
    1270:	ff 90       	pop	r15
    1272:	08 95       	ret

00001274 <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
    1274:	ff 92       	push	r15
    1276:	0f 93       	push	r16
    1278:	1f 93       	push	r17
			 *  \return Index of the currently selected pipe.
			 */
			static inline uint8_t Pipe_GetCurrentPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetCurrentPipe(void)
			{
				return (UPNUM & PIPE_PIPENUM_MASK);
    127a:	07 ea       	ldi	r16, 0xA7	; 167
    127c:	10 e0       	ldi	r17, 0x00	; 0
    127e:	f8 01       	movw	r30, r16
    1280:	f0 80       	ld	r15, Z
    1282:	f7 e0       	ldi	r31, 0x07	; 7
    1284:	ff 22       	and	r15, r31
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
    1286:	f8 01       	movw	r30, r16
    1288:	10 82       	st	Z, r1
{
	uint8_t PrevPipe = Pipe_GetCurrentPipe();

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	USB_Host_ProcessNextHostState();
    128a:	d6 da       	rcall	.-2644   	; 0x838 <USB_Host_ProcessNextHostState>
    128c:	f8 01       	movw	r30, r16
    128e:	f0 82       	st	Z, r15
		if (USB_CurrentMode == USB_MODE_Device)
		  USB_DeviceTask();
		else if (USB_CurrentMode == USB_MODE_Host)
		  USB_HostTask();
	#endif
}
    1290:	1f 91       	pop	r17
    1292:	0f 91       	pop	r16
    1294:	ff 90       	pop	r15
    1296:	08 95       	ret

00001298 <DCOMP_RNDIS_Host_NextRNDISControlInterface>:

	return RNDIS_ENUMERROR_NoError;
}

static uint8_t DCOMP_RNDIS_Host_NextRNDISControlInterface(void* const CurrentDescriptor)
{
    1298:	fc 01       	movw	r30, r24
	USB_Descriptor_Header_t* Header = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Header_t);

	if (Header->Type == DTYPE_Interface)
    129a:	81 81       	ldd	r24, Z+1	; 0x01
    129c:	84 30       	cpi	r24, 0x04	; 4
    129e:	59 f4       	brne	.+22     	; 0x12b6 <DCOMP_RNDIS_Host_NextRNDISControlInterface+0x1e>
	{
		USB_Descriptor_Interface_t* Interface = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Interface_t);

		if ((Interface->Class    == CDC_CSCP_CDCClass)    &&
    12a0:	85 81       	ldd	r24, Z+5	; 0x05
    12a2:	82 30       	cpi	r24, 0x02	; 2
    12a4:	41 f4       	brne	.+16     	; 0x12b6 <DCOMP_RNDIS_Host_NextRNDISControlInterface+0x1e>
    12a6:	86 81       	ldd	r24, Z+6	; 0x06
    12a8:	82 30       	cpi	r24, 0x02	; 2
    12aa:	29 f4       	brne	.+10     	; 0x12b6 <DCOMP_RNDIS_Host_NextRNDISControlInterface+0x1e>
    12ac:	87 81       	ldd	r24, Z+7	; 0x07
    12ae:	8f 3f       	cpi	r24, 0xFF	; 255
    12b0:	11 f4       	brne	.+4      	; 0x12b6 <DCOMP_RNDIS_Host_NextRNDISControlInterface+0x1e>
    12b2:	80 e0       	ldi	r24, 0x00	; 0
    12b4:	08 95       	ret
    12b6:	82 e0       	ldi	r24, 0x02	; 2
			return DESCRIPTOR_SEARCH_Found;
		}
	}

	return DESCRIPTOR_SEARCH_NotFound;
}
    12b8:	08 95       	ret

000012ba <DCOMP_RNDIS_Host_NextRNDISDataInterface>:

static uint8_t DCOMP_RNDIS_Host_NextRNDISDataInterface(void* const CurrentDescriptor)
{
    12ba:	fc 01       	movw	r30, r24
	USB_Descriptor_Header_t* Header = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Header_t);

	if (Header->Type == DTYPE_Interface)
    12bc:	81 81       	ldd	r24, Z+1	; 0x01
    12be:	84 30       	cpi	r24, 0x04	; 4
    12c0:	41 f4       	brne	.+16     	; 0x12d2 <DCOMP_RNDIS_Host_NextRNDISDataInterface+0x18>
	{
		USB_Descriptor_Interface_t* Interface = DESCRIPTOR_PCAST(CurrentDescriptor,
		                                                         USB_Descriptor_Interface_t);

		if ((Interface->Class    == CDC_CSCP_CDCDataClass)   &&
    12c2:	85 81       	ldd	r24, Z+5	; 0x05
    12c4:	8a 30       	cpi	r24, 0x0A	; 10
    12c6:	29 f4       	brne	.+10     	; 0x12d2 <DCOMP_RNDIS_Host_NextRNDISDataInterface+0x18>
    12c8:	86 81       	ldd	r24, Z+6	; 0x06
    12ca:	88 23       	and	r24, r24
    12cc:	11 f4       	brne	.+4      	; 0x12d2 <DCOMP_RNDIS_Host_NextRNDISDataInterface+0x18>
    12ce:	87 81       	ldd	r24, Z+7	; 0x07
    12d0:	81 11       	cpse	r24, r1
    12d2:	82 e0       	ldi	r24, 0x02	; 2
			return DESCRIPTOR_SEARCH_Found;
		}
	}

	return DESCRIPTOR_SEARCH_NotFound;
}
    12d4:	08 95       	ret

000012d6 <RNDIS_Host_IsPacketReceived>:

	return HOST_SENDCONTROL_Successful;
}

bool RNDIS_Host_IsPacketReceived(USB_ClassInfo_RNDIS_Host_t* const RNDISInterfaceInfo)
{
    12d6:	fc 01       	movw	r30, r24
	bool PacketWaiting;

	if ((USB_HostState != HOST_STATE_Configured) || !(RNDISInterfaceInfo->State.IsActive))
    12d8:	80 91 56 05 	lds	r24, 0x0556
    12dc:	8c 30       	cpi	r24, 0x0C	; 12
    12de:	a1 f4       	brne	.+40     	; 0x1308 <RNDIS_Host_IsPacketReceived+0x32>
    12e0:	82 85       	ldd	r24, Z+10	; 0x0a
    12e2:	88 23       	and	r24, r24
    12e4:	89 f0       	breq	.+34     	; 0x1308 <RNDIS_Host_IsPacketReceived+0x32>
	  return false;

	Pipe_SelectPipe(RNDISInterfaceInfo->Config.DataINPipeNumber);
    12e6:	80 81       	ld	r24, Z
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
    12e8:	80 93 a7 00 	sts	0x00A7, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    12ec:	80 91 a9 00 	lds	r24, 0x00A9
    12f0:	8f 7b       	andi	r24, 0xBF	; 191
    12f2:	80 93 a9 00 	sts	0x00A9, r24
			 *  \return Boolean true if the current pipe has received an IN packet, false otherwise.
			 */
			static inline bool Pipe_IsINReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsINReceived(void)
			{
				return ((UPINTX & (1 << RXINI)) ? true : false);
    12f6:	90 91 a6 00 	lds	r25, 0x00A6
    12fa:	91 70       	andi	r25, 0x01	; 1

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    12fc:	80 91 a9 00 	lds	r24, 0x00A9
    1300:	80 64       	ori	r24, 0x40	; 64
    1302:	80 93 a9 00 	sts	0x00A9, r24
    1306:	01 c0       	rjmp	.+2      	; 0x130a <RNDIS_Host_IsPacketReceived+0x34>

	Pipe_Unfreeze();
	PacketWaiting = Pipe_IsINReceived();
	Pipe_Freeze();

	return PacketWaiting;
    1308:	90 e0       	ldi	r25, 0x00	; 0
}
    130a:	89 2f       	mov	r24, r25
    130c:	08 95       	ret

0000130e <RNDIS_Host_ReadPacket>:

uint8_t RNDIS_Host_ReadPacket(USB_ClassInfo_RNDIS_Host_t* const RNDISInterfaceInfo,
                              void* Buffer,
                              uint16_t* const PacketLength)
{
    130e:	cf 92       	push	r12
    1310:	df 92       	push	r13
    1312:	ff 92       	push	r15
    1314:	0f 93       	push	r16
    1316:	1f 93       	push	r17
    1318:	df 93       	push	r29
    131a:	cf 93       	push	r28
    131c:	cd b7       	in	r28, 0x3d	; 61
    131e:	de b7       	in	r29, 0x3e	; 62
    1320:	ac 97       	sbiw	r28, 0x2c	; 44
    1322:	0f b6       	in	r0, 0x3f	; 63
    1324:	f8 94       	cli
    1326:	de bf       	out	0x3e, r29	; 62
    1328:	0f be       	out	0x3f, r0	; 63
    132a:	cd bf       	out	0x3d, r28	; 61
    132c:	fc 01       	movw	r30, r24
    132e:	6b 01       	movw	r12, r22
    1330:	8a 01       	movw	r16, r20
	uint8_t ErrorCode;

	if ((USB_HostState != HOST_STATE_Configured) || !(RNDISInterfaceInfo->State.IsActive))
    1332:	80 91 56 05 	lds	r24, 0x0556
    1336:	8c 30       	cpi	r24, 0x0C	; 12
    1338:	09 f0       	breq	.+2      	; 0x133c <RNDIS_Host_ReadPacket+0x2e>
    133a:	50 c0       	rjmp	.+160    	; 0x13dc <RNDIS_Host_ReadPacket+0xce>
    133c:	82 85       	ldd	r24, Z+10	; 0x0a
    133e:	88 23       	and	r24, r24
    1340:	09 f4       	brne	.+2      	; 0x1344 <RNDIS_Host_ReadPacket+0x36>
    1342:	4c c0       	rjmp	.+152    	; 0x13dc <RNDIS_Host_ReadPacket+0xce>
	  return PIPE_READYWAIT_DeviceDisconnected;

	Pipe_SelectPipe(RNDISInterfaceInfo->Config.DataINPipeNumber);
    1344:	80 81       	ld	r24, Z
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
    1346:	80 93 a7 00 	sts	0x00A7, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    134a:	80 91 a9 00 	lds	r24, 0x00A9
    134e:	8f 7b       	andi	r24, 0xBF	; 191
    1350:	80 93 a9 00 	sts	0x00A9, r24
			 *  \return Boolean true if the currently selected pipe may be read from or written to, depending on its direction.
			 */
			static inline bool Pipe_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsReadWriteAllowed(void)
			{
				return ((UPINTX & (1 << RWAL)) ? true : false);
    1354:	80 91 a6 00 	lds	r24, 0x00A6
	Pipe_Unfreeze();

	if (!(Pipe_IsReadWriteAllowed()))
    1358:	85 fd       	sbrc	r24, 5
    135a:	13 c0       	rjmp	.+38     	; 0x1382 <RNDIS_Host_ReadPacket+0x74>
			 *  \return Boolean true if the current pipe has received an IN packet, false otherwise.
			 */
			static inline bool Pipe_IsINReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsINReceived(void)
			{
				return ((UPINTX & (1 << RXINI)) ? true : false);
    135c:	80 91 a6 00 	lds	r24, 0x00A6
	{
		if (Pipe_IsINReceived())
    1360:	80 ff       	sbrs	r24, 0
    1362:	05 c0       	rjmp	.+10     	; 0x136e <RNDIS_Host_ReadPacket+0x60>
			 *  \ingroup Group_PipePacketManagement
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
    1364:	80 91 a6 00 	lds	r24, 0x00A6
    1368:	8e 77       	andi	r24, 0x7E	; 126
    136a:	80 93 a6 00 	sts	0x00A6, r24
		  Pipe_ClearIN();

		*PacketLength = 0;
    136e:	f8 01       	movw	r30, r16
    1370:	11 82       	std	Z+1, r1	; 0x01
    1372:	10 82       	st	Z, r1

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    1374:	80 91 a9 00 	lds	r24, 0x00A9
    1378:	80 64       	ori	r24, 0x40	; 64
    137a:	80 93 a9 00 	sts	0x00A9, r24
    137e:	ff 24       	eor	r15, r15
    1380:	2f c0       	rjmp	.+94     	; 0x13e0 <RNDIS_Host_ReadPacket+0xd2>
		return PIPE_RWSTREAM_NoError;
	}

	RNDIS_Packet_Message_t DeviceMessage;

	if ((ErrorCode = Pipe_Read_Stream_LE(&DeviceMessage, sizeof(RNDIS_Packet_Message_t),
    1382:	ce 01       	movw	r24, r28
    1384:	01 96       	adiw	r24, 0x01	; 1
    1386:	6c e2       	ldi	r22, 0x2C	; 44
    1388:	70 e0       	ldi	r23, 0x00	; 0
    138a:	40 e0       	ldi	r20, 0x00	; 0
    138c:	50 e0       	ldi	r21, 0x00	; 0
    138e:	fd de       	rcall	.-518    	; 0x118a <Pipe_Read_Stream_LE>
    1390:	f8 2e       	mov	r15, r24
    1392:	88 23       	and	r24, r24
    1394:	29 f5       	brne	.+74     	; 0x13e0 <RNDIS_Host_ReadPacket+0xd2>
	                                     NO_STREAM_CALLBACK)) != PIPE_RWSTREAM_NoError)
	{
		return ErrorCode;
	}

	*PacketLength = (uint16_t)DeviceMessage.DataLength;
    1396:	8d 85       	ldd	r24, Y+13	; 0x0d
    1398:	9e 85       	ldd	r25, Y+14	; 0x0e
    139a:	f8 01       	movw	r30, r16
    139c:	91 83       	std	Z+1, r25	; 0x01
    139e:	80 83       	st	Z, r24

	Pipe_Discard_Stream(DeviceMessage.DataOffset - (sizeof(RNDIS_Packet_Message_t) - sizeof(RNDIS_Message_Header_t)),
    13a0:	89 85       	ldd	r24, Y+9	; 0x09
    13a2:	9a 85       	ldd	r25, Y+10	; 0x0a
    13a4:	84 97       	sbiw	r24, 0x24	; 36
    13a6:	60 e0       	ldi	r22, 0x00	; 0
    13a8:	70 e0       	ldi	r23, 0x00	; 0
    13aa:	30 df       	rcall	.-416    	; 0x120c <Pipe_Discard_Stream>
	                    NO_STREAM_CALLBACK);

	Pipe_Read_Stream_LE(Buffer, *PacketLength, NO_STREAM_CALLBACK);
    13ac:	f8 01       	movw	r30, r16
    13ae:	60 81       	ld	r22, Z
    13b0:	71 81       	ldd	r23, Z+1	; 0x01
    13b2:	c6 01       	movw	r24, r12
    13b4:	40 e0       	ldi	r20, 0x00	; 0
    13b6:	50 e0       	ldi	r21, 0x00	; 0
    13b8:	e8 de       	rcall	.-560    	; 0x118a <Pipe_Read_Stream_LE>
			 *  \return Total number of bytes in the currently selected Pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
    13ba:	80 91 f6 00 	lds	r24, 0x00F6
    13be:	90 91 f7 00 	lds	r25, 0x00F7

	if (!(Pipe_BytesInPipe()))
    13c2:	89 2b       	or	r24, r25
    13c4:	29 f4       	brne	.+10     	; 0x13d0 <RNDIS_Host_ReadPacket+0xc2>
			 *  \ingroup Group_PipePacketManagement
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
    13c6:	80 91 a6 00 	lds	r24, 0x00A6
    13ca:	8e 77       	andi	r24, 0x7E	; 126
    13cc:	80 93 a6 00 	sts	0x00A6, r24

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    13d0:	80 91 a9 00 	lds	r24, 0x00A9
    13d4:	80 64       	ori	r24, 0x40	; 64
    13d6:	80 93 a9 00 	sts	0x00A9, r24
    13da:	02 c0       	rjmp	.+4      	; 0x13e0 <RNDIS_Host_ReadPacket+0xd2>
	  Pipe_ClearIN();

	Pipe_Freeze();

	return PIPE_RWSTREAM_NoError;
    13dc:	92 e0       	ldi	r25, 0x02	; 2
    13de:	f9 2e       	mov	r15, r25
}
    13e0:	8f 2d       	mov	r24, r15
    13e2:	ac 96       	adiw	r28, 0x2c	; 44
    13e4:	0f b6       	in	r0, 0x3f	; 63
    13e6:	f8 94       	cli
    13e8:	de bf       	out	0x3e, r29	; 62
    13ea:	0f be       	out	0x3f, r0	; 63
    13ec:	cd bf       	out	0x3d, r28	; 61
    13ee:	cf 91       	pop	r28
    13f0:	df 91       	pop	r29
    13f2:	1f 91       	pop	r17
    13f4:	0f 91       	pop	r16
    13f6:	ff 90       	pop	r15
    13f8:	df 90       	pop	r13
    13fa:	cf 90       	pop	r12
    13fc:	08 95       	ret

000013fe <RNDIS_SendEncapsulatedCommand>:

static uint8_t RNDIS_SendEncapsulatedCommand(USB_ClassInfo_RNDIS_Host_t* const RNDISInterfaceInfo,
                                             void* Buffer,
                                             const uint16_t Length)
{
	USB_ControlRequest = (USB_Request_Header_t)
    13fe:	fc 01       	movw	r30, r24
    1400:	93 85       	ldd	r25, Z+11	; 0x0b
    1402:	81 e2       	ldi	r24, 0x21	; 33
    1404:	80 93 4e 05 	sts	0x054E, r24
    1408:	10 92 4f 05 	sts	0x054F, r1
    140c:	10 92 51 05 	sts	0x0551, r1
    1410:	10 92 50 05 	sts	0x0550, r1
    1414:	90 93 52 05 	sts	0x0552, r25
    1418:	10 92 53 05 	sts	0x0553, r1
    141c:	50 93 55 05 	sts	0x0555, r21
    1420:	40 93 54 05 	sts	0x0554, r20
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
    1424:	10 92 a7 00 	sts	0x00A7, r1
			.wIndex        = RNDISInterfaceInfo->State.ControlInterfaceNumber,
			.wLength       = Length,
		};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);
	return USB_Host_SendControlRequest(Buffer);
    1428:	cb 01       	movw	r24, r22
}
    142a:	ad cd       	rjmp	.-1190   	; 0xf86 <USB_Host_SendControlRequest>

0000142c <RNDIS_GetEncapsulatedResponse>:

static uint8_t RNDIS_GetEncapsulatedResponse(USB_ClassInfo_RNDIS_Host_t* const RNDISInterfaceInfo,
                                             void* Buffer,
                                             const uint16_t Length)
{
	USB_ControlRequest = (USB_Request_Header_t)
    142c:	fc 01       	movw	r30, r24
    142e:	93 85       	ldd	r25, Z+11	; 0x0b
    1430:	81 ea       	ldi	r24, 0xA1	; 161
    1432:	80 93 4e 05 	sts	0x054E, r24
    1436:	81 e0       	ldi	r24, 0x01	; 1
    1438:	80 93 4f 05 	sts	0x054F, r24
    143c:	10 92 51 05 	sts	0x0551, r1
    1440:	10 92 50 05 	sts	0x0550, r1
    1444:	90 93 52 05 	sts	0x0552, r25
    1448:	10 92 53 05 	sts	0x0553, r1
    144c:	50 93 55 05 	sts	0x0555, r21
    1450:	40 93 54 05 	sts	0x0554, r20
    1454:	10 92 a7 00 	sts	0x00A7, r1
			.wIndex        = RNDISInterfaceInfo->State.ControlInterfaceNumber,
			.wLength       = Length,
		};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);
	return USB_Host_SendControlRequest(Buffer);
    1458:	cb 01       	movw	r24, r22
}
    145a:	95 cd       	rjmp	.-1238   	; 0xf86 <USB_Host_SendControlRequest>

0000145c <RNDIS_Host_QueryRNDISProperty>:

uint8_t RNDIS_Host_QueryRNDISProperty(USB_ClassInfo_RNDIS_Host_t* const RNDISInterfaceInfo,
                                      const uint32_t Oid,
                                      void* Buffer,
                                      const uint16_t MaxLength)
{
    145c:	4f 92       	push	r4
    145e:	5f 92       	push	r5
    1460:	6f 92       	push	r6
    1462:	7f 92       	push	r7
    1464:	8f 92       	push	r8
    1466:	9f 92       	push	r9
    1468:	af 92       	push	r10
    146a:	bf 92       	push	r11
    146c:	cf 92       	push	r12
    146e:	df 92       	push	r13
    1470:	ef 92       	push	r14
    1472:	ff 92       	push	r15
    1474:	0f 93       	push	r16
    1476:	1f 93       	push	r17
    1478:	df 93       	push	r29
    147a:	cf 93       	push	r28
    147c:	cd b7       	in	r28, 0x3d	; 61
    147e:	de b7       	in	r29, 0x3e	; 62
    1480:	6c 97       	sbiw	r28, 0x1c	; 28
    1482:	0f b6       	in	r0, 0x3f	; 63
    1484:	f8 94       	cli
    1486:	de bf       	out	0x3e, r29	; 62
    1488:	0f be       	out	0x3f, r0	; 63
    148a:	cd bf       	out	0x3d, r28	; 61
    148c:	7c 01       	movw	r14, r24
    148e:	52 2e       	mov	r5, r18
    1490:	43 2e       	mov	r4, r19
    1492:	58 01       	movw	r10, r16
	  return RNDIS_COMMAND_FAILED;

	memcpy(Buffer, &QueryMessageResponseData.ContiguousBuffer, MaxLength);

	return HOST_SENDCONTROL_Successful;
}
    1494:	6d b6       	in	r6, 0x3d	; 61
    1496:	7e b6       	in	r7, 0x3e	; 62

	struct
	{
		RNDIS_Query_Complete_t QueryMessageResponse;
		uint8_t                ContiguousBuffer[MaxLength];
	} QueryMessageResponseData;
    1498:	28 e1       	ldi	r18, 0x18	; 24
    149a:	82 2e       	mov	r8, r18
    149c:	91 2c       	mov	r9, r1
    149e:	80 0e       	add	r8, r16
    14a0:	91 1e       	adc	r9, r17
    14a2:	8d b7       	in	r24, 0x3d	; 61
    14a4:	9e b7       	in	r25, 0x3e	; 62
    14a6:	88 19       	sub	r24, r8
    14a8:	99 09       	sbc	r25, r9
    14aa:	0f b6       	in	r0, 0x3f	; 63
    14ac:	f8 94       	cli
    14ae:	9e bf       	out	0x3e, r25	; 62
    14b0:	0f be       	out	0x3f, r0	; 63
    14b2:	8d bf       	out	0x3d, r24	; 61
    14b4:	cd b6       	in	r12, 0x3d	; 61
    14b6:	de b6       	in	r13, 0x3e	; 62
    14b8:	08 94       	sec
    14ba:	c1 1c       	adc	r12, r1
    14bc:	d1 1c       	adc	r13, r1

	QueryMessage.MessageType    = REMOTE_NDIS_QUERY_MSG;
    14be:	84 e0       	ldi	r24, 0x04	; 4
    14c0:	90 e0       	ldi	r25, 0x00	; 0
    14c2:	a0 e0       	ldi	r26, 0x00	; 0
    14c4:	b0 e0       	ldi	r27, 0x00	; 0
    14c6:	89 83       	std	Y+1, r24	; 0x01
    14c8:	9a 83       	std	Y+2, r25	; 0x02
    14ca:	ab 83       	std	Y+3, r26	; 0x03
    14cc:	bc 83       	std	Y+4, r27	; 0x04
	QueryMessage.MessageLength  = sizeof(RNDIS_Query_Message_t);
    14ce:	8c e1       	ldi	r24, 0x1C	; 28
    14d0:	90 e0       	ldi	r25, 0x00	; 0
    14d2:	a0 e0       	ldi	r26, 0x00	; 0
    14d4:	b0 e0       	ldi	r27, 0x00	; 0
    14d6:	8d 83       	std	Y+5, r24	; 0x05
    14d8:	9e 83       	std	Y+6, r25	; 0x06
    14da:	af 83       	std	Y+7, r26	; 0x07
    14dc:	b8 87       	std	Y+8, r27	; 0x08
	QueryMessage.RequestId      = RNDISInterfaceInfo->State.RequestID++;
    14de:	f7 01       	movw	r30, r14
    14e0:	86 89       	ldd	r24, Z+22	; 0x16
    14e2:	97 89       	ldd	r25, Z+23	; 0x17
    14e4:	a0 8d       	ldd	r26, Z+24	; 0x18
    14e6:	b1 8d       	ldd	r27, Z+25	; 0x19
    14e8:	89 87       	std	Y+9, r24	; 0x09
    14ea:	9a 87       	std	Y+10, r25	; 0x0a
    14ec:	ab 87       	std	Y+11, r26	; 0x0b
    14ee:	bc 87       	std	Y+12, r27	; 0x0c
    14f0:	01 96       	adiw	r24, 0x01	; 1
    14f2:	a1 1d       	adc	r26, r1
    14f4:	b1 1d       	adc	r27, r1
    14f6:	86 8b       	std	Z+22, r24	; 0x16
    14f8:	97 8b       	std	Z+23, r25	; 0x17
    14fa:	a0 8f       	std	Z+24, r26	; 0x18
    14fc:	b1 8f       	std	Z+25, r27	; 0x19

	QueryMessage.Oid            = Oid;
    14fe:	4d 87       	std	Y+13, r20	; 0x0d
    1500:	5e 87       	std	Y+14, r21	; 0x0e
    1502:	6f 87       	std	Y+15, r22	; 0x0f
    1504:	78 8b       	std	Y+16, r23	; 0x10
	QueryMessage.InformationBufferLength = 0;
    1506:	19 8a       	std	Y+17, r1	; 0x11
    1508:	1a 8a       	std	Y+18, r1	; 0x12
    150a:	1b 8a       	std	Y+19, r1	; 0x13
    150c:	1c 8a       	std	Y+20, r1	; 0x14
	QueryMessage.InformationBufferOffset = 0;
    150e:	1d 8a       	std	Y+21, r1	; 0x15
    1510:	1e 8a       	std	Y+22, r1	; 0x16
    1512:	1f 8a       	std	Y+23, r1	; 0x17
    1514:	18 8e       	std	Y+24, r1	; 0x18
	QueryMessage.DeviceVcHandle = 0;
    1516:	19 8e       	std	Y+25, r1	; 0x19
    1518:	1a 8e       	std	Y+26, r1	; 0x1a
    151a:	1b 8e       	std	Y+27, r1	; 0x1b
    151c:	1c 8e       	std	Y+28, r1	; 0x1c

	if ((ErrorCode = RNDIS_SendEncapsulatedCommand(RNDISInterfaceInfo, &QueryMessage,
    151e:	c7 01       	movw	r24, r14
    1520:	be 01       	movw	r22, r28
    1522:	6f 5f       	subi	r22, 0xFF	; 255
    1524:	7f 4f       	sbci	r23, 0xFF	; 255
    1526:	4c e1       	ldi	r20, 0x1C	; 28
    1528:	50 e0       	ldi	r21, 0x00	; 0
    152a:	69 df       	rcall	.-302    	; 0x13fe <RNDIS_SendEncapsulatedCommand>
    152c:	18 2f       	mov	r17, r24
    152e:	88 23       	and	r24, r24
    1530:	d1 f4       	brne	.+52     	; 0x1566 <RNDIS_Host_QueryRNDISProperty+0x10a>
	                                               sizeof(RNDIS_Query_Message_t))) != HOST_SENDCONTROL_Successful)
	{
		return ErrorCode;
	}

	if ((ErrorCode = RNDIS_GetEncapsulatedResponse(RNDISInterfaceInfo, &QueryMessageResponseData,
    1532:	c7 01       	movw	r24, r14
    1534:	b6 01       	movw	r22, r12
    1536:	a4 01       	movw	r20, r8
    1538:	79 df       	rcall	.-270    	; 0x142c <RNDIS_GetEncapsulatedResponse>
    153a:	18 2f       	mov	r17, r24
    153c:	88 23       	and	r24, r24
    153e:	99 f4       	brne	.+38     	; 0x1566 <RNDIS_Host_QueryRNDISProperty+0x10a>
	                                               sizeof(QueryMessageResponseData))) != HOST_SENDCONTROL_Successful)
	{
		return ErrorCode;
	}

	if (QueryMessageResponseData.QueryMessageResponse.Status != REMOTE_NDIS_STATUS_SUCCESS)
    1540:	f6 01       	movw	r30, r12
    1542:	84 85       	ldd	r24, Z+12	; 0x0c
    1544:	95 85       	ldd	r25, Z+13	; 0x0d
    1546:	a6 85       	ldd	r26, Z+14	; 0x0e
    1548:	b7 85       	ldd	r27, Z+15	; 0x0f
    154a:	00 97       	sbiw	r24, 0x00	; 0
    154c:	a1 05       	cpc	r26, r1
    154e:	b1 05       	cpc	r27, r1
    1550:	11 f0       	breq	.+4      	; 0x1556 <RNDIS_Host_QueryRNDISProperty+0xfa>
    1552:	10 ec       	ldi	r17, 0xC0	; 192
    1554:	08 c0       	rjmp	.+16     	; 0x1566 <RNDIS_Host_QueryRNDISProperty+0x10a>
	  return RNDIS_COMMAND_FAILED;

	memcpy(Buffer, &QueryMessageResponseData.ContiguousBuffer, MaxLength);
    1556:	96 01       	movw	r18, r12
    1558:	28 5e       	subi	r18, 0xE8	; 232
    155a:	3f 4f       	sbci	r19, 0xFF	; 255
    155c:	85 2d       	mov	r24, r5
    155e:	94 2d       	mov	r25, r4
    1560:	b9 01       	movw	r22, r18
    1562:	a5 01       	movw	r20, r10
    1564:	66 d2       	rcall	.+1228   	; 0x1a32 <memcpy>

	return HOST_SENDCONTROL_Successful;
}
    1566:	81 2f       	mov	r24, r17
    1568:	0f b6       	in	r0, 0x3f	; 63
    156a:	f8 94       	cli
    156c:	7e be       	out	0x3e, r7	; 62
    156e:	0f be       	out	0x3f, r0	; 63
    1570:	6d be       	out	0x3d, r6	; 61
    1572:	6c 96       	adiw	r28, 0x1c	; 28
    1574:	0f b6       	in	r0, 0x3f	; 63
    1576:	f8 94       	cli
    1578:	de bf       	out	0x3e, r29	; 62
    157a:	0f be       	out	0x3f, r0	; 63
    157c:	cd bf       	out	0x3d, r28	; 61
    157e:	cf 91       	pop	r28
    1580:	df 91       	pop	r29
    1582:	1f 91       	pop	r17
    1584:	0f 91       	pop	r16
    1586:	ff 90       	pop	r15
    1588:	ef 90       	pop	r14
    158a:	df 90       	pop	r13
    158c:	cf 90       	pop	r12
    158e:	bf 90       	pop	r11
    1590:	af 90       	pop	r10
    1592:	9f 90       	pop	r9
    1594:	8f 90       	pop	r8
    1596:	7f 90       	pop	r7
    1598:	6f 90       	pop	r6
    159a:	5f 90       	pop	r5
    159c:	4f 90       	pop	r4
    159e:	08 95       	ret

000015a0 <RNDIS_Host_SetRNDISProperty>:

uint8_t RNDIS_Host_SetRNDISProperty(USB_ClassInfo_RNDIS_Host_t* const RNDISInterfaceInfo,
                                    const uint32_t Oid,
                                    void* Buffer,
                                    const uint16_t Length)
{
    15a0:	6f 92       	push	r6
    15a2:	7f 92       	push	r7
    15a4:	8f 92       	push	r8
    15a6:	9f 92       	push	r9
    15a8:	af 92       	push	r10
    15aa:	bf 92       	push	r11
    15ac:	cf 92       	push	r12
    15ae:	df 92       	push	r13
    15b0:	ef 92       	push	r14
    15b2:	ff 92       	push	r15
    15b4:	0f 93       	push	r16
    15b6:	1f 93       	push	r17
    15b8:	df 93       	push	r29
    15ba:	cf 93       	push	r28
    15bc:	cd b7       	in	r28, 0x3d	; 61
    15be:	de b7       	in	r29, 0x3e	; 62
    15c0:	60 97       	sbiw	r28, 0x10	; 16
    15c2:	0f b6       	in	r0, 0x3f	; 63
    15c4:	f8 94       	cli
    15c6:	de bf       	out	0x3e, r29	; 62
    15c8:	0f be       	out	0x3f, r0	; 63
    15ca:	cd bf       	out	0x3d, r28	; 61
    15cc:	4c 01       	movw	r8, r24

	if (SetMessageResponse.Status != REMOTE_NDIS_STATUS_SUCCESS)
	  return RNDIS_COMMAND_FAILED;

	return HOST_SENDCONTROL_Successful;
}
    15ce:	6d b6       	in	r6, 0x3d	; 61
    15d0:	7e b6       	in	r7, 0x3e	; 62

	struct
	{
		RNDIS_Set_Message_t SetMessage;
		uint8_t             ContiguousBuffer[Length];
	} SetMessageData;
    15d2:	ec e1       	ldi	r30, 0x1C	; 28
    15d4:	ce 2e       	mov	r12, r30
    15d6:	d1 2c       	mov	r13, r1
    15d8:	c0 0e       	add	r12, r16
    15da:	d1 1e       	adc	r13, r17
    15dc:	8d b7       	in	r24, 0x3d	; 61
    15de:	9e b7       	in	r25, 0x3e	; 62
    15e0:	8c 19       	sub	r24, r12
    15e2:	9d 09       	sbc	r25, r13
    15e4:	0f b6       	in	r0, 0x3f	; 63
    15e6:	f8 94       	cli
    15e8:	9e bf       	out	0x3e, r25	; 62
    15ea:	0f be       	out	0x3f, r0	; 63
    15ec:	8d bf       	out	0x3d, r24	; 61
    15ee:	ad b6       	in	r10, 0x3d	; 61
    15f0:	be b6       	in	r11, 0x3e	; 62
    15f2:	08 94       	sec
    15f4:	a1 1c       	adc	r10, r1
    15f6:	b1 1c       	adc	r11, r1

	RNDIS_Set_Complete_t SetMessageResponse;

	SetMessageData.SetMessage.MessageType    = REMOTE_NDIS_SET_MSG;
    15f8:	85 e0       	ldi	r24, 0x05	; 5
    15fa:	90 e0       	ldi	r25, 0x00	; 0
    15fc:	a0 e0       	ldi	r26, 0x00	; 0
    15fe:	b0 e0       	ldi	r27, 0x00	; 0
    1600:	ed b7       	in	r30, 0x3d	; 61
    1602:	fe b7       	in	r31, 0x3e	; 62
    1604:	81 83       	std	Z+1, r24	; 0x01
    1606:	92 83       	std	Z+2, r25	; 0x02
    1608:	a3 83       	std	Z+3, r26	; 0x03
    160a:	b4 83       	std	Z+4, r27	; 0x04
	SetMessageData.SetMessage.MessageLength  = sizeof(RNDIS_Set_Message_t) + Length;
    160c:	ee 24       	eor	r14, r14
    160e:	ff 24       	eor	r15, r15
    1610:	f5 01       	movw	r30, r10
    1612:	c4 82       	std	Z+4, r12	; 0x04
    1614:	d5 82       	std	Z+5, r13	; 0x05
    1616:	e6 82       	std	Z+6, r14	; 0x06
    1618:	f7 82       	std	Z+7, r15	; 0x07
	SetMessageData.SetMessage.RequestId      = RNDISInterfaceInfo->State.RequestID++;
    161a:	f4 01       	movw	r30, r8
    161c:	86 89       	ldd	r24, Z+22	; 0x16
    161e:	97 89       	ldd	r25, Z+23	; 0x17
    1620:	a0 8d       	ldd	r26, Z+24	; 0x18
    1622:	b1 8d       	ldd	r27, Z+25	; 0x19
    1624:	f5 01       	movw	r30, r10
    1626:	80 87       	std	Z+8, r24	; 0x08
    1628:	91 87       	std	Z+9, r25	; 0x09
    162a:	a2 87       	std	Z+10, r26	; 0x0a
    162c:	b3 87       	std	Z+11, r27	; 0x0b
    162e:	01 96       	adiw	r24, 0x01	; 1
    1630:	a1 1d       	adc	r26, r1
    1632:	b1 1d       	adc	r27, r1
    1634:	f4 01       	movw	r30, r8
    1636:	86 8b       	std	Z+22, r24	; 0x16
    1638:	97 8b       	std	Z+23, r25	; 0x17
    163a:	a0 8f       	std	Z+24, r26	; 0x18
    163c:	b1 8f       	std	Z+25, r27	; 0x19

	SetMessageData.SetMessage.Oid            = Oid;
    163e:	f5 01       	movw	r30, r10
    1640:	44 87       	std	Z+12, r20	; 0x0c
    1642:	55 87       	std	Z+13, r21	; 0x0d
    1644:	66 87       	std	Z+14, r22	; 0x0e
    1646:	77 87       	std	Z+15, r23	; 0x0f
	SetMessageData.SetMessage.InformationBufferLength = Length;
    1648:	c8 01       	movw	r24, r16
    164a:	a0 e0       	ldi	r26, 0x00	; 0
    164c:	b0 e0       	ldi	r27, 0x00	; 0
    164e:	80 8b       	std	Z+16, r24	; 0x10
    1650:	91 8b       	std	Z+17, r25	; 0x11
    1652:	a2 8b       	std	Z+18, r26	; 0x12
    1654:	b3 8b       	std	Z+19, r27	; 0x13
	SetMessageData.SetMessage.InformationBufferOffset = (sizeof(RNDIS_Set_Message_t) - sizeof(RNDIS_Message_Header_t));
    1656:	84 e1       	ldi	r24, 0x14	; 20
    1658:	90 e0       	ldi	r25, 0x00	; 0
    165a:	a0 e0       	ldi	r26, 0x00	; 0
    165c:	b0 e0       	ldi	r27, 0x00	; 0
    165e:	84 8b       	std	Z+20, r24	; 0x14
    1660:	95 8b       	std	Z+21, r25	; 0x15
    1662:	a6 8b       	std	Z+22, r26	; 0x16
    1664:	b7 8b       	std	Z+23, r27	; 0x17
	SetMessageData.SetMessage.DeviceVcHandle = 0;
    1666:	10 8e       	std	Z+24, r1	; 0x18
    1668:	11 8e       	std	Z+25, r1	; 0x19
    166a:	12 8e       	std	Z+26, r1	; 0x1a
    166c:	13 8e       	std	Z+27, r1	; 0x1b

	memcpy(&SetMessageData.ContiguousBuffer, Buffer, Length);
    166e:	4d b7       	in	r20, 0x3d	; 61
    1670:	5e b7       	in	r21, 0x3e	; 62
    1672:	43 5e       	subi	r20, 0xE3	; 227
    1674:	5f 4f       	sbci	r21, 0xFF	; 255
    1676:	ca 01       	movw	r24, r20
    1678:	b9 01       	movw	r22, r18
    167a:	a8 01       	movw	r20, r16
    167c:	da d1       	rcall	.+948    	; 0x1a32 <memcpy>

	if ((ErrorCode = RNDIS_SendEncapsulatedCommand(RNDISInterfaceInfo, &SetMessageData,
    167e:	f5 01       	movw	r30, r10
    1680:	44 81       	ldd	r20, Z+4	; 0x04
    1682:	55 81       	ldd	r21, Z+5	; 0x05
    1684:	c4 01       	movw	r24, r8
    1686:	b5 01       	movw	r22, r10
    1688:	ba de       	rcall	.-652    	; 0x13fe <RNDIS_SendEncapsulatedCommand>
    168a:	28 2f       	mov	r18, r24
    168c:	88 23       	and	r24, r24
    168e:	99 f4       	brne	.+38     	; 0x16b6 <RNDIS_Host_SetRNDISProperty+0x116>
	                                               SetMessageData.SetMessage.MessageLength)) != HOST_SENDCONTROL_Successful)
	{
		return ErrorCode;
	}

	if ((ErrorCode = RNDIS_GetEncapsulatedResponse(RNDISInterfaceInfo, &SetMessageResponse,
    1690:	c4 01       	movw	r24, r8
    1692:	be 01       	movw	r22, r28
    1694:	6f 5f       	subi	r22, 0xFF	; 255
    1696:	7f 4f       	sbci	r23, 0xFF	; 255
    1698:	40 e1       	ldi	r20, 0x10	; 16
    169a:	50 e0       	ldi	r21, 0x00	; 0
    169c:	c7 de       	rcall	.-626    	; 0x142c <RNDIS_GetEncapsulatedResponse>
    169e:	28 2f       	mov	r18, r24
    16a0:	88 23       	and	r24, r24
    16a2:	49 f4       	brne	.+18     	; 0x16b6 <RNDIS_Host_SetRNDISProperty+0x116>
	                                               sizeof(RNDIS_Set_Complete_t))) != HOST_SENDCONTROL_Successful)
	{
		return ErrorCode;
	}

	if (SetMessageResponse.Status != REMOTE_NDIS_STATUS_SUCCESS)
    16a4:	8d 85       	ldd	r24, Y+13	; 0x0d
    16a6:	9e 85       	ldd	r25, Y+14	; 0x0e
    16a8:	af 85       	ldd	r26, Y+15	; 0x0f
    16aa:	b8 89       	ldd	r27, Y+16	; 0x10
    16ac:	00 97       	sbiw	r24, 0x00	; 0
    16ae:	a1 05       	cpc	r26, r1
    16b0:	b1 05       	cpc	r27, r1
    16b2:	09 f0       	breq	.+2      	; 0x16b6 <RNDIS_Host_SetRNDISProperty+0x116>
    16b4:	20 ec       	ldi	r18, 0xC0	; 192
	  return RNDIS_COMMAND_FAILED;

	return HOST_SENDCONTROL_Successful;
}
    16b6:	82 2f       	mov	r24, r18
    16b8:	0f b6       	in	r0, 0x3f	; 63
    16ba:	f8 94       	cli
    16bc:	7e be       	out	0x3e, r7	; 62
    16be:	0f be       	out	0x3f, r0	; 63
    16c0:	6d be       	out	0x3d, r6	; 61
    16c2:	60 96       	adiw	r28, 0x10	; 16
    16c4:	0f b6       	in	r0, 0x3f	; 63
    16c6:	f8 94       	cli
    16c8:	de bf       	out	0x3e, r29	; 62
    16ca:	0f be       	out	0x3f, r0	; 63
    16cc:	cd bf       	out	0x3d, r28	; 61
    16ce:	cf 91       	pop	r28
    16d0:	df 91       	pop	r29
    16d2:	1f 91       	pop	r17
    16d4:	0f 91       	pop	r16
    16d6:	ff 90       	pop	r15
    16d8:	ef 90       	pop	r14
    16da:	df 90       	pop	r13
    16dc:	cf 90       	pop	r12
    16de:	bf 90       	pop	r11
    16e0:	af 90       	pop	r10
    16e2:	9f 90       	pop	r9
    16e4:	8f 90       	pop	r8
    16e6:	7f 90       	pop	r7
    16e8:	6f 90       	pop	r6
    16ea:	08 95       	ret

000016ec <RNDIS_Host_InitializeDevice>:

	return HOST_SENDCONTROL_Successful;
}

uint8_t RNDIS_Host_InitializeDevice(USB_ClassInfo_RNDIS_Host_t* const RNDISInterfaceInfo)
{
    16ec:	0f 93       	push	r16
    16ee:	1f 93       	push	r17
    16f0:	df 93       	push	r29
    16f2:	cf 93       	push	r28
    16f4:	cd b7       	in	r28, 0x3d	; 61
    16f6:	de b7       	in	r29, 0x3e	; 62
    16f8:	cc 54       	subi	r28, 0x4C	; 76
    16fa:	d0 40       	sbci	r29, 0x00	; 0
    16fc:	0f b6       	in	r0, 0x3f	; 63
    16fe:	f8 94       	cli
    1700:	de bf       	out	0x3e, r29	; 62
    1702:	0f be       	out	0x3f, r0	; 63
    1704:	cd bf       	out	0x3d, r28	; 61
    1706:	8c 01       	movw	r16, r24
	uint8_t ErrorCode;

	RNDIS_Initialize_Message_t  InitMessage;
	RNDIS_Initialize_Complete_t InitMessageResponse;

	InitMessage.MessageType     = REMOTE_NDIS_INITIALIZE_MSG;
    1708:	82 e0       	ldi	r24, 0x02	; 2
    170a:	90 e0       	ldi	r25, 0x00	; 0
    170c:	a0 e0       	ldi	r26, 0x00	; 0
    170e:	b0 e0       	ldi	r27, 0x00	; 0
    1710:	89 83       	std	Y+1, r24	; 0x01
    1712:	9a 83       	std	Y+2, r25	; 0x02
    1714:	ab 83       	std	Y+3, r26	; 0x03
    1716:	bc 83       	std	Y+4, r27	; 0x04
	InitMessage.MessageLength   = sizeof(RNDIS_Initialize_Message_t);
    1718:	88 e1       	ldi	r24, 0x18	; 24
    171a:	90 e0       	ldi	r25, 0x00	; 0
    171c:	a0 e0       	ldi	r26, 0x00	; 0
    171e:	b0 e0       	ldi	r27, 0x00	; 0
    1720:	8d 83       	std	Y+5, r24	; 0x05
    1722:	9e 83       	std	Y+6, r25	; 0x06
    1724:	af 83       	std	Y+7, r26	; 0x07
    1726:	b8 87       	std	Y+8, r27	; 0x08
	InitMessage.RequestId       = RNDISInterfaceInfo->State.RequestID++;
    1728:	f8 01       	movw	r30, r16
    172a:	86 89       	ldd	r24, Z+22	; 0x16
    172c:	97 89       	ldd	r25, Z+23	; 0x17
    172e:	a0 8d       	ldd	r26, Z+24	; 0x18
    1730:	b1 8d       	ldd	r27, Z+25	; 0x19
    1732:	89 87       	std	Y+9, r24	; 0x09
    1734:	9a 87       	std	Y+10, r25	; 0x0a
    1736:	ab 87       	std	Y+11, r26	; 0x0b
    1738:	bc 87       	std	Y+12, r27	; 0x0c
    173a:	01 96       	adiw	r24, 0x01	; 1
    173c:	a1 1d       	adc	r26, r1
    173e:	b1 1d       	adc	r27, r1
    1740:	86 8b       	std	Z+22, r24	; 0x16
    1742:	97 8b       	std	Z+23, r25	; 0x17
    1744:	a0 8f       	std	Z+24, r26	; 0x18
    1746:	b1 8f       	std	Z+25, r27	; 0x19

	InitMessage.MajorVersion    = REMOTE_NDIS_VERSION_MAJOR;
    1748:	81 e0       	ldi	r24, 0x01	; 1
    174a:	90 e0       	ldi	r25, 0x00	; 0
    174c:	a0 e0       	ldi	r26, 0x00	; 0
    174e:	b0 e0       	ldi	r27, 0x00	; 0
    1750:	8d 87       	std	Y+13, r24	; 0x0d
    1752:	9e 87       	std	Y+14, r25	; 0x0e
    1754:	af 87       	std	Y+15, r26	; 0x0f
    1756:	b8 8b       	std	Y+16, r27	; 0x10
	InitMessage.MinorVersion    = REMOTE_NDIS_VERSION_MINOR;
    1758:	19 8a       	std	Y+17, r1	; 0x11
    175a:	1a 8a       	std	Y+18, r1	; 0x12
    175c:	1b 8a       	std	Y+19, r1	; 0x13
    175e:	1c 8a       	std	Y+20, r1	; 0x14
	InitMessage.MaxTransferSize = RNDISInterfaceInfo->Config.HostMaxPacketSize;
    1760:	86 81       	ldd	r24, Z+6	; 0x06
    1762:	97 81       	ldd	r25, Z+7	; 0x07
    1764:	a0 85       	ldd	r26, Z+8	; 0x08
    1766:	b1 85       	ldd	r27, Z+9	; 0x09
    1768:	8d 8b       	std	Y+21, r24	; 0x15
    176a:	9e 8b       	std	Y+22, r25	; 0x16
    176c:	af 8b       	std	Y+23, r26	; 0x17
    176e:	b8 8f       	std	Y+24, r27	; 0x18

	if ((ErrorCode = RNDIS_SendEncapsulatedCommand(RNDISInterfaceInfo, &InitMessage,
    1770:	c8 01       	movw	r24, r16
    1772:	be 01       	movw	r22, r28
    1774:	6f 5f       	subi	r22, 0xFF	; 255
    1776:	7f 4f       	sbci	r23, 0xFF	; 255
    1778:	48 e1       	ldi	r20, 0x18	; 24
    177a:	50 e0       	ldi	r21, 0x00	; 0
    177c:	40 de       	rcall	.-896    	; 0x13fe <RNDIS_SendEncapsulatedCommand>
    177e:	28 2f       	mov	r18, r24
    1780:	88 23       	and	r24, r24
    1782:	f9 f4       	brne	.+62     	; 0x17c2 <RNDIS_Host_InitializeDevice+0xd6>
	                                               sizeof(RNDIS_Initialize_Message_t))) != HOST_SENDCONTROL_Successful)
	{
		return ErrorCode;
	}

	if ((ErrorCode = RNDIS_GetEncapsulatedResponse(RNDISInterfaceInfo, &InitMessageResponse,
    1784:	c8 01       	movw	r24, r16
    1786:	be 01       	movw	r22, r28
    1788:	67 5e       	subi	r22, 0xE7	; 231
    178a:	7f 4f       	sbci	r23, 0xFF	; 255
    178c:	44 e3       	ldi	r20, 0x34	; 52
    178e:	50 e0       	ldi	r21, 0x00	; 0
    1790:	4d de       	rcall	.-870    	; 0x142c <RNDIS_GetEncapsulatedResponse>
    1792:	28 2f       	mov	r18, r24
    1794:	88 23       	and	r24, r24
    1796:	a9 f4       	brne	.+42     	; 0x17c2 <RNDIS_Host_InitializeDevice+0xd6>
	                                               sizeof(RNDIS_Initialize_Complete_t))) != HOST_SENDCONTROL_Successful)
	{
		return ErrorCode;
	}

	if (InitMessageResponse.Status != REMOTE_NDIS_STATUS_SUCCESS)
    1798:	8d a1       	ldd	r24, Y+37	; 0x25
    179a:	9e a1       	ldd	r25, Y+38	; 0x26
    179c:	af a1       	ldd	r26, Y+39	; 0x27
    179e:	b8 a5       	ldd	r27, Y+40	; 0x28
    17a0:	00 97       	sbiw	r24, 0x00	; 0
    17a2:	a1 05       	cpc	r26, r1
    17a4:	b1 05       	cpc	r27, r1
    17a6:	11 f0       	breq	.+4      	; 0x17ac <RNDIS_Host_InitializeDevice+0xc0>
    17a8:	20 ec       	ldi	r18, 0xC0	; 192
    17aa:	0b c0       	rjmp	.+22     	; 0x17c2 <RNDIS_Host_InitializeDevice+0xd6>
	  return RNDIS_COMMAND_FAILED;

	RNDISInterfaceInfo->State.DeviceMaxPacketSize = InitMessageResponse.MaxTransferSize;
    17ac:	fe 01       	movw	r30, r28
    17ae:	fd 96       	adiw	r30, 0x3d	; 61
    17b0:	80 81       	ld	r24, Z
    17b2:	91 81       	ldd	r25, Z+1	; 0x01
    17b4:	a2 81       	ldd	r26, Z+2	; 0x02
    17b6:	b3 81       	ldd	r27, Z+3	; 0x03
    17b8:	f8 01       	movw	r30, r16
    17ba:	82 8b       	std	Z+18, r24	; 0x12
    17bc:	93 8b       	std	Z+19, r25	; 0x13
    17be:	a4 8b       	std	Z+20, r26	; 0x14
    17c0:	b5 8b       	std	Z+21, r27	; 0x15

	return HOST_SENDCONTROL_Successful;
}
    17c2:	82 2f       	mov	r24, r18
    17c4:	c4 5b       	subi	r28, 0xB4	; 180
    17c6:	df 4f       	sbci	r29, 0xFF	; 255
    17c8:	0f b6       	in	r0, 0x3f	; 63
    17ca:	f8 94       	cli
    17cc:	de bf       	out	0x3e, r29	; 62
    17ce:	0f be       	out	0x3f, r0	; 63
    17d0:	cd bf       	out	0x3d, r28	; 61
    17d2:	cf 91       	pop	r28
    17d4:	df 91       	pop	r29
    17d6:	1f 91       	pop	r17
    17d8:	0f 91       	pop	r16
    17da:	08 95       	ret

000017dc <RNDIS_Host_ConfigurePipes>:
#include "RNDIS.h"

uint8_t RNDIS_Host_ConfigurePipes(USB_ClassInfo_RNDIS_Host_t* const RNDISInterfaceInfo,
                                  uint16_t ConfigDescriptorSize,
                                  void* ConfigDescriptorData)
{
    17dc:	4f 92       	push	r4
    17de:	5f 92       	push	r5
    17e0:	6f 92       	push	r6
    17e2:	7f 92       	push	r7
    17e4:	8f 92       	push	r8
    17e6:	9f 92       	push	r9
    17e8:	af 92       	push	r10
    17ea:	bf 92       	push	r11
    17ec:	cf 92       	push	r12
    17ee:	df 92       	push	r13
    17f0:	ef 92       	push	r14
    17f2:	ff 92       	push	r15
    17f4:	0f 93       	push	r16
    17f6:	1f 93       	push	r17
    17f8:	df 93       	push	r29
    17fa:	cf 93       	push	r28
    17fc:	00 d0       	rcall	.+0      	; 0x17fe <RNDIS_Host_ConfigurePipes+0x22>
    17fe:	00 d0       	rcall	.+0      	; 0x1800 <RNDIS_Host_ConfigurePipes+0x24>
    1800:	cd b7       	in	r28, 0x3d	; 61
    1802:	de b7       	in	r29, 0x3e	; 62
    1804:	6c 01       	movw	r12, r24
    1806:	7a 83       	std	Y+2, r23	; 0x02
    1808:	69 83       	std	Y+1, r22	; 0x01
    180a:	5c 83       	std	Y+4, r21	; 0x04
    180c:	4b 83       	std	Y+3, r20	; 0x03
	USB_Descriptor_Endpoint_t*  DataINEndpoint        = NULL;
	USB_Descriptor_Endpoint_t*  DataOUTEndpoint       = NULL;
	USB_Descriptor_Endpoint_t*  NotificationEndpoint  = NULL;
	USB_Descriptor_Interface_t* RNDISControlInterface = NULL;

	memset(&RNDISInterfaceInfo->State, 0x00, sizeof(RNDISInterfaceInfo->State));
    180e:	0a 96       	adiw	r24, 0x0a	; 10
    1810:	fc 01       	movw	r30, r24
    1812:	80 e1       	ldi	r24, 0x10	; 16
    1814:	df 01       	movw	r26, r30
    1816:	1d 92       	st	X+, r1
    1818:	8a 95       	dec	r24
    181a:	e9 f7       	brne	.-6      	; 0x1816 <RNDIS_Host_ConfigurePipes+0x3a>

	if (DESCRIPTOR_TYPE(ConfigDescriptorData) != DTYPE_Configuration)
    181c:	eb 81       	ldd	r30, Y+3	; 0x03
    181e:	fc 81       	ldd	r31, Y+4	; 0x04
    1820:	81 81       	ldd	r24, Z+1	; 0x01
    1822:	82 30       	cpi	r24, 0x02	; 2
    1824:	11 f0       	breq	.+4      	; 0x182a <RNDIS_Host_ConfigurePipes+0x4e>
    1826:	81 e0       	ldi	r24, 0x01	; 1
    1828:	c0 c0       	rjmp	.+384    	; 0x19aa <RNDIS_Host_ConfigurePipes+0x1ce>
	  return RNDIS_ENUMERROR_InvalidConfigDescriptor;

	RNDISControlInterface = DESCRIPTOR_PCAST(ConfigDescriptorData, USB_Descriptor_Interface_t);
    182a:	2f 01       	movw	r4, r30
    182c:	66 24       	eor	r6, r6
    182e:	77 24       	eor	r7, r7
    1830:	88 24       	eor	r8, r8
    1832:	99 24       	eor	r9, r9
    1834:	aa 24       	eor	r10, r10
    1836:	bb 24       	eor	r11, r11

	while (!(DataINEndpoint) || !(DataOUTEndpoint) || !(NotificationEndpoint))
	{
		if (!(RNDISControlInterface) ||
    1838:	f3 e0       	ldi	r31, 0x03	; 3
    183a:	ef 2e       	mov	r14, r31
    183c:	f1 2c       	mov	r15, r1
    183e:	ec 0e       	add	r14, r28
    1840:	fd 1e       	adc	r15, r29
    1842:	8e 01       	movw	r16, r28
    1844:	0f 5f       	subi	r16, 0xFF	; 255
    1846:	1f 4f       	sbci	r17, 0xFF	; 255
    1848:	04 c0       	rjmp	.+8      	; 0x1852 <RNDIS_Host_ConfigurePipes+0x76>
	memset(&RNDISInterfaceInfo->State, 0x00, sizeof(RNDISInterfaceInfo->State));

	if (DESCRIPTOR_TYPE(ConfigDescriptorData) != DTYPE_Configuration)
	  return RNDIS_ENUMERROR_InvalidConfigDescriptor;

	RNDISControlInterface = DESCRIPTOR_PCAST(ConfigDescriptorData, USB_Descriptor_Interface_t);
    184a:	88 24       	eor	r8, r8
    184c:	99 24       	eor	r9, r9
    184e:	66 24       	eor	r6, r6
    1850:	77 24       	eor	r7, r7

	while (!(DataINEndpoint) || !(DataOUTEndpoint) || !(NotificationEndpoint))
	{
		if (!(RNDISControlInterface) ||
    1852:	41 14       	cp	r4, r1
    1854:	51 04       	cpc	r5, r1
    1856:	39 f0       	breq	.+14     	; 0x1866 <RNDIS_Host_ConfigurePipes+0x8a>
    1858:	c8 01       	movw	r24, r16
    185a:	b7 01       	movw	r22, r14
    185c:	4a ee       	ldi	r20, 0xEA	; 234
    185e:	5c e0       	ldi	r21, 0x0C	; 12
    1860:	cd da       	rcall	.-2662   	; 0xdfc <USB_GetNextDescriptorComp>
    1862:	88 23       	and	r24, r24
    1864:	b1 f0       	breq	.+44     	; 0x1892 <RNDIS_Host_ConfigurePipes+0xb6>
		    USB_GetNextDescriptorComp(&ConfigDescriptorSize, &ConfigDescriptorData,
		                              DCOMP_RNDIS_Host_NextRNDISInterfaceEndpoint) != DESCRIPTOR_SEARCH_COMP_Found)
		{
			if (NotificationEndpoint)
    1866:	a1 14       	cp	r10, r1
    1868:	b1 04       	cpc	r11, r1
    186a:	41 f0       	breq	.+16     	; 0x187c <RNDIS_Host_ConfigurePipes+0xa0>
			{
				if (USB_GetNextDescriptorComp(&ConfigDescriptorSize, &ConfigDescriptorData,
    186c:	c8 01       	movw	r24, r16
    186e:	b7 01       	movw	r22, r14
    1870:	4d e5       	ldi	r20, 0x5D	; 93
    1872:	59 e0       	ldi	r21, 0x09	; 9
    1874:	c3 da       	rcall	.-2682   	; 0xdfc <USB_GetNextDescriptorComp>
    1876:	88 23       	and	r24, r24
    1878:	41 f3       	breq	.-48     	; 0x184a <RNDIS_Host_ConfigurePipes+0x6e>
    187a:	96 c0       	rjmp	.+300    	; 0x19a8 <RNDIS_Host_ConfigurePipes+0x1cc>
				DataINEndpoint  = NULL;
				DataOUTEndpoint = NULL;
			}
			else
			{
				if (USB_GetNextDescriptorComp(&ConfigDescriptorSize, &ConfigDescriptorData,
    187c:	c8 01       	movw	r24, r16
    187e:	b7 01       	movw	r22, r14
    1880:	4c e4       	ldi	r20, 0x4C	; 76
    1882:	59 e0       	ldi	r21, 0x09	; 9
    1884:	bb da       	rcall	.-2698   	; 0xdfc <USB_GetNextDescriptorComp>
    1886:	88 23       	and	r24, r24
    1888:	09 f0       	breq	.+2      	; 0x188c <RNDIS_Host_ConfigurePipes+0xb0>
    188a:	8e c0       	rjmp	.+284    	; 0x19a8 <RNDIS_Host_ConfigurePipes+0x1cc>
											  DCOMP_RNDIS_Host_NextRNDISControlInterface) != DESCRIPTOR_SEARCH_COMP_Found)
				{
					return RNDIS_ENUMERROR_NoCompatibleInterfaceFound;
				}

				RNDISControlInterface = DESCRIPTOR_PCAST(ConfigDescriptorData, USB_Descriptor_Interface_t);
    188c:	4b 80       	ldd	r4, Y+3	; 0x03
    188e:	5c 80       	ldd	r5, Y+4	; 0x04
    1890:	0e c0       	rjmp	.+28     	; 0x18ae <RNDIS_Host_ConfigurePipes+0xd2>
			}

			continue;
		}

		USB_Descriptor_Endpoint_t* EndpointData = DESCRIPTOR_PCAST(ConfigDescriptorData, USB_Descriptor_Endpoint_t);
    1892:	eb 81       	ldd	r30, Y+3	; 0x03
    1894:	fc 81       	ldd	r31, Y+4	; 0x04

		if (EndpointData->EndpointAddress & ENDPOINT_DESCRIPTOR_DIR_IN)
    1896:	82 81       	ldd	r24, Z+2	; 0x02
    1898:	87 fd       	sbrc	r24, 7
    189a:	02 c0       	rjmp	.+4      	; 0x18a0 <RNDIS_Host_ConfigurePipes+0xc4>
    189c:	4f 01       	movw	r8, r30
    189e:	07 c0       	rjmp	.+14     	; 0x18ae <RNDIS_Host_ConfigurePipes+0xd2>
		{
			if ((EndpointData->Attributes & EP_TYPE_MASK) == EP_TYPE_INTERRUPT)
    18a0:	83 81       	ldd	r24, Z+3	; 0x03
    18a2:	83 70       	andi	r24, 0x03	; 3
    18a4:	83 30       	cpi	r24, 0x03	; 3
    18a6:	11 f0       	breq	.+4      	; 0x18ac <RNDIS_Host_ConfigurePipes+0xd0>
    18a8:	3f 01       	movw	r6, r30
    18aa:	01 c0       	rjmp	.+2      	; 0x18ae <RNDIS_Host_ConfigurePipes+0xd2>
    18ac:	5f 01       	movw	r10, r30
	if (DESCRIPTOR_TYPE(ConfigDescriptorData) != DTYPE_Configuration)
	  return RNDIS_ENUMERROR_InvalidConfigDescriptor;

	RNDISControlInterface = DESCRIPTOR_PCAST(ConfigDescriptorData, USB_Descriptor_Interface_t);

	while (!(DataINEndpoint) || !(DataOUTEndpoint) || !(NotificationEndpoint))
    18ae:	61 14       	cp	r6, r1
    18b0:	71 04       	cpc	r7, r1
    18b2:	79 f2       	breq	.-98     	; 0x1852 <RNDIS_Host_ConfigurePipes+0x76>
    18b4:	81 14       	cp	r8, r1
    18b6:	91 04       	cpc	r9, r1
    18b8:	61 f2       	breq	.-104    	; 0x1852 <RNDIS_Host_ConfigurePipes+0x76>
    18ba:	a1 14       	cp	r10, r1
    18bc:	b1 04       	cpc	r11, r1
    18be:	49 f2       	breq	.-110    	; 0x1852 <RNDIS_Host_ConfigurePipes+0x76>
    18c0:	ff 24       	eor	r15, r15
    18c2:	f3 94       	inc	r15
		}
	}

	for (uint8_t PipeNum = 1; PipeNum < PIPE_TOTAL_PIPES; PipeNum++)
	{
		if (PipeNum == RNDISInterfaceInfo->Config.DataINPipeNumber)
    18c4:	f6 01       	movw	r30, r12
    18c6:	80 81       	ld	r24, Z
    18c8:	f8 16       	cp	r15, r24
    18ca:	e1 f4       	brne	.+56     	; 0x1904 <RNDIS_Host_ConfigurePipes+0x128>
		{
			Pipe_ConfigurePipe(PipeNum, EP_TYPE_BULK, PIPE_TOKEN_IN,
    18cc:	d3 01       	movw	r26, r6
    18ce:	12 96       	adiw	r26, 0x02	; 2
    18d0:	2c 91       	ld	r18, X
    18d2:	12 97       	sbiw	r26, 0x02	; 2
    18d4:	14 96       	adiw	r26, 0x04	; 4
    18d6:	0d 91       	ld	r16, X+
    18d8:	1c 91       	ld	r17, X
    18da:	15 97       	sbiw	r26, 0x05	; 5
    18dc:	81 81       	ldd	r24, Z+1	; 0x01
    18de:	88 23       	and	r24, r24
    18e0:	11 f4       	brne	.+4      	; 0x18e6 <RNDIS_Host_ConfigurePipes+0x10a>
    18e2:	90 e0       	ldi	r25, 0x00	; 0
    18e4:	01 c0       	rjmp	.+2      	; 0x18e8 <RNDIS_Host_ConfigurePipes+0x10c>
    18e6:	94 e0       	ldi	r25, 0x04	; 4
    18e8:	8f 2d       	mov	r24, r15
    18ea:	62 e0       	ldi	r22, 0x02	; 2
    18ec:	40 e1       	ldi	r20, 0x10	; 16
    18ee:	e9 2e       	mov	r14, r25
    18f0:	d1 d8       	rcall	.-3678   	; 0xa94 <Pipe_ConfigurePipe>
			                   DataINEndpoint->EndpointAddress, DataINEndpoint->EndpointSize,
			                   RNDISInterfaceInfo->Config.DataINPipeDoubleBank ? PIPE_BANK_DOUBLE : PIPE_BANK_SINGLE);

			RNDISInterfaceInfo->State.DataINPipeSize = DataINEndpoint->EndpointSize;
    18f2:	f3 01       	movw	r30, r6
    18f4:	84 81       	ldd	r24, Z+4	; 0x04
    18f6:	95 81       	ldd	r25, Z+5	; 0x05
    18f8:	d6 01       	movw	r26, r12
    18fa:	1d 96       	adiw	r26, 0x0d	; 13
    18fc:	9c 93       	st	X, r25
    18fe:	8e 93       	st	-X, r24
    1900:	1c 97       	sbiw	r26, 0x0c	; 12
    1902:	42 c0       	rjmp	.+132    	; 0x1988 <RNDIS_Host_ConfigurePipes+0x1ac>
		}
		else if (PipeNum == RNDISInterfaceInfo->Config.DataOUTPipeNumber)
    1904:	f6 01       	movw	r30, r12
    1906:	82 81       	ldd	r24, Z+2	; 0x02
    1908:	f8 16       	cp	r15, r24
    190a:	e1 f4       	brne	.+56     	; 0x1944 <RNDIS_Host_ConfigurePipes+0x168>
		{
			Pipe_ConfigurePipe(PipeNum, EP_TYPE_BULK, PIPE_TOKEN_OUT,
    190c:	d4 01       	movw	r26, r8
    190e:	12 96       	adiw	r26, 0x02	; 2
    1910:	2c 91       	ld	r18, X
    1912:	12 97       	sbiw	r26, 0x02	; 2
    1914:	14 96       	adiw	r26, 0x04	; 4
    1916:	0d 91       	ld	r16, X+
    1918:	1c 91       	ld	r17, X
    191a:	15 97       	sbiw	r26, 0x05	; 5
    191c:	83 81       	ldd	r24, Z+3	; 0x03
    191e:	88 23       	and	r24, r24
    1920:	11 f4       	brne	.+4      	; 0x1926 <RNDIS_Host_ConfigurePipes+0x14a>
    1922:	90 e0       	ldi	r25, 0x00	; 0
    1924:	01 c0       	rjmp	.+2      	; 0x1928 <RNDIS_Host_ConfigurePipes+0x14c>
    1926:	94 e0       	ldi	r25, 0x04	; 4
    1928:	8f 2d       	mov	r24, r15
    192a:	62 e0       	ldi	r22, 0x02	; 2
    192c:	40 e2       	ldi	r20, 0x20	; 32
    192e:	e9 2e       	mov	r14, r25
    1930:	b1 d8       	rcall	.-3742   	; 0xa94 <Pipe_ConfigurePipe>
			                   DataOUTEndpoint->EndpointAddress, DataOUTEndpoint->EndpointSize,
			                   RNDISInterfaceInfo->Config.DataOUTPipeDoubleBank ? PIPE_BANK_DOUBLE : PIPE_BANK_SINGLE);

			RNDISInterfaceInfo->State.DataOUTPipeSize = DataOUTEndpoint->EndpointSize;
    1932:	f4 01       	movw	r30, r8
    1934:	84 81       	ldd	r24, Z+4	; 0x04
    1936:	95 81       	ldd	r25, Z+5	; 0x05
    1938:	d6 01       	movw	r26, r12
    193a:	1f 96       	adiw	r26, 0x0f	; 15
    193c:	9c 93       	st	X, r25
    193e:	8e 93       	st	-X, r24
    1940:	1e 97       	sbiw	r26, 0x0e	; 14
    1942:	22 c0       	rjmp	.+68     	; 0x1988 <RNDIS_Host_ConfigurePipes+0x1ac>
		}
		else if (PipeNum == RNDISInterfaceInfo->Config.NotificationPipeNumber)
    1944:	f6 01       	movw	r30, r12
    1946:	84 81       	ldd	r24, Z+4	; 0x04
    1948:	f8 16       	cp	r15, r24
    194a:	f1 f4       	brne	.+60     	; 0x1988 <RNDIS_Host_ConfigurePipes+0x1ac>
		{
			Pipe_ConfigurePipe(PipeNum, EP_TYPE_INTERRUPT, PIPE_TOKEN_IN,
    194c:	d5 01       	movw	r26, r10
    194e:	12 96       	adiw	r26, 0x02	; 2
    1950:	2c 91       	ld	r18, X
    1952:	12 97       	sbiw	r26, 0x02	; 2
    1954:	14 96       	adiw	r26, 0x04	; 4
    1956:	0d 91       	ld	r16, X+
    1958:	1c 91       	ld	r17, X
    195a:	15 97       	sbiw	r26, 0x05	; 5
    195c:	85 81       	ldd	r24, Z+5	; 0x05
    195e:	88 23       	and	r24, r24
    1960:	11 f4       	brne	.+4      	; 0x1966 <RNDIS_Host_ConfigurePipes+0x18a>
    1962:	90 e0       	ldi	r25, 0x00	; 0
    1964:	01 c0       	rjmp	.+2      	; 0x1968 <RNDIS_Host_ConfigurePipes+0x18c>
    1966:	94 e0       	ldi	r25, 0x04	; 4
    1968:	8f 2d       	mov	r24, r15
    196a:	63 e0       	ldi	r22, 0x03	; 3
    196c:	40 e1       	ldi	r20, 0x10	; 16
    196e:	e9 2e       	mov	r14, r25
    1970:	91 d8       	rcall	.-3806   	; 0xa94 <Pipe_ConfigurePipe>
			                   NotificationEndpoint->EndpointAddress, NotificationEndpoint->EndpointSize,
			                   RNDISInterfaceInfo->Config.NotificationPipeDoubleBank ? PIPE_BANK_DOUBLE : PIPE_BANK_SINGLE);
			Pipe_SetInterruptPeriod(NotificationEndpoint->PollingIntervalMS);
    1972:	f5 01       	movw	r30, r10
    1974:	86 81       	ldd	r24, Z+6	; 0x06
			 *  \param[in] Milliseconds  Number of milliseconds between each pipe poll.
			 */
			static inline void Pipe_SetInterruptPeriod(const uint8_t Milliseconds) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetInterruptPeriod(const uint8_t Milliseconds)
			{
				UPCFG2X = Milliseconds;
    1976:	80 93 ad 00 	sts	0x00AD, r24

			RNDISInterfaceInfo->State.NotificationPipeSize = NotificationEndpoint->EndpointSize;
    197a:	84 81       	ldd	r24, Z+4	; 0x04
    197c:	95 81       	ldd	r25, Z+5	; 0x05
    197e:	d6 01       	movw	r26, r12
    1980:	51 96       	adiw	r26, 0x11	; 17
    1982:	9c 93       	st	X, r25
    1984:	8e 93       	st	-X, r24
    1986:	50 97       	sbiw	r26, 0x10	; 16
		{
			DataOUTEndpoint = EndpointData;
		}
	}

	for (uint8_t PipeNum = 1; PipeNum < PIPE_TOTAL_PIPES; PipeNum++)
    1988:	f3 94       	inc	r15
    198a:	b7 e0       	ldi	r27, 0x07	; 7
    198c:	fb 16       	cp	r15, r27
    198e:	09 f0       	breq	.+2      	; 0x1992 <RNDIS_Host_ConfigurePipes+0x1b6>
    1990:	99 cf       	rjmp	.-206    	; 0x18c4 <RNDIS_Host_ConfigurePipes+0xe8>

			RNDISInterfaceInfo->State.NotificationPipeSize = NotificationEndpoint->EndpointSize;
		}
	}

	RNDISInterfaceInfo->State.ControlInterfaceNumber = RNDISControlInterface->InterfaceNumber;
    1992:	f2 01       	movw	r30, r4
    1994:	82 81       	ldd	r24, Z+2	; 0x02
    1996:	d6 01       	movw	r26, r12
    1998:	1b 96       	adiw	r26, 0x0b	; 11
    199a:	8c 93       	st	X, r24
    199c:	1b 97       	sbiw	r26, 0x0b	; 11
	RNDISInterfaceInfo->State.IsActive = true;
    199e:	81 e0       	ldi	r24, 0x01	; 1
    19a0:	1a 96       	adiw	r26, 0x0a	; 10
    19a2:	8c 93       	st	X, r24
    19a4:	80 e0       	ldi	r24, 0x00	; 0
    19a6:	01 c0       	rjmp	.+2      	; 0x19aa <RNDIS_Host_ConfigurePipes+0x1ce>

	return RNDIS_ENUMERROR_NoError;
    19a8:	82 e0       	ldi	r24, 0x02	; 2
}
    19aa:	0f 90       	pop	r0
    19ac:	0f 90       	pop	r0
    19ae:	0f 90       	pop	r0
    19b0:	0f 90       	pop	r0
    19b2:	cf 91       	pop	r28
    19b4:	df 91       	pop	r29
    19b6:	1f 91       	pop	r17
    19b8:	0f 91       	pop	r16
    19ba:	ff 90       	pop	r15
    19bc:	ef 90       	pop	r14
    19be:	df 90       	pop	r13
    19c0:	cf 90       	pop	r12
    19c2:	bf 90       	pop	r11
    19c4:	af 90       	pop	r10
    19c6:	9f 90       	pop	r9
    19c8:	8f 90       	pop	r8
    19ca:	7f 90       	pop	r7
    19cc:	6f 90       	pop	r6
    19ce:	5f 90       	pop	r5
    19d0:	4f 90       	pop	r4
    19d2:	08 95       	ret

000019d4 <DCOMP_RNDIS_Host_NextRNDISInterfaceEndpoint>:

	return DESCRIPTOR_SEARCH_NotFound;
}

static uint8_t DCOMP_RNDIS_Host_NextRNDISInterfaceEndpoint(void* const CurrentDescriptor)
{
    19d4:	fc 01       	movw	r30, r24
	USB_Descriptor_Header_t* Header = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Header_t);

	if (Header->Type == DTYPE_Endpoint)
    19d6:	81 81       	ldd	r24, Z+1	; 0x01
    19d8:	85 30       	cpi	r24, 0x05	; 5
    19da:	51 f4       	brne	.+20     	; 0x19f0 <DCOMP_RNDIS_Host_NextRNDISInterfaceEndpoint+0x1c>
	{
		USB_Descriptor_Endpoint_t* Endpoint = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Endpoint_t);

		uint8_t EndpointType = (Endpoint->Attributes & EP_TYPE_MASK);

		if (((EndpointType == EP_TYPE_BULK) || (EndpointType == EP_TYPE_INTERRUPT)) &&
    19dc:	83 81       	ldd	r24, Z+3	; 0x03
    19de:	83 70       	andi	r24, 0x03	; 3
    19e0:	82 50       	subi	r24, 0x02	; 2
    19e2:	82 30       	cpi	r24, 0x02	; 2
    19e4:	48 f4       	brcc	.+18     	; 0x19f8 <DCOMP_RNDIS_Host_NextRNDISInterfaceEndpoint+0x24>
    19e6:	82 81       	ldd	r24, Z+2	; 0x02
    19e8:	9f d8       	rcall	.-3778   	; 0xb28 <Pipe_IsEndpointBound>
    19ea:	88 23       	and	r24, r24
    19ec:	29 f4       	brne	.+10     	; 0x19f8 <DCOMP_RNDIS_Host_NextRNDISInterfaceEndpoint+0x24>
    19ee:	08 95       	ret
		    !(Pipe_IsEndpointBound(Endpoint->EndpointAddress)))
		{
			return DESCRIPTOR_SEARCH_Found;
		}
	}
	else if (Header->Type == DTYPE_Interface)
    19f0:	84 30       	cpi	r24, 0x04	; 4
    19f2:	11 f4       	brne	.+4      	; 0x19f8 <DCOMP_RNDIS_Host_NextRNDISInterfaceEndpoint+0x24>
    19f4:	81 e0       	ldi	r24, 0x01	; 1
    19f6:	08 95       	ret
    19f8:	82 e0       	ldi	r24, 0x02	; 2
	{
		return DESCRIPTOR_SEARCH_Fail;
	}

	return DESCRIPTOR_SEARCH_NotFound;
}
    19fa:	08 95       	ret

000019fc <SerialStream_TxByte>:

FILE USARTStream = FDEV_SETUP_STREAM(SerialStream_TxByte, SerialStream_RxByte, _FDEV_SETUP_RW);

static int SerialStream_TxByte(char DataByte,
                               FILE *Stream)
{
    19fc:	98 2f       	mov	r25, r24
			 *  \param[in] DataByte  Byte to transmit through the USART.
			 */
			static inline void Serial_TxByte(const char DataByte) ATTR_ALWAYS_INLINE;
			static inline void Serial_TxByte(const char DataByte)
			{
				while (!(UCSR1A & (1 << UDRE1)));
    19fe:	80 91 c8 00 	lds	r24, 0x00C8
    1a02:	85 ff       	sbrs	r24, 5
    1a04:	fc cf       	rjmp	.-8      	; 0x19fe <SerialStream_TxByte+0x2>
				UDR1 = DataByte;
    1a06:	90 93 ce 00 	sts	0x00CE, r25
	(void)Stream;

	Serial_TxByte(DataByte);
	return 0;
}
    1a0a:	80 e0       	ldi	r24, 0x00	; 0
    1a0c:	90 e0       	ldi	r25, 0x00	; 0
    1a0e:	08 95       	ret

00001a10 <SerialStream_RxByte>:
			 *  \return Boolean true if a character has been received, false otherwise.
			 */
			static inline bool Serial_IsCharReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Serial_IsCharReceived(void)
			{
				return ((UCSR1A & (1 << RXC1)) ? true : false);
    1a10:	80 91 c8 00 	lds	r24, 0x00C8

static int SerialStream_RxByte(FILE *Stream)
{
	(void)Stream;

	if (!(Serial_IsCharReceived()))
    1a14:	87 fd       	sbrc	r24, 7
    1a16:	03 c0       	rjmp	.+6      	; 0x1a1e <SerialStream_RxByte+0xe>
    1a18:	2e ef       	ldi	r18, 0xFE	; 254
    1a1a:	3f ef       	ldi	r19, 0xFF	; 255
    1a1c:	08 c0       	rjmp	.+16     	; 0x1a2e <SerialStream_RxByte+0x1e>
			 *  \return Byte received from the USART.
			 */
			static inline char Serial_RxByte(void) ATTR_ALWAYS_INLINE;
			static inline char Serial_RxByte(void)
			{
				while (!(UCSR1A & (1 << RXC1)));
    1a1e:	80 91 c8 00 	lds	r24, 0x00C8
    1a22:	87 ff       	sbrs	r24, 7
    1a24:	fc cf       	rjmp	.-8      	; 0x1a1e <SerialStream_RxByte+0xe>
				return UDR1;
    1a26:	80 91 ce 00 	lds	r24, 0x00CE
	  return _FDEV_EOF;

	return Serial_RxByte();
    1a2a:	28 2f       	mov	r18, r24
    1a2c:	30 e0       	ldi	r19, 0x00	; 0
}
    1a2e:	c9 01       	movw	r24, r18
    1a30:	08 95       	ret

00001a32 <memcpy>:
    1a32:	fb 01       	movw	r30, r22
    1a34:	dc 01       	movw	r26, r24
    1a36:	02 c0       	rjmp	.+4      	; 0x1a3c <memcpy+0xa>
    1a38:	01 90       	ld	r0, Z+
    1a3a:	0d 92       	st	X+, r0
    1a3c:	41 50       	subi	r20, 0x01	; 1
    1a3e:	50 40       	sbci	r21, 0x00	; 0
    1a40:	d8 f7       	brcc	.-10     	; 0x1a38 <memcpy+0x6>
    1a42:	08 95       	ret

00001a44 <printf>:
    1a44:	df 93       	push	r29
    1a46:	cf 93       	push	r28
    1a48:	cd b7       	in	r28, 0x3d	; 61
    1a4a:	de b7       	in	r29, 0x3e	; 62
    1a4c:	fe 01       	movw	r30, r28
    1a4e:	35 96       	adiw	r30, 0x05	; 5
    1a50:	61 91       	ld	r22, Z+
    1a52:	71 91       	ld	r23, Z+
    1a54:	80 91 59 05 	lds	r24, 0x0559
    1a58:	90 91 5a 05 	lds	r25, 0x055A
    1a5c:	af 01       	movw	r20, r30
    1a5e:	5a d0       	rcall	.+180    	; 0x1b14 <vfprintf>
    1a60:	cf 91       	pop	r28
    1a62:	df 91       	pop	r29
    1a64:	08 95       	ret

00001a66 <printf_P>:
    1a66:	df 93       	push	r29
    1a68:	cf 93       	push	r28
    1a6a:	cd b7       	in	r28, 0x3d	; 61
    1a6c:	de b7       	in	r29, 0x3e	; 62
    1a6e:	fe 01       	movw	r30, r28
    1a70:	35 96       	adiw	r30, 0x05	; 5
    1a72:	61 91       	ld	r22, Z+
    1a74:	71 91       	ld	r23, Z+
    1a76:	a0 91 59 05 	lds	r26, 0x0559
    1a7a:	b0 91 5a 05 	lds	r27, 0x055A
    1a7e:	13 96       	adiw	r26, 0x03	; 3
    1a80:	8c 91       	ld	r24, X
    1a82:	13 97       	sbiw	r26, 0x03	; 3
    1a84:	88 60       	ori	r24, 0x08	; 8
    1a86:	13 96       	adiw	r26, 0x03	; 3
    1a88:	8c 93       	st	X, r24
    1a8a:	80 91 59 05 	lds	r24, 0x0559
    1a8e:	90 91 5a 05 	lds	r25, 0x055A
    1a92:	af 01       	movw	r20, r30
    1a94:	3f d0       	rcall	.+126    	; 0x1b14 <vfprintf>
    1a96:	e0 91 59 05 	lds	r30, 0x0559
    1a9a:	f0 91 5a 05 	lds	r31, 0x055A
    1a9e:	23 81       	ldd	r18, Z+3	; 0x03
    1aa0:	27 7f       	andi	r18, 0xF7	; 247
    1aa2:	23 83       	std	Z+3, r18	; 0x03
    1aa4:	cf 91       	pop	r28
    1aa6:	df 91       	pop	r29
    1aa8:	08 95       	ret

00001aaa <puts_P>:
    1aaa:	0f 93       	push	r16
    1aac:	1f 93       	push	r17
    1aae:	cf 93       	push	r28
    1ab0:	df 93       	push	r29
    1ab2:	ec 01       	movw	r28, r24
    1ab4:	e0 91 59 05 	lds	r30, 0x0559
    1ab8:	f0 91 5a 05 	lds	r31, 0x055A
    1abc:	83 81       	ldd	r24, Z+3	; 0x03
    1abe:	81 ff       	sbrs	r24, 1
    1ac0:	21 c0       	rjmp	.+66     	; 0x1b04 <puts_P+0x5a>
    1ac2:	00 e0       	ldi	r16, 0x00	; 0
    1ac4:	10 e0       	ldi	r17, 0x00	; 0
    1ac6:	0e c0       	rjmp	.+28     	; 0x1ae4 <puts_P+0x3a>
    1ac8:	e0 91 59 05 	lds	r30, 0x0559
    1acc:	f0 91 5a 05 	lds	r31, 0x055A
    1ad0:	20 85       	ldd	r18, Z+8	; 0x08
    1ad2:	31 85       	ldd	r19, Z+9	; 0x09
    1ad4:	bf 01       	movw	r22, r30
    1ad6:	f9 01       	movw	r30, r18
    1ad8:	09 95       	icall
    1ada:	89 2b       	or	r24, r25
    1adc:	11 f0       	breq	.+4      	; 0x1ae2 <puts_P+0x38>
    1ade:	0f ef       	ldi	r16, 0xFF	; 255
    1ae0:	1f ef       	ldi	r17, 0xFF	; 255
    1ae2:	21 96       	adiw	r28, 0x01	; 1
    1ae4:	fe 01       	movw	r30, r28
    1ae6:	84 91       	lpm	r24, Z+
    1ae8:	88 23       	and	r24, r24
    1aea:	71 f7       	brne	.-36     	; 0x1ac8 <puts_P+0x1e>
    1aec:	e0 91 59 05 	lds	r30, 0x0559
    1af0:	f0 91 5a 05 	lds	r31, 0x055A
    1af4:	20 85       	ldd	r18, Z+8	; 0x08
    1af6:	31 85       	ldd	r19, Z+9	; 0x09
    1af8:	8a e0       	ldi	r24, 0x0A	; 10
    1afa:	bf 01       	movw	r22, r30
    1afc:	f9 01       	movw	r30, r18
    1afe:	09 95       	icall
    1b00:	89 2b       	or	r24, r25
    1b02:	11 f0       	breq	.+4      	; 0x1b08 <puts_P+0x5e>
    1b04:	0f ef       	ldi	r16, 0xFF	; 255
    1b06:	1f ef       	ldi	r17, 0xFF	; 255
    1b08:	c8 01       	movw	r24, r16
    1b0a:	df 91       	pop	r29
    1b0c:	cf 91       	pop	r28
    1b0e:	1f 91       	pop	r17
    1b10:	0f 91       	pop	r16
    1b12:	08 95       	ret

00001b14 <vfprintf>:
    1b14:	2f 92       	push	r2
    1b16:	3f 92       	push	r3
    1b18:	4f 92       	push	r4
    1b1a:	5f 92       	push	r5
    1b1c:	6f 92       	push	r6
    1b1e:	7f 92       	push	r7
    1b20:	8f 92       	push	r8
    1b22:	9f 92       	push	r9
    1b24:	af 92       	push	r10
    1b26:	bf 92       	push	r11
    1b28:	cf 92       	push	r12
    1b2a:	df 92       	push	r13
    1b2c:	ef 92       	push	r14
    1b2e:	ff 92       	push	r15
    1b30:	0f 93       	push	r16
    1b32:	1f 93       	push	r17
    1b34:	df 93       	push	r29
    1b36:	cf 93       	push	r28
    1b38:	cd b7       	in	r28, 0x3d	; 61
    1b3a:	de b7       	in	r29, 0x3e	; 62
    1b3c:	2b 97       	sbiw	r28, 0x0b	; 11
    1b3e:	0f b6       	in	r0, 0x3f	; 63
    1b40:	f8 94       	cli
    1b42:	de bf       	out	0x3e, r29	; 62
    1b44:	0f be       	out	0x3f, r0	; 63
    1b46:	cd bf       	out	0x3d, r28	; 61
    1b48:	3c 01       	movw	r6, r24
    1b4a:	2b 01       	movw	r4, r22
    1b4c:	5a 01       	movw	r10, r20
    1b4e:	fc 01       	movw	r30, r24
    1b50:	17 82       	std	Z+7, r1	; 0x07
    1b52:	16 82       	std	Z+6, r1	; 0x06
    1b54:	83 81       	ldd	r24, Z+3	; 0x03
    1b56:	81 fd       	sbrc	r24, 1
    1b58:	03 c0       	rjmp	.+6      	; 0x1b60 <vfprintf+0x4c>
    1b5a:	6f ef       	ldi	r22, 0xFF	; 255
    1b5c:	7f ef       	ldi	r23, 0xFF	; 255
    1b5e:	b9 c1       	rjmp	.+882    	; 0x1ed2 <vfprintf+0x3be>
    1b60:	9a e0       	ldi	r25, 0x0A	; 10
    1b62:	89 2e       	mov	r8, r25
    1b64:	1e 01       	movw	r2, r28
    1b66:	08 94       	sec
    1b68:	21 1c       	adc	r2, r1
    1b6a:	31 1c       	adc	r3, r1
    1b6c:	f3 01       	movw	r30, r6
    1b6e:	23 81       	ldd	r18, Z+3	; 0x03
    1b70:	f2 01       	movw	r30, r4
    1b72:	23 fd       	sbrc	r18, 3
    1b74:	85 91       	lpm	r24, Z+
    1b76:	23 ff       	sbrs	r18, 3
    1b78:	81 91       	ld	r24, Z+
    1b7a:	2f 01       	movw	r4, r30
    1b7c:	88 23       	and	r24, r24
    1b7e:	09 f4       	brne	.+2      	; 0x1b82 <vfprintf+0x6e>
    1b80:	a5 c1       	rjmp	.+842    	; 0x1ecc <vfprintf+0x3b8>
    1b82:	85 32       	cpi	r24, 0x25	; 37
    1b84:	39 f4       	brne	.+14     	; 0x1b94 <vfprintf+0x80>
    1b86:	23 fd       	sbrc	r18, 3
    1b88:	85 91       	lpm	r24, Z+
    1b8a:	23 ff       	sbrs	r18, 3
    1b8c:	81 91       	ld	r24, Z+
    1b8e:	2f 01       	movw	r4, r30
    1b90:	85 32       	cpi	r24, 0x25	; 37
    1b92:	21 f4       	brne	.+8      	; 0x1b9c <vfprintf+0x88>
    1b94:	90 e0       	ldi	r25, 0x00	; 0
    1b96:	b3 01       	movw	r22, r6
    1b98:	cc d1       	rcall	.+920    	; 0x1f32 <fputc>
    1b9a:	e8 cf       	rjmp	.-48     	; 0x1b6c <vfprintf+0x58>
    1b9c:	98 2f       	mov	r25, r24
    1b9e:	ff 24       	eor	r15, r15
    1ba0:	ee 24       	eor	r14, r14
    1ba2:	99 24       	eor	r9, r9
    1ba4:	ff e1       	ldi	r31, 0x1F	; 31
    1ba6:	ff 15       	cp	r31, r15
    1ba8:	d0 f0       	brcs	.+52     	; 0x1bde <vfprintf+0xca>
    1baa:	9b 32       	cpi	r25, 0x2B	; 43
    1bac:	69 f0       	breq	.+26     	; 0x1bc8 <vfprintf+0xb4>
    1bae:	9c 32       	cpi	r25, 0x2C	; 44
    1bb0:	28 f4       	brcc	.+10     	; 0x1bbc <vfprintf+0xa8>
    1bb2:	90 32       	cpi	r25, 0x20	; 32
    1bb4:	59 f0       	breq	.+22     	; 0x1bcc <vfprintf+0xb8>
    1bb6:	93 32       	cpi	r25, 0x23	; 35
    1bb8:	91 f4       	brne	.+36     	; 0x1bde <vfprintf+0xca>
    1bba:	0e c0       	rjmp	.+28     	; 0x1bd8 <vfprintf+0xc4>
    1bbc:	9d 32       	cpi	r25, 0x2D	; 45
    1bbe:	49 f0       	breq	.+18     	; 0x1bd2 <vfprintf+0xbe>
    1bc0:	90 33       	cpi	r25, 0x30	; 48
    1bc2:	69 f4       	brne	.+26     	; 0x1bde <vfprintf+0xca>
    1bc4:	41 e0       	ldi	r20, 0x01	; 1
    1bc6:	24 c0       	rjmp	.+72     	; 0x1c10 <vfprintf+0xfc>
    1bc8:	52 e0       	ldi	r21, 0x02	; 2
    1bca:	f5 2a       	or	r15, r21
    1bcc:	84 e0       	ldi	r24, 0x04	; 4
    1bce:	f8 2a       	or	r15, r24
    1bd0:	28 c0       	rjmp	.+80     	; 0x1c22 <vfprintf+0x10e>
    1bd2:	98 e0       	ldi	r25, 0x08	; 8
    1bd4:	f9 2a       	or	r15, r25
    1bd6:	25 c0       	rjmp	.+74     	; 0x1c22 <vfprintf+0x10e>
    1bd8:	e0 e1       	ldi	r30, 0x10	; 16
    1bda:	fe 2a       	or	r15, r30
    1bdc:	22 c0       	rjmp	.+68     	; 0x1c22 <vfprintf+0x10e>
    1bde:	f7 fc       	sbrc	r15, 7
    1be0:	29 c0       	rjmp	.+82     	; 0x1c34 <vfprintf+0x120>
    1be2:	89 2f       	mov	r24, r25
    1be4:	80 53       	subi	r24, 0x30	; 48
    1be6:	8a 30       	cpi	r24, 0x0A	; 10
    1be8:	70 f4       	brcc	.+28     	; 0x1c06 <vfprintf+0xf2>
    1bea:	f6 fe       	sbrs	r15, 6
    1bec:	05 c0       	rjmp	.+10     	; 0x1bf8 <vfprintf+0xe4>
    1bee:	98 9c       	mul	r9, r8
    1bf0:	90 2c       	mov	r9, r0
    1bf2:	11 24       	eor	r1, r1
    1bf4:	98 0e       	add	r9, r24
    1bf6:	15 c0       	rjmp	.+42     	; 0x1c22 <vfprintf+0x10e>
    1bf8:	e8 9c       	mul	r14, r8
    1bfa:	e0 2c       	mov	r14, r0
    1bfc:	11 24       	eor	r1, r1
    1bfe:	e8 0e       	add	r14, r24
    1c00:	f0 e2       	ldi	r31, 0x20	; 32
    1c02:	ff 2a       	or	r15, r31
    1c04:	0e c0       	rjmp	.+28     	; 0x1c22 <vfprintf+0x10e>
    1c06:	9e 32       	cpi	r25, 0x2E	; 46
    1c08:	29 f4       	brne	.+10     	; 0x1c14 <vfprintf+0x100>
    1c0a:	f6 fc       	sbrc	r15, 6
    1c0c:	5f c1       	rjmp	.+702    	; 0x1ecc <vfprintf+0x3b8>
    1c0e:	40 e4       	ldi	r20, 0x40	; 64
    1c10:	f4 2a       	or	r15, r20
    1c12:	07 c0       	rjmp	.+14     	; 0x1c22 <vfprintf+0x10e>
    1c14:	9c 36       	cpi	r25, 0x6C	; 108
    1c16:	19 f4       	brne	.+6      	; 0x1c1e <vfprintf+0x10a>
    1c18:	50 e8       	ldi	r21, 0x80	; 128
    1c1a:	f5 2a       	or	r15, r21
    1c1c:	02 c0       	rjmp	.+4      	; 0x1c22 <vfprintf+0x10e>
    1c1e:	98 36       	cpi	r25, 0x68	; 104
    1c20:	49 f4       	brne	.+18     	; 0x1c34 <vfprintf+0x120>
    1c22:	f2 01       	movw	r30, r4
    1c24:	23 fd       	sbrc	r18, 3
    1c26:	95 91       	lpm	r25, Z+
    1c28:	23 ff       	sbrs	r18, 3
    1c2a:	91 91       	ld	r25, Z+
    1c2c:	2f 01       	movw	r4, r30
    1c2e:	99 23       	and	r25, r25
    1c30:	09 f0       	breq	.+2      	; 0x1c34 <vfprintf+0x120>
    1c32:	b8 cf       	rjmp	.-144    	; 0x1ba4 <vfprintf+0x90>
    1c34:	89 2f       	mov	r24, r25
    1c36:	85 54       	subi	r24, 0x45	; 69
    1c38:	83 30       	cpi	r24, 0x03	; 3
    1c3a:	18 f0       	brcs	.+6      	; 0x1c42 <vfprintf+0x12e>
    1c3c:	80 52       	subi	r24, 0x20	; 32
    1c3e:	83 30       	cpi	r24, 0x03	; 3
    1c40:	38 f4       	brcc	.+14     	; 0x1c50 <vfprintf+0x13c>
    1c42:	44 e0       	ldi	r20, 0x04	; 4
    1c44:	50 e0       	ldi	r21, 0x00	; 0
    1c46:	a4 0e       	add	r10, r20
    1c48:	b5 1e       	adc	r11, r21
    1c4a:	5f e3       	ldi	r21, 0x3F	; 63
    1c4c:	59 83       	std	Y+1, r21	; 0x01
    1c4e:	0f c0       	rjmp	.+30     	; 0x1c6e <vfprintf+0x15a>
    1c50:	93 36       	cpi	r25, 0x63	; 99
    1c52:	31 f0       	breq	.+12     	; 0x1c60 <vfprintf+0x14c>
    1c54:	93 37       	cpi	r25, 0x73	; 115
    1c56:	79 f0       	breq	.+30     	; 0x1c76 <vfprintf+0x162>
    1c58:	93 35       	cpi	r25, 0x53	; 83
    1c5a:	09 f0       	breq	.+2      	; 0x1c5e <vfprintf+0x14a>
    1c5c:	52 c0       	rjmp	.+164    	; 0x1d02 <vfprintf+0x1ee>
    1c5e:	1f c0       	rjmp	.+62     	; 0x1c9e <vfprintf+0x18a>
    1c60:	f5 01       	movw	r30, r10
    1c62:	80 81       	ld	r24, Z
    1c64:	89 83       	std	Y+1, r24	; 0x01
    1c66:	42 e0       	ldi	r20, 0x02	; 2
    1c68:	50 e0       	ldi	r21, 0x00	; 0
    1c6a:	a4 0e       	add	r10, r20
    1c6c:	b5 1e       	adc	r11, r21
    1c6e:	61 01       	movw	r12, r2
    1c70:	01 e0       	ldi	r16, 0x01	; 1
    1c72:	10 e0       	ldi	r17, 0x00	; 0
    1c74:	11 c0       	rjmp	.+34     	; 0x1c98 <vfprintf+0x184>
    1c76:	f5 01       	movw	r30, r10
    1c78:	c0 80       	ld	r12, Z
    1c7a:	d1 80       	ldd	r13, Z+1	; 0x01
    1c7c:	f6 fc       	sbrc	r15, 6
    1c7e:	03 c0       	rjmp	.+6      	; 0x1c86 <vfprintf+0x172>
    1c80:	6f ef       	ldi	r22, 0xFF	; 255
    1c82:	7f ef       	ldi	r23, 0xFF	; 255
    1c84:	02 c0       	rjmp	.+4      	; 0x1c8a <vfprintf+0x176>
    1c86:	69 2d       	mov	r22, r9
    1c88:	70 e0       	ldi	r23, 0x00	; 0
    1c8a:	42 e0       	ldi	r20, 0x02	; 2
    1c8c:	50 e0       	ldi	r21, 0x00	; 0
    1c8e:	a4 0e       	add	r10, r20
    1c90:	b5 1e       	adc	r11, r21
    1c92:	c6 01       	movw	r24, r12
    1c94:	43 d1       	rcall	.+646    	; 0x1f1c <strnlen>
    1c96:	8c 01       	movw	r16, r24
    1c98:	5f e7       	ldi	r21, 0x7F	; 127
    1c9a:	f5 22       	and	r15, r21
    1c9c:	13 c0       	rjmp	.+38     	; 0x1cc4 <vfprintf+0x1b0>
    1c9e:	f5 01       	movw	r30, r10
    1ca0:	c0 80       	ld	r12, Z
    1ca2:	d1 80       	ldd	r13, Z+1	; 0x01
    1ca4:	f6 fc       	sbrc	r15, 6
    1ca6:	03 c0       	rjmp	.+6      	; 0x1cae <vfprintf+0x19a>
    1ca8:	6f ef       	ldi	r22, 0xFF	; 255
    1caa:	7f ef       	ldi	r23, 0xFF	; 255
    1cac:	02 c0       	rjmp	.+4      	; 0x1cb2 <vfprintf+0x19e>
    1cae:	69 2d       	mov	r22, r9
    1cb0:	70 e0       	ldi	r23, 0x00	; 0
    1cb2:	42 e0       	ldi	r20, 0x02	; 2
    1cb4:	50 e0       	ldi	r21, 0x00	; 0
    1cb6:	a4 0e       	add	r10, r20
    1cb8:	b5 1e       	adc	r11, r21
    1cba:	c6 01       	movw	r24, r12
    1cbc:	24 d1       	rcall	.+584    	; 0x1f06 <strnlen_P>
    1cbe:	8c 01       	movw	r16, r24
    1cc0:	50 e8       	ldi	r21, 0x80	; 128
    1cc2:	f5 2a       	or	r15, r21
    1cc4:	f3 fe       	sbrs	r15, 3
    1cc6:	06 c0       	rjmp	.+12     	; 0x1cd4 <vfprintf+0x1c0>
    1cc8:	18 c0       	rjmp	.+48     	; 0x1cfa <vfprintf+0x1e6>
    1cca:	80 e2       	ldi	r24, 0x20	; 32
    1ccc:	90 e0       	ldi	r25, 0x00	; 0
    1cce:	b3 01       	movw	r22, r6
    1cd0:	30 d1       	rcall	.+608    	; 0x1f32 <fputc>
    1cd2:	ea 94       	dec	r14
    1cd4:	8e 2d       	mov	r24, r14
    1cd6:	90 e0       	ldi	r25, 0x00	; 0
    1cd8:	08 17       	cp	r16, r24
    1cda:	19 07       	cpc	r17, r25
    1cdc:	b0 f3       	brcs	.-20     	; 0x1cca <vfprintf+0x1b6>
    1cde:	0d c0       	rjmp	.+26     	; 0x1cfa <vfprintf+0x1e6>
    1ce0:	f6 01       	movw	r30, r12
    1ce2:	f7 fc       	sbrc	r15, 7
    1ce4:	85 91       	lpm	r24, Z+
    1ce6:	f7 fe       	sbrs	r15, 7
    1ce8:	81 91       	ld	r24, Z+
    1cea:	6f 01       	movw	r12, r30
    1cec:	90 e0       	ldi	r25, 0x00	; 0
    1cee:	b3 01       	movw	r22, r6
    1cf0:	20 d1       	rcall	.+576    	; 0x1f32 <fputc>
    1cf2:	e1 10       	cpse	r14, r1
    1cf4:	ea 94       	dec	r14
    1cf6:	01 50       	subi	r16, 0x01	; 1
    1cf8:	10 40       	sbci	r17, 0x00	; 0
    1cfa:	01 15       	cp	r16, r1
    1cfc:	11 05       	cpc	r17, r1
    1cfe:	81 f7       	brne	.-32     	; 0x1ce0 <vfprintf+0x1cc>
    1d00:	e2 c0       	rjmp	.+452    	; 0x1ec6 <vfprintf+0x3b2>
    1d02:	94 36       	cpi	r25, 0x64	; 100
    1d04:	11 f0       	breq	.+4      	; 0x1d0a <vfprintf+0x1f6>
    1d06:	99 36       	cpi	r25, 0x69	; 105
    1d08:	61 f5       	brne	.+88     	; 0x1d62 <vfprintf+0x24e>
    1d0a:	f7 fe       	sbrs	r15, 7
    1d0c:	08 c0       	rjmp	.+16     	; 0x1d1e <vfprintf+0x20a>
    1d0e:	f5 01       	movw	r30, r10
    1d10:	20 81       	ld	r18, Z
    1d12:	31 81       	ldd	r19, Z+1	; 0x01
    1d14:	42 81       	ldd	r20, Z+2	; 0x02
    1d16:	53 81       	ldd	r21, Z+3	; 0x03
    1d18:	84 e0       	ldi	r24, 0x04	; 4
    1d1a:	90 e0       	ldi	r25, 0x00	; 0
    1d1c:	0a c0       	rjmp	.+20     	; 0x1d32 <vfprintf+0x21e>
    1d1e:	f5 01       	movw	r30, r10
    1d20:	80 81       	ld	r24, Z
    1d22:	91 81       	ldd	r25, Z+1	; 0x01
    1d24:	9c 01       	movw	r18, r24
    1d26:	44 27       	eor	r20, r20
    1d28:	37 fd       	sbrc	r19, 7
    1d2a:	40 95       	com	r20
    1d2c:	54 2f       	mov	r21, r20
    1d2e:	82 e0       	ldi	r24, 0x02	; 2
    1d30:	90 e0       	ldi	r25, 0x00	; 0
    1d32:	a8 0e       	add	r10, r24
    1d34:	b9 1e       	adc	r11, r25
    1d36:	9f e6       	ldi	r25, 0x6F	; 111
    1d38:	f9 22       	and	r15, r25
    1d3a:	57 ff       	sbrs	r21, 7
    1d3c:	09 c0       	rjmp	.+18     	; 0x1d50 <vfprintf+0x23c>
    1d3e:	50 95       	com	r21
    1d40:	40 95       	com	r20
    1d42:	30 95       	com	r19
    1d44:	21 95       	neg	r18
    1d46:	3f 4f       	sbci	r19, 0xFF	; 255
    1d48:	4f 4f       	sbci	r20, 0xFF	; 255
    1d4a:	5f 4f       	sbci	r21, 0xFF	; 255
    1d4c:	e0 e8       	ldi	r30, 0x80	; 128
    1d4e:	fe 2a       	or	r15, r30
    1d50:	ca 01       	movw	r24, r20
    1d52:	b9 01       	movw	r22, r18
    1d54:	a1 01       	movw	r20, r2
    1d56:	2a e0       	ldi	r18, 0x0A	; 10
    1d58:	30 e0       	ldi	r19, 0x00	; 0
    1d5a:	17 d1       	rcall	.+558    	; 0x1f8a <__ultoa_invert>
    1d5c:	d8 2e       	mov	r13, r24
    1d5e:	d2 18       	sub	r13, r2
    1d60:	3f c0       	rjmp	.+126    	; 0x1de0 <vfprintf+0x2cc>
    1d62:	95 37       	cpi	r25, 0x75	; 117
    1d64:	29 f4       	brne	.+10     	; 0x1d70 <vfprintf+0x25c>
    1d66:	1f 2d       	mov	r17, r15
    1d68:	1f 7e       	andi	r17, 0xEF	; 239
    1d6a:	2a e0       	ldi	r18, 0x0A	; 10
    1d6c:	30 e0       	ldi	r19, 0x00	; 0
    1d6e:	1d c0       	rjmp	.+58     	; 0x1daa <vfprintf+0x296>
    1d70:	1f 2d       	mov	r17, r15
    1d72:	19 7f       	andi	r17, 0xF9	; 249
    1d74:	9f 36       	cpi	r25, 0x6F	; 111
    1d76:	61 f0       	breq	.+24     	; 0x1d90 <vfprintf+0x27c>
    1d78:	90 37       	cpi	r25, 0x70	; 112
    1d7a:	20 f4       	brcc	.+8      	; 0x1d84 <vfprintf+0x270>
    1d7c:	98 35       	cpi	r25, 0x58	; 88
    1d7e:	09 f0       	breq	.+2      	; 0x1d82 <vfprintf+0x26e>
    1d80:	a5 c0       	rjmp	.+330    	; 0x1ecc <vfprintf+0x3b8>
    1d82:	0f c0       	rjmp	.+30     	; 0x1da2 <vfprintf+0x28e>
    1d84:	90 37       	cpi	r25, 0x70	; 112
    1d86:	39 f0       	breq	.+14     	; 0x1d96 <vfprintf+0x282>
    1d88:	98 37       	cpi	r25, 0x78	; 120
    1d8a:	09 f0       	breq	.+2      	; 0x1d8e <vfprintf+0x27a>
    1d8c:	9f c0       	rjmp	.+318    	; 0x1ecc <vfprintf+0x3b8>
    1d8e:	04 c0       	rjmp	.+8      	; 0x1d98 <vfprintf+0x284>
    1d90:	28 e0       	ldi	r18, 0x08	; 8
    1d92:	30 e0       	ldi	r19, 0x00	; 0
    1d94:	0a c0       	rjmp	.+20     	; 0x1daa <vfprintf+0x296>
    1d96:	10 61       	ori	r17, 0x10	; 16
    1d98:	14 fd       	sbrc	r17, 4
    1d9a:	14 60       	ori	r17, 0x04	; 4
    1d9c:	20 e1       	ldi	r18, 0x10	; 16
    1d9e:	30 e0       	ldi	r19, 0x00	; 0
    1da0:	04 c0       	rjmp	.+8      	; 0x1daa <vfprintf+0x296>
    1da2:	14 fd       	sbrc	r17, 4
    1da4:	16 60       	ori	r17, 0x06	; 6
    1da6:	20 e1       	ldi	r18, 0x10	; 16
    1da8:	32 e0       	ldi	r19, 0x02	; 2
    1daa:	17 ff       	sbrs	r17, 7
    1dac:	08 c0       	rjmp	.+16     	; 0x1dbe <vfprintf+0x2aa>
    1dae:	f5 01       	movw	r30, r10
    1db0:	60 81       	ld	r22, Z
    1db2:	71 81       	ldd	r23, Z+1	; 0x01
    1db4:	82 81       	ldd	r24, Z+2	; 0x02
    1db6:	93 81       	ldd	r25, Z+3	; 0x03
    1db8:	44 e0       	ldi	r20, 0x04	; 4
    1dba:	50 e0       	ldi	r21, 0x00	; 0
    1dbc:	08 c0       	rjmp	.+16     	; 0x1dce <vfprintf+0x2ba>
    1dbe:	f5 01       	movw	r30, r10
    1dc0:	80 81       	ld	r24, Z
    1dc2:	91 81       	ldd	r25, Z+1	; 0x01
    1dc4:	bc 01       	movw	r22, r24
    1dc6:	80 e0       	ldi	r24, 0x00	; 0
    1dc8:	90 e0       	ldi	r25, 0x00	; 0
    1dca:	42 e0       	ldi	r20, 0x02	; 2
    1dcc:	50 e0       	ldi	r21, 0x00	; 0
    1dce:	a4 0e       	add	r10, r20
    1dd0:	b5 1e       	adc	r11, r21
    1dd2:	a1 01       	movw	r20, r2
    1dd4:	da d0       	rcall	.+436    	; 0x1f8a <__ultoa_invert>
    1dd6:	d8 2e       	mov	r13, r24
    1dd8:	d2 18       	sub	r13, r2
    1dda:	8f e7       	ldi	r24, 0x7F	; 127
    1ddc:	f8 2e       	mov	r15, r24
    1dde:	f1 22       	and	r15, r17
    1de0:	f6 fe       	sbrs	r15, 6
    1de2:	0b c0       	rjmp	.+22     	; 0x1dfa <vfprintf+0x2e6>
    1de4:	5e ef       	ldi	r21, 0xFE	; 254
    1de6:	f5 22       	and	r15, r21
    1de8:	d9 14       	cp	r13, r9
    1dea:	38 f4       	brcc	.+14     	; 0x1dfa <vfprintf+0x2e6>
    1dec:	f4 fe       	sbrs	r15, 4
    1dee:	07 c0       	rjmp	.+14     	; 0x1dfe <vfprintf+0x2ea>
    1df0:	f2 fc       	sbrc	r15, 2
    1df2:	05 c0       	rjmp	.+10     	; 0x1dfe <vfprintf+0x2ea>
    1df4:	8f ee       	ldi	r24, 0xEF	; 239
    1df6:	f8 22       	and	r15, r24
    1df8:	02 c0       	rjmp	.+4      	; 0x1dfe <vfprintf+0x2ea>
    1dfa:	1d 2d       	mov	r17, r13
    1dfc:	01 c0       	rjmp	.+2      	; 0x1e00 <vfprintf+0x2ec>
    1dfe:	19 2d       	mov	r17, r9
    1e00:	f4 fe       	sbrs	r15, 4
    1e02:	0d c0       	rjmp	.+26     	; 0x1e1e <vfprintf+0x30a>
    1e04:	fe 01       	movw	r30, r28
    1e06:	ed 0d       	add	r30, r13
    1e08:	f1 1d       	adc	r31, r1
    1e0a:	80 81       	ld	r24, Z
    1e0c:	80 33       	cpi	r24, 0x30	; 48
    1e0e:	19 f4       	brne	.+6      	; 0x1e16 <vfprintf+0x302>
    1e10:	99 ee       	ldi	r25, 0xE9	; 233
    1e12:	f9 22       	and	r15, r25
    1e14:	08 c0       	rjmp	.+16     	; 0x1e26 <vfprintf+0x312>
    1e16:	1f 5f       	subi	r17, 0xFF	; 255
    1e18:	f2 fe       	sbrs	r15, 2
    1e1a:	05 c0       	rjmp	.+10     	; 0x1e26 <vfprintf+0x312>
    1e1c:	03 c0       	rjmp	.+6      	; 0x1e24 <vfprintf+0x310>
    1e1e:	8f 2d       	mov	r24, r15
    1e20:	86 78       	andi	r24, 0x86	; 134
    1e22:	09 f0       	breq	.+2      	; 0x1e26 <vfprintf+0x312>
    1e24:	1f 5f       	subi	r17, 0xFF	; 255
    1e26:	0f 2d       	mov	r16, r15
    1e28:	f3 fc       	sbrc	r15, 3
    1e2a:	13 c0       	rjmp	.+38     	; 0x1e52 <vfprintf+0x33e>
    1e2c:	f0 fe       	sbrs	r15, 0
    1e2e:	0e c0       	rjmp	.+28     	; 0x1e4c <vfprintf+0x338>
    1e30:	1e 15       	cp	r17, r14
    1e32:	10 f0       	brcs	.+4      	; 0x1e38 <vfprintf+0x324>
    1e34:	9d 2c       	mov	r9, r13
    1e36:	0a c0       	rjmp	.+20     	; 0x1e4c <vfprintf+0x338>
    1e38:	9d 2c       	mov	r9, r13
    1e3a:	9e 0c       	add	r9, r14
    1e3c:	91 1a       	sub	r9, r17
    1e3e:	1e 2d       	mov	r17, r14
    1e40:	05 c0       	rjmp	.+10     	; 0x1e4c <vfprintf+0x338>
    1e42:	80 e2       	ldi	r24, 0x20	; 32
    1e44:	90 e0       	ldi	r25, 0x00	; 0
    1e46:	b3 01       	movw	r22, r6
    1e48:	74 d0       	rcall	.+232    	; 0x1f32 <fputc>
    1e4a:	1f 5f       	subi	r17, 0xFF	; 255
    1e4c:	1e 15       	cp	r17, r14
    1e4e:	c8 f3       	brcs	.-14     	; 0x1e42 <vfprintf+0x32e>
    1e50:	04 c0       	rjmp	.+8      	; 0x1e5a <vfprintf+0x346>
    1e52:	1e 15       	cp	r17, r14
    1e54:	10 f4       	brcc	.+4      	; 0x1e5a <vfprintf+0x346>
    1e56:	e1 1a       	sub	r14, r17
    1e58:	01 c0       	rjmp	.+2      	; 0x1e5c <vfprintf+0x348>
    1e5a:	ee 24       	eor	r14, r14
    1e5c:	04 ff       	sbrs	r16, 4
    1e5e:	0e c0       	rjmp	.+28     	; 0x1e7c <vfprintf+0x368>
    1e60:	80 e3       	ldi	r24, 0x30	; 48
    1e62:	90 e0       	ldi	r25, 0x00	; 0
    1e64:	b3 01       	movw	r22, r6
    1e66:	65 d0       	rcall	.+202    	; 0x1f32 <fputc>
    1e68:	02 ff       	sbrs	r16, 2
    1e6a:	1b c0       	rjmp	.+54     	; 0x1ea2 <vfprintf+0x38e>
    1e6c:	01 fd       	sbrc	r16, 1
    1e6e:	03 c0       	rjmp	.+6      	; 0x1e76 <vfprintf+0x362>
    1e70:	88 e7       	ldi	r24, 0x78	; 120
    1e72:	90 e0       	ldi	r25, 0x00	; 0
    1e74:	0e c0       	rjmp	.+28     	; 0x1e92 <vfprintf+0x37e>
    1e76:	88 e5       	ldi	r24, 0x58	; 88
    1e78:	90 e0       	ldi	r25, 0x00	; 0
    1e7a:	0b c0       	rjmp	.+22     	; 0x1e92 <vfprintf+0x37e>
    1e7c:	80 2f       	mov	r24, r16
    1e7e:	86 78       	andi	r24, 0x86	; 134
    1e80:	81 f0       	breq	.+32     	; 0x1ea2 <vfprintf+0x38e>
    1e82:	01 ff       	sbrs	r16, 1
    1e84:	02 c0       	rjmp	.+4      	; 0x1e8a <vfprintf+0x376>
    1e86:	8b e2       	ldi	r24, 0x2B	; 43
    1e88:	01 c0       	rjmp	.+2      	; 0x1e8c <vfprintf+0x378>
    1e8a:	80 e2       	ldi	r24, 0x20	; 32
    1e8c:	f7 fc       	sbrc	r15, 7
    1e8e:	8d e2       	ldi	r24, 0x2D	; 45
    1e90:	90 e0       	ldi	r25, 0x00	; 0
    1e92:	b3 01       	movw	r22, r6
    1e94:	4e d0       	rcall	.+156    	; 0x1f32 <fputc>
    1e96:	05 c0       	rjmp	.+10     	; 0x1ea2 <vfprintf+0x38e>
    1e98:	80 e3       	ldi	r24, 0x30	; 48
    1e9a:	90 e0       	ldi	r25, 0x00	; 0
    1e9c:	b3 01       	movw	r22, r6
    1e9e:	49 d0       	rcall	.+146    	; 0x1f32 <fputc>
    1ea0:	9a 94       	dec	r9
    1ea2:	d9 14       	cp	r13, r9
    1ea4:	c8 f3       	brcs	.-14     	; 0x1e98 <vfprintf+0x384>
    1ea6:	da 94       	dec	r13
    1ea8:	f1 01       	movw	r30, r2
    1eaa:	ed 0d       	add	r30, r13
    1eac:	f1 1d       	adc	r31, r1
    1eae:	80 81       	ld	r24, Z
    1eb0:	90 e0       	ldi	r25, 0x00	; 0
    1eb2:	b3 01       	movw	r22, r6
    1eb4:	3e d0       	rcall	.+124    	; 0x1f32 <fputc>
    1eb6:	dd 20       	and	r13, r13
    1eb8:	b1 f7       	brne	.-20     	; 0x1ea6 <vfprintf+0x392>
    1eba:	05 c0       	rjmp	.+10     	; 0x1ec6 <vfprintf+0x3b2>
    1ebc:	80 e2       	ldi	r24, 0x20	; 32
    1ebe:	90 e0       	ldi	r25, 0x00	; 0
    1ec0:	b3 01       	movw	r22, r6
    1ec2:	37 d0       	rcall	.+110    	; 0x1f32 <fputc>
    1ec4:	ea 94       	dec	r14
    1ec6:	ee 20       	and	r14, r14
    1ec8:	c9 f7       	brne	.-14     	; 0x1ebc <vfprintf+0x3a8>
    1eca:	50 ce       	rjmp	.-864    	; 0x1b6c <vfprintf+0x58>
    1ecc:	f3 01       	movw	r30, r6
    1ece:	66 81       	ldd	r22, Z+6	; 0x06
    1ed0:	77 81       	ldd	r23, Z+7	; 0x07
    1ed2:	cb 01       	movw	r24, r22
    1ed4:	2b 96       	adiw	r28, 0x0b	; 11
    1ed6:	0f b6       	in	r0, 0x3f	; 63
    1ed8:	f8 94       	cli
    1eda:	de bf       	out	0x3e, r29	; 62
    1edc:	0f be       	out	0x3f, r0	; 63
    1ede:	cd bf       	out	0x3d, r28	; 61
    1ee0:	cf 91       	pop	r28
    1ee2:	df 91       	pop	r29
    1ee4:	1f 91       	pop	r17
    1ee6:	0f 91       	pop	r16
    1ee8:	ff 90       	pop	r15
    1eea:	ef 90       	pop	r14
    1eec:	df 90       	pop	r13
    1eee:	cf 90       	pop	r12
    1ef0:	bf 90       	pop	r11
    1ef2:	af 90       	pop	r10
    1ef4:	9f 90       	pop	r9
    1ef6:	8f 90       	pop	r8
    1ef8:	7f 90       	pop	r7
    1efa:	6f 90       	pop	r6
    1efc:	5f 90       	pop	r5
    1efe:	4f 90       	pop	r4
    1f00:	3f 90       	pop	r3
    1f02:	2f 90       	pop	r2
    1f04:	08 95       	ret

00001f06 <strnlen_P>:
    1f06:	fc 01       	movw	r30, r24
    1f08:	05 90       	lpm	r0, Z+
    1f0a:	61 50       	subi	r22, 0x01	; 1
    1f0c:	70 40       	sbci	r23, 0x00	; 0
    1f0e:	01 10       	cpse	r0, r1
    1f10:	d8 f7       	brcc	.-10     	; 0x1f08 <strnlen_P+0x2>
    1f12:	80 95       	com	r24
    1f14:	90 95       	com	r25
    1f16:	8e 0f       	add	r24, r30
    1f18:	9f 1f       	adc	r25, r31
    1f1a:	08 95       	ret

00001f1c <strnlen>:
    1f1c:	fc 01       	movw	r30, r24
    1f1e:	61 50       	subi	r22, 0x01	; 1
    1f20:	70 40       	sbci	r23, 0x00	; 0
    1f22:	01 90       	ld	r0, Z+
    1f24:	01 10       	cpse	r0, r1
    1f26:	d8 f7       	brcc	.-10     	; 0x1f1e <strnlen+0x2>
    1f28:	80 95       	com	r24
    1f2a:	90 95       	com	r25
    1f2c:	8e 0f       	add	r24, r30
    1f2e:	9f 1f       	adc	r25, r31
    1f30:	08 95       	ret

00001f32 <fputc>:
    1f32:	0f 93       	push	r16
    1f34:	1f 93       	push	r17
    1f36:	cf 93       	push	r28
    1f38:	df 93       	push	r29
    1f3a:	8c 01       	movw	r16, r24
    1f3c:	eb 01       	movw	r28, r22
    1f3e:	8b 81       	ldd	r24, Y+3	; 0x03
    1f40:	81 ff       	sbrs	r24, 1
    1f42:	1b c0       	rjmp	.+54     	; 0x1f7a <fputc+0x48>
    1f44:	82 ff       	sbrs	r24, 2
    1f46:	0d c0       	rjmp	.+26     	; 0x1f62 <fputc+0x30>
    1f48:	2e 81       	ldd	r18, Y+6	; 0x06
    1f4a:	3f 81       	ldd	r19, Y+7	; 0x07
    1f4c:	8c 81       	ldd	r24, Y+4	; 0x04
    1f4e:	9d 81       	ldd	r25, Y+5	; 0x05
    1f50:	28 17       	cp	r18, r24
    1f52:	39 07       	cpc	r19, r25
    1f54:	64 f4       	brge	.+24     	; 0x1f6e <fputc+0x3c>
    1f56:	e8 81       	ld	r30, Y
    1f58:	f9 81       	ldd	r31, Y+1	; 0x01
    1f5a:	01 93       	st	Z+, r16
    1f5c:	f9 83       	std	Y+1, r31	; 0x01
    1f5e:	e8 83       	st	Y, r30
    1f60:	06 c0       	rjmp	.+12     	; 0x1f6e <fputc+0x3c>
    1f62:	e8 85       	ldd	r30, Y+8	; 0x08
    1f64:	f9 85       	ldd	r31, Y+9	; 0x09
    1f66:	80 2f       	mov	r24, r16
    1f68:	09 95       	icall
    1f6a:	89 2b       	or	r24, r25
    1f6c:	31 f4       	brne	.+12     	; 0x1f7a <fputc+0x48>
    1f6e:	8e 81       	ldd	r24, Y+6	; 0x06
    1f70:	9f 81       	ldd	r25, Y+7	; 0x07
    1f72:	01 96       	adiw	r24, 0x01	; 1
    1f74:	9f 83       	std	Y+7, r25	; 0x07
    1f76:	8e 83       	std	Y+6, r24	; 0x06
    1f78:	02 c0       	rjmp	.+4      	; 0x1f7e <fputc+0x4c>
    1f7a:	0f ef       	ldi	r16, 0xFF	; 255
    1f7c:	1f ef       	ldi	r17, 0xFF	; 255
    1f7e:	c8 01       	movw	r24, r16
    1f80:	df 91       	pop	r29
    1f82:	cf 91       	pop	r28
    1f84:	1f 91       	pop	r17
    1f86:	0f 91       	pop	r16
    1f88:	08 95       	ret

00001f8a <__ultoa_invert>:
    1f8a:	fa 01       	movw	r30, r20
    1f8c:	aa 27       	eor	r26, r26
    1f8e:	28 30       	cpi	r18, 0x08	; 8
    1f90:	51 f1       	breq	.+84     	; 0x1fe6 <__ultoa_invert+0x5c>
    1f92:	20 31       	cpi	r18, 0x10	; 16
    1f94:	81 f1       	breq	.+96     	; 0x1ff6 <__ultoa_invert+0x6c>
    1f96:	e8 94       	clt
    1f98:	6f 93       	push	r22
    1f9a:	6e 7f       	andi	r22, 0xFE	; 254
    1f9c:	6e 5f       	subi	r22, 0xFE	; 254
    1f9e:	7f 4f       	sbci	r23, 0xFF	; 255
    1fa0:	8f 4f       	sbci	r24, 0xFF	; 255
    1fa2:	9f 4f       	sbci	r25, 0xFF	; 255
    1fa4:	af 4f       	sbci	r26, 0xFF	; 255
    1fa6:	b1 e0       	ldi	r27, 0x01	; 1
    1fa8:	3e d0       	rcall	.+124    	; 0x2026 <__ultoa_invert+0x9c>
    1faa:	b4 e0       	ldi	r27, 0x04	; 4
    1fac:	3c d0       	rcall	.+120    	; 0x2026 <__ultoa_invert+0x9c>
    1fae:	67 0f       	add	r22, r23
    1fb0:	78 1f       	adc	r23, r24
    1fb2:	89 1f       	adc	r24, r25
    1fb4:	9a 1f       	adc	r25, r26
    1fb6:	a1 1d       	adc	r26, r1
    1fb8:	68 0f       	add	r22, r24
    1fba:	79 1f       	adc	r23, r25
    1fbc:	8a 1f       	adc	r24, r26
    1fbe:	91 1d       	adc	r25, r1
    1fc0:	a1 1d       	adc	r26, r1
    1fc2:	6a 0f       	add	r22, r26
    1fc4:	71 1d       	adc	r23, r1
    1fc6:	81 1d       	adc	r24, r1
    1fc8:	91 1d       	adc	r25, r1
    1fca:	a1 1d       	adc	r26, r1
    1fcc:	20 d0       	rcall	.+64     	; 0x200e <__ultoa_invert+0x84>
    1fce:	09 f4       	brne	.+2      	; 0x1fd2 <__ultoa_invert+0x48>
    1fd0:	68 94       	set
    1fd2:	3f 91       	pop	r19
    1fd4:	2a e0       	ldi	r18, 0x0A	; 10
    1fd6:	26 9f       	mul	r18, r22
    1fd8:	11 24       	eor	r1, r1
    1fda:	30 19       	sub	r19, r0
    1fdc:	30 5d       	subi	r19, 0xD0	; 208
    1fde:	31 93       	st	Z+, r19
    1fe0:	de f6       	brtc	.-74     	; 0x1f98 <__ultoa_invert+0xe>
    1fe2:	cf 01       	movw	r24, r30
    1fe4:	08 95       	ret
    1fe6:	46 2f       	mov	r20, r22
    1fe8:	47 70       	andi	r20, 0x07	; 7
    1fea:	40 5d       	subi	r20, 0xD0	; 208
    1fec:	41 93       	st	Z+, r20
    1fee:	b3 e0       	ldi	r27, 0x03	; 3
    1ff0:	0f d0       	rcall	.+30     	; 0x2010 <__ultoa_invert+0x86>
    1ff2:	c9 f7       	brne	.-14     	; 0x1fe6 <__ultoa_invert+0x5c>
    1ff4:	f6 cf       	rjmp	.-20     	; 0x1fe2 <__ultoa_invert+0x58>
    1ff6:	46 2f       	mov	r20, r22
    1ff8:	4f 70       	andi	r20, 0x0F	; 15
    1ffa:	40 5d       	subi	r20, 0xD0	; 208
    1ffc:	4a 33       	cpi	r20, 0x3A	; 58
    1ffe:	18 f0       	brcs	.+6      	; 0x2006 <__ultoa_invert+0x7c>
    2000:	49 5d       	subi	r20, 0xD9	; 217
    2002:	31 fd       	sbrc	r19, 1
    2004:	40 52       	subi	r20, 0x20	; 32
    2006:	41 93       	st	Z+, r20
    2008:	02 d0       	rcall	.+4      	; 0x200e <__ultoa_invert+0x84>
    200a:	a9 f7       	brne	.-22     	; 0x1ff6 <__ultoa_invert+0x6c>
    200c:	ea cf       	rjmp	.-44     	; 0x1fe2 <__ultoa_invert+0x58>
    200e:	b4 e0       	ldi	r27, 0x04	; 4
    2010:	a6 95       	lsr	r26
    2012:	97 95       	ror	r25
    2014:	87 95       	ror	r24
    2016:	77 95       	ror	r23
    2018:	67 95       	ror	r22
    201a:	ba 95       	dec	r27
    201c:	c9 f7       	brne	.-14     	; 0x2010 <__ultoa_invert+0x86>
    201e:	00 97       	sbiw	r24, 0x00	; 0
    2020:	61 05       	cpc	r22, r1
    2022:	71 05       	cpc	r23, r1
    2024:	08 95       	ret
    2026:	9b 01       	movw	r18, r22
    2028:	ac 01       	movw	r20, r24
    202a:	0a 2e       	mov	r0, r26
    202c:	06 94       	lsr	r0
    202e:	57 95       	ror	r21
    2030:	47 95       	ror	r20
    2032:	37 95       	ror	r19
    2034:	27 95       	ror	r18
    2036:	ba 95       	dec	r27
    2038:	c9 f7       	brne	.-14     	; 0x202c <__ultoa_invert+0xa2>
    203a:	62 0f       	add	r22, r18
    203c:	73 1f       	adc	r23, r19
    203e:	84 1f       	adc	r24, r20
    2040:	95 1f       	adc	r25, r21
    2042:	a0 1d       	adc	r26, r0
    2044:	08 95       	ret

00002046 <_exit>:
    2046:	f8 94       	cli

00002048 <__stop_program>:
    2048:	ff cf       	rjmp	.-2      	; 0x2048 <__stop_program>
