
KeyboardHost.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000030  00800100  000017b0  00001844  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000017b0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000013  00800130  00800130  00001874  2**0
                  ALLOC
  3 .stab         00000eac  00000000  00000000  00001874  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000025c  00000000  00000000  00002720  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000398  00000000  00000000  0000297c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000007a0  00000000  00000000  00002d14  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00004aad  00000000  00000000  000034b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001aed  00000000  00000000  00007f61  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00003dad  00000000  00000000  00009a4e  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000004f0  00000000  00000000  0000d7fc  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00002398  00000000  00000000  0000dcec  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00001fc0  00000000  00000000  00010084  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000420  00000000  00000000  00012044  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:

	return USB_Host_SendControlRequest(Buffer);
}

uint8_t USB_Host_ClearPipeStall(const uint8_t EndpointNum)
{
       0:	47 c1       	rjmp	.+654    	; 0x290 <__ctors_end>
		Pipe_DisablePipe();
	}
}

bool Pipe_IsEndpointBound(const uint8_t EndpointAddress)
{
       2:	00 00       	nop
{
	USB_GetNextDescriptorOfType(BytesRem, CurrConfigLoc, AfterType);

	if (*BytesRem)
	  USB_GetNextDescriptorOfType(BytesRem, CurrConfigLoc, Type);
}
       4:	63 c1       	rjmp	.+710    	; 0x2cc <__bad_interrupt>
			Length--;
		}
	}

	return PIPE_RWSTREAM_NoError;
}
       6:	00 00       	nop
       8:	61 c1       	rjmp	.+706    	; 0x2cc <__bad_interrupt>
       a:	00 00       	nop
       c:	5f c1       	rjmp	.+702    	; 0x2cc <__bad_interrupt>
       e:	00 00       	nop
      10:	5d c1       	rjmp	.+698    	; 0x2cc <__bad_interrupt>
      12:	00 00       	nop
      14:	5b c1       	rjmp	.+694    	; 0x2cc <__bad_interrupt>
      16:	00 00       	nop
      18:	59 c1       	rjmp	.+690    	; 0x2cc <__bad_interrupt>
      1a:	00 00       	nop
      1c:	57 c1       	rjmp	.+686    	; 0x2cc <__bad_interrupt>
      1e:	00 00       	nop
      20:	55 c1       	rjmp	.+682    	; 0x2cc <__bad_interrupt>
      22:	00 00       	nop
      24:	53 c1       	rjmp	.+678    	; 0x2cc <__bad_interrupt>
      26:	00 00       	nop
      28:	17 c6       	rjmp	.+3118   	; 0xc58 <__vector_10>
      2a:	00 00       	nop
      2c:	4f c1       	rjmp	.+670    	; 0x2cc <__bad_interrupt>
      2e:	00 00       	nop
      30:	4d c1       	rjmp	.+666    	; 0x2cc <__bad_interrupt>
      32:	00 00       	nop
      34:	4b c1       	rjmp	.+662    	; 0x2cc <__bad_interrupt>
      36:	00 00       	nop
      38:	49 c1       	rjmp	.+658    	; 0x2cc <__bad_interrupt>
      3a:	00 00       	nop
      3c:	47 c1       	rjmp	.+654    	; 0x2cc <__bad_interrupt>
      3e:	00 00       	nop
      40:	45 c1       	rjmp	.+650    	; 0x2cc <__bad_interrupt>
      42:	00 00       	nop
      44:	43 c1       	rjmp	.+646    	; 0x2cc <__bad_interrupt>
      46:	00 00       	nop
      48:	41 c1       	rjmp	.+642    	; 0x2cc <__bad_interrupt>
      4a:	00 00       	nop
      4c:	3f c1       	rjmp	.+638    	; 0x2cc <__bad_interrupt>
      4e:	00 00       	nop
      50:	3d c1       	rjmp	.+634    	; 0x2cc <__bad_interrupt>
      52:	00 00       	nop
      54:	3b c1       	rjmp	.+630    	; 0x2cc <__bad_interrupt>
      56:	00 00       	nop
      58:	39 c1       	rjmp	.+626    	; 0x2cc <__bad_interrupt>
      5a:	00 00       	nop
      5c:	37 c1       	rjmp	.+622    	; 0x2cc <__bad_interrupt>
      5e:	00 00       	nop
      60:	35 c1       	rjmp	.+618    	; 0x2cc <__bad_interrupt>
      62:	00 00       	nop
      64:	33 c1       	rjmp	.+614    	; 0x2cc <__bad_interrupt>
      66:	00 00       	nop
      68:	31 c1       	rjmp	.+610    	; 0x2cc <__bad_interrupt>
      6a:	00 00       	nop
      6c:	2f c1       	rjmp	.+606    	; 0x2cc <__bad_interrupt>
      6e:	00 00       	nop
      70:	2d c1       	rjmp	.+602    	; 0x2cc <__bad_interrupt>
      72:	00 00       	nop
      74:	2b c1       	rjmp	.+598    	; 0x2cc <__bad_interrupt>
      76:	00 00       	nop
      78:	29 c1       	rjmp	.+594    	; 0x2cc <__bad_interrupt>
      7a:	00 00       	nop
      7c:	27 c1       	rjmp	.+590    	; 0x2cc <__bad_interrupt>
      7e:	00 00       	nop
      80:	25 c1       	rjmp	.+586    	; 0x2cc <__bad_interrupt>
      82:	00 00       	nop
      84:	23 c1       	rjmp	.+582    	; 0x2cc <__bad_interrupt>
      86:	00 00       	nop
      88:	21 c1       	rjmp	.+578    	; 0x2cc <__bad_interrupt>
      8a:	00 00       	nop
      8c:	1f c1       	rjmp	.+574    	; 0x2cc <__bad_interrupt>
      8e:	00 00       	nop
      90:	1d c1       	rjmp	.+570    	; 0x2cc <__bad_interrupt>
      92:	00 00       	nop
      94:	1b c1       	rjmp	.+566    	; 0x2cc <__bad_interrupt>
      96:	00 00       	nop

00000098 <__c.4167>:
      98:	4b 65 79 62 6f 61 72 64 20 45 6e 75 6d 65 72 61     Keyboard Enumera
      a8:	74 65 64 2e 0d 0a 00                                ted....

000000af <__c.4165>:
      af:	1b 5b 33 31 6d 43 6f 6e 74 72 6f 6c 20 45 72 72     .[31mControl Err
      bf:	6f 72 20 28 53 65 74 20 50 72 6f 74 6f 63 6f 6c     or (Set Protocol
      cf:	29 2e 0d 0a 20 2d 2d 20 45 72 72 6f 72 20 43 6f     )... -- Error Co
      df:	64 65 3a 20 25 64 0d 0a 1b 5b 33 37 6d 00           de: %d...[37m.

000000ed <__c.4162>:
      ed:	1b 5b 33 31 6d 43 6f 6e 74 72 6f 6c 20 45 72 72     .[31mControl Err
      fd:	6f 72 20 28 53 65 74 20 43 6f 6e 66 69 67 75 72     or (Set Configur
     10d:	61 74 69 6f 6e 29 2e 0d 0a 20 2d 2d 20 45 72 72     ation)... -- Err
     11d:	6f 72 20 43 6f 64 65 3a 20 25 64 0d 0a 1b 5b 33     or Code: %d...[3
     12d:	37 6d 00                                            7m.

00000130 <__c.4159>:
     130:	20 2d 2d 20 45 72 72 6f 72 20 43 6f 64 65 3a 20      -- Error Code: 
     140:	25 64 0d 0a 1b 5b 33 37 6d 00                       %d...[37m.

0000014a <__c.4157>:
     14a:	1b 5b 33 31 6d 49 6e 76 61 6c 69 64 20 44 65 76     .[31mInvalid Dev
     15a:	69 63 65 2e 0d 0a 00                                ice....

00000161 <__c.4155>:
     161:	1b 5b 33 31 6d 43 6f 6e 74 72 6f 6c 20 45 72 72     .[31mControl Err
     171:	6f 72 20 28 47 65 74 20 43 6f 6e 66 69 67 75 72     or (Get Configur
     181:	61 74 69 6f 6e 29 2e 0d 0a 00                       ation)....

0000018b <__c.4153>:
     18b:	47 65 74 74 69 6e 67 20 43 6f 6e 66 69 67 20 44     Getting Config D
     19b:	61 74 61 2e 0d 0a 00                                ata....

000001a2 <__c.4127>:
     1a2:	1b 5b 33 31 6d 44 65 76 20 45 6e 75 6d 20 45 72     .[31mDev Enum Er
     1b2:	72 6f 72 0d 0a 20 2d 2d 20 45 72 72 6f 72 20 43     ror.. -- Error C
     1c2:	6f 64 65 20 25 64 0d 0a 20 2d 2d 20 53 75 62 20     ode %d.. -- Sub 
     1d2:	45 72 72 6f 72 20 43 6f 64 65 20 25 64 0d 0a 20     Error Code %d.. 
     1e2:	2d 2d 20 49 6e 20 53 74 61 74 65 20 25 64 0d 0a     -- In State %d..
     1f2:	1b 5b 33 37 6d 00                                   .[37m.

000001f8 <__c.4119>:
     1f8:	1b 5b 33 31 6d 48 6f 73 74 20 4d 6f 64 65 20 45     .[31mHost Mode E
     208:	72 72 6f 72 0d 0a 20 2d 2d 20 45 72 72 6f 72 20     rror.. -- Error 
     218:	43 6f 64 65 20 25 64 0d 0a 1b 5b 33 37 6d 00        Code %d...[37m.

00000227 <__c.4111>:
     227:	1b 5b 33 32 6d 44 65 76 69 63 65 20 55 6e 61 74     .[32mDevice Unat
     237:	74 61 63 68 65 64 2e 0d 0a 1b 5b 33 37 6d 00        tached....[37m.

00000246 <__c.4106>:
     246:	1b 5b 33 32 6d 44 65 76 69 63 65 20 41 74 74 61     .[32mDevice Atta
     256:	63 68 65 64 2e 0d 0a 1b 5b 33 37 6d 00              ched....[37m.

00000263 <__c.4092>:
     263:	1b 5b 33 36 6d 4b 65 79 62 6f 61 72 64 20 48 49     .[36mKeyboard HI
     273:	44 20 48 6f 73 74 20 44 65 6d 6f 20 72 75 6e 6e     D Host Demo runn
     283:	69 6e 67 2e 0d 0a 1b 5b 33 37 6d 00 00              ing....[37m..

00000290 <__ctors_end>:
     290:	11 24       	eor	r1, r1
     292:	1f be       	out	0x3f, r1	; 63
     294:	cf ef       	ldi	r28, 0xFF	; 255
     296:	d0 e2       	ldi	r29, 0x20	; 32
     298:	de bf       	out	0x3e, r29	; 62
     29a:	cd bf       	out	0x3d, r28	; 61

0000029c <__do_copy_data>:
     29c:	11 e0       	ldi	r17, 0x01	; 1
     29e:	a0 e0       	ldi	r26, 0x00	; 0
     2a0:	b1 e0       	ldi	r27, 0x01	; 1
     2a2:	e0 eb       	ldi	r30, 0xB0	; 176
     2a4:	f7 e1       	ldi	r31, 0x17	; 23
     2a6:	00 e0       	ldi	r16, 0x00	; 0
     2a8:	0b bf       	out	0x3b, r16	; 59
     2aa:	02 c0       	rjmp	.+4      	; 0x2b0 <__do_copy_data+0x14>
     2ac:	07 90       	elpm	r0, Z+
     2ae:	0d 92       	st	X+, r0
     2b0:	a0 33       	cpi	r26, 0x30	; 48
     2b2:	b1 07       	cpc	r27, r17
     2b4:	d9 f7       	brne	.-10     	; 0x2ac <__do_copy_data+0x10>

000002b6 <__do_clear_bss>:
     2b6:	11 e0       	ldi	r17, 0x01	; 1
     2b8:	a0 e3       	ldi	r26, 0x30	; 48
     2ba:	b1 e0       	ldi	r27, 0x01	; 1
     2bc:	01 c0       	rjmp	.+2      	; 0x2c0 <.do_clear_bss_start>

000002be <.do_clear_bss_loop>:
     2be:	1d 92       	st	X+, r1

000002c0 <.do_clear_bss_start>:
     2c0:	a3 34       	cpi	r26, 0x43	; 67
     2c2:	b1 07       	cpc	r27, r17
     2c4:	e1 f7       	brne	.-8      	; 0x2be <.do_clear_bss_loop>
     2c6:	5e d1       	rcall	.+700    	; 0x584 <main>
     2c8:	0c 94 d6 0b 	jmp	0x17ac	; 0x17ac <_exit>

000002cc <__bad_interrupt>:
     2cc:	99 ce       	rjmp	.-718    	; 0x0 <__vectors>

000002ce <EVENT_USB_Host_DeviceEnumerationComplete>:
				PORTD &= ~LEDMask;
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
			{
				PORTD = ((PORTD & ~LEDS_ALL_LEDS) | LEDMask);
     2ce:	8b b1       	in	r24, 0x0b	; 11
     2d0:	8f 70       	andi	r24, 0x0F	; 15
     2d2:	80 66       	ori	r24, 0x60	; 96
     2d4:	8b b9       	out	0x0b, r24	; 11
 *  enumerated by the host and is now ready to be used by the application.
 */
void EVENT_USB_Host_DeviceEnumerationComplete(void)
{
	LEDs_SetAllLEDs(LEDMASK_USB_READY);
}
     2d6:	08 95       	ret

000002d8 <EVENT_USB_Host_DeviceUnattached>:
/** Event handler for the USB_DeviceUnattached event. This indicates that a device has been removed from the host, and
 *  stops the library USB task management process.
 */
void EVENT_USB_Host_DeviceUnattached(void)
{
	puts_P(PSTR(ESC_FG_GREEN "Device Unattached.\r\n" ESC_FG_WHITE));
     2d8:	87 e2       	ldi	r24, 0x27	; 39
     2da:	92 e0       	ldi	r25, 0x02	; 2
     2dc:	c5 d7       	rcall	.+3978   	; 0x1268 <puts_P>
     2de:	8b b1       	in	r24, 0x0b	; 11
     2e0:	8f 70       	andi	r24, 0x0F	; 15
     2e2:	80 61       	ori	r24, 0x10	; 16
     2e4:	8b b9       	out	0x0b, r24	; 11
	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
}
     2e6:	08 95       	ret

000002e8 <EVENT_USB_Host_DeviceAttached>:
/** Event handler for the USB_DeviceAttached event. This indicates that a device has been attached to the host, and
 *  starts the library USB task to begin the enumeration and USB management process.
 */
void EVENT_USB_Host_DeviceAttached(void)
{
	puts_P(PSTR(ESC_FG_GREEN "Device Attached.\r\n" ESC_FG_WHITE));
     2e8:	86 e4       	ldi	r24, 0x46	; 70
     2ea:	92 e0       	ldi	r25, 0x02	; 2
     2ec:	bd d7       	rcall	.+3962   	; 0x1268 <puts_P>
     2ee:	8b b1       	in	r24, 0x0b	; 11
     2f0:	8f 70       	andi	r24, 0x0F	; 15
     2f2:	80 6a       	ori	r24, 0xA0	; 160
     2f4:	8b b9       	out	0x0b, r24	; 11
	LEDs_SetAllLEDs(LEDMASK_USB_ENUMERATING);
}
     2f6:	08 95       	ret

000002f8 <EVENT_USB_Host_DeviceEnumerationFailed>:
 *  enumerating an attached USB device.
 */
void EVENT_USB_Host_DeviceEnumerationFailed(const uint8_t ErrorCode,
                                            const uint8_t SubErrorCode)
{
	printf_P(PSTR(ESC_FG_RED "Dev Enum Error\r\n"
     2f8:	90 91 3c 01 	lds	r25, 0x013C
     2fc:	2d b7       	in	r18, 0x3d	; 61
     2fe:	3e b7       	in	r19, 0x3e	; 62
     300:	28 50       	subi	r18, 0x08	; 8
     302:	30 40       	sbci	r19, 0x00	; 0
     304:	0f b6       	in	r0, 0x3f	; 63
     306:	f8 94       	cli
     308:	3e bf       	out	0x3e, r19	; 62
     30a:	0f be       	out	0x3f, r0	; 63
     30c:	2d bf       	out	0x3d, r18	; 61
     30e:	ed b7       	in	r30, 0x3d	; 61
     310:	fe b7       	in	r31, 0x3e	; 62
     312:	31 96       	adiw	r30, 0x01	; 1
     314:	22 ea       	ldi	r18, 0xA2	; 162
     316:	31 e0       	ldi	r19, 0x01	; 1
     318:	ad b7       	in	r26, 0x3d	; 61
     31a:	be b7       	in	r27, 0x3e	; 62
     31c:	12 96       	adiw	r26, 0x02	; 2
     31e:	3c 93       	st	X, r19
     320:	2e 93       	st	-X, r18
     322:	11 97       	sbiw	r26, 0x01	; 1
     324:	82 83       	std	Z+2, r24	; 0x02
     326:	13 82       	std	Z+3, r1	; 0x03
     328:	64 83       	std	Z+4, r22	; 0x04
     32a:	15 82       	std	Z+5, r1	; 0x05
     32c:	96 83       	std	Z+6, r25	; 0x06
     32e:	17 82       	std	Z+7, r1	; 0x07
     330:	79 d7       	rcall	.+3826   	; 0x1224 <printf_P>
     332:	8b b1       	in	r24, 0x0b	; 11
     334:	8f 70       	andi	r24, 0x0F	; 15
     336:	80 69       	ori	r24, 0x90	; 144
     338:	8b b9       	out	0x0b, r24	; 11
     33a:	2d b7       	in	r18, 0x3d	; 61
     33c:	3e b7       	in	r19, 0x3e	; 62
     33e:	28 5f       	subi	r18, 0xF8	; 248
     340:	3f 4f       	sbci	r19, 0xFF	; 255
     342:	0f b6       	in	r0, 0x3f	; 63
     344:	f8 94       	cli
     346:	3e bf       	out	0x3e, r19	; 62
     348:	0f be       	out	0x3f, r0	; 63
     34a:	2d bf       	out	0x3d, r18	; 61
	                         " -- Error Code %d\r\n"
	                         " -- Sub Error Code %d\r\n"
	                         " -- In State %d\r\n" ESC_FG_WHITE), ErrorCode, SubErrorCode, USB_HostState);

	LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
}
     34c:	08 95       	ret

0000034e <ReadNextReport>:

/** Reads in and processes the next report from the attached device, displaying the report
 *  contents on the board LEDs and via the serial port.
 */
void ReadNextReport(void)
{
     34e:	df 93       	push	r29
     350:	cf 93       	push	r28
     352:	cd b7       	in	r28, 0x3d	; 61
     354:	de b7       	in	r29, 0x3e	; 62
     356:	28 97       	sbiw	r28, 0x08	; 8
     358:	0f b6       	in	r0, 0x3f	; 63
     35a:	f8 94       	cli
     35c:	de bf       	out	0x3e, r29	; 62
     35e:	0f be       	out	0x3f, r0	; 63
     360:	cd bf       	out	0x3d, r28	; 61
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
     362:	81 e0       	ldi	r24, 0x01	; 1
     364:	80 93 a7 00 	sts	0x00A7, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
     368:	80 91 a9 00 	lds	r24, 0x00A9
     36c:	8f 7b       	andi	r24, 0xBF	; 191
     36e:	80 93 a9 00 	sts	0x00A9, r24
			 *  \return Boolean true if the current pipe has received an IN packet, false otherwise.
			 */
			static inline bool Pipe_IsINReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsINReceived(void)
			{
				return ((UPINTX & (1 << RXINI)) ? true : false);
     372:	80 91 a6 00 	lds	r24, 0x00A6

	/* Unfreeze keyboard data pipe */
	Pipe_Unfreeze();

	/* Check to see if a packet has been received */
	if (!(Pipe_IsINReceived()))
     376:	80 ff       	sbrs	r24, 0
     378:	3a c0       	rjmp	.+116    	; 0x3ee <ReadNextReport+0xa0>
			 *  \return Boolean true if the currently selected pipe may be read from or written to, depending on its direction.
			 */
			static inline bool Pipe_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsReadWriteAllowed(void)
			{
				return ((UPINTX & (1 << RWAL)) ? true : false);
     37a:	80 91 a6 00 	lds	r24, 0x00A6

		return;
	}

	/* Ensure pipe contains data before trying to read from it */
	if (Pipe_IsReadWriteAllowed())
     37e:	85 ff       	sbrs	r24, 5
     380:	31 c0       	rjmp	.+98     	; 0x3e4 <ReadNextReport+0x96>
	{
		/* Read in keyboard report data */
		Pipe_Read_Stream_LE(&KeyboardReport, sizeof(KeyboardReport));
     382:	ce 01       	movw	r24, r28
     384:	01 96       	adiw	r24, 0x01	; 1
     386:	68 e0       	ldi	r22, 0x08	; 8
     388:	70 e0       	ldi	r23, 0x00	; 0
     38a:	c0 d6       	rcall	.+3456   	; 0x110c <Pipe_Read_Stream_LE>

		/* Indicate if the modifier byte is non-zero (special key such as shift is being pressed) */
		LEDs_ChangeLEDs(LEDS_LED1, (KeyboardReport.Modifier) ? LEDS_LED1 : 0);
     38c:	89 81       	ldd	r24, Y+1	; 0x01
     38e:	88 23       	and	r24, r24
     390:	11 f4       	brne	.+4      	; 0x396 <ReadNextReport+0x48>
     392:	90 e0       	ldi	r25, 0x00	; 0
     394:	01 c0       	rjmp	.+2      	; 0x398 <ReadNextReport+0x4a>
     396:	90 e1       	ldi	r25, 0x10	; 16
			}

			static inline void LEDs_ChangeLEDs(const uint8_t LEDMask,
			                                   const uint8_t ActiveMask)
			{
				PORTD = ((PORTD & ~LEDMask) | ActiveMask);
     398:	8b b1       	in	r24, 0x0b	; 11
     39a:	8f 7e       	andi	r24, 0xEF	; 239
     39c:	98 2b       	or	r25, r24
     39e:	9b b9       	out	0x0b, r25	; 11

		uint8_t KeyCode = KeyboardReport.KeyCode[0];
     3a0:	2b 81       	ldd	r18, Y+3	; 0x03

		/* Check if a key has been pressed */
		if (KeyCode)
     3a2:	22 23       	and	r18, r18
     3a4:	f9 f0       	breq	.+62     	; 0x3e4 <ReadNextReport+0x96>
			}

			static inline void LEDs_ToggleLEDs(const uint8_t LEDMask)
			{
				PORTD ^= LEDMask;
     3a6:	8b b1       	in	r24, 0x0b	; 11
     3a8:	90 e2       	ldi	r25, 0x20	; 32
     3aa:	89 27       	eor	r24, r25
     3ac:	8b b9       	out	0x0b, r24	; 11
			LEDs_ToggleLEDs(LEDS_LED2);

			char PressedKey = 0;

			/* Retrieve pressed key character if alphanumeric */
			if ((KeyCode >= HID_KEYBOARD_SC_A) && (KeyCode <= HID_KEYBOARD_SC_Z))
     3ae:	82 2f       	mov	r24, r18
     3b0:	84 50       	subi	r24, 0x04	; 4
     3b2:	8a 31       	cpi	r24, 0x1A	; 26
     3b4:	10 f4       	brcc	.+4      	; 0x3ba <ReadNextReport+0x6c>
			{
				PressedKey = (KeyCode - HID_KEYBOARD_SC_A) + 'A';
     3b6:	8f 5b       	subi	r24, 0xBF	; 191
     3b8:	0d c0       	rjmp	.+26     	; 0x3d4 <ReadNextReport+0x86>
			}
			else if ((KeyCode >= HID_KEYBOARD_SC_1_AND_EXCLAMATION) &
     3ba:	82 2f       	mov	r24, r18
     3bc:	8e 51       	subi	r24, 0x1E	; 30
     3be:	8a 30       	cpi	r24, 0x0A	; 10
     3c0:	10 f4       	brcc	.+4      	; 0x3c6 <ReadNextReport+0x78>
					 (KeyCode <= HID_KEYBOARD_SC_0_AND_CLOSING_PARENTHESIS))
			{
				PressedKey = (KeyCode - HID_KEYBOARD_SC_1_AND_EXCLAMATION) + '0';
     3c2:	80 5d       	subi	r24, 0xD0	; 208
     3c4:	07 c0       	rjmp	.+14     	; 0x3d4 <ReadNextReport+0x86>
			}
			else if (KeyCode == HID_KEYBOARD_SC_SPACE)
     3c6:	2c 32       	cpi	r18, 0x2C	; 44
     3c8:	11 f4       	brne	.+4      	; 0x3ce <ReadNextReport+0x80>
     3ca:	80 e2       	ldi	r24, 0x20	; 32
     3cc:	05 c0       	rjmp	.+10     	; 0x3d8 <ReadNextReport+0x8a>
			{
				PressedKey = ' ';
			}
			else if (KeyCode == HID_KEYBOARD_SC_ENTER)
     3ce:	28 32       	cpi	r18, 0x28	; 40
     3d0:	49 f4       	brne	.+18     	; 0x3e4 <ReadNextReport+0x96>
     3d2:	1b c0       	rjmp	.+54     	; 0x40a <ReadNextReport+0xbc>
			{
				PressedKey = '\n';
			}

			/* Print the pressed key character out through the serial port if valid */
			if (PressedKey)
     3d4:	88 23       	and	r24, r24
     3d6:	31 f0       	breq	.+12     	; 0x3e4 <ReadNextReport+0x96>
			  putchar(PressedKey);
     3d8:	60 91 3f 01 	lds	r22, 0x013F
     3dc:	70 91 40 01 	lds	r23, 0x0140
     3e0:	90 e0       	ldi	r25, 0x00	; 0
     3e2:	f4 d6       	rcall	.+3560   	; 0x11cc <fputc>
			 *  \ingroup Group_PipePacketManagement
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
     3e4:	80 91 a6 00 	lds	r24, 0x00A6
     3e8:	8e 77       	andi	r24, 0x7E	; 126
     3ea:	80 93 a6 00 	sts	0x00A6, r24

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
     3ee:	80 91 a9 00 	lds	r24, 0x00A9
     3f2:	80 64       	ori	r24, 0x40	; 64
     3f4:	80 93 a9 00 	sts	0x00A9, r24
	/* Clear the IN endpoint, ready for next data packet */
	Pipe_ClearIN();

	/* Refreeze keyboard data pipe */
	Pipe_Freeze();
}
     3f8:	28 96       	adiw	r28, 0x08	; 8
     3fa:	0f b6       	in	r0, 0x3f	; 63
     3fc:	f8 94       	cli
     3fe:	de bf       	out	0x3e, r29	; 62
     400:	0f be       	out	0x3f, r0	; 63
     402:	cd bf       	out	0x3d, r28	; 61
     404:	cf 91       	pop	r28
     406:	df 91       	pop	r29
     408:	08 95       	ret
     40a:	8a e0       	ldi	r24, 0x0A	; 10
     40c:	e5 cf       	rjmp	.-54     	; 0x3d8 <ReadNextReport+0x8a>

0000040e <Keyboard_HID_Task>:

/** Task to set the configuration of the attached device after it has been enumerated, and to read and process
 *  HID reports from the device and display the results onto the board LEDs.
 */
void Keyboard_HID_Task(void)
{
     40e:	1f 93       	push	r17
	uint8_t ErrorCode;

	switch (USB_HostState)
     410:	80 91 3c 01 	lds	r24, 0x013C
     414:	8b 30       	cpi	r24, 0x0B	; 11
     416:	21 f0       	breq	.+8      	; 0x420 <Keyboard_HID_Task+0x12>
     418:	8c 30       	cpi	r24, 0x0C	; 12
     41a:	09 f0       	breq	.+2      	; 0x41e <Keyboard_HID_Task+0x10>
     41c:	60 c0       	rjmp	.+192    	; 0x4de <Keyboard_HID_Task+0xd0>
     41e:	5e c0       	rjmp	.+188    	; 0x4dc <Keyboard_HID_Task+0xce>
	{
		case HOST_STATE_Addressed:
			puts_P(PSTR("Getting Config Data.\r\n"));
     420:	8b e8       	ldi	r24, 0x8B	; 139
     422:	91 e0       	ldi	r25, 0x01	; 1
     424:	21 d7       	rcall	.+3650   	; 0x1268 <puts_P>

			/* Get and process the configuration descriptor data */
			if ((ErrorCode = ProcessConfigurationDescriptor()) != SuccessfulConfigRead)
     426:	d4 d0       	rcall	.+424    	; 0x5d0 <ProcessConfigurationDescriptor>
     428:	18 2f       	mov	r17, r24
     42a:	88 23       	and	r24, r24
     42c:	b9 f0       	breq	.+46     	; 0x45c <Keyboard_HID_Task+0x4e>
			{
				if (ErrorCode == ControlError)
     42e:	81 30       	cpi	r24, 0x01	; 1
     430:	19 f4       	brne	.+6      	; 0x438 <Keyboard_HID_Task+0x2a>
				  puts_P(PSTR(ESC_FG_RED "Control Error (Get Configuration).\r\n"));
     432:	81 e6       	ldi	r24, 0x61	; 97
     434:	91 e0       	ldi	r25, 0x01	; 1
     436:	02 c0       	rjmp	.+4      	; 0x43c <Keyboard_HID_Task+0x2e>
				else
				  puts_P(PSTR(ESC_FG_RED "Invalid Device.\r\n"));
     438:	8a e4       	ldi	r24, 0x4A	; 74
     43a:	91 e0       	ldi	r25, 0x01	; 1
     43c:	15 d7       	rcall	.+3626   	; 0x1268 <puts_P>

				printf_P(PSTR(" -- Error Code: %d\r\n" ESC_FG_WHITE), ErrorCode);
     43e:	00 d0       	rcall	.+0      	; 0x440 <Keyboard_HID_Task+0x32>
     440:	00 d0       	rcall	.+0      	; 0x442 <Keyboard_HID_Task+0x34>
     442:	ed b7       	in	r30, 0x3d	; 61
     444:	fe b7       	in	r31, 0x3e	; 62
     446:	31 96       	adiw	r30, 0x01	; 1
     448:	80 e3       	ldi	r24, 0x30	; 48
     44a:	91 e0       	ldi	r25, 0x01	; 1
     44c:	ad b7       	in	r26, 0x3d	; 61
     44e:	be b7       	in	r27, 0x3e	; 62
     450:	12 96       	adiw	r26, 0x02	; 2
     452:	9c 93       	st	X, r25
     454:	8e 93       	st	-X, r24
     456:	11 97       	sbiw	r26, 0x01	; 1
     458:	12 83       	std	Z+2, r17	; 0x02
     45a:	2c c0       	rjmp	.+88     	; 0x4b4 <Keyboard_HID_Task+0xa6>
				USB_HostState = HOST_STATE_WaitForDeviceRemoval;
				break;
			}

			/* Set the device configuration to the first configuration (rarely do devices use multiple configurations) */
			if ((ErrorCode = USB_Host_SetDeviceConfiguration(1)) != HOST_SENDCONTROL_Successful)
     45c:	81 e0       	ldi	r24, 0x01	; 1
     45e:	c5 d1       	rcall	.+906    	; 0x7ea <USB_Host_SetDeviceConfiguration>
     460:	28 2f       	mov	r18, r24
     462:	88 23       	and	r24, r24
     464:	41 f0       	breq	.+16     	; 0x476 <Keyboard_HID_Task+0x68>
			{
				printf_P(PSTR(ESC_FG_RED "Control Error (Set Configuration).\r\n"
     466:	00 d0       	rcall	.+0      	; 0x468 <Keyboard_HID_Task+0x5a>
     468:	00 d0       	rcall	.+0      	; 0x46a <Keyboard_HID_Task+0x5c>
     46a:	ed b7       	in	r30, 0x3d	; 61
     46c:	fe b7       	in	r31, 0x3e	; 62
     46e:	31 96       	adiw	r30, 0x01	; 1
     470:	8d ee       	ldi	r24, 0xED	; 237
     472:	90 e0       	ldi	r25, 0x00	; 0
     474:	18 c0       	rjmp	.+48     	; 0x4a6 <Keyboard_HID_Task+0x98>
				USB_HostState = HOST_STATE_WaitForDeviceRemoval;
				break;
			}

			/* HID class request to set the keyboard protocol to the Boot Protocol */
			USB_ControlRequest = (USB_Request_Header_t)
     476:	a4 e3       	ldi	r26, 0x34	; 52
     478:	b1 e0       	ldi	r27, 0x01	; 1
     47a:	e0 e0       	ldi	r30, 0x00	; 0
     47c:	f1 e0       	ldi	r31, 0x01	; 1
     47e:	88 e0       	ldi	r24, 0x08	; 8
     480:	01 90       	ld	r0, Z+
     482:	0d 92       	st	X+, r0
     484:	81 50       	subi	r24, 0x01	; 1
     486:	e1 f7       	brne	.-8      	; 0x480 <Keyboard_HID_Task+0x72>
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
     488:	10 92 a7 00 	sts	0x00A7, r1

			/* Select the control pipe for the request transfer */
			Pipe_SelectPipe(PIPE_CONTROLPIPE);

			/* Send the request, display error and wait for device detach if request fails */
			if ((ErrorCode = USB_Host_SendControlRequest(NULL)) != HOST_SENDCONTROL_Successful)
     48c:	80 e0       	ldi	r24, 0x00	; 0
     48e:	90 e0       	ldi	r25, 0x00	; 0
     490:	3b d5       	rcall	.+2678   	; 0xf08 <USB_Host_SendControlRequest>
     492:	28 2f       	mov	r18, r24
     494:	88 23       	and	r24, r24
     496:	d9 f0       	breq	.+54     	; 0x4ce <Keyboard_HID_Task+0xc0>
			{
				printf_P(PSTR(ESC_FG_RED "Control Error (Set Protocol).\r\n"
     498:	00 d0       	rcall	.+0      	; 0x49a <Keyboard_HID_Task+0x8c>
     49a:	00 d0       	rcall	.+0      	; 0x49c <Keyboard_HID_Task+0x8e>
     49c:	ed b7       	in	r30, 0x3d	; 61
     49e:	fe b7       	in	r31, 0x3e	; 62
     4a0:	31 96       	adiw	r30, 0x01	; 1
     4a2:	8f ea       	ldi	r24, 0xAF	; 175
     4a4:	90 e0       	ldi	r25, 0x00	; 0
     4a6:	ad b7       	in	r26, 0x3d	; 61
     4a8:	be b7       	in	r27, 0x3e	; 62
     4aa:	12 96       	adiw	r26, 0x02	; 2
     4ac:	9c 93       	st	X, r25
     4ae:	8e 93       	st	-X, r24
     4b0:	11 97       	sbiw	r26, 0x01	; 1
     4b2:	22 83       	std	Z+2, r18	; 0x02
     4b4:	13 82       	std	Z+3, r1	; 0x03
     4b6:	b6 d6       	rcall	.+3436   	; 0x1224 <printf_P>
				PORTD &= ~LEDMask;
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
			{
				PORTD = ((PORTD & ~LEDS_ALL_LEDS) | LEDMask);
     4b8:	8b b1       	in	r24, 0x0b	; 11
     4ba:	8f 70       	andi	r24, 0x0F	; 15
     4bc:	80 69       	ori	r24, 0x90	; 144
     4be:	8b b9       	out	0x0b, r24	; 11

				/* Indicate error status */
				LEDs_SetAllLEDs(LEDMASK_USB_ERROR);

				/* Wait until USB device disconnected */
				USB_HostState = HOST_STATE_WaitForDeviceRemoval;
     4c0:	10 92 3c 01 	sts	0x013C, r1
     4c4:	0f 90       	pop	r0
     4c6:	0f 90       	pop	r0
     4c8:	0f 90       	pop	r0
     4ca:	0f 90       	pop	r0
     4cc:	08 c0       	rjmp	.+16     	; 0x4de <Keyboard_HID_Task+0xd0>
				break;
			}

			puts_P(PSTR("Keyboard Enumerated.\r\n"));
     4ce:	88 e9       	ldi	r24, 0x98	; 152
     4d0:	90 e0       	ldi	r25, 0x00	; 0
     4d2:	ca d6       	rcall	.+3476   	; 0x1268 <puts_P>

			USB_HostState = HOST_STATE_Configured;
     4d4:	8c e0       	ldi	r24, 0x0C	; 12
     4d6:	80 93 3c 01 	sts	0x013C, r24
     4da:	01 c0       	rjmp	.+2      	; 0x4de <Keyboard_HID_Task+0xd0>
			break;
		case HOST_STATE_Configured:
			/* If a report has been received, read and process it */
			ReadNextReport();
     4dc:	38 df       	rcall	.-400    	; 0x34e <ReadNextReport>

			break;
	}
}
     4de:	1f 91       	pop	r17
     4e0:	08 95       	ret

000004e2 <EVENT_USB_Host_HostError>:
	LEDs_SetAllLEDs(LEDMASK_USB_READY);
}

/** Event handler for the USB_HostError event. This indicates that a hardware error occurred while in host mode. */
void EVENT_USB_Host_HostError(const uint8_t ErrorCode)
{
     4e2:	1f 93       	push	r17
     4e4:	18 2f       	mov	r17, r24
	USB_ShutDown();
     4e6:	93 d3       	rcall	.+1830   	; 0xc0e <USB_ShutDown>

	printf_P(PSTR(ESC_FG_RED "Host Mode Error\r\n"
     4e8:	00 d0       	rcall	.+0      	; 0x4ea <EVENT_USB_Host_HostError+0x8>
     4ea:	00 d0       	rcall	.+0      	; 0x4ec <EVENT_USB_Host_HostError+0xa>
     4ec:	ed b7       	in	r30, 0x3d	; 61
     4ee:	fe b7       	in	r31, 0x3e	; 62
     4f0:	31 96       	adiw	r30, 0x01	; 1
     4f2:	88 ef       	ldi	r24, 0xF8	; 248
     4f4:	91 e0       	ldi	r25, 0x01	; 1
     4f6:	ad b7       	in	r26, 0x3d	; 61
     4f8:	be b7       	in	r27, 0x3e	; 62
     4fa:	12 96       	adiw	r26, 0x02	; 2
     4fc:	9c 93       	st	X, r25
     4fe:	8e 93       	st	-X, r24
     500:	11 97       	sbiw	r26, 0x01	; 1
     502:	12 83       	std	Z+2, r17	; 0x02
     504:	13 82       	std	Z+3, r1	; 0x03
     506:	8e d6       	rcall	.+3356   	; 0x1224 <printf_P>
     508:	8b b1       	in	r24, 0x0b	; 11
     50a:	8f 70       	andi	r24, 0x0F	; 15
     50c:	80 69       	ori	r24, 0x90	; 144
     50e:	8b b9       	out	0x0b, r24	; 11
     510:	0f 90       	pop	r0
     512:	0f 90       	pop	r0
     514:	0f 90       	pop	r0
     516:	0f 90       	pop	r0
     518:	ff cf       	rjmp	.-2      	; 0x518 <EVENT_USB_Host_HostError+0x36>

0000051a <SetupHardware>:

/** Configures the board hardware and chip peripherals for the demo's functionality. */
void SetupHardware(void)
{
	/* Disable watchdog if enabled by bootloader/fuses */
	MCUSR &= ~(1 << WDRF);
     51a:	84 b7       	in	r24, 0x34	; 52
     51c:	87 7f       	andi	r24, 0xF7	; 247
     51e:	84 bf       	out	0x34, r24	; 52
	wdt_disable();
     520:	38 e1       	ldi	r19, 0x18	; 24
     522:	0f b6       	in	r0, 0x3f	; 63
     524:	f8 94       	cli
     526:	30 93 60 00 	sts	0x0060, r19
     52a:	10 92 60 00 	sts	0x0060, r1
     52e:	0f be       	out	0x3f, r0	; 63

	/* Disable clock division */
	clock_prescale_set(clock_div_1);
     530:	80 e0       	ldi	r24, 0x00	; 0
     532:	90 e0       	ldi	r25, 0x00	; 0
     534:	20 e8       	ldi	r18, 0x80	; 128
     536:	0f b6       	in	r0, 0x3f	; 63
     538:	f8 94       	cli
     53a:	20 93 61 00 	sts	0x0061, r18
     53e:	80 93 61 00 	sts	0x0061, r24
     542:	0f be       	out	0x3f, r0	; 63
			 *  \param[in] DoubleSpeed  Enables double speed mode when set, halving the sample time to double the baud rate.
			 */
			static inline void Serial_Init(const uint32_t BaudRate,
			                               const bool DoubleSpeed)
			{
				UBRR1  = (DoubleSpeed ? SERIAL_2X_UBBRVAL(BaudRate) : SERIAL_UBBRVAL(BaudRate));
     544:	83 e3       	ldi	r24, 0x33	; 51
     546:	90 e0       	ldi	r25, 0x00	; 0
     548:	90 93 cd 00 	sts	0x00CD, r25
     54c:	80 93 cc 00 	sts	0x00CC, r24

				UCSR1C = ((1 << UCSZ11) | (1 << UCSZ10));
     550:	86 e0       	ldi	r24, 0x06	; 6
     552:	80 93 ca 00 	sts	0x00CA, r24
				UCSR1A = (DoubleSpeed ? (1 << U2X1) : 0);
     556:	10 92 c8 00 	sts	0x00C8, r1
				UCSR1B = ((1 << TXEN1)  | (1 << RXEN1));
     55a:	30 93 c9 00 	sts	0x00C9, r19

				DDRD  |= (1 << 3);
     55e:	53 9a       	sbi	0x0a, 3	; 10
				PORTD |= (1 << 2);
     560:	5a 9a       	sbi	0x0b, 2	; 11
			static inline void SerialStream_Init(const uint32_t BaudRate,
			                                     const bool DoubleSpeed)
			{
				Serial_Init(BaudRate, DoubleSpeed);

				stdout = &USARTStream;
     562:	81 e2       	ldi	r24, 0x21	; 33
     564:	91 e0       	ldi	r25, 0x01	; 1
     566:	90 93 40 01 	sts	0x0140, r25
     56a:	80 93 3f 01 	sts	0x013F, r24
				stdin  = &USARTStream;
     56e:	90 93 3e 01 	sts	0x013E, r25
     572:	80 93 3d 01 	sts	0x013D, r24

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void LEDs_Init(void)
			{
				DDRD  |=  LEDS_ALL_LEDS;
     576:	8a b1       	in	r24, 0x0a	; 10
     578:	80 6f       	ori	r24, 0xF0	; 240
     57a:	8a b9       	out	0x0a, r24	; 10
				PORTD &= ~LEDS_ALL_LEDS;
     57c:	8b b1       	in	r24, 0x0b	; 11
     57e:	8f 70       	andi	r24, 0x0F	; 15
     580:	8b b9       	out	0x0b, r24	; 11

	/* Hardware Initialization */
	SerialStream_Init(9600, false);
	LEDs_Init();
	USB_Init();
}
     582:	3c c3       	rjmp	.+1656   	; 0xbfc <USB_Init>

00000584 <main>:
/** Main program entry point. This routine configures the hardware required by the application, then
 *  enters a loop to run the application tasks in sequence.
 */
int main(void)
{
	SetupHardware();
     584:	ca df       	rcall	.-108    	; 0x51a <SetupHardware>

	puts_P(PSTR(ESC_FG_CYAN "Keyboard HID Host Demo running.\r\n" ESC_FG_WHITE));
     586:	83 e6       	ldi	r24, 0x63	; 99
     588:	92 e0       	ldi	r25, 0x02	; 2
     58a:	6e d6       	rcall	.+3292   	; 0x1268 <puts_P>
				PORTD &= ~LEDMask;
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
			{
				PORTD = ((PORTD & ~LEDS_ALL_LEDS) | LEDMask);
     58c:	8b b1       	in	r24, 0x0b	; 11
     58e:	8f 70       	andi	r24, 0x0F	; 15
     590:	80 61       	ori	r24, 0x10	; 16
     592:	8b b9       	out	0x0b, r24	; 11

	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
	sei();
     594:	78 94       	sei

	for (;;)
	{
		Keyboard_HID_Task();
     596:	3b df       	rcall	.-394    	; 0x40e <Keyboard_HID_Task>
		USB_USBTask();
     598:	ec d5       	rcall	.+3032   	; 0x1172 <USB_USBTask>
     59a:	fd cf       	rjmp	.-6      	; 0x596 <main+0x12>

0000059c <DComp_NextKeyboardInterface>:
 *  This comparator searches for the next Interface descriptor of the correct Keyboard HID Class and Protocol values.
 *
 *  \return A value from the DSEARCH_Return_ErrorCodes_t enum
 */
uint8_t DComp_NextKeyboardInterface(void* CurrentDescriptor)
{
     59c:	fc 01       	movw	r30, r24
	USB_Descriptor_Header_t* Header = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Header_t);

	if (Header->Type == DTYPE_Interface)
     59e:	81 81       	ldd	r24, Z+1	; 0x01
     5a0:	84 30       	cpi	r24, 0x04	; 4
     5a2:	41 f4       	brne	.+16     	; 0x5b4 <DComp_NextKeyboardInterface+0x18>
	{
		USB_Descriptor_Interface_t* Interface = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Interface_t);

		/* Check the HID descriptor class and protocol, break out if correct class/protocol interface found */
		if ((Interface->Class    == HID_CSCP_HIDClass) &&
     5a4:	85 81       	ldd	r24, Z+5	; 0x05
     5a6:	83 30       	cpi	r24, 0x03	; 3
     5a8:	29 f4       	brne	.+10     	; 0x5b4 <DComp_NextKeyboardInterface+0x18>
     5aa:	87 81       	ldd	r24, Z+7	; 0x07
     5ac:	81 30       	cpi	r24, 0x01	; 1
     5ae:	11 f4       	brne	.+4      	; 0x5b4 <DComp_NextKeyboardInterface+0x18>
     5b0:	80 e0       	ldi	r24, 0x00	; 0
     5b2:	08 95       	ret
     5b4:	82 e0       	ldi	r24, 0x02	; 2
			return DESCRIPTOR_SEARCH_Found;
		}
	}

	return DESCRIPTOR_SEARCH_NotFound;
}
     5b6:	08 95       	ret

000005b8 <DComp_NextKeyboardInterfaceDataEndpoint>:
 */
uint8_t DComp_NextKeyboardInterfaceDataEndpoint(void* CurrentDescriptor)
{
	USB_Descriptor_Header_t* Header = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Header_t);

	if (Header->Type == DTYPE_Endpoint)
     5b8:	fc 01       	movw	r30, r24
     5ba:	81 81       	ldd	r24, Z+1	; 0x01
     5bc:	85 30       	cpi	r24, 0x05	; 5
     5be:	11 f4       	brne	.+4      	; 0x5c4 <DComp_NextKeyboardInterfaceDataEndpoint+0xc>
     5c0:	80 e0       	ldi	r24, 0x00	; 0
     5c2:	08 95       	ret
	  return DESCRIPTOR_SEARCH_Found;
	else if (Header->Type == DTYPE_Interface)
     5c4:	84 30       	cpi	r24, 0x04	; 4
     5c6:	11 f0       	breq	.+4      	; 0x5cc <DComp_NextKeyboardInterfaceDataEndpoint+0x14>
     5c8:	82 e0       	ldi	r24, 0x02	; 2
     5ca:	08 95       	ret
     5cc:	81 e0       	ldi	r24, 0x01	; 1
	  return DESCRIPTOR_SEARCH_Fail;
	else
	  return DESCRIPTOR_SEARCH_NotFound;
}
     5ce:	08 95       	ret

000005d0 <ProcessConfigurationDescriptor>:
 *  This routine searches for a HID interface descriptor containing at least one Interrupt type IN endpoint.
 *
 *  \return An error code from the \ref KeyboardHost_GetConfigDescriptorDataCodes_t enum.
 */
uint8_t ProcessConfigurationDescriptor(void)
{
     5d0:	af 92       	push	r10
     5d2:	bf 92       	push	r11
     5d4:	cf 92       	push	r12
     5d6:	df 92       	push	r13
     5d8:	ef 92       	push	r14
     5da:	ff 92       	push	r15
     5dc:	0f 93       	push	r16
     5de:	1f 93       	push	r17
     5e0:	df 93       	push	r29
     5e2:	cf 93       	push	r28
     5e4:	cd b7       	in	r28, 0x3d	; 61
     5e6:	de b7       	in	r29, 0x3e	; 62
     5e8:	c4 50       	subi	r28, 0x04	; 4
     5ea:	d2 40       	sbci	r29, 0x02	; 2
     5ec:	0f b6       	in	r0, 0x3f	; 63
     5ee:	f8 94       	cli
     5f0:	de bf       	out	0x3e, r29	; 62
     5f2:	0f be       	out	0x3f, r0	; 63
     5f4:	cd bf       	out	0x3d, r28	; 61
	uint8_t  ConfigDescriptorData[512];
	void*    CurrConfigLocation = ConfigDescriptorData;
     5f6:	ae 01       	movw	r20, r28
     5f8:	4b 5f       	subi	r20, 0xFB	; 251
     5fa:	5f 4f       	sbci	r21, 0xFF	; 255
     5fc:	5a 83       	std	Y+2, r21	; 0x02
     5fe:	49 83       	std	Y+1, r20	; 0x01

	USB_Descriptor_Interface_t* HIDInterface   = NULL;
	USB_Descriptor_Endpoint_t*  DataINEndpoint = NULL;

	/* Retrieve the entire configuration descriptor into the allocated buffer */
	switch (USB_Host_GetDeviceConfigDescriptor(1, &CurrConfigBytesRem, ConfigDescriptorData, sizeof(ConfigDescriptorData)))
     600:	83 e0       	ldi	r24, 0x03	; 3
     602:	c8 2e       	mov	r12, r24
     604:	d1 2c       	mov	r13, r1
     606:	cc 0e       	add	r12, r28
     608:	dd 1e       	adc	r13, r29
     60a:	81 e0       	ldi	r24, 0x01	; 1
     60c:	b6 01       	movw	r22, r12
     60e:	20 e0       	ldi	r18, 0x00	; 0
     610:	32 e0       	ldi	r19, 0x02	; 2
     612:	f6 d3       	rcall	.+2028   	; 0xe00 <USB_Host_GetDeviceConfigDescriptor>
     614:	85 30       	cpi	r24, 0x05	; 5
     616:	29 f0       	breq	.+10     	; 0x622 <ProcessConfigurationDescriptor+0x52>
     618:	86 30       	cpi	r24, 0x06	; 6
     61a:	69 f0       	breq	.+26     	; 0x636 <ProcessConfigurationDescriptor+0x66>
     61c:	88 23       	and	r24, r24
     61e:	19 f0       	breq	.+6      	; 0x626 <ProcessConfigurationDescriptor+0x56>
     620:	0c c0       	rjmp	.+24     	; 0x63a <ProcessConfigurationDescriptor+0x6a>
     622:	82 e0       	ldi	r24, 0x02	; 2
     624:	37 c0       	rjmp	.+110    	; 0x694 <ProcessConfigurationDescriptor+0xc4>
     626:	00 e0       	ldi	r16, 0x00	; 0
     628:	10 e0       	ldi	r17, 0x00	; 0
	}

	while (!(DataINEndpoint))
	{
		/* See if we've found a likely compatible interface, and if there is an endpoint within that interface */
		if (!(HIDInterface) ||
     62a:	56 01       	movw	r10, r12
     62c:	7e 01       	movw	r14, r28
     62e:	08 94       	sec
     630:	e1 1c       	adc	r14, r1
     632:	f1 1c       	adc	r15, r1
     634:	04 c0       	rjmp	.+8      	; 0x63e <ProcessConfigurationDescriptor+0x6e>

	USB_Descriptor_Interface_t* HIDInterface   = NULL;
	USB_Descriptor_Endpoint_t*  DataINEndpoint = NULL;

	/* Retrieve the entire configuration descriptor into the allocated buffer */
	switch (USB_Host_GetDeviceConfigDescriptor(1, &CurrConfigBytesRem, ConfigDescriptorData, sizeof(ConfigDescriptorData)))
     636:	83 e0       	ldi	r24, 0x03	; 3
     638:	2d c0       	rjmp	.+90     	; 0x694 <ProcessConfigurationDescriptor+0xc4>
     63a:	81 e0       	ldi	r24, 0x01	; 1
     63c:	2b c0       	rjmp	.+86     	; 0x694 <ProcessConfigurationDescriptor+0xc4>
	}

	while (!(DataINEndpoint))
	{
		/* See if we've found a likely compatible interface, and if there is an endpoint within that interface */
		if (!(HIDInterface) ||
     63e:	01 15       	cp	r16, r1
     640:	11 05       	cpc	r17, r1
     642:	39 f0       	breq	.+14     	; 0x652 <ProcessConfigurationDescriptor+0x82>
     644:	c5 01       	movw	r24, r10
     646:	b7 01       	movw	r22, r14
     648:	4c ed       	ldi	r20, 0xDC	; 220
     64a:	52 e0       	ldi	r21, 0x02	; 2
     64c:	98 d3       	rcall	.+1840   	; 0xd7e <USB_GetNextDescriptorComp>
     64e:	88 23       	and	r24, r24
     650:	61 f0       	breq	.+24     	; 0x66a <ProcessConfigurationDescriptor+0x9a>
		    USB_GetNextDescriptorComp(&CurrConfigBytesRem, &CurrConfigLocation,
		                              DComp_NextKeyboardInterfaceDataEndpoint) != DESCRIPTOR_SEARCH_COMP_Found)
		{
			/* Get the next HID interface from the configuration descriptor */
			if (USB_GetNextDescriptorComp(&CurrConfigBytesRem, &CurrConfigLocation,
     652:	c5 01       	movw	r24, r10
     654:	b7 01       	movw	r22, r14
     656:	4e ec       	ldi	r20, 0xCE	; 206
     658:	52 e0       	ldi	r21, 0x02	; 2
     65a:	91 d3       	rcall	.+1826   	; 0xd7e <USB_GetNextDescriptorComp>
     65c:	88 23       	and	r24, r24
     65e:	11 f0       	breq	.+4      	; 0x664 <ProcessConfigurationDescriptor+0x94>
     660:	84 e0       	ldi	r24, 0x04	; 4
     662:	18 c0       	rjmp	.+48     	; 0x694 <ProcessConfigurationDescriptor+0xc4>
				/* Descriptor not found, error out */
				return NoCompatibleInterfaceFound;
			}

			/* Save the interface in case we need to refer back to it later */
			HIDInterface = DESCRIPTOR_PCAST(CurrConfigLocation, USB_Descriptor_Interface_t);
     664:	09 81       	ldd	r16, Y+1	; 0x01
     666:	1a 81       	ldd	r17, Y+2	; 0x02
     668:	ea cf       	rjmp	.-44     	; 0x63e <ProcessConfigurationDescriptor+0x6e>
			/* Skip the remainder of the loop as we have not found an endpoint yet */
			continue;
		}

		/* Retrieve the endpoint address from the endpoint descriptor */
		USB_Descriptor_Endpoint_t* EndpointData = DESCRIPTOR_PCAST(CurrConfigLocation, USB_Descriptor_Endpoint_t);
     66a:	c9 80       	ldd	r12, Y+1	; 0x01
     66c:	da 80       	ldd	r13, Y+2	; 0x02

		/* If the endpoint is a IN type endpoint */
		if (EndpointData->EndpointAddress & ENDPOINT_DESCRIPTOR_DIR_IN)
     66e:	f6 01       	movw	r30, r12
     670:	22 81       	ldd	r18, Z+2	; 0x02
     672:	27 ff       	sbrs	r18, 7
     674:	e4 cf       	rjmp	.-56     	; 0x63e <ProcessConfigurationDescriptor+0x6e>
			return DescriptorTooLarge;
		default:
			return ControlError;
	}

	while (!(DataINEndpoint))
     676:	c1 14       	cp	r12, r1
     678:	d1 04       	cpc	r13, r1
     67a:	09 f3       	breq	.-62     	; 0x63e <ProcessConfigurationDescriptor+0x6e>
		if (EndpointData->EndpointAddress & ENDPOINT_DESCRIPTOR_DIR_IN)
		  DataINEndpoint = EndpointData;
	}

	/* Configure the HID data IN pipe */
	Pipe_ConfigurePipe(KEYBOARD_DATA_IN_PIPE, EP_TYPE_INTERRUPT, PIPE_TOKEN_IN,
     67c:	04 81       	ldd	r16, Z+4	; 0x04
     67e:	15 81       	ldd	r17, Z+5	; 0x05
     680:	81 e0       	ldi	r24, 0x01	; 1
     682:	63 e0       	ldi	r22, 0x03	; 3
     684:	40 e1       	ldi	r20, 0x10	; 16
     686:	ee 24       	eor	r14, r14
     688:	f4 d1       	rcall	.+1000   	; 0xa72 <Pipe_ConfigurePipe>
	                   DataINEndpoint->EndpointAddress, DataINEndpoint->EndpointSize, PIPE_BANK_SINGLE);
	Pipe_SetInterruptPeriod(DataINEndpoint->PollingIntervalMS);
     68a:	f6 01       	movw	r30, r12
     68c:	86 81       	ldd	r24, Z+6	; 0x06
			 *  \param[in] Milliseconds  Number of milliseconds between each pipe poll.
			 */
			static inline void Pipe_SetInterruptPeriod(const uint8_t Milliseconds) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetInterruptPeriod(const uint8_t Milliseconds)
			{
				UPCFG2X = Milliseconds;
     68e:	80 93 ad 00 	sts	0x00AD, r24
     692:	80 e0       	ldi	r24, 0x00	; 0

	/* Valid data found, return success */
	return SuccessfulConfigRead;
}
     694:	cc 5f       	subi	r28, 0xFC	; 252
     696:	dd 4f       	sbci	r29, 0xFD	; 253
     698:	0f b6       	in	r0, 0x3f	; 63
     69a:	f8 94       	cli
     69c:	de bf       	out	0x3e, r29	; 62
     69e:	0f be       	out	0x3f, r0	; 63
     6a0:	cd bf       	out	0x3d, r28	; 61
     6a2:	cf 91       	pop	r28
     6a4:	df 91       	pop	r29
     6a6:	1f 91       	pop	r17
     6a8:	0f 91       	pop	r16
     6aa:	ff 90       	pop	r15
     6ac:	ef 90       	pop	r14
     6ae:	df 90       	pop	r13
     6b0:	cf 90       	pop	r12
     6b2:	bf 90       	pop	r11
     6b4:	af 90       	pop	r10
     6b6:	08 95       	ret

000006b8 <USB_Host_WaitMS>:
		USB_ResetInterface();
	}
}

uint8_t USB_Host_WaitMS(uint8_t MS)
{
     6b8:	98 2f       	mov	r25, r24
			 *  \return Boolean true if the bus is currently suspended, false otherwise.
			 */
			static inline bool USB_Host_IsBusSuspended(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusSuspended(void)
			{
				return ((UHCON & (1 << SOFEN)) ? false : true);
     6ba:	20 91 9e 00 	lds	r18, 0x009E
	bool    BusSuspended = USB_Host_IsBusSuspended();
	uint8_t ErrorCode    = HOST_WAITERROR_Successful;
	bool    HSOFIEnabled = USB_INT_IsEnabled(USB_INT_HSOFI);
     6be:	30 91 a0 00 	lds	r19, 0x00A0

	USB_INT_Disable(USB_INT_HSOFI);
     6c2:	80 91 a0 00 	lds	r24, 0x00A0
     6c6:	8f 7d       	andi	r24, 0xDF	; 223
     6c8:	80 93 a0 00 	sts	0x00A0, r24
	USB_INT_Clear(USB_INT_HSOFI);
     6cc:	80 91 9f 00 	lds	r24, 0x009F
     6d0:	8f 7d       	andi	r24, 0xDF	; 223
     6d2:	80 93 9f 00 	sts	0x009F, r24
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
     6d6:	80 91 9e 00 	lds	r24, 0x009E
     6da:	81 60       	ori	r24, 0x01	; 1
     6dc:	80 93 9e 00 	sts	0x009E, r24
     6e0:	26 c0       	rjmp	.+76     	; 0x72e <USB_Host_WaitMS+0x76>

	USB_Host_ResumeBus();

	while (MS)
	{
		if (USB_INT_HasOccurred(USB_INT_HSOFI))
     6e2:	80 91 9f 00 	lds	r24, 0x009F
     6e6:	85 ff       	sbrs	r24, 5
     6e8:	06 c0       	rjmp	.+12     	; 0x6f6 <USB_Host_WaitMS+0x3e>
		{
			USB_INT_Clear(USB_INT_HSOFI);
     6ea:	80 91 9f 00 	lds	r24, 0x009F
     6ee:	8f 7d       	andi	r24, 0xDF	; 223
     6f0:	80 93 9f 00 	sts	0x009F, r24
			MS--;
     6f4:	91 50       	subi	r25, 0x01	; 1
		}

		if ((USB_HostState == HOST_STATE_Unattached) || (USB_CurrentMode != USB_MODE_Host))
     6f6:	80 91 3c 01 	lds	r24, 0x013C
     6fa:	82 30       	cpi	r24, 0x02	; 2
     6fc:	11 f4       	brne	.+4      	; 0x702 <USB_Host_WaitMS+0x4a>
     6fe:	91 e0       	ldi	r25, 0x01	; 1
     700:	18 c0       	rjmp	.+48     	; 0x732 <USB_Host_WaitMS+0x7a>
			 *  \return Boolean true if an error has occurred on the selected pipe, false otherwise.
			 */
			static inline bool Pipe_IsError(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsError(void)
			{
				return ((UPINTX & (1 << PERRI)) ? true : false);
     702:	80 91 a6 00 	lds	r24, 0x00A6
			ErrorCode = HOST_WAITERROR_DeviceDisconnect;

			break;
		}

		if (Pipe_IsError() == true)
     706:	84 ff       	sbrs	r24, 4
     708:	07 c0       	rjmp	.+14     	; 0x718 <USB_Host_WaitMS+0x60>

			/** Clears the master pipe error flag. */
			static inline void Pipe_ClearError(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearError(void)
			{
				UPINTX &= ~(1 << PERRI);
     70a:	80 91 a6 00 	lds	r24, 0x00A6
     70e:	8f 7e       	andi	r24, 0xEF	; 239
     710:	80 93 a6 00 	sts	0x00A6, r24
     714:	92 e0       	ldi	r25, 0x02	; 2
     716:	0d c0       	rjmp	.+26     	; 0x732 <USB_Host_WaitMS+0x7a>
			 *  \return Boolean true if the current pipe has been stalled by the attached device, false otherwise.
			 */
			static inline bool Pipe_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsStalled(void)
			{
				return ((UPINTX & (1 << RXSTALLI)) ? true : false);
     718:	80 91 a6 00 	lds	r24, 0x00A6
			ErrorCode = HOST_WAITERROR_PipeError;

			break;
		}

		if (Pipe_IsStalled() == true)
     71c:	81 ff       	sbrs	r24, 1
     71e:	07 c0       	rjmp	.+14     	; 0x72e <USB_Host_WaitMS+0x76>
			 *  \ingroup Group_PipePacketManagement
			 */
			static inline void Pipe_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearStall(void)
			{
				UPINTX &= ~(1 << RXSTALLI);
     720:	80 91 a6 00 	lds	r24, 0x00A6
     724:	8d 7f       	andi	r24, 0xFD	; 253
     726:	80 93 a6 00 	sts	0x00A6, r24
     72a:	93 e0       	ldi	r25, 0x03	; 3
     72c:	02 c0       	rjmp	.+4      	; 0x732 <USB_Host_WaitMS+0x7a>
	USB_INT_Disable(USB_INT_HSOFI);
	USB_INT_Clear(USB_INT_HSOFI);

	USB_Host_ResumeBus();

	while (MS)
     72e:	99 23       	and	r25, r25
     730:	c1 f6       	brne	.-80     	; 0x6e2 <USB_Host_WaitMS+0x2a>

			break;
		}
	}

	if (BusSuspended)
     732:	20 fd       	sbrc	r18, 0
     734:	05 c0       	rjmp	.+10     	; 0x740 <USB_Host_WaitMS+0x88>
			 *  messages to the device.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				UHCON &= ~(1 << SOFEN);
     736:	80 91 9e 00 	lds	r24, 0x009E
     73a:	8e 7f       	andi	r24, 0xFE	; 254
     73c:	80 93 9e 00 	sts	0x009E, r24
	  USB_Host_SuspendBus();

	if (HSOFIEnabled)
     740:	35 ff       	sbrs	r19, 5
     742:	05 c0       	rjmp	.+10     	; 0x74e <USB_Host_WaitMS+0x96>
	  USB_INT_Enable(USB_INT_HSOFI);
     744:	80 91 a0 00 	lds	r24, 0x00A0
     748:	80 62       	ori	r24, 0x20	; 32
     74a:	80 93 a0 00 	sts	0x00A0, r24

	return ErrorCode;
}
     74e:	89 2f       	mov	r24, r25
     750:	08 95       	ret

00000752 <USB_Host_ResetDevice>:
			 *  \return Boolean true if the bus is currently suspended, false otherwise.
			 */
			static inline bool USB_Host_IsBusSuspended(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusSuspended(void)
			{
				return ((UHCON & (1 << SOFEN)) ? false : true);
     752:	60 91 9e 00 	lds	r22, 0x009E

static void USB_Host_ResetDevice(void)
{
	bool BusSuspended = USB_Host_IsBusSuspended();

	USB_INT_Disable(USB_INT_DDISCI);
     756:	80 91 a0 00 	lds	r24, 0x00A0
     75a:	8d 7f       	andi	r24, 0xFD	; 253
     75c:	80 93 a0 00 	sts	0x00A0, r24
			 *  woken up automatically and the bus resumed after the reset has been correctly issued.
			 */
			static inline void USB_Host_ResetBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResetBus(void)
			{
				UHCON |=  (1 << RESET);
     760:	80 91 9e 00 	lds	r24, 0x009E
     764:	82 60       	ori	r24, 0x02	; 2
     766:	80 93 9e 00 	sts	0x009E, r24
			 *  \return Boolean true if no bus reset is currently being sent, false otherwise.
			 */
			static inline bool USB_Host_IsBusResetComplete(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusResetComplete(void)
			{
				return ((UHCON & (1 << RESET)) ? false : true);
     76a:	80 91 9e 00 	lds	r24, 0x009E

	USB_Host_ResetBus();
	while (!(USB_Host_IsBusResetComplete()));
     76e:	81 fd       	sbrc	r24, 1
     770:	fc cf       	rjmp	.-8      	; 0x76a <USB_Host_ResetDevice+0x18>
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
     772:	80 91 9e 00 	lds	r24, 0x009E
     776:	81 60       	ori	r24, 0x01	; 1
     778:	80 93 9e 00 	sts	0x009E, r24
	USB_Host_ResumeBus();

	bool HSOFIEnabled = USB_INT_IsEnabled(USB_INT_HSOFI);
     77c:	30 91 a0 00 	lds	r19, 0x00A0

	USB_INT_Disable(USB_INT_HSOFI);
     780:	80 91 a0 00 	lds	r24, 0x00A0
     784:	8f 7d       	andi	r24, 0xDF	; 223
     786:	80 93 a0 00 	sts	0x00A0, r24
	USB_INT_Clear(USB_INT_HSOFI);
     78a:	80 91 9f 00 	lds	r24, 0x009F
     78e:	8f 7d       	andi	r24, 0xDF	; 223
     790:	80 93 9f 00 	sts	0x009F, r24
     794:	2a e0       	ldi	r18, 0x0A	; 10
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     796:	40 ed       	ldi	r20, 0xD0	; 208
     798:	57 e0       	ldi	r21, 0x07	; 7
		/* Workaround for powerless-pull-up devices. After a USB bus reset,
		   all disconnection interrupts are suppressed while a USB frame is
		   looked for - if it is found within 10ms, the device is still
		   present.                                                        */

		if (USB_INT_HasOccurred(USB_INT_HSOFI))
     79a:	80 91 9f 00 	lds	r24, 0x009F
     79e:	85 ff       	sbrs	r24, 5
     7a0:	0b c0       	rjmp	.+22     	; 0x7b8 <USB_Host_ResetDevice+0x66>
		{
			USB_INT_Clear(USB_INT_HSOFI);
     7a2:	80 91 9f 00 	lds	r24, 0x009F
     7a6:	8f 7d       	andi	r24, 0xDF	; 223
     7a8:	80 93 9f 00 	sts	0x009F, r24
			USB_INT_Clear(USB_INT_DDISCI);
     7ac:	80 91 9f 00 	lds	r24, 0x009F
     7b0:	8d 7f       	andi	r24, 0xFD	; 253
     7b2:	80 93 9f 00 	sts	0x009F, r24
     7b6:	05 c0       	rjmp	.+10     	; 0x7c2 <USB_Host_ResetDevice+0x70>
     7b8:	ca 01       	movw	r24, r20
     7ba:	01 97       	sbiw	r24, 0x01	; 1
     7bc:	f1 f7       	brne	.-4      	; 0x7ba <USB_Host_ResetDevice+0x68>
	bool HSOFIEnabled = USB_INT_IsEnabled(USB_INT_HSOFI);

	USB_INT_Disable(USB_INT_HSOFI);
	USB_INT_Clear(USB_INT_HSOFI);

	for (uint8_t MSRem = 10; MSRem != 0; MSRem--)
     7be:	21 50       	subi	r18, 0x01	; 1
     7c0:	61 f7       	brne	.-40     	; 0x79a <USB_Host_ResetDevice+0x48>
		}

		_delay_ms(1);
	}

	if (HSOFIEnabled)
     7c2:	35 ff       	sbrs	r19, 5
     7c4:	05 c0       	rjmp	.+10     	; 0x7d0 <USB_Host_ResetDevice+0x7e>
	  USB_INT_Enable(USB_INT_HSOFI);
     7c6:	80 91 a0 00 	lds	r24, 0x00A0
     7ca:	80 62       	ori	r24, 0x20	; 32
     7cc:	80 93 a0 00 	sts	0x00A0, r24

	if (BusSuspended)
     7d0:	60 fd       	sbrc	r22, 0
     7d2:	05 c0       	rjmp	.+10     	; 0x7de <USB_Host_ResetDevice+0x8c>
			 *  messages to the device.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				UHCON &= ~(1 << SOFEN);
     7d4:	80 91 9e 00 	lds	r24, 0x009E
     7d8:	8e 7f       	andi	r24, 0xFE	; 254
     7da:	80 93 9e 00 	sts	0x009E, r24
	  USB_Host_SuspendBus();

	USB_INT_Enable(USB_INT_DDISCI);
     7de:	80 91 a0 00 	lds	r24, 0x00A0
     7e2:	82 60       	ori	r24, 0x02	; 2
     7e4:	80 93 a0 00 	sts	0x00A0, r24
}
     7e8:	08 95       	ret

000007ea <USB_Host_SetDeviceConfiguration>:

uint8_t USB_Host_SetDeviceConfiguration(const uint8_t ConfigNumber)
{
	USB_ControlRequest = (USB_Request_Header_t)
     7ea:	10 92 34 01 	sts	0x0134, r1
     7ee:	99 e0       	ldi	r25, 0x09	; 9
     7f0:	90 93 35 01 	sts	0x0135, r25
     7f4:	80 93 36 01 	sts	0x0136, r24
     7f8:	10 92 37 01 	sts	0x0137, r1
     7fc:	10 92 39 01 	sts	0x0139, r1
     800:	10 92 38 01 	sts	0x0138, r1
     804:	10 92 3b 01 	sts	0x013B, r1
     808:	10 92 3a 01 	sts	0x013A, r1
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
     80c:	10 92 a7 00 	sts	0x00A7, r1
			.wLength       = 0,
		};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	return USB_Host_SendControlRequest(NULL);
     810:	80 e0       	ldi	r24, 0x00	; 0
     812:	90 e0       	ldi	r25, 0x00	; 0
}
     814:	79 c3       	rjmp	.+1778   	; 0xf08 <USB_Host_SendControlRequest>

00000816 <USB_Host_ProcessNextHostState>:

#define  __INCLUDE_FROM_HOST_C
#include "Host.h"

void USB_Host_ProcessNextHostState(void)
{
     816:	ef 92       	push	r14
     818:	0f 93       	push	r16
     81a:	1f 93       	push	r17
     81c:	df 93       	push	r29
     81e:	cf 93       	push	r28
     820:	cd b7       	in	r28, 0x3d	; 61
     822:	de b7       	in	r29, 0x3e	; 62
     824:	28 97       	sbiw	r28, 0x08	; 8
     826:	0f b6       	in	r0, 0x3f	; 63
     828:	f8 94       	cli
     82a:	de bf       	out	0x3e, r29	; 62
     82c:	0f be       	out	0x3f, r0	; 63
     82e:	cd bf       	out	0x3d, r28	; 61
	uint8_t SubErrorCode = HOST_ENUMERROR_NoError;

	static uint16_t WaitMSRemaining;
	static uint8_t  PostWaitState;

	switch (USB_HostState)
     830:	80 91 3c 01 	lds	r24, 0x013C
     834:	86 30       	cpi	r24, 0x06	; 6
     836:	09 f4       	brne	.+2      	; 0x83a <USB_Host_ProcessNextHostState+0x24>
     838:	94 c0       	rjmp	.+296    	; 0x962 <USB_Host_ProcessNextHostState+0x14c>
     83a:	87 30       	cpi	r24, 0x07	; 7
     83c:	70 f4       	brcc	.+28     	; 0x85a <USB_Host_ProcessNextHostState+0x44>
     83e:	83 30       	cpi	r24, 0x03	; 3
     840:	c1 f1       	breq	.+112    	; 0x8b2 <USB_Host_ProcessNextHostState+0x9c>
     842:	84 30       	cpi	r24, 0x04	; 4
     844:	20 f4       	brcc	.+8      	; 0x84e <USB_Host_ProcessNextHostState+0x38>
     846:	81 30       	cpi	r24, 0x01	; 1
     848:	09 f0       	breq	.+2      	; 0x84c <USB_Host_ProcessNextHostState+0x36>
     84a:	07 c1       	rjmp	.+526    	; 0xa5a <USB_Host_ProcessNextHostState+0x244>
     84c:	13 c0       	rjmp	.+38     	; 0x874 <USB_Host_ProcessNextHostState+0x5e>
     84e:	84 30       	cpi	r24, 0x04	; 4
     850:	c1 f1       	breq	.+112    	; 0x8c2 <USB_Host_ProcessNextHostState+0xac>
     852:	85 30       	cpi	r24, 0x05	; 5
     854:	09 f0       	breq	.+2      	; 0x858 <USB_Host_ProcessNextHostState+0x42>
     856:	01 c1       	rjmp	.+514    	; 0xa5a <USB_Host_ProcessNextHostState+0x244>
     858:	5b c0       	rjmp	.+182    	; 0x910 <USB_Host_ProcessNextHostState+0xfa>
     85a:	88 30       	cpi	r24, 0x08	; 8
     85c:	09 f4       	brne	.+2      	; 0x860 <USB_Host_ProcessNextHostState+0x4a>
     85e:	9b c0       	rjmp	.+310    	; 0x996 <USB_Host_ProcessNextHostState+0x180>
     860:	88 30       	cpi	r24, 0x08	; 8
     862:	08 f4       	brcc	.+2      	; 0x866 <USB_Host_ProcessNextHostState+0x50>
     864:	8a c0       	rjmp	.+276    	; 0x97a <USB_Host_ProcessNextHostState+0x164>
     866:	89 30       	cpi	r24, 0x09	; 9
     868:	09 f4       	brne	.+2      	; 0x86c <USB_Host_ProcessNextHostState+0x56>
     86a:	b4 c0       	rjmp	.+360    	; 0x9d4 <USB_Host_ProcessNextHostState+0x1be>
     86c:	8a 30       	cpi	r24, 0x0A	; 10
     86e:	09 f0       	breq	.+2      	; 0x872 <USB_Host_ProcessNextHostState+0x5c>
     870:	f4 c0       	rjmp	.+488    	; 0xa5a <USB_Host_ProcessNextHostState+0x244>
     872:	d9 c0       	rjmp	.+434    	; 0xa26 <USB_Host_ProcessNextHostState+0x210>
	{
		case HOST_STATE_WaitForDevice:
			if (WaitMSRemaining)
     874:	00 91 31 01 	lds	r16, 0x0131
     878:	10 91 32 01 	lds	r17, 0x0132
     87c:	01 15       	cp	r16, r1
     87e:	11 05       	cpc	r17, r1
     880:	09 f4       	brne	.+2      	; 0x884 <USB_Host_ProcessNextHostState+0x6e>
     882:	eb c0       	rjmp	.+470    	; 0xa5a <USB_Host_ProcessNextHostState+0x244>
			{
				if ((SubErrorCode = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	18 df       	rcall	.-464    	; 0x6b8 <USB_Host_WaitMS>
     888:	68 2f       	mov	r22, r24
     88a:	88 23       	and	r24, r24
     88c:	31 f0       	breq	.+12     	; 0x89a <USB_Host_ProcessNextHostState+0x84>
				{
					USB_HostState = PostWaitState;
     88e:	80 91 30 01 	lds	r24, 0x0130
     892:	80 93 3c 01 	sts	0x013C, r24
     896:	91 e0       	ldi	r25, 0x01	; 1
     898:	dc c0       	rjmp	.+440    	; 0xa52 <USB_Host_ProcessNextHostState+0x23c>
					ErrorCode     = HOST_ENUMERROR_WaitStage;
					break;
				}

				if (!(--WaitMSRemaining))
     89a:	c8 01       	movw	r24, r16
     89c:	01 97       	sbiw	r24, 0x01	; 1
     89e:	90 93 32 01 	sts	0x0132, r25
     8a2:	80 93 31 01 	sts	0x0131, r24
     8a6:	89 2b       	or	r24, r25
     8a8:	09 f0       	breq	.+2      	; 0x8ac <USB_Host_ProcessNextHostState+0x96>
     8aa:	d7 c0       	rjmp	.+430    	; 0xa5a <USB_Host_ProcessNextHostState+0x244>
				  USB_HostState = PostWaitState;
     8ac:	80 91 30 01 	lds	r24, 0x0130
     8b0:	bf c0       	rjmp	.+382    	; 0xa30 <USB_Host_ProcessNextHostState+0x21a>
			}

			break;
		case HOST_STATE_Powered:
			WaitMSRemaining = HOST_DEVICE_SETTLE_DELAY_MS;
     8b2:	88 ee       	ldi	r24, 0xE8	; 232
     8b4:	93 e0       	ldi	r25, 0x03	; 3
     8b6:	90 93 32 01 	sts	0x0132, r25
     8ba:	80 93 31 01 	sts	0x0131, r24

			USB_HostState = HOST_STATE_Powered_WaitForDeviceSettle;
     8be:	84 e0       	ldi	r24, 0x04	; 4
     8c0:	b7 c0       	rjmp	.+366    	; 0xa30 <USB_Host_ProcessNextHostState+0x21a>
			break;
		case HOST_STATE_Powered_WaitForDeviceSettle:
			if (WaitMSRemaining--)
     8c2:	80 91 31 01 	lds	r24, 0x0131
     8c6:	90 91 32 01 	lds	r25, 0x0132
     8ca:	01 97       	sbiw	r24, 0x01	; 1
     8cc:	90 93 32 01 	sts	0x0132, r25
     8d0:	80 93 31 01 	sts	0x0131, r24
     8d4:	01 96       	adiw	r24, 0x01	; 1
     8d6:	29 f0       	breq	.+10     	; 0x8e2 <USB_Host_ProcessNextHostState+0xcc>
     8d8:	80 ed       	ldi	r24, 0xD0	; 208
     8da:	97 e0       	ldi	r25, 0x07	; 7
     8dc:	01 97       	sbiw	r24, 0x01	; 1
     8de:	f1 f7       	brne	.-4      	; 0x8dc <USB_Host_ProcessNextHostState+0xc6>
     8e0:	bc c0       	rjmp	.+376    	; 0xa5a <USB_Host_ProcessNextHostState+0x244>
			}

			static inline void USB_Host_VBUS_Manual_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Manual_Off(void)
			{
				PORTE  &= ~(1 << 7);
     8e2:	77 98       	cbi	0x0e, 7	; 14

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON  |=  (1 << OTGPADE);
     8e4:	80 91 d8 00 	lds	r24, 0x00D8
     8e8:	80 61       	ori	r24, 0x10	; 16
     8ea:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_Host_VBUS_Auto_Enable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Enable(void)
			{
				OTGCON &= ~(1 << VBUSHWC);
     8ee:	80 91 dd 00 	lds	r24, 0x00DD
     8f2:	8b 7f       	andi	r24, 0xFB	; 251
     8f4:	80 93 dd 00 	sts	0x00DD, r24
				UHWCON |=  (1 << UVCONE);
     8f8:	80 91 d7 00 	lds	r24, 0x00D7
     8fc:	80 61       	ori	r24, 0x10	; 16
     8fe:	80 93 d7 00 	sts	0x00D7, r24
			}

			static inline void USB_Host_VBUS_Auto_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_On(void)
			{
				OTGCON |=  (1 << VBUSREQ);
     902:	80 91 dd 00 	lds	r24, 0x00DD
     906:	82 60       	ori	r24, 0x02	; 2
     908:	80 93 dd 00 	sts	0x00DD, r24

				USB_OTGPAD_On();
				USB_Host_VBUS_Auto_Enable();
				USB_Host_VBUS_Auto_On();

				USB_HostState = HOST_STATE_Powered_WaitForConnect;
     90c:	85 e0       	ldi	r24, 0x05	; 5
     90e:	90 c0       	rjmp	.+288    	; 0xa30 <USB_Host_ProcessNextHostState+0x21a>
			}

			break;
		case HOST_STATE_Powered_WaitForConnect:
			if (USB_INT_HasOccurred(USB_INT_DCONNI))
     910:	80 91 9f 00 	lds	r24, 0x009F
     914:	80 ff       	sbrs	r24, 0
     916:	a1 c0       	rjmp	.+322    	; 0xa5a <USB_Host_ProcessNextHostState+0x244>
			{
				USB_INT_Clear(USB_INT_DCONNI);
     918:	80 91 9f 00 	lds	r24, 0x009F
     91c:	8e 7f       	andi	r24, 0xFE	; 254
     91e:	80 93 9f 00 	sts	0x009F, r24
				USB_INT_Clear(USB_INT_DDISCI);
     922:	80 91 9f 00 	lds	r24, 0x009F
     926:	8d 7f       	andi	r24, 0xFD	; 253
     928:	80 93 9f 00 	sts	0x009F, r24

				USB_INT_Clear(USB_INT_VBERRI);
     92c:	80 91 df 00 	lds	r24, 0x00DF
     930:	8d 7f       	andi	r24, 0xFD	; 253
     932:	80 93 df 00 	sts	0x00DF, r24
				USB_INT_Enable(USB_INT_VBERRI);
     936:	80 91 de 00 	lds	r24, 0x00DE
     93a:	82 60       	ori	r24, 0x02	; 2
     93c:	80 93 de 00 	sts	0x00DE, r24
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
     940:	80 91 9e 00 	lds	r24, 0x009E
     944:	81 60       	ori	r24, 0x01	; 1
     946:	80 93 9e 00 	sts	0x009E, r24

				USB_Host_ResumeBus();
				Pipe_ClearPipes();
     94a:	c9 d0       	rcall	.+402    	; 0xade <Pipe_ClearPipes>

				HOST_TASK_NONBLOCK_WAIT(100, HOST_STATE_Powered_DoReset);
     94c:	81 e0       	ldi	r24, 0x01	; 1
     94e:	80 93 3c 01 	sts	0x013C, r24
     952:	84 e6       	ldi	r24, 0x64	; 100
     954:	90 e0       	ldi	r25, 0x00	; 0
     956:	90 93 32 01 	sts	0x0132, r25
     95a:	80 93 31 01 	sts	0x0131, r24
     95e:	86 e0       	ldi	r24, 0x06	; 6
     960:	5f c0       	rjmp	.+190    	; 0xa20 <USB_Host_ProcessNextHostState+0x20a>
			}

			break;
		case HOST_STATE_Powered_DoReset:
			USB_Host_ResetDevice();
     962:	f7 de       	rcall	.-530    	; 0x752 <USB_Host_ResetDevice>

			HOST_TASK_NONBLOCK_WAIT(200, HOST_STATE_Powered_ConfigPipe);
     964:	81 e0       	ldi	r24, 0x01	; 1
     966:	80 93 3c 01 	sts	0x013C, r24
     96a:	88 ec       	ldi	r24, 0xC8	; 200
     96c:	90 e0       	ldi	r25, 0x00	; 0
     96e:	90 93 32 01 	sts	0x0132, r25
     972:	80 93 31 01 	sts	0x0131, r24
     976:	87 e0       	ldi	r24, 0x07	; 7
     978:	53 c0       	rjmp	.+166    	; 0xa20 <USB_Host_ProcessNextHostState+0x20a>
			break;
		case HOST_STATE_Powered_ConfigPipe:
			Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL,
     97a:	80 e0       	ldi	r24, 0x00	; 0
     97c:	60 e0       	ldi	r22, 0x00	; 0
     97e:	40 e0       	ldi	r20, 0x00	; 0
     980:	20 e0       	ldi	r18, 0x00	; 0
     982:	00 e4       	ldi	r16, 0x40	; 64
     984:	10 e0       	ldi	r17, 0x00	; 0
     986:	ee 24       	eor	r14, r14
     988:	74 d0       	rcall	.+232    	; 0xa72 <Pipe_ConfigurePipe>
			 *  \return Boolean true if the selected pipe is configured, false otherwise.
			 */
			static inline bool Pipe_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsConfigured(void)
			{
				return ((UPSTAX & (1 << CFGOK)) ? true : false);
     98a:	80 91 ac 00 	lds	r24, 0x00AC
							   PIPE_TOKEN_SETUP, ENDPOINT_CONTROLEP,
							   PIPE_CONTROLPIPE_DEFAULT_SIZE, PIPE_BANK_SINGLE);

			if (!(Pipe_IsConfigured()))
     98e:	87 ff       	sbrs	r24, 7
     990:	5e c0       	rjmp	.+188    	; 0xa4e <USB_Host_ProcessNextHostState+0x238>
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
				SubErrorCode = 0;
				break;
			}

			USB_HostState = HOST_STATE_Default;
     992:	88 e0       	ldi	r24, 0x08	; 8
     994:	4d c0       	rjmp	.+154    	; 0xa30 <USB_Host_ProcessNextHostState+0x21a>
			break;
		case HOST_STATE_Default:
			USB_ControlRequest = (USB_Request_Header_t)
     996:	a4 e3       	ldi	r26, 0x34	; 52
     998:	b1 e0       	ldi	r27, 0x01	; 1
     99a:	e8 e1       	ldi	r30, 0x18	; 24
     99c:	f1 e0       	ldi	r31, 0x01	; 1
     99e:	88 e0       	ldi	r24, 0x08	; 8
     9a0:	01 90       	ld	r0, Z+
     9a2:	0d 92       	st	X+, r0
     9a4:	81 50       	subi	r24, 0x01	; 1
     9a6:	e1 f7       	brne	.-8      	; 0x9a0 <USB_Host_ProcessNextHostState+0x18a>
					.wLength       = 8,
				};

			uint8_t DataBuffer[8];

			if ((SubErrorCode = USB_Host_SendControlRequest(DataBuffer)) != HOST_SENDCONTROL_Successful)
     9a8:	ce 01       	movw	r24, r28
     9aa:	01 96       	adiw	r24, 0x01	; 1
     9ac:	ad d2       	rcall	.+1370   	; 0xf08 <USB_Host_SendControlRequest>
     9ae:	68 2f       	mov	r22, r24
     9b0:	88 23       	and	r24, r24
     9b2:	09 f0       	breq	.+2      	; 0x9b6 <USB_Host_ProcessNextHostState+0x1a0>
     9b4:	4a c0       	rjmp	.+148    	; 0xa4a <USB_Host_ProcessNextHostState+0x234>
			{
				ErrorCode = HOST_ENUMERROR_ControlError;
				break;
			}

			USB_ControlPipeSize = DataBuffer[offsetof(USB_Descriptor_Device_t, Endpoint0Size)];
     9b6:	88 85       	ldd	r24, Y+8	; 0x08
     9b8:	80 93 20 01 	sts	0x0120, r24

			USB_Host_ResetDevice();
     9bc:	ca de       	rcall	.-620    	; 0x752 <USB_Host_ResetDevice>

			HOST_TASK_NONBLOCK_WAIT(200, HOST_STATE_Default_PostReset);
     9be:	81 e0       	ldi	r24, 0x01	; 1
     9c0:	80 93 3c 01 	sts	0x013C, r24
     9c4:	88 ec       	ldi	r24, 0xC8	; 200
     9c6:	90 e0       	ldi	r25, 0x00	; 0
     9c8:	90 93 32 01 	sts	0x0132, r25
     9cc:	80 93 31 01 	sts	0x0131, r24
     9d0:	89 e0       	ldi	r24, 0x09	; 9
     9d2:	26 c0       	rjmp	.+76     	; 0xa20 <USB_Host_ProcessNextHostState+0x20a>
			break;
		case HOST_STATE_Default_PostReset:
			Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL,
     9d4:	00 91 20 01 	lds	r16, 0x0120
     9d8:	80 e0       	ldi	r24, 0x00	; 0
     9da:	60 e0       	ldi	r22, 0x00	; 0
     9dc:	40 e0       	ldi	r20, 0x00	; 0
     9de:	20 e0       	ldi	r18, 0x00	; 0
     9e0:	10 e0       	ldi	r17, 0x00	; 0
     9e2:	ee 24       	eor	r14, r14
     9e4:	46 d0       	rcall	.+140    	; 0xa72 <Pipe_ConfigurePipe>
     9e6:	80 91 ac 00 	lds	r24, 0x00AC
			                   PIPE_TOKEN_SETUP, ENDPOINT_CONTROLEP,
			                   USB_ControlPipeSize, PIPE_BANK_SINGLE);

			if (!(Pipe_IsConfigured()))
     9ea:	87 ff       	sbrs	r24, 7
     9ec:	30 c0       	rjmp	.+96     	; 0xa4e <USB_Host_ProcessNextHostState+0x238>
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
				SubErrorCode = 0;
				break;
			}

			USB_ControlRequest = (USB_Request_Header_t)
     9ee:	a4 e3       	ldi	r26, 0x34	; 52
     9f0:	b1 e0       	ldi	r27, 0x01	; 1
     9f2:	e0 e1       	ldi	r30, 0x10	; 16
     9f4:	f1 e0       	ldi	r31, 0x01	; 1
     9f6:	88 e0       	ldi	r24, 0x08	; 8
     9f8:	01 90       	ld	r0, Z+
     9fa:	0d 92       	st	X+, r0
     9fc:	81 50       	subi	r24, 0x01	; 1
     9fe:	e1 f7       	brne	.-8      	; 0x9f8 <USB_Host_ProcessNextHostState+0x1e2>
					.wValue        = USB_HOST_DEVICEADDRESS,
					.wIndex        = 0,
					.wLength       = 0,
				};

			if ((SubErrorCode = USB_Host_SendControlRequest(NULL)) != HOST_SENDCONTROL_Successful)
     a00:	80 e0       	ldi	r24, 0x00	; 0
     a02:	90 e0       	ldi	r25, 0x00	; 0
     a04:	81 d2       	rcall	.+1282   	; 0xf08 <USB_Host_SendControlRequest>
     a06:	68 2f       	mov	r22, r24
     a08:	88 23       	and	r24, r24
     a0a:	f9 f4       	brne	.+62     	; 0xa4a <USB_Host_ProcessNextHostState+0x234>
			{
				ErrorCode = HOST_ENUMERROR_ControlError;
				break;
			}

			HOST_TASK_NONBLOCK_WAIT(100, HOST_STATE_Default_PostAddressSet);
     a0c:	81 e0       	ldi	r24, 0x01	; 1
     a0e:	80 93 3c 01 	sts	0x013C, r24
     a12:	84 e6       	ldi	r24, 0x64	; 100
     a14:	90 e0       	ldi	r25, 0x00	; 0
     a16:	90 93 32 01 	sts	0x0132, r25
     a1a:	80 93 31 01 	sts	0x0131, r24
     a1e:	8a e0       	ldi	r24, 0x0A	; 10
     a20:	80 93 30 01 	sts	0x0130, r24
     a24:	1a c0       	rjmp	.+52     	; 0xa5a <USB_Host_ProcessNextHostState+0x244>
			}

			static inline void USB_Host_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SetDeviceAddress(const uint8_t Address)
			{
				UHADDR  =  (Address & 0x7F);
     a26:	81 e0       	ldi	r24, 0x01	; 1
     a28:	80 93 a1 00 	sts	0x00A1, r24
			break;
		case HOST_STATE_Default_PostAddressSet:
			USB_Host_SetDeviceAddress(USB_HOST_DEVICEADDRESS);

			EVENT_USB_Host_DeviceEnumerationComplete();
     a2c:	50 dc       	rcall	.-1888   	; 0x2ce <EVENT_USB_Host_DeviceEnumerationComplete>
			USB_HostState = HOST_STATE_Addressed;
     a2e:	8b e0       	ldi	r24, 0x0B	; 11
     a30:	80 93 3c 01 	sts	0x013C, r24
     a34:	12 c0       	rjmp	.+36     	; 0xa5a <USB_Host_ProcessNextHostState+0x244>
			break;
	}

	if ((ErrorCode != HOST_ENUMERROR_NoError) && (USB_HostState != HOST_STATE_Unattached))
	{
		EVENT_USB_Host_DeviceEnumerationFailed(ErrorCode, SubErrorCode);
     a36:	89 2f       	mov	r24, r25
     a38:	5f dc       	rcall	.-1858   	; 0x2f8 <EVENT_USB_Host_DeviceEnumerationFailed>
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
     a3a:	80 91 dd 00 	lds	r24, 0x00DD
     a3e:	81 60       	ori	r24, 0x01	; 1
     a40:	80 93 dd 00 	sts	0x00DD, r24

		USB_Host_VBUS_Auto_Off();

		EVENT_USB_Host_DeviceUnattached();
     a44:	49 dc       	rcall	.-1902   	; 0x2d8 <EVENT_USB_Host_DeviceUnattached>

		USB_ResetInterface();
     a46:	8c d0       	rcall	.+280    	; 0xb60 <USB_ResetInterface>
     a48:	08 c0       	rjmp	.+16     	; 0xa5a <USB_Host_ProcessNextHostState+0x244>
	}
}
     a4a:	93 e0       	ldi	r25, 0x03	; 3
     a4c:	02 c0       	rjmp	.+4      	; 0xa52 <USB_Host_ProcessNextHostState+0x23c>
     a4e:	94 e0       	ldi	r25, 0x04	; 4
     a50:	60 e0       	ldi	r22, 0x00	; 0
			EVENT_USB_Host_DeviceEnumerationComplete();
			USB_HostState = HOST_STATE_Addressed;
			break;
	}

	if ((ErrorCode != HOST_ENUMERROR_NoError) && (USB_HostState != HOST_STATE_Unattached))
     a52:	80 91 3c 01 	lds	r24, 0x013C
     a56:	82 30       	cpi	r24, 0x02	; 2
     a58:	71 f7       	brne	.-36     	; 0xa36 <USB_Host_ProcessNextHostState+0x220>

		EVENT_USB_Host_DeviceUnattached();

		USB_ResetInterface();
	}
}
     a5a:	28 96       	adiw	r28, 0x08	; 8
     a5c:	0f b6       	in	r0, 0x3f	; 63
     a5e:	f8 94       	cli
     a60:	de bf       	out	0x3e, r29	; 62
     a62:	0f be       	out	0x3f, r0	; 63
     a64:	cd bf       	out	0x3d, r28	; 61
     a66:	cf 91       	pop	r28
     a68:	df 91       	pop	r29
     a6a:	1f 91       	pop	r17
     a6c:	0f 91       	pop	r16
     a6e:	ef 90       	pop	r14
     a70:	08 95       	ret

00000a72 <Pipe_ConfigurePipe>:
                        const uint8_t Type,
                        const uint8_t Token,
                        const uint8_t EndpointNumber,
                        const uint16_t Size,
                        const uint8_t Banks)
{
     a72:	ef 92       	push	r14
     a74:	0f 93       	push	r16
     a76:	1f 93       	push	r17
     a78:	9e 2d       	mov	r25, r14
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
     a7a:	80 93 a7 00 	sts	0x00A7, r24
			 *  \pre The currently selected pipe must first be configured properly via \ref Pipe_ConfigurePipe().
			 */
			static inline void Pipe_EnablePipe(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_EnablePipe(void)
			{
				UPCONX |= (1 << PEN);
     a7e:	80 91 a9 00 	lds	r24, 0x00A9
     a82:	81 60       	ori	r24, 0x01	; 1
     a84:	80 93 a9 00 	sts	0x00A9, r24
	Pipe_SelectPipe(Number);
	Pipe_EnablePipe();

	UPCFG1X = 0;
     a88:	10 92 ab 00 	sts	0x00AB, r1

	UPCFG0X = ((Type << EPTYPE0) | Token | ((EndpointNumber & PIPE_EPNUM_MASK) << PEPNUM0));
     a8c:	62 95       	swap	r22
     a8e:	66 0f       	add	r22, r22
     a90:	66 0f       	add	r22, r22
     a92:	60 7c       	andi	r22, 0xC0	; 192
     a94:	64 2b       	or	r22, r20
     a96:	2f 70       	andi	r18, 0x0F	; 15
     a98:	62 2b       	or	r22, r18
     a9a:	60 93 aa 00 	sts	0x00AA, r22
     a9e:	28 e0       	ldi	r18, 0x08	; 8
     aa0:	30 e0       	ldi	r19, 0x00	; 0
     aa2:	80 e0       	ldi	r24, 0x00	; 0
     aa4:	03 c0       	rjmp	.+6      	; 0xaac <Pipe_ConfigurePipe+0x3a>
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while ((CheckBytes < Bytes) && (CheckBytes < PIPE_MAX_SIZE))
				{
					MaskVal++;
     aa6:	8f 5f       	subi	r24, 0xFF	; 255
					CheckBytes <<= 1;
     aa8:	22 0f       	add	r18, r18
     aaa:	33 1f       	adc	r19, r19
			static inline uint8_t Pipe_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while ((CheckBytes < Bytes) && (CheckBytes < PIPE_MAX_SIZE))
     aac:	20 17       	cp	r18, r16
     aae:	31 07       	cpc	r19, r17
     ab0:	10 f4       	brcc	.+4      	; 0xab6 <Pipe_ConfigurePipe+0x44>
     ab2:	85 30       	cpi	r24, 0x05	; 5
     ab4:	c1 f7       	brne	.-16     	; 0xaa6 <Pipe_ConfigurePipe+0x34>
	UPCFG1X = ((1 << ALLOC) | Banks | Pipe_BytesToEPSizeMask(Size));
     ab6:	92 60       	ori	r25, 0x02	; 2
     ab8:	82 95       	swap	r24
     aba:	80 7f       	andi	r24, 0xF0	; 240
     abc:	89 2b       	or	r24, r25
     abe:	80 93 ab 00 	sts	0x00AB, r24

			/** Configures the currently selected pipe to allow for an unlimited number of IN requests. */
			static inline void Pipe_SetInfiniteINRequests(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetInfiniteINRequests(void)
			{
				UPCONX |= (1 << INMODE);
     ac2:	80 91 a9 00 	lds	r24, 0x00A9
     ac6:	80 62       	ori	r24, 0x20	; 32
     ac8:	80 93 a9 00 	sts	0x00A9, r24
			 *  \return Boolean true if the selected pipe is configured, false otherwise.
			 */
			static inline bool Pipe_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsConfigured(void)
			{
				return ((UPSTAX & (1 << CFGOK)) ? true : false);
     acc:	80 91 ac 00 	lds	r24, 0x00AC

	Pipe_SetInfiniteINRequests();

	return Pipe_IsConfigured();
}
     ad0:	88 1f       	adc	r24, r24
     ad2:	88 27       	eor	r24, r24
     ad4:	88 1f       	adc	r24, r24
     ad6:	1f 91       	pop	r17
     ad8:	0f 91       	pop	r16
     ada:	ef 90       	pop	r14
     adc:	08 95       	ret

00000ade <Pipe_ClearPipes>:

void Pipe_ClearPipes(void)
{
	UPINT = 0;
     ade:	10 92 f8 00 	sts	0x00F8, r1
     ae2:	90 e0       	ldi	r25, 0x00	; 0
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
     ae4:	90 93 a7 00 	sts	0x00A7, r25

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
	{
		Pipe_SelectPipe(PNum);
		UPIENX  = 0;
     ae8:	10 92 ae 00 	sts	0x00AE, r1
		UPINTX  = 0;
     aec:	10 92 a6 00 	sts	0x00A6, r1
		UPCFG1X = 0;
     af0:	10 92 ab 00 	sts	0x00AB, r1
			 *  from an attached device.
			 */
			static inline void Pipe_DisablePipe(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_DisablePipe(void)
			{
				UPCONX &= ~(1 << PEN);
     af4:	80 91 a9 00 	lds	r24, 0x00A9
     af8:	8e 7f       	andi	r24, 0xFE	; 254
     afa:	80 93 a9 00 	sts	0x00A9, r24

void Pipe_ClearPipes(void)
{
	UPINT = 0;

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
     afe:	9f 5f       	subi	r25, 0xFF	; 255
     b00:	97 30       	cpi	r25, 0x07	; 7
     b02:	81 f7       	brne	.-32     	; 0xae4 <Pipe_ClearPipes+0x6>
		UPIENX  = 0;
		UPINTX  = 0;
		UPCFG1X = 0;
		Pipe_DisablePipe();
	}
}
     b04:	08 95       	ret

00000b06 <Pipe_WaitUntilReady>:
			/** Returns the current USB frame number, when in host mode. Every millisecond the USB bus is active (i.e. not suspended)
			 *  the frame number is incremented by one.
			 */
			static inline uint16_t USB_Host_GetFrameNumber(void)
			{
				return UHFNUM;
     b06:	40 91 a2 00 	lds	r20, 0x00A2
     b0a:	50 91 a3 00 	lds	r21, 0x00A3
     b0e:	24 e6       	ldi	r18, 0x64	; 100
			 *  \return The current pipe token, as a PIPE_TOKEN_* mask.
			 */
			static inline uint8_t Pipe_GetPipeToken(void) ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetPipeToken(void)
			{
				return (UPCFG0X & (0x03 << PTOKEN0));
     b10:	80 91 aa 00 	lds	r24, 0x00AA

	uint16_t PreviousFrameNumber = USB_Host_GetFrameNumber();

	for (;;)
	{
		if (Pipe_GetPipeToken() == PIPE_TOKEN_IN)
     b14:	80 73       	andi	r24, 0x30	; 48
     b16:	80 31       	cpi	r24, 0x10	; 16
     b18:	29 f4       	brne	.+10     	; 0xb24 <Pipe_WaitUntilReady+0x1e>
			 *  \return Boolean true if the current pipe has received an IN packet, false otherwise.
			 */
			static inline bool Pipe_IsINReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsINReceived(void)
			{
				return ((UPINTX & (1 << RXINI)) ? true : false);
     b1a:	80 91 a6 00 	lds	r24, 0x00A6
		{
			if (Pipe_IsINReceived())
     b1e:	80 ff       	sbrs	r24, 0
     b20:	05 c0       	rjmp	.+10     	; 0xb2c <Pipe_WaitUntilReady+0x26>
     b22:	1c c0       	rjmp	.+56     	; 0xb5c <Pipe_WaitUntilReady+0x56>
			 *  \return Boolean true if the current pipe is ready for an OUT packet, false otherwise.
			 */
			static inline bool Pipe_IsOUTReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsOUTReady(void)
			{
				return ((UPINTX & (1 << TXOUTI)) ? true : false);
     b24:	80 91 a6 00 	lds	r24, 0x00A6
			  return PIPE_READYWAIT_NoError;
		}
		else
		{
			if (Pipe_IsOUTReady())
     b28:	82 fd       	sbrc	r24, 2
     b2a:	18 c0       	rjmp	.+48     	; 0xb5c <Pipe_WaitUntilReady+0x56>
			 *  \return Boolean true if the current pipe has been stalled by the attached device, false otherwise.
			 */
			static inline bool Pipe_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsStalled(void)
			{
				return ((UPINTX & (1 << RXSTALLI)) ? true : false);
     b2c:	80 91 a6 00 	lds	r24, 0x00A6
			  return PIPE_READYWAIT_NoError;
		}

		if (Pipe_IsStalled())
     b30:	81 ff       	sbrs	r24, 1
     b32:	02 c0       	rjmp	.+4      	; 0xb38 <Pipe_WaitUntilReady+0x32>
     b34:	81 e0       	ldi	r24, 0x01	; 1
     b36:	08 95       	ret
		  return PIPE_READYWAIT_PipeStalled;
		else if (USB_HostState == HOST_STATE_Unattached)
     b38:	80 91 3c 01 	lds	r24, 0x013C
     b3c:	82 30       	cpi	r24, 0x02	; 2
     b3e:	79 f0       	breq	.+30     	; 0xb5e <Pipe_WaitUntilReady+0x58>
     b40:	80 91 a2 00 	lds	r24, 0x00A2
     b44:	90 91 a3 00 	lds	r25, 0x00A3
		  return PIPE_READYWAIT_DeviceDisconnected;

		uint16_t CurrentFrameNumber = USB_Host_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
     b48:	84 17       	cp	r24, r20
     b4a:	95 07       	cpc	r25, r21
     b4c:	09 f3       	breq	.-62     	; 0xb10 <Pipe_WaitUntilReady+0xa>
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
     b4e:	22 23       	and	r18, r18
     b50:	11 f4       	brne	.+4      	; 0xb56 <Pipe_WaitUntilReady+0x50>
     b52:	83 e0       	ldi	r24, 0x03	; 3
     b54:	08 95       	ret
     b56:	21 50       	subi	r18, 0x01	; 1
     b58:	ac 01       	movw	r20, r24
     b5a:	da cf       	rjmp	.-76     	; 0xb10 <Pipe_WaitUntilReady+0xa>
     b5c:	80 e0       	ldi	r24, 0x00	; 0
			  return PIPE_READYWAIT_Timeout;
		}
	}
}
     b5e:	08 95       	ret

00000b60 <USB_ResetInterface>:
{
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
     b60:	6e d0       	rcall	.+220    	; 0xc3e <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
     b62:	75 d0       	rcall	.+234    	; 0xc4e <USB_INT_ClearAllInterrupts>
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				const uint8_t Temp = USBCON;
     b64:	80 91 d8 00 	lds	r24, 0x00D8

				USBCON = (Temp & ~(1 << USBE));
     b68:	98 2f       	mov	r25, r24
     b6a:	9f 77       	andi	r25, 0x7F	; 127
     b6c:	90 93 d8 00 	sts	0x00D8, r25
				USBCON = (Temp |  (1 << USBE));
     b70:	80 68       	ori	r24, 0x80	; 128
     b72:	80 93 d8 00 	sts	0x00D8, r24

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR  = USB_PLL_PSC;
     b76:	8c e0       	ldi	r24, 0x0C	; 12
     b78:	89 bd       	out	0x29, r24	; 41
				PLLCSR |= (1 << PLLE);
     b7a:	89 b5       	in	r24, 0x29	; 41
     b7c:	82 60       	ori	r24, 0x02	; 2
     b7e:	89 bd       	out	0x29, r24	; 41
		#if defined(USB_SERIES_4_AVR)
		PLLFRQ = ((1 << PLLUSB) | (1 << PDIV3) | (1 << PDIV1));
		#endif

		USB_PLL_On();
		while (!(USB_PLL_IsReady()));
     b80:	09 b4       	in	r0, 0x29	; 41
     b82:	00 fe       	sbrs	r0, 0
     b84:	fd cf       	rjmp	.-6      	; 0xb80 <USB_ResetInterface+0x20>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON  &= ~(1 << FRZCLK);
     b86:	80 91 d8 00 	lds	r24, 0x00D8
     b8a:	8f 7d       	andi	r24, 0xDF	; 223
     b8c:	80 93 d8 00 	sts	0x00D8, r24
		#endif
	}
	else if (USB_CurrentMode == USB_MODE_Host)
	{
		#if defined(USB_CAN_BE_HOST)
		UHWCON &= ~(1 << UIMOD);
     b90:	80 91 d7 00 	lds	r24, 0x00D7
     b94:	8f 77       	andi	r24, 0x7F	; 127
     b96:	80 93 d7 00 	sts	0x00D7, r24
#endif

#if defined(USB_CAN_BE_HOST)
static void USB_Init_Host(void)
{
	USB_HostState       = HOST_STATE_Unattached;
     b9a:	82 e0       	ldi	r24, 0x02	; 2
     b9c:	80 93 3c 01 	sts	0x013C, r24
	USB_ControlPipeSize = PIPE_CONTROLPIPE_DEFAULT_SIZE;
     ba0:	80 e4       	ldi	r24, 0x40	; 64
     ba2:	80 93 20 01 	sts	0x0120, r24
	#if !defined(__DOXYGEN__)
		/* Macros: */
			static inline void USB_Host_HostMode_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_HostMode_On(void)
			{
				USBCON |=  (1 << HOST);
     ba6:	80 91 d8 00 	lds	r24, 0x00D8
     baa:	80 64       	ori	r24, 0x40	; 64
     bac:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
     bb0:	80 91 dd 00 	lds	r24, 0x00DD
     bb4:	81 60       	ori	r24, 0x01	; 1
     bb6:	80 93 dd 00 	sts	0x00DD, r24
			}

			static inline void USB_Host_VBUS_Manual_Enable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Manual_Enable(void)
			{
				OTGCON |=  (1 << VBUSHWC);
     bba:	80 91 dd 00 	lds	r24, 0x00DD
     bbe:	84 60       	ori	r24, 0x04	; 4
     bc0:	80 93 dd 00 	sts	0x00DD, r24
				UHWCON &= ~(1 << UVCONE);
     bc4:	80 91 d7 00 	lds	r24, 0x00D7
     bc8:	8f 7e       	andi	r24, 0xEF	; 239
     bca:	80 93 d7 00 	sts	0x00D7, r24

				DDRE   |=  (1 << 7);
     bce:	6f 9a       	sbi	0x0d, 7	; 13
			}

			static inline void USB_Host_VBUS_Manual_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Manual_On(void)
			{
				PORTE  |=  (1 << 7);
     bd0:	77 9a       	sbi	0x0e, 7	; 14

	USB_Host_VBUS_Auto_Off();
	USB_Host_VBUS_Manual_Enable();
	USB_Host_VBUS_Manual_On();

	USB_INT_Enable(USB_INT_SRPI);
     bd2:	80 91 de 00 	lds	r24, 0x00DE
     bd6:	81 60       	ori	r24, 0x01	; 1
     bd8:	80 93 de 00 	sts	0x00DE, r24
	USB_INT_Enable(USB_INT_BCERRI);
     bdc:	80 91 de 00 	lds	r24, 0x00DE
     be0:	84 60       	ori	r24, 0x04	; 4
     be2:	80 93 de 00 	sts	0x00DE, r24
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
     be6:	80 91 e0 00 	lds	r24, 0x00E0
     bea:	8e 7f       	andi	r24, 0xFE	; 254
     bec:	80 93 e0 00 	sts	0x00E0, r24

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON  |=  (1 << OTGPADE);
     bf0:	80 91 d8 00 	lds	r24, 0x00D8
     bf4:	80 61       	ori	r24, 0x10	; 16
     bf6:	80 93 d8 00 	sts	0x00D8, r24
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
     bfa:	08 95       	ret

00000bfc <USB_Init>:

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON  |=  (1 << UVREGE);
     bfc:	e7 ed       	ldi	r30, 0xD7	; 215
     bfe:	f0 e0       	ldi	r31, 0x00	; 0
     c00:	80 81       	ld	r24, Z
     c02:	81 60       	ori	r24, 0x01	; 1
     c04:	80 83       	st	Z, r24
	{
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
     c06:	81 e0       	ldi	r24, 0x01	; 1
     c08:	80 93 33 01 	sts	0x0133, r24

	USB_ResetInterface();
}
     c0c:	a9 cf       	rjmp	.-174    	; 0xb60 <USB_ResetInterface>

00000c0e <USB_ShutDown>:

void USB_ShutDown(void)
{
	USB_INT_DisableAllInterrupts();
     c0e:	17 d0       	rcall	.+46     	; 0xc3e <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
     c10:	1e d0       	rcall	.+60     	; 0xc4e <USB_INT_ClearAllInterrupts>
			 *  enumerating the device once attached until \ref USB_Attach() is called.
			 */
			static inline void USB_Detach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Detach(void)
			{
				UDCON  |=  (1 << DETACH);
     c12:	e0 ee       	ldi	r30, 0xE0	; 224
     c14:	f0 e0       	ldi	r31, 0x00	; 0
     c16:	80 81       	ld	r24, Z
     c18:	81 60       	ori	r24, 0x01	; 1
     c1a:	80 83       	st	Z, r24
			}

			static inline void USB_Controller_Disable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Disable(void)
			{
				USBCON  &= ~(1 << USBE);
     c1c:	a8 ed       	ldi	r26, 0xD8	; 216
     c1e:	b0 e0       	ldi	r27, 0x00	; 0
     c20:	8c 91       	ld	r24, X
     c22:	8f 77       	andi	r24, 0x7F	; 127
     c24:	8c 93       	st	X, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR  = 0;
     c26:	19 bc       	out	0x29, r1	; 41

			static inline void USB_REG_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_Off(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON  &= ~(1 << UVREGE);
     c28:	e7 ed       	ldi	r30, 0xD7	; 215
     c2a:	f0 e0       	ldi	r31, 0x00	; 0
     c2c:	80 81       	ld	r24, Z
     c2e:	8e 7f       	andi	r24, 0xFE	; 254
     c30:	80 83       	st	Z, r24
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON  &= ~(1 << OTGPADE);
     c32:	8c 91       	ld	r24, X
     c34:	8f 7e       	andi	r24, 0xEF	; 239
     c36:	8c 93       	st	X, r24

	#if defined(USB_CAN_BE_BOTH)
	USB_CurrentMode = USB_MODE_None;
	#endif

	USB_IsInitialized = false;
     c38:	10 92 33 01 	sts	0x0133, r1
}
     c3c:	08 95       	ret

00000c3e <USB_INT_DisableAllInterrupts>:
#include "USBInterrupt.h"

void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
     c3e:	e8 ed       	ldi	r30, 0xD8	; 216
     c40:	f0 e0       	ldi	r31, 0x00	; 0
     c42:	80 81       	ld	r24, Z
     c44:	8c 7f       	andi	r24, 0xFC	; 252
     c46:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_BOTH)
	OTGIEN  = 0;
	#endif

	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
     c48:	10 92 a0 00 	sts	0x00A0, r1
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
	#endif
}
     c4c:	08 95       	ret

00000c4e <USB_INT_ClearAllInterrupts>:

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT  = 0;
     c4e:	10 92 da 00 	sts	0x00DA, r1
	#if defined(USB_CAN_BE_BOTH)
	OTGINT  = 0;
	#endif

	#if defined(USB_CAN_BE_HOST)
	UHINT   = 0;
     c52:	10 92 9f 00 	sts	0x009F, r1
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT   = 0;
	#endif
}
     c56:	08 95       	ret

00000c58 <__vector_10>:

ISR(USB_GEN_vect, ISR_BLOCK)
{
     c58:	1f 92       	push	r1
     c5a:	0f 92       	push	r0
     c5c:	0f b6       	in	r0, 0x3f	; 63
     c5e:	0f 92       	push	r0
     c60:	0b b6       	in	r0, 0x3b	; 59
     c62:	0f 92       	push	r0
     c64:	11 24       	eor	r1, r1
     c66:	2f 93       	push	r18
     c68:	3f 93       	push	r19
     c6a:	4f 93       	push	r20
     c6c:	5f 93       	push	r21
     c6e:	6f 93       	push	r22
     c70:	7f 93       	push	r23
     c72:	8f 93       	push	r24
     c74:	9f 93       	push	r25
     c76:	af 93       	push	r26
     c78:	bf 93       	push	r27
     c7a:	ef 93       	push	r30
     c7c:	ff 93       	push	r31
	}
	#endif
	#endif

	#if defined(USB_CAN_BE_HOST)
	if (USB_INT_HasOccurred(USB_INT_DDISCI) && USB_INT_IsEnabled(USB_INT_DDISCI))
     c7e:	80 91 9f 00 	lds	r24, 0x009F
     c82:	81 ff       	sbrs	r24, 1
     c84:	15 c0       	rjmp	.+42     	; 0xcb0 <__vector_10+0x58>
     c86:	80 91 a0 00 	lds	r24, 0x00A0
     c8a:	81 ff       	sbrs	r24, 1
     c8c:	11 c0       	rjmp	.+34     	; 0xcb0 <__vector_10+0x58>
	{
		USB_INT_Clear(USB_INT_DDISCI);
     c8e:	80 91 9f 00 	lds	r24, 0x009F
     c92:	8d 7f       	andi	r24, 0xFD	; 253
     c94:	80 93 9f 00 	sts	0x009F, r24
		USB_INT_Clear(USB_INT_DCONNI);
     c98:	80 91 9f 00 	lds	r24, 0x009F
     c9c:	8e 7f       	andi	r24, 0xFE	; 254
     c9e:	80 93 9f 00 	sts	0x009F, r24
		USB_INT_Disable(USB_INT_DDISCI);
     ca2:	80 91 a0 00 	lds	r24, 0x00A0
     ca6:	8d 7f       	andi	r24, 0xFD	; 253
     ca8:	80 93 a0 00 	sts	0x00A0, r24

		EVENT_USB_Host_DeviceUnattached();
     cac:	15 db       	rcall	.-2518   	; 0x2d8 <EVENT_USB_Host_DeviceUnattached>

		USB_ResetInterface();
     cae:	58 df       	rcall	.-336    	; 0xb60 <USB_ResetInterface>
	}

	if (USB_INT_HasOccurred(USB_INT_VBERRI) && USB_INT_IsEnabled(USB_INT_VBERRI))
     cb0:	80 91 df 00 	lds	r24, 0x00DF
     cb4:	81 ff       	sbrs	r24, 1
     cb6:	15 c0       	rjmp	.+42     	; 0xce2 <__vector_10+0x8a>
     cb8:	80 91 de 00 	lds	r24, 0x00DE
     cbc:	81 ff       	sbrs	r24, 1
     cbe:	11 c0       	rjmp	.+34     	; 0xce2 <__vector_10+0x8a>
	{
		USB_INT_Clear(USB_INT_VBERRI);
     cc0:	80 91 df 00 	lds	r24, 0x00DF
     cc4:	8d 7f       	andi	r24, 0xFD	; 253
     cc6:	80 93 df 00 	sts	0x00DF, r24
			}

			static inline void USB_Host_VBUS_Manual_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Manual_Off(void)
			{
				PORTE  &= ~(1 << 7);
     cca:	77 98       	cbi	0x0e, 7	; 14
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
     ccc:	80 91 dd 00 	lds	r24, 0x00DD
     cd0:	81 60       	ori	r24, 0x01	; 1
     cd2:	80 93 dd 00 	sts	0x00DD, r24

		USB_Host_VBUS_Manual_Off();
		USB_Host_VBUS_Auto_Off();

		EVENT_USB_Host_HostError(HOST_ERROR_VBusVoltageDip);
     cd6:	80 e0       	ldi	r24, 0x00	; 0
     cd8:	04 dc       	rcall	.-2040   	; 0x4e2 <EVENT_USB_Host_HostError>
		EVENT_USB_Host_DeviceUnattached();
     cda:	fe da       	rcall	.-2564   	; 0x2d8 <EVENT_USB_Host_DeviceUnattached>

		USB_HostState = HOST_STATE_Unattached;
     cdc:	82 e0       	ldi	r24, 0x02	; 2
     cde:	80 93 3c 01 	sts	0x013C, r24
	}

	if (USB_INT_HasOccurred(USB_INT_SRPI) && USB_INT_IsEnabled(USB_INT_SRPI))
     ce2:	80 91 df 00 	lds	r24, 0x00DF
     ce6:	80 ff       	sbrs	r24, 0
     ce8:	17 c0       	rjmp	.+46     	; 0xd18 <__vector_10+0xc0>
     cea:	80 91 de 00 	lds	r24, 0x00DE
     cee:	80 ff       	sbrs	r24, 0
     cf0:	13 c0       	rjmp	.+38     	; 0xd18 <__vector_10+0xc0>
	{
		USB_INT_Clear(USB_INT_SRPI);
     cf2:	80 91 df 00 	lds	r24, 0x00DF
     cf6:	8e 7f       	andi	r24, 0xFE	; 254
     cf8:	80 93 df 00 	sts	0x00DF, r24
		USB_INT_Disable(USB_INT_SRPI);
     cfc:	80 91 de 00 	lds	r24, 0x00DE
     d00:	8e 7f       	andi	r24, 0xFE	; 254
     d02:	80 93 de 00 	sts	0x00DE, r24

		EVENT_USB_Host_DeviceAttached();
     d06:	f0 da       	rcall	.-2592   	; 0x2e8 <EVENT_USB_Host_DeviceAttached>

		USB_INT_Enable(USB_INT_DDISCI);
     d08:	80 91 a0 00 	lds	r24, 0x00A0
     d0c:	82 60       	ori	r24, 0x02	; 2
     d0e:	80 93 a0 00 	sts	0x00A0, r24

		USB_HostState = HOST_STATE_Powered;
     d12:	83 e0       	ldi	r24, 0x03	; 3
     d14:	80 93 3c 01 	sts	0x013C, r24
	}

	if (USB_INT_HasOccurred(USB_INT_BCERRI) && USB_INT_IsEnabled(USB_INT_BCERRI))
     d18:	80 91 df 00 	lds	r24, 0x00DF
     d1c:	82 ff       	sbrs	r24, 2
     d1e:	0e c0       	rjmp	.+28     	; 0xd3c <__vector_10+0xe4>
     d20:	80 91 de 00 	lds	r24, 0x00DE
     d24:	82 ff       	sbrs	r24, 2
     d26:	0a c0       	rjmp	.+20     	; 0xd3c <__vector_10+0xe4>
	{
		USB_INT_Clear(USB_INT_BCERRI);
     d28:	80 91 df 00 	lds	r24, 0x00DF
     d2c:	8b 7f       	andi	r24, 0xFB	; 251
     d2e:	80 93 df 00 	sts	0x00DF, r24

		EVENT_USB_Host_DeviceEnumerationFailed(HOST_ENUMERROR_NoDeviceDetected, 0);
     d32:	82 e0       	ldi	r24, 0x02	; 2
     d34:	60 e0       	ldi	r22, 0x00	; 0
     d36:	e0 da       	rcall	.-2624   	; 0x2f8 <EVENT_USB_Host_DeviceEnumerationFailed>
		EVENT_USB_Host_DeviceUnattached();
     d38:	cf da       	rcall	.-2658   	; 0x2d8 <EVENT_USB_Host_DeviceUnattached>

		USB_ResetInterface();
     d3a:	12 df       	rcall	.-476    	; 0xb60 <USB_ResetInterface>
	}

	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_HSOFI) && USB_INT_IsEnabled(USB_INT_HSOFI))
     d3c:	80 91 9f 00 	lds	r24, 0x009F
     d40:	85 ff       	sbrs	r24, 5
     d42:	0a c0       	rjmp	.+20     	; 0xd58 <__vector_10+0x100>
     d44:	80 91 a0 00 	lds	r24, 0x00A0
     d48:	85 ff       	sbrs	r24, 5
     d4a:	06 c0       	rjmp	.+12     	; 0xd58 <__vector_10+0x100>
	{
		USB_INT_Clear(USB_INT_HSOFI);
     d4c:	80 91 9f 00 	lds	r24, 0x009F
     d50:	8f 7d       	andi	r24, 0xDF	; 223
     d52:	80 93 9f 00 	sts	0x009F, r24

		EVENT_USB_Host_StartOfFrame();
     d56:	ae d0       	rcall	.+348    	; 0xeb4 <USB_Event_Stub>
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
     d58:	ff 91       	pop	r31
     d5a:	ef 91       	pop	r30
     d5c:	bf 91       	pop	r27
     d5e:	af 91       	pop	r26
     d60:	9f 91       	pop	r25
     d62:	8f 91       	pop	r24
     d64:	7f 91       	pop	r23
     d66:	6f 91       	pop	r22
     d68:	5f 91       	pop	r21
     d6a:	4f 91       	pop	r20
     d6c:	3f 91       	pop	r19
     d6e:	2f 91       	pop	r18
     d70:	0f 90       	pop	r0
     d72:	0b be       	out	0x3b, r0	; 59
     d74:	0f 90       	pop	r0
     d76:	0f be       	out	0x3f, r0	; 63
     d78:	0f 90       	pop	r0
     d7a:	1f 90       	pop	r1
     d7c:	18 95       	reti

00000d7e <USB_GetNextDescriptorComp>:

uint8_t USB_GetNextDescriptorComp(uint16_t* const BytesRem, void** const CurrConfigLoc, ConfigComparatorPtr_t const ComparatorRoutine)
{
     d7e:	af 92       	push	r10
     d80:	bf 92       	push	r11
     d82:	cf 92       	push	r12
     d84:	df 92       	push	r13
     d86:	ef 92       	push	r14
     d88:	ff 92       	push	r15
     d8a:	0f 93       	push	r16
     d8c:	1f 93       	push	r17
     d8e:	cf 93       	push	r28
     d90:	df 93       	push	r29
     d92:	7c 01       	movw	r14, r24
     d94:	8b 01       	movw	r16, r22
     d96:	5a 01       	movw	r10, r20
     d98:	21 c0       	rjmp	.+66     	; 0xddc <USB_GetNextDescriptorComp+0x5e>
	uint8_t ErrorCode;

	while (*BytesRem)
	{
		uint8_t* PrevDescLoc  = *CurrConfigLoc;
     d9a:	f8 01       	movw	r30, r16
     d9c:	c0 81       	ld	r28, Z
     d9e:	d1 81       	ldd	r29, Z+1	; 0x01
			static inline void USB_GetNextDescriptor(uint16_t* const BytesRem,
			                                         void** CurrConfigLoc) ATTR_NON_NULL_PTR_ARG(1) ATTR_NON_NULL_PTR_ARG(2);
			static inline void USB_GetNextDescriptor(uint16_t* const BytesRem,
			                                         void** CurrConfigLoc)
			{
				uint16_t CurrDescriptorSize = DESCRIPTOR_CAST(*CurrConfigLoc, USB_Descriptor_Header_t).Size;
     da0:	88 81       	ld	r24, Y
     da2:	90 e0       	ldi	r25, 0x00	; 0

				*CurrConfigLoc  = ((uint8_t*)*CurrConfigLoc) + CurrDescriptorSize;
     da4:	9e 01       	movw	r18, r28
     da6:	28 0f       	add	r18, r24
     da8:	39 1f       	adc	r19, r25
     daa:	31 83       	std	Z+1, r19	; 0x01
     dac:	20 83       	st	Z, r18
				*BytesRem      -= CurrDescriptorSize;
     dae:	f7 01       	movw	r30, r14
     db0:	20 81       	ld	r18, Z
     db2:	31 81       	ldd	r19, Z+1	; 0x01
     db4:	28 1b       	sub	r18, r24
     db6:	39 0b       	sbc	r19, r25
     db8:	31 83       	std	Z+1, r19	; 0x01
     dba:	20 83       	st	Z, r18
		uint16_t PrevBytesRem = *BytesRem;

		USB_GetNextDescriptor(BytesRem, CurrConfigLoc);

		if ((ErrorCode = ComparatorRoutine(*CurrConfigLoc)) != DESCRIPTOR_SEARCH_NotFound)
     dbc:	f8 01       	movw	r30, r16
     dbe:	80 81       	ld	r24, Z
     dc0:	91 81       	ldd	r25, Z+1	; 0x01
     dc2:	f5 01       	movw	r30, r10
     dc4:	09 95       	icall
     dc6:	82 30       	cpi	r24, 0x02	; 2
     dc8:	49 f0       	breq	.+18     	; 0xddc <USB_GetNextDescriptorComp+0x5e>
		{
			if (ErrorCode == DESCRIPTOR_SEARCH_Fail)
     dca:	81 30       	cpi	r24, 0x01	; 1
     dcc:	71 f4       	brne	.+28     	; 0xdea <USB_GetNextDescriptorComp+0x6c>
			{
				*CurrConfigLoc = PrevDescLoc;
     dce:	f8 01       	movw	r30, r16
     dd0:	c0 83       	st	Z, r28
     dd2:	d1 83       	std	Z+1, r29	; 0x01
				*BytesRem      = PrevBytesRem;
     dd4:	f7 01       	movw	r30, r14
     dd6:	d1 82       	std	Z+1, r13	; 0x01
     dd8:	c0 82       	st	Z, r12
     dda:	07 c0       	rjmp	.+14     	; 0xdea <USB_GetNextDescriptorComp+0x6c>

uint8_t USB_GetNextDescriptorComp(uint16_t* const BytesRem, void** const CurrConfigLoc, ConfigComparatorPtr_t const ComparatorRoutine)
{
	uint8_t ErrorCode;

	while (*BytesRem)
     ddc:	f7 01       	movw	r30, r14
     dde:	c0 80       	ld	r12, Z
     de0:	d1 80       	ldd	r13, Z+1	; 0x01
     de2:	c1 14       	cp	r12, r1
     de4:	d1 04       	cpc	r13, r1
     de6:	c9 f6       	brne	.-78     	; 0xd9a <USB_GetNextDescriptorComp+0x1c>
     de8:	82 e0       	ldi	r24, 0x02	; 2
			return ErrorCode;
		}
	}

	return DESCRIPTOR_SEARCH_COMP_EndOfDescriptor;
}
     dea:	df 91       	pop	r29
     dec:	cf 91       	pop	r28
     dee:	1f 91       	pop	r17
     df0:	0f 91       	pop	r16
     df2:	ff 90       	pop	r15
     df4:	ef 90       	pop	r14
     df6:	df 90       	pop	r13
     df8:	cf 90       	pop	r12
     dfa:	bf 90       	pop	r11
     dfc:	af 90       	pop	r10
     dfe:	08 95       	ret

00000e00 <USB_Host_GetDeviceConfigDescriptor>:
#include "ConfigDescriptor.h"

#if defined(USB_CAN_BE_HOST)
uint8_t USB_Host_GetDeviceConfigDescriptor(uint8_t ConfigNumber, uint16_t* const ConfigSizePtr,
                                           void* BufferPtr, uint16_t BufferSize)
{
     e00:	cf 92       	push	r12
     e02:	df 92       	push	r13
     e04:	ef 92       	push	r14
     e06:	ff 92       	push	r15
     e08:	0f 93       	push	r16
     e0a:	1f 93       	push	r17
     e0c:	df 93       	push	r29
     e0e:	cf 93       	push	r28
     e10:	cd b7       	in	r28, 0x3d	; 61
     e12:	de b7       	in	r29, 0x3e	; 62
     e14:	29 97       	sbiw	r28, 0x09	; 9
     e16:	0f b6       	in	r0, 0x3f	; 63
     e18:	f8 94       	cli
     e1a:	de bf       	out	0x3e, r29	; 62
     e1c:	0f be       	out	0x3f, r0	; 63
     e1e:	cd bf       	out	0x3d, r28	; 61
     e20:	6b 01       	movw	r12, r22
     e22:	8a 01       	movw	r16, r20
     e24:	79 01       	movw	r14, r18
	uint8_t ErrorCode;
	uint8_t ConfigHeader[sizeof(USB_Descriptor_Configuration_Header_t)];

	USB_ControlRequest = (USB_Request_Header_t)
     e26:	90 e8       	ldi	r25, 0x80	; 128
     e28:	90 93 34 01 	sts	0x0134, r25
     e2c:	96 e0       	ldi	r25, 0x06	; 6
     e2e:	90 93 35 01 	sts	0x0135, r25
     e32:	90 e0       	ldi	r25, 0x00	; 0
     e34:	01 97       	sbiw	r24, 0x01	; 1
     e36:	92 60       	ori	r25, 0x02	; 2
     e38:	90 93 37 01 	sts	0x0137, r25
     e3c:	80 93 36 01 	sts	0x0136, r24
     e40:	10 92 39 01 	sts	0x0139, r1
     e44:	10 92 38 01 	sts	0x0138, r1
     e48:	89 e0       	ldi	r24, 0x09	; 9
     e4a:	90 e0       	ldi	r25, 0x00	; 0
     e4c:	90 93 3b 01 	sts	0x013B, r25
     e50:	80 93 3a 01 	sts	0x013A, r24
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
     e54:	10 92 a7 00 	sts	0x00A7, r1
			.wLength       = sizeof(USB_Descriptor_Configuration_Header_t),
		};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	if ((ErrorCode = USB_Host_SendControlRequest(ConfigHeader)) != HOST_SENDCONTROL_Successful)
     e58:	ce 01       	movw	r24, r28
     e5a:	01 96       	adiw	r24, 0x01	; 1
     e5c:	55 d0       	rcall	.+170    	; 0xf08 <USB_Host_SendControlRequest>
     e5e:	28 2f       	mov	r18, r24
     e60:	88 23       	and	r24, r24
     e62:	c1 f4       	brne	.+48     	; 0xe94 <USB_Host_GetDeviceConfigDescriptor+0x94>
	  return ErrorCode;

	*ConfigSizePtr = DESCRIPTOR_PCAST(ConfigHeader, USB_Descriptor_Configuration_Header_t)->TotalConfigurationSize;
     e64:	8b 81       	ldd	r24, Y+3	; 0x03
     e66:	9c 81       	ldd	r25, Y+4	; 0x04
     e68:	f6 01       	movw	r30, r12
     e6a:	91 83       	std	Z+1, r25	; 0x01
     e6c:	80 83       	st	Z, r24

	if (*ConfigSizePtr > BufferSize)
     e6e:	e8 16       	cp	r14, r24
     e70:	f9 06       	cpc	r15, r25
     e72:	10 f4       	brcc	.+4      	; 0xe78 <USB_Host_GetDeviceConfigDescriptor+0x78>
     e74:	25 e0       	ldi	r18, 0x05	; 5
     e76:	0e c0       	rjmp	.+28     	; 0xe94 <USB_Host_GetDeviceConfigDescriptor+0x94>
	  return HOST_GETCONFIG_BuffOverflow;

	USB_ControlRequest.wLength = *ConfigSizePtr;
     e78:	90 93 3b 01 	sts	0x013B, r25
     e7c:	80 93 3a 01 	sts	0x013A, r24

	if ((ErrorCode = USB_Host_SendControlRequest(BufferPtr)) != HOST_SENDCONTROL_Successful)
     e80:	c8 01       	movw	r24, r16
     e82:	42 d0       	rcall	.+132    	; 0xf08 <USB_Host_SendControlRequest>
     e84:	28 2f       	mov	r18, r24
     e86:	88 23       	and	r24, r24
     e88:	29 f4       	brne	.+10     	; 0xe94 <USB_Host_GetDeviceConfigDescriptor+0x94>
	  return ErrorCode;

	if (DESCRIPTOR_TYPE(BufferPtr) != DTYPE_Configuration)
     e8a:	f8 01       	movw	r30, r16
     e8c:	81 81       	ldd	r24, Z+1	; 0x01
     e8e:	82 30       	cpi	r24, 0x02	; 2
     e90:	09 f0       	breq	.+2      	; 0xe94 <USB_Host_GetDeviceConfigDescriptor+0x94>
     e92:	26 e0       	ldi	r18, 0x06	; 6
	  return HOST_GETCONFIG_InvalidData;

	return HOST_GETCONFIG_Successful;
}
     e94:	82 2f       	mov	r24, r18
     e96:	29 96       	adiw	r28, 0x09	; 9
     e98:	0f b6       	in	r0, 0x3f	; 63
     e9a:	f8 94       	cli
     e9c:	de bf       	out	0x3e, r29	; 62
     e9e:	0f be       	out	0x3f, r0	; 63
     ea0:	cd bf       	out	0x3d, r28	; 61
     ea2:	cf 91       	pop	r28
     ea4:	df 91       	pop	r29
     ea6:	1f 91       	pop	r17
     ea8:	0f 91       	pop	r16
     eaa:	ff 90       	pop	r15
     eac:	ef 90       	pop	r14
     eae:	df 90       	pop	r13
     eb0:	cf 90       	pop	r12
     eb2:	08 95       	ret

00000eb4 <USB_Event_Stub>:
#include "Events.h"

void USB_Event_Stub(void)
{

}
     eb4:	08 95       	ret

00000eb6 <USB_Host_WaitForIOS>:

	return ReturnStatus;
}

static uint8_t USB_Host_WaitForIOS(const uint8_t WaitType)
{
     eb6:	1f 93       	push	r17
     eb8:	cf 93       	push	r28
     eba:	df 93       	push	r29
     ebc:	18 2f       	mov	r17, r24
     ebe:	c8 ee       	ldi	r28, 0xE8	; 232
     ec0:	d3 e0       	ldi	r29, 0x03	; 3
     ec2:	09 c0       	rjmp	.+18     	; 0xed6 <USB_Host_WaitForIOS+0x20>
	         ((WaitType == USB_HOST_WAITFOR_InReceived) && Pipe_IsINReceived()) ||
	         ((WaitType == USB_HOST_WAITFOR_OutReady)   && Pipe_IsOUTReady())))
	{
		uint8_t ErrorCode;

		if ((ErrorCode = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
     ec4:	81 e0       	ldi	r24, 0x01	; 1
     ec6:	f8 db       	rcall	.-2064   	; 0x6b8 <USB_Host_WaitMS>
     ec8:	88 23       	and	r24, r24
     eca:	d1 f4       	brne	.+52     	; 0xf00 <USB_Host_WaitForIOS+0x4a>
		  return ErrorCode;

		if (!(TimeoutCounter--))
     ecc:	20 97       	sbiw	r28, 0x00	; 0
     ece:	11 f4       	brne	.+4      	; 0xed4 <USB_Host_WaitForIOS+0x1e>
     ed0:	84 e0       	ldi	r24, 0x04	; 4
     ed2:	16 c0       	rjmp	.+44     	; 0xf00 <USB_Host_WaitForIOS+0x4a>
     ed4:	21 97       	sbiw	r28, 0x01	; 1
	uint8_t  TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#else
	uint16_t TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#endif

	while (!(((WaitType == USB_HOST_WAITFOR_SetupSent)  && Pipe_IsSETUPSent())  ||
     ed6:	11 23       	and	r17, r17
     ed8:	29 f4       	brne	.+10     	; 0xee4 <USB_Host_WaitForIOS+0x2e>
			 *  \return Boolean true if the current pipe is ready for a SETUP packet, false otherwise.
			 */
			static inline bool Pipe_IsSETUPSent(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsSETUPSent(void)
			{
				return ((UPINTX & (1 << TXSTPI)) ? true : false);
     eda:	80 91 a6 00 	lds	r24, 0x00A6
     ede:	83 ff       	sbrs	r24, 3
     ee0:	f1 cf       	rjmp	.-30     	; 0xec4 <USB_Host_WaitForIOS+0xe>
     ee2:	0d c0       	rjmp	.+26     	; 0xefe <USB_Host_WaitForIOS+0x48>
     ee4:	11 30       	cpi	r17, 0x01	; 1
     ee6:	29 f4       	brne	.+10     	; 0xef2 <USB_Host_WaitForIOS+0x3c>
			 *  \return Boolean true if the current pipe has received an IN packet, false otherwise.
			 */
			static inline bool Pipe_IsINReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsINReceived(void)
			{
				return ((UPINTX & (1 << RXINI)) ? true : false);
     ee8:	80 91 a6 00 	lds	r24, 0x00A6
     eec:	80 ff       	sbrs	r24, 0
     eee:	ea cf       	rjmp	.-44     	; 0xec4 <USB_Host_WaitForIOS+0xe>
     ef0:	06 c0       	rjmp	.+12     	; 0xefe <USB_Host_WaitForIOS+0x48>
     ef2:	12 30       	cpi	r17, 0x02	; 2
     ef4:	39 f7       	brne	.-50     	; 0xec4 <USB_Host_WaitForIOS+0xe>
			 *  \return Boolean true if the current pipe is ready for an OUT packet, false otherwise.
			 */
			static inline bool Pipe_IsOUTReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsOUTReady(void)
			{
				return ((UPINTX & (1 << TXOUTI)) ? true : false);
     ef6:	80 91 a6 00 	lds	r24, 0x00A6
     efa:	82 ff       	sbrs	r24, 2
     efc:	e3 cf       	rjmp	.-58     	; 0xec4 <USB_Host_WaitForIOS+0xe>
     efe:	80 e0       	ldi	r24, 0x00	; 0
		if (!(TimeoutCounter--))
		  return HOST_SENDCONTROL_SoftwareTimeOut;
	}

	return HOST_SENDCONTROL_Successful;
}
     f00:	df 91       	pop	r29
     f02:	cf 91       	pop	r28
     f04:	1f 91       	pop	r17
     f06:	08 95       	ret

00000f08 <USB_Host_SendControlRequest>:

#define  __INCLUDE_FROM_HOSTSTDREQ_C
#include "HostStandardReq.h"

uint8_t USB_Host_SendControlRequest(void* const BufferPtr)
{
     f08:	ff 92       	push	r15
     f0a:	0f 93       	push	r16
     f0c:	1f 93       	push	r17
     f0e:	cf 93       	push	r28
     f10:	df 93       	push	r29
     f12:	18 2f       	mov	r17, r24
     f14:	09 2f       	mov	r16, r25
			 *  \return Boolean true if the bus is currently suspended, false otherwise.
			 */
			static inline bool USB_Host_IsBusSuspended(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusSuspended(void)
			{
				return ((UHCON & (1 << SOFEN)) ? false : true);
     f16:	f0 90 9e 00 	lds	r15, 0x009E
	uint8_t* HeaderStream   = (uint8_t*)&USB_ControlRequest;
	uint8_t* DataStream     = (uint8_t*)BufferPtr;
	bool     BusSuspended   = USB_Host_IsBusSuspended();
	uint8_t  ReturnStatus   = HOST_SENDCONTROL_Successful;
	uint16_t DataLen        = USB_ControlRequest.wLength;
     f1a:	c0 91 3a 01 	lds	r28, 0x013A
     f1e:	d0 91 3b 01 	lds	r29, 0x013B
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
     f22:	80 91 9e 00 	lds	r24, 0x009E
     f26:	81 60       	ori	r24, 0x01	; 1
     f28:	80 93 9e 00 	sts	0x009E, r24

	USB_Host_ResumeBus();

	if ((ReturnStatus = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
     f2c:	81 e0       	ldi	r24, 0x01	; 1
     f2e:	c4 db       	rcall	.-2168   	; 0x6b8 <USB_Host_WaitMS>
     f30:	98 2f       	mov	r25, r24
     f32:	88 23       	and	r24, r24
     f34:	09 f0       	breq	.+2      	; 0xf38 <USB_Host_SendControlRequest+0x30>
     f36:	d2 c0       	rjmp	.+420    	; 0x10dc <USB_Host_SendControlRequest+0x1d4>
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
     f38:	80 91 aa 00 	lds	r24, 0x00AA
     f3c:	8f 7c       	andi	r24, 0xCF	; 207
     f3e:	80 93 aa 00 	sts	0x00AA, r24
			 *  flag for the pipe.
			 */
			static inline void Pipe_ClearErrorFlags(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearErrorFlags(void)
			{
				UPERRX = 0;
     f42:	10 92 f5 00 	sts	0x00F5, r1

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
     f46:	80 91 a9 00 	lds	r24, 0x00A9
     f4a:	8f 7b       	andi	r24, 0xBF	; 191
     f4c:	80 93 a9 00 	sts	0x00A9, r24
     f50:	e4 e3       	ldi	r30, 0x34	; 52
     f52:	f1 e0       	ldi	r31, 0x01	; 1
	Pipe_ClearErrorFlags();

	Pipe_Unfreeze();

	for (uint8_t HeaderByte = 0; HeaderByte < sizeof(USB_Request_Header_t); HeaderByte++)
	  Pipe_Write_Byte(*(HeaderStream++));
     f54:	81 91       	ld	r24, Z+
			 *  \param[in] Byte  Next byte to write into the the currently selected pipe's FIFO buffer.
			 */
			static inline void Pipe_Write_Byte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Write_Byte(const uint8_t Byte)
			{
				UPDATX = Byte;
     f56:	80 93 af 00 	sts	0x00AF, r24
	Pipe_SetPipeToken(PIPE_TOKEN_SETUP);
	Pipe_ClearErrorFlags();

	Pipe_Unfreeze();

	for (uint8_t HeaderByte = 0; HeaderByte < sizeof(USB_Request_Header_t); HeaderByte++)
     f5a:	81 e0       	ldi	r24, 0x01	; 1
     f5c:	ec 33       	cpi	r30, 0x3C	; 60
     f5e:	f8 07       	cpc	r31, r24
     f60:	c9 f7       	brne	.-14     	; 0xf54 <USB_Host_SendControlRequest+0x4c>
			 *  \ingroup Group_PipePacketManagement
			 */
			static inline void Pipe_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearSETUP(void)
			{
				UPINTX &= ~((1 << TXSTPI) | (1 << FIFOCON));
     f62:	80 91 a6 00 	lds	r24, 0x00A6
     f66:	87 77       	andi	r24, 0x77	; 119
     f68:	80 93 a6 00 	sts	0x00A6, r24
	  Pipe_Write_Byte(*(HeaderStream++));

	Pipe_ClearSETUP();

	if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_SetupSent)) != HOST_SENDCONTROL_Successful)
     f6c:	80 e0       	ldi	r24, 0x00	; 0
     f6e:	a3 df       	rcall	.-186    	; 0xeb6 <USB_Host_WaitForIOS>
     f70:	98 2f       	mov	r25, r24
     f72:	88 23       	and	r24, r24
     f74:	09 f0       	breq	.+2      	; 0xf78 <USB_Host_SendControlRequest+0x70>
     f76:	b2 c0       	rjmp	.+356    	; 0x10dc <USB_Host_SendControlRequest+0x1d4>

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
     f78:	80 91 a9 00 	lds	r24, 0x00A9
     f7c:	80 64       	ori	r24, 0x40	; 64
     f7e:	80 93 a9 00 	sts	0x00A9, r24
	  goto End_Of_Control_Send;

	Pipe_Freeze();

	if ((ReturnStatus = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
     f82:	81 e0       	ldi	r24, 0x01	; 1
     f84:	99 db       	rcall	.-2254   	; 0x6b8 <USB_Host_WaitMS>
     f86:	98 2f       	mov	r25, r24
     f88:	88 23       	and	r24, r24
     f8a:	09 f0       	breq	.+2      	; 0xf8e <USB_Host_SendControlRequest+0x86>
     f8c:	a7 c0       	rjmp	.+334    	; 0x10dc <USB_Host_SendControlRequest+0x1d4>
#include "HostStandardReq.h"

uint8_t USB_Host_SendControlRequest(void* const BufferPtr)
{
	uint8_t* HeaderStream   = (uint8_t*)&USB_ControlRequest;
	uint8_t* DataStream     = (uint8_t*)BufferPtr;
     f8e:	21 2f       	mov	r18, r17
     f90:	30 2f       	mov	r19, r16
     f92:	c9 01       	movw	r24, r18
     f94:	8c 01       	movw	r16, r24
	Pipe_Freeze();

	if ((ReturnStatus = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
	  goto End_Of_Control_Send;

	if ((USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_DIRECTION) == REQDIR_DEVICETOHOST)
     f96:	80 91 34 01 	lds	r24, 0x0134
     f9a:	87 ff       	sbrs	r24, 7
     f9c:	52 c0       	rjmp	.+164    	; 0x1042 <USB_Host_SendControlRequest+0x13a>
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
     f9e:	80 91 aa 00 	lds	r24, 0x00AA
     fa2:	8f 7c       	andi	r24, 0xCF	; 207
     fa4:	80 61       	ori	r24, 0x10	; 16
     fa6:	80 93 aa 00 	sts	0x00AA, r24
	{
		Pipe_SetPipeToken(PIPE_TOKEN_IN);

		if (DataStream != NULL)
     faa:	01 15       	cp	r16, r1
     fac:	11 05       	cpc	r17, r1
     fae:	69 f5       	brne	.+90     	; 0x100a <USB_Host_SendControlRequest+0x102>
     fb0:	2e c0       	rjmp	.+92     	; 0x100e <USB_Host_SendControlRequest+0x106>

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
     fb2:	80 91 a9 00 	lds	r24, 0x00A9
     fb6:	8f 7b       	andi	r24, 0xBF	; 191
     fb8:	80 93 a9 00 	sts	0x00A9, r24
		{
			while (DataLen)
			{
				Pipe_Unfreeze();

				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_InReceived)) != HOST_SENDCONTROL_Successful)
     fbc:	81 e0       	ldi	r24, 0x01	; 1
     fbe:	7b df       	rcall	.-266    	; 0xeb6 <USB_Host_WaitForIOS>
     fc0:	98 2f       	mov	r25, r24
     fc2:	88 23       	and	r24, r24
     fc4:	09 f0       	breq	.+2      	; 0xfc8 <USB_Host_SendControlRequest+0xc0>
     fc6:	8a c0       	rjmp	.+276    	; 0x10dc <USB_Host_SendControlRequest+0x1d4>
			 *  \return Total number of bytes in the currently selected Pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
     fc8:	80 91 f6 00 	lds	r24, 0x00F6
     fcc:	90 91 f7 00 	lds	r25, 0x00F7
				  goto End_Of_Control_Send;

				if (!(Pipe_BytesInPipe()))
     fd0:	89 2b       	or	r24, r25
     fd2:	49 f4       	brne	.+18     	; 0xfe6 <USB_Host_SendControlRequest+0xde>
     fd4:	c0 e0       	ldi	r28, 0x00	; 0
     fd6:	d0 e0       	ldi	r29, 0x00	; 0
     fd8:	06 c0       	rjmp	.+12     	; 0xfe6 <USB_Host_SendControlRequest+0xde>
			 *  \return Next byte in the currently selected pipe's FIFO buffer.
			 */
			static inline uint8_t Pipe_Read_Byte(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_Read_Byte(void)
			{
				return UPDATX;
     fda:	80 91 af 00 	lds	r24, 0x00AF
				  DataLen = 0;

				while (Pipe_BytesInPipe() && DataLen)
				{
					*(DataStream++) = Pipe_Read_Byte();
     fde:	f8 01       	movw	r30, r16
     fe0:	81 93       	st	Z+, r24
     fe2:	8f 01       	movw	r16, r30
					DataLen--;
     fe4:	21 97       	sbiw	r28, 0x01	; 1
			 *  \return Total number of bytes in the currently selected Pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
     fe6:	80 91 f6 00 	lds	r24, 0x00F6
     fea:	90 91 f7 00 	lds	r25, 0x00F7
				  goto End_Of_Control_Send;

				if (!(Pipe_BytesInPipe()))
				  DataLen = 0;

				while (Pipe_BytesInPipe() && DataLen)
     fee:	89 2b       	or	r24, r25
     ff0:	11 f0       	breq	.+4      	; 0xff6 <USB_Host_SendControlRequest+0xee>
     ff2:	20 97       	sbiw	r28, 0x00	; 0
     ff4:	91 f7       	brne	.-28     	; 0xfda <USB_Host_SendControlRequest+0xd2>

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
     ff6:	80 91 a9 00 	lds	r24, 0x00A9
     ffa:	80 64       	ori	r24, 0x40	; 64
     ffc:	80 93 a9 00 	sts	0x00A9, r24
			 *  \ingroup Group_PipePacketManagement
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
    1000:	80 91 a6 00 	lds	r24, 0x00A6
    1004:	8e 77       	andi	r24, 0x7E	; 126
    1006:	80 93 a6 00 	sts	0x00A6, r24
	{
		Pipe_SetPipeToken(PIPE_TOKEN_IN);

		if (DataStream != NULL)
		{
			while (DataLen)
    100a:	20 97       	sbiw	r28, 0x00	; 0
    100c:	91 f6       	brne	.-92     	; 0xfb2 <USB_Host_SendControlRequest+0xaa>
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    100e:	80 91 aa 00 	lds	r24, 0x00AA
    1012:	8f 7c       	andi	r24, 0xCF	; 207
    1014:	80 62       	ori	r24, 0x20	; 32
    1016:	80 93 aa 00 	sts	0x00AA, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    101a:	80 91 a9 00 	lds	r24, 0x00A9
    101e:	8f 7b       	andi	r24, 0xBF	; 191
    1020:	80 93 a9 00 	sts	0x00A9, r24
		}

		Pipe_SetPipeToken(PIPE_TOKEN_OUT);
		Pipe_Unfreeze();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    1024:	82 e0       	ldi	r24, 0x02	; 2
    1026:	47 df       	rcall	.-370    	; 0xeb6 <USB_Host_WaitForIOS>
    1028:	98 2f       	mov	r25, r24
    102a:	88 23       	and	r24, r24
    102c:	09 f0       	breq	.+2      	; 0x1030 <USB_Host_SendControlRequest+0x128>
    102e:	56 c0       	rjmp	.+172    	; 0x10dc <USB_Host_SendControlRequest+0x1d4>
			 *  \ingroup Group_PipePacketManagement
			 */
			static inline void Pipe_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearOUT(void)
			{
				UPINTX &= ~((1 << TXOUTI) | (1 << FIFOCON));
    1030:	80 91 a6 00 	lds	r24, 0x00A6
    1034:	8b 77       	andi	r24, 0x7B	; 123
    1036:	80 93 a6 00 	sts	0x00A6, r24
		  goto End_Of_Control_Send;

		Pipe_ClearOUT();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    103a:	82 e0       	ldi	r24, 0x02	; 2
    103c:	3c df       	rcall	.-392    	; 0xeb6 <USB_Host_WaitForIOS>
    103e:	98 2f       	mov	r25, r24
    1040:	4d c0       	rjmp	.+154    	; 0x10dc <USB_Host_SendControlRequest+0x1d4>
		  goto End_Of_Control_Send;
	}
	else
	{
		if (DataStream != NULL)
    1042:	01 15       	cp	r16, r1
    1044:	11 05       	cpc	r17, r1
    1046:	a9 f1       	breq	.+106    	; 0x10b2 <USB_Host_SendControlRequest+0x1aa>
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    1048:	80 91 aa 00 	lds	r24, 0x00AA
    104c:	8f 7c       	andi	r24, 0xCF	; 207
    104e:	80 62       	ori	r24, 0x20	; 32
    1050:	80 93 aa 00 	sts	0x00AA, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    1054:	80 91 a9 00 	lds	r24, 0x00A9
    1058:	8f 7b       	andi	r24, 0xBF	; 191
    105a:	80 93 a9 00 	sts	0x00A9, r24
    105e:	1d c0       	rjmp	.+58     	; 0x109a <USB_Host_SendControlRequest+0x192>
			Pipe_SetPipeToken(PIPE_TOKEN_OUT);
			Pipe_Unfreeze();

			while (DataLen)
			{
				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    1060:	82 e0       	ldi	r24, 0x02	; 2
    1062:	29 df       	rcall	.-430    	; 0xeb6 <USB_Host_WaitForIOS>
    1064:	98 2f       	mov	r25, r24
    1066:	88 23       	and	r24, r24
    1068:	c9 f5       	brne	.+114    	; 0x10dc <USB_Host_SendControlRequest+0x1d4>
				  goto End_Of_Control_Send;

				while (DataLen && (Pipe_BytesInPipe() < USB_ControlPipeSize))
    106a:	80 91 20 01 	lds	r24, 0x0120
    106e:	28 2f       	mov	r18, r24
    1070:	30 e0       	ldi	r19, 0x00	; 0
    1072:	07 c0       	rjmp	.+14     	; 0x1082 <USB_Host_SendControlRequest+0x17a>
				{
					Pipe_Write_Byte(*(DataStream++));
    1074:	f8 01       	movw	r30, r16
    1076:	81 91       	ld	r24, Z+
    1078:	8f 01       	movw	r16, r30
			 *  \param[in] Byte  Next byte to write into the the currently selected pipe's FIFO buffer.
			 */
			static inline void Pipe_Write_Byte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Write_Byte(const uint8_t Byte)
			{
				UPDATX = Byte;
    107a:	80 93 af 00 	sts	0x00AF, r24
					DataLen--;
    107e:	21 97       	sbiw	r28, 0x01	; 1
			while (DataLen)
			{
				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
				  goto End_Of_Control_Send;

				while (DataLen && (Pipe_BytesInPipe() < USB_ControlPipeSize))
    1080:	39 f0       	breq	.+14     	; 0x1090 <USB_Host_SendControlRequest+0x188>
			 *  \return Total number of bytes in the currently selected Pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
    1082:	80 91 f6 00 	lds	r24, 0x00F6
    1086:	90 91 f7 00 	lds	r25, 0x00F7
    108a:	82 17       	cp	r24, r18
    108c:	93 07       	cpc	r25, r19
    108e:	90 f3       	brcs	.-28     	; 0x1074 <USB_Host_SendControlRequest+0x16c>
			 *  \ingroup Group_PipePacketManagement
			 */
			static inline void Pipe_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearOUT(void)
			{
				UPINTX &= ~((1 << TXOUTI) | (1 << FIFOCON));
    1090:	80 91 a6 00 	lds	r24, 0x00A6
    1094:	8b 77       	andi	r24, 0x7B	; 123
    1096:	80 93 a6 00 	sts	0x00A6, r24
		if (DataStream != NULL)
		{
			Pipe_SetPipeToken(PIPE_TOKEN_OUT);
			Pipe_Unfreeze();

			while (DataLen)
    109a:	20 97       	sbiw	r28, 0x00	; 0
    109c:	09 f7       	brne	.-62     	; 0x1060 <USB_Host_SendControlRequest+0x158>
				}

				Pipe_ClearOUT();
			}

			if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    109e:	82 e0       	ldi	r24, 0x02	; 2
    10a0:	0a df       	rcall	.-492    	; 0xeb6 <USB_Host_WaitForIOS>
    10a2:	98 2f       	mov	r25, r24
    10a4:	88 23       	and	r24, r24
    10a6:	d1 f4       	brne	.+52     	; 0x10dc <USB_Host_SendControlRequest+0x1d4>

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    10a8:	80 91 a9 00 	lds	r24, 0x00A9
    10ac:	80 64       	ori	r24, 0x40	; 64
    10ae:	80 93 a9 00 	sts	0x00A9, r24
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    10b2:	80 91 aa 00 	lds	r24, 0x00AA
    10b6:	8f 7c       	andi	r24, 0xCF	; 207
    10b8:	80 61       	ori	r24, 0x10	; 16
    10ba:	80 93 aa 00 	sts	0x00AA, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    10be:	80 91 a9 00 	lds	r24, 0x00A9
    10c2:	8f 7b       	andi	r24, 0xBF	; 191
    10c4:	80 93 a9 00 	sts	0x00A9, r24
		}

		Pipe_SetPipeToken(PIPE_TOKEN_IN);
		Pipe_Unfreeze();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_InReceived)) != HOST_SENDCONTROL_Successful)
    10c8:	81 e0       	ldi	r24, 0x01	; 1
    10ca:	f5 de       	rcall	.-534    	; 0xeb6 <USB_Host_WaitForIOS>
    10cc:	98 2f       	mov	r25, r24
    10ce:	88 23       	and	r24, r24
    10d0:	29 f4       	brne	.+10     	; 0x10dc <USB_Host_SendControlRequest+0x1d4>
			 *  \ingroup Group_PipePacketManagement
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
    10d2:	80 91 a6 00 	lds	r24, 0x00A6
    10d6:	8e 77       	andi	r24, 0x7E	; 126
    10d8:	80 93 a6 00 	sts	0x00A6, r24

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    10dc:	80 91 a9 00 	lds	r24, 0x00A9
    10e0:	80 64       	ori	r24, 0x40	; 64
    10e2:	80 93 a9 00 	sts	0x00A9, r24
	}

End_Of_Control_Send:
	Pipe_Freeze();

	if (BusSuspended)
    10e6:	f0 fc       	sbrc	r15, 0
    10e8:	05 c0       	rjmp	.+10     	; 0x10f4 <USB_Host_SendControlRequest+0x1ec>
			 *  messages to the device.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				UHCON &= ~(1 << SOFEN);
    10ea:	80 91 9e 00 	lds	r24, 0x009E
    10ee:	8e 7f       	andi	r24, 0xFE	; 254
    10f0:	80 93 9e 00 	sts	0x009E, r24
			 *  \param[in] PipeNumber  Index of the pipe to reset.
			 */
			static inline void Pipe_ResetPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ResetPipe(const uint8_t PipeNumber)
			{
				UPRST = (1 << PipeNumber);
    10f4:	81 e0       	ldi	r24, 0x01	; 1
    10f6:	80 93 a8 00 	sts	0x00A8, r24
				UPRST = 0;
    10fa:	10 92 a8 00 	sts	0x00A8, r1
	  USB_Host_SuspendBus();

	Pipe_ResetPipe(PIPE_CONTROLPIPE);

	return ReturnStatus;
}
    10fe:	89 2f       	mov	r24, r25
    1100:	df 91       	pop	r29
    1102:	cf 91       	pop	r28
    1104:	1f 91       	pop	r17
    1106:	0f 91       	pop	r16
    1108:	ff 90       	pop	r15
    110a:	08 95       	ret

0000110c <Pipe_Read_Stream_LE>:
uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE Buffer,
                            uint16_t Length
                            __CALLBACK_PARAM)
{
    110c:	ff 92       	push	r15
    110e:	0f 93       	push	r16
    1110:	1f 93       	push	r17
    1112:	cf 93       	push	r28
    1114:	df 93       	push	r29
    1116:	18 2f       	mov	r17, r24
    1118:	09 2f       	mov	r16, r25
    111a:	eb 01       	movw	r28, r22
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    111c:	80 91 aa 00 	lds	r24, 0x00AA
    1120:	8f 7c       	andi	r24, 0xCF	; 207
    1122:	80 61       	ori	r24, 0x10	; 16
    1124:	80 93 aa 00 	sts	0x00AA, r24
	uint8_t* DataStream = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	uint8_t  ErrorCode;

	Pipe_SetPipeToken(TEMPLATE_TOKEN);

	if ((ErrorCode = Pipe_WaitUntilReady()))
    1128:	ee dc       	rcall	.-1572   	; 0xb06 <Pipe_WaitUntilReady>
    112a:	f8 2e       	mov	r15, r24
    112c:	88 23       	and	r24, r24
    112e:	d1 f4       	brne	.+52     	; 0x1164 <Pipe_Read_Stream_LE+0x58>
uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE Buffer,
                            uint16_t Length
                            __CALLBACK_PARAM)
{
	uint8_t* DataStream = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
    1130:	81 2f       	mov	r24, r17
    1132:	90 2f       	mov	r25, r16
    1134:	9c 01       	movw	r18, r24
    1136:	89 01       	movw	r16, r18
    1138:	13 c0       	rjmp	.+38     	; 0x1160 <Pipe_Read_Stream_LE+0x54>
			 *  \return Boolean true if the currently selected pipe may be read from or written to, depending on its direction.
			 */
			static inline bool Pipe_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsReadWriteAllowed(void)
			{
				return ((UPINTX & (1 << RWAL)) ? true : false);
    113a:	80 91 a6 00 	lds	r24, 0x00A6
	}
	#endif

	while (Length)
	{
		if (!(Pipe_IsReadWriteAllowed()))
    113e:	85 fd       	sbrc	r24, 5
    1140:	09 c0       	rjmp	.+18     	; 0x1154 <Pipe_Read_Stream_LE+0x48>
			 *  \ingroup Group_PipePacketManagement
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
    1142:	80 91 a6 00 	lds	r24, 0x00A6
    1146:	8e 77       	andi	r24, 0x7E	; 126
    1148:	80 93 a6 00 	sts	0x00A6, r24
			#if !defined(NO_STREAM_CALLBACKS)
			if ((Callback != NULL) && (Callback() == STREAMCALLBACK_Abort))
			  return PIPE_RWSTREAM_CallbackAborted;
			#endif

			if ((ErrorCode = Pipe_WaitUntilReady()))
    114c:	dc dc       	rcall	.-1608   	; 0xb06 <Pipe_WaitUntilReady>
    114e:	88 23       	and	r24, r24
    1150:	39 f0       	breq	.+14     	; 0x1160 <Pipe_Read_Stream_LE+0x54>
    1152:	09 c0       	rjmp	.+18     	; 0x1166 <Pipe_Read_Stream_LE+0x5a>
			 *  \return Next byte in the currently selected pipe's FIFO buffer.
			 */
			static inline uint8_t Pipe_Read_Byte(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_Read_Byte(void)
			{
				return UPDATX;
    1154:	80 91 af 00 	lds	r24, 0x00AF
			  return ErrorCode;
		}
		else
		{
			TEMPLATE_TRANSFER_BYTE(DataStream);
    1158:	f8 01       	movw	r30, r16
    115a:	81 93       	st	Z+, r24
    115c:	8f 01       	movw	r16, r30
			Length--;
    115e:	21 97       	sbiw	r28, 0x01	; 1
				} while (Length >= 8);
		}
	}
	#endif

	while (Length)
    1160:	20 97       	sbiw	r28, 0x00	; 0
    1162:	59 f7       	brne	.-42     	; 0x113a <Pipe_Read_Stream_LE+0x2e>
    1164:	8f 2d       	mov	r24, r15
			Length--;
		}
	}

	return PIPE_RWSTREAM_NoError;
}
    1166:	df 91       	pop	r29
    1168:	cf 91       	pop	r28
    116a:	1f 91       	pop	r17
    116c:	0f 91       	pop	r16
    116e:	ff 90       	pop	r15
    1170:	08 95       	ret

00001172 <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
    1172:	ff 92       	push	r15
    1174:	0f 93       	push	r16
    1176:	1f 93       	push	r17
			 *  \return Index of the currently selected pipe.
			 */
			static inline uint8_t Pipe_GetCurrentPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetCurrentPipe(void)
			{
				return (UPNUM & PIPE_PIPENUM_MASK);
    1178:	07 ea       	ldi	r16, 0xA7	; 167
    117a:	10 e0       	ldi	r17, 0x00	; 0
    117c:	f8 01       	movw	r30, r16
    117e:	f0 80       	ld	r15, Z
    1180:	f7 e0       	ldi	r31, 0x07	; 7
    1182:	ff 22       	and	r15, r31
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
    1184:	f8 01       	movw	r30, r16
    1186:	10 82       	st	Z, r1
{
	uint8_t PrevPipe = Pipe_GetCurrentPipe();

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	USB_Host_ProcessNextHostState();
    1188:	46 db       	rcall	.-2420   	; 0x816 <USB_Host_ProcessNextHostState>
    118a:	f8 01       	movw	r30, r16
    118c:	f0 82       	st	Z, r15
		if (USB_CurrentMode == USB_MODE_Device)
		  USB_DeviceTask();
		else if (USB_CurrentMode == USB_MODE_Host)
		  USB_HostTask();
	#endif
}
    118e:	1f 91       	pop	r17
    1190:	0f 91       	pop	r16
    1192:	ff 90       	pop	r15
    1194:	08 95       	ret

00001196 <SerialStream_TxByte>:

FILE USARTStream = FDEV_SETUP_STREAM(SerialStream_TxByte, SerialStream_RxByte, _FDEV_SETUP_RW);

static int SerialStream_TxByte(char DataByte,
                               FILE *Stream)
{
    1196:	98 2f       	mov	r25, r24
			 *  \param[in] DataByte  Byte to transmit through the USART.
			 */
			static inline void Serial_TxByte(const char DataByte) ATTR_ALWAYS_INLINE;
			static inline void Serial_TxByte(const char DataByte)
			{
				while (!(UCSR1A & (1 << UDRE1)));
    1198:	80 91 c8 00 	lds	r24, 0x00C8
    119c:	85 ff       	sbrs	r24, 5
    119e:	fc cf       	rjmp	.-8      	; 0x1198 <SerialStream_TxByte+0x2>
				UDR1 = DataByte;
    11a0:	90 93 ce 00 	sts	0x00CE, r25
	(void)Stream;

	Serial_TxByte(DataByte);
	return 0;
}
    11a4:	80 e0       	ldi	r24, 0x00	; 0
    11a6:	90 e0       	ldi	r25, 0x00	; 0
    11a8:	08 95       	ret

000011aa <SerialStream_RxByte>:
			 *  \return Boolean true if a character has been received, false otherwise.
			 */
			static inline bool Serial_IsCharReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Serial_IsCharReceived(void)
			{
				return ((UCSR1A & (1 << RXC1)) ? true : false);
    11aa:	80 91 c8 00 	lds	r24, 0x00C8

static int SerialStream_RxByte(FILE *Stream)
{
	(void)Stream;

	if (!(Serial_IsCharReceived()))
    11ae:	87 fd       	sbrc	r24, 7
    11b0:	03 c0       	rjmp	.+6      	; 0x11b8 <SerialStream_RxByte+0xe>
    11b2:	2e ef       	ldi	r18, 0xFE	; 254
    11b4:	3f ef       	ldi	r19, 0xFF	; 255
    11b6:	08 c0       	rjmp	.+16     	; 0x11c8 <SerialStream_RxByte+0x1e>
			 *  \return Byte received from the USART.
			 */
			static inline char Serial_RxByte(void) ATTR_ALWAYS_INLINE;
			static inline char Serial_RxByte(void)
			{
				while (!(UCSR1A & (1 << RXC1)));
    11b8:	80 91 c8 00 	lds	r24, 0x00C8
    11bc:	87 ff       	sbrs	r24, 7
    11be:	fc cf       	rjmp	.-8      	; 0x11b8 <SerialStream_RxByte+0xe>
				return UDR1;
    11c0:	80 91 ce 00 	lds	r24, 0x00CE
	  return _FDEV_EOF;

	return Serial_RxByte();
    11c4:	28 2f       	mov	r18, r24
    11c6:	30 e0       	ldi	r19, 0x00	; 0
}
    11c8:	c9 01       	movw	r24, r18
    11ca:	08 95       	ret

000011cc <fputc>:
    11cc:	0f 93       	push	r16
    11ce:	1f 93       	push	r17
    11d0:	cf 93       	push	r28
    11d2:	df 93       	push	r29
    11d4:	8c 01       	movw	r16, r24
    11d6:	eb 01       	movw	r28, r22
    11d8:	8b 81       	ldd	r24, Y+3	; 0x03
    11da:	81 ff       	sbrs	r24, 1
    11dc:	1b c0       	rjmp	.+54     	; 0x1214 <fputc+0x48>
    11de:	82 ff       	sbrs	r24, 2
    11e0:	0d c0       	rjmp	.+26     	; 0x11fc <fputc+0x30>
    11e2:	2e 81       	ldd	r18, Y+6	; 0x06
    11e4:	3f 81       	ldd	r19, Y+7	; 0x07
    11e6:	8c 81       	ldd	r24, Y+4	; 0x04
    11e8:	9d 81       	ldd	r25, Y+5	; 0x05
    11ea:	28 17       	cp	r18, r24
    11ec:	39 07       	cpc	r19, r25
    11ee:	64 f4       	brge	.+24     	; 0x1208 <fputc+0x3c>
    11f0:	e8 81       	ld	r30, Y
    11f2:	f9 81       	ldd	r31, Y+1	; 0x01
    11f4:	01 93       	st	Z+, r16
    11f6:	f9 83       	std	Y+1, r31	; 0x01
    11f8:	e8 83       	st	Y, r30
    11fa:	06 c0       	rjmp	.+12     	; 0x1208 <fputc+0x3c>
    11fc:	e8 85       	ldd	r30, Y+8	; 0x08
    11fe:	f9 85       	ldd	r31, Y+9	; 0x09
    1200:	80 2f       	mov	r24, r16
    1202:	09 95       	icall
    1204:	89 2b       	or	r24, r25
    1206:	31 f4       	brne	.+12     	; 0x1214 <fputc+0x48>
    1208:	8e 81       	ldd	r24, Y+6	; 0x06
    120a:	9f 81       	ldd	r25, Y+7	; 0x07
    120c:	01 96       	adiw	r24, 0x01	; 1
    120e:	9f 83       	std	Y+7, r25	; 0x07
    1210:	8e 83       	std	Y+6, r24	; 0x06
    1212:	02 c0       	rjmp	.+4      	; 0x1218 <fputc+0x4c>
    1214:	0f ef       	ldi	r16, 0xFF	; 255
    1216:	1f ef       	ldi	r17, 0xFF	; 255
    1218:	c8 01       	movw	r24, r16
    121a:	df 91       	pop	r29
    121c:	cf 91       	pop	r28
    121e:	1f 91       	pop	r17
    1220:	0f 91       	pop	r16
    1222:	08 95       	ret

00001224 <printf_P>:
    1224:	df 93       	push	r29
    1226:	cf 93       	push	r28
    1228:	cd b7       	in	r28, 0x3d	; 61
    122a:	de b7       	in	r29, 0x3e	; 62
    122c:	fe 01       	movw	r30, r28
    122e:	35 96       	adiw	r30, 0x05	; 5
    1230:	61 91       	ld	r22, Z+
    1232:	71 91       	ld	r23, Z+
    1234:	a0 91 3f 01 	lds	r26, 0x013F
    1238:	b0 91 40 01 	lds	r27, 0x0140
    123c:	13 96       	adiw	r26, 0x03	; 3
    123e:	8c 91       	ld	r24, X
    1240:	13 97       	sbiw	r26, 0x03	; 3
    1242:	88 60       	ori	r24, 0x08	; 8
    1244:	13 96       	adiw	r26, 0x03	; 3
    1246:	8c 93       	st	X, r24
    1248:	80 91 3f 01 	lds	r24, 0x013F
    124c:	90 91 40 01 	lds	r25, 0x0140
    1250:	af 01       	movw	r20, r30
    1252:	3f d0       	rcall	.+126    	; 0x12d2 <vfprintf>
    1254:	e0 91 3f 01 	lds	r30, 0x013F
    1258:	f0 91 40 01 	lds	r31, 0x0140
    125c:	23 81       	ldd	r18, Z+3	; 0x03
    125e:	27 7f       	andi	r18, 0xF7	; 247
    1260:	23 83       	std	Z+3, r18	; 0x03
    1262:	cf 91       	pop	r28
    1264:	df 91       	pop	r29
    1266:	08 95       	ret

00001268 <puts_P>:
    1268:	0f 93       	push	r16
    126a:	1f 93       	push	r17
    126c:	cf 93       	push	r28
    126e:	df 93       	push	r29
    1270:	ec 01       	movw	r28, r24
    1272:	e0 91 3f 01 	lds	r30, 0x013F
    1276:	f0 91 40 01 	lds	r31, 0x0140
    127a:	83 81       	ldd	r24, Z+3	; 0x03
    127c:	81 ff       	sbrs	r24, 1
    127e:	21 c0       	rjmp	.+66     	; 0x12c2 <puts_P+0x5a>
    1280:	00 e0       	ldi	r16, 0x00	; 0
    1282:	10 e0       	ldi	r17, 0x00	; 0
    1284:	0e c0       	rjmp	.+28     	; 0x12a2 <puts_P+0x3a>
    1286:	e0 91 3f 01 	lds	r30, 0x013F
    128a:	f0 91 40 01 	lds	r31, 0x0140
    128e:	20 85       	ldd	r18, Z+8	; 0x08
    1290:	31 85       	ldd	r19, Z+9	; 0x09
    1292:	bf 01       	movw	r22, r30
    1294:	f9 01       	movw	r30, r18
    1296:	09 95       	icall
    1298:	89 2b       	or	r24, r25
    129a:	11 f0       	breq	.+4      	; 0x12a0 <puts_P+0x38>
    129c:	0f ef       	ldi	r16, 0xFF	; 255
    129e:	1f ef       	ldi	r17, 0xFF	; 255
    12a0:	21 96       	adiw	r28, 0x01	; 1
    12a2:	fe 01       	movw	r30, r28
    12a4:	84 91       	lpm	r24, Z+
    12a6:	88 23       	and	r24, r24
    12a8:	71 f7       	brne	.-36     	; 0x1286 <puts_P+0x1e>
    12aa:	e0 91 3f 01 	lds	r30, 0x013F
    12ae:	f0 91 40 01 	lds	r31, 0x0140
    12b2:	20 85       	ldd	r18, Z+8	; 0x08
    12b4:	31 85       	ldd	r19, Z+9	; 0x09
    12b6:	8a e0       	ldi	r24, 0x0A	; 10
    12b8:	bf 01       	movw	r22, r30
    12ba:	f9 01       	movw	r30, r18
    12bc:	09 95       	icall
    12be:	89 2b       	or	r24, r25
    12c0:	11 f0       	breq	.+4      	; 0x12c6 <puts_P+0x5e>
    12c2:	0f ef       	ldi	r16, 0xFF	; 255
    12c4:	1f ef       	ldi	r17, 0xFF	; 255
    12c6:	c8 01       	movw	r24, r16
    12c8:	df 91       	pop	r29
    12ca:	cf 91       	pop	r28
    12cc:	1f 91       	pop	r17
    12ce:	0f 91       	pop	r16
    12d0:	08 95       	ret

000012d2 <vfprintf>:
    12d2:	2f 92       	push	r2
    12d4:	3f 92       	push	r3
    12d6:	4f 92       	push	r4
    12d8:	5f 92       	push	r5
    12da:	6f 92       	push	r6
    12dc:	7f 92       	push	r7
    12de:	8f 92       	push	r8
    12e0:	9f 92       	push	r9
    12e2:	af 92       	push	r10
    12e4:	bf 92       	push	r11
    12e6:	cf 92       	push	r12
    12e8:	df 92       	push	r13
    12ea:	ef 92       	push	r14
    12ec:	ff 92       	push	r15
    12ee:	0f 93       	push	r16
    12f0:	1f 93       	push	r17
    12f2:	df 93       	push	r29
    12f4:	cf 93       	push	r28
    12f6:	cd b7       	in	r28, 0x3d	; 61
    12f8:	de b7       	in	r29, 0x3e	; 62
    12fa:	2b 97       	sbiw	r28, 0x0b	; 11
    12fc:	0f b6       	in	r0, 0x3f	; 63
    12fe:	f8 94       	cli
    1300:	de bf       	out	0x3e, r29	; 62
    1302:	0f be       	out	0x3f, r0	; 63
    1304:	cd bf       	out	0x3d, r28	; 61
    1306:	3c 01       	movw	r6, r24
    1308:	2b 01       	movw	r4, r22
    130a:	5a 01       	movw	r10, r20
    130c:	fc 01       	movw	r30, r24
    130e:	17 82       	std	Z+7, r1	; 0x07
    1310:	16 82       	std	Z+6, r1	; 0x06
    1312:	83 81       	ldd	r24, Z+3	; 0x03
    1314:	81 fd       	sbrc	r24, 1
    1316:	03 c0       	rjmp	.+6      	; 0x131e <vfprintf+0x4c>
    1318:	6f ef       	ldi	r22, 0xFF	; 255
    131a:	7f ef       	ldi	r23, 0xFF	; 255
    131c:	b9 c1       	rjmp	.+882    	; 0x1690 <vfprintf+0x3be>
    131e:	9a e0       	ldi	r25, 0x0A	; 10
    1320:	89 2e       	mov	r8, r25
    1322:	1e 01       	movw	r2, r28
    1324:	08 94       	sec
    1326:	21 1c       	adc	r2, r1
    1328:	31 1c       	adc	r3, r1
    132a:	f3 01       	movw	r30, r6
    132c:	23 81       	ldd	r18, Z+3	; 0x03
    132e:	f2 01       	movw	r30, r4
    1330:	23 fd       	sbrc	r18, 3
    1332:	85 91       	lpm	r24, Z+
    1334:	23 ff       	sbrs	r18, 3
    1336:	81 91       	ld	r24, Z+
    1338:	2f 01       	movw	r4, r30
    133a:	88 23       	and	r24, r24
    133c:	09 f4       	brne	.+2      	; 0x1340 <vfprintf+0x6e>
    133e:	a5 c1       	rjmp	.+842    	; 0x168a <vfprintf+0x3b8>
    1340:	85 32       	cpi	r24, 0x25	; 37
    1342:	39 f4       	brne	.+14     	; 0x1352 <vfprintf+0x80>
    1344:	23 fd       	sbrc	r18, 3
    1346:	85 91       	lpm	r24, Z+
    1348:	23 ff       	sbrs	r18, 3
    134a:	81 91       	ld	r24, Z+
    134c:	2f 01       	movw	r4, r30
    134e:	85 32       	cpi	r24, 0x25	; 37
    1350:	21 f4       	brne	.+8      	; 0x135a <vfprintf+0x88>
    1352:	90 e0       	ldi	r25, 0x00	; 0
    1354:	b3 01       	movw	r22, r6
    1356:	3a df       	rcall	.-396    	; 0x11cc <fputc>
    1358:	e8 cf       	rjmp	.-48     	; 0x132a <vfprintf+0x58>
    135a:	98 2f       	mov	r25, r24
    135c:	ff 24       	eor	r15, r15
    135e:	ee 24       	eor	r14, r14
    1360:	99 24       	eor	r9, r9
    1362:	ff e1       	ldi	r31, 0x1F	; 31
    1364:	ff 15       	cp	r31, r15
    1366:	d0 f0       	brcs	.+52     	; 0x139c <vfprintf+0xca>
    1368:	9b 32       	cpi	r25, 0x2B	; 43
    136a:	69 f0       	breq	.+26     	; 0x1386 <vfprintf+0xb4>
    136c:	9c 32       	cpi	r25, 0x2C	; 44
    136e:	28 f4       	brcc	.+10     	; 0x137a <vfprintf+0xa8>
    1370:	90 32       	cpi	r25, 0x20	; 32
    1372:	59 f0       	breq	.+22     	; 0x138a <vfprintf+0xb8>
    1374:	93 32       	cpi	r25, 0x23	; 35
    1376:	91 f4       	brne	.+36     	; 0x139c <vfprintf+0xca>
    1378:	0e c0       	rjmp	.+28     	; 0x1396 <vfprintf+0xc4>
    137a:	9d 32       	cpi	r25, 0x2D	; 45
    137c:	49 f0       	breq	.+18     	; 0x1390 <vfprintf+0xbe>
    137e:	90 33       	cpi	r25, 0x30	; 48
    1380:	69 f4       	brne	.+26     	; 0x139c <vfprintf+0xca>
    1382:	41 e0       	ldi	r20, 0x01	; 1
    1384:	24 c0       	rjmp	.+72     	; 0x13ce <vfprintf+0xfc>
    1386:	52 e0       	ldi	r21, 0x02	; 2
    1388:	f5 2a       	or	r15, r21
    138a:	84 e0       	ldi	r24, 0x04	; 4
    138c:	f8 2a       	or	r15, r24
    138e:	28 c0       	rjmp	.+80     	; 0x13e0 <vfprintf+0x10e>
    1390:	98 e0       	ldi	r25, 0x08	; 8
    1392:	f9 2a       	or	r15, r25
    1394:	25 c0       	rjmp	.+74     	; 0x13e0 <vfprintf+0x10e>
    1396:	e0 e1       	ldi	r30, 0x10	; 16
    1398:	fe 2a       	or	r15, r30
    139a:	22 c0       	rjmp	.+68     	; 0x13e0 <vfprintf+0x10e>
    139c:	f7 fc       	sbrc	r15, 7
    139e:	29 c0       	rjmp	.+82     	; 0x13f2 <vfprintf+0x120>
    13a0:	89 2f       	mov	r24, r25
    13a2:	80 53       	subi	r24, 0x30	; 48
    13a4:	8a 30       	cpi	r24, 0x0A	; 10
    13a6:	70 f4       	brcc	.+28     	; 0x13c4 <vfprintf+0xf2>
    13a8:	f6 fe       	sbrs	r15, 6
    13aa:	05 c0       	rjmp	.+10     	; 0x13b6 <vfprintf+0xe4>
    13ac:	98 9c       	mul	r9, r8
    13ae:	90 2c       	mov	r9, r0
    13b0:	11 24       	eor	r1, r1
    13b2:	98 0e       	add	r9, r24
    13b4:	15 c0       	rjmp	.+42     	; 0x13e0 <vfprintf+0x10e>
    13b6:	e8 9c       	mul	r14, r8
    13b8:	e0 2c       	mov	r14, r0
    13ba:	11 24       	eor	r1, r1
    13bc:	e8 0e       	add	r14, r24
    13be:	f0 e2       	ldi	r31, 0x20	; 32
    13c0:	ff 2a       	or	r15, r31
    13c2:	0e c0       	rjmp	.+28     	; 0x13e0 <vfprintf+0x10e>
    13c4:	9e 32       	cpi	r25, 0x2E	; 46
    13c6:	29 f4       	brne	.+10     	; 0x13d2 <vfprintf+0x100>
    13c8:	f6 fc       	sbrc	r15, 6
    13ca:	5f c1       	rjmp	.+702    	; 0x168a <vfprintf+0x3b8>
    13cc:	40 e4       	ldi	r20, 0x40	; 64
    13ce:	f4 2a       	or	r15, r20
    13d0:	07 c0       	rjmp	.+14     	; 0x13e0 <vfprintf+0x10e>
    13d2:	9c 36       	cpi	r25, 0x6C	; 108
    13d4:	19 f4       	brne	.+6      	; 0x13dc <vfprintf+0x10a>
    13d6:	50 e8       	ldi	r21, 0x80	; 128
    13d8:	f5 2a       	or	r15, r21
    13da:	02 c0       	rjmp	.+4      	; 0x13e0 <vfprintf+0x10e>
    13dc:	98 36       	cpi	r25, 0x68	; 104
    13de:	49 f4       	brne	.+18     	; 0x13f2 <vfprintf+0x120>
    13e0:	f2 01       	movw	r30, r4
    13e2:	23 fd       	sbrc	r18, 3
    13e4:	95 91       	lpm	r25, Z+
    13e6:	23 ff       	sbrs	r18, 3
    13e8:	91 91       	ld	r25, Z+
    13ea:	2f 01       	movw	r4, r30
    13ec:	99 23       	and	r25, r25
    13ee:	09 f0       	breq	.+2      	; 0x13f2 <vfprintf+0x120>
    13f0:	b8 cf       	rjmp	.-144    	; 0x1362 <vfprintf+0x90>
    13f2:	89 2f       	mov	r24, r25
    13f4:	85 54       	subi	r24, 0x45	; 69
    13f6:	83 30       	cpi	r24, 0x03	; 3
    13f8:	18 f0       	brcs	.+6      	; 0x1400 <vfprintf+0x12e>
    13fa:	80 52       	subi	r24, 0x20	; 32
    13fc:	83 30       	cpi	r24, 0x03	; 3
    13fe:	38 f4       	brcc	.+14     	; 0x140e <vfprintf+0x13c>
    1400:	44 e0       	ldi	r20, 0x04	; 4
    1402:	50 e0       	ldi	r21, 0x00	; 0
    1404:	a4 0e       	add	r10, r20
    1406:	b5 1e       	adc	r11, r21
    1408:	5f e3       	ldi	r21, 0x3F	; 63
    140a:	59 83       	std	Y+1, r21	; 0x01
    140c:	0f c0       	rjmp	.+30     	; 0x142c <vfprintf+0x15a>
    140e:	93 36       	cpi	r25, 0x63	; 99
    1410:	31 f0       	breq	.+12     	; 0x141e <vfprintf+0x14c>
    1412:	93 37       	cpi	r25, 0x73	; 115
    1414:	79 f0       	breq	.+30     	; 0x1434 <vfprintf+0x162>
    1416:	93 35       	cpi	r25, 0x53	; 83
    1418:	09 f0       	breq	.+2      	; 0x141c <vfprintf+0x14a>
    141a:	52 c0       	rjmp	.+164    	; 0x14c0 <vfprintf+0x1ee>
    141c:	1f c0       	rjmp	.+62     	; 0x145c <vfprintf+0x18a>
    141e:	f5 01       	movw	r30, r10
    1420:	80 81       	ld	r24, Z
    1422:	89 83       	std	Y+1, r24	; 0x01
    1424:	42 e0       	ldi	r20, 0x02	; 2
    1426:	50 e0       	ldi	r21, 0x00	; 0
    1428:	a4 0e       	add	r10, r20
    142a:	b5 1e       	adc	r11, r21
    142c:	61 01       	movw	r12, r2
    142e:	01 e0       	ldi	r16, 0x01	; 1
    1430:	10 e0       	ldi	r17, 0x00	; 0
    1432:	11 c0       	rjmp	.+34     	; 0x1456 <vfprintf+0x184>
    1434:	f5 01       	movw	r30, r10
    1436:	c0 80       	ld	r12, Z
    1438:	d1 80       	ldd	r13, Z+1	; 0x01
    143a:	f6 fc       	sbrc	r15, 6
    143c:	03 c0       	rjmp	.+6      	; 0x1444 <vfprintf+0x172>
    143e:	6f ef       	ldi	r22, 0xFF	; 255
    1440:	7f ef       	ldi	r23, 0xFF	; 255
    1442:	02 c0       	rjmp	.+4      	; 0x1448 <vfprintf+0x176>
    1444:	69 2d       	mov	r22, r9
    1446:	70 e0       	ldi	r23, 0x00	; 0
    1448:	42 e0       	ldi	r20, 0x02	; 2
    144a:	50 e0       	ldi	r21, 0x00	; 0
    144c:	a4 0e       	add	r10, r20
    144e:	b5 1e       	adc	r11, r21
    1450:	c6 01       	movw	r24, r12
    1452:	43 d1       	rcall	.+646    	; 0x16da <strnlen>
    1454:	8c 01       	movw	r16, r24
    1456:	5f e7       	ldi	r21, 0x7F	; 127
    1458:	f5 22       	and	r15, r21
    145a:	13 c0       	rjmp	.+38     	; 0x1482 <vfprintf+0x1b0>
    145c:	f5 01       	movw	r30, r10
    145e:	c0 80       	ld	r12, Z
    1460:	d1 80       	ldd	r13, Z+1	; 0x01
    1462:	f6 fc       	sbrc	r15, 6
    1464:	03 c0       	rjmp	.+6      	; 0x146c <vfprintf+0x19a>
    1466:	6f ef       	ldi	r22, 0xFF	; 255
    1468:	7f ef       	ldi	r23, 0xFF	; 255
    146a:	02 c0       	rjmp	.+4      	; 0x1470 <vfprintf+0x19e>
    146c:	69 2d       	mov	r22, r9
    146e:	70 e0       	ldi	r23, 0x00	; 0
    1470:	42 e0       	ldi	r20, 0x02	; 2
    1472:	50 e0       	ldi	r21, 0x00	; 0
    1474:	a4 0e       	add	r10, r20
    1476:	b5 1e       	adc	r11, r21
    1478:	c6 01       	movw	r24, r12
    147a:	24 d1       	rcall	.+584    	; 0x16c4 <strnlen_P>
    147c:	8c 01       	movw	r16, r24
    147e:	50 e8       	ldi	r21, 0x80	; 128
    1480:	f5 2a       	or	r15, r21
    1482:	f3 fe       	sbrs	r15, 3
    1484:	06 c0       	rjmp	.+12     	; 0x1492 <vfprintf+0x1c0>
    1486:	18 c0       	rjmp	.+48     	; 0x14b8 <vfprintf+0x1e6>
    1488:	80 e2       	ldi	r24, 0x20	; 32
    148a:	90 e0       	ldi	r25, 0x00	; 0
    148c:	b3 01       	movw	r22, r6
    148e:	9e de       	rcall	.-708    	; 0x11cc <fputc>
    1490:	ea 94       	dec	r14
    1492:	8e 2d       	mov	r24, r14
    1494:	90 e0       	ldi	r25, 0x00	; 0
    1496:	08 17       	cp	r16, r24
    1498:	19 07       	cpc	r17, r25
    149a:	b0 f3       	brcs	.-20     	; 0x1488 <vfprintf+0x1b6>
    149c:	0d c0       	rjmp	.+26     	; 0x14b8 <vfprintf+0x1e6>
    149e:	f6 01       	movw	r30, r12
    14a0:	f7 fc       	sbrc	r15, 7
    14a2:	85 91       	lpm	r24, Z+
    14a4:	f7 fe       	sbrs	r15, 7
    14a6:	81 91       	ld	r24, Z+
    14a8:	6f 01       	movw	r12, r30
    14aa:	90 e0       	ldi	r25, 0x00	; 0
    14ac:	b3 01       	movw	r22, r6
    14ae:	8e de       	rcall	.-740    	; 0x11cc <fputc>
    14b0:	e1 10       	cpse	r14, r1
    14b2:	ea 94       	dec	r14
    14b4:	01 50       	subi	r16, 0x01	; 1
    14b6:	10 40       	sbci	r17, 0x00	; 0
    14b8:	01 15       	cp	r16, r1
    14ba:	11 05       	cpc	r17, r1
    14bc:	81 f7       	brne	.-32     	; 0x149e <vfprintf+0x1cc>
    14be:	e2 c0       	rjmp	.+452    	; 0x1684 <vfprintf+0x3b2>
    14c0:	94 36       	cpi	r25, 0x64	; 100
    14c2:	11 f0       	breq	.+4      	; 0x14c8 <vfprintf+0x1f6>
    14c4:	99 36       	cpi	r25, 0x69	; 105
    14c6:	61 f5       	brne	.+88     	; 0x1520 <vfprintf+0x24e>
    14c8:	f7 fe       	sbrs	r15, 7
    14ca:	08 c0       	rjmp	.+16     	; 0x14dc <vfprintf+0x20a>
    14cc:	f5 01       	movw	r30, r10
    14ce:	20 81       	ld	r18, Z
    14d0:	31 81       	ldd	r19, Z+1	; 0x01
    14d2:	42 81       	ldd	r20, Z+2	; 0x02
    14d4:	53 81       	ldd	r21, Z+3	; 0x03
    14d6:	84 e0       	ldi	r24, 0x04	; 4
    14d8:	90 e0       	ldi	r25, 0x00	; 0
    14da:	0a c0       	rjmp	.+20     	; 0x14f0 <vfprintf+0x21e>
    14dc:	f5 01       	movw	r30, r10
    14de:	80 81       	ld	r24, Z
    14e0:	91 81       	ldd	r25, Z+1	; 0x01
    14e2:	9c 01       	movw	r18, r24
    14e4:	44 27       	eor	r20, r20
    14e6:	37 fd       	sbrc	r19, 7
    14e8:	40 95       	com	r20
    14ea:	54 2f       	mov	r21, r20
    14ec:	82 e0       	ldi	r24, 0x02	; 2
    14ee:	90 e0       	ldi	r25, 0x00	; 0
    14f0:	a8 0e       	add	r10, r24
    14f2:	b9 1e       	adc	r11, r25
    14f4:	9f e6       	ldi	r25, 0x6F	; 111
    14f6:	f9 22       	and	r15, r25
    14f8:	57 ff       	sbrs	r21, 7
    14fa:	09 c0       	rjmp	.+18     	; 0x150e <vfprintf+0x23c>
    14fc:	50 95       	com	r21
    14fe:	40 95       	com	r20
    1500:	30 95       	com	r19
    1502:	21 95       	neg	r18
    1504:	3f 4f       	sbci	r19, 0xFF	; 255
    1506:	4f 4f       	sbci	r20, 0xFF	; 255
    1508:	5f 4f       	sbci	r21, 0xFF	; 255
    150a:	e0 e8       	ldi	r30, 0x80	; 128
    150c:	fe 2a       	or	r15, r30
    150e:	ca 01       	movw	r24, r20
    1510:	b9 01       	movw	r22, r18
    1512:	a1 01       	movw	r20, r2
    1514:	2a e0       	ldi	r18, 0x0A	; 10
    1516:	30 e0       	ldi	r19, 0x00	; 0
    1518:	eb d0       	rcall	.+470    	; 0x16f0 <__ultoa_invert>
    151a:	d8 2e       	mov	r13, r24
    151c:	d2 18       	sub	r13, r2
    151e:	3f c0       	rjmp	.+126    	; 0x159e <vfprintf+0x2cc>
    1520:	95 37       	cpi	r25, 0x75	; 117
    1522:	29 f4       	brne	.+10     	; 0x152e <vfprintf+0x25c>
    1524:	1f 2d       	mov	r17, r15
    1526:	1f 7e       	andi	r17, 0xEF	; 239
    1528:	2a e0       	ldi	r18, 0x0A	; 10
    152a:	30 e0       	ldi	r19, 0x00	; 0
    152c:	1d c0       	rjmp	.+58     	; 0x1568 <vfprintf+0x296>
    152e:	1f 2d       	mov	r17, r15
    1530:	19 7f       	andi	r17, 0xF9	; 249
    1532:	9f 36       	cpi	r25, 0x6F	; 111
    1534:	61 f0       	breq	.+24     	; 0x154e <vfprintf+0x27c>
    1536:	90 37       	cpi	r25, 0x70	; 112
    1538:	20 f4       	brcc	.+8      	; 0x1542 <vfprintf+0x270>
    153a:	98 35       	cpi	r25, 0x58	; 88
    153c:	09 f0       	breq	.+2      	; 0x1540 <vfprintf+0x26e>
    153e:	a5 c0       	rjmp	.+330    	; 0x168a <vfprintf+0x3b8>
    1540:	0f c0       	rjmp	.+30     	; 0x1560 <vfprintf+0x28e>
    1542:	90 37       	cpi	r25, 0x70	; 112
    1544:	39 f0       	breq	.+14     	; 0x1554 <vfprintf+0x282>
    1546:	98 37       	cpi	r25, 0x78	; 120
    1548:	09 f0       	breq	.+2      	; 0x154c <vfprintf+0x27a>
    154a:	9f c0       	rjmp	.+318    	; 0x168a <vfprintf+0x3b8>
    154c:	04 c0       	rjmp	.+8      	; 0x1556 <vfprintf+0x284>
    154e:	28 e0       	ldi	r18, 0x08	; 8
    1550:	30 e0       	ldi	r19, 0x00	; 0
    1552:	0a c0       	rjmp	.+20     	; 0x1568 <vfprintf+0x296>
    1554:	10 61       	ori	r17, 0x10	; 16
    1556:	14 fd       	sbrc	r17, 4
    1558:	14 60       	ori	r17, 0x04	; 4
    155a:	20 e1       	ldi	r18, 0x10	; 16
    155c:	30 e0       	ldi	r19, 0x00	; 0
    155e:	04 c0       	rjmp	.+8      	; 0x1568 <vfprintf+0x296>
    1560:	14 fd       	sbrc	r17, 4
    1562:	16 60       	ori	r17, 0x06	; 6
    1564:	20 e1       	ldi	r18, 0x10	; 16
    1566:	32 e0       	ldi	r19, 0x02	; 2
    1568:	17 ff       	sbrs	r17, 7
    156a:	08 c0       	rjmp	.+16     	; 0x157c <vfprintf+0x2aa>
    156c:	f5 01       	movw	r30, r10
    156e:	60 81       	ld	r22, Z
    1570:	71 81       	ldd	r23, Z+1	; 0x01
    1572:	82 81       	ldd	r24, Z+2	; 0x02
    1574:	93 81       	ldd	r25, Z+3	; 0x03
    1576:	44 e0       	ldi	r20, 0x04	; 4
    1578:	50 e0       	ldi	r21, 0x00	; 0
    157a:	08 c0       	rjmp	.+16     	; 0x158c <vfprintf+0x2ba>
    157c:	f5 01       	movw	r30, r10
    157e:	80 81       	ld	r24, Z
    1580:	91 81       	ldd	r25, Z+1	; 0x01
    1582:	bc 01       	movw	r22, r24
    1584:	80 e0       	ldi	r24, 0x00	; 0
    1586:	90 e0       	ldi	r25, 0x00	; 0
    1588:	42 e0       	ldi	r20, 0x02	; 2
    158a:	50 e0       	ldi	r21, 0x00	; 0
    158c:	a4 0e       	add	r10, r20
    158e:	b5 1e       	adc	r11, r21
    1590:	a1 01       	movw	r20, r2
    1592:	ae d0       	rcall	.+348    	; 0x16f0 <__ultoa_invert>
    1594:	d8 2e       	mov	r13, r24
    1596:	d2 18       	sub	r13, r2
    1598:	8f e7       	ldi	r24, 0x7F	; 127
    159a:	f8 2e       	mov	r15, r24
    159c:	f1 22       	and	r15, r17
    159e:	f6 fe       	sbrs	r15, 6
    15a0:	0b c0       	rjmp	.+22     	; 0x15b8 <vfprintf+0x2e6>
    15a2:	5e ef       	ldi	r21, 0xFE	; 254
    15a4:	f5 22       	and	r15, r21
    15a6:	d9 14       	cp	r13, r9
    15a8:	38 f4       	brcc	.+14     	; 0x15b8 <vfprintf+0x2e6>
    15aa:	f4 fe       	sbrs	r15, 4
    15ac:	07 c0       	rjmp	.+14     	; 0x15bc <vfprintf+0x2ea>
    15ae:	f2 fc       	sbrc	r15, 2
    15b0:	05 c0       	rjmp	.+10     	; 0x15bc <vfprintf+0x2ea>
    15b2:	8f ee       	ldi	r24, 0xEF	; 239
    15b4:	f8 22       	and	r15, r24
    15b6:	02 c0       	rjmp	.+4      	; 0x15bc <vfprintf+0x2ea>
    15b8:	1d 2d       	mov	r17, r13
    15ba:	01 c0       	rjmp	.+2      	; 0x15be <vfprintf+0x2ec>
    15bc:	19 2d       	mov	r17, r9
    15be:	f4 fe       	sbrs	r15, 4
    15c0:	0d c0       	rjmp	.+26     	; 0x15dc <vfprintf+0x30a>
    15c2:	fe 01       	movw	r30, r28
    15c4:	ed 0d       	add	r30, r13
    15c6:	f1 1d       	adc	r31, r1
    15c8:	80 81       	ld	r24, Z
    15ca:	80 33       	cpi	r24, 0x30	; 48
    15cc:	19 f4       	brne	.+6      	; 0x15d4 <vfprintf+0x302>
    15ce:	99 ee       	ldi	r25, 0xE9	; 233
    15d0:	f9 22       	and	r15, r25
    15d2:	08 c0       	rjmp	.+16     	; 0x15e4 <vfprintf+0x312>
    15d4:	1f 5f       	subi	r17, 0xFF	; 255
    15d6:	f2 fe       	sbrs	r15, 2
    15d8:	05 c0       	rjmp	.+10     	; 0x15e4 <vfprintf+0x312>
    15da:	03 c0       	rjmp	.+6      	; 0x15e2 <vfprintf+0x310>
    15dc:	8f 2d       	mov	r24, r15
    15de:	86 78       	andi	r24, 0x86	; 134
    15e0:	09 f0       	breq	.+2      	; 0x15e4 <vfprintf+0x312>
    15e2:	1f 5f       	subi	r17, 0xFF	; 255
    15e4:	0f 2d       	mov	r16, r15
    15e6:	f3 fc       	sbrc	r15, 3
    15e8:	13 c0       	rjmp	.+38     	; 0x1610 <vfprintf+0x33e>
    15ea:	f0 fe       	sbrs	r15, 0
    15ec:	0e c0       	rjmp	.+28     	; 0x160a <vfprintf+0x338>
    15ee:	1e 15       	cp	r17, r14
    15f0:	10 f0       	brcs	.+4      	; 0x15f6 <vfprintf+0x324>
    15f2:	9d 2c       	mov	r9, r13
    15f4:	0a c0       	rjmp	.+20     	; 0x160a <vfprintf+0x338>
    15f6:	9d 2c       	mov	r9, r13
    15f8:	9e 0c       	add	r9, r14
    15fa:	91 1a       	sub	r9, r17
    15fc:	1e 2d       	mov	r17, r14
    15fe:	05 c0       	rjmp	.+10     	; 0x160a <vfprintf+0x338>
    1600:	80 e2       	ldi	r24, 0x20	; 32
    1602:	90 e0       	ldi	r25, 0x00	; 0
    1604:	b3 01       	movw	r22, r6
    1606:	e2 dd       	rcall	.-1084   	; 0x11cc <fputc>
    1608:	1f 5f       	subi	r17, 0xFF	; 255
    160a:	1e 15       	cp	r17, r14
    160c:	c8 f3       	brcs	.-14     	; 0x1600 <vfprintf+0x32e>
    160e:	04 c0       	rjmp	.+8      	; 0x1618 <vfprintf+0x346>
    1610:	1e 15       	cp	r17, r14
    1612:	10 f4       	brcc	.+4      	; 0x1618 <vfprintf+0x346>
    1614:	e1 1a       	sub	r14, r17
    1616:	01 c0       	rjmp	.+2      	; 0x161a <vfprintf+0x348>
    1618:	ee 24       	eor	r14, r14
    161a:	04 ff       	sbrs	r16, 4
    161c:	0e c0       	rjmp	.+28     	; 0x163a <vfprintf+0x368>
    161e:	80 e3       	ldi	r24, 0x30	; 48
    1620:	90 e0       	ldi	r25, 0x00	; 0
    1622:	b3 01       	movw	r22, r6
    1624:	d3 dd       	rcall	.-1114   	; 0x11cc <fputc>
    1626:	02 ff       	sbrs	r16, 2
    1628:	1b c0       	rjmp	.+54     	; 0x1660 <vfprintf+0x38e>
    162a:	01 fd       	sbrc	r16, 1
    162c:	03 c0       	rjmp	.+6      	; 0x1634 <vfprintf+0x362>
    162e:	88 e7       	ldi	r24, 0x78	; 120
    1630:	90 e0       	ldi	r25, 0x00	; 0
    1632:	0e c0       	rjmp	.+28     	; 0x1650 <vfprintf+0x37e>
    1634:	88 e5       	ldi	r24, 0x58	; 88
    1636:	90 e0       	ldi	r25, 0x00	; 0
    1638:	0b c0       	rjmp	.+22     	; 0x1650 <vfprintf+0x37e>
    163a:	80 2f       	mov	r24, r16
    163c:	86 78       	andi	r24, 0x86	; 134
    163e:	81 f0       	breq	.+32     	; 0x1660 <vfprintf+0x38e>
    1640:	01 ff       	sbrs	r16, 1
    1642:	02 c0       	rjmp	.+4      	; 0x1648 <vfprintf+0x376>
    1644:	8b e2       	ldi	r24, 0x2B	; 43
    1646:	01 c0       	rjmp	.+2      	; 0x164a <vfprintf+0x378>
    1648:	80 e2       	ldi	r24, 0x20	; 32
    164a:	f7 fc       	sbrc	r15, 7
    164c:	8d e2       	ldi	r24, 0x2D	; 45
    164e:	90 e0       	ldi	r25, 0x00	; 0
    1650:	b3 01       	movw	r22, r6
    1652:	bc dd       	rcall	.-1160   	; 0x11cc <fputc>
    1654:	05 c0       	rjmp	.+10     	; 0x1660 <vfprintf+0x38e>
    1656:	80 e3       	ldi	r24, 0x30	; 48
    1658:	90 e0       	ldi	r25, 0x00	; 0
    165a:	b3 01       	movw	r22, r6
    165c:	b7 dd       	rcall	.-1170   	; 0x11cc <fputc>
    165e:	9a 94       	dec	r9
    1660:	d9 14       	cp	r13, r9
    1662:	c8 f3       	brcs	.-14     	; 0x1656 <vfprintf+0x384>
    1664:	da 94       	dec	r13
    1666:	f1 01       	movw	r30, r2
    1668:	ed 0d       	add	r30, r13
    166a:	f1 1d       	adc	r31, r1
    166c:	80 81       	ld	r24, Z
    166e:	90 e0       	ldi	r25, 0x00	; 0
    1670:	b3 01       	movw	r22, r6
    1672:	ac dd       	rcall	.-1192   	; 0x11cc <fputc>
    1674:	dd 20       	and	r13, r13
    1676:	b1 f7       	brne	.-20     	; 0x1664 <vfprintf+0x392>
    1678:	05 c0       	rjmp	.+10     	; 0x1684 <vfprintf+0x3b2>
    167a:	80 e2       	ldi	r24, 0x20	; 32
    167c:	90 e0       	ldi	r25, 0x00	; 0
    167e:	b3 01       	movw	r22, r6
    1680:	a5 dd       	rcall	.-1206   	; 0x11cc <fputc>
    1682:	ea 94       	dec	r14
    1684:	ee 20       	and	r14, r14
    1686:	c9 f7       	brne	.-14     	; 0x167a <vfprintf+0x3a8>
    1688:	50 ce       	rjmp	.-864    	; 0x132a <vfprintf+0x58>
    168a:	f3 01       	movw	r30, r6
    168c:	66 81       	ldd	r22, Z+6	; 0x06
    168e:	77 81       	ldd	r23, Z+7	; 0x07
    1690:	cb 01       	movw	r24, r22
    1692:	2b 96       	adiw	r28, 0x0b	; 11
    1694:	0f b6       	in	r0, 0x3f	; 63
    1696:	f8 94       	cli
    1698:	de bf       	out	0x3e, r29	; 62
    169a:	0f be       	out	0x3f, r0	; 63
    169c:	cd bf       	out	0x3d, r28	; 61
    169e:	cf 91       	pop	r28
    16a0:	df 91       	pop	r29
    16a2:	1f 91       	pop	r17
    16a4:	0f 91       	pop	r16
    16a6:	ff 90       	pop	r15
    16a8:	ef 90       	pop	r14
    16aa:	df 90       	pop	r13
    16ac:	cf 90       	pop	r12
    16ae:	bf 90       	pop	r11
    16b0:	af 90       	pop	r10
    16b2:	9f 90       	pop	r9
    16b4:	8f 90       	pop	r8
    16b6:	7f 90       	pop	r7
    16b8:	6f 90       	pop	r6
    16ba:	5f 90       	pop	r5
    16bc:	4f 90       	pop	r4
    16be:	3f 90       	pop	r3
    16c0:	2f 90       	pop	r2
    16c2:	08 95       	ret

000016c4 <strnlen_P>:
    16c4:	fc 01       	movw	r30, r24
    16c6:	05 90       	lpm	r0, Z+
    16c8:	61 50       	subi	r22, 0x01	; 1
    16ca:	70 40       	sbci	r23, 0x00	; 0
    16cc:	01 10       	cpse	r0, r1
    16ce:	d8 f7       	brcc	.-10     	; 0x16c6 <strnlen_P+0x2>
    16d0:	80 95       	com	r24
    16d2:	90 95       	com	r25
    16d4:	8e 0f       	add	r24, r30
    16d6:	9f 1f       	adc	r25, r31
    16d8:	08 95       	ret

000016da <strnlen>:
    16da:	fc 01       	movw	r30, r24
    16dc:	61 50       	subi	r22, 0x01	; 1
    16de:	70 40       	sbci	r23, 0x00	; 0
    16e0:	01 90       	ld	r0, Z+
    16e2:	01 10       	cpse	r0, r1
    16e4:	d8 f7       	brcc	.-10     	; 0x16dc <strnlen+0x2>
    16e6:	80 95       	com	r24
    16e8:	90 95       	com	r25
    16ea:	8e 0f       	add	r24, r30
    16ec:	9f 1f       	adc	r25, r31
    16ee:	08 95       	ret

000016f0 <__ultoa_invert>:
    16f0:	fa 01       	movw	r30, r20
    16f2:	aa 27       	eor	r26, r26
    16f4:	28 30       	cpi	r18, 0x08	; 8
    16f6:	51 f1       	breq	.+84     	; 0x174c <__ultoa_invert+0x5c>
    16f8:	20 31       	cpi	r18, 0x10	; 16
    16fa:	81 f1       	breq	.+96     	; 0x175c <__ultoa_invert+0x6c>
    16fc:	e8 94       	clt
    16fe:	6f 93       	push	r22
    1700:	6e 7f       	andi	r22, 0xFE	; 254
    1702:	6e 5f       	subi	r22, 0xFE	; 254
    1704:	7f 4f       	sbci	r23, 0xFF	; 255
    1706:	8f 4f       	sbci	r24, 0xFF	; 255
    1708:	9f 4f       	sbci	r25, 0xFF	; 255
    170a:	af 4f       	sbci	r26, 0xFF	; 255
    170c:	b1 e0       	ldi	r27, 0x01	; 1
    170e:	3e d0       	rcall	.+124    	; 0x178c <__ultoa_invert+0x9c>
    1710:	b4 e0       	ldi	r27, 0x04	; 4
    1712:	3c d0       	rcall	.+120    	; 0x178c <__ultoa_invert+0x9c>
    1714:	67 0f       	add	r22, r23
    1716:	78 1f       	adc	r23, r24
    1718:	89 1f       	adc	r24, r25
    171a:	9a 1f       	adc	r25, r26
    171c:	a1 1d       	adc	r26, r1
    171e:	68 0f       	add	r22, r24
    1720:	79 1f       	adc	r23, r25
    1722:	8a 1f       	adc	r24, r26
    1724:	91 1d       	adc	r25, r1
    1726:	a1 1d       	adc	r26, r1
    1728:	6a 0f       	add	r22, r26
    172a:	71 1d       	adc	r23, r1
    172c:	81 1d       	adc	r24, r1
    172e:	91 1d       	adc	r25, r1
    1730:	a1 1d       	adc	r26, r1
    1732:	20 d0       	rcall	.+64     	; 0x1774 <__ultoa_invert+0x84>
    1734:	09 f4       	brne	.+2      	; 0x1738 <__ultoa_invert+0x48>
    1736:	68 94       	set
    1738:	3f 91       	pop	r19
    173a:	2a e0       	ldi	r18, 0x0A	; 10
    173c:	26 9f       	mul	r18, r22
    173e:	11 24       	eor	r1, r1
    1740:	30 19       	sub	r19, r0
    1742:	30 5d       	subi	r19, 0xD0	; 208
    1744:	31 93       	st	Z+, r19
    1746:	de f6       	brtc	.-74     	; 0x16fe <__ultoa_invert+0xe>
    1748:	cf 01       	movw	r24, r30
    174a:	08 95       	ret
    174c:	46 2f       	mov	r20, r22
    174e:	47 70       	andi	r20, 0x07	; 7
    1750:	40 5d       	subi	r20, 0xD0	; 208
    1752:	41 93       	st	Z+, r20
    1754:	b3 e0       	ldi	r27, 0x03	; 3
    1756:	0f d0       	rcall	.+30     	; 0x1776 <__ultoa_invert+0x86>
    1758:	c9 f7       	brne	.-14     	; 0x174c <__ultoa_invert+0x5c>
    175a:	f6 cf       	rjmp	.-20     	; 0x1748 <__ultoa_invert+0x58>
    175c:	46 2f       	mov	r20, r22
    175e:	4f 70       	andi	r20, 0x0F	; 15
    1760:	40 5d       	subi	r20, 0xD0	; 208
    1762:	4a 33       	cpi	r20, 0x3A	; 58
    1764:	18 f0       	brcs	.+6      	; 0x176c <__ultoa_invert+0x7c>
    1766:	49 5d       	subi	r20, 0xD9	; 217
    1768:	31 fd       	sbrc	r19, 1
    176a:	40 52       	subi	r20, 0x20	; 32
    176c:	41 93       	st	Z+, r20
    176e:	02 d0       	rcall	.+4      	; 0x1774 <__ultoa_invert+0x84>
    1770:	a9 f7       	brne	.-22     	; 0x175c <__ultoa_invert+0x6c>
    1772:	ea cf       	rjmp	.-44     	; 0x1748 <__ultoa_invert+0x58>
    1774:	b4 e0       	ldi	r27, 0x04	; 4
    1776:	a6 95       	lsr	r26
    1778:	97 95       	ror	r25
    177a:	87 95       	ror	r24
    177c:	77 95       	ror	r23
    177e:	67 95       	ror	r22
    1780:	ba 95       	dec	r27
    1782:	c9 f7       	brne	.-14     	; 0x1776 <__ultoa_invert+0x86>
    1784:	00 97       	sbiw	r24, 0x00	; 0
    1786:	61 05       	cpc	r22, r1
    1788:	71 05       	cpc	r23, r1
    178a:	08 95       	ret
    178c:	9b 01       	movw	r18, r22
    178e:	ac 01       	movw	r20, r24
    1790:	0a 2e       	mov	r0, r26
    1792:	06 94       	lsr	r0
    1794:	57 95       	ror	r21
    1796:	47 95       	ror	r20
    1798:	37 95       	ror	r19
    179a:	27 95       	ror	r18
    179c:	ba 95       	dec	r27
    179e:	c9 f7       	brne	.-14     	; 0x1792 <__ultoa_invert+0xa2>
    17a0:	62 0f       	add	r22, r18
    17a2:	73 1f       	adc	r23, r19
    17a4:	84 1f       	adc	r24, r20
    17a6:	95 1f       	adc	r25, r21
    17a8:	a0 1d       	adc	r26, r0
    17aa:	08 95       	ret

000017ac <_exit>:
    17ac:	f8 94       	cli

000017ae <__stop_program>:
    17ae:	ff cf       	rjmp	.-2      	; 0x17ae <__stop_program>
