
RNDISEthernetHost.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000034  00800100  0000207c  00002110  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000207c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000017  00800134  00800134  00002144  2**0
                  ALLOC
  3 .stab         00000f30  00000000  00000000  00002144  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000002b8  00000000  00000000  00003074  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000430  00000000  00000000  0000332c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000008e1  00000000  00000000  0000375c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000058de  00000000  00000000  0000403d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001f23  00000000  00000000  0000991b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000443b  00000000  00000000  0000b83e  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000005c0  00000000  00000000  0000fc7c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000027d3  00000000  00000000  0001023c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00002529  00000000  00000000  00012a0f  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000488  00000000  00000000  00014f38  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
 *
 *  \return A value from the USB_Host_SendControlErrorCodes_t enum or RNDIS_COMMAND_FAILED if the device returned a
 *          logical command failure
 */
uint8_t RNDIS_SendKeepAlive(void)
{
       0:	dc c1       	rjmp	.+952    	; 0x3ba <__ctors_end>

	return USB_Host_SendControlRequest(Buffer);
}

uint8_t USB_Host_ClearPipeStall(const uint8_t EndpointNum)
{
       2:	00 00       	nop
		Pipe_DisablePipe();
	}
}

bool Pipe_IsEndpointBound(const uint8_t EndpointAddress)
{
       4:	f8 c1       	rjmp	.+1008   	; 0x3f6 <__bad_interrupt>
{
	USB_GetNextDescriptorOfType(BytesRem, CurrConfigLoc, AfterType);

	if (*BytesRem)
	  USB_GetNextDescriptorOfType(BytesRem, CurrConfigLoc, Type);
}
       6:	00 00       	nop
			Length--;
		}
	}

	return PIPE_RWSTREAM_NoError;
}
       8:	f6 c1       	rjmp	.+1004   	; 0x3f6 <__bad_interrupt>
       a:	00 00       	nop
       c:	f4 c1       	rjmp	.+1000   	; 0x3f6 <__bad_interrupt>
       e:	00 00       	nop
      10:	f2 c1       	rjmp	.+996    	; 0x3f6 <__bad_interrupt>
      12:	00 00       	nop
      14:	f0 c1       	rjmp	.+992    	; 0x3f6 <__bad_interrupt>
      16:	00 00       	nop
      18:	ee c1       	rjmp	.+988    	; 0x3f6 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	ec c1       	rjmp	.+984    	; 0x3f6 <__bad_interrupt>
      1e:	00 00       	nop
      20:	ea c1       	rjmp	.+980    	; 0x3f6 <__bad_interrupt>
      22:	00 00       	nop
      24:	e8 c1       	rjmp	.+976    	; 0x3f6 <__bad_interrupt>
      26:	00 00       	nop
      28:	0c 94 18 0a 	jmp	0x1430	; 0x1430 <__vector_10>
      2c:	e4 c1       	rjmp	.+968    	; 0x3f6 <__bad_interrupt>
      2e:	00 00       	nop
      30:	e2 c1       	rjmp	.+964    	; 0x3f6 <__bad_interrupt>
      32:	00 00       	nop
      34:	e0 c1       	rjmp	.+960    	; 0x3f6 <__bad_interrupt>
      36:	00 00       	nop
      38:	de c1       	rjmp	.+956    	; 0x3f6 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	dc c1       	rjmp	.+952    	; 0x3f6 <__bad_interrupt>
      3e:	00 00       	nop
      40:	da c1       	rjmp	.+948    	; 0x3f6 <__bad_interrupt>
      42:	00 00       	nop
      44:	d8 c1       	rjmp	.+944    	; 0x3f6 <__bad_interrupt>
      46:	00 00       	nop
      48:	d6 c1       	rjmp	.+940    	; 0x3f6 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	d4 c1       	rjmp	.+936    	; 0x3f6 <__bad_interrupt>
      4e:	00 00       	nop
      50:	d2 c1       	rjmp	.+932    	; 0x3f6 <__bad_interrupt>
      52:	00 00       	nop
      54:	d0 c1       	rjmp	.+928    	; 0x3f6 <__bad_interrupt>
      56:	00 00       	nop
      58:	ce c1       	rjmp	.+924    	; 0x3f6 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	cc c1       	rjmp	.+920    	; 0x3f6 <__bad_interrupt>
      5e:	00 00       	nop
      60:	ca c1       	rjmp	.+916    	; 0x3f6 <__bad_interrupt>
      62:	00 00       	nop
      64:	c8 c1       	rjmp	.+912    	; 0x3f6 <__bad_interrupt>
      66:	00 00       	nop
      68:	c6 c1       	rjmp	.+908    	; 0x3f6 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	c4 c1       	rjmp	.+904    	; 0x3f6 <__bad_interrupt>
      6e:	00 00       	nop
      70:	c2 c1       	rjmp	.+900    	; 0x3f6 <__bad_interrupt>
      72:	00 00       	nop
      74:	c0 c1       	rjmp	.+896    	; 0x3f6 <__bad_interrupt>
      76:	00 00       	nop
      78:	be c1       	rjmp	.+892    	; 0x3f6 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	bc c1       	rjmp	.+888    	; 0x3f6 <__bad_interrupt>
      7e:	00 00       	nop
      80:	ba c1       	rjmp	.+884    	; 0x3f6 <__bad_interrupt>
      82:	00 00       	nop
      84:	b8 c1       	rjmp	.+880    	; 0x3f6 <__bad_interrupt>
      86:	00 00       	nop
      88:	b6 c1       	rjmp	.+876    	; 0x3f6 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	b4 c1       	rjmp	.+872    	; 0x3f6 <__bad_interrupt>
      8e:	00 00       	nop
      90:	b2 c1       	rjmp	.+868    	; 0x3f6 <__bad_interrupt>
      92:	00 00       	nop
      94:	b0 c1       	rjmp	.+864    	; 0x3f6 <__bad_interrupt>
      96:	00 00       	nop

00000098 <__c.4218>:
      98:	52 4e 44 49 53 20 44 65 76 69 63 65 20 45 6e 75     RNDIS Device Enu
      a8:	6d 65 72 61 74 65 64 2e 0d 0a 00                    merated....

000000b3 <__c.4216>:
      b3:	44 65 76 69 63 65 20 56 65 6e 64 6f 72 20 49 44     Device Vendor ID
      c3:	3a 20 30 78 25 30 38 6c 58 0d 0a 00                 : 0x%08lX...

000000cf <__c.4214>:
      cf:	1b 5b 33 31 6d 45 72 72 6f 72 20 47 65 74 74 69     .[31mError Getti
      df:	6e 67 20 56 65 6e 64 6f 72 20 49 44 2e 0d 0a 20     ng Vendor ID... 
      ef:	2d 2d 20 45 72 72 6f 72 20 43 6f 64 65 3a 20 25     -- Error Code: %
      ff:	64 0d 0a 1b 5b 33 37 6d 00                          d...[37m.

00000108 <__c.4211>:
     108:	1b 5b 33 31 6d 45 72 72 6f 72 20 53 65 74 74 69     .[31mError Setti
     118:	6e 67 20 44 65 76 69 63 65 20 50 61 63 6b 65 74     ng Device Packet
     128:	20 46 69 6c 74 65 72 2e 0d 0a 20 2d 2d 20 45 72      Filter... -- Er
     138:	72 6f 72 20 43 6f 64 65 3a 20 25 64 0d 0a 1b 5b     ror Code: %d...[
     148:	33 37 6d 00                                         37m.

0000014c <__c.4208>:
     14c:	44 65 76 69 63 65 20 4d 61 78 20 54 72 61 6e 73     Device Max Trans
     15c:	66 65 72 20 53 69 7a 65 3a 20 25 6c 75 20 62 79     fer Size: %lu by
     16c:	74 65 73 2e 0d 0a 00                                tes....

00000173 <__c.4206>:
     173:	1b 5b 33 31 6d 45 72 72 6f 72 20 49 6e 69 74 69     .[31mError Initi
     183:	61 6c 69 7a 69 6e 67 20 44 65 76 69 63 65 2e 0d     alizing Device..
     193:	0a 20 2d 2d 20 45 72 72 6f 72 20 43 6f 64 65 3a     . -- Error Code:
     1a3:	20 25 64 0d 0a 1b 5b 33 37 6d 00                     %d...[37m.

000001ae <__c.4203>:
     1ae:	1b 5b 33 31 6d 43 6f 6e 74 72 6f 6c 20 45 72 72     .[31mControl Err
     1be:	6f 72 20 28 53 65 74 20 43 6f 6e 66 69 67 75 72     or (Set Configur
     1ce:	61 74 69 6f 6e 29 2e 0d 0a 20 2d 2d 20 45 72 72     ation)... -- Err
     1de:	6f 72 20 43 6f 64 65 3a 20 25 64 0d 0a 1b 5b 33     or Code: %d...[3
     1ee:	37 6d 00                                            7m.

000001f1 <__c.4200>:
     1f1:	20 2d 2d 20 45 72 72 6f 72 20 43 6f 64 65 3a 20      -- Error Code: 
     201:	25 64 0d 0a 1b 5b 33 37 6d 00                       %d...[37m.

0000020b <__c.4198>:
     20b:	1b 5b 33 31 6d 49 6e 76 61 6c 69 64 20 44 65 76     .[31mInvalid Dev
     21b:	69 63 65 2e 0d 0a 00                                ice....

00000222 <__c.4196>:
     222:	1b 5b 33 31 6d 43 6f 6e 74 72 6f 6c 20 45 72 72     .[31mControl Err
     232:	6f 72 20 28 47 65 74 20 43 6f 6e 66 69 67 75 72     or (Get Configur
     242:	61 74 69 6f 6e 29 2e 0d 0a 00                       ation)....

0000024c <__c.4194>:
     24c:	47 65 74 74 69 6e 67 20 43 6f 6e 66 69 67 20 44     Getting Config D
     25c:	61 74 61 2e 0d 0a 00                                ata....

00000263 <__c.4165>:
     263:	1b 5b 33 31 6d 50 61 63 6b 65 74 20 74 6f 6f 20     .[31mPacket too 
     273:	6c 61 72 67 65 2e 0d 0a 1b 5b 33 37 6d 00           large....[37m.

00000281 <__c.4163>:
     281:	2a 2a 2a 50 41 43 4b 45 54 20 28 53 69 7a 65 20     ***PACKET (Size 
     291:	25 64 29 2a 2a 2a 0d 0a 00                          %d)***...

0000029a <__c.4161>:
     29a:	1b 5b 33 31 6d 50 61 63 6b 65 74 20 52 65 63 65     .[31mPacket Rece
     2aa:	70 74 69 6f 6e 20 45 72 72 6f 72 2e 0d 0a 20 2d     ption Error... -
     2ba:	2d 20 45 72 72 6f 72 20 43 6f 64 65 3a 20 25 64     - Error Code: %d
     2ca:	0d 0a 1b 5b 33 37 6d 00                             ...[37m.

000002d2 <__c.4150>:
     2d2:	1b 5b 33 31 6d 44 65 76 20 45 6e 75 6d 20 45 72     .[31mDev Enum Er
     2e2:	72 6f 72 0d 0a 20 2d 2d 20 45 72 72 6f 72 20 43     ror.. -- Error C
     2f2:	6f 64 65 20 25 64 0d 0a 20 2d 2d 20 53 75 62 20     ode %d.. -- Sub 
     302:	45 72 72 6f 72 20 43 6f 64 65 20 25 64 0d 0a 20     Error Code %d.. 
     312:	2d 2d 20 49 6e 20 53 74 61 74 65 20 25 64 0d 0a     -- In State %d..
     322:	1b 5b 33 37 6d 00                                   .[37m.

00000328 <__c.4142>:
     328:	1b 5b 33 31 6d 48 6f 73 74 20 4d 6f 64 65 20 45     .[31mHost Mode E
     338:	72 72 6f 72 0d 0a 20 2d 2d 20 45 72 72 6f 72 20     rror.. -- Error 
     348:	43 6f 64 65 20 25 64 0d 0a 1b 5b 33 37 6d 00        Code %d...[37m.

00000357 <__c.4134>:
     357:	1b 5b 33 32 6d 0d 0a 44 65 76 69 63 65 20 55 6e     .[32m..Device Un
     367:	61 74 74 61 63 68 65 64 2e 0d 0a 1b 5b 33 37 6d     attached....[37m
     377:	00                                                  .

00000378 <__c.4129>:
     378:	1b 5b 33 32 6d 44 65 76 69 63 65 20 41 74 74 61     .[32mDevice Atta
     388:	63 68 65 64 2e 0d 0a 1b 5b 33 37 6d 00              ched....[37m.

00000395 <__c.4115>:
     395:	1b 5b 33 36 6d 52 4e 44 49 53 20 48 6f 73 74 20     .[36mRNDIS Host 
     3a5:	44 65 6d 6f 20 72 75 6e 6e 69 6e 67 2e 0d 0a 1b     Demo running....
     3b5:	5b 33 37 6d 00                                      [37m.

000003ba <__ctors_end>:
     3ba:	11 24       	eor	r1, r1
     3bc:	1f be       	out	0x3f, r1	; 63
     3be:	cf ef       	ldi	r28, 0xFF	; 255
     3c0:	d0 e2       	ldi	r29, 0x20	; 32
     3c2:	de bf       	out	0x3e, r29	; 62
     3c4:	cd bf       	out	0x3d, r28	; 61

000003c6 <__do_copy_data>:
     3c6:	11 e0       	ldi	r17, 0x01	; 1
     3c8:	a0 e0       	ldi	r26, 0x00	; 0
     3ca:	b1 e0       	ldi	r27, 0x01	; 1
     3cc:	ec e7       	ldi	r30, 0x7C	; 124
     3ce:	f0 e2       	ldi	r31, 0x20	; 32
     3d0:	00 e0       	ldi	r16, 0x00	; 0
     3d2:	0b bf       	out	0x3b, r16	; 59
     3d4:	02 c0       	rjmp	.+4      	; 0x3da <__do_copy_data+0x14>
     3d6:	07 90       	elpm	r0, Z+
     3d8:	0d 92       	st	X+, r0
     3da:	a4 33       	cpi	r26, 0x34	; 52
     3dc:	b1 07       	cpc	r27, r17
     3de:	d9 f7       	brne	.-10     	; 0x3d6 <__do_copy_data+0x10>

000003e0 <__do_clear_bss>:
     3e0:	11 e0       	ldi	r17, 0x01	; 1
     3e2:	a4 e3       	ldi	r26, 0x34	; 52
     3e4:	b1 e0       	ldi	r27, 0x01	; 1
     3e6:	01 c0       	rjmp	.+2      	; 0x3ea <.do_clear_bss_start>

000003e8 <.do_clear_bss_loop>:
     3e8:	1d 92       	st	X+, r1

000003ea <.do_clear_bss_start>:
     3ea:	ab 34       	cpi	r26, 0x4B	; 75
     3ec:	b1 07       	cpc	r27, r17
     3ee:	e1 f7       	brne	.-8      	; 0x3e8 <.do_clear_bss_loop>
     3f0:	30 d2       	rcall	.+1120   	; 0x852 <main>
     3f2:	0c 94 3c 10 	jmp	0x2078	; 0x2078 <_exit>

000003f6 <__bad_interrupt>:
     3f6:	04 ce       	rjmp	.-1016   	; 0x0 <__vectors>

000003f8 <EVENT_USB_Host_DeviceEnumerationComplete>:
				PORTD &= ~LEDMask;
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
			{
				PORTD = ((PORTD & ~LEDS_ALL_LEDS) | LEDMask);
     3f8:	8b b1       	in	r24, 0x0b	; 11
     3fa:	8f 70       	andi	r24, 0x0F	; 15
     3fc:	80 66       	ori	r24, 0x60	; 96
     3fe:	8b b9       	out	0x0b, r24	; 11
 *  enumerated by the host and is now ready to be used by the application.
 */
void EVENT_USB_Host_DeviceEnumerationComplete(void)
{
	LEDs_SetAllLEDs(LEDMASK_USB_READY);
}
     400:	08 95       	ret

00000402 <EVENT_USB_Host_DeviceUnattached>:
/** Event handler for the USB_DeviceUnattached event. This indicates that a device has been removed from the host, and
 *  stops the library USB task management process.
 */
void EVENT_USB_Host_DeviceUnattached(void)
{
	puts_P(PSTR(ESC_FG_GREEN "\r\nDevice Unattached.\r\n" ESC_FG_WHITE));
     402:	87 e5       	ldi	r24, 0x57	; 87
     404:	93 e0       	ldi	r25, 0x03	; 3
     406:	0e 94 6e 0d 	call	0x1adc	; 0x1adc <puts_P>
     40a:	8b b1       	in	r24, 0x0b	; 11
     40c:	8f 70       	andi	r24, 0x0F	; 15
     40e:	80 61       	ori	r24, 0x10	; 16
     410:	8b b9       	out	0x0b, r24	; 11
	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
}
     412:	08 95       	ret

00000414 <EVENT_USB_Host_DeviceAttached>:
/** Event handler for the USB_DeviceAttached event. This indicates that a device has been attached to the host, and
 *  starts the library USB task to begin the enumeration and USB management process.
 */
void EVENT_USB_Host_DeviceAttached(void)
{
	puts_P(PSTR(ESC_FG_GREEN "Device Attached.\r\n" ESC_FG_WHITE));
     414:	88 e7       	ldi	r24, 0x78	; 120
     416:	93 e0       	ldi	r25, 0x03	; 3
     418:	0e 94 6e 0d 	call	0x1adc	; 0x1adc <puts_P>
     41c:	8b b1       	in	r24, 0x0b	; 11
     41e:	8f 70       	andi	r24, 0x0F	; 15
     420:	80 6a       	ori	r24, 0xA0	; 160
     422:	8b b9       	out	0x0b, r24	; 11
	LEDs_SetAllLEDs(LEDMASK_USB_ENUMERATING);
}
     424:	08 95       	ret

00000426 <EVENT_USB_Host_DeviceEnumerationFailed>:
 *  enumerating an attached USB device.
 */
void EVENT_USB_Host_DeviceEnumerationFailed(const uint8_t ErrorCode,
                                            const uint8_t SubErrorCode)
{
	printf_P(PSTR(ESC_FG_RED "Dev Enum Error\r\n"
     426:	90 91 44 01 	lds	r25, 0x0144
     42a:	2d b7       	in	r18, 0x3d	; 61
     42c:	3e b7       	in	r19, 0x3e	; 62
     42e:	28 50       	subi	r18, 0x08	; 8
     430:	30 40       	sbci	r19, 0x00	; 0
     432:	0f b6       	in	r0, 0x3f	; 63
     434:	f8 94       	cli
     436:	3e bf       	out	0x3e, r19	; 62
     438:	0f be       	out	0x3f, r0	; 63
     43a:	2d bf       	out	0x3d, r18	; 61
     43c:	ed b7       	in	r30, 0x3d	; 61
     43e:	fe b7       	in	r31, 0x3e	; 62
     440:	31 96       	adiw	r30, 0x01	; 1
     442:	22 ed       	ldi	r18, 0xD2	; 210
     444:	32 e0       	ldi	r19, 0x02	; 2
     446:	ad b7       	in	r26, 0x3d	; 61
     448:	be b7       	in	r27, 0x3e	; 62
     44a:	12 96       	adiw	r26, 0x02	; 2
     44c:	3c 93       	st	X, r19
     44e:	2e 93       	st	-X, r18
     450:	11 97       	sbiw	r26, 0x01	; 1
     452:	82 83       	std	Z+2, r24	; 0x02
     454:	13 82       	std	Z+3, r1	; 0x03
     456:	64 83       	std	Z+4, r22	; 0x04
     458:	15 82       	std	Z+5, r1	; 0x05
     45a:	96 83       	std	Z+6, r25	; 0x06
     45c:	17 82       	std	Z+7, r1	; 0x07
     45e:	0e 94 17 0d 	call	0x1a2e	; 0x1a2e <printf_P>
     462:	8b b1       	in	r24, 0x0b	; 11
     464:	8f 70       	andi	r24, 0x0F	; 15
     466:	80 69       	ori	r24, 0x90	; 144
     468:	8b b9       	out	0x0b, r24	; 11
     46a:	2d b7       	in	r18, 0x3d	; 61
     46c:	3e b7       	in	r19, 0x3e	; 62
     46e:	28 5f       	subi	r18, 0xF8	; 248
     470:	3f 4f       	sbci	r19, 0xFF	; 255
     472:	0f b6       	in	r0, 0x3f	; 63
     474:	f8 94       	cli
     476:	3e bf       	out	0x3e, r19	; 62
     478:	0f be       	out	0x3f, r0	; 63
     47a:	2d bf       	out	0x3d, r18	; 61
	                         " -- Error Code %d\r\n"
	                         " -- Sub Error Code %d\r\n"
	                         " -- In State %d\r\n" ESC_FG_WHITE), ErrorCode, SubErrorCode, USB_HostState);

	LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
}
     47c:	08 95       	ret

0000047e <PrintIncomingPackets>:

void PrintIncomingPackets(void)
{
     47e:	8f 92       	push	r8
     480:	9f 92       	push	r9
     482:	af 92       	push	r10
     484:	bf 92       	push	r11
     486:	cf 92       	push	r12
     488:	df 92       	push	r13
     48a:	ef 92       	push	r14
     48c:	ff 92       	push	r15
     48e:	0f 93       	push	r16
     490:	1f 93       	push	r17
     492:	df 93       	push	r29
     494:	cf 93       	push	r28
     496:	00 d0       	rcall	.+0      	; 0x498 <PrintIncomingPackets+0x1a>
     498:	cd b7       	in	r28, 0x3d	; 61
     49a:	de b7       	in	r29, 0x3e	; 62
	Pipe_Freeze();

	printf("\r\n\r\n");

	LEDs_SetAllLEDs(LEDMASK_USB_READY);
}
     49c:	8d b6       	in	r8, 0x3d	; 61
     49e:	9e b6       	in	r9, 0x3e	; 62
     4a0:	8b b1       	in	r24, 0x0b	; 11
     4a2:	8f 70       	andi	r24, 0x0F	; 15
     4a4:	80 62       	ori	r24, 0x20	; 32
     4a6:	8b b9       	out	0x0b, r24	; 11
	uint8_t ErrorCode;

	LEDs_SetAllLEDs(LEDMASK_USB_BUSY);

	uint16_t PacketLength;
	if ((ErrorCode = RNDIS_GetPacketLength(&PacketLength)) != HOST_SENDCONTROL_Successful)
     4a8:	ce 01       	movw	r24, r28
     4aa:	01 96       	adiw	r24, 0x01	; 1
     4ac:	c0 d2       	rcall	.+1408   	; 0xa2e <RNDIS_GetPacketLength>
     4ae:	28 2f       	mov	r18, r24
     4b0:	88 23       	and	r24, r24
     4b2:	b1 f0       	breq	.+44     	; 0x4e0 <PrintIncomingPackets+0x62>
	{
		printf_P(PSTR(ESC_FG_RED "Packet Reception Error.\r\n"
     4b4:	00 d0       	rcall	.+0      	; 0x4b6 <PrintIncomingPackets+0x38>
     4b6:	00 d0       	rcall	.+0      	; 0x4b8 <PrintIncomingPackets+0x3a>
     4b8:	ed b7       	in	r30, 0x3d	; 61
     4ba:	fe b7       	in	r31, 0x3e	; 62
     4bc:	31 96       	adiw	r30, 0x01	; 1
     4be:	8a e9       	ldi	r24, 0x9A	; 154
     4c0:	92 e0       	ldi	r25, 0x02	; 2
     4c2:	ad b7       	in	r26, 0x3d	; 61
     4c4:	be b7       	in	r27, 0x3e	; 62
     4c6:	12 96       	adiw	r26, 0x02	; 2
     4c8:	9c 93       	st	X, r25
     4ca:	8e 93       	st	-X, r24
     4cc:	11 97       	sbiw	r26, 0x01	; 1
     4ce:	22 83       	std	Z+2, r18	; 0x02
     4d0:	13 82       	std	Z+3, r1	; 0x03
     4d2:	0e 94 17 0d 	call	0x1a2e	; 0x1a2e <printf_P>
     4d6:	0f 90       	pop	r0
     4d8:	0f 90       	pop	r0
     4da:	0f 90       	pop	r0
     4dc:	0f 90       	pop	r0
     4de:	7c c0       	rjmp	.+248    	; 0x5d8 <PrintIncomingPackets+0x15a>
								 " -- Error Code: %d\r\n" ESC_FG_WHITE), ErrorCode);
		return;
	}

	if (!(PacketLength))
     4e0:	29 81       	ldd	r18, Y+1	; 0x01
     4e2:	3a 81       	ldd	r19, Y+2	; 0x02
     4e4:	21 15       	cp	r18, r1
     4e6:	31 05       	cpc	r19, r1
     4e8:	09 f4       	brne	.+2      	; 0x4ec <PrintIncomingPackets+0x6e>
     4ea:	76 c0       	rjmp	.+236    	; 0x5d8 <PrintIncomingPackets+0x15a>

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
     4ec:	80 91 a9 00 	lds	r24, 0x00A9
     4f0:	8f 7b       	andi	r24, 0xBF	; 191
     4f2:	80 93 a9 00 	sts	0x00A9, r24
	  return;

	Pipe_Unfreeze();

	printf_P(PSTR("***PACKET (Size %d)***\r\n"), PacketLength);
     4f6:	00 d0       	rcall	.+0      	; 0x4f8 <PrintIncomingPackets+0x7a>
     4f8:	00 d0       	rcall	.+0      	; 0x4fa <PrintIncomingPackets+0x7c>
     4fa:	81 e8       	ldi	r24, 0x81	; 129
     4fc:	92 e0       	ldi	r25, 0x02	; 2
     4fe:	ed b7       	in	r30, 0x3d	; 61
     500:	fe b7       	in	r31, 0x3e	; 62
     502:	92 83       	std	Z+2, r25	; 0x02
     504:	81 83       	std	Z+1, r24	; 0x01
     506:	34 83       	std	Z+4, r19	; 0x04
     508:	23 83       	std	Z+3, r18	; 0x03
     50a:	0e 94 17 0d 	call	0x1a2e	; 0x1a2e <printf_P>

	if (PacketLength > 1024)
     50e:	0f 90       	pop	r0
     510:	0f 90       	pop	r0
     512:	0f 90       	pop	r0
     514:	0f 90       	pop	r0
     516:	69 81       	ldd	r22, Y+1	; 0x01
     518:	7a 81       	ldd	r23, Y+2	; 0x02
     51a:	f4 e0       	ldi	r31, 0x04	; 4
     51c:	61 30       	cpi	r22, 0x01	; 1
     51e:	7f 07       	cpc	r23, r31
     520:	48 f0       	brcs	.+18     	; 0x534 <PrintIncomingPackets+0xb6>
	{
		puts_P(PSTR(ESC_FG_RED "Packet too large.\r\n" ESC_FG_WHITE));
     522:	83 e6       	ldi	r24, 0x63	; 99
     524:	92 e0       	ldi	r25, 0x02	; 2
     526:	0e 94 6e 0d 	call	0x1adc	; 0x1adc <puts_P>
		Pipe_Discard_Stream(PacketLength);
     52a:	89 81       	ldd	r24, Y+1	; 0x01
     52c:	9a 81       	ldd	r25, Y+2	; 0x02
     52e:	0e 94 aa 0c 	call	0x1954	; 0x1954 <Pipe_Discard_Stream>
     532:	40 c0       	rjmp	.+128    	; 0x5b4 <PrintIncomingPackets+0x136>
     534:	bd b6       	in	r11, 0x3d	; 61
     536:	ae b6       	in	r10, 0x3e	; 62
	}
	else
	{
		uint8_t PacketBuffer[PacketLength];
     538:	8d b7       	in	r24, 0x3d	; 61
     53a:	9e b7       	in	r25, 0x3e	; 62
     53c:	86 1b       	sub	r24, r22
     53e:	97 0b       	sbc	r25, r23
     540:	0f b6       	in	r0, 0x3f	; 63
     542:	f8 94       	cli
     544:	9e bf       	out	0x3e, r25	; 62
     546:	0f be       	out	0x3f, r0	; 63
     548:	8d bf       	out	0x3d, r24	; 61
     54a:	ed b6       	in	r14, 0x3d	; 61
     54c:	fe b6       	in	r15, 0x3e	; 62
     54e:	08 94       	sec
     550:	e1 1c       	adc	r14, r1
     552:	f1 1c       	adc	r15, r1

		Pipe_Read_Stream_LE(&PacketBuffer, PacketLength);
     554:	c7 01       	movw	r24, r14
     556:	0e 94 77 0c 	call	0x18ee	; 0x18ee <Pipe_Read_Stream_LE>
     55a:	00 e0       	ldi	r16, 0x00	; 0
     55c:	10 e0       	ldi	r17, 0x00	; 0

		for (uint16_t i = 0; i < PacketLength; i++)
		  printf("0x%02x ", PacketBuffer[i]);
     55e:	80 e0       	ldi	r24, 0x00	; 0
     560:	c8 2e       	mov	r12, r24
     562:	81 e0       	ldi	r24, 0x01	; 1
     564:	d8 2e       	mov	r13, r24
     566:	19 c0       	rjmp	.+50     	; 0x59a <PrintIncomingPackets+0x11c>
     568:	00 d0       	rcall	.+0      	; 0x56a <PrintIncomingPackets+0xec>
     56a:	00 d0       	rcall	.+0      	; 0x56c <PrintIncomingPackets+0xee>
     56c:	ed b7       	in	r30, 0x3d	; 61
     56e:	fe b7       	in	r31, 0x3e	; 62
     570:	31 96       	adiw	r30, 0x01	; 1
     572:	ad b7       	in	r26, 0x3d	; 61
     574:	be b7       	in	r27, 0x3e	; 62
     576:	12 96       	adiw	r26, 0x02	; 2
     578:	dc 92       	st	X, r13
     57a:	ce 92       	st	-X, r12
     57c:	11 97       	sbiw	r26, 0x01	; 1
     57e:	d7 01       	movw	r26, r14
     580:	a0 0f       	add	r26, r16
     582:	b1 1f       	adc	r27, r17
     584:	8c 91       	ld	r24, X
     586:	82 83       	std	Z+2, r24	; 0x02
     588:	13 82       	std	Z+3, r1	; 0x03
     58a:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <printf>
	{
		uint8_t PacketBuffer[PacketLength];

		Pipe_Read_Stream_LE(&PacketBuffer, PacketLength);

		for (uint16_t i = 0; i < PacketLength; i++)
     58e:	0f 5f       	subi	r16, 0xFF	; 255
     590:	1f 4f       	sbci	r17, 0xFF	; 255
     592:	0f 90       	pop	r0
     594:	0f 90       	pop	r0
     596:	0f 90       	pop	r0
     598:	0f 90       	pop	r0
     59a:	89 81       	ldd	r24, Y+1	; 0x01
     59c:	9a 81       	ldd	r25, Y+2	; 0x02
     59e:	08 17       	cp	r16, r24
     5a0:	19 07       	cpc	r17, r25
     5a2:	10 f3       	brcs	.-60     	; 0x568 <PrintIncomingPackets+0xea>
     5a4:	8b 2d       	mov	r24, r11
     5a6:	9a 2d       	mov	r25, r10
     5a8:	9c 01       	movw	r18, r24
     5aa:	0f b6       	in	r0, 0x3f	; 63
     5ac:	f8 94       	cli
     5ae:	3e bf       	out	0x3e, r19	; 62
     5b0:	0f be       	out	0x3f, r0	; 63
     5b2:	2d bf       	out	0x3d, r18	; 61
			 *  \ingroup Group_PipePacketManagement
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
     5b4:	80 91 a6 00 	lds	r24, 0x00A6
     5b8:	8e 77       	andi	r24, 0x7E	; 126
     5ba:	80 93 a6 00 	sts	0x00A6, r24

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
     5be:	80 91 a9 00 	lds	r24, 0x00A9
     5c2:	80 64       	ori	r24, 0x40	; 64
     5c4:	80 93 a9 00 	sts	0x00A9, r24
	}

	Pipe_ClearIN();
	Pipe_Freeze();

	printf("\r\n\r\n");
     5c8:	88 e0       	ldi	r24, 0x08	; 8
     5ca:	91 e0       	ldi	r25, 0x01	; 1
     5cc:	0e 94 39 0d 	call	0x1a72	; 0x1a72 <puts>
     5d0:	8b b1       	in	r24, 0x0b	; 11
     5d2:	8f 70       	andi	r24, 0x0F	; 15
     5d4:	80 66       	ori	r24, 0x60	; 96
     5d6:	8b b9       	out	0x0b, r24	; 11

	LEDs_SetAllLEDs(LEDMASK_USB_READY);
}
     5d8:	0f b6       	in	r0, 0x3f	; 63
     5da:	f8 94       	cli
     5dc:	9e be       	out	0x3e, r9	; 62
     5de:	0f be       	out	0x3f, r0	; 63
     5e0:	8d be       	out	0x3d, r8	; 61
     5e2:	0f 90       	pop	r0
     5e4:	0f 90       	pop	r0
     5e6:	cf 91       	pop	r28
     5e8:	df 91       	pop	r29
     5ea:	1f 91       	pop	r17
     5ec:	0f 91       	pop	r16
     5ee:	ff 90       	pop	r15
     5f0:	ef 90       	pop	r14
     5f2:	df 90       	pop	r13
     5f4:	cf 90       	pop	r12
     5f6:	bf 90       	pop	r11
     5f8:	af 90       	pop	r10
     5fa:	9f 90       	pop	r9
     5fc:	8f 90       	pop	r8
     5fe:	08 95       	ret

00000600 <RNDIS_Host_Task>:

/** Task to set the configuration of the attached device after it has been enumerated, and to read in
 *  data received from the attached RNDIS device and print it to the serial port.
 */
void RNDIS_Host_Task(void)
{
     600:	1f 93       	push	r17
     602:	df 93       	push	r29
     604:	cf 93       	push	r28
     606:	cd b7       	in	r28, 0x3d	; 61
     608:	de b7       	in	r29, 0x3e	; 62
     60a:	2a 97       	sbiw	r28, 0x0a	; 10
     60c:	0f b6       	in	r0, 0x3f	; 63
     60e:	f8 94       	cli
     610:	de bf       	out	0x3e, r29	; 62
     612:	0f be       	out	0x3f, r0	; 63
     614:	cd bf       	out	0x3d, r28	; 61
	uint8_t ErrorCode;

	switch (USB_HostState)
     616:	80 91 44 01 	lds	r24, 0x0144
     61a:	8b 30       	cpi	r24, 0x0B	; 11
     61c:	21 f0       	breq	.+8      	; 0x626 <RNDIS_Host_Task+0x26>
     61e:	8c 30       	cpi	r24, 0x0C	; 12
     620:	09 f0       	breq	.+2      	; 0x624 <RNDIS_Host_Task+0x24>
     622:	bb c0       	rjmp	.+374    	; 0x79a <RNDIS_Host_Task+0x19a>
     624:	b9 c0       	rjmp	.+370    	; 0x798 <RNDIS_Host_Task+0x198>
	{
		case HOST_STATE_Addressed:
			puts_P(PSTR("Getting Config Data.\r\n"));
     626:	8c e4       	ldi	r24, 0x4C	; 76
     628:	92 e0       	ldi	r25, 0x02	; 2
     62a:	0e 94 6e 0d 	call	0x1adc	; 0x1adc <puts_P>

			/* Get and process the configuration descriptor data */
			if ((ErrorCode = ProcessConfigurationDescriptor()) != SuccessfulConfigRead)
     62e:	51 d1       	rcall	.+674    	; 0x8d2 <ProcessConfigurationDescriptor>
     630:	18 2f       	mov	r17, r24
     632:	88 23       	and	r24, r24
     634:	c1 f0       	breq	.+48     	; 0x666 <RNDIS_Host_Task+0x66>
			{
				if (ErrorCode == ControlError)
     636:	81 30       	cpi	r24, 0x01	; 1
     638:	19 f4       	brne	.+6      	; 0x640 <RNDIS_Host_Task+0x40>
				  puts_P(PSTR(ESC_FG_RED "Control Error (Get Configuration).\r\n"));
     63a:	82 e2       	ldi	r24, 0x22	; 34
     63c:	92 e0       	ldi	r25, 0x02	; 2
     63e:	02 c0       	rjmp	.+4      	; 0x644 <RNDIS_Host_Task+0x44>
				else
				  puts_P(PSTR(ESC_FG_RED "Invalid Device.\r\n"));
     640:	8b e0       	ldi	r24, 0x0B	; 11
     642:	92 e0       	ldi	r25, 0x02	; 2
     644:	0e 94 6e 0d 	call	0x1adc	; 0x1adc <puts_P>

				printf_P(PSTR(" -- Error Code: %d\r\n" ESC_FG_WHITE), ErrorCode);
     648:	00 d0       	rcall	.+0      	; 0x64a <RNDIS_Host_Task+0x4a>
     64a:	00 d0       	rcall	.+0      	; 0x64c <RNDIS_Host_Task+0x4c>
     64c:	ed b7       	in	r30, 0x3d	; 61
     64e:	fe b7       	in	r31, 0x3e	; 62
     650:	31 96       	adiw	r30, 0x01	; 1
     652:	81 ef       	ldi	r24, 0xF1	; 241
     654:	91 e0       	ldi	r25, 0x01	; 1
     656:	ad b7       	in	r26, 0x3d	; 61
     658:	be b7       	in	r27, 0x3e	; 62
     65a:	12 96       	adiw	r26, 0x02	; 2
     65c:	9c 93       	st	X, r25
     65e:	8e 93       	st	-X, r24
     660:	11 97       	sbiw	r26, 0x01	; 1
     662:	12 83       	std	Z+2, r17	; 0x02
     664:	68 c0       	rjmp	.+208    	; 0x736 <RNDIS_Host_Task+0x136>
				USB_HostState = HOST_STATE_WaitForDeviceRemoval;
				break;
			}

			/* Set the device configuration to the first configuration (rarely do devices use multiple configurations) */
			if ((ErrorCode = USB_Host_SetDeviceConfiguration(1)) != HOST_SENDCONTROL_Successful)
     666:	81 e0       	ldi	r24, 0x01	; 1
     668:	ac d4       	rcall	.+2392   	; 0xfc2 <USB_Host_SetDeviceConfiguration>
     66a:	28 2f       	mov	r18, r24
     66c:	88 23       	and	r24, r24
     66e:	41 f0       	breq	.+16     	; 0x680 <RNDIS_Host_Task+0x80>
			{
				printf_P(PSTR(ESC_FG_RED "Control Error (Set Configuration).\r\n"
     670:	00 d0       	rcall	.+0      	; 0x672 <RNDIS_Host_Task+0x72>
     672:	00 d0       	rcall	.+0      	; 0x674 <RNDIS_Host_Task+0x74>
     674:	ed b7       	in	r30, 0x3d	; 61
     676:	fe b7       	in	r31, 0x3e	; 62
     678:	31 96       	adiw	r30, 0x01	; 1
     67a:	8e ea       	ldi	r24, 0xAE	; 174
     67c:	91 e0       	ldi	r25, 0x01	; 1
     67e:	54 c0       	rjmp	.+168    	; 0x728 <RNDIS_Host_Task+0x128>
				USB_HostState = HOST_STATE_WaitForDeviceRemoval;
				break;
			}

			uint16_t DeviceMaxPacketSize;
			if ((ErrorCode = RNDIS_InitializeDevice(1024, &DeviceMaxPacketSize)) != HOST_SENDCONTROL_Successful)
     680:	80 e0       	ldi	r24, 0x00	; 0
     682:	94 e0       	ldi	r25, 0x04	; 4
     684:	be 01       	movw	r22, r28
     686:	6f 5f       	subi	r22, 0xFF	; 255
     688:	7f 4f       	sbci	r23, 0xFF	; 255
     68a:	8e d3       	rcall	.+1820   	; 0xda8 <RNDIS_InitializeDevice>
     68c:	28 2f       	mov	r18, r24
     68e:	88 23       	and	r24, r24
     690:	41 f0       	breq	.+16     	; 0x6a2 <RNDIS_Host_Task+0xa2>
			{
				printf_P(PSTR(ESC_FG_RED "Error Initializing Device.\r\n"
     692:	00 d0       	rcall	.+0      	; 0x694 <RNDIS_Host_Task+0x94>
     694:	00 d0       	rcall	.+0      	; 0x696 <RNDIS_Host_Task+0x96>
     696:	ed b7       	in	r30, 0x3d	; 61
     698:	fe b7       	in	r31, 0x3e	; 62
     69a:	31 96       	adiw	r30, 0x01	; 1
     69c:	83 e7       	ldi	r24, 0x73	; 115
     69e:	91 e0       	ldi	r25, 0x01	; 1
     6a0:	43 c0       	rjmp	.+134    	; 0x728 <RNDIS_Host_Task+0x128>
				/* Wait until USB device disconnected */
				USB_HostState = HOST_STATE_WaitForDeviceRemoval;
				break;
			}

			printf_P(PSTR("Device Max Transfer Size: %lu bytes.\r\n"), DeviceMaxPacketSize);
     6a2:	00 d0       	rcall	.+0      	; 0x6a4 <RNDIS_Host_Task+0xa4>
     6a4:	00 d0       	rcall	.+0      	; 0x6a6 <RNDIS_Host_Task+0xa6>
     6a6:	8c e4       	ldi	r24, 0x4C	; 76
     6a8:	91 e0       	ldi	r25, 0x01	; 1
     6aa:	ed b7       	in	r30, 0x3d	; 61
     6ac:	fe b7       	in	r31, 0x3e	; 62
     6ae:	92 83       	std	Z+2, r25	; 0x02
     6b0:	81 83       	std	Z+1, r24	; 0x01
     6b2:	89 81       	ldd	r24, Y+1	; 0x01
     6b4:	9a 81       	ldd	r25, Y+2	; 0x02
     6b6:	94 83       	std	Z+4, r25	; 0x04
     6b8:	83 83       	std	Z+3, r24	; 0x03
     6ba:	0e 94 17 0d 	call	0x1a2e	; 0x1a2e <printf_P>

			/* We set the default filter to only receive packets we would be interested in */
			uint32_t PacketFilter = (REMOTE_NDIS_PACKET_DIRECTED | REMOTE_NDIS_PACKET_BROADCAST | REMOTE_NDIS_PACKET_ALL_MULTICAST);
     6be:	8d e0       	ldi	r24, 0x0D	; 13
     6c0:	90 e0       	ldi	r25, 0x00	; 0
     6c2:	a0 e0       	ldi	r26, 0x00	; 0
     6c4:	b0 e0       	ldi	r27, 0x00	; 0
     6c6:	8b 83       	std	Y+3, r24	; 0x03
     6c8:	9c 83       	std	Y+4, r25	; 0x04
     6ca:	ad 83       	std	Y+5, r26	; 0x05
     6cc:	be 83       	std	Y+6, r27	; 0x06
			if ((ErrorCode = RNDIS_SetRNDISProperty(OID_GEN_CURRENT_PACKET_FILTER,
     6ce:	0f 90       	pop	r0
     6d0:	0f 90       	pop	r0
     6d2:	0f 90       	pop	r0
     6d4:	0f 90       	pop	r0
     6d6:	6e e0       	ldi	r22, 0x0E	; 14
     6d8:	71 e0       	ldi	r23, 0x01	; 1
     6da:	81 e0       	ldi	r24, 0x01	; 1
     6dc:	90 e0       	ldi	r25, 0x00	; 0
     6de:	ae 01       	movw	r20, r28
     6e0:	4d 5f       	subi	r20, 0xFD	; 253
     6e2:	5f 4f       	sbci	r21, 0xFF	; 255
     6e4:	24 e0       	ldi	r18, 0x04	; 4
     6e6:	30 e0       	ldi	r19, 0x00	; 0
     6e8:	b8 d2       	rcall	.+1392   	; 0xc5a <RNDIS_SetRNDISProperty>
     6ea:	28 2f       	mov	r18, r24
     6ec:	88 23       	and	r24, r24
     6ee:	41 f0       	breq	.+16     	; 0x700 <RNDIS_Host_Task+0x100>
			                                        &PacketFilter, sizeof(PacketFilter))) != HOST_SENDCONTROL_Successful)
			{
				printf_P(PSTR(ESC_FG_RED "Error Setting Device Packet Filter.\r\n"
     6f0:	00 d0       	rcall	.+0      	; 0x6f2 <RNDIS_Host_Task+0xf2>
     6f2:	00 d0       	rcall	.+0      	; 0x6f4 <RNDIS_Host_Task+0xf4>
     6f4:	ed b7       	in	r30, 0x3d	; 61
     6f6:	fe b7       	in	r31, 0x3e	; 62
     6f8:	31 96       	adiw	r30, 0x01	; 1
     6fa:	88 e0       	ldi	r24, 0x08	; 8
     6fc:	91 e0       	ldi	r25, 0x01	; 1
     6fe:	14 c0       	rjmp	.+40     	; 0x728 <RNDIS_Host_Task+0x128>
				USB_HostState = HOST_STATE_WaitForDeviceRemoval;
				break;
			}

			uint32_t VendorID;
			if ((ErrorCode = RNDIS_QueryRNDISProperty(OID_GEN_VENDOR_ID,
     700:	6c e0       	ldi	r22, 0x0C	; 12
     702:	71 e0       	ldi	r23, 0x01	; 1
     704:	81 e0       	ldi	r24, 0x01	; 1
     706:	90 e0       	ldi	r25, 0x00	; 0
     708:	ae 01       	movw	r20, r28
     70a:	49 5f       	subi	r20, 0xF9	; 249
     70c:	5f 4f       	sbci	r21, 0xFF	; 255
     70e:	24 e0       	ldi	r18, 0x04	; 4
     710:	30 e0       	ldi	r19, 0x00	; 0
     712:	03 d2       	rcall	.+1030   	; 0xb1a <RNDIS_QueryRNDISProperty>
     714:	28 2f       	mov	r18, r24
     716:	88 23       	and	r24, r24
     718:	e1 f0       	breq	.+56     	; 0x752 <RNDIS_Host_Task+0x152>
			                                          &VendorID, sizeof(VendorID))) != HOST_SENDCONTROL_Successful)
			{
				printf_P(PSTR(ESC_FG_RED "Error Getting Vendor ID.\r\n"
     71a:	00 d0       	rcall	.+0      	; 0x71c <RNDIS_Host_Task+0x11c>
     71c:	00 d0       	rcall	.+0      	; 0x71e <RNDIS_Host_Task+0x11e>
     71e:	ed b7       	in	r30, 0x3d	; 61
     720:	fe b7       	in	r31, 0x3e	; 62
     722:	31 96       	adiw	r30, 0x01	; 1
     724:	8f ec       	ldi	r24, 0xCF	; 207
     726:	90 e0       	ldi	r25, 0x00	; 0
     728:	ad b7       	in	r26, 0x3d	; 61
     72a:	be b7       	in	r27, 0x3e	; 62
     72c:	12 96       	adiw	r26, 0x02	; 2
     72e:	9c 93       	st	X, r25
     730:	8e 93       	st	-X, r24
     732:	11 97       	sbiw	r26, 0x01	; 1
     734:	22 83       	std	Z+2, r18	; 0x02
     736:	13 82       	std	Z+3, r1	; 0x03
     738:	0e 94 17 0d 	call	0x1a2e	; 0x1a2e <printf_P>
     73c:	8b b1       	in	r24, 0x0b	; 11
     73e:	8f 70       	andi	r24, 0x0F	; 15
     740:	80 69       	ori	r24, 0x90	; 144
     742:	8b b9       	out	0x0b, r24	; 11

				/* Indicate error via status LEDs */
				LEDs_SetAllLEDs(LEDMASK_USB_ERROR);

				/* Wait until USB device disconnected */
				USB_HostState = HOST_STATE_WaitForDeviceRemoval;
     744:	10 92 44 01 	sts	0x0144, r1
     748:	0f 90       	pop	r0
     74a:	0f 90       	pop	r0
     74c:	0f 90       	pop	r0
     74e:	0f 90       	pop	r0
     750:	24 c0       	rjmp	.+72     	; 0x79a <RNDIS_Host_Task+0x19a>
				break;
			}

			printf_P(PSTR("Device Vendor ID: 0x%08lX\r\n"), VendorID);
     752:	00 d0       	rcall	.+0      	; 0x754 <RNDIS_Host_Task+0x154>
     754:	00 d0       	rcall	.+0      	; 0x756 <RNDIS_Host_Task+0x156>
     756:	00 d0       	rcall	.+0      	; 0x758 <RNDIS_Host_Task+0x158>
     758:	83 eb       	ldi	r24, 0xB3	; 179
     75a:	90 e0       	ldi	r25, 0x00	; 0
     75c:	ed b7       	in	r30, 0x3d	; 61
     75e:	fe b7       	in	r31, 0x3e	; 62
     760:	92 83       	std	Z+2, r25	; 0x02
     762:	81 83       	std	Z+1, r24	; 0x01
     764:	8f 81       	ldd	r24, Y+7	; 0x07
     766:	98 85       	ldd	r25, Y+8	; 0x08
     768:	a9 85       	ldd	r26, Y+9	; 0x09
     76a:	ba 85       	ldd	r27, Y+10	; 0x0a
     76c:	83 83       	std	Z+3, r24	; 0x03
     76e:	94 83       	std	Z+4, r25	; 0x04
     770:	a5 83       	std	Z+5, r26	; 0x05
     772:	b6 83       	std	Z+6, r27	; 0x06
     774:	0e 94 17 0d 	call	0x1a2e	; 0x1a2e <printf_P>

			puts_P(PSTR("RNDIS Device Enumerated.\r\n"));
     778:	8d b7       	in	r24, 0x3d	; 61
     77a:	9e b7       	in	r25, 0x3e	; 62
     77c:	06 96       	adiw	r24, 0x06	; 6
     77e:	0f b6       	in	r0, 0x3f	; 63
     780:	f8 94       	cli
     782:	9e bf       	out	0x3e, r25	; 62
     784:	0f be       	out	0x3f, r0	; 63
     786:	8d bf       	out	0x3d, r24	; 61
     788:	88 e9       	ldi	r24, 0x98	; 152
     78a:	90 e0       	ldi	r25, 0x00	; 0
     78c:	0e 94 6e 0d 	call	0x1adc	; 0x1adc <puts_P>

			USB_HostState = HOST_STATE_Configured;
     790:	8c e0       	ldi	r24, 0x0C	; 12
     792:	80 93 44 01 	sts	0x0144, r24
     796:	01 c0       	rjmp	.+2      	; 0x79a <RNDIS_Host_Task+0x19a>
			break;
		case HOST_STATE_Configured:
			PrintIncomingPackets();
     798:	72 de       	rcall	.-796    	; 0x47e <PrintIncomingPackets>

			break;
	}
}
     79a:	2a 96       	adiw	r28, 0x0a	; 10
     79c:	0f b6       	in	r0, 0x3f	; 63
     79e:	f8 94       	cli
     7a0:	de bf       	out	0x3e, r29	; 62
     7a2:	0f be       	out	0x3f, r0	; 63
     7a4:	cd bf       	out	0x3d, r28	; 61
     7a6:	cf 91       	pop	r28
     7a8:	df 91       	pop	r29
     7aa:	1f 91       	pop	r17
     7ac:	08 95       	ret

000007ae <EVENT_USB_Host_HostError>:
	LEDs_SetAllLEDs(LEDMASK_USB_READY);
}

/** Event handler for the USB_HostError event. This indicates that a hardware error occurred while in host mode. */
void EVENT_USB_Host_HostError(const uint8_t ErrorCode)
{
     7ae:	1f 93       	push	r17
     7b0:	18 2f       	mov	r17, r24
	USB_ShutDown();
     7b2:	19 d6       	rcall	.+3122   	; 0x13e6 <USB_ShutDown>

	printf_P(PSTR(ESC_FG_RED "Host Mode Error\r\n"
     7b4:	00 d0       	rcall	.+0      	; 0x7b6 <EVENT_USB_Host_HostError+0x8>
     7b6:	00 d0       	rcall	.+0      	; 0x7b8 <EVENT_USB_Host_HostError+0xa>
     7b8:	ed b7       	in	r30, 0x3d	; 61
     7ba:	fe b7       	in	r31, 0x3e	; 62
     7bc:	31 96       	adiw	r30, 0x01	; 1
     7be:	88 e2       	ldi	r24, 0x28	; 40
     7c0:	93 e0       	ldi	r25, 0x03	; 3
     7c2:	ad b7       	in	r26, 0x3d	; 61
     7c4:	be b7       	in	r27, 0x3e	; 62
     7c6:	12 96       	adiw	r26, 0x02	; 2
     7c8:	9c 93       	st	X, r25
     7ca:	8e 93       	st	-X, r24
     7cc:	11 97       	sbiw	r26, 0x01	; 1
     7ce:	12 83       	std	Z+2, r17	; 0x02
     7d0:	13 82       	std	Z+3, r1	; 0x03
     7d2:	0e 94 17 0d 	call	0x1a2e	; 0x1a2e <printf_P>
     7d6:	8b b1       	in	r24, 0x0b	; 11
     7d8:	8f 70       	andi	r24, 0x0F	; 15
     7da:	80 69       	ori	r24, 0x90	; 144
     7dc:	8b b9       	out	0x0b, r24	; 11
     7de:	0f 90       	pop	r0
     7e0:	0f 90       	pop	r0
     7e2:	0f 90       	pop	r0
     7e4:	0f 90       	pop	r0
     7e6:	ff cf       	rjmp	.-2      	; 0x7e6 <EVENT_USB_Host_HostError+0x38>

000007e8 <SetupHardware>:

/** Configures the board hardware and chip peripherals for the demo's functionality. */
void SetupHardware(void)
{
	/* Disable watchdog if enabled by bootloader/fuses */
	MCUSR &= ~(1 << WDRF);
     7e8:	84 b7       	in	r24, 0x34	; 52
     7ea:	87 7f       	andi	r24, 0xF7	; 247
     7ec:	84 bf       	out	0x34, r24	; 52
	wdt_disable();
     7ee:	38 e1       	ldi	r19, 0x18	; 24
     7f0:	0f b6       	in	r0, 0x3f	; 63
     7f2:	f8 94       	cli
     7f4:	30 93 60 00 	sts	0x0060, r19
     7f8:	10 92 60 00 	sts	0x0060, r1
     7fc:	0f be       	out	0x3f, r0	; 63

	/* Disable clock division */
	clock_prescale_set(clock_div_1);
     7fe:	80 e0       	ldi	r24, 0x00	; 0
     800:	90 e0       	ldi	r25, 0x00	; 0
     802:	20 e8       	ldi	r18, 0x80	; 128
     804:	0f b6       	in	r0, 0x3f	; 63
     806:	f8 94       	cli
     808:	20 93 61 00 	sts	0x0061, r18
     80c:	80 93 61 00 	sts	0x0061, r24
     810:	0f be       	out	0x3f, r0	; 63
			 *  \param[in] DoubleSpeed  Enables double speed mode when set, halving the sample time to double the baud rate.
			 */
			static inline void Serial_Init(const uint32_t BaudRate,
			                               const bool DoubleSpeed)
			{
				UBRR1  = (DoubleSpeed ? SERIAL_2X_UBBRVAL(BaudRate) : SERIAL_UBBRVAL(BaudRate));
     812:	83 e3       	ldi	r24, 0x33	; 51
     814:	90 e0       	ldi	r25, 0x00	; 0
     816:	90 93 cd 00 	sts	0x00CD, r25
     81a:	80 93 cc 00 	sts	0x00CC, r24

				UCSR1C = ((1 << UCSZ11) | (1 << UCSZ10));
     81e:	86 e0       	ldi	r24, 0x06	; 6
     820:	80 93 ca 00 	sts	0x00CA, r24
				UCSR1A = (DoubleSpeed ? (1 << U2X1) : 0);
     824:	10 92 c8 00 	sts	0x00C8, r1
				UCSR1B = ((1 << TXEN1)  | (1 << RXEN1));
     828:	30 93 c9 00 	sts	0x00C9, r19

				DDRD  |= (1 << 3);
     82c:	53 9a       	sbi	0x0a, 3	; 10
				PORTD |= (1 << 2);
     82e:	5a 9a       	sbi	0x0b, 2	; 11
			static inline void SerialStream_Init(const uint32_t BaudRate,
			                                     const bool DoubleSpeed)
			{
				Serial_Init(BaudRate, DoubleSpeed);

				stdout = &USARTStream;
     830:	85 e2       	ldi	r24, 0x25	; 37
     832:	91 e0       	ldi	r25, 0x01	; 1
     834:	90 93 48 01 	sts	0x0148, r25
     838:	80 93 47 01 	sts	0x0147, r24
				stdin  = &USARTStream;
     83c:	90 93 46 01 	sts	0x0146, r25
     840:	80 93 45 01 	sts	0x0145, r24

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void LEDs_Init(void)
			{
				DDRD  |=  LEDS_ALL_LEDS;
     844:	8a b1       	in	r24, 0x0a	; 10
     846:	80 6f       	ori	r24, 0xF0	; 240
     848:	8a b9       	out	0x0a, r24	; 10
				PORTD &= ~LEDS_ALL_LEDS;
     84a:	8b b1       	in	r24, 0x0b	; 11
     84c:	8f 70       	andi	r24, 0x0F	; 15
     84e:	8b b9       	out	0x0b, r24	; 11

	/* Hardware Initialization */
	SerialStream_Init(9600, false);
	LEDs_Init();
	USB_Init();
}
     850:	c1 c5       	rjmp	.+2946   	; 0x13d4 <USB_Init>

00000852 <main>:
/** Main program entry point. This routine configures the hardware required by the application, then
 *  enters a loop to run the application tasks in sequence.
 */
int main(void)
{
	SetupHardware();
     852:	ca df       	rcall	.-108    	; 0x7e8 <SetupHardware>

	puts_P(PSTR(ESC_FG_CYAN "RNDIS Host Demo running.\r\n" ESC_FG_WHITE));
     854:	85 e9       	ldi	r24, 0x95	; 149
     856:	93 e0       	ldi	r25, 0x03	; 3
     858:	0e 94 6e 0d 	call	0x1adc	; 0x1adc <puts_P>
				PORTD &= ~LEDMask;
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
			{
				PORTD = ((PORTD & ~LEDS_ALL_LEDS) | LEDMask);
     85c:	8b b1       	in	r24, 0x0b	; 11
     85e:	8f 70       	andi	r24, 0x0F	; 15
     860:	80 61       	ori	r24, 0x10	; 16
     862:	8b b9       	out	0x0b, r24	; 11

	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
	sei();
     864:	78 94       	sei

	for (;;)
	{
		RNDIS_Host_Task();
     866:	cc de       	rcall	.-616    	; 0x600 <RNDIS_Host_Task>
		USB_USBTask();
     868:	0e 94 d0 0c 	call	0x19a0	; 0x19a0 <USB_USBTask>
     86c:	fc cf       	rjmp	.-8      	; 0x866 <main+0x14>

0000086e <DComp_NextCDCControlInterface>:
 *  This comparator searches for the next Interface descriptor of the correct CDC control Class, Subclass and Protocol values.
 *
 *  \return A value from the DSEARCH_Return_ErrorCodes_t enum
 */
uint8_t DComp_NextCDCControlInterface(void* CurrentDescriptor)
{
     86e:	fc 01       	movw	r30, r24
	USB_Descriptor_Header_t* Header = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Header_t);

	if (Header->Type == DTYPE_Interface)
     870:	81 81       	ldd	r24, Z+1	; 0x01
     872:	84 30       	cpi	r24, 0x04	; 4
     874:	59 f4       	brne	.+22     	; 0x88c <DComp_NextCDCControlInterface+0x1e>
	{
		USB_Descriptor_Interface_t* Interface = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Interface_t);

		/* Check the CDC descriptor class, subclass and protocol, break out if correct control interface found */
		if ((Interface->Class    == CDC_CSCP_CDCClass)    &&
     876:	85 81       	ldd	r24, Z+5	; 0x05
     878:	82 30       	cpi	r24, 0x02	; 2
     87a:	41 f4       	brne	.+16     	; 0x88c <DComp_NextCDCControlInterface+0x1e>
     87c:	86 81       	ldd	r24, Z+6	; 0x06
     87e:	82 30       	cpi	r24, 0x02	; 2
     880:	29 f4       	brne	.+10     	; 0x88c <DComp_NextCDCControlInterface+0x1e>
     882:	87 81       	ldd	r24, Z+7	; 0x07
     884:	8f 3f       	cpi	r24, 0xFF	; 255
     886:	11 f4       	brne	.+4      	; 0x88c <DComp_NextCDCControlInterface+0x1e>
     888:	80 e0       	ldi	r24, 0x00	; 0
     88a:	08 95       	ret
     88c:	82 e0       	ldi	r24, 0x02	; 2
			return DESCRIPTOR_SEARCH_Found;
		}
	}

	return DESCRIPTOR_SEARCH_NotFound;
}
     88e:	08 95       	ret

00000890 <DComp_NextCDCDataInterface>:
 *  This comparator searches for the next Interface descriptor of the correct CDC data Class, Subclass and Protocol values.
 *
 *  \return A value from the DSEARCH_Return_ErrorCodes_t enum
 */
uint8_t DComp_NextCDCDataInterface(void* CurrentDescriptor)
{
     890:	fc 01       	movw	r30, r24
	USB_Descriptor_Header_t* Header = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Header_t);

	if (Header->Type == DTYPE_Interface)
     892:	81 81       	ldd	r24, Z+1	; 0x01
     894:	84 30       	cpi	r24, 0x04	; 4
     896:	41 f4       	brne	.+16     	; 0x8a8 <DComp_NextCDCDataInterface+0x18>
	{
		USB_Descriptor_Interface_t* Interface = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Interface_t);

		/* Check the CDC descriptor class, subclass and protocol, break out if correct data interface found */
		if ((Interface->Class    == CDC_CSCP_CDCDataClass)   &&
     898:	85 81       	ldd	r24, Z+5	; 0x05
     89a:	8a 30       	cpi	r24, 0x0A	; 10
     89c:	29 f4       	brne	.+10     	; 0x8a8 <DComp_NextCDCDataInterface+0x18>
     89e:	86 81       	ldd	r24, Z+6	; 0x06
     8a0:	88 23       	and	r24, r24
     8a2:	11 f4       	brne	.+4      	; 0x8a8 <DComp_NextCDCDataInterface+0x18>
     8a4:	87 81       	ldd	r24, Z+7	; 0x07
     8a6:	81 11       	cpse	r24, r1
     8a8:	82 e0       	ldi	r24, 0x02	; 2
			return DESCRIPTOR_SEARCH_Found;
		}
	}

	return DESCRIPTOR_SEARCH_NotFound;
}
     8aa:	08 95       	ret

000008ac <DComp_NextCDCDataInterfaceEndpoint>:
 *  using a different comparator to determine if it is another CDC class interface).
 *
 *  \return A value from the DSEARCH_Return_ErrorCodes_t enum
 */
uint8_t DComp_NextCDCDataInterfaceEndpoint(void* CurrentDescriptor)
{
     8ac:	fc 01       	movw	r30, r24
	USB_Descriptor_Header_t* Header = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Header_t);

	if (Header->Type == DTYPE_Endpoint)
     8ae:	81 81       	ldd	r24, Z+1	; 0x01
     8b0:	85 30       	cpi	r24, 0x05	; 5
     8b2:	49 f4       	brne	.+18     	; 0x8c6 <DComp_NextCDCDataInterfaceEndpoint+0x1a>
	{
		USB_Descriptor_Endpoint_t* Endpoint = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Endpoint_t);

		/* Check the endpoint type, break out if correct BULK or INTERRUPT type endpoint found */
		if (((Endpoint->Attributes & EP_TYPE_MASK) == EP_TYPE_BULK) || 
     8b4:	83 81       	ldd	r24, Z+3	; 0x03
     8b6:	90 e0       	ldi	r25, 0x00	; 0
     8b8:	83 70       	andi	r24, 0x03	; 3
     8ba:	90 70       	andi	r25, 0x00	; 0
     8bc:	02 97       	sbiw	r24, 0x02	; 2
     8be:	02 97       	sbiw	r24, 0x02	; 2
     8c0:	30 f4       	brcc	.+12     	; 0x8ce <DComp_NextCDCDataInterfaceEndpoint+0x22>
     8c2:	80 e0       	ldi	r24, 0x00	; 0
     8c4:	08 95       	ret
		    ((Endpoint->Attributes & EP_TYPE_MASK) == EP_TYPE_INTERRUPT))
		{
			return DESCRIPTOR_SEARCH_Found;
		}
	}
	else if (Header->Type == DTYPE_Interface)
     8c6:	84 30       	cpi	r24, 0x04	; 4
     8c8:	11 f4       	brne	.+4      	; 0x8ce <DComp_NextCDCDataInterfaceEndpoint+0x22>
     8ca:	81 e0       	ldi	r24, 0x01	; 1
     8cc:	08 95       	ret
     8ce:	82 e0       	ldi	r24, 0x02	; 2
	{
		return DESCRIPTOR_SEARCH_Fail;
	}

	return DESCRIPTOR_SEARCH_NotFound;
}
     8d0:	08 95       	ret

000008d2 <ProcessConfigurationDescriptor>:
 *  This routine searches for a RNDIS interface descriptor containing bulk data IN and OUT endpoints, and an interrupt event endpoint.
 *
 *  \return An error code from the \ref RNDISHost_GetConfigDescriptorDataCodes_t enum.
 */
uint8_t ProcessConfigurationDescriptor(void)
{
     8d2:	6f 92       	push	r6
     8d4:	7f 92       	push	r7
     8d6:	8f 92       	push	r8
     8d8:	9f 92       	push	r9
     8da:	af 92       	push	r10
     8dc:	bf 92       	push	r11
     8de:	cf 92       	push	r12
     8e0:	df 92       	push	r13
     8e2:	ef 92       	push	r14
     8e4:	ff 92       	push	r15
     8e6:	0f 93       	push	r16
     8e8:	1f 93       	push	r17
     8ea:	df 93       	push	r29
     8ec:	cf 93       	push	r28
     8ee:	cd b7       	in	r28, 0x3d	; 61
     8f0:	de b7       	in	r29, 0x3e	; 62
     8f2:	c4 50       	subi	r28, 0x04	; 4
     8f4:	d2 40       	sbci	r29, 0x02	; 2
     8f6:	0f b6       	in	r0, 0x3f	; 63
     8f8:	f8 94       	cli
     8fa:	de bf       	out	0x3e, r29	; 62
     8fc:	0f be       	out	0x3f, r0	; 63
     8fe:	cd bf       	out	0x3d, r28	; 61
	uint8_t  ConfigDescriptorData[512];
	void*    CurrConfigLocation = ConfigDescriptorData;
     900:	ae 01       	movw	r20, r28
     902:	4b 5f       	subi	r20, 0xFB	; 251
     904:	5f 4f       	sbci	r21, 0xFF	; 255
     906:	5a 83       	std	Y+2, r21	; 0x02
     908:	49 83       	std	Y+1, r20	; 0x01
	USB_Descriptor_Endpoint_t*  DataINEndpoint         = NULL;
	USB_Descriptor_Endpoint_t*  DataOUTEndpoint        = NULL;
	USB_Descriptor_Endpoint_t*  NotificationEndpoint   = NULL;

	/* Retrieve the entire configuration descriptor into the allocated buffer */
	switch (USB_Host_GetDeviceConfigDescriptor(1, &CurrConfigBytesRem, ConfigDescriptorData, sizeof(ConfigDescriptorData)))
     90a:	8e 01       	movw	r16, r28
     90c:	0d 5f       	subi	r16, 0xFD	; 253
     90e:	1f 4f       	sbci	r17, 0xFF	; 255
     910:	81 e0       	ldi	r24, 0x01	; 1
     912:	b8 01       	movw	r22, r16
     914:	20 e0       	ldi	r18, 0x00	; 0
     916:	32 e0       	ldi	r19, 0x02	; 2
     918:	64 d6       	rcall	.+3272   	; 0x15e2 <USB_Host_GetDeviceConfigDescriptor>
     91a:	85 30       	cpi	r24, 0x05	; 5
     91c:	29 f0       	breq	.+10     	; 0x928 <ProcessConfigurationDescriptor+0x56>
     91e:	86 30       	cpi	r24, 0x06	; 6
     920:	91 f0       	breq	.+36     	; 0x946 <ProcessConfigurationDescriptor+0x74>
     922:	88 23       	and	r24, r24
     924:	19 f0       	breq	.+6      	; 0x92c <ProcessConfigurationDescriptor+0x5a>
     926:	11 c0       	rjmp	.+34     	; 0x94a <ProcessConfigurationDescriptor+0x78>
     928:	82 e0       	ldi	r24, 0x02	; 2
     92a:	6b c0       	rjmp	.+214    	; 0xa02 <ProcessConfigurationDescriptor+0x130>
     92c:	66 24       	eor	r6, r6
     92e:	77 24       	eor	r7, r7
     930:	ee 24       	eor	r14, r14
     932:	ff 24       	eor	r15, r15
     934:	cc 24       	eor	r12, r12
     936:	dd 24       	eor	r13, r13
     938:	aa 24       	eor	r10, r10
     93a:	bb 24       	eor	r11, r11
	}

	while (!(DataINEndpoint) || !(DataOUTEndpoint) || !(NotificationEndpoint))
	{
		/* See if we've found a likely compatible interface, and if there is an endpoint within that interface */
		if (!(RNDISControlInterface) ||
     93c:	48 01       	movw	r8, r16
     93e:	8e 01       	movw	r16, r28
     940:	0f 5f       	subi	r16, 0xFF	; 255
     942:	1f 4f       	sbci	r17, 0xFF	; 255
     944:	08 c0       	rjmp	.+16     	; 0x956 <ProcessConfigurationDescriptor+0x84>
	USB_Descriptor_Endpoint_t*  DataINEndpoint         = NULL;
	USB_Descriptor_Endpoint_t*  DataOUTEndpoint        = NULL;
	USB_Descriptor_Endpoint_t*  NotificationEndpoint   = NULL;

	/* Retrieve the entire configuration descriptor into the allocated buffer */
	switch (USB_Host_GetDeviceConfigDescriptor(1, &CurrConfigBytesRem, ConfigDescriptorData, sizeof(ConfigDescriptorData)))
     946:	83 e0       	ldi	r24, 0x03	; 3
     948:	5c c0       	rjmp	.+184    	; 0xa02 <ProcessConfigurationDescriptor+0x130>
     94a:	81 e0       	ldi	r24, 0x01	; 1
     94c:	5a c0       	rjmp	.+180    	; 0xa02 <ProcessConfigurationDescriptor+0x130>
		case HOST_GETCONFIG_InvalidData:
			return InvalidConfigDataReturned;
		case HOST_GETCONFIG_BuffOverflow:
			return DescriptorTooLarge;
		default:
			return ControlError;
     94e:	cc 24       	eor	r12, r12
     950:	dd 24       	eor	r13, r13
     952:	ee 24       	eor	r14, r14
     954:	ff 24       	eor	r15, r15
	}

	while (!(DataINEndpoint) || !(DataOUTEndpoint) || !(NotificationEndpoint))
	{
		/* See if we've found a likely compatible interface, and if there is an endpoint within that interface */
		if (!(RNDISControlInterface) ||
     956:	61 14       	cp	r6, r1
     958:	71 04       	cpc	r7, r1
     95a:	39 f0       	breq	.+14     	; 0x96a <ProcessConfigurationDescriptor+0x98>
     95c:	c4 01       	movw	r24, r8
     95e:	b8 01       	movw	r22, r16
     960:	46 e5       	ldi	r20, 0x56	; 86
     962:	54 e0       	ldi	r21, 0x04	; 4
     964:	fd d5       	rcall	.+3066   	; 0x1560 <USB_GetNextDescriptorComp>
     966:	88 23       	and	r24, r24
     968:	a9 f0       	breq	.+42     	; 0x994 <ProcessConfigurationDescriptor+0xc2>
		    USB_GetNextDescriptorComp(&CurrConfigBytesRem, &CurrConfigLocation,
		                              DComp_NextCDCDataInterfaceEndpoint) != DESCRIPTOR_SEARCH_COMP_Found)
		{
			/* Check if we have already found the control interface's notification endpoint or not */
			if (NotificationEndpoint)
     96a:	a1 14       	cp	r10, r1
     96c:	b1 04       	cpc	r11, r1
     96e:	41 f0       	breq	.+16     	; 0x980 <ProcessConfigurationDescriptor+0xae>
			{
				/* Get the next RNDIS data interface from the configuration descriptor */
				if (USB_GetNextDescriptorComp(&CurrConfigBytesRem, &CurrConfigLocation,
     970:	c4 01       	movw	r24, r8
     972:	b8 01       	movw	r22, r16
     974:	48 e4       	ldi	r20, 0x48	; 72
     976:	54 e0       	ldi	r21, 0x04	; 4
     978:	f3 d5       	rcall	.+3046   	; 0x1560 <USB_GetNextDescriptorComp>
     97a:	88 23       	and	r24, r24
     97c:	41 f3       	breq	.-48     	; 0x94e <ProcessConfigurationDescriptor+0x7c>
     97e:	40 c0       	rjmp	.+128    	; 0xa00 <ProcessConfigurationDescriptor+0x12e>
				DataOUTEndpoint      = NULL;
			}
			else
			{
				/* Get the next RNDIS control interface from the configuration descriptor */
				if (USB_GetNextDescriptorComp(&CurrConfigBytesRem, &CurrConfigLocation,
     980:	c4 01       	movw	r24, r8
     982:	b8 01       	movw	r22, r16
     984:	47 e3       	ldi	r20, 0x37	; 55
     986:	54 e0       	ldi	r21, 0x04	; 4
     988:	eb d5       	rcall	.+3030   	; 0x1560 <USB_GetNextDescriptorComp>
     98a:	88 23       	and	r24, r24
     98c:	c9 f5       	brne	.+114    	; 0xa00 <ProcessConfigurationDescriptor+0x12e>
					/* Descriptor not found, error out */
					return NoCompatibleInterfaceFound;
				}

				/* Save the interface in case we need to refer back to it later */
				RNDISControlInterface = DESCRIPTOR_PCAST(CurrConfigLocation, USB_Descriptor_Interface_t);
     98e:	69 80       	ldd	r6, Y+1	; 0x01
     990:	7a 80       	ldd	r7, Y+2	; 0x02
     992:	0e c0       	rjmp	.+28     	; 0x9b0 <ProcessConfigurationDescriptor+0xde>
			/* Skip the remainder of the loop as we have not found an endpoint yet */
			continue;
		}

		/* Retrieve the endpoint address from the endpoint descriptor */
		USB_Descriptor_Endpoint_t* EndpointData = DESCRIPTOR_PCAST(CurrConfigLocation, USB_Descriptor_Endpoint_t);
     994:	e9 81       	ldd	r30, Y+1	; 0x01
     996:	fa 81       	ldd	r31, Y+2	; 0x02

		/* If the endpoint is a IN type endpoint */
		if (EndpointData->EndpointAddress & ENDPOINT_DESCRIPTOR_DIR_IN)
     998:	82 81       	ldd	r24, Z+2	; 0x02
     99a:	87 fd       	sbrc	r24, 7
     99c:	02 c0       	rjmp	.+4      	; 0x9a2 <ProcessConfigurationDescriptor+0xd0>
     99e:	6f 01       	movw	r12, r30
     9a0:	07 c0       	rjmp	.+14     	; 0x9b0 <ProcessConfigurationDescriptor+0xde>
		{
			/* Check if the found endpoint is a interrupt or bulk type descriptor */
			if ((EndpointData->Attributes & EP_TYPE_MASK) == EP_TYPE_INTERRUPT)
     9a2:	83 81       	ldd	r24, Z+3	; 0x03
     9a4:	83 70       	andi	r24, 0x03	; 3
     9a6:	83 30       	cpi	r24, 0x03	; 3
     9a8:	11 f0       	breq	.+4      	; 0x9ae <ProcessConfigurationDescriptor+0xdc>
     9aa:	7f 01       	movw	r14, r30
     9ac:	01 c0       	rjmp	.+2      	; 0x9b0 <ProcessConfigurationDescriptor+0xde>
     9ae:	5f 01       	movw	r10, r30
			return DescriptorTooLarge;
		default:
			return ControlError;
	}

	while (!(DataINEndpoint) || !(DataOUTEndpoint) || !(NotificationEndpoint))
     9b0:	e1 14       	cp	r14, r1
     9b2:	f1 04       	cpc	r15, r1
     9b4:	81 f2       	breq	.-96     	; 0x956 <ProcessConfigurationDescriptor+0x84>
     9b6:	c1 14       	cp	r12, r1
     9b8:	d1 04       	cpc	r13, r1
     9ba:	69 f2       	breq	.-102    	; 0x956 <ProcessConfigurationDescriptor+0x84>
     9bc:	a1 14       	cp	r10, r1
     9be:	b1 04       	cpc	r11, r1
     9c0:	51 f2       	breq	.-108    	; 0x956 <ProcessConfigurationDescriptor+0x84>
			DataOUTEndpoint = EndpointData;
		}
	}

	/* Configure the RNDIS data IN pipe */
	Pipe_ConfigurePipe(RNDIS_DATA_IN_PIPE, EP_TYPE_BULK, PIPE_TOKEN_IN,
     9c2:	f7 01       	movw	r30, r14
     9c4:	04 81       	ldd	r16, Z+4	; 0x04
     9c6:	15 81       	ldd	r17, Z+5	; 0x05
     9c8:	81 e0       	ldi	r24, 0x01	; 1
     9ca:	62 e0       	ldi	r22, 0x02	; 2
     9cc:	40 e1       	ldi	r20, 0x10	; 16
     9ce:	22 81       	ldd	r18, Z+2	; 0x02
     9d0:	ee 24       	eor	r14, r14
     9d2:	3b d4       	rcall	.+2166   	; 0x124a <Pipe_ConfigurePipe>
	                   DataINEndpoint->EndpointAddress, DataINEndpoint->EndpointSize, PIPE_BANK_SINGLE);

	/* Configure the RNDIS data OUT pipe */
	Pipe_ConfigurePipe(RNDIS_DATA_OUT_PIPE, EP_TYPE_BULK, PIPE_TOKEN_OUT,
     9d4:	f6 01       	movw	r30, r12
     9d6:	04 81       	ldd	r16, Z+4	; 0x04
     9d8:	15 81       	ldd	r17, Z+5	; 0x05
     9da:	82 e0       	ldi	r24, 0x02	; 2
     9dc:	62 e0       	ldi	r22, 0x02	; 2
     9de:	40 e2       	ldi	r20, 0x20	; 32
     9e0:	22 81       	ldd	r18, Z+2	; 0x02
     9e2:	33 d4       	rcall	.+2150   	; 0x124a <Pipe_ConfigurePipe>
					   DataOUTEndpoint->EndpointAddress, DataOUTEndpoint->EndpointSize, PIPE_BANK_SINGLE);

	/* Configure the RNDIS notification pipe */
	Pipe_ConfigurePipe(RNDIS_NOTIFICATION_PIPE, EP_TYPE_INTERRUPT, PIPE_TOKEN_IN,
     9e4:	f5 01       	movw	r30, r10
     9e6:	04 81       	ldd	r16, Z+4	; 0x04
     9e8:	15 81       	ldd	r17, Z+5	; 0x05
     9ea:	83 e0       	ldi	r24, 0x03	; 3
     9ec:	63 e0       	ldi	r22, 0x03	; 3
     9ee:	40 e1       	ldi	r20, 0x10	; 16
     9f0:	22 81       	ldd	r18, Z+2	; 0x02
     9f2:	2b d4       	rcall	.+2134   	; 0x124a <Pipe_ConfigurePipe>
					   NotificationEndpoint->EndpointAddress, NotificationEndpoint->EndpointSize, PIPE_BANK_SINGLE);
	Pipe_SetInterruptPeriod(NotificationEndpoint->PollingIntervalMS);
     9f4:	f5 01       	movw	r30, r10
     9f6:	86 81       	ldd	r24, Z+6	; 0x06
			 *  \param[in] Milliseconds  Number of milliseconds between each pipe poll.
			 */
			static inline void Pipe_SetInterruptPeriod(const uint8_t Milliseconds) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetInterruptPeriod(const uint8_t Milliseconds)
			{
				UPCFG2X = Milliseconds;
     9f8:	80 93 ad 00 	sts	0x00AD, r24
     9fc:	80 e0       	ldi	r24, 0x00	; 0
     9fe:	01 c0       	rjmp	.+2      	; 0xa02 <ProcessConfigurationDescriptor+0x130>

	/* Valid data found, return success */
	return SuccessfulConfigRead;
     a00:	84 e0       	ldi	r24, 0x04	; 4
}
     a02:	cc 5f       	subi	r28, 0xFC	; 252
     a04:	dd 4f       	sbci	r29, 0xFD	; 253
     a06:	0f b6       	in	r0, 0x3f	; 63
     a08:	f8 94       	cli
     a0a:	de bf       	out	0x3e, r29	; 62
     a0c:	0f be       	out	0x3f, r0	; 63
     a0e:	cd bf       	out	0x3d, r28	; 61
     a10:	cf 91       	pop	r28
     a12:	df 91       	pop	r29
     a14:	1f 91       	pop	r17
     a16:	0f 91       	pop	r16
     a18:	ff 90       	pop	r15
     a1a:	ef 90       	pop	r14
     a1c:	df 90       	pop	r13
     a1e:	cf 90       	pop	r12
     a20:	bf 90       	pop	r11
     a22:	af 90       	pop	r10
     a24:	9f 90       	pop	r9
     a26:	8f 90       	pop	r8
     a28:	7f 90       	pop	r7
     a2a:	6f 90       	pop	r6
     a2c:	08 95       	ret

00000a2e <RNDIS_GetPacketLength>:
 *  \param[out] PacketLength  Size of the packet currently in the pipe
 *
 *  \return A value from the Pipe_Stream_RW_ErrorCodes_t enum
 */
uint8_t RNDIS_GetPacketLength(uint16_t* const PacketLength)
{
     a2e:	ef 92       	push	r14
     a30:	ff 92       	push	r15
     a32:	1f 93       	push	r17
     a34:	df 93       	push	r29
     a36:	cf 93       	push	r28
     a38:	cd b7       	in	r28, 0x3d	; 61
     a3a:	de b7       	in	r29, 0x3e	; 62
     a3c:	ac 97       	sbiw	r28, 0x2c	; 44
     a3e:	0f b6       	in	r0, 0x3f	; 63
     a40:	f8 94       	cli
     a42:	de bf       	out	0x3e, r29	; 62
     a44:	0f be       	out	0x3f, r0	; 63
     a46:	cd bf       	out	0x3d, r28	; 61
     a48:	7c 01       	movw	r14, r24
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
     a4a:	81 e0       	ldi	r24, 0x01	; 1
     a4c:	80 93 a7 00 	sts	0x00A7, r24
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
     a50:	80 91 aa 00 	lds	r24, 0x00AA
     a54:	8f 7c       	andi	r24, 0xCF	; 207
     a56:	80 61       	ori	r24, 0x10	; 16
     a58:	80 93 aa 00 	sts	0x00AA, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
     a5c:	80 91 a9 00 	lds	r24, 0x00A9
     a60:	8f 7b       	andi	r24, 0xBF	; 191
     a62:	80 93 a9 00 	sts	0x00A9, r24
			 *  \return Boolean true if the currently selected pipe may be read from or written to, depending on its direction.
			 */
			static inline bool Pipe_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsReadWriteAllowed(void)
			{
				return ((UPINTX & (1 << RWAL)) ? true : false);
     a66:	80 91 a6 00 	lds	r24, 0x00A6

	Pipe_SelectPipe(RNDIS_DATA_IN_PIPE);
	Pipe_SetPipeToken(PIPE_TOKEN_IN);
	Pipe_Unfreeze();

	if (!(Pipe_IsReadWriteAllowed()))
     a6a:	85 fd       	sbrc	r24, 5
     a6c:	0a c0       	rjmp	.+20     	; 0xa82 <RNDIS_GetPacketLength+0x54>
	{
		*PacketLength = 0;
     a6e:	f7 01       	movw	r30, r14
     a70:	11 82       	std	Z+1, r1	; 0x01
     a72:	10 82       	st	Z, r1

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
     a74:	80 91 a9 00 	lds	r24, 0x00A9
     a78:	80 64       	ori	r24, 0x40	; 64
     a7a:	80 93 a9 00 	sts	0x00A9, r24
     a7e:	10 e0       	ldi	r17, 0x00	; 0
     a80:	16 c0       	rjmp	.+44     	; 0xaae <RNDIS_GetPacketLength+0x80>
		return PIPE_RWSTREAM_NoError;
	}

	RNDIS_Packet_Message_t DeviceMessage;

	if ((ErrorCode = Pipe_Read_Stream_LE(&DeviceMessage, sizeof(RNDIS_Packet_Message_t))) != PIPE_RWSTREAM_NoError)
     a82:	ce 01       	movw	r24, r28
     a84:	01 96       	adiw	r24, 0x01	; 1
     a86:	6c e2       	ldi	r22, 0x2C	; 44
     a88:	70 e0       	ldi	r23, 0x00	; 0
     a8a:	31 d7       	rcall	.+3682   	; 0x18ee <Pipe_Read_Stream_LE>
     a8c:	18 2f       	mov	r17, r24
     a8e:	88 23       	and	r24, r24
     a90:	71 f4       	brne	.+28     	; 0xaae <RNDIS_GetPacketLength+0x80>
	{
		return ErrorCode;
	}

	*PacketLength = (uint16_t)DeviceMessage.DataLength;
     a92:	8d 85       	ldd	r24, Y+13	; 0x0d
     a94:	9e 85       	ldd	r25, Y+14	; 0x0e
     a96:	f7 01       	movw	r30, r14
     a98:	91 83       	std	Z+1, r25	; 0x01
     a9a:	80 83       	st	Z, r24

	Pipe_Discard_Stream(DeviceMessage.DataOffset - (sizeof(RNDIS_Packet_Message_t) - sizeof(RNDIS_Message_Header_t)));
     a9c:	89 85       	ldd	r24, Y+9	; 0x09
     a9e:	9a 85       	ldd	r25, Y+10	; 0x0a
     aa0:	84 97       	sbiw	r24, 0x24	; 36
     aa2:	58 d7       	rcall	.+3760   	; 0x1954 <Pipe_Discard_Stream>
     aa4:	80 91 a9 00 	lds	r24, 0x00A9
     aa8:	80 64       	ori	r24, 0x40	; 64
     aaa:	80 93 a9 00 	sts	0x00A9, r24

	Pipe_Freeze();

	return PIPE_RWSTREAM_NoError;
}
     aae:	81 2f       	mov	r24, r17
     ab0:	ac 96       	adiw	r28, 0x2c	; 44
     ab2:	0f b6       	in	r0, 0x3f	; 63
     ab4:	f8 94       	cli
     ab6:	de bf       	out	0x3e, r29	; 62
     ab8:	0f be       	out	0x3f, r0	; 63
     aba:	cd bf       	out	0x3d, r28	; 61
     abc:	cf 91       	pop	r28
     abe:	df 91       	pop	r29
     ac0:	1f 91       	pop	r17
     ac2:	ff 90       	pop	r15
     ac4:	ef 90       	pop	r14
     ac6:	08 95       	ret

00000ac8 <RNDIS_GetEncapsulatedResponse>:
 *  \return A value from the USB_Host_SendControlErrorCodes_t enum
 */
uint8_t RNDIS_GetEncapsulatedResponse(void* const Buffer,
                                      const uint16_t Length)
{
	USB_ControlRequest = (USB_Request_Header_t)
     ac8:	21 ea       	ldi	r18, 0xA1	; 161
     aca:	20 93 3c 01 	sts	0x013C, r18
     ace:	21 e0       	ldi	r18, 0x01	; 1
     ad0:	20 93 3d 01 	sts	0x013D, r18
     ad4:	10 92 3f 01 	sts	0x013F, r1
     ad8:	10 92 3e 01 	sts	0x013E, r1
     adc:	10 92 41 01 	sts	0x0141, r1
     ae0:	10 92 40 01 	sts	0x0140, r1
     ae4:	70 93 43 01 	sts	0x0143, r23
     ae8:	60 93 42 01 	sts	0x0142, r22
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
     aec:	10 92 a7 00 	sts	0x00A7, r1

	/* Select the control pipe for the request transfer */
	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	return USB_Host_SendControlRequest(Buffer);
}
     af0:	fc c5       	rjmp	.+3064   	; 0x16ea <USB_Host_SendControlRequest>

00000af2 <RNDIS_SendEncapsulatedCommand>:
 *  \return A value from the USB_Host_SendControlErrorCodes_t enum
 */
uint8_t RNDIS_SendEncapsulatedCommand(void* const Buffer,
                                      const uint16_t Length)
{
	USB_ControlRequest = (USB_Request_Header_t)
     af2:	21 e2       	ldi	r18, 0x21	; 33
     af4:	20 93 3c 01 	sts	0x013C, r18
     af8:	10 92 3d 01 	sts	0x013D, r1
     afc:	10 92 3f 01 	sts	0x013F, r1
     b00:	10 92 3e 01 	sts	0x013E, r1
     b04:	10 92 41 01 	sts	0x0141, r1
     b08:	10 92 40 01 	sts	0x0140, r1
     b0c:	70 93 43 01 	sts	0x0143, r23
     b10:	60 93 42 01 	sts	0x0142, r22
     b14:	10 92 a7 00 	sts	0x00A7, r1

	/* Select the control pipe for the request transfer */
	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	return USB_Host_SendControlRequest(Buffer);
}
     b18:	e8 c5       	rjmp	.+3024   	; 0x16ea <USB_Host_SendControlRequest>

00000b1a <RNDIS_QueryRNDISProperty>:
 *          logical command failure
 */
uint8_t RNDIS_QueryRNDISProperty(const uint32_t Oid,
                                 void* Buffer,
                                 const uint16_t MaxLength)
{
     b1a:	7f 92       	push	r7
     b1c:	8f 92       	push	r8
     b1e:	9f 92       	push	r9
     b20:	af 92       	push	r10
     b22:	bf 92       	push	r11
     b24:	cf 92       	push	r12
     b26:	df 92       	push	r13
     b28:	ef 92       	push	r14
     b2a:	ff 92       	push	r15
     b2c:	0f 93       	push	r16
     b2e:	1f 93       	push	r17
     b30:	df 93       	push	r29
     b32:	cf 93       	push	r28
     b34:	cd b7       	in	r28, 0x3d	; 61
     b36:	de b7       	in	r29, 0x3e	; 62
     b38:	6c 97       	sbiw	r28, 0x1c	; 28
     b3a:	0f b6       	in	r0, 0x3f	; 63
     b3c:	f8 94       	cli
     b3e:	de bf       	out	0x3e, r29	; 62
     b40:	0f be       	out	0x3f, r0	; 63
     b42:	cd bf       	out	0x3d, r28	; 61
     b44:	04 2f       	mov	r16, r20
     b46:	75 2e       	mov	r7, r21
     b48:	69 01       	movw	r12, r18
	  return RNDIS_COMMAND_FAILED;

	memcpy(Buffer, &QueryMessageResponseData.ContiguousBuffer, MaxLength);

	return HOST_SENDCONTROL_Successful;
}
     b4a:	8d b6       	in	r8, 0x3d	; 61
     b4c:	9e b6       	in	r9, 0x3e	; 62

	struct
	{
		RNDIS_Query_Complete_t QueryMessageResponse;
		uint8_t                ContiguousBuffer[MaxLength];
	} QueryMessageResponseData;
     b4e:	28 e1       	ldi	r18, 0x18	; 24
     b50:	a2 2e       	mov	r10, r18
     b52:	b1 2c       	mov	r11, r1
     b54:	ac 0c       	add	r10, r12
     b56:	bd 1c       	adc	r11, r13
     b58:	2d b7       	in	r18, 0x3d	; 61
     b5a:	3e b7       	in	r19, 0x3e	; 62
     b5c:	2a 19       	sub	r18, r10
     b5e:	3b 09       	sbc	r19, r11
     b60:	0f b6       	in	r0, 0x3f	; 63
     b62:	f8 94       	cli
     b64:	3e bf       	out	0x3e, r19	; 62
     b66:	0f be       	out	0x3f, r0	; 63
     b68:	2d bf       	out	0x3d, r18	; 61
     b6a:	ed b6       	in	r14, 0x3d	; 61
     b6c:	fe b6       	in	r15, 0x3e	; 62
     b6e:	08 94       	sec
     b70:	e1 1c       	adc	r14, r1
     b72:	f1 1c       	adc	r15, r1

	QueryMessage.MessageType    = REMOTE_NDIS_QUERY_MSG;
     b74:	24 e0       	ldi	r18, 0x04	; 4
     b76:	30 e0       	ldi	r19, 0x00	; 0
     b78:	40 e0       	ldi	r20, 0x00	; 0
     b7a:	50 e0       	ldi	r21, 0x00	; 0
     b7c:	29 83       	std	Y+1, r18	; 0x01
     b7e:	3a 83       	std	Y+2, r19	; 0x02
     b80:	4b 83       	std	Y+3, r20	; 0x03
     b82:	5c 83       	std	Y+4, r21	; 0x04
	QueryMessage.MessageLength  = sizeof(RNDIS_Query_Message_t);
     b84:	2c e1       	ldi	r18, 0x1C	; 28
     b86:	30 e0       	ldi	r19, 0x00	; 0
     b88:	40 e0       	ldi	r20, 0x00	; 0
     b8a:	50 e0       	ldi	r21, 0x00	; 0
     b8c:	2d 83       	std	Y+5, r18	; 0x05
     b8e:	3e 83       	std	Y+6, r19	; 0x06
     b90:	4f 83       	std	Y+7, r20	; 0x07
     b92:	58 87       	std	Y+8, r21	; 0x08
	QueryMessage.RequestId      = RequestID++;
     b94:	20 91 34 01 	lds	r18, 0x0134
     b98:	30 91 35 01 	lds	r19, 0x0135
     b9c:	40 91 36 01 	lds	r20, 0x0136
     ba0:	50 91 37 01 	lds	r21, 0x0137
     ba4:	29 87       	std	Y+9, r18	; 0x09
     ba6:	3a 87       	std	Y+10, r19	; 0x0a
     ba8:	4b 87       	std	Y+11, r20	; 0x0b
     baa:	5c 87       	std	Y+12, r21	; 0x0c
     bac:	2f 5f       	subi	r18, 0xFF	; 255
     bae:	3f 4f       	sbci	r19, 0xFF	; 255
     bb0:	4f 4f       	sbci	r20, 0xFF	; 255
     bb2:	5f 4f       	sbci	r21, 0xFF	; 255
     bb4:	20 93 34 01 	sts	0x0134, r18
     bb8:	30 93 35 01 	sts	0x0135, r19
     bbc:	40 93 36 01 	sts	0x0136, r20
     bc0:	50 93 37 01 	sts	0x0137, r21

	QueryMessage.Oid            = Oid;
     bc4:	6d 87       	std	Y+13, r22	; 0x0d
     bc6:	7e 87       	std	Y+14, r23	; 0x0e
     bc8:	8f 87       	std	Y+15, r24	; 0x0f
     bca:	98 8b       	std	Y+16, r25	; 0x10
	QueryMessage.InformationBufferLength = 0;
     bcc:	19 8a       	std	Y+17, r1	; 0x11
     bce:	1a 8a       	std	Y+18, r1	; 0x12
     bd0:	1b 8a       	std	Y+19, r1	; 0x13
     bd2:	1c 8a       	std	Y+20, r1	; 0x14
	QueryMessage.InformationBufferOffset = 0;
     bd4:	1d 8a       	std	Y+21, r1	; 0x15
     bd6:	1e 8a       	std	Y+22, r1	; 0x16
     bd8:	1f 8a       	std	Y+23, r1	; 0x17
     bda:	18 8e       	std	Y+24, r1	; 0x18
	QueryMessage.DeviceVcHandle = 0;
     bdc:	19 8e       	std	Y+25, r1	; 0x19
     bde:	1a 8e       	std	Y+26, r1	; 0x1a
     be0:	1b 8e       	std	Y+27, r1	; 0x1b
     be2:	1c 8e       	std	Y+28, r1	; 0x1c

	if ((ErrorCode = RNDIS_SendEncapsulatedCommand(&QueryMessage,
     be4:	ce 01       	movw	r24, r28
     be6:	01 96       	adiw	r24, 0x01	; 1
     be8:	6c e1       	ldi	r22, 0x1C	; 28
     bea:	70 e0       	ldi	r23, 0x00	; 0
     bec:	82 df       	rcall	.-252    	; 0xaf2 <RNDIS_SendEncapsulatedCommand>
     bee:	18 2f       	mov	r17, r24
     bf0:	88 23       	and	r24, r24
     bf2:	c9 f4       	brne	.+50     	; 0xc26 <RNDIS_QueryRNDISProperty+0x10c>
	                                               sizeof(RNDIS_Query_Message_t))) != HOST_SENDCONTROL_Successful)
	{
		return ErrorCode;
	}

	if ((ErrorCode = RNDIS_GetEncapsulatedResponse(&QueryMessageResponseData,
     bf4:	c7 01       	movw	r24, r14
     bf6:	b5 01       	movw	r22, r10
     bf8:	67 df       	rcall	.-306    	; 0xac8 <RNDIS_GetEncapsulatedResponse>
     bfa:	18 2f       	mov	r17, r24
     bfc:	88 23       	and	r24, r24
     bfe:	99 f4       	brne	.+38     	; 0xc26 <RNDIS_QueryRNDISProperty+0x10c>
	                                               sizeof(QueryMessageResponseData))) != HOST_SENDCONTROL_Successful)
	{
		return ErrorCode;
	}

	if (QueryMessageResponseData.QueryMessageResponse.Status != REMOTE_NDIS_STATUS_SUCCESS)
     c00:	f7 01       	movw	r30, r14
     c02:	84 85       	ldd	r24, Z+12	; 0x0c
     c04:	95 85       	ldd	r25, Z+13	; 0x0d
     c06:	a6 85       	ldd	r26, Z+14	; 0x0e
     c08:	b7 85       	ldd	r27, Z+15	; 0x0f
     c0a:	00 97       	sbiw	r24, 0x00	; 0
     c0c:	a1 05       	cpc	r26, r1
     c0e:	b1 05       	cpc	r27, r1
     c10:	11 f0       	breq	.+4      	; 0xc16 <RNDIS_QueryRNDISProperty+0xfc>
     c12:	10 ec       	ldi	r17, 0xC0	; 192
     c14:	08 c0       	rjmp	.+16     	; 0xc26 <RNDIS_QueryRNDISProperty+0x10c>
	  return RNDIS_COMMAND_FAILED;

	memcpy(Buffer, &QueryMessageResponseData.ContiguousBuffer, MaxLength);
     c16:	97 01       	movw	r18, r14
     c18:	28 5e       	subi	r18, 0xE8	; 232
     c1a:	3f 4f       	sbci	r19, 0xFF	; 255
     c1c:	80 2f       	mov	r24, r16
     c1e:	97 2d       	mov	r25, r7
     c20:	b9 01       	movw	r22, r18
     c22:	a6 01       	movw	r20, r12
     c24:	ea d6       	rcall	.+3540   	; 0x19fa <memcpy>

	return HOST_SENDCONTROL_Successful;
}
     c26:	81 2f       	mov	r24, r17
     c28:	0f b6       	in	r0, 0x3f	; 63
     c2a:	f8 94       	cli
     c2c:	9e be       	out	0x3e, r9	; 62
     c2e:	0f be       	out	0x3f, r0	; 63
     c30:	8d be       	out	0x3d, r8	; 61
     c32:	6c 96       	adiw	r28, 0x1c	; 28
     c34:	0f b6       	in	r0, 0x3f	; 63
     c36:	f8 94       	cli
     c38:	de bf       	out	0x3e, r29	; 62
     c3a:	0f be       	out	0x3f, r0	; 63
     c3c:	cd bf       	out	0x3d, r28	; 61
     c3e:	cf 91       	pop	r28
     c40:	df 91       	pop	r29
     c42:	1f 91       	pop	r17
     c44:	0f 91       	pop	r16
     c46:	ff 90       	pop	r15
     c48:	ef 90       	pop	r14
     c4a:	df 90       	pop	r13
     c4c:	cf 90       	pop	r12
     c4e:	bf 90       	pop	r11
     c50:	af 90       	pop	r10
     c52:	9f 90       	pop	r9
     c54:	8f 90       	pop	r8
     c56:	7f 90       	pop	r7
     c58:	08 95       	ret

00000c5a <RNDIS_SetRNDISProperty>:
 *          logical command failure
 */
uint8_t RNDIS_SetRNDISProperty(const uint32_t Oid,
                               void* Buffer,
                               const uint16_t Length)
{
     c5a:	6f 92       	push	r6
     c5c:	7f 92       	push	r7
     c5e:	8f 92       	push	r8
     c60:	9f 92       	push	r9
     c62:	af 92       	push	r10
     c64:	bf 92       	push	r11
     c66:	cf 92       	push	r12
     c68:	df 92       	push	r13
     c6a:	ef 92       	push	r14
     c6c:	ff 92       	push	r15
     c6e:	0f 93       	push	r16
     c70:	1f 93       	push	r17
     c72:	df 93       	push	r29
     c74:	cf 93       	push	r28
     c76:	cd b7       	in	r28, 0x3d	; 61
     c78:	de b7       	in	r29, 0x3e	; 62
     c7a:	60 97       	sbiw	r28, 0x10	; 16
     c7c:	0f b6       	in	r0, 0x3f	; 63
     c7e:	f8 94       	cli
     c80:	de bf       	out	0x3e, r29	; 62
     c82:	0f be       	out	0x3f, r0	; 63
     c84:	cd bf       	out	0x3d, r28	; 61

	if (SetMessageResponse.Status != REMOTE_NDIS_STATUS_SUCCESS)
	  return RNDIS_COMMAND_FAILED;

	return HOST_SENDCONTROL_Successful;
}
     c86:	6d b6       	in	r6, 0x3d	; 61
     c88:	7e b6       	in	r7, 0x3e	; 62

	struct
	{
		RNDIS_Set_Message_t SetMessage;
		uint8_t             ContiguousBuffer[Length];
	} SetMessageData;
     c8a:	bc e1       	ldi	r27, 0x1C	; 28
     c8c:	ab 2e       	mov	r10, r27
     c8e:	b1 2c       	mov	r11, r1
     c90:	a2 0e       	add	r10, r18
     c92:	b3 1e       	adc	r11, r19
     c94:	ed b7       	in	r30, 0x3d	; 61
     c96:	fe b7       	in	r31, 0x3e	; 62
     c98:	ea 19       	sub	r30, r10
     c9a:	fb 09       	sbc	r31, r11
     c9c:	0f b6       	in	r0, 0x3f	; 63
     c9e:	f8 94       	cli
     ca0:	fe bf       	out	0x3e, r31	; 62
     ca2:	0f be       	out	0x3f, r0	; 63
     ca4:	ed bf       	out	0x3d, r30	; 61
     ca6:	8d b6       	in	r8, 0x3d	; 61
     ca8:	9e b6       	in	r9, 0x3e	; 62
     caa:	08 94       	sec
     cac:	81 1c       	adc	r8, r1
     cae:	91 1c       	adc	r9, r1

	RNDIS_Set_Complete_t SetMessageResponse;

	SetMessageData.SetMessage.MessageType    = REMOTE_NDIS_SET_MSG;
     cb0:	a5 e0       	ldi	r26, 0x05	; 5
     cb2:	ea 2e       	mov	r14, r26
     cb4:	f1 2c       	mov	r15, r1
     cb6:	01 2d       	mov	r16, r1
     cb8:	11 2d       	mov	r17, r1
     cba:	e1 82       	std	Z+1, r14	; 0x01
     cbc:	f2 82       	std	Z+2, r15	; 0x02
     cbe:	03 83       	std	Z+3, r16	; 0x03
     cc0:	14 83       	std	Z+4, r17	; 0x04
	SetMessageData.SetMessage.MessageLength  = sizeof(RNDIS_Set_Message_t) + Length;
     cc2:	cc 24       	eor	r12, r12
     cc4:	dd 24       	eor	r13, r13
     cc6:	f4 01       	movw	r30, r8
     cc8:	a4 82       	std	Z+4, r10	; 0x04
     cca:	b5 82       	std	Z+5, r11	; 0x05
     ccc:	c6 82       	std	Z+6, r12	; 0x06
     cce:	d7 82       	std	Z+7, r13	; 0x07
	SetMessageData.SetMessage.RequestId      = RequestID++;
     cd0:	e0 90 34 01 	lds	r14, 0x0134
     cd4:	f0 90 35 01 	lds	r15, 0x0135
     cd8:	00 91 36 01 	lds	r16, 0x0136
     cdc:	10 91 37 01 	lds	r17, 0x0137
     ce0:	e0 86       	std	Z+8, r14	; 0x08
     ce2:	f1 86       	std	Z+9, r15	; 0x09
     ce4:	02 87       	std	Z+10, r16	; 0x0a
     ce6:	13 87       	std	Z+11, r17	; 0x0b
     ce8:	08 94       	sec
     cea:	e1 1c       	adc	r14, r1
     cec:	f1 1c       	adc	r15, r1
     cee:	01 1d       	adc	r16, r1
     cf0:	11 1d       	adc	r17, r1
     cf2:	e0 92 34 01 	sts	0x0134, r14
     cf6:	f0 92 35 01 	sts	0x0135, r15
     cfa:	00 93 36 01 	sts	0x0136, r16
     cfe:	10 93 37 01 	sts	0x0137, r17

	SetMessageData.SetMessage.Oid            = Oid;
     d02:	64 87       	std	Z+12, r22	; 0x0c
     d04:	75 87       	std	Z+13, r23	; 0x0d
     d06:	86 87       	std	Z+14, r24	; 0x0e
     d08:	97 87       	std	Z+15, r25	; 0x0f
	SetMessageData.SetMessage.InformationBufferLength = Length;
     d0a:	c9 01       	movw	r24, r18
     d0c:	a0 e0       	ldi	r26, 0x00	; 0
     d0e:	b0 e0       	ldi	r27, 0x00	; 0
     d10:	80 8b       	std	Z+16, r24	; 0x10
     d12:	91 8b       	std	Z+17, r25	; 0x11
     d14:	a2 8b       	std	Z+18, r26	; 0x12
     d16:	b3 8b       	std	Z+19, r27	; 0x13
	SetMessageData.SetMessage.InformationBufferOffset = (sizeof(RNDIS_Set_Message_t) - sizeof(RNDIS_Message_Header_t));
     d18:	84 e1       	ldi	r24, 0x14	; 20
     d1a:	90 e0       	ldi	r25, 0x00	; 0
     d1c:	a0 e0       	ldi	r26, 0x00	; 0
     d1e:	b0 e0       	ldi	r27, 0x00	; 0
     d20:	84 8b       	std	Z+20, r24	; 0x14
     d22:	95 8b       	std	Z+21, r25	; 0x15
     d24:	a6 8b       	std	Z+22, r26	; 0x16
     d26:	b7 8b       	std	Z+23, r27	; 0x17
	SetMessageData.SetMessage.DeviceVcHandle = 0;
     d28:	10 8e       	std	Z+24, r1	; 0x18
     d2a:	11 8e       	std	Z+25, r1	; 0x19
     d2c:	12 8e       	std	Z+26, r1	; 0x1a
     d2e:	13 8e       	std	Z+27, r1	; 0x1b

	memcpy(&SetMessageData.ContiguousBuffer, Buffer, Length);
     d30:	6d b7       	in	r22, 0x3d	; 61
     d32:	7e b7       	in	r23, 0x3e	; 62
     d34:	63 5e       	subi	r22, 0xE3	; 227
     d36:	7f 4f       	sbci	r23, 0xFF	; 255
     d38:	cb 01       	movw	r24, r22
     d3a:	ba 01       	movw	r22, r20
     d3c:	a9 01       	movw	r20, r18
     d3e:	5d d6       	rcall	.+3258   	; 0x19fa <memcpy>

	if ((ErrorCode = RNDIS_SendEncapsulatedCommand(&SetMessageData,
     d40:	f4 01       	movw	r30, r8
     d42:	64 81       	ldd	r22, Z+4	; 0x04
     d44:	75 81       	ldd	r23, Z+5	; 0x05
     d46:	c4 01       	movw	r24, r8
     d48:	d4 de       	rcall	.-600    	; 0xaf2 <RNDIS_SendEncapsulatedCommand>
     d4a:	28 2f       	mov	r18, r24
     d4c:	88 23       	and	r24, r24
     d4e:	89 f4       	brne	.+34     	; 0xd72 <RNDIS_SetRNDISProperty+0x118>
	                                               SetMessageData.SetMessage.MessageLength)) != HOST_SENDCONTROL_Successful)
	{
		return ErrorCode;
	}

	if ((ErrorCode = RNDIS_GetEncapsulatedResponse(&SetMessageResponse,
     d50:	ce 01       	movw	r24, r28
     d52:	01 96       	adiw	r24, 0x01	; 1
     d54:	60 e1       	ldi	r22, 0x10	; 16
     d56:	70 e0       	ldi	r23, 0x00	; 0
     d58:	b7 de       	rcall	.-658    	; 0xac8 <RNDIS_GetEncapsulatedResponse>
     d5a:	28 2f       	mov	r18, r24
     d5c:	88 23       	and	r24, r24
     d5e:	49 f4       	brne	.+18     	; 0xd72 <RNDIS_SetRNDISProperty+0x118>
	                                               sizeof(RNDIS_Set_Complete_t))) != HOST_SENDCONTROL_Successful)
	{
		return ErrorCode;
	}

	if (SetMessageResponse.Status != REMOTE_NDIS_STATUS_SUCCESS)
     d60:	8d 85       	ldd	r24, Y+13	; 0x0d
     d62:	9e 85       	ldd	r25, Y+14	; 0x0e
     d64:	af 85       	ldd	r26, Y+15	; 0x0f
     d66:	b8 89       	ldd	r27, Y+16	; 0x10
     d68:	00 97       	sbiw	r24, 0x00	; 0
     d6a:	a1 05       	cpc	r26, r1
     d6c:	b1 05       	cpc	r27, r1
     d6e:	09 f0       	breq	.+2      	; 0xd72 <RNDIS_SetRNDISProperty+0x118>
     d70:	20 ec       	ldi	r18, 0xC0	; 192
	  return RNDIS_COMMAND_FAILED;

	return HOST_SENDCONTROL_Successful;
}
     d72:	82 2f       	mov	r24, r18
     d74:	0f b6       	in	r0, 0x3f	; 63
     d76:	f8 94       	cli
     d78:	7e be       	out	0x3e, r7	; 62
     d7a:	0f be       	out	0x3f, r0	; 63
     d7c:	6d be       	out	0x3d, r6	; 61
     d7e:	60 96       	adiw	r28, 0x10	; 16
     d80:	0f b6       	in	r0, 0x3f	; 63
     d82:	f8 94       	cli
     d84:	de bf       	out	0x3e, r29	; 62
     d86:	0f be       	out	0x3f, r0	; 63
     d88:	cd bf       	out	0x3d, r28	; 61
     d8a:	cf 91       	pop	r28
     d8c:	df 91       	pop	r29
     d8e:	1f 91       	pop	r17
     d90:	0f 91       	pop	r16
     d92:	ff 90       	pop	r15
     d94:	ef 90       	pop	r14
     d96:	df 90       	pop	r13
     d98:	cf 90       	pop	r12
     d9a:	bf 90       	pop	r11
     d9c:	af 90       	pop	r10
     d9e:	9f 90       	pop	r9
     da0:	8f 90       	pop	r8
     da2:	7f 90       	pop	r7
     da4:	6f 90       	pop	r6
     da6:	08 95       	ret

00000da8 <RNDIS_InitializeDevice>:
 *  \return A value from the USB_Host_SendControlErrorCodes_t enum or RNDIS_COMMAND_FAILED if the device returned a
 *          logical command failure
 */
uint8_t RNDIS_InitializeDevice(const uint16_t HostMaxPacketSize,
                               uint16_t* const DeviceMaxPacketSize)
{
     da8:	0f 93       	push	r16
     daa:	1f 93       	push	r17
     dac:	df 93       	push	r29
     dae:	cf 93       	push	r28
     db0:	cd b7       	in	r28, 0x3d	; 61
     db2:	de b7       	in	r29, 0x3e	; 62
     db4:	cc 54       	subi	r28, 0x4C	; 76
     db6:	d0 40       	sbci	r29, 0x00	; 0
     db8:	0f b6       	in	r0, 0x3f	; 63
     dba:	f8 94       	cli
     dbc:	de bf       	out	0x3e, r29	; 62
     dbe:	0f be       	out	0x3f, r0	; 63
     dc0:	cd bf       	out	0x3d, r28	; 61
     dc2:	8b 01       	movw	r16, r22
	uint8_t ErrorCode;

	RNDIS_Initialize_Message_t  InitMessage;
	RNDIS_Initialize_Complete_t InitMessageResponse;

	InitMessage.MessageType     = REMOTE_NDIS_INITIALIZE_MSG;
     dc4:	22 e0       	ldi	r18, 0x02	; 2
     dc6:	30 e0       	ldi	r19, 0x00	; 0
     dc8:	40 e0       	ldi	r20, 0x00	; 0
     dca:	50 e0       	ldi	r21, 0x00	; 0
     dcc:	29 83       	std	Y+1, r18	; 0x01
     dce:	3a 83       	std	Y+2, r19	; 0x02
     dd0:	4b 83       	std	Y+3, r20	; 0x03
     dd2:	5c 83       	std	Y+4, r21	; 0x04
	InitMessage.MessageLength   = sizeof(RNDIS_Initialize_Message_t);
     dd4:	28 e1       	ldi	r18, 0x18	; 24
     dd6:	30 e0       	ldi	r19, 0x00	; 0
     dd8:	40 e0       	ldi	r20, 0x00	; 0
     dda:	50 e0       	ldi	r21, 0x00	; 0
     ddc:	2d 83       	std	Y+5, r18	; 0x05
     dde:	3e 83       	std	Y+6, r19	; 0x06
     de0:	4f 83       	std	Y+7, r20	; 0x07
     de2:	58 87       	std	Y+8, r21	; 0x08
	InitMessage.RequestId       = RequestID++;
     de4:	20 91 34 01 	lds	r18, 0x0134
     de8:	30 91 35 01 	lds	r19, 0x0135
     dec:	40 91 36 01 	lds	r20, 0x0136
     df0:	50 91 37 01 	lds	r21, 0x0137
     df4:	29 87       	std	Y+9, r18	; 0x09
     df6:	3a 87       	std	Y+10, r19	; 0x0a
     df8:	4b 87       	std	Y+11, r20	; 0x0b
     dfa:	5c 87       	std	Y+12, r21	; 0x0c
     dfc:	2f 5f       	subi	r18, 0xFF	; 255
     dfe:	3f 4f       	sbci	r19, 0xFF	; 255
     e00:	4f 4f       	sbci	r20, 0xFF	; 255
     e02:	5f 4f       	sbci	r21, 0xFF	; 255
     e04:	20 93 34 01 	sts	0x0134, r18
     e08:	30 93 35 01 	sts	0x0135, r19
     e0c:	40 93 36 01 	sts	0x0136, r20
     e10:	50 93 37 01 	sts	0x0137, r21

	InitMessage.MajorVersion    = REMOTE_NDIS_VERSION_MAJOR;
     e14:	21 e0       	ldi	r18, 0x01	; 1
     e16:	30 e0       	ldi	r19, 0x00	; 0
     e18:	40 e0       	ldi	r20, 0x00	; 0
     e1a:	50 e0       	ldi	r21, 0x00	; 0
     e1c:	2d 87       	std	Y+13, r18	; 0x0d
     e1e:	3e 87       	std	Y+14, r19	; 0x0e
     e20:	4f 87       	std	Y+15, r20	; 0x0f
     e22:	58 8b       	std	Y+16, r21	; 0x10
	InitMessage.MinorVersion    = REMOTE_NDIS_VERSION_MINOR;
     e24:	19 8a       	std	Y+17, r1	; 0x11
     e26:	1a 8a       	std	Y+18, r1	; 0x12
     e28:	1b 8a       	std	Y+19, r1	; 0x13
     e2a:	1c 8a       	std	Y+20, r1	; 0x14
	InitMessage.MaxTransferSize = HostMaxPacketSize;
     e2c:	a0 e0       	ldi	r26, 0x00	; 0
     e2e:	b0 e0       	ldi	r27, 0x00	; 0
     e30:	8d 8b       	std	Y+21, r24	; 0x15
     e32:	9e 8b       	std	Y+22, r25	; 0x16
     e34:	af 8b       	std	Y+23, r26	; 0x17
     e36:	b8 8f       	std	Y+24, r27	; 0x18

	if ((ErrorCode = RNDIS_SendEncapsulatedCommand(&InitMessage,
     e38:	ce 01       	movw	r24, r28
     e3a:	01 96       	adiw	r24, 0x01	; 1
     e3c:	68 e1       	ldi	r22, 0x18	; 24
     e3e:	70 e0       	ldi	r23, 0x00	; 0
     e40:	58 de       	rcall	.-848    	; 0xaf2 <RNDIS_SendEncapsulatedCommand>
     e42:	28 2f       	mov	r18, r24
     e44:	88 23       	and	r24, r24
     e46:	b9 f4       	brne	.+46     	; 0xe76 <RNDIS_InitializeDevice+0xce>
	                                               sizeof(RNDIS_Initialize_Message_t))) != HOST_SENDCONTROL_Successful)
	{
		return ErrorCode;
	}

	if ((ErrorCode = RNDIS_GetEncapsulatedResponse(&InitMessageResponse,
     e48:	ce 01       	movw	r24, r28
     e4a:	49 96       	adiw	r24, 0x19	; 25
     e4c:	64 e3       	ldi	r22, 0x34	; 52
     e4e:	70 e0       	ldi	r23, 0x00	; 0
     e50:	3b de       	rcall	.-906    	; 0xac8 <RNDIS_GetEncapsulatedResponse>
     e52:	28 2f       	mov	r18, r24
     e54:	88 23       	and	r24, r24
     e56:	79 f4       	brne	.+30     	; 0xe76 <RNDIS_InitializeDevice+0xce>
	                                               sizeof(RNDIS_Initialize_Complete_t))) != HOST_SENDCONTROL_Successful)
	{
		return ErrorCode;
	}

	if (InitMessageResponse.Status != REMOTE_NDIS_STATUS_SUCCESS)
     e58:	8d a1       	ldd	r24, Y+37	; 0x25
     e5a:	9e a1       	ldd	r25, Y+38	; 0x26
     e5c:	af a1       	ldd	r26, Y+39	; 0x27
     e5e:	b8 a5       	ldd	r27, Y+40	; 0x28
     e60:	00 97       	sbiw	r24, 0x00	; 0
     e62:	a1 05       	cpc	r26, r1
     e64:	b1 05       	cpc	r27, r1
     e66:	11 f0       	breq	.+4      	; 0xe6c <RNDIS_InitializeDevice+0xc4>
     e68:	20 ec       	ldi	r18, 0xC0	; 192
     e6a:	05 c0       	rjmp	.+10     	; 0xe76 <RNDIS_InitializeDevice+0xce>
	  return RNDIS_COMMAND_FAILED;

	*DeviceMaxPacketSize = InitMessageResponse.MaxTransferSize;
     e6c:	8d ad       	ldd	r24, Y+61	; 0x3d
     e6e:	9e ad       	ldd	r25, Y+62	; 0x3e
     e70:	f8 01       	movw	r30, r16
     e72:	91 83       	std	Z+1, r25	; 0x01
     e74:	80 83       	st	Z, r24

	return HOST_SENDCONTROL_Successful;
}
     e76:	82 2f       	mov	r24, r18
     e78:	c4 5b       	subi	r28, 0xB4	; 180
     e7a:	df 4f       	sbci	r29, 0xFF	; 255
     e7c:	0f b6       	in	r0, 0x3f	; 63
     e7e:	f8 94       	cli
     e80:	de bf       	out	0x3e, r29	; 62
     e82:	0f be       	out	0x3f, r0	; 63
     e84:	cd bf       	out	0x3d, r28	; 61
     e86:	cf 91       	pop	r28
     e88:	df 91       	pop	r29
     e8a:	1f 91       	pop	r17
     e8c:	0f 91       	pop	r16
     e8e:	08 95       	ret

00000e90 <USB_Host_WaitMS>:
		USB_ResetInterface();
	}
}

uint8_t USB_Host_WaitMS(uint8_t MS)
{
     e90:	98 2f       	mov	r25, r24
			 *  \return Boolean true if the bus is currently suspended, false otherwise.
			 */
			static inline bool USB_Host_IsBusSuspended(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusSuspended(void)
			{
				return ((UHCON & (1 << SOFEN)) ? false : true);
     e92:	20 91 9e 00 	lds	r18, 0x009E
	bool    BusSuspended = USB_Host_IsBusSuspended();
	uint8_t ErrorCode    = HOST_WAITERROR_Successful;
	bool    HSOFIEnabled = USB_INT_IsEnabled(USB_INT_HSOFI);
     e96:	30 91 a0 00 	lds	r19, 0x00A0

	USB_INT_Disable(USB_INT_HSOFI);
     e9a:	80 91 a0 00 	lds	r24, 0x00A0
     e9e:	8f 7d       	andi	r24, 0xDF	; 223
     ea0:	80 93 a0 00 	sts	0x00A0, r24
	USB_INT_Clear(USB_INT_HSOFI);
     ea4:	80 91 9f 00 	lds	r24, 0x009F
     ea8:	8f 7d       	andi	r24, 0xDF	; 223
     eaa:	80 93 9f 00 	sts	0x009F, r24
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
     eae:	80 91 9e 00 	lds	r24, 0x009E
     eb2:	81 60       	ori	r24, 0x01	; 1
     eb4:	80 93 9e 00 	sts	0x009E, r24
     eb8:	26 c0       	rjmp	.+76     	; 0xf06 <USB_Host_WaitMS+0x76>

	USB_Host_ResumeBus();

	while (MS)
	{
		if (USB_INT_HasOccurred(USB_INT_HSOFI))
     eba:	80 91 9f 00 	lds	r24, 0x009F
     ebe:	85 ff       	sbrs	r24, 5
     ec0:	06 c0       	rjmp	.+12     	; 0xece <USB_Host_WaitMS+0x3e>
		{
			USB_INT_Clear(USB_INT_HSOFI);
     ec2:	80 91 9f 00 	lds	r24, 0x009F
     ec6:	8f 7d       	andi	r24, 0xDF	; 223
     ec8:	80 93 9f 00 	sts	0x009F, r24
			MS--;
     ecc:	91 50       	subi	r25, 0x01	; 1
		}

		if ((USB_HostState == HOST_STATE_Unattached) || (USB_CurrentMode != USB_MODE_Host))
     ece:	80 91 44 01 	lds	r24, 0x0144
     ed2:	82 30       	cpi	r24, 0x02	; 2
     ed4:	11 f4       	brne	.+4      	; 0xeda <USB_Host_WaitMS+0x4a>
     ed6:	91 e0       	ldi	r25, 0x01	; 1
     ed8:	18 c0       	rjmp	.+48     	; 0xf0a <USB_Host_WaitMS+0x7a>
			 *  \return Boolean true if an error has occurred on the selected pipe, false otherwise.
			 */
			static inline bool Pipe_IsError(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsError(void)
			{
				return ((UPINTX & (1 << PERRI)) ? true : false);
     eda:	80 91 a6 00 	lds	r24, 0x00A6
			ErrorCode = HOST_WAITERROR_DeviceDisconnect;

			break;
		}

		if (Pipe_IsError() == true)
     ede:	84 ff       	sbrs	r24, 4
     ee0:	07 c0       	rjmp	.+14     	; 0xef0 <USB_Host_WaitMS+0x60>

			/** Clears the master pipe error flag. */
			static inline void Pipe_ClearError(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearError(void)
			{
				UPINTX &= ~(1 << PERRI);
     ee2:	80 91 a6 00 	lds	r24, 0x00A6
     ee6:	8f 7e       	andi	r24, 0xEF	; 239
     ee8:	80 93 a6 00 	sts	0x00A6, r24
     eec:	92 e0       	ldi	r25, 0x02	; 2
     eee:	0d c0       	rjmp	.+26     	; 0xf0a <USB_Host_WaitMS+0x7a>
			 *  \return Boolean true if the current pipe has been stalled by the attached device, false otherwise.
			 */
			static inline bool Pipe_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsStalled(void)
			{
				return ((UPINTX & (1 << RXSTALLI)) ? true : false);
     ef0:	80 91 a6 00 	lds	r24, 0x00A6
			ErrorCode = HOST_WAITERROR_PipeError;

			break;
		}

		if (Pipe_IsStalled() == true)
     ef4:	81 ff       	sbrs	r24, 1
     ef6:	07 c0       	rjmp	.+14     	; 0xf06 <USB_Host_WaitMS+0x76>
			 *  \ingroup Group_PipePacketManagement
			 */
			static inline void Pipe_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearStall(void)
			{
				UPINTX &= ~(1 << RXSTALLI);
     ef8:	80 91 a6 00 	lds	r24, 0x00A6
     efc:	8d 7f       	andi	r24, 0xFD	; 253
     efe:	80 93 a6 00 	sts	0x00A6, r24
     f02:	93 e0       	ldi	r25, 0x03	; 3
     f04:	02 c0       	rjmp	.+4      	; 0xf0a <USB_Host_WaitMS+0x7a>
	USB_INT_Disable(USB_INT_HSOFI);
	USB_INT_Clear(USB_INT_HSOFI);

	USB_Host_ResumeBus();

	while (MS)
     f06:	99 23       	and	r25, r25
     f08:	c1 f6       	brne	.-80     	; 0xeba <USB_Host_WaitMS+0x2a>

			break;
		}
	}

	if (BusSuspended)
     f0a:	20 fd       	sbrc	r18, 0
     f0c:	05 c0       	rjmp	.+10     	; 0xf18 <USB_Host_WaitMS+0x88>
			 *  messages to the device.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				UHCON &= ~(1 << SOFEN);
     f0e:	80 91 9e 00 	lds	r24, 0x009E
     f12:	8e 7f       	andi	r24, 0xFE	; 254
     f14:	80 93 9e 00 	sts	0x009E, r24
	  USB_Host_SuspendBus();

	if (HSOFIEnabled)
     f18:	35 ff       	sbrs	r19, 5
     f1a:	05 c0       	rjmp	.+10     	; 0xf26 <USB_Host_WaitMS+0x96>
	  USB_INT_Enable(USB_INT_HSOFI);
     f1c:	80 91 a0 00 	lds	r24, 0x00A0
     f20:	80 62       	ori	r24, 0x20	; 32
     f22:	80 93 a0 00 	sts	0x00A0, r24

	return ErrorCode;
}
     f26:	89 2f       	mov	r24, r25
     f28:	08 95       	ret

00000f2a <USB_Host_ResetDevice>:
			 *  \return Boolean true if the bus is currently suspended, false otherwise.
			 */
			static inline bool USB_Host_IsBusSuspended(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusSuspended(void)
			{
				return ((UHCON & (1 << SOFEN)) ? false : true);
     f2a:	60 91 9e 00 	lds	r22, 0x009E

static void USB_Host_ResetDevice(void)
{
	bool BusSuspended = USB_Host_IsBusSuspended();

	USB_INT_Disable(USB_INT_DDISCI);
     f2e:	80 91 a0 00 	lds	r24, 0x00A0
     f32:	8d 7f       	andi	r24, 0xFD	; 253
     f34:	80 93 a0 00 	sts	0x00A0, r24
			 *  woken up automatically and the bus resumed after the reset has been correctly issued.
			 */
			static inline void USB_Host_ResetBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResetBus(void)
			{
				UHCON |=  (1 << RESET);
     f38:	80 91 9e 00 	lds	r24, 0x009E
     f3c:	82 60       	ori	r24, 0x02	; 2
     f3e:	80 93 9e 00 	sts	0x009E, r24
			 *  \return Boolean true if no bus reset is currently being sent, false otherwise.
			 */
			static inline bool USB_Host_IsBusResetComplete(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusResetComplete(void)
			{
				return ((UHCON & (1 << RESET)) ? false : true);
     f42:	80 91 9e 00 	lds	r24, 0x009E

	USB_Host_ResetBus();
	while (!(USB_Host_IsBusResetComplete()));
     f46:	81 fd       	sbrc	r24, 1
     f48:	fc cf       	rjmp	.-8      	; 0xf42 <USB_Host_ResetDevice+0x18>
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
     f4a:	80 91 9e 00 	lds	r24, 0x009E
     f4e:	81 60       	ori	r24, 0x01	; 1
     f50:	80 93 9e 00 	sts	0x009E, r24
	USB_Host_ResumeBus();

	bool HSOFIEnabled = USB_INT_IsEnabled(USB_INT_HSOFI);
     f54:	30 91 a0 00 	lds	r19, 0x00A0

	USB_INT_Disable(USB_INT_HSOFI);
     f58:	80 91 a0 00 	lds	r24, 0x00A0
     f5c:	8f 7d       	andi	r24, 0xDF	; 223
     f5e:	80 93 a0 00 	sts	0x00A0, r24
	USB_INT_Clear(USB_INT_HSOFI);
     f62:	80 91 9f 00 	lds	r24, 0x009F
     f66:	8f 7d       	andi	r24, 0xDF	; 223
     f68:	80 93 9f 00 	sts	0x009F, r24
     f6c:	2a e0       	ldi	r18, 0x0A	; 10
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     f6e:	40 ed       	ldi	r20, 0xD0	; 208
     f70:	57 e0       	ldi	r21, 0x07	; 7
		/* Workaround for powerless-pull-up devices. After a USB bus reset,
		   all disconnection interrupts are suppressed while a USB frame is
		   looked for - if it is found within 10ms, the device is still
		   present.                                                        */

		if (USB_INT_HasOccurred(USB_INT_HSOFI))
     f72:	80 91 9f 00 	lds	r24, 0x009F
     f76:	85 ff       	sbrs	r24, 5
     f78:	0b c0       	rjmp	.+22     	; 0xf90 <USB_Host_ResetDevice+0x66>
		{
			USB_INT_Clear(USB_INT_HSOFI);
     f7a:	80 91 9f 00 	lds	r24, 0x009F
     f7e:	8f 7d       	andi	r24, 0xDF	; 223
     f80:	80 93 9f 00 	sts	0x009F, r24
			USB_INT_Clear(USB_INT_DDISCI);
     f84:	80 91 9f 00 	lds	r24, 0x009F
     f88:	8d 7f       	andi	r24, 0xFD	; 253
     f8a:	80 93 9f 00 	sts	0x009F, r24
     f8e:	05 c0       	rjmp	.+10     	; 0xf9a <USB_Host_ResetDevice+0x70>
     f90:	ca 01       	movw	r24, r20
     f92:	01 97       	sbiw	r24, 0x01	; 1
     f94:	f1 f7       	brne	.-4      	; 0xf92 <USB_Host_ResetDevice+0x68>
	bool HSOFIEnabled = USB_INT_IsEnabled(USB_INT_HSOFI);

	USB_INT_Disable(USB_INT_HSOFI);
	USB_INT_Clear(USB_INT_HSOFI);

	for (uint8_t MSRem = 10; MSRem != 0; MSRem--)
     f96:	21 50       	subi	r18, 0x01	; 1
     f98:	61 f7       	brne	.-40     	; 0xf72 <USB_Host_ResetDevice+0x48>
		}

		_delay_ms(1);
	}

	if (HSOFIEnabled)
     f9a:	35 ff       	sbrs	r19, 5
     f9c:	05 c0       	rjmp	.+10     	; 0xfa8 <USB_Host_ResetDevice+0x7e>
	  USB_INT_Enable(USB_INT_HSOFI);
     f9e:	80 91 a0 00 	lds	r24, 0x00A0
     fa2:	80 62       	ori	r24, 0x20	; 32
     fa4:	80 93 a0 00 	sts	0x00A0, r24

	if (BusSuspended)
     fa8:	60 fd       	sbrc	r22, 0
     faa:	05 c0       	rjmp	.+10     	; 0xfb6 <USB_Host_ResetDevice+0x8c>
			 *  messages to the device.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				UHCON &= ~(1 << SOFEN);
     fac:	80 91 9e 00 	lds	r24, 0x009E
     fb0:	8e 7f       	andi	r24, 0xFE	; 254
     fb2:	80 93 9e 00 	sts	0x009E, r24
	  USB_Host_SuspendBus();

	USB_INT_Enable(USB_INT_DDISCI);
     fb6:	80 91 a0 00 	lds	r24, 0x00A0
     fba:	82 60       	ori	r24, 0x02	; 2
     fbc:	80 93 a0 00 	sts	0x00A0, r24
}
     fc0:	08 95       	ret

00000fc2 <USB_Host_SetDeviceConfiguration>:

uint8_t USB_Host_SetDeviceConfiguration(const uint8_t ConfigNumber)
{
	USB_ControlRequest = (USB_Request_Header_t)
     fc2:	10 92 3c 01 	sts	0x013C, r1
     fc6:	99 e0       	ldi	r25, 0x09	; 9
     fc8:	90 93 3d 01 	sts	0x013D, r25
     fcc:	80 93 3e 01 	sts	0x013E, r24
     fd0:	10 92 3f 01 	sts	0x013F, r1
     fd4:	10 92 41 01 	sts	0x0141, r1
     fd8:	10 92 40 01 	sts	0x0140, r1
     fdc:	10 92 43 01 	sts	0x0143, r1
     fe0:	10 92 42 01 	sts	0x0142, r1
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
     fe4:	10 92 a7 00 	sts	0x00A7, r1
			.wLength       = 0,
		};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	return USB_Host_SendControlRequest(NULL);
     fe8:	80 e0       	ldi	r24, 0x00	; 0
     fea:	90 e0       	ldi	r25, 0x00	; 0
}
     fec:	7e c3       	rjmp	.+1788   	; 0x16ea <USB_Host_SendControlRequest>

00000fee <USB_Host_ProcessNextHostState>:

#define  __INCLUDE_FROM_HOST_C
#include "Host.h"

void USB_Host_ProcessNextHostState(void)
{
     fee:	ef 92       	push	r14
     ff0:	0f 93       	push	r16
     ff2:	1f 93       	push	r17
     ff4:	df 93       	push	r29
     ff6:	cf 93       	push	r28
     ff8:	cd b7       	in	r28, 0x3d	; 61
     ffa:	de b7       	in	r29, 0x3e	; 62
     ffc:	28 97       	sbiw	r28, 0x08	; 8
     ffe:	0f b6       	in	r0, 0x3f	; 63
    1000:	f8 94       	cli
    1002:	de bf       	out	0x3e, r29	; 62
    1004:	0f be       	out	0x3f, r0	; 63
    1006:	cd bf       	out	0x3d, r28	; 61
	uint8_t SubErrorCode = HOST_ENUMERROR_NoError;

	static uint16_t WaitMSRemaining;
	static uint8_t  PostWaitState;

	switch (USB_HostState)
    1008:	80 91 44 01 	lds	r24, 0x0144
    100c:	86 30       	cpi	r24, 0x06	; 6
    100e:	09 f4       	brne	.+2      	; 0x1012 <USB_Host_ProcessNextHostState+0x24>
    1010:	94 c0       	rjmp	.+296    	; 0x113a <USB_Host_ProcessNextHostState+0x14c>
    1012:	87 30       	cpi	r24, 0x07	; 7
    1014:	70 f4       	brcc	.+28     	; 0x1032 <USB_Host_ProcessNextHostState+0x44>
    1016:	83 30       	cpi	r24, 0x03	; 3
    1018:	c1 f1       	breq	.+112    	; 0x108a <USB_Host_ProcessNextHostState+0x9c>
    101a:	84 30       	cpi	r24, 0x04	; 4
    101c:	20 f4       	brcc	.+8      	; 0x1026 <USB_Host_ProcessNextHostState+0x38>
    101e:	81 30       	cpi	r24, 0x01	; 1
    1020:	09 f0       	breq	.+2      	; 0x1024 <USB_Host_ProcessNextHostState+0x36>
    1022:	07 c1       	rjmp	.+526    	; 0x1232 <USB_Host_ProcessNextHostState+0x244>
    1024:	13 c0       	rjmp	.+38     	; 0x104c <USB_Host_ProcessNextHostState+0x5e>
    1026:	84 30       	cpi	r24, 0x04	; 4
    1028:	c1 f1       	breq	.+112    	; 0x109a <USB_Host_ProcessNextHostState+0xac>
    102a:	85 30       	cpi	r24, 0x05	; 5
    102c:	09 f0       	breq	.+2      	; 0x1030 <USB_Host_ProcessNextHostState+0x42>
    102e:	01 c1       	rjmp	.+514    	; 0x1232 <USB_Host_ProcessNextHostState+0x244>
    1030:	5b c0       	rjmp	.+182    	; 0x10e8 <USB_Host_ProcessNextHostState+0xfa>
    1032:	88 30       	cpi	r24, 0x08	; 8
    1034:	09 f4       	brne	.+2      	; 0x1038 <USB_Host_ProcessNextHostState+0x4a>
    1036:	9b c0       	rjmp	.+310    	; 0x116e <USB_Host_ProcessNextHostState+0x180>
    1038:	88 30       	cpi	r24, 0x08	; 8
    103a:	08 f4       	brcc	.+2      	; 0x103e <USB_Host_ProcessNextHostState+0x50>
    103c:	8a c0       	rjmp	.+276    	; 0x1152 <USB_Host_ProcessNextHostState+0x164>
    103e:	89 30       	cpi	r24, 0x09	; 9
    1040:	09 f4       	brne	.+2      	; 0x1044 <USB_Host_ProcessNextHostState+0x56>
    1042:	b4 c0       	rjmp	.+360    	; 0x11ac <USB_Host_ProcessNextHostState+0x1be>
    1044:	8a 30       	cpi	r24, 0x0A	; 10
    1046:	09 f0       	breq	.+2      	; 0x104a <USB_Host_ProcessNextHostState+0x5c>
    1048:	f4 c0       	rjmp	.+488    	; 0x1232 <USB_Host_ProcessNextHostState+0x244>
    104a:	d9 c0       	rjmp	.+434    	; 0x11fe <USB_Host_ProcessNextHostState+0x210>
	{
		case HOST_STATE_WaitForDevice:
			if (WaitMSRemaining)
    104c:	00 91 39 01 	lds	r16, 0x0139
    1050:	10 91 3a 01 	lds	r17, 0x013A
    1054:	01 15       	cp	r16, r1
    1056:	11 05       	cpc	r17, r1
    1058:	09 f4       	brne	.+2      	; 0x105c <USB_Host_ProcessNextHostState+0x6e>
    105a:	eb c0       	rjmp	.+470    	; 0x1232 <USB_Host_ProcessNextHostState+0x244>
			{
				if ((SubErrorCode = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
    105c:	81 e0       	ldi	r24, 0x01	; 1
    105e:	18 df       	rcall	.-464    	; 0xe90 <USB_Host_WaitMS>
    1060:	68 2f       	mov	r22, r24
    1062:	88 23       	and	r24, r24
    1064:	31 f0       	breq	.+12     	; 0x1072 <USB_Host_ProcessNextHostState+0x84>
				{
					USB_HostState = PostWaitState;
    1066:	80 91 38 01 	lds	r24, 0x0138
    106a:	80 93 44 01 	sts	0x0144, r24
    106e:	91 e0       	ldi	r25, 0x01	; 1
    1070:	dc c0       	rjmp	.+440    	; 0x122a <USB_Host_ProcessNextHostState+0x23c>
					ErrorCode     = HOST_ENUMERROR_WaitStage;
					break;
				}

				if (!(--WaitMSRemaining))
    1072:	c8 01       	movw	r24, r16
    1074:	01 97       	sbiw	r24, 0x01	; 1
    1076:	90 93 3a 01 	sts	0x013A, r25
    107a:	80 93 39 01 	sts	0x0139, r24
    107e:	89 2b       	or	r24, r25
    1080:	09 f0       	breq	.+2      	; 0x1084 <USB_Host_ProcessNextHostState+0x96>
    1082:	d7 c0       	rjmp	.+430    	; 0x1232 <USB_Host_ProcessNextHostState+0x244>
				  USB_HostState = PostWaitState;
    1084:	80 91 38 01 	lds	r24, 0x0138
    1088:	bf c0       	rjmp	.+382    	; 0x1208 <USB_Host_ProcessNextHostState+0x21a>
			}

			break;
		case HOST_STATE_Powered:
			WaitMSRemaining = HOST_DEVICE_SETTLE_DELAY_MS;
    108a:	88 ee       	ldi	r24, 0xE8	; 232
    108c:	93 e0       	ldi	r25, 0x03	; 3
    108e:	90 93 3a 01 	sts	0x013A, r25
    1092:	80 93 39 01 	sts	0x0139, r24

			USB_HostState = HOST_STATE_Powered_WaitForDeviceSettle;
    1096:	84 e0       	ldi	r24, 0x04	; 4
    1098:	b7 c0       	rjmp	.+366    	; 0x1208 <USB_Host_ProcessNextHostState+0x21a>
			break;
		case HOST_STATE_Powered_WaitForDeviceSettle:
			if (WaitMSRemaining--)
    109a:	80 91 39 01 	lds	r24, 0x0139
    109e:	90 91 3a 01 	lds	r25, 0x013A
    10a2:	01 97       	sbiw	r24, 0x01	; 1
    10a4:	90 93 3a 01 	sts	0x013A, r25
    10a8:	80 93 39 01 	sts	0x0139, r24
    10ac:	01 96       	adiw	r24, 0x01	; 1
    10ae:	29 f0       	breq	.+10     	; 0x10ba <USB_Host_ProcessNextHostState+0xcc>
    10b0:	80 ed       	ldi	r24, 0xD0	; 208
    10b2:	97 e0       	ldi	r25, 0x07	; 7
    10b4:	01 97       	sbiw	r24, 0x01	; 1
    10b6:	f1 f7       	brne	.-4      	; 0x10b4 <USB_Host_ProcessNextHostState+0xc6>
    10b8:	bc c0       	rjmp	.+376    	; 0x1232 <USB_Host_ProcessNextHostState+0x244>
			}

			static inline void USB_Host_VBUS_Manual_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Manual_Off(void)
			{
				PORTE  &= ~(1 << 7);
    10ba:	77 98       	cbi	0x0e, 7	; 14

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON  |=  (1 << OTGPADE);
    10bc:	80 91 d8 00 	lds	r24, 0x00D8
    10c0:	80 61       	ori	r24, 0x10	; 16
    10c2:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_Host_VBUS_Auto_Enable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Enable(void)
			{
				OTGCON &= ~(1 << VBUSHWC);
    10c6:	80 91 dd 00 	lds	r24, 0x00DD
    10ca:	8b 7f       	andi	r24, 0xFB	; 251
    10cc:	80 93 dd 00 	sts	0x00DD, r24
				UHWCON |=  (1 << UVCONE);
    10d0:	80 91 d7 00 	lds	r24, 0x00D7
    10d4:	80 61       	ori	r24, 0x10	; 16
    10d6:	80 93 d7 00 	sts	0x00D7, r24
			}

			static inline void USB_Host_VBUS_Auto_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_On(void)
			{
				OTGCON |=  (1 << VBUSREQ);
    10da:	80 91 dd 00 	lds	r24, 0x00DD
    10de:	82 60       	ori	r24, 0x02	; 2
    10e0:	80 93 dd 00 	sts	0x00DD, r24

				USB_OTGPAD_On();
				USB_Host_VBUS_Auto_Enable();
				USB_Host_VBUS_Auto_On();

				USB_HostState = HOST_STATE_Powered_WaitForConnect;
    10e4:	85 e0       	ldi	r24, 0x05	; 5
    10e6:	90 c0       	rjmp	.+288    	; 0x1208 <USB_Host_ProcessNextHostState+0x21a>
			}

			break;
		case HOST_STATE_Powered_WaitForConnect:
			if (USB_INT_HasOccurred(USB_INT_DCONNI))
    10e8:	80 91 9f 00 	lds	r24, 0x009F
    10ec:	80 ff       	sbrs	r24, 0
    10ee:	a1 c0       	rjmp	.+322    	; 0x1232 <USB_Host_ProcessNextHostState+0x244>
			{
				USB_INT_Clear(USB_INT_DCONNI);
    10f0:	80 91 9f 00 	lds	r24, 0x009F
    10f4:	8e 7f       	andi	r24, 0xFE	; 254
    10f6:	80 93 9f 00 	sts	0x009F, r24
				USB_INT_Clear(USB_INT_DDISCI);
    10fa:	80 91 9f 00 	lds	r24, 0x009F
    10fe:	8d 7f       	andi	r24, 0xFD	; 253
    1100:	80 93 9f 00 	sts	0x009F, r24

				USB_INT_Clear(USB_INT_VBERRI);
    1104:	80 91 df 00 	lds	r24, 0x00DF
    1108:	8d 7f       	andi	r24, 0xFD	; 253
    110a:	80 93 df 00 	sts	0x00DF, r24
				USB_INT_Enable(USB_INT_VBERRI);
    110e:	80 91 de 00 	lds	r24, 0x00DE
    1112:	82 60       	ori	r24, 0x02	; 2
    1114:	80 93 de 00 	sts	0x00DE, r24
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
    1118:	80 91 9e 00 	lds	r24, 0x009E
    111c:	81 60       	ori	r24, 0x01	; 1
    111e:	80 93 9e 00 	sts	0x009E, r24

				USB_Host_ResumeBus();
				Pipe_ClearPipes();
    1122:	c9 d0       	rcall	.+402    	; 0x12b6 <Pipe_ClearPipes>

				HOST_TASK_NONBLOCK_WAIT(100, HOST_STATE_Powered_DoReset);
    1124:	81 e0       	ldi	r24, 0x01	; 1
    1126:	80 93 44 01 	sts	0x0144, r24
    112a:	84 e6       	ldi	r24, 0x64	; 100
    112c:	90 e0       	ldi	r25, 0x00	; 0
    112e:	90 93 3a 01 	sts	0x013A, r25
    1132:	80 93 39 01 	sts	0x0139, r24
    1136:	86 e0       	ldi	r24, 0x06	; 6
    1138:	5f c0       	rjmp	.+190    	; 0x11f8 <USB_Host_ProcessNextHostState+0x20a>
			}

			break;
		case HOST_STATE_Powered_DoReset:
			USB_Host_ResetDevice();
    113a:	f7 de       	rcall	.-530    	; 0xf2a <USB_Host_ResetDevice>

			HOST_TASK_NONBLOCK_WAIT(200, HOST_STATE_Powered_ConfigPipe);
    113c:	81 e0       	ldi	r24, 0x01	; 1
    113e:	80 93 44 01 	sts	0x0144, r24
    1142:	88 ec       	ldi	r24, 0xC8	; 200
    1144:	90 e0       	ldi	r25, 0x00	; 0
    1146:	90 93 3a 01 	sts	0x013A, r25
    114a:	80 93 39 01 	sts	0x0139, r24
    114e:	87 e0       	ldi	r24, 0x07	; 7
    1150:	53 c0       	rjmp	.+166    	; 0x11f8 <USB_Host_ProcessNextHostState+0x20a>
			break;
		case HOST_STATE_Powered_ConfigPipe:
			Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL,
    1152:	80 e0       	ldi	r24, 0x00	; 0
    1154:	60 e0       	ldi	r22, 0x00	; 0
    1156:	40 e0       	ldi	r20, 0x00	; 0
    1158:	20 e0       	ldi	r18, 0x00	; 0
    115a:	00 e4       	ldi	r16, 0x40	; 64
    115c:	10 e0       	ldi	r17, 0x00	; 0
    115e:	ee 24       	eor	r14, r14
    1160:	74 d0       	rcall	.+232    	; 0x124a <Pipe_ConfigurePipe>
			 *  \return Boolean true if the selected pipe is configured, false otherwise.
			 */
			static inline bool Pipe_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsConfigured(void)
			{
				return ((UPSTAX & (1 << CFGOK)) ? true : false);
    1162:	80 91 ac 00 	lds	r24, 0x00AC
							   PIPE_TOKEN_SETUP, ENDPOINT_CONTROLEP,
							   PIPE_CONTROLPIPE_DEFAULT_SIZE, PIPE_BANK_SINGLE);

			if (!(Pipe_IsConfigured()))
    1166:	87 ff       	sbrs	r24, 7
    1168:	5e c0       	rjmp	.+188    	; 0x1226 <USB_Host_ProcessNextHostState+0x238>
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
				SubErrorCode = 0;
				break;
			}

			USB_HostState = HOST_STATE_Default;
    116a:	88 e0       	ldi	r24, 0x08	; 8
    116c:	4d c0       	rjmp	.+154    	; 0x1208 <USB_Host_ProcessNextHostState+0x21a>
			break;
		case HOST_STATE_Default:
			USB_ControlRequest = (USB_Request_Header_t)
    116e:	ac e3       	ldi	r26, 0x3C	; 60
    1170:	b1 e0       	ldi	r27, 0x01	; 1
    1172:	ec e1       	ldi	r30, 0x1C	; 28
    1174:	f1 e0       	ldi	r31, 0x01	; 1
    1176:	88 e0       	ldi	r24, 0x08	; 8
    1178:	01 90       	ld	r0, Z+
    117a:	0d 92       	st	X+, r0
    117c:	81 50       	subi	r24, 0x01	; 1
    117e:	e1 f7       	brne	.-8      	; 0x1178 <USB_Host_ProcessNextHostState+0x18a>
					.wLength       = 8,
				};

			uint8_t DataBuffer[8];

			if ((SubErrorCode = USB_Host_SendControlRequest(DataBuffer)) != HOST_SENDCONTROL_Successful)
    1180:	ce 01       	movw	r24, r28
    1182:	01 96       	adiw	r24, 0x01	; 1
    1184:	b2 d2       	rcall	.+1380   	; 0x16ea <USB_Host_SendControlRequest>
    1186:	68 2f       	mov	r22, r24
    1188:	88 23       	and	r24, r24
    118a:	09 f0       	breq	.+2      	; 0x118e <USB_Host_ProcessNextHostState+0x1a0>
    118c:	4a c0       	rjmp	.+148    	; 0x1222 <USB_Host_ProcessNextHostState+0x234>
			{
				ErrorCode = HOST_ENUMERROR_ControlError;
				break;
			}

			USB_ControlPipeSize = DataBuffer[offsetof(USB_Descriptor_Device_t, Endpoint0Size)];
    118e:	88 85       	ldd	r24, Y+8	; 0x08
    1190:	80 93 24 01 	sts	0x0124, r24

			USB_Host_ResetDevice();
    1194:	ca de       	rcall	.-620    	; 0xf2a <USB_Host_ResetDevice>

			HOST_TASK_NONBLOCK_WAIT(200, HOST_STATE_Default_PostReset);
    1196:	81 e0       	ldi	r24, 0x01	; 1
    1198:	80 93 44 01 	sts	0x0144, r24
    119c:	88 ec       	ldi	r24, 0xC8	; 200
    119e:	90 e0       	ldi	r25, 0x00	; 0
    11a0:	90 93 3a 01 	sts	0x013A, r25
    11a4:	80 93 39 01 	sts	0x0139, r24
    11a8:	89 e0       	ldi	r24, 0x09	; 9
    11aa:	26 c0       	rjmp	.+76     	; 0x11f8 <USB_Host_ProcessNextHostState+0x20a>
			break;
		case HOST_STATE_Default_PostReset:
			Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL,
    11ac:	00 91 24 01 	lds	r16, 0x0124
    11b0:	80 e0       	ldi	r24, 0x00	; 0
    11b2:	60 e0       	ldi	r22, 0x00	; 0
    11b4:	40 e0       	ldi	r20, 0x00	; 0
    11b6:	20 e0       	ldi	r18, 0x00	; 0
    11b8:	10 e0       	ldi	r17, 0x00	; 0
    11ba:	ee 24       	eor	r14, r14
    11bc:	46 d0       	rcall	.+140    	; 0x124a <Pipe_ConfigurePipe>
    11be:	80 91 ac 00 	lds	r24, 0x00AC
			                   PIPE_TOKEN_SETUP, ENDPOINT_CONTROLEP,
			                   USB_ControlPipeSize, PIPE_BANK_SINGLE);

			if (!(Pipe_IsConfigured()))
    11c2:	87 ff       	sbrs	r24, 7
    11c4:	30 c0       	rjmp	.+96     	; 0x1226 <USB_Host_ProcessNextHostState+0x238>
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
				SubErrorCode = 0;
				break;
			}

			USB_ControlRequest = (USB_Request_Header_t)
    11c6:	ac e3       	ldi	r26, 0x3C	; 60
    11c8:	b1 e0       	ldi	r27, 0x01	; 1
    11ca:	e4 e1       	ldi	r30, 0x14	; 20
    11cc:	f1 e0       	ldi	r31, 0x01	; 1
    11ce:	88 e0       	ldi	r24, 0x08	; 8
    11d0:	01 90       	ld	r0, Z+
    11d2:	0d 92       	st	X+, r0
    11d4:	81 50       	subi	r24, 0x01	; 1
    11d6:	e1 f7       	brne	.-8      	; 0x11d0 <USB_Host_ProcessNextHostState+0x1e2>
					.wValue        = USB_HOST_DEVICEADDRESS,
					.wIndex        = 0,
					.wLength       = 0,
				};

			if ((SubErrorCode = USB_Host_SendControlRequest(NULL)) != HOST_SENDCONTROL_Successful)
    11d8:	80 e0       	ldi	r24, 0x00	; 0
    11da:	90 e0       	ldi	r25, 0x00	; 0
    11dc:	86 d2       	rcall	.+1292   	; 0x16ea <USB_Host_SendControlRequest>
    11de:	68 2f       	mov	r22, r24
    11e0:	88 23       	and	r24, r24
    11e2:	f9 f4       	brne	.+62     	; 0x1222 <USB_Host_ProcessNextHostState+0x234>
			{
				ErrorCode = HOST_ENUMERROR_ControlError;
				break;
			}

			HOST_TASK_NONBLOCK_WAIT(100, HOST_STATE_Default_PostAddressSet);
    11e4:	81 e0       	ldi	r24, 0x01	; 1
    11e6:	80 93 44 01 	sts	0x0144, r24
    11ea:	84 e6       	ldi	r24, 0x64	; 100
    11ec:	90 e0       	ldi	r25, 0x00	; 0
    11ee:	90 93 3a 01 	sts	0x013A, r25
    11f2:	80 93 39 01 	sts	0x0139, r24
    11f6:	8a e0       	ldi	r24, 0x0A	; 10
    11f8:	80 93 38 01 	sts	0x0138, r24
    11fc:	1a c0       	rjmp	.+52     	; 0x1232 <USB_Host_ProcessNextHostState+0x244>
			}

			static inline void USB_Host_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SetDeviceAddress(const uint8_t Address)
			{
				UHADDR  =  (Address & 0x7F);
    11fe:	81 e0       	ldi	r24, 0x01	; 1
    1200:	80 93 a1 00 	sts	0x00A1, r24
			break;
		case HOST_STATE_Default_PostAddressSet:
			USB_Host_SetDeviceAddress(USB_HOST_DEVICEADDRESS);

			EVENT_USB_Host_DeviceEnumerationComplete();
    1204:	f9 d8       	rcall	.-3598   	; 0x3f8 <EVENT_USB_Host_DeviceEnumerationComplete>
			USB_HostState = HOST_STATE_Addressed;
    1206:	8b e0       	ldi	r24, 0x0B	; 11
    1208:	80 93 44 01 	sts	0x0144, r24
    120c:	12 c0       	rjmp	.+36     	; 0x1232 <USB_Host_ProcessNextHostState+0x244>
			break;
	}

	if ((ErrorCode != HOST_ENUMERROR_NoError) && (USB_HostState != HOST_STATE_Unattached))
	{
		EVENT_USB_Host_DeviceEnumerationFailed(ErrorCode, SubErrorCode);
    120e:	89 2f       	mov	r24, r25
    1210:	0a d9       	rcall	.-3564   	; 0x426 <EVENT_USB_Host_DeviceEnumerationFailed>
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
    1212:	80 91 dd 00 	lds	r24, 0x00DD
    1216:	81 60       	ori	r24, 0x01	; 1
    1218:	80 93 dd 00 	sts	0x00DD, r24

		USB_Host_VBUS_Auto_Off();

		EVENT_USB_Host_DeviceUnattached();
    121c:	f2 d8       	rcall	.-3612   	; 0x402 <EVENT_USB_Host_DeviceUnattached>

		USB_ResetInterface();
    121e:	8c d0       	rcall	.+280    	; 0x1338 <USB_ResetInterface>
    1220:	08 c0       	rjmp	.+16     	; 0x1232 <USB_Host_ProcessNextHostState+0x244>
	}
}
    1222:	93 e0       	ldi	r25, 0x03	; 3
    1224:	02 c0       	rjmp	.+4      	; 0x122a <USB_Host_ProcessNextHostState+0x23c>
    1226:	94 e0       	ldi	r25, 0x04	; 4
    1228:	60 e0       	ldi	r22, 0x00	; 0
			EVENT_USB_Host_DeviceEnumerationComplete();
			USB_HostState = HOST_STATE_Addressed;
			break;
	}

	if ((ErrorCode != HOST_ENUMERROR_NoError) && (USB_HostState != HOST_STATE_Unattached))
    122a:	80 91 44 01 	lds	r24, 0x0144
    122e:	82 30       	cpi	r24, 0x02	; 2
    1230:	71 f7       	brne	.-36     	; 0x120e <USB_Host_ProcessNextHostState+0x220>

		EVENT_USB_Host_DeviceUnattached();

		USB_ResetInterface();
	}
}
    1232:	28 96       	adiw	r28, 0x08	; 8
    1234:	0f b6       	in	r0, 0x3f	; 63
    1236:	f8 94       	cli
    1238:	de bf       	out	0x3e, r29	; 62
    123a:	0f be       	out	0x3f, r0	; 63
    123c:	cd bf       	out	0x3d, r28	; 61
    123e:	cf 91       	pop	r28
    1240:	df 91       	pop	r29
    1242:	1f 91       	pop	r17
    1244:	0f 91       	pop	r16
    1246:	ef 90       	pop	r14
    1248:	08 95       	ret

0000124a <Pipe_ConfigurePipe>:
                        const uint8_t Type,
                        const uint8_t Token,
                        const uint8_t EndpointNumber,
                        const uint16_t Size,
                        const uint8_t Banks)
{
    124a:	ef 92       	push	r14
    124c:	0f 93       	push	r16
    124e:	1f 93       	push	r17
    1250:	9e 2d       	mov	r25, r14
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
    1252:	80 93 a7 00 	sts	0x00A7, r24
			 *  \pre The currently selected pipe must first be configured properly via \ref Pipe_ConfigurePipe().
			 */
			static inline void Pipe_EnablePipe(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_EnablePipe(void)
			{
				UPCONX |= (1 << PEN);
    1256:	80 91 a9 00 	lds	r24, 0x00A9
    125a:	81 60       	ori	r24, 0x01	; 1
    125c:	80 93 a9 00 	sts	0x00A9, r24
	Pipe_SelectPipe(Number);
	Pipe_EnablePipe();

	UPCFG1X = 0;
    1260:	10 92 ab 00 	sts	0x00AB, r1

	UPCFG0X = ((Type << EPTYPE0) | Token | ((EndpointNumber & PIPE_EPNUM_MASK) << PEPNUM0));
    1264:	62 95       	swap	r22
    1266:	66 0f       	add	r22, r22
    1268:	66 0f       	add	r22, r22
    126a:	60 7c       	andi	r22, 0xC0	; 192
    126c:	64 2b       	or	r22, r20
    126e:	2f 70       	andi	r18, 0x0F	; 15
    1270:	62 2b       	or	r22, r18
    1272:	60 93 aa 00 	sts	0x00AA, r22
    1276:	28 e0       	ldi	r18, 0x08	; 8
    1278:	30 e0       	ldi	r19, 0x00	; 0
    127a:	80 e0       	ldi	r24, 0x00	; 0
    127c:	03 c0       	rjmp	.+6      	; 0x1284 <Pipe_ConfigurePipe+0x3a>
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while ((CheckBytes < Bytes) && (CheckBytes < PIPE_MAX_SIZE))
				{
					MaskVal++;
    127e:	8f 5f       	subi	r24, 0xFF	; 255
					CheckBytes <<= 1;
    1280:	22 0f       	add	r18, r18
    1282:	33 1f       	adc	r19, r19
			static inline uint8_t Pipe_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while ((CheckBytes < Bytes) && (CheckBytes < PIPE_MAX_SIZE))
    1284:	20 17       	cp	r18, r16
    1286:	31 07       	cpc	r19, r17
    1288:	10 f4       	brcc	.+4      	; 0x128e <Pipe_ConfigurePipe+0x44>
    128a:	85 30       	cpi	r24, 0x05	; 5
    128c:	c1 f7       	brne	.-16     	; 0x127e <Pipe_ConfigurePipe+0x34>
	UPCFG1X = ((1 << ALLOC) | Banks | Pipe_BytesToEPSizeMask(Size));
    128e:	92 60       	ori	r25, 0x02	; 2
    1290:	82 95       	swap	r24
    1292:	80 7f       	andi	r24, 0xF0	; 240
    1294:	89 2b       	or	r24, r25
    1296:	80 93 ab 00 	sts	0x00AB, r24

			/** Configures the currently selected pipe to allow for an unlimited number of IN requests. */
			static inline void Pipe_SetInfiniteINRequests(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetInfiniteINRequests(void)
			{
				UPCONX |= (1 << INMODE);
    129a:	80 91 a9 00 	lds	r24, 0x00A9
    129e:	80 62       	ori	r24, 0x20	; 32
    12a0:	80 93 a9 00 	sts	0x00A9, r24
			 *  \return Boolean true if the selected pipe is configured, false otherwise.
			 */
			static inline bool Pipe_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsConfigured(void)
			{
				return ((UPSTAX & (1 << CFGOK)) ? true : false);
    12a4:	80 91 ac 00 	lds	r24, 0x00AC

	Pipe_SetInfiniteINRequests();

	return Pipe_IsConfigured();
}
    12a8:	88 1f       	adc	r24, r24
    12aa:	88 27       	eor	r24, r24
    12ac:	88 1f       	adc	r24, r24
    12ae:	1f 91       	pop	r17
    12b0:	0f 91       	pop	r16
    12b2:	ef 90       	pop	r14
    12b4:	08 95       	ret

000012b6 <Pipe_ClearPipes>:

void Pipe_ClearPipes(void)
{
	UPINT = 0;
    12b6:	10 92 f8 00 	sts	0x00F8, r1
    12ba:	90 e0       	ldi	r25, 0x00	; 0
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
    12bc:	90 93 a7 00 	sts	0x00A7, r25

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
	{
		Pipe_SelectPipe(PNum);
		UPIENX  = 0;
    12c0:	10 92 ae 00 	sts	0x00AE, r1
		UPINTX  = 0;
    12c4:	10 92 a6 00 	sts	0x00A6, r1
		UPCFG1X = 0;
    12c8:	10 92 ab 00 	sts	0x00AB, r1
			 *  from an attached device.
			 */
			static inline void Pipe_DisablePipe(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_DisablePipe(void)
			{
				UPCONX &= ~(1 << PEN);
    12cc:	80 91 a9 00 	lds	r24, 0x00A9
    12d0:	8e 7f       	andi	r24, 0xFE	; 254
    12d2:	80 93 a9 00 	sts	0x00A9, r24

void Pipe_ClearPipes(void)
{
	UPINT = 0;

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
    12d6:	9f 5f       	subi	r25, 0xFF	; 255
    12d8:	97 30       	cpi	r25, 0x07	; 7
    12da:	81 f7       	brne	.-32     	; 0x12bc <Pipe_ClearPipes+0x6>
		UPIENX  = 0;
		UPINTX  = 0;
		UPCFG1X = 0;
		Pipe_DisablePipe();
	}
}
    12dc:	08 95       	ret

000012de <Pipe_WaitUntilReady>:
			/** Returns the current USB frame number, when in host mode. Every millisecond the USB bus is active (i.e. not suspended)
			 *  the frame number is incremented by one.
			 */
			static inline uint16_t USB_Host_GetFrameNumber(void)
			{
				return UHFNUM;
    12de:	40 91 a2 00 	lds	r20, 0x00A2
    12e2:	50 91 a3 00 	lds	r21, 0x00A3
    12e6:	24 e6       	ldi	r18, 0x64	; 100
			 *  \return The current pipe token, as a PIPE_TOKEN_* mask.
			 */
			static inline uint8_t Pipe_GetPipeToken(void) ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetPipeToken(void)
			{
				return (UPCFG0X & (0x03 << PTOKEN0));
    12e8:	80 91 aa 00 	lds	r24, 0x00AA

	uint16_t PreviousFrameNumber = USB_Host_GetFrameNumber();

	for (;;)
	{
		if (Pipe_GetPipeToken() == PIPE_TOKEN_IN)
    12ec:	80 73       	andi	r24, 0x30	; 48
    12ee:	80 31       	cpi	r24, 0x10	; 16
    12f0:	29 f4       	brne	.+10     	; 0x12fc <Pipe_WaitUntilReady+0x1e>
			 *  \return Boolean true if the current pipe has received an IN packet, false otherwise.
			 */
			static inline bool Pipe_IsINReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsINReceived(void)
			{
				return ((UPINTX & (1 << RXINI)) ? true : false);
    12f2:	80 91 a6 00 	lds	r24, 0x00A6
		{
			if (Pipe_IsINReceived())
    12f6:	80 ff       	sbrs	r24, 0
    12f8:	05 c0       	rjmp	.+10     	; 0x1304 <Pipe_WaitUntilReady+0x26>
    12fa:	1c c0       	rjmp	.+56     	; 0x1334 <Pipe_WaitUntilReady+0x56>
			 *  \return Boolean true if the current pipe is ready for an OUT packet, false otherwise.
			 */
			static inline bool Pipe_IsOUTReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsOUTReady(void)
			{
				return ((UPINTX & (1 << TXOUTI)) ? true : false);
    12fc:	80 91 a6 00 	lds	r24, 0x00A6
			  return PIPE_READYWAIT_NoError;
		}
		else
		{
			if (Pipe_IsOUTReady())
    1300:	82 fd       	sbrc	r24, 2
    1302:	18 c0       	rjmp	.+48     	; 0x1334 <Pipe_WaitUntilReady+0x56>
			 *  \return Boolean true if the current pipe has been stalled by the attached device, false otherwise.
			 */
			static inline bool Pipe_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsStalled(void)
			{
				return ((UPINTX & (1 << RXSTALLI)) ? true : false);
    1304:	80 91 a6 00 	lds	r24, 0x00A6
			  return PIPE_READYWAIT_NoError;
		}

		if (Pipe_IsStalled())
    1308:	81 ff       	sbrs	r24, 1
    130a:	02 c0       	rjmp	.+4      	; 0x1310 <Pipe_WaitUntilReady+0x32>
    130c:	81 e0       	ldi	r24, 0x01	; 1
    130e:	08 95       	ret
		  return PIPE_READYWAIT_PipeStalled;
		else if (USB_HostState == HOST_STATE_Unattached)
    1310:	80 91 44 01 	lds	r24, 0x0144
    1314:	82 30       	cpi	r24, 0x02	; 2
    1316:	79 f0       	breq	.+30     	; 0x1336 <Pipe_WaitUntilReady+0x58>
    1318:	80 91 a2 00 	lds	r24, 0x00A2
    131c:	90 91 a3 00 	lds	r25, 0x00A3
		  return PIPE_READYWAIT_DeviceDisconnected;

		uint16_t CurrentFrameNumber = USB_Host_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
    1320:	84 17       	cp	r24, r20
    1322:	95 07       	cpc	r25, r21
    1324:	09 f3       	breq	.-62     	; 0x12e8 <Pipe_WaitUntilReady+0xa>
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
    1326:	22 23       	and	r18, r18
    1328:	11 f4       	brne	.+4      	; 0x132e <Pipe_WaitUntilReady+0x50>
    132a:	83 e0       	ldi	r24, 0x03	; 3
    132c:	08 95       	ret
    132e:	21 50       	subi	r18, 0x01	; 1
    1330:	ac 01       	movw	r20, r24
    1332:	da cf       	rjmp	.-76     	; 0x12e8 <Pipe_WaitUntilReady+0xa>
    1334:	80 e0       	ldi	r24, 0x00	; 0
			  return PIPE_READYWAIT_Timeout;
		}
	}
}
    1336:	08 95       	ret

00001338 <USB_ResetInterface>:
{
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
    1338:	6e d0       	rcall	.+220    	; 0x1416 <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
    133a:	75 d0       	rcall	.+234    	; 0x1426 <USB_INT_ClearAllInterrupts>
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				const uint8_t Temp = USBCON;
    133c:	80 91 d8 00 	lds	r24, 0x00D8

				USBCON = (Temp & ~(1 << USBE));
    1340:	98 2f       	mov	r25, r24
    1342:	9f 77       	andi	r25, 0x7F	; 127
    1344:	90 93 d8 00 	sts	0x00D8, r25
				USBCON = (Temp |  (1 << USBE));
    1348:	80 68       	ori	r24, 0x80	; 128
    134a:	80 93 d8 00 	sts	0x00D8, r24

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR  = USB_PLL_PSC;
    134e:	8c e0       	ldi	r24, 0x0C	; 12
    1350:	89 bd       	out	0x29, r24	; 41
				PLLCSR |= (1 << PLLE);
    1352:	89 b5       	in	r24, 0x29	; 41
    1354:	82 60       	ori	r24, 0x02	; 2
    1356:	89 bd       	out	0x29, r24	; 41
		#if defined(USB_SERIES_4_AVR)
		PLLFRQ = ((1 << PLLUSB) | (1 << PDIV3) | (1 << PDIV1));
		#endif

		USB_PLL_On();
		while (!(USB_PLL_IsReady()));
    1358:	09 b4       	in	r0, 0x29	; 41
    135a:	00 fe       	sbrs	r0, 0
    135c:	fd cf       	rjmp	.-6      	; 0x1358 <USB_ResetInterface+0x20>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON  &= ~(1 << FRZCLK);
    135e:	80 91 d8 00 	lds	r24, 0x00D8
    1362:	8f 7d       	andi	r24, 0xDF	; 223
    1364:	80 93 d8 00 	sts	0x00D8, r24
		#endif
	}
	else if (USB_CurrentMode == USB_MODE_Host)
	{
		#if defined(USB_CAN_BE_HOST)
		UHWCON &= ~(1 << UIMOD);
    1368:	80 91 d7 00 	lds	r24, 0x00D7
    136c:	8f 77       	andi	r24, 0x7F	; 127
    136e:	80 93 d7 00 	sts	0x00D7, r24
#endif

#if defined(USB_CAN_BE_HOST)
static void USB_Init_Host(void)
{
	USB_HostState       = HOST_STATE_Unattached;
    1372:	82 e0       	ldi	r24, 0x02	; 2
    1374:	80 93 44 01 	sts	0x0144, r24
	USB_ControlPipeSize = PIPE_CONTROLPIPE_DEFAULT_SIZE;
    1378:	80 e4       	ldi	r24, 0x40	; 64
    137a:	80 93 24 01 	sts	0x0124, r24
	#if !defined(__DOXYGEN__)
		/* Macros: */
			static inline void USB_Host_HostMode_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_HostMode_On(void)
			{
				USBCON |=  (1 << HOST);
    137e:	80 91 d8 00 	lds	r24, 0x00D8
    1382:	80 64       	ori	r24, 0x40	; 64
    1384:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
    1388:	80 91 dd 00 	lds	r24, 0x00DD
    138c:	81 60       	ori	r24, 0x01	; 1
    138e:	80 93 dd 00 	sts	0x00DD, r24
			}

			static inline void USB_Host_VBUS_Manual_Enable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Manual_Enable(void)
			{
				OTGCON |=  (1 << VBUSHWC);
    1392:	80 91 dd 00 	lds	r24, 0x00DD
    1396:	84 60       	ori	r24, 0x04	; 4
    1398:	80 93 dd 00 	sts	0x00DD, r24
				UHWCON &= ~(1 << UVCONE);
    139c:	80 91 d7 00 	lds	r24, 0x00D7
    13a0:	8f 7e       	andi	r24, 0xEF	; 239
    13a2:	80 93 d7 00 	sts	0x00D7, r24

				DDRE   |=  (1 << 7);
    13a6:	6f 9a       	sbi	0x0d, 7	; 13
			}

			static inline void USB_Host_VBUS_Manual_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Manual_On(void)
			{
				PORTE  |=  (1 << 7);
    13a8:	77 9a       	sbi	0x0e, 7	; 14

	USB_Host_VBUS_Auto_Off();
	USB_Host_VBUS_Manual_Enable();
	USB_Host_VBUS_Manual_On();

	USB_INT_Enable(USB_INT_SRPI);
    13aa:	80 91 de 00 	lds	r24, 0x00DE
    13ae:	81 60       	ori	r24, 0x01	; 1
    13b0:	80 93 de 00 	sts	0x00DE, r24
	USB_INT_Enable(USB_INT_BCERRI);
    13b4:	80 91 de 00 	lds	r24, 0x00DE
    13b8:	84 60       	ori	r24, 0x04	; 4
    13ba:	80 93 de 00 	sts	0x00DE, r24
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
    13be:	80 91 e0 00 	lds	r24, 0x00E0
    13c2:	8e 7f       	andi	r24, 0xFE	; 254
    13c4:	80 93 e0 00 	sts	0x00E0, r24

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON  |=  (1 << OTGPADE);
    13c8:	80 91 d8 00 	lds	r24, 0x00D8
    13cc:	80 61       	ori	r24, 0x10	; 16
    13ce:	80 93 d8 00 	sts	0x00D8, r24
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
    13d2:	08 95       	ret

000013d4 <USB_Init>:

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON  |=  (1 << UVREGE);
    13d4:	e7 ed       	ldi	r30, 0xD7	; 215
    13d6:	f0 e0       	ldi	r31, 0x00	; 0
    13d8:	80 81       	ld	r24, Z
    13da:	81 60       	ori	r24, 0x01	; 1
    13dc:	80 83       	st	Z, r24
	{
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
    13de:	81 e0       	ldi	r24, 0x01	; 1
    13e0:	80 93 3b 01 	sts	0x013B, r24

	USB_ResetInterface();
}
    13e4:	a9 cf       	rjmp	.-174    	; 0x1338 <USB_ResetInterface>

000013e6 <USB_ShutDown>:

void USB_ShutDown(void)
{
	USB_INT_DisableAllInterrupts();
    13e6:	17 d0       	rcall	.+46     	; 0x1416 <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
    13e8:	1e d0       	rcall	.+60     	; 0x1426 <USB_INT_ClearAllInterrupts>
			 *  enumerating the device once attached until \ref USB_Attach() is called.
			 */
			static inline void USB_Detach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Detach(void)
			{
				UDCON  |=  (1 << DETACH);
    13ea:	e0 ee       	ldi	r30, 0xE0	; 224
    13ec:	f0 e0       	ldi	r31, 0x00	; 0
    13ee:	80 81       	ld	r24, Z
    13f0:	81 60       	ori	r24, 0x01	; 1
    13f2:	80 83       	st	Z, r24
			}

			static inline void USB_Controller_Disable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Disable(void)
			{
				USBCON  &= ~(1 << USBE);
    13f4:	a8 ed       	ldi	r26, 0xD8	; 216
    13f6:	b0 e0       	ldi	r27, 0x00	; 0
    13f8:	8c 91       	ld	r24, X
    13fa:	8f 77       	andi	r24, 0x7F	; 127
    13fc:	8c 93       	st	X, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR  = 0;
    13fe:	19 bc       	out	0x29, r1	; 41

			static inline void USB_REG_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_Off(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON  &= ~(1 << UVREGE);
    1400:	e7 ed       	ldi	r30, 0xD7	; 215
    1402:	f0 e0       	ldi	r31, 0x00	; 0
    1404:	80 81       	ld	r24, Z
    1406:	8e 7f       	andi	r24, 0xFE	; 254
    1408:	80 83       	st	Z, r24
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON  &= ~(1 << OTGPADE);
    140a:	8c 91       	ld	r24, X
    140c:	8f 7e       	andi	r24, 0xEF	; 239
    140e:	8c 93       	st	X, r24

	#if defined(USB_CAN_BE_BOTH)
	USB_CurrentMode = USB_MODE_None;
	#endif

	USB_IsInitialized = false;
    1410:	10 92 3b 01 	sts	0x013B, r1
}
    1414:	08 95       	ret

00001416 <USB_INT_DisableAllInterrupts>:
#include "USBInterrupt.h"

void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
    1416:	e8 ed       	ldi	r30, 0xD8	; 216
    1418:	f0 e0       	ldi	r31, 0x00	; 0
    141a:	80 81       	ld	r24, Z
    141c:	8c 7f       	andi	r24, 0xFC	; 252
    141e:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_BOTH)
	OTGIEN  = 0;
	#endif

	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
    1420:	10 92 a0 00 	sts	0x00A0, r1
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
	#endif
}
    1424:	08 95       	ret

00001426 <USB_INT_ClearAllInterrupts>:

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT  = 0;
    1426:	10 92 da 00 	sts	0x00DA, r1
	#if defined(USB_CAN_BE_BOTH)
	OTGINT  = 0;
	#endif

	#if defined(USB_CAN_BE_HOST)
	UHINT   = 0;
    142a:	10 92 9f 00 	sts	0x009F, r1
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT   = 0;
	#endif
}
    142e:	08 95       	ret

00001430 <__vector_10>:

ISR(USB_GEN_vect, ISR_BLOCK)
{
    1430:	1f 92       	push	r1
    1432:	0f 92       	push	r0
    1434:	0f b6       	in	r0, 0x3f	; 63
    1436:	0f 92       	push	r0
    1438:	0b b6       	in	r0, 0x3b	; 59
    143a:	0f 92       	push	r0
    143c:	11 24       	eor	r1, r1
    143e:	2f 93       	push	r18
    1440:	3f 93       	push	r19
    1442:	4f 93       	push	r20
    1444:	5f 93       	push	r21
    1446:	6f 93       	push	r22
    1448:	7f 93       	push	r23
    144a:	8f 93       	push	r24
    144c:	9f 93       	push	r25
    144e:	af 93       	push	r26
    1450:	bf 93       	push	r27
    1452:	ef 93       	push	r30
    1454:	ff 93       	push	r31
	}
	#endif
	#endif

	#if defined(USB_CAN_BE_HOST)
	if (USB_INT_HasOccurred(USB_INT_DDISCI) && USB_INT_IsEnabled(USB_INT_DDISCI))
    1456:	80 91 9f 00 	lds	r24, 0x009F
    145a:	81 ff       	sbrs	r24, 1
    145c:	16 c0       	rjmp	.+44     	; 0x148a <__vector_10+0x5a>
    145e:	80 91 a0 00 	lds	r24, 0x00A0
    1462:	81 ff       	sbrs	r24, 1
    1464:	12 c0       	rjmp	.+36     	; 0x148a <__vector_10+0x5a>
	{
		USB_INT_Clear(USB_INT_DDISCI);
    1466:	80 91 9f 00 	lds	r24, 0x009F
    146a:	8d 7f       	andi	r24, 0xFD	; 253
    146c:	80 93 9f 00 	sts	0x009F, r24
		USB_INT_Clear(USB_INT_DCONNI);
    1470:	80 91 9f 00 	lds	r24, 0x009F
    1474:	8e 7f       	andi	r24, 0xFE	; 254
    1476:	80 93 9f 00 	sts	0x009F, r24
		USB_INT_Disable(USB_INT_DDISCI);
    147a:	80 91 a0 00 	lds	r24, 0x00A0
    147e:	8d 7f       	andi	r24, 0xFD	; 253
    1480:	80 93 a0 00 	sts	0x00A0, r24

		EVENT_USB_Host_DeviceUnattached();
    1484:	0e 94 01 02 	call	0x402	; 0x402 <EVENT_USB_Host_DeviceUnattached>

		USB_ResetInterface();
    1488:	57 df       	rcall	.-338    	; 0x1338 <USB_ResetInterface>
	}

	if (USB_INT_HasOccurred(USB_INT_VBERRI) && USB_INT_IsEnabled(USB_INT_VBERRI))
    148a:	80 91 df 00 	lds	r24, 0x00DF
    148e:	81 ff       	sbrs	r24, 1
    1490:	16 c0       	rjmp	.+44     	; 0x14be <__vector_10+0x8e>
    1492:	80 91 de 00 	lds	r24, 0x00DE
    1496:	81 ff       	sbrs	r24, 1
    1498:	12 c0       	rjmp	.+36     	; 0x14be <__vector_10+0x8e>
	{
		USB_INT_Clear(USB_INT_VBERRI);
    149a:	80 91 df 00 	lds	r24, 0x00DF
    149e:	8d 7f       	andi	r24, 0xFD	; 253
    14a0:	80 93 df 00 	sts	0x00DF, r24
			}

			static inline void USB_Host_VBUS_Manual_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Manual_Off(void)
			{
				PORTE  &= ~(1 << 7);
    14a4:	77 98       	cbi	0x0e, 7	; 14
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
    14a6:	80 91 dd 00 	lds	r24, 0x00DD
    14aa:	81 60       	ori	r24, 0x01	; 1
    14ac:	80 93 dd 00 	sts	0x00DD, r24

		USB_Host_VBUS_Manual_Off();
		USB_Host_VBUS_Auto_Off();

		EVENT_USB_Host_HostError(HOST_ERROR_VBusVoltageDip);
    14b0:	80 e0       	ldi	r24, 0x00	; 0
    14b2:	7d d9       	rcall	.-3334   	; 0x7ae <EVENT_USB_Host_HostError>
		EVENT_USB_Host_DeviceUnattached();
    14b4:	0e 94 01 02 	call	0x402	; 0x402 <EVENT_USB_Host_DeviceUnattached>

		USB_HostState = HOST_STATE_Unattached;
    14b8:	82 e0       	ldi	r24, 0x02	; 2
    14ba:	80 93 44 01 	sts	0x0144, r24
	}

	if (USB_INT_HasOccurred(USB_INT_SRPI) && USB_INT_IsEnabled(USB_INT_SRPI))
    14be:	80 91 df 00 	lds	r24, 0x00DF
    14c2:	80 ff       	sbrs	r24, 0
    14c4:	18 c0       	rjmp	.+48     	; 0x14f6 <__vector_10+0xc6>
    14c6:	80 91 de 00 	lds	r24, 0x00DE
    14ca:	80 ff       	sbrs	r24, 0
    14cc:	14 c0       	rjmp	.+40     	; 0x14f6 <__vector_10+0xc6>
	{
		USB_INT_Clear(USB_INT_SRPI);
    14ce:	80 91 df 00 	lds	r24, 0x00DF
    14d2:	8e 7f       	andi	r24, 0xFE	; 254
    14d4:	80 93 df 00 	sts	0x00DF, r24
		USB_INT_Disable(USB_INT_SRPI);
    14d8:	80 91 de 00 	lds	r24, 0x00DE
    14dc:	8e 7f       	andi	r24, 0xFE	; 254
    14de:	80 93 de 00 	sts	0x00DE, r24

		EVENT_USB_Host_DeviceAttached();
    14e2:	0e 94 0a 02 	call	0x414	; 0x414 <EVENT_USB_Host_DeviceAttached>

		USB_INT_Enable(USB_INT_DDISCI);
    14e6:	80 91 a0 00 	lds	r24, 0x00A0
    14ea:	82 60       	ori	r24, 0x02	; 2
    14ec:	80 93 a0 00 	sts	0x00A0, r24

		USB_HostState = HOST_STATE_Powered;
    14f0:	83 e0       	ldi	r24, 0x03	; 3
    14f2:	80 93 44 01 	sts	0x0144, r24
	}

	if (USB_INT_HasOccurred(USB_INT_BCERRI) && USB_INT_IsEnabled(USB_INT_BCERRI))
    14f6:	80 91 df 00 	lds	r24, 0x00DF
    14fa:	82 ff       	sbrs	r24, 2
    14fc:	10 c0       	rjmp	.+32     	; 0x151e <__vector_10+0xee>
    14fe:	80 91 de 00 	lds	r24, 0x00DE
    1502:	82 ff       	sbrs	r24, 2
    1504:	0c c0       	rjmp	.+24     	; 0x151e <__vector_10+0xee>
	{
		USB_INT_Clear(USB_INT_BCERRI);
    1506:	80 91 df 00 	lds	r24, 0x00DF
    150a:	8b 7f       	andi	r24, 0xFB	; 251
    150c:	80 93 df 00 	sts	0x00DF, r24

		EVENT_USB_Host_DeviceEnumerationFailed(HOST_ENUMERROR_NoDeviceDetected, 0);
    1510:	82 e0       	ldi	r24, 0x02	; 2
    1512:	60 e0       	ldi	r22, 0x00	; 0
    1514:	0e 94 13 02 	call	0x426	; 0x426 <EVENT_USB_Host_DeviceEnumerationFailed>
		EVENT_USB_Host_DeviceUnattached();
    1518:	0e 94 01 02 	call	0x402	; 0x402 <EVENT_USB_Host_DeviceUnattached>

		USB_ResetInterface();
    151c:	0d df       	rcall	.-486    	; 0x1338 <USB_ResetInterface>
	}

	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_HSOFI) && USB_INT_IsEnabled(USB_INT_HSOFI))
    151e:	80 91 9f 00 	lds	r24, 0x009F
    1522:	85 ff       	sbrs	r24, 5
    1524:	0a c0       	rjmp	.+20     	; 0x153a <__vector_10+0x10a>
    1526:	80 91 a0 00 	lds	r24, 0x00A0
    152a:	85 ff       	sbrs	r24, 5
    152c:	06 c0       	rjmp	.+12     	; 0x153a <__vector_10+0x10a>
	{
		USB_INT_Clear(USB_INT_HSOFI);
    152e:	80 91 9f 00 	lds	r24, 0x009F
    1532:	8f 7d       	andi	r24, 0xDF	; 223
    1534:	80 93 9f 00 	sts	0x009F, r24

		EVENT_USB_Host_StartOfFrame();
    1538:	ae d0       	rcall	.+348    	; 0x1696 <USB_Event_Stub>
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
    153a:	ff 91       	pop	r31
    153c:	ef 91       	pop	r30
    153e:	bf 91       	pop	r27
    1540:	af 91       	pop	r26
    1542:	9f 91       	pop	r25
    1544:	8f 91       	pop	r24
    1546:	7f 91       	pop	r23
    1548:	6f 91       	pop	r22
    154a:	5f 91       	pop	r21
    154c:	4f 91       	pop	r20
    154e:	3f 91       	pop	r19
    1550:	2f 91       	pop	r18
    1552:	0f 90       	pop	r0
    1554:	0b be       	out	0x3b, r0	; 59
    1556:	0f 90       	pop	r0
    1558:	0f be       	out	0x3f, r0	; 63
    155a:	0f 90       	pop	r0
    155c:	1f 90       	pop	r1
    155e:	18 95       	reti

00001560 <USB_GetNextDescriptorComp>:

uint8_t USB_GetNextDescriptorComp(uint16_t* const BytesRem, void** const CurrConfigLoc, ConfigComparatorPtr_t const ComparatorRoutine)
{
    1560:	af 92       	push	r10
    1562:	bf 92       	push	r11
    1564:	cf 92       	push	r12
    1566:	df 92       	push	r13
    1568:	ef 92       	push	r14
    156a:	ff 92       	push	r15
    156c:	0f 93       	push	r16
    156e:	1f 93       	push	r17
    1570:	cf 93       	push	r28
    1572:	df 93       	push	r29
    1574:	7c 01       	movw	r14, r24
    1576:	8b 01       	movw	r16, r22
    1578:	5a 01       	movw	r10, r20
    157a:	21 c0       	rjmp	.+66     	; 0x15be <USB_GetNextDescriptorComp+0x5e>
	uint8_t ErrorCode;

	while (*BytesRem)
	{
		uint8_t* PrevDescLoc  = *CurrConfigLoc;
    157c:	f8 01       	movw	r30, r16
    157e:	c0 81       	ld	r28, Z
    1580:	d1 81       	ldd	r29, Z+1	; 0x01
			static inline void USB_GetNextDescriptor(uint16_t* const BytesRem,
			                                         void** CurrConfigLoc) ATTR_NON_NULL_PTR_ARG(1) ATTR_NON_NULL_PTR_ARG(2);
			static inline void USB_GetNextDescriptor(uint16_t* const BytesRem,
			                                         void** CurrConfigLoc)
			{
				uint16_t CurrDescriptorSize = DESCRIPTOR_CAST(*CurrConfigLoc, USB_Descriptor_Header_t).Size;
    1582:	88 81       	ld	r24, Y
    1584:	90 e0       	ldi	r25, 0x00	; 0

				*CurrConfigLoc  = ((uint8_t*)*CurrConfigLoc) + CurrDescriptorSize;
    1586:	9e 01       	movw	r18, r28
    1588:	28 0f       	add	r18, r24
    158a:	39 1f       	adc	r19, r25
    158c:	31 83       	std	Z+1, r19	; 0x01
    158e:	20 83       	st	Z, r18
				*BytesRem      -= CurrDescriptorSize;
    1590:	f7 01       	movw	r30, r14
    1592:	20 81       	ld	r18, Z
    1594:	31 81       	ldd	r19, Z+1	; 0x01
    1596:	28 1b       	sub	r18, r24
    1598:	39 0b       	sbc	r19, r25
    159a:	31 83       	std	Z+1, r19	; 0x01
    159c:	20 83       	st	Z, r18
		uint16_t PrevBytesRem = *BytesRem;

		USB_GetNextDescriptor(BytesRem, CurrConfigLoc);

		if ((ErrorCode = ComparatorRoutine(*CurrConfigLoc)) != DESCRIPTOR_SEARCH_NotFound)
    159e:	f8 01       	movw	r30, r16
    15a0:	80 81       	ld	r24, Z
    15a2:	91 81       	ldd	r25, Z+1	; 0x01
    15a4:	f5 01       	movw	r30, r10
    15a6:	09 95       	icall
    15a8:	82 30       	cpi	r24, 0x02	; 2
    15aa:	49 f0       	breq	.+18     	; 0x15be <USB_GetNextDescriptorComp+0x5e>
		{
			if (ErrorCode == DESCRIPTOR_SEARCH_Fail)
    15ac:	81 30       	cpi	r24, 0x01	; 1
    15ae:	71 f4       	brne	.+28     	; 0x15cc <USB_GetNextDescriptorComp+0x6c>
			{
				*CurrConfigLoc = PrevDescLoc;
    15b0:	f8 01       	movw	r30, r16
    15b2:	c0 83       	st	Z, r28
    15b4:	d1 83       	std	Z+1, r29	; 0x01
				*BytesRem      = PrevBytesRem;
    15b6:	f7 01       	movw	r30, r14
    15b8:	d1 82       	std	Z+1, r13	; 0x01
    15ba:	c0 82       	st	Z, r12
    15bc:	07 c0       	rjmp	.+14     	; 0x15cc <USB_GetNextDescriptorComp+0x6c>

uint8_t USB_GetNextDescriptorComp(uint16_t* const BytesRem, void** const CurrConfigLoc, ConfigComparatorPtr_t const ComparatorRoutine)
{
	uint8_t ErrorCode;

	while (*BytesRem)
    15be:	f7 01       	movw	r30, r14
    15c0:	c0 80       	ld	r12, Z
    15c2:	d1 80       	ldd	r13, Z+1	; 0x01
    15c4:	c1 14       	cp	r12, r1
    15c6:	d1 04       	cpc	r13, r1
    15c8:	c9 f6       	brne	.-78     	; 0x157c <USB_GetNextDescriptorComp+0x1c>
    15ca:	82 e0       	ldi	r24, 0x02	; 2
			return ErrorCode;
		}
	}

	return DESCRIPTOR_SEARCH_COMP_EndOfDescriptor;
}
    15cc:	df 91       	pop	r29
    15ce:	cf 91       	pop	r28
    15d0:	1f 91       	pop	r17
    15d2:	0f 91       	pop	r16
    15d4:	ff 90       	pop	r15
    15d6:	ef 90       	pop	r14
    15d8:	df 90       	pop	r13
    15da:	cf 90       	pop	r12
    15dc:	bf 90       	pop	r11
    15de:	af 90       	pop	r10
    15e0:	08 95       	ret

000015e2 <USB_Host_GetDeviceConfigDescriptor>:
#include "ConfigDescriptor.h"

#if defined(USB_CAN_BE_HOST)
uint8_t USB_Host_GetDeviceConfigDescriptor(uint8_t ConfigNumber, uint16_t* const ConfigSizePtr,
                                           void* BufferPtr, uint16_t BufferSize)
{
    15e2:	cf 92       	push	r12
    15e4:	df 92       	push	r13
    15e6:	ef 92       	push	r14
    15e8:	ff 92       	push	r15
    15ea:	0f 93       	push	r16
    15ec:	1f 93       	push	r17
    15ee:	df 93       	push	r29
    15f0:	cf 93       	push	r28
    15f2:	cd b7       	in	r28, 0x3d	; 61
    15f4:	de b7       	in	r29, 0x3e	; 62
    15f6:	29 97       	sbiw	r28, 0x09	; 9
    15f8:	0f b6       	in	r0, 0x3f	; 63
    15fa:	f8 94       	cli
    15fc:	de bf       	out	0x3e, r29	; 62
    15fe:	0f be       	out	0x3f, r0	; 63
    1600:	cd bf       	out	0x3d, r28	; 61
    1602:	6b 01       	movw	r12, r22
    1604:	8a 01       	movw	r16, r20
    1606:	79 01       	movw	r14, r18
	uint8_t ErrorCode;
	uint8_t ConfigHeader[sizeof(USB_Descriptor_Configuration_Header_t)];

	USB_ControlRequest = (USB_Request_Header_t)
    1608:	90 e8       	ldi	r25, 0x80	; 128
    160a:	90 93 3c 01 	sts	0x013C, r25
    160e:	96 e0       	ldi	r25, 0x06	; 6
    1610:	90 93 3d 01 	sts	0x013D, r25
    1614:	90 e0       	ldi	r25, 0x00	; 0
    1616:	01 97       	sbiw	r24, 0x01	; 1
    1618:	92 60       	ori	r25, 0x02	; 2
    161a:	90 93 3f 01 	sts	0x013F, r25
    161e:	80 93 3e 01 	sts	0x013E, r24
    1622:	10 92 41 01 	sts	0x0141, r1
    1626:	10 92 40 01 	sts	0x0140, r1
    162a:	89 e0       	ldi	r24, 0x09	; 9
    162c:	90 e0       	ldi	r25, 0x00	; 0
    162e:	90 93 43 01 	sts	0x0143, r25
    1632:	80 93 42 01 	sts	0x0142, r24
    1636:	10 92 a7 00 	sts	0x00A7, r1
			.wLength       = sizeof(USB_Descriptor_Configuration_Header_t),
		};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	if ((ErrorCode = USB_Host_SendControlRequest(ConfigHeader)) != HOST_SENDCONTROL_Successful)
    163a:	ce 01       	movw	r24, r28
    163c:	01 96       	adiw	r24, 0x01	; 1
    163e:	55 d0       	rcall	.+170    	; 0x16ea <USB_Host_SendControlRequest>
    1640:	28 2f       	mov	r18, r24
    1642:	88 23       	and	r24, r24
    1644:	c1 f4       	brne	.+48     	; 0x1676 <USB_Host_GetDeviceConfigDescriptor+0x94>
	  return ErrorCode;

	*ConfigSizePtr = DESCRIPTOR_PCAST(ConfigHeader, USB_Descriptor_Configuration_Header_t)->TotalConfigurationSize;
    1646:	8b 81       	ldd	r24, Y+3	; 0x03
    1648:	9c 81       	ldd	r25, Y+4	; 0x04
    164a:	f6 01       	movw	r30, r12
    164c:	91 83       	std	Z+1, r25	; 0x01
    164e:	80 83       	st	Z, r24

	if (*ConfigSizePtr > BufferSize)
    1650:	e8 16       	cp	r14, r24
    1652:	f9 06       	cpc	r15, r25
    1654:	10 f4       	brcc	.+4      	; 0x165a <USB_Host_GetDeviceConfigDescriptor+0x78>
    1656:	25 e0       	ldi	r18, 0x05	; 5
    1658:	0e c0       	rjmp	.+28     	; 0x1676 <USB_Host_GetDeviceConfigDescriptor+0x94>
	  return HOST_GETCONFIG_BuffOverflow;

	USB_ControlRequest.wLength = *ConfigSizePtr;
    165a:	90 93 43 01 	sts	0x0143, r25
    165e:	80 93 42 01 	sts	0x0142, r24

	if ((ErrorCode = USB_Host_SendControlRequest(BufferPtr)) != HOST_SENDCONTROL_Successful)
    1662:	c8 01       	movw	r24, r16
    1664:	42 d0       	rcall	.+132    	; 0x16ea <USB_Host_SendControlRequest>
    1666:	28 2f       	mov	r18, r24
    1668:	88 23       	and	r24, r24
    166a:	29 f4       	brne	.+10     	; 0x1676 <USB_Host_GetDeviceConfigDescriptor+0x94>
	  return ErrorCode;

	if (DESCRIPTOR_TYPE(BufferPtr) != DTYPE_Configuration)
    166c:	f8 01       	movw	r30, r16
    166e:	81 81       	ldd	r24, Z+1	; 0x01
    1670:	82 30       	cpi	r24, 0x02	; 2
    1672:	09 f0       	breq	.+2      	; 0x1676 <USB_Host_GetDeviceConfigDescriptor+0x94>
    1674:	26 e0       	ldi	r18, 0x06	; 6
	  return HOST_GETCONFIG_InvalidData;

	return HOST_GETCONFIG_Successful;
}
    1676:	82 2f       	mov	r24, r18
    1678:	29 96       	adiw	r28, 0x09	; 9
    167a:	0f b6       	in	r0, 0x3f	; 63
    167c:	f8 94       	cli
    167e:	de bf       	out	0x3e, r29	; 62
    1680:	0f be       	out	0x3f, r0	; 63
    1682:	cd bf       	out	0x3d, r28	; 61
    1684:	cf 91       	pop	r28
    1686:	df 91       	pop	r29
    1688:	1f 91       	pop	r17
    168a:	0f 91       	pop	r16
    168c:	ff 90       	pop	r15
    168e:	ef 90       	pop	r14
    1690:	df 90       	pop	r13
    1692:	cf 90       	pop	r12
    1694:	08 95       	ret

00001696 <USB_Event_Stub>:
#include "Events.h"

void USB_Event_Stub(void)
{

}
    1696:	08 95       	ret

00001698 <USB_Host_WaitForIOS>:

	return ReturnStatus;
}

static uint8_t USB_Host_WaitForIOS(const uint8_t WaitType)
{
    1698:	1f 93       	push	r17
    169a:	cf 93       	push	r28
    169c:	df 93       	push	r29
    169e:	18 2f       	mov	r17, r24
    16a0:	c8 ee       	ldi	r28, 0xE8	; 232
    16a2:	d3 e0       	ldi	r29, 0x03	; 3
    16a4:	09 c0       	rjmp	.+18     	; 0x16b8 <USB_Host_WaitForIOS+0x20>
	         ((WaitType == USB_HOST_WAITFOR_InReceived) && Pipe_IsINReceived()) ||
	         ((WaitType == USB_HOST_WAITFOR_OutReady)   && Pipe_IsOUTReady())))
	{
		uint8_t ErrorCode;

		if ((ErrorCode = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
    16a6:	81 e0       	ldi	r24, 0x01	; 1
    16a8:	f3 db       	rcall	.-2074   	; 0xe90 <USB_Host_WaitMS>
    16aa:	88 23       	and	r24, r24
    16ac:	d1 f4       	brne	.+52     	; 0x16e2 <USB_Host_WaitForIOS+0x4a>
		  return ErrorCode;

		if (!(TimeoutCounter--))
    16ae:	20 97       	sbiw	r28, 0x00	; 0
    16b0:	11 f4       	brne	.+4      	; 0x16b6 <USB_Host_WaitForIOS+0x1e>
    16b2:	84 e0       	ldi	r24, 0x04	; 4
    16b4:	16 c0       	rjmp	.+44     	; 0x16e2 <USB_Host_WaitForIOS+0x4a>
    16b6:	21 97       	sbiw	r28, 0x01	; 1
	uint8_t  TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#else
	uint16_t TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#endif

	while (!(((WaitType == USB_HOST_WAITFOR_SetupSent)  && Pipe_IsSETUPSent())  ||
    16b8:	11 23       	and	r17, r17
    16ba:	29 f4       	brne	.+10     	; 0x16c6 <USB_Host_WaitForIOS+0x2e>
			 *  \return Boolean true if the current pipe is ready for a SETUP packet, false otherwise.
			 */
			static inline bool Pipe_IsSETUPSent(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsSETUPSent(void)
			{
				return ((UPINTX & (1 << TXSTPI)) ? true : false);
    16bc:	80 91 a6 00 	lds	r24, 0x00A6
    16c0:	83 ff       	sbrs	r24, 3
    16c2:	f1 cf       	rjmp	.-30     	; 0x16a6 <USB_Host_WaitForIOS+0xe>
    16c4:	0d c0       	rjmp	.+26     	; 0x16e0 <USB_Host_WaitForIOS+0x48>
    16c6:	11 30       	cpi	r17, 0x01	; 1
    16c8:	29 f4       	brne	.+10     	; 0x16d4 <USB_Host_WaitForIOS+0x3c>
			 *  \return Boolean true if the current pipe has received an IN packet, false otherwise.
			 */
			static inline bool Pipe_IsINReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsINReceived(void)
			{
				return ((UPINTX & (1 << RXINI)) ? true : false);
    16ca:	80 91 a6 00 	lds	r24, 0x00A6
    16ce:	80 ff       	sbrs	r24, 0
    16d0:	ea cf       	rjmp	.-44     	; 0x16a6 <USB_Host_WaitForIOS+0xe>
    16d2:	06 c0       	rjmp	.+12     	; 0x16e0 <USB_Host_WaitForIOS+0x48>
    16d4:	12 30       	cpi	r17, 0x02	; 2
    16d6:	39 f7       	brne	.-50     	; 0x16a6 <USB_Host_WaitForIOS+0xe>
			 *  \return Boolean true if the current pipe is ready for an OUT packet, false otherwise.
			 */
			static inline bool Pipe_IsOUTReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsOUTReady(void)
			{
				return ((UPINTX & (1 << TXOUTI)) ? true : false);
    16d8:	80 91 a6 00 	lds	r24, 0x00A6
    16dc:	82 ff       	sbrs	r24, 2
    16de:	e3 cf       	rjmp	.-58     	; 0x16a6 <USB_Host_WaitForIOS+0xe>
    16e0:	80 e0       	ldi	r24, 0x00	; 0
		if (!(TimeoutCounter--))
		  return HOST_SENDCONTROL_SoftwareTimeOut;
	}

	return HOST_SENDCONTROL_Successful;
}
    16e2:	df 91       	pop	r29
    16e4:	cf 91       	pop	r28
    16e6:	1f 91       	pop	r17
    16e8:	08 95       	ret

000016ea <USB_Host_SendControlRequest>:

#define  __INCLUDE_FROM_HOSTSTDREQ_C
#include "HostStandardReq.h"

uint8_t USB_Host_SendControlRequest(void* const BufferPtr)
{
    16ea:	ff 92       	push	r15
    16ec:	0f 93       	push	r16
    16ee:	1f 93       	push	r17
    16f0:	cf 93       	push	r28
    16f2:	df 93       	push	r29
    16f4:	18 2f       	mov	r17, r24
    16f6:	09 2f       	mov	r16, r25
			 *  \return Boolean true if the bus is currently suspended, false otherwise.
			 */
			static inline bool USB_Host_IsBusSuspended(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusSuspended(void)
			{
				return ((UHCON & (1 << SOFEN)) ? false : true);
    16f8:	f0 90 9e 00 	lds	r15, 0x009E
	uint8_t* HeaderStream   = (uint8_t*)&USB_ControlRequest;
	uint8_t* DataStream     = (uint8_t*)BufferPtr;
	bool     BusSuspended   = USB_Host_IsBusSuspended();
	uint8_t  ReturnStatus   = HOST_SENDCONTROL_Successful;
	uint16_t DataLen        = USB_ControlRequest.wLength;
    16fc:	c0 91 42 01 	lds	r28, 0x0142
    1700:	d0 91 43 01 	lds	r29, 0x0143
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
    1704:	80 91 9e 00 	lds	r24, 0x009E
    1708:	81 60       	ori	r24, 0x01	; 1
    170a:	80 93 9e 00 	sts	0x009E, r24

	USB_Host_ResumeBus();

	if ((ReturnStatus = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
    170e:	81 e0       	ldi	r24, 0x01	; 1
    1710:	bf db       	rcall	.-2178   	; 0xe90 <USB_Host_WaitMS>
    1712:	98 2f       	mov	r25, r24
    1714:	88 23       	and	r24, r24
    1716:	09 f0       	breq	.+2      	; 0x171a <USB_Host_SendControlRequest+0x30>
    1718:	d2 c0       	rjmp	.+420    	; 0x18be <USB_Host_SendControlRequest+0x1d4>
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    171a:	80 91 aa 00 	lds	r24, 0x00AA
    171e:	8f 7c       	andi	r24, 0xCF	; 207
    1720:	80 93 aa 00 	sts	0x00AA, r24
			 *  flag for the pipe.
			 */
			static inline void Pipe_ClearErrorFlags(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearErrorFlags(void)
			{
				UPERRX = 0;
    1724:	10 92 f5 00 	sts	0x00F5, r1

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    1728:	80 91 a9 00 	lds	r24, 0x00A9
    172c:	8f 7b       	andi	r24, 0xBF	; 191
    172e:	80 93 a9 00 	sts	0x00A9, r24
    1732:	ec e3       	ldi	r30, 0x3C	; 60
    1734:	f1 e0       	ldi	r31, 0x01	; 1
	Pipe_ClearErrorFlags();

	Pipe_Unfreeze();

	for (uint8_t HeaderByte = 0; HeaderByte < sizeof(USB_Request_Header_t); HeaderByte++)
	  Pipe_Write_Byte(*(HeaderStream++));
    1736:	81 91       	ld	r24, Z+
			 *  \param[in] Byte  Next byte to write into the the currently selected pipe's FIFO buffer.
			 */
			static inline void Pipe_Write_Byte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Write_Byte(const uint8_t Byte)
			{
				UPDATX = Byte;
    1738:	80 93 af 00 	sts	0x00AF, r24
	Pipe_SetPipeToken(PIPE_TOKEN_SETUP);
	Pipe_ClearErrorFlags();

	Pipe_Unfreeze();

	for (uint8_t HeaderByte = 0; HeaderByte < sizeof(USB_Request_Header_t); HeaderByte++)
    173c:	81 e0       	ldi	r24, 0x01	; 1
    173e:	e4 34       	cpi	r30, 0x44	; 68
    1740:	f8 07       	cpc	r31, r24
    1742:	c9 f7       	brne	.-14     	; 0x1736 <USB_Host_SendControlRequest+0x4c>
			 *  \ingroup Group_PipePacketManagement
			 */
			static inline void Pipe_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearSETUP(void)
			{
				UPINTX &= ~((1 << TXSTPI) | (1 << FIFOCON));
    1744:	80 91 a6 00 	lds	r24, 0x00A6
    1748:	87 77       	andi	r24, 0x77	; 119
    174a:	80 93 a6 00 	sts	0x00A6, r24
	  Pipe_Write_Byte(*(HeaderStream++));

	Pipe_ClearSETUP();

	if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_SetupSent)) != HOST_SENDCONTROL_Successful)
    174e:	80 e0       	ldi	r24, 0x00	; 0
    1750:	a3 df       	rcall	.-186    	; 0x1698 <USB_Host_WaitForIOS>
    1752:	98 2f       	mov	r25, r24
    1754:	88 23       	and	r24, r24
    1756:	09 f0       	breq	.+2      	; 0x175a <USB_Host_SendControlRequest+0x70>
    1758:	b2 c0       	rjmp	.+356    	; 0x18be <USB_Host_SendControlRequest+0x1d4>

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    175a:	80 91 a9 00 	lds	r24, 0x00A9
    175e:	80 64       	ori	r24, 0x40	; 64
    1760:	80 93 a9 00 	sts	0x00A9, r24
	  goto End_Of_Control_Send;

	Pipe_Freeze();

	if ((ReturnStatus = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
    1764:	81 e0       	ldi	r24, 0x01	; 1
    1766:	94 db       	rcall	.-2264   	; 0xe90 <USB_Host_WaitMS>
    1768:	98 2f       	mov	r25, r24
    176a:	88 23       	and	r24, r24
    176c:	09 f0       	breq	.+2      	; 0x1770 <USB_Host_SendControlRequest+0x86>
    176e:	a7 c0       	rjmp	.+334    	; 0x18be <USB_Host_SendControlRequest+0x1d4>
#include "HostStandardReq.h"

uint8_t USB_Host_SendControlRequest(void* const BufferPtr)
{
	uint8_t* HeaderStream   = (uint8_t*)&USB_ControlRequest;
	uint8_t* DataStream     = (uint8_t*)BufferPtr;
    1770:	21 2f       	mov	r18, r17
    1772:	30 2f       	mov	r19, r16
    1774:	c9 01       	movw	r24, r18
    1776:	8c 01       	movw	r16, r24
	Pipe_Freeze();

	if ((ReturnStatus = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
	  goto End_Of_Control_Send;

	if ((USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_DIRECTION) == REQDIR_DEVICETOHOST)
    1778:	80 91 3c 01 	lds	r24, 0x013C
    177c:	87 ff       	sbrs	r24, 7
    177e:	52 c0       	rjmp	.+164    	; 0x1824 <USB_Host_SendControlRequest+0x13a>
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    1780:	80 91 aa 00 	lds	r24, 0x00AA
    1784:	8f 7c       	andi	r24, 0xCF	; 207
    1786:	80 61       	ori	r24, 0x10	; 16
    1788:	80 93 aa 00 	sts	0x00AA, r24
	{
		Pipe_SetPipeToken(PIPE_TOKEN_IN);

		if (DataStream != NULL)
    178c:	01 15       	cp	r16, r1
    178e:	11 05       	cpc	r17, r1
    1790:	69 f5       	brne	.+90     	; 0x17ec <USB_Host_SendControlRequest+0x102>
    1792:	2e c0       	rjmp	.+92     	; 0x17f0 <USB_Host_SendControlRequest+0x106>

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    1794:	80 91 a9 00 	lds	r24, 0x00A9
    1798:	8f 7b       	andi	r24, 0xBF	; 191
    179a:	80 93 a9 00 	sts	0x00A9, r24
		{
			while (DataLen)
			{
				Pipe_Unfreeze();

				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_InReceived)) != HOST_SENDCONTROL_Successful)
    179e:	81 e0       	ldi	r24, 0x01	; 1
    17a0:	7b df       	rcall	.-266    	; 0x1698 <USB_Host_WaitForIOS>
    17a2:	98 2f       	mov	r25, r24
    17a4:	88 23       	and	r24, r24
    17a6:	09 f0       	breq	.+2      	; 0x17aa <USB_Host_SendControlRequest+0xc0>
    17a8:	8a c0       	rjmp	.+276    	; 0x18be <USB_Host_SendControlRequest+0x1d4>
			 *  \return Total number of bytes in the currently selected Pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
    17aa:	80 91 f6 00 	lds	r24, 0x00F6
    17ae:	90 91 f7 00 	lds	r25, 0x00F7
				  goto End_Of_Control_Send;

				if (!(Pipe_BytesInPipe()))
    17b2:	89 2b       	or	r24, r25
    17b4:	49 f4       	brne	.+18     	; 0x17c8 <USB_Host_SendControlRequest+0xde>
    17b6:	c0 e0       	ldi	r28, 0x00	; 0
    17b8:	d0 e0       	ldi	r29, 0x00	; 0
    17ba:	06 c0       	rjmp	.+12     	; 0x17c8 <USB_Host_SendControlRequest+0xde>
			 *  \return Next byte in the currently selected pipe's FIFO buffer.
			 */
			static inline uint8_t Pipe_Read_Byte(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_Read_Byte(void)
			{
				return UPDATX;
    17bc:	80 91 af 00 	lds	r24, 0x00AF
				  DataLen = 0;

				while (Pipe_BytesInPipe() && DataLen)
				{
					*(DataStream++) = Pipe_Read_Byte();
    17c0:	f8 01       	movw	r30, r16
    17c2:	81 93       	st	Z+, r24
    17c4:	8f 01       	movw	r16, r30
					DataLen--;
    17c6:	21 97       	sbiw	r28, 0x01	; 1
			 *  \return Total number of bytes in the currently selected Pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
    17c8:	80 91 f6 00 	lds	r24, 0x00F6
    17cc:	90 91 f7 00 	lds	r25, 0x00F7
				  goto End_Of_Control_Send;

				if (!(Pipe_BytesInPipe()))
				  DataLen = 0;

				while (Pipe_BytesInPipe() && DataLen)
    17d0:	89 2b       	or	r24, r25
    17d2:	11 f0       	breq	.+4      	; 0x17d8 <USB_Host_SendControlRequest+0xee>
    17d4:	20 97       	sbiw	r28, 0x00	; 0
    17d6:	91 f7       	brne	.-28     	; 0x17bc <USB_Host_SendControlRequest+0xd2>

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    17d8:	80 91 a9 00 	lds	r24, 0x00A9
    17dc:	80 64       	ori	r24, 0x40	; 64
    17de:	80 93 a9 00 	sts	0x00A9, r24
			 *  \ingroup Group_PipePacketManagement
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
    17e2:	80 91 a6 00 	lds	r24, 0x00A6
    17e6:	8e 77       	andi	r24, 0x7E	; 126
    17e8:	80 93 a6 00 	sts	0x00A6, r24
	{
		Pipe_SetPipeToken(PIPE_TOKEN_IN);

		if (DataStream != NULL)
		{
			while (DataLen)
    17ec:	20 97       	sbiw	r28, 0x00	; 0
    17ee:	91 f6       	brne	.-92     	; 0x1794 <USB_Host_SendControlRequest+0xaa>
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    17f0:	80 91 aa 00 	lds	r24, 0x00AA
    17f4:	8f 7c       	andi	r24, 0xCF	; 207
    17f6:	80 62       	ori	r24, 0x20	; 32
    17f8:	80 93 aa 00 	sts	0x00AA, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    17fc:	80 91 a9 00 	lds	r24, 0x00A9
    1800:	8f 7b       	andi	r24, 0xBF	; 191
    1802:	80 93 a9 00 	sts	0x00A9, r24
		}

		Pipe_SetPipeToken(PIPE_TOKEN_OUT);
		Pipe_Unfreeze();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    1806:	82 e0       	ldi	r24, 0x02	; 2
    1808:	47 df       	rcall	.-370    	; 0x1698 <USB_Host_WaitForIOS>
    180a:	98 2f       	mov	r25, r24
    180c:	88 23       	and	r24, r24
    180e:	09 f0       	breq	.+2      	; 0x1812 <USB_Host_SendControlRequest+0x128>
    1810:	56 c0       	rjmp	.+172    	; 0x18be <USB_Host_SendControlRequest+0x1d4>
			 *  \ingroup Group_PipePacketManagement
			 */
			static inline void Pipe_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearOUT(void)
			{
				UPINTX &= ~((1 << TXOUTI) | (1 << FIFOCON));
    1812:	80 91 a6 00 	lds	r24, 0x00A6
    1816:	8b 77       	andi	r24, 0x7B	; 123
    1818:	80 93 a6 00 	sts	0x00A6, r24
		  goto End_Of_Control_Send;

		Pipe_ClearOUT();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    181c:	82 e0       	ldi	r24, 0x02	; 2
    181e:	3c df       	rcall	.-392    	; 0x1698 <USB_Host_WaitForIOS>
    1820:	98 2f       	mov	r25, r24
    1822:	4d c0       	rjmp	.+154    	; 0x18be <USB_Host_SendControlRequest+0x1d4>
		  goto End_Of_Control_Send;
	}
	else
	{
		if (DataStream != NULL)
    1824:	01 15       	cp	r16, r1
    1826:	11 05       	cpc	r17, r1
    1828:	a9 f1       	breq	.+106    	; 0x1894 <USB_Host_SendControlRequest+0x1aa>
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    182a:	80 91 aa 00 	lds	r24, 0x00AA
    182e:	8f 7c       	andi	r24, 0xCF	; 207
    1830:	80 62       	ori	r24, 0x20	; 32
    1832:	80 93 aa 00 	sts	0x00AA, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    1836:	80 91 a9 00 	lds	r24, 0x00A9
    183a:	8f 7b       	andi	r24, 0xBF	; 191
    183c:	80 93 a9 00 	sts	0x00A9, r24
    1840:	1d c0       	rjmp	.+58     	; 0x187c <USB_Host_SendControlRequest+0x192>
			Pipe_SetPipeToken(PIPE_TOKEN_OUT);
			Pipe_Unfreeze();

			while (DataLen)
			{
				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    1842:	82 e0       	ldi	r24, 0x02	; 2
    1844:	29 df       	rcall	.-430    	; 0x1698 <USB_Host_WaitForIOS>
    1846:	98 2f       	mov	r25, r24
    1848:	88 23       	and	r24, r24
    184a:	c9 f5       	brne	.+114    	; 0x18be <USB_Host_SendControlRequest+0x1d4>
				  goto End_Of_Control_Send;

				while (DataLen && (Pipe_BytesInPipe() < USB_ControlPipeSize))
    184c:	80 91 24 01 	lds	r24, 0x0124
    1850:	28 2f       	mov	r18, r24
    1852:	30 e0       	ldi	r19, 0x00	; 0
    1854:	07 c0       	rjmp	.+14     	; 0x1864 <USB_Host_SendControlRequest+0x17a>
				{
					Pipe_Write_Byte(*(DataStream++));
    1856:	f8 01       	movw	r30, r16
    1858:	81 91       	ld	r24, Z+
    185a:	8f 01       	movw	r16, r30
			 *  \param[in] Byte  Next byte to write into the the currently selected pipe's FIFO buffer.
			 */
			static inline void Pipe_Write_Byte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Write_Byte(const uint8_t Byte)
			{
				UPDATX = Byte;
    185c:	80 93 af 00 	sts	0x00AF, r24
					DataLen--;
    1860:	21 97       	sbiw	r28, 0x01	; 1
			while (DataLen)
			{
				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
				  goto End_Of_Control_Send;

				while (DataLen && (Pipe_BytesInPipe() < USB_ControlPipeSize))
    1862:	39 f0       	breq	.+14     	; 0x1872 <USB_Host_SendControlRequest+0x188>
			 *  \return Total number of bytes in the currently selected Pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
    1864:	80 91 f6 00 	lds	r24, 0x00F6
    1868:	90 91 f7 00 	lds	r25, 0x00F7
    186c:	82 17       	cp	r24, r18
    186e:	93 07       	cpc	r25, r19
    1870:	90 f3       	brcs	.-28     	; 0x1856 <USB_Host_SendControlRequest+0x16c>
			 *  \ingroup Group_PipePacketManagement
			 */
			static inline void Pipe_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearOUT(void)
			{
				UPINTX &= ~((1 << TXOUTI) | (1 << FIFOCON));
    1872:	80 91 a6 00 	lds	r24, 0x00A6
    1876:	8b 77       	andi	r24, 0x7B	; 123
    1878:	80 93 a6 00 	sts	0x00A6, r24
		if (DataStream != NULL)
		{
			Pipe_SetPipeToken(PIPE_TOKEN_OUT);
			Pipe_Unfreeze();

			while (DataLen)
    187c:	20 97       	sbiw	r28, 0x00	; 0
    187e:	09 f7       	brne	.-62     	; 0x1842 <USB_Host_SendControlRequest+0x158>
				}

				Pipe_ClearOUT();
			}

			if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    1880:	82 e0       	ldi	r24, 0x02	; 2
    1882:	0a df       	rcall	.-492    	; 0x1698 <USB_Host_WaitForIOS>
    1884:	98 2f       	mov	r25, r24
    1886:	88 23       	and	r24, r24
    1888:	d1 f4       	brne	.+52     	; 0x18be <USB_Host_SendControlRequest+0x1d4>

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    188a:	80 91 a9 00 	lds	r24, 0x00A9
    188e:	80 64       	ori	r24, 0x40	; 64
    1890:	80 93 a9 00 	sts	0x00A9, r24
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    1894:	80 91 aa 00 	lds	r24, 0x00AA
    1898:	8f 7c       	andi	r24, 0xCF	; 207
    189a:	80 61       	ori	r24, 0x10	; 16
    189c:	80 93 aa 00 	sts	0x00AA, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    18a0:	80 91 a9 00 	lds	r24, 0x00A9
    18a4:	8f 7b       	andi	r24, 0xBF	; 191
    18a6:	80 93 a9 00 	sts	0x00A9, r24
		}

		Pipe_SetPipeToken(PIPE_TOKEN_IN);
		Pipe_Unfreeze();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_InReceived)) != HOST_SENDCONTROL_Successful)
    18aa:	81 e0       	ldi	r24, 0x01	; 1
    18ac:	f5 de       	rcall	.-534    	; 0x1698 <USB_Host_WaitForIOS>
    18ae:	98 2f       	mov	r25, r24
    18b0:	88 23       	and	r24, r24
    18b2:	29 f4       	brne	.+10     	; 0x18be <USB_Host_SendControlRequest+0x1d4>
			 *  \ingroup Group_PipePacketManagement
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
    18b4:	80 91 a6 00 	lds	r24, 0x00A6
    18b8:	8e 77       	andi	r24, 0x7E	; 126
    18ba:	80 93 a6 00 	sts	0x00A6, r24

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    18be:	80 91 a9 00 	lds	r24, 0x00A9
    18c2:	80 64       	ori	r24, 0x40	; 64
    18c4:	80 93 a9 00 	sts	0x00A9, r24
	}

End_Of_Control_Send:
	Pipe_Freeze();

	if (BusSuspended)
    18c8:	f0 fc       	sbrc	r15, 0
    18ca:	05 c0       	rjmp	.+10     	; 0x18d6 <USB_Host_SendControlRequest+0x1ec>
			 *  messages to the device.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				UHCON &= ~(1 << SOFEN);
    18cc:	80 91 9e 00 	lds	r24, 0x009E
    18d0:	8e 7f       	andi	r24, 0xFE	; 254
    18d2:	80 93 9e 00 	sts	0x009E, r24
			 *  \param[in] PipeNumber  Index of the pipe to reset.
			 */
			static inline void Pipe_ResetPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ResetPipe(const uint8_t PipeNumber)
			{
				UPRST = (1 << PipeNumber);
    18d6:	81 e0       	ldi	r24, 0x01	; 1
    18d8:	80 93 a8 00 	sts	0x00A8, r24
				UPRST = 0;
    18dc:	10 92 a8 00 	sts	0x00A8, r1
	  USB_Host_SuspendBus();

	Pipe_ResetPipe(PIPE_CONTROLPIPE);

	return ReturnStatus;
}
    18e0:	89 2f       	mov	r24, r25
    18e2:	df 91       	pop	r29
    18e4:	cf 91       	pop	r28
    18e6:	1f 91       	pop	r17
    18e8:	0f 91       	pop	r16
    18ea:	ff 90       	pop	r15
    18ec:	08 95       	ret

000018ee <Pipe_Read_Stream_LE>:
uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE Buffer,
                            uint16_t Length
                            __CALLBACK_PARAM)
{
    18ee:	ff 92       	push	r15
    18f0:	0f 93       	push	r16
    18f2:	1f 93       	push	r17
    18f4:	cf 93       	push	r28
    18f6:	df 93       	push	r29
    18f8:	18 2f       	mov	r17, r24
    18fa:	09 2f       	mov	r16, r25
    18fc:	eb 01       	movw	r28, r22
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    18fe:	80 91 aa 00 	lds	r24, 0x00AA
    1902:	8f 7c       	andi	r24, 0xCF	; 207
    1904:	80 61       	ori	r24, 0x10	; 16
    1906:	80 93 aa 00 	sts	0x00AA, r24
	uint8_t* DataStream = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	uint8_t  ErrorCode;

	Pipe_SetPipeToken(TEMPLATE_TOKEN);

	if ((ErrorCode = Pipe_WaitUntilReady()))
    190a:	e9 dc       	rcall	.-1582   	; 0x12de <Pipe_WaitUntilReady>
    190c:	f8 2e       	mov	r15, r24
    190e:	88 23       	and	r24, r24
    1910:	d1 f4       	brne	.+52     	; 0x1946 <Pipe_Read_Stream_LE+0x58>
uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE Buffer,
                            uint16_t Length
                            __CALLBACK_PARAM)
{
	uint8_t* DataStream = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
    1912:	81 2f       	mov	r24, r17
    1914:	90 2f       	mov	r25, r16
    1916:	9c 01       	movw	r18, r24
    1918:	89 01       	movw	r16, r18
    191a:	13 c0       	rjmp	.+38     	; 0x1942 <Pipe_Read_Stream_LE+0x54>
			 *  \return Boolean true if the currently selected pipe may be read from or written to, depending on its direction.
			 */
			static inline bool Pipe_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsReadWriteAllowed(void)
			{
				return ((UPINTX & (1 << RWAL)) ? true : false);
    191c:	80 91 a6 00 	lds	r24, 0x00A6
	}
	#endif

	while (Length)
	{
		if (!(Pipe_IsReadWriteAllowed()))
    1920:	85 fd       	sbrc	r24, 5
    1922:	09 c0       	rjmp	.+18     	; 0x1936 <Pipe_Read_Stream_LE+0x48>
			 *  \ingroup Group_PipePacketManagement
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
    1924:	80 91 a6 00 	lds	r24, 0x00A6
    1928:	8e 77       	andi	r24, 0x7E	; 126
    192a:	80 93 a6 00 	sts	0x00A6, r24
			#if !defined(NO_STREAM_CALLBACKS)
			if ((Callback != NULL) && (Callback() == STREAMCALLBACK_Abort))
			  return PIPE_RWSTREAM_CallbackAborted;
			#endif

			if ((ErrorCode = Pipe_WaitUntilReady()))
    192e:	d7 dc       	rcall	.-1618   	; 0x12de <Pipe_WaitUntilReady>
    1930:	88 23       	and	r24, r24
    1932:	39 f0       	breq	.+14     	; 0x1942 <Pipe_Read_Stream_LE+0x54>
    1934:	09 c0       	rjmp	.+18     	; 0x1948 <Pipe_Read_Stream_LE+0x5a>
			 *  \return Next byte in the currently selected pipe's FIFO buffer.
			 */
			static inline uint8_t Pipe_Read_Byte(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_Read_Byte(void)
			{
				return UPDATX;
    1936:	80 91 af 00 	lds	r24, 0x00AF
			  return ErrorCode;
		}
		else
		{
			TEMPLATE_TRANSFER_BYTE(DataStream);
    193a:	f8 01       	movw	r30, r16
    193c:	81 93       	st	Z+, r24
    193e:	8f 01       	movw	r16, r30
			Length--;
    1940:	21 97       	sbiw	r28, 0x01	; 1
				} while (Length >= 8);
		}
	}
	#endif

	while (Length)
    1942:	20 97       	sbiw	r28, 0x00	; 0
    1944:	59 f7       	brne	.-42     	; 0x191c <Pipe_Read_Stream_LE+0x2e>
    1946:	8f 2d       	mov	r24, r15
			Length--;
		}
	}

	return PIPE_RWSTREAM_NoError;
}
    1948:	df 91       	pop	r29
    194a:	cf 91       	pop	r28
    194c:	1f 91       	pop	r17
    194e:	0f 91       	pop	r16
    1950:	ff 90       	pop	r15
    1952:	08 95       	ret

00001954 <Pipe_Discard_Stream>:

#include "PipeStream.h"

uint8_t Pipe_Discard_Stream(uint16_t Length
                            __CALLBACK_PARAM)
{
    1954:	1f 93       	push	r17
    1956:	cf 93       	push	r28
    1958:	df 93       	push	r29
    195a:	ec 01       	movw	r28, r24
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    195c:	80 91 aa 00 	lds	r24, 0x00AA
    1960:	8f 7c       	andi	r24, 0xCF	; 207
    1962:	80 61       	ori	r24, 0x10	; 16
    1964:	80 93 aa 00 	sts	0x00AA, r24
	uint8_t  ErrorCode;
	
	Pipe_SetPipeToken(PIPE_TOKEN_IN);

	if ((ErrorCode = Pipe_WaitUntilReady()))
    1968:	ba dc       	rcall	.-1676   	; 0x12de <Pipe_WaitUntilReady>
    196a:	18 2f       	mov	r17, r24
    196c:	88 23       	and	r24, r24
    196e:	89 f0       	breq	.+34     	; 0x1992 <Pipe_Discard_Stream+0x3e>
    1970:	12 c0       	rjmp	.+36     	; 0x1996 <Pipe_Discard_Stream+0x42>
			 *  \return Boolean true if the currently selected pipe may be read from or written to, depending on its direction.
			 */
			static inline bool Pipe_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsReadWriteAllowed(void)
			{
				return ((UPINTX & (1 << RWAL)) ? true : false);
    1972:	80 91 a6 00 	lds	r24, 0x00A6
	}
	#endif

	while (Length)
	{
		if (!(Pipe_IsReadWriteAllowed()))
    1976:	85 fd       	sbrc	r24, 5
    1978:	09 c0       	rjmp	.+18     	; 0x198c <Pipe_Discard_Stream+0x38>
			 *  \ingroup Group_PipePacketManagement
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
    197a:	80 91 a6 00 	lds	r24, 0x00A6
    197e:	8e 77       	andi	r24, 0x7E	; 126
    1980:	80 93 a6 00 	sts	0x00A6, r24
			#if !defined(NO_STREAM_CALLBACKS)
			if ((Callback != NULL) && (Callback() == STREAMCALLBACK_Abort))
			  return PIPE_RWSTREAM_CallbackAborted;
			#endif

			if ((ErrorCode = Pipe_WaitUntilReady()))
    1984:	ac dc       	rcall	.-1704   	; 0x12de <Pipe_WaitUntilReady>
    1986:	88 23       	and	r24, r24
    1988:	21 f0       	breq	.+8      	; 0x1992 <Pipe_Discard_Stream+0x3e>
    198a:	06 c0       	rjmp	.+12     	; 0x1998 <Pipe_Discard_Stream+0x44>
			static inline void Pipe_Discard_Byte(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Discard_Byte(void)
			{
				uint8_t Dummy;

				Dummy = UPDATX;
    198c:	80 91 af 00 	lds	r24, 0x00AF
			  return ErrorCode;
		}
		else
		{
			Pipe_Discard_Byte();
			Length--;
    1990:	21 97       	sbiw	r28, 0x01	; 1
				} while (Length >= 8);	
		}
	}
	#endif

	while (Length)
    1992:	20 97       	sbiw	r28, 0x00	; 0
    1994:	71 f7       	brne	.-36     	; 0x1972 <Pipe_Discard_Stream+0x1e>
    1996:	81 2f       	mov	r24, r17
			Length--;
		}
	}

	return PIPE_RWSTREAM_NoError;
}
    1998:	df 91       	pop	r29
    199a:	cf 91       	pop	r28
    199c:	1f 91       	pop	r17
    199e:	08 95       	ret

000019a0 <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
    19a0:	ff 92       	push	r15
    19a2:	0f 93       	push	r16
    19a4:	1f 93       	push	r17
			 *  \return Index of the currently selected pipe.
			 */
			static inline uint8_t Pipe_GetCurrentPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetCurrentPipe(void)
			{
				return (UPNUM & PIPE_PIPENUM_MASK);
    19a6:	07 ea       	ldi	r16, 0xA7	; 167
    19a8:	10 e0       	ldi	r17, 0x00	; 0
    19aa:	f8 01       	movw	r30, r16
    19ac:	f0 80       	ld	r15, Z
    19ae:	f7 e0       	ldi	r31, 0x07	; 7
    19b0:	ff 22       	and	r15, r31
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
    19b2:	f8 01       	movw	r30, r16
    19b4:	10 82       	st	Z, r1
{
	uint8_t PrevPipe = Pipe_GetCurrentPipe();

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	USB_Host_ProcessNextHostState();
    19b6:	1b db       	rcall	.-2506   	; 0xfee <USB_Host_ProcessNextHostState>
    19b8:	f8 01       	movw	r30, r16
    19ba:	f0 82       	st	Z, r15
		if (USB_CurrentMode == USB_MODE_Device)
		  USB_DeviceTask();
		else if (USB_CurrentMode == USB_MODE_Host)
		  USB_HostTask();
	#endif
}
    19bc:	1f 91       	pop	r17
    19be:	0f 91       	pop	r16
    19c0:	ff 90       	pop	r15
    19c2:	08 95       	ret

000019c4 <SerialStream_TxByte>:

FILE USARTStream = FDEV_SETUP_STREAM(SerialStream_TxByte, SerialStream_RxByte, _FDEV_SETUP_RW);

static int SerialStream_TxByte(char DataByte,
                               FILE *Stream)
{
    19c4:	98 2f       	mov	r25, r24
			 *  \param[in] DataByte  Byte to transmit through the USART.
			 */
			static inline void Serial_TxByte(const char DataByte) ATTR_ALWAYS_INLINE;
			static inline void Serial_TxByte(const char DataByte)
			{
				while (!(UCSR1A & (1 << UDRE1)));
    19c6:	80 91 c8 00 	lds	r24, 0x00C8
    19ca:	85 ff       	sbrs	r24, 5
    19cc:	fc cf       	rjmp	.-8      	; 0x19c6 <SerialStream_TxByte+0x2>
				UDR1 = DataByte;
    19ce:	90 93 ce 00 	sts	0x00CE, r25
	(void)Stream;

	Serial_TxByte(DataByte);
	return 0;
}
    19d2:	80 e0       	ldi	r24, 0x00	; 0
    19d4:	90 e0       	ldi	r25, 0x00	; 0
    19d6:	08 95       	ret

000019d8 <SerialStream_RxByte>:
			 *  \return Boolean true if a character has been received, false otherwise.
			 */
			static inline bool Serial_IsCharReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Serial_IsCharReceived(void)
			{
				return ((UCSR1A & (1 << RXC1)) ? true : false);
    19d8:	80 91 c8 00 	lds	r24, 0x00C8

static int SerialStream_RxByte(FILE *Stream)
{
	(void)Stream;

	if (!(Serial_IsCharReceived()))
    19dc:	87 fd       	sbrc	r24, 7
    19de:	03 c0       	rjmp	.+6      	; 0x19e6 <SerialStream_RxByte+0xe>
    19e0:	2e ef       	ldi	r18, 0xFE	; 254
    19e2:	3f ef       	ldi	r19, 0xFF	; 255
    19e4:	08 c0       	rjmp	.+16     	; 0x19f6 <SerialStream_RxByte+0x1e>
			 *  \return Byte received from the USART.
			 */
			static inline char Serial_RxByte(void) ATTR_ALWAYS_INLINE;
			static inline char Serial_RxByte(void)
			{
				while (!(UCSR1A & (1 << RXC1)));
    19e6:	80 91 c8 00 	lds	r24, 0x00C8
    19ea:	87 ff       	sbrs	r24, 7
    19ec:	fc cf       	rjmp	.-8      	; 0x19e6 <SerialStream_RxByte+0xe>
				return UDR1;
    19ee:	80 91 ce 00 	lds	r24, 0x00CE
	  return _FDEV_EOF;

	return Serial_RxByte();
    19f2:	28 2f       	mov	r18, r24
    19f4:	30 e0       	ldi	r19, 0x00	; 0
}
    19f6:	c9 01       	movw	r24, r18
    19f8:	08 95       	ret

000019fa <memcpy>:
    19fa:	fb 01       	movw	r30, r22
    19fc:	dc 01       	movw	r26, r24
    19fe:	02 c0       	rjmp	.+4      	; 0x1a04 <memcpy+0xa>
    1a00:	01 90       	ld	r0, Z+
    1a02:	0d 92       	st	X+, r0
    1a04:	41 50       	subi	r20, 0x01	; 1
    1a06:	50 40       	sbci	r21, 0x00	; 0
    1a08:	d8 f7       	brcc	.-10     	; 0x1a00 <memcpy+0x6>
    1a0a:	08 95       	ret

00001a0c <printf>:
    1a0c:	df 93       	push	r29
    1a0e:	cf 93       	push	r28
    1a10:	cd b7       	in	r28, 0x3d	; 61
    1a12:	de b7       	in	r29, 0x3e	; 62
    1a14:	fe 01       	movw	r30, r28
    1a16:	35 96       	adiw	r30, 0x05	; 5
    1a18:	61 91       	ld	r22, Z+
    1a1a:	71 91       	ld	r23, Z+
    1a1c:	80 91 47 01 	lds	r24, 0x0147
    1a20:	90 91 48 01 	lds	r25, 0x0148
    1a24:	af 01       	movw	r20, r30
    1a26:	8f d0       	rcall	.+286    	; 0x1b46 <vfprintf>
    1a28:	cf 91       	pop	r28
    1a2a:	df 91       	pop	r29
    1a2c:	08 95       	ret

00001a2e <printf_P>:
    1a2e:	df 93       	push	r29
    1a30:	cf 93       	push	r28
    1a32:	cd b7       	in	r28, 0x3d	; 61
    1a34:	de b7       	in	r29, 0x3e	; 62
    1a36:	fe 01       	movw	r30, r28
    1a38:	35 96       	adiw	r30, 0x05	; 5
    1a3a:	61 91       	ld	r22, Z+
    1a3c:	71 91       	ld	r23, Z+
    1a3e:	a0 91 47 01 	lds	r26, 0x0147
    1a42:	b0 91 48 01 	lds	r27, 0x0148
    1a46:	13 96       	adiw	r26, 0x03	; 3
    1a48:	8c 91       	ld	r24, X
    1a4a:	13 97       	sbiw	r26, 0x03	; 3
    1a4c:	88 60       	ori	r24, 0x08	; 8
    1a4e:	13 96       	adiw	r26, 0x03	; 3
    1a50:	8c 93       	st	X, r24
    1a52:	80 91 47 01 	lds	r24, 0x0147
    1a56:	90 91 48 01 	lds	r25, 0x0148
    1a5a:	af 01       	movw	r20, r30
    1a5c:	74 d0       	rcall	.+232    	; 0x1b46 <vfprintf>
    1a5e:	e0 91 47 01 	lds	r30, 0x0147
    1a62:	f0 91 48 01 	lds	r31, 0x0148
    1a66:	23 81       	ldd	r18, Z+3	; 0x03
    1a68:	27 7f       	andi	r18, 0xF7	; 247
    1a6a:	23 83       	std	Z+3, r18	; 0x03
    1a6c:	cf 91       	pop	r28
    1a6e:	df 91       	pop	r29
    1a70:	08 95       	ret

00001a72 <puts>:
    1a72:	0f 93       	push	r16
    1a74:	1f 93       	push	r17
    1a76:	cf 93       	push	r28
    1a78:	df 93       	push	r29
    1a7a:	8c 01       	movw	r16, r24
    1a7c:	e0 91 47 01 	lds	r30, 0x0147
    1a80:	f0 91 48 01 	lds	r31, 0x0148
    1a84:	83 81       	ldd	r24, Z+3	; 0x03
    1a86:	81 ff       	sbrs	r24, 1
    1a88:	21 c0       	rjmp	.+66     	; 0x1acc <puts+0x5a>
    1a8a:	c0 e0       	ldi	r28, 0x00	; 0
    1a8c:	d0 e0       	ldi	r29, 0x00	; 0
    1a8e:	0d c0       	rjmp	.+26     	; 0x1aaa <puts+0x38>
    1a90:	e0 91 47 01 	lds	r30, 0x0147
    1a94:	f0 91 48 01 	lds	r31, 0x0148
    1a98:	20 85       	ldd	r18, Z+8	; 0x08
    1a9a:	31 85       	ldd	r19, Z+9	; 0x09
    1a9c:	bf 01       	movw	r22, r30
    1a9e:	f9 01       	movw	r30, r18
    1aa0:	09 95       	icall
    1aa2:	89 2b       	or	r24, r25
    1aa4:	11 f0       	breq	.+4      	; 0x1aaa <puts+0x38>
    1aa6:	cf ef       	ldi	r28, 0xFF	; 255
    1aa8:	df ef       	ldi	r29, 0xFF	; 255
    1aaa:	f8 01       	movw	r30, r16
    1aac:	81 91       	ld	r24, Z+
    1aae:	8f 01       	movw	r16, r30
    1ab0:	88 23       	and	r24, r24
    1ab2:	71 f7       	brne	.-36     	; 0x1a90 <puts+0x1e>
    1ab4:	e0 91 47 01 	lds	r30, 0x0147
    1ab8:	f0 91 48 01 	lds	r31, 0x0148
    1abc:	20 85       	ldd	r18, Z+8	; 0x08
    1abe:	31 85       	ldd	r19, Z+9	; 0x09
    1ac0:	8a e0       	ldi	r24, 0x0A	; 10
    1ac2:	bf 01       	movw	r22, r30
    1ac4:	f9 01       	movw	r30, r18
    1ac6:	09 95       	icall
    1ac8:	89 2b       	or	r24, r25
    1aca:	11 f0       	breq	.+4      	; 0x1ad0 <puts+0x5e>
    1acc:	cf ef       	ldi	r28, 0xFF	; 255
    1ace:	df ef       	ldi	r29, 0xFF	; 255
    1ad0:	ce 01       	movw	r24, r28
    1ad2:	df 91       	pop	r29
    1ad4:	cf 91       	pop	r28
    1ad6:	1f 91       	pop	r17
    1ad8:	0f 91       	pop	r16
    1ada:	08 95       	ret

00001adc <puts_P>:
    1adc:	0f 93       	push	r16
    1ade:	1f 93       	push	r17
    1ae0:	cf 93       	push	r28
    1ae2:	df 93       	push	r29
    1ae4:	ec 01       	movw	r28, r24
    1ae6:	e0 91 47 01 	lds	r30, 0x0147
    1aea:	f0 91 48 01 	lds	r31, 0x0148
    1aee:	83 81       	ldd	r24, Z+3	; 0x03
    1af0:	81 ff       	sbrs	r24, 1
    1af2:	21 c0       	rjmp	.+66     	; 0x1b36 <puts_P+0x5a>
    1af4:	00 e0       	ldi	r16, 0x00	; 0
    1af6:	10 e0       	ldi	r17, 0x00	; 0
    1af8:	0e c0       	rjmp	.+28     	; 0x1b16 <puts_P+0x3a>
    1afa:	e0 91 47 01 	lds	r30, 0x0147
    1afe:	f0 91 48 01 	lds	r31, 0x0148
    1b02:	20 85       	ldd	r18, Z+8	; 0x08
    1b04:	31 85       	ldd	r19, Z+9	; 0x09
    1b06:	bf 01       	movw	r22, r30
    1b08:	f9 01       	movw	r30, r18
    1b0a:	09 95       	icall
    1b0c:	89 2b       	or	r24, r25
    1b0e:	11 f0       	breq	.+4      	; 0x1b14 <puts_P+0x38>
    1b10:	0f ef       	ldi	r16, 0xFF	; 255
    1b12:	1f ef       	ldi	r17, 0xFF	; 255
    1b14:	21 96       	adiw	r28, 0x01	; 1
    1b16:	fe 01       	movw	r30, r28
    1b18:	84 91       	lpm	r24, Z+
    1b1a:	88 23       	and	r24, r24
    1b1c:	71 f7       	brne	.-36     	; 0x1afa <puts_P+0x1e>
    1b1e:	e0 91 47 01 	lds	r30, 0x0147
    1b22:	f0 91 48 01 	lds	r31, 0x0148
    1b26:	20 85       	ldd	r18, Z+8	; 0x08
    1b28:	31 85       	ldd	r19, Z+9	; 0x09
    1b2a:	8a e0       	ldi	r24, 0x0A	; 10
    1b2c:	bf 01       	movw	r22, r30
    1b2e:	f9 01       	movw	r30, r18
    1b30:	09 95       	icall
    1b32:	89 2b       	or	r24, r25
    1b34:	11 f0       	breq	.+4      	; 0x1b3a <puts_P+0x5e>
    1b36:	0f ef       	ldi	r16, 0xFF	; 255
    1b38:	1f ef       	ldi	r17, 0xFF	; 255
    1b3a:	c8 01       	movw	r24, r16
    1b3c:	df 91       	pop	r29
    1b3e:	cf 91       	pop	r28
    1b40:	1f 91       	pop	r17
    1b42:	0f 91       	pop	r16
    1b44:	08 95       	ret

00001b46 <vfprintf>:
    1b46:	2f 92       	push	r2
    1b48:	3f 92       	push	r3
    1b4a:	4f 92       	push	r4
    1b4c:	5f 92       	push	r5
    1b4e:	6f 92       	push	r6
    1b50:	7f 92       	push	r7
    1b52:	8f 92       	push	r8
    1b54:	9f 92       	push	r9
    1b56:	af 92       	push	r10
    1b58:	bf 92       	push	r11
    1b5a:	cf 92       	push	r12
    1b5c:	df 92       	push	r13
    1b5e:	ef 92       	push	r14
    1b60:	ff 92       	push	r15
    1b62:	0f 93       	push	r16
    1b64:	1f 93       	push	r17
    1b66:	df 93       	push	r29
    1b68:	cf 93       	push	r28
    1b6a:	cd b7       	in	r28, 0x3d	; 61
    1b6c:	de b7       	in	r29, 0x3e	; 62
    1b6e:	2b 97       	sbiw	r28, 0x0b	; 11
    1b70:	0f b6       	in	r0, 0x3f	; 63
    1b72:	f8 94       	cli
    1b74:	de bf       	out	0x3e, r29	; 62
    1b76:	0f be       	out	0x3f, r0	; 63
    1b78:	cd bf       	out	0x3d, r28	; 61
    1b7a:	3c 01       	movw	r6, r24
    1b7c:	2b 01       	movw	r4, r22
    1b7e:	5a 01       	movw	r10, r20
    1b80:	fc 01       	movw	r30, r24
    1b82:	17 82       	std	Z+7, r1	; 0x07
    1b84:	16 82       	std	Z+6, r1	; 0x06
    1b86:	83 81       	ldd	r24, Z+3	; 0x03
    1b88:	81 fd       	sbrc	r24, 1
    1b8a:	03 c0       	rjmp	.+6      	; 0x1b92 <vfprintf+0x4c>
    1b8c:	6f ef       	ldi	r22, 0xFF	; 255
    1b8e:	7f ef       	ldi	r23, 0xFF	; 255
    1b90:	b9 c1       	rjmp	.+882    	; 0x1f04 <vfprintf+0x3be>
    1b92:	9a e0       	ldi	r25, 0x0A	; 10
    1b94:	89 2e       	mov	r8, r25
    1b96:	1e 01       	movw	r2, r28
    1b98:	08 94       	sec
    1b9a:	21 1c       	adc	r2, r1
    1b9c:	31 1c       	adc	r3, r1
    1b9e:	f3 01       	movw	r30, r6
    1ba0:	23 81       	ldd	r18, Z+3	; 0x03
    1ba2:	f2 01       	movw	r30, r4
    1ba4:	23 fd       	sbrc	r18, 3
    1ba6:	85 91       	lpm	r24, Z+
    1ba8:	23 ff       	sbrs	r18, 3
    1baa:	81 91       	ld	r24, Z+
    1bac:	2f 01       	movw	r4, r30
    1bae:	88 23       	and	r24, r24
    1bb0:	09 f4       	brne	.+2      	; 0x1bb4 <vfprintf+0x6e>
    1bb2:	a5 c1       	rjmp	.+842    	; 0x1efe <vfprintf+0x3b8>
    1bb4:	85 32       	cpi	r24, 0x25	; 37
    1bb6:	39 f4       	brne	.+14     	; 0x1bc6 <vfprintf+0x80>
    1bb8:	23 fd       	sbrc	r18, 3
    1bba:	85 91       	lpm	r24, Z+
    1bbc:	23 ff       	sbrs	r18, 3
    1bbe:	81 91       	ld	r24, Z+
    1bc0:	2f 01       	movw	r4, r30
    1bc2:	85 32       	cpi	r24, 0x25	; 37
    1bc4:	21 f4       	brne	.+8      	; 0x1bce <vfprintf+0x88>
    1bc6:	90 e0       	ldi	r25, 0x00	; 0
    1bc8:	b3 01       	movw	r22, r6
    1bca:	cc d1       	rcall	.+920    	; 0x1f64 <fputc>
    1bcc:	e8 cf       	rjmp	.-48     	; 0x1b9e <vfprintf+0x58>
    1bce:	98 2f       	mov	r25, r24
    1bd0:	ff 24       	eor	r15, r15
    1bd2:	ee 24       	eor	r14, r14
    1bd4:	99 24       	eor	r9, r9
    1bd6:	ff e1       	ldi	r31, 0x1F	; 31
    1bd8:	ff 15       	cp	r31, r15
    1bda:	d0 f0       	brcs	.+52     	; 0x1c10 <vfprintf+0xca>
    1bdc:	9b 32       	cpi	r25, 0x2B	; 43
    1bde:	69 f0       	breq	.+26     	; 0x1bfa <vfprintf+0xb4>
    1be0:	9c 32       	cpi	r25, 0x2C	; 44
    1be2:	28 f4       	brcc	.+10     	; 0x1bee <vfprintf+0xa8>
    1be4:	90 32       	cpi	r25, 0x20	; 32
    1be6:	59 f0       	breq	.+22     	; 0x1bfe <vfprintf+0xb8>
    1be8:	93 32       	cpi	r25, 0x23	; 35
    1bea:	91 f4       	brne	.+36     	; 0x1c10 <vfprintf+0xca>
    1bec:	0e c0       	rjmp	.+28     	; 0x1c0a <vfprintf+0xc4>
    1bee:	9d 32       	cpi	r25, 0x2D	; 45
    1bf0:	49 f0       	breq	.+18     	; 0x1c04 <vfprintf+0xbe>
    1bf2:	90 33       	cpi	r25, 0x30	; 48
    1bf4:	69 f4       	brne	.+26     	; 0x1c10 <vfprintf+0xca>
    1bf6:	41 e0       	ldi	r20, 0x01	; 1
    1bf8:	24 c0       	rjmp	.+72     	; 0x1c42 <vfprintf+0xfc>
    1bfa:	52 e0       	ldi	r21, 0x02	; 2
    1bfc:	f5 2a       	or	r15, r21
    1bfe:	84 e0       	ldi	r24, 0x04	; 4
    1c00:	f8 2a       	or	r15, r24
    1c02:	28 c0       	rjmp	.+80     	; 0x1c54 <vfprintf+0x10e>
    1c04:	98 e0       	ldi	r25, 0x08	; 8
    1c06:	f9 2a       	or	r15, r25
    1c08:	25 c0       	rjmp	.+74     	; 0x1c54 <vfprintf+0x10e>
    1c0a:	e0 e1       	ldi	r30, 0x10	; 16
    1c0c:	fe 2a       	or	r15, r30
    1c0e:	22 c0       	rjmp	.+68     	; 0x1c54 <vfprintf+0x10e>
    1c10:	f7 fc       	sbrc	r15, 7
    1c12:	29 c0       	rjmp	.+82     	; 0x1c66 <vfprintf+0x120>
    1c14:	89 2f       	mov	r24, r25
    1c16:	80 53       	subi	r24, 0x30	; 48
    1c18:	8a 30       	cpi	r24, 0x0A	; 10
    1c1a:	70 f4       	brcc	.+28     	; 0x1c38 <vfprintf+0xf2>
    1c1c:	f6 fe       	sbrs	r15, 6
    1c1e:	05 c0       	rjmp	.+10     	; 0x1c2a <vfprintf+0xe4>
    1c20:	98 9c       	mul	r9, r8
    1c22:	90 2c       	mov	r9, r0
    1c24:	11 24       	eor	r1, r1
    1c26:	98 0e       	add	r9, r24
    1c28:	15 c0       	rjmp	.+42     	; 0x1c54 <vfprintf+0x10e>
    1c2a:	e8 9c       	mul	r14, r8
    1c2c:	e0 2c       	mov	r14, r0
    1c2e:	11 24       	eor	r1, r1
    1c30:	e8 0e       	add	r14, r24
    1c32:	f0 e2       	ldi	r31, 0x20	; 32
    1c34:	ff 2a       	or	r15, r31
    1c36:	0e c0       	rjmp	.+28     	; 0x1c54 <vfprintf+0x10e>
    1c38:	9e 32       	cpi	r25, 0x2E	; 46
    1c3a:	29 f4       	brne	.+10     	; 0x1c46 <vfprintf+0x100>
    1c3c:	f6 fc       	sbrc	r15, 6
    1c3e:	5f c1       	rjmp	.+702    	; 0x1efe <vfprintf+0x3b8>
    1c40:	40 e4       	ldi	r20, 0x40	; 64
    1c42:	f4 2a       	or	r15, r20
    1c44:	07 c0       	rjmp	.+14     	; 0x1c54 <vfprintf+0x10e>
    1c46:	9c 36       	cpi	r25, 0x6C	; 108
    1c48:	19 f4       	brne	.+6      	; 0x1c50 <vfprintf+0x10a>
    1c4a:	50 e8       	ldi	r21, 0x80	; 128
    1c4c:	f5 2a       	or	r15, r21
    1c4e:	02 c0       	rjmp	.+4      	; 0x1c54 <vfprintf+0x10e>
    1c50:	98 36       	cpi	r25, 0x68	; 104
    1c52:	49 f4       	brne	.+18     	; 0x1c66 <vfprintf+0x120>
    1c54:	f2 01       	movw	r30, r4
    1c56:	23 fd       	sbrc	r18, 3
    1c58:	95 91       	lpm	r25, Z+
    1c5a:	23 ff       	sbrs	r18, 3
    1c5c:	91 91       	ld	r25, Z+
    1c5e:	2f 01       	movw	r4, r30
    1c60:	99 23       	and	r25, r25
    1c62:	09 f0       	breq	.+2      	; 0x1c66 <vfprintf+0x120>
    1c64:	b8 cf       	rjmp	.-144    	; 0x1bd6 <vfprintf+0x90>
    1c66:	89 2f       	mov	r24, r25
    1c68:	85 54       	subi	r24, 0x45	; 69
    1c6a:	83 30       	cpi	r24, 0x03	; 3
    1c6c:	18 f0       	brcs	.+6      	; 0x1c74 <vfprintf+0x12e>
    1c6e:	80 52       	subi	r24, 0x20	; 32
    1c70:	83 30       	cpi	r24, 0x03	; 3
    1c72:	38 f4       	brcc	.+14     	; 0x1c82 <vfprintf+0x13c>
    1c74:	44 e0       	ldi	r20, 0x04	; 4
    1c76:	50 e0       	ldi	r21, 0x00	; 0
    1c78:	a4 0e       	add	r10, r20
    1c7a:	b5 1e       	adc	r11, r21
    1c7c:	5f e3       	ldi	r21, 0x3F	; 63
    1c7e:	59 83       	std	Y+1, r21	; 0x01
    1c80:	0f c0       	rjmp	.+30     	; 0x1ca0 <vfprintf+0x15a>
    1c82:	93 36       	cpi	r25, 0x63	; 99
    1c84:	31 f0       	breq	.+12     	; 0x1c92 <vfprintf+0x14c>
    1c86:	93 37       	cpi	r25, 0x73	; 115
    1c88:	79 f0       	breq	.+30     	; 0x1ca8 <vfprintf+0x162>
    1c8a:	93 35       	cpi	r25, 0x53	; 83
    1c8c:	09 f0       	breq	.+2      	; 0x1c90 <vfprintf+0x14a>
    1c8e:	52 c0       	rjmp	.+164    	; 0x1d34 <vfprintf+0x1ee>
    1c90:	1f c0       	rjmp	.+62     	; 0x1cd0 <vfprintf+0x18a>
    1c92:	f5 01       	movw	r30, r10
    1c94:	80 81       	ld	r24, Z
    1c96:	89 83       	std	Y+1, r24	; 0x01
    1c98:	42 e0       	ldi	r20, 0x02	; 2
    1c9a:	50 e0       	ldi	r21, 0x00	; 0
    1c9c:	a4 0e       	add	r10, r20
    1c9e:	b5 1e       	adc	r11, r21
    1ca0:	61 01       	movw	r12, r2
    1ca2:	01 e0       	ldi	r16, 0x01	; 1
    1ca4:	10 e0       	ldi	r17, 0x00	; 0
    1ca6:	11 c0       	rjmp	.+34     	; 0x1cca <vfprintf+0x184>
    1ca8:	f5 01       	movw	r30, r10
    1caa:	c0 80       	ld	r12, Z
    1cac:	d1 80       	ldd	r13, Z+1	; 0x01
    1cae:	f6 fc       	sbrc	r15, 6
    1cb0:	03 c0       	rjmp	.+6      	; 0x1cb8 <vfprintf+0x172>
    1cb2:	6f ef       	ldi	r22, 0xFF	; 255
    1cb4:	7f ef       	ldi	r23, 0xFF	; 255
    1cb6:	02 c0       	rjmp	.+4      	; 0x1cbc <vfprintf+0x176>
    1cb8:	69 2d       	mov	r22, r9
    1cba:	70 e0       	ldi	r23, 0x00	; 0
    1cbc:	42 e0       	ldi	r20, 0x02	; 2
    1cbe:	50 e0       	ldi	r21, 0x00	; 0
    1cc0:	a4 0e       	add	r10, r20
    1cc2:	b5 1e       	adc	r11, r21
    1cc4:	c6 01       	movw	r24, r12
    1cc6:	43 d1       	rcall	.+646    	; 0x1f4e <strnlen>
    1cc8:	8c 01       	movw	r16, r24
    1cca:	5f e7       	ldi	r21, 0x7F	; 127
    1ccc:	f5 22       	and	r15, r21
    1cce:	13 c0       	rjmp	.+38     	; 0x1cf6 <vfprintf+0x1b0>
    1cd0:	f5 01       	movw	r30, r10
    1cd2:	c0 80       	ld	r12, Z
    1cd4:	d1 80       	ldd	r13, Z+1	; 0x01
    1cd6:	f6 fc       	sbrc	r15, 6
    1cd8:	03 c0       	rjmp	.+6      	; 0x1ce0 <vfprintf+0x19a>
    1cda:	6f ef       	ldi	r22, 0xFF	; 255
    1cdc:	7f ef       	ldi	r23, 0xFF	; 255
    1cde:	02 c0       	rjmp	.+4      	; 0x1ce4 <vfprintf+0x19e>
    1ce0:	69 2d       	mov	r22, r9
    1ce2:	70 e0       	ldi	r23, 0x00	; 0
    1ce4:	42 e0       	ldi	r20, 0x02	; 2
    1ce6:	50 e0       	ldi	r21, 0x00	; 0
    1ce8:	a4 0e       	add	r10, r20
    1cea:	b5 1e       	adc	r11, r21
    1cec:	c6 01       	movw	r24, r12
    1cee:	24 d1       	rcall	.+584    	; 0x1f38 <strnlen_P>
    1cf0:	8c 01       	movw	r16, r24
    1cf2:	50 e8       	ldi	r21, 0x80	; 128
    1cf4:	f5 2a       	or	r15, r21
    1cf6:	f3 fe       	sbrs	r15, 3
    1cf8:	06 c0       	rjmp	.+12     	; 0x1d06 <vfprintf+0x1c0>
    1cfa:	18 c0       	rjmp	.+48     	; 0x1d2c <vfprintf+0x1e6>
    1cfc:	80 e2       	ldi	r24, 0x20	; 32
    1cfe:	90 e0       	ldi	r25, 0x00	; 0
    1d00:	b3 01       	movw	r22, r6
    1d02:	30 d1       	rcall	.+608    	; 0x1f64 <fputc>
    1d04:	ea 94       	dec	r14
    1d06:	8e 2d       	mov	r24, r14
    1d08:	90 e0       	ldi	r25, 0x00	; 0
    1d0a:	08 17       	cp	r16, r24
    1d0c:	19 07       	cpc	r17, r25
    1d0e:	b0 f3       	brcs	.-20     	; 0x1cfc <vfprintf+0x1b6>
    1d10:	0d c0       	rjmp	.+26     	; 0x1d2c <vfprintf+0x1e6>
    1d12:	f6 01       	movw	r30, r12
    1d14:	f7 fc       	sbrc	r15, 7
    1d16:	85 91       	lpm	r24, Z+
    1d18:	f7 fe       	sbrs	r15, 7
    1d1a:	81 91       	ld	r24, Z+
    1d1c:	6f 01       	movw	r12, r30
    1d1e:	90 e0       	ldi	r25, 0x00	; 0
    1d20:	b3 01       	movw	r22, r6
    1d22:	20 d1       	rcall	.+576    	; 0x1f64 <fputc>
    1d24:	e1 10       	cpse	r14, r1
    1d26:	ea 94       	dec	r14
    1d28:	01 50       	subi	r16, 0x01	; 1
    1d2a:	10 40       	sbci	r17, 0x00	; 0
    1d2c:	01 15       	cp	r16, r1
    1d2e:	11 05       	cpc	r17, r1
    1d30:	81 f7       	brne	.-32     	; 0x1d12 <vfprintf+0x1cc>
    1d32:	e2 c0       	rjmp	.+452    	; 0x1ef8 <vfprintf+0x3b2>
    1d34:	94 36       	cpi	r25, 0x64	; 100
    1d36:	11 f0       	breq	.+4      	; 0x1d3c <vfprintf+0x1f6>
    1d38:	99 36       	cpi	r25, 0x69	; 105
    1d3a:	61 f5       	brne	.+88     	; 0x1d94 <vfprintf+0x24e>
    1d3c:	f7 fe       	sbrs	r15, 7
    1d3e:	08 c0       	rjmp	.+16     	; 0x1d50 <vfprintf+0x20a>
    1d40:	f5 01       	movw	r30, r10
    1d42:	20 81       	ld	r18, Z
    1d44:	31 81       	ldd	r19, Z+1	; 0x01
    1d46:	42 81       	ldd	r20, Z+2	; 0x02
    1d48:	53 81       	ldd	r21, Z+3	; 0x03
    1d4a:	84 e0       	ldi	r24, 0x04	; 4
    1d4c:	90 e0       	ldi	r25, 0x00	; 0
    1d4e:	0a c0       	rjmp	.+20     	; 0x1d64 <vfprintf+0x21e>
    1d50:	f5 01       	movw	r30, r10
    1d52:	80 81       	ld	r24, Z
    1d54:	91 81       	ldd	r25, Z+1	; 0x01
    1d56:	9c 01       	movw	r18, r24
    1d58:	44 27       	eor	r20, r20
    1d5a:	37 fd       	sbrc	r19, 7
    1d5c:	40 95       	com	r20
    1d5e:	54 2f       	mov	r21, r20
    1d60:	82 e0       	ldi	r24, 0x02	; 2
    1d62:	90 e0       	ldi	r25, 0x00	; 0
    1d64:	a8 0e       	add	r10, r24
    1d66:	b9 1e       	adc	r11, r25
    1d68:	9f e6       	ldi	r25, 0x6F	; 111
    1d6a:	f9 22       	and	r15, r25
    1d6c:	57 ff       	sbrs	r21, 7
    1d6e:	09 c0       	rjmp	.+18     	; 0x1d82 <vfprintf+0x23c>
    1d70:	50 95       	com	r21
    1d72:	40 95       	com	r20
    1d74:	30 95       	com	r19
    1d76:	21 95       	neg	r18
    1d78:	3f 4f       	sbci	r19, 0xFF	; 255
    1d7a:	4f 4f       	sbci	r20, 0xFF	; 255
    1d7c:	5f 4f       	sbci	r21, 0xFF	; 255
    1d7e:	e0 e8       	ldi	r30, 0x80	; 128
    1d80:	fe 2a       	or	r15, r30
    1d82:	ca 01       	movw	r24, r20
    1d84:	b9 01       	movw	r22, r18
    1d86:	a1 01       	movw	r20, r2
    1d88:	2a e0       	ldi	r18, 0x0A	; 10
    1d8a:	30 e0       	ldi	r19, 0x00	; 0
    1d8c:	17 d1       	rcall	.+558    	; 0x1fbc <__ultoa_invert>
    1d8e:	d8 2e       	mov	r13, r24
    1d90:	d2 18       	sub	r13, r2
    1d92:	3f c0       	rjmp	.+126    	; 0x1e12 <vfprintf+0x2cc>
    1d94:	95 37       	cpi	r25, 0x75	; 117
    1d96:	29 f4       	brne	.+10     	; 0x1da2 <vfprintf+0x25c>
    1d98:	1f 2d       	mov	r17, r15
    1d9a:	1f 7e       	andi	r17, 0xEF	; 239
    1d9c:	2a e0       	ldi	r18, 0x0A	; 10
    1d9e:	30 e0       	ldi	r19, 0x00	; 0
    1da0:	1d c0       	rjmp	.+58     	; 0x1ddc <vfprintf+0x296>
    1da2:	1f 2d       	mov	r17, r15
    1da4:	19 7f       	andi	r17, 0xF9	; 249
    1da6:	9f 36       	cpi	r25, 0x6F	; 111
    1da8:	61 f0       	breq	.+24     	; 0x1dc2 <vfprintf+0x27c>
    1daa:	90 37       	cpi	r25, 0x70	; 112
    1dac:	20 f4       	brcc	.+8      	; 0x1db6 <vfprintf+0x270>
    1dae:	98 35       	cpi	r25, 0x58	; 88
    1db0:	09 f0       	breq	.+2      	; 0x1db4 <vfprintf+0x26e>
    1db2:	a5 c0       	rjmp	.+330    	; 0x1efe <vfprintf+0x3b8>
    1db4:	0f c0       	rjmp	.+30     	; 0x1dd4 <vfprintf+0x28e>
    1db6:	90 37       	cpi	r25, 0x70	; 112
    1db8:	39 f0       	breq	.+14     	; 0x1dc8 <vfprintf+0x282>
    1dba:	98 37       	cpi	r25, 0x78	; 120
    1dbc:	09 f0       	breq	.+2      	; 0x1dc0 <vfprintf+0x27a>
    1dbe:	9f c0       	rjmp	.+318    	; 0x1efe <vfprintf+0x3b8>
    1dc0:	04 c0       	rjmp	.+8      	; 0x1dca <vfprintf+0x284>
    1dc2:	28 e0       	ldi	r18, 0x08	; 8
    1dc4:	30 e0       	ldi	r19, 0x00	; 0
    1dc6:	0a c0       	rjmp	.+20     	; 0x1ddc <vfprintf+0x296>
    1dc8:	10 61       	ori	r17, 0x10	; 16
    1dca:	14 fd       	sbrc	r17, 4
    1dcc:	14 60       	ori	r17, 0x04	; 4
    1dce:	20 e1       	ldi	r18, 0x10	; 16
    1dd0:	30 e0       	ldi	r19, 0x00	; 0
    1dd2:	04 c0       	rjmp	.+8      	; 0x1ddc <vfprintf+0x296>
    1dd4:	14 fd       	sbrc	r17, 4
    1dd6:	16 60       	ori	r17, 0x06	; 6
    1dd8:	20 e1       	ldi	r18, 0x10	; 16
    1dda:	32 e0       	ldi	r19, 0x02	; 2
    1ddc:	17 ff       	sbrs	r17, 7
    1dde:	08 c0       	rjmp	.+16     	; 0x1df0 <vfprintf+0x2aa>
    1de0:	f5 01       	movw	r30, r10
    1de2:	60 81       	ld	r22, Z
    1de4:	71 81       	ldd	r23, Z+1	; 0x01
    1de6:	82 81       	ldd	r24, Z+2	; 0x02
    1de8:	93 81       	ldd	r25, Z+3	; 0x03
    1dea:	44 e0       	ldi	r20, 0x04	; 4
    1dec:	50 e0       	ldi	r21, 0x00	; 0
    1dee:	08 c0       	rjmp	.+16     	; 0x1e00 <vfprintf+0x2ba>
    1df0:	f5 01       	movw	r30, r10
    1df2:	80 81       	ld	r24, Z
    1df4:	91 81       	ldd	r25, Z+1	; 0x01
    1df6:	bc 01       	movw	r22, r24
    1df8:	80 e0       	ldi	r24, 0x00	; 0
    1dfa:	90 e0       	ldi	r25, 0x00	; 0
    1dfc:	42 e0       	ldi	r20, 0x02	; 2
    1dfe:	50 e0       	ldi	r21, 0x00	; 0
    1e00:	a4 0e       	add	r10, r20
    1e02:	b5 1e       	adc	r11, r21
    1e04:	a1 01       	movw	r20, r2
    1e06:	da d0       	rcall	.+436    	; 0x1fbc <__ultoa_invert>
    1e08:	d8 2e       	mov	r13, r24
    1e0a:	d2 18       	sub	r13, r2
    1e0c:	8f e7       	ldi	r24, 0x7F	; 127
    1e0e:	f8 2e       	mov	r15, r24
    1e10:	f1 22       	and	r15, r17
    1e12:	f6 fe       	sbrs	r15, 6
    1e14:	0b c0       	rjmp	.+22     	; 0x1e2c <vfprintf+0x2e6>
    1e16:	5e ef       	ldi	r21, 0xFE	; 254
    1e18:	f5 22       	and	r15, r21
    1e1a:	d9 14       	cp	r13, r9
    1e1c:	38 f4       	brcc	.+14     	; 0x1e2c <vfprintf+0x2e6>
    1e1e:	f4 fe       	sbrs	r15, 4
    1e20:	07 c0       	rjmp	.+14     	; 0x1e30 <vfprintf+0x2ea>
    1e22:	f2 fc       	sbrc	r15, 2
    1e24:	05 c0       	rjmp	.+10     	; 0x1e30 <vfprintf+0x2ea>
    1e26:	8f ee       	ldi	r24, 0xEF	; 239
    1e28:	f8 22       	and	r15, r24
    1e2a:	02 c0       	rjmp	.+4      	; 0x1e30 <vfprintf+0x2ea>
    1e2c:	1d 2d       	mov	r17, r13
    1e2e:	01 c0       	rjmp	.+2      	; 0x1e32 <vfprintf+0x2ec>
    1e30:	19 2d       	mov	r17, r9
    1e32:	f4 fe       	sbrs	r15, 4
    1e34:	0d c0       	rjmp	.+26     	; 0x1e50 <vfprintf+0x30a>
    1e36:	fe 01       	movw	r30, r28
    1e38:	ed 0d       	add	r30, r13
    1e3a:	f1 1d       	adc	r31, r1
    1e3c:	80 81       	ld	r24, Z
    1e3e:	80 33       	cpi	r24, 0x30	; 48
    1e40:	19 f4       	brne	.+6      	; 0x1e48 <vfprintf+0x302>
    1e42:	99 ee       	ldi	r25, 0xE9	; 233
    1e44:	f9 22       	and	r15, r25
    1e46:	08 c0       	rjmp	.+16     	; 0x1e58 <vfprintf+0x312>
    1e48:	1f 5f       	subi	r17, 0xFF	; 255
    1e4a:	f2 fe       	sbrs	r15, 2
    1e4c:	05 c0       	rjmp	.+10     	; 0x1e58 <vfprintf+0x312>
    1e4e:	03 c0       	rjmp	.+6      	; 0x1e56 <vfprintf+0x310>
    1e50:	8f 2d       	mov	r24, r15
    1e52:	86 78       	andi	r24, 0x86	; 134
    1e54:	09 f0       	breq	.+2      	; 0x1e58 <vfprintf+0x312>
    1e56:	1f 5f       	subi	r17, 0xFF	; 255
    1e58:	0f 2d       	mov	r16, r15
    1e5a:	f3 fc       	sbrc	r15, 3
    1e5c:	13 c0       	rjmp	.+38     	; 0x1e84 <vfprintf+0x33e>
    1e5e:	f0 fe       	sbrs	r15, 0
    1e60:	0e c0       	rjmp	.+28     	; 0x1e7e <vfprintf+0x338>
    1e62:	1e 15       	cp	r17, r14
    1e64:	10 f0       	brcs	.+4      	; 0x1e6a <vfprintf+0x324>
    1e66:	9d 2c       	mov	r9, r13
    1e68:	0a c0       	rjmp	.+20     	; 0x1e7e <vfprintf+0x338>
    1e6a:	9d 2c       	mov	r9, r13
    1e6c:	9e 0c       	add	r9, r14
    1e6e:	91 1a       	sub	r9, r17
    1e70:	1e 2d       	mov	r17, r14
    1e72:	05 c0       	rjmp	.+10     	; 0x1e7e <vfprintf+0x338>
    1e74:	80 e2       	ldi	r24, 0x20	; 32
    1e76:	90 e0       	ldi	r25, 0x00	; 0
    1e78:	b3 01       	movw	r22, r6
    1e7a:	74 d0       	rcall	.+232    	; 0x1f64 <fputc>
    1e7c:	1f 5f       	subi	r17, 0xFF	; 255
    1e7e:	1e 15       	cp	r17, r14
    1e80:	c8 f3       	brcs	.-14     	; 0x1e74 <vfprintf+0x32e>
    1e82:	04 c0       	rjmp	.+8      	; 0x1e8c <vfprintf+0x346>
    1e84:	1e 15       	cp	r17, r14
    1e86:	10 f4       	brcc	.+4      	; 0x1e8c <vfprintf+0x346>
    1e88:	e1 1a       	sub	r14, r17
    1e8a:	01 c0       	rjmp	.+2      	; 0x1e8e <vfprintf+0x348>
    1e8c:	ee 24       	eor	r14, r14
    1e8e:	04 ff       	sbrs	r16, 4
    1e90:	0e c0       	rjmp	.+28     	; 0x1eae <vfprintf+0x368>
    1e92:	80 e3       	ldi	r24, 0x30	; 48
    1e94:	90 e0       	ldi	r25, 0x00	; 0
    1e96:	b3 01       	movw	r22, r6
    1e98:	65 d0       	rcall	.+202    	; 0x1f64 <fputc>
    1e9a:	02 ff       	sbrs	r16, 2
    1e9c:	1b c0       	rjmp	.+54     	; 0x1ed4 <vfprintf+0x38e>
    1e9e:	01 fd       	sbrc	r16, 1
    1ea0:	03 c0       	rjmp	.+6      	; 0x1ea8 <vfprintf+0x362>
    1ea2:	88 e7       	ldi	r24, 0x78	; 120
    1ea4:	90 e0       	ldi	r25, 0x00	; 0
    1ea6:	0e c0       	rjmp	.+28     	; 0x1ec4 <vfprintf+0x37e>
    1ea8:	88 e5       	ldi	r24, 0x58	; 88
    1eaa:	90 e0       	ldi	r25, 0x00	; 0
    1eac:	0b c0       	rjmp	.+22     	; 0x1ec4 <vfprintf+0x37e>
    1eae:	80 2f       	mov	r24, r16
    1eb0:	86 78       	andi	r24, 0x86	; 134
    1eb2:	81 f0       	breq	.+32     	; 0x1ed4 <vfprintf+0x38e>
    1eb4:	01 ff       	sbrs	r16, 1
    1eb6:	02 c0       	rjmp	.+4      	; 0x1ebc <vfprintf+0x376>
    1eb8:	8b e2       	ldi	r24, 0x2B	; 43
    1eba:	01 c0       	rjmp	.+2      	; 0x1ebe <vfprintf+0x378>
    1ebc:	80 e2       	ldi	r24, 0x20	; 32
    1ebe:	f7 fc       	sbrc	r15, 7
    1ec0:	8d e2       	ldi	r24, 0x2D	; 45
    1ec2:	90 e0       	ldi	r25, 0x00	; 0
    1ec4:	b3 01       	movw	r22, r6
    1ec6:	4e d0       	rcall	.+156    	; 0x1f64 <fputc>
    1ec8:	05 c0       	rjmp	.+10     	; 0x1ed4 <vfprintf+0x38e>
    1eca:	80 e3       	ldi	r24, 0x30	; 48
    1ecc:	90 e0       	ldi	r25, 0x00	; 0
    1ece:	b3 01       	movw	r22, r6
    1ed0:	49 d0       	rcall	.+146    	; 0x1f64 <fputc>
    1ed2:	9a 94       	dec	r9
    1ed4:	d9 14       	cp	r13, r9
    1ed6:	c8 f3       	brcs	.-14     	; 0x1eca <vfprintf+0x384>
    1ed8:	da 94       	dec	r13
    1eda:	f1 01       	movw	r30, r2
    1edc:	ed 0d       	add	r30, r13
    1ede:	f1 1d       	adc	r31, r1
    1ee0:	80 81       	ld	r24, Z
    1ee2:	90 e0       	ldi	r25, 0x00	; 0
    1ee4:	b3 01       	movw	r22, r6
    1ee6:	3e d0       	rcall	.+124    	; 0x1f64 <fputc>
    1ee8:	dd 20       	and	r13, r13
    1eea:	b1 f7       	brne	.-20     	; 0x1ed8 <vfprintf+0x392>
    1eec:	05 c0       	rjmp	.+10     	; 0x1ef8 <vfprintf+0x3b2>
    1eee:	80 e2       	ldi	r24, 0x20	; 32
    1ef0:	90 e0       	ldi	r25, 0x00	; 0
    1ef2:	b3 01       	movw	r22, r6
    1ef4:	37 d0       	rcall	.+110    	; 0x1f64 <fputc>
    1ef6:	ea 94       	dec	r14
    1ef8:	ee 20       	and	r14, r14
    1efa:	c9 f7       	brne	.-14     	; 0x1eee <vfprintf+0x3a8>
    1efc:	50 ce       	rjmp	.-864    	; 0x1b9e <vfprintf+0x58>
    1efe:	f3 01       	movw	r30, r6
    1f00:	66 81       	ldd	r22, Z+6	; 0x06
    1f02:	77 81       	ldd	r23, Z+7	; 0x07
    1f04:	cb 01       	movw	r24, r22
    1f06:	2b 96       	adiw	r28, 0x0b	; 11
    1f08:	0f b6       	in	r0, 0x3f	; 63
    1f0a:	f8 94       	cli
    1f0c:	de bf       	out	0x3e, r29	; 62
    1f0e:	0f be       	out	0x3f, r0	; 63
    1f10:	cd bf       	out	0x3d, r28	; 61
    1f12:	cf 91       	pop	r28
    1f14:	df 91       	pop	r29
    1f16:	1f 91       	pop	r17
    1f18:	0f 91       	pop	r16
    1f1a:	ff 90       	pop	r15
    1f1c:	ef 90       	pop	r14
    1f1e:	df 90       	pop	r13
    1f20:	cf 90       	pop	r12
    1f22:	bf 90       	pop	r11
    1f24:	af 90       	pop	r10
    1f26:	9f 90       	pop	r9
    1f28:	8f 90       	pop	r8
    1f2a:	7f 90       	pop	r7
    1f2c:	6f 90       	pop	r6
    1f2e:	5f 90       	pop	r5
    1f30:	4f 90       	pop	r4
    1f32:	3f 90       	pop	r3
    1f34:	2f 90       	pop	r2
    1f36:	08 95       	ret

00001f38 <strnlen_P>:
    1f38:	fc 01       	movw	r30, r24
    1f3a:	05 90       	lpm	r0, Z+
    1f3c:	61 50       	subi	r22, 0x01	; 1
    1f3e:	70 40       	sbci	r23, 0x00	; 0
    1f40:	01 10       	cpse	r0, r1
    1f42:	d8 f7       	brcc	.-10     	; 0x1f3a <strnlen_P+0x2>
    1f44:	80 95       	com	r24
    1f46:	90 95       	com	r25
    1f48:	8e 0f       	add	r24, r30
    1f4a:	9f 1f       	adc	r25, r31
    1f4c:	08 95       	ret

00001f4e <strnlen>:
    1f4e:	fc 01       	movw	r30, r24
    1f50:	61 50       	subi	r22, 0x01	; 1
    1f52:	70 40       	sbci	r23, 0x00	; 0
    1f54:	01 90       	ld	r0, Z+
    1f56:	01 10       	cpse	r0, r1
    1f58:	d8 f7       	brcc	.-10     	; 0x1f50 <strnlen+0x2>
    1f5a:	80 95       	com	r24
    1f5c:	90 95       	com	r25
    1f5e:	8e 0f       	add	r24, r30
    1f60:	9f 1f       	adc	r25, r31
    1f62:	08 95       	ret

00001f64 <fputc>:
    1f64:	0f 93       	push	r16
    1f66:	1f 93       	push	r17
    1f68:	cf 93       	push	r28
    1f6a:	df 93       	push	r29
    1f6c:	8c 01       	movw	r16, r24
    1f6e:	eb 01       	movw	r28, r22
    1f70:	8b 81       	ldd	r24, Y+3	; 0x03
    1f72:	81 ff       	sbrs	r24, 1
    1f74:	1b c0       	rjmp	.+54     	; 0x1fac <fputc+0x48>
    1f76:	82 ff       	sbrs	r24, 2
    1f78:	0d c0       	rjmp	.+26     	; 0x1f94 <fputc+0x30>
    1f7a:	2e 81       	ldd	r18, Y+6	; 0x06
    1f7c:	3f 81       	ldd	r19, Y+7	; 0x07
    1f7e:	8c 81       	ldd	r24, Y+4	; 0x04
    1f80:	9d 81       	ldd	r25, Y+5	; 0x05
    1f82:	28 17       	cp	r18, r24
    1f84:	39 07       	cpc	r19, r25
    1f86:	64 f4       	brge	.+24     	; 0x1fa0 <fputc+0x3c>
    1f88:	e8 81       	ld	r30, Y
    1f8a:	f9 81       	ldd	r31, Y+1	; 0x01
    1f8c:	01 93       	st	Z+, r16
    1f8e:	f9 83       	std	Y+1, r31	; 0x01
    1f90:	e8 83       	st	Y, r30
    1f92:	06 c0       	rjmp	.+12     	; 0x1fa0 <fputc+0x3c>
    1f94:	e8 85       	ldd	r30, Y+8	; 0x08
    1f96:	f9 85       	ldd	r31, Y+9	; 0x09
    1f98:	80 2f       	mov	r24, r16
    1f9a:	09 95       	icall
    1f9c:	89 2b       	or	r24, r25
    1f9e:	31 f4       	brne	.+12     	; 0x1fac <fputc+0x48>
    1fa0:	8e 81       	ldd	r24, Y+6	; 0x06
    1fa2:	9f 81       	ldd	r25, Y+7	; 0x07
    1fa4:	01 96       	adiw	r24, 0x01	; 1
    1fa6:	9f 83       	std	Y+7, r25	; 0x07
    1fa8:	8e 83       	std	Y+6, r24	; 0x06
    1faa:	02 c0       	rjmp	.+4      	; 0x1fb0 <fputc+0x4c>
    1fac:	0f ef       	ldi	r16, 0xFF	; 255
    1fae:	1f ef       	ldi	r17, 0xFF	; 255
    1fb0:	c8 01       	movw	r24, r16
    1fb2:	df 91       	pop	r29
    1fb4:	cf 91       	pop	r28
    1fb6:	1f 91       	pop	r17
    1fb8:	0f 91       	pop	r16
    1fba:	08 95       	ret

00001fbc <__ultoa_invert>:
    1fbc:	fa 01       	movw	r30, r20
    1fbe:	aa 27       	eor	r26, r26
    1fc0:	28 30       	cpi	r18, 0x08	; 8
    1fc2:	51 f1       	breq	.+84     	; 0x2018 <__ultoa_invert+0x5c>
    1fc4:	20 31       	cpi	r18, 0x10	; 16
    1fc6:	81 f1       	breq	.+96     	; 0x2028 <__ultoa_invert+0x6c>
    1fc8:	e8 94       	clt
    1fca:	6f 93       	push	r22
    1fcc:	6e 7f       	andi	r22, 0xFE	; 254
    1fce:	6e 5f       	subi	r22, 0xFE	; 254
    1fd0:	7f 4f       	sbci	r23, 0xFF	; 255
    1fd2:	8f 4f       	sbci	r24, 0xFF	; 255
    1fd4:	9f 4f       	sbci	r25, 0xFF	; 255
    1fd6:	af 4f       	sbci	r26, 0xFF	; 255
    1fd8:	b1 e0       	ldi	r27, 0x01	; 1
    1fda:	3e d0       	rcall	.+124    	; 0x2058 <__ultoa_invert+0x9c>
    1fdc:	b4 e0       	ldi	r27, 0x04	; 4
    1fde:	3c d0       	rcall	.+120    	; 0x2058 <__ultoa_invert+0x9c>
    1fe0:	67 0f       	add	r22, r23
    1fe2:	78 1f       	adc	r23, r24
    1fe4:	89 1f       	adc	r24, r25
    1fe6:	9a 1f       	adc	r25, r26
    1fe8:	a1 1d       	adc	r26, r1
    1fea:	68 0f       	add	r22, r24
    1fec:	79 1f       	adc	r23, r25
    1fee:	8a 1f       	adc	r24, r26
    1ff0:	91 1d       	adc	r25, r1
    1ff2:	a1 1d       	adc	r26, r1
    1ff4:	6a 0f       	add	r22, r26
    1ff6:	71 1d       	adc	r23, r1
    1ff8:	81 1d       	adc	r24, r1
    1ffa:	91 1d       	adc	r25, r1
    1ffc:	a1 1d       	adc	r26, r1
    1ffe:	20 d0       	rcall	.+64     	; 0x2040 <__ultoa_invert+0x84>
    2000:	09 f4       	brne	.+2      	; 0x2004 <__ultoa_invert+0x48>
    2002:	68 94       	set
    2004:	3f 91       	pop	r19
    2006:	2a e0       	ldi	r18, 0x0A	; 10
    2008:	26 9f       	mul	r18, r22
    200a:	11 24       	eor	r1, r1
    200c:	30 19       	sub	r19, r0
    200e:	30 5d       	subi	r19, 0xD0	; 208
    2010:	31 93       	st	Z+, r19
    2012:	de f6       	brtc	.-74     	; 0x1fca <__ultoa_invert+0xe>
    2014:	cf 01       	movw	r24, r30
    2016:	08 95       	ret
    2018:	46 2f       	mov	r20, r22
    201a:	47 70       	andi	r20, 0x07	; 7
    201c:	40 5d       	subi	r20, 0xD0	; 208
    201e:	41 93       	st	Z+, r20
    2020:	b3 e0       	ldi	r27, 0x03	; 3
    2022:	0f d0       	rcall	.+30     	; 0x2042 <__ultoa_invert+0x86>
    2024:	c9 f7       	brne	.-14     	; 0x2018 <__ultoa_invert+0x5c>
    2026:	f6 cf       	rjmp	.-20     	; 0x2014 <__ultoa_invert+0x58>
    2028:	46 2f       	mov	r20, r22
    202a:	4f 70       	andi	r20, 0x0F	; 15
    202c:	40 5d       	subi	r20, 0xD0	; 208
    202e:	4a 33       	cpi	r20, 0x3A	; 58
    2030:	18 f0       	brcs	.+6      	; 0x2038 <__ultoa_invert+0x7c>
    2032:	49 5d       	subi	r20, 0xD9	; 217
    2034:	31 fd       	sbrc	r19, 1
    2036:	40 52       	subi	r20, 0x20	; 32
    2038:	41 93       	st	Z+, r20
    203a:	02 d0       	rcall	.+4      	; 0x2040 <__ultoa_invert+0x84>
    203c:	a9 f7       	brne	.-22     	; 0x2028 <__ultoa_invert+0x6c>
    203e:	ea cf       	rjmp	.-44     	; 0x2014 <__ultoa_invert+0x58>
    2040:	b4 e0       	ldi	r27, 0x04	; 4
    2042:	a6 95       	lsr	r26
    2044:	97 95       	ror	r25
    2046:	87 95       	ror	r24
    2048:	77 95       	ror	r23
    204a:	67 95       	ror	r22
    204c:	ba 95       	dec	r27
    204e:	c9 f7       	brne	.-14     	; 0x2042 <__ultoa_invert+0x86>
    2050:	00 97       	sbiw	r24, 0x00	; 0
    2052:	61 05       	cpc	r22, r1
    2054:	71 05       	cpc	r23, r1
    2056:	08 95       	ret
    2058:	9b 01       	movw	r18, r22
    205a:	ac 01       	movw	r20, r24
    205c:	0a 2e       	mov	r0, r26
    205e:	06 94       	lsr	r0
    2060:	57 95       	ror	r21
    2062:	47 95       	ror	r20
    2064:	37 95       	ror	r19
    2066:	27 95       	ror	r18
    2068:	ba 95       	dec	r27
    206a:	c9 f7       	brne	.-14     	; 0x205e <__ultoa_invert+0xa2>
    206c:	62 0f       	add	r22, r18
    206e:	73 1f       	adc	r23, r19
    2070:	84 1f       	adc	r24, r20
    2072:	95 1f       	adc	r25, r21
    2074:	a0 1d       	adc	r26, r0
    2076:	08 95       	ret

00002078 <_exit>:
    2078:	f8 94       	cli

0000207a <__stop_program>:
    207a:	ff cf       	rjmp	.-2      	; 0x207a <__stop_program>
