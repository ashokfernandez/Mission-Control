
MouseHostWithParser.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000003c  00800100  000024b8  0000254c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000024b8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000003ee  0080013c  0080013c  00002588  2**0
                  ALLOC
  3 .stab         00000eac  00000000  00000000  00002588  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000025c  00000000  00000000  00003434  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000003e8  00000000  00000000  00003690  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000840  00000000  00000000  00003a78  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000572d  00000000  00000000  000042b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001dfe  00000000  00000000  000099e5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00004329  00000000  00000000  0000b7e3  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000550  00000000  00000000  0000fb0c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000248c  00000000  00000000  0001005c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000213b  00000000  00000000  000124e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000460  00000000  00000000  00014623  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:

	return USB_Host_SendControlRequest(Buffer);
}

uint8_t USB_Host_ClearPipeStall(const uint8_t EndpointNum)
{
       0:	85 c1       	rjmp	.+778    	; 0x30c <__ctors_end>
		Pipe_DisablePipe();
	}
}

bool Pipe_IsEndpointBound(const uint8_t EndpointAddress)
{
       2:	00 00       	nop
{
	USB_GetNextDescriptorOfType(BytesRem, CurrConfigLoc, AfterType);

	if (*BytesRem)
	  USB_GetNextDescriptorOfType(BytesRem, CurrConfigLoc, Type);
}
       4:	a1 c1       	rjmp	.+834    	; 0x348 <__bad_interrupt>
			Length--;
		}
	}

	return PIPE_RWSTREAM_NoError;
}
       6:	00 00       	nop
	return true;
}

void USB_SetHIDReportItemInfo(uint8_t* ReportData,
                              HID_ReportItem_t* const ReportItem)
{
       8:	9f c1       	rjmp	.+830    	; 0x348 <__bad_interrupt>
       a:	00 00       	nop
       c:	9d c1       	rjmp	.+826    	; 0x348 <__bad_interrupt>
       e:	00 00       	nop
      10:	9b c1       	rjmp	.+822    	; 0x348 <__bad_interrupt>
      12:	00 00       	nop
      14:	99 c1       	rjmp	.+818    	; 0x348 <__bad_interrupt>
      16:	00 00       	nop
      18:	97 c1       	rjmp	.+814    	; 0x348 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	95 c1       	rjmp	.+810    	; 0x348 <__bad_interrupt>
      1e:	00 00       	nop
      20:	93 c1       	rjmp	.+806    	; 0x348 <__bad_interrupt>
      22:	00 00       	nop
      24:	91 c1       	rjmp	.+802    	; 0x348 <__bad_interrupt>
      26:	00 00       	nop
      28:	0c 94 4e 08 	jmp	0x109c	; 0x109c <__vector_10>
      2c:	8d c1       	rjmp	.+794    	; 0x348 <__bad_interrupt>
      2e:	00 00       	nop
      30:	8b c1       	rjmp	.+790    	; 0x348 <__bad_interrupt>
      32:	00 00       	nop
      34:	89 c1       	rjmp	.+786    	; 0x348 <__bad_interrupt>
      36:	00 00       	nop
      38:	87 c1       	rjmp	.+782    	; 0x348 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	85 c1       	rjmp	.+778    	; 0x348 <__bad_interrupt>
      3e:	00 00       	nop
      40:	83 c1       	rjmp	.+774    	; 0x348 <__bad_interrupt>
      42:	00 00       	nop
      44:	81 c1       	rjmp	.+770    	; 0x348 <__bad_interrupt>
      46:	00 00       	nop
      48:	7f c1       	rjmp	.+766    	; 0x348 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	7d c1       	rjmp	.+762    	; 0x348 <__bad_interrupt>
      4e:	00 00       	nop
      50:	7b c1       	rjmp	.+758    	; 0x348 <__bad_interrupt>
      52:	00 00       	nop
      54:	79 c1       	rjmp	.+754    	; 0x348 <__bad_interrupt>
      56:	00 00       	nop
      58:	77 c1       	rjmp	.+750    	; 0x348 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	75 c1       	rjmp	.+746    	; 0x348 <__bad_interrupt>
      5e:	00 00       	nop
      60:	73 c1       	rjmp	.+742    	; 0x348 <__bad_interrupt>
      62:	00 00       	nop
      64:	71 c1       	rjmp	.+738    	; 0x348 <__bad_interrupt>
      66:	00 00       	nop
      68:	6f c1       	rjmp	.+734    	; 0x348 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	6d c1       	rjmp	.+730    	; 0x348 <__bad_interrupt>
      6e:	00 00       	nop
      70:	6b c1       	rjmp	.+726    	; 0x348 <__bad_interrupt>
      72:	00 00       	nop
      74:	69 c1       	rjmp	.+722    	; 0x348 <__bad_interrupt>
      76:	00 00       	nop
      78:	67 c1       	rjmp	.+718    	; 0x348 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	65 c1       	rjmp	.+714    	; 0x348 <__bad_interrupt>
      7e:	00 00       	nop
      80:	63 c1       	rjmp	.+710    	; 0x348 <__bad_interrupt>
      82:	00 00       	nop
      84:	61 c1       	rjmp	.+706    	; 0x348 <__bad_interrupt>
      86:	00 00       	nop
      88:	5f c1       	rjmp	.+702    	; 0x348 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	5d c1       	rjmp	.+698    	; 0x348 <__bad_interrupt>
      8e:	00 00       	nop
      90:	5b c1       	rjmp	.+694    	; 0x348 <__bad_interrupt>
      92:	00 00       	nop
      94:	59 c1       	rjmp	.+690    	; 0x348 <__bad_interrupt>
      96:	00 00       	nop

00000098 <__c.4179>:
      98:	4d 6f 75 73 65 20 45 6e 75 6d 65 72 61 74 65 64     Mouse Enumerated
      a8:	2e 0d 0a 00                                         ....

000000ac <__c.4174>:
      ac:	20 20 2b 20 52 65 70 6f 72 74 20 49 44 20 25 64       + Report ID %d
      bc:	20 2d 20 49 6e 3a 20 25 64 20 62 79 74 65 73 2c      - In: %d bytes,
      cc:	20 4f 75 74 3a 20 25 64 20 62 79 74 65 73 2c 20      Out: %d bytes, 
      dc:	46 65 61 74 75 72 65 3a 20 25 64 20 62 79 74 65     Feature: %d byte
      ec:	73 0d 0a 00                                         s...

000000f0 <__c.4167>:
      f0:	20 2d 2d 20 45 72 72 6f 72 20 43 6f 64 65 3a 20      -- Error Code: 
     100:	25 64 0d 0a 1b 5b 33 37 6d 00                       %d...[37m.

0000010a <__c.4165>:
     10a:	4e 6f 74 20 61 20 76 61 6c 69 64 20 4d 6f 75 73     Not a valid Mous
     11a:	65 2e 1b 5b 33 37 6d 00                             e..[37m.

00000122 <__c.4163>:
     122:	1b 5b 33 31 6d 52 65 70 6f 72 74 20 50 61 72 73     .[31mReport Pars
     132:	65 20 45 72 72 6f 72 2e 0d 0a 00                    e Error....

0000013d <__c.4161>:
     13d:	50 72 6f 63 65 73 73 69 6e 67 20 48 49 44 20 52     Processing HID R
     14d:	65 70 6f 72 74 20 28 53 69 7a 65 20 25 64 20 42     eport (Size %d B
     15d:	79 74 65 73 29 2e 0d 0a 00                          ytes)....

00000166 <__c.4159>:
     166:	1b 5b 33 31 6d 43 6f 6e 74 72 6f 6c 20 45 72 72     .[31mControl Err
     176:	6f 72 20 28 53 65 74 20 43 6f 6e 66 69 67 75 72     or (Set Configur
     186:	61 74 69 6f 6e 29 2e 0d 0a 20 2d 2d 20 45 72 72     ation)... -- Err
     196:	6f 72 20 43 6f 64 65 3a 20 25 64 0d 0a 1b 5b 33     or Code: %d...[3
     1a6:	37 6d 00                                            7m.

000001a9 <__c.4156>:
     1a9:	20 2d 2d 20 45 72 72 6f 72 20 43 6f 64 65 3a 20      -- Error Code: 
     1b9:	25 64 0d 0a 1b 5b 33 37 6d 00                       %d...[37m.

000001c3 <__c.4154>:
     1c3:	1b 5b 33 31 6d 49 6e 76 61 6c 69 64 20 44 65 76     .[31mInvalid Dev
     1d3:	69 63 65 2e 0d 0a 00                                ice....

000001da <__c.4152>:
     1da:	1b 5b 33 31 6d 43 6f 6e 74 72 6f 6c 20 45 72 72     .[31mControl Err
     1ea:	6f 72 20 28 47 65 74 20 43 6f 6e 66 69 67 75 72     or (Get Configur
     1fa:	61 74 69 6f 6e 29 2e 0d 0a 00                       ation)....

00000204 <__c.4150>:
     204:	47 65 74 74 69 6e 67 20 43 6f 6e 66 69 67 20 44     Getting Config D
     214:	61 74 61 2e 0d 0a 00                                ata....

0000021b <__c.4139>:
     21b:	1b 5b 33 31 6d 44 65 76 20 45 6e 75 6d 20 45 72     .[31mDev Enum Er
     22b:	72 6f 72 0d 0a 20 2d 2d 20 45 72 72 6f 72 20 43     ror.. -- Error C
     23b:	6f 64 65 20 25 64 0d 0a 20 2d 2d 20 53 75 62 20     ode %d.. -- Sub 
     24b:	45 72 72 6f 72 20 43 6f 64 65 20 25 64 0d 0a 20     Error Code %d.. 
     25b:	2d 2d 20 49 6e 20 53 74 61 74 65 20 25 64 0d 0a     -- In State %d..
     26b:	1b 5b 33 37 6d 00                                   .[37m.

00000271 <__c.4131>:
     271:	1b 5b 33 31 6d 48 6f 73 74 20 4d 6f 64 65 20 45     .[31mHost Mode E
     281:	72 72 6f 72 0d 0a 20 2d 2d 20 45 72 72 6f 72 20     rror.. -- Error 
     291:	43 6f 64 65 20 25 64 0d 0a 1b 5b 33 37 6d 00        Code %d...[37m.

000002a0 <__c.4123>:
     2a0:	1b 5b 33 32 6d 44 65 76 69 63 65 20 55 6e 61 74     .[32mDevice Unat
     2b0:	74 61 63 68 65 64 2e 0d 0a 1b 5b 33 37 6d 00        tached....[37m.

000002bf <__c.4118>:
     2bf:	1b 5b 33 32 6d 44 65 76 69 63 65 20 41 74 74 61     .[32mDevice Atta
     2cf:	63 68 65 64 2e 0d 0a 1b 5b 33 37 6d 00              ched....[37m.

000002dc <__c.4104>:
     2dc:	1b 5b 33 36 6d 4d 6f 75 73 65 20 48 49 44 20 50     .[36mMouse HID P
     2ec:	61 72 73 65 72 20 48 6f 73 74 20 44 65 6d 6f 20     arser Host Demo 
     2fc:	72 75 6e 6e 69 6e 67 2e 0d 0a 1b 5b 33 37 6d 00     running....[37m.

0000030c <__ctors_end>:
     30c:	11 24       	eor	r1, r1
     30e:	1f be       	out	0x3f, r1	; 63
     310:	cf ef       	ldi	r28, 0xFF	; 255
     312:	d0 e2       	ldi	r29, 0x20	; 32
     314:	de bf       	out	0x3e, r29	; 62
     316:	cd bf       	out	0x3d, r28	; 61

00000318 <__do_copy_data>:
     318:	11 e0       	ldi	r17, 0x01	; 1
     31a:	a0 e0       	ldi	r26, 0x00	; 0
     31c:	b1 e0       	ldi	r27, 0x01	; 1
     31e:	e8 eb       	ldi	r30, 0xB8	; 184
     320:	f4 e2       	ldi	r31, 0x24	; 36
     322:	00 e0       	ldi	r16, 0x00	; 0
     324:	0b bf       	out	0x3b, r16	; 59
     326:	02 c0       	rjmp	.+4      	; 0x32c <__do_copy_data+0x14>
     328:	07 90       	elpm	r0, Z+
     32a:	0d 92       	st	X+, r0
     32c:	ac 33       	cpi	r26, 0x3C	; 60
     32e:	b1 07       	cpc	r27, r17
     330:	d9 f7       	brne	.-10     	; 0x328 <__do_copy_data+0x10>

00000332 <__do_clear_bss>:
     332:	15 e0       	ldi	r17, 0x05	; 5
     334:	ac e3       	ldi	r26, 0x3C	; 60
     336:	b1 e0       	ldi	r27, 0x01	; 1
     338:	01 c0       	rjmp	.+2      	; 0x33c <.do_clear_bss_start>

0000033a <.do_clear_bss_loop>:
     33a:	1d 92       	st	X+, r1

0000033c <.do_clear_bss_start>:
     33c:	aa 32       	cpi	r26, 0x2A	; 42
     33e:	b1 07       	cpc	r27, r17
     340:	e1 f7       	brne	.-8      	; 0x33a <.do_clear_bss_loop>
     342:	b1 d2       	rcall	.+1378   	; 0x8a6 <main>
     344:	0c 94 5a 12 	jmp	0x24b4	; 0x24b4 <_exit>

00000348 <__bad_interrupt>:
     348:	5b ce       	rjmp	.-842    	; 0x0 <__vectors>

0000034a <EVENT_USB_Host_DeviceEnumerationComplete>:
				PORTD &= ~LEDMask;
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
			{
				PORTD = ((PORTD & ~LEDS_ALL_LEDS) | LEDMask);
     34a:	8b b1       	in	r24, 0x0b	; 11
     34c:	8f 70       	andi	r24, 0x0F	; 15
     34e:	80 66       	ori	r24, 0x60	; 96
     350:	8b b9       	out	0x0b, r24	; 11
 *  enumerated by the host and is now ready to be used by the application.
 */
void EVENT_USB_Host_DeviceEnumerationComplete(void)
{
	LEDs_SetAllLEDs(LEDMASK_USB_READY);
}
     352:	08 95       	ret

00000354 <ProcessMouseReport>:
 *  as required and displays movement and button presses on the board LEDs.
 *
 *  \param[in] MouseReport  Pointer to a HID report from an attached mouse device
 */
void ProcessMouseReport(uint8_t* MouseReport)
{
     354:	bf 92       	push	r11
     356:	cf 92       	push	r12
     358:	df 92       	push	r13
     35a:	ef 92       	push	r14
     35c:	ff 92       	push	r15
     35e:	0f 93       	push	r16
     360:	1f 93       	push	r17
     362:	cf 93       	push	r28
     364:	df 93       	push	r29
     366:	7c 01       	movw	r14, r24
     368:	10 e0       	ldi	r17, 0x00	; 0
     36a:	00 e0       	ldi	r16, 0x00	; 0

	/* Check each HID report item in turn, looking for mouse X/Y/button reports */
	for (uint8_t ReportNumber = 0; ReportNumber < HIDReportInfo.TotalReportItems; ReportNumber++)
	{
		/* Create a temporary item pointer to the next report item */
		HID_ReportItem_t* ReportItem = &HIDReportInfo.ReportItems[ReportNumber];
     36c:	9a e2       	ldi	r25, 0x2A	; 42
     36e:	b9 2e       	mov	r11, r25

			/* For multi-report devices - if the requested data was not in the issued report, continue */
			if (!(FoundData))
			  continue;

			int16_t DeltaMovement = HID_ALIGN_DATA(ReportItem, int16_t);
     370:	80 e1       	ldi	r24, 0x10	; 16
     372:	c8 2e       	mov	r12, r24
     374:	d1 2c       	mov	r13, r1
     376:	80 c0       	rjmp	.+256    	; 0x478 <ProcessMouseReport+0x124>

	/* Check each HID report item in turn, looking for mouse X/Y/button reports */
	for (uint8_t ReportNumber = 0; ReportNumber < HIDReportInfo.TotalReportItems; ReportNumber++)
	{
		/* Create a temporary item pointer to the next report item */
		HID_ReportItem_t* ReportItem = &HIDReportInfo.ReportItems[ReportNumber];
     378:	0b 9d       	mul	r16, r11
     37a:	e0 01       	movw	r28, r0
     37c:	11 24       	eor	r1, r1
     37e:	c0 5c       	subi	r28, 0xC0	; 192
     380:	de 4f       	sbci	r29, 0xFE	; 254

		bool FoundData;

		if ((ReportItem->Attributes.Usage.Page        == USAGE_PAGE_BUTTON) &&
     382:	89 85       	ldd	r24, Y+9	; 0x09
     384:	9a 85       	ldd	r25, Y+10	; 0x0a
     386:	89 30       	cpi	r24, 0x09	; 9
     388:	91 05       	cpc	r25, r1
     38a:	b1 f4       	brne	.+44     	; 0x3b8 <ProcessMouseReport+0x64>
     38c:	8a 81       	ldd	r24, Y+2	; 0x02
     38e:	88 23       	and	r24, r24
     390:	09 f0       	breq	.+2      	; 0x394 <ProcessMouseReport+0x40>
     392:	71 c0       	rjmp	.+226    	; 0x476 <ProcessMouseReport+0x122>
			(ReportItem->ItemType                     == HID_REPORT_ITEM_In))
		{
			/* Get the mouse button value */
			FoundData = USB_GetHIDReportItemInfo(MouseReport, ReportItem);
     394:	c7 01       	movw	r24, r14
     396:	be 01       	movw	r22, r28
     398:	0e 94 ed 0a 	call	0x15da	; 0x15da <USB_GetHIDReportItemInfo>

			/* For multi-report devices - if the requested data was not in the issued report, continue */
			if (!(FoundData))
     39c:	88 23       	and	r24, r24
     39e:	09 f4       	brne	.+2      	; 0x3a2 <ProcessMouseReport+0x4e>
     3a0:	6a c0       	rjmp	.+212    	; 0x476 <ProcessMouseReport+0x122>
			  continue;

			/* If button is pressed, all LEDs are turned on */
			if (ReportItem->Value)
     3a2:	8a a1       	ldd	r24, Y+34	; 0x22
     3a4:	9b a1       	ldd	r25, Y+35	; 0x23
     3a6:	ac a1       	ldd	r26, Y+36	; 0x24
     3a8:	bd a1       	ldd	r27, Y+37	; 0x25
     3aa:	00 97       	sbiw	r24, 0x00	; 0
     3ac:	a1 05       	cpc	r26, r1
     3ae:	b1 05       	cpc	r27, r1
     3b0:	09 f4       	brne	.+2      	; 0x3b4 <ProcessMouseReport+0x60>
     3b2:	61 c0       	rjmp	.+194    	; 0x476 <ProcessMouseReport+0x122>
     3b4:	10 ef       	ldi	r17, 0xF0	; 240
     3b6:	5f c0       	rjmp	.+190    	; 0x476 <ProcessMouseReport+0x122>
			  LEDMask = LEDS_ALL_LEDS;
		}
		else if ((ReportItem->Attributes.Usage.Page   == USAGE_PAGE_GENERIC_DCTRL) &&
     3b8:	01 97       	sbiw	r24, 0x01	; 1
     3ba:	09 f0       	breq	.+2      	; 0x3be <ProcessMouseReport+0x6a>
     3bc:	5c c0       	rjmp	.+184    	; 0x476 <ProcessMouseReport+0x122>
     3be:	2b 85       	ldd	r18, Y+11	; 0x0b
     3c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     3c2:	28 33       	cpi	r18, 0x38	; 56
     3c4:	31 05       	cpc	r19, r1
     3c6:	21 f5       	brne	.+72     	; 0x410 <ProcessMouseReport+0xbc>
     3c8:	8a 81       	ldd	r24, Y+2	; 0x02
     3ca:	88 23       	and	r24, r24
     3cc:	09 f5       	brne	.+66     	; 0x410 <ProcessMouseReport+0xbc>
				 (ReportItem->ItemType                == HID_REPORT_ITEM_In))
		{
			/* Get the mouse wheel value if it is contained within the current
			 * report, if not, skip to the next item in the parser list
			 */
			if (!(USB_GetHIDReportItemInfo(MouseReport, ReportItem)))
     3ce:	c7 01       	movw	r24, r14
     3d0:	be 01       	movw	r22, r28
     3d2:	0e 94 ed 0a 	call	0x15da	; 0x15da <USB_GetHIDReportItemInfo>
     3d6:	88 23       	and	r24, r24
     3d8:	09 f4       	brne	.+2      	; 0x3dc <ProcessMouseReport+0x88>
     3da:	4d c0       	rjmp	.+154    	; 0x476 <ProcessMouseReport+0x122>
			  continue;

			int16_t WheelDelta = HID_ALIGN_DATA(ReportItem, int16_t);
     3dc:	88 85       	ldd	r24, Y+8	; 0x08
     3de:	96 01       	movw	r18, r12
     3e0:	28 1b       	sub	r18, r24
     3e2:	31 09       	sbc	r19, r1
     3e4:	c9 01       	movw	r24, r18
     3e6:	2a a1       	ldd	r18, Y+34	; 0x22
     3e8:	3b a1       	ldd	r19, Y+35	; 0x23
     3ea:	4c a1       	ldd	r20, Y+36	; 0x24
     3ec:	5d a1       	ldd	r21, Y+37	; 0x25
     3ee:	04 c0       	rjmp	.+8      	; 0x3f8 <ProcessMouseReport+0xa4>
     3f0:	22 0f       	add	r18, r18
     3f2:	33 1f       	adc	r19, r19
     3f4:	44 1f       	adc	r20, r20
     3f6:	55 1f       	adc	r21, r21
     3f8:	8a 95       	dec	r24
     3fa:	d2 f7       	brpl	.-12     	; 0x3f0 <ProcessMouseReport+0x9c>

			if (WheelDelta)
     3fc:	21 15       	cp	r18, r1
     3fe:	31 05       	cpc	r19, r1
     400:	d1 f1       	breq	.+116    	; 0x476 <ProcessMouseReport+0x122>
			  LEDMask = (LEDS_LED1 | LEDS_LED2 | ((WheelDelta > 0) ? LEDS_LED3 : LEDS_LED4));
     402:	12 16       	cp	r1, r18
     404:	13 06       	cpc	r1, r19
     406:	14 f0       	brlt	.+4      	; 0x40c <ProcessMouseReport+0xb8>
     408:	10 e7       	ldi	r17, 0x70	; 112
     40a:	35 c0       	rjmp	.+106    	; 0x476 <ProcessMouseReport+0x122>
     40c:	10 eb       	ldi	r17, 0xB0	; 176
     40e:	33 c0       	rjmp	.+102    	; 0x476 <ProcessMouseReport+0x122>
		}
		else if ((ReportItem->Attributes.Usage.Page   == USAGE_PAGE_GENERIC_DCTRL) &&
     410:	20 53       	subi	r18, 0x30	; 48
     412:	30 40       	sbci	r19, 0x00	; 0
     414:	22 30       	cpi	r18, 0x02	; 2
     416:	31 05       	cpc	r19, r1
     418:	70 f5       	brcc	.+92     	; 0x476 <ProcessMouseReport+0x122>
     41a:	8a 81       	ldd	r24, Y+2	; 0x02
     41c:	88 23       	and	r24, r24
     41e:	59 f5       	brne	.+86     	; 0x476 <ProcessMouseReport+0x122>
				 ((ReportItem->Attributes.Usage.Usage == USAGE_X)                  ||
				  (ReportItem->Attributes.Usage.Usage == USAGE_Y))                 &&
				 (ReportItem->ItemType                == HID_REPORT_ITEM_In))
		{
			/* Get the mouse relative position value */
			FoundData = USB_GetHIDReportItemInfo(MouseReport, ReportItem);
     420:	c7 01       	movw	r24, r14
     422:	be 01       	movw	r22, r28
     424:	0e 94 ed 0a 	call	0x15da	; 0x15da <USB_GetHIDReportItemInfo>

			/* For multi-report devices - if the requested data was not in the issued report, continue */
			if (!(FoundData))
     428:	88 23       	and	r24, r24
     42a:	29 f1       	breq	.+74     	; 0x476 <ProcessMouseReport+0x122>
			  continue;

			int16_t DeltaMovement = HID_ALIGN_DATA(ReportItem, int16_t);
     42c:	88 85       	ldd	r24, Y+8	; 0x08
     42e:	96 01       	movw	r18, r12
     430:	28 1b       	sub	r18, r24
     432:	31 09       	sbc	r19, r1
     434:	c9 01       	movw	r24, r18
     436:	2a a1       	ldd	r18, Y+34	; 0x22
     438:	3b a1       	ldd	r19, Y+35	; 0x23
     43a:	4c a1       	ldd	r20, Y+36	; 0x24
     43c:	5d a1       	ldd	r21, Y+37	; 0x25
     43e:	04 c0       	rjmp	.+8      	; 0x448 <ProcessMouseReport+0xf4>
     440:	22 0f       	add	r18, r18
     442:	33 1f       	adc	r19, r19
     444:	44 1f       	adc	r20, r20
     446:	55 1f       	adc	r21, r21
     448:	8a 95       	dec	r24
     44a:	d2 f7       	brpl	.-12     	; 0x440 <ProcessMouseReport+0xec>

			/* Check to see if a (non-zero) delta movement has been indicated */
			if (DeltaMovement)
     44c:	21 15       	cp	r18, r1
     44e:	31 05       	cpc	r19, r1
     450:	91 f0       	breq	.+36     	; 0x476 <ProcessMouseReport+0x122>
			{
				/* Determine if the report is for the X or Y delta movement, light LEDs as appropriate */
				if (ReportItem->Attributes.Usage.Usage == USAGE_X)
     452:	8b 85       	ldd	r24, Y+11	; 0x0b
     454:	9c 85       	ldd	r25, Y+12	; 0x0c
     456:	c0 97       	sbiw	r24, 0x30	; 48
     458:	39 f4       	brne	.+14     	; 0x468 <ProcessMouseReport+0x114>
				  LEDMask |= ((DeltaMovement > 0) ? LEDS_LED1 : LEDS_LED2);
     45a:	12 16       	cp	r1, r18
     45c:	13 06       	cpc	r1, r19
     45e:	14 f0       	brlt	.+4      	; 0x464 <ProcessMouseReport+0x110>
     460:	80 e2       	ldi	r24, 0x20	; 32
     462:	08 c0       	rjmp	.+16     	; 0x474 <ProcessMouseReport+0x120>
     464:	80 e1       	ldi	r24, 0x10	; 16
     466:	06 c0       	rjmp	.+12     	; 0x474 <ProcessMouseReport+0x120>
				else
				  LEDMask |= ((DeltaMovement > 0) ? LEDS_LED3 : LEDS_LED4);
     468:	12 16       	cp	r1, r18
     46a:	13 06       	cpc	r1, r19
     46c:	14 f0       	brlt	.+4      	; 0x472 <ProcessMouseReport+0x11e>
     46e:	80 e4       	ldi	r24, 0x40	; 64
     470:	01 c0       	rjmp	.+2      	; 0x474 <ProcessMouseReport+0x120>
     472:	80 e8       	ldi	r24, 0x80	; 128
     474:	18 2b       	or	r17, r24
void ProcessMouseReport(uint8_t* MouseReport)
{
	uint8_t LEDMask = LEDS_NO_LEDS;

	/* Check each HID report item in turn, looking for mouse X/Y/button reports */
	for (uint8_t ReportNumber = 0; ReportNumber < HIDReportInfo.TotalReportItems; ReportNumber++)
     476:	0f 5f       	subi	r16, 0xFF	; 255
     478:	80 91 3f 01 	lds	r24, 0x013F
     47c:	08 17       	cp	r16, r24
     47e:	08 f4       	brcc	.+2      	; 0x482 <ProcessMouseReport+0x12e>
     480:	7b cf       	rjmp	.-266    	; 0x378 <ProcessMouseReport+0x24>
     482:	8b b1       	in	r24, 0x0b	; 11
     484:	8f 70       	andi	r24, 0x0F	; 15
     486:	18 2b       	or	r17, r24
     488:	1b b9       	out	0x0b, r17	; 11
		}
	}

	/* Display the button information on the board LEDs */
	LEDs_SetAllLEDs(LEDMask);
}
     48a:	df 91       	pop	r29
     48c:	cf 91       	pop	r28
     48e:	1f 91       	pop	r17
     490:	0f 91       	pop	r16
     492:	ff 90       	pop	r15
     494:	ef 90       	pop	r14
     496:	df 90       	pop	r13
     498:	cf 90       	pop	r12
     49a:	bf 90       	pop	r11
     49c:	08 95       	ret

0000049e <EVENT_USB_Host_DeviceUnattached>:
/** Event handler for the USB_DeviceUnattached event. This indicates that a device has been removed from the host, and
 *  stops the library USB task management process.
 */
void EVENT_USB_Host_DeviceUnattached(void)
{
	puts_P(PSTR(ESC_FG_GREEN "Device Unattached.\r\n" ESC_FG_WHITE));
     49e:	80 ea       	ldi	r24, 0xA0	; 160
     4a0:	92 e0       	ldi	r25, 0x02	; 2
     4a2:	0e 94 8c 0f 	call	0x1f18	; 0x1f18 <puts_P>
     4a6:	8b b1       	in	r24, 0x0b	; 11
     4a8:	8f 70       	andi	r24, 0x0F	; 15
     4aa:	80 61       	ori	r24, 0x10	; 16
     4ac:	8b b9       	out	0x0b, r24	; 11
	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
}
     4ae:	08 95       	ret

000004b0 <EVENT_USB_Host_DeviceAttached>:
/** Event handler for the USB_DeviceAttached event. This indicates that a device has been attached to the host, and
 *  starts the library USB task to begin the enumeration and USB management process.
 */
void EVENT_USB_Host_DeviceAttached(void)
{
	puts_P(PSTR(ESC_FG_GREEN "Device Attached.\r\n" ESC_FG_WHITE));
     4b0:	8f eb       	ldi	r24, 0xBF	; 191
     4b2:	92 e0       	ldi	r25, 0x02	; 2
     4b4:	0e 94 8c 0f 	call	0x1f18	; 0x1f18 <puts_P>
     4b8:	8b b1       	in	r24, 0x0b	; 11
     4ba:	8f 70       	andi	r24, 0x0F	; 15
     4bc:	80 6a       	ori	r24, 0xA0	; 160
     4be:	8b b9       	out	0x0b, r24	; 11
	LEDs_SetAllLEDs(LEDMASK_USB_ENUMERATING);
}
     4c0:	08 95       	ret

000004c2 <EVENT_USB_Host_DeviceEnumerationFailed>:
 *  enumerating an attached USB device.
 */
void EVENT_USB_Host_DeviceEnumerationFailed(const uint8_t ErrorCode,
                                            const uint8_t SubErrorCode)
{
	printf_P(PSTR(ESC_FG_RED "Dev Enum Error\r\n"
     4c2:	90 91 23 05 	lds	r25, 0x0523
     4c6:	2d b7       	in	r18, 0x3d	; 61
     4c8:	3e b7       	in	r19, 0x3e	; 62
     4ca:	28 50       	subi	r18, 0x08	; 8
     4cc:	30 40       	sbci	r19, 0x00	; 0
     4ce:	0f b6       	in	r0, 0x3f	; 63
     4d0:	f8 94       	cli
     4d2:	3e bf       	out	0x3e, r19	; 62
     4d4:	0f be       	out	0x3f, r0	; 63
     4d6:	2d bf       	out	0x3d, r18	; 61
     4d8:	ed b7       	in	r30, 0x3d	; 61
     4da:	fe b7       	in	r31, 0x3e	; 62
     4dc:	31 96       	adiw	r30, 0x01	; 1
     4de:	2b e1       	ldi	r18, 0x1B	; 27
     4e0:	32 e0       	ldi	r19, 0x02	; 2
     4e2:	ad b7       	in	r26, 0x3d	; 61
     4e4:	be b7       	in	r27, 0x3e	; 62
     4e6:	12 96       	adiw	r26, 0x02	; 2
     4e8:	3c 93       	st	X, r19
     4ea:	2e 93       	st	-X, r18
     4ec:	11 97       	sbiw	r26, 0x01	; 1
     4ee:	82 83       	std	Z+2, r24	; 0x02
     4f0:	13 82       	std	Z+3, r1	; 0x03
     4f2:	64 83       	std	Z+4, r22	; 0x04
     4f4:	15 82       	std	Z+5, r1	; 0x05
     4f6:	96 83       	std	Z+6, r25	; 0x06
     4f8:	17 82       	std	Z+7, r1	; 0x07
     4fa:	0e 94 6a 0f 	call	0x1ed4	; 0x1ed4 <printf_P>
     4fe:	8b b1       	in	r24, 0x0b	; 11
     500:	8f 70       	andi	r24, 0x0F	; 15
     502:	80 69       	ori	r24, 0x90	; 144
     504:	8b b9       	out	0x0b, r24	; 11
     506:	2d b7       	in	r18, 0x3d	; 61
     508:	3e b7       	in	r19, 0x3e	; 62
     50a:	28 5f       	subi	r18, 0xF8	; 248
     50c:	3f 4f       	sbci	r19, 0xFF	; 255
     50e:	0f b6       	in	r0, 0x3f	; 63
     510:	f8 94       	cli
     512:	3e bf       	out	0x3e, r19	; 62
     514:	0f be       	out	0x3f, r0	; 63
     516:	2d bf       	out	0x3d, r18	; 61
	                         " -- Error Code %d\r\n"
	                         " -- Sub Error Code %d\r\n"
	                         " -- In State %d\r\n" ESC_FG_WHITE), ErrorCode, SubErrorCode, USB_HostState);

	LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
}
     518:	08 95       	ret

0000051a <Mouse_HID_Task>:

/** Task to set the configuration of the attached device after it has been enumerated, and to read and process
 *  the HID report descriptor and HID reports from the device and display the results onto the board LEDs.
 */
void Mouse_HID_Task(void)
{
     51a:	af 92       	push	r10
     51c:	bf 92       	push	r11
     51e:	cf 92       	push	r12
     520:	df 92       	push	r13
     522:	ef 92       	push	r14
     524:	ff 92       	push	r15
     526:	0f 93       	push	r16
     528:	1f 93       	push	r17
     52a:	df 93       	push	r29
     52c:	cf 93       	push	r28
     52e:	cd b7       	in	r28, 0x3d	; 61
     530:	de b7       	in	r29, 0x3e	; 62

			/* Freeze mouse data pipe */
			Pipe_Freeze();
			break;
	}
}
     532:	cd b6       	in	r12, 0x3d	; 61
     534:	de b6       	in	r13, 0x3e	; 62
void Mouse_HID_Task(void)
{
	uint8_t ErrorCode;

	/* Switch to determine what user-application handled host state the host state machine is in */
	switch (USB_HostState)
     536:	80 91 23 05 	lds	r24, 0x0523
     53a:	8b 30       	cpi	r24, 0x0B	; 11
     53c:	21 f0       	breq	.+8      	; 0x546 <Mouse_HID_Task+0x2c>
     53e:	8c 30       	cpi	r24, 0x0C	; 12
     540:	09 f0       	breq	.+2      	; 0x544 <Mouse_HID_Task+0x2a>
     542:	4f c1       	rjmp	.+670    	; 0x7e2 <Mouse_HID_Task+0x2c8>
     544:	12 c1       	rjmp	.+548    	; 0x76a <Mouse_HID_Task+0x250>
	{
		case HOST_STATE_Addressed:
			puts_P(PSTR("Getting Config Data.\r\n"));
     546:	84 e0       	ldi	r24, 0x04	; 4
     548:	92 e0       	ldi	r25, 0x02	; 2
     54a:	0e 94 8c 0f 	call	0x1f18	; 0x1f18 <puts_P>

			/* Get and process the configuration descriptor data */
			if ((ErrorCode = ProcessConfigurationDescriptor()) != SuccessfulConfigRead)
     54e:	d7 d1       	rcall	.+942    	; 0x8fe <ProcessConfigurationDescriptor>
     550:	08 2f       	mov	r16, r24
     552:	88 23       	and	r24, r24
     554:	c1 f0       	breq	.+48     	; 0x586 <Mouse_HID_Task+0x6c>
			{
				if (ErrorCode == ControlError)
     556:	81 30       	cpi	r24, 0x01	; 1
     558:	19 f4       	brne	.+6      	; 0x560 <Mouse_HID_Task+0x46>
				  puts_P(PSTR(ESC_FG_RED "Control Error (Get Configuration).\r\n"));
     55a:	8a ed       	ldi	r24, 0xDA	; 218
     55c:	91 e0       	ldi	r25, 0x01	; 1
     55e:	02 c0       	rjmp	.+4      	; 0x564 <Mouse_HID_Task+0x4a>
				else
				  puts_P(PSTR(ESC_FG_RED "Invalid Device.\r\n"));
     560:	83 ec       	ldi	r24, 0xC3	; 195
     562:	91 e0       	ldi	r25, 0x01	; 1
     564:	0e 94 8c 0f 	call	0x1f18	; 0x1f18 <puts_P>

				printf_P(PSTR(" -- Error Code: %d\r\n" ESC_FG_WHITE), ErrorCode);
     568:	00 d0       	rcall	.+0      	; 0x56a <Mouse_HID_Task+0x50>
     56a:	00 d0       	rcall	.+0      	; 0x56c <Mouse_HID_Task+0x52>
     56c:	ed b7       	in	r30, 0x3d	; 61
     56e:	fe b7       	in	r31, 0x3e	; 62
     570:	31 96       	adiw	r30, 0x01	; 1
     572:	89 ea       	ldi	r24, 0xA9	; 169
     574:	91 e0       	ldi	r25, 0x01	; 1
     576:	ad b7       	in	r26, 0x3d	; 61
     578:	be b7       	in	r27, 0x3e	; 62
     57a:	12 96       	adiw	r26, 0x02	; 2
     57c:	9c 93       	st	X, r25
     57e:	8e 93       	st	-X, r24
     580:	11 97       	sbiw	r26, 0x01	; 1
     582:	02 83       	std	Z+2, r16	; 0x02
     584:	13 c0       	rjmp	.+38     	; 0x5ac <Mouse_HID_Task+0x92>
				USB_HostState = HOST_STATE_WaitForDeviceRemoval;
				break;
			}

			/* Set the device configuration to the first configuration (rarely do devices use multiple configurations) */
			if ((ErrorCode = USB_Host_SetDeviceConfiguration(1)) != HOST_SENDCONTROL_Successful)
     586:	81 e0       	ldi	r24, 0x01	; 1
     588:	52 d3       	rcall	.+1700   	; 0xc2e <USB_Host_SetDeviceConfiguration>
     58a:	28 2f       	mov	r18, r24
     58c:	88 23       	and	r24, r24
     58e:	e1 f0       	breq	.+56     	; 0x5c8 <Mouse_HID_Task+0xae>
			{
				printf_P(PSTR(ESC_FG_RED "Control Error (Set Configuration).\r\n"
     590:	00 d0       	rcall	.+0      	; 0x592 <Mouse_HID_Task+0x78>
     592:	00 d0       	rcall	.+0      	; 0x594 <Mouse_HID_Task+0x7a>
     594:	ed b7       	in	r30, 0x3d	; 61
     596:	fe b7       	in	r31, 0x3e	; 62
     598:	31 96       	adiw	r30, 0x01	; 1
     59a:	86 e6       	ldi	r24, 0x66	; 102
     59c:	91 e0       	ldi	r25, 0x01	; 1
     59e:	ad b7       	in	r26, 0x3d	; 61
     5a0:	be b7       	in	r27, 0x3e	; 62
     5a2:	12 96       	adiw	r26, 0x02	; 2
     5a4:	9c 93       	st	X, r25
     5a6:	8e 93       	st	-X, r24
     5a8:	11 97       	sbiw	r26, 0x01	; 1
     5aa:	22 83       	std	Z+2, r18	; 0x02
     5ac:	13 82       	std	Z+3, r1	; 0x03
     5ae:	0e 94 6a 0f 	call	0x1ed4	; 0x1ed4 <printf_P>
     5b2:	8b b1       	in	r24, 0x0b	; 11
     5b4:	8f 70       	andi	r24, 0x0F	; 15
     5b6:	80 69       	ori	r24, 0x90	; 144
     5b8:	8b b9       	out	0x0b, r24	; 11

				/* Indicate error via status LEDs */
				LEDs_SetAllLEDs(LEDMASK_USB_ERROR);

				/* Wait until USB device disconnected */
				USB_HostState = HOST_STATE_WaitForDeviceRemoval;
     5ba:	10 92 23 05 	sts	0x0523, r1
     5be:	0f 90       	pop	r0
     5c0:	0f 90       	pop	r0
     5c2:	0f 90       	pop	r0
     5c4:	0f 90       	pop	r0
     5c6:	0d c1       	rjmp	.+538    	; 0x7e2 <Mouse_HID_Task+0x2c8>
				break;
			}

			printf_P(PSTR("Processing HID Report (Size %d Bytes).\r\n"), HIDReportSize);
     5c8:	00 d0       	rcall	.+0      	; 0x5ca <Mouse_HID_Task+0xb0>
     5ca:	00 d0       	rcall	.+0      	; 0x5cc <Mouse_HID_Task+0xb2>
     5cc:	8d e3       	ldi	r24, 0x3D	; 61
     5ce:	91 e0       	ldi	r25, 0x01	; 1
     5d0:	ed b7       	in	r30, 0x3d	; 61
     5d2:	fe b7       	in	r31, 0x3e	; 62
     5d4:	92 83       	std	Z+2, r25	; 0x02
     5d6:	81 83       	std	Z+1, r24	; 0x01
     5d8:	80 91 18 05 	lds	r24, 0x0518
     5dc:	90 91 19 05 	lds	r25, 0x0519
     5e0:	94 83       	std	Z+4, r25	; 0x04
     5e2:	83 83       	std	Z+3, r24	; 0x03
     5e4:	0e 94 6a 0f 	call	0x1ed4	; 0x1ed4 <printf_P>

			/* Get and process the device's first HID report descriptor */
			if ((ErrorCode = GetHIDReportData()) != ParseSuccessful)
     5e8:	0f 90       	pop	r0
     5ea:	0f 90       	pop	r0
     5ec:	0f 90       	pop	r0
     5ee:	0f 90       	pop	r0
     5f0:	38 d2       	rcall	.+1136   	; 0xa62 <GetHIDReportData>
     5f2:	08 2f       	mov	r16, r24
     5f4:	88 23       	and	r24, r24
     5f6:	49 f1       	breq	.+82     	; 0x64a <Mouse_HID_Task+0x130>
			{
				puts_P(PSTR(ESC_FG_RED "Report Parse Error.\r\n"));
     5f8:	82 e2       	ldi	r24, 0x22	; 34
     5fa:	91 e0       	ldi	r25, 0x01	; 1
     5fc:	0e 94 8c 0f 	call	0x1f18	; 0x1f18 <puts_P>

				if (!(HIDReportInfo.TotalReportItems))
     600:	80 91 3f 01 	lds	r24, 0x013F
     604:	88 23       	and	r24, r24
     606:	29 f4       	brne	.+10     	; 0x612 <Mouse_HID_Task+0xf8>
					puts_P(PSTR("Not a valid Mouse." ESC_FG_WHITE));
     608:	8a e0       	ldi	r24, 0x0A	; 10
     60a:	91 e0       	ldi	r25, 0x01	; 1
     60c:	0e 94 8c 0f 	call	0x1f18	; 0x1f18 <puts_P>
     610:	15 c0       	rjmp	.+42     	; 0x63c <Mouse_HID_Task+0x122>
				else
					printf_P(PSTR(" -- Error Code: %d\r\n" ESC_FG_WHITE), ErrorCode);
     612:	00 d0       	rcall	.+0      	; 0x614 <Mouse_HID_Task+0xfa>
     614:	00 d0       	rcall	.+0      	; 0x616 <Mouse_HID_Task+0xfc>
     616:	ed b7       	in	r30, 0x3d	; 61
     618:	fe b7       	in	r31, 0x3e	; 62
     61a:	31 96       	adiw	r30, 0x01	; 1
     61c:	80 ef       	ldi	r24, 0xF0	; 240
     61e:	90 e0       	ldi	r25, 0x00	; 0
     620:	ad b7       	in	r26, 0x3d	; 61
     622:	be b7       	in	r27, 0x3e	; 62
     624:	12 96       	adiw	r26, 0x02	; 2
     626:	9c 93       	st	X, r25
     628:	8e 93       	st	-X, r24
     62a:	11 97       	sbiw	r26, 0x01	; 1
     62c:	02 83       	std	Z+2, r16	; 0x02
     62e:	13 82       	std	Z+3, r1	; 0x03
     630:	0e 94 6a 0f 	call	0x1ed4	; 0x1ed4 <printf_P>
     634:	0f 90       	pop	r0
     636:	0f 90       	pop	r0
     638:	0f 90       	pop	r0
     63a:	0f 90       	pop	r0
     63c:	8b b1       	in	r24, 0x0b	; 11
     63e:	8f 70       	andi	r24, 0x0F	; 15
     640:	80 69       	ori	r24, 0x90	; 144
     642:	8b b9       	out	0x0b, r24	; 11

				/* Indicate error via status LEDs */
				LEDs_SetAllLEDs(LEDMASK_USB_ERROR);

				/* Wait until USB device disconnected */
				USB_HostState = HOST_STATE_WaitForDeviceRemoval;
     644:	10 92 23 05 	sts	0x0523, r1
     648:	cc c0       	rjmp	.+408    	; 0x7e2 <Mouse_HID_Task+0x2c8>
				break;
			}

			printf("Total Reports: %d\r\n", HIDReportInfo.TotalDeviceReports);
     64a:	00 d0       	rcall	.+0      	; 0x64c <Mouse_HID_Task+0x132>
     64c:	00 d0       	rcall	.+0      	; 0x64e <Mouse_HID_Task+0x134>
     64e:	ed b7       	in	r30, 0x3d	; 61
     650:	fe b7       	in	r31, 0x3e	; 62
     652:	31 96       	adiw	r30, 0x01	; 1
     654:	80 e0       	ldi	r24, 0x00	; 0
     656:	91 e0       	ldi	r25, 0x01	; 1
     658:	ad b7       	in	r26, 0x3d	; 61
     65a:	be b7       	in	r27, 0x3e	; 62
     65c:	12 96       	adiw	r26, 0x02	; 2
     65e:	9c 93       	st	X, r25
     660:	8e 93       	st	-X, r24
     662:	11 97       	sbiw	r26, 0x01	; 1
     664:	80 91 ce 04 	lds	r24, 0x04CE
     668:	82 83       	std	Z+2, r24	; 0x02
     66a:	13 82       	std	Z+3, r1	; 0x03
     66c:	0e 94 59 0f 	call	0x1eb2	; 0x1eb2 <printf>
     670:	00 e0       	ldi	r16, 0x00	; 0
     672:	0f 90       	pop	r0
     674:	0f 90       	pop	r0
     676:	0f 90       	pop	r0
     678:	0f 90       	pop	r0

			for (uint8_t i = 0; i < HIDReportInfo.TotalDeviceReports; i++)
			{
				HID_ReportSizeInfo_t* CurrReportIDInfo = &HIDReportInfo.ReportIDSizes[i];
     67a:	17 e0       	ldi	r17, 0x07	; 7
				uint8_t ReportSizeInBits      = CurrReportIDInfo->ReportSizeBits[HID_REPORT_ITEM_In];
				uint8_t ReportSizeOutBits     = CurrReportIDInfo->ReportSizeBits[HID_REPORT_ITEM_Out];
				uint8_t ReportSizeFeatureBits = CurrReportIDInfo->ReportSizeBits[HID_REPORT_ITEM_Feature];

				/* Print out the byte sizes of each report within the device */
				printf_P(PSTR("  + Report ID %d - In: %d bytes, Out: %d bytes, Feature: %d bytes\r\n"),
     67c:	2c ea       	ldi	r18, 0xAC	; 172
     67e:	e2 2e       	mov	r14, r18
     680:	20 e0       	ldi	r18, 0x00	; 0
     682:	f2 2e       	mov	r15, r18
     684:	65 c0       	rjmp	.+202    	; 0x750 <Mouse_HID_Task+0x236>

			printf("Total Reports: %d\r\n", HIDReportInfo.TotalDeviceReports);

			for (uint8_t i = 0; i < HIDReportInfo.TotalDeviceReports; i++)
			{
				HID_ReportSizeInfo_t* CurrReportIDInfo = &HIDReportInfo.ReportIDSizes[i];
     686:	01 9f       	mul	r16, r17
     688:	f0 01       	movw	r30, r0
     68a:	11 24       	eor	r1, r1
     68c:	e1 53       	subi	r30, 0x31	; 49
     68e:	fb 4f       	sbci	r31, 0xFB	; 251

				uint8_t ReportSizeInBits      = CurrReportIDInfo->ReportSizeBits[HID_REPORT_ITEM_In];
     690:	41 81       	ldd	r20, Z+1	; 0x01
				uint8_t ReportSizeOutBits     = CurrReportIDInfo->ReportSizeBits[HID_REPORT_ITEM_Out];
     692:	53 81       	ldd	r21, Z+3	; 0x03
				uint8_t ReportSizeFeatureBits = CurrReportIDInfo->ReportSizeBits[HID_REPORT_ITEM_Feature];
     694:	65 81       	ldd	r22, Z+5	; 0x05

				/* Print out the byte sizes of each report within the device */
				printf_P(PSTR("  + Report ID %d - In: %d bytes, Out: %d bytes, Feature: %d bytes\r\n"),
     696:	2d b7       	in	r18, 0x3d	; 61
     698:	3e b7       	in	r19, 0x3e	; 62
     69a:	2a 50       	subi	r18, 0x0A	; 10
     69c:	30 40       	sbci	r19, 0x00	; 0
     69e:	0f b6       	in	r0, 0x3f	; 63
     6a0:	f8 94       	cli
     6a2:	3e bf       	out	0x3e, r19	; 62
     6a4:	0f be       	out	0x3f, r0	; 63
     6a6:	2d bf       	out	0x3d, r18	; 61
     6a8:	ad b6       	in	r10, 0x3d	; 61
     6aa:	be b6       	in	r11, 0x3e	; 62
     6ac:	08 94       	sec
     6ae:	a1 1c       	adc	r10, r1
     6b0:	b1 1c       	adc	r11, r1
     6b2:	ad b7       	in	r26, 0x3d	; 61
     6b4:	be b7       	in	r27, 0x3e	; 62
     6b6:	12 96       	adiw	r26, 0x02	; 2
     6b8:	fc 92       	st	X, r15
     6ba:	ee 92       	st	-X, r14
     6bc:	11 97       	sbiw	r26, 0x01	; 1
     6be:	80 81       	ld	r24, Z
     6c0:	f5 01       	movw	r30, r10
     6c2:	82 83       	std	Z+2, r24	; 0x02
     6c4:	13 82       	std	Z+3, r1	; 0x03
     6c6:	20 e0       	ldi	r18, 0x00	; 0
     6c8:	30 e0       	ldi	r19, 0x00	; 0
     6ca:	84 2f       	mov	r24, r20
     6cc:	90 e0       	ldi	r25, 0x00	; 0
     6ce:	87 70       	andi	r24, 0x07	; 7
     6d0:	90 70       	andi	r25, 0x00	; 0
     6d2:	89 2b       	or	r24, r25
     6d4:	11 f0       	breq	.+4      	; 0x6da <Mouse_HID_Task+0x1c0>
     6d6:	21 e0       	ldi	r18, 0x01	; 1
     6d8:	30 e0       	ldi	r19, 0x00	; 0
     6da:	46 95       	lsr	r20
     6dc:	46 95       	lsr	r20
     6de:	46 95       	lsr	r20
     6e0:	24 0f       	add	r18, r20
     6e2:	31 1d       	adc	r19, r1
     6e4:	d5 01       	movw	r26, r10
     6e6:	15 96       	adiw	r26, 0x05	; 5
     6e8:	3c 93       	st	X, r19
     6ea:	2e 93       	st	-X, r18
     6ec:	14 97       	sbiw	r26, 0x04	; 4
     6ee:	20 e0       	ldi	r18, 0x00	; 0
     6f0:	30 e0       	ldi	r19, 0x00	; 0
     6f2:	85 2f       	mov	r24, r21
     6f4:	90 e0       	ldi	r25, 0x00	; 0
     6f6:	87 70       	andi	r24, 0x07	; 7
     6f8:	90 70       	andi	r25, 0x00	; 0
     6fa:	89 2b       	or	r24, r25
     6fc:	11 f0       	breq	.+4      	; 0x702 <Mouse_HID_Task+0x1e8>
     6fe:	21 e0       	ldi	r18, 0x01	; 1
     700:	30 e0       	ldi	r19, 0x00	; 0
     702:	56 95       	lsr	r21
     704:	56 95       	lsr	r21
     706:	56 95       	lsr	r21
     708:	25 0f       	add	r18, r21
     70a:	31 1d       	adc	r19, r1
     70c:	f5 01       	movw	r30, r10
     70e:	37 83       	std	Z+7, r19	; 0x07
     710:	26 83       	std	Z+6, r18	; 0x06
     712:	20 e0       	ldi	r18, 0x00	; 0
     714:	30 e0       	ldi	r19, 0x00	; 0
     716:	86 2f       	mov	r24, r22
     718:	90 e0       	ldi	r25, 0x00	; 0
     71a:	87 70       	andi	r24, 0x07	; 7
     71c:	90 70       	andi	r25, 0x00	; 0
     71e:	89 2b       	or	r24, r25
     720:	11 f0       	breq	.+4      	; 0x726 <Mouse_HID_Task+0x20c>
     722:	21 e0       	ldi	r18, 0x01	; 1
     724:	30 e0       	ldi	r19, 0x00	; 0
     726:	66 95       	lsr	r22
     728:	66 95       	lsr	r22
     72a:	66 95       	lsr	r22
     72c:	26 0f       	add	r18, r22
     72e:	31 1d       	adc	r19, r1
     730:	d5 01       	movw	r26, r10
     732:	19 96       	adiw	r26, 0x09	; 9
     734:	3c 93       	st	X, r19
     736:	2e 93       	st	-X, r18
     738:	18 97       	sbiw	r26, 0x08	; 8
     73a:	0e 94 6a 0f 	call	0x1ed4	; 0x1ed4 <printf_P>
				break;
			}

			printf("Total Reports: %d\r\n", HIDReportInfo.TotalDeviceReports);

			for (uint8_t i = 0; i < HIDReportInfo.TotalDeviceReports; i++)
     73e:	0f 5f       	subi	r16, 0xFF	; 255
     740:	ed b7       	in	r30, 0x3d	; 61
     742:	fe b7       	in	r31, 0x3e	; 62
     744:	3a 96       	adiw	r30, 0x0a	; 10
     746:	0f b6       	in	r0, 0x3f	; 63
     748:	f8 94       	cli
     74a:	fe bf       	out	0x3e, r31	; 62
     74c:	0f be       	out	0x3f, r0	; 63
     74e:	ed bf       	out	0x3d, r30	; 61
     750:	80 91 ce 04 	lds	r24, 0x04CE
     754:	08 17       	cp	r16, r24
     756:	08 f4       	brcc	.+2      	; 0x75a <Mouse_HID_Task+0x240>
     758:	96 cf       	rjmp	.-212    	; 0x686 <Mouse_HID_Task+0x16c>
				         ((ReportSizeInBits      >> 3) + ((ReportSizeInBits      & 0x07) != 0)),
				         ((ReportSizeOutBits     >> 3) + ((ReportSizeOutBits     & 0x07) != 0)),
				         ((ReportSizeFeatureBits >> 3) + ((ReportSizeFeatureBits & 0x07) != 0)));
			}

			puts_P(PSTR("Mouse Enumerated.\r\n"));
     75a:	88 e9       	ldi	r24, 0x98	; 152
     75c:	90 e0       	ldi	r25, 0x00	; 0
     75e:	0e 94 8c 0f 	call	0x1f18	; 0x1f18 <puts_P>

			USB_HostState = HOST_STATE_Configured;
     762:	8c e0       	ldi	r24, 0x0C	; 12
     764:	80 93 23 05 	sts	0x0523, r24
     768:	3c c0       	rjmp	.+120    	; 0x7e2 <Mouse_HID_Task+0x2c8>
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
     76a:	81 e0       	ldi	r24, 0x01	; 1
     76c:	80 93 a7 00 	sts	0x00A7, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
     770:	80 91 a9 00 	lds	r24, 0x00A9
     774:	8f 7b       	andi	r24, 0xBF	; 191
     776:	80 93 a9 00 	sts	0x00A9, r24
			 *  \return Boolean true if the current pipe has received an IN packet, false otherwise.
			 */
			static inline bool Pipe_IsINReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsINReceived(void)
			{
				return ((UPINTX & (1 << RXINI)) ? true : false);
     77a:	80 91 a6 00 	lds	r24, 0x00A6
			/* Select and unfreeze mouse data pipe */
			Pipe_SelectPipe(MOUSE_DATA_IN_PIPE);
			Pipe_Unfreeze();

			/* Check to see if a packet has been received */
			if (Pipe_IsINReceived())
     77e:	80 ff       	sbrs	r24, 0
     780:	2b c0       	rjmp	.+86     	; 0x7d8 <Mouse_HID_Task+0x2be>
			 *  \return Boolean true if the currently selected pipe may be read from or written to, depending on its direction.
			 */
			static inline bool Pipe_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsReadWriteAllowed(void)
			{
				return ((UPINTX & (1 << RWAL)) ? true : false);
     782:	80 91 a6 00 	lds	r24, 0x00A6
			{
				/* Check if data has been received from the attached mouse */
				if (Pipe_IsReadWriteAllowed())
     786:	85 ff       	sbrs	r24, 5
     788:	22 c0       	rjmp	.+68     	; 0x7ce <Mouse_HID_Task+0x2b4>
     78a:	ee b6       	in	r14, 0x3e	; 62
			 *  \return Total number of bytes in the currently selected Pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
     78c:	80 91 f6 00 	lds	r24, 0x00F6
     790:	90 91 f7 00 	lds	r25, 0x00F7
				{
					/* Create buffer big enough for the report */
					uint8_t MouseReport[Pipe_BytesInPipe()];
     794:	2d b7       	in	r18, 0x3d	; 61
     796:	3e b7       	in	r19, 0x3e	; 62
     798:	28 1b       	sub	r18, r24
     79a:	39 0b       	sbc	r19, r25
     79c:	0f b6       	in	r0, 0x3f	; 63
     79e:	f8 94       	cli
     7a0:	3e bf       	out	0x3e, r19	; 62
     7a2:	0f be       	out	0x3f, r0	; 63
     7a4:	2d bf       	out	0x3d, r18	; 61
     7a6:	0d b7       	in	r16, 0x3d	; 61
     7a8:	1e b7       	in	r17, 0x3e	; 62
     7aa:	0f 5f       	subi	r16, 0xFF	; 255
     7ac:	1f 4f       	sbci	r17, 0xFF	; 255
     7ae:	60 91 f6 00 	lds	r22, 0x00F6
     7b2:	70 91 f7 00 	lds	r23, 0x00F7

					/* Load in the mouse report */
					Pipe_Read_Stream_LE(MouseReport, Pipe_BytesInPipe());
     7b6:	c8 01       	movw	r24, r16
     7b8:	cb d6       	rcall	.+3478   	; 0x1550 <Pipe_Read_Stream_LE>

					/* Process the read in mouse report from the device */
					ProcessMouseReport(MouseReport);
     7ba:	c8 01       	movw	r24, r16
     7bc:	cb dd       	rcall	.-1130   	; 0x354 <ProcessMouseReport>
     7be:	2c 2d       	mov	r18, r12
     7c0:	3e 2d       	mov	r19, r14
     7c2:	c9 01       	movw	r24, r18
     7c4:	0f b6       	in	r0, 0x3f	; 63
     7c6:	f8 94       	cli
     7c8:	9e bf       	out	0x3e, r25	; 62
     7ca:	0f be       	out	0x3f, r0	; 63
     7cc:	8d bf       	out	0x3d, r24	; 61
			 *  \ingroup Group_PipePacketManagement
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
     7ce:	80 91 a6 00 	lds	r24, 0x00A6
     7d2:	8e 77       	andi	r24, 0x7E	; 126
     7d4:	80 93 a6 00 	sts	0x00A6, r24

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
     7d8:	80 91 a9 00 	lds	r24, 0x00A9
     7dc:	80 64       	ori	r24, 0x40	; 64
     7de:	80 93 a9 00 	sts	0x00A9, r24

			/* Freeze mouse data pipe */
			Pipe_Freeze();
			break;
	}
}
     7e2:	0f b6       	in	r0, 0x3f	; 63
     7e4:	f8 94       	cli
     7e6:	de be       	out	0x3e, r13	; 62
     7e8:	0f be       	out	0x3f, r0	; 63
     7ea:	cd be       	out	0x3d, r12	; 61
     7ec:	cf 91       	pop	r28
     7ee:	df 91       	pop	r29
     7f0:	1f 91       	pop	r17
     7f2:	0f 91       	pop	r16
     7f4:	ff 90       	pop	r15
     7f6:	ef 90       	pop	r14
     7f8:	df 90       	pop	r13
     7fa:	cf 90       	pop	r12
     7fc:	bf 90       	pop	r11
     7fe:	af 90       	pop	r10
     800:	08 95       	ret

00000802 <EVENT_USB_Host_HostError>:
	LEDs_SetAllLEDs(LEDMASK_USB_READY);
}

/** Event handler for the USB_HostError event. This indicates that a hardware error occurred while in host mode. */
void EVENT_USB_Host_HostError(const uint8_t ErrorCode)
{
     802:	1f 93       	push	r17
     804:	18 2f       	mov	r17, r24
	USB_ShutDown();
     806:	25 d4       	rcall	.+2122   	; 0x1052 <USB_ShutDown>

	printf_P(PSTR(ESC_FG_RED "Host Mode Error\r\n"
     808:	00 d0       	rcall	.+0      	; 0x80a <EVENT_USB_Host_HostError+0x8>
     80a:	00 d0       	rcall	.+0      	; 0x80c <EVENT_USB_Host_HostError+0xa>
     80c:	ed b7       	in	r30, 0x3d	; 61
     80e:	fe b7       	in	r31, 0x3e	; 62
     810:	31 96       	adiw	r30, 0x01	; 1
     812:	81 e7       	ldi	r24, 0x71	; 113
     814:	92 e0       	ldi	r25, 0x02	; 2
     816:	ad b7       	in	r26, 0x3d	; 61
     818:	be b7       	in	r27, 0x3e	; 62
     81a:	12 96       	adiw	r26, 0x02	; 2
     81c:	9c 93       	st	X, r25
     81e:	8e 93       	st	-X, r24
     820:	11 97       	sbiw	r26, 0x01	; 1
     822:	12 83       	std	Z+2, r17	; 0x02
     824:	13 82       	std	Z+3, r1	; 0x03
     826:	0e 94 6a 0f 	call	0x1ed4	; 0x1ed4 <printf_P>
     82a:	8b b1       	in	r24, 0x0b	; 11
     82c:	8f 70       	andi	r24, 0x0F	; 15
     82e:	80 69       	ori	r24, 0x90	; 144
     830:	8b b9       	out	0x0b, r24	; 11
     832:	0f 90       	pop	r0
     834:	0f 90       	pop	r0
     836:	0f 90       	pop	r0
     838:	0f 90       	pop	r0
     83a:	ff cf       	rjmp	.-2      	; 0x83a <EVENT_USB_Host_HostError+0x38>

0000083c <SetupHardware>:

/** Configures the board hardware and chip peripherals for the demo's functionality. */
void SetupHardware(void)
{
	/* Disable watchdog if enabled by bootloader/fuses */
	MCUSR &= ~(1 << WDRF);
     83c:	84 b7       	in	r24, 0x34	; 52
     83e:	87 7f       	andi	r24, 0xF7	; 247
     840:	84 bf       	out	0x34, r24	; 52
	wdt_disable();
     842:	38 e1       	ldi	r19, 0x18	; 24
     844:	0f b6       	in	r0, 0x3f	; 63
     846:	f8 94       	cli
     848:	30 93 60 00 	sts	0x0060, r19
     84c:	10 92 60 00 	sts	0x0060, r1
     850:	0f be       	out	0x3f, r0	; 63

	/* Disable clock division */
	clock_prescale_set(clock_div_1);
     852:	80 e0       	ldi	r24, 0x00	; 0
     854:	90 e0       	ldi	r25, 0x00	; 0
     856:	20 e8       	ldi	r18, 0x80	; 128
     858:	0f b6       	in	r0, 0x3f	; 63
     85a:	f8 94       	cli
     85c:	20 93 61 00 	sts	0x0061, r18
     860:	80 93 61 00 	sts	0x0061, r24
     864:	0f be       	out	0x3f, r0	; 63
			 *  \param[in] DoubleSpeed  Enables double speed mode when set, halving the sample time to double the baud rate.
			 */
			static inline void Serial_Init(const uint32_t BaudRate,
			                               const bool DoubleSpeed)
			{
				UBRR1  = (DoubleSpeed ? SERIAL_2X_UBBRVAL(BaudRate) : SERIAL_UBBRVAL(BaudRate));
     866:	83 e3       	ldi	r24, 0x33	; 51
     868:	90 e0       	ldi	r25, 0x00	; 0
     86a:	90 93 cd 00 	sts	0x00CD, r25
     86e:	80 93 cc 00 	sts	0x00CC, r24

				UCSR1C = ((1 << UCSZ11) | (1 << UCSZ10));
     872:	86 e0       	ldi	r24, 0x06	; 6
     874:	80 93 ca 00 	sts	0x00CA, r24
				UCSR1A = (DoubleSpeed ? (1 << U2X1) : 0);
     878:	10 92 c8 00 	sts	0x00C8, r1
				UCSR1B = ((1 << TXEN1)  | (1 << RXEN1));
     87c:	30 93 c9 00 	sts	0x00C9, r19

				DDRD  |= (1 << 3);
     880:	53 9a       	sbi	0x0a, 3	; 10
				PORTD |= (1 << 2);
     882:	5a 9a       	sbi	0x0b, 2	; 11
			static inline void SerialStream_Init(const uint32_t BaudRate,
			                                     const bool DoubleSpeed)
			{
				Serial_Init(BaudRate, DoubleSpeed);

				stdout = &USARTStream;
     884:	8d e2       	ldi	r24, 0x2D	; 45
     886:	91 e0       	ldi	r25, 0x01	; 1
     888:	90 93 27 05 	sts	0x0527, r25
     88c:	80 93 26 05 	sts	0x0526, r24
				stdin  = &USARTStream;
     890:	90 93 25 05 	sts	0x0525, r25
     894:	80 93 24 05 	sts	0x0524, r24

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void LEDs_Init(void)
			{
				DDRD  |=  LEDS_ALL_LEDS;
     898:	8a b1       	in	r24, 0x0a	; 10
     89a:	80 6f       	ori	r24, 0xF0	; 240
     89c:	8a b9       	out	0x0a, r24	; 10
				PORTD &= ~LEDS_ALL_LEDS;
     89e:	8b b1       	in	r24, 0x0b	; 11
     8a0:	8f 70       	andi	r24, 0x0F	; 15
     8a2:	8b b9       	out	0x0b, r24	; 11

	/* Hardware Initialization */
	SerialStream_Init(9600, false);
	LEDs_Init();
	USB_Init();
}
     8a4:	cd c3       	rjmp	.+1946   	; 0x1040 <USB_Init>

000008a6 <main>:
/** Main program entry point. This routine configures the hardware required by the application, then
 *  enters a loop to run the application tasks in sequence.
 */
int main(void)
{
	SetupHardware();
     8a6:	ca df       	rcall	.-108    	; 0x83c <SetupHardware>

	puts_P(PSTR(ESC_FG_CYAN "Mouse HID Parser Host Demo running.\r\n" ESC_FG_WHITE));
     8a8:	8c ed       	ldi	r24, 0xDC	; 220
     8aa:	92 e0       	ldi	r25, 0x02	; 2
     8ac:	0e 94 8c 0f 	call	0x1f18	; 0x1f18 <puts_P>
				PORTD &= ~LEDMask;
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
			{
				PORTD = ((PORTD & ~LEDS_ALL_LEDS) | LEDMask);
     8b0:	8b b1       	in	r24, 0x0b	; 11
     8b2:	8f 70       	andi	r24, 0x0F	; 15
     8b4:	80 61       	ori	r24, 0x10	; 16
     8b6:	8b b9       	out	0x0b, r24	; 11

	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
	sei();
     8b8:	78 94       	sei

	for (;;)
	{
		Mouse_HID_Task();
     8ba:	2f de       	rcall	.-930    	; 0x51a <Mouse_HID_Task>
		USB_USBTask();
     8bc:	7c d6       	rcall	.+3320   	; 0x15b6 <USB_USBTask>
     8be:	fd cf       	rjmp	.-6      	; 0x8ba <main+0x14>

000008c0 <DComp_NextMouseInterface>:
 *  This comparator searches for the next Interface descriptor of the correct Mouse HID Class and Protocol values.
 *
 *  \return A value from the DSEARCH_Return_ErrorCodes_t enum
 */
uint8_t DComp_NextMouseInterface(void* CurrentDescriptor)
{
     8c0:	fc 01       	movw	r30, r24
	USB_Descriptor_Header_t* Header = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Header_t);

	if (Header->Type == DTYPE_Interface)
     8c2:	81 81       	ldd	r24, Z+1	; 0x01
     8c4:	84 30       	cpi	r24, 0x04	; 4
     8c6:	29 f4       	brne	.+10     	; 0x8d2 <DComp_NextMouseInterface+0x12>
	{
		USB_Descriptor_Interface_t* Interface = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Interface_t);

		/* Check the HID descriptor class, break out if correct class interface found */
		if (Interface->Class == HID_CSCP_HIDClass)
     8c8:	85 81       	ldd	r24, Z+5	; 0x05
     8ca:	83 30       	cpi	r24, 0x03	; 3
     8cc:	11 f4       	brne	.+4      	; 0x8d2 <DComp_NextMouseInterface+0x12>
     8ce:	80 e0       	ldi	r24, 0x00	; 0
     8d0:	08 95       	ret
     8d2:	82 e0       	ldi	r24, 0x02	; 2
			return DESCRIPTOR_SEARCH_Found;
		}
	}

	return DESCRIPTOR_SEARCH_NotFound;
}
     8d4:	08 95       	ret

000008d6 <DComp_NextMouseInterfaceDataEndpoint>:
 */
uint8_t DComp_NextMouseInterfaceDataEndpoint(void* CurrentDescriptor)
{
	USB_Descriptor_Header_t* Header = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Header_t);

	if (Header->Type == DTYPE_Endpoint)
     8d6:	fc 01       	movw	r30, r24
     8d8:	81 81       	ldd	r24, Z+1	; 0x01
     8da:	85 30       	cpi	r24, 0x05	; 5
     8dc:	11 f4       	brne	.+4      	; 0x8e2 <DComp_NextMouseInterfaceDataEndpoint+0xc>
     8de:	80 e0       	ldi	r24, 0x00	; 0
     8e0:	08 95       	ret
	  return DESCRIPTOR_SEARCH_Found;
	else if (Header->Type == DTYPE_Interface)
     8e2:	84 30       	cpi	r24, 0x04	; 4
     8e4:	11 f0       	breq	.+4      	; 0x8ea <DComp_NextMouseInterfaceDataEndpoint+0x14>
     8e6:	82 e0       	ldi	r24, 0x02	; 2
     8e8:	08 95       	ret
     8ea:	81 e0       	ldi	r24, 0x01	; 1
	  return DESCRIPTOR_SEARCH_Fail;
	else
	  return DESCRIPTOR_SEARCH_NotFound;
}
     8ec:	08 95       	ret

000008ee <DComp_NextHID>:
 */
uint8_t DComp_NextHID(void* CurrentDescriptor)
{
	USB_Descriptor_Header_t* Header = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Header_t);

	if (Header->Type == HID_DTYPE_HID)
     8ee:	fc 01       	movw	r30, r24
     8f0:	81 81       	ldd	r24, Z+1	; 0x01
     8f2:	81 32       	cpi	r24, 0x21	; 33
     8f4:	11 f0       	breq	.+4      	; 0x8fa <DComp_NextHID+0xc>
     8f6:	82 e0       	ldi	r24, 0x02	; 2
     8f8:	08 95       	ret
     8fa:	80 e0       	ldi	r24, 0x00	; 0
	  return DESCRIPTOR_SEARCH_Found;
	else
	  return DESCRIPTOR_SEARCH_NotFound;
}
     8fc:	08 95       	ret

000008fe <ProcessConfigurationDescriptor>:
 *  This routine searches for a HID interface descriptor containing at least one Interrupt type IN endpoint and HID descriptor.
 *
 *  \return An error code from the \ref MouseHostWithParser_GetConfigDescriptorDataCodes_t enum.
 */
uint8_t ProcessConfigurationDescriptor(void)
{
     8fe:	8f 92       	push	r8
     900:	9f 92       	push	r9
     902:	af 92       	push	r10
     904:	bf 92       	push	r11
     906:	cf 92       	push	r12
     908:	df 92       	push	r13
     90a:	ef 92       	push	r14
     90c:	ff 92       	push	r15
     90e:	0f 93       	push	r16
     910:	1f 93       	push	r17
     912:	df 93       	push	r29
     914:	cf 93       	push	r28
     916:	cd b7       	in	r28, 0x3d	; 61
     918:	de b7       	in	r29, 0x3e	; 62
     91a:	c4 50       	subi	r28, 0x04	; 4
     91c:	d2 40       	sbci	r29, 0x02	; 2
     91e:	0f b6       	in	r0, 0x3f	; 63
     920:	f8 94       	cli
     922:	de bf       	out	0x3e, r29	; 62
     924:	0f be       	out	0x3f, r0	; 63
     926:	cd bf       	out	0x3d, r28	; 61
	uint8_t  ConfigDescriptorData[512];
	void*    CurrConfigLocation = ConfigDescriptorData;
     928:	ae 01       	movw	r20, r28
     92a:	4b 5f       	subi	r20, 0xFB	; 251
     92c:	5f 4f       	sbci	r21, 0xFF	; 255
     92e:	5a 83       	std	Y+2, r21	; 0x02
     930:	49 83       	std	Y+1, r20	; 0x01
	USB_Descriptor_Interface_t* HIDInterface   = NULL;
	USB_HID_Descriptor_HID_t*   HIDDescriptor  = NULL;
	USB_Descriptor_Endpoint_t*  DataINEndpoint = NULL;

	/* Retrieve the entire configuration descriptor into the allocated buffer */
	switch (USB_Host_GetDeviceConfigDescriptor(1, &CurrConfigBytesRem, ConfigDescriptorData, sizeof(ConfigDescriptorData)))
     932:	83 e0       	ldi	r24, 0x03	; 3
     934:	c8 2e       	mov	r12, r24
     936:	d1 2c       	mov	r13, r1
     938:	cc 0e       	add	r12, r28
     93a:	dd 1e       	adc	r13, r29
     93c:	81 e0       	ldi	r24, 0x01	; 1
     93e:	b6 01       	movw	r22, r12
     940:	20 e0       	ldi	r18, 0x00	; 0
     942:	32 e0       	ldi	r19, 0x02	; 2
     944:	7f d4       	rcall	.+2302   	; 0x1244 <USB_Host_GetDeviceConfigDescriptor>
     946:	85 30       	cpi	r24, 0x05	; 5
     948:	29 f0       	breq	.+10     	; 0x954 <ProcessConfigurationDescriptor+0x56>
     94a:	86 30       	cpi	r24, 0x06	; 6
     94c:	79 f0       	breq	.+30     	; 0x96c <ProcessConfigurationDescriptor+0x6e>
     94e:	88 23       	and	r24, r24
     950:	19 f0       	breq	.+6      	; 0x958 <ProcessConfigurationDescriptor+0x5a>
     952:	0e c0       	rjmp	.+28     	; 0x970 <ProcessConfigurationDescriptor+0x72>
     954:	82 e0       	ldi	r24, 0x02	; 2
     956:	4d c0       	rjmp	.+154    	; 0x9f2 <ProcessConfigurationDescriptor+0xf4>
     958:	00 e0       	ldi	r16, 0x00	; 0
     95a:	10 e0       	ldi	r17, 0x00	; 0
     95c:	88 24       	eor	r8, r8
     95e:	99 24       	eor	r9, r9
	}

	while (!(DataINEndpoint))
	{
		/* See if we've found a likely compatible interface, and if there is an endpoint within that interface */
		if (!(HIDInterface) ||
     960:	56 01       	movw	r10, r12
     962:	7e 01       	movw	r14, r28
     964:	08 94       	sec
     966:	e1 1c       	adc	r14, r1
     968:	f1 1c       	adc	r15, r1
     96a:	04 c0       	rjmp	.+8      	; 0x974 <ProcessConfigurationDescriptor+0x76>
	USB_Descriptor_Interface_t* HIDInterface   = NULL;
	USB_HID_Descriptor_HID_t*   HIDDescriptor  = NULL;
	USB_Descriptor_Endpoint_t*  DataINEndpoint = NULL;

	/* Retrieve the entire configuration descriptor into the allocated buffer */
	switch (USB_Host_GetDeviceConfigDescriptor(1, &CurrConfigBytesRem, ConfigDescriptorData, sizeof(ConfigDescriptorData)))
     96c:	83 e0       	ldi	r24, 0x03	; 3
     96e:	41 c0       	rjmp	.+130    	; 0x9f2 <ProcessConfigurationDescriptor+0xf4>
     970:	81 e0       	ldi	r24, 0x01	; 1
     972:	3f c0       	rjmp	.+126    	; 0x9f2 <ProcessConfigurationDescriptor+0xf4>
	}

	while (!(DataINEndpoint))
	{
		/* See if we've found a likely compatible interface, and if there is an endpoint within that interface */
		if (!(HIDInterface) ||
     974:	01 15       	cp	r16, r1
     976:	11 05       	cpc	r17, r1
     978:	39 f0       	breq	.+14     	; 0x988 <ProcessConfigurationDescriptor+0x8a>
     97a:	c5 01       	movw	r24, r10
     97c:	b7 01       	movw	r22, r14
     97e:	4b e6       	ldi	r20, 0x6B	; 107
     980:	54 e0       	ldi	r21, 0x04	; 4
     982:	1f d4       	rcall	.+2110   	; 0x11c2 <USB_GetNextDescriptorComp>
     984:	88 23       	and	r24, r24
     986:	b9 f0       	breq	.+46     	; 0x9b6 <ProcessConfigurationDescriptor+0xb8>
		    USB_GetNextDescriptorComp(&CurrConfigBytesRem, &CurrConfigLocation,
		                              DComp_NextMouseInterfaceDataEndpoint) != DESCRIPTOR_SEARCH_COMP_Found)
		{
			/* Get the next HID interface from the configuration descriptor */
			if (USB_GetNextDescriptorComp(&CurrConfigBytesRem, &CurrConfigLocation,
     988:	c5 01       	movw	r24, r10
     98a:	b7 01       	movw	r22, r14
     98c:	40 e6       	ldi	r20, 0x60	; 96
     98e:	54 e0       	ldi	r21, 0x04	; 4
     990:	18 d4       	rcall	.+2096   	; 0x11c2 <USB_GetNextDescriptorComp>
     992:	88 23       	and	r24, r24
     994:	69 f5       	brne	.+90     	; 0x9f0 <ProcessConfigurationDescriptor+0xf2>
				/* Descriptor not found, error out */
				return NoCompatibleInterfaceFound;
			}

			/* Save the interface in case we need to refer back to it later */
			HIDInterface = DESCRIPTOR_PCAST(CurrConfigLocation, USB_Descriptor_Interface_t);
     996:	19 81       	ldd	r17, Y+1	; 0x01
     998:	0a 81       	ldd	r16, Y+2	; 0x02

			/* Get the HID descriptor from the configuration descriptor */
			if (USB_GetNextDescriptorComp(&CurrConfigBytesRem, &CurrConfigLocation,
     99a:	c5 01       	movw	r24, r10
     99c:	b7 01       	movw	r22, r14
     99e:	47 e7       	ldi	r20, 0x77	; 119
     9a0:	54 e0       	ldi	r21, 0x04	; 4
     9a2:	0f d4       	rcall	.+2078   	; 0x11c2 <USB_GetNextDescriptorComp>
     9a4:	88 23       	and	r24, r24
     9a6:	21 f5       	brne	.+72     	; 0x9f0 <ProcessConfigurationDescriptor+0xf2>
				/* Descriptor not found, error out */
				return NoCompatibleInterfaceFound;
			}

			/* Save the interface in case we need to refer back to it later */
			HIDInterface = DESCRIPTOR_PCAST(CurrConfigLocation, USB_Descriptor_Interface_t);
     9a8:	81 2f       	mov	r24, r17
     9aa:	90 2f       	mov	r25, r16
     9ac:	9c 01       	movw	r18, r24
     9ae:	89 01       	movw	r16, r18
				/* Descriptor not found, error out */
				return NoCompatibleInterfaceFound;
			}

			/* Save the HID descriptor for later use */
			HIDDescriptor = DESCRIPTOR_PCAST(CurrConfigLocation, USB_HID_Descriptor_HID_t);
     9b0:	89 80       	ldd	r8, Y+1	; 0x01
     9b2:	9a 80       	ldd	r9, Y+2	; 0x02
     9b4:	df cf       	rjmp	.-66     	; 0x974 <ProcessConfigurationDescriptor+0x76>
			/* Skip the remainder of the loop as we have not found an endpoint yet */
			continue;
		}

		/* Retrieve the endpoint address from the endpoint descriptor */
		USB_Descriptor_Endpoint_t* EndpointData = DESCRIPTOR_PCAST(CurrConfigLocation, USB_Descriptor_Endpoint_t);
     9b6:	c9 80       	ldd	r12, Y+1	; 0x01
     9b8:	da 80       	ldd	r13, Y+2	; 0x02

		/* If the endpoint is a IN type endpoint */
		if (EndpointData->EndpointAddress & ENDPOINT_DESCRIPTOR_DIR_IN)
     9ba:	f6 01       	movw	r30, r12
     9bc:	22 81       	ldd	r18, Z+2	; 0x02
     9be:	27 ff       	sbrs	r18, 7
     9c0:	d9 cf       	rjmp	.-78     	; 0x974 <ProcessConfigurationDescriptor+0x76>
			return DescriptorTooLarge;
		default:
			return ControlError;
	}

	while (!(DataINEndpoint))
     9c2:	c1 14       	cp	r12, r1
     9c4:	d1 04       	cpc	r13, r1
     9c6:	b1 f2       	breq	.-84     	; 0x974 <ProcessConfigurationDescriptor+0x76>
		if (EndpointData->EndpointAddress & ENDPOINT_DESCRIPTOR_DIR_IN)
		  DataINEndpoint = EndpointData;
	}

	/* Configure the HID data IN pipe */
	Pipe_ConfigurePipe(MOUSE_DATA_IN_PIPE, EP_TYPE_INTERRUPT, PIPE_TOKEN_IN,
     9c8:	04 81       	ldd	r16, Z+4	; 0x04
     9ca:	15 81       	ldd	r17, Z+5	; 0x05
     9cc:	81 e0       	ldi	r24, 0x01	; 1
     9ce:	63 e0       	ldi	r22, 0x03	; 3
     9d0:	40 e1       	ldi	r20, 0x10	; 16
     9d2:	ee 24       	eor	r14, r14
     9d4:	70 d2       	rcall	.+1248   	; 0xeb6 <Pipe_ConfigurePipe>
	                   DataINEndpoint->EndpointAddress, DataINEndpoint->EndpointSize, PIPE_BANK_SINGLE);
	Pipe_SetInterruptPeriod(DataINEndpoint->PollingIntervalMS);
     9d6:	f6 01       	movw	r30, r12
     9d8:	86 81       	ldd	r24, Z+6	; 0x06
			 *  \param[in] Milliseconds  Number of milliseconds between each pipe poll.
			 */
			static inline void Pipe_SetInterruptPeriod(const uint8_t Milliseconds) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetInterruptPeriod(const uint8_t Milliseconds)
			{
				UPCFG2X = Milliseconds;
     9da:	80 93 ad 00 	sts	0x00AD, r24

	/* Get the HID report size from the HID report descriptor */
	HIDReportSize = HIDDescriptor->HIDReportLength;
     9de:	f4 01       	movw	r30, r8
     9e0:	87 81       	ldd	r24, Z+7	; 0x07
     9e2:	90 85       	ldd	r25, Z+8	; 0x08
     9e4:	90 93 19 05 	sts	0x0519, r25
     9e8:	80 93 18 05 	sts	0x0518, r24
     9ec:	80 e0       	ldi	r24, 0x00	; 0
     9ee:	01 c0       	rjmp	.+2      	; 0x9f2 <ProcessConfigurationDescriptor+0xf4>

	/* Valid data found, return success */
	return SuccessfulConfigRead;
     9f0:	84 e0       	ldi	r24, 0x04	; 4
}
     9f2:	cc 5f       	subi	r28, 0xFC	; 252
     9f4:	dd 4f       	sbci	r29, 0xFD	; 253
     9f6:	0f b6       	in	r0, 0x3f	; 63
     9f8:	f8 94       	cli
     9fa:	de bf       	out	0x3e, r29	; 62
     9fc:	0f be       	out	0x3f, r0	; 63
     9fe:	cd bf       	out	0x3d, r28	; 61
     a00:	cf 91       	pop	r28
     a02:	df 91       	pop	r29
     a04:	1f 91       	pop	r17
     a06:	0f 91       	pop	r16
     a08:	ff 90       	pop	r15
     a0a:	ef 90       	pop	r14
     a0c:	df 90       	pop	r13
     a0e:	cf 90       	pop	r12
     a10:	bf 90       	pop	r11
     a12:	af 90       	pop	r10
     a14:	9f 90       	pop	r9
     a16:	8f 90       	pop	r8
     a18:	08 95       	ret

00000a1a <CALLBACK_HIDParser_FilterHIDReportItem>:
 *  \param[in] CurrentItem  Pointer to the item the HID report parser is currently working with
 *
 *  \return Boolean true if the item should be stored into the HID report structure, false if it should be discarded
 */
bool CALLBACK_HIDParser_FilterHIDReportItem(HID_ReportItem_t* const CurrentItem)
{
     a1a:	dc 01       	movw	r26, r24

	/* Iterate through the item's collection path, until either the root collection node or a collection with the
	 * Mouse Usage is found - this prevents Joysticks, which use identical descriptors except for the Joystick usage
	 * parent node, from being erroneously treated as a mouse
	 */
	for (HID_CollectionPath_t* CurrPath = CurrentItem->CollectionPath; CurrPath != NULL; CurrPath = CurrPath->Parent)
     a1c:	16 96       	adiw	r26, 0x06	; 6
     a1e:	ed 91       	ld	r30, X+
     a20:	fc 91       	ld	r31, X
     a22:	17 97       	sbiw	r26, 0x07	; 7
     a24:	0b c0       	rjmp	.+22     	; 0xa3c <CALLBACK_HIDParser_FilterHIDReportItem+0x22>
	{
		if ((CurrPath->Usage.Page  == USAGE_PAGE_GENERIC_DCTRL) &&
     a26:	81 81       	ldd	r24, Z+1	; 0x01
     a28:	92 81       	ldd	r25, Z+2	; 0x02
     a2a:	01 97       	sbiw	r24, 0x01	; 1
     a2c:	21 f4       	brne	.+8      	; 0xa36 <CALLBACK_HIDParser_FilterHIDReportItem+0x1c>
     a2e:	83 81       	ldd	r24, Z+3	; 0x03
     a30:	94 81       	ldd	r25, Z+4	; 0x04
     a32:	02 97       	sbiw	r24, 0x02	; 2
     a34:	39 f0       	breq	.+14     	; 0xa44 <CALLBACK_HIDParser_FilterHIDReportItem+0x2a>

	/* Iterate through the item's collection path, until either the root collection node or a collection with the
	 * Mouse Usage is found - this prevents Joysticks, which use identical descriptors except for the Joystick usage
	 * parent node, from being erroneously treated as a mouse
	 */
	for (HID_CollectionPath_t* CurrPath = CurrentItem->CollectionPath; CurrPath != NULL; CurrPath = CurrPath->Parent)
     a36:	05 80       	ldd	r0, Z+5	; 0x05
     a38:	f6 81       	ldd	r31, Z+6	; 0x06
     a3a:	e0 2d       	mov	r30, r0
     a3c:	30 97       	sbiw	r30, 0x00	; 0
     a3e:	99 f7       	brne	.-26     	; 0xa26 <CALLBACK_HIDParser_FilterHIDReportItem+0xc>
     a40:	80 e0       	ldi	r24, 0x00	; 0
     a42:	08 95       	ret

	/* Check the attributes of the current mouse item - see if we are interested in it or not;
	 * only store BUTTON and GENERIC_DESKTOP_CONTROL items into the Processed HID Report
	 * structure to save RAM and ignore the rest
	 */
	return ((CurrentItem->Attributes.Usage.Page == USAGE_PAGE_BUTTON) ||
     a44:	19 96       	adiw	r26, 0x09	; 9
     a46:	8d 91       	ld	r24, X+
     a48:	9c 91       	ld	r25, X
     a4a:	1a 97       	sbiw	r26, 0x0a	; 10
     a4c:	89 30       	cpi	r24, 0x09	; 9
     a4e:	91 05       	cpc	r25, r1
     a50:	21 f0       	breq	.+8      	; 0xa5a <CALLBACK_HIDParser_FilterHIDReportItem+0x40>
     a52:	20 e0       	ldi	r18, 0x00	; 0
     a54:	30 e0       	ldi	r19, 0x00	; 0
     a56:	01 97       	sbiw	r24, 0x01	; 1
     a58:	11 f4       	brne	.+4      	; 0xa5e <CALLBACK_HIDParser_FilterHIDReportItem+0x44>
     a5a:	21 e0       	ldi	r18, 0x01	; 1
     a5c:	30 e0       	ldi	r19, 0x00	; 0
     a5e:	82 2f       	mov	r24, r18
	        (CurrentItem->Attributes.Usage.Page == USAGE_PAGE_GENERIC_DCTRL));
}
     a60:	08 95       	ret

00000a62 <GetHIDReportData>:
 *  structures via the HID parser routines in the LUFA library.
 *
 *  \return  A value from the MouseHostWithParser_GetHIDReportDataCodes_t enum
 */
uint8_t GetHIDReportData(void)
{
     a62:	ef 92       	push	r14
     a64:	ff 92       	push	r15
     a66:	0f 93       	push	r16
     a68:	1f 93       	push	r17
     a6a:	df 93       	push	r29
     a6c:	cf 93       	push	r28
     a6e:	cd b7       	in	r28, 0x3d	; 61
     a70:	de b7       	in	r29, 0x3e	; 62
	/* Send the HID report to the parser for processing */
	if (USB_ProcessHIDReport(HIDReportData, HIDReportSize, &HIDReportInfo) != HID_PARSE_Successful)
	  return ParseError;

	return ParseSuccessful;
}
     a72:	ed b6       	in	r14, 0x3d	; 61
     a74:	fe b6       	in	r15, 0x3e	; 62
 *  \return  A value from the MouseHostWithParser_GetHIDReportDataCodes_t enum
 */
uint8_t GetHIDReportData(void)
{
	/* Create a buffer big enough to hold the entire returned HID report */
	uint8_t HIDReportData[HIDReportSize];
     a76:	20 91 18 05 	lds	r18, 0x0518
     a7a:	30 91 19 05 	lds	r19, 0x0519
     a7e:	8d b7       	in	r24, 0x3d	; 61
     a80:	9e b7       	in	r25, 0x3e	; 62
     a82:	82 1b       	sub	r24, r18
     a84:	93 0b       	sbc	r25, r19
     a86:	0f b6       	in	r0, 0x3f	; 63
     a88:	f8 94       	cli
     a8a:	9e bf       	out	0x3e, r25	; 62
     a8c:	0f be       	out	0x3f, r0	; 63
     a8e:	8d bf       	out	0x3d, r24	; 61
     a90:	0d b7       	in	r16, 0x3d	; 61
     a92:	1e b7       	in	r17, 0x3e	; 62
     a94:	0f 5f       	subi	r16, 0xFF	; 255
     a96:	1f 4f       	sbci	r17, 0xFF	; 255

	USB_ControlRequest = (USB_Request_Header_t)
     a98:	81 e8       	ldi	r24, 0x81	; 129
     a9a:	80 93 1b 05 	sts	0x051B, r24
     a9e:	86 e0       	ldi	r24, 0x06	; 6
     aa0:	80 93 1c 05 	sts	0x051C, r24
     aa4:	80 e0       	ldi	r24, 0x00	; 0
     aa6:	92 e2       	ldi	r25, 0x22	; 34
     aa8:	90 93 1e 05 	sts	0x051E, r25
     aac:	80 93 1d 05 	sts	0x051D, r24
     ab0:	10 92 20 05 	sts	0x0520, r1
     ab4:	10 92 1f 05 	sts	0x051F, r1
     ab8:	30 93 22 05 	sts	0x0522, r19
     abc:	20 93 21 05 	sts	0x0521, r18
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
     ac0:	10 92 a7 00 	sts	0x00A7, r1

	/* Select the control pipe for the request transfer */
	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	/* Send control request to retrieve the HID report from the attached device */
	if (USB_Host_SendControlRequest(HIDReportData) != HOST_SENDCONTROL_Successful)
     ac4:	c8 01       	movw	r24, r16
     ac6:	42 d4       	rcall	.+2180   	; 0x134c <USB_Host_SendControlRequest>
     ac8:	88 23       	and	r24, r24
     aca:	11 f0       	breq	.+4      	; 0xad0 <GetHIDReportData+0x6e>
     acc:	82 e0       	ldi	r24, 0x02	; 2
     ace:	0a c0       	rjmp	.+20     	; 0xae4 <GetHIDReportData+0x82>
	  return ParseControlError;

	/* Send the HID report to the parser for processing */
	if (USB_ProcessHIDReport(HIDReportData, HIDReportSize, &HIDReportInfo) != HID_PARSE_Successful)
     ad0:	60 91 18 05 	lds	r22, 0x0518
     ad4:	70 91 19 05 	lds	r23, 0x0519
     ad8:	c8 01       	movw	r24, r16
     ada:	4f e3       	ldi	r20, 0x3F	; 63
     adc:	51 e0       	ldi	r21, 0x01	; 1
     ade:	df d5       	rcall	.+3006   	; 0x169e <USB_ProcessHIDReport>
     ae0:	81 11       	cpse	r24, r1
     ae2:	81 e0       	ldi	r24, 0x01	; 1
	  return ParseError;

	return ParseSuccessful;
}
     ae4:	0f b6       	in	r0, 0x3f	; 63
     ae6:	f8 94       	cli
     ae8:	fe be       	out	0x3e, r15	; 62
     aea:	0f be       	out	0x3f, r0	; 63
     aec:	ed be       	out	0x3d, r14	; 61
     aee:	cf 91       	pop	r28
     af0:	df 91       	pop	r29
     af2:	1f 91       	pop	r17
     af4:	0f 91       	pop	r16
     af6:	ff 90       	pop	r15
     af8:	ef 90       	pop	r14
     afa:	08 95       	ret

00000afc <USB_Host_WaitMS>:
		USB_ResetInterface();
	}
}

uint8_t USB_Host_WaitMS(uint8_t MS)
{
     afc:	98 2f       	mov	r25, r24
			 *  \return Boolean true if the bus is currently suspended, false otherwise.
			 */
			static inline bool USB_Host_IsBusSuspended(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusSuspended(void)
			{
				return ((UHCON & (1 << SOFEN)) ? false : true);
     afe:	20 91 9e 00 	lds	r18, 0x009E
	bool    BusSuspended = USB_Host_IsBusSuspended();
	uint8_t ErrorCode    = HOST_WAITERROR_Successful;
	bool    HSOFIEnabled = USB_INT_IsEnabled(USB_INT_HSOFI);
     b02:	30 91 a0 00 	lds	r19, 0x00A0

	USB_INT_Disable(USB_INT_HSOFI);
     b06:	80 91 a0 00 	lds	r24, 0x00A0
     b0a:	8f 7d       	andi	r24, 0xDF	; 223
     b0c:	80 93 a0 00 	sts	0x00A0, r24
	USB_INT_Clear(USB_INT_HSOFI);
     b10:	80 91 9f 00 	lds	r24, 0x009F
     b14:	8f 7d       	andi	r24, 0xDF	; 223
     b16:	80 93 9f 00 	sts	0x009F, r24
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
     b1a:	80 91 9e 00 	lds	r24, 0x009E
     b1e:	81 60       	ori	r24, 0x01	; 1
     b20:	80 93 9e 00 	sts	0x009E, r24
     b24:	26 c0       	rjmp	.+76     	; 0xb72 <USB_Host_WaitMS+0x76>

	USB_Host_ResumeBus();

	while (MS)
	{
		if (USB_INT_HasOccurred(USB_INT_HSOFI))
     b26:	80 91 9f 00 	lds	r24, 0x009F
     b2a:	85 ff       	sbrs	r24, 5
     b2c:	06 c0       	rjmp	.+12     	; 0xb3a <USB_Host_WaitMS+0x3e>
		{
			USB_INT_Clear(USB_INT_HSOFI);
     b2e:	80 91 9f 00 	lds	r24, 0x009F
     b32:	8f 7d       	andi	r24, 0xDF	; 223
     b34:	80 93 9f 00 	sts	0x009F, r24
			MS--;
     b38:	91 50       	subi	r25, 0x01	; 1
		}

		if ((USB_HostState == HOST_STATE_Unattached) || (USB_CurrentMode != USB_MODE_Host))
     b3a:	80 91 23 05 	lds	r24, 0x0523
     b3e:	82 30       	cpi	r24, 0x02	; 2
     b40:	11 f4       	brne	.+4      	; 0xb46 <USB_Host_WaitMS+0x4a>
     b42:	91 e0       	ldi	r25, 0x01	; 1
     b44:	18 c0       	rjmp	.+48     	; 0xb76 <USB_Host_WaitMS+0x7a>
			 *  \return Boolean true if an error has occurred on the selected pipe, false otherwise.
			 */
			static inline bool Pipe_IsError(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsError(void)
			{
				return ((UPINTX & (1 << PERRI)) ? true : false);
     b46:	80 91 a6 00 	lds	r24, 0x00A6
			ErrorCode = HOST_WAITERROR_DeviceDisconnect;

			break;
		}

		if (Pipe_IsError() == true)
     b4a:	84 ff       	sbrs	r24, 4
     b4c:	07 c0       	rjmp	.+14     	; 0xb5c <USB_Host_WaitMS+0x60>

			/** Clears the master pipe error flag. */
			static inline void Pipe_ClearError(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearError(void)
			{
				UPINTX &= ~(1 << PERRI);
     b4e:	80 91 a6 00 	lds	r24, 0x00A6
     b52:	8f 7e       	andi	r24, 0xEF	; 239
     b54:	80 93 a6 00 	sts	0x00A6, r24
     b58:	92 e0       	ldi	r25, 0x02	; 2
     b5a:	0d c0       	rjmp	.+26     	; 0xb76 <USB_Host_WaitMS+0x7a>
			 *  \return Boolean true if the current pipe has been stalled by the attached device, false otherwise.
			 */
			static inline bool Pipe_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsStalled(void)
			{
				return ((UPINTX & (1 << RXSTALLI)) ? true : false);
     b5c:	80 91 a6 00 	lds	r24, 0x00A6
			ErrorCode = HOST_WAITERROR_PipeError;

			break;
		}

		if (Pipe_IsStalled() == true)
     b60:	81 ff       	sbrs	r24, 1
     b62:	07 c0       	rjmp	.+14     	; 0xb72 <USB_Host_WaitMS+0x76>
			 *  \ingroup Group_PipePacketManagement
			 */
			static inline void Pipe_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearStall(void)
			{
				UPINTX &= ~(1 << RXSTALLI);
     b64:	80 91 a6 00 	lds	r24, 0x00A6
     b68:	8d 7f       	andi	r24, 0xFD	; 253
     b6a:	80 93 a6 00 	sts	0x00A6, r24
     b6e:	93 e0       	ldi	r25, 0x03	; 3
     b70:	02 c0       	rjmp	.+4      	; 0xb76 <USB_Host_WaitMS+0x7a>
	USB_INT_Disable(USB_INT_HSOFI);
	USB_INT_Clear(USB_INT_HSOFI);

	USB_Host_ResumeBus();

	while (MS)
     b72:	99 23       	and	r25, r25
     b74:	c1 f6       	brne	.-80     	; 0xb26 <USB_Host_WaitMS+0x2a>

			break;
		}
	}

	if (BusSuspended)
     b76:	20 fd       	sbrc	r18, 0
     b78:	05 c0       	rjmp	.+10     	; 0xb84 <USB_Host_WaitMS+0x88>
			 *  messages to the device.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				UHCON &= ~(1 << SOFEN);
     b7a:	80 91 9e 00 	lds	r24, 0x009E
     b7e:	8e 7f       	andi	r24, 0xFE	; 254
     b80:	80 93 9e 00 	sts	0x009E, r24
	  USB_Host_SuspendBus();

	if (HSOFIEnabled)
     b84:	35 ff       	sbrs	r19, 5
     b86:	05 c0       	rjmp	.+10     	; 0xb92 <USB_Host_WaitMS+0x96>
	  USB_INT_Enable(USB_INT_HSOFI);
     b88:	80 91 a0 00 	lds	r24, 0x00A0
     b8c:	80 62       	ori	r24, 0x20	; 32
     b8e:	80 93 a0 00 	sts	0x00A0, r24

	return ErrorCode;
}
     b92:	89 2f       	mov	r24, r25
     b94:	08 95       	ret

00000b96 <USB_Host_ResetDevice>:
			 *  \return Boolean true if the bus is currently suspended, false otherwise.
			 */
			static inline bool USB_Host_IsBusSuspended(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusSuspended(void)
			{
				return ((UHCON & (1 << SOFEN)) ? false : true);
     b96:	60 91 9e 00 	lds	r22, 0x009E

static void USB_Host_ResetDevice(void)
{
	bool BusSuspended = USB_Host_IsBusSuspended();

	USB_INT_Disable(USB_INT_DDISCI);
     b9a:	80 91 a0 00 	lds	r24, 0x00A0
     b9e:	8d 7f       	andi	r24, 0xFD	; 253
     ba0:	80 93 a0 00 	sts	0x00A0, r24
			 *  woken up automatically and the bus resumed after the reset has been correctly issued.
			 */
			static inline void USB_Host_ResetBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResetBus(void)
			{
				UHCON |=  (1 << RESET);
     ba4:	80 91 9e 00 	lds	r24, 0x009E
     ba8:	82 60       	ori	r24, 0x02	; 2
     baa:	80 93 9e 00 	sts	0x009E, r24
			 *  \return Boolean true if no bus reset is currently being sent, false otherwise.
			 */
			static inline bool USB_Host_IsBusResetComplete(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusResetComplete(void)
			{
				return ((UHCON & (1 << RESET)) ? false : true);
     bae:	80 91 9e 00 	lds	r24, 0x009E

	USB_Host_ResetBus();
	while (!(USB_Host_IsBusResetComplete()));
     bb2:	81 fd       	sbrc	r24, 1
     bb4:	fc cf       	rjmp	.-8      	; 0xbae <USB_Host_ResetDevice+0x18>
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
     bb6:	80 91 9e 00 	lds	r24, 0x009E
     bba:	81 60       	ori	r24, 0x01	; 1
     bbc:	80 93 9e 00 	sts	0x009E, r24
	USB_Host_ResumeBus();

	bool HSOFIEnabled = USB_INT_IsEnabled(USB_INT_HSOFI);
     bc0:	30 91 a0 00 	lds	r19, 0x00A0

	USB_INT_Disable(USB_INT_HSOFI);
     bc4:	80 91 a0 00 	lds	r24, 0x00A0
     bc8:	8f 7d       	andi	r24, 0xDF	; 223
     bca:	80 93 a0 00 	sts	0x00A0, r24
	USB_INT_Clear(USB_INT_HSOFI);
     bce:	80 91 9f 00 	lds	r24, 0x009F
     bd2:	8f 7d       	andi	r24, 0xDF	; 223
     bd4:	80 93 9f 00 	sts	0x009F, r24
     bd8:	2a e0       	ldi	r18, 0x0A	; 10
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     bda:	40 ed       	ldi	r20, 0xD0	; 208
     bdc:	57 e0       	ldi	r21, 0x07	; 7
		/* Workaround for powerless-pull-up devices. After a USB bus reset,
		   all disconnection interrupts are suppressed while a USB frame is
		   looked for - if it is found within 10ms, the device is still
		   present.                                                        */

		if (USB_INT_HasOccurred(USB_INT_HSOFI))
     bde:	80 91 9f 00 	lds	r24, 0x009F
     be2:	85 ff       	sbrs	r24, 5
     be4:	0b c0       	rjmp	.+22     	; 0xbfc <USB_Host_ResetDevice+0x66>
		{
			USB_INT_Clear(USB_INT_HSOFI);
     be6:	80 91 9f 00 	lds	r24, 0x009F
     bea:	8f 7d       	andi	r24, 0xDF	; 223
     bec:	80 93 9f 00 	sts	0x009F, r24
			USB_INT_Clear(USB_INT_DDISCI);
     bf0:	80 91 9f 00 	lds	r24, 0x009F
     bf4:	8d 7f       	andi	r24, 0xFD	; 253
     bf6:	80 93 9f 00 	sts	0x009F, r24
     bfa:	05 c0       	rjmp	.+10     	; 0xc06 <USB_Host_ResetDevice+0x70>
     bfc:	ca 01       	movw	r24, r20
     bfe:	01 97       	sbiw	r24, 0x01	; 1
     c00:	f1 f7       	brne	.-4      	; 0xbfe <USB_Host_ResetDevice+0x68>
	bool HSOFIEnabled = USB_INT_IsEnabled(USB_INT_HSOFI);

	USB_INT_Disable(USB_INT_HSOFI);
	USB_INT_Clear(USB_INT_HSOFI);

	for (uint8_t MSRem = 10; MSRem != 0; MSRem--)
     c02:	21 50       	subi	r18, 0x01	; 1
     c04:	61 f7       	brne	.-40     	; 0xbde <USB_Host_ResetDevice+0x48>
		}

		_delay_ms(1);
	}

	if (HSOFIEnabled)
     c06:	35 ff       	sbrs	r19, 5
     c08:	05 c0       	rjmp	.+10     	; 0xc14 <USB_Host_ResetDevice+0x7e>
	  USB_INT_Enable(USB_INT_HSOFI);
     c0a:	80 91 a0 00 	lds	r24, 0x00A0
     c0e:	80 62       	ori	r24, 0x20	; 32
     c10:	80 93 a0 00 	sts	0x00A0, r24

	if (BusSuspended)
     c14:	60 fd       	sbrc	r22, 0
     c16:	05 c0       	rjmp	.+10     	; 0xc22 <USB_Host_ResetDevice+0x8c>
			 *  messages to the device.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				UHCON &= ~(1 << SOFEN);
     c18:	80 91 9e 00 	lds	r24, 0x009E
     c1c:	8e 7f       	andi	r24, 0xFE	; 254
     c1e:	80 93 9e 00 	sts	0x009E, r24
	  USB_Host_SuspendBus();

	USB_INT_Enable(USB_INT_DDISCI);
     c22:	80 91 a0 00 	lds	r24, 0x00A0
     c26:	82 60       	ori	r24, 0x02	; 2
     c28:	80 93 a0 00 	sts	0x00A0, r24
}
     c2c:	08 95       	ret

00000c2e <USB_Host_SetDeviceConfiguration>:

uint8_t USB_Host_SetDeviceConfiguration(const uint8_t ConfigNumber)
{
	USB_ControlRequest = (USB_Request_Header_t)
     c2e:	10 92 1b 05 	sts	0x051B, r1
     c32:	99 e0       	ldi	r25, 0x09	; 9
     c34:	90 93 1c 05 	sts	0x051C, r25
     c38:	80 93 1d 05 	sts	0x051D, r24
     c3c:	10 92 1e 05 	sts	0x051E, r1
     c40:	10 92 20 05 	sts	0x0520, r1
     c44:	10 92 1f 05 	sts	0x051F, r1
     c48:	10 92 22 05 	sts	0x0522, r1
     c4c:	10 92 21 05 	sts	0x0521, r1
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
     c50:	10 92 a7 00 	sts	0x00A7, r1
			.wLength       = 0,
		};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	return USB_Host_SendControlRequest(NULL);
     c54:	80 e0       	ldi	r24, 0x00	; 0
     c56:	90 e0       	ldi	r25, 0x00	; 0
}
     c58:	79 c3       	rjmp	.+1778   	; 0x134c <USB_Host_SendControlRequest>

00000c5a <USB_Host_ProcessNextHostState>:

#define  __INCLUDE_FROM_HOST_C
#include "Host.h"

void USB_Host_ProcessNextHostState(void)
{
     c5a:	ef 92       	push	r14
     c5c:	0f 93       	push	r16
     c5e:	1f 93       	push	r17
     c60:	df 93       	push	r29
     c62:	cf 93       	push	r28
     c64:	cd b7       	in	r28, 0x3d	; 61
     c66:	de b7       	in	r29, 0x3e	; 62
     c68:	28 97       	sbiw	r28, 0x08	; 8
     c6a:	0f b6       	in	r0, 0x3f	; 63
     c6c:	f8 94       	cli
     c6e:	de bf       	out	0x3e, r29	; 62
     c70:	0f be       	out	0x3f, r0	; 63
     c72:	cd bf       	out	0x3d, r28	; 61
	uint8_t SubErrorCode = HOST_ENUMERROR_NoError;

	static uint16_t WaitMSRemaining;
	static uint8_t  PostWaitState;

	switch (USB_HostState)
     c74:	80 91 23 05 	lds	r24, 0x0523
     c78:	86 30       	cpi	r24, 0x06	; 6
     c7a:	09 f4       	brne	.+2      	; 0xc7e <USB_Host_ProcessNextHostState+0x24>
     c7c:	94 c0       	rjmp	.+296    	; 0xda6 <USB_Host_ProcessNextHostState+0x14c>
     c7e:	87 30       	cpi	r24, 0x07	; 7
     c80:	70 f4       	brcc	.+28     	; 0xc9e <USB_Host_ProcessNextHostState+0x44>
     c82:	83 30       	cpi	r24, 0x03	; 3
     c84:	c1 f1       	breq	.+112    	; 0xcf6 <USB_Host_ProcessNextHostState+0x9c>
     c86:	84 30       	cpi	r24, 0x04	; 4
     c88:	20 f4       	brcc	.+8      	; 0xc92 <USB_Host_ProcessNextHostState+0x38>
     c8a:	81 30       	cpi	r24, 0x01	; 1
     c8c:	09 f0       	breq	.+2      	; 0xc90 <USB_Host_ProcessNextHostState+0x36>
     c8e:	07 c1       	rjmp	.+526    	; 0xe9e <USB_Host_ProcessNextHostState+0x244>
     c90:	13 c0       	rjmp	.+38     	; 0xcb8 <USB_Host_ProcessNextHostState+0x5e>
     c92:	84 30       	cpi	r24, 0x04	; 4
     c94:	c1 f1       	breq	.+112    	; 0xd06 <USB_Host_ProcessNextHostState+0xac>
     c96:	85 30       	cpi	r24, 0x05	; 5
     c98:	09 f0       	breq	.+2      	; 0xc9c <USB_Host_ProcessNextHostState+0x42>
     c9a:	01 c1       	rjmp	.+514    	; 0xe9e <USB_Host_ProcessNextHostState+0x244>
     c9c:	5b c0       	rjmp	.+182    	; 0xd54 <USB_Host_ProcessNextHostState+0xfa>
     c9e:	88 30       	cpi	r24, 0x08	; 8
     ca0:	09 f4       	brne	.+2      	; 0xca4 <USB_Host_ProcessNextHostState+0x4a>
     ca2:	9b c0       	rjmp	.+310    	; 0xdda <USB_Host_ProcessNextHostState+0x180>
     ca4:	88 30       	cpi	r24, 0x08	; 8
     ca6:	08 f4       	brcc	.+2      	; 0xcaa <USB_Host_ProcessNextHostState+0x50>
     ca8:	8a c0       	rjmp	.+276    	; 0xdbe <USB_Host_ProcessNextHostState+0x164>
     caa:	89 30       	cpi	r24, 0x09	; 9
     cac:	09 f4       	brne	.+2      	; 0xcb0 <USB_Host_ProcessNextHostState+0x56>
     cae:	b4 c0       	rjmp	.+360    	; 0xe18 <USB_Host_ProcessNextHostState+0x1be>
     cb0:	8a 30       	cpi	r24, 0x0A	; 10
     cb2:	09 f0       	breq	.+2      	; 0xcb6 <USB_Host_ProcessNextHostState+0x5c>
     cb4:	f4 c0       	rjmp	.+488    	; 0xe9e <USB_Host_ProcessNextHostState+0x244>
     cb6:	d9 c0       	rjmp	.+434    	; 0xe6a <USB_Host_ProcessNextHostState+0x210>
	{
		case HOST_STATE_WaitForDevice:
			if (WaitMSRemaining)
     cb8:	00 91 3d 01 	lds	r16, 0x013D
     cbc:	10 91 3e 01 	lds	r17, 0x013E
     cc0:	01 15       	cp	r16, r1
     cc2:	11 05       	cpc	r17, r1
     cc4:	09 f4       	brne	.+2      	; 0xcc8 <USB_Host_ProcessNextHostState+0x6e>
     cc6:	eb c0       	rjmp	.+470    	; 0xe9e <USB_Host_ProcessNextHostState+0x244>
			{
				if ((SubErrorCode = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
     cc8:	81 e0       	ldi	r24, 0x01	; 1
     cca:	18 df       	rcall	.-464    	; 0xafc <USB_Host_WaitMS>
     ccc:	68 2f       	mov	r22, r24
     cce:	88 23       	and	r24, r24
     cd0:	31 f0       	breq	.+12     	; 0xcde <USB_Host_ProcessNextHostState+0x84>
				{
					USB_HostState = PostWaitState;
     cd2:	80 91 3c 01 	lds	r24, 0x013C
     cd6:	80 93 23 05 	sts	0x0523, r24
     cda:	91 e0       	ldi	r25, 0x01	; 1
     cdc:	dc c0       	rjmp	.+440    	; 0xe96 <USB_Host_ProcessNextHostState+0x23c>
					ErrorCode     = HOST_ENUMERROR_WaitStage;
					break;
				}

				if (!(--WaitMSRemaining))
     cde:	c8 01       	movw	r24, r16
     ce0:	01 97       	sbiw	r24, 0x01	; 1
     ce2:	90 93 3e 01 	sts	0x013E, r25
     ce6:	80 93 3d 01 	sts	0x013D, r24
     cea:	89 2b       	or	r24, r25
     cec:	09 f0       	breq	.+2      	; 0xcf0 <USB_Host_ProcessNextHostState+0x96>
     cee:	d7 c0       	rjmp	.+430    	; 0xe9e <USB_Host_ProcessNextHostState+0x244>
				  USB_HostState = PostWaitState;
     cf0:	80 91 3c 01 	lds	r24, 0x013C
     cf4:	bf c0       	rjmp	.+382    	; 0xe74 <USB_Host_ProcessNextHostState+0x21a>
			}

			break;
		case HOST_STATE_Powered:
			WaitMSRemaining = HOST_DEVICE_SETTLE_DELAY_MS;
     cf6:	88 ee       	ldi	r24, 0xE8	; 232
     cf8:	93 e0       	ldi	r25, 0x03	; 3
     cfa:	90 93 3e 01 	sts	0x013E, r25
     cfe:	80 93 3d 01 	sts	0x013D, r24

			USB_HostState = HOST_STATE_Powered_WaitForDeviceSettle;
     d02:	84 e0       	ldi	r24, 0x04	; 4
     d04:	b7 c0       	rjmp	.+366    	; 0xe74 <USB_Host_ProcessNextHostState+0x21a>
			break;
		case HOST_STATE_Powered_WaitForDeviceSettle:
			if (WaitMSRemaining--)
     d06:	80 91 3d 01 	lds	r24, 0x013D
     d0a:	90 91 3e 01 	lds	r25, 0x013E
     d0e:	01 97       	sbiw	r24, 0x01	; 1
     d10:	90 93 3e 01 	sts	0x013E, r25
     d14:	80 93 3d 01 	sts	0x013D, r24
     d18:	01 96       	adiw	r24, 0x01	; 1
     d1a:	29 f0       	breq	.+10     	; 0xd26 <USB_Host_ProcessNextHostState+0xcc>
     d1c:	80 ed       	ldi	r24, 0xD0	; 208
     d1e:	97 e0       	ldi	r25, 0x07	; 7
     d20:	01 97       	sbiw	r24, 0x01	; 1
     d22:	f1 f7       	brne	.-4      	; 0xd20 <USB_Host_ProcessNextHostState+0xc6>
     d24:	bc c0       	rjmp	.+376    	; 0xe9e <USB_Host_ProcessNextHostState+0x244>
			}

			static inline void USB_Host_VBUS_Manual_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Manual_Off(void)
			{
				PORTE  &= ~(1 << 7);
     d26:	77 98       	cbi	0x0e, 7	; 14

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON  |=  (1 << OTGPADE);
     d28:	80 91 d8 00 	lds	r24, 0x00D8
     d2c:	80 61       	ori	r24, 0x10	; 16
     d2e:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_Host_VBUS_Auto_Enable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Enable(void)
			{
				OTGCON &= ~(1 << VBUSHWC);
     d32:	80 91 dd 00 	lds	r24, 0x00DD
     d36:	8b 7f       	andi	r24, 0xFB	; 251
     d38:	80 93 dd 00 	sts	0x00DD, r24
				UHWCON |=  (1 << UVCONE);
     d3c:	80 91 d7 00 	lds	r24, 0x00D7
     d40:	80 61       	ori	r24, 0x10	; 16
     d42:	80 93 d7 00 	sts	0x00D7, r24
			}

			static inline void USB_Host_VBUS_Auto_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_On(void)
			{
				OTGCON |=  (1 << VBUSREQ);
     d46:	80 91 dd 00 	lds	r24, 0x00DD
     d4a:	82 60       	ori	r24, 0x02	; 2
     d4c:	80 93 dd 00 	sts	0x00DD, r24

				USB_OTGPAD_On();
				USB_Host_VBUS_Auto_Enable();
				USB_Host_VBUS_Auto_On();

				USB_HostState = HOST_STATE_Powered_WaitForConnect;
     d50:	85 e0       	ldi	r24, 0x05	; 5
     d52:	90 c0       	rjmp	.+288    	; 0xe74 <USB_Host_ProcessNextHostState+0x21a>
			}

			break;
		case HOST_STATE_Powered_WaitForConnect:
			if (USB_INT_HasOccurred(USB_INT_DCONNI))
     d54:	80 91 9f 00 	lds	r24, 0x009F
     d58:	80 ff       	sbrs	r24, 0
     d5a:	a1 c0       	rjmp	.+322    	; 0xe9e <USB_Host_ProcessNextHostState+0x244>
			{
				USB_INT_Clear(USB_INT_DCONNI);
     d5c:	80 91 9f 00 	lds	r24, 0x009F
     d60:	8e 7f       	andi	r24, 0xFE	; 254
     d62:	80 93 9f 00 	sts	0x009F, r24
				USB_INT_Clear(USB_INT_DDISCI);
     d66:	80 91 9f 00 	lds	r24, 0x009F
     d6a:	8d 7f       	andi	r24, 0xFD	; 253
     d6c:	80 93 9f 00 	sts	0x009F, r24

				USB_INT_Clear(USB_INT_VBERRI);
     d70:	80 91 df 00 	lds	r24, 0x00DF
     d74:	8d 7f       	andi	r24, 0xFD	; 253
     d76:	80 93 df 00 	sts	0x00DF, r24
				USB_INT_Enable(USB_INT_VBERRI);
     d7a:	80 91 de 00 	lds	r24, 0x00DE
     d7e:	82 60       	ori	r24, 0x02	; 2
     d80:	80 93 de 00 	sts	0x00DE, r24
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
     d84:	80 91 9e 00 	lds	r24, 0x009E
     d88:	81 60       	ori	r24, 0x01	; 1
     d8a:	80 93 9e 00 	sts	0x009E, r24

				USB_Host_ResumeBus();
				Pipe_ClearPipes();
     d8e:	c9 d0       	rcall	.+402    	; 0xf22 <Pipe_ClearPipes>

				HOST_TASK_NONBLOCK_WAIT(100, HOST_STATE_Powered_DoReset);
     d90:	81 e0       	ldi	r24, 0x01	; 1
     d92:	80 93 23 05 	sts	0x0523, r24
     d96:	84 e6       	ldi	r24, 0x64	; 100
     d98:	90 e0       	ldi	r25, 0x00	; 0
     d9a:	90 93 3e 01 	sts	0x013E, r25
     d9e:	80 93 3d 01 	sts	0x013D, r24
     da2:	86 e0       	ldi	r24, 0x06	; 6
     da4:	5f c0       	rjmp	.+190    	; 0xe64 <USB_Host_ProcessNextHostState+0x20a>
			}

			break;
		case HOST_STATE_Powered_DoReset:
			USB_Host_ResetDevice();
     da6:	f7 de       	rcall	.-530    	; 0xb96 <USB_Host_ResetDevice>

			HOST_TASK_NONBLOCK_WAIT(200, HOST_STATE_Powered_ConfigPipe);
     da8:	81 e0       	ldi	r24, 0x01	; 1
     daa:	80 93 23 05 	sts	0x0523, r24
     dae:	88 ec       	ldi	r24, 0xC8	; 200
     db0:	90 e0       	ldi	r25, 0x00	; 0
     db2:	90 93 3e 01 	sts	0x013E, r25
     db6:	80 93 3d 01 	sts	0x013D, r24
     dba:	87 e0       	ldi	r24, 0x07	; 7
     dbc:	53 c0       	rjmp	.+166    	; 0xe64 <USB_Host_ProcessNextHostState+0x20a>
			break;
		case HOST_STATE_Powered_ConfigPipe:
			Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL,
     dbe:	80 e0       	ldi	r24, 0x00	; 0
     dc0:	60 e0       	ldi	r22, 0x00	; 0
     dc2:	40 e0       	ldi	r20, 0x00	; 0
     dc4:	20 e0       	ldi	r18, 0x00	; 0
     dc6:	00 e4       	ldi	r16, 0x40	; 64
     dc8:	10 e0       	ldi	r17, 0x00	; 0
     dca:	ee 24       	eor	r14, r14
     dcc:	74 d0       	rcall	.+232    	; 0xeb6 <Pipe_ConfigurePipe>
			 *  \return Boolean true if the selected pipe is configured, false otherwise.
			 */
			static inline bool Pipe_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsConfigured(void)
			{
				return ((UPSTAX & (1 << CFGOK)) ? true : false);
     dce:	80 91 ac 00 	lds	r24, 0x00AC
							   PIPE_TOKEN_SETUP, ENDPOINT_CONTROLEP,
							   PIPE_CONTROLPIPE_DEFAULT_SIZE, PIPE_BANK_SINGLE);

			if (!(Pipe_IsConfigured()))
     dd2:	87 ff       	sbrs	r24, 7
     dd4:	5e c0       	rjmp	.+188    	; 0xe92 <USB_Host_ProcessNextHostState+0x238>
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
				SubErrorCode = 0;
				break;
			}

			USB_HostState = HOST_STATE_Default;
     dd6:	88 e0       	ldi	r24, 0x08	; 8
     dd8:	4d c0       	rjmp	.+154    	; 0xe74 <USB_Host_ProcessNextHostState+0x21a>
			break;
		case HOST_STATE_Default:
			USB_ControlRequest = (USB_Request_Header_t)
     dda:	ab e1       	ldi	r26, 0x1B	; 27
     ddc:	b5 e0       	ldi	r27, 0x05	; 5
     dde:	e4 e2       	ldi	r30, 0x24	; 36
     de0:	f1 e0       	ldi	r31, 0x01	; 1
     de2:	88 e0       	ldi	r24, 0x08	; 8
     de4:	01 90       	ld	r0, Z+
     de6:	0d 92       	st	X+, r0
     de8:	81 50       	subi	r24, 0x01	; 1
     dea:	e1 f7       	brne	.-8      	; 0xde4 <USB_Host_ProcessNextHostState+0x18a>
					.wLength       = 8,
				};

			uint8_t DataBuffer[8];

			if ((SubErrorCode = USB_Host_SendControlRequest(DataBuffer)) != HOST_SENDCONTROL_Successful)
     dec:	ce 01       	movw	r24, r28
     dee:	01 96       	adiw	r24, 0x01	; 1
     df0:	ad d2       	rcall	.+1370   	; 0x134c <USB_Host_SendControlRequest>
     df2:	68 2f       	mov	r22, r24
     df4:	88 23       	and	r24, r24
     df6:	09 f0       	breq	.+2      	; 0xdfa <USB_Host_ProcessNextHostState+0x1a0>
     df8:	4a c0       	rjmp	.+148    	; 0xe8e <USB_Host_ProcessNextHostState+0x234>
			{
				ErrorCode = HOST_ENUMERROR_ControlError;
				break;
			}

			USB_ControlPipeSize = DataBuffer[offsetof(USB_Descriptor_Device_t, Endpoint0Size)];
     dfa:	88 85       	ldd	r24, Y+8	; 0x08
     dfc:	80 93 2c 01 	sts	0x012C, r24

			USB_Host_ResetDevice();
     e00:	ca de       	rcall	.-620    	; 0xb96 <USB_Host_ResetDevice>

			HOST_TASK_NONBLOCK_WAIT(200, HOST_STATE_Default_PostReset);
     e02:	81 e0       	ldi	r24, 0x01	; 1
     e04:	80 93 23 05 	sts	0x0523, r24
     e08:	88 ec       	ldi	r24, 0xC8	; 200
     e0a:	90 e0       	ldi	r25, 0x00	; 0
     e0c:	90 93 3e 01 	sts	0x013E, r25
     e10:	80 93 3d 01 	sts	0x013D, r24
     e14:	89 e0       	ldi	r24, 0x09	; 9
     e16:	26 c0       	rjmp	.+76     	; 0xe64 <USB_Host_ProcessNextHostState+0x20a>
			break;
		case HOST_STATE_Default_PostReset:
			Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL,
     e18:	00 91 2c 01 	lds	r16, 0x012C
     e1c:	80 e0       	ldi	r24, 0x00	; 0
     e1e:	60 e0       	ldi	r22, 0x00	; 0
     e20:	40 e0       	ldi	r20, 0x00	; 0
     e22:	20 e0       	ldi	r18, 0x00	; 0
     e24:	10 e0       	ldi	r17, 0x00	; 0
     e26:	ee 24       	eor	r14, r14
     e28:	46 d0       	rcall	.+140    	; 0xeb6 <Pipe_ConfigurePipe>
     e2a:	80 91 ac 00 	lds	r24, 0x00AC
			                   PIPE_TOKEN_SETUP, ENDPOINT_CONTROLEP,
			                   USB_ControlPipeSize, PIPE_BANK_SINGLE);

			if (!(Pipe_IsConfigured()))
     e2e:	87 ff       	sbrs	r24, 7
     e30:	30 c0       	rjmp	.+96     	; 0xe92 <USB_Host_ProcessNextHostState+0x238>
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
				SubErrorCode = 0;
				break;
			}

			USB_ControlRequest = (USB_Request_Header_t)
     e32:	ab e1       	ldi	r26, 0x1B	; 27
     e34:	b5 e0       	ldi	r27, 0x05	; 5
     e36:	ec e1       	ldi	r30, 0x1C	; 28
     e38:	f1 e0       	ldi	r31, 0x01	; 1
     e3a:	88 e0       	ldi	r24, 0x08	; 8
     e3c:	01 90       	ld	r0, Z+
     e3e:	0d 92       	st	X+, r0
     e40:	81 50       	subi	r24, 0x01	; 1
     e42:	e1 f7       	brne	.-8      	; 0xe3c <USB_Host_ProcessNextHostState+0x1e2>
					.wValue        = USB_HOST_DEVICEADDRESS,
					.wIndex        = 0,
					.wLength       = 0,
				};

			if ((SubErrorCode = USB_Host_SendControlRequest(NULL)) != HOST_SENDCONTROL_Successful)
     e44:	80 e0       	ldi	r24, 0x00	; 0
     e46:	90 e0       	ldi	r25, 0x00	; 0
     e48:	81 d2       	rcall	.+1282   	; 0x134c <USB_Host_SendControlRequest>
     e4a:	68 2f       	mov	r22, r24
     e4c:	88 23       	and	r24, r24
     e4e:	f9 f4       	brne	.+62     	; 0xe8e <USB_Host_ProcessNextHostState+0x234>
			{
				ErrorCode = HOST_ENUMERROR_ControlError;
				break;
			}

			HOST_TASK_NONBLOCK_WAIT(100, HOST_STATE_Default_PostAddressSet);
     e50:	81 e0       	ldi	r24, 0x01	; 1
     e52:	80 93 23 05 	sts	0x0523, r24
     e56:	84 e6       	ldi	r24, 0x64	; 100
     e58:	90 e0       	ldi	r25, 0x00	; 0
     e5a:	90 93 3e 01 	sts	0x013E, r25
     e5e:	80 93 3d 01 	sts	0x013D, r24
     e62:	8a e0       	ldi	r24, 0x0A	; 10
     e64:	80 93 3c 01 	sts	0x013C, r24
     e68:	1a c0       	rjmp	.+52     	; 0xe9e <USB_Host_ProcessNextHostState+0x244>
			}

			static inline void USB_Host_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SetDeviceAddress(const uint8_t Address)
			{
				UHADDR  =  (Address & 0x7F);
     e6a:	81 e0       	ldi	r24, 0x01	; 1
     e6c:	80 93 a1 00 	sts	0x00A1, r24
			break;
		case HOST_STATE_Default_PostAddressSet:
			USB_Host_SetDeviceAddress(USB_HOST_DEVICEADDRESS);

			EVENT_USB_Host_DeviceEnumerationComplete();
     e70:	6c da       	rcall	.-2856   	; 0x34a <EVENT_USB_Host_DeviceEnumerationComplete>
			USB_HostState = HOST_STATE_Addressed;
     e72:	8b e0       	ldi	r24, 0x0B	; 11
     e74:	80 93 23 05 	sts	0x0523, r24
     e78:	12 c0       	rjmp	.+36     	; 0xe9e <USB_Host_ProcessNextHostState+0x244>
			break;
	}

	if ((ErrorCode != HOST_ENUMERROR_NoError) && (USB_HostState != HOST_STATE_Unattached))
	{
		EVENT_USB_Host_DeviceEnumerationFailed(ErrorCode, SubErrorCode);
     e7a:	89 2f       	mov	r24, r25
     e7c:	22 db       	rcall	.-2492   	; 0x4c2 <EVENT_USB_Host_DeviceEnumerationFailed>
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
     e7e:	80 91 dd 00 	lds	r24, 0x00DD
     e82:	81 60       	ori	r24, 0x01	; 1
     e84:	80 93 dd 00 	sts	0x00DD, r24

		USB_Host_VBUS_Auto_Off();

		EVENT_USB_Host_DeviceUnattached();
     e88:	0a db       	rcall	.-2540   	; 0x49e <EVENT_USB_Host_DeviceUnattached>

		USB_ResetInterface();
     e8a:	8c d0       	rcall	.+280    	; 0xfa4 <USB_ResetInterface>
     e8c:	08 c0       	rjmp	.+16     	; 0xe9e <USB_Host_ProcessNextHostState+0x244>
	}
}
     e8e:	93 e0       	ldi	r25, 0x03	; 3
     e90:	02 c0       	rjmp	.+4      	; 0xe96 <USB_Host_ProcessNextHostState+0x23c>
     e92:	94 e0       	ldi	r25, 0x04	; 4
     e94:	60 e0       	ldi	r22, 0x00	; 0
			EVENT_USB_Host_DeviceEnumerationComplete();
			USB_HostState = HOST_STATE_Addressed;
			break;
	}

	if ((ErrorCode != HOST_ENUMERROR_NoError) && (USB_HostState != HOST_STATE_Unattached))
     e96:	80 91 23 05 	lds	r24, 0x0523
     e9a:	82 30       	cpi	r24, 0x02	; 2
     e9c:	71 f7       	brne	.-36     	; 0xe7a <USB_Host_ProcessNextHostState+0x220>

		EVENT_USB_Host_DeviceUnattached();

		USB_ResetInterface();
	}
}
     e9e:	28 96       	adiw	r28, 0x08	; 8
     ea0:	0f b6       	in	r0, 0x3f	; 63
     ea2:	f8 94       	cli
     ea4:	de bf       	out	0x3e, r29	; 62
     ea6:	0f be       	out	0x3f, r0	; 63
     ea8:	cd bf       	out	0x3d, r28	; 61
     eaa:	cf 91       	pop	r28
     eac:	df 91       	pop	r29
     eae:	1f 91       	pop	r17
     eb0:	0f 91       	pop	r16
     eb2:	ef 90       	pop	r14
     eb4:	08 95       	ret

00000eb6 <Pipe_ConfigurePipe>:
                        const uint8_t Type,
                        const uint8_t Token,
                        const uint8_t EndpointNumber,
                        const uint16_t Size,
                        const uint8_t Banks)
{
     eb6:	ef 92       	push	r14
     eb8:	0f 93       	push	r16
     eba:	1f 93       	push	r17
     ebc:	9e 2d       	mov	r25, r14
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
     ebe:	80 93 a7 00 	sts	0x00A7, r24
			 *  \pre The currently selected pipe must first be configured properly via \ref Pipe_ConfigurePipe().
			 */
			static inline void Pipe_EnablePipe(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_EnablePipe(void)
			{
				UPCONX |= (1 << PEN);
     ec2:	80 91 a9 00 	lds	r24, 0x00A9
     ec6:	81 60       	ori	r24, 0x01	; 1
     ec8:	80 93 a9 00 	sts	0x00A9, r24
	Pipe_SelectPipe(Number);
	Pipe_EnablePipe();

	UPCFG1X = 0;
     ecc:	10 92 ab 00 	sts	0x00AB, r1

	UPCFG0X = ((Type << EPTYPE0) | Token | ((EndpointNumber & PIPE_EPNUM_MASK) << PEPNUM0));
     ed0:	62 95       	swap	r22
     ed2:	66 0f       	add	r22, r22
     ed4:	66 0f       	add	r22, r22
     ed6:	60 7c       	andi	r22, 0xC0	; 192
     ed8:	64 2b       	or	r22, r20
     eda:	2f 70       	andi	r18, 0x0F	; 15
     edc:	62 2b       	or	r22, r18
     ede:	60 93 aa 00 	sts	0x00AA, r22
     ee2:	28 e0       	ldi	r18, 0x08	; 8
     ee4:	30 e0       	ldi	r19, 0x00	; 0
     ee6:	80 e0       	ldi	r24, 0x00	; 0
     ee8:	03 c0       	rjmp	.+6      	; 0xef0 <Pipe_ConfigurePipe+0x3a>
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while ((CheckBytes < Bytes) && (CheckBytes < PIPE_MAX_SIZE))
				{
					MaskVal++;
     eea:	8f 5f       	subi	r24, 0xFF	; 255
					CheckBytes <<= 1;
     eec:	22 0f       	add	r18, r18
     eee:	33 1f       	adc	r19, r19
			static inline uint8_t Pipe_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while ((CheckBytes < Bytes) && (CheckBytes < PIPE_MAX_SIZE))
     ef0:	20 17       	cp	r18, r16
     ef2:	31 07       	cpc	r19, r17
     ef4:	10 f4       	brcc	.+4      	; 0xefa <Pipe_ConfigurePipe+0x44>
     ef6:	85 30       	cpi	r24, 0x05	; 5
     ef8:	c1 f7       	brne	.-16     	; 0xeea <Pipe_ConfigurePipe+0x34>
	UPCFG1X = ((1 << ALLOC) | Banks | Pipe_BytesToEPSizeMask(Size));
     efa:	92 60       	ori	r25, 0x02	; 2
     efc:	82 95       	swap	r24
     efe:	80 7f       	andi	r24, 0xF0	; 240
     f00:	89 2b       	or	r24, r25
     f02:	80 93 ab 00 	sts	0x00AB, r24

			/** Configures the currently selected pipe to allow for an unlimited number of IN requests. */
			static inline void Pipe_SetInfiniteINRequests(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetInfiniteINRequests(void)
			{
				UPCONX |= (1 << INMODE);
     f06:	80 91 a9 00 	lds	r24, 0x00A9
     f0a:	80 62       	ori	r24, 0x20	; 32
     f0c:	80 93 a9 00 	sts	0x00A9, r24
			 *  \return Boolean true if the selected pipe is configured, false otherwise.
			 */
			static inline bool Pipe_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsConfigured(void)
			{
				return ((UPSTAX & (1 << CFGOK)) ? true : false);
     f10:	80 91 ac 00 	lds	r24, 0x00AC

	Pipe_SetInfiniteINRequests();

	return Pipe_IsConfigured();
}
     f14:	88 1f       	adc	r24, r24
     f16:	88 27       	eor	r24, r24
     f18:	88 1f       	adc	r24, r24
     f1a:	1f 91       	pop	r17
     f1c:	0f 91       	pop	r16
     f1e:	ef 90       	pop	r14
     f20:	08 95       	ret

00000f22 <Pipe_ClearPipes>:

void Pipe_ClearPipes(void)
{
	UPINT = 0;
     f22:	10 92 f8 00 	sts	0x00F8, r1
     f26:	90 e0       	ldi	r25, 0x00	; 0
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
     f28:	90 93 a7 00 	sts	0x00A7, r25

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
	{
		Pipe_SelectPipe(PNum);
		UPIENX  = 0;
     f2c:	10 92 ae 00 	sts	0x00AE, r1
		UPINTX  = 0;
     f30:	10 92 a6 00 	sts	0x00A6, r1
		UPCFG1X = 0;
     f34:	10 92 ab 00 	sts	0x00AB, r1
			 *  from an attached device.
			 */
			static inline void Pipe_DisablePipe(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_DisablePipe(void)
			{
				UPCONX &= ~(1 << PEN);
     f38:	80 91 a9 00 	lds	r24, 0x00A9
     f3c:	8e 7f       	andi	r24, 0xFE	; 254
     f3e:	80 93 a9 00 	sts	0x00A9, r24

void Pipe_ClearPipes(void)
{
	UPINT = 0;

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
     f42:	9f 5f       	subi	r25, 0xFF	; 255
     f44:	97 30       	cpi	r25, 0x07	; 7
     f46:	81 f7       	brne	.-32     	; 0xf28 <Pipe_ClearPipes+0x6>
		UPIENX  = 0;
		UPINTX  = 0;
		UPCFG1X = 0;
		Pipe_DisablePipe();
	}
}
     f48:	08 95       	ret

00000f4a <Pipe_WaitUntilReady>:
			/** Returns the current USB frame number, when in host mode. Every millisecond the USB bus is active (i.e. not suspended)
			 *  the frame number is incremented by one.
			 */
			static inline uint16_t USB_Host_GetFrameNumber(void)
			{
				return UHFNUM;
     f4a:	40 91 a2 00 	lds	r20, 0x00A2
     f4e:	50 91 a3 00 	lds	r21, 0x00A3
     f52:	24 e6       	ldi	r18, 0x64	; 100
			 *  \return The current pipe token, as a PIPE_TOKEN_* mask.
			 */
			static inline uint8_t Pipe_GetPipeToken(void) ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetPipeToken(void)
			{
				return (UPCFG0X & (0x03 << PTOKEN0));
     f54:	80 91 aa 00 	lds	r24, 0x00AA

	uint16_t PreviousFrameNumber = USB_Host_GetFrameNumber();

	for (;;)
	{
		if (Pipe_GetPipeToken() == PIPE_TOKEN_IN)
     f58:	80 73       	andi	r24, 0x30	; 48
     f5a:	80 31       	cpi	r24, 0x10	; 16
     f5c:	29 f4       	brne	.+10     	; 0xf68 <Pipe_WaitUntilReady+0x1e>
			 *  \return Boolean true if the current pipe has received an IN packet, false otherwise.
			 */
			static inline bool Pipe_IsINReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsINReceived(void)
			{
				return ((UPINTX & (1 << RXINI)) ? true : false);
     f5e:	80 91 a6 00 	lds	r24, 0x00A6
		{
			if (Pipe_IsINReceived())
     f62:	80 ff       	sbrs	r24, 0
     f64:	05 c0       	rjmp	.+10     	; 0xf70 <Pipe_WaitUntilReady+0x26>
     f66:	1c c0       	rjmp	.+56     	; 0xfa0 <Pipe_WaitUntilReady+0x56>
			 *  \return Boolean true if the current pipe is ready for an OUT packet, false otherwise.
			 */
			static inline bool Pipe_IsOUTReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsOUTReady(void)
			{
				return ((UPINTX & (1 << TXOUTI)) ? true : false);
     f68:	80 91 a6 00 	lds	r24, 0x00A6
			  return PIPE_READYWAIT_NoError;
		}
		else
		{
			if (Pipe_IsOUTReady())
     f6c:	82 fd       	sbrc	r24, 2
     f6e:	18 c0       	rjmp	.+48     	; 0xfa0 <Pipe_WaitUntilReady+0x56>
			 *  \return Boolean true if the current pipe has been stalled by the attached device, false otherwise.
			 */
			static inline bool Pipe_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsStalled(void)
			{
				return ((UPINTX & (1 << RXSTALLI)) ? true : false);
     f70:	80 91 a6 00 	lds	r24, 0x00A6
			  return PIPE_READYWAIT_NoError;
		}

		if (Pipe_IsStalled())
     f74:	81 ff       	sbrs	r24, 1
     f76:	02 c0       	rjmp	.+4      	; 0xf7c <Pipe_WaitUntilReady+0x32>
     f78:	81 e0       	ldi	r24, 0x01	; 1
     f7a:	08 95       	ret
		  return PIPE_READYWAIT_PipeStalled;
		else if (USB_HostState == HOST_STATE_Unattached)
     f7c:	80 91 23 05 	lds	r24, 0x0523
     f80:	82 30       	cpi	r24, 0x02	; 2
     f82:	79 f0       	breq	.+30     	; 0xfa2 <Pipe_WaitUntilReady+0x58>
     f84:	80 91 a2 00 	lds	r24, 0x00A2
     f88:	90 91 a3 00 	lds	r25, 0x00A3
		  return PIPE_READYWAIT_DeviceDisconnected;

		uint16_t CurrentFrameNumber = USB_Host_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
     f8c:	84 17       	cp	r24, r20
     f8e:	95 07       	cpc	r25, r21
     f90:	09 f3       	breq	.-62     	; 0xf54 <Pipe_WaitUntilReady+0xa>
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
     f92:	22 23       	and	r18, r18
     f94:	11 f4       	brne	.+4      	; 0xf9a <Pipe_WaitUntilReady+0x50>
     f96:	83 e0       	ldi	r24, 0x03	; 3
     f98:	08 95       	ret
     f9a:	21 50       	subi	r18, 0x01	; 1
     f9c:	ac 01       	movw	r20, r24
     f9e:	da cf       	rjmp	.-76     	; 0xf54 <Pipe_WaitUntilReady+0xa>
     fa0:	80 e0       	ldi	r24, 0x00	; 0
			  return PIPE_READYWAIT_Timeout;
		}
	}
}
     fa2:	08 95       	ret

00000fa4 <USB_ResetInterface>:
{
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
     fa4:	6e d0       	rcall	.+220    	; 0x1082 <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
     fa6:	75 d0       	rcall	.+234    	; 0x1092 <USB_INT_ClearAllInterrupts>
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				const uint8_t Temp = USBCON;
     fa8:	80 91 d8 00 	lds	r24, 0x00D8

				USBCON = (Temp & ~(1 << USBE));
     fac:	98 2f       	mov	r25, r24
     fae:	9f 77       	andi	r25, 0x7F	; 127
     fb0:	90 93 d8 00 	sts	0x00D8, r25
				USBCON = (Temp |  (1 << USBE));
     fb4:	80 68       	ori	r24, 0x80	; 128
     fb6:	80 93 d8 00 	sts	0x00D8, r24

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR  = USB_PLL_PSC;
     fba:	8c e0       	ldi	r24, 0x0C	; 12
     fbc:	89 bd       	out	0x29, r24	; 41
				PLLCSR |= (1 << PLLE);
     fbe:	89 b5       	in	r24, 0x29	; 41
     fc0:	82 60       	ori	r24, 0x02	; 2
     fc2:	89 bd       	out	0x29, r24	; 41
		#if defined(USB_SERIES_4_AVR)
		PLLFRQ = ((1 << PLLUSB) | (1 << PDIV3) | (1 << PDIV1));
		#endif

		USB_PLL_On();
		while (!(USB_PLL_IsReady()));
     fc4:	09 b4       	in	r0, 0x29	; 41
     fc6:	00 fe       	sbrs	r0, 0
     fc8:	fd cf       	rjmp	.-6      	; 0xfc4 <USB_ResetInterface+0x20>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON  &= ~(1 << FRZCLK);
     fca:	80 91 d8 00 	lds	r24, 0x00D8
     fce:	8f 7d       	andi	r24, 0xDF	; 223
     fd0:	80 93 d8 00 	sts	0x00D8, r24
		#endif
	}
	else if (USB_CurrentMode == USB_MODE_Host)
	{
		#if defined(USB_CAN_BE_HOST)
		UHWCON &= ~(1 << UIMOD);
     fd4:	80 91 d7 00 	lds	r24, 0x00D7
     fd8:	8f 77       	andi	r24, 0x7F	; 127
     fda:	80 93 d7 00 	sts	0x00D7, r24
#endif

#if defined(USB_CAN_BE_HOST)
static void USB_Init_Host(void)
{
	USB_HostState       = HOST_STATE_Unattached;
     fde:	82 e0       	ldi	r24, 0x02	; 2
     fe0:	80 93 23 05 	sts	0x0523, r24
	USB_ControlPipeSize = PIPE_CONTROLPIPE_DEFAULT_SIZE;
     fe4:	80 e4       	ldi	r24, 0x40	; 64
     fe6:	80 93 2c 01 	sts	0x012C, r24
	#if !defined(__DOXYGEN__)
		/* Macros: */
			static inline void USB_Host_HostMode_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_HostMode_On(void)
			{
				USBCON |=  (1 << HOST);
     fea:	80 91 d8 00 	lds	r24, 0x00D8
     fee:	80 64       	ori	r24, 0x40	; 64
     ff0:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
     ff4:	80 91 dd 00 	lds	r24, 0x00DD
     ff8:	81 60       	ori	r24, 0x01	; 1
     ffa:	80 93 dd 00 	sts	0x00DD, r24
			}

			static inline void USB_Host_VBUS_Manual_Enable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Manual_Enable(void)
			{
				OTGCON |=  (1 << VBUSHWC);
     ffe:	80 91 dd 00 	lds	r24, 0x00DD
    1002:	84 60       	ori	r24, 0x04	; 4
    1004:	80 93 dd 00 	sts	0x00DD, r24
				UHWCON &= ~(1 << UVCONE);
    1008:	80 91 d7 00 	lds	r24, 0x00D7
    100c:	8f 7e       	andi	r24, 0xEF	; 239
    100e:	80 93 d7 00 	sts	0x00D7, r24

				DDRE   |=  (1 << 7);
    1012:	6f 9a       	sbi	0x0d, 7	; 13
			}

			static inline void USB_Host_VBUS_Manual_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Manual_On(void)
			{
				PORTE  |=  (1 << 7);
    1014:	77 9a       	sbi	0x0e, 7	; 14

	USB_Host_VBUS_Auto_Off();
	USB_Host_VBUS_Manual_Enable();
	USB_Host_VBUS_Manual_On();

	USB_INT_Enable(USB_INT_SRPI);
    1016:	80 91 de 00 	lds	r24, 0x00DE
    101a:	81 60       	ori	r24, 0x01	; 1
    101c:	80 93 de 00 	sts	0x00DE, r24
	USB_INT_Enable(USB_INT_BCERRI);
    1020:	80 91 de 00 	lds	r24, 0x00DE
    1024:	84 60       	ori	r24, 0x04	; 4
    1026:	80 93 de 00 	sts	0x00DE, r24
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
    102a:	80 91 e0 00 	lds	r24, 0x00E0
    102e:	8e 7f       	andi	r24, 0xFE	; 254
    1030:	80 93 e0 00 	sts	0x00E0, r24

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON  |=  (1 << OTGPADE);
    1034:	80 91 d8 00 	lds	r24, 0x00D8
    1038:	80 61       	ori	r24, 0x10	; 16
    103a:	80 93 d8 00 	sts	0x00D8, r24
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
    103e:	08 95       	ret

00001040 <USB_Init>:

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON  |=  (1 << UVREGE);
    1040:	e7 ed       	ldi	r30, 0xD7	; 215
    1042:	f0 e0       	ldi	r31, 0x00	; 0
    1044:	80 81       	ld	r24, Z
    1046:	81 60       	ori	r24, 0x01	; 1
    1048:	80 83       	st	Z, r24
	{
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
    104a:	81 e0       	ldi	r24, 0x01	; 1
    104c:	80 93 1a 05 	sts	0x051A, r24

	USB_ResetInterface();
}
    1050:	a9 cf       	rjmp	.-174    	; 0xfa4 <USB_ResetInterface>

00001052 <USB_ShutDown>:

void USB_ShutDown(void)
{
	USB_INT_DisableAllInterrupts();
    1052:	17 d0       	rcall	.+46     	; 0x1082 <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
    1054:	1e d0       	rcall	.+60     	; 0x1092 <USB_INT_ClearAllInterrupts>
			 *  enumerating the device once attached until \ref USB_Attach() is called.
			 */
			static inline void USB_Detach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Detach(void)
			{
				UDCON  |=  (1 << DETACH);
    1056:	e0 ee       	ldi	r30, 0xE0	; 224
    1058:	f0 e0       	ldi	r31, 0x00	; 0
    105a:	80 81       	ld	r24, Z
    105c:	81 60       	ori	r24, 0x01	; 1
    105e:	80 83       	st	Z, r24
			}

			static inline void USB_Controller_Disable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Disable(void)
			{
				USBCON  &= ~(1 << USBE);
    1060:	a8 ed       	ldi	r26, 0xD8	; 216
    1062:	b0 e0       	ldi	r27, 0x00	; 0
    1064:	8c 91       	ld	r24, X
    1066:	8f 77       	andi	r24, 0x7F	; 127
    1068:	8c 93       	st	X, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR  = 0;
    106a:	19 bc       	out	0x29, r1	; 41

			static inline void USB_REG_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_Off(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON  &= ~(1 << UVREGE);
    106c:	e7 ed       	ldi	r30, 0xD7	; 215
    106e:	f0 e0       	ldi	r31, 0x00	; 0
    1070:	80 81       	ld	r24, Z
    1072:	8e 7f       	andi	r24, 0xFE	; 254
    1074:	80 83       	st	Z, r24
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON  &= ~(1 << OTGPADE);
    1076:	8c 91       	ld	r24, X
    1078:	8f 7e       	andi	r24, 0xEF	; 239
    107a:	8c 93       	st	X, r24

	#if defined(USB_CAN_BE_BOTH)
	USB_CurrentMode = USB_MODE_None;
	#endif

	USB_IsInitialized = false;
    107c:	10 92 1a 05 	sts	0x051A, r1
}
    1080:	08 95       	ret

00001082 <USB_INT_DisableAllInterrupts>:
#include "USBInterrupt.h"

void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
    1082:	e8 ed       	ldi	r30, 0xD8	; 216
    1084:	f0 e0       	ldi	r31, 0x00	; 0
    1086:	80 81       	ld	r24, Z
    1088:	8c 7f       	andi	r24, 0xFC	; 252
    108a:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_BOTH)
	OTGIEN  = 0;
	#endif

	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
    108c:	10 92 a0 00 	sts	0x00A0, r1
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
	#endif
}
    1090:	08 95       	ret

00001092 <USB_INT_ClearAllInterrupts>:

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT  = 0;
    1092:	10 92 da 00 	sts	0x00DA, r1
	#if defined(USB_CAN_BE_BOTH)
	OTGINT  = 0;
	#endif

	#if defined(USB_CAN_BE_HOST)
	UHINT   = 0;
    1096:	10 92 9f 00 	sts	0x009F, r1
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT   = 0;
	#endif
}
    109a:	08 95       	ret

0000109c <__vector_10>:

ISR(USB_GEN_vect, ISR_BLOCK)
{
    109c:	1f 92       	push	r1
    109e:	0f 92       	push	r0
    10a0:	0f b6       	in	r0, 0x3f	; 63
    10a2:	0f 92       	push	r0
    10a4:	0b b6       	in	r0, 0x3b	; 59
    10a6:	0f 92       	push	r0
    10a8:	11 24       	eor	r1, r1
    10aa:	2f 93       	push	r18
    10ac:	3f 93       	push	r19
    10ae:	4f 93       	push	r20
    10b0:	5f 93       	push	r21
    10b2:	6f 93       	push	r22
    10b4:	7f 93       	push	r23
    10b6:	8f 93       	push	r24
    10b8:	9f 93       	push	r25
    10ba:	af 93       	push	r26
    10bc:	bf 93       	push	r27
    10be:	ef 93       	push	r30
    10c0:	ff 93       	push	r31
	}
	#endif
	#endif

	#if defined(USB_CAN_BE_HOST)
	if (USB_INT_HasOccurred(USB_INT_DDISCI) && USB_INT_IsEnabled(USB_INT_DDISCI))
    10c2:	80 91 9f 00 	lds	r24, 0x009F
    10c6:	81 ff       	sbrs	r24, 1
    10c8:	15 c0       	rjmp	.+42     	; 0x10f4 <__vector_10+0x58>
    10ca:	80 91 a0 00 	lds	r24, 0x00A0
    10ce:	81 ff       	sbrs	r24, 1
    10d0:	11 c0       	rjmp	.+34     	; 0x10f4 <__vector_10+0x58>
	{
		USB_INT_Clear(USB_INT_DDISCI);
    10d2:	80 91 9f 00 	lds	r24, 0x009F
    10d6:	8d 7f       	andi	r24, 0xFD	; 253
    10d8:	80 93 9f 00 	sts	0x009F, r24
		USB_INT_Clear(USB_INT_DCONNI);
    10dc:	80 91 9f 00 	lds	r24, 0x009F
    10e0:	8e 7f       	andi	r24, 0xFE	; 254
    10e2:	80 93 9f 00 	sts	0x009F, r24
		USB_INT_Disable(USB_INT_DDISCI);
    10e6:	80 91 a0 00 	lds	r24, 0x00A0
    10ea:	8d 7f       	andi	r24, 0xFD	; 253
    10ec:	80 93 a0 00 	sts	0x00A0, r24

		EVENT_USB_Host_DeviceUnattached();
    10f0:	d6 d9       	rcall	.-3156   	; 0x49e <EVENT_USB_Host_DeviceUnattached>

		USB_ResetInterface();
    10f2:	58 df       	rcall	.-336    	; 0xfa4 <USB_ResetInterface>
	}

	if (USB_INT_HasOccurred(USB_INT_VBERRI) && USB_INT_IsEnabled(USB_INT_VBERRI))
    10f4:	80 91 df 00 	lds	r24, 0x00DF
    10f8:	81 ff       	sbrs	r24, 1
    10fa:	15 c0       	rjmp	.+42     	; 0x1126 <__vector_10+0x8a>
    10fc:	80 91 de 00 	lds	r24, 0x00DE
    1100:	81 ff       	sbrs	r24, 1
    1102:	11 c0       	rjmp	.+34     	; 0x1126 <__vector_10+0x8a>
	{
		USB_INT_Clear(USB_INT_VBERRI);
    1104:	80 91 df 00 	lds	r24, 0x00DF
    1108:	8d 7f       	andi	r24, 0xFD	; 253
    110a:	80 93 df 00 	sts	0x00DF, r24
			}

			static inline void USB_Host_VBUS_Manual_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Manual_Off(void)
			{
				PORTE  &= ~(1 << 7);
    110e:	77 98       	cbi	0x0e, 7	; 14
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
    1110:	80 91 dd 00 	lds	r24, 0x00DD
    1114:	81 60       	ori	r24, 0x01	; 1
    1116:	80 93 dd 00 	sts	0x00DD, r24

		USB_Host_VBUS_Manual_Off();
		USB_Host_VBUS_Auto_Off();

		EVENT_USB_Host_HostError(HOST_ERROR_VBusVoltageDip);
    111a:	80 e0       	ldi	r24, 0x00	; 0
    111c:	72 db       	rcall	.-2332   	; 0x802 <EVENT_USB_Host_HostError>
		EVENT_USB_Host_DeviceUnattached();
    111e:	bf d9       	rcall	.-3202   	; 0x49e <EVENT_USB_Host_DeviceUnattached>

		USB_HostState = HOST_STATE_Unattached;
    1120:	82 e0       	ldi	r24, 0x02	; 2
    1122:	80 93 23 05 	sts	0x0523, r24
	}

	if (USB_INT_HasOccurred(USB_INT_SRPI) && USB_INT_IsEnabled(USB_INT_SRPI))
    1126:	80 91 df 00 	lds	r24, 0x00DF
    112a:	80 ff       	sbrs	r24, 0
    112c:	17 c0       	rjmp	.+46     	; 0x115c <__vector_10+0xc0>
    112e:	80 91 de 00 	lds	r24, 0x00DE
    1132:	80 ff       	sbrs	r24, 0
    1134:	13 c0       	rjmp	.+38     	; 0x115c <__vector_10+0xc0>
	{
		USB_INT_Clear(USB_INT_SRPI);
    1136:	80 91 df 00 	lds	r24, 0x00DF
    113a:	8e 7f       	andi	r24, 0xFE	; 254
    113c:	80 93 df 00 	sts	0x00DF, r24
		USB_INT_Disable(USB_INT_SRPI);
    1140:	80 91 de 00 	lds	r24, 0x00DE
    1144:	8e 7f       	andi	r24, 0xFE	; 254
    1146:	80 93 de 00 	sts	0x00DE, r24

		EVENT_USB_Host_DeviceAttached();
    114a:	b2 d9       	rcall	.-3228   	; 0x4b0 <EVENT_USB_Host_DeviceAttached>

		USB_INT_Enable(USB_INT_DDISCI);
    114c:	80 91 a0 00 	lds	r24, 0x00A0
    1150:	82 60       	ori	r24, 0x02	; 2
    1152:	80 93 a0 00 	sts	0x00A0, r24

		USB_HostState = HOST_STATE_Powered;
    1156:	83 e0       	ldi	r24, 0x03	; 3
    1158:	80 93 23 05 	sts	0x0523, r24
	}

	if (USB_INT_HasOccurred(USB_INT_BCERRI) && USB_INT_IsEnabled(USB_INT_BCERRI))
    115c:	80 91 df 00 	lds	r24, 0x00DF
    1160:	82 ff       	sbrs	r24, 2
    1162:	0e c0       	rjmp	.+28     	; 0x1180 <__vector_10+0xe4>
    1164:	80 91 de 00 	lds	r24, 0x00DE
    1168:	82 ff       	sbrs	r24, 2
    116a:	0a c0       	rjmp	.+20     	; 0x1180 <__vector_10+0xe4>
	{
		USB_INT_Clear(USB_INT_BCERRI);
    116c:	80 91 df 00 	lds	r24, 0x00DF
    1170:	8b 7f       	andi	r24, 0xFB	; 251
    1172:	80 93 df 00 	sts	0x00DF, r24

		EVENT_USB_Host_DeviceEnumerationFailed(HOST_ENUMERROR_NoDeviceDetected, 0);
    1176:	82 e0       	ldi	r24, 0x02	; 2
    1178:	60 e0       	ldi	r22, 0x00	; 0
    117a:	a3 d9       	rcall	.-3258   	; 0x4c2 <EVENT_USB_Host_DeviceEnumerationFailed>
		EVENT_USB_Host_DeviceUnattached();
    117c:	90 d9       	rcall	.-3296   	; 0x49e <EVENT_USB_Host_DeviceUnattached>

		USB_ResetInterface();
    117e:	12 df       	rcall	.-476    	; 0xfa4 <USB_ResetInterface>
	}

	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_HSOFI) && USB_INT_IsEnabled(USB_INT_HSOFI))
    1180:	80 91 9f 00 	lds	r24, 0x009F
    1184:	85 ff       	sbrs	r24, 5
    1186:	0a c0       	rjmp	.+20     	; 0x119c <__vector_10+0x100>
    1188:	80 91 a0 00 	lds	r24, 0x00A0
    118c:	85 ff       	sbrs	r24, 5
    118e:	06 c0       	rjmp	.+12     	; 0x119c <__vector_10+0x100>
	{
		USB_INT_Clear(USB_INT_HSOFI);
    1190:	80 91 9f 00 	lds	r24, 0x009F
    1194:	8f 7d       	andi	r24, 0xDF	; 223
    1196:	80 93 9f 00 	sts	0x009F, r24

		EVENT_USB_Host_StartOfFrame();
    119a:	ae d0       	rcall	.+348    	; 0x12f8 <USB_Event_Stub>
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
    119c:	ff 91       	pop	r31
    119e:	ef 91       	pop	r30
    11a0:	bf 91       	pop	r27
    11a2:	af 91       	pop	r26
    11a4:	9f 91       	pop	r25
    11a6:	8f 91       	pop	r24
    11a8:	7f 91       	pop	r23
    11aa:	6f 91       	pop	r22
    11ac:	5f 91       	pop	r21
    11ae:	4f 91       	pop	r20
    11b0:	3f 91       	pop	r19
    11b2:	2f 91       	pop	r18
    11b4:	0f 90       	pop	r0
    11b6:	0b be       	out	0x3b, r0	; 59
    11b8:	0f 90       	pop	r0
    11ba:	0f be       	out	0x3f, r0	; 63
    11bc:	0f 90       	pop	r0
    11be:	1f 90       	pop	r1
    11c0:	18 95       	reti

000011c2 <USB_GetNextDescriptorComp>:

uint8_t USB_GetNextDescriptorComp(uint16_t* const BytesRem, void** const CurrConfigLoc, ConfigComparatorPtr_t const ComparatorRoutine)
{
    11c2:	af 92       	push	r10
    11c4:	bf 92       	push	r11
    11c6:	cf 92       	push	r12
    11c8:	df 92       	push	r13
    11ca:	ef 92       	push	r14
    11cc:	ff 92       	push	r15
    11ce:	0f 93       	push	r16
    11d0:	1f 93       	push	r17
    11d2:	cf 93       	push	r28
    11d4:	df 93       	push	r29
    11d6:	7c 01       	movw	r14, r24
    11d8:	8b 01       	movw	r16, r22
    11da:	5a 01       	movw	r10, r20
    11dc:	21 c0       	rjmp	.+66     	; 0x1220 <USB_GetNextDescriptorComp+0x5e>
	uint8_t ErrorCode;

	while (*BytesRem)
	{
		uint8_t* PrevDescLoc  = *CurrConfigLoc;
    11de:	f8 01       	movw	r30, r16
    11e0:	c0 81       	ld	r28, Z
    11e2:	d1 81       	ldd	r29, Z+1	; 0x01
			static inline void USB_GetNextDescriptor(uint16_t* const BytesRem,
			                                         void** CurrConfigLoc) ATTR_NON_NULL_PTR_ARG(1) ATTR_NON_NULL_PTR_ARG(2);
			static inline void USB_GetNextDescriptor(uint16_t* const BytesRem,
			                                         void** CurrConfigLoc)
			{
				uint16_t CurrDescriptorSize = DESCRIPTOR_CAST(*CurrConfigLoc, USB_Descriptor_Header_t).Size;
    11e4:	88 81       	ld	r24, Y
    11e6:	90 e0       	ldi	r25, 0x00	; 0

				*CurrConfigLoc  = ((uint8_t*)*CurrConfigLoc) + CurrDescriptorSize;
    11e8:	9e 01       	movw	r18, r28
    11ea:	28 0f       	add	r18, r24
    11ec:	39 1f       	adc	r19, r25
    11ee:	31 83       	std	Z+1, r19	; 0x01
    11f0:	20 83       	st	Z, r18
				*BytesRem      -= CurrDescriptorSize;
    11f2:	f7 01       	movw	r30, r14
    11f4:	20 81       	ld	r18, Z
    11f6:	31 81       	ldd	r19, Z+1	; 0x01
    11f8:	28 1b       	sub	r18, r24
    11fa:	39 0b       	sbc	r19, r25
    11fc:	31 83       	std	Z+1, r19	; 0x01
    11fe:	20 83       	st	Z, r18
		uint16_t PrevBytesRem = *BytesRem;

		USB_GetNextDescriptor(BytesRem, CurrConfigLoc);

		if ((ErrorCode = ComparatorRoutine(*CurrConfigLoc)) != DESCRIPTOR_SEARCH_NotFound)
    1200:	f8 01       	movw	r30, r16
    1202:	80 81       	ld	r24, Z
    1204:	91 81       	ldd	r25, Z+1	; 0x01
    1206:	f5 01       	movw	r30, r10
    1208:	09 95       	icall
    120a:	82 30       	cpi	r24, 0x02	; 2
    120c:	49 f0       	breq	.+18     	; 0x1220 <USB_GetNextDescriptorComp+0x5e>
		{
			if (ErrorCode == DESCRIPTOR_SEARCH_Fail)
    120e:	81 30       	cpi	r24, 0x01	; 1
    1210:	71 f4       	brne	.+28     	; 0x122e <USB_GetNextDescriptorComp+0x6c>
			{
				*CurrConfigLoc = PrevDescLoc;
    1212:	f8 01       	movw	r30, r16
    1214:	c0 83       	st	Z, r28
    1216:	d1 83       	std	Z+1, r29	; 0x01
				*BytesRem      = PrevBytesRem;
    1218:	f7 01       	movw	r30, r14
    121a:	d1 82       	std	Z+1, r13	; 0x01
    121c:	c0 82       	st	Z, r12
    121e:	07 c0       	rjmp	.+14     	; 0x122e <USB_GetNextDescriptorComp+0x6c>

uint8_t USB_GetNextDescriptorComp(uint16_t* const BytesRem, void** const CurrConfigLoc, ConfigComparatorPtr_t const ComparatorRoutine)
{
	uint8_t ErrorCode;

	while (*BytesRem)
    1220:	f7 01       	movw	r30, r14
    1222:	c0 80       	ld	r12, Z
    1224:	d1 80       	ldd	r13, Z+1	; 0x01
    1226:	c1 14       	cp	r12, r1
    1228:	d1 04       	cpc	r13, r1
    122a:	c9 f6       	brne	.-78     	; 0x11de <USB_GetNextDescriptorComp+0x1c>
    122c:	82 e0       	ldi	r24, 0x02	; 2
			return ErrorCode;
		}
	}

	return DESCRIPTOR_SEARCH_COMP_EndOfDescriptor;
}
    122e:	df 91       	pop	r29
    1230:	cf 91       	pop	r28
    1232:	1f 91       	pop	r17
    1234:	0f 91       	pop	r16
    1236:	ff 90       	pop	r15
    1238:	ef 90       	pop	r14
    123a:	df 90       	pop	r13
    123c:	cf 90       	pop	r12
    123e:	bf 90       	pop	r11
    1240:	af 90       	pop	r10
    1242:	08 95       	ret

00001244 <USB_Host_GetDeviceConfigDescriptor>:
#include "ConfigDescriptor.h"

#if defined(USB_CAN_BE_HOST)
uint8_t USB_Host_GetDeviceConfigDescriptor(uint8_t ConfigNumber, uint16_t* const ConfigSizePtr,
                                           void* BufferPtr, uint16_t BufferSize)
{
    1244:	cf 92       	push	r12
    1246:	df 92       	push	r13
    1248:	ef 92       	push	r14
    124a:	ff 92       	push	r15
    124c:	0f 93       	push	r16
    124e:	1f 93       	push	r17
    1250:	df 93       	push	r29
    1252:	cf 93       	push	r28
    1254:	cd b7       	in	r28, 0x3d	; 61
    1256:	de b7       	in	r29, 0x3e	; 62
    1258:	29 97       	sbiw	r28, 0x09	; 9
    125a:	0f b6       	in	r0, 0x3f	; 63
    125c:	f8 94       	cli
    125e:	de bf       	out	0x3e, r29	; 62
    1260:	0f be       	out	0x3f, r0	; 63
    1262:	cd bf       	out	0x3d, r28	; 61
    1264:	6b 01       	movw	r12, r22
    1266:	8a 01       	movw	r16, r20
    1268:	79 01       	movw	r14, r18
	uint8_t ErrorCode;
	uint8_t ConfigHeader[sizeof(USB_Descriptor_Configuration_Header_t)];

	USB_ControlRequest = (USB_Request_Header_t)
    126a:	90 e8       	ldi	r25, 0x80	; 128
    126c:	90 93 1b 05 	sts	0x051B, r25
    1270:	96 e0       	ldi	r25, 0x06	; 6
    1272:	90 93 1c 05 	sts	0x051C, r25
    1276:	90 e0       	ldi	r25, 0x00	; 0
    1278:	01 97       	sbiw	r24, 0x01	; 1
    127a:	92 60       	ori	r25, 0x02	; 2
    127c:	90 93 1e 05 	sts	0x051E, r25
    1280:	80 93 1d 05 	sts	0x051D, r24
    1284:	10 92 20 05 	sts	0x0520, r1
    1288:	10 92 1f 05 	sts	0x051F, r1
    128c:	89 e0       	ldi	r24, 0x09	; 9
    128e:	90 e0       	ldi	r25, 0x00	; 0
    1290:	90 93 22 05 	sts	0x0522, r25
    1294:	80 93 21 05 	sts	0x0521, r24
    1298:	10 92 a7 00 	sts	0x00A7, r1
			.wLength       = sizeof(USB_Descriptor_Configuration_Header_t),
		};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	if ((ErrorCode = USB_Host_SendControlRequest(ConfigHeader)) != HOST_SENDCONTROL_Successful)
    129c:	ce 01       	movw	r24, r28
    129e:	01 96       	adiw	r24, 0x01	; 1
    12a0:	55 d0       	rcall	.+170    	; 0x134c <USB_Host_SendControlRequest>
    12a2:	28 2f       	mov	r18, r24
    12a4:	88 23       	and	r24, r24
    12a6:	c1 f4       	brne	.+48     	; 0x12d8 <USB_Host_GetDeviceConfigDescriptor+0x94>
	  return ErrorCode;

	*ConfigSizePtr = DESCRIPTOR_PCAST(ConfigHeader, USB_Descriptor_Configuration_Header_t)->TotalConfigurationSize;
    12a8:	8b 81       	ldd	r24, Y+3	; 0x03
    12aa:	9c 81       	ldd	r25, Y+4	; 0x04
    12ac:	f6 01       	movw	r30, r12
    12ae:	91 83       	std	Z+1, r25	; 0x01
    12b0:	80 83       	st	Z, r24

	if (*ConfigSizePtr > BufferSize)
    12b2:	e8 16       	cp	r14, r24
    12b4:	f9 06       	cpc	r15, r25
    12b6:	10 f4       	brcc	.+4      	; 0x12bc <USB_Host_GetDeviceConfigDescriptor+0x78>
    12b8:	25 e0       	ldi	r18, 0x05	; 5
    12ba:	0e c0       	rjmp	.+28     	; 0x12d8 <USB_Host_GetDeviceConfigDescriptor+0x94>
	  return HOST_GETCONFIG_BuffOverflow;

	USB_ControlRequest.wLength = *ConfigSizePtr;
    12bc:	90 93 22 05 	sts	0x0522, r25
    12c0:	80 93 21 05 	sts	0x0521, r24

	if ((ErrorCode = USB_Host_SendControlRequest(BufferPtr)) != HOST_SENDCONTROL_Successful)
    12c4:	c8 01       	movw	r24, r16
    12c6:	42 d0       	rcall	.+132    	; 0x134c <USB_Host_SendControlRequest>
    12c8:	28 2f       	mov	r18, r24
    12ca:	88 23       	and	r24, r24
    12cc:	29 f4       	brne	.+10     	; 0x12d8 <USB_Host_GetDeviceConfigDescriptor+0x94>
	  return ErrorCode;

	if (DESCRIPTOR_TYPE(BufferPtr) != DTYPE_Configuration)
    12ce:	f8 01       	movw	r30, r16
    12d0:	81 81       	ldd	r24, Z+1	; 0x01
    12d2:	82 30       	cpi	r24, 0x02	; 2
    12d4:	09 f0       	breq	.+2      	; 0x12d8 <USB_Host_GetDeviceConfigDescriptor+0x94>
    12d6:	26 e0       	ldi	r18, 0x06	; 6
	  return HOST_GETCONFIG_InvalidData;

	return HOST_GETCONFIG_Successful;
}
    12d8:	82 2f       	mov	r24, r18
    12da:	29 96       	adiw	r28, 0x09	; 9
    12dc:	0f b6       	in	r0, 0x3f	; 63
    12de:	f8 94       	cli
    12e0:	de bf       	out	0x3e, r29	; 62
    12e2:	0f be       	out	0x3f, r0	; 63
    12e4:	cd bf       	out	0x3d, r28	; 61
    12e6:	cf 91       	pop	r28
    12e8:	df 91       	pop	r29
    12ea:	1f 91       	pop	r17
    12ec:	0f 91       	pop	r16
    12ee:	ff 90       	pop	r15
    12f0:	ef 90       	pop	r14
    12f2:	df 90       	pop	r13
    12f4:	cf 90       	pop	r12
    12f6:	08 95       	ret

000012f8 <USB_Event_Stub>:
#include "Events.h"

void USB_Event_Stub(void)
{

}
    12f8:	08 95       	ret

000012fa <USB_Host_WaitForIOS>:

	return ReturnStatus;
}

static uint8_t USB_Host_WaitForIOS(const uint8_t WaitType)
{
    12fa:	1f 93       	push	r17
    12fc:	cf 93       	push	r28
    12fe:	df 93       	push	r29
    1300:	18 2f       	mov	r17, r24
    1302:	c8 ee       	ldi	r28, 0xE8	; 232
    1304:	d3 e0       	ldi	r29, 0x03	; 3
    1306:	09 c0       	rjmp	.+18     	; 0x131a <USB_Host_WaitForIOS+0x20>
	         ((WaitType == USB_HOST_WAITFOR_InReceived) && Pipe_IsINReceived()) ||
	         ((WaitType == USB_HOST_WAITFOR_OutReady)   && Pipe_IsOUTReady())))
	{
		uint8_t ErrorCode;

		if ((ErrorCode = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
    1308:	81 e0       	ldi	r24, 0x01	; 1
    130a:	f8 db       	rcall	.-2064   	; 0xafc <USB_Host_WaitMS>
    130c:	88 23       	and	r24, r24
    130e:	d1 f4       	brne	.+52     	; 0x1344 <USB_Host_WaitForIOS+0x4a>
		  return ErrorCode;

		if (!(TimeoutCounter--))
    1310:	20 97       	sbiw	r28, 0x00	; 0
    1312:	11 f4       	brne	.+4      	; 0x1318 <USB_Host_WaitForIOS+0x1e>
    1314:	84 e0       	ldi	r24, 0x04	; 4
    1316:	16 c0       	rjmp	.+44     	; 0x1344 <USB_Host_WaitForIOS+0x4a>
    1318:	21 97       	sbiw	r28, 0x01	; 1
	uint8_t  TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#else
	uint16_t TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#endif

	while (!(((WaitType == USB_HOST_WAITFOR_SetupSent)  && Pipe_IsSETUPSent())  ||
    131a:	11 23       	and	r17, r17
    131c:	29 f4       	brne	.+10     	; 0x1328 <USB_Host_WaitForIOS+0x2e>
			 *  \return Boolean true if the current pipe is ready for a SETUP packet, false otherwise.
			 */
			static inline bool Pipe_IsSETUPSent(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsSETUPSent(void)
			{
				return ((UPINTX & (1 << TXSTPI)) ? true : false);
    131e:	80 91 a6 00 	lds	r24, 0x00A6
    1322:	83 ff       	sbrs	r24, 3
    1324:	f1 cf       	rjmp	.-30     	; 0x1308 <USB_Host_WaitForIOS+0xe>
    1326:	0d c0       	rjmp	.+26     	; 0x1342 <USB_Host_WaitForIOS+0x48>
    1328:	11 30       	cpi	r17, 0x01	; 1
    132a:	29 f4       	brne	.+10     	; 0x1336 <USB_Host_WaitForIOS+0x3c>
			 *  \return Boolean true if the current pipe has received an IN packet, false otherwise.
			 */
			static inline bool Pipe_IsINReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsINReceived(void)
			{
				return ((UPINTX & (1 << RXINI)) ? true : false);
    132c:	80 91 a6 00 	lds	r24, 0x00A6
    1330:	80 ff       	sbrs	r24, 0
    1332:	ea cf       	rjmp	.-44     	; 0x1308 <USB_Host_WaitForIOS+0xe>
    1334:	06 c0       	rjmp	.+12     	; 0x1342 <USB_Host_WaitForIOS+0x48>
    1336:	12 30       	cpi	r17, 0x02	; 2
    1338:	39 f7       	brne	.-50     	; 0x1308 <USB_Host_WaitForIOS+0xe>
			 *  \return Boolean true if the current pipe is ready for an OUT packet, false otherwise.
			 */
			static inline bool Pipe_IsOUTReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsOUTReady(void)
			{
				return ((UPINTX & (1 << TXOUTI)) ? true : false);
    133a:	80 91 a6 00 	lds	r24, 0x00A6
    133e:	82 ff       	sbrs	r24, 2
    1340:	e3 cf       	rjmp	.-58     	; 0x1308 <USB_Host_WaitForIOS+0xe>
    1342:	80 e0       	ldi	r24, 0x00	; 0
		if (!(TimeoutCounter--))
		  return HOST_SENDCONTROL_SoftwareTimeOut;
	}

	return HOST_SENDCONTROL_Successful;
}
    1344:	df 91       	pop	r29
    1346:	cf 91       	pop	r28
    1348:	1f 91       	pop	r17
    134a:	08 95       	ret

0000134c <USB_Host_SendControlRequest>:

#define  __INCLUDE_FROM_HOSTSTDREQ_C
#include "HostStandardReq.h"

uint8_t USB_Host_SendControlRequest(void* const BufferPtr)
{
    134c:	ff 92       	push	r15
    134e:	0f 93       	push	r16
    1350:	1f 93       	push	r17
    1352:	cf 93       	push	r28
    1354:	df 93       	push	r29
    1356:	18 2f       	mov	r17, r24
    1358:	09 2f       	mov	r16, r25
			 *  \return Boolean true if the bus is currently suspended, false otherwise.
			 */
			static inline bool USB_Host_IsBusSuspended(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusSuspended(void)
			{
				return ((UHCON & (1 << SOFEN)) ? false : true);
    135a:	f0 90 9e 00 	lds	r15, 0x009E
	uint8_t* HeaderStream   = (uint8_t*)&USB_ControlRequest;
	uint8_t* DataStream     = (uint8_t*)BufferPtr;
	bool     BusSuspended   = USB_Host_IsBusSuspended();
	uint8_t  ReturnStatus   = HOST_SENDCONTROL_Successful;
	uint16_t DataLen        = USB_ControlRequest.wLength;
    135e:	c0 91 21 05 	lds	r28, 0x0521
    1362:	d0 91 22 05 	lds	r29, 0x0522
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
    1366:	80 91 9e 00 	lds	r24, 0x009E
    136a:	81 60       	ori	r24, 0x01	; 1
    136c:	80 93 9e 00 	sts	0x009E, r24

	USB_Host_ResumeBus();

	if ((ReturnStatus = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
    1370:	81 e0       	ldi	r24, 0x01	; 1
    1372:	c4 db       	rcall	.-2168   	; 0xafc <USB_Host_WaitMS>
    1374:	98 2f       	mov	r25, r24
    1376:	88 23       	and	r24, r24
    1378:	09 f0       	breq	.+2      	; 0x137c <USB_Host_SendControlRequest+0x30>
    137a:	d2 c0       	rjmp	.+420    	; 0x1520 <USB_Host_SendControlRequest+0x1d4>
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    137c:	80 91 aa 00 	lds	r24, 0x00AA
    1380:	8f 7c       	andi	r24, 0xCF	; 207
    1382:	80 93 aa 00 	sts	0x00AA, r24
			 *  flag for the pipe.
			 */
			static inline void Pipe_ClearErrorFlags(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearErrorFlags(void)
			{
				UPERRX = 0;
    1386:	10 92 f5 00 	sts	0x00F5, r1

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    138a:	80 91 a9 00 	lds	r24, 0x00A9
    138e:	8f 7b       	andi	r24, 0xBF	; 191
    1390:	80 93 a9 00 	sts	0x00A9, r24
    1394:	eb e1       	ldi	r30, 0x1B	; 27
    1396:	f5 e0       	ldi	r31, 0x05	; 5
	Pipe_ClearErrorFlags();

	Pipe_Unfreeze();

	for (uint8_t HeaderByte = 0; HeaderByte < sizeof(USB_Request_Header_t); HeaderByte++)
	  Pipe_Write_Byte(*(HeaderStream++));
    1398:	81 91       	ld	r24, Z+
			 *  \param[in] Byte  Next byte to write into the the currently selected pipe's FIFO buffer.
			 */
			static inline void Pipe_Write_Byte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Write_Byte(const uint8_t Byte)
			{
				UPDATX = Byte;
    139a:	80 93 af 00 	sts	0x00AF, r24
	Pipe_SetPipeToken(PIPE_TOKEN_SETUP);
	Pipe_ClearErrorFlags();

	Pipe_Unfreeze();

	for (uint8_t HeaderByte = 0; HeaderByte < sizeof(USB_Request_Header_t); HeaderByte++)
    139e:	85 e0       	ldi	r24, 0x05	; 5
    13a0:	e3 32       	cpi	r30, 0x23	; 35
    13a2:	f8 07       	cpc	r31, r24
    13a4:	c9 f7       	brne	.-14     	; 0x1398 <USB_Host_SendControlRequest+0x4c>
			 *  \ingroup Group_PipePacketManagement
			 */
			static inline void Pipe_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearSETUP(void)
			{
				UPINTX &= ~((1 << TXSTPI) | (1 << FIFOCON));
    13a6:	80 91 a6 00 	lds	r24, 0x00A6
    13aa:	87 77       	andi	r24, 0x77	; 119
    13ac:	80 93 a6 00 	sts	0x00A6, r24
	  Pipe_Write_Byte(*(HeaderStream++));

	Pipe_ClearSETUP();

	if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_SetupSent)) != HOST_SENDCONTROL_Successful)
    13b0:	80 e0       	ldi	r24, 0x00	; 0
    13b2:	a3 df       	rcall	.-186    	; 0x12fa <USB_Host_WaitForIOS>
    13b4:	98 2f       	mov	r25, r24
    13b6:	88 23       	and	r24, r24
    13b8:	09 f0       	breq	.+2      	; 0x13bc <USB_Host_SendControlRequest+0x70>
    13ba:	b2 c0       	rjmp	.+356    	; 0x1520 <USB_Host_SendControlRequest+0x1d4>

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    13bc:	80 91 a9 00 	lds	r24, 0x00A9
    13c0:	80 64       	ori	r24, 0x40	; 64
    13c2:	80 93 a9 00 	sts	0x00A9, r24
	  goto End_Of_Control_Send;

	Pipe_Freeze();

	if ((ReturnStatus = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
    13c6:	81 e0       	ldi	r24, 0x01	; 1
    13c8:	99 db       	rcall	.-2254   	; 0xafc <USB_Host_WaitMS>
    13ca:	98 2f       	mov	r25, r24
    13cc:	88 23       	and	r24, r24
    13ce:	09 f0       	breq	.+2      	; 0x13d2 <USB_Host_SendControlRequest+0x86>
    13d0:	a7 c0       	rjmp	.+334    	; 0x1520 <USB_Host_SendControlRequest+0x1d4>
#include "HostStandardReq.h"

uint8_t USB_Host_SendControlRequest(void* const BufferPtr)
{
	uint8_t* HeaderStream   = (uint8_t*)&USB_ControlRequest;
	uint8_t* DataStream     = (uint8_t*)BufferPtr;
    13d2:	21 2f       	mov	r18, r17
    13d4:	30 2f       	mov	r19, r16
    13d6:	c9 01       	movw	r24, r18
    13d8:	8c 01       	movw	r16, r24
	Pipe_Freeze();

	if ((ReturnStatus = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
	  goto End_Of_Control_Send;

	if ((USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_DIRECTION) == REQDIR_DEVICETOHOST)
    13da:	80 91 1b 05 	lds	r24, 0x051B
    13de:	87 ff       	sbrs	r24, 7
    13e0:	52 c0       	rjmp	.+164    	; 0x1486 <USB_Host_SendControlRequest+0x13a>
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    13e2:	80 91 aa 00 	lds	r24, 0x00AA
    13e6:	8f 7c       	andi	r24, 0xCF	; 207
    13e8:	80 61       	ori	r24, 0x10	; 16
    13ea:	80 93 aa 00 	sts	0x00AA, r24
	{
		Pipe_SetPipeToken(PIPE_TOKEN_IN);

		if (DataStream != NULL)
    13ee:	01 15       	cp	r16, r1
    13f0:	11 05       	cpc	r17, r1
    13f2:	69 f5       	brne	.+90     	; 0x144e <USB_Host_SendControlRequest+0x102>
    13f4:	2e c0       	rjmp	.+92     	; 0x1452 <USB_Host_SendControlRequest+0x106>

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    13f6:	80 91 a9 00 	lds	r24, 0x00A9
    13fa:	8f 7b       	andi	r24, 0xBF	; 191
    13fc:	80 93 a9 00 	sts	0x00A9, r24
		{
			while (DataLen)
			{
				Pipe_Unfreeze();

				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_InReceived)) != HOST_SENDCONTROL_Successful)
    1400:	81 e0       	ldi	r24, 0x01	; 1
    1402:	7b df       	rcall	.-266    	; 0x12fa <USB_Host_WaitForIOS>
    1404:	98 2f       	mov	r25, r24
    1406:	88 23       	and	r24, r24
    1408:	09 f0       	breq	.+2      	; 0x140c <USB_Host_SendControlRequest+0xc0>
    140a:	8a c0       	rjmp	.+276    	; 0x1520 <USB_Host_SendControlRequest+0x1d4>
			 *  \return Total number of bytes in the currently selected Pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
    140c:	80 91 f6 00 	lds	r24, 0x00F6
    1410:	90 91 f7 00 	lds	r25, 0x00F7
				  goto End_Of_Control_Send;

				if (!(Pipe_BytesInPipe()))
    1414:	89 2b       	or	r24, r25
    1416:	49 f4       	brne	.+18     	; 0x142a <USB_Host_SendControlRequest+0xde>
    1418:	c0 e0       	ldi	r28, 0x00	; 0
    141a:	d0 e0       	ldi	r29, 0x00	; 0
    141c:	06 c0       	rjmp	.+12     	; 0x142a <USB_Host_SendControlRequest+0xde>
			 *  \return Next byte in the currently selected pipe's FIFO buffer.
			 */
			static inline uint8_t Pipe_Read_Byte(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_Read_Byte(void)
			{
				return UPDATX;
    141e:	80 91 af 00 	lds	r24, 0x00AF
				  DataLen = 0;

				while (Pipe_BytesInPipe() && DataLen)
				{
					*(DataStream++) = Pipe_Read_Byte();
    1422:	f8 01       	movw	r30, r16
    1424:	81 93       	st	Z+, r24
    1426:	8f 01       	movw	r16, r30
					DataLen--;
    1428:	21 97       	sbiw	r28, 0x01	; 1
			 *  \return Total number of bytes in the currently selected Pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
    142a:	80 91 f6 00 	lds	r24, 0x00F6
    142e:	90 91 f7 00 	lds	r25, 0x00F7
				  goto End_Of_Control_Send;

				if (!(Pipe_BytesInPipe()))
				  DataLen = 0;

				while (Pipe_BytesInPipe() && DataLen)
    1432:	89 2b       	or	r24, r25
    1434:	11 f0       	breq	.+4      	; 0x143a <USB_Host_SendControlRequest+0xee>
    1436:	20 97       	sbiw	r28, 0x00	; 0
    1438:	91 f7       	brne	.-28     	; 0x141e <USB_Host_SendControlRequest+0xd2>

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    143a:	80 91 a9 00 	lds	r24, 0x00A9
    143e:	80 64       	ori	r24, 0x40	; 64
    1440:	80 93 a9 00 	sts	0x00A9, r24
			 *  \ingroup Group_PipePacketManagement
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
    1444:	80 91 a6 00 	lds	r24, 0x00A6
    1448:	8e 77       	andi	r24, 0x7E	; 126
    144a:	80 93 a6 00 	sts	0x00A6, r24
	{
		Pipe_SetPipeToken(PIPE_TOKEN_IN);

		if (DataStream != NULL)
		{
			while (DataLen)
    144e:	20 97       	sbiw	r28, 0x00	; 0
    1450:	91 f6       	brne	.-92     	; 0x13f6 <USB_Host_SendControlRequest+0xaa>
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    1452:	80 91 aa 00 	lds	r24, 0x00AA
    1456:	8f 7c       	andi	r24, 0xCF	; 207
    1458:	80 62       	ori	r24, 0x20	; 32
    145a:	80 93 aa 00 	sts	0x00AA, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    145e:	80 91 a9 00 	lds	r24, 0x00A9
    1462:	8f 7b       	andi	r24, 0xBF	; 191
    1464:	80 93 a9 00 	sts	0x00A9, r24
		}

		Pipe_SetPipeToken(PIPE_TOKEN_OUT);
		Pipe_Unfreeze();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    1468:	82 e0       	ldi	r24, 0x02	; 2
    146a:	47 df       	rcall	.-370    	; 0x12fa <USB_Host_WaitForIOS>
    146c:	98 2f       	mov	r25, r24
    146e:	88 23       	and	r24, r24
    1470:	09 f0       	breq	.+2      	; 0x1474 <USB_Host_SendControlRequest+0x128>
    1472:	56 c0       	rjmp	.+172    	; 0x1520 <USB_Host_SendControlRequest+0x1d4>
			 *  \ingroup Group_PipePacketManagement
			 */
			static inline void Pipe_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearOUT(void)
			{
				UPINTX &= ~((1 << TXOUTI) | (1 << FIFOCON));
    1474:	80 91 a6 00 	lds	r24, 0x00A6
    1478:	8b 77       	andi	r24, 0x7B	; 123
    147a:	80 93 a6 00 	sts	0x00A6, r24
		  goto End_Of_Control_Send;

		Pipe_ClearOUT();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    147e:	82 e0       	ldi	r24, 0x02	; 2
    1480:	3c df       	rcall	.-392    	; 0x12fa <USB_Host_WaitForIOS>
    1482:	98 2f       	mov	r25, r24
    1484:	4d c0       	rjmp	.+154    	; 0x1520 <USB_Host_SendControlRequest+0x1d4>
		  goto End_Of_Control_Send;
	}
	else
	{
		if (DataStream != NULL)
    1486:	01 15       	cp	r16, r1
    1488:	11 05       	cpc	r17, r1
    148a:	a9 f1       	breq	.+106    	; 0x14f6 <USB_Host_SendControlRequest+0x1aa>
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    148c:	80 91 aa 00 	lds	r24, 0x00AA
    1490:	8f 7c       	andi	r24, 0xCF	; 207
    1492:	80 62       	ori	r24, 0x20	; 32
    1494:	80 93 aa 00 	sts	0x00AA, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    1498:	80 91 a9 00 	lds	r24, 0x00A9
    149c:	8f 7b       	andi	r24, 0xBF	; 191
    149e:	80 93 a9 00 	sts	0x00A9, r24
    14a2:	1d c0       	rjmp	.+58     	; 0x14de <USB_Host_SendControlRequest+0x192>
			Pipe_SetPipeToken(PIPE_TOKEN_OUT);
			Pipe_Unfreeze();

			while (DataLen)
			{
				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    14a4:	82 e0       	ldi	r24, 0x02	; 2
    14a6:	29 df       	rcall	.-430    	; 0x12fa <USB_Host_WaitForIOS>
    14a8:	98 2f       	mov	r25, r24
    14aa:	88 23       	and	r24, r24
    14ac:	c9 f5       	brne	.+114    	; 0x1520 <USB_Host_SendControlRequest+0x1d4>
				  goto End_Of_Control_Send;

				while (DataLen && (Pipe_BytesInPipe() < USB_ControlPipeSize))
    14ae:	80 91 2c 01 	lds	r24, 0x012C
    14b2:	28 2f       	mov	r18, r24
    14b4:	30 e0       	ldi	r19, 0x00	; 0
    14b6:	07 c0       	rjmp	.+14     	; 0x14c6 <USB_Host_SendControlRequest+0x17a>
				{
					Pipe_Write_Byte(*(DataStream++));
    14b8:	f8 01       	movw	r30, r16
    14ba:	81 91       	ld	r24, Z+
    14bc:	8f 01       	movw	r16, r30
			 *  \param[in] Byte  Next byte to write into the the currently selected pipe's FIFO buffer.
			 */
			static inline void Pipe_Write_Byte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Write_Byte(const uint8_t Byte)
			{
				UPDATX = Byte;
    14be:	80 93 af 00 	sts	0x00AF, r24
					DataLen--;
    14c2:	21 97       	sbiw	r28, 0x01	; 1
			while (DataLen)
			{
				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
				  goto End_Of_Control_Send;

				while (DataLen && (Pipe_BytesInPipe() < USB_ControlPipeSize))
    14c4:	39 f0       	breq	.+14     	; 0x14d4 <USB_Host_SendControlRequest+0x188>
			 *  \return Total number of bytes in the currently selected Pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
    14c6:	80 91 f6 00 	lds	r24, 0x00F6
    14ca:	90 91 f7 00 	lds	r25, 0x00F7
    14ce:	82 17       	cp	r24, r18
    14d0:	93 07       	cpc	r25, r19
    14d2:	90 f3       	brcs	.-28     	; 0x14b8 <USB_Host_SendControlRequest+0x16c>
			 *  \ingroup Group_PipePacketManagement
			 */
			static inline void Pipe_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearOUT(void)
			{
				UPINTX &= ~((1 << TXOUTI) | (1 << FIFOCON));
    14d4:	80 91 a6 00 	lds	r24, 0x00A6
    14d8:	8b 77       	andi	r24, 0x7B	; 123
    14da:	80 93 a6 00 	sts	0x00A6, r24
		if (DataStream != NULL)
		{
			Pipe_SetPipeToken(PIPE_TOKEN_OUT);
			Pipe_Unfreeze();

			while (DataLen)
    14de:	20 97       	sbiw	r28, 0x00	; 0
    14e0:	09 f7       	brne	.-62     	; 0x14a4 <USB_Host_SendControlRequest+0x158>
				}

				Pipe_ClearOUT();
			}

			if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    14e2:	82 e0       	ldi	r24, 0x02	; 2
    14e4:	0a df       	rcall	.-492    	; 0x12fa <USB_Host_WaitForIOS>
    14e6:	98 2f       	mov	r25, r24
    14e8:	88 23       	and	r24, r24
    14ea:	d1 f4       	brne	.+52     	; 0x1520 <USB_Host_SendControlRequest+0x1d4>

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    14ec:	80 91 a9 00 	lds	r24, 0x00A9
    14f0:	80 64       	ori	r24, 0x40	; 64
    14f2:	80 93 a9 00 	sts	0x00A9, r24
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    14f6:	80 91 aa 00 	lds	r24, 0x00AA
    14fa:	8f 7c       	andi	r24, 0xCF	; 207
    14fc:	80 61       	ori	r24, 0x10	; 16
    14fe:	80 93 aa 00 	sts	0x00AA, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    1502:	80 91 a9 00 	lds	r24, 0x00A9
    1506:	8f 7b       	andi	r24, 0xBF	; 191
    1508:	80 93 a9 00 	sts	0x00A9, r24
		}

		Pipe_SetPipeToken(PIPE_TOKEN_IN);
		Pipe_Unfreeze();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_InReceived)) != HOST_SENDCONTROL_Successful)
    150c:	81 e0       	ldi	r24, 0x01	; 1
    150e:	f5 de       	rcall	.-534    	; 0x12fa <USB_Host_WaitForIOS>
    1510:	98 2f       	mov	r25, r24
    1512:	88 23       	and	r24, r24
    1514:	29 f4       	brne	.+10     	; 0x1520 <USB_Host_SendControlRequest+0x1d4>
			 *  \ingroup Group_PipePacketManagement
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
    1516:	80 91 a6 00 	lds	r24, 0x00A6
    151a:	8e 77       	andi	r24, 0x7E	; 126
    151c:	80 93 a6 00 	sts	0x00A6, r24

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    1520:	80 91 a9 00 	lds	r24, 0x00A9
    1524:	80 64       	ori	r24, 0x40	; 64
    1526:	80 93 a9 00 	sts	0x00A9, r24
	}

End_Of_Control_Send:
	Pipe_Freeze();

	if (BusSuspended)
    152a:	f0 fc       	sbrc	r15, 0
    152c:	05 c0       	rjmp	.+10     	; 0x1538 <USB_Host_SendControlRequest+0x1ec>
			 *  messages to the device.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				UHCON &= ~(1 << SOFEN);
    152e:	80 91 9e 00 	lds	r24, 0x009E
    1532:	8e 7f       	andi	r24, 0xFE	; 254
    1534:	80 93 9e 00 	sts	0x009E, r24
			 *  \param[in] PipeNumber  Index of the pipe to reset.
			 */
			static inline void Pipe_ResetPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ResetPipe(const uint8_t PipeNumber)
			{
				UPRST = (1 << PipeNumber);
    1538:	81 e0       	ldi	r24, 0x01	; 1
    153a:	80 93 a8 00 	sts	0x00A8, r24
				UPRST = 0;
    153e:	10 92 a8 00 	sts	0x00A8, r1
	  USB_Host_SuspendBus();

	Pipe_ResetPipe(PIPE_CONTROLPIPE);

	return ReturnStatus;
}
    1542:	89 2f       	mov	r24, r25
    1544:	df 91       	pop	r29
    1546:	cf 91       	pop	r28
    1548:	1f 91       	pop	r17
    154a:	0f 91       	pop	r16
    154c:	ff 90       	pop	r15
    154e:	08 95       	ret

00001550 <Pipe_Read_Stream_LE>:
uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE Buffer,
                            uint16_t Length
                            __CALLBACK_PARAM)
{
    1550:	ff 92       	push	r15
    1552:	0f 93       	push	r16
    1554:	1f 93       	push	r17
    1556:	cf 93       	push	r28
    1558:	df 93       	push	r29
    155a:	18 2f       	mov	r17, r24
    155c:	09 2f       	mov	r16, r25
    155e:	eb 01       	movw	r28, r22
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    1560:	80 91 aa 00 	lds	r24, 0x00AA
    1564:	8f 7c       	andi	r24, 0xCF	; 207
    1566:	80 61       	ori	r24, 0x10	; 16
    1568:	80 93 aa 00 	sts	0x00AA, r24
	uint8_t* DataStream = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	uint8_t  ErrorCode;

	Pipe_SetPipeToken(TEMPLATE_TOKEN);

	if ((ErrorCode = Pipe_WaitUntilReady()))
    156c:	ee dc       	rcall	.-1572   	; 0xf4a <Pipe_WaitUntilReady>
    156e:	f8 2e       	mov	r15, r24
    1570:	88 23       	and	r24, r24
    1572:	d1 f4       	brne	.+52     	; 0x15a8 <Pipe_Read_Stream_LE+0x58>
uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE Buffer,
                            uint16_t Length
                            __CALLBACK_PARAM)
{
	uint8_t* DataStream = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
    1574:	81 2f       	mov	r24, r17
    1576:	90 2f       	mov	r25, r16
    1578:	9c 01       	movw	r18, r24
    157a:	89 01       	movw	r16, r18
    157c:	13 c0       	rjmp	.+38     	; 0x15a4 <Pipe_Read_Stream_LE+0x54>
			 *  \return Boolean true if the currently selected pipe may be read from or written to, depending on its direction.
			 */
			static inline bool Pipe_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsReadWriteAllowed(void)
			{
				return ((UPINTX & (1 << RWAL)) ? true : false);
    157e:	80 91 a6 00 	lds	r24, 0x00A6
	}
	#endif

	while (Length)
	{
		if (!(Pipe_IsReadWriteAllowed()))
    1582:	85 fd       	sbrc	r24, 5
    1584:	09 c0       	rjmp	.+18     	; 0x1598 <Pipe_Read_Stream_LE+0x48>
			 *  \ingroup Group_PipePacketManagement
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
    1586:	80 91 a6 00 	lds	r24, 0x00A6
    158a:	8e 77       	andi	r24, 0x7E	; 126
    158c:	80 93 a6 00 	sts	0x00A6, r24
			#if !defined(NO_STREAM_CALLBACKS)
			if ((Callback != NULL) && (Callback() == STREAMCALLBACK_Abort))
			  return PIPE_RWSTREAM_CallbackAborted;
			#endif

			if ((ErrorCode = Pipe_WaitUntilReady()))
    1590:	dc dc       	rcall	.-1608   	; 0xf4a <Pipe_WaitUntilReady>
    1592:	88 23       	and	r24, r24
    1594:	39 f0       	breq	.+14     	; 0x15a4 <Pipe_Read_Stream_LE+0x54>
    1596:	09 c0       	rjmp	.+18     	; 0x15aa <Pipe_Read_Stream_LE+0x5a>
			 *  \return Next byte in the currently selected pipe's FIFO buffer.
			 */
			static inline uint8_t Pipe_Read_Byte(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_Read_Byte(void)
			{
				return UPDATX;
    1598:	80 91 af 00 	lds	r24, 0x00AF
			  return ErrorCode;
		}
		else
		{
			TEMPLATE_TRANSFER_BYTE(DataStream);
    159c:	f8 01       	movw	r30, r16
    159e:	81 93       	st	Z+, r24
    15a0:	8f 01       	movw	r16, r30
			Length--;
    15a2:	21 97       	sbiw	r28, 0x01	; 1
				} while (Length >= 8);
		}
	}
	#endif

	while (Length)
    15a4:	20 97       	sbiw	r28, 0x00	; 0
    15a6:	59 f7       	brne	.-42     	; 0x157e <Pipe_Read_Stream_LE+0x2e>
    15a8:	8f 2d       	mov	r24, r15
			Length--;
		}
	}

	return PIPE_RWSTREAM_NoError;
}
    15aa:	df 91       	pop	r29
    15ac:	cf 91       	pop	r28
    15ae:	1f 91       	pop	r17
    15b0:	0f 91       	pop	r16
    15b2:	ff 90       	pop	r15
    15b4:	08 95       	ret

000015b6 <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
    15b6:	ff 92       	push	r15
    15b8:	0f 93       	push	r16
    15ba:	1f 93       	push	r17
			 *  \return Index of the currently selected pipe.
			 */
			static inline uint8_t Pipe_GetCurrentPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetCurrentPipe(void)
			{
				return (UPNUM & PIPE_PIPENUM_MASK);
    15bc:	07 ea       	ldi	r16, 0xA7	; 167
    15be:	10 e0       	ldi	r17, 0x00	; 0
    15c0:	f8 01       	movw	r30, r16
    15c2:	f0 80       	ld	r15, Z
    15c4:	f7 e0       	ldi	r31, 0x07	; 7
    15c6:	ff 22       	and	r15, r31
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
    15c8:	f8 01       	movw	r30, r16
    15ca:	10 82       	st	Z, r1
{
	uint8_t PrevPipe = Pipe_GetCurrentPipe();

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	USB_Host_ProcessNextHostState();
    15cc:	46 db       	rcall	.-2420   	; 0xc5a <USB_Host_ProcessNextHostState>
    15ce:	f8 01       	movw	r30, r16
    15d0:	f0 82       	st	Z, r15
		if (USB_CurrentMode == USB_MODE_Device)
		  USB_DeviceTask();
		else if (USB_CurrentMode == USB_MODE_Host)
		  USB_HostTask();
	#endif
}
    15d2:	1f 91       	pop	r17
    15d4:	0f 91       	pop	r16
    15d6:	ff 90       	pop	r15
    15d8:	08 95       	ret

000015da <USB_GetHIDReportItemInfo>:
	return HID_PARSE_Successful;
}

bool USB_GetHIDReportItemInfo(const uint8_t* ReportData,
                              HID_ReportItem_t* const ReportItem)
{
    15da:	cf 92       	push	r12
    15dc:	df 92       	push	r13
    15de:	ef 92       	push	r14
    15e0:	ff 92       	push	r15
    15e2:	0f 93       	push	r16
    15e4:	1f 93       	push	r17
    15e6:	cf 93       	push	r28
    15e8:	df 93       	push	r29
    15ea:	6c 01       	movw	r12, r24
    15ec:	eb 01       	movw	r28, r22
	uint16_t DataBitsRem  = ReportItem->Attributes.BitSize;
    15ee:	28 85       	ldd	r18, Y+8	; 0x08
	uint16_t CurrentBit   = ReportItem->BitOffset;
    15f0:	e8 80       	ld	r14, Y
    15f2:	f9 80       	ldd	r15, Y+1	; 0x01
	uint32_t BitMask      = (1 << 0);

	if (ReportItem->ReportID)
    15f4:	9d 81       	ldd	r25, Y+5	; 0x05
    15f6:	99 23       	and	r25, r25
    15f8:	49 f0       	breq	.+18     	; 0x160c <USB_GetHIDReportItemInfo+0x32>
	{
		if (ReportItem->ReportID != ReportData[0])
    15fa:	f6 01       	movw	r30, r12
    15fc:	80 81       	ld	r24, Z
    15fe:	98 17       	cp	r25, r24
    1600:	11 f0       	breq	.+4      	; 0x1606 <USB_GetHIDReportItemInfo+0x2c>
    1602:	80 e0       	ldi	r24, 0x00	; 0
    1604:	43 c0       	rjmp	.+134    	; 0x168c <USB_GetHIDReportItemInfo+0xb2>
		  return false;

		ReportData++;
    1606:	08 94       	sec
    1608:	c1 1c       	adc	r12, r1
    160a:	d1 1c       	adc	r13, r1
}

bool USB_GetHIDReportItemInfo(const uint8_t* ReportData,
                              HID_ReportItem_t* const ReportItem)
{
	uint16_t DataBitsRem  = ReportItem->Attributes.BitSize;
    160c:	02 2f       	mov	r16, r18
    160e:	10 e0       	ldi	r17, 0x00	; 0
		  return false;

		ReportData++;
	}

	ReportItem->PreviousValue = ReportItem->Value;
    1610:	8a a1       	ldd	r24, Y+34	; 0x22
    1612:	9b a1       	ldd	r25, Y+35	; 0x23
    1614:	ac a1       	ldd	r26, Y+36	; 0x24
    1616:	bd a1       	ldd	r27, Y+37	; 0x25
    1618:	8e a3       	std	Y+38, r24	; 0x26
    161a:	9f a3       	std	Y+39, r25	; 0x27
    161c:	a8 a7       	std	Y+40, r26	; 0x28
    161e:	b9 a7       	std	Y+41, r27	; 0x29
	ReportItem->Value = 0;
    1620:	1a a2       	std	Y+34, r1	; 0x22
    1622:	1b a2       	std	Y+35, r1	; 0x23
    1624:	1c a2       	std	Y+36, r1	; 0x24
    1626:	1d a2       	std	Y+37, r1	; 0x25
    1628:	41 e0       	ldi	r20, 0x01	; 1
    162a:	50 e0       	ldi	r21, 0x00	; 0
    162c:	60 e0       	ldi	r22, 0x00	; 0
    162e:	70 e0       	ldi	r23, 0x00	; 0
    1630:	29 c0       	rjmp	.+82     	; 0x1684 <USB_GetHIDReportItemInfo+0xaa>

	while (DataBitsRem--)
	{
		if (ReportData[CurrentBit / 8] & (1 << (CurrentBit % 8)))
    1632:	f7 01       	movw	r30, r14
    1634:	93 e0       	ldi	r25, 0x03	; 3
    1636:	f6 95       	lsr	r31
    1638:	e7 95       	ror	r30
    163a:	9a 95       	dec	r25
    163c:	e1 f7       	brne	.-8      	; 0x1636 <USB_GetHIDReportItemInfo+0x5c>
    163e:	ec 0d       	add	r30, r12
    1640:	fd 1d       	adc	r31, r13
    1642:	80 81       	ld	r24, Z
    1644:	90 e0       	ldi	r25, 0x00	; 0
    1646:	97 01       	movw	r18, r14
    1648:	27 70       	andi	r18, 0x07	; 7
    164a:	30 70       	andi	r19, 0x00	; 0
    164c:	02 c0       	rjmp	.+4      	; 0x1652 <USB_GetHIDReportItemInfo+0x78>
    164e:	95 95       	asr	r25
    1650:	87 95       	ror	r24
    1652:	2a 95       	dec	r18
    1654:	e2 f7       	brpl	.-8      	; 0x164e <USB_GetHIDReportItemInfo+0x74>
    1656:	80 ff       	sbrs	r24, 0
    1658:	0c c0       	rjmp	.+24     	; 0x1672 <USB_GetHIDReportItemInfo+0x98>
		  ReportItem->Value |= BitMask;
    165a:	8a a1       	ldd	r24, Y+34	; 0x22
    165c:	9b a1       	ldd	r25, Y+35	; 0x23
    165e:	ac a1       	ldd	r26, Y+36	; 0x24
    1660:	bd a1       	ldd	r27, Y+37	; 0x25
    1662:	84 2b       	or	r24, r20
    1664:	95 2b       	or	r25, r21
    1666:	a6 2b       	or	r26, r22
    1668:	b7 2b       	or	r27, r23
    166a:	8a a3       	std	Y+34, r24	; 0x22
    166c:	9b a3       	std	Y+35, r25	; 0x23
    166e:	ac a3       	std	Y+36, r26	; 0x24
    1670:	bd a3       	std	Y+37, r27	; 0x25

		CurrentBit++;
    1672:	08 94       	sec
    1674:	e1 1c       	adc	r14, r1
    1676:	f1 1c       	adc	r15, r1
		BitMask <<= 1;
    1678:	44 0f       	add	r20, r20
    167a:	55 1f       	adc	r21, r21
    167c:	66 1f       	adc	r22, r22
    167e:	77 1f       	adc	r23, r23
    1680:	01 50       	subi	r16, 0x01	; 1
    1682:	10 40       	sbci	r17, 0x00	; 0
	}

	ReportItem->PreviousValue = ReportItem->Value;
	ReportItem->Value = 0;

	while (DataBitsRem--)
    1684:	01 15       	cp	r16, r1
    1686:	11 05       	cpc	r17, r1
    1688:	a1 f6       	brne	.-88     	; 0x1632 <USB_GetHIDReportItemInfo+0x58>
    168a:	81 e0       	ldi	r24, 0x01	; 1
		CurrentBit++;
		BitMask <<= 1;
	}

	return true;
}
    168c:	df 91       	pop	r29
    168e:	cf 91       	pop	r28
    1690:	1f 91       	pop	r17
    1692:	0f 91       	pop	r16
    1694:	ff 90       	pop	r15
    1696:	ef 90       	pop	r14
    1698:	df 90       	pop	r13
    169a:	cf 90       	pop	r12
    169c:	08 95       	ret

0000169e <USB_ProcessHIDReport>:
#include "HIDParser.h"

uint8_t USB_ProcessHIDReport(const uint8_t* ReportData,
                             uint16_t ReportSize,
                             HID_ReportInfo_t* const ParserData)
{
    169e:	2f 92       	push	r2
    16a0:	3f 92       	push	r3
    16a2:	4f 92       	push	r4
    16a4:	5f 92       	push	r5
    16a6:	6f 92       	push	r6
    16a8:	7f 92       	push	r7
    16aa:	8f 92       	push	r8
    16ac:	9f 92       	push	r9
    16ae:	af 92       	push	r10
    16b0:	bf 92       	push	r11
    16b2:	cf 92       	push	r12
    16b4:	df 92       	push	r13
    16b6:	ef 92       	push	r14
    16b8:	ff 92       	push	r15
    16ba:	0f 93       	push	r16
    16bc:	1f 93       	push	r17
    16be:	df 93       	push	r29
    16c0:	cf 93       	push	r28
    16c2:	cd b7       	in	r28, 0x3d	; 61
    16c4:	de b7       	in	r29, 0x3e	; 62
    16c6:	c5 59       	subi	r28, 0x95	; 149
    16c8:	d0 40       	sbci	r29, 0x00	; 0
    16ca:	0f b6       	in	r0, 0x3f	; 63
    16cc:	f8 94       	cli
    16ce:	de bf       	out	0x3e, r29	; 62
    16d0:	0f be       	out	0x3f, r0	; 63
    16d2:	cd bf       	out	0x3d, r28	; 61
    16d4:	cf 57       	subi	r28, 0x7F	; 127
    16d6:	df 4f       	sbci	r29, 0xFF	; 255
    16d8:	99 83       	std	Y+1, r25	; 0x01
    16da:	88 83       	st	Y, r24
    16dc:	c1 58       	subi	r28, 0x81	; 129
    16de:	d0 40       	sbci	r29, 0x00	; 0
    16e0:	cd 57       	subi	r28, 0x7D	; 125
    16e2:	df 4f       	sbci	r29, 0xFF	; 255
    16e4:	79 83       	std	Y+1, r23	; 0x01
    16e6:	68 83       	st	Y, r22
    16e8:	c3 58       	subi	r28, 0x83	; 131
    16ea:	d0 40       	sbci	r29, 0x00	; 0
    16ec:	1a 01       	movw	r2, r20
	HID_StateTable_t      StateTable[HID_STATETABLE_STACK_DEPTH];
	HID_StateTable_t*     CurrStateTable          = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath      = NULL;
	HID_ReportSizeInfo_t* CurrReportIDInfo        = &ParserData->ReportIDSizes[0];
    16ee:	80 e9       	ldi	r24, 0x90	; 144
    16f0:	48 2e       	mov	r4, r24
    16f2:	83 e0       	ldi	r24, 0x03	; 3
    16f4:	58 2e       	mov	r5, r24
    16f6:	44 0e       	add	r4, r20
    16f8:	55 1e       	adc	r5, r21
	uint16_t              UsageList[HID_USAGE_STACK_DEPTH];
	uint8_t               UsageListSize           = 0;
	HID_MinMax_t          UsageMinMax             = {0, 0};

	memset(ParserData,       0x00, sizeof(HID_ReportInfo_t));
    16fa:	89 ed       	ldi	r24, 0xD9	; 217
    16fc:	93 e0       	ldi	r25, 0x03	; 3
    16fe:	da 01       	movw	r26, r20
    1700:	fc 01       	movw	r30, r24
    1702:	1d 92       	st	X+, r1
    1704:	31 97       	sbiw	r30, 0x01	; 1
    1706:	e9 f7       	brne	.-6      	; 0x1702 <USB_ProcessHIDReport+0x64>
	memset(CurrStateTable,   0x00, sizeof(HID_StateTable_t));
    1708:	fe 01       	movw	r30, r28
    170a:	fb 96       	adiw	r30, 0x3b	; 59
    170c:	8c e1       	ldi	r24, 0x1C	; 28
    170e:	df 01       	movw	r26, r30
    1710:	1d 92       	st	X+, r1
    1712:	8a 95       	dec	r24
    1714:	e9 f7       	brne	.-6      	; 0x1710 <USB_ProcessHIDReport+0x72>
	memset(CurrReportIDInfo, 0x00, sizeof(HID_ReportSizeInfo_t));
    1716:	87 e0       	ldi	r24, 0x07	; 7
    1718:	d2 01       	movw	r26, r4
    171a:	1d 92       	st	X+, r1
    171c:	8a 95       	dec	r24
    171e:	e9 f7       	brne	.-6      	; 0x171a <USB_ProcessHIDReport+0x7c>

	ParserData->TotalDeviceReports = 1;
    1720:	da 01       	movw	r26, r20
    1722:	a1 57       	subi	r26, 0x71	; 113
    1724:	bc 4f       	sbci	r27, 0xFC	; 252
    1726:	81 e0       	ldi	r24, 0x01	; 1
    1728:	8c 93       	st	X, r24
				UsageMinMax.Maximum = ReportItemData;
				break;
			case (TYPE_MAIN | TAG_MAIN_COLLECTION):
				if (CurrCollectionPath == NULL)
				{
					CurrCollectionPath = &ParserData->CollectionPaths[0];
    172a:	9a 01       	movw	r18, r20
    172c:	27 5b       	subi	r18, 0xB7	; 183
    172e:	3c 4f       	sbci	r19, 0xFC	; 252
    1730:	e7 96       	adiw	r28, 0x37	; 55
    1732:	3f af       	std	Y+63, r19	; 0x3f
    1734:	2e af       	std	Y+62, r18	; 0x3e
    1736:	e7 97       	sbiw	r28, 0x37	; 55
				}
				else
				{
					HID_CollectionPath_t* ParentCollectionPath = CurrCollectionPath;

					CurrCollectionPath = &ParserData->CollectionPaths[1];
    1738:	40 5b       	subi	r20, 0xB0	; 176
    173a:	5c 4f       	sbci	r21, 0xFC	; 252
    173c:	e5 96       	adiw	r28, 0x35	; 53
    173e:	5f af       	std	Y+63, r21	; 0x3f
    1740:	4e af       	std	Y+62, r20	; 0x3e
    1742:	e5 97       	sbiw	r28, 0x35	; 53

					while (CurrCollectionPath->Parent != NULL)
					{
						if (CurrCollectionPath == &ParserData->CollectionPaths[HID_MAX_COLLECTIONS - 1])
    1744:	c1 01       	movw	r24, r2
    1746:	88 57       	subi	r24, 0x78	; 120
    1748:	9c 4f       	sbci	r25, 0xFC	; 252
    174a:	ef 96       	adiw	r28, 0x3f	; 63
    174c:	9f af       	std	Y+63, r25	; 0x3f
    174e:	8e af       	std	Y+62, r24	; 0x3e
    1750:	ef 97       	sbiw	r28, 0x3f	; 63
    1752:	6f 01       	movw	r12, r30
    1754:	aa 24       	eor	r10, r10
    1756:	bb 24       	eor	r11, r11
    1758:	ed 96       	adiw	r28, 0x3d	; 61
    175a:	1f ae       	std	Y+63, r1	; 0x3f
    175c:	ed 97       	sbiw	r28, 0x3d	; 61
    175e:	eb 96       	adiw	r28, 0x3b	; 59
    1760:	1c ae       	std	Y+60, r1	; 0x3c
    1762:	1d ae       	std	Y+61, r1	; 0x3d
    1764:	1e ae       	std	Y+62, r1	; 0x3e
    1766:	1f ae       	std	Y+63, r1	; 0x3f
    1768:	eb 97       	sbiw	r28, 0x3b	; 59
    176a:	66 24       	eor	r6, r6
    176c:	77 24       	eor	r7, r7
    176e:	43 01       	movw	r8, r6

					NewReportItem.BitOffset = CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType];

					CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType] += CurrStateTable->Attributes.BitSize;

					if (ParserData->LargestReportSizeBits < NewReportItem.BitOffset)
    1770:	f1 01       	movw	r30, r2
    1772:	ea 52       	subi	r30, 0x2A	; 42
    1774:	fc 4f       	sbci	r31, 0xFC	; 252
    1776:	c6 57       	subi	r28, 0x76	; 118
    1778:	df 4f       	sbci	r29, 0xFF	; 255
    177a:	f9 83       	std	Y+1, r31	; 0x01
    177c:	e8 83       	st	Y, r30
    177e:	ca 58       	subi	r28, 0x8A	; 138
    1780:	d0 40       	sbci	r29, 0x00	; 0
				       sizeof(HID_ReportItem_t));

				CurrStateTable++;
				break;
			case (TYPE_GLOBAL | TAG_GLOBAL_POP):
				if (CurrStateTable == &StateTable[0])
    1782:	cc 56       	subi	r28, 0x6C	; 108
    1784:	df 4f       	sbci	r29, 0xFF	; 255
    1786:	d9 82       	std	Y+1, r13	; 0x01
    1788:	c8 82       	st	Y, r12
    178a:	c4 59       	subi	r28, 0x94	; 148
    178c:	d0 40       	sbci	r29, 0x00	; 0
		}

		switch (HIDReportItem & (TYPE_MASK | TAG_MASK))
		{
			case (TYPE_GLOBAL | TAG_GLOBAL_PUSH):
				if (CurrStateTable == &StateTable[HID_STATETABLE_STACK_DEPTH - 1])
    178e:	96 01       	movw	r18, r12
    1790:	24 5e       	subi	r18, 0xE4	; 228
    1792:	3f 4f       	sbci	r19, 0xFF	; 255
    1794:	c4 57       	subi	r28, 0x74	; 116
    1796:	df 4f       	sbci	r29, 0xFF	; 255
    1798:	39 83       	std	Y+1, r19	; 0x01
    179a:	28 83       	st	Y, r18
    179c:	cc 58       	subi	r28, 0x8C	; 140
    179e:	d0 40       	sbci	r29, 0x00	; 0
				CurrStateTable->ReportCount                 = ReportItemData;
				break;
			case (TYPE_GLOBAL | TAG_GLOBAL_REPORTID):
				CurrStateTable->ReportID                    = ReportItemData;

				if (ParserData->UsingReportIDs)
    17a0:	a1 01       	movw	r20, r2
    17a2:	48 52       	subi	r20, 0x28	; 40
    17a4:	5c 4f       	sbci	r21, 0xFC	; 252
    17a6:	c2 57       	subi	r28, 0x72	; 114
    17a8:	df 4f       	sbci	r29, 0xFF	; 255
    17aa:	59 83       	std	Y+1, r21	; 0x01
    17ac:	48 83       	st	Y, r20
    17ae:	ce 58       	subi	r28, 0x8E	; 142
    17b0:	d0 40       	sbci	r29, 0x00	; 0
				{
					CurrReportIDInfo = NULL;

					for (uint8_t i = 0; i < ParserData->TotalDeviceReports; i++)
    17b2:	c0 57       	subi	r28, 0x70	; 112
    17b4:	df 4f       	sbci	r29, 0xFF	; 255
    17b6:	b9 83       	std	Y+1, r27	; 0x01
    17b8:	a8 83       	st	Y, r26
    17ba:	c0 59       	subi	r28, 0x90	; 144
    17bc:	d0 40       	sbci	r29, 0x00	; 0
    17be:	c2 01       	movw	r24, r4
    17c0:	ce 56       	subi	r28, 0x6E	; 110
    17c2:	df 4f       	sbci	r29, 0xFF	; 255
    17c4:	48 82       	st	Y, r4
    17c6:	c2 59       	subi	r28, 0x92	; 146
    17c8:	d0 40       	sbci	r29, 0x00	; 0
    17ca:	cd 56       	subi	r28, 0x6D	; 109
    17cc:	df 4f       	sbci	r29, 0xFF	; 255
    17ce:	98 83       	st	Y, r25
    17d0:	c3 59       	subi	r28, 0x93	; 147
    17d2:	d0 40       	sbci	r29, 0x00	; 0
    17d4:	29 c3       	rjmp	.+1618   	; 0x1e28 <USB_ProcessHIDReport+0x78a>

	ParserData->TotalDeviceReports = 1;

	while (ReportSize)
	{
		uint8_t  HIDReportItem  = *ReportData;
    17d6:	cf 57       	subi	r28, 0x7F	; 127
    17d8:	df 4f       	sbci	r29, 0xFF	; 255
    17da:	a8 81       	ld	r26, Y
    17dc:	b9 81       	ldd	r27, Y+1	; 0x01
    17de:	c1 58       	subi	r28, 0x81	; 129
    17e0:	d0 40       	sbci	r29, 0x00	; 0
    17e2:	2d 91       	ld	r18, X+
    17e4:	cf 57       	subi	r28, 0x7F	; 127
    17e6:	df 4f       	sbci	r29, 0xFF	; 255
    17e8:	b9 83       	std	Y+1, r27	; 0x01
    17ea:	a8 83       	st	Y, r26
    17ec:	c1 58       	subi	r28, 0x81	; 129
    17ee:	d0 40       	sbci	r29, 0x00	; 0
		uint32_t ReportItemData = 0;

		ReportData++;
		ReportSize--;
    17f0:	cd 57       	subi	r28, 0x7D	; 125
    17f2:	df 4f       	sbci	r29, 0xFF	; 255
    17f4:	e8 81       	ld	r30, Y
    17f6:	f9 81       	ldd	r31, Y+1	; 0x01
    17f8:	c3 58       	subi	r28, 0x83	; 131
    17fa:	d0 40       	sbci	r29, 0x00	; 0
    17fc:	31 97       	sbiw	r30, 0x01	; 1
    17fe:	cd 57       	subi	r28, 0x7D	; 125
    1800:	df 4f       	sbci	r29, 0xFF	; 255
    1802:	f9 83       	std	Y+1, r31	; 0x01
    1804:	e8 83       	st	Y, r30
    1806:	c3 58       	subi	r28, 0x83	; 131
    1808:	d0 40       	sbci	r29, 0x00	; 0

		switch (HIDReportItem & DATA_SIZE_MASK)
    180a:	42 2f       	mov	r20, r18
    180c:	50 e0       	ldi	r21, 0x00	; 0
    180e:	c1 58       	subi	r28, 0x81	; 129
    1810:	df 4f       	sbci	r29, 0xFF	; 255
    1812:	59 83       	std	Y+1, r21	; 0x01
    1814:	48 83       	st	Y, r20
    1816:	cf 57       	subi	r28, 0x7F	; 127
    1818:	d0 40       	sbci	r29, 0x00	; 0
    181a:	ca 01       	movw	r24, r20
    181c:	83 70       	andi	r24, 0x03	; 3
    181e:	90 70       	andi	r25, 0x00	; 0
    1820:	82 30       	cpi	r24, 0x02	; 2
    1822:	91 05       	cpc	r25, r1
    1824:	09 f1       	breq	.+66     	; 0x1868 <USB_ProcessHIDReport+0x1ca>
    1826:	83 30       	cpi	r24, 0x03	; 3
    1828:	91 05       	cpc	r25, r1
    182a:	31 f0       	breq	.+12     	; 0x1838 <USB_ProcessHIDReport+0x19a>
    182c:	01 97       	sbiw	r24, 0x01	; 1
    182e:	a9 f1       	breq	.+106    	; 0x189a <USB_ProcessHIDReport+0x1fc>
    1830:	ee 24       	eor	r14, r14
    1832:	ff 24       	eor	r15, r15
    1834:	87 01       	movw	r16, r14
    1836:	4f c0       	rjmp	.+158    	; 0x18d6 <USB_ProcessHIDReport+0x238>
		{
			case DATA_SIZE_4:
				ReportItemData  = *((uint32_t*)ReportData);
    1838:	cf 57       	subi	r28, 0x7F	; 127
    183a:	df 4f       	sbci	r29, 0xFF	; 255
    183c:	a8 81       	ld	r26, Y
    183e:	b9 81       	ldd	r27, Y+1	; 0x01
    1840:	c1 58       	subi	r28, 0x81	; 129
    1842:	d0 40       	sbci	r29, 0x00	; 0
    1844:	ed 90       	ld	r14, X+
    1846:	fd 90       	ld	r15, X+
    1848:	0d 91       	ld	r16, X+
    184a:	1d 91       	ld	r17, X+
    184c:	cf 57       	subi	r28, 0x7F	; 127
    184e:	df 4f       	sbci	r29, 0xFF	; 255
    1850:	b9 83       	std	Y+1, r27	; 0x01
    1852:	a8 83       	st	Y, r26
    1854:	c1 58       	subi	r28, 0x81	; 129
    1856:	d0 40       	sbci	r29, 0x00	; 0
				ReportSize     -= 4;
    1858:	cd 57       	subi	r28, 0x7D	; 125
    185a:	df 4f       	sbci	r29, 0xFF	; 255
    185c:	e8 81       	ld	r30, Y
    185e:	f9 81       	ldd	r31, Y+1	; 0x01
    1860:	c3 58       	subi	r28, 0x83	; 131
    1862:	d0 40       	sbci	r29, 0x00	; 0
    1864:	34 97       	sbiw	r30, 0x04	; 4
    1866:	31 c0       	rjmp	.+98     	; 0x18ca <USB_ProcessHIDReport+0x22c>
				ReportData     += 4;
				break;
			case DATA_SIZE_2:
				ReportItemData  = *((uint16_t*)ReportData);
    1868:	cf 57       	subi	r28, 0x7F	; 127
    186a:	df 4f       	sbci	r29, 0xFF	; 255
    186c:	a8 81       	ld	r26, Y
    186e:	b9 81       	ldd	r27, Y+1	; 0x01
    1870:	c1 58       	subi	r28, 0x81	; 129
    1872:	d0 40       	sbci	r29, 0x00	; 0
    1874:	8d 91       	ld	r24, X+
    1876:	9d 91       	ld	r25, X+
    1878:	cf 57       	subi	r28, 0x7F	; 127
    187a:	df 4f       	sbci	r29, 0xFF	; 255
    187c:	b9 83       	std	Y+1, r27	; 0x01
    187e:	a8 83       	st	Y, r26
    1880:	c1 58       	subi	r28, 0x81	; 129
    1882:	d0 40       	sbci	r29, 0x00	; 0
    1884:	7c 01       	movw	r14, r24
    1886:	00 e0       	ldi	r16, 0x00	; 0
    1888:	10 e0       	ldi	r17, 0x00	; 0
				ReportSize     -= 2;
    188a:	cd 57       	subi	r28, 0x7D	; 125
    188c:	df 4f       	sbci	r29, 0xFF	; 255
    188e:	e8 81       	ld	r30, Y
    1890:	f9 81       	ldd	r31, Y+1	; 0x01
    1892:	c3 58       	subi	r28, 0x83	; 131
    1894:	d0 40       	sbci	r29, 0x00	; 0
    1896:	32 97       	sbiw	r30, 0x02	; 2
    1898:	18 c0       	rjmp	.+48     	; 0x18ca <USB_ProcessHIDReport+0x22c>
				ReportData     += 2;
				break;
			case DATA_SIZE_1:
				ReportItemData  = *((uint8_t*)ReportData);
    189a:	cf 57       	subi	r28, 0x7F	; 127
    189c:	df 4f       	sbci	r29, 0xFF	; 255
    189e:	a8 81       	ld	r26, Y
    18a0:	b9 81       	ldd	r27, Y+1	; 0x01
    18a2:	c1 58       	subi	r28, 0x81	; 129
    18a4:	d0 40       	sbci	r29, 0x00	; 0
    18a6:	8d 91       	ld	r24, X+
    18a8:	cf 57       	subi	r28, 0x7F	; 127
    18aa:	df 4f       	sbci	r29, 0xFF	; 255
    18ac:	b9 83       	std	Y+1, r27	; 0x01
    18ae:	a8 83       	st	Y, r26
    18b0:	c1 58       	subi	r28, 0x81	; 129
    18b2:	d0 40       	sbci	r29, 0x00	; 0
    18b4:	e8 2e       	mov	r14, r24
    18b6:	ff 24       	eor	r15, r15
    18b8:	00 e0       	ldi	r16, 0x00	; 0
    18ba:	10 e0       	ldi	r17, 0x00	; 0
				ReportSize     -= 1;
    18bc:	cd 57       	subi	r28, 0x7D	; 125
    18be:	df 4f       	sbci	r29, 0xFF	; 255
    18c0:	e8 81       	ld	r30, Y
    18c2:	f9 81       	ldd	r31, Y+1	; 0x01
    18c4:	c3 58       	subi	r28, 0x83	; 131
    18c6:	d0 40       	sbci	r29, 0x00	; 0
    18c8:	31 97       	sbiw	r30, 0x01	; 1
    18ca:	cd 57       	subi	r28, 0x7D	; 125
    18cc:	df 4f       	sbci	r29, 0xFF	; 255
    18ce:	f9 83       	std	Y+1, r31	; 0x01
    18d0:	e8 83       	st	Y, r30
    18d2:	c3 58       	subi	r28, 0x83	; 131
    18d4:	d0 40       	sbci	r29, 0x00	; 0
				ReportData     += 1;
				break;
		}

		switch (HIDReportItem & (TYPE_MASK | TAG_MASK))
    18d6:	c1 58       	subi	r28, 0x81	; 129
    18d8:	df 4f       	sbci	r29, 0xFF	; 255
    18da:	88 81       	ld	r24, Y
    18dc:	99 81       	ldd	r25, Y+1	; 0x01
    18de:	cf 57       	subi	r28, 0x7F	; 127
    18e0:	d0 40       	sbci	r29, 0x00	; 0
    18e2:	8c 7f       	andi	r24, 0xFC	; 252
    18e4:	90 70       	andi	r25, 0x00	; 0
    18e6:	84 36       	cpi	r24, 0x64	; 100
    18e8:	91 05       	cpc	r25, r1
    18ea:	09 f4       	brne	.+2      	; 0x18ee <USB_ProcessHIDReport+0x250>
    18ec:	d2 c0       	rjmp	.+420    	; 0x1a92 <USB_ProcessHIDReport+0x3f4>
    18ee:	85 36       	cpi	r24, 0x65	; 101
    18f0:	91 05       	cpc	r25, r1
    18f2:	74 f5       	brge	.+92     	; 0x1950 <USB_ProcessHIDReport+0x2b2>
    18f4:	84 32       	cpi	r24, 0x24	; 36
    18f6:	91 05       	cpc	r25, r1
    18f8:	09 f4       	brne	.+2      	; 0x18fc <USB_ProcessHIDReport+0x25e>
    18fa:	b2 c0       	rjmp	.+356    	; 0x1a60 <USB_ProcessHIDReport+0x3c2>
    18fc:	85 32       	cpi	r24, 0x25	; 37
    18fe:	91 05       	cpc	r25, r1
    1900:	9c f4       	brge	.+38     	; 0x1928 <USB_ProcessHIDReport+0x28a>
    1902:	88 30       	cpi	r24, 0x08	; 8
    1904:	91 05       	cpc	r25, r1
    1906:	09 f4       	brne	.+2      	; 0x190a <USB_ProcessHIDReport+0x26c>
    1908:	2e c1       	rjmp	.+604    	; 0x1b66 <USB_ProcessHIDReport+0x4c8>
    190a:	89 30       	cpi	r24, 0x09	; 9
    190c:	91 05       	cpc	r25, r1
    190e:	24 f4       	brge	.+8      	; 0x1918 <USB_ProcessHIDReport+0x27a>
    1910:	04 97       	sbiw	r24, 0x04	; 4
    1912:	09 f0       	breq	.+2      	; 0x1916 <USB_ProcessHIDReport+0x278>
    1914:	71 c2       	rjmp	.+1250   	; 0x1df8 <USB_ProcessHIDReport+0x75a>
    1916:	98 c0       	rjmp	.+304    	; 0x1a48 <USB_ProcessHIDReport+0x3aa>
    1918:	84 31       	cpi	r24, 0x14	; 20
    191a:	91 05       	cpc	r25, r1
    191c:	09 f4       	brne	.+2      	; 0x1920 <USB_ProcessHIDReport+0x282>
    191e:	9a c0       	rjmp	.+308    	; 0x1a54 <USB_ProcessHIDReport+0x3b6>
    1920:	48 97       	sbiw	r24, 0x18	; 24
    1922:	09 f0       	breq	.+2      	; 0x1926 <USB_ProcessHIDReport+0x288>
    1924:	69 c2       	rjmp	.+1234   	; 0x1df8 <USB_ProcessHIDReport+0x75a>
    1926:	47 c0       	rjmp	.+142    	; 0x19b6 <USB_ProcessHIDReport+0x318>
    1928:	84 33       	cpi	r24, 0x34	; 52
    192a:	91 05       	cpc	r25, r1
    192c:	09 f4       	brne	.+2      	; 0x1930 <USB_ProcessHIDReport+0x292>
    192e:	a0 c0       	rjmp	.+320    	; 0x1a70 <USB_ProcessHIDReport+0x3d2>
    1930:	85 33       	cpi	r24, 0x35	; 53
    1932:	91 05       	cpc	r25, r1
    1934:	24 f4       	brge	.+8      	; 0x193e <USB_ProcessHIDReport+0x2a0>
    1936:	88 97       	sbiw	r24, 0x28	; 40
    1938:	09 f0       	breq	.+2      	; 0x193c <USB_ProcessHIDReport+0x29e>
    193a:	5e c2       	rjmp	.+1212   	; 0x1df8 <USB_ProcessHIDReport+0x75a>
    193c:	2f c1       	rjmp	.+606    	; 0x1b9c <USB_ProcessHIDReport+0x4fe>
    193e:	84 34       	cpi	r24, 0x44	; 68
    1940:	91 05       	cpc	r25, r1
    1942:	09 f4       	brne	.+2      	; 0x1946 <USB_ProcessHIDReport+0x2a8>
    1944:	9b c0       	rjmp	.+310    	; 0x1a7c <USB_ProcessHIDReport+0x3de>
    1946:	84 35       	cpi	r24, 0x54	; 84
    1948:	91 05       	cpc	r25, r1
    194a:	09 f0       	breq	.+2      	; 0x194e <USB_ProcessHIDReport+0x2b0>
    194c:	55 c2       	rjmp	.+1194   	; 0x1df8 <USB_ProcessHIDReport+0x75a>
    194e:	9e c0       	rjmp	.+316    	; 0x1a8c <USB_ProcessHIDReport+0x3ee>
    1950:	84 39       	cpi	r24, 0x94	; 148
    1952:	91 05       	cpc	r25, r1
    1954:	09 f4       	brne	.+2      	; 0x1958 <USB_ProcessHIDReport+0x2ba>
    1956:	a8 c0       	rjmp	.+336    	; 0x1aa8 <USB_ProcessHIDReport+0x40a>
    1958:	85 39       	cpi	r24, 0x95	; 149
    195a:	91 05       	cpc	r25, r1
    195c:	a4 f4       	brge	.+40     	; 0x1986 <USB_ProcessHIDReport+0x2e8>
    195e:	80 38       	cpi	r24, 0x80	; 128
    1960:	91 05       	cpc	r25, r1
    1962:	69 f1       	breq	.+90     	; 0x19be <USB_ProcessHIDReport+0x320>
    1964:	81 38       	cpi	r24, 0x81	; 129
    1966:	91 05       	cpc	r25, r1
    1968:	2c f4       	brge	.+10     	; 0x1974 <USB_ProcessHIDReport+0x2d6>
    196a:	84 37       	cpi	r24, 0x74	; 116
    196c:	91 05       	cpc	r25, r1
    196e:	09 f0       	breq	.+2      	; 0x1972 <USB_ProcessHIDReport+0x2d4>
    1970:	43 c2       	rjmp	.+1158   	; 0x1df8 <USB_ProcessHIDReport+0x75a>
    1972:	97 c0       	rjmp	.+302    	; 0x1aa2 <USB_ProcessHIDReport+0x404>
    1974:	84 38       	cpi	r24, 0x84	; 132
    1976:	91 05       	cpc	r25, r1
    1978:	09 f4       	brne	.+2      	; 0x197c <USB_ProcessHIDReport+0x2de>
    197a:	9a c0       	rjmp	.+308    	; 0x1ab0 <USB_ProcessHIDReport+0x412>
    197c:	80 39       	cpi	r24, 0x90	; 144
    197e:	91 05       	cpc	r25, r1
    1980:	09 f0       	breq	.+2      	; 0x1984 <USB_ProcessHIDReport+0x2e6>
    1982:	3a c2       	rjmp	.+1140   	; 0x1df8 <USB_ProcessHIDReport+0x75a>
    1984:	1c c0       	rjmp	.+56     	; 0x19be <USB_ProcessHIDReport+0x320>
    1986:	80 3b       	cpi	r24, 0xB0	; 176
    1988:	91 05       	cpc	r25, r1
    198a:	c9 f0       	breq	.+50     	; 0x19be <USB_ProcessHIDReport+0x320>
    198c:	81 3b       	cpi	r24, 0xB1	; 177
    198e:	91 05       	cpc	r25, r1
    1990:	4c f4       	brge	.+18     	; 0x19a4 <USB_ProcessHIDReport+0x306>
    1992:	80 3a       	cpi	r24, 0xA0	; 160
    1994:	91 05       	cpc	r25, r1
    1996:	09 f4       	brne	.+2      	; 0x199a <USB_ProcessHIDReport+0x2fc>
    1998:	09 c1       	rjmp	.+530    	; 0x1bac <USB_ProcessHIDReport+0x50e>
    199a:	84 3a       	cpi	r24, 0xA4	; 164
    199c:	91 05       	cpc	r25, r1
    199e:	09 f0       	breq	.+2      	; 0x19a2 <USB_ProcessHIDReport+0x304>
    19a0:	2b c2       	rjmp	.+1110   	; 0x1df8 <USB_ProcessHIDReport+0x75a>
    19a2:	2a c0       	rjmp	.+84     	; 0x19f8 <USB_ProcessHIDReport+0x35a>
    19a4:	84 3b       	cpi	r24, 0xB4	; 180
    19a6:	91 05       	cpc	r25, r1
    19a8:	09 f4       	brne	.+2      	; 0x19ac <USB_ProcessHIDReport+0x30e>
    19aa:	3e c0       	rjmp	.+124    	; 0x1a28 <USB_ProcessHIDReport+0x38a>
    19ac:	80 3c       	cpi	r24, 0xC0	; 192
    19ae:	91 05       	cpc	r25, r1
    19b0:	09 f0       	breq	.+2      	; 0x19b4 <USB_ProcessHIDReport+0x316>
    19b2:	22 c2       	rjmp	.+1092   	; 0x1df8 <USB_ProcessHIDReport+0x75a>
    19b4:	5a c1       	rjmp	.+692    	; 0x1c6a <USB_ProcessHIDReport+0x5cc>
    19b6:	f5 01       	movw	r30, r10
    19b8:	37 01       	movw	r6, r14
    19ba:	48 01       	movw	r8, r16
    19bc:	1e c2       	rjmp	.+1084   	; 0x1dfa <USB_ProcessHIDReport+0x75c>
			case (TYPE_MAIN | TAG_MAIN_FEATURE):
				for (uint8_t ReportItemNum = 0; ReportItemNum < CurrStateTable->ReportCount; ReportItemNum++)
				{
					HID_ReportItem_t NewReportItem;

					memcpy(&NewReportItem.Attributes,
    19be:	cb 57       	subi	r28, 0x7B	; 123
    19c0:	df 4f       	sbci	r29, 0xFF	; 255
    19c2:	c8 82       	st	Y, r12
    19c4:	c5 58       	subi	r28, 0x85	; 133
    19c6:	d0 40       	sbci	r29, 0x00	; 0
    19c8:	ca 57       	subi	r28, 0x7A	; 122
    19ca:	df 4f       	sbci	r29, 0xFF	; 255
    19cc:	d8 82       	st	Y, r13
    19ce:	c6 58       	subi	r28, 0x86	; 134
    19d0:	d0 40       	sbci	r29, 0x00	; 0
    19d2:	ec 96       	adiw	r28, 0x3c	; 60
    19d4:	1f ae       	std	Y+63, r1	; 0x3f
    19d6:	ec 97       	sbiw	r28, 0x3c	; 60
					else if (UsageMinMax.Minimum <= UsageMinMax.Maximum)
					{
						NewReportItem.Attributes.Usage.Usage = UsageMinMax.Minimum++;
					}

					uint8_t ItemTag = (HIDReportItem & TAG_MASK);
    19d8:	20 7f       	andi	r18, 0xF0	; 240
    19da:	c9 57       	subi	r28, 0x79	; 121
    19dc:	df 4f       	sbci	r29, 0xFF	; 255
    19de:	28 83       	st	Y, r18
    19e0:	c7 58       	subi	r28, 0x87	; 135
    19e2:	d0 40       	sbci	r29, 0x00	; 0
					CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType] += CurrStateTable->Attributes.BitSize;

					if (ParserData->LargestReportSizeBits < NewReportItem.BitOffset)
					  ParserData->LargestReportSizeBits = NewReportItem.BitOffset;

					if (!(ReportItemData & IOF_CONSTANT) && CALLBACK_HIDParser_FilterHIDReportItem(&NewReportItem))
    19e4:	97 01       	movw	r18, r14
    19e6:	21 70       	andi	r18, 0x01	; 1
    19e8:	30 70       	andi	r19, 0x00	; 0
    19ea:	c8 57       	subi	r28, 0x78	; 120
    19ec:	df 4f       	sbci	r29, 0xFF	; 255
    19ee:	39 83       	std	Y+1, r19	; 0x01
    19f0:	28 83       	st	Y, r18
    19f2:	c8 58       	subi	r28, 0x88	; 136
    19f4:	d0 40       	sbci	r29, 0x00	; 0
    19f6:	f7 c1       	rjmp	.+1006   	; 0x1de6 <USB_ProcessHIDReport+0x748>
		}

		switch (HIDReportItem & (TYPE_MASK | TAG_MASK))
		{
			case (TYPE_GLOBAL | TAG_GLOBAL_PUSH):
				if (CurrStateTable == &StateTable[HID_STATETABLE_STACK_DEPTH - 1])
    19f8:	c4 57       	subi	r28, 0x74	; 116
    19fa:	df 4f       	sbci	r29, 0xFF	; 255
    19fc:	48 81       	ld	r20, Y
    19fe:	59 81       	ldd	r21, Y+1	; 0x01
    1a00:	cc 58       	subi	r28, 0x8C	; 140
    1a02:	d0 40       	sbci	r29, 0x00	; 0
    1a04:	c4 16       	cp	r12, r20
    1a06:	d5 06       	cpc	r13, r21
    1a08:	11 f4       	brne	.+4      	; 0x1a0e <USB_ProcessHIDReport+0x370>
    1a0a:	81 e0       	ldi	r24, 0x01	; 1
    1a0c:	1d c2       	rjmp	.+1082   	; 0x1e48 <USB_ProcessHIDReport+0x7aa>
				  return HID_PARSE_HIDStackOverflow;

				memcpy((CurrStateTable + 1),
    1a0e:	d6 01       	movw	r26, r12
    1a10:	5c 96       	adiw	r26, 0x1c	; 28
    1a12:	f6 01       	movw	r30, r12
    1a14:	8a e2       	ldi	r24, 0x2A	; 42
    1a16:	01 90       	ld	r0, Z+
    1a18:	0d 92       	st	X+, r0
    1a1a:	81 50       	subi	r24, 0x01	; 1
    1a1c:	e1 f7       	brne	.-8      	; 0x1a16 <USB_ProcessHIDReport+0x378>
				       CurrStateTable,
				       sizeof(HID_ReportItem_t));

				CurrStateTable++;
    1a1e:	8c e1       	ldi	r24, 0x1C	; 28
    1a20:	90 e0       	ldi	r25, 0x00	; 0
    1a22:	c8 0e       	add	r12, r24
    1a24:	d9 1e       	adc	r13, r25
    1a26:	e8 c1       	rjmp	.+976    	; 0x1df8 <USB_ProcessHIDReport+0x75a>
				break;
			case (TYPE_GLOBAL | TAG_GLOBAL_POP):
				if (CurrStateTable == &StateTable[0])
    1a28:	cc 56       	subi	r28, 0x6C	; 108
    1a2a:	df 4f       	sbci	r29, 0xFF	; 255
    1a2c:	a8 81       	ld	r26, Y
    1a2e:	b9 81       	ldd	r27, Y+1	; 0x01
    1a30:	c4 59       	subi	r28, 0x94	; 148
    1a32:	d0 40       	sbci	r29, 0x00	; 0
    1a34:	ca 16       	cp	r12, r26
    1a36:	db 06       	cpc	r13, r27
    1a38:	11 f4       	brne	.+4      	; 0x1a3e <USB_ProcessHIDReport+0x3a0>
    1a3a:	82 e0       	ldi	r24, 0x02	; 2
    1a3c:	05 c2       	rjmp	.+1034   	; 0x1e48 <USB_ProcessHIDReport+0x7aa>
				  return HID_PARSE_HIDStackUnderflow;

				CurrStateTable--;
    1a3e:	e4 ee       	ldi	r30, 0xE4	; 228
    1a40:	ff ef       	ldi	r31, 0xFF	; 255
    1a42:	ce 0e       	add	r12, r30
    1a44:	df 1e       	adc	r13, r31
    1a46:	d8 c1       	rjmp	.+944    	; 0x1df8 <USB_ProcessHIDReport+0x75a>
				break;
			case (TYPE_GLOBAL | TAG_GLOBAL_USAGEPAGE):
				CurrStateTable->Attributes.Usage.Page       = ReportItemData;
    1a48:	d6 01       	movw	r26, r12
    1a4a:	12 96       	adiw	r26, 0x02	; 2
    1a4c:	fc 92       	st	X, r15
    1a4e:	ee 92       	st	-X, r14
    1a50:	11 97       	sbiw	r26, 0x01	; 1
    1a52:	d2 c1       	rjmp	.+932    	; 0x1df8 <USB_ProcessHIDReport+0x75a>
				break;
			case (TYPE_GLOBAL | TAG_GLOBAL_LOGICALMIN):
				CurrStateTable->Attributes.Logical.Minimum  = ReportItemData;
    1a54:	f6 01       	movw	r30, r12
    1a56:	e2 86       	std	Z+10, r14	; 0x0a
    1a58:	f3 86       	std	Z+11, r15	; 0x0b
    1a5a:	04 87       	std	Z+12, r16	; 0x0c
    1a5c:	15 87       	std	Z+13, r17	; 0x0d
    1a5e:	cc c1       	rjmp	.+920    	; 0x1df8 <USB_ProcessHIDReport+0x75a>
				break;
			case (TYPE_GLOBAL | TAG_GLOBAL_LOGICALMAX):
				CurrStateTable->Attributes.Logical.Maximum  = ReportItemData;
    1a60:	d6 01       	movw	r26, r12
    1a62:	1e 96       	adiw	r26, 0x0e	; 14
    1a64:	ed 92       	st	X+, r14
    1a66:	fd 92       	st	X+, r15
    1a68:	0d 93       	st	X+, r16
    1a6a:	1c 93       	st	X, r17
    1a6c:	51 97       	sbiw	r26, 0x11	; 17
    1a6e:	c4 c1       	rjmp	.+904    	; 0x1df8 <USB_ProcessHIDReport+0x75a>
				break;
			case (TYPE_GLOBAL | TAG_GLOBAL_PHYSMIN):
				CurrStateTable->Attributes.Physical.Minimum = ReportItemData;
    1a70:	f6 01       	movw	r30, r12
    1a72:	e2 8a       	std	Z+18, r14	; 0x12
    1a74:	f3 8a       	std	Z+19, r15	; 0x13
    1a76:	04 8b       	std	Z+20, r16	; 0x14
    1a78:	15 8b       	std	Z+21, r17	; 0x15
    1a7a:	be c1       	rjmp	.+892    	; 0x1df8 <USB_ProcessHIDReport+0x75a>
				break;
			case (TYPE_GLOBAL | TAG_GLOBAL_PHYSMAX):
				CurrStateTable->Attributes.Physical.Maximum = ReportItemData;
    1a7c:	d6 01       	movw	r26, r12
    1a7e:	56 96       	adiw	r26, 0x16	; 22
    1a80:	ed 92       	st	X+, r14
    1a82:	fd 92       	st	X+, r15
    1a84:	0d 93       	st	X+, r16
    1a86:	1c 93       	st	X, r17
    1a88:	59 97       	sbiw	r26, 0x19	; 25
    1a8a:	b6 c1       	rjmp	.+876    	; 0x1df8 <USB_ProcessHIDReport+0x75a>
				break;
			case (TYPE_GLOBAL | TAG_GLOBAL_UNITEXP):
				CurrStateTable->Attributes.Unit.Exponent    = ReportItemData;
    1a8c:	f6 01       	movw	r30, r12
    1a8e:	e1 86       	std	Z+9, r14	; 0x09
    1a90:	b3 c1       	rjmp	.+870    	; 0x1df8 <USB_ProcessHIDReport+0x75a>
				break;
			case (TYPE_GLOBAL | TAG_GLOBAL_UNIT):
				CurrStateTable->Attributes.Unit.Type        = ReportItemData;
    1a92:	d6 01       	movw	r26, r12
    1a94:	15 96       	adiw	r26, 0x05	; 5
    1a96:	ed 92       	st	X+, r14
    1a98:	fd 92       	st	X+, r15
    1a9a:	0d 93       	st	X+, r16
    1a9c:	1c 93       	st	X, r17
    1a9e:	18 97       	sbiw	r26, 0x08	; 8
    1aa0:	ab c1       	rjmp	.+854    	; 0x1df8 <USB_ProcessHIDReport+0x75a>
				break;
			case (TYPE_GLOBAL | TAG_GLOBAL_REPORTSIZE):
				CurrStateTable->Attributes.BitSize          = ReportItemData;
    1aa2:	f6 01       	movw	r30, r12
    1aa4:	e0 82       	st	Z, r14
    1aa6:	a8 c1       	rjmp	.+848    	; 0x1df8 <USB_ProcessHIDReport+0x75a>
				break;
			case (TYPE_GLOBAL | TAG_GLOBAL_REPORTCOUNT):
				CurrStateTable->ReportCount                 = ReportItemData;
    1aa8:	d6 01       	movw	r26, r12
    1aaa:	5a 96       	adiw	r26, 0x1a	; 26
    1aac:	ec 92       	st	X, r14
    1aae:	a4 c1       	rjmp	.+840    	; 0x1df8 <USB_ProcessHIDReport+0x75a>
				break;
			case (TYPE_GLOBAL | TAG_GLOBAL_REPORTID):
				CurrStateTable->ReportID                    = ReportItemData;
    1ab0:	3e 2d       	mov	r19, r14
    1ab2:	f6 01       	movw	r30, r12
    1ab4:	e3 8e       	std	Z+27, r14	; 0x1b

				if (ParserData->UsingReportIDs)
    1ab6:	c2 57       	subi	r28, 0x72	; 114
    1ab8:	df 4f       	sbci	r29, 0xFF	; 255
    1aba:	a8 81       	ld	r26, Y
    1abc:	b9 81       	ldd	r27, Y+1	; 0x01
    1abe:	ce 58       	subi	r28, 0x8E	; 142
    1ac0:	d0 40       	sbci	r29, 0x00	; 0
    1ac2:	8c 91       	ld	r24, X
    1ac4:	88 23       	and	r24, r24
    1ac6:	09 f4       	brne	.+2      	; 0x1aca <USB_ProcessHIDReport+0x42c>
    1ac8:	40 c0       	rjmp	.+128    	; 0x1b4a <USB_ProcessHIDReport+0x4ac>
				{
					CurrReportIDInfo = NULL;

					for (uint8_t i = 0; i < ParserData->TotalDeviceReports; i++)
    1aca:	c0 57       	subi	r28, 0x70	; 112
    1acc:	df 4f       	sbci	r29, 0xFF	; 255
    1ace:	e8 81       	ld	r30, Y
    1ad0:	f9 81       	ldd	r31, Y+1	; 0x01
    1ad2:	c0 59       	subi	r28, 0x90	; 144
    1ad4:	d0 40       	sbci	r29, 0x00	; 0
    1ad6:	20 81       	ld	r18, Z
    1ad8:	ce 56       	subi	r28, 0x6E	; 110
    1ada:	df 4f       	sbci	r29, 0xFF	; 255
    1adc:	88 81       	ld	r24, Y
    1ade:	c2 59       	subi	r28, 0x92	; 146
    1ae0:	d0 40       	sbci	r29, 0x00	; 0
    1ae2:	cd 56       	subi	r28, 0x6D	; 109
    1ae4:	df 4f       	sbci	r29, 0xFF	; 255
    1ae6:	98 81       	ld	r25, Y
    1ae8:	c3 59       	subi	r28, 0x93	; 147
    1aea:	d0 40       	sbci	r29, 0x00	; 0
    1aec:	dc 01       	movw	r26, r24
    1aee:	e0 e0       	ldi	r30, 0x00	; 0
    1af0:	10 c0       	rjmp	.+32     	; 0x1b12 <USB_ProcessHIDReport+0x474>
					{
						if (ParserData->ReportIDSizes[i].ReportID == CurrStateTable->ReportID)
    1af2:	8c 91       	ld	r24, X
    1af4:	17 96       	adiw	r26, 0x07	; 7
    1af6:	83 17       	cp	r24, r19
    1af8:	59 f4       	brne	.+22     	; 0x1b10 <USB_ProcessHIDReport+0x472>
						{
							CurrReportIDInfo = &ParserData->ReportIDSizes[i];
    1afa:	87 e0       	ldi	r24, 0x07	; 7
    1afc:	e8 9f       	mul	r30, r24
    1afe:	20 01       	movw	r4, r0
    1b00:	11 24       	eor	r1, r1
    1b02:	20 e9       	ldi	r18, 0x90	; 144
    1b04:	33 e0       	ldi	r19, 0x03	; 3
    1b06:	42 0e       	add	r4, r18
    1b08:	53 1e       	adc	r5, r19
    1b0a:	42 0c       	add	r4, r2
    1b0c:	53 1c       	adc	r5, r3
    1b0e:	1d c0       	rjmp	.+58     	; 0x1b4a <USB_ProcessHIDReport+0x4ac>

				if (ParserData->UsingReportIDs)
				{
					CurrReportIDInfo = NULL;

					for (uint8_t i = 0; i < ParserData->TotalDeviceReports; i++)
    1b10:	ef 5f       	subi	r30, 0xFF	; 255
    1b12:	e2 17       	cp	r30, r18
    1b14:	70 f3       	brcs	.-36     	; 0x1af2 <USB_ProcessHIDReport+0x454>
						}
					}

					if (CurrReportIDInfo == NULL)
					{
						if (ParserData->TotalDeviceReports == HID_MAX_REPORT_IDS)
    1b16:	2a 30       	cpi	r18, 0x0A	; 10
    1b18:	11 f4       	brne	.+4      	; 0x1b1e <USB_ProcessHIDReport+0x480>
    1b1a:	87 e0       	ldi	r24, 0x07	; 7
    1b1c:	95 c1       	rjmp	.+810    	; 0x1e48 <USB_ProcessHIDReport+0x7aa>
						  return HID_PARSE_InsufficientReportIDItems;

						CurrReportIDInfo = &ParserData->ReportIDSizes[ParserData->TotalDeviceReports++];
    1b1e:	87 e0       	ldi	r24, 0x07	; 7
    1b20:	28 9f       	mul	r18, r24
    1b22:	20 01       	movw	r4, r0
    1b24:	11 24       	eor	r1, r1
    1b26:	40 e9       	ldi	r20, 0x90	; 144
    1b28:	53 e0       	ldi	r21, 0x03	; 3
    1b2a:	44 0e       	add	r4, r20
    1b2c:	55 1e       	adc	r5, r21
    1b2e:	42 0c       	add	r4, r2
    1b30:	53 1c       	adc	r5, r3
    1b32:	2f 5f       	subi	r18, 0xFF	; 255
    1b34:	c0 57       	subi	r28, 0x70	; 112
    1b36:	df 4f       	sbci	r29, 0xFF	; 255
    1b38:	a8 81       	ld	r26, Y
    1b3a:	b9 81       	ldd	r27, Y+1	; 0x01
    1b3c:	c0 59       	subi	r28, 0x90	; 144
    1b3e:	d0 40       	sbci	r29, 0x00	; 0
    1b40:	2c 93       	st	X, r18
						memset(CurrReportIDInfo, 0x00, sizeof(HID_ReportSizeInfo_t));
    1b42:	f2 01       	movw	r30, r4
    1b44:	11 92       	st	Z+, r1
    1b46:	8a 95       	dec	r24
    1b48:	e9 f7       	brne	.-6      	; 0x1b44 <USB_ProcessHIDReport+0x4a6>
					}
				}

				ParserData->UsingReportIDs = true;
    1b4a:	e1 e0       	ldi	r30, 0x01	; 1
    1b4c:	c2 57       	subi	r28, 0x72	; 114
    1b4e:	df 4f       	sbci	r29, 0xFF	; 255
    1b50:	a8 81       	ld	r26, Y
    1b52:	b9 81       	ldd	r27, Y+1	; 0x01
    1b54:	ce 58       	subi	r28, 0x8E	; 142
    1b56:	d0 40       	sbci	r29, 0x00	; 0
    1b58:	ec 93       	st	X, r30

				CurrReportIDInfo->ReportID = CurrStateTable->ReportID;
    1b5a:	d6 01       	movw	r26, r12
    1b5c:	5b 96       	adiw	r26, 0x1b	; 27
    1b5e:	8c 91       	ld	r24, X
    1b60:	f2 01       	movw	r30, r4
    1b62:	80 83       	st	Z, r24
    1b64:	49 c1       	rjmp	.+658    	; 0x1df8 <USB_ProcessHIDReport+0x75a>
				break;
			case (TYPE_LOCAL | TAG_LOCAL_USAGE):
				if (UsageListSize == HID_USAGE_STACK_DEPTH)
    1b66:	ed 96       	adiw	r28, 0x3d	; 61
    1b68:	ff ad       	ldd	r31, Y+63	; 0x3f
    1b6a:	ed 97       	sbiw	r28, 0x3d	; 61
    1b6c:	f8 30       	cpi	r31, 0x08	; 8
    1b6e:	11 f4       	brne	.+4      	; 0x1b74 <USB_ProcessHIDReport+0x4d6>
    1b70:	86 e0       	ldi	r24, 0x06	; 6
    1b72:	6a c1       	rjmp	.+724    	; 0x1e48 <USB_ProcessHIDReport+0x7aa>
				  return HID_PARSE_UsageListOverflow;

				UsageList[UsageListSize++] = ReportItemData;
    1b74:	ed 96       	adiw	r28, 0x3d	; 61
    1b76:	2f ad       	ldd	r18, Y+63	; 0x3f
    1b78:	ed 97       	sbiw	r28, 0x3d	; 61
    1b7a:	e2 2f       	mov	r30, r18
    1b7c:	f0 e0       	ldi	r31, 0x00	; 0
    1b7e:	ee 0f       	add	r30, r30
    1b80:	ff 1f       	adc	r31, r31
    1b82:	41 e0       	ldi	r20, 0x01	; 1
    1b84:	50 e0       	ldi	r21, 0x00	; 0
    1b86:	4c 0f       	add	r20, r28
    1b88:	5d 1f       	adc	r21, r29
    1b8a:	e4 0f       	add	r30, r20
    1b8c:	f5 1f       	adc	r31, r21
    1b8e:	f1 82       	std	Z+1, r15	; 0x01
    1b90:	e0 82       	st	Z, r14
    1b92:	2f 5f       	subi	r18, 0xFF	; 255
    1b94:	ed 96       	adiw	r28, 0x3d	; 61
    1b96:	2f af       	std	Y+63, r18	; 0x3f
    1b98:	ed 97       	sbiw	r28, 0x3d	; 61
    1b9a:	2e c1       	rjmp	.+604    	; 0x1df8 <USB_ProcessHIDReport+0x75a>
				break;
    1b9c:	f5 01       	movw	r30, r10
    1b9e:	eb 96       	adiw	r28, 0x3b	; 59
    1ba0:	ec ae       	std	Y+60, r14	; 0x3c
    1ba2:	fd ae       	std	Y+61, r15	; 0x3d
    1ba4:	0e af       	std	Y+62, r16	; 0x3e
    1ba6:	1f af       	std	Y+63, r17	; 0x3f
    1ba8:	eb 97       	sbiw	r28, 0x3b	; 59
    1baa:	27 c1       	rjmp	.+590    	; 0x1dfa <USB_ProcessHIDReport+0x75c>
				break;
			case (TYPE_LOCAL | TAG_LOCAL_USAGEMAX):
				UsageMinMax.Maximum = ReportItemData;
				break;
			case (TYPE_MAIN | TAG_MAIN_COLLECTION):
				if (CurrCollectionPath == NULL)
    1bac:	a1 14       	cp	r10, r1
    1bae:	b1 04       	cpc	r11, r1
    1bb0:	29 f4       	brne	.+10     	; 0x1bbc <USB_ProcessHIDReport+0x51e>
    1bb2:	e7 96       	adiw	r28, 0x37	; 55
    1bb4:	ee ad       	ldd	r30, Y+62	; 0x3e
    1bb6:	ff ad       	ldd	r31, Y+63	; 0x3f
    1bb8:	e7 97       	sbiw	r28, 0x37	; 55
    1bba:	15 c0       	rjmp	.+42     	; 0x1be6 <USB_ProcessHIDReport+0x548>
    1bbc:	e5 96       	adiw	r28, 0x35	; 53
    1bbe:	ee ad       	ldd	r30, Y+62	; 0x3e
    1bc0:	ff ad       	ldd	r31, Y+63	; 0x3f
    1bc2:	e5 97       	sbiw	r28, 0x35	; 53
    1bc4:	0a c0       	rjmp	.+20     	; 0x1bda <USB_ProcessHIDReport+0x53c>

					CurrCollectionPath = &ParserData->CollectionPaths[1];

					while (CurrCollectionPath->Parent != NULL)
					{
						if (CurrCollectionPath == &ParserData->CollectionPaths[HID_MAX_COLLECTIONS - 1])
    1bc6:	ef 96       	adiw	r28, 0x3f	; 63
    1bc8:	8e ad       	ldd	r24, Y+62	; 0x3e
    1bca:	9f ad       	ldd	r25, Y+63	; 0x3f
    1bcc:	ef 97       	sbiw	r28, 0x3f	; 63
    1bce:	e8 17       	cp	r30, r24
    1bd0:	f9 07       	cpc	r31, r25
    1bd2:	11 f4       	brne	.+4      	; 0x1bd8 <USB_ProcessHIDReport+0x53a>
    1bd4:	85 e0       	ldi	r24, 0x05	; 5
    1bd6:	38 c1       	rjmp	.+624    	; 0x1e48 <USB_ProcessHIDReport+0x7aa>
						  return HID_PARSE_InsufficientCollectionPaths;

						CurrCollectionPath++;
    1bd8:	37 96       	adiw	r30, 0x07	; 7
				{
					HID_CollectionPath_t* ParentCollectionPath = CurrCollectionPath;

					CurrCollectionPath = &ParserData->CollectionPaths[1];

					while (CurrCollectionPath->Parent != NULL)
    1bda:	85 81       	ldd	r24, Z+5	; 0x05
    1bdc:	96 81       	ldd	r25, Z+6	; 0x06
    1bde:	89 2b       	or	r24, r25
    1be0:	91 f7       	brne	.-28     	; 0x1bc6 <USB_ProcessHIDReport+0x528>
						  return HID_PARSE_InsufficientCollectionPaths;

						CurrCollectionPath++;
					}

					CurrCollectionPath->Parent = ParentCollectionPath;
    1be2:	b6 82       	std	Z+6, r11	; 0x06
    1be4:	a5 82       	std	Z+5, r10	; 0x05
				}

				CurrCollectionPath->Type = ReportItemData;
    1be6:	e0 82       	st	Z, r14
				CurrCollectionPath->Usage.Page = CurrStateTable->Attributes.Usage.Page;
    1be8:	d6 01       	movw	r26, r12
    1bea:	11 96       	adiw	r26, 0x01	; 1
    1bec:	8d 91       	ld	r24, X+
    1bee:	9c 91       	ld	r25, X
    1bf0:	12 97       	sbiw	r26, 0x02	; 2
    1bf2:	92 83       	std	Z+2, r25	; 0x02
    1bf4:	81 83       	std	Z+1, r24	; 0x01

				if (UsageListSize)
    1bf6:	ed 96       	adiw	r28, 0x3d	; 61
    1bf8:	bf ad       	ldd	r27, Y+63	; 0x3f
    1bfa:	ed 97       	sbiw	r28, 0x3d	; 61
    1bfc:	bb 23       	and	r27, r27
    1bfe:	09 f1       	breq	.+66     	; 0x1c42 <USB_ProcessHIDReport+0x5a4>
				{
					CurrCollectionPath->Usage.Usage = UsageList[0];
    1c00:	89 81       	ldd	r24, Y+1	; 0x01
    1c02:	9a 81       	ldd	r25, Y+2	; 0x02
    1c04:	94 83       	std	Z+4, r25	; 0x04
    1c06:	83 83       	std	Z+3, r24	; 0x03
    1c08:	de 01       	movw	r26, r28
    1c0a:	11 96       	adiw	r26, 0x01	; 1

					for (uint8_t i = 0; i < UsageListSize; i++)
    1c0c:	ed 96       	adiw	r28, 0x3d	; 61
    1c0e:	4f ad       	ldd	r20, Y+63	; 0x3f
    1c10:	ed 97       	sbiw	r28, 0x3d	; 61
    1c12:	24 2f       	mov	r18, r20
    1c14:	30 e0       	ldi	r19, 0x00	; 0
    1c16:	22 0f       	add	r18, r18
    1c18:	33 1f       	adc	r19, r19
    1c1a:	2a 0f       	add	r18, r26
    1c1c:	3b 1f       	adc	r19, r27
    1c1e:	06 c0       	rjmp	.+12     	; 0x1c2c <USB_ProcessHIDReport+0x58e>
					  UsageList[i] = UsageList[i + 1];
    1c20:	12 96       	adiw	r26, 0x02	; 2
    1c22:	8d 91       	ld	r24, X+
    1c24:	9c 91       	ld	r25, X
    1c26:	13 97       	sbiw	r26, 0x03	; 3
    1c28:	8d 93       	st	X+, r24
    1c2a:	9d 93       	st	X+, r25

				if (UsageListSize)
				{
					CurrCollectionPath->Usage.Usage = UsageList[0];

					for (uint8_t i = 0; i < UsageListSize; i++)
    1c2c:	a2 17       	cp	r26, r18
    1c2e:	b3 07       	cpc	r27, r19
    1c30:	b9 f7       	brne	.-18     	; 0x1c20 <USB_ProcessHIDReport+0x582>
					  UsageList[i] = UsageList[i + 1];

					UsageListSize--;
    1c32:	ed 96       	adiw	r28, 0x3d	; 61
    1c34:	9f ad       	ldd	r25, Y+63	; 0x3f
    1c36:	ed 97       	sbiw	r28, 0x3d	; 61
    1c38:	91 50       	subi	r25, 0x01	; 1
    1c3a:	ed 96       	adiw	r28, 0x3d	; 61
    1c3c:	9f af       	std	Y+63, r25	; 0x3f
    1c3e:	ed 97       	sbiw	r28, 0x3d	; 61
    1c40:	dc c0       	rjmp	.+440    	; 0x1dfa <USB_ProcessHIDReport+0x75c>
				}
				else if (UsageMinMax.Minimum <= UsageMinMax.Maximum)
    1c42:	eb 96       	adiw	r28, 0x3b	; 59
    1c44:	2c ad       	ldd	r18, Y+60	; 0x3c
    1c46:	3d ad       	ldd	r19, Y+61	; 0x3d
    1c48:	4e ad       	ldd	r20, Y+62	; 0x3e
    1c4a:	5f ad       	ldd	r21, Y+63	; 0x3f
    1c4c:	eb 97       	sbiw	r28, 0x3b	; 59
    1c4e:	26 15       	cp	r18, r6
    1c50:	37 05       	cpc	r19, r7
    1c52:	48 05       	cpc	r20, r8
    1c54:	59 05       	cpc	r21, r9
    1c56:	08 f4       	brcc	.+2      	; 0x1c5a <USB_ProcessHIDReport+0x5bc>
    1c58:	d0 c0       	rjmp	.+416    	; 0x1dfa <USB_ProcessHIDReport+0x75c>
				{
					CurrCollectionPath->Usage.Usage = UsageMinMax.Minimum++;
    1c5a:	74 82       	std	Z+4, r7	; 0x04
    1c5c:	63 82       	std	Z+3, r6	; 0x03
    1c5e:	08 94       	sec
    1c60:	61 1c       	adc	r6, r1
    1c62:	71 1c       	adc	r7, r1
    1c64:	81 1c       	adc	r8, r1
    1c66:	91 1c       	adc	r9, r1
    1c68:	c8 c0       	rjmp	.+400    	; 0x1dfa <USB_ProcessHIDReport+0x75c>
				}

				break;
			case (TYPE_MAIN | TAG_MAIN_ENDCOLLECTION):
				if (CurrCollectionPath == NULL)
    1c6a:	a1 14       	cp	r10, r1
    1c6c:	b1 04       	cpc	r11, r1
    1c6e:	11 f4       	brne	.+4      	; 0x1c74 <USB_ProcessHIDReport+0x5d6>
    1c70:	84 e0       	ldi	r24, 0x04	; 4
    1c72:	ea c0       	rjmp	.+468    	; 0x1e48 <USB_ProcessHIDReport+0x7aa>
				  return HID_PARSE_UnexpectedEndCollection;

				CurrCollectionPath = CurrCollectionPath->Parent;
    1c74:	d5 01       	movw	r26, r10
    1c76:	15 96       	adiw	r26, 0x05	; 5
    1c78:	ed 91       	ld	r30, X+
    1c7a:	fc 91       	ld	r31, X
    1c7c:	16 97       	sbiw	r26, 0x06	; 6
    1c7e:	bd c0       	rjmp	.+378    	; 0x1dfa <USB_ProcessHIDReport+0x75c>
			case (TYPE_MAIN | TAG_MAIN_FEATURE):
				for (uint8_t ReportItemNum = 0; ReportItemNum < CurrStateTable->ReportCount; ReportItemNum++)
				{
					HID_ReportItem_t NewReportItem;

					memcpy(&NewReportItem.Attributes,
    1c80:	de 01       	movw	r26, r28
    1c82:	59 96       	adiw	r26, 0x19	; 25
    1c84:	cb 57       	subi	r28, 0x7B	; 123
    1c86:	df 4f       	sbci	r29, 0xFF	; 255
    1c88:	88 81       	ld	r24, Y
    1c8a:	c5 58       	subi	r28, 0x85	; 133
    1c8c:	d0 40       	sbci	r29, 0x00	; 0
    1c8e:	ca 57       	subi	r28, 0x7A	; 122
    1c90:	df 4f       	sbci	r29, 0xFF	; 255
    1c92:	98 81       	ld	r25, Y
    1c94:	c6 58       	subi	r28, 0x86	; 134
    1c96:	d0 40       	sbci	r29, 0x00	; 0
    1c98:	9c 01       	movw	r18, r24
    1c9a:	f9 01       	movw	r30, r18
    1c9c:	8a e1       	ldi	r24, 0x1A	; 26
    1c9e:	01 90       	ld	r0, Z+
    1ca0:	0d 92       	st	X+, r0
    1ca2:	81 50       	subi	r24, 0x01	; 1
    1ca4:	e1 f7       	brne	.-8      	; 0x1c9e <USB_ProcessHIDReport+0x600>
					       &CurrStateTable->Attributes,
					       sizeof(HID_ReportItem_Attributes_t));

					NewReportItem.ItemFlags      = ReportItemData;
    1ca6:	fd 8a       	std	Y+21, r15	; 0x15
    1ca8:	ec 8a       	std	Y+20, r14	; 0x14
					NewReportItem.CollectionPath = CurrCollectionPath;
    1caa:	b8 8e       	std	Y+24, r11	; 0x18
    1cac:	af 8a       	std	Y+23, r10	; 0x17
					NewReportItem.ReportID       = CurrStateTable->ReportID;
    1cae:	f6 01       	movw	r30, r12
    1cb0:	83 8d       	ldd	r24, Z+27	; 0x1b
    1cb2:	8e 8b       	std	Y+22, r24	; 0x16

					if (UsageListSize)
    1cb4:	ed 96       	adiw	r28, 0x3d	; 61
    1cb6:	ff ad       	ldd	r31, Y+63	; 0x3f
    1cb8:	ed 97       	sbiw	r28, 0x3d	; 61
    1cba:	ff 23       	and	r31, r31
    1cbc:	f9 f0       	breq	.+62     	; 0x1cfc <USB_ProcessHIDReport+0x65e>
					{
						NewReportItem.Attributes.Usage.Usage = UsageList[0];
    1cbe:	49 81       	ldd	r20, Y+1	; 0x01
    1cc0:	5a 81       	ldd	r21, Y+2	; 0x02
    1cc2:	fe 01       	movw	r30, r28
    1cc4:	31 96       	adiw	r30, 0x01	; 1

						for (uint8_t i = 0; i < UsageListSize; i++)
    1cc6:	ed 96       	adiw	r28, 0x3d	; 61
    1cc8:	8f ad       	ldd	r24, Y+63	; 0x3f
    1cca:	ed 97       	sbiw	r28, 0x3d	; 61
    1ccc:	28 2f       	mov	r18, r24
    1cce:	30 e0       	ldi	r19, 0x00	; 0
    1cd0:	22 0f       	add	r18, r18
    1cd2:	33 1f       	adc	r19, r19
    1cd4:	2e 0f       	add	r18, r30
    1cd6:	3f 1f       	adc	r19, r31
    1cd8:	04 c0       	rjmp	.+8      	; 0x1ce2 <USB_ProcessHIDReport+0x644>
						  UsageList[i] = UsageList[i + 1];
    1cda:	82 81       	ldd	r24, Z+2	; 0x02
    1cdc:	93 81       	ldd	r25, Z+3	; 0x03
    1cde:	81 93       	st	Z+, r24
    1ce0:	91 93       	st	Z+, r25

					if (UsageListSize)
					{
						NewReportItem.Attributes.Usage.Usage = UsageList[0];

						for (uint8_t i = 0; i < UsageListSize; i++)
    1ce2:	e2 17       	cp	r30, r18
    1ce4:	f3 07       	cpc	r31, r19
    1ce6:	c9 f7       	brne	.-14     	; 0x1cda <USB_ProcessHIDReport+0x63c>
					NewReportItem.CollectionPath = CurrCollectionPath;
					NewReportItem.ReportID       = CurrStateTable->ReportID;

					if (UsageListSize)
					{
						NewReportItem.Attributes.Usage.Usage = UsageList[0];
    1ce8:	5d 8f       	std	Y+29, r21	; 0x1d
    1cea:	4c 8f       	std	Y+28, r20	; 0x1c

						for (uint8_t i = 0; i < UsageListSize; i++)
						  UsageList[i] = UsageList[i + 1];

						UsageListSize--;
    1cec:	ed 96       	adiw	r28, 0x3d	; 61
    1cee:	bf ad       	ldd	r27, Y+63	; 0x3f
    1cf0:	ed 97       	sbiw	r28, 0x3d	; 61
    1cf2:	b1 50       	subi	r27, 0x01	; 1
    1cf4:	ed 96       	adiw	r28, 0x3d	; 61
    1cf6:	bf af       	std	Y+63, r27	; 0x3f
    1cf8:	ed 97       	sbiw	r28, 0x3d	; 61
    1cfa:	12 c0       	rjmp	.+36     	; 0x1d20 <USB_ProcessHIDReport+0x682>
					}
					else if (UsageMinMax.Minimum <= UsageMinMax.Maximum)
    1cfc:	eb 96       	adiw	r28, 0x3b	; 59
    1cfe:	2c ad       	ldd	r18, Y+60	; 0x3c
    1d00:	3d ad       	ldd	r19, Y+61	; 0x3d
    1d02:	4e ad       	ldd	r20, Y+62	; 0x3e
    1d04:	5f ad       	ldd	r21, Y+63	; 0x3f
    1d06:	eb 97       	sbiw	r28, 0x3b	; 59
    1d08:	26 15       	cp	r18, r6
    1d0a:	37 05       	cpc	r19, r7
    1d0c:	48 05       	cpc	r20, r8
    1d0e:	59 05       	cpc	r21, r9
    1d10:	38 f0       	brcs	.+14     	; 0x1d20 <USB_ProcessHIDReport+0x682>
					{
						NewReportItem.Attributes.Usage.Usage = UsageMinMax.Minimum++;
    1d12:	7d 8e       	std	Y+29, r7	; 0x1d
    1d14:	6c 8e       	std	Y+28, r6	; 0x1c
    1d16:	08 94       	sec
    1d18:	61 1c       	adc	r6, r1
    1d1a:	71 1c       	adc	r7, r1
    1d1c:	81 1c       	adc	r8, r1
    1d1e:	91 1c       	adc	r9, r1
					}

					uint8_t ItemTag = (HIDReportItem & TAG_MASK);

					if (ItemTag == TAG_MAIN_INPUT)
    1d20:	c9 57       	subi	r28, 0x79	; 121
    1d22:	df 4f       	sbci	r29, 0xFF	; 255
    1d24:	38 81       	ld	r19, Y
    1d26:	c7 58       	subi	r28, 0x87	; 135
    1d28:	d0 40       	sbci	r29, 0x00	; 0
    1d2a:	30 38       	cpi	r19, 0x80	; 128
    1d2c:	11 f4       	brne	.+4      	; 0x1d32 <USB_ProcessHIDReport+0x694>
					  NewReportItem.ItemType = HID_REPORT_ITEM_In;
    1d2e:	1b 8a       	std	Y+19, r1	; 0x13
    1d30:	0c c0       	rjmp	.+24     	; 0x1d4a <USB_ProcessHIDReport+0x6ac>
					else if (ItemTag == TAG_MAIN_OUTPUT)
    1d32:	c9 57       	subi	r28, 0x79	; 121
    1d34:	df 4f       	sbci	r29, 0xFF	; 255
    1d36:	48 81       	ld	r20, Y
    1d38:	c7 58       	subi	r28, 0x87	; 135
    1d3a:	d0 40       	sbci	r29, 0x00	; 0
    1d3c:	40 39       	cpi	r20, 0x90	; 144
    1d3e:	19 f4       	brne	.+6      	; 0x1d46 <USB_ProcessHIDReport+0x6a8>
					  NewReportItem.ItemType = HID_REPORT_ITEM_Out;
    1d40:	51 e0       	ldi	r21, 0x01	; 1
    1d42:	5b 8b       	std	Y+19, r21	; 0x13
    1d44:	02 c0       	rjmp	.+4      	; 0x1d4a <USB_ProcessHIDReport+0x6ac>
					else
					  NewReportItem.ItemType = HID_REPORT_ITEM_Feature;
    1d46:	82 e0       	ldi	r24, 0x02	; 2
    1d48:	8b 8b       	std	Y+19, r24	; 0x13

					NewReportItem.BitOffset = CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType];
    1d4a:	eb 89       	ldd	r30, Y+19	; 0x13
    1d4c:	f0 e0       	ldi	r31, 0x00	; 0
    1d4e:	ee 0f       	add	r30, r30
    1d50:	ff 1f       	adc	r31, r31
    1d52:	e4 0d       	add	r30, r4
    1d54:	f5 1d       	adc	r31, r5
    1d56:	81 81       	ldd	r24, Z+1	; 0x01
    1d58:	92 81       	ldd	r25, Z+2	; 0x02
    1d5a:	9a 8b       	std	Y+18, r25	; 0x12
    1d5c:	89 8b       	std	Y+17, r24	; 0x11

					CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType] += CurrStateTable->Attributes.BitSize;
    1d5e:	d6 01       	movw	r26, r12
    1d60:	2c 91       	ld	r18, X
    1d62:	81 81       	ldd	r24, Z+1	; 0x01
    1d64:	92 81       	ldd	r25, Z+2	; 0x02
    1d66:	82 0f       	add	r24, r18
    1d68:	91 1d       	adc	r25, r1
    1d6a:	92 83       	std	Z+2, r25	; 0x02
    1d6c:	81 83       	std	Z+1, r24	; 0x01

					if (ParserData->LargestReportSizeBits < NewReportItem.BitOffset)
    1d6e:	29 89       	ldd	r18, Y+17	; 0x11
    1d70:	3a 89       	ldd	r19, Y+18	; 0x12
    1d72:	c6 57       	subi	r28, 0x76	; 118
    1d74:	df 4f       	sbci	r29, 0xFF	; 255
    1d76:	e8 81       	ld	r30, Y
    1d78:	f9 81       	ldd	r31, Y+1	; 0x01
    1d7a:	ca 58       	subi	r28, 0x8A	; 138
    1d7c:	d0 40       	sbci	r29, 0x00	; 0
    1d7e:	80 81       	ld	r24, Z
    1d80:	91 81       	ldd	r25, Z+1	; 0x01
    1d82:	82 17       	cp	r24, r18
    1d84:	93 07       	cpc	r25, r19
    1d86:	10 f4       	brcc	.+4      	; 0x1d8c <USB_ProcessHIDReport+0x6ee>
					  ParserData->LargestReportSizeBits = NewReportItem.BitOffset;
    1d88:	31 83       	std	Z+1, r19	; 0x01
    1d8a:	20 83       	st	Z, r18

					if (!(ReportItemData & IOF_CONSTANT) && CALLBACK_HIDParser_FilterHIDReportItem(&NewReportItem))
    1d8c:	c8 57       	subi	r28, 0x78	; 120
    1d8e:	df 4f       	sbci	r29, 0xFF	; 255
    1d90:	28 81       	ld	r18, Y
    1d92:	39 81       	ldd	r19, Y+1	; 0x01
    1d94:	c8 58       	subi	r28, 0x88	; 136
    1d96:	d0 40       	sbci	r29, 0x00	; 0
    1d98:	23 2b       	or	r18, r19
    1d9a:	f1 f4       	brne	.+60     	; 0x1dd8 <USB_ProcessHIDReport+0x73a>
    1d9c:	ce 01       	movw	r24, r28
    1d9e:	41 96       	adiw	r24, 0x11	; 17
    1da0:	0e 94 0d 05 	call	0xa1a	; 0xa1a <CALLBACK_HIDParser_FilterHIDReportItem>
    1da4:	88 23       	and	r24, r24
    1da6:	c1 f0       	breq	.+48     	; 0x1dd8 <USB_ProcessHIDReport+0x73a>
					{
						if (ParserData->TotalReportItems == HID_MAX_REPORTITEMS)
    1da8:	d1 01       	movw	r26, r2
    1daa:	8c 91       	ld	r24, X
    1dac:	84 31       	cpi	r24, 0x14	; 20
    1dae:	11 f4       	brne	.+4      	; 0x1db4 <USB_ProcessHIDReport+0x716>
    1db0:	83 e0       	ldi	r24, 0x03	; 3
    1db2:	4a c0       	rjmp	.+148    	; 0x1e48 <USB_ProcessHIDReport+0x7aa>
						  return HID_PARSE_InsufficientReportItems;

						memcpy(&ParserData->ReportItems[ParserData->TotalReportItems],
    1db4:	ba e2       	ldi	r27, 0x2A	; 42
    1db6:	8b 9f       	mul	r24, r27
    1db8:	f0 01       	movw	r30, r0
    1dba:	11 24       	eor	r1, r1
    1dbc:	31 96       	adiw	r30, 0x01	; 1
    1dbe:	e2 0d       	add	r30, r2
    1dc0:	f3 1d       	adc	r31, r3
    1dc2:	de 01       	movw	r26, r28
    1dc4:	51 96       	adiw	r26, 0x11	; 17
    1dc6:	8a e2       	ldi	r24, 0x2A	; 42
    1dc8:	0d 90       	ld	r0, X+
    1dca:	01 92       	st	Z+, r0
    1dcc:	81 50       	subi	r24, 0x01	; 1
    1dce:	e1 f7       	brne	.-8      	; 0x1dc8 <USB_ProcessHIDReport+0x72a>
						       &NewReportItem, sizeof(HID_ReportItem_t));

						ParserData->TotalReportItems++;
    1dd0:	f1 01       	movw	r30, r2
    1dd2:	80 81       	ld	r24, Z
    1dd4:	8f 5f       	subi	r24, 0xFF	; 255
    1dd6:	80 83       	st	Z, r24
				CurrCollectionPath = CurrCollectionPath->Parent;
				break;
			case (TYPE_MAIN | TAG_MAIN_INPUT):
			case (TYPE_MAIN | TAG_MAIN_OUTPUT):
			case (TYPE_MAIN | TAG_MAIN_FEATURE):
				for (uint8_t ReportItemNum = 0; ReportItemNum < CurrStateTable->ReportCount; ReportItemNum++)
    1dd8:	ec 96       	adiw	r28, 0x3c	; 60
    1dda:	ff ad       	ldd	r31, Y+63	; 0x3f
    1ddc:	ec 97       	sbiw	r28, 0x3c	; 60
    1dde:	ff 5f       	subi	r31, 0xFF	; 255
    1de0:	ec 96       	adiw	r28, 0x3c	; 60
    1de2:	ff af       	std	Y+63, r31	; 0x3f
    1de4:	ec 97       	sbiw	r28, 0x3c	; 60
    1de6:	d6 01       	movw	r26, r12
    1de8:	5a 96       	adiw	r26, 0x1a	; 26
    1dea:	8c 91       	ld	r24, X
    1dec:	ec 96       	adiw	r28, 0x3c	; 60
    1dee:	bf ad       	ldd	r27, Y+63	; 0x3f
    1df0:	ec 97       	sbiw	r28, 0x3c	; 60
    1df2:	b8 17       	cp	r27, r24
    1df4:	08 f4       	brcc	.+2      	; 0x1df8 <USB_ProcessHIDReport+0x75a>
    1df6:	44 cf       	rjmp	.-376    	; 0x1c80 <USB_ProcessHIDReport+0x5e2>
    1df8:	f5 01       	movw	r30, r10
				}

				break;
		}

		if ((HIDReportItem & TYPE_MASK) == TYPE_MAIN)
    1dfa:	c1 58       	subi	r28, 0x81	; 129
    1dfc:	df 4f       	sbci	r29, 0xFF	; 255
    1dfe:	28 81       	ld	r18, Y
    1e00:	39 81       	ldd	r19, Y+1	; 0x01
    1e02:	cf 57       	subi	r28, 0x7F	; 127
    1e04:	d0 40       	sbci	r29, 0x00	; 0
    1e06:	2c 70       	andi	r18, 0x0C	; 12
    1e08:	30 70       	andi	r19, 0x00	; 0
    1e0a:	23 2b       	or	r18, r19
    1e0c:	61 f4       	brne	.+24     	; 0x1e26 <USB_ProcessHIDReport+0x788>
    1e0e:	ed 96       	adiw	r28, 0x3d	; 61
    1e10:	1f ae       	std	Y+63, r1	; 0x3f
    1e12:	ed 97       	sbiw	r28, 0x3d	; 61
    1e14:	eb 96       	adiw	r28, 0x3b	; 59
    1e16:	1c ae       	std	Y+60, r1	; 0x3c
    1e18:	1d ae       	std	Y+61, r1	; 0x3d
    1e1a:	1e ae       	std	Y+62, r1	; 0x3e
    1e1c:	1f ae       	std	Y+63, r1	; 0x3f
    1e1e:	eb 97       	sbiw	r28, 0x3b	; 59
    1e20:	66 24       	eor	r6, r6
    1e22:	77 24       	eor	r7, r7
    1e24:	43 01       	movw	r8, r6
    1e26:	5f 01       	movw	r10, r30
	memset(CurrStateTable,   0x00, sizeof(HID_StateTable_t));
	memset(CurrReportIDInfo, 0x00, sizeof(HID_ReportSizeInfo_t));

	ParserData->TotalDeviceReports = 1;

	while (ReportSize)
    1e28:	cd 57       	subi	r28, 0x7D	; 125
    1e2a:	df 4f       	sbci	r29, 0xFF	; 255
    1e2c:	48 81       	ld	r20, Y
    1e2e:	59 81       	ldd	r21, Y+1	; 0x01
    1e30:	c3 58       	subi	r28, 0x83	; 131
    1e32:	d0 40       	sbci	r29, 0x00	; 0
    1e34:	45 2b       	or	r20, r21
    1e36:	09 f0       	breq	.+2      	; 0x1e3a <USB_ProcessHIDReport+0x79c>
    1e38:	ce cc       	rjmp	.-1636   	; 0x17d6 <USB_ProcessHIDReport+0x138>
			UsageMinMax.Maximum = 0;
			UsageListSize       = 0;
		}
	}

	if (!(ParserData->TotalReportItems))
    1e3a:	d1 01       	movw	r26, r2
    1e3c:	8c 91       	ld	r24, X
    1e3e:	88 23       	and	r24, r24
    1e40:	11 f0       	breq	.+4      	; 0x1e46 <USB_ProcessHIDReport+0x7a8>
    1e42:	80 e0       	ldi	r24, 0x00	; 0
    1e44:	01 c0       	rjmp	.+2      	; 0x1e48 <USB_ProcessHIDReport+0x7aa>
    1e46:	88 e0       	ldi	r24, 0x08	; 8
	  return HID_PARSE_NoUnfilteredReportItems;

	return HID_PARSE_Successful;
}
    1e48:	cb 56       	subi	r28, 0x6B	; 107
    1e4a:	df 4f       	sbci	r29, 0xFF	; 255
    1e4c:	0f b6       	in	r0, 0x3f	; 63
    1e4e:	f8 94       	cli
    1e50:	de bf       	out	0x3e, r29	; 62
    1e52:	0f be       	out	0x3f, r0	; 63
    1e54:	cd bf       	out	0x3d, r28	; 61
    1e56:	cf 91       	pop	r28
    1e58:	df 91       	pop	r29
    1e5a:	1f 91       	pop	r17
    1e5c:	0f 91       	pop	r16
    1e5e:	ff 90       	pop	r15
    1e60:	ef 90       	pop	r14
    1e62:	df 90       	pop	r13
    1e64:	cf 90       	pop	r12
    1e66:	bf 90       	pop	r11
    1e68:	af 90       	pop	r10
    1e6a:	9f 90       	pop	r9
    1e6c:	8f 90       	pop	r8
    1e6e:	7f 90       	pop	r7
    1e70:	6f 90       	pop	r6
    1e72:	5f 90       	pop	r5
    1e74:	4f 90       	pop	r4
    1e76:	3f 90       	pop	r3
    1e78:	2f 90       	pop	r2
    1e7a:	08 95       	ret

00001e7c <SerialStream_TxByte>:

FILE USARTStream = FDEV_SETUP_STREAM(SerialStream_TxByte, SerialStream_RxByte, _FDEV_SETUP_RW);

static int SerialStream_TxByte(char DataByte,
                               FILE *Stream)
{
    1e7c:	98 2f       	mov	r25, r24
			 *  \param[in] DataByte  Byte to transmit through the USART.
			 */
			static inline void Serial_TxByte(const char DataByte) ATTR_ALWAYS_INLINE;
			static inline void Serial_TxByte(const char DataByte)
			{
				while (!(UCSR1A & (1 << UDRE1)));
    1e7e:	80 91 c8 00 	lds	r24, 0x00C8
    1e82:	85 ff       	sbrs	r24, 5
    1e84:	fc cf       	rjmp	.-8      	; 0x1e7e <SerialStream_TxByte+0x2>
				UDR1 = DataByte;
    1e86:	90 93 ce 00 	sts	0x00CE, r25
	(void)Stream;

	Serial_TxByte(DataByte);
	return 0;
}
    1e8a:	80 e0       	ldi	r24, 0x00	; 0
    1e8c:	90 e0       	ldi	r25, 0x00	; 0
    1e8e:	08 95       	ret

00001e90 <SerialStream_RxByte>:
			 *  \return Boolean true if a character has been received, false otherwise.
			 */
			static inline bool Serial_IsCharReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Serial_IsCharReceived(void)
			{
				return ((UCSR1A & (1 << RXC1)) ? true : false);
    1e90:	80 91 c8 00 	lds	r24, 0x00C8

static int SerialStream_RxByte(FILE *Stream)
{
	(void)Stream;

	if (!(Serial_IsCharReceived()))
    1e94:	87 fd       	sbrc	r24, 7
    1e96:	03 c0       	rjmp	.+6      	; 0x1e9e <SerialStream_RxByte+0xe>
    1e98:	2e ef       	ldi	r18, 0xFE	; 254
    1e9a:	3f ef       	ldi	r19, 0xFF	; 255
    1e9c:	08 c0       	rjmp	.+16     	; 0x1eae <SerialStream_RxByte+0x1e>
			 *  \return Byte received from the USART.
			 */
			static inline char Serial_RxByte(void) ATTR_ALWAYS_INLINE;
			static inline char Serial_RxByte(void)
			{
				while (!(UCSR1A & (1 << RXC1)));
    1e9e:	80 91 c8 00 	lds	r24, 0x00C8
    1ea2:	87 ff       	sbrs	r24, 7
    1ea4:	fc cf       	rjmp	.-8      	; 0x1e9e <SerialStream_RxByte+0xe>
				return UDR1;
    1ea6:	80 91 ce 00 	lds	r24, 0x00CE
	  return _FDEV_EOF;

	return Serial_RxByte();
    1eaa:	28 2f       	mov	r18, r24
    1eac:	30 e0       	ldi	r19, 0x00	; 0
}
    1eae:	c9 01       	movw	r24, r18
    1eb0:	08 95       	ret

00001eb2 <printf>:
    1eb2:	df 93       	push	r29
    1eb4:	cf 93       	push	r28
    1eb6:	cd b7       	in	r28, 0x3d	; 61
    1eb8:	de b7       	in	r29, 0x3e	; 62
    1eba:	fe 01       	movw	r30, r28
    1ebc:	35 96       	adiw	r30, 0x05	; 5
    1ebe:	61 91       	ld	r22, Z+
    1ec0:	71 91       	ld	r23, Z+
    1ec2:	80 91 26 05 	lds	r24, 0x0526
    1ec6:	90 91 27 05 	lds	r25, 0x0527
    1eca:	af 01       	movw	r20, r30
    1ecc:	5a d0       	rcall	.+180    	; 0x1f82 <vfprintf>
    1ece:	cf 91       	pop	r28
    1ed0:	df 91       	pop	r29
    1ed2:	08 95       	ret

00001ed4 <printf_P>:
    1ed4:	df 93       	push	r29
    1ed6:	cf 93       	push	r28
    1ed8:	cd b7       	in	r28, 0x3d	; 61
    1eda:	de b7       	in	r29, 0x3e	; 62
    1edc:	fe 01       	movw	r30, r28
    1ede:	35 96       	adiw	r30, 0x05	; 5
    1ee0:	61 91       	ld	r22, Z+
    1ee2:	71 91       	ld	r23, Z+
    1ee4:	a0 91 26 05 	lds	r26, 0x0526
    1ee8:	b0 91 27 05 	lds	r27, 0x0527
    1eec:	13 96       	adiw	r26, 0x03	; 3
    1eee:	8c 91       	ld	r24, X
    1ef0:	13 97       	sbiw	r26, 0x03	; 3
    1ef2:	88 60       	ori	r24, 0x08	; 8
    1ef4:	13 96       	adiw	r26, 0x03	; 3
    1ef6:	8c 93       	st	X, r24
    1ef8:	80 91 26 05 	lds	r24, 0x0526
    1efc:	90 91 27 05 	lds	r25, 0x0527
    1f00:	af 01       	movw	r20, r30
    1f02:	3f d0       	rcall	.+126    	; 0x1f82 <vfprintf>
    1f04:	e0 91 26 05 	lds	r30, 0x0526
    1f08:	f0 91 27 05 	lds	r31, 0x0527
    1f0c:	23 81       	ldd	r18, Z+3	; 0x03
    1f0e:	27 7f       	andi	r18, 0xF7	; 247
    1f10:	23 83       	std	Z+3, r18	; 0x03
    1f12:	cf 91       	pop	r28
    1f14:	df 91       	pop	r29
    1f16:	08 95       	ret

00001f18 <puts_P>:
    1f18:	0f 93       	push	r16
    1f1a:	1f 93       	push	r17
    1f1c:	cf 93       	push	r28
    1f1e:	df 93       	push	r29
    1f20:	ec 01       	movw	r28, r24
    1f22:	e0 91 26 05 	lds	r30, 0x0526
    1f26:	f0 91 27 05 	lds	r31, 0x0527
    1f2a:	83 81       	ldd	r24, Z+3	; 0x03
    1f2c:	81 ff       	sbrs	r24, 1
    1f2e:	21 c0       	rjmp	.+66     	; 0x1f72 <puts_P+0x5a>
    1f30:	00 e0       	ldi	r16, 0x00	; 0
    1f32:	10 e0       	ldi	r17, 0x00	; 0
    1f34:	0e c0       	rjmp	.+28     	; 0x1f52 <puts_P+0x3a>
    1f36:	e0 91 26 05 	lds	r30, 0x0526
    1f3a:	f0 91 27 05 	lds	r31, 0x0527
    1f3e:	20 85       	ldd	r18, Z+8	; 0x08
    1f40:	31 85       	ldd	r19, Z+9	; 0x09
    1f42:	bf 01       	movw	r22, r30
    1f44:	f9 01       	movw	r30, r18
    1f46:	09 95       	icall
    1f48:	89 2b       	or	r24, r25
    1f4a:	11 f0       	breq	.+4      	; 0x1f50 <puts_P+0x38>
    1f4c:	0f ef       	ldi	r16, 0xFF	; 255
    1f4e:	1f ef       	ldi	r17, 0xFF	; 255
    1f50:	21 96       	adiw	r28, 0x01	; 1
    1f52:	fe 01       	movw	r30, r28
    1f54:	84 91       	lpm	r24, Z+
    1f56:	88 23       	and	r24, r24
    1f58:	71 f7       	brne	.-36     	; 0x1f36 <puts_P+0x1e>
    1f5a:	e0 91 26 05 	lds	r30, 0x0526
    1f5e:	f0 91 27 05 	lds	r31, 0x0527
    1f62:	20 85       	ldd	r18, Z+8	; 0x08
    1f64:	31 85       	ldd	r19, Z+9	; 0x09
    1f66:	8a e0       	ldi	r24, 0x0A	; 10
    1f68:	bf 01       	movw	r22, r30
    1f6a:	f9 01       	movw	r30, r18
    1f6c:	09 95       	icall
    1f6e:	89 2b       	or	r24, r25
    1f70:	11 f0       	breq	.+4      	; 0x1f76 <puts_P+0x5e>
    1f72:	0f ef       	ldi	r16, 0xFF	; 255
    1f74:	1f ef       	ldi	r17, 0xFF	; 255
    1f76:	c8 01       	movw	r24, r16
    1f78:	df 91       	pop	r29
    1f7a:	cf 91       	pop	r28
    1f7c:	1f 91       	pop	r17
    1f7e:	0f 91       	pop	r16
    1f80:	08 95       	ret

00001f82 <vfprintf>:
    1f82:	2f 92       	push	r2
    1f84:	3f 92       	push	r3
    1f86:	4f 92       	push	r4
    1f88:	5f 92       	push	r5
    1f8a:	6f 92       	push	r6
    1f8c:	7f 92       	push	r7
    1f8e:	8f 92       	push	r8
    1f90:	9f 92       	push	r9
    1f92:	af 92       	push	r10
    1f94:	bf 92       	push	r11
    1f96:	cf 92       	push	r12
    1f98:	df 92       	push	r13
    1f9a:	ef 92       	push	r14
    1f9c:	ff 92       	push	r15
    1f9e:	0f 93       	push	r16
    1fa0:	1f 93       	push	r17
    1fa2:	df 93       	push	r29
    1fa4:	cf 93       	push	r28
    1fa6:	cd b7       	in	r28, 0x3d	; 61
    1fa8:	de b7       	in	r29, 0x3e	; 62
    1faa:	2b 97       	sbiw	r28, 0x0b	; 11
    1fac:	0f b6       	in	r0, 0x3f	; 63
    1fae:	f8 94       	cli
    1fb0:	de bf       	out	0x3e, r29	; 62
    1fb2:	0f be       	out	0x3f, r0	; 63
    1fb4:	cd bf       	out	0x3d, r28	; 61
    1fb6:	3c 01       	movw	r6, r24
    1fb8:	2b 01       	movw	r4, r22
    1fba:	5a 01       	movw	r10, r20
    1fbc:	fc 01       	movw	r30, r24
    1fbe:	17 82       	std	Z+7, r1	; 0x07
    1fc0:	16 82       	std	Z+6, r1	; 0x06
    1fc2:	83 81       	ldd	r24, Z+3	; 0x03
    1fc4:	81 fd       	sbrc	r24, 1
    1fc6:	03 c0       	rjmp	.+6      	; 0x1fce <vfprintf+0x4c>
    1fc8:	6f ef       	ldi	r22, 0xFF	; 255
    1fca:	7f ef       	ldi	r23, 0xFF	; 255
    1fcc:	b9 c1       	rjmp	.+882    	; 0x2340 <__stack+0x241>
    1fce:	9a e0       	ldi	r25, 0x0A	; 10
    1fd0:	89 2e       	mov	r8, r25
    1fd2:	1e 01       	movw	r2, r28
    1fd4:	08 94       	sec
    1fd6:	21 1c       	adc	r2, r1
    1fd8:	31 1c       	adc	r3, r1
    1fda:	f3 01       	movw	r30, r6
    1fdc:	23 81       	ldd	r18, Z+3	; 0x03
    1fde:	f2 01       	movw	r30, r4
    1fe0:	23 fd       	sbrc	r18, 3
    1fe2:	85 91       	lpm	r24, Z+
    1fe4:	23 ff       	sbrs	r18, 3
    1fe6:	81 91       	ld	r24, Z+
    1fe8:	2f 01       	movw	r4, r30
    1fea:	88 23       	and	r24, r24
    1fec:	09 f4       	brne	.+2      	; 0x1ff0 <vfprintf+0x6e>
    1fee:	a5 c1       	rjmp	.+842    	; 0x233a <__stack+0x23b>
    1ff0:	85 32       	cpi	r24, 0x25	; 37
    1ff2:	39 f4       	brne	.+14     	; 0x2002 <vfprintf+0x80>
    1ff4:	23 fd       	sbrc	r18, 3
    1ff6:	85 91       	lpm	r24, Z+
    1ff8:	23 ff       	sbrs	r18, 3
    1ffa:	81 91       	ld	r24, Z+
    1ffc:	2f 01       	movw	r4, r30
    1ffe:	85 32       	cpi	r24, 0x25	; 37
    2000:	21 f4       	brne	.+8      	; 0x200a <vfprintf+0x88>
    2002:	90 e0       	ldi	r25, 0x00	; 0
    2004:	b3 01       	movw	r22, r6
    2006:	cc d1       	rcall	.+920    	; 0x23a0 <fputc>
    2008:	e8 cf       	rjmp	.-48     	; 0x1fda <vfprintf+0x58>
    200a:	98 2f       	mov	r25, r24
    200c:	ff 24       	eor	r15, r15
    200e:	ee 24       	eor	r14, r14
    2010:	99 24       	eor	r9, r9
    2012:	ff e1       	ldi	r31, 0x1F	; 31
    2014:	ff 15       	cp	r31, r15
    2016:	d0 f0       	brcs	.+52     	; 0x204c <vfprintf+0xca>
    2018:	9b 32       	cpi	r25, 0x2B	; 43
    201a:	69 f0       	breq	.+26     	; 0x2036 <vfprintf+0xb4>
    201c:	9c 32       	cpi	r25, 0x2C	; 44
    201e:	28 f4       	brcc	.+10     	; 0x202a <vfprintf+0xa8>
    2020:	90 32       	cpi	r25, 0x20	; 32
    2022:	59 f0       	breq	.+22     	; 0x203a <vfprintf+0xb8>
    2024:	93 32       	cpi	r25, 0x23	; 35
    2026:	91 f4       	brne	.+36     	; 0x204c <vfprintf+0xca>
    2028:	0e c0       	rjmp	.+28     	; 0x2046 <vfprintf+0xc4>
    202a:	9d 32       	cpi	r25, 0x2D	; 45
    202c:	49 f0       	breq	.+18     	; 0x2040 <vfprintf+0xbe>
    202e:	90 33       	cpi	r25, 0x30	; 48
    2030:	69 f4       	brne	.+26     	; 0x204c <vfprintf+0xca>
    2032:	41 e0       	ldi	r20, 0x01	; 1
    2034:	24 c0       	rjmp	.+72     	; 0x207e <vfprintf+0xfc>
    2036:	52 e0       	ldi	r21, 0x02	; 2
    2038:	f5 2a       	or	r15, r21
    203a:	84 e0       	ldi	r24, 0x04	; 4
    203c:	f8 2a       	or	r15, r24
    203e:	28 c0       	rjmp	.+80     	; 0x2090 <vfprintf+0x10e>
    2040:	98 e0       	ldi	r25, 0x08	; 8
    2042:	f9 2a       	or	r15, r25
    2044:	25 c0       	rjmp	.+74     	; 0x2090 <vfprintf+0x10e>
    2046:	e0 e1       	ldi	r30, 0x10	; 16
    2048:	fe 2a       	or	r15, r30
    204a:	22 c0       	rjmp	.+68     	; 0x2090 <vfprintf+0x10e>
    204c:	f7 fc       	sbrc	r15, 7
    204e:	29 c0       	rjmp	.+82     	; 0x20a2 <vfprintf+0x120>
    2050:	89 2f       	mov	r24, r25
    2052:	80 53       	subi	r24, 0x30	; 48
    2054:	8a 30       	cpi	r24, 0x0A	; 10
    2056:	70 f4       	brcc	.+28     	; 0x2074 <vfprintf+0xf2>
    2058:	f6 fe       	sbrs	r15, 6
    205a:	05 c0       	rjmp	.+10     	; 0x2066 <vfprintf+0xe4>
    205c:	98 9c       	mul	r9, r8
    205e:	90 2c       	mov	r9, r0
    2060:	11 24       	eor	r1, r1
    2062:	98 0e       	add	r9, r24
    2064:	15 c0       	rjmp	.+42     	; 0x2090 <vfprintf+0x10e>
    2066:	e8 9c       	mul	r14, r8
    2068:	e0 2c       	mov	r14, r0
    206a:	11 24       	eor	r1, r1
    206c:	e8 0e       	add	r14, r24
    206e:	f0 e2       	ldi	r31, 0x20	; 32
    2070:	ff 2a       	or	r15, r31
    2072:	0e c0       	rjmp	.+28     	; 0x2090 <vfprintf+0x10e>
    2074:	9e 32       	cpi	r25, 0x2E	; 46
    2076:	29 f4       	brne	.+10     	; 0x2082 <vfprintf+0x100>
    2078:	f6 fc       	sbrc	r15, 6
    207a:	5f c1       	rjmp	.+702    	; 0x233a <__stack+0x23b>
    207c:	40 e4       	ldi	r20, 0x40	; 64
    207e:	f4 2a       	or	r15, r20
    2080:	07 c0       	rjmp	.+14     	; 0x2090 <vfprintf+0x10e>
    2082:	9c 36       	cpi	r25, 0x6C	; 108
    2084:	19 f4       	brne	.+6      	; 0x208c <vfprintf+0x10a>
    2086:	50 e8       	ldi	r21, 0x80	; 128
    2088:	f5 2a       	or	r15, r21
    208a:	02 c0       	rjmp	.+4      	; 0x2090 <vfprintf+0x10e>
    208c:	98 36       	cpi	r25, 0x68	; 104
    208e:	49 f4       	brne	.+18     	; 0x20a2 <vfprintf+0x120>
    2090:	f2 01       	movw	r30, r4
    2092:	23 fd       	sbrc	r18, 3
    2094:	95 91       	lpm	r25, Z+
    2096:	23 ff       	sbrs	r18, 3
    2098:	91 91       	ld	r25, Z+
    209a:	2f 01       	movw	r4, r30
    209c:	99 23       	and	r25, r25
    209e:	09 f0       	breq	.+2      	; 0x20a2 <vfprintf+0x120>
    20a0:	b8 cf       	rjmp	.-144    	; 0x2012 <vfprintf+0x90>
    20a2:	89 2f       	mov	r24, r25
    20a4:	85 54       	subi	r24, 0x45	; 69
    20a6:	83 30       	cpi	r24, 0x03	; 3
    20a8:	18 f0       	brcs	.+6      	; 0x20b0 <vfprintf+0x12e>
    20aa:	80 52       	subi	r24, 0x20	; 32
    20ac:	83 30       	cpi	r24, 0x03	; 3
    20ae:	38 f4       	brcc	.+14     	; 0x20be <vfprintf+0x13c>
    20b0:	44 e0       	ldi	r20, 0x04	; 4
    20b2:	50 e0       	ldi	r21, 0x00	; 0
    20b4:	a4 0e       	add	r10, r20
    20b6:	b5 1e       	adc	r11, r21
    20b8:	5f e3       	ldi	r21, 0x3F	; 63
    20ba:	59 83       	std	Y+1, r21	; 0x01
    20bc:	0f c0       	rjmp	.+30     	; 0x20dc <vfprintf+0x15a>
    20be:	93 36       	cpi	r25, 0x63	; 99
    20c0:	31 f0       	breq	.+12     	; 0x20ce <vfprintf+0x14c>
    20c2:	93 37       	cpi	r25, 0x73	; 115
    20c4:	79 f0       	breq	.+30     	; 0x20e4 <vfprintf+0x162>
    20c6:	93 35       	cpi	r25, 0x53	; 83
    20c8:	09 f0       	breq	.+2      	; 0x20cc <vfprintf+0x14a>
    20ca:	52 c0       	rjmp	.+164    	; 0x2170 <__stack+0x71>
    20cc:	1f c0       	rjmp	.+62     	; 0x210c <__stack+0xd>
    20ce:	f5 01       	movw	r30, r10
    20d0:	80 81       	ld	r24, Z
    20d2:	89 83       	std	Y+1, r24	; 0x01
    20d4:	42 e0       	ldi	r20, 0x02	; 2
    20d6:	50 e0       	ldi	r21, 0x00	; 0
    20d8:	a4 0e       	add	r10, r20
    20da:	b5 1e       	adc	r11, r21
    20dc:	61 01       	movw	r12, r2
    20de:	01 e0       	ldi	r16, 0x01	; 1
    20e0:	10 e0       	ldi	r17, 0x00	; 0
    20e2:	11 c0       	rjmp	.+34     	; 0x2106 <__stack+0x7>
    20e4:	f5 01       	movw	r30, r10
    20e6:	c0 80       	ld	r12, Z
    20e8:	d1 80       	ldd	r13, Z+1	; 0x01
    20ea:	f6 fc       	sbrc	r15, 6
    20ec:	03 c0       	rjmp	.+6      	; 0x20f4 <vfprintf+0x172>
    20ee:	6f ef       	ldi	r22, 0xFF	; 255
    20f0:	7f ef       	ldi	r23, 0xFF	; 255
    20f2:	02 c0       	rjmp	.+4      	; 0x20f8 <vfprintf+0x176>
    20f4:	69 2d       	mov	r22, r9
    20f6:	70 e0       	ldi	r23, 0x00	; 0
    20f8:	42 e0       	ldi	r20, 0x02	; 2
    20fa:	50 e0       	ldi	r21, 0x00	; 0
    20fc:	a4 0e       	add	r10, r20
    20fe:	b5 1e       	adc	r11, r21
    2100:	c6 01       	movw	r24, r12
    2102:	43 d1       	rcall	.+646    	; 0x238a <strnlen>
    2104:	8c 01       	movw	r16, r24
    2106:	5f e7       	ldi	r21, 0x7F	; 127
    2108:	f5 22       	and	r15, r21
    210a:	13 c0       	rjmp	.+38     	; 0x2132 <__stack+0x33>
    210c:	f5 01       	movw	r30, r10
    210e:	c0 80       	ld	r12, Z
    2110:	d1 80       	ldd	r13, Z+1	; 0x01
    2112:	f6 fc       	sbrc	r15, 6
    2114:	03 c0       	rjmp	.+6      	; 0x211c <__stack+0x1d>
    2116:	6f ef       	ldi	r22, 0xFF	; 255
    2118:	7f ef       	ldi	r23, 0xFF	; 255
    211a:	02 c0       	rjmp	.+4      	; 0x2120 <__stack+0x21>
    211c:	69 2d       	mov	r22, r9
    211e:	70 e0       	ldi	r23, 0x00	; 0
    2120:	42 e0       	ldi	r20, 0x02	; 2
    2122:	50 e0       	ldi	r21, 0x00	; 0
    2124:	a4 0e       	add	r10, r20
    2126:	b5 1e       	adc	r11, r21
    2128:	c6 01       	movw	r24, r12
    212a:	24 d1       	rcall	.+584    	; 0x2374 <strnlen_P>
    212c:	8c 01       	movw	r16, r24
    212e:	50 e8       	ldi	r21, 0x80	; 128
    2130:	f5 2a       	or	r15, r21
    2132:	f3 fe       	sbrs	r15, 3
    2134:	06 c0       	rjmp	.+12     	; 0x2142 <__stack+0x43>
    2136:	18 c0       	rjmp	.+48     	; 0x2168 <__stack+0x69>
    2138:	80 e2       	ldi	r24, 0x20	; 32
    213a:	90 e0       	ldi	r25, 0x00	; 0
    213c:	b3 01       	movw	r22, r6
    213e:	30 d1       	rcall	.+608    	; 0x23a0 <fputc>
    2140:	ea 94       	dec	r14
    2142:	8e 2d       	mov	r24, r14
    2144:	90 e0       	ldi	r25, 0x00	; 0
    2146:	08 17       	cp	r16, r24
    2148:	19 07       	cpc	r17, r25
    214a:	b0 f3       	brcs	.-20     	; 0x2138 <__stack+0x39>
    214c:	0d c0       	rjmp	.+26     	; 0x2168 <__stack+0x69>
    214e:	f6 01       	movw	r30, r12
    2150:	f7 fc       	sbrc	r15, 7
    2152:	85 91       	lpm	r24, Z+
    2154:	f7 fe       	sbrs	r15, 7
    2156:	81 91       	ld	r24, Z+
    2158:	6f 01       	movw	r12, r30
    215a:	90 e0       	ldi	r25, 0x00	; 0
    215c:	b3 01       	movw	r22, r6
    215e:	20 d1       	rcall	.+576    	; 0x23a0 <fputc>
    2160:	e1 10       	cpse	r14, r1
    2162:	ea 94       	dec	r14
    2164:	01 50       	subi	r16, 0x01	; 1
    2166:	10 40       	sbci	r17, 0x00	; 0
    2168:	01 15       	cp	r16, r1
    216a:	11 05       	cpc	r17, r1
    216c:	81 f7       	brne	.-32     	; 0x214e <__stack+0x4f>
    216e:	e2 c0       	rjmp	.+452    	; 0x2334 <__stack+0x235>
    2170:	94 36       	cpi	r25, 0x64	; 100
    2172:	11 f0       	breq	.+4      	; 0x2178 <__stack+0x79>
    2174:	99 36       	cpi	r25, 0x69	; 105
    2176:	61 f5       	brne	.+88     	; 0x21d0 <__stack+0xd1>
    2178:	f7 fe       	sbrs	r15, 7
    217a:	08 c0       	rjmp	.+16     	; 0x218c <__stack+0x8d>
    217c:	f5 01       	movw	r30, r10
    217e:	20 81       	ld	r18, Z
    2180:	31 81       	ldd	r19, Z+1	; 0x01
    2182:	42 81       	ldd	r20, Z+2	; 0x02
    2184:	53 81       	ldd	r21, Z+3	; 0x03
    2186:	84 e0       	ldi	r24, 0x04	; 4
    2188:	90 e0       	ldi	r25, 0x00	; 0
    218a:	0a c0       	rjmp	.+20     	; 0x21a0 <__stack+0xa1>
    218c:	f5 01       	movw	r30, r10
    218e:	80 81       	ld	r24, Z
    2190:	91 81       	ldd	r25, Z+1	; 0x01
    2192:	9c 01       	movw	r18, r24
    2194:	44 27       	eor	r20, r20
    2196:	37 fd       	sbrc	r19, 7
    2198:	40 95       	com	r20
    219a:	54 2f       	mov	r21, r20
    219c:	82 e0       	ldi	r24, 0x02	; 2
    219e:	90 e0       	ldi	r25, 0x00	; 0
    21a0:	a8 0e       	add	r10, r24
    21a2:	b9 1e       	adc	r11, r25
    21a4:	9f e6       	ldi	r25, 0x6F	; 111
    21a6:	f9 22       	and	r15, r25
    21a8:	57 ff       	sbrs	r21, 7
    21aa:	09 c0       	rjmp	.+18     	; 0x21be <__stack+0xbf>
    21ac:	50 95       	com	r21
    21ae:	40 95       	com	r20
    21b0:	30 95       	com	r19
    21b2:	21 95       	neg	r18
    21b4:	3f 4f       	sbci	r19, 0xFF	; 255
    21b6:	4f 4f       	sbci	r20, 0xFF	; 255
    21b8:	5f 4f       	sbci	r21, 0xFF	; 255
    21ba:	e0 e8       	ldi	r30, 0x80	; 128
    21bc:	fe 2a       	or	r15, r30
    21be:	ca 01       	movw	r24, r20
    21c0:	b9 01       	movw	r22, r18
    21c2:	a1 01       	movw	r20, r2
    21c4:	2a e0       	ldi	r18, 0x0A	; 10
    21c6:	30 e0       	ldi	r19, 0x00	; 0
    21c8:	17 d1       	rcall	.+558    	; 0x23f8 <__ultoa_invert>
    21ca:	d8 2e       	mov	r13, r24
    21cc:	d2 18       	sub	r13, r2
    21ce:	3f c0       	rjmp	.+126    	; 0x224e <__stack+0x14f>
    21d0:	95 37       	cpi	r25, 0x75	; 117
    21d2:	29 f4       	brne	.+10     	; 0x21de <__stack+0xdf>
    21d4:	1f 2d       	mov	r17, r15
    21d6:	1f 7e       	andi	r17, 0xEF	; 239
    21d8:	2a e0       	ldi	r18, 0x0A	; 10
    21da:	30 e0       	ldi	r19, 0x00	; 0
    21dc:	1d c0       	rjmp	.+58     	; 0x2218 <__stack+0x119>
    21de:	1f 2d       	mov	r17, r15
    21e0:	19 7f       	andi	r17, 0xF9	; 249
    21e2:	9f 36       	cpi	r25, 0x6F	; 111
    21e4:	61 f0       	breq	.+24     	; 0x21fe <__stack+0xff>
    21e6:	90 37       	cpi	r25, 0x70	; 112
    21e8:	20 f4       	brcc	.+8      	; 0x21f2 <__stack+0xf3>
    21ea:	98 35       	cpi	r25, 0x58	; 88
    21ec:	09 f0       	breq	.+2      	; 0x21f0 <__stack+0xf1>
    21ee:	a5 c0       	rjmp	.+330    	; 0x233a <__stack+0x23b>
    21f0:	0f c0       	rjmp	.+30     	; 0x2210 <__stack+0x111>
    21f2:	90 37       	cpi	r25, 0x70	; 112
    21f4:	39 f0       	breq	.+14     	; 0x2204 <__stack+0x105>
    21f6:	98 37       	cpi	r25, 0x78	; 120
    21f8:	09 f0       	breq	.+2      	; 0x21fc <__stack+0xfd>
    21fa:	9f c0       	rjmp	.+318    	; 0x233a <__stack+0x23b>
    21fc:	04 c0       	rjmp	.+8      	; 0x2206 <__stack+0x107>
    21fe:	28 e0       	ldi	r18, 0x08	; 8
    2200:	30 e0       	ldi	r19, 0x00	; 0
    2202:	0a c0       	rjmp	.+20     	; 0x2218 <__stack+0x119>
    2204:	10 61       	ori	r17, 0x10	; 16
    2206:	14 fd       	sbrc	r17, 4
    2208:	14 60       	ori	r17, 0x04	; 4
    220a:	20 e1       	ldi	r18, 0x10	; 16
    220c:	30 e0       	ldi	r19, 0x00	; 0
    220e:	04 c0       	rjmp	.+8      	; 0x2218 <__stack+0x119>
    2210:	14 fd       	sbrc	r17, 4
    2212:	16 60       	ori	r17, 0x06	; 6
    2214:	20 e1       	ldi	r18, 0x10	; 16
    2216:	32 e0       	ldi	r19, 0x02	; 2
    2218:	17 ff       	sbrs	r17, 7
    221a:	08 c0       	rjmp	.+16     	; 0x222c <__stack+0x12d>
    221c:	f5 01       	movw	r30, r10
    221e:	60 81       	ld	r22, Z
    2220:	71 81       	ldd	r23, Z+1	; 0x01
    2222:	82 81       	ldd	r24, Z+2	; 0x02
    2224:	93 81       	ldd	r25, Z+3	; 0x03
    2226:	44 e0       	ldi	r20, 0x04	; 4
    2228:	50 e0       	ldi	r21, 0x00	; 0
    222a:	08 c0       	rjmp	.+16     	; 0x223c <__stack+0x13d>
    222c:	f5 01       	movw	r30, r10
    222e:	80 81       	ld	r24, Z
    2230:	91 81       	ldd	r25, Z+1	; 0x01
    2232:	bc 01       	movw	r22, r24
    2234:	80 e0       	ldi	r24, 0x00	; 0
    2236:	90 e0       	ldi	r25, 0x00	; 0
    2238:	42 e0       	ldi	r20, 0x02	; 2
    223a:	50 e0       	ldi	r21, 0x00	; 0
    223c:	a4 0e       	add	r10, r20
    223e:	b5 1e       	adc	r11, r21
    2240:	a1 01       	movw	r20, r2
    2242:	da d0       	rcall	.+436    	; 0x23f8 <__ultoa_invert>
    2244:	d8 2e       	mov	r13, r24
    2246:	d2 18       	sub	r13, r2
    2248:	8f e7       	ldi	r24, 0x7F	; 127
    224a:	f8 2e       	mov	r15, r24
    224c:	f1 22       	and	r15, r17
    224e:	f6 fe       	sbrs	r15, 6
    2250:	0b c0       	rjmp	.+22     	; 0x2268 <__stack+0x169>
    2252:	5e ef       	ldi	r21, 0xFE	; 254
    2254:	f5 22       	and	r15, r21
    2256:	d9 14       	cp	r13, r9
    2258:	38 f4       	brcc	.+14     	; 0x2268 <__stack+0x169>
    225a:	f4 fe       	sbrs	r15, 4
    225c:	07 c0       	rjmp	.+14     	; 0x226c <__stack+0x16d>
    225e:	f2 fc       	sbrc	r15, 2
    2260:	05 c0       	rjmp	.+10     	; 0x226c <__stack+0x16d>
    2262:	8f ee       	ldi	r24, 0xEF	; 239
    2264:	f8 22       	and	r15, r24
    2266:	02 c0       	rjmp	.+4      	; 0x226c <__stack+0x16d>
    2268:	1d 2d       	mov	r17, r13
    226a:	01 c0       	rjmp	.+2      	; 0x226e <__stack+0x16f>
    226c:	19 2d       	mov	r17, r9
    226e:	f4 fe       	sbrs	r15, 4
    2270:	0d c0       	rjmp	.+26     	; 0x228c <__stack+0x18d>
    2272:	fe 01       	movw	r30, r28
    2274:	ed 0d       	add	r30, r13
    2276:	f1 1d       	adc	r31, r1
    2278:	80 81       	ld	r24, Z
    227a:	80 33       	cpi	r24, 0x30	; 48
    227c:	19 f4       	brne	.+6      	; 0x2284 <__stack+0x185>
    227e:	99 ee       	ldi	r25, 0xE9	; 233
    2280:	f9 22       	and	r15, r25
    2282:	08 c0       	rjmp	.+16     	; 0x2294 <__stack+0x195>
    2284:	1f 5f       	subi	r17, 0xFF	; 255
    2286:	f2 fe       	sbrs	r15, 2
    2288:	05 c0       	rjmp	.+10     	; 0x2294 <__stack+0x195>
    228a:	03 c0       	rjmp	.+6      	; 0x2292 <__stack+0x193>
    228c:	8f 2d       	mov	r24, r15
    228e:	86 78       	andi	r24, 0x86	; 134
    2290:	09 f0       	breq	.+2      	; 0x2294 <__stack+0x195>
    2292:	1f 5f       	subi	r17, 0xFF	; 255
    2294:	0f 2d       	mov	r16, r15
    2296:	f3 fc       	sbrc	r15, 3
    2298:	13 c0       	rjmp	.+38     	; 0x22c0 <__stack+0x1c1>
    229a:	f0 fe       	sbrs	r15, 0
    229c:	0e c0       	rjmp	.+28     	; 0x22ba <__stack+0x1bb>
    229e:	1e 15       	cp	r17, r14
    22a0:	10 f0       	brcs	.+4      	; 0x22a6 <__stack+0x1a7>
    22a2:	9d 2c       	mov	r9, r13
    22a4:	0a c0       	rjmp	.+20     	; 0x22ba <__stack+0x1bb>
    22a6:	9d 2c       	mov	r9, r13
    22a8:	9e 0c       	add	r9, r14
    22aa:	91 1a       	sub	r9, r17
    22ac:	1e 2d       	mov	r17, r14
    22ae:	05 c0       	rjmp	.+10     	; 0x22ba <__stack+0x1bb>
    22b0:	80 e2       	ldi	r24, 0x20	; 32
    22b2:	90 e0       	ldi	r25, 0x00	; 0
    22b4:	b3 01       	movw	r22, r6
    22b6:	74 d0       	rcall	.+232    	; 0x23a0 <fputc>
    22b8:	1f 5f       	subi	r17, 0xFF	; 255
    22ba:	1e 15       	cp	r17, r14
    22bc:	c8 f3       	brcs	.-14     	; 0x22b0 <__stack+0x1b1>
    22be:	04 c0       	rjmp	.+8      	; 0x22c8 <__stack+0x1c9>
    22c0:	1e 15       	cp	r17, r14
    22c2:	10 f4       	brcc	.+4      	; 0x22c8 <__stack+0x1c9>
    22c4:	e1 1a       	sub	r14, r17
    22c6:	01 c0       	rjmp	.+2      	; 0x22ca <__stack+0x1cb>
    22c8:	ee 24       	eor	r14, r14
    22ca:	04 ff       	sbrs	r16, 4
    22cc:	0e c0       	rjmp	.+28     	; 0x22ea <__stack+0x1eb>
    22ce:	80 e3       	ldi	r24, 0x30	; 48
    22d0:	90 e0       	ldi	r25, 0x00	; 0
    22d2:	b3 01       	movw	r22, r6
    22d4:	65 d0       	rcall	.+202    	; 0x23a0 <fputc>
    22d6:	02 ff       	sbrs	r16, 2
    22d8:	1b c0       	rjmp	.+54     	; 0x2310 <__stack+0x211>
    22da:	01 fd       	sbrc	r16, 1
    22dc:	03 c0       	rjmp	.+6      	; 0x22e4 <__stack+0x1e5>
    22de:	88 e7       	ldi	r24, 0x78	; 120
    22e0:	90 e0       	ldi	r25, 0x00	; 0
    22e2:	0e c0       	rjmp	.+28     	; 0x2300 <__stack+0x201>
    22e4:	88 e5       	ldi	r24, 0x58	; 88
    22e6:	90 e0       	ldi	r25, 0x00	; 0
    22e8:	0b c0       	rjmp	.+22     	; 0x2300 <__stack+0x201>
    22ea:	80 2f       	mov	r24, r16
    22ec:	86 78       	andi	r24, 0x86	; 134
    22ee:	81 f0       	breq	.+32     	; 0x2310 <__stack+0x211>
    22f0:	01 ff       	sbrs	r16, 1
    22f2:	02 c0       	rjmp	.+4      	; 0x22f8 <__stack+0x1f9>
    22f4:	8b e2       	ldi	r24, 0x2B	; 43
    22f6:	01 c0       	rjmp	.+2      	; 0x22fa <__stack+0x1fb>
    22f8:	80 e2       	ldi	r24, 0x20	; 32
    22fa:	f7 fc       	sbrc	r15, 7
    22fc:	8d e2       	ldi	r24, 0x2D	; 45
    22fe:	90 e0       	ldi	r25, 0x00	; 0
    2300:	b3 01       	movw	r22, r6
    2302:	4e d0       	rcall	.+156    	; 0x23a0 <fputc>
    2304:	05 c0       	rjmp	.+10     	; 0x2310 <__stack+0x211>
    2306:	80 e3       	ldi	r24, 0x30	; 48
    2308:	90 e0       	ldi	r25, 0x00	; 0
    230a:	b3 01       	movw	r22, r6
    230c:	49 d0       	rcall	.+146    	; 0x23a0 <fputc>
    230e:	9a 94       	dec	r9
    2310:	d9 14       	cp	r13, r9
    2312:	c8 f3       	brcs	.-14     	; 0x2306 <__stack+0x207>
    2314:	da 94       	dec	r13
    2316:	f1 01       	movw	r30, r2
    2318:	ed 0d       	add	r30, r13
    231a:	f1 1d       	adc	r31, r1
    231c:	80 81       	ld	r24, Z
    231e:	90 e0       	ldi	r25, 0x00	; 0
    2320:	b3 01       	movw	r22, r6
    2322:	3e d0       	rcall	.+124    	; 0x23a0 <fputc>
    2324:	dd 20       	and	r13, r13
    2326:	b1 f7       	brne	.-20     	; 0x2314 <__stack+0x215>
    2328:	05 c0       	rjmp	.+10     	; 0x2334 <__stack+0x235>
    232a:	80 e2       	ldi	r24, 0x20	; 32
    232c:	90 e0       	ldi	r25, 0x00	; 0
    232e:	b3 01       	movw	r22, r6
    2330:	37 d0       	rcall	.+110    	; 0x23a0 <fputc>
    2332:	ea 94       	dec	r14
    2334:	ee 20       	and	r14, r14
    2336:	c9 f7       	brne	.-14     	; 0x232a <__stack+0x22b>
    2338:	50 ce       	rjmp	.-864    	; 0x1fda <vfprintf+0x58>
    233a:	f3 01       	movw	r30, r6
    233c:	66 81       	ldd	r22, Z+6	; 0x06
    233e:	77 81       	ldd	r23, Z+7	; 0x07
    2340:	cb 01       	movw	r24, r22
    2342:	2b 96       	adiw	r28, 0x0b	; 11
    2344:	0f b6       	in	r0, 0x3f	; 63
    2346:	f8 94       	cli
    2348:	de bf       	out	0x3e, r29	; 62
    234a:	0f be       	out	0x3f, r0	; 63
    234c:	cd bf       	out	0x3d, r28	; 61
    234e:	cf 91       	pop	r28
    2350:	df 91       	pop	r29
    2352:	1f 91       	pop	r17
    2354:	0f 91       	pop	r16
    2356:	ff 90       	pop	r15
    2358:	ef 90       	pop	r14
    235a:	df 90       	pop	r13
    235c:	cf 90       	pop	r12
    235e:	bf 90       	pop	r11
    2360:	af 90       	pop	r10
    2362:	9f 90       	pop	r9
    2364:	8f 90       	pop	r8
    2366:	7f 90       	pop	r7
    2368:	6f 90       	pop	r6
    236a:	5f 90       	pop	r5
    236c:	4f 90       	pop	r4
    236e:	3f 90       	pop	r3
    2370:	2f 90       	pop	r2
    2372:	08 95       	ret

00002374 <strnlen_P>:
    2374:	fc 01       	movw	r30, r24
    2376:	05 90       	lpm	r0, Z+
    2378:	61 50       	subi	r22, 0x01	; 1
    237a:	70 40       	sbci	r23, 0x00	; 0
    237c:	01 10       	cpse	r0, r1
    237e:	d8 f7       	brcc	.-10     	; 0x2376 <strnlen_P+0x2>
    2380:	80 95       	com	r24
    2382:	90 95       	com	r25
    2384:	8e 0f       	add	r24, r30
    2386:	9f 1f       	adc	r25, r31
    2388:	08 95       	ret

0000238a <strnlen>:
    238a:	fc 01       	movw	r30, r24
    238c:	61 50       	subi	r22, 0x01	; 1
    238e:	70 40       	sbci	r23, 0x00	; 0
    2390:	01 90       	ld	r0, Z+
    2392:	01 10       	cpse	r0, r1
    2394:	d8 f7       	brcc	.-10     	; 0x238c <strnlen+0x2>
    2396:	80 95       	com	r24
    2398:	90 95       	com	r25
    239a:	8e 0f       	add	r24, r30
    239c:	9f 1f       	adc	r25, r31
    239e:	08 95       	ret

000023a0 <fputc>:
    23a0:	0f 93       	push	r16
    23a2:	1f 93       	push	r17
    23a4:	cf 93       	push	r28
    23a6:	df 93       	push	r29
    23a8:	8c 01       	movw	r16, r24
    23aa:	eb 01       	movw	r28, r22
    23ac:	8b 81       	ldd	r24, Y+3	; 0x03
    23ae:	81 ff       	sbrs	r24, 1
    23b0:	1b c0       	rjmp	.+54     	; 0x23e8 <fputc+0x48>
    23b2:	82 ff       	sbrs	r24, 2
    23b4:	0d c0       	rjmp	.+26     	; 0x23d0 <fputc+0x30>
    23b6:	2e 81       	ldd	r18, Y+6	; 0x06
    23b8:	3f 81       	ldd	r19, Y+7	; 0x07
    23ba:	8c 81       	ldd	r24, Y+4	; 0x04
    23bc:	9d 81       	ldd	r25, Y+5	; 0x05
    23be:	28 17       	cp	r18, r24
    23c0:	39 07       	cpc	r19, r25
    23c2:	64 f4       	brge	.+24     	; 0x23dc <fputc+0x3c>
    23c4:	e8 81       	ld	r30, Y
    23c6:	f9 81       	ldd	r31, Y+1	; 0x01
    23c8:	01 93       	st	Z+, r16
    23ca:	f9 83       	std	Y+1, r31	; 0x01
    23cc:	e8 83       	st	Y, r30
    23ce:	06 c0       	rjmp	.+12     	; 0x23dc <fputc+0x3c>
    23d0:	e8 85       	ldd	r30, Y+8	; 0x08
    23d2:	f9 85       	ldd	r31, Y+9	; 0x09
    23d4:	80 2f       	mov	r24, r16
    23d6:	09 95       	icall
    23d8:	89 2b       	or	r24, r25
    23da:	31 f4       	brne	.+12     	; 0x23e8 <fputc+0x48>
    23dc:	8e 81       	ldd	r24, Y+6	; 0x06
    23de:	9f 81       	ldd	r25, Y+7	; 0x07
    23e0:	01 96       	adiw	r24, 0x01	; 1
    23e2:	9f 83       	std	Y+7, r25	; 0x07
    23e4:	8e 83       	std	Y+6, r24	; 0x06
    23e6:	02 c0       	rjmp	.+4      	; 0x23ec <fputc+0x4c>
    23e8:	0f ef       	ldi	r16, 0xFF	; 255
    23ea:	1f ef       	ldi	r17, 0xFF	; 255
    23ec:	c8 01       	movw	r24, r16
    23ee:	df 91       	pop	r29
    23f0:	cf 91       	pop	r28
    23f2:	1f 91       	pop	r17
    23f4:	0f 91       	pop	r16
    23f6:	08 95       	ret

000023f8 <__ultoa_invert>:
    23f8:	fa 01       	movw	r30, r20
    23fa:	aa 27       	eor	r26, r26
    23fc:	28 30       	cpi	r18, 0x08	; 8
    23fe:	51 f1       	breq	.+84     	; 0x2454 <__ultoa_invert+0x5c>
    2400:	20 31       	cpi	r18, 0x10	; 16
    2402:	81 f1       	breq	.+96     	; 0x2464 <__ultoa_invert+0x6c>
    2404:	e8 94       	clt
    2406:	6f 93       	push	r22
    2408:	6e 7f       	andi	r22, 0xFE	; 254
    240a:	6e 5f       	subi	r22, 0xFE	; 254
    240c:	7f 4f       	sbci	r23, 0xFF	; 255
    240e:	8f 4f       	sbci	r24, 0xFF	; 255
    2410:	9f 4f       	sbci	r25, 0xFF	; 255
    2412:	af 4f       	sbci	r26, 0xFF	; 255
    2414:	b1 e0       	ldi	r27, 0x01	; 1
    2416:	3e d0       	rcall	.+124    	; 0x2494 <__ultoa_invert+0x9c>
    2418:	b4 e0       	ldi	r27, 0x04	; 4
    241a:	3c d0       	rcall	.+120    	; 0x2494 <__ultoa_invert+0x9c>
    241c:	67 0f       	add	r22, r23
    241e:	78 1f       	adc	r23, r24
    2420:	89 1f       	adc	r24, r25
    2422:	9a 1f       	adc	r25, r26
    2424:	a1 1d       	adc	r26, r1
    2426:	68 0f       	add	r22, r24
    2428:	79 1f       	adc	r23, r25
    242a:	8a 1f       	adc	r24, r26
    242c:	91 1d       	adc	r25, r1
    242e:	a1 1d       	adc	r26, r1
    2430:	6a 0f       	add	r22, r26
    2432:	71 1d       	adc	r23, r1
    2434:	81 1d       	adc	r24, r1
    2436:	91 1d       	adc	r25, r1
    2438:	a1 1d       	adc	r26, r1
    243a:	20 d0       	rcall	.+64     	; 0x247c <__ultoa_invert+0x84>
    243c:	09 f4       	brne	.+2      	; 0x2440 <__ultoa_invert+0x48>
    243e:	68 94       	set
    2440:	3f 91       	pop	r19
    2442:	2a e0       	ldi	r18, 0x0A	; 10
    2444:	26 9f       	mul	r18, r22
    2446:	11 24       	eor	r1, r1
    2448:	30 19       	sub	r19, r0
    244a:	30 5d       	subi	r19, 0xD0	; 208
    244c:	31 93       	st	Z+, r19
    244e:	de f6       	brtc	.-74     	; 0x2406 <__ultoa_invert+0xe>
    2450:	cf 01       	movw	r24, r30
    2452:	08 95       	ret
    2454:	46 2f       	mov	r20, r22
    2456:	47 70       	andi	r20, 0x07	; 7
    2458:	40 5d       	subi	r20, 0xD0	; 208
    245a:	41 93       	st	Z+, r20
    245c:	b3 e0       	ldi	r27, 0x03	; 3
    245e:	0f d0       	rcall	.+30     	; 0x247e <__ultoa_invert+0x86>
    2460:	c9 f7       	brne	.-14     	; 0x2454 <__ultoa_invert+0x5c>
    2462:	f6 cf       	rjmp	.-20     	; 0x2450 <__ultoa_invert+0x58>
    2464:	46 2f       	mov	r20, r22
    2466:	4f 70       	andi	r20, 0x0F	; 15
    2468:	40 5d       	subi	r20, 0xD0	; 208
    246a:	4a 33       	cpi	r20, 0x3A	; 58
    246c:	18 f0       	brcs	.+6      	; 0x2474 <__ultoa_invert+0x7c>
    246e:	49 5d       	subi	r20, 0xD9	; 217
    2470:	31 fd       	sbrc	r19, 1
    2472:	40 52       	subi	r20, 0x20	; 32
    2474:	41 93       	st	Z+, r20
    2476:	02 d0       	rcall	.+4      	; 0x247c <__ultoa_invert+0x84>
    2478:	a9 f7       	brne	.-22     	; 0x2464 <__ultoa_invert+0x6c>
    247a:	ea cf       	rjmp	.-44     	; 0x2450 <__ultoa_invert+0x58>
    247c:	b4 e0       	ldi	r27, 0x04	; 4
    247e:	a6 95       	lsr	r26
    2480:	97 95       	ror	r25
    2482:	87 95       	ror	r24
    2484:	77 95       	ror	r23
    2486:	67 95       	ror	r22
    2488:	ba 95       	dec	r27
    248a:	c9 f7       	brne	.-14     	; 0x247e <__ultoa_invert+0x86>
    248c:	00 97       	sbiw	r24, 0x00	; 0
    248e:	61 05       	cpc	r22, r1
    2490:	71 05       	cpc	r23, r1
    2492:	08 95       	ret
    2494:	9b 01       	movw	r18, r22
    2496:	ac 01       	movw	r20, r24
    2498:	0a 2e       	mov	r0, r26
    249a:	06 94       	lsr	r0
    249c:	57 95       	ror	r21
    249e:	47 95       	ror	r20
    24a0:	37 95       	ror	r19
    24a2:	27 95       	ror	r18
    24a4:	ba 95       	dec	r27
    24a6:	c9 f7       	brne	.-14     	; 0x249a <__ultoa_invert+0xa2>
    24a8:	62 0f       	add	r22, r18
    24aa:	73 1f       	adc	r23, r19
    24ac:	84 1f       	adc	r24, r20
    24ae:	95 1f       	adc	r25, r21
    24b0:	a0 1d       	adc	r26, r0
    24b2:	08 95       	ret

000024b4 <_exit>:
    24b4:	f8 94       	cli

000024b6 <__stop_program>:
    24b6:	ff cf       	rjmp	.-2      	; 0x24b6 <__stop_program>
