
StillImageHost.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000028  00800100  00001dfe  00001e92  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001dfe  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000005b  00800128  00800128  00001eba  2**0
                  ALLOC
  3 .stab         00000eac  00000000  00000000  00001ebc  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000025c  00000000  00000000  00002d68  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000003e8  00000000  00000000  00002fc4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000008a1  00000000  00000000  000033ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00005315  00000000  00000000  00003c4d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001cf4  00000000  00000000  00008f62  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000043aa  00000000  00000000  0000ac56  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000570  00000000  00000000  0000f000  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00002504  00000000  00000000  0000f570  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000022d6  00000000  00000000  00011a74  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000480  00000000  00000000  00013d4a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:

	/* Freeze the pipe after use */
	Pipe_Freeze();

	return IsEventReceived;
}
       0:	9f c1       	rjmp	.+830    	; 0x340 <__ctors_end>
}

uint8_t USB_Host_GetDeviceStringDescriptor(const uint8_t Index,
                                           void* const Buffer,
                                           const uint8_t BufferLength)
{
       2:	00 00       	nop
		Pipe_DisablePipe();
	}
}

bool Pipe_IsEndpointBound(const uint8_t EndpointAddress)
{
       4:	bb c1       	rjmp	.+886    	; 0x37c <__bad_interrupt>
{
	USB_GetNextDescriptorOfType(BytesRem, CurrConfigLoc, AfterType);

	if (*BytesRem)
	  USB_GetNextDescriptorOfType(BytesRem, CurrConfigLoc, Type);
}
       6:	00 00       	nop
			Length--;
		}
	}

	return PIPE_RWSTREAM_NoError;
}
       8:	b9 c1       	rjmp	.+882    	; 0x37c <__bad_interrupt>
       a:	00 00       	nop
       c:	b7 c1       	rjmp	.+878    	; 0x37c <__bad_interrupt>
       e:	00 00       	nop
      10:	b5 c1       	rjmp	.+874    	; 0x37c <__bad_interrupt>
      12:	00 00       	nop
      14:	b3 c1       	rjmp	.+870    	; 0x37c <__bad_interrupt>
      16:	00 00       	nop
      18:	b1 c1       	rjmp	.+866    	; 0x37c <__bad_interrupt>
      1a:	00 00       	nop
      1c:	af c1       	rjmp	.+862    	; 0x37c <__bad_interrupt>
      1e:	00 00       	nop
      20:	ad c1       	rjmp	.+858    	; 0x37c <__bad_interrupt>
      22:	00 00       	nop
      24:	ab c1       	rjmp	.+854    	; 0x37c <__bad_interrupt>
      26:	00 00       	nop
      28:	0c 94 20 09 	jmp	0x1240	; 0x1240 <__vector_10>
      2c:	a7 c1       	rjmp	.+846    	; 0x37c <__bad_interrupt>
      2e:	00 00       	nop
      30:	a5 c1       	rjmp	.+842    	; 0x37c <__bad_interrupt>
      32:	00 00       	nop
      34:	a3 c1       	rjmp	.+838    	; 0x37c <__bad_interrupt>
      36:	00 00       	nop
      38:	a1 c1       	rjmp	.+834    	; 0x37c <__bad_interrupt>
      3a:	00 00       	nop
      3c:	9f c1       	rjmp	.+830    	; 0x37c <__bad_interrupt>
      3e:	00 00       	nop
      40:	9d c1       	rjmp	.+826    	; 0x37c <__bad_interrupt>
      42:	00 00       	nop
      44:	9b c1       	rjmp	.+822    	; 0x37c <__bad_interrupt>
      46:	00 00       	nop
      48:	99 c1       	rjmp	.+818    	; 0x37c <__bad_interrupt>
      4a:	00 00       	nop
      4c:	97 c1       	rjmp	.+814    	; 0x37c <__bad_interrupt>
      4e:	00 00       	nop
      50:	95 c1       	rjmp	.+810    	; 0x37c <__bad_interrupt>
      52:	00 00       	nop
      54:	93 c1       	rjmp	.+806    	; 0x37c <__bad_interrupt>
      56:	00 00       	nop
      58:	91 c1       	rjmp	.+802    	; 0x37c <__bad_interrupt>
      5a:	00 00       	nop
      5c:	8f c1       	rjmp	.+798    	; 0x37c <__bad_interrupt>
      5e:	00 00       	nop
      60:	8d c1       	rjmp	.+794    	; 0x37c <__bad_interrupt>
      62:	00 00       	nop
      64:	8b c1       	rjmp	.+790    	; 0x37c <__bad_interrupt>
      66:	00 00       	nop
      68:	89 c1       	rjmp	.+786    	; 0x37c <__bad_interrupt>
      6a:	00 00       	nop
      6c:	87 c1       	rjmp	.+782    	; 0x37c <__bad_interrupt>
      6e:	00 00       	nop
      70:	85 c1       	rjmp	.+778    	; 0x37c <__bad_interrupt>
      72:	00 00       	nop
      74:	83 c1       	rjmp	.+774    	; 0x37c <__bad_interrupt>
      76:	00 00       	nop
      78:	81 c1       	rjmp	.+770    	; 0x37c <__bad_interrupt>
      7a:	00 00       	nop
      7c:	7f c1       	rjmp	.+766    	; 0x37c <__bad_interrupt>
      7e:	00 00       	nop
      80:	7d c1       	rjmp	.+762    	; 0x37c <__bad_interrupt>
      82:	00 00       	nop
      84:	7b c1       	rjmp	.+758    	; 0x37c <__bad_interrupt>
      86:	00 00       	nop
      88:	79 c1       	rjmp	.+754    	; 0x37c <__bad_interrupt>
      8a:	00 00       	nop
      8c:	77 c1       	rjmp	.+750    	; 0x37c <__bad_interrupt>
      8e:	00 00       	nop
      90:	75 c1       	rjmp	.+746    	; 0x37c <__bad_interrupt>
      92:	00 00       	nop
      94:	73 c1       	rjmp	.+742    	; 0x37c <__bad_interrupt>
      96:	00 00       	nop

00000098 <__c.4288>:
      98:	1b 5b 33 31 6d 43 6f 6d 6d 61 6e 64 20 45 72 72     .[31mCommand Err
      a8:	6f 72 20 28 25 53 29 2e 0d 0a 20 2d 2d 20 45 72     or (%S)... -- Er
      b8:	72 6f 72 20 43 6f 64 65 20 25 64 0d 0a 1b 5b 33     ror Code %d...[3
      c8:	37 6d 00                                            7m.

000000cb <__c.4286>:
      cb:	54 72 61 6e 73 61 63 74 69 6f 6e 20 46 61 69 6c     Transaction Fail
      db:	00                                                  .

000000dc <__c.4284>:
      dc:	52 65 73 70 6f 6e 73 65 20 43 6f 64 65 20 21 3d     Response Code !=
      ec:	20 4f 4b 00                                          OK.

000000f0 <__c.4194>:
      f0:	44 6f 6e 65 2e 0d 0a 00                             Done....

000000f8 <__c.4191>:
      f8:	43 6c 6f 73 69 6e 67 20 53 65 73 73 69 6f 6e 2e     Closing Session.
     108:	2e 2e 0d 0a 00                                      .....

0000010d <__c.4188>:
     10d:	4f 70 65 6e 69 6e 67 20 53 65 73 73 69 6f 6e 2e     Opening Session.
     11d:	2e 2e 0d 0a 00                                      .....

00000122 <__c.4186>:
     122:	20 20 20 44 65 76 69 63 65 20 56 65 72 73 69 6f        Device Versio
     132:	6e 3a 20 25 73 0d 0a 00                             n: %s...

0000013a <__c.4183>:
     13a:	20 20 20 4d 6f 64 65 6c 3a 20 25 73 0d 0a 00           Model: %s...

00000149 <__c.4180>:
     149:	20 20 20 4d 61 6e 75 66 61 63 74 75 72 65 72 3a        Manufacturer:
     159:	20 25 73 0d 0a 00                                    %s...

0000015f <__c.4173>:
     15f:	52 65 74 72 69 65 76 69 6e 67 20 44 65 76 69 63     Retrieving Devic
     16f:	65 20 49 6e 66 6f 2e 2e 2e 0d 0a 00                 e Info......

0000017b <__c.4170>:
     17b:	53 74 69 6c 6c 20 49 6d 61 67 65 20 44 65 76 69     Still Image Devi
     18b:	63 65 20 45 6e 75 6d 65 72 61 74 65 64 2e 0d 0a     ce Enumerated...
     19b:	00                                                  .

0000019c <__c.4168>:
     19c:	1b 5b 33 31 6d 43 6f 6e 74 72 6f 6c 20 45 72 72     .[31mControl Err
     1ac:	6f 72 20 28 53 65 74 20 43 6f 6e 66 69 67 75 72     or (Set Configur
     1bc:	61 74 69 6f 6e 29 2e 0d 0a 20 2d 2d 20 45 72 72     ation)... -- Err
     1cc:	6f 72 20 43 6f 64 65 3a 20 25 64 0d 0a 1b 5b 33     or Code: %d...[3
     1dc:	37 6d 00                                            7m.

000001df <__c.4165>:
     1df:	20 2d 2d 20 45 72 72 6f 72 20 43 6f 64 65 3a 20      -- Error Code: 
     1ef:	25 64 0d 0a 1b 5b 33 37 6d 00                       %d...[37m.

000001f9 <__c.4163>:
     1f9:	1b 5b 33 31 6d 49 6e 76 61 6c 69 64 20 44 65 76     .[31mInvalid Dev
     209:	69 63 65 2e 0d 0a 00                                ice....

00000210 <__c.4161>:
     210:	1b 5b 33 31 6d 43 6f 6e 74 72 6f 6c 20 45 72 72     .[31mControl Err
     220:	6f 72 20 28 47 65 74 20 43 6f 6e 66 69 67 75 72     or (Get Configur
     230:	61 74 69 6f 6e 29 2e 0d 0a 00                       ation)....

0000023a <__c.4159>:
     23a:	47 65 74 74 69 6e 67 20 43 6f 6e 66 69 67 20 44     Getting Config D
     24a:	61 74 61 2e 0d 0a 00                                ata....

00000251 <__c.4148>:
     251:	1b 5b 33 31 6d 44 65 76 20 45 6e 75 6d 20 45 72     .[31mDev Enum Er
     261:	72 6f 72 0d 0a 20 2d 2d 20 45 72 72 6f 72 20 43     ror.. -- Error C
     271:	6f 64 65 20 25 64 0d 0a 20 2d 2d 20 53 75 62 20     ode %d.. -- Sub 
     281:	45 72 72 6f 72 20 43 6f 64 65 20 25 64 0d 0a 20     Error Code %d.. 
     291:	2d 2d 20 49 6e 20 53 74 61 74 65 20 25 64 0d 0a     -- In State %d..
     2a1:	1b 5b 33 37 6d 00                                   .[37m.

000002a7 <__c.4140>:
     2a7:	1b 5b 33 31 6d 48 6f 73 74 20 4d 6f 64 65 20 45     .[31mHost Mode E
     2b7:	72 72 6f 72 0d 0a 20 2d 2d 20 45 72 72 6f 72 20     rror.. -- Error 
     2c7:	43 6f 64 65 20 25 64 0d 0a 1b 5b 33 37 6d 00        Code %d...[37m.

000002d6 <__c.4132>:
     2d6:	1b 5b 33 32 6d 0d 0a 44 65 76 69 63 65 20 55 6e     .[32m..Device Un
     2e6:	61 74 74 61 63 68 65 64 2e 0d 0a 1b 5b 33 37 6d     attached....[37m
     2f6:	00                                                  .

000002f7 <__c.4127>:
     2f7:	1b 5b 33 32 6d 44 65 76 69 63 65 20 41 74 74 61     .[32mDevice Atta
     307:	63 68 65 64 2e 0d 0a 1b 5b 33 37 6d 00              ched....[37m.

00000314 <__c.4113>:
     314:	1b 5b 33 36 6d 53 74 69 6c 6c 20 49 6d 61 67 65     .[36mStill Image
     324:	20 48 6f 73 74 20 44 65 6d 6f 20 72 75 6e 6e 69      Host Demo runni
     334:	6e 67 2e 0d 0a 1b 5b 33 37 6d 00 00                 ng....[37m..

00000340 <__ctors_end>:
     340:	11 24       	eor	r1, r1
     342:	1f be       	out	0x3f, r1	; 63
     344:	cf ef       	ldi	r28, 0xFF	; 255
     346:	d0 e2       	ldi	r29, 0x20	; 32
     348:	de bf       	out	0x3e, r29	; 62
     34a:	cd bf       	out	0x3d, r28	; 61

0000034c <__do_copy_data>:
     34c:	11 e0       	ldi	r17, 0x01	; 1
     34e:	a0 e0       	ldi	r26, 0x00	; 0
     350:	b1 e0       	ldi	r27, 0x01	; 1
     352:	ee ef       	ldi	r30, 0xFE	; 254
     354:	fd e1       	ldi	r31, 0x1D	; 29
     356:	00 e0       	ldi	r16, 0x00	; 0
     358:	0b bf       	out	0x3b, r16	; 59
     35a:	02 c0       	rjmp	.+4      	; 0x360 <__do_copy_data+0x14>
     35c:	07 90       	elpm	r0, Z+
     35e:	0d 92       	st	X+, r0
     360:	a8 32       	cpi	r26, 0x28	; 40
     362:	b1 07       	cpc	r27, r17
     364:	d9 f7       	brne	.-10     	; 0x35c <__do_copy_data+0x10>

00000366 <__do_clear_bss>:
     366:	11 e0       	ldi	r17, 0x01	; 1
     368:	a8 e2       	ldi	r26, 0x28	; 40
     36a:	b1 e0       	ldi	r27, 0x01	; 1
     36c:	01 c0       	rjmp	.+2      	; 0x370 <.do_clear_bss_start>

0000036e <.do_clear_bss_loop>:
     36e:	1d 92       	st	X+, r1

00000370 <.do_clear_bss_start>:
     370:	a3 38       	cpi	r26, 0x83	; 131
     372:	b1 07       	cpc	r27, r17
     374:	e1 f7       	brne	.-8      	; 0x36e <.do_clear_bss_loop>
     376:	07 d3       	rcall	.+1550   	; 0x986 <main>
     378:	0c 94 fd 0e 	jmp	0x1dfa	; 0x1dfa <_exit>

0000037c <__bad_interrupt>:
     37c:	41 ce       	rjmp	.-894    	; 0x0 <__vectors>

0000037e <EVENT_USB_Host_DeviceEnumerationComplete>:
				PORTD &= ~LEDMask;
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
			{
				PORTD = ((PORTD & ~LEDS_ALL_LEDS) | LEDMask);
     37e:	8b b1       	in	r24, 0x0b	; 11
     380:	8f 70       	andi	r24, 0x0F	; 15
     382:	80 66       	ori	r24, 0x60	; 96
     384:	8b b9       	out	0x0b, r24	; 11
 *  enumerated by the host and is now ready to be used by the application.
 */
void EVENT_USB_Host_DeviceEnumerationComplete(void)
{
	LEDs_SetAllLEDs(LEDMASK_USB_READY);
}
     386:	08 95       	ret

00000388 <UnicodeToASCII>:
 *  \param[in] UnicodeString  Pointer to a Unicode encoded input string
 *  \param[out] Buffer        Pointer to a buffer where the converted ASCII string should be stored
 */
void UnicodeToASCII(uint8_t* UnicodeString,
                    char* Buffer)
{
     388:	cf 93       	push	r28
     38a:	df 93       	push	r29
     38c:	fc 01       	movw	r30, r24
     38e:	db 01       	movw	r26, r22
	/* Get the number of characters in the string, skip to the start of the string data */
	uint8_t CharactersRemaining = *(UnicodeString++);
     390:	20 81       	ld	r18, Z
     392:	eb 01       	movw	r28, r22
     394:	92 2f       	mov	r25, r18
     396:	04 c0       	rjmp	.+8      	; 0x3a0 <UnicodeToASCII+0x18>

	/* Loop through the entire unicode string */
	while (CharactersRemaining--)
	{
		/* Load in the next unicode character (only the lower byte, as only Unicode coded ASCII is supported) */
		*(Buffer++) = *UnicodeString;
     398:	81 81       	ldd	r24, Z+1	; 0x01
     39a:	89 93       	st	Y+, r24
     39c:	91 50       	subi	r25, 0x01	; 1
     39e:	32 96       	adiw	r30, 0x02	; 2
{
	/* Get the number of characters in the string, skip to the start of the string data */
	uint8_t CharactersRemaining = *(UnicodeString++);

	/* Loop through the entire unicode string */
	while (CharactersRemaining--)
     3a0:	99 23       	and	r25, r25
     3a2:	d1 f7       	brne	.-12     	; 0x398 <UnicodeToASCII+0x10>
		/* Jump to the next unicode character */
		UnicodeString += 2;
	}

	/* Null terminate the string */
	*Buffer = 0;
     3a4:	a2 0f       	add	r26, r18
     3a6:	b1 1d       	adc	r27, r1
     3a8:	1c 92       	st	X, r1
}
     3aa:	df 91       	pop	r29
     3ac:	cf 91       	pop	r28
     3ae:	08 95       	ret

000003b0 <ShowCommandError>:
 *  \param[in] ErrorCode          Error code of the function which failed to complete successfully
 *  \param[in] ResponseCodeError  Indicates if the error is due to a command failed indication from the device, or a communication failure
 */
void ShowCommandError(uint8_t ErrorCode,
                      bool ResponseCodeError)
{
     3b0:	48 2f       	mov	r20, r24
	char* FailureType = ((ResponseCodeError) ? PSTR("Response Code != OK") : PSTR("Transaction Fail"));
     3b2:	66 23       	and	r22, r22
     3b4:	19 f4       	brne	.+6      	; 0x3bc <ShowCommandError+0xc>
     3b6:	2b ec       	ldi	r18, 0xCB	; 203
     3b8:	30 e0       	ldi	r19, 0x00	; 0
     3ba:	02 c0       	rjmp	.+4      	; 0x3c0 <ShowCommandError+0x10>
     3bc:	2c ed       	ldi	r18, 0xDC	; 220
     3be:	30 e0       	ldi	r19, 0x00	; 0

	printf_P(PSTR(ESC_FG_RED "Command Error (%S).\r\n"
     3c0:	00 d0       	rcall	.+0      	; 0x3c2 <ShowCommandError+0x12>
     3c2:	00 d0       	rcall	.+0      	; 0x3c4 <ShowCommandError+0x14>
     3c4:	00 d0       	rcall	.+0      	; 0x3c6 <ShowCommandError+0x16>
     3c6:	ed b7       	in	r30, 0x3d	; 61
     3c8:	fe b7       	in	r31, 0x3e	; 62
     3ca:	31 96       	adiw	r30, 0x01	; 1
     3cc:	88 e9       	ldi	r24, 0x98	; 152
     3ce:	90 e0       	ldi	r25, 0x00	; 0
     3d0:	ad b7       	in	r26, 0x3d	; 61
     3d2:	be b7       	in	r27, 0x3e	; 62
     3d4:	12 96       	adiw	r26, 0x02	; 2
     3d6:	9c 93       	st	X, r25
     3d8:	8e 93       	st	-X, r24
     3da:	11 97       	sbiw	r26, 0x01	; 1
     3dc:	33 83       	std	Z+3, r19	; 0x03
     3de:	22 83       	std	Z+2, r18	; 0x02
     3e0:	44 83       	std	Z+4, r20	; 0x04
     3e2:	15 82       	std	Z+5, r1	; 0x05
     3e4:	0e 94 0d 0c 	call	0x181a	; 0x181a <printf_P>
     3e8:	8b b1       	in	r24, 0x0b	; 11
     3ea:	8f 70       	andi	r24, 0x0F	; 15
     3ec:	80 69       	ori	r24, 0x90	; 144
     3ee:	8b b9       	out	0x0b, r24	; 11
     3f0:	8d b7       	in	r24, 0x3d	; 61
     3f2:	9e b7       	in	r25, 0x3e	; 62
     3f4:	06 96       	adiw	r24, 0x06	; 6
     3f6:	0f b6       	in	r0, 0x3f	; 63
     3f8:	f8 94       	cli
     3fa:	9e bf       	out	0x3e, r25	; 62
     3fc:	0f be       	out	0x3f, r0	; 63
     3fe:	8d bf       	out	0x3d, r24	; 61
	                         " -- Error Code %d\r\n" ESC_FG_WHITE), FailureType, ErrorCode);

	/* Indicate error via status LEDs */
	LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
}
     400:	08 95       	ret

00000402 <EVENT_USB_Host_DeviceEnumerationFailed>:
 *  enumerating an attached USB device.
 */
void EVENT_USB_Host_DeviceEnumerationFailed(const uint8_t ErrorCode,
                                            const uint8_t SubErrorCode)
{
	printf_P(PSTR(ESC_FG_RED "Dev Enum Error\r\n"
     402:	90 91 7c 01 	lds	r25, 0x017C
     406:	2d b7       	in	r18, 0x3d	; 61
     408:	3e b7       	in	r19, 0x3e	; 62
     40a:	28 50       	subi	r18, 0x08	; 8
     40c:	30 40       	sbci	r19, 0x00	; 0
     40e:	0f b6       	in	r0, 0x3f	; 63
     410:	f8 94       	cli
     412:	3e bf       	out	0x3e, r19	; 62
     414:	0f be       	out	0x3f, r0	; 63
     416:	2d bf       	out	0x3d, r18	; 61
     418:	ed b7       	in	r30, 0x3d	; 61
     41a:	fe b7       	in	r31, 0x3e	; 62
     41c:	31 96       	adiw	r30, 0x01	; 1
     41e:	21 e5       	ldi	r18, 0x51	; 81
     420:	32 e0       	ldi	r19, 0x02	; 2
     422:	ad b7       	in	r26, 0x3d	; 61
     424:	be b7       	in	r27, 0x3e	; 62
     426:	12 96       	adiw	r26, 0x02	; 2
     428:	3c 93       	st	X, r19
     42a:	2e 93       	st	-X, r18
     42c:	11 97       	sbiw	r26, 0x01	; 1
     42e:	82 83       	std	Z+2, r24	; 0x02
     430:	13 82       	std	Z+3, r1	; 0x03
     432:	64 83       	std	Z+4, r22	; 0x04
     434:	15 82       	std	Z+5, r1	; 0x05
     436:	96 83       	std	Z+6, r25	; 0x06
     438:	17 82       	std	Z+7, r1	; 0x07
     43a:	0e 94 0d 0c 	call	0x181a	; 0x181a <printf_P>
     43e:	8b b1       	in	r24, 0x0b	; 11
     440:	8f 70       	andi	r24, 0x0F	; 15
     442:	80 69       	ori	r24, 0x90	; 144
     444:	8b b9       	out	0x0b, r24	; 11
     446:	2d b7       	in	r18, 0x3d	; 61
     448:	3e b7       	in	r19, 0x3e	; 62
     44a:	28 5f       	subi	r18, 0xF8	; 248
     44c:	3f 4f       	sbci	r19, 0xFF	; 255
     44e:	0f b6       	in	r0, 0x3f	; 63
     450:	f8 94       	cli
     452:	3e bf       	out	0x3e, r19	; 62
     454:	0f be       	out	0x3f, r0	; 63
     456:	2d bf       	out	0x3d, r18	; 61
	                         " -- Error Code %d\r\n"
	                         " -- Sub Error Code %d\r\n"
	                         " -- In State %d\r\n" ESC_FG_WHITE), ErrorCode, SubErrorCode, USB_HostState);

	LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
}
     458:	08 95       	ret

0000045a <EVENT_USB_Host_DeviceUnattached>:
/** Event handler for the USB_DeviceUnattached event. This indicates that a device has been removed from the host, and
 *  stops the library USB task management process.
 */
void EVENT_USB_Host_DeviceUnattached(void)
{
	puts_P(PSTR(ESC_FG_GREEN "\r\nDevice Unattached.\r\n" ESC_FG_WHITE));
     45a:	86 ed       	ldi	r24, 0xD6	; 214
     45c:	92 e0       	ldi	r25, 0x02	; 2
     45e:	0e 94 2f 0c 	call	0x185e	; 0x185e <puts_P>
     462:	8b b1       	in	r24, 0x0b	; 11
     464:	8f 70       	andi	r24, 0x0F	; 15
     466:	80 61       	ori	r24, 0x10	; 16
     468:	8b b9       	out	0x0b, r24	; 11
	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
}
     46a:	08 95       	ret

0000046c <EVENT_USB_Host_DeviceAttached>:
/** Event handler for the USB_DeviceAttached event. This indicates that a device has been attached to the host, and
 *  starts the library USB task to begin the enumeration and USB management process.
 */
void EVENT_USB_Host_DeviceAttached(void)
{
	puts_P(PSTR(ESC_FG_GREEN "Device Attached.\r\n" ESC_FG_WHITE));
     46c:	87 ef       	ldi	r24, 0xF7	; 247
     46e:	92 e0       	ldi	r25, 0x02	; 2
     470:	0e 94 2f 0c 	call	0x185e	; 0x185e <puts_P>
     474:	8b b1       	in	r24, 0x0b	; 11
     476:	8f 70       	andi	r24, 0x0F	; 15
     478:	80 6a       	ori	r24, 0xA0	; 160
     47a:	8b b9       	out	0x0b, r24	; 11
	LEDs_SetAllLEDs(LEDMASK_USB_ENUMERATING);
}
     47c:	08 95       	ret

0000047e <StillImage_Task>:

/** Task to set the configuration of the attached device after it has been enumerated, and to print device information
 *  through the serial port.
 */
void StillImage_Task(void)
{
     47e:	2f 92       	push	r2
     480:	3f 92       	push	r3
     482:	4f 92       	push	r4
     484:	5f 92       	push	r5
     486:	6f 92       	push	r6
     488:	7f 92       	push	r7
     48a:	8f 92       	push	r8
     48c:	9f 92       	push	r9
     48e:	af 92       	push	r10
     490:	bf 92       	push	r11
     492:	cf 92       	push	r12
     494:	df 92       	push	r13
     496:	ef 92       	push	r14
     498:	ff 92       	push	r15
     49a:	0f 93       	push	r16
     49c:	1f 93       	push	r17
     49e:	df 93       	push	r29
     4a0:	cf 93       	push	r28
     4a2:	00 d0       	rcall	.+0      	; 0x4a4 <StillImage_Task+0x26>
     4a4:	0f 92       	push	r0
     4a6:	cd b7       	in	r28, 0x3d	; 61
     4a8:	de b7       	in	r29, 0x3e	; 62
			LEDs_SetAllLEDs(LEDMASK_USB_READY);

			USB_HostState = HOST_STATE_WaitForDeviceRemoval;
			break;
	}
}
     4aa:	2d b7       	in	r18, 0x3d	; 61
     4ac:	3e b7       	in	r19, 0x3e	; 62
     4ae:	3a 83       	std	Y+2, r19	; 0x02
     4b0:	29 83       	std	Y+1, r18	; 0x01
 */
void StillImage_Task(void)
{
	uint8_t ErrorCode;

	switch (USB_HostState)
     4b2:	80 91 7c 01 	lds	r24, 0x017C
     4b6:	8b 30       	cpi	r24, 0x0B	; 11
     4b8:	21 f0       	breq	.+8      	; 0x4c2 <StillImage_Task+0x44>
     4ba:	8c 30       	cpi	r24, 0x0C	; 12
     4bc:	09 f0       	breq	.+2      	; 0x4c0 <StillImage_Task+0x42>
     4be:	fa c1       	rjmp	.+1012   	; 0x8b4 <StillImage_Task+0x436>
     4c0:	49 c0       	rjmp	.+146    	; 0x554 <StillImage_Task+0xd6>
	{
		case HOST_STATE_Addressed:
			puts_P(PSTR("Getting Config Data.\r\n"));
     4c2:	8a e3       	ldi	r24, 0x3A	; 58
     4c4:	92 e0       	ldi	r25, 0x02	; 2
     4c6:	0e 94 2f 0c 	call	0x185e	; 0x185e <puts_P>

			/* Get and process the configuration descriptor data */
			if ((ErrorCode = ProcessConfigurationDescriptor()) != SuccessfulConfigRead)
     4ca:	8d d2       	rcall	.+1306   	; 0x9e6 <ProcessConfigurationDescriptor>
     4cc:	08 2f       	mov	r16, r24
     4ce:	88 23       	and	r24, r24
     4d0:	c1 f0       	breq	.+48     	; 0x502 <StillImage_Task+0x84>
			{
				if (ErrorCode == ControlError)
     4d2:	81 30       	cpi	r24, 0x01	; 1
     4d4:	19 f4       	brne	.+6      	; 0x4dc <StillImage_Task+0x5e>
				  puts_P(PSTR(ESC_FG_RED "Control Error (Get Configuration).\r\n"));
     4d6:	80 e1       	ldi	r24, 0x10	; 16
     4d8:	92 e0       	ldi	r25, 0x02	; 2
     4da:	02 c0       	rjmp	.+4      	; 0x4e0 <StillImage_Task+0x62>
				else
				  puts_P(PSTR(ESC_FG_RED "Invalid Device.\r\n"));
     4dc:	89 ef       	ldi	r24, 0xF9	; 249
     4de:	91 e0       	ldi	r25, 0x01	; 1
     4e0:	0e 94 2f 0c 	call	0x185e	; 0x185e <puts_P>

				printf_P(PSTR(" -- Error Code: %d\r\n" ESC_FG_WHITE), ErrorCode);
     4e4:	00 d0       	rcall	.+0      	; 0x4e6 <StillImage_Task+0x68>
     4e6:	00 d0       	rcall	.+0      	; 0x4e8 <StillImage_Task+0x6a>
     4e8:	ed b7       	in	r30, 0x3d	; 61
     4ea:	fe b7       	in	r31, 0x3e	; 62
     4ec:	31 96       	adiw	r30, 0x01	; 1
     4ee:	8f ed       	ldi	r24, 0xDF	; 223
     4f0:	91 e0       	ldi	r25, 0x01	; 1
     4f2:	ad b7       	in	r26, 0x3d	; 61
     4f4:	be b7       	in	r27, 0x3e	; 62
     4f6:	12 96       	adiw	r26, 0x02	; 2
     4f8:	9c 93       	st	X, r25
     4fa:	8e 93       	st	-X, r24
     4fc:	11 97       	sbiw	r26, 0x01	; 1
     4fe:	02 83       	std	Z+2, r16	; 0x02
     500:	13 c0       	rjmp	.+38     	; 0x528 <StillImage_Task+0xaa>
				USB_HostState = HOST_STATE_WaitForDeviceRemoval;
				break;
			}

			/* Set the device configuration to the first configuration (rarely do devices use multiple configurations) */
			if ((ErrorCode = USB_Host_SetDeviceConfiguration(1)) != HOST_SENDCONTROL_Successful)
     502:	81 e0       	ldi	r24, 0x01	; 1
     504:	66 d4       	rcall	.+2252   	; 0xdd2 <USB_Host_SetDeviceConfiguration>
     506:	28 2f       	mov	r18, r24
     508:	88 23       	and	r24, r24
     50a:	e1 f0       	breq	.+56     	; 0x544 <StillImage_Task+0xc6>
			{
				printf_P(PSTR(ESC_FG_RED "Control Error (Set Configuration).\r\n"
     50c:	00 d0       	rcall	.+0      	; 0x50e <StillImage_Task+0x90>
     50e:	00 d0       	rcall	.+0      	; 0x510 <StillImage_Task+0x92>
     510:	ed b7       	in	r30, 0x3d	; 61
     512:	fe b7       	in	r31, 0x3e	; 62
     514:	31 96       	adiw	r30, 0x01	; 1
     516:	8c e9       	ldi	r24, 0x9C	; 156
     518:	91 e0       	ldi	r25, 0x01	; 1
     51a:	ad b7       	in	r26, 0x3d	; 61
     51c:	be b7       	in	r27, 0x3e	; 62
     51e:	12 96       	adiw	r26, 0x02	; 2
     520:	9c 93       	st	X, r25
     522:	8e 93       	st	-X, r24
     524:	11 97       	sbiw	r26, 0x01	; 1
     526:	22 83       	std	Z+2, r18	; 0x02
     528:	13 82       	std	Z+3, r1	; 0x03
     52a:	0e 94 0d 0c 	call	0x181a	; 0x181a <printf_P>
     52e:	8b b1       	in	r24, 0x0b	; 11
     530:	8f 70       	andi	r24, 0x0F	; 15
     532:	80 69       	ori	r24, 0x90	; 144
     534:	8b b9       	out	0x0b, r24	; 11

				/* Indicate error via status LEDs */
				LEDs_SetAllLEDs(LEDMASK_USB_ERROR);

				/* Wait until USB device disconnected */
				USB_HostState = HOST_STATE_WaitForDeviceRemoval;
     536:	10 92 7c 01 	sts	0x017C, r1
     53a:	0f 90       	pop	r0
     53c:	0f 90       	pop	r0
     53e:	0f 90       	pop	r0
     540:	0f 90       	pop	r0
     542:	b8 c1       	rjmp	.+880    	; 0x8b4 <StillImage_Task+0x436>
				break;
			}

			puts_P(PSTR("Still Image Device Enumerated.\r\n"));
     544:	8b e7       	ldi	r24, 0x7B	; 123
     546:	91 e0       	ldi	r25, 0x01	; 1
     548:	0e 94 2f 0c 	call	0x185e	; 0x185e <puts_P>
			USB_HostState = HOST_STATE_Configured;
     54c:	8c e0       	ldi	r24, 0x0C	; 12
     54e:	80 93 7c 01 	sts	0x017C, r24
     552:	b0 c1       	rjmp	.+864    	; 0x8b4 <StillImage_Task+0x436>
     554:	8b b1       	in	r24, 0x0b	; 11
     556:	8f 70       	andi	r24, 0x0F	; 15
     558:	80 62       	ori	r24, 0x20	; 32
     55a:	8b b9       	out	0x0b, r24	; 11
			break;
		case HOST_STATE_Configured:
			/* Indicate device busy via the status LEDs */
			LEDs_SetAllLEDs(LEDMASK_USB_BUSY);

			puts_P(PSTR("Retrieving Device Info...\r\n"));
     55c:	8f e5       	ldi	r24, 0x5F	; 95
     55e:	91 e0       	ldi	r25, 0x01	; 1
     560:	0e 94 2f 0c 	call	0x185e	; 0x185e <puts_P>

			PIMA_SendBlock = (PIMA_Container_t)
     564:	28 e1       	ldi	r18, 0x18	; 24
     566:	32 2e       	mov	r3, r18
     568:	93 e4       	ldi	r25, 0x43	; 67
     56a:	49 2e       	mov	r4, r25
     56c:	91 e0       	ldi	r25, 0x01	; 1
     56e:	59 2e       	mov	r5, r25
     570:	f2 01       	movw	r30, r4
     572:	23 2d       	mov	r18, r3
     574:	11 92       	st	Z+, r1
     576:	2a 95       	dec	r18
     578:	e9 f7       	brne	.-6      	; 0x574 <StillImage_Task+0xf6>
     57a:	8c e0       	ldi	r24, 0x0C	; 12
     57c:	90 e0       	ldi	r25, 0x00	; 0
     57e:	a0 e0       	ldi	r26, 0x00	; 0
     580:	b0 e0       	ldi	r27, 0x00	; 0
     582:	80 93 43 01 	sts	0x0143, r24
     586:	90 93 44 01 	sts	0x0144, r25
     58a:	a0 93 45 01 	sts	0x0145, r26
     58e:	b0 93 46 01 	sts	0x0146, r27
     592:	81 e0       	ldi	r24, 0x01	; 1
     594:	90 e0       	ldi	r25, 0x00	; 0
     596:	90 93 48 01 	sts	0x0148, r25
     59a:	80 93 47 01 	sts	0x0147, r24
     59e:	81 e0       	ldi	r24, 0x01	; 1
     5a0:	90 e1       	ldi	r25, 0x10	; 16
     5a2:	90 93 4a 01 	sts	0x014A, r25
     5a6:	80 93 49 01 	sts	0x0149, r24
					.TransactionID = 0x00000000,
					.Params        = {},
				};

			/* Send the GETDEVICEINFO block */
			SImage_SendBlockHeader();
     5aa:	d2 d2       	rcall	.+1444   	; 0xb50 <SImage_SendBlockHeader>

			/* Receive the response data block */
			if ((ErrorCode = SImage_ReceiveBlockHeader()) != PIPE_RWSTREAM_NoError)
     5ac:	f7 d2       	rcall	.+1518   	; 0xb9c <SImage_ReceiveBlockHeader>
     5ae:	88 23       	and	r24, r24
     5b0:	29 f0       	breq	.+10     	; 0x5bc <StillImage_Task+0x13e>
			{
				ShowCommandError(ErrorCode, false);
     5b2:	60 e0       	ldi	r22, 0x00	; 0
     5b4:	fd de       	rcall	.-518    	; 0x3b0 <ShowCommandError>

				USB_HostState = HOST_STATE_WaitForDeviceRemoval;
     5b6:	10 92 7c 01 	sts	0x017C, r1
     5ba:	7c c1       	rjmp	.+760    	; 0x8b4 <StillImage_Task+0x436>
				break;
			}

			/* Calculate the size of the returned device info data structure */
			uint16_t DeviceInfoSize = (PIMA_ReceivedBlock.DataLength - PIMA_COMMAND_SIZE(0));
     5bc:	60 91 5b 01 	lds	r22, 0x015B
     5c0:	70 91 5c 01 	lds	r23, 0x015C
     5c4:	6c 50       	subi	r22, 0x0C	; 12
     5c6:	70 40       	sbci	r23, 0x00	; 0
     5c8:	2d b6       	in	r2, 0x3d	; 61
     5ca:	3e b7       	in	r19, 0x3e	; 62
     5cc:	3b 83       	std	Y+3, r19	; 0x03

			/* Create a buffer large enough to hold the entire device info */
			uint8_t DeviceInfo[DeviceInfoSize];
     5ce:	8d b7       	in	r24, 0x3d	; 61
     5d0:	9e b7       	in	r25, 0x3e	; 62
     5d2:	86 1b       	sub	r24, r22
     5d4:	97 0b       	sbc	r25, r23
     5d6:	0f b6       	in	r0, 0x3f	; 63
     5d8:	f8 94       	cli
     5da:	9e bf       	out	0x3e, r25	; 62
     5dc:	0f be       	out	0x3f, r0	; 63
     5de:	8d bf       	out	0x3d, r24	; 61
     5e0:	0d b7       	in	r16, 0x3d	; 61
     5e2:	1e b7       	in	r17, 0x3e	; 62
     5e4:	0f 5f       	subi	r16, 0xFF	; 255
     5e6:	1f 4f       	sbci	r17, 0xFF	; 255

			/* Read in the data block data (containing device info) */
			SImage_ReadData(DeviceInfo, DeviceInfoSize);
     5e8:	c8 01       	movw	r24, r16
     5ea:	9f d2       	rcall	.+1342   	; 0xb2a <SImage_ReadData>
			 *  \ingroup Group_PipePacketManagement
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
     5ec:	80 91 a6 00 	lds	r24, 0x00A6
     5f0:	8e 77       	andi	r24, 0x7E	; 126
     5f2:	80 93 a6 00 	sts	0x00A6, r24
			/* Create a pointer for walking through the info dataset */
			uint8_t* DeviceInfoPos = DeviceInfo;

			/* Skip over the data before the unicode device information strings */
			DeviceInfoPos +=  8;                                          // Skip to VendorExtensionDesc String
			DeviceInfoPos += (1 + UNICODE_STRING_LENGTH(*DeviceInfoPos)); // Skip over VendorExtensionDesc String
     5f6:	d8 01       	movw	r26, r16
     5f8:	18 96       	adiw	r26, 0x08	; 8
     5fa:	ec 91       	ld	r30, X
     5fc:	f0 e0       	ldi	r31, 0x00	; 0
     5fe:	ee 0f       	add	r30, r30
     600:	ff 1f       	adc	r31, r31
     602:	e0 0f       	add	r30, r16
     604:	f1 1f       	adc	r31, r17
     606:	39 96       	adiw	r30, 0x09	; 9
			DeviceInfoPos +=  2;                                          // Skip over FunctionalMode
			DeviceInfoPos += (4 + (*(uint32_t*)DeviceInfoPos << 1));      // Skip over Supported Operations Array
     608:	a2 81       	ldd	r26, Z+2	; 0x02
     60a:	b3 81       	ldd	r27, Z+3	; 0x03
     60c:	aa 0f       	add	r26, r26
     60e:	bb 1f       	adc	r27, r27
     610:	ae 0f       	add	r26, r30
     612:	bf 1f       	adc	r27, r31
     614:	16 96       	adiw	r26, 0x06	; 6
			DeviceInfoPos += (4 + (*(uint32_t*)DeviceInfoPos << 1));      // Skip over Supported Events Array
     616:	ed 91       	ld	r30, X+
     618:	fc 91       	ld	r31, X
     61a:	11 97       	sbiw	r26, 0x01	; 1
     61c:	ee 0f       	add	r30, r30
     61e:	ff 1f       	adc	r31, r31
     620:	34 96       	adiw	r30, 0x04	; 4
     622:	ea 0f       	add	r30, r26
     624:	fb 1f       	adc	r31, r27
			DeviceInfoPos += (4 + (*(uint32_t*)DeviceInfoPos << 1));      // Skip over Supported Device Properties Array
     626:	a0 81       	ld	r26, Z
     628:	b1 81       	ldd	r27, Z+1	; 0x01
     62a:	aa 0f       	add	r26, r26
     62c:	bb 1f       	adc	r27, r27
     62e:	14 96       	adiw	r26, 0x04	; 4
     630:	ae 0f       	add	r26, r30
     632:	bf 1f       	adc	r27, r31
			DeviceInfoPos += (4 + (*(uint32_t*)DeviceInfoPos << 1));      // Skip over Capture Formats Array
     634:	ed 91       	ld	r30, X+
     636:	fc 91       	ld	r31, X
     638:	11 97       	sbiw	r26, 0x01	; 1
     63a:	ee 0f       	add	r30, r30
     63c:	ff 1f       	adc	r31, r31
     63e:	34 96       	adiw	r30, 0x04	; 4
     640:	ea 0f       	add	r30, r26
     642:	fb 1f       	adc	r31, r27
			DeviceInfoPos += (4 + (*(uint32_t*)DeviceInfoPos << 1));      // Skip over Image Formats Array
     644:	00 81       	ld	r16, Z
     646:	11 81       	ldd	r17, Z+1	; 0x01
     648:	00 0f       	add	r16, r16
     64a:	11 1f       	adc	r17, r17
     64c:	0c 5f       	subi	r16, 0xFC	; 252
     64e:	1f 4f       	sbci	r17, 0xFF	; 255
     650:	0e 0f       	add	r16, r30
     652:	1f 1f       	adc	r17, r31

			/* Extract and convert the Manufacturer Unicode string to ASCII and print it through the USART */
			char Manufacturer[*DeviceInfoPos];
     654:	f8 01       	movw	r30, r16
     656:	80 81       	ld	r24, Z
     658:	2d b7       	in	r18, 0x3d	; 61
     65a:	3e b7       	in	r19, 0x3e	; 62
     65c:	28 1b       	sub	r18, r24
     65e:	31 09       	sbc	r19, r1
     660:	0f b6       	in	r0, 0x3f	; 63
     662:	f8 94       	cli
     664:	3e bf       	out	0x3e, r19	; 62
     666:	0f be       	out	0x3f, r0	; 63
     668:	2d bf       	out	0x3d, r18	; 61
     66a:	ed b6       	in	r14, 0x3d	; 61
     66c:	fe b6       	in	r15, 0x3e	; 62
     66e:	08 94       	sec
     670:	e1 1c       	adc	r14, r1
     672:	f1 1c       	adc	r15, r1
			UnicodeToASCII(DeviceInfoPos, Manufacturer);
     674:	c8 01       	movw	r24, r16
     676:	b7 01       	movw	r22, r14
     678:	87 de       	rcall	.-754    	; 0x388 <UnicodeToASCII>
			printf_P(PSTR("   Manufacturer: %s\r\n"), Manufacturer);
     67a:	00 d0       	rcall	.+0      	; 0x67c <StillImage_Task+0x1fe>
     67c:	00 d0       	rcall	.+0      	; 0x67e <StillImage_Task+0x200>
     67e:	ed b7       	in	r30, 0x3d	; 61
     680:	fe b7       	in	r31, 0x3e	; 62
     682:	31 96       	adiw	r30, 0x01	; 1
     684:	89 e4       	ldi	r24, 0x49	; 73
     686:	91 e0       	ldi	r25, 0x01	; 1
     688:	ad b7       	in	r26, 0x3d	; 61
     68a:	be b7       	in	r27, 0x3e	; 62
     68c:	12 96       	adiw	r26, 0x02	; 2
     68e:	9c 93       	st	X, r25
     690:	8e 93       	st	-X, r24
     692:	11 97       	sbiw	r26, 0x01	; 1
     694:	e2 82       	std	Z+2, r14	; 0x02
     696:	f3 82       	std	Z+3, r15	; 0x03
     698:	0e 94 0d 0c 	call	0x181a	; 0x181a <printf_P>

			DeviceInfoPos += 1 + UNICODE_STRING_LENGTH(*DeviceInfoPos);   // Skip over Manufacturer String
     69c:	f8 01       	movw	r30, r16
     69e:	80 81       	ld	r24, Z
     6a0:	e8 2e       	mov	r14, r24
     6a2:	ff 24       	eor	r15, r15
     6a4:	ee 0c       	add	r14, r14
     6a6:	ff 1c       	adc	r15, r15
     6a8:	08 94       	sec
     6aa:	e1 1c       	adc	r14, r1
     6ac:	f1 1c       	adc	r15, r1
     6ae:	e0 0e       	add	r14, r16
     6b0:	f1 1e       	adc	r15, r17

			/* Extract and convert the Model Unicode string to ASCII and print it through the USART */
			char Model[*DeviceInfoPos];
     6b2:	d7 01       	movw	r26, r14
     6b4:	8c 91       	ld	r24, X
     6b6:	0f 90       	pop	r0
     6b8:	0f 90       	pop	r0
     6ba:	0f 90       	pop	r0
     6bc:	0f 90       	pop	r0
     6be:	ed b7       	in	r30, 0x3d	; 61
     6c0:	fe b7       	in	r31, 0x3e	; 62
     6c2:	e8 1b       	sub	r30, r24
     6c4:	f1 09       	sbc	r31, r1
     6c6:	0f b6       	in	r0, 0x3f	; 63
     6c8:	f8 94       	cli
     6ca:	fe bf       	out	0x3e, r31	; 62
     6cc:	0f be       	out	0x3f, r0	; 63
     6ce:	ed bf       	out	0x3d, r30	; 61
     6d0:	0d b7       	in	r16, 0x3d	; 61
     6d2:	1e b7       	in	r17, 0x3e	; 62
     6d4:	0f 5f       	subi	r16, 0xFF	; 255
     6d6:	1f 4f       	sbci	r17, 0xFF	; 255
			UnicodeToASCII(DeviceInfoPos, Model);
     6d8:	c7 01       	movw	r24, r14
     6da:	b8 01       	movw	r22, r16
     6dc:	55 de       	rcall	.-854    	; 0x388 <UnicodeToASCII>
			printf_P(PSTR("   Model: %s\r\n"), Model);
     6de:	00 d0       	rcall	.+0      	; 0x6e0 <StillImage_Task+0x262>
     6e0:	00 d0       	rcall	.+0      	; 0x6e2 <StillImage_Task+0x264>
     6e2:	ed b7       	in	r30, 0x3d	; 61
     6e4:	fe b7       	in	r31, 0x3e	; 62
     6e6:	31 96       	adiw	r30, 0x01	; 1
     6e8:	8a e3       	ldi	r24, 0x3A	; 58
     6ea:	91 e0       	ldi	r25, 0x01	; 1
     6ec:	ad b7       	in	r26, 0x3d	; 61
     6ee:	be b7       	in	r27, 0x3e	; 62
     6f0:	12 96       	adiw	r26, 0x02	; 2
     6f2:	9c 93       	st	X, r25
     6f4:	8e 93       	st	-X, r24
     6f6:	11 97       	sbiw	r26, 0x01	; 1
     6f8:	02 83       	std	Z+2, r16	; 0x02
     6fa:	13 83       	std	Z+3, r17	; 0x03
     6fc:	0e 94 0d 0c 	call	0x181a	; 0x181a <printf_P>

			DeviceInfoPos += 1 + UNICODE_STRING_LENGTH(*DeviceInfoPos);   // Skip over Model String
     700:	d7 01       	movw	r26, r14
     702:	ec 91       	ld	r30, X
     704:	f0 e0       	ldi	r31, 0x00	; 0
     706:	ee 0f       	add	r30, r30
     708:	ff 1f       	adc	r31, r31
     70a:	31 96       	adiw	r30, 0x01	; 1
     70c:	ee 0d       	add	r30, r14
     70e:	ff 1d       	adc	r31, r15

			/* Extract and convert the Device Version Unicode string to ASCII and print it through the USART */
			char DeviceVersion[*DeviceInfoPos];
     710:	80 81       	ld	r24, Z
     712:	0f 90       	pop	r0
     714:	0f 90       	pop	r0
     716:	0f 90       	pop	r0
     718:	0f 90       	pop	r0
     71a:	2d b7       	in	r18, 0x3d	; 61
     71c:	3e b7       	in	r19, 0x3e	; 62
     71e:	28 1b       	sub	r18, r24
     720:	31 09       	sbc	r19, r1
     722:	0f b6       	in	r0, 0x3f	; 63
     724:	f8 94       	cli
     726:	3e bf       	out	0x3e, r19	; 62
     728:	0f be       	out	0x3f, r0	; 63
     72a:	2d bf       	out	0x3d, r18	; 61
     72c:	0d b7       	in	r16, 0x3d	; 61
     72e:	1e b7       	in	r17, 0x3e	; 62
     730:	0f 5f       	subi	r16, 0xFF	; 255
     732:	1f 4f       	sbci	r17, 0xFF	; 255
			UnicodeToASCII(DeviceInfoPos, DeviceVersion);
     734:	cf 01       	movw	r24, r30
     736:	b8 01       	movw	r22, r16
     738:	27 de       	rcall	.-946    	; 0x388 <UnicodeToASCII>
			printf_P(PSTR("   Device Version: %s\r\n"), DeviceVersion);
     73a:	00 d0       	rcall	.+0      	; 0x73c <StillImage_Task+0x2be>
     73c:	00 d0       	rcall	.+0      	; 0x73e <StillImage_Task+0x2c0>
     73e:	ed b7       	in	r30, 0x3d	; 61
     740:	fe b7       	in	r31, 0x3e	; 62
     742:	31 96       	adiw	r30, 0x01	; 1
     744:	82 e2       	ldi	r24, 0x22	; 34
     746:	91 e0       	ldi	r25, 0x01	; 1
     748:	ad b7       	in	r26, 0x3d	; 61
     74a:	be b7       	in	r27, 0x3e	; 62
     74c:	12 96       	adiw	r26, 0x02	; 2
     74e:	9c 93       	st	X, r25
     750:	8e 93       	st	-X, r24
     752:	11 97       	sbiw	r26, 0x01	; 1
     754:	02 83       	std	Z+2, r16	; 0x02
     756:	13 83       	std	Z+3, r17	; 0x03
     758:	0e 94 0d 0c 	call	0x181a	; 0x181a <printf_P>

			/* Receive the final response block from the device */
			if ((ErrorCode = SImage_ReceiveBlockHeader()) != PIPE_RWSTREAM_NoError)
     75c:	0f 90       	pop	r0
     75e:	0f 90       	pop	r0
     760:	0f 90       	pop	r0
     762:	0f 90       	pop	r0
     764:	1b d2       	rcall	.+1078   	; 0xb9c <SImage_ReceiveBlockHeader>
     766:	88 23       	and	r24, r24
     768:	09 f0       	breq	.+2      	; 0x76c <StillImage_Task+0x2ee>
     76a:	80 c0       	rjmp	.+256    	; 0x86c <StillImage_Task+0x3ee>
				USB_HostState = HOST_STATE_WaitForDeviceRemoval;
				break;
			}

			/* Verify that the command completed successfully */
			if ((PIMA_ReceivedBlock.Type != PIMA_CONTAINER_ResponseBlock) || (PIMA_ReceivedBlock.Code != PIMA_RESPONSE_OK))
     76c:	80 91 5f 01 	lds	r24, 0x015F
     770:	90 91 60 01 	lds	r25, 0x0160
     774:	03 97       	sbiw	r24, 0x03	; 3
     776:	09 f0       	breq	.+2      	; 0x77a <StillImage_Task+0x2fc>
     778:	87 c0       	rjmp	.+270    	; 0x888 <StillImage_Task+0x40a>
     77a:	e0 90 61 01 	lds	r14, 0x0161
     77e:	f0 90 62 01 	lds	r15, 0x0162
     782:	b1 e0       	ldi	r27, 0x01	; 1
     784:	eb 16       	cp	r14, r27
     786:	f1 04       	cpc	r15, r1
     788:	09 f0       	breq	.+2      	; 0x78c <StillImage_Task+0x30e>
     78a:	7e c0       	rjmp	.+252    	; 0x888 <StillImage_Task+0x40a>

				USB_HostState = HOST_STATE_WaitForDeviceRemoval;
				break;
			}

			puts_P(PSTR("Opening Session...\r\n"));
     78c:	8d e0       	ldi	r24, 0x0D	; 13
     78e:	91 e0       	ldi	r25, 0x01	; 1
     790:	0e 94 2f 0c 	call	0x185e	; 0x185e <puts_P>

			PIMA_SendBlock = (PIMA_Container_t)
     794:	f2 01       	movw	r30, r4
     796:	23 2d       	mov	r18, r3
     798:	11 92       	st	Z+, r1
     79a:	2a 95       	dec	r18
     79c:	e9 f7       	brne	.-6      	; 0x798 <StillImage_Task+0x31a>
     79e:	90 e1       	ldi	r25, 0x10	; 16
     7a0:	69 2e       	mov	r6, r25
     7a2:	71 2c       	mov	r7, r1
     7a4:	81 2c       	mov	r8, r1
     7a6:	91 2c       	mov	r9, r1
     7a8:	60 92 43 01 	sts	0x0143, r6
     7ac:	70 92 44 01 	sts	0x0144, r7
     7b0:	80 92 45 01 	sts	0x0145, r8
     7b4:	90 92 46 01 	sts	0x0146, r9
     7b8:	f0 92 48 01 	sts	0x0148, r15
     7bc:	e0 92 47 01 	sts	0x0147, r14
     7c0:	82 e0       	ldi	r24, 0x02	; 2
     7c2:	90 e1       	ldi	r25, 0x10	; 16
     7c4:	90 93 4a 01 	sts	0x014A, r25
     7c8:	80 93 49 01 	sts	0x0149, r24
     7cc:	81 e0       	ldi	r24, 0x01	; 1
     7ce:	a8 2e       	mov	r10, r24
     7d0:	b1 2c       	mov	r11, r1
     7d2:	c1 2c       	mov	r12, r1
     7d4:	d1 2c       	mov	r13, r1
     7d6:	a0 92 4f 01 	sts	0x014F, r10
     7da:	b0 92 50 01 	sts	0x0150, r11
     7de:	c0 92 51 01 	sts	0x0151, r12
     7e2:	d0 92 52 01 	sts	0x0152, r13
					.TransactionID = 0x00000000,
					.Params        = {0x00000001},
				};

			/* Send the OPENSESSION block, open a session with an ID of 0x0001 */
			SImage_SendBlockHeader();
     7e6:	b4 d1       	rcall	.+872    	; 0xb50 <SImage_SendBlockHeader>

			/* Receive the response block from the device */
			if ((ErrorCode = SImage_ReceiveBlockHeader()) != PIPE_RWSTREAM_NoError)
     7e8:	d9 d1       	rcall	.+946    	; 0xb9c <SImage_ReceiveBlockHeader>
     7ea:	88 23       	and	r24, r24
     7ec:	09 f0       	breq	.+2      	; 0x7f0 <StillImage_Task+0x372>
     7ee:	3e c0       	rjmp	.+124    	; 0x86c <StillImage_Task+0x3ee>
				USB_HostState = HOST_STATE_WaitForDeviceRemoval;
				break;
			}

			/* Verify that the command completed successfully */
			if ((PIMA_ReceivedBlock.Type != PIMA_CONTAINER_ResponseBlock) || (PIMA_ReceivedBlock.Code != PIMA_RESPONSE_OK))
     7f0:	80 91 5f 01 	lds	r24, 0x015F
     7f4:	90 91 60 01 	lds	r25, 0x0160
     7f8:	03 97       	sbiw	r24, 0x03	; 3
     7fa:	09 f0       	breq	.+2      	; 0x7fe <StillImage_Task+0x380>
     7fc:	45 c0       	rjmp	.+138    	; 0x888 <StillImage_Task+0x40a>
     7fe:	e0 90 61 01 	lds	r14, 0x0161
     802:	f0 90 62 01 	lds	r15, 0x0162
     806:	31 e0       	ldi	r19, 0x01	; 1
     808:	e3 16       	cp	r14, r19
     80a:	f1 04       	cpc	r15, r1
     80c:	09 f0       	breq	.+2      	; 0x810 <StillImage_Task+0x392>
     80e:	3c c0       	rjmp	.+120    	; 0x888 <StillImage_Task+0x40a>

				USB_HostState = HOST_STATE_WaitForDeviceRemoval;
				break;
			}

			puts_P(PSTR("Closing Session...\r\n"));
     810:	88 ef       	ldi	r24, 0xF8	; 248
     812:	90 e0       	ldi	r25, 0x00	; 0
     814:	0e 94 2f 0c 	call	0x185e	; 0x185e <puts_P>

			PIMA_SendBlock = (PIMA_Container_t)
     818:	d2 01       	movw	r26, r4
     81a:	1d 92       	st	X+, r1
     81c:	3a 94       	dec	r3
     81e:	e9 f7       	brne	.-6      	; 0x81a <StillImage_Task+0x39c>
     820:	60 92 43 01 	sts	0x0143, r6
     824:	70 92 44 01 	sts	0x0144, r7
     828:	80 92 45 01 	sts	0x0145, r8
     82c:	90 92 46 01 	sts	0x0146, r9
     830:	f0 92 48 01 	sts	0x0148, r15
     834:	e0 92 47 01 	sts	0x0147, r14
     838:	83 e0       	ldi	r24, 0x03	; 3
     83a:	90 e1       	ldi	r25, 0x10	; 16
     83c:	90 93 4a 01 	sts	0x014A, r25
     840:	80 93 49 01 	sts	0x0149, r24
     844:	a0 92 4b 01 	sts	0x014B, r10
     848:	b0 92 4c 01 	sts	0x014C, r11
     84c:	c0 92 4d 01 	sts	0x014D, r12
     850:	d0 92 4e 01 	sts	0x014E, r13
     854:	a0 92 4f 01 	sts	0x014F, r10
     858:	b0 92 50 01 	sts	0x0150, r11
     85c:	c0 92 51 01 	sts	0x0151, r12
     860:	d0 92 52 01 	sts	0x0152, r13
					.TransactionID = 0x00000001,
					.Params        = {0x00000001},
				};

			/* Send the CLOSESESSION block, close the session with an ID of 0x0001 */
			SImage_SendBlockHeader();
     864:	75 d1       	rcall	.+746    	; 0xb50 <SImage_SendBlockHeader>

			/* Receive the response block from the device */
			if ((ErrorCode = SImage_ReceiveBlockHeader()) != PIPE_RWSTREAM_NoError)
     866:	9a d1       	rcall	.+820    	; 0xb9c <SImage_ReceiveBlockHeader>
     868:	88 23       	and	r24, r24
     86a:	11 f0       	breq	.+4      	; 0x870 <StillImage_Task+0x3f2>
			{
				ShowCommandError(ErrorCode, false);
     86c:	60 e0       	ldi	r22, 0x00	; 0
     86e:	0f c0       	rjmp	.+30     	; 0x88e <StillImage_Task+0x410>
				USB_HostState = HOST_STATE_WaitForDeviceRemoval;
				break;
			}

			/* Verify that the command completed successfully */
			if ((PIMA_ReceivedBlock.Type != PIMA_CONTAINER_ResponseBlock) || (PIMA_ReceivedBlock.Code != PIMA_RESPONSE_OK))
     870:	80 91 5f 01 	lds	r24, 0x015F
     874:	90 91 60 01 	lds	r25, 0x0160
     878:	03 97       	sbiw	r24, 0x03	; 3
     87a:	31 f4       	brne	.+12     	; 0x888 <StillImage_Task+0x40a>
     87c:	80 91 61 01 	lds	r24, 0x0161
     880:	90 91 62 01 	lds	r25, 0x0162
     884:	01 97       	sbiw	r24, 0x01	; 1
     886:	29 f0       	breq	.+10     	; 0x892 <StillImage_Task+0x414>
			{
				ShowCommandError(PIMA_ReceivedBlock.Code, true);
     888:	80 91 61 01 	lds	r24, 0x0161
     88c:	61 e0       	ldi	r22, 0x01	; 1
     88e:	90 dd       	rcall	.-1248   	; 0x3b0 <ShowCommandError>
     890:	07 c0       	rjmp	.+14     	; 0x8a0 <StillImage_Task+0x422>

				USB_HostState = HOST_STATE_WaitForDeviceRemoval;
				break;
			}

			puts_P(PSTR("Done.\r\n"));
     892:	80 ef       	ldi	r24, 0xF0	; 240
     894:	90 e0       	ldi	r25, 0x00	; 0
     896:	e3 d7       	rcall	.+4038   	; 0x185e <puts_P>
     898:	8b b1       	in	r24, 0x0b	; 11
     89a:	8f 70       	andi	r24, 0x0F	; 15
     89c:	80 66       	ori	r24, 0x60	; 96
     89e:	8b b9       	out	0x0b, r24	; 11

			/* Indicate device no longer busy */
			LEDs_SetAllLEDs(LEDMASK_USB_READY);

			USB_HostState = HOST_STATE_WaitForDeviceRemoval;
     8a0:	10 92 7c 01 	sts	0x017C, r1
     8a4:	82 2d       	mov	r24, r2
     8a6:	9b 81       	ldd	r25, Y+3	; 0x03
     8a8:	9c 01       	movw	r18, r24
     8aa:	0f b6       	in	r0, 0x3f	; 63
     8ac:	f8 94       	cli
     8ae:	3e bf       	out	0x3e, r19	; 62
     8b0:	0f be       	out	0x3f, r0	; 63
     8b2:	2d bf       	out	0x3d, r18	; 61
			break;
	}
}
     8b4:	e9 81       	ldd	r30, Y+1	; 0x01
     8b6:	fa 81       	ldd	r31, Y+2	; 0x02
     8b8:	0f b6       	in	r0, 0x3f	; 63
     8ba:	f8 94       	cli
     8bc:	fe bf       	out	0x3e, r31	; 62
     8be:	0f be       	out	0x3f, r0	; 63
     8c0:	ed bf       	out	0x3d, r30	; 61
     8c2:	0f 90       	pop	r0
     8c4:	0f 90       	pop	r0
     8c6:	0f 90       	pop	r0
     8c8:	cf 91       	pop	r28
     8ca:	df 91       	pop	r29
     8cc:	1f 91       	pop	r17
     8ce:	0f 91       	pop	r16
     8d0:	ff 90       	pop	r15
     8d2:	ef 90       	pop	r14
     8d4:	df 90       	pop	r13
     8d6:	cf 90       	pop	r12
     8d8:	bf 90       	pop	r11
     8da:	af 90       	pop	r10
     8dc:	9f 90       	pop	r9
     8de:	8f 90       	pop	r8
     8e0:	7f 90       	pop	r7
     8e2:	6f 90       	pop	r6
     8e4:	5f 90       	pop	r5
     8e6:	4f 90       	pop	r4
     8e8:	3f 90       	pop	r3
     8ea:	2f 90       	pop	r2
     8ec:	08 95       	ret

000008ee <EVENT_USB_Host_HostError>:
	LEDs_SetAllLEDs(LEDMASK_USB_READY);
}

/** Event handler for the USB_HostError event. This indicates that a hardware error occurred while in host mode. */
void EVENT_USB_Host_HostError(const uint8_t ErrorCode)
{
     8ee:	1f 93       	push	r17
     8f0:	18 2f       	mov	r17, r24
	USB_ShutDown();
     8f2:	81 d4       	rcall	.+2306   	; 0x11f6 <USB_ShutDown>

	printf_P(PSTR(ESC_FG_RED "Host Mode Error\r\n"
     8f4:	00 d0       	rcall	.+0      	; 0x8f6 <EVENT_USB_Host_HostError+0x8>
     8f6:	00 d0       	rcall	.+0      	; 0x8f8 <EVENT_USB_Host_HostError+0xa>
     8f8:	ed b7       	in	r30, 0x3d	; 61
     8fa:	fe b7       	in	r31, 0x3e	; 62
     8fc:	31 96       	adiw	r30, 0x01	; 1
     8fe:	87 ea       	ldi	r24, 0xA7	; 167
     900:	92 e0       	ldi	r25, 0x02	; 2
     902:	ad b7       	in	r26, 0x3d	; 61
     904:	be b7       	in	r27, 0x3e	; 62
     906:	12 96       	adiw	r26, 0x02	; 2
     908:	9c 93       	st	X, r25
     90a:	8e 93       	st	-X, r24
     90c:	11 97       	sbiw	r26, 0x01	; 1
     90e:	12 83       	std	Z+2, r17	; 0x02
     910:	13 82       	std	Z+3, r1	; 0x03
     912:	83 d7       	rcall	.+3846   	; 0x181a <printf_P>
     914:	8b b1       	in	r24, 0x0b	; 11
     916:	8f 70       	andi	r24, 0x0F	; 15
     918:	80 69       	ori	r24, 0x90	; 144
     91a:	8b b9       	out	0x0b, r24	; 11
     91c:	0f 90       	pop	r0
     91e:	0f 90       	pop	r0
     920:	0f 90       	pop	r0
     922:	0f 90       	pop	r0
     924:	ff cf       	rjmp	.-2      	; 0x924 <EVENT_USB_Host_HostError+0x36>

00000926 <SetupHardware>:

/** Configures the board hardware and chip peripherals for the demo's functionality. */
void SetupHardware(void)
{
	/* Disable watchdog if enabled by bootloader/fuses */
	MCUSR &= ~(1 << WDRF);
     926:	84 b7       	in	r24, 0x34	; 52
     928:	87 7f       	andi	r24, 0xF7	; 247
     92a:	84 bf       	out	0x34, r24	; 52
	wdt_disable();
     92c:	28 e1       	ldi	r18, 0x18	; 24
     92e:	0f b6       	in	r0, 0x3f	; 63
     930:	f8 94       	cli
     932:	20 93 60 00 	sts	0x0060, r18
     936:	10 92 60 00 	sts	0x0060, r1
     93a:	0f be       	out	0x3f, r0	; 63

	/* Disable Clock Division */
	CLKPR = (1 << CLKPCE);
     93c:	e1 e6       	ldi	r30, 0x61	; 97
     93e:	f0 e0       	ldi	r31, 0x00	; 0
     940:	80 e8       	ldi	r24, 0x80	; 128
     942:	80 83       	st	Z, r24
	CLKPR = 0;
     944:	10 82       	st	Z, r1
			 *  \param[in] DoubleSpeed  Enables double speed mode when set, halving the sample time to double the baud rate.
			 */
			static inline void Serial_Init(const uint32_t BaudRate,
			                               const bool DoubleSpeed)
			{
				UBRR1  = (DoubleSpeed ? SERIAL_2X_UBBRVAL(BaudRate) : SERIAL_UBBRVAL(BaudRate));
     946:	83 e3       	ldi	r24, 0x33	; 51
     948:	90 e0       	ldi	r25, 0x00	; 0
     94a:	90 93 cd 00 	sts	0x00CD, r25
     94e:	80 93 cc 00 	sts	0x00CC, r24

				UCSR1C = ((1 << UCSZ11) | (1 << UCSZ10));
     952:	86 e0       	ldi	r24, 0x06	; 6
     954:	80 93 ca 00 	sts	0x00CA, r24
				UCSR1A = (DoubleSpeed ? (1 << U2X1) : 0);
     958:	10 92 c8 00 	sts	0x00C8, r1
				UCSR1B = ((1 << TXEN1)  | (1 << RXEN1));
     95c:	20 93 c9 00 	sts	0x00C9, r18

				DDRD  |= (1 << 3);
     960:	53 9a       	sbi	0x0a, 3	; 10
				PORTD |= (1 << 2);
     962:	5a 9a       	sbi	0x0b, 2	; 11
			static inline void SerialStream_Init(const uint32_t BaudRate,
			                                     const bool DoubleSpeed)
			{
				Serial_Init(BaudRate, DoubleSpeed);

				stdout = &USARTStream;
     964:	89 e1       	ldi	r24, 0x19	; 25
     966:	91 e0       	ldi	r25, 0x01	; 1
     968:	90 93 80 01 	sts	0x0180, r25
     96c:	80 93 7f 01 	sts	0x017F, r24
				stdin  = &USARTStream;
     970:	90 93 7e 01 	sts	0x017E, r25
     974:	80 93 7d 01 	sts	0x017D, r24

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void LEDs_Init(void)
			{
				DDRD  |=  LEDS_ALL_LEDS;
     978:	8a b1       	in	r24, 0x0a	; 10
     97a:	80 6f       	ori	r24, 0xF0	; 240
     97c:	8a b9       	out	0x0a, r24	; 10
				PORTD &= ~LEDS_ALL_LEDS;
     97e:	8b b1       	in	r24, 0x0b	; 11
     980:	8f 70       	andi	r24, 0x0F	; 15
     982:	8b b9       	out	0x0b, r24	; 11

	/* Hardware Initialization */
	SerialStream_Init(9600, false);
	LEDs_Init();
	USB_Init();
}
     984:	2f c4       	rjmp	.+2142   	; 0x11e4 <USB_Init>

00000986 <main>:
/** Main program entry point. This routine configures the hardware required by the application, then
 *  enters a loop to run the application tasks in sequence.
 */
int main(void)
{
	SetupHardware();
     986:	cf df       	rcall	.-98     	; 0x926 <SetupHardware>

	puts_P(PSTR(ESC_FG_CYAN "Still Image Host Demo running.\r\n" ESC_FG_WHITE));
     988:	84 e1       	ldi	r24, 0x14	; 20
     98a:	93 e0       	ldi	r25, 0x03	; 3
     98c:	68 d7       	rcall	.+3792   	; 0x185e <puts_P>
				PORTD &= ~LEDMask;
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
			{
				PORTD = ((PORTD & ~LEDS_ALL_LEDS) | LEDMask);
     98e:	8b b1       	in	r24, 0x0b	; 11
     990:	8f 70       	andi	r24, 0x0F	; 15
     992:	80 61       	ori	r24, 0x10	; 16
     994:	8b b9       	out	0x0b, r24	; 11

	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
	sei();
     996:	78 94       	sei

	for (;;)
	{
		StillImage_Task();
     998:	72 dd       	rcall	.-1308   	; 0x47e <StillImage_Task>
		USB_USBTask();
     99a:	12 d7       	rcall	.+3620   	; 0x17c0 <USB_USBTask>
     99c:	fd cf       	rjmp	.-6      	; 0x998 <main+0x12>

0000099e <DComp_NextStillImageInterface>:
 *  This comparator searches for the next Interface descriptor of the correct Still Image Class, Subclass and Protocol values.
 *
 *  \return A value from the DSEARCH_Return_ErrorCodes_t enum
 */
uint8_t DComp_NextStillImageInterface(void* CurrentDescriptor)
{
     99e:	fc 01       	movw	r30, r24
	USB_Descriptor_Header_t* Header = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Header_t);

	if (Header->Type == DTYPE_Interface)
     9a0:	81 81       	ldd	r24, Z+1	; 0x01
     9a2:	84 30       	cpi	r24, 0x04	; 4
     9a4:	59 f4       	brne	.+22     	; 0x9bc <DComp_NextStillImageInterface+0x1e>
	{
		USB_Descriptor_Interface_t* Interface = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Interface_t);

		/* Check the descriptor class, subclass and protocol, break out if correct interface found */
		if ((Interface->Class    == SI_CSCP_StillImageClass)    &&
     9a6:	85 81       	ldd	r24, Z+5	; 0x05
     9a8:	86 30       	cpi	r24, 0x06	; 6
     9aa:	41 f4       	brne	.+16     	; 0x9bc <DComp_NextStillImageInterface+0x1e>
     9ac:	86 81       	ldd	r24, Z+6	; 0x06
     9ae:	81 30       	cpi	r24, 0x01	; 1
     9b0:	29 f4       	brne	.+10     	; 0x9bc <DComp_NextStillImageInterface+0x1e>
     9b2:	87 81       	ldd	r24, Z+7	; 0x07
     9b4:	81 30       	cpi	r24, 0x01	; 1
     9b6:	11 f4       	brne	.+4      	; 0x9bc <DComp_NextStillImageInterface+0x1e>
     9b8:	80 e0       	ldi	r24, 0x00	; 0
     9ba:	08 95       	ret
     9bc:	82 e0       	ldi	r24, 0x02	; 2
			return DESCRIPTOR_SEARCH_Found;
		}
	}

	return DESCRIPTOR_SEARCH_NotFound;
}
     9be:	08 95       	ret

000009c0 <DComp_NextStillImageInterfaceDataEndpoint>:
 *  search if another interface descriptor is found before the next endpoint.
 *
 *  \return A value from the DSEARCH_Return_ErrorCodes_t enum
 */
uint8_t DComp_NextStillImageInterfaceDataEndpoint(void* CurrentDescriptor)
{
     9c0:	fc 01       	movw	r30, r24
	USB_Descriptor_Header_t* Header = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Header_t);

	if (Header->Type == DTYPE_Endpoint)
     9c2:	81 81       	ldd	r24, Z+1	; 0x01
     9c4:	85 30       	cpi	r24, 0x05	; 5
     9c6:	49 f4       	brne	.+18     	; 0x9da <DComp_NextStillImageInterfaceDataEndpoint+0x1a>
	{
		USB_Descriptor_Endpoint_t* Endpoint = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Endpoint_t);

		/* Check the endpoint type, break out if correct BULK or INTERRUPT type endpoint found */
		if (((Endpoint->Attributes & EP_TYPE_MASK) == EP_TYPE_BULK) || 
     9c8:	83 81       	ldd	r24, Z+3	; 0x03
     9ca:	90 e0       	ldi	r25, 0x00	; 0
     9cc:	83 70       	andi	r24, 0x03	; 3
     9ce:	90 70       	andi	r25, 0x00	; 0
     9d0:	02 97       	sbiw	r24, 0x02	; 2
     9d2:	02 97       	sbiw	r24, 0x02	; 2
     9d4:	30 f4       	brcc	.+12     	; 0x9e2 <DComp_NextStillImageInterfaceDataEndpoint+0x22>
     9d6:	80 e0       	ldi	r24, 0x00	; 0
     9d8:	08 95       	ret
		    ((Endpoint->Attributes & EP_TYPE_MASK) == EP_TYPE_INTERRUPT))
		{
			return DESCRIPTOR_SEARCH_Found;
		}
	}
	else if (Header->Type == DTYPE_Interface)
     9da:	84 30       	cpi	r24, 0x04	; 4
     9dc:	11 f4       	brne	.+4      	; 0x9e2 <DComp_NextStillImageInterfaceDataEndpoint+0x22>
     9de:	81 e0       	ldi	r24, 0x01	; 1
     9e0:	08 95       	ret
     9e2:	82 e0       	ldi	r24, 0x02	; 2
	{
		return DESCRIPTOR_SEARCH_Fail;
	}

	return DESCRIPTOR_SEARCH_NotFound;
}
     9e4:	08 95       	ret

000009e6 <ProcessConfigurationDescriptor>:
 *  This routine searches for a SI interface descriptor containing bulk IN and OUT data endpoints.
 *
 *  \return An error code from the \ref StillImageHost_GetConfigDescriptorDataCodes_t enum.
 */
uint8_t ProcessConfigurationDescriptor(void)
{
     9e6:	6f 92       	push	r6
     9e8:	7f 92       	push	r7
     9ea:	8f 92       	push	r8
     9ec:	9f 92       	push	r9
     9ee:	af 92       	push	r10
     9f0:	bf 92       	push	r11
     9f2:	cf 92       	push	r12
     9f4:	df 92       	push	r13
     9f6:	ef 92       	push	r14
     9f8:	ff 92       	push	r15
     9fa:	0f 93       	push	r16
     9fc:	1f 93       	push	r17
     9fe:	df 93       	push	r29
     a00:	cf 93       	push	r28
     a02:	cd b7       	in	r28, 0x3d	; 61
     a04:	de b7       	in	r29, 0x3e	; 62
     a06:	c4 50       	subi	r28, 0x04	; 4
     a08:	d2 40       	sbci	r29, 0x02	; 2
     a0a:	0f b6       	in	r0, 0x3f	; 63
     a0c:	f8 94       	cli
     a0e:	de bf       	out	0x3e, r29	; 62
     a10:	0f be       	out	0x3f, r0	; 63
     a12:	cd bf       	out	0x3d, r28	; 61
	uint8_t  ConfigDescriptorData[512];
	void*    CurrConfigLocation = ConfigDescriptorData;
     a14:	ae 01       	movw	r20, r28
     a16:	4b 5f       	subi	r20, 0xFB	; 251
     a18:	5f 4f       	sbci	r21, 0xFF	; 255
     a1a:	5a 83       	std	Y+2, r21	; 0x02
     a1c:	49 83       	std	Y+1, r20	; 0x01
	USB_Descriptor_Endpoint_t*  DataINEndpoint      = NULL;
	USB_Descriptor_Endpoint_t*  DataOUTEndpoint     = NULL;
	USB_Descriptor_Endpoint_t*  EventsEndpoint      = NULL;

	/* Retrieve the entire configuration descriptor into the allocated buffer */
	switch (USB_Host_GetDeviceConfigDescriptor(1, &CurrConfigBytesRem, ConfigDescriptorData, sizeof(ConfigDescriptorData)))
     a1e:	8e 01       	movw	r16, r28
     a20:	0d 5f       	subi	r16, 0xFD	; 253
     a22:	1f 4f       	sbci	r17, 0xFF	; 255
     a24:	81 e0       	ldi	r24, 0x01	; 1
     a26:	b8 01       	movw	r22, r16
     a28:	20 e0       	ldi	r18, 0x00	; 0
     a2a:	32 e0       	ldi	r19, 0x02	; 2
     a2c:	dd d4       	rcall	.+2490   	; 0x13e8 <USB_Host_GetDeviceConfigDescriptor>
     a2e:	85 30       	cpi	r24, 0x05	; 5
     a30:	29 f0       	breq	.+10     	; 0xa3c <ProcessConfigurationDescriptor+0x56>
     a32:	86 30       	cpi	r24, 0x06	; 6
     a34:	91 f0       	breq	.+36     	; 0xa5a <ProcessConfigurationDescriptor+0x74>
     a36:	88 23       	and	r24, r24
     a38:	19 f0       	breq	.+6      	; 0xa40 <ProcessConfigurationDescriptor+0x5a>
     a3a:	11 c0       	rjmp	.+34     	; 0xa5e <ProcessConfigurationDescriptor+0x78>
     a3c:	82 e0       	ldi	r24, 0x02	; 2
     a3e:	5f c0       	rjmp	.+190    	; 0xafe <ProcessConfigurationDescriptor+0x118>
     a40:	88 24       	eor	r8, r8
     a42:	99 24       	eor	r9, r9
     a44:	ee 24       	eor	r14, r14
     a46:	ff 24       	eor	r15, r15
     a48:	cc 24       	eor	r12, r12
     a4a:	dd 24       	eor	r13, r13
     a4c:	aa 24       	eor	r10, r10
     a4e:	bb 24       	eor	r11, r11
	}

	while (!(DataINEndpoint) || !(DataOUTEndpoint))
	{
		/* See if we've found a likely compatible interface, and if there is an endpoint within that interface */
		if (!(StillImageInterface) ||
     a50:	38 01       	movw	r6, r16
     a52:	8e 01       	movw	r16, r28
     a54:	0f 5f       	subi	r16, 0xFF	; 255
     a56:	1f 4f       	sbci	r17, 0xFF	; 255
     a58:	04 c0       	rjmp	.+8      	; 0xa62 <ProcessConfigurationDescriptor+0x7c>
	USB_Descriptor_Endpoint_t*  DataINEndpoint      = NULL;
	USB_Descriptor_Endpoint_t*  DataOUTEndpoint     = NULL;
	USB_Descriptor_Endpoint_t*  EventsEndpoint      = NULL;

	/* Retrieve the entire configuration descriptor into the allocated buffer */
	switch (USB_Host_GetDeviceConfigDescriptor(1, &CurrConfigBytesRem, ConfigDescriptorData, sizeof(ConfigDescriptorData)))
     a5a:	83 e0       	ldi	r24, 0x03	; 3
     a5c:	50 c0       	rjmp	.+160    	; 0xafe <ProcessConfigurationDescriptor+0x118>
     a5e:	81 e0       	ldi	r24, 0x01	; 1
     a60:	4e c0       	rjmp	.+156    	; 0xafe <ProcessConfigurationDescriptor+0x118>
	}

	while (!(DataINEndpoint) || !(DataOUTEndpoint))
	{
		/* See if we've found a likely compatible interface, and if there is an endpoint within that interface */
		if (!(StillImageInterface) ||
     a62:	81 14       	cp	r8, r1
     a64:	91 04       	cpc	r9, r1
     a66:	39 f0       	breq	.+14     	; 0xa76 <ProcessConfigurationDescriptor+0x90>
     a68:	c3 01       	movw	r24, r6
     a6a:	b8 01       	movw	r22, r16
     a6c:	40 ee       	ldi	r20, 0xE0	; 224
     a6e:	54 e0       	ldi	r21, 0x04	; 4
     a70:	7a d4       	rcall	.+2292   	; 0x1366 <USB_GetNextDescriptorComp>
     a72:	88 23       	and	r24, r24
     a74:	91 f0       	breq	.+36     	; 0xa9a <ProcessConfigurationDescriptor+0xb4>
		    USB_GetNextDescriptorComp(&CurrConfigBytesRem, &CurrConfigLocation,
		                              DComp_NextStillImageInterfaceDataEndpoint) != DESCRIPTOR_SEARCH_COMP_Found)
		{
			/* Get the next Still Image interface from the configuration descriptor */
			if (USB_GetNextDescriptorComp(&CurrConfigBytesRem, &CurrConfigLocation,
     a76:	c3 01       	movw	r24, r6
     a78:	b8 01       	movw	r22, r16
     a7a:	4f ec       	ldi	r20, 0xCF	; 207
     a7c:	54 e0       	ldi	r21, 0x04	; 4
     a7e:	73 d4       	rcall	.+2278   	; 0x1366 <USB_GetNextDescriptorComp>
     a80:	88 23       	and	r24, r24
     a82:	11 f0       	breq	.+4      	; 0xa88 <ProcessConfigurationDescriptor+0xa2>
     a84:	84 e0       	ldi	r24, 0x04	; 4
     a86:	3b c0       	rjmp	.+118    	; 0xafe <ProcessConfigurationDescriptor+0x118>
				/* Descriptor not found, error out */
				return NoCompatibleInterfaceFound;
			}

			/* Save the interface in case we need to refer back to it later */
			StillImageInterface = DESCRIPTOR_PCAST(CurrConfigLocation, USB_Descriptor_Interface_t);
     a88:	89 80       	ldd	r8, Y+1	; 0x01
     a8a:	9a 80       	ldd	r9, Y+2	; 0x02
     a8c:	aa 24       	eor	r10, r10
     a8e:	bb 24       	eor	r11, r11
     a90:	cc 24       	eor	r12, r12
     a92:	dd 24       	eor	r13, r13
     a94:	ee 24       	eor	r14, r14
     a96:	ff 24       	eor	r15, r15
     a98:	e4 cf       	rjmp	.-56     	; 0xa62 <ProcessConfigurationDescriptor+0x7c>
			/* Skip the remainder of the loop as we have not found an endpoint yet */
			continue;
		}

		/* Retrieve the endpoint address from the endpoint descriptor */
		USB_Descriptor_Endpoint_t* EndpointData = DESCRIPTOR_PCAST(CurrConfigLocation, USB_Descriptor_Endpoint_t);
     a9a:	e9 81       	ldd	r30, Y+1	; 0x01
     a9c:	fa 81       	ldd	r31, Y+2	; 0x02

		/* If the endpoint is a IN type endpoint */
		if (EndpointData->EndpointAddress & ENDPOINT_DESCRIPTOR_DIR_IN)
     a9e:	82 81       	ldd	r24, Z+2	; 0x02
     aa0:	87 fd       	sbrc	r24, 7
     aa2:	02 c0       	rjmp	.+4      	; 0xaa8 <ProcessConfigurationDescriptor+0xc2>
     aa4:	6f 01       	movw	r12, r30
     aa6:	07 c0       	rjmp	.+14     	; 0xab6 <ProcessConfigurationDescriptor+0xd0>
		{
			/* Check if the found endpoint is a interrupt or bulk type descriptor */
			if ((EndpointData->Attributes & EP_TYPE_MASK) == EP_TYPE_INTERRUPT)
     aa8:	83 81       	ldd	r24, Z+3	; 0x03
     aaa:	83 70       	andi	r24, 0x03	; 3
     aac:	83 30       	cpi	r24, 0x03	; 3
     aae:	11 f0       	breq	.+4      	; 0xab4 <ProcessConfigurationDescriptor+0xce>
     ab0:	7f 01       	movw	r14, r30
     ab2:	01 c0       	rjmp	.+2      	; 0xab6 <ProcessConfigurationDescriptor+0xd0>
     ab4:	5f 01       	movw	r10, r30
			return DescriptorTooLarge;
		default:
			return ControlError;
	}

	while (!(DataINEndpoint) || !(DataOUTEndpoint))
     ab6:	e1 14       	cp	r14, r1
     ab8:	f1 04       	cpc	r15, r1
     aba:	99 f2       	breq	.-90     	; 0xa62 <ProcessConfigurationDescriptor+0x7c>
     abc:	c1 14       	cp	r12, r1
     abe:	d1 04       	cpc	r13, r1
     ac0:	81 f2       	breq	.-96     	; 0xa62 <ProcessConfigurationDescriptor+0x7c>
			DataOUTEndpoint = EndpointData;
		}
	}

	/* Configure the Still Image data IN pipe */
	Pipe_ConfigurePipe(SIMAGE_DATA_IN_PIPE, EP_TYPE_BULK, PIPE_TOKEN_IN,
     ac2:	f7 01       	movw	r30, r14
     ac4:	04 81       	ldd	r16, Z+4	; 0x04
     ac6:	15 81       	ldd	r17, Z+5	; 0x05
     ac8:	81 e0       	ldi	r24, 0x01	; 1
     aca:	62 e0       	ldi	r22, 0x02	; 2
     acc:	40 e1       	ldi	r20, 0x10	; 16
     ace:	22 81       	ldd	r18, Z+2	; 0x02
     ad0:	ee 24       	eor	r14, r14
     ad2:	c3 d2       	rcall	.+1414   	; 0x105a <Pipe_ConfigurePipe>
	                   DataINEndpoint->EndpointAddress, DataINEndpoint->EndpointSize, PIPE_BANK_SINGLE);

	/* Configure the Still Image data OUT pipe */
	Pipe_ConfigurePipe(SIMAGE_DATA_OUT_PIPE, EP_TYPE_BULK, PIPE_TOKEN_OUT,
     ad4:	f6 01       	movw	r30, r12
     ad6:	04 81       	ldd	r16, Z+4	; 0x04
     ad8:	15 81       	ldd	r17, Z+5	; 0x05
     ada:	82 e0       	ldi	r24, 0x02	; 2
     adc:	62 e0       	ldi	r22, 0x02	; 2
     ade:	40 e2       	ldi	r20, 0x20	; 32
     ae0:	22 81       	ldd	r18, Z+2	; 0x02
     ae2:	bb d2       	rcall	.+1398   	; 0x105a <Pipe_ConfigurePipe>
					   DataOUTEndpoint->EndpointAddress, DataOUTEndpoint->EndpointSize, PIPE_BANK_SINGLE);

	/* Configure the Still Image events pipe */
	Pipe_ConfigurePipe(SIMAGE_EVENTS_PIPE, EP_TYPE_INTERRUPT, PIPE_TOKEN_IN,
     ae4:	f5 01       	movw	r30, r10
     ae6:	04 81       	ldd	r16, Z+4	; 0x04
     ae8:	15 81       	ldd	r17, Z+5	; 0x05
     aea:	83 e0       	ldi	r24, 0x03	; 3
     aec:	63 e0       	ldi	r22, 0x03	; 3
     aee:	40 e1       	ldi	r20, 0x10	; 16
     af0:	22 81       	ldd	r18, Z+2	; 0x02
     af2:	b3 d2       	rcall	.+1382   	; 0x105a <Pipe_ConfigurePipe>
					   EventsEndpoint->EndpointAddress, EventsEndpoint->EndpointSize, PIPE_BANK_SINGLE);
	Pipe_SetInterruptPeriod(EventsEndpoint->PollingIntervalMS);
     af4:	f5 01       	movw	r30, r10
     af6:	86 81       	ldd	r24, Z+6	; 0x06
			 *  \param[in] Milliseconds  Number of milliseconds between each pipe poll.
			 */
			static inline void Pipe_SetInterruptPeriod(const uint8_t Milliseconds) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetInterruptPeriod(const uint8_t Milliseconds)
			{
				UPCFG2X = Milliseconds;
     af8:	80 93 ad 00 	sts	0x00AD, r24
     afc:	80 e0       	ldi	r24, 0x00	; 0

	/* Valid data found, return success */
	return SuccessfulConfigRead;
}
     afe:	cc 5f       	subi	r28, 0xFC	; 252
     b00:	dd 4f       	sbci	r29, 0xFD	; 253
     b02:	0f b6       	in	r0, 0x3f	; 63
     b04:	f8 94       	cli
     b06:	de bf       	out	0x3e, r29	; 62
     b08:	0f be       	out	0x3f, r0	; 63
     b0a:	cd bf       	out	0x3d, r28	; 61
     b0c:	cf 91       	pop	r28
     b0e:	df 91       	pop	r29
     b10:	1f 91       	pop	r17
     b12:	0f 91       	pop	r16
     b14:	ff 90       	pop	r15
     b16:	ef 90       	pop	r14
     b18:	df 90       	pop	r13
     b1a:	cf 90       	pop	r12
     b1c:	bf 90       	pop	r11
     b1e:	af 90       	pop	r10
     b20:	9f 90       	pop	r9
     b22:	8f 90       	pop	r8
     b24:	7f 90       	pop	r7
     b26:	6f 90       	pop	r6
     b28:	08 95       	ret

00000b2a <SImage_ReadData>:
 *
 *  \return A value from the Pipe_Stream_RW_ErrorCodes_t enum
 */
uint8_t SImage_ReadData(void* const Buffer,
                        const uint16_t Bytes)
{
     b2a:	0f 93       	push	r16
     b2c:	1f 93       	push	r17
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
     b2e:	21 e0       	ldi	r18, 0x01	; 1
     b30:	20 93 a7 00 	sts	0x00A7, r18

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
     b34:	09 ea       	ldi	r16, 0xA9	; 169
     b36:	10 e0       	ldi	r17, 0x00	; 0
     b38:	f8 01       	movw	r30, r16
     b3a:	20 81       	ld	r18, Z
     b3c:	2f 7b       	andi	r18, 0xBF	; 191
     b3e:	20 83       	st	Z, r18
	/* Unfreeze the data IN pipe */
	Pipe_SelectPipe(SIMAGE_DATA_IN_PIPE);
	Pipe_Unfreeze();

	/* Read in the data into the buffer */
	ErrorCode = Pipe_Read_Stream_LE(Buffer, Bytes);
     b40:	d9 d5       	rcall	.+2994   	; 0x16f4 <Pipe_Read_Stream_LE>

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
     b42:	f8 01       	movw	r30, r16
     b44:	90 81       	ld	r25, Z
     b46:	90 64       	ori	r25, 0x40	; 64
     b48:	90 83       	st	Z, r25

	/* Freeze the pipe again after use */
	Pipe_Freeze();

	return ErrorCode;
}
     b4a:	1f 91       	pop	r17
     b4c:	0f 91       	pop	r16
     b4e:	08 95       	ret

00000b50 <SImage_SendBlockHeader>:
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
     b50:	82 e0       	ldi	r24, 0x02	; 2
     b52:	80 93 a7 00 	sts	0x00A7, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
     b56:	80 91 a9 00 	lds	r24, 0x00A9
     b5a:	8f 7b       	andi	r24, 0xBF	; 191
     b5c:	80 93 a9 00 	sts	0x00A9, r24
	/* Unfreeze the data OUT pipe ready for data transmission */
	Pipe_SelectPipe(SIMAGE_DATA_OUT_PIPE);
	Pipe_Unfreeze();

	/* Write the PIMA block to the data OUT pipe */
	Pipe_Write_Stream_LE(&PIMA_SendBlock, PIMA_COMMAND_SIZE(0));
     b60:	83 e4       	ldi	r24, 0x43	; 67
     b62:	91 e0       	ldi	r25, 0x01	; 1
     b64:	6c e0       	ldi	r22, 0x0C	; 12
     b66:	70 e0       	ldi	r23, 0x00	; 0
     b68:	f8 d5       	rcall	.+3056   	; 0x175a <Pipe_Write_Stream_LE>

	/* If the block type is a command, send its parameters (if any) */
	if (PIMA_SendBlock.Type == PIMA_CONTAINER_CommandBlock)
     b6a:	80 91 47 01 	lds	r24, 0x0147
     b6e:	90 91 48 01 	lds	r25, 0x0148
     b72:	01 97       	sbiw	r24, 0x01	; 1
     b74:	69 f4       	brne	.+26     	; 0xb90 <SImage_SendBlockHeader+0x40>
	{
		/* Determine the size of the parameters in the block via the data length attribute */
		uint8_t ParamBytes = (PIMA_SendBlock.DataLength - PIMA_COMMAND_SIZE(0));
     b76:	60 91 43 01 	lds	r22, 0x0143
     b7a:	6c 50       	subi	r22, 0x0C	; 12

		/* Check if any parameters in the command block */
		if (ParamBytes)
     b7c:	21 f0       	breq	.+8      	; 0xb86 <SImage_SendBlockHeader+0x36>
		{
			/* Write the PIMA parameters to the data OUT pipe */
			Pipe_Write_Stream_LE(&PIMA_SendBlock.Params, ParamBytes);
     b7e:	8f e4       	ldi	r24, 0x4F	; 79
     b80:	91 e0       	ldi	r25, 0x01	; 1
     b82:	70 e0       	ldi	r23, 0x00	; 0
     b84:	ea d5       	rcall	.+3028   	; 0x175a <Pipe_Write_Stream_LE>
			 *  \ingroup Group_PipePacketManagement
			 */
			static inline void Pipe_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearOUT(void)
			{
				UPINTX &= ~((1 << TXOUTI) | (1 << FIFOCON));
     b86:	80 91 a6 00 	lds	r24, 0x00A6
     b8a:	8b 77       	andi	r24, 0x7B	; 123
     b8c:	80 93 a6 00 	sts	0x00A6, r24

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
     b90:	80 91 a9 00 	lds	r24, 0x00A9
     b94:	80 64       	ori	r24, 0x40	; 64
     b96:	80 93 a9 00 	sts	0x00A9, r24
		Pipe_ClearOUT();
	}

	/* Freeze pipe after use */
	Pipe_Freeze();
}
     b9a:	08 95       	ret

00000b9c <SImage_ReceiveBlockHeader>:
			/** Returns the current USB frame number, when in host mode. Every millisecond the USB bus is active (i.e. not suspended)
			 *  the frame number is incremented by one.
			 */
			static inline uint16_t USB_Host_GetFrameNumber(void)
			{
				return UHFNUM;
     b9c:	40 91 a2 00 	lds	r20, 0x00A2
     ba0:	50 91 a3 00 	lds	r21, 0x00A3
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
     ba4:	81 e0       	ldi	r24, 0x01	; 1
     ba6:	80 93 a7 00 	sts	0x00A7, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
     baa:	80 91 a9 00 	lds	r24, 0x00A9
     bae:	8f 7b       	andi	r24, 0xBF	; 191
     bb0:	80 93 a9 00 	sts	0x00A9, r24
     bb4:	20 e1       	ldi	r18, 0x10	; 16
     bb6:	37 e2       	ldi	r19, 0x27	; 39
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
     bb8:	72 e0       	ldi	r23, 0x02	; 2
     bba:	61 e0       	ldi	r22, 0x01	; 1
     bbc:	37 c0       	rjmp	.+110    	; 0xc2c <SImage_ReceiveBlockHeader+0x90>
     bbe:	80 91 a2 00 	lds	r24, 0x00A2
     bc2:	90 91 a3 00 	lds	r25, 0x00A3
	while (!(Pipe_IsINReceived()))
	{
		uint16_t CurrentFrameNumber = USB_Host_GetFrameNumber();

		/* Check to see if a new frame has been issued (1ms elapsed) */
		if (CurrentFrameNumber != PreviousFrameNumber)
     bc6:	84 17       	cp	r24, r20
     bc8:	95 07       	cpc	r25, r21
     bca:	31 f0       	breq	.+12     	; 0xbd8 <SImage_ReceiveBlockHeader+0x3c>
		{
			/* Save the new frame number and decrement the timeout period */
			PreviousFrameNumber = CurrentFrameNumber;
			TimeoutMSRem--;
     bcc:	21 50       	subi	r18, 0x01	; 1
     bce:	30 40       	sbci	r19, 0x00	; 0

			/* Check to see if the timeout period for the command has elapsed */
			if (!(TimeoutMSRem))
     bd0:	11 f4       	brne	.+4      	; 0xbd6 <SImage_ReceiveBlockHeader+0x3a>
     bd2:	83 e0       	ldi	r24, 0x03	; 3
     bd4:	08 95       	ret
     bd6:	ac 01       	movw	r20, r24

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
     bd8:	80 91 a9 00 	lds	r24, 0x00A9
     bdc:	80 64       	ori	r24, 0x40	; 64
     bde:	80 93 a9 00 	sts	0x00A9, r24
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
     be2:	70 93 a7 00 	sts	0x00A7, r23

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
     be6:	80 91 a9 00 	lds	r24, 0x00A9
     bea:	8f 7b       	andi	r24, 0xBF	; 191
     bec:	80 93 a9 00 	sts	0x00A9, r24
			 *  \return Boolean true if the current pipe has been stalled by the attached device, false otherwise.
			 */
			static inline bool Pipe_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsStalled(void)
			{
				return ((UPINTX & (1 << RXSTALLI)) ? true : false);
     bf0:	80 91 a6 00 	lds	r24, 0x00A6
		Pipe_Freeze();
		Pipe_SelectPipe(SIMAGE_DATA_OUT_PIPE);
		Pipe_Unfreeze();

		/* Check if pipe stalled (command failed by device) */
		if (Pipe_IsStalled())
     bf4:	81 ff       	sbrs	r24, 1
     bf6:	02 c0       	rjmp	.+4      	; 0xbfc <SImage_ReceiveBlockHeader+0x60>
		{
			/* Clear the stall condition on the OUT pipe */
			USB_Host_ClearPipeStall(SIMAGE_DATA_OUT_PIPE);
     bf8:	82 e0       	ldi	r24, 0x02	; 2
     bfa:	11 c0       	rjmp	.+34     	; 0xc1e <SImage_ReceiveBlockHeader+0x82>

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
     bfc:	80 91 a9 00 	lds	r24, 0x00A9
     c00:	80 64       	ori	r24, 0x40	; 64
     c02:	80 93 a9 00 	sts	0x00A9, r24
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
     c06:	60 93 a7 00 	sts	0x00A7, r22

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
     c0a:	80 91 a9 00 	lds	r24, 0x00A9
     c0e:	8f 7b       	andi	r24, 0xBF	; 191
     c10:	80 93 a9 00 	sts	0x00A9, r24
			 *  \return Boolean true if the current pipe has been stalled by the attached device, false otherwise.
			 */
			static inline bool Pipe_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsStalled(void)
			{
				return ((UPINTX & (1 << RXSTALLI)) ? true : false);
     c14:	80 91 a6 00 	lds	r24, 0x00A6
		Pipe_Freeze();
		Pipe_SelectPipe(SIMAGE_DATA_IN_PIPE);
		Pipe_Unfreeze();

		/* Check if pipe stalled (command failed by device) */
		if (Pipe_IsStalled())
     c18:	81 ff       	sbrs	r24, 1
     c1a:	04 c0       	rjmp	.+8      	; 0xc24 <SImage_ReceiveBlockHeader+0x88>
		{
			/* Clear the stall condition on the IN pipe */
			USB_Host_ClearPipeStall(SIMAGE_DATA_IN_PIPE);
     c1c:	81 e0       	ldi	r24, 0x01	; 1
     c1e:	c2 d0       	rcall	.+388    	; 0xda4 <USB_Host_ClearPipeStall>
     c20:	81 e0       	ldi	r24, 0x01	; 1
     c22:	08 95       	ret
			/* Return error code */
			return PIPE_RWSTREAM_PipeStalled;
		}

		/* Check to see if the device was disconnected, if so exit function */
		if (USB_HostState == HOST_STATE_Unattached)
     c24:	80 91 7c 01 	lds	r24, 0x017C
     c28:	82 30       	cpi	r24, 0x02	; 2
     c2a:	11 f1       	breq	.+68     	; 0xc70 <SImage_ReceiveBlockHeader+0xd4>
			 *  \return Boolean true if the current pipe has received an IN packet, false otherwise.
			 */
			static inline bool Pipe_IsINReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsINReceived(void)
			{
				return ((UPINTX & (1 << RXINI)) ? true : false);
     c2c:	80 91 a6 00 	lds	r24, 0x00A6
	/* Unfreeze the data IN pipe */
	Pipe_SelectPipe(SIMAGE_DATA_IN_PIPE);
	Pipe_Unfreeze();

	/* Wait until data received on the IN pipe */
	while (!(Pipe_IsINReceived()))
     c30:	80 ff       	sbrs	r24, 0
     c32:	c5 cf       	rjmp	.-118    	; 0xbbe <SImage_ReceiveBlockHeader+0x22>
		if (USB_HostState == HOST_STATE_Unattached)
		  return PIPE_RWSTREAM_DeviceDisconnected;
	}

	/* Load in the response from the attached device */
	Pipe_Read_Stream_LE(&PIMA_ReceivedBlock, PIMA_COMMAND_SIZE(0));
     c34:	8b e5       	ldi	r24, 0x5B	; 91
     c36:	91 e0       	ldi	r25, 0x01	; 1
     c38:	6c e0       	ldi	r22, 0x0C	; 12
     c3a:	70 e0       	ldi	r23, 0x00	; 0
     c3c:	5b d5       	rcall	.+2742   	; 0x16f4 <Pipe_Read_Stream_LE>

	/* Check if the returned block type is a response block */
	if (PIMA_ReceivedBlock.Type == PIMA_CONTAINER_ResponseBlock)
     c3e:	80 91 5f 01 	lds	r24, 0x015F
     c42:	90 91 60 01 	lds	r25, 0x0160
     c46:	03 97       	sbiw	r24, 0x03	; 3
     c48:	69 f4       	brne	.+26     	; 0xc64 <SImage_ReceiveBlockHeader+0xc8>
	{
		/* Determine the size of the parameters in the block via the data length attribute */
		uint8_t ParamBytes = (PIMA_ReceivedBlock.DataLength - PIMA_COMMAND_SIZE(0));
     c4a:	60 91 5b 01 	lds	r22, 0x015B
     c4e:	6c 50       	subi	r22, 0x0C	; 12

		/* Check if the device has returned any parameters */
		if (ParamBytes)
     c50:	21 f0       	breq	.+8      	; 0xc5a <SImage_ReceiveBlockHeader+0xbe>
		{
			/* Read the PIMA parameters from the data IN pipe */
			Pipe_Read_Stream_LE(&PIMA_ReceivedBlock.Params, ParamBytes);
     c52:	87 e6       	ldi	r24, 0x67	; 103
     c54:	91 e0       	ldi	r25, 0x01	; 1
     c56:	70 e0       	ldi	r23, 0x00	; 0
     c58:	4d d5       	rcall	.+2714   	; 0x16f4 <Pipe_Read_Stream_LE>
			 *  \ingroup Group_PipePacketManagement
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
     c5a:	80 91 a6 00 	lds	r24, 0x00A6
     c5e:	8e 77       	andi	r24, 0x7E	; 126
     c60:	80 93 a6 00 	sts	0x00A6, r24

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
     c64:	80 91 a9 00 	lds	r24, 0x00A9
     c68:	80 64       	ori	r24, 0x40	; 64
     c6a:	80 93 a9 00 	sts	0x00A9, r24
     c6e:	80 e0       	ldi	r24, 0x00	; 0

	/* Freeze the IN pipe after use */
	Pipe_Freeze();

	return PIPE_RWSTREAM_NoError;
}
     c70:	08 95       	ret

00000c72 <USB_Host_WaitMS>:
		USB_ResetInterface();
	}
}

uint8_t USB_Host_WaitMS(uint8_t MS)
{
     c72:	98 2f       	mov	r25, r24
			 *  \return Boolean true if the bus is currently suspended, false otherwise.
			 */
			static inline bool USB_Host_IsBusSuspended(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusSuspended(void)
			{
				return ((UHCON & (1 << SOFEN)) ? false : true);
     c74:	20 91 9e 00 	lds	r18, 0x009E
	bool    BusSuspended = USB_Host_IsBusSuspended();
	uint8_t ErrorCode    = HOST_WAITERROR_Successful;
	bool    HSOFIEnabled = USB_INT_IsEnabled(USB_INT_HSOFI);
     c78:	30 91 a0 00 	lds	r19, 0x00A0

	USB_INT_Disable(USB_INT_HSOFI);
     c7c:	80 91 a0 00 	lds	r24, 0x00A0
     c80:	8f 7d       	andi	r24, 0xDF	; 223
     c82:	80 93 a0 00 	sts	0x00A0, r24
	USB_INT_Clear(USB_INT_HSOFI);
     c86:	80 91 9f 00 	lds	r24, 0x009F
     c8a:	8f 7d       	andi	r24, 0xDF	; 223
     c8c:	80 93 9f 00 	sts	0x009F, r24
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
     c90:	80 91 9e 00 	lds	r24, 0x009E
     c94:	81 60       	ori	r24, 0x01	; 1
     c96:	80 93 9e 00 	sts	0x009E, r24
     c9a:	26 c0       	rjmp	.+76     	; 0xce8 <USB_Host_WaitMS+0x76>

	USB_Host_ResumeBus();

	while (MS)
	{
		if (USB_INT_HasOccurred(USB_INT_HSOFI))
     c9c:	80 91 9f 00 	lds	r24, 0x009F
     ca0:	85 ff       	sbrs	r24, 5
     ca2:	06 c0       	rjmp	.+12     	; 0xcb0 <USB_Host_WaitMS+0x3e>
		{
			USB_INT_Clear(USB_INT_HSOFI);
     ca4:	80 91 9f 00 	lds	r24, 0x009F
     ca8:	8f 7d       	andi	r24, 0xDF	; 223
     caa:	80 93 9f 00 	sts	0x009F, r24
			MS--;
     cae:	91 50       	subi	r25, 0x01	; 1
		}

		if ((USB_HostState == HOST_STATE_Unattached) || (USB_CurrentMode != USB_MODE_Host))
     cb0:	80 91 7c 01 	lds	r24, 0x017C
     cb4:	82 30       	cpi	r24, 0x02	; 2
     cb6:	11 f4       	brne	.+4      	; 0xcbc <USB_Host_WaitMS+0x4a>
     cb8:	91 e0       	ldi	r25, 0x01	; 1
     cba:	18 c0       	rjmp	.+48     	; 0xcec <USB_Host_WaitMS+0x7a>
			 *  \return Boolean true if an error has occurred on the selected pipe, false otherwise.
			 */
			static inline bool Pipe_IsError(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsError(void)
			{
				return ((UPINTX & (1 << PERRI)) ? true : false);
     cbc:	80 91 a6 00 	lds	r24, 0x00A6
			ErrorCode = HOST_WAITERROR_DeviceDisconnect;

			break;
		}

		if (Pipe_IsError() == true)
     cc0:	84 ff       	sbrs	r24, 4
     cc2:	07 c0       	rjmp	.+14     	; 0xcd2 <USB_Host_WaitMS+0x60>

			/** Clears the master pipe error flag. */
			static inline void Pipe_ClearError(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearError(void)
			{
				UPINTX &= ~(1 << PERRI);
     cc4:	80 91 a6 00 	lds	r24, 0x00A6
     cc8:	8f 7e       	andi	r24, 0xEF	; 239
     cca:	80 93 a6 00 	sts	0x00A6, r24
     cce:	92 e0       	ldi	r25, 0x02	; 2
     cd0:	0d c0       	rjmp	.+26     	; 0xcec <USB_Host_WaitMS+0x7a>
			 *  \return Boolean true if the current pipe has been stalled by the attached device, false otherwise.
			 */
			static inline bool Pipe_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsStalled(void)
			{
				return ((UPINTX & (1 << RXSTALLI)) ? true : false);
     cd2:	80 91 a6 00 	lds	r24, 0x00A6
			ErrorCode = HOST_WAITERROR_PipeError;

			break;
		}

		if (Pipe_IsStalled() == true)
     cd6:	81 ff       	sbrs	r24, 1
     cd8:	07 c0       	rjmp	.+14     	; 0xce8 <USB_Host_WaitMS+0x76>
			 *  \ingroup Group_PipePacketManagement
			 */
			static inline void Pipe_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearStall(void)
			{
				UPINTX &= ~(1 << RXSTALLI);
     cda:	80 91 a6 00 	lds	r24, 0x00A6
     cde:	8d 7f       	andi	r24, 0xFD	; 253
     ce0:	80 93 a6 00 	sts	0x00A6, r24
     ce4:	93 e0       	ldi	r25, 0x03	; 3
     ce6:	02 c0       	rjmp	.+4      	; 0xcec <USB_Host_WaitMS+0x7a>
	USB_INT_Disable(USB_INT_HSOFI);
	USB_INT_Clear(USB_INT_HSOFI);

	USB_Host_ResumeBus();

	while (MS)
     ce8:	99 23       	and	r25, r25
     cea:	c1 f6       	brne	.-80     	; 0xc9c <USB_Host_WaitMS+0x2a>

			break;
		}
	}

	if (BusSuspended)
     cec:	20 fd       	sbrc	r18, 0
     cee:	05 c0       	rjmp	.+10     	; 0xcfa <USB_Host_WaitMS+0x88>
			 *  messages to the device.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				UHCON &= ~(1 << SOFEN);
     cf0:	80 91 9e 00 	lds	r24, 0x009E
     cf4:	8e 7f       	andi	r24, 0xFE	; 254
     cf6:	80 93 9e 00 	sts	0x009E, r24
	  USB_Host_SuspendBus();

	if (HSOFIEnabled)
     cfa:	35 ff       	sbrs	r19, 5
     cfc:	05 c0       	rjmp	.+10     	; 0xd08 <USB_Host_WaitMS+0x96>
	  USB_INT_Enable(USB_INT_HSOFI);
     cfe:	80 91 a0 00 	lds	r24, 0x00A0
     d02:	80 62       	ori	r24, 0x20	; 32
     d04:	80 93 a0 00 	sts	0x00A0, r24

	return ErrorCode;
}
     d08:	89 2f       	mov	r24, r25
     d0a:	08 95       	ret

00000d0c <USB_Host_ResetDevice>:
			 *  \return Boolean true if the bus is currently suspended, false otherwise.
			 */
			static inline bool USB_Host_IsBusSuspended(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusSuspended(void)
			{
				return ((UHCON & (1 << SOFEN)) ? false : true);
     d0c:	60 91 9e 00 	lds	r22, 0x009E

static void USB_Host_ResetDevice(void)
{
	bool BusSuspended = USB_Host_IsBusSuspended();

	USB_INT_Disable(USB_INT_DDISCI);
     d10:	80 91 a0 00 	lds	r24, 0x00A0
     d14:	8d 7f       	andi	r24, 0xFD	; 253
     d16:	80 93 a0 00 	sts	0x00A0, r24
			 *  woken up automatically and the bus resumed after the reset has been correctly issued.
			 */
			static inline void USB_Host_ResetBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResetBus(void)
			{
				UHCON |=  (1 << RESET);
     d1a:	80 91 9e 00 	lds	r24, 0x009E
     d1e:	82 60       	ori	r24, 0x02	; 2
     d20:	80 93 9e 00 	sts	0x009E, r24
			 *  \return Boolean true if no bus reset is currently being sent, false otherwise.
			 */
			static inline bool USB_Host_IsBusResetComplete(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusResetComplete(void)
			{
				return ((UHCON & (1 << RESET)) ? false : true);
     d24:	80 91 9e 00 	lds	r24, 0x009E

	USB_Host_ResetBus();
	while (!(USB_Host_IsBusResetComplete()));
     d28:	81 fd       	sbrc	r24, 1
     d2a:	fc cf       	rjmp	.-8      	; 0xd24 <USB_Host_ResetDevice+0x18>
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
     d2c:	80 91 9e 00 	lds	r24, 0x009E
     d30:	81 60       	ori	r24, 0x01	; 1
     d32:	80 93 9e 00 	sts	0x009E, r24
	USB_Host_ResumeBus();

	bool HSOFIEnabled = USB_INT_IsEnabled(USB_INT_HSOFI);
     d36:	30 91 a0 00 	lds	r19, 0x00A0

	USB_INT_Disable(USB_INT_HSOFI);
     d3a:	80 91 a0 00 	lds	r24, 0x00A0
     d3e:	8f 7d       	andi	r24, 0xDF	; 223
     d40:	80 93 a0 00 	sts	0x00A0, r24
	USB_INT_Clear(USB_INT_HSOFI);
     d44:	80 91 9f 00 	lds	r24, 0x009F
     d48:	8f 7d       	andi	r24, 0xDF	; 223
     d4a:	80 93 9f 00 	sts	0x009F, r24
     d4e:	2a e0       	ldi	r18, 0x0A	; 10
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     d50:	40 ed       	ldi	r20, 0xD0	; 208
     d52:	57 e0       	ldi	r21, 0x07	; 7
		/* Workaround for powerless-pull-up devices. After a USB bus reset,
		   all disconnection interrupts are suppressed while a USB frame is
		   looked for - if it is found within 10ms, the device is still
		   present.                                                        */

		if (USB_INT_HasOccurred(USB_INT_HSOFI))
     d54:	80 91 9f 00 	lds	r24, 0x009F
     d58:	85 ff       	sbrs	r24, 5
     d5a:	0b c0       	rjmp	.+22     	; 0xd72 <USB_Host_ResetDevice+0x66>
		{
			USB_INT_Clear(USB_INT_HSOFI);
     d5c:	80 91 9f 00 	lds	r24, 0x009F
     d60:	8f 7d       	andi	r24, 0xDF	; 223
     d62:	80 93 9f 00 	sts	0x009F, r24
			USB_INT_Clear(USB_INT_DDISCI);
     d66:	80 91 9f 00 	lds	r24, 0x009F
     d6a:	8d 7f       	andi	r24, 0xFD	; 253
     d6c:	80 93 9f 00 	sts	0x009F, r24
     d70:	05 c0       	rjmp	.+10     	; 0xd7c <USB_Host_ResetDevice+0x70>
     d72:	ca 01       	movw	r24, r20
     d74:	01 97       	sbiw	r24, 0x01	; 1
     d76:	f1 f7       	brne	.-4      	; 0xd74 <USB_Host_ResetDevice+0x68>
	bool HSOFIEnabled = USB_INT_IsEnabled(USB_INT_HSOFI);

	USB_INT_Disable(USB_INT_HSOFI);
	USB_INT_Clear(USB_INT_HSOFI);

	for (uint8_t MSRem = 10; MSRem != 0; MSRem--)
     d78:	21 50       	subi	r18, 0x01	; 1
     d7a:	61 f7       	brne	.-40     	; 0xd54 <USB_Host_ResetDevice+0x48>
		}

		_delay_ms(1);
	}

	if (HSOFIEnabled)
     d7c:	35 ff       	sbrs	r19, 5
     d7e:	05 c0       	rjmp	.+10     	; 0xd8a <USB_Host_ResetDevice+0x7e>
	  USB_INT_Enable(USB_INT_HSOFI);
     d80:	80 91 a0 00 	lds	r24, 0x00A0
     d84:	80 62       	ori	r24, 0x20	; 32
     d86:	80 93 a0 00 	sts	0x00A0, r24

	if (BusSuspended)
     d8a:	60 fd       	sbrc	r22, 0
     d8c:	05 c0       	rjmp	.+10     	; 0xd98 <USB_Host_ResetDevice+0x8c>
			 *  messages to the device.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				UHCON &= ~(1 << SOFEN);
     d8e:	80 91 9e 00 	lds	r24, 0x009E
     d92:	8e 7f       	andi	r24, 0xFE	; 254
     d94:	80 93 9e 00 	sts	0x009E, r24
	  USB_Host_SuspendBus();

	USB_INT_Enable(USB_INT_DDISCI);
     d98:	80 91 a0 00 	lds	r24, 0x00A0
     d9c:	82 60       	ori	r24, 0x02	; 2
     d9e:	80 93 a0 00 	sts	0x00A0, r24
}
     da2:	08 95       	ret

00000da4 <USB_Host_ClearPipeStall>:
	return USB_Host_SendControlRequest(Buffer);
}

uint8_t USB_Host_ClearPipeStall(const uint8_t EndpointNum)
{
	USB_ControlRequest = (USB_Request_Header_t)
     da4:	92 e0       	ldi	r25, 0x02	; 2
     da6:	90 93 74 01 	sts	0x0174, r25
     daa:	91 e0       	ldi	r25, 0x01	; 1
     dac:	90 93 75 01 	sts	0x0175, r25
     db0:	10 92 77 01 	sts	0x0177, r1
     db4:	10 92 76 01 	sts	0x0176, r1
     db8:	80 93 78 01 	sts	0x0178, r24
     dbc:	10 92 79 01 	sts	0x0179, r1
     dc0:	10 92 7b 01 	sts	0x017B, r1
     dc4:	10 92 7a 01 	sts	0x017A, r1
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
     dc8:	10 92 a7 00 	sts	0x00A7, r1
			.wLength       = 0,
		};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	return USB_Host_SendControlRequest(NULL);
     dcc:	80 e0       	ldi	r24, 0x00	; 0
     dce:	90 e0       	ldi	r25, 0x00	; 0
}
     dd0:	8f c3       	rjmp	.+1822   	; 0x14f0 <USB_Host_SendControlRequest>

00000dd2 <USB_Host_SetDeviceConfiguration>:
	USB_INT_Enable(USB_INT_DDISCI);
}

uint8_t USB_Host_SetDeviceConfiguration(const uint8_t ConfigNumber)
{
	USB_ControlRequest = (USB_Request_Header_t)
     dd2:	10 92 74 01 	sts	0x0174, r1
     dd6:	99 e0       	ldi	r25, 0x09	; 9
     dd8:	90 93 75 01 	sts	0x0175, r25
     ddc:	80 93 76 01 	sts	0x0176, r24
     de0:	10 92 77 01 	sts	0x0177, r1
     de4:	10 92 79 01 	sts	0x0179, r1
     de8:	10 92 78 01 	sts	0x0178, r1
     dec:	10 92 7b 01 	sts	0x017B, r1
     df0:	10 92 7a 01 	sts	0x017A, r1
     df4:	10 92 a7 00 	sts	0x00A7, r1
			.wLength       = 0,
		};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	return USB_Host_SendControlRequest(NULL);
     df8:	80 e0       	ldi	r24, 0x00	; 0
     dfa:	90 e0       	ldi	r25, 0x00	; 0
}
     dfc:	79 c3       	rjmp	.+1778   	; 0x14f0 <USB_Host_SendControlRequest>

00000dfe <USB_Host_ProcessNextHostState>:

#define  __INCLUDE_FROM_HOST_C
#include "Host.h"

void USB_Host_ProcessNextHostState(void)
{
     dfe:	ef 92       	push	r14
     e00:	0f 93       	push	r16
     e02:	1f 93       	push	r17
     e04:	df 93       	push	r29
     e06:	cf 93       	push	r28
     e08:	cd b7       	in	r28, 0x3d	; 61
     e0a:	de b7       	in	r29, 0x3e	; 62
     e0c:	28 97       	sbiw	r28, 0x08	; 8
     e0e:	0f b6       	in	r0, 0x3f	; 63
     e10:	f8 94       	cli
     e12:	de bf       	out	0x3e, r29	; 62
     e14:	0f be       	out	0x3f, r0	; 63
     e16:	cd bf       	out	0x3d, r28	; 61
	uint8_t SubErrorCode = HOST_ENUMERROR_NoError;

	static uint16_t WaitMSRemaining;
	static uint8_t  PostWaitState;

	switch (USB_HostState)
     e18:	80 91 7c 01 	lds	r24, 0x017C
     e1c:	86 30       	cpi	r24, 0x06	; 6
     e1e:	09 f4       	brne	.+2      	; 0xe22 <USB_Host_ProcessNextHostState+0x24>
     e20:	94 c0       	rjmp	.+296    	; 0xf4a <USB_Host_ProcessNextHostState+0x14c>
     e22:	87 30       	cpi	r24, 0x07	; 7
     e24:	70 f4       	brcc	.+28     	; 0xe42 <USB_Host_ProcessNextHostState+0x44>
     e26:	83 30       	cpi	r24, 0x03	; 3
     e28:	c1 f1       	breq	.+112    	; 0xe9a <USB_Host_ProcessNextHostState+0x9c>
     e2a:	84 30       	cpi	r24, 0x04	; 4
     e2c:	20 f4       	brcc	.+8      	; 0xe36 <USB_Host_ProcessNextHostState+0x38>
     e2e:	81 30       	cpi	r24, 0x01	; 1
     e30:	09 f0       	breq	.+2      	; 0xe34 <USB_Host_ProcessNextHostState+0x36>
     e32:	07 c1       	rjmp	.+526    	; 0x1042 <USB_Host_ProcessNextHostState+0x244>
     e34:	13 c0       	rjmp	.+38     	; 0xe5c <USB_Host_ProcessNextHostState+0x5e>
     e36:	84 30       	cpi	r24, 0x04	; 4
     e38:	c1 f1       	breq	.+112    	; 0xeaa <USB_Host_ProcessNextHostState+0xac>
     e3a:	85 30       	cpi	r24, 0x05	; 5
     e3c:	09 f0       	breq	.+2      	; 0xe40 <USB_Host_ProcessNextHostState+0x42>
     e3e:	01 c1       	rjmp	.+514    	; 0x1042 <USB_Host_ProcessNextHostState+0x244>
     e40:	5b c0       	rjmp	.+182    	; 0xef8 <USB_Host_ProcessNextHostState+0xfa>
     e42:	88 30       	cpi	r24, 0x08	; 8
     e44:	09 f4       	brne	.+2      	; 0xe48 <USB_Host_ProcessNextHostState+0x4a>
     e46:	9b c0       	rjmp	.+310    	; 0xf7e <USB_Host_ProcessNextHostState+0x180>
     e48:	88 30       	cpi	r24, 0x08	; 8
     e4a:	08 f4       	brcc	.+2      	; 0xe4e <USB_Host_ProcessNextHostState+0x50>
     e4c:	8a c0       	rjmp	.+276    	; 0xf62 <USB_Host_ProcessNextHostState+0x164>
     e4e:	89 30       	cpi	r24, 0x09	; 9
     e50:	09 f4       	brne	.+2      	; 0xe54 <USB_Host_ProcessNextHostState+0x56>
     e52:	b4 c0       	rjmp	.+360    	; 0xfbc <USB_Host_ProcessNextHostState+0x1be>
     e54:	8a 30       	cpi	r24, 0x0A	; 10
     e56:	09 f0       	breq	.+2      	; 0xe5a <USB_Host_ProcessNextHostState+0x5c>
     e58:	f4 c0       	rjmp	.+488    	; 0x1042 <USB_Host_ProcessNextHostState+0x244>
     e5a:	d9 c0       	rjmp	.+434    	; 0x100e <USB_Host_ProcessNextHostState+0x210>
	{
		case HOST_STATE_WaitForDevice:
			if (WaitMSRemaining)
     e5c:	00 91 29 01 	lds	r16, 0x0129
     e60:	10 91 2a 01 	lds	r17, 0x012A
     e64:	01 15       	cp	r16, r1
     e66:	11 05       	cpc	r17, r1
     e68:	09 f4       	brne	.+2      	; 0xe6c <USB_Host_ProcessNextHostState+0x6e>
     e6a:	eb c0       	rjmp	.+470    	; 0x1042 <USB_Host_ProcessNextHostState+0x244>
			{
				if ((SubErrorCode = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
     e6c:	81 e0       	ldi	r24, 0x01	; 1
     e6e:	01 df       	rcall	.-510    	; 0xc72 <USB_Host_WaitMS>
     e70:	68 2f       	mov	r22, r24
     e72:	88 23       	and	r24, r24
     e74:	31 f0       	breq	.+12     	; 0xe82 <USB_Host_ProcessNextHostState+0x84>
				{
					USB_HostState = PostWaitState;
     e76:	80 91 28 01 	lds	r24, 0x0128
     e7a:	80 93 7c 01 	sts	0x017C, r24
     e7e:	91 e0       	ldi	r25, 0x01	; 1
     e80:	dc c0       	rjmp	.+440    	; 0x103a <USB_Host_ProcessNextHostState+0x23c>
					ErrorCode     = HOST_ENUMERROR_WaitStage;
					break;
				}

				if (!(--WaitMSRemaining))
     e82:	c8 01       	movw	r24, r16
     e84:	01 97       	sbiw	r24, 0x01	; 1
     e86:	90 93 2a 01 	sts	0x012A, r25
     e8a:	80 93 29 01 	sts	0x0129, r24
     e8e:	89 2b       	or	r24, r25
     e90:	09 f0       	breq	.+2      	; 0xe94 <USB_Host_ProcessNextHostState+0x96>
     e92:	d7 c0       	rjmp	.+430    	; 0x1042 <USB_Host_ProcessNextHostState+0x244>
				  USB_HostState = PostWaitState;
     e94:	80 91 28 01 	lds	r24, 0x0128
     e98:	bf c0       	rjmp	.+382    	; 0x1018 <USB_Host_ProcessNextHostState+0x21a>
			}

			break;
		case HOST_STATE_Powered:
			WaitMSRemaining = HOST_DEVICE_SETTLE_DELAY_MS;
     e9a:	88 ee       	ldi	r24, 0xE8	; 232
     e9c:	93 e0       	ldi	r25, 0x03	; 3
     e9e:	90 93 2a 01 	sts	0x012A, r25
     ea2:	80 93 29 01 	sts	0x0129, r24

			USB_HostState = HOST_STATE_Powered_WaitForDeviceSettle;
     ea6:	84 e0       	ldi	r24, 0x04	; 4
     ea8:	b7 c0       	rjmp	.+366    	; 0x1018 <USB_Host_ProcessNextHostState+0x21a>
			break;
		case HOST_STATE_Powered_WaitForDeviceSettle:
			if (WaitMSRemaining--)
     eaa:	80 91 29 01 	lds	r24, 0x0129
     eae:	90 91 2a 01 	lds	r25, 0x012A
     eb2:	01 97       	sbiw	r24, 0x01	; 1
     eb4:	90 93 2a 01 	sts	0x012A, r25
     eb8:	80 93 29 01 	sts	0x0129, r24
     ebc:	01 96       	adiw	r24, 0x01	; 1
     ebe:	29 f0       	breq	.+10     	; 0xeca <USB_Host_ProcessNextHostState+0xcc>
     ec0:	80 ed       	ldi	r24, 0xD0	; 208
     ec2:	97 e0       	ldi	r25, 0x07	; 7
     ec4:	01 97       	sbiw	r24, 0x01	; 1
     ec6:	f1 f7       	brne	.-4      	; 0xec4 <USB_Host_ProcessNextHostState+0xc6>
     ec8:	bc c0       	rjmp	.+376    	; 0x1042 <USB_Host_ProcessNextHostState+0x244>
			}

			static inline void USB_Host_VBUS_Manual_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Manual_Off(void)
			{
				PORTE  &= ~(1 << 7);
     eca:	77 98       	cbi	0x0e, 7	; 14

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON  |=  (1 << OTGPADE);
     ecc:	80 91 d8 00 	lds	r24, 0x00D8
     ed0:	80 61       	ori	r24, 0x10	; 16
     ed2:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_Host_VBUS_Auto_Enable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Enable(void)
			{
				OTGCON &= ~(1 << VBUSHWC);
     ed6:	80 91 dd 00 	lds	r24, 0x00DD
     eda:	8b 7f       	andi	r24, 0xFB	; 251
     edc:	80 93 dd 00 	sts	0x00DD, r24
				UHWCON |=  (1 << UVCONE);
     ee0:	80 91 d7 00 	lds	r24, 0x00D7
     ee4:	80 61       	ori	r24, 0x10	; 16
     ee6:	80 93 d7 00 	sts	0x00D7, r24
			}

			static inline void USB_Host_VBUS_Auto_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_On(void)
			{
				OTGCON |=  (1 << VBUSREQ);
     eea:	80 91 dd 00 	lds	r24, 0x00DD
     eee:	82 60       	ori	r24, 0x02	; 2
     ef0:	80 93 dd 00 	sts	0x00DD, r24

				USB_OTGPAD_On();
				USB_Host_VBUS_Auto_Enable();
				USB_Host_VBUS_Auto_On();

				USB_HostState = HOST_STATE_Powered_WaitForConnect;
     ef4:	85 e0       	ldi	r24, 0x05	; 5
     ef6:	90 c0       	rjmp	.+288    	; 0x1018 <USB_Host_ProcessNextHostState+0x21a>
			}

			break;
		case HOST_STATE_Powered_WaitForConnect:
			if (USB_INT_HasOccurred(USB_INT_DCONNI))
     ef8:	80 91 9f 00 	lds	r24, 0x009F
     efc:	80 ff       	sbrs	r24, 0
     efe:	a1 c0       	rjmp	.+322    	; 0x1042 <USB_Host_ProcessNextHostState+0x244>
			{
				USB_INT_Clear(USB_INT_DCONNI);
     f00:	80 91 9f 00 	lds	r24, 0x009F
     f04:	8e 7f       	andi	r24, 0xFE	; 254
     f06:	80 93 9f 00 	sts	0x009F, r24
				USB_INT_Clear(USB_INT_DDISCI);
     f0a:	80 91 9f 00 	lds	r24, 0x009F
     f0e:	8d 7f       	andi	r24, 0xFD	; 253
     f10:	80 93 9f 00 	sts	0x009F, r24

				USB_INT_Clear(USB_INT_VBERRI);
     f14:	80 91 df 00 	lds	r24, 0x00DF
     f18:	8d 7f       	andi	r24, 0xFD	; 253
     f1a:	80 93 df 00 	sts	0x00DF, r24
				USB_INT_Enable(USB_INT_VBERRI);
     f1e:	80 91 de 00 	lds	r24, 0x00DE
     f22:	82 60       	ori	r24, 0x02	; 2
     f24:	80 93 de 00 	sts	0x00DE, r24
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
     f28:	80 91 9e 00 	lds	r24, 0x009E
     f2c:	81 60       	ori	r24, 0x01	; 1
     f2e:	80 93 9e 00 	sts	0x009E, r24

				USB_Host_ResumeBus();
				Pipe_ClearPipes();
     f32:	c9 d0       	rcall	.+402    	; 0x10c6 <Pipe_ClearPipes>

				HOST_TASK_NONBLOCK_WAIT(100, HOST_STATE_Powered_DoReset);
     f34:	81 e0       	ldi	r24, 0x01	; 1
     f36:	80 93 7c 01 	sts	0x017C, r24
     f3a:	84 e6       	ldi	r24, 0x64	; 100
     f3c:	90 e0       	ldi	r25, 0x00	; 0
     f3e:	90 93 2a 01 	sts	0x012A, r25
     f42:	80 93 29 01 	sts	0x0129, r24
     f46:	86 e0       	ldi	r24, 0x06	; 6
     f48:	5f c0       	rjmp	.+190    	; 0x1008 <USB_Host_ProcessNextHostState+0x20a>
			}

			break;
		case HOST_STATE_Powered_DoReset:
			USB_Host_ResetDevice();
     f4a:	e0 de       	rcall	.-576    	; 0xd0c <USB_Host_ResetDevice>

			HOST_TASK_NONBLOCK_WAIT(200, HOST_STATE_Powered_ConfigPipe);
     f4c:	81 e0       	ldi	r24, 0x01	; 1
     f4e:	80 93 7c 01 	sts	0x017C, r24
     f52:	88 ec       	ldi	r24, 0xC8	; 200
     f54:	90 e0       	ldi	r25, 0x00	; 0
     f56:	90 93 2a 01 	sts	0x012A, r25
     f5a:	80 93 29 01 	sts	0x0129, r24
     f5e:	87 e0       	ldi	r24, 0x07	; 7
     f60:	53 c0       	rjmp	.+166    	; 0x1008 <USB_Host_ProcessNextHostState+0x20a>
			break;
		case HOST_STATE_Powered_ConfigPipe:
			Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL,
     f62:	80 e0       	ldi	r24, 0x00	; 0
     f64:	60 e0       	ldi	r22, 0x00	; 0
     f66:	40 e0       	ldi	r20, 0x00	; 0
     f68:	20 e0       	ldi	r18, 0x00	; 0
     f6a:	00 e4       	ldi	r16, 0x40	; 64
     f6c:	10 e0       	ldi	r17, 0x00	; 0
     f6e:	ee 24       	eor	r14, r14
     f70:	74 d0       	rcall	.+232    	; 0x105a <Pipe_ConfigurePipe>
			 *  \return Boolean true if the selected pipe is configured, false otherwise.
			 */
			static inline bool Pipe_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsConfigured(void)
			{
				return ((UPSTAX & (1 << CFGOK)) ? true : false);
     f72:	80 91 ac 00 	lds	r24, 0x00AC
							   PIPE_TOKEN_SETUP, ENDPOINT_CONTROLEP,
							   PIPE_CONTROLPIPE_DEFAULT_SIZE, PIPE_BANK_SINGLE);

			if (!(Pipe_IsConfigured()))
     f76:	87 ff       	sbrs	r24, 7
     f78:	5e c0       	rjmp	.+188    	; 0x1036 <USB_Host_ProcessNextHostState+0x238>
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
				SubErrorCode = 0;
				break;
			}

			USB_HostState = HOST_STATE_Default;
     f7a:	88 e0       	ldi	r24, 0x08	; 8
     f7c:	4d c0       	rjmp	.+154    	; 0x1018 <USB_Host_ProcessNextHostState+0x21a>
			break;
		case HOST_STATE_Default:
			USB_ControlRequest = (USB_Request_Header_t)
     f7e:	a4 e7       	ldi	r26, 0x74	; 116
     f80:	b1 e0       	ldi	r27, 0x01	; 1
     f82:	e0 e1       	ldi	r30, 0x10	; 16
     f84:	f1 e0       	ldi	r31, 0x01	; 1
     f86:	88 e0       	ldi	r24, 0x08	; 8
     f88:	01 90       	ld	r0, Z+
     f8a:	0d 92       	st	X+, r0
     f8c:	81 50       	subi	r24, 0x01	; 1
     f8e:	e1 f7       	brne	.-8      	; 0xf88 <USB_Host_ProcessNextHostState+0x18a>
					.wLength       = 8,
				};

			uint8_t DataBuffer[8];

			if ((SubErrorCode = USB_Host_SendControlRequest(DataBuffer)) != HOST_SENDCONTROL_Successful)
     f90:	ce 01       	movw	r24, r28
     f92:	01 96       	adiw	r24, 0x01	; 1
     f94:	ad d2       	rcall	.+1370   	; 0x14f0 <USB_Host_SendControlRequest>
     f96:	68 2f       	mov	r22, r24
     f98:	88 23       	and	r24, r24
     f9a:	09 f0       	breq	.+2      	; 0xf9e <USB_Host_ProcessNextHostState+0x1a0>
     f9c:	4a c0       	rjmp	.+148    	; 0x1032 <USB_Host_ProcessNextHostState+0x234>
			{
				ErrorCode = HOST_ENUMERROR_ControlError;
				break;
			}

			USB_ControlPipeSize = DataBuffer[offsetof(USB_Descriptor_Device_t, Endpoint0Size)];
     f9e:	88 85       	ldd	r24, Y+8	; 0x08
     fa0:	80 93 18 01 	sts	0x0118, r24

			USB_Host_ResetDevice();
     fa4:	b3 de       	rcall	.-666    	; 0xd0c <USB_Host_ResetDevice>

			HOST_TASK_NONBLOCK_WAIT(200, HOST_STATE_Default_PostReset);
     fa6:	81 e0       	ldi	r24, 0x01	; 1
     fa8:	80 93 7c 01 	sts	0x017C, r24
     fac:	88 ec       	ldi	r24, 0xC8	; 200
     fae:	90 e0       	ldi	r25, 0x00	; 0
     fb0:	90 93 2a 01 	sts	0x012A, r25
     fb4:	80 93 29 01 	sts	0x0129, r24
     fb8:	89 e0       	ldi	r24, 0x09	; 9
     fba:	26 c0       	rjmp	.+76     	; 0x1008 <USB_Host_ProcessNextHostState+0x20a>
			break;
		case HOST_STATE_Default_PostReset:
			Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL,
     fbc:	00 91 18 01 	lds	r16, 0x0118
     fc0:	80 e0       	ldi	r24, 0x00	; 0
     fc2:	60 e0       	ldi	r22, 0x00	; 0
     fc4:	40 e0       	ldi	r20, 0x00	; 0
     fc6:	20 e0       	ldi	r18, 0x00	; 0
     fc8:	10 e0       	ldi	r17, 0x00	; 0
     fca:	ee 24       	eor	r14, r14
     fcc:	46 d0       	rcall	.+140    	; 0x105a <Pipe_ConfigurePipe>
     fce:	80 91 ac 00 	lds	r24, 0x00AC
			                   PIPE_TOKEN_SETUP, ENDPOINT_CONTROLEP,
			                   USB_ControlPipeSize, PIPE_BANK_SINGLE);

			if (!(Pipe_IsConfigured()))
     fd2:	87 ff       	sbrs	r24, 7
     fd4:	30 c0       	rjmp	.+96     	; 0x1036 <USB_Host_ProcessNextHostState+0x238>
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
				SubErrorCode = 0;
				break;
			}

			USB_ControlRequest = (USB_Request_Header_t)
     fd6:	a4 e7       	ldi	r26, 0x74	; 116
     fd8:	b1 e0       	ldi	r27, 0x01	; 1
     fda:	e8 e0       	ldi	r30, 0x08	; 8
     fdc:	f1 e0       	ldi	r31, 0x01	; 1
     fde:	88 e0       	ldi	r24, 0x08	; 8
     fe0:	01 90       	ld	r0, Z+
     fe2:	0d 92       	st	X+, r0
     fe4:	81 50       	subi	r24, 0x01	; 1
     fe6:	e1 f7       	brne	.-8      	; 0xfe0 <USB_Host_ProcessNextHostState+0x1e2>
					.wValue        = USB_HOST_DEVICEADDRESS,
					.wIndex        = 0,
					.wLength       = 0,
				};

			if ((SubErrorCode = USB_Host_SendControlRequest(NULL)) != HOST_SENDCONTROL_Successful)
     fe8:	80 e0       	ldi	r24, 0x00	; 0
     fea:	90 e0       	ldi	r25, 0x00	; 0
     fec:	81 d2       	rcall	.+1282   	; 0x14f0 <USB_Host_SendControlRequest>
     fee:	68 2f       	mov	r22, r24
     ff0:	88 23       	and	r24, r24
     ff2:	f9 f4       	brne	.+62     	; 0x1032 <USB_Host_ProcessNextHostState+0x234>
			{
				ErrorCode = HOST_ENUMERROR_ControlError;
				break;
			}

			HOST_TASK_NONBLOCK_WAIT(100, HOST_STATE_Default_PostAddressSet);
     ff4:	81 e0       	ldi	r24, 0x01	; 1
     ff6:	80 93 7c 01 	sts	0x017C, r24
     ffa:	84 e6       	ldi	r24, 0x64	; 100
     ffc:	90 e0       	ldi	r25, 0x00	; 0
     ffe:	90 93 2a 01 	sts	0x012A, r25
    1002:	80 93 29 01 	sts	0x0129, r24
    1006:	8a e0       	ldi	r24, 0x0A	; 10
    1008:	80 93 28 01 	sts	0x0128, r24
    100c:	1a c0       	rjmp	.+52     	; 0x1042 <USB_Host_ProcessNextHostState+0x244>
			}

			static inline void USB_Host_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SetDeviceAddress(const uint8_t Address)
			{
				UHADDR  =  (Address & 0x7F);
    100e:	81 e0       	ldi	r24, 0x01	; 1
    1010:	80 93 a1 00 	sts	0x00A1, r24
			break;
		case HOST_STATE_Default_PostAddressSet:
			USB_Host_SetDeviceAddress(USB_HOST_DEVICEADDRESS);

			EVENT_USB_Host_DeviceEnumerationComplete();
    1014:	b4 d9       	rcall	.-3224   	; 0x37e <EVENT_USB_Host_DeviceEnumerationComplete>
			USB_HostState = HOST_STATE_Addressed;
    1016:	8b e0       	ldi	r24, 0x0B	; 11
    1018:	80 93 7c 01 	sts	0x017C, r24
    101c:	12 c0       	rjmp	.+36     	; 0x1042 <USB_Host_ProcessNextHostState+0x244>
			break;
	}

	if ((ErrorCode != HOST_ENUMERROR_NoError) && (USB_HostState != HOST_STATE_Unattached))
	{
		EVENT_USB_Host_DeviceEnumerationFailed(ErrorCode, SubErrorCode);
    101e:	89 2f       	mov	r24, r25
    1020:	f0 d9       	rcall	.-3104   	; 0x402 <EVENT_USB_Host_DeviceEnumerationFailed>
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
    1022:	80 91 dd 00 	lds	r24, 0x00DD
    1026:	81 60       	ori	r24, 0x01	; 1
    1028:	80 93 dd 00 	sts	0x00DD, r24

		USB_Host_VBUS_Auto_Off();

		EVENT_USB_Host_DeviceUnattached();
    102c:	16 da       	rcall	.-3028   	; 0x45a <EVENT_USB_Host_DeviceUnattached>

		USB_ResetInterface();
    102e:	8c d0       	rcall	.+280    	; 0x1148 <USB_ResetInterface>
    1030:	08 c0       	rjmp	.+16     	; 0x1042 <USB_Host_ProcessNextHostState+0x244>
	}
}
    1032:	93 e0       	ldi	r25, 0x03	; 3
    1034:	02 c0       	rjmp	.+4      	; 0x103a <USB_Host_ProcessNextHostState+0x23c>
    1036:	94 e0       	ldi	r25, 0x04	; 4
    1038:	60 e0       	ldi	r22, 0x00	; 0
			EVENT_USB_Host_DeviceEnumerationComplete();
			USB_HostState = HOST_STATE_Addressed;
			break;
	}

	if ((ErrorCode != HOST_ENUMERROR_NoError) && (USB_HostState != HOST_STATE_Unattached))
    103a:	80 91 7c 01 	lds	r24, 0x017C
    103e:	82 30       	cpi	r24, 0x02	; 2
    1040:	71 f7       	brne	.-36     	; 0x101e <USB_Host_ProcessNextHostState+0x220>

		EVENT_USB_Host_DeviceUnattached();

		USB_ResetInterface();
	}
}
    1042:	28 96       	adiw	r28, 0x08	; 8
    1044:	0f b6       	in	r0, 0x3f	; 63
    1046:	f8 94       	cli
    1048:	de bf       	out	0x3e, r29	; 62
    104a:	0f be       	out	0x3f, r0	; 63
    104c:	cd bf       	out	0x3d, r28	; 61
    104e:	cf 91       	pop	r28
    1050:	df 91       	pop	r29
    1052:	1f 91       	pop	r17
    1054:	0f 91       	pop	r16
    1056:	ef 90       	pop	r14
    1058:	08 95       	ret

0000105a <Pipe_ConfigurePipe>:
                        const uint8_t Type,
                        const uint8_t Token,
                        const uint8_t EndpointNumber,
                        const uint16_t Size,
                        const uint8_t Banks)
{
    105a:	ef 92       	push	r14
    105c:	0f 93       	push	r16
    105e:	1f 93       	push	r17
    1060:	9e 2d       	mov	r25, r14
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
    1062:	80 93 a7 00 	sts	0x00A7, r24
			 *  \pre The currently selected pipe must first be configured properly via \ref Pipe_ConfigurePipe().
			 */
			static inline void Pipe_EnablePipe(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_EnablePipe(void)
			{
				UPCONX |= (1 << PEN);
    1066:	80 91 a9 00 	lds	r24, 0x00A9
    106a:	81 60       	ori	r24, 0x01	; 1
    106c:	80 93 a9 00 	sts	0x00A9, r24
	Pipe_SelectPipe(Number);
	Pipe_EnablePipe();

	UPCFG1X = 0;
    1070:	10 92 ab 00 	sts	0x00AB, r1

	UPCFG0X = ((Type << EPTYPE0) | Token | ((EndpointNumber & PIPE_EPNUM_MASK) << PEPNUM0));
    1074:	62 95       	swap	r22
    1076:	66 0f       	add	r22, r22
    1078:	66 0f       	add	r22, r22
    107a:	60 7c       	andi	r22, 0xC0	; 192
    107c:	64 2b       	or	r22, r20
    107e:	2f 70       	andi	r18, 0x0F	; 15
    1080:	62 2b       	or	r22, r18
    1082:	60 93 aa 00 	sts	0x00AA, r22
    1086:	28 e0       	ldi	r18, 0x08	; 8
    1088:	30 e0       	ldi	r19, 0x00	; 0
    108a:	80 e0       	ldi	r24, 0x00	; 0
    108c:	03 c0       	rjmp	.+6      	; 0x1094 <Pipe_ConfigurePipe+0x3a>
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while ((CheckBytes < Bytes) && (CheckBytes < PIPE_MAX_SIZE))
				{
					MaskVal++;
    108e:	8f 5f       	subi	r24, 0xFF	; 255
					CheckBytes <<= 1;
    1090:	22 0f       	add	r18, r18
    1092:	33 1f       	adc	r19, r19
			static inline uint8_t Pipe_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while ((CheckBytes < Bytes) && (CheckBytes < PIPE_MAX_SIZE))
    1094:	20 17       	cp	r18, r16
    1096:	31 07       	cpc	r19, r17
    1098:	10 f4       	brcc	.+4      	; 0x109e <Pipe_ConfigurePipe+0x44>
    109a:	85 30       	cpi	r24, 0x05	; 5
    109c:	c1 f7       	brne	.-16     	; 0x108e <Pipe_ConfigurePipe+0x34>
	UPCFG1X = ((1 << ALLOC) | Banks | Pipe_BytesToEPSizeMask(Size));
    109e:	92 60       	ori	r25, 0x02	; 2
    10a0:	82 95       	swap	r24
    10a2:	80 7f       	andi	r24, 0xF0	; 240
    10a4:	89 2b       	or	r24, r25
    10a6:	80 93 ab 00 	sts	0x00AB, r24

			/** Configures the currently selected pipe to allow for an unlimited number of IN requests. */
			static inline void Pipe_SetInfiniteINRequests(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetInfiniteINRequests(void)
			{
				UPCONX |= (1 << INMODE);
    10aa:	80 91 a9 00 	lds	r24, 0x00A9
    10ae:	80 62       	ori	r24, 0x20	; 32
    10b0:	80 93 a9 00 	sts	0x00A9, r24
			 *  \return Boolean true if the selected pipe is configured, false otherwise.
			 */
			static inline bool Pipe_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsConfigured(void)
			{
				return ((UPSTAX & (1 << CFGOK)) ? true : false);
    10b4:	80 91 ac 00 	lds	r24, 0x00AC

	Pipe_SetInfiniteINRequests();

	return Pipe_IsConfigured();
}
    10b8:	88 1f       	adc	r24, r24
    10ba:	88 27       	eor	r24, r24
    10bc:	88 1f       	adc	r24, r24
    10be:	1f 91       	pop	r17
    10c0:	0f 91       	pop	r16
    10c2:	ef 90       	pop	r14
    10c4:	08 95       	ret

000010c6 <Pipe_ClearPipes>:

void Pipe_ClearPipes(void)
{
	UPINT = 0;
    10c6:	10 92 f8 00 	sts	0x00F8, r1
    10ca:	90 e0       	ldi	r25, 0x00	; 0
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
    10cc:	90 93 a7 00 	sts	0x00A7, r25

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
	{
		Pipe_SelectPipe(PNum);
		UPIENX  = 0;
    10d0:	10 92 ae 00 	sts	0x00AE, r1
		UPINTX  = 0;
    10d4:	10 92 a6 00 	sts	0x00A6, r1
		UPCFG1X = 0;
    10d8:	10 92 ab 00 	sts	0x00AB, r1
			 *  from an attached device.
			 */
			static inline void Pipe_DisablePipe(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_DisablePipe(void)
			{
				UPCONX &= ~(1 << PEN);
    10dc:	80 91 a9 00 	lds	r24, 0x00A9
    10e0:	8e 7f       	andi	r24, 0xFE	; 254
    10e2:	80 93 a9 00 	sts	0x00A9, r24

void Pipe_ClearPipes(void)
{
	UPINT = 0;

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
    10e6:	9f 5f       	subi	r25, 0xFF	; 255
    10e8:	97 30       	cpi	r25, 0x07	; 7
    10ea:	81 f7       	brne	.-32     	; 0x10cc <Pipe_ClearPipes+0x6>
		UPIENX  = 0;
		UPINTX  = 0;
		UPCFG1X = 0;
		Pipe_DisablePipe();
	}
}
    10ec:	08 95       	ret

000010ee <Pipe_WaitUntilReady>:
			/** Returns the current USB frame number, when in host mode. Every millisecond the USB bus is active (i.e. not suspended)
			 *  the frame number is incremented by one.
			 */
			static inline uint16_t USB_Host_GetFrameNumber(void)
			{
				return UHFNUM;
    10ee:	40 91 a2 00 	lds	r20, 0x00A2
    10f2:	50 91 a3 00 	lds	r21, 0x00A3
    10f6:	24 e6       	ldi	r18, 0x64	; 100
			 *  \return The current pipe token, as a PIPE_TOKEN_* mask.
			 */
			static inline uint8_t Pipe_GetPipeToken(void) ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetPipeToken(void)
			{
				return (UPCFG0X & (0x03 << PTOKEN0));
    10f8:	80 91 aa 00 	lds	r24, 0x00AA

	uint16_t PreviousFrameNumber = USB_Host_GetFrameNumber();

	for (;;)
	{
		if (Pipe_GetPipeToken() == PIPE_TOKEN_IN)
    10fc:	80 73       	andi	r24, 0x30	; 48
    10fe:	80 31       	cpi	r24, 0x10	; 16
    1100:	29 f4       	brne	.+10     	; 0x110c <Pipe_WaitUntilReady+0x1e>
			 *  \return Boolean true if the current pipe has received an IN packet, false otherwise.
			 */
			static inline bool Pipe_IsINReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsINReceived(void)
			{
				return ((UPINTX & (1 << RXINI)) ? true : false);
    1102:	80 91 a6 00 	lds	r24, 0x00A6
		{
			if (Pipe_IsINReceived())
    1106:	80 ff       	sbrs	r24, 0
    1108:	05 c0       	rjmp	.+10     	; 0x1114 <Pipe_WaitUntilReady+0x26>
    110a:	1c c0       	rjmp	.+56     	; 0x1144 <Pipe_WaitUntilReady+0x56>
			 *  \return Boolean true if the current pipe is ready for an OUT packet, false otherwise.
			 */
			static inline bool Pipe_IsOUTReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsOUTReady(void)
			{
				return ((UPINTX & (1 << TXOUTI)) ? true : false);
    110c:	80 91 a6 00 	lds	r24, 0x00A6
			  return PIPE_READYWAIT_NoError;
		}
		else
		{
			if (Pipe_IsOUTReady())
    1110:	82 fd       	sbrc	r24, 2
    1112:	18 c0       	rjmp	.+48     	; 0x1144 <Pipe_WaitUntilReady+0x56>
			 *  \return Boolean true if the current pipe has been stalled by the attached device, false otherwise.
			 */
			static inline bool Pipe_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsStalled(void)
			{
				return ((UPINTX & (1 << RXSTALLI)) ? true : false);
    1114:	80 91 a6 00 	lds	r24, 0x00A6
			  return PIPE_READYWAIT_NoError;
		}

		if (Pipe_IsStalled())
    1118:	81 ff       	sbrs	r24, 1
    111a:	02 c0       	rjmp	.+4      	; 0x1120 <Pipe_WaitUntilReady+0x32>
    111c:	81 e0       	ldi	r24, 0x01	; 1
    111e:	08 95       	ret
		  return PIPE_READYWAIT_PipeStalled;
		else if (USB_HostState == HOST_STATE_Unattached)
    1120:	80 91 7c 01 	lds	r24, 0x017C
    1124:	82 30       	cpi	r24, 0x02	; 2
    1126:	79 f0       	breq	.+30     	; 0x1146 <Pipe_WaitUntilReady+0x58>
    1128:	80 91 a2 00 	lds	r24, 0x00A2
    112c:	90 91 a3 00 	lds	r25, 0x00A3
		  return PIPE_READYWAIT_DeviceDisconnected;

		uint16_t CurrentFrameNumber = USB_Host_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
    1130:	84 17       	cp	r24, r20
    1132:	95 07       	cpc	r25, r21
    1134:	09 f3       	breq	.-62     	; 0x10f8 <Pipe_WaitUntilReady+0xa>
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
    1136:	22 23       	and	r18, r18
    1138:	11 f4       	brne	.+4      	; 0x113e <Pipe_WaitUntilReady+0x50>
    113a:	83 e0       	ldi	r24, 0x03	; 3
    113c:	08 95       	ret
    113e:	21 50       	subi	r18, 0x01	; 1
    1140:	ac 01       	movw	r20, r24
    1142:	da cf       	rjmp	.-76     	; 0x10f8 <Pipe_WaitUntilReady+0xa>
    1144:	80 e0       	ldi	r24, 0x00	; 0
			  return PIPE_READYWAIT_Timeout;
		}
	}
}
    1146:	08 95       	ret

00001148 <USB_ResetInterface>:
{
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
    1148:	6e d0       	rcall	.+220    	; 0x1226 <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
    114a:	75 d0       	rcall	.+234    	; 0x1236 <USB_INT_ClearAllInterrupts>
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				const uint8_t Temp = USBCON;
    114c:	80 91 d8 00 	lds	r24, 0x00D8

				USBCON = (Temp & ~(1 << USBE));
    1150:	98 2f       	mov	r25, r24
    1152:	9f 77       	andi	r25, 0x7F	; 127
    1154:	90 93 d8 00 	sts	0x00D8, r25
				USBCON = (Temp |  (1 << USBE));
    1158:	80 68       	ori	r24, 0x80	; 128
    115a:	80 93 d8 00 	sts	0x00D8, r24

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR  = USB_PLL_PSC;
    115e:	8c e0       	ldi	r24, 0x0C	; 12
    1160:	89 bd       	out	0x29, r24	; 41
				PLLCSR |= (1 << PLLE);
    1162:	89 b5       	in	r24, 0x29	; 41
    1164:	82 60       	ori	r24, 0x02	; 2
    1166:	89 bd       	out	0x29, r24	; 41
		#if defined(USB_SERIES_4_AVR)
		PLLFRQ = ((1 << PLLUSB) | (1 << PDIV3) | (1 << PDIV1));
		#endif

		USB_PLL_On();
		while (!(USB_PLL_IsReady()));
    1168:	09 b4       	in	r0, 0x29	; 41
    116a:	00 fe       	sbrs	r0, 0
    116c:	fd cf       	rjmp	.-6      	; 0x1168 <USB_ResetInterface+0x20>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON  &= ~(1 << FRZCLK);
    116e:	80 91 d8 00 	lds	r24, 0x00D8
    1172:	8f 7d       	andi	r24, 0xDF	; 223
    1174:	80 93 d8 00 	sts	0x00D8, r24
		#endif
	}
	else if (USB_CurrentMode == USB_MODE_Host)
	{
		#if defined(USB_CAN_BE_HOST)
		UHWCON &= ~(1 << UIMOD);
    1178:	80 91 d7 00 	lds	r24, 0x00D7
    117c:	8f 77       	andi	r24, 0x7F	; 127
    117e:	80 93 d7 00 	sts	0x00D7, r24
#endif

#if defined(USB_CAN_BE_HOST)
static void USB_Init_Host(void)
{
	USB_HostState       = HOST_STATE_Unattached;
    1182:	82 e0       	ldi	r24, 0x02	; 2
    1184:	80 93 7c 01 	sts	0x017C, r24
	USB_ControlPipeSize = PIPE_CONTROLPIPE_DEFAULT_SIZE;
    1188:	80 e4       	ldi	r24, 0x40	; 64
    118a:	80 93 18 01 	sts	0x0118, r24
	#if !defined(__DOXYGEN__)
		/* Macros: */
			static inline void USB_Host_HostMode_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_HostMode_On(void)
			{
				USBCON |=  (1 << HOST);
    118e:	80 91 d8 00 	lds	r24, 0x00D8
    1192:	80 64       	ori	r24, 0x40	; 64
    1194:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
    1198:	80 91 dd 00 	lds	r24, 0x00DD
    119c:	81 60       	ori	r24, 0x01	; 1
    119e:	80 93 dd 00 	sts	0x00DD, r24
			}

			static inline void USB_Host_VBUS_Manual_Enable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Manual_Enable(void)
			{
				OTGCON |=  (1 << VBUSHWC);
    11a2:	80 91 dd 00 	lds	r24, 0x00DD
    11a6:	84 60       	ori	r24, 0x04	; 4
    11a8:	80 93 dd 00 	sts	0x00DD, r24
				UHWCON &= ~(1 << UVCONE);
    11ac:	80 91 d7 00 	lds	r24, 0x00D7
    11b0:	8f 7e       	andi	r24, 0xEF	; 239
    11b2:	80 93 d7 00 	sts	0x00D7, r24

				DDRE   |=  (1 << 7);
    11b6:	6f 9a       	sbi	0x0d, 7	; 13
			}

			static inline void USB_Host_VBUS_Manual_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Manual_On(void)
			{
				PORTE  |=  (1 << 7);
    11b8:	77 9a       	sbi	0x0e, 7	; 14

	USB_Host_VBUS_Auto_Off();
	USB_Host_VBUS_Manual_Enable();
	USB_Host_VBUS_Manual_On();

	USB_INT_Enable(USB_INT_SRPI);
    11ba:	80 91 de 00 	lds	r24, 0x00DE
    11be:	81 60       	ori	r24, 0x01	; 1
    11c0:	80 93 de 00 	sts	0x00DE, r24
	USB_INT_Enable(USB_INT_BCERRI);
    11c4:	80 91 de 00 	lds	r24, 0x00DE
    11c8:	84 60       	ori	r24, 0x04	; 4
    11ca:	80 93 de 00 	sts	0x00DE, r24
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
    11ce:	80 91 e0 00 	lds	r24, 0x00E0
    11d2:	8e 7f       	andi	r24, 0xFE	; 254
    11d4:	80 93 e0 00 	sts	0x00E0, r24

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON  |=  (1 << OTGPADE);
    11d8:	80 91 d8 00 	lds	r24, 0x00D8
    11dc:	80 61       	ori	r24, 0x10	; 16
    11de:	80 93 d8 00 	sts	0x00D8, r24
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
    11e2:	08 95       	ret

000011e4 <USB_Init>:

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON  |=  (1 << UVREGE);
    11e4:	e7 ed       	ldi	r30, 0xD7	; 215
    11e6:	f0 e0       	ldi	r31, 0x00	; 0
    11e8:	80 81       	ld	r24, Z
    11ea:	81 60       	ori	r24, 0x01	; 1
    11ec:	80 83       	st	Z, r24
	{
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
    11ee:	81 e0       	ldi	r24, 0x01	; 1
    11f0:	80 93 73 01 	sts	0x0173, r24

	USB_ResetInterface();
}
    11f4:	a9 cf       	rjmp	.-174    	; 0x1148 <USB_ResetInterface>

000011f6 <USB_ShutDown>:

void USB_ShutDown(void)
{
	USB_INT_DisableAllInterrupts();
    11f6:	17 d0       	rcall	.+46     	; 0x1226 <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
    11f8:	1e d0       	rcall	.+60     	; 0x1236 <USB_INT_ClearAllInterrupts>
			 *  enumerating the device once attached until \ref USB_Attach() is called.
			 */
			static inline void USB_Detach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Detach(void)
			{
				UDCON  |=  (1 << DETACH);
    11fa:	e0 ee       	ldi	r30, 0xE0	; 224
    11fc:	f0 e0       	ldi	r31, 0x00	; 0
    11fe:	80 81       	ld	r24, Z
    1200:	81 60       	ori	r24, 0x01	; 1
    1202:	80 83       	st	Z, r24
			}

			static inline void USB_Controller_Disable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Disable(void)
			{
				USBCON  &= ~(1 << USBE);
    1204:	a8 ed       	ldi	r26, 0xD8	; 216
    1206:	b0 e0       	ldi	r27, 0x00	; 0
    1208:	8c 91       	ld	r24, X
    120a:	8f 77       	andi	r24, 0x7F	; 127
    120c:	8c 93       	st	X, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR  = 0;
    120e:	19 bc       	out	0x29, r1	; 41

			static inline void USB_REG_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_Off(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON  &= ~(1 << UVREGE);
    1210:	e7 ed       	ldi	r30, 0xD7	; 215
    1212:	f0 e0       	ldi	r31, 0x00	; 0
    1214:	80 81       	ld	r24, Z
    1216:	8e 7f       	andi	r24, 0xFE	; 254
    1218:	80 83       	st	Z, r24
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON  &= ~(1 << OTGPADE);
    121a:	8c 91       	ld	r24, X
    121c:	8f 7e       	andi	r24, 0xEF	; 239
    121e:	8c 93       	st	X, r24

	#if defined(USB_CAN_BE_BOTH)
	USB_CurrentMode = USB_MODE_None;
	#endif

	USB_IsInitialized = false;
    1220:	10 92 73 01 	sts	0x0173, r1
}
    1224:	08 95       	ret

00001226 <USB_INT_DisableAllInterrupts>:
#include "USBInterrupt.h"

void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
    1226:	e8 ed       	ldi	r30, 0xD8	; 216
    1228:	f0 e0       	ldi	r31, 0x00	; 0
    122a:	80 81       	ld	r24, Z
    122c:	8c 7f       	andi	r24, 0xFC	; 252
    122e:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_BOTH)
	OTGIEN  = 0;
	#endif

	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
    1230:	10 92 a0 00 	sts	0x00A0, r1
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
	#endif
}
    1234:	08 95       	ret

00001236 <USB_INT_ClearAllInterrupts>:

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT  = 0;
    1236:	10 92 da 00 	sts	0x00DA, r1
	#if defined(USB_CAN_BE_BOTH)
	OTGINT  = 0;
	#endif

	#if defined(USB_CAN_BE_HOST)
	UHINT   = 0;
    123a:	10 92 9f 00 	sts	0x009F, r1
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT   = 0;
	#endif
}
    123e:	08 95       	ret

00001240 <__vector_10>:

ISR(USB_GEN_vect, ISR_BLOCK)
{
    1240:	1f 92       	push	r1
    1242:	0f 92       	push	r0
    1244:	0f b6       	in	r0, 0x3f	; 63
    1246:	0f 92       	push	r0
    1248:	0b b6       	in	r0, 0x3b	; 59
    124a:	0f 92       	push	r0
    124c:	11 24       	eor	r1, r1
    124e:	2f 93       	push	r18
    1250:	3f 93       	push	r19
    1252:	4f 93       	push	r20
    1254:	5f 93       	push	r21
    1256:	6f 93       	push	r22
    1258:	7f 93       	push	r23
    125a:	8f 93       	push	r24
    125c:	9f 93       	push	r25
    125e:	af 93       	push	r26
    1260:	bf 93       	push	r27
    1262:	ef 93       	push	r30
    1264:	ff 93       	push	r31
	}
	#endif
	#endif

	#if defined(USB_CAN_BE_HOST)
	if (USB_INT_HasOccurred(USB_INT_DDISCI) && USB_INT_IsEnabled(USB_INT_DDISCI))
    1266:	80 91 9f 00 	lds	r24, 0x009F
    126a:	81 ff       	sbrs	r24, 1
    126c:	15 c0       	rjmp	.+42     	; 0x1298 <__vector_10+0x58>
    126e:	80 91 a0 00 	lds	r24, 0x00A0
    1272:	81 ff       	sbrs	r24, 1
    1274:	11 c0       	rjmp	.+34     	; 0x1298 <__vector_10+0x58>
	{
		USB_INT_Clear(USB_INT_DDISCI);
    1276:	80 91 9f 00 	lds	r24, 0x009F
    127a:	8d 7f       	andi	r24, 0xFD	; 253
    127c:	80 93 9f 00 	sts	0x009F, r24
		USB_INT_Clear(USB_INT_DCONNI);
    1280:	80 91 9f 00 	lds	r24, 0x009F
    1284:	8e 7f       	andi	r24, 0xFE	; 254
    1286:	80 93 9f 00 	sts	0x009F, r24
		USB_INT_Disable(USB_INT_DDISCI);
    128a:	80 91 a0 00 	lds	r24, 0x00A0
    128e:	8d 7f       	andi	r24, 0xFD	; 253
    1290:	80 93 a0 00 	sts	0x00A0, r24

		EVENT_USB_Host_DeviceUnattached();
    1294:	e2 d8       	rcall	.-3644   	; 0x45a <EVENT_USB_Host_DeviceUnattached>

		USB_ResetInterface();
    1296:	58 df       	rcall	.-336    	; 0x1148 <USB_ResetInterface>
	}

	if (USB_INT_HasOccurred(USB_INT_VBERRI) && USB_INT_IsEnabled(USB_INT_VBERRI))
    1298:	80 91 df 00 	lds	r24, 0x00DF
    129c:	81 ff       	sbrs	r24, 1
    129e:	15 c0       	rjmp	.+42     	; 0x12ca <__vector_10+0x8a>
    12a0:	80 91 de 00 	lds	r24, 0x00DE
    12a4:	81 ff       	sbrs	r24, 1
    12a6:	11 c0       	rjmp	.+34     	; 0x12ca <__vector_10+0x8a>
	{
		USB_INT_Clear(USB_INT_VBERRI);
    12a8:	80 91 df 00 	lds	r24, 0x00DF
    12ac:	8d 7f       	andi	r24, 0xFD	; 253
    12ae:	80 93 df 00 	sts	0x00DF, r24
			}

			static inline void USB_Host_VBUS_Manual_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Manual_Off(void)
			{
				PORTE  &= ~(1 << 7);
    12b2:	77 98       	cbi	0x0e, 7	; 14
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
    12b4:	80 91 dd 00 	lds	r24, 0x00DD
    12b8:	81 60       	ori	r24, 0x01	; 1
    12ba:	80 93 dd 00 	sts	0x00DD, r24

		USB_Host_VBUS_Manual_Off();
		USB_Host_VBUS_Auto_Off();

		EVENT_USB_Host_HostError(HOST_ERROR_VBusVoltageDip);
    12be:	80 e0       	ldi	r24, 0x00	; 0
    12c0:	16 db       	rcall	.-2516   	; 0x8ee <EVENT_USB_Host_HostError>
		EVENT_USB_Host_DeviceUnattached();
    12c2:	cb d8       	rcall	.-3690   	; 0x45a <EVENT_USB_Host_DeviceUnattached>

		USB_HostState = HOST_STATE_Unattached;
    12c4:	82 e0       	ldi	r24, 0x02	; 2
    12c6:	80 93 7c 01 	sts	0x017C, r24
	}

	if (USB_INT_HasOccurred(USB_INT_SRPI) && USB_INT_IsEnabled(USB_INT_SRPI))
    12ca:	80 91 df 00 	lds	r24, 0x00DF
    12ce:	80 ff       	sbrs	r24, 0
    12d0:	17 c0       	rjmp	.+46     	; 0x1300 <__vector_10+0xc0>
    12d2:	80 91 de 00 	lds	r24, 0x00DE
    12d6:	80 ff       	sbrs	r24, 0
    12d8:	13 c0       	rjmp	.+38     	; 0x1300 <__vector_10+0xc0>
	{
		USB_INT_Clear(USB_INT_SRPI);
    12da:	80 91 df 00 	lds	r24, 0x00DF
    12de:	8e 7f       	andi	r24, 0xFE	; 254
    12e0:	80 93 df 00 	sts	0x00DF, r24
		USB_INT_Disable(USB_INT_SRPI);
    12e4:	80 91 de 00 	lds	r24, 0x00DE
    12e8:	8e 7f       	andi	r24, 0xFE	; 254
    12ea:	80 93 de 00 	sts	0x00DE, r24

		EVENT_USB_Host_DeviceAttached();
    12ee:	be d8       	rcall	.-3716   	; 0x46c <EVENT_USB_Host_DeviceAttached>

		USB_INT_Enable(USB_INT_DDISCI);
    12f0:	80 91 a0 00 	lds	r24, 0x00A0
    12f4:	82 60       	ori	r24, 0x02	; 2
    12f6:	80 93 a0 00 	sts	0x00A0, r24

		USB_HostState = HOST_STATE_Powered;
    12fa:	83 e0       	ldi	r24, 0x03	; 3
    12fc:	80 93 7c 01 	sts	0x017C, r24
	}

	if (USB_INT_HasOccurred(USB_INT_BCERRI) && USB_INT_IsEnabled(USB_INT_BCERRI))
    1300:	80 91 df 00 	lds	r24, 0x00DF
    1304:	82 ff       	sbrs	r24, 2
    1306:	0e c0       	rjmp	.+28     	; 0x1324 <__vector_10+0xe4>
    1308:	80 91 de 00 	lds	r24, 0x00DE
    130c:	82 ff       	sbrs	r24, 2
    130e:	0a c0       	rjmp	.+20     	; 0x1324 <__vector_10+0xe4>
	{
		USB_INT_Clear(USB_INT_BCERRI);
    1310:	80 91 df 00 	lds	r24, 0x00DF
    1314:	8b 7f       	andi	r24, 0xFB	; 251
    1316:	80 93 df 00 	sts	0x00DF, r24

		EVENT_USB_Host_DeviceEnumerationFailed(HOST_ENUMERROR_NoDeviceDetected, 0);
    131a:	82 e0       	ldi	r24, 0x02	; 2
    131c:	60 e0       	ldi	r22, 0x00	; 0
    131e:	71 d8       	rcall	.-3870   	; 0x402 <EVENT_USB_Host_DeviceEnumerationFailed>
		EVENT_USB_Host_DeviceUnattached();
    1320:	9c d8       	rcall	.-3784   	; 0x45a <EVENT_USB_Host_DeviceUnattached>

		USB_ResetInterface();
    1322:	12 df       	rcall	.-476    	; 0x1148 <USB_ResetInterface>
	}

	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_HSOFI) && USB_INT_IsEnabled(USB_INT_HSOFI))
    1324:	80 91 9f 00 	lds	r24, 0x009F
    1328:	85 ff       	sbrs	r24, 5
    132a:	0a c0       	rjmp	.+20     	; 0x1340 <__vector_10+0x100>
    132c:	80 91 a0 00 	lds	r24, 0x00A0
    1330:	85 ff       	sbrs	r24, 5
    1332:	06 c0       	rjmp	.+12     	; 0x1340 <__vector_10+0x100>
	{
		USB_INT_Clear(USB_INT_HSOFI);
    1334:	80 91 9f 00 	lds	r24, 0x009F
    1338:	8f 7d       	andi	r24, 0xDF	; 223
    133a:	80 93 9f 00 	sts	0x009F, r24

		EVENT_USB_Host_StartOfFrame();
    133e:	ae d0       	rcall	.+348    	; 0x149c <USB_Event_Stub>
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
    1340:	ff 91       	pop	r31
    1342:	ef 91       	pop	r30
    1344:	bf 91       	pop	r27
    1346:	af 91       	pop	r26
    1348:	9f 91       	pop	r25
    134a:	8f 91       	pop	r24
    134c:	7f 91       	pop	r23
    134e:	6f 91       	pop	r22
    1350:	5f 91       	pop	r21
    1352:	4f 91       	pop	r20
    1354:	3f 91       	pop	r19
    1356:	2f 91       	pop	r18
    1358:	0f 90       	pop	r0
    135a:	0b be       	out	0x3b, r0	; 59
    135c:	0f 90       	pop	r0
    135e:	0f be       	out	0x3f, r0	; 63
    1360:	0f 90       	pop	r0
    1362:	1f 90       	pop	r1
    1364:	18 95       	reti

00001366 <USB_GetNextDescriptorComp>:

uint8_t USB_GetNextDescriptorComp(uint16_t* const BytesRem, void** const CurrConfigLoc, ConfigComparatorPtr_t const ComparatorRoutine)
{
    1366:	af 92       	push	r10
    1368:	bf 92       	push	r11
    136a:	cf 92       	push	r12
    136c:	df 92       	push	r13
    136e:	ef 92       	push	r14
    1370:	ff 92       	push	r15
    1372:	0f 93       	push	r16
    1374:	1f 93       	push	r17
    1376:	cf 93       	push	r28
    1378:	df 93       	push	r29
    137a:	7c 01       	movw	r14, r24
    137c:	8b 01       	movw	r16, r22
    137e:	5a 01       	movw	r10, r20
    1380:	21 c0       	rjmp	.+66     	; 0x13c4 <USB_GetNextDescriptorComp+0x5e>
	uint8_t ErrorCode;

	while (*BytesRem)
	{
		uint8_t* PrevDescLoc  = *CurrConfigLoc;
    1382:	f8 01       	movw	r30, r16
    1384:	c0 81       	ld	r28, Z
    1386:	d1 81       	ldd	r29, Z+1	; 0x01
			static inline void USB_GetNextDescriptor(uint16_t* const BytesRem,
			                                         void** CurrConfigLoc) ATTR_NON_NULL_PTR_ARG(1) ATTR_NON_NULL_PTR_ARG(2);
			static inline void USB_GetNextDescriptor(uint16_t* const BytesRem,
			                                         void** CurrConfigLoc)
			{
				uint16_t CurrDescriptorSize = DESCRIPTOR_CAST(*CurrConfigLoc, USB_Descriptor_Header_t).Size;
    1388:	88 81       	ld	r24, Y
    138a:	90 e0       	ldi	r25, 0x00	; 0

				*CurrConfigLoc  = ((uint8_t*)*CurrConfigLoc) + CurrDescriptorSize;
    138c:	9e 01       	movw	r18, r28
    138e:	28 0f       	add	r18, r24
    1390:	39 1f       	adc	r19, r25
    1392:	31 83       	std	Z+1, r19	; 0x01
    1394:	20 83       	st	Z, r18
				*BytesRem      -= CurrDescriptorSize;
    1396:	f7 01       	movw	r30, r14
    1398:	20 81       	ld	r18, Z
    139a:	31 81       	ldd	r19, Z+1	; 0x01
    139c:	28 1b       	sub	r18, r24
    139e:	39 0b       	sbc	r19, r25
    13a0:	31 83       	std	Z+1, r19	; 0x01
    13a2:	20 83       	st	Z, r18
		uint16_t PrevBytesRem = *BytesRem;

		USB_GetNextDescriptor(BytesRem, CurrConfigLoc);

		if ((ErrorCode = ComparatorRoutine(*CurrConfigLoc)) != DESCRIPTOR_SEARCH_NotFound)
    13a4:	f8 01       	movw	r30, r16
    13a6:	80 81       	ld	r24, Z
    13a8:	91 81       	ldd	r25, Z+1	; 0x01
    13aa:	f5 01       	movw	r30, r10
    13ac:	09 95       	icall
    13ae:	82 30       	cpi	r24, 0x02	; 2
    13b0:	49 f0       	breq	.+18     	; 0x13c4 <USB_GetNextDescriptorComp+0x5e>
		{
			if (ErrorCode == DESCRIPTOR_SEARCH_Fail)
    13b2:	81 30       	cpi	r24, 0x01	; 1
    13b4:	71 f4       	brne	.+28     	; 0x13d2 <USB_GetNextDescriptorComp+0x6c>
			{
				*CurrConfigLoc = PrevDescLoc;
    13b6:	f8 01       	movw	r30, r16
    13b8:	c0 83       	st	Z, r28
    13ba:	d1 83       	std	Z+1, r29	; 0x01
				*BytesRem      = PrevBytesRem;
    13bc:	f7 01       	movw	r30, r14
    13be:	d1 82       	std	Z+1, r13	; 0x01
    13c0:	c0 82       	st	Z, r12
    13c2:	07 c0       	rjmp	.+14     	; 0x13d2 <USB_GetNextDescriptorComp+0x6c>

uint8_t USB_GetNextDescriptorComp(uint16_t* const BytesRem, void** const CurrConfigLoc, ConfigComparatorPtr_t const ComparatorRoutine)
{
	uint8_t ErrorCode;

	while (*BytesRem)
    13c4:	f7 01       	movw	r30, r14
    13c6:	c0 80       	ld	r12, Z
    13c8:	d1 80       	ldd	r13, Z+1	; 0x01
    13ca:	c1 14       	cp	r12, r1
    13cc:	d1 04       	cpc	r13, r1
    13ce:	c9 f6       	brne	.-78     	; 0x1382 <USB_GetNextDescriptorComp+0x1c>
    13d0:	82 e0       	ldi	r24, 0x02	; 2
			return ErrorCode;
		}
	}

	return DESCRIPTOR_SEARCH_COMP_EndOfDescriptor;
}
    13d2:	df 91       	pop	r29
    13d4:	cf 91       	pop	r28
    13d6:	1f 91       	pop	r17
    13d8:	0f 91       	pop	r16
    13da:	ff 90       	pop	r15
    13dc:	ef 90       	pop	r14
    13de:	df 90       	pop	r13
    13e0:	cf 90       	pop	r12
    13e2:	bf 90       	pop	r11
    13e4:	af 90       	pop	r10
    13e6:	08 95       	ret

000013e8 <USB_Host_GetDeviceConfigDescriptor>:
#include "ConfigDescriptor.h"

#if defined(USB_CAN_BE_HOST)
uint8_t USB_Host_GetDeviceConfigDescriptor(uint8_t ConfigNumber, uint16_t* const ConfigSizePtr,
                                           void* BufferPtr, uint16_t BufferSize)
{
    13e8:	cf 92       	push	r12
    13ea:	df 92       	push	r13
    13ec:	ef 92       	push	r14
    13ee:	ff 92       	push	r15
    13f0:	0f 93       	push	r16
    13f2:	1f 93       	push	r17
    13f4:	df 93       	push	r29
    13f6:	cf 93       	push	r28
    13f8:	cd b7       	in	r28, 0x3d	; 61
    13fa:	de b7       	in	r29, 0x3e	; 62
    13fc:	29 97       	sbiw	r28, 0x09	; 9
    13fe:	0f b6       	in	r0, 0x3f	; 63
    1400:	f8 94       	cli
    1402:	de bf       	out	0x3e, r29	; 62
    1404:	0f be       	out	0x3f, r0	; 63
    1406:	cd bf       	out	0x3d, r28	; 61
    1408:	6b 01       	movw	r12, r22
    140a:	8a 01       	movw	r16, r20
    140c:	79 01       	movw	r14, r18
	uint8_t ErrorCode;
	uint8_t ConfigHeader[sizeof(USB_Descriptor_Configuration_Header_t)];

	USB_ControlRequest = (USB_Request_Header_t)
    140e:	90 e8       	ldi	r25, 0x80	; 128
    1410:	90 93 74 01 	sts	0x0174, r25
    1414:	96 e0       	ldi	r25, 0x06	; 6
    1416:	90 93 75 01 	sts	0x0175, r25
    141a:	90 e0       	ldi	r25, 0x00	; 0
    141c:	01 97       	sbiw	r24, 0x01	; 1
    141e:	92 60       	ori	r25, 0x02	; 2
    1420:	90 93 77 01 	sts	0x0177, r25
    1424:	80 93 76 01 	sts	0x0176, r24
    1428:	10 92 79 01 	sts	0x0179, r1
    142c:	10 92 78 01 	sts	0x0178, r1
    1430:	89 e0       	ldi	r24, 0x09	; 9
    1432:	90 e0       	ldi	r25, 0x00	; 0
    1434:	90 93 7b 01 	sts	0x017B, r25
    1438:	80 93 7a 01 	sts	0x017A, r24
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
    143c:	10 92 a7 00 	sts	0x00A7, r1
			.wLength       = sizeof(USB_Descriptor_Configuration_Header_t),
		};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	if ((ErrorCode = USB_Host_SendControlRequest(ConfigHeader)) != HOST_SENDCONTROL_Successful)
    1440:	ce 01       	movw	r24, r28
    1442:	01 96       	adiw	r24, 0x01	; 1
    1444:	55 d0       	rcall	.+170    	; 0x14f0 <USB_Host_SendControlRequest>
    1446:	28 2f       	mov	r18, r24
    1448:	88 23       	and	r24, r24
    144a:	c1 f4       	brne	.+48     	; 0x147c <USB_Host_GetDeviceConfigDescriptor+0x94>
	  return ErrorCode;

	*ConfigSizePtr = DESCRIPTOR_PCAST(ConfigHeader, USB_Descriptor_Configuration_Header_t)->TotalConfigurationSize;
    144c:	8b 81       	ldd	r24, Y+3	; 0x03
    144e:	9c 81       	ldd	r25, Y+4	; 0x04
    1450:	f6 01       	movw	r30, r12
    1452:	91 83       	std	Z+1, r25	; 0x01
    1454:	80 83       	st	Z, r24

	if (*ConfigSizePtr > BufferSize)
    1456:	e8 16       	cp	r14, r24
    1458:	f9 06       	cpc	r15, r25
    145a:	10 f4       	brcc	.+4      	; 0x1460 <USB_Host_GetDeviceConfigDescriptor+0x78>
    145c:	25 e0       	ldi	r18, 0x05	; 5
    145e:	0e c0       	rjmp	.+28     	; 0x147c <USB_Host_GetDeviceConfigDescriptor+0x94>
	  return HOST_GETCONFIG_BuffOverflow;

	USB_ControlRequest.wLength = *ConfigSizePtr;
    1460:	90 93 7b 01 	sts	0x017B, r25
    1464:	80 93 7a 01 	sts	0x017A, r24

	if ((ErrorCode = USB_Host_SendControlRequest(BufferPtr)) != HOST_SENDCONTROL_Successful)
    1468:	c8 01       	movw	r24, r16
    146a:	42 d0       	rcall	.+132    	; 0x14f0 <USB_Host_SendControlRequest>
    146c:	28 2f       	mov	r18, r24
    146e:	88 23       	and	r24, r24
    1470:	29 f4       	brne	.+10     	; 0x147c <USB_Host_GetDeviceConfigDescriptor+0x94>
	  return ErrorCode;

	if (DESCRIPTOR_TYPE(BufferPtr) != DTYPE_Configuration)
    1472:	f8 01       	movw	r30, r16
    1474:	81 81       	ldd	r24, Z+1	; 0x01
    1476:	82 30       	cpi	r24, 0x02	; 2
    1478:	09 f0       	breq	.+2      	; 0x147c <USB_Host_GetDeviceConfigDescriptor+0x94>
    147a:	26 e0       	ldi	r18, 0x06	; 6
	  return HOST_GETCONFIG_InvalidData;

	return HOST_GETCONFIG_Successful;
}
    147c:	82 2f       	mov	r24, r18
    147e:	29 96       	adiw	r28, 0x09	; 9
    1480:	0f b6       	in	r0, 0x3f	; 63
    1482:	f8 94       	cli
    1484:	de bf       	out	0x3e, r29	; 62
    1486:	0f be       	out	0x3f, r0	; 63
    1488:	cd bf       	out	0x3d, r28	; 61
    148a:	cf 91       	pop	r28
    148c:	df 91       	pop	r29
    148e:	1f 91       	pop	r17
    1490:	0f 91       	pop	r16
    1492:	ff 90       	pop	r15
    1494:	ef 90       	pop	r14
    1496:	df 90       	pop	r13
    1498:	cf 90       	pop	r12
    149a:	08 95       	ret

0000149c <USB_Event_Stub>:
#include "Events.h"

void USB_Event_Stub(void)
{

}
    149c:	08 95       	ret

0000149e <USB_Host_WaitForIOS>:

	return ReturnStatus;
}

static uint8_t USB_Host_WaitForIOS(const uint8_t WaitType)
{
    149e:	1f 93       	push	r17
    14a0:	cf 93       	push	r28
    14a2:	df 93       	push	r29
    14a4:	18 2f       	mov	r17, r24
    14a6:	c8 ee       	ldi	r28, 0xE8	; 232
    14a8:	d3 e0       	ldi	r29, 0x03	; 3
    14aa:	09 c0       	rjmp	.+18     	; 0x14be <USB_Host_WaitForIOS+0x20>
	         ((WaitType == USB_HOST_WAITFOR_InReceived) && Pipe_IsINReceived()) ||
	         ((WaitType == USB_HOST_WAITFOR_OutReady)   && Pipe_IsOUTReady())))
	{
		uint8_t ErrorCode;

		if ((ErrorCode = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
    14ac:	81 e0       	ldi	r24, 0x01	; 1
    14ae:	e1 db       	rcall	.-2110   	; 0xc72 <USB_Host_WaitMS>
    14b0:	88 23       	and	r24, r24
    14b2:	d1 f4       	brne	.+52     	; 0x14e8 <USB_Host_WaitForIOS+0x4a>
		  return ErrorCode;

		if (!(TimeoutCounter--))
    14b4:	20 97       	sbiw	r28, 0x00	; 0
    14b6:	11 f4       	brne	.+4      	; 0x14bc <USB_Host_WaitForIOS+0x1e>
    14b8:	84 e0       	ldi	r24, 0x04	; 4
    14ba:	16 c0       	rjmp	.+44     	; 0x14e8 <USB_Host_WaitForIOS+0x4a>
    14bc:	21 97       	sbiw	r28, 0x01	; 1
	uint8_t  TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#else
	uint16_t TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#endif

	while (!(((WaitType == USB_HOST_WAITFOR_SetupSent)  && Pipe_IsSETUPSent())  ||
    14be:	11 23       	and	r17, r17
    14c0:	29 f4       	brne	.+10     	; 0x14cc <USB_Host_WaitForIOS+0x2e>
			 *  \return Boolean true if the current pipe is ready for a SETUP packet, false otherwise.
			 */
			static inline bool Pipe_IsSETUPSent(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsSETUPSent(void)
			{
				return ((UPINTX & (1 << TXSTPI)) ? true : false);
    14c2:	80 91 a6 00 	lds	r24, 0x00A6
    14c6:	83 ff       	sbrs	r24, 3
    14c8:	f1 cf       	rjmp	.-30     	; 0x14ac <USB_Host_WaitForIOS+0xe>
    14ca:	0d c0       	rjmp	.+26     	; 0x14e6 <USB_Host_WaitForIOS+0x48>
    14cc:	11 30       	cpi	r17, 0x01	; 1
    14ce:	29 f4       	brne	.+10     	; 0x14da <USB_Host_WaitForIOS+0x3c>
			 *  \return Boolean true if the current pipe has received an IN packet, false otherwise.
			 */
			static inline bool Pipe_IsINReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsINReceived(void)
			{
				return ((UPINTX & (1 << RXINI)) ? true : false);
    14d0:	80 91 a6 00 	lds	r24, 0x00A6
    14d4:	80 ff       	sbrs	r24, 0
    14d6:	ea cf       	rjmp	.-44     	; 0x14ac <USB_Host_WaitForIOS+0xe>
    14d8:	06 c0       	rjmp	.+12     	; 0x14e6 <USB_Host_WaitForIOS+0x48>
    14da:	12 30       	cpi	r17, 0x02	; 2
    14dc:	39 f7       	brne	.-50     	; 0x14ac <USB_Host_WaitForIOS+0xe>
			 *  \return Boolean true if the current pipe is ready for an OUT packet, false otherwise.
			 */
			static inline bool Pipe_IsOUTReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsOUTReady(void)
			{
				return ((UPINTX & (1 << TXOUTI)) ? true : false);
    14de:	80 91 a6 00 	lds	r24, 0x00A6
    14e2:	82 ff       	sbrs	r24, 2
    14e4:	e3 cf       	rjmp	.-58     	; 0x14ac <USB_Host_WaitForIOS+0xe>
    14e6:	80 e0       	ldi	r24, 0x00	; 0
		if (!(TimeoutCounter--))
		  return HOST_SENDCONTROL_SoftwareTimeOut;
	}

	return HOST_SENDCONTROL_Successful;
}
    14e8:	df 91       	pop	r29
    14ea:	cf 91       	pop	r28
    14ec:	1f 91       	pop	r17
    14ee:	08 95       	ret

000014f0 <USB_Host_SendControlRequest>:

#define  __INCLUDE_FROM_HOSTSTDREQ_C
#include "HostStandardReq.h"

uint8_t USB_Host_SendControlRequest(void* const BufferPtr)
{
    14f0:	ff 92       	push	r15
    14f2:	0f 93       	push	r16
    14f4:	1f 93       	push	r17
    14f6:	cf 93       	push	r28
    14f8:	df 93       	push	r29
    14fa:	18 2f       	mov	r17, r24
    14fc:	09 2f       	mov	r16, r25
			 *  \return Boolean true if the bus is currently suspended, false otherwise.
			 */
			static inline bool USB_Host_IsBusSuspended(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusSuspended(void)
			{
				return ((UHCON & (1 << SOFEN)) ? false : true);
    14fe:	f0 90 9e 00 	lds	r15, 0x009E
	uint8_t* HeaderStream   = (uint8_t*)&USB_ControlRequest;
	uint8_t* DataStream     = (uint8_t*)BufferPtr;
	bool     BusSuspended   = USB_Host_IsBusSuspended();
	uint8_t  ReturnStatus   = HOST_SENDCONTROL_Successful;
	uint16_t DataLen        = USB_ControlRequest.wLength;
    1502:	c0 91 7a 01 	lds	r28, 0x017A
    1506:	d0 91 7b 01 	lds	r29, 0x017B
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
    150a:	80 91 9e 00 	lds	r24, 0x009E
    150e:	81 60       	ori	r24, 0x01	; 1
    1510:	80 93 9e 00 	sts	0x009E, r24

	USB_Host_ResumeBus();

	if ((ReturnStatus = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
    1514:	81 e0       	ldi	r24, 0x01	; 1
    1516:	ad db       	rcall	.-2214   	; 0xc72 <USB_Host_WaitMS>
    1518:	98 2f       	mov	r25, r24
    151a:	88 23       	and	r24, r24
    151c:	09 f0       	breq	.+2      	; 0x1520 <USB_Host_SendControlRequest+0x30>
    151e:	d2 c0       	rjmp	.+420    	; 0x16c4 <USB_Host_SendControlRequest+0x1d4>
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    1520:	80 91 aa 00 	lds	r24, 0x00AA
    1524:	8f 7c       	andi	r24, 0xCF	; 207
    1526:	80 93 aa 00 	sts	0x00AA, r24
			 *  flag for the pipe.
			 */
			static inline void Pipe_ClearErrorFlags(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearErrorFlags(void)
			{
				UPERRX = 0;
    152a:	10 92 f5 00 	sts	0x00F5, r1

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    152e:	80 91 a9 00 	lds	r24, 0x00A9
    1532:	8f 7b       	andi	r24, 0xBF	; 191
    1534:	80 93 a9 00 	sts	0x00A9, r24
    1538:	e4 e7       	ldi	r30, 0x74	; 116
    153a:	f1 e0       	ldi	r31, 0x01	; 1
	Pipe_ClearErrorFlags();

	Pipe_Unfreeze();

	for (uint8_t HeaderByte = 0; HeaderByte < sizeof(USB_Request_Header_t); HeaderByte++)
	  Pipe_Write_Byte(*(HeaderStream++));
    153c:	81 91       	ld	r24, Z+
			 *  \param[in] Byte  Next byte to write into the the currently selected pipe's FIFO buffer.
			 */
			static inline void Pipe_Write_Byte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Write_Byte(const uint8_t Byte)
			{
				UPDATX = Byte;
    153e:	80 93 af 00 	sts	0x00AF, r24
	Pipe_SetPipeToken(PIPE_TOKEN_SETUP);
	Pipe_ClearErrorFlags();

	Pipe_Unfreeze();

	for (uint8_t HeaderByte = 0; HeaderByte < sizeof(USB_Request_Header_t); HeaderByte++)
    1542:	81 e0       	ldi	r24, 0x01	; 1
    1544:	ec 37       	cpi	r30, 0x7C	; 124
    1546:	f8 07       	cpc	r31, r24
    1548:	c9 f7       	brne	.-14     	; 0x153c <USB_Host_SendControlRequest+0x4c>
			 *  \ingroup Group_PipePacketManagement
			 */
			static inline void Pipe_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearSETUP(void)
			{
				UPINTX &= ~((1 << TXSTPI) | (1 << FIFOCON));
    154a:	80 91 a6 00 	lds	r24, 0x00A6
    154e:	87 77       	andi	r24, 0x77	; 119
    1550:	80 93 a6 00 	sts	0x00A6, r24
	  Pipe_Write_Byte(*(HeaderStream++));

	Pipe_ClearSETUP();

	if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_SetupSent)) != HOST_SENDCONTROL_Successful)
    1554:	80 e0       	ldi	r24, 0x00	; 0
    1556:	a3 df       	rcall	.-186    	; 0x149e <USB_Host_WaitForIOS>
    1558:	98 2f       	mov	r25, r24
    155a:	88 23       	and	r24, r24
    155c:	09 f0       	breq	.+2      	; 0x1560 <USB_Host_SendControlRequest+0x70>
    155e:	b2 c0       	rjmp	.+356    	; 0x16c4 <USB_Host_SendControlRequest+0x1d4>

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    1560:	80 91 a9 00 	lds	r24, 0x00A9
    1564:	80 64       	ori	r24, 0x40	; 64
    1566:	80 93 a9 00 	sts	0x00A9, r24
	  goto End_Of_Control_Send;

	Pipe_Freeze();

	if ((ReturnStatus = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
    156a:	81 e0       	ldi	r24, 0x01	; 1
    156c:	82 db       	rcall	.-2300   	; 0xc72 <USB_Host_WaitMS>
    156e:	98 2f       	mov	r25, r24
    1570:	88 23       	and	r24, r24
    1572:	09 f0       	breq	.+2      	; 0x1576 <USB_Host_SendControlRequest+0x86>
    1574:	a7 c0       	rjmp	.+334    	; 0x16c4 <USB_Host_SendControlRequest+0x1d4>
#include "HostStandardReq.h"

uint8_t USB_Host_SendControlRequest(void* const BufferPtr)
{
	uint8_t* HeaderStream   = (uint8_t*)&USB_ControlRequest;
	uint8_t* DataStream     = (uint8_t*)BufferPtr;
    1576:	21 2f       	mov	r18, r17
    1578:	30 2f       	mov	r19, r16
    157a:	c9 01       	movw	r24, r18
    157c:	8c 01       	movw	r16, r24
	Pipe_Freeze();

	if ((ReturnStatus = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
	  goto End_Of_Control_Send;

	if ((USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_DIRECTION) == REQDIR_DEVICETOHOST)
    157e:	80 91 74 01 	lds	r24, 0x0174
    1582:	87 ff       	sbrs	r24, 7
    1584:	52 c0       	rjmp	.+164    	; 0x162a <USB_Host_SendControlRequest+0x13a>
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    1586:	80 91 aa 00 	lds	r24, 0x00AA
    158a:	8f 7c       	andi	r24, 0xCF	; 207
    158c:	80 61       	ori	r24, 0x10	; 16
    158e:	80 93 aa 00 	sts	0x00AA, r24
	{
		Pipe_SetPipeToken(PIPE_TOKEN_IN);

		if (DataStream != NULL)
    1592:	01 15       	cp	r16, r1
    1594:	11 05       	cpc	r17, r1
    1596:	69 f5       	brne	.+90     	; 0x15f2 <USB_Host_SendControlRequest+0x102>
    1598:	2e c0       	rjmp	.+92     	; 0x15f6 <USB_Host_SendControlRequest+0x106>

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    159a:	80 91 a9 00 	lds	r24, 0x00A9
    159e:	8f 7b       	andi	r24, 0xBF	; 191
    15a0:	80 93 a9 00 	sts	0x00A9, r24
		{
			while (DataLen)
			{
				Pipe_Unfreeze();

				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_InReceived)) != HOST_SENDCONTROL_Successful)
    15a4:	81 e0       	ldi	r24, 0x01	; 1
    15a6:	7b df       	rcall	.-266    	; 0x149e <USB_Host_WaitForIOS>
    15a8:	98 2f       	mov	r25, r24
    15aa:	88 23       	and	r24, r24
    15ac:	09 f0       	breq	.+2      	; 0x15b0 <USB_Host_SendControlRequest+0xc0>
    15ae:	8a c0       	rjmp	.+276    	; 0x16c4 <USB_Host_SendControlRequest+0x1d4>
			 *  \return Total number of bytes in the currently selected Pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
    15b0:	80 91 f6 00 	lds	r24, 0x00F6
    15b4:	90 91 f7 00 	lds	r25, 0x00F7
				  goto End_Of_Control_Send;

				if (!(Pipe_BytesInPipe()))
    15b8:	89 2b       	or	r24, r25
    15ba:	49 f4       	brne	.+18     	; 0x15ce <USB_Host_SendControlRequest+0xde>
    15bc:	c0 e0       	ldi	r28, 0x00	; 0
    15be:	d0 e0       	ldi	r29, 0x00	; 0
    15c0:	06 c0       	rjmp	.+12     	; 0x15ce <USB_Host_SendControlRequest+0xde>
			 *  \return Next byte in the currently selected pipe's FIFO buffer.
			 */
			static inline uint8_t Pipe_Read_Byte(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_Read_Byte(void)
			{
				return UPDATX;
    15c2:	80 91 af 00 	lds	r24, 0x00AF
				  DataLen = 0;

				while (Pipe_BytesInPipe() && DataLen)
				{
					*(DataStream++) = Pipe_Read_Byte();
    15c6:	f8 01       	movw	r30, r16
    15c8:	81 93       	st	Z+, r24
    15ca:	8f 01       	movw	r16, r30
					DataLen--;
    15cc:	21 97       	sbiw	r28, 0x01	; 1
			 *  \return Total number of bytes in the currently selected Pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
    15ce:	80 91 f6 00 	lds	r24, 0x00F6
    15d2:	90 91 f7 00 	lds	r25, 0x00F7
				  goto End_Of_Control_Send;

				if (!(Pipe_BytesInPipe()))
				  DataLen = 0;

				while (Pipe_BytesInPipe() && DataLen)
    15d6:	89 2b       	or	r24, r25
    15d8:	11 f0       	breq	.+4      	; 0x15de <USB_Host_SendControlRequest+0xee>
    15da:	20 97       	sbiw	r28, 0x00	; 0
    15dc:	91 f7       	brne	.-28     	; 0x15c2 <USB_Host_SendControlRequest+0xd2>

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    15de:	80 91 a9 00 	lds	r24, 0x00A9
    15e2:	80 64       	ori	r24, 0x40	; 64
    15e4:	80 93 a9 00 	sts	0x00A9, r24
			 *  \ingroup Group_PipePacketManagement
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
    15e8:	80 91 a6 00 	lds	r24, 0x00A6
    15ec:	8e 77       	andi	r24, 0x7E	; 126
    15ee:	80 93 a6 00 	sts	0x00A6, r24
	{
		Pipe_SetPipeToken(PIPE_TOKEN_IN);

		if (DataStream != NULL)
		{
			while (DataLen)
    15f2:	20 97       	sbiw	r28, 0x00	; 0
    15f4:	91 f6       	brne	.-92     	; 0x159a <USB_Host_SendControlRequest+0xaa>
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    15f6:	80 91 aa 00 	lds	r24, 0x00AA
    15fa:	8f 7c       	andi	r24, 0xCF	; 207
    15fc:	80 62       	ori	r24, 0x20	; 32
    15fe:	80 93 aa 00 	sts	0x00AA, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    1602:	80 91 a9 00 	lds	r24, 0x00A9
    1606:	8f 7b       	andi	r24, 0xBF	; 191
    1608:	80 93 a9 00 	sts	0x00A9, r24
		}

		Pipe_SetPipeToken(PIPE_TOKEN_OUT);
		Pipe_Unfreeze();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    160c:	82 e0       	ldi	r24, 0x02	; 2
    160e:	47 df       	rcall	.-370    	; 0x149e <USB_Host_WaitForIOS>
    1610:	98 2f       	mov	r25, r24
    1612:	88 23       	and	r24, r24
    1614:	09 f0       	breq	.+2      	; 0x1618 <USB_Host_SendControlRequest+0x128>
    1616:	56 c0       	rjmp	.+172    	; 0x16c4 <USB_Host_SendControlRequest+0x1d4>
			 *  \ingroup Group_PipePacketManagement
			 */
			static inline void Pipe_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearOUT(void)
			{
				UPINTX &= ~((1 << TXOUTI) | (1 << FIFOCON));
    1618:	80 91 a6 00 	lds	r24, 0x00A6
    161c:	8b 77       	andi	r24, 0x7B	; 123
    161e:	80 93 a6 00 	sts	0x00A6, r24
		  goto End_Of_Control_Send;

		Pipe_ClearOUT();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    1622:	82 e0       	ldi	r24, 0x02	; 2
    1624:	3c df       	rcall	.-392    	; 0x149e <USB_Host_WaitForIOS>
    1626:	98 2f       	mov	r25, r24
    1628:	4d c0       	rjmp	.+154    	; 0x16c4 <USB_Host_SendControlRequest+0x1d4>
		  goto End_Of_Control_Send;
	}
	else
	{
		if (DataStream != NULL)
    162a:	01 15       	cp	r16, r1
    162c:	11 05       	cpc	r17, r1
    162e:	a9 f1       	breq	.+106    	; 0x169a <USB_Host_SendControlRequest+0x1aa>
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    1630:	80 91 aa 00 	lds	r24, 0x00AA
    1634:	8f 7c       	andi	r24, 0xCF	; 207
    1636:	80 62       	ori	r24, 0x20	; 32
    1638:	80 93 aa 00 	sts	0x00AA, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    163c:	80 91 a9 00 	lds	r24, 0x00A9
    1640:	8f 7b       	andi	r24, 0xBF	; 191
    1642:	80 93 a9 00 	sts	0x00A9, r24
    1646:	1d c0       	rjmp	.+58     	; 0x1682 <USB_Host_SendControlRequest+0x192>
			Pipe_SetPipeToken(PIPE_TOKEN_OUT);
			Pipe_Unfreeze();

			while (DataLen)
			{
				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    1648:	82 e0       	ldi	r24, 0x02	; 2
    164a:	29 df       	rcall	.-430    	; 0x149e <USB_Host_WaitForIOS>
    164c:	98 2f       	mov	r25, r24
    164e:	88 23       	and	r24, r24
    1650:	c9 f5       	brne	.+114    	; 0x16c4 <USB_Host_SendControlRequest+0x1d4>
				  goto End_Of_Control_Send;

				while (DataLen && (Pipe_BytesInPipe() < USB_ControlPipeSize))
    1652:	80 91 18 01 	lds	r24, 0x0118
    1656:	28 2f       	mov	r18, r24
    1658:	30 e0       	ldi	r19, 0x00	; 0
    165a:	07 c0       	rjmp	.+14     	; 0x166a <USB_Host_SendControlRequest+0x17a>
				{
					Pipe_Write_Byte(*(DataStream++));
    165c:	f8 01       	movw	r30, r16
    165e:	81 91       	ld	r24, Z+
    1660:	8f 01       	movw	r16, r30
			 *  \param[in] Byte  Next byte to write into the the currently selected pipe's FIFO buffer.
			 */
			static inline void Pipe_Write_Byte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Write_Byte(const uint8_t Byte)
			{
				UPDATX = Byte;
    1662:	80 93 af 00 	sts	0x00AF, r24
					DataLen--;
    1666:	21 97       	sbiw	r28, 0x01	; 1
			while (DataLen)
			{
				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
				  goto End_Of_Control_Send;

				while (DataLen && (Pipe_BytesInPipe() < USB_ControlPipeSize))
    1668:	39 f0       	breq	.+14     	; 0x1678 <USB_Host_SendControlRequest+0x188>
			 *  \return Total number of bytes in the currently selected Pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
    166a:	80 91 f6 00 	lds	r24, 0x00F6
    166e:	90 91 f7 00 	lds	r25, 0x00F7
    1672:	82 17       	cp	r24, r18
    1674:	93 07       	cpc	r25, r19
    1676:	90 f3       	brcs	.-28     	; 0x165c <USB_Host_SendControlRequest+0x16c>
			 *  \ingroup Group_PipePacketManagement
			 */
			static inline void Pipe_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearOUT(void)
			{
				UPINTX &= ~((1 << TXOUTI) | (1 << FIFOCON));
    1678:	80 91 a6 00 	lds	r24, 0x00A6
    167c:	8b 77       	andi	r24, 0x7B	; 123
    167e:	80 93 a6 00 	sts	0x00A6, r24
		if (DataStream != NULL)
		{
			Pipe_SetPipeToken(PIPE_TOKEN_OUT);
			Pipe_Unfreeze();

			while (DataLen)
    1682:	20 97       	sbiw	r28, 0x00	; 0
    1684:	09 f7       	brne	.-62     	; 0x1648 <USB_Host_SendControlRequest+0x158>
				}

				Pipe_ClearOUT();
			}

			if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    1686:	82 e0       	ldi	r24, 0x02	; 2
    1688:	0a df       	rcall	.-492    	; 0x149e <USB_Host_WaitForIOS>
    168a:	98 2f       	mov	r25, r24
    168c:	88 23       	and	r24, r24
    168e:	d1 f4       	brne	.+52     	; 0x16c4 <USB_Host_SendControlRequest+0x1d4>

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    1690:	80 91 a9 00 	lds	r24, 0x00A9
    1694:	80 64       	ori	r24, 0x40	; 64
    1696:	80 93 a9 00 	sts	0x00A9, r24
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    169a:	80 91 aa 00 	lds	r24, 0x00AA
    169e:	8f 7c       	andi	r24, 0xCF	; 207
    16a0:	80 61       	ori	r24, 0x10	; 16
    16a2:	80 93 aa 00 	sts	0x00AA, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    16a6:	80 91 a9 00 	lds	r24, 0x00A9
    16aa:	8f 7b       	andi	r24, 0xBF	; 191
    16ac:	80 93 a9 00 	sts	0x00A9, r24
		}

		Pipe_SetPipeToken(PIPE_TOKEN_IN);
		Pipe_Unfreeze();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_InReceived)) != HOST_SENDCONTROL_Successful)
    16b0:	81 e0       	ldi	r24, 0x01	; 1
    16b2:	f5 de       	rcall	.-534    	; 0x149e <USB_Host_WaitForIOS>
    16b4:	98 2f       	mov	r25, r24
    16b6:	88 23       	and	r24, r24
    16b8:	29 f4       	brne	.+10     	; 0x16c4 <USB_Host_SendControlRequest+0x1d4>
			 *  \ingroup Group_PipePacketManagement
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
    16ba:	80 91 a6 00 	lds	r24, 0x00A6
    16be:	8e 77       	andi	r24, 0x7E	; 126
    16c0:	80 93 a6 00 	sts	0x00A6, r24

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    16c4:	80 91 a9 00 	lds	r24, 0x00A9
    16c8:	80 64       	ori	r24, 0x40	; 64
    16ca:	80 93 a9 00 	sts	0x00A9, r24
	}

End_Of_Control_Send:
	Pipe_Freeze();

	if (BusSuspended)
    16ce:	f0 fc       	sbrc	r15, 0
    16d0:	05 c0       	rjmp	.+10     	; 0x16dc <USB_Host_SendControlRequest+0x1ec>
			 *  messages to the device.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				UHCON &= ~(1 << SOFEN);
    16d2:	80 91 9e 00 	lds	r24, 0x009E
    16d6:	8e 7f       	andi	r24, 0xFE	; 254
    16d8:	80 93 9e 00 	sts	0x009E, r24
			 *  \param[in] PipeNumber  Index of the pipe to reset.
			 */
			static inline void Pipe_ResetPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ResetPipe(const uint8_t PipeNumber)
			{
				UPRST = (1 << PipeNumber);
    16dc:	81 e0       	ldi	r24, 0x01	; 1
    16de:	80 93 a8 00 	sts	0x00A8, r24
				UPRST = 0;
    16e2:	10 92 a8 00 	sts	0x00A8, r1
	  USB_Host_SuspendBus();

	Pipe_ResetPipe(PIPE_CONTROLPIPE);

	return ReturnStatus;
}
    16e6:	89 2f       	mov	r24, r25
    16e8:	df 91       	pop	r29
    16ea:	cf 91       	pop	r28
    16ec:	1f 91       	pop	r17
    16ee:	0f 91       	pop	r16
    16f0:	ff 90       	pop	r15
    16f2:	08 95       	ret

000016f4 <Pipe_Read_Stream_LE>:
uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE Buffer,
                            uint16_t Length
                            __CALLBACK_PARAM)
{
    16f4:	ff 92       	push	r15
    16f6:	0f 93       	push	r16
    16f8:	1f 93       	push	r17
    16fa:	cf 93       	push	r28
    16fc:	df 93       	push	r29
    16fe:	18 2f       	mov	r17, r24
    1700:	09 2f       	mov	r16, r25
    1702:	eb 01       	movw	r28, r22
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    1704:	80 91 aa 00 	lds	r24, 0x00AA
    1708:	8f 7c       	andi	r24, 0xCF	; 207
    170a:	80 61       	ori	r24, 0x10	; 16
    170c:	80 93 aa 00 	sts	0x00AA, r24
	uint8_t* DataStream = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	uint8_t  ErrorCode;

	Pipe_SetPipeToken(TEMPLATE_TOKEN);

	if ((ErrorCode = Pipe_WaitUntilReady()))
    1710:	ee dc       	rcall	.-1572   	; 0x10ee <Pipe_WaitUntilReady>
    1712:	f8 2e       	mov	r15, r24
    1714:	88 23       	and	r24, r24
    1716:	d1 f4       	brne	.+52     	; 0x174c <Pipe_Read_Stream_LE+0x58>
uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE Buffer,
                            uint16_t Length
                            __CALLBACK_PARAM)
{
	uint8_t* DataStream = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
    1718:	81 2f       	mov	r24, r17
    171a:	90 2f       	mov	r25, r16
    171c:	9c 01       	movw	r18, r24
    171e:	89 01       	movw	r16, r18
    1720:	13 c0       	rjmp	.+38     	; 0x1748 <Pipe_Read_Stream_LE+0x54>
			 *  \return Boolean true if the currently selected pipe may be read from or written to, depending on its direction.
			 */
			static inline bool Pipe_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsReadWriteAllowed(void)
			{
				return ((UPINTX & (1 << RWAL)) ? true : false);
    1722:	80 91 a6 00 	lds	r24, 0x00A6
	}
	#endif

	while (Length)
	{
		if (!(Pipe_IsReadWriteAllowed()))
    1726:	85 fd       	sbrc	r24, 5
    1728:	09 c0       	rjmp	.+18     	; 0x173c <Pipe_Read_Stream_LE+0x48>
			 *  \ingroup Group_PipePacketManagement
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
    172a:	80 91 a6 00 	lds	r24, 0x00A6
    172e:	8e 77       	andi	r24, 0x7E	; 126
    1730:	80 93 a6 00 	sts	0x00A6, r24
			#if !defined(NO_STREAM_CALLBACKS)
			if ((Callback != NULL) && (Callback() == STREAMCALLBACK_Abort))
			  return PIPE_RWSTREAM_CallbackAborted;
			#endif

			if ((ErrorCode = Pipe_WaitUntilReady()))
    1734:	dc dc       	rcall	.-1608   	; 0x10ee <Pipe_WaitUntilReady>
    1736:	88 23       	and	r24, r24
    1738:	39 f0       	breq	.+14     	; 0x1748 <Pipe_Read_Stream_LE+0x54>
    173a:	09 c0       	rjmp	.+18     	; 0x174e <Pipe_Read_Stream_LE+0x5a>
			 *  \return Next byte in the currently selected pipe's FIFO buffer.
			 */
			static inline uint8_t Pipe_Read_Byte(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_Read_Byte(void)
			{
				return UPDATX;
    173c:	80 91 af 00 	lds	r24, 0x00AF
			  return ErrorCode;
		}
		else
		{
			TEMPLATE_TRANSFER_BYTE(DataStream);
    1740:	f8 01       	movw	r30, r16
    1742:	81 93       	st	Z+, r24
    1744:	8f 01       	movw	r16, r30
			Length--;
    1746:	21 97       	sbiw	r28, 0x01	; 1
				} while (Length >= 8);
		}
	}
	#endif

	while (Length)
    1748:	20 97       	sbiw	r28, 0x00	; 0
    174a:	59 f7       	brne	.-42     	; 0x1722 <Pipe_Read_Stream_LE+0x2e>
    174c:	8f 2d       	mov	r24, r15
			Length--;
		}
	}

	return PIPE_RWSTREAM_NoError;
}
    174e:	df 91       	pop	r29
    1750:	cf 91       	pop	r28
    1752:	1f 91       	pop	r17
    1754:	0f 91       	pop	r16
    1756:	ff 90       	pop	r15
    1758:	08 95       	ret

0000175a <Pipe_Write_Stream_LE>:
uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE Buffer,
                            uint16_t Length
                            __CALLBACK_PARAM)
{
    175a:	ff 92       	push	r15
    175c:	0f 93       	push	r16
    175e:	1f 93       	push	r17
    1760:	cf 93       	push	r28
    1762:	df 93       	push	r29
    1764:	18 2f       	mov	r17, r24
    1766:	09 2f       	mov	r16, r25
    1768:	eb 01       	movw	r28, r22
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    176a:	80 91 aa 00 	lds	r24, 0x00AA
    176e:	8f 7c       	andi	r24, 0xCF	; 207
    1770:	80 62       	ori	r24, 0x20	; 32
    1772:	80 93 aa 00 	sts	0x00AA, r24
	uint8_t* DataStream = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	uint8_t  ErrorCode;

	Pipe_SetPipeToken(TEMPLATE_TOKEN);

	if ((ErrorCode = Pipe_WaitUntilReady()))
    1776:	bb dc       	rcall	.-1674   	; 0x10ee <Pipe_WaitUntilReady>
    1778:	f8 2e       	mov	r15, r24
    177a:	88 23       	and	r24, r24
    177c:	d1 f4       	brne	.+52     	; 0x17b2 <Pipe_Write_Stream_LE+0x58>
uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE Buffer,
                            uint16_t Length
                            __CALLBACK_PARAM)
{
	uint8_t* DataStream = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
    177e:	81 2f       	mov	r24, r17
    1780:	90 2f       	mov	r25, r16
    1782:	9c 01       	movw	r18, r24
    1784:	89 01       	movw	r16, r18
    1786:	13 c0       	rjmp	.+38     	; 0x17ae <Pipe_Write_Stream_LE+0x54>
			 *  \return Boolean true if the currently selected pipe may be read from or written to, depending on its direction.
			 */
			static inline bool Pipe_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsReadWriteAllowed(void)
			{
				return ((UPINTX & (1 << RWAL)) ? true : false);
    1788:	80 91 a6 00 	lds	r24, 0x00A6
	}
	#endif

	while (Length)
	{
		if (!(Pipe_IsReadWriteAllowed()))
    178c:	85 fd       	sbrc	r24, 5
    178e:	09 c0       	rjmp	.+18     	; 0x17a2 <Pipe_Write_Stream_LE+0x48>
			 *  \ingroup Group_PipePacketManagement
			 */
			static inline void Pipe_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearOUT(void)
			{
				UPINTX &= ~((1 << TXOUTI) | (1 << FIFOCON));
    1790:	80 91 a6 00 	lds	r24, 0x00A6
    1794:	8b 77       	andi	r24, 0x7B	; 123
    1796:	80 93 a6 00 	sts	0x00A6, r24
			#if !defined(NO_STREAM_CALLBACKS)
			if ((Callback != NULL) && (Callback() == STREAMCALLBACK_Abort))
			  return PIPE_RWSTREAM_CallbackAborted;
			#endif

			if ((ErrorCode = Pipe_WaitUntilReady()))
    179a:	a9 dc       	rcall	.-1710   	; 0x10ee <Pipe_WaitUntilReady>
    179c:	88 23       	and	r24, r24
    179e:	39 f0       	breq	.+14     	; 0x17ae <Pipe_Write_Stream_LE+0x54>
    17a0:	09 c0       	rjmp	.+18     	; 0x17b4 <Pipe_Write_Stream_LE+0x5a>
			  return ErrorCode;
		}
		else
		{
			TEMPLATE_TRANSFER_BYTE(DataStream);
    17a2:	f8 01       	movw	r30, r16
    17a4:	81 91       	ld	r24, Z+
    17a6:	8f 01       	movw	r16, r30
			 *  \param[in] Byte  Next byte to write into the the currently selected pipe's FIFO buffer.
			 */
			static inline void Pipe_Write_Byte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Write_Byte(const uint8_t Byte)
			{
				UPDATX = Byte;
    17a8:	80 93 af 00 	sts	0x00AF, r24
			Length--;
    17ac:	21 97       	sbiw	r28, 0x01	; 1
				} while (Length >= 8);
		}
	}
	#endif

	while (Length)
    17ae:	20 97       	sbiw	r28, 0x00	; 0
    17b0:	59 f7       	brne	.-42     	; 0x1788 <Pipe_Write_Stream_LE+0x2e>
    17b2:	8f 2d       	mov	r24, r15
			Length--;
		}
	}

	return PIPE_RWSTREAM_NoError;
}
    17b4:	df 91       	pop	r29
    17b6:	cf 91       	pop	r28
    17b8:	1f 91       	pop	r17
    17ba:	0f 91       	pop	r16
    17bc:	ff 90       	pop	r15
    17be:	08 95       	ret

000017c0 <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
    17c0:	ff 92       	push	r15
    17c2:	0f 93       	push	r16
    17c4:	1f 93       	push	r17
			 *  \return Index of the currently selected pipe.
			 */
			static inline uint8_t Pipe_GetCurrentPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetCurrentPipe(void)
			{
				return (UPNUM & PIPE_PIPENUM_MASK);
    17c6:	07 ea       	ldi	r16, 0xA7	; 167
    17c8:	10 e0       	ldi	r17, 0x00	; 0
    17ca:	f8 01       	movw	r30, r16
    17cc:	f0 80       	ld	r15, Z
    17ce:	f7 e0       	ldi	r31, 0x07	; 7
    17d0:	ff 22       	and	r15, r31
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
    17d2:	f8 01       	movw	r30, r16
    17d4:	10 82       	st	Z, r1
{
	uint8_t PrevPipe = Pipe_GetCurrentPipe();

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	USB_Host_ProcessNextHostState();
    17d6:	13 db       	rcall	.-2522   	; 0xdfe <USB_Host_ProcessNextHostState>
    17d8:	f8 01       	movw	r30, r16
    17da:	f0 82       	st	Z, r15
		if (USB_CurrentMode == USB_MODE_Device)
		  USB_DeviceTask();
		else if (USB_CurrentMode == USB_MODE_Host)
		  USB_HostTask();
	#endif
}
    17dc:	1f 91       	pop	r17
    17de:	0f 91       	pop	r16
    17e0:	ff 90       	pop	r15
    17e2:	08 95       	ret

000017e4 <SerialStream_TxByte>:

FILE USARTStream = FDEV_SETUP_STREAM(SerialStream_TxByte, SerialStream_RxByte, _FDEV_SETUP_RW);

static int SerialStream_TxByte(char DataByte,
                               FILE *Stream)
{
    17e4:	98 2f       	mov	r25, r24
			 *  \param[in] DataByte  Byte to transmit through the USART.
			 */
			static inline void Serial_TxByte(const char DataByte) ATTR_ALWAYS_INLINE;
			static inline void Serial_TxByte(const char DataByte)
			{
				while (!(UCSR1A & (1 << UDRE1)));
    17e6:	80 91 c8 00 	lds	r24, 0x00C8
    17ea:	85 ff       	sbrs	r24, 5
    17ec:	fc cf       	rjmp	.-8      	; 0x17e6 <SerialStream_TxByte+0x2>
				UDR1 = DataByte;
    17ee:	90 93 ce 00 	sts	0x00CE, r25
	(void)Stream;

	Serial_TxByte(DataByte);
	return 0;
}
    17f2:	80 e0       	ldi	r24, 0x00	; 0
    17f4:	90 e0       	ldi	r25, 0x00	; 0
    17f6:	08 95       	ret

000017f8 <SerialStream_RxByte>:
			 *  \return Boolean true if a character has been received, false otherwise.
			 */
			static inline bool Serial_IsCharReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Serial_IsCharReceived(void)
			{
				return ((UCSR1A & (1 << RXC1)) ? true : false);
    17f8:	80 91 c8 00 	lds	r24, 0x00C8

static int SerialStream_RxByte(FILE *Stream)
{
	(void)Stream;

	if (!(Serial_IsCharReceived()))
    17fc:	87 fd       	sbrc	r24, 7
    17fe:	03 c0       	rjmp	.+6      	; 0x1806 <SerialStream_RxByte+0xe>
    1800:	2e ef       	ldi	r18, 0xFE	; 254
    1802:	3f ef       	ldi	r19, 0xFF	; 255
    1804:	08 c0       	rjmp	.+16     	; 0x1816 <SerialStream_RxByte+0x1e>
			 *  \return Byte received from the USART.
			 */
			static inline char Serial_RxByte(void) ATTR_ALWAYS_INLINE;
			static inline char Serial_RxByte(void)
			{
				while (!(UCSR1A & (1 << RXC1)));
    1806:	80 91 c8 00 	lds	r24, 0x00C8
    180a:	87 ff       	sbrs	r24, 7
    180c:	fc cf       	rjmp	.-8      	; 0x1806 <SerialStream_RxByte+0xe>
				return UDR1;
    180e:	80 91 ce 00 	lds	r24, 0x00CE
	  return _FDEV_EOF;

	return Serial_RxByte();
    1812:	28 2f       	mov	r18, r24
    1814:	30 e0       	ldi	r19, 0x00	; 0
}
    1816:	c9 01       	movw	r24, r18
    1818:	08 95       	ret

0000181a <printf_P>:
    181a:	df 93       	push	r29
    181c:	cf 93       	push	r28
    181e:	cd b7       	in	r28, 0x3d	; 61
    1820:	de b7       	in	r29, 0x3e	; 62
    1822:	fe 01       	movw	r30, r28
    1824:	35 96       	adiw	r30, 0x05	; 5
    1826:	61 91       	ld	r22, Z+
    1828:	71 91       	ld	r23, Z+
    182a:	a0 91 7f 01 	lds	r26, 0x017F
    182e:	b0 91 80 01 	lds	r27, 0x0180
    1832:	13 96       	adiw	r26, 0x03	; 3
    1834:	8c 91       	ld	r24, X
    1836:	13 97       	sbiw	r26, 0x03	; 3
    1838:	88 60       	ori	r24, 0x08	; 8
    183a:	13 96       	adiw	r26, 0x03	; 3
    183c:	8c 93       	st	X, r24
    183e:	80 91 7f 01 	lds	r24, 0x017F
    1842:	90 91 80 01 	lds	r25, 0x0180
    1846:	af 01       	movw	r20, r30
    1848:	3f d0       	rcall	.+126    	; 0x18c8 <vfprintf>
    184a:	e0 91 7f 01 	lds	r30, 0x017F
    184e:	f0 91 80 01 	lds	r31, 0x0180
    1852:	23 81       	ldd	r18, Z+3	; 0x03
    1854:	27 7f       	andi	r18, 0xF7	; 247
    1856:	23 83       	std	Z+3, r18	; 0x03
    1858:	cf 91       	pop	r28
    185a:	df 91       	pop	r29
    185c:	08 95       	ret

0000185e <puts_P>:
    185e:	0f 93       	push	r16
    1860:	1f 93       	push	r17
    1862:	cf 93       	push	r28
    1864:	df 93       	push	r29
    1866:	ec 01       	movw	r28, r24
    1868:	e0 91 7f 01 	lds	r30, 0x017F
    186c:	f0 91 80 01 	lds	r31, 0x0180
    1870:	83 81       	ldd	r24, Z+3	; 0x03
    1872:	81 ff       	sbrs	r24, 1
    1874:	21 c0       	rjmp	.+66     	; 0x18b8 <puts_P+0x5a>
    1876:	00 e0       	ldi	r16, 0x00	; 0
    1878:	10 e0       	ldi	r17, 0x00	; 0
    187a:	0e c0       	rjmp	.+28     	; 0x1898 <puts_P+0x3a>
    187c:	e0 91 7f 01 	lds	r30, 0x017F
    1880:	f0 91 80 01 	lds	r31, 0x0180
    1884:	20 85       	ldd	r18, Z+8	; 0x08
    1886:	31 85       	ldd	r19, Z+9	; 0x09
    1888:	bf 01       	movw	r22, r30
    188a:	f9 01       	movw	r30, r18
    188c:	09 95       	icall
    188e:	89 2b       	or	r24, r25
    1890:	11 f0       	breq	.+4      	; 0x1896 <puts_P+0x38>
    1892:	0f ef       	ldi	r16, 0xFF	; 255
    1894:	1f ef       	ldi	r17, 0xFF	; 255
    1896:	21 96       	adiw	r28, 0x01	; 1
    1898:	fe 01       	movw	r30, r28
    189a:	84 91       	lpm	r24, Z+
    189c:	88 23       	and	r24, r24
    189e:	71 f7       	brne	.-36     	; 0x187c <puts_P+0x1e>
    18a0:	e0 91 7f 01 	lds	r30, 0x017F
    18a4:	f0 91 80 01 	lds	r31, 0x0180
    18a8:	20 85       	ldd	r18, Z+8	; 0x08
    18aa:	31 85       	ldd	r19, Z+9	; 0x09
    18ac:	8a e0       	ldi	r24, 0x0A	; 10
    18ae:	bf 01       	movw	r22, r30
    18b0:	f9 01       	movw	r30, r18
    18b2:	09 95       	icall
    18b4:	89 2b       	or	r24, r25
    18b6:	11 f0       	breq	.+4      	; 0x18bc <puts_P+0x5e>
    18b8:	0f ef       	ldi	r16, 0xFF	; 255
    18ba:	1f ef       	ldi	r17, 0xFF	; 255
    18bc:	c8 01       	movw	r24, r16
    18be:	df 91       	pop	r29
    18c0:	cf 91       	pop	r28
    18c2:	1f 91       	pop	r17
    18c4:	0f 91       	pop	r16
    18c6:	08 95       	ret

000018c8 <vfprintf>:
    18c8:	2f 92       	push	r2
    18ca:	3f 92       	push	r3
    18cc:	4f 92       	push	r4
    18ce:	5f 92       	push	r5
    18d0:	6f 92       	push	r6
    18d2:	7f 92       	push	r7
    18d4:	8f 92       	push	r8
    18d6:	9f 92       	push	r9
    18d8:	af 92       	push	r10
    18da:	bf 92       	push	r11
    18dc:	cf 92       	push	r12
    18de:	df 92       	push	r13
    18e0:	ef 92       	push	r14
    18e2:	ff 92       	push	r15
    18e4:	0f 93       	push	r16
    18e6:	1f 93       	push	r17
    18e8:	df 93       	push	r29
    18ea:	cf 93       	push	r28
    18ec:	cd b7       	in	r28, 0x3d	; 61
    18ee:	de b7       	in	r29, 0x3e	; 62
    18f0:	2b 97       	sbiw	r28, 0x0b	; 11
    18f2:	0f b6       	in	r0, 0x3f	; 63
    18f4:	f8 94       	cli
    18f6:	de bf       	out	0x3e, r29	; 62
    18f8:	0f be       	out	0x3f, r0	; 63
    18fa:	cd bf       	out	0x3d, r28	; 61
    18fc:	3c 01       	movw	r6, r24
    18fe:	2b 01       	movw	r4, r22
    1900:	5a 01       	movw	r10, r20
    1902:	fc 01       	movw	r30, r24
    1904:	17 82       	std	Z+7, r1	; 0x07
    1906:	16 82       	std	Z+6, r1	; 0x06
    1908:	83 81       	ldd	r24, Z+3	; 0x03
    190a:	81 fd       	sbrc	r24, 1
    190c:	03 c0       	rjmp	.+6      	; 0x1914 <vfprintf+0x4c>
    190e:	6f ef       	ldi	r22, 0xFF	; 255
    1910:	7f ef       	ldi	r23, 0xFF	; 255
    1912:	b9 c1       	rjmp	.+882    	; 0x1c86 <vfprintf+0x3be>
    1914:	9a e0       	ldi	r25, 0x0A	; 10
    1916:	89 2e       	mov	r8, r25
    1918:	1e 01       	movw	r2, r28
    191a:	08 94       	sec
    191c:	21 1c       	adc	r2, r1
    191e:	31 1c       	adc	r3, r1
    1920:	f3 01       	movw	r30, r6
    1922:	23 81       	ldd	r18, Z+3	; 0x03
    1924:	f2 01       	movw	r30, r4
    1926:	23 fd       	sbrc	r18, 3
    1928:	85 91       	lpm	r24, Z+
    192a:	23 ff       	sbrs	r18, 3
    192c:	81 91       	ld	r24, Z+
    192e:	2f 01       	movw	r4, r30
    1930:	88 23       	and	r24, r24
    1932:	09 f4       	brne	.+2      	; 0x1936 <vfprintf+0x6e>
    1934:	a5 c1       	rjmp	.+842    	; 0x1c80 <vfprintf+0x3b8>
    1936:	85 32       	cpi	r24, 0x25	; 37
    1938:	39 f4       	brne	.+14     	; 0x1948 <vfprintf+0x80>
    193a:	23 fd       	sbrc	r18, 3
    193c:	85 91       	lpm	r24, Z+
    193e:	23 ff       	sbrs	r18, 3
    1940:	81 91       	ld	r24, Z+
    1942:	2f 01       	movw	r4, r30
    1944:	85 32       	cpi	r24, 0x25	; 37
    1946:	21 f4       	brne	.+8      	; 0x1950 <vfprintf+0x88>
    1948:	90 e0       	ldi	r25, 0x00	; 0
    194a:	b3 01       	movw	r22, r6
    194c:	cc d1       	rcall	.+920    	; 0x1ce6 <fputc>
    194e:	e8 cf       	rjmp	.-48     	; 0x1920 <vfprintf+0x58>
    1950:	98 2f       	mov	r25, r24
    1952:	ff 24       	eor	r15, r15
    1954:	ee 24       	eor	r14, r14
    1956:	99 24       	eor	r9, r9
    1958:	ff e1       	ldi	r31, 0x1F	; 31
    195a:	ff 15       	cp	r31, r15
    195c:	d0 f0       	brcs	.+52     	; 0x1992 <vfprintf+0xca>
    195e:	9b 32       	cpi	r25, 0x2B	; 43
    1960:	69 f0       	breq	.+26     	; 0x197c <vfprintf+0xb4>
    1962:	9c 32       	cpi	r25, 0x2C	; 44
    1964:	28 f4       	brcc	.+10     	; 0x1970 <vfprintf+0xa8>
    1966:	90 32       	cpi	r25, 0x20	; 32
    1968:	59 f0       	breq	.+22     	; 0x1980 <vfprintf+0xb8>
    196a:	93 32       	cpi	r25, 0x23	; 35
    196c:	91 f4       	brne	.+36     	; 0x1992 <vfprintf+0xca>
    196e:	0e c0       	rjmp	.+28     	; 0x198c <vfprintf+0xc4>
    1970:	9d 32       	cpi	r25, 0x2D	; 45
    1972:	49 f0       	breq	.+18     	; 0x1986 <vfprintf+0xbe>
    1974:	90 33       	cpi	r25, 0x30	; 48
    1976:	69 f4       	brne	.+26     	; 0x1992 <vfprintf+0xca>
    1978:	41 e0       	ldi	r20, 0x01	; 1
    197a:	24 c0       	rjmp	.+72     	; 0x19c4 <vfprintf+0xfc>
    197c:	52 e0       	ldi	r21, 0x02	; 2
    197e:	f5 2a       	or	r15, r21
    1980:	84 e0       	ldi	r24, 0x04	; 4
    1982:	f8 2a       	or	r15, r24
    1984:	28 c0       	rjmp	.+80     	; 0x19d6 <vfprintf+0x10e>
    1986:	98 e0       	ldi	r25, 0x08	; 8
    1988:	f9 2a       	or	r15, r25
    198a:	25 c0       	rjmp	.+74     	; 0x19d6 <vfprintf+0x10e>
    198c:	e0 e1       	ldi	r30, 0x10	; 16
    198e:	fe 2a       	or	r15, r30
    1990:	22 c0       	rjmp	.+68     	; 0x19d6 <vfprintf+0x10e>
    1992:	f7 fc       	sbrc	r15, 7
    1994:	29 c0       	rjmp	.+82     	; 0x19e8 <vfprintf+0x120>
    1996:	89 2f       	mov	r24, r25
    1998:	80 53       	subi	r24, 0x30	; 48
    199a:	8a 30       	cpi	r24, 0x0A	; 10
    199c:	70 f4       	brcc	.+28     	; 0x19ba <vfprintf+0xf2>
    199e:	f6 fe       	sbrs	r15, 6
    19a0:	05 c0       	rjmp	.+10     	; 0x19ac <vfprintf+0xe4>
    19a2:	98 9c       	mul	r9, r8
    19a4:	90 2c       	mov	r9, r0
    19a6:	11 24       	eor	r1, r1
    19a8:	98 0e       	add	r9, r24
    19aa:	15 c0       	rjmp	.+42     	; 0x19d6 <vfprintf+0x10e>
    19ac:	e8 9c       	mul	r14, r8
    19ae:	e0 2c       	mov	r14, r0
    19b0:	11 24       	eor	r1, r1
    19b2:	e8 0e       	add	r14, r24
    19b4:	f0 e2       	ldi	r31, 0x20	; 32
    19b6:	ff 2a       	or	r15, r31
    19b8:	0e c0       	rjmp	.+28     	; 0x19d6 <vfprintf+0x10e>
    19ba:	9e 32       	cpi	r25, 0x2E	; 46
    19bc:	29 f4       	brne	.+10     	; 0x19c8 <vfprintf+0x100>
    19be:	f6 fc       	sbrc	r15, 6
    19c0:	5f c1       	rjmp	.+702    	; 0x1c80 <vfprintf+0x3b8>
    19c2:	40 e4       	ldi	r20, 0x40	; 64
    19c4:	f4 2a       	or	r15, r20
    19c6:	07 c0       	rjmp	.+14     	; 0x19d6 <vfprintf+0x10e>
    19c8:	9c 36       	cpi	r25, 0x6C	; 108
    19ca:	19 f4       	brne	.+6      	; 0x19d2 <vfprintf+0x10a>
    19cc:	50 e8       	ldi	r21, 0x80	; 128
    19ce:	f5 2a       	or	r15, r21
    19d0:	02 c0       	rjmp	.+4      	; 0x19d6 <vfprintf+0x10e>
    19d2:	98 36       	cpi	r25, 0x68	; 104
    19d4:	49 f4       	brne	.+18     	; 0x19e8 <vfprintf+0x120>
    19d6:	f2 01       	movw	r30, r4
    19d8:	23 fd       	sbrc	r18, 3
    19da:	95 91       	lpm	r25, Z+
    19dc:	23 ff       	sbrs	r18, 3
    19de:	91 91       	ld	r25, Z+
    19e0:	2f 01       	movw	r4, r30
    19e2:	99 23       	and	r25, r25
    19e4:	09 f0       	breq	.+2      	; 0x19e8 <vfprintf+0x120>
    19e6:	b8 cf       	rjmp	.-144    	; 0x1958 <vfprintf+0x90>
    19e8:	89 2f       	mov	r24, r25
    19ea:	85 54       	subi	r24, 0x45	; 69
    19ec:	83 30       	cpi	r24, 0x03	; 3
    19ee:	18 f0       	brcs	.+6      	; 0x19f6 <vfprintf+0x12e>
    19f0:	80 52       	subi	r24, 0x20	; 32
    19f2:	83 30       	cpi	r24, 0x03	; 3
    19f4:	38 f4       	brcc	.+14     	; 0x1a04 <vfprintf+0x13c>
    19f6:	44 e0       	ldi	r20, 0x04	; 4
    19f8:	50 e0       	ldi	r21, 0x00	; 0
    19fa:	a4 0e       	add	r10, r20
    19fc:	b5 1e       	adc	r11, r21
    19fe:	5f e3       	ldi	r21, 0x3F	; 63
    1a00:	59 83       	std	Y+1, r21	; 0x01
    1a02:	0f c0       	rjmp	.+30     	; 0x1a22 <vfprintf+0x15a>
    1a04:	93 36       	cpi	r25, 0x63	; 99
    1a06:	31 f0       	breq	.+12     	; 0x1a14 <vfprintf+0x14c>
    1a08:	93 37       	cpi	r25, 0x73	; 115
    1a0a:	79 f0       	breq	.+30     	; 0x1a2a <vfprintf+0x162>
    1a0c:	93 35       	cpi	r25, 0x53	; 83
    1a0e:	09 f0       	breq	.+2      	; 0x1a12 <vfprintf+0x14a>
    1a10:	52 c0       	rjmp	.+164    	; 0x1ab6 <vfprintf+0x1ee>
    1a12:	1f c0       	rjmp	.+62     	; 0x1a52 <vfprintf+0x18a>
    1a14:	f5 01       	movw	r30, r10
    1a16:	80 81       	ld	r24, Z
    1a18:	89 83       	std	Y+1, r24	; 0x01
    1a1a:	42 e0       	ldi	r20, 0x02	; 2
    1a1c:	50 e0       	ldi	r21, 0x00	; 0
    1a1e:	a4 0e       	add	r10, r20
    1a20:	b5 1e       	adc	r11, r21
    1a22:	61 01       	movw	r12, r2
    1a24:	01 e0       	ldi	r16, 0x01	; 1
    1a26:	10 e0       	ldi	r17, 0x00	; 0
    1a28:	11 c0       	rjmp	.+34     	; 0x1a4c <vfprintf+0x184>
    1a2a:	f5 01       	movw	r30, r10
    1a2c:	c0 80       	ld	r12, Z
    1a2e:	d1 80       	ldd	r13, Z+1	; 0x01
    1a30:	f6 fc       	sbrc	r15, 6
    1a32:	03 c0       	rjmp	.+6      	; 0x1a3a <vfprintf+0x172>
    1a34:	6f ef       	ldi	r22, 0xFF	; 255
    1a36:	7f ef       	ldi	r23, 0xFF	; 255
    1a38:	02 c0       	rjmp	.+4      	; 0x1a3e <vfprintf+0x176>
    1a3a:	69 2d       	mov	r22, r9
    1a3c:	70 e0       	ldi	r23, 0x00	; 0
    1a3e:	42 e0       	ldi	r20, 0x02	; 2
    1a40:	50 e0       	ldi	r21, 0x00	; 0
    1a42:	a4 0e       	add	r10, r20
    1a44:	b5 1e       	adc	r11, r21
    1a46:	c6 01       	movw	r24, r12
    1a48:	43 d1       	rcall	.+646    	; 0x1cd0 <strnlen>
    1a4a:	8c 01       	movw	r16, r24
    1a4c:	5f e7       	ldi	r21, 0x7F	; 127
    1a4e:	f5 22       	and	r15, r21
    1a50:	13 c0       	rjmp	.+38     	; 0x1a78 <vfprintf+0x1b0>
    1a52:	f5 01       	movw	r30, r10
    1a54:	c0 80       	ld	r12, Z
    1a56:	d1 80       	ldd	r13, Z+1	; 0x01
    1a58:	f6 fc       	sbrc	r15, 6
    1a5a:	03 c0       	rjmp	.+6      	; 0x1a62 <vfprintf+0x19a>
    1a5c:	6f ef       	ldi	r22, 0xFF	; 255
    1a5e:	7f ef       	ldi	r23, 0xFF	; 255
    1a60:	02 c0       	rjmp	.+4      	; 0x1a66 <vfprintf+0x19e>
    1a62:	69 2d       	mov	r22, r9
    1a64:	70 e0       	ldi	r23, 0x00	; 0
    1a66:	42 e0       	ldi	r20, 0x02	; 2
    1a68:	50 e0       	ldi	r21, 0x00	; 0
    1a6a:	a4 0e       	add	r10, r20
    1a6c:	b5 1e       	adc	r11, r21
    1a6e:	c6 01       	movw	r24, r12
    1a70:	24 d1       	rcall	.+584    	; 0x1cba <strnlen_P>
    1a72:	8c 01       	movw	r16, r24
    1a74:	50 e8       	ldi	r21, 0x80	; 128
    1a76:	f5 2a       	or	r15, r21
    1a78:	f3 fe       	sbrs	r15, 3
    1a7a:	06 c0       	rjmp	.+12     	; 0x1a88 <vfprintf+0x1c0>
    1a7c:	18 c0       	rjmp	.+48     	; 0x1aae <vfprintf+0x1e6>
    1a7e:	80 e2       	ldi	r24, 0x20	; 32
    1a80:	90 e0       	ldi	r25, 0x00	; 0
    1a82:	b3 01       	movw	r22, r6
    1a84:	30 d1       	rcall	.+608    	; 0x1ce6 <fputc>
    1a86:	ea 94       	dec	r14
    1a88:	8e 2d       	mov	r24, r14
    1a8a:	90 e0       	ldi	r25, 0x00	; 0
    1a8c:	08 17       	cp	r16, r24
    1a8e:	19 07       	cpc	r17, r25
    1a90:	b0 f3       	brcs	.-20     	; 0x1a7e <vfprintf+0x1b6>
    1a92:	0d c0       	rjmp	.+26     	; 0x1aae <vfprintf+0x1e6>
    1a94:	f6 01       	movw	r30, r12
    1a96:	f7 fc       	sbrc	r15, 7
    1a98:	85 91       	lpm	r24, Z+
    1a9a:	f7 fe       	sbrs	r15, 7
    1a9c:	81 91       	ld	r24, Z+
    1a9e:	6f 01       	movw	r12, r30
    1aa0:	90 e0       	ldi	r25, 0x00	; 0
    1aa2:	b3 01       	movw	r22, r6
    1aa4:	20 d1       	rcall	.+576    	; 0x1ce6 <fputc>
    1aa6:	e1 10       	cpse	r14, r1
    1aa8:	ea 94       	dec	r14
    1aaa:	01 50       	subi	r16, 0x01	; 1
    1aac:	10 40       	sbci	r17, 0x00	; 0
    1aae:	01 15       	cp	r16, r1
    1ab0:	11 05       	cpc	r17, r1
    1ab2:	81 f7       	brne	.-32     	; 0x1a94 <vfprintf+0x1cc>
    1ab4:	e2 c0       	rjmp	.+452    	; 0x1c7a <vfprintf+0x3b2>
    1ab6:	94 36       	cpi	r25, 0x64	; 100
    1ab8:	11 f0       	breq	.+4      	; 0x1abe <vfprintf+0x1f6>
    1aba:	99 36       	cpi	r25, 0x69	; 105
    1abc:	61 f5       	brne	.+88     	; 0x1b16 <vfprintf+0x24e>
    1abe:	f7 fe       	sbrs	r15, 7
    1ac0:	08 c0       	rjmp	.+16     	; 0x1ad2 <vfprintf+0x20a>
    1ac2:	f5 01       	movw	r30, r10
    1ac4:	20 81       	ld	r18, Z
    1ac6:	31 81       	ldd	r19, Z+1	; 0x01
    1ac8:	42 81       	ldd	r20, Z+2	; 0x02
    1aca:	53 81       	ldd	r21, Z+3	; 0x03
    1acc:	84 e0       	ldi	r24, 0x04	; 4
    1ace:	90 e0       	ldi	r25, 0x00	; 0
    1ad0:	0a c0       	rjmp	.+20     	; 0x1ae6 <vfprintf+0x21e>
    1ad2:	f5 01       	movw	r30, r10
    1ad4:	80 81       	ld	r24, Z
    1ad6:	91 81       	ldd	r25, Z+1	; 0x01
    1ad8:	9c 01       	movw	r18, r24
    1ada:	44 27       	eor	r20, r20
    1adc:	37 fd       	sbrc	r19, 7
    1ade:	40 95       	com	r20
    1ae0:	54 2f       	mov	r21, r20
    1ae2:	82 e0       	ldi	r24, 0x02	; 2
    1ae4:	90 e0       	ldi	r25, 0x00	; 0
    1ae6:	a8 0e       	add	r10, r24
    1ae8:	b9 1e       	adc	r11, r25
    1aea:	9f e6       	ldi	r25, 0x6F	; 111
    1aec:	f9 22       	and	r15, r25
    1aee:	57 ff       	sbrs	r21, 7
    1af0:	09 c0       	rjmp	.+18     	; 0x1b04 <vfprintf+0x23c>
    1af2:	50 95       	com	r21
    1af4:	40 95       	com	r20
    1af6:	30 95       	com	r19
    1af8:	21 95       	neg	r18
    1afa:	3f 4f       	sbci	r19, 0xFF	; 255
    1afc:	4f 4f       	sbci	r20, 0xFF	; 255
    1afe:	5f 4f       	sbci	r21, 0xFF	; 255
    1b00:	e0 e8       	ldi	r30, 0x80	; 128
    1b02:	fe 2a       	or	r15, r30
    1b04:	ca 01       	movw	r24, r20
    1b06:	b9 01       	movw	r22, r18
    1b08:	a1 01       	movw	r20, r2
    1b0a:	2a e0       	ldi	r18, 0x0A	; 10
    1b0c:	30 e0       	ldi	r19, 0x00	; 0
    1b0e:	17 d1       	rcall	.+558    	; 0x1d3e <__ultoa_invert>
    1b10:	d8 2e       	mov	r13, r24
    1b12:	d2 18       	sub	r13, r2
    1b14:	3f c0       	rjmp	.+126    	; 0x1b94 <vfprintf+0x2cc>
    1b16:	95 37       	cpi	r25, 0x75	; 117
    1b18:	29 f4       	brne	.+10     	; 0x1b24 <vfprintf+0x25c>
    1b1a:	1f 2d       	mov	r17, r15
    1b1c:	1f 7e       	andi	r17, 0xEF	; 239
    1b1e:	2a e0       	ldi	r18, 0x0A	; 10
    1b20:	30 e0       	ldi	r19, 0x00	; 0
    1b22:	1d c0       	rjmp	.+58     	; 0x1b5e <vfprintf+0x296>
    1b24:	1f 2d       	mov	r17, r15
    1b26:	19 7f       	andi	r17, 0xF9	; 249
    1b28:	9f 36       	cpi	r25, 0x6F	; 111
    1b2a:	61 f0       	breq	.+24     	; 0x1b44 <vfprintf+0x27c>
    1b2c:	90 37       	cpi	r25, 0x70	; 112
    1b2e:	20 f4       	brcc	.+8      	; 0x1b38 <vfprintf+0x270>
    1b30:	98 35       	cpi	r25, 0x58	; 88
    1b32:	09 f0       	breq	.+2      	; 0x1b36 <vfprintf+0x26e>
    1b34:	a5 c0       	rjmp	.+330    	; 0x1c80 <vfprintf+0x3b8>
    1b36:	0f c0       	rjmp	.+30     	; 0x1b56 <vfprintf+0x28e>
    1b38:	90 37       	cpi	r25, 0x70	; 112
    1b3a:	39 f0       	breq	.+14     	; 0x1b4a <vfprintf+0x282>
    1b3c:	98 37       	cpi	r25, 0x78	; 120
    1b3e:	09 f0       	breq	.+2      	; 0x1b42 <vfprintf+0x27a>
    1b40:	9f c0       	rjmp	.+318    	; 0x1c80 <vfprintf+0x3b8>
    1b42:	04 c0       	rjmp	.+8      	; 0x1b4c <vfprintf+0x284>
    1b44:	28 e0       	ldi	r18, 0x08	; 8
    1b46:	30 e0       	ldi	r19, 0x00	; 0
    1b48:	0a c0       	rjmp	.+20     	; 0x1b5e <vfprintf+0x296>
    1b4a:	10 61       	ori	r17, 0x10	; 16
    1b4c:	14 fd       	sbrc	r17, 4
    1b4e:	14 60       	ori	r17, 0x04	; 4
    1b50:	20 e1       	ldi	r18, 0x10	; 16
    1b52:	30 e0       	ldi	r19, 0x00	; 0
    1b54:	04 c0       	rjmp	.+8      	; 0x1b5e <vfprintf+0x296>
    1b56:	14 fd       	sbrc	r17, 4
    1b58:	16 60       	ori	r17, 0x06	; 6
    1b5a:	20 e1       	ldi	r18, 0x10	; 16
    1b5c:	32 e0       	ldi	r19, 0x02	; 2
    1b5e:	17 ff       	sbrs	r17, 7
    1b60:	08 c0       	rjmp	.+16     	; 0x1b72 <vfprintf+0x2aa>
    1b62:	f5 01       	movw	r30, r10
    1b64:	60 81       	ld	r22, Z
    1b66:	71 81       	ldd	r23, Z+1	; 0x01
    1b68:	82 81       	ldd	r24, Z+2	; 0x02
    1b6a:	93 81       	ldd	r25, Z+3	; 0x03
    1b6c:	44 e0       	ldi	r20, 0x04	; 4
    1b6e:	50 e0       	ldi	r21, 0x00	; 0
    1b70:	08 c0       	rjmp	.+16     	; 0x1b82 <vfprintf+0x2ba>
    1b72:	f5 01       	movw	r30, r10
    1b74:	80 81       	ld	r24, Z
    1b76:	91 81       	ldd	r25, Z+1	; 0x01
    1b78:	bc 01       	movw	r22, r24
    1b7a:	80 e0       	ldi	r24, 0x00	; 0
    1b7c:	90 e0       	ldi	r25, 0x00	; 0
    1b7e:	42 e0       	ldi	r20, 0x02	; 2
    1b80:	50 e0       	ldi	r21, 0x00	; 0
    1b82:	a4 0e       	add	r10, r20
    1b84:	b5 1e       	adc	r11, r21
    1b86:	a1 01       	movw	r20, r2
    1b88:	da d0       	rcall	.+436    	; 0x1d3e <__ultoa_invert>
    1b8a:	d8 2e       	mov	r13, r24
    1b8c:	d2 18       	sub	r13, r2
    1b8e:	8f e7       	ldi	r24, 0x7F	; 127
    1b90:	f8 2e       	mov	r15, r24
    1b92:	f1 22       	and	r15, r17
    1b94:	f6 fe       	sbrs	r15, 6
    1b96:	0b c0       	rjmp	.+22     	; 0x1bae <vfprintf+0x2e6>
    1b98:	5e ef       	ldi	r21, 0xFE	; 254
    1b9a:	f5 22       	and	r15, r21
    1b9c:	d9 14       	cp	r13, r9
    1b9e:	38 f4       	brcc	.+14     	; 0x1bae <vfprintf+0x2e6>
    1ba0:	f4 fe       	sbrs	r15, 4
    1ba2:	07 c0       	rjmp	.+14     	; 0x1bb2 <vfprintf+0x2ea>
    1ba4:	f2 fc       	sbrc	r15, 2
    1ba6:	05 c0       	rjmp	.+10     	; 0x1bb2 <vfprintf+0x2ea>
    1ba8:	8f ee       	ldi	r24, 0xEF	; 239
    1baa:	f8 22       	and	r15, r24
    1bac:	02 c0       	rjmp	.+4      	; 0x1bb2 <vfprintf+0x2ea>
    1bae:	1d 2d       	mov	r17, r13
    1bb0:	01 c0       	rjmp	.+2      	; 0x1bb4 <vfprintf+0x2ec>
    1bb2:	19 2d       	mov	r17, r9
    1bb4:	f4 fe       	sbrs	r15, 4
    1bb6:	0d c0       	rjmp	.+26     	; 0x1bd2 <vfprintf+0x30a>
    1bb8:	fe 01       	movw	r30, r28
    1bba:	ed 0d       	add	r30, r13
    1bbc:	f1 1d       	adc	r31, r1
    1bbe:	80 81       	ld	r24, Z
    1bc0:	80 33       	cpi	r24, 0x30	; 48
    1bc2:	19 f4       	brne	.+6      	; 0x1bca <vfprintf+0x302>
    1bc4:	99 ee       	ldi	r25, 0xE9	; 233
    1bc6:	f9 22       	and	r15, r25
    1bc8:	08 c0       	rjmp	.+16     	; 0x1bda <vfprintf+0x312>
    1bca:	1f 5f       	subi	r17, 0xFF	; 255
    1bcc:	f2 fe       	sbrs	r15, 2
    1bce:	05 c0       	rjmp	.+10     	; 0x1bda <vfprintf+0x312>
    1bd0:	03 c0       	rjmp	.+6      	; 0x1bd8 <vfprintf+0x310>
    1bd2:	8f 2d       	mov	r24, r15
    1bd4:	86 78       	andi	r24, 0x86	; 134
    1bd6:	09 f0       	breq	.+2      	; 0x1bda <vfprintf+0x312>
    1bd8:	1f 5f       	subi	r17, 0xFF	; 255
    1bda:	0f 2d       	mov	r16, r15
    1bdc:	f3 fc       	sbrc	r15, 3
    1bde:	13 c0       	rjmp	.+38     	; 0x1c06 <vfprintf+0x33e>
    1be0:	f0 fe       	sbrs	r15, 0
    1be2:	0e c0       	rjmp	.+28     	; 0x1c00 <vfprintf+0x338>
    1be4:	1e 15       	cp	r17, r14
    1be6:	10 f0       	brcs	.+4      	; 0x1bec <vfprintf+0x324>
    1be8:	9d 2c       	mov	r9, r13
    1bea:	0a c0       	rjmp	.+20     	; 0x1c00 <vfprintf+0x338>
    1bec:	9d 2c       	mov	r9, r13
    1bee:	9e 0c       	add	r9, r14
    1bf0:	91 1a       	sub	r9, r17
    1bf2:	1e 2d       	mov	r17, r14
    1bf4:	05 c0       	rjmp	.+10     	; 0x1c00 <vfprintf+0x338>
    1bf6:	80 e2       	ldi	r24, 0x20	; 32
    1bf8:	90 e0       	ldi	r25, 0x00	; 0
    1bfa:	b3 01       	movw	r22, r6
    1bfc:	74 d0       	rcall	.+232    	; 0x1ce6 <fputc>
    1bfe:	1f 5f       	subi	r17, 0xFF	; 255
    1c00:	1e 15       	cp	r17, r14
    1c02:	c8 f3       	brcs	.-14     	; 0x1bf6 <vfprintf+0x32e>
    1c04:	04 c0       	rjmp	.+8      	; 0x1c0e <vfprintf+0x346>
    1c06:	1e 15       	cp	r17, r14
    1c08:	10 f4       	brcc	.+4      	; 0x1c0e <vfprintf+0x346>
    1c0a:	e1 1a       	sub	r14, r17
    1c0c:	01 c0       	rjmp	.+2      	; 0x1c10 <vfprintf+0x348>
    1c0e:	ee 24       	eor	r14, r14
    1c10:	04 ff       	sbrs	r16, 4
    1c12:	0e c0       	rjmp	.+28     	; 0x1c30 <vfprintf+0x368>
    1c14:	80 e3       	ldi	r24, 0x30	; 48
    1c16:	90 e0       	ldi	r25, 0x00	; 0
    1c18:	b3 01       	movw	r22, r6
    1c1a:	65 d0       	rcall	.+202    	; 0x1ce6 <fputc>
    1c1c:	02 ff       	sbrs	r16, 2
    1c1e:	1b c0       	rjmp	.+54     	; 0x1c56 <vfprintf+0x38e>
    1c20:	01 fd       	sbrc	r16, 1
    1c22:	03 c0       	rjmp	.+6      	; 0x1c2a <vfprintf+0x362>
    1c24:	88 e7       	ldi	r24, 0x78	; 120
    1c26:	90 e0       	ldi	r25, 0x00	; 0
    1c28:	0e c0       	rjmp	.+28     	; 0x1c46 <vfprintf+0x37e>
    1c2a:	88 e5       	ldi	r24, 0x58	; 88
    1c2c:	90 e0       	ldi	r25, 0x00	; 0
    1c2e:	0b c0       	rjmp	.+22     	; 0x1c46 <vfprintf+0x37e>
    1c30:	80 2f       	mov	r24, r16
    1c32:	86 78       	andi	r24, 0x86	; 134
    1c34:	81 f0       	breq	.+32     	; 0x1c56 <vfprintf+0x38e>
    1c36:	01 ff       	sbrs	r16, 1
    1c38:	02 c0       	rjmp	.+4      	; 0x1c3e <vfprintf+0x376>
    1c3a:	8b e2       	ldi	r24, 0x2B	; 43
    1c3c:	01 c0       	rjmp	.+2      	; 0x1c40 <vfprintf+0x378>
    1c3e:	80 e2       	ldi	r24, 0x20	; 32
    1c40:	f7 fc       	sbrc	r15, 7
    1c42:	8d e2       	ldi	r24, 0x2D	; 45
    1c44:	90 e0       	ldi	r25, 0x00	; 0
    1c46:	b3 01       	movw	r22, r6
    1c48:	4e d0       	rcall	.+156    	; 0x1ce6 <fputc>
    1c4a:	05 c0       	rjmp	.+10     	; 0x1c56 <vfprintf+0x38e>
    1c4c:	80 e3       	ldi	r24, 0x30	; 48
    1c4e:	90 e0       	ldi	r25, 0x00	; 0
    1c50:	b3 01       	movw	r22, r6
    1c52:	49 d0       	rcall	.+146    	; 0x1ce6 <fputc>
    1c54:	9a 94       	dec	r9
    1c56:	d9 14       	cp	r13, r9
    1c58:	c8 f3       	brcs	.-14     	; 0x1c4c <vfprintf+0x384>
    1c5a:	da 94       	dec	r13
    1c5c:	f1 01       	movw	r30, r2
    1c5e:	ed 0d       	add	r30, r13
    1c60:	f1 1d       	adc	r31, r1
    1c62:	80 81       	ld	r24, Z
    1c64:	90 e0       	ldi	r25, 0x00	; 0
    1c66:	b3 01       	movw	r22, r6
    1c68:	3e d0       	rcall	.+124    	; 0x1ce6 <fputc>
    1c6a:	dd 20       	and	r13, r13
    1c6c:	b1 f7       	brne	.-20     	; 0x1c5a <vfprintf+0x392>
    1c6e:	05 c0       	rjmp	.+10     	; 0x1c7a <vfprintf+0x3b2>
    1c70:	80 e2       	ldi	r24, 0x20	; 32
    1c72:	90 e0       	ldi	r25, 0x00	; 0
    1c74:	b3 01       	movw	r22, r6
    1c76:	37 d0       	rcall	.+110    	; 0x1ce6 <fputc>
    1c78:	ea 94       	dec	r14
    1c7a:	ee 20       	and	r14, r14
    1c7c:	c9 f7       	brne	.-14     	; 0x1c70 <vfprintf+0x3a8>
    1c7e:	50 ce       	rjmp	.-864    	; 0x1920 <vfprintf+0x58>
    1c80:	f3 01       	movw	r30, r6
    1c82:	66 81       	ldd	r22, Z+6	; 0x06
    1c84:	77 81       	ldd	r23, Z+7	; 0x07
    1c86:	cb 01       	movw	r24, r22
    1c88:	2b 96       	adiw	r28, 0x0b	; 11
    1c8a:	0f b6       	in	r0, 0x3f	; 63
    1c8c:	f8 94       	cli
    1c8e:	de bf       	out	0x3e, r29	; 62
    1c90:	0f be       	out	0x3f, r0	; 63
    1c92:	cd bf       	out	0x3d, r28	; 61
    1c94:	cf 91       	pop	r28
    1c96:	df 91       	pop	r29
    1c98:	1f 91       	pop	r17
    1c9a:	0f 91       	pop	r16
    1c9c:	ff 90       	pop	r15
    1c9e:	ef 90       	pop	r14
    1ca0:	df 90       	pop	r13
    1ca2:	cf 90       	pop	r12
    1ca4:	bf 90       	pop	r11
    1ca6:	af 90       	pop	r10
    1ca8:	9f 90       	pop	r9
    1caa:	8f 90       	pop	r8
    1cac:	7f 90       	pop	r7
    1cae:	6f 90       	pop	r6
    1cb0:	5f 90       	pop	r5
    1cb2:	4f 90       	pop	r4
    1cb4:	3f 90       	pop	r3
    1cb6:	2f 90       	pop	r2
    1cb8:	08 95       	ret

00001cba <strnlen_P>:
    1cba:	fc 01       	movw	r30, r24
    1cbc:	05 90       	lpm	r0, Z+
    1cbe:	61 50       	subi	r22, 0x01	; 1
    1cc0:	70 40       	sbci	r23, 0x00	; 0
    1cc2:	01 10       	cpse	r0, r1
    1cc4:	d8 f7       	brcc	.-10     	; 0x1cbc <strnlen_P+0x2>
    1cc6:	80 95       	com	r24
    1cc8:	90 95       	com	r25
    1cca:	8e 0f       	add	r24, r30
    1ccc:	9f 1f       	adc	r25, r31
    1cce:	08 95       	ret

00001cd0 <strnlen>:
    1cd0:	fc 01       	movw	r30, r24
    1cd2:	61 50       	subi	r22, 0x01	; 1
    1cd4:	70 40       	sbci	r23, 0x00	; 0
    1cd6:	01 90       	ld	r0, Z+
    1cd8:	01 10       	cpse	r0, r1
    1cda:	d8 f7       	brcc	.-10     	; 0x1cd2 <strnlen+0x2>
    1cdc:	80 95       	com	r24
    1cde:	90 95       	com	r25
    1ce0:	8e 0f       	add	r24, r30
    1ce2:	9f 1f       	adc	r25, r31
    1ce4:	08 95       	ret

00001ce6 <fputc>:
    1ce6:	0f 93       	push	r16
    1ce8:	1f 93       	push	r17
    1cea:	cf 93       	push	r28
    1cec:	df 93       	push	r29
    1cee:	8c 01       	movw	r16, r24
    1cf0:	eb 01       	movw	r28, r22
    1cf2:	8b 81       	ldd	r24, Y+3	; 0x03
    1cf4:	81 ff       	sbrs	r24, 1
    1cf6:	1b c0       	rjmp	.+54     	; 0x1d2e <fputc+0x48>
    1cf8:	82 ff       	sbrs	r24, 2
    1cfa:	0d c0       	rjmp	.+26     	; 0x1d16 <fputc+0x30>
    1cfc:	2e 81       	ldd	r18, Y+6	; 0x06
    1cfe:	3f 81       	ldd	r19, Y+7	; 0x07
    1d00:	8c 81       	ldd	r24, Y+4	; 0x04
    1d02:	9d 81       	ldd	r25, Y+5	; 0x05
    1d04:	28 17       	cp	r18, r24
    1d06:	39 07       	cpc	r19, r25
    1d08:	64 f4       	brge	.+24     	; 0x1d22 <fputc+0x3c>
    1d0a:	e8 81       	ld	r30, Y
    1d0c:	f9 81       	ldd	r31, Y+1	; 0x01
    1d0e:	01 93       	st	Z+, r16
    1d10:	f9 83       	std	Y+1, r31	; 0x01
    1d12:	e8 83       	st	Y, r30
    1d14:	06 c0       	rjmp	.+12     	; 0x1d22 <fputc+0x3c>
    1d16:	e8 85       	ldd	r30, Y+8	; 0x08
    1d18:	f9 85       	ldd	r31, Y+9	; 0x09
    1d1a:	80 2f       	mov	r24, r16
    1d1c:	09 95       	icall
    1d1e:	89 2b       	or	r24, r25
    1d20:	31 f4       	brne	.+12     	; 0x1d2e <fputc+0x48>
    1d22:	8e 81       	ldd	r24, Y+6	; 0x06
    1d24:	9f 81       	ldd	r25, Y+7	; 0x07
    1d26:	01 96       	adiw	r24, 0x01	; 1
    1d28:	9f 83       	std	Y+7, r25	; 0x07
    1d2a:	8e 83       	std	Y+6, r24	; 0x06
    1d2c:	02 c0       	rjmp	.+4      	; 0x1d32 <fputc+0x4c>
    1d2e:	0f ef       	ldi	r16, 0xFF	; 255
    1d30:	1f ef       	ldi	r17, 0xFF	; 255
    1d32:	c8 01       	movw	r24, r16
    1d34:	df 91       	pop	r29
    1d36:	cf 91       	pop	r28
    1d38:	1f 91       	pop	r17
    1d3a:	0f 91       	pop	r16
    1d3c:	08 95       	ret

00001d3e <__ultoa_invert>:
    1d3e:	fa 01       	movw	r30, r20
    1d40:	aa 27       	eor	r26, r26
    1d42:	28 30       	cpi	r18, 0x08	; 8
    1d44:	51 f1       	breq	.+84     	; 0x1d9a <__ultoa_invert+0x5c>
    1d46:	20 31       	cpi	r18, 0x10	; 16
    1d48:	81 f1       	breq	.+96     	; 0x1daa <__ultoa_invert+0x6c>
    1d4a:	e8 94       	clt
    1d4c:	6f 93       	push	r22
    1d4e:	6e 7f       	andi	r22, 0xFE	; 254
    1d50:	6e 5f       	subi	r22, 0xFE	; 254
    1d52:	7f 4f       	sbci	r23, 0xFF	; 255
    1d54:	8f 4f       	sbci	r24, 0xFF	; 255
    1d56:	9f 4f       	sbci	r25, 0xFF	; 255
    1d58:	af 4f       	sbci	r26, 0xFF	; 255
    1d5a:	b1 e0       	ldi	r27, 0x01	; 1
    1d5c:	3e d0       	rcall	.+124    	; 0x1dda <__ultoa_invert+0x9c>
    1d5e:	b4 e0       	ldi	r27, 0x04	; 4
    1d60:	3c d0       	rcall	.+120    	; 0x1dda <__ultoa_invert+0x9c>
    1d62:	67 0f       	add	r22, r23
    1d64:	78 1f       	adc	r23, r24
    1d66:	89 1f       	adc	r24, r25
    1d68:	9a 1f       	adc	r25, r26
    1d6a:	a1 1d       	adc	r26, r1
    1d6c:	68 0f       	add	r22, r24
    1d6e:	79 1f       	adc	r23, r25
    1d70:	8a 1f       	adc	r24, r26
    1d72:	91 1d       	adc	r25, r1
    1d74:	a1 1d       	adc	r26, r1
    1d76:	6a 0f       	add	r22, r26
    1d78:	71 1d       	adc	r23, r1
    1d7a:	81 1d       	adc	r24, r1
    1d7c:	91 1d       	adc	r25, r1
    1d7e:	a1 1d       	adc	r26, r1
    1d80:	20 d0       	rcall	.+64     	; 0x1dc2 <__ultoa_invert+0x84>
    1d82:	09 f4       	brne	.+2      	; 0x1d86 <__ultoa_invert+0x48>
    1d84:	68 94       	set
    1d86:	3f 91       	pop	r19
    1d88:	2a e0       	ldi	r18, 0x0A	; 10
    1d8a:	26 9f       	mul	r18, r22
    1d8c:	11 24       	eor	r1, r1
    1d8e:	30 19       	sub	r19, r0
    1d90:	30 5d       	subi	r19, 0xD0	; 208
    1d92:	31 93       	st	Z+, r19
    1d94:	de f6       	brtc	.-74     	; 0x1d4c <__ultoa_invert+0xe>
    1d96:	cf 01       	movw	r24, r30
    1d98:	08 95       	ret
    1d9a:	46 2f       	mov	r20, r22
    1d9c:	47 70       	andi	r20, 0x07	; 7
    1d9e:	40 5d       	subi	r20, 0xD0	; 208
    1da0:	41 93       	st	Z+, r20
    1da2:	b3 e0       	ldi	r27, 0x03	; 3
    1da4:	0f d0       	rcall	.+30     	; 0x1dc4 <__ultoa_invert+0x86>
    1da6:	c9 f7       	brne	.-14     	; 0x1d9a <__ultoa_invert+0x5c>
    1da8:	f6 cf       	rjmp	.-20     	; 0x1d96 <__ultoa_invert+0x58>
    1daa:	46 2f       	mov	r20, r22
    1dac:	4f 70       	andi	r20, 0x0F	; 15
    1dae:	40 5d       	subi	r20, 0xD0	; 208
    1db0:	4a 33       	cpi	r20, 0x3A	; 58
    1db2:	18 f0       	brcs	.+6      	; 0x1dba <__ultoa_invert+0x7c>
    1db4:	49 5d       	subi	r20, 0xD9	; 217
    1db6:	31 fd       	sbrc	r19, 1
    1db8:	40 52       	subi	r20, 0x20	; 32
    1dba:	41 93       	st	Z+, r20
    1dbc:	02 d0       	rcall	.+4      	; 0x1dc2 <__ultoa_invert+0x84>
    1dbe:	a9 f7       	brne	.-22     	; 0x1daa <__ultoa_invert+0x6c>
    1dc0:	ea cf       	rjmp	.-44     	; 0x1d96 <__ultoa_invert+0x58>
    1dc2:	b4 e0       	ldi	r27, 0x04	; 4
    1dc4:	a6 95       	lsr	r26
    1dc6:	97 95       	ror	r25
    1dc8:	87 95       	ror	r24
    1dca:	77 95       	ror	r23
    1dcc:	67 95       	ror	r22
    1dce:	ba 95       	dec	r27
    1dd0:	c9 f7       	brne	.-14     	; 0x1dc4 <__ultoa_invert+0x86>
    1dd2:	00 97       	sbiw	r24, 0x00	; 0
    1dd4:	61 05       	cpc	r22, r1
    1dd6:	71 05       	cpc	r23, r1
    1dd8:	08 95       	ret
    1dda:	9b 01       	movw	r18, r22
    1ddc:	ac 01       	movw	r20, r24
    1dde:	0a 2e       	mov	r0, r26
    1de0:	06 94       	lsr	r0
    1de2:	57 95       	ror	r21
    1de4:	47 95       	ror	r20
    1de6:	37 95       	ror	r19
    1de8:	27 95       	ror	r18
    1dea:	ba 95       	dec	r27
    1dec:	c9 f7       	brne	.-14     	; 0x1de0 <__ultoa_invert+0xa2>
    1dee:	62 0f       	add	r22, r18
    1df0:	73 1f       	adc	r23, r19
    1df2:	84 1f       	adc	r24, r20
    1df4:	95 1f       	adc	r25, r21
    1df6:	a0 1d       	adc	r26, r0
    1df8:	08 95       	ret

00001dfa <_exit>:
    1dfa:	f8 94       	cli

00001dfc <__stop_program>:
    1dfc:	ff cf       	rjmp	.-2      	; 0x1dfc <__stop_program>
