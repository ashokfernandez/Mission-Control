
MouseHost.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000030  00800100  000017e6  0000187a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000017e6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000013  00800130  00800130  000018aa  2**0
                  ALLOC
  3 .stab         00000eac  00000000  00000000  000018ac  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000025c  00000000  00000000  00002758  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000398  00000000  00000000  000029b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000797  00000000  00000000  00002d4c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00004a67  00000000  00000000  000034e3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001ac6  00000000  00000000  00007f4a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00003d86  00000000  00000000  00009a10  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000004f0  00000000  00000000  0000d798  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00002337  00000000  00000000  0000dc88  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00001f81  00000000  00000000  0000ffbf  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000408  00000000  00000000  00011f40  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:

	return USB_Host_SendControlRequest(Buffer);
}

uint8_t USB_Host_ClearPipeStall(const uint8_t EndpointNum)
{
       0:	51 c1       	rjmp	.+674    	; 0x2a4 <__ctors_end>
		Pipe_DisablePipe();
	}
}

bool Pipe_IsEndpointBound(const uint8_t EndpointAddress)
{
       2:	00 00       	nop
{
	USB_GetNextDescriptorOfType(BytesRem, CurrConfigLoc, AfterType);

	if (*BytesRem)
	  USB_GetNextDescriptorOfType(BytesRem, CurrConfigLoc, Type);
}
       4:	6d c1       	rjmp	.+730    	; 0x2e0 <__bad_interrupt>
			Length--;
		}
	}

	return PIPE_RWSTREAM_NoError;
}
       6:	00 00       	nop
       8:	6b c1       	rjmp	.+726    	; 0x2e0 <__bad_interrupt>
       a:	00 00       	nop
       c:	69 c1       	rjmp	.+722    	; 0x2e0 <__bad_interrupt>
       e:	00 00       	nop
      10:	67 c1       	rjmp	.+718    	; 0x2e0 <__bad_interrupt>
      12:	00 00       	nop
      14:	65 c1       	rjmp	.+714    	; 0x2e0 <__bad_interrupt>
      16:	00 00       	nop
      18:	63 c1       	rjmp	.+710    	; 0x2e0 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	61 c1       	rjmp	.+706    	; 0x2e0 <__bad_interrupt>
      1e:	00 00       	nop
      20:	5f c1       	rjmp	.+702    	; 0x2e0 <__bad_interrupt>
      22:	00 00       	nop
      24:	5d c1       	rjmp	.+698    	; 0x2e0 <__bad_interrupt>
      26:	00 00       	nop
      28:	32 c6       	rjmp	.+3172   	; 0xc8e <__vector_10>
      2a:	00 00       	nop
      2c:	59 c1       	rjmp	.+690    	; 0x2e0 <__bad_interrupt>
      2e:	00 00       	nop
      30:	57 c1       	rjmp	.+686    	; 0x2e0 <__bad_interrupt>
      32:	00 00       	nop
      34:	55 c1       	rjmp	.+682    	; 0x2e0 <__bad_interrupt>
      36:	00 00       	nop
      38:	53 c1       	rjmp	.+678    	; 0x2e0 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	51 c1       	rjmp	.+674    	; 0x2e0 <__bad_interrupt>
      3e:	00 00       	nop
      40:	4f c1       	rjmp	.+670    	; 0x2e0 <__bad_interrupt>
      42:	00 00       	nop
      44:	4d c1       	rjmp	.+666    	; 0x2e0 <__bad_interrupt>
      46:	00 00       	nop
      48:	4b c1       	rjmp	.+662    	; 0x2e0 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	49 c1       	rjmp	.+658    	; 0x2e0 <__bad_interrupt>
      4e:	00 00       	nop
      50:	47 c1       	rjmp	.+654    	; 0x2e0 <__bad_interrupt>
      52:	00 00       	nop
      54:	45 c1       	rjmp	.+650    	; 0x2e0 <__bad_interrupt>
      56:	00 00       	nop
      58:	43 c1       	rjmp	.+646    	; 0x2e0 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	41 c1       	rjmp	.+642    	; 0x2e0 <__bad_interrupt>
      5e:	00 00       	nop
      60:	3f c1       	rjmp	.+638    	; 0x2e0 <__bad_interrupt>
      62:	00 00       	nop
      64:	3d c1       	rjmp	.+634    	; 0x2e0 <__bad_interrupt>
      66:	00 00       	nop
      68:	3b c1       	rjmp	.+630    	; 0x2e0 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	39 c1       	rjmp	.+626    	; 0x2e0 <__bad_interrupt>
      6e:	00 00       	nop
      70:	37 c1       	rjmp	.+622    	; 0x2e0 <__bad_interrupt>
      72:	00 00       	nop
      74:	35 c1       	rjmp	.+618    	; 0x2e0 <__bad_interrupt>
      76:	00 00       	nop
      78:	33 c1       	rjmp	.+614    	; 0x2e0 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	31 c1       	rjmp	.+610    	; 0x2e0 <__bad_interrupt>
      7e:	00 00       	nop
      80:	2f c1       	rjmp	.+606    	; 0x2e0 <__bad_interrupt>
      82:	00 00       	nop
      84:	2d c1       	rjmp	.+602    	; 0x2e0 <__bad_interrupt>
      86:	00 00       	nop
      88:	2b c1       	rjmp	.+598    	; 0x2e0 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	29 c1       	rjmp	.+594    	; 0x2e0 <__bad_interrupt>
      8e:	00 00       	nop
      90:	27 c1       	rjmp	.+590    	; 0x2e0 <__bad_interrupt>
      92:	00 00       	nop
      94:	25 c1       	rjmp	.+586    	; 0x2e0 <__bad_interrupt>
      96:	00 00       	nop

00000098 <__c.4168>:
      98:	4d 6f 75 73 65 20 45 6e 75 6d 65 72 61 74 65 64     Mouse Enumerated
      a8:	2e 0d 0a 00                                         ....

000000ac <__c.4166>:
      ac:	1b 5b 33 31 6d 43 6f 6e 74 72 6f 6c 20 45 72 72     .[31mControl Err
      bc:	6f 72 20 28 53 65 74 20 50 72 6f 74 6f 63 6f 6c     or (Set Protocol
      cc:	29 2e 0d 0a 20 2d 2d 20 45 72 72 6f 72 20 43 6f     )... -- Error Co
      dc:	64 65 3a 20 25 64 0d 0a 1b 5b 33 37 6d 00           de: %d...[37m.

000000ea <__c.4163>:
      ea:	1b 5b 33 31 6d 43 6f 6e 74 72 6f 6c 20 45 72 72     .[31mControl Err
      fa:	6f 72 20 28 53 65 74 20 43 6f 6e 66 69 67 75 72     or (Set Configur
     10a:	61 74 69 6f 6e 29 2e 0d 0a 20 2d 2d 20 45 72 72     ation)... -- Err
     11a:	6f 72 20 43 6f 64 65 3a 20 25 64 0d 0a 1b 5b 33     or Code: %d...[3
     12a:	37 6d 00                                            7m.

0000012d <__c.4160>:
     12d:	20 2d 2d 20 45 72 72 6f 72 20 43 6f 64 65 3a 20      -- Error Code: 
     13d:	25 64 0d 0a 1b 5b 33 37 6d 00                       %d...[37m.

00000147 <__c.4158>:
     147:	1b 5b 33 31 6d 49 6e 76 61 6c 69 64 20 44 65 76     .[31mInvalid Dev
     157:	69 63 65 2e 0d 0a 00                                ice....

0000015e <__c.4156>:
     15e:	1b 5b 33 31 6d 43 6f 6e 74 72 6f 6c 20 45 72 72     .[31mControl Err
     16e:	6f 72 20 28 47 65 74 20 43 6f 6e 66 69 67 75 72     or (Get Configur
     17e:	61 74 69 6f 6e 29 2e 0d 0a 00                       ation)....

00000188 <__c.4154>:
     188:	47 65 74 74 69 6e 67 20 43 6f 6e 66 69 67 20 44     Getting Config D
     198:	61 74 61 2e 0d 0a 00                                ata....

0000019f <__c.4138>:
     19f:	64 58 3a 25 32 64 20 64 59 3a 25 32 64 20 42 75     dX:%2d dY:%2d Bu
     1af:	74 74 6f 6e 3a 25 64 0d 0a 00                       tton:%d...

000001b9 <__c.4127>:
     1b9:	1b 5b 33 31 6d 44 65 76 20 45 6e 75 6d 20 45 72     .[31mDev Enum Er
     1c9:	72 6f 72 0d 0a 20 2d 2d 20 45 72 72 6f 72 20 43     ror.. -- Error C
     1d9:	6f 64 65 20 25 64 0d 0a 20 2d 2d 20 53 75 62 20     ode %d.. -- Sub 
     1e9:	45 72 72 6f 72 20 43 6f 64 65 20 25 64 0d 0a 20     Error Code %d.. 
     1f9:	2d 2d 20 49 6e 20 53 74 61 74 65 20 25 64 0d 0a     -- In State %d..
     209:	1b 5b 33 37 6d 00                                   .[37m.

0000020f <__c.4119>:
     20f:	1b 5b 33 31 6d 48 6f 73 74 20 4d 6f 64 65 20 45     .[31mHost Mode E
     21f:	72 72 6f 72 0d 0a 20 2d 2d 20 45 72 72 6f 72 20     rror.. -- Error 
     22f:	43 6f 64 65 20 25 64 0d 0a 1b 5b 33 37 6d 00        Code %d...[37m.

0000023e <__c.4111>:
     23e:	1b 5b 33 32 6d 44 65 76 69 63 65 20 55 6e 61 74     .[32mDevice Unat
     24e:	74 61 63 68 65 64 2e 0d 0a 1b 5b 33 37 6d 00        tached....[37m.

0000025d <__c.4106>:
     25d:	1b 5b 33 32 6d 44 65 76 69 63 65 20 41 74 74 61     .[32mDevice Atta
     26d:	63 68 65 64 2e 0d 0a 1b 5b 33 37 6d 00              ched....[37m.

0000027a <__c.4092>:
     27a:	1b 5b 33 36 6d 4d 6f 75 73 65 20 48 49 44 20 48     .[36mMouse HID H
     28a:	6f 73 74 20 44 65 6d 6f 20 72 75 6e 6e 69 6e 67     ost Demo running
     29a:	2e 0d 0a 1b 5b 33 37 6d 00 00                       ....[37m..

000002a4 <__ctors_end>:
     2a4:	11 24       	eor	r1, r1
     2a6:	1f be       	out	0x3f, r1	; 63
     2a8:	cf ef       	ldi	r28, 0xFF	; 255
     2aa:	d0 e2       	ldi	r29, 0x20	; 32
     2ac:	de bf       	out	0x3e, r29	; 62
     2ae:	cd bf       	out	0x3d, r28	; 61

000002b0 <__do_copy_data>:
     2b0:	11 e0       	ldi	r17, 0x01	; 1
     2b2:	a0 e0       	ldi	r26, 0x00	; 0
     2b4:	b1 e0       	ldi	r27, 0x01	; 1
     2b6:	e6 ee       	ldi	r30, 0xE6	; 230
     2b8:	f7 e1       	ldi	r31, 0x17	; 23
     2ba:	00 e0       	ldi	r16, 0x00	; 0
     2bc:	0b bf       	out	0x3b, r16	; 59
     2be:	02 c0       	rjmp	.+4      	; 0x2c4 <__do_copy_data+0x14>
     2c0:	07 90       	elpm	r0, Z+
     2c2:	0d 92       	st	X+, r0
     2c4:	a0 33       	cpi	r26, 0x30	; 48
     2c6:	b1 07       	cpc	r27, r17
     2c8:	d9 f7       	brne	.-10     	; 0x2c0 <__do_copy_data+0x10>

000002ca <__do_clear_bss>:
     2ca:	11 e0       	ldi	r17, 0x01	; 1
     2cc:	a0 e3       	ldi	r26, 0x30	; 48
     2ce:	b1 e0       	ldi	r27, 0x01	; 1
     2d0:	01 c0       	rjmp	.+2      	; 0x2d4 <.do_clear_bss_start>

000002d2 <.do_clear_bss_loop>:
     2d2:	1d 92       	st	X+, r1

000002d4 <.do_clear_bss_start>:
     2d4:	a3 34       	cpi	r26, 0x43	; 67
     2d6:	b1 07       	cpc	r27, r17
     2d8:	e1 f7       	brne	.-8      	; 0x2d2 <.do_clear_bss_loop>
     2da:	6f d1       	rcall	.+734    	; 0x5ba <main>
     2dc:	0c 94 f1 0b 	jmp	0x17e2	; 0x17e2 <_exit>

000002e0 <__bad_interrupt>:
     2e0:	8f ce       	rjmp	.-738    	; 0x0 <__vectors>

000002e2 <EVENT_USB_Host_DeviceEnumerationComplete>:
				PORTD &= ~LEDMask;
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
			{
				PORTD = ((PORTD & ~LEDS_ALL_LEDS) | LEDMask);
     2e2:	8b b1       	in	r24, 0x0b	; 11
     2e4:	8f 70       	andi	r24, 0x0F	; 15
     2e6:	80 66       	ori	r24, 0x60	; 96
     2e8:	8b b9       	out	0x0b, r24	; 11
 *  enumerated by the host and is now ready to be used by the application.
 */
void EVENT_USB_Host_DeviceEnumerationComplete(void)
{
	LEDs_SetAllLEDs(LEDMASK_USB_READY);
}
     2ea:	08 95       	ret

000002ec <EVENT_USB_Host_DeviceUnattached>:
/** Event handler for the USB_DeviceUnattached event. This indicates that a device has been removed from the host, and
 *  stops the library USB task management process.
 */
void EVENT_USB_Host_DeviceUnattached(void)
{
	puts_P(PSTR(ESC_FG_GREEN "Device Unattached.\r\n" ESC_FG_WHITE));
     2ec:	8e e3       	ldi	r24, 0x3E	; 62
     2ee:	92 e0       	ldi	r25, 0x02	; 2
     2f0:	aa d7       	rcall	.+3924   	; 0x1246 <puts_P>
     2f2:	8b b1       	in	r24, 0x0b	; 11
     2f4:	8f 70       	andi	r24, 0x0F	; 15
     2f6:	80 61       	ori	r24, 0x10	; 16
     2f8:	8b b9       	out	0x0b, r24	; 11
	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
}
     2fa:	08 95       	ret

000002fc <EVENT_USB_Host_DeviceAttached>:
/** Event handler for the USB_DeviceAttached event. This indicates that a device has been attached to the host, and
 *  starts the library USB task to begin the enumeration and USB management process.
 */
void EVENT_USB_Host_DeviceAttached(void)
{
	puts_P(PSTR(ESC_FG_GREEN "Device Attached.\r\n" ESC_FG_WHITE));
     2fc:	8d e5       	ldi	r24, 0x5D	; 93
     2fe:	92 e0       	ldi	r25, 0x02	; 2
     300:	a2 d7       	rcall	.+3908   	; 0x1246 <puts_P>
     302:	8b b1       	in	r24, 0x0b	; 11
     304:	8f 70       	andi	r24, 0x0F	; 15
     306:	80 6a       	ori	r24, 0xA0	; 160
     308:	8b b9       	out	0x0b, r24	; 11
	LEDs_SetAllLEDs(LEDMASK_USB_ENUMERATING);
}
     30a:	08 95       	ret

0000030c <EVENT_USB_Host_DeviceEnumerationFailed>:
 *  enumerating an attached USB device.
 */
void EVENT_USB_Host_DeviceEnumerationFailed(const uint8_t ErrorCode,
                                            const uint8_t SubErrorCode)
{
	printf_P(PSTR(ESC_FG_RED "Dev Enum Error\r\n"
     30c:	90 91 3c 01 	lds	r25, 0x013C
     310:	2d b7       	in	r18, 0x3d	; 61
     312:	3e b7       	in	r19, 0x3e	; 62
     314:	28 50       	subi	r18, 0x08	; 8
     316:	30 40       	sbci	r19, 0x00	; 0
     318:	0f b6       	in	r0, 0x3f	; 63
     31a:	f8 94       	cli
     31c:	3e bf       	out	0x3e, r19	; 62
     31e:	0f be       	out	0x3f, r0	; 63
     320:	2d bf       	out	0x3d, r18	; 61
     322:	ed b7       	in	r30, 0x3d	; 61
     324:	fe b7       	in	r31, 0x3e	; 62
     326:	31 96       	adiw	r30, 0x01	; 1
     328:	29 eb       	ldi	r18, 0xB9	; 185
     32a:	31 e0       	ldi	r19, 0x01	; 1
     32c:	ad b7       	in	r26, 0x3d	; 61
     32e:	be b7       	in	r27, 0x3e	; 62
     330:	12 96       	adiw	r26, 0x02	; 2
     332:	3c 93       	st	X, r19
     334:	2e 93       	st	-X, r18
     336:	11 97       	sbiw	r26, 0x01	; 1
     338:	82 83       	std	Z+2, r24	; 0x02
     33a:	13 82       	std	Z+3, r1	; 0x03
     33c:	64 83       	std	Z+4, r22	; 0x04
     33e:	15 82       	std	Z+5, r1	; 0x05
     340:	96 83       	std	Z+6, r25	; 0x06
     342:	17 82       	std	Z+7, r1	; 0x07
     344:	5e d7       	rcall	.+3772   	; 0x1202 <printf_P>
     346:	8b b1       	in	r24, 0x0b	; 11
     348:	8f 70       	andi	r24, 0x0F	; 15
     34a:	80 69       	ori	r24, 0x90	; 144
     34c:	8b b9       	out	0x0b, r24	; 11
     34e:	2d b7       	in	r18, 0x3d	; 61
     350:	3e b7       	in	r19, 0x3e	; 62
     352:	28 5f       	subi	r18, 0xF8	; 248
     354:	3f 4f       	sbci	r19, 0xFF	; 255
     356:	0f b6       	in	r0, 0x3f	; 63
     358:	f8 94       	cli
     35a:	3e bf       	out	0x3e, r19	; 62
     35c:	0f be       	out	0x3f, r0	; 63
     35e:	2d bf       	out	0x3d, r18	; 61
	                         " -- Error Code %d\r\n"
	                         " -- Sub Error Code %d\r\n"
	                         " -- In State %d\r\n" ESC_FG_WHITE), ErrorCode, SubErrorCode, USB_HostState);

	LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
}
     360:	08 95       	ret

00000362 <ReadNextReport>:

/** Reads in and processes the next report from the attached device, displaying the report
 *  contents on the board LEDs and via the serial port.
 */
void ReadNextReport(void)
{
     362:	df 93       	push	r29
     364:	cf 93       	push	r28
     366:	00 d0       	rcall	.+0      	; 0x368 <ReadNextReport+0x6>
     368:	0f 92       	push	r0
     36a:	cd b7       	in	r28, 0x3d	; 61
     36c:	de b7       	in	r29, 0x3e	; 62
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
     36e:	81 e0       	ldi	r24, 0x01	; 1
     370:	80 93 a7 00 	sts	0x00A7, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
     374:	80 91 a9 00 	lds	r24, 0x00A9
     378:	8f 7b       	andi	r24, 0xBF	; 191
     37a:	80 93 a9 00 	sts	0x00A9, r24
			 *  \return Boolean true if the current pipe has received an IN packet, false otherwise.
			 */
			static inline bool Pipe_IsINReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsINReceived(void)
			{
				return ((UPINTX & (1 << RXINI)) ? true : false);
     37e:	80 91 a6 00 	lds	r24, 0x00A6

	/* Unfreeze keyboard data pipe */
	Pipe_Unfreeze();

	/* Check to see if a packet has been received */
	if (!(Pipe_IsINReceived()))
     382:	80 fd       	sbrc	r24, 0
     384:	04 c0       	rjmp	.+8      	; 0x38e <ReadNextReport+0x2c>
     386:	8b b1       	in	r24, 0x0b	; 11
     388:	8f 70       	andi	r24, 0x0F	; 15
     38a:	8b b9       	out	0x0b, r24	; 11
     38c:	50 c0       	rjmp	.+160    	; 0x42e <ReadNextReport+0xcc>
			 *  \return Boolean true if the currently selected pipe may be read from or written to, depending on its direction.
			 */
			static inline bool Pipe_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsReadWriteAllowed(void)
			{
				return ((UPINTX & (1 << RWAL)) ? true : false);
     38e:	80 91 a6 00 	lds	r24, 0x00A6

		return;
	}

	/* Ensure pipe contains data before trying to read from it */
	if (Pipe_IsReadWriteAllowed())
     392:	85 ff       	sbrs	r24, 5
     394:	47 c0       	rjmp	.+142    	; 0x424 <ReadNextReport+0xc2>
	{
		/* Read in mouse report data */
		Pipe_Read_Stream_LE(&MouseReport, sizeof(MouseReport));
     396:	ce 01       	movw	r24, r28
     398:	01 96       	adiw	r24, 0x01	; 1
     39a:	63 e0       	ldi	r22, 0x03	; 3
     39c:	70 e0       	ldi	r23, 0x00	; 0
     39e:	d1 d6       	rcall	.+3490   	; 0x1142 <Pipe_Read_Stream_LE>

		/* Alter status LEDs according to mouse X movement */
		if (MouseReport.X > 0)
     3a0:	3a 81       	ldd	r19, Y+2	; 0x02
     3a2:	13 16       	cp	r1, r19
     3a4:	14 f4       	brge	.+4      	; 0x3aa <ReadNextReport+0x48>
     3a6:	90 e1       	ldi	r25, 0x10	; 16
     3a8:	05 c0       	rjmp	.+10     	; 0x3b4 <ReadNextReport+0x52>
		  LEDMask |= LEDS_LED1;
		else if (MouseReport.X < 0)
     3aa:	33 23       	and	r19, r19
     3ac:	11 f0       	breq	.+4      	; 0x3b2 <ReadNextReport+0x50>
     3ae:	90 e2       	ldi	r25, 0x20	; 32
     3b0:	01 c0       	rjmp	.+2      	; 0x3b4 <ReadNextReport+0x52>
     3b2:	90 e0       	ldi	r25, 0x00	; 0
		  LEDMask |= LEDS_LED2;

		/* Alter status LEDs according to mouse Y movement */
		if (MouseReport.Y > 0)
     3b4:	2b 81       	ldd	r18, Y+3	; 0x03
     3b6:	12 16       	cp	r1, r18
     3b8:	14 f4       	brge	.+4      	; 0x3be <ReadNextReport+0x5c>
		  LEDMask |= LEDS_LED3;
     3ba:	90 68       	ori	r25, 0x80	; 128
     3bc:	02 c0       	rjmp	.+4      	; 0x3c2 <ReadNextReport+0x60>
		else if (MouseReport.Y < 0)
     3be:	21 11       	cpse	r18, r1
		  LEDMask |= LEDS_LED4;
     3c0:	90 64       	ori	r25, 0x40	; 64

		/* Alter status LEDs according to mouse button position */
		if (MouseReport.Button)
     3c2:	49 81       	ldd	r20, Y+1	; 0x01
     3c4:	41 11       	cpse	r20, r1
     3c6:	90 ef       	ldi	r25, 0xF0	; 240
     3c8:	8b b1       	in	r24, 0x0b	; 11
     3ca:	8f 70       	andi	r24, 0x0F	; 15
     3cc:	98 2b       	or	r25, r24
     3ce:	9b b9       	out	0x0b, r25	; 11
		  LEDMask  = LEDS_ALL_LEDS;

		LEDs_SetAllLEDs(LEDMask);

		/* Print mouse report data through the serial port */
		printf_P(PSTR("dX:%2d dY:%2d Button:%d\r\n"), MouseReport.X,
     3d0:	8d b7       	in	r24, 0x3d	; 61
     3d2:	9e b7       	in	r25, 0x3e	; 62
     3d4:	08 97       	sbiw	r24, 0x08	; 8
     3d6:	0f b6       	in	r0, 0x3f	; 63
     3d8:	f8 94       	cli
     3da:	9e bf       	out	0x3e, r25	; 62
     3dc:	0f be       	out	0x3f, r0	; 63
     3de:	8d bf       	out	0x3d, r24	; 61
     3e0:	ed b7       	in	r30, 0x3d	; 61
     3e2:	fe b7       	in	r31, 0x3e	; 62
     3e4:	31 96       	adiw	r30, 0x01	; 1
     3e6:	8f e9       	ldi	r24, 0x9F	; 159
     3e8:	91 e0       	ldi	r25, 0x01	; 1
     3ea:	ad b7       	in	r26, 0x3d	; 61
     3ec:	be b7       	in	r27, 0x3e	; 62
     3ee:	12 96       	adiw	r26, 0x02	; 2
     3f0:	9c 93       	st	X, r25
     3f2:	8e 93       	st	-X, r24
     3f4:	11 97       	sbiw	r26, 0x01	; 1
     3f6:	83 2f       	mov	r24, r19
     3f8:	99 27       	eor	r25, r25
     3fa:	87 fd       	sbrc	r24, 7
     3fc:	90 95       	com	r25
     3fe:	93 83       	std	Z+3, r25	; 0x03
     400:	82 83       	std	Z+2, r24	; 0x02
     402:	82 2f       	mov	r24, r18
     404:	99 27       	eor	r25, r25
     406:	87 fd       	sbrc	r24, 7
     408:	90 95       	com	r25
     40a:	95 83       	std	Z+5, r25	; 0x05
     40c:	84 83       	std	Z+4, r24	; 0x04
     40e:	46 83       	std	Z+6, r20	; 0x06
     410:	17 82       	std	Z+7, r1	; 0x07
     412:	f7 d6       	rcall	.+3566   	; 0x1202 <printf_P>
     414:	8d b7       	in	r24, 0x3d	; 61
     416:	9e b7       	in	r25, 0x3e	; 62
     418:	08 96       	adiw	r24, 0x08	; 8
     41a:	0f b6       	in	r0, 0x3f	; 63
     41c:	f8 94       	cli
     41e:	9e bf       	out	0x3e, r25	; 62
     420:	0f be       	out	0x3f, r0	; 63
     422:	8d bf       	out	0x3d, r24	; 61
			 *  \ingroup Group_PipePacketManagement
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
     424:	80 91 a6 00 	lds	r24, 0x00A6
     428:	8e 77       	andi	r24, 0x7E	; 126
     42a:	80 93 a6 00 	sts	0x00A6, r24

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
     42e:	80 91 a9 00 	lds	r24, 0x00A9
     432:	80 64       	ori	r24, 0x40	; 64
     434:	80 93 a9 00 	sts	0x00A9, r24
	/* Clear the IN endpoint, ready for next data packet */
	Pipe_ClearIN();

	/* Refreeze mouse data pipe */
	Pipe_Freeze();
}
     438:	0f 90       	pop	r0
     43a:	0f 90       	pop	r0
     43c:	0f 90       	pop	r0
     43e:	cf 91       	pop	r28
     440:	df 91       	pop	r29
     442:	08 95       	ret

00000444 <Mouse_HID_Task>:

/** Task to set the configuration of the attached device after it has been enumerated, and to read and process
 *  HID reports from the device and display the results onto the board LEDs.
 */
void Mouse_HID_Task(void)
{
     444:	1f 93       	push	r17
	uint8_t ErrorCode;

	/* Switch to determine what user-application handled host state the host state machine is in */
	switch (USB_HostState)
     446:	80 91 3c 01 	lds	r24, 0x013C
     44a:	8b 30       	cpi	r24, 0x0B	; 11
     44c:	21 f0       	breq	.+8      	; 0x456 <Mouse_HID_Task+0x12>
     44e:	8c 30       	cpi	r24, 0x0C	; 12
     450:	09 f0       	breq	.+2      	; 0x454 <Mouse_HID_Task+0x10>
     452:	60 c0       	rjmp	.+192    	; 0x514 <Mouse_HID_Task+0xd0>
     454:	5e c0       	rjmp	.+188    	; 0x512 <Mouse_HID_Task+0xce>
	{
		case HOST_STATE_Addressed:
			puts_P(PSTR("Getting Config Data.\r\n"));
     456:	88 e8       	ldi	r24, 0x88	; 136
     458:	91 e0       	ldi	r25, 0x01	; 1
     45a:	f5 d6       	rcall	.+3562   	; 0x1246 <puts_P>

			/* Get and process the configuration descriptor data */
			if ((ErrorCode = ProcessConfigurationDescriptor()) != SuccessfulConfigRead)
     45c:	d4 d0       	rcall	.+424    	; 0x606 <ProcessConfigurationDescriptor>
     45e:	18 2f       	mov	r17, r24
     460:	88 23       	and	r24, r24
     462:	b9 f0       	breq	.+46     	; 0x492 <Mouse_HID_Task+0x4e>
			{
				if (ErrorCode == ControlError)
     464:	81 30       	cpi	r24, 0x01	; 1
     466:	19 f4       	brne	.+6      	; 0x46e <Mouse_HID_Task+0x2a>
				  puts_P(PSTR(ESC_FG_RED "Control Error (Get Configuration).\r\n"));
     468:	8e e5       	ldi	r24, 0x5E	; 94
     46a:	91 e0       	ldi	r25, 0x01	; 1
     46c:	02 c0       	rjmp	.+4      	; 0x472 <Mouse_HID_Task+0x2e>
				else
				  puts_P(PSTR(ESC_FG_RED "Invalid Device.\r\n"));
     46e:	87 e4       	ldi	r24, 0x47	; 71
     470:	91 e0       	ldi	r25, 0x01	; 1
     472:	e9 d6       	rcall	.+3538   	; 0x1246 <puts_P>

				printf_P(PSTR(" -- Error Code: %d\r\n" ESC_FG_WHITE), ErrorCode);
     474:	00 d0       	rcall	.+0      	; 0x476 <Mouse_HID_Task+0x32>
     476:	00 d0       	rcall	.+0      	; 0x478 <Mouse_HID_Task+0x34>
     478:	ed b7       	in	r30, 0x3d	; 61
     47a:	fe b7       	in	r31, 0x3e	; 62
     47c:	31 96       	adiw	r30, 0x01	; 1
     47e:	8d e2       	ldi	r24, 0x2D	; 45
     480:	91 e0       	ldi	r25, 0x01	; 1
     482:	ad b7       	in	r26, 0x3d	; 61
     484:	be b7       	in	r27, 0x3e	; 62
     486:	12 96       	adiw	r26, 0x02	; 2
     488:	9c 93       	st	X, r25
     48a:	8e 93       	st	-X, r24
     48c:	11 97       	sbiw	r26, 0x01	; 1
     48e:	12 83       	std	Z+2, r17	; 0x02
     490:	2c c0       	rjmp	.+88     	; 0x4ea <Mouse_HID_Task+0xa6>
				USB_HostState = HOST_STATE_WaitForDeviceRemoval;
				break;
			}

			/* Set the device configuration to the first configuration (rarely do devices use multiple configurations) */
			if ((ErrorCode = USB_Host_SetDeviceConfiguration(1)) != HOST_SENDCONTROL_Successful)
     492:	81 e0       	ldi	r24, 0x01	; 1
     494:	c5 d1       	rcall	.+906    	; 0x820 <USB_Host_SetDeviceConfiguration>
     496:	28 2f       	mov	r18, r24
     498:	88 23       	and	r24, r24
     49a:	41 f0       	breq	.+16     	; 0x4ac <Mouse_HID_Task+0x68>
			{
				printf_P(PSTR(ESC_FG_RED "Control Error (Set Configuration).\r\n"
     49c:	00 d0       	rcall	.+0      	; 0x49e <Mouse_HID_Task+0x5a>
     49e:	00 d0       	rcall	.+0      	; 0x4a0 <Mouse_HID_Task+0x5c>
     4a0:	ed b7       	in	r30, 0x3d	; 61
     4a2:	fe b7       	in	r31, 0x3e	; 62
     4a4:	31 96       	adiw	r30, 0x01	; 1
     4a6:	8a ee       	ldi	r24, 0xEA	; 234
     4a8:	90 e0       	ldi	r25, 0x00	; 0
     4aa:	18 c0       	rjmp	.+48     	; 0x4dc <Mouse_HID_Task+0x98>
				USB_HostState = HOST_STATE_WaitForDeviceRemoval;
				break;
			}

			/* HID class request to set the mouse protocol to the Boot Protocol */
			USB_ControlRequest = (USB_Request_Header_t)
     4ac:	a4 e3       	ldi	r26, 0x34	; 52
     4ae:	b1 e0       	ldi	r27, 0x01	; 1
     4b0:	e0 e0       	ldi	r30, 0x00	; 0
     4b2:	f1 e0       	ldi	r31, 0x01	; 1
     4b4:	88 e0       	ldi	r24, 0x08	; 8
     4b6:	01 90       	ld	r0, Z+
     4b8:	0d 92       	st	X+, r0
     4ba:	81 50       	subi	r24, 0x01	; 1
     4bc:	e1 f7       	brne	.-8      	; 0x4b6 <Mouse_HID_Task+0x72>
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
     4be:	10 92 a7 00 	sts	0x00A7, r1

			/* Select the control pipe for the request transfer */
			Pipe_SelectPipe(PIPE_CONTROLPIPE);

			/* Send the request, display error and wait for device detach if request fails */
			if ((ErrorCode = USB_Host_SendControlRequest(NULL)) != HOST_SENDCONTROL_Successful)
     4c2:	80 e0       	ldi	r24, 0x00	; 0
     4c4:	90 e0       	ldi	r25, 0x00	; 0
     4c6:	3b d5       	rcall	.+2678   	; 0xf3e <USB_Host_SendControlRequest>
     4c8:	28 2f       	mov	r18, r24
     4ca:	88 23       	and	r24, r24
     4cc:	d9 f0       	breq	.+54     	; 0x504 <Mouse_HID_Task+0xc0>
			{
				printf_P(PSTR(ESC_FG_RED "Control Error (Set Protocol).\r\n"
     4ce:	00 d0       	rcall	.+0      	; 0x4d0 <Mouse_HID_Task+0x8c>
     4d0:	00 d0       	rcall	.+0      	; 0x4d2 <Mouse_HID_Task+0x8e>
     4d2:	ed b7       	in	r30, 0x3d	; 61
     4d4:	fe b7       	in	r31, 0x3e	; 62
     4d6:	31 96       	adiw	r30, 0x01	; 1
     4d8:	8c ea       	ldi	r24, 0xAC	; 172
     4da:	90 e0       	ldi	r25, 0x00	; 0
     4dc:	ad b7       	in	r26, 0x3d	; 61
     4de:	be b7       	in	r27, 0x3e	; 62
     4e0:	12 96       	adiw	r26, 0x02	; 2
     4e2:	9c 93       	st	X, r25
     4e4:	8e 93       	st	-X, r24
     4e6:	11 97       	sbiw	r26, 0x01	; 1
     4e8:	22 83       	std	Z+2, r18	; 0x02
     4ea:	13 82       	std	Z+3, r1	; 0x03
     4ec:	8a d6       	rcall	.+3348   	; 0x1202 <printf_P>
     4ee:	8b b1       	in	r24, 0x0b	; 11
     4f0:	8f 70       	andi	r24, 0x0F	; 15
     4f2:	80 69       	ori	r24, 0x90	; 144
     4f4:	8b b9       	out	0x0b, r24	; 11

				/* Indicate error status */
				LEDs_SetAllLEDs(LEDMASK_USB_ERROR);

				/* Wait until USB device disconnected */
				USB_HostState = HOST_STATE_WaitForDeviceRemoval;
     4f6:	10 92 3c 01 	sts	0x013C, r1
     4fa:	0f 90       	pop	r0
     4fc:	0f 90       	pop	r0
     4fe:	0f 90       	pop	r0
     500:	0f 90       	pop	r0
     502:	08 c0       	rjmp	.+16     	; 0x514 <Mouse_HID_Task+0xd0>
				break;
			}

			puts_P(PSTR("Mouse Enumerated.\r\n"));
     504:	88 e9       	ldi	r24, 0x98	; 152
     506:	90 e0       	ldi	r25, 0x00	; 0
     508:	9e d6       	rcall	.+3388   	; 0x1246 <puts_P>

			USB_HostState = HOST_STATE_Configured;
     50a:	8c e0       	ldi	r24, 0x0C	; 12
     50c:	80 93 3c 01 	sts	0x013C, r24
     510:	01 c0       	rjmp	.+2      	; 0x514 <Mouse_HID_Task+0xd0>
			break;
		case HOST_STATE_Configured:
			/* If a report has been received, read and process it */
			ReadNextReport();
     512:	27 df       	rcall	.-434    	; 0x362 <ReadNextReport>

			break;
	}
}
     514:	1f 91       	pop	r17
     516:	08 95       	ret

00000518 <EVENT_USB_Host_HostError>:
	LEDs_SetAllLEDs(LEDMASK_USB_READY);
}

/** Event handler for the USB_HostError event. This indicates that a hardware error occurred while in host mode. */
void EVENT_USB_Host_HostError(const uint8_t ErrorCode)
{
     518:	1f 93       	push	r17
     51a:	18 2f       	mov	r17, r24
	USB_ShutDown();
     51c:	93 d3       	rcall	.+1830   	; 0xc44 <USB_ShutDown>

	printf_P(PSTR(ESC_FG_RED "Host Mode Error\r\n"
     51e:	00 d0       	rcall	.+0      	; 0x520 <EVENT_USB_Host_HostError+0x8>
     520:	00 d0       	rcall	.+0      	; 0x522 <EVENT_USB_Host_HostError+0xa>
     522:	ed b7       	in	r30, 0x3d	; 61
     524:	fe b7       	in	r31, 0x3e	; 62
     526:	31 96       	adiw	r30, 0x01	; 1
     528:	8f e0       	ldi	r24, 0x0F	; 15
     52a:	92 e0       	ldi	r25, 0x02	; 2
     52c:	ad b7       	in	r26, 0x3d	; 61
     52e:	be b7       	in	r27, 0x3e	; 62
     530:	12 96       	adiw	r26, 0x02	; 2
     532:	9c 93       	st	X, r25
     534:	8e 93       	st	-X, r24
     536:	11 97       	sbiw	r26, 0x01	; 1
     538:	12 83       	std	Z+2, r17	; 0x02
     53a:	13 82       	std	Z+3, r1	; 0x03
     53c:	62 d6       	rcall	.+3268   	; 0x1202 <printf_P>
     53e:	8b b1       	in	r24, 0x0b	; 11
     540:	8f 70       	andi	r24, 0x0F	; 15
     542:	80 69       	ori	r24, 0x90	; 144
     544:	8b b9       	out	0x0b, r24	; 11
     546:	0f 90       	pop	r0
     548:	0f 90       	pop	r0
     54a:	0f 90       	pop	r0
     54c:	0f 90       	pop	r0
     54e:	ff cf       	rjmp	.-2      	; 0x54e <EVENT_USB_Host_HostError+0x36>

00000550 <SetupHardware>:

/** Configures the board hardware and chip peripherals for the demo's functionality. */
void SetupHardware(void)
{
	/* Disable watchdog if enabled by bootloader/fuses */
	MCUSR &= ~(1 << WDRF);
     550:	84 b7       	in	r24, 0x34	; 52
     552:	87 7f       	andi	r24, 0xF7	; 247
     554:	84 bf       	out	0x34, r24	; 52
	wdt_disable();
     556:	38 e1       	ldi	r19, 0x18	; 24
     558:	0f b6       	in	r0, 0x3f	; 63
     55a:	f8 94       	cli
     55c:	30 93 60 00 	sts	0x0060, r19
     560:	10 92 60 00 	sts	0x0060, r1
     564:	0f be       	out	0x3f, r0	; 63

	/* Disable clock division */
	clock_prescale_set(clock_div_1);
     566:	80 e0       	ldi	r24, 0x00	; 0
     568:	90 e0       	ldi	r25, 0x00	; 0
     56a:	20 e8       	ldi	r18, 0x80	; 128
     56c:	0f b6       	in	r0, 0x3f	; 63
     56e:	f8 94       	cli
     570:	20 93 61 00 	sts	0x0061, r18
     574:	80 93 61 00 	sts	0x0061, r24
     578:	0f be       	out	0x3f, r0	; 63
			 *  \param[in] DoubleSpeed  Enables double speed mode when set, halving the sample time to double the baud rate.
			 */
			static inline void Serial_Init(const uint32_t BaudRate,
			                               const bool DoubleSpeed)
			{
				UBRR1  = (DoubleSpeed ? SERIAL_2X_UBBRVAL(BaudRate) : SERIAL_UBBRVAL(BaudRate));
     57a:	83 e3       	ldi	r24, 0x33	; 51
     57c:	90 e0       	ldi	r25, 0x00	; 0
     57e:	90 93 cd 00 	sts	0x00CD, r25
     582:	80 93 cc 00 	sts	0x00CC, r24

				UCSR1C = ((1 << UCSZ11) | (1 << UCSZ10));
     586:	86 e0       	ldi	r24, 0x06	; 6
     588:	80 93 ca 00 	sts	0x00CA, r24
				UCSR1A = (DoubleSpeed ? (1 << U2X1) : 0);
     58c:	10 92 c8 00 	sts	0x00C8, r1
				UCSR1B = ((1 << TXEN1)  | (1 << RXEN1));
     590:	30 93 c9 00 	sts	0x00C9, r19

				DDRD  |= (1 << 3);
     594:	53 9a       	sbi	0x0a, 3	; 10
				PORTD |= (1 << 2);
     596:	5a 9a       	sbi	0x0b, 2	; 11
			static inline void SerialStream_Init(const uint32_t BaudRate,
			                                     const bool DoubleSpeed)
			{
				Serial_Init(BaudRate, DoubleSpeed);

				stdout = &USARTStream;
     598:	81 e2       	ldi	r24, 0x21	; 33
     59a:	91 e0       	ldi	r25, 0x01	; 1
     59c:	90 93 40 01 	sts	0x0140, r25
     5a0:	80 93 3f 01 	sts	0x013F, r24
				stdin  = &USARTStream;
     5a4:	90 93 3e 01 	sts	0x013E, r25
     5a8:	80 93 3d 01 	sts	0x013D, r24

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void LEDs_Init(void)
			{
				DDRD  |=  LEDS_ALL_LEDS;
     5ac:	8a b1       	in	r24, 0x0a	; 10
     5ae:	80 6f       	ori	r24, 0xF0	; 240
     5b0:	8a b9       	out	0x0a, r24	; 10
				PORTD &= ~LEDS_ALL_LEDS;
     5b2:	8b b1       	in	r24, 0x0b	; 11
     5b4:	8f 70       	andi	r24, 0x0F	; 15
     5b6:	8b b9       	out	0x0b, r24	; 11

	/* Hardware Initialization */
	SerialStream_Init(9600, false);
	LEDs_Init();
	USB_Init();
}
     5b8:	3c c3       	rjmp	.+1656   	; 0xc32 <USB_Init>

000005ba <main>:
/** Main program entry point. This routine configures the hardware required by the application, then
 *  enters a loop to run the application tasks in sequence.
 */
int main(void)
{
	SetupHardware();
     5ba:	ca df       	rcall	.-108    	; 0x550 <SetupHardware>

	puts_P(PSTR(ESC_FG_CYAN "Mouse HID Host Demo running.\r\n" ESC_FG_WHITE));
     5bc:	8a e7       	ldi	r24, 0x7A	; 122
     5be:	92 e0       	ldi	r25, 0x02	; 2
     5c0:	42 d6       	rcall	.+3204   	; 0x1246 <puts_P>
				PORTD &= ~LEDMask;
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
			{
				PORTD = ((PORTD & ~LEDS_ALL_LEDS) | LEDMask);
     5c2:	8b b1       	in	r24, 0x0b	; 11
     5c4:	8f 70       	andi	r24, 0x0F	; 15
     5c6:	80 61       	ori	r24, 0x10	; 16
     5c8:	8b b9       	out	0x0b, r24	; 11

	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
	sei();
     5ca:	78 94       	sei

	for (;;)
	{
		Mouse_HID_Task();
     5cc:	3b df       	rcall	.-394    	; 0x444 <Mouse_HID_Task>
		USB_USBTask();
     5ce:	ec d5       	rcall	.+3032   	; 0x11a8 <USB_USBTask>
     5d0:	fd cf       	rjmp	.-6      	; 0x5cc <main+0x12>

000005d2 <DComp_NextMouseInterface>:
 *  This comparator searches for the next Interface descriptor of the correct Mouse HID Class and Protocol values.
 *
 *  \return A value from the DSEARCH_Return_ErrorCodes_t enum
 */
uint8_t DComp_NextMouseInterface(void* CurrentDescriptor)
{
     5d2:	fc 01       	movw	r30, r24
	USB_Descriptor_Header_t* Header = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Header_t);

	/* Determine if the current descriptor is an interface descriptor */
	if (Header->Type == DTYPE_Interface)
     5d4:	81 81       	ldd	r24, Z+1	; 0x01
     5d6:	84 30       	cpi	r24, 0x04	; 4
     5d8:	41 f4       	brne	.+16     	; 0x5ea <DComp_NextMouseInterface+0x18>
	{
		USB_Descriptor_Interface_t* Interface = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Interface_t);

		/* Check the HID descriptor class and protocol, break out if correct class/protocol interface found */
		if ((Interface->Class    == HID_CSCP_HIDClass) &&
     5da:	85 81       	ldd	r24, Z+5	; 0x05
     5dc:	83 30       	cpi	r24, 0x03	; 3
     5de:	29 f4       	brne	.+10     	; 0x5ea <DComp_NextMouseInterface+0x18>
     5e0:	87 81       	ldd	r24, Z+7	; 0x07
     5e2:	82 30       	cpi	r24, 0x02	; 2
     5e4:	11 f4       	brne	.+4      	; 0x5ea <DComp_NextMouseInterface+0x18>
     5e6:	80 e0       	ldi	r24, 0x00	; 0
     5e8:	08 95       	ret
     5ea:	82 e0       	ldi	r24, 0x02	; 2
		}
	}

	/* Current descriptor does not match what this comparator is looking for */
	return DESCRIPTOR_SEARCH_NotFound;
}
     5ec:	08 95       	ret

000005ee <DComp_NextMouseInterfaceDataEndpoint>:
uint8_t DComp_NextMouseInterfaceDataEndpoint(void* CurrentDescriptor)
{
	USB_Descriptor_Header_t* Header = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Header_t);

	/* Determine the type of the current descriptor */
	if (Header->Type == DTYPE_Endpoint)
     5ee:	fc 01       	movw	r30, r24
     5f0:	81 81       	ldd	r24, Z+1	; 0x01
     5f2:	85 30       	cpi	r24, 0x05	; 5
     5f4:	11 f4       	brne	.+4      	; 0x5fa <DComp_NextMouseInterfaceDataEndpoint+0xc>
     5f6:	80 e0       	ldi	r24, 0x00	; 0
     5f8:	08 95       	ret
	  return DESCRIPTOR_SEARCH_Found;
	else if (Header->Type == DTYPE_Interface)
     5fa:	84 30       	cpi	r24, 0x04	; 4
     5fc:	11 f0       	breq	.+4      	; 0x602 <DComp_NextMouseInterfaceDataEndpoint+0x14>
     5fe:	82 e0       	ldi	r24, 0x02	; 2
     600:	08 95       	ret
     602:	81 e0       	ldi	r24, 0x01	; 1
	  return DESCRIPTOR_SEARCH_Fail;
	else
	  return DESCRIPTOR_SEARCH_NotFound;
}
     604:	08 95       	ret

00000606 <ProcessConfigurationDescriptor>:
 *  This routine searches for a HID interface descriptor containing at least one Interrupt type IN endpoint.
 *
 *  \return An error code from the \ref MouseHost_GetConfigDescriptorDataCodes_t enum.
 */
uint8_t ProcessConfigurationDescriptor(void)
{
     606:	af 92       	push	r10
     608:	bf 92       	push	r11
     60a:	cf 92       	push	r12
     60c:	df 92       	push	r13
     60e:	ef 92       	push	r14
     610:	ff 92       	push	r15
     612:	0f 93       	push	r16
     614:	1f 93       	push	r17
     616:	df 93       	push	r29
     618:	cf 93       	push	r28
     61a:	cd b7       	in	r28, 0x3d	; 61
     61c:	de b7       	in	r29, 0x3e	; 62
     61e:	c4 50       	subi	r28, 0x04	; 4
     620:	d2 40       	sbci	r29, 0x02	; 2
     622:	0f b6       	in	r0, 0x3f	; 63
     624:	f8 94       	cli
     626:	de bf       	out	0x3e, r29	; 62
     628:	0f be       	out	0x3f, r0	; 63
     62a:	cd bf       	out	0x3d, r28	; 61
	uint8_t  ConfigDescriptorData[512];
	void*    CurrConfigLocation = ConfigDescriptorData;
     62c:	ae 01       	movw	r20, r28
     62e:	4b 5f       	subi	r20, 0xFB	; 251
     630:	5f 4f       	sbci	r21, 0xFF	; 255
     632:	5a 83       	std	Y+2, r21	; 0x02
     634:	49 83       	std	Y+1, r20	; 0x01

	USB_Descriptor_Interface_t* HIDInterface   = NULL;
	USB_Descriptor_Endpoint_t*  DataINEndpoint = NULL;

	/* Retrieve the entire configuration descriptor into the allocated buffer */
	switch (USB_Host_GetDeviceConfigDescriptor(1, &CurrConfigBytesRem, ConfigDescriptorData, sizeof(ConfigDescriptorData)))
     636:	83 e0       	ldi	r24, 0x03	; 3
     638:	c8 2e       	mov	r12, r24
     63a:	d1 2c       	mov	r13, r1
     63c:	cc 0e       	add	r12, r28
     63e:	dd 1e       	adc	r13, r29
     640:	81 e0       	ldi	r24, 0x01	; 1
     642:	b6 01       	movw	r22, r12
     644:	20 e0       	ldi	r18, 0x00	; 0
     646:	32 e0       	ldi	r19, 0x02	; 2
     648:	f6 d3       	rcall	.+2028   	; 0xe36 <USB_Host_GetDeviceConfigDescriptor>
     64a:	85 30       	cpi	r24, 0x05	; 5
     64c:	29 f0       	breq	.+10     	; 0x658 <ProcessConfigurationDescriptor+0x52>
     64e:	86 30       	cpi	r24, 0x06	; 6
     650:	69 f0       	breq	.+26     	; 0x66c <ProcessConfigurationDescriptor+0x66>
     652:	88 23       	and	r24, r24
     654:	19 f0       	breq	.+6      	; 0x65c <ProcessConfigurationDescriptor+0x56>
     656:	0c c0       	rjmp	.+24     	; 0x670 <ProcessConfigurationDescriptor+0x6a>
     658:	82 e0       	ldi	r24, 0x02	; 2
     65a:	37 c0       	rjmp	.+110    	; 0x6ca <ProcessConfigurationDescriptor+0xc4>
     65c:	00 e0       	ldi	r16, 0x00	; 0
     65e:	10 e0       	ldi	r17, 0x00	; 0
	}

	while (!(DataINEndpoint))
	{
		/* See if we've found a likely compatible interface, and if there is an endpoint within that interface */
		if (!(HIDInterface) ||
     660:	56 01       	movw	r10, r12
     662:	7e 01       	movw	r14, r28
     664:	08 94       	sec
     666:	e1 1c       	adc	r14, r1
     668:	f1 1c       	adc	r15, r1
     66a:	04 c0       	rjmp	.+8      	; 0x674 <ProcessConfigurationDescriptor+0x6e>

	USB_Descriptor_Interface_t* HIDInterface   = NULL;
	USB_Descriptor_Endpoint_t*  DataINEndpoint = NULL;

	/* Retrieve the entire configuration descriptor into the allocated buffer */
	switch (USB_Host_GetDeviceConfigDescriptor(1, &CurrConfigBytesRem, ConfigDescriptorData, sizeof(ConfigDescriptorData)))
     66c:	83 e0       	ldi	r24, 0x03	; 3
     66e:	2d c0       	rjmp	.+90     	; 0x6ca <ProcessConfigurationDescriptor+0xc4>
     670:	81 e0       	ldi	r24, 0x01	; 1
     672:	2b c0       	rjmp	.+86     	; 0x6ca <ProcessConfigurationDescriptor+0xc4>
	}

	while (!(DataINEndpoint))
	{
		/* See if we've found a likely compatible interface, and if there is an endpoint within that interface */
		if (!(HIDInterface) ||
     674:	01 15       	cp	r16, r1
     676:	11 05       	cpc	r17, r1
     678:	39 f0       	breq	.+14     	; 0x688 <ProcessConfigurationDescriptor+0x82>
     67a:	c5 01       	movw	r24, r10
     67c:	b7 01       	movw	r22, r14
     67e:	47 ef       	ldi	r20, 0xF7	; 247
     680:	52 e0       	ldi	r21, 0x02	; 2
     682:	98 d3       	rcall	.+1840   	; 0xdb4 <USB_GetNextDescriptorComp>
     684:	88 23       	and	r24, r24
     686:	61 f0       	breq	.+24     	; 0x6a0 <ProcessConfigurationDescriptor+0x9a>
		    USB_GetNextDescriptorComp(&CurrConfigBytesRem, &CurrConfigLocation,
		                              DComp_NextMouseInterfaceDataEndpoint) != DESCRIPTOR_SEARCH_COMP_Found)
		{
			/* Get the next HID interface from the configuration descriptor */
			if (USB_GetNextDescriptorComp(&CurrConfigBytesRem, &CurrConfigLocation,
     688:	c5 01       	movw	r24, r10
     68a:	b7 01       	movw	r22, r14
     68c:	49 ee       	ldi	r20, 0xE9	; 233
     68e:	52 e0       	ldi	r21, 0x02	; 2
     690:	91 d3       	rcall	.+1826   	; 0xdb4 <USB_GetNextDescriptorComp>
     692:	88 23       	and	r24, r24
     694:	11 f0       	breq	.+4      	; 0x69a <ProcessConfigurationDescriptor+0x94>
     696:	84 e0       	ldi	r24, 0x04	; 4
     698:	18 c0       	rjmp	.+48     	; 0x6ca <ProcessConfigurationDescriptor+0xc4>
				/* Descriptor not found, error out */
				return NoCompatibleInterfaceFound;
			}

			/* Save the interface in case we need to refer back to it later */
			HIDInterface = DESCRIPTOR_PCAST(CurrConfigLocation, USB_Descriptor_Interface_t);
     69a:	09 81       	ldd	r16, Y+1	; 0x01
     69c:	1a 81       	ldd	r17, Y+2	; 0x02
     69e:	ea cf       	rjmp	.-44     	; 0x674 <ProcessConfigurationDescriptor+0x6e>
			/* Skip the remainder of the loop as we have not found an endpoint yet */
			continue;
		}

		/* Retrieve the endpoint address from the endpoint descriptor */
		USB_Descriptor_Endpoint_t* EndpointData = DESCRIPTOR_PCAST(CurrConfigLocation, USB_Descriptor_Endpoint_t);
     6a0:	c9 80       	ldd	r12, Y+1	; 0x01
     6a2:	da 80       	ldd	r13, Y+2	; 0x02

		/* If the endpoint is a IN type endpoint */
		if (EndpointData->EndpointAddress & ENDPOINT_DESCRIPTOR_DIR_IN)
     6a4:	f6 01       	movw	r30, r12
     6a6:	22 81       	ldd	r18, Z+2	; 0x02
     6a8:	27 ff       	sbrs	r18, 7
     6aa:	e4 cf       	rjmp	.-56     	; 0x674 <ProcessConfigurationDescriptor+0x6e>
			return DescriptorTooLarge;
		default:
			return ControlError;
	}

	while (!(DataINEndpoint))
     6ac:	c1 14       	cp	r12, r1
     6ae:	d1 04       	cpc	r13, r1
     6b0:	09 f3       	breq	.-62     	; 0x674 <ProcessConfigurationDescriptor+0x6e>
		if (EndpointData->EndpointAddress & ENDPOINT_DESCRIPTOR_DIR_IN)
		  DataINEndpoint = EndpointData;
	}

	/* Configure the HID data IN pipe */
	Pipe_ConfigurePipe(MOUSE_DATA_IN_PIPE, EP_TYPE_INTERRUPT, PIPE_TOKEN_IN,
     6b2:	04 81       	ldd	r16, Z+4	; 0x04
     6b4:	15 81       	ldd	r17, Z+5	; 0x05
     6b6:	81 e0       	ldi	r24, 0x01	; 1
     6b8:	63 e0       	ldi	r22, 0x03	; 3
     6ba:	40 e1       	ldi	r20, 0x10	; 16
     6bc:	ee 24       	eor	r14, r14
     6be:	f4 d1       	rcall	.+1000   	; 0xaa8 <Pipe_ConfigurePipe>
	                   DataINEndpoint->EndpointAddress, DataINEndpoint->EndpointSize, PIPE_BANK_SINGLE);
	Pipe_SetInterruptPeriod(DataINEndpoint->PollingIntervalMS);
     6c0:	f6 01       	movw	r30, r12
     6c2:	86 81       	ldd	r24, Z+6	; 0x06
			 *  \param[in] Milliseconds  Number of milliseconds between each pipe poll.
			 */
			static inline void Pipe_SetInterruptPeriod(const uint8_t Milliseconds) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetInterruptPeriod(const uint8_t Milliseconds)
			{
				UPCFG2X = Milliseconds;
     6c4:	80 93 ad 00 	sts	0x00AD, r24
     6c8:	80 e0       	ldi	r24, 0x00	; 0

	/* Valid data found, return success */
	return SuccessfulConfigRead;
}
     6ca:	cc 5f       	subi	r28, 0xFC	; 252
     6cc:	dd 4f       	sbci	r29, 0xFD	; 253
     6ce:	0f b6       	in	r0, 0x3f	; 63
     6d0:	f8 94       	cli
     6d2:	de bf       	out	0x3e, r29	; 62
     6d4:	0f be       	out	0x3f, r0	; 63
     6d6:	cd bf       	out	0x3d, r28	; 61
     6d8:	cf 91       	pop	r28
     6da:	df 91       	pop	r29
     6dc:	1f 91       	pop	r17
     6de:	0f 91       	pop	r16
     6e0:	ff 90       	pop	r15
     6e2:	ef 90       	pop	r14
     6e4:	df 90       	pop	r13
     6e6:	cf 90       	pop	r12
     6e8:	bf 90       	pop	r11
     6ea:	af 90       	pop	r10
     6ec:	08 95       	ret

000006ee <USB_Host_WaitMS>:
		USB_ResetInterface();
	}
}

uint8_t USB_Host_WaitMS(uint8_t MS)
{
     6ee:	98 2f       	mov	r25, r24
			 *  \return Boolean true if the bus is currently suspended, false otherwise.
			 */
			static inline bool USB_Host_IsBusSuspended(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusSuspended(void)
			{
				return ((UHCON & (1 << SOFEN)) ? false : true);
     6f0:	20 91 9e 00 	lds	r18, 0x009E
	bool    BusSuspended = USB_Host_IsBusSuspended();
	uint8_t ErrorCode    = HOST_WAITERROR_Successful;
	bool    HSOFIEnabled = USB_INT_IsEnabled(USB_INT_HSOFI);
     6f4:	30 91 a0 00 	lds	r19, 0x00A0

	USB_INT_Disable(USB_INT_HSOFI);
     6f8:	80 91 a0 00 	lds	r24, 0x00A0
     6fc:	8f 7d       	andi	r24, 0xDF	; 223
     6fe:	80 93 a0 00 	sts	0x00A0, r24
	USB_INT_Clear(USB_INT_HSOFI);
     702:	80 91 9f 00 	lds	r24, 0x009F
     706:	8f 7d       	andi	r24, 0xDF	; 223
     708:	80 93 9f 00 	sts	0x009F, r24
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
     70c:	80 91 9e 00 	lds	r24, 0x009E
     710:	81 60       	ori	r24, 0x01	; 1
     712:	80 93 9e 00 	sts	0x009E, r24
     716:	26 c0       	rjmp	.+76     	; 0x764 <USB_Host_WaitMS+0x76>

	USB_Host_ResumeBus();

	while (MS)
	{
		if (USB_INT_HasOccurred(USB_INT_HSOFI))
     718:	80 91 9f 00 	lds	r24, 0x009F
     71c:	85 ff       	sbrs	r24, 5
     71e:	06 c0       	rjmp	.+12     	; 0x72c <USB_Host_WaitMS+0x3e>
		{
			USB_INT_Clear(USB_INT_HSOFI);
     720:	80 91 9f 00 	lds	r24, 0x009F
     724:	8f 7d       	andi	r24, 0xDF	; 223
     726:	80 93 9f 00 	sts	0x009F, r24
			MS--;
     72a:	91 50       	subi	r25, 0x01	; 1
		}

		if ((USB_HostState == HOST_STATE_Unattached) || (USB_CurrentMode != USB_MODE_Host))
     72c:	80 91 3c 01 	lds	r24, 0x013C
     730:	82 30       	cpi	r24, 0x02	; 2
     732:	11 f4       	brne	.+4      	; 0x738 <USB_Host_WaitMS+0x4a>
     734:	91 e0       	ldi	r25, 0x01	; 1
     736:	18 c0       	rjmp	.+48     	; 0x768 <USB_Host_WaitMS+0x7a>
			 *  \return Boolean true if an error has occurred on the selected pipe, false otherwise.
			 */
			static inline bool Pipe_IsError(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsError(void)
			{
				return ((UPINTX & (1 << PERRI)) ? true : false);
     738:	80 91 a6 00 	lds	r24, 0x00A6
			ErrorCode = HOST_WAITERROR_DeviceDisconnect;

			break;
		}

		if (Pipe_IsError() == true)
     73c:	84 ff       	sbrs	r24, 4
     73e:	07 c0       	rjmp	.+14     	; 0x74e <USB_Host_WaitMS+0x60>

			/** Clears the master pipe error flag. */
			static inline void Pipe_ClearError(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearError(void)
			{
				UPINTX &= ~(1 << PERRI);
     740:	80 91 a6 00 	lds	r24, 0x00A6
     744:	8f 7e       	andi	r24, 0xEF	; 239
     746:	80 93 a6 00 	sts	0x00A6, r24
     74a:	92 e0       	ldi	r25, 0x02	; 2
     74c:	0d c0       	rjmp	.+26     	; 0x768 <USB_Host_WaitMS+0x7a>
			 *  \return Boolean true if the current pipe has been stalled by the attached device, false otherwise.
			 */
			static inline bool Pipe_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsStalled(void)
			{
				return ((UPINTX & (1 << RXSTALLI)) ? true : false);
     74e:	80 91 a6 00 	lds	r24, 0x00A6
			ErrorCode = HOST_WAITERROR_PipeError;

			break;
		}

		if (Pipe_IsStalled() == true)
     752:	81 ff       	sbrs	r24, 1
     754:	07 c0       	rjmp	.+14     	; 0x764 <USB_Host_WaitMS+0x76>
			 *  \ingroup Group_PipePacketManagement
			 */
			static inline void Pipe_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearStall(void)
			{
				UPINTX &= ~(1 << RXSTALLI);
     756:	80 91 a6 00 	lds	r24, 0x00A6
     75a:	8d 7f       	andi	r24, 0xFD	; 253
     75c:	80 93 a6 00 	sts	0x00A6, r24
     760:	93 e0       	ldi	r25, 0x03	; 3
     762:	02 c0       	rjmp	.+4      	; 0x768 <USB_Host_WaitMS+0x7a>
	USB_INT_Disable(USB_INT_HSOFI);
	USB_INT_Clear(USB_INT_HSOFI);

	USB_Host_ResumeBus();

	while (MS)
     764:	99 23       	and	r25, r25
     766:	c1 f6       	brne	.-80     	; 0x718 <USB_Host_WaitMS+0x2a>

			break;
		}
	}

	if (BusSuspended)
     768:	20 fd       	sbrc	r18, 0
     76a:	05 c0       	rjmp	.+10     	; 0x776 <USB_Host_WaitMS+0x88>
			 *  messages to the device.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				UHCON &= ~(1 << SOFEN);
     76c:	80 91 9e 00 	lds	r24, 0x009E
     770:	8e 7f       	andi	r24, 0xFE	; 254
     772:	80 93 9e 00 	sts	0x009E, r24
	  USB_Host_SuspendBus();

	if (HSOFIEnabled)
     776:	35 ff       	sbrs	r19, 5
     778:	05 c0       	rjmp	.+10     	; 0x784 <USB_Host_WaitMS+0x96>
	  USB_INT_Enable(USB_INT_HSOFI);
     77a:	80 91 a0 00 	lds	r24, 0x00A0
     77e:	80 62       	ori	r24, 0x20	; 32
     780:	80 93 a0 00 	sts	0x00A0, r24

	return ErrorCode;
}
     784:	89 2f       	mov	r24, r25
     786:	08 95       	ret

00000788 <USB_Host_ResetDevice>:
			 *  \return Boolean true if the bus is currently suspended, false otherwise.
			 */
			static inline bool USB_Host_IsBusSuspended(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusSuspended(void)
			{
				return ((UHCON & (1 << SOFEN)) ? false : true);
     788:	60 91 9e 00 	lds	r22, 0x009E

static void USB_Host_ResetDevice(void)
{
	bool BusSuspended = USB_Host_IsBusSuspended();

	USB_INT_Disable(USB_INT_DDISCI);
     78c:	80 91 a0 00 	lds	r24, 0x00A0
     790:	8d 7f       	andi	r24, 0xFD	; 253
     792:	80 93 a0 00 	sts	0x00A0, r24
			 *  woken up automatically and the bus resumed after the reset has been correctly issued.
			 */
			static inline void USB_Host_ResetBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResetBus(void)
			{
				UHCON |=  (1 << RESET);
     796:	80 91 9e 00 	lds	r24, 0x009E
     79a:	82 60       	ori	r24, 0x02	; 2
     79c:	80 93 9e 00 	sts	0x009E, r24
			 *  \return Boolean true if no bus reset is currently being sent, false otherwise.
			 */
			static inline bool USB_Host_IsBusResetComplete(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusResetComplete(void)
			{
				return ((UHCON & (1 << RESET)) ? false : true);
     7a0:	80 91 9e 00 	lds	r24, 0x009E

	USB_Host_ResetBus();
	while (!(USB_Host_IsBusResetComplete()));
     7a4:	81 fd       	sbrc	r24, 1
     7a6:	fc cf       	rjmp	.-8      	; 0x7a0 <USB_Host_ResetDevice+0x18>
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
     7a8:	80 91 9e 00 	lds	r24, 0x009E
     7ac:	81 60       	ori	r24, 0x01	; 1
     7ae:	80 93 9e 00 	sts	0x009E, r24
	USB_Host_ResumeBus();

	bool HSOFIEnabled = USB_INT_IsEnabled(USB_INT_HSOFI);
     7b2:	30 91 a0 00 	lds	r19, 0x00A0

	USB_INT_Disable(USB_INT_HSOFI);
     7b6:	80 91 a0 00 	lds	r24, 0x00A0
     7ba:	8f 7d       	andi	r24, 0xDF	; 223
     7bc:	80 93 a0 00 	sts	0x00A0, r24
	USB_INT_Clear(USB_INT_HSOFI);
     7c0:	80 91 9f 00 	lds	r24, 0x009F
     7c4:	8f 7d       	andi	r24, 0xDF	; 223
     7c6:	80 93 9f 00 	sts	0x009F, r24
     7ca:	2a e0       	ldi	r18, 0x0A	; 10
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     7cc:	40 ed       	ldi	r20, 0xD0	; 208
     7ce:	57 e0       	ldi	r21, 0x07	; 7
		/* Workaround for powerless-pull-up devices. After a USB bus reset,
		   all disconnection interrupts are suppressed while a USB frame is
		   looked for - if it is found within 10ms, the device is still
		   present.                                                        */

		if (USB_INT_HasOccurred(USB_INT_HSOFI))
     7d0:	80 91 9f 00 	lds	r24, 0x009F
     7d4:	85 ff       	sbrs	r24, 5
     7d6:	0b c0       	rjmp	.+22     	; 0x7ee <USB_Host_ResetDevice+0x66>
		{
			USB_INT_Clear(USB_INT_HSOFI);
     7d8:	80 91 9f 00 	lds	r24, 0x009F
     7dc:	8f 7d       	andi	r24, 0xDF	; 223
     7de:	80 93 9f 00 	sts	0x009F, r24
			USB_INT_Clear(USB_INT_DDISCI);
     7e2:	80 91 9f 00 	lds	r24, 0x009F
     7e6:	8d 7f       	andi	r24, 0xFD	; 253
     7e8:	80 93 9f 00 	sts	0x009F, r24
     7ec:	05 c0       	rjmp	.+10     	; 0x7f8 <USB_Host_ResetDevice+0x70>
     7ee:	ca 01       	movw	r24, r20
     7f0:	01 97       	sbiw	r24, 0x01	; 1
     7f2:	f1 f7       	brne	.-4      	; 0x7f0 <USB_Host_ResetDevice+0x68>
	bool HSOFIEnabled = USB_INT_IsEnabled(USB_INT_HSOFI);

	USB_INT_Disable(USB_INT_HSOFI);
	USB_INT_Clear(USB_INT_HSOFI);

	for (uint8_t MSRem = 10; MSRem != 0; MSRem--)
     7f4:	21 50       	subi	r18, 0x01	; 1
     7f6:	61 f7       	brne	.-40     	; 0x7d0 <USB_Host_ResetDevice+0x48>
		}

		_delay_ms(1);
	}

	if (HSOFIEnabled)
     7f8:	35 ff       	sbrs	r19, 5
     7fa:	05 c0       	rjmp	.+10     	; 0x806 <USB_Host_ResetDevice+0x7e>
	  USB_INT_Enable(USB_INT_HSOFI);
     7fc:	80 91 a0 00 	lds	r24, 0x00A0
     800:	80 62       	ori	r24, 0x20	; 32
     802:	80 93 a0 00 	sts	0x00A0, r24

	if (BusSuspended)
     806:	60 fd       	sbrc	r22, 0
     808:	05 c0       	rjmp	.+10     	; 0x814 <USB_Host_ResetDevice+0x8c>
			 *  messages to the device.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				UHCON &= ~(1 << SOFEN);
     80a:	80 91 9e 00 	lds	r24, 0x009E
     80e:	8e 7f       	andi	r24, 0xFE	; 254
     810:	80 93 9e 00 	sts	0x009E, r24
	  USB_Host_SuspendBus();

	USB_INT_Enable(USB_INT_DDISCI);
     814:	80 91 a0 00 	lds	r24, 0x00A0
     818:	82 60       	ori	r24, 0x02	; 2
     81a:	80 93 a0 00 	sts	0x00A0, r24
}
     81e:	08 95       	ret

00000820 <USB_Host_SetDeviceConfiguration>:

uint8_t USB_Host_SetDeviceConfiguration(const uint8_t ConfigNumber)
{
	USB_ControlRequest = (USB_Request_Header_t)
     820:	10 92 34 01 	sts	0x0134, r1
     824:	99 e0       	ldi	r25, 0x09	; 9
     826:	90 93 35 01 	sts	0x0135, r25
     82a:	80 93 36 01 	sts	0x0136, r24
     82e:	10 92 37 01 	sts	0x0137, r1
     832:	10 92 39 01 	sts	0x0139, r1
     836:	10 92 38 01 	sts	0x0138, r1
     83a:	10 92 3b 01 	sts	0x013B, r1
     83e:	10 92 3a 01 	sts	0x013A, r1
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
     842:	10 92 a7 00 	sts	0x00A7, r1
			.wLength       = 0,
		};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	return USB_Host_SendControlRequest(NULL);
     846:	80 e0       	ldi	r24, 0x00	; 0
     848:	90 e0       	ldi	r25, 0x00	; 0
}
     84a:	79 c3       	rjmp	.+1778   	; 0xf3e <USB_Host_SendControlRequest>

0000084c <USB_Host_ProcessNextHostState>:

#define  __INCLUDE_FROM_HOST_C
#include "Host.h"

void USB_Host_ProcessNextHostState(void)
{
     84c:	ef 92       	push	r14
     84e:	0f 93       	push	r16
     850:	1f 93       	push	r17
     852:	df 93       	push	r29
     854:	cf 93       	push	r28
     856:	cd b7       	in	r28, 0x3d	; 61
     858:	de b7       	in	r29, 0x3e	; 62
     85a:	28 97       	sbiw	r28, 0x08	; 8
     85c:	0f b6       	in	r0, 0x3f	; 63
     85e:	f8 94       	cli
     860:	de bf       	out	0x3e, r29	; 62
     862:	0f be       	out	0x3f, r0	; 63
     864:	cd bf       	out	0x3d, r28	; 61
	uint8_t SubErrorCode = HOST_ENUMERROR_NoError;

	static uint16_t WaitMSRemaining;
	static uint8_t  PostWaitState;

	switch (USB_HostState)
     866:	80 91 3c 01 	lds	r24, 0x013C
     86a:	86 30       	cpi	r24, 0x06	; 6
     86c:	09 f4       	brne	.+2      	; 0x870 <USB_Host_ProcessNextHostState+0x24>
     86e:	94 c0       	rjmp	.+296    	; 0x998 <USB_Host_ProcessNextHostState+0x14c>
     870:	87 30       	cpi	r24, 0x07	; 7
     872:	70 f4       	brcc	.+28     	; 0x890 <USB_Host_ProcessNextHostState+0x44>
     874:	83 30       	cpi	r24, 0x03	; 3
     876:	c1 f1       	breq	.+112    	; 0x8e8 <USB_Host_ProcessNextHostState+0x9c>
     878:	84 30       	cpi	r24, 0x04	; 4
     87a:	20 f4       	brcc	.+8      	; 0x884 <USB_Host_ProcessNextHostState+0x38>
     87c:	81 30       	cpi	r24, 0x01	; 1
     87e:	09 f0       	breq	.+2      	; 0x882 <USB_Host_ProcessNextHostState+0x36>
     880:	07 c1       	rjmp	.+526    	; 0xa90 <USB_Host_ProcessNextHostState+0x244>
     882:	13 c0       	rjmp	.+38     	; 0x8aa <USB_Host_ProcessNextHostState+0x5e>
     884:	84 30       	cpi	r24, 0x04	; 4
     886:	c1 f1       	breq	.+112    	; 0x8f8 <USB_Host_ProcessNextHostState+0xac>
     888:	85 30       	cpi	r24, 0x05	; 5
     88a:	09 f0       	breq	.+2      	; 0x88e <USB_Host_ProcessNextHostState+0x42>
     88c:	01 c1       	rjmp	.+514    	; 0xa90 <USB_Host_ProcessNextHostState+0x244>
     88e:	5b c0       	rjmp	.+182    	; 0x946 <USB_Host_ProcessNextHostState+0xfa>
     890:	88 30       	cpi	r24, 0x08	; 8
     892:	09 f4       	brne	.+2      	; 0x896 <USB_Host_ProcessNextHostState+0x4a>
     894:	9b c0       	rjmp	.+310    	; 0x9cc <USB_Host_ProcessNextHostState+0x180>
     896:	88 30       	cpi	r24, 0x08	; 8
     898:	08 f4       	brcc	.+2      	; 0x89c <USB_Host_ProcessNextHostState+0x50>
     89a:	8a c0       	rjmp	.+276    	; 0x9b0 <USB_Host_ProcessNextHostState+0x164>
     89c:	89 30       	cpi	r24, 0x09	; 9
     89e:	09 f4       	brne	.+2      	; 0x8a2 <USB_Host_ProcessNextHostState+0x56>
     8a0:	b4 c0       	rjmp	.+360    	; 0xa0a <USB_Host_ProcessNextHostState+0x1be>
     8a2:	8a 30       	cpi	r24, 0x0A	; 10
     8a4:	09 f0       	breq	.+2      	; 0x8a8 <USB_Host_ProcessNextHostState+0x5c>
     8a6:	f4 c0       	rjmp	.+488    	; 0xa90 <USB_Host_ProcessNextHostState+0x244>
     8a8:	d9 c0       	rjmp	.+434    	; 0xa5c <USB_Host_ProcessNextHostState+0x210>
	{
		case HOST_STATE_WaitForDevice:
			if (WaitMSRemaining)
     8aa:	00 91 31 01 	lds	r16, 0x0131
     8ae:	10 91 32 01 	lds	r17, 0x0132
     8b2:	01 15       	cp	r16, r1
     8b4:	11 05       	cpc	r17, r1
     8b6:	09 f4       	brne	.+2      	; 0x8ba <USB_Host_ProcessNextHostState+0x6e>
     8b8:	eb c0       	rjmp	.+470    	; 0xa90 <USB_Host_ProcessNextHostState+0x244>
			{
				if ((SubErrorCode = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
     8ba:	81 e0       	ldi	r24, 0x01	; 1
     8bc:	18 df       	rcall	.-464    	; 0x6ee <USB_Host_WaitMS>
     8be:	68 2f       	mov	r22, r24
     8c0:	88 23       	and	r24, r24
     8c2:	31 f0       	breq	.+12     	; 0x8d0 <USB_Host_ProcessNextHostState+0x84>
				{
					USB_HostState = PostWaitState;
     8c4:	80 91 30 01 	lds	r24, 0x0130
     8c8:	80 93 3c 01 	sts	0x013C, r24
     8cc:	91 e0       	ldi	r25, 0x01	; 1
     8ce:	dc c0       	rjmp	.+440    	; 0xa88 <USB_Host_ProcessNextHostState+0x23c>
					ErrorCode     = HOST_ENUMERROR_WaitStage;
					break;
				}

				if (!(--WaitMSRemaining))
     8d0:	c8 01       	movw	r24, r16
     8d2:	01 97       	sbiw	r24, 0x01	; 1
     8d4:	90 93 32 01 	sts	0x0132, r25
     8d8:	80 93 31 01 	sts	0x0131, r24
     8dc:	89 2b       	or	r24, r25
     8de:	09 f0       	breq	.+2      	; 0x8e2 <USB_Host_ProcessNextHostState+0x96>
     8e0:	d7 c0       	rjmp	.+430    	; 0xa90 <USB_Host_ProcessNextHostState+0x244>
				  USB_HostState = PostWaitState;
     8e2:	80 91 30 01 	lds	r24, 0x0130
     8e6:	bf c0       	rjmp	.+382    	; 0xa66 <USB_Host_ProcessNextHostState+0x21a>
			}

			break;
		case HOST_STATE_Powered:
			WaitMSRemaining = HOST_DEVICE_SETTLE_DELAY_MS;
     8e8:	88 ee       	ldi	r24, 0xE8	; 232
     8ea:	93 e0       	ldi	r25, 0x03	; 3
     8ec:	90 93 32 01 	sts	0x0132, r25
     8f0:	80 93 31 01 	sts	0x0131, r24

			USB_HostState = HOST_STATE_Powered_WaitForDeviceSettle;
     8f4:	84 e0       	ldi	r24, 0x04	; 4
     8f6:	b7 c0       	rjmp	.+366    	; 0xa66 <USB_Host_ProcessNextHostState+0x21a>
			break;
		case HOST_STATE_Powered_WaitForDeviceSettle:
			if (WaitMSRemaining--)
     8f8:	80 91 31 01 	lds	r24, 0x0131
     8fc:	90 91 32 01 	lds	r25, 0x0132
     900:	01 97       	sbiw	r24, 0x01	; 1
     902:	90 93 32 01 	sts	0x0132, r25
     906:	80 93 31 01 	sts	0x0131, r24
     90a:	01 96       	adiw	r24, 0x01	; 1
     90c:	29 f0       	breq	.+10     	; 0x918 <USB_Host_ProcessNextHostState+0xcc>
     90e:	80 ed       	ldi	r24, 0xD0	; 208
     910:	97 e0       	ldi	r25, 0x07	; 7
     912:	01 97       	sbiw	r24, 0x01	; 1
     914:	f1 f7       	brne	.-4      	; 0x912 <USB_Host_ProcessNextHostState+0xc6>
     916:	bc c0       	rjmp	.+376    	; 0xa90 <USB_Host_ProcessNextHostState+0x244>
			}

			static inline void USB_Host_VBUS_Manual_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Manual_Off(void)
			{
				PORTE  &= ~(1 << 7);
     918:	77 98       	cbi	0x0e, 7	; 14

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON  |=  (1 << OTGPADE);
     91a:	80 91 d8 00 	lds	r24, 0x00D8
     91e:	80 61       	ori	r24, 0x10	; 16
     920:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_Host_VBUS_Auto_Enable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Enable(void)
			{
				OTGCON &= ~(1 << VBUSHWC);
     924:	80 91 dd 00 	lds	r24, 0x00DD
     928:	8b 7f       	andi	r24, 0xFB	; 251
     92a:	80 93 dd 00 	sts	0x00DD, r24
				UHWCON |=  (1 << UVCONE);
     92e:	80 91 d7 00 	lds	r24, 0x00D7
     932:	80 61       	ori	r24, 0x10	; 16
     934:	80 93 d7 00 	sts	0x00D7, r24
			}

			static inline void USB_Host_VBUS_Auto_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_On(void)
			{
				OTGCON |=  (1 << VBUSREQ);
     938:	80 91 dd 00 	lds	r24, 0x00DD
     93c:	82 60       	ori	r24, 0x02	; 2
     93e:	80 93 dd 00 	sts	0x00DD, r24

				USB_OTGPAD_On();
				USB_Host_VBUS_Auto_Enable();
				USB_Host_VBUS_Auto_On();

				USB_HostState = HOST_STATE_Powered_WaitForConnect;
     942:	85 e0       	ldi	r24, 0x05	; 5
     944:	90 c0       	rjmp	.+288    	; 0xa66 <USB_Host_ProcessNextHostState+0x21a>
			}

			break;
		case HOST_STATE_Powered_WaitForConnect:
			if (USB_INT_HasOccurred(USB_INT_DCONNI))
     946:	80 91 9f 00 	lds	r24, 0x009F
     94a:	80 ff       	sbrs	r24, 0
     94c:	a1 c0       	rjmp	.+322    	; 0xa90 <USB_Host_ProcessNextHostState+0x244>
			{
				USB_INT_Clear(USB_INT_DCONNI);
     94e:	80 91 9f 00 	lds	r24, 0x009F
     952:	8e 7f       	andi	r24, 0xFE	; 254
     954:	80 93 9f 00 	sts	0x009F, r24
				USB_INT_Clear(USB_INT_DDISCI);
     958:	80 91 9f 00 	lds	r24, 0x009F
     95c:	8d 7f       	andi	r24, 0xFD	; 253
     95e:	80 93 9f 00 	sts	0x009F, r24

				USB_INT_Clear(USB_INT_VBERRI);
     962:	80 91 df 00 	lds	r24, 0x00DF
     966:	8d 7f       	andi	r24, 0xFD	; 253
     968:	80 93 df 00 	sts	0x00DF, r24
				USB_INT_Enable(USB_INT_VBERRI);
     96c:	80 91 de 00 	lds	r24, 0x00DE
     970:	82 60       	ori	r24, 0x02	; 2
     972:	80 93 de 00 	sts	0x00DE, r24
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
     976:	80 91 9e 00 	lds	r24, 0x009E
     97a:	81 60       	ori	r24, 0x01	; 1
     97c:	80 93 9e 00 	sts	0x009E, r24

				USB_Host_ResumeBus();
				Pipe_ClearPipes();
     980:	c9 d0       	rcall	.+402    	; 0xb14 <Pipe_ClearPipes>

				HOST_TASK_NONBLOCK_WAIT(100, HOST_STATE_Powered_DoReset);
     982:	81 e0       	ldi	r24, 0x01	; 1
     984:	80 93 3c 01 	sts	0x013C, r24
     988:	84 e6       	ldi	r24, 0x64	; 100
     98a:	90 e0       	ldi	r25, 0x00	; 0
     98c:	90 93 32 01 	sts	0x0132, r25
     990:	80 93 31 01 	sts	0x0131, r24
     994:	86 e0       	ldi	r24, 0x06	; 6
     996:	5f c0       	rjmp	.+190    	; 0xa56 <USB_Host_ProcessNextHostState+0x20a>
			}

			break;
		case HOST_STATE_Powered_DoReset:
			USB_Host_ResetDevice();
     998:	f7 de       	rcall	.-530    	; 0x788 <USB_Host_ResetDevice>

			HOST_TASK_NONBLOCK_WAIT(200, HOST_STATE_Powered_ConfigPipe);
     99a:	81 e0       	ldi	r24, 0x01	; 1
     99c:	80 93 3c 01 	sts	0x013C, r24
     9a0:	88 ec       	ldi	r24, 0xC8	; 200
     9a2:	90 e0       	ldi	r25, 0x00	; 0
     9a4:	90 93 32 01 	sts	0x0132, r25
     9a8:	80 93 31 01 	sts	0x0131, r24
     9ac:	87 e0       	ldi	r24, 0x07	; 7
     9ae:	53 c0       	rjmp	.+166    	; 0xa56 <USB_Host_ProcessNextHostState+0x20a>
			break;
		case HOST_STATE_Powered_ConfigPipe:
			Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL,
     9b0:	80 e0       	ldi	r24, 0x00	; 0
     9b2:	60 e0       	ldi	r22, 0x00	; 0
     9b4:	40 e0       	ldi	r20, 0x00	; 0
     9b6:	20 e0       	ldi	r18, 0x00	; 0
     9b8:	00 e4       	ldi	r16, 0x40	; 64
     9ba:	10 e0       	ldi	r17, 0x00	; 0
     9bc:	ee 24       	eor	r14, r14
     9be:	74 d0       	rcall	.+232    	; 0xaa8 <Pipe_ConfigurePipe>
			 *  \return Boolean true if the selected pipe is configured, false otherwise.
			 */
			static inline bool Pipe_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsConfigured(void)
			{
				return ((UPSTAX & (1 << CFGOK)) ? true : false);
     9c0:	80 91 ac 00 	lds	r24, 0x00AC
							   PIPE_TOKEN_SETUP, ENDPOINT_CONTROLEP,
							   PIPE_CONTROLPIPE_DEFAULT_SIZE, PIPE_BANK_SINGLE);

			if (!(Pipe_IsConfigured()))
     9c4:	87 ff       	sbrs	r24, 7
     9c6:	5e c0       	rjmp	.+188    	; 0xa84 <USB_Host_ProcessNextHostState+0x238>
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
				SubErrorCode = 0;
				break;
			}

			USB_HostState = HOST_STATE_Default;
     9c8:	88 e0       	ldi	r24, 0x08	; 8
     9ca:	4d c0       	rjmp	.+154    	; 0xa66 <USB_Host_ProcessNextHostState+0x21a>
			break;
		case HOST_STATE_Default:
			USB_ControlRequest = (USB_Request_Header_t)
     9cc:	a4 e3       	ldi	r26, 0x34	; 52
     9ce:	b1 e0       	ldi	r27, 0x01	; 1
     9d0:	e8 e1       	ldi	r30, 0x18	; 24
     9d2:	f1 e0       	ldi	r31, 0x01	; 1
     9d4:	88 e0       	ldi	r24, 0x08	; 8
     9d6:	01 90       	ld	r0, Z+
     9d8:	0d 92       	st	X+, r0
     9da:	81 50       	subi	r24, 0x01	; 1
     9dc:	e1 f7       	brne	.-8      	; 0x9d6 <USB_Host_ProcessNextHostState+0x18a>
					.wLength       = 8,
				};

			uint8_t DataBuffer[8];

			if ((SubErrorCode = USB_Host_SendControlRequest(DataBuffer)) != HOST_SENDCONTROL_Successful)
     9de:	ce 01       	movw	r24, r28
     9e0:	01 96       	adiw	r24, 0x01	; 1
     9e2:	ad d2       	rcall	.+1370   	; 0xf3e <USB_Host_SendControlRequest>
     9e4:	68 2f       	mov	r22, r24
     9e6:	88 23       	and	r24, r24
     9e8:	09 f0       	breq	.+2      	; 0x9ec <USB_Host_ProcessNextHostState+0x1a0>
     9ea:	4a c0       	rjmp	.+148    	; 0xa80 <USB_Host_ProcessNextHostState+0x234>
			{
				ErrorCode = HOST_ENUMERROR_ControlError;
				break;
			}

			USB_ControlPipeSize = DataBuffer[offsetof(USB_Descriptor_Device_t, Endpoint0Size)];
     9ec:	88 85       	ldd	r24, Y+8	; 0x08
     9ee:	80 93 20 01 	sts	0x0120, r24

			USB_Host_ResetDevice();
     9f2:	ca de       	rcall	.-620    	; 0x788 <USB_Host_ResetDevice>

			HOST_TASK_NONBLOCK_WAIT(200, HOST_STATE_Default_PostReset);
     9f4:	81 e0       	ldi	r24, 0x01	; 1
     9f6:	80 93 3c 01 	sts	0x013C, r24
     9fa:	88 ec       	ldi	r24, 0xC8	; 200
     9fc:	90 e0       	ldi	r25, 0x00	; 0
     9fe:	90 93 32 01 	sts	0x0132, r25
     a02:	80 93 31 01 	sts	0x0131, r24
     a06:	89 e0       	ldi	r24, 0x09	; 9
     a08:	26 c0       	rjmp	.+76     	; 0xa56 <USB_Host_ProcessNextHostState+0x20a>
			break;
		case HOST_STATE_Default_PostReset:
			Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL,
     a0a:	00 91 20 01 	lds	r16, 0x0120
     a0e:	80 e0       	ldi	r24, 0x00	; 0
     a10:	60 e0       	ldi	r22, 0x00	; 0
     a12:	40 e0       	ldi	r20, 0x00	; 0
     a14:	20 e0       	ldi	r18, 0x00	; 0
     a16:	10 e0       	ldi	r17, 0x00	; 0
     a18:	ee 24       	eor	r14, r14
     a1a:	46 d0       	rcall	.+140    	; 0xaa8 <Pipe_ConfigurePipe>
     a1c:	80 91 ac 00 	lds	r24, 0x00AC
			                   PIPE_TOKEN_SETUP, ENDPOINT_CONTROLEP,
			                   USB_ControlPipeSize, PIPE_BANK_SINGLE);

			if (!(Pipe_IsConfigured()))
     a20:	87 ff       	sbrs	r24, 7
     a22:	30 c0       	rjmp	.+96     	; 0xa84 <USB_Host_ProcessNextHostState+0x238>
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
				SubErrorCode = 0;
				break;
			}

			USB_ControlRequest = (USB_Request_Header_t)
     a24:	a4 e3       	ldi	r26, 0x34	; 52
     a26:	b1 e0       	ldi	r27, 0x01	; 1
     a28:	e0 e1       	ldi	r30, 0x10	; 16
     a2a:	f1 e0       	ldi	r31, 0x01	; 1
     a2c:	88 e0       	ldi	r24, 0x08	; 8
     a2e:	01 90       	ld	r0, Z+
     a30:	0d 92       	st	X+, r0
     a32:	81 50       	subi	r24, 0x01	; 1
     a34:	e1 f7       	brne	.-8      	; 0xa2e <USB_Host_ProcessNextHostState+0x1e2>
					.wValue        = USB_HOST_DEVICEADDRESS,
					.wIndex        = 0,
					.wLength       = 0,
				};

			if ((SubErrorCode = USB_Host_SendControlRequest(NULL)) != HOST_SENDCONTROL_Successful)
     a36:	80 e0       	ldi	r24, 0x00	; 0
     a38:	90 e0       	ldi	r25, 0x00	; 0
     a3a:	81 d2       	rcall	.+1282   	; 0xf3e <USB_Host_SendControlRequest>
     a3c:	68 2f       	mov	r22, r24
     a3e:	88 23       	and	r24, r24
     a40:	f9 f4       	brne	.+62     	; 0xa80 <USB_Host_ProcessNextHostState+0x234>
			{
				ErrorCode = HOST_ENUMERROR_ControlError;
				break;
			}

			HOST_TASK_NONBLOCK_WAIT(100, HOST_STATE_Default_PostAddressSet);
     a42:	81 e0       	ldi	r24, 0x01	; 1
     a44:	80 93 3c 01 	sts	0x013C, r24
     a48:	84 e6       	ldi	r24, 0x64	; 100
     a4a:	90 e0       	ldi	r25, 0x00	; 0
     a4c:	90 93 32 01 	sts	0x0132, r25
     a50:	80 93 31 01 	sts	0x0131, r24
     a54:	8a e0       	ldi	r24, 0x0A	; 10
     a56:	80 93 30 01 	sts	0x0130, r24
     a5a:	1a c0       	rjmp	.+52     	; 0xa90 <USB_Host_ProcessNextHostState+0x244>
			}

			static inline void USB_Host_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SetDeviceAddress(const uint8_t Address)
			{
				UHADDR  =  (Address & 0x7F);
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	80 93 a1 00 	sts	0x00A1, r24
			break;
		case HOST_STATE_Default_PostAddressSet:
			USB_Host_SetDeviceAddress(USB_HOST_DEVICEADDRESS);

			EVENT_USB_Host_DeviceEnumerationComplete();
     a62:	3f dc       	rcall	.-1922   	; 0x2e2 <EVENT_USB_Host_DeviceEnumerationComplete>
			USB_HostState = HOST_STATE_Addressed;
     a64:	8b e0       	ldi	r24, 0x0B	; 11
     a66:	80 93 3c 01 	sts	0x013C, r24
     a6a:	12 c0       	rjmp	.+36     	; 0xa90 <USB_Host_ProcessNextHostState+0x244>
			break;
	}

	if ((ErrorCode != HOST_ENUMERROR_NoError) && (USB_HostState != HOST_STATE_Unattached))
	{
		EVENT_USB_Host_DeviceEnumerationFailed(ErrorCode, SubErrorCode);
     a6c:	89 2f       	mov	r24, r25
     a6e:	4e dc       	rcall	.-1892   	; 0x30c <EVENT_USB_Host_DeviceEnumerationFailed>
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
     a70:	80 91 dd 00 	lds	r24, 0x00DD
     a74:	81 60       	ori	r24, 0x01	; 1
     a76:	80 93 dd 00 	sts	0x00DD, r24

		USB_Host_VBUS_Auto_Off();

		EVENT_USB_Host_DeviceUnattached();
     a7a:	38 dc       	rcall	.-1936   	; 0x2ec <EVENT_USB_Host_DeviceUnattached>

		USB_ResetInterface();
     a7c:	8c d0       	rcall	.+280    	; 0xb96 <USB_ResetInterface>
     a7e:	08 c0       	rjmp	.+16     	; 0xa90 <USB_Host_ProcessNextHostState+0x244>
	}
}
     a80:	93 e0       	ldi	r25, 0x03	; 3
     a82:	02 c0       	rjmp	.+4      	; 0xa88 <USB_Host_ProcessNextHostState+0x23c>
     a84:	94 e0       	ldi	r25, 0x04	; 4
     a86:	60 e0       	ldi	r22, 0x00	; 0
			EVENT_USB_Host_DeviceEnumerationComplete();
			USB_HostState = HOST_STATE_Addressed;
			break;
	}

	if ((ErrorCode != HOST_ENUMERROR_NoError) && (USB_HostState != HOST_STATE_Unattached))
     a88:	80 91 3c 01 	lds	r24, 0x013C
     a8c:	82 30       	cpi	r24, 0x02	; 2
     a8e:	71 f7       	brne	.-36     	; 0xa6c <USB_Host_ProcessNextHostState+0x220>

		EVENT_USB_Host_DeviceUnattached();

		USB_ResetInterface();
	}
}
     a90:	28 96       	adiw	r28, 0x08	; 8
     a92:	0f b6       	in	r0, 0x3f	; 63
     a94:	f8 94       	cli
     a96:	de bf       	out	0x3e, r29	; 62
     a98:	0f be       	out	0x3f, r0	; 63
     a9a:	cd bf       	out	0x3d, r28	; 61
     a9c:	cf 91       	pop	r28
     a9e:	df 91       	pop	r29
     aa0:	1f 91       	pop	r17
     aa2:	0f 91       	pop	r16
     aa4:	ef 90       	pop	r14
     aa6:	08 95       	ret

00000aa8 <Pipe_ConfigurePipe>:
                        const uint8_t Type,
                        const uint8_t Token,
                        const uint8_t EndpointNumber,
                        const uint16_t Size,
                        const uint8_t Banks)
{
     aa8:	ef 92       	push	r14
     aaa:	0f 93       	push	r16
     aac:	1f 93       	push	r17
     aae:	9e 2d       	mov	r25, r14
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
     ab0:	80 93 a7 00 	sts	0x00A7, r24
			 *  \pre The currently selected pipe must first be configured properly via \ref Pipe_ConfigurePipe().
			 */
			static inline void Pipe_EnablePipe(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_EnablePipe(void)
			{
				UPCONX |= (1 << PEN);
     ab4:	80 91 a9 00 	lds	r24, 0x00A9
     ab8:	81 60       	ori	r24, 0x01	; 1
     aba:	80 93 a9 00 	sts	0x00A9, r24
	Pipe_SelectPipe(Number);
	Pipe_EnablePipe();

	UPCFG1X = 0;
     abe:	10 92 ab 00 	sts	0x00AB, r1

	UPCFG0X = ((Type << EPTYPE0) | Token | ((EndpointNumber & PIPE_EPNUM_MASK) << PEPNUM0));
     ac2:	62 95       	swap	r22
     ac4:	66 0f       	add	r22, r22
     ac6:	66 0f       	add	r22, r22
     ac8:	60 7c       	andi	r22, 0xC0	; 192
     aca:	64 2b       	or	r22, r20
     acc:	2f 70       	andi	r18, 0x0F	; 15
     ace:	62 2b       	or	r22, r18
     ad0:	60 93 aa 00 	sts	0x00AA, r22
     ad4:	28 e0       	ldi	r18, 0x08	; 8
     ad6:	30 e0       	ldi	r19, 0x00	; 0
     ad8:	80 e0       	ldi	r24, 0x00	; 0
     ada:	03 c0       	rjmp	.+6      	; 0xae2 <Pipe_ConfigurePipe+0x3a>
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while ((CheckBytes < Bytes) && (CheckBytes < PIPE_MAX_SIZE))
				{
					MaskVal++;
     adc:	8f 5f       	subi	r24, 0xFF	; 255
					CheckBytes <<= 1;
     ade:	22 0f       	add	r18, r18
     ae0:	33 1f       	adc	r19, r19
			static inline uint8_t Pipe_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while ((CheckBytes < Bytes) && (CheckBytes < PIPE_MAX_SIZE))
     ae2:	20 17       	cp	r18, r16
     ae4:	31 07       	cpc	r19, r17
     ae6:	10 f4       	brcc	.+4      	; 0xaec <Pipe_ConfigurePipe+0x44>
     ae8:	85 30       	cpi	r24, 0x05	; 5
     aea:	c1 f7       	brne	.-16     	; 0xadc <Pipe_ConfigurePipe+0x34>
	UPCFG1X = ((1 << ALLOC) | Banks | Pipe_BytesToEPSizeMask(Size));
     aec:	92 60       	ori	r25, 0x02	; 2
     aee:	82 95       	swap	r24
     af0:	80 7f       	andi	r24, 0xF0	; 240
     af2:	89 2b       	or	r24, r25
     af4:	80 93 ab 00 	sts	0x00AB, r24

			/** Configures the currently selected pipe to allow for an unlimited number of IN requests. */
			static inline void Pipe_SetInfiniteINRequests(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetInfiniteINRequests(void)
			{
				UPCONX |= (1 << INMODE);
     af8:	80 91 a9 00 	lds	r24, 0x00A9
     afc:	80 62       	ori	r24, 0x20	; 32
     afe:	80 93 a9 00 	sts	0x00A9, r24
			 *  \return Boolean true if the selected pipe is configured, false otherwise.
			 */
			static inline bool Pipe_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsConfigured(void)
			{
				return ((UPSTAX & (1 << CFGOK)) ? true : false);
     b02:	80 91 ac 00 	lds	r24, 0x00AC

	Pipe_SetInfiniteINRequests();

	return Pipe_IsConfigured();
}
     b06:	88 1f       	adc	r24, r24
     b08:	88 27       	eor	r24, r24
     b0a:	88 1f       	adc	r24, r24
     b0c:	1f 91       	pop	r17
     b0e:	0f 91       	pop	r16
     b10:	ef 90       	pop	r14
     b12:	08 95       	ret

00000b14 <Pipe_ClearPipes>:

void Pipe_ClearPipes(void)
{
	UPINT = 0;
     b14:	10 92 f8 00 	sts	0x00F8, r1
     b18:	90 e0       	ldi	r25, 0x00	; 0
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
     b1a:	90 93 a7 00 	sts	0x00A7, r25

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
	{
		Pipe_SelectPipe(PNum);
		UPIENX  = 0;
     b1e:	10 92 ae 00 	sts	0x00AE, r1
		UPINTX  = 0;
     b22:	10 92 a6 00 	sts	0x00A6, r1
		UPCFG1X = 0;
     b26:	10 92 ab 00 	sts	0x00AB, r1
			 *  from an attached device.
			 */
			static inline void Pipe_DisablePipe(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_DisablePipe(void)
			{
				UPCONX &= ~(1 << PEN);
     b2a:	80 91 a9 00 	lds	r24, 0x00A9
     b2e:	8e 7f       	andi	r24, 0xFE	; 254
     b30:	80 93 a9 00 	sts	0x00A9, r24

void Pipe_ClearPipes(void)
{
	UPINT = 0;

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
     b34:	9f 5f       	subi	r25, 0xFF	; 255
     b36:	97 30       	cpi	r25, 0x07	; 7
     b38:	81 f7       	brne	.-32     	; 0xb1a <Pipe_ClearPipes+0x6>
		UPIENX  = 0;
		UPINTX  = 0;
		UPCFG1X = 0;
		Pipe_DisablePipe();
	}
}
     b3a:	08 95       	ret

00000b3c <Pipe_WaitUntilReady>:
			/** Returns the current USB frame number, when in host mode. Every millisecond the USB bus is active (i.e. not suspended)
			 *  the frame number is incremented by one.
			 */
			static inline uint16_t USB_Host_GetFrameNumber(void)
			{
				return UHFNUM;
     b3c:	40 91 a2 00 	lds	r20, 0x00A2
     b40:	50 91 a3 00 	lds	r21, 0x00A3
     b44:	24 e6       	ldi	r18, 0x64	; 100
			 *  \return The current pipe token, as a PIPE_TOKEN_* mask.
			 */
			static inline uint8_t Pipe_GetPipeToken(void) ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetPipeToken(void)
			{
				return (UPCFG0X & (0x03 << PTOKEN0));
     b46:	80 91 aa 00 	lds	r24, 0x00AA

	uint16_t PreviousFrameNumber = USB_Host_GetFrameNumber();

	for (;;)
	{
		if (Pipe_GetPipeToken() == PIPE_TOKEN_IN)
     b4a:	80 73       	andi	r24, 0x30	; 48
     b4c:	80 31       	cpi	r24, 0x10	; 16
     b4e:	29 f4       	brne	.+10     	; 0xb5a <Pipe_WaitUntilReady+0x1e>
			 *  \return Boolean true if the current pipe has received an IN packet, false otherwise.
			 */
			static inline bool Pipe_IsINReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsINReceived(void)
			{
				return ((UPINTX & (1 << RXINI)) ? true : false);
     b50:	80 91 a6 00 	lds	r24, 0x00A6
		{
			if (Pipe_IsINReceived())
     b54:	80 ff       	sbrs	r24, 0
     b56:	05 c0       	rjmp	.+10     	; 0xb62 <Pipe_WaitUntilReady+0x26>
     b58:	1c c0       	rjmp	.+56     	; 0xb92 <Pipe_WaitUntilReady+0x56>
			 *  \return Boolean true if the current pipe is ready for an OUT packet, false otherwise.
			 */
			static inline bool Pipe_IsOUTReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsOUTReady(void)
			{
				return ((UPINTX & (1 << TXOUTI)) ? true : false);
     b5a:	80 91 a6 00 	lds	r24, 0x00A6
			  return PIPE_READYWAIT_NoError;
		}
		else
		{
			if (Pipe_IsOUTReady())
     b5e:	82 fd       	sbrc	r24, 2
     b60:	18 c0       	rjmp	.+48     	; 0xb92 <Pipe_WaitUntilReady+0x56>
			 *  \return Boolean true if the current pipe has been stalled by the attached device, false otherwise.
			 */
			static inline bool Pipe_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsStalled(void)
			{
				return ((UPINTX & (1 << RXSTALLI)) ? true : false);
     b62:	80 91 a6 00 	lds	r24, 0x00A6
			  return PIPE_READYWAIT_NoError;
		}

		if (Pipe_IsStalled())
     b66:	81 ff       	sbrs	r24, 1
     b68:	02 c0       	rjmp	.+4      	; 0xb6e <Pipe_WaitUntilReady+0x32>
     b6a:	81 e0       	ldi	r24, 0x01	; 1
     b6c:	08 95       	ret
		  return PIPE_READYWAIT_PipeStalled;
		else if (USB_HostState == HOST_STATE_Unattached)
     b6e:	80 91 3c 01 	lds	r24, 0x013C
     b72:	82 30       	cpi	r24, 0x02	; 2
     b74:	79 f0       	breq	.+30     	; 0xb94 <Pipe_WaitUntilReady+0x58>
     b76:	80 91 a2 00 	lds	r24, 0x00A2
     b7a:	90 91 a3 00 	lds	r25, 0x00A3
		  return PIPE_READYWAIT_DeviceDisconnected;

		uint16_t CurrentFrameNumber = USB_Host_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
     b7e:	84 17       	cp	r24, r20
     b80:	95 07       	cpc	r25, r21
     b82:	09 f3       	breq	.-62     	; 0xb46 <Pipe_WaitUntilReady+0xa>
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
     b84:	22 23       	and	r18, r18
     b86:	11 f4       	brne	.+4      	; 0xb8c <Pipe_WaitUntilReady+0x50>
     b88:	83 e0       	ldi	r24, 0x03	; 3
     b8a:	08 95       	ret
     b8c:	21 50       	subi	r18, 0x01	; 1
     b8e:	ac 01       	movw	r20, r24
     b90:	da cf       	rjmp	.-76     	; 0xb46 <Pipe_WaitUntilReady+0xa>
     b92:	80 e0       	ldi	r24, 0x00	; 0
			  return PIPE_READYWAIT_Timeout;
		}
	}
}
     b94:	08 95       	ret

00000b96 <USB_ResetInterface>:
{
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
     b96:	6e d0       	rcall	.+220    	; 0xc74 <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
     b98:	75 d0       	rcall	.+234    	; 0xc84 <USB_INT_ClearAllInterrupts>
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				const uint8_t Temp = USBCON;
     b9a:	80 91 d8 00 	lds	r24, 0x00D8

				USBCON = (Temp & ~(1 << USBE));
     b9e:	98 2f       	mov	r25, r24
     ba0:	9f 77       	andi	r25, 0x7F	; 127
     ba2:	90 93 d8 00 	sts	0x00D8, r25
				USBCON = (Temp |  (1 << USBE));
     ba6:	80 68       	ori	r24, 0x80	; 128
     ba8:	80 93 d8 00 	sts	0x00D8, r24

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR  = USB_PLL_PSC;
     bac:	8c e0       	ldi	r24, 0x0C	; 12
     bae:	89 bd       	out	0x29, r24	; 41
				PLLCSR |= (1 << PLLE);
     bb0:	89 b5       	in	r24, 0x29	; 41
     bb2:	82 60       	ori	r24, 0x02	; 2
     bb4:	89 bd       	out	0x29, r24	; 41
		#if defined(USB_SERIES_4_AVR)
		PLLFRQ = ((1 << PLLUSB) | (1 << PDIV3) | (1 << PDIV1));
		#endif

		USB_PLL_On();
		while (!(USB_PLL_IsReady()));
     bb6:	09 b4       	in	r0, 0x29	; 41
     bb8:	00 fe       	sbrs	r0, 0
     bba:	fd cf       	rjmp	.-6      	; 0xbb6 <USB_ResetInterface+0x20>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON  &= ~(1 << FRZCLK);
     bbc:	80 91 d8 00 	lds	r24, 0x00D8
     bc0:	8f 7d       	andi	r24, 0xDF	; 223
     bc2:	80 93 d8 00 	sts	0x00D8, r24
		#endif
	}
	else if (USB_CurrentMode == USB_MODE_Host)
	{
		#if defined(USB_CAN_BE_HOST)
		UHWCON &= ~(1 << UIMOD);
     bc6:	80 91 d7 00 	lds	r24, 0x00D7
     bca:	8f 77       	andi	r24, 0x7F	; 127
     bcc:	80 93 d7 00 	sts	0x00D7, r24
#endif

#if defined(USB_CAN_BE_HOST)
static void USB_Init_Host(void)
{
	USB_HostState       = HOST_STATE_Unattached;
     bd0:	82 e0       	ldi	r24, 0x02	; 2
     bd2:	80 93 3c 01 	sts	0x013C, r24
	USB_ControlPipeSize = PIPE_CONTROLPIPE_DEFAULT_SIZE;
     bd6:	80 e4       	ldi	r24, 0x40	; 64
     bd8:	80 93 20 01 	sts	0x0120, r24
	#if !defined(__DOXYGEN__)
		/* Macros: */
			static inline void USB_Host_HostMode_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_HostMode_On(void)
			{
				USBCON |=  (1 << HOST);
     bdc:	80 91 d8 00 	lds	r24, 0x00D8
     be0:	80 64       	ori	r24, 0x40	; 64
     be2:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
     be6:	80 91 dd 00 	lds	r24, 0x00DD
     bea:	81 60       	ori	r24, 0x01	; 1
     bec:	80 93 dd 00 	sts	0x00DD, r24
			}

			static inline void USB_Host_VBUS_Manual_Enable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Manual_Enable(void)
			{
				OTGCON |=  (1 << VBUSHWC);
     bf0:	80 91 dd 00 	lds	r24, 0x00DD
     bf4:	84 60       	ori	r24, 0x04	; 4
     bf6:	80 93 dd 00 	sts	0x00DD, r24
				UHWCON &= ~(1 << UVCONE);
     bfa:	80 91 d7 00 	lds	r24, 0x00D7
     bfe:	8f 7e       	andi	r24, 0xEF	; 239
     c00:	80 93 d7 00 	sts	0x00D7, r24

				DDRE   |=  (1 << 7);
     c04:	6f 9a       	sbi	0x0d, 7	; 13
			}

			static inline void USB_Host_VBUS_Manual_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Manual_On(void)
			{
				PORTE  |=  (1 << 7);
     c06:	77 9a       	sbi	0x0e, 7	; 14

	USB_Host_VBUS_Auto_Off();
	USB_Host_VBUS_Manual_Enable();
	USB_Host_VBUS_Manual_On();

	USB_INT_Enable(USB_INT_SRPI);
     c08:	80 91 de 00 	lds	r24, 0x00DE
     c0c:	81 60       	ori	r24, 0x01	; 1
     c0e:	80 93 de 00 	sts	0x00DE, r24
	USB_INT_Enable(USB_INT_BCERRI);
     c12:	80 91 de 00 	lds	r24, 0x00DE
     c16:	84 60       	ori	r24, 0x04	; 4
     c18:	80 93 de 00 	sts	0x00DE, r24
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
     c1c:	80 91 e0 00 	lds	r24, 0x00E0
     c20:	8e 7f       	andi	r24, 0xFE	; 254
     c22:	80 93 e0 00 	sts	0x00E0, r24

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON  |=  (1 << OTGPADE);
     c26:	80 91 d8 00 	lds	r24, 0x00D8
     c2a:	80 61       	ori	r24, 0x10	; 16
     c2c:	80 93 d8 00 	sts	0x00D8, r24
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
     c30:	08 95       	ret

00000c32 <USB_Init>:

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON  |=  (1 << UVREGE);
     c32:	e7 ed       	ldi	r30, 0xD7	; 215
     c34:	f0 e0       	ldi	r31, 0x00	; 0
     c36:	80 81       	ld	r24, Z
     c38:	81 60       	ori	r24, 0x01	; 1
     c3a:	80 83       	st	Z, r24
	{
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
     c3c:	81 e0       	ldi	r24, 0x01	; 1
     c3e:	80 93 33 01 	sts	0x0133, r24

	USB_ResetInterface();
}
     c42:	a9 cf       	rjmp	.-174    	; 0xb96 <USB_ResetInterface>

00000c44 <USB_ShutDown>:

void USB_ShutDown(void)
{
	USB_INT_DisableAllInterrupts();
     c44:	17 d0       	rcall	.+46     	; 0xc74 <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
     c46:	1e d0       	rcall	.+60     	; 0xc84 <USB_INT_ClearAllInterrupts>
			 *  enumerating the device once attached until \ref USB_Attach() is called.
			 */
			static inline void USB_Detach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Detach(void)
			{
				UDCON  |=  (1 << DETACH);
     c48:	e0 ee       	ldi	r30, 0xE0	; 224
     c4a:	f0 e0       	ldi	r31, 0x00	; 0
     c4c:	80 81       	ld	r24, Z
     c4e:	81 60       	ori	r24, 0x01	; 1
     c50:	80 83       	st	Z, r24
			}

			static inline void USB_Controller_Disable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Disable(void)
			{
				USBCON  &= ~(1 << USBE);
     c52:	a8 ed       	ldi	r26, 0xD8	; 216
     c54:	b0 e0       	ldi	r27, 0x00	; 0
     c56:	8c 91       	ld	r24, X
     c58:	8f 77       	andi	r24, 0x7F	; 127
     c5a:	8c 93       	st	X, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR  = 0;
     c5c:	19 bc       	out	0x29, r1	; 41

			static inline void USB_REG_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_Off(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON  &= ~(1 << UVREGE);
     c5e:	e7 ed       	ldi	r30, 0xD7	; 215
     c60:	f0 e0       	ldi	r31, 0x00	; 0
     c62:	80 81       	ld	r24, Z
     c64:	8e 7f       	andi	r24, 0xFE	; 254
     c66:	80 83       	st	Z, r24
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON  &= ~(1 << OTGPADE);
     c68:	8c 91       	ld	r24, X
     c6a:	8f 7e       	andi	r24, 0xEF	; 239
     c6c:	8c 93       	st	X, r24

	#if defined(USB_CAN_BE_BOTH)
	USB_CurrentMode = USB_MODE_None;
	#endif

	USB_IsInitialized = false;
     c6e:	10 92 33 01 	sts	0x0133, r1
}
     c72:	08 95       	ret

00000c74 <USB_INT_DisableAllInterrupts>:
#include "USBInterrupt.h"

void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
     c74:	e8 ed       	ldi	r30, 0xD8	; 216
     c76:	f0 e0       	ldi	r31, 0x00	; 0
     c78:	80 81       	ld	r24, Z
     c7a:	8c 7f       	andi	r24, 0xFC	; 252
     c7c:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_BOTH)
	OTGIEN  = 0;
	#endif

	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
     c7e:	10 92 a0 00 	sts	0x00A0, r1
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
	#endif
}
     c82:	08 95       	ret

00000c84 <USB_INT_ClearAllInterrupts>:

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT  = 0;
     c84:	10 92 da 00 	sts	0x00DA, r1
	#if defined(USB_CAN_BE_BOTH)
	OTGINT  = 0;
	#endif

	#if defined(USB_CAN_BE_HOST)
	UHINT   = 0;
     c88:	10 92 9f 00 	sts	0x009F, r1
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT   = 0;
	#endif
}
     c8c:	08 95       	ret

00000c8e <__vector_10>:

ISR(USB_GEN_vect, ISR_BLOCK)
{
     c8e:	1f 92       	push	r1
     c90:	0f 92       	push	r0
     c92:	0f b6       	in	r0, 0x3f	; 63
     c94:	0f 92       	push	r0
     c96:	0b b6       	in	r0, 0x3b	; 59
     c98:	0f 92       	push	r0
     c9a:	11 24       	eor	r1, r1
     c9c:	2f 93       	push	r18
     c9e:	3f 93       	push	r19
     ca0:	4f 93       	push	r20
     ca2:	5f 93       	push	r21
     ca4:	6f 93       	push	r22
     ca6:	7f 93       	push	r23
     ca8:	8f 93       	push	r24
     caa:	9f 93       	push	r25
     cac:	af 93       	push	r26
     cae:	bf 93       	push	r27
     cb0:	ef 93       	push	r30
     cb2:	ff 93       	push	r31
	}
	#endif
	#endif

	#if defined(USB_CAN_BE_HOST)
	if (USB_INT_HasOccurred(USB_INT_DDISCI) && USB_INT_IsEnabled(USB_INT_DDISCI))
     cb4:	80 91 9f 00 	lds	r24, 0x009F
     cb8:	81 ff       	sbrs	r24, 1
     cba:	15 c0       	rjmp	.+42     	; 0xce6 <__vector_10+0x58>
     cbc:	80 91 a0 00 	lds	r24, 0x00A0
     cc0:	81 ff       	sbrs	r24, 1
     cc2:	11 c0       	rjmp	.+34     	; 0xce6 <__vector_10+0x58>
	{
		USB_INT_Clear(USB_INT_DDISCI);
     cc4:	80 91 9f 00 	lds	r24, 0x009F
     cc8:	8d 7f       	andi	r24, 0xFD	; 253
     cca:	80 93 9f 00 	sts	0x009F, r24
		USB_INT_Clear(USB_INT_DCONNI);
     cce:	80 91 9f 00 	lds	r24, 0x009F
     cd2:	8e 7f       	andi	r24, 0xFE	; 254
     cd4:	80 93 9f 00 	sts	0x009F, r24
		USB_INT_Disable(USB_INT_DDISCI);
     cd8:	80 91 a0 00 	lds	r24, 0x00A0
     cdc:	8d 7f       	andi	r24, 0xFD	; 253
     cde:	80 93 a0 00 	sts	0x00A0, r24

		EVENT_USB_Host_DeviceUnattached();
     ce2:	04 db       	rcall	.-2552   	; 0x2ec <EVENT_USB_Host_DeviceUnattached>

		USB_ResetInterface();
     ce4:	58 df       	rcall	.-336    	; 0xb96 <USB_ResetInterface>
	}

	if (USB_INT_HasOccurred(USB_INT_VBERRI) && USB_INT_IsEnabled(USB_INT_VBERRI))
     ce6:	80 91 df 00 	lds	r24, 0x00DF
     cea:	81 ff       	sbrs	r24, 1
     cec:	15 c0       	rjmp	.+42     	; 0xd18 <__vector_10+0x8a>
     cee:	80 91 de 00 	lds	r24, 0x00DE
     cf2:	81 ff       	sbrs	r24, 1
     cf4:	11 c0       	rjmp	.+34     	; 0xd18 <__vector_10+0x8a>
	{
		USB_INT_Clear(USB_INT_VBERRI);
     cf6:	80 91 df 00 	lds	r24, 0x00DF
     cfa:	8d 7f       	andi	r24, 0xFD	; 253
     cfc:	80 93 df 00 	sts	0x00DF, r24
			}

			static inline void USB_Host_VBUS_Manual_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Manual_Off(void)
			{
				PORTE  &= ~(1 << 7);
     d00:	77 98       	cbi	0x0e, 7	; 14
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
     d02:	80 91 dd 00 	lds	r24, 0x00DD
     d06:	81 60       	ori	r24, 0x01	; 1
     d08:	80 93 dd 00 	sts	0x00DD, r24

		USB_Host_VBUS_Manual_Off();
		USB_Host_VBUS_Auto_Off();

		EVENT_USB_Host_HostError(HOST_ERROR_VBusVoltageDip);
     d0c:	80 e0       	ldi	r24, 0x00	; 0
     d0e:	04 dc       	rcall	.-2040   	; 0x518 <EVENT_USB_Host_HostError>
		EVENT_USB_Host_DeviceUnattached();
     d10:	ed da       	rcall	.-2598   	; 0x2ec <EVENT_USB_Host_DeviceUnattached>

		USB_HostState = HOST_STATE_Unattached;
     d12:	82 e0       	ldi	r24, 0x02	; 2
     d14:	80 93 3c 01 	sts	0x013C, r24
	}

	if (USB_INT_HasOccurred(USB_INT_SRPI) && USB_INT_IsEnabled(USB_INT_SRPI))
     d18:	80 91 df 00 	lds	r24, 0x00DF
     d1c:	80 ff       	sbrs	r24, 0
     d1e:	17 c0       	rjmp	.+46     	; 0xd4e <__vector_10+0xc0>
     d20:	80 91 de 00 	lds	r24, 0x00DE
     d24:	80 ff       	sbrs	r24, 0
     d26:	13 c0       	rjmp	.+38     	; 0xd4e <__vector_10+0xc0>
	{
		USB_INT_Clear(USB_INT_SRPI);
     d28:	80 91 df 00 	lds	r24, 0x00DF
     d2c:	8e 7f       	andi	r24, 0xFE	; 254
     d2e:	80 93 df 00 	sts	0x00DF, r24
		USB_INT_Disable(USB_INT_SRPI);
     d32:	80 91 de 00 	lds	r24, 0x00DE
     d36:	8e 7f       	andi	r24, 0xFE	; 254
     d38:	80 93 de 00 	sts	0x00DE, r24

		EVENT_USB_Host_DeviceAttached();
     d3c:	df da       	rcall	.-2626   	; 0x2fc <EVENT_USB_Host_DeviceAttached>

		USB_INT_Enable(USB_INT_DDISCI);
     d3e:	80 91 a0 00 	lds	r24, 0x00A0
     d42:	82 60       	ori	r24, 0x02	; 2
     d44:	80 93 a0 00 	sts	0x00A0, r24

		USB_HostState = HOST_STATE_Powered;
     d48:	83 e0       	ldi	r24, 0x03	; 3
     d4a:	80 93 3c 01 	sts	0x013C, r24
	}

	if (USB_INT_HasOccurred(USB_INT_BCERRI) && USB_INT_IsEnabled(USB_INT_BCERRI))
     d4e:	80 91 df 00 	lds	r24, 0x00DF
     d52:	82 ff       	sbrs	r24, 2
     d54:	0e c0       	rjmp	.+28     	; 0xd72 <__vector_10+0xe4>
     d56:	80 91 de 00 	lds	r24, 0x00DE
     d5a:	82 ff       	sbrs	r24, 2
     d5c:	0a c0       	rjmp	.+20     	; 0xd72 <__vector_10+0xe4>
	{
		USB_INT_Clear(USB_INT_BCERRI);
     d5e:	80 91 df 00 	lds	r24, 0x00DF
     d62:	8b 7f       	andi	r24, 0xFB	; 251
     d64:	80 93 df 00 	sts	0x00DF, r24

		EVENT_USB_Host_DeviceEnumerationFailed(HOST_ENUMERROR_NoDeviceDetected, 0);
     d68:	82 e0       	ldi	r24, 0x02	; 2
     d6a:	60 e0       	ldi	r22, 0x00	; 0
     d6c:	cf da       	rcall	.-2658   	; 0x30c <EVENT_USB_Host_DeviceEnumerationFailed>
		EVENT_USB_Host_DeviceUnattached();
     d6e:	be da       	rcall	.-2692   	; 0x2ec <EVENT_USB_Host_DeviceUnattached>

		USB_ResetInterface();
     d70:	12 df       	rcall	.-476    	; 0xb96 <USB_ResetInterface>
	}

	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_HSOFI) && USB_INT_IsEnabled(USB_INT_HSOFI))
     d72:	80 91 9f 00 	lds	r24, 0x009F
     d76:	85 ff       	sbrs	r24, 5
     d78:	0a c0       	rjmp	.+20     	; 0xd8e <__vector_10+0x100>
     d7a:	80 91 a0 00 	lds	r24, 0x00A0
     d7e:	85 ff       	sbrs	r24, 5
     d80:	06 c0       	rjmp	.+12     	; 0xd8e <__vector_10+0x100>
	{
		USB_INT_Clear(USB_INT_HSOFI);
     d82:	80 91 9f 00 	lds	r24, 0x009F
     d86:	8f 7d       	andi	r24, 0xDF	; 223
     d88:	80 93 9f 00 	sts	0x009F, r24

		EVENT_USB_Host_StartOfFrame();
     d8c:	ae d0       	rcall	.+348    	; 0xeea <USB_Event_Stub>
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
     d8e:	ff 91       	pop	r31
     d90:	ef 91       	pop	r30
     d92:	bf 91       	pop	r27
     d94:	af 91       	pop	r26
     d96:	9f 91       	pop	r25
     d98:	8f 91       	pop	r24
     d9a:	7f 91       	pop	r23
     d9c:	6f 91       	pop	r22
     d9e:	5f 91       	pop	r21
     da0:	4f 91       	pop	r20
     da2:	3f 91       	pop	r19
     da4:	2f 91       	pop	r18
     da6:	0f 90       	pop	r0
     da8:	0b be       	out	0x3b, r0	; 59
     daa:	0f 90       	pop	r0
     dac:	0f be       	out	0x3f, r0	; 63
     dae:	0f 90       	pop	r0
     db0:	1f 90       	pop	r1
     db2:	18 95       	reti

00000db4 <USB_GetNextDescriptorComp>:

uint8_t USB_GetNextDescriptorComp(uint16_t* const BytesRem, void** const CurrConfigLoc, ConfigComparatorPtr_t const ComparatorRoutine)
{
     db4:	af 92       	push	r10
     db6:	bf 92       	push	r11
     db8:	cf 92       	push	r12
     dba:	df 92       	push	r13
     dbc:	ef 92       	push	r14
     dbe:	ff 92       	push	r15
     dc0:	0f 93       	push	r16
     dc2:	1f 93       	push	r17
     dc4:	cf 93       	push	r28
     dc6:	df 93       	push	r29
     dc8:	7c 01       	movw	r14, r24
     dca:	8b 01       	movw	r16, r22
     dcc:	5a 01       	movw	r10, r20
     dce:	21 c0       	rjmp	.+66     	; 0xe12 <USB_GetNextDescriptorComp+0x5e>
	uint8_t ErrorCode;

	while (*BytesRem)
	{
		uint8_t* PrevDescLoc  = *CurrConfigLoc;
     dd0:	f8 01       	movw	r30, r16
     dd2:	c0 81       	ld	r28, Z
     dd4:	d1 81       	ldd	r29, Z+1	; 0x01
			static inline void USB_GetNextDescriptor(uint16_t* const BytesRem,
			                                         void** CurrConfigLoc) ATTR_NON_NULL_PTR_ARG(1) ATTR_NON_NULL_PTR_ARG(2);
			static inline void USB_GetNextDescriptor(uint16_t* const BytesRem,
			                                         void** CurrConfigLoc)
			{
				uint16_t CurrDescriptorSize = DESCRIPTOR_CAST(*CurrConfigLoc, USB_Descriptor_Header_t).Size;
     dd6:	88 81       	ld	r24, Y
     dd8:	90 e0       	ldi	r25, 0x00	; 0

				*CurrConfigLoc  = ((uint8_t*)*CurrConfigLoc) + CurrDescriptorSize;
     dda:	9e 01       	movw	r18, r28
     ddc:	28 0f       	add	r18, r24
     dde:	39 1f       	adc	r19, r25
     de0:	31 83       	std	Z+1, r19	; 0x01
     de2:	20 83       	st	Z, r18
				*BytesRem      -= CurrDescriptorSize;
     de4:	f7 01       	movw	r30, r14
     de6:	20 81       	ld	r18, Z
     de8:	31 81       	ldd	r19, Z+1	; 0x01
     dea:	28 1b       	sub	r18, r24
     dec:	39 0b       	sbc	r19, r25
     dee:	31 83       	std	Z+1, r19	; 0x01
     df0:	20 83       	st	Z, r18
		uint16_t PrevBytesRem = *BytesRem;

		USB_GetNextDescriptor(BytesRem, CurrConfigLoc);

		if ((ErrorCode = ComparatorRoutine(*CurrConfigLoc)) != DESCRIPTOR_SEARCH_NotFound)
     df2:	f8 01       	movw	r30, r16
     df4:	80 81       	ld	r24, Z
     df6:	91 81       	ldd	r25, Z+1	; 0x01
     df8:	f5 01       	movw	r30, r10
     dfa:	09 95       	icall
     dfc:	82 30       	cpi	r24, 0x02	; 2
     dfe:	49 f0       	breq	.+18     	; 0xe12 <USB_GetNextDescriptorComp+0x5e>
		{
			if (ErrorCode == DESCRIPTOR_SEARCH_Fail)
     e00:	81 30       	cpi	r24, 0x01	; 1
     e02:	71 f4       	brne	.+28     	; 0xe20 <USB_GetNextDescriptorComp+0x6c>
			{
				*CurrConfigLoc = PrevDescLoc;
     e04:	f8 01       	movw	r30, r16
     e06:	c0 83       	st	Z, r28
     e08:	d1 83       	std	Z+1, r29	; 0x01
				*BytesRem      = PrevBytesRem;
     e0a:	f7 01       	movw	r30, r14
     e0c:	d1 82       	std	Z+1, r13	; 0x01
     e0e:	c0 82       	st	Z, r12
     e10:	07 c0       	rjmp	.+14     	; 0xe20 <USB_GetNextDescriptorComp+0x6c>

uint8_t USB_GetNextDescriptorComp(uint16_t* const BytesRem, void** const CurrConfigLoc, ConfigComparatorPtr_t const ComparatorRoutine)
{
	uint8_t ErrorCode;

	while (*BytesRem)
     e12:	f7 01       	movw	r30, r14
     e14:	c0 80       	ld	r12, Z
     e16:	d1 80       	ldd	r13, Z+1	; 0x01
     e18:	c1 14       	cp	r12, r1
     e1a:	d1 04       	cpc	r13, r1
     e1c:	c9 f6       	brne	.-78     	; 0xdd0 <USB_GetNextDescriptorComp+0x1c>
     e1e:	82 e0       	ldi	r24, 0x02	; 2
			return ErrorCode;
		}
	}

	return DESCRIPTOR_SEARCH_COMP_EndOfDescriptor;
}
     e20:	df 91       	pop	r29
     e22:	cf 91       	pop	r28
     e24:	1f 91       	pop	r17
     e26:	0f 91       	pop	r16
     e28:	ff 90       	pop	r15
     e2a:	ef 90       	pop	r14
     e2c:	df 90       	pop	r13
     e2e:	cf 90       	pop	r12
     e30:	bf 90       	pop	r11
     e32:	af 90       	pop	r10
     e34:	08 95       	ret

00000e36 <USB_Host_GetDeviceConfigDescriptor>:
#include "ConfigDescriptor.h"

#if defined(USB_CAN_BE_HOST)
uint8_t USB_Host_GetDeviceConfigDescriptor(uint8_t ConfigNumber, uint16_t* const ConfigSizePtr,
                                           void* BufferPtr, uint16_t BufferSize)
{
     e36:	cf 92       	push	r12
     e38:	df 92       	push	r13
     e3a:	ef 92       	push	r14
     e3c:	ff 92       	push	r15
     e3e:	0f 93       	push	r16
     e40:	1f 93       	push	r17
     e42:	df 93       	push	r29
     e44:	cf 93       	push	r28
     e46:	cd b7       	in	r28, 0x3d	; 61
     e48:	de b7       	in	r29, 0x3e	; 62
     e4a:	29 97       	sbiw	r28, 0x09	; 9
     e4c:	0f b6       	in	r0, 0x3f	; 63
     e4e:	f8 94       	cli
     e50:	de bf       	out	0x3e, r29	; 62
     e52:	0f be       	out	0x3f, r0	; 63
     e54:	cd bf       	out	0x3d, r28	; 61
     e56:	6b 01       	movw	r12, r22
     e58:	8a 01       	movw	r16, r20
     e5a:	79 01       	movw	r14, r18
	uint8_t ErrorCode;
	uint8_t ConfigHeader[sizeof(USB_Descriptor_Configuration_Header_t)];

	USB_ControlRequest = (USB_Request_Header_t)
     e5c:	90 e8       	ldi	r25, 0x80	; 128
     e5e:	90 93 34 01 	sts	0x0134, r25
     e62:	96 e0       	ldi	r25, 0x06	; 6
     e64:	90 93 35 01 	sts	0x0135, r25
     e68:	90 e0       	ldi	r25, 0x00	; 0
     e6a:	01 97       	sbiw	r24, 0x01	; 1
     e6c:	92 60       	ori	r25, 0x02	; 2
     e6e:	90 93 37 01 	sts	0x0137, r25
     e72:	80 93 36 01 	sts	0x0136, r24
     e76:	10 92 39 01 	sts	0x0139, r1
     e7a:	10 92 38 01 	sts	0x0138, r1
     e7e:	89 e0       	ldi	r24, 0x09	; 9
     e80:	90 e0       	ldi	r25, 0x00	; 0
     e82:	90 93 3b 01 	sts	0x013B, r25
     e86:	80 93 3a 01 	sts	0x013A, r24
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
     e8a:	10 92 a7 00 	sts	0x00A7, r1
			.wLength       = sizeof(USB_Descriptor_Configuration_Header_t),
		};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	if ((ErrorCode = USB_Host_SendControlRequest(ConfigHeader)) != HOST_SENDCONTROL_Successful)
     e8e:	ce 01       	movw	r24, r28
     e90:	01 96       	adiw	r24, 0x01	; 1
     e92:	55 d0       	rcall	.+170    	; 0xf3e <USB_Host_SendControlRequest>
     e94:	28 2f       	mov	r18, r24
     e96:	88 23       	and	r24, r24
     e98:	c1 f4       	brne	.+48     	; 0xeca <USB_Host_GetDeviceConfigDescriptor+0x94>
	  return ErrorCode;

	*ConfigSizePtr = DESCRIPTOR_PCAST(ConfigHeader, USB_Descriptor_Configuration_Header_t)->TotalConfigurationSize;
     e9a:	8b 81       	ldd	r24, Y+3	; 0x03
     e9c:	9c 81       	ldd	r25, Y+4	; 0x04
     e9e:	f6 01       	movw	r30, r12
     ea0:	91 83       	std	Z+1, r25	; 0x01
     ea2:	80 83       	st	Z, r24

	if (*ConfigSizePtr > BufferSize)
     ea4:	e8 16       	cp	r14, r24
     ea6:	f9 06       	cpc	r15, r25
     ea8:	10 f4       	brcc	.+4      	; 0xeae <USB_Host_GetDeviceConfigDescriptor+0x78>
     eaa:	25 e0       	ldi	r18, 0x05	; 5
     eac:	0e c0       	rjmp	.+28     	; 0xeca <USB_Host_GetDeviceConfigDescriptor+0x94>
	  return HOST_GETCONFIG_BuffOverflow;

	USB_ControlRequest.wLength = *ConfigSizePtr;
     eae:	90 93 3b 01 	sts	0x013B, r25
     eb2:	80 93 3a 01 	sts	0x013A, r24

	if ((ErrorCode = USB_Host_SendControlRequest(BufferPtr)) != HOST_SENDCONTROL_Successful)
     eb6:	c8 01       	movw	r24, r16
     eb8:	42 d0       	rcall	.+132    	; 0xf3e <USB_Host_SendControlRequest>
     eba:	28 2f       	mov	r18, r24
     ebc:	88 23       	and	r24, r24
     ebe:	29 f4       	brne	.+10     	; 0xeca <USB_Host_GetDeviceConfigDescriptor+0x94>
	  return ErrorCode;

	if (DESCRIPTOR_TYPE(BufferPtr) != DTYPE_Configuration)
     ec0:	f8 01       	movw	r30, r16
     ec2:	81 81       	ldd	r24, Z+1	; 0x01
     ec4:	82 30       	cpi	r24, 0x02	; 2
     ec6:	09 f0       	breq	.+2      	; 0xeca <USB_Host_GetDeviceConfigDescriptor+0x94>
     ec8:	26 e0       	ldi	r18, 0x06	; 6
	  return HOST_GETCONFIG_InvalidData;

	return HOST_GETCONFIG_Successful;
}
     eca:	82 2f       	mov	r24, r18
     ecc:	29 96       	adiw	r28, 0x09	; 9
     ece:	0f b6       	in	r0, 0x3f	; 63
     ed0:	f8 94       	cli
     ed2:	de bf       	out	0x3e, r29	; 62
     ed4:	0f be       	out	0x3f, r0	; 63
     ed6:	cd bf       	out	0x3d, r28	; 61
     ed8:	cf 91       	pop	r28
     eda:	df 91       	pop	r29
     edc:	1f 91       	pop	r17
     ede:	0f 91       	pop	r16
     ee0:	ff 90       	pop	r15
     ee2:	ef 90       	pop	r14
     ee4:	df 90       	pop	r13
     ee6:	cf 90       	pop	r12
     ee8:	08 95       	ret

00000eea <USB_Event_Stub>:
#include "Events.h"

void USB_Event_Stub(void)
{

}
     eea:	08 95       	ret

00000eec <USB_Host_WaitForIOS>:

	return ReturnStatus;
}

static uint8_t USB_Host_WaitForIOS(const uint8_t WaitType)
{
     eec:	1f 93       	push	r17
     eee:	cf 93       	push	r28
     ef0:	df 93       	push	r29
     ef2:	18 2f       	mov	r17, r24
     ef4:	c8 ee       	ldi	r28, 0xE8	; 232
     ef6:	d3 e0       	ldi	r29, 0x03	; 3
     ef8:	09 c0       	rjmp	.+18     	; 0xf0c <USB_Host_WaitForIOS+0x20>
	         ((WaitType == USB_HOST_WAITFOR_InReceived) && Pipe_IsINReceived()) ||
	         ((WaitType == USB_HOST_WAITFOR_OutReady)   && Pipe_IsOUTReady())))
	{
		uint8_t ErrorCode;

		if ((ErrorCode = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
     efa:	81 e0       	ldi	r24, 0x01	; 1
     efc:	f8 db       	rcall	.-2064   	; 0x6ee <USB_Host_WaitMS>
     efe:	88 23       	and	r24, r24
     f00:	d1 f4       	brne	.+52     	; 0xf36 <USB_Host_WaitForIOS+0x4a>
		  return ErrorCode;

		if (!(TimeoutCounter--))
     f02:	20 97       	sbiw	r28, 0x00	; 0
     f04:	11 f4       	brne	.+4      	; 0xf0a <USB_Host_WaitForIOS+0x1e>
     f06:	84 e0       	ldi	r24, 0x04	; 4
     f08:	16 c0       	rjmp	.+44     	; 0xf36 <USB_Host_WaitForIOS+0x4a>
     f0a:	21 97       	sbiw	r28, 0x01	; 1
	uint8_t  TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#else
	uint16_t TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#endif

	while (!(((WaitType == USB_HOST_WAITFOR_SetupSent)  && Pipe_IsSETUPSent())  ||
     f0c:	11 23       	and	r17, r17
     f0e:	29 f4       	brne	.+10     	; 0xf1a <USB_Host_WaitForIOS+0x2e>
			 *  \return Boolean true if the current pipe is ready for a SETUP packet, false otherwise.
			 */
			static inline bool Pipe_IsSETUPSent(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsSETUPSent(void)
			{
				return ((UPINTX & (1 << TXSTPI)) ? true : false);
     f10:	80 91 a6 00 	lds	r24, 0x00A6
     f14:	83 ff       	sbrs	r24, 3
     f16:	f1 cf       	rjmp	.-30     	; 0xefa <USB_Host_WaitForIOS+0xe>
     f18:	0d c0       	rjmp	.+26     	; 0xf34 <USB_Host_WaitForIOS+0x48>
     f1a:	11 30       	cpi	r17, 0x01	; 1
     f1c:	29 f4       	brne	.+10     	; 0xf28 <USB_Host_WaitForIOS+0x3c>
			 *  \return Boolean true if the current pipe has received an IN packet, false otherwise.
			 */
			static inline bool Pipe_IsINReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsINReceived(void)
			{
				return ((UPINTX & (1 << RXINI)) ? true : false);
     f1e:	80 91 a6 00 	lds	r24, 0x00A6
     f22:	80 ff       	sbrs	r24, 0
     f24:	ea cf       	rjmp	.-44     	; 0xefa <USB_Host_WaitForIOS+0xe>
     f26:	06 c0       	rjmp	.+12     	; 0xf34 <USB_Host_WaitForIOS+0x48>
     f28:	12 30       	cpi	r17, 0x02	; 2
     f2a:	39 f7       	brne	.-50     	; 0xefa <USB_Host_WaitForIOS+0xe>
			 *  \return Boolean true if the current pipe is ready for an OUT packet, false otherwise.
			 */
			static inline bool Pipe_IsOUTReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsOUTReady(void)
			{
				return ((UPINTX & (1 << TXOUTI)) ? true : false);
     f2c:	80 91 a6 00 	lds	r24, 0x00A6
     f30:	82 ff       	sbrs	r24, 2
     f32:	e3 cf       	rjmp	.-58     	; 0xefa <USB_Host_WaitForIOS+0xe>
     f34:	80 e0       	ldi	r24, 0x00	; 0
		if (!(TimeoutCounter--))
		  return HOST_SENDCONTROL_SoftwareTimeOut;
	}

	return HOST_SENDCONTROL_Successful;
}
     f36:	df 91       	pop	r29
     f38:	cf 91       	pop	r28
     f3a:	1f 91       	pop	r17
     f3c:	08 95       	ret

00000f3e <USB_Host_SendControlRequest>:

#define  __INCLUDE_FROM_HOSTSTDREQ_C
#include "HostStandardReq.h"

uint8_t USB_Host_SendControlRequest(void* const BufferPtr)
{
     f3e:	ff 92       	push	r15
     f40:	0f 93       	push	r16
     f42:	1f 93       	push	r17
     f44:	cf 93       	push	r28
     f46:	df 93       	push	r29
     f48:	18 2f       	mov	r17, r24
     f4a:	09 2f       	mov	r16, r25
			 *  \return Boolean true if the bus is currently suspended, false otherwise.
			 */
			static inline bool USB_Host_IsBusSuspended(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusSuspended(void)
			{
				return ((UHCON & (1 << SOFEN)) ? false : true);
     f4c:	f0 90 9e 00 	lds	r15, 0x009E
	uint8_t* HeaderStream   = (uint8_t*)&USB_ControlRequest;
	uint8_t* DataStream     = (uint8_t*)BufferPtr;
	bool     BusSuspended   = USB_Host_IsBusSuspended();
	uint8_t  ReturnStatus   = HOST_SENDCONTROL_Successful;
	uint16_t DataLen        = USB_ControlRequest.wLength;
     f50:	c0 91 3a 01 	lds	r28, 0x013A
     f54:	d0 91 3b 01 	lds	r29, 0x013B
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
     f58:	80 91 9e 00 	lds	r24, 0x009E
     f5c:	81 60       	ori	r24, 0x01	; 1
     f5e:	80 93 9e 00 	sts	0x009E, r24

	USB_Host_ResumeBus();

	if ((ReturnStatus = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
     f62:	81 e0       	ldi	r24, 0x01	; 1
     f64:	c4 db       	rcall	.-2168   	; 0x6ee <USB_Host_WaitMS>
     f66:	98 2f       	mov	r25, r24
     f68:	88 23       	and	r24, r24
     f6a:	09 f0       	breq	.+2      	; 0xf6e <USB_Host_SendControlRequest+0x30>
     f6c:	d2 c0       	rjmp	.+420    	; 0x1112 <USB_Host_SendControlRequest+0x1d4>
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
     f6e:	80 91 aa 00 	lds	r24, 0x00AA
     f72:	8f 7c       	andi	r24, 0xCF	; 207
     f74:	80 93 aa 00 	sts	0x00AA, r24
			 *  flag for the pipe.
			 */
			static inline void Pipe_ClearErrorFlags(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearErrorFlags(void)
			{
				UPERRX = 0;
     f78:	10 92 f5 00 	sts	0x00F5, r1

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
     f7c:	80 91 a9 00 	lds	r24, 0x00A9
     f80:	8f 7b       	andi	r24, 0xBF	; 191
     f82:	80 93 a9 00 	sts	0x00A9, r24
     f86:	e4 e3       	ldi	r30, 0x34	; 52
     f88:	f1 e0       	ldi	r31, 0x01	; 1
	Pipe_ClearErrorFlags();

	Pipe_Unfreeze();

	for (uint8_t HeaderByte = 0; HeaderByte < sizeof(USB_Request_Header_t); HeaderByte++)
	  Pipe_Write_Byte(*(HeaderStream++));
     f8a:	81 91       	ld	r24, Z+
			 *  \param[in] Byte  Next byte to write into the the currently selected pipe's FIFO buffer.
			 */
			static inline void Pipe_Write_Byte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Write_Byte(const uint8_t Byte)
			{
				UPDATX = Byte;
     f8c:	80 93 af 00 	sts	0x00AF, r24
	Pipe_SetPipeToken(PIPE_TOKEN_SETUP);
	Pipe_ClearErrorFlags();

	Pipe_Unfreeze();

	for (uint8_t HeaderByte = 0; HeaderByte < sizeof(USB_Request_Header_t); HeaderByte++)
     f90:	81 e0       	ldi	r24, 0x01	; 1
     f92:	ec 33       	cpi	r30, 0x3C	; 60
     f94:	f8 07       	cpc	r31, r24
     f96:	c9 f7       	brne	.-14     	; 0xf8a <USB_Host_SendControlRequest+0x4c>
			 *  \ingroup Group_PipePacketManagement
			 */
			static inline void Pipe_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearSETUP(void)
			{
				UPINTX &= ~((1 << TXSTPI) | (1 << FIFOCON));
     f98:	80 91 a6 00 	lds	r24, 0x00A6
     f9c:	87 77       	andi	r24, 0x77	; 119
     f9e:	80 93 a6 00 	sts	0x00A6, r24
	  Pipe_Write_Byte(*(HeaderStream++));

	Pipe_ClearSETUP();

	if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_SetupSent)) != HOST_SENDCONTROL_Successful)
     fa2:	80 e0       	ldi	r24, 0x00	; 0
     fa4:	a3 df       	rcall	.-186    	; 0xeec <USB_Host_WaitForIOS>
     fa6:	98 2f       	mov	r25, r24
     fa8:	88 23       	and	r24, r24
     faa:	09 f0       	breq	.+2      	; 0xfae <USB_Host_SendControlRequest+0x70>
     fac:	b2 c0       	rjmp	.+356    	; 0x1112 <USB_Host_SendControlRequest+0x1d4>

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
     fae:	80 91 a9 00 	lds	r24, 0x00A9
     fb2:	80 64       	ori	r24, 0x40	; 64
     fb4:	80 93 a9 00 	sts	0x00A9, r24
	  goto End_Of_Control_Send;

	Pipe_Freeze();

	if ((ReturnStatus = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
     fb8:	81 e0       	ldi	r24, 0x01	; 1
     fba:	99 db       	rcall	.-2254   	; 0x6ee <USB_Host_WaitMS>
     fbc:	98 2f       	mov	r25, r24
     fbe:	88 23       	and	r24, r24
     fc0:	09 f0       	breq	.+2      	; 0xfc4 <USB_Host_SendControlRequest+0x86>
     fc2:	a7 c0       	rjmp	.+334    	; 0x1112 <USB_Host_SendControlRequest+0x1d4>
#include "HostStandardReq.h"

uint8_t USB_Host_SendControlRequest(void* const BufferPtr)
{
	uint8_t* HeaderStream   = (uint8_t*)&USB_ControlRequest;
	uint8_t* DataStream     = (uint8_t*)BufferPtr;
     fc4:	21 2f       	mov	r18, r17
     fc6:	30 2f       	mov	r19, r16
     fc8:	c9 01       	movw	r24, r18
     fca:	8c 01       	movw	r16, r24
	Pipe_Freeze();

	if ((ReturnStatus = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
	  goto End_Of_Control_Send;

	if ((USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_DIRECTION) == REQDIR_DEVICETOHOST)
     fcc:	80 91 34 01 	lds	r24, 0x0134
     fd0:	87 ff       	sbrs	r24, 7
     fd2:	52 c0       	rjmp	.+164    	; 0x1078 <USB_Host_SendControlRequest+0x13a>
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
     fd4:	80 91 aa 00 	lds	r24, 0x00AA
     fd8:	8f 7c       	andi	r24, 0xCF	; 207
     fda:	80 61       	ori	r24, 0x10	; 16
     fdc:	80 93 aa 00 	sts	0x00AA, r24
	{
		Pipe_SetPipeToken(PIPE_TOKEN_IN);

		if (DataStream != NULL)
     fe0:	01 15       	cp	r16, r1
     fe2:	11 05       	cpc	r17, r1
     fe4:	69 f5       	brne	.+90     	; 0x1040 <USB_Host_SendControlRequest+0x102>
     fe6:	2e c0       	rjmp	.+92     	; 0x1044 <USB_Host_SendControlRequest+0x106>

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
     fe8:	80 91 a9 00 	lds	r24, 0x00A9
     fec:	8f 7b       	andi	r24, 0xBF	; 191
     fee:	80 93 a9 00 	sts	0x00A9, r24
		{
			while (DataLen)
			{
				Pipe_Unfreeze();

				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_InReceived)) != HOST_SENDCONTROL_Successful)
     ff2:	81 e0       	ldi	r24, 0x01	; 1
     ff4:	7b df       	rcall	.-266    	; 0xeec <USB_Host_WaitForIOS>
     ff6:	98 2f       	mov	r25, r24
     ff8:	88 23       	and	r24, r24
     ffa:	09 f0       	breq	.+2      	; 0xffe <USB_Host_SendControlRequest+0xc0>
     ffc:	8a c0       	rjmp	.+276    	; 0x1112 <USB_Host_SendControlRequest+0x1d4>
			 *  \return Total number of bytes in the currently selected Pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
     ffe:	80 91 f6 00 	lds	r24, 0x00F6
    1002:	90 91 f7 00 	lds	r25, 0x00F7
				  goto End_Of_Control_Send;

				if (!(Pipe_BytesInPipe()))
    1006:	89 2b       	or	r24, r25
    1008:	49 f4       	brne	.+18     	; 0x101c <USB_Host_SendControlRequest+0xde>
    100a:	c0 e0       	ldi	r28, 0x00	; 0
    100c:	d0 e0       	ldi	r29, 0x00	; 0
    100e:	06 c0       	rjmp	.+12     	; 0x101c <USB_Host_SendControlRequest+0xde>
			 *  \return Next byte in the currently selected pipe's FIFO buffer.
			 */
			static inline uint8_t Pipe_Read_Byte(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_Read_Byte(void)
			{
				return UPDATX;
    1010:	80 91 af 00 	lds	r24, 0x00AF
				  DataLen = 0;

				while (Pipe_BytesInPipe() && DataLen)
				{
					*(DataStream++) = Pipe_Read_Byte();
    1014:	f8 01       	movw	r30, r16
    1016:	81 93       	st	Z+, r24
    1018:	8f 01       	movw	r16, r30
					DataLen--;
    101a:	21 97       	sbiw	r28, 0x01	; 1
			 *  \return Total number of bytes in the currently selected Pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
    101c:	80 91 f6 00 	lds	r24, 0x00F6
    1020:	90 91 f7 00 	lds	r25, 0x00F7
				  goto End_Of_Control_Send;

				if (!(Pipe_BytesInPipe()))
				  DataLen = 0;

				while (Pipe_BytesInPipe() && DataLen)
    1024:	89 2b       	or	r24, r25
    1026:	11 f0       	breq	.+4      	; 0x102c <USB_Host_SendControlRequest+0xee>
    1028:	20 97       	sbiw	r28, 0x00	; 0
    102a:	91 f7       	brne	.-28     	; 0x1010 <USB_Host_SendControlRequest+0xd2>

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    102c:	80 91 a9 00 	lds	r24, 0x00A9
    1030:	80 64       	ori	r24, 0x40	; 64
    1032:	80 93 a9 00 	sts	0x00A9, r24
			 *  \ingroup Group_PipePacketManagement
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
    1036:	80 91 a6 00 	lds	r24, 0x00A6
    103a:	8e 77       	andi	r24, 0x7E	; 126
    103c:	80 93 a6 00 	sts	0x00A6, r24
	{
		Pipe_SetPipeToken(PIPE_TOKEN_IN);

		if (DataStream != NULL)
		{
			while (DataLen)
    1040:	20 97       	sbiw	r28, 0x00	; 0
    1042:	91 f6       	brne	.-92     	; 0xfe8 <USB_Host_SendControlRequest+0xaa>
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    1044:	80 91 aa 00 	lds	r24, 0x00AA
    1048:	8f 7c       	andi	r24, 0xCF	; 207
    104a:	80 62       	ori	r24, 0x20	; 32
    104c:	80 93 aa 00 	sts	0x00AA, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    1050:	80 91 a9 00 	lds	r24, 0x00A9
    1054:	8f 7b       	andi	r24, 0xBF	; 191
    1056:	80 93 a9 00 	sts	0x00A9, r24
		}

		Pipe_SetPipeToken(PIPE_TOKEN_OUT);
		Pipe_Unfreeze();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    105a:	82 e0       	ldi	r24, 0x02	; 2
    105c:	47 df       	rcall	.-370    	; 0xeec <USB_Host_WaitForIOS>
    105e:	98 2f       	mov	r25, r24
    1060:	88 23       	and	r24, r24
    1062:	09 f0       	breq	.+2      	; 0x1066 <USB_Host_SendControlRequest+0x128>
    1064:	56 c0       	rjmp	.+172    	; 0x1112 <USB_Host_SendControlRequest+0x1d4>
			 *  \ingroup Group_PipePacketManagement
			 */
			static inline void Pipe_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearOUT(void)
			{
				UPINTX &= ~((1 << TXOUTI) | (1 << FIFOCON));
    1066:	80 91 a6 00 	lds	r24, 0x00A6
    106a:	8b 77       	andi	r24, 0x7B	; 123
    106c:	80 93 a6 00 	sts	0x00A6, r24
		  goto End_Of_Control_Send;

		Pipe_ClearOUT();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    1070:	82 e0       	ldi	r24, 0x02	; 2
    1072:	3c df       	rcall	.-392    	; 0xeec <USB_Host_WaitForIOS>
    1074:	98 2f       	mov	r25, r24
    1076:	4d c0       	rjmp	.+154    	; 0x1112 <USB_Host_SendControlRequest+0x1d4>
		  goto End_Of_Control_Send;
	}
	else
	{
		if (DataStream != NULL)
    1078:	01 15       	cp	r16, r1
    107a:	11 05       	cpc	r17, r1
    107c:	a9 f1       	breq	.+106    	; 0x10e8 <USB_Host_SendControlRequest+0x1aa>
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    107e:	80 91 aa 00 	lds	r24, 0x00AA
    1082:	8f 7c       	andi	r24, 0xCF	; 207
    1084:	80 62       	ori	r24, 0x20	; 32
    1086:	80 93 aa 00 	sts	0x00AA, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    108a:	80 91 a9 00 	lds	r24, 0x00A9
    108e:	8f 7b       	andi	r24, 0xBF	; 191
    1090:	80 93 a9 00 	sts	0x00A9, r24
    1094:	1d c0       	rjmp	.+58     	; 0x10d0 <USB_Host_SendControlRequest+0x192>
			Pipe_SetPipeToken(PIPE_TOKEN_OUT);
			Pipe_Unfreeze();

			while (DataLen)
			{
				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    1096:	82 e0       	ldi	r24, 0x02	; 2
    1098:	29 df       	rcall	.-430    	; 0xeec <USB_Host_WaitForIOS>
    109a:	98 2f       	mov	r25, r24
    109c:	88 23       	and	r24, r24
    109e:	c9 f5       	brne	.+114    	; 0x1112 <USB_Host_SendControlRequest+0x1d4>
				  goto End_Of_Control_Send;

				while (DataLen && (Pipe_BytesInPipe() < USB_ControlPipeSize))
    10a0:	80 91 20 01 	lds	r24, 0x0120
    10a4:	28 2f       	mov	r18, r24
    10a6:	30 e0       	ldi	r19, 0x00	; 0
    10a8:	07 c0       	rjmp	.+14     	; 0x10b8 <USB_Host_SendControlRequest+0x17a>
				{
					Pipe_Write_Byte(*(DataStream++));
    10aa:	f8 01       	movw	r30, r16
    10ac:	81 91       	ld	r24, Z+
    10ae:	8f 01       	movw	r16, r30
			 *  \param[in] Byte  Next byte to write into the the currently selected pipe's FIFO buffer.
			 */
			static inline void Pipe_Write_Byte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Write_Byte(const uint8_t Byte)
			{
				UPDATX = Byte;
    10b0:	80 93 af 00 	sts	0x00AF, r24
					DataLen--;
    10b4:	21 97       	sbiw	r28, 0x01	; 1
			while (DataLen)
			{
				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
				  goto End_Of_Control_Send;

				while (DataLen && (Pipe_BytesInPipe() < USB_ControlPipeSize))
    10b6:	39 f0       	breq	.+14     	; 0x10c6 <USB_Host_SendControlRequest+0x188>
			 *  \return Total number of bytes in the currently selected Pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
    10b8:	80 91 f6 00 	lds	r24, 0x00F6
    10bc:	90 91 f7 00 	lds	r25, 0x00F7
    10c0:	82 17       	cp	r24, r18
    10c2:	93 07       	cpc	r25, r19
    10c4:	90 f3       	brcs	.-28     	; 0x10aa <USB_Host_SendControlRequest+0x16c>
			 *  \ingroup Group_PipePacketManagement
			 */
			static inline void Pipe_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearOUT(void)
			{
				UPINTX &= ~((1 << TXOUTI) | (1 << FIFOCON));
    10c6:	80 91 a6 00 	lds	r24, 0x00A6
    10ca:	8b 77       	andi	r24, 0x7B	; 123
    10cc:	80 93 a6 00 	sts	0x00A6, r24
		if (DataStream != NULL)
		{
			Pipe_SetPipeToken(PIPE_TOKEN_OUT);
			Pipe_Unfreeze();

			while (DataLen)
    10d0:	20 97       	sbiw	r28, 0x00	; 0
    10d2:	09 f7       	brne	.-62     	; 0x1096 <USB_Host_SendControlRequest+0x158>
				}

				Pipe_ClearOUT();
			}

			if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    10d4:	82 e0       	ldi	r24, 0x02	; 2
    10d6:	0a df       	rcall	.-492    	; 0xeec <USB_Host_WaitForIOS>
    10d8:	98 2f       	mov	r25, r24
    10da:	88 23       	and	r24, r24
    10dc:	d1 f4       	brne	.+52     	; 0x1112 <USB_Host_SendControlRequest+0x1d4>

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    10de:	80 91 a9 00 	lds	r24, 0x00A9
    10e2:	80 64       	ori	r24, 0x40	; 64
    10e4:	80 93 a9 00 	sts	0x00A9, r24
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    10e8:	80 91 aa 00 	lds	r24, 0x00AA
    10ec:	8f 7c       	andi	r24, 0xCF	; 207
    10ee:	80 61       	ori	r24, 0x10	; 16
    10f0:	80 93 aa 00 	sts	0x00AA, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    10f4:	80 91 a9 00 	lds	r24, 0x00A9
    10f8:	8f 7b       	andi	r24, 0xBF	; 191
    10fa:	80 93 a9 00 	sts	0x00A9, r24
		}

		Pipe_SetPipeToken(PIPE_TOKEN_IN);
		Pipe_Unfreeze();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_InReceived)) != HOST_SENDCONTROL_Successful)
    10fe:	81 e0       	ldi	r24, 0x01	; 1
    1100:	f5 de       	rcall	.-534    	; 0xeec <USB_Host_WaitForIOS>
    1102:	98 2f       	mov	r25, r24
    1104:	88 23       	and	r24, r24
    1106:	29 f4       	brne	.+10     	; 0x1112 <USB_Host_SendControlRequest+0x1d4>
			 *  \ingroup Group_PipePacketManagement
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
    1108:	80 91 a6 00 	lds	r24, 0x00A6
    110c:	8e 77       	andi	r24, 0x7E	; 126
    110e:	80 93 a6 00 	sts	0x00A6, r24

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    1112:	80 91 a9 00 	lds	r24, 0x00A9
    1116:	80 64       	ori	r24, 0x40	; 64
    1118:	80 93 a9 00 	sts	0x00A9, r24
	}

End_Of_Control_Send:
	Pipe_Freeze();

	if (BusSuspended)
    111c:	f0 fc       	sbrc	r15, 0
    111e:	05 c0       	rjmp	.+10     	; 0x112a <USB_Host_SendControlRequest+0x1ec>
			 *  messages to the device.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				UHCON &= ~(1 << SOFEN);
    1120:	80 91 9e 00 	lds	r24, 0x009E
    1124:	8e 7f       	andi	r24, 0xFE	; 254
    1126:	80 93 9e 00 	sts	0x009E, r24
			 *  \param[in] PipeNumber  Index of the pipe to reset.
			 */
			static inline void Pipe_ResetPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ResetPipe(const uint8_t PipeNumber)
			{
				UPRST = (1 << PipeNumber);
    112a:	81 e0       	ldi	r24, 0x01	; 1
    112c:	80 93 a8 00 	sts	0x00A8, r24
				UPRST = 0;
    1130:	10 92 a8 00 	sts	0x00A8, r1
	  USB_Host_SuspendBus();

	Pipe_ResetPipe(PIPE_CONTROLPIPE);

	return ReturnStatus;
}
    1134:	89 2f       	mov	r24, r25
    1136:	df 91       	pop	r29
    1138:	cf 91       	pop	r28
    113a:	1f 91       	pop	r17
    113c:	0f 91       	pop	r16
    113e:	ff 90       	pop	r15
    1140:	08 95       	ret

00001142 <Pipe_Read_Stream_LE>:
uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE Buffer,
                            uint16_t Length
                            __CALLBACK_PARAM)
{
    1142:	ff 92       	push	r15
    1144:	0f 93       	push	r16
    1146:	1f 93       	push	r17
    1148:	cf 93       	push	r28
    114a:	df 93       	push	r29
    114c:	18 2f       	mov	r17, r24
    114e:	09 2f       	mov	r16, r25
    1150:	eb 01       	movw	r28, r22
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    1152:	80 91 aa 00 	lds	r24, 0x00AA
    1156:	8f 7c       	andi	r24, 0xCF	; 207
    1158:	80 61       	ori	r24, 0x10	; 16
    115a:	80 93 aa 00 	sts	0x00AA, r24
	uint8_t* DataStream = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	uint8_t  ErrorCode;

	Pipe_SetPipeToken(TEMPLATE_TOKEN);

	if ((ErrorCode = Pipe_WaitUntilReady()))
    115e:	ee dc       	rcall	.-1572   	; 0xb3c <Pipe_WaitUntilReady>
    1160:	f8 2e       	mov	r15, r24
    1162:	88 23       	and	r24, r24
    1164:	d1 f4       	brne	.+52     	; 0x119a <Pipe_Read_Stream_LE+0x58>
uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE Buffer,
                            uint16_t Length
                            __CALLBACK_PARAM)
{
	uint8_t* DataStream = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
    1166:	81 2f       	mov	r24, r17
    1168:	90 2f       	mov	r25, r16
    116a:	9c 01       	movw	r18, r24
    116c:	89 01       	movw	r16, r18
    116e:	13 c0       	rjmp	.+38     	; 0x1196 <Pipe_Read_Stream_LE+0x54>
			 *  \return Boolean true if the currently selected pipe may be read from or written to, depending on its direction.
			 */
			static inline bool Pipe_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsReadWriteAllowed(void)
			{
				return ((UPINTX & (1 << RWAL)) ? true : false);
    1170:	80 91 a6 00 	lds	r24, 0x00A6
	}
	#endif

	while (Length)
	{
		if (!(Pipe_IsReadWriteAllowed()))
    1174:	85 fd       	sbrc	r24, 5
    1176:	09 c0       	rjmp	.+18     	; 0x118a <Pipe_Read_Stream_LE+0x48>
			 *  \ingroup Group_PipePacketManagement
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
    1178:	80 91 a6 00 	lds	r24, 0x00A6
    117c:	8e 77       	andi	r24, 0x7E	; 126
    117e:	80 93 a6 00 	sts	0x00A6, r24
			#if !defined(NO_STREAM_CALLBACKS)
			if ((Callback != NULL) && (Callback() == STREAMCALLBACK_Abort))
			  return PIPE_RWSTREAM_CallbackAborted;
			#endif

			if ((ErrorCode = Pipe_WaitUntilReady()))
    1182:	dc dc       	rcall	.-1608   	; 0xb3c <Pipe_WaitUntilReady>
    1184:	88 23       	and	r24, r24
    1186:	39 f0       	breq	.+14     	; 0x1196 <Pipe_Read_Stream_LE+0x54>
    1188:	09 c0       	rjmp	.+18     	; 0x119c <Pipe_Read_Stream_LE+0x5a>
			 *  \return Next byte in the currently selected pipe's FIFO buffer.
			 */
			static inline uint8_t Pipe_Read_Byte(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_Read_Byte(void)
			{
				return UPDATX;
    118a:	80 91 af 00 	lds	r24, 0x00AF
			  return ErrorCode;
		}
		else
		{
			TEMPLATE_TRANSFER_BYTE(DataStream);
    118e:	f8 01       	movw	r30, r16
    1190:	81 93       	st	Z+, r24
    1192:	8f 01       	movw	r16, r30
			Length--;
    1194:	21 97       	sbiw	r28, 0x01	; 1
				} while (Length >= 8);
		}
	}
	#endif

	while (Length)
    1196:	20 97       	sbiw	r28, 0x00	; 0
    1198:	59 f7       	brne	.-42     	; 0x1170 <Pipe_Read_Stream_LE+0x2e>
    119a:	8f 2d       	mov	r24, r15
			Length--;
		}
	}

	return PIPE_RWSTREAM_NoError;
}
    119c:	df 91       	pop	r29
    119e:	cf 91       	pop	r28
    11a0:	1f 91       	pop	r17
    11a2:	0f 91       	pop	r16
    11a4:	ff 90       	pop	r15
    11a6:	08 95       	ret

000011a8 <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
    11a8:	ff 92       	push	r15
    11aa:	0f 93       	push	r16
    11ac:	1f 93       	push	r17
			 *  \return Index of the currently selected pipe.
			 */
			static inline uint8_t Pipe_GetCurrentPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetCurrentPipe(void)
			{
				return (UPNUM & PIPE_PIPENUM_MASK);
    11ae:	07 ea       	ldi	r16, 0xA7	; 167
    11b0:	10 e0       	ldi	r17, 0x00	; 0
    11b2:	f8 01       	movw	r30, r16
    11b4:	f0 80       	ld	r15, Z
    11b6:	f7 e0       	ldi	r31, 0x07	; 7
    11b8:	ff 22       	and	r15, r31
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
    11ba:	f8 01       	movw	r30, r16
    11bc:	10 82       	st	Z, r1
{
	uint8_t PrevPipe = Pipe_GetCurrentPipe();

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	USB_Host_ProcessNextHostState();
    11be:	46 db       	rcall	.-2420   	; 0x84c <USB_Host_ProcessNextHostState>
    11c0:	f8 01       	movw	r30, r16
    11c2:	f0 82       	st	Z, r15
		if (USB_CurrentMode == USB_MODE_Device)
		  USB_DeviceTask();
		else if (USB_CurrentMode == USB_MODE_Host)
		  USB_HostTask();
	#endif
}
    11c4:	1f 91       	pop	r17
    11c6:	0f 91       	pop	r16
    11c8:	ff 90       	pop	r15
    11ca:	08 95       	ret

000011cc <SerialStream_TxByte>:

FILE USARTStream = FDEV_SETUP_STREAM(SerialStream_TxByte, SerialStream_RxByte, _FDEV_SETUP_RW);

static int SerialStream_TxByte(char DataByte,
                               FILE *Stream)
{
    11cc:	98 2f       	mov	r25, r24
			 *  \param[in] DataByte  Byte to transmit through the USART.
			 */
			static inline void Serial_TxByte(const char DataByte) ATTR_ALWAYS_INLINE;
			static inline void Serial_TxByte(const char DataByte)
			{
				while (!(UCSR1A & (1 << UDRE1)));
    11ce:	80 91 c8 00 	lds	r24, 0x00C8
    11d2:	85 ff       	sbrs	r24, 5
    11d4:	fc cf       	rjmp	.-8      	; 0x11ce <SerialStream_TxByte+0x2>
				UDR1 = DataByte;
    11d6:	90 93 ce 00 	sts	0x00CE, r25
	(void)Stream;

	Serial_TxByte(DataByte);
	return 0;
}
    11da:	80 e0       	ldi	r24, 0x00	; 0
    11dc:	90 e0       	ldi	r25, 0x00	; 0
    11de:	08 95       	ret

000011e0 <SerialStream_RxByte>:
			 *  \return Boolean true if a character has been received, false otherwise.
			 */
			static inline bool Serial_IsCharReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Serial_IsCharReceived(void)
			{
				return ((UCSR1A & (1 << RXC1)) ? true : false);
    11e0:	80 91 c8 00 	lds	r24, 0x00C8

static int SerialStream_RxByte(FILE *Stream)
{
	(void)Stream;

	if (!(Serial_IsCharReceived()))
    11e4:	87 fd       	sbrc	r24, 7
    11e6:	03 c0       	rjmp	.+6      	; 0x11ee <SerialStream_RxByte+0xe>
    11e8:	2e ef       	ldi	r18, 0xFE	; 254
    11ea:	3f ef       	ldi	r19, 0xFF	; 255
    11ec:	08 c0       	rjmp	.+16     	; 0x11fe <SerialStream_RxByte+0x1e>
			 *  \return Byte received from the USART.
			 */
			static inline char Serial_RxByte(void) ATTR_ALWAYS_INLINE;
			static inline char Serial_RxByte(void)
			{
				while (!(UCSR1A & (1 << RXC1)));
    11ee:	80 91 c8 00 	lds	r24, 0x00C8
    11f2:	87 ff       	sbrs	r24, 7
    11f4:	fc cf       	rjmp	.-8      	; 0x11ee <SerialStream_RxByte+0xe>
				return UDR1;
    11f6:	80 91 ce 00 	lds	r24, 0x00CE
	  return _FDEV_EOF;

	return Serial_RxByte();
    11fa:	28 2f       	mov	r18, r24
    11fc:	30 e0       	ldi	r19, 0x00	; 0
}
    11fe:	c9 01       	movw	r24, r18
    1200:	08 95       	ret

00001202 <printf_P>:
    1202:	df 93       	push	r29
    1204:	cf 93       	push	r28
    1206:	cd b7       	in	r28, 0x3d	; 61
    1208:	de b7       	in	r29, 0x3e	; 62
    120a:	fe 01       	movw	r30, r28
    120c:	35 96       	adiw	r30, 0x05	; 5
    120e:	61 91       	ld	r22, Z+
    1210:	71 91       	ld	r23, Z+
    1212:	a0 91 3f 01 	lds	r26, 0x013F
    1216:	b0 91 40 01 	lds	r27, 0x0140
    121a:	13 96       	adiw	r26, 0x03	; 3
    121c:	8c 91       	ld	r24, X
    121e:	13 97       	sbiw	r26, 0x03	; 3
    1220:	88 60       	ori	r24, 0x08	; 8
    1222:	13 96       	adiw	r26, 0x03	; 3
    1224:	8c 93       	st	X, r24
    1226:	80 91 3f 01 	lds	r24, 0x013F
    122a:	90 91 40 01 	lds	r25, 0x0140
    122e:	af 01       	movw	r20, r30
    1230:	3f d0       	rcall	.+126    	; 0x12b0 <vfprintf>
    1232:	e0 91 3f 01 	lds	r30, 0x013F
    1236:	f0 91 40 01 	lds	r31, 0x0140
    123a:	23 81       	ldd	r18, Z+3	; 0x03
    123c:	27 7f       	andi	r18, 0xF7	; 247
    123e:	23 83       	std	Z+3, r18	; 0x03
    1240:	cf 91       	pop	r28
    1242:	df 91       	pop	r29
    1244:	08 95       	ret

00001246 <puts_P>:
    1246:	0f 93       	push	r16
    1248:	1f 93       	push	r17
    124a:	cf 93       	push	r28
    124c:	df 93       	push	r29
    124e:	ec 01       	movw	r28, r24
    1250:	e0 91 3f 01 	lds	r30, 0x013F
    1254:	f0 91 40 01 	lds	r31, 0x0140
    1258:	83 81       	ldd	r24, Z+3	; 0x03
    125a:	81 ff       	sbrs	r24, 1
    125c:	21 c0       	rjmp	.+66     	; 0x12a0 <puts_P+0x5a>
    125e:	00 e0       	ldi	r16, 0x00	; 0
    1260:	10 e0       	ldi	r17, 0x00	; 0
    1262:	0e c0       	rjmp	.+28     	; 0x1280 <puts_P+0x3a>
    1264:	e0 91 3f 01 	lds	r30, 0x013F
    1268:	f0 91 40 01 	lds	r31, 0x0140
    126c:	20 85       	ldd	r18, Z+8	; 0x08
    126e:	31 85       	ldd	r19, Z+9	; 0x09
    1270:	bf 01       	movw	r22, r30
    1272:	f9 01       	movw	r30, r18
    1274:	09 95       	icall
    1276:	89 2b       	or	r24, r25
    1278:	11 f0       	breq	.+4      	; 0x127e <puts_P+0x38>
    127a:	0f ef       	ldi	r16, 0xFF	; 255
    127c:	1f ef       	ldi	r17, 0xFF	; 255
    127e:	21 96       	adiw	r28, 0x01	; 1
    1280:	fe 01       	movw	r30, r28
    1282:	84 91       	lpm	r24, Z+
    1284:	88 23       	and	r24, r24
    1286:	71 f7       	brne	.-36     	; 0x1264 <puts_P+0x1e>
    1288:	e0 91 3f 01 	lds	r30, 0x013F
    128c:	f0 91 40 01 	lds	r31, 0x0140
    1290:	20 85       	ldd	r18, Z+8	; 0x08
    1292:	31 85       	ldd	r19, Z+9	; 0x09
    1294:	8a e0       	ldi	r24, 0x0A	; 10
    1296:	bf 01       	movw	r22, r30
    1298:	f9 01       	movw	r30, r18
    129a:	09 95       	icall
    129c:	89 2b       	or	r24, r25
    129e:	11 f0       	breq	.+4      	; 0x12a4 <puts_P+0x5e>
    12a0:	0f ef       	ldi	r16, 0xFF	; 255
    12a2:	1f ef       	ldi	r17, 0xFF	; 255
    12a4:	c8 01       	movw	r24, r16
    12a6:	df 91       	pop	r29
    12a8:	cf 91       	pop	r28
    12aa:	1f 91       	pop	r17
    12ac:	0f 91       	pop	r16
    12ae:	08 95       	ret

000012b0 <vfprintf>:
    12b0:	2f 92       	push	r2
    12b2:	3f 92       	push	r3
    12b4:	4f 92       	push	r4
    12b6:	5f 92       	push	r5
    12b8:	6f 92       	push	r6
    12ba:	7f 92       	push	r7
    12bc:	8f 92       	push	r8
    12be:	9f 92       	push	r9
    12c0:	af 92       	push	r10
    12c2:	bf 92       	push	r11
    12c4:	cf 92       	push	r12
    12c6:	df 92       	push	r13
    12c8:	ef 92       	push	r14
    12ca:	ff 92       	push	r15
    12cc:	0f 93       	push	r16
    12ce:	1f 93       	push	r17
    12d0:	df 93       	push	r29
    12d2:	cf 93       	push	r28
    12d4:	cd b7       	in	r28, 0x3d	; 61
    12d6:	de b7       	in	r29, 0x3e	; 62
    12d8:	2b 97       	sbiw	r28, 0x0b	; 11
    12da:	0f b6       	in	r0, 0x3f	; 63
    12dc:	f8 94       	cli
    12de:	de bf       	out	0x3e, r29	; 62
    12e0:	0f be       	out	0x3f, r0	; 63
    12e2:	cd bf       	out	0x3d, r28	; 61
    12e4:	3c 01       	movw	r6, r24
    12e6:	2b 01       	movw	r4, r22
    12e8:	5a 01       	movw	r10, r20
    12ea:	fc 01       	movw	r30, r24
    12ec:	17 82       	std	Z+7, r1	; 0x07
    12ee:	16 82       	std	Z+6, r1	; 0x06
    12f0:	83 81       	ldd	r24, Z+3	; 0x03
    12f2:	81 fd       	sbrc	r24, 1
    12f4:	03 c0       	rjmp	.+6      	; 0x12fc <vfprintf+0x4c>
    12f6:	6f ef       	ldi	r22, 0xFF	; 255
    12f8:	7f ef       	ldi	r23, 0xFF	; 255
    12fa:	b9 c1       	rjmp	.+882    	; 0x166e <vfprintf+0x3be>
    12fc:	9a e0       	ldi	r25, 0x0A	; 10
    12fe:	89 2e       	mov	r8, r25
    1300:	1e 01       	movw	r2, r28
    1302:	08 94       	sec
    1304:	21 1c       	adc	r2, r1
    1306:	31 1c       	adc	r3, r1
    1308:	f3 01       	movw	r30, r6
    130a:	23 81       	ldd	r18, Z+3	; 0x03
    130c:	f2 01       	movw	r30, r4
    130e:	23 fd       	sbrc	r18, 3
    1310:	85 91       	lpm	r24, Z+
    1312:	23 ff       	sbrs	r18, 3
    1314:	81 91       	ld	r24, Z+
    1316:	2f 01       	movw	r4, r30
    1318:	88 23       	and	r24, r24
    131a:	09 f4       	brne	.+2      	; 0x131e <vfprintf+0x6e>
    131c:	a5 c1       	rjmp	.+842    	; 0x1668 <vfprintf+0x3b8>
    131e:	85 32       	cpi	r24, 0x25	; 37
    1320:	39 f4       	brne	.+14     	; 0x1330 <vfprintf+0x80>
    1322:	23 fd       	sbrc	r18, 3
    1324:	85 91       	lpm	r24, Z+
    1326:	23 ff       	sbrs	r18, 3
    1328:	81 91       	ld	r24, Z+
    132a:	2f 01       	movw	r4, r30
    132c:	85 32       	cpi	r24, 0x25	; 37
    132e:	21 f4       	brne	.+8      	; 0x1338 <vfprintf+0x88>
    1330:	90 e0       	ldi	r25, 0x00	; 0
    1332:	b3 01       	movw	r22, r6
    1334:	cc d1       	rcall	.+920    	; 0x16ce <fputc>
    1336:	e8 cf       	rjmp	.-48     	; 0x1308 <vfprintf+0x58>
    1338:	98 2f       	mov	r25, r24
    133a:	ff 24       	eor	r15, r15
    133c:	ee 24       	eor	r14, r14
    133e:	99 24       	eor	r9, r9
    1340:	ff e1       	ldi	r31, 0x1F	; 31
    1342:	ff 15       	cp	r31, r15
    1344:	d0 f0       	brcs	.+52     	; 0x137a <vfprintf+0xca>
    1346:	9b 32       	cpi	r25, 0x2B	; 43
    1348:	69 f0       	breq	.+26     	; 0x1364 <vfprintf+0xb4>
    134a:	9c 32       	cpi	r25, 0x2C	; 44
    134c:	28 f4       	brcc	.+10     	; 0x1358 <vfprintf+0xa8>
    134e:	90 32       	cpi	r25, 0x20	; 32
    1350:	59 f0       	breq	.+22     	; 0x1368 <vfprintf+0xb8>
    1352:	93 32       	cpi	r25, 0x23	; 35
    1354:	91 f4       	brne	.+36     	; 0x137a <vfprintf+0xca>
    1356:	0e c0       	rjmp	.+28     	; 0x1374 <vfprintf+0xc4>
    1358:	9d 32       	cpi	r25, 0x2D	; 45
    135a:	49 f0       	breq	.+18     	; 0x136e <vfprintf+0xbe>
    135c:	90 33       	cpi	r25, 0x30	; 48
    135e:	69 f4       	brne	.+26     	; 0x137a <vfprintf+0xca>
    1360:	41 e0       	ldi	r20, 0x01	; 1
    1362:	24 c0       	rjmp	.+72     	; 0x13ac <vfprintf+0xfc>
    1364:	52 e0       	ldi	r21, 0x02	; 2
    1366:	f5 2a       	or	r15, r21
    1368:	84 e0       	ldi	r24, 0x04	; 4
    136a:	f8 2a       	or	r15, r24
    136c:	28 c0       	rjmp	.+80     	; 0x13be <vfprintf+0x10e>
    136e:	98 e0       	ldi	r25, 0x08	; 8
    1370:	f9 2a       	or	r15, r25
    1372:	25 c0       	rjmp	.+74     	; 0x13be <vfprintf+0x10e>
    1374:	e0 e1       	ldi	r30, 0x10	; 16
    1376:	fe 2a       	or	r15, r30
    1378:	22 c0       	rjmp	.+68     	; 0x13be <vfprintf+0x10e>
    137a:	f7 fc       	sbrc	r15, 7
    137c:	29 c0       	rjmp	.+82     	; 0x13d0 <vfprintf+0x120>
    137e:	89 2f       	mov	r24, r25
    1380:	80 53       	subi	r24, 0x30	; 48
    1382:	8a 30       	cpi	r24, 0x0A	; 10
    1384:	70 f4       	brcc	.+28     	; 0x13a2 <vfprintf+0xf2>
    1386:	f6 fe       	sbrs	r15, 6
    1388:	05 c0       	rjmp	.+10     	; 0x1394 <vfprintf+0xe4>
    138a:	98 9c       	mul	r9, r8
    138c:	90 2c       	mov	r9, r0
    138e:	11 24       	eor	r1, r1
    1390:	98 0e       	add	r9, r24
    1392:	15 c0       	rjmp	.+42     	; 0x13be <vfprintf+0x10e>
    1394:	e8 9c       	mul	r14, r8
    1396:	e0 2c       	mov	r14, r0
    1398:	11 24       	eor	r1, r1
    139a:	e8 0e       	add	r14, r24
    139c:	f0 e2       	ldi	r31, 0x20	; 32
    139e:	ff 2a       	or	r15, r31
    13a0:	0e c0       	rjmp	.+28     	; 0x13be <vfprintf+0x10e>
    13a2:	9e 32       	cpi	r25, 0x2E	; 46
    13a4:	29 f4       	brne	.+10     	; 0x13b0 <vfprintf+0x100>
    13a6:	f6 fc       	sbrc	r15, 6
    13a8:	5f c1       	rjmp	.+702    	; 0x1668 <vfprintf+0x3b8>
    13aa:	40 e4       	ldi	r20, 0x40	; 64
    13ac:	f4 2a       	or	r15, r20
    13ae:	07 c0       	rjmp	.+14     	; 0x13be <vfprintf+0x10e>
    13b0:	9c 36       	cpi	r25, 0x6C	; 108
    13b2:	19 f4       	brne	.+6      	; 0x13ba <vfprintf+0x10a>
    13b4:	50 e8       	ldi	r21, 0x80	; 128
    13b6:	f5 2a       	or	r15, r21
    13b8:	02 c0       	rjmp	.+4      	; 0x13be <vfprintf+0x10e>
    13ba:	98 36       	cpi	r25, 0x68	; 104
    13bc:	49 f4       	brne	.+18     	; 0x13d0 <vfprintf+0x120>
    13be:	f2 01       	movw	r30, r4
    13c0:	23 fd       	sbrc	r18, 3
    13c2:	95 91       	lpm	r25, Z+
    13c4:	23 ff       	sbrs	r18, 3
    13c6:	91 91       	ld	r25, Z+
    13c8:	2f 01       	movw	r4, r30
    13ca:	99 23       	and	r25, r25
    13cc:	09 f0       	breq	.+2      	; 0x13d0 <vfprintf+0x120>
    13ce:	b8 cf       	rjmp	.-144    	; 0x1340 <vfprintf+0x90>
    13d0:	89 2f       	mov	r24, r25
    13d2:	85 54       	subi	r24, 0x45	; 69
    13d4:	83 30       	cpi	r24, 0x03	; 3
    13d6:	18 f0       	brcs	.+6      	; 0x13de <vfprintf+0x12e>
    13d8:	80 52       	subi	r24, 0x20	; 32
    13da:	83 30       	cpi	r24, 0x03	; 3
    13dc:	38 f4       	brcc	.+14     	; 0x13ec <vfprintf+0x13c>
    13de:	44 e0       	ldi	r20, 0x04	; 4
    13e0:	50 e0       	ldi	r21, 0x00	; 0
    13e2:	a4 0e       	add	r10, r20
    13e4:	b5 1e       	adc	r11, r21
    13e6:	5f e3       	ldi	r21, 0x3F	; 63
    13e8:	59 83       	std	Y+1, r21	; 0x01
    13ea:	0f c0       	rjmp	.+30     	; 0x140a <vfprintf+0x15a>
    13ec:	93 36       	cpi	r25, 0x63	; 99
    13ee:	31 f0       	breq	.+12     	; 0x13fc <vfprintf+0x14c>
    13f0:	93 37       	cpi	r25, 0x73	; 115
    13f2:	79 f0       	breq	.+30     	; 0x1412 <vfprintf+0x162>
    13f4:	93 35       	cpi	r25, 0x53	; 83
    13f6:	09 f0       	breq	.+2      	; 0x13fa <vfprintf+0x14a>
    13f8:	52 c0       	rjmp	.+164    	; 0x149e <vfprintf+0x1ee>
    13fa:	1f c0       	rjmp	.+62     	; 0x143a <vfprintf+0x18a>
    13fc:	f5 01       	movw	r30, r10
    13fe:	80 81       	ld	r24, Z
    1400:	89 83       	std	Y+1, r24	; 0x01
    1402:	42 e0       	ldi	r20, 0x02	; 2
    1404:	50 e0       	ldi	r21, 0x00	; 0
    1406:	a4 0e       	add	r10, r20
    1408:	b5 1e       	adc	r11, r21
    140a:	61 01       	movw	r12, r2
    140c:	01 e0       	ldi	r16, 0x01	; 1
    140e:	10 e0       	ldi	r17, 0x00	; 0
    1410:	11 c0       	rjmp	.+34     	; 0x1434 <vfprintf+0x184>
    1412:	f5 01       	movw	r30, r10
    1414:	c0 80       	ld	r12, Z
    1416:	d1 80       	ldd	r13, Z+1	; 0x01
    1418:	f6 fc       	sbrc	r15, 6
    141a:	03 c0       	rjmp	.+6      	; 0x1422 <vfprintf+0x172>
    141c:	6f ef       	ldi	r22, 0xFF	; 255
    141e:	7f ef       	ldi	r23, 0xFF	; 255
    1420:	02 c0       	rjmp	.+4      	; 0x1426 <vfprintf+0x176>
    1422:	69 2d       	mov	r22, r9
    1424:	70 e0       	ldi	r23, 0x00	; 0
    1426:	42 e0       	ldi	r20, 0x02	; 2
    1428:	50 e0       	ldi	r21, 0x00	; 0
    142a:	a4 0e       	add	r10, r20
    142c:	b5 1e       	adc	r11, r21
    142e:	c6 01       	movw	r24, r12
    1430:	43 d1       	rcall	.+646    	; 0x16b8 <strnlen>
    1432:	8c 01       	movw	r16, r24
    1434:	5f e7       	ldi	r21, 0x7F	; 127
    1436:	f5 22       	and	r15, r21
    1438:	13 c0       	rjmp	.+38     	; 0x1460 <vfprintf+0x1b0>
    143a:	f5 01       	movw	r30, r10
    143c:	c0 80       	ld	r12, Z
    143e:	d1 80       	ldd	r13, Z+1	; 0x01
    1440:	f6 fc       	sbrc	r15, 6
    1442:	03 c0       	rjmp	.+6      	; 0x144a <vfprintf+0x19a>
    1444:	6f ef       	ldi	r22, 0xFF	; 255
    1446:	7f ef       	ldi	r23, 0xFF	; 255
    1448:	02 c0       	rjmp	.+4      	; 0x144e <vfprintf+0x19e>
    144a:	69 2d       	mov	r22, r9
    144c:	70 e0       	ldi	r23, 0x00	; 0
    144e:	42 e0       	ldi	r20, 0x02	; 2
    1450:	50 e0       	ldi	r21, 0x00	; 0
    1452:	a4 0e       	add	r10, r20
    1454:	b5 1e       	adc	r11, r21
    1456:	c6 01       	movw	r24, r12
    1458:	24 d1       	rcall	.+584    	; 0x16a2 <strnlen_P>
    145a:	8c 01       	movw	r16, r24
    145c:	50 e8       	ldi	r21, 0x80	; 128
    145e:	f5 2a       	or	r15, r21
    1460:	f3 fe       	sbrs	r15, 3
    1462:	06 c0       	rjmp	.+12     	; 0x1470 <vfprintf+0x1c0>
    1464:	18 c0       	rjmp	.+48     	; 0x1496 <vfprintf+0x1e6>
    1466:	80 e2       	ldi	r24, 0x20	; 32
    1468:	90 e0       	ldi	r25, 0x00	; 0
    146a:	b3 01       	movw	r22, r6
    146c:	30 d1       	rcall	.+608    	; 0x16ce <fputc>
    146e:	ea 94       	dec	r14
    1470:	8e 2d       	mov	r24, r14
    1472:	90 e0       	ldi	r25, 0x00	; 0
    1474:	08 17       	cp	r16, r24
    1476:	19 07       	cpc	r17, r25
    1478:	b0 f3       	brcs	.-20     	; 0x1466 <vfprintf+0x1b6>
    147a:	0d c0       	rjmp	.+26     	; 0x1496 <vfprintf+0x1e6>
    147c:	f6 01       	movw	r30, r12
    147e:	f7 fc       	sbrc	r15, 7
    1480:	85 91       	lpm	r24, Z+
    1482:	f7 fe       	sbrs	r15, 7
    1484:	81 91       	ld	r24, Z+
    1486:	6f 01       	movw	r12, r30
    1488:	90 e0       	ldi	r25, 0x00	; 0
    148a:	b3 01       	movw	r22, r6
    148c:	20 d1       	rcall	.+576    	; 0x16ce <fputc>
    148e:	e1 10       	cpse	r14, r1
    1490:	ea 94       	dec	r14
    1492:	01 50       	subi	r16, 0x01	; 1
    1494:	10 40       	sbci	r17, 0x00	; 0
    1496:	01 15       	cp	r16, r1
    1498:	11 05       	cpc	r17, r1
    149a:	81 f7       	brne	.-32     	; 0x147c <vfprintf+0x1cc>
    149c:	e2 c0       	rjmp	.+452    	; 0x1662 <vfprintf+0x3b2>
    149e:	94 36       	cpi	r25, 0x64	; 100
    14a0:	11 f0       	breq	.+4      	; 0x14a6 <vfprintf+0x1f6>
    14a2:	99 36       	cpi	r25, 0x69	; 105
    14a4:	61 f5       	brne	.+88     	; 0x14fe <vfprintf+0x24e>
    14a6:	f7 fe       	sbrs	r15, 7
    14a8:	08 c0       	rjmp	.+16     	; 0x14ba <vfprintf+0x20a>
    14aa:	f5 01       	movw	r30, r10
    14ac:	20 81       	ld	r18, Z
    14ae:	31 81       	ldd	r19, Z+1	; 0x01
    14b0:	42 81       	ldd	r20, Z+2	; 0x02
    14b2:	53 81       	ldd	r21, Z+3	; 0x03
    14b4:	84 e0       	ldi	r24, 0x04	; 4
    14b6:	90 e0       	ldi	r25, 0x00	; 0
    14b8:	0a c0       	rjmp	.+20     	; 0x14ce <vfprintf+0x21e>
    14ba:	f5 01       	movw	r30, r10
    14bc:	80 81       	ld	r24, Z
    14be:	91 81       	ldd	r25, Z+1	; 0x01
    14c0:	9c 01       	movw	r18, r24
    14c2:	44 27       	eor	r20, r20
    14c4:	37 fd       	sbrc	r19, 7
    14c6:	40 95       	com	r20
    14c8:	54 2f       	mov	r21, r20
    14ca:	82 e0       	ldi	r24, 0x02	; 2
    14cc:	90 e0       	ldi	r25, 0x00	; 0
    14ce:	a8 0e       	add	r10, r24
    14d0:	b9 1e       	adc	r11, r25
    14d2:	9f e6       	ldi	r25, 0x6F	; 111
    14d4:	f9 22       	and	r15, r25
    14d6:	57 ff       	sbrs	r21, 7
    14d8:	09 c0       	rjmp	.+18     	; 0x14ec <vfprintf+0x23c>
    14da:	50 95       	com	r21
    14dc:	40 95       	com	r20
    14de:	30 95       	com	r19
    14e0:	21 95       	neg	r18
    14e2:	3f 4f       	sbci	r19, 0xFF	; 255
    14e4:	4f 4f       	sbci	r20, 0xFF	; 255
    14e6:	5f 4f       	sbci	r21, 0xFF	; 255
    14e8:	e0 e8       	ldi	r30, 0x80	; 128
    14ea:	fe 2a       	or	r15, r30
    14ec:	ca 01       	movw	r24, r20
    14ee:	b9 01       	movw	r22, r18
    14f0:	a1 01       	movw	r20, r2
    14f2:	2a e0       	ldi	r18, 0x0A	; 10
    14f4:	30 e0       	ldi	r19, 0x00	; 0
    14f6:	17 d1       	rcall	.+558    	; 0x1726 <__ultoa_invert>
    14f8:	d8 2e       	mov	r13, r24
    14fa:	d2 18       	sub	r13, r2
    14fc:	3f c0       	rjmp	.+126    	; 0x157c <vfprintf+0x2cc>
    14fe:	95 37       	cpi	r25, 0x75	; 117
    1500:	29 f4       	brne	.+10     	; 0x150c <vfprintf+0x25c>
    1502:	1f 2d       	mov	r17, r15
    1504:	1f 7e       	andi	r17, 0xEF	; 239
    1506:	2a e0       	ldi	r18, 0x0A	; 10
    1508:	30 e0       	ldi	r19, 0x00	; 0
    150a:	1d c0       	rjmp	.+58     	; 0x1546 <vfprintf+0x296>
    150c:	1f 2d       	mov	r17, r15
    150e:	19 7f       	andi	r17, 0xF9	; 249
    1510:	9f 36       	cpi	r25, 0x6F	; 111
    1512:	61 f0       	breq	.+24     	; 0x152c <vfprintf+0x27c>
    1514:	90 37       	cpi	r25, 0x70	; 112
    1516:	20 f4       	brcc	.+8      	; 0x1520 <vfprintf+0x270>
    1518:	98 35       	cpi	r25, 0x58	; 88
    151a:	09 f0       	breq	.+2      	; 0x151e <vfprintf+0x26e>
    151c:	a5 c0       	rjmp	.+330    	; 0x1668 <vfprintf+0x3b8>
    151e:	0f c0       	rjmp	.+30     	; 0x153e <vfprintf+0x28e>
    1520:	90 37       	cpi	r25, 0x70	; 112
    1522:	39 f0       	breq	.+14     	; 0x1532 <vfprintf+0x282>
    1524:	98 37       	cpi	r25, 0x78	; 120
    1526:	09 f0       	breq	.+2      	; 0x152a <vfprintf+0x27a>
    1528:	9f c0       	rjmp	.+318    	; 0x1668 <vfprintf+0x3b8>
    152a:	04 c0       	rjmp	.+8      	; 0x1534 <vfprintf+0x284>
    152c:	28 e0       	ldi	r18, 0x08	; 8
    152e:	30 e0       	ldi	r19, 0x00	; 0
    1530:	0a c0       	rjmp	.+20     	; 0x1546 <vfprintf+0x296>
    1532:	10 61       	ori	r17, 0x10	; 16
    1534:	14 fd       	sbrc	r17, 4
    1536:	14 60       	ori	r17, 0x04	; 4
    1538:	20 e1       	ldi	r18, 0x10	; 16
    153a:	30 e0       	ldi	r19, 0x00	; 0
    153c:	04 c0       	rjmp	.+8      	; 0x1546 <vfprintf+0x296>
    153e:	14 fd       	sbrc	r17, 4
    1540:	16 60       	ori	r17, 0x06	; 6
    1542:	20 e1       	ldi	r18, 0x10	; 16
    1544:	32 e0       	ldi	r19, 0x02	; 2
    1546:	17 ff       	sbrs	r17, 7
    1548:	08 c0       	rjmp	.+16     	; 0x155a <vfprintf+0x2aa>
    154a:	f5 01       	movw	r30, r10
    154c:	60 81       	ld	r22, Z
    154e:	71 81       	ldd	r23, Z+1	; 0x01
    1550:	82 81       	ldd	r24, Z+2	; 0x02
    1552:	93 81       	ldd	r25, Z+3	; 0x03
    1554:	44 e0       	ldi	r20, 0x04	; 4
    1556:	50 e0       	ldi	r21, 0x00	; 0
    1558:	08 c0       	rjmp	.+16     	; 0x156a <vfprintf+0x2ba>
    155a:	f5 01       	movw	r30, r10
    155c:	80 81       	ld	r24, Z
    155e:	91 81       	ldd	r25, Z+1	; 0x01
    1560:	bc 01       	movw	r22, r24
    1562:	80 e0       	ldi	r24, 0x00	; 0
    1564:	90 e0       	ldi	r25, 0x00	; 0
    1566:	42 e0       	ldi	r20, 0x02	; 2
    1568:	50 e0       	ldi	r21, 0x00	; 0
    156a:	a4 0e       	add	r10, r20
    156c:	b5 1e       	adc	r11, r21
    156e:	a1 01       	movw	r20, r2
    1570:	da d0       	rcall	.+436    	; 0x1726 <__ultoa_invert>
    1572:	d8 2e       	mov	r13, r24
    1574:	d2 18       	sub	r13, r2
    1576:	8f e7       	ldi	r24, 0x7F	; 127
    1578:	f8 2e       	mov	r15, r24
    157a:	f1 22       	and	r15, r17
    157c:	f6 fe       	sbrs	r15, 6
    157e:	0b c0       	rjmp	.+22     	; 0x1596 <vfprintf+0x2e6>
    1580:	5e ef       	ldi	r21, 0xFE	; 254
    1582:	f5 22       	and	r15, r21
    1584:	d9 14       	cp	r13, r9
    1586:	38 f4       	brcc	.+14     	; 0x1596 <vfprintf+0x2e6>
    1588:	f4 fe       	sbrs	r15, 4
    158a:	07 c0       	rjmp	.+14     	; 0x159a <vfprintf+0x2ea>
    158c:	f2 fc       	sbrc	r15, 2
    158e:	05 c0       	rjmp	.+10     	; 0x159a <vfprintf+0x2ea>
    1590:	8f ee       	ldi	r24, 0xEF	; 239
    1592:	f8 22       	and	r15, r24
    1594:	02 c0       	rjmp	.+4      	; 0x159a <vfprintf+0x2ea>
    1596:	1d 2d       	mov	r17, r13
    1598:	01 c0       	rjmp	.+2      	; 0x159c <vfprintf+0x2ec>
    159a:	19 2d       	mov	r17, r9
    159c:	f4 fe       	sbrs	r15, 4
    159e:	0d c0       	rjmp	.+26     	; 0x15ba <vfprintf+0x30a>
    15a0:	fe 01       	movw	r30, r28
    15a2:	ed 0d       	add	r30, r13
    15a4:	f1 1d       	adc	r31, r1
    15a6:	80 81       	ld	r24, Z
    15a8:	80 33       	cpi	r24, 0x30	; 48
    15aa:	19 f4       	brne	.+6      	; 0x15b2 <vfprintf+0x302>
    15ac:	99 ee       	ldi	r25, 0xE9	; 233
    15ae:	f9 22       	and	r15, r25
    15b0:	08 c0       	rjmp	.+16     	; 0x15c2 <vfprintf+0x312>
    15b2:	1f 5f       	subi	r17, 0xFF	; 255
    15b4:	f2 fe       	sbrs	r15, 2
    15b6:	05 c0       	rjmp	.+10     	; 0x15c2 <vfprintf+0x312>
    15b8:	03 c0       	rjmp	.+6      	; 0x15c0 <vfprintf+0x310>
    15ba:	8f 2d       	mov	r24, r15
    15bc:	86 78       	andi	r24, 0x86	; 134
    15be:	09 f0       	breq	.+2      	; 0x15c2 <vfprintf+0x312>
    15c0:	1f 5f       	subi	r17, 0xFF	; 255
    15c2:	0f 2d       	mov	r16, r15
    15c4:	f3 fc       	sbrc	r15, 3
    15c6:	13 c0       	rjmp	.+38     	; 0x15ee <vfprintf+0x33e>
    15c8:	f0 fe       	sbrs	r15, 0
    15ca:	0e c0       	rjmp	.+28     	; 0x15e8 <vfprintf+0x338>
    15cc:	1e 15       	cp	r17, r14
    15ce:	10 f0       	brcs	.+4      	; 0x15d4 <vfprintf+0x324>
    15d0:	9d 2c       	mov	r9, r13
    15d2:	0a c0       	rjmp	.+20     	; 0x15e8 <vfprintf+0x338>
    15d4:	9d 2c       	mov	r9, r13
    15d6:	9e 0c       	add	r9, r14
    15d8:	91 1a       	sub	r9, r17
    15da:	1e 2d       	mov	r17, r14
    15dc:	05 c0       	rjmp	.+10     	; 0x15e8 <vfprintf+0x338>
    15de:	80 e2       	ldi	r24, 0x20	; 32
    15e0:	90 e0       	ldi	r25, 0x00	; 0
    15e2:	b3 01       	movw	r22, r6
    15e4:	74 d0       	rcall	.+232    	; 0x16ce <fputc>
    15e6:	1f 5f       	subi	r17, 0xFF	; 255
    15e8:	1e 15       	cp	r17, r14
    15ea:	c8 f3       	brcs	.-14     	; 0x15de <vfprintf+0x32e>
    15ec:	04 c0       	rjmp	.+8      	; 0x15f6 <vfprintf+0x346>
    15ee:	1e 15       	cp	r17, r14
    15f0:	10 f4       	brcc	.+4      	; 0x15f6 <vfprintf+0x346>
    15f2:	e1 1a       	sub	r14, r17
    15f4:	01 c0       	rjmp	.+2      	; 0x15f8 <vfprintf+0x348>
    15f6:	ee 24       	eor	r14, r14
    15f8:	04 ff       	sbrs	r16, 4
    15fa:	0e c0       	rjmp	.+28     	; 0x1618 <vfprintf+0x368>
    15fc:	80 e3       	ldi	r24, 0x30	; 48
    15fe:	90 e0       	ldi	r25, 0x00	; 0
    1600:	b3 01       	movw	r22, r6
    1602:	65 d0       	rcall	.+202    	; 0x16ce <fputc>
    1604:	02 ff       	sbrs	r16, 2
    1606:	1b c0       	rjmp	.+54     	; 0x163e <vfprintf+0x38e>
    1608:	01 fd       	sbrc	r16, 1
    160a:	03 c0       	rjmp	.+6      	; 0x1612 <vfprintf+0x362>
    160c:	88 e7       	ldi	r24, 0x78	; 120
    160e:	90 e0       	ldi	r25, 0x00	; 0
    1610:	0e c0       	rjmp	.+28     	; 0x162e <vfprintf+0x37e>
    1612:	88 e5       	ldi	r24, 0x58	; 88
    1614:	90 e0       	ldi	r25, 0x00	; 0
    1616:	0b c0       	rjmp	.+22     	; 0x162e <vfprintf+0x37e>
    1618:	80 2f       	mov	r24, r16
    161a:	86 78       	andi	r24, 0x86	; 134
    161c:	81 f0       	breq	.+32     	; 0x163e <vfprintf+0x38e>
    161e:	01 ff       	sbrs	r16, 1
    1620:	02 c0       	rjmp	.+4      	; 0x1626 <vfprintf+0x376>
    1622:	8b e2       	ldi	r24, 0x2B	; 43
    1624:	01 c0       	rjmp	.+2      	; 0x1628 <vfprintf+0x378>
    1626:	80 e2       	ldi	r24, 0x20	; 32
    1628:	f7 fc       	sbrc	r15, 7
    162a:	8d e2       	ldi	r24, 0x2D	; 45
    162c:	90 e0       	ldi	r25, 0x00	; 0
    162e:	b3 01       	movw	r22, r6
    1630:	4e d0       	rcall	.+156    	; 0x16ce <fputc>
    1632:	05 c0       	rjmp	.+10     	; 0x163e <vfprintf+0x38e>
    1634:	80 e3       	ldi	r24, 0x30	; 48
    1636:	90 e0       	ldi	r25, 0x00	; 0
    1638:	b3 01       	movw	r22, r6
    163a:	49 d0       	rcall	.+146    	; 0x16ce <fputc>
    163c:	9a 94       	dec	r9
    163e:	d9 14       	cp	r13, r9
    1640:	c8 f3       	brcs	.-14     	; 0x1634 <vfprintf+0x384>
    1642:	da 94       	dec	r13
    1644:	f1 01       	movw	r30, r2
    1646:	ed 0d       	add	r30, r13
    1648:	f1 1d       	adc	r31, r1
    164a:	80 81       	ld	r24, Z
    164c:	90 e0       	ldi	r25, 0x00	; 0
    164e:	b3 01       	movw	r22, r6
    1650:	3e d0       	rcall	.+124    	; 0x16ce <fputc>
    1652:	dd 20       	and	r13, r13
    1654:	b1 f7       	brne	.-20     	; 0x1642 <vfprintf+0x392>
    1656:	05 c0       	rjmp	.+10     	; 0x1662 <vfprintf+0x3b2>
    1658:	80 e2       	ldi	r24, 0x20	; 32
    165a:	90 e0       	ldi	r25, 0x00	; 0
    165c:	b3 01       	movw	r22, r6
    165e:	37 d0       	rcall	.+110    	; 0x16ce <fputc>
    1660:	ea 94       	dec	r14
    1662:	ee 20       	and	r14, r14
    1664:	c9 f7       	brne	.-14     	; 0x1658 <vfprintf+0x3a8>
    1666:	50 ce       	rjmp	.-864    	; 0x1308 <vfprintf+0x58>
    1668:	f3 01       	movw	r30, r6
    166a:	66 81       	ldd	r22, Z+6	; 0x06
    166c:	77 81       	ldd	r23, Z+7	; 0x07
    166e:	cb 01       	movw	r24, r22
    1670:	2b 96       	adiw	r28, 0x0b	; 11
    1672:	0f b6       	in	r0, 0x3f	; 63
    1674:	f8 94       	cli
    1676:	de bf       	out	0x3e, r29	; 62
    1678:	0f be       	out	0x3f, r0	; 63
    167a:	cd bf       	out	0x3d, r28	; 61
    167c:	cf 91       	pop	r28
    167e:	df 91       	pop	r29
    1680:	1f 91       	pop	r17
    1682:	0f 91       	pop	r16
    1684:	ff 90       	pop	r15
    1686:	ef 90       	pop	r14
    1688:	df 90       	pop	r13
    168a:	cf 90       	pop	r12
    168c:	bf 90       	pop	r11
    168e:	af 90       	pop	r10
    1690:	9f 90       	pop	r9
    1692:	8f 90       	pop	r8
    1694:	7f 90       	pop	r7
    1696:	6f 90       	pop	r6
    1698:	5f 90       	pop	r5
    169a:	4f 90       	pop	r4
    169c:	3f 90       	pop	r3
    169e:	2f 90       	pop	r2
    16a0:	08 95       	ret

000016a2 <strnlen_P>:
    16a2:	fc 01       	movw	r30, r24
    16a4:	05 90       	lpm	r0, Z+
    16a6:	61 50       	subi	r22, 0x01	; 1
    16a8:	70 40       	sbci	r23, 0x00	; 0
    16aa:	01 10       	cpse	r0, r1
    16ac:	d8 f7       	brcc	.-10     	; 0x16a4 <strnlen_P+0x2>
    16ae:	80 95       	com	r24
    16b0:	90 95       	com	r25
    16b2:	8e 0f       	add	r24, r30
    16b4:	9f 1f       	adc	r25, r31
    16b6:	08 95       	ret

000016b8 <strnlen>:
    16b8:	fc 01       	movw	r30, r24
    16ba:	61 50       	subi	r22, 0x01	; 1
    16bc:	70 40       	sbci	r23, 0x00	; 0
    16be:	01 90       	ld	r0, Z+
    16c0:	01 10       	cpse	r0, r1
    16c2:	d8 f7       	brcc	.-10     	; 0x16ba <strnlen+0x2>
    16c4:	80 95       	com	r24
    16c6:	90 95       	com	r25
    16c8:	8e 0f       	add	r24, r30
    16ca:	9f 1f       	adc	r25, r31
    16cc:	08 95       	ret

000016ce <fputc>:
    16ce:	0f 93       	push	r16
    16d0:	1f 93       	push	r17
    16d2:	cf 93       	push	r28
    16d4:	df 93       	push	r29
    16d6:	8c 01       	movw	r16, r24
    16d8:	eb 01       	movw	r28, r22
    16da:	8b 81       	ldd	r24, Y+3	; 0x03
    16dc:	81 ff       	sbrs	r24, 1
    16de:	1b c0       	rjmp	.+54     	; 0x1716 <fputc+0x48>
    16e0:	82 ff       	sbrs	r24, 2
    16e2:	0d c0       	rjmp	.+26     	; 0x16fe <fputc+0x30>
    16e4:	2e 81       	ldd	r18, Y+6	; 0x06
    16e6:	3f 81       	ldd	r19, Y+7	; 0x07
    16e8:	8c 81       	ldd	r24, Y+4	; 0x04
    16ea:	9d 81       	ldd	r25, Y+5	; 0x05
    16ec:	28 17       	cp	r18, r24
    16ee:	39 07       	cpc	r19, r25
    16f0:	64 f4       	brge	.+24     	; 0x170a <fputc+0x3c>
    16f2:	e8 81       	ld	r30, Y
    16f4:	f9 81       	ldd	r31, Y+1	; 0x01
    16f6:	01 93       	st	Z+, r16
    16f8:	f9 83       	std	Y+1, r31	; 0x01
    16fa:	e8 83       	st	Y, r30
    16fc:	06 c0       	rjmp	.+12     	; 0x170a <fputc+0x3c>
    16fe:	e8 85       	ldd	r30, Y+8	; 0x08
    1700:	f9 85       	ldd	r31, Y+9	; 0x09
    1702:	80 2f       	mov	r24, r16
    1704:	09 95       	icall
    1706:	89 2b       	or	r24, r25
    1708:	31 f4       	brne	.+12     	; 0x1716 <fputc+0x48>
    170a:	8e 81       	ldd	r24, Y+6	; 0x06
    170c:	9f 81       	ldd	r25, Y+7	; 0x07
    170e:	01 96       	adiw	r24, 0x01	; 1
    1710:	9f 83       	std	Y+7, r25	; 0x07
    1712:	8e 83       	std	Y+6, r24	; 0x06
    1714:	02 c0       	rjmp	.+4      	; 0x171a <fputc+0x4c>
    1716:	0f ef       	ldi	r16, 0xFF	; 255
    1718:	1f ef       	ldi	r17, 0xFF	; 255
    171a:	c8 01       	movw	r24, r16
    171c:	df 91       	pop	r29
    171e:	cf 91       	pop	r28
    1720:	1f 91       	pop	r17
    1722:	0f 91       	pop	r16
    1724:	08 95       	ret

00001726 <__ultoa_invert>:
    1726:	fa 01       	movw	r30, r20
    1728:	aa 27       	eor	r26, r26
    172a:	28 30       	cpi	r18, 0x08	; 8
    172c:	51 f1       	breq	.+84     	; 0x1782 <__ultoa_invert+0x5c>
    172e:	20 31       	cpi	r18, 0x10	; 16
    1730:	81 f1       	breq	.+96     	; 0x1792 <__ultoa_invert+0x6c>
    1732:	e8 94       	clt
    1734:	6f 93       	push	r22
    1736:	6e 7f       	andi	r22, 0xFE	; 254
    1738:	6e 5f       	subi	r22, 0xFE	; 254
    173a:	7f 4f       	sbci	r23, 0xFF	; 255
    173c:	8f 4f       	sbci	r24, 0xFF	; 255
    173e:	9f 4f       	sbci	r25, 0xFF	; 255
    1740:	af 4f       	sbci	r26, 0xFF	; 255
    1742:	b1 e0       	ldi	r27, 0x01	; 1
    1744:	3e d0       	rcall	.+124    	; 0x17c2 <__ultoa_invert+0x9c>
    1746:	b4 e0       	ldi	r27, 0x04	; 4
    1748:	3c d0       	rcall	.+120    	; 0x17c2 <__ultoa_invert+0x9c>
    174a:	67 0f       	add	r22, r23
    174c:	78 1f       	adc	r23, r24
    174e:	89 1f       	adc	r24, r25
    1750:	9a 1f       	adc	r25, r26
    1752:	a1 1d       	adc	r26, r1
    1754:	68 0f       	add	r22, r24
    1756:	79 1f       	adc	r23, r25
    1758:	8a 1f       	adc	r24, r26
    175a:	91 1d       	adc	r25, r1
    175c:	a1 1d       	adc	r26, r1
    175e:	6a 0f       	add	r22, r26
    1760:	71 1d       	adc	r23, r1
    1762:	81 1d       	adc	r24, r1
    1764:	91 1d       	adc	r25, r1
    1766:	a1 1d       	adc	r26, r1
    1768:	20 d0       	rcall	.+64     	; 0x17aa <__ultoa_invert+0x84>
    176a:	09 f4       	brne	.+2      	; 0x176e <__ultoa_invert+0x48>
    176c:	68 94       	set
    176e:	3f 91       	pop	r19
    1770:	2a e0       	ldi	r18, 0x0A	; 10
    1772:	26 9f       	mul	r18, r22
    1774:	11 24       	eor	r1, r1
    1776:	30 19       	sub	r19, r0
    1778:	30 5d       	subi	r19, 0xD0	; 208
    177a:	31 93       	st	Z+, r19
    177c:	de f6       	brtc	.-74     	; 0x1734 <__ultoa_invert+0xe>
    177e:	cf 01       	movw	r24, r30
    1780:	08 95       	ret
    1782:	46 2f       	mov	r20, r22
    1784:	47 70       	andi	r20, 0x07	; 7
    1786:	40 5d       	subi	r20, 0xD0	; 208
    1788:	41 93       	st	Z+, r20
    178a:	b3 e0       	ldi	r27, 0x03	; 3
    178c:	0f d0       	rcall	.+30     	; 0x17ac <__ultoa_invert+0x86>
    178e:	c9 f7       	brne	.-14     	; 0x1782 <__ultoa_invert+0x5c>
    1790:	f6 cf       	rjmp	.-20     	; 0x177e <__ultoa_invert+0x58>
    1792:	46 2f       	mov	r20, r22
    1794:	4f 70       	andi	r20, 0x0F	; 15
    1796:	40 5d       	subi	r20, 0xD0	; 208
    1798:	4a 33       	cpi	r20, 0x3A	; 58
    179a:	18 f0       	brcs	.+6      	; 0x17a2 <__ultoa_invert+0x7c>
    179c:	49 5d       	subi	r20, 0xD9	; 217
    179e:	31 fd       	sbrc	r19, 1
    17a0:	40 52       	subi	r20, 0x20	; 32
    17a2:	41 93       	st	Z+, r20
    17a4:	02 d0       	rcall	.+4      	; 0x17aa <__ultoa_invert+0x84>
    17a6:	a9 f7       	brne	.-22     	; 0x1792 <__ultoa_invert+0x6c>
    17a8:	ea cf       	rjmp	.-44     	; 0x177e <__ultoa_invert+0x58>
    17aa:	b4 e0       	ldi	r27, 0x04	; 4
    17ac:	a6 95       	lsr	r26
    17ae:	97 95       	ror	r25
    17b0:	87 95       	ror	r24
    17b2:	77 95       	ror	r23
    17b4:	67 95       	ror	r22
    17b6:	ba 95       	dec	r27
    17b8:	c9 f7       	brne	.-14     	; 0x17ac <__ultoa_invert+0x86>
    17ba:	00 97       	sbiw	r24, 0x00	; 0
    17bc:	61 05       	cpc	r22, r1
    17be:	71 05       	cpc	r23, r1
    17c0:	08 95       	ret
    17c2:	9b 01       	movw	r18, r22
    17c4:	ac 01       	movw	r20, r24
    17c6:	0a 2e       	mov	r0, r26
    17c8:	06 94       	lsr	r0
    17ca:	57 95       	ror	r21
    17cc:	47 95       	ror	r20
    17ce:	37 95       	ror	r19
    17d0:	27 95       	ror	r18
    17d2:	ba 95       	dec	r27
    17d4:	c9 f7       	brne	.-14     	; 0x17c8 <__ultoa_invert+0xa2>
    17d6:	62 0f       	add	r22, r18
    17d8:	73 1f       	adc	r23, r19
    17da:	84 1f       	adc	r24, r20
    17dc:	95 1f       	adc	r25, r21
    17de:	a0 1d       	adc	r26, r0
    17e0:	08 95       	ret

000017e2 <_exit>:
    17e2:	f8 94       	cli

000017e4 <__stop_program>:
    17e4:	ff cf       	rjmp	.-2      	; 0x17e4 <__stop_program>
