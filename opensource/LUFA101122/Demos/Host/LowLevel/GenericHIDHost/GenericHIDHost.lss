
GenericHIDHost.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000028  00800100  000017ce  00001862  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000017ce  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000013  00800128  00800128  0000188a  2**0
                  ALLOC
  3 .stab         00000eac  00000000  00000000  0000188c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000025c  00000000  00000000  00002738  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000003a0  00000000  00000000  00002994  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000007a6  00000000  00000000  00002d34  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00004b65  00000000  00000000  000034da  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001afa  00000000  00000000  0000803f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00003e09  00000000  00000000  00009b39  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000500  00000000  00000000  0000d944  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000235e  00000000  00000000  0000de44  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00002090  00000000  00000000  000101a2  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000410  00000000  00000000  00012232  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
 */
void WriteNextReport(uint8_t* ReportOUTData,
                     const uint8_t ReportIndex,
                     const uint8_t ReportType,
                     uint16_t ReportLength)
{
       0:	2e c1       	rjmp	.+604    	; 0x25e <__ctors_end>

	return USB_Host_SendControlRequest(Buffer);
}

uint8_t USB_Host_ClearPipeStall(const uint8_t EndpointNum)
{
       2:	00 00       	nop
		Pipe_DisablePipe();
	}
}

bool Pipe_IsEndpointBound(const uint8_t EndpointAddress)
{
       4:	4a c1       	rjmp	.+660    	; 0x29a <__bad_interrupt>
{
	USB_GetNextDescriptorOfType(BytesRem, CurrConfigLoc, AfterType);

	if (*BytesRem)
	  USB_GetNextDescriptorOfType(BytesRem, CurrConfigLoc, Type);
}
       6:	00 00       	nop
			Length--;
		}
	}

	return PIPE_RWSTREAM_NoError;
}
       8:	48 c1       	rjmp	.+656    	; 0x29a <__bad_interrupt>
       a:	00 00       	nop
       c:	46 c1       	rjmp	.+652    	; 0x29a <__bad_interrupt>
       e:	00 00       	nop
      10:	44 c1       	rjmp	.+648    	; 0x29a <__bad_interrupt>
      12:	00 00       	nop
      14:	42 c1       	rjmp	.+644    	; 0x29a <__bad_interrupt>
      16:	00 00       	nop
      18:	40 c1       	rjmp	.+640    	; 0x29a <__bad_interrupt>
      1a:	00 00       	nop
      1c:	3e c1       	rjmp	.+636    	; 0x29a <__bad_interrupt>
      1e:	00 00       	nop
      20:	3c c1       	rjmp	.+632    	; 0x29a <__bad_interrupt>
      22:	00 00       	nop
      24:	3a c1       	rjmp	.+628    	; 0x29a <__bad_interrupt>
      26:	00 00       	nop
      28:	26 c6       	rjmp	.+3148   	; 0xc76 <__vector_10>
      2a:	00 00       	nop
      2c:	36 c1       	rjmp	.+620    	; 0x29a <__bad_interrupt>
      2e:	00 00       	nop
      30:	34 c1       	rjmp	.+616    	; 0x29a <__bad_interrupt>
      32:	00 00       	nop
      34:	32 c1       	rjmp	.+612    	; 0x29a <__bad_interrupt>
      36:	00 00       	nop
      38:	30 c1       	rjmp	.+608    	; 0x29a <__bad_interrupt>
      3a:	00 00       	nop
      3c:	2e c1       	rjmp	.+604    	; 0x29a <__bad_interrupt>
      3e:	00 00       	nop
      40:	2c c1       	rjmp	.+600    	; 0x29a <__bad_interrupt>
      42:	00 00       	nop
      44:	2a c1       	rjmp	.+596    	; 0x29a <__bad_interrupt>
      46:	00 00       	nop
      48:	28 c1       	rjmp	.+592    	; 0x29a <__bad_interrupt>
      4a:	00 00       	nop
      4c:	26 c1       	rjmp	.+588    	; 0x29a <__bad_interrupt>
      4e:	00 00       	nop
      50:	24 c1       	rjmp	.+584    	; 0x29a <__bad_interrupt>
      52:	00 00       	nop
      54:	22 c1       	rjmp	.+580    	; 0x29a <__bad_interrupt>
      56:	00 00       	nop
      58:	20 c1       	rjmp	.+576    	; 0x29a <__bad_interrupt>
      5a:	00 00       	nop
      5c:	1e c1       	rjmp	.+572    	; 0x29a <__bad_interrupt>
      5e:	00 00       	nop
      60:	1c c1       	rjmp	.+568    	; 0x29a <__bad_interrupt>
      62:	00 00       	nop
      64:	1a c1       	rjmp	.+564    	; 0x29a <__bad_interrupt>
      66:	00 00       	nop
      68:	18 c1       	rjmp	.+560    	; 0x29a <__bad_interrupt>
      6a:	00 00       	nop
      6c:	16 c1       	rjmp	.+556    	; 0x29a <__bad_interrupt>
      6e:	00 00       	nop
      70:	14 c1       	rjmp	.+552    	; 0x29a <__bad_interrupt>
      72:	00 00       	nop
      74:	12 c1       	rjmp	.+548    	; 0x29a <__bad_interrupt>
      76:	00 00       	nop
      78:	10 c1       	rjmp	.+544    	; 0x29a <__bad_interrupt>
      7a:	00 00       	nop
      7c:	0e c1       	rjmp	.+540    	; 0x29a <__bad_interrupt>
      7e:	00 00       	nop
      80:	0c c1       	rjmp	.+536    	; 0x29a <__bad_interrupt>
      82:	00 00       	nop
      84:	0a c1       	rjmp	.+532    	; 0x29a <__bad_interrupt>
      86:	00 00       	nop
      88:	08 c1       	rjmp	.+528    	; 0x29a <__bad_interrupt>
      8a:	00 00       	nop
      8c:	06 c1       	rjmp	.+524    	; 0x29a <__bad_interrupt>
      8e:	00 00       	nop
      90:	04 c1       	rjmp	.+520    	; 0x29a <__bad_interrupt>
      92:	00 00       	nop
      94:	02 c1       	rjmp	.+516    	; 0x29a <__bad_interrupt>
      96:	00 00       	nop

00000098 <__c.4202>:
      98:	48 49 44 20 44 65 76 69 63 65 20 45 6e 75 6d 65     HID Device Enume
      a8:	72 61 74 65 64 2e 0d 0a 00                          rated....

000000b1 <__c.4200>:
      b1:	1b 5b 33 31 6d 43 6f 6e 74 72 6f 6c 20 45 72 72     .[31mControl Err
      c1:	6f 72 20 28 53 65 74 20 43 6f 6e 66 69 67 75 72     or (Set Configur
      d1:	61 74 69 6f 6e 29 2e 0d 0a 20 2d 2d 20 45 72 72     ation)... -- Err
      e1:	6f 72 20 43 6f 64 65 3a 20 25 64 0d 0a 1b 5b 33     or Code: %d...[3
      f1:	37 6d 00                                            7m.

000000f4 <__c.4197>:
      f4:	20 2d 2d 20 45 72 72 6f 72 20 43 6f 64 65 3a 20      -- Error Code: 
     104:	25 64 0d 0a 1b 5b 33 37 6d 00                       %d...[37m.

0000010e <__c.4195>:
     10e:	1b 5b 33 31 6d 49 6e 76 61 6c 69 64 20 44 65 76     .[31mInvalid Dev
     11e:	69 63 65 2e 0d 0a 00                                ice....

00000125 <__c.4193>:
     125:	1b 5b 33 31 6d 43 6f 6e 74 72 6f 6c 20 45 72 72     .[31mControl Err
     135:	6f 72 20 28 47 65 74 20 43 6f 6e 66 69 67 75 72     or (Get Configur
     145:	61 74 69 6f 6e 29 2e 0d 0a 00                       ation)....

0000014f <__c.4191>:
     14f:	47 65 74 74 69 6e 67 20 43 6f 6e 66 69 67 20 44     Getting Config D
     15f:	61 74 61 2e 0d 0a 00                                ata....

00000166 <__c.4148>:
     166:	0d 0a 00                                            ...

00000169 <__c.4143>:
     169:	30 78 25 30 32 58 20 00                             0x%02X .

00000171 <__c.4132>:
     171:	1b 5b 33 31 6d 44 65 76 20 45 6e 75 6d 20 45 72     .[31mDev Enum Er
     181:	72 6f 72 0d 0a 20 2d 2d 20 45 72 72 6f 72 20 43     ror.. -- Error C
     191:	6f 64 65 20 25 64 0d 0a 20 2d 2d 20 53 75 62 20     ode %d.. -- Sub 
     1a1:	45 72 72 6f 72 20 43 6f 64 65 20 25 64 0d 0a 20     Error Code %d.. 
     1b1:	2d 2d 20 49 6e 20 53 74 61 74 65 20 25 64 0d 0a     -- In State %d..
     1c1:	1b 5b 33 37 6d 00                                   .[37m.

000001c7 <__c.4124>:
     1c7:	1b 5b 33 31 6d 48 6f 73 74 20 4d 6f 64 65 20 45     .[31mHost Mode E
     1d7:	72 72 6f 72 0d 0a 20 2d 2d 20 45 72 72 6f 72 20     rror.. -- Error 
     1e7:	43 6f 64 65 20 25 64 0d 0a 1b 5b 33 37 6d 00        Code %d...[37m.

000001f6 <__c.4116>:
     1f6:	1b 5b 33 32 6d 44 65 76 69 63 65 20 55 6e 61 74     .[32mDevice Unat
     206:	74 61 63 68 65 64 2e 0d 0a 1b 5b 33 37 6d 00        tached....[37m.

00000215 <__c.4111>:
     215:	1b 5b 33 32 6d 44 65 76 69 63 65 20 41 74 74 61     .[32mDevice Atta
     225:	63 68 65 64 2e 0d 0a 1b 5b 33 37 6d 00              ched....[37m.

00000232 <__c.4097>:
     232:	1b 5b 33 36 6d 47 65 6e 65 72 69 63 20 48 49 44     .[36mGeneric HID
     242:	20 48 6f 73 74 20 44 65 6d 6f 20 72 75 6e 6e 69      Host Demo runni
     252:	6e 67 2e 0d 0a 1b 5b 33 37 6d 00 00                 ng....[37m..

0000025e <__ctors_end>:
     25e:	11 24       	eor	r1, r1
     260:	1f be       	out	0x3f, r1	; 63
     262:	cf ef       	ldi	r28, 0xFF	; 255
     264:	d0 e2       	ldi	r29, 0x20	; 32
     266:	de bf       	out	0x3e, r29	; 62
     268:	cd bf       	out	0x3d, r28	; 61

0000026a <__do_copy_data>:
     26a:	11 e0       	ldi	r17, 0x01	; 1
     26c:	a0 e0       	ldi	r26, 0x00	; 0
     26e:	b1 e0       	ldi	r27, 0x01	; 1
     270:	ee ec       	ldi	r30, 0xCE	; 206
     272:	f7 e1       	ldi	r31, 0x17	; 23
     274:	00 e0       	ldi	r16, 0x00	; 0
     276:	0b bf       	out	0x3b, r16	; 59
     278:	02 c0       	rjmp	.+4      	; 0x27e <__do_copy_data+0x14>
     27a:	07 90       	elpm	r0, Z+
     27c:	0d 92       	st	X+, r0
     27e:	a8 32       	cpi	r26, 0x28	; 40
     280:	b1 07       	cpc	r27, r17
     282:	d9 f7       	brne	.-10     	; 0x27a <__do_copy_data+0x10>

00000284 <__do_clear_bss>:
     284:	11 e0       	ldi	r17, 0x01	; 1
     286:	a8 e2       	ldi	r26, 0x28	; 40
     288:	b1 e0       	ldi	r27, 0x01	; 1
     28a:	01 c0       	rjmp	.+2      	; 0x28e <.do_clear_bss_start>

0000028c <.do_clear_bss_loop>:
     28c:	1d 92       	st	X+, r1

0000028e <.do_clear_bss_start>:
     28e:	ab 33       	cpi	r26, 0x3B	; 59
     290:	b1 07       	cpc	r27, r17
     292:	e1 f7       	brne	.-8      	; 0x28c <.do_clear_bss_loop>
     294:	69 d1       	rcall	.+722    	; 0x568 <main>
     296:	0c 94 e5 0b 	jmp	0x17ca	; 0x17ca <_exit>

0000029a <__bad_interrupt>:
     29a:	b2 ce       	rjmp	.-668    	; 0x0 <__vectors>

0000029c <EVENT_USB_Host_DeviceEnumerationComplete>:
				PORTD &= ~LEDMask;
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
			{
				PORTD = ((PORTD & ~LEDS_ALL_LEDS) | LEDMask);
     29c:	8b b1       	in	r24, 0x0b	; 11
     29e:	8f 70       	andi	r24, 0x0F	; 15
     2a0:	80 66       	ori	r24, 0x60	; 96
     2a2:	8b b9       	out	0x0b, r24	; 11
 *  enumerated by the host and is now ready to be used by the application.
 */
void EVENT_USB_Host_DeviceEnumerationComplete(void)
{
	LEDs_SetAllLEDs(LEDMASK_USB_READY);
}
     2a4:	08 95       	ret

000002a6 <EVENT_USB_Host_DeviceUnattached>:
/** Event handler for the USB_DeviceUnattached event. This indicates that a device has been removed from the host, and
 *  stops the library USB task management process.
 */
void EVENT_USB_Host_DeviceUnattached(void)
{
	puts_P(PSTR(ESC_FG_GREEN "Device Unattached.\r\n" ESC_FG_WHITE));
     2a6:	86 ef       	ldi	r24, 0xF6	; 246
     2a8:	91 e0       	ldi	r25, 0x01	; 1
     2aa:	c1 d7       	rcall	.+3970   	; 0x122e <puts_P>
     2ac:	8b b1       	in	r24, 0x0b	; 11
     2ae:	8f 70       	andi	r24, 0x0F	; 15
     2b0:	80 61       	ori	r24, 0x10	; 16
     2b2:	8b b9       	out	0x0b, r24	; 11
	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
}
     2b4:	08 95       	ret

000002b6 <EVENT_USB_Host_DeviceAttached>:
/** Event handler for the USB_DeviceAttached event. This indicates that a device has been attached to the host, and
 *  starts the library USB task to begin the enumeration and USB management process.
 */
void EVENT_USB_Host_DeviceAttached(void)
{
	puts_P(PSTR(ESC_FG_GREEN "Device Attached.\r\n" ESC_FG_WHITE));
     2b6:	85 e1       	ldi	r24, 0x15	; 21
     2b8:	92 e0       	ldi	r25, 0x02	; 2
     2ba:	b9 d7       	rcall	.+3954   	; 0x122e <puts_P>
     2bc:	8b b1       	in	r24, 0x0b	; 11
     2be:	8f 70       	andi	r24, 0x0F	; 15
     2c0:	80 6a       	ori	r24, 0xA0	; 160
     2c2:	8b b9       	out	0x0b, r24	; 11
	LEDs_SetAllLEDs(LEDMASK_USB_ENUMERATING);
}
     2c4:	08 95       	ret

000002c6 <EVENT_USB_Host_DeviceEnumerationFailed>:
 *  enumerating an attached USB device.
 */
void EVENT_USB_Host_DeviceEnumerationFailed(const uint8_t ErrorCode,
                                            const uint8_t SubErrorCode)
{
	printf_P(PSTR(ESC_FG_RED "Dev Enum Error\r\n"
     2c6:	90 91 34 01 	lds	r25, 0x0134
     2ca:	2d b7       	in	r18, 0x3d	; 61
     2cc:	3e b7       	in	r19, 0x3e	; 62
     2ce:	28 50       	subi	r18, 0x08	; 8
     2d0:	30 40       	sbci	r19, 0x00	; 0
     2d2:	0f b6       	in	r0, 0x3f	; 63
     2d4:	f8 94       	cli
     2d6:	3e bf       	out	0x3e, r19	; 62
     2d8:	0f be       	out	0x3f, r0	; 63
     2da:	2d bf       	out	0x3d, r18	; 61
     2dc:	ed b7       	in	r30, 0x3d	; 61
     2de:	fe b7       	in	r31, 0x3e	; 62
     2e0:	31 96       	adiw	r30, 0x01	; 1
     2e2:	21 e7       	ldi	r18, 0x71	; 113
     2e4:	31 e0       	ldi	r19, 0x01	; 1
     2e6:	ad b7       	in	r26, 0x3d	; 61
     2e8:	be b7       	in	r27, 0x3e	; 62
     2ea:	12 96       	adiw	r26, 0x02	; 2
     2ec:	3c 93       	st	X, r19
     2ee:	2e 93       	st	-X, r18
     2f0:	11 97       	sbiw	r26, 0x01	; 1
     2f2:	82 83       	std	Z+2, r24	; 0x02
     2f4:	13 82       	std	Z+3, r1	; 0x03
     2f6:	64 83       	std	Z+4, r22	; 0x04
     2f8:	15 82       	std	Z+5, r1	; 0x05
     2fa:	96 83       	std	Z+6, r25	; 0x06
     2fc:	17 82       	std	Z+7, r1	; 0x07
     2fe:	75 d7       	rcall	.+3818   	; 0x11ea <printf_P>
     300:	8b b1       	in	r24, 0x0b	; 11
     302:	8f 70       	andi	r24, 0x0F	; 15
     304:	80 69       	ori	r24, 0x90	; 144
     306:	8b b9       	out	0x0b, r24	; 11
     308:	2d b7       	in	r18, 0x3d	; 61
     30a:	3e b7       	in	r19, 0x3e	; 62
     30c:	28 5f       	subi	r18, 0xF8	; 248
     30e:	3f 4f       	sbci	r19, 0xFF	; 255
     310:	0f b6       	in	r0, 0x3f	; 63
     312:	f8 94       	cli
     314:	3e bf       	out	0x3e, r19	; 62
     316:	0f be       	out	0x3f, r0	; 63
     318:	2d bf       	out	0x3d, r18	; 61
	                         " -- Error Code %d\r\n"
	                         " -- Sub Error Code %d\r\n"
	                         " -- In State %d\r\n" ESC_FG_WHITE), ErrorCode, SubErrorCode, USB_HostState);

	LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
}
     31a:	08 95       	ret

0000031c <ReadNextReport>:

/** Reads in and processes the next report from the attached device, displaying the report
 *  contents on the board LEDs and via the serial port.
 */
void ReadNextReport(void)
{
     31c:	6f 92       	push	r6
     31e:	7f 92       	push	r7
     320:	8f 92       	push	r8
     322:	9f 92       	push	r9
     324:	af 92       	push	r10
     326:	bf 92       	push	r11
     328:	cf 92       	push	r12
     32a:	df 92       	push	r13
     32c:	ef 92       	push	r14
     32e:	ff 92       	push	r15
     330:	0f 93       	push	r16
     332:	1f 93       	push	r17
     334:	df 93       	push	r29
     336:	cf 93       	push	r28
     338:	cd b7       	in	r28, 0x3d	; 61
     33a:	de b7       	in	r29, 0x3e	; 62
	/* Clear the IN endpoint, ready for next data packet */
	Pipe_ClearIN();

	/* Refreeze HID data IN pipe */
	Pipe_Freeze();
}
     33c:	8d b6       	in	r8, 0x3d	; 61
     33e:	9e b6       	in	r9, 0x3e	; 62
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
     340:	81 e0       	ldi	r24, 0x01	; 1
     342:	80 93 a7 00 	sts	0x00A7, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
     346:	80 91 a9 00 	lds	r24, 0x00A9
     34a:	8f 7b       	andi	r24, 0xBF	; 191
     34c:	80 93 a9 00 	sts	0x00A9, r24
			 *  \return Boolean true if the current pipe has received an IN packet, false otherwise.
			 */
			static inline bool Pipe_IsINReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsINReceived(void)
			{
				return ((UPINTX & (1 << RXINI)) ? true : false);
     350:	80 91 a6 00 	lds	r24, 0x00A6
	/* Select and unfreeze HID data IN pipe */
	Pipe_SelectPipe(HID_DATA_IN_PIPE);
	Pipe_Unfreeze();

	/* Check to see if a packet has been received */
	if (!(Pipe_IsINReceived()))
     354:	80 ff       	sbrs	r24, 0
     356:	4d c0       	rjmp	.+154    	; 0x3f2 <ReadNextReport+0xd6>
			 *  \return Boolean true if the currently selected pipe may be read from or written to, depending on its direction.
			 */
			static inline bool Pipe_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsReadWriteAllowed(void)
			{
				return ((UPINTX & (1 << RWAL)) ? true : false);
     358:	80 91 a6 00 	lds	r24, 0x00A6

		return;
	}

	/* Ensure pipe contains data before trying to read from it */
	if (Pipe_IsReadWriteAllowed())
     35c:	85 ff       	sbrs	r24, 5
     35e:	44 c0       	rjmp	.+136    	; 0x3e8 <ReadNextReport+0xcc>
     360:	7d b6       	in	r7, 0x3d	; 61
     362:	6e b6       	in	r6, 0x3e	; 62
			 *  \return Total number of bytes in the currently selected Pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
     364:	e0 90 f6 00 	lds	r14, 0x00F6
     368:	f0 90 f7 00 	lds	r15, 0x00F7
	{
		uint8_t ReportINData[Pipe_BytesInPipe()];
     36c:	8d b7       	in	r24, 0x3d	; 61
     36e:	9e b7       	in	r25, 0x3e	; 62
     370:	8e 19       	sub	r24, r14
     372:	9f 09       	sbc	r25, r15
     374:	0f b6       	in	r0, 0x3f	; 63
     376:	f8 94       	cli
     378:	9e bf       	out	0x3e, r25	; 62
     37a:	0f be       	out	0x3f, r0	; 63
     37c:	8d bf       	out	0x3d, r24	; 61
     37e:	cd b6       	in	r12, 0x3d	; 61
     380:	de b6       	in	r13, 0x3e	; 62
     382:	08 94       	sec
     384:	c1 1c       	adc	r12, r1
     386:	d1 1c       	adc	r13, r1

		/* Read in HID report data */
		Pipe_Read_Stream_LE(&ReportINData, sizeof(ReportINData));
     388:	c6 01       	movw	r24, r12
     38a:	b7 01       	movw	r22, r14
     38c:	ce d6       	rcall	.+3484   	; 0x112a <Pipe_Read_Stream_LE>
     38e:	00 e0       	ldi	r16, 0x00	; 0
     390:	10 e0       	ldi	r17, 0x00	; 0

		/* Print report data through the serial port */
		for (uint16_t CurrByte = 0; CurrByte < sizeof(ReportINData); CurrByte++)
		  printf_P(PSTR("0x%02X "), ReportINData[CurrByte]);
     392:	89 e6       	ldi	r24, 0x69	; 105
     394:	a8 2e       	mov	r10, r24
     396:	81 e0       	ldi	r24, 0x01	; 1
     398:	b8 2e       	mov	r11, r24
     39a:	18 c0       	rjmp	.+48     	; 0x3cc <ReadNextReport+0xb0>
     39c:	00 d0       	rcall	.+0      	; 0x39e <ReadNextReport+0x82>
     39e:	00 d0       	rcall	.+0      	; 0x3a0 <ReadNextReport+0x84>
     3a0:	ed b7       	in	r30, 0x3d	; 61
     3a2:	fe b7       	in	r31, 0x3e	; 62
     3a4:	31 96       	adiw	r30, 0x01	; 1
     3a6:	ad b7       	in	r26, 0x3d	; 61
     3a8:	be b7       	in	r27, 0x3e	; 62
     3aa:	12 96       	adiw	r26, 0x02	; 2
     3ac:	bc 92       	st	X, r11
     3ae:	ae 92       	st	-X, r10
     3b0:	11 97       	sbiw	r26, 0x01	; 1
     3b2:	d6 01       	movw	r26, r12
     3b4:	a0 0f       	add	r26, r16
     3b6:	b1 1f       	adc	r27, r17
     3b8:	8c 91       	ld	r24, X
     3ba:	82 83       	std	Z+2, r24	; 0x02
     3bc:	13 82       	std	Z+3, r1	; 0x03
     3be:	15 d7       	rcall	.+3626   	; 0x11ea <printf_P>

		/* Read in HID report data */
		Pipe_Read_Stream_LE(&ReportINData, sizeof(ReportINData));

		/* Print report data through the serial port */
		for (uint16_t CurrByte = 0; CurrByte < sizeof(ReportINData); CurrByte++)
     3c0:	0f 5f       	subi	r16, 0xFF	; 255
     3c2:	1f 4f       	sbci	r17, 0xFF	; 255
     3c4:	0f 90       	pop	r0
     3c6:	0f 90       	pop	r0
     3c8:	0f 90       	pop	r0
     3ca:	0f 90       	pop	r0
     3cc:	0e 15       	cp	r16, r14
     3ce:	1f 05       	cpc	r17, r15
     3d0:	28 f3       	brcs	.-54     	; 0x39c <ReadNextReport+0x80>
		  printf_P(PSTR("0x%02X "), ReportINData[CurrByte]);

		puts_P(PSTR("\r\n"));
     3d2:	86 e6       	ldi	r24, 0x66	; 102
     3d4:	91 e0       	ldi	r25, 0x01	; 1
     3d6:	2b d7       	rcall	.+3670   	; 0x122e <puts_P>
     3d8:	87 2d       	mov	r24, r7
     3da:	96 2d       	mov	r25, r6
     3dc:	9c 01       	movw	r18, r24
     3de:	0f b6       	in	r0, 0x3f	; 63
     3e0:	f8 94       	cli
     3e2:	3e bf       	out	0x3e, r19	; 62
     3e4:	0f be       	out	0x3f, r0	; 63
     3e6:	2d bf       	out	0x3d, r18	; 61
			 *  \ingroup Group_PipePacketManagement
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
     3e8:	80 91 a6 00 	lds	r24, 0x00A6
     3ec:	8e 77       	andi	r24, 0x7E	; 126
     3ee:	80 93 a6 00 	sts	0x00A6, r24

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
     3f2:	80 91 a9 00 	lds	r24, 0x00A9
     3f6:	80 64       	ori	r24, 0x40	; 64
     3f8:	80 93 a9 00 	sts	0x00A9, r24
	/* Clear the IN endpoint, ready for next data packet */
	Pipe_ClearIN();

	/* Refreeze HID data IN pipe */
	Pipe_Freeze();
}
     3fc:	0f b6       	in	r0, 0x3f	; 63
     3fe:	f8 94       	cli
     400:	9e be       	out	0x3e, r9	; 62
     402:	0f be       	out	0x3f, r0	; 63
     404:	8d be       	out	0x3d, r8	; 61
     406:	cf 91       	pop	r28
     408:	df 91       	pop	r29
     40a:	1f 91       	pop	r17
     40c:	0f 91       	pop	r16
     40e:	ff 90       	pop	r15
     410:	ef 90       	pop	r14
     412:	df 90       	pop	r13
     414:	cf 90       	pop	r12
     416:	bf 90       	pop	r11
     418:	af 90       	pop	r10
     41a:	9f 90       	pop	r9
     41c:	8f 90       	pop	r8
     41e:	7f 90       	pop	r7
     420:	6f 90       	pop	r6
     422:	08 95       	ret

00000424 <HID_Host_Task>:

/** Task to set the configuration of the attached device after it has been enumerated, and to read and process
 *  HID reports from the device and to send reports if desired.
 */
void HID_Host_Task(void)
{
     424:	1f 93       	push	r17
	uint8_t ErrorCode;

	/* Switch to determine what user-application handled host state the host state machine is in */
	switch (USB_HostState)
     426:	80 91 34 01 	lds	r24, 0x0134
     42a:	8b 30       	cpi	r24, 0x0B	; 11
     42c:	21 f0       	breq	.+8      	; 0x436 <HID_Host_Task+0x12>
     42e:	8c 30       	cpi	r24, 0x0C	; 12
     430:	09 f0       	breq	.+2      	; 0x434 <HID_Host_Task+0x10>
     432:	47 c0       	rjmp	.+142    	; 0x4c2 <HID_Host_Task+0x9e>
     434:	45 c0       	rjmp	.+138    	; 0x4c0 <HID_Host_Task+0x9c>
	{
		case HOST_STATE_Addressed:
			puts_P(PSTR("Getting Config Data.\r\n"));
     436:	8f e4       	ldi	r24, 0x4F	; 79
     438:	91 e0       	ldi	r25, 0x01	; 1
     43a:	f9 d6       	rcall	.+3570   	; 0x122e <puts_P>

			/* Get and process the configuration descriptor data */
			if ((ErrorCode = ProcessConfigurationDescriptor()) != SuccessfulConfigRead)
     43c:	b8 d0       	rcall	.+368    	; 0x5ae <ProcessConfigurationDescriptor>
     43e:	18 2f       	mov	r17, r24
     440:	88 23       	and	r24, r24
     442:	b9 f0       	breq	.+46     	; 0x472 <HID_Host_Task+0x4e>
			{
				if (ErrorCode == ControlError)
     444:	81 30       	cpi	r24, 0x01	; 1
     446:	19 f4       	brne	.+6      	; 0x44e <HID_Host_Task+0x2a>
				  puts_P(PSTR(ESC_FG_RED "Control Error (Get Configuration).\r\n"));
     448:	85 e2       	ldi	r24, 0x25	; 37
     44a:	91 e0       	ldi	r25, 0x01	; 1
     44c:	02 c0       	rjmp	.+4      	; 0x452 <HID_Host_Task+0x2e>
				else
				  puts_P(PSTR(ESC_FG_RED "Invalid Device.\r\n"));
     44e:	8e e0       	ldi	r24, 0x0E	; 14
     450:	91 e0       	ldi	r25, 0x01	; 1
     452:	ed d6       	rcall	.+3546   	; 0x122e <puts_P>

				printf_P(PSTR(" -- Error Code: %d\r\n" ESC_FG_WHITE), ErrorCode);
     454:	00 d0       	rcall	.+0      	; 0x456 <HID_Host_Task+0x32>
     456:	00 d0       	rcall	.+0      	; 0x458 <HID_Host_Task+0x34>
     458:	ed b7       	in	r30, 0x3d	; 61
     45a:	fe b7       	in	r31, 0x3e	; 62
     45c:	31 96       	adiw	r30, 0x01	; 1
     45e:	84 ef       	ldi	r24, 0xF4	; 244
     460:	90 e0       	ldi	r25, 0x00	; 0
     462:	ad b7       	in	r26, 0x3d	; 61
     464:	be b7       	in	r27, 0x3e	; 62
     466:	12 96       	adiw	r26, 0x02	; 2
     468:	9c 93       	st	X, r25
     46a:	8e 93       	st	-X, r24
     46c:	11 97       	sbiw	r26, 0x01	; 1
     46e:	12 83       	std	Z+2, r17	; 0x02
     470:	13 c0       	rjmp	.+38     	; 0x498 <HID_Host_Task+0x74>
				USB_HostState = HOST_STATE_WaitForDeviceRemoval;
				break;
			}

			/* Set the device configuration to the first configuration (rarely do devices use multiple configurations) */
			if ((ErrorCode = USB_Host_SetDeviceConfiguration(1)) != HOST_SENDCONTROL_Successful)
     472:	81 e0       	ldi	r24, 0x01	; 1
     474:	c9 d1       	rcall	.+914    	; 0x808 <USB_Host_SetDeviceConfiguration>
     476:	28 2f       	mov	r18, r24
     478:	88 23       	and	r24, r24
     47a:	d9 f0       	breq	.+54     	; 0x4b2 <HID_Host_Task+0x8e>
			{
				printf_P(PSTR(ESC_FG_RED "Control Error (Set Configuration).\r\n"
     47c:	00 d0       	rcall	.+0      	; 0x47e <HID_Host_Task+0x5a>
     47e:	00 d0       	rcall	.+0      	; 0x480 <HID_Host_Task+0x5c>
     480:	ed b7       	in	r30, 0x3d	; 61
     482:	fe b7       	in	r31, 0x3e	; 62
     484:	31 96       	adiw	r30, 0x01	; 1
     486:	81 eb       	ldi	r24, 0xB1	; 177
     488:	90 e0       	ldi	r25, 0x00	; 0
     48a:	ad b7       	in	r26, 0x3d	; 61
     48c:	be b7       	in	r27, 0x3e	; 62
     48e:	12 96       	adiw	r26, 0x02	; 2
     490:	9c 93       	st	X, r25
     492:	8e 93       	st	-X, r24
     494:	11 97       	sbiw	r26, 0x01	; 1
     496:	22 83       	std	Z+2, r18	; 0x02
     498:	13 82       	std	Z+3, r1	; 0x03
     49a:	a7 d6       	rcall	.+3406   	; 0x11ea <printf_P>
     49c:	8b b1       	in	r24, 0x0b	; 11
     49e:	8f 70       	andi	r24, 0x0F	; 15
     4a0:	80 69       	ori	r24, 0x90	; 144
     4a2:	8b b9       	out	0x0b, r24	; 11

				/* Indicate error status */
				LEDs_SetAllLEDs(LEDMASK_USB_ERROR);

				/* Wait until USB device disconnected */
				USB_HostState = HOST_STATE_WaitForDeviceRemoval;
     4a4:	10 92 34 01 	sts	0x0134, r1
     4a8:	0f 90       	pop	r0
     4aa:	0f 90       	pop	r0
     4ac:	0f 90       	pop	r0
     4ae:	0f 90       	pop	r0
     4b0:	08 c0       	rjmp	.+16     	; 0x4c2 <HID_Host_Task+0x9e>
				break;
			}

			puts_P(PSTR("HID Device Enumerated.\r\n"));
     4b2:	88 e9       	ldi	r24, 0x98	; 152
     4b4:	90 e0       	ldi	r25, 0x00	; 0
     4b6:	bb d6       	rcall	.+3446   	; 0x122e <puts_P>

			USB_HostState = HOST_STATE_Configured;
     4b8:	8c e0       	ldi	r24, 0x0C	; 12
     4ba:	80 93 34 01 	sts	0x0134, r24
     4be:	01 c0       	rjmp	.+2      	; 0x4c2 <HID_Host_Task+0x9e>
			break;
		case HOST_STATE_Configured:
			ReadNextReport();
     4c0:	2d df       	rcall	.-422    	; 0x31c <ReadNextReport>

			break;
	}
}
     4c2:	1f 91       	pop	r17
     4c4:	08 95       	ret

000004c6 <EVENT_USB_Host_HostError>:
	LEDs_SetAllLEDs(LEDMASK_USB_READY);
}

/** Event handler for the USB_HostError event. This indicates that a hardware error occurred while in host mode. */
void EVENT_USB_Host_HostError(const uint8_t ErrorCode)
{
     4c6:	1f 93       	push	r17
     4c8:	18 2f       	mov	r17, r24
	USB_ShutDown();
     4ca:	b0 d3       	rcall	.+1888   	; 0xc2c <USB_ShutDown>

	printf_P(PSTR(ESC_FG_RED "Host Mode Error\r\n"
     4cc:	00 d0       	rcall	.+0      	; 0x4ce <EVENT_USB_Host_HostError+0x8>
     4ce:	00 d0       	rcall	.+0      	; 0x4d0 <EVENT_USB_Host_HostError+0xa>
     4d0:	ed b7       	in	r30, 0x3d	; 61
     4d2:	fe b7       	in	r31, 0x3e	; 62
     4d4:	31 96       	adiw	r30, 0x01	; 1
     4d6:	87 ec       	ldi	r24, 0xC7	; 199
     4d8:	91 e0       	ldi	r25, 0x01	; 1
     4da:	ad b7       	in	r26, 0x3d	; 61
     4dc:	be b7       	in	r27, 0x3e	; 62
     4de:	12 96       	adiw	r26, 0x02	; 2
     4e0:	9c 93       	st	X, r25
     4e2:	8e 93       	st	-X, r24
     4e4:	11 97       	sbiw	r26, 0x01	; 1
     4e6:	12 83       	std	Z+2, r17	; 0x02
     4e8:	13 82       	std	Z+3, r1	; 0x03
     4ea:	7f d6       	rcall	.+3326   	; 0x11ea <printf_P>
     4ec:	8b b1       	in	r24, 0x0b	; 11
     4ee:	8f 70       	andi	r24, 0x0F	; 15
     4f0:	80 69       	ori	r24, 0x90	; 144
     4f2:	8b b9       	out	0x0b, r24	; 11
     4f4:	0f 90       	pop	r0
     4f6:	0f 90       	pop	r0
     4f8:	0f 90       	pop	r0
     4fa:	0f 90       	pop	r0
     4fc:	ff cf       	rjmp	.-2      	; 0x4fc <EVENT_USB_Host_HostError+0x36>

000004fe <SetupHardware>:

/** Configures the board hardware and chip peripherals for the demo's functionality. */
void SetupHardware(void)
{
	/* Disable watchdog if enabled by bootloader/fuses */
	MCUSR &= ~(1 << WDRF);
     4fe:	84 b7       	in	r24, 0x34	; 52
     500:	87 7f       	andi	r24, 0xF7	; 247
     502:	84 bf       	out	0x34, r24	; 52
	wdt_disable();
     504:	38 e1       	ldi	r19, 0x18	; 24
     506:	0f b6       	in	r0, 0x3f	; 63
     508:	f8 94       	cli
     50a:	30 93 60 00 	sts	0x0060, r19
     50e:	10 92 60 00 	sts	0x0060, r1
     512:	0f be       	out	0x3f, r0	; 63

	/* Disable clock division */
	clock_prescale_set(clock_div_1);
     514:	80 e0       	ldi	r24, 0x00	; 0
     516:	90 e0       	ldi	r25, 0x00	; 0
     518:	20 e8       	ldi	r18, 0x80	; 128
     51a:	0f b6       	in	r0, 0x3f	; 63
     51c:	f8 94       	cli
     51e:	20 93 61 00 	sts	0x0061, r18
     522:	80 93 61 00 	sts	0x0061, r24
     526:	0f be       	out	0x3f, r0	; 63
			 *  \param[in] DoubleSpeed  Enables double speed mode when set, halving the sample time to double the baud rate.
			 */
			static inline void Serial_Init(const uint32_t BaudRate,
			                               const bool DoubleSpeed)
			{
				UBRR1  = (DoubleSpeed ? SERIAL_2X_UBBRVAL(BaudRate) : SERIAL_UBBRVAL(BaudRate));
     528:	83 e3       	ldi	r24, 0x33	; 51
     52a:	90 e0       	ldi	r25, 0x00	; 0
     52c:	90 93 cd 00 	sts	0x00CD, r25
     530:	80 93 cc 00 	sts	0x00CC, r24

				UCSR1C = ((1 << UCSZ11) | (1 << UCSZ10));
     534:	86 e0       	ldi	r24, 0x06	; 6
     536:	80 93 ca 00 	sts	0x00CA, r24
				UCSR1A = (DoubleSpeed ? (1 << U2X1) : 0);
     53a:	10 92 c8 00 	sts	0x00C8, r1
				UCSR1B = ((1 << TXEN1)  | (1 << RXEN1));
     53e:	30 93 c9 00 	sts	0x00C9, r19

				DDRD  |= (1 << 3);
     542:	53 9a       	sbi	0x0a, 3	; 10
				PORTD |= (1 << 2);
     544:	5a 9a       	sbi	0x0b, 2	; 11
			static inline void SerialStream_Init(const uint32_t BaudRate,
			                                     const bool DoubleSpeed)
			{
				Serial_Init(BaudRate, DoubleSpeed);

				stdout = &USARTStream;
     546:	89 e1       	ldi	r24, 0x19	; 25
     548:	91 e0       	ldi	r25, 0x01	; 1
     54a:	90 93 38 01 	sts	0x0138, r25
     54e:	80 93 37 01 	sts	0x0137, r24
				stdin  = &USARTStream;
     552:	90 93 36 01 	sts	0x0136, r25
     556:	80 93 35 01 	sts	0x0135, r24

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void LEDs_Init(void)
			{
				DDRD  |=  LEDS_ALL_LEDS;
     55a:	8a b1       	in	r24, 0x0a	; 10
     55c:	80 6f       	ori	r24, 0xF0	; 240
     55e:	8a b9       	out	0x0a, r24	; 10
				PORTD &= ~LEDS_ALL_LEDS;
     560:	8b b1       	in	r24, 0x0b	; 11
     562:	8f 70       	andi	r24, 0x0F	; 15
     564:	8b b9       	out	0x0b, r24	; 11

	/* Hardware Initialization */
	SerialStream_Init(9600, false);
	LEDs_Init();
	USB_Init();
}
     566:	59 c3       	rjmp	.+1714   	; 0xc1a <USB_Init>

00000568 <main>:
/** Main program entry point. This routine configures the hardware required by the application, then
 *  enters a loop to run the application tasks in sequence.
 */
int main(void)
{
	SetupHardware();
     568:	ca df       	rcall	.-108    	; 0x4fe <SetupHardware>

	puts_P(PSTR(ESC_FG_CYAN "Generic HID Host Demo running.\r\n" ESC_FG_WHITE));
     56a:	82 e3       	ldi	r24, 0x32	; 50
     56c:	92 e0       	ldi	r25, 0x02	; 2
     56e:	5f d6       	rcall	.+3262   	; 0x122e <puts_P>
				PORTD &= ~LEDMask;
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
			{
				PORTD = ((PORTD & ~LEDS_ALL_LEDS) | LEDMask);
     570:	8b b1       	in	r24, 0x0b	; 11
     572:	8f 70       	andi	r24, 0x0F	; 15
     574:	80 61       	ori	r24, 0x10	; 16
     576:	8b b9       	out	0x0b, r24	; 11

	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
	sei();
     578:	78 94       	sei

	for (;;)
	{
		HID_Host_Task();
     57a:	54 df       	rcall	.-344    	; 0x424 <HID_Host_Task>
		USB_USBTask();
     57c:	09 d6       	rcall	.+3090   	; 0x1190 <USB_USBTask>
     57e:	fd cf       	rjmp	.-6      	; 0x57a <main+0x12>

00000580 <DComp_NextHIDInterface>:
 *  This comparator searches for the next Interface descriptor of the correct HID Class value.
 *
 *  \return A value from the DSEARCH_Return_ErrorCodes_t enum
 */
uint8_t DComp_NextHIDInterface(void* CurrentDescriptor)
{
     580:	fc 01       	movw	r30, r24
	USB_Descriptor_Header_t* Header = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Header_t);

	/* Determine if the current descriptor is an interface descriptor */
	if (Header->Type == DTYPE_Interface)
     582:	81 81       	ldd	r24, Z+1	; 0x01
     584:	84 30       	cpi	r24, 0x04	; 4
     586:	29 f4       	brne	.+10     	; 0x592 <DComp_NextHIDInterface+0x12>
	{
		USB_Descriptor_Interface_t* Interface = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Interface_t);

		/* Check the HID descriptor class, break out if correct class/protocol interface found */
		if (Interface->Class == HID_CSCP_HIDClass)
     588:	85 81       	ldd	r24, Z+5	; 0x05
     58a:	83 30       	cpi	r24, 0x03	; 3
     58c:	11 f4       	brne	.+4      	; 0x592 <DComp_NextHIDInterface+0x12>
     58e:	80 e0       	ldi	r24, 0x00	; 0
     590:	08 95       	ret
     592:	82 e0       	ldi	r24, 0x02	; 2
		}
	}

	/* Current descriptor does not match what this comparator is looking for */
	return DESCRIPTOR_SEARCH_NotFound;
}
     594:	08 95       	ret

00000596 <DComp_NextHIDInterfaceDataEndpoint>:
uint8_t DComp_NextHIDInterfaceDataEndpoint(void* CurrentDescriptor)
{
	USB_Descriptor_Header_t* Header = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Header_t);

	/* Determine the type of the current descriptor */
	if (Header->Type == DTYPE_Endpoint)
     596:	fc 01       	movw	r30, r24
     598:	81 81       	ldd	r24, Z+1	; 0x01
     59a:	85 30       	cpi	r24, 0x05	; 5
     59c:	11 f4       	brne	.+4      	; 0x5a2 <DComp_NextHIDInterfaceDataEndpoint+0xc>
     59e:	80 e0       	ldi	r24, 0x00	; 0
     5a0:	08 95       	ret
	{
		/* Indicate that the descriptor being searched for has been found */
		return DESCRIPTOR_SEARCH_Found;
	}
	else if (Header->Type == DTYPE_Interface)
     5a2:	84 30       	cpi	r24, 0x04	; 4
     5a4:	11 f0       	breq	.+4      	; 0x5aa <DComp_NextHIDInterfaceDataEndpoint+0x14>
     5a6:	82 e0       	ldi	r24, 0x02	; 2
     5a8:	08 95       	ret
     5aa:	81 e0       	ldi	r24, 0x01	; 1
		return DESCRIPTOR_SEARCH_Fail;
	}

	/* Current descriptor does not match what this comparator is looking for */
	return DESCRIPTOR_SEARCH_NotFound;
}
     5ac:	08 95       	ret

000005ae <ProcessConfigurationDescriptor>:
 *  This routine searches for a HID interface descriptor containing at least one Interrupt type IN endpoint.
 *
 *  \return An error code from the \ref GenericHIDHost_GetConfigDescriptorDataCodes_t enum.
 */
uint8_t ProcessConfigurationDescriptor(void)
{
     5ae:	8f 92       	push	r8
     5b0:	9f 92       	push	r9
     5b2:	af 92       	push	r10
     5b4:	bf 92       	push	r11
     5b6:	cf 92       	push	r12
     5b8:	df 92       	push	r13
     5ba:	ef 92       	push	r14
     5bc:	ff 92       	push	r15
     5be:	0f 93       	push	r16
     5c0:	1f 93       	push	r17
     5c2:	df 93       	push	r29
     5c4:	cf 93       	push	r28
     5c6:	cd b7       	in	r28, 0x3d	; 61
     5c8:	de b7       	in	r29, 0x3e	; 62
     5ca:	c4 50       	subi	r28, 0x04	; 4
     5cc:	d2 40       	sbci	r29, 0x02	; 2
     5ce:	0f b6       	in	r0, 0x3f	; 63
     5d0:	f8 94       	cli
     5d2:	de bf       	out	0x3e, r29	; 62
     5d4:	0f be       	out	0x3f, r0	; 63
     5d6:	cd bf       	out	0x3d, r28	; 61
	uint8_t  ConfigDescriptorData[512];
	void*    CurrConfigLocation = ConfigDescriptorData;
     5d8:	ae 01       	movw	r20, r28
     5da:	4b 5f       	subi	r20, 0xFB	; 251
     5dc:	5f 4f       	sbci	r21, 0xFF	; 255
     5de:	5a 83       	std	Y+2, r21	; 0x02
     5e0:	49 83       	std	Y+1, r20	; 0x01
	USB_Descriptor_Interface_t* HIDInterface    = NULL;
	USB_Descriptor_Endpoint_t*  DataINEndpoint  = NULL;
	USB_Descriptor_Endpoint_t*  DataOUTEndpoint = NULL;

	/* Retrieve the entire configuration descriptor into the allocated buffer */
	switch (USB_Host_GetDeviceConfigDescriptor(1, &CurrConfigBytesRem, ConfigDescriptorData, sizeof(ConfigDescriptorData)))
     5e2:	83 e0       	ldi	r24, 0x03	; 3
     5e4:	e8 2e       	mov	r14, r24
     5e6:	f1 2c       	mov	r15, r1
     5e8:	ec 0e       	add	r14, r28
     5ea:	fd 1e       	adc	r15, r29
     5ec:	81 e0       	ldi	r24, 0x01	; 1
     5ee:	b7 01       	movw	r22, r14
     5f0:	20 e0       	ldi	r18, 0x00	; 0
     5f2:	32 e0       	ldi	r19, 0x02	; 2
     5f4:	14 d4       	rcall	.+2088   	; 0xe1e <USB_Host_GetDeviceConfigDescriptor>
     5f6:	85 30       	cpi	r24, 0x05	; 5
     5f8:	29 f0       	breq	.+10     	; 0x604 <ProcessConfigurationDescriptor+0x56>
     5fa:	86 30       	cpi	r24, 0x06	; 6
     5fc:	89 f0       	breq	.+34     	; 0x620 <ProcessConfigurationDescriptor+0x72>
     5fe:	88 23       	and	r24, r24
     600:	19 f0       	breq	.+6      	; 0x608 <ProcessConfigurationDescriptor+0x5a>
     602:	10 c0       	rjmp	.+32     	; 0x624 <ProcessConfigurationDescriptor+0x76>
     604:	82 e0       	ldi	r24, 0x02	; 2
     606:	53 c0       	rjmp	.+166    	; 0x6ae <ProcessConfigurationDescriptor+0x100>
     608:	00 e0       	ldi	r16, 0x00	; 0
     60a:	10 e0       	ldi	r17, 0x00	; 0
     60c:	aa 24       	eor	r10, r10
     60e:	bb 24       	eor	r11, r11
     610:	cc 24       	eor	r12, r12
     612:	dd 24       	eor	r13, r13
	}

	while (!(DataINEndpoint) || !(DataOUTEndpoint))
	{
		/* See if we've found a likely compatible interface, and if there is an endpoint within that interface */
		if (!(HIDInterface) ||
     614:	47 01       	movw	r8, r14
     616:	7e 01       	movw	r14, r28
     618:	08 94       	sec
     61a:	e1 1c       	adc	r14, r1
     61c:	f1 1c       	adc	r15, r1
     61e:	04 c0       	rjmp	.+8      	; 0x628 <ProcessConfigurationDescriptor+0x7a>
	USB_Descriptor_Interface_t* HIDInterface    = NULL;
	USB_Descriptor_Endpoint_t*  DataINEndpoint  = NULL;
	USB_Descriptor_Endpoint_t*  DataOUTEndpoint = NULL;

	/* Retrieve the entire configuration descriptor into the allocated buffer */
	switch (USB_Host_GetDeviceConfigDescriptor(1, &CurrConfigBytesRem, ConfigDescriptorData, sizeof(ConfigDescriptorData)))
     620:	83 e0       	ldi	r24, 0x03	; 3
     622:	45 c0       	rjmp	.+138    	; 0x6ae <ProcessConfigurationDescriptor+0x100>
     624:	81 e0       	ldi	r24, 0x01	; 1
     626:	43 c0       	rjmp	.+134    	; 0x6ae <ProcessConfigurationDescriptor+0x100>
	}

	while (!(DataINEndpoint) || !(DataOUTEndpoint))
	{
		/* See if we've found a likely compatible interface, and if there is an endpoint within that interface */
		if (!(HIDInterface) ||
     628:	01 15       	cp	r16, r1
     62a:	11 05       	cpc	r17, r1
     62c:	39 f0       	breq	.+14     	; 0x63c <ProcessConfigurationDescriptor+0x8e>
     62e:	c4 01       	movw	r24, r8
     630:	b7 01       	movw	r22, r14
     632:	4b ec       	ldi	r20, 0xCB	; 203
     634:	52 e0       	ldi	r21, 0x02	; 2
     636:	b2 d3       	rcall	.+1892   	; 0xd9c <USB_GetNextDescriptorComp>
     638:	88 23       	and	r24, r24
     63a:	89 f0       	breq	.+34     	; 0x65e <ProcessConfigurationDescriptor+0xb0>
		    USB_GetNextDescriptorComp(&CurrConfigBytesRem, &CurrConfigLocation,
		                              DComp_NextHIDInterfaceDataEndpoint) != DESCRIPTOR_SEARCH_COMP_Found)
		{
			/* Not all HID devices have an OUT endpoint - if we've reached the end of the HID descriptor
			 * but only found the mandatory IN endpoint, it's safe to continue with the device enumeration */
			if (DataINEndpoint)
     63c:	a1 14       	cp	r10, r1
     63e:	b1 04       	cpc	r11, r1
     640:	e1 f4       	brne	.+56     	; 0x67a <ProcessConfigurationDescriptor+0xcc>
			  break;

			/* Get the next HID interface from the configuration descriptor */
			if (USB_GetNextDescriptorComp(&CurrConfigBytesRem, &CurrConfigLocation,
     642:	c4 01       	movw	r24, r8
     644:	b7 01       	movw	r22, r14
     646:	40 ec       	ldi	r20, 0xC0	; 192
     648:	52 e0       	ldi	r21, 0x02	; 2
     64a:	a8 d3       	rcall	.+1872   	; 0xd9c <USB_GetNextDescriptorComp>
     64c:	88 23       	and	r24, r24
     64e:	11 f0       	breq	.+4      	; 0x654 <ProcessConfigurationDescriptor+0xa6>
     650:	84 e0       	ldi	r24, 0x04	; 4
     652:	2d c0       	rjmp	.+90     	; 0x6ae <ProcessConfigurationDescriptor+0x100>
				/* Descriptor not found, error out */
				return NoCompatibleInterfaceFound;
			}

			/* Save the interface in case we need to refer back to it later */
			HIDInterface = DESCRIPTOR_PCAST(CurrConfigLocation, USB_Descriptor_Interface_t);
     654:	09 81       	ldd	r16, Y+1	; 0x01
     656:	1a 81       	ldd	r17, Y+2	; 0x02
     658:	cc 24       	eor	r12, r12
     65a:	dd 24       	eor	r13, r13
     65c:	e5 cf       	rjmp	.-54     	; 0x628 <ProcessConfigurationDescriptor+0x7a>
			/* Skip the remainder of the loop as we have not found an endpoint yet */
			continue;
		}

		/* Retrieve the endpoint address from the endpoint descriptor */
		USB_Descriptor_Endpoint_t* EndpointData = DESCRIPTOR_PCAST(CurrConfigLocation, USB_Descriptor_Endpoint_t);
     65e:	e9 81       	ldd	r30, Y+1	; 0x01
     660:	fa 81       	ldd	r31, Y+2	; 0x02

		/* If the endpoint is a IN type endpoint */
		if (EndpointData->EndpointAddress & ENDPOINT_DESCRIPTOR_DIR_IN)
     662:	82 81       	ldd	r24, Z+2	; 0x02
     664:	87 fd       	sbrc	r24, 7
     666:	02 c0       	rjmp	.+4      	; 0x66c <ProcessConfigurationDescriptor+0xbe>
     668:	6f 01       	movw	r12, r30
     66a:	01 c0       	rjmp	.+2      	; 0x66e <ProcessConfigurationDescriptor+0xc0>
     66c:	5f 01       	movw	r10, r30
			return DescriptorTooLarge;
		default:
			return ControlError;
	}

	while (!(DataINEndpoint) || !(DataOUTEndpoint))
     66e:	a1 14       	cp	r10, r1
     670:	b1 04       	cpc	r11, r1
     672:	d1 f2       	breq	.-76     	; 0x628 <ProcessConfigurationDescriptor+0x7a>
     674:	c1 14       	cp	r12, r1
     676:	d1 04       	cpc	r13, r1
     678:	b9 f2       	breq	.-82     	; 0x628 <ProcessConfigurationDescriptor+0x7a>
		else
		  DataOUTEndpoint = EndpointData;
	}

	/* Configure the HID data IN pipe */
	Pipe_ConfigurePipe(HID_DATA_IN_PIPE, EP_TYPE_INTERRUPT, PIPE_TOKEN_IN,
     67a:	f5 01       	movw	r30, r10
     67c:	04 81       	ldd	r16, Z+4	; 0x04
     67e:	15 81       	ldd	r17, Z+5	; 0x05
     680:	81 e0       	ldi	r24, 0x01	; 1
     682:	63 e0       	ldi	r22, 0x03	; 3
     684:	40 e1       	ldi	r20, 0x10	; 16
     686:	22 81       	ldd	r18, Z+2	; 0x02
     688:	ee 24       	eor	r14, r14
     68a:	02 d2       	rcall	.+1028   	; 0xa90 <Pipe_ConfigurePipe>
	                   DataINEndpoint->EndpointAddress, DataINEndpoint->EndpointSize, PIPE_BANK_SINGLE);
	Pipe_SetInterruptPeriod(DataINEndpoint->PollingIntervalMS);
     68c:	f5 01       	movw	r30, r10
     68e:	86 81       	ldd	r24, Z+6	; 0x06
			 *  \param[in] Milliseconds  Number of milliseconds between each pipe poll.
			 */
			static inline void Pipe_SetInterruptPeriod(const uint8_t Milliseconds) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetInterruptPeriod(const uint8_t Milliseconds)
			{
				UPCFG2X = Milliseconds;
     690:	80 93 ad 00 	sts	0x00AD, r24

	/* Check if the HID interface contained an optional OUT data endpoint */
	if (DataOUTEndpoint)
     694:	c1 14       	cp	r12, r1
     696:	d1 04       	cpc	r13, r1
     698:	49 f0       	breq	.+18     	; 0x6ac <ProcessConfigurationDescriptor+0xfe>
	{
		/* Configure the HID data OUT pipe */
		Pipe_ConfigurePipe(HID_DATA_OUT_PIPE, EP_TYPE_INTERRUPT, PIPE_TOKEN_OUT,
     69a:	f6 01       	movw	r30, r12
     69c:	04 81       	ldd	r16, Z+4	; 0x04
     69e:	15 81       	ldd	r17, Z+5	; 0x05
     6a0:	82 e0       	ldi	r24, 0x02	; 2
     6a2:	63 e0       	ldi	r22, 0x03	; 3
     6a4:	40 e2       	ldi	r20, 0x20	; 32
     6a6:	22 81       	ldd	r18, Z+2	; 0x02
     6a8:	ee 24       	eor	r14, r14
     6aa:	f2 d1       	rcall	.+996    	; 0xa90 <Pipe_ConfigurePipe>
     6ac:	80 e0       	ldi	r24, 0x00	; 0
						   DataOUTEndpoint->EndpointAddress, DataOUTEndpoint->EndpointSize, PIPE_BANK_SINGLE);
	}

	/* Valid data found, return success */
	return SuccessfulConfigRead;
}
     6ae:	cc 5f       	subi	r28, 0xFC	; 252
     6b0:	dd 4f       	sbci	r29, 0xFD	; 253
     6b2:	0f b6       	in	r0, 0x3f	; 63
     6b4:	f8 94       	cli
     6b6:	de bf       	out	0x3e, r29	; 62
     6b8:	0f be       	out	0x3f, r0	; 63
     6ba:	cd bf       	out	0x3d, r28	; 61
     6bc:	cf 91       	pop	r28
     6be:	df 91       	pop	r29
     6c0:	1f 91       	pop	r17
     6c2:	0f 91       	pop	r16
     6c4:	ff 90       	pop	r15
     6c6:	ef 90       	pop	r14
     6c8:	df 90       	pop	r13
     6ca:	cf 90       	pop	r12
     6cc:	bf 90       	pop	r11
     6ce:	af 90       	pop	r10
     6d0:	9f 90       	pop	r9
     6d2:	8f 90       	pop	r8
     6d4:	08 95       	ret

000006d6 <USB_Host_WaitMS>:
		USB_ResetInterface();
	}
}

uint8_t USB_Host_WaitMS(uint8_t MS)
{
     6d6:	98 2f       	mov	r25, r24
			 *  \return Boolean true if the bus is currently suspended, false otherwise.
			 */
			static inline bool USB_Host_IsBusSuspended(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusSuspended(void)
			{
				return ((UHCON & (1 << SOFEN)) ? false : true);
     6d8:	20 91 9e 00 	lds	r18, 0x009E
	bool    BusSuspended = USB_Host_IsBusSuspended();
	uint8_t ErrorCode    = HOST_WAITERROR_Successful;
	bool    HSOFIEnabled = USB_INT_IsEnabled(USB_INT_HSOFI);
     6dc:	30 91 a0 00 	lds	r19, 0x00A0

	USB_INT_Disable(USB_INT_HSOFI);
     6e0:	80 91 a0 00 	lds	r24, 0x00A0
     6e4:	8f 7d       	andi	r24, 0xDF	; 223
     6e6:	80 93 a0 00 	sts	0x00A0, r24
	USB_INT_Clear(USB_INT_HSOFI);
     6ea:	80 91 9f 00 	lds	r24, 0x009F
     6ee:	8f 7d       	andi	r24, 0xDF	; 223
     6f0:	80 93 9f 00 	sts	0x009F, r24
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
     6f4:	80 91 9e 00 	lds	r24, 0x009E
     6f8:	81 60       	ori	r24, 0x01	; 1
     6fa:	80 93 9e 00 	sts	0x009E, r24
     6fe:	26 c0       	rjmp	.+76     	; 0x74c <USB_Host_WaitMS+0x76>

	USB_Host_ResumeBus();

	while (MS)
	{
		if (USB_INT_HasOccurred(USB_INT_HSOFI))
     700:	80 91 9f 00 	lds	r24, 0x009F
     704:	85 ff       	sbrs	r24, 5
     706:	06 c0       	rjmp	.+12     	; 0x714 <USB_Host_WaitMS+0x3e>
		{
			USB_INT_Clear(USB_INT_HSOFI);
     708:	80 91 9f 00 	lds	r24, 0x009F
     70c:	8f 7d       	andi	r24, 0xDF	; 223
     70e:	80 93 9f 00 	sts	0x009F, r24
			MS--;
     712:	91 50       	subi	r25, 0x01	; 1
		}

		if ((USB_HostState == HOST_STATE_Unattached) || (USB_CurrentMode != USB_MODE_Host))
     714:	80 91 34 01 	lds	r24, 0x0134
     718:	82 30       	cpi	r24, 0x02	; 2
     71a:	11 f4       	brne	.+4      	; 0x720 <USB_Host_WaitMS+0x4a>
     71c:	91 e0       	ldi	r25, 0x01	; 1
     71e:	18 c0       	rjmp	.+48     	; 0x750 <USB_Host_WaitMS+0x7a>
			 *  \return Boolean true if an error has occurred on the selected pipe, false otherwise.
			 */
			static inline bool Pipe_IsError(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsError(void)
			{
				return ((UPINTX & (1 << PERRI)) ? true : false);
     720:	80 91 a6 00 	lds	r24, 0x00A6
			ErrorCode = HOST_WAITERROR_DeviceDisconnect;

			break;
		}

		if (Pipe_IsError() == true)
     724:	84 ff       	sbrs	r24, 4
     726:	07 c0       	rjmp	.+14     	; 0x736 <USB_Host_WaitMS+0x60>

			/** Clears the master pipe error flag. */
			static inline void Pipe_ClearError(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearError(void)
			{
				UPINTX &= ~(1 << PERRI);
     728:	80 91 a6 00 	lds	r24, 0x00A6
     72c:	8f 7e       	andi	r24, 0xEF	; 239
     72e:	80 93 a6 00 	sts	0x00A6, r24
     732:	92 e0       	ldi	r25, 0x02	; 2
     734:	0d c0       	rjmp	.+26     	; 0x750 <USB_Host_WaitMS+0x7a>
			 *  \return Boolean true if the current pipe has been stalled by the attached device, false otherwise.
			 */
			static inline bool Pipe_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsStalled(void)
			{
				return ((UPINTX & (1 << RXSTALLI)) ? true : false);
     736:	80 91 a6 00 	lds	r24, 0x00A6
			ErrorCode = HOST_WAITERROR_PipeError;

			break;
		}

		if (Pipe_IsStalled() == true)
     73a:	81 ff       	sbrs	r24, 1
     73c:	07 c0       	rjmp	.+14     	; 0x74c <USB_Host_WaitMS+0x76>
			 *  \ingroup Group_PipePacketManagement
			 */
			static inline void Pipe_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearStall(void)
			{
				UPINTX &= ~(1 << RXSTALLI);
     73e:	80 91 a6 00 	lds	r24, 0x00A6
     742:	8d 7f       	andi	r24, 0xFD	; 253
     744:	80 93 a6 00 	sts	0x00A6, r24
     748:	93 e0       	ldi	r25, 0x03	; 3
     74a:	02 c0       	rjmp	.+4      	; 0x750 <USB_Host_WaitMS+0x7a>
	USB_INT_Disable(USB_INT_HSOFI);
	USB_INT_Clear(USB_INT_HSOFI);

	USB_Host_ResumeBus();

	while (MS)
     74c:	99 23       	and	r25, r25
     74e:	c1 f6       	brne	.-80     	; 0x700 <USB_Host_WaitMS+0x2a>

			break;
		}
	}

	if (BusSuspended)
     750:	20 fd       	sbrc	r18, 0
     752:	05 c0       	rjmp	.+10     	; 0x75e <USB_Host_WaitMS+0x88>
			 *  messages to the device.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				UHCON &= ~(1 << SOFEN);
     754:	80 91 9e 00 	lds	r24, 0x009E
     758:	8e 7f       	andi	r24, 0xFE	; 254
     75a:	80 93 9e 00 	sts	0x009E, r24
	  USB_Host_SuspendBus();

	if (HSOFIEnabled)
     75e:	35 ff       	sbrs	r19, 5
     760:	05 c0       	rjmp	.+10     	; 0x76c <USB_Host_WaitMS+0x96>
	  USB_INT_Enable(USB_INT_HSOFI);
     762:	80 91 a0 00 	lds	r24, 0x00A0
     766:	80 62       	ori	r24, 0x20	; 32
     768:	80 93 a0 00 	sts	0x00A0, r24

	return ErrorCode;
}
     76c:	89 2f       	mov	r24, r25
     76e:	08 95       	ret

00000770 <USB_Host_ResetDevice>:
			 *  \return Boolean true if the bus is currently suspended, false otherwise.
			 */
			static inline bool USB_Host_IsBusSuspended(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusSuspended(void)
			{
				return ((UHCON & (1 << SOFEN)) ? false : true);
     770:	60 91 9e 00 	lds	r22, 0x009E

static void USB_Host_ResetDevice(void)
{
	bool BusSuspended = USB_Host_IsBusSuspended();

	USB_INT_Disable(USB_INT_DDISCI);
     774:	80 91 a0 00 	lds	r24, 0x00A0
     778:	8d 7f       	andi	r24, 0xFD	; 253
     77a:	80 93 a0 00 	sts	0x00A0, r24
			 *  woken up automatically and the bus resumed after the reset has been correctly issued.
			 */
			static inline void USB_Host_ResetBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResetBus(void)
			{
				UHCON |=  (1 << RESET);
     77e:	80 91 9e 00 	lds	r24, 0x009E
     782:	82 60       	ori	r24, 0x02	; 2
     784:	80 93 9e 00 	sts	0x009E, r24
			 *  \return Boolean true if no bus reset is currently being sent, false otherwise.
			 */
			static inline bool USB_Host_IsBusResetComplete(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusResetComplete(void)
			{
				return ((UHCON & (1 << RESET)) ? false : true);
     788:	80 91 9e 00 	lds	r24, 0x009E

	USB_Host_ResetBus();
	while (!(USB_Host_IsBusResetComplete()));
     78c:	81 fd       	sbrc	r24, 1
     78e:	fc cf       	rjmp	.-8      	; 0x788 <USB_Host_ResetDevice+0x18>
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
     790:	80 91 9e 00 	lds	r24, 0x009E
     794:	81 60       	ori	r24, 0x01	; 1
     796:	80 93 9e 00 	sts	0x009E, r24
	USB_Host_ResumeBus();

	bool HSOFIEnabled = USB_INT_IsEnabled(USB_INT_HSOFI);
     79a:	30 91 a0 00 	lds	r19, 0x00A0

	USB_INT_Disable(USB_INT_HSOFI);
     79e:	80 91 a0 00 	lds	r24, 0x00A0
     7a2:	8f 7d       	andi	r24, 0xDF	; 223
     7a4:	80 93 a0 00 	sts	0x00A0, r24
	USB_INT_Clear(USB_INT_HSOFI);
     7a8:	80 91 9f 00 	lds	r24, 0x009F
     7ac:	8f 7d       	andi	r24, 0xDF	; 223
     7ae:	80 93 9f 00 	sts	0x009F, r24
     7b2:	2a e0       	ldi	r18, 0x0A	; 10
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     7b4:	40 ed       	ldi	r20, 0xD0	; 208
     7b6:	57 e0       	ldi	r21, 0x07	; 7
		/* Workaround for powerless-pull-up devices. After a USB bus reset,
		   all disconnection interrupts are suppressed while a USB frame is
		   looked for - if it is found within 10ms, the device is still
		   present.                                                        */

		if (USB_INT_HasOccurred(USB_INT_HSOFI))
     7b8:	80 91 9f 00 	lds	r24, 0x009F
     7bc:	85 ff       	sbrs	r24, 5
     7be:	0b c0       	rjmp	.+22     	; 0x7d6 <USB_Host_ResetDevice+0x66>
		{
			USB_INT_Clear(USB_INT_HSOFI);
     7c0:	80 91 9f 00 	lds	r24, 0x009F
     7c4:	8f 7d       	andi	r24, 0xDF	; 223
     7c6:	80 93 9f 00 	sts	0x009F, r24
			USB_INT_Clear(USB_INT_DDISCI);
     7ca:	80 91 9f 00 	lds	r24, 0x009F
     7ce:	8d 7f       	andi	r24, 0xFD	; 253
     7d0:	80 93 9f 00 	sts	0x009F, r24
     7d4:	05 c0       	rjmp	.+10     	; 0x7e0 <USB_Host_ResetDevice+0x70>
     7d6:	ca 01       	movw	r24, r20
     7d8:	01 97       	sbiw	r24, 0x01	; 1
     7da:	f1 f7       	brne	.-4      	; 0x7d8 <USB_Host_ResetDevice+0x68>
	bool HSOFIEnabled = USB_INT_IsEnabled(USB_INT_HSOFI);

	USB_INT_Disable(USB_INT_HSOFI);
	USB_INT_Clear(USB_INT_HSOFI);

	for (uint8_t MSRem = 10; MSRem != 0; MSRem--)
     7dc:	21 50       	subi	r18, 0x01	; 1
     7de:	61 f7       	brne	.-40     	; 0x7b8 <USB_Host_ResetDevice+0x48>
		}

		_delay_ms(1);
	}

	if (HSOFIEnabled)
     7e0:	35 ff       	sbrs	r19, 5
     7e2:	05 c0       	rjmp	.+10     	; 0x7ee <USB_Host_ResetDevice+0x7e>
	  USB_INT_Enable(USB_INT_HSOFI);
     7e4:	80 91 a0 00 	lds	r24, 0x00A0
     7e8:	80 62       	ori	r24, 0x20	; 32
     7ea:	80 93 a0 00 	sts	0x00A0, r24

	if (BusSuspended)
     7ee:	60 fd       	sbrc	r22, 0
     7f0:	05 c0       	rjmp	.+10     	; 0x7fc <USB_Host_ResetDevice+0x8c>
			 *  messages to the device.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				UHCON &= ~(1 << SOFEN);
     7f2:	80 91 9e 00 	lds	r24, 0x009E
     7f6:	8e 7f       	andi	r24, 0xFE	; 254
     7f8:	80 93 9e 00 	sts	0x009E, r24
	  USB_Host_SuspendBus();

	USB_INT_Enable(USB_INT_DDISCI);
     7fc:	80 91 a0 00 	lds	r24, 0x00A0
     800:	82 60       	ori	r24, 0x02	; 2
     802:	80 93 a0 00 	sts	0x00A0, r24
}
     806:	08 95       	ret

00000808 <USB_Host_SetDeviceConfiguration>:

uint8_t USB_Host_SetDeviceConfiguration(const uint8_t ConfigNumber)
{
	USB_ControlRequest = (USB_Request_Header_t)
     808:	10 92 2c 01 	sts	0x012C, r1
     80c:	99 e0       	ldi	r25, 0x09	; 9
     80e:	90 93 2d 01 	sts	0x012D, r25
     812:	80 93 2e 01 	sts	0x012E, r24
     816:	10 92 2f 01 	sts	0x012F, r1
     81a:	10 92 31 01 	sts	0x0131, r1
     81e:	10 92 30 01 	sts	0x0130, r1
     822:	10 92 33 01 	sts	0x0133, r1
     826:	10 92 32 01 	sts	0x0132, r1
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
     82a:	10 92 a7 00 	sts	0x00A7, r1
			.wLength       = 0,
		};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	return USB_Host_SendControlRequest(NULL);
     82e:	80 e0       	ldi	r24, 0x00	; 0
     830:	90 e0       	ldi	r25, 0x00	; 0
}
     832:	79 c3       	rjmp	.+1778   	; 0xf26 <USB_Host_SendControlRequest>

00000834 <USB_Host_ProcessNextHostState>:

#define  __INCLUDE_FROM_HOST_C
#include "Host.h"

void USB_Host_ProcessNextHostState(void)
{
     834:	ef 92       	push	r14
     836:	0f 93       	push	r16
     838:	1f 93       	push	r17
     83a:	df 93       	push	r29
     83c:	cf 93       	push	r28
     83e:	cd b7       	in	r28, 0x3d	; 61
     840:	de b7       	in	r29, 0x3e	; 62
     842:	28 97       	sbiw	r28, 0x08	; 8
     844:	0f b6       	in	r0, 0x3f	; 63
     846:	f8 94       	cli
     848:	de bf       	out	0x3e, r29	; 62
     84a:	0f be       	out	0x3f, r0	; 63
     84c:	cd bf       	out	0x3d, r28	; 61
	uint8_t SubErrorCode = HOST_ENUMERROR_NoError;

	static uint16_t WaitMSRemaining;
	static uint8_t  PostWaitState;

	switch (USB_HostState)
     84e:	80 91 34 01 	lds	r24, 0x0134
     852:	86 30       	cpi	r24, 0x06	; 6
     854:	09 f4       	brne	.+2      	; 0x858 <USB_Host_ProcessNextHostState+0x24>
     856:	94 c0       	rjmp	.+296    	; 0x980 <USB_Host_ProcessNextHostState+0x14c>
     858:	87 30       	cpi	r24, 0x07	; 7
     85a:	70 f4       	brcc	.+28     	; 0x878 <USB_Host_ProcessNextHostState+0x44>
     85c:	83 30       	cpi	r24, 0x03	; 3
     85e:	c1 f1       	breq	.+112    	; 0x8d0 <USB_Host_ProcessNextHostState+0x9c>
     860:	84 30       	cpi	r24, 0x04	; 4
     862:	20 f4       	brcc	.+8      	; 0x86c <USB_Host_ProcessNextHostState+0x38>
     864:	81 30       	cpi	r24, 0x01	; 1
     866:	09 f0       	breq	.+2      	; 0x86a <USB_Host_ProcessNextHostState+0x36>
     868:	07 c1       	rjmp	.+526    	; 0xa78 <USB_Host_ProcessNextHostState+0x244>
     86a:	13 c0       	rjmp	.+38     	; 0x892 <USB_Host_ProcessNextHostState+0x5e>
     86c:	84 30       	cpi	r24, 0x04	; 4
     86e:	c1 f1       	breq	.+112    	; 0x8e0 <USB_Host_ProcessNextHostState+0xac>
     870:	85 30       	cpi	r24, 0x05	; 5
     872:	09 f0       	breq	.+2      	; 0x876 <USB_Host_ProcessNextHostState+0x42>
     874:	01 c1       	rjmp	.+514    	; 0xa78 <USB_Host_ProcessNextHostState+0x244>
     876:	5b c0       	rjmp	.+182    	; 0x92e <USB_Host_ProcessNextHostState+0xfa>
     878:	88 30       	cpi	r24, 0x08	; 8
     87a:	09 f4       	brne	.+2      	; 0x87e <USB_Host_ProcessNextHostState+0x4a>
     87c:	9b c0       	rjmp	.+310    	; 0x9b4 <USB_Host_ProcessNextHostState+0x180>
     87e:	88 30       	cpi	r24, 0x08	; 8
     880:	08 f4       	brcc	.+2      	; 0x884 <USB_Host_ProcessNextHostState+0x50>
     882:	8a c0       	rjmp	.+276    	; 0x998 <USB_Host_ProcessNextHostState+0x164>
     884:	89 30       	cpi	r24, 0x09	; 9
     886:	09 f4       	brne	.+2      	; 0x88a <USB_Host_ProcessNextHostState+0x56>
     888:	b4 c0       	rjmp	.+360    	; 0x9f2 <USB_Host_ProcessNextHostState+0x1be>
     88a:	8a 30       	cpi	r24, 0x0A	; 10
     88c:	09 f0       	breq	.+2      	; 0x890 <USB_Host_ProcessNextHostState+0x5c>
     88e:	f4 c0       	rjmp	.+488    	; 0xa78 <USB_Host_ProcessNextHostState+0x244>
     890:	d9 c0       	rjmp	.+434    	; 0xa44 <USB_Host_ProcessNextHostState+0x210>
	{
		case HOST_STATE_WaitForDevice:
			if (WaitMSRemaining)
     892:	00 91 29 01 	lds	r16, 0x0129
     896:	10 91 2a 01 	lds	r17, 0x012A
     89a:	01 15       	cp	r16, r1
     89c:	11 05       	cpc	r17, r1
     89e:	09 f4       	brne	.+2      	; 0x8a2 <USB_Host_ProcessNextHostState+0x6e>
     8a0:	eb c0       	rjmp	.+470    	; 0xa78 <USB_Host_ProcessNextHostState+0x244>
			{
				if ((SubErrorCode = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
     8a2:	81 e0       	ldi	r24, 0x01	; 1
     8a4:	18 df       	rcall	.-464    	; 0x6d6 <USB_Host_WaitMS>
     8a6:	68 2f       	mov	r22, r24
     8a8:	88 23       	and	r24, r24
     8aa:	31 f0       	breq	.+12     	; 0x8b8 <USB_Host_ProcessNextHostState+0x84>
				{
					USB_HostState = PostWaitState;
     8ac:	80 91 28 01 	lds	r24, 0x0128
     8b0:	80 93 34 01 	sts	0x0134, r24
     8b4:	91 e0       	ldi	r25, 0x01	; 1
     8b6:	dc c0       	rjmp	.+440    	; 0xa70 <USB_Host_ProcessNextHostState+0x23c>
					ErrorCode     = HOST_ENUMERROR_WaitStage;
					break;
				}

				if (!(--WaitMSRemaining))
     8b8:	c8 01       	movw	r24, r16
     8ba:	01 97       	sbiw	r24, 0x01	; 1
     8bc:	90 93 2a 01 	sts	0x012A, r25
     8c0:	80 93 29 01 	sts	0x0129, r24
     8c4:	89 2b       	or	r24, r25
     8c6:	09 f0       	breq	.+2      	; 0x8ca <USB_Host_ProcessNextHostState+0x96>
     8c8:	d7 c0       	rjmp	.+430    	; 0xa78 <USB_Host_ProcessNextHostState+0x244>
				  USB_HostState = PostWaitState;
     8ca:	80 91 28 01 	lds	r24, 0x0128
     8ce:	bf c0       	rjmp	.+382    	; 0xa4e <USB_Host_ProcessNextHostState+0x21a>
			}

			break;
		case HOST_STATE_Powered:
			WaitMSRemaining = HOST_DEVICE_SETTLE_DELAY_MS;
     8d0:	88 ee       	ldi	r24, 0xE8	; 232
     8d2:	93 e0       	ldi	r25, 0x03	; 3
     8d4:	90 93 2a 01 	sts	0x012A, r25
     8d8:	80 93 29 01 	sts	0x0129, r24

			USB_HostState = HOST_STATE_Powered_WaitForDeviceSettle;
     8dc:	84 e0       	ldi	r24, 0x04	; 4
     8de:	b7 c0       	rjmp	.+366    	; 0xa4e <USB_Host_ProcessNextHostState+0x21a>
			break;
		case HOST_STATE_Powered_WaitForDeviceSettle:
			if (WaitMSRemaining--)
     8e0:	80 91 29 01 	lds	r24, 0x0129
     8e4:	90 91 2a 01 	lds	r25, 0x012A
     8e8:	01 97       	sbiw	r24, 0x01	; 1
     8ea:	90 93 2a 01 	sts	0x012A, r25
     8ee:	80 93 29 01 	sts	0x0129, r24
     8f2:	01 96       	adiw	r24, 0x01	; 1
     8f4:	29 f0       	breq	.+10     	; 0x900 <USB_Host_ProcessNextHostState+0xcc>
     8f6:	80 ed       	ldi	r24, 0xD0	; 208
     8f8:	97 e0       	ldi	r25, 0x07	; 7
     8fa:	01 97       	sbiw	r24, 0x01	; 1
     8fc:	f1 f7       	brne	.-4      	; 0x8fa <USB_Host_ProcessNextHostState+0xc6>
     8fe:	bc c0       	rjmp	.+376    	; 0xa78 <USB_Host_ProcessNextHostState+0x244>
			}

			static inline void USB_Host_VBUS_Manual_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Manual_Off(void)
			{
				PORTE  &= ~(1 << 7);
     900:	77 98       	cbi	0x0e, 7	; 14

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON  |=  (1 << OTGPADE);
     902:	80 91 d8 00 	lds	r24, 0x00D8
     906:	80 61       	ori	r24, 0x10	; 16
     908:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_Host_VBUS_Auto_Enable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Enable(void)
			{
				OTGCON &= ~(1 << VBUSHWC);
     90c:	80 91 dd 00 	lds	r24, 0x00DD
     910:	8b 7f       	andi	r24, 0xFB	; 251
     912:	80 93 dd 00 	sts	0x00DD, r24
				UHWCON |=  (1 << UVCONE);
     916:	80 91 d7 00 	lds	r24, 0x00D7
     91a:	80 61       	ori	r24, 0x10	; 16
     91c:	80 93 d7 00 	sts	0x00D7, r24
			}

			static inline void USB_Host_VBUS_Auto_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_On(void)
			{
				OTGCON |=  (1 << VBUSREQ);
     920:	80 91 dd 00 	lds	r24, 0x00DD
     924:	82 60       	ori	r24, 0x02	; 2
     926:	80 93 dd 00 	sts	0x00DD, r24

				USB_OTGPAD_On();
				USB_Host_VBUS_Auto_Enable();
				USB_Host_VBUS_Auto_On();

				USB_HostState = HOST_STATE_Powered_WaitForConnect;
     92a:	85 e0       	ldi	r24, 0x05	; 5
     92c:	90 c0       	rjmp	.+288    	; 0xa4e <USB_Host_ProcessNextHostState+0x21a>
			}

			break;
		case HOST_STATE_Powered_WaitForConnect:
			if (USB_INT_HasOccurred(USB_INT_DCONNI))
     92e:	80 91 9f 00 	lds	r24, 0x009F
     932:	80 ff       	sbrs	r24, 0
     934:	a1 c0       	rjmp	.+322    	; 0xa78 <USB_Host_ProcessNextHostState+0x244>
			{
				USB_INT_Clear(USB_INT_DCONNI);
     936:	80 91 9f 00 	lds	r24, 0x009F
     93a:	8e 7f       	andi	r24, 0xFE	; 254
     93c:	80 93 9f 00 	sts	0x009F, r24
				USB_INT_Clear(USB_INT_DDISCI);
     940:	80 91 9f 00 	lds	r24, 0x009F
     944:	8d 7f       	andi	r24, 0xFD	; 253
     946:	80 93 9f 00 	sts	0x009F, r24

				USB_INT_Clear(USB_INT_VBERRI);
     94a:	80 91 df 00 	lds	r24, 0x00DF
     94e:	8d 7f       	andi	r24, 0xFD	; 253
     950:	80 93 df 00 	sts	0x00DF, r24
				USB_INT_Enable(USB_INT_VBERRI);
     954:	80 91 de 00 	lds	r24, 0x00DE
     958:	82 60       	ori	r24, 0x02	; 2
     95a:	80 93 de 00 	sts	0x00DE, r24
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
     95e:	80 91 9e 00 	lds	r24, 0x009E
     962:	81 60       	ori	r24, 0x01	; 1
     964:	80 93 9e 00 	sts	0x009E, r24

				USB_Host_ResumeBus();
				Pipe_ClearPipes();
     968:	c9 d0       	rcall	.+402    	; 0xafc <Pipe_ClearPipes>

				HOST_TASK_NONBLOCK_WAIT(100, HOST_STATE_Powered_DoReset);
     96a:	81 e0       	ldi	r24, 0x01	; 1
     96c:	80 93 34 01 	sts	0x0134, r24
     970:	84 e6       	ldi	r24, 0x64	; 100
     972:	90 e0       	ldi	r25, 0x00	; 0
     974:	90 93 2a 01 	sts	0x012A, r25
     978:	80 93 29 01 	sts	0x0129, r24
     97c:	86 e0       	ldi	r24, 0x06	; 6
     97e:	5f c0       	rjmp	.+190    	; 0xa3e <USB_Host_ProcessNextHostState+0x20a>
			}

			break;
		case HOST_STATE_Powered_DoReset:
			USB_Host_ResetDevice();
     980:	f7 de       	rcall	.-530    	; 0x770 <USB_Host_ResetDevice>

			HOST_TASK_NONBLOCK_WAIT(200, HOST_STATE_Powered_ConfigPipe);
     982:	81 e0       	ldi	r24, 0x01	; 1
     984:	80 93 34 01 	sts	0x0134, r24
     988:	88 ec       	ldi	r24, 0xC8	; 200
     98a:	90 e0       	ldi	r25, 0x00	; 0
     98c:	90 93 2a 01 	sts	0x012A, r25
     990:	80 93 29 01 	sts	0x0129, r24
     994:	87 e0       	ldi	r24, 0x07	; 7
     996:	53 c0       	rjmp	.+166    	; 0xa3e <USB_Host_ProcessNextHostState+0x20a>
			break;
		case HOST_STATE_Powered_ConfigPipe:
			Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL,
     998:	80 e0       	ldi	r24, 0x00	; 0
     99a:	60 e0       	ldi	r22, 0x00	; 0
     99c:	40 e0       	ldi	r20, 0x00	; 0
     99e:	20 e0       	ldi	r18, 0x00	; 0
     9a0:	00 e4       	ldi	r16, 0x40	; 64
     9a2:	10 e0       	ldi	r17, 0x00	; 0
     9a4:	ee 24       	eor	r14, r14
     9a6:	74 d0       	rcall	.+232    	; 0xa90 <Pipe_ConfigurePipe>
			 *  \return Boolean true if the selected pipe is configured, false otherwise.
			 */
			static inline bool Pipe_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsConfigured(void)
			{
				return ((UPSTAX & (1 << CFGOK)) ? true : false);
     9a8:	80 91 ac 00 	lds	r24, 0x00AC
							   PIPE_TOKEN_SETUP, ENDPOINT_CONTROLEP,
							   PIPE_CONTROLPIPE_DEFAULT_SIZE, PIPE_BANK_SINGLE);

			if (!(Pipe_IsConfigured()))
     9ac:	87 ff       	sbrs	r24, 7
     9ae:	5e c0       	rjmp	.+188    	; 0xa6c <USB_Host_ProcessNextHostState+0x238>
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
				SubErrorCode = 0;
				break;
			}

			USB_HostState = HOST_STATE_Default;
     9b0:	88 e0       	ldi	r24, 0x08	; 8
     9b2:	4d c0       	rjmp	.+154    	; 0xa4e <USB_Host_ProcessNextHostState+0x21a>
			break;
		case HOST_STATE_Default:
			USB_ControlRequest = (USB_Request_Header_t)
     9b4:	ac e2       	ldi	r26, 0x2C	; 44
     9b6:	b1 e0       	ldi	r27, 0x01	; 1
     9b8:	e0 e1       	ldi	r30, 0x10	; 16
     9ba:	f1 e0       	ldi	r31, 0x01	; 1
     9bc:	88 e0       	ldi	r24, 0x08	; 8
     9be:	01 90       	ld	r0, Z+
     9c0:	0d 92       	st	X+, r0
     9c2:	81 50       	subi	r24, 0x01	; 1
     9c4:	e1 f7       	brne	.-8      	; 0x9be <USB_Host_ProcessNextHostState+0x18a>
					.wLength       = 8,
				};

			uint8_t DataBuffer[8];

			if ((SubErrorCode = USB_Host_SendControlRequest(DataBuffer)) != HOST_SENDCONTROL_Successful)
     9c6:	ce 01       	movw	r24, r28
     9c8:	01 96       	adiw	r24, 0x01	; 1
     9ca:	ad d2       	rcall	.+1370   	; 0xf26 <USB_Host_SendControlRequest>
     9cc:	68 2f       	mov	r22, r24
     9ce:	88 23       	and	r24, r24
     9d0:	09 f0       	breq	.+2      	; 0x9d4 <USB_Host_ProcessNextHostState+0x1a0>
     9d2:	4a c0       	rjmp	.+148    	; 0xa68 <USB_Host_ProcessNextHostState+0x234>
			{
				ErrorCode = HOST_ENUMERROR_ControlError;
				break;
			}

			USB_ControlPipeSize = DataBuffer[offsetof(USB_Descriptor_Device_t, Endpoint0Size)];
     9d4:	88 85       	ldd	r24, Y+8	; 0x08
     9d6:	80 93 18 01 	sts	0x0118, r24

			USB_Host_ResetDevice();
     9da:	ca de       	rcall	.-620    	; 0x770 <USB_Host_ResetDevice>

			HOST_TASK_NONBLOCK_WAIT(200, HOST_STATE_Default_PostReset);
     9dc:	81 e0       	ldi	r24, 0x01	; 1
     9de:	80 93 34 01 	sts	0x0134, r24
     9e2:	88 ec       	ldi	r24, 0xC8	; 200
     9e4:	90 e0       	ldi	r25, 0x00	; 0
     9e6:	90 93 2a 01 	sts	0x012A, r25
     9ea:	80 93 29 01 	sts	0x0129, r24
     9ee:	89 e0       	ldi	r24, 0x09	; 9
     9f0:	26 c0       	rjmp	.+76     	; 0xa3e <USB_Host_ProcessNextHostState+0x20a>
			break;
		case HOST_STATE_Default_PostReset:
			Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL,
     9f2:	00 91 18 01 	lds	r16, 0x0118
     9f6:	80 e0       	ldi	r24, 0x00	; 0
     9f8:	60 e0       	ldi	r22, 0x00	; 0
     9fa:	40 e0       	ldi	r20, 0x00	; 0
     9fc:	20 e0       	ldi	r18, 0x00	; 0
     9fe:	10 e0       	ldi	r17, 0x00	; 0
     a00:	ee 24       	eor	r14, r14
     a02:	46 d0       	rcall	.+140    	; 0xa90 <Pipe_ConfigurePipe>
     a04:	80 91 ac 00 	lds	r24, 0x00AC
			                   PIPE_TOKEN_SETUP, ENDPOINT_CONTROLEP,
			                   USB_ControlPipeSize, PIPE_BANK_SINGLE);

			if (!(Pipe_IsConfigured()))
     a08:	87 ff       	sbrs	r24, 7
     a0a:	30 c0       	rjmp	.+96     	; 0xa6c <USB_Host_ProcessNextHostState+0x238>
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
				SubErrorCode = 0;
				break;
			}

			USB_ControlRequest = (USB_Request_Header_t)
     a0c:	ac e2       	ldi	r26, 0x2C	; 44
     a0e:	b1 e0       	ldi	r27, 0x01	; 1
     a10:	e8 e0       	ldi	r30, 0x08	; 8
     a12:	f1 e0       	ldi	r31, 0x01	; 1
     a14:	88 e0       	ldi	r24, 0x08	; 8
     a16:	01 90       	ld	r0, Z+
     a18:	0d 92       	st	X+, r0
     a1a:	81 50       	subi	r24, 0x01	; 1
     a1c:	e1 f7       	brne	.-8      	; 0xa16 <USB_Host_ProcessNextHostState+0x1e2>
					.wValue        = USB_HOST_DEVICEADDRESS,
					.wIndex        = 0,
					.wLength       = 0,
				};

			if ((SubErrorCode = USB_Host_SendControlRequest(NULL)) != HOST_SENDCONTROL_Successful)
     a1e:	80 e0       	ldi	r24, 0x00	; 0
     a20:	90 e0       	ldi	r25, 0x00	; 0
     a22:	81 d2       	rcall	.+1282   	; 0xf26 <USB_Host_SendControlRequest>
     a24:	68 2f       	mov	r22, r24
     a26:	88 23       	and	r24, r24
     a28:	f9 f4       	brne	.+62     	; 0xa68 <USB_Host_ProcessNextHostState+0x234>
			{
				ErrorCode = HOST_ENUMERROR_ControlError;
				break;
			}

			HOST_TASK_NONBLOCK_WAIT(100, HOST_STATE_Default_PostAddressSet);
     a2a:	81 e0       	ldi	r24, 0x01	; 1
     a2c:	80 93 34 01 	sts	0x0134, r24
     a30:	84 e6       	ldi	r24, 0x64	; 100
     a32:	90 e0       	ldi	r25, 0x00	; 0
     a34:	90 93 2a 01 	sts	0x012A, r25
     a38:	80 93 29 01 	sts	0x0129, r24
     a3c:	8a e0       	ldi	r24, 0x0A	; 10
     a3e:	80 93 28 01 	sts	0x0128, r24
     a42:	1a c0       	rjmp	.+52     	; 0xa78 <USB_Host_ProcessNextHostState+0x244>
			}

			static inline void USB_Host_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SetDeviceAddress(const uint8_t Address)
			{
				UHADDR  =  (Address & 0x7F);
     a44:	81 e0       	ldi	r24, 0x01	; 1
     a46:	80 93 a1 00 	sts	0x00A1, r24
			break;
		case HOST_STATE_Default_PostAddressSet:
			USB_Host_SetDeviceAddress(USB_HOST_DEVICEADDRESS);

			EVENT_USB_Host_DeviceEnumerationComplete();
     a4a:	28 dc       	rcall	.-1968   	; 0x29c <EVENT_USB_Host_DeviceEnumerationComplete>
			USB_HostState = HOST_STATE_Addressed;
     a4c:	8b e0       	ldi	r24, 0x0B	; 11
     a4e:	80 93 34 01 	sts	0x0134, r24
     a52:	12 c0       	rjmp	.+36     	; 0xa78 <USB_Host_ProcessNextHostState+0x244>
			break;
	}

	if ((ErrorCode != HOST_ENUMERROR_NoError) && (USB_HostState != HOST_STATE_Unattached))
	{
		EVENT_USB_Host_DeviceEnumerationFailed(ErrorCode, SubErrorCode);
     a54:	89 2f       	mov	r24, r25
     a56:	37 dc       	rcall	.-1938   	; 0x2c6 <EVENT_USB_Host_DeviceEnumerationFailed>
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
     a58:	80 91 dd 00 	lds	r24, 0x00DD
     a5c:	81 60       	ori	r24, 0x01	; 1
     a5e:	80 93 dd 00 	sts	0x00DD, r24

		USB_Host_VBUS_Auto_Off();

		EVENT_USB_Host_DeviceUnattached();
     a62:	21 dc       	rcall	.-1982   	; 0x2a6 <EVENT_USB_Host_DeviceUnattached>

		USB_ResetInterface();
     a64:	8c d0       	rcall	.+280    	; 0xb7e <USB_ResetInterface>
     a66:	08 c0       	rjmp	.+16     	; 0xa78 <USB_Host_ProcessNextHostState+0x244>
	}
}
     a68:	93 e0       	ldi	r25, 0x03	; 3
     a6a:	02 c0       	rjmp	.+4      	; 0xa70 <USB_Host_ProcessNextHostState+0x23c>
     a6c:	94 e0       	ldi	r25, 0x04	; 4
     a6e:	60 e0       	ldi	r22, 0x00	; 0
			EVENT_USB_Host_DeviceEnumerationComplete();
			USB_HostState = HOST_STATE_Addressed;
			break;
	}

	if ((ErrorCode != HOST_ENUMERROR_NoError) && (USB_HostState != HOST_STATE_Unattached))
     a70:	80 91 34 01 	lds	r24, 0x0134
     a74:	82 30       	cpi	r24, 0x02	; 2
     a76:	71 f7       	brne	.-36     	; 0xa54 <USB_Host_ProcessNextHostState+0x220>

		EVENT_USB_Host_DeviceUnattached();

		USB_ResetInterface();
	}
}
     a78:	28 96       	adiw	r28, 0x08	; 8
     a7a:	0f b6       	in	r0, 0x3f	; 63
     a7c:	f8 94       	cli
     a7e:	de bf       	out	0x3e, r29	; 62
     a80:	0f be       	out	0x3f, r0	; 63
     a82:	cd bf       	out	0x3d, r28	; 61
     a84:	cf 91       	pop	r28
     a86:	df 91       	pop	r29
     a88:	1f 91       	pop	r17
     a8a:	0f 91       	pop	r16
     a8c:	ef 90       	pop	r14
     a8e:	08 95       	ret

00000a90 <Pipe_ConfigurePipe>:
                        const uint8_t Type,
                        const uint8_t Token,
                        const uint8_t EndpointNumber,
                        const uint16_t Size,
                        const uint8_t Banks)
{
     a90:	ef 92       	push	r14
     a92:	0f 93       	push	r16
     a94:	1f 93       	push	r17
     a96:	9e 2d       	mov	r25, r14
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
     a98:	80 93 a7 00 	sts	0x00A7, r24
			 *  \pre The currently selected pipe must first be configured properly via \ref Pipe_ConfigurePipe().
			 */
			static inline void Pipe_EnablePipe(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_EnablePipe(void)
			{
				UPCONX |= (1 << PEN);
     a9c:	80 91 a9 00 	lds	r24, 0x00A9
     aa0:	81 60       	ori	r24, 0x01	; 1
     aa2:	80 93 a9 00 	sts	0x00A9, r24
	Pipe_SelectPipe(Number);
	Pipe_EnablePipe();

	UPCFG1X = 0;
     aa6:	10 92 ab 00 	sts	0x00AB, r1

	UPCFG0X = ((Type << EPTYPE0) | Token | ((EndpointNumber & PIPE_EPNUM_MASK) << PEPNUM0));
     aaa:	62 95       	swap	r22
     aac:	66 0f       	add	r22, r22
     aae:	66 0f       	add	r22, r22
     ab0:	60 7c       	andi	r22, 0xC0	; 192
     ab2:	64 2b       	or	r22, r20
     ab4:	2f 70       	andi	r18, 0x0F	; 15
     ab6:	62 2b       	or	r22, r18
     ab8:	60 93 aa 00 	sts	0x00AA, r22
     abc:	28 e0       	ldi	r18, 0x08	; 8
     abe:	30 e0       	ldi	r19, 0x00	; 0
     ac0:	80 e0       	ldi	r24, 0x00	; 0
     ac2:	03 c0       	rjmp	.+6      	; 0xaca <Pipe_ConfigurePipe+0x3a>
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while ((CheckBytes < Bytes) && (CheckBytes < PIPE_MAX_SIZE))
				{
					MaskVal++;
     ac4:	8f 5f       	subi	r24, 0xFF	; 255
					CheckBytes <<= 1;
     ac6:	22 0f       	add	r18, r18
     ac8:	33 1f       	adc	r19, r19
			static inline uint8_t Pipe_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while ((CheckBytes < Bytes) && (CheckBytes < PIPE_MAX_SIZE))
     aca:	20 17       	cp	r18, r16
     acc:	31 07       	cpc	r19, r17
     ace:	10 f4       	brcc	.+4      	; 0xad4 <Pipe_ConfigurePipe+0x44>
     ad0:	85 30       	cpi	r24, 0x05	; 5
     ad2:	c1 f7       	brne	.-16     	; 0xac4 <Pipe_ConfigurePipe+0x34>
	UPCFG1X = ((1 << ALLOC) | Banks | Pipe_BytesToEPSizeMask(Size));
     ad4:	92 60       	ori	r25, 0x02	; 2
     ad6:	82 95       	swap	r24
     ad8:	80 7f       	andi	r24, 0xF0	; 240
     ada:	89 2b       	or	r24, r25
     adc:	80 93 ab 00 	sts	0x00AB, r24

			/** Configures the currently selected pipe to allow for an unlimited number of IN requests. */
			static inline void Pipe_SetInfiniteINRequests(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetInfiniteINRequests(void)
			{
				UPCONX |= (1 << INMODE);
     ae0:	80 91 a9 00 	lds	r24, 0x00A9
     ae4:	80 62       	ori	r24, 0x20	; 32
     ae6:	80 93 a9 00 	sts	0x00A9, r24
			 *  \return Boolean true if the selected pipe is configured, false otherwise.
			 */
			static inline bool Pipe_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsConfigured(void)
			{
				return ((UPSTAX & (1 << CFGOK)) ? true : false);
     aea:	80 91 ac 00 	lds	r24, 0x00AC

	Pipe_SetInfiniteINRequests();

	return Pipe_IsConfigured();
}
     aee:	88 1f       	adc	r24, r24
     af0:	88 27       	eor	r24, r24
     af2:	88 1f       	adc	r24, r24
     af4:	1f 91       	pop	r17
     af6:	0f 91       	pop	r16
     af8:	ef 90       	pop	r14
     afa:	08 95       	ret

00000afc <Pipe_ClearPipes>:

void Pipe_ClearPipes(void)
{
	UPINT = 0;
     afc:	10 92 f8 00 	sts	0x00F8, r1
     b00:	90 e0       	ldi	r25, 0x00	; 0
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
     b02:	90 93 a7 00 	sts	0x00A7, r25

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
	{
		Pipe_SelectPipe(PNum);
		UPIENX  = 0;
     b06:	10 92 ae 00 	sts	0x00AE, r1
		UPINTX  = 0;
     b0a:	10 92 a6 00 	sts	0x00A6, r1
		UPCFG1X = 0;
     b0e:	10 92 ab 00 	sts	0x00AB, r1
			 *  from an attached device.
			 */
			static inline void Pipe_DisablePipe(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_DisablePipe(void)
			{
				UPCONX &= ~(1 << PEN);
     b12:	80 91 a9 00 	lds	r24, 0x00A9
     b16:	8e 7f       	andi	r24, 0xFE	; 254
     b18:	80 93 a9 00 	sts	0x00A9, r24

void Pipe_ClearPipes(void)
{
	UPINT = 0;

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
     b1c:	9f 5f       	subi	r25, 0xFF	; 255
     b1e:	97 30       	cpi	r25, 0x07	; 7
     b20:	81 f7       	brne	.-32     	; 0xb02 <Pipe_ClearPipes+0x6>
		UPIENX  = 0;
		UPINTX  = 0;
		UPCFG1X = 0;
		Pipe_DisablePipe();
	}
}
     b22:	08 95       	ret

00000b24 <Pipe_WaitUntilReady>:
			/** Returns the current USB frame number, when in host mode. Every millisecond the USB bus is active (i.e. not suspended)
			 *  the frame number is incremented by one.
			 */
			static inline uint16_t USB_Host_GetFrameNumber(void)
			{
				return UHFNUM;
     b24:	40 91 a2 00 	lds	r20, 0x00A2
     b28:	50 91 a3 00 	lds	r21, 0x00A3
     b2c:	24 e6       	ldi	r18, 0x64	; 100
			 *  \return The current pipe token, as a PIPE_TOKEN_* mask.
			 */
			static inline uint8_t Pipe_GetPipeToken(void) ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetPipeToken(void)
			{
				return (UPCFG0X & (0x03 << PTOKEN0));
     b2e:	80 91 aa 00 	lds	r24, 0x00AA

	uint16_t PreviousFrameNumber = USB_Host_GetFrameNumber();

	for (;;)
	{
		if (Pipe_GetPipeToken() == PIPE_TOKEN_IN)
     b32:	80 73       	andi	r24, 0x30	; 48
     b34:	80 31       	cpi	r24, 0x10	; 16
     b36:	29 f4       	brne	.+10     	; 0xb42 <Pipe_WaitUntilReady+0x1e>
			 *  \return Boolean true if the current pipe has received an IN packet, false otherwise.
			 */
			static inline bool Pipe_IsINReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsINReceived(void)
			{
				return ((UPINTX & (1 << RXINI)) ? true : false);
     b38:	80 91 a6 00 	lds	r24, 0x00A6
		{
			if (Pipe_IsINReceived())
     b3c:	80 ff       	sbrs	r24, 0
     b3e:	05 c0       	rjmp	.+10     	; 0xb4a <Pipe_WaitUntilReady+0x26>
     b40:	1c c0       	rjmp	.+56     	; 0xb7a <Pipe_WaitUntilReady+0x56>
			 *  \return Boolean true if the current pipe is ready for an OUT packet, false otherwise.
			 */
			static inline bool Pipe_IsOUTReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsOUTReady(void)
			{
				return ((UPINTX & (1 << TXOUTI)) ? true : false);
     b42:	80 91 a6 00 	lds	r24, 0x00A6
			  return PIPE_READYWAIT_NoError;
		}
		else
		{
			if (Pipe_IsOUTReady())
     b46:	82 fd       	sbrc	r24, 2
     b48:	18 c0       	rjmp	.+48     	; 0xb7a <Pipe_WaitUntilReady+0x56>
			 *  \return Boolean true if the current pipe has been stalled by the attached device, false otherwise.
			 */
			static inline bool Pipe_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsStalled(void)
			{
				return ((UPINTX & (1 << RXSTALLI)) ? true : false);
     b4a:	80 91 a6 00 	lds	r24, 0x00A6
			  return PIPE_READYWAIT_NoError;
		}

		if (Pipe_IsStalled())
     b4e:	81 ff       	sbrs	r24, 1
     b50:	02 c0       	rjmp	.+4      	; 0xb56 <Pipe_WaitUntilReady+0x32>
     b52:	81 e0       	ldi	r24, 0x01	; 1
     b54:	08 95       	ret
		  return PIPE_READYWAIT_PipeStalled;
		else if (USB_HostState == HOST_STATE_Unattached)
     b56:	80 91 34 01 	lds	r24, 0x0134
     b5a:	82 30       	cpi	r24, 0x02	; 2
     b5c:	79 f0       	breq	.+30     	; 0xb7c <Pipe_WaitUntilReady+0x58>
     b5e:	80 91 a2 00 	lds	r24, 0x00A2
     b62:	90 91 a3 00 	lds	r25, 0x00A3
		  return PIPE_READYWAIT_DeviceDisconnected;

		uint16_t CurrentFrameNumber = USB_Host_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
     b66:	84 17       	cp	r24, r20
     b68:	95 07       	cpc	r25, r21
     b6a:	09 f3       	breq	.-62     	; 0xb2e <Pipe_WaitUntilReady+0xa>
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
     b6c:	22 23       	and	r18, r18
     b6e:	11 f4       	brne	.+4      	; 0xb74 <Pipe_WaitUntilReady+0x50>
     b70:	83 e0       	ldi	r24, 0x03	; 3
     b72:	08 95       	ret
     b74:	21 50       	subi	r18, 0x01	; 1
     b76:	ac 01       	movw	r20, r24
     b78:	da cf       	rjmp	.-76     	; 0xb2e <Pipe_WaitUntilReady+0xa>
     b7a:	80 e0       	ldi	r24, 0x00	; 0
			  return PIPE_READYWAIT_Timeout;
		}
	}
}
     b7c:	08 95       	ret

00000b7e <USB_ResetInterface>:
{
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
     b7e:	6e d0       	rcall	.+220    	; 0xc5c <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
     b80:	75 d0       	rcall	.+234    	; 0xc6c <USB_INT_ClearAllInterrupts>
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				const uint8_t Temp = USBCON;
     b82:	80 91 d8 00 	lds	r24, 0x00D8

				USBCON = (Temp & ~(1 << USBE));
     b86:	98 2f       	mov	r25, r24
     b88:	9f 77       	andi	r25, 0x7F	; 127
     b8a:	90 93 d8 00 	sts	0x00D8, r25
				USBCON = (Temp |  (1 << USBE));
     b8e:	80 68       	ori	r24, 0x80	; 128
     b90:	80 93 d8 00 	sts	0x00D8, r24

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR  = USB_PLL_PSC;
     b94:	8c e0       	ldi	r24, 0x0C	; 12
     b96:	89 bd       	out	0x29, r24	; 41
				PLLCSR |= (1 << PLLE);
     b98:	89 b5       	in	r24, 0x29	; 41
     b9a:	82 60       	ori	r24, 0x02	; 2
     b9c:	89 bd       	out	0x29, r24	; 41
		#if defined(USB_SERIES_4_AVR)
		PLLFRQ = ((1 << PLLUSB) | (1 << PDIV3) | (1 << PDIV1));
		#endif

		USB_PLL_On();
		while (!(USB_PLL_IsReady()));
     b9e:	09 b4       	in	r0, 0x29	; 41
     ba0:	00 fe       	sbrs	r0, 0
     ba2:	fd cf       	rjmp	.-6      	; 0xb9e <USB_ResetInterface+0x20>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON  &= ~(1 << FRZCLK);
     ba4:	80 91 d8 00 	lds	r24, 0x00D8
     ba8:	8f 7d       	andi	r24, 0xDF	; 223
     baa:	80 93 d8 00 	sts	0x00D8, r24
		#endif
	}
	else if (USB_CurrentMode == USB_MODE_Host)
	{
		#if defined(USB_CAN_BE_HOST)
		UHWCON &= ~(1 << UIMOD);
     bae:	80 91 d7 00 	lds	r24, 0x00D7
     bb2:	8f 77       	andi	r24, 0x7F	; 127
     bb4:	80 93 d7 00 	sts	0x00D7, r24
#endif

#if defined(USB_CAN_BE_HOST)
static void USB_Init_Host(void)
{
	USB_HostState       = HOST_STATE_Unattached;
     bb8:	82 e0       	ldi	r24, 0x02	; 2
     bba:	80 93 34 01 	sts	0x0134, r24
	USB_ControlPipeSize = PIPE_CONTROLPIPE_DEFAULT_SIZE;
     bbe:	80 e4       	ldi	r24, 0x40	; 64
     bc0:	80 93 18 01 	sts	0x0118, r24
	#if !defined(__DOXYGEN__)
		/* Macros: */
			static inline void USB_Host_HostMode_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_HostMode_On(void)
			{
				USBCON |=  (1 << HOST);
     bc4:	80 91 d8 00 	lds	r24, 0x00D8
     bc8:	80 64       	ori	r24, 0x40	; 64
     bca:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
     bce:	80 91 dd 00 	lds	r24, 0x00DD
     bd2:	81 60       	ori	r24, 0x01	; 1
     bd4:	80 93 dd 00 	sts	0x00DD, r24
			}

			static inline void USB_Host_VBUS_Manual_Enable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Manual_Enable(void)
			{
				OTGCON |=  (1 << VBUSHWC);
     bd8:	80 91 dd 00 	lds	r24, 0x00DD
     bdc:	84 60       	ori	r24, 0x04	; 4
     bde:	80 93 dd 00 	sts	0x00DD, r24
				UHWCON &= ~(1 << UVCONE);
     be2:	80 91 d7 00 	lds	r24, 0x00D7
     be6:	8f 7e       	andi	r24, 0xEF	; 239
     be8:	80 93 d7 00 	sts	0x00D7, r24

				DDRE   |=  (1 << 7);
     bec:	6f 9a       	sbi	0x0d, 7	; 13
			}

			static inline void USB_Host_VBUS_Manual_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Manual_On(void)
			{
				PORTE  |=  (1 << 7);
     bee:	77 9a       	sbi	0x0e, 7	; 14

	USB_Host_VBUS_Auto_Off();
	USB_Host_VBUS_Manual_Enable();
	USB_Host_VBUS_Manual_On();

	USB_INT_Enable(USB_INT_SRPI);
     bf0:	80 91 de 00 	lds	r24, 0x00DE
     bf4:	81 60       	ori	r24, 0x01	; 1
     bf6:	80 93 de 00 	sts	0x00DE, r24
	USB_INT_Enable(USB_INT_BCERRI);
     bfa:	80 91 de 00 	lds	r24, 0x00DE
     bfe:	84 60       	ori	r24, 0x04	; 4
     c00:	80 93 de 00 	sts	0x00DE, r24
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
     c04:	80 91 e0 00 	lds	r24, 0x00E0
     c08:	8e 7f       	andi	r24, 0xFE	; 254
     c0a:	80 93 e0 00 	sts	0x00E0, r24

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON  |=  (1 << OTGPADE);
     c0e:	80 91 d8 00 	lds	r24, 0x00D8
     c12:	80 61       	ori	r24, 0x10	; 16
     c14:	80 93 d8 00 	sts	0x00D8, r24
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
     c18:	08 95       	ret

00000c1a <USB_Init>:

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON  |=  (1 << UVREGE);
     c1a:	e7 ed       	ldi	r30, 0xD7	; 215
     c1c:	f0 e0       	ldi	r31, 0x00	; 0
     c1e:	80 81       	ld	r24, Z
     c20:	81 60       	ori	r24, 0x01	; 1
     c22:	80 83       	st	Z, r24
	{
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
     c24:	81 e0       	ldi	r24, 0x01	; 1
     c26:	80 93 2b 01 	sts	0x012B, r24

	USB_ResetInterface();
}
     c2a:	a9 cf       	rjmp	.-174    	; 0xb7e <USB_ResetInterface>

00000c2c <USB_ShutDown>:

void USB_ShutDown(void)
{
	USB_INT_DisableAllInterrupts();
     c2c:	17 d0       	rcall	.+46     	; 0xc5c <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
     c2e:	1e d0       	rcall	.+60     	; 0xc6c <USB_INT_ClearAllInterrupts>
			 *  enumerating the device once attached until \ref USB_Attach() is called.
			 */
			static inline void USB_Detach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Detach(void)
			{
				UDCON  |=  (1 << DETACH);
     c30:	e0 ee       	ldi	r30, 0xE0	; 224
     c32:	f0 e0       	ldi	r31, 0x00	; 0
     c34:	80 81       	ld	r24, Z
     c36:	81 60       	ori	r24, 0x01	; 1
     c38:	80 83       	st	Z, r24
			}

			static inline void USB_Controller_Disable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Disable(void)
			{
				USBCON  &= ~(1 << USBE);
     c3a:	a8 ed       	ldi	r26, 0xD8	; 216
     c3c:	b0 e0       	ldi	r27, 0x00	; 0
     c3e:	8c 91       	ld	r24, X
     c40:	8f 77       	andi	r24, 0x7F	; 127
     c42:	8c 93       	st	X, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR  = 0;
     c44:	19 bc       	out	0x29, r1	; 41

			static inline void USB_REG_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_Off(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON  &= ~(1 << UVREGE);
     c46:	e7 ed       	ldi	r30, 0xD7	; 215
     c48:	f0 e0       	ldi	r31, 0x00	; 0
     c4a:	80 81       	ld	r24, Z
     c4c:	8e 7f       	andi	r24, 0xFE	; 254
     c4e:	80 83       	st	Z, r24
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON  &= ~(1 << OTGPADE);
     c50:	8c 91       	ld	r24, X
     c52:	8f 7e       	andi	r24, 0xEF	; 239
     c54:	8c 93       	st	X, r24

	#if defined(USB_CAN_BE_BOTH)
	USB_CurrentMode = USB_MODE_None;
	#endif

	USB_IsInitialized = false;
     c56:	10 92 2b 01 	sts	0x012B, r1
}
     c5a:	08 95       	ret

00000c5c <USB_INT_DisableAllInterrupts>:
#include "USBInterrupt.h"

void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
     c5c:	e8 ed       	ldi	r30, 0xD8	; 216
     c5e:	f0 e0       	ldi	r31, 0x00	; 0
     c60:	80 81       	ld	r24, Z
     c62:	8c 7f       	andi	r24, 0xFC	; 252
     c64:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_BOTH)
	OTGIEN  = 0;
	#endif

	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
     c66:	10 92 a0 00 	sts	0x00A0, r1
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
	#endif
}
     c6a:	08 95       	ret

00000c6c <USB_INT_ClearAllInterrupts>:

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT  = 0;
     c6c:	10 92 da 00 	sts	0x00DA, r1
	#if defined(USB_CAN_BE_BOTH)
	OTGINT  = 0;
	#endif

	#if defined(USB_CAN_BE_HOST)
	UHINT   = 0;
     c70:	10 92 9f 00 	sts	0x009F, r1
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT   = 0;
	#endif
}
     c74:	08 95       	ret

00000c76 <__vector_10>:

ISR(USB_GEN_vect, ISR_BLOCK)
{
     c76:	1f 92       	push	r1
     c78:	0f 92       	push	r0
     c7a:	0f b6       	in	r0, 0x3f	; 63
     c7c:	0f 92       	push	r0
     c7e:	0b b6       	in	r0, 0x3b	; 59
     c80:	0f 92       	push	r0
     c82:	11 24       	eor	r1, r1
     c84:	2f 93       	push	r18
     c86:	3f 93       	push	r19
     c88:	4f 93       	push	r20
     c8a:	5f 93       	push	r21
     c8c:	6f 93       	push	r22
     c8e:	7f 93       	push	r23
     c90:	8f 93       	push	r24
     c92:	9f 93       	push	r25
     c94:	af 93       	push	r26
     c96:	bf 93       	push	r27
     c98:	ef 93       	push	r30
     c9a:	ff 93       	push	r31
	}
	#endif
	#endif

	#if defined(USB_CAN_BE_HOST)
	if (USB_INT_HasOccurred(USB_INT_DDISCI) && USB_INT_IsEnabled(USB_INT_DDISCI))
     c9c:	80 91 9f 00 	lds	r24, 0x009F
     ca0:	81 ff       	sbrs	r24, 1
     ca2:	15 c0       	rjmp	.+42     	; 0xcce <__vector_10+0x58>
     ca4:	80 91 a0 00 	lds	r24, 0x00A0
     ca8:	81 ff       	sbrs	r24, 1
     caa:	11 c0       	rjmp	.+34     	; 0xcce <__vector_10+0x58>
	{
		USB_INT_Clear(USB_INT_DDISCI);
     cac:	80 91 9f 00 	lds	r24, 0x009F
     cb0:	8d 7f       	andi	r24, 0xFD	; 253
     cb2:	80 93 9f 00 	sts	0x009F, r24
		USB_INT_Clear(USB_INT_DCONNI);
     cb6:	80 91 9f 00 	lds	r24, 0x009F
     cba:	8e 7f       	andi	r24, 0xFE	; 254
     cbc:	80 93 9f 00 	sts	0x009F, r24
		USB_INT_Disable(USB_INT_DDISCI);
     cc0:	80 91 a0 00 	lds	r24, 0x00A0
     cc4:	8d 7f       	andi	r24, 0xFD	; 253
     cc6:	80 93 a0 00 	sts	0x00A0, r24

		EVENT_USB_Host_DeviceUnattached();
     cca:	ed da       	rcall	.-2598   	; 0x2a6 <EVENT_USB_Host_DeviceUnattached>

		USB_ResetInterface();
     ccc:	58 df       	rcall	.-336    	; 0xb7e <USB_ResetInterface>
	}

	if (USB_INT_HasOccurred(USB_INT_VBERRI) && USB_INT_IsEnabled(USB_INT_VBERRI))
     cce:	80 91 df 00 	lds	r24, 0x00DF
     cd2:	81 ff       	sbrs	r24, 1
     cd4:	15 c0       	rjmp	.+42     	; 0xd00 <__vector_10+0x8a>
     cd6:	80 91 de 00 	lds	r24, 0x00DE
     cda:	81 ff       	sbrs	r24, 1
     cdc:	11 c0       	rjmp	.+34     	; 0xd00 <__vector_10+0x8a>
	{
		USB_INT_Clear(USB_INT_VBERRI);
     cde:	80 91 df 00 	lds	r24, 0x00DF
     ce2:	8d 7f       	andi	r24, 0xFD	; 253
     ce4:	80 93 df 00 	sts	0x00DF, r24
			}

			static inline void USB_Host_VBUS_Manual_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Manual_Off(void)
			{
				PORTE  &= ~(1 << 7);
     ce8:	77 98       	cbi	0x0e, 7	; 14
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
     cea:	80 91 dd 00 	lds	r24, 0x00DD
     cee:	81 60       	ori	r24, 0x01	; 1
     cf0:	80 93 dd 00 	sts	0x00DD, r24

		USB_Host_VBUS_Manual_Off();
		USB_Host_VBUS_Auto_Off();

		EVENT_USB_Host_HostError(HOST_ERROR_VBusVoltageDip);
     cf4:	80 e0       	ldi	r24, 0x00	; 0
     cf6:	e7 db       	rcall	.-2098   	; 0x4c6 <EVENT_USB_Host_HostError>
		EVENT_USB_Host_DeviceUnattached();
     cf8:	d6 da       	rcall	.-2644   	; 0x2a6 <EVENT_USB_Host_DeviceUnattached>

		USB_HostState = HOST_STATE_Unattached;
     cfa:	82 e0       	ldi	r24, 0x02	; 2
     cfc:	80 93 34 01 	sts	0x0134, r24
	}

	if (USB_INT_HasOccurred(USB_INT_SRPI) && USB_INT_IsEnabled(USB_INT_SRPI))
     d00:	80 91 df 00 	lds	r24, 0x00DF
     d04:	80 ff       	sbrs	r24, 0
     d06:	17 c0       	rjmp	.+46     	; 0xd36 <__vector_10+0xc0>
     d08:	80 91 de 00 	lds	r24, 0x00DE
     d0c:	80 ff       	sbrs	r24, 0
     d0e:	13 c0       	rjmp	.+38     	; 0xd36 <__vector_10+0xc0>
	{
		USB_INT_Clear(USB_INT_SRPI);
     d10:	80 91 df 00 	lds	r24, 0x00DF
     d14:	8e 7f       	andi	r24, 0xFE	; 254
     d16:	80 93 df 00 	sts	0x00DF, r24
		USB_INT_Disable(USB_INT_SRPI);
     d1a:	80 91 de 00 	lds	r24, 0x00DE
     d1e:	8e 7f       	andi	r24, 0xFE	; 254
     d20:	80 93 de 00 	sts	0x00DE, r24

		EVENT_USB_Host_DeviceAttached();
     d24:	c8 da       	rcall	.-2672   	; 0x2b6 <EVENT_USB_Host_DeviceAttached>

		USB_INT_Enable(USB_INT_DDISCI);
     d26:	80 91 a0 00 	lds	r24, 0x00A0
     d2a:	82 60       	ori	r24, 0x02	; 2
     d2c:	80 93 a0 00 	sts	0x00A0, r24

		USB_HostState = HOST_STATE_Powered;
     d30:	83 e0       	ldi	r24, 0x03	; 3
     d32:	80 93 34 01 	sts	0x0134, r24
	}

	if (USB_INT_HasOccurred(USB_INT_BCERRI) && USB_INT_IsEnabled(USB_INT_BCERRI))
     d36:	80 91 df 00 	lds	r24, 0x00DF
     d3a:	82 ff       	sbrs	r24, 2
     d3c:	0e c0       	rjmp	.+28     	; 0xd5a <__vector_10+0xe4>
     d3e:	80 91 de 00 	lds	r24, 0x00DE
     d42:	82 ff       	sbrs	r24, 2
     d44:	0a c0       	rjmp	.+20     	; 0xd5a <__vector_10+0xe4>
	{
		USB_INT_Clear(USB_INT_BCERRI);
     d46:	80 91 df 00 	lds	r24, 0x00DF
     d4a:	8b 7f       	andi	r24, 0xFB	; 251
     d4c:	80 93 df 00 	sts	0x00DF, r24

		EVENT_USB_Host_DeviceEnumerationFailed(HOST_ENUMERROR_NoDeviceDetected, 0);
     d50:	82 e0       	ldi	r24, 0x02	; 2
     d52:	60 e0       	ldi	r22, 0x00	; 0
     d54:	b8 da       	rcall	.-2704   	; 0x2c6 <EVENT_USB_Host_DeviceEnumerationFailed>
		EVENT_USB_Host_DeviceUnattached();
     d56:	a7 da       	rcall	.-2738   	; 0x2a6 <EVENT_USB_Host_DeviceUnattached>

		USB_ResetInterface();
     d58:	12 df       	rcall	.-476    	; 0xb7e <USB_ResetInterface>
	}

	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_HSOFI) && USB_INT_IsEnabled(USB_INT_HSOFI))
     d5a:	80 91 9f 00 	lds	r24, 0x009F
     d5e:	85 ff       	sbrs	r24, 5
     d60:	0a c0       	rjmp	.+20     	; 0xd76 <__vector_10+0x100>
     d62:	80 91 a0 00 	lds	r24, 0x00A0
     d66:	85 ff       	sbrs	r24, 5
     d68:	06 c0       	rjmp	.+12     	; 0xd76 <__vector_10+0x100>
	{
		USB_INT_Clear(USB_INT_HSOFI);
     d6a:	80 91 9f 00 	lds	r24, 0x009F
     d6e:	8f 7d       	andi	r24, 0xDF	; 223
     d70:	80 93 9f 00 	sts	0x009F, r24

		EVENT_USB_Host_StartOfFrame();
     d74:	ae d0       	rcall	.+348    	; 0xed2 <USB_Event_Stub>
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
     d76:	ff 91       	pop	r31
     d78:	ef 91       	pop	r30
     d7a:	bf 91       	pop	r27
     d7c:	af 91       	pop	r26
     d7e:	9f 91       	pop	r25
     d80:	8f 91       	pop	r24
     d82:	7f 91       	pop	r23
     d84:	6f 91       	pop	r22
     d86:	5f 91       	pop	r21
     d88:	4f 91       	pop	r20
     d8a:	3f 91       	pop	r19
     d8c:	2f 91       	pop	r18
     d8e:	0f 90       	pop	r0
     d90:	0b be       	out	0x3b, r0	; 59
     d92:	0f 90       	pop	r0
     d94:	0f be       	out	0x3f, r0	; 63
     d96:	0f 90       	pop	r0
     d98:	1f 90       	pop	r1
     d9a:	18 95       	reti

00000d9c <USB_GetNextDescriptorComp>:

uint8_t USB_GetNextDescriptorComp(uint16_t* const BytesRem, void** const CurrConfigLoc, ConfigComparatorPtr_t const ComparatorRoutine)
{
     d9c:	af 92       	push	r10
     d9e:	bf 92       	push	r11
     da0:	cf 92       	push	r12
     da2:	df 92       	push	r13
     da4:	ef 92       	push	r14
     da6:	ff 92       	push	r15
     da8:	0f 93       	push	r16
     daa:	1f 93       	push	r17
     dac:	cf 93       	push	r28
     dae:	df 93       	push	r29
     db0:	7c 01       	movw	r14, r24
     db2:	8b 01       	movw	r16, r22
     db4:	5a 01       	movw	r10, r20
     db6:	21 c0       	rjmp	.+66     	; 0xdfa <USB_GetNextDescriptorComp+0x5e>
	uint8_t ErrorCode;

	while (*BytesRem)
	{
		uint8_t* PrevDescLoc  = *CurrConfigLoc;
     db8:	f8 01       	movw	r30, r16
     dba:	c0 81       	ld	r28, Z
     dbc:	d1 81       	ldd	r29, Z+1	; 0x01
			static inline void USB_GetNextDescriptor(uint16_t* const BytesRem,
			                                         void** CurrConfigLoc) ATTR_NON_NULL_PTR_ARG(1) ATTR_NON_NULL_PTR_ARG(2);
			static inline void USB_GetNextDescriptor(uint16_t* const BytesRem,
			                                         void** CurrConfigLoc)
			{
				uint16_t CurrDescriptorSize = DESCRIPTOR_CAST(*CurrConfigLoc, USB_Descriptor_Header_t).Size;
     dbe:	88 81       	ld	r24, Y
     dc0:	90 e0       	ldi	r25, 0x00	; 0

				*CurrConfigLoc  = ((uint8_t*)*CurrConfigLoc) + CurrDescriptorSize;
     dc2:	9e 01       	movw	r18, r28
     dc4:	28 0f       	add	r18, r24
     dc6:	39 1f       	adc	r19, r25
     dc8:	31 83       	std	Z+1, r19	; 0x01
     dca:	20 83       	st	Z, r18
				*BytesRem      -= CurrDescriptorSize;
     dcc:	f7 01       	movw	r30, r14
     dce:	20 81       	ld	r18, Z
     dd0:	31 81       	ldd	r19, Z+1	; 0x01
     dd2:	28 1b       	sub	r18, r24
     dd4:	39 0b       	sbc	r19, r25
     dd6:	31 83       	std	Z+1, r19	; 0x01
     dd8:	20 83       	st	Z, r18
		uint16_t PrevBytesRem = *BytesRem;

		USB_GetNextDescriptor(BytesRem, CurrConfigLoc);

		if ((ErrorCode = ComparatorRoutine(*CurrConfigLoc)) != DESCRIPTOR_SEARCH_NotFound)
     dda:	f8 01       	movw	r30, r16
     ddc:	80 81       	ld	r24, Z
     dde:	91 81       	ldd	r25, Z+1	; 0x01
     de0:	f5 01       	movw	r30, r10
     de2:	09 95       	icall
     de4:	82 30       	cpi	r24, 0x02	; 2
     de6:	49 f0       	breq	.+18     	; 0xdfa <USB_GetNextDescriptorComp+0x5e>
		{
			if (ErrorCode == DESCRIPTOR_SEARCH_Fail)
     de8:	81 30       	cpi	r24, 0x01	; 1
     dea:	71 f4       	brne	.+28     	; 0xe08 <USB_GetNextDescriptorComp+0x6c>
			{
				*CurrConfigLoc = PrevDescLoc;
     dec:	f8 01       	movw	r30, r16
     dee:	c0 83       	st	Z, r28
     df0:	d1 83       	std	Z+1, r29	; 0x01
				*BytesRem      = PrevBytesRem;
     df2:	f7 01       	movw	r30, r14
     df4:	d1 82       	std	Z+1, r13	; 0x01
     df6:	c0 82       	st	Z, r12
     df8:	07 c0       	rjmp	.+14     	; 0xe08 <USB_GetNextDescriptorComp+0x6c>

uint8_t USB_GetNextDescriptorComp(uint16_t* const BytesRem, void** const CurrConfigLoc, ConfigComparatorPtr_t const ComparatorRoutine)
{
	uint8_t ErrorCode;

	while (*BytesRem)
     dfa:	f7 01       	movw	r30, r14
     dfc:	c0 80       	ld	r12, Z
     dfe:	d1 80       	ldd	r13, Z+1	; 0x01
     e00:	c1 14       	cp	r12, r1
     e02:	d1 04       	cpc	r13, r1
     e04:	c9 f6       	brne	.-78     	; 0xdb8 <USB_GetNextDescriptorComp+0x1c>
     e06:	82 e0       	ldi	r24, 0x02	; 2
			return ErrorCode;
		}
	}

	return DESCRIPTOR_SEARCH_COMP_EndOfDescriptor;
}
     e08:	df 91       	pop	r29
     e0a:	cf 91       	pop	r28
     e0c:	1f 91       	pop	r17
     e0e:	0f 91       	pop	r16
     e10:	ff 90       	pop	r15
     e12:	ef 90       	pop	r14
     e14:	df 90       	pop	r13
     e16:	cf 90       	pop	r12
     e18:	bf 90       	pop	r11
     e1a:	af 90       	pop	r10
     e1c:	08 95       	ret

00000e1e <USB_Host_GetDeviceConfigDescriptor>:
#include "ConfigDescriptor.h"

#if defined(USB_CAN_BE_HOST)
uint8_t USB_Host_GetDeviceConfigDescriptor(uint8_t ConfigNumber, uint16_t* const ConfigSizePtr,
                                           void* BufferPtr, uint16_t BufferSize)
{
     e1e:	cf 92       	push	r12
     e20:	df 92       	push	r13
     e22:	ef 92       	push	r14
     e24:	ff 92       	push	r15
     e26:	0f 93       	push	r16
     e28:	1f 93       	push	r17
     e2a:	df 93       	push	r29
     e2c:	cf 93       	push	r28
     e2e:	cd b7       	in	r28, 0x3d	; 61
     e30:	de b7       	in	r29, 0x3e	; 62
     e32:	29 97       	sbiw	r28, 0x09	; 9
     e34:	0f b6       	in	r0, 0x3f	; 63
     e36:	f8 94       	cli
     e38:	de bf       	out	0x3e, r29	; 62
     e3a:	0f be       	out	0x3f, r0	; 63
     e3c:	cd bf       	out	0x3d, r28	; 61
     e3e:	6b 01       	movw	r12, r22
     e40:	8a 01       	movw	r16, r20
     e42:	79 01       	movw	r14, r18
	uint8_t ErrorCode;
	uint8_t ConfigHeader[sizeof(USB_Descriptor_Configuration_Header_t)];

	USB_ControlRequest = (USB_Request_Header_t)
     e44:	90 e8       	ldi	r25, 0x80	; 128
     e46:	90 93 2c 01 	sts	0x012C, r25
     e4a:	96 e0       	ldi	r25, 0x06	; 6
     e4c:	90 93 2d 01 	sts	0x012D, r25
     e50:	90 e0       	ldi	r25, 0x00	; 0
     e52:	01 97       	sbiw	r24, 0x01	; 1
     e54:	92 60       	ori	r25, 0x02	; 2
     e56:	90 93 2f 01 	sts	0x012F, r25
     e5a:	80 93 2e 01 	sts	0x012E, r24
     e5e:	10 92 31 01 	sts	0x0131, r1
     e62:	10 92 30 01 	sts	0x0130, r1
     e66:	89 e0       	ldi	r24, 0x09	; 9
     e68:	90 e0       	ldi	r25, 0x00	; 0
     e6a:	90 93 33 01 	sts	0x0133, r25
     e6e:	80 93 32 01 	sts	0x0132, r24
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
     e72:	10 92 a7 00 	sts	0x00A7, r1
			.wLength       = sizeof(USB_Descriptor_Configuration_Header_t),
		};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	if ((ErrorCode = USB_Host_SendControlRequest(ConfigHeader)) != HOST_SENDCONTROL_Successful)
     e76:	ce 01       	movw	r24, r28
     e78:	01 96       	adiw	r24, 0x01	; 1
     e7a:	55 d0       	rcall	.+170    	; 0xf26 <USB_Host_SendControlRequest>
     e7c:	28 2f       	mov	r18, r24
     e7e:	88 23       	and	r24, r24
     e80:	c1 f4       	brne	.+48     	; 0xeb2 <USB_Host_GetDeviceConfigDescriptor+0x94>
	  return ErrorCode;

	*ConfigSizePtr = DESCRIPTOR_PCAST(ConfigHeader, USB_Descriptor_Configuration_Header_t)->TotalConfigurationSize;
     e82:	8b 81       	ldd	r24, Y+3	; 0x03
     e84:	9c 81       	ldd	r25, Y+4	; 0x04
     e86:	f6 01       	movw	r30, r12
     e88:	91 83       	std	Z+1, r25	; 0x01
     e8a:	80 83       	st	Z, r24

	if (*ConfigSizePtr > BufferSize)
     e8c:	e8 16       	cp	r14, r24
     e8e:	f9 06       	cpc	r15, r25
     e90:	10 f4       	brcc	.+4      	; 0xe96 <USB_Host_GetDeviceConfigDescriptor+0x78>
     e92:	25 e0       	ldi	r18, 0x05	; 5
     e94:	0e c0       	rjmp	.+28     	; 0xeb2 <USB_Host_GetDeviceConfigDescriptor+0x94>
	  return HOST_GETCONFIG_BuffOverflow;

	USB_ControlRequest.wLength = *ConfigSizePtr;
     e96:	90 93 33 01 	sts	0x0133, r25
     e9a:	80 93 32 01 	sts	0x0132, r24

	if ((ErrorCode = USB_Host_SendControlRequest(BufferPtr)) != HOST_SENDCONTROL_Successful)
     e9e:	c8 01       	movw	r24, r16
     ea0:	42 d0       	rcall	.+132    	; 0xf26 <USB_Host_SendControlRequest>
     ea2:	28 2f       	mov	r18, r24
     ea4:	88 23       	and	r24, r24
     ea6:	29 f4       	brne	.+10     	; 0xeb2 <USB_Host_GetDeviceConfigDescriptor+0x94>
	  return ErrorCode;

	if (DESCRIPTOR_TYPE(BufferPtr) != DTYPE_Configuration)
     ea8:	f8 01       	movw	r30, r16
     eaa:	81 81       	ldd	r24, Z+1	; 0x01
     eac:	82 30       	cpi	r24, 0x02	; 2
     eae:	09 f0       	breq	.+2      	; 0xeb2 <USB_Host_GetDeviceConfigDescriptor+0x94>
     eb0:	26 e0       	ldi	r18, 0x06	; 6
	  return HOST_GETCONFIG_InvalidData;

	return HOST_GETCONFIG_Successful;
}
     eb2:	82 2f       	mov	r24, r18
     eb4:	29 96       	adiw	r28, 0x09	; 9
     eb6:	0f b6       	in	r0, 0x3f	; 63
     eb8:	f8 94       	cli
     eba:	de bf       	out	0x3e, r29	; 62
     ebc:	0f be       	out	0x3f, r0	; 63
     ebe:	cd bf       	out	0x3d, r28	; 61
     ec0:	cf 91       	pop	r28
     ec2:	df 91       	pop	r29
     ec4:	1f 91       	pop	r17
     ec6:	0f 91       	pop	r16
     ec8:	ff 90       	pop	r15
     eca:	ef 90       	pop	r14
     ecc:	df 90       	pop	r13
     ece:	cf 90       	pop	r12
     ed0:	08 95       	ret

00000ed2 <USB_Event_Stub>:
#include "Events.h"

void USB_Event_Stub(void)
{

}
     ed2:	08 95       	ret

00000ed4 <USB_Host_WaitForIOS>:

	return ReturnStatus;
}

static uint8_t USB_Host_WaitForIOS(const uint8_t WaitType)
{
     ed4:	1f 93       	push	r17
     ed6:	cf 93       	push	r28
     ed8:	df 93       	push	r29
     eda:	18 2f       	mov	r17, r24
     edc:	c8 ee       	ldi	r28, 0xE8	; 232
     ede:	d3 e0       	ldi	r29, 0x03	; 3
     ee0:	09 c0       	rjmp	.+18     	; 0xef4 <USB_Host_WaitForIOS+0x20>
	         ((WaitType == USB_HOST_WAITFOR_InReceived) && Pipe_IsINReceived()) ||
	         ((WaitType == USB_HOST_WAITFOR_OutReady)   && Pipe_IsOUTReady())))
	{
		uint8_t ErrorCode;

		if ((ErrorCode = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
     ee2:	81 e0       	ldi	r24, 0x01	; 1
     ee4:	f8 db       	rcall	.-2064   	; 0x6d6 <USB_Host_WaitMS>
     ee6:	88 23       	and	r24, r24
     ee8:	d1 f4       	brne	.+52     	; 0xf1e <USB_Host_WaitForIOS+0x4a>
		  return ErrorCode;

		if (!(TimeoutCounter--))
     eea:	20 97       	sbiw	r28, 0x00	; 0
     eec:	11 f4       	brne	.+4      	; 0xef2 <USB_Host_WaitForIOS+0x1e>
     eee:	84 e0       	ldi	r24, 0x04	; 4
     ef0:	16 c0       	rjmp	.+44     	; 0xf1e <USB_Host_WaitForIOS+0x4a>
     ef2:	21 97       	sbiw	r28, 0x01	; 1
	uint8_t  TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#else
	uint16_t TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#endif

	while (!(((WaitType == USB_HOST_WAITFOR_SetupSent)  && Pipe_IsSETUPSent())  ||
     ef4:	11 23       	and	r17, r17
     ef6:	29 f4       	brne	.+10     	; 0xf02 <USB_Host_WaitForIOS+0x2e>
			 *  \return Boolean true if the current pipe is ready for a SETUP packet, false otherwise.
			 */
			static inline bool Pipe_IsSETUPSent(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsSETUPSent(void)
			{
				return ((UPINTX & (1 << TXSTPI)) ? true : false);
     ef8:	80 91 a6 00 	lds	r24, 0x00A6
     efc:	83 ff       	sbrs	r24, 3
     efe:	f1 cf       	rjmp	.-30     	; 0xee2 <USB_Host_WaitForIOS+0xe>
     f00:	0d c0       	rjmp	.+26     	; 0xf1c <USB_Host_WaitForIOS+0x48>
     f02:	11 30       	cpi	r17, 0x01	; 1
     f04:	29 f4       	brne	.+10     	; 0xf10 <USB_Host_WaitForIOS+0x3c>
			 *  \return Boolean true if the current pipe has received an IN packet, false otherwise.
			 */
			static inline bool Pipe_IsINReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsINReceived(void)
			{
				return ((UPINTX & (1 << RXINI)) ? true : false);
     f06:	80 91 a6 00 	lds	r24, 0x00A6
     f0a:	80 ff       	sbrs	r24, 0
     f0c:	ea cf       	rjmp	.-44     	; 0xee2 <USB_Host_WaitForIOS+0xe>
     f0e:	06 c0       	rjmp	.+12     	; 0xf1c <USB_Host_WaitForIOS+0x48>
     f10:	12 30       	cpi	r17, 0x02	; 2
     f12:	39 f7       	brne	.-50     	; 0xee2 <USB_Host_WaitForIOS+0xe>
			 *  \return Boolean true if the current pipe is ready for an OUT packet, false otherwise.
			 */
			static inline bool Pipe_IsOUTReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsOUTReady(void)
			{
				return ((UPINTX & (1 << TXOUTI)) ? true : false);
     f14:	80 91 a6 00 	lds	r24, 0x00A6
     f18:	82 ff       	sbrs	r24, 2
     f1a:	e3 cf       	rjmp	.-58     	; 0xee2 <USB_Host_WaitForIOS+0xe>
     f1c:	80 e0       	ldi	r24, 0x00	; 0
		if (!(TimeoutCounter--))
		  return HOST_SENDCONTROL_SoftwareTimeOut;
	}

	return HOST_SENDCONTROL_Successful;
}
     f1e:	df 91       	pop	r29
     f20:	cf 91       	pop	r28
     f22:	1f 91       	pop	r17
     f24:	08 95       	ret

00000f26 <USB_Host_SendControlRequest>:

#define  __INCLUDE_FROM_HOSTSTDREQ_C
#include "HostStandardReq.h"

uint8_t USB_Host_SendControlRequest(void* const BufferPtr)
{
     f26:	ff 92       	push	r15
     f28:	0f 93       	push	r16
     f2a:	1f 93       	push	r17
     f2c:	cf 93       	push	r28
     f2e:	df 93       	push	r29
     f30:	18 2f       	mov	r17, r24
     f32:	09 2f       	mov	r16, r25
			 *  \return Boolean true if the bus is currently suspended, false otherwise.
			 */
			static inline bool USB_Host_IsBusSuspended(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusSuspended(void)
			{
				return ((UHCON & (1 << SOFEN)) ? false : true);
     f34:	f0 90 9e 00 	lds	r15, 0x009E
	uint8_t* HeaderStream   = (uint8_t*)&USB_ControlRequest;
	uint8_t* DataStream     = (uint8_t*)BufferPtr;
	bool     BusSuspended   = USB_Host_IsBusSuspended();
	uint8_t  ReturnStatus   = HOST_SENDCONTROL_Successful;
	uint16_t DataLen        = USB_ControlRequest.wLength;
     f38:	c0 91 32 01 	lds	r28, 0x0132
     f3c:	d0 91 33 01 	lds	r29, 0x0133
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
     f40:	80 91 9e 00 	lds	r24, 0x009E
     f44:	81 60       	ori	r24, 0x01	; 1
     f46:	80 93 9e 00 	sts	0x009E, r24

	USB_Host_ResumeBus();

	if ((ReturnStatus = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
     f4a:	81 e0       	ldi	r24, 0x01	; 1
     f4c:	c4 db       	rcall	.-2168   	; 0x6d6 <USB_Host_WaitMS>
     f4e:	98 2f       	mov	r25, r24
     f50:	88 23       	and	r24, r24
     f52:	09 f0       	breq	.+2      	; 0xf56 <USB_Host_SendControlRequest+0x30>
     f54:	d2 c0       	rjmp	.+420    	; 0x10fa <USB_Host_SendControlRequest+0x1d4>
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
     f56:	80 91 aa 00 	lds	r24, 0x00AA
     f5a:	8f 7c       	andi	r24, 0xCF	; 207
     f5c:	80 93 aa 00 	sts	0x00AA, r24
			 *  flag for the pipe.
			 */
			static inline void Pipe_ClearErrorFlags(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearErrorFlags(void)
			{
				UPERRX = 0;
     f60:	10 92 f5 00 	sts	0x00F5, r1

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
     f64:	80 91 a9 00 	lds	r24, 0x00A9
     f68:	8f 7b       	andi	r24, 0xBF	; 191
     f6a:	80 93 a9 00 	sts	0x00A9, r24
     f6e:	ec e2       	ldi	r30, 0x2C	; 44
     f70:	f1 e0       	ldi	r31, 0x01	; 1
	Pipe_ClearErrorFlags();

	Pipe_Unfreeze();

	for (uint8_t HeaderByte = 0; HeaderByte < sizeof(USB_Request_Header_t); HeaderByte++)
	  Pipe_Write_Byte(*(HeaderStream++));
     f72:	81 91       	ld	r24, Z+
			 *  \param[in] Byte  Next byte to write into the the currently selected pipe's FIFO buffer.
			 */
			static inline void Pipe_Write_Byte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Write_Byte(const uint8_t Byte)
			{
				UPDATX = Byte;
     f74:	80 93 af 00 	sts	0x00AF, r24
	Pipe_SetPipeToken(PIPE_TOKEN_SETUP);
	Pipe_ClearErrorFlags();

	Pipe_Unfreeze();

	for (uint8_t HeaderByte = 0; HeaderByte < sizeof(USB_Request_Header_t); HeaderByte++)
     f78:	81 e0       	ldi	r24, 0x01	; 1
     f7a:	e4 33       	cpi	r30, 0x34	; 52
     f7c:	f8 07       	cpc	r31, r24
     f7e:	c9 f7       	brne	.-14     	; 0xf72 <USB_Host_SendControlRequest+0x4c>
			 *  \ingroup Group_PipePacketManagement
			 */
			static inline void Pipe_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearSETUP(void)
			{
				UPINTX &= ~((1 << TXSTPI) | (1 << FIFOCON));
     f80:	80 91 a6 00 	lds	r24, 0x00A6
     f84:	87 77       	andi	r24, 0x77	; 119
     f86:	80 93 a6 00 	sts	0x00A6, r24
	  Pipe_Write_Byte(*(HeaderStream++));

	Pipe_ClearSETUP();

	if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_SetupSent)) != HOST_SENDCONTROL_Successful)
     f8a:	80 e0       	ldi	r24, 0x00	; 0
     f8c:	a3 df       	rcall	.-186    	; 0xed4 <USB_Host_WaitForIOS>
     f8e:	98 2f       	mov	r25, r24
     f90:	88 23       	and	r24, r24
     f92:	09 f0       	breq	.+2      	; 0xf96 <USB_Host_SendControlRequest+0x70>
     f94:	b2 c0       	rjmp	.+356    	; 0x10fa <USB_Host_SendControlRequest+0x1d4>

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
     f96:	80 91 a9 00 	lds	r24, 0x00A9
     f9a:	80 64       	ori	r24, 0x40	; 64
     f9c:	80 93 a9 00 	sts	0x00A9, r24
	  goto End_Of_Control_Send;

	Pipe_Freeze();

	if ((ReturnStatus = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
     fa0:	81 e0       	ldi	r24, 0x01	; 1
     fa2:	99 db       	rcall	.-2254   	; 0x6d6 <USB_Host_WaitMS>
     fa4:	98 2f       	mov	r25, r24
     fa6:	88 23       	and	r24, r24
     fa8:	09 f0       	breq	.+2      	; 0xfac <USB_Host_SendControlRequest+0x86>
     faa:	a7 c0       	rjmp	.+334    	; 0x10fa <USB_Host_SendControlRequest+0x1d4>
#include "HostStandardReq.h"

uint8_t USB_Host_SendControlRequest(void* const BufferPtr)
{
	uint8_t* HeaderStream   = (uint8_t*)&USB_ControlRequest;
	uint8_t* DataStream     = (uint8_t*)BufferPtr;
     fac:	21 2f       	mov	r18, r17
     fae:	30 2f       	mov	r19, r16
     fb0:	c9 01       	movw	r24, r18
     fb2:	8c 01       	movw	r16, r24
	Pipe_Freeze();

	if ((ReturnStatus = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
	  goto End_Of_Control_Send;

	if ((USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_DIRECTION) == REQDIR_DEVICETOHOST)
     fb4:	80 91 2c 01 	lds	r24, 0x012C
     fb8:	87 ff       	sbrs	r24, 7
     fba:	52 c0       	rjmp	.+164    	; 0x1060 <USB_Host_SendControlRequest+0x13a>
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
     fbc:	80 91 aa 00 	lds	r24, 0x00AA
     fc0:	8f 7c       	andi	r24, 0xCF	; 207
     fc2:	80 61       	ori	r24, 0x10	; 16
     fc4:	80 93 aa 00 	sts	0x00AA, r24
	{
		Pipe_SetPipeToken(PIPE_TOKEN_IN);

		if (DataStream != NULL)
     fc8:	01 15       	cp	r16, r1
     fca:	11 05       	cpc	r17, r1
     fcc:	69 f5       	brne	.+90     	; 0x1028 <USB_Host_SendControlRequest+0x102>
     fce:	2e c0       	rjmp	.+92     	; 0x102c <USB_Host_SendControlRequest+0x106>

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
     fd0:	80 91 a9 00 	lds	r24, 0x00A9
     fd4:	8f 7b       	andi	r24, 0xBF	; 191
     fd6:	80 93 a9 00 	sts	0x00A9, r24
		{
			while (DataLen)
			{
				Pipe_Unfreeze();

				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_InReceived)) != HOST_SENDCONTROL_Successful)
     fda:	81 e0       	ldi	r24, 0x01	; 1
     fdc:	7b df       	rcall	.-266    	; 0xed4 <USB_Host_WaitForIOS>
     fde:	98 2f       	mov	r25, r24
     fe0:	88 23       	and	r24, r24
     fe2:	09 f0       	breq	.+2      	; 0xfe6 <USB_Host_SendControlRequest+0xc0>
     fe4:	8a c0       	rjmp	.+276    	; 0x10fa <USB_Host_SendControlRequest+0x1d4>
			 *  \return Total number of bytes in the currently selected Pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
     fe6:	80 91 f6 00 	lds	r24, 0x00F6
     fea:	90 91 f7 00 	lds	r25, 0x00F7
				  goto End_Of_Control_Send;

				if (!(Pipe_BytesInPipe()))
     fee:	89 2b       	or	r24, r25
     ff0:	49 f4       	brne	.+18     	; 0x1004 <USB_Host_SendControlRequest+0xde>
     ff2:	c0 e0       	ldi	r28, 0x00	; 0
     ff4:	d0 e0       	ldi	r29, 0x00	; 0
     ff6:	06 c0       	rjmp	.+12     	; 0x1004 <USB_Host_SendControlRequest+0xde>
			 *  \return Next byte in the currently selected pipe's FIFO buffer.
			 */
			static inline uint8_t Pipe_Read_Byte(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_Read_Byte(void)
			{
				return UPDATX;
     ff8:	80 91 af 00 	lds	r24, 0x00AF
				  DataLen = 0;

				while (Pipe_BytesInPipe() && DataLen)
				{
					*(DataStream++) = Pipe_Read_Byte();
     ffc:	f8 01       	movw	r30, r16
     ffe:	81 93       	st	Z+, r24
    1000:	8f 01       	movw	r16, r30
					DataLen--;
    1002:	21 97       	sbiw	r28, 0x01	; 1
			 *  \return Total number of bytes in the currently selected Pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
    1004:	80 91 f6 00 	lds	r24, 0x00F6
    1008:	90 91 f7 00 	lds	r25, 0x00F7
				  goto End_Of_Control_Send;

				if (!(Pipe_BytesInPipe()))
				  DataLen = 0;

				while (Pipe_BytesInPipe() && DataLen)
    100c:	89 2b       	or	r24, r25
    100e:	11 f0       	breq	.+4      	; 0x1014 <USB_Host_SendControlRequest+0xee>
    1010:	20 97       	sbiw	r28, 0x00	; 0
    1012:	91 f7       	brne	.-28     	; 0xff8 <USB_Host_SendControlRequest+0xd2>

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    1014:	80 91 a9 00 	lds	r24, 0x00A9
    1018:	80 64       	ori	r24, 0x40	; 64
    101a:	80 93 a9 00 	sts	0x00A9, r24
			 *  \ingroup Group_PipePacketManagement
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
    101e:	80 91 a6 00 	lds	r24, 0x00A6
    1022:	8e 77       	andi	r24, 0x7E	; 126
    1024:	80 93 a6 00 	sts	0x00A6, r24
	{
		Pipe_SetPipeToken(PIPE_TOKEN_IN);

		if (DataStream != NULL)
		{
			while (DataLen)
    1028:	20 97       	sbiw	r28, 0x00	; 0
    102a:	91 f6       	brne	.-92     	; 0xfd0 <USB_Host_SendControlRequest+0xaa>
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    102c:	80 91 aa 00 	lds	r24, 0x00AA
    1030:	8f 7c       	andi	r24, 0xCF	; 207
    1032:	80 62       	ori	r24, 0x20	; 32
    1034:	80 93 aa 00 	sts	0x00AA, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    1038:	80 91 a9 00 	lds	r24, 0x00A9
    103c:	8f 7b       	andi	r24, 0xBF	; 191
    103e:	80 93 a9 00 	sts	0x00A9, r24
		}

		Pipe_SetPipeToken(PIPE_TOKEN_OUT);
		Pipe_Unfreeze();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    1042:	82 e0       	ldi	r24, 0x02	; 2
    1044:	47 df       	rcall	.-370    	; 0xed4 <USB_Host_WaitForIOS>
    1046:	98 2f       	mov	r25, r24
    1048:	88 23       	and	r24, r24
    104a:	09 f0       	breq	.+2      	; 0x104e <USB_Host_SendControlRequest+0x128>
    104c:	56 c0       	rjmp	.+172    	; 0x10fa <USB_Host_SendControlRequest+0x1d4>
			 *  \ingroup Group_PipePacketManagement
			 */
			static inline void Pipe_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearOUT(void)
			{
				UPINTX &= ~((1 << TXOUTI) | (1 << FIFOCON));
    104e:	80 91 a6 00 	lds	r24, 0x00A6
    1052:	8b 77       	andi	r24, 0x7B	; 123
    1054:	80 93 a6 00 	sts	0x00A6, r24
		  goto End_Of_Control_Send;

		Pipe_ClearOUT();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    1058:	82 e0       	ldi	r24, 0x02	; 2
    105a:	3c df       	rcall	.-392    	; 0xed4 <USB_Host_WaitForIOS>
    105c:	98 2f       	mov	r25, r24
    105e:	4d c0       	rjmp	.+154    	; 0x10fa <USB_Host_SendControlRequest+0x1d4>
		  goto End_Of_Control_Send;
	}
	else
	{
		if (DataStream != NULL)
    1060:	01 15       	cp	r16, r1
    1062:	11 05       	cpc	r17, r1
    1064:	a9 f1       	breq	.+106    	; 0x10d0 <USB_Host_SendControlRequest+0x1aa>
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    1066:	80 91 aa 00 	lds	r24, 0x00AA
    106a:	8f 7c       	andi	r24, 0xCF	; 207
    106c:	80 62       	ori	r24, 0x20	; 32
    106e:	80 93 aa 00 	sts	0x00AA, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    1072:	80 91 a9 00 	lds	r24, 0x00A9
    1076:	8f 7b       	andi	r24, 0xBF	; 191
    1078:	80 93 a9 00 	sts	0x00A9, r24
    107c:	1d c0       	rjmp	.+58     	; 0x10b8 <USB_Host_SendControlRequest+0x192>
			Pipe_SetPipeToken(PIPE_TOKEN_OUT);
			Pipe_Unfreeze();

			while (DataLen)
			{
				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    107e:	82 e0       	ldi	r24, 0x02	; 2
    1080:	29 df       	rcall	.-430    	; 0xed4 <USB_Host_WaitForIOS>
    1082:	98 2f       	mov	r25, r24
    1084:	88 23       	and	r24, r24
    1086:	c9 f5       	brne	.+114    	; 0x10fa <USB_Host_SendControlRequest+0x1d4>
				  goto End_Of_Control_Send;

				while (DataLen && (Pipe_BytesInPipe() < USB_ControlPipeSize))
    1088:	80 91 18 01 	lds	r24, 0x0118
    108c:	28 2f       	mov	r18, r24
    108e:	30 e0       	ldi	r19, 0x00	; 0
    1090:	07 c0       	rjmp	.+14     	; 0x10a0 <USB_Host_SendControlRequest+0x17a>
				{
					Pipe_Write_Byte(*(DataStream++));
    1092:	f8 01       	movw	r30, r16
    1094:	81 91       	ld	r24, Z+
    1096:	8f 01       	movw	r16, r30
			 *  \param[in] Byte  Next byte to write into the the currently selected pipe's FIFO buffer.
			 */
			static inline void Pipe_Write_Byte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Write_Byte(const uint8_t Byte)
			{
				UPDATX = Byte;
    1098:	80 93 af 00 	sts	0x00AF, r24
					DataLen--;
    109c:	21 97       	sbiw	r28, 0x01	; 1
			while (DataLen)
			{
				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
				  goto End_Of_Control_Send;

				while (DataLen && (Pipe_BytesInPipe() < USB_ControlPipeSize))
    109e:	39 f0       	breq	.+14     	; 0x10ae <USB_Host_SendControlRequest+0x188>
			 *  \return Total number of bytes in the currently selected Pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
    10a0:	80 91 f6 00 	lds	r24, 0x00F6
    10a4:	90 91 f7 00 	lds	r25, 0x00F7
    10a8:	82 17       	cp	r24, r18
    10aa:	93 07       	cpc	r25, r19
    10ac:	90 f3       	brcs	.-28     	; 0x1092 <USB_Host_SendControlRequest+0x16c>
			 *  \ingroup Group_PipePacketManagement
			 */
			static inline void Pipe_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearOUT(void)
			{
				UPINTX &= ~((1 << TXOUTI) | (1 << FIFOCON));
    10ae:	80 91 a6 00 	lds	r24, 0x00A6
    10b2:	8b 77       	andi	r24, 0x7B	; 123
    10b4:	80 93 a6 00 	sts	0x00A6, r24
		if (DataStream != NULL)
		{
			Pipe_SetPipeToken(PIPE_TOKEN_OUT);
			Pipe_Unfreeze();

			while (DataLen)
    10b8:	20 97       	sbiw	r28, 0x00	; 0
    10ba:	09 f7       	brne	.-62     	; 0x107e <USB_Host_SendControlRequest+0x158>
				}

				Pipe_ClearOUT();
			}

			if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    10bc:	82 e0       	ldi	r24, 0x02	; 2
    10be:	0a df       	rcall	.-492    	; 0xed4 <USB_Host_WaitForIOS>
    10c0:	98 2f       	mov	r25, r24
    10c2:	88 23       	and	r24, r24
    10c4:	d1 f4       	brne	.+52     	; 0x10fa <USB_Host_SendControlRequest+0x1d4>

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    10c6:	80 91 a9 00 	lds	r24, 0x00A9
    10ca:	80 64       	ori	r24, 0x40	; 64
    10cc:	80 93 a9 00 	sts	0x00A9, r24
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    10d0:	80 91 aa 00 	lds	r24, 0x00AA
    10d4:	8f 7c       	andi	r24, 0xCF	; 207
    10d6:	80 61       	ori	r24, 0x10	; 16
    10d8:	80 93 aa 00 	sts	0x00AA, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    10dc:	80 91 a9 00 	lds	r24, 0x00A9
    10e0:	8f 7b       	andi	r24, 0xBF	; 191
    10e2:	80 93 a9 00 	sts	0x00A9, r24
		}

		Pipe_SetPipeToken(PIPE_TOKEN_IN);
		Pipe_Unfreeze();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_InReceived)) != HOST_SENDCONTROL_Successful)
    10e6:	81 e0       	ldi	r24, 0x01	; 1
    10e8:	f5 de       	rcall	.-534    	; 0xed4 <USB_Host_WaitForIOS>
    10ea:	98 2f       	mov	r25, r24
    10ec:	88 23       	and	r24, r24
    10ee:	29 f4       	brne	.+10     	; 0x10fa <USB_Host_SendControlRequest+0x1d4>
			 *  \ingroup Group_PipePacketManagement
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
    10f0:	80 91 a6 00 	lds	r24, 0x00A6
    10f4:	8e 77       	andi	r24, 0x7E	; 126
    10f6:	80 93 a6 00 	sts	0x00A6, r24

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    10fa:	80 91 a9 00 	lds	r24, 0x00A9
    10fe:	80 64       	ori	r24, 0x40	; 64
    1100:	80 93 a9 00 	sts	0x00A9, r24
	}

End_Of_Control_Send:
	Pipe_Freeze();

	if (BusSuspended)
    1104:	f0 fc       	sbrc	r15, 0
    1106:	05 c0       	rjmp	.+10     	; 0x1112 <USB_Host_SendControlRequest+0x1ec>
			 *  messages to the device.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				UHCON &= ~(1 << SOFEN);
    1108:	80 91 9e 00 	lds	r24, 0x009E
    110c:	8e 7f       	andi	r24, 0xFE	; 254
    110e:	80 93 9e 00 	sts	0x009E, r24
			 *  \param[in] PipeNumber  Index of the pipe to reset.
			 */
			static inline void Pipe_ResetPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ResetPipe(const uint8_t PipeNumber)
			{
				UPRST = (1 << PipeNumber);
    1112:	81 e0       	ldi	r24, 0x01	; 1
    1114:	80 93 a8 00 	sts	0x00A8, r24
				UPRST = 0;
    1118:	10 92 a8 00 	sts	0x00A8, r1
	  USB_Host_SuspendBus();

	Pipe_ResetPipe(PIPE_CONTROLPIPE);

	return ReturnStatus;
}
    111c:	89 2f       	mov	r24, r25
    111e:	df 91       	pop	r29
    1120:	cf 91       	pop	r28
    1122:	1f 91       	pop	r17
    1124:	0f 91       	pop	r16
    1126:	ff 90       	pop	r15
    1128:	08 95       	ret

0000112a <Pipe_Read_Stream_LE>:
uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE Buffer,
                            uint16_t Length
                            __CALLBACK_PARAM)
{
    112a:	ff 92       	push	r15
    112c:	0f 93       	push	r16
    112e:	1f 93       	push	r17
    1130:	cf 93       	push	r28
    1132:	df 93       	push	r29
    1134:	18 2f       	mov	r17, r24
    1136:	09 2f       	mov	r16, r25
    1138:	eb 01       	movw	r28, r22
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    113a:	80 91 aa 00 	lds	r24, 0x00AA
    113e:	8f 7c       	andi	r24, 0xCF	; 207
    1140:	80 61       	ori	r24, 0x10	; 16
    1142:	80 93 aa 00 	sts	0x00AA, r24
	uint8_t* DataStream = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	uint8_t  ErrorCode;

	Pipe_SetPipeToken(TEMPLATE_TOKEN);

	if ((ErrorCode = Pipe_WaitUntilReady()))
    1146:	ee dc       	rcall	.-1572   	; 0xb24 <Pipe_WaitUntilReady>
    1148:	f8 2e       	mov	r15, r24
    114a:	88 23       	and	r24, r24
    114c:	d1 f4       	brne	.+52     	; 0x1182 <Pipe_Read_Stream_LE+0x58>
uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE Buffer,
                            uint16_t Length
                            __CALLBACK_PARAM)
{
	uint8_t* DataStream = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
    114e:	81 2f       	mov	r24, r17
    1150:	90 2f       	mov	r25, r16
    1152:	9c 01       	movw	r18, r24
    1154:	89 01       	movw	r16, r18
    1156:	13 c0       	rjmp	.+38     	; 0x117e <Pipe_Read_Stream_LE+0x54>
			 *  \return Boolean true if the currently selected pipe may be read from or written to, depending on its direction.
			 */
			static inline bool Pipe_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsReadWriteAllowed(void)
			{
				return ((UPINTX & (1 << RWAL)) ? true : false);
    1158:	80 91 a6 00 	lds	r24, 0x00A6
	}
	#endif

	while (Length)
	{
		if (!(Pipe_IsReadWriteAllowed()))
    115c:	85 fd       	sbrc	r24, 5
    115e:	09 c0       	rjmp	.+18     	; 0x1172 <Pipe_Read_Stream_LE+0x48>
			 *  \ingroup Group_PipePacketManagement
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
    1160:	80 91 a6 00 	lds	r24, 0x00A6
    1164:	8e 77       	andi	r24, 0x7E	; 126
    1166:	80 93 a6 00 	sts	0x00A6, r24
			#if !defined(NO_STREAM_CALLBACKS)
			if ((Callback != NULL) && (Callback() == STREAMCALLBACK_Abort))
			  return PIPE_RWSTREAM_CallbackAborted;
			#endif

			if ((ErrorCode = Pipe_WaitUntilReady()))
    116a:	dc dc       	rcall	.-1608   	; 0xb24 <Pipe_WaitUntilReady>
    116c:	88 23       	and	r24, r24
    116e:	39 f0       	breq	.+14     	; 0x117e <Pipe_Read_Stream_LE+0x54>
    1170:	09 c0       	rjmp	.+18     	; 0x1184 <Pipe_Read_Stream_LE+0x5a>
			 *  \return Next byte in the currently selected pipe's FIFO buffer.
			 */
			static inline uint8_t Pipe_Read_Byte(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_Read_Byte(void)
			{
				return UPDATX;
    1172:	80 91 af 00 	lds	r24, 0x00AF
			  return ErrorCode;
		}
		else
		{
			TEMPLATE_TRANSFER_BYTE(DataStream);
    1176:	f8 01       	movw	r30, r16
    1178:	81 93       	st	Z+, r24
    117a:	8f 01       	movw	r16, r30
			Length--;
    117c:	21 97       	sbiw	r28, 0x01	; 1
				} while (Length >= 8);
		}
	}
	#endif

	while (Length)
    117e:	20 97       	sbiw	r28, 0x00	; 0
    1180:	59 f7       	brne	.-42     	; 0x1158 <Pipe_Read_Stream_LE+0x2e>
    1182:	8f 2d       	mov	r24, r15
			Length--;
		}
	}

	return PIPE_RWSTREAM_NoError;
}
    1184:	df 91       	pop	r29
    1186:	cf 91       	pop	r28
    1188:	1f 91       	pop	r17
    118a:	0f 91       	pop	r16
    118c:	ff 90       	pop	r15
    118e:	08 95       	ret

00001190 <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
    1190:	ff 92       	push	r15
    1192:	0f 93       	push	r16
    1194:	1f 93       	push	r17
			 *  \return Index of the currently selected pipe.
			 */
			static inline uint8_t Pipe_GetCurrentPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetCurrentPipe(void)
			{
				return (UPNUM & PIPE_PIPENUM_MASK);
    1196:	07 ea       	ldi	r16, 0xA7	; 167
    1198:	10 e0       	ldi	r17, 0x00	; 0
    119a:	f8 01       	movw	r30, r16
    119c:	f0 80       	ld	r15, Z
    119e:	f7 e0       	ldi	r31, 0x07	; 7
    11a0:	ff 22       	and	r15, r31
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
    11a2:	f8 01       	movw	r30, r16
    11a4:	10 82       	st	Z, r1
{
	uint8_t PrevPipe = Pipe_GetCurrentPipe();

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	USB_Host_ProcessNextHostState();
    11a6:	46 db       	rcall	.-2420   	; 0x834 <USB_Host_ProcessNextHostState>
    11a8:	f8 01       	movw	r30, r16
    11aa:	f0 82       	st	Z, r15
		if (USB_CurrentMode == USB_MODE_Device)
		  USB_DeviceTask();
		else if (USB_CurrentMode == USB_MODE_Host)
		  USB_HostTask();
	#endif
}
    11ac:	1f 91       	pop	r17
    11ae:	0f 91       	pop	r16
    11b0:	ff 90       	pop	r15
    11b2:	08 95       	ret

000011b4 <SerialStream_TxByte>:

FILE USARTStream = FDEV_SETUP_STREAM(SerialStream_TxByte, SerialStream_RxByte, _FDEV_SETUP_RW);

static int SerialStream_TxByte(char DataByte,
                               FILE *Stream)
{
    11b4:	98 2f       	mov	r25, r24
			 *  \param[in] DataByte  Byte to transmit through the USART.
			 */
			static inline void Serial_TxByte(const char DataByte) ATTR_ALWAYS_INLINE;
			static inline void Serial_TxByte(const char DataByte)
			{
				while (!(UCSR1A & (1 << UDRE1)));
    11b6:	80 91 c8 00 	lds	r24, 0x00C8
    11ba:	85 ff       	sbrs	r24, 5
    11bc:	fc cf       	rjmp	.-8      	; 0x11b6 <SerialStream_TxByte+0x2>
				UDR1 = DataByte;
    11be:	90 93 ce 00 	sts	0x00CE, r25
	(void)Stream;

	Serial_TxByte(DataByte);
	return 0;
}
    11c2:	80 e0       	ldi	r24, 0x00	; 0
    11c4:	90 e0       	ldi	r25, 0x00	; 0
    11c6:	08 95       	ret

000011c8 <SerialStream_RxByte>:
			 *  \return Boolean true if a character has been received, false otherwise.
			 */
			static inline bool Serial_IsCharReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Serial_IsCharReceived(void)
			{
				return ((UCSR1A & (1 << RXC1)) ? true : false);
    11c8:	80 91 c8 00 	lds	r24, 0x00C8

static int SerialStream_RxByte(FILE *Stream)
{
	(void)Stream;

	if (!(Serial_IsCharReceived()))
    11cc:	87 fd       	sbrc	r24, 7
    11ce:	03 c0       	rjmp	.+6      	; 0x11d6 <SerialStream_RxByte+0xe>
    11d0:	2e ef       	ldi	r18, 0xFE	; 254
    11d2:	3f ef       	ldi	r19, 0xFF	; 255
    11d4:	08 c0       	rjmp	.+16     	; 0x11e6 <SerialStream_RxByte+0x1e>
			 *  \return Byte received from the USART.
			 */
			static inline char Serial_RxByte(void) ATTR_ALWAYS_INLINE;
			static inline char Serial_RxByte(void)
			{
				while (!(UCSR1A & (1 << RXC1)));
    11d6:	80 91 c8 00 	lds	r24, 0x00C8
    11da:	87 ff       	sbrs	r24, 7
    11dc:	fc cf       	rjmp	.-8      	; 0x11d6 <SerialStream_RxByte+0xe>
				return UDR1;
    11de:	80 91 ce 00 	lds	r24, 0x00CE
	  return _FDEV_EOF;

	return Serial_RxByte();
    11e2:	28 2f       	mov	r18, r24
    11e4:	30 e0       	ldi	r19, 0x00	; 0
}
    11e6:	c9 01       	movw	r24, r18
    11e8:	08 95       	ret

000011ea <printf_P>:
    11ea:	df 93       	push	r29
    11ec:	cf 93       	push	r28
    11ee:	cd b7       	in	r28, 0x3d	; 61
    11f0:	de b7       	in	r29, 0x3e	; 62
    11f2:	fe 01       	movw	r30, r28
    11f4:	35 96       	adiw	r30, 0x05	; 5
    11f6:	61 91       	ld	r22, Z+
    11f8:	71 91       	ld	r23, Z+
    11fa:	a0 91 37 01 	lds	r26, 0x0137
    11fe:	b0 91 38 01 	lds	r27, 0x0138
    1202:	13 96       	adiw	r26, 0x03	; 3
    1204:	8c 91       	ld	r24, X
    1206:	13 97       	sbiw	r26, 0x03	; 3
    1208:	88 60       	ori	r24, 0x08	; 8
    120a:	13 96       	adiw	r26, 0x03	; 3
    120c:	8c 93       	st	X, r24
    120e:	80 91 37 01 	lds	r24, 0x0137
    1212:	90 91 38 01 	lds	r25, 0x0138
    1216:	af 01       	movw	r20, r30
    1218:	3f d0       	rcall	.+126    	; 0x1298 <vfprintf>
    121a:	e0 91 37 01 	lds	r30, 0x0137
    121e:	f0 91 38 01 	lds	r31, 0x0138
    1222:	23 81       	ldd	r18, Z+3	; 0x03
    1224:	27 7f       	andi	r18, 0xF7	; 247
    1226:	23 83       	std	Z+3, r18	; 0x03
    1228:	cf 91       	pop	r28
    122a:	df 91       	pop	r29
    122c:	08 95       	ret

0000122e <puts_P>:
    122e:	0f 93       	push	r16
    1230:	1f 93       	push	r17
    1232:	cf 93       	push	r28
    1234:	df 93       	push	r29
    1236:	ec 01       	movw	r28, r24
    1238:	e0 91 37 01 	lds	r30, 0x0137
    123c:	f0 91 38 01 	lds	r31, 0x0138
    1240:	83 81       	ldd	r24, Z+3	; 0x03
    1242:	81 ff       	sbrs	r24, 1
    1244:	21 c0       	rjmp	.+66     	; 0x1288 <puts_P+0x5a>
    1246:	00 e0       	ldi	r16, 0x00	; 0
    1248:	10 e0       	ldi	r17, 0x00	; 0
    124a:	0e c0       	rjmp	.+28     	; 0x1268 <puts_P+0x3a>
    124c:	e0 91 37 01 	lds	r30, 0x0137
    1250:	f0 91 38 01 	lds	r31, 0x0138
    1254:	20 85       	ldd	r18, Z+8	; 0x08
    1256:	31 85       	ldd	r19, Z+9	; 0x09
    1258:	bf 01       	movw	r22, r30
    125a:	f9 01       	movw	r30, r18
    125c:	09 95       	icall
    125e:	89 2b       	or	r24, r25
    1260:	11 f0       	breq	.+4      	; 0x1266 <puts_P+0x38>
    1262:	0f ef       	ldi	r16, 0xFF	; 255
    1264:	1f ef       	ldi	r17, 0xFF	; 255
    1266:	21 96       	adiw	r28, 0x01	; 1
    1268:	fe 01       	movw	r30, r28
    126a:	84 91       	lpm	r24, Z+
    126c:	88 23       	and	r24, r24
    126e:	71 f7       	brne	.-36     	; 0x124c <puts_P+0x1e>
    1270:	e0 91 37 01 	lds	r30, 0x0137
    1274:	f0 91 38 01 	lds	r31, 0x0138
    1278:	20 85       	ldd	r18, Z+8	; 0x08
    127a:	31 85       	ldd	r19, Z+9	; 0x09
    127c:	8a e0       	ldi	r24, 0x0A	; 10
    127e:	bf 01       	movw	r22, r30
    1280:	f9 01       	movw	r30, r18
    1282:	09 95       	icall
    1284:	89 2b       	or	r24, r25
    1286:	11 f0       	breq	.+4      	; 0x128c <puts_P+0x5e>
    1288:	0f ef       	ldi	r16, 0xFF	; 255
    128a:	1f ef       	ldi	r17, 0xFF	; 255
    128c:	c8 01       	movw	r24, r16
    128e:	df 91       	pop	r29
    1290:	cf 91       	pop	r28
    1292:	1f 91       	pop	r17
    1294:	0f 91       	pop	r16
    1296:	08 95       	ret

00001298 <vfprintf>:
    1298:	2f 92       	push	r2
    129a:	3f 92       	push	r3
    129c:	4f 92       	push	r4
    129e:	5f 92       	push	r5
    12a0:	6f 92       	push	r6
    12a2:	7f 92       	push	r7
    12a4:	8f 92       	push	r8
    12a6:	9f 92       	push	r9
    12a8:	af 92       	push	r10
    12aa:	bf 92       	push	r11
    12ac:	cf 92       	push	r12
    12ae:	df 92       	push	r13
    12b0:	ef 92       	push	r14
    12b2:	ff 92       	push	r15
    12b4:	0f 93       	push	r16
    12b6:	1f 93       	push	r17
    12b8:	df 93       	push	r29
    12ba:	cf 93       	push	r28
    12bc:	cd b7       	in	r28, 0x3d	; 61
    12be:	de b7       	in	r29, 0x3e	; 62
    12c0:	2b 97       	sbiw	r28, 0x0b	; 11
    12c2:	0f b6       	in	r0, 0x3f	; 63
    12c4:	f8 94       	cli
    12c6:	de bf       	out	0x3e, r29	; 62
    12c8:	0f be       	out	0x3f, r0	; 63
    12ca:	cd bf       	out	0x3d, r28	; 61
    12cc:	3c 01       	movw	r6, r24
    12ce:	2b 01       	movw	r4, r22
    12d0:	5a 01       	movw	r10, r20
    12d2:	fc 01       	movw	r30, r24
    12d4:	17 82       	std	Z+7, r1	; 0x07
    12d6:	16 82       	std	Z+6, r1	; 0x06
    12d8:	83 81       	ldd	r24, Z+3	; 0x03
    12da:	81 fd       	sbrc	r24, 1
    12dc:	03 c0       	rjmp	.+6      	; 0x12e4 <vfprintf+0x4c>
    12de:	6f ef       	ldi	r22, 0xFF	; 255
    12e0:	7f ef       	ldi	r23, 0xFF	; 255
    12e2:	b9 c1       	rjmp	.+882    	; 0x1656 <vfprintf+0x3be>
    12e4:	9a e0       	ldi	r25, 0x0A	; 10
    12e6:	89 2e       	mov	r8, r25
    12e8:	1e 01       	movw	r2, r28
    12ea:	08 94       	sec
    12ec:	21 1c       	adc	r2, r1
    12ee:	31 1c       	adc	r3, r1
    12f0:	f3 01       	movw	r30, r6
    12f2:	23 81       	ldd	r18, Z+3	; 0x03
    12f4:	f2 01       	movw	r30, r4
    12f6:	23 fd       	sbrc	r18, 3
    12f8:	85 91       	lpm	r24, Z+
    12fa:	23 ff       	sbrs	r18, 3
    12fc:	81 91       	ld	r24, Z+
    12fe:	2f 01       	movw	r4, r30
    1300:	88 23       	and	r24, r24
    1302:	09 f4       	brne	.+2      	; 0x1306 <vfprintf+0x6e>
    1304:	a5 c1       	rjmp	.+842    	; 0x1650 <vfprintf+0x3b8>
    1306:	85 32       	cpi	r24, 0x25	; 37
    1308:	39 f4       	brne	.+14     	; 0x1318 <vfprintf+0x80>
    130a:	23 fd       	sbrc	r18, 3
    130c:	85 91       	lpm	r24, Z+
    130e:	23 ff       	sbrs	r18, 3
    1310:	81 91       	ld	r24, Z+
    1312:	2f 01       	movw	r4, r30
    1314:	85 32       	cpi	r24, 0x25	; 37
    1316:	21 f4       	brne	.+8      	; 0x1320 <vfprintf+0x88>
    1318:	90 e0       	ldi	r25, 0x00	; 0
    131a:	b3 01       	movw	r22, r6
    131c:	cc d1       	rcall	.+920    	; 0x16b6 <fputc>
    131e:	e8 cf       	rjmp	.-48     	; 0x12f0 <vfprintf+0x58>
    1320:	98 2f       	mov	r25, r24
    1322:	ff 24       	eor	r15, r15
    1324:	ee 24       	eor	r14, r14
    1326:	99 24       	eor	r9, r9
    1328:	ff e1       	ldi	r31, 0x1F	; 31
    132a:	ff 15       	cp	r31, r15
    132c:	d0 f0       	brcs	.+52     	; 0x1362 <vfprintf+0xca>
    132e:	9b 32       	cpi	r25, 0x2B	; 43
    1330:	69 f0       	breq	.+26     	; 0x134c <vfprintf+0xb4>
    1332:	9c 32       	cpi	r25, 0x2C	; 44
    1334:	28 f4       	brcc	.+10     	; 0x1340 <vfprintf+0xa8>
    1336:	90 32       	cpi	r25, 0x20	; 32
    1338:	59 f0       	breq	.+22     	; 0x1350 <vfprintf+0xb8>
    133a:	93 32       	cpi	r25, 0x23	; 35
    133c:	91 f4       	brne	.+36     	; 0x1362 <vfprintf+0xca>
    133e:	0e c0       	rjmp	.+28     	; 0x135c <vfprintf+0xc4>
    1340:	9d 32       	cpi	r25, 0x2D	; 45
    1342:	49 f0       	breq	.+18     	; 0x1356 <vfprintf+0xbe>
    1344:	90 33       	cpi	r25, 0x30	; 48
    1346:	69 f4       	brne	.+26     	; 0x1362 <vfprintf+0xca>
    1348:	41 e0       	ldi	r20, 0x01	; 1
    134a:	24 c0       	rjmp	.+72     	; 0x1394 <vfprintf+0xfc>
    134c:	52 e0       	ldi	r21, 0x02	; 2
    134e:	f5 2a       	or	r15, r21
    1350:	84 e0       	ldi	r24, 0x04	; 4
    1352:	f8 2a       	or	r15, r24
    1354:	28 c0       	rjmp	.+80     	; 0x13a6 <vfprintf+0x10e>
    1356:	98 e0       	ldi	r25, 0x08	; 8
    1358:	f9 2a       	or	r15, r25
    135a:	25 c0       	rjmp	.+74     	; 0x13a6 <vfprintf+0x10e>
    135c:	e0 e1       	ldi	r30, 0x10	; 16
    135e:	fe 2a       	or	r15, r30
    1360:	22 c0       	rjmp	.+68     	; 0x13a6 <vfprintf+0x10e>
    1362:	f7 fc       	sbrc	r15, 7
    1364:	29 c0       	rjmp	.+82     	; 0x13b8 <vfprintf+0x120>
    1366:	89 2f       	mov	r24, r25
    1368:	80 53       	subi	r24, 0x30	; 48
    136a:	8a 30       	cpi	r24, 0x0A	; 10
    136c:	70 f4       	brcc	.+28     	; 0x138a <vfprintf+0xf2>
    136e:	f6 fe       	sbrs	r15, 6
    1370:	05 c0       	rjmp	.+10     	; 0x137c <vfprintf+0xe4>
    1372:	98 9c       	mul	r9, r8
    1374:	90 2c       	mov	r9, r0
    1376:	11 24       	eor	r1, r1
    1378:	98 0e       	add	r9, r24
    137a:	15 c0       	rjmp	.+42     	; 0x13a6 <vfprintf+0x10e>
    137c:	e8 9c       	mul	r14, r8
    137e:	e0 2c       	mov	r14, r0
    1380:	11 24       	eor	r1, r1
    1382:	e8 0e       	add	r14, r24
    1384:	f0 e2       	ldi	r31, 0x20	; 32
    1386:	ff 2a       	or	r15, r31
    1388:	0e c0       	rjmp	.+28     	; 0x13a6 <vfprintf+0x10e>
    138a:	9e 32       	cpi	r25, 0x2E	; 46
    138c:	29 f4       	brne	.+10     	; 0x1398 <vfprintf+0x100>
    138e:	f6 fc       	sbrc	r15, 6
    1390:	5f c1       	rjmp	.+702    	; 0x1650 <vfprintf+0x3b8>
    1392:	40 e4       	ldi	r20, 0x40	; 64
    1394:	f4 2a       	or	r15, r20
    1396:	07 c0       	rjmp	.+14     	; 0x13a6 <vfprintf+0x10e>
    1398:	9c 36       	cpi	r25, 0x6C	; 108
    139a:	19 f4       	brne	.+6      	; 0x13a2 <vfprintf+0x10a>
    139c:	50 e8       	ldi	r21, 0x80	; 128
    139e:	f5 2a       	or	r15, r21
    13a0:	02 c0       	rjmp	.+4      	; 0x13a6 <vfprintf+0x10e>
    13a2:	98 36       	cpi	r25, 0x68	; 104
    13a4:	49 f4       	brne	.+18     	; 0x13b8 <vfprintf+0x120>
    13a6:	f2 01       	movw	r30, r4
    13a8:	23 fd       	sbrc	r18, 3
    13aa:	95 91       	lpm	r25, Z+
    13ac:	23 ff       	sbrs	r18, 3
    13ae:	91 91       	ld	r25, Z+
    13b0:	2f 01       	movw	r4, r30
    13b2:	99 23       	and	r25, r25
    13b4:	09 f0       	breq	.+2      	; 0x13b8 <vfprintf+0x120>
    13b6:	b8 cf       	rjmp	.-144    	; 0x1328 <vfprintf+0x90>
    13b8:	89 2f       	mov	r24, r25
    13ba:	85 54       	subi	r24, 0x45	; 69
    13bc:	83 30       	cpi	r24, 0x03	; 3
    13be:	18 f0       	brcs	.+6      	; 0x13c6 <vfprintf+0x12e>
    13c0:	80 52       	subi	r24, 0x20	; 32
    13c2:	83 30       	cpi	r24, 0x03	; 3
    13c4:	38 f4       	brcc	.+14     	; 0x13d4 <vfprintf+0x13c>
    13c6:	44 e0       	ldi	r20, 0x04	; 4
    13c8:	50 e0       	ldi	r21, 0x00	; 0
    13ca:	a4 0e       	add	r10, r20
    13cc:	b5 1e       	adc	r11, r21
    13ce:	5f e3       	ldi	r21, 0x3F	; 63
    13d0:	59 83       	std	Y+1, r21	; 0x01
    13d2:	0f c0       	rjmp	.+30     	; 0x13f2 <vfprintf+0x15a>
    13d4:	93 36       	cpi	r25, 0x63	; 99
    13d6:	31 f0       	breq	.+12     	; 0x13e4 <vfprintf+0x14c>
    13d8:	93 37       	cpi	r25, 0x73	; 115
    13da:	79 f0       	breq	.+30     	; 0x13fa <vfprintf+0x162>
    13dc:	93 35       	cpi	r25, 0x53	; 83
    13de:	09 f0       	breq	.+2      	; 0x13e2 <vfprintf+0x14a>
    13e0:	52 c0       	rjmp	.+164    	; 0x1486 <vfprintf+0x1ee>
    13e2:	1f c0       	rjmp	.+62     	; 0x1422 <vfprintf+0x18a>
    13e4:	f5 01       	movw	r30, r10
    13e6:	80 81       	ld	r24, Z
    13e8:	89 83       	std	Y+1, r24	; 0x01
    13ea:	42 e0       	ldi	r20, 0x02	; 2
    13ec:	50 e0       	ldi	r21, 0x00	; 0
    13ee:	a4 0e       	add	r10, r20
    13f0:	b5 1e       	adc	r11, r21
    13f2:	61 01       	movw	r12, r2
    13f4:	01 e0       	ldi	r16, 0x01	; 1
    13f6:	10 e0       	ldi	r17, 0x00	; 0
    13f8:	11 c0       	rjmp	.+34     	; 0x141c <vfprintf+0x184>
    13fa:	f5 01       	movw	r30, r10
    13fc:	c0 80       	ld	r12, Z
    13fe:	d1 80       	ldd	r13, Z+1	; 0x01
    1400:	f6 fc       	sbrc	r15, 6
    1402:	03 c0       	rjmp	.+6      	; 0x140a <vfprintf+0x172>
    1404:	6f ef       	ldi	r22, 0xFF	; 255
    1406:	7f ef       	ldi	r23, 0xFF	; 255
    1408:	02 c0       	rjmp	.+4      	; 0x140e <vfprintf+0x176>
    140a:	69 2d       	mov	r22, r9
    140c:	70 e0       	ldi	r23, 0x00	; 0
    140e:	42 e0       	ldi	r20, 0x02	; 2
    1410:	50 e0       	ldi	r21, 0x00	; 0
    1412:	a4 0e       	add	r10, r20
    1414:	b5 1e       	adc	r11, r21
    1416:	c6 01       	movw	r24, r12
    1418:	43 d1       	rcall	.+646    	; 0x16a0 <strnlen>
    141a:	8c 01       	movw	r16, r24
    141c:	5f e7       	ldi	r21, 0x7F	; 127
    141e:	f5 22       	and	r15, r21
    1420:	13 c0       	rjmp	.+38     	; 0x1448 <vfprintf+0x1b0>
    1422:	f5 01       	movw	r30, r10
    1424:	c0 80       	ld	r12, Z
    1426:	d1 80       	ldd	r13, Z+1	; 0x01
    1428:	f6 fc       	sbrc	r15, 6
    142a:	03 c0       	rjmp	.+6      	; 0x1432 <vfprintf+0x19a>
    142c:	6f ef       	ldi	r22, 0xFF	; 255
    142e:	7f ef       	ldi	r23, 0xFF	; 255
    1430:	02 c0       	rjmp	.+4      	; 0x1436 <vfprintf+0x19e>
    1432:	69 2d       	mov	r22, r9
    1434:	70 e0       	ldi	r23, 0x00	; 0
    1436:	42 e0       	ldi	r20, 0x02	; 2
    1438:	50 e0       	ldi	r21, 0x00	; 0
    143a:	a4 0e       	add	r10, r20
    143c:	b5 1e       	adc	r11, r21
    143e:	c6 01       	movw	r24, r12
    1440:	24 d1       	rcall	.+584    	; 0x168a <strnlen_P>
    1442:	8c 01       	movw	r16, r24
    1444:	50 e8       	ldi	r21, 0x80	; 128
    1446:	f5 2a       	or	r15, r21
    1448:	f3 fe       	sbrs	r15, 3
    144a:	06 c0       	rjmp	.+12     	; 0x1458 <vfprintf+0x1c0>
    144c:	18 c0       	rjmp	.+48     	; 0x147e <vfprintf+0x1e6>
    144e:	80 e2       	ldi	r24, 0x20	; 32
    1450:	90 e0       	ldi	r25, 0x00	; 0
    1452:	b3 01       	movw	r22, r6
    1454:	30 d1       	rcall	.+608    	; 0x16b6 <fputc>
    1456:	ea 94       	dec	r14
    1458:	8e 2d       	mov	r24, r14
    145a:	90 e0       	ldi	r25, 0x00	; 0
    145c:	08 17       	cp	r16, r24
    145e:	19 07       	cpc	r17, r25
    1460:	b0 f3       	brcs	.-20     	; 0x144e <vfprintf+0x1b6>
    1462:	0d c0       	rjmp	.+26     	; 0x147e <vfprintf+0x1e6>
    1464:	f6 01       	movw	r30, r12
    1466:	f7 fc       	sbrc	r15, 7
    1468:	85 91       	lpm	r24, Z+
    146a:	f7 fe       	sbrs	r15, 7
    146c:	81 91       	ld	r24, Z+
    146e:	6f 01       	movw	r12, r30
    1470:	90 e0       	ldi	r25, 0x00	; 0
    1472:	b3 01       	movw	r22, r6
    1474:	20 d1       	rcall	.+576    	; 0x16b6 <fputc>
    1476:	e1 10       	cpse	r14, r1
    1478:	ea 94       	dec	r14
    147a:	01 50       	subi	r16, 0x01	; 1
    147c:	10 40       	sbci	r17, 0x00	; 0
    147e:	01 15       	cp	r16, r1
    1480:	11 05       	cpc	r17, r1
    1482:	81 f7       	brne	.-32     	; 0x1464 <vfprintf+0x1cc>
    1484:	e2 c0       	rjmp	.+452    	; 0x164a <vfprintf+0x3b2>
    1486:	94 36       	cpi	r25, 0x64	; 100
    1488:	11 f0       	breq	.+4      	; 0x148e <vfprintf+0x1f6>
    148a:	99 36       	cpi	r25, 0x69	; 105
    148c:	61 f5       	brne	.+88     	; 0x14e6 <vfprintf+0x24e>
    148e:	f7 fe       	sbrs	r15, 7
    1490:	08 c0       	rjmp	.+16     	; 0x14a2 <vfprintf+0x20a>
    1492:	f5 01       	movw	r30, r10
    1494:	20 81       	ld	r18, Z
    1496:	31 81       	ldd	r19, Z+1	; 0x01
    1498:	42 81       	ldd	r20, Z+2	; 0x02
    149a:	53 81       	ldd	r21, Z+3	; 0x03
    149c:	84 e0       	ldi	r24, 0x04	; 4
    149e:	90 e0       	ldi	r25, 0x00	; 0
    14a0:	0a c0       	rjmp	.+20     	; 0x14b6 <vfprintf+0x21e>
    14a2:	f5 01       	movw	r30, r10
    14a4:	80 81       	ld	r24, Z
    14a6:	91 81       	ldd	r25, Z+1	; 0x01
    14a8:	9c 01       	movw	r18, r24
    14aa:	44 27       	eor	r20, r20
    14ac:	37 fd       	sbrc	r19, 7
    14ae:	40 95       	com	r20
    14b0:	54 2f       	mov	r21, r20
    14b2:	82 e0       	ldi	r24, 0x02	; 2
    14b4:	90 e0       	ldi	r25, 0x00	; 0
    14b6:	a8 0e       	add	r10, r24
    14b8:	b9 1e       	adc	r11, r25
    14ba:	9f e6       	ldi	r25, 0x6F	; 111
    14bc:	f9 22       	and	r15, r25
    14be:	57 ff       	sbrs	r21, 7
    14c0:	09 c0       	rjmp	.+18     	; 0x14d4 <vfprintf+0x23c>
    14c2:	50 95       	com	r21
    14c4:	40 95       	com	r20
    14c6:	30 95       	com	r19
    14c8:	21 95       	neg	r18
    14ca:	3f 4f       	sbci	r19, 0xFF	; 255
    14cc:	4f 4f       	sbci	r20, 0xFF	; 255
    14ce:	5f 4f       	sbci	r21, 0xFF	; 255
    14d0:	e0 e8       	ldi	r30, 0x80	; 128
    14d2:	fe 2a       	or	r15, r30
    14d4:	ca 01       	movw	r24, r20
    14d6:	b9 01       	movw	r22, r18
    14d8:	a1 01       	movw	r20, r2
    14da:	2a e0       	ldi	r18, 0x0A	; 10
    14dc:	30 e0       	ldi	r19, 0x00	; 0
    14de:	17 d1       	rcall	.+558    	; 0x170e <__ultoa_invert>
    14e0:	d8 2e       	mov	r13, r24
    14e2:	d2 18       	sub	r13, r2
    14e4:	3f c0       	rjmp	.+126    	; 0x1564 <vfprintf+0x2cc>
    14e6:	95 37       	cpi	r25, 0x75	; 117
    14e8:	29 f4       	brne	.+10     	; 0x14f4 <vfprintf+0x25c>
    14ea:	1f 2d       	mov	r17, r15
    14ec:	1f 7e       	andi	r17, 0xEF	; 239
    14ee:	2a e0       	ldi	r18, 0x0A	; 10
    14f0:	30 e0       	ldi	r19, 0x00	; 0
    14f2:	1d c0       	rjmp	.+58     	; 0x152e <vfprintf+0x296>
    14f4:	1f 2d       	mov	r17, r15
    14f6:	19 7f       	andi	r17, 0xF9	; 249
    14f8:	9f 36       	cpi	r25, 0x6F	; 111
    14fa:	61 f0       	breq	.+24     	; 0x1514 <vfprintf+0x27c>
    14fc:	90 37       	cpi	r25, 0x70	; 112
    14fe:	20 f4       	brcc	.+8      	; 0x1508 <vfprintf+0x270>
    1500:	98 35       	cpi	r25, 0x58	; 88
    1502:	09 f0       	breq	.+2      	; 0x1506 <vfprintf+0x26e>
    1504:	a5 c0       	rjmp	.+330    	; 0x1650 <vfprintf+0x3b8>
    1506:	0f c0       	rjmp	.+30     	; 0x1526 <vfprintf+0x28e>
    1508:	90 37       	cpi	r25, 0x70	; 112
    150a:	39 f0       	breq	.+14     	; 0x151a <vfprintf+0x282>
    150c:	98 37       	cpi	r25, 0x78	; 120
    150e:	09 f0       	breq	.+2      	; 0x1512 <vfprintf+0x27a>
    1510:	9f c0       	rjmp	.+318    	; 0x1650 <vfprintf+0x3b8>
    1512:	04 c0       	rjmp	.+8      	; 0x151c <vfprintf+0x284>
    1514:	28 e0       	ldi	r18, 0x08	; 8
    1516:	30 e0       	ldi	r19, 0x00	; 0
    1518:	0a c0       	rjmp	.+20     	; 0x152e <vfprintf+0x296>
    151a:	10 61       	ori	r17, 0x10	; 16
    151c:	14 fd       	sbrc	r17, 4
    151e:	14 60       	ori	r17, 0x04	; 4
    1520:	20 e1       	ldi	r18, 0x10	; 16
    1522:	30 e0       	ldi	r19, 0x00	; 0
    1524:	04 c0       	rjmp	.+8      	; 0x152e <vfprintf+0x296>
    1526:	14 fd       	sbrc	r17, 4
    1528:	16 60       	ori	r17, 0x06	; 6
    152a:	20 e1       	ldi	r18, 0x10	; 16
    152c:	32 e0       	ldi	r19, 0x02	; 2
    152e:	17 ff       	sbrs	r17, 7
    1530:	08 c0       	rjmp	.+16     	; 0x1542 <vfprintf+0x2aa>
    1532:	f5 01       	movw	r30, r10
    1534:	60 81       	ld	r22, Z
    1536:	71 81       	ldd	r23, Z+1	; 0x01
    1538:	82 81       	ldd	r24, Z+2	; 0x02
    153a:	93 81       	ldd	r25, Z+3	; 0x03
    153c:	44 e0       	ldi	r20, 0x04	; 4
    153e:	50 e0       	ldi	r21, 0x00	; 0
    1540:	08 c0       	rjmp	.+16     	; 0x1552 <vfprintf+0x2ba>
    1542:	f5 01       	movw	r30, r10
    1544:	80 81       	ld	r24, Z
    1546:	91 81       	ldd	r25, Z+1	; 0x01
    1548:	bc 01       	movw	r22, r24
    154a:	80 e0       	ldi	r24, 0x00	; 0
    154c:	90 e0       	ldi	r25, 0x00	; 0
    154e:	42 e0       	ldi	r20, 0x02	; 2
    1550:	50 e0       	ldi	r21, 0x00	; 0
    1552:	a4 0e       	add	r10, r20
    1554:	b5 1e       	adc	r11, r21
    1556:	a1 01       	movw	r20, r2
    1558:	da d0       	rcall	.+436    	; 0x170e <__ultoa_invert>
    155a:	d8 2e       	mov	r13, r24
    155c:	d2 18       	sub	r13, r2
    155e:	8f e7       	ldi	r24, 0x7F	; 127
    1560:	f8 2e       	mov	r15, r24
    1562:	f1 22       	and	r15, r17
    1564:	f6 fe       	sbrs	r15, 6
    1566:	0b c0       	rjmp	.+22     	; 0x157e <vfprintf+0x2e6>
    1568:	5e ef       	ldi	r21, 0xFE	; 254
    156a:	f5 22       	and	r15, r21
    156c:	d9 14       	cp	r13, r9
    156e:	38 f4       	brcc	.+14     	; 0x157e <vfprintf+0x2e6>
    1570:	f4 fe       	sbrs	r15, 4
    1572:	07 c0       	rjmp	.+14     	; 0x1582 <vfprintf+0x2ea>
    1574:	f2 fc       	sbrc	r15, 2
    1576:	05 c0       	rjmp	.+10     	; 0x1582 <vfprintf+0x2ea>
    1578:	8f ee       	ldi	r24, 0xEF	; 239
    157a:	f8 22       	and	r15, r24
    157c:	02 c0       	rjmp	.+4      	; 0x1582 <vfprintf+0x2ea>
    157e:	1d 2d       	mov	r17, r13
    1580:	01 c0       	rjmp	.+2      	; 0x1584 <vfprintf+0x2ec>
    1582:	19 2d       	mov	r17, r9
    1584:	f4 fe       	sbrs	r15, 4
    1586:	0d c0       	rjmp	.+26     	; 0x15a2 <vfprintf+0x30a>
    1588:	fe 01       	movw	r30, r28
    158a:	ed 0d       	add	r30, r13
    158c:	f1 1d       	adc	r31, r1
    158e:	80 81       	ld	r24, Z
    1590:	80 33       	cpi	r24, 0x30	; 48
    1592:	19 f4       	brne	.+6      	; 0x159a <vfprintf+0x302>
    1594:	99 ee       	ldi	r25, 0xE9	; 233
    1596:	f9 22       	and	r15, r25
    1598:	08 c0       	rjmp	.+16     	; 0x15aa <vfprintf+0x312>
    159a:	1f 5f       	subi	r17, 0xFF	; 255
    159c:	f2 fe       	sbrs	r15, 2
    159e:	05 c0       	rjmp	.+10     	; 0x15aa <vfprintf+0x312>
    15a0:	03 c0       	rjmp	.+6      	; 0x15a8 <vfprintf+0x310>
    15a2:	8f 2d       	mov	r24, r15
    15a4:	86 78       	andi	r24, 0x86	; 134
    15a6:	09 f0       	breq	.+2      	; 0x15aa <vfprintf+0x312>
    15a8:	1f 5f       	subi	r17, 0xFF	; 255
    15aa:	0f 2d       	mov	r16, r15
    15ac:	f3 fc       	sbrc	r15, 3
    15ae:	13 c0       	rjmp	.+38     	; 0x15d6 <vfprintf+0x33e>
    15b0:	f0 fe       	sbrs	r15, 0
    15b2:	0e c0       	rjmp	.+28     	; 0x15d0 <vfprintf+0x338>
    15b4:	1e 15       	cp	r17, r14
    15b6:	10 f0       	brcs	.+4      	; 0x15bc <vfprintf+0x324>
    15b8:	9d 2c       	mov	r9, r13
    15ba:	0a c0       	rjmp	.+20     	; 0x15d0 <vfprintf+0x338>
    15bc:	9d 2c       	mov	r9, r13
    15be:	9e 0c       	add	r9, r14
    15c0:	91 1a       	sub	r9, r17
    15c2:	1e 2d       	mov	r17, r14
    15c4:	05 c0       	rjmp	.+10     	; 0x15d0 <vfprintf+0x338>
    15c6:	80 e2       	ldi	r24, 0x20	; 32
    15c8:	90 e0       	ldi	r25, 0x00	; 0
    15ca:	b3 01       	movw	r22, r6
    15cc:	74 d0       	rcall	.+232    	; 0x16b6 <fputc>
    15ce:	1f 5f       	subi	r17, 0xFF	; 255
    15d0:	1e 15       	cp	r17, r14
    15d2:	c8 f3       	brcs	.-14     	; 0x15c6 <vfprintf+0x32e>
    15d4:	04 c0       	rjmp	.+8      	; 0x15de <vfprintf+0x346>
    15d6:	1e 15       	cp	r17, r14
    15d8:	10 f4       	brcc	.+4      	; 0x15de <vfprintf+0x346>
    15da:	e1 1a       	sub	r14, r17
    15dc:	01 c0       	rjmp	.+2      	; 0x15e0 <vfprintf+0x348>
    15de:	ee 24       	eor	r14, r14
    15e0:	04 ff       	sbrs	r16, 4
    15e2:	0e c0       	rjmp	.+28     	; 0x1600 <vfprintf+0x368>
    15e4:	80 e3       	ldi	r24, 0x30	; 48
    15e6:	90 e0       	ldi	r25, 0x00	; 0
    15e8:	b3 01       	movw	r22, r6
    15ea:	65 d0       	rcall	.+202    	; 0x16b6 <fputc>
    15ec:	02 ff       	sbrs	r16, 2
    15ee:	1b c0       	rjmp	.+54     	; 0x1626 <vfprintf+0x38e>
    15f0:	01 fd       	sbrc	r16, 1
    15f2:	03 c0       	rjmp	.+6      	; 0x15fa <vfprintf+0x362>
    15f4:	88 e7       	ldi	r24, 0x78	; 120
    15f6:	90 e0       	ldi	r25, 0x00	; 0
    15f8:	0e c0       	rjmp	.+28     	; 0x1616 <vfprintf+0x37e>
    15fa:	88 e5       	ldi	r24, 0x58	; 88
    15fc:	90 e0       	ldi	r25, 0x00	; 0
    15fe:	0b c0       	rjmp	.+22     	; 0x1616 <vfprintf+0x37e>
    1600:	80 2f       	mov	r24, r16
    1602:	86 78       	andi	r24, 0x86	; 134
    1604:	81 f0       	breq	.+32     	; 0x1626 <vfprintf+0x38e>
    1606:	01 ff       	sbrs	r16, 1
    1608:	02 c0       	rjmp	.+4      	; 0x160e <vfprintf+0x376>
    160a:	8b e2       	ldi	r24, 0x2B	; 43
    160c:	01 c0       	rjmp	.+2      	; 0x1610 <vfprintf+0x378>
    160e:	80 e2       	ldi	r24, 0x20	; 32
    1610:	f7 fc       	sbrc	r15, 7
    1612:	8d e2       	ldi	r24, 0x2D	; 45
    1614:	90 e0       	ldi	r25, 0x00	; 0
    1616:	b3 01       	movw	r22, r6
    1618:	4e d0       	rcall	.+156    	; 0x16b6 <fputc>
    161a:	05 c0       	rjmp	.+10     	; 0x1626 <vfprintf+0x38e>
    161c:	80 e3       	ldi	r24, 0x30	; 48
    161e:	90 e0       	ldi	r25, 0x00	; 0
    1620:	b3 01       	movw	r22, r6
    1622:	49 d0       	rcall	.+146    	; 0x16b6 <fputc>
    1624:	9a 94       	dec	r9
    1626:	d9 14       	cp	r13, r9
    1628:	c8 f3       	brcs	.-14     	; 0x161c <vfprintf+0x384>
    162a:	da 94       	dec	r13
    162c:	f1 01       	movw	r30, r2
    162e:	ed 0d       	add	r30, r13
    1630:	f1 1d       	adc	r31, r1
    1632:	80 81       	ld	r24, Z
    1634:	90 e0       	ldi	r25, 0x00	; 0
    1636:	b3 01       	movw	r22, r6
    1638:	3e d0       	rcall	.+124    	; 0x16b6 <fputc>
    163a:	dd 20       	and	r13, r13
    163c:	b1 f7       	brne	.-20     	; 0x162a <vfprintf+0x392>
    163e:	05 c0       	rjmp	.+10     	; 0x164a <vfprintf+0x3b2>
    1640:	80 e2       	ldi	r24, 0x20	; 32
    1642:	90 e0       	ldi	r25, 0x00	; 0
    1644:	b3 01       	movw	r22, r6
    1646:	37 d0       	rcall	.+110    	; 0x16b6 <fputc>
    1648:	ea 94       	dec	r14
    164a:	ee 20       	and	r14, r14
    164c:	c9 f7       	brne	.-14     	; 0x1640 <vfprintf+0x3a8>
    164e:	50 ce       	rjmp	.-864    	; 0x12f0 <vfprintf+0x58>
    1650:	f3 01       	movw	r30, r6
    1652:	66 81       	ldd	r22, Z+6	; 0x06
    1654:	77 81       	ldd	r23, Z+7	; 0x07
    1656:	cb 01       	movw	r24, r22
    1658:	2b 96       	adiw	r28, 0x0b	; 11
    165a:	0f b6       	in	r0, 0x3f	; 63
    165c:	f8 94       	cli
    165e:	de bf       	out	0x3e, r29	; 62
    1660:	0f be       	out	0x3f, r0	; 63
    1662:	cd bf       	out	0x3d, r28	; 61
    1664:	cf 91       	pop	r28
    1666:	df 91       	pop	r29
    1668:	1f 91       	pop	r17
    166a:	0f 91       	pop	r16
    166c:	ff 90       	pop	r15
    166e:	ef 90       	pop	r14
    1670:	df 90       	pop	r13
    1672:	cf 90       	pop	r12
    1674:	bf 90       	pop	r11
    1676:	af 90       	pop	r10
    1678:	9f 90       	pop	r9
    167a:	8f 90       	pop	r8
    167c:	7f 90       	pop	r7
    167e:	6f 90       	pop	r6
    1680:	5f 90       	pop	r5
    1682:	4f 90       	pop	r4
    1684:	3f 90       	pop	r3
    1686:	2f 90       	pop	r2
    1688:	08 95       	ret

0000168a <strnlen_P>:
    168a:	fc 01       	movw	r30, r24
    168c:	05 90       	lpm	r0, Z+
    168e:	61 50       	subi	r22, 0x01	; 1
    1690:	70 40       	sbci	r23, 0x00	; 0
    1692:	01 10       	cpse	r0, r1
    1694:	d8 f7       	brcc	.-10     	; 0x168c <strnlen_P+0x2>
    1696:	80 95       	com	r24
    1698:	90 95       	com	r25
    169a:	8e 0f       	add	r24, r30
    169c:	9f 1f       	adc	r25, r31
    169e:	08 95       	ret

000016a0 <strnlen>:
    16a0:	fc 01       	movw	r30, r24
    16a2:	61 50       	subi	r22, 0x01	; 1
    16a4:	70 40       	sbci	r23, 0x00	; 0
    16a6:	01 90       	ld	r0, Z+
    16a8:	01 10       	cpse	r0, r1
    16aa:	d8 f7       	brcc	.-10     	; 0x16a2 <strnlen+0x2>
    16ac:	80 95       	com	r24
    16ae:	90 95       	com	r25
    16b0:	8e 0f       	add	r24, r30
    16b2:	9f 1f       	adc	r25, r31
    16b4:	08 95       	ret

000016b6 <fputc>:
    16b6:	0f 93       	push	r16
    16b8:	1f 93       	push	r17
    16ba:	cf 93       	push	r28
    16bc:	df 93       	push	r29
    16be:	8c 01       	movw	r16, r24
    16c0:	eb 01       	movw	r28, r22
    16c2:	8b 81       	ldd	r24, Y+3	; 0x03
    16c4:	81 ff       	sbrs	r24, 1
    16c6:	1b c0       	rjmp	.+54     	; 0x16fe <fputc+0x48>
    16c8:	82 ff       	sbrs	r24, 2
    16ca:	0d c0       	rjmp	.+26     	; 0x16e6 <fputc+0x30>
    16cc:	2e 81       	ldd	r18, Y+6	; 0x06
    16ce:	3f 81       	ldd	r19, Y+7	; 0x07
    16d0:	8c 81       	ldd	r24, Y+4	; 0x04
    16d2:	9d 81       	ldd	r25, Y+5	; 0x05
    16d4:	28 17       	cp	r18, r24
    16d6:	39 07       	cpc	r19, r25
    16d8:	64 f4       	brge	.+24     	; 0x16f2 <fputc+0x3c>
    16da:	e8 81       	ld	r30, Y
    16dc:	f9 81       	ldd	r31, Y+1	; 0x01
    16de:	01 93       	st	Z+, r16
    16e0:	f9 83       	std	Y+1, r31	; 0x01
    16e2:	e8 83       	st	Y, r30
    16e4:	06 c0       	rjmp	.+12     	; 0x16f2 <fputc+0x3c>
    16e6:	e8 85       	ldd	r30, Y+8	; 0x08
    16e8:	f9 85       	ldd	r31, Y+9	; 0x09
    16ea:	80 2f       	mov	r24, r16
    16ec:	09 95       	icall
    16ee:	89 2b       	or	r24, r25
    16f0:	31 f4       	brne	.+12     	; 0x16fe <fputc+0x48>
    16f2:	8e 81       	ldd	r24, Y+6	; 0x06
    16f4:	9f 81       	ldd	r25, Y+7	; 0x07
    16f6:	01 96       	adiw	r24, 0x01	; 1
    16f8:	9f 83       	std	Y+7, r25	; 0x07
    16fa:	8e 83       	std	Y+6, r24	; 0x06
    16fc:	02 c0       	rjmp	.+4      	; 0x1702 <fputc+0x4c>
    16fe:	0f ef       	ldi	r16, 0xFF	; 255
    1700:	1f ef       	ldi	r17, 0xFF	; 255
    1702:	c8 01       	movw	r24, r16
    1704:	df 91       	pop	r29
    1706:	cf 91       	pop	r28
    1708:	1f 91       	pop	r17
    170a:	0f 91       	pop	r16
    170c:	08 95       	ret

0000170e <__ultoa_invert>:
    170e:	fa 01       	movw	r30, r20
    1710:	aa 27       	eor	r26, r26
    1712:	28 30       	cpi	r18, 0x08	; 8
    1714:	51 f1       	breq	.+84     	; 0x176a <__ultoa_invert+0x5c>
    1716:	20 31       	cpi	r18, 0x10	; 16
    1718:	81 f1       	breq	.+96     	; 0x177a <__ultoa_invert+0x6c>
    171a:	e8 94       	clt
    171c:	6f 93       	push	r22
    171e:	6e 7f       	andi	r22, 0xFE	; 254
    1720:	6e 5f       	subi	r22, 0xFE	; 254
    1722:	7f 4f       	sbci	r23, 0xFF	; 255
    1724:	8f 4f       	sbci	r24, 0xFF	; 255
    1726:	9f 4f       	sbci	r25, 0xFF	; 255
    1728:	af 4f       	sbci	r26, 0xFF	; 255
    172a:	b1 e0       	ldi	r27, 0x01	; 1
    172c:	3e d0       	rcall	.+124    	; 0x17aa <__ultoa_invert+0x9c>
    172e:	b4 e0       	ldi	r27, 0x04	; 4
    1730:	3c d0       	rcall	.+120    	; 0x17aa <__ultoa_invert+0x9c>
    1732:	67 0f       	add	r22, r23
    1734:	78 1f       	adc	r23, r24
    1736:	89 1f       	adc	r24, r25
    1738:	9a 1f       	adc	r25, r26
    173a:	a1 1d       	adc	r26, r1
    173c:	68 0f       	add	r22, r24
    173e:	79 1f       	adc	r23, r25
    1740:	8a 1f       	adc	r24, r26
    1742:	91 1d       	adc	r25, r1
    1744:	a1 1d       	adc	r26, r1
    1746:	6a 0f       	add	r22, r26
    1748:	71 1d       	adc	r23, r1
    174a:	81 1d       	adc	r24, r1
    174c:	91 1d       	adc	r25, r1
    174e:	a1 1d       	adc	r26, r1
    1750:	20 d0       	rcall	.+64     	; 0x1792 <__ultoa_invert+0x84>
    1752:	09 f4       	brne	.+2      	; 0x1756 <__ultoa_invert+0x48>
    1754:	68 94       	set
    1756:	3f 91       	pop	r19
    1758:	2a e0       	ldi	r18, 0x0A	; 10
    175a:	26 9f       	mul	r18, r22
    175c:	11 24       	eor	r1, r1
    175e:	30 19       	sub	r19, r0
    1760:	30 5d       	subi	r19, 0xD0	; 208
    1762:	31 93       	st	Z+, r19
    1764:	de f6       	brtc	.-74     	; 0x171c <__ultoa_invert+0xe>
    1766:	cf 01       	movw	r24, r30
    1768:	08 95       	ret
    176a:	46 2f       	mov	r20, r22
    176c:	47 70       	andi	r20, 0x07	; 7
    176e:	40 5d       	subi	r20, 0xD0	; 208
    1770:	41 93       	st	Z+, r20
    1772:	b3 e0       	ldi	r27, 0x03	; 3
    1774:	0f d0       	rcall	.+30     	; 0x1794 <__ultoa_invert+0x86>
    1776:	c9 f7       	brne	.-14     	; 0x176a <__ultoa_invert+0x5c>
    1778:	f6 cf       	rjmp	.-20     	; 0x1766 <__ultoa_invert+0x58>
    177a:	46 2f       	mov	r20, r22
    177c:	4f 70       	andi	r20, 0x0F	; 15
    177e:	40 5d       	subi	r20, 0xD0	; 208
    1780:	4a 33       	cpi	r20, 0x3A	; 58
    1782:	18 f0       	brcs	.+6      	; 0x178a <__ultoa_invert+0x7c>
    1784:	49 5d       	subi	r20, 0xD9	; 217
    1786:	31 fd       	sbrc	r19, 1
    1788:	40 52       	subi	r20, 0x20	; 32
    178a:	41 93       	st	Z+, r20
    178c:	02 d0       	rcall	.+4      	; 0x1792 <__ultoa_invert+0x84>
    178e:	a9 f7       	brne	.-22     	; 0x177a <__ultoa_invert+0x6c>
    1790:	ea cf       	rjmp	.-44     	; 0x1766 <__ultoa_invert+0x58>
    1792:	b4 e0       	ldi	r27, 0x04	; 4
    1794:	a6 95       	lsr	r26
    1796:	97 95       	ror	r25
    1798:	87 95       	ror	r24
    179a:	77 95       	ror	r23
    179c:	67 95       	ror	r22
    179e:	ba 95       	dec	r27
    17a0:	c9 f7       	brne	.-14     	; 0x1794 <__ultoa_invert+0x86>
    17a2:	00 97       	sbiw	r24, 0x00	; 0
    17a4:	61 05       	cpc	r22, r1
    17a6:	71 05       	cpc	r23, r1
    17a8:	08 95       	ret
    17aa:	9b 01       	movw	r18, r22
    17ac:	ac 01       	movw	r20, r24
    17ae:	0a 2e       	mov	r0, r26
    17b0:	06 94       	lsr	r0
    17b2:	57 95       	ror	r21
    17b4:	47 95       	ror	r20
    17b6:	37 95       	ror	r19
    17b8:	27 95       	ror	r18
    17ba:	ba 95       	dec	r27
    17bc:	c9 f7       	brne	.-14     	; 0x17b0 <__ultoa_invert+0xa2>
    17be:	62 0f       	add	r22, r18
    17c0:	73 1f       	adc	r23, r19
    17c2:	84 1f       	adc	r24, r20
    17c4:	95 1f       	adc	r25, r21
    17c6:	a0 1d       	adc	r26, r0
    17c8:	08 95       	ret

000017ca <_exit>:
    17ca:	f8 94       	cli

000017cc <__stop_program>:
    17cc:	ff cf       	rjmp	.-2      	; 0x17cc <__stop_program>
