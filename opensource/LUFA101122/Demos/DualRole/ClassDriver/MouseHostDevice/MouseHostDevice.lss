
MouseHostDevice.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000f2  00800100  000029b8  00002a4c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000029b8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000001b  008001f2  008001f2  00002b3e  2**0
                  ALLOC
  3 .stab         000011b8  00000000  00000000  00002b40  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000042d  00000000  00000000  00003cf8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000a50  00000000  00000000  00004125  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000018d5  00000000  00000000  00004b75  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00011db9  00000000  00000000  0000644a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000046e2  00000000  00000000  00018203  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000c860  00000000  00000000  0001c8e5  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000fe0  00000000  00000000  00029148  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00005d74  00000000  00000000  0002a128  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000079c7  00000000  00000000  0002fe9c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000b70  00000000  00000000  00037863  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:

	return Endpoint_IsConfigured();
}

void Endpoint_ClearEndpoints(void)
{
       0:	30 c1       	rjmp	.+608    	; 0x262 <__ctors_end>

	return USB_Host_SendControlRequest(Buffer);
}

uint8_t USB_Host_ClearPipeStall(const uint8_t EndpointNum)
{
       2:	00 00       	nop
{
	USB_GetNextDescriptorOfType(BytesRem, CurrConfigLoc, AfterType);

	if (*BytesRem)
	  USB_GetNextDescriptorOfType(BytesRem, CurrConfigLoc, Type);
}
       4:	4c c1       	rjmp	.+664    	; 0x29e <__bad_interrupt>
uint8_t TEMPLATE_FUNC_NAME (const void* Buffer,
                            uint16_t Length)
{
       6:	00 00       	nop
			Length--;
		}
	}

	return PIPE_RWSTREAM_NoError;
}
       8:	4a c1       	rjmp	.+660    	; 0x29e <__bad_interrupt>
		  ReportData[CurrentBit / 8] |= BitMask;

		CurrentBit++;
		BitMask <<= 1;
	}
}
       a:	00 00       	nop
	return HOST_SENDCONTROL_Successful;
}

#if !defined(HID_HOST_BOOT_PROTOCOL_ONLY)
uint8_t HID_Host_SetReportProtocol(USB_ClassInfo_HID_Host_t* const HIDInterfaceInfo)
{
       c:	48 c1       	rjmp	.+656    	; 0x29e <__bad_interrupt>
       e:	00 00       	nop
      10:	46 c1       	rjmp	.+652    	; 0x29e <__bad_interrupt>
      12:	00 00       	nop
      14:	44 c1       	rjmp	.+648    	; 0x29e <__bad_interrupt>
      16:	00 00       	nop
      18:	42 c1       	rjmp	.+644    	; 0x29e <__bad_interrupt>
      1a:	00 00       	nop
      1c:	40 c1       	rjmp	.+640    	; 0x29e <__bad_interrupt>
      1e:	00 00       	nop
      20:	3e c1       	rjmp	.+636    	; 0x29e <__bad_interrupt>
      22:	00 00       	nop
      24:	3c c1       	rjmp	.+632    	; 0x29e <__bad_interrupt>
      26:	00 00       	nop
      28:	38 c7       	rjmp	.+3696   	; 0xe9a <__vector_10>
      2a:	00 00       	nop
      2c:	38 c1       	rjmp	.+624    	; 0x29e <__bad_interrupt>
      2e:	00 00       	nop
      30:	36 c1       	rjmp	.+620    	; 0x29e <__bad_interrupt>
      32:	00 00       	nop
      34:	34 c1       	rjmp	.+616    	; 0x29e <__bad_interrupt>
      36:	00 00       	nop
      38:	32 c1       	rjmp	.+612    	; 0x29e <__bad_interrupt>
      3a:	00 00       	nop
      3c:	30 c1       	rjmp	.+608    	; 0x29e <__bad_interrupt>
      3e:	00 00       	nop
      40:	2e c1       	rjmp	.+604    	; 0x29e <__bad_interrupt>
      42:	00 00       	nop
      44:	2c c1       	rjmp	.+600    	; 0x29e <__bad_interrupt>
      46:	00 00       	nop
      48:	2a c1       	rjmp	.+596    	; 0x29e <__bad_interrupt>
      4a:	00 00       	nop
      4c:	28 c1       	rjmp	.+592    	; 0x29e <__bad_interrupt>
      4e:	00 00       	nop
      50:	26 c1       	rjmp	.+588    	; 0x29e <__bad_interrupt>
      52:	00 00       	nop
      54:	24 c1       	rjmp	.+584    	; 0x29e <__bad_interrupt>
      56:	00 00       	nop
      58:	22 c1       	rjmp	.+580    	; 0x29e <__bad_interrupt>
      5a:	00 00       	nop
      5c:	20 c1       	rjmp	.+576    	; 0x29e <__bad_interrupt>
      5e:	00 00       	nop
      60:	1e c1       	rjmp	.+572    	; 0x29e <__bad_interrupt>
      62:	00 00       	nop
      64:	1c c1       	rjmp	.+568    	; 0x29e <__bad_interrupt>
      66:	00 00       	nop
      68:	1a c1       	rjmp	.+564    	; 0x29e <__bad_interrupt>
      6a:	00 00       	nop
      6c:	18 c1       	rjmp	.+560    	; 0x29e <__bad_interrupt>
      6e:	00 00       	nop
      70:	16 c1       	rjmp	.+556    	; 0x29e <__bad_interrupt>
      72:	00 00       	nop
      74:	14 c1       	rjmp	.+552    	; 0x29e <__bad_interrupt>
      76:	00 00       	nop
      78:	12 c1       	rjmp	.+548    	; 0x29e <__bad_interrupt>
      7a:	00 00       	nop
      7c:	10 c1       	rjmp	.+544    	; 0x29e <__bad_interrupt>
      7e:	00 00       	nop
      80:	0e c1       	rjmp	.+540    	; 0x29e <__bad_interrupt>
      82:	00 00       	nop
      84:	0c c1       	rjmp	.+536    	; 0x29e <__bad_interrupt>
      86:	00 00       	nop
      88:	0a c1       	rjmp	.+532    	; 0x29e <__bad_interrupt>
      8a:	00 00       	nop
      8c:	08 c1       	rjmp	.+528    	; 0x29e <__bad_interrupt>
      8e:	00 00       	nop
      90:	06 c1       	rjmp	.+524    	; 0x29e <__bad_interrupt>
      92:	00 00       	nop
      94:	04 c1       	rjmp	.+520    	; 0x29e <__bad_interrupt>
      96:	00 00       	nop

00000098 <__c.5078>:
      98:	48 6f 73 74 00                                      Host.

0000009d <__c.5076>:
      9d:	44 65 76 69 63 65 00                                Device.

000000a4 <__c.5074>:
      a4:	1b 5b 33 33 6d 55 49 44 20 43 68 61 6e 67 65 20     .[33mUID Change 
      b4:	74 6f 20 25 53 20 6d 6f 64 65 0d 0a 1b 5b 33 37     to %S mode...[37
      c4:	6d 00                                               m.

000000c6 <__c.5059>:
      c6:	1b 5b 33 36 6d 4d 6f 75 73 65 20 48 6f 73 74 2f     .[36mMouse Host/
      d6:	44 65 76 69 63 65 20 44 65 6d 6f 20 72 75 6e 6e     Device Demo runn
      e6:	69 6e 67 2e 0d 0a 1b 5b 33 37 6d 00                 ing....[37m.

000000f2 <MouseReport>:
      f2:	05 01 09 02 a1 01 09 01 a1 00 95 03 75 01 05 09     ............u...
     102:	19 01 29 03 15 00 25 01 81 02 95 01 75 05 81 01     ..)...%.....u...
     112:	75 08 95 02 05 01 09 30 09 31 15 81 25 7f 81 06     u......0.1..%...
     122:	c0 c0                                               ..

00000124 <DeviceDescriptor>:
     124:	12 01 10 01 00 00 00 08 eb 03 41 20 00 00 01 02     ..........A ....
     134:	00 01                                               ..

00000136 <ConfigurationDescriptor>:
     136:	09 02 22 00 01 01 00 c0 32 09 04 00 00 01 03 01     ..".....2.......
     146:	02 00 09 21 11 01 00 01 22 32 00 07 05 81 03 08     ...!...."2......
     156:	00 01                                               ..

00000158 <LanguageString>:
     158:	04 03 09 04                                         ....

0000015c <ManufacturerString>:
     15c:	18 03 44 00 65 00 61 00 6e 00 20 00 43 00 61 00     ..D.e.a.n. .C.a.
     16c:	6d 00 65 00 72 00 61 00 00 00                       m.e.r.a...

00000176 <ProductString>:
     176:	20 03 4c 00 55 00 46 00 41 00 20 00 4d 00 6f 00      .L.U.F.A. .M.o.
     186:	75 00 73 00 65 00 20 00 44 00 65 00 6d 00 6f 00     u.s.e. .D.e.m.o.
     196:	00 00                                               ..

00000198 <__c.5097>:
     198:	64 58 3a 25 32 64 20 64 59 3a 25 32 64 20 42 75     dX:%2d dY:%2d Bu
     1a8:	74 74 6f 6e 3a 25 64 0d 0a 00                       tton:%d...

000001b2 <__c.5081>:
     1b2:	1b 5b 33 31 6d 44 65 76 20 45 6e 75 6d 20 45 72     .[31mDev Enum Er
     1c2:	72 6f 72 0d 0a 20 2d 2d 20 45 72 72 6f 72 20 43     ror.. -- Error C
     1d2:	6f 64 65 20 25 64 0d 0a 20 2d 2d 20 53 75 62 20     ode %d.. -- Sub 
     1e2:	45 72 72 6f 72 20 43 6f 64 65 20 25 64 0d 0a 20     Error Code %d.. 
     1f2:	2d 2d 20 49 6e 20 53 74 61 74 65 20 25 64 0d 0a     -- In State %d..
     202:	1b 5b 33 37 6d 00                                   .[37m.

00000208 <__c.5073>:
     208:	1b 5b 33 31 6d 48 6f 73 74 20 4d 6f 64 65 20 45     .[31mHost Mode E
     218:	72 72 6f 72 0d 0a 20 2d 2d 20 45 72 72 6f 72 20     rror.. -- Error 
     228:	43 6f 64 65 20 25 64 0d 0a 1b 5b 33 37 6d 00        Code %d...[37m.

00000237 <__c.5065>:
     237:	0d 0a 44 65 76 69 63 65 20 55 6e 61 74 74 61 63     ..Device Unattac
     247:	68 65 64 2e 0d 0a 00                                hed....

0000024e <__c.5060>:
     24e:	44 65 76 69 63 65 20 41 74 74 61 63 68 65 64 2e     Device Attached.
     25e:	0d 0a 00 00                                         ....

00000262 <__ctors_end>:
     262:	11 24       	eor	r1, r1
     264:	1f be       	out	0x3f, r1	; 63
     266:	cf ef       	ldi	r28, 0xFF	; 255
     268:	d0 e2       	ldi	r29, 0x20	; 32
     26a:	de bf       	out	0x3e, r29	; 62
     26c:	cd bf       	out	0x3d, r28	; 61

0000026e <__do_copy_data>:
     26e:	11 e0       	ldi	r17, 0x01	; 1
     270:	a0 e0       	ldi	r26, 0x00	; 0
     272:	b1 e0       	ldi	r27, 0x01	; 1
     274:	e8 eb       	ldi	r30, 0xB8	; 184
     276:	f9 e2       	ldi	r31, 0x29	; 41
     278:	00 e0       	ldi	r16, 0x00	; 0
     27a:	0b bf       	out	0x3b, r16	; 59
     27c:	02 c0       	rjmp	.+4      	; 0x282 <__do_copy_data+0x14>
     27e:	07 90       	elpm	r0, Z+
     280:	0d 92       	st	X+, r0
     282:	a2 3f       	cpi	r26, 0xF2	; 242
     284:	b1 07       	cpc	r27, r17
     286:	d9 f7       	brne	.-10     	; 0x27e <__do_copy_data+0x10>

00000288 <__do_clear_bss>:
     288:	12 e0       	ldi	r17, 0x02	; 2
     28a:	a2 ef       	ldi	r26, 0xF2	; 242
     28c:	b1 e0       	ldi	r27, 0x01	; 1
     28e:	01 c0       	rjmp	.+2      	; 0x292 <.do_clear_bss_start>

00000290 <.do_clear_bss_loop>:
     290:	1d 92       	st	X+, r1

00000292 <.do_clear_bss_start>:
     292:	ad 30       	cpi	r26, 0x0D	; 13
     294:	b1 07       	cpc	r27, r17
     296:	e1 f7       	brne	.-8      	; 0x290 <.do_clear_bss_loop>
     298:	65 d0       	rcall	.+202    	; 0x364 <main>
     29a:	0c 94 da 14 	jmp	0x29b4	; 0x29b4 <_exit>

0000029e <__bad_interrupt>:
     29e:	b0 ce       	rjmp	.-672    	; 0x0 <__vectors>

000002a0 <EVENT_USB_UIDChange>:
}

/** Event handler for the library USB mode change event. */
void EVENT_USB_UIDChange(void)
{
	printf_P(PSTR(ESC_FG_YELLOW "UID Change to %S mode\r\n" ESC_FG_WHITE),
     2a0:	80 91 f5 01 	lds	r24, 0x01F5
     2a4:	81 30       	cpi	r24, 0x01	; 1
     2a6:	19 f0       	breq	.+6      	; 0x2ae <EVENT_USB_UIDChange+0xe>
	         (USB_CurrentMode == USB_MODE_Device) ? PSTR("Device") : PSTR("Host"));
     2a8:	28 e9       	ldi	r18, 0x98	; 152
     2aa:	30 e0       	ldi	r19, 0x00	; 0
     2ac:	02 c0       	rjmp	.+4      	; 0x2b2 <EVENT_USB_UIDChange+0x12>
     2ae:	2d e9       	ldi	r18, 0x9D	; 157
     2b0:	30 e0       	ldi	r19, 0x00	; 0
}

/** Event handler for the library USB mode change event. */
void EVENT_USB_UIDChange(void)
{
	printf_P(PSTR(ESC_FG_YELLOW "UID Change to %S mode\r\n" ESC_FG_WHITE),
     2b2:	00 d0       	rcall	.+0      	; 0x2b4 <EVENT_USB_UIDChange+0x14>
     2b4:	00 d0       	rcall	.+0      	; 0x2b6 <EVENT_USB_UIDChange+0x16>
     2b6:	84 ea       	ldi	r24, 0xA4	; 164
     2b8:	90 e0       	ldi	r25, 0x00	; 0
     2ba:	ed b7       	in	r30, 0x3d	; 61
     2bc:	fe b7       	in	r31, 0x3e	; 62
     2be:	92 83       	std	Z+2, r25	; 0x02
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	34 83       	std	Z+4, r19	; 0x04
     2c4:	23 83       	std	Z+3, r18	; 0x03
     2c6:	0e 94 b5 11 	call	0x236a	; 0x236a <printf_P>
				PORTD &= ~LEDMask;
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
			{
				PORTD = ((PORTD & ~LEDS_ALL_LEDS) | LEDMask);
     2ca:	8b b1       	in	r24, 0x0b	; 11
     2cc:	8f 70       	andi	r24, 0x0F	; 15
     2ce:	80 61       	ori	r24, 0x10	; 16
     2d0:	8b b9       	out	0x0b, r24	; 11
     2d2:	0f 90       	pop	r0
     2d4:	0f 90       	pop	r0
     2d6:	0f 90       	pop	r0
     2d8:	0f 90       	pop	r0
	         (USB_CurrentMode == USB_MODE_Device) ? PSTR("Device") : PSTR("Host"));

	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
}
     2da:	08 95       	ret

000002dc <SetupHardware>:

/** Configures the board hardware and chip peripherals for the demo's functionality. */
void SetupHardware(void)
{
	/* Disable watchdog if enabled by bootloader/fuses */
	MCUSR &= ~(1 << WDRF);
     2dc:	84 b7       	in	r24, 0x34	; 52
     2de:	87 7f       	andi	r24, 0xF7	; 247
     2e0:	84 bf       	out	0x34, r24	; 52
	wdt_disable();
     2e2:	38 e1       	ldi	r19, 0x18	; 24
     2e4:	0f b6       	in	r0, 0x3f	; 63
     2e6:	f8 94       	cli
     2e8:	30 93 60 00 	sts	0x0060, r19
     2ec:	10 92 60 00 	sts	0x0060, r1
     2f0:	0f be       	out	0x3f, r0	; 63

	/* Disable clock division */
	clock_prescale_set(clock_div_1);
     2f2:	80 e0       	ldi	r24, 0x00	; 0
     2f4:	90 e0       	ldi	r25, 0x00	; 0
     2f6:	20 e8       	ldi	r18, 0x80	; 128
     2f8:	0f b6       	in	r0, 0x3f	; 63
     2fa:	f8 94       	cli
     2fc:	20 93 61 00 	sts	0x0061, r18
     300:	80 93 61 00 	sts	0x0061, r24
     304:	0f be       	out	0x3f, r0	; 63
			 *  \param[in] DoubleSpeed  Enables double speed mode when set, halving the sample time to double the baud rate.
			 */
			static inline void Serial_Init(const uint32_t BaudRate,
			                               const bool DoubleSpeed)
			{
				UBRR1  = (DoubleSpeed ? SERIAL_2X_UBBRVAL(BaudRate) : SERIAL_UBBRVAL(BaudRate));
     306:	83 e3       	ldi	r24, 0x33	; 51
     308:	90 e0       	ldi	r25, 0x00	; 0
     30a:	90 93 cd 00 	sts	0x00CD, r25
     30e:	80 93 cc 00 	sts	0x00CC, r24

				UCSR1C = ((1 << UCSZ11) | (1 << UCSZ10));
     312:	86 e0       	ldi	r24, 0x06	; 6
     314:	80 93 ca 00 	sts	0x00CA, r24
				UCSR1A = (DoubleSpeed ? (1 << U2X1) : 0);
     318:	10 92 c8 00 	sts	0x00C8, r1
				UCSR1B = ((1 << TXEN1)  | (1 << RXEN1));
     31c:	30 93 c9 00 	sts	0x00C9, r19

				DDRD  |= (1 << 3);
     320:	53 9a       	sbi	0x0a, 3	; 10
				PORTD |= (1 << 2);
     322:	5a 9a       	sbi	0x0b, 2	; 11
			static inline void SerialStream_Init(const uint32_t BaudRate,
			                                     const bool DoubleSpeed)
			{
				Serial_Init(BaudRate, DoubleSpeed);

				stdout = &USARTStream;
     324:	84 ee       	ldi	r24, 0xE4	; 228
     326:	91 e0       	ldi	r25, 0x01	; 1
     328:	90 93 0a 02 	sts	0x020A, r25
     32c:	80 93 09 02 	sts	0x0209, r24
				stdin  = &USARTStream;
     330:	90 93 08 02 	sts	0x0208, r25
     334:	80 93 07 02 	sts	0x0207, r24

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void LEDs_Init(void)
			{
				DDRD  |=  LEDS_ALL_LEDS;
     338:	8a b1       	in	r24, 0x0a	; 10
     33a:	80 6f       	ori	r24, 0xF0	; 240
     33c:	8a b9       	out	0x0a, r24	; 10
				PORTD &= ~LEDS_ALL_LEDS;
     33e:	8b b1       	in	r24, 0x0b	; 11
     340:	8f 70       	andi	r24, 0x0F	; 15
     342:	8b b9       	out	0x0b, r24	; 11

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void Joystick_Init(void)
			{
				DDRB  &= ~(JOY_BMASK);
     344:	84 b1       	in	r24, 0x04	; 4
     346:	8f 71       	andi	r24, 0x1F	; 31
     348:	84 b9       	out	0x04, r24	; 4
				DDRE  &= ~(JOY_EMASK);
     34a:	8d b1       	in	r24, 0x0d	; 13
     34c:	8f 7c       	andi	r24, 0xCF	; 207
     34e:	8d b9       	out	0x0d, r24	; 13

				PORTB |= JOY_BMASK;
     350:	85 b1       	in	r24, 0x05	; 5
     352:	80 6e       	ori	r24, 0xE0	; 224
     354:	85 b9       	out	0x05, r24	; 5
				PORTE |= JOY_EMASK;
     356:	8e b1       	in	r24, 0x0e	; 14
     358:	80 63       	ori	r24, 0x30	; 48
     35a:	8e b9       	out	0x0e, r24	; 14

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void Buttons_Init(void)
			{
				DDRE  &= ~BUTTONS_BUTTON1;
     35c:	6a 98       	cbi	0x0d, 2	; 13
				PORTE |=  BUTTONS_BUTTON1;
     35e:	72 9a       	sbi	0x0e, 2	; 14
	/* Hardware Initialization */
	SerialStream_Init(9600, false);
	LEDs_Init();
	Joystick_Init();
	Buttons_Init();
	USB_Init(USB_MODE_UID);
     360:	83 e0       	ldi	r24, 0x03	; 3
}
     362:	64 c5       	rjmp	.+2760   	; 0xe2c <USB_Init>

00000364 <main>:
/** Main program entry point. This routine configures the hardware required by the application, then
 *  enters a loop to run the application tasks in sequence.
 */
int main(void)
{
	SetupHardware();
     364:	bb df       	rcall	.-138    	; 0x2dc <SetupHardware>

	puts_P(PSTR(ESC_FG_CYAN "Mouse Host/Device Demo running.\r\n" ESC_FG_WHITE));
     366:	86 ec       	ldi	r24, 0xC6	; 198
     368:	90 e0       	ldi	r25, 0x00	; 0
     36a:	0e 94 0c 12 	call	0x2418	; 0x2418 <puts_P>
				PORTD &= ~LEDMask;
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
			{
				PORTD = ((PORTD & ~LEDS_ALL_LEDS) | LEDMask);
     36e:	8b b1       	in	r24, 0x0b	; 11
     370:	8f 70       	andi	r24, 0x0F	; 15
     372:	80 61       	ori	r24, 0x10	; 16
     374:	8b b9       	out	0x0b, r24	; 11

	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
	sei();
     376:	78 94       	sei

	for (;;)
	{
		/* Determine which USB mode we are currently in */
		if (USB_CurrentMode == USB_MODE_Host)
     378:	80 91 f5 01 	lds	r24, 0x01F5
     37c:	82 30       	cpi	r24, 0x02	; 2
     37e:	11 f4       	brne	.+4      	; 0x384 <main+0x20>
		{
			MouseHostTask();
     380:	af d0       	rcall	.+350    	; 0x4e0 <MouseHostTask>
     382:	04 c0       	rjmp	.+8      	; 0x38c <main+0x28>
			HID_Host_USBTask(&Mouse_HID_Host_Interface);
		}
		else
		{
			HID_Device_USBTask(&Mouse_HID_Device_Interface);
     384:	80 e0       	ldi	r24, 0x00	; 0
     386:	91 e0       	ldi	r25, 0x01	; 1
     388:	0e 94 a7 0d 	call	0x1b4e	; 0x1b4e <HID_Device_USBTask>
		}

		USB_USBTask();
     38c:	0e 94 57 0d 	call	0x1aae	; 0x1aae <USB_USBTask>
     390:	f3 cf       	rjmp	.-26     	; 0x378 <main+0x14>

00000392 <CALLBACK_USB_GetDescriptor>:
 *  USB host.
 */
uint16_t CALLBACK_USB_GetDescriptor(const uint16_t wValue,
                                    const uint8_t wIndex,
                                    const void** const DescriptorAddress)
{
     392:	da 01       	movw	r26, r20
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
     394:	93 30       	cpi	r25, 0x03	; 3
     396:	b1 f0       	breq	.+44     	; 0x3c4 <CALLBACK_USB_GetDescriptor+0x32>
     398:	94 30       	cpi	r25, 0x04	; 4
     39a:	28 f4       	brcc	.+10     	; 0x3a6 <CALLBACK_USB_GetDescriptor+0x14>
     39c:	91 30       	cpi	r25, 0x01	; 1
     39e:	41 f0       	breq	.+16     	; 0x3b0 <CALLBACK_USB_GetDescriptor+0x1e>
     3a0:	92 30       	cpi	r25, 0x02	; 2
     3a2:	79 f5       	brne	.+94     	; 0x402 <CALLBACK_USB_GetDescriptor+0x70>
     3a4:	0a c0       	rjmp	.+20     	; 0x3ba <CALLBACK_USB_GetDescriptor+0x28>
     3a6:	91 32       	cpi	r25, 0x21	; 33
     3a8:	11 f1       	breq	.+68     	; 0x3ee <CALLBACK_USB_GetDescriptor+0x5c>
     3aa:	92 32       	cpi	r25, 0x22	; 34
     3ac:	51 f5       	brne	.+84     	; 0x402 <CALLBACK_USB_GetDescriptor+0x70>
     3ae:	24 c0       	rjmp	.+72     	; 0x3f8 <CALLBACK_USB_GetDescriptor+0x66>
     3b0:	e4 e2       	ldi	r30, 0x24	; 36
     3b2:	f1 e0       	ldi	r31, 0x01	; 1
     3b4:	22 e1       	ldi	r18, 0x12	; 18
     3b6:	30 e0       	ldi	r19, 0x00	; 0
     3b8:	28 c0       	rjmp	.+80     	; 0x40a <CALLBACK_USB_GetDescriptor+0x78>
     3ba:	e6 e3       	ldi	r30, 0x36	; 54
     3bc:	f1 e0       	ldi	r31, 0x01	; 1
     3be:	22 e2       	ldi	r18, 0x22	; 34
     3c0:	30 e0       	ldi	r19, 0x00	; 0
     3c2:	23 c0       	rjmp	.+70     	; 0x40a <CALLBACK_USB_GetDescriptor+0x78>
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
			Size    = sizeof(USB_Descriptor_Configuration_t);
			break;
		case DTYPE_String:
			switch (DescriptorNumber)
     3c4:	81 30       	cpi	r24, 0x01	; 1
     3c6:	49 f0       	breq	.+18     	; 0x3da <CALLBACK_USB_GetDescriptor+0x48>
     3c8:	81 30       	cpi	r24, 0x01	; 1
     3ca:	18 f0       	brcs	.+6      	; 0x3d2 <CALLBACK_USB_GetDescriptor+0x40>
     3cc:	82 30       	cpi	r24, 0x02	; 2
     3ce:	c9 f4       	brne	.+50     	; 0x402 <CALLBACK_USB_GetDescriptor+0x70>
     3d0:	0a c0       	rjmp	.+20     	; 0x3e6 <CALLBACK_USB_GetDescriptor+0x54>
			{
				case 0x00:
					Address = &LanguageString;
					Size    = pgm_read_byte(&LanguageString.Header.Size);
     3d2:	e8 e5       	ldi	r30, 0x58	; 88
     3d4:	f1 e0       	ldi	r31, 0x01	; 1
     3d6:	84 91       	lpm	r24, Z+
     3d8:	03 c0       	rjmp	.+6      	; 0x3e0 <CALLBACK_USB_GetDescriptor+0x4e>
					break;
				case 0x01:
					Address = &ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
     3da:	ec e5       	ldi	r30, 0x5C	; 92
     3dc:	f1 e0       	ldi	r31, 0x01	; 1
     3de:	84 91       	lpm	r24, Z+
     3e0:	28 2f       	mov	r18, r24
     3e2:	30 e0       	ldi	r19, 0x00	; 0
     3e4:	12 c0       	rjmp	.+36     	; 0x40a <CALLBACK_USB_GetDescriptor+0x78>
					break;
				case 0x02:
					Address = &ProductString;
					Size    = pgm_read_byte(&ProductString.Header.Size);
     3e6:	e6 e7       	ldi	r30, 0x76	; 118
     3e8:	f1 e0       	ldi	r31, 0x01	; 1
     3ea:	84 91       	lpm	r24, Z+
     3ec:	f9 cf       	rjmp	.-14     	; 0x3e0 <CALLBACK_USB_GetDescriptor+0x4e>
     3ee:	e8 e4       	ldi	r30, 0x48	; 72
     3f0:	f1 e0       	ldi	r31, 0x01	; 1
     3f2:	29 e0       	ldi	r18, 0x09	; 9
     3f4:	30 e0       	ldi	r19, 0x00	; 0
     3f6:	09 c0       	rjmp	.+18     	; 0x40a <CALLBACK_USB_GetDescriptor+0x78>

			break;
		case HID_DTYPE_HID:
			Address = &ConfigurationDescriptor.HID_MouseHID;
			Size    = sizeof(USB_HID_Descriptor_HID_t);
			break;
     3f8:	e2 ef       	ldi	r30, 0xF2	; 242
     3fa:	f0 e0       	ldi	r31, 0x00	; 0
     3fc:	22 e3       	ldi	r18, 0x32	; 50
     3fe:	30 e0       	ldi	r19, 0x00	; 0
     400:	04 c0       	rjmp	.+8      	; 0x40a <CALLBACK_USB_GetDescriptor+0x78>
     402:	e0 e0       	ldi	r30, 0x00	; 0
     404:	f0 e0       	ldi	r31, 0x00	; 0
     406:	20 e0       	ldi	r18, 0x00	; 0
     408:	30 e0       	ldi	r19, 0x00	; 0
			Address = &MouseReport;
			Size    = sizeof(MouseReport);
			break;
	}

	*DescriptorAddress = Address;
     40a:	ed 93       	st	X+, r30
     40c:	fc 93       	st	X, r31
	return Size;
}
     40e:	c9 01       	movw	r24, r18
     410:	08 95       	ret

00000412 <EVENT_USB_Device_Connect>:
     412:	8b b1       	in	r24, 0x0b	; 11
     414:	8f 70       	andi	r24, 0x0F	; 15
     416:	80 6a       	ori	r24, 0xA0	; 160
     418:	8b b9       	out	0x0b, r24	; 11

/** Event handler for the library USB WakeUp event. */
void EVENT_USB_Device_Connect(void)
{
	LEDs_SetAllLEDs(LEDMASK_USB_ENUMERATING);
}
     41a:	08 95       	ret

0000041c <EVENT_USB_Device_Disconnect>:
     41c:	8b b1       	in	r24, 0x0b	; 11
     41e:	8f 70       	andi	r24, 0x0F	; 15
     420:	80 61       	ori	r24, 0x10	; 16
     422:	8b b9       	out	0x0b, r24	; 11

/** Event handler for the library USB Suspend event. */
void EVENT_USB_Device_Disconnect(void)
{
	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
}
     424:	08 95       	ret

00000426 <EVENT_USB_Device_StartOfFrame>:
			 *  \param[in,out] HIDInterfaceInfo  Pointer to a structure containing a HID Class configuration and state.
			 */
			static inline void HID_Device_MillisecondElapsed(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo) ATTR_ALWAYS_INLINE ATTR_NON_NULL_PTR_ARG(1);
			static inline void HID_Device_MillisecondElapsed(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
			{
				if (HIDInterfaceInfo->State.IdleMSRemaining)
     426:	80 91 0b 01 	lds	r24, 0x010B
     42a:	90 91 0c 01 	lds	r25, 0x010C
     42e:	00 97       	sbiw	r24, 0x00	; 0
     430:	29 f0       	breq	.+10     	; 0x43c <EVENT_USB_Device_StartOfFrame+0x16>
				  HIDInterfaceInfo->State.IdleMSRemaining--;
     432:	01 97       	sbiw	r24, 0x01	; 1
     434:	90 93 0c 01 	sts	0x010C, r25
     438:	80 93 0b 01 	sts	0x010B, r24
     43c:	08 95       	ret

0000043e <CALLBACK_HID_Device_CreateHIDReport>:
bool CALLBACK_HID_Device_CreateHIDReport(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo,
                                         uint8_t* const ReportID,
                                         const uint8_t ReportType,
                                         void* ReportData,
                                         uint16_t* const ReportSize)
{
     43e:	0f 93       	push	r16
     440:	1f 93       	push	r17
     442:	d8 01       	movw	r26, r16
	USB_MouseReport_Data_t* MouseReport = (USB_MouseReport_Data_t*)ReportData;
     444:	f9 01       	movw	r30, r18
			}

			static inline uint8_t Joystick_GetStatus(void) ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t Joystick_GetStatus(void)
			{
				return (((uint8_t)~PINB & JOY_BMASK) | (((uint8_t)~PINE & JOY_EMASK) >> 1));
     446:	23 b1       	in	r18, 0x03	; 3
     448:	8c b1       	in	r24, 0x0c	; 12
     44a:	80 95       	com	r24
     44c:	90 e0       	ldi	r25, 0x00	; 0
     44e:	80 73       	andi	r24, 0x30	; 48
     450:	90 70       	andi	r25, 0x00	; 0
     452:	95 95       	asr	r25
     454:	87 95       	ror	r24
     456:	20 95       	com	r18
     458:	20 7e       	andi	r18, 0xE0	; 224
     45a:	28 2b       	or	r18, r24
			}

			static inline uint8_t Buttons_GetStatus(void) ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t Buttons_GetStatus(void)
			{
				return ((PINE & BUTTONS_BUTTON1) ^ BUTTONS_BUTTON1);
     45c:	3c b1       	in	r19, 0x0c	; 12

	uint8_t JoyStatus_LCL    = Joystick_GetStatus();
	uint8_t ButtonStatus_LCL = Buttons_GetStatus();

	if (JoyStatus_LCL & JOY_UP)
     45e:	27 ff       	sbrs	r18, 7
     460:	02 c0       	rjmp	.+4      	; 0x466 <CALLBACK_HID_Device_CreateHIDReport+0x28>
	  MouseReport->Y = -1;
     462:	8f ef       	ldi	r24, 0xFF	; 255
     464:	03 c0       	rjmp	.+6      	; 0x46c <CALLBACK_HID_Device_CreateHIDReport+0x2e>
	else if (JoyStatus_LCL & JOY_DOWN)
     466:	24 ff       	sbrs	r18, 4
     468:	02 c0       	rjmp	.+4      	; 0x46e <CALLBACK_HID_Device_CreateHIDReport+0x30>
	  MouseReport->Y =  1;
     46a:	81 e0       	ldi	r24, 0x01	; 1
     46c:	82 83       	std	Z+2, r24	; 0x02

	if (JoyStatus_LCL & JOY_RIGHT)
     46e:	92 2f       	mov	r25, r18
     470:	23 ff       	sbrs	r18, 3
     472:	02 c0       	rjmp	.+4      	; 0x478 <CALLBACK_HID_Device_CreateHIDReport+0x3a>
	  MouseReport->X =  1;
     474:	81 e0       	ldi	r24, 0x01	; 1
     476:	03 c0       	rjmp	.+6      	; 0x47e <CALLBACK_HID_Device_CreateHIDReport+0x40>
	else if (JoyStatus_LCL & JOY_LEFT)
     478:	26 ff       	sbrs	r18, 6
     47a:	02 c0       	rjmp	.+4      	; 0x480 <CALLBACK_HID_Device_CreateHIDReport+0x42>
	  MouseReport->X = -1;
     47c:	8f ef       	ldi	r24, 0xFF	; 255
     47e:	81 83       	std	Z+1, r24	; 0x01

	if (JoyStatus_LCL & JOY_PRESS)
     480:	95 ff       	sbrs	r25, 5
     482:	03 c0       	rjmp	.+6      	; 0x48a <CALLBACK_HID_Device_CreateHIDReport+0x4c>
	  MouseReport->Button |= (1 << 0);
     484:	80 81       	ld	r24, Z
     486:	81 60       	ori	r24, 0x01	; 1
     488:	80 83       	st	Z, r24

	if (ButtonStatus_LCL & BUTTONS_BUTTON1)
     48a:	32 fd       	sbrc	r19, 2
     48c:	03 c0       	rjmp	.+6      	; 0x494 <CALLBACK_HID_Device_CreateHIDReport+0x56>
	  MouseReport->Button |= (1 << 1);
     48e:	80 81       	ld	r24, Z
     490:	82 60       	ori	r24, 0x02	; 2
     492:	80 83       	st	Z, r24

	*ReportSize = sizeof(USB_MouseReport_Data_t);
     494:	83 e0       	ldi	r24, 0x03	; 3
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	8d 93       	st	X+, r24
     49a:	9c 93       	st	X, r25
	return true;
}
     49c:	81 e0       	ldi	r24, 0x01	; 1
     49e:	1f 91       	pop	r17
     4a0:	0f 91       	pop	r16
     4a2:	08 95       	ret

000004a4 <CALLBACK_HID_Device_ProcessHIDReport>:
                                          const uint8_t ReportType,
                                          const void* ReportData,
                                          const uint16_t ReportSize)
{
	// Unused (but mandatory for the HID class driver) in this demo, since there are no Host->Device reports
}
     4a4:	08 95       	ret

000004a6 <EVENT_USB_Device_ControlRequest>:
}

/** Event handler for the library USB Control Request reception event. */
void EVENT_USB_Device_ControlRequest(void)
{
	HID_Device_ProcessControlRequest(&Mouse_HID_Device_Interface);
     4a6:	80 e0       	ldi	r24, 0x00	; 0
     4a8:	91 e0       	ldi	r25, 0x01	; 1
     4aa:	0c 94 9b 0e 	jmp	0x1d36	; 0x1d36 <HID_Device_ProcessControlRequest>

000004ae <EVENT_USB_Device_ConfigurationChanged>:
     4ae:	8b b1       	in	r24, 0x0b	; 11
     4b0:	8f 70       	andi	r24, 0x0F	; 15
     4b2:	80 66       	ori	r24, 0x60	; 96
     4b4:	8b b9       	out	0x0b, r24	; 11
/** Event handler for the library USB Configuration Changed event. */
void EVENT_USB_Device_ConfigurationChanged(void)
{
	LEDs_SetAllLEDs(LEDMASK_USB_READY);

	if (!(HID_Device_ConfigureEndpoints(&Mouse_HID_Device_Interface)))
     4b6:	80 e0       	ldi	r24, 0x00	; 0
     4b8:	91 e0       	ldi	r25, 0x01	; 1
     4ba:	0e 94 62 0e 	call	0x1cc4	; 0x1cc4 <HID_Device_ConfigureEndpoints>
     4be:	88 23       	and	r24, r24
     4c0:	21 f4       	brne	.+8      	; 0x4ca <EVENT_USB_Device_ConfigurationChanged+0x1c>
     4c2:	8b b1       	in	r24, 0x0b	; 11
     4c4:	8f 70       	andi	r24, 0x0F	; 15
     4c6:	80 69       	ori	r24, 0x90	; 144
     4c8:	8b b9       	out	0x0b, r24	; 11
				 *  \note Not available when the NO_SOF_EVENTS compile time token is defined.
				 */
				static inline void USB_Device_EnableSOFEvents(void) ATTR_ALWAYS_INLINE;
				static inline void USB_Device_EnableSOFEvents(void)
				{
					USB_INT_Enable(USB_INT_SOFI);
     4ca:	80 91 e2 00 	lds	r24, 0x00E2
     4ce:	84 60       	ori	r24, 0x04	; 4
     4d0:	80 93 e2 00 	sts	0x00E2, r24
	  LEDs_SetAllLEDs(LEDMASK_USB_ERROR);

	USB_Device_EnableSOFEvents();
}
     4d4:	08 95       	ret

000004d6 <EVENT_USB_Host_DeviceEnumerationComplete>:
     4d6:	8b b1       	in	r24, 0x0b	; 11
     4d8:	8f 70       	andi	r24, 0x0F	; 15
     4da:	80 66       	ori	r24, 0x60	; 96
     4dc:	8b b9       	out	0x0b, r24	; 11
 *  enumerated by the host and is now ready to be used by the application.
 */
void EVENT_USB_Host_DeviceEnumerationComplete(void)
{
	LEDs_SetAllLEDs(LEDMASK_USB_READY);
}
     4de:	08 95       	ret

000004e0 <MouseHostTask>:

/** Host state machine task. This task handles the enumeration and control of USB Mice while in USB Host mode,
 *  setting up the appropriate data pipes and processing reports from the attached device.
 */
void MouseHostTask(void)
{
     4e0:	0f 93       	push	r16
     4e2:	1f 93       	push	r17
     4e4:	df 93       	push	r29
     4e6:	cf 93       	push	r28
     4e8:	cd b7       	in	r28, 0x3d	; 61
     4ea:	de b7       	in	r29, 0x3e	; 62
     4ec:	c5 50       	subi	r28, 0x05	; 5
     4ee:	d2 40       	sbci	r29, 0x02	; 2
     4f0:	0f b6       	in	r0, 0x3f	; 63
     4f2:	f8 94       	cli
     4f4:	de bf       	out	0x3e, r29	; 62
     4f6:	0f be       	out	0x3f, r0	; 63
     4f8:	cd bf       	out	0x3d, r28	; 61
	switch (USB_HostState)
     4fa:	80 91 06 02 	lds	r24, 0x0206
     4fe:	8b 30       	cpi	r24, 0x0B	; 11
     500:	21 f0       	breq	.+8      	; 0x50a <MouseHostTask+0x2a>
     502:	8c 30       	cpi	r24, 0x0C	; 12
     504:	09 f0       	breq	.+2      	; 0x508 <MouseHostTask+0x28>
     506:	95 c0       	rjmp	.+298    	; 0x632 <MouseHostTask+0x152>
     508:	40 c0       	rjmp	.+128    	; 0x58a <MouseHostTask+0xaa>
     50a:	8b b1       	in	r24, 0x0b	; 11
     50c:	8f 70       	andi	r24, 0x0F	; 15
     50e:	80 6a       	ori	r24, 0xA0	; 160
     510:	8b b9       	out	0x0b, r24	; 11
			LEDs_SetAllLEDs(LEDMASK_USB_ENUMERATING);

			uint16_t ConfigDescriptorSize;
			uint8_t  ConfigDescriptorData[512];

			if (USB_Host_GetDeviceConfigDescriptor(1, &ConfigDescriptorSize, ConfigDescriptorData,
     512:	8e 01       	movw	r16, r28
     514:	0a 5f       	subi	r16, 0xFA	; 250
     516:	1f 4f       	sbci	r17, 0xFF	; 255
     518:	81 e0       	ldi	r24, 0x01	; 1
     51a:	be 01       	movw	r22, r28
     51c:	6f 5f       	subi	r22, 0xFF	; 255
     51e:	7f 4f       	sbci	r23, 0xFF	; 255
     520:	a8 01       	movw	r20, r16
     522:	20 e0       	ldi	r18, 0x00	; 0
     524:	32 e0       	ldi	r19, 0x02	; 2
     526:	4f d6       	rcall	.+3230   	; 0x11c6 <USB_Host_GetDeviceConfigDescriptor>
     528:	88 23       	and	r24, r24
     52a:	19 f0       	breq	.+6      	; 0x532 <MouseHostTask+0x52>
			                                       sizeof(ConfigDescriptorData)) != HOST_GETCONFIG_Successful)
			{
				printf("Error Retrieving Configuration Descriptor.\r\n");
     52c:	8d e0       	ldi	r24, 0x0D	; 13
     52e:	91 e0       	ldi	r25, 0x01	; 1
     530:	0b c0       	rjmp	.+22     	; 0x548 <MouseHostTask+0x68>
				LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
				USB_HostState = HOST_STATE_WaitForDeviceRemoval;
				break;
			}

			if (HID_Host_ConfigurePipes(&Mouse_HID_Host_Interface,
     532:	69 81       	ldd	r22, Y+1	; 0x01
     534:	7a 81       	ldd	r23, Y+2	; 0x02
     536:	88 eb       	ldi	r24, 0xB8	; 184
     538:	91 e0       	ldi	r25, 0x01	; 1
     53a:	a8 01       	movw	r20, r16
     53c:	0e 94 72 10 	call	0x20e4	; 0x20e4 <HID_Host_ConfigurePipes>
     540:	88 23       	and	r24, r24
     542:	59 f0       	breq	.+22     	; 0x55a <MouseHostTask+0x7a>
			                            ConfigDescriptorSize, ConfigDescriptorData) != HID_ENUMERROR_NoError)
			{
				printf("Attached Device Not a Valid Mouse.\r\n");
     544:	89 e3       	ldi	r24, 0x39	; 57
     546:	91 e0       	ldi	r25, 0x01	; 1
     548:	0e 94 d7 11 	call	0x23ae	; 0x23ae <puts>
     54c:	8b b1       	in	r24, 0x0b	; 11
     54e:	8f 70       	andi	r24, 0x0F	; 15
     550:	80 69       	ori	r24, 0x90	; 144
     552:	8b b9       	out	0x0b, r24	; 11
				LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
				USB_HostState = HOST_STATE_WaitForDeviceRemoval;
     554:	10 92 06 02 	sts	0x0206, r1
     558:	6c c0       	rjmp	.+216    	; 0x632 <MouseHostTask+0x152>
				break;
			}

			if (USB_Host_SetDeviceConfiguration(1) != HOST_SENDCONTROL_Successful)
     55a:	81 e0       	ldi	r24, 0x01	; 1
     55c:	d4 d1       	rcall	.+936    	; 0x906 <USB_Host_SetDeviceConfiguration>
     55e:	88 23       	and	r24, r24
     560:	19 f0       	breq	.+6      	; 0x568 <MouseHostTask+0x88>
			{
				printf("Error Setting Device Configuration.\r\n");
     562:	8d e5       	ldi	r24, 0x5D	; 93
     564:	91 e0       	ldi	r25, 0x01	; 1
     566:	f0 cf       	rjmp	.-32     	; 0x548 <MouseHostTask+0x68>
				LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
				USB_HostState = HOST_STATE_WaitForDeviceRemoval;
				break;
			}

			if (HID_Host_SetBootProtocol(&Mouse_HID_Host_Interface) != HOST_SENDCONTROL_Successful)
     568:	88 eb       	ldi	r24, 0xB8	; 184
     56a:	91 e0       	ldi	r25, 0x01	; 1
     56c:	0e 94 fb 0f 	call	0x1ff6	; 0x1ff6 <HID_Host_SetBootProtocol>
     570:	88 23       	and	r24, r24
     572:	19 f0       	breq	.+6      	; 0x57a <MouseHostTask+0x9a>
			{
				printf("Could not Set Boot Protocol Mode.\r\n");
     574:	82 e8       	ldi	r24, 0x82	; 130
     576:	91 e0       	ldi	r25, 0x01	; 1
     578:	e7 cf       	rjmp	.-50     	; 0x548 <MouseHostTask+0x68>
				LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
				USB_HostState = HOST_STATE_WaitForDeviceRemoval;
				break;
			}

			printf("Mouse Enumerated.\r\n");
     57a:	85 ea       	ldi	r24, 0xA5	; 165
     57c:	91 e0       	ldi	r25, 0x01	; 1
     57e:	0e 94 d7 11 	call	0x23ae	; 0x23ae <puts>
			USB_HostState = HOST_STATE_Configured;
     582:	8c e0       	ldi	r24, 0x0C	; 12
     584:	80 93 06 02 	sts	0x0206, r24
     588:	54 c0       	rjmp	.+168    	; 0x632 <MouseHostTask+0x152>
			break;
		case HOST_STATE_Configured:
			if (HID_Host_IsReportReceived(&Mouse_HID_Host_Interface))
     58a:	88 eb       	ldi	r24, 0xB8	; 184
     58c:	91 e0       	ldi	r25, 0x01	; 1
     58e:	0e 94 df 0f 	call	0x1fbe	; 0x1fbe <HID_Host_IsReportReceived>
     592:	88 23       	and	r24, r24
     594:	09 f4       	brne	.+2      	; 0x598 <MouseHostTask+0xb8>
     596:	4d c0       	rjmp	.+154    	; 0x632 <MouseHostTask+0x152>
			{
				uint8_t LEDMask  = LEDS_NO_LEDS;

				USB_MouseReport_Data_t MouseReport;
				HID_Host_ReceiveReport(&Mouse_HID_Host_Interface, &MouseReport);
     598:	88 eb       	ldi	r24, 0xB8	; 184
     59a:	91 e0       	ldi	r25, 0x01	; 1
     59c:	be 01       	movw	r22, r28
     59e:	6d 5f       	subi	r22, 0xFD	; 253
     5a0:	7f 4f       	sbci	r23, 0xFF	; 255
     5a2:	0e 94 26 10 	call	0x204c	; 0x204c <HID_Host_ReceiveReport>

				printf_P(PSTR("dX:%2d dY:%2d Button:%d\r\n"), MouseReport.X,
     5a6:	2d b7       	in	r18, 0x3d	; 61
     5a8:	3e b7       	in	r19, 0x3e	; 62
     5aa:	28 50       	subi	r18, 0x08	; 8
     5ac:	30 40       	sbci	r19, 0x00	; 0
     5ae:	0f b6       	in	r0, 0x3f	; 63
     5b0:	f8 94       	cli
     5b2:	3e bf       	out	0x3e, r19	; 62
     5b4:	0f be       	out	0x3f, r0	; 63
     5b6:	2d bf       	out	0x3d, r18	; 61
     5b8:	ed b7       	in	r30, 0x3d	; 61
     5ba:	fe b7       	in	r31, 0x3e	; 62
     5bc:	31 96       	adiw	r30, 0x01	; 1
     5be:	88 e9       	ldi	r24, 0x98	; 152
     5c0:	91 e0       	ldi	r25, 0x01	; 1
     5c2:	ad b7       	in	r26, 0x3d	; 61
     5c4:	be b7       	in	r27, 0x3e	; 62
     5c6:	12 96       	adiw	r26, 0x02	; 2
     5c8:	9c 93       	st	X, r25
     5ca:	8e 93       	st	-X, r24
     5cc:	11 97       	sbiw	r26, 0x01	; 1
     5ce:	8c 81       	ldd	r24, Y+4	; 0x04
     5d0:	99 27       	eor	r25, r25
     5d2:	87 fd       	sbrc	r24, 7
     5d4:	90 95       	com	r25
     5d6:	93 83       	std	Z+3, r25	; 0x03
     5d8:	82 83       	std	Z+2, r24	; 0x02
     5da:	8d 81       	ldd	r24, Y+5	; 0x05
     5dc:	99 27       	eor	r25, r25
     5de:	87 fd       	sbrc	r24, 7
     5e0:	90 95       	com	r25
     5e2:	95 83       	std	Z+5, r25	; 0x05
     5e4:	84 83       	std	Z+4, r24	; 0x04
     5e6:	8b 81       	ldd	r24, Y+3	; 0x03
     5e8:	86 83       	std	Z+6, r24	; 0x06
     5ea:	17 82       	std	Z+7, r1	; 0x07
     5ec:	0e 94 b5 11 	call	0x236a	; 0x236a <printf_P>
															  MouseReport.Y,
															  MouseReport.Button);
				if (MouseReport.X > 0)
     5f0:	8c 81       	ldd	r24, Y+4	; 0x04
     5f2:	2d b7       	in	r18, 0x3d	; 61
     5f4:	3e b7       	in	r19, 0x3e	; 62
     5f6:	28 5f       	subi	r18, 0xF8	; 248
     5f8:	3f 4f       	sbci	r19, 0xFF	; 255
     5fa:	0f b6       	in	r0, 0x3f	; 63
     5fc:	f8 94       	cli
     5fe:	3e bf       	out	0x3e, r19	; 62
     600:	0f be       	out	0x3f, r0	; 63
     602:	2d bf       	out	0x3d, r18	; 61
     604:	18 16       	cp	r1, r24
     606:	14 f4       	brge	.+4      	; 0x60c <MouseHostTask+0x12c>
     608:	90 e1       	ldi	r25, 0x10	; 16
     60a:	05 c0       	rjmp	.+10     	; 0x616 <MouseHostTask+0x136>
				  LEDMask |= LEDS_LED1;
				else if (MouseReport.X < 0)
     60c:	88 23       	and	r24, r24
     60e:	11 f0       	breq	.+4      	; 0x614 <MouseHostTask+0x134>
     610:	90 e2       	ldi	r25, 0x20	; 32
     612:	01 c0       	rjmp	.+2      	; 0x616 <MouseHostTask+0x136>
     614:	90 e0       	ldi	r25, 0x00	; 0
				  LEDMask |= LEDS_LED2;

				if (MouseReport.Y > 0)
     616:	8d 81       	ldd	r24, Y+5	; 0x05
     618:	18 16       	cp	r1, r24
     61a:	14 f4       	brge	.+4      	; 0x620 <MouseHostTask+0x140>
				  LEDMask |= LEDS_LED3;
     61c:	90 68       	ori	r25, 0x80	; 128
     61e:	02 c0       	rjmp	.+4      	; 0x624 <MouseHostTask+0x144>
				else if (MouseReport.Y < 0)
     620:	81 11       	cpse	r24, r1
				  LEDMask |= LEDS_LED4;
     622:	90 64       	ori	r25, 0x40	; 64

				if (MouseReport.Button)
     624:	8b 81       	ldd	r24, Y+3	; 0x03
     626:	81 11       	cpse	r24, r1
     628:	90 ef       	ldi	r25, 0xF0	; 240
     62a:	8b b1       	in	r24, 0x0b	; 11
     62c:	8f 70       	andi	r24, 0x0F	; 15
     62e:	98 2b       	or	r25, r24
     630:	9b b9       	out	0x0b, r25	; 11
				LEDs_SetAllLEDs(LEDMask);
			}

			break;
	}
}
     632:	cb 5f       	subi	r28, 0xFB	; 251
     634:	dd 4f       	sbci	r29, 0xFD	; 253
     636:	0f b6       	in	r0, 0x3f	; 63
     638:	f8 94       	cli
     63a:	de bf       	out	0x3e, r29	; 62
     63c:	0f be       	out	0x3f, r0	; 63
     63e:	cd bf       	out	0x3d, r28	; 61
     640:	cf 91       	pop	r28
     642:	df 91       	pop	r29
     644:	1f 91       	pop	r17
     646:	0f 91       	pop	r16
     648:	08 95       	ret

0000064a <EVENT_USB_Host_DeviceEnumerationFailed>:
 *  enumerating an attached USB device.
 */
void EVENT_USB_Host_DeviceEnumerationFailed(const uint8_t ErrorCode,
                                            const uint8_t SubErrorCode)
{
	printf_P(PSTR(ESC_FG_RED "Dev Enum Error\r\n"
     64a:	90 91 06 02 	lds	r25, 0x0206
     64e:	2d b7       	in	r18, 0x3d	; 61
     650:	3e b7       	in	r19, 0x3e	; 62
     652:	28 50       	subi	r18, 0x08	; 8
     654:	30 40       	sbci	r19, 0x00	; 0
     656:	0f b6       	in	r0, 0x3f	; 63
     658:	f8 94       	cli
     65a:	3e bf       	out	0x3e, r19	; 62
     65c:	0f be       	out	0x3f, r0	; 63
     65e:	2d bf       	out	0x3d, r18	; 61
     660:	ed b7       	in	r30, 0x3d	; 61
     662:	fe b7       	in	r31, 0x3e	; 62
     664:	31 96       	adiw	r30, 0x01	; 1
     666:	22 eb       	ldi	r18, 0xB2	; 178
     668:	31 e0       	ldi	r19, 0x01	; 1
     66a:	ad b7       	in	r26, 0x3d	; 61
     66c:	be b7       	in	r27, 0x3e	; 62
     66e:	12 96       	adiw	r26, 0x02	; 2
     670:	3c 93       	st	X, r19
     672:	2e 93       	st	-X, r18
     674:	11 97       	sbiw	r26, 0x01	; 1
     676:	82 83       	std	Z+2, r24	; 0x02
     678:	13 82       	std	Z+3, r1	; 0x03
     67a:	64 83       	std	Z+4, r22	; 0x04
     67c:	15 82       	std	Z+5, r1	; 0x05
     67e:	96 83       	std	Z+6, r25	; 0x06
     680:	17 82       	std	Z+7, r1	; 0x07
     682:	0e 94 b5 11 	call	0x236a	; 0x236a <printf_P>
     686:	8b b1       	in	r24, 0x0b	; 11
     688:	8f 70       	andi	r24, 0x0F	; 15
     68a:	80 69       	ori	r24, 0x90	; 144
     68c:	8b b9       	out	0x0b, r24	; 11
     68e:	2d b7       	in	r18, 0x3d	; 61
     690:	3e b7       	in	r19, 0x3e	; 62
     692:	28 5f       	subi	r18, 0xF8	; 248
     694:	3f 4f       	sbci	r19, 0xFF	; 255
     696:	0f b6       	in	r0, 0x3f	; 63
     698:	f8 94       	cli
     69a:	3e bf       	out	0x3e, r19	; 62
     69c:	0f be       	out	0x3f, r0	; 63
     69e:	2d bf       	out	0x3d, r18	; 61
	                         " -- Error Code %d\r\n"
	                         " -- Sub Error Code %d\r\n"
	                         " -- In State %d\r\n" ESC_FG_WHITE), ErrorCode, SubErrorCode, USB_HostState);

	LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
}
     6a0:	08 95       	ret

000006a2 <EVENT_USB_Host_HostError>:
	LEDs_SetAllLEDs(LEDMASK_USB_READY);
}

/** Event handler for the USB_HostError event. This indicates that a hardware error occurred while in host mode. */
void EVENT_USB_Host_HostError(const uint8_t ErrorCode)
{
     6a2:	1f 93       	push	r17
     6a4:	18 2f       	mov	r17, r24
	USB_ShutDown();
     6a6:	18 d3       	rcall	.+1584   	; 0xcd8 <USB_ShutDown>

	printf_P(PSTR(ESC_FG_RED "Host Mode Error\r\n"
     6a8:	00 d0       	rcall	.+0      	; 0x6aa <EVENT_USB_Host_HostError+0x8>
     6aa:	00 d0       	rcall	.+0      	; 0x6ac <EVENT_USB_Host_HostError+0xa>
     6ac:	ed b7       	in	r30, 0x3d	; 61
     6ae:	fe b7       	in	r31, 0x3e	; 62
     6b0:	31 96       	adiw	r30, 0x01	; 1
     6b2:	88 e0       	ldi	r24, 0x08	; 8
     6b4:	92 e0       	ldi	r25, 0x02	; 2
     6b6:	ad b7       	in	r26, 0x3d	; 61
     6b8:	be b7       	in	r27, 0x3e	; 62
     6ba:	12 96       	adiw	r26, 0x02	; 2
     6bc:	9c 93       	st	X, r25
     6be:	8e 93       	st	-X, r24
     6c0:	11 97       	sbiw	r26, 0x01	; 1
     6c2:	12 83       	std	Z+2, r17	; 0x02
     6c4:	13 82       	std	Z+3, r1	; 0x03
     6c6:	0e 94 b5 11 	call	0x236a	; 0x236a <printf_P>
     6ca:	8b b1       	in	r24, 0x0b	; 11
     6cc:	8f 70       	andi	r24, 0x0F	; 15
     6ce:	80 69       	ori	r24, 0x90	; 144
     6d0:	8b b9       	out	0x0b, r24	; 11
     6d2:	0f 90       	pop	r0
     6d4:	0f 90       	pop	r0
     6d6:	0f 90       	pop	r0
     6d8:	0f 90       	pop	r0
     6da:	ff cf       	rjmp	.-2      	; 0x6da <EVENT_USB_Host_HostError+0x38>

000006dc <EVENT_USB_Host_DeviceUnattached>:
/** Event handler for the USB_DeviceUnattached event. This indicates that a device has been removed from the host, and
 *  stops the library USB task management process.
 */
void EVENT_USB_Host_DeviceUnattached(void)
{
	puts_P(PSTR("\r\nDevice Unattached.\r\n"));
     6dc:	87 e3       	ldi	r24, 0x37	; 55
     6de:	92 e0       	ldi	r25, 0x02	; 2
     6e0:	0e 94 0c 12 	call	0x2418	; 0x2418 <puts_P>
     6e4:	8b b1       	in	r24, 0x0b	; 11
     6e6:	8f 70       	andi	r24, 0x0F	; 15
     6e8:	80 61       	ori	r24, 0x10	; 16
     6ea:	8b b9       	out	0x0b, r24	; 11
	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
}
     6ec:	08 95       	ret

000006ee <EVENT_USB_Host_DeviceAttached>:
/** Event handler for the USB_DeviceAttached event. This indicates that a device has been attached to the host, and
 *  starts the library USB task to begin the enumeration and USB management process.
 */
void EVENT_USB_Host_DeviceAttached(void)
{
	puts_P(PSTR("Device Attached.\r\n"));
     6ee:	8e e4       	ldi	r24, 0x4E	; 78
     6f0:	92 e0       	ldi	r25, 0x02	; 2
     6f2:	0e 94 0c 12 	call	0x2418	; 0x2418 <puts_P>
     6f6:	8b b1       	in	r24, 0x0b	; 11
     6f8:	8f 70       	andi	r24, 0x0F	; 15
     6fa:	80 6a       	ori	r24, 0xA0	; 160
     6fc:	8b b9       	out	0x0b, r24	; 11
	LEDs_SetAllLEDs(LEDMASK_USB_ENUMERATING);
}
     6fe:	08 95       	ret

00000700 <Endpoint_ConfigureEndpoint_Prv>:
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
     700:	80 93 e9 00 	sts	0x00E9, r24
			 *  \note Endpoints must first be configured properly via \ref Endpoint_ConfigureEndpoint().
			 */
			static inline void Endpoint_EnableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_EnableEndpoint(void)
			{
				UECONX |= (1 << EPEN);
     704:	80 91 eb 00 	lds	r24, 0x00EB
     708:	81 60       	ori	r24, 0x01	; 1
     70a:	80 93 eb 00 	sts	0x00EB, r24
                                    const uint8_t UECFG1XData)
{
	Endpoint_SelectEndpoint(Number);
	Endpoint_EnableEndpoint();

	UECFG1X = 0;
     70e:	10 92 ed 00 	sts	0x00ED, r1
	UECFG0X = UECFG0XData;
     712:	60 93 ec 00 	sts	0x00EC, r22
	UECFG1X = UECFG1XData;
     716:	40 93 ed 00 	sts	0x00ED, r20
			 *  \return Boolean true if the currently selected endpoint has been configured, false otherwise.
			 */
			static inline bool Endpoint_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsConfigured(void)
			{
				return ((UESTA0X & (1 << CFGOK)) ? true : false);
     71a:	80 91 ee 00 	lds	r24, 0x00EE

	return Endpoint_IsConfigured();
}
     71e:	88 1f       	adc	r24, r24
     720:	88 27       	eor	r24, r24
     722:	88 1f       	adc	r24, r24
     724:	08 95       	ret

00000726 <Endpoint_ClearStatusStage>:
	}
}

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
     726:	80 91 fe 01 	lds	r24, 0x01FE
     72a:	88 23       	and	r24, r24
     72c:	9c f4       	brge	.+38     	; 0x754 <Endpoint_ClearStatusStage+0x2e>
     72e:	04 c0       	rjmp	.+8      	; 0x738 <Endpoint_ClearStatusStage+0x12>
	{
		while (!(Endpoint_IsOUTReceived()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
     730:	80 91 fd 01 	lds	r24, 0x01FD
     734:	88 23       	and	r24, r24
     736:	b9 f0       	breq	.+46     	; 0x766 <Endpoint_ClearStatusStage+0x40>
			 *  \return Boolean true if current endpoint is has received an OUT packet, false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     738:	80 91 e8 00 	lds	r24, 0x00E8

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
	{
		while (!(Endpoint_IsOUTReceived()))
     73c:	82 ff       	sbrs	r24, 2
     73e:	f8 cf       	rjmp	.-16     	; 0x730 <Endpoint_ClearStatusStage+0xa>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     740:	80 91 e8 00 	lds	r24, 0x00E8
     744:	8b 77       	andi	r24, 0x7B	; 123
     746:	80 93 e8 00 	sts	0x00E8, r24
     74a:	08 95       	ret
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
     74c:	80 91 fd 01 	lds	r24, 0x01FD
     750:	88 23       	and	r24, r24
     752:	49 f0       	breq	.+18     	; 0x766 <Endpoint_ClearStatusStage+0x40>
			 *  \return Boolean true if the current endpoint is ready for an IN packet, false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     754:	80 91 e8 00 	lds	r24, 0x00E8

		Endpoint_ClearOUT();
	}
	else
	{
		while (!(Endpoint_IsINReady()))
     758:	80 ff       	sbrs	r24, 0
     75a:	f8 cf       	rjmp	.-16     	; 0x74c <Endpoint_ClearStatusStage+0x26>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     75c:	80 91 e8 00 	lds	r24, 0x00E8
     760:	8e 77       	andi	r24, 0x7E	; 126
     762:	80 93 e8 00 	sts	0x00E8, r24
     766:	08 95       	ret

00000768 <Endpoint_WaitUntilReady>:
			/** Returns the current USB frame number, when in device mode. Every millisecond the USB bus is active (i.e. enumerated to a host)
			 *  the frame number is incremented by one.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
     768:	40 91 e4 00 	lds	r20, 0x00E4
     76c:	50 91 e5 00 	lds	r21, 0x00E5
     770:	24 e6       	ldi	r18, 0x64	; 100
			 *  \return The currently selected endpoint's direction, as a ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & ENDPOINT_DIR_IN);
     772:	80 91 ec 00 	lds	r24, 0x00EC

	uint16_t PreviousFrameNumber = USB_Device_GetFrameNumber();

	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
     776:	80 ff       	sbrs	r24, 0
     778:	05 c0       	rjmp	.+10     	; 0x784 <Endpoint_WaitUntilReady+0x1c>
			 *  \return Boolean true if the current endpoint is ready for an IN packet, false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     77a:	80 91 e8 00 	lds	r24, 0x00E8
		{
			if (Endpoint_IsINReady())
     77e:	80 ff       	sbrs	r24, 0
     780:	05 c0       	rjmp	.+10     	; 0x78c <Endpoint_WaitUntilReady+0x24>
     782:	22 c0       	rjmp	.+68     	; 0x7c8 <Endpoint_WaitUntilReady+0x60>
			 *  \return Boolean true if current endpoint is has received an OUT packet, false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     784:	80 91 e8 00 	lds	r24, 0x00E8
			  return ENDPOINT_READYWAIT_NoError;
		}
		else
		{
			if (Endpoint_IsOUTReceived())
     788:	82 fd       	sbrc	r24, 2
     78a:	1e c0       	rjmp	.+60     	; 0x7c8 <Endpoint_WaitUntilReady+0x60>
			  return ENDPOINT_READYWAIT_NoError;
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     78c:	80 91 fd 01 	lds	r24, 0x01FD

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     790:	88 23       	and	r24, r24
     792:	11 f4       	brne	.+4      	; 0x798 <Endpoint_WaitUntilReady+0x30>
     794:	82 e0       	ldi	r24, 0x02	; 2
     796:	08 95       	ret
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     798:	85 30       	cpi	r24, 0x05	; 5
     79a:	11 f4       	brne	.+4      	; 0x7a0 <Endpoint_WaitUntilReady+0x38>
     79c:	83 e0       	ldi	r24, 0x03	; 3
     79e:	08 95       	ret
			 *  \return Boolean true if the currently selected endpoint is stalled, false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
     7a0:	80 91 eb 00 	lds	r24, 0x00EB
		  return ENDPOINT_READYWAIT_BusSuspended;
		else if (Endpoint_IsStalled())
     7a4:	85 ff       	sbrs	r24, 5
     7a6:	02 c0       	rjmp	.+4      	; 0x7ac <Endpoint_WaitUntilReady+0x44>
     7a8:	81 e0       	ldi	r24, 0x01	; 1
     7aa:	08 95       	ret
     7ac:	80 91 e4 00 	lds	r24, 0x00E4
     7b0:	90 91 e5 00 	lds	r25, 0x00E5
		  return ENDPOINT_READYWAIT_EndpointStalled;

		uint16_t CurrentFrameNumber = USB_Device_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
     7b4:	84 17       	cp	r24, r20
     7b6:	95 07       	cpc	r25, r21
     7b8:	e1 f2       	breq	.-72     	; 0x772 <Endpoint_WaitUntilReady+0xa>
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
     7ba:	22 23       	and	r18, r18
     7bc:	11 f4       	brne	.+4      	; 0x7c2 <Endpoint_WaitUntilReady+0x5a>
     7be:	84 e0       	ldi	r24, 0x04	; 4
     7c0:	08 95       	ret
     7c2:	21 50       	subi	r18, 0x01	; 1
     7c4:	ac 01       	movw	r20, r24
     7c6:	d5 cf       	rjmp	.-86     	; 0x772 <Endpoint_WaitUntilReady+0xa>
     7c8:	80 e0       	ldi	r24, 0x00	; 0
			  return ENDPOINT_READYWAIT_Timeout;
		}
	}
}
     7ca:	08 95       	ret

000007cc <USB_Host_WaitMS>:
		USB_ResetInterface();
	}
}

uint8_t USB_Host_WaitMS(uint8_t MS)
{
     7cc:	98 2f       	mov	r25, r24
			 *  \return Boolean true if the bus is currently suspended, false otherwise.
			 */
			static inline bool USB_Host_IsBusSuspended(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusSuspended(void)
			{
				return ((UHCON & (1 << SOFEN)) ? false : true);
     7ce:	20 91 9e 00 	lds	r18, 0x009E
	bool    BusSuspended = USB_Host_IsBusSuspended();
	uint8_t ErrorCode    = HOST_WAITERROR_Successful;
	bool    HSOFIEnabled = USB_INT_IsEnabled(USB_INT_HSOFI);
     7d2:	30 91 a0 00 	lds	r19, 0x00A0

	USB_INT_Disable(USB_INT_HSOFI);
     7d6:	80 91 a0 00 	lds	r24, 0x00A0
     7da:	8f 7d       	andi	r24, 0xDF	; 223
     7dc:	80 93 a0 00 	sts	0x00A0, r24
	USB_INT_Clear(USB_INT_HSOFI);
     7e0:	80 91 9f 00 	lds	r24, 0x009F
     7e4:	8f 7d       	andi	r24, 0xDF	; 223
     7e6:	80 93 9f 00 	sts	0x009F, r24
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
     7ea:	80 91 9e 00 	lds	r24, 0x009E
     7ee:	81 60       	ori	r24, 0x01	; 1
     7f0:	80 93 9e 00 	sts	0x009E, r24
     7f4:	28 c0       	rjmp	.+80     	; 0x846 <USB_Host_WaitMS+0x7a>

	USB_Host_ResumeBus();

	while (MS)
	{
		if (USB_INT_HasOccurred(USB_INT_HSOFI))
     7f6:	80 91 9f 00 	lds	r24, 0x009F
     7fa:	85 ff       	sbrs	r24, 5
     7fc:	06 c0       	rjmp	.+12     	; 0x80a <USB_Host_WaitMS+0x3e>
		{
			USB_INT_Clear(USB_INT_HSOFI);
     7fe:	80 91 9f 00 	lds	r24, 0x009F
     802:	8f 7d       	andi	r24, 0xDF	; 223
     804:	80 93 9f 00 	sts	0x009F, r24
			MS--;
     808:	91 50       	subi	r25, 0x01	; 1
		}

		if ((USB_HostState == HOST_STATE_Unattached) || (USB_CurrentMode != USB_MODE_Host))
     80a:	80 91 06 02 	lds	r24, 0x0206
     80e:	82 30       	cpi	r24, 0x02	; 2
     810:	e9 f0       	breq	.+58     	; 0x84c <USB_Host_WaitMS+0x80>
     812:	80 91 f5 01 	lds	r24, 0x01F5
     816:	82 30       	cpi	r24, 0x02	; 2
     818:	c9 f4       	brne	.+50     	; 0x84c <USB_Host_WaitMS+0x80>
			 *  \return Boolean true if an error has occurred on the selected pipe, false otherwise.
			 */
			static inline bool Pipe_IsError(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsError(void)
			{
				return ((UPINTX & (1 << PERRI)) ? true : false);
     81a:	80 91 a6 00 	lds	r24, 0x00A6
			ErrorCode = HOST_WAITERROR_DeviceDisconnect;

			break;
		}

		if (Pipe_IsError() == true)
     81e:	84 ff       	sbrs	r24, 4
     820:	07 c0       	rjmp	.+14     	; 0x830 <USB_Host_WaitMS+0x64>

			/** Clears the master pipe error flag. */
			static inline void Pipe_ClearError(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearError(void)
			{
				UPINTX &= ~(1 << PERRI);
     822:	80 91 a6 00 	lds	r24, 0x00A6
     826:	8f 7e       	andi	r24, 0xEF	; 239
     828:	80 93 a6 00 	sts	0x00A6, r24
     82c:	92 e0       	ldi	r25, 0x02	; 2
     82e:	0f c0       	rjmp	.+30     	; 0x84e <USB_Host_WaitMS+0x82>
			 *  \return Boolean true if the current pipe has been stalled by the attached device, false otherwise.
			 */
			static inline bool Pipe_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsStalled(void)
			{
				return ((UPINTX & (1 << RXSTALLI)) ? true : false);
     830:	80 91 a6 00 	lds	r24, 0x00A6
			ErrorCode = HOST_WAITERROR_PipeError;

			break;
		}

		if (Pipe_IsStalled() == true)
     834:	81 ff       	sbrs	r24, 1
     836:	07 c0       	rjmp	.+14     	; 0x846 <USB_Host_WaitMS+0x7a>
			 *  \ingroup Group_PipePacketManagement
			 */
			static inline void Pipe_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearStall(void)
			{
				UPINTX &= ~(1 << RXSTALLI);
     838:	80 91 a6 00 	lds	r24, 0x00A6
     83c:	8d 7f       	andi	r24, 0xFD	; 253
     83e:	80 93 a6 00 	sts	0x00A6, r24
     842:	93 e0       	ldi	r25, 0x03	; 3
     844:	04 c0       	rjmp	.+8      	; 0x84e <USB_Host_WaitMS+0x82>
	USB_INT_Disable(USB_INT_HSOFI);
	USB_INT_Clear(USB_INT_HSOFI);

	USB_Host_ResumeBus();

	while (MS)
     846:	99 23       	and	r25, r25
     848:	b1 f6       	brne	.-84     	; 0x7f6 <USB_Host_WaitMS+0x2a>
     84a:	01 c0       	rjmp	.+2      	; 0x84e <USB_Host_WaitMS+0x82>
     84c:	91 e0       	ldi	r25, 0x01	; 1

			break;
		}
	}

	if (BusSuspended)
     84e:	20 fd       	sbrc	r18, 0
     850:	05 c0       	rjmp	.+10     	; 0x85c <USB_Host_WaitMS+0x90>
			 *  messages to the device.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				UHCON &= ~(1 << SOFEN);
     852:	80 91 9e 00 	lds	r24, 0x009E
     856:	8e 7f       	andi	r24, 0xFE	; 254
     858:	80 93 9e 00 	sts	0x009E, r24
	  USB_Host_SuspendBus();

	if (HSOFIEnabled)
     85c:	35 ff       	sbrs	r19, 5
     85e:	05 c0       	rjmp	.+10     	; 0x86a <USB_Host_WaitMS+0x9e>
	  USB_INT_Enable(USB_INT_HSOFI);
     860:	80 91 a0 00 	lds	r24, 0x00A0
     864:	80 62       	ori	r24, 0x20	; 32
     866:	80 93 a0 00 	sts	0x00A0, r24

	return ErrorCode;
}
     86a:	89 2f       	mov	r24, r25
     86c:	08 95       	ret

0000086e <USB_Host_ResetDevice>:
			 *  \return Boolean true if the bus is currently suspended, false otherwise.
			 */
			static inline bool USB_Host_IsBusSuspended(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusSuspended(void)
			{
				return ((UHCON & (1 << SOFEN)) ? false : true);
     86e:	60 91 9e 00 	lds	r22, 0x009E

static void USB_Host_ResetDevice(void)
{
	bool BusSuspended = USB_Host_IsBusSuspended();

	USB_INT_Disable(USB_INT_DDISCI);
     872:	80 91 a0 00 	lds	r24, 0x00A0
     876:	8d 7f       	andi	r24, 0xFD	; 253
     878:	80 93 a0 00 	sts	0x00A0, r24
			 *  woken up automatically and the bus resumed after the reset has been correctly issued.
			 */
			static inline void USB_Host_ResetBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResetBus(void)
			{
				UHCON |=  (1 << RESET);
     87c:	80 91 9e 00 	lds	r24, 0x009E
     880:	82 60       	ori	r24, 0x02	; 2
     882:	80 93 9e 00 	sts	0x009E, r24
			 *  \return Boolean true if no bus reset is currently being sent, false otherwise.
			 */
			static inline bool USB_Host_IsBusResetComplete(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusResetComplete(void)
			{
				return ((UHCON & (1 << RESET)) ? false : true);
     886:	80 91 9e 00 	lds	r24, 0x009E

	USB_Host_ResetBus();
	while (!(USB_Host_IsBusResetComplete()));
     88a:	81 fd       	sbrc	r24, 1
     88c:	fc cf       	rjmp	.-8      	; 0x886 <USB_Host_ResetDevice+0x18>
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
     88e:	80 91 9e 00 	lds	r24, 0x009E
     892:	81 60       	ori	r24, 0x01	; 1
     894:	80 93 9e 00 	sts	0x009E, r24
	USB_Host_ResumeBus();

	bool HSOFIEnabled = USB_INT_IsEnabled(USB_INT_HSOFI);
     898:	30 91 a0 00 	lds	r19, 0x00A0

	USB_INT_Disable(USB_INT_HSOFI);
     89c:	80 91 a0 00 	lds	r24, 0x00A0
     8a0:	8f 7d       	andi	r24, 0xDF	; 223
     8a2:	80 93 a0 00 	sts	0x00A0, r24
	USB_INT_Clear(USB_INT_HSOFI);
     8a6:	80 91 9f 00 	lds	r24, 0x009F
     8aa:	8f 7d       	andi	r24, 0xDF	; 223
     8ac:	80 93 9f 00 	sts	0x009F, r24
     8b0:	2a e0       	ldi	r18, 0x0A	; 10
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     8b2:	40 ed       	ldi	r20, 0xD0	; 208
     8b4:	57 e0       	ldi	r21, 0x07	; 7
		/* Workaround for powerless-pull-up devices. After a USB bus reset,
		   all disconnection interrupts are suppressed while a USB frame is
		   looked for - if it is found within 10ms, the device is still
		   present.                                                        */

		if (USB_INT_HasOccurred(USB_INT_HSOFI))
     8b6:	80 91 9f 00 	lds	r24, 0x009F
     8ba:	85 ff       	sbrs	r24, 5
     8bc:	0b c0       	rjmp	.+22     	; 0x8d4 <USB_Host_ResetDevice+0x66>
		{
			USB_INT_Clear(USB_INT_HSOFI);
     8be:	80 91 9f 00 	lds	r24, 0x009F
     8c2:	8f 7d       	andi	r24, 0xDF	; 223
     8c4:	80 93 9f 00 	sts	0x009F, r24
			USB_INT_Clear(USB_INT_DDISCI);
     8c8:	80 91 9f 00 	lds	r24, 0x009F
     8cc:	8d 7f       	andi	r24, 0xFD	; 253
     8ce:	80 93 9f 00 	sts	0x009F, r24
     8d2:	05 c0       	rjmp	.+10     	; 0x8de <USB_Host_ResetDevice+0x70>
     8d4:	ca 01       	movw	r24, r20
     8d6:	01 97       	sbiw	r24, 0x01	; 1
     8d8:	f1 f7       	brne	.-4      	; 0x8d6 <USB_Host_ResetDevice+0x68>
	bool HSOFIEnabled = USB_INT_IsEnabled(USB_INT_HSOFI);

	USB_INT_Disable(USB_INT_HSOFI);
	USB_INT_Clear(USB_INT_HSOFI);

	for (uint8_t MSRem = 10; MSRem != 0; MSRem--)
     8da:	21 50       	subi	r18, 0x01	; 1
     8dc:	61 f7       	brne	.-40     	; 0x8b6 <USB_Host_ResetDevice+0x48>
		}

		_delay_ms(1);
	}

	if (HSOFIEnabled)
     8de:	35 ff       	sbrs	r19, 5
     8e0:	05 c0       	rjmp	.+10     	; 0x8ec <USB_Host_ResetDevice+0x7e>
	  USB_INT_Enable(USB_INT_HSOFI);
     8e2:	80 91 a0 00 	lds	r24, 0x00A0
     8e6:	80 62       	ori	r24, 0x20	; 32
     8e8:	80 93 a0 00 	sts	0x00A0, r24

	if (BusSuspended)
     8ec:	60 fd       	sbrc	r22, 0
     8ee:	05 c0       	rjmp	.+10     	; 0x8fa <USB_Host_ResetDevice+0x8c>
			 *  messages to the device.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				UHCON &= ~(1 << SOFEN);
     8f0:	80 91 9e 00 	lds	r24, 0x009E
     8f4:	8e 7f       	andi	r24, 0xFE	; 254
     8f6:	80 93 9e 00 	sts	0x009E, r24
	  USB_Host_SuspendBus();

	USB_INT_Enable(USB_INT_DDISCI);
     8fa:	80 91 a0 00 	lds	r24, 0x00A0
     8fe:	82 60       	ori	r24, 0x02	; 2
     900:	80 93 a0 00 	sts	0x00A0, r24
}
     904:	08 95       	ret

00000906 <USB_Host_SetDeviceConfiguration>:

uint8_t USB_Host_SetDeviceConfiguration(const uint8_t ConfigNumber)
{
	USB_ControlRequest = (USB_Request_Header_t)
     906:	10 92 fe 01 	sts	0x01FE, r1
     90a:	99 e0       	ldi	r25, 0x09	; 9
     90c:	90 93 ff 01 	sts	0x01FF, r25
     910:	80 93 00 02 	sts	0x0200, r24
     914:	10 92 01 02 	sts	0x0201, r1
     918:	10 92 03 02 	sts	0x0203, r1
     91c:	10 92 02 02 	sts	0x0202, r1
     920:	10 92 05 02 	sts	0x0205, r1
     924:	10 92 04 02 	sts	0x0204, r1
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
     928:	10 92 a7 00 	sts	0x00A7, r1
			.wLength       = 0,
		};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	return USB_Host_SendControlRequest(NULL);
     92c:	80 e0       	ldi	r24, 0x00	; 0
     92e:	90 e0       	ldi	r25, 0x00	; 0
}
     930:	79 c7       	rjmp	.+3826   	; 0x1824 <USB_Host_SendControlRequest>

00000932 <USB_Host_ProcessNextHostState>:

#define  __INCLUDE_FROM_HOST_C
#include "Host.h"

void USB_Host_ProcessNextHostState(void)
{
     932:	ef 92       	push	r14
     934:	0f 93       	push	r16
     936:	1f 93       	push	r17
     938:	df 93       	push	r29
     93a:	cf 93       	push	r28
     93c:	cd b7       	in	r28, 0x3d	; 61
     93e:	de b7       	in	r29, 0x3e	; 62
     940:	28 97       	sbiw	r28, 0x08	; 8
     942:	0f b6       	in	r0, 0x3f	; 63
     944:	f8 94       	cli
     946:	de bf       	out	0x3e, r29	; 62
     948:	0f be       	out	0x3f, r0	; 63
     94a:	cd bf       	out	0x3d, r28	; 61
	uint8_t SubErrorCode = HOST_ENUMERROR_NoError;

	static uint16_t WaitMSRemaining;
	static uint8_t  PostWaitState;

	switch (USB_HostState)
     94c:	80 91 06 02 	lds	r24, 0x0206
     950:	86 30       	cpi	r24, 0x06	; 6
     952:	09 f4       	brne	.+2      	; 0x956 <USB_Host_ProcessNextHostState+0x24>
     954:	94 c0       	rjmp	.+296    	; 0xa7e <USB_Host_ProcessNextHostState+0x14c>
     956:	87 30       	cpi	r24, 0x07	; 7
     958:	70 f4       	brcc	.+28     	; 0x976 <USB_Host_ProcessNextHostState+0x44>
     95a:	83 30       	cpi	r24, 0x03	; 3
     95c:	c1 f1       	breq	.+112    	; 0x9ce <USB_Host_ProcessNextHostState+0x9c>
     95e:	84 30       	cpi	r24, 0x04	; 4
     960:	20 f4       	brcc	.+8      	; 0x96a <USB_Host_ProcessNextHostState+0x38>
     962:	81 30       	cpi	r24, 0x01	; 1
     964:	09 f0       	breq	.+2      	; 0x968 <USB_Host_ProcessNextHostState+0x36>
     966:	07 c1       	rjmp	.+526    	; 0xb76 <USB_Host_ProcessNextHostState+0x244>
     968:	13 c0       	rjmp	.+38     	; 0x990 <USB_Host_ProcessNextHostState+0x5e>
     96a:	84 30       	cpi	r24, 0x04	; 4
     96c:	c1 f1       	breq	.+112    	; 0x9de <USB_Host_ProcessNextHostState+0xac>
     96e:	85 30       	cpi	r24, 0x05	; 5
     970:	09 f0       	breq	.+2      	; 0x974 <USB_Host_ProcessNextHostState+0x42>
     972:	01 c1       	rjmp	.+514    	; 0xb76 <USB_Host_ProcessNextHostState+0x244>
     974:	5b c0       	rjmp	.+182    	; 0xa2c <USB_Host_ProcessNextHostState+0xfa>
     976:	88 30       	cpi	r24, 0x08	; 8
     978:	09 f4       	brne	.+2      	; 0x97c <USB_Host_ProcessNextHostState+0x4a>
     97a:	9b c0       	rjmp	.+310    	; 0xab2 <USB_Host_ProcessNextHostState+0x180>
     97c:	88 30       	cpi	r24, 0x08	; 8
     97e:	08 f4       	brcc	.+2      	; 0x982 <USB_Host_ProcessNextHostState+0x50>
     980:	8a c0       	rjmp	.+276    	; 0xa96 <USB_Host_ProcessNextHostState+0x164>
     982:	89 30       	cpi	r24, 0x09	; 9
     984:	09 f4       	brne	.+2      	; 0x988 <USB_Host_ProcessNextHostState+0x56>
     986:	b4 c0       	rjmp	.+360    	; 0xaf0 <USB_Host_ProcessNextHostState+0x1be>
     988:	8a 30       	cpi	r24, 0x0A	; 10
     98a:	09 f0       	breq	.+2      	; 0x98e <USB_Host_ProcessNextHostState+0x5c>
     98c:	f4 c0       	rjmp	.+488    	; 0xb76 <USB_Host_ProcessNextHostState+0x244>
     98e:	d9 c0       	rjmp	.+434    	; 0xb42 <USB_Host_ProcessNextHostState+0x210>
	{
		case HOST_STATE_WaitForDevice:
			if (WaitMSRemaining)
     990:	00 91 f3 01 	lds	r16, 0x01F3
     994:	10 91 f4 01 	lds	r17, 0x01F4
     998:	01 15       	cp	r16, r1
     99a:	11 05       	cpc	r17, r1
     99c:	09 f4       	brne	.+2      	; 0x9a0 <USB_Host_ProcessNextHostState+0x6e>
     99e:	eb c0       	rjmp	.+470    	; 0xb76 <USB_Host_ProcessNextHostState+0x244>
			{
				if ((SubErrorCode = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
     9a0:	81 e0       	ldi	r24, 0x01	; 1
     9a2:	14 df       	rcall	.-472    	; 0x7cc <USB_Host_WaitMS>
     9a4:	68 2f       	mov	r22, r24
     9a6:	88 23       	and	r24, r24
     9a8:	31 f0       	breq	.+12     	; 0x9b6 <USB_Host_ProcessNextHostState+0x84>
				{
					USB_HostState = PostWaitState;
     9aa:	80 91 f2 01 	lds	r24, 0x01F2
     9ae:	80 93 06 02 	sts	0x0206, r24
     9b2:	91 e0       	ldi	r25, 0x01	; 1
     9b4:	dc c0       	rjmp	.+440    	; 0xb6e <USB_Host_ProcessNextHostState+0x23c>
					ErrorCode     = HOST_ENUMERROR_WaitStage;
					break;
				}

				if (!(--WaitMSRemaining))
     9b6:	c8 01       	movw	r24, r16
     9b8:	01 97       	sbiw	r24, 0x01	; 1
     9ba:	90 93 f4 01 	sts	0x01F4, r25
     9be:	80 93 f3 01 	sts	0x01F3, r24
     9c2:	89 2b       	or	r24, r25
     9c4:	09 f0       	breq	.+2      	; 0x9c8 <USB_Host_ProcessNextHostState+0x96>
     9c6:	d7 c0       	rjmp	.+430    	; 0xb76 <USB_Host_ProcessNextHostState+0x244>
				  USB_HostState = PostWaitState;
     9c8:	80 91 f2 01 	lds	r24, 0x01F2
     9cc:	bf c0       	rjmp	.+382    	; 0xb4c <USB_Host_ProcessNextHostState+0x21a>
			}

			break;
		case HOST_STATE_Powered:
			WaitMSRemaining = HOST_DEVICE_SETTLE_DELAY_MS;
     9ce:	88 ee       	ldi	r24, 0xE8	; 232
     9d0:	93 e0       	ldi	r25, 0x03	; 3
     9d2:	90 93 f4 01 	sts	0x01F4, r25
     9d6:	80 93 f3 01 	sts	0x01F3, r24

			USB_HostState = HOST_STATE_Powered_WaitForDeviceSettle;
     9da:	84 e0       	ldi	r24, 0x04	; 4
     9dc:	b7 c0       	rjmp	.+366    	; 0xb4c <USB_Host_ProcessNextHostState+0x21a>
			break;
		case HOST_STATE_Powered_WaitForDeviceSettle:
			if (WaitMSRemaining--)
     9de:	80 91 f3 01 	lds	r24, 0x01F3
     9e2:	90 91 f4 01 	lds	r25, 0x01F4
     9e6:	01 97       	sbiw	r24, 0x01	; 1
     9e8:	90 93 f4 01 	sts	0x01F4, r25
     9ec:	80 93 f3 01 	sts	0x01F3, r24
     9f0:	01 96       	adiw	r24, 0x01	; 1
     9f2:	29 f0       	breq	.+10     	; 0x9fe <USB_Host_ProcessNextHostState+0xcc>
     9f4:	80 ed       	ldi	r24, 0xD0	; 208
     9f6:	97 e0       	ldi	r25, 0x07	; 7
     9f8:	01 97       	sbiw	r24, 0x01	; 1
     9fa:	f1 f7       	brne	.-4      	; 0x9f8 <USB_Host_ProcessNextHostState+0xc6>
     9fc:	bc c0       	rjmp	.+376    	; 0xb76 <USB_Host_ProcessNextHostState+0x244>
			}

			static inline void USB_Host_VBUS_Manual_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Manual_Off(void)
			{
				PORTE  &= ~(1 << 7);
     9fe:	77 98       	cbi	0x0e, 7	; 14

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON  |=  (1 << OTGPADE);
     a00:	80 91 d8 00 	lds	r24, 0x00D8
     a04:	80 61       	ori	r24, 0x10	; 16
     a06:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_Host_VBUS_Auto_Enable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Enable(void)
			{
				OTGCON &= ~(1 << VBUSHWC);
     a0a:	80 91 dd 00 	lds	r24, 0x00DD
     a0e:	8b 7f       	andi	r24, 0xFB	; 251
     a10:	80 93 dd 00 	sts	0x00DD, r24
				UHWCON |=  (1 << UVCONE);
     a14:	80 91 d7 00 	lds	r24, 0x00D7
     a18:	80 61       	ori	r24, 0x10	; 16
     a1a:	80 93 d7 00 	sts	0x00D7, r24
			}

			static inline void USB_Host_VBUS_Auto_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_On(void)
			{
				OTGCON |=  (1 << VBUSREQ);
     a1e:	80 91 dd 00 	lds	r24, 0x00DD
     a22:	82 60       	ori	r24, 0x02	; 2
     a24:	80 93 dd 00 	sts	0x00DD, r24

				USB_OTGPAD_On();
				USB_Host_VBUS_Auto_Enable();
				USB_Host_VBUS_Auto_On();

				USB_HostState = HOST_STATE_Powered_WaitForConnect;
     a28:	85 e0       	ldi	r24, 0x05	; 5
     a2a:	90 c0       	rjmp	.+288    	; 0xb4c <USB_Host_ProcessNextHostState+0x21a>
			}

			break;
		case HOST_STATE_Powered_WaitForConnect:
			if (USB_INT_HasOccurred(USB_INT_DCONNI))
     a2c:	80 91 9f 00 	lds	r24, 0x009F
     a30:	80 ff       	sbrs	r24, 0
     a32:	a1 c0       	rjmp	.+322    	; 0xb76 <USB_Host_ProcessNextHostState+0x244>
			{
				USB_INT_Clear(USB_INT_DCONNI);
     a34:	80 91 9f 00 	lds	r24, 0x009F
     a38:	8e 7f       	andi	r24, 0xFE	; 254
     a3a:	80 93 9f 00 	sts	0x009F, r24
				USB_INT_Clear(USB_INT_DDISCI);
     a3e:	80 91 9f 00 	lds	r24, 0x009F
     a42:	8d 7f       	andi	r24, 0xFD	; 253
     a44:	80 93 9f 00 	sts	0x009F, r24

				USB_INT_Clear(USB_INT_VBERRI);
     a48:	80 91 df 00 	lds	r24, 0x00DF
     a4c:	8d 7f       	andi	r24, 0xFD	; 253
     a4e:	80 93 df 00 	sts	0x00DF, r24
				USB_INT_Enable(USB_INT_VBERRI);
     a52:	80 91 de 00 	lds	r24, 0x00DE
     a56:	82 60       	ori	r24, 0x02	; 2
     a58:	80 93 de 00 	sts	0x00DE, r24
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
     a5c:	80 91 9e 00 	lds	r24, 0x009E
     a60:	81 60       	ori	r24, 0x01	; 1
     a62:	80 93 9e 00 	sts	0x009E, r24

				USB_Host_ResumeBus();
				Pipe_ClearPipes();
     a66:	c9 d0       	rcall	.+402    	; 0xbfa <Pipe_ClearPipes>

				HOST_TASK_NONBLOCK_WAIT(100, HOST_STATE_Powered_DoReset);
     a68:	81 e0       	ldi	r24, 0x01	; 1
     a6a:	80 93 06 02 	sts	0x0206, r24
     a6e:	84 e6       	ldi	r24, 0x64	; 100
     a70:	90 e0       	ldi	r25, 0x00	; 0
     a72:	90 93 f4 01 	sts	0x01F4, r25
     a76:	80 93 f3 01 	sts	0x01F3, r24
     a7a:	86 e0       	ldi	r24, 0x06	; 6
     a7c:	5f c0       	rjmp	.+190    	; 0xb3c <USB_Host_ProcessNextHostState+0x20a>
			}

			break;
		case HOST_STATE_Powered_DoReset:
			USB_Host_ResetDevice();
     a7e:	f7 de       	rcall	.-530    	; 0x86e <USB_Host_ResetDevice>

			HOST_TASK_NONBLOCK_WAIT(200, HOST_STATE_Powered_ConfigPipe);
     a80:	81 e0       	ldi	r24, 0x01	; 1
     a82:	80 93 06 02 	sts	0x0206, r24
     a86:	88 ec       	ldi	r24, 0xC8	; 200
     a88:	90 e0       	ldi	r25, 0x00	; 0
     a8a:	90 93 f4 01 	sts	0x01F4, r25
     a8e:	80 93 f3 01 	sts	0x01F3, r24
     a92:	87 e0       	ldi	r24, 0x07	; 7
     a94:	53 c0       	rjmp	.+166    	; 0xb3c <USB_Host_ProcessNextHostState+0x20a>
			break;
		case HOST_STATE_Powered_ConfigPipe:
			Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL,
     a96:	80 e0       	ldi	r24, 0x00	; 0
     a98:	60 e0       	ldi	r22, 0x00	; 0
     a9a:	40 e0       	ldi	r20, 0x00	; 0
     a9c:	20 e0       	ldi	r18, 0x00	; 0
     a9e:	00 e4       	ldi	r16, 0x40	; 64
     aa0:	10 e0       	ldi	r17, 0x00	; 0
     aa2:	ee 24       	eor	r14, r14
     aa4:	74 d0       	rcall	.+232    	; 0xb8e <Pipe_ConfigurePipe>
			 *  \return Boolean true if the selected pipe is configured, false otherwise.
			 */
			static inline bool Pipe_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsConfigured(void)
			{
				return ((UPSTAX & (1 << CFGOK)) ? true : false);
     aa6:	80 91 ac 00 	lds	r24, 0x00AC
							   PIPE_TOKEN_SETUP, ENDPOINT_CONTROLEP,
							   PIPE_CONTROLPIPE_DEFAULT_SIZE, PIPE_BANK_SINGLE);

			if (!(Pipe_IsConfigured()))
     aaa:	87 ff       	sbrs	r24, 7
     aac:	5e c0       	rjmp	.+188    	; 0xb6a <USB_Host_ProcessNextHostState+0x238>
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
				SubErrorCode = 0;
				break;
			}

			USB_HostState = HOST_STATE_Default;
     aae:	88 e0       	ldi	r24, 0x08	; 8
     ab0:	4d c0       	rjmp	.+154    	; 0xb4c <USB_Host_ProcessNextHostState+0x21a>
			break;
		case HOST_STATE_Default:
			USB_ControlRequest = (USB_Request_Header_t)
     ab2:	ae ef       	ldi	r26, 0xFE	; 254
     ab4:	b1 e0       	ldi	r27, 0x01	; 1
     ab6:	eb ed       	ldi	r30, 0xDB	; 219
     ab8:	f1 e0       	ldi	r31, 0x01	; 1
     aba:	88 e0       	ldi	r24, 0x08	; 8
     abc:	01 90       	ld	r0, Z+
     abe:	0d 92       	st	X+, r0
     ac0:	81 50       	subi	r24, 0x01	; 1
     ac2:	e1 f7       	brne	.-8      	; 0xabc <USB_Host_ProcessNextHostState+0x18a>
					.wLength       = 8,
				};

			uint8_t DataBuffer[8];

			if ((SubErrorCode = USB_Host_SendControlRequest(DataBuffer)) != HOST_SENDCONTROL_Successful)
     ac4:	ce 01       	movw	r24, r28
     ac6:	01 96       	adiw	r24, 0x01	; 1
     ac8:	ad d6       	rcall	.+3418   	; 0x1824 <USB_Host_SendControlRequest>
     aca:	68 2f       	mov	r22, r24
     acc:	88 23       	and	r24, r24
     ace:	09 f0       	breq	.+2      	; 0xad2 <USB_Host_ProcessNextHostState+0x1a0>
     ad0:	4a c0       	rjmp	.+148    	; 0xb66 <USB_Host_ProcessNextHostState+0x234>
			{
				ErrorCode = HOST_ENUMERROR_ControlError;
				break;
			}

			USB_ControlPipeSize = DataBuffer[offsetof(USB_Descriptor_Device_t, Endpoint0Size)];
     ad2:	88 85       	ldd	r24, Y+8	; 0x08
     ad4:	80 93 e3 01 	sts	0x01E3, r24

			USB_Host_ResetDevice();
     ad8:	ca de       	rcall	.-620    	; 0x86e <USB_Host_ResetDevice>

			HOST_TASK_NONBLOCK_WAIT(200, HOST_STATE_Default_PostReset);
     ada:	81 e0       	ldi	r24, 0x01	; 1
     adc:	80 93 06 02 	sts	0x0206, r24
     ae0:	88 ec       	ldi	r24, 0xC8	; 200
     ae2:	90 e0       	ldi	r25, 0x00	; 0
     ae4:	90 93 f4 01 	sts	0x01F4, r25
     ae8:	80 93 f3 01 	sts	0x01F3, r24
     aec:	89 e0       	ldi	r24, 0x09	; 9
     aee:	26 c0       	rjmp	.+76     	; 0xb3c <USB_Host_ProcessNextHostState+0x20a>
			break;
		case HOST_STATE_Default_PostReset:
			Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL,
     af0:	00 91 e3 01 	lds	r16, 0x01E3
     af4:	80 e0       	ldi	r24, 0x00	; 0
     af6:	60 e0       	ldi	r22, 0x00	; 0
     af8:	40 e0       	ldi	r20, 0x00	; 0
     afa:	20 e0       	ldi	r18, 0x00	; 0
     afc:	10 e0       	ldi	r17, 0x00	; 0
     afe:	ee 24       	eor	r14, r14
     b00:	46 d0       	rcall	.+140    	; 0xb8e <Pipe_ConfigurePipe>
     b02:	80 91 ac 00 	lds	r24, 0x00AC
			                   PIPE_TOKEN_SETUP, ENDPOINT_CONTROLEP,
			                   USB_ControlPipeSize, PIPE_BANK_SINGLE);

			if (!(Pipe_IsConfigured()))
     b06:	87 ff       	sbrs	r24, 7
     b08:	30 c0       	rjmp	.+96     	; 0xb6a <USB_Host_ProcessNextHostState+0x238>
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
				SubErrorCode = 0;
				break;
			}

			USB_ControlRequest = (USB_Request_Header_t)
     b0a:	ae ef       	ldi	r26, 0xFE	; 254
     b0c:	b1 e0       	ldi	r27, 0x01	; 1
     b0e:	e3 ed       	ldi	r30, 0xD3	; 211
     b10:	f1 e0       	ldi	r31, 0x01	; 1
     b12:	88 e0       	ldi	r24, 0x08	; 8
     b14:	01 90       	ld	r0, Z+
     b16:	0d 92       	st	X+, r0
     b18:	81 50       	subi	r24, 0x01	; 1
     b1a:	e1 f7       	brne	.-8      	; 0xb14 <USB_Host_ProcessNextHostState+0x1e2>
					.wValue        = USB_HOST_DEVICEADDRESS,
					.wIndex        = 0,
					.wLength       = 0,
				};

			if ((SubErrorCode = USB_Host_SendControlRequest(NULL)) != HOST_SENDCONTROL_Successful)
     b1c:	80 e0       	ldi	r24, 0x00	; 0
     b1e:	90 e0       	ldi	r25, 0x00	; 0
     b20:	81 d6       	rcall	.+3330   	; 0x1824 <USB_Host_SendControlRequest>
     b22:	68 2f       	mov	r22, r24
     b24:	88 23       	and	r24, r24
     b26:	f9 f4       	brne	.+62     	; 0xb66 <USB_Host_ProcessNextHostState+0x234>
			{
				ErrorCode = HOST_ENUMERROR_ControlError;
				break;
			}

			HOST_TASK_NONBLOCK_WAIT(100, HOST_STATE_Default_PostAddressSet);
     b28:	81 e0       	ldi	r24, 0x01	; 1
     b2a:	80 93 06 02 	sts	0x0206, r24
     b2e:	84 e6       	ldi	r24, 0x64	; 100
     b30:	90 e0       	ldi	r25, 0x00	; 0
     b32:	90 93 f4 01 	sts	0x01F4, r25
     b36:	80 93 f3 01 	sts	0x01F3, r24
     b3a:	8a e0       	ldi	r24, 0x0A	; 10
     b3c:	80 93 f2 01 	sts	0x01F2, r24
     b40:	1a c0       	rjmp	.+52     	; 0xb76 <USB_Host_ProcessNextHostState+0x244>
			}

			static inline void USB_Host_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SetDeviceAddress(const uint8_t Address)
			{
				UHADDR  =  (Address & 0x7F);
     b42:	81 e0       	ldi	r24, 0x01	; 1
     b44:	80 93 a1 00 	sts	0x00A1, r24
			break;
		case HOST_STATE_Default_PostAddressSet:
			USB_Host_SetDeviceAddress(USB_HOST_DEVICEADDRESS);

			EVENT_USB_Host_DeviceEnumerationComplete();
     b48:	c6 dc       	rcall	.-1652   	; 0x4d6 <EVENT_USB_Host_DeviceEnumerationComplete>
			USB_HostState = HOST_STATE_Addressed;
     b4a:	8b e0       	ldi	r24, 0x0B	; 11
     b4c:	80 93 06 02 	sts	0x0206, r24
     b50:	12 c0       	rjmp	.+36     	; 0xb76 <USB_Host_ProcessNextHostState+0x244>
			break;
	}

	if ((ErrorCode != HOST_ENUMERROR_NoError) && (USB_HostState != HOST_STATE_Unattached))
	{
		EVENT_USB_Host_DeviceEnumerationFailed(ErrorCode, SubErrorCode);
     b52:	89 2f       	mov	r24, r25
     b54:	7a dd       	rcall	.-1292   	; 0x64a <EVENT_USB_Host_DeviceEnumerationFailed>
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
     b56:	80 91 dd 00 	lds	r24, 0x00DD
     b5a:	81 60       	ori	r24, 0x01	; 1
     b5c:	80 93 dd 00 	sts	0x00DD, r24

		USB_Host_VBUS_Auto_Off();

		EVENT_USB_Host_DeviceUnattached();
     b60:	bd dd       	rcall	.-1158   	; 0x6dc <EVENT_USB_Host_DeviceUnattached>

		USB_ResetInterface();
     b62:	d4 d0       	rcall	.+424    	; 0xd0c <USB_ResetInterface>
     b64:	08 c0       	rjmp	.+16     	; 0xb76 <USB_Host_ProcessNextHostState+0x244>
	}
}
     b66:	93 e0       	ldi	r25, 0x03	; 3
     b68:	02 c0       	rjmp	.+4      	; 0xb6e <USB_Host_ProcessNextHostState+0x23c>
     b6a:	94 e0       	ldi	r25, 0x04	; 4
     b6c:	60 e0       	ldi	r22, 0x00	; 0
			EVENT_USB_Host_DeviceEnumerationComplete();
			USB_HostState = HOST_STATE_Addressed;
			break;
	}

	if ((ErrorCode != HOST_ENUMERROR_NoError) && (USB_HostState != HOST_STATE_Unattached))
     b6e:	80 91 06 02 	lds	r24, 0x0206
     b72:	82 30       	cpi	r24, 0x02	; 2
     b74:	71 f7       	brne	.-36     	; 0xb52 <USB_Host_ProcessNextHostState+0x220>

		EVENT_USB_Host_DeviceUnattached();

		USB_ResetInterface();
	}
}
     b76:	28 96       	adiw	r28, 0x08	; 8
     b78:	0f b6       	in	r0, 0x3f	; 63
     b7a:	f8 94       	cli
     b7c:	de bf       	out	0x3e, r29	; 62
     b7e:	0f be       	out	0x3f, r0	; 63
     b80:	cd bf       	out	0x3d, r28	; 61
     b82:	cf 91       	pop	r28
     b84:	df 91       	pop	r29
     b86:	1f 91       	pop	r17
     b88:	0f 91       	pop	r16
     b8a:	ef 90       	pop	r14
     b8c:	08 95       	ret

00000b8e <Pipe_ConfigurePipe>:
                        const uint8_t Type,
                        const uint8_t Token,
                        const uint8_t EndpointNumber,
                        const uint16_t Size,
                        const uint8_t Banks)
{
     b8e:	ef 92       	push	r14
     b90:	0f 93       	push	r16
     b92:	1f 93       	push	r17
     b94:	9e 2d       	mov	r25, r14
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
     b96:	80 93 a7 00 	sts	0x00A7, r24
			 *  \pre The currently selected pipe must first be configured properly via \ref Pipe_ConfigurePipe().
			 */
			static inline void Pipe_EnablePipe(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_EnablePipe(void)
			{
				UPCONX |= (1 << PEN);
     b9a:	80 91 a9 00 	lds	r24, 0x00A9
     b9e:	81 60       	ori	r24, 0x01	; 1
     ba0:	80 93 a9 00 	sts	0x00A9, r24
	Pipe_SelectPipe(Number);
	Pipe_EnablePipe();

	UPCFG1X = 0;
     ba4:	10 92 ab 00 	sts	0x00AB, r1

	UPCFG0X = ((Type << EPTYPE0) | Token | ((EndpointNumber & PIPE_EPNUM_MASK) << PEPNUM0));
     ba8:	62 95       	swap	r22
     baa:	66 0f       	add	r22, r22
     bac:	66 0f       	add	r22, r22
     bae:	60 7c       	andi	r22, 0xC0	; 192
     bb0:	64 2b       	or	r22, r20
     bb2:	2f 70       	andi	r18, 0x0F	; 15
     bb4:	62 2b       	or	r22, r18
     bb6:	60 93 aa 00 	sts	0x00AA, r22
     bba:	28 e0       	ldi	r18, 0x08	; 8
     bbc:	30 e0       	ldi	r19, 0x00	; 0
     bbe:	80 e0       	ldi	r24, 0x00	; 0
     bc0:	03 c0       	rjmp	.+6      	; 0xbc8 <Pipe_ConfigurePipe+0x3a>
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while ((CheckBytes < Bytes) && (CheckBytes < PIPE_MAX_SIZE))
				{
					MaskVal++;
     bc2:	8f 5f       	subi	r24, 0xFF	; 255
					CheckBytes <<= 1;
     bc4:	22 0f       	add	r18, r18
     bc6:	33 1f       	adc	r19, r19
			static inline uint8_t Pipe_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while ((CheckBytes < Bytes) && (CheckBytes < PIPE_MAX_SIZE))
     bc8:	20 17       	cp	r18, r16
     bca:	31 07       	cpc	r19, r17
     bcc:	10 f4       	brcc	.+4      	; 0xbd2 <Pipe_ConfigurePipe+0x44>
     bce:	85 30       	cpi	r24, 0x05	; 5
     bd0:	c1 f7       	brne	.-16     	; 0xbc2 <Pipe_ConfigurePipe+0x34>
	UPCFG1X = ((1 << ALLOC) | Banks | Pipe_BytesToEPSizeMask(Size));
     bd2:	92 60       	ori	r25, 0x02	; 2
     bd4:	82 95       	swap	r24
     bd6:	80 7f       	andi	r24, 0xF0	; 240
     bd8:	89 2b       	or	r24, r25
     bda:	80 93 ab 00 	sts	0x00AB, r24

			/** Configures the currently selected pipe to allow for an unlimited number of IN requests. */
			static inline void Pipe_SetInfiniteINRequests(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetInfiniteINRequests(void)
			{
				UPCONX |= (1 << INMODE);
     bde:	80 91 a9 00 	lds	r24, 0x00A9
     be2:	80 62       	ori	r24, 0x20	; 32
     be4:	80 93 a9 00 	sts	0x00A9, r24
			 *  \return Boolean true if the selected pipe is configured, false otherwise.
			 */
			static inline bool Pipe_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsConfigured(void)
			{
				return ((UPSTAX & (1 << CFGOK)) ? true : false);
     be8:	80 91 ac 00 	lds	r24, 0x00AC

	Pipe_SetInfiniteINRequests();

	return Pipe_IsConfigured();
}
     bec:	88 1f       	adc	r24, r24
     bee:	88 27       	eor	r24, r24
     bf0:	88 1f       	adc	r24, r24
     bf2:	1f 91       	pop	r17
     bf4:	0f 91       	pop	r16
     bf6:	ef 90       	pop	r14
     bf8:	08 95       	ret

00000bfa <Pipe_ClearPipes>:

void Pipe_ClearPipes(void)
{
	UPINT = 0;
     bfa:	10 92 f8 00 	sts	0x00F8, r1
     bfe:	90 e0       	ldi	r25, 0x00	; 0
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
     c00:	90 93 a7 00 	sts	0x00A7, r25

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
	{
		Pipe_SelectPipe(PNum);
		UPIENX  = 0;
     c04:	10 92 ae 00 	sts	0x00AE, r1
		UPINTX  = 0;
     c08:	10 92 a6 00 	sts	0x00A6, r1
		UPCFG1X = 0;
     c0c:	10 92 ab 00 	sts	0x00AB, r1
			 *  from an attached device.
			 */
			static inline void Pipe_DisablePipe(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_DisablePipe(void)
			{
				UPCONX &= ~(1 << PEN);
     c10:	80 91 a9 00 	lds	r24, 0x00A9
     c14:	8e 7f       	andi	r24, 0xFE	; 254
     c16:	80 93 a9 00 	sts	0x00A9, r24

void Pipe_ClearPipes(void)
{
	UPINT = 0;

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
     c1a:	9f 5f       	subi	r25, 0xFF	; 255
     c1c:	97 30       	cpi	r25, 0x07	; 7
     c1e:	81 f7       	brne	.-32     	; 0xc00 <Pipe_ClearPipes+0x6>
		UPIENX  = 0;
		UPINTX  = 0;
		UPCFG1X = 0;
		Pipe_DisablePipe();
	}
}
     c20:	08 95       	ret

00000c22 <Pipe_IsEndpointBound>:

bool Pipe_IsEndpointBound(const uint8_t EndpointAddress)
{
     c22:	e8 2f       	mov	r30, r24
			 *  \return Index of the currently selected pipe.
			 */
			static inline uint8_t Pipe_GetCurrentPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetCurrentPipe(void)
			{
				return (UPNUM & PIPE_PIPENUM_MASK);
     c24:	70 91 a7 00 	lds	r23, 0x00A7
     c28:	60 e0       	ldi	r22, 0x00	; 0
		bool    PipeTokenCorrect = true;

		if (PipeToken != PIPE_TOKEN_SETUP)
		  PipeTokenCorrect = (PipeToken == ((EndpointAddress & PIPE_EPDIR_MASK) ? PIPE_TOKEN_IN : PIPE_TOKEN_OUT));

		if (PipeTokenCorrect && (Pipe_BoundEndpointNumber() == (EndpointAddress & PIPE_EPNUM_MASK)))
     c2a:	48 2f       	mov	r20, r24
     c2c:	50 e0       	ldi	r21, 0x00	; 0
     c2e:	4f 70       	andi	r20, 0x0F	; 15
     c30:	50 70       	andi	r21, 0x00	; 0
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
     c32:	60 93 a7 00 	sts	0x00A7, r22
			 *  \return Boolean true if the selected pipe is configured, false otherwise.
			 */
			static inline bool Pipe_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsConfigured(void)
			{
				return ((UPSTAX & (1 << CFGOK)) ? true : false);
     c36:	80 91 ac 00 	lds	r24, 0x00AC

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
	{
		Pipe_SelectPipe(PNum);

		if (!(Pipe_IsConfigured()))
     c3a:	87 ff       	sbrs	r24, 7
     c3c:	18 c0       	rjmp	.+48     	; 0xc6e <Pipe_IsEndpointBound+0x4c>
			 *  \return The current pipe token, as a PIPE_TOKEN_* mask.
			 */
			static inline uint8_t Pipe_GetPipeToken(void) ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetPipeToken(void)
			{
				return (UPCFG0X & (0x03 << PTOKEN0));
     c3e:	80 91 aa 00 	lds	r24, 0x00AA
     c42:	80 73       	andi	r24, 0x30	; 48
		  continue;

		uint8_t PipeToken        = Pipe_GetPipeToken();
		bool    PipeTokenCorrect = true;

		if (PipeToken != PIPE_TOKEN_SETUP)
     c44:	59 f0       	breq	.+22     	; 0xc5c <Pipe_IsEndpointBound+0x3a>
		  PipeTokenCorrect = (PipeToken == ((EndpointAddress & PIPE_EPDIR_MASK) ? PIPE_TOKEN_IN : PIPE_TOKEN_OUT));
     c46:	e7 fd       	sbrc	r30, 7
     c48:	03 c0       	rjmp	.+6      	; 0xc50 <Pipe_IsEndpointBound+0x2e>
     c4a:	20 e2       	ldi	r18, 0x20	; 32
     c4c:	30 e0       	ldi	r19, 0x00	; 0
     c4e:	02 c0       	rjmp	.+4      	; 0xc54 <Pipe_IsEndpointBound+0x32>
     c50:	20 e1       	ldi	r18, 0x10	; 16
     c52:	30 e0       	ldi	r19, 0x00	; 0

		if (PipeTokenCorrect && (Pipe_BoundEndpointNumber() == (EndpointAddress & PIPE_EPNUM_MASK)))
     c54:	90 e0       	ldi	r25, 0x00	; 0
     c56:	82 17       	cp	r24, r18
     c58:	93 07       	cpc	r25, r19
     c5a:	49 f4       	brne	.+18     	; 0xc6e <Pipe_IsEndpointBound+0x4c>
			 *  \return Endpoint number the currently selected pipe is bound to.
			 */
			static inline uint8_t Pipe_BoundEndpointNumber(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_BoundEndpointNumber(void)
			{
				return ((UPCFG0X >> PEPNUM0) & PIPE_EPNUM_MASK);
     c5c:	80 91 aa 00 	lds	r24, 0x00AA
     c60:	8f 70       	andi	r24, 0x0F	; 15
     c62:	90 e0       	ldi	r25, 0x00	; 0
     c64:	84 17       	cp	r24, r20
     c66:	95 07       	cpc	r25, r21
     c68:	11 f4       	brne	.+4      	; 0xc6e <Pipe_IsEndpointBound+0x4c>
     c6a:	81 e0       	ldi	r24, 0x01	; 1
     c6c:	08 95       	ret

bool Pipe_IsEndpointBound(const uint8_t EndpointAddress)
{
	uint8_t PrevPipeNumber = Pipe_GetCurrentPipe();

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
     c6e:	6f 5f       	subi	r22, 0xFF	; 255
     c70:	67 30       	cpi	r22, 0x07	; 7
     c72:	f9 f6       	brne	.-66     	; 0xc32 <Pipe_IsEndpointBound+0x10>
			 *  \return Index of the currently selected pipe.
			 */
			static inline uint8_t Pipe_GetCurrentPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetCurrentPipe(void)
			{
				return (UPNUM & PIPE_PIPENUM_MASK);
     c74:	77 70       	andi	r23, 0x07	; 7
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
     c76:	70 93 a7 00 	sts	0x00A7, r23
     c7a:	80 e0       	ldi	r24, 0x00	; 0
		  return true;
	}

	Pipe_SelectPipe(PrevPipeNumber);
	return false;
}
     c7c:	08 95       	ret

00000c7e <Pipe_WaitUntilReady>:
			/** Returns the current USB frame number, when in host mode. Every millisecond the USB bus is active (i.e. not suspended)
			 *  the frame number is incremented by one.
			 */
			static inline uint16_t USB_Host_GetFrameNumber(void)
			{
				return UHFNUM;
     c7e:	40 91 a2 00 	lds	r20, 0x00A2
     c82:	50 91 a3 00 	lds	r21, 0x00A3
     c86:	24 e6       	ldi	r18, 0x64	; 100
			 *  \return The current pipe token, as a PIPE_TOKEN_* mask.
			 */
			static inline uint8_t Pipe_GetPipeToken(void) ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetPipeToken(void)
			{
				return (UPCFG0X & (0x03 << PTOKEN0));
     c88:	80 91 aa 00 	lds	r24, 0x00AA

	uint16_t PreviousFrameNumber = USB_Host_GetFrameNumber();

	for (;;)
	{
		if (Pipe_GetPipeToken() == PIPE_TOKEN_IN)
     c8c:	80 73       	andi	r24, 0x30	; 48
     c8e:	80 31       	cpi	r24, 0x10	; 16
     c90:	29 f4       	brne	.+10     	; 0xc9c <Pipe_WaitUntilReady+0x1e>
			 *  \return Boolean true if the current pipe has received an IN packet, false otherwise.
			 */
			static inline bool Pipe_IsINReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsINReceived(void)
			{
				return ((UPINTX & (1 << RXINI)) ? true : false);
     c92:	80 91 a6 00 	lds	r24, 0x00A6
		{
			if (Pipe_IsINReceived())
     c96:	80 ff       	sbrs	r24, 0
     c98:	05 c0       	rjmp	.+10     	; 0xca4 <Pipe_WaitUntilReady+0x26>
     c9a:	1c c0       	rjmp	.+56     	; 0xcd4 <Pipe_WaitUntilReady+0x56>
			 *  \return Boolean true if the current pipe is ready for an OUT packet, false otherwise.
			 */
			static inline bool Pipe_IsOUTReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsOUTReady(void)
			{
				return ((UPINTX & (1 << TXOUTI)) ? true : false);
     c9c:	80 91 a6 00 	lds	r24, 0x00A6
			  return PIPE_READYWAIT_NoError;
		}
		else
		{
			if (Pipe_IsOUTReady())
     ca0:	82 fd       	sbrc	r24, 2
     ca2:	18 c0       	rjmp	.+48     	; 0xcd4 <Pipe_WaitUntilReady+0x56>
			 *  \return Boolean true if the current pipe has been stalled by the attached device, false otherwise.
			 */
			static inline bool Pipe_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsStalled(void)
			{
				return ((UPINTX & (1 << RXSTALLI)) ? true : false);
     ca4:	80 91 a6 00 	lds	r24, 0x00A6
			  return PIPE_READYWAIT_NoError;
		}

		if (Pipe_IsStalled())
     ca8:	81 ff       	sbrs	r24, 1
     caa:	02 c0       	rjmp	.+4      	; 0xcb0 <Pipe_WaitUntilReady+0x32>
     cac:	81 e0       	ldi	r24, 0x01	; 1
     cae:	08 95       	ret
		  return PIPE_READYWAIT_PipeStalled;
		else if (USB_HostState == HOST_STATE_Unattached)
     cb0:	80 91 06 02 	lds	r24, 0x0206
     cb4:	82 30       	cpi	r24, 0x02	; 2
     cb6:	79 f0       	breq	.+30     	; 0xcd6 <Pipe_WaitUntilReady+0x58>
     cb8:	80 91 a2 00 	lds	r24, 0x00A2
     cbc:	90 91 a3 00 	lds	r25, 0x00A3
		  return PIPE_READYWAIT_DeviceDisconnected;

		uint16_t CurrentFrameNumber = USB_Host_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
     cc0:	84 17       	cp	r24, r20
     cc2:	95 07       	cpc	r25, r21
     cc4:	09 f3       	breq	.-62     	; 0xc88 <Pipe_WaitUntilReady+0xa>
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
     cc6:	22 23       	and	r18, r18
     cc8:	11 f4       	brne	.+4      	; 0xcce <Pipe_WaitUntilReady+0x50>
     cca:	83 e0       	ldi	r24, 0x03	; 3
     ccc:	08 95       	ret
     cce:	21 50       	subi	r18, 0x01	; 1
     cd0:	ac 01       	movw	r20, r24
     cd2:	da cf       	rjmp	.-76     	; 0xc88 <Pipe_WaitUntilReady+0xa>
     cd4:	80 e0       	ldi	r24, 0x00	; 0
			  return PIPE_READYWAIT_Timeout;
		}
	}
}
     cd6:	08 95       	ret

00000cd8 <USB_ShutDown>:
	USB_ResetInterface();
}

void USB_ShutDown(void)
{
	USB_INT_DisableAllInterrupts();
     cd8:	cb d0       	rcall	.+406    	; 0xe70 <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
     cda:	d6 d0       	rcall	.+428    	; 0xe88 <USB_INT_ClearAllInterrupts>
			 *  enumerating the device once attached until \ref USB_Attach() is called.
			 */
			static inline void USB_Detach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Detach(void)
			{
				UDCON  |=  (1 << DETACH);
     cdc:	e0 ee       	ldi	r30, 0xE0	; 224
     cde:	f0 e0       	ldi	r31, 0x00	; 0
     ce0:	80 81       	ld	r24, Z
     ce2:	81 60       	ori	r24, 0x01	; 1
     ce4:	80 83       	st	Z, r24
			}

			static inline void USB_Controller_Disable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Disable(void)
			{
				USBCON  &= ~(1 << USBE);
     ce6:	a8 ed       	ldi	r26, 0xD8	; 216
     ce8:	b0 e0       	ldi	r27, 0x00	; 0
     cea:	8c 91       	ld	r24, X
     cec:	8f 77       	andi	r24, 0x7F	; 127
     cee:	8c 93       	st	X, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR  = 0;
     cf0:	19 bc       	out	0x29, r1	; 41

			static inline void USB_REG_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_Off(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON  &= ~(1 << UVREGE);
     cf2:	e7 ed       	ldi	r30, 0xD7	; 215
     cf4:	f0 e0       	ldi	r31, 0x00	; 0
     cf6:	80 81       	ld	r24, Z
     cf8:	8e 7f       	andi	r24, 0xFE	; 254
     cfa:	80 83       	st	Z, r24
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON  &= ~(1 << OTGPADE);
     cfc:	8c 91       	ld	r24, X
     cfe:	8f 7e       	andi	r24, 0xEF	; 239
     d00:	8c 93       	st	X, r24
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USB_OTGPAD_Off();
	#endif

	#if defined(USB_CAN_BE_BOTH)
	USB_CurrentMode = USB_MODE_None;
     d02:	10 92 f5 01 	sts	0x01F5, r1
	#endif

	USB_IsInitialized = false;
     d06:	10 92 fc 01 	sts	0x01FC, r1
}
     d0a:	08 95       	ret

00000d0c <USB_ResetInterface>:

void USB_ResetInterface(void)
{
     d0c:	1f 93       	push	r17
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
     d0e:	10 91 d7 00 	lds	r17, 0x00D7
	#endif

	USB_INT_DisableAllInterrupts();
     d12:	ae d0       	rcall	.+348    	; 0xe70 <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
     d14:	b9 d0       	rcall	.+370    	; 0xe88 <USB_INT_ClearAllInterrupts>
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				const uint8_t Temp = USBCON;
     d16:	80 91 d8 00 	lds	r24, 0x00D8

				USBCON = (Temp & ~(1 << USBE));
     d1a:	98 2f       	mov	r25, r24
     d1c:	9f 77       	andi	r25, 0x7F	; 127
     d1e:	90 93 d8 00 	sts	0x00D8, r25
				USBCON = (Temp |  (1 << USBE));
     d22:	80 68       	ori	r24, 0x80	; 128
     d24:	80 93 d8 00 	sts	0x00D8, r24

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR  = USB_PLL_PSC;
     d28:	8c e0       	ldi	r24, 0x0C	; 12
     d2a:	89 bd       	out	0x29, r24	; 41
				PLLCSR |= (1 << PLLE);
     d2c:	89 b5       	in	r24, 0x29	; 41
     d2e:	82 60       	ori	r24, 0x02	; 2
     d30:	89 bd       	out	0x29, r24	; 41
		#if defined(USB_SERIES_4_AVR)
		PLLFRQ = ((1 << PLLUSB) | (1 << PDIV3) | (1 << PDIV1));
		#endif

		USB_PLL_On();
		while (!(USB_PLL_IsReady()));
     d32:	09 b4       	in	r0, 0x29	; 41
     d34:	00 fe       	sbrs	r0, 0
     d36:	fd cf       	rjmp	.-6      	; 0xd32 <USB_ResetInterface+0x26>
	}

	#if defined(USB_CAN_BE_BOTH)
	if (UIDModeSelectEnabled)
     d38:	16 ff       	sbrs	r17, 6
     d3a:	0a c0       	rjmp	.+20     	; 0xd50 <USB_ResetInterface+0x44>
	{
		UHWCON |= (1 << UIDE);
     d3c:	80 91 d7 00 	lds	r24, 0x00D7
     d40:	80 64       	ori	r24, 0x40	; 64
     d42:	80 93 d7 00 	sts	0x00D7, r24
		USB_INT_Enable(USB_INT_IDTI);
     d46:	80 91 d8 00 	lds	r24, 0x00D8
     d4a:	82 60       	ori	r24, 0x02	; 2
     d4c:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON  &= ~(1 << FRZCLK);
     d50:	80 91 d8 00 	lds	r24, 0x00D8
     d54:	8f 7d       	andi	r24, 0xDF	; 223
     d56:	80 93 d8 00 	sts	0x00D8, r24
	}
	#endif

	USB_CLK_Unfreeze();

	if (USB_CurrentMode == USB_MODE_Device)
     d5a:	80 91 f5 01 	lds	r24, 0x01F5
     d5e:	81 30       	cpi	r24, 0x01	; 1
     d60:	59 f5       	brne	.+86     	; 0xdb8 <USB_ResetInterface+0xac>
	{
		#if defined(USB_CAN_BE_DEVICE)
		#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
		UHWCON |=  (1 << UIMOD);
     d62:	80 91 d7 00 	lds	r24, 0x00D7
     d66:	80 68       	ori	r24, 0x80	; 128
     d68:	80 93 d7 00 	sts	0x00D7, r24
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState          = DEVICE_STATE_Unattached;
     d6c:	10 92 fd 01 	sts	0x01FD, r1
	USB_ConfigurationNumber  = 0;
     d70:	10 92 fb 01 	sts	0x01FB, r1

	#if !defined(NO_DEVICE_REMOTE_WAKEUP)
	USB_RemoteWakeupEnabled  = false;
     d74:	10 92 fa 01 	sts	0x01FA, r1
	#endif

	#if !defined(NO_DEVICE_SELF_POWER)
	USB_CurrentlySelfPowered = false;
     d78:	10 92 f9 01 	sts	0x01F9, r1
			}

			static inline void USB_Device_SetFullSpeed(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetFullSpeed(void)
			{
				UDCON &= ~(1 << LSM);
     d7c:	80 91 e0 00 	lds	r24, 0x00E0
     d80:	8b 7f       	andi	r24, 0xFB	; 251
     d82:	80 93 e0 00 	sts	0x00E0, r24
	if (USB_Options & USB_DEVICE_OPT_LOWSPEED)
	  USB_Device_SetLowSpeed();
	else
	  USB_Device_SetFullSpeed();

	USB_INT_Enable(USB_INT_VBUS);
     d86:	80 91 d8 00 	lds	r24, 0x00D8
     d8a:	81 60       	ori	r24, 0x01	; 1
     d8c:	80 93 d8 00 	sts	0x00D8, r24
			                                              const uint8_t Type,
			                                              const uint8_t Direction,
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				return Endpoint_ConfigureEndpoint_Prv(Number, (((Type) << EPTYPE0) | (Direction)),
     d90:	80 e0       	ldi	r24, 0x00	; 0
     d92:	60 e0       	ldi	r22, 0x00	; 0
     d94:	42 e0       	ldi	r20, 0x02	; 2
     d96:	b4 dc       	rcall	.-1688   	; 0x700 <Endpoint_ConfigureEndpoint_Prv>

	Endpoint_ConfigureEndpoint(ENDPOINT_CONTROLEP, EP_TYPE_CONTROL,
							   ENDPOINT_DIR_OUT, USB_ControlEndpointSize,
							   ENDPOINT_BANK_SINGLE);

	USB_INT_Clear(USB_INT_SUSPI);
     d98:	80 91 e1 00 	lds	r24, 0x00E1
     d9c:	8e 7f       	andi	r24, 0xFE	; 254
     d9e:	80 93 e1 00 	sts	0x00E1, r24
	USB_INT_Enable(USB_INT_SUSPI);
     da2:	80 91 e2 00 	lds	r24, 0x00E2
     da6:	81 60       	ori	r24, 0x01	; 1
     da8:	80 93 e2 00 	sts	0x00E2, r24
	USB_INT_Enable(USB_INT_EORSTI);
     dac:	80 91 e2 00 	lds	r24, 0x00E2
     db0:	88 60       	ori	r24, 0x08	; 8
     db2:	80 93 e2 00 	sts	0x00E2, r24
     db6:	2e c0       	rjmp	.+92     	; 0xe14 <USB_ResetInterface+0x108>
		#endif

		USB_Init_Device();
		#endif
	}
	else if (USB_CurrentMode == USB_MODE_Host)
     db8:	90 91 f5 01 	lds	r25, 0x01F5
     dbc:	92 30       	cpi	r25, 0x02	; 2
     dbe:	79 f5       	brne	.+94     	; 0xe1e <USB_ResetInterface+0x112>
	{
		#if defined(USB_CAN_BE_HOST)
		UHWCON &= ~(1 << UIMOD);
     dc0:	80 91 d7 00 	lds	r24, 0x00D7
     dc4:	8f 77       	andi	r24, 0x7F	; 127
     dc6:	80 93 d7 00 	sts	0x00D7, r24
#endif

#if defined(USB_CAN_BE_HOST)
static void USB_Init_Host(void)
{
	USB_HostState       = HOST_STATE_Unattached;
     dca:	90 93 06 02 	sts	0x0206, r25
	USB_ControlPipeSize = PIPE_CONTROLPIPE_DEFAULT_SIZE;
     dce:	80 e4       	ldi	r24, 0x40	; 64
     dd0:	80 93 e3 01 	sts	0x01E3, r24
	#if !defined(__DOXYGEN__)
		/* Macros: */
			static inline void USB_Host_HostMode_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_HostMode_On(void)
			{
				USBCON |=  (1 << HOST);
     dd4:	80 91 d8 00 	lds	r24, 0x00D8
     dd8:	80 64       	ori	r24, 0x40	; 64
     dda:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
     dde:	80 91 dd 00 	lds	r24, 0x00DD
     de2:	81 60       	ori	r24, 0x01	; 1
     de4:	80 93 dd 00 	sts	0x00DD, r24
			}

			static inline void USB_Host_VBUS_Manual_Enable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Manual_Enable(void)
			{
				OTGCON |=  (1 << VBUSHWC);
     de8:	80 91 dd 00 	lds	r24, 0x00DD
     dec:	84 60       	ori	r24, 0x04	; 4
     dee:	80 93 dd 00 	sts	0x00DD, r24
				UHWCON &= ~(1 << UVCONE);
     df2:	80 91 d7 00 	lds	r24, 0x00D7
     df6:	8f 7e       	andi	r24, 0xEF	; 239
     df8:	80 93 d7 00 	sts	0x00D7, r24

				DDRE   |=  (1 << 7);
     dfc:	6f 9a       	sbi	0x0d, 7	; 13
			}

			static inline void USB_Host_VBUS_Manual_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Manual_On(void)
			{
				PORTE  |=  (1 << 7);
     dfe:	77 9a       	sbi	0x0e, 7	; 14

	USB_Host_VBUS_Auto_Off();
	USB_Host_VBUS_Manual_Enable();
	USB_Host_VBUS_Manual_On();

	USB_INT_Enable(USB_INT_SRPI);
     e00:	80 91 de 00 	lds	r24, 0x00DE
     e04:	81 60       	ori	r24, 0x01	; 1
     e06:	80 93 de 00 	sts	0x00DE, r24
	USB_INT_Enable(USB_INT_BCERRI);
     e0a:	80 91 de 00 	lds	r24, 0x00DE
     e0e:	84 60       	ori	r24, 0x04	; 4
     e10:	80 93 de 00 	sts	0x00DE, r24
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
     e14:	80 91 e0 00 	lds	r24, 0x00E0
     e18:	8e 7f       	andi	r24, 0xFE	; 254
     e1a:	80 93 e0 00 	sts	0x00E0, r24

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON  |=  (1 << OTGPADE);
     e1e:	80 91 d8 00 	lds	r24, 0x00D8
     e22:	80 61       	ori	r24, 0x10	; 16
     e24:	80 93 d8 00 	sts	0x00D8, r24
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
     e28:	1f 91       	pop	r17
     e2a:	08 95       	ret

00000e2c <USB_Init>:

               #if !defined(USE_STATIC_OPTIONS)
               const uint8_t Options
               #endif
               )
{
     e2c:	98 2f       	mov	r25, r24

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON  |=  (1 << UVREGE);
     e2e:	80 91 d7 00 	lds	r24, 0x00D7
     e32:	81 60       	ori	r24, 0x01	; 1
     e34:	80 93 d7 00 	sts	0x00D7, r24
	  USB_REG_On();
	else
	  USB_REG_Off();

	#if defined(USB_CAN_BE_BOTH)
	if (Mode == USB_MODE_UID)
     e38:	93 30       	cpi	r25, 0x03	; 3
     e3a:	a1 f4       	brne	.+40     	; 0xe64 <USB_Init+0x38>
	{
		UHWCON |= (1 << UIDE);
     e3c:	80 91 d7 00 	lds	r24, 0x00D7
     e40:	80 64       	ori	r24, 0x40	; 64
     e42:	80 93 d7 00 	sts	0x00D7, r24
		USB_INT_Enable(USB_INT_IDTI);
     e46:	80 91 d8 00 	lds	r24, 0x00D8
     e4a:	82 60       	ori	r24, 0x02	; 2
     e4c:	80 93 d8 00 	sts	0x00D8, r24

			#if defined(USB_CAN_BE_BOTH)
			static inline uint8_t USB_GetUSBModeFromUID(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t USB_GetUSBModeFromUID(void)
			{
				if (USBSTA & (1 << ID))
     e50:	80 91 d9 00 	lds	r24, 0x00D9
     e54:	81 fd       	sbrc	r24, 1
     e56:	02 c0       	rjmp	.+4      	; 0xe5c <USB_Init+0x30>
     e58:	82 e0       	ldi	r24, 0x02	; 2
     e5a:	01 c0       	rjmp	.+2      	; 0xe5e <USB_Init+0x32>
     e5c:	81 e0       	ldi	r24, 0x01	; 1
		USB_CurrentMode = USB_GetUSBModeFromUID();
     e5e:	80 93 f5 01 	sts	0x01F5, r24
     e62:	02 c0       	rjmp	.+4      	; 0xe68 <USB_Init+0x3c>
	}
	else
	{
		USB_CurrentMode = Mode;
     e64:	90 93 f5 01 	sts	0x01F5, r25
	}
	#endif

	USB_IsInitialized = true;
     e68:	81 e0       	ldi	r24, 0x01	; 1
     e6a:	80 93 fc 01 	sts	0x01FC, r24

	USB_ResetInterface();
}
     e6e:	4e cf       	rjmp	.-356    	; 0xd0c <USB_ResetInterface>

00000e70 <USB_INT_DisableAllInterrupts>:
#include "USBInterrupt.h"

void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
     e70:	e8 ed       	ldi	r30, 0xD8	; 216
     e72:	f0 e0       	ldi	r31, 0x00	; 0
     e74:	80 81       	ld	r24, Z
     e76:	8c 7f       	andi	r24, 0xFC	; 252
     e78:	80 83       	st	Z, r24
	#elif defined(USB_SERIES_4_AVR)
	USBCON &= ~(1 << VBUSTE);
	#endif

	#if defined(USB_CAN_BE_BOTH)
	OTGIEN  = 0;
     e7a:	10 92 de 00 	sts	0x00DE, r1
	#endif

	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
     e7e:	10 92 a0 00 	sts	0x00A0, r1
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
     e82:	10 92 e2 00 	sts	0x00E2, r1
	#endif
}
     e86:	08 95       	ret

00000e88 <USB_INT_ClearAllInterrupts>:

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT  = 0;
     e88:	10 92 da 00 	sts	0x00DA, r1
	#endif

	#if defined(USB_CAN_BE_BOTH)
	OTGINT  = 0;
     e8c:	10 92 df 00 	sts	0x00DF, r1
	#endif

	#if defined(USB_CAN_BE_HOST)
	UHINT   = 0;
     e90:	10 92 9f 00 	sts	0x009F, r1
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT   = 0;
     e94:	10 92 e1 00 	sts	0x00E1, r1
	#endif
}
     e98:	08 95       	ret

00000e9a <__vector_10>:

ISR(USB_GEN_vect, ISR_BLOCK)
{
     e9a:	1f 92       	push	r1
     e9c:	0f 92       	push	r0
     e9e:	0f b6       	in	r0, 0x3f	; 63
     ea0:	0f 92       	push	r0
     ea2:	0b b6       	in	r0, 0x3b	; 59
     ea4:	0f 92       	push	r0
     ea6:	11 24       	eor	r1, r1
     ea8:	2f 93       	push	r18
     eaa:	3f 93       	push	r19
     eac:	4f 93       	push	r20
     eae:	5f 93       	push	r21
     eb0:	6f 93       	push	r22
     eb2:	7f 93       	push	r23
     eb4:	8f 93       	push	r24
     eb6:	9f 93       	push	r25
     eb8:	af 93       	push	r26
     eba:	bf 93       	push	r27
     ebc:	ef 93       	push	r30
     ebe:	ff 93       	push	r31
	#if defined(USB_CAN_BE_DEVICE)
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	if (USB_INT_HasOccurred(USB_INT_VBUS) && USB_INT_IsEnabled(USB_INT_VBUS))
     ec0:	80 91 da 00 	lds	r24, 0x00DA
     ec4:	80 ff       	sbrs	r24, 0
     ec6:	15 c0       	rjmp	.+42     	; 0xef2 <__vector_10+0x58>
     ec8:	80 91 d8 00 	lds	r24, 0x00D8
     ecc:	80 ff       	sbrs	r24, 0
     ece:	11 c0       	rjmp	.+34     	; 0xef2 <__vector_10+0x58>
	{
		USB_INT_Clear(USB_INT_VBUS);
     ed0:	80 91 da 00 	lds	r24, 0x00DA
     ed4:	8e 7f       	andi	r24, 0xFE	; 254
     ed6:	80 93 da 00 	sts	0x00DA, r24
				 *  \note This function is not available on some AVR models which do not support hardware VBUS monitoring.
				 */
				static inline bool USB_VBUS_GetStatus(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
				static inline bool USB_VBUS_GetStatus(void)
				{
					return ((USBSTA & (1 << VBUS)) ? true : false);
     eda:	80 91 d9 00 	lds	r24, 0x00D9

		if (USB_VBUS_GetStatus())
     ede:	80 ff       	sbrs	r24, 0
     ee0:	05 c0       	rjmp	.+10     	; 0xeec <__vector_10+0x52>
		{
			USB_DeviceState = DEVICE_STATE_Powered;
     ee2:	81 e0       	ldi	r24, 0x01	; 1
     ee4:	80 93 fd 01 	sts	0x01FD, r24
			EVENT_USB_Device_Connect();
     ee8:	94 da       	rcall	.-2776   	; 0x412 <EVENT_USB_Device_Connect>
     eea:	03 c0       	rjmp	.+6      	; 0xef2 <__vector_10+0x58>
		}
		else
		{
			USB_DeviceState = DEVICE_STATE_Unattached;
     eec:	10 92 fd 01 	sts	0x01FD, r1
			EVENT_USB_Device_Disconnect();
     ef0:	95 da       	rcall	.-2774   	; 0x41c <EVENT_USB_Device_Disconnect>
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
     ef2:	80 91 e1 00 	lds	r24, 0x00E1
     ef6:	80 ff       	sbrs	r24, 0
     ef8:	1d c0       	rjmp	.+58     	; 0xf34 <__vector_10+0x9a>
     efa:	80 91 e2 00 	lds	r24, 0x00E2
     efe:	80 ff       	sbrs	r24, 0
     f00:	19 c0       	rjmp	.+50     	; 0xf34 <__vector_10+0x9a>
	{
		USB_INT_Clear(USB_INT_SUSPI);
     f02:	80 91 e1 00 	lds	r24, 0x00E1
     f06:	8e 7f       	andi	r24, 0xFE	; 254
     f08:	80 93 e1 00 	sts	0x00E1, r24

		USB_INT_Disable(USB_INT_SUSPI);
     f0c:	80 91 e2 00 	lds	r24, 0x00E2
     f10:	8e 7f       	andi	r24, 0xFE	; 254
     f12:	80 93 e2 00 	sts	0x00E2, r24
		USB_INT_Enable(USB_INT_WAKEUPI);
     f16:	80 91 e2 00 	lds	r24, 0x00E2
     f1a:	80 61       	ori	r24, 0x10	; 16
     f1c:	80 93 e2 00 	sts	0x00E2, r24
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON  |=  (1 << FRZCLK);
     f20:	80 91 d8 00 	lds	r24, 0x00D8
     f24:	80 62       	ori	r24, 0x20	; 32
     f26:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR  = 0;
     f2a:	19 bc       	out	0x29, r1	; 41

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
		EVENT_USB_Device_Disconnect();
		#else
		USB_DeviceState = DEVICE_STATE_Suspended;
     f2c:	85 e0       	ldi	r24, 0x05	; 5
     f2e:	80 93 fd 01 	sts	0x01FD, r24
		EVENT_USB_Device_Suspend();
     f32:	11 d3       	rcall	.+1570   	; 0x1556 <USB_Event_Stub>
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
     f34:	80 91 e1 00 	lds	r24, 0x00E1
     f38:	84 ff       	sbrs	r24, 4
     f3a:	2e c0       	rjmp	.+92     	; 0xf98 <__vector_10+0xfe>
     f3c:	80 91 e2 00 	lds	r24, 0x00E2
     f40:	84 ff       	sbrs	r24, 4
     f42:	2a c0       	rjmp	.+84     	; 0xf98 <__vector_10+0xfe>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR  = USB_PLL_PSC;
     f44:	8c e0       	ldi	r24, 0x0C	; 12
     f46:	89 bd       	out	0x29, r24	; 41
				PLLCSR |= (1 << PLLE);
     f48:	89 b5       	in	r24, 0x29	; 41
     f4a:	82 60       	ori	r24, 0x02	; 2
     f4c:	89 bd       	out	0x29, r24	; 41
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
     f4e:	09 b4       	in	r0, 0x29	; 41
     f50:	00 fe       	sbrs	r0, 0
     f52:	fd cf       	rjmp	.-6      	; 0xf4e <__vector_10+0xb4>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON  &= ~(1 << FRZCLK);
     f54:	80 91 d8 00 	lds	r24, 0x00D8
     f58:	8f 7d       	andi	r24, 0xDF	; 223
     f5a:	80 93 d8 00 	sts	0x00D8, r24
		}

		USB_CLK_Unfreeze();

		USB_INT_Clear(USB_INT_WAKEUPI);
     f5e:	80 91 e1 00 	lds	r24, 0x00E1
     f62:	8f 7e       	andi	r24, 0xEF	; 239
     f64:	80 93 e1 00 	sts	0x00E1, r24

		USB_INT_Disable(USB_INT_WAKEUPI);
     f68:	80 91 e2 00 	lds	r24, 0x00E2
     f6c:	8f 7e       	andi	r24, 0xEF	; 239
     f6e:	80 93 e2 00 	sts	0x00E2, r24
		USB_INT_Enable(USB_INT_SUSPI);
     f72:	80 91 e2 00 	lds	r24, 0x00E2
     f76:	81 60       	ori	r24, 0x01	; 1
     f78:	80 93 e2 00 	sts	0x00E2, r24

		if (USB_ConfigurationNumber)
     f7c:	80 91 fb 01 	lds	r24, 0x01FB
     f80:	88 23       	and	r24, r24
     f82:	31 f4       	brne	.+12     	; 0xf90 <__vector_10+0xf6>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
     f84:	80 91 e3 00 	lds	r24, 0x00E3
		  USB_DeviceState = DEVICE_STATE_Configured;
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
     f88:	87 fd       	sbrc	r24, 7
     f8a:	02 c0       	rjmp	.+4      	; 0xf90 <__vector_10+0xf6>
     f8c:	81 e0       	ldi	r24, 0x01	; 1
     f8e:	01 c0       	rjmp	.+2      	; 0xf92 <__vector_10+0xf8>
     f90:	84 e0       	ldi	r24, 0x04	; 4
     f92:	80 93 fd 01 	sts	0x01FD, r24

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
		#else
		EVENT_USB_Device_WakeUp();
     f96:	df d2       	rcall	.+1470   	; 0x1556 <USB_Event_Stub>
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
     f98:	80 91 e1 00 	lds	r24, 0x00E1
     f9c:	83 ff       	sbrs	r24, 3
     f9e:	22 c0       	rjmp	.+68     	; 0xfe4 <__vector_10+0x14a>
     fa0:	80 91 e2 00 	lds	r24, 0x00E2
     fa4:	83 ff       	sbrs	r24, 3
     fa6:	1e c0       	rjmp	.+60     	; 0xfe4 <__vector_10+0x14a>
	{
		USB_INT_Clear(USB_INT_EORSTI);
     fa8:	80 91 e1 00 	lds	r24, 0x00E1
     fac:	87 7f       	andi	r24, 0xF7	; 247
     fae:	80 93 e1 00 	sts	0x00E1, r24

		USB_DeviceState         = DEVICE_STATE_Default;
     fb2:	82 e0       	ldi	r24, 0x02	; 2
     fb4:	80 93 fd 01 	sts	0x01FD, r24
		USB_ConfigurationNumber = 0;
     fb8:	10 92 fb 01 	sts	0x01FB, r1

		USB_INT_Clear(USB_INT_SUSPI);
     fbc:	80 91 e1 00 	lds	r24, 0x00E1
     fc0:	8e 7f       	andi	r24, 0xFE	; 254
     fc2:	80 93 e1 00 	sts	0x00E1, r24
		USB_INT_Disable(USB_INT_SUSPI);
     fc6:	80 91 e2 00 	lds	r24, 0x00E2
     fca:	8e 7f       	andi	r24, 0xFE	; 254
     fcc:	80 93 e2 00 	sts	0x00E2, r24
		USB_INT_Enable(USB_INT_WAKEUPI);
     fd0:	80 91 e2 00 	lds	r24, 0x00E2
     fd4:	80 61       	ori	r24, 0x10	; 16
     fd6:	80 93 e2 00 	sts	0x00E2, r24
     fda:	80 e0       	ldi	r24, 0x00	; 0
     fdc:	60 e0       	ldi	r22, 0x00	; 0
     fde:	42 e0       	ldi	r20, 0x02	; 2
     fe0:	8f db       	rcall	.-2274   	; 0x700 <Endpoint_ConfigureEndpoint_Prv>

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
     fe2:	b9 d2       	rcall	.+1394   	; 0x1556 <USB_Event_Stub>
	}

	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
     fe4:	80 91 e1 00 	lds	r24, 0x00E1
     fe8:	82 ff       	sbrs	r24, 2
     fea:	0a c0       	rjmp	.+20     	; 0x1000 <__vector_10+0x166>
     fec:	80 91 e2 00 	lds	r24, 0x00E2
     ff0:	82 ff       	sbrs	r24, 2
     ff2:	06 c0       	rjmp	.+12     	; 0x1000 <__vector_10+0x166>
	{
		USB_INT_Clear(USB_INT_SOFI);
     ff4:	80 91 e1 00 	lds	r24, 0x00E1
     ff8:	8b 7f       	andi	r24, 0xFB	; 251
     ffa:	80 93 e1 00 	sts	0x00E1, r24

		EVENT_USB_Device_StartOfFrame();
     ffe:	13 da       	rcall	.-3034   	; 0x426 <EVENT_USB_Device_StartOfFrame>
	}
	#endif
	#endif

	#if defined(USB_CAN_BE_HOST)
	if (USB_INT_HasOccurred(USB_INT_DDISCI) && USB_INT_IsEnabled(USB_INT_DDISCI))
    1000:	80 91 9f 00 	lds	r24, 0x009F
    1004:	81 ff       	sbrs	r24, 1
    1006:	15 c0       	rjmp	.+42     	; 0x1032 <__vector_10+0x198>
    1008:	80 91 a0 00 	lds	r24, 0x00A0
    100c:	81 ff       	sbrs	r24, 1
    100e:	11 c0       	rjmp	.+34     	; 0x1032 <__vector_10+0x198>
	{
		USB_INT_Clear(USB_INT_DDISCI);
    1010:	80 91 9f 00 	lds	r24, 0x009F
    1014:	8d 7f       	andi	r24, 0xFD	; 253
    1016:	80 93 9f 00 	sts	0x009F, r24
		USB_INT_Clear(USB_INT_DCONNI);
    101a:	80 91 9f 00 	lds	r24, 0x009F
    101e:	8e 7f       	andi	r24, 0xFE	; 254
    1020:	80 93 9f 00 	sts	0x009F, r24
		USB_INT_Disable(USB_INT_DDISCI);
    1024:	80 91 a0 00 	lds	r24, 0x00A0
    1028:	8d 7f       	andi	r24, 0xFD	; 253
    102a:	80 93 a0 00 	sts	0x00A0, r24

		EVENT_USB_Host_DeviceUnattached();
    102e:	56 db       	rcall	.-2388   	; 0x6dc <EVENT_USB_Host_DeviceUnattached>

		USB_ResetInterface();
    1030:	6d de       	rcall	.-806    	; 0xd0c <USB_ResetInterface>
	}

	if (USB_INT_HasOccurred(USB_INT_VBERRI) && USB_INT_IsEnabled(USB_INT_VBERRI))
    1032:	80 91 df 00 	lds	r24, 0x00DF
    1036:	81 ff       	sbrs	r24, 1
    1038:	15 c0       	rjmp	.+42     	; 0x1064 <__vector_10+0x1ca>
    103a:	80 91 de 00 	lds	r24, 0x00DE
    103e:	81 ff       	sbrs	r24, 1
    1040:	11 c0       	rjmp	.+34     	; 0x1064 <__vector_10+0x1ca>
	{
		USB_INT_Clear(USB_INT_VBERRI);
    1042:	80 91 df 00 	lds	r24, 0x00DF
    1046:	8d 7f       	andi	r24, 0xFD	; 253
    1048:	80 93 df 00 	sts	0x00DF, r24
			}

			static inline void USB_Host_VBUS_Manual_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Manual_Off(void)
			{
				PORTE  &= ~(1 << 7);
    104c:	77 98       	cbi	0x0e, 7	; 14
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
    104e:	80 91 dd 00 	lds	r24, 0x00DD
    1052:	81 60       	ori	r24, 0x01	; 1
    1054:	80 93 dd 00 	sts	0x00DD, r24

		USB_Host_VBUS_Manual_Off();
		USB_Host_VBUS_Auto_Off();

		EVENT_USB_Host_HostError(HOST_ERROR_VBusVoltageDip);
    1058:	80 e0       	ldi	r24, 0x00	; 0
    105a:	23 db       	rcall	.-2490   	; 0x6a2 <EVENT_USB_Host_HostError>
		EVENT_USB_Host_DeviceUnattached();
    105c:	3f db       	rcall	.-2434   	; 0x6dc <EVENT_USB_Host_DeviceUnattached>

		USB_HostState = HOST_STATE_Unattached;
    105e:	82 e0       	ldi	r24, 0x02	; 2
    1060:	80 93 06 02 	sts	0x0206, r24
	}

	if (USB_INT_HasOccurred(USB_INT_SRPI) && USB_INT_IsEnabled(USB_INT_SRPI))
    1064:	80 91 df 00 	lds	r24, 0x00DF
    1068:	80 ff       	sbrs	r24, 0
    106a:	17 c0       	rjmp	.+46     	; 0x109a <__vector_10+0x200>
    106c:	80 91 de 00 	lds	r24, 0x00DE
    1070:	80 ff       	sbrs	r24, 0
    1072:	13 c0       	rjmp	.+38     	; 0x109a <__vector_10+0x200>
	{
		USB_INT_Clear(USB_INT_SRPI);
    1074:	80 91 df 00 	lds	r24, 0x00DF
    1078:	8e 7f       	andi	r24, 0xFE	; 254
    107a:	80 93 df 00 	sts	0x00DF, r24
		USB_INT_Disable(USB_INT_SRPI);
    107e:	80 91 de 00 	lds	r24, 0x00DE
    1082:	8e 7f       	andi	r24, 0xFE	; 254
    1084:	80 93 de 00 	sts	0x00DE, r24

		EVENT_USB_Host_DeviceAttached();
    1088:	32 db       	rcall	.-2460   	; 0x6ee <EVENT_USB_Host_DeviceAttached>

		USB_INT_Enable(USB_INT_DDISCI);
    108a:	80 91 a0 00 	lds	r24, 0x00A0
    108e:	82 60       	ori	r24, 0x02	; 2
    1090:	80 93 a0 00 	sts	0x00A0, r24

		USB_HostState = HOST_STATE_Powered;
    1094:	83 e0       	ldi	r24, 0x03	; 3
    1096:	80 93 06 02 	sts	0x0206, r24
	}

	if (USB_INT_HasOccurred(USB_INT_BCERRI) && USB_INT_IsEnabled(USB_INT_BCERRI))
    109a:	80 91 df 00 	lds	r24, 0x00DF
    109e:	82 ff       	sbrs	r24, 2
    10a0:	0e c0       	rjmp	.+28     	; 0x10be <__vector_10+0x224>
    10a2:	80 91 de 00 	lds	r24, 0x00DE
    10a6:	82 ff       	sbrs	r24, 2
    10a8:	0a c0       	rjmp	.+20     	; 0x10be <__vector_10+0x224>
	{
		USB_INT_Clear(USB_INT_BCERRI);
    10aa:	80 91 df 00 	lds	r24, 0x00DF
    10ae:	8b 7f       	andi	r24, 0xFB	; 251
    10b0:	80 93 df 00 	sts	0x00DF, r24

		EVENT_USB_Host_DeviceEnumerationFailed(HOST_ENUMERROR_NoDeviceDetected, 0);
    10b4:	82 e0       	ldi	r24, 0x02	; 2
    10b6:	60 e0       	ldi	r22, 0x00	; 0
    10b8:	c8 da       	rcall	.-2672   	; 0x64a <EVENT_USB_Host_DeviceEnumerationFailed>
		EVENT_USB_Host_DeviceUnattached();
    10ba:	10 db       	rcall	.-2528   	; 0x6dc <EVENT_USB_Host_DeviceUnattached>

		USB_ResetInterface();
    10bc:	27 de       	rcall	.-946    	; 0xd0c <USB_ResetInterface>
	}

	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_HSOFI) && USB_INT_IsEnabled(USB_INT_HSOFI))
    10be:	80 91 9f 00 	lds	r24, 0x009F
    10c2:	85 ff       	sbrs	r24, 5
    10c4:	0a c0       	rjmp	.+20     	; 0x10da <__vector_10+0x240>
    10c6:	80 91 a0 00 	lds	r24, 0x00A0
    10ca:	85 ff       	sbrs	r24, 5
    10cc:	06 c0       	rjmp	.+12     	; 0x10da <__vector_10+0x240>
	{
		USB_INT_Clear(USB_INT_HSOFI);
    10ce:	80 91 9f 00 	lds	r24, 0x009F
    10d2:	8f 7d       	andi	r24, 0xDF	; 223
    10d4:	80 93 9f 00 	sts	0x009F, r24

		EVENT_USB_Host_StartOfFrame();
    10d8:	3e d2       	rcall	.+1148   	; 0x1556 <USB_Event_Stub>
	}
	#endif
	#endif

	#if defined(USB_CAN_BE_BOTH)
	if (USB_INT_HasOccurred(USB_INT_IDTI) && USB_INT_IsEnabled(USB_INT_IDTI))
    10da:	80 91 da 00 	lds	r24, 0x00DA
    10de:	81 ff       	sbrs	r24, 1
    10e0:	1e c0       	rjmp	.+60     	; 0x111e <__vector_10+0x284>
    10e2:	80 91 d8 00 	lds	r24, 0x00D8
    10e6:	81 ff       	sbrs	r24, 1
    10e8:	1a c0       	rjmp	.+52     	; 0x111e <__vector_10+0x284>
	{
		USB_INT_Clear(USB_INT_IDTI);
    10ea:	80 91 da 00 	lds	r24, 0x00DA
    10ee:	8d 7f       	andi	r24, 0xFD	; 253
    10f0:	80 93 da 00 	sts	0x00DA, r24

		if (USB_DeviceState != DEVICE_STATE_Unattached)
    10f4:	80 91 fd 01 	lds	r24, 0x01FD
    10f8:	88 23       	and	r24, r24
    10fa:	09 f0       	breq	.+2      	; 0x10fe <__vector_10+0x264>
		  EVENT_USB_Device_Disconnect();
    10fc:	8f d9       	rcall	.-3298   	; 0x41c <EVENT_USB_Device_Disconnect>

		if (USB_HostState != HOST_STATE_Unattached)
    10fe:	80 91 06 02 	lds	r24, 0x0206
    1102:	82 30       	cpi	r24, 0x02	; 2
    1104:	09 f0       	breq	.+2      	; 0x1108 <__vector_10+0x26e>
		  EVENT_USB_Host_DeviceUnattached();
    1106:	ea da       	rcall	.-2604   	; 0x6dc <EVENT_USB_Host_DeviceUnattached>

			#if defined(USB_CAN_BE_BOTH)
			static inline uint8_t USB_GetUSBModeFromUID(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t USB_GetUSBModeFromUID(void)
			{
				if (USBSTA & (1 << ID))
    1108:	80 91 d9 00 	lds	r24, 0x00D9
    110c:	81 fd       	sbrc	r24, 1
    110e:	02 c0       	rjmp	.+4      	; 0x1114 <__vector_10+0x27a>
    1110:	82 e0       	ldi	r24, 0x02	; 2
    1112:	01 c0       	rjmp	.+2      	; 0x1116 <__vector_10+0x27c>
    1114:	81 e0       	ldi	r24, 0x01	; 1

		USB_CurrentMode = USB_GetUSBModeFromUID();
    1116:	80 93 f5 01 	sts	0x01F5, r24
		USB_ResetInterface();
    111a:	f8 dd       	rcall	.-1040   	; 0xd0c <USB_ResetInterface>

		EVENT_USB_UIDChange();
    111c:	c1 d8       	rcall	.-3710   	; 0x2a0 <EVENT_USB_UIDChange>
	}
	#endif
}
    111e:	ff 91       	pop	r31
    1120:	ef 91       	pop	r30
    1122:	bf 91       	pop	r27
    1124:	af 91       	pop	r26
    1126:	9f 91       	pop	r25
    1128:	8f 91       	pop	r24
    112a:	7f 91       	pop	r23
    112c:	6f 91       	pop	r22
    112e:	5f 91       	pop	r21
    1130:	4f 91       	pop	r20
    1132:	3f 91       	pop	r19
    1134:	2f 91       	pop	r18
    1136:	0f 90       	pop	r0
    1138:	0b be       	out	0x3b, r0	; 59
    113a:	0f 90       	pop	r0
    113c:	0f be       	out	0x3f, r0	; 63
    113e:	0f 90       	pop	r0
    1140:	1f 90       	pop	r1
    1142:	18 95       	reti

00001144 <USB_GetNextDescriptorComp>:

uint8_t USB_GetNextDescriptorComp(uint16_t* const BytesRem, void** const CurrConfigLoc, ConfigComparatorPtr_t const ComparatorRoutine)
{
    1144:	af 92       	push	r10
    1146:	bf 92       	push	r11
    1148:	cf 92       	push	r12
    114a:	df 92       	push	r13
    114c:	ef 92       	push	r14
    114e:	ff 92       	push	r15
    1150:	0f 93       	push	r16
    1152:	1f 93       	push	r17
    1154:	cf 93       	push	r28
    1156:	df 93       	push	r29
    1158:	7c 01       	movw	r14, r24
    115a:	8b 01       	movw	r16, r22
    115c:	5a 01       	movw	r10, r20
    115e:	21 c0       	rjmp	.+66     	; 0x11a2 <USB_GetNextDescriptorComp+0x5e>
	uint8_t ErrorCode;

	while (*BytesRem)
	{
		uint8_t* PrevDescLoc  = *CurrConfigLoc;
    1160:	f8 01       	movw	r30, r16
    1162:	c0 81       	ld	r28, Z
    1164:	d1 81       	ldd	r29, Z+1	; 0x01
			static inline void USB_GetNextDescriptor(uint16_t* const BytesRem,
			                                         void** CurrConfigLoc) ATTR_NON_NULL_PTR_ARG(1) ATTR_NON_NULL_PTR_ARG(2);
			static inline void USB_GetNextDescriptor(uint16_t* const BytesRem,
			                                         void** CurrConfigLoc)
			{
				uint16_t CurrDescriptorSize = DESCRIPTOR_CAST(*CurrConfigLoc, USB_Descriptor_Header_t).Size;
    1166:	88 81       	ld	r24, Y
    1168:	90 e0       	ldi	r25, 0x00	; 0

				*CurrConfigLoc  = ((uint8_t*)*CurrConfigLoc) + CurrDescriptorSize;
    116a:	9e 01       	movw	r18, r28
    116c:	28 0f       	add	r18, r24
    116e:	39 1f       	adc	r19, r25
    1170:	31 83       	std	Z+1, r19	; 0x01
    1172:	20 83       	st	Z, r18
				*BytesRem      -= CurrDescriptorSize;
    1174:	f7 01       	movw	r30, r14
    1176:	20 81       	ld	r18, Z
    1178:	31 81       	ldd	r19, Z+1	; 0x01
    117a:	28 1b       	sub	r18, r24
    117c:	39 0b       	sbc	r19, r25
    117e:	31 83       	std	Z+1, r19	; 0x01
    1180:	20 83       	st	Z, r18
		uint16_t PrevBytesRem = *BytesRem;

		USB_GetNextDescriptor(BytesRem, CurrConfigLoc);

		if ((ErrorCode = ComparatorRoutine(*CurrConfigLoc)) != DESCRIPTOR_SEARCH_NotFound)
    1182:	f8 01       	movw	r30, r16
    1184:	80 81       	ld	r24, Z
    1186:	91 81       	ldd	r25, Z+1	; 0x01
    1188:	f5 01       	movw	r30, r10
    118a:	09 95       	icall
    118c:	82 30       	cpi	r24, 0x02	; 2
    118e:	49 f0       	breq	.+18     	; 0x11a2 <USB_GetNextDescriptorComp+0x5e>
		{
			if (ErrorCode == DESCRIPTOR_SEARCH_Fail)
    1190:	81 30       	cpi	r24, 0x01	; 1
    1192:	71 f4       	brne	.+28     	; 0x11b0 <USB_GetNextDescriptorComp+0x6c>
			{
				*CurrConfigLoc = PrevDescLoc;
    1194:	f8 01       	movw	r30, r16
    1196:	c0 83       	st	Z, r28
    1198:	d1 83       	std	Z+1, r29	; 0x01
				*BytesRem      = PrevBytesRem;
    119a:	f7 01       	movw	r30, r14
    119c:	d1 82       	std	Z+1, r13	; 0x01
    119e:	c0 82       	st	Z, r12
    11a0:	07 c0       	rjmp	.+14     	; 0x11b0 <USB_GetNextDescriptorComp+0x6c>

uint8_t USB_GetNextDescriptorComp(uint16_t* const BytesRem, void** const CurrConfigLoc, ConfigComparatorPtr_t const ComparatorRoutine)
{
	uint8_t ErrorCode;

	while (*BytesRem)
    11a2:	f7 01       	movw	r30, r14
    11a4:	c0 80       	ld	r12, Z
    11a6:	d1 80       	ldd	r13, Z+1	; 0x01
    11a8:	c1 14       	cp	r12, r1
    11aa:	d1 04       	cpc	r13, r1
    11ac:	c9 f6       	brne	.-78     	; 0x1160 <USB_GetNextDescriptorComp+0x1c>
    11ae:	82 e0       	ldi	r24, 0x02	; 2
			return ErrorCode;
		}
	}

	return DESCRIPTOR_SEARCH_COMP_EndOfDescriptor;
}
    11b0:	df 91       	pop	r29
    11b2:	cf 91       	pop	r28
    11b4:	1f 91       	pop	r17
    11b6:	0f 91       	pop	r16
    11b8:	ff 90       	pop	r15
    11ba:	ef 90       	pop	r14
    11bc:	df 90       	pop	r13
    11be:	cf 90       	pop	r12
    11c0:	bf 90       	pop	r11
    11c2:	af 90       	pop	r10
    11c4:	08 95       	ret

000011c6 <USB_Host_GetDeviceConfigDescriptor>:
#include "ConfigDescriptor.h"

#if defined(USB_CAN_BE_HOST)
uint8_t USB_Host_GetDeviceConfigDescriptor(uint8_t ConfigNumber, uint16_t* const ConfigSizePtr,
                                           void* BufferPtr, uint16_t BufferSize)
{
    11c6:	cf 92       	push	r12
    11c8:	df 92       	push	r13
    11ca:	ef 92       	push	r14
    11cc:	ff 92       	push	r15
    11ce:	0f 93       	push	r16
    11d0:	1f 93       	push	r17
    11d2:	df 93       	push	r29
    11d4:	cf 93       	push	r28
    11d6:	cd b7       	in	r28, 0x3d	; 61
    11d8:	de b7       	in	r29, 0x3e	; 62
    11da:	29 97       	sbiw	r28, 0x09	; 9
    11dc:	0f b6       	in	r0, 0x3f	; 63
    11de:	f8 94       	cli
    11e0:	de bf       	out	0x3e, r29	; 62
    11e2:	0f be       	out	0x3f, r0	; 63
    11e4:	cd bf       	out	0x3d, r28	; 61
    11e6:	6b 01       	movw	r12, r22
    11e8:	8a 01       	movw	r16, r20
    11ea:	79 01       	movw	r14, r18
	uint8_t ErrorCode;
	uint8_t ConfigHeader[sizeof(USB_Descriptor_Configuration_Header_t)];

	USB_ControlRequest = (USB_Request_Header_t)
    11ec:	90 e8       	ldi	r25, 0x80	; 128
    11ee:	90 93 fe 01 	sts	0x01FE, r25
    11f2:	96 e0       	ldi	r25, 0x06	; 6
    11f4:	90 93 ff 01 	sts	0x01FF, r25
    11f8:	90 e0       	ldi	r25, 0x00	; 0
    11fa:	01 97       	sbiw	r24, 0x01	; 1
    11fc:	92 60       	ori	r25, 0x02	; 2
    11fe:	90 93 01 02 	sts	0x0201, r25
    1202:	80 93 00 02 	sts	0x0200, r24
    1206:	10 92 03 02 	sts	0x0203, r1
    120a:	10 92 02 02 	sts	0x0202, r1
    120e:	89 e0       	ldi	r24, 0x09	; 9
    1210:	90 e0       	ldi	r25, 0x00	; 0
    1212:	90 93 05 02 	sts	0x0205, r25
    1216:	80 93 04 02 	sts	0x0204, r24
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
    121a:	10 92 a7 00 	sts	0x00A7, r1
			.wLength       = sizeof(USB_Descriptor_Configuration_Header_t),
		};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	if ((ErrorCode = USB_Host_SendControlRequest(ConfigHeader)) != HOST_SENDCONTROL_Successful)
    121e:	ce 01       	movw	r24, r28
    1220:	01 96       	adiw	r24, 0x01	; 1
    1222:	00 d3       	rcall	.+1536   	; 0x1824 <USB_Host_SendControlRequest>
    1224:	28 2f       	mov	r18, r24
    1226:	88 23       	and	r24, r24
    1228:	c1 f4       	brne	.+48     	; 0x125a <USB_Host_GetDeviceConfigDescriptor+0x94>
	  return ErrorCode;

	*ConfigSizePtr = DESCRIPTOR_PCAST(ConfigHeader, USB_Descriptor_Configuration_Header_t)->TotalConfigurationSize;
    122a:	8b 81       	ldd	r24, Y+3	; 0x03
    122c:	9c 81       	ldd	r25, Y+4	; 0x04
    122e:	f6 01       	movw	r30, r12
    1230:	91 83       	std	Z+1, r25	; 0x01
    1232:	80 83       	st	Z, r24

	if (*ConfigSizePtr > BufferSize)
    1234:	e8 16       	cp	r14, r24
    1236:	f9 06       	cpc	r15, r25
    1238:	10 f4       	brcc	.+4      	; 0x123e <USB_Host_GetDeviceConfigDescriptor+0x78>
    123a:	25 e0       	ldi	r18, 0x05	; 5
    123c:	0e c0       	rjmp	.+28     	; 0x125a <USB_Host_GetDeviceConfigDescriptor+0x94>
	  return HOST_GETCONFIG_BuffOverflow;

	USB_ControlRequest.wLength = *ConfigSizePtr;
    123e:	90 93 05 02 	sts	0x0205, r25
    1242:	80 93 04 02 	sts	0x0204, r24

	if ((ErrorCode = USB_Host_SendControlRequest(BufferPtr)) != HOST_SENDCONTROL_Successful)
    1246:	c8 01       	movw	r24, r16
    1248:	ed d2       	rcall	.+1498   	; 0x1824 <USB_Host_SendControlRequest>
    124a:	28 2f       	mov	r18, r24
    124c:	88 23       	and	r24, r24
    124e:	29 f4       	brne	.+10     	; 0x125a <USB_Host_GetDeviceConfigDescriptor+0x94>
	  return ErrorCode;

	if (DESCRIPTOR_TYPE(BufferPtr) != DTYPE_Configuration)
    1250:	f8 01       	movw	r30, r16
    1252:	81 81       	ldd	r24, Z+1	; 0x01
    1254:	82 30       	cpi	r24, 0x02	; 2
    1256:	09 f0       	breq	.+2      	; 0x125a <USB_Host_GetDeviceConfigDescriptor+0x94>
    1258:	26 e0       	ldi	r18, 0x06	; 6
	  return HOST_GETCONFIG_InvalidData;

	return HOST_GETCONFIG_Successful;
}
    125a:	82 2f       	mov	r24, r18
    125c:	29 96       	adiw	r28, 0x09	; 9
    125e:	0f b6       	in	r0, 0x3f	; 63
    1260:	f8 94       	cli
    1262:	de bf       	out	0x3e, r29	; 62
    1264:	0f be       	out	0x3f, r0	; 63
    1266:	cd bf       	out	0x3d, r28	; 61
    1268:	cf 91       	pop	r28
    126a:	df 91       	pop	r29
    126c:	1f 91       	pop	r17
    126e:	0f 91       	pop	r16
    1270:	ff 90       	pop	r15
    1272:	ef 90       	pop	r14
    1274:	df 90       	pop	r13
    1276:	cf 90       	pop	r12
    1278:	08 95       	ret

0000127a <USB_Device_ProcessControlRequest>:
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
    127a:	0f 93       	push	r16
    127c:	1f 93       	push	r17
    127e:	df 93       	push	r29
    1280:	cf 93       	push	r28
    1282:	cd b7       	in	r28, 0x3d	; 61
    1284:	de b7       	in	r29, 0x3e	; 62
    1286:	ac 97       	sbiw	r28, 0x2c	; 44
    1288:	0f b6       	in	r0, 0x3f	; 63
    128a:	f8 94       	cli
    128c:	de bf       	out	0x3e, r29	; 62
    128e:	0f be       	out	0x3f, r0	; 63
    1290:	cd bf       	out	0x3d, r28	; 61
    1292:	ee ef       	ldi	r30, 0xFE	; 254
    1294:	f1 e0       	ldi	r31, 0x01	; 1
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_Byte(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_Byte(void)
			{
				return UEDATX;
    1296:	80 91 f1 00 	lds	r24, 0x00F1
	uint8_t* RequestHeader  = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_Byte();
    129a:	81 93       	st	Z+, r24

void USB_Device_ProcessControlRequest(void)
{
	uint8_t* RequestHeader  = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
    129c:	22 e0       	ldi	r18, 0x02	; 2
    129e:	e6 30       	cpi	r30, 0x06	; 6
    12a0:	f2 07       	cpc	r31, r18
    12a2:	c9 f7       	brne	.-14     	; 0x1296 <USB_Device_ProcessControlRequest+0x1c>
	  *(RequestHeader++) = Endpoint_Read_Byte();

	EVENT_USB_Device_ControlRequest();
    12a4:	00 d9       	rcall	.-3584   	; 0x4a6 <EVENT_USB_Device_ControlRequest>
			 *  \return Boolean true if the selected endpoint has received a SETUP packet, false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    12a6:	80 91 e8 00 	lds	r24, 0x00E8

	if (Endpoint_IsSETUPReceived())
    12aa:	83 ff       	sbrs	r24, 3
    12ac:	3b c1       	rjmp	.+630    	; 0x1524 <USB_Device_ProcessControlRequest+0x2aa>
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
    12ae:	80 91 fe 01 	lds	r24, 0x01FE

		switch (USB_ControlRequest.bRequest)
    12b2:	30 91 ff 01 	lds	r19, 0x01FF
    12b6:	35 30       	cpi	r19, 0x05	; 5
    12b8:	09 f4       	brne	.+2      	; 0x12bc <USB_Device_ProcessControlRequest+0x42>
    12ba:	87 c0       	rjmp	.+270    	; 0x13ca <USB_Device_ProcessControlRequest+0x150>
    12bc:	36 30       	cpi	r19, 0x06	; 6
    12be:	40 f4       	brcc	.+16     	; 0x12d0 <USB_Device_ProcessControlRequest+0x56>
    12c0:	31 30       	cpi	r19, 0x01	; 1
    12c2:	c9 f1       	breq	.+114    	; 0x1336 <USB_Device_ProcessControlRequest+0xbc>
    12c4:	31 30       	cpi	r19, 0x01	; 1
    12c6:	70 f0       	brcs	.+28     	; 0x12e4 <USB_Device_ProcessControlRequest+0x6a>
    12c8:	33 30       	cpi	r19, 0x03	; 3
    12ca:	09 f0       	breq	.+2      	; 0x12ce <USB_Device_ProcessControlRequest+0x54>
    12cc:	2b c1       	rjmp	.+598    	; 0x1524 <USB_Device_ProcessControlRequest+0x2aa>
    12ce:	33 c0       	rjmp	.+102    	; 0x1336 <USB_Device_ProcessControlRequest+0xbc>
    12d0:	38 30       	cpi	r19, 0x08	; 8
    12d2:	09 f4       	brne	.+2      	; 0x12d6 <USB_Device_ProcessControlRequest+0x5c>
    12d4:	f8 c0       	rjmp	.+496    	; 0x14c6 <USB_Device_ProcessControlRequest+0x24c>
    12d6:	39 30       	cpi	r19, 0x09	; 9
    12d8:	09 f4       	brne	.+2      	; 0x12dc <USB_Device_ProcessControlRequest+0x62>
    12da:	07 c1       	rjmp	.+526    	; 0x14ea <USB_Device_ProcessControlRequest+0x270>
    12dc:	36 30       	cpi	r19, 0x06	; 6
    12de:	09 f0       	breq	.+2      	; 0x12e2 <USB_Device_ProcessControlRequest+0x68>
    12e0:	21 c1       	rjmp	.+578    	; 0x1524 <USB_Device_ProcessControlRequest+0x2aa>
    12e2:	99 c0       	rjmp	.+306    	; 0x1416 <USB_Device_ProcessControlRequest+0x19c>
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    12e4:	80 38       	cpi	r24, 0x80	; 128
    12e6:	21 f0       	breq	.+8      	; 0x12f0 <USB_Device_ProcessControlRequest+0x76>
    12e8:	82 38       	cpi	r24, 0x82	; 130
    12ea:	09 f0       	breq	.+2      	; 0x12ee <USB_Device_ProcessControlRequest+0x74>
    12ec:	1b c1       	rjmp	.+566    	; 0x1524 <USB_Device_ProcessControlRequest+0x2aa>
    12ee:	08 c0       	rjmp	.+16     	; 0x1300 <USB_Device_ProcessControlRequest+0x86>
    12f0:	90 91 f9 01 	lds	r25, 0x01F9
			if (USB_CurrentlySelfPowered)
			  CurrentStatus |= FEATURE_SELFPOWERED_ENABLED;
			#endif

			#if !defined(NO_DEVICE_REMOTE_WAKEUP)
			if (USB_RemoteWakeupEnabled)
    12f4:	80 91 fa 01 	lds	r24, 0x01FA
    12f8:	88 23       	and	r24, r24
    12fa:	99 f0       	breq	.+38     	; 0x1322 <USB_Device_ProcessControlRequest+0xa8>
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
    12fc:	92 60       	ori	r25, 0x02	; 2
    12fe:	11 c0       	rjmp	.+34     	; 0x1322 <USB_Device_ProcessControlRequest+0xa8>
			#endif
			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_ENDPOINT):
			Endpoint_SelectEndpoint((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
    1300:	80 91 02 02 	lds	r24, 0x0202
    1304:	87 70       	andi	r24, 0x07	; 7
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    1306:	80 93 e9 00 	sts	0x00E9, r24
			 *  \return Boolean true if the currently selected endpoint is stalled, false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    130a:	80 91 eb 00 	lds	r24, 0x00EB

			CurrentStatus = Endpoint_IsStalled();
    130e:	90 e0       	ldi	r25, 0x00	; 0
    1310:	25 e0       	ldi	r18, 0x05	; 5
    1312:	96 95       	lsr	r25
    1314:	87 95       	ror	r24
    1316:	2a 95       	dec	r18
    1318:	e1 f7       	brne	.-8      	; 0x1312 <USB_Device_ProcessControlRequest+0x98>
    131a:	98 2f       	mov	r25, r24
    131c:	91 70       	andi	r25, 0x01	; 1
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    131e:	10 92 e9 00 	sts	0x00E9, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1322:	80 91 e8 00 	lds	r24, 0x00E8
    1326:	87 7f       	andi	r24, 0xF7	; 247
    1328:	80 93 e8 00 	sts	0x00E8, r24
			 *  \param[in] Word  Next word to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_Word_LE(const uint16_t Word) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_Word_LE(const uint16_t Word)
			{
				UEDATX = (Word & 0xFF);
    132c:	90 93 f1 00 	sts	0x00F1, r25
				UEDATX = (Word >> 8);
    1330:	10 92 f1 00 	sts	0x00F1, r1
    1334:	d3 c0       	rjmp	.+422    	; 0x14dc <USB_Device_ProcessControlRequest+0x262>
				}

				break;
			case REQ_ClearFeature:
			case REQ_SetFeature:
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    1336:	88 23       	and	r24, r24
    1338:	19 f0       	breq	.+6      	; 0x1340 <USB_Device_ProcessControlRequest+0xc6>
    133a:	82 30       	cpi	r24, 0x02	; 2
    133c:	09 f0       	breq	.+2      	; 0x1340 <USB_Device_ProcessControlRequest+0xc6>
    133e:	f2 c0       	rjmp	.+484    	; 0x1524 <USB_Device_ProcessControlRequest+0x2aa>
	Endpoint_ClearStatusStage();
}

static void USB_Device_ClearSetFeature(void)
{
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
    1340:	90 e0       	ldi	r25, 0x00	; 0
    1342:	8f 71       	andi	r24, 0x1F	; 31
    1344:	90 70       	andi	r25, 0x00	; 0
    1346:	00 97       	sbiw	r24, 0x00	; 0
    1348:	21 f0       	breq	.+8      	; 0x1352 <USB_Device_ProcessControlRequest+0xd8>
    134a:	02 97       	sbiw	r24, 0x02	; 2
    134c:	09 f0       	breq	.+2      	; 0x1350 <USB_Device_ProcessControlRequest+0xd6>
    134e:	ea c0       	rjmp	.+468    	; 0x1524 <USB_Device_ProcessControlRequest+0x2aa>
    1350:	0c c0       	rjmp	.+24     	; 0x136a <USB_Device_ProcessControlRequest+0xf0>
	{
		#if !defined(NO_DEVICE_REMOTE_WAKEUP)
		case REQREC_DEVICE:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
    1352:	80 91 00 02 	lds	r24, 0x0200
    1356:	81 30       	cpi	r24, 0x01	; 1
    1358:	09 f0       	breq	.+2      	; 0x135c <USB_Device_ProcessControlRequest+0xe2>
    135a:	e4 c0       	rjmp	.+456    	; 0x1524 <USB_Device_ProcessControlRequest+0x2aa>
			  USB_RemoteWakeupEnabled = (USB_ControlRequest.bRequest == REQ_SetFeature);
    135c:	10 92 fa 01 	sts	0x01FA, r1
    1360:	33 30       	cpi	r19, 0x03	; 3
    1362:	69 f5       	brne	.+90     	; 0x13be <USB_Device_ProcessControlRequest+0x144>
    1364:	80 93 fa 01 	sts	0x01FA, r24
    1368:	2a c0       	rjmp	.+84     	; 0x13be <USB_Device_ProcessControlRequest+0x144>

			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
    136a:	80 91 00 02 	lds	r24, 0x0200
    136e:	88 23       	and	r24, r24
    1370:	31 f5       	brne	.+76     	; 0x13be <USB_Device_ProcessControlRequest+0x144>
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
    1372:	20 91 02 02 	lds	r18, 0x0202
    1376:	27 70       	andi	r18, 0x07	; 7

				if (EndpointIndex == ENDPOINT_CONTROLEP)
    1378:	09 f4       	brne	.+2      	; 0x137c <USB_Device_ProcessControlRequest+0x102>
    137a:	d4 c0       	rjmp	.+424    	; 0x1524 <USB_Device_ProcessControlRequest+0x2aa>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    137c:	20 93 e9 00 	sts	0x00E9, r18
			 * \return Boolean True if the currently selected endpoint is enabled, false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
    1380:	80 91 eb 00 	lds	r24, 0x00EB
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
    1384:	80 ff       	sbrs	r24, 0
    1386:	1b c0       	rjmp	.+54     	; 0x13be <USB_Device_ProcessControlRequest+0x144>
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
    1388:	33 30       	cpi	r19, 0x03	; 3
    138a:	21 f4       	brne	.+8      	; 0x1394 <USB_Device_ProcessControlRequest+0x11a>
			 *  \ingroup Group_EndpointPacketManagement
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    138c:	80 91 eb 00 	lds	r24, 0x00EB
    1390:	80 62       	ori	r24, 0x20	; 32
    1392:	13 c0       	rjmp	.+38     	; 0x13ba <USB_Device_ProcessControlRequest+0x140>
			 *  \ingroup Group_EndpointPacketManagement
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
    1394:	80 91 eb 00 	lds	r24, 0x00EB
    1398:	80 61       	ori	r24, 0x10	; 16
    139a:	80 93 eb 00 	sts	0x00EB, r24
			 *  \param[in] EndpointNumber Endpoint number whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetFIFO(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetFIFO(const uint8_t EndpointNumber)
			{
				UERST = (1 << EndpointNumber);
    139e:	81 e0       	ldi	r24, 0x01	; 1
    13a0:	90 e0       	ldi	r25, 0x00	; 0
    13a2:	02 c0       	rjmp	.+4      	; 0x13a8 <USB_Device_ProcessControlRequest+0x12e>
    13a4:	88 0f       	add	r24, r24
    13a6:	99 1f       	adc	r25, r25
    13a8:	2a 95       	dec	r18
    13aa:	e2 f7       	brpl	.-8      	; 0x13a4 <USB_Device_ProcessControlRequest+0x12a>
    13ac:	80 93 ea 00 	sts	0x00EA, r24
				UERST = 0;
    13b0:	10 92 ea 00 	sts	0x00EA, r1

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
    13b4:	80 91 eb 00 	lds	r24, 0x00EB
    13b8:	88 60       	ori	r24, 0x08	; 8
    13ba:	80 93 eb 00 	sts	0x00EB, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    13be:	10 92 e9 00 	sts	0x00E9, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    13c2:	80 91 e8 00 	lds	r24, 0x00E8
    13c6:	87 7f       	andi	r24, 0xF7	; 247
    13c8:	8c c0       	rjmp	.+280    	; 0x14e2 <USB_Device_ProcessControlRequest+0x268>
					USB_Device_ClearSetFeature();
				}

				break;
			case REQ_SetAddress:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    13ca:	88 23       	and	r24, r24
    13cc:	09 f0       	breq	.+2      	; 0x13d0 <USB_Device_ProcessControlRequest+0x156>
    13ce:	aa c0       	rjmp	.+340    	; 0x1524 <USB_Device_ProcessControlRequest+0x2aa>
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t DeviceAddress = (USB_ControlRequest.wValue & 0x7F);
    13d0:	10 91 00 02 	lds	r17, 0x0200
    13d4:	1f 77       	andi	r17, 0x7F	; 127

	ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
    13d6:	0f b7       	in	r16, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    13d8:	f8 94       	cli
    13da:	80 91 e8 00 	lds	r24, 0x00E8
    13de:	87 7f       	andi	r24, 0xF7	; 247
    13e0:	80 93 e8 00 	sts	0x00E8, r24
	{
		Endpoint_ClearSETUP();

		Endpoint_ClearStatusStage();
    13e4:	a0 d9       	rcall	.-3264   	; 0x726 <Endpoint_ClearStatusStage>
			 *  \return Boolean true if the current endpoint is ready for an IN packet, false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    13e6:	80 91 e8 00 	lds	r24, 0x00E8

		while (!(Endpoint_IsINReady()));
    13ea:	80 ff       	sbrs	r24, 0
    13ec:	fc cf       	rjmp	.-8      	; 0x13e6 <USB_Device_ProcessControlRequest+0x16c>

		USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
    13ee:	11 23       	and	r17, r17
    13f0:	11 f4       	brne	.+4      	; 0x13f6 <USB_Device_ProcessControlRequest+0x17c>
    13f2:	82 e0       	ldi	r24, 0x02	; 2
    13f4:	01 c0       	rjmp	.+2      	; 0x13f8 <USB_Device_ProcessControlRequest+0x17e>
    13f6:	83 e0       	ldi	r24, 0x03	; 3
    13f8:	80 93 fd 01 	sts	0x01FD, r24
			#endif

			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				UDADDR  = ((UDADDR & (1 << ADDEN)) | (Address & 0x7F));
    13fc:	80 91 e3 00 	lds	r24, 0x00E3
    1400:	80 78       	andi	r24, 0x80	; 128
    1402:	18 2b       	or	r17, r24
    1404:	10 93 e3 00 	sts	0x00E3, r17
				UDADDR |= (1 << ADDEN);
    1408:	80 91 e3 00 	lds	r24, 0x00E3
    140c:	80 68       	ori	r24, 0x80	; 128
    140e:	80 93 e3 00 	sts	0x00E3, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    1412:	0f bf       	out	0x3f, r16	; 63
    __asm__ volatile ("" ::: "memory");
    1414:	87 c0       	rjmp	.+270    	; 0x1524 <USB_Device_ProcessControlRequest+0x2aa>
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_SetAddress();

				break;
			case REQ_GetDescriptor:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    1416:	80 58       	subi	r24, 0x80	; 128
    1418:	82 30       	cpi	r24, 0x02	; 2
    141a:	08 f0       	brcs	.+2      	; 0x141e <USB_Device_ProcessControlRequest+0x1a4>
    141c:	83 c0       	rjmp	.+262    	; 0x1524 <USB_Device_ProcessControlRequest+0x2aa>
	#if !defined(USE_FLASH_DESCRIPTORS) && !defined(USE_EEPROM_DESCRIPTORS) && !defined(USE_RAM_DESCRIPTORS)
	uint8_t DescriptorAddressSpace;
	#endif

	#if !defined(NO_INTERNAL_SERIAL) && (USE_INTERNAL_SERIAL != NO_DESCRIPTOR)
	if (USB_ControlRequest.wValue == ((DTYPE_String << 8) | USE_INTERNAL_SERIAL))
    141e:	80 91 00 02 	lds	r24, 0x0200
    1422:	90 91 01 02 	lds	r25, 0x0201
    1426:	23 e0       	ldi	r18, 0x03	; 3
    1428:	8c 3d       	cpi	r24, 0xDC	; 220
    142a:	92 07       	cpc	r25, r18
    142c:	99 f5       	brne	.+102    	; 0x1494 <USB_Device_ProcessControlRequest+0x21a>
	} SignatureDescriptor;

	SignatureDescriptor.Header.Type = DTYPE_String;
	SignatureDescriptor.Header.Size = sizeof(SignatureDescriptor);

	ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
    142e:	7f b7       	in	r23, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    1430:	f8 94       	cli
    1432:	de 01       	movw	r26, r28
    1434:	15 96       	adiw	r26, 0x05	; 5
    1436:	6e e0       	ldi	r22, 0x0E	; 14
    1438:	40 e0       	ldi	r20, 0x00	; 0
    143a:	50 e0       	ldi	r21, 0x00	; 0
	{
		uint8_t SigReadAddress = 0x0E;

		for (uint8_t SerialCharNum = 0; SerialCharNum < 20; SerialCharNum++)
		{
			uint8_t SerialByte = boot_signature_byte_get(SigReadAddress);
    143c:	11 e2       	ldi	r17, 0x21	; 33
    143e:	e6 2f       	mov	r30, r22
    1440:	f0 e0       	ldi	r31, 0x00	; 0
    1442:	10 93 57 00 	sts	0x0057, r17
    1446:	84 91       	lpm	r24, Z+

			if (SerialCharNum & 0x01)
    1448:	40 ff       	sbrs	r20, 0
    144a:	03 c0       	rjmp	.+6      	; 0x1452 <USB_Device_ProcessControlRequest+0x1d8>
			{
				SerialByte >>= 4;
    144c:	82 95       	swap	r24
    144e:	8f 70       	andi	r24, 0x0F	; 15
				SigReadAddress++;
    1450:	6f 5f       	subi	r22, 0xFF	; 255
			}

			SerialByte &= 0x0F;
    1452:	8f 70       	andi	r24, 0x0F	; 15
    1454:	28 2f       	mov	r18, r24
    1456:	30 e0       	ldi	r19, 0x00	; 0

			SignatureDescriptor.UnicodeString[SerialCharNum] = (SerialByte >= 10) ?
    1458:	8a 30       	cpi	r24, 0x0A	; 10
    145a:	18 f0       	brcs	.+6      	; 0x1462 <USB_Device_ProcessControlRequest+0x1e8>
    145c:	c9 01       	movw	r24, r18
    145e:	c7 96       	adiw	r24, 0x37	; 55
    1460:	02 c0       	rjmp	.+4      	; 0x1466 <USB_Device_ProcessControlRequest+0x1ec>
    1462:	c9 01       	movw	r24, r18
    1464:	c0 96       	adiw	r24, 0x30	; 48
    1466:	8d 93       	st	X+, r24
    1468:	9d 93       	st	X+, r25
    146a:	4f 5f       	subi	r20, 0xFF	; 255
    146c:	5f 4f       	sbci	r21, 0xFF	; 255

	ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
	{
		uint8_t SigReadAddress = 0x0E;

		for (uint8_t SerialCharNum = 0; SerialCharNum < 20; SerialCharNum++)
    146e:	44 31       	cpi	r20, 0x14	; 20
    1470:	51 05       	cpc	r21, r1
    1472:	29 f7       	brne	.-54     	; 0x143e <USB_Device_ProcessControlRequest+0x1c4>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    1474:	7f bf       	out	0x3f, r23	; 63
		USB_Descriptor_Header_t Header;
		wchar_t                 UnicodeString[20];
	} SignatureDescriptor;

	SignatureDescriptor.Header.Type = DTYPE_String;
	SignatureDescriptor.Header.Size = sizeof(SignatureDescriptor);
    1476:	8a e2       	ldi	r24, 0x2A	; 42
    1478:	8b 83       	std	Y+3, r24	; 0x03
	{
		USB_Descriptor_Header_t Header;
		wchar_t                 UnicodeString[20];
	} SignatureDescriptor;

	SignatureDescriptor.Header.Type = DTYPE_String;
    147a:	83 e0       	ldi	r24, 0x03	; 3
    147c:	8c 83       	std	Y+4, r24	; 0x04
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    147e:	80 91 e8 00 	lds	r24, 0x00E8
    1482:	87 7f       	andi	r24, 0xF7	; 247
    1484:	80 93 e8 00 	sts	0x00E8, r24
		}
	}

	Endpoint_ClearSETUP();

	Endpoint_Write_Control_Stream_LE(&SignatureDescriptor, sizeof(SignatureDescriptor));
    1488:	ce 01       	movw	r24, r28
    148a:	03 96       	adiw	r24, 0x03	; 3
    148c:	6a e2       	ldi	r22, 0x2A	; 42
    148e:	70 e0       	ldi	r23, 0x00	; 0
    1490:	63 d0       	rcall	.+198    	; 0x1558 <Endpoint_Write_Control_Stream_LE>
    1492:	13 c0       	rjmp	.+38     	; 0x14ba <USB_Device_ProcessControlRequest+0x240>
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif

	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
    1494:	60 91 02 02 	lds	r22, 0x0202
    1498:	ae 01       	movw	r20, r28
    149a:	4f 5f       	subi	r20, 0xFF	; 255
    149c:	5f 4f       	sbci	r21, 0xFF	; 255
    149e:	0e 94 c9 01 	call	0x392	; 0x392 <CALLBACK_USB_GetDescriptor>
    14a2:	bc 01       	movw	r22, r24
    14a4:	00 97       	sbiw	r24, 0x00	; 0
    14a6:	09 f4       	brne	.+2      	; 0x14aa <USB_Device_ProcessControlRequest+0x230>
    14a8:	3d c0       	rjmp	.+122    	; 0x1524 <USB_Device_ProcessControlRequest+0x2aa>
    14aa:	80 91 e8 00 	lds	r24, 0x00E8
    14ae:	87 7f       	andi	r24, 0xF7	; 247
    14b0:	80 93 e8 00 	sts	0x00E8, r24
	#if defined(USE_RAM_DESCRIPTORS)
	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_EEPROM_DESCRIPTORS)
	Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_FLASH_DESCRIPTORS)
	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
    14b4:	89 81       	ldd	r24, Y+1	; 0x01
    14b6:	9a 81       	ldd	r25, Y+2	; 0x02
    14b8:	ad d0       	rcall	.+346    	; 0x1614 <Endpoint_Write_Control_PStream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    14ba:	80 91 e8 00 	lds	r24, 0x00E8
    14be:	8b 77       	andi	r24, 0x7B	; 123
    14c0:	80 93 e8 00 	sts	0x00E8, r24
    14c4:	2f c0       	rjmp	.+94     	; 0x1524 <USB_Device_ProcessControlRequest+0x2aa>
					USB_Device_GetDescriptor();
				}

				break;
			case REQ_GetConfiguration:
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
    14c6:	80 38       	cpi	r24, 0x80	; 128
    14c8:	69 f5       	brne	.+90     	; 0x1524 <USB_Device_ProcessControlRequest+0x2aa>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    14ca:	80 91 e8 00 	lds	r24, 0x00E8
    14ce:	87 7f       	andi	r24, 0xF7	; 247
    14d0:	80 93 e8 00 	sts	0x00E8, r24

static void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();

	Endpoint_Write_Byte(USB_ConfigurationNumber);
    14d4:	80 91 fb 01 	lds	r24, 0x01FB
			 *  \param[in] Byte  Next byte to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_Byte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_Byte(const uint8_t Byte)
			{
				UEDATX = Byte;
    14d8:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    14dc:	80 91 e8 00 	lds	r24, 0x00E8
    14e0:	8e 77       	andi	r24, 0x7E	; 126
    14e2:	80 93 e8 00 	sts	0x00E8, r24
	Endpoint_ClearIN();

	Endpoint_ClearStatusStage();
    14e6:	1f d9       	rcall	.-3522   	; 0x726 <Endpoint_ClearStatusStage>
    14e8:	1d c0       	rjmp	.+58     	; 0x1524 <USB_Device_ProcessControlRequest+0x2aa>
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_GetConfiguration();

				break;
			case REQ_SetConfiguration:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    14ea:	88 23       	and	r24, r24
    14ec:	d9 f4       	brne	.+54     	; 0x1524 <USB_Device_ProcessControlRequest+0x2aa>
}

static void USB_Device_SetConfiguration(void)
{
	#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
    14ee:	90 91 00 02 	lds	r25, 0x0200
    14f2:	92 30       	cpi	r25, 0x02	; 2
    14f4:	b8 f4       	brcc	.+46     	; 0x1524 <USB_Device_ProcessControlRequest+0x2aa>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    14f6:	80 91 e8 00 	lds	r24, 0x00E8
    14fa:	87 7f       	andi	r24, 0xF7	; 247
    14fc:	80 93 e8 00 	sts	0x00E8, r24
	}
	#endif

	Endpoint_ClearSETUP();

	USB_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
    1500:	90 93 fb 01 	sts	0x01FB, r25

	Endpoint_ClearStatusStage();
    1504:	10 d9       	rcall	.-3552   	; 0x726 <Endpoint_ClearStatusStage>

	if (USB_ConfigurationNumber)
    1506:	80 91 fb 01 	lds	r24, 0x01FB
    150a:	88 23       	and	r24, r24
    150c:	31 f4       	brne	.+12     	; 0x151a <USB_Device_ProcessControlRequest+0x2a0>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
    150e:	80 91 e3 00 	lds	r24, 0x00E3
	  USB_DeviceState = DEVICE_STATE_Configured;
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
    1512:	87 fd       	sbrc	r24, 7
    1514:	02 c0       	rjmp	.+4      	; 0x151a <USB_Device_ProcessControlRequest+0x2a0>
    1516:	81 e0       	ldi	r24, 0x01	; 1
    1518:	01 c0       	rjmp	.+2      	; 0x151c <USB_Device_ProcessControlRequest+0x2a2>
    151a:	84 e0       	ldi	r24, 0x04	; 4
    151c:	80 93 fd 01 	sts	0x01FD, r24

	EVENT_USB_Device_ConfigurationChanged();
    1520:	0e 94 57 02 	call	0x4ae	; 0x4ae <EVENT_USB_Device_ConfigurationChanged>
			 *  \return Boolean true if the selected endpoint has received a SETUP packet, false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    1524:	80 91 e8 00 	lds	r24, 0x00E8

				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
    1528:	83 ff       	sbrs	r24, 3
    152a:	0a c0       	rjmp	.+20     	; 0x1540 <USB_Device_ProcessControlRequest+0x2c6>
			 *  \ingroup Group_EndpointPacketManagement
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    152c:	80 91 eb 00 	lds	r24, 0x00EB
    1530:	80 62       	ori	r24, 0x20	; 32
    1532:	80 93 eb 00 	sts	0x00EB, r24
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1536:	80 91 e8 00 	lds	r24, 0x00E8
    153a:	87 7f       	andi	r24, 0xF7	; 247
    153c:	80 93 e8 00 	sts	0x00E8, r24
	{
		Endpoint_StallTransaction();
		Endpoint_ClearSETUP();
	}
}
    1540:	ac 96       	adiw	r28, 0x2c	; 44
    1542:	0f b6       	in	r0, 0x3f	; 63
    1544:	f8 94       	cli
    1546:	de bf       	out	0x3e, r29	; 62
    1548:	0f be       	out	0x3f, r0	; 63
    154a:	cd bf       	out	0x3d, r28	; 61
    154c:	cf 91       	pop	r28
    154e:	df 91       	pop	r29
    1550:	1f 91       	pop	r17
    1552:	0f 91       	pop	r16
    1554:	08 95       	ret

00001556 <USB_Event_Stub>:
#include "Events.h"

void USB_Event_Stub(void)
{

}
    1556:	08 95       	ret

00001558 <Endpoint_Write_Control_Stream_LE>:
    1558:	9c 01       	movw	r18, r24
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
    155a:	40 91 04 02 	lds	r20, 0x0204
    155e:	50 91 05 02 	lds	r21, 0x0205
    1562:	46 17       	cp	r20, r22
    1564:	57 07       	cpc	r21, r23
    1566:	18 f4       	brcc	.+6      	; 0x156e <Endpoint_Write_Control_Stream_LE+0x16>
uint8_t TEMPLATE_FUNC_NAME (const void* Buffer,
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
    1568:	f9 01       	movw	r30, r18
    156a:	90 e0       	ldi	r25, 0x00	; 0
    156c:	3d c0       	rjmp	.+122    	; 0x15e8 <Endpoint_Write_Control_Stream_LE+0x90>
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
    156e:	61 15       	cp	r22, r1
    1570:	71 05       	cpc	r23, r1
    1572:	11 f0       	breq	.+4      	; 0x1578 <Endpoint_Write_Control_Stream_LE+0x20>
    1574:	ab 01       	movw	r20, r22
    1576:	f8 cf       	rjmp	.-16     	; 0x1568 <Endpoint_Write_Control_Stream_LE+0x10>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1578:	80 91 e8 00 	lds	r24, 0x00E8
    157c:	8e 77       	andi	r24, 0x7E	; 126
    157e:	80 93 e8 00 	sts	0x00E8, r24
    1582:	40 e0       	ldi	r20, 0x00	; 0
    1584:	50 e0       	ldi	r21, 0x00	; 0
    1586:	f0 cf       	rjmp	.-32     	; 0x1568 <Endpoint_Write_Control_Stream_LE+0x10>
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    1588:	80 91 fd 01 	lds	r24, 0x01FD

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    158c:	88 23       	and	r24, r24
    158e:	f1 f1       	breq	.+124    	; 0x160c <Endpoint_Write_Control_Stream_LE+0xb4>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    1590:	85 30       	cpi	r24, 0x05	; 5
    1592:	f1 f1       	breq	.+124    	; 0x1610 <Endpoint_Write_Control_Stream_LE+0xb8>
			 *  \return Boolean true if the selected endpoint has received a SETUP packet, false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    1594:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    1598:	83 ff       	sbrs	r24, 3
    159a:	02 c0       	rjmp	.+4      	; 0x15a0 <Endpoint_Write_Control_Stream_LE+0x48>
    159c:	81 e0       	ldi	r24, 0x01	; 1
    159e:	08 95       	ret
			 *  \return Boolean true if current endpoint is has received an OUT packet, false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    15a0:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
    15a4:	82 fd       	sbrc	r24, 2
    15a6:	2c c0       	rjmp	.+88     	; 0x1600 <Endpoint_Write_Control_Stream_LE+0xa8>
			 *  \return Boolean true if the current endpoint is ready for an IN packet, false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    15a8:	80 91 e8 00 	lds	r24, 0x00E8
		  break;

		if (Endpoint_IsINReady())
    15ac:	80 ff       	sbrs	r24, 0
    15ae:	1c c0       	rjmp	.+56     	; 0x15e8 <Endpoint_Write_Control_Stream_LE+0x90>
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
					return UEBCX;
    15b0:	20 91 f2 00 	lds	r18, 0x00F2
    15b4:	30 91 f3 00 	lds	r19, 0x00F3
    15b8:	07 c0       	rjmp	.+14     	; 0x15c8 <Endpoint_Write_Control_Stream_LE+0x70>
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_ControlEndpointSize))
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
    15ba:	81 91       	ld	r24, Z+
			 *  \param[in] Byte  Next byte to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_Byte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_Byte(const uint8_t Byte)
			{
				UEDATX = Byte;
    15bc:	80 93 f1 00 	sts	0x00F1, r24
				Length--;
    15c0:	41 50       	subi	r20, 0x01	; 1
    15c2:	50 40       	sbci	r21, 0x00	; 0
				BytesInEndpoint++;
    15c4:	2f 5f       	subi	r18, 0xFF	; 255
    15c6:	3f 4f       	sbci	r19, 0xFF	; 255

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_ControlEndpointSize))
    15c8:	41 15       	cp	r20, r1
    15ca:	51 05       	cpc	r21, r1
    15cc:	19 f0       	breq	.+6      	; 0x15d4 <Endpoint_Write_Control_Stream_LE+0x7c>
    15ce:	28 30       	cpi	r18, 0x08	; 8
    15d0:	31 05       	cpc	r19, r1
    15d2:	98 f3       	brcs	.-26     	; 0x15ba <Endpoint_Write_Control_Stream_LE+0x62>
				TEMPLATE_TRANSFER_BYTE(DataStream);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_ControlEndpointSize);
    15d4:	90 e0       	ldi	r25, 0x00	; 0
    15d6:	28 30       	cpi	r18, 0x08	; 8
    15d8:	31 05       	cpc	r19, r1
    15da:	09 f4       	brne	.+2      	; 0x15de <Endpoint_Write_Control_Stream_LE+0x86>
    15dc:	91 e0       	ldi	r25, 0x01	; 1
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    15de:	80 91 e8 00 	lds	r24, 0x00E8
    15e2:	8e 77       	andi	r24, 0x7E	; 126
    15e4:	80 93 e8 00 	sts	0x00E8, r24
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
    15e8:	41 15       	cp	r20, r1
    15ea:	51 05       	cpc	r21, r1
    15ec:	69 f6       	brne	.-102    	; 0x1588 <Endpoint_Write_Control_Stream_LE+0x30>
    15ee:	99 23       	and	r25, r25
    15f0:	59 f6       	brne	.-106    	; 0x1588 <Endpoint_Write_Control_Stream_LE+0x30>
    15f2:	06 c0       	rjmp	.+12     	; 0x1600 <Endpoint_Write_Control_Stream_LE+0xa8>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    15f4:	80 91 fd 01 	lds	r24, 0x01FD

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    15f8:	88 23       	and	r24, r24
    15fa:	41 f0       	breq	.+16     	; 0x160c <Endpoint_Write_Control_Stream_LE+0xb4>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    15fc:	85 30       	cpi	r24, 0x05	; 5
    15fe:	41 f0       	breq	.+16     	; 0x1610 <Endpoint_Write_Control_Stream_LE+0xb8>
			 *  \return Boolean true if current endpoint is has received an OUT packet, false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    1600:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
    1604:	82 ff       	sbrs	r24, 2
    1606:	f6 cf       	rjmp	.-20     	; 0x15f4 <Endpoint_Write_Control_Stream_LE+0x9c>
    1608:	80 e0       	ldi	r24, 0x00	; 0
    160a:	08 95       	ret
    160c:	82 e0       	ldi	r24, 0x02	; 2
    160e:	08 95       	ret
    1610:	83 e0       	ldi	r24, 0x03	; 3
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
    1612:	08 95       	ret

00001614 <Endpoint_Write_Control_PStream_LE>:
uint8_t TEMPLATE_FUNC_NAME (const void* Buffer,
                            uint16_t Length)
{
    1614:	9c 01       	movw	r18, r24
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
    1616:	40 91 04 02 	lds	r20, 0x0204
    161a:	50 91 05 02 	lds	r21, 0x0205
    161e:	46 17       	cp	r20, r22
    1620:	57 07       	cpc	r21, r23
    1622:	10 f4       	brcc	.+4      	; 0x1628 <Endpoint_Write_Control_PStream_LE+0x14>
uint8_t TEMPLATE_FUNC_NAME (const void* Buffer,
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
    1624:	60 e0       	ldi	r22, 0x00	; 0
    1626:	40 c0       	rjmp	.+128    	; 0x16a8 <Endpoint_Write_Control_PStream_LE+0x94>
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
    1628:	61 15       	cp	r22, r1
    162a:	71 05       	cpc	r23, r1
    162c:	11 f0       	breq	.+4      	; 0x1632 <Endpoint_Write_Control_PStream_LE+0x1e>
    162e:	ab 01       	movw	r20, r22
    1630:	f9 cf       	rjmp	.-14     	; 0x1624 <Endpoint_Write_Control_PStream_LE+0x10>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1632:	80 91 e8 00 	lds	r24, 0x00E8
    1636:	8e 77       	andi	r24, 0x7E	; 126
    1638:	80 93 e8 00 	sts	0x00E8, r24
    163c:	40 e0       	ldi	r20, 0x00	; 0
    163e:	50 e0       	ldi	r21, 0x00	; 0
    1640:	f1 cf       	rjmp	.-30     	; 0x1624 <Endpoint_Write_Control_PStream_LE+0x10>
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    1642:	80 91 fd 01 	lds	r24, 0x01FD

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    1646:	88 23       	and	r24, r24
    1648:	09 f4       	brne	.+2      	; 0x164c <Endpoint_Write_Control_PStream_LE+0x38>
    164a:	40 c0       	rjmp	.+128    	; 0x16cc <Endpoint_Write_Control_PStream_LE+0xb8>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    164c:	85 30       	cpi	r24, 0x05	; 5
    164e:	09 f4       	brne	.+2      	; 0x1652 <Endpoint_Write_Control_PStream_LE+0x3e>
    1650:	3f c0       	rjmp	.+126    	; 0x16d0 <Endpoint_Write_Control_PStream_LE+0xbc>
			 *  \return Boolean true if the selected endpoint has received a SETUP packet, false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    1652:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    1656:	83 ff       	sbrs	r24, 3
    1658:	02 c0       	rjmp	.+4      	; 0x165e <Endpoint_Write_Control_PStream_LE+0x4a>
    165a:	81 e0       	ldi	r24, 0x01	; 1
    165c:	08 95       	ret
			 *  \return Boolean true if current endpoint is has received an OUT packet, false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    165e:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
    1662:	82 fd       	sbrc	r24, 2
    1664:	2d c0       	rjmp	.+90     	; 0x16c0 <Endpoint_Write_Control_PStream_LE+0xac>
			 *  \return Boolean true if the current endpoint is ready for an IN packet, false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1666:	80 91 e8 00 	lds	r24, 0x00E8
		  break;

		if (Endpoint_IsINReady())
    166a:	80 ff       	sbrs	r24, 0
    166c:	1d c0       	rjmp	.+58     	; 0x16a8 <Endpoint_Write_Control_PStream_LE+0x94>
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
					return UEBCX;
    166e:	80 91 f2 00 	lds	r24, 0x00F2
    1672:	90 91 f3 00 	lds	r25, 0x00F3
    1676:	09 c0       	rjmp	.+18     	; 0x168a <Endpoint_Write_Control_PStream_LE+0x76>
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_ControlEndpointSize))
    1678:	f9 01       	movw	r30, r18
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
    167a:	2f 5f       	subi	r18, 0xFF	; 255
    167c:	3f 4f       	sbci	r19, 0xFF	; 255
    167e:	e4 91       	lpm	r30, Z+
			 *  \param[in] Byte  Next byte to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_Byte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_Byte(const uint8_t Byte)
			{
				UEDATX = Byte;
    1680:	e0 93 f1 00 	sts	0x00F1, r30
				Length--;
    1684:	41 50       	subi	r20, 0x01	; 1
    1686:	50 40       	sbci	r21, 0x00	; 0
				BytesInEndpoint++;
    1688:	01 96       	adiw	r24, 0x01	; 1

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_ControlEndpointSize))
    168a:	41 15       	cp	r20, r1
    168c:	51 05       	cpc	r21, r1
    168e:	19 f0       	breq	.+6      	; 0x1696 <Endpoint_Write_Control_PStream_LE+0x82>
    1690:	88 30       	cpi	r24, 0x08	; 8
    1692:	91 05       	cpc	r25, r1
    1694:	88 f3       	brcs	.-30     	; 0x1678 <Endpoint_Write_Control_PStream_LE+0x64>
				TEMPLATE_TRANSFER_BYTE(DataStream);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_ControlEndpointSize);
    1696:	60 e0       	ldi	r22, 0x00	; 0
    1698:	08 97       	sbiw	r24, 0x08	; 8
    169a:	09 f4       	brne	.+2      	; 0x169e <Endpoint_Write_Control_PStream_LE+0x8a>
    169c:	61 e0       	ldi	r22, 0x01	; 1
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    169e:	80 91 e8 00 	lds	r24, 0x00E8
    16a2:	8e 77       	andi	r24, 0x7E	; 126
    16a4:	80 93 e8 00 	sts	0x00E8, r24
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
    16a8:	41 15       	cp	r20, r1
    16aa:	51 05       	cpc	r21, r1
    16ac:	51 f6       	brne	.-108    	; 0x1642 <Endpoint_Write_Control_PStream_LE+0x2e>
    16ae:	66 23       	and	r22, r22
    16b0:	41 f6       	brne	.-112    	; 0x1642 <Endpoint_Write_Control_PStream_LE+0x2e>
    16b2:	06 c0       	rjmp	.+12     	; 0x16c0 <Endpoint_Write_Control_PStream_LE+0xac>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    16b4:	80 91 fd 01 	lds	r24, 0x01FD

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    16b8:	88 23       	and	r24, r24
    16ba:	41 f0       	breq	.+16     	; 0x16cc <Endpoint_Write_Control_PStream_LE+0xb8>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    16bc:	85 30       	cpi	r24, 0x05	; 5
    16be:	41 f0       	breq	.+16     	; 0x16d0 <Endpoint_Write_Control_PStream_LE+0xbc>
			 *  \return Boolean true if current endpoint is has received an OUT packet, false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    16c0:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
    16c4:	82 ff       	sbrs	r24, 2
    16c6:	f6 cf       	rjmp	.-20     	; 0x16b4 <Endpoint_Write_Control_PStream_LE+0xa0>
    16c8:	80 e0       	ldi	r24, 0x00	; 0
    16ca:	08 95       	ret
    16cc:	82 e0       	ldi	r24, 0x02	; 2
    16ce:	08 95       	ret
    16d0:	83 e0       	ldi	r24, 0x03	; 3
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
    16d2:	08 95       	ret

000016d4 <Endpoint_Read_Control_Stream_LE>:
uint8_t TEMPLATE_FUNC_NAME (void* Buffer,
                            uint16_t Length)
{
    16d4:	9c 01       	movw	r18, r24
	uint8_t* DataStream = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));

	if (!(Length))
    16d6:	61 15       	cp	r22, r1
    16d8:	71 05       	cpc	r23, r1
    16da:	29 f4       	brne	.+10     	; 0x16e6 <Endpoint_Read_Control_Stream_LE+0x12>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    16dc:	80 91 e8 00 	lds	r24, 0x00E8
    16e0:	8b 77       	andi	r24, 0x7B	; 123
    16e2:	80 93 e8 00 	sts	0x00E8, r24
uint8_t TEMPLATE_FUNC_NAME (void* Buffer,
                            uint16_t Length)
{
	uint8_t* DataStream = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
    16e6:	f9 01       	movw	r30, r18
    16e8:	22 c0       	rjmp	.+68     	; 0x172e <Endpoint_Read_Control_Stream_LE+0x5a>
	if (!(Length))
	  Endpoint_ClearOUT();

	while (Length)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    16ea:	80 91 fd 01 	lds	r24, 0x01FD

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    16ee:	88 23       	and	r24, r24
    16f0:	71 f1       	breq	.+92     	; 0x174e <Endpoint_Read_Control_Stream_LE+0x7a>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    16f2:	85 30       	cpi	r24, 0x05	; 5
    16f4:	71 f1       	breq	.+92     	; 0x1752 <Endpoint_Read_Control_Stream_LE+0x7e>
			 *  \return Boolean true if the selected endpoint has received a SETUP packet, false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    16f6:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    16fa:	83 ff       	sbrs	r24, 3
    16fc:	02 c0       	rjmp	.+4      	; 0x1702 <Endpoint_Read_Control_Stream_LE+0x2e>
    16fe:	81 e0       	ldi	r24, 0x01	; 1
    1700:	08 95       	ret
			 *  \return Boolean true if current endpoint is has received an OUT packet, false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    1702:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;

		if (Endpoint_IsOUTReceived())
    1706:	82 ff       	sbrs	r24, 2
    1708:	f0 cf       	rjmp	.-32     	; 0x16ea <Endpoint_Read_Control_Stream_LE+0x16>
    170a:	06 c0       	rjmp	.+12     	; 0x1718 <Endpoint_Read_Control_Stream_LE+0x44>
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_Byte(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_Byte(void)
			{
				return UEDATX;
    170c:	80 91 f1 00 	lds	r24, 0x00F1
		{
			while (Length && Endpoint_BytesInEndpoint())
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
    1710:	81 93       	st	Z+, r24
				Length--;
    1712:	61 50       	subi	r22, 0x01	; 1
    1714:	70 40       	sbci	r23, 0x00	; 0
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;

		if (Endpoint_IsOUTReceived())
		{
			while (Length && Endpoint_BytesInEndpoint())
    1716:	31 f0       	breq	.+12     	; 0x1724 <Endpoint_Read_Control_Stream_LE+0x50>
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
					return UEBCX;
    1718:	80 91 f2 00 	lds	r24, 0x00F2
    171c:	90 91 f3 00 	lds	r25, 0x00F3
    1720:	89 2b       	or	r24, r25
    1722:	a1 f7       	brne	.-24     	; 0x170c <Endpoint_Read_Control_Stream_LE+0x38>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    1724:	80 91 e8 00 	lds	r24, 0x00E8
    1728:	8b 77       	andi	r24, 0x7B	; 123
    172a:	80 93 e8 00 	sts	0x00E8, r24
	uint8_t* DataStream = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));

	if (!(Length))
	  Endpoint_ClearOUT();

	while (Length)
    172e:	61 15       	cp	r22, r1
    1730:	71 05       	cpc	r23, r1
    1732:	d9 f6       	brne	.-74     	; 0x16ea <Endpoint_Read_Control_Stream_LE+0x16>
    1734:	06 c0       	rjmp	.+12     	; 0x1742 <Endpoint_Read_Control_Stream_LE+0x6e>
		}
	}

	while (!(Endpoint_IsINReady()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    1736:	80 91 fd 01 	lds	r24, 0x01FD

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    173a:	88 23       	and	r24, r24
    173c:	41 f0       	breq	.+16     	; 0x174e <Endpoint_Read_Control_Stream_LE+0x7a>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    173e:	85 30       	cpi	r24, 0x05	; 5
    1740:	41 f0       	breq	.+16     	; 0x1752 <Endpoint_Read_Control_Stream_LE+0x7e>
			 *  \return Boolean true if the current endpoint is ready for an IN packet, false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1742:	80 91 e8 00 	lds	r24, 0x00E8

			Endpoint_ClearOUT();
		}
	}

	while (!(Endpoint_IsINReady()))
    1746:	80 ff       	sbrs	r24, 0
    1748:	f6 cf       	rjmp	.-20     	; 0x1736 <Endpoint_Read_Control_Stream_LE+0x62>
    174a:	80 e0       	ldi	r24, 0x00	; 0
    174c:	08 95       	ret
    174e:	82 e0       	ldi	r24, 0x02	; 2
    1750:	08 95       	ret
    1752:	83 e0       	ldi	r24, 0x03	; 3
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
    1754:	08 95       	ret

00001756 <Endpoint_Write_Stream_LE>:
uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE Buffer,
                            uint16_t Length
                            __CALLBACK_PARAM)
{
    1756:	df 92       	push	r13
    1758:	ef 92       	push	r14
    175a:	ff 92       	push	r15
    175c:	0f 93       	push	r16
    175e:	1f 93       	push	r17
    1760:	cf 93       	push	r28
    1762:	df 93       	push	r29
    1764:	18 2f       	mov	r17, r24
    1766:	09 2f       	mov	r16, r25
    1768:	eb 01       	movw	r28, r22
    176a:	7a 01       	movw	r14, r20
	uint8_t* DataStream = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	uint8_t  ErrorCode;

	if ((ErrorCode = Endpoint_WaitUntilReady()))
    176c:	0e 94 b4 03 	call	0x768	; 0x768 <Endpoint_WaitUntilReady>
    1770:	d8 2e       	mov	r13, r24
    1772:	88 23       	and	r24, r24
    1774:	21 f5       	brne	.+72     	; 0x17be <Endpoint_Write_Stream_LE+0x68>
uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE Buffer,
                            uint16_t Length
                            __CALLBACK_PARAM)
{
	uint8_t* DataStream = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
    1776:	81 2f       	mov	r24, r17
    1778:	90 2f       	mov	r25, r16
    177a:	9c 01       	movw	r18, r24
    177c:	89 01       	movw	r16, r18
    177e:	1d c0       	rjmp	.+58     	; 0x17ba <Endpoint_Write_Stream_LE+0x64>
			 *  \return Boolean true if the currently selected endpoint may be read from or written to, depending on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    1780:	80 91 e8 00 	lds	r24, 0x00E8
	}
	#endif

	while (Length)
	{
		if (!(Endpoint_IsReadWriteAllowed()))
    1784:	85 fd       	sbrc	r24, 5
    1786:	13 c0       	rjmp	.+38     	; 0x17ae <Endpoint_Write_Stream_LE+0x58>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1788:	80 91 e8 00 	lds	r24, 0x00E8
    178c:	8e 77       	andi	r24, 0x7E	; 126
    178e:	80 93 e8 00 	sts	0x00E8, r24
		{
			TEMPLATE_CLEAR_ENDPOINT();

			#if !defined(NO_STREAM_CALLBACKS)
			if ((Callback != NULL) && (Callback() == STREAMCALLBACK_Abort))
    1792:	e1 14       	cp	r14, r1
    1794:	f1 04       	cpc	r15, r1
    1796:	31 f0       	breq	.+12     	; 0x17a4 <Endpoint_Write_Stream_LE+0x4e>
    1798:	f7 01       	movw	r30, r14
    179a:	09 95       	icall
    179c:	81 30       	cpi	r24, 0x01	; 1
    179e:	11 f4       	brne	.+4      	; 0x17a4 <Endpoint_Write_Stream_LE+0x4e>
    17a0:	85 e0       	ldi	r24, 0x05	; 5
    17a2:	0e c0       	rjmp	.+28     	; 0x17c0 <Endpoint_Write_Stream_LE+0x6a>
			  return ENDPOINT_RWSTREAM_CallbackAborted;
			#endif

			if ((ErrorCode = Endpoint_WaitUntilReady()))
    17a4:	0e 94 b4 03 	call	0x768	; 0x768 <Endpoint_WaitUntilReady>
    17a8:	88 23       	and	r24, r24
    17aa:	39 f0       	breq	.+14     	; 0x17ba <Endpoint_Write_Stream_LE+0x64>
    17ac:	09 c0       	rjmp	.+18     	; 0x17c0 <Endpoint_Write_Stream_LE+0x6a>
			  return ErrorCode;
		}
		else
		{
			TEMPLATE_TRANSFER_BYTE(DataStream);
    17ae:	f8 01       	movw	r30, r16
    17b0:	81 91       	ld	r24, Z+
    17b2:	8f 01       	movw	r16, r30
			 *  \param[in] Byte  Next byte to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_Byte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_Byte(const uint8_t Byte)
			{
				UEDATX = Byte;
    17b4:	80 93 f1 00 	sts	0x00F1, r24
			Length--;
    17b8:	21 97       	sbiw	r28, 0x01	; 1
				} while (Length >= 8);
		}
	}
	#endif

	while (Length)
    17ba:	20 97       	sbiw	r28, 0x00	; 0
    17bc:	09 f7       	brne	.-62     	; 0x1780 <Endpoint_Write_Stream_LE+0x2a>
    17be:	8d 2d       	mov	r24, r13
			Length--;
		}
	}

	return ENDPOINT_RWSTREAM_NoError;
}
    17c0:	df 91       	pop	r29
    17c2:	cf 91       	pop	r28
    17c4:	1f 91       	pop	r17
    17c6:	0f 91       	pop	r16
    17c8:	ff 90       	pop	r15
    17ca:	ef 90       	pop	r14
    17cc:	df 90       	pop	r13
    17ce:	08 95       	ret

000017d0 <USB_Host_WaitForIOS>:

	return ReturnStatus;
}

static uint8_t USB_Host_WaitForIOS(const uint8_t WaitType)
{
    17d0:	1f 93       	push	r17
    17d2:	cf 93       	push	r28
    17d4:	df 93       	push	r29
    17d6:	18 2f       	mov	r17, r24
    17d8:	c8 ee       	ldi	r28, 0xE8	; 232
    17da:	d3 e0       	ldi	r29, 0x03	; 3
    17dc:	0a c0       	rjmp	.+20     	; 0x17f2 <USB_Host_WaitForIOS+0x22>
	         ((WaitType == USB_HOST_WAITFOR_InReceived) && Pipe_IsINReceived()) ||
	         ((WaitType == USB_HOST_WAITFOR_OutReady)   && Pipe_IsOUTReady())))
	{
		uint8_t ErrorCode;

		if ((ErrorCode = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
    17de:	81 e0       	ldi	r24, 0x01	; 1
    17e0:	0e 94 e6 03 	call	0x7cc	; 0x7cc <USB_Host_WaitMS>
    17e4:	88 23       	and	r24, r24
    17e6:	d1 f4       	brne	.+52     	; 0x181c <USB_Host_WaitForIOS+0x4c>
		  return ErrorCode;

		if (!(TimeoutCounter--))
    17e8:	20 97       	sbiw	r28, 0x00	; 0
    17ea:	11 f4       	brne	.+4      	; 0x17f0 <USB_Host_WaitForIOS+0x20>
    17ec:	84 e0       	ldi	r24, 0x04	; 4
    17ee:	16 c0       	rjmp	.+44     	; 0x181c <USB_Host_WaitForIOS+0x4c>
    17f0:	21 97       	sbiw	r28, 0x01	; 1
	uint8_t  TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#else
	uint16_t TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#endif

	while (!(((WaitType == USB_HOST_WAITFOR_SetupSent)  && Pipe_IsSETUPSent())  ||
    17f2:	11 23       	and	r17, r17
    17f4:	29 f4       	brne	.+10     	; 0x1800 <USB_Host_WaitForIOS+0x30>
			 *  \return Boolean true if the current pipe is ready for a SETUP packet, false otherwise.
			 */
			static inline bool Pipe_IsSETUPSent(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsSETUPSent(void)
			{
				return ((UPINTX & (1 << TXSTPI)) ? true : false);
    17f6:	80 91 a6 00 	lds	r24, 0x00A6
    17fa:	83 ff       	sbrs	r24, 3
    17fc:	f0 cf       	rjmp	.-32     	; 0x17de <USB_Host_WaitForIOS+0xe>
    17fe:	0d c0       	rjmp	.+26     	; 0x181a <USB_Host_WaitForIOS+0x4a>
    1800:	11 30       	cpi	r17, 0x01	; 1
    1802:	29 f4       	brne	.+10     	; 0x180e <USB_Host_WaitForIOS+0x3e>
			 *  \return Boolean true if the current pipe has received an IN packet, false otherwise.
			 */
			static inline bool Pipe_IsINReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsINReceived(void)
			{
				return ((UPINTX & (1 << RXINI)) ? true : false);
    1804:	80 91 a6 00 	lds	r24, 0x00A6
    1808:	80 ff       	sbrs	r24, 0
    180a:	e9 cf       	rjmp	.-46     	; 0x17de <USB_Host_WaitForIOS+0xe>
    180c:	06 c0       	rjmp	.+12     	; 0x181a <USB_Host_WaitForIOS+0x4a>
    180e:	12 30       	cpi	r17, 0x02	; 2
    1810:	31 f7       	brne	.-52     	; 0x17de <USB_Host_WaitForIOS+0xe>
			 *  \return Boolean true if the current pipe is ready for an OUT packet, false otherwise.
			 */
			static inline bool Pipe_IsOUTReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsOUTReady(void)
			{
				return ((UPINTX & (1 << TXOUTI)) ? true : false);
    1812:	80 91 a6 00 	lds	r24, 0x00A6
    1816:	82 ff       	sbrs	r24, 2
    1818:	e2 cf       	rjmp	.-60     	; 0x17de <USB_Host_WaitForIOS+0xe>
    181a:	80 e0       	ldi	r24, 0x00	; 0
		if (!(TimeoutCounter--))
		  return HOST_SENDCONTROL_SoftwareTimeOut;
	}

	return HOST_SENDCONTROL_Successful;
}
    181c:	df 91       	pop	r29
    181e:	cf 91       	pop	r28
    1820:	1f 91       	pop	r17
    1822:	08 95       	ret

00001824 <USB_Host_SendControlRequest>:

#define  __INCLUDE_FROM_HOSTSTDREQ_C
#include "HostStandardReq.h"

uint8_t USB_Host_SendControlRequest(void* const BufferPtr)
{
    1824:	ff 92       	push	r15
    1826:	0f 93       	push	r16
    1828:	1f 93       	push	r17
    182a:	cf 93       	push	r28
    182c:	df 93       	push	r29
    182e:	18 2f       	mov	r17, r24
    1830:	09 2f       	mov	r16, r25
			 *  \return Boolean true if the bus is currently suspended, false otherwise.
			 */
			static inline bool USB_Host_IsBusSuspended(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusSuspended(void)
			{
				return ((UHCON & (1 << SOFEN)) ? false : true);
    1832:	f0 90 9e 00 	lds	r15, 0x009E
	uint8_t* HeaderStream   = (uint8_t*)&USB_ControlRequest;
	uint8_t* DataStream     = (uint8_t*)BufferPtr;
	bool     BusSuspended   = USB_Host_IsBusSuspended();
	uint8_t  ReturnStatus   = HOST_SENDCONTROL_Successful;
	uint16_t DataLen        = USB_ControlRequest.wLength;
    1836:	c0 91 04 02 	lds	r28, 0x0204
    183a:	d0 91 05 02 	lds	r29, 0x0205
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
    183e:	80 91 9e 00 	lds	r24, 0x009E
    1842:	81 60       	ori	r24, 0x01	; 1
    1844:	80 93 9e 00 	sts	0x009E, r24

	USB_Host_ResumeBus();

	if ((ReturnStatus = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
    1848:	81 e0       	ldi	r24, 0x01	; 1
    184a:	0e 94 e6 03 	call	0x7cc	; 0x7cc <USB_Host_WaitMS>
    184e:	98 2f       	mov	r25, r24
    1850:	88 23       	and	r24, r24
    1852:	09 f0       	breq	.+2      	; 0x1856 <USB_Host_SendControlRequest+0x32>
    1854:	d3 c0       	rjmp	.+422    	; 0x19fc <USB_Host_SendControlRequest+0x1d8>
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    1856:	80 91 aa 00 	lds	r24, 0x00AA
    185a:	8f 7c       	andi	r24, 0xCF	; 207
    185c:	80 93 aa 00 	sts	0x00AA, r24
			 *  flag for the pipe.
			 */
			static inline void Pipe_ClearErrorFlags(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearErrorFlags(void)
			{
				UPERRX = 0;
    1860:	10 92 f5 00 	sts	0x00F5, r1

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    1864:	80 91 a9 00 	lds	r24, 0x00A9
    1868:	8f 7b       	andi	r24, 0xBF	; 191
    186a:	80 93 a9 00 	sts	0x00A9, r24
    186e:	ee ef       	ldi	r30, 0xFE	; 254
    1870:	f1 e0       	ldi	r31, 0x01	; 1
	Pipe_ClearErrorFlags();

	Pipe_Unfreeze();

	for (uint8_t HeaderByte = 0; HeaderByte < sizeof(USB_Request_Header_t); HeaderByte++)
	  Pipe_Write_Byte(*(HeaderStream++));
    1872:	81 91       	ld	r24, Z+
			 *  \param[in] Byte  Next byte to write into the the currently selected pipe's FIFO buffer.
			 */
			static inline void Pipe_Write_Byte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Write_Byte(const uint8_t Byte)
			{
				UPDATX = Byte;
    1874:	80 93 af 00 	sts	0x00AF, r24
	Pipe_SetPipeToken(PIPE_TOKEN_SETUP);
	Pipe_ClearErrorFlags();

	Pipe_Unfreeze();

	for (uint8_t HeaderByte = 0; HeaderByte < sizeof(USB_Request_Header_t); HeaderByte++)
    1878:	82 e0       	ldi	r24, 0x02	; 2
    187a:	e6 30       	cpi	r30, 0x06	; 6
    187c:	f8 07       	cpc	r31, r24
    187e:	c9 f7       	brne	.-14     	; 0x1872 <USB_Host_SendControlRequest+0x4e>
			 *  \ingroup Group_PipePacketManagement
			 */
			static inline void Pipe_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearSETUP(void)
			{
				UPINTX &= ~((1 << TXSTPI) | (1 << FIFOCON));
    1880:	80 91 a6 00 	lds	r24, 0x00A6
    1884:	87 77       	andi	r24, 0x77	; 119
    1886:	80 93 a6 00 	sts	0x00A6, r24
	  Pipe_Write_Byte(*(HeaderStream++));

	Pipe_ClearSETUP();

	if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_SetupSent)) != HOST_SENDCONTROL_Successful)
    188a:	80 e0       	ldi	r24, 0x00	; 0
    188c:	a1 df       	rcall	.-190    	; 0x17d0 <USB_Host_WaitForIOS>
    188e:	98 2f       	mov	r25, r24
    1890:	88 23       	and	r24, r24
    1892:	09 f0       	breq	.+2      	; 0x1896 <USB_Host_SendControlRequest+0x72>
    1894:	b3 c0       	rjmp	.+358    	; 0x19fc <USB_Host_SendControlRequest+0x1d8>

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    1896:	80 91 a9 00 	lds	r24, 0x00A9
    189a:	80 64       	ori	r24, 0x40	; 64
    189c:	80 93 a9 00 	sts	0x00A9, r24
	  goto End_Of_Control_Send;

	Pipe_Freeze();

	if ((ReturnStatus = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
    18a0:	81 e0       	ldi	r24, 0x01	; 1
    18a2:	0e 94 e6 03 	call	0x7cc	; 0x7cc <USB_Host_WaitMS>
    18a6:	98 2f       	mov	r25, r24
    18a8:	88 23       	and	r24, r24
    18aa:	09 f0       	breq	.+2      	; 0x18ae <USB_Host_SendControlRequest+0x8a>
    18ac:	a7 c0       	rjmp	.+334    	; 0x19fc <USB_Host_SendControlRequest+0x1d8>
#include "HostStandardReq.h"

uint8_t USB_Host_SendControlRequest(void* const BufferPtr)
{
	uint8_t* HeaderStream   = (uint8_t*)&USB_ControlRequest;
	uint8_t* DataStream     = (uint8_t*)BufferPtr;
    18ae:	21 2f       	mov	r18, r17
    18b0:	30 2f       	mov	r19, r16
    18b2:	c9 01       	movw	r24, r18
    18b4:	8c 01       	movw	r16, r24
	Pipe_Freeze();

	if ((ReturnStatus = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
	  goto End_Of_Control_Send;

	if ((USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_DIRECTION) == REQDIR_DEVICETOHOST)
    18b6:	80 91 fe 01 	lds	r24, 0x01FE
    18ba:	87 ff       	sbrs	r24, 7
    18bc:	52 c0       	rjmp	.+164    	; 0x1962 <USB_Host_SendControlRequest+0x13e>
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    18be:	80 91 aa 00 	lds	r24, 0x00AA
    18c2:	8f 7c       	andi	r24, 0xCF	; 207
    18c4:	80 61       	ori	r24, 0x10	; 16
    18c6:	80 93 aa 00 	sts	0x00AA, r24
	{
		Pipe_SetPipeToken(PIPE_TOKEN_IN);

		if (DataStream != NULL)
    18ca:	01 15       	cp	r16, r1
    18cc:	11 05       	cpc	r17, r1
    18ce:	69 f5       	brne	.+90     	; 0x192a <USB_Host_SendControlRequest+0x106>
    18d0:	2e c0       	rjmp	.+92     	; 0x192e <USB_Host_SendControlRequest+0x10a>

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    18d2:	80 91 a9 00 	lds	r24, 0x00A9
    18d6:	8f 7b       	andi	r24, 0xBF	; 191
    18d8:	80 93 a9 00 	sts	0x00A9, r24
		{
			while (DataLen)
			{
				Pipe_Unfreeze();

				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_InReceived)) != HOST_SENDCONTROL_Successful)
    18dc:	81 e0       	ldi	r24, 0x01	; 1
    18de:	78 df       	rcall	.-272    	; 0x17d0 <USB_Host_WaitForIOS>
    18e0:	98 2f       	mov	r25, r24
    18e2:	88 23       	and	r24, r24
    18e4:	09 f0       	breq	.+2      	; 0x18e8 <USB_Host_SendControlRequest+0xc4>
    18e6:	8a c0       	rjmp	.+276    	; 0x19fc <USB_Host_SendControlRequest+0x1d8>
			 *  \return Total number of bytes in the currently selected Pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
    18e8:	80 91 f6 00 	lds	r24, 0x00F6
    18ec:	90 91 f7 00 	lds	r25, 0x00F7
				  goto End_Of_Control_Send;

				if (!(Pipe_BytesInPipe()))
    18f0:	89 2b       	or	r24, r25
    18f2:	49 f4       	brne	.+18     	; 0x1906 <USB_Host_SendControlRequest+0xe2>
    18f4:	c0 e0       	ldi	r28, 0x00	; 0
    18f6:	d0 e0       	ldi	r29, 0x00	; 0
    18f8:	06 c0       	rjmp	.+12     	; 0x1906 <USB_Host_SendControlRequest+0xe2>
			 *  \return Next byte in the currently selected pipe's FIFO buffer.
			 */
			static inline uint8_t Pipe_Read_Byte(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_Read_Byte(void)
			{
				return UPDATX;
    18fa:	80 91 af 00 	lds	r24, 0x00AF
				  DataLen = 0;

				while (Pipe_BytesInPipe() && DataLen)
				{
					*(DataStream++) = Pipe_Read_Byte();
    18fe:	f8 01       	movw	r30, r16
    1900:	81 93       	st	Z+, r24
    1902:	8f 01       	movw	r16, r30
					DataLen--;
    1904:	21 97       	sbiw	r28, 0x01	; 1
			 *  \return Total number of bytes in the currently selected Pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
    1906:	80 91 f6 00 	lds	r24, 0x00F6
    190a:	90 91 f7 00 	lds	r25, 0x00F7
				  goto End_Of_Control_Send;

				if (!(Pipe_BytesInPipe()))
				  DataLen = 0;

				while (Pipe_BytesInPipe() && DataLen)
    190e:	89 2b       	or	r24, r25
    1910:	11 f0       	breq	.+4      	; 0x1916 <USB_Host_SendControlRequest+0xf2>
    1912:	20 97       	sbiw	r28, 0x00	; 0
    1914:	91 f7       	brne	.-28     	; 0x18fa <USB_Host_SendControlRequest+0xd6>

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    1916:	80 91 a9 00 	lds	r24, 0x00A9
    191a:	80 64       	ori	r24, 0x40	; 64
    191c:	80 93 a9 00 	sts	0x00A9, r24
			 *  \ingroup Group_PipePacketManagement
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
    1920:	80 91 a6 00 	lds	r24, 0x00A6
    1924:	8e 77       	andi	r24, 0x7E	; 126
    1926:	80 93 a6 00 	sts	0x00A6, r24
	{
		Pipe_SetPipeToken(PIPE_TOKEN_IN);

		if (DataStream != NULL)
		{
			while (DataLen)
    192a:	20 97       	sbiw	r28, 0x00	; 0
    192c:	91 f6       	brne	.-92     	; 0x18d2 <USB_Host_SendControlRequest+0xae>
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    192e:	80 91 aa 00 	lds	r24, 0x00AA
    1932:	8f 7c       	andi	r24, 0xCF	; 207
    1934:	80 62       	ori	r24, 0x20	; 32
    1936:	80 93 aa 00 	sts	0x00AA, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    193a:	80 91 a9 00 	lds	r24, 0x00A9
    193e:	8f 7b       	andi	r24, 0xBF	; 191
    1940:	80 93 a9 00 	sts	0x00A9, r24
		}

		Pipe_SetPipeToken(PIPE_TOKEN_OUT);
		Pipe_Unfreeze();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    1944:	82 e0       	ldi	r24, 0x02	; 2
    1946:	44 df       	rcall	.-376    	; 0x17d0 <USB_Host_WaitForIOS>
    1948:	98 2f       	mov	r25, r24
    194a:	88 23       	and	r24, r24
    194c:	09 f0       	breq	.+2      	; 0x1950 <USB_Host_SendControlRequest+0x12c>
    194e:	56 c0       	rjmp	.+172    	; 0x19fc <USB_Host_SendControlRequest+0x1d8>
			 *  \ingroup Group_PipePacketManagement
			 */
			static inline void Pipe_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearOUT(void)
			{
				UPINTX &= ~((1 << TXOUTI) | (1 << FIFOCON));
    1950:	80 91 a6 00 	lds	r24, 0x00A6
    1954:	8b 77       	andi	r24, 0x7B	; 123
    1956:	80 93 a6 00 	sts	0x00A6, r24
		  goto End_Of_Control_Send;

		Pipe_ClearOUT();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    195a:	82 e0       	ldi	r24, 0x02	; 2
    195c:	39 df       	rcall	.-398    	; 0x17d0 <USB_Host_WaitForIOS>
    195e:	98 2f       	mov	r25, r24
    1960:	4d c0       	rjmp	.+154    	; 0x19fc <USB_Host_SendControlRequest+0x1d8>
		  goto End_Of_Control_Send;
	}
	else
	{
		if (DataStream != NULL)
    1962:	01 15       	cp	r16, r1
    1964:	11 05       	cpc	r17, r1
    1966:	a9 f1       	breq	.+106    	; 0x19d2 <USB_Host_SendControlRequest+0x1ae>
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    1968:	80 91 aa 00 	lds	r24, 0x00AA
    196c:	8f 7c       	andi	r24, 0xCF	; 207
    196e:	80 62       	ori	r24, 0x20	; 32
    1970:	80 93 aa 00 	sts	0x00AA, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    1974:	80 91 a9 00 	lds	r24, 0x00A9
    1978:	8f 7b       	andi	r24, 0xBF	; 191
    197a:	80 93 a9 00 	sts	0x00A9, r24
    197e:	1d c0       	rjmp	.+58     	; 0x19ba <USB_Host_SendControlRequest+0x196>
			Pipe_SetPipeToken(PIPE_TOKEN_OUT);
			Pipe_Unfreeze();

			while (DataLen)
			{
				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    1980:	82 e0       	ldi	r24, 0x02	; 2
    1982:	26 df       	rcall	.-436    	; 0x17d0 <USB_Host_WaitForIOS>
    1984:	98 2f       	mov	r25, r24
    1986:	88 23       	and	r24, r24
    1988:	c9 f5       	brne	.+114    	; 0x19fc <USB_Host_SendControlRequest+0x1d8>
				  goto End_Of_Control_Send;

				while (DataLen && (Pipe_BytesInPipe() < USB_ControlPipeSize))
    198a:	80 91 e3 01 	lds	r24, 0x01E3
    198e:	28 2f       	mov	r18, r24
    1990:	30 e0       	ldi	r19, 0x00	; 0
    1992:	07 c0       	rjmp	.+14     	; 0x19a2 <USB_Host_SendControlRequest+0x17e>
				{
					Pipe_Write_Byte(*(DataStream++));
    1994:	f8 01       	movw	r30, r16
    1996:	81 91       	ld	r24, Z+
    1998:	8f 01       	movw	r16, r30
			 *  \param[in] Byte  Next byte to write into the the currently selected pipe's FIFO buffer.
			 */
			static inline void Pipe_Write_Byte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Write_Byte(const uint8_t Byte)
			{
				UPDATX = Byte;
    199a:	80 93 af 00 	sts	0x00AF, r24
					DataLen--;
    199e:	21 97       	sbiw	r28, 0x01	; 1
			while (DataLen)
			{
				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
				  goto End_Of_Control_Send;

				while (DataLen && (Pipe_BytesInPipe() < USB_ControlPipeSize))
    19a0:	39 f0       	breq	.+14     	; 0x19b0 <USB_Host_SendControlRequest+0x18c>
			 *  \return Total number of bytes in the currently selected Pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
    19a2:	80 91 f6 00 	lds	r24, 0x00F6
    19a6:	90 91 f7 00 	lds	r25, 0x00F7
    19aa:	82 17       	cp	r24, r18
    19ac:	93 07       	cpc	r25, r19
    19ae:	90 f3       	brcs	.-28     	; 0x1994 <USB_Host_SendControlRequest+0x170>
			 *  \ingroup Group_PipePacketManagement
			 */
			static inline void Pipe_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearOUT(void)
			{
				UPINTX &= ~((1 << TXOUTI) | (1 << FIFOCON));
    19b0:	80 91 a6 00 	lds	r24, 0x00A6
    19b4:	8b 77       	andi	r24, 0x7B	; 123
    19b6:	80 93 a6 00 	sts	0x00A6, r24
		if (DataStream != NULL)
		{
			Pipe_SetPipeToken(PIPE_TOKEN_OUT);
			Pipe_Unfreeze();

			while (DataLen)
    19ba:	20 97       	sbiw	r28, 0x00	; 0
    19bc:	09 f7       	brne	.-62     	; 0x1980 <USB_Host_SendControlRequest+0x15c>
				}

				Pipe_ClearOUT();
			}

			if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    19be:	82 e0       	ldi	r24, 0x02	; 2
    19c0:	07 df       	rcall	.-498    	; 0x17d0 <USB_Host_WaitForIOS>
    19c2:	98 2f       	mov	r25, r24
    19c4:	88 23       	and	r24, r24
    19c6:	d1 f4       	brne	.+52     	; 0x19fc <USB_Host_SendControlRequest+0x1d8>

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    19c8:	80 91 a9 00 	lds	r24, 0x00A9
    19cc:	80 64       	ori	r24, 0x40	; 64
    19ce:	80 93 a9 00 	sts	0x00A9, r24
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    19d2:	80 91 aa 00 	lds	r24, 0x00AA
    19d6:	8f 7c       	andi	r24, 0xCF	; 207
    19d8:	80 61       	ori	r24, 0x10	; 16
    19da:	80 93 aa 00 	sts	0x00AA, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    19de:	80 91 a9 00 	lds	r24, 0x00A9
    19e2:	8f 7b       	andi	r24, 0xBF	; 191
    19e4:	80 93 a9 00 	sts	0x00A9, r24
		}

		Pipe_SetPipeToken(PIPE_TOKEN_IN);
		Pipe_Unfreeze();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_InReceived)) != HOST_SENDCONTROL_Successful)
    19e8:	81 e0       	ldi	r24, 0x01	; 1
    19ea:	f2 de       	rcall	.-540    	; 0x17d0 <USB_Host_WaitForIOS>
    19ec:	98 2f       	mov	r25, r24
    19ee:	88 23       	and	r24, r24
    19f0:	29 f4       	brne	.+10     	; 0x19fc <USB_Host_SendControlRequest+0x1d8>
			 *  \ingroup Group_PipePacketManagement
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
    19f2:	80 91 a6 00 	lds	r24, 0x00A6
    19f6:	8e 77       	andi	r24, 0x7E	; 126
    19f8:	80 93 a6 00 	sts	0x00A6, r24

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    19fc:	80 91 a9 00 	lds	r24, 0x00A9
    1a00:	80 64       	ori	r24, 0x40	; 64
    1a02:	80 93 a9 00 	sts	0x00A9, r24
	}

End_Of_Control_Send:
	Pipe_Freeze();

	if (BusSuspended)
    1a06:	f0 fc       	sbrc	r15, 0
    1a08:	05 c0       	rjmp	.+10     	; 0x1a14 <USB_Host_SendControlRequest+0x1f0>
			 *  messages to the device.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				UHCON &= ~(1 << SOFEN);
    1a0a:	80 91 9e 00 	lds	r24, 0x009E
    1a0e:	8e 7f       	andi	r24, 0xFE	; 254
    1a10:	80 93 9e 00 	sts	0x009E, r24
			 *  \param[in] PipeNumber  Index of the pipe to reset.
			 */
			static inline void Pipe_ResetPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ResetPipe(const uint8_t PipeNumber)
			{
				UPRST = (1 << PipeNumber);
    1a14:	81 e0       	ldi	r24, 0x01	; 1
    1a16:	80 93 a8 00 	sts	0x00A8, r24
				UPRST = 0;
    1a1a:	10 92 a8 00 	sts	0x00A8, r1
	  USB_Host_SuspendBus();

	Pipe_ResetPipe(PIPE_CONTROLPIPE);

	return ReturnStatus;
}
    1a1e:	89 2f       	mov	r24, r25
    1a20:	df 91       	pop	r29
    1a22:	cf 91       	pop	r28
    1a24:	1f 91       	pop	r17
    1a26:	0f 91       	pop	r16
    1a28:	ff 90       	pop	r15
    1a2a:	08 95       	ret

00001a2c <Pipe_Read_Stream_LE>:
uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE Buffer,
                            uint16_t Length
                            __CALLBACK_PARAM)
{
    1a2c:	df 92       	push	r13
    1a2e:	ef 92       	push	r14
    1a30:	ff 92       	push	r15
    1a32:	0f 93       	push	r16
    1a34:	1f 93       	push	r17
    1a36:	cf 93       	push	r28
    1a38:	df 93       	push	r29
    1a3a:	18 2f       	mov	r17, r24
    1a3c:	09 2f       	mov	r16, r25
    1a3e:	eb 01       	movw	r28, r22
    1a40:	7a 01       	movw	r14, r20
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    1a42:	80 91 aa 00 	lds	r24, 0x00AA
    1a46:	8f 7c       	andi	r24, 0xCF	; 207
    1a48:	80 61       	ori	r24, 0x10	; 16
    1a4a:	80 93 aa 00 	sts	0x00AA, r24
	uint8_t* DataStream = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	uint8_t  ErrorCode;

	Pipe_SetPipeToken(TEMPLATE_TOKEN);

	if ((ErrorCode = Pipe_WaitUntilReady()))
    1a4e:	17 d9       	rcall	.-3538   	; 0xc7e <Pipe_WaitUntilReady>
    1a50:	d8 2e       	mov	r13, r24
    1a52:	88 23       	and	r24, r24
    1a54:	19 f5       	brne	.+70     	; 0x1a9c <Pipe_Read_Stream_LE+0x70>
uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE Buffer,
                            uint16_t Length
                            __CALLBACK_PARAM)
{
	uint8_t* DataStream = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
    1a56:	81 2f       	mov	r24, r17
    1a58:	90 2f       	mov	r25, r16
    1a5a:	9c 01       	movw	r18, r24
    1a5c:	89 01       	movw	r16, r18
    1a5e:	1c c0       	rjmp	.+56     	; 0x1a98 <Pipe_Read_Stream_LE+0x6c>
			 *  \return Boolean true if the currently selected pipe may be read from or written to, depending on its direction.
			 */
			static inline bool Pipe_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsReadWriteAllowed(void)
			{
				return ((UPINTX & (1 << RWAL)) ? true : false);
    1a60:	80 91 a6 00 	lds	r24, 0x00A6
	}
	#endif

	while (Length)
	{
		if (!(Pipe_IsReadWriteAllowed()))
    1a64:	85 fd       	sbrc	r24, 5
    1a66:	12 c0       	rjmp	.+36     	; 0x1a8c <Pipe_Read_Stream_LE+0x60>
			 *  \ingroup Group_PipePacketManagement
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
    1a68:	80 91 a6 00 	lds	r24, 0x00A6
    1a6c:	8e 77       	andi	r24, 0x7E	; 126
    1a6e:	80 93 a6 00 	sts	0x00A6, r24
		{
			TEMPLATE_CLEAR_PIPE();

			#if !defined(NO_STREAM_CALLBACKS)
			if ((Callback != NULL) && (Callback() == STREAMCALLBACK_Abort))
    1a72:	e1 14       	cp	r14, r1
    1a74:	f1 04       	cpc	r15, r1
    1a76:	31 f0       	breq	.+12     	; 0x1a84 <Pipe_Read_Stream_LE+0x58>
    1a78:	f7 01       	movw	r30, r14
    1a7a:	09 95       	icall
    1a7c:	81 30       	cpi	r24, 0x01	; 1
    1a7e:	11 f4       	brne	.+4      	; 0x1a84 <Pipe_Read_Stream_LE+0x58>
    1a80:	84 e0       	ldi	r24, 0x04	; 4
    1a82:	0d c0       	rjmp	.+26     	; 0x1a9e <Pipe_Read_Stream_LE+0x72>
			  return PIPE_RWSTREAM_CallbackAborted;
			#endif

			if ((ErrorCode = Pipe_WaitUntilReady()))
    1a84:	fc d8       	rcall	.-3592   	; 0xc7e <Pipe_WaitUntilReady>
    1a86:	88 23       	and	r24, r24
    1a88:	39 f0       	breq	.+14     	; 0x1a98 <Pipe_Read_Stream_LE+0x6c>
    1a8a:	09 c0       	rjmp	.+18     	; 0x1a9e <Pipe_Read_Stream_LE+0x72>
			 *  \return Next byte in the currently selected pipe's FIFO buffer.
			 */
			static inline uint8_t Pipe_Read_Byte(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_Read_Byte(void)
			{
				return UPDATX;
    1a8c:	80 91 af 00 	lds	r24, 0x00AF
			  return ErrorCode;
		}
		else
		{
			TEMPLATE_TRANSFER_BYTE(DataStream);
    1a90:	f8 01       	movw	r30, r16
    1a92:	81 93       	st	Z+, r24
    1a94:	8f 01       	movw	r16, r30
			Length--;
    1a96:	21 97       	sbiw	r28, 0x01	; 1
				} while (Length >= 8);
		}
	}
	#endif

	while (Length)
    1a98:	20 97       	sbiw	r28, 0x00	; 0
    1a9a:	11 f7       	brne	.-60     	; 0x1a60 <Pipe_Read_Stream_LE+0x34>
    1a9c:	8d 2d       	mov	r24, r13
			Length--;
		}
	}

	return PIPE_RWSTREAM_NoError;
}
    1a9e:	df 91       	pop	r29
    1aa0:	cf 91       	pop	r28
    1aa2:	1f 91       	pop	r17
    1aa4:	0f 91       	pop	r16
    1aa6:	ff 90       	pop	r15
    1aa8:	ef 90       	pop	r14
    1aaa:	df 90       	pop	r13
    1aac:	08 95       	ret

00001aae <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
    1aae:	1f 93       	push	r17
	#if defined(USB_HOST_ONLY)
		USB_HostTask();
	#elif defined(USB_DEVICE_ONLY)
		USB_DeviceTask();
	#else
		if (USB_CurrentMode == USB_MODE_Device)
    1ab0:	80 91 f5 01 	lds	r24, 0x01F5
    1ab4:	81 30       	cpi	r24, 0x01	; 1
    1ab6:	89 f4       	brne	.+34     	; 0x1ada <USB_USBTask+0x2c>
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_DeviceTask(void)
{
	if (USB_DeviceState != DEVICE_STATE_Unattached)
    1ab8:	80 91 fd 01 	lds	r24, 0x01FD
    1abc:	88 23       	and	r24, r24
    1abe:	d1 f0       	breq	.+52     	; 0x1af4 <USB_USBTask+0x46>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return (UENUM & ENDPOINT_EPNUM_MASK);
    1ac0:	10 91 e9 00 	lds	r17, 0x00E9
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    1ac4:	10 92 e9 00 	sts	0x00E9, r1
			 *  \return Boolean true if the selected endpoint has received a SETUP packet, false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    1ac8:	80 91 e8 00 	lds	r24, 0x00E8
	{
		uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();

		Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

		if (Endpoint_IsSETUPReceived())
    1acc:	83 ff       	sbrs	r24, 3
    1ace:	01 c0       	rjmp	.+2      	; 0x1ad2 <USB_USBTask+0x24>
		  USB_Device_ProcessControlRequest();
    1ad0:	d4 db       	rcall	.-2136   	; 0x127a <USB_Device_ProcessControlRequest>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return (UENUM & ENDPOINT_EPNUM_MASK);
    1ad2:	17 70       	andi	r17, 0x07	; 7
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    1ad4:	10 93 e9 00 	sts	0x00E9, r17
    1ad8:	0d c0       	rjmp	.+26     	; 0x1af4 <USB_USBTask+0x46>
	#elif defined(USB_DEVICE_ONLY)
		USB_DeviceTask();
	#else
		if (USB_CurrentMode == USB_MODE_Device)
		  USB_DeviceTask();
		else if (USB_CurrentMode == USB_MODE_Host)
    1ada:	80 91 f5 01 	lds	r24, 0x01F5
    1ade:	82 30       	cpi	r24, 0x02	; 2
    1ae0:	49 f4       	brne	.+18     	; 0x1af4 <USB_USBTask+0x46>
			 *  \return Index of the currently selected pipe.
			 */
			static inline uint8_t Pipe_GetCurrentPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetCurrentPipe(void)
			{
				return (UPNUM & PIPE_PIPENUM_MASK);
    1ae2:	10 91 a7 00 	lds	r17, 0x00A7
    1ae6:	17 70       	andi	r17, 0x07	; 7
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
    1ae8:	10 92 a7 00 	sts	0x00A7, r1
{
	uint8_t PrevPipe = Pipe_GetCurrentPipe();

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	USB_Host_ProcessNextHostState();
    1aec:	0e 94 99 04 	call	0x932	; 0x932 <USB_Host_ProcessNextHostState>
    1af0:	10 93 a7 00 	sts	0x00A7, r17
		if (USB_CurrentMode == USB_MODE_Device)
		  USB_DeviceTask();
		else if (USB_CurrentMode == USB_MODE_Host)
		  USB_HostTask();
	#endif
}
    1af4:	1f 91       	pop	r17
    1af6:	08 95       	ret

00001af8 <USB_GetHIDReportSize>:

uint16_t USB_GetHIDReportSize(HID_ReportInfo_t* const ParserData,
                              const uint8_t ReportID,
                              const uint8_t ReportType)
{
    1af8:	e4 2f       	mov	r30, r20
    1afa:	f0 e0       	ldi	r31, 0x00	; 0
    1afc:	ee 0f       	add	r30, r30
    1afe:	ff 1f       	adc	r31, r31
    1b00:	ef 56       	subi	r30, 0x6F	; 111
    1b02:	fc 4f       	sbci	r31, 0xFC	; 252
    1b04:	e8 0f       	add	r30, r24
    1b06:	f9 1f       	adc	r31, r25
    1b08:	dc 01       	movw	r26, r24
    1b0a:	a0 57       	subi	r26, 0x70	; 112
    1b0c:	bc 4f       	sbci	r27, 0xFC	; 252
    1b0e:	90 e0       	ldi	r25, 0x00	; 0
	for (uint8_t i = 0; i < HID_MAX_REPORT_IDS; i++)
	{
		uint16_t ReportSizeBits = ParserData->ReportIDSizes[i].ReportSizeBits[ReportType];
    1b10:	20 81       	ld	r18, Z
    1b12:	31 81       	ldd	r19, Z+1	; 0x01

		if (ParserData->ReportIDSizes[i].ReportID == ReportID)
    1b14:	8c 91       	ld	r24, X
    1b16:	86 17       	cp	r24, r22
    1b18:	89 f4       	brne	.+34     	; 0x1b3c <USB_GetHIDReportSize+0x44>
		  return ((ReportSizeBits >> 3) + ((ReportSizeBits & 0x07) ? 1 : 0));
    1b1a:	40 e0       	ldi	r20, 0x00	; 0
    1b1c:	50 e0       	ldi	r21, 0x00	; 0
    1b1e:	c9 01       	movw	r24, r18
    1b20:	87 70       	andi	r24, 0x07	; 7
    1b22:	90 70       	andi	r25, 0x00	; 0
    1b24:	89 2b       	or	r24, r25
    1b26:	11 f0       	breq	.+4      	; 0x1b2c <USB_GetHIDReportSize+0x34>
    1b28:	41 e0       	ldi	r20, 0x01	; 1
    1b2a:	50 e0       	ldi	r21, 0x00	; 0
    1b2c:	63 e0       	ldi	r22, 0x03	; 3
    1b2e:	36 95       	lsr	r19
    1b30:	27 95       	ror	r18
    1b32:	6a 95       	dec	r22
    1b34:	e1 f7       	brne	.-8      	; 0x1b2e <USB_GetHIDReportSize+0x36>
    1b36:	24 0f       	add	r18, r20
    1b38:	35 1f       	adc	r19, r21
    1b3a:	07 c0       	rjmp	.+14     	; 0x1b4a <USB_GetHIDReportSize+0x52>

uint16_t USB_GetHIDReportSize(HID_ReportInfo_t* const ParserData,
                              const uint8_t ReportID,
                              const uint8_t ReportType)
{
	for (uint8_t i = 0; i < HID_MAX_REPORT_IDS; i++)
    1b3c:	9f 5f       	subi	r25, 0xFF	; 255
    1b3e:	37 96       	adiw	r30, 0x07	; 7
    1b40:	17 96       	adiw	r26, 0x07	; 7
    1b42:	9a 30       	cpi	r25, 0x0A	; 10
    1b44:	29 f7       	brne	.-54     	; 0x1b10 <USB_GetHIDReportSize+0x18>
    1b46:	20 e0       	ldi	r18, 0x00	; 0
    1b48:	30 e0       	ldi	r19, 0x00	; 0
		if (ParserData->ReportIDSizes[i].ReportID == ReportID)
		  return ((ReportSizeBits >> 3) + ((ReportSizeBits & 0x07) ? 1 : 0));
	}

	return 0;
}
    1b4a:	c9 01       	movw	r24, r18
    1b4c:	08 95       	ret

00001b4e <HID_Device_USBTask>:

	return true;
}

void HID_Device_USBTask(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
    1b4e:	4f 92       	push	r4
    1b50:	5f 92       	push	r5
    1b52:	6f 92       	push	r6
    1b54:	7f 92       	push	r7
    1b56:	8f 92       	push	r8
    1b58:	9f 92       	push	r9
    1b5a:	af 92       	push	r10
    1b5c:	bf 92       	push	r11
    1b5e:	cf 92       	push	r12
    1b60:	df 92       	push	r13
    1b62:	ef 92       	push	r14
    1b64:	ff 92       	push	r15
    1b66:	0f 93       	push	r16
    1b68:	1f 93       	push	r17
    1b6a:	df 93       	push	r29
    1b6c:	cf 93       	push	r28
    1b6e:	00 d0       	rcall	.+0      	; 0x1b70 <HID_Device_USBTask+0x22>
    1b70:	0f 92       	push	r0
    1b72:	cd b7       	in	r28, 0x3d	; 61
    1b74:	de b7       	in	r29, 0x3e	; 62
    1b76:	7c 01       	movw	r14, r24
			Endpoint_Write_Stream_LE(ReportINData, ReportINSize, NO_STREAM_CALLBACK);

			Endpoint_ClearIN();
		}
	}
}
    1b78:	6d b6       	in	r6, 0x3d	; 61
    1b7a:	7e b6       	in	r7, 0x3e	; 62
	return true;
}

void HID_Device_USBTask(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
	if (USB_DeviceState != DEVICE_STATE_Configured)
    1b7c:	80 91 fd 01 	lds	r24, 0x01FD
    1b80:	84 30       	cpi	r24, 0x04	; 4
    1b82:	09 f0       	breq	.+2      	; 0x1b86 <HID_Device_USBTask+0x38>
    1b84:	86 c0       	rjmp	.+268    	; 0x1c92 <HID_Device_USBTask+0x144>
	  return;

	Endpoint_SelectEndpoint(HIDInterfaceInfo->Config.ReportINEndpointNumber);
    1b86:	f7 01       	movw	r30, r14
    1b88:	81 81       	ldd	r24, Z+1	; 0x01
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    1b8a:	80 93 e9 00 	sts	0x00E9, r24
			 *  \return Boolean true if the currently selected endpoint may be read from or written to, depending on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    1b8e:	80 91 e8 00 	lds	r24, 0x00E8

	if (Endpoint_IsReadWriteAllowed())
    1b92:	85 ff       	sbrs	r24, 5
    1b94:	7e c0       	rjmp	.+252    	; 0x1c92 <HID_Device_USBTask+0x144>
    1b96:	5d b6       	in	r5, 0x3d	; 61
    1b98:	4e b6       	in	r4, 0x3e	; 62
	{
		uint8_t  ReportINData[HIDInterfaceInfo->Config.PrevReportINBufferSize];
    1b9a:	47 81       	ldd	r20, Z+7	; 0x07
    1b9c:	8d b7       	in	r24, 0x3d	; 61
    1b9e:	9e b7       	in	r25, 0x3e	; 62
    1ba0:	84 1b       	sub	r24, r20
    1ba2:	91 09       	sbc	r25, r1
    1ba4:	0f b6       	in	r0, 0x3f	; 63
    1ba6:	f8 94       	cli
    1ba8:	9e bf       	out	0x3e, r25	; 62
    1baa:	0f be       	out	0x3f, r0	; 63
    1bac:	8d bf       	out	0x3d, r24	; 61
    1bae:	0d b7       	in	r16, 0x3d	; 61
    1bb0:	1e b7       	in	r17, 0x3e	; 62
    1bb2:	0f 5f       	subi	r16, 0xFF	; 255
    1bb4:	1f 4f       	sbci	r17, 0xFF	; 255
		uint8_t  ReportID     = 0;
    1bb6:	19 82       	std	Y+1, r1	; 0x01
		uint16_t ReportINSize = 0;
    1bb8:	1b 82       	std	Y+3, r1	; 0x03
    1bba:	1a 82       	std	Y+2, r1	; 0x02

		memset(ReportINData, 0, sizeof(ReportINData));
    1bbc:	c0 2e       	mov	r12, r16
    1bbe:	91 2e       	mov	r9, r17
    1bc0:	c8 01       	movw	r24, r16
    1bc2:	60 e0       	ldi	r22, 0x00	; 0
    1bc4:	70 e0       	ldi	r23, 0x00	; 0
    1bc6:	50 e0       	ldi	r21, 0x00	; 0
    1bc8:	c9 d3       	rcall	.+1938   	; 0x235c <memset>

		bool ForceSend         = CALLBACK_HID_Device_CreateHIDReport(HIDInterfaceInfo, &ReportID, HID_REPORT_ITEM_In,
		                                                             ReportINData, &ReportINSize);
    1bca:	c7 01       	movw	r24, r14
    1bcc:	be 01       	movw	r22, r28
    1bce:	6f 5f       	subi	r22, 0xFF	; 255
    1bd0:	7f 4f       	sbci	r23, 0xFF	; 255
    1bd2:	40 e0       	ldi	r20, 0x00	; 0
    1bd4:	98 01       	movw	r18, r16
    1bd6:	8e 01       	movw	r16, r28
    1bd8:	0e 5f       	subi	r16, 0xFE	; 254
    1bda:	1f 4f       	sbci	r17, 0xFF	; 255
    1bdc:	0e 94 1f 02 	call	0x43e	; 0x43e <CALLBACK_HID_Device_CreateHIDReport>
    1be0:	88 2e       	mov	r8, r24
		bool StatesChanged     = false;
		bool IdlePeriodElapsed = (HIDInterfaceInfo->State.IdleCount && !(HIDInterfaceInfo->State.IdleMSRemaining));
    1be2:	f7 01       	movw	r30, r14
    1be4:	81 85       	ldd	r24, Z+9	; 0x09
    1be6:	92 85       	ldd	r25, Z+10	; 0x0a
    1be8:	89 2b       	or	r24, r25
    1bea:	19 f4       	brne	.+6      	; 0x1bf2 <HID_Device_USBTask+0xa4>
    1bec:	aa 24       	eor	r10, r10
    1bee:	bb 24       	eor	r11, r11
    1bf0:	0b c0       	rjmp	.+22     	; 0x1c08 <HID_Device_USBTask+0xba>
    1bf2:	20 e0       	ldi	r18, 0x00	; 0
    1bf4:	f7 01       	movw	r30, r14
    1bf6:	83 85       	ldd	r24, Z+11	; 0x0b
    1bf8:	94 85       	ldd	r25, Z+12	; 0x0c
    1bfa:	89 2b       	or	r24, r25
    1bfc:	09 f0       	breq	.+2      	; 0x1c00 <HID_Device_USBTask+0xb2>
    1bfe:	21 e0       	ldi	r18, 0x01	; 1
    1c00:	81 e0       	ldi	r24, 0x01	; 1
    1c02:	28 27       	eor	r18, r24
    1c04:	a2 2e       	mov	r10, r18
    1c06:	bb 24       	eor	r11, r11

		if (HIDInterfaceInfo->Config.PrevReportINBuffer != NULL)
    1c08:	f7 01       	movw	r30, r14
    1c0a:	05 81       	ldd	r16, Z+5	; 0x05
    1c0c:	16 81       	ldd	r17, Z+6	; 0x06
    1c0e:	01 15       	cp	r16, r1
    1c10:	11 05       	cpc	r17, r1
    1c12:	11 f4       	brne	.+4      	; 0x1c18 <HID_Device_USBTask+0xca>
    1c14:	dd 24       	eor	r13, r13
    1c16:	12 c0       	rjmp	.+36     	; 0x1c3c <HID_Device_USBTask+0xee>
		{
			StatesChanged = (memcmp(ReportINData, HIDInterfaceInfo->Config.PrevReportINBuffer, ReportINSize) != 0);
    1c18:	4a 81       	ldd	r20, Y+2	; 0x02
    1c1a:	5b 81       	ldd	r21, Y+3	; 0x03
    1c1c:	8c 2d       	mov	r24, r12
    1c1e:	99 2d       	mov	r25, r9
    1c20:	b8 01       	movw	r22, r16
    1c22:	86 d3       	rcall	.+1804   	; 0x2330 <memcmp>
    1c24:	dd 24       	eor	r13, r13
    1c26:	00 97       	sbiw	r24, 0x00	; 0
    1c28:	11 f0       	breq	.+4      	; 0x1c2e <HID_Device_USBTask+0xe0>
    1c2a:	dd 24       	eor	r13, r13
    1c2c:	d3 94       	inc	r13
			memcpy(HIDInterfaceInfo->Config.PrevReportINBuffer, ReportINData, HIDInterfaceInfo->Config.PrevReportINBufferSize);
    1c2e:	f7 01       	movw	r30, r14
    1c30:	47 81       	ldd	r20, Z+7	; 0x07
    1c32:	c8 01       	movw	r24, r16
    1c34:	6c 2d       	mov	r22, r12
    1c36:	79 2d       	mov	r23, r9
    1c38:	50 e0       	ldi	r21, 0x00	; 0
    1c3a:	87 d3       	rcall	.+1806   	; 0x234a <memcpy>
		}

		if (ReportINSize && (ForceSend || StatesChanged || IdlePeriodElapsed))
    1c3c:	8a 81       	ldd	r24, Y+2	; 0x02
    1c3e:	9b 81       	ldd	r25, Y+3	; 0x03
    1c40:	89 2b       	or	r24, r25
    1c42:	f9 f0       	breq	.+62     	; 0x1c82 <HID_Device_USBTask+0x134>
    1c44:	88 20       	and	r8, r8
    1c46:	21 f4       	brne	.+8      	; 0x1c50 <HID_Device_USBTask+0x102>
    1c48:	dd 20       	and	r13, r13
    1c4a:	11 f4       	brne	.+4      	; 0x1c50 <HID_Device_USBTask+0x102>
    1c4c:	ab 28       	or	r10, r11
    1c4e:	c9 f0       	breq	.+50     	; 0x1c82 <HID_Device_USBTask+0x134>
		{
			HIDInterfaceInfo->State.IdleMSRemaining = HIDInterfaceInfo->State.IdleCount;
    1c50:	f7 01       	movw	r30, r14
    1c52:	81 85       	ldd	r24, Z+9	; 0x09
    1c54:	92 85       	ldd	r25, Z+10	; 0x0a
    1c56:	94 87       	std	Z+12, r25	; 0x0c
    1c58:	83 87       	std	Z+11, r24	; 0x0b

			Endpoint_SelectEndpoint(HIDInterfaceInfo->Config.ReportINEndpointNumber);
    1c5a:	81 81       	ldd	r24, Z+1	; 0x01
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    1c5c:	80 93 e9 00 	sts	0x00E9, r24

			if (ReportID)
    1c60:	89 81       	ldd	r24, Y+1	; 0x01
    1c62:	88 23       	and	r24, r24
    1c64:	11 f0       	breq	.+4      	; 0x1c6a <HID_Device_USBTask+0x11c>
			 *  \param[in] Byte  Next byte to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_Byte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_Byte(const uint8_t Byte)
			{
				UEDATX = Byte;
    1c66:	80 93 f1 00 	sts	0x00F1, r24
			  Endpoint_Write_Byte(ReportID);

			Endpoint_Write_Stream_LE(ReportINData, ReportINSize, NO_STREAM_CALLBACK);
    1c6a:	6a 81       	ldd	r22, Y+2	; 0x02
    1c6c:	7b 81       	ldd	r23, Y+3	; 0x03
    1c6e:	8c 2d       	mov	r24, r12
    1c70:	99 2d       	mov	r25, r9
    1c72:	40 e0       	ldi	r20, 0x00	; 0
    1c74:	50 e0       	ldi	r21, 0x00	; 0
    1c76:	6f dd       	rcall	.-1314   	; 0x1756 <Endpoint_Write_Stream_LE>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1c78:	80 91 e8 00 	lds	r24, 0x00E8
    1c7c:	8e 77       	andi	r24, 0x7E	; 126
    1c7e:	80 93 e8 00 	sts	0x00E8, r24
    1c82:	85 2d       	mov	r24, r5
    1c84:	94 2d       	mov	r25, r4
    1c86:	9c 01       	movw	r18, r24
    1c88:	0f b6       	in	r0, 0x3f	; 63
    1c8a:	f8 94       	cli
    1c8c:	3e bf       	out	0x3e, r19	; 62
    1c8e:	0f be       	out	0x3f, r0	; 63
    1c90:	2d bf       	out	0x3d, r18	; 61

			Endpoint_ClearIN();
		}
	}
}
    1c92:	0f b6       	in	r0, 0x3f	; 63
    1c94:	f8 94       	cli
    1c96:	7e be       	out	0x3e, r7	; 62
    1c98:	0f be       	out	0x3f, r0	; 63
    1c9a:	6d be       	out	0x3d, r6	; 61
    1c9c:	0f 90       	pop	r0
    1c9e:	0f 90       	pop	r0
    1ca0:	0f 90       	pop	r0
    1ca2:	cf 91       	pop	r28
    1ca4:	df 91       	pop	r29
    1ca6:	1f 91       	pop	r17
    1ca8:	0f 91       	pop	r16
    1caa:	ff 90       	pop	r15
    1cac:	ef 90       	pop	r14
    1cae:	df 90       	pop	r13
    1cb0:	cf 90       	pop	r12
    1cb2:	bf 90       	pop	r11
    1cb4:	af 90       	pop	r10
    1cb6:	9f 90       	pop	r9
    1cb8:	8f 90       	pop	r8
    1cba:	7f 90       	pop	r7
    1cbc:	6f 90       	pop	r6
    1cbe:	5f 90       	pop	r5
    1cc0:	4f 90       	pop	r4
    1cc2:	08 95       	ret

00001cc4 <HID_Device_ConfigureEndpoints>:
			break;
	}
}

bool HID_Device_ConfigureEndpoints(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
    1cc4:	cf 93       	push	r28
    1cc6:	df 93       	push	r29
    1cc8:	dc 01       	movw	r26, r24
	memset(&HIDInterfaceInfo->State, 0x00, sizeof(HIDInterfaceInfo->State));
    1cca:	08 96       	adiw	r24, 0x08	; 8
    1ccc:	fc 01       	movw	r30, r24
    1cce:	85 e0       	ldi	r24, 0x05	; 5
    1cd0:	ef 01       	movw	r28, r30
    1cd2:	19 92       	st	Y+, r1
    1cd4:	8a 95       	dec	r24
    1cd6:	e9 f7       	brne	.-6      	; 0x1cd2 <HID_Device_ConfigureEndpoints+0xe>
	HIDInterfaceInfo->State.UsingReportProtocol = true;
    1cd8:	81 e0       	ldi	r24, 0x01	; 1
    1cda:	18 96       	adiw	r26, 0x08	; 8
    1cdc:	8c 93       	st	X, r24
    1cde:	18 97       	sbiw	r26, 0x08	; 8
	HIDInterfaceInfo->State.IdleCount = 500;
    1ce0:	84 ef       	ldi	r24, 0xF4	; 244
    1ce2:	91 e0       	ldi	r25, 0x01	; 1
    1ce4:	1a 96       	adiw	r26, 0x0a	; 10
    1ce6:	9c 93       	st	X, r25
    1ce8:	8e 93       	st	-X, r24
    1cea:	19 97       	sbiw	r26, 0x09	; 9

	if (!(Endpoint_ConfigureEndpoint(HIDInterfaceInfo->Config.ReportINEndpointNumber, EP_TYPE_INTERRUPT,
    1cec:	11 96       	adiw	r26, 0x01	; 1
    1cee:	3c 91       	ld	r19, X
    1cf0:	11 97       	sbiw	r26, 0x01	; 1
    1cf2:	12 96       	adiw	r26, 0x02	; 2
    1cf4:	6d 91       	ld	r22, X+
    1cf6:	7c 91       	ld	r23, X
    1cf8:	13 97       	sbiw	r26, 0x03	; 3
    1cfa:	14 96       	adiw	r26, 0x04	; 4
    1cfc:	8c 91       	ld	r24, X
    1cfe:	88 23       	and	r24, r24
    1d00:	11 f4       	brne	.+4      	; 0x1d06 <HID_Device_ConfigureEndpoints+0x42>
    1d02:	40 e0       	ldi	r20, 0x00	; 0
    1d04:	01 c0       	rjmp	.+2      	; 0x1d08 <HID_Device_ConfigureEndpoints+0x44>
    1d06:	44 e0       	ldi	r20, 0x04	; 4
    1d08:	20 e0       	ldi	r18, 0x00	; 0
    1d0a:	88 e0       	ldi	r24, 0x08	; 8
    1d0c:	90 e0       	ldi	r25, 0x00	; 0
    1d0e:	03 c0       	rjmp	.+6      	; 0x1d16 <HID_Device_ConfigureEndpoints+0x52>
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while (CheckBytes < Bytes)
				{
					MaskVal++;
    1d10:	2f 5f       	subi	r18, 0xFF	; 255
					CheckBytes <<= 1;
    1d12:	88 0f       	add	r24, r24
    1d14:	99 1f       	adc	r25, r25
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while (CheckBytes < Bytes)
    1d16:	86 17       	cp	r24, r22
    1d18:	97 07       	cpc	r25, r23
    1d1a:	d0 f3       	brcs	.-12     	; 0x1d10 <HID_Device_ConfigureEndpoints+0x4c>
			                                              const uint8_t Type,
			                                              const uint8_t Direction,
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				return Endpoint_ConfigureEndpoint_Prv(Number, (((Type) << EPTYPE0) | (Direction)),
    1d1c:	42 60       	ori	r20, 0x02	; 2
    1d1e:	22 95       	swap	r18
    1d20:	20 7f       	andi	r18, 0xF0	; 240
    1d22:	42 2b       	or	r20, r18
    1d24:	83 2f       	mov	r24, r19
    1d26:	61 ec       	ldi	r22, 0xC1	; 193
    1d28:	0e 94 80 03 	call	0x700	; 0x700 <Endpoint_ConfigureEndpoint_Prv>
    1d2c:	81 11       	cpse	r24, r1
    1d2e:	81 e0       	ldi	r24, 0x01	; 1
	{
		return false;
	}

	return true;
}
    1d30:	df 91       	pop	r29
    1d32:	cf 91       	pop	r28
    1d34:	08 95       	ret

00001d36 <HID_Device_ProcessControlRequest>:
#define  __INCLUDE_FROM_HID_DRIVER
#define  __INCLUDE_FROM_HID_DEVICE_C
#include "HID.h"

void HID_Device_ProcessControlRequest(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
    1d36:	6f 92       	push	r6
    1d38:	7f 92       	push	r7
    1d3a:	8f 92       	push	r8
    1d3c:	9f 92       	push	r9
    1d3e:	af 92       	push	r10
    1d40:	bf 92       	push	r11
    1d42:	cf 92       	push	r12
    1d44:	df 92       	push	r13
    1d46:	ef 92       	push	r14
    1d48:	ff 92       	push	r15
    1d4a:	0f 93       	push	r16
    1d4c:	1f 93       	push	r17
    1d4e:	df 93       	push	r29
    1d50:	cf 93       	push	r28
    1d52:	00 d0       	rcall	.+0      	; 0x1d54 <HID_Device_ProcessControlRequest+0x1e>
    1d54:	0f 92       	push	r0
    1d56:	cd b7       	in	r28, 0x3d	; 61
    1d58:	de b7       	in	r29, 0x3e	; 62
    1d5a:	4c 01       	movw	r8, r24
				Endpoint_ClearStatusStage();
			}

			break;
	}
}
    1d5c:	6d b6       	in	r6, 0x3d	; 61
    1d5e:	7e b6       	in	r7, 0x3e	; 62
			 *  \return Boolean true if the selected endpoint has received a SETUP packet, false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    1d60:	80 91 e8 00 	lds	r24, 0x00E8
#define  __INCLUDE_FROM_HID_DEVICE_C
#include "HID.h"

void HID_Device_ProcessControlRequest(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
	if (!(Endpoint_IsSETUPReceived()))
    1d64:	83 ff       	sbrs	r24, 3
    1d66:	fd c0       	rjmp	.+506    	; 0x1f62 <HID_Device_ProcessControlRequest+0x22c>
	  return;

	if (USB_ControlRequest.wIndex != HIDInterfaceInfo->Config.InterfaceNumber)
    1d68:	f4 01       	movw	r30, r8
    1d6a:	80 81       	ld	r24, Z
    1d6c:	90 e0       	ldi	r25, 0x00	; 0
    1d6e:	20 91 02 02 	lds	r18, 0x0202
    1d72:	30 91 03 02 	lds	r19, 0x0203
    1d76:	28 17       	cp	r18, r24
    1d78:	39 07       	cpc	r19, r25
    1d7a:	09 f0       	breq	.+2      	; 0x1d7e <HID_Device_ProcessControlRequest+0x48>
    1d7c:	f2 c0       	rjmp	.+484    	; 0x1f62 <HID_Device_ProcessControlRequest+0x22c>
	  return;

	switch (USB_ControlRequest.bRequest)
    1d7e:	80 91 ff 01 	lds	r24, 0x01FF
    1d82:	83 30       	cpi	r24, 0x03	; 3
    1d84:	09 f4       	brne	.+2      	; 0x1d88 <HID_Device_ProcessControlRequest+0x52>
    1d86:	9a c0       	rjmp	.+308    	; 0x1ebc <HID_Device_ProcessControlRequest+0x186>
    1d88:	84 30       	cpi	r24, 0x04	; 4
    1d8a:	30 f4       	brcc	.+12     	; 0x1d98 <HID_Device_ProcessControlRequest+0x62>
    1d8c:	81 30       	cpi	r24, 0x01	; 1
    1d8e:	71 f0       	breq	.+28     	; 0x1dac <HID_Device_ProcessControlRequest+0x76>
    1d90:	82 30       	cpi	r24, 0x02	; 2
    1d92:	09 f0       	breq	.+2      	; 0x1d96 <HID_Device_ProcessControlRequest+0x60>
    1d94:	e6 c0       	rjmp	.+460    	; 0x1f62 <HID_Device_ProcessControlRequest+0x22c>
    1d96:	cc c0       	rjmp	.+408    	; 0x1f30 <HID_Device_ProcessControlRequest+0x1fa>
    1d98:	8a 30       	cpi	r24, 0x0A	; 10
    1d9a:	09 f4       	brne	.+2      	; 0x1d9e <HID_Device_ProcessControlRequest+0x68>
    1d9c:	b0 c0       	rjmp	.+352    	; 0x1efe <HID_Device_ProcessControlRequest+0x1c8>
    1d9e:	8b 30       	cpi	r24, 0x0B	; 11
    1da0:	09 f4       	brne	.+2      	; 0x1da4 <HID_Device_ProcessControlRequest+0x6e>
    1da2:	99 c0       	rjmp	.+306    	; 0x1ed6 <HID_Device_ProcessControlRequest+0x1a0>
    1da4:	89 30       	cpi	r24, 0x09	; 9
    1da6:	09 f0       	breq	.+2      	; 0x1daa <HID_Device_ProcessControlRequest+0x74>
    1da8:	dc c0       	rjmp	.+440    	; 0x1f62 <HID_Device_ProcessControlRequest+0x22c>
    1daa:	50 c0       	rjmp	.+160    	; 0x1e4c <HID_Device_ProcessControlRequest+0x116>
	{
		case HID_REQ_GetReport:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    1dac:	80 91 fe 01 	lds	r24, 0x01FE
    1db0:	81 3a       	cpi	r24, 0xA1	; 161
    1db2:	09 f0       	breq	.+2      	; 0x1db6 <HID_Device_ProcessControlRequest+0x80>
    1db4:	d6 c0       	rjmp	.+428    	; 0x1f62 <HID_Device_ProcessControlRequest+0x22c>
    1db6:	ad b6       	in	r10, 0x3d	; 61
    1db8:	fe b6       	in	r15, 0x3e	; 62
			{
				uint16_t ReportSize = 0;
    1dba:	1b 82       	std	Y+3, r1	; 0x03
    1dbc:	1a 82       	std	Y+2, r1	; 0x02
				uint8_t  ReportID   = (USB_ControlRequest.wValue & 0xFF);
    1dbe:	80 91 00 02 	lds	r24, 0x0200
    1dc2:	10 91 01 02 	lds	r17, 0x0201
    1dc6:	89 83       	std	Y+1, r24	; 0x01
				uint8_t  ReportType = (USB_ControlRequest.wValue >> 8) - 1;
				uint8_t  ReportData[HIDInterfaceInfo->Config.PrevReportINBufferSize];
    1dc8:	f4 01       	movw	r30, r8
    1dca:	47 81       	ldd	r20, Z+7	; 0x07
    1dcc:	8d b7       	in	r24, 0x3d	; 61
    1dce:	9e b7       	in	r25, 0x3e	; 62
    1dd0:	84 1b       	sub	r24, r20
    1dd2:	91 09       	sbc	r25, r1
    1dd4:	0f b6       	in	r0, 0x3f	; 63
    1dd6:	f8 94       	cli
    1dd8:	9e bf       	out	0x3e, r25	; 62
    1dda:	0f be       	out	0x3f, r0	; 63
    1ddc:	8d bf       	out	0x3d, r24	; 61
    1dde:	cd b6       	in	r12, 0x3d	; 61
    1de0:	de b6       	in	r13, 0x3e	; 62
    1de2:	08 94       	sec
    1de4:	c1 1c       	adc	r12, r1
    1de6:	d1 1c       	adc	r13, r1

				memset(ReportData, 0, sizeof(ReportData));
    1de8:	ec 2c       	mov	r14, r12
    1dea:	bd 2c       	mov	r11, r13
    1dec:	c6 01       	movw	r24, r12
    1dee:	60 e0       	ldi	r22, 0x00	; 0
    1df0:	70 e0       	ldi	r23, 0x00	; 0
    1df2:	50 e0       	ldi	r21, 0x00	; 0
    1df4:	b3 d2       	rcall	.+1382   	; 0x235c <memset>

				CALLBACK_HID_Device_CreateHIDReport(HIDInterfaceInfo, &ReportID, ReportType, ReportData, &ReportSize);
    1df6:	11 50       	subi	r17, 0x01	; 1
    1df8:	c4 01       	movw	r24, r8
    1dfa:	be 01       	movw	r22, r28
    1dfc:	6f 5f       	subi	r22, 0xFF	; 255
    1dfe:	7f 4f       	sbci	r23, 0xFF	; 255
    1e00:	41 2f       	mov	r20, r17
    1e02:	96 01       	movw	r18, r12
    1e04:	8e 01       	movw	r16, r28
    1e06:	0e 5f       	subi	r16, 0xFE	; 254
    1e08:	1f 4f       	sbci	r17, 0xFF	; 255
    1e0a:	0e 94 1f 02 	call	0x43e	; 0x43e <CALLBACK_HID_Device_CreateHIDReport>

				if (HIDInterfaceInfo->Config.PrevReportINBuffer != NULL)
    1e0e:	f4 01       	movw	r30, r8
    1e10:	25 81       	ldd	r18, Z+5	; 0x05
    1e12:	36 81       	ldd	r19, Z+6	; 0x06
    1e14:	21 15       	cp	r18, r1
    1e16:	31 05       	cpc	r19, r1
    1e18:	29 f0       	breq	.+10     	; 0x1e24 <HID_Device_ProcessControlRequest+0xee>
				  memcpy(HIDInterfaceInfo->Config.PrevReportINBuffer, ReportData, HIDInterfaceInfo->Config.PrevReportINBufferSize);
    1e1a:	47 81       	ldd	r20, Z+7	; 0x07
    1e1c:	c9 01       	movw	r24, r18
    1e1e:	b6 01       	movw	r22, r12
    1e20:	50 e0       	ldi	r21, 0x00	; 0
    1e22:	93 d2       	rcall	.+1318   	; 0x234a <memcpy>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    1e24:	10 92 e9 00 	sts	0x00E9, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1e28:	80 91 e8 00 	lds	r24, 0x00E8
    1e2c:	87 7f       	andi	r24, 0xF7	; 247
    1e2e:	80 93 e8 00 	sts	0x00E8, r24

				Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

				Endpoint_ClearSETUP();
				Endpoint_Write_Control_Stream_LE(ReportData, ReportSize);
    1e32:	6a 81       	ldd	r22, Y+2	; 0x02
    1e34:	7b 81       	ldd	r23, Y+3	; 0x03
    1e36:	8e 2d       	mov	r24, r14
    1e38:	9b 2d       	mov	r25, r11
    1e3a:	8e db       	rcall	.-2276   	; 0x1558 <Endpoint_Write_Control_Stream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    1e3c:	80 91 e8 00 	lds	r24, 0x00E8
    1e40:	8b 77       	andi	r24, 0x7B	; 123
    1e42:	80 93 e8 00 	sts	0x00E8, r24
    1e46:	2a 2d       	mov	r18, r10
    1e48:	3f 2d       	mov	r19, r15
    1e4a:	32 c0       	rjmp	.+100    	; 0x1eb0 <HID_Device_ProcessControlRequest+0x17a>
				Endpoint_ClearOUT();
			}

			break;
		case HID_REQ_SetReport:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    1e4c:	80 91 fe 01 	lds	r24, 0x01FE
    1e50:	81 32       	cpi	r24, 0x21	; 33
    1e52:	09 f0       	breq	.+2      	; 0x1e56 <HID_Device_ProcessControlRequest+0x120>
    1e54:	86 c0       	rjmp	.+268    	; 0x1f62 <HID_Device_ProcessControlRequest+0x22c>
    1e56:	ae b6       	in	r10, 0x3e	; 62
			{
				uint16_t ReportSize = USB_ControlRequest.wLength;
    1e58:	00 91 04 02 	lds	r16, 0x0204
    1e5c:	10 91 05 02 	lds	r17, 0x0205
				uint8_t  ReportID   = (USB_ControlRequest.wValue & 0xFF);
    1e60:	c0 90 00 02 	lds	r12, 0x0200
    1e64:	d0 90 01 02 	lds	r13, 0x0201
				uint8_t  ReportType = (USB_ControlRequest.wValue >> 8) - 1;
				uint8_t  ReportData[ReportSize];
    1e68:	8d b7       	in	r24, 0x3d	; 61
    1e6a:	9e b7       	in	r25, 0x3e	; 62
    1e6c:	80 1b       	sub	r24, r16
    1e6e:	91 0b       	sbc	r25, r17
    1e70:	0f b6       	in	r0, 0x3f	; 63
    1e72:	f8 94       	cli
    1e74:	9e bf       	out	0x3e, r25	; 62
    1e76:	0f be       	out	0x3f, r0	; 63
    1e78:	8d bf       	out	0x3d, r24	; 61
    1e7a:	ed b6       	in	r14, 0x3d	; 61
    1e7c:	fe b6       	in	r15, 0x3e	; 62
    1e7e:	08 94       	sec
    1e80:	e1 1c       	adc	r14, r1
    1e82:	f1 1c       	adc	r15, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1e84:	80 91 e8 00 	lds	r24, 0x00E8
    1e88:	87 7f       	andi	r24, 0xF7	; 247
    1e8a:	80 93 e8 00 	sts	0x00E8, r24

				Endpoint_ClearSETUP();
				Endpoint_Read_Control_Stream_LE(ReportData, ReportSize);
    1e8e:	c7 01       	movw	r24, r14
    1e90:	b8 01       	movw	r22, r16
    1e92:	20 dc       	rcall	.-1984   	; 0x16d4 <Endpoint_Read_Control_Stream_LE>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1e94:	80 91 e8 00 	lds	r24, 0x00E8
    1e98:	8e 77       	andi	r24, 0x7E	; 126
    1e9a:	80 93 e8 00 	sts	0x00E8, r24
				Endpoint_ClearIN();

				CALLBACK_HID_Device_ProcessHIDReport(HIDInterfaceInfo, ReportID, ReportType, ReportData, ReportSize);
    1e9e:	da 94       	dec	r13
    1ea0:	c4 01       	movw	r24, r8
    1ea2:	6c 2d       	mov	r22, r12
    1ea4:	4d 2d       	mov	r20, r13
    1ea6:	97 01       	movw	r18, r14
    1ea8:	0e 94 52 02 	call	0x4a4	; 0x4a4 <CALLBACK_HID_Device_ProcessHIDReport>
    1eac:	26 2d       	mov	r18, r6
    1eae:	3a 2d       	mov	r19, r10
    1eb0:	0f b6       	in	r0, 0x3f	; 63
    1eb2:	f8 94       	cli
    1eb4:	3e bf       	out	0x3e, r19	; 62
    1eb6:	0f be       	out	0x3f, r0	; 63
    1eb8:	2d bf       	out	0x3d, r18	; 61
    1eba:	53 c0       	rjmp	.+166    	; 0x1f62 <HID_Device_ProcessControlRequest+0x22c>
			}

			break;
		case HID_REQ_GetProtocol:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    1ebc:	80 91 fe 01 	lds	r24, 0x01FE
    1ec0:	81 3a       	cpi	r24, 0xA1	; 161
    1ec2:	09 f0       	breq	.+2      	; 0x1ec6 <HID_Device_ProcessControlRequest+0x190>
    1ec4:	4e c0       	rjmp	.+156    	; 0x1f62 <HID_Device_ProcessControlRequest+0x22c>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1ec6:	80 91 e8 00 	lds	r24, 0x00E8
    1eca:	87 7f       	andi	r24, 0xF7	; 247
    1ecc:	80 93 e8 00 	sts	0x00E8, r24
			{
				Endpoint_ClearSETUP();
				Endpoint_Write_Byte(HIDInterfaceInfo->State.UsingReportProtocol);
    1ed0:	f4 01       	movw	r30, r8
    1ed2:	80 85       	ldd	r24, Z+8	; 0x08
    1ed4:	3d c0       	rjmp	.+122    	; 0x1f50 <HID_Device_ProcessControlRequest+0x21a>
				Endpoint_ClearStatusStage();
			}

			break;
		case HID_REQ_SetProtocol:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    1ed6:	80 91 fe 01 	lds	r24, 0x01FE
    1eda:	81 32       	cpi	r24, 0x21	; 33
    1edc:	09 f0       	breq	.+2      	; 0x1ee0 <HID_Device_ProcessControlRequest+0x1aa>
    1ede:	41 c0       	rjmp	.+130    	; 0x1f62 <HID_Device_ProcessControlRequest+0x22c>
    1ee0:	80 91 e8 00 	lds	r24, 0x00E8
    1ee4:	87 7f       	andi	r24, 0xF7	; 247
    1ee6:	80 93 e8 00 	sts	0x00E8, r24
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
    1eea:	0e 94 93 03 	call	0x726	; 0x726 <Endpoint_ClearStatusStage>

				HIDInterfaceInfo->State.UsingReportProtocol = ((USB_ControlRequest.wValue & 0xFF) != 0x00);
    1eee:	90 e0       	ldi	r25, 0x00	; 0
    1ef0:	80 91 00 02 	lds	r24, 0x0200
    1ef4:	81 11       	cpse	r24, r1
    1ef6:	91 e0       	ldi	r25, 0x01	; 1
    1ef8:	f4 01       	movw	r30, r8
    1efa:	90 87       	std	Z+8, r25	; 0x08
    1efc:	32 c0       	rjmp	.+100    	; 0x1f62 <HID_Device_ProcessControlRequest+0x22c>
			}

			break;
		case HID_REQ_SetIdle:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    1efe:	80 91 fe 01 	lds	r24, 0x01FE
    1f02:	81 32       	cpi	r24, 0x21	; 33
    1f04:	71 f5       	brne	.+92     	; 0x1f62 <HID_Device_ProcessControlRequest+0x22c>
    1f06:	80 91 e8 00 	lds	r24, 0x00E8
    1f0a:	87 7f       	andi	r24, 0xF7	; 247
    1f0c:	80 93 e8 00 	sts	0x00E8, r24
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
    1f10:	0e 94 93 03 	call	0x726	; 0x726 <Endpoint_ClearStatusStage>

				HIDInterfaceInfo->State.IdleCount = ((USB_ControlRequest.wValue & 0xFF00) >> 6);
    1f14:	80 91 00 02 	lds	r24, 0x0200
    1f18:	90 91 01 02 	lds	r25, 0x0201
    1f1c:	80 70       	andi	r24, 0x00	; 0
    1f1e:	76 e0       	ldi	r23, 0x06	; 6
    1f20:	96 95       	lsr	r25
    1f22:	87 95       	ror	r24
    1f24:	7a 95       	dec	r23
    1f26:	e1 f7       	brne	.-8      	; 0x1f20 <HID_Device_ProcessControlRequest+0x1ea>
    1f28:	f4 01       	movw	r30, r8
    1f2a:	92 87       	std	Z+10, r25	; 0x0a
    1f2c:	81 87       	std	Z+9, r24	; 0x09
    1f2e:	19 c0       	rjmp	.+50     	; 0x1f62 <HID_Device_ProcessControlRequest+0x22c>
			}

			break;
		case HID_REQ_GetIdle:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    1f30:	80 91 fe 01 	lds	r24, 0x01FE
    1f34:	81 3a       	cpi	r24, 0xA1	; 161
    1f36:	a9 f4       	brne	.+42     	; 0x1f62 <HID_Device_ProcessControlRequest+0x22c>
    1f38:	80 91 e8 00 	lds	r24, 0x00E8
    1f3c:	87 7f       	andi	r24, 0xF7	; 247
    1f3e:	80 93 e8 00 	sts	0x00E8, r24
			{
				Endpoint_ClearSETUP();
				Endpoint_Write_Byte(HIDInterfaceInfo->State.IdleCount >> 2);
    1f42:	f4 01       	movw	r30, r8
    1f44:	81 85       	ldd	r24, Z+9	; 0x09
    1f46:	92 85       	ldd	r25, Z+10	; 0x0a
    1f48:	96 95       	lsr	r25
    1f4a:	87 95       	ror	r24
    1f4c:	96 95       	lsr	r25
    1f4e:	87 95       	ror	r24
			 *  \param[in] Byte  Next byte to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_Byte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_Byte(const uint8_t Byte)
			{
				UEDATX = Byte;
    1f50:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1f54:	80 91 e8 00 	lds	r24, 0x00E8
    1f58:	8e 77       	andi	r24, 0x7E	; 126
    1f5a:	80 93 e8 00 	sts	0x00E8, r24
				Endpoint_ClearIN();
				Endpoint_ClearStatusStage();
    1f5e:	0e 94 93 03 	call	0x726	; 0x726 <Endpoint_ClearStatusStage>
			}

			break;
	}
}
    1f62:	0f b6       	in	r0, 0x3f	; 63
    1f64:	f8 94       	cli
    1f66:	7e be       	out	0x3e, r7	; 62
    1f68:	0f be       	out	0x3f, r0	; 63
    1f6a:	6d be       	out	0x3d, r6	; 61
    1f6c:	0f 90       	pop	r0
    1f6e:	0f 90       	pop	r0
    1f70:	0f 90       	pop	r0
    1f72:	cf 91       	pop	r28
    1f74:	df 91       	pop	r29
    1f76:	1f 91       	pop	r17
    1f78:	0f 91       	pop	r16
    1f7a:	ff 90       	pop	r15
    1f7c:	ef 90       	pop	r14
    1f7e:	df 90       	pop	r13
    1f80:	cf 90       	pop	r12
    1f82:	bf 90       	pop	r11
    1f84:	af 90       	pop	r10
    1f86:	9f 90       	pop	r9
    1f88:	8f 90       	pop	r8
    1f8a:	7f 90       	pop	r7
    1f8c:	6f 90       	pop	r6
    1f8e:	08 95       	ret

00001f90 <DCOMP_HID_Host_NextHIDInterface>:

	return HID_ENUMERROR_NoError;
}

static uint8_t DCOMP_HID_Host_NextHIDInterface(void* const CurrentDescriptor)
{
    1f90:	fc 01       	movw	r30, r24
	USB_Descriptor_Header_t* Header = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Header_t);

	if (Header->Type == DTYPE_Interface)
    1f92:	81 81       	ldd	r24, Z+1	; 0x01
    1f94:	84 30       	cpi	r24, 0x04	; 4
    1f96:	29 f4       	brne	.+10     	; 0x1fa2 <DCOMP_HID_Host_NextHIDInterface+0x12>
	{
		USB_Descriptor_Interface_t* Interface = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Interface_t);

		if (Interface->Class == HID_CSCP_HIDClass)
    1f98:	85 81       	ldd	r24, Z+5	; 0x05
    1f9a:	83 30       	cpi	r24, 0x03	; 3
    1f9c:	11 f4       	brne	.+4      	; 0x1fa2 <DCOMP_HID_Host_NextHIDInterface+0x12>
    1f9e:	80 e0       	ldi	r24, 0x00	; 0
    1fa0:	08 95       	ret
    1fa2:	82 e0       	ldi	r24, 0x02	; 2
		  return DESCRIPTOR_SEARCH_Found;
	}

	return DESCRIPTOR_SEARCH_NotFound;
}
    1fa4:	08 95       	ret

00001fa6 <DCOMP_HID_Host_NextHID>:

static uint8_t DCOMP_HID_Host_NextHID(void* const CurrentDescriptor)
{
	USB_Descriptor_Header_t* Header = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Header_t);

	if (Header->Type == HID_DTYPE_HID)
    1fa6:	fc 01       	movw	r30, r24
    1fa8:	81 81       	ldd	r24, Z+1	; 0x01
    1faa:	81 32       	cpi	r24, 0x21	; 33
    1fac:	11 f4       	brne	.+4      	; 0x1fb2 <DCOMP_HID_Host_NextHID+0xc>
    1fae:	80 e0       	ldi	r24, 0x00	; 0
    1fb0:	08 95       	ret
	  return DESCRIPTOR_SEARCH_Found;
	else if (Header->Type == DTYPE_Interface)
    1fb2:	84 30       	cpi	r24, 0x04	; 4
    1fb4:	11 f0       	breq	.+4      	; 0x1fba <DCOMP_HID_Host_NextHID+0x14>
    1fb6:	82 e0       	ldi	r24, 0x02	; 2
    1fb8:	08 95       	ret
    1fba:	81 e0       	ldi	r24, 0x01	; 1
	  return DESCRIPTOR_SEARCH_Fail;
	else
	  return DESCRIPTOR_SEARCH_NotFound;
}
    1fbc:	08 95       	ret

00001fbe <HID_Host_IsReportReceived>:
		return USB_Host_SendControlRequest(Buffer);
	}
}

bool HID_Host_IsReportReceived(USB_ClassInfo_HID_Host_t* const HIDInterfaceInfo)
{
    1fbe:	fc 01       	movw	r30, r24
	if ((USB_HostState != HOST_STATE_Configured) || !(HIDInterfaceInfo->State.IsActive))
    1fc0:	80 91 06 02 	lds	r24, 0x0206
    1fc4:	8c 30       	cpi	r24, 0x0C	; 12
    1fc6:	a1 f4       	brne	.+40     	; 0x1ff0 <HID_Host_IsReportReceived+0x32>
    1fc8:	87 81       	ldd	r24, Z+7	; 0x07
    1fca:	88 23       	and	r24, r24
    1fcc:	89 f0       	breq	.+34     	; 0x1ff0 <HID_Host_IsReportReceived+0x32>
	  return false;

	bool ReportReceived;

	Pipe_SelectPipe(HIDInterfaceInfo->Config.DataINPipeNumber);
    1fce:	80 81       	ld	r24, Z
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
    1fd0:	80 93 a7 00 	sts	0x00A7, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    1fd4:	80 91 a9 00 	lds	r24, 0x00A9
    1fd8:	8f 7b       	andi	r24, 0xBF	; 191
    1fda:	80 93 a9 00 	sts	0x00A9, r24
			 *  \return Boolean true if the current pipe has received an IN packet, false otherwise.
			 */
			static inline bool Pipe_IsINReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsINReceived(void)
			{
				return ((UPINTX & (1 << RXINI)) ? true : false);
    1fde:	90 91 a6 00 	lds	r25, 0x00A6
    1fe2:	91 70       	andi	r25, 0x01	; 1

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    1fe4:	80 91 a9 00 	lds	r24, 0x00A9
    1fe8:	80 64       	ori	r24, 0x40	; 64
    1fea:	80 93 a9 00 	sts	0x00A9, r24
    1fee:	01 c0       	rjmp	.+2      	; 0x1ff2 <HID_Host_IsReportReceived+0x34>

	ReportReceived = Pipe_IsINReceived();

	Pipe_Freeze();

	return ReportReceived;
    1ff0:	90 e0       	ldi	r25, 0x00	; 0
}
    1ff2:	89 2f       	mov	r24, r25
    1ff4:	08 95       	ret

00001ff6 <HID_Host_SetBootProtocol>:

uint8_t HID_Host_SetBootProtocol(USB_ClassInfo_HID_Host_t* const HIDInterfaceInfo)
{
    1ff6:	cf 93       	push	r28
    1ff8:	df 93       	push	r29
    1ffa:	ec 01       	movw	r28, r24
	uint8_t ErrorCode;

	USB_ControlRequest = (USB_Request_Header_t)
    1ffc:	98 85       	ldd	r25, Y+8	; 0x08
    1ffe:	81 e2       	ldi	r24, 0x21	; 33
    2000:	80 93 fe 01 	sts	0x01FE, r24
    2004:	8b e0       	ldi	r24, 0x0B	; 11
    2006:	80 93 ff 01 	sts	0x01FF, r24
    200a:	10 92 01 02 	sts	0x0201, r1
    200e:	10 92 00 02 	sts	0x0200, r1
    2012:	90 93 02 02 	sts	0x0202, r25
    2016:	10 92 03 02 	sts	0x0203, r1
    201a:	10 92 05 02 	sts	0x0205, r1
    201e:	10 92 04 02 	sts	0x0204, r1
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
    2022:	10 92 a7 00 	sts	0x00A7, r1
			.wLength       = 0,
		};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	if (!(HIDInterfaceInfo->State.SupportsBootProtocol))
    2026:	8d 85       	ldd	r24, Y+13	; 0x0d
    2028:	88 23       	and	r24, r24
    202a:	11 f4       	brne	.+4      	; 0x2030 <HID_Host_SetBootProtocol+0x3a>
    202c:	90 e8       	ldi	r25, 0x80	; 128
    202e:	0a c0       	rjmp	.+20     	; 0x2044 <HID_Host_SetBootProtocol+0x4e>
	  return HID_ERROR_LOGICAL;

	if ((ErrorCode = USB_Host_SendControlRequest(NULL)) != HOST_SENDCONTROL_Successful)
    2030:	80 e0       	ldi	r24, 0x00	; 0
    2032:	90 e0       	ldi	r25, 0x00	; 0
    2034:	f7 db       	rcall	.-2066   	; 0x1824 <USB_Host_SendControlRequest>
    2036:	98 2f       	mov	r25, r24
    2038:	88 23       	and	r24, r24
    203a:	21 f4       	brne	.+8      	; 0x2044 <HID_Host_SetBootProtocol+0x4e>
	  return ErrorCode;

	HIDInterfaceInfo->State.LargestReportSize = 8;
    203c:	88 e0       	ldi	r24, 0x08	; 8
    203e:	8a 8b       	std	Y+18, r24	; 0x12
	HIDInterfaceInfo->State.UsingBootProtocol = true;
    2040:	81 e0       	ldi	r24, 0x01	; 1
    2042:	8f 87       	std	Y+15, r24	; 0x0f

	return HOST_SENDCONTROL_Successful;
}
    2044:	89 2f       	mov	r24, r25
    2046:	df 91       	pop	r29
    2048:	cf 91       	pop	r28
    204a:	08 95       	ret

0000204c <HID_Host_ReceiveReport>:
}
#endif

uint8_t HID_Host_ReceiveReport(USB_ClassInfo_HID_Host_t* const HIDInterfaceInfo,
                               void* Buffer)
{
    204c:	cf 93       	push	r28
    204e:	df 93       	push	r29
    2050:	dc 01       	movw	r26, r24
	if ((USB_HostState != HOST_STATE_Configured) || !(HIDInterfaceInfo->State.IsActive))
    2052:	80 91 06 02 	lds	r24, 0x0206
    2056:	8c 30       	cpi	r24, 0x0C	; 12
    2058:	09 f0       	breq	.+2      	; 0x205c <HID_Host_ReceiveReport+0x10>
    205a:	3f c0       	rjmp	.+126    	; 0x20da <HID_Host_ReceiveReport+0x8e>
    205c:	17 96       	adiw	r26, 0x07	; 7
    205e:	8c 91       	ld	r24, X
    2060:	17 97       	sbiw	r26, 0x07	; 7
    2062:	88 23       	and	r24, r24
    2064:	d1 f1       	breq	.+116    	; 0x20da <HID_Host_ReceiveReport+0x8e>
	  return PIPE_READYWAIT_DeviceDisconnected;

	uint8_t ErrorCode;

	Pipe_SelectPipe(HIDInterfaceInfo->Config.DataINPipeNumber);
    2066:	8c 91       	ld	r24, X
    2068:	80 93 a7 00 	sts	0x00A7, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    206c:	80 91 a9 00 	lds	r24, 0x00A9
    2070:	8f 7b       	andi	r24, 0xBF	; 191
    2072:	80 93 a9 00 	sts	0x00A9, r24
	Pipe_Unfreeze();

	uint16_t ReportSize;
	uint8_t* BufferPos = Buffer;
    2076:	eb 01       	movw	r28, r22

#if !defined(HID_HOST_BOOT_PROTOCOL_ONLY)
	if (!(HIDInterfaceInfo->State.UsingBootProtocol))
    2078:	1f 96       	adiw	r26, 0x0f	; 15
    207a:	8c 91       	ld	r24, X
    207c:	1f 97       	sbiw	r26, 0x0f	; 15
    207e:	88 23       	and	r24, r24
    2080:	b1 f4       	brne	.+44     	; 0x20ae <HID_Host_ReceiveReport+0x62>
	{
		uint8_t ReportID = 0;

		if (HIDInterfaceInfo->Config.HIDParserData->UsingReportIDs)
    2082:	15 96       	adiw	r26, 0x05	; 5
    2084:	ed 91       	ld	r30, X+
    2086:	fc 91       	ld	r31, X
    2088:	16 97       	sbiw	r26, 0x06	; 6
    208a:	e8 52       	subi	r30, 0x28	; 40
    208c:	fc 4f       	sbci	r31, 0xFC	; 252
    208e:	80 81       	ld	r24, Z
    2090:	88 23       	and	r24, r24
    2092:	11 f4       	brne	.+4      	; 0x2098 <HID_Host_ReceiveReport+0x4c>
    2094:	60 e0       	ldi	r22, 0x00	; 0
    2096:	03 c0       	rjmp	.+6      	; 0x209e <HID_Host_ReceiveReport+0x52>
			 *  \return Next byte in the currently selected pipe's FIFO buffer.
			 */
			static inline uint8_t Pipe_Read_Byte(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_Read_Byte(void)
			{
				return UPDATX;
    2098:	60 91 af 00 	lds	r22, 0x00AF
		{
			ReportID = Pipe_Read_Byte();
			*(BufferPos++) = ReportID;
    209c:	69 93       	st	Y+, r22
		}

		ReportSize = USB_GetHIDReportSize(HIDInterfaceInfo->Config.HIDParserData, ReportID, HID_REPORT_ITEM_In);
    209e:	15 96       	adiw	r26, 0x05	; 5
    20a0:	8d 91       	ld	r24, X+
    20a2:	9c 91       	ld	r25, X
    20a4:	16 97       	sbiw	r26, 0x06	; 6
    20a6:	40 e0       	ldi	r20, 0x00	; 0
    20a8:	27 dd       	rcall	.-1458   	; 0x1af8 <USB_GetHIDReportSize>
    20aa:	bc 01       	movw	r22, r24
    20ac:	04 c0       	rjmp	.+8      	; 0x20b6 <HID_Host_ReceiveReport+0x6a>
			 *  \return Total number of bytes in the currently selected Pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
    20ae:	60 91 f6 00 	lds	r22, 0x00F6
    20b2:	70 91 f7 00 	lds	r23, 0x00F7
#endif
	{
		ReportSize = Pipe_BytesInPipe();
	}

	if ((ErrorCode = Pipe_Read_Stream_LE(BufferPos, ReportSize, NO_STREAM_CALLBACK)) != PIPE_RWSTREAM_NoError)
    20b6:	ce 01       	movw	r24, r28
    20b8:	40 e0       	ldi	r20, 0x00	; 0
    20ba:	50 e0       	ldi	r21, 0x00	; 0
    20bc:	b7 dc       	rcall	.-1682   	; 0x1a2c <Pipe_Read_Stream_LE>
    20be:	98 2f       	mov	r25, r24
    20c0:	88 23       	and	r24, r24
    20c2:	61 f4       	brne	.+24     	; 0x20dc <HID_Host_ReceiveReport+0x90>
			 *  \ingroup Group_PipePacketManagement
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
    20c4:	80 91 a6 00 	lds	r24, 0x00A6
    20c8:	8e 77       	andi	r24, 0x7E	; 126
    20ca:	80 93 a6 00 	sts	0x00A6, r24

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    20ce:	80 91 a9 00 	lds	r24, 0x00A9
    20d2:	80 64       	ori	r24, 0x40	; 64
    20d4:	80 93 a9 00 	sts	0x00A9, r24
    20d8:	01 c0       	rjmp	.+2      	; 0x20dc <HID_Host_ReceiveReport+0x90>
	  return ErrorCode;

	Pipe_ClearIN();
	Pipe_Freeze();

	return PIPE_RWSTREAM_NoError;
    20da:	92 e0       	ldi	r25, 0x02	; 2
}
    20dc:	89 2f       	mov	r24, r25
    20de:	df 91       	pop	r29
    20e0:	cf 91       	pop	r28
    20e2:	08 95       	ret

000020e4 <HID_Host_ConfigurePipes>:
#include "HID.h"

uint8_t HID_Host_ConfigurePipes(USB_ClassInfo_HID_Host_t* const HIDInterfaceInfo,
                                uint16_t ConfigDescriptorSize,
                                void* ConfigDescriptorData)
{
    20e4:	3f 92       	push	r3
    20e6:	4f 92       	push	r4
    20e8:	5f 92       	push	r5
    20ea:	6f 92       	push	r6
    20ec:	7f 92       	push	r7
    20ee:	8f 92       	push	r8
    20f0:	9f 92       	push	r9
    20f2:	af 92       	push	r10
    20f4:	bf 92       	push	r11
    20f6:	cf 92       	push	r12
    20f8:	df 92       	push	r13
    20fa:	ef 92       	push	r14
    20fc:	ff 92       	push	r15
    20fe:	0f 93       	push	r16
    2100:	1f 93       	push	r17
    2102:	df 93       	push	r29
    2104:	cf 93       	push	r28
    2106:	00 d0       	rcall	.+0      	; 0x2108 <__stack+0x9>
    2108:	00 d0       	rcall	.+0      	; 0x210a <__stack+0xb>
    210a:	cd b7       	in	r28, 0x3d	; 61
    210c:	de b7       	in	r29, 0x3e	; 62
    210e:	6c 01       	movw	r12, r24
    2110:	7a 83       	std	Y+2, r23	; 0x02
    2112:	69 83       	std	Y+1, r22	; 0x01
    2114:	5c 83       	std	Y+4, r21	; 0x04
    2116:	4b 83       	std	Y+3, r20	; 0x03
	USB_Descriptor_Endpoint_t*  DataINEndpoint  = NULL;
	USB_Descriptor_Endpoint_t*  DataOUTEndpoint = NULL;
	USB_Descriptor_Interface_t* HIDInterface    = NULL;
	USB_HID_Descriptor_HID_t*   HIDDescriptor   = NULL;

	memset(&HIDInterfaceInfo->State, 0x00, sizeof(HIDInterfaceInfo->State));
    2118:	07 96       	adiw	r24, 0x07	; 7
    211a:	fc 01       	movw	r30, r24
    211c:	8c e0       	ldi	r24, 0x0C	; 12
    211e:	df 01       	movw	r26, r30
    2120:	1d 92       	st	X+, r1
    2122:	8a 95       	dec	r24
    2124:	e9 f7       	brne	.-6      	; 0x2120 <__stack+0x21>

	if (DESCRIPTOR_TYPE(ConfigDescriptorData) != DTYPE_Configuration)
    2126:	eb 81       	ldd	r30, Y+3	; 0x03
    2128:	fc 81       	ldd	r31, Y+4	; 0x04
    212a:	81 81       	ldd	r24, Z+1	; 0x01
    212c:	82 30       	cpi	r24, 0x02	; 2
    212e:	11 f0       	breq	.+4      	; 0x2134 <__stack+0x35>
    2130:	81 e0       	ldi	r24, 0x01	; 1
    2132:	bd c0       	rjmp	.+378    	; 0x22ae <__stack+0x1af>
    2134:	88 24       	eor	r8, r8
    2136:	99 24       	eor	r9, r9
    2138:	aa 24       	eor	r10, r10
    213a:	bb 24       	eor	r11, r11
    213c:	66 24       	eor	r6, r6
    213e:	77 24       	eor	r7, r7
    2140:	44 24       	eor	r4, r4
    2142:	55 24       	eor	r5, r5
	  return HID_ENUMERROR_InvalidConfigDescriptor;

	while (!(DataINEndpoint) || !(DataOUTEndpoint))
	{
		if (!(HIDInterface) ||
    2144:	93 e0       	ldi	r25, 0x03	; 3
    2146:	e9 2e       	mov	r14, r25
    2148:	f1 2c       	mov	r15, r1
    214a:	ec 0e       	add	r14, r28
    214c:	fd 1e       	adc	r15, r29
    214e:	8e 01       	movw	r16, r28
    2150:	0f 5f       	subi	r16, 0xFF	; 255
    2152:	1f 4f       	sbci	r17, 0xFF	; 255
    2154:	61 14       	cp	r6, r1
    2156:	71 04       	cpc	r7, r1
    2158:	41 f0       	breq	.+16     	; 0x216a <__stack+0x6b>
    215a:	c8 01       	movw	r24, r16
    215c:	b7 01       	movw	r22, r14
    215e:	4d e6       	ldi	r20, 0x6D	; 109
    2160:	51 e1       	ldi	r21, 0x11	; 17
    2162:	0e 94 a2 08 	call	0x1144	; 0x1144 <USB_GetNextDescriptorComp>
    2166:	88 23       	and	r24, r24
    2168:	31 f1       	breq	.+76     	; 0x21b6 <__stack+0xb7>
		    USB_GetNextDescriptorComp(&ConfigDescriptorSize, &ConfigDescriptorData,
		                              DCOMP_HID_Host_NextHIDInterfaceEndpoint) != DESCRIPTOR_SEARCH_COMP_Found)
		{
			if (DataINEndpoint || DataOUTEndpoint)
    216a:	81 14       	cp	r8, r1
    216c:	91 04       	cpc	r9, r1
    216e:	89 f5       	brne	.+98     	; 0x21d2 <__stack+0xd3>
    2170:	a1 14       	cp	r10, r1
    2172:	b1 04       	cpc	r11, r1
    2174:	71 f5       	brne	.+92     	; 0x21d2 <__stack+0xd3>
			  break;

			do
			{
				if (USB_GetNextDescriptorComp(&ConfigDescriptorSize, &ConfigDescriptorData,
    2176:	c8 01       	movw	r24, r16
    2178:	b7 01       	movw	r22, r14
    217a:	48 ec       	ldi	r20, 0xC8	; 200
    217c:	5f e0       	ldi	r21, 0x0F	; 15
    217e:	0e 94 a2 08 	call	0x1144	; 0x1144 <USB_GetNextDescriptorComp>
    2182:	88 23       	and	r24, r24
    2184:	09 f0       	breq	.+2      	; 0x2188 <__stack+0x89>
    2186:	92 c0       	rjmp	.+292    	; 0x22ac <__stack+0x1ad>
				                              DCOMP_HID_Host_NextHIDInterface) != DESCRIPTOR_SEARCH_COMP_Found)
				{
					return HID_ENUMERROR_NoCompatibleInterfaceFound;
				}

				HIDInterface = DESCRIPTOR_PCAST(ConfigDescriptorData, USB_Descriptor_Interface_t);
    2188:	6b 80       	ldd	r6, Y+3	; 0x03
    218a:	7c 80       	ldd	r7, Y+4	; 0x04
			} while (HIDInterfaceInfo->Config.HIDInterfaceProtocol &&
					 (HIDInterface->Protocol != HIDInterfaceInfo->Config.HIDInterfaceProtocol));
    218c:	f6 01       	movw	r30, r12
    218e:	94 81       	ldd	r25, Z+4	; 0x04
    2190:	99 23       	and	r25, r25
    2192:	29 f0       	breq	.+10     	; 0x219e <__stack+0x9f>
    2194:	d3 01       	movw	r26, r6
    2196:	17 96       	adiw	r26, 0x07	; 7
    2198:	8c 91       	ld	r24, X
    219a:	89 17       	cp	r24, r25
    219c:	61 f7       	brne	.-40     	; 0x2176 <__stack+0x77>

			if (USB_GetNextDescriptorComp(&ConfigDescriptorSize, &ConfigDescriptorData,
    219e:	c8 01       	movw	r24, r16
    21a0:	b7 01       	movw	r22, r14
    21a2:	43 ed       	ldi	r20, 0xD3	; 211
    21a4:	5f e0       	ldi	r21, 0x0F	; 15
    21a6:	0e 94 a2 08 	call	0x1144	; 0x1144 <USB_GetNextDescriptorComp>
    21aa:	88 23       	and	r24, r24
    21ac:	09 f0       	breq	.+2      	; 0x21b0 <__stack+0xb1>
    21ae:	7e c0       	rjmp	.+252    	; 0x22ac <__stack+0x1ad>
			                              DCOMP_HID_Host_NextHID) != DESCRIPTOR_SEARCH_COMP_Found)
			{
				return HID_ENUMERROR_NoCompatibleInterfaceFound;
			}

			HIDDescriptor = DESCRIPTOR_PCAST(ConfigDescriptorData, USB_HID_Descriptor_HID_t);
    21b0:	4b 80       	ldd	r4, Y+3	; 0x03
    21b2:	5c 80       	ldd	r5, Y+4	; 0x04
    21b4:	cf cf       	rjmp	.-98     	; 0x2154 <__stack+0x55>
			DataOUTEndpoint = NULL;

			continue;
		}

		USB_Descriptor_Endpoint_t* EndpointData = DESCRIPTOR_PCAST(ConfigDescriptorData, USB_Descriptor_Endpoint_t);
    21b6:	eb 81       	ldd	r30, Y+3	; 0x03
    21b8:	fc 81       	ldd	r31, Y+4	; 0x04

		if (EndpointData->EndpointAddress & ENDPOINT_DESCRIPTOR_DIR_IN)
    21ba:	82 81       	ldd	r24, Z+2	; 0x02
    21bc:	87 fd       	sbrc	r24, 7
    21be:	02 c0       	rjmp	.+4      	; 0x21c4 <__stack+0xc5>
    21c0:	5f 01       	movw	r10, r30
    21c2:	01 c0       	rjmp	.+2      	; 0x21c6 <__stack+0xc7>
    21c4:	4f 01       	movw	r8, r30
	memset(&HIDInterfaceInfo->State, 0x00, sizeof(HIDInterfaceInfo->State));

	if (DESCRIPTOR_TYPE(ConfigDescriptorData) != DTYPE_Configuration)
	  return HID_ENUMERROR_InvalidConfigDescriptor;

	while (!(DataINEndpoint) || !(DataOUTEndpoint))
    21c6:	81 14       	cp	r8, r1
    21c8:	91 04       	cpc	r9, r1
    21ca:	21 f2       	breq	.-120    	; 0x2154 <__stack+0x55>
    21cc:	a1 14       	cp	r10, r1
    21ce:	b1 04       	cpc	r11, r1
    21d0:	09 f2       	breq	.-126    	; 0x2154 <__stack+0x55>
    21d2:	ff 24       	eor	r15, r15
    21d4:	f3 94       	inc	r15
			                   DataOUTEndpoint->EndpointAddress, DataOUTEndpoint->EndpointSize,
			                   HIDInterfaceInfo->Config.DataOUTPipeDoubleBank ? PIPE_BANK_DOUBLE : PIPE_BANK_SINGLE);
			Pipe_SetInterruptPeriod(DataOUTEndpoint->PollingIntervalMS);

			HIDInterfaceInfo->State.DataOUTPipeSize = DataOUTEndpoint->EndpointSize;
			HIDInterfaceInfo->State.DeviceUsesOUTPipe = true;
    21d6:	33 24       	eor	r3, r3
    21d8:	33 94       	inc	r3
		  DataOUTEndpoint = EndpointData;
	}

	for (uint8_t PipeNum = 1; PipeNum < PIPE_TOTAL_PIPES; PipeNum++)
	{
		if (PipeNum == HIDInterfaceInfo->Config.DataINPipeNumber)
    21da:	f6 01       	movw	r30, r12
    21dc:	80 81       	ld	r24, Z
    21de:	f8 16       	cp	r15, r24
    21e0:	01 f5       	brne	.+64     	; 0x2222 <__stack+0x123>
		{
			Pipe_ConfigurePipe(PipeNum, EP_TYPE_INTERRUPT, PIPE_TOKEN_IN,
    21e2:	d4 01       	movw	r26, r8
    21e4:	12 96       	adiw	r26, 0x02	; 2
    21e6:	2c 91       	ld	r18, X
    21e8:	12 97       	sbiw	r26, 0x02	; 2
    21ea:	14 96       	adiw	r26, 0x04	; 4
    21ec:	0d 91       	ld	r16, X+
    21ee:	1c 91       	ld	r17, X
    21f0:	15 97       	sbiw	r26, 0x05	; 5
    21f2:	81 81       	ldd	r24, Z+1	; 0x01
    21f4:	88 23       	and	r24, r24
    21f6:	11 f4       	brne	.+4      	; 0x21fc <__stack+0xfd>
    21f8:	90 e0       	ldi	r25, 0x00	; 0
    21fa:	01 c0       	rjmp	.+2      	; 0x21fe <__stack+0xff>
    21fc:	94 e0       	ldi	r25, 0x04	; 4
    21fe:	8f 2d       	mov	r24, r15
    2200:	63 e0       	ldi	r22, 0x03	; 3
    2202:	40 e1       	ldi	r20, 0x10	; 16
    2204:	e9 2e       	mov	r14, r25
    2206:	0e 94 c7 05 	call	0xb8e	; 0xb8e <Pipe_ConfigurePipe>
			                   DataINEndpoint->EndpointAddress, DataINEndpoint->EndpointSize,
			                   HIDInterfaceInfo->Config.DataINPipeDoubleBank ? PIPE_BANK_DOUBLE : PIPE_BANK_SINGLE);
			Pipe_SetInterruptPeriod(DataINEndpoint->PollingIntervalMS);
    220a:	f4 01       	movw	r30, r8
    220c:	86 81       	ldd	r24, Z+6	; 0x06
			 *  \param[in] Milliseconds  Number of milliseconds between each pipe poll.
			 */
			static inline void Pipe_SetInterruptPeriod(const uint8_t Milliseconds) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetInterruptPeriod(const uint8_t Milliseconds)
			{
				UPCFG2X = Milliseconds;
    220e:	80 93 ad 00 	sts	0x00AD, r24

			HIDInterfaceInfo->State.DataINPipeSize = DataINEndpoint->EndpointSize;
    2212:	84 81       	ldd	r24, Z+4	; 0x04
    2214:	95 81       	ldd	r25, Z+5	; 0x05
    2216:	d6 01       	movw	r26, r12
    2218:	1a 96       	adiw	r26, 0x0a	; 10
    221a:	9c 93       	st	X, r25
    221c:	8e 93       	st	-X, r24
    221e:	19 97       	sbiw	r26, 0x09	; 9
    2220:	25 c0       	rjmp	.+74     	; 0x226c <__stack+0x16d>
		}
		else if (PipeNum == HIDInterfaceInfo->Config.DataOUTPipeNumber)
    2222:	f6 01       	movw	r30, r12
    2224:	82 81       	ldd	r24, Z+2	; 0x02
    2226:	f8 16       	cp	r15, r24
    2228:	09 f5       	brne	.+66     	; 0x226c <__stack+0x16d>
		{
			Pipe_ConfigurePipe(PipeNum, EP_TYPE_INTERRUPT, PIPE_TOKEN_OUT,
    222a:	d5 01       	movw	r26, r10
    222c:	12 96       	adiw	r26, 0x02	; 2
    222e:	2c 91       	ld	r18, X
    2230:	12 97       	sbiw	r26, 0x02	; 2
    2232:	14 96       	adiw	r26, 0x04	; 4
    2234:	0d 91       	ld	r16, X+
    2236:	1c 91       	ld	r17, X
    2238:	15 97       	sbiw	r26, 0x05	; 5
    223a:	83 81       	ldd	r24, Z+3	; 0x03
    223c:	88 23       	and	r24, r24
    223e:	11 f4       	brne	.+4      	; 0x2244 <__stack+0x145>
    2240:	90 e0       	ldi	r25, 0x00	; 0
    2242:	01 c0       	rjmp	.+2      	; 0x2246 <__stack+0x147>
    2244:	94 e0       	ldi	r25, 0x04	; 4
    2246:	8f 2d       	mov	r24, r15
    2248:	63 e0       	ldi	r22, 0x03	; 3
    224a:	40 e2       	ldi	r20, 0x20	; 32
    224c:	e9 2e       	mov	r14, r25
    224e:	0e 94 c7 05 	call	0xb8e	; 0xb8e <Pipe_ConfigurePipe>
			                   DataOUTEndpoint->EndpointAddress, DataOUTEndpoint->EndpointSize,
			                   HIDInterfaceInfo->Config.DataOUTPipeDoubleBank ? PIPE_BANK_DOUBLE : PIPE_BANK_SINGLE);
			Pipe_SetInterruptPeriod(DataOUTEndpoint->PollingIntervalMS);
    2252:	f5 01       	movw	r30, r10
    2254:	86 81       	ldd	r24, Z+6	; 0x06
    2256:	80 93 ad 00 	sts	0x00AD, r24

			HIDInterfaceInfo->State.DataOUTPipeSize = DataOUTEndpoint->EndpointSize;
    225a:	84 81       	ldd	r24, Z+4	; 0x04
    225c:	95 81       	ldd	r25, Z+5	; 0x05
    225e:	d6 01       	movw	r26, r12
    2260:	1c 96       	adiw	r26, 0x0c	; 12
    2262:	9c 93       	st	X, r25
    2264:	8e 93       	st	-X, r24
    2266:	1b 97       	sbiw	r26, 0x0b	; 11
			HIDInterfaceInfo->State.DeviceUsesOUTPipe = true;
    2268:	1e 96       	adiw	r26, 0x0e	; 14
    226a:	3c 92       	st	X, r3
		  DataINEndpoint = EndpointData;
		else
		  DataOUTEndpoint = EndpointData;
	}

	for (uint8_t PipeNum = 1; PipeNum < PIPE_TOTAL_PIPES; PipeNum++)
    226c:	f3 94       	inc	r15
    226e:	b7 e0       	ldi	r27, 0x07	; 7
    2270:	fb 16       	cp	r15, r27
    2272:	09 f0       	breq	.+2      	; 0x2276 <__stack+0x177>
    2274:	b2 cf       	rjmp	.-156    	; 0x21da <__stack+0xdb>
			HIDInterfaceInfo->State.DataOUTPipeSize = DataOUTEndpoint->EndpointSize;
			HIDInterfaceInfo->State.DeviceUsesOUTPipe = true;
		}
	}

	HIDInterfaceInfo->State.InterfaceNumber      = HIDInterface->InterfaceNumber;
    2276:	f3 01       	movw	r30, r6
    2278:	82 81       	ldd	r24, Z+2	; 0x02
    227a:	d6 01       	movw	r26, r12
    227c:	18 96       	adiw	r26, 0x08	; 8
    227e:	8c 93       	st	X, r24
    2280:	18 97       	sbiw	r26, 0x08	; 8
	HIDInterfaceInfo->State.HIDReportSize        = HIDDescriptor->HIDReportLength;
    2282:	f2 01       	movw	r30, r4
    2284:	87 81       	ldd	r24, Z+7	; 0x07
    2286:	90 85       	ldd	r25, Z+8	; 0x08
    2288:	51 96       	adiw	r26, 0x11	; 17
    228a:	9c 93       	st	X, r25
    228c:	8e 93       	st	-X, r24
    228e:	50 97       	sbiw	r26, 0x10	; 16
	HIDInterfaceInfo->State.SupportsBootProtocol = (HIDInterface->SubClass != HID_CSCP_NonBootProtocol);
    2290:	90 e0       	ldi	r25, 0x00	; 0
    2292:	d3 01       	movw	r26, r6
    2294:	16 96       	adiw	r26, 0x06	; 6
    2296:	8c 91       	ld	r24, X
    2298:	81 11       	cpse	r24, r1
    229a:	91 e0       	ldi	r25, 0x01	; 1
    229c:	f6 01       	movw	r30, r12
    229e:	95 87       	std	Z+13, r25	; 0x0d
	HIDInterfaceInfo->State.LargestReportSize    = 8;
    22a0:	88 e0       	ldi	r24, 0x08	; 8
    22a2:	82 8b       	std	Z+18, r24	; 0x12
	HIDInterfaceInfo->State.IsActive = true;
    22a4:	81 e0       	ldi	r24, 0x01	; 1
    22a6:	87 83       	std	Z+7, r24	; 0x07
    22a8:	80 e0       	ldi	r24, 0x00	; 0
    22aa:	01 c0       	rjmp	.+2      	; 0x22ae <__stack+0x1af>

	return HID_ENUMERROR_NoError;
    22ac:	82 e0       	ldi	r24, 0x02	; 2
}
    22ae:	0f 90       	pop	r0
    22b0:	0f 90       	pop	r0
    22b2:	0f 90       	pop	r0
    22b4:	0f 90       	pop	r0
    22b6:	cf 91       	pop	r28
    22b8:	df 91       	pop	r29
    22ba:	1f 91       	pop	r17
    22bc:	0f 91       	pop	r16
    22be:	ff 90       	pop	r15
    22c0:	ef 90       	pop	r14
    22c2:	df 90       	pop	r13
    22c4:	cf 90       	pop	r12
    22c6:	bf 90       	pop	r11
    22c8:	af 90       	pop	r10
    22ca:	9f 90       	pop	r9
    22cc:	8f 90       	pop	r8
    22ce:	7f 90       	pop	r7
    22d0:	6f 90       	pop	r6
    22d2:	5f 90       	pop	r5
    22d4:	4f 90       	pop	r4
    22d6:	3f 90       	pop	r3
    22d8:	08 95       	ret

000022da <DCOMP_HID_Host_NextHIDInterfaceEndpoint>:
	else
	  return DESCRIPTOR_SEARCH_NotFound;
}

static uint8_t DCOMP_HID_Host_NextHIDInterfaceEndpoint(void* const CurrentDescriptor)
{
    22da:	fc 01       	movw	r30, r24
	USB_Descriptor_Header_t* Header = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Header_t);

	if (Header->Type == DTYPE_Endpoint)
    22dc:	81 81       	ldd	r24, Z+1	; 0x01
    22de:	85 30       	cpi	r24, 0x05	; 5
    22e0:	31 f4       	brne	.+12     	; 0x22ee <DCOMP_HID_Host_NextHIDInterfaceEndpoint+0x14>
	{
		USB_Descriptor_Endpoint_t* Endpoint = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Endpoint_t);

		if (!(Pipe_IsEndpointBound(Endpoint->EndpointAddress)))
    22e2:	82 81       	ldd	r24, Z+2	; 0x02
    22e4:	0e 94 11 06 	call	0xc22	; 0xc22 <Pipe_IsEndpointBound>
    22e8:	88 23       	and	r24, r24
    22ea:	29 f4       	brne	.+10     	; 0x22f6 <DCOMP_HID_Host_NextHIDInterfaceEndpoint+0x1c>
    22ec:	08 95       	ret
		  return DESCRIPTOR_SEARCH_Found;
	}
	else if (Header->Type == DTYPE_Interface)
    22ee:	84 30       	cpi	r24, 0x04	; 4
    22f0:	11 f4       	brne	.+4      	; 0x22f6 <DCOMP_HID_Host_NextHIDInterfaceEndpoint+0x1c>
    22f2:	81 e0       	ldi	r24, 0x01	; 1
    22f4:	08 95       	ret
    22f6:	82 e0       	ldi	r24, 0x02	; 2
	{
		return DESCRIPTOR_SEARCH_Fail;
	}

	return DESCRIPTOR_SEARCH_NotFound;
}
    22f8:	08 95       	ret

000022fa <SerialStream_TxByte>:

FILE USARTStream = FDEV_SETUP_STREAM(SerialStream_TxByte, SerialStream_RxByte, _FDEV_SETUP_RW);

static int SerialStream_TxByte(char DataByte,
                               FILE *Stream)
{
    22fa:	98 2f       	mov	r25, r24
			 *  \param[in] DataByte  Byte to transmit through the USART.
			 */
			static inline void Serial_TxByte(const char DataByte) ATTR_ALWAYS_INLINE;
			static inline void Serial_TxByte(const char DataByte)
			{
				while (!(UCSR1A & (1 << UDRE1)));
    22fc:	80 91 c8 00 	lds	r24, 0x00C8
    2300:	85 ff       	sbrs	r24, 5
    2302:	fc cf       	rjmp	.-8      	; 0x22fc <SerialStream_TxByte+0x2>
				UDR1 = DataByte;
    2304:	90 93 ce 00 	sts	0x00CE, r25
	(void)Stream;

	Serial_TxByte(DataByte);
	return 0;
}
    2308:	80 e0       	ldi	r24, 0x00	; 0
    230a:	90 e0       	ldi	r25, 0x00	; 0
    230c:	08 95       	ret

0000230e <SerialStream_RxByte>:
			 *  \return Boolean true if a character has been received, false otherwise.
			 */
			static inline bool Serial_IsCharReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Serial_IsCharReceived(void)
			{
				return ((UCSR1A & (1 << RXC1)) ? true : false);
    230e:	80 91 c8 00 	lds	r24, 0x00C8

static int SerialStream_RxByte(FILE *Stream)
{
	(void)Stream;

	if (!(Serial_IsCharReceived()))
    2312:	87 fd       	sbrc	r24, 7
    2314:	03 c0       	rjmp	.+6      	; 0x231c <SerialStream_RxByte+0xe>
    2316:	2e ef       	ldi	r18, 0xFE	; 254
    2318:	3f ef       	ldi	r19, 0xFF	; 255
    231a:	08 c0       	rjmp	.+16     	; 0x232c <SerialStream_RxByte+0x1e>
			 *  \return Byte received from the USART.
			 */
			static inline char Serial_RxByte(void) ATTR_ALWAYS_INLINE;
			static inline char Serial_RxByte(void)
			{
				while (!(UCSR1A & (1 << RXC1)));
    231c:	80 91 c8 00 	lds	r24, 0x00C8
    2320:	87 ff       	sbrs	r24, 7
    2322:	fc cf       	rjmp	.-8      	; 0x231c <SerialStream_RxByte+0xe>
				return UDR1;
    2324:	80 91 ce 00 	lds	r24, 0x00CE
	  return _FDEV_EOF;

	return Serial_RxByte();
    2328:	28 2f       	mov	r18, r24
    232a:	30 e0       	ldi	r19, 0x00	; 0
}
    232c:	c9 01       	movw	r24, r18
    232e:	08 95       	ret

00002330 <memcmp>:
    2330:	fb 01       	movw	r30, r22
    2332:	dc 01       	movw	r26, r24
    2334:	04 c0       	rjmp	.+8      	; 0x233e <memcmp+0xe>
    2336:	8d 91       	ld	r24, X+
    2338:	01 90       	ld	r0, Z+
    233a:	80 19       	sub	r24, r0
    233c:	21 f4       	brne	.+8      	; 0x2346 <memcmp+0x16>
    233e:	41 50       	subi	r20, 0x01	; 1
    2340:	50 40       	sbci	r21, 0x00	; 0
    2342:	c8 f7       	brcc	.-14     	; 0x2336 <memcmp+0x6>
    2344:	88 1b       	sub	r24, r24
    2346:	99 0b       	sbc	r25, r25
    2348:	08 95       	ret

0000234a <memcpy>:
    234a:	fb 01       	movw	r30, r22
    234c:	dc 01       	movw	r26, r24
    234e:	02 c0       	rjmp	.+4      	; 0x2354 <memcpy+0xa>
    2350:	01 90       	ld	r0, Z+
    2352:	0d 92       	st	X+, r0
    2354:	41 50       	subi	r20, 0x01	; 1
    2356:	50 40       	sbci	r21, 0x00	; 0
    2358:	d8 f7       	brcc	.-10     	; 0x2350 <memcpy+0x6>
    235a:	08 95       	ret

0000235c <memset>:
    235c:	dc 01       	movw	r26, r24
    235e:	01 c0       	rjmp	.+2      	; 0x2362 <memset+0x6>
    2360:	6d 93       	st	X+, r22
    2362:	41 50       	subi	r20, 0x01	; 1
    2364:	50 40       	sbci	r21, 0x00	; 0
    2366:	e0 f7       	brcc	.-8      	; 0x2360 <memset+0x4>
    2368:	08 95       	ret

0000236a <printf_P>:
    236a:	df 93       	push	r29
    236c:	cf 93       	push	r28
    236e:	cd b7       	in	r28, 0x3d	; 61
    2370:	de b7       	in	r29, 0x3e	; 62
    2372:	fe 01       	movw	r30, r28
    2374:	35 96       	adiw	r30, 0x05	; 5
    2376:	61 91       	ld	r22, Z+
    2378:	71 91       	ld	r23, Z+
    237a:	a0 91 09 02 	lds	r26, 0x0209
    237e:	b0 91 0a 02 	lds	r27, 0x020A
    2382:	13 96       	adiw	r26, 0x03	; 3
    2384:	8c 91       	ld	r24, X
    2386:	13 97       	sbiw	r26, 0x03	; 3
    2388:	88 60       	ori	r24, 0x08	; 8
    238a:	13 96       	adiw	r26, 0x03	; 3
    238c:	8c 93       	st	X, r24
    238e:	80 91 09 02 	lds	r24, 0x0209
    2392:	90 91 0a 02 	lds	r25, 0x020A
    2396:	af 01       	movw	r20, r30
    2398:	74 d0       	rcall	.+232    	; 0x2482 <vfprintf>
    239a:	e0 91 09 02 	lds	r30, 0x0209
    239e:	f0 91 0a 02 	lds	r31, 0x020A
    23a2:	23 81       	ldd	r18, Z+3	; 0x03
    23a4:	27 7f       	andi	r18, 0xF7	; 247
    23a6:	23 83       	std	Z+3, r18	; 0x03
    23a8:	cf 91       	pop	r28
    23aa:	df 91       	pop	r29
    23ac:	08 95       	ret

000023ae <puts>:
    23ae:	0f 93       	push	r16
    23b0:	1f 93       	push	r17
    23b2:	cf 93       	push	r28
    23b4:	df 93       	push	r29
    23b6:	8c 01       	movw	r16, r24
    23b8:	e0 91 09 02 	lds	r30, 0x0209
    23bc:	f0 91 0a 02 	lds	r31, 0x020A
    23c0:	83 81       	ldd	r24, Z+3	; 0x03
    23c2:	81 ff       	sbrs	r24, 1
    23c4:	21 c0       	rjmp	.+66     	; 0x2408 <puts+0x5a>
    23c6:	c0 e0       	ldi	r28, 0x00	; 0
    23c8:	d0 e0       	ldi	r29, 0x00	; 0
    23ca:	0d c0       	rjmp	.+26     	; 0x23e6 <puts+0x38>
    23cc:	e0 91 09 02 	lds	r30, 0x0209
    23d0:	f0 91 0a 02 	lds	r31, 0x020A
    23d4:	20 85       	ldd	r18, Z+8	; 0x08
    23d6:	31 85       	ldd	r19, Z+9	; 0x09
    23d8:	bf 01       	movw	r22, r30
    23da:	f9 01       	movw	r30, r18
    23dc:	09 95       	icall
    23de:	89 2b       	or	r24, r25
    23e0:	11 f0       	breq	.+4      	; 0x23e6 <puts+0x38>
    23e2:	cf ef       	ldi	r28, 0xFF	; 255
    23e4:	df ef       	ldi	r29, 0xFF	; 255
    23e6:	f8 01       	movw	r30, r16
    23e8:	81 91       	ld	r24, Z+
    23ea:	8f 01       	movw	r16, r30
    23ec:	88 23       	and	r24, r24
    23ee:	71 f7       	brne	.-36     	; 0x23cc <puts+0x1e>
    23f0:	e0 91 09 02 	lds	r30, 0x0209
    23f4:	f0 91 0a 02 	lds	r31, 0x020A
    23f8:	20 85       	ldd	r18, Z+8	; 0x08
    23fa:	31 85       	ldd	r19, Z+9	; 0x09
    23fc:	8a e0       	ldi	r24, 0x0A	; 10
    23fe:	bf 01       	movw	r22, r30
    2400:	f9 01       	movw	r30, r18
    2402:	09 95       	icall
    2404:	89 2b       	or	r24, r25
    2406:	11 f0       	breq	.+4      	; 0x240c <puts+0x5e>
    2408:	cf ef       	ldi	r28, 0xFF	; 255
    240a:	df ef       	ldi	r29, 0xFF	; 255
    240c:	ce 01       	movw	r24, r28
    240e:	df 91       	pop	r29
    2410:	cf 91       	pop	r28
    2412:	1f 91       	pop	r17
    2414:	0f 91       	pop	r16
    2416:	08 95       	ret

00002418 <puts_P>:
    2418:	0f 93       	push	r16
    241a:	1f 93       	push	r17
    241c:	cf 93       	push	r28
    241e:	df 93       	push	r29
    2420:	ec 01       	movw	r28, r24
    2422:	e0 91 09 02 	lds	r30, 0x0209
    2426:	f0 91 0a 02 	lds	r31, 0x020A
    242a:	83 81       	ldd	r24, Z+3	; 0x03
    242c:	81 ff       	sbrs	r24, 1
    242e:	21 c0       	rjmp	.+66     	; 0x2472 <puts_P+0x5a>
    2430:	00 e0       	ldi	r16, 0x00	; 0
    2432:	10 e0       	ldi	r17, 0x00	; 0
    2434:	0e c0       	rjmp	.+28     	; 0x2452 <puts_P+0x3a>
    2436:	e0 91 09 02 	lds	r30, 0x0209
    243a:	f0 91 0a 02 	lds	r31, 0x020A
    243e:	20 85       	ldd	r18, Z+8	; 0x08
    2440:	31 85       	ldd	r19, Z+9	; 0x09
    2442:	bf 01       	movw	r22, r30
    2444:	f9 01       	movw	r30, r18
    2446:	09 95       	icall
    2448:	89 2b       	or	r24, r25
    244a:	11 f0       	breq	.+4      	; 0x2450 <puts_P+0x38>
    244c:	0f ef       	ldi	r16, 0xFF	; 255
    244e:	1f ef       	ldi	r17, 0xFF	; 255
    2450:	21 96       	adiw	r28, 0x01	; 1
    2452:	fe 01       	movw	r30, r28
    2454:	84 91       	lpm	r24, Z+
    2456:	88 23       	and	r24, r24
    2458:	71 f7       	brne	.-36     	; 0x2436 <puts_P+0x1e>
    245a:	e0 91 09 02 	lds	r30, 0x0209
    245e:	f0 91 0a 02 	lds	r31, 0x020A
    2462:	20 85       	ldd	r18, Z+8	; 0x08
    2464:	31 85       	ldd	r19, Z+9	; 0x09
    2466:	8a e0       	ldi	r24, 0x0A	; 10
    2468:	bf 01       	movw	r22, r30
    246a:	f9 01       	movw	r30, r18
    246c:	09 95       	icall
    246e:	89 2b       	or	r24, r25
    2470:	11 f0       	breq	.+4      	; 0x2476 <puts_P+0x5e>
    2472:	0f ef       	ldi	r16, 0xFF	; 255
    2474:	1f ef       	ldi	r17, 0xFF	; 255
    2476:	c8 01       	movw	r24, r16
    2478:	df 91       	pop	r29
    247a:	cf 91       	pop	r28
    247c:	1f 91       	pop	r17
    247e:	0f 91       	pop	r16
    2480:	08 95       	ret

00002482 <vfprintf>:
    2482:	2f 92       	push	r2
    2484:	3f 92       	push	r3
    2486:	4f 92       	push	r4
    2488:	5f 92       	push	r5
    248a:	6f 92       	push	r6
    248c:	7f 92       	push	r7
    248e:	8f 92       	push	r8
    2490:	9f 92       	push	r9
    2492:	af 92       	push	r10
    2494:	bf 92       	push	r11
    2496:	cf 92       	push	r12
    2498:	df 92       	push	r13
    249a:	ef 92       	push	r14
    249c:	ff 92       	push	r15
    249e:	0f 93       	push	r16
    24a0:	1f 93       	push	r17
    24a2:	df 93       	push	r29
    24a4:	cf 93       	push	r28
    24a6:	cd b7       	in	r28, 0x3d	; 61
    24a8:	de b7       	in	r29, 0x3e	; 62
    24aa:	2b 97       	sbiw	r28, 0x0b	; 11
    24ac:	0f b6       	in	r0, 0x3f	; 63
    24ae:	f8 94       	cli
    24b0:	de bf       	out	0x3e, r29	; 62
    24b2:	0f be       	out	0x3f, r0	; 63
    24b4:	cd bf       	out	0x3d, r28	; 61
    24b6:	3c 01       	movw	r6, r24
    24b8:	2b 01       	movw	r4, r22
    24ba:	5a 01       	movw	r10, r20
    24bc:	fc 01       	movw	r30, r24
    24be:	17 82       	std	Z+7, r1	; 0x07
    24c0:	16 82       	std	Z+6, r1	; 0x06
    24c2:	83 81       	ldd	r24, Z+3	; 0x03
    24c4:	81 fd       	sbrc	r24, 1
    24c6:	03 c0       	rjmp	.+6      	; 0x24ce <vfprintf+0x4c>
    24c8:	6f ef       	ldi	r22, 0xFF	; 255
    24ca:	7f ef       	ldi	r23, 0xFF	; 255
    24cc:	b9 c1       	rjmp	.+882    	; 0x2840 <vfprintf+0x3be>
    24ce:	9a e0       	ldi	r25, 0x0A	; 10
    24d0:	89 2e       	mov	r8, r25
    24d2:	1e 01       	movw	r2, r28
    24d4:	08 94       	sec
    24d6:	21 1c       	adc	r2, r1
    24d8:	31 1c       	adc	r3, r1
    24da:	f3 01       	movw	r30, r6
    24dc:	23 81       	ldd	r18, Z+3	; 0x03
    24de:	f2 01       	movw	r30, r4
    24e0:	23 fd       	sbrc	r18, 3
    24e2:	85 91       	lpm	r24, Z+
    24e4:	23 ff       	sbrs	r18, 3
    24e6:	81 91       	ld	r24, Z+
    24e8:	2f 01       	movw	r4, r30
    24ea:	88 23       	and	r24, r24
    24ec:	09 f4       	brne	.+2      	; 0x24f0 <vfprintf+0x6e>
    24ee:	a5 c1       	rjmp	.+842    	; 0x283a <vfprintf+0x3b8>
    24f0:	85 32       	cpi	r24, 0x25	; 37
    24f2:	39 f4       	brne	.+14     	; 0x2502 <vfprintf+0x80>
    24f4:	23 fd       	sbrc	r18, 3
    24f6:	85 91       	lpm	r24, Z+
    24f8:	23 ff       	sbrs	r18, 3
    24fa:	81 91       	ld	r24, Z+
    24fc:	2f 01       	movw	r4, r30
    24fe:	85 32       	cpi	r24, 0x25	; 37
    2500:	21 f4       	brne	.+8      	; 0x250a <vfprintf+0x88>
    2502:	90 e0       	ldi	r25, 0x00	; 0
    2504:	b3 01       	movw	r22, r6
    2506:	cc d1       	rcall	.+920    	; 0x28a0 <fputc>
    2508:	e8 cf       	rjmp	.-48     	; 0x24da <vfprintf+0x58>
    250a:	98 2f       	mov	r25, r24
    250c:	ff 24       	eor	r15, r15
    250e:	ee 24       	eor	r14, r14
    2510:	99 24       	eor	r9, r9
    2512:	ff e1       	ldi	r31, 0x1F	; 31
    2514:	ff 15       	cp	r31, r15
    2516:	d0 f0       	brcs	.+52     	; 0x254c <vfprintf+0xca>
    2518:	9b 32       	cpi	r25, 0x2B	; 43
    251a:	69 f0       	breq	.+26     	; 0x2536 <vfprintf+0xb4>
    251c:	9c 32       	cpi	r25, 0x2C	; 44
    251e:	28 f4       	brcc	.+10     	; 0x252a <vfprintf+0xa8>
    2520:	90 32       	cpi	r25, 0x20	; 32
    2522:	59 f0       	breq	.+22     	; 0x253a <vfprintf+0xb8>
    2524:	93 32       	cpi	r25, 0x23	; 35
    2526:	91 f4       	brne	.+36     	; 0x254c <vfprintf+0xca>
    2528:	0e c0       	rjmp	.+28     	; 0x2546 <vfprintf+0xc4>
    252a:	9d 32       	cpi	r25, 0x2D	; 45
    252c:	49 f0       	breq	.+18     	; 0x2540 <vfprintf+0xbe>
    252e:	90 33       	cpi	r25, 0x30	; 48
    2530:	69 f4       	brne	.+26     	; 0x254c <vfprintf+0xca>
    2532:	41 e0       	ldi	r20, 0x01	; 1
    2534:	24 c0       	rjmp	.+72     	; 0x257e <vfprintf+0xfc>
    2536:	52 e0       	ldi	r21, 0x02	; 2
    2538:	f5 2a       	or	r15, r21
    253a:	84 e0       	ldi	r24, 0x04	; 4
    253c:	f8 2a       	or	r15, r24
    253e:	28 c0       	rjmp	.+80     	; 0x2590 <vfprintf+0x10e>
    2540:	98 e0       	ldi	r25, 0x08	; 8
    2542:	f9 2a       	or	r15, r25
    2544:	25 c0       	rjmp	.+74     	; 0x2590 <vfprintf+0x10e>
    2546:	e0 e1       	ldi	r30, 0x10	; 16
    2548:	fe 2a       	or	r15, r30
    254a:	22 c0       	rjmp	.+68     	; 0x2590 <vfprintf+0x10e>
    254c:	f7 fc       	sbrc	r15, 7
    254e:	29 c0       	rjmp	.+82     	; 0x25a2 <vfprintf+0x120>
    2550:	89 2f       	mov	r24, r25
    2552:	80 53       	subi	r24, 0x30	; 48
    2554:	8a 30       	cpi	r24, 0x0A	; 10
    2556:	70 f4       	brcc	.+28     	; 0x2574 <vfprintf+0xf2>
    2558:	f6 fe       	sbrs	r15, 6
    255a:	05 c0       	rjmp	.+10     	; 0x2566 <vfprintf+0xe4>
    255c:	98 9c       	mul	r9, r8
    255e:	90 2c       	mov	r9, r0
    2560:	11 24       	eor	r1, r1
    2562:	98 0e       	add	r9, r24
    2564:	15 c0       	rjmp	.+42     	; 0x2590 <vfprintf+0x10e>
    2566:	e8 9c       	mul	r14, r8
    2568:	e0 2c       	mov	r14, r0
    256a:	11 24       	eor	r1, r1
    256c:	e8 0e       	add	r14, r24
    256e:	f0 e2       	ldi	r31, 0x20	; 32
    2570:	ff 2a       	or	r15, r31
    2572:	0e c0       	rjmp	.+28     	; 0x2590 <vfprintf+0x10e>
    2574:	9e 32       	cpi	r25, 0x2E	; 46
    2576:	29 f4       	brne	.+10     	; 0x2582 <vfprintf+0x100>
    2578:	f6 fc       	sbrc	r15, 6
    257a:	5f c1       	rjmp	.+702    	; 0x283a <vfprintf+0x3b8>
    257c:	40 e4       	ldi	r20, 0x40	; 64
    257e:	f4 2a       	or	r15, r20
    2580:	07 c0       	rjmp	.+14     	; 0x2590 <vfprintf+0x10e>
    2582:	9c 36       	cpi	r25, 0x6C	; 108
    2584:	19 f4       	brne	.+6      	; 0x258c <vfprintf+0x10a>
    2586:	50 e8       	ldi	r21, 0x80	; 128
    2588:	f5 2a       	or	r15, r21
    258a:	02 c0       	rjmp	.+4      	; 0x2590 <vfprintf+0x10e>
    258c:	98 36       	cpi	r25, 0x68	; 104
    258e:	49 f4       	brne	.+18     	; 0x25a2 <vfprintf+0x120>
    2590:	f2 01       	movw	r30, r4
    2592:	23 fd       	sbrc	r18, 3
    2594:	95 91       	lpm	r25, Z+
    2596:	23 ff       	sbrs	r18, 3
    2598:	91 91       	ld	r25, Z+
    259a:	2f 01       	movw	r4, r30
    259c:	99 23       	and	r25, r25
    259e:	09 f0       	breq	.+2      	; 0x25a2 <vfprintf+0x120>
    25a0:	b8 cf       	rjmp	.-144    	; 0x2512 <vfprintf+0x90>
    25a2:	89 2f       	mov	r24, r25
    25a4:	85 54       	subi	r24, 0x45	; 69
    25a6:	83 30       	cpi	r24, 0x03	; 3
    25a8:	18 f0       	brcs	.+6      	; 0x25b0 <vfprintf+0x12e>
    25aa:	80 52       	subi	r24, 0x20	; 32
    25ac:	83 30       	cpi	r24, 0x03	; 3
    25ae:	38 f4       	brcc	.+14     	; 0x25be <vfprintf+0x13c>
    25b0:	44 e0       	ldi	r20, 0x04	; 4
    25b2:	50 e0       	ldi	r21, 0x00	; 0
    25b4:	a4 0e       	add	r10, r20
    25b6:	b5 1e       	adc	r11, r21
    25b8:	5f e3       	ldi	r21, 0x3F	; 63
    25ba:	59 83       	std	Y+1, r21	; 0x01
    25bc:	0f c0       	rjmp	.+30     	; 0x25dc <vfprintf+0x15a>
    25be:	93 36       	cpi	r25, 0x63	; 99
    25c0:	31 f0       	breq	.+12     	; 0x25ce <vfprintf+0x14c>
    25c2:	93 37       	cpi	r25, 0x73	; 115
    25c4:	79 f0       	breq	.+30     	; 0x25e4 <vfprintf+0x162>
    25c6:	93 35       	cpi	r25, 0x53	; 83
    25c8:	09 f0       	breq	.+2      	; 0x25cc <vfprintf+0x14a>
    25ca:	52 c0       	rjmp	.+164    	; 0x2670 <vfprintf+0x1ee>
    25cc:	1f c0       	rjmp	.+62     	; 0x260c <vfprintf+0x18a>
    25ce:	f5 01       	movw	r30, r10
    25d0:	80 81       	ld	r24, Z
    25d2:	89 83       	std	Y+1, r24	; 0x01
    25d4:	42 e0       	ldi	r20, 0x02	; 2
    25d6:	50 e0       	ldi	r21, 0x00	; 0
    25d8:	a4 0e       	add	r10, r20
    25da:	b5 1e       	adc	r11, r21
    25dc:	61 01       	movw	r12, r2
    25de:	01 e0       	ldi	r16, 0x01	; 1
    25e0:	10 e0       	ldi	r17, 0x00	; 0
    25e2:	11 c0       	rjmp	.+34     	; 0x2606 <vfprintf+0x184>
    25e4:	f5 01       	movw	r30, r10
    25e6:	c0 80       	ld	r12, Z
    25e8:	d1 80       	ldd	r13, Z+1	; 0x01
    25ea:	f6 fc       	sbrc	r15, 6
    25ec:	03 c0       	rjmp	.+6      	; 0x25f4 <vfprintf+0x172>
    25ee:	6f ef       	ldi	r22, 0xFF	; 255
    25f0:	7f ef       	ldi	r23, 0xFF	; 255
    25f2:	02 c0       	rjmp	.+4      	; 0x25f8 <vfprintf+0x176>
    25f4:	69 2d       	mov	r22, r9
    25f6:	70 e0       	ldi	r23, 0x00	; 0
    25f8:	42 e0       	ldi	r20, 0x02	; 2
    25fa:	50 e0       	ldi	r21, 0x00	; 0
    25fc:	a4 0e       	add	r10, r20
    25fe:	b5 1e       	adc	r11, r21
    2600:	c6 01       	movw	r24, r12
    2602:	43 d1       	rcall	.+646    	; 0x288a <strnlen>
    2604:	8c 01       	movw	r16, r24
    2606:	5f e7       	ldi	r21, 0x7F	; 127
    2608:	f5 22       	and	r15, r21
    260a:	13 c0       	rjmp	.+38     	; 0x2632 <vfprintf+0x1b0>
    260c:	f5 01       	movw	r30, r10
    260e:	c0 80       	ld	r12, Z
    2610:	d1 80       	ldd	r13, Z+1	; 0x01
    2612:	f6 fc       	sbrc	r15, 6
    2614:	03 c0       	rjmp	.+6      	; 0x261c <vfprintf+0x19a>
    2616:	6f ef       	ldi	r22, 0xFF	; 255
    2618:	7f ef       	ldi	r23, 0xFF	; 255
    261a:	02 c0       	rjmp	.+4      	; 0x2620 <vfprintf+0x19e>
    261c:	69 2d       	mov	r22, r9
    261e:	70 e0       	ldi	r23, 0x00	; 0
    2620:	42 e0       	ldi	r20, 0x02	; 2
    2622:	50 e0       	ldi	r21, 0x00	; 0
    2624:	a4 0e       	add	r10, r20
    2626:	b5 1e       	adc	r11, r21
    2628:	c6 01       	movw	r24, r12
    262a:	24 d1       	rcall	.+584    	; 0x2874 <strnlen_P>
    262c:	8c 01       	movw	r16, r24
    262e:	50 e8       	ldi	r21, 0x80	; 128
    2630:	f5 2a       	or	r15, r21
    2632:	f3 fe       	sbrs	r15, 3
    2634:	06 c0       	rjmp	.+12     	; 0x2642 <vfprintf+0x1c0>
    2636:	18 c0       	rjmp	.+48     	; 0x2668 <vfprintf+0x1e6>
    2638:	80 e2       	ldi	r24, 0x20	; 32
    263a:	90 e0       	ldi	r25, 0x00	; 0
    263c:	b3 01       	movw	r22, r6
    263e:	30 d1       	rcall	.+608    	; 0x28a0 <fputc>
    2640:	ea 94       	dec	r14
    2642:	8e 2d       	mov	r24, r14
    2644:	90 e0       	ldi	r25, 0x00	; 0
    2646:	08 17       	cp	r16, r24
    2648:	19 07       	cpc	r17, r25
    264a:	b0 f3       	brcs	.-20     	; 0x2638 <vfprintf+0x1b6>
    264c:	0d c0       	rjmp	.+26     	; 0x2668 <vfprintf+0x1e6>
    264e:	f6 01       	movw	r30, r12
    2650:	f7 fc       	sbrc	r15, 7
    2652:	85 91       	lpm	r24, Z+
    2654:	f7 fe       	sbrs	r15, 7
    2656:	81 91       	ld	r24, Z+
    2658:	6f 01       	movw	r12, r30
    265a:	90 e0       	ldi	r25, 0x00	; 0
    265c:	b3 01       	movw	r22, r6
    265e:	20 d1       	rcall	.+576    	; 0x28a0 <fputc>
    2660:	e1 10       	cpse	r14, r1
    2662:	ea 94       	dec	r14
    2664:	01 50       	subi	r16, 0x01	; 1
    2666:	10 40       	sbci	r17, 0x00	; 0
    2668:	01 15       	cp	r16, r1
    266a:	11 05       	cpc	r17, r1
    266c:	81 f7       	brne	.-32     	; 0x264e <vfprintf+0x1cc>
    266e:	e2 c0       	rjmp	.+452    	; 0x2834 <vfprintf+0x3b2>
    2670:	94 36       	cpi	r25, 0x64	; 100
    2672:	11 f0       	breq	.+4      	; 0x2678 <vfprintf+0x1f6>
    2674:	99 36       	cpi	r25, 0x69	; 105
    2676:	61 f5       	brne	.+88     	; 0x26d0 <vfprintf+0x24e>
    2678:	f7 fe       	sbrs	r15, 7
    267a:	08 c0       	rjmp	.+16     	; 0x268c <vfprintf+0x20a>
    267c:	f5 01       	movw	r30, r10
    267e:	20 81       	ld	r18, Z
    2680:	31 81       	ldd	r19, Z+1	; 0x01
    2682:	42 81       	ldd	r20, Z+2	; 0x02
    2684:	53 81       	ldd	r21, Z+3	; 0x03
    2686:	84 e0       	ldi	r24, 0x04	; 4
    2688:	90 e0       	ldi	r25, 0x00	; 0
    268a:	0a c0       	rjmp	.+20     	; 0x26a0 <vfprintf+0x21e>
    268c:	f5 01       	movw	r30, r10
    268e:	80 81       	ld	r24, Z
    2690:	91 81       	ldd	r25, Z+1	; 0x01
    2692:	9c 01       	movw	r18, r24
    2694:	44 27       	eor	r20, r20
    2696:	37 fd       	sbrc	r19, 7
    2698:	40 95       	com	r20
    269a:	54 2f       	mov	r21, r20
    269c:	82 e0       	ldi	r24, 0x02	; 2
    269e:	90 e0       	ldi	r25, 0x00	; 0
    26a0:	a8 0e       	add	r10, r24
    26a2:	b9 1e       	adc	r11, r25
    26a4:	9f e6       	ldi	r25, 0x6F	; 111
    26a6:	f9 22       	and	r15, r25
    26a8:	57 ff       	sbrs	r21, 7
    26aa:	09 c0       	rjmp	.+18     	; 0x26be <vfprintf+0x23c>
    26ac:	50 95       	com	r21
    26ae:	40 95       	com	r20
    26b0:	30 95       	com	r19
    26b2:	21 95       	neg	r18
    26b4:	3f 4f       	sbci	r19, 0xFF	; 255
    26b6:	4f 4f       	sbci	r20, 0xFF	; 255
    26b8:	5f 4f       	sbci	r21, 0xFF	; 255
    26ba:	e0 e8       	ldi	r30, 0x80	; 128
    26bc:	fe 2a       	or	r15, r30
    26be:	ca 01       	movw	r24, r20
    26c0:	b9 01       	movw	r22, r18
    26c2:	a1 01       	movw	r20, r2
    26c4:	2a e0       	ldi	r18, 0x0A	; 10
    26c6:	30 e0       	ldi	r19, 0x00	; 0
    26c8:	17 d1       	rcall	.+558    	; 0x28f8 <__ultoa_invert>
    26ca:	d8 2e       	mov	r13, r24
    26cc:	d2 18       	sub	r13, r2
    26ce:	3f c0       	rjmp	.+126    	; 0x274e <vfprintf+0x2cc>
    26d0:	95 37       	cpi	r25, 0x75	; 117
    26d2:	29 f4       	brne	.+10     	; 0x26de <vfprintf+0x25c>
    26d4:	1f 2d       	mov	r17, r15
    26d6:	1f 7e       	andi	r17, 0xEF	; 239
    26d8:	2a e0       	ldi	r18, 0x0A	; 10
    26da:	30 e0       	ldi	r19, 0x00	; 0
    26dc:	1d c0       	rjmp	.+58     	; 0x2718 <vfprintf+0x296>
    26de:	1f 2d       	mov	r17, r15
    26e0:	19 7f       	andi	r17, 0xF9	; 249
    26e2:	9f 36       	cpi	r25, 0x6F	; 111
    26e4:	61 f0       	breq	.+24     	; 0x26fe <vfprintf+0x27c>
    26e6:	90 37       	cpi	r25, 0x70	; 112
    26e8:	20 f4       	brcc	.+8      	; 0x26f2 <vfprintf+0x270>
    26ea:	98 35       	cpi	r25, 0x58	; 88
    26ec:	09 f0       	breq	.+2      	; 0x26f0 <vfprintf+0x26e>
    26ee:	a5 c0       	rjmp	.+330    	; 0x283a <vfprintf+0x3b8>
    26f0:	0f c0       	rjmp	.+30     	; 0x2710 <vfprintf+0x28e>
    26f2:	90 37       	cpi	r25, 0x70	; 112
    26f4:	39 f0       	breq	.+14     	; 0x2704 <vfprintf+0x282>
    26f6:	98 37       	cpi	r25, 0x78	; 120
    26f8:	09 f0       	breq	.+2      	; 0x26fc <vfprintf+0x27a>
    26fa:	9f c0       	rjmp	.+318    	; 0x283a <vfprintf+0x3b8>
    26fc:	04 c0       	rjmp	.+8      	; 0x2706 <vfprintf+0x284>
    26fe:	28 e0       	ldi	r18, 0x08	; 8
    2700:	30 e0       	ldi	r19, 0x00	; 0
    2702:	0a c0       	rjmp	.+20     	; 0x2718 <vfprintf+0x296>
    2704:	10 61       	ori	r17, 0x10	; 16
    2706:	14 fd       	sbrc	r17, 4
    2708:	14 60       	ori	r17, 0x04	; 4
    270a:	20 e1       	ldi	r18, 0x10	; 16
    270c:	30 e0       	ldi	r19, 0x00	; 0
    270e:	04 c0       	rjmp	.+8      	; 0x2718 <vfprintf+0x296>
    2710:	14 fd       	sbrc	r17, 4
    2712:	16 60       	ori	r17, 0x06	; 6
    2714:	20 e1       	ldi	r18, 0x10	; 16
    2716:	32 e0       	ldi	r19, 0x02	; 2
    2718:	17 ff       	sbrs	r17, 7
    271a:	08 c0       	rjmp	.+16     	; 0x272c <vfprintf+0x2aa>
    271c:	f5 01       	movw	r30, r10
    271e:	60 81       	ld	r22, Z
    2720:	71 81       	ldd	r23, Z+1	; 0x01
    2722:	82 81       	ldd	r24, Z+2	; 0x02
    2724:	93 81       	ldd	r25, Z+3	; 0x03
    2726:	44 e0       	ldi	r20, 0x04	; 4
    2728:	50 e0       	ldi	r21, 0x00	; 0
    272a:	08 c0       	rjmp	.+16     	; 0x273c <vfprintf+0x2ba>
    272c:	f5 01       	movw	r30, r10
    272e:	80 81       	ld	r24, Z
    2730:	91 81       	ldd	r25, Z+1	; 0x01
    2732:	bc 01       	movw	r22, r24
    2734:	80 e0       	ldi	r24, 0x00	; 0
    2736:	90 e0       	ldi	r25, 0x00	; 0
    2738:	42 e0       	ldi	r20, 0x02	; 2
    273a:	50 e0       	ldi	r21, 0x00	; 0
    273c:	a4 0e       	add	r10, r20
    273e:	b5 1e       	adc	r11, r21
    2740:	a1 01       	movw	r20, r2
    2742:	da d0       	rcall	.+436    	; 0x28f8 <__ultoa_invert>
    2744:	d8 2e       	mov	r13, r24
    2746:	d2 18       	sub	r13, r2
    2748:	8f e7       	ldi	r24, 0x7F	; 127
    274a:	f8 2e       	mov	r15, r24
    274c:	f1 22       	and	r15, r17
    274e:	f6 fe       	sbrs	r15, 6
    2750:	0b c0       	rjmp	.+22     	; 0x2768 <vfprintf+0x2e6>
    2752:	5e ef       	ldi	r21, 0xFE	; 254
    2754:	f5 22       	and	r15, r21
    2756:	d9 14       	cp	r13, r9
    2758:	38 f4       	brcc	.+14     	; 0x2768 <vfprintf+0x2e6>
    275a:	f4 fe       	sbrs	r15, 4
    275c:	07 c0       	rjmp	.+14     	; 0x276c <vfprintf+0x2ea>
    275e:	f2 fc       	sbrc	r15, 2
    2760:	05 c0       	rjmp	.+10     	; 0x276c <vfprintf+0x2ea>
    2762:	8f ee       	ldi	r24, 0xEF	; 239
    2764:	f8 22       	and	r15, r24
    2766:	02 c0       	rjmp	.+4      	; 0x276c <vfprintf+0x2ea>
    2768:	1d 2d       	mov	r17, r13
    276a:	01 c0       	rjmp	.+2      	; 0x276e <vfprintf+0x2ec>
    276c:	19 2d       	mov	r17, r9
    276e:	f4 fe       	sbrs	r15, 4
    2770:	0d c0       	rjmp	.+26     	; 0x278c <vfprintf+0x30a>
    2772:	fe 01       	movw	r30, r28
    2774:	ed 0d       	add	r30, r13
    2776:	f1 1d       	adc	r31, r1
    2778:	80 81       	ld	r24, Z
    277a:	80 33       	cpi	r24, 0x30	; 48
    277c:	19 f4       	brne	.+6      	; 0x2784 <vfprintf+0x302>
    277e:	99 ee       	ldi	r25, 0xE9	; 233
    2780:	f9 22       	and	r15, r25
    2782:	08 c0       	rjmp	.+16     	; 0x2794 <vfprintf+0x312>
    2784:	1f 5f       	subi	r17, 0xFF	; 255
    2786:	f2 fe       	sbrs	r15, 2
    2788:	05 c0       	rjmp	.+10     	; 0x2794 <vfprintf+0x312>
    278a:	03 c0       	rjmp	.+6      	; 0x2792 <vfprintf+0x310>
    278c:	8f 2d       	mov	r24, r15
    278e:	86 78       	andi	r24, 0x86	; 134
    2790:	09 f0       	breq	.+2      	; 0x2794 <vfprintf+0x312>
    2792:	1f 5f       	subi	r17, 0xFF	; 255
    2794:	0f 2d       	mov	r16, r15
    2796:	f3 fc       	sbrc	r15, 3
    2798:	13 c0       	rjmp	.+38     	; 0x27c0 <vfprintf+0x33e>
    279a:	f0 fe       	sbrs	r15, 0
    279c:	0e c0       	rjmp	.+28     	; 0x27ba <vfprintf+0x338>
    279e:	1e 15       	cp	r17, r14
    27a0:	10 f0       	brcs	.+4      	; 0x27a6 <vfprintf+0x324>
    27a2:	9d 2c       	mov	r9, r13
    27a4:	0a c0       	rjmp	.+20     	; 0x27ba <vfprintf+0x338>
    27a6:	9d 2c       	mov	r9, r13
    27a8:	9e 0c       	add	r9, r14
    27aa:	91 1a       	sub	r9, r17
    27ac:	1e 2d       	mov	r17, r14
    27ae:	05 c0       	rjmp	.+10     	; 0x27ba <vfprintf+0x338>
    27b0:	80 e2       	ldi	r24, 0x20	; 32
    27b2:	90 e0       	ldi	r25, 0x00	; 0
    27b4:	b3 01       	movw	r22, r6
    27b6:	74 d0       	rcall	.+232    	; 0x28a0 <fputc>
    27b8:	1f 5f       	subi	r17, 0xFF	; 255
    27ba:	1e 15       	cp	r17, r14
    27bc:	c8 f3       	brcs	.-14     	; 0x27b0 <vfprintf+0x32e>
    27be:	04 c0       	rjmp	.+8      	; 0x27c8 <vfprintf+0x346>
    27c0:	1e 15       	cp	r17, r14
    27c2:	10 f4       	brcc	.+4      	; 0x27c8 <vfprintf+0x346>
    27c4:	e1 1a       	sub	r14, r17
    27c6:	01 c0       	rjmp	.+2      	; 0x27ca <vfprintf+0x348>
    27c8:	ee 24       	eor	r14, r14
    27ca:	04 ff       	sbrs	r16, 4
    27cc:	0e c0       	rjmp	.+28     	; 0x27ea <vfprintf+0x368>
    27ce:	80 e3       	ldi	r24, 0x30	; 48
    27d0:	90 e0       	ldi	r25, 0x00	; 0
    27d2:	b3 01       	movw	r22, r6
    27d4:	65 d0       	rcall	.+202    	; 0x28a0 <fputc>
    27d6:	02 ff       	sbrs	r16, 2
    27d8:	1b c0       	rjmp	.+54     	; 0x2810 <vfprintf+0x38e>
    27da:	01 fd       	sbrc	r16, 1
    27dc:	03 c0       	rjmp	.+6      	; 0x27e4 <vfprintf+0x362>
    27de:	88 e7       	ldi	r24, 0x78	; 120
    27e0:	90 e0       	ldi	r25, 0x00	; 0
    27e2:	0e c0       	rjmp	.+28     	; 0x2800 <vfprintf+0x37e>
    27e4:	88 e5       	ldi	r24, 0x58	; 88
    27e6:	90 e0       	ldi	r25, 0x00	; 0
    27e8:	0b c0       	rjmp	.+22     	; 0x2800 <vfprintf+0x37e>
    27ea:	80 2f       	mov	r24, r16
    27ec:	86 78       	andi	r24, 0x86	; 134
    27ee:	81 f0       	breq	.+32     	; 0x2810 <vfprintf+0x38e>
    27f0:	01 ff       	sbrs	r16, 1
    27f2:	02 c0       	rjmp	.+4      	; 0x27f8 <vfprintf+0x376>
    27f4:	8b e2       	ldi	r24, 0x2B	; 43
    27f6:	01 c0       	rjmp	.+2      	; 0x27fa <vfprintf+0x378>
    27f8:	80 e2       	ldi	r24, 0x20	; 32
    27fa:	f7 fc       	sbrc	r15, 7
    27fc:	8d e2       	ldi	r24, 0x2D	; 45
    27fe:	90 e0       	ldi	r25, 0x00	; 0
    2800:	b3 01       	movw	r22, r6
    2802:	4e d0       	rcall	.+156    	; 0x28a0 <fputc>
    2804:	05 c0       	rjmp	.+10     	; 0x2810 <vfprintf+0x38e>
    2806:	80 e3       	ldi	r24, 0x30	; 48
    2808:	90 e0       	ldi	r25, 0x00	; 0
    280a:	b3 01       	movw	r22, r6
    280c:	49 d0       	rcall	.+146    	; 0x28a0 <fputc>
    280e:	9a 94       	dec	r9
    2810:	d9 14       	cp	r13, r9
    2812:	c8 f3       	brcs	.-14     	; 0x2806 <vfprintf+0x384>
    2814:	da 94       	dec	r13
    2816:	f1 01       	movw	r30, r2
    2818:	ed 0d       	add	r30, r13
    281a:	f1 1d       	adc	r31, r1
    281c:	80 81       	ld	r24, Z
    281e:	90 e0       	ldi	r25, 0x00	; 0
    2820:	b3 01       	movw	r22, r6
    2822:	3e d0       	rcall	.+124    	; 0x28a0 <fputc>
    2824:	dd 20       	and	r13, r13
    2826:	b1 f7       	brne	.-20     	; 0x2814 <vfprintf+0x392>
    2828:	05 c0       	rjmp	.+10     	; 0x2834 <vfprintf+0x3b2>
    282a:	80 e2       	ldi	r24, 0x20	; 32
    282c:	90 e0       	ldi	r25, 0x00	; 0
    282e:	b3 01       	movw	r22, r6
    2830:	37 d0       	rcall	.+110    	; 0x28a0 <fputc>
    2832:	ea 94       	dec	r14
    2834:	ee 20       	and	r14, r14
    2836:	c9 f7       	brne	.-14     	; 0x282a <vfprintf+0x3a8>
    2838:	50 ce       	rjmp	.-864    	; 0x24da <vfprintf+0x58>
    283a:	f3 01       	movw	r30, r6
    283c:	66 81       	ldd	r22, Z+6	; 0x06
    283e:	77 81       	ldd	r23, Z+7	; 0x07
    2840:	cb 01       	movw	r24, r22
    2842:	2b 96       	adiw	r28, 0x0b	; 11
    2844:	0f b6       	in	r0, 0x3f	; 63
    2846:	f8 94       	cli
    2848:	de bf       	out	0x3e, r29	; 62
    284a:	0f be       	out	0x3f, r0	; 63
    284c:	cd bf       	out	0x3d, r28	; 61
    284e:	cf 91       	pop	r28
    2850:	df 91       	pop	r29
    2852:	1f 91       	pop	r17
    2854:	0f 91       	pop	r16
    2856:	ff 90       	pop	r15
    2858:	ef 90       	pop	r14
    285a:	df 90       	pop	r13
    285c:	cf 90       	pop	r12
    285e:	bf 90       	pop	r11
    2860:	af 90       	pop	r10
    2862:	9f 90       	pop	r9
    2864:	8f 90       	pop	r8
    2866:	7f 90       	pop	r7
    2868:	6f 90       	pop	r6
    286a:	5f 90       	pop	r5
    286c:	4f 90       	pop	r4
    286e:	3f 90       	pop	r3
    2870:	2f 90       	pop	r2
    2872:	08 95       	ret

00002874 <strnlen_P>:
    2874:	fc 01       	movw	r30, r24
    2876:	05 90       	lpm	r0, Z+
    2878:	61 50       	subi	r22, 0x01	; 1
    287a:	70 40       	sbci	r23, 0x00	; 0
    287c:	01 10       	cpse	r0, r1
    287e:	d8 f7       	brcc	.-10     	; 0x2876 <strnlen_P+0x2>
    2880:	80 95       	com	r24
    2882:	90 95       	com	r25
    2884:	8e 0f       	add	r24, r30
    2886:	9f 1f       	adc	r25, r31
    2888:	08 95       	ret

0000288a <strnlen>:
    288a:	fc 01       	movw	r30, r24
    288c:	61 50       	subi	r22, 0x01	; 1
    288e:	70 40       	sbci	r23, 0x00	; 0
    2890:	01 90       	ld	r0, Z+
    2892:	01 10       	cpse	r0, r1
    2894:	d8 f7       	brcc	.-10     	; 0x288c <strnlen+0x2>
    2896:	80 95       	com	r24
    2898:	90 95       	com	r25
    289a:	8e 0f       	add	r24, r30
    289c:	9f 1f       	adc	r25, r31
    289e:	08 95       	ret

000028a0 <fputc>:
    28a0:	0f 93       	push	r16
    28a2:	1f 93       	push	r17
    28a4:	cf 93       	push	r28
    28a6:	df 93       	push	r29
    28a8:	8c 01       	movw	r16, r24
    28aa:	eb 01       	movw	r28, r22
    28ac:	8b 81       	ldd	r24, Y+3	; 0x03
    28ae:	81 ff       	sbrs	r24, 1
    28b0:	1b c0       	rjmp	.+54     	; 0x28e8 <fputc+0x48>
    28b2:	82 ff       	sbrs	r24, 2
    28b4:	0d c0       	rjmp	.+26     	; 0x28d0 <fputc+0x30>
    28b6:	2e 81       	ldd	r18, Y+6	; 0x06
    28b8:	3f 81       	ldd	r19, Y+7	; 0x07
    28ba:	8c 81       	ldd	r24, Y+4	; 0x04
    28bc:	9d 81       	ldd	r25, Y+5	; 0x05
    28be:	28 17       	cp	r18, r24
    28c0:	39 07       	cpc	r19, r25
    28c2:	64 f4       	brge	.+24     	; 0x28dc <fputc+0x3c>
    28c4:	e8 81       	ld	r30, Y
    28c6:	f9 81       	ldd	r31, Y+1	; 0x01
    28c8:	01 93       	st	Z+, r16
    28ca:	f9 83       	std	Y+1, r31	; 0x01
    28cc:	e8 83       	st	Y, r30
    28ce:	06 c0       	rjmp	.+12     	; 0x28dc <fputc+0x3c>
    28d0:	e8 85       	ldd	r30, Y+8	; 0x08
    28d2:	f9 85       	ldd	r31, Y+9	; 0x09
    28d4:	80 2f       	mov	r24, r16
    28d6:	09 95       	icall
    28d8:	89 2b       	or	r24, r25
    28da:	31 f4       	brne	.+12     	; 0x28e8 <fputc+0x48>
    28dc:	8e 81       	ldd	r24, Y+6	; 0x06
    28de:	9f 81       	ldd	r25, Y+7	; 0x07
    28e0:	01 96       	adiw	r24, 0x01	; 1
    28e2:	9f 83       	std	Y+7, r25	; 0x07
    28e4:	8e 83       	std	Y+6, r24	; 0x06
    28e6:	02 c0       	rjmp	.+4      	; 0x28ec <fputc+0x4c>
    28e8:	0f ef       	ldi	r16, 0xFF	; 255
    28ea:	1f ef       	ldi	r17, 0xFF	; 255
    28ec:	c8 01       	movw	r24, r16
    28ee:	df 91       	pop	r29
    28f0:	cf 91       	pop	r28
    28f2:	1f 91       	pop	r17
    28f4:	0f 91       	pop	r16
    28f6:	08 95       	ret

000028f8 <__ultoa_invert>:
    28f8:	fa 01       	movw	r30, r20
    28fa:	aa 27       	eor	r26, r26
    28fc:	28 30       	cpi	r18, 0x08	; 8
    28fe:	51 f1       	breq	.+84     	; 0x2954 <__ultoa_invert+0x5c>
    2900:	20 31       	cpi	r18, 0x10	; 16
    2902:	81 f1       	breq	.+96     	; 0x2964 <__ultoa_invert+0x6c>
    2904:	e8 94       	clt
    2906:	6f 93       	push	r22
    2908:	6e 7f       	andi	r22, 0xFE	; 254
    290a:	6e 5f       	subi	r22, 0xFE	; 254
    290c:	7f 4f       	sbci	r23, 0xFF	; 255
    290e:	8f 4f       	sbci	r24, 0xFF	; 255
    2910:	9f 4f       	sbci	r25, 0xFF	; 255
    2912:	af 4f       	sbci	r26, 0xFF	; 255
    2914:	b1 e0       	ldi	r27, 0x01	; 1
    2916:	3e d0       	rcall	.+124    	; 0x2994 <__ultoa_invert+0x9c>
    2918:	b4 e0       	ldi	r27, 0x04	; 4
    291a:	3c d0       	rcall	.+120    	; 0x2994 <__ultoa_invert+0x9c>
    291c:	67 0f       	add	r22, r23
    291e:	78 1f       	adc	r23, r24
    2920:	89 1f       	adc	r24, r25
    2922:	9a 1f       	adc	r25, r26
    2924:	a1 1d       	adc	r26, r1
    2926:	68 0f       	add	r22, r24
    2928:	79 1f       	adc	r23, r25
    292a:	8a 1f       	adc	r24, r26
    292c:	91 1d       	adc	r25, r1
    292e:	a1 1d       	adc	r26, r1
    2930:	6a 0f       	add	r22, r26
    2932:	71 1d       	adc	r23, r1
    2934:	81 1d       	adc	r24, r1
    2936:	91 1d       	adc	r25, r1
    2938:	a1 1d       	adc	r26, r1
    293a:	20 d0       	rcall	.+64     	; 0x297c <__ultoa_invert+0x84>
    293c:	09 f4       	brne	.+2      	; 0x2940 <__ultoa_invert+0x48>
    293e:	68 94       	set
    2940:	3f 91       	pop	r19
    2942:	2a e0       	ldi	r18, 0x0A	; 10
    2944:	26 9f       	mul	r18, r22
    2946:	11 24       	eor	r1, r1
    2948:	30 19       	sub	r19, r0
    294a:	30 5d       	subi	r19, 0xD0	; 208
    294c:	31 93       	st	Z+, r19
    294e:	de f6       	brtc	.-74     	; 0x2906 <__ultoa_invert+0xe>
    2950:	cf 01       	movw	r24, r30
    2952:	08 95       	ret
    2954:	46 2f       	mov	r20, r22
    2956:	47 70       	andi	r20, 0x07	; 7
    2958:	40 5d       	subi	r20, 0xD0	; 208
    295a:	41 93       	st	Z+, r20
    295c:	b3 e0       	ldi	r27, 0x03	; 3
    295e:	0f d0       	rcall	.+30     	; 0x297e <__ultoa_invert+0x86>
    2960:	c9 f7       	brne	.-14     	; 0x2954 <__ultoa_invert+0x5c>
    2962:	f6 cf       	rjmp	.-20     	; 0x2950 <__ultoa_invert+0x58>
    2964:	46 2f       	mov	r20, r22
    2966:	4f 70       	andi	r20, 0x0F	; 15
    2968:	40 5d       	subi	r20, 0xD0	; 208
    296a:	4a 33       	cpi	r20, 0x3A	; 58
    296c:	18 f0       	brcs	.+6      	; 0x2974 <__ultoa_invert+0x7c>
    296e:	49 5d       	subi	r20, 0xD9	; 217
    2970:	31 fd       	sbrc	r19, 1
    2972:	40 52       	subi	r20, 0x20	; 32
    2974:	41 93       	st	Z+, r20
    2976:	02 d0       	rcall	.+4      	; 0x297c <__ultoa_invert+0x84>
    2978:	a9 f7       	brne	.-22     	; 0x2964 <__ultoa_invert+0x6c>
    297a:	ea cf       	rjmp	.-44     	; 0x2950 <__ultoa_invert+0x58>
    297c:	b4 e0       	ldi	r27, 0x04	; 4
    297e:	a6 95       	lsr	r26
    2980:	97 95       	ror	r25
    2982:	87 95       	ror	r24
    2984:	77 95       	ror	r23
    2986:	67 95       	ror	r22
    2988:	ba 95       	dec	r27
    298a:	c9 f7       	brne	.-14     	; 0x297e <__ultoa_invert+0x86>
    298c:	00 97       	sbiw	r24, 0x00	; 0
    298e:	61 05       	cpc	r22, r1
    2990:	71 05       	cpc	r23, r1
    2992:	08 95       	ret
    2994:	9b 01       	movw	r18, r22
    2996:	ac 01       	movw	r20, r24
    2998:	0a 2e       	mov	r0, r26
    299a:	06 94       	lsr	r0
    299c:	57 95       	ror	r21
    299e:	47 95       	ror	r20
    29a0:	37 95       	ror	r19
    29a2:	27 95       	ror	r18
    29a4:	ba 95       	dec	r27
    29a6:	c9 f7       	brne	.-14     	; 0x299a <__ultoa_invert+0xa2>
    29a8:	62 0f       	add	r22, r18
    29aa:	73 1f       	adc	r23, r19
    29ac:	84 1f       	adc	r24, r20
    29ae:	95 1f       	adc	r25, r21
    29b0:	a0 1d       	adc	r26, r0
    29b2:	08 95       	ret

000029b4 <_exit>:
    29b4:	f8 94       	cli

000029b6 <__stop_program>:
    29b6:	ff cf       	rjmp	.-2      	; 0x29b6 <__stop_program>
